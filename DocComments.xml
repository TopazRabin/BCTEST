<?xml version="1.0"?>
<doc>
    <application>
        <id>437dbf0e-84ff-417a-965d-ed2bb9650972</id>
        <name>Base Application</name>
        <publisher>Microsoft</publisher>
        <version>17.0.16993.0</version>
    </application>
    <members>
        <member name="M:.Price Asset.GetNo(Price Asset@)">
            <summary>
            
            </summary>
            <param name="PriceAsset">....</param>
            <returns>  .</returns>
        </member>
        <member name="M:.Price Asset.GetId(Price Asset@)">
            <summary>
            
            </summary>
            <param name="PriceAsset">....</param>
            <returns>  .</returns>
        </member>
        <member name="M:.Price Asset.IsLookupOK(Price Asset@):Boolean">
            <summary>
            
            </summary>
            <param name="PriceAsset">....</param>
            <returns>  .</returns>
        </member>
        <member name="M:.Price Asset.ValidateUnitOfMeasure(Price Asset@):Boolean">
            <summary>
            
            </summary>
            <param name="PriceAsset">....</param>
            <returns>  .</returns>
        </member>
        <member name="M:.Price Asset.IsLookupUnitOfMeasureOK(Price Asset@):Boolean">
            <summary>
            
            </summary>
            <param name="PriceAsset">....</param>
            <returns>  .</returns>
        </member>
        <member name="M:.Price Asset.IsLookupVariantOK(Price Asset@):Boolean">
            <summary>
            
            </summary>
            <param name="PriceAsset">....</param>
            <returns>  .</returns>
        </member>
        <member name="M:.Price Asset.IsAssetNoRequired:Boolean">
            <summary>
            
            </summary>
            <returns>  .</returns>
        </member>
        <member name="M:.Price Asset.FillBestLine(Price Calculation Buffer,Enum::Price Amount Type,Price List Line@)">
            <summary>
            
            </summary>
            <param name="PriceCalculationBuffer">....</param>
            <param name="AmountType">....</param>
            <param name="PriceListLine">....</param>
            <returns>  .</returns>
        </member>
        <member name="M:.Price Asset.FilterPriceLines(Price Asset,Price List Line@):Boolean">
            <summary>
            
            </summary>
            <param name="PriceAsset">....</param>
            <param name="PriceListLine">....</param>
            <returns>  .</returns>
        </member>
        <member name="M:.Price Asset.PutRelatedAssetsToList(Price Asset,Codeunit::Price Asset List@)">
            <summary>
            
            </summary>
            <param name="PriceAsset">....</param>
            <param name="PriceAssetList">....</param>
            <returns>The list of assets in the TempPriceAsset buffer.</returns>
        </member>
        <member name="M:.Price Asset.FillFromBuffer(Price Asset@,Price Calculation Buffer)">
            <summary>
            
            </summary>
            <param name="PriceAsset">....</param>
            <param name="PriceCalculationBuffer">....</param>
            <returns>The list of assets in the TempPriceAsset buffer.</returns>
        </member>
        <member name="M:.Price Source.GetNo(Price Source@)">
            <summary>
            
            </summary>
            <param name="PriceSource">....</param>
            <returns>  .</returns>
        </member>
        <member name="M:.Price Source.GetId(Price Source@)">
            <summary>
            
            </summary>
            <param name="PriceSource">....</param>
            <returns>  .</returns>
        </member>
        <member name="M:.Price Source.IsForAmountType(Enum::Price Amount Type):Boolean">
            <summary>
            
            </summary>
            <param name="AmountType">....</param>
            <returns>  .</returns>
        </member>
        <member name="M:.Price Source.IsLookupOK(Price Source@):Boolean">
            <summary>
            
            </summary>
            <param name="PriceSource">....</param>
            <returns>  .</returns>
        </member>
        <member name="M:.Price Source.VerifyParent(Price Source@):Boolean">
            <summary>
            
            </summary>
            <param name="PriceSource">....</param>
            <returns>  .</returns>
        </member>
        <member name="M:.Price Source.IsSourceNoAllowed:Boolean">
            <summary>
            
            </summary>
            <returns>  .</returns>
        </member>
        <member name="M:.Price Source.GetGroupNo(Price Source):Code[20]">
            <summary>
            
            </summary>
            <param name="PriceSource">....</param>
            <returns>  .</returns>
        </member>
        <member name="M:Table::SMTP Mail Setup.HasSetup:Boolean">
            <summary>
            Checks if SMTP Mail Setup record has been initialized.
            </summary>
            <returns>True if there is an SMTP Mail Setup record.</returns>
        </member>
        <member name="M:Table::SMTP Mail Setup.GetSetup:Boolean">
            <summary>
            Checks if SMTP Mail Setup record has been initialized and initialize it if it has not.
            </summary>
            <returns>True if SMTP has been setup with an SMTP Server.</returns>
        </member>
        <member name="O:Codeunit::Azure AI Usage">
            <summary>
            Retrieves information about the usage of the Azure AI services.
            </summary>
        </member>
        <member name="M:Codeunit::Azure AI Usage.IncrementTotalProcessingTime(Enum::Azure AI Service,Decimal)">
            <summary>
            Increments the processing time for the provided Azure AI service with <paramref name="ProcessingTime"/>.
            </summary>
            <error>If <paramref name="ProcessingTime"/> is less or equal to zero.</error>
            <param name="Service">The Azure AI service for which to increment the processing time.</param>
            <param name="ProcessingTime">The value with which to increment the total processing time of the Azure AI service.</param>
        </member>
        <member name="M:Codeunit::Azure AI Usage.IsLimitReached(Enum::Azure AI Service,Decimal):Boolean">
            <summary>
            Checks whether the total processing time of a provided Azure AI service has reached a certain limit.
            </summary>
            <param name="Service">The Azure AI service for which to check.</param>
            <param name="UsageLimit">The limit for which to check if it was reached.</param>
            <returns>True if the limit was reached; otherwise - false.</returns>
        </member>
        <member name="M:Codeunit::Azure AI Usage.GetTotalProcessingTime(Enum::Azure AI Service):Decimal">
            <summary>
            Gets the total processing time of an Azure AI service.
            </summary>
            <param name="Service">The Azure AI service for which to retrieve the processing time.</param>
            <returns>The processing time that the service has used so far.</returns>
        </member>
        <member name="M:Codeunit::Azure AI Usage.GetResourceLimit(Enum::Azure AI Service):Decimal">
            <summary>
            Gets the limit of an Azure AI service.
            </summary>
            <param name="Service">The Azure AI service for which to retrieve the resource limit.</param>
            <returns>The resource limit for the provided service.</returns>
        </member>
        <member name="M:Codeunit::Azure AI Usage.GetLimitPeriod(Enum::Azure AI Service):Option">
            <summary>
            Gets the type of limit period of an Azure AI service.
            </summary>
            <param name="Service">The Azure AI service for which to retrieve the limit period.</param>
            <returns>An option: Year,Month,Day,Hour.</returns>
        </member>
        <member name="M:Codeunit::Azure AI Usage.GetLastTimeUpdated(Enum::Azure AI Service):DateTime">
            <summary>
            Gets the last time the provided Azure AI service was updated.
            </summary>
            <param name="Service">The Azure AI service for which to retrieve the last time it was updated.</param>
            <returns>A datetime that notes the last time the Azure AI service was updated.</returns>
        </member>
        <member name="M:Codeunit::Azure AI Usage.SetImageAnalysisIsSetup(Boolean)">
            <summary>
            Sets a value that denotes whether the Image Analysis service was setup.
            </summary>
            <remarks>The function will be discontinued as it should not be part of the this API.</remarks>
            <param name="NewValue">The value to set.</param>
        </member>
        <member name="O:Table::Power BI Customer Reports">
            <summary>
            Stores in a BLOB the reports uploaded to Power BI using the Business Central pages.
            </summary>
            <remarks>
            The schema of this table mirrors the one for table 2000000144 "Power BI Blob". 
            Table 2000000144 contains the demo reports provided by Microsoft, wereas table 6310 (this table) contains the reports uploaded by the users.
            </remarks>
        </member>
        <member name="O:Table::Power BI Ongoing Deployments">
            <summary>
            Tracks if a user has active background sessions to deploy, delete or retry deployment of Power BI reports.
            </summary>
        </member>
        <member name="O:Table::Power BI Report Configuration">
            <summary>
            Saves a list of reports to be displayed for a user in each specific context.
            </summary>
        </member>
        <member name="O:Table::Power BI Report Uploads">
            <summary>
            Persists information about the reports that Business Central has uploaded to Power BI, by user.
            </summary>
        </member>
        <member name="O:Table::Power BI Service Status Setup">
            <summary>
            Contains only one record that tracks whether the Power BI service is throttling the calls coming from Business Central, and when the service will be available again.
            </summary>
        </member>
        <member name="O:Table::Power BI User Configuration">
            <summary>
            Persists the first report to be displayed to a user, depending on the page and profile/role they are using.
            </summary>
        </member>
        <member name="O:Table::Power BI User License">
            <summary>
            Caches the validity of the Power BI license for a user.
            </summary>
        </member>
        <member name="O:Table::What's New Notified">
            <summary>
            Stores which user has seen the What's New Wizard page.
            </summary>
        </member>
        <member name="M:Codeunit::CopyFromToPriceListLine.GenerateDescription(Price List Header@)">
            <summary>
            Generates the description for the header, e.g. 'Customer 10000, 01.01.2021 - 31.01.2021'
            </summary>
            <param name="PriceListHeader">the generated header</param>
        </member>
        <member name="O:Codeunit::Feature - Item Reference">
            <summary>
            Replaces "Item Cross Reference" data with "Item Reference" on enabling the Item Reference feature
            </summary>
        </member>
        <member name="O:Codeunit::Feature - Price Calculation">
            <summary>
            Copies pricing data from old tables to "Price List Line" and "Price List Header" table.
            </summary>
        </member>
        <member name="M:Codeunit::NoSeriesManagement.DoGetNextNo(Code[20],Date,Boolean,Boolean):Code[20]">
            <summary>
            Gets the next number in a number series.
            If ModifySeries is set to true, the number series is incremented when getting the next number.
            NOTE: If you set ModifySeries to false you should manually increment the number series to ensure consistency.
            </summary>
            <param name="NoSeriesCode">The identifier of the number series.</param>
            <param name="SeriesDate">The date of the number series. The default date is WorkDate.</param>
            <param name="ModifySeries">
            Set to true to increment the number series when getting the next number.
            Set to false if you want to manually increment the number series.
            </param>
            <param name="NoErrorsOrWarnings">Set to true to disable errors and warnings.</param>
            <returns>The next number in the number series.</returns>
        </member>
        <member name="M:Codeunit::OAuth 2#0 Mgt#.RequestAccessToken(OAuth 2.0 Setup@,Text@,Text,Text,Text,Text@,Text@):Boolean">
            <summary>
            Request access token using application/json ContentType.
            </summary>
        </member>
        <member name="M:Codeunit::OAuth 2#0 Mgt#.RequestAccessTokenWithGivenRequestJson(OAuth 2.0 Setup@,Text,Text@,Text,Text,Text,Text@,Text@):Boolean">
            <summary>
            Request access token using given request json and application/json ContentType.
            </summary>
        </member>
        <member name="M:Codeunit::OAuth 2#0 Mgt#.RequestAccessTokenWithContentType(OAuth 2.0 Setup@,Text,Text@,Text,Text,Text,Text@,Text@,Boolean):Boolean">
            <summary>
            Request access token using application/x-www-form-urlencoded ContentType if UseUrlEncodedContentType is set to true or application/json ContentType otherwise.
            </summary>
        </member>
        <member name="M:Codeunit::OAuth 2#0 Mgt#.RefreshAccessToken(OAuth 2.0 Setup@,Text@,Text,Text,Text@,Text@):Boolean">
            <summary>
            Refreshes access token using application/json ContentType.
            </summary>
        </member>
        <member name="M:Codeunit::OAuth 2#0 Mgt#.RefreshAccessTokenWithGivenRequestJson(OAuth 2.0 Setup@,Text,Text@,Text,Text,Text@,Text@):Boolean">
            <summary>
            Refreshes access token with given request json using application/json ContentType.
            </summary>
        </member>
        <member name="M:Codeunit::OAuth 2#0 Mgt#.RefreshAccessTokenWithContentType(OAuth 2.0 Setup@,Text,Text@,Text,Text,Text@,Text@,Boolean):Boolean">
            <summary>
            Refreshes access token using application/x-www-form-urlencoded ContentType if UseUrlEncodedContentType is set to true or application/json ContentType otherwise.
            </summary>
        </member>
        <member name="M:Codeunit::OpenXML Management.CopyDataToExcelTable(.Microsoft#Dynamics#Nav#OpenXml#Spreadsheet#WorksheetWriter,.System#Data#DataTable)">
            <summary>
            A CopyDataToExcelTable function overload with HideDialog parameter set to true.
            </summary>
        </member>
        <member name="M:Codeunit::ReportManagement.OnMergeDocumentReport(Option,Integer,Option,InStream,Text,OutStream@,Boolean@)">
            <summary>
            Invoke the MergeDocument trigger.
            </summary>
            <param name="ObjectType">The object type for which the document will be rendered (Report).</param>
            <param name="ObjectId">The object id.</param>
            <param name="ReportAction">The report action, which can be one of SaveAsPdf, SaveAsWord, SaveAsExcel, Preview, Print or SaveAsHtml.</param>
            <param name="XmlData">The xml data set in an input stream</param>
            <param name="FileName">The file path where the output is to be stored. This parameter will contain the printer name if the print action is chosen.</param>
            <param name="printDocumentStream">Output stream that will contain printed documents for cloud printers</param>
            <param name="IsHandled">Will be set to true if the procedure call handled the merge.</param>
        </member>
        <member name="M:Codeunit::SMTP Mail.Initialize">
            <summary>
            Initializes variables for creating an SMTP email.
            </summary>
        </member>
        <member name="M:Codeunit::SMTP Mail.AddFrom(Text,Text):Boolean">
            <summary>
            Adds the mailbox that this email is being sent from.
            </summary>
            <param name="FromName">The name of the email sender</param>
            <param name="FromAddress">The address of the default sender or, when using the Send As or Send on Behalf functionality, the address of the substitute sender</param>
            <remarks>
            See https://aka.ms/EmailSetupHelp to learn about the Send As functionality.
            </remarks>
        </member>
        <member name="M:Codeunit::SMTP Mail.TryParseInternetAddressList(.MimeKit#InternetAddressList,List):Boolean">
            <summary>
            Tries to parse the given addresses into InternetAddressList.
            </summary>
            <param name="InternetAddressList">The list of addresses output</param>
            <param name="Addresses">The list of addresses to parse</param>
            <returns>True if no errors occurred during parsing.</returns>
        </member>
        <member name="M:Codeunit::SMTP Mail.AddRecipients(List)">
            <summary>
            Adds the recipients that this email is being sent to.
            </summary>
            <param name="Recipients">The recipient(s)</param>
        </member>
        <member name="M:Codeunit::SMTP Mail.AddCC(List)">
            <summary>
            Adds the cc recipients that this email is being sent to.
            </summary>
            <param name="Recipients">The cc recipient(s)</param>
        </member>
        <member name="M:Codeunit::SMTP Mail.AddBCC(List)">
            <summary>
            Adds the bcc recipients that this email is being sent to.
            </summary>
            <param name="Recipients">The bcc recipient(s)</param>
        </member>
        <member name="M:Codeunit::SMTP Mail.AddSubject(Text)">
            <summary>
            Adds the subject of this email.
            </summary>
            <param name="Subject">The subject</param>
        </member>
        <member name="M:Codeunit::SMTP Mail.AddBody(Text)">
            <summary>
            Adds the html text to the body of this email.
            </summary>
            <param name="Body">The body</param>
        </member>
        <member name="M:Codeunit::SMTP Mail.AddTextBody(Text)">
            <summary>
            Adds the plain text to the body of this email.
            </summary>
            <param name="Body">The body</param>
        </member>
        <member name="M:Codeunit::SMTP Mail.AppendBody(Text)">
            <summary>
            Appends additional html text to the body of this email.
            </summary>
            <param name="BodyPart">The body part to append</param>
        </member>
        <member name="M:Codeunit::SMTP Mail.AppendTextBody(Text)">
            <summary>
            Appends additional plain text to the body of this email.
            </summary>
            <param name="BodyPart">The body part to append</param>
        </member>
        <member name="M:Codeunit::SMTP Mail.GetFrom:Text">
            <summary>
            Gets the name and the address that the email is being sent from.
            </summary>
            <returns>The name and address</returns>
            <remarks>
            If there is a name and address, they are returned in the following format: '"name" 	&lt;address	&gt;'
            </remarks>
        </member>
        <member name="M:Codeunit::SMTP Mail.GetRecipients(List@)">
            <summary>
            Gets the addresses that the email is being sent to.
            </summary>
            <param name="Recipients">The list to add the recipients to</param>
        </member>
        <member name="M:Codeunit::SMTP Mail.GetCC(List@)">
            <summary>
            Gets the addresses that the email is being sent to as cc.
            </summary>
            <param name="Recipients">The list to add the cc recipients to</param>
        </member>
        <member name="M:Codeunit::SMTP Mail.GetBCC(List@)">
            <summary>
            Gets the addresses that the email is being sent to as bcc.
            </summary>
            <param name="Recipients">The list to add the bcc recipients to</param>
        </member>
        <member name="M:Codeunit::SMTP Mail.GetSubject:Text">
            <summary>
            Gets the subject of the email.
            </summary>
            <returns>The subject</returns>
        </member>
        <member name="M:Codeunit::SMTP Mail.GetBody:Text">
            <summary>
            Gets the body of the email.
            </summary>
            <returns>The body</returns>
        </member>
        <member name="M:Codeunit::SMTP Mail.GetLinkedResourcesCount:Integer">
            <summary>
            Gets the number of linked resources in the email.
            </summary>
            <returns>The number of linked resources</returns>
            <remark>
            This counts the base64 strings in the body that were converted to Content ID.
            </remark>
        </member>
        <member name="M:Codeunit::SMTP Mail.IsBodyHtmlFormatted:Boolean">
            <summary>
            Get if the body is HTML formatted.
            </summary>
            <returns>True if the body is HTML formatted.</returns>
        </member>
        <member name="M:Codeunit::SMTP Mail.CreateMessage(Text,Text,Text,Text,Text,Boolean):Boolean">
            <summary>
            Creates the email with the name and address it is being sent from, the recipient, subject, and body.
            </summary>
            <param name="FromName">The name of the email sender</param>
            <param name="FromAddress">The address of the default sender or, when using the Send As or Send on Behalf functionality, the address of the substitute sender</param>
            <param name="Recipient">The recipient of the mail</param>
            <param name="Subject">The subject of the mail</param>
            <param name="Body">The body of the mail</param>
            <param name="HtmlFormatted">Whether the body is html formatted</param>
        </member>
        <member name="M:Codeunit::SMTP Mail.CreateMessage(Text,Text,List,Text,Text):Boolean">
            <summary>
            Creates the email with the name and address it is being sent from, the recipients, subject, and body.
            This overload always uses HTML formatting for the body text.
            </summary>
            <param name="FromName">The name of the email sender</param>
            <param name="FromAddress">The address of the default sender or, when using the Send As or Send on Behalf functionality, the address of the substitute sender</param>
            <param name="Recipients">The recipient(s) of the mail</param>
            <param name="Subject">The subject of the mail</param>
            <param name="Body">The body of the mail</param>
        </member>
        <member name="M:Codeunit::SMTP Mail.CreateMessage(Text,Text,List,Text,Text,Boolean):Boolean">
            <summary>
            Creates the email with the name and address it is being sent from, the recipients, subject, and body.
            </summary>
            <param name="FromName">The name of the email sender</param>
            <param name="FromAddress">The address of the default sender or, when using the Send As or Send on Behalf functionality, the address of the substitute sender</param>
            <param name="Recipients">The recipient(s) of the mail</param>
            <param name="Subject">The subject of the mail</param>
            <param name="Body">The body of the mail</param>
            <param name="HtmlFormatted">Whether the body is html formatted</param>
        </member>
        <member name="M:Codeunit::SMTP Mail.Send:Boolean">
            <summary>
            Sends the email by connecting to the server specified in the SMTP email setup.
            </summary>
            <returns>
            True if the email was sent.
            False if there were any exceptions while connecting or sending.
            </returns>
        </member>
        <member name="M:Codeunit::SMTP Mail.TrySend:Boolean">
            <summary>
            Tries to send the email.
            </summary>
            <returns>True if there are no exceptions.</returns>
        </member>
        <member name="M:Codeunit::SMTP Mail.TryConnect:Boolean">
            <summary>
            Tries to connect to the SMTP server.
            </summary>
            <returns>True if there are no exceptions.</returns>
        </member>
        <member name="M:Codeunit::SMTP Mail.TryAuthenticate:Boolean">
            <summary>
            Tries to connect to the SMTP server.
            </summary>
            <returns>True if there are no exceptions.</returns>
        </member>
        <member name="M:Codeunit::SMTP Mail.SendShowError">
            <summary>
            Sends the email, and if it fails, shows an error notification.
            </summary>
        </member>
        <member name="M:Codeunit::SMTP Mail.AddAttachment(Text,Text):Boolean">
            <summary>
            Adds an attachment to the email through a path with a name.
            </summary>
            <param name="AttachmentPath">The stream of the attachment to attach</param>
            <param name="AttachmentName">The name of the attachment</param>
            <returns>True if successfully added</returns>
        </member>
        <member name="M:Codeunit::SMTP Mail.AddAttachmentStream(InStream,Text):Boolean">
            <summary>
            Adds an attachment to the email through an InStream with a name.
            </summary>
            <param name="AttachmentStream">The stream of the attachment to attach</param>
            <param name="AttachmentName">The name of the attachment</param>
            <returns>True if successfully added.</returns>
        </member>
        <member name="M:Codeunit::SMTP Mail.TryAddAttachment(Text,InStream):Boolean">
            <summary>
            Try function for adding an attachment
            </summary>
            <remarks>
            Possible exceptions are ArgumentNullException and ArgumentException.
            For more information, see the Mimekit documentation.
            </remarks>
        </member>
        <member name="M:Codeunit::SMTP Mail.IsEnabled:Boolean">
            <summary>
            Validates that the SMTP Mail Setup is correct.
            </summary>
            <returns>True if SMTPMailSetup's "SMTP Server" is not empty.</returns>
        </member>
        <member name="M:Codeunit::SMTP Mail.CheckValidEmailAddresses(Text)">
            <summary>
            Check if the given recipients contain valid addresses.
            </summary>
            <param name="Recipients">The address(es) of recipient(s)</param>
            <remarks>
            If there are multiple addresses, they should be in the following format: 'address1; address2; address3'.
            </remarks>
        </member>
        <member name="M:Codeunit::SMTP Mail.FormatListToString(List,Text,Boolean):Text">
            <summary>
            Formats a list into a semicolon separated string.
            </summary>
            <returns>Semicolon separated string of list of texts.</returns>
        </member>
        <member name="M:Codeunit::SMTP Mail.ConvertBase64ImagesToContentId:Boolean">
            <summary>
            Searches the body of the email for <c>img</c> elements with a base64-encoded source and transforms these into inline attachments using ContentID. The body will be replaced.
            </summary>
            <returns>True if all images which look like they are base64-encoded have been successfully coverted, false if one or more fail.</returns>
        </member>
        <member name="M:Codeunit::SMTP Mail.TryReadDocument(.System#Xml#XmlDocument@,.System#Xml#XmlReader):Boolean">
            <summary>
            Tries to load the xmlreader into the document.
            </summary>
            <returns>True if there is no error.</returns>
        </member>
        <member name="M:Codeunit::SMTP Mail.TryAddLinkedResources(Text,Text,.MimeKit#ContentType,.MimeKit#MimeEntity@):Boolean">
            <summary>
            Tries to add the base64 image to linked resources.
            </summary>
            <returns>True if there is no error.</returns>
        </member>
        <member name="M:Codeunit::SMTP Mail.GetLastSendMailErrorText:Text">
            <summary>
            Gets the last error message that occured.
            </summary>
            <returns>The last error message, blank if there was no error.</returns>
        </member>
        <member name="O:Codeunit::BOM Tree">
            <summary>
            Helps create and traverse data as nodes in a tree. The structure supports disjoint trees as well as multiple parents for a child node.
            </summary>
        </member>
        <member name="M:Codeunit::BOM Tree.AddRelation(Codeunit::BOM Node,Codeunit::BOM Node)">
            <summary>
            Adds a relation between two nodes connected in a parent- child relationship.
            </summary>
            <param name="Parent">The node that represents the parent part of the relationship.</param>
            <param name="Child">The node that represents the child part of the relationship.</param>
        </member>
        <member name="M:Codeunit::BOM Tree.TraverseDown">
            <summary>
            Traverses the nodes starting from the root node and traverses down to the children and so on. Note that there can be many root nodes, in which case, the traversal starts from each of them.
            </summary>
        </member>
        <member name="M:Codeunit::BOM Tree.TraverseDown(Codeunit::BOM Node)">
            <summary>
            Traverses the nodes starting from the given node and traverses down to the children and so on. 
            </summary>
            <param name="Node">The node from which the traversal should start.</param>
        </member>
        <member name="M:Codeunit::BOM Tree.ChildHasKey(Text,Text):Boolean">
            <summary>
            Finds if a node with the given key is a child of another node with the given parent key.
            <param name="ParentKey">The key of the parent node.</param>
            <param name="ChildKey">The key of the child node.</param>
            <returns>True if there was a child found with the key, false otherwise.</returns>
            <remarks>This will return false if the node with the parent key was not found.</remarks>
            </summary>
        </member>
        <member name="O:Codeunit::BOM Tree Node Dictionary">
            <summary>
            This exposes a collection of the BOM Tree Node objects that are hashed against the key for those instances.
            </summary>
        </member>
        <member name="M:Codeunit::BOM Tree Node Dictionary.Add(Codeunit::BOM Tree Node)">
            <summary>
            Adds an instance to the dictionary. The key is fetched from the GetKey() procedure of the Instance implementation.
            <param name="Instance">The instance to add.</param>
            <remarks>In case there is another instance with a key same as the one being added, an error shall be raised.</remarks>
            </summary>
        </member>
        <member name="M:Codeunit::BOM Tree Node Dictionary.Get(Text,Codeunit::BOM Tree Node@)">
            <summary>
            Fetches the instance based on the given key.
            <param name="InstanceKey">The key given.</param>
            <param name="Found">The instance that was fetched.</param>
            </summary>
        </member>
        <member name="M:Codeunit::BOM Tree Node Dictionary.Remove(Text)">
            <summary>
            Removes the instance from the dictionary that correponds to the given key.
            <param name="InstanceKey">The given key.</param>
            </summary>
        </member>
        <member name="M:Codeunit::BOM Tree Node Dictionary.ResetEnumerator">
            <summary>
            Resets the internal variables that allow iterating through the items in the dictionary.
            <remarks>It is a good practice to call this before starting an iteration.</remarks>
            </summary>
        </member>
        <member name="M:Codeunit::BOM Tree Node Dictionary.MoveNext:Boolean">
            <summary>
            Advances the enumerator to the next element of the dictionary.
            </summary>
        </member>
        <member name="M:Codeunit::BOM Tree Node Dictionary.GetCurrent(Codeunit::BOM Tree Node@)">
            <summary>
            Gets the element in the dictionary at the current position of the enumerator.
            <param name="Instance">The instance pointed at.</param>
            </summary>
        </member>
        <member name="M:Codeunit::BOM Tree Node Dictionary.Count:Integer">
            <summary>
            Gets the number of items in the dictionary.
            </summary>
        </member>
        <member name="M:Codeunit::DotNet_UriBuilder.GetUri(Codeunit::DotNet_Uri@)">
            <summary>
            This procedure is a wrapper for the DotNet getter function for the UriBuilder.Uri property.
            </summary>
            <param name="DotNet_Uri">The combined Uri that has been built in the builder (wrapped in an instance of the DotNet_Uri codeunit)</param>
        </member>
        <member name="O:Codeunit::Email Feature">
            <summary>
            Provides functionality to determine whether the email enhancements have been enabled.
            </summary>
        </member>
        <member name="M:Codeunit::Email Feature.IsEnabled:Boolean">
            <summary>
            Checks if the feature has been enabled for all users. 
            </summary>
        </member>
        <member name="M:Codeunit::Email Scenario Mapping.FromReportSelectionUsage(Enum::Report Selection Usage):Enum::Email Scenario">
            <summary>
            Gets the document sending email scenario from report selection usage.
            </summary>
            <param name="ReportSelectionUsage"></param>
            <returns>The email scenario corresponding to the report selection usage</returns>
        </member>
        <member name="M:Codeunit::Email Scenario Mapping.OnAfterFromReportSelectionUsage(Enum::Report Selection Usage,Enum::Email Scenario@)">
            <summary>
            Subscribe to this event to add custom mappings from report selection usage (in case the enum was extended) to email scenarios.
            </summary>
            <param name="ReportSelectionUsage">The input report selection usage of the FromReportSelectionUsage function.</param>
            <param name="EmailScenario">The output email scenario of the FromReportSelectionUsage function.</param>
        </member>
        <member name="M:Codeunit::Open Mail Setup Page.OnRun">
            <summary>
            Open the relevant page for setting up email. Use this function for role center pages that need to reference email setup.
            </summary>
        </member>
        <member name="O:Codeunit::Global Admin Notifier">
            <summary>
            The purpose of this codeunit is to notify users with only Global Administration role that their capabilities in Business Central are limited. 
            </summary>
        </member>
        <member name="M:Codeunit::Permission Manager.GetDefaultProfileID(Guid,All Profile@)">
            <summary>
            This procedure retrieves a Default Profile ID to be used for a user, in case there is no valid 
            custom profile set for them in their User Personalization. 
            </summary>
            <param name="UserSecurityID">The SID for the User to find a default profile for</param>
            <param name="AllProfile">The returned AllProfile that is the default for the specified user</param>
            <remarks>
            <list type="number">
              <item><description>If we can provide a tailored default for the user (from the Plan/License), return that, otherwise</description></item>
              <item><description>If there is any system-wide default AllProfile in the table, return it, otherwise</description></item>
              <item><description>Find the default Role Center ID for the system (which checks the Plan/License again and has some additional 
              defaulting logic), and if there is a profile for it return it, otherwise</description></item>
              <item><description>Fall back to just return the first AllProfile available in the table</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Codeunit::Profile Helper.ImportProfiles(Profile Import@):Guid">
            <summary>
            Given a read profile package, this function will import the profiles specified from that package
            </summary>
            <param name="TempProfileImport"></param>
            <returns>Guid representing the import diagnostics ID</returns>
        </member>
        <member name="O:Codeunit::SmartList Designer">
            <summary>
            Contains methods for interacting with/opening the SmartList Designer 
            </summary>
        </member>
        <member name="M:Codeunit::SmartList Designer.DoesUserHaveAPIAccess(Guid):Boolean">
            <summary>
            Check if the provided user has been granted access to the
            SmartList Designer API
            </summary>
            <returns>True if provided user has access to the API; Otherwise false.</returns>
        </member>
        <member name="M:Codeunit::SmartList Designer.RunForNew">
            <summary>
            Opens up the SmartList Designer to create a new SmartList
            </summary>
        </member>
        <member name="M:Codeunit::SmartList Designer.RunForQuery(Guid)">
            <summary>
            Opens up the SmartList Designer to edit an existing SmartList
            </summary>
            <param name="QueryId">The ID of the existing SmartList query to edit.</param>
        </member>
        <member name="M:Codeunit::SmartList Designer.RunForTable(Integer)">
            <summary>
            Opens up the SmartList Designer to create a new SmartList using
            the provided table as a starting point.
            </summary>
            <param name="TableNo">The ID of a table to start creating a SmartList query over.</param>
        </member>
        <member name="M:Codeunit::SmartList Designer.RunForTableAndView(Integer,Text)">
            <summary>
            Opens up the SmartList Designer to create a new SmartList based
            on a selected table.
            </summary>
            <param name="TableNo">The ID of the table to use as the basis for a SmartList query.</param>
            <param name="ViewId">The optional view ID token that contains information about the page or view that the user was using before they opened SmartList Designer.</param>
        </member>
        <member name="M:Codeunit::SmartList Designer.IsEnabled:Boolean">
            <summary>
            Indicates if the SmartList designer functionality is enabled.
            </summary>
            <returns>True if the designer is enabled; Otherwise false.</returns>
        </member>
        <member name="M:Codeunit::Sync#Dep#Fld-Utilities.GetPreviousRecord(Variant,RecordRef@):Boolean">
            <summary>
            Gets the previous record - xRec is not the previous version of the record it is the previous record on the page.
            If the update was not started from page, xRec will be same as the Rec.
            This function MUST be called before the update of the record is done, for example from OnBeforeModify trigger.
            </summary>
            <param name="CurrentRecord">Current record that we want to get a previous version of.</param>
            <param name="PreviousRecordRef">Previous record.</param>
            <returns>A boolean that indicates whether the previous record exists.</returns>
        </member>
        <member name="O:Codeunit::What's New Notifier">
            <summary>
            Executes logic when to show the whats new notifier page.
            </summary>
        </member>
        <member name="M:Codeunit::What's New Notifier.OnGetGuiAllowed(Boolean@)">
            <summary>
            Raises an event to be able to change the return value of IsGuiAllowed function. Used for testing.
            </summary>
        </member>
        <member name="M:Codeunit::What's New Notifier.OnGetAppMajorVersion(Text@)">
            <summary>
            Raises an event to be able to change the return value of GetAppMajorVersion function. Used for testing.
            </summary>
        </member>
        <member name="O:Page::Config# Package Warning">
            <summary> 
            This page is meant to inform users that importing and applying Configuration packages may affect the system's performance.
            </summary>
            <remarks>This page is not meant to be used by extensions.</remarks>
        </member>
        <member name="O:Page::Global Admin Message">
            <summary>
            The page displays a warning message to users with the Global Administrator role but without a Business Central license.
            </summary>
            <remarks>This page is not supposed to be referenced in extensions.</remarks>
        </member>
        <member name="O:Page::Upload Power BI Report">
            <summary>
            Allows users to upload report files to Business Central, which will automatically deploy them to Power BI.
            </summary>
        </member>
        <member name="O:Page::What's New Wizard">
            <summary>
            What's New Wizard is shown to all users on tenants upgraded to 16 and new tenants on 16.
            </summary>
        </member>
        <member name="O:Enum::Licenses">
            <summary>
            Specifies the type of license.
            </summary>
        </member>
        <member name="O:Enum::Permission">
            <summary>
            Specifies the rank of a permission.
            The higher the rank (value) is, the more restrictive the persmission is.
            </summary>
        </member>
        <member name="E:Enum::Permission.None">
            <summary>
            Denotes that the permission is missing.
            </summary>
        </member>
        <member name="E:Enum::Permission.Indirect">
            <summary>
            Denotes that the permission is Indirect.
            </summary>
        </member>
        <member name="E:Enum::Permission.Direct">
            <summary>
            Denotes that the permission is Direct.
            </summary>
        </member>
        <member name="M:.Price Source Group.IsSourceTypeSupported(Enum::Price Source Type):Boolean">
            <summary>
            "Price Source Group" enum is a subset of the "Price Source Type" enum. 
            The group limits allowed Source Types, e.g. for Customer group the Vendor source type is not supported.
            Returns true if the passed price source type belongs to the price source group.
            </summary>
            <param name="SourceType">Price source type</param>
        </member>
        <member name="M:.Price Source Group.GetGroup:Enum::Price Source Group">
            <summary>
            Some of source types are mapped to the price source groups that is used in setup. 
            If the source type does not belong to one group then it returns group All.
            </summary>
            <returns>the source group.</returns>
        </member>
        <member name="O:Enum::Azure AI Service">
            <summary>
            The types of Azure AI services that are available in Business Central.
            </summary>
        </member>
        <member name="E:Enum::Azure AI Service.Machine Learning">
            <summary>
            Value corresponds to an Azure Machine Learning service. 
            </summary>
        </member>
        <member name="E:Enum::Azure AI Service.Computer Vision">
            <summary>
            Value corresponds to an Azure Computer Vision service. 
            </summary>
        </member>
        <member name="M:.Line With Price.GetTableNo:Integer">
            <summary>
            Returns the table number of the internal record line.
            </summary>
            <returns>The table id of the source line.</returns>
        </member>
        <member name="M:.Line With Price.SetLine(Enum::Price Type,Variant)">
            <summary>
            Setup the internal record line. Applicable for the journal lines that does not have a header record.
            The PriceType parameter defines what type of price is going to be calculated.
            </summary>
            <param name="PriceType">the price type for which the price or dicount will be calculated.</param>
            <param name="Line">the source record line</param>
        </member>
        <member name="M:.Line With Price.SetLine(Enum::Price Type,Variant,Variant)">
            <summary>
            Setup the internal records - line and header. Applicable for the document lines.
            The PriceType parameter defines what type of price is going to be calculated.
            </summary>
            <param name="PriceType">the price type for which the price or dicount will be calculated.</param>
            <param name="Header">the source record header</param>
            <param name="Line">the source record line</param>
        </member>
        <member name="M:.Line With Price.SetSources(Codeunit::Price Source List@)">
            <summary>
            This method allows to overwrite the internal price source list that is normally filled by SetLine() method.
            </summary>
            <param name="NewPriceSourceList">The new list of source that should be attached to the line</param>
        </member>
        <member name="M:.Line With Price.GetLine(Variant@)">
            <summary>
            After the calculations are done this method alloes to get the updated internal record line.
            </summary>
            <param name="Line">The updated record line</param>
        </member>
        <member name="M:.Line With Price.GetLine(Variant@,Variant@)">
            <summary>
            After the calculations are done this method alloes to get the updated internal record line and header.
            </summary>
            <param name="Line">The updated record line</param>
            <param name="Line">The updated record header</param>
        </member>
        <member name="M:.Line With Price.GetAssetType:Enum::Price Asset Type">
            <summary>
            Returns the asset type of the internal record line.
            </summary>
            <returns>The asset type of the internal record line.</returns>
        </member>
        <member name="M:.Line With Price.GetPriceType:Enum::Price Type">
            <summary>
            Returns the price type that was set by the SetLine() method.
            </summary>
            <returns>The price type.</returns>
        </member>
        <member name="M:.Line With Price.IsPriceUpdateNeeded(Enum::Price Amount Type,Boolean,Integer):Boolean">
            <summary>
            This method defines if the source line should be updated after the search for a price list line is done.
            </summary>
            <param name="AmountType">The amount type</param>
            <param name="FoundPrice">If FoundPrice is true this method returns true.</param>
            <param name="CalledByFieldNo">The number of the field that caused the calculation.</param>
            <returns>If the price amount should be updated.</returns>
        </member>
        <member name="M:.Line With Price.IsDiscountAllowed:Boolean">
            <summary>
            The calculation of the price defines if the discount allowed for this line.
            This method should be called after the price is calculated.
            </summary>
            <returns>If the discount allowed for this line.</returns>
        </member>
        <member name="M:.Line With Price.Verify">
            <summary>
            Verification of the line before price calculation, usually some TESTFIELD calls.
            </summary>
        </member>
        <member name="M:.Line With Price.SetAssetSourceForSetup(Dtld. Price Calculation Setup@):Boolean">
            <summary>
            Copy asset and source data to the buffer to search for a detailed price calculation setup.
            </summary>
            <param name="DtldPriceCalculationSetup">The buffer record that get values of filters for serach.</param>
            <returns>If the internal record line is consistent and all filters for detailed setup are in place.</returns>
        </member>
        <member name="M:.Line With Price.CopyToBuffer(Codeunit::Price Calculation Buffer Mgt#@):Boolean">
            <summary>
            Copy the fields related for price calculation to the buffer that is used in calculation handlers.
            </summary>
            <param name="PriceCalculationBufferMgt">....</param>
            <returns>If all the internal record line is consistent and can fill the buffer.</returns>
        </member>
        <member name="M:.Line With Price.Update(Enum::Price Amount Type)">
            <summary>
            This method is called after the calculation and allow to do corrections.
            </summary>
            <param name="AmountType">The amount type.</param>
        </member>
        <member name="M:.Line With Price.SetPrice(Enum::Price Amount Type,Price List Line)">
            <summary>
            After calculation is done and the right price list line is found this method copies required fields
            to the internal record line. The amount type defines what amount will be copied.
            </summary>
            <param name="AmountType">the amount type.</param>
            <param name="PriceListLine">The price list line that should define the price or discount.</param>
        </member>
        <member name="M:.Line With Price.ValidatePrice(Enum::Price Amount Type)">
            <summary>
            The method SetPrice() copies amounts to the internal record line. 
            This method calls the validation triggers on the amount defined by AmountType parameter.
            </summary>
            <param name="AmountType">the amount type.</param>
        </member>
        <member name="M:.Price Calculation.Init(.Line With Price,Price Calculation Setup)">
            <summary>
            Save the source line as an interface variable inside the price calculation codeunit
            </summary>
            <param name="LineWithPrice">The interface parameter for the document or journal line.</param>
            <returns>The updated source line.</returns>
        </member>
        <member name="M:.Price Calculation.GetLine(Variant@)">
            <summary>
            After the calculation is done by calling ApplyPrice() or ApplyDiscount() 
            the updated line is retrieved by this method. 
            </summary>
            <param name="Line">The updated source line.</param>
        </member>
        <member name="M:.Price Calculation.ApplyDiscount">
            <summary>
            Executes the calcluation of the discount amount. 
            </summary>
        </member>
        <member name="M:.Price Calculation.ApplyPrice(Integer)">
            <summary>
            Executes the calculation of the price or cost.
            </summary>
            <param name="CalledByFieldNo">The id of the field that caused the calculation.</param>
        </member>
        <member name="M:.Price Calculation.CountDiscount(Boolean):Integer">
            <summary>
            Returns the number of price list lines with discounts that fit the source line.
            </summary>
            <param name="ShowAll">If true it widens the filters set to the price list line.</param>
            <returns>Number of price list lines with discounts that fit the source line.</returns>
        </member>
        <member name="M:.Price Calculation.CountPrice(Boolean):Integer">
            <summary>
            Returnes the number of price list lines with prices that fit the source line.
            </summary>
            <param name="ShowAll">If true it widens the filters set to the price list line.</param>
            <returns>Number of price list lines with prices that fit the source line.</returns>
        </member>
        <member name="M:.Price Calculation.FindDiscount(Price List Line@,Boolean):Boolean">
            <summary>
            Returns the list of price list lines with discount that fit the source line.
            </summary>
            <param name="TempPriceListLine">the temporary buffer containing the price list line that fit the source line.</param>
            <param name="ShowAll">If true it widens the filters set to the price list line.</param>
            <returns>true if any price list line is found</returns>
        </member>
        <member name="M:.Price Calculation.FindPrice(Price List Line@,Boolean):Boolean">
            <summary>
            Returns the list of price list lines with prices ot costs that fit the source line.
            </summary>
            <param name="TempPriceListLine">the temporary buffer containing the price list line that fit the source line.</param>
            <param name="ShowAll">If true it widens the filters set to the price list line.</param>
            <returns>true if any price list line is found</returns>
        </member>
        <member name="M:.Price Calculation.IsDiscountExists(Boolean):Boolean">
            <summary>
            Returns true if exists any price list line with discount that fit the source line. 
            </summary>
            <param name="ShowAll">If true it widens the filters set to the price list line.</param>
            <returns>true if any price list line is found</returns>
        </member>
        <member name="M:.Price Calculation.IsPriceExists(Boolean):Boolean">
            <summary>
            Returns true if exists any price list line with price or cost that fit the source line. 
            </summary>
            <param name="ShowAll">If true it widens the filters set to the price list line.</param>
            <returns>true if any price list line is found</returns>
        </member>
        <member name="M:.Price Calculation.PickDiscount">
            <summary>
            Allows to pick from the list of price list lines with disocunt that fit the source line.
            </summary>
        </member>
        <member name="M:.Price Calculation.PickPrice">
            <summary>
            Allows to pick from the list of price list lines with price or cost that fit the source line.
            </summary>
        </member>
        <member name="M:.Price Calculation.ShowPrices(Price List Line@)">
            <summary>
            Opens the list page for reviewing existing prices. 
            </summary>
            <param name="TempPriceListLine">The buffer with the found price list lines.</param>
        </member>
    </members>
</doc>
