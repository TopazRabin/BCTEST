OBJECT Report 14000578 Export Forecast to Excel
{
  OBJECT-PROPERTIES
  {
    Date=07/01/20;
    Time=12:00:00 AM;
    Modified=Yes;
    Version List=UBP3.00,HF2.97.ShowActual.SkipAverage.Sporadic;
  }
  PROPERTIES
  {
    CaptionML=ENU=Export Forecast to Excel;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   PerToExport := 3;
                   ShowForecast := TRUE;
                   Location.SETRANGE("Enable Adv. Forecasting",TRUE);
                   IF Location.FIND('-') THEN
                     REPEAT
                       IF LCPDate = 0D THEN
                         LCPDate := Location."Last Closed Period Date"
                       ELSE
                         IF Location."Last Closed Period Date" > LastClosedPerDate THEN
                           LCPDate := Location."Last Closed Period Date";
                     UNTIL Location.NEXT = 0;
                   IF LCPDate > 0D THEN
                     StartDate := CALCDATE('<+CM+1D>', LCPDate);
                 END;

    OnPreReport=VAR
                  ProcUnit@1240020000 : Record 14000555;
                BEGIN
                  ProcUnit.SETFILTER("Variant Code", '<>%1', '');
                  IF ProcUnit.ISEMPTY THEN
                    ShowVariants := FALSE
                  ELSE
                    ShowVariants := TRUE;

                  //<TPZ1685>
                  IF RunInBatchMode THEN
                    AFPExcelCreate.SetUseTopazExcelCreate(TRUE);
                  //</TPZ1685>
                END;

    OnPostReport=BEGIN
                   ProgWindow.CLOSE;
                   InvMgt.CloseLogEntry(LogEntryNo,'');

                   //<TPZ1685>
                   IF RunInBatchMode THEN BEGIN
                     AFPExcelCreate.SaveExcelFile(ExportFileName)
                   END ELSE
                   //</TPZ1685>
                     AFPExcelCreate.Complete(txtForecast);
                 END;

  }
  DATASET
  {
    { 8129;    ;DataItem;                    ;
               DataItemTable=Table27;
               OnPreDataItem=BEGIN
                               IF (StartDate = 0D) OR
                                  (PerToExport = 0)
                               THEN
                                 ERROR(Text003);

                               Location.SETFILTER(Code, Item.GETFILTER("Location Filter"));
                               Location.SETRANGE("Enable Adv. Forecasting",TRUE);
                               IF Location.FINDSET THEN
                                 REPEAT
                                   IF LCPDate = 0D THEN
                                     LCPDate := Location."Last Closed Period Date"
                                   ELSE
                                     IF LCPDate <> Location."Last Closed Period Date" THEN
                                       ERROR(Text005);
                                 UNTIL Location.NEXT = 0;

                               LastClosedPerDate := LCPDate;
                               IF NOT UseCalcPeriods THEN BEGIN
                               IF (StartDate > (LCPDate +1)) THEN
                                   ERROR(Text006,(LCPDate + 1))
                               END ELSE BEGIN
                                 ForecastInvPeriod.SETRANGE(Type,ForecastInvPeriod.Type::Calculate);
                                 ForecastInvPeriod.SETRANGE("Starting Date", StartDate);
                                 IF ForecastInvPeriod.ISEMPTY THEN
                                   ERROR(Text007, StartDate);
                               END;

                               InvMgtSetup.GET;

                               CLEAR(StartingDateArray);
                               CLEAR(EndingDateArray);
                               ForecastInvPeriod.RESET;
                               IF UseCalcPeriods THEN
                                 ForecastInvPeriod.SETRANGE(Type,ForecastInvPeriod.Type::Calculate)
                               ELSE
                                 ForecastInvPeriod.SETRANGE(Type,ForecastInvPeriod.Type::" ");
                               ForecastInvPeriod.SETFILTER("Starting Date",'%1..',StartDate);
                               ForecastInvPeriod.FIND('-');
                               i := 0;
                               REPEAT
                                 i := i + 1;
                                 StartingDateArray[i] := ForecastInvPeriod."Starting Date";
                                 EndingDateArray[i] := ForecastInvPeriod."Ending Date";
                                 ForecastInvPeriod.NEXT;
                               UNTIL i = PerToExport;

                               PeriodDays := EndingDateArray[1] - StartingDateArray[1] + 1;

                               IF (StartDate < LastClosedPerDate) AND
                                  (UseCalcPeriods)
                               THEN
                                 ERROR(Text004);

                               IF StartDate < LastClosedPerDate THEN BEGIN
                                 ForecastInvPeriod.RESET;
                                 ForecastInvPeriod.ASCENDING(FALSE);
                                 ForecastInvPeriod.SETRANGE(Type,ForecastInvPeriod.Type::" ");
                                 ForecastInvPeriod.SETFILTER("Starting Date",'..%1',StartDate);
                                 ForecastInvPeriod.FIND('-');
                                 ForecastInvPeriod.NEXT;
                               END;

                               IF Item.ISEMPTY THEN
                                 CurrReport.QUIT;
                               InvMgt.CreateLogEntry('',txtExpForecast,LogEntryNo);

                               CLEAR(AFPExcelCreate);

                               //<TPZ1685>
                               IF RunInBatchMode THEN
                                 AFPExcelCreate.SetUseTopazExcelCreate(TRUE);
                               //</TPZ1685>

                               AFPExcelCreate.CreateBook;
                               AFPExcelCreate.AddNewSheet(txtForecast);
                               WriteRowIntroductionHeaders(txtType);
                               i := 0;
                               REPEAT
                                 i := i + 1;
                                 AFPExcelCreate.EnterIntoNextColumn(FORMAT(StartingDateArray[i]),FALSE,FALSE,TRUE,0);
                               UNTIL i = PerToExport;

                               TotalItemCount := Item.COUNT;
                               ProgWindow.OPEN(Text000 + '\' + Text001);

                               ItemUsage.SETCURRENTKEY(
                                 "Location Code","Item No.","Variant Code","Starting Date","Ending Date");

                               Opening := TRUE;
                             END;

               OnAfterGetRecord=BEGIN
                                  ItemCount := ItemCount + 1;
                                  IF ItemCount MOD 10 = 0 THEN
                                    ProgWindow.UPDATE(1,ROUND(10000 * (ItemCount / TotalItemCount),1));
                                END;

               ReqFilterFields=Location Filter,No.,Item Category Code,Product Group Code }

    { 4564;1   ;DataItem;                    ;
               DataItemTable=Table14000555;
               DataItemTableView=SORTING(Item No.,Variant Code,Location Code)
                                 ORDER(Ascending);
               OnAfterGetRecord=VAR
                                  SporadicUsage@1240020000 : Decimal;
                                  ReoccuringUsage@1240020002 : Boolean;
                                  AdjustmentExists@1240020001 : Boolean;
                                  UnitCost@1240020003 : Decimal;
                                  DescToPrint@1240020004 : Text[250];
                                BEGIN
                                  IF ShowOnlyTopLevelItems THEN
                                    IF "Procurement Unit"."Replenishment Source Type" = "Procurement Unit"."Replenishment Source Type"::Location THEN
                                      CurrReport.SKIP;

                                  CLEAR(TotalArray);

                                  CLEAR(Forecast);
                                  Forecast.CalcForecast("Procurement Unit",PerToExport,'',FALSE,UseCalcPeriods);

                                  IF ShowOnlyForecastItems AND
                                    (Forecast.GetFormulaCode = '')
                                  THEN
                                    CurrReport.SKIP;

                                  "Procurement Unit".CALCFIELDS(Description);
                                  DescToPrint := "Procurement Unit".Description;


                                  // Show Forecast
                                  IF ShowForecast THEN BEGIN
                                    WriteRowIntroduction("Procurement Unit", DescToPrint, txtForecast);
                                  END;

                                  SporadicUsage := 0;
                                  ReoccuringUsage := FALSE;
                                  // forecast for statistical is 1 month prior to date
                                  ItemUsage.RESET;
                                  ItemUsage.SETRANGE("Location Code","Procurement Unit"."Location Code");
                                  ItemUsage.SETRANGE("Item No.","Procurement Unit"."Item No.");
                                  ItemUsage.SETRANGE("Variant Code","Procurement Unit"."Variant Code");
                                  ItemUsage.SETRANGE("Source No.",'');
                                  ItemUsage.SETRANGE("Ending Date", LastClosedPerDate);
                                  IF ItemUsage.FINDFIRST THEN BEGIN
                                    CASE ItemUsage.Status OF
                                      ItemUsage.Status::Reoccuring:
                                        ReoccuringUsage := TRUE;
                                      ItemUsage.Status::Sporadic,ItemUsage.Status::"L.T. Formula Req.":
                                        SporadicUsage := ItemUsage."Sporadic Target Stock Level";
                                    END;
                                  END;
                                    ItemUsage.SETRANGE("Ending Date");
                                  // Forecast usage = (1 period) prior
                                    ItemUsage.SETFILTER("Starting Date",'%1..',ForecastInvPeriod."Starting Date");
                                  IF NOT ItemUsage.FINDSET THEN
                                      ItemUsage.INIT;

                                  IF InvMgtSetup."Roll Up Via Repl. Path" THEN
                                    UsageLocationFilter :=
                                      UBP.GetUsageLocationFilter(
                                        "Procurement Unit"."Location Code","Procurement Unit"."Item No.","Procurement Unit"."Variant Code",FALSE)
                                  ELSE
                                    UsageLocationFilter := "Procurement Unit"."Location Code";

                                  // Check for Adjustments
                                  ForecastAdjust.RESET;
                                  ForecastAdjust.SETCURRENTKEY(
                                    "Item No.","Variant Code","Location Code","Starting Date");
                                  ForecastAdjust.SETRANGE("Item No.","Procurement Unit"."Item No.");
                                  ForecastAdjust.SETRANGE("Variant Code","Procurement Unit"."Variant Code");
                                  ForecastAdjust.SETFILTER("Location Code", UsageLocationFilter);
                                  ForecastAdjust.SETFILTER(
                                    "Starting Date",'%1..', LastClosedPerDate + 1);
                                  ForecastAdjust.CALCSUMS(Quantity);
                                  IF ForecastAdjust.Quantity <> 0 THEN
                                    AdjustmentExists := TRUE
                                  ELSE
                                    AdjustmentExists := FALSE;

                                  // Get Forecast
                                  i := 0;
                                  j := 0;
                                  REPEAT
                                    i := i + 1;
                                    IF EndingDateArray[i] <= LastClosedPerDate THEN BEGIN
                                      j := j + 1;
                                      IF ShowForecast THEN BEGIN
                                        IF ItemUsage.Status = ItemUsage.Status::Reoccuring THEN BEGIN
                                          AFPExcelCreate.EnterIntoNextColumn(
                                            FORMAT(ROUND(ItemUsage."Forecast Usage",0.1)),FALSE,FALSE,FALSE,0);
                                        END ELSE BEGIN
                                          // DISPLAY nothing for previous periods with no forecast
                                          AFPExcelCreate.EnterIntoNextColumn(
                                            FORMAT(ROUND(0,0.1)),FALSE,FALSE,FALSE,0);
                                        END;
                                      END;
                                      IF ItemUsage.Status = ItemUsage.Status::Reoccuring THEN BEGIN
                                        TotalArray[i] := TotalArray[i] + ROUND(ItemUsage."Forecast Usage",0.1);
                                      END ELSE BEGIN
                                      END;
                                      IF ItemUsage.NEXT = 0 THEN
                                        ItemUsage.INIT;
                                    END ELSE BEGIN
                                      IF ReoccuringUsage THEN BEGIN
                                        IF ShowForecast THEN
                                          AFPExcelCreate.EnterIntoNextColumn(
                                            FORMAT(Forecast.GetPeriodForecastUsage(i - j)),FALSE,FALSE,FALSE,0);
                                      END ELSE BEGIN
                                        IF NOT AdjustmentExists THEN BEGIN
                                          IF ShowForecast THEN BEGIN
                                            IF (SporadicUsage > 0) AND (StartingDateArray[i] = (LastClosedPerDate + 1)) THEN
                                              AFPExcelCreate.EnterIntoNextColumn(
                                                FORMAT(ROUND(SporadicUsage,0.1)),FALSE,FALSE,FALSE,0)
                                            ELSE
                                              AFPExcelCreate.EnterIntoNextColumn(
                                                FORMAT(ROUND(0,0.1)),FALSE,FALSE,FALSE,0);
                                          END;
                                        END;
                                      END;
                                      IF ReoccuringUsage THEN BEGIN
                                        TotalArray[i] := TotalArray[i] + Forecast.GetPeriodForecastUsage(i - j);
                                      END ELSE BEGIN
                                        IF NOT AdjustmentExists THEN BEGIN
                                          IF (SporadicUsage > 0) AND (StartingDateArray[i] = (LastClosedPerDate + 1)) THEN
                                            TotalArray[i] := TotalArray[i] + ROUND(SporadicUsage,0.1);
                                        END;
                                      END;
                                    END;
                                  UNTIL i = PerToExport;

                                  // Show Adjustments
                                  IF ShowAdjustments THEN BEGIN
                                    WriteRowIntroduction("Procurement Unit", DescToPrint, txtAdjustments);
                                  END;

                                  IF ShowAdjustments OR ShowTotal THEN BEGIN
                                    ForecastAdjust.RESET;
                                    ForecastAdjust.SETCURRENTKEY(
                                      "Item No.","Variant Code","Location Code","Starting Date");
                                    ForecastAdjust.SETRANGE("Item No.","Procurement Unit"."Item No.");
                                    ForecastAdjust.SETRANGE("Variant Code","Procurement Unit"."Variant Code");
                                    ForecastAdjust.SETFILTER("Location Code",UsageLocationFilter);
                                    i := 0;
                                    REPEAT
                                      i := i + 1;
                                      ForecastAdjust.SETFILTER(
                                        "Starting Date",'%1..%2',StartingDateArray[i],EndingDateArray[i]);
                                      ForecastAdjust.CALCSUMS(Quantity);
                                      IF ShowAdjustments THEN
                                        AFPExcelCreate.EnterIntoNextColumn(
                                          FORMAT(ForecastAdjust.Quantity),FALSE,FALSE,FALSE,0);
                                      TotalArray[i] := TotalArray[i] + ForecastAdjust.Quantity;
                                    UNTIL i = PerToExport;
                                  END;

                                  // Show Collaborative
                                  IF ShowCollaborative THEN BEGIN
                                    WriteRowIntroduction("Procurement Unit",  DescToPrint, txtCollaborative);
                                  END;

                                  IF ShowCollaborative OR ShowTotal THEN BEGIN
                                    ForecastEntry.RESET;
                                    ForecastEntry.SETCURRENTKEY(
                                      "Location Code","Item No.","Variant Code","Starting Date",Released);
                                    ForecastEntry.SETFILTER("Location Code",UsageLocationFilter);
                                    ForecastEntry.SETRANGE("Item No.","Procurement Unit"."Item No.");
                                    ForecastEntry.SETRANGE("Variant Code","Procurement Unit"."Variant Code");
                                    ForecastEntry.SETRANGE(Released,TRUE);
                                    i := 0;
                                    REPEAT
                                      i := i + 1;
                                      ForecastEntry.SETFILTER(
                                        "Starting Date",'%1..%2',StartingDateArray[i],EndingDateArray[i]);
                                      ForecastEntry.CALCSUMS(Quantity);
                                      IF ShowCollaborative THEN
                                        AFPExcelCreate.EnterIntoNextColumn(
                                          FORMAT(ForecastEntry.Quantity),FALSE,FALSE,FALSE,0);
                                      TotalArray[i] := TotalArray[i] + ForecastEntry.Quantity;
                                    UNTIL i = PerToExport;
                                  END;

                                  // Show Component Demand
                                  IF ShowComponentDemand THEN BEGIN
                                    WriteRowIntroduction("Procurement Unit", DescToPrint, txtComponentDemand);
                                  END;

                                  IF ShowComponentDemand OR ShowTotal THEN BEGIN
                                    "Procurement Unit".SETFILTER("Location Filter", "Procurement Unit"."Location Code");
                                    i := 0;
                                    REPEAT
                                      i := i + 1;
                                      IF i = 1 THEN
                                        "Procurement Unit".SETFILTER("Date Filter",'..%1', EndingDateArray[i])
                                      ELSE
                                        "Procurement Unit".SETFILTER("Date Filter",'%1..%2',StartingDateArray[i],EndingDateArray[i]);
                                      "Procurement Unit".SETFILTER("Prod. Order Status Filter", UBP.GetProductionStatusFilter());
                                      "Procurement Unit".CALCFIELDS("Qty. on Component Lines", "Qty. on Assy. Comp. FC", "Qty. on Assy. Comp.");
                                      IF ShowComponentDemand THEN
                                        AFPExcelCreate.EnterIntoNextColumn(
                                          FORMAT("Procurement Unit"."Qty. on Component Lines" +
                                            "Procurement Unit"."Qty. on Assy. Comp. FC" + "Procurement Unit"."Qty. on Assy. Comp."),FALSE,FALSE,FALSE,0);
                                      TotalArray[i] := TotalArray[i] + "Procurement Unit"."Qty. on Component Lines" + "Procurement Unit"."Qty. on Assy. Comp. FC" + "Procurement Unit"."Qty. on Assy. Comp.";
                                    UNTIL i = PerToExport;
                                  END;

                                  // Show Total
                                  IF ShowTotal THEN BEGIN
                                    WriteRowIntroduction("Procurement Unit", DescToPrint, txtTotalForecast);
                                    i := 0;
                                    REPEAT
                                      i := i + 1;
                                      AFPExcelCreate.EnterIntoNextColumn(
                                        FORMAT(TotalArray[i]),FALSE,FALSE,FALSE,0);
                                    UNTIL i = PerToExport;
                                  END;

                                  // Show Cost Per Period
                                  IF ShowCostPerPeriod THEN BEGIN
                                    WriteRowIntroduction("Procurement Unit", DescToPrint, txtForecastCost);
                                  END;
                                  ItemFCCost := 0;
                                  UnitCost := 0;
                                  UnitCost := UBP.GetUnitCost("Procurement Unit"."Location Code", "Procurement Unit"."Item No.", "Procurement Unit"."Variant Code");
                                  CLEAR(PeriodCostArray);
                                  i := 0;
                                  REPEAT
                                    i := i + 1;
                                    PeriodCostArray[i] := ROUND(TotalArray[i] * UnitCost,0.01);
                                    ItemFCCost := ItemFCCost + ROUND(TotalArray[i] * UnitCost,0.01);
                                    IF ShowCostPerPeriod THEN
                                      AFPExcelCreate.EnterIntoNextColumn(
                                        FORMAT(PeriodCostArray[i]),FALSE,FALSE,FALSE,0);
                                  UNTIL i = PerToExport;
                                  IF ShowCostPerPeriod THEN
                                    AFPExcelCreate.EnterIntoNextColumn(
                                      FORMAT(ItemFCCost),FALSE,FALSE,FALSE,0);

                                  // Actual
                                  IF ShowActual THEN BEGIN
                                    WriteRowIntroduction("Procurement Unit", DescToPrint, txtActualUsage);
                                    ItemUsage.RESET;
                                    ItemUsage.SETCURRENTKEY(
                                      "Location Code","Item No.","Variant Code","Starting Date","Ending Date");
                                    ItemUsage.SETRANGE("Location Code","Procurement Unit"."Location Code");
                                    ItemUsage.SETRANGE("Item No.","Procurement Unit"."Item No.");
                                    ItemUsage.SETRANGE("Variant Code","Procurement Unit"."Variant Code");
                                    IF ItemUsage.FIND('-') THEN BEGIN
                                      BEGIN
                                        i := 0;
                                        REPEAT
                                          i := i + 1;
                                          CASE ShowActualOption OF
                                            ShowActualOption::Single: ItemUsage.SETFILTER("Location Filter", "Procurement Unit"."Location Code");
                                            ShowActualOption::Hub: ItemUsage.SETFILTER("Location Filter", UsageLocationFilter);
                                            ELSE
                                              ItemUsage.SETFILTER("Location Filter", UsageLocationFilter);
                                          END;
                                          ItemUsage.SETFILTER("Date Filter",'%1..%2',StartingDateArray[i],EndingDateArray[i]);
                                          ItemUsage.CALCFIELDS(
                                            "Usage Quantity","Adjustment Quantity","Exclude Usage Quantity","Transfer Usage",
                                            "Drop Ship Usage Quantity","Forecast Cust. Actual Usage");
                                          IF ShowCollaborative THEN
                                            AFPExcelCreate.EnterIntoNextColumn(
                                              FORMAT(ItemUsage.AdjustedUsage),FALSE,FALSE,FALSE,0)
                                          ELSE
                                            AFPExcelCreate.EnterIntoNextColumn(
                                              FORMAT(ItemUsage.AdjustedUsage - ItemUsage."Forecast Cust. Actual Usage"),FALSE,FALSE,FALSE,0)
                                        UNTIL (EndingDateArray[i] = LastClosedPerDate) OR
                                              (i = PerToExport);
                                      END;
                                    END ELSE BEGIN
                                      i := 0;
                                      REPEAT
                                        i := i + 1;
                                          AFPExcelCreate.EnterIntoNextColumn(
                                            FORMAT(0),FALSE,FALSE,FALSE,0)
                                      UNTIL (i = PerToExport);
                                    END;
                                  END;

                                  IF BlankLineBetweenItems THEN
                                    AFPExcelCreate.EnterIntoNextRow('',TRUE,FALSE,FALSE,0);
                                END;

               ReqFilterFields=Replenishment Source Type,Replenishment Source Code;
               DataItemLink=Item No.=FIELD(No.),
                            Location Code=FIELD(Location Filter) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1240030019;2;Field  ;
                  CaptionML=ENU=Use Calculate Periods;
                  SourceExpr=UseCalcPeriods;
                  OnValidate=BEGIN
                               StartDate := 0D;
                             END;
                              }

      { 1240030010;2;Field  ;
                  CaptionML=ENU=Start Date;
                  SourceExpr=StartDate;
                  OnValidate=BEGIN
                               IF UseCalcPeriods THEN
                                 ForecastInvPeriod.SETRANGE(Type,ForecastInvPeriod.Type::Calculate)
                               ELSE
                                 ForecastInvPeriod.SETRANGE(Type,ForecastInvPeriod.Type::" ");
                               ForecastInvPeriod.SETRANGE("Starting Date",StartDate);
                               IF (NOT ForecastInvPeriod.FIND('-')) AND
                                  (StartDate <> 0D) THEN
                                 ERROR(Text002);
                             END;

                  OnLookup=BEGIN
                             IF UseCalcPeriods THEN
                               ForecastInvPeriod.SETRANGE(Type,ForecastInvPeriod.Type::Calculate)
                             ELSE
                               ForecastInvPeriod.SETRANGE(Type,ForecastInvPeriod.Type::" ");
                             IF PAGE.RUNMODAL(PAGE::"Forecast Inventory Periods",ForecastInvPeriod) = ACTION::LookupOK THEN
                               StartDate := ForecastInvPeriod."Starting Date";
                           END;
                            }

      { 1240030012;2;Field  ;
                  CaptionML=ENU=Periods to Export;
                  SourceExpr=PerToExport }

      { 1240030018;2;Field  ;
                  CaptionML=ENU=Show Only Forecast Items;
                  SourceExpr=ShowOnlyForecastItems }

      { 1240030014;2;Field  ;
                  CaptionML=ENU=Show Only Top Level Items;
                  SourceExpr=ShowOnlyTopLevelItems }

      { 1240030000;2;Field  ;
                  CaptionML=ENU=Show Forecast;
                  SourceExpr=ShowForecast }

      { 1240030002;2;Field  ;
                  CaptionML=ENU=Show Adjustments;
                  SourceExpr=ShowAdjustments }

      { 1240030004;2;Field  ;
                  CaptionML=ENU=Show Collaborative;
                  SourceExpr=ShowCollaborative }

      { 1240030022;2;Field  ;
                  CaptionML=ENU=Show Component Demand;
                  SourceExpr=ShowComponentDemand }

      { 1240030006;2;Field  ;
                  CaptionML=ENU=Show Total;
                  SourceExpr=ShowTotal }

      { 1240030024;2;Field  ;
                  CaptionML=ENU=Show FC Cost Per Period;
                  SourceExpr=ShowCostPerPeriod }

      { 1240030016;2;Field  ;
                  CaptionML=ENU=Show Actual Usage;
                  SourceExpr=ShowActual }

      { 1240020000;2;Field  ;
                  CaptionML=ENU=Actual Usage Location Filter;
                  SourceExpr=ShowActualOption }

      { 1240030008;2;Field  ;
                  CaptionML=ENU=Blank Line Between Items;
                  SourceExpr=BlankLineBetweenItems }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForecastAdjust@1240030014 : Record 14002707;
      ForecastInvPeriod@1240030023 : Record 14000552;
      ForecastEntry@1240030011 : Record 14002603;
      InvMgtSetup@1240030033 : Record 14000551;
      ItemUsage@1240030006 : Record 14000557;
      Location@1240030028 : Record 14;
      LocInvPeriod@1240030026 : Record 14000553;
      AFPExcelCreate@1240030000 : Codeunit 14000587;
      Forecast@1240030007 : Codeunit 14000567;
      InvMgt@1000 : Codeunit 14000553;
      UBP@1240030035 : Codeunit 14000564;
      ProgWindow@1240030017 : Dialog;
      First@1240030008 : Boolean;
      i@1240030010 : Integer;
      j@1240030031 : Integer;
      PerToExport@1240030009 : Integer;
      StartingDateArray@1240030012 : ARRAY [200] OF Date;
      EndingDateArray@1240030013 : ARRAY [200] OF Date;
      PeriodCostArray@1240030041 : ARRAY [200] OF Decimal;
      ShowForecast@1240030001 : Boolean;
      ShowAdjustments@1240030002 : Boolean;
      ShowCollaborative@1240030003 : Boolean;
      ShowTotal@1240030004 : Boolean;
      ShowActual@1240030032 : Boolean;
      ShowOnlyTopLevelItems@1240030005 : Boolean;
      ShowOnlyForecastItems@1240030037 : Boolean;
      ShowCostPerPeriod@1240030038 : Boolean;
      ShowTotalCostPerItem@1240030039 : Boolean;
      BlankLineBetweenItems@1240030015 : Boolean;
      TotalArray@1240030016 : ARRAY [200] OF Decimal;
      ItemCount@1240030019 : Integer;
      ItemFCCost@1240030042 : Decimal;
      TotalItemCount@1240030018 : Integer;
      Text000@1240030020 : TextConst 'ENU=Export Forecast to Excel';
      Text001@1240030021 : TextConst 'ENU=Progress    @1@@@@@@@@@@@@@@@@@@';
      StartDate@1240030022 : Date;
      Text002@1240030024 : TextConst 'ENU=Date must be a period starting date.';
      Text003@1240030025 : TextConst 'ENU=Start Date and Periods to Export must be specified.';
      UseCalcPeriods@1240030027 : Boolean;
      LastClosedPerDate@1240030029 : Date;
      Text004@1240030030 : TextConst 'ENU=Calculate periods can not be used to export closed periods.';
      UsageLocationFilter@1240030034 : Text[250];
      PeriodDays@1240030044 : Integer;
      ShowComponentDemand@1240030045 : Boolean;
      Text005@1240030048 : TextConst 'ENU=All selected locations must have the same Last Closed Period Date.';
      Text006@1240030049 : TextConst 'ENU=The Start Date must not be greater than the first open period date %1';
      LCPDate@1240030050 : Date;
      Opening@1240020001 : Boolean;
      ShowVariants@1240020002 : Boolean;
      LogEntryNo@1001 : Integer;
      Text007@1240020012 : TextConst 'ENU=Exporting calculate periods must start on a calc period date.  %1 is not.';
      txtForecast@1240020000 : TextConst 'ENU=Forecast';
      txtExpForecast@1240020003 : TextConst 'ENU=Export Forecast';
      txtType@1240020004 : TextConst 'ENU=Type';
      txtAdjustments@1240020005 : TextConst 'ENU=Adjustments';
      txtCollaborative@1240020006 : TextConst 'ENU=Collaborative';
      txtComponentDemand@1240020007 : TextConst 'ENU=Component Demand';
      txtTotalForecast@1240020008 : TextConst 'ENU=Total Forecast';
      txtForecastCost@1240020009 : TextConst 'ENU=Forecast Cost';
      txtActualUsage@1240020010 : TextConst 'ENU=Actual Usage';
      ShowActualOption@1240020011 : 'Single,Hub';
      RunInBatchMode@1000000001 : Boolean;
      ExportFileName@1000000000 : Text;

    PROCEDURE WriteRowIntroductionHeaders@1240020014(TypeColumnHeading@1240020001 : Text[250]);
    VAR
      ProcUnit@1240020000 : Record 14000555;
    BEGIN
      AFPExcelCreate.EnterIntoNextColumn(ProcUnit.FIELDCAPTION("Location Code"),TRUE,TRUE,TRUE,0);
      AFPExcelCreate.EnterIntoNextColumn(ProcUnit.FIELDCAPTION("Item No."),FALSE,FALSE,TRUE,0);
      IF ShowVariants THEN
        AFPExcelCreate.EnterIntoNextColumn(ProcUnit.FIELDCAPTION("Variant Code"),FALSE,FALSE,TRUE,0);
      AFPExcelCreate.EnterIntoNextColumn(ProcUnit.FIELDCAPTION(Description),FALSE,FALSE,TRUE,0);
      AFPExcelCreate.EnterIntoNextColumn(TypeColumnHeading,FALSE,FALSE,TRUE,0);
    END;

    PROCEDURE WriteRowIntroduction@1240020012(VAR CurrProcUnit@1240020000 : Record 14000555;Description@1240020002 : Text[250];TypeColumnHeading@1240020001 : Text[250]);
    BEGIN
      AFPExcelCreate.EnterIntoNextRow("Procurement Unit"."Location Code",TRUE,FALSE,FALSE,0);
      AFPExcelCreate.EnterIntoNextColumn(CurrProcUnit."Item No.",FALSE,FALSE,FALSE,0);
      IF ShowVariants THEN
        AFPExcelCreate.EnterIntoNextColumn(CurrProcUnit."Variant Code",FALSE,FALSE,FALSE,0);
      CurrProcUnit.CALCFIELDS(Description);
      AFPExcelCreate.EnterIntoNextColumn(CurrProcUnit.Description,FALSE,FALSE,FALSE,0);
      AFPExcelCreate.EnterIntoNextColumn(TypeColumnHeading,FALSE,FALSE,FALSE,0);
    END;

    PROCEDURE SetDeFaultExportParam@1000000000();
    VAR
      DateFormatStr@1000000000 : Text;
    BEGIN
      //<TPZ1685>
      UseCalcPeriods := FALSE;

      ForecastInvPeriod.RESET;
      ForecastInvPeriod.SETFILTER("Starting Date", '<=%1', WORKDATE);
      ForecastInvPeriod.FIND('+');
      StartDate := ForecastInvPeriod."Starting Date";
      ForecastInvPeriod.RESET;

      PerToExport := 13;
      ShowOnlyForecastItems := FALSE;
      ShowOnlyTopLevelItems := FALSE;
      ShowForecast := TRUE;
      ShowAdjustments := TRUE;
      ShowCollaborative := TRUE;
      ShowComponentDemand := FALSE;
      ShowTotal := TRUE;
      ShowCostPerPeriod := TRUE;
      ShowActual := TRUE;
      BlankLineBetweenItems := FALSE;

      RunInBatchMode := TRUE;

      DateFormatStr := FORMAT(CURRENTDATETIME, 0, '<Year4><Month,2><Day,2>-<Hours24,2><Minutes,2><Seconds,2>');
      ExportFileName := '\\NYSVDC3\PUBLIC\AFPForecastExport\AFP-Forecast-Export'+FORMAT(CURRENTDATETIME, 0, DateFormatStr) + '.xlsx';
      //</TPZ1685>
    END;

    BEGIN
    {
      2016-09-21 TPZ1685 TMEI
        Run by Job Scheduler
    }
    END.
  }
  RDLDATA
  {
  }
}

