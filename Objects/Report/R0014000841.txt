OBJECT Report 14000841 Item Label
{
  OBJECT-PROPERTIES
  {
    Date=06/28/17;
    Time=12:00:00 PM;
    Version List=SE0.55.12;
  }
  PROPERTIES
  {
    CaptionML=ENU=Item Label;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   UsePackingStationSetup := TRUE;
                 END;

  }
  DATASET
  {
    { 8129;    ;DataItem;                    ;
               DataItemTable=Table27;
               OnPreDataItem=BEGIN
                               IF UsePackingStationSetup THEN
                                 PackingStation.GetPackingStation
                               ELSE
                                 ReceiveStation.GetReceiveStation;

                               LabelHeader.GET(LabelHeader.Code);

                               Window.OPEN(
                                 Text001 +
                                 Text002);
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(1,"No.");
                                  Window.UPDATE(2,Description);

                                  PrintItem;
                                END;

               OnPostDataItem=BEGIN
                                Window.CLOSE;
                              END;

               ReqFilterFields=No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 3   ;2   ;Field     ;
                  CaptionML=ENU=Number of Copies;
                  SourceExpr=NoOfCopies }

      { 5   ;2   ;Field     ;
                  CaptionML=ENU=Label Code;
                  SourceExpr=LabelHeader.Code;
                  TableRelation="Label Header" WHERE (Label Usage=CONST(Item)) }

      { 1   ;2   ;Field     ;
                  CaptionML=ENU=Sales Order No.;
                  SourceExpr=SalesOrderNo;
                  TableRelation="Sales Header".No. WHERE (Document Type=CONST(Order)) }

      { 9   ;2   ;Field     ;
                  CaptionML=ENU=Package No.;
                  SourceExpr=PackageNo;
                  TableRelation=Package.No. }

      { 7   ;2   ;Field     ;
                  CaptionML=ENU=Save Label;
                  SourceExpr=SaveLabel }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      PackingStation@1000000000 : Record 14000709;
      ReceiveStation@1240030000 : Record 14000608;
      LabelHeader@1000000001 : Record 14000841;
      LabelLine@1000000002 : Record 14000842;
      LabelMgt@1000000003 : Codeunit 14000841;
      FieldValue@1000000004 : Codeunit 14000843;
      Window@1000000005 : Dialog;
      NoOfCopies@1000000006 : Integer;
      UsePackingStationSetup@1240030001 : Boolean;
      SalesOrderNo@1240030002 : Code[20];
      PackageNo@1240030003 : Code[20];
      SaveLabel@1240030004 : Boolean;
      Text001@1001 : TextConst 'ENU=No.         #1######################\';
      Text002@1002 : TextConst 'ENU=Description #2######################';
      Text003@1003 : TextConst 'ENU="Item Label "';
      Text004@1004 : TextConst 'ENU=Only Item table (27) and Company Information (79) is available.\';
      Text005@1005 : TextConst 'ENU=Package (14000701) with Package No.\';
      Text006@1006 : TextConst 'ENU=Sales Header (36), Packing Rule (14000715) and Bill of Lading (14000822) with Sales Order';

    PROCEDURE PrintItem@1();
    VAR
      PackingRule@1240030000 : Record 14000715;
      CompanyInfo@1240030001 : Record 79;
      SalesHeader@1240030002 : Record 36;
      BillOfLading@1240030003 : Record 14000822;
      Package@1240030004 : Record 14000701;
      PostedPackage@1240030005 : Record 14000704;
      LabelFile@1240030006 : Record 14000710;
      ShippingSetup@1240030007 : Record 14000707;
      BillOfLadingLine@1240030008 : Record 14000823;
      OutputFile@1000000000 : File;
      Value@1000000005 : Text[1000];
      LabelFileName@1240030009 : Text[250];
    BEGIN
      CLEAR(FieldValue);
      FieldValue.Item_27(Item,0);

      CompanyInfo.GET;
      FieldValue.CompanyInformation_79(CompanyInfo,0);

      IF SalesOrderNo <> '' THEN BEGIN
        IF NOT SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo) THEN
          CLEAR(SalesHeader);
        FieldValue.SalesHeader_36(SalesHeader,0);

        PackingRule.GetPackingRule(
          0,SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code");
        FieldValue.PackingRule_14000715(PackingRule,0);

        ShippingSetup.GET;
        BillOfLadingLine.RESET;
        BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
        BillOfLadingLine.SETRANGE("No.",SalesHeader."No.");
        BillOfLadingLine.SETRANGE(Closed,FALSE);
        IF ShippingSetup."Location Packing" THEN
          BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
        IF BillOfLadingLine.FIND('-') THEN
          BillOfLading.GET(BillOfLadingLine."Bill of Lading No.")
        ELSE
          CLEAR(BillOfLading);
        FieldValue.BillofLading_14000822(BillOfLading,0);
      END;

      IF PackageNo <> '' THEN BEGIN
        IF NOT Package.GET(PackageNo) THEN
          IF PostedPackage.GET(PackageNo) THEN
            Package.TRANSFERFIELDS(PostedPackage)
          ELSE
            CLEAR(Package);
        FieldValue.Package_14000701(Package,0);
      END;

      // Additional tables can be loaded here.

      IF UsePackingStationSetup THEN BEGIN
        PackingStation.TESTFIELD("Label Buffer File");
        LabelFileName := PackingStation.CalcLabelFileName(PackingStation."Label Buffer File");
      END ELSE BEGIN
        ReceiveStation.TESTFIELD("Label Buffer File");
        LabelFileName := ReceiveStation.CalcLabelFileName(ReceiveStation."Label Buffer File");
      END;

      OutputFile.TEXTMODE(TRUE);
      IF UsePackingStationSetup THEN
      OutputFile.CREATE(LabelFileName);

      FieldValue.LabelHeader_14000841(LabelHeader,0);
      LabelMgt.LabelFileTop(LabelHeader,OutputFile);

      LabelLine.RESET;
      LabelLine.SETRANGE("Label Code",LabelHeader.Code);
      IF LabelLine.FIND('-') THEN
        REPEAT
          FieldValue.LabelLine_14000842(LabelLine,0);
          Value := FieldValue.SubstituteLine(LabelLine);

          LabelMgt.LabelFileLine(LabelHeader,LabelLine,Value,OutputFile);
        UNTIL LabelLine.NEXT = 0;

      LabelMgt.LabelFileBottom(LabelHeader,OutputFile,NoOfCopies);

      OutputFile.CLOSE;

      IF SaveLabel AND (PackageNo <> '') THEN BEGIN
        LabelFile.RESET;
        LabelFile.SETRANGE(Type,LabelFile.Type::Package);
        LabelFile.SETRANGE("No.",PackageNo);
        IF NOT LabelFile.FIND('+') THEN BEGIN
          LabelFile.Type := LabelFile.Type::Package;
          LabelFile."No." := PackageNo;
          LabelFile."File No." := 0;
        END;
        LabelFile.INIT;
        LabelFile."File No." := LabelFile."File No." + 1;
        LabelFile.Description := COPYSTR(Text003 + Item."No.",1,MAXSTRLEN(LabelFile.Description));
        LabelFile."File Type" := LabelFile."File Type"::Item;
        IF UsePackingStationSetup THEN BEGIN
          LabelFile.ImportFileBinary(LabelFileName,FALSE);
          LabelFile."File Name" := LabelFileName;
          LabelFile."Printer Port" := PackingStation."Std. Pack. Label Printer Port";
          LabelFile."Packing Station Code" := PackingStation.Code;
          IF NOT PackingStation."No Label Printer" THEN
            LabelFile."No. of Copies Printed" := 1;
        END ELSE BEGIN
          LabelFile.ImportFileBinary(LabelFileName,FALSE);
          LabelFile."File Name" := LabelFileName;
          LabelFile."Printer Port" := ReceiveStation."Label Printer Port";
          LabelFile."Packing Station Code" := ReceiveStation.Code;
          IF NOT ReceiveStation."No Label Printer" THEN
            LabelFile."No. of Copies Printed" := 1;
        END;
        LabelFile."Created By" := USERID;
        LabelFile."Date Created" := TODAY;
        LabelFile."Time Created" := TIME;
        LabelFile.INSERT(TRUE);
      END;

      IF UsePackingStationSetup THEN BEGIN
        PackingStation.TESTFIELD("Std. Pack. Label Printer Port");

        PackingStation.PrintLabel(
          LabelFileName,PackingStation."Std. Pack. Label Printer Port",
          PackingStation."No Label Printer",PackingStation."Auto Delete Label Buffer File",
          Item."No.",LabelHeader);
      END ELSE BEGIN
        ReceiveStation.TESTFIELD("Label Printer Port");

        PackingStation.PrintLabel(
          LabelFileName,ReceiveStation."Item Label Printer Port",
          ReceiveStation."No Label Printer",ReceiveStation."Auto Delete Label Buffer File",
          Item."No.",LabelHeader);
      END;
    END;

    PROCEDURE LabelFormattingHelp@2();
    BEGIN
      MESSAGE(
        Text004 +
        Text005 +
        Text006);
    END;

    PROCEDURE GetTableFilter@3() : Text[250];
    BEGIN
      EXIT('27|36|79|14000701|14000715|14000822|14000841|14000842');
    END;

    PROCEDURE GetRecordNoStrMenu@4(CurrentTableNo@1000000000 : Integer) : Text[250];
    BEGIN
      CASE CurrentTableNo OF
        ELSE
          EXIT('');
      END;
    END;

    PROCEDURE InitializeRequest@6(NewLabelCode@1240030000 : Code[10];NewNoOfCopies@1240030001 : Integer;NewUsePackingStationSetup@1240030002 : Boolean;NewSalesOrderNo@1240030003 : Code[20];NewPackageNo@1240030004 : Code[20];NewSaveLabel@1240030005 : Boolean);
    BEGIN
      LabelHeader.Code := NewLabelCode;
      NoOfCopies := NewNoOfCopies;
      UsePackingStationSetup := NewUsePackingStationSetup;
      SalesOrderNo := NewSalesOrderNo;
      PackageNo := NewPackageNo;
      SaveLabel := NewSaveLabel;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

