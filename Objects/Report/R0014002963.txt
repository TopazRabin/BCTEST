OBJECT Report 14002963 Whse. Calc. Pallet Inventory
{
  OBJECT-PROPERTIES
  {
    Date=01/22/18;
    Time=12:00:00 PM;
    Version List=RF1.50.11;
  }
  PROPERTIES
  {
    CaptionML=ENU=Whse. Calculate Pallet Inventory;
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 4810;    ;DataItem;                    ;
               DataItemTable=Table7302;
               DataItemTableView=SORTING(Location Code,Bin Code,Item No.,Variant Code,Unit of Measure Code);
               OnPreDataItem=VAR
                               WhseJnlTemplate@1000 : Record 7309;
                               WhseJnlBatch@1001 : Record 7310;
                             BEGIN
                               IF RegisteringDate = 0D THEN
                                 ERROR(Text001,WhseJnlLine.FIELDCAPTION("Registering Date"));

                               SETRANGE("Location Code",WhseJnlLine."Location Code");

                               WhseJnlTemplate.GET(WhseJnlLine."Journal Template Name");
                               WhseJnlBatch.GET(
                                 WhseJnlLine."Journal Template Name",
                                 WhseJnlLine."Journal Batch Name",WhseJnlLine."Location Code");
                               IF NextDocNo = '' THEN BEGIN
                                 IF WhseJnlBatch."No. Series" <> '' THEN BEGIN
                                   WhseJnlLine.SETRANGE("Journal Template Name",WhseJnlLine."Journal Template Name");
                                   WhseJnlLine.SETRANGE("Journal Batch Name",WhseJnlLine."Journal Batch Name");
                                   WhseJnlLine.SETRANGE("Location Code",WhseJnlLine."Location Code");
                                   IF NOT WhseJnlLine.FINDFIRST THEN
                                     NextDocNo :=
                                       NoSeriesMgt.GetNextNo(WhseJnlBatch."No. Series",RegisteringDate,FALSE);
                                   WhseJnlLine.INIT;
                                 END;
                                 IF NextDocNo = '' THEN
                                   ERROR(Text001,WhseJnlLine.FIELDCAPTION("Whse. Document No."));
                               END;

                               NextLineNo := 0;

                               IF NOT HideValidationDialog THEN
                                 Window.OPEN(Text002,"Bin Code");
                             END;

               OnAfterGetRecord=BEGIN
                                  IF SkipCycleSKU("Location Code","Item No.","Variant Code") THEN
                                    CurrReport.SKIP;

                                  IF NOT HideValidationDialog THEN
                                    Window.UPDATE;
                                  CALCFIELDS("Quantity (Base)");
                                  IF ("Quantity (Base)" <> 0) OR ZeroQty THEN
                                    InsertWhseJnlLine("Bin Content");
                                END;

               OnPostDataItem=BEGIN
                                IF NOT HideValidationDialog THEN
                                  Window.CLOSE;
                              END;

               ReqFilterFields=Zone Code,Bin Code,Item No.,Variant Code,Unit of Measure Code,Bin Type Code,Warehouse Class Code }

    { 4820;    ;DataItem;                    ;
               DataItemTable=Table7312;
               OnPreDataItem=BEGIN
                               IF ("Bin Content".GETFILTER("Zone Code") = '') AND
                                  ("Bin Content".GETFILTER("Bin Code") = '')
                               THEN
                                 CurrReport.BREAK;

                               "Bin Content".COPYFILTER("Location Code","Location Code");
                               "Bin Content".COPYFILTER("Zone Code","Zone Code");
                               "Bin Content".COPYFILTER("Bin Code","Bin Code");
                               "Bin Content".COPYFILTER("Item No.","Item No.");
                               "Bin Content".COPYFILTER("Variant Code","Variant Code");
                               "Bin Content".COPYFILTER("Unit of Measure Code","Unit of Measure Code");
                               "Bin Content".COPYFILTER("Bin Type Code","Bin Type Code");
                               "Bin Content".COPYFILTER("Lot No. Filter","Lot No.");
                               "Bin Content".COPYFILTER("Serial No. Filter","Serial No.");
                               TempBinContent.RESET;
                               TempBinContent.DELETEALL;
                             END;

               OnAfterGetRecord=VAR
                                  BinContent@1000 : Record 7302;
                                BEGIN
                                  GetLocation("Location Code");
                                  IF ("Bin Code" = Location."Adjustment Bin Code") OR
                                     SkipCycleSKU("Location Code","Item No.","Variant Code")
                                  THEN
                                    CurrReport.SKIP;

                                  BinContent.COPYFILTERS("Bin Content");
                                  BinContent.SETRANGE("Location Code","Location Code");
                                  BinContent.SETRANGE("Item No.","Item No.");
                                  BinContent.SETRANGE("Variant Code","Variant Code");
                                  BinContent.SETRANGE("Unit of Measure Code","Unit of Measure Code");
                                  IF NOT BinContent.ISEMPTY THEN
                                    CurrReport.SKIP;

                                  TempBinContent.INIT;
                                  TempBinContent."Location Code" := "Location Code";
                                  TempBinContent."Item No." := "Item No.";
                                  TempBinContent."Zone Code" := "Zone Code";
                                  TempBinContent."Bin Code" := "Bin Code";
                                  TempBinContent."Variant Code" := "Variant Code";
                                  TempBinContent."Unit of Measure Code" := "Unit of Measure Code";
                                  TempBinContent."Quantity (Base)" := 0;
                                  IF NOT TempBinContent.FIND THEN
                                    TempBinContent.INSERT;
                                END;

               OnPostDataItem=BEGIN
                                TempBinContent.RESET;
                                IF TempBinContent.FINDSET THEN
                                  REPEAT
                                    InsertWhseJnlLine(TempBinContent);
                                  UNTIL TempBinContent.NEXT = 0;
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF RegisteringDate = 0D THEN
                     RegisteringDate := WORKDATE;
                   ValidateRegisteringDate;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESM=Opciones;
                             FRC=Options;
                             ENC=Options] }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Registering Date;
                             ESM=Fecha registro;
                             FRC=Date enregistrement;
                             ENC=Registering Date];
                  SourceExpr=RegisteringDate;
                  OnValidate=BEGIN
                               ValidateRegisteringDate;
                             END;
                              }

      { 9   ;2   ;Field     ;
                  Name=WhseDocumentNo;
                  CaptionML=[ENU=Whse. Document No.;
                             ESM=N§ documento almac‚n;
                             FRC=Nø document magasin;
                             ENC=Whse. Document No.];
                  SourceExpr=NextDocNo }

      { 11  ;2   ;Field     ;
                  CaptionML=[ENU=Items Not on Inventory;
                             ESM=Incluir prods. sin invent.;
                             FRC=Articles hors inventaire;
                             ENC=Items Not on Inventory];
                  SourceExpr=ZeroQty }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=Enter the %1.;ESM=Introduzca el %1.;FRC=Renseignez le champ %1.;ENC=Enter the %1.';
      Text002@1002 : TextConst 'ENU=Processing bins    #1##########;ESM=Procesando ubic.    #1##########;FRC=Traitement des zones    #1##########;ENC=Processing bins    #1##########';
      WhseJnlBatch@1004 : Record 7310;
      WhseJnlLine@1005 : Record 7311;
      SourceCodeSetup@1003 : Record 242;
      Location@1006 : Record 14;
      Bin@1000 : Record 7354;
      TempBinContent@1012 : TEMPORARY Record 7302;
      NoSeriesMgt@1017 : Codeunit 396;
      Window@1019 : Dialog;
      RegisteringDate@1020 : Date;
      CycleSourceType@1008 : ' ,Item,SKU';
      PhysInvtCountCode@1009 : Code[10];
      NextDocNo@1021 : Code[20];
      NextLineNo@1023 : Integer;
      ZeroQty@1026 : Boolean;
      HideValidationDialog@1007 : Boolean;
      StockProposal@1010 : Boolean;
      WhseJnlLineTmp@1240020000 : TEMPORARY Record 7311;
      WhseJnlLineTmp2@1240020001 : TEMPORARY Record 7311;
      JournalTemplate@1240020004 : Code[10];
      JournalBatch@1240020003 : Code[10];
      LocationCode@1240020002 : Code[10];

    PROCEDURE SetWhseJnlLine@1(VAR NewWhseJnlLine@1000 : Record 7311);
    BEGIN
      WhseJnlLine := NewWhseJnlLine;
    END;

    LOCAL PROCEDURE ValidateRegisteringDate@4();
    BEGIN
      WhseJnlBatch.GET(
        WhseJnlLine."Journal Template Name",
        WhseJnlLine."Journal Batch Name",WhseJnlLine."Location Code");
      IF WhseJnlBatch."No. Series" = '' THEN
        NextDocNo := ''
      ELSE BEGIN
        NextDocNo :=
          NoSeriesMgt.GetNextNo(WhseJnlBatch."No. Series",RegisteringDate,FALSE);
        CLEAR(NoSeriesMgt);
      END;
    END;

    PROCEDURE InsertWhseJnlLine@6(BinContent@1005 : Record 7302);
    VAR
      WhseEntry@1000 : Record 7312;
      ItemUOM@1004 : Record 5404;
      ItemTrackingMgt@1003 : Codeunit 6500;
      ExpDate@1001 : Date;
      EntriesExist@1002 : Boolean;
      PalletBinContent@1240020000 : Record 14002963;
      TotalPalletQty@1240020001 : Decimal;
      TotalPalletQtyBase@1240020002 : Decimal;
      TotalAppliedQty@1240020003 : Decimal;
      TotalAppliedQtyBase@1240020004 : Decimal;
      CurrentLineNo@1240020005 : Integer;
      CurrentLineNoIncrement@1240020006 : Integer;
      FirstLine@1240020007 : Boolean;
      WhseJnlLine2@1240020008 : Record 7311;
    BEGIN
      WhseJnlLineTmp.RESET;
      WhseJnlLineTmp.DELETEALL;

      WhseJnlLineTmp."Journal Template Name" := WhseJnlLine."Journal Template Name";
      WhseJnlLineTmp."Journal Batch Name" := WhseJnlLine."Journal Batch Name";
      WhseJnlLineTmp."Location Code" := WhseJnlLine."Location Code";
      WhseJnlLineTmp.INIT;

      WITH WhseJnlLineTmp DO BEGIN
        IF NextLineNo = 0 THEN BEGIN
          LOCKTABLE;
          SETRANGE("Journal Template Name",JournalTemplate);
          SETRANGE("Journal Batch Name",JournalBatch);
          SETRANGE("Location Code",LocationCode);
          IF FINDLAST THEN
            NextLineNo := "Line No.";

          IF NextLineNo = 0 THEN BEGIN
            WhseJnlLine2.RESET;
            WhseJnlLine2.SETRANGE("Journal Template Name",JournalTemplate);
            WhseJnlLine2.SETRANGE("Journal Batch Name",JournalBatch);
            WhseJnlLine2.SETRANGE("Location Code",LocationCode);
            IF WhseJnlLine2.FINDLAST THEN
              NextLineNo := WhseJnlLine2."Line No.";
          END;

          SourceCodeSetup.GET;
        END;

        GetLocation(BinContent."Location Code");

        WhseEntry.SETCURRENTKEY(
          "Item No.","Bin Code","Location Code","Variant Code",
          "Unit of Measure Code","Lot No.","Serial No.","Entry Type");
        WhseEntry.SETRANGE("Item No.",BinContent."Item No.");
        WhseEntry.SETRANGE("Bin Code",BinContent."Bin Code");
        WhseEntry.SETRANGE("Location Code",BinContent."Location Code");
        WhseEntry.SETRANGE("Variant Code",BinContent."Variant Code");
        WhseEntry.SETRANGE("Unit of Measure Code",BinContent."Unit of Measure Code");
        IF WhseEntry.FIND('-') THEN;
        REPEAT
          WhseEntry.SETRANGE("Lot No.",WhseEntry."Lot No.");
          WhseEntry.SETRANGE("Serial No.",WhseEntry."Serial No.");
          WhseEntry.CALCSUMS("Qty. (Base)");
          IF (WhseEntry."Qty. (Base)" <> 0) OR ZeroQty THEN BEGIN
            ItemUOM.GET(BinContent."Item No.",BinContent."Unit of Measure Code");
            NextLineNo := NextLineNo + 10000;
            INIT;
            "Journal Template Name" := JournalTemplate;
            "Journal Batch Name" := JournalBatch;
            "Line No." := NextLineNo;
            VALIDATE("Registering Date",RegisteringDate);
            VALIDATE("Entry Type","Entry Type"::"Positive Adjmt.");
            VALIDATE("Whse. Document No.",NextDocNo);
            VALIDATE("Item No.",BinContent."Item No.");
            VALIDATE("Variant Code",BinContent."Variant Code");
            VALIDATE("Location Code",BinContent."Location Code");
            "From Bin Code" := Location."Adjustment Bin Code";
            "From Zone Code" := Bin."Zone Code";
            "From Bin Type Code" := Bin."Bin Type Code";
            VALIDATE("To Zone Code",BinContent."Zone Code");
            VALIDATE("To Bin Code",BinContent."Bin Code");
            VALIDATE("Zone Code",BinContent."Zone Code");
            SetProposal(StockProposal);
            VALIDATE("Bin Code",BinContent."Bin Code");
            VALIDATE("Source Code",SourceCodeSetup."Whse. Phys. Invt. Journal");
            VALIDATE("Unit of Measure Code",BinContent."Unit of Measure Code");
            "Serial No." := WhseEntry."Serial No.";
            "Lot No." := WhseEntry."Lot No.";
            "Warranty Date" := WhseEntry."Warranty Date";
            ExpDate := ItemTrackingMgt.ExistingExpirationDate("Item No.","Variant Code","Lot No.","Serial No.",FALSE,EntriesExist);
            IF EntriesExist THEN
              "Expiration Date" := ExpDate
            ELSE
              "Expiration Date" := WhseEntry."Expiration Date";
            "Phys. Inventory" := TRUE;

            "Qty. (Calculated)" := ROUND(WhseEntry."Qty. (Base)" / ItemUOM."Qty. per Unit of Measure",0.00001);
            "Qty. (Calculated) (Base)" := WhseEntry."Qty. (Base)";

            VALIDATE("Qty. (Phys. Inventory)","Qty. (Calculated)");
            VALIDATE("Qty. (Phys. Inventory) (Base)",WhseEntry."Qty. (Base)");

            IF Location."Use ADCS" THEN
              VALIDATE("Qty. (Phys. Inventory)",0);
            "Registering No. Series" := WhseJnlBatch."Registering No. Series";
            "Whse. Document Type" :=
              "Whse. Document Type"::"Whse. Phys. Inventory";
            "Phys Invt Counting Period Code" := PhysInvtCountCode;
            "Phys Invt Counting Period Type" := CycleSourceType;
            INSERT(TRUE);
          END;
          IF WhseEntry.FIND('+') THEN;
          WhseEntry.SETRANGE("Lot No.");
          WhseEntry.SETRANGE("Serial No.");
        UNTIL WhseEntry.NEXT = 0;
      END;

      FirstLine := FALSE;
      WhseJnlLineTmp.RESET;
      IF WhseJnlLineTmp.FINDSET(FALSE) THEN BEGIN
        REPEAT
          FirstLine := TRUE;
          CLEAR(TotalAppliedQty);
          CLEAR(TotalAppliedQtyBase);
          PalletBinContent.RESET;
          PalletBinContent.SETRANGE(Location,WhseJnlLineTmp."Location Code");
          PalletBinContent.SETRANGE(Bin,WhseJnlLineTmp."Bin Code");
          PalletBinContent.SETRANGE("Item No.",WhseJnlLineTmp."Item No.");
          PalletBinContent.SETRANGE("Variant No.",WhseJnlLineTmp."Variant Code");
          PalletBinContent.SETRANGE("Unit of Measure",WhseJnlLineTmp."Unit of Measure Code");
          PalletBinContent.SETRANGE("Lot No.",WhseJnlLineTmp."Lot No.");
          PalletBinContent.SETRANGE("Serial No.",WhseJnlLineTmp."Serial No.");
          IF PalletBinContent.FINDSET THEN BEGIN
            REPEAT
              CLEAR(TotalPalletQty);
              CLEAR(TotalPalletQtyBase);
              WhseJnlLine.RESET;
              WhseJnlLine.SETRANGE("Location Code",PalletBinContent.Location);
              WhseJnlLine.SETRANGE("Bin Code",PalletBinContent.Bin);
              WhseJnlLine.SETRANGE("Item No.",PalletBinContent."Item No.");
              WhseJnlLine.SETRANGE("Variant Code",PalletBinContent."Variant No.");
              WhseJnlLine.SETRANGE("Unit of Measure Code",PalletBinContent."Unit of Measure");
              WhseJnlLine.SETRANGE("Lot No.",PalletBinContent."Lot No.");
              WhseJnlLine.SETRANGE("Serial No.",PalletBinContent."Serial No.");
              WhseJnlLine.SETRANGE("Pallet Code",PalletBinContent."Pallet No.");
              WhseJnlLine.SETRANGE("Box Code",PalletBinContent."Box No.");
              IF WhseJnlLine.ISEMPTY THEN BEGIN
                IF (WhseJnlLineTmp."Qty. (Calculated) (Base)" - TotalAppliedQtyBase) > 0 THEN BEGIN
                  ItemUOM.GET(WhseJnlLineTmp."Item No.",WhseJnlLineTmp."Unit of Measure Code");
                  WhseJnlLine.INIT;
                  WhseJnlLine."Journal Template Name" := WhseJnlLineTmp."Journal Template Name";
                  WhseJnlLine."Journal Batch Name" := WhseJnlLineTmp."Journal Batch Name";
                  IF FirstLine THEN BEGIN
                    WhseJnlLine."Line No." := WhseJnlLineTmp."Line No.";
                    CurrentLineNo := WhseJnlLineTmp."Line No." + 100;
                  END ELSE BEGIN
                    WhseJnlLine."Line No." := CurrentLineNo;
                    CurrentLineNo += 100;
                  END;
                  FirstLine := FALSE;

                  WhseJnlLine."Registering Date" := WhseJnlLineTmp."Registering Date";
                  WhseJnlLine."Entry Type" := WhseJnlLineTmp."Entry Type";
                  WhseJnlLine."Whse. Document No." := WhseJnlLineTmp."Whse. Document No.";
                  WhseJnlLine."Item No." := WhseJnlLineTmp."Item No.";
                  WhseJnlLine.Description := WhseJnlLineTmp.Description;
                  WhseJnlLine."Variant Code" := WhseJnlLineTmp."Variant Code";
                  WhseJnlLine."Location Code" := WhseJnlLineTmp."Location Code";
                  WhseJnlLine."From Bin Code" := WhseJnlLineTmp."From Bin Code";
                  WhseJnlLine."From Zone Code" := WhseJnlLineTmp."From Zone Code";
                  WhseJnlLine."From Bin Type Code" := WhseJnlLineTmp."From Bin Type Code";
                  WhseJnlLine."To Zone Code" := WhseJnlLineTmp."To Zone Code";
                  WhseJnlLine."To Bin Code" := WhseJnlLineTmp."To Bin Code";
                  WhseJnlLine."Zone Code" := WhseJnlLineTmp."Zone Code";
                  WhseJnlLine."Bin Code" := WhseJnlLineTmp."Bin Code";
                  WhseJnlLine."Source Code" := WhseJnlLineTmp."Source Code";
                  WhseJnlLine."Unit of Measure Code" := WhseJnlLineTmp."Unit of Measure Code";
                  WhseJnlLine."Serial No." := WhseJnlLineTmp."Serial No.";
                  WhseJnlLine."Lot No." := WhseJnlLineTmp."Lot No.";
                  WhseJnlLine."Warranty Date" := WhseJnlLineTmp."Warranty Date";
                  WhseJnlLine."Expiration Date" := WhseJnlLineTmp."Expiration Date";
                  WhseJnlLine."Phys. Inventory" := WhseJnlLineTmp."Phys. Inventory";

                  TotalPalletQty := ROUND(PalletBinContent."Quantity (Base)" / ItemUOM."Qty. per Unit of Measure",0.00001);
                  TotalAppliedQty += TotalPalletQty;
                  TotalPalletQtyBase := PalletBinContent."Quantity (Base)";
                  TotalAppliedQtyBase += TotalPalletQtyBase;

                  WhseJnlLine."Qty. (Calculated)" := TotalPalletQty;
                  WhseJnlLine."Qty. (Calculated) (Base)" := TotalPalletQtyBase;
                  WhseJnlLine."Qty. (Phys. Inventory)" := TotalPalletQty;
                  WhseJnlLine."Qty. (Phys. Inventory) (Base)" := TotalPalletQtyBase;

                  WhseJnlLine."Pallet Code" := PalletBinContent."Pallet No.";
                  WhseJnlLine."Pallet Action" := WhseJnlLine."Pallet Action"::Physical;
                  WhseJnlLine."Box Code" := PalletBinContent."Box No.";

                  WhseJnlLine."Registering No. Series" := WhseJnlLineTmp."Registering No. Series";
                  WhseJnlLine."Whse. Document Type" := WhseJnlLineTmp."Whse. Document Type";
                  WhseJnlLine."Phys Invt Counting Period Code" := WhseJnlLineTmp."Phys Invt Counting Period Code";
                  WhseJnlLine."Phys Invt Counting Period Type" := WhseJnlLineTmp."Phys Invt Counting Period Type";
                  WhseJnlLine.INSERT(TRUE);
                END;
              END;
            UNTIL PalletBinContent.NEXT = 0;

            IF (WhseJnlLineTmp."Qty. (Calculated) (Base)" > TotalAppliedQtyBase) THEN BEGIN
              WhseJnlLine.RESET;
              WhseJnlLine.SETRANGE("Location Code",PalletBinContent.Location);
              WhseJnlLine.SETRANGE("Bin Code",PalletBinContent.Bin);
              WhseJnlLine.SETRANGE("Item No.",PalletBinContent."Item No.");
              WhseJnlLine.SETRANGE("Variant Code",PalletBinContent."Variant No.");
              WhseJnlLine.SETRANGE("Unit of Measure Code",PalletBinContent."Unit of Measure");
              WhseJnlLine.SETRANGE("Lot No.",PalletBinContent."Lot No.");
              WhseJnlLine.SETRANGE("Serial No.",PalletBinContent."Serial No.");
              WhseJnlLine.SETFILTER("Pallet Code",'%1','');
              WhseJnlLine.SETFILTER("Box Code",'%1','');
              IF NOT WhseJnlLine.FINDSET(FALSE) THEN BEGIN
                IF (WhseJnlLineTmp."Qty. (Calculated) (Base)" - TotalAppliedQtyBase) > 0 THEN BEGIN
                  ItemUOM.GET(WhseJnlLineTmp."Item No.",WhseJnlLineTmp."Unit of Measure Code");
                  WhseJnlLine.INIT;
                  WhseJnlLine."Journal Template Name" := WhseJnlLineTmp."Journal Template Name";
                  WhseJnlLine."Journal Batch Name" := WhseJnlLineTmp."Journal Batch Name";
                  IF FirstLine THEN BEGIN
                    WhseJnlLine."Line No." := WhseJnlLineTmp."Line No.";
                    CurrentLineNo := WhseJnlLineTmp."Line No." + 100;
                  END ELSE BEGIN
                    WhseJnlLine."Line No." := CurrentLineNo;
                    CurrentLineNo += 100;
                  END;
                  WhseJnlLine."Registering Date" := WhseJnlLineTmp."Registering Date";
                  WhseJnlLine."Entry Type" := WhseJnlLineTmp."Entry Type";
                  WhseJnlLine."Whse. Document No." := WhseJnlLineTmp."Whse. Document No.";
                  WhseJnlLine."Item No." := WhseJnlLineTmp."Item No.";
                  WhseJnlLine.Description := WhseJnlLineTmp.Description;
                  WhseJnlLine."Variant Code" := WhseJnlLineTmp."Variant Code";
                  WhseJnlLine."Location Code" := WhseJnlLineTmp."Location Code";
                  WhseJnlLine."From Bin Code" := WhseJnlLineTmp."From Bin Code";
                  WhseJnlLine."From Zone Code" := WhseJnlLineTmp."From Zone Code";
                  WhseJnlLine."From Bin Type Code" := WhseJnlLineTmp."From Bin Type Code";
                  WhseJnlLine."To Zone Code" := WhseJnlLineTmp."To Zone Code";
                  WhseJnlLine."To Bin Code" := WhseJnlLineTmp."To Bin Code";
                  WhseJnlLine."Zone Code" := WhseJnlLineTmp."Zone Code";
                  WhseJnlLine."Bin Code" := WhseJnlLineTmp."Bin Code";
                  WhseJnlLine."Source Code" := WhseJnlLineTmp."Source Code";
                  WhseJnlLine."Unit of Measure Code" := WhseJnlLineTmp."Unit of Measure Code";
                  WhseJnlLine."Serial No." := WhseJnlLineTmp."Serial No.";
                  WhseJnlLine."Lot No." := WhseJnlLineTmp."Lot No.";
                  WhseJnlLine."Warranty Date" := WhseJnlLineTmp."Warranty Date";
                  WhseJnlLine."Expiration Date" := WhseJnlLineTmp."Expiration Date";
                  WhseJnlLine."Phys. Inventory" := WhseJnlLineTmp."Phys. Inventory";

                  WhseJnlLine."Qty. (Calculated)" :=
                    ROUND((WhseJnlLineTmp."Qty. (Calculated) (Base)" - TotalAppliedQtyBase) /
                          ItemUOM."Qty. per Unit of Measure",0.00001);
                  WhseJnlLine."Qty. (Calculated) (Base)" := WhseJnlLineTmp."Qty. (Calculated) (Base)" - TotalAppliedQtyBase;
                  WhseJnlLine."Qty. (Phys. Inventory)" := WhseJnlLine."Qty. (Calculated)";
                  WhseJnlLine."Qty. (Phys. Inventory) (Base)" := WhseJnlLine."Qty. (Calculated) (Base)";

                  WhseJnlLine."Registering No. Series" := WhseJnlLineTmp."Registering No. Series";
                  WhseJnlLine."Whse. Document Type" := WhseJnlLineTmp."Whse. Document Type";
                  WhseJnlLine."Phys Invt Counting Period Code" := WhseJnlLineTmp."Phys Invt Counting Period Code";
                  WhseJnlLine."Phys Invt Counting Period Type" := WhseJnlLineTmp."Phys Invt Counting Period Type";
                  WhseJnlLine.INSERT(TRUE);
                END;
              END;
            END;
          END ELSE BEGIN
            WhseJnlLine.INIT;
            WhseJnlLine := WhseJnlLineTmp;
            WhseJnlLine.INSERT(TRUE);
          END;
        UNTIL WhseJnlLineTmp.NEXT = 0;
      END;

      WhseJnlLineTmp.RESET;
      WhseJnlLineTmp.DELETEALL(TRUE);
    END;

    PROCEDURE InitializeRequest@2(NewRegisteringDate@1000 : Date;WhseDocNo@1001 : Code[20];ItemsNotOnInvt@1002 : Boolean);
    BEGIN
      RegisteringDate := NewRegisteringDate;
      NextDocNo := WhseDocNo;
      ZeroQty := ItemsNotOnInvt;
    END;

    PROCEDURE InitializePhysInvtCount@7381(PhysInvtCountCode2@1000 : Code[10];CycleSourceType2@1001 : ' ,Item,SKU');
    BEGIN
      PhysInvtCountCode := PhysInvtCountCode2;
      CycleSourceType := CycleSourceType2;
    END;

    PROCEDURE InitializeJournal@1240020000(NewJournalTemplate@1240020000 : Code[10];NewJournalBatch@1240020002 : Code[10];NewLocationCode@1240020003 : Code[10]);
    VAR
      PalletBinContent@1240020001 : Record 14002963;
    BEGIN
      JournalTemplate := NewJournalTemplate;
      JournalBatch := NewJournalBatch;
      LocationCode := NewLocationCode;
    END;

    PROCEDURE SetHideValidationDialog@7380(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE SkipCycleSKU@7382(LocationCode@1000 : Code[10];ItemNo@1002 : Code[20];VariantCode@1003 : Code[10]) : Boolean;
    VAR
      SKU@1001 : Record 5700;
    BEGIN
      IF CycleSourceType = CycleSourceType::Item THEN
        IF SKU.READPERMISSION THEN
          IF SKU.GET(LocationCode,ItemNo,VariantCode) THEN
            EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE GetLocation@3(LocationCode@1000 : Code[10]);
    BEGIN
      IF Location.Code <> LocationCode THEN BEGIN
        Location.GET(LocationCode);
        Location.TESTFIELD("Adjustment Bin Code");
        Bin.GET(Location.Code,Location."Adjustment Bin Code");
        Bin.TESTFIELD("Zone Code");
      END;
    END;

    PROCEDURE SetProposalMode@5(NewValue@1000 : Boolean);
    BEGIN
      StockProposal := NewValue;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

