OBJECT Report 14000761 UPS Label Batch
{
  OBJECT-PROPERTIES
  {
    Date=06/28/17;
    Time=12:00:00 PM;
    Version List=SE0.55.12;
  }
  PROPERTIES
  {
    CaptionML=ENU=UPS Label Batch;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  PackingStation.GetPackingStation;
                  CarrierPackingStation.GetPackingStation(PackingStation);
                  ShippingAgentAccount.GET(CarrierPackingStation."UPS Shipping Agent Account No.");

                  Customer.INIT;
                  Customer."No." := '9999999999';
                  Customer.Name := 'Test for Labels';
                  IF Customer.INSERT THEN ;

                  ShipToAddress2.INIT;
                  ShipToAddress2."Customer No." := Customer."No.";
                  ShipToAddress2.Code := '9999999991';
                  ShipToAddress2.Name := 'Navision Software U.S., Inc.';
                  ShipToAddress2.Address := '3505 Koger Boulevard';
                  ShipToAddress2."Address 2" := 'Suite 400';
                  ShipToAddress2.City := 'Duluth';
                  ShipToAddress2.County := 'GA';
                  ShipToAddress2."Post Code" := '30096';
                  ShipToAddress2.Contact := 'John Raymond';
                  ShipToAddress2."Phone No." := '678 226 8300';
                  IF NOT ShipToAddress2.INSERT THEN
                    ShipToAddress2.MODIFY;

                  ShipToAddress2.INIT;
                  ShipToAddress2."Customer No." := Customer."No.";
                  ShipToAddress2.Code := '9999999992';
                  ShipToAddress2.Name := 'Lanham & Associates, Inc.';
                  ShipToAddress2.Address := 'One Meca Way';
                  ShipToAddress2."Address 2" := 'Suite 100';
                  ShipToAddress2.City := 'Norcross';
                  ShipToAddress2.County := 'GA';
                  ShipToAddress2."Post Code" := '30093';
                  ShipToAddress2.Contact := 'Dale Lanham';
                  ShipToAddress2."Phone No." := '770 654 5601';
                  IF NOT ShipToAddress2.INSERT THEN
                    ShipToAddress2.MODIFY;

                  ShipToAddress2.INIT;
                  ShipToAddress2."Customer No." := Customer."No.";
                  ShipToAddress2.Code := '9999999993';
                  ShipToAddress2.Name := 'Navision Software a/s';
                  ShipToAddress2.Address := 'Frydenlunds Alle 6';
                  ShipToAddress2."Address 2" := '';
                  ShipToAddress2.City := 'Vedbaek';
                  ShipToAddress2."Country/Region Code" := 'DK';
                  ShipToAddress2."Post Code" := '2950';
                  ShipToAddress2.Contact := 'Peter Jensen';
                  ShipToAddress2."Phone No." := '45 45 65 50 00';
                  IF NOT ShipToAddress2.INSERT THEN
                    ShipToAddress2.MODIFY;

                  ShipToAddress2.INIT;
                  ShipToAddress2."Customer No." := Customer."No.";
                  ShipToAddress2.Code := '9999999994';
                  ShipToAddress2.Name := 'Wacker-Chemie Italia';
                  ShipToAddress2.Address := 'Via L. Einaudi 6';
                  ShipToAddress2."Address 2" := '';
                  ShipToAddress2.City := 'Peschiera Borromeo';
                  ShipToAddress2."Country/Region Code" := 'IT';
                  ShipToAddress2.County := '';
                  ShipToAddress2."Post Code" := '20068';
                  ShipToAddress2.Contact := 'Armondo Roggerio';
                  ShipToAddress2."Phone No." := '39 02 51691 250';
                  IF NOT ShipToAddress2.INSERT THEN
                    ShipToAddress2.MODIFY;

                  ShipToAddress2.INIT;
                  ShipToAddress2."Customer No." := Customer."No.";
                  ShipToAddress2.Code := '9999999995';
                  ShipToAddress2.Name := 'Navision Software Canada, Inc.';
                  ShipToAddress2.Address := '15 Wertheim Ct.';
                  ShipToAddress2."Address 2" := 'Suite 802';
                  ShipToAddress2.City := 'Richmond Hill';
                  ShipToAddress2."Country/Region Code" := 'CA';
                  ShipToAddress2.County := 'ON';
                  ShipToAddress2."Post Code" := 'L4B 3H7';
                  ShipToAddress2.Contact := 'Tom Mortensen';
                  ShipToAddress2."Phone No." := '403 123 4567';
                  IF NOT ShipToAddress2.INSERT THEN
                    ShipToAddress2.MODIFY;

                  ShipToAddress2.INIT;
                  ShipToAddress2."Customer No." := Customer."No.";
                  ShipToAddress2.Code := '9999999996';
                  ShipToAddress2.Name := 'Breck`s Sporting Goods';
                  ShipToAddress2.Address := '2560 Roy St';
                  ShipToAddress2.City := 'Sherbrooke';
                  ShipToAddress2."Country/Region Code" := 'CA';
                  ShipToAddress2.County := 'QC';
                  ShipToAddress2."Post Code" := 'J1K 1C1';
                  ShipToAddress2.Contact := 'Charles Mortensen';
                  ShipToAddress2."Phone No." := '413 123 4567';
                  IF NOT ShipToAddress2.INSERT THEN
                    ShipToAddress2.MODIFY;
                END;

    OnPostReport=VAR
                   ShippingAgentAccount2@1000000002 : Record 14000770;
                 BEGIN
                   ShippingAgentAccount2.RESET;
                   ShippingAgentAccount2.SETRANGE(
                     "Account No.",CarrierPackingStation."UPS Shipping Agent Account No.");
                   REPORT.RUNMODAL(REPORT::"UPS Manifest",FALSE,FALSE,ShippingAgentAccount2);

                   MESSAGE('Test Packages, Customer and Ship-to Address has not been deleted.');
                 END;

  }
  DATASET
  {
    { 6563;    ;DataItem;ShippingAgent       ;
               DataItemTable=Table291;
               DataItemTableView=SORTING(Code)
                                 ORDER(Ascending)
                                 WHERE(Shipper Type=CONST(UPS)) }

    { 8154;1   ;DataItem;ShippingAgentService;
               DataItemTable=Table14000708;
               DataItemTableView=SORTING(Shipping Agent Code,Code,World Wide Service)
                                 ORDER(Ascending);
               DataItemLink=Shipping Agent Code=FIELD(Code) }

    { 8801;2   ;DataItem;ShipToAddress       ;
               DataItemTable=Table222;
               DataItemTableView=SORTING(Customer No.)
                                 ORDER(Ascending);
               MaxIteration=2;
               OnPreDataItem=BEGIN
                               ShipToAddress.RESET;

                               ShipToAddress.SETRANGE("Customer No.",Customer."No.");

                               IF (ShippingAgentService."World Wide Service" = FALSE) AND
                                 (ShippingAgentService."UPS Canadian Service" = FALSE)
                               THEN
                                 ShipToAddress.SETRANGE("Country/Region Code",'');

                               IF ShippingAgentService."UPS Canadian Service" THEN
                                 ShipToAddress.SETRANGE(ShipToAddress."Country/Region Code",'CA');

                               IF ShippingAgentService."World Wide Service" AND
                                  NOT ShippingAgentService."UPS Canadian Service"
                               THEN
                                 ShipToAddress.SETFILTER("Country/Region Code",'%1|%2','DK','IT');
                             END;

               OnAfterGetRecord=BEGIN
                                  Package.INIT;
                                  Package."No." := '';
                                  Package.Miscellaneous := TRUE;
                                  Package.INSERT(TRUE);
                                  Package."Packing Date" := WORKDATE;
                                  Package.VALIDATE("Ship-to No.",ShipToAddress."Customer No.");
                                  Package.VALIDATE("Ship-to Code",ShipToAddress.Code);
                                  Package."Shipping Agent Code" := ShippingAgent.Code;
                                  IF ShippingAgentService."World Wide Service" THEN
                                    Package."World Wide Service" := TRUE
                                  ELSE
                                    IF ShippingAgentService."UPS Canadian Service" THEN
                                      Package."UPS Canadian Service" := TRUE
                                    ELSE
                                      IF ShippingAgentService."UPS Puerto Rico Service" THEN
                                        Package."UPS Puerto Rico Service" := TRUE;

                                  Package.VALIDATE("Shipping Agent Service",ShippingAgentService.Code);
                                  Package.VALIDATE(
                                    "Shipping Agent Account No.",CarrierPackingStation."UPS Shipping Agent Account No.");

                                  IF ShipToAddress."Country/Region Code" <> '' THEN
                                    Package.Description := 'Electronic Parts';
                                  Package.VALIDATE("Override Weight",5);
                                  Package.VALIDATE("Override Value",100);
                                  Package.MODIFY(TRUE);
                                  UPSOptionPage.INIT;
                                  UPSOptionPage.GET(UPSOptionPage.Type::Package,Package."No.",0,0);
                                  UPSOptionPage."UPS Book No." := ShippingAgentAccount."Book No.";
                                  UPSOptionPage."UPS Page No." := ShippingAgentAccount."Page No.";
                                  UPSOptionPage.MODIFY(TRUE);

                                  //Shipping.ClosePackage(Package,TRUE);

                                  //Shipping.OpenPackage(Package);

                                  //Package.DELETE(TRUE);
                                END;
                                 }

    { 5444;2   ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 ORDER(Ascending);
               MaxIteration=1;
               OnAfterGetRecord=BEGIN
                                  IF (ShippingAgentService."Service Indicator" = '01') OR
                                     (ShippingAgentService."Service Indicator" = '02') OR
                                     (ShippingAgentService."Service Indicator" = '03') OR
                                     (ShippingAgentService."Service Indicator" = '12')
                                  THEN BEGIN
                                    Package.INIT;
                                    Package."No." := '';
                                    Package.Miscellaneous := TRUE;
                                    Package.INSERT(TRUE);
                                    Package."Packing Date" := WORKDATE;
                                    Package.VALIDATE("Ship-to No.",ShipToAddress."Customer No.");
                                    Package.VALIDATE("Ship-to Code",ShipToAddress.Code);
                                    Package."Shipping Agent Code" := ShippingAgent.Code;
                                    Package.VALIDATE("Shipping Agent Service",ShippingAgentService.Code);
                                    Package.VALIDATE(
                                      "Shipping Agent Account No.",CarrierPackingStation."UPS Shipping Agent Account No.");
                                    Package.VALIDATE("Override Weight",5);
                                    Package.VALIDATE("Override Value",100);
                                    Package.VALIDATE(COD,TRUE);
                                    Package.VALIDATE("COD Amount",150);
                                    Package.MODIFY(TRUE);
                                    UPSOptionPage.INIT;
                                    UPSOptionPage.GET(UPSOptionPage.Type::Package,Package."No.",0,0);
                                    UPSOptionPage."UPS Book No." := ShippingAgentAccount."Book No.";
                                    UPSOptionPage."UPS Page No." := ShippingAgentAccount."Page No.";
                                    UPSOptionPage."Tagless COD" := TRUE;
                                    UPSOptionPage.VALIDATE("COD Control No.",Package."No.");
                                    UPSOptionPage.MODIFY(TRUE);

                                    Shipping.ClosePackage(Package,TRUE);

                                    Shipping.OpenPackage(Package);

                                    Package.DELETE(TRUE);
                                  END;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  CaptionClass=Text19075431;
                  MultiLine=Yes;
                  Style=Standard;
                  StyleExpr=TRUE }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ShippingAgentAccount@1000000000 : Record 14000770;
      Customer@1000000001 : Record 18;
      ShipToAddress2@1000000002 : Record 222;
      Package@1000000003 : Record 14000701;
      UPSOptionPage@1000000004 : Record 14000761;
      PackingStation@1240030000 : Record 14000709;
      CarrierPackingStation@1240030001 : Record 14000729;
      Shipping@1000000005 : Codeunit 14000701;
      Text19075431@19032624 : TextConst 'ENU=This program is used to print test labels for UPS printer certification.  It should be run from each packing station that will ship via UPS.';

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

