OBJECT Report 23044300 IWX Create Count Sheets
{
  OBJECT-PROPERTIES
  {
    Date=04/13/21;
    Time=[ 4:00:16 PM];
    Modified=Yes;
    Version List=IWX2.4.7684.0;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Generate Count Sheets;
               ESM=Generar hojas;
               FRC=G‚n‚rer des draps;
               ENC=Generate Count Sheets];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  RANDOMIZE;
                END;

  }
  DATASET
  {
    { 2158;    ;DataItem;recConfig           ;
               DataItemTable=Table23044300;
               DataItemTableView=SORTING(Count No.);
               OnPreDataItem=BEGIN
                               // Prepares report - deletes old entries

                               // make sure only one count specified
                               codCountNo := COPYSTR(GETFILTER("Count No."), 1, 20);
                               recInvCount.GET(codCountNo);
                               recInvCount.TESTFIELD(Active);
                               recInvCount."Last Count Sheet Generation" := CURRENTDATETIME;
                               recInvCount."Generated By" := USERID;
                               recInvCount.MODIFY;

                               recCountSheet.SETRANGE("Count No.", codCountNo);

                               IF NOT recConfig.FIND('-') THEN
                                ERROR(txtErrNoConfig);

                               IF bDeleteOldSheets THEN BEGIN
                                 IF recCountSheet.FINDSET THEN
                                   IF NOT CONFIRM(txtConfirmSheetDelete) THEN
                                     ERROR(txtErrNoDelete);

                                 recCountSheet.RESET;
                                 recCountSheet.SETRANGE("Count No.", codCountNo);
                                 IF recCountSheet.FINDSET THEN
                                   recCountSheet.DELETEALL;
                                 COMMIT;
                               END//if
                               ELSE BEGIN
                                 recCountSheet.SETFILTER("Sheet Name", recConfig.GETFILTER("Sheet Name"));
                                 IF recCountSheet.FINDSET THEN BEGIN
                                   IF NOT CONFIRM(txtConfirmSheetUpdate) THEN BEGIN
                                     ERROR(txtErrNoUpdate);
                                   END; // end confirm
                                 END;
                               END;

                               // When including items from inventory, see if the zero bin formula date is set
                               // if it is, restrict empty bins
                               IF ( FORMAT( dfZeroBinFormula ) <> '' ) THEN BEGIN
                                 dtBinsEmptySince := CALCDATE('-'+FORMAT(dfZeroBinFormula), TODAY);
                                 cuInvMgmt.setOldestEntryDateEmptyBins(  CALCDATE('-'+FORMAT(dfZeroBinFormula), TODAY) );
                               END;


                               dlgProgress.OPEN(txtProgress);
                               nSheetCount := recConfig.COUNT;
                             END;

               OnAfterGetRecord=BEGIN
                                  codCurBin := recConfig."Bin Code"; //<IW author="MH" date="6/17/2017" issue="SP3514" />

                                  trecRandomInvBuf.RESET;
                                  trecRandomInvBuf.DELETEALL;
                                  CLEAR(trecRandomInvBuf);

                                  // delete any old entries for this sheet only
                                  recCountSheet.RESET;
                                  recCountSheet.SETRANGE("Count No.", codCountNo);
                                  recCountSheet.SETRANGE("Sheet Name", recConfig."Sheet Name");
                                  recCountSheet.disableConfirmDelete(TRUE);
                                  IF recCountSheet.FINDSET THEN
                                    REPEAT
                                      recCountSheet.performOnDelete;
                                    UNTIL recCountSheet.NEXT = 0;

                                  recCountSheet.DELETEALL;
                                  COMMIT;

                                  dlgProgress.UPDATE(1, recConfig."Sheet Name");
                                END;

               OnPostDataItem=VAR
                                lcuBlockBin@1000000000 : Codeunit 23044301;
                              BEGIN
                                lcuBlockBin.blockCountBins(codCountNo); //<IW author="MH" date="3/9/2016" issue="TFS838" />

                                dlgProgress.CLOSE;
                              END;

               ReqFilterFields=Sheet Name }

    { 8724;1   ;DataItem;recItem             ;
               DataItemTable=Table27;
               DataItemTableView=SORTING(Shelf No.);
               OnPreDataItem=BEGIN
                               // Filters item records based on count sheet specs.

                               // don't look at inventory if it's a WIP sheet
                               IF recConfig."WIP Only" THEN BEGIN
                                 nItemCount := 0;
                                 CurrReport.BREAK;
                               END;

                               recItem.RESET;
                               recItem.SETVIEW(buildItemFilter(recConfig));

                               recItem.SETFILTER("Date Filter", '<=%1', recInvCount."Inventory As of Date"); //<IW author="MH" date="10/4/2015" issue="TFS1995" />

                               IF codCountPeriod<>'' THEN BEGIN
                                 recItem.SETFILTER("Phys Invt Counting Period Code", codCountPeriod);
                               END;//if

                               IF recConfig."Location Code"<>'' THEN
                                 recLocation.SETFILTER(Code, recConfig."Location Code")
                               ELSE
                                 recLocation.SETRANGE(Code);

                               nItemCount := recItem.COUNT;
                               nCurItem := 0;


                               // Skip item processing if SKUs are being used
                               IF bUseSKU THEN
                                 CurrReport.BREAK;

                               // If bin content records exist, use those instead of items
                               IF recLocation.FINDSET THEN ;
                               IF (recLocation.COUNT = 1) AND (recLocation."Bin Mandatory") THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  // Iterates through locations to build count sheet

                                  updateDialogItem(recItem."No.");

                                  recVariant.SETRANGE("Item No.", recItem."No.");

                                  IF recLocation.FIND('-') THEN BEGIN
                                    REPEAT
                                      evaluateLocation(recLocation.Code);
                                    UNTIL recLocation.NEXT = 0;
                                  END;

                                  IF recConfig."Location Code" = '' THEN BEGIN
                                    evaluateLocation('');
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                IF bGenerateRandom THEN
                                  addRandomItems;
                              END;
                               }

    { 1000000001;1;DataItem;diSKU            ;
               DataItemTable=Table5700;
               DataItemTableView=SORTING(Item No.,Location Code,Variant Code);
               OnPreDataItem=BEGIN
                               // Process SKUs
                               IF NOT bUseSKU THEN
                                 CurrReport.BREAK;

                               setSKUFilter(recConfig);

                               IF codCountPeriod<>'' THEN
                                 diSKU.SETFILTER("Phys Invt Counting Period Code", codCountPeriod);

                               nItemCount := diSKU.COUNT;
                               nCurItem := 0;

                               // If bin content records exist, use those instead of items
                               IF (recLocation.COUNT = 1) AND (recLocation."Bin Mandatory") THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  // Iterates through locations to build count sheet

                                  recItem.GET(diSKU."Item No.");

                                  updateDialogItem(recItem."No.");
                                  addSheetItem(diSKU."Location Code", diSKU."Variant Code");
                                END;

               OnPostDataItem=BEGIN
                                // Process random SKUs
                                IF bGenerateRandom AND bUseSKU THEN
                                  addRandomItems;
                              END;

               DataItemLink=Location Code=FIELD(Location Code) }

    { 1000000000;1;DataItem;recBinContent    ;
               DataItemTable=Table7302;
               OnPreDataItem=BEGIN
                               //SORTING(Location Code,Bin Code,Item No.,Variant Code,Unit of Measure Code)
                               // Iterates through bin contents to generate count sheets instead of using items
                               bUseBin := FALSE;

                               IF (recLocation.COUNT <> 1) OR (recLocation."Bin Mandatory" = FALSE) THEN
                                 CurrReport.BREAK;

                               setBinFilter(recConfig);

                               nItemCount := recBinContent.COUNT;
                               nCurItem := 0;
                               bUseBin := TRUE;
                             END;

               OnAfterGetRecord=BEGIN
                                  updateDialogItem(recBinContent."Item No.");

                                  // ignore different UOMs (group by item, variant, bin)
                                  IF (recItem."No." <> recBinContent."Item No.") OR
                                     (codCurBin <> recBinContent."Bin Code") OR
                                     (codCurVariant <> recBinContent."Variant Code")
                                  THEN BEGIN
                                    recItem.SETRANGE("No.", recBinContent."Item No.");
                                    IF recItem.FINDFIRST THEN BEGIN
                                      codCurBin := recBinContent."Bin Code";
                                      codCurVariant := recBinContent."Variant Code";
                                      addSheetItem(recBinContent."Location Code", codCurVariant);
                                    END;//if got item based on filters
                                  END;//if
                                END;

               OnPostDataItem=BEGIN
                                IF bGenerateRandom AND bUseBin THEN
                                  addRandomItems;
                              END;
                               }

    { 9832;1   ;DataItem;recProdOrderLine    ;
               DataItemTable=Table5406;
               DataItemTableView=SORTING(Status,Prod. Order No.,Line No.)
                                 WHERE(Status=CONST(Released),
                                       Remaining Qty. (Base)=FILTER(>0));
               OnPreDataItem=BEGIN
                               // Sets up dialog params for work orders

                               // only iterate through production orders if it's a WIP sheet
                               IF NOT recConfig."WIP Only" THEN BEGIN
                                 CurrReport.BREAK;
                               END;


                               nItemCount := recProdOrderLine.COUNT;
                               nCurItem := 0;
                             END;

               OnAfterGetRecord=VAR
                                  lrecCurItem@1000000000 : Record 27;
                                BEGIN
                                  // Iterates through ledger entries for this W/O and sum all consumption by part #/location

                                  updateDialogItem(recProdOrderLine."Prod. Order No.");

                                  trecBuffer.DELETEALL;

                                  // create sheet lines for actual consumption
                                  recItemLedger.SETRANGE("Entry Type", recItemLedger."Entry Type"::Consumption);
                                  recItemLedger.SETRANGE("Order Type", recItemLedger."Order Type"::Production);
                                  recItemLedger.SETFILTER("Order No.", '=%1', recProdOrderLine."Prod. Order No.");
                                  IF recItemLedger.FINDSET THEN BEGIN
                                    REPEAT
                                      populateBuffer(recItemLedger."Item No.",
                                                     recItemLedger."Location Code",
                                                     recItemLedger."Variant Code",
                                                     -recItemLedger.Quantity,
                                                     recProdOrderLine."Prod. Order No.");
                                    UNTIL recItemLedger.NEXT = 0;
                                  END;//if got consumption entries

                                  IF bIncludeUnconsumed THEN BEGIN
                                    // if we want all W/O material, no iterate through BOM and sum remaining, unconsumed material
                                    recProdOrderComp.SETFILTER("Prod. Order No.", '=%1', recProdOrderLine."Prod. Order No.");
                                    recProdOrderComp.SETRANGE(recProdOrderComp."Act. Consumption (Qty)", 0); // items not consumed
                                    IF recProdOrderComp.FINDSET THEN BEGIN
                                      REPEAT
                                        populateBuffer(recProdOrderComp."Item No.",
                                                       recProdOrderComp."Location Code",
                                                       recProdOrderComp."Variant Code",
                                                       recProdOrderComp."Expected Qty. (Base)",
                                                       recProdOrderComp."Prod. Order No.");
                                      UNTIL recProdOrderComp.NEXT = 0;
                                    END;//if got comp
                                  END;//if include unconsumed

                                  trecBuffer.RESET;
                                  // insert buffer lines for this W/O into count sheet
                                  IF trecBuffer.FINDSET THEN BEGIN
                                    REPEAT
                                      lrecCurItem.GET(trecBuffer."Item No.");
                                      cuInvMgmt.insertCountSheetLine(lrecCurItem,
                                                           recConfig."Count No.",
                                                           recConfig."Sheet Name",
                                                           trecBuffer."Location Code",
                                                           trecBuffer."Variant Code",
                                                           trecBuffer."Serial No.", recConfig."Bin Code"
                                                           );
                                    UNTIL trecBuffer.NEXT = 0;
                                  END;//if buffer
                                END;

               OnPostDataItem=BEGIN
                                nCurSheet := nCurSheet + 1;
                              END;
                               }

    { 4965;1   ;DataItem;recBlankLines       ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               //SETRANGE(Number, 1, recConfig."Blank Line Qty.");
                               // todo: fix this if we want to add blank records
                               SETRANGE(Number, 1, 0);
                             END;

               OnAfterGetRecord=BEGIN
                                  // create blank lines for count sheet
                                  recCountSheet.INIT;

                                  recCountSheet.VALIDATE("Tag No.",cuInvMgmt.getNextTagNo(recConfig."Count No.")); //<IW author="R.Trudeau" date="6/09/15" issue="TFS1853" />

                                  recCountSheet."Count No." := recConfig."Count No.";
                                  recCountSheet."Sheet Name" := recConfig."Sheet Name";
                                  recCountSheet."Auto Generated" := TRUE;
                                  recCountSheet.INSERT;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1000000000;;Container;
                  ContainerType=ContentArea }

      { 1000000001;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENC=Options];
                  Visible=FALSE;
                  GroupType=Group }

      { 1000000017;1;Group  ;
                  CaptionML=[ENU=Inventory Options;
                             ESM=Opciones de inventario;
                             FRC=Options d'inventaire;
                             ENC=Inventory Options];
                  GroupType=Group }

      { 1000000002;2;Field  ;
                  Name=fldIncludeInventory;
                  CaptionML=[ENU=Include Inventory;
                             ENC=Include Inventory];
                  SourceExpr=bIncludeInventory }

      { 1000000015;2;Field  ;
                  Name=flddfZeroBinFormula;
                  CaptionML=[ENU=Empty Bins Activity Period;
                             FRC=Empty Bins Activity Period;
                             ENC=Empty Bins Activity Period];
                  ToolTipML=[ENU=Reminder: When bin content is empty, if there is activity for an item from this period until now  then the count line will still be added.  If the bin content is empty but the item has no activity earlier than this period then the bin will not be added.;
                             ESM=Reminder: When bin content is empty, if there is activity for an item from this period until now  then the count line will still be added.  If the bin content is empty but the item has no activity earlier than this period then the bin will not be added.;
                             FRC=Reminder: When bin content is empty, if there is activity for an item from this period until now  then the count line will still be added.  If the bin content is empty but the item has no activity earlier than this period then the bin will not be added.;
                             ENC=Reminder: When bin content is empty, if there is activity for an item from this period until now  then the count line will still be added.  If the bin content is empty but the item has no activity earlier than this period then the bin will not be added.];
                  SourceExpr=dfZeroBinFormula;
                  Enabled=bIncludeInventory }

      { 1000000003;2;Field  ;
                  Name=fldIncludeActive;
                  CaptionML=[ENU=Include Active Items;
                             ENC=Include Active Items];
                  SourceExpr=bIncludeActive;
                  OnValidate=BEGIN
                               RequestOptionsPage.UPDATE(TRUE);
                             END;
                              }

      { 1000000004;2;Field  ;
                  Name=fldActivityPeriod;
                  CaptionML=[ENU=Activity Period;
                             ENC=Activity Period];
                  SourceExpr=dfActivityPeriod;
                  Enabled=bIncludeActive }

      { 1000000005;2;Field  ;
                  Name=fldIncludeInActive;
                  CaptionML=[ENU=Include Inactive Items;
                             ENC=Include Inactive Items];
                  SourceExpr=bIncludeAll;
                  OnValidate=BEGIN
                               RequestOptionsPage.UPDATE(TRUE);
                             END;
                              }

      { 1000000006;2;Field  ;
                  Name=fldLocationFilter;
                  CaptionML=[ENU=Location Filter;
                             ENC=Location Filter];
                  SourceExpr=codLocationFilter;
                  Enabled=bIncludeAll }

      { 1000000007;2;Field  ;
                  Name=fldVariantFilter;
                  CaptionML=[ENU=Variant Filter;
                             ENC=Variant Filter];
                  SourceExpr=codVariantFilter;
                  Enabled=bIncludeAll }

      { 1000000016;2;Field  ;
                  Name=Use SKUs Only;
                  CaptionML=[ENU=Use SKUs Only;
                             ENC=Use SKUs Only];
                  SourceExpr=bUseSKU }

      { 1000000018;1;Group  ;
                  CaptionML=[ENU=Cycle Count;
                             ESM=Contador de C¡clos;
                             FRC=Nombre de cycles;
                             ENC=Cycle Count];
                  GroupType=Group }

      { 1000000008;2;Field  ;
                  Name=fldRestrictCount;
                  CaptionML=[ENU=Restrict to Count Period;
                             ENC=Restrict to Count Period];
                  SourceExpr=codCountPeriod;
                  TableRelation="Phys. Invt. Counting Period".Code }

      { 1000000014;2;Field  ;
                  CaptionML=[ENU=Use Next Count Period;
                             ENC=Use Next Count Period];
                  SourceExpr=bUseNextCountPeriod }

      { 1000000009;2;Field  ;
                  Name=fldUseRandom;
                  CaptionML=[ENU=Use Random Items;
                             ENC=Use Random Items];
                  ToolTipML=[ENU=When checked, includes items on the bill that have not been consumed;
                             ENC=When checked, includes items on the bill that have not been consumed];
                  SourceExpr=bGenerateRandom;
                  OnValidate=BEGIN
                               RequestOptionsPage.UPDATE(TRUE);
                             END;
                              }

      { 1000000021;2;Field  ;
                  CaptionML=[ENU=Generate Random Lines By;
                             ESM=Generate Random Lines By;
                             FRC=Generate Random Lines By;
                             ENC=Generate Random Lines By];
                  SourceExpr=optRandomBinSel;
                  Enabled=bGenerateRandom }

      { 1000000010;2;Field  ;
                  Name=fldMaxItemNos;
                  CaptionML=[ENU=Max. Item No.s to Add;
                             ENC=Max. Item No.s to Add];
                  SourceExpr=nNumRandom;
                  Enabled=bGenerateRandom }

      { 1000000011;2;Field  ;
                  Name=fldNotCountedSince;
                  CaptionML=[ENU=Not Counted Since;
                             ENC=Not Counted Since];
                  SourceExpr=dtRandomSince;
                  Enabled=bGenerateRandom }

      { 1000000019;1;Group  ;
                  CaptionML=[ENU=Miscellaneous;
                             ESM=Diverso;
                             FRC=Divers;
                             ENC=Miscellaneous];
                  GroupType=Group }

      { 1000000013;2;Field  ;
                  Name=fldDeleteOldSheets;
                  CaptionML=[ENU=Delete ALL Old Sheets;
                             ENC=Delete ALL Old Sheets];
                  SourceExpr=bDeleteOldSheets }

      { 1000000012;2;Field  ;
                  Name=fldIncludeAllBOM;
                  CaptionML=[ENU=Include All BOM Items;
                             ENC=Include All BOM Items];
                  ToolTipML=[ENU=When checked, includes items on the bill that have not been consumed;
                             ENC=When checked, includes items on the bill that have not been consumed];
                  SourceExpr=bIncludeUnconsumed }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      recCountSheet@1000000018 : Record 23044301;
      recItemLedger@1000000017 : Record 32;
      recLocation@1000000016 : Record 14;
      recProdOrderComp@1000000015 : Record 5407;
      recVariant@1000000014 : Record 5401;
      trecBuffer@1000000000 : TEMPORARY Record 307;
      recInvCount@1000000044 : Record 23044304;
      trecRandomInvBuf@1000000045 : TEMPORARY Record 23044303;
      recDate@1000000046 : Record 2000000007;
      recSKU@1000000047 : Record 5700;
      cuInvMgmt@1000000024 : Codeunit 23044300;
      bDeleteOldSheets@1000000001 : Boolean INDATASET;
      bIncludeActive@1000000002 : Boolean INDATASET;
      bIncludeAll@1000000003 : Boolean INDATASET;
      bIncludeInventory@1000000004 : Boolean INDATASET;
      bIncludeUnconsumed@1000000005 : Boolean INDATASET;
      codLocationFilter@1000000006 : Code[500];
      codVariantFilter@1000000007 : Code[500];
      dlgProgress@1000000008 : Dialog;
      nCurItem@1000000009 : Integer;
      nCurSheet@1000000010 : Integer;
      nItemCount@1000000011 : Integer;
      nProgress@1000000012 : Integer;
      nSheetCount@1000000013 : Integer;
      txtConfirmSheetDelete@1000000019 : TextConst 'ENU=The existing count sheets have count information on them.\Delete existing count sheets?;ENC=Existing count sheets have count information on them.\Delete exisitng count sheets?';
      txtErrNoConfig@1000000020 : TextConst 'ENU=No configuration lines exist in filter.;ENC=No configuration lines exist in filter.';
      txtErrNoDelete@1000000021 : TextConst 'ENU=The count sheets were not deleted.  Re-run the report and un-select "Delete existing sheets"';
      txtProgress@1000000022 : TextConst 'ENC=Sheet Name              #1##################\Entry No.               #2##################\Current Sheet Progress  @3@@@@@@@@@@@@@@@@@@\Generation Progress     @4@@@@@@@@@@@@@@@@@@';
      codCountPeriod@1000000023 : Code[100];
      dfActivityPeriod@1000000025 : DateFormula;
      bGenerateRandom@1000000026 : Boolean INDATASET;
      nNumRandom@1000000027 : Integer;
      dtRandomSince@1000000028 : Date;
      bUseNextCountPeriod@1000000032 : Boolean INDATASET;
      codCountNo@1000000035 : Code[20];
      bUseSKU@1000000036 : Boolean INDATASET;
      txtConfirmSheetUpdate@1000000038 : TextConst 'ENU=The existing count sheets have count information on them.\If you proceed this information will be lost.\Should we overwrite the lines in the existing count sheets?';
      txtErrNoUpdate@1000000039 : TextConst 'ENU="Count sheets not generated.  ";ENC=Count sheets not deleted.  Re-run job and deselect "Delete exisitng sheets"';
      dfZeroBinFormula@1000000040 : DateFormula;
      tcHelperEmptyBins@1000000037 : TextConst 'ENU=Reminder:\\When bin content is empty, if there is activity for an item from %1 until now  then the count line will still be added.  \\ If the bin content is empty but the item has no activity earlier than %1 then it will not be added.';
      dtBinsEmptySince@1000000030 : Date;
      bUseBin@1000000041 : Boolean;
      codCurBin@1000000042 : Code[100];
      codCurVariant@1000000043 : Code[10];
      optRandomBinSel@1000000029 : 'Item,Item and Bin';

    PROCEDURE evaluateLocation@1000000014(codLocation@1000000000 : Code[10]);
    BEGIN
      // Iterates through each variant for this location to build sheet

      recVariant.SETFILTER(Code,codVariantFilter); //<IW author="RT" date="6/08/15" issue="TFS1853" />
      IF recVariant.FINDSET THEN BEGIN
        REPEAT
          addSheetItem(codLocation, recVariant.Code);
        UNTIL recVariant.NEXT = 0;
      END; // if there are variants

      IF( codVariantFilter = '' ) THEN BEGIN  //<IW author="RT" date="6/08/15" issue="TFS1853" />
        addSheetItem(codLocation, '');
      END;
    END;

    PROCEDURE addSheetItem@1000000017(codLocation@1000000000 : Code[10];codVariant@1000000001 : Text);
    VAR
      lrecItemLedger@1000000007 : Record 32;
      lbAdded@1000000002 : Boolean;
      ldStartDate@1000000003 : Date;
      ldEndDate@1000000004 : Date;
    BEGIN
      // This func adds item #'s (etc.) to the count sheet table

      //<IW author="M.Hamblin" date="2/16/2012" issue="296" >
      // Check to see if this count is within the next count period for the item
      IF bUseNextCountPeriod THEN BEGIN
        IF bUseSKU THEN BEGIN
          //2015+::begin
          ldStartDate := diSKU."Next Counting Start Date";
          ldEndDate := diSKU."Next Counting End Date";
          IF NOT isDateInRange('', ldStartDate, ldEndDate) THEN
            EXIT;
          //2015+::end
          {//2013R2-::begin
          IF NOT isDateInRange(diSKU."Next Counting Period", ldStartDate, ldEndDate) THEN
            EXIT;
          }//2013R2-::end
        END ELSE BEGIN
          //2015+::begin
          ldStartDate := recItem."Next Counting Start Date";
          ldEndDate := recItem."Next Counting End Date";
          IF NOT isDateInRange('', ldStartDate, ldEndDate) THEN
            EXIT;

          //2015+::end

          {//2013R2-::begin
          IF NOT isDateInRange(recItem."Next Counting Period", ldStartDate, ldEndDate) THEN
            EXIT;
          }//2013R2-::end
        END;//if item only (no sku)
      END;//f

      IF bIncludeInventory THEN BEGIN

        // do inventory
        recItem.SETRANGE("Location Filter", codLocation);
        recItem.SETFILTER("Variant Filter", '=%1', codVariant);
        recItem.CALCFIELDS("Net Change"); //<IW author="MH" date="10/4/2015" issue="TFS1995" />
        IF recItem."Net Change"<>0 THEN BEGIN
          insertCountSheetLine(codLocation, codVariant);
          lbAdded := TRUE; // added part, so skip check for active parts
        END;//if

      END;

      IF NOT lbAdded AND bIncludeActive THEN BEGIN
        // do activity
        lrecItemLedger.SETRANGE("Item No.", recItem."No.");
        lrecItemLedger.SETRANGE("Location Code", codLocation);
        lrecItemLedger.SETFILTER("Variant Code", '=%1', codVariant);
        lrecItemLedger.SETRANGE("Posting Date", CALCDATE('-'+FORMAT(dfActivityPeriod), TODAY), TODAY);
        IF lrecItemLedger.FIND('-') THEN BEGIN
           insertCountSheetLine(codLocation, codVariant);
           lbAdded := TRUE;
         END;//if
      END;//includActive

      IF NOT lbAdded AND bIncludeAll THEN BEGIN
        IF ((STRPOS(codLocationFilter, codLocation)<>0) OR (codLocationFilter='')) AND
           ((STRPOS(codVariantFilter, codVariant)<>0) OR (codVariantFilter=''))
        THEN
          insertCountSheetLine(codLocation, codVariant);
      END;//includeInactive
    END;

    LOCAL PROCEDURE insertCountSheetLine@1000000003(pcodLocation@1000000001 : Code[10];pcodVariant@1000000000 : Text);
    VAR
      lrecPhysInvLedger@1000000002 : Record 281;
    BEGIN
      // Adds item to count sheet depending on whether random or not

      IF bGenerateRandom THEN BEGIN
        trecRandomInvBuf."Item No." := recItem."No.";
        trecRandomInvBuf."Location Code" := pcodLocation;
        trecRandomInvBuf."Variant Code" := pcodVariant;
        trecRandomInvBuf."Bin Code" := codCurBin;

        trecRandomInvBuf.CALCFIELDS("Last Phys. Invt. Date", "Last Registering Date", "Bin Quantity (Base)");
        IF (trecRandomInvBuf."Last Phys. Invt. Date" < dtRandomSince) AND
           ((trecRandomInvBuf."Bin Quantity (Base)"<>0) OR (trecRandomInvBuf."Last Registering Date">dtBinsEmptySince))
        THEN BEGIN
          IF optRandomBinSel <> optRandomBinSel::"Item and Bin" THEN
            trecRandomInvBuf."Bin Code" := '';

          IF trecRandomInvBuf.INSERT THEN ;
        END;//if
      END ELSE BEGIN
        cuInvMgmt.insertCountSheetLine(
          recItem,
          recConfig."Count No.",
          recConfig."Sheet Name",
          pcodLocation, pcodVariant,
          '',
          codCurBin
          );
      END;
    END;

    LOCAL PROCEDURE buildItemFilter@1000000002(VAR lrecConfig@1000000001 : Record 23044300) Result : Text[500];
    VAR
      lrrefConfig@1000000000 : RecordRef;
      nIndex@1000000002 : Integer;
    BEGIN
      // This function builds a filter string based on field names in config table.
      // This makes the form more extensible, since it allows us to add fields without changing the code required to filter items.
      // If adding fields to the config table, make sure they match the field names in the item table.

      lrrefConfig.GETTABLE(lrecConfig);

      FOR nIndex:=3 TO lrrefConfig.FIELDCOUNT-1 DO BEGIN
        IF (lrrefConfig.FIELDINDEX(nIndex).NUMBER >= 10)
        AND (lrrefConfig.FIELDINDEX(nIndex).NUMBER < 49) THEN BEGIN
          IF FORMAT(lrrefConfig.FIELDINDEX(nIndex).VALUE) <> '' THEN BEGIN
            IF Result<>'' THEN Result := Result + ',';
            Result := Result + lrrefConfig.FIELDINDEX(nIndex).NAME + '=FILTER(' + FORMAT(lrrefConfig.FIELDINDEX(nIndex).VALUE)+')';
          END;//if got value
        END;//if valid filter field
      END;

      IF lrecConfig."Custom Filter"<>'' THEN BEGIN
        IF Result<>'' THEN Result := Result + ',';
        Result := Result + lrecConfig."Custom Filter";
      END;//if

      IF Result<>'' THEN Result := 'WHERE('+Result + ')';

      Result := 'SORTING(No.) ' + Result;
    END;

    PROCEDURE populateBuffer@1000000005(lcodItem@1000000000 : Text;lcodLocation@1000000001 : Code[10];lcodVariant@1000000002 : Text;ldQty@1000000003 : Decimal;lcodProdOrder@1000000004 : Code[20]);
    BEGIN
      // Builds buffer for work order entries

      // Changed codProdOrder from Code[10] to Code[20]

      trecBuffer.SETFILTER("Item No.", '=%1', lcodItem);
      trecBuffer.SETFILTER("Location Code", '=%1', lcodLocation);
      trecBuffer.SETFILTER("Variant Code", '=%1', lcodVariant);
      trecBuffer.SETFILTER("Serial No.", '=%1', lcodProdOrder);  // using serial # field to hold W/O

      IF trecBuffer.FIND('-') THEN BEGIN
        IF trecBuffer."Dimension Entry No." = 0 THEN

        trecBuffer.Quantity := trecBuffer.Quantity + ldQty;
        trecBuffer.MODIFY;

      END ELSE BEGIN
        trecBuffer."Item No." := lcodItem;
        trecBuffer."Location Code" := lcodLocation;
        trecBuffer."Variant Code" := lcodVariant;
        trecBuffer."Serial No." := lcodProdOrder;  // using serial # field to hold W/O

        trecBuffer.Quantity := ldQty;
        trecBuffer.INSERT;
      END;//if
    END;

    PROCEDURE updateDialogItem@1000000020(codEntryNo@1000000000 : Code[20]);
    BEGIN
      // Updates status dialog

      nCurItem := nCurItem + 1;
      nProgress := (nCurItem * 10000) DIV nItemCount;
      dlgProgress.UPDATE(2, codEntryNo);
      dlgProgress.UPDATE(3, nProgress);
      dlgProgress.UPDATE(4, (nCurSheet*10000) DIV nSheetCount + (nProgress * (1/nSheetCount)*10 DIV 10));
    END;

    PROCEDURE addRandomItems@1000000001();
    VAR
      lrecItem@1000000004 : Record 27;
      lnInitialFlagVal@1000000001 : Integer;
      lnRecsToProcess@1000000000 : Integer;
      lnRecsProcessed@1000000002 : Integer;
      lnRandomNo@1000000003 : Integer;
      lnRandomBufCount@1000000005 : Integer;
      lcodBinFilter@1000000006 : Code[80];
    BEGIN
      // Adds random selection of previously buffered items to count sheets

      trecRandomInvBuf.RESET;
      lnRandomBufCount := trecRandomInvBuf.COUNT;
      IF lnRandomBufCount = 0 THEN
        EXIT;

      IF lnRandomBufCount < nNumRandom*2-1 THEN BEGIN
        lnInitialFlagVal := 1;
        trecRandomInvBuf.MODIFYALL("Dimension Entry No.", lnInitialFlagVal);
        lnRecsToProcess := lnRandomBufCount - nNumRandom;
      END ELSE
        lnRecsToProcess := nNumRandom;

      WHILE lnRecsProcessed < lnRecsToProcess DO BEGIN
        trecRandomInvBuf.SETRANGE("Dimension Entry No.", lnInitialFlagVal);
        IF trecRandomInvBuf.FINDSET THEN ;
        lnRandomNo := RANDOM(lnRandomBufCount-lnRecsProcessed);
        IF trecRandomInvBuf.NEXT(lnRandomNo) <> 0 THEN BEGIN
          trecRandomInvBuf."Dimension Entry No." := ABS(lnInitialFlagVal-1);
          trecRandomInvBuf.MODIFY;
        END;//if
        lnRecsProcessed +=1;
      END;//while

      trecRandomInvBuf.SETRANGE("Dimension Entry No.", 1);

      IF trecRandomInvBuf.FINDSET THEN BEGIN
        lcodBinFilter := recConfig."Bin Code";
        REPEAT
          IF optRandomBinSel = optRandomBinSel::"Item and Bin" THEN
            lcodBinFilter := trecRandomInvBuf."Bin Code";

          lrecItem.GET(trecRandomInvBuf."Item No.");
          cuInvMgmt.insertCountSheetLine(lrecItem,
                                         recConfig."Count No.",
                                         recConfig."Sheet Name",
                                         trecRandomInvBuf."Location Code",
                                         trecRandomInvBuf."Variant Code",
                                         '',
                                         lcodBinFilter
                                         );
        UNTIL trecRandomInvBuf.NEXT = 0;
      END;//if findset

      trecRandomInvBuf.RESET;
      trecRandomInvBuf.DELETEALL;
      CLEAR(trecRandomInvBuf);
    END;

    PROCEDURE isDateInRange@1000000004(ptxtCountRange@1000000000 : Text[30];pdStartDate@1000000003 : Date;pdEndDate@1000000004 : Date) : Boolean;
    VAR
      ldtStartDate@1000000001 : Date;
      ldtEndDate@1000000002 : Date;
    BEGIN
      // Determines if count date falls into the supplied range

      //2015::begin
      EXIT((recInvCount."Inventory As of Date">=pdStartDate) AND (recInvCount."Inventory As of Date"<=pdEndDate));
      //2015::end

      {//2013R2-::begin
      IF ptxtCountRange='' THEN
        EXIT(FALSE);

      recDate.SETFILTER("Period Start", ptxtCountRange);
      ldtStartDate := recDate.GETRANGEMIN("Period Start");
      ldtEndDate := recDate.GETRANGEMAX("Period Start");

      EXIT((recInvCount."Inventory As of Date" >= ldtStartDate)
            AND (recInvCount."Inventory As of Date" <= ldtEndDate));
      }//2013R2-::end
    END;

    PROCEDURE setSKUFilter@1000000011(VAR precConfig@1000000000 : Record 23044300);
    VAR
      txtFilter@1000000001 : Text[500];
      ltcErroBadFilter@1000000002 : TextConst 'ENC=Can''t use %1 filter with SKUs';
    BEGIN
      // Sets filter when SKU is used.  Copy of old setItemFilter

      IF precConfig."Custom Filter"<>'' THEN BEGIN
        diSKU.SETVIEW('WHERE (' +precConfig."Custom Filter" +')');
      END;//if

      IF precConfig."Shelf No."<>'' THEN diSKU.SETFILTER("Shelf No.",precConfig."Shelf No.");
      IF precConfig."No."<>'' THEN diSKU.SETFILTER("Item No.",precConfig."No.");
      IF precConfig."Gen. Prod. Posting Group"<>'' THEN
        ERROR(ltcErroBadFilter, precConfig.FIELDCAPTION("Gen. Prod. Posting Group"));

      IF precConfig."Inventory Posting Group"<>'' THEN
        ERROR(ltcErroBadFilter, precConfig.FIELDCAPTION("Inventory Posting Group"));

      IF precConfig."Item Tracking Code"<>'' THEN
        ERROR(ltcErroBadFilter, precConfig.FIELDCAPTION("Item Tracking Code"));

      IF precConfig."Phys Invt Counting Period Code"<>'' THEN
        diSKU.SETFILTER("Phys Invt Counting Period Code",precConfig."Phys Invt Counting Period Code");
    END;

    LOCAL PROCEDURE setBinFilter@1000000006(VAR precConfig@1000000003 : Record 23044300);
    VAR
      txtFilter@1000000000 : Text;
    BEGIN
      // Sets filter on bin/item records

      IF precConfig."No."<>'' THEN recBinContent.SETFILTER("Item No.",precConfig."No.");
      IF precConfig."Bin Code"<>'' THEN recBinContent.SETFILTER("Bin Code", precConfig."Bin Code");

      recBinContent.SETRANGE("Location Code", recLocation.Code);
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
    }
    END.
  }
  RDLDATA
  {
  }
}

