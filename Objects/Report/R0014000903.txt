OBJECT Report 14000903 Sales Invoice E-Mail
{
  OBJECT-PROPERTIES
  {
    Date=07/15/21;
    Time=12:00:00 AM;
    Modified=Yes;
    Version List=SE0.60.18,001;
  }
  PROPERTIES
  {
    CaptionML=ENU=Sales Invoice E-Mail;
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 5444;    ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               MaxIteration=1;
               OnPreDataItem=BEGIN
                               ShowStatus := FALSE;

                               IF ShowStatus THEN
                                 Window.OPEN(
                                   Text001 +
                                   Text002);
                             END;

               OnAfterGetRecord=VAR
                                  LocalDocType@1000000000 : 'SalesInvoice,SalesCM,CustStatement';
                                BEGIN
                                  CLEAR(FieldValue);

                                  EMailSetup.GET;


                                  //<TPZ1788>
                                  //EMailSetup.TESTFIELD("Sales Invoice E-Mail");
                                  IF SMTPOff365 THEN
                                    EMailSetup.TESTFIELD("Sales Invoice Off. 365 E-mail");
                                  //</<TPZ1788>

                                  IF NOT GetInitialRecords THEN BEGIN
                                    ModifyRecords;
                                    EXIT;
                                  END;

                                  IF EMailHeader."Line Break Character" <> '' THEN
                                    MailInt.LineFeedChar := EMailHeader."Line Break Character";

                                  // Create Subject Line
                                  IF ShowStatus THEN
                                    Window.UPDATE(1,Text003);
                                  //<TPZ1788>
                                  IF SMTPOff365 THEN BEGIN
                                    MailInt.SetSendViaOff365(SMTPOff365);
                                    MailInt.InitializeMailOff365(FieldValue.SubstituteHeader(EMailHeader),LocalDocType::SalesInvoice);
                                  END ELSE
                                  MailInt.InitializeMail(FieldValue.SubstituteHeader(EMailHeader));
                                  //</TPZ1788>
                                  // Address the mail
                                  IF ShowStatus THEN
                                    Window.UPDATE(1,Text004);

                                  ReceiverTo := '';
                                  ReceiverCC := '';
                                  ReceiverBCC := '';
                                  EMailListEntryTmp.RemoveEntriesWithSameEMail(EMailListEntryTmp);
                                  REPEAT
                                    CASE EMailListEntryTmp."Sales Invoice E-Mail" OF
                                      EMailListEntryTmp."Sales Invoice E-Mail"::"To":
                                        BEGIN
                                        CreateEmailAddressStr(EMailListEntryTmp."E-Mail",'TO');
                                          //<TPZ1788>
                                          IF SMTPOff365 THEN
                                            CreateEmailAddressStr(EMailSetup."SMTP User ID Off. 365",'BCC');
                                          //</TPZ1788>
                                        END;
                                      EMailListEntryTmp."Sales Invoice E-Mail"::CC:
                                        BEGIN
                                        CreateEmailAddressStr(EMailListEntryTmp."E-Mail",'CC');
                                          //<TPZ1788>
                                          IF SMTPOff365 THEN
                                            CreateEmailAddressStr(EMailSetup."SMTP User ID Off. 365",'BCC');
                                          //</TPZ1788>
                                        END;
                                      EMailListEntryTmp."Sales Invoice E-Mail"::BCC:
                                        BEGIN
                                        CreateEmailAddressStr(EMailListEntryTmp."E-Mail",'BCC');
                                          //<TPZ1788>
                                          IF SMTPOff365 THEN
                                            CreateEmailAddressStr(EMailSetup."SMTP User ID Off. 365",'BCC');
                                          //</TPZ1788>
                                        END;
                                    END;
                                  UNTIL EMailListEntryTmp.NEXT = 0;

                                  IF ReceiverTo <> '' THEN
                                    MailInt.AddReceiverTo(ReceiverTo);

                                  IF ReceiverCC <> '' THEN
                                    MailInt.AddReceiverCC(ReceiverCC);

                                  IF ReceiverBCC <> '' THEN
                                    MailInt.AddReceiverBCC(ReceiverBCC);

                                  // Create the body of the E-Mail
                                  RecordFound[1] := TRUE;
                                  LastLevel := 1;
                                  LastType := 0;
                                  EMailLine.RESET;
                                  EMailLine.SETRANGE("E-Mail Code",EMailHeader.Code);
                                  IF EMailLine.FIND('-') THEN
                                    REPEAT
                                      IF ShowStatus THEN
                                        Window.UPDATE(1,EMailLine.Text);
                                      EMailLine.TESTFIELD(Level);

                                      // Handle Higher Level
                                      IF LastLevel < EMailLine.Level THEN BEGIN
                                        GetFirstRecordInLoop(EMailLine.Level);
                                        FirstOnLevel[EMailLine.Level] := TRUE;
                                        EMailLineFirstOnLevel[EMailLine.Level] := EMailLine;
                                      END;

                                      // Handle Skip Level if no records
                                      IF FirstOnLevel[EMailLine.Level] AND
                                         NOT RecordFound[EMailLine.Level] AND
                                         EMailLine."Include only level if details"
                                      THEN BEGIN
                                        EMailLine.SETFILTER(Level,'<%1',EMailLine.Level);
                                        Finished := EMailLine.NEXT = 0;
                                        EMailLine.SETRANGE(Level);
                                      END ELSE BEGIN
                                        // Substitute Values in Line and add to E-Mail
                                        IF (EMailLine.Type <> EMailLine.Type::Loop) OR
                                           RecordFound[EMailLine.Level]
                                        THEN
                                          MailInt.AddtoBody(FieldValue.SubstituteLine(EMailLine));

                                        // Get Next E-Mail Line
                                        LastType := EMailLine.Type;
                                        LastLevel := EMailLine.Level;
                                        Finished := EMailLine.NEXT = 0;

                                        // Handle Loop End or Return to Lower Level
                                        IF (LastType = EMailLine.Type::Loop) AND
                                           (((EMailLine.Type <> EMailLine.Type::Loop) AND
                                             (LastLevel = EMailLine.Level)) OR
                                            (LastLevel > EMailLine.Level)) AND
                                           RecordFound[LastLevel]
                                        THEN BEGIN
                                          GetNextRecordInLoop(LastLevel);

                                          // Repeat Loop if Record found
                                          IF RecordFound[LastLevel] THEN BEGIN
                                            EMailLine := EMailLineFirstOnLevel[LastLevel];
                                            EMailLine.SETRANGE(Type,EMailLine.Type::Loop);
                                            EMailLine.NEXT;
                                            EMailLine.SETRANGE(Type);
                                          END;
                                        END;
                                      END;

                                      FirstOnLevel[EMailLine.Level] := FALSE;
                                    UNTIL Finished;

                                  // Create and add attachment
                                  IF ShowStatus THEN
                                    Window.UPDATE(1,Text005);
                                  EMailAttachmentTmp.DELETEALL;
                                  EMailAttachment.RESET;
                                  EMailAttachment.SETRANGE("E-Mail Code",EMailHeader.Code);
                                  IF EMailAttachment.FIND('-') THEN BEGIN
                                    EMailSetup.TESTFIELD("E-Mail Buffer Directory");

                                    REPEAT
                                      CASE EMailAttachment.Type OF
                                        EMailAttachment.Type::Report:
                                          BEGIN
                                            EMailAttachment.TESTFIELD("Attachment Name");
                                            EMailAttachment.TESTFIELD("Attachment Report ID");

                                            TempFilename := EMailSetup."E-Mail Buffer Directory";
                                            IF COPYSTR(TempFilename,STRLEN(TempFilename),1) <> '\' THEN
                                              TempFilename := TempFilename + '\';
                                            TempFilename := TempFilename + FieldValue.SubstituteAttachment(EMailAttachment);

                                            SaveReport(EMailAttachment."Attachment Report ID",TempFilename);
                                            MailInt.AddAttachment(TempFilename);

                                            EMailAttachmentTmp := EMailAttachment;
                                            EMailAttachmentTmp."Use Attachment File Name" := TempFilename;
                                            EMailAttachmentTmp.INSERT;
                                          END;
                                        EMailAttachment.Type::"Fixed File":
                                          MailInt.AddAttachment(EMailAttachment."Fixed File Name");
                                      END;
                                    UNTIL EMailAttachment.NEXT = 0;
                                  END;

                                  // Send e-mail
                                  IF ShowStatus THEN
                                    Window.UPDATE(1,Text006);
                                  //MailInt.Send(EMailHeader."Confirm E-Mail manually");
                                  //<TPZ1788>
                                  //>>001 TPZ3222
                                  //IF NOT SMTPOff365 THEN BEGIN //TPZ1788
                                  IF MailInt.Send(EMailHeader."Confirm E-Mail manually") THEN
                                    EmailSent := TRUE;
                                  //END ELSE BEGIN
                                  //  IF MailInt.SendViaOff365(EMailHeader."Confirm E-Mail manually") THEN
                                  //    EmailSent := TRUE;
                                  //END;
                                  //</TPZ1788>
                                  //<<001 TPZ3222
                                  CLEAR(MailInt);

                                  IF EMailAttachmentTmp.FIND('-') THEN
                                    REPEAT
                                      MailInt.DeleteAttachment(EMailAttachmentTmp."Use Attachment File Name");
                                    UNTIL EMailAttachmentTmp.NEXT = 0;

                                  // Update the Records
                                  ModifyRecords;
                                END;

               OnPostDataItem=BEGIN
                                IF ShowStatus THEN
                                  Window.CLOSE;
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      SalesInvoiceHeader@1000000000 : Record 112;
      SalesInvoiceLine@1000000001 : Record 113;
      SalesCommentLine@1000000002 : Record 44;
      PostedPackage@1000000003 : Record 14000704;
      PostedPackageLine@1000000004 : Record 14000705;
      CompanyInformation@1000000005 : Record 79;
      Customer@1000000006 : Record 18;
      ShipToAddress@1000000007 : Record 222;
      PaymentTerms@1000000009 : Record 3;
      SalesPersonPurchaser@1000000026 : Record 13;
      Location@1000000027 : Record 14;
      ShippingAgent@1000000028 : Record 291;
      EShipAgentService@1000000029 : Record 14000708;
      EMailSetup@1000000008 : Record 14000905;
      EMailRule@1000000025 : Record 14000907;
      EMailHeader@1000000010 : Record 14000901;
      EMailLine@1000000011 : Record 14000902;
      EMailLineFirstOnLevel@1000000012 : ARRAY [10] OF Record 14000902;
      EMailListEntryTmp@1000000013 : TEMPORARY Record 14000908;
      EMailAttachment@1000000030 : Record 14000909;
      EMailAttachmentTmp@1000000031 : TEMPORARY Record 14000909;
      FieldValue@1000000014 : Codeunit 14000901;
      ShipmentHeaderEdit@1000000015 : Codeunit 391;
      MailInt@1000000016 : Codeunit 14000905;
      Window@1000000017 : Dialog;
      RecordFound@1000000018 : ARRAY [10] OF Boolean;
      FirstOnLevel@1000000019 : ARRAY [10] OF Boolean;
      Finished@1000000020 : Boolean;
      ShowStatus@1000000021 : Boolean;
      EmailSent@1240020000 : Boolean;
      BatchProcessing@1240020004 : Boolean;
      LastLevel@1000000022 : Integer;
      LastType@1000000023 : Integer;
      InvoiceNo@1000000024 : Code[20];
      TempFilename@1000000032 : Text[250];
      Text001@1001 : TextConst 'ENU=Creating E-Mail\';
      Text002@1002 : TextConst 'ENU=Current Line #1##################';
      Text003@1003 : TextConst 'ENU=Subject';
      Text004@1004 : TextConst 'ENU=Addressing';
      Text005@1005 : TextConst 'ENU=Attachments';
      Text006@1006 : TextConst 'ENU=Sending';
      Text007@1007 : TextConst 'ENU=Level   Table\';
      Text008@1008 : TextConst 'ENU="  1     Sales Invoice Header (112)\"';
      Text009@1009 : TextConst 'ENU="  2       Sales Invoice Line (113)\"';
      Text010@1010 : TextConst 'ENU="  3       Sales Comment Line (44)\\"';
      Text011@1011 : TextConst 'ENU=Other tables\';
      Text012@1012 : TextConst 'ENU=Payment Terms (3), Sales Person (13), Location (14), Company Information (79),\';
      Text013@1013 : TextConst 'ENU=Customer (18)(0 Sell-to Customer Mo., 1 Bill-to Customer No., 2 Double Blind Customer No.),\';
      Text014@1014 : TextConst 'ENU=Ship-to Address (222) (0 Ship-to Code, 1 Ship-for Code),\';
      Text015@1015 : TextConst 'ENU=Shipping Agent (291), E-Ship Agent Service (14000708)';
      Text016@1016 : TextConst 'ENU=Sell-to Customer,Bill-to Customer,Double Blind Customer (could be blank)';
      Text017@1017 : TextConst 'ENU=Ship-to Code (could be blank),';
      Text018@1018 : TextConst 'ENU=Ship-for Code (could be blank)';
      Text019@1019 : TextConst 'ENU=%1 is not a supported level.';
      Text020@1020 : TextConst 'ENU=Get E-Mail List must be empty.';
      ReceiverTo@1240020003 : Text[250];
      ReceiverCC@1240020002 : Text[250];
      ReceiverBCC@1240020001 : Text[250];
      EShipShpmtHeadrEdit@1240020005 : Codeunit 14000242;
      SMTPOff365@1000000033 : Boolean;

    PROCEDURE CreateEmailAddressStr@1240020000(EmailAddressStr@1240020000 : Text[250];Type@1240020001 : Text[10]);
    BEGIN
      CASE Type OF
        'TO':
          IF ReceiverTo = '' THEN
            ReceiverTo := EmailAddressStr
          ELSE
            ReceiverTo := ReceiverTo + ';' + EmailAddressStr;
        'CC':
          IF ReceiverCC = '' THEN
            ReceiverCC := EmailAddressStr
          ELSE
            ReceiverCC := ReceiverCC + ';' + EmailAddressStr;
        'BCC':
          IF ReceiverBCC = '' THEN
            ReceiverBCC := EmailAddressStr
          ELSE
            ReceiverBCC := ReceiverBCC + ';' + EmailAddressStr;
      END;
    END;

    PROCEDURE InitializeRequest@1(NewInvoiceNo@1000000000 : Code[20];BatchSending@1240020000 : Boolean);
    BEGIN
      InvoiceNo := NewInvoiceNo;
      BatchProcessing := BatchSending;

      IF NewInvoiceNo = 'SHOWHELP' THEN
        MESSAGE(
          Text007 +
          Text008 +
          Text009 +
          Text010 +
          Text011 +
          Text012 +
          Text013 +
          Text014 +
          Text015);
    END;

    PROCEDURE GetLevelName@5(LevelNo@1000000000 : Integer) : Text[30];
    BEGIN
      CASE LevelNo OF
        1:
          EXIT(SalesInvoiceHeader.TABLENAME);
        2:
          EXIT(SalesInvoiceLine.TABLENAME);
        3:
          EXIT(SalesCommentLine.TABLENAME);
        ELSE
          EXIT('');
      END;
    END;

    PROCEDURE GetTableFilter@6() : Text[250];
    BEGIN
      EXIT('3|13|14|18|44|79|112|113|222|291|14000708|14000901|14000907');
    END;

    PROCEDURE GetRecordNoStrMenu@9(CurrentTableNo@1000000000 : Integer) : Text[250];
    BEGIN
      CASE CurrentTableNo OF
        DATABASE::Customer:
          EXIT(Text016);
        DATABASE::"Ship-to Address":
          EXIT(
            Text017 +
            Text018);
        ELSE
          EXIT('');
      END;
    END;

    LOCAL PROCEDURE GetInitialRecords@2() : Boolean;
    VAR
      EMailListEntry@1240030000 : Record 14000908;
      SendMail@1000000000 : Boolean;
    BEGIN
      // Get and Load Header values
      SalesInvoiceHeader.GET(InvoiceNo);
      FieldValue.SalesInvoiceHeader_112(SalesInvoiceHeader,0);
      CompanyInformation.GET;
      FieldValue.CompanyInformation_79(CompanyInformation,0);
      Customer.GET(SalesInvoiceHeader."Sell-to Customer No.");
      FieldValue.Customer_18(Customer,0);
      Customer.GET(SalesInvoiceHeader."Bill-to Customer No.");
      FieldValue.Customer_18(Customer,1);
      IF NOT Customer.GET(SalesInvoiceHeader."Double Blind Ship-from Cust No") THEN
        CLEAR(Customer);
      FieldValue.Customer_18(Customer,2);
      IF SalesInvoiceHeader."Ship-to Code" <> '' THEN BEGIN
        ShipToAddress.GET(SalesInvoiceHeader."Sell-to Customer No.",SalesInvoiceHeader."Ship-to Code");
        FieldValue.ShiptoAddress_222(ShipToAddress,0);
      END;
      IF SalesInvoiceHeader."Ship-for Code" <> '' THEN BEGIN
        ShipToAddress.GET(SalesInvoiceHeader."Sell-to Customer No.",SalesInvoiceHeader."Ship-for Code");
        FieldValue.ShiptoAddress_222(ShipToAddress,0);
      END;
      IF NOT PaymentTerms.GET(SalesInvoiceHeader."Payment Terms Code") THEN
        CLEAR(PaymentTerms);
      FieldValue.PaymentTerms_3(PaymentTerms,0);
      IF NOT SalesPersonPurchaser.GET(SalesInvoiceHeader."Salesperson Code") THEN
        CLEAR(SalesPersonPurchaser);
      FieldValue.SalespersonPurchaser_13(SalesPersonPurchaser,0);
      IF NOT Location.GET(SalesInvoiceHeader."Location Code") THEN
        CLEAR(Location);
      FieldValue.Location_14(Location,0);
      IF NOT ShippingAgent.GET(SalesInvoiceHeader."Shipping Agent Code") THEN
        CLEAR(ShippingAgent);
      FieldValue.ShippingAgent_291(ShippingAgent,0);
      IF NOT EShipAgentService.GET(
               SalesInvoiceHeader."Shipping Agent Code",SalesInvoiceHeader."E-Ship Agent Service",
               SalesInvoiceHeader."World Wide Service")
      THEN
        CLEAR(EShipAgentService);
      FieldValue.EShipAgentService_14000708(EShipAgentService,0);

      // Find E-Mail receivers
      EMailListEntryTmp.RESET;
      EMailListEntryTmp.DELETEALL;

      EMailListEntry.RESET;
      EMailListEntry.SETRANGE("Table ID",DATABASE::Customer);
      // <TOP8847>
      //EMailListEntry.SETRANGE(Code,SalesInvoiceHeader."Sell-to Customer No.");
      EMailListEntry.SETRANGE(Code,SalesInvoiceHeader."Bill-to Customer No.");
      // </TOP8847>
      IF SalesInvoiceHeader."Ship-to Code" <> '' THEN
        EMailListEntry.SETRANGE("Use for Ship-to/Order Address",TRUE);
      IF EMailListEntry.FIND('-') THEN
        REPEAT
        //<TPZ2584>
         IF EMailListEntry."Shortcut Dimension 5 Code" <> '' THEN BEGIN
          IF EMailListEntry."Shortcut Dimension 5 Code" = SalesInvoiceHeader."Shortcut Dimension 5 Code" THEN BEGIN
            EMailListEntryTmp := EMailListEntry;
            EMailListEntryTmp.INSERT;
          END;
         END ELSE BEGIN //</TPZ2584>
          EMailListEntryTmp := EMailListEntry;
          EMailListEntryTmp.INSERT;
         END;//<TPZ2584>
        UNTIL EMailListEntry.NEXT = 0;

      IF SalesInvoiceHeader."Ship-to Code" <> '' THEN BEGIN
        EMailListEntry.RESET;
        EMailListEntry.SETRANGE("Table ID",DATABASE::"Ship-to Address");
        EMailListEntry.SETRANGE(Code,SalesInvoiceHeader."Sell-to Customer No.");
        EMailListEntry.SETRANGE("Code 2",SalesInvoiceHeader."Ship-to Code");
        IF EMailListEntry.FIND('-') THEN
          REPEAT
          //<TPZ2584>
           IF EMailListEntry."Shortcut Dimension 5 Code" <> '' THEN BEGIN
            IF EMailListEntry."Shortcut Dimension 5 Code" = SalesInvoiceHeader."Shortcut Dimension 5 Code" THEN BEGIN
            EMailListEntryTmp := EMailListEntry;
            EMailListEntryTmp.INSERT;
            END;
           END ELSE BEGIN //</TPZ2584>
              EMailListEntryTmp := EMailListEntry;
              EMailListEntryTmp.INSERT;
           END;//<TPZ2584>
          UNTIL EMailListEntry.NEXT = 0;
      END;

      IF (SalesInvoiceHeader."Ship-for Code" <> '') AND
         (SalesInvoiceHeader."Ship-to Code" <> SalesInvoiceHeader."Ship-for Code")
      THEN BEGIN
        EMailListEntry.RESET;
        EMailListEntry.SETRANGE("Table ID",DATABASE::"Ship-to Address");
        EMailListEntry.SETRANGE(Code,SalesInvoiceHeader."Sell-to Customer No.");
        EMailListEntry.SETRANGE("Code 2",SalesInvoiceHeader."Ship-for Code");
        IF EMailListEntry.FIND('-') THEN
          REPEAT
          //<TPZ2584>
           IF EMailListEntry."Shortcut Dimension 5 Code" <> '' THEN BEGIN
            IF EMailListEntry."Shortcut Dimension 5 Code" = SalesInvoiceHeader."Shortcut Dimension 5 Code" THEN BEGIN
            EMailListEntryTmp := EMailListEntry;
            EMailListEntryTmp.INSERT;
            END;
           END ELSE BEGIN //</TPZ2584>
            EMailListEntryTmp := EMailListEntry;
            EMailListEntryTmp.INSERT;
           END;//<TPZ2584>
          UNTIL EMailListEntry.NEXT = 0;
      END;

      EMailListEntry.RESET;
      EMailListEntry.SETRANGE("Table ID",DATABASE::"Sales Header");
      EMailListEntry.SETRANGE(Type,1);
      EMailListEntry.SETRANGE(Code,SalesInvoiceHeader."Order No.");
      IF EMailListEntry.FIND('-') THEN
        REPEAT
        //<TPZ2584>
          IF EMailListEntry."Shortcut Dimension 5 Code" <> '' THEN BEGIN
            IF EMailListEntry."Shortcut Dimension 5 Code" = SalesInvoiceHeader."Shortcut Dimension 5 Code" THEN BEGIN
          EMailListEntryTmp := EMailListEntry;
          EMailListEntryTmp.INSERT;
            END;
          END ELSE BEGIN //</TPZ2584>
            EMailListEntryTmp := EMailListEntry;
            EMailListEntryTmp.INSERT;
          END;//<TPZ2584>
        UNTIL EMailListEntry.NEXT = 0;

      EMailListEntry.RESET;
      EMailListEntry.SETRANGE("Table ID",DATABASE::"Sales Header");
      EMailListEntry.SETRANGE(Type,2);
      EMailListEntry.SETRANGE(Code,SalesInvoiceHeader."Pre-Assigned No.");
      IF EMailListEntry.FIND('-') THEN
        REPEAT
          //<TPZ2584>
           IF EMailListEntry."Shortcut Dimension 5 Code" <> '' THEN BEGIN
            IF EMailListEntry."Shortcut Dimension 5 Code" = SalesInvoiceHeader."Shortcut Dimension 5 Code" THEN BEGIN
          EMailListEntryTmp := EMailListEntry;
          EMailListEntryTmp.INSERT;
            END;
           END ELSE BEGIN //</TPZ2584>
            EMailListEntryTmp := EMailListEntry;
            EMailListEntryTmp.INSERT;
           END;//<TPZ2584>
        UNTIL EMailListEntry.NEXT = 0;

      EMailListEntry.RESET;
      EMailListEntry.SETRANGE("Table ID",DATABASE::"Sales Invoice Header");
      EMailListEntry.SETRANGE(Code,SalesInvoiceHeader."No.");
      IF EMailListEntry.FIND('-') THEN
        REPEAT
          //<TPZ2584>
           IF EMailListEntry."Shortcut Dimension 5 Code" <> '' THEN BEGIN
            IF EMailListEntry."Shortcut Dimension 5 Code" = SalesInvoiceHeader."Shortcut Dimension 5 Code" THEN BEGIN
          EMailListEntryTmp := EMailListEntry;
          EMailListEntryTmp.INSERT;
            END;
           END ELSE BEGIN //</TPZ2584>
            EMailListEntryTmp := EMailListEntry;
            EMailListEntryTmp.INSERT;
          END;//<TPZ2584>
        UNTIL EMailListEntry.NEXT = 0;

      EMailListEntryTmp.SETRANGE("Sales Invoice E-Mail",1,3);
      EMailListEntryTmp.SETFILTER("E-Mail",'<>%1','');

      // Test That a Mail should be sent
      // <TOP8847>
      //SendMail :=
      //  EMailRule.GetEMailRule(
      //    0,SalesInvoiceHeader."Sell-to Customer No.",SalesInvoiceHeader."Ship-to Code");
      SendMail :=
        EMailRule.GetEMailRule(
          0,SalesInvoiceHeader."Bill-to Customer No.",SalesInvoiceHeader."Ship-to Code");
      // </TOP8847>

      IF NOT SendMail THEN
        EXIT(FALSE);

      SendMail := EMailHeader.GET(EMailRule."Sales Invoice E-Mail Code");

      IF NOT SendMail THEN
        EXIT(FALSE);

      FieldValue.EMailHeader_14000901(EMailHeader,0);
      FieldValue.EMailRule_14000907(EMailRule,0);

      EXIT(EMailListEntryTmp.FIND('-'));
    END;

    LOCAL PROCEDURE ModifyRecords@7();
    BEGIN
      SalesInvoiceHeader.GET(InvoiceNo);
      SalesInvoiceHeader."E-Mail Invoice Notice Handled" := TRUE;

      // Solves Permission issue
      EShipShpmtHeadrEdit.SalesInvoiceHeaderEdit(SalesInvoiceHeader);
      COMMIT;
    END;

    LOCAL PROCEDURE GetFirstRecordInLoop@3(CurrentLevel@1000000000 : Integer);
    BEGIN
      CASE CurrentLevel OF
        2:
          BEGIN
            SalesInvoiceLine.RESET;
            SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
            IF EMailHeader."Line Type Filter" <> '' THEN
              SalesInvoiceLine.SETFILTER(Type,EMailHeader."Line Type Filter");
            IF EMailHeader."Only Lines with Content" THEN
              SalesInvoiceLine.SETFILTER(Quantity,'<>%1',0);
            RecordFound[CurrentLevel] := SalesInvoiceLine.FIND('-');
            FieldValue.SalesInvoiceLine_113(SalesInvoiceLine,0);
          END;
        3:
          BEGIN
            SalesCommentLine.RESET;
            SalesCommentLine.SETRANGE("Document Type",SalesCommentLine."Document Type"::Invoice);
            SalesCommentLine.SETRANGE("No.",SalesInvoiceHeader."No.");
            SalesCommentLine.SETRANGE("Include in E-Mail",TRUE);
            RecordFound[CurrentLevel] := SalesCommentLine.FIND('-');
            FieldValue.SalesCommentLine_44(SalesCommentLine,0);
          END;
        ELSE
          ERROR(Text019,CurrentLevel);
      END;
    END;

    LOCAL PROCEDURE GetNextRecordInLoop@4(CurrentLevel@1000000000 : Integer);
    BEGIN
      CASE CurrentLevel OF
        2:
          BEGIN
            RecordFound[CurrentLevel] := SalesInvoiceLine.NEXT <> 0;
            FieldValue.SalesInvoiceLine_113(SalesInvoiceLine,0);
          END;
        3:
          BEGIN
            RecordFound[CurrentLevel] := SalesCommentLine.NEXT <> 0;
            FieldValue.SalesCommentLine_44(SalesCommentLine,0);
          END;
        ELSE
          ERROR(Text019,CurrentLevel);
      END;
    END;

    PROCEDURE SaveReport@8(ReportNo@1000000000 : Integer;VAR SaveFileName@1000000001 : Text[250]);
    BEGIN
      SalesInvoiceHeader.SETRECFILTER;
      IF ISSERVICETIER THEN BEGIN
        EMailSetup.ChangeFilenameToPDF(SaveFileName);
        REPORT.SAVEASPDF(ReportNo,SaveFileName,SalesInvoiceHeader);
      END ELSE
        REPORT.SAVEASHTML(ReportNo,SaveFileName,SalesInvoiceHeader);
    END;

    PROCEDURE GetReceiverList@10(VAR GetEMailListEntryTmp@1240030000 : Record 14000908);
    BEGIN
      GetInitialRecords;

      GetEMailListEntryTmp.RESET;
      IF GetEMailListEntryTmp.FIND('-') THEN
        ERROR(Text020);

      EMailListEntryTmp.RESET;
      IF EMailListEntryTmp.FIND('-') THEN
        REPEAT
          GetEMailListEntryTmp := EMailListEntryTmp;
          GetEMailListEntryTmp.INSERT;
        UNTIL EMailListEntryTmp.NEXT = 0;
    END;

    PROCEDURE SetSMTP365@1000000000(pSMTPOff365@1000000000 : Boolean);
    BEGIN
      //TPZ1788
      SMTPOff365 := pSMTPOff365;
    END;

    BEGIN
    {
      The Code that customize the running of the report should be done in the 4 triggers
      GetInitialRecords
        This is where all the values needed for the general information in the E-Mail are retrived.
        Additional tables could be added in the information was needed.

      ModifyRecords
        This is the final step, where the status of some records are modified. This could be used to
        change a field telling that the E-Mail has been sent.

      GetFirstRecordInLoop
        This will get the first record in each level. This also adjust some variables and contol that the
        flow of multilevel tables are correct. Like the printing of Posted Package/Posted Package Line.

      GetNextRecordInLoop
        This will retrieve the next record for each level.

      SaveReport
        This will run and save a specific report in HTML or PDF(only for NAV 2009 RTC and higher).

      2016-02-18 TOP8847 TAKHMETO
        Sell-to Customer No. has been replaced by Bill-to Customer No. for E-Mail List filtering

      2017-03-05 TPZ1788 SDESAI
        Added code Office 365 SMTP
        Added code to send BCC for To and CC
      2019-05-16 TPZ2584 UCHOUHAN
        Added code to find Email receiver accoeding to division wise.
      001 TPZ3222 RPS 07152021 - Change 365 to SMTP  task for NAV
    }
    END.
  }
  RDLDATA
  {
  }
}

