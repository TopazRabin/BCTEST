OBJECT Report 51700 Suggest Mfr. Rep. Payments
{
  OBJECT-PROPERTIES
  {
    Date=01/29/21;
    Time=[ 4:52:39 AM];
    Modified=Yes;
    Version List=TPZ000.00.00,TPZ3037;
  }
  PROPERTIES
  {
    CaptionML=ENU=Suggest Mfr. Rep. Payments;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   CommSetup.GET;
                 END;

    OnPreReport=BEGIN
                  //CommLedgEntryTemp.DELETEALL;
                  ShowPostingDateWarning := FALSE;
                END;

    OnPostReport=BEGIN
                   COMMIT;
                 END;

  }
  DATASET
  {
    { 3182;    ;DataItem;MfrRep              ;
               DataItemTable=Table50027;
               DataItemTableView=SORTING(Code);
               OnPreDataItem=BEGIN
                               IF ShortcutDim5Code = '' THEN
                                 ERROR(Text027);

                               IF (StartingDate = 0D) THEN
                                 ERROR(Text000);

                               IF (EndingDate = 0D) THEN
                                 ERROR(Text001);

                               CommJnlLineInserted := FALSE;
                               MessageText := '';

                               MfrRep2.COPYFILTERS(MfrRep);

                               Window.OPEN(Text006);

                               NextEntryNo := 1;
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(1,Code);

                                  CheckAlreadyExists;

                                  GetSalesInvHeader;
                                  GetSalesCrMemoHeader;

                                  IF UsePastDue THEN
                                    GetCustLedgEntries(FALSE,TRUE);
                                  IF UsePaymentDisc THEN
                                    GetCustLedgEntries(TRUE,FALSE);

                                  CheckException;
                                END;

               OnPostDataItem=VAR
                                PayableCommLedgEntry@1000000000 : Record 51706;
                              BEGIN
                                CommJnlLine.LOCKTABLE;
                                CommJnlTemplate.GET(CommJnlLine."Journal Template Name");
                                CommJnlBatch.GET(CommJnlLine."Journal Template Name",CommJnlLine."Journal Batch Name");
                                CommJnlLine.SETRANGE("Journal Template Name",CommJnlLine."Journal Template Name");
                                CommJnlLine.SETRANGE("Journal Batch Name",CommJnlLine."Journal Batch Name");
                                IF CommJnlLine.FINDLAST THEN BEGIN
                                  FirstLineNo := CommJnlLine."Line No.";
                                  LastLineNo := CommJnlLine."Line No.";
                                  CommJnlLine.INIT;
                                END;

                                Window2.OPEN(Text008);

                                MakeCommJnlLines;
                                PayableCommLedgEntry.RESET;
                                PayableCommLedgEntry.DELETEALL;

                                Window2.CLOSE;
                                Window.CLOSE;
                                ShowMessage(MessageText);
                              END;

               ReqFilterFields=Code,Responsibility Center,Field50200 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF PostingDate = 0D THEN
                     PostingDate := WORKDATE;
                   ValidatePostingDate;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESM=Opciones;
                             FRC=Options;
                             ENC=Options];
                  GroupType=Group }

      { 4   ;2   ;Group     ;
                  CaptionML=[ENU=Find Payments;
                             ESM=Buscar pagos;
                             FRC=Rechercher les paiements;
                             ENC=Find Payments];
                  GroupType=Group }

      { 1000000000;3;Field  ;
                  Name=FindPastDueInvoices;
                  CaptionML=ENU=Find Past Due Invoices;
                  SourceExpr=UsePastDue }

      { 2   ;3   ;Field     ;
                  Name=FindPaymentDiscounts;
                  CaptionML=[ENU=Find Payment Discounts;
                             ESM=Buscar dtos. P.P.;
                             FRC=Trouver escompte de paiement;
                             ENC=Find Payment Discounts];
                  SourceExpr=UsePaymentDisc;
                  MultiLine=Yes;
                  OnValidate=BEGIN
                               //IF UsePaymentDisc AND UseDueDateAsPostingDate THEN
                               //  ERROR(PmtDiscUnavailableErr);
                             END;
                              }

      { 8   ;2   ;Group     ;
                  CaptionML=[ENU=Fill in Journal Lines;
                             ESM=Rellenar l¡neas de diario;
                             FRC=Renseigner les lignes journal;
                             ENC=Fill in Journal Lines];
                  GroupType=Group }

      { 1000000004;3;Field  ;
                  CaptionML=ENU=Division;
                  SourceExpr=ShortcutDim5Code;
                  OnValidate=BEGIN
                               ValidateShortcutDimCode(5,ShortcutDim5Code);
                             END;

                  OnLookup=BEGIN
                             LookupShortcutDimCode(5,ShortcutDim5Code);
                           END;
                            }

      { 5   ;3   ;Field     ;
                  Name=PostingDate;
                  CaptionML=[ENU=Posting Date;
                             ESM=Fecha registro;
                             FRC=Date de report;
                             ENC=Posting Date];
                  SourceExpr=PostingDate;
                  OnValidate=BEGIN
                               ValidatePostingDate;
                             END;
                              }

      { 1000000001;3;Field  ;
                  CaptionML=ENU=Starting Date;
                  SourceExpr=StartingDate }

      { 1000000002;3;Field  ;
                  CaptionML=ENU=Ending Date;
                  SourceExpr=EndingDate }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU="In the Starting Date field, specify the starting date ... ";ESM=En el campo élt. fecha pago, especifique la £ltima fecha posible en la que se deben realizar los pagos.;FRC=Dans le champ DerniŠre date ‚ch‚ance, sp‚cifiez la date … laquelle les paiements doivent ˆtre effectu‚s au plus tard.;ENC=In the Last Payment Date field, specify the last possible date that payments must be made.';
      Text001@1001 : TextConst 'ENU="In the Ending Date field, specify the ending date ... ";ESM=En el campo Fecha registro, especifique la fecha que se usar  como fecha de registro para los movimientos del diario.;FRC=Dans le champ Date de report, sp‚cifiez la date qui sera utilis‚e comme date de report pour les ‚critures du journal.;ENC=In the Posting Date field, specify the date that will be used as the posting date for the journal entries.';
      Text002@1002 : TextConst 'ENU=In the Starting Document No. field, specify the first document number to be used.;ESM=En el campo N§ documento inicial, especifique el primer n£mero de documento que se debe usar.;FRC=Dans le champ Nø document d‚but, sp‚cifiez le premier num‚ro de document … utiliser.;ENC=In the Starting Document No. field, specify the first document number to be used.';
      Text003@1003 : TextConst '@@@=%1 is a date;ENU=The payment date is earlier than %1.\\Do you still want to run the batch job?;ESM=La fecha de pago es anterior a %1\.\¨Desea ejecutar el trabajo por lotes?;FRC=La date de paiement est ant‚rieure … %1.\\Voulez-vous toujours ex‚cuter le traitement en lot?;ENC=The payment date is earlier than %1.\\Do you still want to run the batch job?';
      Text005@1005 : TextConst 'ENU=The batch job was interrupted.;ESM=El proceso se ha interrumpido.;FRC=Le traitement en lot a ‚t‚ interrompu.;ENC=The batch job was interrupted.';
      Text006@1006 : TextConst 'ENU=Processing                        #1##########;ESM=Procesando proveedores                   #1##########;FRC=Traitement des fournisseurs                        #1##########;ENC=Processing vendors                       #1##########';
      Text007@1007 : TextConst 'ENU=Processing vendors for payment discounts #1##########;ESM=Procesando proveedores para dto. P.P.    #1##########;FRC=Traitement des fournisseurs pour escompte paiement #1##########;ENC=Processing vendors for payment discounts #1##########';
      Text008@1008 : TextConst 'ENU=Inserting payment journal lines          #1##########;ESM=Insertando l¡ns. diario pagos            #1##########;FRC=Ins‚rer lignes journal paiement                    #1##########;ENC=Inserting payment journal lines          #1##########';
      Text009@1009 : TextConst 'ENU=%1 must be G/L Account or Bank Account.;ESM=%1 deber¡a ser una cuenta o banco.;FRC=%1 doit ˆtre un compte GL ou un compte bancaire.;ENC=%1 must be G/L Account or Bank Account.';
      Text010@1010 : TextConst 'ENU=%1 must be filled only when %2 is Bank Account.;ESM=S¢lo se debe completar %1 si %2 es un banco.;FRC=%1 doit ˆtre compl‚t‚ seulement lorsque %2 est un compte bancaire.;ENC=%1 must be filled only when %2 is Bank Account.';
      Text011@1011 : TextConst 'ENU=Use Vendor Priority must be activated when the value in the Amount Available field is not 0.;ESM=Se debe activar utilizar prioridad prov. si el valor en el campo importe disponible no es igual a cero.;FRC=Priorit‚ par fournisseur doit ˆtre activ‚e lorsque la valeur dans le champ montant disponible n''est pas 0.;ENC=Use Vendor Priority must be activated when the value in the Amount Available field is not 0.';
      Text012@1012 : TextConst 'ENU=Starting Document No. must contain a number.;ESM=N§ documento incial debe contener un n£mero.;FRC=Nø document de d‚part doit contenir un num‚ro.;ENC=Starting Document No. must contain a number.';
      Text013@1013 : TextConst 'ENU=Use Vendor Priority must be activated when the value in the Amount Available Amount ($) field is not 0.;ESM=Se debe activar Utilizar prioridad prov. si el valor en el campo Importe disponible ($) es distinto de cero;FRC=Priorit‚ par fournisseur doit ˆtre activ‚e lorsque la valeur dans le champ montant disponible montant($) n''est pas 0.;ENC=Use Vendor Priority must be activated when the value in the Amount Available Amount ($) field is not 0.';
      Text014@1014 : TextConst 'ENU=Payment to vendor %1;ESM=Pago a proveedor %1;FRC=Paiement au fournisseur %1;ENC=Payment to vendor %1';
      Text015@1015 : TextConst 'ENU=%1 for %2 %3;ESM=Pago de %1 %2;FRC=Paiement de %1 %2;ENC=Payment of %1 %2';
      Text016@1016 : TextConst 'ENU=" is already applied to %1 %2 for vendor %3.";ESM=" ya se ha liquidado a %1 %2 para el proveedor %3.";FRC=" est d‚j… appliqu‚ … %1 %2 pour le fournisseur %3.";ENC=" is already applied to %1 %2 for vendor %3."';
      Text017@1017 : TextConst '@@@="If Bank Payment Type = Computer Check and you have not selected the Summarize per Vendor field,\ then you must select the New Doc. No. per Line.";ENU="If %1 = %2 and you have not selected the Summarize per Vendor field,\ then you must select the New Doc. No. per Line.";ESM="Si %1 = %2 y no ha seleccionado el campo Resumir por proveedor,\ debe seleccionar Nuevo n§ doc. por l¡nea.";FRC="Si %1 = %2 et si vous n''avez pas s‚lectionn‚ le champ Totaliser par fournisseur,\vous devez s‚lectionner Nouveau nø document par ligne.";ENC="If %1 = %2 and you have not selected the Summarize per Vendor field,\ then you must select the New Doc. No. per Line."';
      Text020@1020 : TextConst '@@@=You have only created suggested vendor payment lines for the Currency Code EUR.\ However, there are other open vendor ledger entries in currencies other than EUR.;ENU=You have only created suggested vendor payment lines for the %1 %2.\ However, there are other open vendor ledger entries in currencies other than %2.\\;ESM=Solo ha creado l¡neas de pago de proveedor sugeridas para el %1 %2.\ Hay, sin embargo, otros movimientos de proveedor abiertos en divisas diferentes que %2.\\;FRC=Vous n''avez cr‚‚ que les lignes de paiement fournisseur sugg‚r‚es pour  %1 %2.\Il existe toutefois d''autres ‚critures fournisseur ouvertes dans d''autres devises que %2.\\;ENC=You have only created suggested vendor payment lines for the %1 %2.\ However, there are other open vendor ledger entries in currencies other than %2.\\';
      Text021@1021 : TextConst '@@@=You have only created suggested vendor payment lines for the Currency Code EUR\ There are no other open vendor ledger entries in other currencies.\\;ENU=You have only created suggested vendor payment lines for the %1 %2.\ There are no other open vendor ledger entries in other currencies.\\;ESM=Solo ha creado l¡neas de pago de proveedor sugeridas para el %1 %2.\ No hay otros movimientos de proveedor abiertos en otras divisas.\\;FRC=Vous n''avez cr‚‚ que les lignes de paiement fournisseur sugg‚r‚es pour  %1 %2.\Il n''existe aucune autre ‚criture fournisseur ouverte dans d''autres devises.\\;ENC=You have only created suggested vendor payment lines for the %1 %2.\ There are no other open vendor ledger entries in other currencies.\\';
      Text022@1022 : TextConst 'ENU=You have created suggested vendor payment lines for all currencies.\\;ESM=Ha creado l¡neas pago proveedor sugeridas para todas las divisas.\\;FRC=Vous avez cr‚‚ des lignes de paiement fournisseur sugg‚r‚es pour toutes les devises.\\;ENC=You have created suggested vendor payment lines for all currencies.\\';
      CommSetup@1000000004 : Record 51700;
      MfrRep2@1023 : Record 50027;
      MfrRepCommExcp@1000000005 : Record 51701;
      Location2@1000000007 : Record 14;
      Customer@1000000012 : Record 18;
      CommJnlTemplate@1024 : Record 51703;
      CommJnlBatch@1025 : Record 51704;
      CommJnlLine@1026 : Record 51705;
      DimSetEntry@1027 : Record 480;
      CommJnlLine2@1028 : Record 51705;
      CommLedgEntry@1029 : Record 51709;
      CustLedgEntry@1000000000 : Record 21;
      TempPaymentBuffer@1033 : TEMPORARY Record 372;
      OldTempPaymentBuffer@1034 : TEMPORARY Record 372;
      SelectedDim@1035 : Record 369;
      CommLedgEntryTemp@1102601000 : TEMPORARY Record 51707;
      NoSeriesMgt@1036 : Codeunit 396;
      VendEntryEdit@1037 : Codeunit 113;
      DimMgt@1038 : Codeunit 408;
      DimBufMgt@1018 : Codeunit 411;
      Window@1039 : Dialog;
      Window2@1004 : Dialog;
      UsePaymentDisc@1040 : Boolean;
      UsePastDue@1000000003 : Boolean;
      PostingDate@1041 : Date;
      LastDueDateToPayReq@1042 : Date;
      NextDocNo@1043 : Code[20];
      ShortcutDim5Code@1000000009 : Code[20];
      AmountAvailable@1044 : Decimal;
      OriginalAmtAvailable@1045 : Decimal;
      UsePriority@1046 : Boolean;
      SummarizePerVend@1047 : Boolean;
      SummarizePerDim@1048 : Boolean;
      SummarizePerDimText@1049 : Text[250];
      FirstLineNo@1050 : Integer;
      LastLineNo@1051 : Integer;
      NextEntryNo@1052 : Integer;
      DocNoPerLine@1054 : Boolean;
      MessageText@1058 : Text;
      CommJnlLineInserted@1059 : Boolean;
      Text023@1061 : TextConst 'ENU=" ,Computer Check,Manual Check";ESM=" ,Cheque autom tico,Cheque manual";FRC=" ,Informatique,Manuel";ENC=" ,Computer Cheque,Manual Cheque"';
      Text024@1102601001 : TextConst 'ENU=There are one or more entries for which no payment suggestions have been made because the posting dates of the entries are later than the requested posting date. Do you want to see the entries?;ESM=Existen uno o m s movimientos para los que se realizaron sugerencias de pago porque las fechas de registro de dichos movimientos son posteriores a la fecha de registro solicitada. ¨Desea ver los movimientos?;FRC=Il existe une ou plusieurs ‚critures pour lesquelles aucune suggestion de paiement n''a ‚t‚ faite car les dates de report de ces ‚critures sont post‚rieures … celle demand‚e. Voulez-vous visualiser ces ‚critures?;ENC=There are one or more entries for which no payment suggestions have been made because the posting dates of the entries are later than the requested posting date. Do you want to see the entries?';
      Text025@1063 : TextConst 'ENU=The %1 with the number %2 has a %3 with the number %4.;ESM=El %1 con el n£mero %2 tiene un %3 con el n£mero %4.;FRC=Le %1 avec le num‚ro %2 a un %3 avec le num‚ro %4.;ENC=The %1 with the number %2 has a %3 with the number %4.';
      ShowPostingDateWarning@1119 : Boolean;
      MfrRepBalance@1065 : Decimal;
      Text026@1000000006 : TextConst 'ENU=Processing locations                       #1##########;ESM=Procesando proveedores                   #1##########;FRC=Traitement des fournisseurs                        #1##########;ENC=Processing vendors                       #1##########';
      Text027@1000000010 : TextConst 'ENU=Division must be specified.';
      Text028@1000000011 : TextConst 'ENU=%1 (Exception)';
      ReplacePostingDateMsg@1064 : TextConst 'ENU=For one or more entries, the requested posting date is before the work date.\\These posting dates will use the work date.;ESM=Para uno o m s movimientos, la fecha de registro solicitada es anterior a la fecha de trabajo.\\Estas fechas de registro usar n la fecha de trabajo.;FRC=Pour une ou plusieurs ‚critures, la date de report demand‚e est ant‚rieure … la date de travail.\\Ces dates de report utiliseront la date de travail.;ENC=For one or more entries, the requested posting date is before the work date.\\These posting dates will use the work date.';
      PmtDiscUnavailableErr@1067 : TextConst 'ENU=You cannot use Find Payment Discounts or Summarize per Vendor together with Calculate Posting Date from Applies-to-Doc. Due Date, because the resulting posting date might not match the payment discount date.;ESM=No se puede usar Buscar dtos. P.P. o Una l¡nea por proveedor con Calcular fecha de registro a partir de fecha de vencimiento de documento de aplicaci¢n porque es posible que la fecha de registro resultante no coincida con la fecha de descuento por pronto pago.;FRC=Vous ne pouvez pas utiliser Trouver escompte de paiement ou Sommaire par fournisseur avec Calculer la date de report … partir de la date d''‚ch‚ance du doc. d''affectation, car la date de report r‚sultante pourrait ne pas correspondre … la date d''escompte de paiement.;ENC=You cannot use Find Payment Discounts or Summarize per Vendor together with Calculate Posting Date from Applies-to-Doc. Due Date, because the resulting posting date might not match the payment discount date.';
      StartingDate@1000000001 : Date;
      EndingDate@1000000002 : Date;
      Text51700@1000000008 : TextConst 'ENU=Mfr. Rep. %1 already exists in different batch %2.';

    PROCEDURE SetCommJnlLine@1(NewCommJnlLine@1000 : Record 51705);
    BEGIN
      CommJnlLine := NewCommJnlLine;
    END;

    LOCAL PROCEDURE ValidatePostingDate@7();
    BEGIN
      CommJnlBatch.GET(CommJnlLine."Journal Template Name",CommJnlLine."Journal Batch Name");
      IF CommJnlBatch."No. Series" = '' THEN BEGIN
        NextDocNo := NoSeriesMgt.GetNextNo(CommSetup."Nos.",PostingDate,FALSE);
        CLEAR(NoSeriesMgt);
      END ELSE BEGIN
        NextDocNo := NoSeriesMgt.GetNextNo(CommJnlBatch."No. Series",PostingDate,FALSE);
        CLEAR(NoSeriesMgt);
      END;
    END;

    PROCEDURE InitializeRequest@3(LastPmtDate@1000 : Date;FindPmtDisc@1001 : Boolean;NewAvailableAmount@1002 : Decimal;NewPostingDate@1003 : Date;NewStartDocNo@1004 : Code[20];NewSummarizePerVend@1005 : Boolean;BalAccType@1006 : 'G/L Account,Customer,Vendor,Bank Account';BalAccNo@1007 : Code[20];BankPmtType@1008 : ' ,Computer Check,Manual Check');
    BEGIN
      UsePaymentDisc := FindPmtDisc;
      PostingDate := NewPostingDate;
    END;

    PROCEDURE GetSalesInvHeader@1000000001();
    VAR
      SalesInvHeader@1000000000 : Record 112;
      PayableCommLedgEntry@1000000001 : Record 51706;
      CommAmount@1000000002 : Decimal;
      Type@1000000003 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
    BEGIN
      Type := Type::Invoice;

      WITH SalesInvHeader DO BEGIN
        RESET;
        SETRANGE("Mfr. Rep. Code",MfrRep.Code);
        SETRANGE("Posting Date",StartingDate,EndingDate);
        SETRANGE("Shortcut Dimension 5 Code",ShortcutDim5Code);
        IF FINDSET THEN
          REPEAT
            //<TPZ3037>
            MfrRepCommExcp.RESET;
            MfrRepCommExcp.SETRANGE("Pay-to Mfr. Rep. Code","Mfr. Rep. Code");
            MfrRepCommExcp.SETRANGE("Shortcut Dimension 5 Code","Shortcut Dimension 5 Code");
            MfrRepCommExcp.SETRANGE("Customer No.","Sell-to Customer No.");
            IF NOT MfrRepCommExcp.FINDFIRST THEN BEGIN
            //</TPZ3037>
              CALCFIELDS("Item Amount");
              CALCFIELDS("G/L Comm. Payable Amount");
              IF "Use Mfr. Rep. Comm. Amount" <> 0 THEN
                CommAmount := "Use Mfr. Rep. Comm. Amount"
              ELSE BEGIN
                CALCFIELDS("Mfr. Rep. Comm. Amount");
                CommAmount := "Mfr. Rep. Comm. Amount";
              END;

              IF CommAmount <> 0 THEN BEGIN
                InitPayableCommLedgEntry(PayableCommLedgEntry);

                PayableCommLedgEntry."Mfr. Rep. Code" := MfrRep.Code;
                PayableCommLedgEntry.Amount := CommAmount;
                PayableCommLedgEntry."Base Amount" := "Item Amount" + "G/L Comm. Payable Amount";
                PayableCommLedgEntry."Commission %" := "Mfr. Rep. Comm. %";
                PayableCommLedgEntry."Reason Type" := PayableCommLedgEntry."Reason Type"::Invoice;
                PayableCommLedgEntry."Cust. Ledg. Entry No." := GetCustLedgEntryNo(Type,"No.","Posting Date");
                PayableCommLedgEntry."Source Document Type" := PayableCommLedgEntry."Source Document Type"::Invoice;
                PayableCommLedgEntry."Source Document No." := "No.";
                PayableCommLedgEntry."Source Document Posting Date" := "Posting Date";
                PayableCommLedgEntry."Location Code" := "Location Code";

                SaveAmount(PayableCommLedgEntry);
              END;
            END;//<TPZ3037>

        UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE GetSalesCrMemoHeader@1000000002();
    VAR
      SalesCrMemoHeader@1000000003 : Record 114;
      PayableCommLedgEntry@1000000002 : Record 51706;
      CommAmount@1000000001 : Decimal;
      Type@1000000000 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
    BEGIN
      Type := Type::"Credit Memo";

      WITH SalesCrMemoHeader DO BEGIN
        RESET;
        SETRANGE("Mfr. Rep. Code",MfrRep.Code);
        SETRANGE("Posting Date",StartingDate,EndingDate);
        SETRANGE("Shortcut Dimension 5 Code",ShortcutDim5Code);
        IF FINDSET THEN
          REPEAT
            //<TPZ3037>
            MfrRepCommExcp.RESET;
            MfrRepCommExcp.SETRANGE("Pay-to Mfr. Rep. Code","Mfr. Rep. Code");
            MfrRepCommExcp.SETRANGE("Shortcut Dimension 5 Code","Shortcut Dimension 5 Code");
            MfrRepCommExcp.SETRANGE("Customer No.","Sell-to Customer No.");
            IF NOT MfrRepCommExcp.FINDFIRST THEN BEGIN
            //</TPZ3037>
              CALCFIELDS("Item Amount");
              CALCFIELDS("G/L Comm. Payable Amount");
              IF "Use Mfr. Rep. Hdlg. Amount" <> 0 THEN
                CommAmount := "Use Mfr. Rep. Hdlg. Amount"
              ELSE BEGIN
                CALCFIELDS("Mfr. Rep. Comm. Amount");
                CommAmount := "Mfr. Rep. Comm. Amount";
              END;

              IF CommAmount <> 0 THEN BEGIN
                InitPayableCommLedgEntry(PayableCommLedgEntry);

                PayableCommLedgEntry."Mfr. Rep. Code" := MfrRep.Code;
                PayableCommLedgEntry.Amount := -CommAmount;
                PayableCommLedgEntry."Base Amount" := -("Item Amount" + "G/L Comm. Payable Amount");
                PayableCommLedgEntry."Commission %" := "Mfr. Rep. Comm. %";
                PayableCommLedgEntry."Reason Type" := PayableCommLedgEntry."Reason Type"::"Credit Memo";
                PayableCommLedgEntry."Cust. Ledg. Entry No." := GetCustLedgEntryNo(Type,"No.","Posting Date");
                PayableCommLedgEntry."Source Document Type" := PayableCommLedgEntry."Source Document Type"::"Credit Memo";
                PayableCommLedgEntry."Source Document No." := "No.";
                PayableCommLedgEntry."Source Document Posting Date" := "Posting Date";
                PayableCommLedgEntry."Location Code" := "Location Code";

                SaveAmount(PayableCommLedgEntry);
              END;
            END;//<TPZ3037>
        UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE GetCustLedgEntries@13(PmtDisc@1000000000 : Boolean;PastDue@1001 : Boolean);
    VAR
      CustLedgEntry2@1000000004 : Record 21;
      SalesInvHeader@1000000003 : Record 112;
      PayableCommLedgEntry@1000000001 : Record 51706;
      Type@1000000002 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
    BEGIN
      CustLedgEntry.RESET;
      //CustLedgEntry.SETRANGE("Shortcut Dimension 5 Code",ShortcutDim5Code);

      IF PastDue THEN BEGIN
        CustLedgEntry.SETRANGE("Shortcut Dimension 5 Code",ShortcutDim5Code);
        CustLedgEntry.SETRANGE("Mfr. Rep. Code",MfrRep.Code);
        CustLedgEntry.SETRANGE(Open,TRUE);
        CustLedgEntry.SETRANGE(Positive,TRUE);
        CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::Invoice);
        CustLedgEntry.SETFILTER("Due Date",'<%1',CALCDATE(CommSetup."Invoice Past Terms By Days",WORKDATE));
      END;

      IF PmtDisc THEN BEGIN
        CustLedgEntry.SETRANGE("Posting Date",StartingDate,EndingDate);
        CustLedgEntry.SETFILTER("Document Type",'%1|%2',CustLedgEntry."Document Type"::" ",CustLedgEntry."Document Type"::Payment);
        //CustLedgEntry.SETRANGE("Applies-to Doc. Type",CustLedgEntry."Applies-to Doc. Type"::Invoice);
      END;

      IF CustLedgEntry.FINDSET THEN
        REPEAT
          //InitPayableCommLedgEntry(PayableCommLedgEntry);

          PayableCommLedgEntry."Mfr. Rep. Code" := MfrRep.Code;

          IF PastDue AND SalesInvHeader.GET(CustLedgEntry."Document No.") THEN BEGIN
            CustLedgEntry.CALCFIELDS("Remaining Amount");
            InitPayableCommLedgEntry(PayableCommLedgEntry);
            PayableCommLedgEntry.Amount := -(CustLedgEntry."Remaining Amount" * SalesInvHeader."Mfr. Rep. Comm. %") / 100;
            PayableCommLedgEntry."Base Amount" := -CustLedgEntry."Remaining Amount";
            PayableCommLedgEntry."Commission %" := SalesInvHeader."Mfr. Rep. Comm. %";
            PayableCommLedgEntry."Reason Type" := PayableCommLedgEntry."Reason Type"::"Invoice Past Terms";
            PayableCommLedgEntry."Cust. Ledg. Entry No." := CustLedgEntry."Entry No.";
            PayableCommLedgEntry."Source Document Type" := CustLedgEntry."Document Type";
            PayableCommLedgEntry."Source Document No." := CustLedgEntry."Document No.";
            PayableCommLedgEntry."Source Document Posting Date" := CustLedgEntry."Posting Date";
            PayableCommLedgEntry."Location Code" := SalesInvHeader."Location Code";
            IF NOT
              CheckCommPaid(
                PayableCommLedgEntry."Source Document Type",
                SalesInvHeader."No.",
                SalesInvHeader."Posting Date",
                PayableCommLedgEntry."Reason Type") AND
              (PayableCommLedgEntry.Amount <> 0)
            THEN
              SaveAmount(PayableCommLedgEntry);
          END;

          IF PmtDisc THEN BEGIN
            CustLedgEntry2.RESET;
            CustLedgEntry2.SETRANGE("Document Type",CustLedgEntry2."Document Type"::Invoice);
            CustLedgEntry2.SETRANGE("Shortcut Dimension 5 Code",ShortcutDim5Code);
            CustLedgEntry2.SETRANGE("Closed by Entry No.",CustLedgEntry."Entry No.");
            CustLedgEntry2.SETRANGE("Mfr. Rep. Code",MfrRep.Code);
            CustLedgEntry2.SETFILTER("Pmt. Disc. Given (LCY)",'<>%1',0);
            IF CustLedgEntry2.FINDSET THEN
              REPEAT
                IF SalesInvHeader.GET(CustLedgEntry2."Document No.")
                //   (SalesInvHeader."Mfr. Rep. Code" = MfrRep.Code)
                THEN BEGIN
                  InitPayableCommLedgEntry(PayableCommLedgEntry);
                  PayableCommLedgEntry.Amount := -(CustLedgEntry2."Pmt. Disc. Given (LCY)" * SalesInvHeader."Mfr. Rep. Comm. %") / 100;
                  PayableCommLedgEntry."Base Amount" := -CustLedgEntry2."Pmt. Disc. Given (LCY)";
                  PayableCommLedgEntry."Commission %" := SalesInvHeader."Mfr. Rep. Comm. %";
                  PayableCommLedgEntry."Reason Type" := PayableCommLedgEntry."Reason Type"::"Payment Discount";
                  PayableCommLedgEntry."Cust. Ledg. Entry No." := CustLedgEntry2."Entry No.";
                  PayableCommLedgEntry."Source Document Type" := CustLedgEntry2."Document Type";
                  PayableCommLedgEntry."Source Document No." := CustLedgEntry2."Document No.";
                  PayableCommLedgEntry."Source Document Posting Date" := CustLedgEntry2."Posting Date";
                  PayableCommLedgEntry."Location Code" := SalesInvHeader."Location Code";
                  IF (PayableCommLedgEntry.Amount <> 0) THEN
                    IF NOT
                      CheckCommPaid(
                        PayableCommLedgEntry."Source Document Type",
                        SalesInvHeader."No.",
                        SalesInvHeader."Posting Date",
                        PayableCommLedgEntry."Reason Type")
                    THEN
                      SaveAmount(PayableCommLedgEntry);
                END ELSE BEGIN
                  InitPayableCommLedgEntry(PayableCommLedgEntry);
                  PayableCommLedgEntry.Amount := -(CustLedgEntry2."Pmt. Disc. Given (LCY)" * SalesInvHeader."Mfr. Rep. Comm. %") / 100;
                  PayableCommLedgEntry."Base Amount" := -CustLedgEntry2."Pmt. Disc. Given (LCY)";
                  PayableCommLedgEntry."Commission %" := SalesInvHeader."Mfr. Rep. Comm. %";
                  PayableCommLedgEntry."Reason Type" := PayableCommLedgEntry."Reason Type"::"Payment Discount";
                  PayableCommLedgEntry."Cust. Ledg. Entry No." := CustLedgEntry2."Entry No.";
                  PayableCommLedgEntry."Source Document Type" := CustLedgEntry2."Document Type";
                  PayableCommLedgEntry."Source Document No." := CustLedgEntry2."Document No.";
                  PayableCommLedgEntry."Source Document Posting Date" := CustLedgEntry2."Posting Date";
                  PayableCommLedgEntry."Location Code" := CustLedgEntry2."Location Code";
                  IF (PayableCommLedgEntry.Amount <> 0) THEN
                    IF NOT
                      CheckCommPaid(
                        PayableCommLedgEntry."Source Document Type",
                        SalesInvHeader."No.",
                        SalesInvHeader."Posting Date",
                        PayableCommLedgEntry."Reason Type")
                    THEN
                      SaveAmount(PayableCommLedgEntry);

                END;
              UNTIL CustLedgEntry2.NEXT = 0;
          END;

        UNTIL CustLedgEntry.NEXT = 0;
    END;

    PROCEDURE InitPayableCommLedgEntry@1000000000(VAR PayableCommLedgEntry@1000000000 : Record 51706);
    BEGIN
      PayableCommLedgEntry.INIT;
      PayableCommLedgEntry."Entry No." := NextEntryNo;
    END;

    LOCAL PROCEDURE SaveAmount@6(PayableCommLedgEntry@1000000000 : Record 51706);
    VAR
      PaymentToleranceMgt@1000 : Codeunit 426;
    BEGIN
      IF PayableCommLedgEntry.Amount > 0 THEN
        PayableCommLedgEntry.Positive := TRUE
      ELSE
        PayableCommLedgEntry.Positive := FALSE;

      PayableCommLedgEntry.INSERT;

      NextEntryNo := NextEntryNo + 1;
    END;

    LOCAL PROCEDURE MakeCommJnlLines@2();
    VAR
      MfrRep2@1001 : Record 50027;
      PayableCommLedgEntry@1000000000 : Record 51706;
    BEGIN
      PayableCommLedgEntry.RESET;
      IF PayableCommLedgEntry.FINDSET THEN
        REPEAT
          PayableCommLedgEntry.SETRANGE("Mfr. Rep. Code",PayableCommLedgEntry."Mfr. Rep. Code");
          PayableCommLedgEntry.FINDSET;
          NextDocNo := INCSTR(NextDocNo);
          REPEAT
            WITH CommJnlLine DO BEGIN
              INIT;
              Window2.UPDATE(1,PayableCommLedgEntry."Mfr. Rep. Code");
              LastLineNo := LastLineNo + 10000;
              "Line No." := LastLineNo;
              "Posting Date" := PostingDate;
              MfrRep2.GET(PayableCommLedgEntry."Mfr. Rep. Code");
              "Account Type" := "Account Type"::"Mfr. Rep.";
              IF (MfrRep2."Pay-to Mfr. Rep. Code" <> '') THEN
                VALIDATE("Account No.",MfrRep2."Pay-to Mfr. Rep. Code")
              ELSE
                VALIDATE("Account No.",PayableCommLedgEntry."Mfr. Rep. Code");

              "Posting No. Series" := CommJnlBatch."Posting No. Series";
              IF PayableCommLedgEntry.Amount < 0 THEN
                "Document Type" := "Document Type"::Deduction
              ELSE
                "Document Type" := "Document Type"::Payment;
              "Document No." := NextDocNo;
              "Shortcut Dimension 5 Code" := ShortcutDim5Code;
              //NextDocNo := INCSTR(NextDocNo);
              IF CustLedgEntry.GET(PayableCommLedgEntry."Cust. Ledg. Entry No.") THEN BEGIN
                "Shortcut Dimension 1 Code" := CustLedgEntry."Global Dimension 1 Code";
                "Shortcut Dimension 2 Code" := CustLedgEntry."Global Dimension 2 Code";
                "Shortcut Dimension 5 Code" := CustLedgEntry."Shortcut Dimension 5 Code";
                "External Document No." := CustLedgEntry."External Document No.";
                "Customer No." := CustLedgEntry."Sell-to Customer No.";//TPZ2045
                IF Customer.GET("Customer No.") THEN
                  "Customer Name" := Customer.Name;
              END;
              VALIDATE(Amount,PayableCommLedgEntry.Amount);
              "Base Amount" := PayableCommLedgEntry."Base Amount";
              "Comm./Hdlg. %" := PayableCommLedgEntry."Commission %";
              "Source Document Type" := PayableCommLedgEntry."Source Document Type";
              "Source Document No." := PayableCommLedgEntry."Source Document No.";
              "Source Document Posting Date" := PayableCommLedgEntry."Source Document Posting Date";
              "Document Date" := WORKDATE;
              "Period Starting Date" := StartingDate;
              "Period Ending Date" := EndingDate;
              "Reason Type" := PayableCommLedgEntry."Reason Type";
              Exception := PayableCommLedgEntry.Exception;
              "Location Code" := PayableCommLedgEntry."Location Code";
              Description :=
                STRSUBSTNO(
                  Text015,
                  "Document Type",
                  "Reason Type",
                  "Source Document No.");
              IF Exception THEN
                Description := STRSUBSTNO(Text028,Description);
              INSERT;
              CommJnlLineInserted := TRUE;
            END;

          UNTIL PayableCommLedgEntry.NEXT = 0;
          PayableCommLedgEntry.DELETEALL;
          PayableCommLedgEntry.SETRANGE("Mfr. Rep. Code");
        UNTIL NOT PayableCommLedgEntry.FINDSET;

      NoSeriesMgt.UpdateLastNoSeriesLine(CommSetup."Nos.",NextDocNo);
      NoSeriesMgt.SaveNoSeries;
    END;

    LOCAL PROCEDURE ShowMessage@15(Text@1000 : Text);
    BEGIN
      IF CommJnlLineInserted THEN BEGIN
        IF ShowPostingDateWarning THEN
          Text += ReplacePostingDateMsg;
        IF Text <> '' THEN
          MESSAGE(Text);
      END;
    END;

    PROCEDURE GetCustLedgEntryNo@1000000004(DocType@1000000000 : Option;DocNo@1000000001 : Code[20];PostingDate@1000000002 : Date) : Integer;
    VAR
      Type@1000000003 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
    BEGIN
      CustLedgEntry.RESET;
      CustLedgEntry.SETRANGE("Document Type",DocType);
      CustLedgEntry.SETRANGE("Document No.",DocNo);
      CustLedgEntry.SETRANGE("Posting Date",PostingDate);
      IF CustLedgEntry.FINDFIRST THEN
        EXIT(CustLedgEntry."Entry No.");

      EXIT(0);
    END;

    PROCEDURE CheckCommPaid@1000000006(DocType@1000000000 : Option;DocNo@1000000001 : Code[20];PostingDate@1000000002 : Date;Type@1000000003 : Option) : Boolean;
    VAR
      CommLedgerEntry@1000000004 : Record 51709;
    BEGIN
      CommLedgerEntry.RESET;
      CommLedgerEntry.SETRANGE("Source Document Type",DocType);
      CommLedgerEntry.SETRANGE("Source Document No.",DocNo);
      CommLedgerEntry.SETRANGE("Source Document Posting Date",PostingDate);
      CommLedgerEntry.SETRANGE("Reason Type",Type);
      IF CommLedgerEntry.FINDFIRST THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE CheckAlreadyExists@1000000005();
    VAR
      NewCommJnlLine@1000000000 : Record 51705;
    BEGIN
      //<VSO2029>
      NewCommJnlLine.RESET;
      NewCommJnlLine.SETFILTER("Journal Batch Name",'<>%1',CommJnlLine."Journal Batch Name");
      NewCommJnlLine.SETRANGE("Account Type",NewCommJnlLine."Account Type"::"Mfr. Rep.");
      NewCommJnlLine.SETRANGE("Account No.",MfrRep.Code);
      NewCommJnlLine.SETRANGE("Shortcut Dimension 5 Code",CommJnlLine."Shortcut Dimension 5 Code");
      IF NOT NewCommJnlLine.ISEMPTY THEN
        ERROR(Text51700,MfrRep.Code,NewCommJnlLine."Journal Batch Name");
      //</VSO2029>
    END;

    PROCEDURE LookupShortcutDimCode@18(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ValidateShortcutDimCode@1000000010(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE CheckException@1000000003();
    VAR
      MfrRepCommExcp@1000000000 : Record 51701;
    BEGIN
      MfrRepCommExcp.RESET;
      MfrRepCommExcp.SETRANGE("Pay-to Mfr. Rep. Code",MfrRep.Code);
      MfrRepCommExcp.SETRANGE("Shortcut Dimension 5 Code",ShortcutDim5Code);//<TPZ2623>
      IF MfrRepCommExcp.FINDSET THEN
        REPEAT
          GetSalesInvHeaderExcp(MfrRepCommExcp);
          GetSalesCrMemoHeaderExcp(MfrRepCommExcp);
          IF UsePaymentDisc THEN
            GetCustLedgEntriesExcp(MfrRepCommExcp,TRUE,FALSE);
          IF UsePastDue THEN
            GetCustLedgEntriesExcp(MfrRepCommExcp,FALSE,TRUE);
        UNTIL MfrRepCommExcp.NEXT = 0;

      CLEAR(MfrRepCommExcp);
    END;

    PROCEDURE GetSalesInvHeaderExcp@1000000009(MfrRepCommExcp@1000000004 : Record 51701);
    VAR
      SalesInvHeader@1000000000 : Record 112;
      PayableCommLedgEntry@1000000001 : Record 51706;
      CommAmount@1000000002 : Decimal;
      Type@1000000003 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
    BEGIN
      Type := Type::Invoice;

      WITH SalesInvHeader DO BEGIN
        RESET;
        SETRANGE("Mfr. Rep. Code",MfrRepCommExcp."Mfr. Rep. Code");
        SETRANGE("Posting Date",StartingDate,EndingDate);
        SETRANGE("Shortcut Dimension 5 Code",MfrRepCommExcp."Shortcut Dimension 5 Code");
        IF MfrRepCommExcp."Customer No." <> '' THEN
          SETRANGE("Sell-to Customer No.",MfrRepCommExcp."Customer No.");
        IF FINDSET THEN
          REPEAT
            CALCFIELDS("Item Amount");
            CALCFIELDS("G/L Comm. Payable Amount");

            CommAmount := (("Item Amount" + "G/L Comm. Payable Amount") * MfrRepCommExcp."Pay-to Commission %") / 100;

            IF CommAmount <> 0 THEN BEGIN
              InitPayableCommLedgEntry(PayableCommLedgEntry);

              PayableCommLedgEntry."Mfr. Rep. Code" := MfrRepCommExcp."Pay-to Mfr. Rep. Code";
              PayableCommLedgEntry.Amount := CommAmount;
              PayableCommLedgEntry."Base Amount" := "Item Amount" + "G/L Comm. Payable Amount";
              PayableCommLedgEntry."Commission %" := MfrRepCommExcp."Pay-to Commission %";
              PayableCommLedgEntry."Reason Type" := PayableCommLedgEntry."Reason Type"::Invoice;
              PayableCommLedgEntry."Cust. Ledg. Entry No." := GetCustLedgEntryNo(Type,"No.","Posting Date");
              PayableCommLedgEntry."Source Document Type" := PayableCommLedgEntry."Source Document Type"::Invoice;
              PayableCommLedgEntry."Source Document No." := "No.";
              PayableCommLedgEntry."Source Document Posting Date" := "Posting Date";
              PayableCommLedgEntry.Exception := TRUE;
              PayableCommLedgEntry."Location Code" := "Location Code";

              SaveAmount(PayableCommLedgEntry);
            END;

          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE GetSalesCrMemoHeaderExcp@1000000008(MfrRepCommExcp@1000000004 : Record 51701);
    VAR
      SalesCrMemoHeader@1000000003 : Record 114;
      PayableCommLedgEntry@1000000002 : Record 51706;
      CommAmount@1000000001 : Decimal;
      Type@1000000000 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
    BEGIN
      Type := Type::"Credit Memo";

      WITH SalesCrMemoHeader DO BEGIN
        RESET;
        SETRANGE("Mfr. Rep. Code",MfrRepCommExcp."Mfr. Rep. Code");
        SETRANGE("Posting Date",StartingDate,EndingDate);
        SETRANGE("Shortcut Dimension 5 Code",MfrRepCommExcp."Shortcut Dimension 5 Code");
        IF MfrRepCommExcp."Customer No." <> '' THEN
          SETRANGE("Sell-to Customer No.",MfrRepCommExcp."Customer No.");
        IF FINDSET THEN
          REPEAT
            CALCFIELDS("Item Amount");
            CALCFIELDS("G/L Comm. Payable Amount");

            CommAmount := (("Item Amount" + "G/L Comm. Payable Amount") * MfrRepCommExcp."Pay-to Commission %") / 100;

            IF CommAmount <> 0 THEN BEGIN
              InitPayableCommLedgEntry(PayableCommLedgEntry);

              PayableCommLedgEntry."Mfr. Rep. Code" := MfrRepCommExcp."Pay-to Mfr. Rep. Code";
              PayableCommLedgEntry.Amount := -CommAmount;
              PayableCommLedgEntry."Base Amount" := -("Item Amount" + "G/L Comm. Payable Amount");
              PayableCommLedgEntry."Commission %" := MfrRepCommExcp."Pay-to Commission %";
              PayableCommLedgEntry."Reason Type" := PayableCommLedgEntry."Reason Type"::"Credit Memo";
              PayableCommLedgEntry."Cust. Ledg. Entry No." := GetCustLedgEntryNo(Type,"No.","Posting Date");
              PayableCommLedgEntry."Source Document Type" := PayableCommLedgEntry."Source Document Type"::"Credit Memo";
              PayableCommLedgEntry."Source Document No." := "No.";
              PayableCommLedgEntry."Source Document Posting Date" := "Posting Date";
              PayableCommLedgEntry.Exception := TRUE;
              PayableCommLedgEntry."Location Code" := "Location Code";

              SaveAmount(PayableCommLedgEntry);
            END;

          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE GetCustLedgEntriesExcp@1000000007(MfrRepCommExcp@1000000002 : Record 51701;PmtDisc@1000000000 : Boolean;PastDue@1001 : Boolean);
    VAR
      CustLedgEntry2@1000000005 : Record 21;
      PayableCommLedgEntry@1000000001 : Record 51706;
      SalesInvHeader@1000000003 : Record 112;
      Type@1000000004 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
    BEGIN
      CustLedgEntry.RESET;
      CustLedgEntry.SETRANGE("Shortcut Dimension 5 Code",MfrRepCommExcp."Shortcut Dimension 5 Code");

      IF PastDue THEN BEGIN
        CustLedgEntry.SETRANGE("Mfr. Rep. Code",MfrRepCommExcp."Mfr. Rep. Code");
        CustLedgEntry.SETRANGE(Open,TRUE);
        CustLedgEntry.SETRANGE(Positive,TRUE);
        CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::Invoice);
        CustLedgEntry.SETFILTER("Due Date",'<%1',CALCDATE(CommSetup."Invoice Past Terms By Days",WORKDATE));
      END;

      IF PmtDisc THEN BEGIN
        CustLedgEntry.SETRANGE("Posting Date",StartingDate,EndingDate);
        CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::Payment);
        CustLedgEntry.SETRANGE("Applies-to Doc. Type",CustLedgEntry."Applies-to Doc. Type"::Invoice);
      END;

      IF CustLedgEntry.FINDSET THEN
        REPEAT
          //InitPayableCommLedgEntry(PayableCommLedgEntry);

          PayableCommLedgEntry."Mfr. Rep. Code" := MfrRepCommExcp."Pay-to Mfr. Rep. Code";
          PayableCommLedgEntry.Exception := TRUE;

          IF PastDue AND SalesInvHeader.GET(CustLedgEntry."Document No.") THEN BEGIN
            CustLedgEntry.CALCFIELDS("Remaining Amount");
            InitPayableCommLedgEntry(PayableCommLedgEntry);
            PayableCommLedgEntry.Amount := -(CustLedgEntry."Remaining Amount" * MfrRepCommExcp."Pay-to Commission %") / 100;
            PayableCommLedgEntry."Base Amount" := -CustLedgEntry."Remaining Amount";
            PayableCommLedgEntry."Commission %" := MfrRepCommExcp."Pay-to Commission %";
            PayableCommLedgEntry."Reason Type" := PayableCommLedgEntry."Reason Type"::"Invoice Past Terms";
            PayableCommLedgEntry."Cust. Ledg. Entry No." := CustLedgEntry."Entry No.";
            PayableCommLedgEntry."Source Document Type" := CustLedgEntry."Document Type";
            PayableCommLedgEntry."Source Document No." := CustLedgEntry."Document No.";
            PayableCommLedgEntry."Source Document Posting Date" := CustLedgEntry."Posting Date";
            IF NOT
              CheckCommPaid(
                PayableCommLedgEntry."Source Document Type",
                SalesInvHeader."No.",
                SalesInvHeader."Posting Date",
                PayableCommLedgEntry."Reason Type") AND
              (PayableCommLedgEntry.Amount <> 0)
            THEN
              SaveAmount(PayableCommLedgEntry);
          END;

          IF PmtDisc AND
             SalesInvHeader.GET(CustLedgEntry."Applies-to Doc. No.") AND
             (SalesInvHeader."Mfr. Rep. Code" = MfrRepCommExcp."Mfr. Rep. Code")
          THEN BEGIN
            CustLedgEntry2.RESET;
            CustLedgEntry2.SETRANGE("Document Type",CustLedgEntry2."Document Type"::Invoice);
            CustLedgEntry2.SETRANGE("Document No.",CustLedgEntry."Applies-to Doc. No.");
            CustLedgEntry2.SETFILTER("Pmt. Disc. Given (LCY)",'<>%1',0);
            IF CustLedgEntry2.FINDFIRST THEN BEGIN
              InitPayableCommLedgEntry(PayableCommLedgEntry);
              PayableCommLedgEntry.Amount := -(CustLedgEntry2."Pmt. Disc. Given (LCY)" * MfrRepCommExcp."Pay-to Commission %") / 100;
              PayableCommLedgEntry."Base Amount" := -CustLedgEntry2."Pmt. Disc. Given (LCY)";
              PayableCommLedgEntry."Commission %" := MfrRepCommExcp."Pay-to Commission %";
              PayableCommLedgEntry."Reason Type" := PayableCommLedgEntry."Reason Type"::"Payment Discount";
              PayableCommLedgEntry."Cust. Ledg. Entry No." := CustLedgEntry2."Entry No.";
              PayableCommLedgEntry."Source Document Type" := CustLedgEntry2."Document Type";
              PayableCommLedgEntry."Source Document No." := CustLedgEntry2."Document No.";
              PayableCommLedgEntry."Source Document Posting Date" := CustLedgEntry2."Posting Date";
              IF NOT (SalesInvHeader."Location Code" IN ['1','25','30']) AND (PayableCommLedgEntry.Amount <> 0) THEN
                IF NOT
                  CheckCommPaid(
                    PayableCommLedgEntry."Source Document Type",
                    SalesInvHeader."No.",
                    SalesInvHeader."Posting Date",
                    PayableCommLedgEntry."Reason Type")
                THEN
                  SaveAmount(PayableCommLedgEntry);
            END;
          END;
        UNTIL CustLedgEntry.NEXT = 0;
    END;

    BEGIN
    {
      2015-05-11 TPZ92 TAKHMETO
        Report has been created
      2017-10-12 TPZ2029 EBAGIM
        Function CheckAlreadyExists Uncommnet
      2017-10-12 TPZ2032 EBAGIM
        Function CheckException modified to include Division filter
      2017-10-23 TPZ2045 EBAGIM
       Change bill-to to Sell-to for MFR Rep statments
      2017-10-23 TPZ2045 EBAGIM
        Change bill-to to Sell-to for MFR Rep statments
      2019-07-10 TPZ2623 UCHOUHAN
        Add division filter in Exception.
      2021-01-29 TPZ3037 UCHOUHAN
        Added code to remove duplicate entry for exception in invoices.
    }
    END.
  }
  RDLDATA
  {
  }
}

