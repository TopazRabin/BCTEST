OBJECT Report 51002 Import Sales Price
{
  OBJECT-PROPERTIES
  {
    Date=07/01/20;
    Time=12:00:00 AM;
    Modified=Yes;
    Version List=TPZ000.00.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Import Sales Price;
    ProcessingOnly=Yes;
    OnPostReport=BEGIN
                   ExcelBuff.LOCKTABLE;
                   ExcelBuff.OpenBook(ServerFileName,SheetName);
                   ExcelBuff.ReadSheet;

                   AnalyzeData;

                   ExcelBuff.DELETEALL;
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnQueryClosePage=VAR
                         FileMgt@1000000000 : Codeunit 419;
                       BEGIN
                         IF CloseAction = ACTION::OK THEN BEGIN
                           ServerFileName := FileMgt.UploadFile(Text51000,ExcelExtensionTok);
                           IF ServerFileName = '' THEN
                             EXIT(FALSE);

                           SheetName := ExcelBuff.SelectSheetsName(ServerFileName);
                           IF SheetName = '' THEN
                             EXIT(FALSE);
                         END;
                       END;

    }
    CONTROLS
    {
      { 1000000001;;Container;
                  ContainerType=ContentArea }

      { 1000000002;1;Group  ;
                  CaptionML=ENU=Options;
                  GroupType=Group }

      { 1000000000;2;Field  ;
                  CaptionML=ENU=Action Type;
                  SourceExpr=ActionType }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Customer@1000000009 : Record 18;
      Item@1000000008 : Record 27;
      SalesPrice@1000000014 : Record 7002;
      SalesPrice2@1000000012 : Record 7002;
      ExcelBuff@1000000000 : Record 370;
      ActionType@1000000015 : 'Import,Delete';
      Window@1000000006 : Dialog;
      ServerFileName@1000000002 : Text;
      SheetName@1000000001 : Text[250];
      Text51000@1000000004 : TextConst 'ENU=Import Excel File;ESM=Importar fich. Excel;FRC=Importer fichier Excel;ENC=Import Excel File';
      Text51001@1000000005 : TextConst 'ENU=Importing Data...\\;ESM=Analizar Datos...\\;FRC=Analyse des donn‚es...\\;ENC=Analysing Data...\\';
      ExcelExtensionTok@1000000003 : TextConst '@@@={Locked};ENU=.xlsx;ESM=.xlsx;FRC=.xlsx;ENC=.xlsx';
      RecNo@1000000007 : Integer;
      TotalRecNo@1000000010 : Integer;
      RowNo@1000000011 : Integer;

    LOCAL PROCEDURE AnalyzeData@2();
    VAR
      ItemFound@1000000005 : Boolean;
      CustomerFound@1000000008 : Boolean;
      CustomerNo@1000000006 : Code[20];
      ItemNo@1000000000 : Code[20];
      UOMCode@1000000007 : Code[10];
      UnitPrice@1000000002 : Decimal;
      StartingDate@1000000003 : Date;
    BEGIN
      Window.OPEN(Text51000 + '@1@@@@@@@@@@@@@@@@@@@@@@@@@\');
      TotalRecNo := ExcelBuff.COUNT;

      IF ExcelBuff.FIND('-') THEN
        REPEAT
          RecNo := RecNo + 1;
          Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));

          IF ExcelBuff."Row No." <> RowNo THEN BEGIN
            RowNo := ExcelBuff."Row No.";
            CustomerFound := FALSE;
            ItemFound := FALSE;
          END;

          IF ExcelBuff."Row No." <> 1 THEN
            CASE ExcelBuff."Column No." OF
              1:
                BEGIN
                  CustomerNo := DELCHR(ExcelBuff."Cell Value as Text",'=',',');
                  CustomerFound := Customer.GET(CustomerNo);
                  IF CustomerFound THEN BEGIN
                    SalesPrice.INIT;
                    SalesPrice.VALIDATE("Sales Type",SalesPrice."Sales Type"::Customer);
                    SalesPrice.VALIDATE("Sales Code",CustomerNo);
                  END;
                END;
              2:
                BEGIN
                  ItemNo := DELCHR(ExcelBuff."Cell Value as Text",'=',',');
                  ItemFound := Item.GET(ItemNo);
                  IF ItemFound THEN
                    SalesPrice.VALIDATE("Item No.",ItemNo);
                END;
              3:
                BEGIN
                  UOMCode := DELCHR(ExcelBuff."Cell Value as Text",'=',',');
                  IF (ExcelBuff."Row No." = RowNo) AND
                     (UOMCode <> '')
                  THEN
                    SalesPrice.VALIDATE("Unit of Measure Code",UOMCode);
                END;
              4:
                BEGIN
                  EVALUATE(UnitPrice,DELCHR(ExcelBuff."Cell Value as Text",'=',','));
                  IF (ExcelBuff."Row No." = RowNo) AND
                     (UnitPrice <> 0)
                  THEN
                    SalesPrice.VALIDATE("Unit Price",UnitPrice);
                END;
              5:
                BEGIN
                  EVALUATE(StartingDate,ExcelBuff."Cell Value as Text");
                  IF (ExcelBuff."Row No." = RowNo) AND
                     (StartingDate <> 0D)
                  THEN BEGIN
                    SalesPrice.VALIDATE("Starting Date",StartingDate);
                    CASE ActionType OF
                      ActionType::Import:
                        BEGIN
                          SalesPrice.INSERT(TRUE);
                          UpdateEndDate;
                        END;
                      ActionType::Delete:
                        DeleteSalesPrice;
                    END;
                  END;
                END;
            END;
        UNTIL ExcelBuff.NEXT = 0;
      Window.CLOSE;
    END;

    PROCEDURE UpdateEndDate@1000000000();
    BEGIN
      SalesPrice2.RESET;
      SalesPrice2.SETRANGE("Sales Type",SalesPrice2."Sales Type"::Customer);
      SalesPrice2.SETRANGE("Sales Code",SalesPrice."Sales Code");
      SalesPrice2.SETRANGE("Item No.",SalesPrice."Item No.");
      SalesPrice2.SETRANGE("Unit of Measure Code",SalesPrice."Unit of Measure Code");
      SalesPrice2.SETFILTER("Starting Date",'<>%1',SalesPrice."Starting Date");
      CASE ActionType OF
        ActionType::Import:
          BEGIN
            SalesPrice2.SETRANGE("Ending Date",0D);
            IF SalesPrice2.FINDLAST THEN BEGIN
              SalesPrice2."Ending Date" := CALCDATE('-1D',SalesPrice."Starting Date");
              SalesPrice2.MODIFY;
            END;
          END;
        ActionType::Delete:
          BEGIN
            SalesPrice2.SETFILTER("Ending Date",'<>%1',0D);
            IF SalesPrice2.FINDLAST THEN BEGIN
              SalesPrice2."Ending Date" := 0D;
              SalesPrice2.MODIFY;
            END;
          END;
      END;
    END;

    PROCEDURE DeleteSalesPrice@1000000002();
    BEGIN
      SalesPrice2.RESET;
      SalesPrice2.SETRANGE("Sales Type",SalesPrice2."Sales Type"::Customer);
      SalesPrice2.SETRANGE("Sales Code",SalesPrice."Sales Code");
      SalesPrice2.SETRANGE("Item No.",SalesPrice."Item No.");
      SalesPrice2.SETRANGE("Unit of Measure Code",SalesPrice."Unit of Measure Code");
      SalesPrice2.SETRANGE("Unit Price",SalesPrice."Unit Price");
      SalesPrice2.SETRANGE("Starting Date",SalesPrice."Starting Date");
      SalesPrice2.SETRANGE("Ending Date",0D);
      IF SalesPrice2.FINDFIRST THEN
        SalesPrice2.DELETE;

      UpdateEndDate;
    END;

    BEGIN
    {
      2015-07-06 TPZ578 TAKHIR
        Report has been created
    }
    END.
  }
  RDLDATA
  {
  }
}

