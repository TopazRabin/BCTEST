OBJECT Report 23044524 LPM Consume License Plate
{
  OBJECT-PROPERTIES
  {
    Date=10/03/19;
    Time=[ 8:57:39 AM];
    Version List=LPM2.4.7684.0;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Consume License Plate;
               ESM=Consumir matr¡culas;
               FRC=Consommer la plaque d'immatriculation;
               ENC=Consume License Plate];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   iNextLineNumber := 0;
                   CLEAR(codTemplateName);
                   CLEAR(codBatchName);
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;                  ;
               DataItemTable=Table23044505;
               OnPreDataItem=VAR
                               ltcBatchNameMissing@1000000000 : TextConst 'ENU=The Journal Batch Name must be specified.;FRC=Le Journal nom de lot doit ˆtre sp‚cifi‚.;ENC=The Journal Batch Name must be specified.';
                             BEGIN
                               IF( codBatchName = '' ) THEN
                                 ERROR(ltcBatchNameMissing);

                               recItemJournalLine.LOCKTABLE;
                             END;

               ReqFilterFields=No.,Shipment Tracking Number }

    { 1000000001;1;DataItem;                 ;
               DataItemTable=Table5405;
               OnAfterGetRecord=BEGIN
                                  copyLine();
                                END;

               ReqFilterFields=Status,No.,Location Code }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      recItemJournalLine@1000000002 : Record 83;
      iNextLineNumber@1000000001 : Integer;
      cuCreateResEntry@1000000000 : Codeunit 99000830;
      tcItemNotInComponent@1000000003 : TextConst 'ENU=The item %1 in the license plate %2  is not a component in the production order %3;FRC=L''article 1% dans la plaque d''immatriculation 2%n''est pas un ‚l‚ment dans l''ordre de production 3%;ENC=The Item %1 in the license plate %2  is not a component in the production order %3';
      tcItemQuantityExceeded@1000000004 : TextConst 'ENU=The item %1 in the license plate %2 quantity %3 is more than the remaining quantity to be consumed %4 on production order %5 components.  Proceed with consuming %3?;FRC=L''article %1 dans la plaque d''immatriculation %2  quantit‚ %3 est plus de %4 restant d‚fini dans l''ordonnance de production %5.  Continue avec %3?';
      codTemplateName@1000000006 : Code[10];
      codBatchName@1000000005 : Code[10];
      tcConsumptionCanceled@1000000007 : TextConst 'ENU=The consumption action has been interrupted to respect the warning.;FRC=L''action de la consommation a ‚t‚ interrompue … respecter l''avertissement.;ENC=The consumption action has been interrupted to respect the warning.';
      cuLPCommon@1000000008 : Codeunit 23044541;

    LOCAL PROCEDURE getNextLineNumber@1000000005() : Integer;
    VAR
      lrecItemJournalLineTemp@1000000000 : Record 83;
    BEGIN
      IF( iNextLineNumber = 0 ) THEN BEGIN
        lrecItemJournalLineTemp.SETRANGE("Journal Template Name", codTemplateName);
        lrecItemJournalLineTemp.SETRANGE("Journal Batch Name", codBatchName);
        IF( lrecItemJournalLineTemp.FINDLAST ) THEN BEGIN
          iNextLineNumber := lrecItemJournalLineTemp."Line No." + 10000;
        END;
      END;

      iNextLineNumber := iNextLineNumber + 10000;
      EXIT(iNextLineNumber);
    END;

    PROCEDURE createItemTrackingLine@1000000000(VAR precItemJnlLine@1000000000 : Record 83;psSerialNumber@1000000002 : Text;psLotNumber@1000000003 : Text);
    VAR
      lrecItem@1000000001 : Record 27;
      lrecItemTrackingCode@1000000004 : Record 6502;
    BEGIN
      psSerialNumber := UPPERCASE(psSerialNumber);
      psLotNumber := UPPERCASE(psLotNumber);

      IF( (psSerialNumber = '') AND (psLotNumber = '') ) THEN
        EXIT;

      //
      // Create the reservation
      //

      cuCreateResEntry.CreateReservEntryFor(
        DATABASE::"Item Journal Line",              // ForType (option)
        5,                                          // ForSubType (integer)
        precItemJnlLine."Journal Template Name",    // ForID (code)
        precItemJnlLine."Journal Batch Name",       // ForBatchName (code)
        0,                                          // ForProdOrderLine (integer)
        precItemJnlLine."Line No.",                 // ForRefNo (integer)
        precItemJnlLine."Qty. per Unit of Measure", // ForQtyPerUOM (integer)
        precItemJnlLine.Quantity * precItemJnlLine."Qty. per Unit of Measure", // Quantity (decimal)
        //0,                              // QuantityBase (decimal)      //
        precItemJnlLine.Quantity,                                      // Passed in quantity, replace 0
        psSerialNumber,                           // ForSerialNo (Code)
        psLotNumber                               // ForLotNo (Code)
      );



      cuCreateResEntry.CreateEntry(
        precItemJnlLine."Item No.",         // ItemNo (code)
        precItemJnlLine."Variant Code",     // VariantCode (code)
        precItemJnlLine."Location Code",    // LocationCode (code)
        precItemJnlLine.Description,        // Description (text)
        TODAY,              // ExpectedReceiptDate (Date)
        0D,                 // ShipmentDate (Date)
        0,                  // TransferredFromEntryNo (integer)
        3                   // Status (0==Reservation,1==Tracking,2==Surplus,3==Prospect)
      );


      lrecItem.GET( precItemJnlLine."Item No." );
      IF ( lrecItem."Item Tracking Code" <> '' ) THEN BEGIN
        IF ( lrecItemTrackingCode.GET(lrecItem."Item Tracking Code") ) THEN BEGIN
          IF ( lrecItemTrackingCode."Lot Warehouse Tracking" ) THEN BEGIN
            precItemJnlLine."Lot No." := psLotNumber; // DO NOT validate, triggers bad logic
            precItemJnlLine.MODIFY(FALSE);
          END; // if it's lot warehouse tracked
          IF ( lrecItemTrackingCode."SN Warehouse Tracking" ) THEN BEGIN
            precItemJnlLine."Serial No." := psSerialNumber;
            precItemJnlLine.MODIFY(FALSE); // DO NOT validate, triggers bad logic
          END; // if it's lot warehouse tracked

        END; // if we have an item tracking code
      END; // if there is no item tracking code
    END;

    PROCEDURE copyLine@1000000004();
    VAR
      lrecProdOrderComponent@1000000000 : Record 5407;
      lrecLicensePlateLine@1000000001 : Record 23044506;
      ldConsumptionQuantity@1000000002 : Decimal;
      lrecItem@1000000003 : Record 27;
      lrecItemTrackingCode@1000000004 : Record 6502;
    BEGIN

      lrecLicensePlateLine.SETRANGE("License Plate No.", "IWX License Plate Header"."No.");
      IF (lrecLicensePlateLine.FIND('-')) THEN BEGIN
        REPEAT
          // make sure the itme in the license plate line is a component in the production order
          lrecProdOrderComponent.SETRANGE("Item No.", lrecLicensePlateLine."Item No.");
          lrecProdOrderComponent.SETRANGE("Variant Code", lrecLicensePlateLine."Variant Code");
          lrecProdOrderComponent.SETRANGE("Location Code", "Production Order"."Location Code");
          lrecProdOrderComponent.SETRANGE(Status, "Production Order".Status);
          lrecProdOrderComponent.SETRANGE("Prod. Order No.", "Production Order"."No.");
          IF (NOT lrecProdOrderComponent.FIND('-'))  THEN
             ERROR(tcItemNotInComponent, lrecLicensePlateLine."Item No.", lrecLicensePlateLine."License Plate No.", "Production Order"."No.");
          ldConsumptionQuantity := lrecLicensePlateLine.Quantity;
          // Update from call with Francois April/8th/2014 to use the remaining qty. (base)
          // instead of expected quantity.
          // IF (lrecLicensePlateLine.Quantity > lrecProdOrderComponent."Expected Quantity") THEN BEGIN
          IF (lrecLicensePlateLine.Quantity > lrecProdOrderComponent."Remaining Qty. (Base)") THEN BEGIN
            IF NOT CONFIRM(
                 tcItemQuantityExceeded,
                 FALSE,
                 lrecLicensePlateLine."Item No.",
                 lrecLicensePlateLine."License Plate No.",
                 lrecLicensePlateLine.Quantity,
                 // Changed message from "quantity x is more than y in the production order"
                 // to ...quantity x is more than the remaining quantity to be consumed y
                 // And changed expected quantity to remaining qty. (base).
                 // lrecProdOrderComponent."Expected Quantity",
                 lrecProdOrderComponent."Remaining Qty. (Base)",
                 "Production Order"."No.")
            THEN
              ERROR(tcConsumptionCanceled);

            //
            // The quantity to consume should be the quantity on the license plate line,
            // not the quantity on the production order line.
            // ldConsumptionQuantity := lrecProdOrderComponent."Expected Quantity";
            ldConsumptionQuantity := lrecLicensePlateLine.Quantity;
          END;

          CLEAR(recItemJournalLine);
          recItemJournalLine.INIT;
          recItemJournalLine.VALIDATE("Journal Template Name", codTemplateName);
          recItemJournalLine.VALIDATE("Journal Batch Name",codBatchName);
          recItemJournalLine.VALIDATE("Posting Date", TODAY);
          recItemJournalLine.VALIDATE("Entry Type", recItemJournalLine."Entry Type"::Consumption);
          recItemJournalLine.VALIDATE("Order No.", "Production Order"."No.");
          recItemJournalLine.VALIDATE("Document No.", "Production Order"."No.");
          recItemJournalLine.VALIDATE("Item No.", lrecLicensePlateLine."Item No.");
          recItemJournalLine.VALIDATE("Variant Code", lrecLicensePlateLine."Variant Code");
          recItemJournalLine.VALIDATE("Location Code", "Production Order"."Location Code");
          recItemJournalLine.VALIDATE(Quantity, ldConsumptionQuantity);


          cuLPCommon.modifyWHICompatibilityFields(recItemJournalLine,
                                                   lrecLicensePlateLine."Serial No.",
                                                   lrecLicensePlateLine."Lot No.",
                                                   lrecLicensePlateLine.Barcode, FALSE);

          recItemJournalLine.VALIDATE("Line No.", getNextLineNumber());

          // After feedback from Francois, changed bin to be that from the license plate header
          // recItemJournalLine.VALIDATE("Bin Code", "Production Order"."Bin Code");
          recItemJournalLine.VALIDATE("Bin Code", "IWX License Plate Header"."Bin Code");

          recItemJournalLine.VALIDATE("Qty. per Unit of Measure", lrecProdOrderComponent."Qty. per Unit of Measure");
          recItemJournalLine.VALIDATE("LPM License Plate No.", lrecLicensePlateLine."License Plate No.");

          // Update from Francois April/8/2014 phone call.
          // if license plate is fully consumed *or*
          // if the item journal line ends up being 0 then do not insert.
          IF ( recItemJournalLine.Quantity <> 0 ) AND
            ( lrecLicensePlateLine."Consumption Status" <> lrecLicensePlateLine."Consumption Status"::"Fully Consumed" ) THEN BEGIN
            recItemJournalLine.INSERT(TRUE);

            createItemTrackingLine(
              recItemJournalLine,
              lrecLicensePlateLine."Serial No.",
              lrecLicensePlateLine."Lot No."
            );
          END;
        UNTIL(lrecLicensePlateLine.NEXT=0)
      END;
    END;

    PROCEDURE setTemplateBatchName@1000000001(pcodTemplateName@1000000001 : Code[10];pcodBatchName@1000000000 : Code[10]);
    BEGIN
      codTemplateName := pcodTemplateName;
      codBatchName := pcodBatchName;
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
    }
    END.
  }
  RDLDATA
  {
  }
}

