OBJECT Report 14000584 Create Item Usage Review
{
  OBJECT-PROPERTIES
  {
    Date=11/01/20;
    Time=12:00:00 PM;
    Version List=UBP3.03;
  }
  PROPERTIES
  {
    CaptionML=ENU=Create Item Usage Review;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF PeriodsToCompare <= 0 THEN
                    PeriodsToCompare := 1;
                END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table14097469;
               DataItemTableView=SORTING(Batch Type,Batch Name);
               OnPreDataItem=BEGIN
                               // retrieve the batch and name
                               BatchType := "Item Usage Review Batch".GETFILTER("Batch Type");
                               BatchName := "Item Usage Review Batch".GETFILTER("Batch Name");
                               CurrReport.BREAK;
                             END;

               OnPostDataItem=BEGIN
                                IF HistoryPeriods = 0 THEN
                                  ERROR(Text008);

                                IF NOT ItemUsageReviewBatch.GET(BatchType, BatchName) THEN
                                  ERROR(STRSUBSTNO(Text015,ItemUsageReviewBatch.FIELDCAPTION("Batch Type"), BatchType,
                                    ItemUsageReviewBatch.FIELDCAPTION("Batch Name"),BatchName));

                                ItemUsageReviewBatch."Total Columns" := HistoryPeriods + ForecastPeriods;
                                ItemUsageReviewBatch.MODIFY(FALSE);

                                AdvForSetup.GET;

                                Location.RESET;
                                Location.SETRANGE("Enable Adv. Forecasting",TRUE);
                                Location.FINDFIRST;

                                LocInvPer.RESET;
                                LocInvPer.ASCENDING(FALSE);
                                LocInvPer.SETRANGE("Location Code",Location.Code);
                                LocInvPer.SETRANGE("Period End Closed",TRUE);
                                LocInvPer.FINDFIRST;
                                FirstFCStartDate := LocInvPer."Ending Date" + 1;
                                Period := 0;
                                REPEAT
                                  Period := Period + 1;
                                  StartingDate := LocInvPer."Starting Date";
                                UNTIL (LocInvPer.NEXT = 0) OR
                                      (Period = HistoryPeriods);

                                IF Period <> HistoryPeriods THEN
                                  ERROR(Text007,Period);

                                ForecastInventoryPeriod.RESET;
                                ForecastInventoryPeriod.SETRANGE(Type,ForecastInventoryPeriod.Type::" ");
                                ForecastInventoryPeriod.SETRANGE("Starting Date",StartingDate);
                                IF NOT ForecastInventoryPeriod.FIND('-') THEN
                                  ERROR(Text003,StartingDate);

                                ItemUsageReview.RESET;
                                ItemUsageReview.SETCURRENTKEY(Changed);
                                ItemUsageReview.SETRANGE("Batch Type", BatchType);
                                ItemUsageReview.SETRANGE("Batch Name", BatchName);
                                ItemUsageReview.SETRANGE(Changed,TRUE);
                                ChangedCount := ItemUsageReview.COUNT;
                                IF ChangedCount > 0 THEN
                                  IF NOT CONFIRM(Text006,FALSE,ChangedCount) THEN
                                    ERROR(Text005);

                                ItemUsageReview.RESET;
                                ItemUsageReview.SETRANGE("Batch Type", BatchType);
                                ItemUsageReview.SETRANGE("Batch Name", BatchName);
                                ItemUsageReview.DELETEALL;

                                Period := 0;
                                ForecastInventoryPeriod.RESET;
                                ForecastInventoryPeriod.SETRANGE(Type,ForecastInventoryPeriod.Type::" ");
                                ForecastInventoryPeriod.SETFILTER("Starting Date",'%1..',StartingDate);
                                IF ForecastInventoryPeriod.FINDSET THEN
                                  REPEAT
                                    Period := Period + 1;
                                    StartngDateArray[Period] := ForecastInventoryPeriod."Starting Date";
                                  UNTIL (ForecastInventoryPeriod.NEXT = 0) OR
                                        (Period = 52);
                              END;
                               }

    { 4564;    ;DataItem;                    ;
               DataItemTable=Table14000555;
               PrintOnlyIfDetail=Yes;
               OnPreDataItem=BEGIN
                               IF GUIALLOWED THEN
                                 ProgWindow.OPEN(
                                   PADSTR(Text001,15) + '#1########\' +
                                   PADSTR(Text002,15) + '#2####################################');
                             END;

               OnAfterGetRecord=BEGIN
                                  IF "Procurement Unit"."Location Code" <> Location.Code THEN
                                    Location.GET("Procurement Unit"."Location Code");

                                  IF NOT Location."Enable Adv. Forecasting" THEN
                                    CurrReport.SKIP;
                                END;

               OnPostDataItem=BEGIN
                                ProgWindow.CLOSE;
                              END;

               ReqFilterFields=Replenishment Source Type,Location Code,Item No.,Item Class Description,Ranking Code,Periods With Sales }

    { 8129;1   ;DataItem;                    ;
               DataItemTable=Table27;
               PrintOnlyIfDetail=Yes;
               OnAfterGetRecord=BEGIN
                                  IF GUIALLOWED THEN BEGIN
                                    ProgWindow.UPDATE(1,"Procurement Unit"."Location Code");
                                    ProgWindow.UPDATE(2,"Procurement Unit"."Item No.");
                                  END;
                                END;

               DataItemLink=No.=FIELD(Item No.) }

    { 2352;2   ;DataItem;                    ;
               DataItemTable=Table14000557;
               DataItemTableView=SORTING(Location Code,Item No.,Variant Code,Starting Date,Ending Date)
                                 ORDER(Ascending);
               OnPreDataItem=BEGIN
                               "Item Usage".SETRANGE("Location Code","Procurement Unit"."Location Code");
                               "Item Usage".SETRANGE("Item No.","Procurement Unit"."Item No.");
                               "Item Usage".SETRANGE("Variant Code","Procurement Unit"."Variant Code");
                               "Item Usage".SETFILTER("Source No.",'%1','');
                               "Item Usage".SETFILTER("Starting Date",'%1..%2',StartngDateArray[1],StartngDateArray[HistoryPeriods]);
                               Period := 0;
                               ItemUsageFound := FALSE;
                             END;

               OnAfterGetRecord=BEGIN
                                  ItemUsageFound := TRUE;

                                  IF Period = 0 THEN BEGIN
                                    ItemUsageReview.INIT;
                                    ItemUsageReview."Location Code" := "Procurement Unit"."Location Code";
                                    ItemUsageReview."Item No." := "Procurement Unit"."Item No.";
                                    ItemUsageReview."Variant Code" := "Procurement Unit"."Variant Code";
                                    ItemUsageReview.Type := ItemUsageReview.Type::"Usage Adjust";
                                    ItemUsageReview."Starting Date" := StartingDate;
                                    ItemUsageReview."Batch Type" := BatchType;
                                    ItemUsageReview."Batch Name" := BatchName;
                                    ItemUsageReview."Replenishment Source Code" := "Procurement Unit"."Replenishment Source Code";
                                    ItemUsageReview."Unit Cost" := Item."Unit Cost";
                                    ItemUsageReview."Nonstock Unit" := "Procurement Unit"."Nonstock Unit";

                                    ItemUsageReview."Item Class Description" :=
                                      "Procurement Unit"."Item Class Description";
                                    ItemUsageReview."Ranking Code" := "Procurement Unit"."Ranking Code";
                                    ItemUsageReview."Periods With Sales" := "Procurement Unit"."Periods With Sales";
                                    ItemUsageReview."Stocking Rule" := "Procurement Unit"."Stocking Rule Code";
                                    IF "Procurement Unit"."Sporadic Rule" <> '' THEN
                                      ItemUsageReview."Sporadic Rule" := "Procurement Unit"."Sporadic Rule"
                                    ELSE
                                      ItemUsageReview."Sporadic Rule" := AdvForSetup."Def. Sporadic Rule";
                                    ItemUsageReview."First Stocked Date" := "Procurement Unit"."First Stocked Date";
                                    ItemUsageReview."Reforecast Item" := "Procurement Unit"."Reforecast Item";

                                    // check hub/spoke
                                    IF "Procurement Unit"."Replenishment Source Type" =
                                      "Procurement Unit"."Replenishment Source Type"::Location
                                    THEN
                                      ItemUsageReview."Repl. Path" := ItemUsageReview."Repl. Path"::Spoke
                                    ELSE BEGIN
                                      ProcUnit.RESET;
                                      ProcUnit.SETCURRENTKEY("Item No.","Variant Code","Location Code");
                                      ProcUnit.SETRANGE("Item No.","Procurement Unit"."Item No.");
                                      ProcUnit.SETRANGE("Variant Code","Procurement Unit"."Variant Code");
                                      ProcUnit.SETRANGE(
                                        "Replenishment Source Type",ProcUnit."Replenishment Source Type"::Location);
                                      ProcUnit.SETRANGE("Replenishment Source Code","Procurement Unit"."Location Code");
                                      IF NOT ProcUnit.ISEMPTY THEN
                                        ItemUsageReview."Repl. Path" := ItemUsageReview."Repl. Path"::Hub;
                                    END;
                                    ItemUsageReview."Replenishment Source Type" :=
                                      FORMAT("Procurement Unit"."Replenishment Source Type");

                                    ItemUsageReview."History Periods" := HistoryPeriods;
                                    ItemUsageReview."Forecast Periods" := ForecastPeriods;
                                  END;

                                  REPEAT
                                    Period := Period + 1;
                                  UNTIL (StartngDateArray[Period] = "Item Usage"."Starting Date") OR
                                        ("Item Usage"."Starting Date" > WORKDATE);

                                  IF "Item Usage"."Ending Date" <= WORKDATE THEN BEGIN
                                    ItemUsageReview.SetField(Period, "Item Usage"."Net Period End Usage");
                                    //ItemUsageArray[Period] := "Item Usage"."Period End Adjusted Usage";
                                    ItemUsageArray[Period] := "Item Usage"."Net Period End Usage";
                                    ForecastUsageArray[Period + 1] := "Item Usage"."Re-For. Usage";
                                  END;
                                END;

               OnPostDataItem=VAR
                                HighLow@1240020000 : Text[4];
                                HighTxt@1240020002 : TextConst 'ENU=High';
                                LowTxt@1240020001 : TextConst 'ENU=Low';
                              BEGIN
                                Forecastable := FALSE;

                                IF ItemUsageFound THEN BEGIN

                                  IF "Item Usage".Status = "Item Usage".Status::Reoccuring THEN BEGIN
                                    CalcSampleStandardDeviation(0,ItemUsageReview);
                                    ItemUsageReview."Re-For. Formula" := "Item Usage"."Re-For. Formula";
                                    ItemUsageReview."Forecast Error %" := "Item Usage"."Re-For. Median Error %";
                                    IF (Formula.Code <> "Item Usage"."Re-For. Formula") THEN BEGIN
                                      IF ("Item Usage"."Re-For. Formula" <> '') THEN
                                        Formula.GET("Item Usage"."Re-For. Formula")
                                      ELSE BEGIN
                                        Formula.INIT;
                                        Formula.Code := '';
                                      END;
                                      ItemUsageReview."Seasonal Formula" := Formula."Seasonal Formula";
                                      ItemUsageReview."Usage Formula Status" := "Item Usage".Status;
                                    END;
                                  END ELSE
                                    CalcSampleStandardDeviation(1,ItemUsageReview);


                                  ItemUsageReview."Sporadic Target Stock Level" := "Item Usage"."Sporadic Target Stock Level";

                                  IF "Item Usage".Status = "Item Usage".Status::Reoccuring THEN BEGIN
                                    Forecastable := TRUE;
                                    MyPerToCompare := PeriodsToCompare;
                                    CompareItemUsage := 0;
                                    CompareForecastUsage := 0;
                                    REPEAT
                                      CompareItemUsage := CompareItemUsage + ItemUsageArray[Period];
                                      CompareForecastUsage := CompareForecastUsage + ROUND(ForecastUsageArray[Period],1.0);
                                      MyPerToCompare := MyPerToCompare - 1;
                                      Period := Period - 1;
                                    UNTIL MyPerToCompare = 0;

                                    IF CompareForecastUsage > CompareItemUsage THEN
                                      HighLow := HighTxt
                                    ELSE
                                      HighLow := LowTxt;

                                    ItemUsageReview."Forecast to Actual" := HighLow;

                                    CASE TRUE OF
                                      CompareForecastUsage = CompareItemUsage:
                                      BEGIN
                                        ComparePercent := 0;
                                        ItemUsageReview."Alert Desc." :=
                                        STRSUBSTNO(
                                          '(Usage %1 / FC %2) = %3%',CompareItemUsage,CompareForecastUsage, ComparePercent);
                                      END;
                                      (CompareForecastUsage = 0) AND (CompareItemUsage > 0):
                                      BEGIN
                                        ComparePercent := 100;
                                        ItemUsageReview."Alert Desc." :=
                                          STRSUBSTNO(
                                            '(Usage %1 / FC %2) = %3% %4',CompareItemUsage,CompareForecastUsage, ComparePercent, HighLow);
                                      END;
                                      (CompareForecastUsage > 0) AND (CompareItemUsage = 0):
                                      BEGIN
                                        ComparePercent := 100;
                                        ItemUsageReview."Alert Desc." :=
                                          STRSUBSTNO(
                                            '(Usage %1 / FC %2) = %3% %4',CompareItemUsage,CompareForecastUsage, ComparePercent, HighLow);
                                      END;
                                      ELSE BEGIN
                                        CASE ComparisonMethod OF
                                          ComparisonMethod::Standard:
                                          BEGIN
                                            IF CompareForecastUsage < CompareItemUsage THEN BEGIN
                                              ComparePercent := ROUND(ABS((CompareItemUsage - CompareForecastUsage) / CompareForecastUsage) * 100,0.1);
                                              ItemUsageReview."Alert Desc." :=
                                              STRSUBSTNO(
                                                '(Usage %1 - FC %2) / FC %2 = %3% %4',
                                                CompareItemUsage,CompareForecastUsage,ComparePercent,HighLow);
                                            END ELSE BEGIN
                                              ComparePercent := ROUND(ABS((CompareItemUsage - CompareForecastUsage) / CompareItemUsage) * 100,0.1);
                                              ItemUsageReview."Alert Desc." :=
                                              STRSUBSTNO(
                                                '(Usage %1 - FC %2) / Usage %1 = %3% %4',
                                                CompareItemUsage,CompareForecastUsage,ComparePercent,HighLow);
                                            END;
                                          END;
                                          ComparisonMethod::"Actuals Only":
                                          BEGIN
                                              ComparePercent := ROUND(ABS((CompareItemUsage - CompareForecastUsage) / CompareItemUsage) * 100,0.1);
                                              ItemUsageReview."Alert Desc." :=
                                              STRSUBSTNO(
                                                '(Usage %1 - FC %2) / Usage %1 = %3% %4',
                                                CompareItemUsage,CompareForecastUsage,ComparePercent,HighLow);
                                          END;
                                        END;
                                      END;
                                      ItemUsageReview."Usage vs Forecast Alert" := TRUE;
                                      ItemUsageReview."Usage vs Forecast Pct." := ComparePercent;
                                    END;
                                  END ELSE
                                    ItemUsageReview.Sporadic := TRUE;

                                  IF (ShowAllForecastable AND Forecastable) OR
                                     (ShowAllSporadic AND ItemUsageReview.Sporadic) OR
                                     (Forecastable AND (ComparePercent > ThresholdErrorPct))
                                  THEN BEGIN
                                    // Get Future Forecast
                                    IF ForecastPeriods > 0 THEN BEGIN
                                      CLEAR(Forecast);
                                      IF ForecastPeriods > AdvForSetup."Periods to Forecast" THEN
                                        ForecastPeriods := AdvForSetup."Periods to Forecast";
                                      Forecast.CalcForecast("Procurement Unit", ForecastPeriods,'',FALSE,FALSE);
                                      FCPeriod := HistoryPeriods;
                                      REPEAT
                                        FCPeriod := FCPeriod + 1;
                                        ItemUsageReview.SetField(
                                          FCPeriod,
                                          Forecast.GetPeriodForecastUsage(FCPeriod - HistoryPeriods) +
                                          Forecast.GetForecastAdj(FCPeriod - HistoryPeriods));
                                      UNTIL FCPeriod = HistoryPeriods + ForecastPeriods;
                                    END;

                                    ProcUnit.GET(
                                      ItemUsageReview."Location Code",ItemUsageReview."Item No.",ItemUsageReview."Variant Code");
                                    IF ProcUnit."Reforecast Item" OR ProcUnit."Change Reforecast Required" THEN BEGIN
                                      ItemUsageReview."Alert Desc." := Text009;
                                      ItemUsageReview.Reforecast := TRUE;
                                    END;
                                    ItemUsageReview."Replenishment Hierarchy" := ProcUnit."Replenishment Hierarchy";


                                    ItemUsageReview."Entry No." := 0;
                                    ItemUsageReview.INSERT(TRUE);

                                    ItemUsageReviewPrev.COPY(ItemUsageReview);
                                    ItemUsageReviewPrev."Entry No." := 0;
                                    ItemUsageReviewPrev.Type := ItemUsageReviewPrev.Type::"Usage Prev.";
                                    ItemUsageReviewPrev.INSERT;
                                  END;
                                END;
                              END;

               CalcFields=Forecast Cust. Actual Usage }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1240020001;;Container;
                  ContainerType=ContentArea }

      { 1240020002;1;Group  ;
                  CaptionML=ENU=Options;
                  GroupType=Group }

      { 1240020000;2;Field  ;
                  CaptionML=ENU=History Periods;
                  ApplicationArea=#All;
                  SourceExpr=HistoryPeriods }

      { 1240020003;2;Field  ;
                  CaptionML=ENU=Forecast Periods;
                  ApplicationArea=#All;
                  SourceExpr=ForecastPeriods }

      { 1240020004;2;Field  ;
                  CaptionML=ENU=Show All Forecastable;
                  ApplicationArea=#All;
                  SourceExpr=ShowAllForecastable;
                  OnValidate=BEGIN
                               IF ShowAllForecastable THEN
                                 ThresholdErrorPct := 0;
                             END;
                              }

      { 1240020005;2;Field  ;
                  CaptionML=ENU=Show All Sporadic;
                  ApplicationArea=#All;
                  SourceExpr=ShowAllSporadic }

      { 1240020006;2;Field  ;
                  CaptionML=ENU=Threshold Error Pct.;
                  ApplicationArea=#All;
                  SourceExpr=ThresholdErrorPct;
                  OnValidate=BEGIN
                               IF ThresholdErrorPct <> 0 THEN BEGIN
                                 ShowAllForecastable := FALSE;
                                 IF PeriodsToCompare = 0 THEN
                                   PeriodsToCompare := 2;
                               END;
                             END;
                              }

      { 1240020007;2;Field  ;
                  CaptionML=ENU=Periods To Compare;
                  ApplicationArea=#All;
                  SourceExpr=PeriodsToCompare }

      { 1240020008;2;Field  ;
                  CaptionML=ENU=Comparison Method;
                  SourceExpr=ComparisonMethod }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      AdvForSetup@1240020012 : Record 14002651;
      ForecastInventoryPeriod@1240020004 : Record 14000552;
      ItemUsageReview@1240020001 : Record 14097467;
      ItemUsageReviewPrev@1240020010 : Record 14097467;
      Location@1240020013 : Record 14;
      LocInvPer@1240020032 : Record 14000553;
      ProcUnit@1240020011 : Record 14000555;
      Forecast@1240020029 : Codeunit 14000567;
      UBP@1240020028 : Codeunit 14000564;
      ProgWindow@1240020005 : Dialog;
      ChangedCount@1240020018 : Integer;
      CompareItemUsage@1240020024 : Decimal;
      CompareForecastUsage@1240020025 : Decimal;
      ComparePercent@1240020026 : Decimal;
      FirstFCStartDate@1240020034 : Date;
      ItemUsageFound@1240020008 : Boolean;
      Period@1240020002 : Integer;
      FCPeriod@1240020030 : Integer;
      PeriodsToCompare@1240020023 : Integer;
      PrevForecastUsage@1240020021 : Decimal;
      StartingDate@1240020000 : Date;
      StartngDateArray@1240020003 : ARRAY [52] OF Date;
      Text001@1240020006 : TextConst 'ENU=Location';
      Text002@1240020007 : TextConst 'ENU=Item';
      Text003@1240020009 : TextConst 'ENU=You must enter a valid start date.';
      Text004@1240020014 : TextConst 'ENU=You have included Spoke Procurement Units, do you wish to continue?';
      Text005@1240020015 : TextConst 'ENU=Creation of Usage Review terminated.';
      Text006@1240020017 : TextConst 'ENU=There are %1 Changes Pending.  Do you wish to continure?';
      ItemUsageArray@1240020019 : ARRAY [52] OF Decimal;
      ForecastUsageArray@1240020020 : ARRAY [52] OF Decimal;
      EntryNo@1240020027 : Integer;
      HistoryPeriods@1240020031 : Integer;
      Text007@1240020033 : TextConst 'ENU=There are only %1 closed periods.';
      Text008@1240020035 : TextConst 'ENU=You must specify the number of History Periods.';
      ForecastPeriods@1240020022 : Integer;
      ThresholdErrorPct@1240020037 : Decimal;
      ShowAllForecastable@1240020038 : Boolean;
      ShowAllSporadic@1240020039 : Boolean;
      Forecastable@1240020040 : Boolean;
      MyPerToCompare@1240020041 : Decimal;
      Text009@1240020042 : TextConst 'ENU=Must Reforecast Item Before Adj.';
      Text012@1240020045 : TextConst 'ENU=Stockout days %1';
      Text013@1240020044 : TextConst 'ENU=Below Min. Annual Usage %1';
      Text014@1240020043 : TextConst 'ENU="Curr. Period Usage %1 is > or = the last %2 periods total usage %3"';
      BatchType@1240020047 : Code[10];
      BatchName@1240020046 : Code[10];
      Text015@1240020048 : TextConst 'ENU=Error %1 %2 %3 %4 was not found.';
      ItemUsageReviewBatch@1240020049 : Record 14097469;
      Formula@1240020016 : Record 14002652;
      ComparisonMethod@1240020036 : 'Actuals Only,Standard';

    PROCEDURE SetBatch@1240020000(CurrBatchType@1240020000 : Code[10];CurrBatchName@1240020001 : Code[10]);
    BEGIN
      BatchType := CurrBatchType;
      BatchName := CurrBatchName;
    END;

    PROCEDURE CalcSampleStandardDeviation@1240020001(MeanType@1240020000 : 'arithmetic,geometric';VAR ItemUsageReview@1240020005 : Record 14097467);
    VAR
      i@1240020001 : Integer;
      TotalUsage@1240020002 : Decimal;
      VarianceUsageArray@1240020003 : ARRAY [52] OF Decimal;
      Variance@1240020004 : Decimal;
      SumOfSquare@1240020006 : Decimal;
      Avg@1240020007 : Decimal;
    BEGIN
      {
      //arithmetic - normal distribution - recurring
      // geometric  - non-normal distribution - sporadic
      //Sample % - Deviations from Mean
       50.0%           .674
       68.3           1.000
       90.0           1.645
       95.0           1.960
       95.4           2.000
       98.0           2.326
       99.0           2.576
       99.7           3.000
      }

      FOR i := 1 TO HistoryPeriods DO BEGIN
        CASE MeanType OF
          MeanType::arithmetic:
          BEGIN
            TotalUsage := TotalUsage + ItemUsageArray[i];
          END;
          MeanType::geometric:
          BEGIN
            IF i = 1 THEN
              TotalUsage := CalcLog(10,ItemUsageArray[i])
            ELSE
             IF ItemUsageArray[i] <> 0 THEN
               TotalUsage := TotalUsage + CalcLog(10,ItemUsageArray[i])
           END;
         END;
      END;

      CASE MeanType OF
        MeanType::arithmetic:
        BEGIN
          ItemUsageReview.Mean := TotalUsage/HistoryPeriods;
        END;
        MeanType::geometric:
        BEGIN
          ItemUsageReview.Mean := POWER(10, TotalUsage/HistoryPeriods);
        END;
       END;

      // sum of squared differences
      FOR i := 1 TO HistoryPeriods DO BEGIN
        VarianceUsageArray[i] := ItemUsageArray[i] - ItemUsageReview.Mean;
        SumOfSquare := SumOfSquare + POWER(VarianceUsageArray[i],2);
      END;

      // sample variance
      IF (HistoryPeriods >= 2) THEN
        Variance := (SumOfSquare/(HistoryPeriods - 1));

      IF Variance <> 0 THEN BEGIN
        // square root = standard deviation
        ItemUsageReview."Standard Deviation" := POWER(Variance, 0.5);
        // 80% (1.281) confidence of the usage should fall within 1.281 standad deviations
        ItemUsageReview."Standard Deviation" := ItemUsageReview."Standard Deviation" * 1.281;

        ItemUsageReview."Lower Bound" := ItemUsageReview.Mean - ItemUsageReview."Standard Deviation";
        ItemUsageReview."Upper Bound" := ItemUsageReview.Mean + ItemUsageReview."Standard Deviation";
      END;
    END;

    LOCAL PROCEDURE CalcLog@1000000032(Base@1000000000 : Decimal;x@1000000001 : Decimal) : Decimal;
    VAR
      Down@1000000003 : Decimal;
      Up@1000000004 : Decimal;
      Step@1000000005 : Decimal;
      Steps@1000000006 : Integer;
      LeadingZeros@1000000002 : Integer;
      LeadingZeroString@1000000007 : Text[30];
    BEGIN
      CLEAR(Steps);
      IF x = 1 THEN //Log(1) = 1;
        EXIT(0);
      //  EXIT(1);

      //first find upper and lower Range
      IF x > 1 THEN BEGIN
        Up := 1;
        Down := 0;
        WHILE POWER(Base,Up) < x DO
          Up *= 2;
        Down := Up;
        WHILE POWER(Base,Down) > x DO
          Down /= 10;
      END ELSE BEGIN
        //On Values 0..1 (except 0) the leading zeros are the offset in -Integer
        //i.e. 0,0027 leads to -2, because the LOG will be something between -2 and zero.
        Down := -STRLEN(COPYSTR(FORMAT(x,0,'<decimals,0>'),2)) -
          STRLEN(DELCHR(COPYSTR(FORMAT(x,0,'<decimals,0>'),2),'<','0'));
        Up := 0;
      END;

      //moving the Ranges step by step to the Result. Steps become smaler every loop.
      REPEAT
        Steps += 1;
        Step := (Up - Down) / 2;
        IF POWER(Base,Step + Down) > x THEN
          Up -= Step
        ELSE
          Down += Step;
      UNTIL Steps = 53; //after this Navision doesn't get better. The first 12-14 decimals are always accurate.
      EXIT(ROUND(Up,0.000000000000001));
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

