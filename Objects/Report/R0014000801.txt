OBJECT Report 14000801 Czar Lite Data Import 2
{
  OBJECT-PROPERTIES
  {
    Date=07/07/17;
    Time=12:00:00 PM;
    Version List=SE0.60.14;
  }
  PROPERTIES
  {
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  // get filename
                  InputFilename := 'c:\se_demo\shipping\LTL\CzarLite.txt';

                  IF LTLRate.Code = '' THEN
                    ERROR(Text001);
                  IF LTLRate.GET(LTLRate.Code) THEN
                    ERROR(Text002,LTLRate.Code);

                  LTLRate.INIT;
                  LTLRate."Import File Name" := InputFilename;
                  LTLRate."Allow Next Above if Cheaper" := TRUE;
                  LTLRate.INSERT;

                  LTLRateLine."LTL Rate Code" := LTLRate.Code;
                  LTLRateLine."Line No." := 0;

                  Window.OPEN('Czar Lite Import\#1###### records processed.');
                END;

    OnPostReport=BEGIN
                   Window.CLOSE;
                 END;

  }
  DATASET
  {
    { 5444;    ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               SETRANGE(Number,1);
                             END;

               OnAfterGetRecord=VAR
                                  TextLine@1240020000 : Text[1024];
                                  TempText@1240020001 : Text;
                                BEGIN
                                  IF NOT UPLOADINTOSTREAM(
                                           'Select Czar Lite Billing File and click Open',
                                           '','Text or CSV Files (*.txt, *.csv)|*.txt;*.csv',TempText,InputStream)
                                  THEN
                                    ERROR('Error uploading file to server.');
                                  //InputFile.TEXTMODE(TRUE);
                                  //InputFile.OPEN(InputFilename);

                                  WHILE GetTextLine(TextLine) DO BEGIN
                                    ParseInput(TextLine);

                                    LTLRateLine.INIT;
                                    LTLRateLine."LTL Freight Type" := DELCHR(Class);

                                    SkipLine := FALSE;
                                    CASE LTLRateLine."LTL Freight Type" OF
                                      '50':
                                        IF NOT FreightTypeToImport[1] THEN
                                          SkipLine := TRUE;
                                      '55':
                                        IF NOT FreightTypeToImport[2] THEN
                                          SkipLine := TRUE;
                                      '60':
                                        IF NOT FreightTypeToImport[3] THEN
                                          SkipLine := TRUE;
                                      '65':
                                        IF NOT FreightTypeToImport[4] THEN
                                          SkipLine := TRUE;
                                      '70':
                                        IF NOT FreightTypeToImport[5] THEN
                                          SkipLine := TRUE;
                                      '77':
                                        IF NOT FreightTypeToImport[6] THEN
                                          SkipLine := TRUE;
                                      '85':
                                        IF NOT FreightTypeToImport[7] THEN
                                          SkipLine := TRUE;
                                      '92':
                                        IF NOT FreightTypeToImport[8] THEN
                                          SkipLine := TRUE;
                                      '100':
                                        IF NOT FreightTypeToImport[9] THEN
                                          SkipLine := TRUE;
                                      '110':
                                        IF NOT FreightTypeToImport[10] THEN
                                          SkipLine := TRUE;
                                      '125':
                                        IF NOT FreightTypeToImport[11] THEN
                                          SkipLine := TRUE;
                                      '150':
                                        IF NOT FreightTypeToImport[12] THEN
                                          SkipLine := TRUE;
                                      '175':
                                        IF NOT FreightTypeToImport[13] THEN
                                          SkipLine := TRUE;
                                      '200':
                                        IF NOT FreightTypeToImport[14] THEN
                                          SkipLine := TRUE;
                                      '250':
                                        IF NOT FreightTypeToImport[15] THEN
                                          SkipLine := TRUE;
                                      '300':
                                        IF NOT FreightTypeToImport[16] THEN
                                          SkipLine := TRUE;
                                      '350':
                                        IF NOT FreightTypeToImport[17] THEN
                                          SkipLine := TRUE;
                                      '400':
                                        IF NOT FreightTypeToImport[18] THEN
                                          SkipLine := TRUE;
                                      '500':
                                        IF NOT FreightTypeToImport[19] THEN
                                          SkipLine := TRUE;
                                    END;

                                    IF NOT SkipLine THEN BEGIN
                                      LTLRateLine."From Zip Code Min" := OriginZIPCode;
                                      LTLRateLine."From Zip Code Max" := OriginZIPCode;
                                      LTLRateLine."To Country Code" := '';
                                      LTLRateLine."To ZIP Code Min" := DestinationLowZIPCode;
                                      LTLRateLine."To ZIP Code Max" := COPYSTR(DestinationLowZIPCode,1,3) + DestinationHighZIPCode;
                                      LTLRateLine."From State" := OriginState;
                                      LTLRateLine."To State" := DestinationState;
                                      LTLRateLine.Description := RBNO;

                                      // Shipping Cost
                                      LTLRateLine.Type := LTLRateLine.Type::Charge;
                                      LTLRateLine."Line No." := LTLRateLine."Line No." + 10;
                                      LTLRateLine."Minimum Weight" := 0;
                                      EVALUATE(LTLRateLine."Rate per 100 Pound",L5C);
                                      LTLRateLine."Rate per 100 Pound" := LTLRateLine."Rate per 100 Pound" / 100;
                                      LTLRateLine.INSERT;

                                      LTLRateLine."Line No." := LTLRateLine."Line No." + 10;
                                      LTLRateLine."Minimum Weight" := 500;
                                      EVALUATE(LTLRateLine."Rate per 100 Pound",M5C);
                                      LTLRateLine."Rate per 100 Pound" := LTLRateLine."Rate per 100 Pound" / 100;
                                      LTLRateLine.INSERT;

                                      LTLRateLine."Line No." := LTLRateLine."Line No." + 10;
                                      LTLRateLine."Minimum Weight" := 1000;
                                      EVALUATE(LTLRateLine."Rate per 100 Pound",M1M);
                                      LTLRateLine."Rate per 100 Pound" := LTLRateLine."Rate per 100 Pound" / 100;
                                      LTLRateLine.INSERT;

                                      LTLRateLine."Line No." := LTLRateLine."Line No." + 10;
                                      LTLRateLine."Minimum Weight" := 2000;
                                      EVALUATE(LTLRateLine."Rate per 100 Pound",M2M);
                                      LTLRateLine."Rate per 100 Pound" := LTLRateLine."Rate per 100 Pound" / 100;
                                      LTLRateLine.INSERT;

                                      LTLRateLine."Line No." := LTLRateLine."Line No." + 10;
                                      LTLRateLine."Minimum Weight" := 5000;
                                      EVALUATE(LTLRateLine."Rate per 100 Pound",M5M);
                                      LTLRateLine."Rate per 100 Pound" := LTLRateLine."Rate per 100 Pound" / 100;
                                      LTLRateLine.INSERT;

                                      LTLRateLine."Line No." := LTLRateLine."Line No." + 10;
                                      LTLRateLine."Minimum Weight" := 10000;
                                      EVALUATE(LTLRateLine."Rate per 100 Pound",M10M);
                                      LTLRateLine."Rate per 100 Pound" := LTLRateLine."Rate per 100 Pound" / 100;
                                      LTLRateLine.INSERT;

                                      LTLRateLine."Line No." := LTLRateLine."Line No." + 10;
                                      LTLRateLine."Minimum Weight" := 20000;
                                      EVALUATE(LTLRateLine."Rate per 100 Pound",M20M);
                                      LTLRateLine."Rate per 100 Pound" := LTLRateLine."Rate per 100 Pound" / 100;
                                      LTLRateLine.INSERT;

                                      LTLRateLine."Line No." := LTLRateLine."Line No." + 10;
                                      LTLRateLine."Minimum Weight" := 30000;
                                      EVALUATE(LTLRateLine."Rate per 100 Pound",M30M);
                                      LTLRateLine."Rate per 100 Pound" := LTLRateLine."Rate per 100 Pound" / 100;
                                      LTLRateLine.INSERT;

                                      LTLRateLine."Line No." := LTLRateLine."Line No." + 10;
                                      LTLRateLine."Minimum Weight" := 40000;
                                      EVALUATE(LTLRateLine."Rate per 100 Pound",M40M);
                                      LTLRateLine."Rate per 100 Pound" := LTLRateLine."Rate per 100 Pound" / 100;
                                      LTLRateLine.INSERT;

                                      // Minimum Charge
                                      LTLRateLine.Type := LTLRateLine.Type::Minimum;
                                      LTLRateLine."Rate per 100 Pound" := 0;
                                      EVALUATE(LTLRateLine."Minimum Charge",MC1);
                                      IF LTLRateLine."Minimum Charge" <> 0 THEN BEGIN
                                        LTLRateLine."Line No." := LTLRateLine."Line No." + 10;
                                        LTLRateLine."Minimum Weight" := 0;
                                        LTLRateLine."Minimum Charge" := LTLRateLine."Minimum Charge" / 100;
                                        LTLRateLine.INSERT;
                                      END;

                                      EVALUATE(LTLRateLine."Minimum Charge",MC2);
                                      IF LTLRateLine."Minimum Charge" <> 0 THEN BEGIN
                                        LTLRateLine."Line No." := LTLRateLine."Line No." + 10;
                                        LTLRateLine."Minimum Weight" := 100;
                                        LTLRateLine."Minimum Charge" := LTLRateLine."Minimum Charge" / 100;
                                        LTLRateLine.INSERT;
                                      END;

                                      EVALUATE(LTLRateLine."Minimum Charge",MC3);
                                      IF LTLRateLine."Minimum Charge" <> 0 THEN BEGIN
                                        LTLRateLine."Line No." := LTLRateLine."Line No." + 10;
                                        LTLRateLine."Minimum Weight" := 150;
                                        LTLRateLine."Minimum Charge" := LTLRateLine."Minimum Charge" / 100;
                                        LTLRateLine.INSERT;
                                      END;

                                      EVALUATE(LTLRateLine."Minimum Charge",MC4);
                                      IF LTLRateLine."Minimum Charge" <> 0 THEN BEGIN
                                        LTLRateLine."Line No." := LTLRateLine."Line No." + 10;
                                        LTLRateLine."Minimum Weight" := 200;
                                        LTLRateLine."Minimum Charge" := LTLRateLine."Minimum Charge" / 100;
                                        LTLRateLine.INSERT;
                                      END;

                                      EVALUATE(LTLRateLine."Minimum Charge",MC5);
                                      IF LTLRateLine."Minimum Charge" <> 0 THEN BEGIN
                                        LTLRateLine."Line No." := LTLRateLine."Line No." + 10;
                                        LTLRateLine."Minimum Weight" := 250;
                                        LTLRateLine."Minimum Charge" := LTLRateLine."Minimum Charge" / 100;
                                        LTLRateLine.INSERT;
                                      END;

                                      EVALUATE(LTLRateLine."Minimum Charge",MC6);
                                      IF LTLRateLine."Minimum Charge" <> 0 THEN BEGIN
                                        LTLRateLine."Line No." := LTLRateLine."Line No." + 10;
                                        LTLRateLine."Minimum Weight" := 300;
                                        LTLRateLine."Minimum Charge" := LTLRateLine."Minimum Charge" / 100;
                                        LTLRateLine.INSERT;
                                      END;

                                      EVALUATE(LTLRateLine."Minimum Charge",MC7);
                                      IF LTLRateLine."Minimum Charge" <> 0 THEN BEGIN
                                        LTLRateLine."Line No." := LTLRateLine."Line No." + 10;
                                        LTLRateLine."Minimum Weight" := 400;
                                        LTLRateLine."Minimum Charge" := LTLRateLine."Minimum Charge" / 100;
                                        LTLRateLine.INSERT;
                                      END;

                                      EVALUATE(LTLRateLine."Minimum Charge",MC8);
                                      IF LTLRateLine."Minimum Charge" <> 0 THEN BEGIN
                                        LTLRateLine."Line No." := LTLRateLine."Line No." + 10;
                                        LTLRateLine."Minimum Weight" := 500;
                                        LTLRateLine."Minimum Charge" := LTLRateLine."Minimum Charge" / 100;
                                        LTLRateLine.INSERT;
                                      END;

                                      UpdateWindow;
                                    END;
                                  END;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1240020039;2;Field  ;
                  CaptionML=ENU=LTL Rate Code;
                  SourceExpr=LTLRate.Code }

      { 1240020034;2;Field  ;
                  CaptionML=ENU=50;
                  SourceExpr=FreightTypeToImport[1] }

      { 1240020031;2;Field  ;
                  CaptionML=ENU=55;
                  SourceExpr=FreightTypeToImport[2] }

      { 1240020027;2;Field  ;
                  CaptionML=ENU=60;
                  SourceExpr=FreightTypeToImport[3] }

      { 1240020023;2;Field  ;
                  CaptionML=ENU=65;
                  SourceExpr=FreightTypeToImport[4] }

      { 1240020008;2;Field  ;
                  CaptionML=ENU=70;
                  SourceExpr=FreightTypeToImport[5] }

      { 1240020009;2;Field  ;
                  CaptionML=ENU=77;
                  SourceExpr=FreightTypeToImport[6] }

      { 1240020010;2;Field  ;
                  CaptionML=ENU=85;
                  SourceExpr=FreightTypeToImport[7] }

      { 1240020011;2;Field  ;
                  CaptionML=ENU=92;
                  SourceExpr=FreightTypeToImport[8] }

      { 1240020012;2;Field  ;
                  CaptionML=ENU=100;
                  SourceExpr=FreightTypeToImport[9] }

      { 1240020013;2;Field  ;
                  CaptionML=ENU=110;
                  SourceExpr=FreightTypeToImport[10] }

      { 1240020036;2;Field  ;
                  CaptionML=ENU=125;
                  SourceExpr=FreightTypeToImport[11] }

      { 1240020032;2;Field  ;
                  CaptionML=ENU=150;
                  SourceExpr=FreightTypeToImport[12] }

      { 1240020029;2;Field  ;
                  CaptionML=ENU=175;
                  SourceExpr=FreightTypeToImport[13] }

      { 1240020025;2;Field  ;
                  CaptionML=ENU=200;
                  SourceExpr=FreightTypeToImport[14] }

      { 1240020015;2;Field  ;
                  CaptionML=ENU=250;
                  SourceExpr=FreightTypeToImport[15] }

      { 1240020007;2;Field  ;
                  CaptionML=ENU=300;
                  SourceExpr=FreightTypeToImport[16] }

      { 1240020004;2;Field  ;
                  CaptionML=ENU=350;
                  SourceExpr=FreightTypeToImport[17] }

      { 1240020003;2;Field  ;
                  CaptionML=ENU=400;
                  SourceExpr=FreightTypeToImport[18] }

      { 1240020000;2;Field  ;
                  CaptionML=ENU=500;
                  SourceExpr=FreightTypeToImport[19] }

      { 1240020038;2;Field  ;
                  CaptionClass=Text19057866 }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      LTLRate@1240020045 : Record 14000804;
      LTLRateLine@1240020044 : Record 14000805;
      LTLFreightTypeTmp@1240020043 : TEMPORARY Record 14000806;
      InputStream@1240020010 : InStream;
      InputFilename@1240020009 : Text[1024];
      Text001@1240020035 : TextConst 'ENU=LTL Rate must be entered.';
      Text002@1240020002 : TextConst 'ENU=LTL Rate %1 already exists.';
      Text003@1240020000 : TextConst 'ENU=" Imported"';
      CarrierSCACCode@1240020041 : Code[10];
      OriginZIPCode@1240020039 : Code[10];
      OriginState@1240020038 : Code[10];
      DestinationLowZIPCode@1240020037 : Code[10];
      DestinationHighZIPCode@1240020036 : Code[10];
      DestinationState@1240020034 : Code[10];
      Class@1240020033 : Code[10];
      MC1@1240020032 : Code[10];
      MC2@1240020031 : Code[10];
      MC3@1240020030 : Code[10];
      MC4@1240020029 : Code[10];
      L5C@1240020028 : Code[10];
      M5C@1240020027 : Code[10];
      M1M@1240020026 : Code[10];
      M2M@1240020025 : Code[10];
      M5M@1240020024 : Code[10];
      M10M@1240020023 : Code[10];
      M20M@1240020022 : Code[10];
      M30M@1240020021 : Code[10];
      M40M@1240020020 : Code[10];
      RBNO@1240020019 : Code[10];
      MC5@1240020018 : Code[10];
      MC6@1240020017 : Code[10];
      MC7@1240020016 : Code[10];
      MC8@1240020015 : Code[10];
      SSMC1@1240020012 : Code[10];
      SSMC2@1240020011 : Code[10];
      SSMC3@1240020008 : Code[10];
      SSMC4@1240020007 : Code[10];
      SSMC5@1240020006 : Code[10];
      SSMC6@1240020005 : Code[10];
      SSMC7@1240020004 : Code[10];
      SSMC8@1240020003 : Code[10];
      FreightTypeToImport@1240020001 : ARRAY [20] OF Boolean;
      Text19057866@19070635 : TextConst 'ENU=Freight Types to Import';
      SkipLine@1240020040 : Boolean;
      Window@1240020013 : Dialog;
      x@1240020014 : Integer;

    PROCEDURE ParseInput@1240020000(TextLine@1240020000 : Text[1024]);
    BEGIN
      CarrierSCACCode := COPYSTR(TextLine,6,3);
      OriginZIPCode := COPYSTR(TextLine,16,5);
      OriginState := COPYSTR(TextLine,24,2);
      DestinationLowZIPCode := COPYSTR(TextLine,29,5);
      DestinationHighZIPCode := COPYSTR(TextLine,37,2);
      DestinationState := COPYSTR(TextLine,46,2);
      Class := COPYSTR(TextLine,51,3);
      MC1 := COPYSTR(TextLine,56,6);
      MC2 := COPYSTR(TextLine,63,6);
      MC3 := COPYSTR(TextLine,70,6);
      MC4 := COPYSTR(TextLine,77,6);
      L5C := COPYSTR(TextLine,84,6);
      M5C := COPYSTR(TextLine,91,6);
      M1M := COPYSTR(TextLine,98,6);
      M2M := COPYSTR(TextLine,105,6);
      M5M := COPYSTR(TextLine,112,6);
      M10M := COPYSTR(TextLine,119,6);
      M20M := COPYSTR(TextLine,126,6);
      M30M := COPYSTR(TextLine,133,6);
      M40M := COPYSTR(TextLine,140,6);
      RBNO := COPYSTR(TextLine,148,6);
      MC5 := COPYSTR(TextLine,156,6);
      MC6 := COPYSTR(TextLine,163,6);
      MC7 := COPYSTR(TextLine,170,6);
      MC8 := COPYSTR(TextLine,177,6);
      SSMC1 := COPYSTR(TextLine,184,6);
      SSMC2 := COPYSTR(TextLine,191,6);
      SSMC3 := COPYSTR(TextLine,198,6);
      SSMC4 := COPYSTR(TextLine,205,6);
      SSMC5 := COPYSTR(TextLine,212,6);
      SSMC6 := COPYSTR(TextLine,219,6);
      SSMC7 := COPYSTR(TextLine,226,6);
      SSMC8 := COPYSTR(TextLine,233,6);
    END;

    PROCEDURE InsertLTLFreightType@1(NewLTLFreightTypeCode@1240030000 : Code[10]);
    VAR
      LTLFreightType@1240030001 : Record 14000806;
    BEGIN
        IF NOT LTLFreightType.GET(NewLTLFreightTypeCode) THEN BEGIN
        LTLFreightType.Code := NewLTLFreightTypeCode;
        LTLFreightType.Description := NewLTLFreightTypeCode + Text003;
        LTLFreightType.INSERT;
      END;

      LTLFreightTypeTmp := LTLFreightType;
      LTLFreightTypeTmp.INSERT;
    END;

    PROCEDURE GetTextLine@1240030000(VAR TextLine@1240030001 : Text) : Boolean;
    VAR
      i@1240030002 : Integer;
      Char@1240030003 : Char;
      HyphenFound@1240030004 : Boolean;
    BEGIN
      i := 1;
      TextLine := '';;

      IF InputStream.EOS THEN
        EXIT(FALSE);

      InputStream.READ(Char);

      IF Char IN [10,13,20] THEN
        EXIT(FALSE);

      TextLine := FORMAT(Char);

      REPEAT
        InputStream.READ(Char);
        IF (i < 1024) AND (Char <> 10) AND (Char <> 13) THEN
          TextLine := TextLine + FORMAT(Char);
        i := i + 1;
      UNTIL (Char = 10);

      IF STRLEN(TextLine) > 0 THEN BEGIN
        Char := TextLine[1];
        IF NOT (Char IN [10,13,20]) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE UpdateWindow@1240020001();
    BEGIN
      x := x + 1;
      IF ((ROUND(x/1000,1) - (x/1000)) = 0) THEN
        Window.UPDATE(1,x);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

