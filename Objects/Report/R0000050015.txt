OBJECT Report 50015 Sales ASN E-Mail
{
  OBJECT-PROPERTIES
  {
    Date=07/01/20;
    Time=12:00:00 AM;
    Modified=Yes;
    Version List=SE0.60.03,TPZ2584;
  }
  PROPERTIES
  {
    CaptionML=ENU=Sales ASN E-Mail;
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 5444;    ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               MaxIteration=1;
               OnPreDataItem=BEGIN
                               ShowStatus := FALSE;

                               IF ShowStatus THEN
                                 Window.OPEN(
                                   Text001 +
                                   Text002);
                             END;

               OnAfterGetRecord=BEGIN
                                  CLEAR(FieldValue);

                                  EMailSetup.GET;
                                  CASE DocumentType OF
                                    SalesHeader."Document Type"::Quote:
                                      EMailSetup.TESTFIELD("Sales Quote Conf. E-Mail");
                                    SalesHeader."Document Type"::Order:
                                      EMailSetup.TESTFIELD("Sales Order Conf. E-Mail");
                                    SalesHeader."Document Type"::Invoice:
                                      EMailSetup.TESTFIELD("Sales Invoice Conf. E-Mail");
                                    SalesHeader."Document Type"::"Credit Memo":
                                      EMailSetup.TESTFIELD("Sales Credit Memo Conf. E-Mail");
                                    SalesHeader."Document Type"::"Blanket Order":
                                      EMailSetup.TESTFIELD("Sales Bl. Order Conf. E-Mail");
                                    SalesHeader."Document Type"::"Return Order":
                                      EMailSetup.TESTFIELD("Sales Ret. Order Conf. E-Mail");
                                  END;

                                  IF NOT GetInitialRecords THEN BEGIN
                                    EmailSent := FALSE;
                                    ModifyRecords;
                                    EXIT;
                                  END;

                                  IF BatchProcessing THEN
                                    REPEAT
                                      IF EMailListEntryTmp."Created at Date" >= SalesHeader."Posting Date" THEN
                                        CurrReport.SKIP;
                                    UNTIL EMailListEntryTmp.NEXT = 0;

                                  IF EMailHeader."Line Break Character" <> '' THEN
                                    MailInt.LineFeedChar := EMailHeader."Line Break Character";

                                  // Create Subject Line
                                  IF ShowStatus THEN
                                    Window.UPDATE(1,Text003);
                                  MailInt.InitializeMail2(FieldValue.SubstituteHeader(EMailHeader));

                                  // Address the mail
                                  IF ShowStatus THEN
                                    Window.UPDATE(1,Text004);

                                  ReceiverTo := '';
                                  ReceiverCC := '';
                                  ReceiverBCC := '';
                                  EMailListEntryTmp.RemoveEntriesWithSameEMail(EMailListEntryTmp);
                                  REPEAT
                                    CASE DocumentType OF
                                      SalesHeader."Document Type"::Quote:
                                        CASE EMailListEntryTmp."Sales Quote Conf. E-Mail" OF
                                          EMailListEntryTmp."Sales Quote Conf. E-Mail"::"To":
                                            CreateEmailAddressStr(EMailListEntryTmp."E-Mail",'TO');
                                          EMailListEntryTmp."Sales Quote Conf. E-Mail"::CC:
                                            CreateEmailAddressStr(EMailListEntryTmp."E-Mail",'CC');
                                          EMailListEntryTmp."Sales Quote Conf. E-Mail"::BCC:
                                            CreateEmailAddressStr(EMailListEntryTmp."E-Mail",'BCC');
                                        END;
                                      SalesHeader."Document Type"::Order:
                                        CASE EMailListEntryTmp."Sales Order Conf. E-Mail" OF
                                          EMailListEntryTmp."Sales Order Conf. E-Mail"::"To":
                                            CreateEmailAddressStr(EMailListEntryTmp."E-Mail",'TO');
                                          EMailListEntryTmp."Sales Order Conf. E-Mail"::CC:
                                            CreateEmailAddressStr(EMailListEntryTmp."E-Mail",'CC');
                                          EMailListEntryTmp."Sales Order Conf. E-Mail"::BCC:
                                            CreateEmailAddressStr(EMailListEntryTmp."E-Mail",'BCC');
                                        END;
                                      SalesHeader."Document Type"::Invoice:
                                        CASE EMailListEntryTmp."Sales Invoice Conf. E-Mail" OF
                                          EMailListEntryTmp."Sales Invoice Conf. E-Mail"::"To":
                                            CreateEmailAddressStr(EMailListEntryTmp."E-Mail",'TO');
                                          EMailListEntryTmp."Sales Invoice Conf. E-Mail"::CC:
                                            CreateEmailAddressStr(EMailListEntryTmp."E-Mail",'CC');
                                          EMailListEntryTmp."Sales Invoice Conf. E-Mail"::BCC:
                                            CreateEmailAddressStr(EMailListEntryTmp."E-Mail",'BCC');
                                        END;
                                      SalesHeader."Document Type"::"Credit Memo":
                                        CASE EMailListEntryTmp."Sales Credit Memo Conf. E-Mail" OF
                                          EMailListEntryTmp."Sales Credit Memo Conf. E-Mail"::"To":
                                            CreateEmailAddressStr(EMailListEntryTmp."E-Mail",'TO');
                                          EMailListEntryTmp."Sales Credit Memo Conf. E-Mail"::CC:
                                            CreateEmailAddressStr(EMailListEntryTmp."E-Mail",'CC');
                                          EMailListEntryTmp."Sales Credit Memo Conf. E-Mail"::BCC:
                                            CreateEmailAddressStr(EMailListEntryTmp."E-Mail",'BCC');
                                        END;
                                      SalesHeader."Document Type"::"Blanket Order":
                                        CASE EMailListEntryTmp."Sales Bl. Order Conf. E-Mail" OF
                                          EMailListEntryTmp."Sales Bl. Order Conf. E-Mail"::"To":
                                            CreateEmailAddressStr(EMailListEntryTmp."E-Mail",'TO');
                                          EMailListEntryTmp."Sales Bl. Order Conf. E-Mail"::CC:
                                            CreateEmailAddressStr(EMailListEntryTmp."E-Mail",'CC');
                                          EMailListEntryTmp."Sales Bl. Order Conf. E-Mail"::BCC:
                                            CreateEmailAddressStr(EMailListEntryTmp."E-Mail",'BCC');
                                        END;
                                      SalesHeader."Document Type"::"Return Order":
                                        CASE EMailListEntryTmp."Sales Ret. Order Conf. E-Mail" OF
                                          EMailListEntryTmp."Sales Ret. Order Conf. E-Mail"::"To":
                                            CreateEmailAddressStr(EMailListEntryTmp."E-Mail",'TO');
                                          EMailListEntryTmp."Sales Ret. Order Conf. E-Mail"::CC:
                                            CreateEmailAddressStr(EMailListEntryTmp."E-Mail",'CC');
                                          EMailListEntryTmp."Sales Ret. Order Conf. E-Mail"::BCC:
                                            CreateEmailAddressStr(EMailListEntryTmp."E-Mail",'BCC');
                                        END;
                                    END;
                                  UNTIL EMailListEntryTmp.NEXT = 0;

                                  IF ReceiverTo <> '' THEN
                                    MailInt.AddReceiverTo(ReceiverTo);

                                  IF ReceiverCC <> '' THEN
                                    MailInt.AddReceiverCC(ReceiverCC);

                                  IF ReceiverBCC <> '' THEN
                                    MailInt.AddReceiverBCC(ReceiverBCC);

                                  // Create the body of the E-Mail
                                  RecordFound[1] := TRUE;
                                  LastLevel := 1;
                                  LastType := 0;
                                  EMailLine.RESET;
                                  EMailLine.SETRANGE("E-Mail Code",EMailHeader.Code);
                                  IF EMailLine.FIND('-') THEN
                                    REPEAT
                                      IF ShowStatus THEN
                                        Window.UPDATE(1,EMailLine.Text);
                                      EMailLine.TESTFIELD(Level);

                                      // Handle Higher Level
                                      IF LastLevel < EMailLine.Level THEN BEGIN
                                        GetFirstRecordInLoop(EMailLine.Level);
                                        FirstOnLevel[EMailLine.Level] := TRUE;
                                        EMailLineFirstOnLevel[EMailLine.Level] := EMailLine;
                                      END;

                                      // Handle Skip Level if no records
                                      IF FirstOnLevel[EMailLine.Level] AND
                                         NOT RecordFound[EMailLine.Level] AND
                                         EMailLine."Include only level if details"
                                      THEN BEGIN
                                        EMailLine.SETFILTER(Level,'<%1',EMailLine.Level);
                                        Finished := EMailLine.NEXT = 0;
                                        EMailLine.SETRANGE(Level);
                                      END ELSE BEGIN
                                        // Substitute Values in Line and add to E-Mail
                                        IF (EMailLine.Type <> EMailLine.Type::Loop) OR
                                           RecordFound[EMailLine.Level]
                                        THEN
                                          MailInt.AddtoBody(FieldValue.SubstituteLine(EMailLine));

                                        // Get Next E-Mail Line
                                        LastType := EMailLine.Type;
                                        LastLevel := EMailLine.Level;
                                        Finished := EMailLine.NEXT = 0;

                                        // Handle Loop End or Return to Lower Level
                                        IF (LastType = EMailLine.Type::Loop) AND
                                           (((EMailLine.Type <> EMailLine.Type::Loop) AND
                                             (LastLevel = EMailLine.Level)) OR
                                            (LastLevel > EMailLine.Level)) AND
                                           RecordFound[LastLevel]
                                        THEN BEGIN
                                          GetNextRecordInLoop(LastLevel);

                                          // Repeat Loop if Record found
                                          IF RecordFound[LastLevel] THEN BEGIN
                                            EMailLine := EMailLineFirstOnLevel[LastLevel];
                                            EMailLine.SETRANGE(Type,EMailLine.Type::Loop);
                                            EMailLine.NEXT;
                                            EMailLine.SETRANGE(Type);
                                          END;
                                        END;
                                      END;

                                      FirstOnLevel[EMailLine.Level] := FALSE;
                                    UNTIL Finished;

                                  // Create and add attachment
                                  IF ShowStatus THEN
                                    Window.UPDATE(1,Text005);
                                  EMailAttachmentTmp.DELETEALL;
                                  EMailAttachment.RESET;
                                  EMailAttachment.SETRANGE("E-Mail Code",EMailHeader.Code);
                                  IF EMailAttachment.FIND('-') THEN BEGIN
                                    EMailSetup.TESTFIELD("E-Mail Buffer Directory");

                                    REPEAT
                                      CASE EMailAttachment.Type OF
                                        EMailAttachment.Type::Report:
                                          BEGIN
                                            EMailAttachment.TESTFIELD("Attachment Name");
                                            EMailAttachment.TESTFIELD("Attachment Report ID");

                                            TempFilename := EMailSetup."E-Mail Buffer Directory";
                                            IF COPYSTR(TempFilename,STRLEN(TempFilename),1) <> '\' THEN
                                              TempFilename := TempFilename + '\';
                                            TempFilename := TempFilename + FieldValue.SubstituteAttachment(EMailAttachment);

                                            SaveReport(EMailAttachment."Attachment Report ID",TempFilename);
                                            MailInt.AddAttachment(TempFilename);

                                            EMailAttachmentTmp := EMailAttachment;
                                            EMailAttachmentTmp."Use Attachment File Name" := TempFilename;
                                            EMailAttachmentTmp.INSERT;
                                          END;
                                        EMailAttachment.Type::"Fixed File":
                                          BEGIN
                                            IF NOT EXISTS(EMailAttachment."Fixed File Name") THEN
                                              ERROR(Text006,EMailAttachment."Fixed File Name");

                                            MailInt.AddAttachment(EMailAttachment."Fixed File Name");
                                          END;
                                      END;
                                    UNTIL EMailAttachment.NEXT = 0;
                                  END;

                                  // Send e-mail
                                  IF ShowStatus THEN
                                    Window.UPDATE(1,Text007);

                                  IF MailInt.Send(EMailHeader."Confirm E-Mail manually") THEN
                                    EmailSent := TRUE;

                                  CLEAR(MailInt);

                                  IF EMailAttachmentTmp.FIND('-') THEN
                                    REPEAT
                                      MailInt.DeleteAttachment(EMailAttachmentTmp."Use Attachment File Name");
                                    UNTIL EMailAttachmentTmp.NEXT = 0;

                                  // Update the Records
                                  ModifyRecords;
                                END;

               OnPostDataItem=BEGIN
                                IF ShowStatus THEN
                                  Window.CLOSE;
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      SalesHeader@1000000000 : Record 36;
      SalesLine@1000000001 : Record 37;
      SalesCommentLine@1000000002 : Record 44;
      Package@1000000027 : Record 14000701;
      PackageLine@1000000032 : Record 14000702;
      CompanyInformation@1000000003 : Record 79;
      Customer@1000000004 : Record 18;
      ShipToAddress@1000000005 : Record 222;
      PaymentTerms@1000000007 : Record 3;
      SalesPersonPurchaser@1000000023 : Record 13;
      Location@1000000024 : Record 14;
      ShippingAgent@1000000025 : Record 291;
      EShipAgentService@1000000026 : Record 14000708;
      EMailSetup@1000000006 : Record 14000905;
      EMailRule@1000000022 : Record 14000907;
      EMailHeader@1000000008 : Record 14000901;
      EMailLine@1000000009 : Record 14000902;
      EMailLineFirstOnLevel@1000000010 : ARRAY [10] OF Record 14000902;
      EMailListEntryTmp@1000000011 : TEMPORARY Record 14000908;
      EMailAttachment@1000000028 : Record 14000909;
      EMailAttachmentTmp@1000000029 : TEMPORARY Record 14000909;
      FieldValue@1000000012 : Codeunit 14000901;
      MailInt@1000000013 : Codeunit 14000905;
      Window@1000000014 : Dialog;
      RecordFound@1000000015 : ARRAY [10] OF Boolean;
      FirstOnLevel@1000000016 : ARRAY [10] OF Boolean;
      Finished@1000000017 : Boolean;
      ShowStatus@1000000018 : Boolean;
      EmailSent@1240020000 : Boolean;
      BatchProcessing@1240020004 : Boolean;
      LastLevel@1000000019 : Integer;
      LastType@1000000020 : Integer;
      DocumentType@1000000031 : 'Quote,Order,Invoice,Credit Memo,Blanket Order';
      OrderNo@1000000021 : Code[20];
      TempFilename@1000000030 : Text[250];
      Text001@1001 : TextConst 'ENU=Creating E-Mail\';
      Text002@1002 : TextConst 'ENU=Current Line #1##################';
      Text003@1003 : TextConst 'ENU=Subject';
      Text004@1004 : TextConst 'ENU=Addressing';
      Text005@1005 : TextConst 'ENU=Attachments';
      Text006@1006 : TextConst 'ENU=Attachment file %1 do not exists.';
      Text007@1007 : TextConst 'ENU=Sending';
      Text008@1008 : TextConst 'ENU=Level   Table\';
      Text009@1009 : TextConst 'ENU="  1     Sales Header (36)\"';
      Text010@1010 : TextConst 'ENU="  2       Sales Line (37)\"';
      Text011@1011 : TextConst 'ENU="  3       Sales Comment Line (44)\\"';
      Text012@1012 : TextConst 'ENU=Other tables\';
      Text013@1013 : TextConst 'ENU=Payment Terms (3), Sales Person (13), Location (14), Company Information (79),\';
      Text014@1014 : TextConst 'ENU=Customer (18) (0 Sell-to Customer No., 1 Bill-to Customer No., 2 Double Blind Customer No.)\';
      Text015@1015 : TextConst 'ENU=Ship-to Address (222) (0 Ship-to Code, 1 Ship-for Code),\';
      Text016@1016 : TextConst 'ENU=Shipping Agent (291), E-Ship Agent Service (14000708)';
      Text017@1017 : TextConst 'ENU=Sell-to Customer,Bill-to Customer,Double Blind Customer (could be blank)';
      Text018@1018 : TextConst 'ENU=Ship-to Code (could be blank),';
      Text019@1019 : TextConst 'ENU=Ship-for Code (could be blank)';
      Text020@1020 : TextConst 'ENU=%1 is not a supported level.';
      Text021@1021 : TextConst 'ENU=Get E-Mail List must be empty.';
      ReceiverTo@1240020001 : Text[250];
      ReceiverCC@1240020002 : Text[250];
      ReceiverBCC@1240020003 : Text[250];

    PROCEDURE CreateEmailAddressStr@1240020000(EmailAddressStr@1240020000 : Text[250];Type@1240020001 : Text[10]);
    BEGIN
      CASE Type OF
        'TO':
          IF ReceiverTo = '' THEN
            ReceiverTo := EmailAddressStr
          ELSE
            ReceiverTo := ReceiverTo + ';' + EmailAddressStr;
        'CC':
          IF ReceiverCC = '' THEN
            ReceiverCC := EmailAddressStr
          ELSE
            ReceiverCC := ReceiverCC + ';' + EmailAddressStr;
        'BCC':
          IF ReceiverBCC = '' THEN
            ReceiverBCC := EmailAddressStr
          ELSE
            ReceiverBCC := ReceiverTo + ';' + EmailAddressStr;
      END;
    END;

    PROCEDURE InitializeRequest@1(NewDocumentType@1000000001 : Integer;NewOrderNo@1000000000 : Code[20];BatchSending@1240020000 : Boolean);
    BEGIN
      DocumentType := NewDocumentType;
      OrderNo := NewOrderNo;
      BatchProcessing := BatchSending;

      IF NewOrderNo = 'SHOWHELP' THEN
        MESSAGE(
          Text008 +
          Text009 +
          Text010 +
          Text011 +
          Text012 +
          Text013 +
          Text014 +
          Text015 +
          Text016);
    END;

    PROCEDURE GetLevelName@5(LevelNo@1000000000 : Integer) : Text[30];
    BEGIN
      CASE LevelNo OF
        1:
          EXIT(SalesHeader.TABLENAME);
        2:
          EXIT(SalesLine.TABLENAME);
        3:
          EXIT(SalesCommentLine.TABLENAME);
        //TM BEG 070715
        4:
          EXIT(Package.TABLENAME);
        5:
          EXIT(PackageLine.TABLENAME);
        //TM END 070715
        ELSE
          EXIT('');
      END;
    END;

    PROCEDURE GetTableFilter@6() : Text[250];
    BEGIN
      EXIT('3|13|14|18|36|37|44|79|222|291|14000708|14000901|14000907');
    END;

    PROCEDURE GetRecordNoStrMenu@9(CurrentTableNo@1000000000 : Integer) : Text[250];
    BEGIN
      CASE CurrentTableNo OF
        DATABASE::Customer:
          EXIT(Text017);
        DATABASE::"Ship-to Address":
          EXIT(
            Text018 +
            Text019);
        ELSE
          EXIT('');
      END;
    END;

    LOCAL PROCEDURE GetInitialRecords@2() : Boolean;
    VAR
      EMailListEntry@1240030000 : Record 14000908;
      SendMail@1000000000 : Boolean;
    BEGIN
      // Get and Load Header values
      SalesHeader.GET(DocumentType,OrderNo);
      FieldValue.SalesHeader_36(SalesHeader,0);
      CompanyInformation.GET;
      FieldValue.CompanyInformation_79(CompanyInformation,0);
      Customer.GET(SalesHeader."Sell-to Customer No.");
      FieldValue.Customer_18(Customer,0);
      Customer.GET(SalesHeader."Bill-to Customer No.");
      FieldValue.Customer_18(Customer,1);
      IF NOT Customer.GET(SalesHeader."Double Blind Ship-from Cust No") THEN
        CLEAR(Customer);
      FieldValue.Customer_18(Customer,2);
      IF SalesHeader."Ship-to Code" <> '' THEN BEGIN
        ShipToAddress.GET(SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code");
        FieldValue.ShiptoAddress_222(ShipToAddress,0);
      END;
      IF SalesHeader."Ship-for Code" <> '' THEN BEGIN
        ShipToAddress.GET(SalesHeader."Sell-to Customer No.",SalesHeader."Ship-for Code");
        FieldValue.ShiptoAddress_222(ShipToAddress,1);
      END;
      IF NOT PaymentTerms.GET(SalesHeader."Payment Terms Code") THEN
        CLEAR(PaymentTerms);
      FieldValue.PaymentTerms_3(PaymentTerms,0);
      IF NOT SalesPersonPurchaser.GET(SalesHeader."Salesperson Code") THEN
        CLEAR(SalesPersonPurchaser);
      FieldValue.SalespersonPurchaser_13(SalesPersonPurchaser,0);
      IF NOT Location.GET(SalesHeader."Location Code") THEN
        CLEAR(Location);
      FieldValue.Location_14(Location,0);
      IF NOT ShippingAgent.GET(SalesHeader."Shipping Agent Code") THEN
        CLEAR(ShippingAgent);
      FieldValue.ShippingAgent_291(ShippingAgent,0);
      IF NOT EShipAgentService.GET(
               SalesHeader."Shipping Agent Code",SalesHeader."E-Ship Agent Service",
               SalesHeader."World Wide Service")
      THEN
        CLEAR(EShipAgentService);
      FieldValue.EShipAgentService_14000708(EShipAgentService,0);

      // Find E-Mail receivers
      EMailListEntryTmp.RESET;
      EMailListEntryTmp.DELETEALL;

      EMailListEntry.RESET;
      EMailListEntry.SETRANGE("Table ID",DATABASE::Customer);
      EMailListEntry.SETRANGE(Code,SalesHeader."Sell-to Customer No.");
      IF SalesHeader."Ship-to Code" <> '' THEN
        EMailListEntry.SETRANGE("Use for Ship-to/Order Address",TRUE);
      IF EMailListEntry.FIND('-') THEN
        REPEAT
        //<TPZ2584>
         IF EMailListEntry."Shortcut Dimension 5 Code" <> '' THEN BEGIN
          IF EMailListEntry."Shortcut Dimension 5 Code" = SalesHeader."Shortcut Dimension 5 Code" THEN BEGIN
            EMailListEntryTmp := EMailListEntry;
            EMailListEntryTmp.INSERT;
          END;
         END ELSE BEGIN //</TPZ2584>
          EMailListEntryTmp := EMailListEntry;
          EMailListEntryTmp.INSERT;
         END;//<TPZ2584>
        UNTIL EMailListEntry.NEXT = 0;

      IF SalesHeader."Ship-to Code" <> '' THEN BEGIN
        EMailListEntry.RESET;
        EMailListEntry.SETRANGE("Table ID",DATABASE::"Ship-to Address");
        EMailListEntry.SETRANGE(Code,SalesHeader."Sell-to Customer No.");
        EMailListEntry.SETRANGE("Code 2",SalesHeader."Ship-to Code");
        IF EMailListEntry.FIND('-') THEN
          REPEAT
          //<TPZ2584>
           IF EMailListEntry."Shortcut Dimension 5 Code" <> '' THEN BEGIN
            IF EMailListEntry."Shortcut Dimension 5 Code" = SalesHeader."Shortcut Dimension 5 Code" THEN BEGIN
             EMailListEntryTmp := EMailListEntry;
             EMailListEntryTmp.INSERT;
            END;
           END ELSE BEGIN //</TPZ2584>
            EMailListEntryTmp := EMailListEntry;
            EMailListEntryTmp.INSERT;
           END;//<TPZ2584>
          UNTIL EMailListEntry.NEXT = 0;
      END;

      IF (SalesHeader."Ship-for Code" <> '') AND
         (SalesHeader."Ship-to Code" <> SalesHeader."Ship-for Code")
      THEN BEGIN
        EMailListEntry.RESET;
        EMailListEntry.SETRANGE("Table ID",DATABASE::"Ship-to Address");
        EMailListEntry.SETRANGE(Code,SalesHeader."Sell-to Customer No.");
        EMailListEntry.SETRANGE("Code 2",SalesHeader."Ship-for Code");
        IF EMailListEntry.FIND('-') THEN
          REPEAT
          //<TPZ2584>
           IF EMailListEntry."Shortcut Dimension 5 Code" <> '' THEN BEGIN
            IF EMailListEntry."Shortcut Dimension 5 Code" = SalesHeader."Shortcut Dimension 5 Code" THEN BEGIN
             EMailListEntryTmp := EMailListEntry;
             IF NOT EMailListEntryTmp.INSERT THEN;
            END;
           END ELSE BEGIN //</TPZ2584>
             EMailListEntryTmp := EMailListEntry;
             IF NOT EMailListEntryTmp.INSERT THEN;
           END;//<TPZ2584>
          UNTIL EMailListEntry.NEXT = 0;
      END;

      EMailListEntry.RESET;
      EMailListEntry.SETRANGE("Table ID",DATABASE::"Sales Header");
      EMailListEntry.SETRANGE(Type,SalesHeader."Document Type");
      EMailListEntry.SETRANGE(Code,SalesHeader."No.");
      IF EMailListEntry.FIND('-') THEN
        REPEAT
        //<TPZ2584>
         IF EMailListEntry."Shortcut Dimension 5 Code" <> '' THEN BEGIN
          IF EMailListEntry."Shortcut Dimension 5 Code" = SalesHeader."Shortcut Dimension 5 Code" THEN BEGIN
           EMailListEntryTmp := EMailListEntry;
           EMailListEntryTmp.INSERT;
          END;
         END ELSE BEGIN //</TPZ2584>
           EMailListEntryTmp := EMailListEntry;
           EMailListEntryTmp.INSERT;
         END;//<TPZ2584>
        UNTIL EMailListEntry.NEXT = 0;

      // Test That a Mail should be sent
      //tm beg 070715
      {
      SendMail :=
        EMailRule.GetEMailRule(0,SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code");

      IF NOT SendMail THEN
        EXIT(FALSE);
      }
      EMailListEntryTmp.RESET;
      EMailListEntryTmp.DELETEALL;
      EMailListEntryTmp.INIT;
      EMailListEntryTmp."Table ID" := DATABASE::"Sales Header";
      EMailListEntryTmp.Type := SalesHeader."Document Type";
      EMailListEntryTmp.Code := SalesHeader."No.";
      EMailListEntryTmp."Entry No." := 1000;
      EMailListEntryTmp."E-Mail" := SalesHeader."E-Mail (ASN)";
      EMailListEntryTmp."Sales Order Conf. E-Mail" := EMailListEntryTmp."Sales Order Conf. E-Mail"::"To";
      EMailListEntryTmp.INSERT;
      //tm end 070715

      EMailListEntryTmp.SETFILTER("E-Mail",'<>%1','');
      CASE DocumentType OF
        SalesHeader."Document Type"::Quote:
          BEGIN
            EMailListEntryTmp.SETRANGE("Sales Quote Conf. E-Mail",1,3);

            SendMail := EMailHeader.GET(EMailRule."Sales Quote Conf. E-Mail Code");
          END;
        SalesHeader."Document Type"::Order:
          BEGIN
            EMailListEntryTmp.SETRANGE("Sales Order Conf. E-Mail",1,3);

            SendMail := EMailHeader.GET(EMailRule."Sales Order Conf. E-Mail Code");
          END;
        SalesHeader."Document Type"::Invoice:
          BEGIN
            EMailListEntryTmp.SETRANGE("Sales Invoice Conf. E-Mail",1,3);

            SendMail := EMailHeader.GET(EMailRule."Sales Invoice Conf E-Mail Code");
          END;
        SalesHeader."Document Type"::"Credit Memo":
          BEGIN
            EMailListEntryTmp.SETRANGE("Sales Credit Memo Conf. E-Mail",1,3);

            SendMail := EMailHeader.GET(EMailRule."Sales Cr Memo Conf E-Mail Code");
          END;
        SalesHeader."Document Type"::"Blanket Order":
          BEGIN
            EMailListEntryTmp.SETRANGE("Sales Bl. Order Conf. E-Mail",1,3);

            SendMail := EMailHeader.GET(EMailRule."Sales Bl. Ord Conf E-Mail Code");
          END;
        SalesHeader."Document Type"::"Return Order":
          BEGIN
            EMailListEntryTmp.SETRANGE("Sales Ret. Order Conf. E-Mail",1,3);

            SendMail := EMailHeader.GET(EMailRule."Sales Ret Ord Conf E-Mail Code");
          END;
      END;

      SendMail := EMailHeader.GET('ASN EMAIL');
      IF NOT SendMail THEN
        EXIT(FALSE);

      FieldValue.EMailHeader_14000901(EMailHeader,0);
      FieldValue.EMailRule_14000907(EMailRule,0);

      EXIT(EMailListEntryTmp.FIND('-'));
    END;

    LOCAL PROCEDURE ModifyRecords@7();
    BEGIN
      SalesHeader.GET(DocumentType,OrderNo);
      IF EmailSent THEN
        SalesHeader."E-Mail Confirmation Handled" := TRUE;

      SalesHeader.MODIFY;
      COMMIT;
    END;

    LOCAL PROCEDURE GetFirstRecordInLoop@3(CurrentLevel@1000000000 : Integer);
    BEGIN
      CASE CurrentLevel OF
        2:
          BEGIN
            SalesLine.RESET;
            SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
            SalesLine.SETRANGE("Document No.",SalesHeader."No.");
            IF EMailHeader."Line Type Filter" <> '' THEN
              SalesLine.SETFILTER(Type,EMailHeader."Line Type Filter");
            IF EMailHeader."Only Lines with Content" THEN
              SalesLine.SETFILTER(Quantity,'<>%1',0);
            RecordFound[CurrentLevel] := SalesLine.FIND('-');
            FieldValue.SalesLine_37(SalesLine,0);
          END;
        3:
          BEGIN
            SalesCommentLine.RESET;
            CASE DocumentType OF
              SalesHeader."Document Type"::Quote:
                SalesCommentLine.SETRANGE("Document Type",SalesCommentLine."Document Type"::Quote);
              SalesHeader."Document Type"::Order:
                SalesCommentLine.SETRANGE("Document Type",SalesCommentLine."Document Type"::Order);
              SalesHeader."Document Type"::Invoice:
                SalesCommentLine.SETRANGE("Document Type",SalesCommentLine."Document Type"::Invoice);
              SalesHeader."Document Type"::"Credit Memo":
                SalesCommentLine.SETRANGE(
                  "Document Type",SalesCommentLine."Document Type"::"Credit Memo");
              SalesHeader."Document Type"::"Blanket Order":
                SalesCommentLine.SETRANGE(
                  "Document Type",SalesCommentLine."Document Type"::"Blanket Order");
              SalesHeader."Document Type"::"Return Order":
                SalesCommentLine.SETRANGE(
                  "Document Type",SalesCommentLine."Document Type"::Shipment);
            END;
            SalesCommentLine.SETRANGE("No.",SalesHeader."No.");
            SalesCommentLine.SETRANGE("Include in E-Mail",TRUE);
            RecordFound[CurrentLevel] := SalesCommentLine.FIND('-');
            FieldValue.SalesCommentLine_44(SalesCommentLine,0);
          END;
         //TM BEG 070715
         4:
           BEGIN
            Package.RESET;
            //Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID","Location Code");
            Package.SETRANGE("Source Subtype", SalesHeader."Document Type");
            Package.SETRANGE("Source ID", SalesHeader."No.");
            Package.SETRANGE("Source Type", DATABASE::"Sales Header");
            RecordFound[CurrentLevel] := Package.FIND('-');
            FieldValue.Package_14000701(Package, 0);
           END;
         5:
          BEGIN
           PackageLine.RESET;
           PackageLine.SETRANGE("Package No.", Package."No.");
           RecordFound[CurrentLevel] := PackageLine.FIND('-');
           FieldValue.PackageLine_14000702(PackageLine, 0);
          END;
         //TM END 070715
        ELSE
          ERROR(Text020,CurrentLevel);
      END;
    END;

    LOCAL PROCEDURE GetNextRecordInLoop@4(CurrentLevel@1000000000 : Integer);
    BEGIN
      CASE CurrentLevel OF
        2:
          BEGIN
            RecordFound[CurrentLevel] := SalesLine.NEXT <> 0;
            FieldValue.SalesLine_37(SalesLine,0);
          END;
        3:
          BEGIN
            RecordFound[CurrentLevel] := SalesCommentLine.NEXT <> 0;
            FieldValue.SalesCommentLine_44(SalesCommentLine,0);
          END;
        //TM BEG 070715
        4:
          BEGIN
            RecordFound[CurrentLevel] := Package.NEXT <> 0;
            FieldValue.Package_14000701(Package,0);
          END;
        5:
          BEGIN
            RecordFound[CurrentLevel] := PackageLine.NEXT <> 0;
            FieldValue.PackageLine_14000702(PackageLine,0);
          END;
        //TM END 070715
        ELSE
          ERROR(Text020,CurrentLevel);
      END;
    END;

    PROCEDURE SaveReport@8(ReportNo@1000000000 : Integer;VAR SaveFileName@1000000001 : Text[250]);
    BEGIN
      SalesHeader.SETRECFILTER;
      IF ISSERVICETIER THEN BEGIN
        EMailSetup.ChangeFilenameToPDF(SaveFileName);
        REPORT.SAVEASPDF(ReportNo,SaveFileName,SalesHeader);
      END ELSE
        REPORT.SAVEASHTML(ReportNo,SaveFileName,SalesHeader);
    END;

    PROCEDURE GetReceiverList@10(VAR GetEMailListEntryTmp@1240030000 : Record 14000908);
    BEGIN
      GetInitialRecords;

      GetEMailListEntryTmp.RESET;
      IF GetEMailListEntryTmp.FIND('-') THEN
        ERROR(Text021);

      EMailListEntryTmp.RESET;
      IF EMailListEntryTmp.FIND('-') THEN
        REPEAT
          GetEMailListEntryTmp := EMailListEntryTmp;
          GetEMailListEntryTmp.INSERT;
        UNTIL EMailListEntryTmp.NEXT = 0;
    END;

    BEGIN
    {
      The Code that customize the running of the report should be done in the 4 triggers
      GetInitialRecords
        This is where all the values needed for the general information in the E-Mail are retrived.
        Additional tables could be added in the information was needed.

      ModifyRecords
        This is the final step, where the status of some records are modified. This could be used to
        change a field telling that the E-Mail has been sent.

      GetFirstRecordInLoop
        This will get the first record in each level. This also adjust some variables and contol that the
        flow of multilevel tables are correct. Like the printing of Posted Container/Posted Container Line.

      GetNextRecordInLoop
        This will retrieve the next record for each level.

      SaveReport
        This will run and save a specific report in HTML or PDF(only for NAV 2009 RTC and higher).
      2019-06-26 TPZ2584 UCHOUHAN
        Added code to filter division wise.
    }
    END.
  }
  RDLDATA
  {
  }
}

