OBJECT Report 50035 Topaz Load EDI Cross Ref.
{
  OBJECT-PROPERTIES
  {
    Date=07/01/20;
    Time=12:00:00 AM;
    Modified=Yes;
    Version List=TPZ000.00.00;
  }
  PROPERTIES
  {
    OnPreReport=BEGIN
                  IF USERID <> 'TOPAZ\SDESAI' THEN
                    ERROR('You cannot run this report !');

                  CustRec.RESET;
                  CustRec.SETRANGE("Customer Group Code",'GEXPRO');
                  CustRec.MODIFYALL(CustRec."External No.",'');
                END;

  }
  DATASET
  {
    { 1000000000;;DataItem;                  ;
               DataItemTable=Table50018;
               OnPreDataItem=BEGIN
                               {CustRec.RESET;
                               CustRec.SETRANGE(CustRec."Customer Group Code",'REXEL');
                               CustRec.FINDFIRST;}
                               SETRANGE(Rexel_Gexpro,'G');
                             END;

               OnAfterGetRecord=BEGIN
                                  "EDI Branch List"."Customer No." := '';
                                  "EDI Branch List"."Ship-to Code" := '';

                                  "Ship-toAddRec".RESET;
                                  "Ship-toAddRec".SETFILTER(Address, '%1', UPPERCASE(COPYSTR("Ship-to Address",1,9)));
                                  "Ship-toAddRec".SETRANGE(City,"EDI Branch List"."Ship-to City");
                                  "Ship-toAddRec".SETRANGE(County,"EDI Branch List"."Ship-to State");
                                  "Ship-toAddRec".SETRANGE("Post Code",COPYSTR("EDI Branch List"."Ship-to Zip",1,5));
                                  //IF NOT "Ship-toAddRec".FINDFIRST THEN
                                  // "Ship-toAddRec".SETRANGE(Address);
                                  //IF NOT "Ship-toAddRec".FINDFIRST THEN
                                  // "Ship-toAddRec".SETRANGE(County);
                                  IF "Ship-toAddRec".FINDFIRST THEN BEGIN
                                    FoundIt := FALSE;
                                    REPEAT
                                      IF (CustRec.GET("Ship-toAddRec"."Customer No.")) AND
                                        (CustRec."Customer Group Code" ='GEXPRO')
                                      THEN BEGIN
                                        "EDI Branch List"."Customer No." := CustRec."No.";
                                        "EDI Branch List"."Ship-to Code" := "Ship-toAddRec".Code;
                                        "EDI Branch List".MODIFY;
                                        FoundIt := TRUE;
                                      END;
                                    UNTIL(("Ship-toAddRec".NEXT = 0) OR FoundIt);
                                  END;
                                END;

               ReqFilterFields=Branch No. }

    { 1000000001;;DataItem;UpdateEDICrossRef ;
               DataItemTable=Table50018;
               DataItemTableView=WHERE(Customer No.=FILTER(<>''));
               OnPreDataItem=BEGIN
                               TradePartRec.GET('GEXPRO');
                               LineNo := 0;
                               SETRANGE(Rexel_Gexpro,'G');
                             END;

               OnAfterGetRecord=BEGIN

                                  CustRec.GET("Customer No.");
                                  CustRec."EDI Invoice" := CustRec."EDI Invoice"::Always;
                                  CustRec."EDI Trade Partner" := TradePartRec."No.";
                                  CustRec."External No." := UpdateEDICrossRef."Branch No.";
                                  CustRec.MODIFY;

                                  "Ship-toAddRec".GET(CustRec."No.",UpdateEDICrossRef."Ship-to Code");
                                  LineNo += 1;
                                  EDICustCrossRef.INIT;
                                  EDICustCrossRef."Trade Partner No." := TradePartRec."No.";
                                  EDICustCrossRef."Line No." := LineNo;
                                  EDICustCrossRef.INSERT;
                                  EDICustCrossRef."Navision Sell To Code" := UpdateEDICrossRef."Customer No.";
                                  EDICustCrossRef."Navision Ship To Code" := UpdateEDICrossRef."Ship-to Code";
                                  EDICustCrossRef."EDI Sell To Code" := TradePartRec."ISA Trade Ptnr. No.";
                                  EDICustCrossRef."EDI Ship To Code" := UpdateEDICrossRef.DUNS_P_4;
                                  EDICustCrossRef."Ship-to Type" := EDICustCrossRef."Ship-to Type"::Store;
                                  EDICustCrossRef.Comment := 'Imported from Excel Sheet';
                                  EDICustCrossRef.MODIFY(TRUE);
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      "Ship-toAddRec"@1000000000 : Record 222;
      CustRec@1000000001 : Record 18;
      FoundIt@1000000002 : Boolean;
      EDICustCrossRef@1000000003 : Record 14002362;
      TradePartRec@1000000004 : Record 14002360;
      LineNo@1000000005 : Integer;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns:cl="http://schemas.microsoft.com/sqlserver/reporting/2010/01/componentdefinition" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <Code>Public Function BlankZero(ByVal Value As Decimal)
    if Value = 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankPos(ByVal Value As Decimal)
    if Value &gt; 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankZeroAndPos(ByVal Value As Decimal)
    if Value &gt;= 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankNeg(ByVal Value As Decimal)
    if Value &lt; 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankNegAndZero(ByVal Value As Decimal)
    if Value &lt;= 0 then
        Return ""
    end if
    Return Value
End Function
</Code>
  <Language>=User!Language</Language>
  <ConsumeContainerWhitespace>true</ConsumeContainerWhitespace>
  <rd:ReportID>0eeb6585-38ae-40f1-885b-8d50088d51b4</rd:ReportID>
  <rd:ReportUnitType>Inch</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

