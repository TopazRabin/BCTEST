OBJECT Report 51469 Excel Buffer Import
{
  OBJECT-PROPERTIES
  {
    Date=11/20/20;
    Time=10:10:48 AM;
    Modified=Yes;
    Version List=NAVW110.00.00.18197,NAVW17.10;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Import Cost Budget from Excel;
               ESM=Importar ppto. costes de Excel;
               FRC=Importer budget des co–ts d'Excel;
               ENC=Import Cost Budget from Excel];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  ExcelBuffer.DELETEALL;
                  "Cost Budget Buffer".DELETEALL;
                  ExcelBuffer.LOCKTABLE;
                  "Cost Budget Buffer".LOCKTABLE;


                  ExcelBuffer.OpenBook(ServerFileName,SheetName);
                  ExcelBuffer.ReadSheet;

                  AnalyzeData;
                END;

    OnPostReport=BEGIN
                   //ExcelBuffer.DELETEALL;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table1114;
               DataItemTableView=SORTING(Cost Type No.,Cost Center Code,Cost Object Code,Date);
               OnPreDataItem=BEGIN
                               RecNo := 0;
                               {
                               IF NOT CostBudgetName.GET(ToCostBudgetName) THEN BEGIN
                                 IF NOT CONFIRM(Text001,FALSE,CostBudgetName.TABLECAPTION,ToCostBudgetName) THEN
                                   CurrReport.BREAK;
                                 CostBudgetName.Name := ToCostBudgetName;
                                 CostBudgetName.INSERT;
                               END ELSE BEGIN
                                 IF NOT CONFIRM(Text003,FALSE,LOWERCASE(FORMAT(SELECTSTR(ImportOption + 1,Text027))),ToCostBudgetName) THEN
                                   CurrReport.BREAK;
                               END;
                               }
                             END;

               OnAfterGetRecord=BEGIN
                                  RecNo := RecNo + 1;
                                  IF RecNo = 1 THEN BEGIN
                                    Window.OPEN(
                                      Text028 +
                                      '@1@@@@@@@@@@@@@@@@@@@@@@@@@\');
                                    TotalRecNo := COUNT;
                                    Window.UPDATE(1,0);
                                  END;
                                  IF ImportOption = ImportOption::"Replace entries" THEN BEGIN
                                  {
                                    CostBudgetEntry.SETRANGE("Cost Type No.","Cost Type No.");
                                    CostBudgetEntry.SETRANGE(Date,Date);
                                    CostBudgetEntry.SETFILTER("Entry No.",'<=%1',LastEntryNoBeforeImport);
                                    IF NOT CostBudgetEntry.ISEMPTY THEN
                                      CostBudgetEntry.DELETEALL(TRUE);
                                  }
                                  END;

                                  IF Amount = 0 THEN
                                    CurrReport.SKIP;
                                  IF NOT IsLineTypeCostType("Cost Type No.") THEN
                                    CurrReport.SKIP;
                                  {
                                  CostBudgetEntry.INIT;
                                  CostBudgetEntry."Entry No." := EntryNo;
                                  CostBudgetEntry."Budget Name" := ToCostBudgetName;
                                  CostBudgetEntry."Cost Type No." := "Cost Type No.";
                                  CostBudgetEntry.Date := Date;
                                  CostBudgetEntry.Amount := ROUND(Amount);
                                  CostBudgetEntry.Description := Description;
                                  CostBudgetEntry."Cost Center Code" := "Cost Center Code";
                                  CostBudgetEntry."Cost Object Code" := "Cost Object Code";
                                  CostBudgetEntry.INSERT(TRUE);
                                  }
                                  EntryNo := EntryNo + 1;
                                  Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
                                END;

               OnPostDataItem=BEGIN
                                //IF RecNo > 0 THEN
                                  MESSAGE(Text004,RecNo);
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnQueryClosePage=VAR
                         FileMgt@1001 : Codeunit 419;
                       BEGIN
                         IF CloseAction = ACTION::OK THEN BEGIN
                           ServerFileName := FileMgt.UploadFile(Text006,ExcelFileExtensionTok);
                           IF ServerFileName = '' THEN
                             EXIT(FALSE);

                           SheetName := ExcelBuffer.SelectSheetsName(ServerFileName);
                           IF SheetName = '' THEN
                             EXIT(FALSE);
                         END;
                       END;

    }
    CONTROLS
    {
      { 9   ;0   ;Container ;
                  ContainerType=ContentArea }

      { 8   ;1   ;Group     ;
                  CaptionML=[ENU=Options;
                             ESM=Opciones;
                             FRC=Options;
                             ENC=Options] }

      { 3   ;2   ;Field     ;
                  CaptionML=[ENU=Budget Name;
                             ESM=Nombre ppto.;
                             FRC=Nom du budget;
                             ENC=Budget Name];
                  SourceExpr=ToCostBudgetName;
                  TableRelation="Cost Budget Name" }

      { 2   ;2   ;Field     ;
                  CaptionML=[ENU=Option;
                             ESM=Opci¢n;
                             FRC=Option;
                             ENC=Option];
                  OptionCaptionML=[ENU=Replace entries,Add entries;
                                   ESM=Reemplazar movs.,A¤adir movs.;
                                   FRC=Remplacer ‚critures,Ajouter ‚critures;
                                   ENC=Replace entries,Add entries];
                  SourceExpr=ImportOption }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Description;
                             ESM=Descripci¢n;
                             FRC=Description;
                             ENC=Description];
                  SourceExpr=Description }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ExcelBuffer@1021 : Record 370;
      Window@1007 : Dialog;
      ServerFileName@1025 : Text;
      SheetName@1013 : Text[250];
      ToCostBudgetName@1012 : Code[10];
      EntryNo@1011 : Integer;
      LastEntryNoBeforeImport@1010 : Integer;
      TotalRecNo@1009 : Integer;
      RecNo@1008 : Integer;
      Description@1006 : Text[50];
      ImportOption@1005 : 'Replace entries,Add entries';
      Text000@1038 : TextConst 'ENU=You must specify a budget name to which to import.;ESM=Debe especificar un nombre de ppto. al que importar.;FRC=Vous devez sp‚cifier le nom du budget vers lequel vous souhaitez proc‚der … l''importation.;ENC=You must specify a budget name to which to import.';
      Text001@1037 : TextConst 'ENU=Do you want to create %1 with the name %2?;ESM=¨Desea crear %1 con el nombre %2?;FRC=Souhaitez-vous cr‚er %1 avec le nom %2ÿ?;ENC=Do you want to create %1 with the name %2?';
      Text003@1035 : TextConst 'ENU=Are you sure that you want to %1 for the budget name %2?;ESM=¨Est  seguro de que desea %1 para el nombre ppto. %2?;FRC=Òtes-vous s–r de vouloir %1 pour le nom du budget %2ÿ?;ENC=Are you sure that you want to %1 for the budget name %2?';
      Text004@1034 : TextConst 'ENU=%1 table has been successfully updated with %2 entries.;ESM=%1 tabla se ha actualizado correctamente con %2 movs.;FRC=La table %1 a ‚t‚ mise … jour avec succŠs avec %2 ‚criture(s).;ENC=%1 table has been successfully updated with %2 entries.';
      Text006@1032 : TextConst 'ENU=Import Excel File;ESM=Importar fich. Excel;FRC=Importer fichier Excel;ENC=Import Excel File';
      Text007@1031 : TextConst 'ENU=Analyzing Data...\\;ESM=Analizar Datos...\\;FRC=Analyse des donn‚es...\\;ENC=Analysing Data...\\';
      Text009@1029 : TextConst 'ENU=Cost Type No;ESM=N§ tipo coste;FRC=Nø type co–t;ENC=Cost Type No';
      Text011@1027 : TextConst 'ENU=The text %1 can only be specified once in the Excel worksheet.;ESM=El texto %1 s¢lo se puede especificar una vez en la hoja de Excel.;FRC=Le texte %1 peut ˆtre indiqu‚ une seule fois dans la feuille de calcul Excel.;ENC=The text %1 can only be specified once in the Excel worksheet.';
      Text014@1026 : TextConst 'ENU=Date;ESM=Fecha;FRC=Date;ENC=Date';
      Text017@1023 : TextConst 'ENU=Cost Center Code;ESM=C¢digo centro coste;FRC=Code centre de co–ts;ENC=Cost Centre Code';
      Text018@1022 : TextConst 'ENU=Cost Object Code;ESM=C¢digo objeto coste;FRC=Code co–ts associ‚s;ENC=Cost Object Code';
      Text019@1004 : TextConst 'ENU=You cannot import %1 value, which is not available in the %2 table.;ESM=No puede importar el valor %1, que no est  disponible en la tabla %2.;FRC=Vous ne pouvez pas importer la valeur %1, qui n''est pas disponible dans la table %2.;ENC=You cannot import %1 value, which is not available in the %2 table.';
      Text023@1003 : TextConst 'ENU=You cannot import the same information more than once.;ESM=No puede importar la misma informaci¢n m s de una vez.;FRC=Vous ne pouvez pas importer plusieurs fois la mˆme information.;ENC=You cannot import the same information more than once.';
      Text025@1002 : TextConst 'ENU=Cost Types have not been found in the Excel worksheet.;ESM=Los tipos de coste no se han encontrado en la hoja de Excel.;FRC=Les types de co–ts n''ont pas ‚t‚ trouv‚s dans la feuille Excel.;ENC=Cost Types have not been found in the Excel worksheet.';
      Text026@1001 : TextConst 'ENU=Dates have not been recognized in the Excel worksheet.;ESM=Las fechas no se han reorganizado en la hoja de Excel.;FRC=Les dates n''ont pas ‚t‚ reconnues dans la feuille Excel.;ENC=Dates have not been recognized in the Excel worksheet.';
      Text027@1000 : TextConst 'ENU=Replace entries,Add entries;ESM=Reemplazar movs.,A¤adir movs.;FRC=Remplacer ‚critures,Ajouter ‚critures;ENC=Replace entries,Add entries';
      Text028@1024 : TextConst 'ENU=Importing from Excel worksheet;ESM=Importando desde hoja de trabajo de Excel;FRC=Importation … partir d''un classeur Excel;ENC=Importing from Excel worksheet';
      ExcelFileExtensionTok@1014 : TextConst '@@@={Locked};ENU=.xlsx;ESM=.xlsx;FRC=.xlsx;ENC=.xlsx';
      ItemAttributeValueMapping@1000000000 : Record 7505;
      TempItemAttributeValueMapping@1000000001 : TEMPORARY Record 7505;
      Item@1000000002 : Record 27;

    LOCAL PROCEDURE AnalyzeData@2();
    VAR
      TempExcelBuffer@1000 : TEMPORARY Record 370;
      CostBudgetBuffer@1001 : Record 1114;
      CostBudgetBuffer2@1002 : Record 1114;
      CostCenter@1004 : Record 1112;
      CostObject@1007 : Record 1113;
      HeaderRowNo@1003 : Integer;
      TestDateTime@1005 : DateTime;
      OldRowNo@1006 : Integer;
    BEGIN
      TempItemAttributeValueMapping.DELETEALL;
      Window.OPEN(
        Text007 +
        '@1@@@@@@@@@@@@@@@@@@@@@@@@@\');
      Window.UPDATE(1,0);
      TotalRecNo := ExcelBuffer.COUNT;
      RecNo := 0;
      CostBudgetBuffer2.INIT;
      CostBudgetBuffer.DELETEALL;

      IF ExcelBuffer.FIND('-') THEN BEGIN
        REPEAT
          RecNo := RecNo + 1;
          Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
          CASE ExcelBuffer."Column No." OF
            1 : BEGIN
              {
              TempItemAttributeValueMapping.DELETEALL;
              EVALUATE(TempItemAttributeValueMapping."Table ID",ExcelBuffer."Cell Value as Text");
              }
              IF Item.GET(ExcelBuffer."Cell Value as Text") THEN BEGIN
                Item."Override Sales Order Multiple" := TRUE;
                Item.MODIFY;
              END;

            END;
            2 : TempItemAttributeValueMapping."No." := ExcelBuffer."Cell Value as Text";
            3 : EVALUATE(TempItemAttributeValueMapping."Item Attribute ID" , ExcelBuffer."Cell Value as Text");
            4: BEGIN
              EVALUATE(TempItemAttributeValueMapping."Item Attribute Value ID" , ExcelBuffer."Cell Value as Text");
              IF NOT ItemAttributeValueMapping.GET(TempItemAttributeValueMapping."Table ID",TempItemAttributeValueMapping."No.",
                TempItemAttributeValueMapping."Item Attribute ID") THEN BEGIN
                ItemAttributeValueMapping.INIT;
                ItemAttributeValueMapping."Table ID" := 27;
                ItemAttributeValueMapping."No." := TempItemAttributeValueMapping."No.";
                ItemAttributeValueMapping."Item Attribute ID" := TempItemAttributeValueMapping."Item Attribute ID";
                ItemAttributeValueMapping."Item Attribute Value ID" := TempItemAttributeValueMapping."Item Attribute Value ID";
                ItemAttributeValueMapping.INSERT;
              END ELSE BEGIN
                //ItemAttributeValueMapping."Item Attribute Value ID" := TempItemAttributeValueMapping."Item Attribute Value ID";
                EVALUATE(ItemAttributeValueMapping."Item Attribute Value ID" , ExcelBuffer."Cell Value as Text");
                ItemAttributeValueMapping.MODIFY;

              END;
            END;
          END;
          CASE TRUE OF
            STRPOS(UPPERCASE(ExcelBuffer."Cell Value as Text"),UPPERCASE(Text009)) <> 0:
              BEGIN
                IF HeaderRowNo = 0 THEN BEGIN
                  HeaderRowNo := ExcelBuffer."Row No.";
                  InsertTempExcelBuffer(ExcelBuffer,TempExcelBuffer,Text009);
                END ELSE
                  ERROR(Text011,Text009);
              END;
            STRPOS(UPPERCASE(ExcelBuffer."Cell Value as Text"),UPPERCASE(Text017)) <> 0:
              BEGIN
                IF HeaderRowNo = ExcelBuffer."Row No." THEN
                  InsertTempExcelBuffer(ExcelBuffer,TempExcelBuffer,Text017)
                ELSE
                  IF (HeaderRowNo < ExcelBuffer."Row No.") AND (HeaderRowNo <> 0) THEN
                    ERROR(Text011,Text017);
              END;
            STRPOS(UPPERCASE(ExcelBuffer."Cell Value as Text"),UPPERCASE(Text018)) <> 0:
              BEGIN
                IF HeaderRowNo = ExcelBuffer."Row No." THEN
                  InsertTempExcelBuffer(ExcelBuffer,TempExcelBuffer,Text018)
                ELSE
                  IF (HeaderRowNo < ExcelBuffer."Row No.") AND (HeaderRowNo <> 0) THEN
                    ERROR(Text011,Text018);
              END;
            ExcelBuffer."Row No." = HeaderRowNo:
              BEGIN
                TempExcelBuffer := ExcelBuffer;
                IF EVALUATE(TestDateTime,TempExcelBuffer."Cell Value as Text") THEN BEGIN
                  TempExcelBuffer."Cell Value as Text" := FORMAT(DT2DATE(TestDateTime));
                  TempExcelBuffer.Comment := Text014;
                  TempExcelBuffer.INSERT;
                END;
              END;
            (ExcelBuffer."Row No." > HeaderRowNo) AND (HeaderRowNo > 0):
              BEGIN
                IF ExcelBuffer."Row No." <> OldRowNo THEN BEGIN
                  OldRowNo := ExcelBuffer."Row No.";
                  CLEAR(CostBudgetBuffer2);
                END;
                {
                TempExcelBuffer.SETRANGE("Column No.",ExcelBuffer."Column No.");
                IF TempExcelBuffer.FIND('-') THEN
                  CASE TempExcelBuffer."Column No." OF
                    1 : BEGIN
                      TempItemAttributeValueMapping.DELETEALL;
                      EVALUATE(TempItemAttributeValueMapping."Table ID",TempExcelBuffer."Cell Value as Text");
                    END;
                    2 : TempItemAttributeValueMapping."No." := TempExcelBuffer."Cell Value as Text";
                    3 : EVALUATE(TempItemAttributeValueMapping."Item Attribute ID" , TempExcelBuffer."Cell Value as Text");
                    4: BEGIN
                      EVALUATE(TempItemAttributeValueMapping."Item Attribute Value ID" , TempExcelBuffer."Cell Value as Text");
                      IF NOT ItemAttributeValueMapping.GET(TempItemAttributeValueMapping."Table ID",TempItemAttributeValueMapping."No.",
                        TempItemAttributeValueMapping."Item Attribute ID") THEN BEGIN
                        ItemAttributeValueMapping.INIT;
                        ItemAttributeValueMapping."Table ID" := 27;
                        ItemAttributeValueMapping."No." := TempItemAttributeValueMapping."No.";
                        ItemAttributeValueMapping."Item Attribute ID" := TempItemAttributeValueMapping."Item Attribute ID";
                        ItemAttributeValueMapping."Item Attribute Value ID" := TempItemAttributeValueMapping."Item Attribute Value ID";
                        ItemAttributeValueMapping.INSERT;
                      END ELSE BEGIN
                        ItemAttributeValueMapping."Item Attribute Value ID" := TempItemAttributeValueMapping."Item Attribute Value ID";
                        ItemAttributeValueMapping.MODIFY;

                      END;
                    END;

                  END;
                  }
              END;
          END;
        UNTIL ExcelBuffer.NEXT = 0;
      END;

      Window.CLOSE;
      {
      TempExcelBuffer.RESET;
      TempExcelBuffer.SETRANGE(Comment,Text009);
      IF NOT TempExcelBuffer.FINDFIRST THEN
        ERROR(Text025);
      TempExcelBuffer.SETRANGE(Comment,Text014);
      IF NOT TempExcelBuffer.FINDFIRST THEN
        ERROR(Text026);
      }
    END;

    PROCEDURE SetGLBudgetName@3(NewToCostBudgetName@1000 : Code[10]);
    BEGIN
      ToCostBudgetName := NewToCostBudgetName;
    END;

    LOCAL PROCEDURE IsLineTypeCostType@7(CostTypeNo@1001 : Code[20]) : Boolean;
    VAR
      CostType@1000 : Record 1103;
    BEGIN
      IF NOT CostType.GET(CostTypeNo) THEN
        EXIT(FALSE);
      EXIT(CostType.Type = CostType.Type::"Cost Type");
    END;

    LOCAL PROCEDURE InsertTempExcelBuffer@9(VAR ExcelBuffer@1003 : Record 370;VAR TempExcelBuffer@1002 : TEMPORARY Record 370;Text@1001 : Text[250]);
    BEGIN
      TempExcelBuffer := ExcelBuffer;
      TempExcelBuffer.Comment := Text;
      TempExcelBuffer.INSERT;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

