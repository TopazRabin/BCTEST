OBJECT Report 14002657 Create Vendor Forecast
{
  OBJECT-PROPERTIES
  {
    Date=11/01/20;
    Time=12:00:00 PM;
    Version List=UBP3.03;
  }
  PROPERTIES
  {
    CaptionML=ENU=Create Vendor Forecast;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   AdvForcSetup.GET;
                   IF AdvForcSetup."Periods to Calculate" <= 0 THEN
                     AdvForcSetup."Periods to Calculate" := AdvForcSetup."Periods to Forecast";
                   PeriodsToForecast := AdvForcSetup."Periods to Calculate";
                 END;

    OnPreReport=BEGIN
                  InvMgtSetup.GET;
                END;

    OnPostReport=BEGIN
                   ProgWindow.CLOSE;
                 END;

  }
  DATASET
  {
    { 3182;    ;DataItem;                    ;
               DataItemTable=Table23;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               ProgWindow.OPEN(
                                 Text001 + '...\' +
                                 PADSTR(Text002,15) + '#1##################\' +
                                 PADSTR(Text003,15) + '#2########\' +
                                 PADSTR(Text004,15) + '#3##################');
                             END;

               OnAfterGetRecord=BEGIN
                                  ProgWindow.UPDATE(1,Vendor."No.");
                                END;

               ReqFilterFields=No. }

    { 8043;1   ;DataItem;                    ;
               DataItemTable=Table14002705;
               DataItemTableView=SORTING(Vendor No.)
                                 ORDER(Ascending);
               DataItemLink=Vendor No.=FIELD(No.) }

    { 4564;2   ;DataItem;                    ;
               DataItemTable=Table14000555;
               DataItemTableView=SORTING(Location Code,Replenishment Source Type,Replenishment Source Code)
                                 ORDER(Ascending)
                                 WHERE(Replenishment Source Type=CONST(Vendor));
               OnPreDataItem=BEGIN
                               ForecastVendLine.RESET;
                               ForecastVendLine.SETRANGE("Vendor No.","Forecast Vendor"."Vendor No.");
                               ForecastVendLine.DELETEALL;
                               First := TRUE;
                             END;

               OnAfterGetRecord=VAR
                                  Forecast@1240020000 : Codeunit 14000567;
                                  MinSOQ@1240020001 : Decimal;
                                  Period@1240020002 : Integer;
                                  AdjustedPeriod@1240020003 : Integer;
                                  AdjustedDate@1240020004 : Date;
                                  LTHDays@1240020005 : Integer;
                                  LTHDate@1240020006 : Date;
                                  i@1240020007 : Integer;
                                BEGIN
                                  ProgWindow.UPDATE(2,"Procurement Unit"."Location Code");
                                  ProgWindow.UPDATE(3,"Procurement Unit"."Item No.");

                                  IF (Location.Code <> "Procurement Unit"."Location Code") AND ("Procurement Unit"."Location Code" <> '') THEN
                                      Location.GET("Procurement Unit"."Location Code");

                                  IF First THEN BEGIN
                                    First := FALSE;
                                    ForecastVendLine.INIT;
                                    ForecastVendLine."Vendor No." := "Forecast Vendor"."Vendor No.";
                                    ForecastVendLine.Type := ForecastVendLine.Type::Title;
                                    Forecast.CalcForecast("Procurement Unit",PeriodsToForecast,'',FALSE, TRUE);
                                    Period := 0;
                                    CLEAR(ForcInvPeriodEndArray);
                                    CLEAR(ForcInvPeriodStartArray);
                                    REPEAT
                                      Period := Period + 1;
                                      ForcInvPeriodEndArray[Period] := Forecast.GetPeriodEndingDate(Period);
                                      ForcInvPeriodStartArray[Period] := Forecast.GetPeriodStartingDate(Period);

                                      CASE Period OF
                                        1:
                                          ForecastVendLine."Period 1" := FORMAT(ForcInvPeriodStartArray[Period]);
                                        2:
                                          ForecastVendLine."Period 2" := FORMAT(ForcInvPeriodStartArray[Period]);
                                        3:
                                          ForecastVendLine."Period 3" := FORMAT(ForcInvPeriodStartArray[Period]);
                                        4:
                                          ForecastVendLine."Period 4" := FORMAT(ForcInvPeriodStartArray[Period]);
                                        5:
                                          ForecastVendLine."Period 5" := FORMAT(ForcInvPeriodStartArray[Period]);
                                        6:
                                          ForecastVendLine."Period 6" := FORMAT(ForcInvPeriodStartArray[Period]);
                                        7:
                                          ForecastVendLine."Period 7" := FORMAT(ForcInvPeriodStartArray[Period]);
                                        8:
                                          ForecastVendLine."Period 8" := FORMAT(ForcInvPeriodStartArray[Period]);
                                        9:
                                          ForecastVendLine."Period 9" := FORMAT(ForcInvPeriodStartArray[Period]);
                                        10:
                                          ForecastVendLine."Period 10" := FORMAT(ForcInvPeriodStartArray[Period]);
                                        11:
                                          ForecastVendLine."Period 11" := FORMAT(ForcInvPeriodStartArray[Period]);
                                        12:
                                          ForecastVendLine."Period 12" := FORMAT(ForcInvPeriodStartArray[Period]);
                                        13:
                                          ForecastVendLine."Period 13" := FORMAT(ForcInvPeriodStartArray[Period]);
                                        14:
                                          ForecastVendLine."Period 14" := FORMAT(ForcInvPeriodStartArray[Period]);
                                        15:
                                          ForecastVendLine."Period 15" := FORMAT(ForcInvPeriodStartArray[Period]);
                                      END;
                                    UNTIL Period = PeriodsToForecast;
                                    ForecastVendLine.INSERT(TRUE);
                                  END;

                                  ForecastVendLine.INIT;
                                  ForecastVendLine."Vendor No." := "Forecast Vendor"."Vendor No.";
                                  ForecastVendLine."Location Code" := "Procurement Unit"."Location Code";
                                  ForecastVendLine."Item No." := "Procurement Unit"."Item No.";
                                  ForecastVendLine."Variant Code" := "Procurement Unit"."Variant Code";
                                  ForecastVendLine.Type := ForecastVendLine.Type::Forecast;

                                  Period := 0;
                                  AccumTotal := 0;
                                  CLEAR(PurchQtyArray);

                                  IF UseAntcipateOrderDate THEN BEGIN
                                    LTHDate := UBP.GetLeadTimeHorizHub("Procurement Unit");
                                    LTHDays := (LTHDate - WORKDATE) + 1;
                                    ForecastVendLine."Lead Time Horizon Days" := LTHDays;
                                  END;

                                  REPEAT
                                    Period := Period + 1;
                                    MinSOQ := 0;
                                    MinSOQ := CalcVendorReplenishment("Procurement Unit", ForcInvPeriodEndArray[Period]);

                                    IF UseAntcipateOrderDate THEN BEGIN
                                      IF LTHDays > 0 THEN BEGIN
                                        AdjustedDate := CALCDATE(STRSUBSTNO('<-%1D>', LTHDays),ForcInvPeriodEndArray[Period]);
                                        IF AdjustedDate < ForcInvPeriodEndArray[1] THEN BEGIN
                                          AdjustedDate := ForcInvPeriodEndArray[1];
                                          AdjustedPeriod := 1;
                                        END ELSE BEGIN
                                          i := 1;
                                          WHILE(i <= PeriodsToForecast) DO BEGIN
                                            IF (i = PeriodsToForecast) THEN BEGIN
                                              AdjustedPeriod := i;
                                            END ELSE BEGIN
                                              IF (AdjustedDate >= ForcInvPeriodStartArray[i]) AND (AdjustedDate <= ForcInvPeriodEndArray[i]) THEN BEGIN
                                                AdjustedPeriod := i;
                                                i := PeriodsToForecast + 1; // end loop
                                              END;
                                            END;
                                            i := i + 1;
                                          END;
                                        END;
                                      END;
                                    END ELSE
                                      AdjustedPeriod := Period;

                                    PurchQtyArray[AdjustedPeriod] += MinSOQ;
                                    CASE Period OF
                                      1:
                                      BEGIN
                                        ForecastVendLine."Period 1 Date" := ForcInvPeriodEndArray[Period];
                                      END;
                                      2:
                                      BEGIN
                                        ForecastVendLine."Period 2 Date" := ForcInvPeriodEndArray[Period];
                                      END;
                                      3:
                                      BEGIN
                                        ForecastVendLine."Period 3 Date" := ForcInvPeriodEndArray[Period];
                                      END;
                                      4:
                                      BEGIN
                                        ForecastVendLine."Period 4 Date" := ForcInvPeriodEndArray[Period];
                                      END;
                                      5:
                                      BEGIN
                                        ForecastVendLine."Period 5 Date" := ForcInvPeriodEndArray[Period];
                                      END;
                                      6:
                                      BEGIN
                                        ForecastVendLine."Period 6 Date" := ForcInvPeriodEndArray[Period];
                                      END;
                                      7:
                                      BEGIN
                                        ForecastVendLine."Period 7 Date" := ForcInvPeriodEndArray[Period];
                                      END;
                                      8:
                                      BEGIN
                                        ForecastVendLine."Period 8 Date" := ForcInvPeriodEndArray[Period];
                                      END;
                                      9:
                                      BEGIN
                                        ForecastVendLine."Period 9 Date" := ForcInvPeriodEndArray[Period];
                                      END;
                                      10:
                                      BEGIN
                                        ForecastVendLine."Period 10 Date" := ForcInvPeriodEndArray[Period];
                                      END;
                                      11:
                                      BEGIN
                                        ForecastVendLine."Period 11 Date" := ForcInvPeriodEndArray[Period];
                                      END;
                                      12:
                                      BEGIN
                                        ForecastVendLine."Period 12 Date" := ForcInvPeriodEndArray[Period];
                                      END;
                                      13:
                                      BEGIN
                                        ForecastVendLine."Period 13 Date" := ForcInvPeriodEndArray[Period];
                                      END;
                                      14:
                                      BEGIN
                                        ForecastVendLine."Period 14 Date" := ForcInvPeriodEndArray[Period];
                                      END;
                                      15:
                                      BEGIN
                                        ForecastVendLine."Period 15 Date" := ForcInvPeriodEndArray[Period];
                                      END;
                                    END;
                                  UNTIL Period = PeriodsToForecast;

                                  FOR i := 1 TO PeriodsToForecast DO BEGIN
                                    CASE i OF
                                        1:
                                        BEGIN
                                          ForecastVendLine.VALIDATE("Period 1 Qty.",PurchQtyArray[i]);
                                        END;
                                        2:
                                        BEGIN
                                          ForecastVendLine.VALIDATE("Period 2 Qty.",PurchQtyArray[i]);
                                        END;
                                        3:
                                        BEGIN
                                          ForecastVendLine.VALIDATE("Period 3 Qty.",PurchQtyArray[i]);
                                        END;
                                        4:
                                        BEGIN
                                          ForecastVendLine.VALIDATE("Period 4 Qty.",PurchQtyArray[i]);
                                        END;
                                        5:
                                        BEGIN
                                          ForecastVendLine.VALIDATE("Period 5 Qty.",PurchQtyArray[i]);
                                        END;
                                        6:
                                        BEGIN
                                          ForecastVendLine.VALIDATE("Period 6 Qty.",PurchQtyArray[i]);
                                        END;
                                        7:
                                        BEGIN
                                          ForecastVendLine.VALIDATE("Period 7 Qty.",PurchQtyArray[i]);
                                        END;
                                        8:
                                        BEGIN
                                          ForecastVendLine.VALIDATE("Period 8 Qty.",PurchQtyArray[i]);
                                        END;
                                        9:
                                        BEGIN
                                          ForecastVendLine.VALIDATE("Period 9 Qty.",PurchQtyArray[i]);
                                        END;
                                        10:
                                        BEGIN
                                          ForecastVendLine.VALIDATE("Period 10 Qty.",PurchQtyArray[i]);
                                        END;
                                        11:
                                        BEGIN
                                          ForecastVendLine.VALIDATE("Period 11 Qty.",PurchQtyArray[i]);
                                        END;
                                        12:
                                        BEGIN
                                          ForecastVendLine.VALIDATE("Period 12 Qty.",PurchQtyArray[i]);
                                        END;
                                        13:
                                        BEGIN
                                          ForecastVendLine.VALIDATE("Period 13 Qty.",PurchQtyArray[i]);
                                        END;
                                        14:
                                        BEGIN
                                          ForecastVendLine.VALIDATE("Period 14 Qty.",PurchQtyArray[i]);
                                        END;
                                        15:
                                        BEGIN
                                          ForecastVendLine.VALIDATE("Period 15 Qty.",PurchQtyArray[i]);
                                        END;
                                    END;
                                  END;

                                  ForecastVendLine.UpdateItemReference("Procurement Unit");

                                  ForecastVendLine.INSERT(TRUE);
                                END;

               ReqFilterFields=Location Code,Item No.;
               DataItemLink=Replenishment Source Code=FIELD(Vendor No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1240020000;;Container;
                  Name=Options;
                  ContainerType=ContentArea }

      { 1240020002;1;Field  ;
                  Name=Periods to Forecast;
                  SourceExpr=PeriodsToForecast;
                  MinValue=1;
                  MaxValue=15 }

      { 1240020001;1;Field  ;
                  Name=Anticipate Order Date;
                  CaptionML=ENU=Calculate Order Date from LTH;
                  ToolTipML=ENU="Using calculate order date from LTH (lead time horizon) will use the lead time horizon days to determine the order placement date.  Quantities will be moved into the order period.  ";
                  SourceExpr=UseAntcipateOrderDate }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text001@1240030023 : TextConst 'ENU=Creating Vendor Forecast';
      Text002@1240030024 : TextConst 'ENU=Vendor';
      Text003@1240030025 : TextConst 'ENU=Location';
      Text004@1240030026 : TextConst 'ENU=Item';
      Text005@1240030034 : TextConst 'ENU=Must set a Roll Up Order Quantity Rule for Location %1.';
      AdvForcSetup@1240020006 : Record 14002651;
      InvMgtSetup@1240020029 : Record 14000551;
      Location@1240020028 : Record 14;
      ForecastVendLine@1240020003 : Record 14002706;
      UBP@1240020031 : Codeunit 14000564;
      ProgWindow@1240020024 : Dialog;
      First@1240020020 : Boolean;
      AccumTotal@1240020002 : Decimal;
      PeriodsToForecast@1240020011 : Integer;
      ForcInvPeriodEndArray@1240020001 : ARRAY [24] OF Date;
      ForcInvPeriodStartArray@1240020005 : ARRAY [24] OF Date;
      PurchQtyArray@1240020004 : ARRAY [24] OF Decimal;
      UseAntcipateOrderDate@1240020000 : Boolean;

    LOCAL PROCEDURE CalcVendorReplenishment@1240020000(VAR ProcUnit@1240020000 : Record 14000555;VAR CurrHorizonDate@1240020006 : Date) MinSOQ : Decimal;
    VAR
      Forecast@1240020002 : Codeunit 14000567;
      CreateLocInvRollUp@1240020001 : Codeunit 14000574;
      RollUpMinSOQ@1240020003 : Decimal;
      RollUpMaxSOQ@1240020004 : Decimal;
      LTHDate@1240020005 : Date;
      NetInvPos@1240020008 : Decimal;
      OrderMultipleQty@1240020009 : Decimal;
    BEGIN
      LTHDate := CurrHorizonDate;
      MinSOQ := 0;

      IF (UBP.SpokesExist(ProcUnit)) OR
        (Location."Roll Up Order Quantity Rule" = Location."Roll Up Order Quantity Rule"::MinSOQ) THEN BEGIN
          CASE ProcUnit."Replenishment Model" OF
            ProcUnit."Replenishment Model"::"Lead Time Horizon":
            BEGIN
              CLEAR(CreateLocInvRollUp);
              CreateLocInvRollUp.CalcRollUp(ProcUnit,FALSE,0, LTHDate);
              CreateLocInvRollUp.GetMinMaxSOQ(RollUpMinSOQ, RollUpMaxSOQ);
            END;
          ProcUnit."Replenishment Model"::"Min/Max":
            BEGIN
              IF ((ProcUnit."Maximum Inventory" > 0) OR
                  ((ProcUnit."Maximum Inventory" = 0) AND
                  (ProcUnit."Minimum Inventory" = 0) AND
                  (ProcUnit."Minimum Days Supply" = 0) AND
                  (ProcUnit."Maximum Days Supply" = 0))) THEN BEGIN
                CLEAR(CreateLocInvRollUp);
                CreateLocInvRollUp.CalcRollUp(ProcUnit,FALSE,0, LTHDate);
                CreateLocInvRollUp.GetMinMaxSOQ(RollUpMinSOQ,RollUpMaxSOQ);
              END ELSE BEGIN
                // do min max days
                LTHDate := WORKDATE + ProcUnit."Minimum Days Supply";
                CLEAR(CreateLocInvRollUp);
                CreateLocInvRollUp.CalcRollUp(ProcUnit,FALSE,0,LTHDate);
                CreateLocInvRollUp.GetMinMaxSOQ(RollUpMinSOQ,RollUpMaxSOQ);
                NetInvPos := CreateLocInvRollUp.GetTopLevelSurplus();
                IF (NetInvPos < 0) THEN BEGIN
                  LTHDate := WORKDATE + ProcUnit."Maximum Days Supply";
                  CLEAR(CreateLocInvRollUp);
                  CreateLocInvRollUp.CalcRollUp(ProcUnit,FALSE,0,LTHDate);
                  CreateLocInvRollUp.GetMinMaxSOQ(RollUpMinSOQ,RollUpMaxSOQ);
                  NetInvPos := CreateLocInvRollUp.GetTopLevelSurplus();
                END;
              END;
            END;
          END;

          CASE Location."Roll Up Order Quantity Rule" OF
            Location."Roll Up Order Quantity Rule"::MinSOQ:
              BEGIN
                MinSOQ := RollUpMinSOQ;
              END;
            Location."Roll Up Order Quantity Rule"::MaxSOQ:
              BEGIN
                MinSOQ := RollUpMaxSOQ;
              END;
          END;
      // roll up
      END ELSE BEGIN
        CLEAR(Forecast);
        CASE ProcUnit."Replenishment Model" OF
          ProcUnit."Replenishment Model"::"Lead Time Horizon":
            BEGIN
              NetInvPos := Forecast.CalcNetNeed(ProcUnit, '', LTHDate,FALSE);
              MinSOQ := Forecast.GetMinSOQ();
            END;
            ProcUnit."Replenishment Model"::"Min/Max":
              BEGIN
              IF ((ProcUnit."Maximum Inventory" > 0) OR
                  ((ProcUnit."Maximum Inventory" = 0) AND
                  (ProcUnit."Minimum Inventory" = 0) AND
                  (ProcUnit."Minimum Days Supply" = 0) AND
                  (ProcUnit."Maximum Days Supply" = 0))) THEN BEGIN
                NetInvPos := Forecast.CalcNetNeed(ProcUnit, '', LTHDate,FALSE);
                MinSOQ := Forecast.GetMinSOQ();
              END ELSE BEGIN
                // do min max days
                LTHDate := WORKDATE + ProcUnit."Minimum Days Supply";
                NetInvPos := Forecast.CalcNetNeed(ProcUnit, '', LTHDate,FALSE);
                IF (NetInvPos < 0) THEN BEGIN
                  LTHDate := WORKDATE + ProcUnit."Maximum Days Supply";
                  NetInvPos := Forecast.CalcNetNeed(ProcUnit, '', LTHDate,FALSE);
                  MinSOQ := Forecast.GetMinSOQ();
              END;
            END;
          END;
        END;
      END;

      MinSOQ := MinSOQ - AccumTotal;

      IF MinSOQ > 0 THEN BEGIN
        IF ("Procurement Unit"."Order Multiple" <> 0) THEN BEGIN
          OrderMultipleQty := MinSOQ MOD "Procurement Unit"."Order Multiple";
          IF OrderMultipleQty <> 0 THEN
            MinSOQ := MinSOQ + "Procurement Unit"."Order Multiple" - OrderMultipleQty;
        END;
        IF ("Procurement Unit"."Order Minimum" <> 0) AND
           ("Procurement Unit"."Order Minimum" > MinSOQ) THEN
          MinSOQ := "Procurement Unit"."Order Minimum";
        AccumTotal := AccumTotal + MinSOQ;
        MinSOQ := ABS(MinSOQ);
      END ELSE
        MinSOQ := 0;

      EXIT(MinSOQ);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

