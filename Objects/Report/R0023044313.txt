OBJECT Report 23044313 Calculate Count Period Codes
{
  OBJECT-PROPERTIES
  {
    Date=07/01/20;
    Time=12:00:00 AM;
    Modified=Yes;
    Version List=INV3.0.1702,NV;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Calculate Count Period Codes;
               ESM=Calcular los c¢digos de cuenta periodo;
               FRC=Calculer les Codes de p‚riode de d‚compte;
               ENC=Calculate Count Period Codes];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF GUIALLOWED THEN
                    dlgProgress.OPEN(tcProgress);

                  recPeriodPercent.SETFILTER("Max. Pct. of Items by Cost", '<>0');
                  recPeriodPercent.SETCURRENTKEY("Max. Pct. of Items by Cost");
                  cuPhysCountMgmt.SetHideValidationDialog(TRUE);

                  trecIWInvBuffer.SETCURRENTKEY("Unit Cost");
                  trecIWInvBuffer.ASCENDING(FALSE);
                END;

    OnPostReport=BEGIN
                   IF GUIALLOWED THEN BEGIN
                     MESSAGE(tcCalcComplete);
                     dlgProgress.CLOSE;
                   END;//if
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;                  ;
               DataItemTable=Table14;
               DataItemTableView=SORTING(Code);
               OnPreDataItem=BEGIN
                               IF NOT bCalculateSKU THEN BEGIN
                                 Code:='All';
                                 processItems;
                                 CurrReport.BREAK;
                               END;//if not SKU

                               SETFILTER(Code, codLocationFilter);
                             END;

               OnAfterGetRecord=BEGIN
                                  trecIWInvBuffer.DELETEALL;
                                  processSKUs;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1000000000;;Container;
                  ContainerType=ContentArea }

      { 1000000006;1;Group  ;
                  CaptionML=[ENU=Calculation Options;
                             ENC=Calculation Options];
                  GroupType=Group }

      { 1000000005;2;Field  ;
                  CaptionML=[ENU=Date Filter;
                             ENC=Date Filter];
                  SourceExpr=txtDateFilter;
                  OnValidate=BEGIN
                               recItem.SETFILTER("Date Filter", txtDateFilter);
                               txtDateFilter := recItem.GETFILTER("Date Filter");
                             END;
                              }

      { 1000000001;2;Field  ;
                  CaptionML=[ENU=Item Filter;
                             ENC=Item Filter];
                  SourceExpr=codItemFilter;
                  TableRelation=Item }

      { 1000000002;2;Field  ;
                  CaptionML=[ENU=Calculate SKU;
                             ENC=Calculate SKU];
                  SourceExpr=bCalculateSKU }

      { 1000000003;2;Field  ;
                  CaptionML=[ENU=Location Filter;
                             ENC=Location Filter];
                  SourceExpr=codLocationFilter;
                  TableRelation=Location;
                  Enabled=bCalculateSKU }

      { 1000000004;2;Field  ;
                  CaptionML=[ENU=Variant Filter;
                             ENC=Variant Filter];
                  SourceExpr=codVariantFilter;
                  Enabled=bCalculateSKU }

      { 1000000007;2;Field  ;
                  CaptionML=[ENU=Calculate Next Count Period;
                             ENC=Calculate Next Count Period];
                  SourceExpr=bCalcNextCountPeriod }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      codItemFilter@1000000000 : Text;
      bCalculateSKU@1000000001 : Boolean INDATASET;
      codLocationFilter@1000000002 : Code[100];
      codVariantFilter@1000000003 : Code[100];
      txtDateFilter@1000000004 : Text[20];
      bCalcNextCountPeriod@1000000005 : Boolean;
      recSKU@1000000006 : Record 5700;
      recItem@1000000007 : Record 27;
      qItemTotal@1000000008 : Query 23044300;
      qItemDetail@1000000009 : Query 23044301;
      qSKUTotal@1000000010 : Query 23044302;
      qSKUDetail@1000000011 : Query 23044303;
      dlgProgress@1000000012 : Dialog;
      tcProgress@1000000013 : TextConst 'ENU=#1##################\Location: #2##################\Item: #3##################\Progress: @4@@@@@@@@@@@@@@@;ENC=#1##############################\ \Location: #2##############################\Item:     #3##############################\Progress: @4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';
      dCostTotal@1000000014 : Decimal;
      tcCalcTotals@1000000015 : TextConst 'ENU=Calculating Totals;ENC=Calculating Totals';
      tcCalcCodes@1000000017 : TextConst 'ENU=Calculating Counting Codes;ENC=Calculating Counting Codes';
      recPeriodPercent@1000000019 : Record 23044306;
      cuPhysCountMgmt@1000000020 : Codeunit 7380;
      tcCalcComplete@1000000016 : TextConst 'ENU=Calculation Complete;ENC=Calculation Complete';
      trecIWInvBuffer@1000000018 : TEMPORARY Record 23044303;

    PROCEDURE processSKUs@1000000013();
    BEGIN
      // Processes the SKUs - basically a copy of the item loop

      updateProgress(tcCalcTotals, Location.Code,'', 0);

      setSKUFilters;

      qSKUTotal.OPEN;  // purposely error on the query operations if queries fail
      qSKUTotal.READ;

      dCostTotal := qSKUTotal.TotalExpCost + qSKUTotal.TotalActCost;
      qSKUTotal.CLOSE;

      qSKUDetail.OPEN;
      WHILE qSKUDetail.READ DO BEGIN
        updateProgress('', Location.Code, qSKUDetail.Item_No, 0);
        trecIWInvBuffer."Item No." := qSKUDetail.Item_No;
        trecIWInvBuffer."Variant Code" := qSKUDetail.Variant_Code;
        trecIWInvBuffer."Location Code" := qSKUDetail.Location_Code;
        trecIWInvBuffer."Unit Cost" := qSKUDetail.TotalActCost + qSKUDetail.TotalExpCost;
        trecIWInvBuffer.INSERT;
      END;//while read detail

      qSKUDetail.CLOSE;

      processBuffer;
    END;

    PROCEDURE setSKUFilters@1000000000();
    BEGIN
      // Sets filters on SKU - moving filter code here cleans up main func
      qSKUTotal.SETFILTER(ItemFilter, codItemFilter);
      qSKUTotal.SETFILTER(LocationFilter, Location.Code);
      qSKUTotal.SETFILTER(VariantFilter, codVariantFilter);
      qSKUTotal.SETFILTER(Posting_Date, txtDateFilter);

      qSKUDetail.SETFILTER(Item_No, codItemFilter);
      qSKUDetail.SETFILTER(Location_Code, Location.Code);
      qSKUDetail.SETFILTER(Variant_Code, codVariantFilter);
      qSKUDetail.SETFILTER(Posting_Date, txtDateFilter);

      recSKU.SETFILTER("Item No.", codItemFilter);
      recSKU.SETFILTER("Location Code", Location.Code);
      recSKU.SETFILTER("Variant Code", codVariantFilter);
    END;

    PROCEDURE processItems@1000000014();
    VAR
      ltcItemText@1000000004 : TextConst 'ENU=%1 of %2 (%3);ENC=%1 of %2 (%3)';
    BEGIN
      // Processes the items

      updateProgress(tcCalcTotals, Location.Code, '', 0);
      recItem.SETFILTER("No.", codItemFilter);

      qItemTotal.SETFILTER(ItemFilter, codItemFilter);
      qItemTotal.SETFILTER(Posting_Date, txtDateFilter);
      qItemTotal.OPEN;  // purposely error on the query operations if queries fail
      qItemTotal.READ;

      dCostTotal := qItemTotal.TotalActCost + qItemTotal.TotalExpCost;
      qItemTotal.CLOSE;

      qItemDetail.SETFILTER(ItemFilter, codItemFilter);
      qItemDetail.SETFILTER(Posting_Date, txtDateFilter);

      qItemDetail.OPEN; //error on purpose if query fails

      WHILE qItemDetail.READ DO BEGIN
        updateProgress('', Location.Code, qItemDetail.No, 0);
        trecIWInvBuffer."Item No." := qItemDetail.No;
        trecIWInvBuffer."Unit Cost" := qItemDetail.TotalActCost + qItemDetail.TotalExpCost;
        trecIWInvBuffer.INSERT;
      END;//while read detail

      processBuffer;
    END;

    PROCEDURE processBuffer@1000000005();
    VAR
      ldRunningCost@1000000003 : Decimal;
      ldCurPercent@1000000002 : Decimal;
      lnCurRecNo@1000000000 : Integer;
    BEGIN
      // Processes the temp buffer to set codes

      updateProgress(tcCalcCodes, Location.Code, '', 0);

      // reset count period codes first.  If no movement for any items/SKUs, the count codes will remain blank
      setDefaultCountPeriod('', FALSE);

      IF trecIWInvBuffer.FINDSET THEN BEGIN

        recPeriodPercent.SETAUTOCALCFIELDS("Count Frequency");
        recPeriodPercent.FINDFIRST;

        REPEAT
          IF bCalculateSKU THEN BEGIN
            recSKU.GET(trecIWInvBuffer."Location Code", trecIWInvBuffer."Item No.", trecIWInvBuffer."Variant Code");
            recSKU."Phys Invt Counting Period Code" := recPeriodPercent."Invt. Counting Period Code";

            IF bCalcNextCountPeriod THEN BEGIN
              {// 2013R2-::begin
              recSKU."Next Counting Period" := cuPhysCountMgmt.CalcPeriod(recSKU."Last Phys. Invt. Date",
                                                                          recSKU."Next Counting Period",
                                                                          recPeriodPercent."Count Frequency", TRUE);
              }// 2013R2-::end
              // 2015+::begin
              cuPhysCountMgmt.CalcPeriod(recSKU."Last Phys. Invt. Date",
                                         recSKU."Next Counting Start Date",
                                         recSKU."Next Counting End Date",
                                         recPeriodPercent."Count Frequency");
              // 2015+::end
              recSKU."Last Counting Period Update" := WORKDATE;
            END;//if

            recSKU.MODIFY;
          END ELSE BEGIN
            recItem.GET(trecIWInvBuffer."Item No.");
            recItem."Phys Invt Counting Period Code" := recPeriodPercent."Invt. Counting Period Code";

            IF bCalcNextCountPeriod THEN BEGIN
              {// 2013R2-::begin
              recItem."Next Counting Period" := cuPhysCountMgmt.CalcPeriod(recItem."Last Phys. Invt. Date", recItem."Next Counting Period", recPeriodPercent."Count Frequency", TRUE);
              }// 2013R2-::end
              // 2015+::begin
              cuPhysCountMgmt.CalcPeriod(recItem."Last Phys. Invt. Date",
                                         recItem."Next Counting Start Date",
                                         recItem."Next Counting End Date",
                                         recPeriodPercent."Count Frequency");
              // 2015+::end
              recItem."Last Counting Period Update" := WORKDATE;
            END;//if

            recItem.MODIFY;
          END;//if SKU

          ldRunningCost += trecIWInvBuffer."Unit Cost";
          IF dCostTotal<>0 THEN
            ldCurPercent := ldRunningCost / dCostTotal * 100;

          IF (ldCurPercent >= recPeriodPercent."Max. Pct. of Items by Cost") AND
             (recPeriodPercent."Max. Pct. of Items by Cost" <> 100)
          THEN
            recPeriodPercent.NEXT;

          lnCurRecNo += 1;
          updateProgress('', Location.Code, recSKU."Item No.", lnCurRecNo*10000 DIV trecIWInvBuffer.COUNT);

        UNTIL trecIWInvBuffer.NEXT = 0;

        // Process items/skus with no movement (not returned by query)
        // item/sku records have filters set to same as queries
        setDefaultCountPeriod(recPeriodPercent."Invt. Counting Period Code", TRUE);

      END;//if got buffer recs
    END;

    PROCEDURE updateProgress@1000000003(ptxtState@1000000000 : Text;pcodLocation@1000000002 : Code[20];ptxtItemNo@1000000003 : Text;pnProgress@1000000001 : Integer);
    BEGIN
      // Updates progress dialog

      IF GUIALLOWED THEN BEGIN
        IF ptxtState<>'' THEN
          dlgProgress.UPDATE(1, ptxtState);

        dlgProgress.UPDATE(2, pcodLocation);
        dlgProgress.UPDATE(3, ptxtItemNo);
        dlgProgress.UPDATE(4, pnProgress);
      END;//if GUI
    END;

    PROCEDURE setDefaultCountPeriod@1000000001(pcodCountCode@1000000000 : Code[10];pbBlankOnly@1000000001 : Boolean);
    BEGIN
      // Sets count period code on pre-filtered SKU/Item records
      IF bCalculateSKU THEN BEGIN
        IF pbBlankOnly THEN
          recSKU.SETFILTER("Phys Invt Counting Period Code", '%1', '');
        recSKU.MODIFYALL("Phys Invt Counting Period Code", pcodCountCode);
        recSKU.SETRANGE("Phys Invt Counting Period Code"); // clear out for next location
      END ELSE BEGIN
        IF pbBlankOnly THEN
          recItem.SETFILTER("Phys Invt Counting Period Code", '%1', '');
        recItem.MODIFYALL("Phys Invt Counting Period Code", pcodCountCode);
      END;//if SKU
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
    }
    END.
  }
  RDLDATA
  {
  }
}

