OBJECT Report 50047 Create Whse Phy. Journal
{
  OBJECT-PROPERTIES
  {
    Date=07/01/20;
    Time=12:00:00 AM;
    Modified=Yes;
    Version List=Temp, for 76 Phy. Inventory;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   RegisteringDate := WORKDATE;
                 END;

    OnPreReport=BEGIN

                  ExcelBuf.DELETEALL;
                  ExcelBuf.OpenBook(ServerFileName,SheetName);
                  ExcelBuf.ReadSheet;
                  AnalyzeData;
                END;

    OnPostReport=BEGIN
                   MESSAGE('Import Finished');
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1000000000;;Container;
                  Name=ContentArea;
                  ContainerType=ContentArea }

      { 1000000003;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESM=Opciones;
                             FRC=Options;
                             ENC=Options] }

      { 1000000004;2;Group  ;
                  CaptionML=[ENU=Import from;
                             ESM=Importar de;
                             FRC=Importer de;
                             ENC=Import from] }

      { 1000000001;3;Field  ;
                  CaptionML=[ENU=Workbook File Name;
                             ESM=Nombre fichero libro;
                             FRC=Nom du classeur;
                             ENC=Workbook File Name];
                  SourceExpr=FileName;
                  Editable=FALSE;
                  OnValidate=BEGIN
                               FileNameOnAfterValidate;
                             END;

                  OnAssistEdit=BEGIN
                                 RequestFile;
                                 SheetName := ExcelBuf.SelectSheetsName(ServerFileName);
                               END;
                                }

      { 1000000002;3;Field  ;
                  CaptionML=[ENU=Worksheet Name;
                             ESM=Nombre hoja;
                             FRC=Nom de la feuille de travail;
                             ENC=Worksheet Name];
                  SourceExpr=SheetName;
                  Editable=FALSE;
                  OnAssistEdit=BEGIN
                                 IF ServerFileName = '' THEN
                                   RequestFile;

                                 SheetName := ExcelBuf.SelectSheetsName(ServerFileName);
                               END;
                                }

      { 1000000005;3;Field  ;
                  CaptionML=ENU=Registering Date;
                  SourceExpr=RegisteringDate }

      { 1000000006;3;Field  ;
                  CaptionML=ENU=Whse. Doc. No.;
                  SourceExpr=WhseDocNo }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ExcelBuf@1000000009 : TEMPORARY Record 370;
      cuFileMgt@1000000007 : Codeunit 419;
      FileName@1000000006 : Text[250];
      ServerFileName@1000000005 : Text[250];
      SheetName@1000000004 : Text[250];
      TotalRecNo@1000000003 : Integer;
      RecNo@1000000002 : Integer;
      EntryNo@1000000001 : Integer;
      Window@1000000000 : Dialog;
      Text006@1000000011 : TextConst 'ENU=Import Excel File;ESM=Importar fich. Excel;FRC=Importer fichier Excel;ENC=Import Excel File';
      Text007@1000000010 : TextConst 'ENU=Analyzing Data...\\;ESM=Analizar Datos...\\;FRC=Analyse des donn‚es...\\;ENC=Analysing Data...\\';
      Text029@1000000008 : TextConst 'ENU=You must enter a file name.;ESM=Debe introd. nombre fichero.;FRC=Vous devez entrer un nom de fichier.;ENC=You must enter a file name.';
      Task1A@1000000012 : Record 7311;
      RegisteringDate@1000000013 : Date;
      WhseDocNo@1000000014 : Code[20];

    PROCEDURE RequestFile@6();
    BEGIN
      IF FileName <> '' THEN
        ServerFileName := cuFileMgt.UploadFile(Text006,FileName)
      ELSE
        ServerFileName := cuFileMgt.UploadFile(Text006,'.xlsx');

      ValidateServerFileName;
      FileName := cuFileMgt.GetFileName(ServerFileName);
    END;

    LOCAL PROCEDURE FileNameOnAfterValidate@19040090();
    BEGIN
      RequestFile;
    END;

    LOCAL PROCEDURE ValidateServerFileName@9();
    BEGIN
      IF ServerFileName = '' THEN
      BEGIN
        FileName := '';
        SheetName := '';
        ERROR(Text029);
      END;
    END;

    PROCEDURE AnalyzeData@1000000000();
    VAR
      BinCode@1000000000 : Code[20];
      JnlBatchName@1000000001 : Code[20];
      BinContent@1000000002 : Record 7302;
      WhseJnlLine@1000000003 : Record 7311;
      WhseCalcInventory@1000000004 : Report 7390;
      WhseJnlBatch@1000000005 : Record 7310;
    BEGIN

      Window.OPEN(
        Text007 +
        '@1@@@@@@@@@@@@@@@@@@@@@@@@@\');
      Window.UPDATE(1,0);
      TotalRecNo := ExcelBuf.COUNT;
      RecNo := 0;

      ExcelBuf.SETFILTER(ExcelBuf."Row No.",'2..');
      IF ExcelBuf.FINDSET THEN
      BEGIN
        REPEAT
          RecNo := RecNo + 1;
          Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));

          CASE ExcelBuf.xlColID OF
            'A': BinCode := ExcelBuf."Cell Value as Text";
            'B':
            BEGIN
              JnlBatchName := ExcelBuf."Cell Value as Text";
              IF JnlBatchName <> '' THEN BEGIN
                WhseJnlBatch.SETRANGE("Journal Template Name", 'PHYSICAL I');
                WhseJnlBatch.SETRANGE("Location Code", '76');
                WhseJnlBatch.SETRANGE(Name, JnlBatchName);
                IF WhseJnlBatch.ISEMPTY THEN BEGIN
                  WhseJnlBatch.INIT;
                  WhseJnlBatch."Journal Template Name" := 'PHYSICAL I';
                  WhseJnlBatch."Location Code" := '76';
                  WhseJnlBatch.Name := JnlBatchName;
                  WhseJnlBatch.INSERT;
                END;

                WhseJnlLine."Journal Template Name" := 'PHYSICAL I';
                WhseJnlLine."Journal Batch Name" := JnlBatchName;
                WhseJnlLine."Location Code" := '76';
                //Get bin content into whse. physical inventory journal batch
                //run page 7326 which run report 7390
                BinContent.SETRANGE("Location Code", '76');
                BinContent.SETRANGE("Bin Code", BinCode);
                WhseCalcInventory.SetDefaultParams(RegisteringDate, WhseDocNo);
                WhseCalcInventory.SetHideValidationDialog(TRUE);
                WhseCalcInventory.SetWhseJnlLine(WhseJnlLine);
                WhseCalcInventory.SETTABLEVIEW(BinContent);
                WhseCalcInventory.SetProposalMode(TRUE);
                WhseCalcInventory.USEREQUESTPAGE(FALSE);
                WhseCalcInventory.RUNMODAL;
                CLEAR(WhseCalcInventory);
              END;
            END;
          END;

        UNTIL ExcelBuf.NEXT = 0;
      END;
      Window.CLOSE;
    END;

    PROCEDURE GetSourceData@1240020001(VAR DestinationData@1240020000 : Record 50009);
    BEGIN

      IF Task1A.FINDSET THEN
      REPEAT
        DestinationData.INIT;
        DestinationData.TRANSFERFIELDS(Task1A);
        DestinationData.INSERT;
      UNTIL Task1A.NEXT = 0;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns:cl="http://schemas.microsoft.com/sqlserver/reporting/2010/01/componentdefinition" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <Code>Public Function BlankZero(ByVal Value As Decimal)
    if Value = 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankPos(ByVal Value As Decimal)
    if Value &gt; 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankZeroAndPos(ByVal Value As Decimal)
    if Value &gt;= 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankNeg(ByVal Value As Decimal)
    if Value &lt; 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankNegAndZero(ByVal Value As Decimal)
    if Value &lt;= 0 then
        Return ""
    end if
    Return Value
End Function
</Code>
  <Language>=User!Language</Language>
  <ConsumeContainerWhitespace>true</ConsumeContainerWhitespace>
  <rd:ReportID>0eeb6585-38ae-40f1-885b-8d50088d51b4</rd:ReportID>
  <rd:ReportUnitType>Inch</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

