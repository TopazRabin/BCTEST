OBJECT Report 51123 Create Adjustment Journals
{
  OBJECT-PROPERTIES
  {
    Date=07/01/20;
    Time=12:00:00 AM;
    Modified=Yes;
    Version List=TPZ000.00.00;
  }
  PROPERTIES
  {
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 1000000001;;DataItem;                  ;
               DataItemTable=Table23044505;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               SETFILTER("No.",LPFilterText);
                               // ERROR(LPFilterText);
                                 Window.OPEN('Processing: #2##### \ @1@@@@@@@@@@@@@@@');
                                 TotalCount := COUNT;
                             END;

               OnAfterGetRecord=BEGIN
                                   Counter := Counter + 1;
                                   Window.UPDATE(2,"No.");
                                   Window.UPDATE(1,ROUND(Counter / TotalCount * 10000, 1));
                                   CLEAR(WhseJnlLine);
                                   CLEAR(ToWhseJnlLine);
                                   //SLEEP(100);
                                  LicensePlateHeader.GET("No.");
                                  PosPhyJnlDoc := "No.";
                                  NegWhseJnlDoc := "No.";
                                  PosWhseJnlDoc := "No.";

                                  TESTFIELD("Phys. Inv. Journal Batch");
                                  TESTFIELD("Whse. Phys. Inv. Jnl. Batch");
                                  TESTFIELD("Whse. Phys. Inv. Jnl. Batch To");
                                  PhyInvJnlBatch := "IWX License Plate Header"."Phys. Inv. Journal Batch";
                                  WhsePhyInvJnlBatch := "IWX License Plate Header"."Whse. Phys. Inv. Jnl. Batch";
                                  WhsePhyInvJnlBatchTo := "IWX License Plate Header"."Whse. Phys. Inv. Jnl. Batch To";

                                  IJLDel.RESET;
                                  IJLDel.SETRANGE("Journal Template Name",'PHYS. INVE');
                                  IJLDel.SETRANGE("Journal Batch Name",PhyInvJnlBatch);
                                  IF IJLDel.FINDSET THEN
                                    IJLDel.DELETEALL;
                                  WJLDel.RESET;
                                  WJLDel.SETRANGE("Journal Template Name",'PHYSICAL I');
                                  WJLDel.SETFILTER("Journal Batch Name",'%1|%2',WhsePhyInvJnlBatch,WhsePhyInvJnlBatchTo);
                                  IF WJLDel.FINDSET THEN
                                    WJLDel.DELETEALL;

                                  WJLDel.RESET;
                                  WJLDel.SETRANGE("Journal Batch Name","IWX License Plate Header"."Whse. Item Jnl. Batch To");
                                  WJLDel.SETRANGE("Journal Template Name",'ITEM');
                                  IF WJLDel.FINDSET THEN
                                    WJLDel.DELETEALL;

                                  IF IJB.GET('PHYS. INVE',PhyInvJnlBatch) THEN;
                                  IF WJB.GET('PHYSICAL I',WhsePhyInvJnlBatchTo,ToLocation) THEN
                                    ToReasonCode := WJB."Reason Code";
                                  IF WJB.GET('PHYSICAL I',WhsePhyInvJnlBatch,"Location Code") THEN
                                    ReasonCode := WJB."Reason Code";
                                END;

               OnPostDataItem=BEGIN
                                Window.CLOSE();
                              END;
                               }

    { 1000000000;1;DataItem;                 ;
               DataItemTable=Table23044506;
               DataItemTableView=SORTING(License Plate No.,Line No.);
               OnPreDataItem=BEGIN
                               {
                               IF IJB.GET('PHYS. INVE',PhyInvJnlBatch) THEN
                                 PosPhyJnlDoc := NoSeriesManagement.GetNextNo(IJB."No. Series",WORKDATE,FALSE);

                               IJLDel.RESET;
                               IJLDel.SETRANGE("Journal Template Name",'PHYS. INVE');
                               IJLDel.SETRANGE("Journal Batch Name",PhyInvJnlBatch);
                               IF IJLDel.FINDSET THEN
                                 IJLDel.DELETEALL;

                               CLEAR(NoSeriesManagement);
                               IF WJB.GET('PHYSICAL I',WhsePhyInvJnlBatch,LicensePlateHeader."Location Code") THEN
                                 NegWhseJnlDoc := NoSeriesManagement.GetNextNo(WJB."No. Series",WORKDATE,FALSE);

                               CLEAR(NoSeriesManagement);
                               IF WJB.GET('PHYSICAL I',WhsePhyInvJnlBatchTo,ToLocation) THEN
                                 PosWhseJnlDoc := NoSeriesManagement.GetNextNo(WJB."No. Series",WORKDATE,FALSE);

                               WJLDel.RESET;
                               WJLDel.SETRANGE("Journal Template Name",'PHYSICAL I');
                               WJLDel.SETFILTER("Journal Batch Name",'%1|%2',WhsePhyInvJnlBatch,WhsePhyInvJnlBatchTo);
                               IF WJLDel.FINDSET THEN
                                 WJLDel.DELETEALL;
                               }
                             END;

               OnAfterGetRecord=VAR
                                  WhseCalcInventory@1000000000 : Report 51153;
                                  WhseCalcInventoryTo@1000000001 : Report 51153;
                                  LineNo@1000000002 : Integer;
                                  WJL@1000000003 : Record 7311;
                                  CalculateInventoryLP@1000000004 : Report 51159;
                                BEGIN
                                  PostWhseItemJnl := FALSE;
                                  //CreatePhyInvJnl;

                                  //CreateWhsePhyInvJnl;
                                  LineNo :=0;
                                  FrWhseJnlLine.RESET;
                                  FrWhseJnlLine.INIT;
                                  FrWhseJnlLine."Journal Batch Name" := "IWX License Plate Header"."Whse. Phys. Inv. Jnl. Batch";
                                  FrWhseJnlLine."Journal Template Name" := 'PHYSICAL I';
                                  FrWhseJnlLine."Location Code" := "IWX License Plate Header"."Location Code";

                                  //Warehouse Negative physical journal
                                  BinContent.RESET;
                                  BinContent.SETRANGE("Location Code","IWX License Plate Header"."Location Code");
                                  BinContent.SETRANGE("Item No.","Item No.");
                                  BinContent.SETRANGE("Bin Code","IWX License Plate Header"."Bin Code");
                                  BinContent.SETRANGE("Unit of Measure Code","Unit of Measure Code");
                                  IF BinContent.FINDFIRST THEN BEGIN
                                    BinContent.CALCFIELDS(Quantity);
                                    IF (BinContent.Quantity < Quantity) THEN
                                      ERROR('Bin Content For %1 Item %2 BIN %3 not Sufficient',"License Plate No.","Item No.","IWX License Plate Header"."Bin Code");
                                    WhseCalcInventory.SetWhseJnlLine(FrWhseJnlLine,"License Plate No.",TODAY,Quantity);
                                    WhseCalcInventory.SETTABLEVIEW(BinContent);
                                    WhseCalcInventory.SetProposalMode(TRUE);
                                    WhseCalcInventory.RUNMODAL;
                                    WhseCalcInventory.GetWhseJnlLine(FrWhseJnlLine);
                                    CLEAR(WhseCalcInventory);
                                  END ELSE ERROR('Bin Content Is Not Available For Item %1 BIN %2',"Item No.","IWX License Plate Header"."Bin Code");

                                  //Physical/Item positive whse journal
                                  LineNo := 0;
                                  ToWhseJnlLine.RESET;
                                  ToWhseJnlLine.INIT;
                                  ToWhseJnlLine."Journal Batch Name" := "IWX License Plate Header"."Whse. Phys. Inv. Jnl. Batch To";
                                  ToWhseJnlLine."Journal Template Name" := 'PHYSICAL I';
                                  ToWhseJnlLine."Location Code" := ToLocation;

                                  BinContent.RESET;
                                  BinContent.SETRANGE("Location Code",ToLocation);
                                  BinContent.SETRANGE("Item No.","Item No.");
                                  BinContent.SETRANGE("Bin Code","IWX License Plate Header"."Bin Code");
                                  BinContent.SETRANGE("Unit of Measure Code","Unit of Measure Code");
                                  IF BinContent.FINDFIRST THEN BEGIN
                                    BinContent.CALCFIELDS(Quantity);
                                    IF BinContent.Quantity <> 0 THEN BEGIN
                                      WhseCalcInventoryTo.SetWhseJnlLine(ToWhseJnlLine,"License Plate No.",TODAY,-Quantity);
                                      WhseCalcInventoryTo.SETTABLEVIEW(BinContent);
                                      WhseCalcInventoryTo.SetProposalMode(TRUE);
                                      WhseCalcInventoryTo.RUNMODAL;
                                      WhseCalcInventoryTo.GetWhseJnlLine(ToWhseJnlLine);
                                      CLEAR(WhseCalcInventoryTo);
                                    END ELSE CreateWhseItemJnl; // If Bin available but with zero quantity
                                  END ELSE CreateWhseItemJnl; // if bin not availbe in target loc then use whse item jnl

                                  // Item Pos/Neg Journal Adjutment
                                  FrItemJnlLine.RESET;
                                  FrItemJnlLine."Journal Batch Name" := PhyInvJnlBatch;
                                  FrItemJnlLine."Journal Template Name" := 'PHYS. INVE';

                                  //Negative Adjustment From Source Loc
                                  CalculateInventoryLP.SetItemJnlLine(FrItemJnlLine,"Item No.","License Plate No.","IWX License Plate Header"."Location Code",Quantity);
                                  CalculateInventoryLP.RUNMODAL;
                                  CLEAR(CalculateInventoryLP);

                                  //Positive Adjustment to Loc 80

                                  CalculateInventoryLP.SetItemJnlLine(FrItemJnlLine,"Item No.","License Plate No.",ToLocation,-Quantity);
                                  CalculateInventoryLP.RUNMODAL;
                                  CLEAR(CalculateInventoryLP);
                                END;

               OnPostDataItem=BEGIN
                                COMMIT;
                                IF  PostJournals THEN BEGIN

                                  {CODEUNIT.RUN(CODEUNIT::"Whse. Jnl.-Register Batch",WhseJournalLine1);
                                  CODEUNIT.RUN(CODEUNIT::"Whse. Jnl.-Register Batch",WhseJournalLine);
                                  CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post Batch",ItemJournalLine);
                                  LicensePlateHeader."Location Code" := ToLocation;
                                  LicensePlateHeader.MODIFY;}
                                  IF NOT "IWX License Plate Header"."Whse - PJnl - Posted" THEN BEGIN
                                    CODEUNIT.RUN(CODEUNIT::"Whse. Jnl.-Register Batch",FrWhseJnlLine);
                                    "IWX License Plate Header"."Whse - PJnl - Posted" := TRUE;
                                    "IWX License Plate Header".MODIFY;
                                    COMMIT;
                                  END;

                                  {
                                    IF PostWhseItemJnl THEN
                                      CODEUNIT.RUN(CODEUNIT::"Whse. Jnl.-Register Batch",WhseJnlLine)
                                    ELSE  CODEUNIT.RUN(CODEUNIT::"Whse. Jnl.-Register Batch",ToWhseJnlLine);
                                  }
                                  IF (ToWhseJnlLine."Journal Batch Name" <> '') AND (NOT "IWX License Plate Header"."Whse + PJnl  Posted") THEN BEGIN
                                    CODEUNIT.RUN(CODEUNIT::"Whse. Jnl.-Register Batch",ToWhseJnlLine);
                                    "IWX License Plate Header"."Whse + PJnl  Posted" := TRUE;
                                    "IWX License Plate Header".MODIFY;
                                    COMMIT;
                                  END;
                                  IF (WhseJnlLine."Journal Batch Name" <> '') AND (NOT "IWX License Plate Header"."Whse Item Jnl Posted") THEN BEGIN
                                    CODEUNIT.RUN(CODEUNIT::"Whse. Jnl.-Register Batch",WhseJnlLine);
                                    "IWX License Plate Header"."Whse Item Jnl Posted" := TRUE;
                                    "IWX License Plate Header".MODIFY;
                                    COMMIT;
                                  END;

                                  IF NOT "IWX License Plate Header"."Phy Inv Jnl Posted" THEN BEGIN
                                    CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post Batch",FrItemJnlLine);
                                    "IWX License Plate Header"."Phy Inv Jnl Posted" := TRUE;
                                    "IWX License Plate Header".MODIFY;
                                    COMMIT;
                                  END;
                                  "IWX License Plate Header"."Location Code" := ToLocation;
                                  "IWX License Plate Header".MODIFY;
                                END ELSE BEGIN
                                  {PhysInventoryJournal_1.SetBatchName(PhyInvJnlBatch,ItemJournalLine);
                                  PhysInventoryJournal_1.RUN;
                                  WhsePhysInvtJournal.SetBatch(WhsePhyInvJnlBatch,LicensePlateHeader."Location Code",WhseJournalLine1);
                                  WhsePhysInvtJournal.RUN;
                                  WhsePhysInvtJournalTo.SetBatch(WhsePhyInvJnlBatchTo,ToLocation,WhseJournalLine);
                                  WhsePhysInvtJournalTo.RUN;}
                                END;
                                CLEAR(ItemJournalLine);
                                CLEAR(WhseJournalLine);
                                CLEAR(WhseJournalLine1);
                              END;

               DataItemLink=License Plate No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   PostJournals := TRUE;
                 END;

    }
    CONTROLS
    {
      { 1000000000;;Container;
                  Name=Filters;
                  ContainerType=ContentArea }

      { 1000000001;1;Field  ;
                  Name=To-Location;
                  SourceExpr=ToLocation;
                  TableRelation=Location }

      { 1000000002;1;Field  ;
                  Name=Phys. Inv. Journal Batch;
                  SourceExpr=PhyInvJnlBatch;
                  TableRelation="Item Journal Batch".Name WHERE (Journal Template Name=CONST(PHYS. INVE));
                  Visible=False;
                  Editable=False }

      { 1000000003;1;Field  ;
                  Name=Whse. Phys. Inv. Jnl. Batch;
                  SourceExpr=WhsePhyInvJnlBatch;
                  TableRelation="Warehouse Journal Batch".Name WHERE (Journal Template Name=CONST(PHYSICAL I));
                  Visible=False;
                  Editable=False }

      { 1000000004;1;Field  ;
                  Name=Whse. Phys. Inv. Jnl. Batch To;
                  SourceExpr=WhsePhyInvJnlBatchTo;
                  TableRelation="Warehouse Journal Batch".Name WHERE (Journal Template Name=CONST(PHYSICAL I));
                  Visible=False;
                  Editable=False }

      { 1000000005;1;Field  ;
                  Name=Post Journals;
                  SourceExpr=PostJournals }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ToLocation@1000000000 : Code[10];
      LicensePlateNo@1000000001 : Code[20];
      LicensePlateHeader@1000000002 : Record 23044505;
      LicensePlateLine@1000000003 : Record 23044506;
      PhyInvJnlBatch@1000000004 : Code[10];
      WhsePhyInvJnlBatch@1000000005 : Code[10];
      ItemJournalLine@1000000006 : Record 83;
      ItemJournalBatch@1000000007 : Record 233;
      NoSeriesManagement@1000000008 : Codeunit 396;
      IJL@1000000009 : Record 83;
      PosPhyJnlDoc@1000000010 : Code[20];
      IJB@1000000011 : Record 233;
      Item@1000000012 : Record 27;
      ItemInventory@1000000013 : Decimal;
      WhsePhyInvJnlBatchTo@1000000014 : Code[20];
      WhseJournalLine@1000000015 : Record 7311;
      WJB@1000000016 : Record 7310;
      NegWhseJnlDoc@1000000017 : Code[20];
      PosWhseJnlDoc@1000000018 : Code[20];
      WhseJournalLine1@1000000019 : Record 7311;
      PostJournals@1000000023 : Boolean;
      IJLDel@1000000024 : Record 83;
      WJLDel@1000000025 : Record 7311;
      LPFilterText@1000000026 : Text;
      Window@1000000027 : Dialog;
      TotalCount@1000000028 : Integer;
      Counter@1000000029 : Integer;
      ToReasonCode@1000000030 : Code[20];
      ReasonCode@1000000031 : Code[20];
      BinContent@1000000032 : Record 7302;
      FrWhseJnlLine@1000000033 : Record 7311;
      ToWhseJnlLine@1000000034 : Record 7311;
      WhseJnlLine@1000000035 : Record 7311;
      PostWhseItemJnl@1000000036 : Boolean;
      FrItemJnlLine@1000000037 : Record 83;

    PROCEDURE SetValues@1000000000(LPFilter@1000000004 : Text);
    BEGIN
      //LicensePlateNo := LPNo;
      //PhyInvJnlBatch := PhyInvBatch;
      //WhsePhyInvJnlBatch := WhseBatch;
      //WhsePhyInvJnlBatchTo := WhseBatchTo;
      LPFilterText := LPFilter;
    END;

    LOCAL PROCEDURE CreatePhyInvJnl@1000000001();
    VAR
      LineNo@1000000000 : Integer;
    BEGIN
      ItemJournalLine.INIT;
      ItemJournalLine."Journal Template Name" := 'PHYS. INVE';
      ItemJournalLine."Journal Batch Name" := PhyInvJnlBatch;
      ItemJournalLine."Entry Type" := ItemJournalLine."Entry Type"::"Positive Adjmt.";
      ItemJournalLine."Document No." := PosPhyJnlDoc;
      ItemJournalLine."Phys. Inventory" := FALSE;
      IJL.RESET;
      IJL.SETRANGE("Journal Template Name",'PHYS. INVE');
      IJL.SETRANGE("Journal Batch Name",PhyInvJnlBatch);
      IF IJL.FINDLAST THEN
        LineNo := IJL."Line No.";

      LineNo += 10000;
      ItemJournalLine."Line No." := LineNo;
      ItemJournalLine."Source Code" := 'PHYSINVJNL';
      ItemJournalLine."Posting Date" := TODAY;
      ItemJournalLine."Item No." := "IWX License Plate Line"."Item No.";
      ItemJournalLine."Location Code" := ToLocation;
      ItemJournalLine."Bin Code" := LicensePlateHeader."Bin Code";
      Item.RESET;
      ItemInventory := 0;
      IF Item.GET("IWX License Plate Line"."Item No.") THEN BEGIN
        Item.SETFILTER("Location Filter",ToLocation);
        Item.CALCFIELDS(Inventory);
        ItemInventory := Item.Inventory;
      END;
      ItemJournalLine."Phys. Inventory" := TRUE;
      ItemJournalLine.VALIDATE("Qty. (Calculated)",ItemInventory);
      ItemJournalLine."Reason Code" := IJB."Reason Code";
      ItemJournalLine.INSERT(TRUE);
      ItemJournalLine.VALIDATE("Qty. (Phys. Inventory)",(ItemInventory+"IWX License Plate Line".Quantity));
      ItemJournalLine.MODIFY;

      ItemJournalLine.INIT;
      ItemJournalLine."Journal Template Name" := 'PHYS. INVE';
      ItemJournalLine."Journal Batch Name" := PhyInvJnlBatch;
      ItemJournalLine."Entry Type" := ItemJournalLine."Entry Type"::"Negative Adjmt.";
      ItemJournalLine."Document No." := PosPhyJnlDoc;
      ItemJournalLine."Phys. Inventory" := FALSE;
      LineNo += 10000;
      ItemJournalLine."Line No." := LineNo;
      ItemJournalLine."Source Code" := 'PHYSINVJNL';
      ItemJournalLine."Posting Date" := TODAY;
      ItemJournalLine."Item No." := "IWX License Plate Line"."Item No.";
      ItemJournalLine."Location Code" := LicensePlateHeader."Location Code";
      ItemJournalLine."Bin Code" := LicensePlateHeader."Bin Code";
      Item.RESET;
      ItemInventory := 0;
      IF Item.GET("IWX License Plate Line"."Item No.") THEN BEGIN
        Item.SETFILTER("Location Filter",LicensePlateHeader."Location Code");
        Item.CALCFIELDS(Inventory);
        ItemInventory := Item.Inventory;
      END;
      ItemJournalLine."Phys. Inventory" := TRUE;
      ItemJournalLine.VALIDATE("Qty. (Calculated)",ItemInventory);
      ItemJournalLine."Reason Code" := IJB."Reason Code";
      ItemJournalLine.INSERT(TRUE);
      ItemJournalLine.VALIDATE("Qty. (Phys. Inventory)",(ItemInventory-"IWX License Plate Line".Quantity));
      ItemJournalLine.MODIFY;
    END;

    LOCAL PROCEDURE CreateWhsePhyInvJnl@1000000002();
    VAR
      LineNo@1000000000 : Integer;
      WJL@1000000001 : Record 7311;
    BEGIN
      WhseJournalLine.INIT;
      WhseJournalLine."Journal Template Name" := 'PHYSICAL I';
      WhseJournalLine."Journal Batch Name" := WhsePhyInvJnlBatchTo;
      WhseJournalLine."Entry Type" := WhseJournalLine."Entry Type"::"Positive Adjmt.";
      WhseJournalLine."Whse. Document No." := PosWhseJnlDoc;
      WhseJournalLine."Phys. Inventory" := FALSE;
      WJL.RESET;
      WJL.SETRANGE("Journal Template Name",'PHYSICAL I');
      WJL.SETRANGE("Journal Batch Name",WhsePhyInvJnlBatchTo);
      IF WJL.FINDLAST THEN
        LineNo := WJL."Line No.";

      LineNo += 10000;
      WhseJournalLine."Line No." := LineNo;
      WhseJournalLine."Source Code" := 'WHPHYSINVT';
      WhseJournalLine."Registering Date" := TODAY;
      WhseJournalLine."Item No." := "IWX License Plate Line"."Item No.";
      WhseJournalLine."Unit of Measure Code" := "IWX License Plate Line"."Unit of Measure Code";
      WhseJournalLine."Location Code":= ToLocation;
      WhseJournalLine.VALIDATE("Bin Code",LicensePlateHeader."Bin Code");
      //Item.RESET;
       ItemInventory := 0;
       BinContent.RESET;
       BinContent.SETRANGE("Item No.","IWX License Plate Line"."Item No.");
       BinContent.SETRANGE("Location Code",ToLocation);
       BinContent.SETRANGE("Bin Code",LicensePlateHeader."Bin Code");
       BinContent.SETRANGE("Unit of Measure Code","IWX License Plate Line"."Unit of Measure Code");
       IF BinContent.FINDFIRST THEN BEGIN
         //BinContent.CALCFIELDS(Quantity);
         ItemInventory := BinContent.CalcQtyUOM;
        END;
      // IF Item.GET("License Plate Line"."Item No.") THEN BEGIN
      //  Item.SETFILTER("Location Filter",ToLocation);
      //  Item.CALCFIELDS(Inventory);
      //  ItemInventory := Item.Inventory;
      // END;
      WhseJournalLine."Phys. Inventory" := TRUE;
      WhseJournalLine.VALIDATE("Qty. (Calculated)",ItemInventory);
      WhseJournalLine."Reason Code" := ToReasonCode;
      WhseJournalLine.INSERT(TRUE);
      WhseJournalLine.VALIDATE("Qty. (Phys. Inventory)",(ItemInventory+"IWX License Plate Line".Quantity));
      WhseJournalLine.MODIFY;

      WhseJournalLine1.INIT;
      WhseJournalLine1."Journal Template Name" := 'PHYSICAL I';
      WhseJournalLine1."Journal Batch Name" := WhsePhyInvJnlBatch;
      WhseJournalLine1."Entry Type" := WhseJournalLine1."Entry Type"::"Negative Adjmt.";
      WhseJournalLine1."Whse. Document No." := NegWhseJnlDoc;
      WhseJournalLine1."Phys. Inventory" := FALSE;
      WJL.RESET;
      WJL.SETRANGE("Journal Template Name",'PHYSICAL I');
      WJL.SETRANGE("Journal Batch Name",WhsePhyInvJnlBatch);
      IF WJL.FINDLAST THEN
        LineNo := WJL."Line No.";
      LineNo += 10000;
      WhseJournalLine1."Line No." := LineNo;
      WhseJournalLine1."Source Code" := 'WHPHYSINVT';
      WhseJournalLine1."Registering Date" := TODAY;
      WhseJournalLine1."Item No." := "IWX License Plate Line"."Item No.";
      WhseJournalLine1."Unit of Measure Code" := "IWX License Plate Line"."Unit of Measure Code";
      WhseJournalLine1."Location Code" := LicensePlateHeader."Location Code";
      WhseJournalLine1.VALIDATE("Bin Code" , LicensePlateHeader."Bin Code");
      WhseJournalLine1."Phys. Inventory" := TRUE;
       ItemInventory := 0;
       BinContent.RESET;
       BinContent.SETRANGE("Item No.","IWX License Plate Line"."Item No.");
       BinContent.SETRANGE("Location Code",LicensePlateHeader."Location Code");
       BinContent.SETRANGE("Bin Code",LicensePlateHeader."Bin Code");
       BinContent.SETRANGE("Unit of Measure Code","IWX License Plate Line"."Unit of Measure Code");
       IF BinContent.FINDFIRST THEN BEGIN
         //BinContent.CALCFIELDS(Quantity);
         ItemInventory := BinContent.CalcQtyUOM;
        END;
      WhseJournalLine1.VALIDATE("Qty. (Calculated)",ItemInventory);
      WhseJournalLine1."Reason Code" := ReasonCode;
      WhseJournalLine1.INSERT(TRUE);
      WhseJournalLine1.VALIDATE("Qty. (Phys. Inventory)",(ItemInventory-"IWX License Plate Line".Quantity));
      WhseJournalLine1.MODIFY;
    END;

    LOCAL PROCEDURE CreateWhsePhyInvJnlToLoc@1000000003();
    VAR
      LineNo@1000000000 : Integer;
      WJL@1000000001 : Record 7311;
    BEGIN
      ToWhseJnlLine.INIT;
      ToWhseJnlLine."Journal Template Name" := 'PHYSICAL I';
      ToWhseJnlLine."Journal Batch Name" := WhsePhyInvJnlBatchTo;
      ToWhseJnlLine."Entry Type" := ToWhseJnlLine."Entry Type"::"Positive Adjmt.";
      ToWhseJnlLine."Whse. Document No." := PosWhseJnlDoc;
      ToWhseJnlLine."Phys. Inventory" := FALSE;
      WJL.RESET;
      WJL.SETRANGE("Journal Template Name",'PHYSICAL I');
      WJL.SETRANGE("Journal Batch Name",WhsePhyInvJnlBatchTo);
      IF WJL.FINDLAST THEN
        LineNo := WJL."Line No.";

      LineNo += 10000;
      ToWhseJnlLine."Line No." := LineNo;
      ToWhseJnlLine."Source Code" := 'WHPHYSINVT';
      ToWhseJnlLine."Registering Date" := TODAY;
      ToWhseJnlLine."Item No." := "IWX License Plate Line"."Item No.";
      ToWhseJnlLine."Unit of Measure Code" := "IWX License Plate Line"."Unit of Measure Code";
      ToWhseJnlLine."Location Code":= ToLocation;
      ToWhseJnlLine.VALIDATE("Bin Code",LicensePlateHeader."Bin Code");
      //Item.RESET;
       ItemInventory := 0;
       BinContent.RESET;
       BinContent.SETRANGE("Item No.","IWX License Plate Line"."Item No.");
       BinContent.SETRANGE("Location Code",ToLocation);
       BinContent.SETRANGE("Bin Code",LicensePlateHeader."Bin Code");
       BinContent.SETRANGE("Unit of Measure Code","IWX License Plate Line"."Unit of Measure Code");
       IF BinContent.FINDFIRST THEN BEGIN
         //BinContent.CALCFIELDS(Quantity);
         ItemInventory := BinContent.CalcQtyUOM;
        END;
      // IF Item.GET("License Plate Line"."Item No.") THEN BEGIN
      //  Item.SETFILTER("Location Filter",ToLocation);
      //  Item.CALCFIELDS(Inventory);
      //  ItemInventory := Item.Inventory;
      // END;
      ToWhseJnlLine."Phys. Inventory" := TRUE;
      ToWhseJnlLine.VALIDATE("Qty. (Calculated)",ItemInventory);
      ToWhseJnlLine."Reason Code" := ToReasonCode;
      ToWhseJnlLine.INSERT(TRUE);
      ToWhseJnlLine.VALIDATE("Qty. (Phys. Inventory)",(ItemInventory+"IWX License Plate Line".Quantity));
      ToWhseJnlLine.MODIFY;
    END;

    LOCAL PROCEDURE CreateWhseItemJnl@1000000004();
    VAR
      WhseJnlTemplate@1000000000 : Record 7309;
      LineNo@1000000001 : Integer;
      WhseJnlBatch@1000000002 : Record 7310;
    BEGIN
      WhseJnlLine.RESET;
      WhseJnlLine.SETRANGE("Journal Batch Name","IWX License Plate Header"."Whse. Item Jnl. Batch To");
      WhseJnlLine.SETRANGE("Journal Template Name",'ITEM');
      IF WhseJnlLine.FINDLAST THEN
        LineNo := WhseJnlLine."Line No.";
      LineNo += 10000;
      WhseJnlLine.INIT;
      WhseJnlLine."Journal Batch Name" := "IWX License Plate Header"."Whse. Item Jnl. Batch To";
      WhseJnlLine."Journal Template Name" := 'ITEM';
      IF WhseJnlTemplate.GET('ITEM') THEN
        WhseJnlLine."Source Code" := WhseJnlTemplate."Source Code";
      WhseJnlLine."Line No." := LineNo;
      WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::"Positive Adjmt.";
      WhseJnlLine.VALIDATE("Location Code",ToLocation);
      WhseJnlLine.SetUpAdjustmentBin;
      WhseJnlLine.VALIDATE("Registering Date",TODAY);
      WhseJnlLine.VALIDATE("Whse. Document No.", "IWX License Plate Line"."License Plate No.");
      WhseJnlLine.VALIDATE("Item No.","IWX License Plate Line"."Item No.");
      WhseJnlLine.VALIDATE("Bin Code","IWX License Plate Header"."Bin Code");
      WhseJnlLine.VALIDATE(Quantity,"IWX License Plate Line".Quantity);
      WhseJnlLine.VALIDATE("Unit of Measure Code","IWX License Plate Line"."Unit of Measure Code");
      IF WhseJnlBatch.GET('ITEM',"IWX License Plate Header"."Whse. Item Jnl. Batch To",ToLocation) THEN
        WhseJnlLine.VALIDATE("Reason Code",WhseJnlBatch."Reason Code");
      WhseJnlLine.INSERT;
      PostWhseItemJnl := TRUE;
    END;

    LOCAL PROCEDURE InitItemJnlLine@1000000012();
    BEGIN
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

