OBJECT Report 23044526 WHI Universal Export
{
  OBJECT-PROPERTIES
  {
    Date=02/23/17;
    Time=[ 8:56:09 AM];
    Version List=WHI2.4.7684.0;
  }
  PROPERTIES
  {
    CaptionML=[ENU=IW Universal Export;
               ESM=IW Exportaci¢n universal;
               FRC=IW Exportation universelle;
               ENC=IW Universal Export];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  generateFile;
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=No;
      OnInit=BEGIN
               //
               // SaveValues must be 'No', otherwise it cannot be used programatically
               //
             END;

    }
    CONTROLS
    {
      { 1000000000;;Container;
                  Name=Controls;
                  ContainerType=ContentArea }

      { 1000000001;1;Field  ;
                  Name=Table Number;
                  CaptionML=[ENU=Table Number;
                             ENC=Table Number];
                  SourceExpr=nTableNum;
                  TableRelation=Object.ID;
                  OnValidate=BEGIN
                               setTableName;
                             END;

                  OnLookup=BEGIN
                             recObject.SETRANGE(Type, recObject.Type::Table);
                             recObject.SETRANGE(ID, nTableNum);
                             IF recObject.FINDFIRST THEN ;
                             recObject.SETRANGE(ID);


                             IF PAGE.RUNMODAL(PAGE::Objects, recObject) = ACTION::LookupOK THEN BEGIN
                               Text := FORMAT(recObject.ID);
                             END;

                             EXIT(TRUE);
                           END;
                            }

      { 1000000003;1;Field  ;
                  CaptionML=[ENU=Table Name;
                             ENC=Table Name];
                  SourceExpr=txtTableName;
                  Editable=FALSE }

      { 1000000002;1;Field  ;
                  CaptionML=[ENU=Custom Filter String;
                             ENC=Custom Filter String];
                  SourceExpr=txtFilterString }

      { 1000000004;1;Field  ;
                  CaptionML=[ENU=Filename (on Server);
                             ENC=Filename (on Server)];
                  SourceExpr=txtFileName }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      nTableNum@1000000000 : Integer;
      txtFilterString@1000000001 : Text[1000];
      recObject@1000000002 : Record 2000000001;
      txtTableName@1000000003 : Text[100];
      rrRecRef@1000000004 : RecordRef;
      txtFileName@1000000005 : Text[250];

    PROCEDURE setTableName@1000000000();
    BEGIN
      recObject.SETRANGE(Type, recObject.Type::Table);
      recObject.SETRANGE(ID, nTableNum);
      IF recObject.FINDFIRST THEN
        txtTableName := recObject.Name
      ELSE
        txtTableName := '';
    END;

    PROCEDURE generateFile@1000000003();
    VAR
      lnField@1000000000 : Integer;
      lfFile@1000000001 : File;
      lfrField@1000000002 : FieldRef;
      losOutStream@1000000003 : OutStream;
      ltxtTab@1000000004 : Text[1];
      lnFieldCount@1000000005 : Integer;
      ltxtNewLine@1000000006 : Text[2];
      lisInStream@1000000007 : InStream;
      liOptionVal@1000000008 : Integer;
    BEGIN
      rrRecRef.OPEN(nTableNum);
      rrRecRef.SETVIEW(txtFilterString);
      rrRecRef.FINDSET(FALSE); // error on purpose

      ltxtTab[1] := 9;
      ltxtNewLine[1] := 13;
      ltxtNewLine[2] := 10;

      lfFile.TEXTMODE(TRUE);
      // 2013R2 lfFile.CREATE(txtFileName, TEXTENCODING::Windows);
      lfFile.CREATE(txtFileName);
      lfFile.CREATEOUTSTREAM(losOutStream);
      lnFieldCount := rrRecRef.FIELDCOUNT;

      // write field name header
      FOR lnField := 1 TO lnFieldCount DO BEGIN
        lfrField := rrRecRef.FIELDINDEX(lnField);
        IF isValidField(lfrField) THEN BEGIN
          losOutStream.WRITETEXT(lfrField.NAME);
          IF lnField<>rrRecRef.FIELDCOUNT THEN BEGIN
            losOutStream.WRITETEXT(ltxtTab);
          END;
        END;//if it is a field that can be written
      END;//for each field available in the table
      losOutStream.WRITETEXT(ltxtNewLine); //newline

      // write data
      REPEAT
        FOR lnField := 1 TO lnFieldCount DO BEGIN
          lfrField := rrRecRef.FIELDINDEX(lnField);
          IF isValidField(lfrField) THEN BEGIN
            // FORMAT on TYPE to workaround NAV
            IF ( FORMAT( lfrField.TYPE ) = 'Option' ) THEN BEGIN
              // options only, convert to integer first
              liOptionVal := lfrField.VALUE;
              losOutStream.WRITETEXT( FORMAT(liOptionVal) );
            END ELSE BEGIN
              // anything but an option.
              losOutStream.WRITETEXT(FORMAT(lfrField.VALUE));
            END; // if special case of option

            IF lnField<>rrRecRef.FIELDCOUNT THEN BEGIN
              losOutStream.WRITETEXT(ltxtTab);
            END; // if not at the end of the field list
          END;//if it's a field that can be exported
        END;//for each field to export
        losOutStream.WRITETEXT(ltxtNewLine); //newline
      UNTIL rrRecRef.NEXT = 0;

      lfFile.CLOSE;
    END;

    PROCEDURE isValidField@1000000031(pfrField@1000000000 : FieldRef) : Boolean;
    BEGIN
      EXIT(pfrField.ACTIVE AND (FORMAT(pfrField.CLASS) = 'Normal') AND (FORMAT(pfrField.TYPE)<>'BLOB'))
    END;

    PROCEDURE setDefaults@1000000001(ptxtFileName@1000000000 : Text;piTableNumber@1000000001 : Integer;ptxtFilter@1000000002 : Text);
    BEGIN
      //
      // Used for programmatic access
      // SaveValues on the RequestPage *MUST* be set to 'No'
      //
      txtFileName := COPYSTR( ptxtFileName, 1, MAXSTRLEN( txtFileName ) );
      nTableNum := piTableNumber;
      IF ( nTableNum <> 0 ) THEN BEGIN
        setTableName();
      END;
      txtFilterString := COPYSTR( ptxtFilter, 1, MAXSTRLEN( txtFilterString ) );
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
    }
    END.
  }
  RDLDATA
  {
  }
}

