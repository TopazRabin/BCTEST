OBJECT Report 51430 Calc. Vendor - Req. Wksh.
{
  OBJECT-PROPERTIES
  {
    Date=07/01/20;
    Time=12:00:00 AM;
    Modified=Yes;
    Version List=TPZ000.00.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Calc. Vendor - Req. Wksh.;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  Window.OPEN(
                    Text51446 +
                    Text51447);

                  //<TPZ1785>
                  IF RefreshOnly THEN BEGIN
                    ReqLine.SETRANGE("Worksheet Template Name", CurrTemplateName);
                    ReqLine.SETRANGE("Journal Batch Name", CurrWorksheetName);
                    ReqLine.SETFILTER(Quantity, '<>0');
                    IF ReqLine.FINDSET THEN
                    REPEAT
                      ReqLine.VALIDATE(Quantity, 0);
                      ReqLine.MODIFY;
                    UNTIL ReqLine.NEXT = 0;

                    ReqLine.SETRANGE(Quantity);

                    IF ReqLine.FINDLAST THEN
                      LineNo := ReqLine."Line No.";
                    ReqLine.SETRANGE("Worksheet Template Name");
                    ReqLine.SETRANGE("Journal Batch Name");
                  END;
                  //</TPZ1785>
                END;

    OnPostReport=BEGIN
                   Window.CLOSE;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;                  ;
               DataItemTable=Table23;
               ReqFilterFields=No. }

    { 1000000001;1;DataItem;ItemVendor       ;
               DataItemTable=Table99;
               DataItemTableView=SORTING(Vendor No.,Item No.,Variant Code)
                                 WHERE(Blocked=CONST(No));
               DataItemLink=Vendor No.=FIELD(No.) }

    { 1000000002;2;DataItem;                 ;
               DataItemTable=Table27;
               DataItemTableView=SORTING(No.)
                                 WHERE(Blocked=FILTER(No));
               OnPreDataItem=BEGIN
                               IF DivisionCode <> '' THEN
                                 SETRANGE("Shortcut Dimension 5 Code",DivisionCode);
                             END;

               OnAfterGetRecord=VAR
                                  VirtualSalesQty@1000000000 : Decimal;
                                  VirtualInvHistStartingDate@1000000001 : Date;
                                  VirtualInvHistEndingDate@1000000002 : Date;
                                  vTOPUsageAdjQty@1000000003 : Record 50029;
                                  TempUsageAdjQty@1000000004 : Decimal;
                                BEGIN
                                  SKU.RESET;
                                  IF LocationFilter <> '' THEN
                                    SKU.SETFILTER("Location Code",LocationFilter);
                                  SKU.SETRANGE("Item No.",ItemVendor."Item No.");
                                  SKU.SETRANGE("Variant Code",ItemVendor."Variant Code");
                                  SKU.SETRANGE("Replenishment System",SKU."Replenishment System"::Purchase);
                                  IF InclOnlyPrimaryVendorSKUs THEN
                                    SKU.SETRANGE("Vendor No.",ItemVendor."Vendor No.");
                                  IF SKU.FINDSET THEN
                                    REPEAT
                                      IF Counter MOD 5 = 0 THEN
                                        Window.UPDATE(1,SKU."Item No.");
                                      Counter := Counter + 1;

                                      NoOfMonthsWZeroUsageQty := 0;
                                      NoOfMonthsWOZeroUsageQty := 0;

                                      TotalSalesQty := 0;
                                      TotalUsageAdjmtQty := 0;
                                      TotalUsageQty := 0;
                                      TotalTransferQty := 0;

                                      //<TPZ1785>
                                      IF RefreshOnly THEN BEGIN
                                        IF FindReqLine(CurrTemplateName, CurrWorksheetName, SKU."Location Code", ItemVendor."Item No.",
                                                       ItemVendor."Vendor No.", ReqLine) = FALSE THEN BEGIN
                                          //SKU is not in worksheet, add new line
                                          LineNo := LineNo + 10000;
                                          ReqLine.INIT;
                                          ReqLine."Worksheet Template Name" := CurrTemplateName;
                                          ReqLine."Journal Batch Name" := CurrWorksheetName;
                                          ReqLine."Line No." := LineNo;
                                          ReqLine.INSERT;
                                        END;
                                      END ELSE BEGIN
                                      //</TPZ1785>

                                        LineNo := LineNo + 10000;
                                        ReqLine.INIT;
                                        ReqLine."Worksheet Template Name" := CurrTemplateName;
                                        ReqLine."Journal Batch Name" := CurrWorksheetName;
                                        ReqLine."Line No." := LineNo;

                                      //<TPZ1785>
                                      END;
                                      //</TPZ1785>

                                      ReqLine.Type := ReqLine.Type::Item;
                                      ReqLine.VALIDATE("No.",ItemVendor."Item No.");
                                      ReqLine.VALIDATE("Location Code",SKU."Location Code");
                                      ReqLine.VALIDATE("Vendor No.",Vendor."No.");
                                      ReqLine."Minimum Inventory" := SKU."Minimum Inventory";
                                      ReqLine."Maximum Inventory" := SKU."Maximum Inventory";

                                      IF Vendor."No. of Months for Avg. Usage" <> 0 THEN BEGIN
                                        StartingDate := CALCDATE('<CM+1D-1M-' + FORMAT(Vendor."No. of Months for Avg. Usage") + 'M>',WORKDATE);

                                        //<TPZ1557>
                                        //IF SKU."Date Created" > StartingDate THEN
                                        //  StartingDate := CALCDATE('<CM+1D-1M>',SKU."Date Created");
                                        //</TPZ1557>

                                        EndingDate := CALCDATE('<CM+1D-1M-1D>',WORKDATE);

                                        InvtHistory.RESET;
                                        InvtHistory.SETRANGE("Item No.",SKU."Item No.");
                                        InvtHistory.SETRANGE("Location Code",SKU."Location Code");
                                        InvtHistory.SETRANGE(
                                          "Starting Date",
                                          StartingDate,
                                          EndingDate);
                                        IF InvtHistory.FINDSET THEN
                                          REPEAT
                                            NoOfMonthsWZeroUsageQty := NoOfMonthsWZeroUsageQty + 1;
                                            IF NOT ((InvtHistory."Sales Qty." = 0) AND (InvtHistory.Inventory = 0)) THEN
                                              NoOfMonthsWOZeroUsageQty := NoOfMonthsWOZeroUsageQty + 1;
                                            TotalSalesQty := TotalSalesQty + InvtHistory."Sales Qty.";
                                            TotalUsageAdjmtQty := TotalUsageAdjmtQty + InvtHistory."Usage Adjmt. Qty.";
                                            TotalTransferQty := TotalTransferQty + InvtHistory."Transfer Qty.";
                                          UNTIL InvtHistory.NEXT = 0 ;

                                        //<TPZ1615>
                                        TempUsageAdjQty := 0;
                                        vTOPUsageAdjQty.SETRANGE("Item No.", SKU."Item No.");
                                        vTOPUsageAdjQty.SETRANGE("Primary Location Code", SKU."Location Code");
                                        vTOPUsageAdjQty.SETRANGE("Posting Date", StartingDate, EndingDate);
                                        IF vTOPUsageAdjQty.FINDSET THEN
                                        REPEAT
                                          TempUsageAdjQty := TempUsageAdjQty + vTOPUsageAdjQty.Quantity;
                                        UNTIL vTOPUsageAdjQty.NEXT = 0;

                                        vTOPUsageAdjQty.RESET;
                                        vTOPUsageAdjQty.SETRANGE("Item No.", SKU."Item No.");
                                        vTOPUsageAdjQty.SETRANGE("Location Code", SKU."Location Code");
                                        vTOPUsageAdjQty.SETRANGE("Posting Date", StartingDate, EndingDate);
                                        IF vTOPUsageAdjQty.FINDSET THEN
                                        REPEAT
                                          TempUsageAdjQty := TempUsageAdjQty - vTOPUsageAdjQty.Quantity;
                                        UNTIL vTOPUsageAdjQty.NEXT = 0;

                                        TotalUsageAdjmtQty := TotalUsageAdjmtQty + TempUsageAdjQty;
                                        //</TPZ1615>

                                        IF InvtHistory.FINDLAST THEN
                                          StartingDate := CALCDATE('<CM+1D>',InvtHistory."Starting Date");

                                        AccountingPeriod.RESET;
                                        AccountingPeriod.SETRANGE("Starting Date",StartingDate,EndingDate);
                                        IF AccountingPeriod.FINDSET THEN
                                          REPEAT
                                            // Sales Qty.
                                            ItemLedgEntry.RESET;
                                            ItemLedgEntry.SETCURRENTKEY(
                                              "Item No.",
                                              "Entry Type",
                                              "Variant Code",
                                              "Drop Shipment",
                                              "Location Code",
                                              "Posting Date");
                                            ItemLedgEntry.SETRANGE("Item No.",SKU."Item No.");
                                            ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Sale);
                                            ItemLedgEntry.SETRANGE("Location Code",SKU."Location Code");
                                            ItemLedgEntry.SETRANGE(
                                              "Posting Date",
                                              AccountingPeriod."Starting Date",
                                              CALCDATE('CM',AccountingPeriod."Starting Date"));
                                            ItemLedgEntry.CALCSUMS(Quantity);

                                            //<TPZ1426>
                                            VirtualSalesQty := CalcVirtualWhseSalesQty(SKU."Item No.", SKU."Location Code", AccountingPeriod."Starting Date",
                                                                                       CALCDATE('CM',AccountingPeriod."Starting Date"));
                                            ItemLedgEntry.Quantity := ItemLedgEntry.Quantity + VirtualSalesQty;
                                            //</TPZ1426>


                                            // Transfer Qty.
                                            IF InclTransfersIntoAvgUsage THEN BEGIN
                                              ItemLedgEntry3.RESET;
                                              ItemLedgEntry3.SETCURRENTKEY(
                                                "Item No.",
                                                "Entry Type",
                                                "Variant Code",
                                                "Drop Shipment",
                                                "Location Code",
                                                "Posting Date");
                                              ItemLedgEntry3.SETRANGE("Item No.",SKU."Item No.");
                                              ItemLedgEntry3.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Transfer);
                                              //<TPZ1687>
                                              ItemLedgEntry3.SETRANGE("Document Type", ItemLedgEntry3."Document Type"::"Transfer Shipment");
                                              //</TPZ1687>
                                              ItemLedgEntry3.SETRANGE("Location Code",SKU."Location Code");
                                              ItemLedgEntry3.SETRANGE(
                                                "Posting Date",
                                                AccountingPeriod."Starting Date",
                                                CALCDATE('CM',AccountingPeriod."Starting Date"));
                                              ItemLedgEntry3.CALCSUMS(Quantity);
                                            END;

                                            // Quantity on Hand (Inventory)
                                            ItemLedgEntry2.RESET;
                                            ItemLedgEntry2.SETCURRENTKEY(
                                              "Item No.",
                                              "Entry Type",
                                              "Variant Code",
                                              "Drop Shipment",
                                              "Location Code",
                                              "Posting Date");
                                            ItemLedgEntry2.SETRANGE("Location Code",SKU."Location Code");
                                            ItemLedgEntry2.SETFILTER("Posting Date",'<%1',AccountingPeriod."Starting Date");
                                            ItemLedgEntry2.CALCSUMS(Quantity);

                                            NoOfMonthsWZeroUsageQty := NoOfMonthsWZeroUsageQty + 1;
                                            IF NOT ((ItemLedgEntry.Quantity = 0) AND
                                                    (ItemLedgEntry2.Quantity = 0) AND
                                                    (InclTransfersIntoAvgUsage AND (ItemLedgEntry3.Quantity = 0)))
                                            THEN
                                              NoOfMonthsWOZeroUsageQty := NoOfMonthsWOZeroUsageQty + 1;

                                            TotalSalesQty := TotalSalesQty + ItemLedgEntry.Quantity;
                                            TotalTransferQty := TotalTransferQty + ItemLedgEntry3.Quantity;
                                          UNTIL AccountingPeriod.NEXT = 0;

                                        //<TPZ1664>
                                        {
                                        IF InclTransfersIntoAvgUsage THEN
                                          TotalUsageQty := -TotalSalesQty + -TotalTransferQty + TotalUsageAdjmtQty
                                        ELSE
                                          TotalUsageQty := -TotalSalesQty + TotalUsageAdjmtQty;
                                        }

                                        IF InclTransfersIntoAvgUsage THEN
                                          TotalUsageQty := -TotalSalesQty + -TotalTransferQty + -TotalUsageAdjmtQty
                                        ELSE
                                          TotalUsageQty := -TotalSalesQty + -TotalUsageAdjmtQty;
                                        //<//TPZ1664>

                                        IF NoOfMonthsWZeroUsageQty <> 0 THEN
                                          ReqLine.VALIDATE(
                                            "Avg. Usage Qty. (W/ Z. Prds.)",
                                            ROUND(TotalUsageQty / NoOfMonthsWZeroUsageQty,1));
                                        IF NoOfMonthsWOZeroUsageQty <> 0 THEN
                                          ReqLine.VALIDATE(
                                            "Avg. Usage Qty. (W/O Z. Prds.)",
                                            ROUND(TotalUsageQty / NoOfMonthsWOZeroUsageQty,1));

                                       //<TPZ1615>
                                       IF NoOfMonthsWZeroUsageQty <> 0 THEN
                                         ReqLine."Avg. Usage Adj Qty. (W/ Z.)" := ROUND(TotalUsageAdjmtQty / NoOfMonthsWZeroUsageQty,1);

                                       IF NoOfMonthsWOZeroUsageQty <> 0 THEN
                                         ReqLine."Avg. Usage Adj Qty. (W/O Z.)" := ROUND(TotalUsageAdjmtQty / NoOfMonthsWOZeroUsageQty, 1);
                                       //</TPZ1615>
                                      END;

                                      IF (SKU."Replenishment Model" = SKU."Replenishment Model"::" ") AND
                                         NOT MinMaxReplenishmentModel
                                      THEN BEGIN
                                        SKU.CALCFIELDS(Inventory,"Qty. on Sales Order","Qty. on Purch. Order","Qty. in Transit");
                                        CASE SuggestedQtyCalc OF
                                          SuggestedQtyCalc::"Incl. Periods with Zero Sales and Invt.":
                                            BEGIN
                                              OriginalQty :=
                                                ROUND(ReqLine."Avg. Usage Qty. (W/ Z. Prds.)" * Vendor."No. of Months to Purchase",1) -
                                                  SKU.Inventory -
                                                  SKU."Qty. on Purch. Order" +
                                                  SKU."Qty. on Sales Order" -
                                                  SKU."Qty. in Transit";
                                              IF SKU."Order Multiple" <> 0 THEN
                                                OriginalQty := ROUND(OriginalQty,SKU."Order Multiple",'>')
                                              ELSE
                                                IF Item."Order Multiple" <> 0 THEN
                                                  OriginalQty := ROUND(OriginalQty,Item."Order Multiple",'>');
                                              ReqLine.VALIDATE("Original Quantity",OriginalQty);
                                            END;
                                          SuggestedQtyCalc::"Excl. Periods with Zero Sales and Invt.":
                                            BEGIN
                                              OriginalQty :=
                                                ROUND(ReqLine."Avg. Usage Qty. (W/O Z. Prds.)" * Vendor."No. of Months to Purchase",1) -
                                                SKU.Inventory -
                                                SKU."Qty. on Purch. Order" +
                                                SKU."Qty. on Sales Order" -
                                                SKU."Qty. in Transit";
                                              ReqLine.VALIDATE("Original Quantity",OriginalQty);
                                            END;
                                        END;
                                      END;

                                      IF (SKU."Replenishment Model" = SKU."Replenishment Model"::"Min/Max") OR
                                         MinMaxReplenishmentModel
                                      THEN BEGIN
                                        SKU.CALCFIELDS(Inventory,SKU."Qty. on Sales Order",SKU."Qty. on Purch. Order");
                                        IF (SKU.Inventory - SKU."Qty. on Sales Order") < SKU."Minimum Inventory" THEN
                                          ReqLine."Original Quantity" :=
                                            SKU."Maximum Inventory" -
                                            SKU.Inventory +
                                            SKU."Qty. on Sales Order" -
                                            SKU."Qty. on Purch. Order";
                                      END;

                                      ReqLine.VALIDATE("Order Date",WORKDATE);
                                      ReqLine.VALIDATE("Due Date",WORKDATE);
                                      IF ReqLine."Replenishment System" = ReqLine."Replenishment System"::Transfer THEN
                                        ReqLine."Transfer Shipment Date" := WORKDATE;


                                      //<TPZ1785>
                                      IF RefreshOnly THEN BEGIN
                                        ReqLine."Last Refresh Time" := CURRENTDATETIME;
                                        ReqLine.MODIFY;
                                      END ELSE
                                      //</TPZ1785>
                                      IF NOT (SkipLinesWithZeroQty AND (ReqLine.Quantity = 0)) THEN
                                        ReqLine.INSERT;
                                    UNTIL SKU.NEXT = 0;
                                END;

               ReqFilterFields=No.;
               DataItemLink=No.=FIELD(Item No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1000000000;;Container;
                  ContainerType=ContentArea }

      { 1000000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESM=Opciones;
                             FRC=Options;
                             ENC=Options];
                  GroupType=Group }

      { 1000000009;2;Field  ;
                  CaptionML=ENU=Refresh Only;
                  SourceExpr=RefreshOnly }

      { 1000000001;2;Field  ;
                  CaptionML=ENU=Location Filter;
                  SourceExpr=LocationFilter }

      { 1000000004;2;Field  ;
                  CaptionML=ENU=Division Code;
                  SourceExpr=DivisionCode;
                  TableRelation=Division }

      { 1000000007;2;Field  ;
                  CaptionML=ENU=Incl. Only Primary Vendor SKUs;
                  SourceExpr=InclOnlyPrimaryVendorSKUs }

      { 1000000003;2;Field  ;
                  CaptionML=ENU=Suggested Qty. Calc.;
                  OptionCaptionML=ENU=Incl. Periods with Zero Sales and QOH,Excl. Periods with Zero Sales and QOH;
                  SourceExpr=SuggestedQtyCalc }

      { 1000000006;2;Field  ;
                  CaptionML=ENU=Min/Max Replenishment Model;
                  SourceExpr=MinMaxReplenishmentModel }

      { 1000000008;2;Field  ;
                  CaptionML=ENU=Incl. Transfers into Avg. Usage;
                  SourceExpr=InclTransfersIntoAvgUsage }

      { 1000000005;2;Field  ;
                  CaptionML=ENU=Skip Lines with Zero Qty.;
                  SourceExpr=SkipLinesWithZeroQty }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      AccountingPeriod@1000000026 : Record 50;
      Vend@1000000008 : Record 23;
      SKU@1000000007 : Record 5700;
      ReqLine@1000000002 : Record 246;
      ItemLedgEntry@1000000025 : Record 32;
      ItemLedgEntry2@1000000024 : Record 32;
      ItemLedgEntry3@1000000032 : Record 32;
      InvtHistory@1000000023 : Record 50044;
      Window@1000000010 : Dialog;
      CurrTemplateName@1000000004 : Code[10];
      CurrWorksheetName@1000000003 : Code[10];
      LineNo@1000000001 : Integer;
      Counter@1000000013 : Integer;
      LocationFilter@1000000006 : Code[50];
      Text51446@1000000011 : TextConst 'ENU=Calculating the vendor...\';
      Text51447@1000000012 : TextConst 'ENU=Item No.  #1##################';
      TotalSalesQty@1000000017 : Decimal;
      TotalUsageAdjmtQty@1000000016 : Decimal;
      TotalUsageQty@1000000009 : Decimal;
      TotalTransferQty@1000000031 : Decimal;
      OriginalQty@1000000018 : Decimal;
      NoOfMonthsWZeroUsageQty@1000000022 : Integer;
      NoOfMonthsWOZeroUsageQty@1000000021 : Integer;
      SuggestedQtyCalc@1000000014 : 'Incl. Periods with Zero Sales and Invt.,Excl. Periods with Zero Sales and Invt.';
      DivisionCode@1000000015 : Code[10];
      InclOnlyPrimaryVendorSKUs@1000000029 : Boolean;
      SkipLinesWithZeroQty@1000000020 : Boolean;
      MinMaxReplenishmentModel@1000000028 : Boolean;
      InclTransfersIntoAvgUsage@1000000030 : Boolean;
      StartingDate@1000000019 : Date;
      EndingDate@1000000027 : Date;
      RefreshOnly@1000000000 : Boolean;

    PROCEDURE SetTemplAndWorksheet@2(TemplateName@1000 : Code[10];WorksheetName@1001 : Code[10]);
    BEGIN
      CurrTemplateName := TemplateName;
      CurrWorksheetName := WorksheetName;
    END;

    PROCEDURE SetLocation@1000000000(NewLocationFilter@1000000000 : Code[50]);
    BEGIN
      LocationFilter := NewLocationFilter;
    END;

    PROCEDURE SetDivision@1000000001(NewDivisionCode@1000000000 : Code[10]);
    BEGIN
      DivisionCode := NewDivisionCode;
    END;

    PROCEDURE SetInclOnlyPrimaryVendorSKUs@1000000002(NewInclOnlyPrimaryVendorSKUs@1000000000 : Boolean);
    BEGIN
      InclOnlyPrimaryVendorSKUs := NewInclOnlyPrimaryVendorSKUs;
    END;

    PROCEDURE SetInclTransfersIntoAvgUsage@1000000003(NewInclTransfersIntoAvgUsage@1000000000 : Boolean);
    BEGIN
      InclTransfersIntoAvgUsage := NewInclTransfersIntoAvgUsage;
    END;

    PROCEDURE CalcVirtualWhseSalesQty@1000000011(ItemNo@1000000002 : Code[20];LocationCode@1000000004 : Code[10];VirtualInvHistStartingDate@1000000001 : Date;VirtualInvHistEndingDate@1000000000 : Date) : Decimal;
    VAR
      VirtualDCInvHist@1000000003 : Record 50046;
    BEGIN
      //<TPZ1426>
      VirtualDCInvHist.SETRANGE("Item No.", ItemNo);
      VirtualDCInvHist.SETRANGE("Location Code", LocationCode);
      VirtualDCInvHist.SETRANGE("Posting Date", VirtualInvHistStartingDate, VirtualInvHistEndingDate);
      VirtualDCInvHist.CALCSUMS("Sales Qty.");
      EXIT(VirtualDCInvHist."Sales Qty.");
      //</TPZ1426>
    END;

    PROCEDURE FindReqLine@1000000004(PrmTemplateName@1000000001 : Code[10];PrmWorksheetName@1000000000 : Code[10];PrmLocationCode@1000000003 : Code[10];PrmItemNo@1000000004 : Code[20];PrmVendorNo@1000000006 : Code[20];VAR PrmReqLine@1000000005 : Record 246) : Boolean;
    VAR
      LocalReqLine@1000000002 : Record 246;
    BEGIN
      //<TPZ1785>
      PrmReqLine.RESET;
      PrmReqLine.SETCURRENTKEY(Type,"No.","Variant Code","Location Code","Starting Date");
      PrmReqLine.SETRANGE(Type, PrmReqLine.Type::Item);
      PrmReqLine.SETRANGE("No.", PrmItemNo);
      PrmReqLine.SETRANGE("Location Code", PrmLocationCode);
      PrmReqLine.SETRANGE("Vendor No.", PrmVendorNo);
      PrmReqLine.SETRANGE("Worksheet Template Name", PrmTemplateName);
      PrmReqLine.SETRANGE("Journal Batch Name", PrmWorksheetName);
      EXIT(PrmReqLine.FINDFIRST);
      //</TPZ1785>
    END;

    BEGIN
    {
      2015-06-08 TPZ135 VCHERNYA
        Batch job has been created
      2016-05-10 TPZ1557 TMEI
        Comment out codes because it was causing NAV not calculating demand data correctly if SKU has receive creation date.
      2016-05-10 TPZ1426 TMEI
        Include Virtual Whse. Quantity.
      2016-07-12 TPZ1615 TMEI
        Add Usage Adj. Quantities field.
      2016-08-08 TPZ1545 EBAGIM
        Added NPI blocked option to item dataitem
      2016-08-23 TPZ1664 TMEI
        Changed sign of TotalUsageAdjmtQty when calculating total usage quantity.
      2016-09-14 TPZ1687 TMEI
        Only take transfer shipment quantity when calculating transfer usage
      2017-01-26 TPZ1785
        Add Refresh functionality
      2019-05-03 TPZ2531 UCHOUHAN
        Removed NPI Blocked option from Item Dataitem filter.
      TPZ2785 05112020 GGUPTA Remove Item blocking Topaz Customization
    }
    END.
  }
  RDLDATA
  {
  }
}

