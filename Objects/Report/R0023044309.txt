OBJECT Report 23044309 Count Sheet to Journals
{
  OBJECT-PROPERTIES
  {
    Date=04/06/21;
    Time=[ 8:49:16 AM];
    Modified=Yes;
    Version List=INV3.0.1706,NV,IW17.03;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Transfer All Count Sheets to Journals;
               ESM=Transferir todas las hojas de conteo para revistas;
               FRC=Transf‚rer tous les draps … revues;
               ENC=Transfer All Count Sheets to Journals];
    ProcessingOnly=Yes;
    OnPreReport=VAR
                  lcuBlockBin@1000000000 : Codeunit 23044301;
                BEGIN
                  recInvSetup.GET('');
                  //IF recInvSetup."Location Mandatory" THEN
                  //  IF codLocationFilter='' THEN ERROR('You must specify a location code filter');

                  recCountHeader.GET(codCurCountNo);

                  // needed for post from PDA
                  IF ( codItemJnlBatch = '' ) THEN BEGIN
                    codItemJnlBatch := recCountHeader."Phys. Inv. Journal Batch";
                  END;
                  IF ( codReclassJnlBatch = '' ) THEN BEGIN
                    codReclassJnlBatch := recCountHeader."Reclass. Journal Batch";
                  END;
                  IF ( codConsJnlBatch = '' ) THEN BEGIN
                    codConsJnlBatch := recCountHeader."Consumption Journal Batch";
                  END;
                  IF ( codWhseJnlBatch='' ) THEN BEGIN
                      codWhseJnlBatch := recCountHeader."Whse. Phys. Inv. Jnl. Batch";
                  END;

                  IF codItemJnlBatch='' THEN
                    ERROR(tcErrNoBatch, tcPhysInvJnl);

                  IF bSetTracking AND (codReclassJnlBatch='') THEN
                    ERROR(tcErrNoBatch, tcReclassJnl);

                  IF dtPostDate=0D THEN
                    ERROR(tcErrNoDate);

                  setupItemJnlLine(recItemJnl,PAGE::"Phys. Inventory Journal",2,codItemJnlBatch,bUseBatchDocNo);
                  bGenItemDocNo := (recItemJnl."Document No."='');
                  deleteJnlEntries(recItemJnl, tcPhysInvJnl);

                  IF codConsJnlBatch<>'' THEN BEGIN
                    recMfgSetup.GET;
                    setupItemJnlLine(recConsJnl,PAGE::"Consumption Journal",4, codConsJnlBatch,bUseBatchDocNo);
                    bGenConsDocNo := (recConsJnl."Document No."='');
                    deleteJnlEntries(recConsJnl, tcConsJnl);
                  END;//if

                  IF bSetTracking THEN BEGIN
                    setupItemJnlLine(recReclJnl,PAGE::"Item Reclass. Journal",1, codReclassJnlBatch,bUseBatchDocNo);
                    deleteJnlEntries(recReclJnl, tcReclassJnl);
                  END;//if

                  IF bUpdateCountPeriod THEN //<IW author="MH" date="12/2/2015" issue="TFS2108" />
                    cuPhysCountMgmt.SetHideValidationDialog(TRUE);

                  recGLSetup.GET;

                  lcuBlockBin.resetCountBins(recCountHeader."No."); //<IW author="MH" date="3/9/2016" issue="TFS838" />
                END;

    OnPostReport=VAR
                   lrecCountConfig@1000000000 : Record 23044300;
                 BEGIN
                   recCountHeader."Copied Difference Amt." := dTotalDiffAmt;
                   recCountHeader."Copied Difference Qty." := dTotalDiffQty;
                   recCountHeader."Copied By" := USERID;
                   recCountHeader."Last Copy to Journals" := CURRENTDATETIME;
                   IF dTotalInvValue = 0 THEN BEGIN
                     IF dTotalDiffAmt<>0 THEN
                       recCountHeader."Copied Difference Pct." := 99999
                     ELSE
                       recCountHeader."Copied Difference Pct." := 0;
                   END ELSE
                     recCountHeader."Copied Difference Pct." := dTotalDiffAmt / dTotalInvValue * 100.0;

                   recCountHeader.MODIFY;

                   //<IW author="C.Avent" date="3/30/2017" issue="3649" >
                   lrecCountConfig.SETRANGE(lrecCountConfig."Count No.", recCountHeader."No.");
                   IF codSheetNameFilter <> '' THEN
                     lrecCountConfig.SETRANGE("Sheet Name", codSheetNameFilter);

                   lrecCountConfig.MODIFYALL("Posting Status", lrecCountConfig."Posting Status"::Copied);
                   //</IW>

                   IF canShowGUI THEN
                     MESSAGE(tcPostInstructions);

                   bCopyComplete := TRUE;
                 END;

  }
  DATASET
  {
    { 8028;    ;DataItem;recLocation         ;
               DataItemTable=Table14;
               DataItemTableView=SORTING(Code);
               OnPreDataItem=VAR
                               ltcCalcDiff@1000000000 : TextConst 'ENC=Calculating differences';
                               ltcWarnFoundDiff@1000000001 : TextConst 'ENC=WARNING\\Differences between current inventory and expected quantities on the count sheet exist.\This may mean inventory transactions occurred during the count.\It is highly recommended that you review the Difference Analysis before transferring the count to journals.\\Continue with the transfer?';
                               lbFoundDiff@1000000002 : Boolean;
                             BEGIN

                               SETFILTER(Code, codLocationFilter);

                               IF canShowGUI THEN BEGIN
                                 dlgProgress.OPEN(tcProgressStr);
                                 dlgProgress.UPDATE(3, ltcCalcDiff);
                               END;//if

                               recCountSheetLine.RESET;
                               // Get differences as of supplied date
                               IF (dtAsOfDate<>0D) AND (dtAsOfDate<>WORKDATE) THEN
                                 recCountSheetLine.SETRANGE("Date Filter", 0D, dtAsOfDate);

                               recCountSheetLine.SETRANGE("Count No.", recCountHeader."No.");
                               lbFoundDiff := recCountSheetLine.recalcAllDifferences;
                               COMMIT;

                               IF lbFoundDiff THEN
                                 IF canShowGUI THEN
                                   IF NOT CONFIRM(ltcWarnFoundDiff, FALSE) THEN BEGIN
                                     ERROR('');
                                   END;//if
                             END;

               OnAfterGetRecord=VAR
                                  lbJnlSelected@1000000000 : Boolean;
                                  ltcCalcDiff@1000000002 : TextConst 'ENC=Calculating differences';
                                  ltcWarnFoundDiff@1000000001 : TextConst 'ENC=WARNING\\Differences between current inventory and expected quantities on the count sheet exist.\This may mean inventory transactions occurred during the count.\It is highly recommended that you review the Difference Analysis before transferring the count to journals.\\Continue with the transfer?';
                                BEGIN
                                  IF canShowGUI THEN
                                    dlgProgress.UPDATE(3, ltcCalcDiff);

                                  recCountSheetLine.RESET;
                                  recCountSheetLine.SETRANGE("Location Code", Code);

                                  IF canShowGUI THEN
                                    dlgProgress.UPDATE(4, Code);

                                  trecLotReclassBuf.RESET;
                                  trecLotReclassBuf.DELETEALL;

                                  trecSummary.RESET;
                                  trecSummary.DELETEALL;
                                END;
                                 }

    { 4845;1   ;DataItem;recConsumption      ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               // Calculates totals for consumption,
                               //   deletes existing entries, does general housekeeping

                               recCountSheetLine.RESET;
                               recCountSheetLine.SETRANGE("Count No.", recCountHeader."No.");
                               recCountSheetLine.SETRANGE("Location Code", recLocation.Code);
                               recCountSheetLine.SETFILTER("Prod. Order No.", '<>%1', '');
                               IF NOT recCountSheetLine.FINDSET THEN
                                 CurrReport.BREAK;

                               IF codConsJnlBatch='' THEN
                                 ERROR(tcErrNoBatch, tcConsJnl);

                               trecSummary.RESET;
                               trecSummary.DELETEALL;

                               IF dtAsOfDate<>0D THEN BEGIN
                                 trecSummary.SETRANGE("Date Filter", 0D, dtAsOfDate);
                                 recCountSheetLine.SETRANGE("Date Filter", 0D, dtAsOfDate);
                               END;//if

                               IF codCurCountNo <> '' THEN BEGIN
                                 recCountSheetLine.SETRANGE("Count No.",codCurCountNo);
                               END;


                               IF codSheetNameFilter<>'' THEN
                                 recCountSheetLine.SETRANGE("Sheet Name", codSheetNameFilter);

                               //<IW author="C.Avent" date="3/30/2017" issue="3649" >
                               recCountSheetLine.SETRANGE("Sheet Posting Status", recCountSheetLine."Sheet Posting Status"::" ");
                               //</IW>

                               // roll up totals in summary table, ignoring non-work order entries
                               cuCountMgmt.getInventoryDifference(recCountSheetLine, trecSummary, TRUE,
                                TRUE, // group by lot
                                FALSE // Group by UOM //<IW author="MH" date="7/22/2015" issue="TFS1895" />
                               );

                               trecSummary.SETCURRENTKEY("Item No.");

                               IF NOT bPostZeroDiff THEN
                                 trecSummary.SETFILTER("Difference Qty. (Base)", '<>0');


                               IF NOT trecSummary.FIND('-') THEN
                                 CurrReport.BREAK;

                               nItemCount := trecSummary.COUNT;
                               recConsumption.SETRANGE(Number, 1, nItemCount);

                               IF canShowGUI THEN
                                 dlgProgress.UPDATE(3, tcConsJnl);
                             END;

               OnAfterGetRecord=VAR
                                  ldQuantity@1000000000 : Decimal;
                                BEGIN
                                  // Inserts lines into journals if difference is not 0

                                  updateProgressDlg;
                                  createConsumptionEntry;

                                  trecSummary.NEXT;
                                END;
                                 }

    { 2711;1   ;DataItem;recWarehouse        ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               // don't do this section if directed put-aways not required
                               IF NOT recLocation."Directed Put-away and Pick" THEN
                                 CurrReport.BREAK;

                               // prep warehouse and physical inventory entries

                               recCountSheetLine.RESET;
                               trecSummary.RESET;
                               trecSummary.DELETEALL;

                               IF dtAsOfDate<>0D THEN BEGIN
                                 trecSummary.SETRANGE("Date Filter", 0D, dtAsOfDate);
                                 recCountSheetLine.SETRANGE("Date Filter", 0D, dtAsOfDate);
                               END;//if

                               IF( codCurCountNo <> '' ) THEN BEGIN
                                 recCountSheetLine.SETRANGE("Count No.",codCurCountNo);
                               END;

                               IF codSheetNameFilter<>'' THEN
                                 recCountSheetLine.SETRANGE("Sheet Name", codSheetNameFilter);

                               //<IW author="C.Avent" date="3/30/2017" issue="3649" >
                               recCountSheetLine.SETRANGE("Sheet Posting Status", recCountSheetLine."Sheet Posting Status"::" ");
                               //</IW>


                               recCountSheetLine.SETRANGE("Location Code", recLocation.Code);
                               IF NOT recCountSheetLine.FINDSET THEN
                                 CurrReport.BREAK;

                               // setup journal for warehouse entries and delete existing entries
                               IF codWhseJnlBatch='' THEN
                                 ERROR(tcErrNoBatch, tcWhseJnl);

                               setupWhseJnlLine(recBaseWhseJnl, recLocation.Code, codWhseJnlBatch, bUseBatchDocNo);
                               recBaseWhseJnl."Registering Date" := dtPostDate;

                               deleteWhsEntries(recBaseWhseJnl);

                               // roll up totals in summary table
                               cuCountMgmt.getInventoryDifference(recCountSheetLine, trecSummary, FALSE,
                                TRUE, // grp by lot
                                TRUE  // Group by UOM //<IW author="MH" date="7/22/2015" issue="TFS1895" />
                               );

                               trecSummary.SETCURRENTKEY("Item No.");

                               IF NOT bPostZeroDiff THEN
                                 trecSummary.SETFILTER("Difference Qty. (Base)", '<>0');

                               IF NOT trecSummary.FIND('-') THEN
                                 CurrReport.BREAK;

                               nCuritem := 1;
                               nItemCount := trecSummary.COUNT;
                               recWarehouse.SETRANGE(Number, 1, nItemCount);

                               IF canShowGUI THEN
                                 dlgProgress.UPDATE(3, tcWhseJnl);
                             END;

               OnAfterGetRecord=BEGIN
                                  updateProgressDlg;
                                  createWarehouseEntry;
                                  trecSummary.NEXT;
                                END;
                                 }

    { 7504;1   ;DataItem;recPhysInv          ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=VAR
                               ltrecBinSummary@1000000000 : TEMPORARY Record 23044301;
                               ldLastDiffQty@1000000003 : Decimal;
                               ldLastDiffAmt@1000000002 : Decimal;
                               ldLastInvValue@1000000001 : Decimal;
                               ldDummy@1000000004 : Decimal;
                             BEGIN
                               trecSummary.RESET;
                               recCountSheetLine.RESET;

                               IF dtAsOfDate<>0D THEN BEGIN
                                 trecSummary.SETRANGE("Date Filter", 0D, dtAsOfDate);
                                 recCountSheetLine.SETRANGE("Date Filter", 0D, dtAsOfDate);
                               END;//if

                               IF codCurCountNo <> '' THEN BEGIN
                                 recCountSheetLine.SETRANGE("Count No.",codCurCountNo);
                               END;

                               IF codSheetNameFilter<>'' THEN
                                 recCountSheetLine.SETRANGE("Sheet Name", codSheetNameFilter);

                               //<IW author="C.Avent" date="3/30/2017" issue="3649" >
                               recCountSheetLine.SETRANGE("Sheet Posting Status", recCountSheetLine."Sheet Posting Status"::" ");
                               //</IW>


                               recCountSheetLine.SETRANGE("Location Code", recLocation.Code);
                               IF NOT recCountSheetLine.FINDSET THEN
                                 CurrReport.BREAK;

                               // roll up bin differences to the item level (i.e., ignore bins)
                               //  - this is because phys inv journal entries will be posted without bins for directed pick locations
                               //  - summary will already exist from warehouse dataitem prior to this
                               IF recLocation."Directed Put-away and Pick" THEN BEGIN
                                 cuCountMgmt.rollUpBinLines(trecSummary, ltrecBinSummary);
                                 trecSummary.DELETEALL;
                                 IF ltrecBinSummary.FINDSET THEN
                                   REPEAT
                                     trecSummary := ltrecBinSummary;
                                     trecSummary.INSERT;
                                   UNTIL ltrecBinSummary.NEXT = 0;

                               END ELSE BEGIN
                                 trecSummary.DELETEALL;
                                 cuCountMgmt.getInventoryDifference(recCountSheetLine, trecSummary, FALSE,
                                   recLocation."Bin Mandatory",  // group by lot -
                                   FALSE // Group by UOM //<IW author="MH" date="7/22/2015" issue="TFS1895" />
                                 );
                               END;

                               // Update totals
                               cuCountMgmt.getLastDifferences(ldLastDiffQty,ldLastDiffAmt,ldDummy,ldDummy,ldLastInvValue);
                               dTotalDiffQty += ldLastDiffQty;
                               dTotalDiffAmt += ldLastDiffAmt;
                               dTotalInvValue += ldLastInvValue;

                               trecSummary.SETCURRENTKEY("Item No.");

                               IF NOT trecSummary.FIND('-') THEN
                                 CurrReport.BREAK;

                               nCuritem := 1;
                               nItemCount := trecSummary.COUNT;
                               recPhysInv.SETRANGE(Number, 1, nItemCount);

                               IF canShowGUI THEN
                                 dlgProgress.UPDATE(3, tcPhysInvJnl);

                               codLastItemNo := '';
                               nEntryNo := 0;
                             END;

               OnAfterGetRecord=BEGIN
                                  // Inserts lines into phys. inv. journal if difference is not 0

                                  updateProgressDlg;

                                  IF (NOT bPostZeroDiff) AND (trecSummary."Difference Qty. (Base)"=0) THEN BEGIN
                                    IF bSetTracking AND (codLastItemNo<>trecSummary."Item No.") THEN BEGIN
                                      // save lot differences for reclass
                                      saveLotDifferences;
                                      cuCountMgmt.getLotNoDifferences(codCurCountNo,
                                         trecSummary."Item No.", trecSummary."Location Code", trecSummary."Variant Code", trecLotDiff, dtAsOfDate);
                                    END//if
                                  END ELSE
                                    createInventoryEntry;

                                  codLastItemNo := trecSummary."Item No.";
                                  trecSummary.NEXT;
                                END;

               OnPostDataItem=BEGIN
                                saveLotDifferences;
                              END;
                               }

    { 2621;1   ;DataItem;recReclass          ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               // This loop determines if any reclass entries are required serial number
                               // It assumes all negative and positive adjustments to SNs have been done and
                               //  just needs to match up any remaining mismatched numbers

                               IF codReclassJnlBatch='' THEN
                                 CurrReport.BREAK;

                               // summary will already be rolled up to item no./location/variant level
                               // need to look at all records, not just those with a difference
                               trecSummary.RESET;

                               nCuritem := 1;
                               nItemCount := trecSummary.COUNT;
                               SETRANGE(Number, 1, nItemCount);

                               IF canShowGUI THEN
                                 dlgProgress.UPDATE(3, tcReclassJnl);

                               codLastItemNo := '';
                             END;

               OnAfterGetRecord=BEGIN
                                  // get extra and missing serial numbers and try to match them up
                                  IF Number=1 THEN
                                    trecSummary.FINDSET
                                  ELSE
                                    trecSummary.NEXT;


                                  updateProgressDlg;

                                  IF codLastItemNo<>trecSummary."Item No." THEN BEGIN
                                    IF NOT (recLocation."Bin Mandatory" AND cuCountMgmt.isWhseTracked(trecSummary."Item No."))
                                    THEN BEGIN
                                      getItem(trecSummary."Item No.");
                                      IF recItem."Item Tracking Code"<>'' THEN BEGIN
                                        createSNReclassEntry;
                                        createLotReclassEntry;
                                      END;//if
                                    END; // if not bins mandatory and whse tracked

                                    codLastItemNo := recItem."No.";
                                  END;//if
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   initItemJournalsForLookup;
                 END;

    }
    CONTROLS
    {
      { 1000000000;;Container;
                  ContainerType=ContentArea }

      { 1000000001;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENC=Options];
                  GroupType=Group }

      { 1000000021;2;Field  ;
                  Name=fldCountNo;
                  CaptionML=ENU=Count No.;
                  SourceExpr=codCurCountNo;
                  TableRelation="IWX Inventory Count Header";
                  OnValidate=BEGIN
                               setCurCountNo(codCurCountNo);
                             END;
                              }

      { 1000000002;2;Field  ;
                  Name=fldLocationFilter;
                  CaptionML=[ENU=Location Filter;
                             ENC=Location Filter];
                  SourceExpr=codLocationFilter;
                  TableRelation=Location.Code;
                  Enabled=TRUE }

      { 1000000013;2;Field  ;
                  Name=fldSheetNameFilter;
                  CaptionML=[ENU=Count Sheet Filter;
                             ESM=Count Sheet Filter;
                             FRC=Count Sheet Filter;
                             ENC=Count Sheet Filter];
                  SourceExpr=codSheetNameFilter;
                  OnValidate=VAR
                               ltcSheetFilterWarning@1000000000 : TextConst 'ENU=Setting this filter can result in incomplete inventory adjustments being posted\This field is normally left blank. Contact your support administrator for additional help.;ESM=Setting this filter can result in incomplete inventory adjustments being posted\This field is normally left blank. Contact your support administrator for additional help.;FRC=Setting this filter can result in incomplete inventory adjustments being posted\This field is normally left blank. Contact your support administrator for additional help.;ENC=Setting this filter can result in incomplete inventory adjustments being posted\This field is normally left blank. Contact your support administrator for additional help.';
                             BEGIN
                               IF(GUIALLOWED) THEN BEGIN
                                 MESSAGE(ltcSheetFilterWarning);
                               END;
                             END;
                              }

      { 1000000003;2;Field  ;
                  Name=fldConsJnlBatch;
                  CaptionML=[ENU=Consumption Journal Batch;
                             ENC=Consumption Journal Batch];
                  SourceExpr=codConsJnlBatch;
                  Enabled=false;
                  Editable=true;
                  LookupPageID=Item Journal Batches;
                  OnLookup=BEGIN
                             //cuItemJnlMgmt.LookupName(codConsJnlBatch, recConsJnl);
                           END;
                            }

      { 1000000004;2;Field  ;
                  Name=fldPhysInvJnlBatch;
                  CaptionML=[ENU=Phys. Inv. Journal Batch;
                             ENC=Phys. Inv. Journal Batch];
                  SourceExpr=codItemJnlBatch;
                  Enabled=false;
                  Editable=true;
                  LookupPageID=Item Journal Batches;
                  OnLookup=BEGIN
                             //cuItemJnlMgmt.LookupName(codItemJnlBatch, recItemJnl);
                           END;
                            }

      { 1000000005;2;Field  ;
                  Name=fldWhsePhysInvJnlBatch;
                  CaptionML=[ENU=Whse. Phys. Inv. Jnl. Batch;
                             ENC=Whse. Phys. Inv. Jnl. Batch];
                  SourceExpr=codWhseJnlBatch;
                  Enabled=false;
                  Editable=true;
                  LookupPageID=Item Journal Batches;
                  OnLookup=VAR
                             lbJnlSelected@1000000002 : Boolean;
                             lcodLocation@1000000001 : Code[20];
                             lcodTempBatch@1000000000 : Code[20];
                           BEGIN
                             lcodLocation := codLocationFilter;
                             recWhseJnl.TemplateSelection(PAGE::"Whse. Phys. Invt. Journal",1, recWhseJnl, lbJnlSelected);
                             IF NOT lbJnlSelected THEN
                               ERROR('');

                             lcodTempBatch := codWhseJnlBatch;
                             IF lcodTempBatch='' THEN
                               lcodTempBatch := 'DEFAULT';

                             recWhseJnl.OpenJnl(lcodTempBatch, lcodLocation, recWhseJnl);
                             recWhseJnl.LookupName(codWhseJnlBatch, lcodLocation, recWhseJnl);
                           END;
                            }

      { 1000000006;2;Field  ;
                  Name=fldSetItemTrackingLines;
                  CaptionML=[ENU=Set Item Tracking Lines;
                             ENC=Set Item Tracking Lines];
                  SourceExpr=bSetTracking;
                  OnValidate=BEGIN
                               RequestOptionsPage.UPDATE(TRUE);
                             END;
                              }

      { 1000000007;2;Field  ;
                  Name=fldReclassJnlBatch;
                  CaptionML=[ENU=Reclass Journal Batch;
                             ENC=Reclass Journal Batch];
                  SourceExpr=codReclassJnlBatch;
                  Enabled=false;
                  Editable=true;
                  LookupPageID=Item Journal Batches;
                  OnLookup=BEGIN
                             //cuItemJnlMgmt.LookupName(codReclassJnlBatch, recReclJnl);
                           END;
                            }

      { 1000000008;2;Field  ;
                  Name=fldUseBatchDocNos;
                  CaptionML=[ENU=Use Batch Document Nos.;
                             ENC=Use Batch Document Nos.];
                  SourceExpr=bUseBatchDocNo }

      { 1000000009;2;Field  ;
                  Name=fldCalcDifferences;
                  CaptionML=[ENU=Calc. Differences as of Date;
                             ENC=Calc. Differences as of Date];
                  SourceExpr=dtAsOfDate }

      { 1000000010;2;Field  ;
                  Name=fldPostingDate;
                  CaptionML=[ENU=Posting Date;
                             ENC=Posting Date];
                  SourceExpr=dtPostDate }

      { 1000000011;2;Field  ;
                  Name=fldPostZeroDiff;
                  CaptionML=[ENU=Post Zero Differences;
                             ENC=Post Zero Differences];
                  SourceExpr=bPostZeroDiff }

      { 1000000022;2;Field  ;
                  Name=fldUpdateNextCount;
                  CaptionML=ENU=Update Next Count Period;
                  SourceExpr=bUpdateCountPeriod }

      { 1000000012;2;Field  ;
                  AssistEdit=Yes;
                  CaptionML=ENU=Item Dimensions;
                  SourceExpr=getDimList;
                  OnAssistEdit=VAR
                                 lrecDocDim@1000000000 : Integer;
                               BEGIN
                                 cuDimMgmt.ShowDimensionSet(recCountHeader."Dimension Set ID", recCountHeader."No.");
                               END;
                                }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      recBaseWhseJnl@1000000036 : Record 7311;
      recConsJnl@1000000030 : Record 83;
      recCountSheetLine@1000000019 : Record 23044301;
      recItemJnl@1000000001 : Record 83;
      recWhseJnl@1000000028 : Record 7311;
      recReclJnl@1000000040 : Record 83;
      trecSummary@1000000000 : TEMPORARY Record 23044301;
      recItem@1000000037 : Record 27;
      trecSNDiff@1000000038 : TEMPORARY Record 307;
      trecLotDiff@1000000047 : TEMPORARY Record 23044303;
      recInvSetup@1000000055 : Record 313;
      recMfgSetup@1000000039 : Record 99000765;
      recGLSetup@1000000026 : Record 98;
      trecLotReclassBuf@1000000048 : TEMPORARY Record 23044303;
      recCountHeader@1000000052 : Record 23044304;
      recSKU@1000000050 : Record 5700;
      cuPhysCountMgmt@1000000051 : Codeunit 7380;
      cuCountMgmt@1000000033 : Codeunit 23044300;
      cuItemJnlMgmt@1000000031 : Codeunit 240;
      cuNoSeriesMgt@1000000017 : Codeunit 396;
      cuDimMgmt@1000000024 : Codeunit 408;
      bGenConsDocNo@1000000035 : Boolean;
      bGenItemDocNo@1000000034 : Boolean;
      bSetTracking@1000000025 : Boolean INDATASET;
      bUseBatchDocNo@1000000023 : Boolean;
      codConsJnlBatch@1000000002 : Code[20];
      codItemJnlBatch@1000000014 : Code[20];
      codReclassJnlBatch@1000000042 : Code[20];
      codLastItemNo@1000000020 : Code[20];
      codLocationFilter@1000000027 : Code[80];
      codSheetNameFilter@1000000045 : Code[20];
      codWhseJnlBatch@1000000029 : Code[20];
      dlgProgress@1000000005 : Dialog;
      dtPostDate@1000000003 : Date;
      nCuritem@1000000008 : Integer;
      nEntryNo@1000000021 : Integer;
      nItemCount@1000000007 : Integer;
      tcConsJnl@1000000015 : TextConst 'ENC=Consumption Journal';
      tcDeleteAll@1000000009 : TextConst 'ENC=There are existing entries in the ''%1'' %2. \Delete these entries?';
      tcDeleteError@1000000022 : TextConst 'ENC=You cannot proceed without deleting existing %1 entries from the %2 batch, or choosing a different batch.';
      tcDescr@1000000010 : TextConst 'ENC=Phys Inventory WIP Update LINE%1';
      tcDocNo@1000000004 : TextConst 'ENC=INV%1';
      tcErrNoBatch@1000000012 : TextConst 'ENC=You must specify a batch to use for the %1';
      tcErrNoDate@1000000011 : TextConst 'ENC=You must supply a posting date';
      tcNoEntries@1000000013 : TextConst 'ENC=There are no count sheet entries to transfer';
      tcPhysInvJnl@1000000016 : TextConst 'ENC=Physical Inventory Journal';
      tcPostInstructions@1000000018 : TextConst 'ENC=Transfer complete.\You must now post the entries in the Warehouse Journal, then the Physical Inventory Journal, and finally post the entries in the Consumption Journal.';
      tcProgressStr@1000000006 : TextConst 'ENC=Item No.  #1#################\Journal   #3#################\Progress  @2@@@@@@@@@@@@@@@@@\Location  #4#################';
      tcWhseJnl@1000000032 : TextConst 'ENC=Warehouse Journal';
      tcReclassJnl@1000000041 : TextConst 'ENC=Reclass. Journal';
      dtAsOfDate@1000000043 : Date;
      bNoGUI@1000000044 : Boolean;
      bPostZeroDiff@1000000046 : Boolean;
      codCurCountNo@1000000049 : Code[20];
      bUpdateCountPeriod@1000000053 : Boolean;
      bCopyComplete@1000000054 : Boolean;
      dTotalDiffQty@1000000057 : Decimal;
      dTotalDiffAmt@1000000056 : Decimal;
      dTotalInvValue@1000000059 : Decimal;

    LOCAL PROCEDURE createConsumptionEntry@1000000000();
    BEGIN
      // Creates consumption journal line

      recConsJnl."Line No." := recConsJnl."Line No." + 1;
      recConsJnl.VALIDATE("Posting Date", dtPostDate);

      recConsJnl.VALIDATE("Order Type",recConsJnl."Order Type"::Production);
      recConsJnl.VALIDATE("Order No." , trecSummary."Prod. Order No.");
      recConsJnl.VALIDATE("Item No." , trecSummary."Item No.");
      recConsJnl.VALIDATE("Location Code" , trecSummary."Location Code");
      recConsJnl.VALIDATE("Variant Code" , trecSummary."Variant Code");
      recConsJnl.VALIDATE(Quantity, trecSummary."Difference Qty. (Base)");

      IF bGenConsDocNo THEN
        IF recMfgSetup."Doc. No. Is Prod. Order No." THEN
          recConsJnl."Document No." := trecSummary."Prod. Order No."
        ELSE
          recConsJnl."Document No." := recCountHeader."No.";

      setDimensions(recConsJnl);
      recConsJnl.INSERT(TRUE);
    END;

    LOCAL PROCEDURE createInventoryEntry@1000000001();
    VAR
      tcDocNo@1000000001 : TextConst 'ENC=INV%1';
      tcDescr@1000000000 : TextConst 'ENC=Phys Inventory Update TAG%1';
    BEGIN
      // Called for each rolled-up count entry.  Adds journal line if difference is not 0.

      nEntryNo += 1;

      recItemJnl."Line No." := recItemJnl."Line No." + 1;

      recItemJnl.VALIDATE("Posting Date", dtPostDate);

      IF bGenItemDocNo THEN
        recItemJnl."Document No." := recCountHeader."No.";

      // need to set this now for different UOMs (even though journal logic does it for us)
      IF trecSummary."Difference Qty. (Base)"<0 THEN BEGIN
        recItemJnl."Entry Type" := recItemJnl."Entry Type"::"Negative Adjmt.";
      END ELSE BEGIN
        recItemJnl."Entry Type" := recItemJnl."Entry Type"::"Positive Adjmt.";
      END;//if

      recItemJnl."Phys. Inventory" := FALSE;
      recItemJnl.VALIDATE("Item No." , trecSummary."Item No.");
      recItemJnl.VALIDATE("Qty. per Unit of Measure", 1);
      recItemJnl.VALIDATE("Location Code" , trecSummary."Location Code");
      recItemJnl.VALIDATE("Variant Code" , trecSummary."Variant Code");
      recItemJnl."Phys. Inventory" := TRUE;
      recItemJnl.VALIDATE("Qty. (Calculated)", trecSummary."Expected Quantity (Base)");

      IF (NOT recLocation."Directed Put-away and Pick") AND recLocation."Bin Mandatory" THEN BEGIN
        // don't set bin location or it will create a whse entry adjustment that we've already posted
        recItemJnl.VALIDATE("Bin Code", trecSummary."Bin Code");
      END;//if

      recItemJnl.INSERT(TRUE);

      recItemJnl.VALIDATE("Qty. (Phys. Inventory)", trecSummary."Quantity (Base)");

      setDimensions(recItemJnl);
      recItemJnl.MODIFY;

      //<IW author="M.Hamblin" date="2/15/2012" issue="296" >
      IF bUpdateCountPeriod THEN BEGIN
        IF recSKU.GET(trecSummary."Location Code", trecSummary."Item No.", trecSummary."Variant Code") THEN BEGIN //<IW author="R.Trudeau" date="4/1
          IF recSKU."Phys Invt Counting Period Code"<>'' THEN
            cuPhysCountMgmt.UpdateSKUPhysInvtCount(recSKU);

          recSKU.RESET; //<DMS author="MH" date="6/5/2017" issue="TFS3188" />
        END ELSE BEGIN
          getItem(trecSummary."Item No.");
          IF (recItem."Last Counting Period Update"<>TODAY) AND (recItem."Phys Invt Counting Period Code"<>'') THEN
            cuPhysCountMgmt.UpdateItemPhysInvtCount(recItem);

          recItem.RESET; //<DMS author="MH" date="6/5/2017" issue="TFS3188" />
        END;//if
      END;//if

      // reworked existing logic to account for whse tracked items in non-bin locations
      IF bSetTracking THEN BEGIN
        IF (recLocation."Bin Mandatory" AND cuCountMgmt.isWhseTracked(trecSummary."Item No.")) THEN
          setItemBinLotNumbers(recItemJnl, trecSummary)
        ELSE
          setPhysInvSerialNos(recItemJnl);
      END;//if
    END;

    LOCAL PROCEDURE createWarehouseEntry@1000000010();
    VAR
      lrecBinContent@1000000000 : Record 7302;
    BEGIN
      // Creates entries for advanced warehouse locations

      recBaseWhseJnl."Line No." += 1;
      recWhseJnl := recBaseWhseJnl;

      recWhseJnl."Phys. Inventory" := FALSE;
      recWhseJnl.VALIDATE("Item No.", trecSummary."Item No.");
      recWhseJnl.VALIDATE("Variant Code", trecSummary."Variant Code");
      recWhseJnl.VALIDATE("Bin Code", trecSummary."Bin Code");
      recWhseJnl.VALIDATE("Unit of Measure Code", trecSummary."Unit of Measure Code");

      recWhseJnl."Phys. Inventory" := TRUE;
      recWhseJnl.VALIDATE("Qty. (Calculated)", trecSummary."Expected Quantity");
      recWhseJnl."Qty. (Calculated) (Base)" := trecSummary."Expected Quantity (Base)";
      recWhseJnl.VALIDATE("Qty. (Phys. Inventory)", trecSummary.Quantity);

      recWhseJnl."Whse. Document Type" := recWhseJnl."Whse. Document Type"::"Whse. Phys. Inventory";

      // Set lot numbers if required
      IF cuCountMgmt.isLotWhseTracked(trecSummary."Item No.") THEN
        recWhseJnl."Lot No." := trecSummary."Lot No.";

      IF trecSummary."Expiration Date" <> 0D THEN
        recWhseJnl."Expiration Date" := trecSummary."Expiration Date";

      IF cuCountMgmt.isSNWhseTracked(trecSummary."Item No.") THEN
        recWhseJnl."Serial No." := trecSummary."Serial No.";


      // to address NAV2015 logic change
      IF recWhseJnl.Quantity >= 0 THEN
        recWhseJnl."Entry Type" := recWhseJnl."Entry Type"::"Positive Adjmt."
      ELSE
        recWhseJnl."Entry Type" := recWhseJnl."Entry Type"::"Negative Adjmt.";


      recWhseJnl.INSERT(TRUE);
    END;

    LOCAL PROCEDURE createSNReclassEntry@1000000009();
    VAR
      ltrecExtraSN@1000000001 : TEMPORARY Record 307;
      ltrecMissingSN@1000000000 : TEMPORARY Record 307;
      lnQty@1000000002 : Integer;
      lrecResEntry@1000000003 : Record 337;
      lcuCreateResEntry@1000000004 : Codeunit 99000830;
      ltcConfirmSN@1000000005 : TextConst 'ENU=Serial No. %1 or %2 for %3 in Location %4 has been placed on both the Physical Inventory Journal and Reclass Journal.\The item and entries should be reviewd prior to posting.\Would you like to cancel the transfer?';
      ltcErrAbort@1000000006 : TextConst 'ENU=Transfer to journals cancelled.';
    BEGIN
      // Creates reclass entries to change serial numbers

      cuCountMgmt.getMissingSerialNos(codCurCountNo, trecSummary."Item No.",
        trecSummary."Location Code", trecSummary."Variant Code", ltrecMissingSN, dtAsOfDate);
      IF NOT ltrecMissingSN.FIND('+') THEN
        EXIT;

      cuCountMgmt.getExtraSerialNos(codCurCountNo, trecSummary."Item No.",
        trecSummary."Location Code", trecSummary."Variant Code", ltrecExtraSN, FALSE {no detail}, dtAsOfDate);
      IF NOT ltrecExtraSN.FIND('+') THEN
        EXIT;

      // create reclass journal line
      recReclJnl."Line No." := recReclJnl."Line No." + 1;
      recReclJnl.VALIDATE("Posting Date", dtPostDate);
      recReclJnl."Entry Type" := recReclJnl."Entry Type"::Transfer;

      recReclJnl.VALIDATE("Order Type",recReclJnl."Order Type"::Production);
      recReclJnl.VALIDATE("Order No." , trecSummary."Prod. Order No.");
      recReclJnl.VALIDATE("Item No." , trecSummary."Item No.");
      recReclJnl.VALIDATE("Location Code" , trecSummary."Location Code");
      recReclJnl.VALIDATE("Variant Code" , trecSummary."Variant Code");
      recReclJnl.VALIDATE(Quantity, ltrecExtraSN.COUNT);

      IF bGenItemDocNo OR (recReclJnl."Document No." = '') THEN
        recReclJnl."Document No." := recCountHeader."No.";

      setDimensions(recReclJnl);
      recReclJnl.INSERT(TRUE);


      // set up base filters to ensure serial number hasn't already been used (should not be possible)
      lrecResEntry.SETRANGE("Source Type", DATABASE::"Item Journal Line");
      lrecResEntry.SETRANGE("Source ID", recItemJnl."Journal Template Name");
      lrecResEntry.SETRANGE("Source Batch Name", recItemJnl."Journal Batch Name");
      lrecResEntry.SETRANGE("Item No.", trecSummary."Item No.");

      // add item tracking to reclass line
      REPEAT
        IF canShowGUI THEN BEGIN
          lrecResEntry.SETFILTER("Serial No.", '%1|%2', ltrecExtraSN."Serial No.", ltrecMissingSN."Serial No.");
          IF lrecResEntry.FINDSET THEN
            IF CONFIRM(ltcConfirmSN, FALSE,
               ltrecExtraSN."Serial No.", ltrecMissingSN."Serial No.", trecSummary."Item No.", recLocation.Code)
            THEN
              ERROR(ltcErrAbort);
        END;//if

        lnQty += 1;

        // as long as we have a missing sn and an extra sn, we can do a reclass
        lcuCreateResEntry.CreateReservEntryFor(
          DATABASE::"Item Journal Line",
          recReclJnl."Entry Type",
          recReclJnl."Journal Template Name", recReclJnl."Journal Batch Name",
          0, //prod order line
          recReclJnl."Line No.", //source ref no.
          1, //qty per UOM (count is always in base UOM)
          1, // quantity
          1, // QuantityBase (decimal)
          ltrecMissingSN."Serial No.",
          ltrecMissingSN."Lot No." // lot no.
        );

        lcuCreateResEntry.SetNewSerialLotNo(ltrecExtraSN."Serial No.", ltrecExtraSN."Lot No.");

        lcuCreateResEntry.CreateEntry(
          recReclJnl."Item No.", //ItemNo
          recReclJnl."Variant Code", //VariantCode
          recReclJnl."Location Code", //LocationCode
          '', //Description
          recReclJnl."Posting Date", //ExpectedReceiptDate
          0D, //ShipmentDate
          0, //TransferredFromEntryNo
          3 //Status (3==Prospect)
        );

      UNTIL (ltrecExtraSN.NEXT(-1)=0) OR (ltrecMissingSN.NEXT(-1)=0);

      recReclJnl.VALIDATE(Quantity, lnQty);
      recReclJnl.MODIFY;
    END;

    LOCAL PROCEDURE createLotReclassEntry@1000000007();
    VAR
      ldQty@1000000002 : Decimal;
      ldTotalQty@1000000007 : Decimal;
      lrecResEntry@1000000003 : Record 337;
      lcuCreateResEntry@1000000004 : Codeunit 99000830;
      ltcConfirmSN@1000000005 : TextConst 'ENU=Serial No. %1 or %2 for %3 in Location %4 has been placed on both the Physical Inventory Journal and Reclass Journal.\The item and entries should be reviewd prior to posting.\Would you like to cancel the transfer?';
      ltcErrAbort@1000000006 : TextConst 'ENU=Transfer to journals cancelled.';
      ltrecNegativeLotBuf@1000000000 : TEMPORARY Record 23044303;
      lbDone@1000000001 : Boolean;
      lnSanity@1000000008 : Integer;
    BEGIN
      // Creates reclass entries for lots

      trecLotReclassBuf.RESET;
      trecLotReclassBuf.SETRANGE("Item No.", trecSummary."Item No.");
      trecLotReclassBuf.SETRANGE("Variant Code", trecSummary."Variant Code");
      trecLotReclassBuf.SETFILTER("Lot No.", '<>%1', '');
      trecLotReclassBuf.SETFILTER(Quantity, '<0');
      IF NOT trecLotReclassBuf.FINDSET THEN
        EXIT;

      createReclassLine;

      // add item tracking to reclass line - start with negatives and then add positives
      // cache negative lines

      REPEAT
        ltrecNegativeLotBuf := trecLotReclassBuf;
        ltrecNegativeLotBuf.INSERT;
      UNTIL trecLotReclassBuf.NEXT = 0;

      trecLotReclassBuf.SETFILTER(Quantity, '>0');
      IF NOT trecLotReclassBuf.FINDSET THEN
        EXIT;

      ltrecNegativeLotBuf.FINDSET;

      REPEAT
        // as long as we have missing lots and extra lots, we can do a reclass
        ldQty := -ltrecNegativeLotBuf.Quantity;

        IF ldQty>trecLotReclassBuf.Quantity THEN
          ldQty := trecLotReclassBuf.Quantity;

        ldTotalQty += ldQty;

        lcuCreateResEntry.CreateReservEntryFor(
          DATABASE::"Item Journal Line",
          recReclJnl."Entry Type",
          recReclJnl."Journal Template Name", recReclJnl."Journal Batch Name",
          0, //prod order line
          recReclJnl."Line No.", //source ref no.
          1, //qty per UOM (count is always in base UOM)
          ldQty, // quantity
          ldQty,  // QuantityBase (decimal)
          '',  // sn
          ltrecNegativeLotBuf."Lot No." // lot no.
        );

        lcuCreateResEntry.SetNewSerialLotNo('', trecLotReclassBuf."Lot No.");
        lcuCreateResEntry.SetNewExpirationDate(trecLotReclassBuf."Expiration Date");

        lcuCreateResEntry.CreateEntry(
          recReclJnl."Item No.", //ItemNo
          recReclJnl."Variant Code", //VariantCode
          recReclJnl."Location Code", //LocationCode
          '', //Description
          recReclJnl."Posting Date", //ExpectedReceiptDate
          0D, //ShipmentDate
          0, //TransferredFromEntryNo
          3 //Status (3==Prospect)
        );

        trecLotReclassBuf.Quantity -= ldQty;
        ltrecNegativeLotBuf.Quantity += ldQty;

        IF trecLotReclassBuf.Quantity <= 0 THEN
          lbDone := (trecLotReclassBuf.NEXT = 0);

        IF NOT lbDone THEN BEGIN
          IF (ltrecNegativeLotBuf.Quantity >= 0) THEN
            lbDone := (ltrecNegativeLotBuf.NEXT = 0)
          ELSE BEGIN
            recReclJnl.VALIDATE(Quantity, ldTotalQty);
            recReclJnl.MODIFY;
            ldTotalQty := 0;
            createReclassLine;
          END;//if on same original lot #
        END;//if

        lnSanity += 1;
        lbDone := lbDone OR (lnSanity>50);

      UNTIL lbDone;

      IF ldTotalQty<>0 THEN BEGIN
        recReclJnl.VALIDATE(Quantity, ldTotalQty);
        recReclJnl.MODIFY;
      END;//if
    END;

    LOCAL PROCEDURE createReclassLine@1000000013();
    BEGIN
      // create reclass journal line
      recReclJnl."Line No." := recReclJnl."Line No." + 1;
      recReclJnl.VALIDATE("Posting Date", dtPostDate);
      recReclJnl."Entry Type" := recReclJnl."Entry Type"::Transfer;
      recReclJnl.VALIDATE("Item No." , trecSummary."Item No.");
      recReclJnl.VALIDATE("Location Code" , trecSummary."Location Code");
      recReclJnl.VALIDATE("Variant Code" , trecSummary."Variant Code");

      recReclJnl.VALIDATE(Quantity, 1);

      IF bGenItemDocNo OR (recReclJnl."Document No." = '') THEN
        recReclJnl."Document No." := recCountHeader."No.";

      setDimensions(recReclJnl);
      recReclJnl.INSERT(TRUE);
    END;

    LOCAL PROCEDURE deleteJnlEntries@1000000012(precItemJnl@1000000000 : Record 83;ptxtJnlName@1000000001 : Text[50]);
    VAR
      lrecItemJnl@1000000004 : Record 83;
      lrecresEntry@1000000002 : Record 337;
      ltrecInteger@1000000003 : TEMPORARY Record 2000000026;
    BEGIN
      // Deletes old journal entries

      lrecItemJnl := precItemJnl;
      lrecItemJnl.SETRECFILTER;
      lrecItemJnl.SETRANGE("Line No.");

      IF canShowGUI THEN
        IF lrecItemJnl.FINDSET THEN
          IF NOT CONFIRM(tcDeleteAll, FALSE, lrecItemJnl."Journal Batch Name", ptxtJnlName) THEN
            ERROR(tcDeleteError, ptxtJnlName, lrecItemJnl."Journal Batch Name");


      // delete tracking entries
      lrecresEntry.SETRANGE("Source Type", DATABASE::"Item Journal Line");
      lrecresEntry.SETRANGE("Source ID", lrecItemJnl."Journal Template Name");
      lrecresEntry.SETRANGE("Source Batch Name", lrecItemJnl."Journal Batch Name");
      IF lrecresEntry.FINDSET THEN BEGIN
        REPEAT
          ltrecInteger.Number := lrecresEntry."Entry No.";
          IF ltrecInteger.INSERT THEN ;
        UNTIL lrecresEntry.NEXT = 0;

        IF ltrecInteger.FINDSET THEN
          REPEAT
            lrecresEntry.SETRANGE("Entry No.", ltrecInteger.Number);
            lrecresEntry.DELETEALL;
          UNTIL ltrecInteger.NEXT = 0;
      END;//if

      lrecItemJnl.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE deleteWhsEntries@1000000018(precWhseJnl@1000000000 : Record 7311);
    VAR
      lrecWhseJnl@1000000001 : Record 7311;
    BEGIN
      // Deletes items from the specified warehouse journal

      lrecWhseJnl := precWhseJnl;
      lrecWhseJnl.SETRECFILTER;
      lrecWhseJnl.SETRANGE("Line No.");

      IF canShowGUI THEN
        IF lrecWhseJnl.FINDSET THEN
          IF NOT CONFIRM(tcDeleteAll, FALSE, lrecWhseJnl."Journal Batch Name", tcWhseJnl) THEN
            ERROR(tcDeleteError);

      lrecWhseJnl.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE updateProgressDlg@1000000014();
    BEGIN
      IF canShowGUI THEN BEGIN
        dlgProgress.UPDATE(1, trecSummary."Item No." + ' ('+trecSummary."Prod. Order No."+')');
        dlgProgress.UPDATE(2, (nCuritem * 10000) DIV nItemCount);
        nCuritem += 1;
      END;//if
    END;

    LOCAL PROCEDURE setupItemJnlLine@1000000016(VAR precItemJnl@1000000005 : Record 83;pnFormID@1000000002 : Integer;pnTemplateType@1000000009 : Integer;pcodBatchName@1000000003 : Code[20];pbUseDocNo@1000000004 : Boolean);
    VAR
      lbJnlSelected@1000000001 : Boolean;
      lcodJnlBatch@1000000000 : Code[20];
      lrecItemJnlTemplate@1000000006 : Record 82;
      lrecItemJnlBatch@1000000007 : Record 233;
    BEGIN
      // Sets up the item journal line with proper template names, no. series, etc.

      CLEAR(precItemJnl);
      lrecItemJnlTemplate.SETRANGE("Page ID", pnFormID);
      lrecItemJnlTemplate.SETRANGE(Type, pnTemplateType);
      lrecItemJnlTemplate.FINDSET;

      precItemJnl."Journal Template Name" := lrecItemJnlTemplate.Name;
      precItemJnl."Journal Batch Name" := pcodBatchName;
      precItemJnl."Source Code" := lrecItemJnlTemplate."Source Code";
      precItemJnl."Entry Type" := lrecItemJnlTemplate.Type;

      lrecItemJnlBatch.GET(precItemJnl."Journal Template Name", pcodBatchName);

      IF pbUseDocNo AND (lrecItemJnlBatch."No. Series" <> '') AND
         ((lrecItemJnlTemplate.Type<>lrecItemJnlTemplate.Type::Consumption) OR NOT recMfgSetup."Doc. No. Is Prod. Order No.")
      THEN BEGIN
        CLEAR(cuNoSeriesMgt);
        precItemJnl."Document No." :=
          cuNoSeriesMgt.GetNextNo(lrecItemJnlBatch."No. Series", TODAY, FALSE);
      END;

      precItemJnl."Reason Code" := lrecItemJnlBatch."Reason Code";
      IF pbUseDocNo THEN
        precItemJnl."Posting No. Series" := lrecItemJnlBatch."Posting No. Series";

      precItemJnl.setIgnoreItemBlock(TRUE); // allow blocked items to be added to journals without failing
    END;

    LOCAL PROCEDURE setupWhseJnlLine@1000000011(VAR precWhseJnl@1000000002 : Record 7311;pcodLocation@1000000000 : Code[20];pcodBatchName@1000000001 : Code[20];pbUseDocNo@1000000008 : Boolean);
    VAR
      lrecLocation@1000000004 : Record 14;
      lrecBin@1000000005 : Record 7354;
      lrecWhseJnlTemplate@1000000006 : Record 7309;
      lrecWhseJnlBatch@1000000007 : Record 7310;
    BEGIN
      // Sets up the warehouse journal line for inserts

      CLEAR(precWhseJnl);
      lrecWhseJnlTemplate.SETRANGE("Page ID", PAGE::"Whse. Phys. Invt. Journal");
      lrecWhseJnlTemplate.SETRANGE(Type, 1);
      lrecWhseJnlTemplate.FINDSET;

      precWhseJnl."Journal Template Name" := lrecWhseJnlTemplate.Name;
      precWhseJnl."Journal Batch Name" := pcodBatchName;
      precWhseJnl."Location Code" := pcodLocation;
      precWhseJnl."Source Code" := lrecWhseJnlTemplate."Source Code";

      lrecWhseJnlBatch.GET(precWhseJnl."Journal Template Name", pcodBatchName, pcodLocation);

      IF pbUseDocNo AND (lrecWhseJnlBatch."No. Series" <> '') THEN BEGIN
        CLEAR(cuNoSeriesMgt);
        precWhseJnl."Whse. Document No." :=
          cuNoSeriesMgt.GetNextNo(lrecWhseJnlBatch."No. Series", TODAY, FALSE);
      END ELSE
        precWhseJnl."Whse. Document No." := recCountHeader."No.";

      precWhseJnl."Reason Code" := lrecWhseJnlBatch."Reason Code";
      IF pbUseDocNo THEN
        precWhseJnl."Registering No. Series" := lrecWhseJnlBatch."Registering No. Series"
      ELSE
        precWhseJnl."Whse. Document No." := recCountHeader."No.";


      lrecLocation.GET(pcodLocation);
      lrecBin.GET(lrecLocation.Code, lrecLocation."Adjustment Bin Code");
      precWhseJnl."From Zone Code" := lrecBin."Zone Code";
      precWhseJnl."From Bin Code" := lrecBin.Code;
      precWhseJnl."From Bin Type Code" := lrecBin."Bin Type Code";
    END;

    LOCAL PROCEDURE initItemJournalsForLookup@1000000004();
    VAR
      lbJnlSelected@1000000001 : Boolean;
      lcodJnlBatch@1000000000 : Code[20];
      ltcErrNoJournal@1000000002 : TextConst 'ENC=No journal found for%1';
      ltcPhysInv@1000000003 : TextConst 'ENC=Physical Inventory';
      ltcCons@1000000004 : TextConst 'ENC=Consumption';
      ltcReclass@1000000005 : TextConst 'ENC=Reclass';
    BEGIN
      cuItemJnlMgmt.TemplateSelection(PAGE::"Consumption Journal",4,FALSE, recConsJnl, lbJnlSelected);
      IF NOT lbJnlSelected THEN
        ERROR(ltcErrNoJournal, ltcCons);
      cuItemJnlMgmt.OpenJnl(lcodJnlBatch, recConsJnl);

      cuItemJnlMgmt.TemplateSelection(PAGE::"Phys. Inventory Journal",2,FALSE, recItemJnl, lbJnlSelected);
      IF NOT lbJnlSelected THEN
        ERROR(ltcErrNoJournal, ltcPhysInv);
      cuItemJnlMgmt.OpenJnl(lcodJnlBatch, recItemJnl);

      cuItemJnlMgmt.TemplateSelection(PAGE::"Item Reclass. Journal",1,FALSE, recReclJnl, lbJnlSelected);
      IF NOT lbJnlSelected THEN
        ERROR(ltcErrNoJournal, ltcReclass);
      cuItemJnlMgmt.OpenJnl(lcodJnlBatch, recReclJnl);
    END;

    LOCAL PROCEDURE setPhysInvSerialNos@1000000003(VAR precCurItemJnl@1000000000 : Record 83);
    VAR
      ldQty@1000000001 : Decimal;
      lcuCreateResEntry@1000000002 : Codeunit 99000830;
      ltcBlankSN@1000000003 : TextConst 'ENC=(BLANK)';
    BEGIN
      // Sets item tracking lines if required and if data is available

      IF recItem."No."<>precCurItemJnl."Item No." THEN
        getItem(precCurItemJnl."Item No.");

      IF recItem."Item Tracking Code"<>'' THEN BEGIN
        // get differences if this is new item number
        IF codLastItemNo<>recItem."No." THEN BEGIN
          trecSNDiff.RESET;
          trecSNDiff.DELETEALL;
          IF precCurItemJnl."Entry Type" = recItemJnl."Entry Type"::"Negative Adjmt." THEN
            cuCountMgmt.getMissingSerialNos(codCurCountNo, recItem."No.", precCurItemJnl."Location Code",
                  precCurItemJnl."Variant Code", trecSNDiff, dtAsOfDate)
          ELSE
            cuCountMgmt.getExtraSerialNos(codCurCountNo, recItem."No.", precCurItemJnl."Location Code",
                  precCurItemJnl."Variant Code", trecSNDiff, FALSE {no detail}, dtAsOfDate);

          saveLotDifferences;
          cuCountMgmt.getLotNoDifferences(codCurCountNo,
             recItem."No.", precCurItemJnl."Location Code", precCurItemJnl."Variant Code", trecLotDiff, dtAsOfDate);

        END;//if new item no

        IF precCurItemJnl.Quantity = 0  THEN
          EXIT;

        IF trecSNDiff.FINDSET THEN
          REPEAT
            IF (trecSNDiff.Quantity<>0) THEN BEGIN
              lcuCreateResEntry.CreateReservEntryFor(
                DATABASE::"Item Journal Line",
                precCurItemJnl."Entry Type",
                precCurItemJnl."Journal Template Name", precCurItemJnl."Journal Batch Name",
                0, //prod order line
                precCurItemJnl."Line No.", //source ref no.
                1, //qty per UOM (count is always in base UOM)
                1, // quantity
                1, // QuantityBase (decimal) //
                trecSNDiff."Serial No.",
                trecSNDiff."Lot No." // lot no.
              );

              lcuCreateResEntry.CreateEntry(
                precCurItemJnl."Item No.", //ItemNo
                precCurItemJnl."Variant Code", //VariantCode
                precCurItemJnl."Location Code", //LocationCode
                '', //Description
                precCurItemJnl."Posting Date", //ExpectedReceiptDate
                0D, //ShipmentDate
                0, //TransferredFromEntryNo
                3 //Status (3==Prospect)
              );

              trecSNDiff.Quantity := 0;
              trecSNDiff.MODIFY;
              ldQty += 1;

            END;//if
          UNTIL (trecSNDiff.NEXT = 0) OR (ldQty = precCurItemJnl.Quantity);

          setPhysInvLotNos(precCurItemJnl);
      END;//if need item tracking
    END;

    LOCAL PROCEDURE setPhysInvLotNos@1000000015(VAR precCurItemJnl@1000000000 : Record 83);
    VAR
      ldQty@1000000001 : Decimal;
      lcuCreateResEntry@1000000002 : Codeunit 99000830;
      ltcBlankSN@1000000003 : TextConst 'ENC=(BLANK)';
      ldTotal@1000000004 : Decimal;
      ldRemainingQty@1000000005 : Decimal;
    BEGIN
      // Sets lot numbers for non-warehouse tracked lots

      IF recItem."No."<>precCurItemJnl."Item No." THEN
        getItem(precCurItemJnl."Item No.");

      IF recItem."Item Tracking Code"<>'' THEN BEGIN
        IF precCurItemJnl."Entry Type" = recItemJnl."Entry Type"::"Negative Adjmt." THEN
          trecLotDiff.SETFILTER(Quantity, '<0')
        ELSE
          trecLotDiff.SETFILTER(Quantity, '>0');

        ldRemainingQty := precCurItemJnl.Quantity;

        IF trecLotDiff.FINDSET THEN BEGIN
          REPEAT

            IF ABS(trecLotDiff.Quantity) <= ldRemainingQty THEN
              ldQty := ABS(trecLotDiff.Quantity)
            ELSE
              ldQty := ldRemainingQty;

            lcuCreateResEntry.CreateReservEntryFor(
              DATABASE::"Item Journal Line",
              precCurItemJnl."Entry Type",
              precCurItemJnl."Journal Template Name", precCurItemJnl."Journal Batch Name",
              0, //prod order line
              precCurItemJnl."Line No.", //source ref no.
              1, //qty per UOM (count is always in base UOM)
              ldQty, // lot no qty
              ldQty, // QuantityBase (decimal) //
              '',
              trecLotDiff."Lot No." // lot no.
            );

            IF precCurItemJnl."Entry Type" <> recItemJnl."Entry Type"::"Negative Adjmt." THEN
              lcuCreateResEntry.SetDates(0D, trecLotDiff."Expiration Date");

            lcuCreateResEntry.CreateEntry(
              precCurItemJnl."Item No.", //ItemNo
              precCurItemJnl."Variant Code", //VariantCode
              precCurItemJnl."Location Code", //LocationCode
              '', //Description
              precCurItemJnl."Posting Date", //ExpectedReceiptDate
              0D, //ShipmentDate
              0, //TransferredFromEntryNo
              3 //Status (3==Prospect)
            );

            IF precCurItemJnl."Entry Type" = recItemJnl."Entry Type"::"Negative Adjmt." THEN
              trecLotDiff.Quantity += ldQty
            ELSE
              trecLotDiff.Quantity -= ldQty;

            trecLotDiff.MODIFY;

            ldTotal += ldQty;
            ldRemainingQty -= ldQty;

          UNTIL (trecLotDiff.NEXT = 0) OR (ldRemainingQty = 0); //(ldTotal = precCurItemJnl.Quantity);
        END;//if

      END;//if need item tracking
    END;

    LOCAL PROCEDURE saveLotDifferences@1000000008();
    BEGIN
      // Gets lot differences and stores data for lot reclass

      IF NOT (cuCountMgmt.isLotWhseTracked(trecSummary."Item No.")
         AND recLocation."Bin Mandatory") //<IW author="MH" date="12/21/2015" issue="TFS2148" />
      THEN BEGIN

        // first store any left over lots for reclass
        trecLotDiff.RESET;
        trecLotDiff.SETFILTER(Quantity, '<>0');
        IF trecLotDiff.FINDSET THEN
          REPEAT
            trecLotReclassBuf := trecLotDiff;
            trecLotReclassBuf.INSERT;
          UNTIL trecLotDiff.NEXT = 0;

      END;

      // delete previous lot differences to make room for new ones
      trecLotDiff.RESET;
      trecLotDiff.DELETEALL;
    END;

    LOCAL PROCEDURE setItemBinLotNumbers@1000000005(precCurItemJnl@1000000001 : Record 83;ptrecCountSummary@1000000002 : TEMPORARY Record 23044301);
    VAR
      lcuCreateResEntry@1000000000 : Codeunit 99000830;
    BEGIN
      // Inserts lot numbers on supplied item journal line

      lcuCreateResEntry.CreateReservEntryFor(
        DATABASE::"Item Journal Line",
        precCurItemJnl."Entry Type",
        precCurItemJnl."Journal Template Name", precCurItemJnl."Journal Batch Name",
        0, //prod order line
        precCurItemJnl."Line No.", //source ref no.
        1, //qty per UOM (count is always in base UOM)
        precCurItemJnl.Quantity, // quantity
        precCurItemJnl."Quantity (Base)",
        ptrecCountSummary."Serial No.", //<IW author="MH" date="7/9/2014" issue="TFS1402" />
        ptrecCountSummary."Lot No." // lot no.
      );

      IF precCurItemJnl."Entry Type" <> recItemJnl."Entry Type"::"Negative Adjmt." THEN
        lcuCreateResEntry.SetDates(0D, ptrecCountSummary."Expiration Date");

      lcuCreateResEntry.CreateEntry(
        precCurItemJnl."Item No.", //ItemNo
        precCurItemJnl."Variant Code", //VariantCode
        precCurItemJnl."Location Code", //LocationCode
        '', //Description
        precCurItemJnl."Posting Date", //ExpectedReceiptDate
        0D, //ShipmentDate
        0, //TransferredFromEntryNo
        3 //Status (3==Prospect)
      );
    END;

    PROCEDURE prepareAutoTransfer@1000000002(pcodCountNo@1000000010 : Code[20];pcodSheetName@1000000009 : Code[20];pcodLocation@1000000000 : Code[20];pcodInvBatch@1000000001 : Code[20];pcodConsBatch@1000000002 : Code[20];pcodWhseBatch@1000000003 : Code[20];pbSetTracking@1000000007 : Boolean;pcodReclassBatch@1000000008 : Code[20];pbUseBatchDocNos@1000000004 : Boolean;pdtAsOfDate@1000000005 : Date;pdtPostingDate@1000000006 : Date);
    BEGIN
      // Prepares variables to do a UI-less transfer to journals

      codCurCountNo := pcodCountNo;
      codSheetNameFilter := pcodSheetName;
      codLocationFilter := pcodLocation;
      codItemJnlBatch := pcodInvBatch;
      codConsJnlBatch := pcodConsBatch;
      codWhseJnlBatch := pcodWhseBatch;
      bSetTracking := pbSetTracking;
      codReclassJnlBatch := pcodReclassBatch;
      bUseBatchDocNo := pbUseBatchDocNos;
      dtAsOfDate := pdtAsOfDate;
      dtPostDate := pdtPostingDate;

      bNoGUI := TRUE;
    END;

    LOCAL PROCEDURE canShowGUI@1000000017() : Boolean;
    BEGIN
      // Returns true if gui can be shown
      EXIT((NOT bNoGUI) AND GUIALLOWED);
    END;

    PROCEDURE setCurCountNo@1000000020(pcodCountNo@1000000000 : Code[20]);
    BEGIN
      // Sets the count number to use for this copy
      codCurCountNo := pcodCountNo;

      recCountHeader.GET(codCurCountNo);
      recCountHeader.TESTFIELD(Active);
      codLocationFilter := recCountHeader."Location Code";
      bPostZeroDiff := recCountHeader."Post Zero Differences";
      bUpdateCountPeriod := recCountHeader."Update Next Count Period";
      dtAsOfDate := recCountHeader."Inventory As of Date";
      dtPostDate := recCountHeader."Inventory As of Date";

      bSetTracking := recCountHeader."Set Item Tracking Lines";
      bUseBatchDocNo := recCountHeader."Use Batch Document Nos.";
      codConsJnlBatch := recCountHeader."Consumption Journal Batch";
      codItemJnlBatch := recCountHeader."Phys. Inv. Journal Batch";
      codReclassJnlBatch := recCountHeader."Reclass. Journal Batch";
      codWhseJnlBatch := recCountHeader."Whse. Phys. Inv. Jnl. Batch";
    END;

    PROCEDURE getCopyFinished@1000000022() : Boolean;
    BEGIN
      // Returns indicator of whether report ran to completion or not
      EXIT(bCopyComplete);
    END;

    PROCEDURE getDimList@1000000006() rtxtList : Text[200];
    VAR
      ltrecDimSet@1000000000 : TEMPORARY Record 480;
    BEGIN
      // Generates a list of dims for display

      cuDimMgmt.GetDimensionSet(ltrecDimSet, recCountHeader."Dimension Set ID");
      IF ltrecDimSet.FINDSET THEN
        REPEAT
          rtxtList += ltrecDimSet."Dimension Value Code" + ' ';
        UNTIL (ltrecDimSet.NEXT = 0) OR (STRLEN(rtxtList)>180);
    END;

    PROCEDURE setDimensions@1000000025(VAR precItemJnl@1000000000 : Record 83);
    VAR
      codDummyDimCode@1000000002 : Code[20];
      lanTableIDs@1000000004 : ARRAY [10] OF Integer;
      lacNos@1000000003 : ARRAY [10] OF Code[20];
      lacDimSets@1000000001 : ARRAY [10] OF Integer;
    BEGIN
      // Sets dims for item journal

      IF recCountHeader."Dimension Set ID" <> 0 THEN BEGIN

        IF (precItemJnl."Dimension Set ID" <> 0) AND recCountHeader."Use Default Dimensions" THEN BEGIN
          // merge dimensions if we are to use both default and manually specified dims
          lacDimSets[1] := precItemJnl."Dimension Set ID";
          lacDimSets[2] := recCountHeader."Dimension Set ID";
          precItemJnl."Dimension Set ID" := cuDimMgmt.GetCombinedDimensionSetID(lacDimSets, codDummyDimCode,codDummyDimCode);
        END ELSE BEGIN
          // assign count dimensions if no jnl dimensions exist or if we are to overwrite
          precItemJnl."Dimension Set ID" := recCountHeader."Dimension Set ID";
        END;//if use default dims

      END;//if header dim set

      cuDimMgmt.UpdateGlobalDimFromDimSetID(precItemJnl."Dimension Set ID",
        precItemJnl."Shortcut Dimension 1 Code", precItemJnl."Shortcut Dimension 2 Code");
    END;

    PROCEDURE getItem@1000000027(pcodItem@1000000000 : Text);
    BEGIN
      // Gets specified item
      IF pcodItem<>recItem."No." THEN
        recItem.GET(pcodItem);
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************

      <IW>
        <REVISION author="C.Avent" date="3/30/2017" version="DMS17.03" issue="3649">
          Added code to set the Posting Status field on Count Sheetlines that have been copied
          to the journals, to a Posting Status = Copied.
        </REVISION>
      </IW>
    }
    END.
  }
  RDLDATA
  {
  }
}

