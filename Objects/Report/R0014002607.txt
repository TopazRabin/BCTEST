OBJECT Report 14002607 Post Worksheet Tran.
{
  OBJECT-PROPERTIES
  {
    Date=03/27/19;
    Time=12:00:00 PM;
    Version List=UBP3.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Post Worksheet Tran.;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  ColForecastSetup.GET;
                END;

    OnPostReport=BEGIN
                   IF SkippedCust = 0 THEN
                     MESSAGE(Text000)
                   ELSE
                     MESSAGE(Text001,SkippedCust);
                   IF TotalSkippedItems <> 0 THEN
                     MESSAGE(STRSUBSTNO(Text002,TotalSkippedItems));
                 END;

  }
  DATASET
  {
    { 6836;    ;DataItem;                    ;
               DataItemTable=Table18;
               ReqFilterFields=No.,Salesperson Code }

    { 9233;1   ;DataItem;                    ;
               DataItemTable=Table14002601;
               DataItemTableView=SORTING(Customer No.)
                                 ORDER(Ascending)
                                 WHERE(Released=CONST(No));
               OnAfterGetRecord=BEGIN
                                  ColForecastLine2.RESET;
                                  ColForecastLine2.SETRANGE("Customer No.","Forecast Customer"."Customer No.");
                                  ColForecastLine2.SETRANGE(Type,ColForecastLine.Type::"New Forecast");
                                  IF NOT ColForecastLine2.FIND('-') THEN BEGIN
                                    SkippedCust := SkippedCust + 1;
                                    CurrReport.SKIP;
                                  END;
                                END;

               DataItemLink=Customer No.=FIELD(No.) }

    { 6190;2   ;DataItem;                    ;
               DataItemTable=Table14002605;
               DataItemTableView=SORTING(Customer No.,Location Code,Item No.,Variant,Type)
                                 ORDER(Ascending)
                                 WHERE(Type=CONST(New Forecast));
               OnPreDataItem=BEGIN
                               ForecastEntry.LOCKTABLE;
                               ForecastEntry.RESET;
                               IF ForecastEntry.FIND('+') THEN
                                 EntryNo := ForecastEntry."Entry No."
                               ELSE
                                 EntryNo := 0;
                               ForecastEntry.RESET;

                               ForecastEntry.SETCURRENTKEY(
                                 ForecastEntry."Customer No.",
                                 ForecastEntry."Location Code",
                                 ForecastEntry."Item No.",
                                 ForecastEntry."Variant Code",
                                 ForecastEntry."Starting Date");

                               TotalSkippedItems := TotalSkippedItems + SkippedItems;
                               SkippedItems := 0;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF NOT "Collaborative Forecast Line"."Review Forecast" THEN BEGIN
                                    ForecastEntry.SETRANGE("Customer No.","Collaborative Forecast Line"."Customer No.");
                                    ForecastEntry.SETRANGE("Location Code","Collaborative Forecast Line"."Location Code");
                                    ForecastEntry.SETRANGE("Item No.","Collaborative Forecast Line"."Item No.");
                                    ForecastEntry.SETRANGE("Variant Code","Collaborative Forecast Line".Variant);
                                    ForecastInventoryPeriod.RESET;
                                    ForecastInventoryPeriod.SETRANGE(Type,ForecastInventoryPeriod.Type::Calculate);
                                    ForecastInventoryPeriod.SETFILTER("Starting Date",'%1..',"Collaborative Forecast Line"."Starting Date");
                                  //  LocInvPeriod.SETFILTER("Starting Date",'%1..',"Collaborative Forecast Line"."Starting Date");
                                  //  LocInvPeriod.SETRANGE("Location Code","Collaborative Forecast Line"."Location Code");
                                    PeriodCount := 0;
                                    IF ForecastInventoryPeriod.FIND('-') THEN
                                      REPEAT
                                        NewForecastQty := 0;
                                        PeriodCount := PeriodCount + 1;
                                        ForecastEntry.SETRANGE("Starting Date",ForecastInventoryPeriod."Starting Date");
                                        ForecastEntry.CALCSUMS(Quantity);
                                        CurrForecastQty := ForecastEntry.Quantity;
                                        CASE PeriodCount OF
                                          1:  NewForecastQty := EvaluateForecastLine("Period 1");
                                          2:  NewForecastQty := EvaluateForecastLine("Period 2");
                                          3:  NewForecastQty := EvaluateForecastLine("Period 3");
                                          4:  NewForecastQty := EvaluateForecastLine("Period 4");
                                          5:  NewForecastQty := EvaluateForecastLine("Period 5");
                                          6:  NewForecastQty := EvaluateForecastLine("Period 6");
                                          7:  NewForecastQty := EvaluateForecastLine("Period 7");
                                          8:  NewForecastQty := EvaluateForecastLine("Period 8");
                                          9:  NewForecastQty := EvaluateForecastLine("Period 9");
                                          10: NewForecastQty := EvaluateForecastLine("Period 10");
                                          11: NewForecastQty := EvaluateForecastLine("Period 11");
                                          12: NewForecastQty := EvaluateForecastLine("Period 12");
                                          13: NewForecastQty := EvaluateForecastLine("Period 13");
                                          14: NewForecastQty := EvaluateForecastLine("Period 14");
                                          15: NewForecastQty := EvaluateForecastLine("Period 15");
                                          16: NewForecastQty := EvaluateForecastLine("Period 16");
                                          17: NewForecastQty := EvaluateForecastLine("Period 17");
                                          18: NewForecastQty := EvaluateForecastLine("Period 18");
                                          19: NewForecastQty := EvaluateForecastLine("Period 19");
                                          20: NewForecastQty := EvaluateForecastLine("Period 20");
                                          21: NewForecastQty := EvaluateForecastLine("Period 21");
                                          22: NewForecastQty := EvaluateForecastLine("Period 22");
                                          23: NewForecastQty := EvaluateForecastLine("Period 23");
                                          24: NewForecastQty := EvaluateForecastLine("Period 24");
                                          25: NewForecastQty := EvaluateForecastLine("Period 25");
                                          26: NewForecastQty := EvaluateForecastLine("Period 26");
                                          27: NewForecastQty := EvaluateForecastLine("Period 27");
                                          28: NewForecastQty := EvaluateForecastLine("Period 28");
                                          29: NewForecastQty := EvaluateForecastLine("Period 29");
                                          30: NewForecastQty := EvaluateForecastLine("Period 30");
                                          31: NewForecastQty := EvaluateForecastLine("Period 31");
                                          32: NewForecastQty := EvaluateForecastLine("Period 32");
                                          33: NewForecastQty := EvaluateForecastLine("Period 33");
                                          34: NewForecastQty := EvaluateForecastLine("Period 34");
                                          35: NewForecastQty := EvaluateForecastLine("Period 35");
                                          36: NewForecastQty := EvaluateForecastLine("Period 36");
                                          37: NewForecastQty := EvaluateForecastLine("Period 37");
                                          38: NewForecastQty := EvaluateForecastLine("Period 38");
                                          39: NewForecastQty := EvaluateForecastLine("Period 39");
                                          40: NewForecastQty := EvaluateForecastLine("Period 40");
                                          41: NewForecastQty := EvaluateForecastLine("Period 41");
                                          42: NewForecastQty := EvaluateForecastLine("Period 42");
                                          43: NewForecastQty := EvaluateForecastLine("Period 43");
                                          44: NewForecastQty := EvaluateForecastLine("Period 44");
                                          45: NewForecastQty := EvaluateForecastLine("Period 45");
                                          46: NewForecastQty := EvaluateForecastLine("Period 46");
                                          47: NewForecastQty := EvaluateForecastLine("Period 47");
                                          48: NewForecastQty := EvaluateForecastLine("Period 48");
                                          49: NewForecastQty := EvaluateForecastLine("Period 49");
                                          50: NewForecastQty := EvaluateForecastLine("Period 50");
                                          51: NewForecastQty := EvaluateForecastLine("Period 51");
                                          52: NewForecastQty := EvaluateForecastLine("Period 52");
                                        END;
                                        IF (NewForecastQty - CurrForecastQty) <> 0 THEN
                                          CreateForecastEntry;
                                      UNTIL (ForecastInventoryPeriod.NEXT = 0) OR
                                            (PeriodCount = ColForecastSetup."Forecast Periods");
                                    ColForecastLine.GET(
                                      "Collaborative Forecast Line"."Customer No.",
                                      "Collaborative Forecast Line"."Location Code",
                                      "Collaborative Forecast Line"."Item No.",
                                      "Collaborative Forecast Line".Variant,
                                      "Collaborative Forecast Line".Type::"New Forecast");
                                    ColForecastLine.DELETE;
                                  END ELSE
                                    SkippedItems := SkippedItems + 1;
                                END;

               DataItemLink=Customer No.=FIELD(Customer No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ColForecastLine@1240030000 : Record 14002605;
      ColForecastLine2@1240030009 : Record 14002605;
      ColForecastSetup@1240030008 : Record 14002607;
      ForecastEntry@1240030001 : Record 14002603;
      ForecastSummaryEntry@1240030015 : Record 14000587;
      ForecastInventoryPeriod@1240030016 : Record 14000552;
      EntryNo@1240030005 : Integer;
      CurrForecastQty@1240020001 : Decimal;
      NewForecastQty@1240020000 : Decimal;
      PeriodCount@1240030003 : Integer;
      Text000@1240030007 : TextConst 'ENU=Collaborative Forecast posted to Customer Forecast';
      SkippedCust@1240030010 : Integer;
      Text001@1240030011 : TextConst 'ENU=%1 Customer(s) skipped because no New Forecast lines exist.';
      SkippedItems@1240030012 : Integer;
      TotalSkippedItems@1240030013 : Integer;
      Text002@1240030014 : TextConst 'ENU=%1 Item(s) skipped because review flag is set.';

    PROCEDURE CreateForecastEntry@1240030000();
    BEGIN
      ForecastEntry.INIT;
      EntryNo := EntryNo + 1;
      ForecastEntry."Entry No." := EntryNo;
      ForecastEntry."Customer No." := "Collaborative Forecast Line"."Customer No.";
      ForecastEntry."Location Code" := "Collaborative Forecast Line"."Location Code";
      ForecastEntry."Item No." := "Collaborative Forecast Line"."Item No.";
      ForecastEntry."Variant Code" := "Collaborative Forecast Line".Variant;
      ForecastEntry."Starting Date" := ForecastInventoryPeriod."Starting Date";
      ForecastEntry.Quantity := NewForecastQty - CurrForecastQty;
      ForecastEntry.Released := "Forecast Customer".Released;
      ForecastEntry."User ID" := USERID;
      ForecastEntry."Date Created" := TODAY;
      ForecastEntry."Time Created" := TIME;
      ForecastEntry.INSERT;

      ForecastSummaryEntry.RESET;
      ForecastSummaryEntry.SETCURRENTKEY("Location Code","Item No.","Variant Code");
      ForecastSummaryEntry.SETRANGE("Location Code",ForecastEntry."Location Code");
      ForecastSummaryEntry.SETRANGE("Item No.",ForecastEntry."Item No.");
      ForecastSummaryEntry.SETRANGE("Variant Code",ForecastEntry."Variant Code");
      IF ForecastSummaryEntry.FIND('-') THEN
        REPEAT
          IF NOT ForecastSummaryEntry."Review Pending" THEN BEGIN
            ForecastSummaryEntry."Review Pending" := TRUE;
            ForecastSummaryEntry.MODIFY;
          END;
        UNTIL ForecastSummaryEntry.NEXT = 0;
    END;

    PROCEDURE EvaluateForecastLine@1240020000(CurrFCValue@1240020000 : Text) OutDecimal : Decimal;
    BEGIN
      IF NOT EVALUATE(OutDecimal,CurrFCValue) THEN
        OutDecimal := 0;
      EXIT(OutDecimal);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

