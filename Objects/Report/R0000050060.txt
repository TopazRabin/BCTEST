OBJECT Report 50060 Update Procurement Unit
{
  OBJECT-PROPERTIES
  {
    Date=07/01/20;
    Time=12:00:00 AM;
    Modified=Yes;
    Version List=TPZ000.00.00;
  }
  PROPERTIES
  {
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  ExcelBuf.DELETEALL;
                  ExcelBuf.OpenBook(ServerFileName,SheetName);
                  ExcelBuf.ReadSheet;
                  AnalyzeData;
                END;

    OnPostReport=BEGIN
                   MESSAGE('Procurement Unit Update Finished');
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1000000000;;Container;
                  Name=ContentArea;
                  ContainerType=ContentArea }

      { 1000000003;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESM=Opciones;
                             FRC=Options;
                             ENC=Options] }

      { 1000000004;2;Group  ;
                  CaptionML=[ENU=Import from;
                             ESM=Importar de;
                             FRC=Importer de;
                             ENC=Import from] }

      { 1000000001;3;Field  ;
                  CaptionML=[ENU=Workbook File Name;
                             ESM=Nombre fichero libro;
                             FRC=Nom du classeur;
                             ENC=Workbook File Name];
                  SourceExpr=FileName;
                  Editable=FALSE;
                  OnValidate=BEGIN
                               FileNameOnAfterValidate;
                             END;

                  OnAssistEdit=BEGIN
                                 RequestFile;
                                 SheetName := ExcelBuf.SelectSheetsName(ServerFileName);
                               END;
                                }

      { 1000000002;3;Field  ;
                  CaptionML=[ENU=Worksheet Name;
                             ESM=Nombre hoja;
                             FRC=Nom de la feuille de travail;
                             ENC=Worksheet Name];
                  SourceExpr=SheetName;
                  Editable=FALSE;
                  OnAssistEdit=BEGIN
                                 IF ServerFileName = '' THEN
                                   RequestFile;

                                 SheetName := ExcelBuf.SelectSheetsName(ServerFileName);
                               END;
                                }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ExcelBuf@1000000009 : TEMPORARY Record 370;
      cuFileMgt@1000000007 : Codeunit 419;
      FileName@1000000006 : Text[250];
      ServerFileName@1000000005 : Text[250];
      SheetName@1000000004 : Text[250];
      TotalRecNo@1000000003 : Integer;
      RecNo@1000000002 : Integer;
      EntryNo@1000000001 : Integer;
      Window@1000000000 : Dialog;
      Text006@1000000011 : TextConst 'ENU=Import Excel File;ESM=Importar fich. Excel;FRC=Importer fichier Excel;ENC=Import Excel File';
      Text007@1000000010 : TextConst 'ENU=Analyzing Data...\\;ESM=Analizar Datos...\\;FRC=Analyse des donn‚es...\\;ENC=Analysing Data...\\';
      Text029@1000000008 : TextConst 'ENU=You must enter a file name.;ESM=Debe introd. nombre fichero.;FRC=Vous devez entrer un nom de fichier.;ENC=You must enter a file name.';
      UpdateCount@1000000012 : Integer;

    PROCEDURE RequestFile@6();
    BEGIN
      IF FileName <> '' THEN
        ServerFileName := cuFileMgt.UploadFile(Text006,FileName)
      ELSE
        ServerFileName := cuFileMgt.UploadFile(Text006,'.xlsx');

      ValidateServerFileName;
      FileName := cuFileMgt.GetFileName(ServerFileName);
    END;

    LOCAL PROCEDURE FileNameOnAfterValidate@19040090();
    BEGIN
      RequestFile;
    END;

    LOCAL PROCEDURE ValidateServerFileName@9();
    BEGIN
      IF ServerFileName = '' THEN
      BEGIN
        FileName := '';
        SheetName := '';
        ERROR(Text029);
      END;
    END;

    PROCEDURE AnalyzeData@1000000000();
    VAR
      LocationCode@1000000000 : Code[10];
      ItemNo@1000000001 : Code[20];
      ProcUnit@1000000002 : Record 14000555;
      MinInvText@1000000003 : Text;
      MaxInvText@1000000004 : Text;
      MinDaysOfSupplyText@1000000006 : Text;
      MaxDaysOfSupplyText@1000000005 : Text;
      AdditionalStockQtyText@1000000007 : Text;
      AdditionalStockQtyExpDateText@1000000010 : Text;
      NonStockUnitText@1000000008 : Text;
      AdditionalStockQty@1000000009 : Record 14002702;
      MinSelfStockTxt@1000000012 : Text;
      SafetyStockDaysText@1000000011 : Text;
    BEGIN
      UpdateCount := 0;

      Window.OPEN(
        Text007 +
        '@1@@@@@@@@@@@@@@@@@@@@@@@@@\');
      Window.UPDATE(1,0);
      TotalRecNo := ExcelBuf.COUNT;
      RecNo := 0;

      ExcelBuf.SETFILTER(ExcelBuf."Row No.",'2..');
      IF ExcelBuf.FINDSET THEN
      BEGIN
        REPEAT
          RecNo := RecNo + 1;
          Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));

          CASE ExcelBuf.xlColID OF
            'A': LocationCode := ExcelBuf."Cell Value as Text";
            'B': ItemNo := ExcelBuf."Cell Value as Text";
            'C': MinInvText := ExcelBuf."Cell Value as Text";
            'D': MaxInvText := ExcelBuf."Cell Value as Text";
            'E': MinDaysOfSupplyText := ExcelBuf."Cell Value as Text";
            'F': MaxDaysOfSupplyText := ExcelBuf."Cell Value as Text";
            'G': AdditionalStockQtyText := ExcelBuf."Cell Value as Text";
            'H': AdditionalStockQtyExpDateText := ExcelBuf."Cell Value as Text";
            'I': NonStockUnitText := ExcelBuf."Cell Value as Text";
            //<TPZ2010>
            'J': MinSelfStockTxt :=  ExcelBuf."Cell Value as Text";
            //<TPZ2010>
            'K':
            BEGIN
              //<TPZ2204>//
              SafetyStockDaysText := ExcelBuf."Cell Value as Text";
              //<TPZ2204>//
              ProcUnit.GET(LocationCode, ItemNo, '');
              IF MinInvText <> '' THEN BEGIN
                EVALUATE(ProcUnit."Minimum Inventory", MinInvText);
                ProcUnit.VALIDATE("Minimum Inventory");
              END;

              IF MaxInvText <> '' THEN BEGIN
                EVALUATE(ProcUnit."Maximum Inventory", MaxInvText);
                ProcUnit.VALIDATE("Maximum Inventory");
              END;

              IF MinDaysOfSupplyText <> '' THEN BEGIN
                EVALUATE(ProcUnit."Minimum Days Supply", MinDaysOfSupplyText);
                ProcUnit.VALIDATE("Minimum Days Supply");
              END;

              IF MaxDaysOfSupplyText <> '' THEN BEGIN
                EVALUATE(ProcUnit."Maximum Days Supply", MaxDaysOfSupplyText);
                ProcUnit.VALIDATE("Maximum Days Supply");
              END;

              IF AdditionalStockQtyText <> '' THEN BEGIN
                IF AdditionalStockQty.GET(LocationCode, ItemNo, '', '') = FALSE THEN BEGIN
                  AdditionalStockQty.INIT;
                  AdditionalStockQty."Location Code" := LocationCode;
                  AdditionalStockQty."Item No." := ItemNo;
                  AdditionalStockQty.INSERT;
                END;

                EVALUATE(AdditionalStockQty.Quantity, AdditionalStockQtyText);
                AdditionalStockQty.VALIDATE(Quantity);

                IF AdditionalStockQtyExpDateText <> '' THEN
                  EVALUATE(AdditionalStockQty."Expire Date", AdditionalStockQtyExpDateText);

                AdditionalStockQty.MODIFY(TRUE);
              END;

              IF NonStockUnitText <> '' THEN BEGIN
                IF UPPERCASE(NonStockUnitText) = 'YES' THEN
                  ProcUnit.VALIDATE("Nonstock Unit", TRUE)
                ELSE IF UPPERCASE(NonStockUnitText) = 'NO' THEN
                 ProcUnit.VALIDATE("Nonstock Unit", FALSE)
                ELSE
                 ERROR('Procurement Unit %1 %2 update error: invalid value %3.', LocationCode, ItemNo, NonStockUnitText);
              END;

              //<TPZ2010>
              //MinSelfStockTxt := ExcelBuf."Cell Value as Text";
              IF MinSelfStockTxt <> '' THEN BEGIN
                EVALUATE(ProcUnit."Minimum Shelf Stock", MinSelfStockTxt);
                ProcUnit.VALIDATE("Minimum Shelf Stock");
              END;
              //</TPZ2010>

              //<TPZ2204>//
              IF SafetyStockDaysText <> '' THEN BEGIN
                EVALUATE(ProcUnit."Safety Stock Days", SafetyStockDaysText);
                ProcUnit.VALIDATE("Safety Stock Days");
              END;
              //<TPZ2204>//
              ProcUnit.MODIFY(TRUE);
              UpdateCount += 1;
            END;
          END;

        UNTIL ExcelBuf.NEXT = 0;
      END;
      Window.CLOSE;
    END;

    BEGIN
    {

      TPZ2010 TMEI 2017-09-14
        Add new column Minimum Shelf Stock to import
      2018-02-13 TPZ2204 UCHOUHAN
        Add new column Safety Stock Days
    }
    END.
  }
  RDLDATA
  {
  }
}

