OBJECT Page 23044301 IWX Count Sheet Lines
{
  OBJECT-PROPERTIES
  {
    Date=02/25/21;
    Time=[ 2:12:49 PM];
    Modified=Yes;
    Version List=IWX2.4.7684.0;
  }
  PROPERTIES
  {
    Permissions=TableData 23044300=r,
                TableData 23044301=rimd;
    CaptionML=[ENU=Count Sheet Lines;
               ESM=Hoja de conteo de l¡neas;
               FRC=Nombre de lignes de feuille;
               ENC=Count Sheet Lines];
    SaveValues=Yes;
    SourceTable=Table23044301;
    DataCaptionExpr="Count No."+' - '+"Sheet Name";
    SourceTableView=SORTING(Count No.,Tag No.);
    PageType=Worksheet;
    OnInit=BEGIN
             edtSheetNameEnable := TRUE;
           END;

    OnOpenPage=BEGIN
                 GetRecFilters;
                 SetRecFilters;
               END;

    OnAfterGetRecord=BEGIN
                       txtStyle := getStyle;
                     END;

    OnNewRecord=BEGIN
                  IF recCountCfg.GET(codCurCountNo, codCurSheet) THEN
                    IF (recCountCfg."Location Code"<>'') THEN
                      IF recLocation.GET(recCountCfg."Location Code") THEN
                        "Location Code" := recCountCfg."Location Code";

                  "Count No." := codCurCountNo;
                  "Sheet Name" := codCurSheet;
                END;

    OnInsertRecord=BEGIN
                     IF ("Item No."<>'') AND (("Sheet Name"='') OR ("Count No."='') OR ("Count No."<>codCurCountNo)) THEN
                       ERROR(tcErrNoInsert);
                     COMMIT;
                   END;

    OnModifyRecord=BEGIN
                     IF (xRec."Item No."<>'') AND (Rec."Item No."<>xRec."Item No.") THEN
                       EXIT(CONFIRM(tcConfirmRename, TRUE));

                     EXIT(TRUE);
                   END;

    OnDeleteRecord=BEGIN
                     testLPDelete;
                     EXIT(TRUE);
                   END;

    ActionList=ACTIONS
    {
      { 1900000003;  ;ActionContainer;
                      Name=<Action1900000003>;
                      ActionContainerType=ActionItems }
      { 1000000016;1 ;ActionGroup;
                      Name=<Action1000000016>;
                      CaptionML=[ENU=F&unctions;
                                 ESM=f&unciones;
                                 FRC=F&onctions;
                                 ENC=F&unctions] }
      { 1000000071;2 ;Action    ;
                      Name=acCopyRecount;
                      CaptionML=[ENU=Copy Selected to &Recount Sheet;
                                 ESM=Copia seleccionados para contar Hoja;
                                 FRC=Copier la S‚lection vers &Recompte Feuille;
                                 ENC=Copy Selected to &Recount Sheet];
                      Promoted=Yes;
                      Image=Copy;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 lrecCountSheet@1000000000 : Record 23044301;
                               BEGIN
                                 lrecCountSheet.COPYFILTERS(Rec);
                                 CurrPage.SETSELECTIONFILTER(lrecCountSheet);
                                 cuInvMgmt.addRecountLines(lrecCountSheet, "Count No.",'');
                               END;
                                }
      { 1000000080;2 ;Action    ;
                      Name=acGenerateRecount;
                      CaptionML=[ENU=&Generate Recount Sheets;
                                 ESM=&Generar hojas de recuento;
                                 ENC=&Generate Recount Sheets];
                      Image=CopyToTask;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 REPORT.RUNMODAL(REPORT::"IWX Generate Recount Sheets", TRUE, TRUE, Rec);  //<IW author="MH" date="6/25/2010" issue="201" />
                               END;
                                }
      { 1000000032;2 ;Action    ;
                      Name=acResetLine;
                      CaptionML=[ENU=Reset &Line;
                                 ESM=Restablecer &L¡nea;
                                 FRC=R‚initialiser &ligne;
                                 ENC=&Reset Line];
                      Promoted=Yes;
                      Image=Refresh;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 resetLine;
                                 MODIFY;
                               END;
                                }
      { 1000000053;2 ;Action    ;
                      Name=mnuCalcDiff;
                      CaptionML=[ENU=Recalc&ulate All Differences;
                                 ESM=Volver a calc&ular todas las diferencias;
                                 FRC=Recalc&uler Toutes les diff‚rences;
                                 ENC=Recalc&ulate All Differences];
                      Image=Calculate;
                      OnAction=VAR
                                 ltcDone@1000000001 : TextConst 'ENC=Recalculation Done';
                               BEGIN
                                 Rec.recalcAllDifferences;
                                 MESSAGE(ltcDone);
                               END;
                                }
      { 1000000006;0 ;ActionContainer;
                      CaptionML=[ENU=Related Information;
                                 ESM=Informaci¢n relacionada;
                                 FRC=Informations connexes;
                                 ENC=Related Information];
                      ActionContainerType=RelatedInformation }
      { 1000000011;1 ;ActionGroup;
                      CaptionML=[ENU=Item;
                                 ESM=¡tem;
                                 FRC=Article;
                                 ENC=Item];
                      ActionContainerType=NewDocumentItems }
      { 1000000008;2 ;Action    ;
                      ShortCutKey=Shift+Ctrl+E;
                      CaptionML=[ENU=Item Card;
                                 ESM=ficha de producto;
                                 FRC=Fiche de l'Article;
                                 ENC=Item Card];
                      RunObject=Page 30;
                      RunPageLink=No.=FIELD(Item No.);
                      Promoted=Yes;
                      Image=Edit;
                      PromotedCategory=Process }
      { 1000000010;2 ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=Item Ledger Entries;
                                 ESM=entradas elemento del libro mayor;
                                 FRC=Entr‚es d'Article du registre des comptes;
                                 ENC=Item Ledger Entries];
                      RunObject=Page 38;
                      RunPageLink=Item No.=FIELD(Item No.),
                                  Location Code=FIELD(Location Code);
                      Promoted=Yes;
                      Image=ItemLedger;
                      PromotedCategory=Process }
    }
  }
  CONTROLS
  {
    { 1900000001;;Container;
                ContainerType=ContentArea }

    { 1000000015;1;Group  ;
                CaptionML=[ENU=Count Sheet;
                           ESM=Recuento de hojas;
                           FRC=Feuille de Comptage;
                           ENC=Count Sheet];
                GroupType=Group }

    { 1000000004;2;Field  ;
                Name=edtCountNo;
                CaptionML=[ENU=Count No.;
                           ESM=Contando No.;
                           FRC=Comptage No.;
                           ENC=Count No.];
                ToolTipML=ENU=Specifies the Count No. to filter on;
                SourceExpr=codCurCountNo;
                TableRelation="IWX Inventory Count Header";
                OnValidate=BEGIN
                             IF codCurCountNo='' THEN
                               ERROR(tcErrNoCount);

                             codCurCountNoOnAfterValidate;
                           END;
                            }

    { 1000000009;2;Field  ;
                Name=edtSheetName;
                Lookup=Yes;
                CaptionML=[ENU=Sheet Name;
                           ESM=Nombre de la Hoja;
                           FRC=Nom de la feuille;
                           ENC=Sheet Name];
                ToolTipML=ENU=Specifies the Sheet Name to filter on;
                SourceExpr=codCurSheet;
                Enabled=edtSheetNameEnable;
                OnValidate=BEGIN
                             codCurSheetOnAfterValidate;
                           END;

                OnLookup=VAR
                           lpgCountConfig@1000000002 : Page 23044300;
                           lrecCountConfig@1000000003 : Record 23044300;
                         BEGIN
                           lpgCountConfig.LOOKUPMODE(TRUE);
                           IF( codCurCountNo = '' ) THEN
                             ERROR(tcErrNoCount);

                           lrecCountConfig.SETRANGE("Count No.",codCurCountNo);

                           lpgCountConfig.SETTABLEVIEW(lrecCountConfig);
                           IF( lpgCountConfig.RUNMODAL <> ACTION::LookupOK ) THEN
                             EXIT(FALSE);

                           CurrPage.SAVERECORD;

                           lpgCountConfig.GETRECORD(lrecCountConfig);
                           Text := lrecCountConfig."Sheet Name";
                           codCurSheet := Text;

                           SetRecFilters;


                           EXIT(TRUE);
                         END;
                          }

    { 1000000000;1;Group  ;
                CaptionML=[ENU=Count Sheet Lines;
                           ESM=L¡neas de hoja de conteo;
                           FRC=Lignes de Feuilles de Comptage;
                           ENC=Count Sheet Lines];
                GroupType=Repeater;
                FreezeColumnID=Item No. }

    { 1000000050;2;Field  ;
                ToolTipML=ENU=Name of the count sheet.  This is used to organize items into groups and appears on the printed reports.;
                SourceExpr="Sheet Name";
                Editable=FALSE }

    { 1000000026;2;Field  ;
                ToolTipML=ENU=Tag No is a unique identifier for the count used to identify a specific counted item.  The physical items can be tagged with this number to ensure that they have been counted.;
                SourceExpr="Tag No." }

    { 1000000076;2;Field  ;
                Lookup=No;
                DrillDown=No;
                AssistEdit=No;
                ToolTipML=ENU=The recount tag number indicates that an item is flagged for recount.;
                SourceExpr="Recount Tag No." }

    { 1000000078;2;Field  ;
                DrillDown=No;
                AssistEdit=No;
                ToolTipML=ENU=The Recount Source Tag No identifies the original line being recounted.;
                SourceExpr="Recount Source Tag No.";
                Visible=FALSE }

    { 1000000003;2;Field  ;
                ToolTipML=ENU=The item being counted.  Extra items can be manually entered into the sheet, but most items are added through the Generate Count Sheets function.;
                SourceExpr="Item No.";
                OnValidate=BEGIN
                             CALCFIELDS(Description, "Description 2");
                           END;
                            }

    { 1000000028;2;Field  ;
                ToolTipML=ENU=Holds the Variant Code for the current item.;
                SourceExpr="Variant Code" }

    { 1000000055;2;Field  ;
                ToolTipML=ENU=Can be used to record the serial number of the item being counted.;
                SourceExpr="Serial No." }

    { 1000000067;2;Field  ;
                ToolTipML=ENU=Can be used to record the lot number of the item being counted.;
                SourceExpr="Lot No.";
                Visible=FALSE }

    { 1000000002;2;Field  ;
                ToolTipML=ENU=You can enter the expiration date for the Lot No. here.;
                SourceExpr="Expiration Date";
                Visible=FALSE }

    { 1000000001;2;Field  ;
                ToolTipML=ENU=Holds the Location Code for the current Count Sheet Line.;
                SourceExpr="Location Code" }

    { 1000000039;2;Field  ;
                ToolTipML=ENU=The bin code with which the item is associated.  Can be ignored where bins are not used.;
                SourceExpr="Bin Code" }

    { 1000000024;2;Field  ;
                ToolTipML=ENU=The actual count of the physical inventory in the unit of measure specified on the line.;
                SourceExpr=Quantity }

    { 1000000025;2;Field  ;
                ToolTipML=ENU=The unit of measure for the Quantity field. This can be changed based on the units the items were counted in.;
                SourceExpr="Unit of Measure Code" }

    { 1000000027;2;Field  ;
                ToolTipML=ENU=The conversion factor between the item base unit of measure and the counted unit of measure.;
                SourceExpr="Qty. per Unit of Measure";
                Visible=FALSE }

    { 1000000005;2;Field  ;
                AssistEdit=No;
                ToolTipML=ENU=The actual count of the physical inventory in the item base unit of measure.  This value is calculated based on the Quantity and Unit of Measure fields.;
                SourceExpr="Quantity (Base)";
                Editable=FALSE;
                OnAssistEdit=BEGIN
                               getPlateWeight
                             END;
                              }

    { 1000000063;2;Field  ;
                ToolTipML=ENU=The bin content quantity for the current item/variant/bin combination.;
                SourceExpr="Bin Quantity (Base)";
                Visible=FALSE }

    { 1000000007;2;Field  ;
                ToolTipML=ENU=The shelf number of the item.  This field can be edited to reflect where the item was actually counted.;
                SourceExpr="Shelf No.";
                Editable=TRUE }

    { 1000000035;2;Field  ;
                ToolTipML=ENU=Shows the quantity of the item based on variant and location that has been consumed on the production order defined in the Prod Order No field.;
                SourceExpr="WIP Qty. (Base)";
                Visible=FALSE;
                Editable=FALSE }

    { 1000000014;2;Field  ;
                ToolTipML=ENU=The current inventory level for the item, variant, and location combination on that line.;
                SourceExpr="On Hand Quantity (Base)";
                Visible=FALSE;
                Editable=FALSE }

    { 1000000040;2;Field  ;
                ToolTipML=ENU=The tracked on hand quantity;
                SourceExpr="Tracked On Hand Qty. (Base)";
                Visible=FALSE }

    { 1000000061;2;Field  ;
                ToolTipML=ENU=The total count quantity across all count sheets for the current item.;
                SourceExpr="Total Count Quantity (Base)";
                Visible=FALSE }

    { 1000000029;2;Field  ;
                ToolTipML=ENU=The expected quantity for this count line.  The way the expected quantity is calculated depends on the item and location configuration.;
                SourceExpr="Expected Quantity" }

    { 1000000030;2;Field  ;
                ToolTipML=ENU=Shows the difference between expected quantity and counted quantity for this specific line.;
                SourceExpr="Difference Qty." }

    { 1000000065;2;Field  ;
                ToolTipML=ENU=The expected quantity for this count line.  The way the expected quantity is calculated depends on the item and location configuration.;
                SourceExpr="Expected Quantity (Base)";
                Visible=FALSE }

    { 1000000022;2;Field  ;
                ToolTipML=ENU=Shows the difference between expected quantity and counted quantity.;
                SourceExpr="Difference Qty. (Base)";
                Visible=FALSE;
                Editable=FALSE }

    { 1000000023;2;Field  ;
                ToolTipML=ENU=Shows the percentage difference between the counted quantity and the expected quantity.;
                SourceExpr="Difference Qty. Pct. (ABS)";
                Visible=FALSE;
                Editable=FALSE }

    { 100000031;2;Field   ;
                ToolTipML=ENU=Warehouse Quantity to Take;
                SourceExpr="Whse. Qty. to Take";
                Visible=FALSE }

    { 100000034;2;Field   ;
                ToolTipML=ENU=Warehouse Quantity to Place;
                SourceExpr="Whse. Qty. to Place";
                Visible=FALSE }

    { 1000000036;2;Field  ;
                ToolTipML=ENU=Warehouse Quantity on Journal Lines;
                SourceExpr="Whse. Qty. on Journal";
                Visible=FALSE }

    { 1000000057;2;Field  ;
                ToolTipML=ENU=Current unit cost of the item from the item card.  Note: cost always comes from the item, even when Stockkeeping Units are being used.;
                SourceExpr="Unit Cost";
                Visible=FALSE }

    { 1000000059;2;Field  ;
                ToolTipML=ENU=The difference quantity times the unit cost.;
                SourceExpr="Difference Amount";
                Visible=FALSE }

    { 1000000033;2;Field  ;
                ToolTipML=ENU=The production order number upon which this item appears or has been consumed.;
                SourceExpr="Prod. Order No.";
                Editable=TRUE }

    { 1000000037;2;Field  ;
                ToolTipML=ENU=This field is true (checkmark) if the item has been consumed on the production order specified for the line.;
                SourceExpr="Is WIP";
                Visible=FALSE;
                Enabled=TRUE;
                Editable=FALSE }

    { 1000000012;2;Field  ;
                ToolTipML=ENU=The item description field.;
                SourceExpr=Description;
                Editable=FALSE }

    { 1000000021;2;Field  ;
                ToolTipML=ENU=The item Description 2 field.;
                SourceExpr="Description 2";
                Visible=false }

    { 1000000069;2;Field  ;
                ToolTipML=ENU=A brief comment to record information may be entered here.;
                SourceExpr=Comment;
                Visible=FALSE }

    { 1000000074;2;Field  ;
                ToolTipML=ENU=If the item is a WHI Kit Assembly, a checkmark appears here.;
                SourceExpr="WHI Kit Assembly";
                Visible=FALSE }

    { 1000000072;2;Field  ;
                ToolTipML=ENU=If the item is part of a WHI Kit Item, a checkmark appears here.;
                SourceExpr="WHI Kit Item";
                Visible=FALSE }

    { 1000000018;2;Field  ;
                ToolTipML=ENU=This field is set when the quantity is manually changed, or when a barcode is scanned using WHI.;
                SourceExpr="User ID";
                Visible=FALSE }

    { 1000000020;2;Field  ;
                ToolTipML=ENU=This field is set when the quantity is manually changed, or when a barcode is scanned using WHI.;
                SourceExpr="Date Entered";
                Visible=FALSE }

    { 1000000013;2;Field  ;
                Name=Phys Invt Counting Period Code;
                CaptionML=[ENU=Phys Invt Counting Period Code;
                           ESM=Phys Invt Contando C¢digo de per¡odo;
                           FRC=Code de P‚riode de comptage d'Inventaire Physique;
                           ENC=Phys Invt Counting Period Code];
                ToolTipML=ENU=The physical inventory counting period for the line;
                SourceExpr=getCountCode }

    { 1000000017;2;Field  ;
                ToolTipML=ENU=The ID of the handheld that scanned this entry onto the count lines.;
                SourceExpr="Scanned by Device";
                Visible=false;
                Editable=false }

    { 1000000019;2;Field  ;
                ToolTipML=ENU=The date and time the entry was scanned onto the count lines.;
                SourceExpr="Scanned DateTime";
                Visible=false;
                Editable=false }

    { 1000000031;2;Field  ;
                SourceExpr="Vendor Item No." }

    { 1000000034;2;Field  ;
                SourceExpr="Shortcut Dimension 5 Code" }

  }
  CODE
  {
    VAR
      codCurSheet@1000000000 : Code[20];
      recItem@1000000002 : Record 27;
      recCountCfg@1000000001 : Record 23044300;
      codLastFilter@1000000003 : Code[20];
      codWorkCenter@1000000004 : Code[20];
      bIsWIPSheet@1000000005 : Boolean;
      trecActiveRtngLine@1000000006 : TEMPORARY Record 5409;
      tcErrNoWIP@1000000007 : TextConst 'ENC=There is no WIP at work center %1';
      tcConfirmRename@1000000008 : TextConst 'ENC=Are you sure you want to change the item number?';
      tcErrNoInsert@1000000010 : TextConst 'ENC=You cannot insert a new record unless you turn on "View by sheet"';
      recLocation@1000000012 : Record 14;
      cuInvMgmt@1000000013 : Codeunit 23044300;
      edtSheetNameEnable@19042138 : Boolean INDATASET;
      codCurCountNo@1000000014 : Code[20];
      recCountHeader@1000000009 : Record 23044304;
      tcErrNoCount@1000000015 : TextConst 'ENU=You must specify an Inventory Count No.;ENC=You must specify an Inventory Count No.';
      txtStyle@1000000011 : Text;
      recSKU@1000000016 : Record 5700;

    LOCAL PROCEDURE setSheetName@1000000019(Text@1000000000 : Code[20]);
    VAR
      cuInvMgmt@1000000001 : Codeunit 23044300;
    BEGIN
      // Updates form with new sheet name filter
      IF codLastFilter = Text THEN
        EXIT;

      Rec.FILTERGROUP(2);
      Rec.SETRANGE("Sheet Name", Text);
      Rec.FILTERGROUP(0);

      codLastFilter := Text;
    END;

    LOCAL PROCEDURE getPlateWeight@1000000002();
    VAR
      lpgCalcWeight@1000000000 : Page 23044302;
    BEGIN
      CLEAR(lpgCalcWeight);
      lpgCalcWeight.setCountLine(Rec);
      IF lpgCalcWeight.RUNMODAL = ACTION::OK THEN
        "Quantity (Base)" := lpgCalcWeight.getQuantity;
    END;

    PROCEDURE filterByWorkCenter@1000000008();
    BEGIN
      clearEmptyLines;

      Rec.MARKEDONLY(FALSE);
      Rec.CLEARMARKS;

      IF codWorkCenter='' THEN
        EXIT;

      trecActiveRtngLine.SETFILTER("Work Center No.", '=%1', codWorkCenter);

      IF Rec.FIND('-') THEN BEGIN
        REPEAT
          trecActiveRtngLine.SETFILTER("Prod. Order No.", '=%1', "Prod. Order No.");
          IF trecActiveRtngLine.FIND('-') THEN
            Rec.MARK := TRUE;
        UNTIL Rec.NEXT = 0;
      END;//if

      Rec.MARKEDONLY(TRUE);
      IF Rec.FIND('-') THEN ;
      Rec := xRec;

      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE clearEmptyLines@1000000051();
    VAR
      lrecCountLine@1000000000 : Record 23044301;
    BEGIN
      lrecCountLine.SETFILTER("Item No.", '=%1', '');
      lrecCountLine.SETRANGE("Auto Generated", FALSE);
      lrecCountLine.DELETEALL;
    END;

    LOCAL PROCEDURE getFormCaption@1000000006() : Text[30];
    BEGIN
      EXIT(codCurSheet);
    END;

    PROCEDURE codCurCountNoOnAfterValidate@1000000010();
    BEGIN
      CurrPage.SAVERECORD;
      codCurSheet := '';
      SetRecFilters;
    END;

    LOCAL PROCEDURE codCurSheetOnAfterValidate@19051040();
    BEGIN
      CurrPage.SAVERECORD;
      SetRecFilters;
    END;

    LOCAL PROCEDURE codWorkCenterOnAfterValidate@19034041();
    BEGIN
      filterByWorkCenter;
    END;

    LOCAL PROCEDURE OnActivateForm@19002417();
    BEGIN
    END;

    LOCAL PROCEDURE QuantityOnAfterInput@19007827(VAR Text@19007828 : Text[1024]);
    BEGIN
      Text := Text + '*1';
    END;

    PROCEDURE SetRecFilters@1000000011();
    BEGIN
      SETRANGE("Count No.");
      SETRANGE("Sheet Name");

      FILTERGROUP(2);
      IF codCurCountNo <> '' THEN
        SETRANGE("Count No.",codCurCountNo)
      ELSE
        SETRANGE("Count No.");

      IF codCurSheet <> ''  THEN
        SETRANGE("Sheet Name",codCurSheet)
      ELSE
        SETRANGE("Sheet Name");

      FILTERGROUP(0);

      SETRANGE("Date Filter");
      IF recCountHeader.GET(codCurCountNo) THEN
        IF recCountHeader."Inventory As of Date"<>0D THEN
          SETRANGE("Date Filter", 0D, recCountHeader."Inventory As of Date");

      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE GetRecFilters@1000000023();
    BEGIN
      codCurCountNo := GETFILTER("Count No.");
      codCurSheet := GETFILTER("Sheet Name");
    END;

    PROCEDURE testLPDelete@1000000003();
    VAR
      lrecCountSheetLine@1000000000 : Record 23044301;
      ltcRemoveLP@1000000001 : TextConst 'ENU=The line was added as part of License Plate No.: %1.\The entire License Plate must be removed.\Do you want to proceed?';
    BEGIN
      // Checks to see if this is a license plate entry and either errors or deletes other LP entries if it is
      IF( ("License Plate No." <> '') AND (NOT "WHI Kit Item") ) THEN BEGIN
        IF( CONFIRM(STRSUBSTNO(ltcRemoveLP,"License Plate No.")) ) THEN BEGIN
          lrecCountSheetLine.SETRANGE("Count No.", "Count No.");
          lrecCountSheetLine.SETRANGE("Sheet Name","Sheet Name");
          lrecCountSheetLine.SETRANGE("License Plate No.","License Plate No.");
          lrecCountSheetLine.DELETEALL(TRUE);
        END ELSE
          ERROR('');
      END;//if
    END;

    PROCEDURE getStyle@1000000018() : Text;
    BEGIN
      IF NOT Counted THEN
        EXIT('Subordinate');

      IF "Difference Qty. (Base)"<>0 THEN
        EXIT('Ambiguous');

      EXIT('Favorable');
    END;

    PROCEDURE getCountCode@1000000004() : Code[10];
    BEGIN
      // Returns count period code
      IF getFormItem("Item No.") THEN BEGIN
        IF (recItem."Phys Invt Counting Period Code" <>'') THEN BEGIN
          EXIT(recItem."Phys Invt Counting Period Code");
        END ELSE BEGIN
          IF (recSKU.GET("Location Code", "Item No.", "Variant Code")) THEN BEGIN
            EXIT(recSKU."Phys Invt Counting Period Code");
          END;
        END;
      END;
    END;

    PROCEDURE getFormItem@1000000005(pcodItemNo@1000000000 : Text) : Boolean;
    BEGIN
      IF recItem."No." = pcodItemNo THEN
        EXIT(TRUE);

      EXIT(recItem.GET(pcodItemNo));
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
      2019-04-09 DC1.00 - TPZ2560 - Added new field Divison
    }
    END.
  }
}

