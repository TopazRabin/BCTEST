OBJECT Page 51052 Order Signature
{
  OBJECT-PROPERTIES
  {
    Date=10/30/20;
    Time=[ 4:25:47 AM];
    Modified=Yes;
    Version List=TPZ000.00.00;
  }
  PROPERTIES
  {
    MultipleNewLines=Yes;
    SourceTable=Table50054;
    DelayedInsert=Yes;
    SourceTableTemporary=Yes;
    RefreshOnActivate=Yes;
    OnOpenPage=BEGIN
                 SignatureDate := TODAY;
                 //SignatureVisible := TRUE;
                 IF OrderSigEntryNo.FINDLAST THEN
                   EntryNo := OrderSigEntryNo."Entry No.";
               END;

    OnAfterGetRecord=BEGIN

                       IF AddInReady THEN BEGIN
                         UpdateSignature;
                         UpdateSignature;
                       END;
                         IF SalesHeader.GET(SalesHeader."Document Type"::Order,"Order No.") THEN BEGIN
                           CustomerName := SalesHeader."Sell-to Customer Name";
                           PONo := SalesHeader."External Document No.";
                         END;
                     END;

    OnNewRecord=BEGIN
                  CustomerName := '';
                  PONo := '';
                END;

  }
  CONTROLS
  {
    { 1000000000;;Container;
                Name=ContentArea;
                ContainerType=ContentArea }

    { 1000000002;1;Group  ;
                Name=Parameters;
                GroupType=Group }

    { 1000000004;2;Field  ;
                Name=No. Of Carton;
                CaptionML=ENU=No. Of Carton;
                SourceExpr=NoOfCarton;
                Visible=False }

    { 1000000001;2;Field  ;
                Name=Check No.1;
                SourceExpr=ChequeNo;
                Visible=False }

    { 1000000013;2;Field  ;
                Name=Check Amount1;
                CaptionML=ENU=Check Amount;
                SourceExpr=CheckAmount;
                Visible=False }

    { 1000000014;2;Field  ;
                Name=Signature Date;
                CaptionML=ENU=Signature Date;
                SourceExpr=SignatureDate }

    { 1000000003;1;Group  ;
                Name=Sales Order;
                GroupType=Group }

    { 1000000005;2;Group  ;
                GroupType=Repeater }

    { 1000000009;3;Field  ;
                SourceExpr="Entry No.";
                Visible=False }

    { 1000000006;3;Field  ;
                SourceExpr="Order No.";
                OnValidate=BEGIN
                             SignatureVisible := FALSE;
                             CurrPage.UPDATE(FALSE);
                           END;

                OnLookup=VAR
                           AllowedLocationFilter@1170000000 : Text;
                           WMSMgt@1170000001 : Codeunit 7302;
                           SalesList@1170000002 : Page 45;
                         BEGIN

                           AllowedLocationFilter := WMSMgt.GetAllowedLocationFilter(USERID);

                           SalesHeader.RESET;
                           SalesHeader.FILTERGROUP(2);
                           SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
                           SalesHeader.SETFILTER("Location Code",AllowedLocationFilter);
                           SalesHeader.SETFILTER("Shipping Agent Code",'PICKUP|MESS|PICKUP/3RD|PICKUP/MES');
                           SalesHeader.SETRANGE(Status,SalesHeader.Status::Released);
                           SalesHeader.FILTERGROUP(0);
                           SalesList.SETTABLEVIEW(SalesHeader);
                           SalesList.SETRECORD(SalesHeader);
                           SalesList.LOOKUPMODE := TRUE;
                           IF SalesList.RUNMODAL=ACTION::LookupOK THEN BEGIN
                             INIT;
                             SalesList.GETRECORD(SalesHeader);
                             EntryNo += 1;
                             "Entry No." := EntryNo;
                             VALIDATE("Order No." , SalesHeader."No.");
                             "Full Name" := FullName;
                             "Signature Date"  := SignatureDate;
                             CustomerName := '';
                             PONo := '';
                             IF SalesHeader.GET(SalesHeader."Document Type"::Order,"Order No.") THEN BEGIN
                               CustomerName := SalesHeader."Sell-to Customer Name";
                               PONo := SalesHeader."External Document No.";
                             END;
                             //INSERT(TRUE);
                             CurrPage.SAVERECORD
                           END;
                           SignatureVisible := FALSE;
                           FullName := '';
                           CurrPage.UPDATE(FALSE);
                         END;
                          }

    { 1000000007;3;Field  ;
                Name=Customer Name;
                SourceExpr=CustomerName }

    { 1000000008;3;Field  ;
                Name=Customer PO No.;
                SourceExpr=PONo }

    { 1170000000;3;Field  ;
                SourceExpr="No. Of Cartons";
                OnValidate=BEGIN
                             CurrPage.SAVERECORD;
                             SignatureVisible := FALSE;
                             FullName := '';
                             CurrPage.UPDATE(FALSE);
                           END;
                            }

    { 1170000001;3;Field  ;
                SourceExpr="Check No.";
                OnValidate=BEGIN
                             CurrPage.SAVERECORD;
                             FullName := '';
                             SignatureVisible := FALSE;
                             CurrPage.UPDATE(FALSE);
                           END;
                            }

    { 1170000002;3;Field  ;
                SourceExpr="Check Amount";
                OnValidate=BEGIN
                             CurrPage.SAVERECORD;
                             FullName := '';
                             SignatureVisible := FALSE;
                             CurrPage.UPDATE(FALSE);
                           END;
                            }

    { 1000000011;1;Group  ;
                Name=Name;
                GroupType=Group }

    { 1170000003;2;Field  ;
                Name=Full Name;
                CaptionML=ENU=Full Name;
                SourceExpr=FullName;
                OnValidate=BEGIN
                             // IF FINDSET THEN
                             //  REPEAT
                             //    "Full Name" := FullName;
                             //    MODIFY;
                             //  UNTIL NEXT=0;
                             SignatureVisible := TRUE;
                             CurrPage.UPDATE(FALSE);
                           END;
                            }

    { 1000000015;1;Group  ;
                Name=SignatureControlAddin;
                CaptionML=ENU=Signature;
                Visible=SignatureVisible;
                GroupType=Group }

    { 1000000016;2;Field  ;
                Name=SignatureControl;
                SourceExpr=SignatureImage;
                Editable=False;
                ControlAddIn=[SignatureControl;PublicKeyToken=9550105cd5215230];
                OnValidate=BEGIN
                             CurrPage.SAVERECORD;
                           END;
                            }

  }
  CODE
  {
    VAR
      AddInReady@1000000000 : Boolean;
      OrderNo@1000000001 : Code[20];
      OrderSignature@1000000002 : Record 50054;
      MemStream@1000000007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      RegEx@1000000006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      Match@1000000005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Match";
      Convert@1000000004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      OutputStream@1000000003 : OutStream;
      NoOfCarton@1000000008 : Integer;
      FullName@1000000009 : Text;
      CheckAmount@1000000010 : Decimal;
      SignatureDate@1000000011 : Date;
      ChequeNo@1000000012 : Integer;
      CustomerName@1000000013 : Text;
      PONo@1000000014 : Text;
      Customer@1000000015 : Record 18;
      SalesHeader@1000000016 : Record 36;
      SignatureVisible@1000000017 : Boolean INDATASET;
      OrderSignature1@1000000018 : Record 50054;
      EntryNo@1000000019 : Integer;
      OrderSigEntryNo@1000000020 : Record 50054;

    PROCEDURE UpdateSignature@1000000003();
    BEGIN

      //<TPZ2506>
      //IF OrderSignature.GET(OrderNo) THEN BEGIN
        OrderSignature.CALCFIELDS(SignatureImage);
        IF OrderSignature.SignatureImage.HASVALUE THEN
          CurrPage.SignatureControl.PutSignature(GetDataUriFromImage)
        ELSE CurrPage.SignatureControl.ClearSignature;

        CurrPage.UPDATE(FALSE);
      //END;
      //</TPZ2506>
    END;

    PROCEDURE SaveSignature@1000000000(DataUrl@1000000000 : Text);
    BEGIN
      //CurrPage.UPDATE(FALSE);
      //<TPZ2506>
      IF FullName = '' THEN
        ERROR('Please Enter Full Name');

      IF FINDSET THEN
        REPEAT
          //IF NOT OrderSignature1.GET("Order No.") THEN BEGIN
            OrderSignature.INIT;
            OrderSignature.TRANSFERFIELDS(Rec);
            OrderSignature."Full Name" := FullName;
            OrderSignature.TESTFIELD("Full Name");
             RegEx := RegEx.Regex('data\:image/png;base64,(.*)');
             Match := RegEx.Match(DataUrl);
             IF Match.Success THEN BEGIN
               MemStream := MemStream.MemoryStream(Convert.FromBase64String(Match.Groups.Item(1).Value));
               OrderSignature.SignatureImage.CREATEOUTSTREAM(OutputStream);
               COPYSTREAM(OutputStream,MemStream);
               OrderSignature.INSERT;
               DELETE;
               //CurrPage.UPDATE(FALSE);
             END ELSE
               ERROR('Invalid image format.');
          //END ELSE DELETE;
        UNTIL NEXT=0;

      {
      RegEx := RegEx.Regex('data\:image/png;base64,(.*)');
      Match := RegEx.Match(DataUrl);
      IF Match.Success THEN BEGIN
        MemStream := MemStream.MemoryStream(Convert.FromBase64String(Match.Groups.Item(1).Value));
        OrderSignature.SignatureImage.CREATEOUTSTREAM(OutputStream);
        COPYSTREAM(OutputStream,MemStream);
        OrderSignature.MODIFY;
        CurrPage.UPDATE(FALSE);
      END ELSE
        ERROR('Invalid image format.');}
      //</TPZ2506>

      {
      IF FINDSET THEN
        REPEAT
      //    OrderSignature.INIT;
      //    OrderSignature.TRANSFERFIELDS(Rec);
      //    OrderSignature."Full Name" := FullName;
      //    OrderSignature.TESTFIELD("Full Name");
           RegEx := RegEx.Regex('data\:image/png;base64,(.*)');
           Match := RegEx.Match(DataUrl);
           IF Match.Success THEN BEGIN
             MemStream := MemStream.MemoryStream(Convert.FromBase64String(Match.Groups.Item(1).Value));
             SignatureImage.CREATEOUTSTREAM(OutputStream);
             COPYSTREAM(OutputStream,MemStream);
             "Full Name" := FullName;
             MODIFY;
             //OrderSignature.INSERT;
             //DELETE;
             //CurrPage.UPDATE(FALSE);
           END ELSE
             ERROR('Invalid image format.');
        UNTIL NEXT=0;
      }
      //CLEAR(NoOfCarton);
      CLEAR(FullName);
      //CLEAR(CheckAmount);
      //CLEAR(SignatureDate);
      //CLEAR(ChequeNo);

      //  RESET;
      //  IF FINDSET THEN
      //  DELETEALL;
        CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE GetDataUriFromImage@1000000005() DataUri : Text;
    VAR
      InStr@1000000000 : InStream;
    BEGIN
      //<TPZ2506>
      DataUri := 'data:image/';
      SignatureImage.CREATEINSTREAM(InStr);
      MemStream := MemStream.MemoryStream;
      COPYSTREAM(MemStream,InStr);
      DataUri += 'png';
      DataUri += ';base64,'+Convert.ToBase64String(MemStream.ToArray);
      //</TPZ2506>
    END;

    EVENT SignatureControl@-1000000016::AddInReady@3();
    BEGIN
      AddInReady := TRUE;
      UpdateSignature;
    END;

    EVENT SignatureControl@-1000000016::UpdateSignature@4();
    BEGIN
      UpdateSignature;
    END;

    EVENT SignatureControl@-1000000016::SaveSignature@5(signatureData@1000000000 : Text);
    BEGIN
      //CurrPage.UPDATE(TRUE);
      SaveSignature(signatureData);
    END;

    EVENT SignatureControl@-1000000016::SaveFullName@6(Fname@1000000000 : Text);
    BEGIN
    END;

    BEGIN
    END.
  }
}

