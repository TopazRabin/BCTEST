OBJECT Page 14000530 Loc. Inv. Roll UP Transfer FB
{
  OBJECT-PROPERTIES
  {
    Date=03/27/19;
    Time=12:00:00 PM;
    Version List=UBP3.00;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=ENU=Hub/Spoke Transfers;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table14000583;
    SourceTableView=SORTING(Rec. No.);
    PageType=ListPart;
    SourceTableTemporary=Yes;
    ShowFilter=No;
    OnOpenPage=VAR
                 ItemVariant@1240020000 : Record 5401;
               BEGIN
                 InvMgmtSetup.GET;
                 IF NOT ItemVariant.ISEMPTY THEN
                   VariantsEnabled := TRUE;
               END;

    OnFindRecord=VAR
                   ItemVariant@1240020008 : Record 5401;
                   ItemNo@1240020001 : Code[50];
                   LocCode@1240020002 : Code[10];
                   VariantCode@1240020003 : Code[10];
                   VariantFilter@1240020007 : Text;
                   DateRecord@1240020004 : Record 2000000007;
                   InHorizonDateFilter@1240020005 : Text;
                   DateSwitchVisible@1240020006 : Boolean;
                   InitHorizonDate@1240020009 : Date;
                 BEGIN
                   FILTERGROUP(4);
                   ItemNo := COPYSTR(GETFILTER("Item No."), 1, 50);
                   LocCode := COPYSTR(GETFILTER("Location Code"), 1, 10);

                   VariantCode := '';
                   IF VariantsEnabled THEN BEGIN
                     VariantFilter := COPYSTR(GETFILTER("Variant Code"), 1, 10);
                     ItemVariant.SETRANGE("Item No.", ItemNo);
                     ItemVariant.SETRANGE(Code, VariantFilter);
                     IF ItemVariant.FINDFIRST THEN
                       VariantCode := ItemVariant.Code;
                   END;

                   IF ProcUnit.GET(LocCode, ItemNo, VariantCode) THEN BEGIN
                     SETRANGE("Location Code");
                     SETRANGE("Item No.");
                     SETRANGE("Variant Code");

                     // Date will be passed from the parent form if Suggested Transfer Order
                     HorizonDateParameter := 0D;
                     InHorizonDateFilter := GETFILTER("Horizon Date");
                     IF (InHorizonDateFilter <> '') THEN BEGIN
                       DateRecord.SETRANGE("Period Type", DateRecord."Period Type"::Date);
                       DateRecord.SETFILTER("Period Start", InHorizonDateFilter);
                       IF DateRecord.FINDFIRST THEN BEGIN
                         HorizonDateParameter := DateRecord."Period Start";
                         IF HorizonDateParameter <> 0D THEN BEGIN
                           InitHorizonDate := HorizonDateParameter;
                         END;
                       END;
                     END;
                     SETRANGE("Horizon Date");

                     // Date will be passed from the parent form if Suggested Transfer Order
                     AltHorizonDateParameter := 0D;
                     InHorizonDateFilter := GETFILTER("Alt. Horizon Date");
                     IF (InHorizonDateFilter <> '') THEN BEGIN
                       DateRecord.SETRANGE("Period Type", DateRecord."Period Type"::Date);
                       DateRecord.SETFILTER("Period Start", InHorizonDateFilter);
                       IF DateRecord.FINDFIRST THEN BEGIN
                         AltHorizonDateParameter := DateRecord."Period Start";
                       END;
                     END;
                     SETRANGE("Alt. Horizon Date");

                     IF UseAllocationDate THEN
                       LoadRollUPLines(ProcUnit, AltHorizonDateParameter)
                     ELSE
                       LoadRollUPLines(ProcUnit,InitHorizonDate);
                   END;
                   FILTERGROUP(0);

                   // prevents problem with refresh
                   SETCURRENTKEY("Rec. No.");

                   EXIT(FIND(Which));
                 END;

    ActionList=ACTIONS
    {
      { 1240020004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1240020001;1 ;ActionGroup;
                      CaptionML=ENU=&Action }
      { 1240020005;2 ;Action    ;
                      CaptionML=ENU=Location Inventory Roll Up;
                      Image=BOMVersions;
                      OnAction=VAR
                                 LocInvRollUpRTC@1240020000 : Page 14097475;
                               BEGIN
                                 IF HorizonDate = 0D THEN
                                   HorizonDate := UBP.GetLeadTimeHorizHub(ProcUnit);
                                 LocInvRollUpRTC.LoadRollUPLines(ProcUnit,HorizonDate);
                                 LocInvRollUpRTC.RUN;
                               END;
                                }
      { 1240020003;2 ;Action    ;
                      CaptionML=ENU=&Forecast View;
                      Image=CalculateRegenerativePlan;
                      OnAction=BEGIN
                                 IF HorizonDate = 0D THEN
                                   HorizonDate := UBP.GetLeadTimeHorizHub(ProcUnit);
                                 ViewForecast(HorizonDate);
                               END;
                                }
      { 1240020006;2 ;Action    ;
                      CaptionML=ENU=&Procurement Unit;
                      Image=BankAccountRec;
                      OnAction=BEGIN
                                 ViewProcUnit;
                               END;
                                }
      { 1240020000;2 ;Action    ;
                      CaptionML=ENU=Item &Usage;
                      Image=ItemTrackingLedger;
                      OnAction=BEGIN
                                 ViewItemUsage;
                               END;
                                }
      { 1240020009;2 ;Action    ;
                      CaptionML=ENU=Set Date Horizon;
                      Visible=DateSwitchVisible;
                      Image=CalculatePlanChange;
                      OnAction=BEGIN
                                 UseAllocationDate := FALSE;
                                 HorizonDate := HorizonDateParameter;
                                 LoadRollUPLines(ProcUnit, HorizonDate);
                               END;
                                }
      { 1240020010;2 ;Action    ;
                      CaptionML=ENU=Set Date Allocated;
                      Visible=DateSwitchVisible;
                      Image=CalculatePlanChange;
                      OnAction=BEGIN
                                 UseAllocationDate := TRUE;
                                 HorizonDate := AltHorizonDateParameter;
                                 LoadRollUPLines(ProcUnit, HorizonDate);
                               END;
                                }
      { 1240020012;2 ;Action    ;
                      CaptionML=ENU=&Previous Increment;
                      Visible=DateSwitchVisible;
                      Image=PreviousSet;
                      OnAction=BEGIN
                                 CalculateIncrementStep('-');
                               END;
                                }
      { 1240020011;2 ;Action    ;
                      ShortCutKey=Ctrl+N;
                      CaptionML=ENU=&Next Increment;
                      Visible=DateSwitchVisible;
                      Image=NextSet;
                      OnAction=BEGIN
                                 CalculateIncrementStep('+');
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1240020008;1;Group  ;
                GroupType=Group;
                Layout=Rows }

    { 1240020013;2;Field  ;
                SourceExpr=HorizonDateText;
                ShowCaption=No }

    { 1240030000;1;Group  ;
                Editable=FALSE;
                GroupType=Repeater }

    { 1240030001;2;Field  ;
                CaptionML=ENU=Location;
                SourceExpr="Individual Location" }

    { 1240020002;2;Field  ;
                CaptionML=ENU=To Send;
                ToolTipML=ENU=The portion of the hub's inventory that is available to send for it's spoke location's need.;
                DecimalPlaces=0:1;
                SourceExpr="Avail. to Send" }

    { 1240030039;2;Field  ;
                CaptionML=ENU=Requested;
                ToolTipML=ENU=The anticipated transfer need quantitiy calculated from the spoke location's replenishment settings.;
                SourceExpr="Transfer In Qty." }

    { 1240030041;2;Field  ;
                CaptionML=ENU=Avail Surplus;
                ToolTipML=ENU=Represents the Qty. needed by this location and it's spokes.  When positive it represents a surplus inventory position for that date.;
                SourceExpr=Surplus;
                Visible=FALSE }

  }
  CODE
  {
    VAR
      ProcUnit@1240020000 : Record 14000555;
      CreateLocInvRollUp@1240020001 : Codeunit 14000574;
      UBP@1240020007 : Codeunit 14000564;
      InvMgmtSetup@1240020008 : Record 14000551;
      Text001@1240030010 : TextConst 'ENU=This is not a production item.';
      HorizonDate@1240020004 : Date;
      HorizonDateParameter@1240020002 : Date;
      AltHorizonDateParameter@1240020005 : Date;
      DateSwitchVisible@1240020003 : Boolean;
      VariantsEnabled@1240020006 : Boolean;
      UseAllocationDate@1240020009 : Boolean;
      HorizonDateText@1240020010 : Text;
      AllocationDateTextConstant@1240020011 : TextConst 'ENU=Allocation Date';
      HorizonDateTextConstant@1240020012 : TextConst 'ENU=Horizon Date';

    PROCEDURE LoadRollUPLines@1240030002(CurrProcUnit@1240030000 : Record 14000555;CurrHorizonDate@1240030001 : Date);
    VAR
      CreateLocInvRollUp@1240020000 : Codeunit 14000574;
      Complete@1240020005 : Boolean;
      First@1240020004 : Boolean;
    BEGIN
      IF CurrHorizonDate = 0D THEN
        CurrHorizonDate := UBP.GetLeadTimeHorizHub(ProcUnit);

      IF UseAllocationDate THEN
       HorizonDateText :=  AllocationDateTextConstant + ' ' + FORMAT(CurrHorizonDate)
      ELSE
       HorizonDateText := HorizonDateTextConstant + ' ' + FORMAT(CurrHorizonDate);
      HorizonDate := CurrHorizonDate;
      CLEAR(CreateLocInvRollUp);
      CreateLocInvRollUp.CalcRollUp(CurrProcUnit,FALSE,0,CurrHorizonDate);

      Rec.RESET;
      Rec.DELETEALL(TRUE);

      Complete := FALSE;
      First := TRUE;
      REPEAT
        IF CreateLocInvRollUp.GetNextRollUpLine(Rec,First) THEN BEGIN
          IF Rec.Level > 1 THEN
            Rec.Surplus := CalcSurplusAvailable(Rec)
          ELSE
            Rec.Surplus := 0;
          Rec.INSERT;
          First := FALSE;
        END ELSE
          Complete := TRUE;
      UNTIL Complete;
    END;

    PROCEDURE ViewForecast@1240030006(CurrHorizonDate@1240020000 : Date);
    VAR
      CurrProcUnit@1240020001 : Record 14000555;
      ForecastView@1240020002 : Page 14002661;
    BEGIN
      CLEAR(ForecastView);
      CurrProcUnit.GET(
        "Individual Location Code","Item No.","Variant Code");
      ForecastView.SetLTHDate(CurrHorizonDate);
      ForecastView.SetProcUnitandSourceNo(ProcUnit,'');
      ForecastView.RUN;
    END;

    PROCEDURE ViewProcUnit@1240030001();
    VAR
      CurrProcUnit@1240020000 : Record 14000555;
    BEGIN
      CurrProcUnit.SETRANGE("Item No.","Item No.");
      CurrProcUnit.SETRANGE("Variant Code","Variant Code");
      CurrProcUnit.GET("Individual Location Code","Item No.","Variant Code");
      PAGE.RUN(PAGE::"Procurement Unit Card",CurrProcUnit);
    END;

    PROCEDURE ViewItem@1240030004();
    VAR
      Item@1240020011 : Record 27;
    BEGIN
      Item.GET("Item No.");
      PAGE.RUN(PAGE::"Item Card",Item);
    END;

    PROCEDURE ViewItemUsage@1240030005();
    VAR
      ItemUsage@1240020010 : Record 14000557;
    BEGIN
      ItemUsage.RESET;
      ItemUsage.SETCURRENTKEY("Location Code","Item No.","Variant Code");
      ItemUsage.SETRANGE("Location Code","Individual Location Code");
      ItemUsage.SETRANGE("Item No.","Item No.");
      ItemUsage.SETRANGE("Variant Code","Variant Code");
      PAGE.RUN(PAGE::"Item Usage List",ItemUsage);
    END;

    PROCEDURE CalcSurplusAvailable@1240020000(VAR CurrLocInvRollup@1240020000 : Record 14000583) AvailSurplusQty : Decimal;
    VAR
      SurplusInvValue@1240020001 : Record 14000584;
    BEGIN
      AvailSurplusQty := 0;
      IF SurplusInvValue.GET(CurrLocInvRollup."Item No.", CurrLocInvRollup."Individual Location Code", CurrLocInvRollup."Variant Code") THEN BEGIN
        SurplusInvValue.CALCFIELDS("Outstanding Surplus Qty (Base)");
        AvailSurplusQty := SurplusInvValue."Outstanding Surplus Qty (Base)";
      END;
      EXIT(AvailSurplusQty);
    END;

    PROCEDURE CalledFromSugTransferOrder@1240020001();
    BEGIN
      DateSwitchVisible := TRUE;
    END;

    PROCEDURE CalculateIncrementStep@1240020002(StepType@1240020000 : Text);
    VAR
      AdvForcSetup@1240020001 : Record 14002651;
      AFPProdTemplate@1240020002 : Record 14002677;
      ReviewCycleDays@1240020003 : Integer;
    BEGIN
      CASE StepType OF
        '-','+':
        BEGIN
        END;
        ELSE
          ERROR('');
      END;
      IF (HorizonDate <= 0D) THEN
        EXIT;
      InvMgmtSetup.TESTFIELD("Roll Up Increment Days");
      HorizonDate := CALCDATE(STRSUBSTNO('<' + StepType + '%1D>', InvMgmtSetup."Roll Up Increment Days"),HorizonDate);
      LoadRollUPLines(ProcUnit,HorizonDate);
    END;

    BEGIN
    END.
  }
}

