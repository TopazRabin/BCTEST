OBJECT Page 14097480 Proc. Unit Safety Stock Review
{
  OBJECT-PROPERTIES
  {
    Date=09/24/20;
    Time=[ 9:15:33 AM];
    Modified=Yes;
    Version List=UBP3.02;
  }
  PROPERTIES
  {
    CaptionML=ENU=Safety Stock Review;
    InsertAllowed=No;
    LinksAllowed=No;
    SourceTable=Table14097480;
    SourceTableView=SORTING(Item No.,Variant Code,Location Code);
    PageType=List;
    OnOpenPage=BEGIN
                 VendorReplLayout := TRUE;
                 LocationReplLayout := TRUE;
                 IsEditable := TRUE;
                 MaxSafetyStockDays := 180;
                 IF AdvForSetup.GET THEN;
                 ResidualInvNoOfPeriods := AdvForSetup."For. Deviation Calc. Periods";
               END;

    ActionList=ACTIONS
    {
      { 1240020015;  ;ActionContainer;
                      Name=Actions;
                      ActionContainerType=ActionItems }
      { 1240020033;1 ;ActionGroup;
                      Name=Calculation }
      { 1240020053;2 ;Action    ;
                      Name=Calculate Review;
                      CaptionML=ENU=Calculate Review (Select Units);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=DocumentsMaturity;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 LocProcUnit@1240020000 : Record 14000555;
                               BEGIN
                                 GetProcurementUnitFilters(LocProcUnit);
                                 IF (LocProcUnit.GETFILTERS <> '') THEN
                                   CalcForecastDeviationSafetyStock(LocProcUnit);
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 1240020054;2 ;Action    ;
                      Name=Calculate All;
                      CaptionML=ENU=Calculate Review (All);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=DocumentsMaturity;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 LocProcUnit@1240020000 : Record 14000555;
                               BEGIN
                                 CalcForecastDeviationSafetyStock(LocProcUnit);
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 1240020034;1 ;ActionGroup;
                      Name=Update Data }
      { 1240020016;2 ;Action    ;
                      Name=Set New Safety Stock;
                      CaptionML=ENU=Set New Safety Stock Days;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=SelectLineToApply;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 MakeNewSafetyStockAdjustment;
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 1240020017;2 ;Action    ;
                      Name=Revert to Previous Safety Stock;
                      CaptionML=ENU=Revert to Previous Safety Stock Days;
                      Image=UnApply;
                      OnAction=BEGIN
                                 MakePrevSafetyStockAdjustment;
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 1240020035;1 ;ActionGroup;
                      Name=Review }
      { 1240020032;2 ;Action    ;
                      Name=Show Only Changes;
                      CaptionML=ENU=Show Only Differences;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ShowSelected;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShowSafetyStockChanges;
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 1240020030;1 ;ActionGroup;
                      CaptionML=ENU=&Proc. Unit }
      { 1240020029;2 ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=ENU=Procurement Unit;
                      ToolTipML=ENU=Procurement unit card;
                      Promoted=Yes;
                      Image=BOMVersions;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 LocProcUnit@1240020000 : Record 14000555;
                               BEGIN
                                 LocProcUnit.GET("Location Code", "Item No.", "Variant Code");
                                 PAGE.RUN(PAGE::"Procurement Unit Card", LocProcUnit);
                               END;
                                }
      { 1240020028;2 ;Action    ;
                      CaptionML=ENU=Item &Usage;
                      ToolTipML=ENU=Summarized item usage and related data by period;
                      Promoted=Yes;
                      Image=ItemTrackingLedger;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ItemUsage@1240020000 : Record 14000557;
                               BEGIN
                                 ItemUsage.RESET;
                                 ItemUsage.SETCURRENTKEY(
                                   "Location Code","Item No.","Variant Code","Starting Date","Ending Date");
                                 ItemUsage.SETRANGE("Location Code","Location Code");
                                 ItemUsage.SETRANGE("Item No.","Item No.");
                                 ItemUsage.SETRANGE("Variant Code","Variant Code");
                                 ItemUsage.SETRANGE("Location Filter","Location Code");
                                 PAGE.RUNMODAL(PAGE::"Item Usage List",ItemUsage);
                               END;
                                }
      { 1240020022;2 ;Action    ;
                      CaptionML=ENU=Location Inventory Roll Up;
                      ToolTipML=ENU=Roll up of forecasts,target stock, surplus and transfers;
                      Promoted=Yes;
                      Image=CreateInteraction;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 LocProcUnit@1240020000 : Record 14000555;
                                 UBP@1240020001 : Codeunit 14000564;
                               BEGIN
                                 LocProcUnit.GET("Location Code", "Item No.", "Variant Code");
                                 UBP.DisplayLocInvRollup(LocProcUnit);
                               END;
                                }
      { 1240020010;2 ;Action    ;
                      ShortCutKey=Shift+F11;
                      CaptionML=ENU=View &Forecast;
                      ToolTipML=ENU=Demand and supply plan;
                      Promoted=Yes;
                      Image=CalculateRegenerativePlan;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ForecastView@1240020000 : Page 14002661;
                                 ProcUnit@1240020001 : Record 14000555;
                               BEGIN
                                 CLEAR(ForecastView);
                                 ProcUnit.GET("Location Code", "Item No.", "Variant Code");
                                 ForecastView.SetProcUnitandSourceNo(ProcUnit,'');
                                 ForecastView.RUN;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1240020000;0;Container;
                ContainerType=ContentArea }

    { 1240020051;1;Group  ;
                Name=Options;
                CaptionML=ENU=Options;
                GroupType=Group }

    { 1240020050;2;Field  ;
                Name=MaxSafetyDays;
                CaptionML=ENU=Max Safety Stock Days;
                SourceExpr=MaxSafetyStockDays }

    { 1240020027;2;Field  ;
                Name=ResidualInvMaxNoOfPeriods;
                CaptionML=ENU=Residual Inventory Calculation Periods;
                SourceExpr=ResidualInvNoOfPeriods;
                Visible=FALSE;
                OnValidate=BEGIN
                             IF ResidualInvNoOfPeriods > AdvForSetup."For. Deviation Calc. Periods" THEN BEGIN
                               MESSAGE(Text006, ResidualInvNoOfPeriods, AdvForSetup."For. Deviation Calc. Periods");
                               ResidualInvNoOfPeriods := AdvForSetup."For. Deviation Calc. Periods";
                             END;
                           END;
                            }

    { 1240020001;1;Group  ;
                Name=Group;
                CaptionML=ENU=Group;
                GroupType=Repeater }

    { 1240020006;2;Field  ;
                SourceExpr="Last Modified";
                Visible=FALSE }

    { 1240020002;2;Field  ;
                SourceExpr="Location Code";
                Editable=FALSE }

    { 1240020003;2;Field  ;
                SourceExpr="Item No.";
                Editable=FALSE }

    { 1240020004;2;Field  ;
                SourceExpr="Variant Code";
                Visible=FALSE;
                Editable=FALSE }

    { 1240020058;2;Field  ;
                SourceExpr="Curr Safety Stock Calc. Method";
                Editable=FALSE }

    { 1240020005;2;Field  ;
                SourceExpr="Current Safety Stock Qty";
                Visible=FALSE;
                Editable=FALSE }

    { 1240020031;2;Field  ;
                SourceExpr="Current Replenishment Type" }

    { 1240020008;2;Field  ;
                SourceExpr="Active Safety Stock Days";
                Editable=FALSE }

    { 1240020012;2;Field  ;
                SourceExpr="Current Safety Stock Days" }

    { 1240020040;2;Field  ;
                SourceExpr="Usage Formula Status";
                Visible=FALSE }

    { 1240020007;2;Field  ;
                SourceExpr=Critical;
                Visible=FALSE;
                Editable=FALSE }

    { 1240020041;2;Field  ;
                ToolTipML=ENU=Item class based on COGS or percentage of items;
                SourceExpr="Item Class Description";
                Visible=FALSE }

    { 1240020042;2;Field  ;
                ToolTipML=ENU=Ranking code based on sales order 'hits';
                SourceExpr="Ranking Code";
                Visible=FALSE }

    { 1240020045;2;Field  ;
                SourceExpr="Seasonal Formula";
                Visible=FALSE }

    { 1240020013;2;Field  ;
                SourceExpr="Replenishment Hierarchy";
                Visible=FALSE;
                Editable=FALSE }

    { 1240020009;2;Field  ;
                SourceExpr="Current Replenishment Model";
                Visible=FALSE }

    { 1240020024;2;Field  ;
                SourceExpr="Current Min Days";
                Visible=LocationReplLayout }

    { 1240020025;2;Field  ;
                SourceExpr="Current Max Days";
                Visible=LocationReplLayout;
                Editable=FALSE }

    { 1240020056;2;Field  ;
                SourceExpr="Calc. Safety Allowance Qty.";
                Editable=FALSE }

    { 1240020057;2;Field  ;
                SourceExpr="Calc. Mean Deviation Units";
                Visible=FALSE;
                Editable=FALSE }

    { 1240020014;2;Field  ;
                SourceExpr="Calculated Safety Stock Days";
                Editable=IsEditable }

    { 1240020049;2;Field  ;
                SourceExpr=Update }

    { 1240020039;2;Field  ;
                SourceExpr="Active Lead Time (Days)" }

    { 1240020052;2;Field  ;
                SourceExpr="Safety Stock Pct. of Lead Time";
                Editable=FALsE }

    { 1240020018;2;Field  ;
                SourceExpr="Calculated Min Days Supply";
                Visible=LocationReplLayout;
                Editable=IsEditable }

    { 1240020020;2;Field  ;
                SourceExpr="Calculated Max Days Supply";
                Visible=LocationReplLayout;
                Editable=IsEditable }

    { 1240020026;2;Field  ;
                SourceExpr="To Review" }

    { 1240020044;2;Field  ;
                SourceExpr="Review Message";
                Editable=FALSE }

    { 1240020043;2;Field  ;
                SourceExpr="Qty. Expected";
                Visible=FALSE }

    { 1240020037;2;Field  ;
                SourceExpr="Residual Inv. Days Supply";
                Visible=FALSE }

    { 1240020036;2;Field  ;
                SourceExpr="Residual Inventory Qty";
                Visible=FALSE }

    { 1240020048;2;Field  ;
                SourceExpr="Residual Inventory Amt";
                Visible=FALSE }

    { 1240020038;2;Field  ;
                CaptionML=ENU=Annual Avg. Order Qty;
                SourceExpr="Average Order Qty.";
                Visible=FALSE }

    { 1240020011;2;Field  ;
                SourceExpr="Previous Safety Stock Days";
                Visible=FALSE;
                Editable=FALSE }

    { 1240020021;2;Field  ;
                SourceExpr="Previous Min Days Supply";
                Visible=LocationReplLayout;
                Editable=FALSE }

    { 1240020023;2;Field  ;
                SourceExpr="Previous Max Days Supply";
                Visible=LocationReplLayout;
                Editable=FALSE }

    { 1240020046;0;Container;
                ContainerType=FactBoxArea }

    { 1240020047;1;Part   ;
                SubPageLink=Location Code=FIELD(Location Code),
                            Item No.=FIELD(Item No.),
                            Variant Code=FIELD(Variant Code);
                PagePartID=Page14097481;
                PartType=Page }

    { 1240020055;1;Part   ;
                SubPageLink=Location Code=FIELD(Location Code),
                            Item No.=FIELD(Item No.),
                            Variant Code=FIELD(Variant Code);
                PagePartID=Page14097479;
                PartType=Page }

    { 1240020019;1;Part   ;
                CaptionML=ENU=Item Usage;
                SubPageLink=Location Code=FIELD(Location Code),
                            Item No.=FIELD(Item No.),
                            Variant Code=FIELD(Variant Code);
                PagePartID=Page14097457;
                PartType=Page;
                ShowFilter=No }

  }
  CODE
  {
    VAR
      IsEditable@1240020000 : Boolean;
      ProgWindow@1240020001 : Dialog;
      PeriodsToCheck@1240020002 : Integer;
      AdvForSetup@1240020003 : Record 14002651;
      LastClosedPeriodDate@1240020004 : Date;
      Text001@1240020005 : TextConst 'ENU=%1 Procurement Units.\The calculation is different than the current setting.';
      Text002@1240020006 : TextConst 'ENU=Changed Procurement Units %1 from %2 Review Records.';
      VendorReplLayout@1240020007 : Boolean;
      LocationReplLayout@1240020008 : Boolean;
      Text003@1240020009 : TextConst 'ENU=Spoke %1 LTH %2 > Hub %3 %4';
      Text004@1240020010 : TextConst 'ENU=Deviation Days %1 <> Current Days %2';
      Text005@1240020011 : TextConst 'ENU=Avg. Order Qty %1 > Sporadic Qty %2';
      DialogOpen@1240020012 : Boolean;
      MaxSafetyStockDays@1240020013 : Integer;
      ResidualInvNoOfPeriods@1240020014 : Integer;
      Text006@1240020015 : TextConst 'ENU=Residual Inventory Periods of %1 cannot exceed the Forecast Deviation Periods of %2.  Check Advanced Forecasting Setup.';

    LOCAL PROCEDURE GetProcurementUnitFilters@1240020012(VAR ProcUnit@1240020002 : Record 14000555);
    VAR
      SelectProcUnitReport@1240020000 : Report 14000563;
      LocProcUnit@1240020001 : Record 14000555;
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT;

      CLEAR(SelectProcUnitReport);
      SelectProcUnitReport.USEREQUESTPAGE(TRUE);
      SelectProcUnitReport.RUNMODAL();
      SelectProcUnitReport.GetFilters(ProcUnit);
    END;

    LOCAL PROCEDURE MakePrevSafetyStockAdjustment@1240020002();
    VAR
      LocProcUnit@1240020002 : Record 14000555;
      LocProcUnitSafetyStockRevLine@1240020001 : Record 14097480;
      ProcCount@1240020000 : Integer;
      TotalCount@1240020003 : Integer;
    BEGIN
      CurrPage.SETSELECTIONFILTER(LocProcUnitSafetyStockRevLine);
      ProcCount := 0;
      IF LocProcUnitSafetyStockRevLine.FIND('-') THEN BEGIN
        REPEAT
          TotalCount += 1;
          IF LocProcUnit.GET(LocProcUnitSafetyStockRevLine."Location Code", LocProcUnitSafetyStockRevLine."Item No.", LocProcUnitSafetyStockRevLine."Variant Code") THEN BEGIN
            ProcCount += 1;
            LocProcUnit."Safety Stock Days" := LocProcUnitSafetyStockRevLine."Previous Safety Stock Days";
            LocProcUnit."Minimum Days Supply" := LocProcUnitSafetyStockRevLine."Previous Min Days Supply";
            LocProcUnit."Maximum Days Supply" := LocProcUnitSafetyStockRevLine."Previous Max Days Supply";
            LocProcUnit.MODIFY(FALSE);
          END;
        UNTIL LocProcUnitSafetyStockRevLine.NEXT = 0;
      END;
      MESSAGE(Text002, ProcCount, TotalCount);
    END;

    LOCAL PROCEDURE MakeNewSafetyStockAdjustment@1240020009();
    VAR
      LocProcUnit@1240020002 : Record 14000555;
      LocProcUnitSafetyStockRevLine@1240020001 : Record 14097480;
      ProcCount@1240020000 : Integer;
      ModifyRec@1240020003 : Boolean;
      TotalCount@1240020004 : Integer;
    BEGIN
      LocProcUnitSafetyStockRevLine.SETRANGE(Update, TRUE);
      SetArchiveSafetyStock(LocProcUnitSafetyStockRevLine);
      ProcCount := 0;
      IF LocProcUnitSafetyStockRevLine.FIND('-') THEN BEGIN
        REPEAT
          TotalCount += 1;
          IF LocProcUnit.GET(LocProcUnitSafetyStockRevLine."Location Code", LocProcUnitSafetyStockRevLine."Item No.", '') THEN BEGIN
            CASE LocProcUnit."Replenishment Source Type" OF
              LocProcUnit."Replenishment Source Type"::Location:
              BEGIN
                IF (LocProcUnit."Minimum Inventory" = 0) OR (LocProcUnit."Maximum Inventory" = 0) THEN BEGIN
                  IF (LocProcUnitSafetyStockRevLine."Calculated Min Days Supply" > 0) AND (LocProcUnitSafetyStockRevLine."Calculated Max Days Supply" > 0) THEN BEGIN
                   LocProcUnit."Minimum Days Supply" := LocProcUnitSafetyStockRevLine."Calculated Min Days Supply";
                   LocProcUnit."Maximum Days Supply" := LocProcUnitSafetyStockRevLine."Calculated Max Days Supply";
                   ModifyRec := TRUE;
                  END;
                END;
              END;
              LocProcUnit."Replenishment Source Type"::Vendor:
              BEGIN
                IF (LocProcUnitSafetyStockRevLine."Calculated Safety Stock Days" <> LocProcUnitSafetyStockRevLine."Active Safety Stock Days") THEN
                  LocProcUnit."Safety Stock Days" := LocProcUnitSafetyStockRevLine."Calculated Safety Stock Days";
                ModifyRec := TRUE;
              END;
            END;
            IF ModifyRec THEN BEGIN
              LocProcUnit.MODIFY(FALSE);
              ModifyRec := FALSE;
              ProcCount += 1;
            END;
          END;
        UNTIL LocProcUnitSafetyStockRevLine.NEXT = 0;
      END;
      MESSAGE(Text002, ProcCount, TotalCount);
      LocProcUnitSafetyStockRevLine.RESET;
      LocProcUnitSafetyStockRevLine.MODIFYALL(Update, FALSE, FALSE);
    END;

    LOCAL PROCEDURE CheckSpokesLeadTimeHorizon@1240020022(VAR CurrProcUnitSafetyStockRevLine@1240020004 : Record 14097480);
    VAR
      HubProcUnit@1240020005 : Record 14000555;
      SpokeProcUnit@1240020001 : Record 14000555;
      HubHorizon@1240020002 : Date;
      SpokeHorizon@1240020003 : Date;
      UBP@1240020008 : Codeunit 14000564;
    BEGIN
      SpokeProcUnit.GET(CurrProcUnitSafetyStockRevLine."Location Code", CurrProcUnitSafetyStockRevLine."Item No.", CurrProcUnitSafetyStockRevLine."Variant Code");
      IF SpokeProcUnit."Replenishment Source Type" <> SpokeProcUnit."Replenishment Source Type"::Location THEN BEGIN
        EXIT;
      END;
      IF (SpokeProcUnit."Replenishment Model" <> SpokeProcUnit."Replenishment Model"::"Min/Max") OR (SpokeProcUnit."Maximum Inventory" <> 0) THEN
        EXIT;

      HubProcUnit.GET(SpokeProcUnit."Replenishment Source Code", SpokeProcUnit."Item No.", SpokeProcUnit."Variant Code");
      HubHorizon := UBP.GetLeadTimeHoriz(HubProcUnit);
      SpokeHorizon := CALCDATE(STRSUBSTNO('<+%1D>',SpokeProcUnit."Minimum Days Supply"),WORKDATE);
      IF HubHorizon < SpokeHorizon THEN BEGIN
        CurrProcUnitSafetyStockRevLine."To Review" := TRUE;
        CurrProcUnitSafetyStockRevLine."Review Message" := STRSUBSTNO(Text003, SpokeProcUnit."Location Code", SpokeHorizon, HubProcUnit."Location Code", HubHorizon);
      END;
    END;

    LOCAL PROCEDURE SetArchiveSafetyStock@1240020000(VAR CurrProcUnitSafetyStockRevLine@1240020003 : Record 14097480);
    VAR
      LocProcUnit@1240020002 : Record 14000555;
      ProcCount@1240020000 : Integer;
    BEGIN
      IF CurrProcUnitSafetyStockRevLine.FIND('-') THEN BEGIN
        REPEAT
          IF LocProcUnit.GET(CurrProcUnitSafetyStockRevLine."Location Code", CurrProcUnitSafetyStockRevLine."Item No.", CurrProcUnitSafetyStockRevLine."Variant Code") THEN BEGIN
            CurrProcUnitSafetyStockRevLine."Previous Safety Stock Days" := LocProcUnit."Safety Stock Days";
            CurrProcUnitSafetyStockRevLine."Previous Min Days Supply" := LocProcUnit."Minimum Days Supply";
            CurrProcUnitSafetyStockRevLine."Previous Max Days Supply" := LocProcUnit."Maximum Days Supply";
            CurrProcUnitSafetyStockRevLine.MODIFY(FALSE);
          END;
        UNTIL CurrProcUnitSafetyStockRevLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ShowSafetyStockChanges@1240020003();
    VAR
      LocProcUnit@1240020002 : Record 14000555;
      ProcCount@1240020000 : Integer;
    BEGIN
      ProcCount := 0;
      IF FIND('-') THEN BEGIN
        REPEAT
          IF LocProcUnit.GET("Location Code", "Item No.", "Variant Code") THEN BEGIN
            CASE LocProcUnit."Replenishment Source Type" OF
              LocProcUnit."Replenishment Source Type"::Vendor:
              BEGIN
                IF "Calculated Safety Stock Days" <> LocProcUnit."Safety Stock Days" THEN BEGIN
                  ProcCount += 1;
                  MARK(TRUE);
                END;
              END;
              LocProcUnit."Replenishment Source Type"::Location:
              BEGIN
                IF ("Calculated Max Days Supply" <> LocProcUnit."Maximum Days Supply") AND (LocProcUnit."Maximum Inventory" = 0) AND (LocProcUnit."Minimum Inventory" = 0) THEN BEGIN
                  ProcCount += 1;
                  MARK(TRUE);
                END;
              END;
            END;
          END;
        UNTIL NEXT = 0;
      END;
      MARKEDONLY(TRUE);
      IF FIND('-') THEN;
      MESSAGE(Text001,ProcCount);
    END;

    LOCAL PROCEDURE SetReplenishmentHierarchy@4(VAR CurrProcUnit@1000 : Record 14000555) : Integer;
    VAR
      locProcUnit@1001 : Record 14000555;
      hub@1240020000 : Boolean;
      spoke@1240020001 : Boolean;
    BEGIN
      hub := FALSE;
      spoke := FALSE;
      locProcUnit.SETRANGE("Replenishment Source Type",CurrProcUnit."Replenishment Source Type"::Location);
      locProcUnit.SETRANGE("Replenishment Source Code",CurrProcUnit."Location Code");
      locProcUnit.SETRANGE("Item No.",CurrProcUnit."Item No.");
      locProcUnit.SETFILTER("Variant Code",CurrProcUnit."Variant Code");
      IF locProcUnit.ISEMPTY THEN
        hub := FALSE
      ELSE
        hub := TRUE;

      IF CurrProcUnit."Replenishment Source Type" = CurrProcUnit."Replenishment Source Type"::Location THEN
        spoke := TRUE
      ELSE
        spoke := FALSE;


      CASE TRUE OF
        spoke AND hub:
          EXIT("Replenishment Hierarchy"::"Hub and Spoke");
        hub:
          EXIT("Replenishment Hierarchy"::Hub);
        spoke:
          EXIT("Replenishment Hierarchy"::Spoke);
        ELSE
          EXIT("Replenishment Hierarchy"::" ");
      END;
    END;

    LOCAL PROCEDURE OpenWindow@1240020008();
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT;

      ProgWindow.OPEN(
        'Location     #1########\' +
        'Item No.     #2##################\' +
        'Variant Code #3##################\');
      DialogOpen := TRUE;
    END;

    LOCAL PROCEDURE UpdateWindow@1240020011(VAR CurrProcUnit@1240020000 : Record 14000555);
    BEGIN
      IF NOT DialogOpen THEN
        EXIT;

      ProgWindow.UPDATE(1, CurrProcUnit."Location Code");
      ProgWindow.UPDATE(2, CurrProcUnit."Item No.");
      ProgWindow.UPDATE(3, CurrProcUnit."Variant Code");
    END;

    LOCAL PROCEDURE CloseWindow@1240020013();
    BEGIN
      IF NOT DialogOpen THEN
        EXIT;

      ProgWindow.CLOSE;
      DialogOpen := FALSE;
    END;

    LOCAL PROCEDURE CalcForecastDeviationSafetyStock@1240020005(VAR ProcUnit@1240020016 : Record 14000555);
    VAR
      Periods@1240020004 : Integer;
      Location@1240020017 : Record 14;
      ItemUsage@1240020015 : Record 14000557;
      UnusualUsageAdj@1240020014 : Record 14002658;
      Formula@1240020013 : Record 14002652;
      Factor@1240020012 : Decimal;
      CurrForecast@1240020011 : Decimal;
      ForecastArray@1240020010 : ARRAY [12] OF Decimal;
      ForecastArrayDays@1240020020 : ARRAY [12] OF Integer;
      SafetyStockArray@1240020021 : ARRAY [12] OF Decimal;
      UsageArray@1240020009 : ARRAY [12] OF Decimal;
      ForecastPerDay@1240020008 : Decimal;
      StartingDate@1240020007 : Date;
      SafetyStockDays@1240020006 : Decimal;
      i@1240020005 : Integer;
      Deviation@1240020003 : Decimal;
      MeanDeviation@1240020002 : Decimal;
      DeviationXFactor@1240020001 : Decimal;
      ItemUsageFound@1240020000 : Boolean;
      LocProcUnitSafetyStockRevLine@1240020018 : Record 14097480;
      UBP@1240020019 : Codeunit 14000564;
      ResidualInv@1240020022 : Decimal;
      ResidualInvDays@1240020023 : Decimal;
      ForecastPerDayForRes@1240020024 : Decimal;
      TargetCustServiceLevel@1240020025 : Record 14002701;
      Sku@1240020026 : Record 5700;
      Item@1240020027 : Record 27;
      j@1240020029 : Integer;
      TotalResidualInv@1240020030 : Decimal;
      TotalResidualInvDays@1240020031 : Decimal;
    BEGIN
      AdvForSetup.GET;
      AdvForSetup.TESTFIELD("For. Deviation Calc. Periods");
      PeriodsToCheck := AdvForSetup."For. Deviation Calc. Periods";

      ItemUsage.SETCURRENTKEY("Location Code","Item No.","Variant Code","Starting Date");

      OpenWindow;

      IF ResidualInvNoOfPeriods < 0 THEN
        ResidualInvNoOfPeriods := 0;

      Location.SETFILTER(Code, ProcUnit.GETFILTER("Location Code"));
      Location.SETRANGE("Enable Adv. Forecasting",TRUE);
      IF Location.FINDSET THEN BEGIN
        REPEAT
          StartingDate := CalcPeriodDates(Location);
          ProcUnit.SETRANGE("Location Code",Location.Code);
          IF ProcUnit.FINDSET THEN
            REPEAT
              UpdateWindow(ProcUnit);

              // Calculate Deviation
              i := 0;
              CLEAR(ForecastArray);
              CLEAR(ForecastArrayDays);
              CLEAR(UsageArray);
              CLEAR(SafetyStockArray);
              SafetyStockDays := 0;
              Deviation := 0;
              MeanDeviation := 0;
              ForecastPerDay := 0;
              DeviationXFactor := 0;
              ResidualInv := 0;
              ResidualInvDays := 0;
              TotalResidualInv := 0;
              TotalResidualInvDays := 0;
              ForecastPerDayForRes := 0;
              ItemUsage.SETRANGE("Item No.",ProcUnit."Item No.");
              ItemUsage.SETRANGE("Location Code",ProcUnit."Location Code");
              ItemUsage.SETRANGE("Variant Code",ProcUnit."Variant Code");
              ItemUsage.SETFILTER("Source No.",'%1','');
              ItemUsage.SETFILTER("Starting Date",'%1..',StartingDate);
              IF ItemUsage.FINDSET THEN BEGIN
                REPEAT
                  i := i + 1;
                  // current foreast period
                  IF i = PeriodsToCheck + 1 THEN
                    CurrForecast := ItemUsage."Forecast Usage";
                  ForecastArray[i] := ItemUsage."Forecast Usage";
                  ForecastArrayDays[i] := (ItemUsage."Ending Date" - ItemUsage."Starting Date") + 1;

                  // for residual inventory based on current safety stock setting -- X number of previous periods
                  //IF (i >= ((PeriodsToCheck + 1) - ResidualInvNoOfPeriods)) AND (i < (PeriodsToCheck + 1)) THEN BEGIN
                    CASE ProcUnit."Safety Stock Calc. Method" OF
                      ProcUnit."Safety Stock Calc. Method"::"Forecast Deviation": SafetyStockArray[i] := ItemUsage."Safety Allowance Qty.";
                      ProcUnit."Safety Stock Calc. Method"::Fixed:
                        BEGIN
                          // safety stock qty.
                  //        SafetyStockArray[i] := (GetSafetyStockDays(ProcUnit,UBP.CalcLeadTimeDays(ProcUnit),GetReviewCycle(ProcUnit),0))*
                  //          (ForecastArray[i] / ForecastArrayDays[i]);
                       END;
                    END;
                  //END;
                  IF i > 1 THEN
                    UsageArray[i - 1] := ItemUsage."Period End Adjusted Usage";
                  IF i < PeriodsToCheck + 1 THEN
                    ItemUsage.NEXT;
                UNTIL i = PeriodsToCheck + 1;
                ItemUsageFound := TRUE;
              END ELSE
                ItemUsageFound := FALSE;

              // smooth usage
              IF (ItemUsageFound) AND
                 (ItemUsage.Status = ItemUsage.Status::Reoccuring) AND
                 (ItemUsage."Re-For. Formula" <> '')
              THEN BEGIN
                Formula.GET(ItemUsage."Re-For. Formula");
                i := 0;
                UnusualUsageAdj.SETCURRENTKEY(
                  "Location Code", "Item No.", "Variant Code","Starting Date","Ending Date","Source No.");
                UnusualUsageAdj.SETRANGE("Item No.",ProcUnit."Item No.");
                UnusualUsageAdj.SETRANGE("Location Code",ProcUnit."Location Code");
                UnusualUsageAdj.SETRANGE("Variant Code",ProcUnit."Variant Code");
                // usage is always compared to previous month forecast
                UnusualUsageAdj.SETFILTER("Starting Date",'%1..',CALCDATE('<+1M>',StartingDate));
                UnusualUsageAdj.SETFILTER("Source No.",'%1','');
                IF UnusualUsageAdj.FINDSET THEN
                  REPEAT
                    i := i + 1;
                    IF Formula."Seasonal Formula" THEN
                      UsageArray[i] := UnusualUsageAdj."Period End Adjusted Usage"
                    ELSE
                      UsageArray[i] := UnusualUsageAdj.Usage;
                  UNTIL UnusualUsageAdj.NEXT = 0;
              END ELSE BEGIN
                Formula.INIT;
                Formula.Code := '';
              END;
              // smooth usage

              // Calculate Deviation, Residual Inventory
              IF (ItemUsageFound) AND
                 (ItemUsage.Status = ItemUsage.Status::Reoccuring) AND
                 (ItemUsage."Re-For. Formula" <> '')
              THEN BEGIN
                MeanDeviation := 0;
                Periods := 0;
                i := 0;
                Deviation := 0;
                REPEAT
                  i := i + 1;

                  IF AdvForSetup."Include Over Forecast Periods" THEN BEGIN
                    IF AdvForSetup."Use Absolute Deviation" THEN
                      Deviation := Deviation + ABS(UsageArray[i] - ForecastArray[i])
                    ELSE
                      Deviation := Deviation + (UsageArray[i] - ForecastArray[i]);
                    Periods := Periods + 1;
                  END ELSE BEGIN
                    IF UsageArray[i] > ForecastArray[i] THEN BEGIN
                      Deviation := Deviation + (UsageArray[i] - ForecastArray[i]);
                      Periods := Periods + 1;
                    END;
                  END;

                UNTIL i = PeriodsToCheck;

                IF (Periods > 0) THEN
                  MeanDeviation := ROUND(Deviation / Periods,1.0)
                ELSE
                  MeanDeviation := 0;

                Factor := 1;
                IF ProcUnit."Target Customer Service Level" <> '' THEN BEGIN
                  TargetCustServiceLevel.GET(ProcUnit."Target Customer Service Level");
                  Factor := TargetCustServiceLevel."Deviation Factor Multiple";
                END;
                DeviationXFactor := MeanDeviation * Factor;
                ForecastPerDay := ForecastArray[PeriodsToCheck + 1] / ForecastArrayDays[PeriodsToCheck + 1];

                // Residual Inventory is Forecast + Safety Stock Exceeding the Usage for the last x periods
                // - Skip FOR current release >>
                j := (PeriodsToCheck + 1) - ResidualInvNoOfPeriods;
                WHILE (j < (PeriodsToCheck + 1)) DO BEGIN
                  ResidualInv := ROUND((ForecastArray[j] + SafetyStockArray[j]) - UsageArray[j],1.0);
                  TotalResidualInv := TotalResidualInv + ResidualInv;
                  ForecastPerDayForRes := ForecastArray[j]/ForecastArrayDays[j];
                  IF ForecastPerDayForRes <> 0 THEN
                    ResidualInvDays := ROUND(ResidualInv/ForecastPerDayForRes,1.0);
                  TotalResidualInvDays := TotalResidualInvDays + ResidualInvDays;
                  j := j + 1;
                END;

                IF ForecastPerDay <> 0 THEN
                  SafetyStockDays := ROUND(DeviationXFactor / ForecastPerDay,1.0)
                ELSE
                  SafetyStockDays := 0;

                IF SafetyStockDays > MaxSafetyStockDays THEN
                  SafetyStockDays := MaxSafetyStockDays;
              END ELSE BEGIN
                IF NOT ItemUsageFound THEN
                ItemUsage.INIT;
              END;
              // Calculate Deviation

              // Update records
              IF NOT LocProcUnitSafetyStockRevLine.GET(ProcUnit."Location Code", ProcUnit."Item No.", ProcUnit."Variant Code") THEN BEGIN
                LocProcUnitSafetyStockRevLine.INIT;
                LocProcUnitSafetyStockRevLine."Location Code" := ProcUnit."Location Code";
                LocProcUnitSafetyStockRevLine."Item No." := ProcUnit."Item No.";
                LocProcUnitSafetyStockRevLine."Variant Code" := ProcUnit."Variant Code";
                LocProcUnitSafetyStockRevLine.INSERT;
              END;
              LocProcUnitSafetyStockRevLine."Seasonal Formula" := FALSE;
              IF Formula.GET(ItemUsage."Re-For. Formula") THEN
                LocProcUnitSafetyStockRevLine."Seasonal Formula" := Formula."Seasonal Formula";
              LocProcUnitSafetyStockRevLine."Active Lead Time (Days)" := UBP.CalcLeadTimeDays(ProcUnit);
              LocProcUnitSafetyStockRevLine."Active Review Cycle (Days)" := GetReviewCycle(ProcUnit);
              LocProcUnitSafetyStockRevLine."Active Safety Stock Days" := GetSafetyStockDays(ProcUnit,LocProcUnitSafetyStockRevLine."Active Lead Time (Days)",
                LocProcUnitSafetyStockRevLine."Active Review Cycle (Days)",0);
              LocProcUnitSafetyStockRevLine."Replenishment Hierarchy" := SetReplenishmentHierarchy(ProcUnit);
              LocProcUnitSafetyStockRevLine."Usage Formula Status" := GetUsageFormulaStatus(ProcUnit);
              SetFinalReplenishmentSource(ProcUnit, LocProcUnitSafetyStockRevLine."Top Repl. Source Type", LocProcUnitSafetyStockRevLine."Top Repl. Source Code");
              LocProcUnitSafetyStockRevLine."Sporadic Target Stock Level" := ItemUsage."Sporadic Target Stock Level";
              LocProcUnitSafetyStockRevLine."Calculated Safety Stock Days" := SafetyStockDays;
              LocProcUnitSafetyStockRevLine."Residual Inventory Qty" := TotalResidualInv;
              LocProcUnitSafetyStockRevLine."Residual Inv. Days Supply" := TotalResidualInvDays;
              LocProcUnitSafetyStockRevLine."Residual Inventory Amt" := 0;
              IF ResidualInv <> 0 THEN BEGIN
                IF NOT Sku.ISEMPTY THEN BEGIN
                  IF Sku.GET(ProcUnit."Location Code", ProcUnit."Item No.", ProcUnit."Variant Code") THEN
                    LocProcUnitSafetyStockRevLine."Residual Inventory Amt" := ResidualInv * Sku."Last Direct Cost";
                END ELSE BEGIN
                  IF Item.GET(ProcUnit."Item No.") THEN BEGIN
                    LocProcUnitSafetyStockRevLine."Residual Inventory Amt" := ResidualInv * Item."Last Direct Cost";
                  END;
                END;
              END;
              LocProcUnitSafetyStockRevLine."Average Order Qty." := ROUND(CalcAverageOrderQty(ProcUnit."Location Code", ProcUnit."Item No.", ProcUnit."Variant Code"), 1.0);
              LocProcUnitSafetyStockRevLine."Item Class Description" := ProcUnit."Item Class Description";
              LocProcUnitSafetyStockRevLine."Ranking Code" := ProcUnit."Ranking Code";
              LocProcUnitSafetyStockRevLine."Current Safety Stock Qty" := ROUND(SafetyStockArray[PeriodsToCheck + 1], 0.1); // current closed period's safety allowance
              LocProcUnitSafetyStockRevLine."Calc. Mean Deviation Units" := MeanDeviation;
              LocProcUnitSafetyStockRevLine."Calc. Safety Allowance Qty." := DeviationXFactor;
              LocProcUnitSafetyStockRevLine."Qty. Expected" := ProcUnit.QtyExpected;
              LocProcUnitSafetyStockRevLine."To Review" := FALSE;
              LocProcUnitSafetyStockRevLine."Review Message" := '';
              LocProcUnitSafetyStockRevLine."Safety Stock Pct. of Lead Time" := 0;
              CASE ProcUnit."Replenishment Source Type" OF
                // Location
                ProcUnit."Replenishment Source Type"::Location:
                BEGIN
                  CASE ProcUnit."Replenishment Model" OF
                    ProcUnit."Replenishment Model"::"Min/Max":
                      BEGIN
                        CheckSpokesLeadTimeHorizon(LocProcUnitSafetyStockRevLine);
                      END;
                  END;
                  // need transit route calculation
      //             IF (LocProcUnitSafetyStockRevLine."Active Lead Time (Days)" <> 0) THEN BEGIN
      //               LocProcUnitSafetyStockRevLine."Safety Stock Pct. of Lead Time" := ROUND(((LocProcUnitSafetyStockRevLine."Calculated Safety Stock Days"/
      //                 LocProcUnitSafetyStockRevLine."Active Lead Time (Days)") * 100), 1.0);
      //             END;
                END;
                ELSE BEGIN
                  // vendor, production, assembly
                  CASE ProcUnit."Replenishment Model" OF
                    ProcUnit."Replenishment Model"::"Lead Time Horizon":
                    BEGIN
                      CASE LocProcUnitSafetyStockRevLine."Usage Formula Status" OF
                        LocProcUnitSafetyStockRevLine."Usage Formula Status"::Reoccuring:
                        BEGIN
                          IF ((LocProcUnitSafetyStockRevLine."Calculated Safety Stock Days" <> LocProcUnitSafetyStockRevLine."Active Safety Stock Days")
                          AND (LocProcUnitSafetyStockRevLine."Calculated Safety Stock Days" > 0))
                              THEN BEGIN
                            LocProcUnitSafetyStockRevLine."To Review" := TRUE;
                            LocProcUnitSafetyStockRevLine."Review Message" := STRSUBSTNO(Text004, LocProcUnitSafetyStockRevLine."Calculated Safety Stock Days",
                              LocProcUnitSafetyStockRevLine."Active Safety Stock Days");
                          END;
                          IF (ProcUnit."Replenishment Source Type" = ProcUnit."Replenishment Source Type"::Vendor) THEN BEGIN
                            IF (LocProcUnitSafetyStockRevLine."Active Lead Time (Days)" <> 0) THEN BEGIN
                              LocProcUnitSafetyStockRevLine."Safety Stock Pct. of Lead Time" := ROUND(((LocProcUnitSafetyStockRevLine."Calculated Safety Stock Days"/
                                LocProcUnitSafetyStockRevLine."Active Lead Time (Days)") * 100), 1.0);
                            END;
                          END;
                        END;
                        LocProcUnitSafetyStockRevLine."Usage Formula Status"::"L.T. Formula Req.", LocProcUnitSafetyStockRevLine."Usage Formula Status"::Sporadic:
                        BEGIN
                          IF (LocProcUnitSafetyStockRevLine."Average Order Qty." > LocProcUnitSafetyStockRevLine."Sporadic Target Stock Level") THEN BEGIN
                            LocProcUnitSafetyStockRevLine."To Review" := TRUE;
                            LocProcUnitSafetyStockRevLine."Review Message" := STRSUBSTNO(Text005,LocProcUnitSafetyStockRevLine."Average Order Qty.",
                              LocProcUnitSafetyStockRevLine."Sporadic Target Stock Level");
                          END;
                        END;
                      END;
                    END;
                  END;
                END;
              END;
              // if residual inventory is less than an average order qty. then too little safety stock
              LocProcUnitSafetyStockRevLine."Last Modified" := CURRENTDATETIME;
              LocProcUnitSafetyStockRevLine.MODIFY(FALSE);

            UNTIL ProcUnit.NEXT = 0;
          UNTIL Location.NEXT = 0;
      END;

      CloseWindow;
    END;

    LOCAL PROCEDURE CalcPeriodDates@1240020007(VAR CurrLocation@1240020000 : Record 14) StartingDate : Date;
    VAR
      Periods@1240020001 : Integer;
      LocInvPer@1240020002 : Record 14000553;
    BEGIN
      Periods := 0;
      LastClosedPeriodDate := 0D;
      LocInvPer.RESET;
      LocInvPer.ASCENDING(FALSE);
      LocInvPer.SETRANGE("Location Code",CurrLocation.Code);
      LocInvPer.SETRANGE("Period End Closed",TRUE);
      LocInvPer.FIND('-');
      LastClosedPeriodDate := LocInvPer."Ending Date";
      REPEAT
        Periods := Periods + 1;
        IF Periods < (PeriodsToCheck + 1) THEN
          LocInvPer.NEXT;
      UNTIL (Periods = PeriodsToCheck + 1);
      StartingDate := LocInvPer."Starting Date";
      EXIT(StartingDate);
    END;

    LOCAL PROCEDURE GetUsageFormulaStatus@1240020010(VAR CurrProcUnit@1240020001 : Record 14000555) : Integer;
    VAR
      ItemUsage@1240020000 : Record 14000557;
    BEGIN
      ItemUsage.SETRANGE("Location Code",CurrProcUnit."Location Code");
      ItemUsage.SETRANGE("Item No.",CurrProcUnit."Item No.");
      ItemUsage.SETRANGE("Variant Code",CurrProcUnit."Variant Code");
      ItemUsage.SETFILTER("Source No.",'=%1','');
      ItemUsage.SETRANGE("Ending Date",LastClosedPeriodDate);
      IF ItemUsage.FINDFIRST THEN
        EXIT(ItemUsage.Status)
      ELSE
        EXIT(0);
    END;

    LOCAL PROCEDURE GetItem@1240020006();
    BEGIN
    END;

    LOCAL PROCEDURE CalcAverageOrderQty@1240020001(CurrLocationCode@1240020003 : Code[10];CurrItemNo@1240020004 : Code[20];CurrVariantCode@1240020005 : Code[10]) AvgOrdQty : Decimal;
    VAR
      LocUsageLedgEntry@1240020000 : Record 14000556;
      LocItemUsageAdj@1240020001 : Record 14000558;
      UBP@1240020002 : Codeunit 14000564;
      LocUsageTotal@1240020006 : Decimal;
    BEGIN
      // Calc Annual Hits
      // starting date
      AvgOrdQty := 0;

      LocUsageLedgEntry.RESET;
      LocUsageLedgEntry.SETCURRENTKEY(
      "Location Code","Item No.","Variant Code","Exclude from Usage","Drop Shipment","First Shipment","Usage Date");
      LocUsageLedgEntry.SETFILTER("Location Code",
        UBP.GetUsageLocationFilter(
          CurrLocationCode,CurrItemNo, CurrVariantCode,FALSE));
      LocUsageLedgEntry.SETRANGE("Item No.", CurrItemNo);
      LocUsageLedgEntry.SETRANGE("Variant Code", CurrVariantCode);
      LocUsageLedgEntry.SETRANGE("Usage Date",CALCDATE('<-1Y+CM+1D>', LastClosedPeriodDate), LastClosedPeriodDate);

      LocUsageTotal := 0;
      LocUsageLedgEntry.SETRANGE("Exclude from Usage", FALSE);
      LocUsageLedgEntry.SETRANGE("Drop Shipment", FALSE);
      LocUsageLedgEntry.CALCSUMS("Usage Hit",Quantity);
      LocItemUsageAdj.SETCURRENTKEY("Item No.","Location Code","Variant Code","Starting Date","Ending Date","Line No.");
      LocItemUsageAdj.SETRANGE("Item No.", CurrItemNo);
      LocItemUsageAdj.SETFILTER("Location Code",
        UBP.GetUsageLocationFilter(
          CurrLocationCode,CurrItemNo, CurrVariantCode,FALSE));
      LocItemUsageAdj.SETRANGE("Variant Code", CurrLocationCode);
      LocItemUsageAdj.SETRANGE("Starting Date", CALCDATE('<-1Y+CM+1D>', LastClosedPeriodDate), LastClosedPeriodDate);
      LocItemUsageAdj.CALCSUMS("Adjustment Quantity");
      LocUsageTotal := (LocUsageLedgEntry.Quantity + -LocItemUsageAdj."Adjustment Quantity");
      IF (LocUsageLedgEntry."Usage Hit" > 0) AND (LocUsageTotal < 0) THEN
        AvgOrdQty := -(LocUsageTotal/LocUsageLedgEntry."Usage Hit");
      EXIT(AvgOrdQty);
    END;

    PROCEDURE GetSafetyStockDays@1(CurrProcUnit@1240020007 : Record 14000555;CurrLeadTimeDays@1240020000 : Integer;CurrReviewCycle@1240020001 : Integer;CurrPushDays@1240020002 : Integer) SafetyStockDays : Integer;
    VAR
      AdvForSetup@1240020004 : Record 14002651;
      SafetyStockModLine@1240020005 : Record 14097466;
      TotalLeadtime@1240020006 : Integer;
      LTHDate@1240020003 : Date;
    BEGIN
      IF CurrProcUnit."Replenishment Model" <> CurrProcUnit."Replenishment Model"::"Lead Time Horizon" THEN
        EXIT(0);

      TotalLeadtime := CurrLeadTimeDays + CurrReviewCycle + CurrPushDays;
      LTHDate := WORKDATE + TotalLeadtime;

      AdvForSetup.GET;
      SafetyStockDays := AdvForSetup."Safety Stock Days";
      IF CurrProcUnit."Safety Stock Days" <> 0 THEN
        SafetyStockDays := CurrProcUnit."Safety Stock Days";

      IF CurrProcUnit."Safety Stock Modifier" <> '' THEN BEGIN
        SafetyStockModLine.RESET;
        SafetyStockModLine.SETRANGE("Safety Stock Modifier Code",CurrProcUnit."Safety Stock Modifier");
        SafetyStockModLine.SETFILTER("Starting Date",'..%1',LTHDate);
        SafetyStockModLine.SETFILTER("Ending Date",'%1..',LTHDate);
        IF SafetyStockModLine.FIND('-') THEN BEGIN
          CASE SafetyStockModLine.Type OF
            SafetyStockModLine.Type::"% of Lead Time":
              BEGIN
                SafetyStockDays := ROUND((CurrLeadTimeDays * SafetyStockModLine.Value) / 100,1.0);
              END;
            SafetyStockModLine.Type::"Safety Stock Days":
              BEGIN
                SafetyStockDays := SafetyStockModLine.Value;
              END;
            SafetyStockModLine.Type::"Safety Stock Days + Days":
              BEGIN
                SafetyStockDays := SafetyStockDays + SafetyStockModLine.Value;
              END;
            SafetyStockModLine.Type::"Safety Stock Days * %":
              BEGIN
                SafetyStockDays := ROUND((SafetyStockDays * SafetyStockModLine.Value) / 100,1.0);
              END;
          END;
        END;
      END;

      EXIT(SafetyStockDays);
    END;

    PROCEDURE GetReviewCycle@2(CurrProcUnit@1240020000 : Record 14000555) Resp : Integer;
    VAR
      VendorBuyingCal@1240020001 : Record 14000563;
    BEGIN
      IF CurrProcUnit."Replenishment Source Type" <> CurrProcUnit."Replenishment Source Type"::Vendor THEN
        EXIT(0);
      IF VendorBuyingCal.GET(CurrProcUnit."Replenishment Source Code", CurrProcUnit."Location Code", CurrProcUnit."Division Code") THEN
        EXIT(VendorBuyingCal."Frozen Review Cycle (Days)")
      ELSE
        EXIT(0);
    END;

    PROCEDURE SetFinalReplenishmentSource@3(VAR CurrProcUnit@1240020001 : Record 14000555;VAR TopLevelReplType@1004 : ' ,Location,Vendor,Production,Assembly';VAR TopLevelReplSource@1002 : Code[20]);
    VAR
      LocProcUnitTop@1240020000 : Record 14000555;
      CheckLocation@1240020003 : Code[10];
      Finished@1240020002 : Boolean;
      CurrItem@1240020006 : Code[50];
      CurrVariant@1240020005 : Code[10];
      CurrSingleLocation@1240020004 : Boolean;
      Vendor@1000 : Record 23;
      VendBuyingCalendar@1001 : Record 14000563;
    BEGIN
      Finished := FALSE;
      CheckLocation := CurrProcUnit."Location Code";
      CurrItem :=  CurrProcUnit."Item No.";
      CurrVariant := CurrProcUnit."Variant Code";
      TopLevelReplType := TopLevelReplType::" ";
      TopLevelReplSource := '';
      REPEAT
        IF LocProcUnitTop.GET(CheckLocation,CurrItem,CurrVariant) THEN BEGIN
          IF (LocProcUnitTop."Replenishment Source Type" = LocProcUnitTop."Replenishment Source Type"::Vendor) OR
             (LocProcUnitTop."Replenishment Source Type" = LocProcUnitTop."Replenishment Source Type"::Production) OR
             (LocProcUnitTop."Replenishment Source Type" = LocProcUnitTop."Replenishment Source Type"::Assembly)
          THEN BEGIN
            Finished := TRUE;
            TopLevelReplType := LocProcUnitTop."Replenishment Source Type";
            TopLevelReplSource := LocProcUnitTop."Replenishment Source Code";
            CurrProcUnit."Purchaser Code" := '';
            IF (CurrProcUnit."Top Repl. Source Type" = CurrProcUnit."Top Repl. Source Type"::Vendor) AND (CurrProcUnit."Top Repl. Source Code" <> '') THEN BEGIN
              IF VendBuyingCalendar.GET(CurrProcUnit."Replenishment Source Code", CurrProcUnit."Location Code", CurrProcUnit."Division Code") THEN BEGIN
                CurrProcUnit."Purchaser Code" := VendBuyingCalendar."Purchaser Code";
              END;
              IF (CurrProcUnit."Purchaser Code" = '') THEN BEGIN
                Vendor.GET(CurrProcUnit."Top Repl. Source Code");
                CurrProcUnit."Purchaser Code" := Vendor."Purchaser Code";
              END;
            END;
          END ELSE
           CheckLocation := LocProcUnitTop."Replenishment Source Code";
        END ELSE
          Finished := TRUE;
      UNTIL Finished;
    END;

    BEGIN
    END.
  }
}

