OBJECT Page 23044630 DSHIP Multiscan Serial Entry
{
  OBJECT-PROPERTIES
  {
    Date=01/21/19;
    Time=[ 1:40:35 PM];
    Version List=DSHIP2.2.2;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Dynamic Ship Multiscan Serial Entry;
               ESM=Mov. Dynamic Ship Multiscan serie;
               FRC=êcriture SÇrie Multiscan Dynamic Ship;
               ENC=Dynamic Ship Multiscan Serial Entry];
    SourceTable=Table23044602;
    DataCaptionExpr=trecDShipPackLineBuffer."Item No.";
    PageType=StandardDialog;
    SourceTableTemporary=Yes;
    OnOpenPage=BEGIN

                 setState(optState::Start);
                 recDShipConfig.GET;
               END;

    OnDeleteRecord=BEGIN

                     EXIT(setState(optState::"SN Deleted"));
                   END;

    OnQueryClosePage=BEGIN

                       IF ( (CloseAction = ACTION::OK) OR (optState = optState::OK) ) THEN BEGIN
                         setState(optState::Closing);
                         packLines;
                         setState(optState::OK);
                       END;
                     END;

  }
  CONTROLS
  {
    { 1000000000;0;Container;
                ContainerType=ContentArea }

    { 1000000003;1;Group  ;
                GroupType=Group }

    { 1000000005;2;Group  ;
                GroupType=Group }

    { 1000000006;3;Field  ;
                Name=edtScan;
                CaptionML=[ENU=Scan Here;
                           ESM=Este campo digitalizar;
                           FRC=Scannez Ici;
                           ENC=Scan Here];
                SourceExpr=sScan;
                OnValidate=BEGIN

                             processScan(sScan);
                           END;
                            }

    { 1000000004;3;Field  ;
                Lookup=Yes;
                CaptionML=[ENU=Last Scan;
                           ESM=Èltima digitalizar;
                           FRC=Derniäre Scannez;
                           ENC=Last Scan];
                SourceExpr=sLastScan;
                Enabled=FALSE;
                Editable=FALSE }

    { 1000000001;2;Group  ;
                Name=Group;
                Enabled=FALSE;
                GroupType=Repeater }

    { 1000000002;3;Field  ;
                Width=200;
                SourceExpr="Serial No." }

  }
  CODE
  {
    VAR
      recDShipConfig@1000000002 : Record 23044600;
      trecDShipPackLineBuffer@1000000006 : TEMPORARY Record 23044602;
      cuPackMgmt@1000000011 : Codeunit 23044601;
      cuRateMgmt@1000000004 : Codeunit 23044602;
      sScan@1000000000 : Text;
      sLastScan@1000000009 : Text;
      codLPHeaderNo@1000000007 : Code[20];
      iLineNo@1000000003 : Integer;
      iNewEntries@1000000010 : Integer;
      optState@1000000005 : 'Start,OK,Cancel,Unknown Scan,SN Scanned,All SN Scanned,Bad SN,Duplicate SN,SN Deleted,Closing';

    PROCEDURE initPage@1000000003(ptrecPackLineBuffer@1000000000 : TEMPORARY Record 23044602;pcodLPHeaderNo@1000000001 : Code[20];pcodSerialNo@1000000002 : Code[20];pcodLotNo@1000000003 : Code[20]);
    BEGIN
      //<FUNC>
      //  Description: Initializes record and globals
      //  Called From: Page DSHIP Package Worksheet (P23044602)
      //  Side Effect: None
      //</FUNC>

      trecDShipPackLineBuffer := ptrecPackLineBuffer;
      codLPHeaderNo := pcodLPHeaderNo;
      IF ( pcodSerialNo <> '' ) THEN
        createEntry(pcodSerialNo, TRUE);

      refreshEntries;
    END;

    LOCAL PROCEDURE processScan@1000000007(psScan@1000000000 : Text);
    BEGIN
      //<FUNC>
      //  Description: Determines if a serial number or command was scanned, then excutes
      //  Called From: This page (P23044630)
      //  Side Effect: None
      //</FUNC>

      IF ( psScan = '' ) THEN
        EXIT;

      sScan := '';
      sLastScan := psScan;
      psScan := LOWERCASE(psScan);

      IF ( cuRateMgmt.callScanExtension(recDShipConfig."Shipment Extension Codeunit", codLPHeaderNo, trecDShipPackLineBuffer."Document Type", trecDShipPackLineBuffer."Document No.", sLastScan, trecDShipPackLineBuffer."Item No.") ) THEN BEGIN
        refreshEntries;
        EXIT;
      END;
      IF ( processOKCommand(psScan) ) THEN BEGIN
        CurrPage.CLOSE;
        EXIT;
      END;
      IF ( processCancelCommand(psScan) ) THEN BEGIN
        CurrPage.CLOSE;
        EXIT;
      END;
      IF ( processSerialScan(psScan) ) THEN
        EXIT;

      setState(optState::"Unknown Scan");
    END;

    LOCAL PROCEDURE processSerialScan@1000000022(psScan@1000000003 : Text) : Boolean;
    VAR
      lrecItem@1000000002 : Record 27;
      lrecBarcodeRule@1000000001 : Record 23044509;
      lrecItemTracking@1000000006 : Record 6502;
      lcuDecodeRuleMgmt@1000000004 : Codeunit 23044517;
      lbFound@1000000000 : Boolean;
      lbSucceed@1000000005 : Boolean;
      lcodItem@1000000007 : Code[20];
      liBardcodeRuleID@1000000008 : Integer;
    BEGIN
      //<FUNC>
      //  Description: Adds the scanned serial number to the buffer, true if it was a serial
      //  Called From: This page (P23044630)
      //  Side Effect: None
      //</FUNC>

      IF ( optState = optState::"All SN Scanned" ) THEN
        EXIT(FALSE);

      lrecBarcodeRule.SETFILTER("Serial No. Expression", '<>%1', '');
      lbFound := lcuDecodeRuleMgmt.decodeItemBarcode(
        psScan,
        lrecBarcodeRule,
        lrecItem,
        lrecBarcodeRule.Context::Generic,
        trecDShipPackLineBuffer."Item No.",
        '');

      IF (lbFound) THEN BEGIN
        IF (NOT lrecBarcodeRule."Validate Serial No.") THEN BEGIN
          IF (lrecItemTracking.GET(lrecItem."Item Tracking Code")) THEN;
          IF (lrecItemTracking."SN Specific Tracking" OR lrecItemTracking."SN Info. Inbound Must Exist" OR
              lrecItemTracking."SN Pos. Adjmt. Inb. Tracking" OR lrecItemTracking."SN Neg. Adjmt. Inb. Tracking" OR
              lrecItemTracking."SN Assembly Inbound Tracking" OR lrecItemTracking."SN Manuf. Inbound Tracking") THEN BEGIN
            liBardcodeRuleID := lrecBarcodeRule."Rule ID";
            lrecBarcodeRule.SETFILTER("Serial No. Expression", '<>%1', '');
            lrecBarcodeRule.SETRANGE("Validate Serial No.", TRUE);
            lbFound := NOT lrecBarcodeRule.FINDFIRST();
            lrecBarcodeRule.GET(liBardcodeRuleID);
          END;
        END;
      END;

      IF (lbFound) THEN BEGIN
        IF ( trecDShipPackLineBuffer."Item No." <> lrecItem."No." ) THEN BEGIN
          setState(optState::"Bad SN");
          EXIT(TRUE);
        END;

        IF ( lrecBarcodeRule."Serial No. Result" <> '' ) THEN
          handleSerialNo(lrecBarcodeRule);
        EXIT(TRUE);
      END; // if lbfound
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE processOKCommand@1000000002(psScan@1000000000 : Text) : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Closes the page with tcOKCommand
      //  Called From: This page (P23044630)
      //  Side Effect: None
      //</FUNC>

      IF ( psScan = '--ok' ) THEN
        EXIT(setState(optState::OK));
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE processCancelCommand@1000000004(psScan@1000000000 : Text) : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Closes the page with tcCancelCommand
      //  Called From: This page (P23044630)
      //  Side Effect: None
      //</FUNC>

      IF ( psScan = '--cancel' ) THEN
        EXIT(setState(optState::Cancel));
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE handleSerialNo@1000000023(precBarcodeRule@1000000000 : Record 23044509);
    BEGIN
      //<FUNC>
      //  Description: Handles scanned serial number
      //  Called From: This page (P23044630)
      //  Side Effect: None
      //</FUNC>

      IF ( iLineNo <> 0 ) THEN BEGIN
        Rec.RESET;
        Rec.SETRANGE("Item No.", trecDShipPackLineBuffer."Item No.");
        IF ( trecDShipPackLineBuffer."Variant Code" <> '' ) THEN
          Rec.SETRANGE("Variant Code", trecDShipPackLineBuffer."Variant Code");
        Rec.SETRANGE("Serial No.", precBarcodeRule."Serial No. Result");

        IF ( Rec.FINDFIRST ) THEN BEGIN
          setState(optState::"Duplicate SN");
          EXIT;
        END;

        Rec.SETRANGE("Serial No.");
        IF ( NOT Rec.FINDFIRST ) THEN
          EXIT;
      END; // if iLineNo > 0

      createEntry(precBarcodeRule."Serial No. Result", TRUE);
    END;

    LOCAL PROCEDURE createEntry@1000000005(pcodSerialNo@1000000000 : Code[20];pbIsNew@1000000002 : Boolean) : Boolean;
    VAR
      liQtyRemaining@1000000001 : Integer;
    BEGIN
      //<FUNC>
      //  Description: Returns true if it cannot insert further records
      //  Called From: This page (P23044630)
      //  Side Effect: None
      //</FUNC>

      CLEAR(Rec);
      iLineNo += 1000;
      Rec."Line No." := iLineNo;
      Rec."Document Type" := trecDShipPackLineBuffer."Document Type";
      Rec."Document Subtype" := trecDShipPackLineBuffer."Document Subtype";
      Rec."Document No." := trecDShipPackLineBuffer."Document No.";
      Rec."Document Line No." := trecDShipPackLineBuffer."Document Line No.";
      Rec."Item No." := trecDShipPackLineBuffer."Item No.";
      Rec."Variant Code" := trecDShipPackLineBuffer."Variant Code";
      Rec."Serial No." := pcodSerialNo;
      Rec."New License Plate No." := codLPHeaderNo;
      Rec."Unit of Measure Code" := trecDShipPackLineBuffer."Unit of Measure Code";
      Rec."Assembly Item No." := trecDShipPackLineBuffer."Assembly Item No.";
      IF ( pbIsNew ) THEN BEGIN
        Rec."Qty. to Move" := 1;
        iNewEntries += 1;
      END;
      Rec.INSERT;

      IF ( Rec.FINDSET ) THEN ;

      IF ( iNewEntries = trecDShipPackLineBuffer.Quantity ) THEN
        setState(optState::"All SN Scanned")
      ELSE
        setState(optState::"SN Scanned");
    END;

    LOCAL PROCEDURE packLines@1000000045();
    VAR
      lcuPackMgmt@1000000000 : Codeunit 23044601;
    BEGIN
      //<FUNC>
      //  Description: Packs the entered serial numbers
      //  Called From: This page (P23044630)
      //  Side Effect: The buffer on the package worksheet will be updated
      //</FUNC>

      IF ( NOT (optState IN [optState::OK, optState::Closing]) ) THEN
        EXIT;

      Rec.RESET;
      Rec.SETRANGE("Qty. to Move", 1);
      IF ( Rec.FINDSET ) THEN BEGIN
        REPEAT
          lcuPackMgmt.packLine(Rec);
        UNTIL(Rec.NEXT=0);
      END;
    END;

    LOCAL PROCEDURE setState@1000000008(poptState@1000000000 : Option) : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Changes the state of the page
      //  Called From: This page (P23044630)
      //  Side Effect: Updates visual cues for user
      //</FUNC>

      IF ( (poptState IN [optState::OK, optState::"SN Deleted", optState::Closing]) OR
           (optState <> optState::"All SN Scanned") ) THEN
        optState := poptState;

      updateLastScan;

      EXIT(TRUE);
    END;

    PROCEDURE isOK@1000000006() : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Returns true if optState is "OK"
      //  Called From: Page DSHIP Package Worksheet (P23044602)
      //  Side Effect: None
      //</FUNC>

      EXIT(optState = optState::OK);
    END;

    LOCAL PROCEDURE updateLastScan@1000000021();
    BEGIN
      //<FUNC>
      //  Description: Updates sLastScan based on the state
      //  Called From: This page (P23044630)
      //  Side Effect: None
      //</FUNC>

      //Start,OK,Cancel,Unknown Scan,SN Scanned,All SN Scanned,Bad SN,Duplicate SN,SN Deleted

      IF ( optState = optState::Start ) THEN
        sLastScan := 'Please scan a serial number';

      sLastScan := FORMAT(optState) + ' : ' + sLastScan;

      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE refreshEntries@1000000009() : Boolean;
    VAR
      lrecResEntry@1000000000 : Record 337;
      lrecWhseShipLine@1000000003 : Record 7321;
      lrecAssemblyLine@1000000008 : Record 901;
      lsScanValue@1000000002 : Text;
      lcodSourceID@1000000004 : Code[20];
      lcodItemNo@1000000007 : Code[20];
      liQtyRemaining@1000000001 : Integer;
      liSourceRefNo@1000000005 : Integer;
      liSourceType@1000000006 : Integer;
    BEGIN
      //<FUNC>
      //  Description: Refresh the record
      //  Called From: This page (P23044630)
      //  Side Effect: None
      //</FUNC>

      lsScanValue := sLastScan;

      Rec.SETRANGE("Qty. to Move", 0);
      Rec.DELETEALL;


      IF ( trecDShipPackLineBuffer."Document Type" = trecDShipPackLineBuffer."Document Type"::"Warehouse Shipment") THEN BEGIN
        lrecWhseShipLine.SETRANGE("No.", trecDShipPackLineBuffer."Document No.");
        lrecWhseShipLine.SETRANGE("Line No.", trecDShipPackLineBuffer."Document Line No.");
        //lrecWhseShipLine.SETRANGE("Item No.", trecDShipPackLineBuffer."Item No.");
        lrecWhseShipLine.FINDFIRST;
        lcodItemNo := trecDShipPackLineBuffer."Item No.";
      //  IF ( lrecWhseShipLine."Assemble to Order" ) THEN
      //    lcodItemNo := trecDShipPackLineBuffer."Assembly Item No.";
        lcodSourceID := lrecWhseShipLine."Source No.";
        liSourceRefNo := lrecWhseShipLine."Source Line No.";
        liSourceType := lrecWhseShipLine."Source Type";
      END ELSE BEGIN
        lcodSourceID := trecDShipPackLineBuffer."Document No.";
        liSourceRefNo := trecDShipPackLineBuffer."Document Line No.";
        CASE trecDShipPackLineBuffer."Document Type" OF
          trecDShipPackLineBuffer."Document Type"::"Sales Order":
            BEGIN
              liSourceType := DATABASE::"Sales Line";
            END;
          trecDShipPackLineBuffer."Document Type"::"Purchase Return Order":
            BEGIN
              liSourceType := DATABASE::"Purchase Line";
            END;
          trecDShipPackLineBuffer."Document Type"::"Outbound Transfer":
            BEGIN
              liSourceType := DATABASE::"Transfer Line";
            END;
        END;
      END;

      IF ( trecDShipPackLineBuffer."Assembly Item No." <> '' ) THEN BEGIN
        lcodItemNo := trecDShipPackLineBuffer."Item No.";
        lcodSourceID := cuPackMgmt.getAssembleToOrderNo(1, lcodSourceID, liSourceRefNo);
        lrecAssemblyLine.SETRANGE("Document Type", lrecAssemblyLine."Document Type"::Order);
        lrecAssemblyLine.SETRANGE("Document No.", lcodSourceID);
        lrecAssemblyLine.SETRANGE(Type, lrecAssemblyLine.Type::Item);
        lrecAssemblyLine.SETRANGE("No.", trecDShipPackLineBuffer."Item No.");
        lrecAssemblyLine.SETRANGE("Variant Code", trecDShipPackLineBuffer."Variant Code");
        IF ( lrecAssemblyLine.FINDFIRST ) THEN
          liSourceRefNo := lrecAssemblyLine."Line No.";
        liSourceType := DATABASE::"Assembly Line";
      END;

      lrecResEntry.SETRANGE("Item No.", lcodItemNo);
      lrecResEntry.SETRANGE("Source ID", lcodSourceID);
      lrecResEntry.SETRANGE("Source Ref. No.", liSourceRefNo);
      lrecResEntry.SETRANGE("Source Type", liSourceType);
      lrecResEntry.SETRANGE("Reservation Status", lrecResEntry."Reservation Status"::Surplus);
      lrecResEntry.SETRANGE(Positive, FALSE);

      IF ( lrecResEntry.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          createEntry(lrecResEntry."Serial No.", FALSE);
        UNTIL(lrecResEntry.NEXT=0);
      END;

      sLastScan := lsScanValue;
      updateLastScan;
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
    }
    END.
  }
}

