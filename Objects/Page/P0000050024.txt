OBJECT Page 50024 test
{
  OBJECT-PROPERTIES
  {
    Date=07/01/20;
    Time=12:00:00 AM;
    Modified=Yes;
    Version List=TPZ000.00.00;
  }
  PROPERTIES
  {
    ActionList=ACTIONS
    {
      { 1000000001;  ;ActionContainer;
                      Name=Gen;
                      ActionContainerType=NewDocumentItems }
      { 1000000002;1 ;Action    ;
                      Name=Put SO in Job Queue;
                      OnAction=VAR
                                 SalesSetup@1000000008 : Record 311;
                                 JobQueueEntry@1000000007 : Record 472;
                                 ShippingAgent@1000000006 : Record 291;
                                 Division@1000000005 : Record 51001;
                                 RecRef@1000000004 : RecordRef;
                                 TempInvoice@1000000003 : Boolean;
                                 TempRcpt@1000000002 : Boolean;
                                 TempShip@1000000001 : Boolean;
                                 Location@1000000000 : Record 14;
                               BEGIN
                                 SalesHeader.GET(SalesHeader."Document Type"::Order, 'SO1398784');
                                 WITH SalesHeader DO BEGIN
                                  TempInvoice := Invoice;
                                   TempRcpt := Receive;
                                   TempShip := Ship;
                                   IF Status = Status::Open THEN
                                     CODEUNIT.RUN(CODEUNIT::"Release Sales Document",SalesHeader);
                                   Invoice := TempInvoice;
                                   Receive := TempRcpt;
                                   Ship := TempShip;

                                   IF ("Posting Date" = 0D) OR ("Posting Date" < WORKDATE) THEN BEGIN
                                     IF ShippingAgent.GET("Shipping Agent Code") AND
                                        (ShippingAgent.Type = ShippingAgent.Type::"Local")
                                     THEN BEGIN
                                       "Posting Date" := CALCDATE('+1D',WORKDATE);
                                       IF DATE2DWY(TODAY,1) = 5 THEN
                                         "Posting Date" :=  CALCDATE('+2D',"Posting Date");
                                     END ELSE
                                       "Posting Date" := WORKDATE;
                                   END;

                                   "Job Queue Status" := "Job Queue Status"::"Scheduled for Posting";
                                   "Job Queue Entry ID" := CREATEGUID;
                                   MODIFY;

                                   //UpdateWsheShipmentPostingDate("No.","Posting Date");

                                   RecRef.GETTABLE(SalesHeader);
                                   JobQueueEntry.ID := "Job Queue Entry ID";
                                   JobQueueEntry."Object Type to Run" := JobQueueEntry."Object Type to Run"::Codeunit;
                                   JobQueueEntry."Object ID to Run" := CODEUNIT::"Whse. Sales Post via Job Queue";
                                   JobQueueEntry."Record ID to Process" := RecRef.RECORDID;
                                   JobQueueEntry."Job Queue Category Code" := SalesSetup."Job Queue Category Code";
                                   // Set Timeout to prevent the Job Queue from hanging (eg. as a result of a printer dialog).
                                   JobQueueEntry."Timeout (sec.)" := 7200;
                                     JobQueueEntry."Earliest Start Date/Time" := CREATEDATETIME(TODAY + 1,TIME);
                                   JobQueueEntry.Priority := SalesSetup."Job Q. Prio. for P. from Whse.";
                                   //<TPZ1559>
                                   {IF Location.GET("Location Code") THEN BEGIN
                                     IF Location."Post from Whse. Start Time" <> 0T THEN
                                       JobQueueEntry."Earliest Start Date/Time" := CREATEDATETIME(TODAY,Location."Post from Whse. Start Time");
                                   END;}
                                   //</TPZ1559>
                                   JobQueueEntry.Description :=
                                     COPYSTR(STRSUBSTNO('',SalesHeader."Document Type",SalesHeader."No."),1,MAXSTRLEN(JobQueueEntry.Description));
                                   CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry);
                                 END;
                               END;
                                }
      { 1000000003;1 ;Action    ;
                      Name=Print Zebra;
                      OnAction=VAR
                                 lt_Inspection@1000000023 : Text;
                                 lb_PInspection@1000000022 : Boolean;
                                 lb_CrossDocks@1000000021 : Boolean;
                                 li_Count@1000000020 : Integer;
                                 li_Count2@1000000019 : Integer;
                                 li_StartY@1000000018 : Integer;
                                 li_NeedNewLabels@1000000017 : Integer;
                                 lr_PDAConfig@1000000025 : Record 23044504;
                                 lr_ActivityHeader@1000000024 : Record 5766;
                                 lc_PONo@1000000016 : Code[20];
                                 lr_Vendor@1000000015 : Record 23;
                                 lr_Item@1000000014 : Record 27;
                                 lr_WhseCrossDockOpportunity@1000000013 : Record 5768;
                                 lr_WhseCrossDockOppHistory@1000000012 : Record 50024;
                                 ltr_WhseCrossDockOpportunityTemp@1000000011 : TEMPORARY Record 5768;
                                 lr_Location@1000000010 : Record 14;
                                 lr_PL@1000000009 : Record 39;
                                 lr_PurchPrice@1000000008 : Record 7012;
                                 lr_WhseActLine@1000000007 : Record 5767;
                                 lr_WhseActHeader@1000000006 : Record 5766;
                                 lr_PostedWhsRcptHeader@1000000005 : Record 7318;
                                 wHShell@1000000004 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{72C24DD5-D70A-438B-8A42-98424B88AFB8}:'Windows Script Host Object Model'.WshShell";
                                 TcpClient@1000000003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.Sockets.TcpClient";
                                 StreamWriter@1000000002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamWriter";
                                 Encoding@1000000001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
                                 Char@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Char";
                               BEGIN
                                 //kvb VSO2039 3/23/18 ->>>
                                 TcpClient := TcpClient.TcpClient();
                                 TcpClient.Connect('10.10.201.136', 6101);

                                 // Create instance of StreamWriter class and set Encoding
                                 StreamWriter := StreamWriter.StreamWriter(TcpClient.GetStream(), Encoding.UTF8);

                                 // Create the commands and data to send to the printer
                                 StreamWriter.WriteLine('^XA');
                                 //PO&Put-Away Doc No.
                                 StreamWriter.WriteLine('^FO150,100^ADRN,24,10^FD^FDPO# ' + 'PO#' + '^FS');
                                 StreamWriter.WriteLine('^FO050,50^BCR,100,Y,N^FD' + 'ACHdrNo' + '^FS');
                                 //vendor
                                 StreamWriter.WriteLine('^FO100,50^ADRN,24,10^FD');
                                 StreamWriter.WriteLine('^FDVendor ' +'^FS');
                                 StreamWriter.WriteLine('^XZ');

                                 StreamWriter.Close();
                                 TcpClient.Close();
                               END;
                                }
      { 1000000004;1 ;Action    ;
                      Name=test;
                      OnAction=VAR
                                 lr_LPH@1000000000 : Record 23044505;
                               BEGIN
                                 lr_LPH.GET('LP11863');
                                 MESSAGE(COPYSTR(lr_LPH.Description, 1, 40));
                                 MESSAGE(COPYSTR(lr_LPH.Description, 41, 80));
                                 MESSAGE(COPYSTR(lr_LPH.Description, 81, 120));
                                 MESSAGE(COPYSTR(lr_LPH.Description, 121, 160));
                                 MESSAGE(COPYSTR(lr_LPH.Description, 161, 200));
                               END;
                                }
      { 1000000005;1 ;Action    ;
                      Name=Print License Plate;
                      OnAction=VAR
                                 PrintExt@1000000000 : Codeunit 50032;
                                 pr_PDAConfig@1000000001 : Record 23044504;
                               BEGIN
                                 pr_PDAConfig.GET('1REC2');

                                 PrintExt.GlobalPrintLicensePlate(pr_PDAConfig,'LP06000',0);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1000000000;;Container;
                Name=Gen;
                ContainerType=ContentArea }

  }
  CODE
  {
    VAR
      SalesHeader@1000000000 : Record 36;
      ExeName@1000000001 : TextConst 'ENU=C:\temp\LabelPrintConsleApp.exe %1';
      InspText@1000000002 : TextConst 'ENU=INSP.';

    BEGIN
    {
      kvb created 12/8/17
    }
    END.
  }
}

