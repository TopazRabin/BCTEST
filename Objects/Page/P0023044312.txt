OBJECT Page 23044312 IWX Custom Filter Builder
{
  OBJECT-PROPERTIES
  {
    Date=04/25/19;
    Time=[ 2:22:08 PM];
    Version List=IWX2.4.7684.0;
  }
  PROPERTIES
  {
    Editable=Yes;
    CaptionML=[ENU=Filter Builder;
               ESM=Generador de filtro;
               FRC=Constructeur de Filtre;
               ENC=Filter Builder];
    LinksAllowed=No;
    SourceTable=Table823;
    PageType=Worksheet;
    SourceTableTemporary=Yes;
    ShowFilter=No;
    OnInit=BEGIN
             setTableFilter;
           END;

    ActionList=ACTIONS
    {
      { 1000000007;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1000000008;1 ;Action    ;
                      Name=getView;
                      CaptionML=[ENU=Show Results;
                                 ESM=Mostrar resultados;
                                 FRC=Montrer les r‚sultats;
                                 ENC=Show Results];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ViewPage;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 lrrRecRef@1000000000 : RecordRef;
                                 lvVariant@1000000001 : Variant;
                               BEGIN
                                 lrrRecRef.OPEN(nTableNo);
                                 lrrRecRef.SETVIEW(generateTableView(TRUE));
                                 lvVariant := lrrRecRef;
                                 PAGE.RUNMODAL(0, lvVariant);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1000000000;0;Container;
                ContainerType=ContentArea }

    { 1000000004;1;Field  ;
                Name=nTableNo;
                CaptionML=[ENU=Table Name;
                           ESM=Nombre del Tabla;
                           FRC=Nom de la Table;
                           ENC=Table Name];
                ToolTipML=ENU=The table to filter on;
                SourceExpr=txtTableName;
                Enabled=TRUE;
                Editable=FALSE;
                ColumnSpan=3;
                ShowCaption=Yes }

    { 1000000005;1;Group  ;
                GroupType=Group }

    { 1000000001;2;Group  ;
                GroupType=Repeater }

    { 1000000002;3;Field  ;
                ToolTipML=ENU=The field number;
                SourceExpr=Name;
                TableRelation=Field.No.;
                OnValidate=BEGIN
                             setTableFilter();

                             recField.SETRANGE("No.");
                             recField.SETRANGE(FieldName, Name);
                             IF NOT recField.FINDSET(FALSE,FALSE) THEN BEGIN
                               recField.SETFILTER(FieldName, Name+'*');
                               IF NOT ( recField.FINDSET(FALSE,FALSE) ) THEN BEGIN
                                 recField.SETFILTER( FieldName, STRSUBSTNO('*%1*', Name ));
                                 IF ( recField.FINDSET(FALSE,FALSE) ) THEN;
                               END;
                               IF ( recField.COUNT > 1 ) THEN BEGIN
                                 // if there is more than one match from a loose lookup based on what they have typed, then
                                 // find more specific details
                                 IF PAGE.RUNMODAL(PAGE::"Field List", recField) = ACTION::LookupOK THEN;
                               END;
                             END;//if

                             IF ( recField.COUNT >= 1 ) THEN BEGIN
                               Name := recField.FieldName;
                               ID := recField."No.";
                             END ELSE BEGIN
                               Name := 'Invalid';
                               ID := -1;
                             END;
                           END;

                OnLookup=BEGIN
                           setTableFilter;

                           IF PAGE.RUNMODAL(PAGE::"Field List", recField) = ACTION::LookupOK THEN BEGIN
                             Text :=recField.FieldName;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 1000000003;3;Field  ;
                ToolTipML=ENU=The filter value;
                SourceExpr=Value;
                OnLookup=BEGIN
                           doFieldFilterLookup;
                         END;
                          }

  }
  CODE
  {
    VAR
      nTableNo@1000000000 : Integer;
      recField@1000000001 : Record 2000000041;
      txtTableName@1000000002 : Text;
      tcTableName@1000000004 : TextConst 'ENC=%1';

    LOCAL PROCEDURE setTableFilter@1000000053();
    BEGIN
      recField.RESET;
      recField.SETRANGE(TableNo, nTableNo);
      recField.SETFILTER(Class, '%1|%2', recField.Class::Normal, recField.Class::FlowField);
    END;

    PROCEDURE setTableNo@1000000000(pnTableNo@1000000000 : Integer);
    VAR
      lrecAllObject@1000000001 : Record 2000000038;
    BEGIN
      nTableNo := pnTableNo;
      lrecAllObject.SETRANGE("Object Type", lrecAllObject."Object Type"::Table);
      lrecAllObject.SETRANGE("Object ID", nTableNo);
      IF lrecAllObject.FINDFIRST THEN
        txtTableName := STRSUBSTNO(tcTableName, lrecAllObject."Object Name")
      ELSE
        txtTableName := '';
    END;

    LOCAL PROCEDURE doFieldFilterLookup@1000000039();
    VAR
      lnOption@1000000000 : Integer;
      lrrRecRef@1000000001 : RecordRef;
      lvVariant@1000000002 : Variant;
      lfrFldRef@1000000003 : FieldRef;
      ltOptionString@1000000004 : Text;
    BEGIN
      IF ID = 0 THEN
        EXIT;

      setTableFilter;
      recField.SETRANGE("No.", ID);
      recField.FINDFIRST;

      CASE recField."Type Name" OF
        'Option': BEGIN
          lrrRecRef.OPEN(recField.TableNo);
          lfrFldRef := lrrRecRef.FIELD(recField."No.");
          ltOptionString := lfrFldRef.OPTIONSTRING;
          lrrRecRef.CLOSE;
          lnOption := STRMENU(ltOptionString);
          IF lnOption>0 THEN
            Value := SELECTSTR(lnOption, ltOptionString);
        END;
        'Boolean': BEGIN
          lnOption := STRMENU('No,Yes');
          IF lnOption>0 THEN
            Value := SELECTSTR(lnOption, 'No,Yes');
        END;
        ELSE BEGIN
          //<IW author="td" date="08/02/2017" version="DMS16.08"  issue="3325">
          // fixed crashing on lookup by adding missing begins/ends.
          IF recField.RelationTableNo<>0 THEN BEGIN
            lrrRecRef.OPEN(recField.RelationTableNo);

            lvVariant := lrrRecRef;
            IF PAGE.RUNMODAL(0, lvVariant) = ACTION::LookupOK THEN BEGIN
              IF recField.RelationFieldNo<>0 THEN
                Value := lrrRecRef.FIELD(recField."No.").VALUE
              ELSE
                Value := lrrRecRef.FIELDINDEX(1).VALUE;
             END;
          END;
          lrrRecRef.CLOSE;
        END;
      END;//Case
    END;

    LOCAL PROCEDURE doFieldFilterValidate@1000000056();
    BEGIN
      // validates that manually chosen options/references are OK

      // Will be same basic code as doFieldFilterLookup
    END;

    PROCEDURE generateTableView@1000000057(pbIncludeWhereText@1000000002 : Boolean) rtxtView : Text;
    VAR
      ltxtSeparator@1000000000 : Text;
      ltcView@1000000001 : TextConst 'ENC="%1 %2=FILTER(%3)"';
    BEGIN
      SETRANGE(ID, 0);
      DELETEALL;
      RESET;
      IF FINDSET THEN
        REPEAT
          IF Value<>'' THEN BEGIN
            rtxtView += STRSUBSTNO(ltcView, ltxtSeparator, Name, Value);
            ltxtSeparator := ',';
          END;//if
        UNTIL NEXT = 0;

      IF pbIncludeWhereText AND (rtxtView<>'') THEN
        rtxtView := 'WHERE('+rtxtView+')';
    END;

    PROCEDURE buildFromTableView@1000000006(ptxtTableView@1000000000 : Text);
    VAR
      lrrefTable@1000000001 : RecordRef;
      liFieldIterator@1000000002 : Integer;
      liMaxFields@1000000003 : Integer;
      lfrefField@1000000004 : FieldRef;
      ltxtFilter@1000000005 : Text;
    BEGIN
      // Allow building up a filter based on the existing table view definition.
      // Only works with basic table views
      lrrefTable.OPEN( nTableNo );
      IF (ptxtTableView <> '') AND (STRPOS(ptxtTableView, 'WHERE(') = 0) THEN
        ptxtTableView := 'WHERE('+ptxtTableView+')';

      lrrefTable.SETVIEW( ptxtTableView );
      liMaxFields  := lrrefTable.FIELDCOUNT;
      FOR liFieldIterator := 1 TO liMaxFields DO BEGIN
        lfrefField := lrrefTable.FIELDINDEX(liFieldIterator);
        ltxtFilter := lfrefField.GETFILTER();
        IF ( ltxtFilter <> '' ) THEN BEGIN
          Rec.INIT();
          Rec.ID := lfrefField.NUMBER;
          Rec.Name := lfrefField.NAME;
          Rec.Value := ltxtFilter;
          Rec.INSERT();
        END;
      END;

      lrrefTable.CLOSE;
    END;

    PROCEDURE buildFilter@1000000025(piTableNo@1000000000 : Integer;pbIncludeWhereText@1000000003 : Boolean;VAR ptxtValue@1000000002 : Text);
    VAR
      lpgFilterBuilder@1000000001 : Page 23044312;
    BEGIN
      // Builds filter for specified table

      IF ( piTableNo <> 0) THEN BEGIN
        setTableNo(piTableNo);
        buildFromTableView( ptxtValue );
        IF FINDFIRST THEN ;
        CurrPage.LOOKUPMODE(TRUE);
        IF CurrPage.RUNMODAL = ACTION::LookupOK THEN
          ptxtValue := generateTableView(pbIncludeWhereText);
      END;
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Dynamic Manufacturing Solutions Inc 2016.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
    }
    END.
  }
}

