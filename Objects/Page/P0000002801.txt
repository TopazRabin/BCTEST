OBJECT Page 2801 Native - Customer Entity
{
  OBJECT-PROPERTIES
  {
    Date=10/22/20;
    Time=[ 4:57:39 AM];
    Version List=NAVW111.00;
  }
  PROPERTIES
  {
    CaptionML=[@@@={Locked};
               ENU=invoicingCustomers;
               ESM=invoicingCustomers;
               FRC=invoicingCustomers;
               ENC=invoicingCustomers];
    SourceTable=Table18;
    DelayedInsert=Yes;
    PageType=List;
    OnOpenPage=BEGIN
                 BINDSUBSCRIPTION(NativeAPILanguageHandler);
                 TranslateContactIdFilterToCustomerNoFilter;
                 ;ESACC_EasySecurity(TRUE);
               END;

    OnAfterGetRecord=BEGIN
                       SetCalculatedFields;
                     END;

    OnNewRecord=BEGIN
                  ClearCalculatedFields;
                END;

    OnInsertRecord=VAR
                     Customer@1002 : Record 18;
                     GraphMgtCustomer@1000 : Codeunit 5471;
                     GraphMgtGeneralTools@1004 : Codeunit 5465;
                     RecRef@1005 : RecordRef;
                   BEGIN
                     IF Name = '' THEN
                       ERROR(NotProvidedCustomerNameErr);

                     IF NOT CustomerCreatedFromGraph THEN BEGIN
                       Customer.SETRANGE("No.","No.");
                       IF NOT Customer.ISEMPTY THEN
                         INSERT;

                       INSERT(TRUE);
                     END;

                     GraphMgtCustomer.ProcessComplexTypes(Rec,PaymentTermsJSON,ShipmentMethodJSON,PaymentMethodJSON,PostalAddressJSON);

                     RecRef.GETTABLE(Rec);
                     GraphMgtGeneralTools.ProcessNewRecordFromAPI(RecRef,TempFieldSet,CURRENTDATETIME);
                     RecRef.SETTABLE(Rec);

                     MODIFY(TRUE);

                     SetCalculatedFields;
                     EXIT(FALSE);
                   END;

    OnModifyRecord=VAR
                     Customer@1001 : Record 18;
                     GraphMgtGeneralTools@1000 : Codeunit 5465;
                     GraphMgtCustomer@1002 : Codeunit 5471;
                   BEGIN
                     IF NOT CustomerCreatedFromGraph AND (xRec.Id <> Id) THEN
                       GraphMgtGeneralTools.ErrorIdImmutable;

                     Customer.SETRANGE(Id,Id);
                     Customer.FINDFIRST;

                     GraphMgtCustomer.ProcessComplexTypes(Rec,PaymentTermsJSON,ShipmentMethodJSON,PaymentMethodJSON,PostalAddressJSON);

                     IF "No." = Customer."No." THEN
                       MODIFY(TRUE)
                     ELSE BEGIN
                       Customer.TRANSFERFIELDS(Rec,FALSE);
                       Customer.RENAME("No.");
                       TRANSFERFIELDS(Customer);
                     END;

                     SetCalculatedFields;
                   END;

    ODataKeyFields=Id;
  }
  CONTROLS
  {
    { 23  ;0   ;Container ;
                ContainerType=ContentArea }

    { 22  ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 21  ;2   ;Field     ;
                Name=id;
                CaptionML=[@@@={Locked};
                           ENU=Id;
                           ESM=Id;
                           FRC=Id;
                           ENC=Id];
                ApplicationArea=#All;
                SourceExpr=Id;
                Visible=ESACC_F8000_Visible;
                Editable=ESACC_F8000_Editable;
                HideValue=ESACC_F8000_HideValue }

    { 20  ;2   ;Field     ;
                Name=number;
                CaptionML=[@@@={Locked};
                           ENU=Number;
                           ESM=Number;
                           FRC=Number;
                           ENC=Number];
                ApplicationArea=#All;
                SourceExpr="No.";
                Visible=ESACC_F1_Visible;
                Editable=ESACC_F1_Editable;
                HideValue=ESACC_F1_HideValue }

    { 10  ;2   ;Field     ;
                Name=graphContactId;
                CaptionML=[ENU=graphContactId;
                           ESM=graphContactId;
                           FRC=graphContactId;
                           ENC=graphContactId];
                ApplicationArea=#All;
                SourceExpr="Contact Graph Id";
                Visible=ESACC_F9006_Visible;
                Editable=ESACC_F9006_Editable;
                HideValue=ESACC_F9006_HideValue;
                OnValidate=BEGIN
                             FindOrCreateCustomer("Contact Graph Id");
                           END;
                            }

    { 27  ;2   ;Field     ;
                Name=contactId;
                CaptionML=[@@@={Locked};
                           ENU=contactId;
                           ESM=contactId;
                           FRC=contactId;
                           ENC=contactId];
                ToolTipML=[ENU=Specifies the contact Id from exchange.;
                           ESM=Especifica el id. de contacto de Exchange.;
                           FRC=Sp‚cifie le code contact depuis Exchange.;
                           ENC=Specifies the contact Id from exchange.];
                ApplicationArea=#All;
                SourceExpr="Contact ID";
                Visible=ESACC_F9005_Visible;
                Editable=FALSE;
                HideValue=ESACC_F9005_HideValue;
                OnValidate=BEGIN
                             FindOrCreateCustomer("Contact ID");
                           END;
                            }

    { 19  ;2   ;Field     ;
                Name=displayName;
                CaptionML=[@@@={Locked};
                           ENU=DisplayName;
                           ESM=DisplayName;
                           FRC=DisplayName;
                           ENC=DisplayName];
                ApplicationArea=#All;
                SourceExpr=Name;
                Visible=ESACC_F2_Visible;
                Editable=ESACC_F2_Editable;
                HideValue=ESACC_F2_HideValue;
                OnValidate=BEGIN
                             IF Name = '' THEN
                               ERROR(BlankCustomerNameErr);
                             RegisterFieldSet(FIELDNO(Name));
                           END;
                            }

    { 18  ;2   ;Field     ;
                Name=type;
                CaptionML=[@@@={Locked};
                           ENU=type;
                           ESM=type;
                           FRC=type;
                           ENC=type];
                ApplicationArea=#All;
                SourceExpr="Contact Type";
                Visible=ESACC_F5050_Visible;
                Editable=ESACC_F5050_Editable;
                HideValue=ESACC_F5050_HideValue;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Contact Type"));
                           END;
                            }

    { 17  ;2   ;Field     ;
                Name=address;
                CaptionML=[@@@={Locked};
                           ENU=address;
                           ESM=address;
                           FRC=address;
                           ENC=address];
                ToolTipML=[ENU=Specifies the address for the customer.;
                           ESM=Especifica la direcci¢n del cliente.;
                           FRC=Sp‚cifie l'adresse du client.;
                           ENC=Specifies the address for the customer.];
                ApplicationArea=#All;
                SourceExpr=PostalAddressJSON;
                ODataEDMType=POSTALADDRESS }

    { 16  ;2   ;Field     ;
                Name=phoneNumber;
                CaptionML=[@@@={Locked};
                           ENU=PhoneNumber;
                           ESM=PhoneNumber;
                           FRC=PhoneNumber;
                           ENC=PhoneNumber];
                ApplicationArea=#All;
                SourceExpr="Phone No.";
                Visible=ESACC_F9_Visible;
                Editable=ESACC_F9_Editable;
                HideValue=ESACC_F9_HideValue;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Phone No."));
                           END;
                            }

    { 15  ;2   ;Field     ;
                Name=email;
                CaptionML=[@@@={Locked};
                           ENU=Email;
                           ESM=Email;
                           FRC=Email;
                           ENC=Email];
                ApplicationArea=#All;
                SourceExpr="E-Mail";
                Visible=ESACC_F102_Visible;
                Editable=ESACC_F102_Editable;
                HideValue=ESACC_F102_HideValue;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("E-Mail"));
                           END;
                            }

    { 14  ;2   ;Field     ;
                Name=website;
                CaptionML=[@@@={Locked};
                           ENU=Website;
                           ESM=Website;
                           FRC=Website;
                           ENC=Website];
                ApplicationArea=#All;
                SourceExpr="Home Page";
                Visible=ESACC_F103_Visible;
                Editable=ESACC_F103_Editable;
                HideValue=ESACC_F103_HideValue;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Home Page"));
                           END;
                            }

    { 13  ;2   ;Field     ;
                Name=taxLiable;
                CaptionML=[@@@={Locked};
                           ENU=TaxLiable;
                           ESM=TaxLiable;
                           FRC=TaxLiable;
                           ENC=TaxLiable];
                ApplicationArea=#All;
                SourceExpr="Tax Liable";
                Visible=ESACC_F109_Visible;
                Editable=ESACC_F109_Editable;
                HideValue=ESACC_F109_HideValue;
                OnValidate=BEGIN
                             IF IsUsingVAT THEN
                               EXIT;

                             RegisterFieldSet(FIELDNO("Tax Liable"));
                           END;
                            }

    { 12  ;2   ;Field     ;
                Name=taxAreaId;
                CaptionML=[@@@={Locked};
                           ENU=taxAreaId;
                           ESM=taxAreaId;
                           FRC=taxAreaId;
                           ENC=taxAreaId];
                ApplicationArea=#All;
                SourceExpr="Tax Area ID";
                Visible=ESACC_F9003_Visible;
                Editable=ESACC_F9003_Editable;
                HideValue=ESACC_F9003_HideValue;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Tax Area ID"));
                             IF IsUsingVAT THEN
                               RegisterFieldSet(FIELDNO("Tax Area Code"))
                             ELSE
                               RegisterFieldSet(FIELDNO("VAT Bus. Posting Group"));
                           END;
                            }

    { 11  ;2   ;Field     ;
                Name=taxAreaDisplayName;
                CaptionML=[@@@={Locked};
                           ENU=taxAreaDisplayName;
                           ESM=taxAreaDisplayName;
                           FRC=taxAreaDisplayName;
                           ENC=taxAreaDisplayName];
                ToolTipML=[ENU=Specifies the display name of the tax area.;
                           ESM=Especifica el nombre para mostrar del  rea de impuestos.;
                           FRC=Sp‚cifie le nom d'affichage de la r‚gion fiscale.;
                           ENC=Specifies the display name of the tax area.];
                ApplicationArea=#All;
                SourceExpr=TaxAreaDisplayName;
                Editable=FALSE }

    { 26  ;2   ;Field     ;
                Name=taxRegistrationNumber;
                CaptionML=[@@@={Locked};
                           ENU=taxRegistrationNumber;
                           ESM=taxRegistrationNumber;
                           FRC=taxRegistrationNumber;
                           ENC=taxRegistrationNumber];
                ApplicationArea=#All;
                SourceExpr="VAT Registration No.";
                Visible=ESACC_F86_Visible;
                Editable=ESACC_F86_Editable;
                HideValue=ESACC_F86_HideValue;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("VAT Registration No."));
                           END;
                            }

    { 25  ;2   ;Field     ;
                Name=paymentTermsId;
                CaptionML=[@@@={Locked};
                           ENU=PaymentTermsId;
                           ESM=PaymentTermsId;
                           FRC=PaymentTermsId;
                           ENC=PaymentTermsId];
                ApplicationArea=#All;
                SourceExpr="Payment Terms Id";
                Visible=ESACC_F8002_Visible;
                Editable=ESACC_F8002_Editable;
                HideValue=ESACC_F8002_HideValue;
                OnValidate=BEGIN
                             IF "Payment Terms Id" = BlankGUID THEN
                               "Payment Terms Code" := ''
                             ELSE BEGIN
                               PaymentTerms.SETRANGE(Id,"Payment Terms Id");
                               IF NOT PaymentTerms.FINDFIRST THEN
                                 ERROR(PaymentTermsIdDoesNotMatchAPaymentTermsErr);

                               "Payment Terms Code" := PaymentTerms.Code;
                             END;

                             RegisterFieldSet(FIELDNO("Payment Terms Id"));
                             RegisterFieldSet(FIELDNO("Payment Terms Code"));
                             PaymentTermsJSON := GraphMgtCustomer.PaymentTermsToJSON("Payment Terms Code");
                           END;
                            }

    { 24  ;2   ;Field     ;
                Name=paymentTerms;
                CaptionML=[@@@={Locked};
                           ENU=PaymentTerms;
                           ESM=PaymentTerms;
                           FRC=PaymentTerms;
                           ENC=PaymentTerms];
                ToolTipML=[ENU=Specifies the Payment Terms for the Customer.;
                           ESM=Especifica las condiciones de pago del cliente.;
                           FRC=Sp‚cifie les modalit‚s de paiement du client.;
                           ENC=Specifies the Payment Terms for the Customer.];
                ApplicationArea=#All;
                SourceExpr=PaymentTermsJSON;
                OnValidate=BEGIN
                             IF IsFieldSet(FIELDNO("Payment Terms Id")) THEN BEGIN
                               PaymentTermsJSON := GraphMgtCustomer.PaymentTermsToJSON("Payment Terms Code");
                               EXIT;
                             END;

                             GraphMgtCustomer.UpdatePaymentTerms(PaymentTermsJSON,Rec);

                             IF PaymentTerms.Code <> '' THEN BEGIN
                               IF PaymentTerms.Code <> "Payment Terms Code" THEN
                                 ERROR(PaymentTermsValuesDontMatchErr);
                               EXIT;
                             END;

                             IF "Payment Terms Code" = '' THEN
                               "Payment Terms Id" := BlankGUID
                             ELSE BEGIN
                               IF NOT PaymentTerms.GET("Payment Terms Code") THEN
                                 ERROR(PaymentTermsCodeDoesNotMatchAPaymentTermsErr);

                               "Payment Terms Id" := PaymentTerms.Id;
                             END;

                             RegisterFieldSet(FIELDNO("Payment Terms Id"));
                             RegisterFieldSet(FIELDNO("Payment Terms Code"));
                           END;

                ODataEDMType=PAYMENTTERMSTYPE }

    { 9   ;2   ;Field     ;
                Name=shipmentMethodId;
                CaptionML=[@@@={Locked};
                           ENU=ShipmentMethodId;
                           ESM=ShipmentMethodId;
                           FRC=ShipmentMethodId;
                           ENC=ShipmentMethodId];
                ApplicationArea=#All;
                SourceExpr="Shipment Method Id";
                Visible=ESACC_F8003_Visible;
                Editable=ESACC_F8003_Editable;
                HideValue=ESACC_F8003_HideValue;
                OnValidate=BEGIN
                             IF "Shipment Method Id" = BlankGUID THEN
                               "Shipment Method Code" := ''
                             ELSE BEGIN
                               ShipmentMethod.SETRANGE(Id,"Shipment Method Id");
                               IF NOT ShipmentMethod.FINDFIRST THEN
                                 ERROR(ShipmentMethodIdDoesNotMatchAShipmentMethodErr);

                               "Shipment Method Code" := ShipmentMethod.Code;
                             END;

                             RegisterFieldSet(FIELDNO("Shipment Method Id"));
                             RegisterFieldSet(FIELDNO("Shipment Method Code"));
                             ShipmentMethodJSON := GraphMgtCustomer.ShipmentMethodToJSON("Shipment Method Code");
                           END;
                            }

    { 8   ;2   ;Field     ;
                Name=shipmentMethod;
                CaptionML=[@@@={Locked};
                           ENU=ShipmentMethod;
                           ESM=ShipmentMethod;
                           FRC=ShipmentMethod;
                           ENC=ShipmentMethod];
                ToolTipML=[ENU=Specifies the Shipment Method for the Customer.;
                           ESM=Especifica el m‚todo de env¡o del cliente.;
                           FRC=Sp‚cifie le mode de transport du client.;
                           ENC=Specifies the Shipment Method for the Customer.];
                ApplicationArea=#All;
                SourceExpr=ShipmentMethodJSON;
                OnValidate=BEGIN
                             IF IsFieldSet(FIELDNO("Shipment Method Id")) THEN BEGIN
                               ShipmentMethodJSON := GraphMgtCustomer.ShipmentMethodToJSON("Shipment Method Code");
                               EXIT;
                             END;

                             GraphMgtCustomer.UpdateShipmentMethod(ShipmentMethodJSON,Rec);

                             IF ShipmentMethod.Code <> '' THEN BEGIN
                               IF ShipmentMethod.Code <> "Shipment Method Code" THEN
                                 ERROR(ShipmentMethodValuesDontMatchErr);
                               EXIT;
                             END;

                             IF "Shipment Method Code" = '' THEN
                               "Shipment Method Id" := BlankGUID
                             ELSE BEGIN
                               IF NOT ShipmentMethod.GET("Shipment Method Code") THEN
                                 ERROR(ShipmentMethodCodeDoesNotMatchAShipmentMethodErr);

                               "Shipment Method Id" := ShipmentMethod.Id;
                             END;

                             RegisterFieldSet(FIELDNO("Shipment Method Id"));
                             RegisterFieldSet(FIELDNO("Shipment Method Code"));
                           END;

                ODataEDMType=SHIPMENTMETHOD }

    { 7   ;2   ;Field     ;
                Name=paymentMethodId;
                CaptionML=[@@@={Locked};
                           ENU=PaymentMethodId;
                           ESM=PaymentMethodId;
                           FRC=PaymentMethodId;
                           ENC=PaymentMethodId];
                ApplicationArea=#All;
                SourceExpr="Payment Method Id";
                Visible=ESACC_F8004_Visible;
                Editable=ESACC_F8004_Editable;
                HideValue=ESACC_F8004_HideValue;
                OnValidate=BEGIN
                             IF "Payment Method Id" = BlankGUID THEN
                               "Payment Method Code" := ''
                             ELSE BEGIN
                               PaymentMethod.SETRANGE(Id,"Payment Method Id");
                               IF NOT PaymentMethod.FINDFIRST THEN
                                 ERROR(PaymentMethodIdDoesNotMatchAPaymentMethodErr);

                               "Payment Method Code" := PaymentMethod.Code;
                             END;

                             RegisterFieldSet(FIELDNO("Payment Method Id"));
                             RegisterFieldSet(FIELDNO("Payment Method Code"));

                             PaymentMethodJSON := GraphMgtCustomer.PaymentMethodToJSON("Payment Method Code");
                           END;
                            }

    { 6   ;2   ;Field     ;
                Name=paymentMethod;
                CaptionML=[@@@={Locked};
                           ENU=PaymentMethod;
                           ESM=PaymentMethod;
                           FRC=PaymentMethod;
                           ENC=PaymentMethod];
                ToolTipML=[ENU=Specifies the Payment Method for the Vendor.;
                           ESM=Especifica la forma de pago del proveedor.;
                           FRC=Sp‚cifie le mode de paiement du fournisseur.;
                           ENC=Specifies the Payment Method for the Vendor.];
                ApplicationArea=#All;
                SourceExpr=PaymentMethodJSON;
                OnValidate=BEGIN
                             IF IsFieldSet(FIELDNO("Payment Method Code")) THEN BEGIN
                               PaymentMethodJSON := GraphMgtCustomer.PaymentMethodToJSON("Payment Method Code");
                               EXIT;
                             END;

                             GraphMgtCustomer.UpdatePaymentMethod(PaymentMethodJSON,Rec);

                             IF PaymentMethod.Code <> '' THEN BEGIN
                               IF PaymentMethod.Code <> "Payment Method Code" THEN
                                 ERROR(PaymentMethodValuesDontMatchErr);
                               EXIT;
                             END;

                             IF "Payment Method Code" = '' THEN
                               "Payment Method Id" := BlankGUID
                             ELSE BEGIN
                               IF NOT PaymentMethod.GET("Payment Method Code") THEN
                                 ERROR(PaymentMethodCodeDoesNotMatchAPaymentMethodErr);

                               "Payment Method Id" := PaymentMethod.Id;
                             END;

                             RegisterFieldSet(FIELDNO("Payment Method Id"));
                             RegisterFieldSet(FIELDNO("Payment Method Code"));
                           END;

                ODataEDMType=PAYMENTMETHOD }

    { 5   ;2   ;Field     ;
                Name=balance;
                CaptionML=[@@@={Locked};
                           ENU=Balance;
                           ESM=Balance;
                           FRC=Balance;
                           ENC=Balance];
                ToolTipML=[ENU=Specifies the customer's balance.;
                           ESM=Especifica el saldo del cliente.;
                           FRC=Indique le solde du client.;
                           ENC=Specifies the customer's balance.];
                ApplicationArea=#All;
                SourceExpr=BalanceVar;
                Editable=FALSE }

    { 2   ;2   ;Field     ;
                Name=overdueAmount;
                CaptionML=[@@@={Locked};
                           ENU=overdueAmount;
                           ESM=overdueAmount;
                           FRC=overdueAmount;
                           ENC=overdueAmount];
                ToolTipML=[ENU=Specifies the amount that is overdue.;
                           ESM=Especifica el importe que ha vencido.;
                           FRC=Sp‚cifie le montant arriv‚ … ‚ch‚ance.;
                           ENC=Specifies the amount that is overdue.];
                ApplicationArea=#All;
                SourceExpr=OverdueAmount;
                Editable=FALSE }

    { 3   ;2   ;Field     ;
                Name=totalSalesExcludingTax;
                CaptionML=[@@@={Locked};
                           ENU=totalSalesExcludingTax;
                           ESM=totalSalesExcludingTax;
                           FRC=totalSalesExcludingTax;
                           ENC=totalSalesExcludingTax];
                ToolTipML=[ENU=Specifies the total sales excluding tax.;
                           ESM=Especifica el total de ventas sin incluir los impuestos.;
                           FRC=Sp‚cifie le total des ventes hors taxes.;
                           ENC=Specifies the total sales excluding tax.];
                ApplicationArea=#All;
                SourceExpr=SalesVar;
                Editable=FALSE }

    { 1   ;2   ;Field     ;
                Name=lastModifiedDateTime;
                CaptionML=[@@@={Locked};
                           ENU=LastModifiedDateTime;
                           ESM=LastModifiedDateTime;
                           FRC=LastModifiedDateTime;
                           ENC=LastModifiedDateTime];
                ApplicationArea=#All;
                SourceExpr="Last Modified Date Time";
                Visible=ESACC_F53_Visible;
                Editable=ESACC_F53_Editable;
                HideValue=ESACC_F53_HideValue }

    { 4   ;2   ;Part      ;
                Name=Coupons;
                CaptionML=[@@@={Locked};
                           ENU=Coupons;
                           ESM=Coupons;
                           FRC=Coupons;
                           ENC=Coupons];
                ApplicationArea=#All;
                SubPageLink=Customer Id=FIELD(Id);
                PagePartID=Page2815;
                PartType=Page }

  }
  CODE
  {
    VAR
      ESACC_ESFLADSMgt@14123801 : Codeunit 14123801;
      ESACC_F1_Visible@900000010 : Boolean INDATASET;
      ESACC_F1_Editable@900000011 : Boolean INDATASET;
      ESACC_F1_HideValue@900000012 : Boolean INDATASET;
      ESACC_F2_Visible@900000020 : Boolean INDATASET;
      ESACC_F2_Editable@900000021 : Boolean INDATASET;
      ESACC_F2_HideValue@900000022 : Boolean INDATASET;
      ESACC_F9_Visible@900000090 : Boolean INDATASET;
      ESACC_F9_Editable@900000091 : Boolean INDATASET;
      ESACC_F9_HideValue@900000092 : Boolean INDATASET;
      ESACC_F53_Visible@900000530 : Boolean INDATASET;
      ESACC_F53_Editable@900000531 : Boolean INDATASET;
      ESACC_F53_HideValue@900000532 : Boolean INDATASET;
      ESACC_F86_Visible@900000860 : Boolean INDATASET;
      ESACC_F86_Editable@900000861 : Boolean INDATASET;
      ESACC_F86_HideValue@900000862 : Boolean INDATASET;
      ESACC_F102_Visible@900001020 : Boolean INDATASET;
      ESACC_F102_Editable@900001021 : Boolean INDATASET;
      ESACC_F102_HideValue@900001022 : Boolean INDATASET;
      ESACC_F103_Visible@900001030 : Boolean INDATASET;
      ESACC_F103_Editable@900001031 : Boolean INDATASET;
      ESACC_F103_HideValue@900001032 : Boolean INDATASET;
      ESACC_F109_Visible@900001090 : Boolean INDATASET;
      ESACC_F109_Editable@900001091 : Boolean INDATASET;
      ESACC_F109_HideValue@900001092 : Boolean INDATASET;
      ESACC_F5050_Visible@900050500 : Boolean INDATASET;
      ESACC_F5050_Editable@900050501 : Boolean INDATASET;
      ESACC_F5050_HideValue@900050502 : Boolean INDATASET;
      ESACC_F8000_Visible@900080000 : Boolean INDATASET;
      ESACC_F8000_Editable@900080001 : Boolean INDATASET;
      ESACC_F8000_HideValue@900080002 : Boolean INDATASET;
      ESACC_F8002_Visible@900080020 : Boolean INDATASET;
      ESACC_F8002_Editable@900080021 : Boolean INDATASET;
      ESACC_F8002_HideValue@900080022 : Boolean INDATASET;
      ESACC_F8003_Visible@900080030 : Boolean INDATASET;
      ESACC_F8003_Editable@900080031 : Boolean INDATASET;
      ESACC_F8003_HideValue@900080032 : Boolean INDATASET;
      ESACC_F8004_Visible@900080040 : Boolean INDATASET;
      ESACC_F8004_Editable@900080041 : Boolean INDATASET;
      ESACC_F8004_HideValue@900080042 : Boolean INDATASET;
      ESACC_F9003_Visible@900090030 : Boolean INDATASET;
      ESACC_F9003_Editable@900090031 : Boolean INDATASET;
      ESACC_F9003_HideValue@900090032 : Boolean INDATASET;
      ESACC_F9005_Visible@900090050 : Boolean INDATASET;
      ESACC_F9005_Editable@900090051 : Boolean INDATASET;
      ESACC_F9005_HideValue@900090052 : Boolean INDATASET;
      ESACC_F9006_Visible@900090060 : Boolean INDATASET;
      ESACC_F9006_Editable@900090061 : Boolean INDATASET;
      ESACC_F9006_HideValue@900090062 : Boolean INDATASET;
      TempFieldSet@1003 : TEMPORARY Record 2000000041;
      PaymentTerms@1009 : Record 3;
      ShipmentMethod@1008 : Record 10;
      PaymentMethod@1007 : Record 289;
      NativeAPILanguageHandler@1022 : Codeunit 2850;
      GraphMgtCustomer@1019 : Codeunit 5471;
      PaymentMethodJSON@1002 : Text;
      PaymentTermsJSON@1000 : Text;
      PostalAddressJSON@1004 : Text;
      ShipmentMethodJSON@1001 : Text;
      TaxAreaDisplayName@1026 : Text;
      OverdueAmount@1005 : Decimal;
      BalanceVar@1020 : Decimal;
      SalesVar@1021 : Decimal;
      BlankGUID@1006 : GUID;
      PaymentTermsValuesDontMatchErr@1018 : TextConst '@@@={Locked};ENU=The payment terms values do not match to a specific Payment Terms.;ESM=The payment terms values do not match to a specific Payment Terms.;FRC=The payment terms values do not match to a specific Payment Terms.;ENC=The payment terms values do not match to a specific Payment Terms.';
      PaymentTermsIdDoesNotMatchAPaymentTermsErr@1017 : TextConst '@@@={Locked};ENU=The "paymentTermsId" does not match to a Payment Terms.;ESM=The "paymentTermsId" does not match to a Payment Terms.;FRC=The "paymentTermsId" does not match to a Payment Terms.;ENC=The "paymentTermsId" does not match to a Payment Terms.';
      PaymentTermsCodeDoesNotMatchAPaymentTermsErr@1016 : TextConst '@@@={Locked};ENU=The "paymentTermsCode" does not match to a Payment Terms.;ESM=The "paymentTermsCode" does not match to a Payment Terms.;FRC=The "paymentTermsCode" does not match to a Payment Terms.;ENC=The "paymentTermsCode" does not match to a Payment Terms.';
      ShipmentMethodValuesDontMatchErr@1015 : TextConst '@@@={Locked};ENU=The shipment method values do not match to a specific Shipment Method.;ESM=The shipment method values do not match to a specific Shipment Method.;FRC=The shipment method values do not match to a specific Shipment Method.;ENC=The shipment method values do not match to a specific Shipment Method.';
      ShipmentMethodIdDoesNotMatchAShipmentMethodErr@1014 : TextConst '@@@={Locked};ENU=The "shipmentMethodId" does not match to a Shipment Method.;ESM=The "shipmentMethodId" does not match to a Shipment Method.;FRC=The "shipmentMethodId" does not match to a Shipment Method.;ENC=The "shipmentMethodId" does not match to a Shipment Method.';
      ShipmentMethodCodeDoesNotMatchAShipmentMethodErr@1013 : TextConst '@@@={Locked};ENU=The "shipmentMethodCode" does not match to a Shipment Method.;ESM=The "shipmentMethodCode" does not match to a Shipment Method.;FRC=The "shipmentMethodCode" does not match to a Shipment Method.;ENC=The "shipmentMethodCode" does not match to a Shipment Method.';
      PaymentMethodValuesDontMatchErr@1012 : TextConst '@@@={Locked};ENU=The payment method values do not match to a specific Payment Method.;ESM=The payment method values do not match to a specific Payment Method.;FRC=The payment method values do not match to a specific Payment Method.;ENC=The payment method values do not match to a specific Payment Method.';
      PaymentMethodIdDoesNotMatchAPaymentMethodErr@1011 : TextConst '@@@={Locked};ENU=The "paymentMethodId" does not match to a Payment Method.;ESM=The "paymentMethodId" does not match to a Payment Method.;FRC=The "paymentMethodId" does not match to a Payment Method.;ENC=The "paymentMethodId" does not match to a Payment Method.';
      PaymentMethodCodeDoesNotMatchAPaymentMethodErr@1010 : TextConst '@@@={Locked};ENU=The "paymentMethodCode" does not match to a Payment Method.;ESM=The "paymentMethodCode" does not match to a Payment Method.;FRC=The "paymentMethodCode" does not match to a Payment Method.;ENC=The "paymentMethodCode" does not match to a Payment Method.';
      CannotFindContactErr@1023 : TextConst '@@@={Locked};ENU=Cannot find the contact for the given ID.;ESM=Cannot find the contact for the given ID.;FRC=Cannot find the contact for the given ID.;ENC=Cannot find the contact for the given ID.';
      CustomerCreatedFromGraph@1024 : Boolean;
      CannotFindCustomerErr@1025 : TextConst '@@@={Locked};ENU=Cannot find the customer for the given ID.;ESM=Cannot find the customer for the given ID.;FRC=Cannot find the customer for the given ID.;ENC=Cannot find the customer for the given ID.';
      NotProvidedCustomerNameErr@1027 : TextConst '@@@={Locked};ENU=A "displayName" must be provided.;ESM=A "displayName" must be provided.;FRC=A "displayName" must be provided.;ENC=A "displayName" must be provided.';
      BlankCustomerNameErr@1028 : TextConst '@@@={Locked};ENU=The blank "displayName" is not allowed.;ESM=The blank "displayName" is not allowed.;FRC=The blank "displayName" is not allowed.;ENC=The blank "displayName" is not allowed.';

    LOCAL PROCEDURE ESACC_EasySecurity@14123801(OpenObject@14123801 : Boolean);
    VAR
      SetFilters@14123802 : Codeunit 14123812;
      TempBoolean@14123803 : Boolean;
    BEGIN
      IF OpenObject THEN BEGIN
        SetFilters.Filter18(Rec,8,2801);

        TempBoolean := CurrPage.EDITABLE;
        IF ESACC_ESFLADSMgt.PageGeneral(18,2801,TempBoolean) THEN
          CurrPage.EDITABLE := TempBoolean;
      END;

      ESACC_ESFLADSMgt.PageControl(
        18,2801,0,1,
        ESACC_F1_Visible,ESACC_F1_Editable,ESACC_F1_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        18,2801,0,2,
        ESACC_F2_Visible,ESACC_F2_Editable,ESACC_F2_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        18,2801,0,9,
        ESACC_F9_Visible,ESACC_F9_Editable,ESACC_F9_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        18,2801,0,53,
        ESACC_F53_Visible,ESACC_F53_Editable,ESACC_F53_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        18,2801,0,86,
        ESACC_F86_Visible,ESACC_F86_Editable,ESACC_F86_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        18,2801,0,102,
        ESACC_F102_Visible,ESACC_F102_Editable,ESACC_F102_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        18,2801,0,103,
        ESACC_F103_Visible,ESACC_F103_Editable,ESACC_F103_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        18,2801,0,109,
        ESACC_F109_Visible,ESACC_F109_Editable,ESACC_F109_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        18,2801,0,5050,
        ESACC_F5050_Visible,ESACC_F5050_Editable,ESACC_F5050_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        18,2801,0,8000,
        ESACC_F8000_Visible,ESACC_F8000_Editable,ESACC_F8000_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        18,2801,0,8002,
        ESACC_F8002_Visible,ESACC_F8002_Editable,ESACC_F8002_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        18,2801,0,8003,
        ESACC_F8003_Visible,ESACC_F8003_Editable,ESACC_F8003_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        18,2801,0,8004,
        ESACC_F8004_Visible,ESACC_F8004_Editable,ESACC_F8004_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        18,2801,0,9003,
        ESACC_F9003_Visible,ESACC_F9003_Editable,ESACC_F9003_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        18,2801,0,9005,
        ESACC_F9005_Visible,ESACC_F9005_Editable,ESACC_F9005_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        18,2801,0,9006,
        ESACC_F9006_Visible,ESACC_F9006_Editable,ESACC_F9006_HideValue);

      ESACC_EasySecurityManual(OpenObject);
    END;

    LOCAL PROCEDURE ESACC_EasySecurityManual@14123811(OpenObject@14123811 : Boolean);
    BEGIN
    END;

    LOCAL PROCEDURE SetCalculatedFields@6();
    VAR
      TaxAreaBuffer@1001 : Record 5504;
      GraphMgtCustomer@1000 : Codeunit 5471;
    BEGIN
      PaymentTermsJSON := GraphMgtCustomer.PaymentTermsToJSON("Payment Terms Code");
      ShipmentMethodJSON := GraphMgtCustomer.ShipmentMethodToJSON("Shipment Method Code");
      PaymentMethodJSON := GraphMgtCustomer.PaymentMethodToJSON("Payment Method Code");
      PostalAddressJSON := GraphMgtCustomer.PostalAddressToJSON(Rec);

      OverdueAmount := CalcOverdueBalance;

      SETRANGE("Date Filter",0D,WORKDATE);
      CALCFIELDS("Sales (LCY)","Balance (LCY)");
      BalanceVar := "Balance (LCY)";
      SalesVar := "Sales (LCY)";

      SetContactId;
      TaxAreaDisplayName := TaxAreaBuffer.GetTaxAreaDisplayName("Tax Area ID");
    END;

    LOCAL PROCEDURE ClearCalculatedFields@10();
    BEGIN
      CLEAR(Id);
      CLEAR(PaymentTermsJSON);
      CLEAR(TaxAreaDisplayName);
      CLEAR(ShipmentMethodJSON);
      CLEAR(PaymentMethodJSON);
      CLEAR(PostalAddressJSON);
      CLEAR(OverdueAmount);
      CLEAR("Balance (LCY)");
      CLEAR("Sales (LCY)");
      CLEAR("Contact ID");
      TempFieldSet.DELETEALL;
    END;

    LOCAL PROCEDURE RegisterFieldSet@11(FieldNo@1000 : Integer);
    BEGIN
      IF IsFieldSet(FieldNo) THEN
        EXIT;

      TempFieldSet.INIT;
      TempFieldSet.TableNo := DATABASE::Customer;
      TempFieldSet.VALIDATE("No.",FieldNo);
      TempFieldSet.INSERT(TRUE);
    END;

    LOCAL PROCEDURE IsFieldSet@7(FieldNo@1000 : Integer) : Boolean;
    BEGIN
      EXIT(TempFieldSet.GET(DATABASE::Customer,FieldNo));
    END;

    LOCAL PROCEDURE SetContactId@1() : Boolean;
    VAR
      NewContact@1003 : Record 5050;
      GraphIntegrationRecord@1004 : Record 5451;
      IntegrationRecord@1005 : Record 5151;
      GraphIntContact@1000 : Codeunit 5461;
      GraphContactId@1001 : Text[250];
    BEGIN
      IF NOT GraphIntContact.FindGraphContactIdFromCustomer(GraphContactId,Rec,NewContact) THEN
        EXIT(FALSE);

      IntegrationRecord.SETRANGE("Record ID",NewContact.RECORDID);
      IF NOT IntegrationRecord.FINDFIRST THEN
        EXIT;

      IF NOT GraphIntegrationRecord.GET(GraphContactId,IntegrationRecord."Integration ID") THEN
        EXIT(FALSE);

      "Contact Graph Id" := GraphIntegrationRecord."Graph ID";
      EXIT(EVALUATE("Contact ID",GraphIntegrationRecord.XRMId));
    END;

    LOCAL PROCEDURE TranslateContactIdFilterToCustomerNoFilter@13();
    VAR
      GraphIntegrationRecord@1001 : Record 5451;
      NewContact@1002 : Record 5050;
      IntegrationRecord@1003 : Record 5151;
      ContactBusinessRelation@1005 : Record 5054;
      MarketingSetup@1006 : Record 5079;
      ContactIDFilter@1000 : Text;
    BEGIN
      ContactIDFilter := GETFILTER("Contact ID");
      IF ContactIDFilter <> '' THEN BEGIN
        SETFILTER("Contact ID",'');
        GraphIntegrationRecord.SETFILTER(XRMId,ContactIDFilter);
        GraphIntegrationRecord.FINDFIRST;
      END ELSE BEGIN
        ContactIDFilter := GETFILTER("Contact Graph Id");
        IF ContactIDFilter = '' THEN
          EXIT;

        SETFILTER("Contact Graph Id",'');
        GraphIntegrationRecord.SETFILTER("Graph ID",ContactIDFilter);
        GraphIntegrationRecord.FINDFIRST;
      END;

      IF NOT IntegrationRecord.GET(GraphIntegrationRecord."Integration ID") THEN
        EXIT;

      IF NOT NewContact.GET(IntegrationRecord."Record ID") THEN
        EXIT;

      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Customer);
      ContactBusinessRelation.SETRANGE("Contact No.",NewContact."No.");
      IF MarketingSetup.GET THEN
        ContactBusinessRelation.SETRANGE("Business Relation Code",MarketingSetup."Bus. Rel. Code for Customers");

      IF ContactBusinessRelation.FINDFIRST THEN
        SETRANGE("No.",ContactBusinessRelation."No.")
      ELSE
        ERROR(CannotFindCustomerErr);
    END;

    LOCAL PROCEDURE IsUsingVAT@3() : Boolean;
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      EXIT(GeneralLedgerSetup.UseVat);
    END;

    LOCAL PROCEDURE FindOrCreateCustomer@39(GraphContactID@1003 : Text[250]);
    VAR
      Customer@1001 : Record 18;
      NewContact@1002 : Record 5050;
      GraphIntContact@1000 : Codeunit 5461;
    BEGIN
      IF NOT GraphIntContact.FindOrCreateCustomerFromGraphContactSafe(GraphContactID,Customer,NewContact) THEN
        ERROR(CannotFindContactErr);

      TRANSFERFIELDS(Customer,TRUE);
      CustomerCreatedFromGraph := TRUE;
    END;

    BEGIN
    END.
  }
}

