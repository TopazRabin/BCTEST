OBJECT Page 14099309 E.D.I. XML Nodes Tree
{
  OBJECT-PROPERTIES
  {
    Date=12/28/17;
    Time=12:00:00 PM;
    Version List=SE0.60.18;
  }
  PROPERTIES
  {
    CaptionML=ENU=XML Nodes;
    SourceTable=Table14002354;
    DelayedInsert=Yes;
    PageType=List;
    AutoSplitKey=No;
    RefreshOnActivate=Yes;
    OnInit=BEGIN
             SegmentVisible := TRUE;
             "XML SegmentVisible" := TRUE;
             AttributeVisible := TRUE;
             "Node TextVisible" := TRUE;
             "Line NoVisible" := TRUE;
             "Parent LineNoVisible" := TRUE;
             ParentVisible := TRUE;
             "End ElementNameVisible" := TRUE;
           END;

    OnOpenPage=BEGIN
                 DocumentCaption := CurrPage.CAPTION;
                 IF EDIDocument.GET(
                   "Trade Partner No.","Navision Document","EDI Document No.",Version,Type)
                 THEN BEGIN
                   IF EDIDocument."XML Document" THEN BEGIN
                     "XML SegmentVisible" := TRUE;
                     AttributeVisible := TRUE;
                     "Node TextVisible" := TRUE;
                     IF EDIDocument.Type = EDIDocument.Type::Export THEN BEGIN
                       "Line NoVisible" := TRUE;
                       "Parent LineNoVisible" := TRUE;
                       ParentVisible := TRUE;
                       "End ElementNameVisible" := TRUE;
                     END;
                     SegmentVisible := FALSE;
                   END ELSE BEGIN
                     "XML SegmentVisible" := FALSE;
                     AttributeVisible := FALSE;
                     "Node TextVisible" := FALSE;
                      "Line NoVisible" := FALSE;
                     "Parent LineNoVisible" := FALSE;
                     ParentVisible := FALSE;
                     "End ElementNameVisible" := FALSE;
                     SegmentVisible := TRUE;
                   END;
                 END;
               END;

    OnAfterGetRecord=BEGIN
                       IF ISSERVICETIER THEN BEGIN
                         CurrPage.CAPTION := '';
                         CurrPage.CAPTION :=
                           DocumentCaption + ' - ' + "Node Name" + ' ' + "Trade Partner No." + ' ' + "EDI Document No." + ' ' + Version + ' ' +
                           FORMAT(Type);
                       END ELSE BEGIN
                         CurrPage.CAPTION := '';
                         CurrPage.CAPTION :=
                           "Trade Partner No." + ' ' + "EDI Document No." + ' ' + Version + ' ' + FORMAT(Type) + ' - ' +
                           DocumentCaption;
                       END;
                       EDIDocument.GET("Trade Partner No.","Navision Document","EDI Document No.",Version,Type);
                       IF EDIDocument."XML Document" THEN BEGIN
                         "XML SegmentVisible" := TRUE;
                         IF EDIDocument.Type = EDIDocument.Type::Export THEN BEGIN
                           "Line NoVisible" := TRUE;
                           "Parent LineNoVisible" := TRUE;
                           ParentVisible := TRUE;
                           "End ElementNameVisible" := TRUE;
                         END;
                         SegmentVisible := FALSE;
                       END ELSE BEGIN
                         "XML SegmentVisible" := FALSE;
                         "Line NoVisible" := FALSE;
                         "Parent LineNoVisible" := FALSE;
                         ParentVisible := FALSE;
                         "End ElementNameVisible" := FALSE;
                         SegmentVisible := TRUE;
                       END;
                       ProcessingSequenceOnFormat;
                       SegmentTypeOnFormat;
                       XMLSegmentOnFormat;
                       SegmentNameOnFormat;
                       NodeTextOnFormat;
                       AttributeOnFormat;
                       ElementErrorOnFormat;
                       ConditionalErrorOnFormat;
                     END;

    OnInsertRecord=BEGIN
                     InsertedByPage(TRUE);
                   END;

    OnQueryClosePage=BEGIN
                       EDISegment.RESET;
                       EDISegment.SETRANGE("Trade Partner No.","Trade Partner No.");
                       EDISegment.SETRANGE("Navision Document","Navision Document");
                       EDISegment.SETRANGE("EDI Document No.","EDI Document No.");
                       EDISegment.SETRANGE(Version,Version);
                       EDISegment.SETRANGE(Type,Type);
                       IF EDISegment.FINDSET THEN
                         REPEAT
                           EDISegment.CALCFIELDS("Element Mapping Error");
                           EDISegment.CALCFIELDS("Conditional Mapping Error");
                           IF EDISegment."Element Mapping Error" OR EDISegment."Conditional Mapping Error" THEN
                             IF CONFIRM(
                               Text001 +
                               Text002)
                             THEN
                               EXIT(TRUE)
                             ELSE
                               EXIT(FALSE);
                         UNTIL EDISegment.NEXT = 0;
                     END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 20      ;1   ;ActionGroup;
                      CaptionML=ENU=&Segment }
      { 21      ;2   ;Action    ;
                      CaptionML=ENU=XML Node Values;
                      RunObject=Page 14099302;
                      RunPageLink=Trade Partner No.=FIELD(Trade Partner No.),
                                  Navision Document=FIELD(Navision Document),
                                  EDI Document No.=FIELD(EDI Document No.),
                                  Version=FIELD(Version),
                                  Type=FIELD(Type),
                                  Segment=FIELD(Segment);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=GetLines;
                      PromotedCategory=Process }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 18      ;1   ;ActionGroup;
                      CaptionML=ENU=F&unctions }
      { 1240020001;2 ;Action    ;
                      CaptionML=ENU=View Tree Structure }
      { 19      ;2   ;Action    ;
                      CaptionML=ENU=Copy XML Nodes;
                      Promoted=Yes;
                      Image=Copy;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CopyXMLElementNode;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                IndentationColumnName=Depth;
                IndentationControls=Node Name;
                ShowAsTree=Yes;
                GroupType=Repeater }

    { 14  ;2   ;Field     ;
                ToolTipML=ENU=For inbound files, lines will be processed in the order in which they are received.  For outbound files, used to identify the order each XML Node is to be processed.;
                SourceExpr="Processing Sequence";
                Style=Strong;
                StyleExpr="Processing SequenceEmphasize" }

    { 6   ;2   ;Field     ;
                CaptionML=ENU=Element Type;
                ToolTipML=ENU=Options are 'Element' & 'Command.' Commands are used to define specific data groups for processing like types of data lines. Valid Commands which define the inbound order line loop are LINE BEGIN & LINE END. ASN hierarchial levels are those with HL-.;
                OptionCaptionML=ENU=Element,Command;
                SourceExpr="Segment Type";
                Style=Strong;
                StyleExpr="Segment TypeEmphasize" }

    { 2   ;2   ;Field     ;
                ToolTipML=ENU=For XML files, specifies the XML Node as expressed by the DOM (Document Object Model).;
                SourceExpr=Segment;
                Visible=FALSE;
                Editable=FALSE }

    { 1240020014;2;Field  ;
                ToolTipML=ENU=Specifies the name of a Node, which is the same as the last path in the "Node List Path.";
                SourceExpr="Node Name";
                Style=Strong;
                StyleExpr="XML SegmentEmphasize" }

    { 1240020003;2;Field  ;
                ToolTipML=ENU=For XML, the path expressions to selected Node. The path expression looks very much like the expressions when you working with a traditional computer file system.;
                SourceExpr="Node List Path" }

    { 8   ;2   ;Field     ;
                CaptionML=ENU=Node Mapping Error;
                ToolTipML=ENU=Indicates a mapping error at the element level. An error message will be displayed if importing or exporting documents with element mapping errors.;
                SourceExpr="Element Mapping Error";
                Style=Strong;
                StyleExpr="Element ErrorEmphasize" }

    { 16  ;2   ;Field     ;
                ToolTipML=ENU=Indicates a mapping error at the conditional level. An error message will be displayed if importing documents with conditional mapping errors.;
                SourceExpr="Conditional Mapping Error";
                Style=Strong;
                StyleExpr="Conditional ErrorEmphasize" }

    { 1240020015;2;Field  ;
                ToolTipML=ENU=For XML files, enabled if any XML Node Values has "Attribute" - TRUE for the XML Node.;
                SourceExpr="Has Attributes";
                Style=Strong;
                StyleExpr=AttributeEmphasize }

    { 1240020016;2;Field  ;
                ToolTipML=ENU=For XML files, enabled if any XML Node Values has "Node Text" - TRUE for the XML Node.;
                SourceExpr="Node Text";
                Style=Strong;
                StyleExpr="Node TextEmphasize" }

    { 1240030000;2;Field  ;
                CaptionML=ENU=Repeat Element;
                ToolTipML=ENU=For for outbound mapping, enable when a XML Node may be repeated.  This field is used with the "Maximum" field.;
                SourceExpr="Repeat Segment";
                Visible=TRUE }

    { 1240030002;2;Field  ;
                ToolTipML=ENU=Used with the "Repeat Element" field.  Set the maximum number of times the XML Node may repeat.;
                SourceExpr=Maximum;
                Visible=TRUE }

    { 1240020008;2;Field  ;
                ToolTipML=ENU=Specify the Depth of the current Node in the XML document.;
                SourceExpr=Depth }

    { 1240020000;2;Field  ;
                ToolTipML=ENU=For XML files, enable for XML Nodes that are 'parents.' Parent Nodes have 'children' Nodes.;
                SourceExpr="Is Parent" }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1907175207;1;Part   ;
                CaptionML=ENU=XML Node Values FactBox;
                SubPageLink=Trade Partner No.=FIELD(Trade Partner No.),
                            Navision Document=FIELD(Navision Document),
                            EDI Document No.=FIELD(EDI Document No.),
                            Type=FIELD(Type),
                            Version=FIELD(Version),
                            Segment=FIELD(Segment);
                PagePartID=Page14099305;
                Visible=TRUE;
                PartType=Page }

  }
  CODE
  {
    VAR
      EDIDocument@1240020001 : Record 14002353;
      EDISegment@1240020017 : Record 14002354;
      DocumentCaption@1240020000 : Text[30];
      "XML SegmentVisible"@19060087 : Boolean INDATASET;
      SegmentVisible@19057998 : Boolean INDATASET;
      "Processing SequenceEmphasize"@19054014 : Boolean INDATASET;
      "Segment TypeEmphasize"@19031337 : Boolean INDATASET;
      "XML SegmentEmphasize"@19065352 : Boolean INDATASET;
      "Segment NameEmphasize"@19020436 : Boolean INDATASET;
      AttributeEmphasize@1240020005 : Boolean INDATASET;
      "Node TextEmphasize"@1240020004 : Boolean INDATASET;
      "Element ErrorEmphasize"@1240020007 : Boolean INDATASET;
      "Conditional ErrorEmphasize"@1240020006 : Boolean INDATASET;
      AttributeVisible@1240020002 : Boolean INDATASET;
      "Node TextVisible"@1240020003 : Boolean INDATASET;
      "Line NoVisible"@1240020008 : Boolean INDATASET;
      "Parent LineNoVisible"@1240020009 : Boolean INDATASET;
      ParentVisible@1240020010 : Boolean INDATASET;
      "End ElementNameVisible"@1240020011 : Boolean INDATASET;
      "Line NoEmphasize"@1240020015 : Boolean INDATASET;
      "Parent LineNoEmphasize"@1240020014 : Boolean INDATASET;
      ParentEmphasize@1240020013 : Boolean INDATASET;
      "End ElementNameEmphasize"@1240020012 : Boolean INDATASET;
      Text001@1240020016 : TextConst 'ENU=Elements for this map have mapping errors.';
      Text002@1240020018 : TextConst 'ENU=\Do you want to close the page?';

    PROCEDURE GetBold@1240020000() : Boolean;
    VAR
      EDIElement@1240020000 : Record 14002355;
    BEGIN
      EDIElement.RESET;
      EDIElement.SETRANGE("Trade Partner No.","Trade Partner No.");
      EDIElement.SETRANGE("Navision Document","Navision Document");
      EDIElement.SETRANGE("EDI Document No.","EDI Document No.");
      EDIElement.SETRANGE(Segment,Segment);
      EDIElement.SETRANGE(Version,Version);
      EDIElement.SETRANGE(Type,Type);
      EDIElement.SETRANGE("Node Text",TRUE);
      IF EDIElement.FIND('-') THEN
        EXIT(TRUE)
      ELSE BEGIN
        EDIElement.SETRANGE("Node Text");
        EDIElement.SETRANGE(Attribute,TRUE);
        IF EDIElement.FIND('-') THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE ProcessingSequenceOnFormat@19061448();
    BEGIN
      EDIDocument.GET("Trade Partner No.","Navision Document","EDI Document No.",Version,Type);
      IF EDIDocument."XML Document" THEN
        "Processing SequenceEmphasize" := GetBold;
    END;

    LOCAL PROCEDURE SegmentTypeOnFormat@19001607();
    BEGIN
      EDIDocument.GET("Trade Partner No.","Navision Document","EDI Document No.",Version,Type);
      IF EDIDocument."XML Document" THEN
        "Segment TypeEmphasize" := GetBold;
    END;

    LOCAL PROCEDURE XMLSegmentOnFormat@19014974();
    BEGIN
      EDIDocument.GET("Trade Partner No.","Navision Document","EDI Document No.",Version,Type);
      IF EDIDocument."XML Document" THEN
        "XML SegmentEmphasize" := GetBold;
    END;

    LOCAL PROCEDURE SegmentNameOnFormat@19023305();
    BEGIN
      EDIDocument.GET("Trade Partner No.","Navision Document","EDI Document No.",Version,Type);
      IF EDIDocument."XML Document" THEN
        "Segment NameEmphasize" := GetBold;
    END;

    LOCAL PROCEDURE NodeTextOnFormat@1240020002();
    BEGIN
      EDIDocument.GET("Trade Partner No.","Navision Document","EDI Document No.",Version,Type);
      IF EDIDocument."XML Document" THEN
        "Node TextEmphasize" := GetBold;
    END;

    LOCAL PROCEDURE AttributeOnFormat@1240020003();
    BEGIN
      EDIDocument.GET("Trade Partner No.","Navision Document","EDI Document No.",Version,Type);
      IF EDIDocument."XML Document" THEN
        AttributeEmphasize := GetBold;
    END;

    LOCAL PROCEDURE ElementErrorOnFormat@1240020004();
    BEGIN
      EDIDocument.GET("Trade Partner No.","Navision Document","EDI Document No.",Version,Type);
      IF EDIDocument."XML Document" THEN
        "Element ErrorEmphasize" := GetBold;
    END;

    LOCAL PROCEDURE ConditionalErrorOnFormat@1240020001();
    BEGIN
      EDIDocument.GET("Trade Partner No.","Navision Document","EDI Document No.",Version,Type);
      IF EDIDocument."XML Document" THEN
        "Conditional ErrorEmphasize" := GetBold;
    END;

    LOCAL PROCEDURE LineNoOnFormat@1240020007();
    BEGIN
      EDIDocument.GET("Trade Partner No.","Navision Document","EDI Document No.",Version,Type);
      IF EDIDocument."XML Document" THEN
        "Line NoEmphasize" := GetBold;
    END;

    LOCAL PROCEDURE ParentLineNoOnFormat@1240020008();
    BEGIN
      EDIDocument.GET("Trade Partner No.","Navision Document","EDI Document No.",Version,Type);
      IF EDIDocument."XML Document" THEN
        "Parent LineNoEmphasize" := GetBold;
    END;

    LOCAL PROCEDURE ParentOnFormat@1240020009();
    BEGIN
      EDIDocument.GET("Trade Partner No.","Navision Document","EDI Document No.",Version,Type);
      IF EDIDocument."XML Document" THEN
        ParentEmphasize := GetBold;
    END;

    LOCAL PROCEDURE EndElementNameOnFormat@1240020010();
    BEGIN
      EDIDocument.GET("Trade Partner No.","Navision Document","EDI Document No.",Version,Type);
      IF EDIDocument."XML Document" THEN
        "End ElementNameEmphasize" := GetBold;
    END;

    BEGIN
    END.
  }
}

