OBJECT Page 14000837 Bill of Lading Scanning
{
  OBJECT-PROPERTIES
  {
    Date=12/28/17;
    Time=12:00:00 PM;
    Version List=SE0.60.18;
  }
  PROPERTIES
  {
    CaptionML=ENU=Bill of Lading Scanning;
    PageType=Card;
    OnOpenPage=BEGIN
                 ShippingSetup.GET;

                 PackingStation.GetPackingStation;

                 IF OpenBillOfLadingNo <> '' THEN BEGIN
                   BillOfLading.GET(OpenBillOfLadingNo);

                   EShipFormatAddr.BillOfLadingShipTo(ShipToAddr,BillOfLading);

                   UpdateValues;

                   MessageLine := STRSUBSTNO(Text001,BillOfLading."No.");
                 END ELSE
                   MessageLine := Text002;
               END;

    OnAfterGetRecord=BEGIN
                       UpdateValues;
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 3   ;1   ;Field     ;
                CaptionML=ENU=Weight;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=BillOfLading."Posted Weight";
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 5   ;1   ;Field     ;
                CaptionML=ENU=Volume;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=BillOfLading."Posted Volume";
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 7   ;1   ;Field     ;
                CaptionML=ENU=Value;
                BlankZero=Yes;
                SourceExpr=BillOfLading."Posted Value";
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 23  ;1   ;Field     ;
                CaptionML=ENU=Bill Of Lading No.;
                SourceExpr=BillOfLading."No.";
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 2   ;1   ;Group     ;
                CaptionML=ENU=Ship-to Address }

    { 27  ;2   ;Field     ;
                SourceExpr=ShipToAddr[1];
                Editable=FALSE }

    { 29  ;2   ;Field     ;
                SourceExpr=ShipToAddr[2];
                Editable=FALSE }

    { 33  ;2   ;Field     ;
                SourceExpr=ShipToAddr[3];
                Editable=FALSE }

    { 31  ;2   ;Field     ;
                CaptionML=ENU=Ship-to Zip;
                SourceExpr=ShipToAddr[4];
                Editable=FALSE }

    { 10  ;1   ;Field     ;
                SourceExpr=InputLine;
                OnValidate=BEGIN
                             IF InputLine <> '' THEN
                               ParseInput(InputLine);
                               InputLineOnAfterValidate;
                           END;
                            }

    { 1   ;1   ;Field     ;
                CaptionClass=FORMAT (MessageLine);
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 11  ;1   ;Field     ;
                CaptionML=ENU=Posted;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=FORMAT(ShippingSetup."Rate Shop Quantity");
                Editable=FALSE;
                MultiLine=Yes;
                Style=Strong;
                StyleExpr=TRUE }

    { 13  ;1   ;Field     ;
                CaptionML=ENU=Weight;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=CalculatedWeight[5];
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 17  ;1   ;Field     ;
                CaptionML=ENU=Weight;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=CalculatedWeight[4];
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 15  ;1   ;Field     ;
                CaptionML=ENU=Volume;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=CalculatedVolume[5];
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 18  ;1   ;Field     ;
                CaptionML=ENU=Volume;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=CalculatedVolume[4];
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 16  ;1   ;Field     ;
                CaptionML=ENU=Value;
                BlankZero=Yes;
                SourceExpr=CalculatedValue[5];
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 20  ;1   ;Field     ;
                CaptionML=ENU=Weight;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=BillOfLading."Posted Weight" + CalculatedWeight[4];
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 21  ;1   ;Field     ;
                CaptionML=ENU=Volume;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=BillOfLading."Posted Volume" + CalculatedVolume[4];
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 19  ;1   ;Field     ;
                CaptionML=ENU=Value;
                BlankZero=Yes;
                SourceExpr=CalculatedValue[4];
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 22  ;1   ;Field     ;
                CaptionML=ENU=Value;
                BlankZero=Yes;
                SourceExpr=BillOfLading."Posted Value" + CalculatedValue[4];
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 25  ;1   ;Field     ;
                CaptionML=ENU=Sales Orders;
                SourceExpr=Counter[1];
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 28  ;1   ;Field     ;
                CaptionML=ENU=Sales Shipments;
                SourceExpr=Counter[2];
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 32  ;1   ;Field     ;
                CaptionML=ENU=Posted Packages;
                SourceExpr=Counter[3];
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 35  ;1   ;Field     ;
                CaptionML=ENU=Total Packages;
                SourceExpr=Counter[4];
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 37  ;1   ;Field     ;
                CaptionML=ENU=Total Posted Packages;
                SourceExpr=Counter[5];
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 14  ;1   ;Field     ;
                CaptionClass=Text19075829;
                MultiLine=Yes;
                Style=Strong;
                StyleExpr=TRUE }

    { 12  ;1   ;Field     ;
                CaptionClass=Text19058762;
                MultiLine=Yes;
                Style=Strong;
                StyleExpr=TRUE }

  }
  CODE
  {
    VAR
      BillOfLading@1240030000 : Record 14000822;
      ShippingSetup@1240030001 : Record 14000707;
      BillOfLadingStatDetailTmp@1240030002 : TEMPORARY Record 14000826;
      PackingStation@1240030003 : Record 14000709;
      BillOfLadingMgt@1240030004 : Codeunit 14000821;
      BillOfLadingWorksheetMgt@1240030005 : Codeunit 14000822;
      CalculatedWeight@1240030007 : ARRAY [5] OF Decimal;
      CalculatedVolume@1240030008 : ARRAY [5] OF Decimal;
      CalculatedValue@1240030009 : ARRAY [5] OF Decimal;
      InputLine@1240030010 : Text[250];
      MessageLine@1240030011 : Text[250];
      ShipToAddr@1240030012 : ARRAY [8] OF Text[50];
      OpenBillOfLadingNo@1240030013 : Code[20];
      CloseWhenCloseBillOfLading@1240030014 : Boolean;
      i@1240030015 : Integer;
      Counter@1240030016 : ARRAY [5] OF Integer;
      Text001@1001 : TextConst 'ENU=Bill of Lading %1 open.';
      Text002@1002 : TextConst 'ENU=Type //HELP to see all options';
      Text003@1003 : TextConst 'ENU=Unknown command.';
      Text004@1004 : TextConst 'ENU=Bill of Lading is released.';
      Text005@1005 : TextConst 'ENU=Bill of Lading %1 not found.';
      Text006@1006 : TextConst 'ENU=Sales Order %1 added.';
      Text007@1007 : TextConst 'ENU=Sales Shipment %1 added.';
      Text008@1008 : TextConst 'ENU=Package %1 added.';
      Text009@1009 : TextConst 'ENU=UCC No. %1 is not unique.';
      Text010@1010 : TextConst 'ENU=External Tracking No. %1 is not unique.';
      Text011@1011 : TextConst 'ENU=Code Missing.';
      Text012@1012 : TextConst 'ENU=Nothing found.';
      Text013@1013 : TextConst 'ENU=Command Not Allowed';
      Text014@1014 : TextConst 'ENU=No Bill of Lading.';
      Text19058762@19050230 : TextConst 'ENU=Packed';
      Text19075829@19026325 : TextConst 'ENU=Posted + Packed';
      EShipFormatAddr@1240020000 : Codeunit 14000241;

    LOCAL PROCEDURE ParseInput@5(InputLine@1240030000 : Text[250]) : Boolean;
    VAR
      SalesHeader@1240030001 : Record 36;
      SalesShipmentHeader@1240030002 : Record 110;
      PostedPackage@1240030003 : Record 14000704;
    BEGIN
      IF InputLine = '' THEN
        EXIT(FALSE);

      InputLine := UPPERCASE(InputLine);

      CASE TRUE OF
        COPYSTR(InputLine,1,2) = '//':
          BEGIN
            CASE InputLine OF
              '//VBOL':
                ViewBillOfLading;
              '//NBOL':
                IF TestLegal(PackingStation."New Bill of Lading BOL Command") THEN
                  NewBillOfLading;
              '//CBOL':
                IF TestLegal(PackingStation."Close Bill of Lading BOL Cmd.") THEN
                  CloseBillOfLading(FALSE);
              '//CBOLP':
                IF TestLegal(PackingStation."Close Bill of Lading BOL Cmd.") THEN
                  CloseBillOfLading(TRUE);
              '//LBOL':
                ListBillOfLadings;
              '//SW','//SWS':
                IF TestLegal(PackingStation."Show Worksheet BOL Command") THEN
                  ShowWorksheet;
              '//CSA':
                IF PackingStation."Change Shipping Agent BOL Cmd." THEN
                  ChangeShippingAgent;
              '//ASO','//AO':
                IF TestLegal(PackingStation."Add Sales Orders BOL Command") THEN
                  OpenAddSalesOrders;
              '//ASS','//AS':
                IF TestLegal(PackingStation."Add Sales Shipments BOL Cmd.") THEN
                  OpenAddSalesShipments;
              '//AP','//APP':
                IF TestLegal(PackingStation."Add Posted Packages BOL Cmd.") THEN
                  OpenAddPostedPackages;
              '//CLEAR':
                ClearScreen;
              '//HELP':
                ShowHelp;
              ELSE
                BEGIN
                  SetMessage(Text003);

                  EXIT(FALSE);
                END;
            END;

            EXIT(TRUE);
          END;
        BillOfLading."No." = '':
          BEGIN
            IF BillOfLading.GET(InputLine) THEN BEGIN
              IF BillOfLading.Released THEN BEGIN
                SetMessage(Text004);

                CLEAR(BillOfLading);

                EXIT(FALSE);
              END;

              EShipFormatAddr.BillOfLadingShipTo(ShipToAddr,BillOfLading);

              MessageLine := STRSUBSTNO(Text001,BillOfLading."No.");

              EXIT(TRUE);
            END ELSE
              SetMessage(STRSUBSTNO(Text005,InputLine));

            EXIT(FALSE);
          END;
        ELSE
          FOR i := 1 TO 10 DO BEGIN
            CASE TRUE OF
              ShippingSetup."Sales Order BOL Priority" = i:
                IF SalesHeader.GET(SalesHeader."Document Type"::Order,InputLine) THEN BEGIN
                  BillOfLadingWorksheetMgt.AddSalesHeader(
                    BillOfLading,SalesHeader,PackingStation,ShippingSetup,
                    PackingStation."Show Document BOL Warnings");

                  MessageLine := STRSUBSTNO(Text006,InputLine);

                  EXIT(TRUE);
                END;
              ShippingSetup."Sales Shipment BOL Priority" = i:
                IF SalesShipmentHeader.GET(InputLine) THEN BEGIN
                  BillOfLadingWorksheetMgt.AddSalesShipment(
                    BillOfLading,SalesShipmentHeader,PackingStation."Show Posted Doc. BOL Warnings");

                  MessageLine := STRSUBSTNO(Text007,InputLine);

                  EXIT(TRUE);
                END;
              ShippingSetup."Package No. BOL Priority" = i:
                IF PostedPackage.GET(InputLine) THEN BEGIN
                  BillOfLadingWorksheetMgt.AddPostedPackage(
                    BillOfLading,PostedPackage,PackingStation."Show Package BOL Warnings");

                 MessageLine := STRSUBSTNO(Text008,PostedPackage."No.");

                  EXIT(TRUE);
                END;
              ShippingSetup."UCC No. Bill of Lad. Priority" = i:
                BEGIN
                  PostedPackage.RESET;
                  PostedPackage.SETCURRENTKEY("UCC No.");
                  PostedPackage.SETRANGE("UCC No.",InputLine);
                  IF PostedPackage.FIND('-') THEN
                    IF PostedPackage.NEXT = 0 THEN BEGIN
                      BillOfLadingWorksheetMgt.AddPostedPackage(
                        BillOfLading,PostedPackage,PackingStation."Show Package BOL Warnings");

                      MessageLine := STRSUBSTNO(Text008,PostedPackage."No.");

                      EXIT(TRUE);
                    END ELSE
                      ERROR(Text009,InputLine);
                END;
              ShippingSetup."Ext. Tracking No. BOL Priority" = i:
                BEGIN
                  PostedPackage.RESET;
                  PostedPackage.SETCURRENTKEY(PostedPackage."External Tracking No.");
                  PostedPackage.SETRANGE("External Tracking No.",InputLine);
                  IF PostedPackage.FIND('-') THEN
                    IF PostedPackage.NEXT = 0 THEN BEGIN
                      BillOfLadingWorksheetMgt.AddPostedPackage(
                        BillOfLading,PostedPackage,PackingStation."Show Package BOL Warnings");

                      MessageLine := STRSUBSTNO(Text008,PostedPackage."No.");

                      EXIT(TRUE);
                    END ELSE
                      ERROR(Text010,InputLine);
                END;
              ShippingSetup."Custom Bill of Lading Priority" = i:
                ERROR(Text011);
            END;
          END;
      END;
      SetMessage(Text012);
    END;

    LOCAL PROCEDURE SetMessage@8(NewMessageLine@1240030000 : Text[250]);
    BEGIN
      MessageLine := NewMessageLine;

        MESSAGE(MessageLine);
    END;

    LOCAL PROCEDURE UpdateValues@1();
    VAR
      Package@1240030000 : Record 14000701;
      PostedPackage@1240030001 : Record 14000704;
    BEGIN
      BillOfLadingWorksheetMgt.UpdateBOLWorkSheetLines(
        BillOfLading,BillOfLadingStatDetailTmp,ShippingSetup,
        CalculatedWeight,CalculatedVolume,CalculatedValue);

      BillOfLading.CALCFIELDS("Posted Weight","Posted Volume","Posted Value");

      CLEAR(Counter);
      IF BillOfLadingStatDetailTmp.FIND('-') THEN
        REPEAT
          CASE BillOfLadingStatDetailTmp.Type OF
            BillOfLadingStatDetailTmp.Type::"Sales Order":
              BEGIN
                Counter[1] := Counter[1] + 1;
                Package.RESET;
                Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
                Package.SETRANGE("Source Type",BillOfLadingStatDetailTmp."Source Type");
                Package.SETRANGE("Source Subtype",BillOfLadingStatDetailTmp."Source Subtype");
                Package.SETRANGE("Source ID",BillOfLadingStatDetailTmp."Source ID");
                IF Package.FIND('-') THEN
                  REPEAT
                    Package.CALCFIELDS("Exist in Other Package","Original Exist in Other Pack.");
                    IF NOT Package."Exist in Other Package" AND
                       NOT Package."Original Exist in Other Pack."
                    THEN
                      Counter[4] := Counter[4] + 1;
                  UNTIL Package.NEXT = 0;
              END;
            BillOfLadingStatDetailTmp.Type::"Sales Shipment (Posted)":
              BEGIN
                Counter[2] := Counter[2] + 1;
                PostedPackage.RESET;
                PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Posted Source ID");
                PostedPackage.SETRANGE("Source Type",BillOfLadingStatDetailTmp."Source Type");
                PostedPackage.SETRANGE("Posted Source ID",BillOfLadingStatDetailTmp."Posted Source ID");
                IF PostedPackage.FIND('-') THEN
                  REPEAT
                    PostedPackage.CALCFIELDS("Exist in Other Package","Original Exist in Other Pack.");
                    IF NOT PostedPackage."Exist in Other Package" AND
                       NOT PostedPackage."Original Exist in Other Pack."
                    THEN
                      Counter[5] := Counter[5] + 1;
                  UNTIL PostedPackage.NEXT = 0;
              END;
            BillOfLadingStatDetailTmp.Type::Package:
              BEGIN
                Counter[3] := Counter[3] + 1;
                Counter[5] := Counter[5] + 1;
              END;
          END;
        UNTIL BillOfLadingStatDetailTmp.NEXT = 0;
    END;

    LOCAL PROCEDURE TestLegal@44(Allowed@1240030000 : Boolean) : Boolean;
    BEGIN
      IF NOT Allowed THEN
        SetMessage(Text013);

      EXIT(Allowed);
    END;

    LOCAL PROCEDURE ShowHelp@34();
    VAR
      BillOfLadingBarcodeCmdsReport@1240030000 : Report 14000826;
    BEGIN
      BillOfLadingBarcodeCmdsReport.SetRequestForm(PackingStation.Code);
      BillOfLadingBarcodeCmdsReport.RUNMODAL;
    END;

    LOCAL PROCEDURE ClearScreen@6();
    BEGIN
      CLEAR(BillOfLading);
      CLEAR(ShipToAddr);
      UpdateValues;

      IF CloseWhenCloseBillOfLading THEN
        CurrPage.CLOSE;
    END;

    LOCAL PROCEDURE BillOfLadingOpenError@12() : Boolean;
    BEGIN
      IF BillOfLading."No." <> '' THEN BEGIN
        SetMessage(Text014);
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE BillOfLadingClosedError@13() : Boolean;
    BEGIN
      IF BillOfLading."No." = '' THEN BEGIN
        SetMessage(Text014);
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE OpenWithBillOfLading@68(SetOpenBillOfLadingNo@1240030000 : Code[20];SetCloseWhenCloseBillOfLading@1240030001 : Boolean);
    BEGIN
      OpenBillOfLadingNo := SetOpenBillOfLadingNo;
      CloseWhenCloseBillOfLading := SetCloseWhenCloseBillOfLading;
    END;

    LOCAL PROCEDURE NewBillOfLading@9();
    VAR
      SalesHeader@1240030000 : Record 36;
    BEGIN
      IF BillOfLadingOpenError THEN
        EXIT;

      BillOfLadingWorksheetMgt.NewBillOfLadingSalesHeader(
        BillOfLading,SalesHeader,PackingStation,ShippingSetup,FALSE,FALSE,FALSE,'');

      EShipFormatAddr.BillOfLadingShipTo(ShipToAddr,BillOfLading);

      UpdateValues;
    END;

    LOCAL PROCEDURE ViewBillOfLading@11();
    VAR
      BillOfLading2@1240030000 : Record 14000822;
    BEGIN
      IF BillOfLadingClosedError THEN
        EXIT;

      BillOfLading2 := BillOfLading;
      BillOfLading2.SETRECFILTER;
      PAGE.RUNMODAL(PAGE::"Bill of Lading",BillOfLading2);

      BillOfLading.GET(BillOfLading."No.");

      EShipFormatAddr.BillOfLadingShipTo(ShipToAddr,BillOfLading);

      UpdateValues;
    END;

    LOCAL PROCEDURE CloseBillOfLading@7(PrintReport@1240030000 : Boolean);
    VAR
      BillOfLading2@1240030001 : Record 14000822;
      PackingRule@1240030002 : Record 14000715;
    BEGIN
      IF BillOfLadingClosedError THEN
        EXIT;

      PackingRule.GetPackingRule(
        BillOfLading."Ship-to Type",BillOfLading."Ship-to No.",BillOfLading."Ship-to Code");
      CASE PackingStation."Close Bill of Lading Action" OF
        PackingStation."Close Bill of Lading Action"::Release:
          BEGIN
            BillOfLadingMgt.CloseBillOfLading(BillOfLading,PackingRule."Release Bill of Lading Action");
          END;
        PackingStation."Close Bill of Lading Action"::"Summary Release":
          BEGIN
            BillOfLadingMgt.CloseBillOfLading(BillOfLading,PackingRule."Release Bill of Lading Action");

            BillOfLadingMgt.CloseBOLSummary(BillOfLading);
          END;
        PackingStation."Close Bill of Lading Action"::Post:
          BEGIN
            BillOfLadingMgt.CloseBillOfLading(BillOfLading,PackingRule."Release Bill of Lading Action");

            BillOfLadingMgt.CloseBOLSummary(BillOfLading);

            BillOfLadingMgt.PostBillOfLading(BillOfLading,FALSE);
          END;
      END;

      IF PrintReport THEN BEGIN
        ShippingSetup.TESTFIELD("Close Bill of Lading Report ID");

        BillOfLading2 := BillOfLading;
        BillOfLading2.SETRECFILTER;
        REPORT.RUNMODAL(ShippingSetup."Close Bill of Lading Report ID",FALSE,FALSE,BillOfLading2);
      END;

      CLEAR(BillOfLading);
      CLEAR(ShipToAddr);
      UpdateValues;

      IF CloseWhenCloseBillOfLading THEN
        CurrPage.CLOSE;
    END;

    LOCAL PROCEDURE ListBillOfLadings@10();
    VAR
      BillOfLading2@1240030000 : Record 14000822;
    BEGIN
      BillOfLading2 := BillOfLading;
      PAGE.RUNMODAL(PAGE::"Bill of Ladings",BillOfLading2);

      IF BillOfLading."No." <> '' THEN BEGIN
        BillOfLading.GET(BillOfLading."No.");

        EShipFormatAddr.BillOfLadingShipTo(ShipToAddr,BillOfLading);

        UpdateValues;
      END;
    END;

    LOCAL PROCEDURE ShowWorksheet@15();
    VAR
      BillOfLading2@1240030000 : Record 14000822;
    BEGIN
      IF BillOfLadingClosedError THEN
        EXIT;

      BillOfLading2 := BillOfLading;
      PAGE.RUNMODAL(PAGE::"Bill of Lading Worksheet",BillOfLading2);

      BillOfLading.GET(BillOfLading."No.");

      EShipFormatAddr.BillOfLadingShipTo(ShipToAddr,BillOfLading);

      UpdateValues;
    END;

    LOCAL PROCEDURE ChangeShippingAgent@14();
    BEGIN
      IF BillOfLadingClosedError THEN
        EXIT;

      BillOfLadingWorksheetMgt.ChangeShippingAgent(BillOfLading);
    END;

    LOCAL PROCEDURE OpenAddSalesOrders@2();
    BEGIN
      IF BillOfLadingClosedError THEN
        EXIT;

      BillOfLadingWorksheetMgt.OpenAddSalesOrders(BillOfLading,PackingStation,ShippingSetup);

      UpdateValues;
    END;

    LOCAL PROCEDURE OpenAddSalesShipments@3();
    BEGIN
      IF BillOfLadingClosedError THEN
        EXIT;

      BillOfLadingWorksheetMgt.OpenAddSalesShipments(BillOfLading);

      UpdateValues;
    END;

    LOCAL PROCEDURE OpenAddPostedPackages@4();
    BEGIN
      IF BillOfLadingClosedError THEN
        EXIT;

      BillOfLadingWorksheetMgt.OpenAddPostedPackages(BillOfLading);

      UpdateValues;
    END;

    LOCAL PROCEDURE InputLineOnAfterValidate@19076879();
    BEGIN
      UpdateValues;

      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE InputLineOnAfterInput@19010624(VAR Text@19010625 : Text[1024]);
    BEGIN
      Text := UPPERCASE(Text);
    END;

    BEGIN
    END.
  }
}

