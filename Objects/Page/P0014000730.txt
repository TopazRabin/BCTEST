OBJECT Page 14000730 Fast Pack Order
{
  OBJECT-PROPERTIES
  {
    Date=06/28/17;
    Time=12:00:00 PM;
    Version List=SE0.60;
  }
  PROPERTIES
  {
    CaptionML=ENU=Fast Pack Order;
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table14000711;
    DataCaptionExpr=CaptionText;
    PageType=Worksheet;
    TimerUpdate=1;
    OnOpenPage=VAR
                 Package2@1240030002 : Record 14000701;
               BEGIN
                 IF (GETFILTER("Source Type") = '') OR (GETFILTER("Source Subtype") = '') OR
                    (GETFILTER("Source ID") = '')
                 THEN
                   ERROR(Text001);
                 ShippingSetup.GET;
                 PackingStation.GetPackingStation;
                 PackageMgt.Initialize(PackingStation,ShippingSetup);
                 CLEAR(PackingControl);
                 IF NOT EVALUATE(PackingControl."Source Type",GETFILTER("Source Type")) THEN
                   ERROR(Text002);
                 IF NOT EVALUATE(PackingControl."Source Subtype",GETFILTER("Source Subtype")) THEN
                   ERROR(Text002);
                 PackingControl."Source ID" := GETFILTER("Source ID");
                 PackingControl.TransferFromSource2;
                 CaptionText := PackingControl.FormatSource2 + ' ' + PackingControl."Ship-to Name";
                 PackingRule.GetPackingRule(
                   PackingControl."Ship-to Type",PackingControl."Ship-to No.",PackingControl."Ship-to Code");
                 PackingControl."Multi Document No." := PackingControl."Source ID";
                 PackingControl."Multi Document Package" := FALSE;
                 UpdatePackingLines(PackingControl);
                 ShippingSetup.TestPackingAllowed(PackingControl."Source Type",PackingControl."Source Subtype");
                 PackingControl.TestReleased2(TRUE);
                 IF PackingStation."Reset Order Qty. When Opened" THEN
                   PackageMgt.ResetQtyToShip(PackingControl);
                 Package2.RESET;
                 Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
                 Package2.SETRANGE("Source Type",PackingControl."Source Type");
                 Package2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
                 Package2.SETRANGE("Source ID",PackingControl."Source ID");
                 IF ShippingSetup."Location Packing" THEN
                   Package2.SETRANGE("Location Code",PackingStation."Location Code");
                 OrderClosed := NOT FastPackLineTmp.FIND('-') AND NOT Package2.FIND('-');
                 IF PackingStation."Scale Interface Code" <> '' THEN
                   ScaleInterface.GET(PackingStation."Scale Interface Code");
                 IF (PackingStation."Scale Update Interval (second)" <> 0) AND
                    (PackingStation."Show What During Packing" =
                     PackingStation."Show What During Packing"::"Scale Weight")
                 THEN
                   UpdateScaleWeight;
                 DisplayCaption := FORMAT(PackingStation."Show What During Packing");
                 PackingControl.Prepack := PackingStation."Open with Prepack";
                 IF PackingStation."Show Order Comments if Exists" THEN
                   PackageMgt.ViewDocumentComments(PackingControl,TRUE);
                 IF PackingStation."Show Warehouse Stat. on Open" THEN
                   PackageMgt.ViewWarehouseStatistics(PackingControl);
                 PackageMgt.CreateSelectExportDoc(PackingControl,'',FALSE,FALSE);
                 PackageMgt.CheckPackageOpen(Package,PackingControl);
                 IF PackingControl."Multi Document Package" THEN
                   UpdatePackingLines(PackingControl);
                 IF PackingControl."Bill of Lading No." <> '' THEN
                   BillOfLading.GET(PackingControl."Bill of Lading No.");
                 PackageMgt.UpdateShippingAgent(PackingControl,BillOfLading,ShippingAgent);
                 PackageMgt.ShowShippingAgentClosedPackage(BillOfLading,Package,PackingControl);
                 IF PackingStation."Check Name Addr. on Open Order" THEN
                   PackingControl.CheckNameAddress(ShippingAgent.Code);
                 IF PackingControl."Package Open" THEN
                   MESSAGE(Text003);
               END;

    OnClosePage=VAR
                  Selection@1000000000 : Integer;
                  SelectionString@1240030000 : Text[250];
                BEGIN
                  UpdatePackingLines(PackingControl);
                  IF NOT OrderClosed OR FastPackLineTmp.FIND('-') THEN BEGIN
                    Selection := 0;
                    SelectionString := '';
                    IF PackingStation."Close Order Command" THEN BEGIN
                      SelectionString := SelectionString + Text004;
                      Selection := 1;
                    END;
                    IF PackingStation."Close Order Print Command" THEN BEGIN
                      SelectionString := SelectionString + Text005;
                      IF Selection = 0 THEN
                        Selection := 2;
                    END ELSE
                      SelectionString := SelectionString + ',';
                    ShowForce :=
                      (FastPackLineTmp.FIND('-') OR ShippingSetup."Location Packing") AND
                      (((PackingControl."Source Type" = DATABASE::"Sales Header") AND
                        (PackingControl."Source Subtype" = 1)) OR
                       ((PackingControl."Source Type" = DATABASE::"Purchase Header") AND
                        (PackingControl."Source Subtype" = 5)) OR
                       (PackingControl."Source Type" = DATABASE::"Transfer Header"));
                    IF ShowForce THEN BEGIN
                      Selection := 3;
                      IF PackingStation."Close Order Force Command" THEN
                        SelectionString := SelectionString + Text006
                      ELSE
                        SelectionString := SelectionString + ',';
                      IF PackingStation."Close Order Print Force Cmd." THEN BEGIN
                        SelectionString := SelectionString + Text007;
                        IF Selection < 3 THEN
                          Selection := 4;
                      END ELSE
                        SelectionString := SelectionString + ',';
                    END ELSE
                      SelectionString := SelectionString + ',,';
                    IF PackingStation."Future Close Order Command" THEN
                      SelectionString := SelectionString + Text008
                    ELSE
                      SelectionString := SelectionString + ',';
                    IF ShowForce AND PackingStation."Future Close Order Force Cmd." THEN
                      SelectionString := SelectionString + Text015;
                    Selection := STRMENU(SelectionString,Selection);
                    CASE Selection OF
                      1:
                        BEGIN
                          PackingStation.TESTFIELD("Close Order Command");
                          CloseOrder(FALSE,FALSE,FALSE);
                        END;
                      2:
                        BEGIN
                          PackingStation.TESTFIELD("Close Order Print Command");
                          CloseOrder(TRUE,FALSE,FALSE);
                        END;
                      3:
                        BEGIN
                          PackingStation.TESTFIELD("Close Order Force Command");
                          CloseOrder(FALSE,TRUE,FALSE);
                        END;
                      4:
                        BEGIN
                          PackingStation.TESTFIELD("Close Order Print Force Cmd.");
                          CloseOrder(TRUE,TRUE,FALSE);
                        END;
                      5:
                        BEGIN
                          PackingStation.TESTFIELD("Future Close Order Command");
                          CloseOrder(FALSE,FALSE,TRUE);
                        END;
                      6:
                        BEGIN
                          PackingStation.TESTFIELD("Future Close Order Force Cmd.");
                          CloseOrder(FALSE,TRUE,TRUE);
                        END;
                    END;
                  END;
                END;

    OnFindRecord=BEGIN
                   FastPackLineTmp := Rec;
                   IF NOT FastPackLineTmp.FIND(Which) THEN
                     EXIT(FALSE);
                   Rec := FastPackLineTmp;
                   EXIT(TRUE);
                 END;

    OnNextRecord=VAR
                   CurrentSteps@1000000001 : Integer;
                 BEGIN
                   FastPackLineTmp := Rec;
                   CurrentSteps := FastPackLineTmp.NEXT(Steps);
                   IF CurrentSteps <> 0 THEN
                     Rec := FastPackLineTmp;
                   EXIT(CurrentSteps);
                 END;

    OnModifyRecord=BEGIN
                     IF "Qty. to Pack (Base)" <> xRec."Qty. to Pack (Base)" THEN BEGIN
                       TotalNetWeight :=
                         TotalNetWeight + "Net Weight" * ("Qty. to Pack (Base)" - xRec."Qty. to Pack (Base)");
                       TotalGrossWeight :=
                         TotalGrossWeight + "Gross Weight" * ("Qty. to Pack (Base)" - xRec."Qty. to Pack (Base)");
                       TotalDimWeight :=
                         TotalDimWeight + "Dimmed Weight" * ("Qty. to Pack (Base)" - xRec."Qty. to Pack (Base)");
                       TotalVolume :=
                         TotalVolume + "Unit Volume" * ("Qty. to Pack (Base)" - xRec."Qty. to Pack (Base)");
                       UpdateDisplayValue;
                     END;
                     FastPackLineTmp := Rec;
                     FastPackLineTmp.MODIFY;
                     EXIT(FALSE);
                   END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 20      ;1   ;ActionGroup;
                      CaptionML=ENU=O&rder }
      { 61      ;2   ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=ENU=Card;
                      Image=EditLines;
                      OnAction=BEGIN
                                 PackingControl.ViewSourceDocument2;
                                 UpdatePackingLines(PackingControl);
                               END;
                                }
      { 21      ;2   ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=ENU=P&ackages;
                      Promoted=Yes;
                      Image=ItemTracing;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 Package2@1000000001 : Record 14000701;
                               BEGIN
                                 Package2.RESET;
                                 Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
                                 Package2.SETRANGE("Source Type",PackingControl."Source Type");
                                 Package2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
                                 IF PackingControl."Multi Document Package" THEN
                                   Package2.SETFILTER("Source ID",PackingControl."Multi Document No.")
                                 ELSE
                                   Package2.SETRANGE("Source ID",PackingControl."Source ID");
                                 PAGE.RUNMODAL(0,Package2);
                                 UpdatePackingLines(PackingControl);
                               END;
                                }
      { 45      ;2   ;Action    ;
                      CaptionML=ENU=Shipping Agent Options;
                      Promoted=Yes;
                      Image=CalculateCrossDock;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Shipping.ShowOptPageShipDocument(PackingControl);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 16      ;1   ;ActionGroup;
                      CaptionML=ENU=F&unctions }
      { 17      ;2   ;Action    ;
                      CaptionML=ENU=Update;
                      OnAction=BEGIN
                                 UpdatePackingLines(PackingControl);
                               END;
                                }
      { 102     ;2   ;Action    ;
                      CaptionML=ENU=Packing &Status;
                      Promoted=Yes;
                      Image=Status;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PackageMgt.PackageStatus(PackingControl);
                               END;
                                }
      { 46      ;2   ;ActionGroup;
                      CaptionML=ENU=&Print }
      { 47      ;3   ;Action    ;
                      CaptionML=ENU=&Std. Package Label;
                      OnAction=VAR
                                 Package2@1000000001 : Record 14000701;
                               BEGIN
                                 PackingStation.TESTFIELD("Print Std. Package Labels Cmd.");
                                 Package2.RESET;
                                 Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
                                 Package2.SETRANGE("Source Type",PackingControl."Source Type");
                                 Package2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
                                 Package2.SETRANGE("Source ID",PackingControl."Source ID");
                                 IF NOT Package2.FIND('+') THEN
                                   ERROR(Text009);
                                 PackageMgt.PrintStdPackageLabel(Package2);
                               END;
                                }
      { 48      ;3   ;Action    ;
                      CaptionML=ENU=&UCC 128 Label;
                      OnAction=VAR
                                 Package2@1000000001 : Record 14000701;
                               BEGIN
                                 PackingStation.TESTFIELD("Print UCC Labels Command");
                                 Package2.RESET;
                                 Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
                                 Package2.SETRANGE("Source Type",PackingControl."Source Type");
                                 Package2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
                                 Package2.SETRANGE("Source ID",PackingControl."Source ID");
                                 IF NOT Package2.FIND('+') THEN
                                   ERROR(Text009);
                                 PackageMgt.PrintUCC128Label(Package2,PackingControl);
                               END;
                                }
      { 1240030005;3 ;Action    ;
                      CaptionML=ENU=&RF-ID Label;
                      OnAction=VAR
                                 Package2@1240030000 : Record 14000701;
                               BEGIN
                                 PackingStation.TESTFIELD("Print RF-ID Label Command");
                                 Package2.RESET;
                                 Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
                                 Package2.SETRANGE("Source Type",PackingControl."Source Type");
                                 Package2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
                                 Package2.SETRANGE("Source ID",PackingControl."Source ID");
                                 IF NOT Package2.FIND('+') THEN
                                   ERROR(Text009);
                                 PackageMgt.PrintRFIDLabel(Package2,PackingControl);
                               END;
                                }
      { 92      ;3   ;Action    ;
                      CaptionML=ENU=Copy Last Label(s);
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Copy Last Label(s) Command");
                                 CopyLastLabels;
                               END;
                                }
      { 99      ;3   ;Action    ;
                      CaptionML=ENU=All S&hipping Labels;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Print All Shipping Labels Cmd.");
                                 PackageMgt.PrintAllLabelsAndDocs(ShippingAgent,PackingControl,FALSE,FALSE);
                               END;
                                }
      { 100     ;3   ;Action    ;
                      CaptionML=ENU=All &Labels;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD(PackingStation."Print All Labels Command");
                                 PackageMgt.PrintAllLabelsAndDocs(ShippingAgent,PackingControl,TRUE,FALSE);
                               END;
                                }
      { 101     ;3   ;Action    ;
                      CaptionML=ENU=All Labels and &Documents;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD(PackingStation."Print All labels And Docs. Cmd");
                                 PackageMgt.PrintAllLabelsAndDocs(ShippingAgent,PackingControl,TRUE,TRUE);
                               END;
                                }
      { 106     ;3   ;Action    ;
                      CaptionML=ENU=Item/ Resource Labels;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Print Item/Resource Label");
                                 IF Package."No." = '' THEN
                                   Package.RESET;
                                   Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
                                   Package.SETRANGE("Source Type",PackingControl."Source Type");
                                   Package.SETRANGE("Source Subtype",PackingControl."Source Subtype");
                                   IF PackingControl."Multi Document Package" THEN
                                     Package.SETFILTER("Source ID",PackingControl."Multi Document No.")
                                   ELSE
                                     Package.SETRANGE("Source ID",PackingControl."Source ID");
                                   IF NOT Package.FIND('+') THEN
                                     IF NOT PackingControl."Package Open" THEN
                                       IF NOT PackageMgt.CreatePackage(Package,PackingControl) THEN
                                         ERROR(PackingControl."Error Message")
                                       ELSE
                                         COMMIT;
                                 PackageMgt.PrintItemResourceLabel(Package,PackingControl);
                               END;
                                }
      { 1240030004;3 ;Action    ;
                      CaptionML=ENU=Bill of Lading Label;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Print Bill of Lading Label Cmd");
                                 IF NOT PackageMgt.PrintBillOfLadingLabel(BillOfLading,PackingControl) THEN
                                   ERROR(PackingControl."Error Message");
                               END;
                                }
      { 109     ;3   ;Separator ;
                      CaptionML=ENU="" }
      { 105     ;3   ;Action    ;
                      CaptionML=ENU=Export All Labels;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Export All Labels");
                                 IF NOT PackageMgt.ExportAllLabels(BillOfLading,PackingControl,TRUE,TRUE) THEN
                                   ERROR(PackingControl."Error Message");
                               END;
                                }
      { 107     ;3   ;Action    ;
                      CaptionML=ENU=Export All Shipping Labels;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Export All Shipping Labels");
                                 IF NOT PackageMgt.ExportAllLabels(BillOfLading,PackingControl,TRUE,FALSE) THEN
                                   ERROR(PackingControl."Error Message");
                               END;
                                }
      { 108     ;3   ;Action    ;
                      CaptionML=ENU=Export All Item/Resource Labels;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Export All Item/Res. Labels");
                                 IF NOT PackageMgt.ExportAllLabels(BillOfLading,PackingControl,FALSE,TRUE) THEN
                                   ERROR(PackingControl."Error Message");
                               END;
                                }
      { 35      ;2   ;ActionGroup;
                      CaptionML=ENU=P&ackage }
      { 18      ;3   ;Action    ;
                      CaptionML=ENU=Create Package;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Close Package Command");
                                 CreatePackage(FALSE);
                               END;
                                }
      { 19      ;3   ;Action    ;
                      CaptionML=ENU=Create Package Print;
                      Promoted=Yes;
                      Image=Print;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Close Package Print Command");
                                 CreatePackage(TRUE);
                               END;
                                }
      { 50      ;3   ;Action    ;
                      CaptionML=ENU=Pack &All;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Pack All Command");
                                 PackingStation.TESTFIELD("Close Package Command");
                                 PackAll(FALSE);
                               END;
                                }
      { 51      ;3   ;Action    ;
                      CaptionML=ENU=Pack &All Print;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Pack All Command");
                                 PackingStation.TESTFIELD("Close Package Print Command");
                                 PackAll(TRUE);
                               END;
                                }
      { 38      ;3   ;Action    ;
                      CaptionML=ENU=&Delete All Packages;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Delete All Packages Command");
                                 PackageMgt.DeleteAllPackages(PackingControl);
                                 OrderClosed := FALSE;
                                 UpdatePackingLines(PackingControl);
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 40      ;3   ;Action    ;
                      CaptionML=ENU=Set &Total Packages;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Total Package Count Command");
                                 IF NOT PackageMgt.ChangeTotalPackageCount(Package,PackingControl) THEN
                                   ERROR(PackingControl."Error Message");
                               END;
                                }
      { 43      ;3   ;Action    ;
                      CaptionML=ENU=Copy Last Package;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Copy Last Package Command");
                                 CopyLastPackage(FALSE);
                               END;
                                }
      { 44      ;3   ;Action    ;
                      CaptionML=ENU=Copy Last Package Print;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Copy Last Package Print Cmd.");
                                 CopyLastPackage(TRUE);
                               END;
                                }
      { 49      ;3   ;Action    ;
                      CaptionML=ENU=Create &Std. Pack;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Create Std. Packages Cmd.");
                                 CreateStdPack(FALSE,FALSE);
                               END;
                                }
      { 52      ;3   ;Action    ;
                      CaptionML=ENU=Create &Std. Pack Print;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Create Std. Packages Print Cmd");
                                 CreateStdPack(FALSE,TRUE);
                               END;
                                }
      { 83      ;3   ;Action    ;
                      CaptionML=ENU=Create Std. Pack (&Line);
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Create Std. Packages Cmd.");
                                 CreateStdPack(TRUE,FALSE);
                               END;
                                }
      { 84      ;3   ;Action    ;
                      CaptionML=ENU=Create Std. Pack Print (&Line);
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Create Std. Packages Print Cmd");
                                 CreateStdPack(TRUE,TRUE);
                               END;
                                }
      { 80      ;3   ;Action    ;
                      CaptionML=ENU=Pack &remaining;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Pack Remaining Command");
                                 PackingStation.TESTFIELD("Close Package Command");
                                 PackRemaining(FALSE);
                               END;
                                }
      { 81      ;3   ;Action    ;
                      CaptionML=ENU=Pack &remaining Print;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Pack Remaining Command");
                                 PackingStation.TESTFIELD("Close Package Print Command");
                                 PackRemaining(TRUE);
                               END;
                                }
      { 69      ;2   ;ActionGroup;
                      CaptionML=ENU=A&dd Packages }
      { 73      ;3   ;Action    ;
                      CaptionML=ENU=&All Packages;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Add All Packages Command");
                                 PackingStation.TESTFIELD("Close Package Command");
                                 AddAllPackage(FALSE);
                               END;
                                }
      { 70      ;3   ;Action    ;
                      CaptionML=ENU=&All Packages Print;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Add All Packages Command");
                                 PackingStation.TESTFIELD("Close Package Print Command");
                                 AddAllPackage(TRUE);
                               END;
                                }
      { 71      ;3   ;Action    ;
                      CaptionML=ENU=&Multiple Packages;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Add Multiple Packages Command");
                                 PackingStation.TESTFIELD("Close Package Command");
                                 AddMultiplePackages(FALSE);
                               END;
                                }
      { 74      ;3   ;Action    ;
                      CaptionML=ENU=&Multiple Packages Print;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Add Multiple Packages Command");
                                 PackingStation.TESTFIELD("Close Package Print Command");
                                 AddMultiplePackages(TRUE);
                               END;
                                }
      { 72      ;3   ;Action    ;
                      CaptionML=ENU=&Selected Packages;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Add Selected Packages Command");
                                 PackingStation.TESTFIELD("Close Package Command");
                                 AddSelectedPackages(FALSE);
                               END;
                                }
      { 75      ;3   ;Action    ;
                      CaptionML=ENU=&Selected Packages Print;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Add Selected Packages Command");
                                 PackingStation.TESTFIELD("Close Package Print Command");
                                 AddSelectedPackages(TRUE);
                               END;
                                }
      { 115     ;2   ;ActionGroup;
                      CaptionML=ENU=De&fault }
      { 111     ;3   ;Action    ;
                      CaptionML=ENU=Option;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Default F3 Option");
                                 DefaultOption(PackingStation."Default F3 Option");
                               END;
                                }
      { 112     ;3   ;Action    ;
                      ShortCutKey=Shift+F3;
                      CaptionML=ENU=Shift Option;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Default Shift+F3 Option");
                                 DefaultOption(PackingStation."Default Shift+F3 Option");
                               END;
                                }
      { 113     ;3   ;Action    ;
                      ShortCutKey=Ctrl+F11;
                      CaptionML=ENU=Ctrl Option;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Default Ctrl+F3 Option");
                                 DefaultOption(PackingStation."Default Ctrl+F3 Option");
                               END;
                                }
      { 114     ;3   ;Action    ;
                      ShortCutKey=Alt+F3;
                      CaptionML=ENU=Alt Option;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Default Alt+F3 Option");
                                 DefaultOption(PackingStation."Default Alt+F3 Option");
                               END;
                                }
      { 34      ;2   ;ActionGroup;
                      CaptionML=ENU=O&rder }
      { 63      ;3   ;Action    ;
                      CaptionML=ENU=Multi Document;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Multi Document Command");
                                 IF NOT PackageMgt.MultiDocPacking(SalesSetup,PackingControl,FALSE) THEN
                                   ERROR(PackingControl."Error Message");
                                 UpdatePackingLines(PackingControl);
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 116     ;3   ;Action    ;
                      CaptionML=ENU=Multi Document &Lookup;
                      Promoted=Yes;
                      Image=View;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Multi Document Lookup Cmd");
                                 IF NOT PackageMgt.MultiDocPacking(SalesSetup,PackingControl,TRUE) THEN
                                   ERROR(PackingControl."Error Message");
                                 UpdatePackingLines(PackingControl);
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 25      ;3   ;Action    ;
                      CaptionML=ENU=Close Order;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Close Order Command");
                                 CloseOrder(FALSE,FALSE,FALSE);
                               END;
                                }
      { 33      ;3   ;Action    ;
                      CaptionML=ENU=Close Order Print;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Close Order Print Command");
                                 CloseOrder(TRUE,FALSE,FALSE);
                               END;
                                }
      { 36      ;3   ;Action    ;
                      CaptionML=ENU=Close Order Force;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Close Order Force Command");
                                 CloseOrder(FALSE,TRUE,FALSE);
                               END;
                                }
      { 37      ;3   ;Action    ;
                      CaptionML=ENU=Close Order Print Force;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Close Order Print Force Cmd.");
                                 CloseOrder(TRUE,TRUE,FALSE);
                               END;
                                }
      { 110     ;3   ;Action    ;
                      CaptionML=ENU=Future Close Order;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Future Close Order Command");
                                 CloseOrder(FALSE,FALSE,TRUE);
                               END;
                                }
      { 117     ;3   ;Action    ;
                      CaptionML=ENU=Bill of Lading;
                      Promoted=Yes;
                      Image=Document;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Bill of Lading Command");
                                 PackageMgt.CreateBillOfLading(PackingControl);
                                 UpdatePackingLines(PackingControl);
                               END;
                                }
      { 82      ;3   ;Action    ;
                      CaptionML=ENU=Reset Qty. to Ship;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Reset Order Quantity Command");
                                 ResetSalesOrderQuantity;
                               END;
                                }
      { 91      ;3   ;Action    ;
                      CaptionML=ENU=Set Qty. to Ship;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Set Order Quantity Command");
                                 SetSalesOrderQuantity;
                               END;
                                }
      { 1240030006;2 ;ActionGroup;
                      CaptionML=ENU=Export Documents }
      { 1240030007;3 ;Action    ;
                      CaptionML=ENU=Export Document;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Export Document Command");
                                 ExportDoc;
                               END;
                                }
      { 1240030008;3 ;Action    ;
                      CaptionML=ENU=View Export Document;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("View Export Document Command");
                                 ViewExportDoc;
                               END;
                                }
      { 1240030011;3 ;Action    ;
                      CaptionML=ENU=Update Export Document Detail;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Update Export Doc Detail Cmd.");
                                 UpdateExportDocDetail;
                               END;
                                }
      { 1240030009;3 ;Action    ;
                      CaptionML=ENU=No AES Required;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("No AES Required Command");
                                 NoAESRequired;
                               END;
                                }
      { 1240030003;2 ;ActionGroup;
                      CaptionML=ENU=Warehouse }
      { 200     ;3   ;Action    ;
                      CaptionML=ENU=Enter &Tote;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Enter Tote Command");
                                 PackingStation.TESTFIELD("Close Package Command");
                                 EnterTote(FALSE);
                               END;
                                }
      { 201     ;3   ;Action    ;
                      CaptionML=ENU=Enter &Tote Print;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Enter Tote Command");
                                 PackingStation.TESTFIELD("Close Package Print Command");
                                 EnterTote(TRUE);
                               END;
                                }
      { 202     ;3   ;Action    ;
                      CaptionML=ENU=Select Tote;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Select Tote Command");
                                 PackingStation.TESTFIELD("Close Package Command");
                                 SelectTote(FALSE);
                               END;
                                }
      { 203     ;3   ;Action    ;
                      CaptionML=ENU=Select Tote Print;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Select Tote Command");
                                 PackingStation.TESTFIELD("Close Package Print Command");
                                 SelectTote(FALSE);
                               END;
                                }
      { 1240030000;3 ;Action    ;
                      CaptionML=ENU=View &Warehouse Activity Lines;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("View Whse. Activity Lines Cmd.");
                                 IF NOT PackageMgt.ViewWarehouseActivityLines(PackingControl,FALSE,TRUE) THEN
                                   ERROR(PackingControl."Error Message");
                                 UpdatePackingLines(PackingControl);
                               END;
                                }
      { 1240030001;3 ;Action    ;
                      CaptionML=ENU=View &Warehouse Shipment Lines;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("View Whse. Shipment Lines Cmd.");
                                 IF NOT PackageMgt.ViewWarehouseShipmentLines(PackingControl,TRUE) THEN
                                   ERROR(PackingControl."Error Message");
                                 UpdatePackingLines(PackingControl);
                               END;
                                }
      { 1240030002;3 ;Action    ;
                      CaptionML=ENU=View &Inventory Pick Lines;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("View Invt. Activity Lines Cmd.");
                                 IF NOT PackageMgt.ViewWarehouseActivityLines(PackingControl,TRUE,TRUE) THEN
                                   ERROR(PackingControl."Error Message");
                                 UpdatePackingLines(PackingControl);
                               END;
                                }
      { 1240030010;3 ;Action    ;
                      CaptionML=ENU=Register Pick(s);
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Register Whse. Pick Command");
                                 IF NOT PackageMgt.RegisterWarehousePick(PackingControl) THEN
                                   ERROR(PackingControl."Error Message");
                               END;
                                }
      { 93      ;2   ;ActionGroup;
                      CaptionML=ENU=Misc. }
      { 97      ;3   ;Action    ;
                      CaptionML=ENU=&Renumber All Packages;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Renumber All Packages Command");
                                 IF PackingControl.Prepack THEN BEGIN
                                   PackingControl.Prepack := FALSE;
                                   ShowShippingAgentClosedPackage;
                                 END;
                                 IF NOT PackageMgt.RenumberAllPackages(BillOfLading,ShippingAgent,PackingControl,FALSE,FALSE) THEN
                                   ERROR(PackingControl."Error Message");
                               END;
                                }
      { 98      ;3   ;Action    ;
                      CaptionML=ENU=Renumber All Packages &Print;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Renumber All Pcks. Print Cmd.");
                                 IF PackingControl.Prepack THEN BEGIN
                                   PackingControl.Prepack := FALSE;
                                   ShowShippingAgentClosedPackage;
                                 END;
                                 IF NOT PackageMgt.RenumberAllPackages(
                                          BillOfLading,ShippingAgent,PackingControl,TRUE,FALSE)
                                 THEN
                                   ERROR(PackingControl."Error Message");
                               END;
                                }
      { 103     ;3   ;Action    ;
                      CaptionML=ENU=FedEx Master Label;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Fedex Master Label Command");
                                 IF PackingControl.Prepack THEN BEGIN
                                   PackingControl.Prepack := FALSE;
                                   ShowShippingAgentClosedPackage;
                                 END;
                                 IF NOT PackageMgt.RenumberAllPackages(BillOfLading,ShippingAgent,PackingControl,FALSE,TRUE) THEN
                                   ERROR(PackingControl."Error Message");
                               END;
                                }
      { 104     ;3   ;Action    ;
                      CaptionML=ENU=FedEx Master Label Print;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Fedex Master Label Print Cmd.");
                                 IF PackingControl.Prepack THEN BEGIN
                                   PackingControl.Prepack := FALSE;
                                   ShowShippingAgentClosedPackage;
                                 END;
                                 IF NOT PackageMgt.RenumberAllPackages(BillOfLading,ShippingAgent,PackingControl,TRUE,TRUE) THEN
                                   ERROR(PackingControl."Error Message");
                               END;
                                }
      { 95      ;3   ;Action    ;
                      CaptionML=ENU=Scan &Missing Serial and Lot No.;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Scan Missing Serial Lot Cmd.");
                                 PackageMgt.ScanSerialLot(PackingControl,FALSE,FALSE);
                               END;
                                }
      { 96      ;3   ;Action    ;
                      CaptionML=ENU=Scan &All Serial and Lot No.;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Scan All Serial Lot Command");
                                 PackageMgt.ScanSerialLot(PackingControl,TRUE,FALSE);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 65  ;1   ;Field     ;
                CaptionML=ENU=No.;
                SourceExpr=PackingControl.FormatSource(PackingControl."Source Type",PackingControl."Source Subtype",PackingControl."Multi Document No.");
                Editable=FALSE }

    { 59  ;1   ;Field     ;
                CaptionML=ENU=Sell-to Customer No.;
                SourceExpr=PackingControl."Ship-to No.";
                Editable=FALSE }

    { 57  ;1   ;Field     ;
                CaptionML=ENU=Sell-to Customer Name;
                SourceExpr=PackingControl."Ship-to Name";
                Editable=FALSE }

    { 22  ;1   ;Field     ;
                CaptionML=ENU=Last Package No. / Total Packages;
                SourceExpr=PackingControl."Last Package No.";
                Editable=FALSE }

    { 24  ;1   ;Field     ;
                CaptionML=ENU=of;
                SourceExpr=PackingControl."Total Package Count";
                Editable=FALSE }

    { 64  ;1   ;Field     ;
                Name=DisplayValue;
                CaptionML=ENU=Scale Weight;
                SourceExpr=DisplayValue;
                CaptionClass=FORMAT (DisplayCaption);
                Editable=FALSE }

    { 53  ;1   ;Field     ;
                CaptionML=ENU=Shipping Agent Code;
                SourceExpr=Package."Shipping Agent Code";
                Editable=FALSE }

    { 55  ;1   ;Field     ;
                CaptionML=ENU=Shipping Agent Service;
                SourceExpr=Package."Shipping Agent Service";
                Editable=FALSE }

    { 41  ;1   ;Field     ;
                CaptionML=ENU=Packing Status;
                SourceExpr=PackingControl.PackingStatus;
                Editable=FALSE }

    { 67  ;1   ;Field     ;
                CaptionML=ENU=Prepack;
                SourceExpr=PackingControl.Prepack;
                OnValidate=BEGIN
                             PackingControlPrepackOnAfterVa;
                           END;
                            }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                SourceExpr=Type }

    { 4   ;2   ;Field     ;
                SourceExpr="No." }

    { 6   ;2   ;Field     ;
                SourceExpr="Variant Code";
                Visible=FALSE }

    { 8   ;2   ;Field     ;
                SourceExpr=Description }

    { 10  ;2   ;Field     ;
                SourceExpr="Qty. to Ship" }

    { 31  ;2   ;Field     ;
                SourceExpr="Remaining Qty. to Pack" }

    { 12  ;2   ;Field     ;
                SourceExpr="Unit of Measure Code" }

    { 29  ;2   ;Field     ;
                SourceExpr="Qty. to Pack" }

    { 76  ;2   ;Field     ;
                SourceExpr="Rem. Qty. to Pack (Pack. UOM)" }

    { 14  ;2   ;Field     ;
                SourceExpr="Qty. to Pack Unit of Meas Code" }

    { 78  ;2   ;Field     ;
                SourceExpr="Std. Packs per Package";
                Visible=FALSE }

    { 85  ;2   ;Field     ;
                SourceExpr="Required Shipping Agent Code";
                Visible=FALSE }

    { 87  ;2   ;Field     ;
                SourceExpr="Required E-Ship Agent Service";
                Visible=FALSE }

    { 89  ;2   ;Field     ;
                SourceExpr="Allow Other Ship. Agent/Serv.";
                Visible=FALSE }

  }
  CODE
  {
    VAR
      FastPackLineTmp@1240030002 : TEMPORARY Record 14000711;
      Package@1000000003 : Record 14000701;
      ShippingSetup@1000000004 : Record 14000707;
      PackingStation@1000000005 : Record 14000709;
      ScaleInterface@1000000006 : Record 14000746;
      ShippingAgent@1000000007 : Record 291;
      SalesSetup@1000000024 : Record 311;
      PackingControl@1000000008 : Record 14000717;
      PackingRule@1000000015 : Record 14000715;
      BillOfLading@1240030000 : Record 14000822;
      Shipping@1000000009 : Codeunit 14000701;
      PackageMgt@1000000010 : Codeunit 14000702;
      ScalesComm@1000000011 : Codeunit 37031002;
      WhsePickAndPackingMgt@1240030001 : Codeunit 14000704;
      OrderClosed@1000000012 : Boolean;
      ShowForce@1240030005 : Boolean;
      TimerCount@1000000013 : Integer;
      CaptionText@1000000014 : Text[100];
      TotalNetWeight@1000000018 : Decimal;
      TotalGrossWeight@1000000019 : Decimal;
      TotalDimWeight@1000000020 : Decimal;
      TotalVolume@1000000021 : Decimal;
      DisplayValue@1000000022 : Decimal;
      DisplayCaption@1000000023 : Text[30];
      Text001@1001 : TextConst 'ENU=Document must be filtered.';
      Text002@1002 : TextConst 'ENU=Docuement must be filtered.';
      Text003@1003 : TextConst 'ENU=Package(s) are already open, please close those package(s) before packing new.';
      Text004@1004 : TextConst 'ENU=Close Order';
      Text005@1005 : TextConst 'ENU=,Close Order and Print';
      Text006@1006 : TextConst 'ENU=,Close Order Force';
      Text007@1007 : TextConst 'ENU=,Close Order Force and Print';
      Text008@1008 : TextConst 'ENU=,Future Close Order';
      Text009@1009 : TextConst 'ENU=No Last Package.';
      Text010@1010 : TextConst 'ENU=Nothing to Pack.';
      Text011@1011 : TextConst 'ENU=No packages added.';
      Text012@1012 : TextConst 'ENU=No Tote Lines found for %1.';
      Text013@1013 : TextConst 'ENU=Required code missing.';
      Text014@1014 : TextConst 'ENU=Wrong Default Option';
      Text015@1240030004 : TextConst 'ENU=,Future Close Order Force';
      Text016@1240030007 : TextConst 'ENU=Nothing to ship.';

    PROCEDURE UpdatePackingLines@1(VAR PackingControl@1240030000 : Record 14000717);
    BEGIN
      TotalNetWeight := 0;
      TotalGrossWeight := 0;
      TotalDimWeight := 0;
      TotalVolume := 0;
      UpdateDisplayValue;
      PackageMgt.UpdateFastPackLines(PackingControl,FastPackLineTmp,PackingRule,FALSE,FALSE,FALSE,0,'','');
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE CreatePackage@2(PrintLabel@1000000000 : Boolean);
    VAR
      FastPackLine@1240030000 : Record 14000711;
    BEGIN
      FastPackLineTmp.RESET;
      FastPackLineTmp.SETFILTER("Qty. to Pack",'<>0');
      IF NOT FastPackLineTmp.FIND('-') THEN
        ERROR(Text010);
      IF NOT PackingControl."Package Open" THEN
        IF NOT PackageMgt.CreatePackage(Package,PackingControl) THEN
          ERROR(PackingControl."Error Message");
      REPEAT
        PackingControl."Input Type" := FastPackLineTmp.Type;
        PackingControl."Input No." := FastPackLineTmp."No.";
        PackingControl."Input Serial Number" := '';
        PackingControl."Input Unit of Measure Code" :=
          FastPackLineTmp."Qty. to Pack Unit of Meas Code";
        PackingControl."Input Variant Code" := FastPackLineTmp."Variant Code";
        PackingControl."Pack Serial Number" := FastPackLineTmp."Pack Serial Number";
        PackingControl."Pack Serial Number Late" := FALSE;
        PackingControl."Input Lot Number" := '';
        PackingControl."Pack Lot Number" := FastPackLineTmp."Pack Lot Number";
        PackingControl."Pack Lot Number Late" := FALSE;
        PackingControl."Input Warranty Date" := 0D;
        PackingControl."Pack Warranty Date" := FastPackLineTmp."Pack Warranty Date";
        PackingControl."Pack Warranty Date Late" := FALSE;
        PackingControl."Input Expiration Date" := 0D;
        PackingControl."Pack Expiration Date" := FastPackLineTmp."Pack Expiration Date";
        PackingControl."Pack Expiration Date Late" := FALSE;
        PackingControl."Required Shipping Agent Code" :=
          FastPackLineTmp."Required Shipping Agent Code";
        PackingControl."Required E-Ship Agent Service" :=
          FastPackLineTmp."Required E-Ship Agent Service";
        PackingControl."Allow Other Ship. Agent/Serv." :=
          FastPackLineTmp."Allow Other Ship. Agent/Serv.";
        // This code is required to solve a problem with forms using Temporary tables
        // The OnFindRec run after returning from the function call if not using the debugger
        FastPackLine := FastPackLineTmp;
        IF NOT PackageMgt.CreatePackageLine(
                 Package,PackingControl,FastPackLineTmp."Unit of Measure Code",
                 FastPackLineTmp.Quantity,FastPackLineTmp."Qty. to Pack")
        THEN
          ERROR(PackingControl."Error Message");
        FastPackLineTmp := FastPackLine;
      UNTIL FastPackLineTmp.NEXT = 0;
      COMMIT;
      IF PackingStation."View Opt on Close in Fast Pack" THEN
        PackageMgt.ShowPackageOptions(Package);
      IF NOT PackageMgt.ClosePackage(
               Package,ShippingAgent,ScaleInterface,PackingControl,PrintLabel)
      THEN
        ERROR(PackingControl."Error Message");
      UpdatePackingLines(PackingControl);
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE CopyLastPackage@3(PrintLabel@1000000000 : Boolean);
    BEGIN
      IF NOT PackageMgt.CopyLastPackage(Package,PackingControl,PrintLabel) THEN
        ERROR(PackingControl."Error Message");
      UpdatePackingLines(PackingControl);
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE CopyLastLabels@17();
    BEGIN
      IF NOT PackageMgt.CopyLastLabel(Package,PackingControl) THEN
        ERROR(PackingControl."Error Message");
      UpdatePackingLines(PackingControl);
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE PackAll@5(PrintLabel@1000000000 : Boolean);
    BEGIN
      IF NOT PackageMgt.CreateShipComplete(Package,PackingControl) THEN
        ERROR(PackingControl."Error Message");
      IF NOT PackageMgt.ClosePackage(
               Package,ShippingAgent,ScaleInterface,PackingControl,PrintLabel)
      THEN
        ERROR(PackingControl."Error Message");
      UpdatePackingLines(PackingControl);
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE PackRemaining@11(PrintLabel@1000000000 : Boolean);
    BEGIN
      IF NOT PackageMgt.PackRemaining(Package,PackingControl) THEN
        ERROR(PackingControl."Error Message");
      IF NOT PackageMgt.ClosePackage(
               Package,ShippingAgent,ScaleInterface,PackingControl,PrintLabel)
      THEN
        ERROR(PackingControl."Error Message");
      UpdatePackingLines(PackingControl);
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE CloseOrder@4(Print@1000000000 : Boolean;Force@1000000001 : Boolean;Future@1240030000 : Boolean);
    BEGIN
      IF NOT PackageMgt.CloseOrder(ShippingAgent,PackingControl,Print,Force,Future) THEN
        ERROR(PackingControl."Error Message");
      OrderClosed := TRUE;
      CurrPage.CLOSE;
    END;

    PROCEDURE CreateStdPack@6(LineOnly@1240030000 : Boolean;PrintLabel@1240030001 : Boolean);
    BEGIN
      PackingControl."Standard Pack One item" := LineOnly;
      IF LineOnly THEN BEGIN
        TESTFIELD(Type,Type::Item);
        TESTFIELD("No.");
        PackingControl."Input Type" := Type;
        PackingControl."Input No." := "No.";
        PackingControl."Input Variant Code" := "Variant Code";
      END;
      PackageMgt.CreateStandardPack(PackingControl,PrintLabel);
      UpdatePackingLines(PackingControl);
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE UpdateScaleWeight@7();
    BEGIN
      IF PackingStation."Scale Interface Code" <> '' THEN
        IF ScalesComm.GetScaleWeight(ScaleInterface,PackingControl."Scale Weight",TRUE) THEN
          UpdateDisplayValue;
    END;

    PROCEDURE UpdateDisplayValue@41();
    BEGIN
      CASE PackingStation."Show What During Packing" OF
        PackingStation."Show What During Packing"::"Net Weight":
          DisplayValue := TotalNetWeight;
        PackingStation."Show What During Packing"::"Gross Weight":
          DisplayValue := TotalGrossWeight;
        PackingStation."Show What During Packing"::"Dimmed Weight":
          DisplayValue := TotalDimWeight;
        PackingStation."Show What During Packing"::Volume:
          DisplayValue := TotalVolume;
        PackingStation."Show What During Packing"::"Scale Weight":
          DisplayValue := PackingControl."Scale Weight";
      END;
    END;

    PROCEDURE AddAllPackage@8(PrintLabel@1000000000 : Boolean);
    BEGIN
      PackageMgt.AddAllPackagesToPackage(Package,PackingControl);
      IF PackingControl."Package Open" THEN BEGIN
        IF NOT PackageMgt.ClosePackage(
                 Package,ShippingAgent,ScaleInterface,PackingControl,PrintLabel)
        THEN
          ERROR(PackingControl."Error Message");
      END ELSE
        ERROR(Text011);
    END;

    PROCEDURE AddMultiplePackages@9(PrintLabel@1000000000 : Boolean);
    BEGIN
      IF NOT PackageMgt.AddMultiplePackagesToPackage(Package,PackingControl)
      THEN
        ERROR(PackingControl."Error Message");
      IF PackingControl."Package Open" THEN BEGIN
        IF NOT PackageMgt.ClosePackage(
                 Package,ShippingAgent,ScaleInterface,PackingControl,PrintLabel)
        THEN
          ERROR(PackingControl."Error Message");
      END ELSE
        ERROR(Text011);
    END;

    PROCEDURE AddSelectedPackages@10(PrintLabel@1000000000 : Boolean);
    BEGIN
      PackageMgt.AddSelectedPackagesToPackage(Package,PackingControl);
      IF PackingControl."Package Open" THEN BEGIN
        IF NOT PackageMgt.ClosePackage(
                 Package,ShippingAgent,ScaleInterface,PackingControl,PrintLabel)
        THEN
          ERROR(PackingControl."Error Message");
      END ELSE
        ERROR(Text011);
    END;

    PROCEDURE ResetSalesOrderQuantity@12();
    BEGIN
      PackageMgt.ResetQtyToShip(PackingControl);
      UpdatePackingLines(PackingControl);
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE SetSalesOrderQuantity@13();
    BEGIN
      PackageMgt.SetQtyToShipToPacked(PackingControl);
      UpdatePackingLines(PackingControl);
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE UpdateShippingAgent@81();
    BEGIN
      IF (PackingControl."Bill of Lading No." <> '') AND ShippingSetup."Use Shipping Agent from BOL"
      THEN BEGIN
        IF BillOfLading."No." <> PackingControl."Bill of Lading No." THEN
          BillOfLading.GET(PackingControl."Bill of Lading No.");
        IF BillOfLading."Shipping Agent Code" <> ShippingAgent.Code THEN
          IF BillOfLading."Shipping Agent Code" <> '' THEN
            ShippingAgent.GET(BillOfLading."Shipping Agent Code")
          ELSE
            CLEAR(ShippingAgent);
      END ELSE
        IF PackingControl."Shipping Agent Code" <> ShippingAgent.Code THEN
          IF PackingControl."Shipping Agent Code" <> '' THEN
            ShippingAgent.GET(PackingControl."Shipping Agent Code")
          ELSE
            CLEAR(ShippingAgent);
    END;

    LOCAL PROCEDURE ShowShippingAgentClosedPackage@85();
    BEGIN
      IF PackingControl.Prepack THEN BEGIN
        ShippingSetup.TESTFIELD("Prepack Shipping Agent Code");
        ShippingSetup.TESTFIELD("Prepack Shipping Agent Service");
        Package."Shipping Agent Code" := ShippingSetup."Prepack Shipping Agent Code";
        Package."Shipping Agent Service" := ShippingSetup."Prepack Shipping Agent Service";
      END ELSE BEGIN
        IF (PackingControl."Bill of Lading No." <> '') AND ShippingSetup."Use Shipping Agent from BOL"
        THEN BEGIN
          Package."Shipping Agent Code" := BillOfLading."Shipping Agent Code";
          Package."Shipping Agent Service" := BillOfLading."Shipping Agent Service";
        END ELSE BEGIN
          Package."Shipping Agent Code" := PackingControl."Shipping Agent Code";
          Package."Shipping Agent Service" := PackingControl."E-Ship Agent Service";
        END;
      END;
    END;

    PROCEDURE EnterTote@86(PrintLabel@1240030000 : Boolean);
    BEGIN
      IF NOT WhsePickAndPackingMgt.EnterTote(PackingControl) THEN
        ERROR(PackingControl."Error Message");
      CreateTote(PrintLabel);
    END;

    PROCEDURE SelectTote@87(PrintLabel@1240030000 : Boolean);
    BEGIN
      IF NOT WhsePickAndPackingMgt.SelectTote(PackingControl) THEN
        ERROR(PackingControl."Error Message");
      CreateTote(PrintLabel);
    END;

    PROCEDURE CreateTote@88(PrintLabel@1240030000 : Boolean);
    BEGIN
      IF NOT WhsePickAndPackingMgt.GetLine(PackingControl,Quantity,TRUE) THEN
        ERROR(
          STRSUBSTNO(
            Text012,PackingControl."Tote No."));
      IF NOT PackageMgt.CreatePackage(Package,PackingControl)
      THEN
        ERROR(PackingControl."Error Message");
      Package."Tote No." := PackingControl."Tote No.";
      Package.MODIFY(TRUE);
      COMMIT;
      REPEAT
        IF NOT PackageMgt.CreatePackageLine(Package,PackingControl,'',0,Quantity) THEN
          ERROR(PackingControl."Error Message");
      UNTIL NOT WhsePickAndPackingMgt.GetLine(PackingControl,Quantity,FALSE);
      COMMIT;
      IF NOT PackageMgt.ClosePackage(
               Package,ShippingAgent,ScaleInterface,PackingControl,PrintLabel)
      THEN
        ERROR(PackingControl."Error Message");
      UpdatePackingLines(PackingControl);
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE DefaultOption@14(DefaultOption@1240030000 : Integer);
    BEGIN
      CASE DefaultOption OF
        PackingStation."Default F3 Option"::"Create Package":
          BEGIN
            PackingStation.TESTFIELD("Close Package Command");
            CreatePackage(FALSE);
          END;
        PackingStation."Default F3 Option"::"Create Package Print":
          BEGIN
            PackingStation.TESTFIELD("Close Package Print Command");
            CreatePackage(TRUE);
          END;
        PackingStation."Default F3 Option"::"Create Standard Pack":
          BEGIN
            PackingStation.TESTFIELD("Create Std. Packages Cmd.");
            CreateStdPack(FALSE,FALSE);
          END;
        PackingStation."Default F3 Option"::"Create Standard Pack Print":
          BEGIN
            PackingStation.TESTFIELD("Create Std. Packages Print Cmd");
            CreateStdPack(FALSE,TRUE);
          END;
        PackingStation."Default F3 Option"::"Pack All":
          BEGIN
            PackingStation.TESTFIELD("Pack All Command");
            PackingStation.TESTFIELD("Close Package Command");
            PackAll(FALSE);
          END;
        PackingStation."Default F3 Option"::"Pack All Print":
          BEGIN
            PackingStation.TESTFIELD("Pack All Command");
            PackingStation.TESTFIELD("Close Package Print Command");
            PackAll(TRUE);
          END;
        PackingStation."Default F3 Option"::"Pack Remaining":
          BEGIN
            PackingStation.TESTFIELD("Pack Remaining Command");
            PackingStation.TESTFIELD("Close Package Command");
            PackRemaining(FALSE);
          END;
        PackingStation."Default F3 Option"::"Pack Remaining Print":
          BEGIN
            PackingStation.TESTFIELD("Pack Remaining Command");
            PackingStation.TESTFIELD("Close Package Print Command");
            PackRemaining(TRUE);
          END;
        PackingStation."Default F3 Option"::"Custom 1":
          BEGIN
            ERROR(Text013);
          END;
        PackingStation."Default F3 Option"::"Custom 2":
          BEGIN
            ERROR(Text013);
          END;
        PackingStation."Default F3 Option"::"Custom 3":
          BEGIN
            ERROR(Text013);
          END;
        ELSE
          ERROR(Text014);
      END;
    END;

    LOCAL PROCEDURE ExportDoc@1240031001();
    BEGIN
      IF (PackingControl."Export Document No." = '') AND
         NOT FastPackLineTmp.FIND('-')
      THEN
        ERROR(Text016);
      PackingControl."Error Message" := '';
      IF NOT PackageMgt.ExportDoc(PackingControl,TRUE) AND
         (PackingControl."Error Message" <> '')
      THEN
        ERROR(PackingControl."Error Message");
    END;

    LOCAL PROCEDURE ViewExportDoc@1240031000();
    BEGIN
      PackingControl."Error Message" := '';
      PackageMgt.ViewExportDoc(PackingControl);
    END;

    PROCEDURE UpdateExportDocDetail@1240030012();
    BEGIN
      PackingControl."Error Message" := '';
      PackageMgt.UpdateExportDocDetail(PackingControl);
    END;

    LOCAL PROCEDURE NoAESRequired@1240030005();
    BEGIN
      PackingControl."No AES Required" := TRUE;
    END;

    LOCAL PROCEDURE PackingControlPrepackOnAfterVa@19033637();
    BEGIN
      PackageMgt.UpdateShippingAgent(
        PackingControl,BillOfLading,ShippingAgent);
      PackageMgt.ShowShippingAgentClosedPackage(BillOfLading,Package,PackingControl);
    END;

    LOCAL PROCEDURE OnTimer@19019642();
    BEGIN
      IF (PackingStation."Scale Update Interval (second)" = 0) OR
         (PackingStation."Show What During Packing" <>
          PackingStation."Show What During Packing"::"Scale Weight")
      THEN
        EXIT;
      TimerCount := TimerCount + 1;
      IF TimerCount > PackingStation."Scale Update Interval (second)" THEN BEGIN
        UpdateScaleWeight;
        TimerCount := 0;
      END;
    END;

    BEGIN
    END.
  }
}

