OBJECT Page 14000667 Pack Line Scanning 2
{
  OBJECT-PROPERTIES
  {
    Date=06/28/17;
    Time=12:00:00 PM;
    Version List=SE0.54.10;
  }
  PROPERTIES
  {
    CaptionML=ENU=Pack Line Scanning;
    PageType=Card;
    TimerUpdate=1;
    OnOpenPage=BEGIN
                 SetCurrentValues;
                 PackLineScanningMgt.OnOpenFormCode;
                 GetCurrentValues;
               END;

    OnQueryClosePage=BEGIN
                       IF PackingControl."Order Open" AND PackingStation."Confirm Pack Line Scan. Close" THEN
                         EXIT(CONFIRM(Text052,FALSE))
                       ELSE
                         EXIT(TRUE);
                     END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 38      ;1   ;ActionGroup;
                      CaptionML=ENU=F&unctions }
      { 41      ;2   ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=ENU=Card;
                      Image=EditLines;
                      OnAction=BEGIN
                                 SetCurrentValues;
                                 PackLineScanningMgt.ShowCard;
                                 GetCurrentValues;
                               END;
                                }
      { 40      ;2   ;Action    ;
                      ShortCutKey=F7;
                      CaptionML=ENU=Packing Statistics;
                      RunObject=Page 14000676 }
      { 42      ;2   ;Action    ;
                      CaptionML=ENU=List Orders / &Missing Order Lines;
                      OnAction=BEGIN
                                 IF PackingControl."Order Open" THEN BEGIN
                                   PackingStation.TESTFIELD("Missing Order Lines Command");

                                   SetCurrentValues;
                                   PackLineScanningMgt.MissingOrderLines;
                                   GetCurrentValues;
                                 END ELSE BEGIN
                                   PackingStation.TESTFIELD("List Orders Command");

                                   SetCurrentValues;
                                   PackLineScanningMgt.ListOrders;
                                   GetCurrentValues;
                                 END;
                               END;
                                }
      { 1240030000;2 ;ActionGroup;
                      CaptionML=ENU=Default }
      { 1240030001;3 ;Action    ;
                      CaptionML=ENU=Option;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Default F3 Option");

                                 SetCurrentValues;
                                 PackLineScanningMgt.DefaultOption(PackingStation."Default F3 Option");
                                 GetCurrentValues;
                               END;
                                }
      { 1240030002;3 ;Action    ;
                      ShortCutKey=Shift+F3;
                      CaptionML=ENU=Shift Option;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Default Shift+F3 Option");

                                 SetCurrentValues;
                                 PackLineScanningMgt.DefaultOption(PackingStation."Default Shift+F3 Option");
                                 GetCurrentValues;
                               END;
                                }
      { 1240030003;3 ;Action    ;
                      ShortCutKey=Ctrl+F11;
                      CaptionML=ENU=Ctrl Option;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Default Ctrl+F3 Option");

                                 SetCurrentValues;
                                 PackLineScanningMgt.DefaultOption(PackingStation."Default Ctrl+F3 Option");
                                 GetCurrentValues;
                               END;
                                }
      { 1240030004;3 ;Action    ;
                      ShortCutKey=Alt+F3;
                      CaptionML=ENU=Alt Option;
                      OnAction=BEGIN
                                 PackingStation.TESTFIELD("Default Alt+F3 Option");

                                 SetCurrentValues;
                                 PackLineScanningMgt.DefaultOption(PackingStation."Default Alt+F3 Option");
                                 GetCurrentValues;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 19  ;1   ;Field     ;
                SourceExpr=Package."Shipping Agent Code" + ' ' + Package."Shipping Agent Service";
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 20  ;1   ;Group     ;
                CaptionML=ENU=Ship-To Address }

    { 5   ;2   ;Field     ;
                SourceExpr=FormatSource;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 9   ;2   ;Field     ;
                SourceExpr=PackingControl."Ship-to Name";
                Editable=FALSE }

    { 11  ;2   ;Field     ;
                SourceExpr=PackingControl."Ship-to Address";
                Editable=FALSE }

    { 13  ;2   ;Field     ;
                SourceExpr=PackingControl."Ship-to Address 2";
                Editable=FALSE }

    { 15  ;2   ;Field     ;
                SourceExpr=PackingControl."Ship-to City" + ',' + PackingControl."Ship-to State" + '  ' + PackingControl."Ship-to ZIP Code";
                Editable=FALSE }

    { 8   ;1   ;Field     ;
                CaptionML=ENU=Package No.;
                SourceExpr=Package."No.";
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 6   ;1   ;Field     ;
                CaptionML=ENU=No. / Total;
                BlankZero=Yes;
                SourceExpr=FORMAT(Package."Package No.") + ' OF ' + FORMAT(Package."Total Packages");
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 3   ;1   ;Field     ;
                CaptionML=ENU=Order;
                DecimalPlaces=0:0;
                SourceExpr=PackingControl."Order Message";
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 4   ;1   ;Field     ;
                CaptionML=ENU=Package;
                DecimalPlaces=0:0;
                SourceExpr=PackingControl."Package Message";
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 16  ;1   ;Field     ;
                CaptionML=ENU=Calculation Wgt.;
                SourceExpr=Package."Calculation Weight";
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 25  ;1   ;Field     ;
                CaptionML=ENU=Shipping Charge;
                SourceExpr=Package."Shipping Charge";
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 12  ;1   ;Field     ;
                SourceExpr=InputLine;
                Style=Strong;
                StyleExpr=TRUE;
                OnValidate=BEGIN
                             IF InputLine <> '' THEN BEGIN
                               SetCurrentValues;
                               PackLineScanningMgt.ParseInput(InputLine);
                               GetCurrentValues;
                             END;
                               InputLineOnAfterValidate;
                           END;
                            }

    { 21  ;1   ;Field     ;
                CaptionClass=FORMAT (PackingControl."Message Line");
                Editable=FALSE;
                MultiLine=Yes }

    { 1240030005;1;Part   ;
                Name=PackageLines;
                PagePartID=Page14000666 }

    { 31  ;1   ;Field     ;
                CaptionClass=FORMAT (PackingControl."Line Description");
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 27  ;1   ;Field     ;
                CaptionML=ENU=Order Qty. Packed;
                DecimalPlaces=0:5;
                SourceExpr=FORMAT(PackingControl."Packed Order Qty. (Base)") + ' OF ' + FORMAT(PackingControl."Total Order Qty. (Base)");
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 33  ;1   ;Field     ;
                CaptionML=ENU=Line Qty. Packed;
                DecimalPlaces=0:5;
                SourceExpr=FORMAT(PackingControl."Packed Line Qty. (Base)") + ' OF ' + FORMAT(PackingControl."Total Line Qty. (Base)");
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1906437507;1;Part   ;
                SubPageLink=No.=FIELD(Package No.);
                PagePartID=Page14050125;
                ProviderID=1240030005;
                Visible=TRUE;
                PartType=Page }

    { 1900223107;1;Part   ;
                SubPageLink=No.=FIELD(Package No.);
                PagePartID=Page14050129;
                ProviderID=1240030005;
                Visible=TRUE;
                PartType=Page }

  }
  CODE
  {
    VAR
      Package@1000000000 : Record 14000701;
      ShippingSetup@1000000001 : Record 14000707;
      PackingStation@1000000002 : Record 14000709;
      PackingControl@1000000010 : Record 14000717;
      PackLineScanningMgt@1240030000 : Codeunit 14000710;
      InputLine@1000000012 : Text[250];
      TimerCount@1000000015 : Integer;
      CommandAlreadyReceived@1240030009 : Boolean;
      Text052@1240030014 : TextConst 'ENU=Close Pack Line Scanning';
      GlobalRecordsLoaded@1240030001 : Boolean;

    LOCAL PROCEDURE SetCurrentValues@1240030007();
    BEGIN
      IF GlobalRecordsLoaded THEN
        GetCurrentValues;

      PackLineScanningMgt.SetValues(
        PackingControl,ShippingSetup,PackingStation,Package);
      GlobalRecordsLoaded := TRUE;
    END;

    LOCAL PROCEDURE GetCurrentValues@1240030006();
    VAR
      PackageLine@1240030000 : Record 14000702;
      CurrFormClose@1240030002 : Boolean;
      CurrFormScaleWeightUpdate@1240030001 : Boolean;
    BEGIN
      PackLineScanningMgt.GetValues(
        PackingControl,ShippingSetup,PackingStation,Package,CurrFormClose,
        CurrFormScaleWeightUpdate);
      GlobalRecordsLoaded := FALSE;

      IF CurrFormClose THEN
        CurrPage.CLOSE;

      PackageLine.RESET;
      IF PackingControl."Package Open" THEN
        PackageLine.SETRANGE("Package No.",Package."No.")
      ELSE
        PackageLine.SETRANGE("Package No.",'X Y Z');
      CurrPage.PackageLines.PAGE.LoadPackageLines(PackageLine,PackingControl);
    END;

    PROCEDURE OpenWithOrder@68(SetOpenSourceType@1240030000 : Integer;SetOpenSourceSubtype@1240030001 : Integer;SetOpenSourceID@1240030002 : Code[20];SetCloseWhenCloseOrder@1240030003 : Boolean);
    BEGIN
      PackingControl."Open Source Type" := SetOpenSourceType;
      PackingControl."Open Source Subtype" := SetOpenSourceSubtype;
      PackingControl."Open Source ID" := SetOpenSourceID;
      PackingControl."Close When Close Order" := SetCloseWhenCloseOrder;
    END;

    PROCEDURE ReceiveInputLine@1240030001(NewInputLine@1240030000 : Text[250]);
    BEGIN
      IF NOT CommandAlreadyReceived THEN BEGIN
        SetCurrentValues;
        PackLineScanningMgt.OnOpenFormCode;
        GetCurrentValues;

        CommandAlreadyReceived := TRUE;
      END;

      SetCurrentValues;
      PackLineScanningMgt.ParseInput(NewInputLine);
      GetCurrentValues;
    END;

    LOCAL PROCEDURE FormatSource@1240030000() : Text[1000];
    BEGIN
      IF GlobalRecordsLoaded THEN
        GetCurrentValues;

      EXIT(
        PackingControl.FormatSource(
          PackingControl."Source Type",PackingControl."Source Subtype",
          PackingControl."Multi Document No."));
    END;

    LOCAL PROCEDURE InputLineOnAfterValidate@19076879();
    BEGIN
      SetCurrentValues;
      PackLineScanningMgt.UpdateDisplayValue;
      GetCurrentValues;

      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE InputLineOnAfterInput@19010624(VAR Text@19010625 : Text[1024]);
    BEGIN
      Text := UPPERCASE(Text);
    END;

    LOCAL PROCEDURE OnTimer@19019642();
    BEGIN
      IF (PackingStation."Scale Update Interval (second)" = 0) OR
         (PackingStation."Show What During Packing" <>
          PackingStation."Show What During Packing"::"Scale Weight")
      THEN
        EXIT;

      TimerCount := TimerCount + 1;
      IF TimerCount > PackingStation."Scale Update Interval (second)" THEN BEGIN
        TimerCount := 0;
        SetCurrentValues;
        PackLineScanningMgt.UpdateScaleWeight;
        GetCurrentValues;
      END;
    END;

    BEGIN
    END.
  }
}

