OBJECT Page 14098060 AFP Historical Inventory Value
{
  OBJECT-PROPERTIES
  {
    Date=03/27/19;
    Time=12:00:00 PM;
    Version List=UBP3.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Historical Inventory Value;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    DelayedInsert=No;
    PageType=CardPart;
    ShowFilter=No;
    ActionList=ACTIONS
    {
      { 1240020000;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1240020001;1 ;Action    ;
                      Name=Set Location Filter;
                      OnAction=BEGIN
                                 SetLocationFilter;
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 1240020002;1 ;Action    ;
                      Name=Clear Filter;
                      OnAction=BEGIN
                                 ClearLocationFilter;
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=Container;
                ContainerType=ContentArea }

    { 3   ;1   ;Field     ;
                CaptionML=ENU=Location Filter;
                SourceExpr=LocationFilter;
                OnValidate=BEGIN
                             GetData;
                           END;
                            }

    { 2   ;1   ;Field     ;
                Name=chart;
                StyleExpr=TRUE;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.BusinessChart;PublicKeyToken=31bf3856ad364e35] }

  }
  CODE
  {
    VAR
      BusinessChartBuffer@1000 : Record 485;
      AFPChart@1001 : Codeunit 14098060;
      LocationFilter@1002 : Code[250];
      ChartConstructed@1240020000 : Boolean;

    LOCAL PROCEDURE SetLocationFilter@1240020000();
    VAR
      Location@1240020000 : Record 14;
      LocationList@1240020001 : Page 15;
    BEGIN
      Location.SETRANGE("Enable Adv. Forecasting", TRUE);
      Location.SETRANGE("Use As In-Transit", FALSE);
      LocationList.SETTABLEVIEW(Location);
      LocationList.LOOKUPMODE(TRUE);
      IF LocationList.RUNMODAL IN [ACTION::LookupOK, ACTION::OK] THEN BEGIN
        LocationList.GETRECORD(Location);
        LocationFilter := Location.Code;
        GetData;
      END;
    END;

    LOCAL PROCEDURE ClearLocationFilter@1240020005();
    BEGIN
      LocationFilter := '';
      GetData;
    END;

    PROCEDURE GetData@1();
    BEGIN
      IF NOT ChartConstructed THEN
        EXIT;
      CLEAR(AFPChart);
      AFPChart.GetInventoryValueData(BusinessChartBuffer,LocationFilter);
      BusinessChartBuffer.Update(CurrPage.chart);
    END;

    EVENT chart@-2::DataPointClicked@13(point@1000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartDataPoint");
    BEGIN
      BusinessChartBuffer.SetDrillDownIndexes(point);
      AFPChart.DrillDownInventoryValueData(BusinessChartBuffer, LocationFilter);
    END;

    EVENT chart@-2::DataPointDoubleClicked@14(point@1000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartDataPoint");
    BEGIN
    END;

    EVENT chart@-2::AddInReady@15();
    BEGIN
      IF NOT ChartConstructed THEN BEGIN
        ChartConstructed := TRUE;
      GetData;
      END;
    END;

    BEGIN
    END.
  }
}

