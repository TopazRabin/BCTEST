OBJECT Page 23044507 IWX Barcode Rules
{
  OBJECT-PROPERTIES
  {
    Date=03/31/20;
    Time=[ 9:19:10 AM];
    Version List=IWX2.4.7684.0;
  }
  PROPERTIES
  {
    CaptionML=[ENU=IWX Barcode Rules;
               ESM=IWX Reglas de c¢digo de barras;
               FRC=IWX RŠgles de code … barres;
               ENC=IWX Barcode Rules];
    SourceTable=Table23044509;
    SourceTableView=SORTING(Run Order,Enabled);
    PageType=List;
    PromotedActionCategoriesML=[ENU=New,Process,Report,Test;
                                ENC=New,Process,Report,Test];
    ActionList=ACTIONS
    {
      { 1000000033;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1000000034;1 ;Action    ;
                      Name=acFindItem;
                      CaptionML=[ENU=Test All Rules;
                                 ESM=Probar todas las reglas;
                                 FRC=Testez toutes les rŠgles;
                                 ENC=Test All Rules];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Confirm;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 testDecode( FALSE );
                               END;
                                }
      { 1000000037;1 ;Action    ;
                      Name=acFindAndUpdate;
                      CaptionML=[ENU=Test Rule From Barcode And Set Results;
                                 ESM=Probar la regla de c¢digo de barras y definir resultados;
                                 FRC=Tester rŠgle du code … barres et d‚finir les r‚sultats;
                                 ENC=Test Rule From Barcode And Set Results];
                      Promoted=Yes;
                      Visible=FALSE;
                      PromotedIsBig=Yes;
                      Image=AutoReserve;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 testDecode( TRUE );
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1000000000;;Container;
                ContainerType=ContentArea }

    { 1000000032;1;Group  ;
                CaptionML=[ENU=Execute Test;
                           ESM=Prueba de Funcionamiento;
                           FRC=Ex‚cuter test;
                           ENC=Execute Test];
                GroupType=Group }

    { 1000000031;2;Field  ;
                Width=400;
                CaptionML=[ENU=Barcode Data;
                           ESM=Los datos de c¢digo de barras;
                           FRC=" les donn‚es du code … barres";
                           ENC=Barcode Data];
                ToolTipML=ENU=The barcode to test.;
                SourceExpr=txtBarcode }

    { 1000000001;1;Group  ;
                GroupType=Repeater }

    { 1000000002;2;Field  ;
                ToolTipML=ENU=Specifies the primary key of the table as an integer.  A value is inserted automatically and is automatically incremented.;
                SourceExpr="Rule ID" }

    { 1000000003;2;Field  ;
                ToolTipML=ENU=Specifies the order in which the barcode rules are run, from lowest to highest.;
                SourceExpr="Run Order" }

    { 1000000004;2;Field  ;
                ToolTipML=ENU=Contains the regular expression for the barcode rule.;
                SourceExpr="Find Text" }

    { 1000000005;2;Field  ;
                ToolTipML=ENU=Specifies information regarding what the barcode rule is intended to find.;
                SourceExpr=Description }

    { 1000000006;2;Field  ;
                ToolTipML=ENU=Specifies whether a barcode rule should be tested against.;
                SourceExpr=Enabled }

    { 1000000038;2;Field  ;
                ToolTipML=ENU=Specifies the type of circumstance a barcode rule will be tested.;
                SourceExpr=Context }

    { 1000000039;2;Field  ;
                SourceExpr="Validate Serial No." }

    { 1000000040;2;Field  ;
                SourceExpr="Validate Lot No." }

    { 1000000041;2;Field  ;
                SourceExpr="Persistent Item";
                Visible=FALSE }

    { 1000000042;2;Field  ;
                SourceExpr="Persistent Variant";
                Visible=FALSE }

    { 1000000007;2;Field  ;
                ToolTipML=ENU=If set the barcode will be parsed and this value will be used to find the matching item.;
                SourceExpr="Item No. Expression" }

    { 1000000008;2;Field  ;
                ToolTipML=ENU=If set the barcode will be parsed and this value will be used to find the matching item based on the No. 2 field.;
                SourceExpr="Item No. 2 Expression" }

    { 1000000009;2;Field  ;
                ToolTipML=ENU=If set the barcode will be parsed and this value will passed back in the decoded barcode as the variant.;
                SourceExpr="Variant Expression" }

    { 1000000010;2;Field  ;
                ToolTipML=ENU=If set the barcode will be parsed and this value will passed back in the decoded barcode as the serial number.;
                SourceExpr="Serial No. Expression" }

    { 1000000011;2;Field  ;
                ToolTipML=ENU=If set the barcode will be parsed and this value will passed back in the decoded barcode as the lot number.;
                SourceExpr="Lot No. Expression" }

    { 1000000012;2;Field  ;
                ToolTipML=ENU=If set the barcode will be parsed and this value will passed back in the decoded barcode as the expiry date.;
                SourceExpr="Expiry Date Expression" }

    { 1000000013;2;Field  ;
                ToolTipML=ENU=If set the barcode will be parsed and this value will be used to find the matching item in the item cross references.;
                SourceExpr="Cross-Ref. Expression" }

    { 1000000035;2;Field  ;
                ToolTipML=ENU=If set the barcode will be parsed and this value will passed back in the decoded barcode as the unit of measure.;
                SourceExpr="UOM Expression" }

    { 1000000014;2;Field  ;
                ToolTipML=ENU=If set the barcode will be parsed and this value will be used in a custom decode codeunit.;
                SourceExpr="Custom 1 Expression" }

    { 1000000015;2;Field  ;
                ToolTipML=ENU=If set the barcode will be parsed and this value will be used in a custom decode codeunit.;
                SourceExpr="Custom 2 Expression" }

    { 1000000016;2;Field  ;
                ToolTipML=ENU=If set the barcode will be parsed and this value will be used in a custom decode codeunit.;
                SourceExpr="Custom 3 Expression" }

    { 1000000043;2;Field  ;
                ToolTipML=ENU=If set the barcode will be parsed and this value will passed back in the decoded barcode as the quantity.;
                SourceExpr="Quantity Expression" }

    { 1000000017;2;Field  ;
                ToolTipML=ENU=Contains an example barcode to illustrate how the particular barcode rule will function.;
                SourceExpr="Sample Text" }

    { 1000000018;2;Field  ;
                ToolTipML=ENU=The Item No. Expression result when decoded.;
                SourceExpr="Item No. Result";
                Editable=FALSE }

    { 1000000019;2;Field  ;
                ToolTipML=ENU=The Item No. 2 result when decoded.;
                SourceExpr="Item No. 2 Result";
                Editable=FALSE }

    { 1000000020;2;Field  ;
                ToolTipML=ENU=The Variant Expression result when decoded.;
                SourceExpr="Variant Result";
                Editable=FALSE }

    { 1000000021;2;Field  ;
                ToolTipML=ENU=The Serial No. Expression result when decoded.;
                SourceExpr="Serial No. Result";
                Editable=FALSE }

    { 1000000022;2;Field  ;
                ToolTipML=ENU=The Lot No. Expression result when decoded.;
                SourceExpr="Lot No. Result";
                Editable=FALSE }

    { 1000000023;2;Field  ;
                ToolTipML=ENU=The Expiry Date Expression result when decoded.;
                SourceExpr="Expiry Date Result";
                Editable=FALSE }

    { 1000000024;2;Field  ;
                ToolTipML=ENU=The Cross-Ref. Expression result when decoded.;
                SourceExpr="Cross-Ref. Result";
                Editable=FALSE }

    { 1000000036;2;Field  ;
                ToolTipML=ENU=The UOM Expression result when decoded.;
                SourceExpr="UOM Result" }

    { 1000000025;2;Field  ;
                ToolTipML=ENU=The Custom 1 Expression result when decoded.;
                SourceExpr="Custom 1 Result";
                Editable=FALSE }

    { 1000000026;2;Field  ;
                ToolTipML=ENU=The Custom 2 Expression result when decoded.;
                SourceExpr="Custom 2 Result";
                Editable=FALSE }

    { 1000000027;2;Field  ;
                ToolTipML=ENU=The Custom 3 Expression result when decoded.;
                SourceExpr="Custom 3 Result";
                Editable=FALSE }

    { 1000000044;2;Field  ;
                ToolTipML=ENU=The Quantity Expression result when decoded.;
                SourceExpr="Quantity Result" }

    { 1000000030;0;Container;
                ContainerType=FactBoxArea }

    { 1000000029;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1000000028;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      txtBarcode@1000000001 : Text[100];
      cuDecodeRuleMgmt@1000000000 : Codeunit 23044517;
      tc001@1000000003 : TextConst 'ENU=Item found (Rule ID: %1)\Item No: %2\Variant: %3\Serial: %4\Lot: %5\Expiry Date: %6\Quantity: %7\UOM: %8\Cross-Ref: %9;ENC=Item found (Rule ID: %1)\Item No: %2\Variant: %3\Serial: %4\Lot: %5\Expiry Date: %6\Quantity: %7\UOM: %8\Cross-Ref: %9';
      tc002@1000000002 : TextConst 'ENU=Item NOT found.;ENC=Item NOT found.';

    PROCEDURE testDecode@1000000000(pbUpdateBarcodeRuleWithSample@1000000003 : Boolean);
    VAR
      lrecItem@1000000000 : Record 27;
      lrecBarcodeRule@1000000001 : Record 23044509;
      lbFound@1000000002 : Boolean;
    BEGIN
      // Test Code
      lrecBarcodeRule.COPYFILTERS(Rec);

      lbFound := cuDecodeRuleMgmt.decodeItemBarcode(
        txtBarcode,
        lrecBarcodeRule,
        lrecItem,
        lrecBarcodeRule.Context::Generic,
        '',
        ''
        );

      IF lbFound THEN BEGIN
        IF ( pbUpdateBarcodeRuleWithSample ) THEN BEGIN
          lrecBarcodeRule.MODIFY();
        END;
        Rec.SETRANGE("Rule ID", lrecBarcodeRule."Rule ID" );
        Rec.FIND('-');
        Rec.RESET();
        Rec.FIND();

        MESSAGE(tc001,
          lrecBarcodeRule."Rule ID",
          lrecItem."No.",
          lrecBarcodeRule."Variant Result",
          lrecBarcodeRule."Serial No. Result",
          lrecBarcodeRule."Lot No. Result",
          lrecBarcodeRule."Expiry Date Result",
          lrecBarcodeRule."Quantity Result",
          lrecBarcodeRule."UOM Result",
          lrecBarcodeRule."Cross-Ref. Result"
          );

      END ELSE
        MESSAGE(tc002);
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
    }
    END.
  }
}

