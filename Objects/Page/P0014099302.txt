OBJECT Page 14099302 E.D.I. XML Node Values
{
  OBJECT-PROPERTIES
  {
    Date=07/13/20;
    Time=12:00:00 PM;
    Version List=SE0.62;
  }
  PROPERTIES
  {
    CaptionML=ENU=Node Values;
    MultipleNewLines=Yes;
    SourceTable=Table14002355;
    DelayedInsert=Yes;
    PageType=List;
    AutoSplitKey=Yes;
    OnOpenPage=BEGIN
                 DocumentCaption := CurrPage.CAPTION;
                 IF EDIDocument.GET(
                   "Trade Partner No.","Navision Document","EDI Document No.",Version,Type)
                 THEN BEGIN
                   IF EDIDocument."XML Document" THEN BEGIN
                     AttributeVisible := TRUE;
                     "Attribute NameVisible" := TRUE;
                     "Node TextVisible" := TRUE;
                     "XML FixedValueVisible" := TRUE;
                     "Fixed ValueVisible" := FALSE;
                   END ELSE BEGIN
                     AttributeVisible := FALSE;
                     "Attribute NameVisible" := FALSE;
                     "Node TextVisible" := FALSE;
                     "XML FixedValueVisible" := FALSE;
                     "Fixed ValueVisible" := TRUE;
                   END;
                 END;
               END;

    OnAfterGetRecord=BEGIN
                       IF ISSERVICETIER THEN BEGIN
                         CurrPage.CAPTION := '';
                         IF "Node Name" = '' THEN
                           CurrPage.CAPTION :=
                             DocumentCaption + ' - ' + "Trade Partner No." + ' ' + "EDI Document No." + ' ' + Segment
                         ELSE
                          CurrPage.CAPTION :=
                             DocumentCaption + '-' + "Trade Partner No." + ' ' + "EDI Document No." + ' ' +"Node Name";
                       END ELSE BEGIN
                         CurrPage.CAPTION := '';
                         IF "Node Name" = '' THEN
                           CurrPage.CAPTION :=
                             "Trade Partner No." + ' ' + "EDI Document No." + ' ' + Segment + ' - ' + DocumentCaption
                         ELSE
                           CurrPage.CAPTION :=
                             "Trade Partner No." + ' ' + "EDI Document No." + ' ' + "Node Name" + ' - ' + DocumentCaption;
                       END;

                       IF EDIDocument.GET(
                         "Trade Partner No.","Navision Document","EDI Document No.",Version,Type)
                       THEN BEGIN
                         IF EDIDocument."XML Document" THEN BEGIN
                           AttributeVisible := TRUE;
                           "Attribute NameVisible" := TRUE;
                           "Node TextVisible" := TRUE;
                           "XML FixedValueVisible" := TRUE;
                           "Fixed ValueVisible" := FALSE;
                         END ELSE BEGIN
                           AttributeVisible := FALSE;
                           "Attribute NameVisible" := FALSE;
                           "Node TextVisible" := FALSE;
                           "XML FixedValueVisible" := FALSE;
                           "Fixed ValueVisible" := TRUE;
                         END;
                       END;
                       OnAfterGetCurrRecord;
                     END;

    OnNewRecord=BEGIN
                  OnAfterGetCurrRecord;
                END;

    OnInsertRecord=BEGIN
                     InsertedByPage(TRUE);
                   END;

    OnQueryClosePage=BEGIN
                       EDIElement.RESET;
                       EDIElement.SETRANGE("Trade Partner No.","Trade Partner No.");
                       EDIElement.SETRANGE("Navision Document","Navision Document");
                       EDIElement.SETRANGE("EDI Document No.","EDI Document No.");
                       EDIElement.SETRANGE(Version,Version);
                       EDIElement.SETRANGE(Type,Type);
                       EDIElement.SETRANGE(Segment,Segment);
                       EDIElement.SETRANGE("Element Mapping Error",TRUE);
                       IF EDIElement.FIND('-') THEN BEGIN
                         MappingError := TRUE;
                         MappingErrorCount := EDIElement.COUNT;
                       END ELSE BEGIN
                         MappingError := FALSE;
                         MappingErrorCount := 0;
                       END;
                       EDIElement.RESET;
                       EDIElement.SETRANGE("Trade Partner No.","Trade Partner No.");
                       EDIElement.SETRANGE("Navision Document","Navision Document");
                       EDIElement.SETRANGE("EDI Document No.","EDI Document No.");
                       EDIElement.SETRANGE(Version,Version);
                       EDIElement.SETRANGE(Type,Type);
                       EDIElement.SETRANGE(Segment,Segment);
                       EDIElement.SETRANGE(Length,0);
                       EDIElement.SETRANGE("Bypass Segment if Blank",FALSE);
                       EDIElement.SETRANGE("Bypass Segment if Not Blank",FALSE);
                       IF EDIElement.FIND('-') THEN BEGIN
                         IF "Node Name" <> '' THEN
                           IF (EDIElement.COUNT = 1) AND (EDIElement.Element = '') THEN
                             LengthError := FALSE
                           ELSE BEGIN
                             LengthError := TRUE;
                             LengthErrorCount := EDIElement.COUNT;
                           END
                         ELSE BEGIN
                           LengthError := TRUE;
                           LengthErrorCount := EDIElement.COUNT;
                         END;
                       END ELSE BEGIN
                         LengthError := FALSE;
                         LengthErrorCount := 0;
                       END;
                       CASE TRUE OF
                         MappingError AND LengthError:
                            IF NOT CONFIRM(
                             STRSUBSTNO(Text001,MappingErrorCount,LengthErrorCount) +
                             Text004)
                           THEN
                             EXIT(FALSE)
                           ELSE
                             EXIT(TRUE);
                         MappingError:
                          IF NOT CONFIRM(
                             STRSUBSTNO(Text002,MappingErrorCount) +
                             Text004)
                           THEN
                             EXIT(FALSE)
                           ELSE
                             EXIT(TRUE);
                         LengthError:
                           IF NOT CONFIRM(
                             STRSUBSTNO(Text003,LengthErrorCount) +
                             Text004)
                           THEN
                             EXIT(FALSE)
                           ELSE
                             EXIT(TRUE);
                       END;
                     END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 38      ;1   ;ActionGroup;
                      CaptionML=ENU=&XML Node Values }
      { 55      ;2   ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=ENU=&Conditionals;
                      RunObject=Page 14099303;
                      RunPageLink=Trade Partner No.=FIELD(Trade Partner No.),
                                  Navision Document=FIELD(Navision Document),
                                  EDI Document No.=FIELD(EDI Document No.),
                                  Version=FIELD(Version),
                                  Type=FIELD(Type),
                                  Processing Sequence=FIELD(Processing Sequence),
                                  Segment=FIELD(Segment),
                                  Element=FIELD(Element);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=GetLines;
                      PromotedCategory=Process }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 3       ;1   ;ActionGroup;
                      CaptionML=ENU=F&unctions }
      { 8       ;2   ;Action    ;
                      CaptionML=ENU=EDI &Outgoing Virtual Fields;
                      RunObject=Page 14002359;
                      RunPageLink=Navision Document=FIELD(Navision Document),
                                  Field Type=FILTER(EDI Out);
                      Image=Export }
      { 9       ;2   ;Action    ;
                      CaptionML=ENU=EDI &Incoming Virtual Fields;
                      RunObject=Page 14002359;
                      RunPageLink=Field Type=FILTER(EDI In);
                      Image=Import }
      { 1240030016;2 ;Action    ;
                      CaptionML=ENU=&General Cross References;
                      Image=ImportExport;
                      OnAction=BEGIN
                                 CLEAR(EvaluateCrossReference);
                                 EvaluateCrossReference.ShowGeneralCrossReference("Trade Partner No.");
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 1240020001;2;Field  ;
                CaptionML=ENU=Reference ID;
                ToolTipML=ENU=Number used to identify the XML Node Value within a Node.;
                SourceExpr=Element }

    { 1240020017;2;Field  ;
                SourceExpr="Document Namespace" }

    { 1240020013;2;Field  ;
                ToolTipML=ENU=For cXML/XML inbound/outbound mapping, enabled when the value is a Node.  A Node Text represents the text content of an XML Node Value.;
                SourceExpr="Node Text" }

    { 1240020015;2;Field  ;
                ToolTipML=ENU=For cXML/XML inbound/outbound mapping, enabled when the value is an Attribute.  An Attribute contains data related to an XML Node Value.;
                SourceExpr=Attribute }

    { 36  ;2   ;Field     ;
                ToolTipML=ENU=For inbound mapping, the flag will be displayed if Conditional logic has been entered for the Node Value.;
                SourceExpr=Conditional }

    { 4   ;2   ;Field     ;
                ToolTipML=ENU=Options are None, NAV, EDI IN, EDI OUT and SDQ. When the Origin - NAV, then used with the "NAV Table Name" and "Field Name" fields. For inbound, it is where data will be placed in NAV. For outbound, it is where data will be pulled from in NAV.;
                SourceExpr=Origin }

    { 51  ;2   ;Field     ;
                CaptionML=ENU=Node Value Mapping Error;
                ToolTipML=ENU=Indicates a mapping error at the element level. An error message will be displayed if importing or exporting documents with element mapping errors.;
                SourceExpr="Element Mapping Error" }

    { 53  ;2   ;Field     ;
                ToolTipML=ENU=Indicates a mapping error at the conditional level. An error message will be displayed if importing documents with conditional mapping errors.;
                SourceExpr="Conditional Mapping Error" }

    { 10  ;2   ;Field     ;
                ToolTipML=ENU=For inbound or outbound documents, where the "Origin" - NAV, specify the "NAV Table Name." Used with the "Field Name" field.;
                SourceExpr="NAV Table Name" }

    { 6   ;2   ;Field     ;
                ToolTipML=ENU=For inbound or outbound documents, where the "Origin" - NAV and the "NAV Table Name" is populate, specify the NAV "Field Name." Where the "Origin" - blank, it's a free-form field.;
                SourceExpr="Field Name" }

    { 1240020011;2;Field  ;
                ToolTipML=ENU=For cXML/XML inbound/outbound mapping, represents the Attribute Name.  The value is case sensitive and contain no spaces.;
                SourceExpr="Attribute Name" }

    { 1240020020;2;Field  ;
                ToolTipML=ENU=For inbound documents, used to replace a received EDI value with the predefined, fixed value from this field.;
                SourceExpr="Substitution Value";
                Visible=FALSE }

    { 32  ;2   ;Field     ;
                ToolTipML=ENU=For inbound and outbound documents, specify the maximum Length of the XML Node Value.;
                SourceExpr=Length;
                OnValidate=BEGIN
                             LengthOnAfterValidate;
                           END;
                            }

    { 30  ;2   ;Field     ;
                ToolTipML=ENU=For outbound documents, if a value is entered and the minimum is not met, the EDI Send Document will be flagged with a "Data Error" and prevent exporting the file.;
                SourceExpr="Minimum Length" }

    { 28  ;2   ;Field     ;
                ToolTipML=ENU=Beginning position of the data XML Node Value within the Node. It is a rolling total of the summed "Length" field.;
                SourceExpr="Beginning Position";
                Visible=FALSE }

    { 34  ;2   ;Field     ;
                ToolTipML=ENU=Ending position of the data Element within the XML Node Value.;
                SourceExpr="End Position";
                Visible=FALSE }

    { 12  ;2   ;Field     ;
                ToolTipML=ENU=For inbound and outbound documents, specify the Data Type used to interpret the EDI data.;
                SourceExpr="Data Type" }

    { 1240020019;2;Field  ;
                ToolTipML=ENU=For outbound documents, use the NAV function to format a value into a string to create custom formats for "Data Type" of Date, Decimal and Time. Refer to the NAV reference help on how to format (ex. <Hours24>.<Minutes,2>.<Seconds,2> returns 4.35.55);
                SourceExpr="Format String" }

    { 1240020005;2;Field  ;
                ToolTipML=ENU=Used for formatting outbound XML time.  Options include Z and Offset.  Z represents the time zone as UTC (Coordinated Universal Time) whereas Offset represents the time zone offset from UTC.;
                SourceExpr="Time Zone" }

    { 1240020003;2;Field  ;
                ToolTipML=ENU=Specify the outbound fixed value to export in the XML file.;
                SourceExpr="XML Fixed Value";
                Visible="XML FixedValueVisible" }

    { 39  ;2   ;Field     ;
                CaptionML=ENU=Bypass Element if Blank;
                ToolTipML=ENU=For outbound documents, enable to bypass the entire Element if the flagged XML Node Value is zero or blank.;
                SourceExpr="Bypass Segment if Blank" }

    { 1240030000;2;Field  ;
                CaptionML=ENU=Bypass Element if Not Blank;
                ToolTipML=ENU=For outbound documents, enable to bypass the entire XML Node Value if the flagged Element is NOT zero or blank.;
                SourceExpr="Bypass Segment if Not Blank" }

    { 1240030002;2;Field  ;
                ToolTipML=ENU=For outbound documents, enable to bypass trailing XML Node Values at the end of the Node if the value is zero or blank.;
                SourceExpr="Bypass Blank Trailing Element" }

    { 14  ;2   ;Field     ;
                ToolTipML=ENU=For inbound documents, specify the number of decimals expected for the XML Node Value. For outbound documents, specify the the number of decimals used to format the output decimal field.;
                SourceExpr=Decimals }

    { 16  ;2   ;Field     ;
                ToolTipML=ENU=Typically used for Sterling file formats, select the option to justify the imported or exported data. Options are Left, Right or Right Zero Filled.;
                SourceExpr=Justify }

    { 2   ;2   ;Field     ;
                ToolTipML=ENU=For inbound documents, enable on the last Element that writes to the Sales/Purchase Lines.;
                SourceExpr=Trigger }

    { 24  ;2   ;Field     ;
                ToolTipML=ENU=For inbound documents, enable to allow XML Node Value to be Viewable from the Sales Order.;
                SourceExpr=Viewable }

    { 1240030004;2;Field  ;
                ToolTipML=ENU=For inbound and outbound documents, number of characters to copy when it is necessary to parse data.  Used with the "Copy String Length" field.;
                SourceExpr="Copy String Position" }

    { 1240030006;2;Field  ;
                ToolTipML=ENU=For inbound and outbound documents, where to begin the copy-from when it is necessary to parse data.  Used with the "Copy String Position" field.;
                SourceExpr="Copy String Length" }

    { 1240030008;2;Field  ;
                ToolTipML=ENU=For inbound documents, enable when multiple XML Node Values are mapped to the same NAV table and field, this field will merge the data together. May be used with the "Insert Into Field Contents" and "Insert Position" fields.;
                SourceExpr="Append to Field Contents" }

    { 1240030010;2;Field  ;
                ToolTipML=ENU=For inbound documents, enable when merged received EDI data from the "Append to Field Contents" field, needs to be inserted at a certain position within the data. Used with "Insert Position" field.;
                SourceExpr="Insert into Field Contents" }

    { 1240030012;2;Field  ;
                ToolTipML=ENU=For inbound documents, if "Append to Field Contents" and "Insert Into Field Contents" are enabled, set the numeric value of where inserted data should begin.;
                SourceExpr="Insert Position" }

    { 1240020012;2;Field  ;
                ToolTipML=ENU=For inbound documents, specify option to seperate multiple pieces of inserted data with a space or hyphen. Used with "Append to Field Contents" or "Insert into Field Contents" fields.;
                SourceExpr="Separator Type";
                Visible=TRUE }

    { 43  ;2   ;Field     ;
                ToolTipML=ENU=For inbound documents, enable when Node Value should print on the Formatted Receive Document Report.      The default layout is determined by number of Elements per Segment selected to print. Use Column, Columns Per Line, &New Line to override default.;
                SourceExpr=Print }

    { 45  ;2   ;Field     ;
                ToolTipML=ENU=For inbound generic documents (I_SLSGEN), specify the column number the EDI received data should print in for the Formatted Receive Document report. It is used to override default column settings.;
                SourceExpr=Column }

    { 47  ;2   ;Field     ;
                ToolTipML=ENU=For inbound generic documents (I_SLSGEN), specify the maximum columns per line to print on the Formatted Receive Document report. It is used to override default column settings on the report.;
                SourceExpr="Columns Per Line" }

    { 49  ;2   ;Field     ;
                ToolTipML=ENU=For inbound documents, enable when the XML Node Value should print on a new line with a carriage return line feed. Used to override the default new line settings on the Formatted Receive Document Report.;
                SourceExpr="New Line" }

    { 41  ;2   ;Field     ;
                ToolTipML=ENU=Informational field that is available for mapping.;
                SourceExpr="Item Description";
                Visible=FALSE }

    { 58  ;2   ;Field     ;
                ToolTipML=ENU=For inbound and outbound documents, enable when a decimal or integer value should be evaluated as the opposite sign.;
                SourceExpr="Reverse Sign" }

    { 1240030014;2;Field  ;
                ToolTipML=ENU=For inbound document, calculates the received EDI date based on the value contained in this field upon Sales Order creation, such as +5D (+5 days).;
                SourceExpr="Forecast Date Formula" }

    { 1240020000;2;Field  ;
                ToolTipML=ENU=For outbound documents, enable to export out data using the General Cross Reference table.  Used with the "General Cross Reference No." mapping tool.;
                SourceExpr="Reverse Cross Reference" }

    { 1240020002;2;Field  ;
                ToolTipML=ENU=For outbound documents, select the General Cross Ref No. for the mapped XML Node Value to send out the Cross Reference value on the EDI Send Document. Used with "Reverse Cross Reference" mapping tools.;
                SourceExpr="General Cross Reference No." }

    { 1240020004;2;Field  ;
                ToolTipML=ENU=Enable to import long text messages mapped to the Sales/Purchase Comment Lines where the comments are word wrapped. Can receive up to 4096 in character length;
                SourceExpr="Wrap Text" }

    { 1240020006;2;Field  ;
                ToolTipML=ENU=For outbound document, specify the rounding value to round up, down or to the nearest value. Used with "Round Direction" mapping tools.;
                SourceExpr="Round Value" }

    { 1240020008;2;Field  ;
                ToolTipML=ENU=For outbound document, enable to use the rounding logic, typically used Electronic Bill of Lading's for weight value. Used with "Round Value" mapping tools.;
                SourceExpr="Round Direction" }

    { 1240020010;2;Field  ;
                ToolTipML=ENU=For inbound documents, select the Line Type to convert the received EDI data from line "Type" - Item to the selected option. Options are G/L Account and Resource.;
                SourceExpr="Line Type" }

    { 1240020014;2;Field  ;
                ToolTipML=ENU=For outbound Sales Invoice (E_SLSINV), used to format the sent Sales Invoice No. to only include numeric characters.  Alpha and special characters, such as a hyphen, are eliminated.;
                SourceExpr="Format Numeric";
                Visible=FALSE }

    { 1240020016;2;Field  ;
                ToolTipML=ENU=For outbound Sales Invoice (E_SLSINV), used to format the sent Sales Invoice No. to only include alpha and numeric characters.  Special characters, such as a hyphen, are eliminated.;
                SourceExpr="Format AlphaNumeric";
                Visible=FALSE }

    { 56  ;2   ;Field     ;
                ToolTipML=ENU=For inbound and outbound EDIFACT file types, enable when a component seperator is needed as specified on the EDI Template's "Component Delimeter" or "Dec. Component Delimeter.";
                SourceExpr="Use Component Delimiter";
                Visible=FALSE }

    { 1240020018;2;Field  ;
                ToolTipML=ENU=For inbound documents, during Sales Order creation, the received EDI value is validated against what is in the option string. Sales Order creation is stopped if there is a mis-match.;
                SourceExpr="Validation Type" }

    { 1240020022;2;Field  ;
                ToolTipML=ENU=For inbound documents, typically used in a PrePack situation, to calculate the total quantity of the number of PrePack's times the number in the PrePack Item/Quantity combination, typically found in the SLN segment.;
                SourceExpr=Multiplier }

    { 1240020024;2;Field  ;
                ToolTipML=ENU=For outbound documents, enable to export the value in lowercase text.;
                SourceExpr=Lowercase }

    { 1240020026;2;Field  ;
                ToolTipML=ENU=For outbound consolidated SDQ invoices (E_SLSINV), enable for the mapped Quantity so a zero value is not exported within the SDQ XML Node Value.;
                SourceExpr="Blank Zero" }

    { 1240020009;2;Field  ;
                ToolTipML=ENU=Specifies the name of a Node, which is the same as the last path in the "Node List Path.";
                SourceExpr="Node Name";
                Visible=FALSE }

    { 1240020007;2;Field  ;
                ToolTipML=ENU=Options are ResponseID 1 - 5. The inbound XML mapped value to the EDI Receive Document's "Reference ID" field using the options is used to build a unique response ID value. Used with the "Reference Type" (ie, Order, Invoice) on the EDI Document page.;
                SourceExpr="Response ID Substitution" }

    { 1240020021;2;Field  ;
                SourceExpr="Disable General Cross Ref.";
                Visible=false }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1901364007;1;Part   ;
                CaptionML=ENU=E.D.I. Conditionals FactBox;
                SubPageLink=Trade Partner No.=FIELD(Trade Partner No.),
                            Navision Document=FIELD(Navision Document),
                            EDI Document No.=FIELD(EDI Document No.),
                            Type=FIELD(Type),
                            Version=FIELD(Version),
                            Segment=FIELD(Segment),
                            Element=FIELD(Element);
                PagePartID=Page14099307;
                Visible=TRUE;
                PartType=Page }

  }
  CODE
  {
    VAR
      EDIDocument@1240020001 : Record 14002353;
      EDIElement@1240020007 : Record 14002355;
      EvaluateCrossReference@1240030000 : Codeunit 14000380;
      DocumentCaption@1240020000 : Text[30];
      AttributeVisible@1240020002 : Boolean INDATASET;
      "Attribute NameVisible"@1240020003 : Boolean INDATASET;
      "Node TextVisible"@1240020004 : Boolean INDATASET;
      "Fixed ValueVisible"@1240020005 : Boolean INDATASET;
      "XML FixedValueVisible"@1240020006 : Boolean INDATASET;
      Text001@1240020015 : TextConst 'ENU=%1 mapping errors and %2 zero length mappings exist on this page.';
      Text002@1240020008 : TextConst 'ENU=%1 mapping errors exist on this page.';
      MappingError@1240020010 : Boolean;
      LengthError@1240020011 : Boolean;
      MappingErrorCount@1240020012 : Integer;
      LengthErrorCount@1240020013 : Integer;
      Text003@1240020014 : TextConst 'ENU=%1 zero length mappings exist on this page.';
      Text004@1240020009 : TextConst 'ENU=\Do you want to close the page?';

    LOCAL PROCEDURE LengthOnAfterValidate@19043825();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE OnAfterGetCurrRecord@19077479();
    BEGIN
      xRec := Rec;
      CALCFIELDS(Conditional);
    END;

    BEGIN
    END.
  }
}

