OBJECT Page 50000 Stock Status Worksheet
{
  OBJECT-PROPERTIES
  {
    Date=07/07/21;
    Time=[ 7:00:30 AM];
    Modified=Yes;
    Version List=TPZ000.00.00,003,TPZ2970,TPZ3090,3163,3189,006,3247;
  }
  PROPERTIES
  {
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table50000;
    SourceTableView=SORTING(Sorting Order)
                    ORDER(Ascending)
                    WHERE(Item No.=FILTER(<>''));
    PageType=ListPart;
    RefreshOnActivate=Yes;
    OnOpenPage=BEGIN

                 UserSetup.GET(USERID);
                 CompanyInformation.GET;
                 ;ESACC_EasySecurity(TRUE);
               END;

    OnAfterGetRecord=BEGIN
                       {IF sItemNo <> '' THEN BEGIN
                       "Item No." := sItemNo;
                       FIND('=');
                       END;}
                       CLEAR("Reason Code");
                       CLEAR("Reason Code Comment");
                       CLEAR("Lost Opportunity");
                       CLEAR("Lost Opportunity Description");  //TOP230 KT ABCSI CRP 2 Fixes 06092015
                       CLEAR("Last Reason Code");
                       CLEAR("Last Reason Code Comment");
                       CLEAR("Last Lost Opportunity");

                       //TOP010D KT ABCSI SSQQ Unit Price 07092015
                       CLEAR("Recomm. Unit Price");
                       CLEAR("Last Unit Price");
                       CLEAR("Last Price UOM");
                       CLEAR("Last Price Qty.");
                       CLEAR("Last Price Date");
                       //TOP010D KT ABCSI SSQQ Unit Price 07092015

                       //<TPZ2482>
                       // CLEAR("Location Code");
                        //CLEAR("Location Filter");
                       //</TPZ2482>

                       UpdateLine;
                       CALCFIELDS("Cust. Qty. on SO", "Qty. on Sales Order");
                         //EB <TPZ1545>
                        { CASE Blocked OF
                           Blocked = TRUE:
                             StyleTxt :='StandardAccent';
                           {
                           Blocked::"1":
                             StyleTxt :='Attention';
                           Blocked::"2":
                             StyleTxt :='Ambiguous';
                             }
                           //<TPZ2531>
                           {
                           Blocked::NPI:
                             StyleTxt :='favorable';
                             }
                             //</TPZ2531>
                           ELSE
                            StyleTxt:= 'standard';
                         END;} //UTKARSH
                         //<TPZ2531>

                         SetStyleABC; //UTKARSH
                           DefaultDimension.RESET;
                           IF DefaultDimension.GET(27,"Item No.",'PRODLIFECYCLE')THEN BEGIN
                           IF DefaultDimension."Dimension Value Code" = 'INTRO' THEN
                             StyleTxtABC := 'favorable' //UTK
                           //ELSE
                             //StyleTxtABC:= 'Standard'; //UTK
                           END;
                       //</TPZ2531>
                         //EB </TPZ1545>

                       //SetStyleABC;
                     END;

    OnAfterGetCurrRecord=BEGIN
                           UpdateLine;
                           CALCFIELDS("Cust. Qty. on SO", "Qty. on Sales Order");
                         END;

    ActionList=ACTIONS
    {
      { 1000000054;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1000000055;1 ;Action    ;
                      Name=Go Home;
                      ShortCutKey=F12;
                      Visible=ESACC_C1000000055_Visible;
                      Enabled=ESACC_C1000000055_Enabled;
                      Image=MoveUp;
                      OnAction=BEGIN
                                 FINDFIRST; //TOP010D KT ABCSI SSQQ Unit Price 07142015
                               END;
                                }
      { 1000000057;1 ;Action    ;
                      Name=Clear Filter;
                      ShortCutKey=Ctrl+m;
                      Visible=FALSE;
                      Scope=Page;
                      OnAction=BEGIN
                                 //MESSAGE('Clear Filter Message');
                                 CurrPage.ACTIVATE(TRUE);
                               END;
                                }
      { 1000000069;1 ;Action    ;
                      Name=FilterCAAllowed;
                      CaptionML=ENU=CA Allowed Filter;
                      Promoted=Yes;
                      Image=Filter;
                      OnAction=VAR
                                 Item@1000000011 : Record 27;
                                 TempFilteredItem@1000000010 : TEMPORARY Record 27;
                                 ItemAttributeManagement@1000000009 : Codeunit 7500;
                                 TypeHelper@1000000008 : Codeunit 10;
                                 CloseAction@1000000007 : Action;
                                 FilterText@1000000006 : Text;
                                 FilterPageID@1000000005 : Integer;
                                 ParameterCount@1000000004 : Integer;
                                 TempFilterItemAttributesBuffer@1000000002 : TEMPORARY Record 7506;
                                 TempItemFilteredFromAttributes@1000000001 : TEMPORARY Record 27;
                                 RunOnTempRec@1000000000 : Boolean;
                               BEGIN
                                 // <TPZ2859>
                                 FILTERGROUP(0);
                                 SETFILTER("Item Attribute Value ID",'816');
                                 //</TPZ2859>
                               END;
                                }
      { 1000000067;1 ;Action    ;
                      Name=FilterByAttribute;
                      CaptionML=ENU=Attribute Filter;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=EditFilter;
                      PromotedCategory=New;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 Item@1000000000 : Record 27;
                                 TempFilteredItem@1000000007 : TEMPORARY Record 27;
                                 ItemAttributeManagement@1000000006 : Codeunit 7500;
                                 TypeHelper@1000000005 : Codeunit 10;
                                 CloseAction@1000000004 : Action;
                                 FilterText@1000000003 : Text;
                                 FilterPageID@1000000002 : Integer;
                                 ParameterCount@1000000001 : Integer;
                                 TempFilterItemAttributesBuffer@1000000008 : TEMPORARY Record 7506;
                                 TempItemFilteredFromAttributes@1000000009 : TEMPORARY Record 27;
                                 RunOnTempRec@1000000010 : Boolean;
                               BEGIN
                                 // <TPZ2859>
                                 FilterPageID := PAGE::"Filter Items by Attribute";
                                 IF CURRENTCLIENTTYPE = CLIENTTYPE::Phone THEN
                                   FilterPageID := PAGE::"Filter Items by Att. Phone";

                                 CloseAction := PAGE.RUNMODAL(FilterPageID,TempFilterItemAttributesBuffer);
                                 IF (CURRENTCLIENTTYPE <> CLIENTTYPE::Phone) AND (CloseAction <> ACTION::LookupOK) THEN
                                   EXIT;

                                 ItemAttributeManagement.FindItemsByAttributes(TempFilterItemAttributesBuffer,TempItemFilteredFromAttributes);
                                 FilterText := ItemAttributeManagement.GetItemNoFilterText(TempItemFilteredFromAttributes,ParameterCount);

                                 IF ParameterCount < TypeHelper.GetMaxNumberOfParametersInSQLQuery - 100 THEN BEGIN
                                   FILTERGROUP(0);
                                   MARKEDONLY(FALSE);
                                   SETFILTER("Item No.",FilterText);
                                 END ELSE BEGIN
                                   RunOnTempRec := TRUE;
                                     CLEARMARKS;
                                     RESET;
                                 END;
                                 // </TPZ2859>
                               END;
                                }
      { 1000000070;1 ;Action    ;
                      Name=ClearAttFilter;
                      CaptionML=ENU=Clear Attribute Filter;
                      Promoted=Yes;
                      Image=ClearFilter;
                      OnAction=VAR
                                 Item@1000000000 : Record 27;
                                 TempFilteredItem@1000000007 : TEMPORARY Record 27;
                                 ItemAttributeManagement@1000000006 : Codeunit 7500;
                                 TypeHelper@1000000005 : Codeunit 10;
                                 CloseAction@1000000004 : Action;
                                 FilterText@1000000003 : Text;
                                 FilterPageID@1000000002 : Integer;
                                 ParameterCount@1000000001 : Integer;
                                 TempFilterItemAttributesBuffer@1000000008 : TEMPORARY Record 7506;
                                 TempItemFilteredFromAttributes@1000000009 : TEMPORARY Record 27;
                                 RunOnTempRec@1000000010 : Boolean;
                               BEGIN
                                 // <TPZ2859>
                                 FILTERGROUP(0);
                                 SETFILTER("Item Attribute Value ID",'');
                                 SETRANGE("Item No.");
                                 // </TPZ2859>
                               END;
                                }
      { 1000000256;1 ;ActionGroup;
                      CaptionML=[ENU=&Item;
                                 ESM=&L�nea;
                                 FRC=&Ligne;
                                 ENC=&Line];
                      Image=Line }
      { 1000000255;2 ;Action    ;
                      CaptionML=[ENU=Co&mments;
                                 ESM=C&omentarios;
                                 FRC=Co&mmentaires;
                                 ENC=Co&mments];
                      RunObject=Page 124;
                      RunPageLink=Table Name=CONST(Item),
                                  No.=FIELD(Item No.);
                      Visible=ESACC_C1000000255_Visible;
                      Enabled=ESACC_C1000000255_Enabled;
                      Image=ViewComments }
      { 1000000257;2 ;Action    ;
                      CaptionML=ENU=Last Prices;
                      RunObject=Page 50004;
                      RunPageLink=Sell-to Customer No.=FIELD(Sell-to Customer No.),
                                  Item No.=FIELD(Item No.),
                                  Document Type=FILTER(Posted Sales Invoice|Stock Status);
                      Visible=ESACC_C1000000257_Visible;
                      Enabled=ESACC_C1000000257_Enabled }
      { 1000000258;2 ;Action    ;
                      CaptionML=ENU=Country/Region Last Prices;
                      Visible=ESACC_C1000000258_Visible;
                      Enabled=ESACC_C1000000258_Enabled;
                      OnAction=VAR
                                 LastSalesPrice@1000000001 : Record 50004;
                                 CustLoc@1000000000 : Record 18;
                               BEGIN
                                 // <TPZ449>
                                 LastSalesPrice.RESET;
                                 LastSalesPrice.SETRANGE("Item No.","Item No.");
                                 CustLoc.GET("Sell-to Customer No.");
                                 LastSalesPrice.SETRANGE("Country/Region Code",CustLoc."Country/Region Code");
                                 PAGE.RUN(PAGE::"Last Sales Prices",LastSalesPrice);
                                 // </TPZ449>
                               END;
                                }
      { 1000000058;2 ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=Ledger E&ntries;
                                 ESM=&Movimientos;
                                 FRC=�&critures comptables;
                                 ENC=Ledger E&ntries];
                      RunObject=Page 51130;
                      RunPageView=SORTING(Item No.);
                      RunPageLink=Item No.=FIELD(Item No.),
                                  Document Type=FILTER(Sales Shipment|Sales Return Receipt|Sales Credit Memo|Purchase Receipt|Transfer Shipment|Transfer Receipt);
                      Promoted=No;
                      Visible=ESACC_C1000000058_Visible;
                      Enabled=ESACC_C1000000058_Enabled;
                      Image=ItemLedger;
                      PromotedCategory=Process }
      { 1000000059;2 ;Action    ;
                      CaptionML=ENU=Cust. Group Last Sales Prices;
                      Visible=ESACC_C1000000059_Visible;
                      Enabled=ESACC_C1000000059_Enabled;
                      Image=EntriesList;
                      OnAction=VAR
                                 StockStatusWkshLine@1000000000 : Record 50000;
                                 StockStatusWkshMgt@1000000001 : Codeunit 50000;
                               BEGIN
                                 // <TPZ1014>
                                 StockStatusWkshLine.COPY(Rec);
                                 StockStatusWkshMgt.FindRelCustLastSalesPrice(StockStatusWkshLine);
                                 // <TPZ1014>
                               END;
                                }
      { 1000000062;2 ;Action    ;
                      Name=UpdateUnitPrice;
                      OnAction=BEGIN
                                 UpdateUnitPrice;
                                 //MODIFY;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1000000000;;Container;
                ContainerType=ContentArea }

    { 1000000061;1;Group  ;
                CaptionML=ENU=Filters;
                Visible=FALSE;
                GroupType=Group;
                Layout=Columns }

    { 1000000060;2;Field  ;
                Name=xItemNo;
                CaptionML=ENU=ItemNoFilter;
                SourceExpr=xItemNo;
                OnValidate=VAR
                             icnt@1000000000 : Integer;
                             sItemNo@1000000001 : Code[20];
                             wrk@1000000002 : Record 50000;
                             sDimCode@1000000003 : Code[10];
                           BEGIN
                             xItemNo:=UPPERCASE(xItemNo);

                             wrk.SETCURRENTKEY("Item No.");
                             wrk.SETRANGE("Shortcut Dimension 5 Code", "Shortcut Dimension 5 Code");
                             //wrk.SETFILTER(Blocked, '<>All');  //gg item blocking TPZ2785
                             wrk.SETRANGE(Blocked,FALSE);//TPZ2785
                             //wrk.SETFILTER("Item No.",xItemNo + '*');
                             wrk.SETRANGE("ABC Code",'<>OB'); //<TPZ2839>
                             icnt:= 0;
                             IF wrk.FINDFIRST THEN BEGIN
                               REPEAT
                                 icnt := icnt + 1;
                                IF xItemNo = COPYSTR(wrk."Item No.", 1, STRLEN(xItemNo)) THEN
                                  BEGIN
                                  sItemNo:= wrk."Item No.";
                                  wrk.FINDLAST;
                                  END;
                             UNTIL wrk.NEXT=0;
                             END;
                             //MESSAGE(sItemNo + ' ' + FORMAT(icnt));
                             SETFILTER("Item No.", sItemNo);
                             FINDFIRST;

                             CurrPage.UPDATE(FALSE);
                             CurrPage.ACTIVATE(TRUE);
                             IF CURRENTCLIENTTYPE = CLIENTTYPE::Windows THEN BEGIN
                               IF ISCLEAR(WSHSHELL) THEN
                                 CREATE(WSHSHELL, TRUE, TRUE);
                               WSHSHELL.SendKeys('{F5}');
                             END;
                           END;
                            }

    { 1000000063;2;Field  ;
                Name=xVendorNo;
                CaptionML=ENU=VendorNoFilter;
                SourceExpr=xVendorItemNo;
                OnValidate=VAR
                             icnt@1000000002 : Integer;
                             sItemNo@1000000001 : Code[20];
                             wrk@1000000000 : Record 50000;
                           BEGIN
                             xVendorItemNo:=UPPERCASE(xVendorItemNo);
                             wrk.SETCURRENTKEY("Vendor Item No.");
                             wrk.SETRANGE("Shortcut Dimension 5 Code", "Shortcut Dimension 5 Code");
                             //wrk.SETFILTER(Blocked, '<>All');  //gg item blocking TPZ2785
                             wrk.SETRANGE(Blocked,FALSE);//TPZ2785
                             //wrk.SETFILTER("Item No.",xVendorItemNo + '*');
                             wrk.SETRANGE("ABC Code",'<>OB'); //<TPZ2839>
                             icnt:= 0;
                             IF wrk.FINDFIRST THEN BEGIN
                               REPEAT
                                 icnt := icnt + 1;
                                IF xVendorItemNo = COPYSTR(wrk."Vendor Item No.", 1, STRLEN(xVendorItemNo)) THEN
                                  BEGIN
                                  sItemNo:= wrk."Vendor Item No.";
                                  wrk.FINDLAST;
                                  END;
                             UNTIL wrk.NEXT=0;
                             END;
                             //MESSAGE(sItemNo + ' ' + FORMAT(icnt));
                             SETFILTER("Vendor Item No.", sItemNo);
                             FINDFIRST;

                             CurrPage.UPDATE(FALSE);
                             CurrPage.ACTIVATE(TRUE);
                             IF CURRENTCLIENTTYPE = CLIENTTYPE::Windows THEN BEGIN
                               IF ISCLEAR(WSHSHELL) THEN
                                 CREATE(WSHSHELL, TRUE, TRUE);
                               WSHSHELL.SendKeys('{F5}');
                             END;
                           END;
                            }

    { 1000000001;1;Group  ;
                Name=Group;
                GroupType=Repeater }

    { 1000000048;2;Field  ;
                SourceExpr=Blocked;
                Visible=ESACC_F54_Visible;
                Editable=FALSE;
                HideValue=ESACC_F54_HideValue;
                QuickEntry=FALSE }

    { 1000000051;2;Field  ;
                SourceExpr="Blocked Sequence";
                Visible=ESACC_F50040_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50040_HideValue;
                QuickEntry=FALSE }

    { 1000000049;2;Field  ;
                SourceExpr="Shortcut Dimension 5 Code";
                Visible=ESACC_F50100_Visible;
                Enabled=ESACC_F50100_Editable;
                Editable=FALSE;
                HideValue=ESACC_F50100_HideValue;
                QuickEntry=FALSE }

    { 1000000002;2;Field  ;
                Width=20;
                SourceExpr="Item No.";
                Visible=ESACC_F6_Visible;
                Editable=FALSE;
                HideValue=ESACC_F6_HideValue;
                StyleExpr=StyleTxtABC;
                QuickEntry=FALSE }

    { 1000000003;2;Field  ;
                SourceExpr=Description;
                Visible=ESACC_F11_Visible;
                Editable=FALSE;
                HideValue=ESACC_F11_HideValue;
                QuickEntry=FALSE }

    { 1000000004;2;Field  ;
                SourceExpr="Description 2";
                Visible=ESACC_F12_Visible;
                Editable=FALSE;
                HideValue=ESACC_F12_HideValue;
                QuickEntry=FALSE }

    { 1000000043;2;Field  ;
                SourceExpr="Base Unit of Measure";
                Visible=ESACC_F8_Visible;
                Editable=FALSE;
                HideValue=ESACC_F8_HideValue;
                QuickEntry=FALSE }

    { 1000000017;2;Field  ;
                SourceExpr="Item Category Code";
                Visible=ESACC_F5709_Visible;
                Editable=FALSE;
                HideValue=ESACC_F5709_HideValue;
                QuickEntry=FALSE }

    { 1000000041;2;Field  ;
                SourceExpr="Product Group Code";
                Visible=ESACC_F5712_Visible;
                Editable=FALSE;
                HideValue=ESACC_F5712_HideValue;
                QuickEntry=FALSE }

    { 1000000008;2;Field  ;
                SourceExpr="Country/Region of Origin Code";
                Visible=ESACC_F95_Visible;
                Editable=FALSE;
                HideValue=ESACC_F95_HideValue;
                QuickEntry=FALSE }

    { 1000000009;2;Field  ;
                SourceExpr="Manufacturer Code";
                Visible=ESACC_F5701_Visible;
                Editable=FALSE;
                HideValue=ESACC_F5701_HideValue;
                QuickEntry=FALSE }

    { 1000000068;2;Field  ;
                SourceExpr="ABC Code";
                Editable=FALSE;
                StyleExpr=StyleTxtABC;
                QuickEntry=FALSE }

    { 1000000006;2;Field  ;
                SourceExpr="Quantity Available on Location";
                Visible=ESACC_F50000_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50000_HideValue;
                QuickEntry=FALSE }

    { 1000000007;2;Field  ;
                SourceExpr="Main Loc. Qty. Avail";
                Visible=ESACC_F50001_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50001_HideValue;
                QuickEntry=FALSE }

    { 1000000066;2;Field  ;
                Name=MonthsofStock;
                CaptionML=ENU=Months of Stock;
                SourceExpr=StockStatusQuickQuoteMgt.CalcMonthOfStock(Rec) }

    { 1000000005;2;Field  ;
                SourceExpr="Order Date";
                Visible=ESACC_F19_Visible;
                Editable=ESACC_F19_Editable;
                HideValue=ESACC_F19_HideValue;
                QuickEntry=FALSE }

    { 1000000014;2;Field  ;
                SourceExpr="Location Code";
                Visible=ESACC_F7_Visible;
                Editable=ESACC_F7_Editable;
                HideValue=ESACC_F7_HideValue;
                OnValidate=VAR
                             Count@1000000000 : Integer;
                           BEGIN
                             IF (Blocked = TRUE) THEN //OR (Blocked = Blocked::Sale) THEN <TPZ1545> TPZ2785
                               FIELDERROR(Blocked);

                             IF "Location Code" <> xRec."Location Code" THEN BEGIN
                               CLEAR(Count);
                               QuickQuoteWorkSheet.RESET;
                               IF QuickQuoteWorkSheet.FIND('-') THEN REPEAT
                                 IF QuickQuoteWorkSheet."Item No." = "Item No." THEN Count += 1;
                               UNTIL QuickQuoteWorkSheet.NEXT = 0;
                               IF Count = 1 THEN BEGIN
                                 QuickQuoteWorkSheet.RESET;
                                 QuickQuoteWorkSheet.SETCURRENTKEY("Item No.",Description);
                                 QuickQuoteWorkSheet.SETRANGE("Item No.","Item No.");
                                 IF QuickQuoteWorkSheet.FIND('-') THEN BEGIN
                                   QuickQuoteWorkSheet."Location Code" := "Location Code";
                                   QuickQuoteWorkSheet.MODIFY;
                                 END;
                               END;
                             END;

                             UpdateSingleLine("Location Code");
                           END;

                QuickEntry=FALSE }

    { 1000000037;2;Field  ;
                BlankZero=Yes;
                SourceExpr="Current Qty.";
                Visible=ESACC_F50005_Visible;
                Editable=ESACC_F50005_Editable;
                HideValue=ESACC_F50005_HideValue;
                OnValidate=BEGIN
                             IF (Blocked = TRUE) THEN //TPZ2785
                               FIELDERROR(Blocked);


                             IF "Current Qty." <> 0 THEN
                               BEGIN
                                 UpdateLastSalesPrice(Rec);
                                 FetchRecommFieldValues("Item No.",InCustFilter); //TOP230 KT ABCSI CRP 2 Fixes 05282015
                                 IF NOT StockStatusQuickQuote.GET("Item No.") THEN
                                   BEGIN
                                     StockStatusQuickQuote.INIT;
                                     StockStatusQuickQuote.TRANSFERFIELDS(Rec);
                                     StockStatusQuickQuote."Sell-to Customer No." := InCustFilter;
                                     StockStatusQuickQuote."Location Code" := "Location Code";
                                     StockStatusQuickQuote."Unit Price" := "Unit Price";
                                     StockStatusQuickQuote."Recomm. Unit Price" := "Recomm. Unit Price"; //TOP230 KT ABCSI CRP 2 Fixes 05282015
                                     StockStatusQuickQuote."Current Qty." := "Current Qty.";
                                     StockStatusQuickQuote."Current UOM" := "Current UOM";
                                     StockStatusQuickQuote.INSERT;
                                     QuickQuoteWorkSheet.TRANSFERFIELDS(StockStatusQuickQuote);
                                     LineNo += 1;
                                     QuickQuoteWorkSheet."Line No." := LineNo;
                                     IF ItemUOM.GET("Item No.","Current UOM") THEN
                                       QuickQuoteWorkSheet."Qty per Unit of Measure" := ItemUOM."Qty. per Unit of Measure"
                                     ELSE QuickQuoteWorkSheet."Qty per Unit of Measure" := 1;
                                     QuickQuoteWorkSheet."Current Qty (Base)" := QuickQuoteWorkSheet."Qty per Unit of Measure" * "Current Qty.";
                                     QuickQuoteWorkSheet.INSERT;
                                     //LineNo := LineNo +1;
                                   END
                                 ELSE
                                   BEGIN
                                     StockStatusQuickQuote."Current Qty." := "Current Qty.";
                                     StockStatusQuickQuote."Recomm. Unit Price" := "Recomm. Unit Price"; //TOP230 KT ABCSI CRP 2 Fixes 05282015
                                     StockStatusQuickQuote.MODIFY;
                                     QuickQuoteWorkSheet.RESET;
                                     QuickQuoteWorkSheet.SETRANGE("Item No.","Item No.");
                                     IF QuickQuoteWorkSheet.FIND('+') THEN BEGIN
                                       OldLineNo := QuickQuoteWorkSheet."Line No.";
                                       //LineNo := QuickQuoteWorkSheet."Line No." + 1;
                                     END ELSE BEGIN
                                       QuickQuoteWorkSheet.RESET;
                                       IF QuickQuoteWorkSheet.FIND('+') THEN LineNo := QuickQuoteWorkSheet."Line No.";
                                       OldLineNo := LineNo;
                                       LineNo := LineNo + 1;
                                     END;
                                     QuickQuoteWorkSheet.TRANSFERFIELDS(StockStatusQuickQuote);
                                     QuickQuoteWorkSheet."Line No." := OldLineNo;
                                     IF ItemUOM.GET("Item No.","Current UOM") THEN
                                       QuickQuoteWorkSheet."Qty per Unit of Measure" := ItemUOM."Qty. per Unit of Measure"
                                     ELSE QuickQuoteWorkSheet."Qty per Unit of Measure" := 1;
                                     QuickQuoteWorkSheet."Current Qty (Base)" := QuickQuoteWorkSheet."Qty per Unit of Measure" * "Current Qty.";
                                     QuickQuoteWorkSheet."Promotion Code" := "Promotion Code";
                                     QuickQuoteWorkSheet.MODIFY;
                                   END;
                               END ELSE
                                 IF StockStatusQuickQuote.GET("Item No.") THEN
                                   IF xRec."Current Qty." <> 0 THEN BEGIN
                                     StockStatusQuickQuote."Current Qty." := "Current Qty.";
                                     StockStatusQuickQuote.MODIFY;
                                     QuickQuoteWorkSheet.RESET;
                                     QuickQuoteWorkSheet.SETRANGE("Item No.","Item No.");
                                     IF QuickQuoteWorkSheet.FIND('+') THEN BEGIN
                                        OldLineNo := QuickQuoteWorkSheet."Line No.";
                                        //LineNo := QuickQuoteWorkSheet."Line No." + 1;
                                     END ELSE BEGIN
                                        QuickQuoteWorkSheet.RESET;
                                        IF QuickQuoteWorkSheet.FIND('+') THEN LineNo := QuickQuoteWorkSheet."Line No.";
                                        OldLineNo := LineNo;
                                        LineNo := LineNo + 1;
                                     END;
                                     QuickQuoteWorkSheet.TRANSFERFIELDS(StockStatusQuickQuote);
                                     QuickQuoteWorkSheet."Line No." := OldLineNo;
                                     IF ItemUOM.GET("Item No.","Current UOM") THEN
                                       QuickQuoteWorkSheet."Qty per Unit of Measure" := ItemUOM."Qty. per Unit of Measure"
                                     ELSE QuickQuoteWorkSheet."Qty per Unit of Measure" := 1;
                                     QuickQuoteWorkSheet."Current Qty (Base)" := QuickQuoteWorkSheet."Qty per Unit of Measure" * "Current Qty.";
                                     QuickQuoteWorkSheet."Promotion Code" := "Promotion Code";
                                     QuickQuoteWorkSheet.MODIFY;
                                   END;
                           END;
                            }

    { 1000000011;2;Field  ;
                SourceExpr="Unit Price";
                Visible=ESACC_F22_Visible;
                Editable=ESACC_F22_Editable;
                HideValue=ESACC_F22_HideValue;
                StyleExpr=StyleTxtNew;
                OnValidate=BEGIN
                             IF (Blocked = TRUE) THEN //TPZ2785
                               FIELDERROR(Blocked);
                             //UpdateUnitPrice; //AJAY
                             IF "Unit Price" <> 0 THEN
                               BEGIN
                                 UpdateLastSalesPrice(Rec);
                                 IF NOT StockStatusQuickQuote.GET("Item No.") THEN
                                   BEGIN
                                     StockStatusQuickQuote.INIT;
                                     StockStatusQuickQuote.TRANSFERFIELDS(Rec);
                                     StockStatusQuickQuote."Sell-to Customer No." := InCustFilter;
                                     StockStatusQuickQuote."Location Code" := "Location Code";
                                     StockStatusQuickQuote."Unit Price" := "Unit Price";
                                     StockStatusQuickQuote."Current Qty." := "Current Qty.";
                                     StockStatusQuickQuote."Current UOM" := "Current UOM";
                                     StockStatusQuickQuote.INSERT;
                                     QuickQuoteWorkSheet.TRANSFERFIELDS(StockStatusQuickQuote);
                                     LineNo += 1;
                                     QuickQuoteWorkSheet."Line No." := LineNo;
                                     //LineNo := LineNo + 1;
                                     IF ItemUOM.GET("Item No.","Current UOM") THEN
                                       QuickQuoteWorkSheet."Qty per Unit of Measure" := ItemUOM."Qty. per Unit of Measure"
                                     ELSE QuickQuoteWorkSheet."Qty per Unit of Measure" := 1;
                                     QuickQuoteWorkSheet."Current Qty (Base)" := QuickQuoteWorkSheet."Qty per Unit of Measure" * "Current Qty.";
                                     QuickQuoteWorkSheet.INSERT;
                                   END
                                 ELSE
                                   BEGIN
                                     StockStatusQuickQuote."Sell-to Customer No." := InCustFilter;
                                     StockStatusQuickQuote."Unit Price" := "Unit Price";
                                     StockStatusQuickQuote.MODIFY;
                                     QuickQuoteWorkSheet.RESET;
                                     QuickQuoteWorkSheet.SETRANGE("Item No.","Item No.");
                                     IF QuickQuoteWorkSheet.FIND('+') THEN BEGIN
                                        OldLineNo := QuickQuoteWorkSheet."Line No.";
                                        //LineNo := QuickQuoteWorkSheet."Line No." + 1;
                                     END ELSE BEGIN
                                       QuickQuoteWorkSheet.RESET;
                                       IF QuickQuoteWorkSheet.FIND('+') THEN LineNo := QuickQuoteWorkSheet."Line No.";
                                        OldLineNo := LineNo;
                                        LineNo := LineNo + 1;
                                     END;
                                     QuickQuoteWorkSheet.TRANSFERFIELDS(StockStatusQuickQuote);
                                     QuickQuoteWorkSheet."Line No." := OldLineNo;
                                     IF ItemUOM.GET("Item No.","Current UOM") THEN
                                       QuickQuoteWorkSheet."Qty per Unit of Measure" := ItemUOM."Qty. per Unit of Measure"
                                     ELSE QuickQuoteWorkSheet."Qty per Unit of Measure" := 1;
                                     QuickQuoteWorkSheet."Current Qty (Base)" := QuickQuoteWorkSheet."Qty per Unit of Measure" * "Current Qty.";
                                     QuickQuoteWorkSheet.MODIFY;
                                   END;
                               END ELSE
                                 IF StockStatusQuickQuote.GET("Item No.") THEN
                                   IF xRec."Current Qty." <> 0 THEN BEGIN
                                     StockStatusQuickQuote."Current Qty." := "Current Qty.";
                                     StockStatusQuickQuote.MODIFY;
                                     QuickQuoteWorkSheet.RESET;
                                     QuickQuoteWorkSheet.SETRANGE("Item No.","Item No.");
                                     IF QuickQuoteWorkSheet.FIND('+') THEN BEGIN
                                        OldLineNo := QuickQuoteWorkSheet."Line No.";
                                        //LineNo := QuickQuoteWorkSheet."Line No." + 1;
                                     END ELSE BEGIN
                                       QuickQuoteWorkSheet.RESET;
                                       IF QuickQuoteWorkSheet.FIND('+') THEN LineNo := QuickQuoteWorkSheet."Line No.";
                                       OldLineNo := LineNo;
                                       LineNo := LineNo + 1;
                                     END;
                                     QuickQuoteWorkSheet.TRANSFERFIELDS(StockStatusQuickQuote);
                                     IF Customer."Location Code" <> StockStatusQuickQuote."Location Code" THEN BEGIN
                                       WLoc.GET(StockStatusQuickQuote."Location Code");
                                       //QuickQuoteWorkSheet."Location Code" := WLoc."Location Code";
                                     END;
                                     QuickQuoteWorkSheet."Line No." := OldLineNo;
                                     IF ItemUOM.GET("Item No.","Current UOM") THEN
                                       QuickQuoteWorkSheet."Qty per Unit of Measure" := ItemUOM."Qty. per Unit of Measure"
                                     ELSE QuickQuoteWorkSheet."Qty per Unit of Measure" := 1;
                                     QuickQuoteWorkSheet."Current Qty (Base)" := QuickQuoteWorkSheet."Qty per Unit of Measure" * "Current Qty.";
                                     QuickQuoteWorkSheet.MODIFY;
                                   END;
                           END;
                            }

    { 1000000052;2;Field  ;
                SourceExpr="Recomm. Unit Price";
                Visible=ESACC_F50202_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50202_HideValue }

    { 1000000072;2;Field  ;
                SourceExpr="Special Price" }

    { 1000000013;2;Field  ;
                SourceExpr="Current UOM";
                Visible=ESACC_F50006_Visible;
                Editable=ESACC_F50006_Editable;
                HideValue=ESACC_F50006_HideValue;
                OnValidate=BEGIN

                             IF "Current UOM" <> '' THEN
                               BEGIN
                                 IF (CompanyInformation."Location Code" <> '') AND (Item3.GET("Item No.")) AND
                                    ("Current UOM" <> xRec."Current UOM") THEN BEGIN
                                   Item3.SETFILTER("Location Filter",CompanyInformation."Location Code");
                                   Item3.CALCFIELDS(Inventory,"Qty. on Sales Order");
                                   "Main Loc. Qty. Avail" := (Item3.Inventory - Item3."Qty. on Sales Order") / QtyPerUOM;
                                 END;
                                 IF Item.GET("Item No.") THEN
                                   BEGIN
                                     QtyPerUOM := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Current UOM");
                                     //Item.SETFILTER("Location Filter",StockStatusQuickQuote.Location);
                                     Item.SETRANGE("Location Filter","Location Code");
                                     Item.CALCFIELDS(Inventory,"Qty. on Sales Order","Qty. on Purch. Order");
                                     "Quantity Available on Location" := (Item.Inventory - Item."Qty. on Sales Order") / QtyPerUOM;
                                     "Qty. on Hand" := Item.Inventory / QtyPerUOM;
                                     "Qty. on Purch. Order" := Item."Qty. on Purch. Order" / QtyPerUOM;
                                   END;
                                 IF "Unit Price" <> 0 THEN
                                   UpdateLastSalesPrice(Rec);

                                 IF NOT StockStatusQuickQuote.GET("Item No.") THEN
                                   BEGIN
                                     StockStatusQuickQuote.INIT;
                                     StockStatusQuickQuote.TRANSFERFIELDS(Rec);
                                     StockStatusQuickQuote."Sell-to Customer No." := InCustFilter;
                                     StockStatusQuickQuote."Location Code" := "Location Code";
                                     StockStatusQuickQuote."Unit Price" := "Unit Price";
                                     StockStatusQuickQuote."Current Qty." := "Current Qty.";
                                     StockStatusQuickQuote."Current UOM" := "Current UOM";
                                     StockStatusQuickQuote.INSERT;
                                     QuickQuoteWorkSheet.TRANSFERFIELDS(StockStatusQuickQuote);
                                     LineNo += 1;
                                     QuickQuoteWorkSheet."Line No." := LineNo;
                                     IF ItemUOM.GET("Item No.","Current UOM") THEN
                                       QuickQuoteWorkSheet."Qty per Unit of Measure" := ItemUOM."Qty. per Unit of Measure"
                                     ELSE QuickQuoteWorkSheet."Qty per Unit of Measure" := 1;
                                     QuickQuoteWorkSheet."Current Qty (Base)" := QuickQuoteWorkSheet."Qty per Unit of Measure" * "Current Qty.";
                                     QuickQuoteWorkSheet."Promotion Code" := "Promotion Code";
                                     QuickQuoteWorkSheet.INSERT;
                                     //LineNo := LineNo + 1;
                                   END
                                 ELSE
                                   BEGIN
                                     StockStatusQuickQuote."Current UOM" := "Current UOM";
                                     StockStatusQuickQuote.MODIFY;
                                     QuickQuoteWorkSheet.RESET;
                                     QuickQuoteWorkSheet.SETRANGE("Item No.","Item No.");
                                     IF QuickQuoteWorkSheet.FIND('+') THEN BEGIN
                                        OldLineNo := QuickQuoteWorkSheet."Line No.";
                                        //LineNo := QuickQuoteWorkSheet."Line No." + 1;
                                     END ELSE BEGIN
                                       QuickQuoteWorkSheet.RESET;
                                       IF QuickQuoteWorkSheet.FIND('+') THEN LineNo := QuickQuoteWorkSheet."Line No.";
                                       OldLineNo := LineNo;
                                       LineNo := QuickQuoteWorkSheet."Line No." + 1;
                                     END;
                                     QuickQuoteWorkSheet.TRANSFERFIELDS(StockStatusQuickQuote);
                                     IF ItemUOM.GET("Item No.","Current UOM") THEN
                                       QuickQuoteWorkSheet."Qty per Unit of Measure" := ItemUOM."Qty. per Unit of Measure"
                                     ELSE QuickQuoteWorkSheet."Qty per Unit of Measure" := 1;
                                     QuickQuoteWorkSheet."Current Qty (Base)" := QuickQuoteWorkSheet."Qty per Unit of Measure" * "Current Qty.";
                                     QuickQuoteWorkSheet."Promotion Code" := "Promotion Code";
                                     QuickQuoteWorkSheet."Line No." := OldLineNo;
                                     QuickQuoteWorkSheet.MODIFY;
                                   END;
                               END;
                             IF "Current UOM" <> xRec."Current UOM" THEN UpdateSingleLine("Location Code");
                           END;
                            }

    { 1000000015;2;Field  ;
                SourceExpr="Unit Cost";
                Visible=ESACC_F23_Visible;
                Editable=FALSE;
                HideValue=ESACC_F23_HideValue }

    { 1000000071;2;Field  ;
                DecimalPlaces=2:4;
                SourceExpr="Average Unit Cost";
                Visible=false }

    { 1000000016;2;Field  ;
                SourceExpr="Sell-to Customer No.";
                Visible=FALSE;
                Editable=FALSE;
                HideValue=ESACC_F2_HideValue }

    { 1000000044;2;Field  ;
                SourceExpr="Lost Opportunity";
                Visible=ESACC_F50026_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50026_HideValue }

    { 1000000046;2;Field  ;
                SourceExpr="Reason Code";
                Visible=ESACC_F50027_Visible;
                Editable=ESACC_F50027_Editable;
                HideValue=ESACC_F50027_HideValue;
                OnValidate=BEGIN

                             IF "Reason Code" <> xRec."Reason Code" THEN UpdateLastSalesPrice(Rec);
                             IF "Reason Code" <> '' THEN BEGIN
                               StockStatusQuickQuote."Reason Code" := "Reason Code";
                               StockStatusQuickQuote."Reason Code Comment" := "Reason Code Comment"; //TOP010 KT ABCSI Stock Status Quick Quote 06042015
                               StockStatusQuickQuote."Lost Opportunity Description" := "Lost Opportunity Description";  //TOP230 KT ABCSI CRP 2 Fixes 06092015
                               StockStatusQuickQuote."Lost Opportunity" := "Lost Opportunity";
                               StockStatusQuickQuote.MODIFY;
                               QuickQuoteWorkSheet.RESET;
                               QuickQuoteWorkSheet.SETRANGE("Item No.","Item No.");
                               IF QuickQuoteWorkSheet.FIND('+') THEN
                                 OldLineNo := QuickQuoteWorkSheet."Line No.";
                               QuickQuoteWorkSheet.TRANSFERFIELDS(StockStatusQuickQuote);
                               QuickQuoteWorkSheet.MODIFY;
                             END;
                           END;
                            }

    { 1000000047;2;Field  ;
                SourceExpr="Reason Code Comment";
                Visible=ESACC_F50028_Visible;
                Editable=ESACC_F50028_Editable;
                HideValue=ESACC_F50028_HideValue;
                OnValidate=BEGIN

                             IF xRec."Reason Code Comment" <> "Reason Code Comment" THEN UpdateLastSalesPrice(Rec);
                             IF "Reason Code Comment" <> '' THEN BEGIN
                               StockStatusQuickQuote."Reason Code Comment" := "Reason Code Comment";
                               StockStatusQuickQuote.MODIFY;
                               QuickQuoteWorkSheet.RESET;
                               QuickQuoteWorkSheet.SETRANGE("Item No.","Item No.");
                               IF QuickQuoteWorkSheet.FIND('+') THEN
                                 OldLineNo := QuickQuoteWorkSheet."Line No.";
                               QuickQuoteWorkSheet.TRANSFERFIELDS(StockStatusQuickQuote);
                               QuickQuoteWorkSheet.MODIFY;
                             END;
                           END;
                            }

    { 1000000053;2;Field  ;
                SourceExpr="Lost Opportunity Description";
                Visible=ESACC_F50029_Visible;
                Editable=ESACC_F50029_Editable;
                HideValue=ESACC_F50029_HideValue }

    { 1000000018;2;Field  ;
                SourceExpr="Last Unit Price";
                Visible=ESACC_F50007_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50007_HideValue }

    { 1000000019;2;Field  ;
                SourceExpr="Last Price UOM";
                Visible=ESACC_F50008_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50008_HideValue }

    { 1000000020;2;Field  ;
                SourceExpr="Last Price Qty.";
                Visible=ESACC_F50009_Visible;
                Editable=ESACC_F50009_Editable;
                HideValue=ESACC_F50009_HideValue }

    { 1000000024;2;Field  ;
                SourceExpr="Last Price Date";
                Visible=ESACC_F50013_Visible;
                Editable=ESACC_F50013_Editable;
                HideValue=ESACC_F50013_HideValue }

    { 1000000056;2;Field  ;
                SourceExpr="Last Price User ID";
                Visible=ESACC_F50031_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50031_HideValue }

    { 1000000021;2;Field  ;
                SourceExpr="Last Reason Code";
                Visible=ESACC_F50010_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50010_HideValue }

    { 1000000022;2;Field  ;
                SourceExpr="Last Reason Code Comment";
                Visible=ESACC_F50011_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50011_HideValue }

    { 1000000023;2;Field  ;
                SourceExpr="Last Lost Opportunity";
                Visible=ESACC_F50012_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50012_HideValue }

    { 1000000010;2;Field  ;
                SourceExpr="Last Quoted Unit Price";
                Visible=ESACC_F50002_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50002_HideValue }

    { 1000000064;2;Field  ;
                SourceExpr="Pre Increase Unit Price";
                Editable=false }

    { 1000000065;2;Field  ;
                SourceExpr="Post Increase Unit Price";
                Editable=false;
                StyleExpr=StyleTxtNew }

    { 1000000012;2;Field  ;
                SourceExpr="Last Quoted Qty.";
                Visible=ESACC_F50004_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50004_HideValue }

    { 1000000038;2;Field  ;
                SourceExpr="Last Quoted UOM";
                Visible=ESACC_F50003_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50003_HideValue }

    { 1000000025;2;Field  ;
                SourceExpr="Last Invoice Price";
                Visible=ESACC_F50014_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50014_HideValue }

    { 1000000026;2;Field  ;
                SourceExpr="Last Invoiced Qty.";
                Visible=ESACC_F50015_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50015_HideValue }

    { 1000000028;2;Field  ;
                SourceExpr="Qty. on Purch. Order";
                Visible=ESACC_F84_Visible;
                Editable=FALSE;
                HideValue=ESACC_F84_HideValue;
                OnLookup=VAR
                           PurchLines@1000000000 : Record 39;
                         BEGIN
                           PurchLines.RESET;
                           PurchLines.SETRANGE("Document Type",PurchLines."Document Type"::Order);
                           PurchLines.SETRANGE(Type,PurchLines.Type::Item);
                           PurchLines.SETRANGE("No.","Item No.");
                           PurchLines.SETRANGE("Location Code","Location Code");
                           PAGE.RUN(518,PurchLines);
                         END;
                          }

    { 1000000029;2;Field  ;
                SourceExpr="Vendor Item No.";
                Visible=ESACC_F32_Visible;
                Editable=FALSE;
                HideValue=ESACC_F32_HideValue }

    { 1000000030;2;Field  ;
                SourceExpr="Qty. on Sales Order";
                Visible=ESACC_F85_Visible;
                Editable=FALSE;
                HideValue=ESACC_F85_HideValue }

    { 1000000031;2;Field  ;
                SourceExpr="Cust. Qty. on SO";
                Visible=ESACC_F50016_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50016_HideValue }

    { 1000000032;2;Field  ;
                SourceExpr="Qty. on Hand";
                Visible=ESACC_F50017_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50017_HideValue }

    { 1000000033;2;Field  ;
                SourceExpr="Total Qty. on Hand";
                Visible=ESACC_F50018_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50018_HideValue }

    { 1000000034;2;Field  ;
                CaptionML=ENU=Qty. on Pick Loc.;
                SourceExpr=CalcQtyOnPick("Item No.","Location Code");
                Editable=FALSE;
                OnDrillDown=VAR
                              WhseActivityLine@1000000000 : Record 5767;
                            BEGIN
                              //TOP010 - Stock Status Quick Quote Screen - KT ABCSI 11052015
                              WhseActivityLine.RESET;
                              WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::Pick);
                              WhseActivityLine.SETRANGE("Item No.","Item No.");
                              WhseActivityLine.SETRANGE("Location Code","Location Code");
                              WhseActivityLine.SETFILTER(
                                "Action Type",
                                '%1|%2',
                                WhseActivityLine."Action Type"::" ",
                                WhseActivityLine."Action Type"::Take);
                              WhseActivityLine.SETRANGE("Breakbulk No.",0);
                              PAGE.RUN(0,WhseActivityLine);
                              //TOP010 - Stock Status Quick Quote Screen - KT ABCSI 11052015
                            END;
                             }

    { 1000000035;2;Field  ;
                CaptionML=ENU=Qty. Avail to Pick;
                SourceExpr=WhseCreatePick.QtyAvailtoPick("Item No.","Location Code");
                Editable=FALSE;
                OnDrillDown=VAR
                              Location@1000000000 : Record 14;
                              BinContent@1000000001 : Record 7302;
                            BEGIN
                              //TOP010 - Stock Status Quick Quote Screen - KT ABCSI 11052015
                              IF Location.GET("Location Code") AND
                                Location."Bin Mandatory"
                              THEN BEGIN
                                BinContent.RESET;
                                BinContent.SETRANGE("Location Code","Location Code");
                                BinContent.SETRANGE("Item No.","Item No.");
                                BinContent.SETRANGE("Bin Type Code",'PICKPUT');
                                BinContent.SETFILTER("Block Movement",'<>%1&<>%2',BinContent."Block Movement"::Outbound,BinContent."Block Movement"::All);
                                PAGE.RUN(PAGE::"Item Bin Contents",BinContent);
                              END;
                              //TOP010 - Stock Status Quick Quote Screen - KT ABCSI 11052015
                            END;
                             }

    { 1000000036;2;Field  ;
                SourceExpr="Promotion Code";
                Visible=ESACC_F50020_Visible;
                Editable=ESACC_F50020_Editable;
                HideValue=ESACC_F50020_HideValue }

    { 1000000027;2;Field  ;
                SourceExpr="Curr. Unit Price Starting Date";
                Visible=ESACC_F50021_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50021_HideValue }

    { 1000000045;2;Field  ;
                SourceExpr="Curr. Unit Price Ending Date";
                Visible=ESACC_F50022_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50022_HideValue }

    { 1000000039;2;Field  ;
                SourceExpr="Low Unit Price";
                Visible=ESACC_F50023_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50023_HideValue }

    { 1000000050;2;Field  ;
                SourceExpr="Medium Unit Price";
                Visible=ESACC_F50030_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50030_HideValue }

    { 1000000040;2;Field  ;
                SourceExpr="High Unit Price";
                Visible=ESACC_F50024_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50024_HideValue }

    { 1000000042;2;Field  ;
                SourceExpr="Last Price Change Date";
                Visible=ESACC_F50025_Visible;
                Editable=FALSE;
                HideValue=ESACC_F50025_HideValue }

    { 1000000254;2;Field  ;
                SourceExpr="Sorting Order";
                Visible=FALSE;
                Editable=FALSE;
                HideValue=ESACC_F51077_HideValue }

    { 1000000073;2;Field  ;
                SourceExpr="MSRP Price";
                Editable=False }

    { 10000074;2;Field    ;
                SourceExpr="Scaled Date" }

    { 1000000074;2;Field  ;
                SourceExpr="Replacement Cost";
                StyleExpr=StyleRep }

    { 1000000076;2;Field  ;
                SourceExpr="Replacement Margin" }

    { 1000000075;2;Field  ;
                Name=UnitPriceControl;
                CaptionML=ENU=Unit Price;
                SourceExpr="Unit Price";
                Editable=false }

  }
  CODE
  {
    VAR
      ESACC_ESFLADSMgt@14123801 : Codeunit 14123801;
      ESACC_C1000000055_Visible@915000550 : Boolean INDATASET;
      ESACC_C1000000055_Enabled@915000553 : Boolean INDATASET;
      ESACC_C1000000058_Visible@915000580 : Boolean INDATASET;
      ESACC_C1000000058_Enabled@915000583 : Boolean INDATASET;
      ESACC_C1000000059_Visible@915000590 : Boolean INDATASET;
      ESACC_C1000000059_Enabled@915000593 : Boolean INDATASET;
      ESACC_C1000000255_Visible@915002550 : Boolean INDATASET;
      ESACC_C1000000255_Enabled@915002553 : Boolean INDATASET;
      ESACC_C1000000257_Visible@915002570 : Boolean INDATASET;
      ESACC_C1000000257_Enabled@915002573 : Boolean INDATASET;
      ESACC_C1000000258_Visible@915002580 : Boolean INDATASET;
      ESACC_C1000000258_Enabled@915002583 : Boolean INDATASET;
      ESACC_F2_Visible@900000020 : Boolean INDATASET;
      ESACC_F2_Editable@900000021 : Boolean INDATASET;
      ESACC_F2_HideValue@900000022 : Boolean INDATASET;
      ESACC_F6_Visible@900000060 : Boolean INDATASET;
      ESACC_F6_Editable@900000061 : Boolean INDATASET;
      ESACC_F6_HideValue@900000062 : Boolean INDATASET;
      ESACC_F7_Visible@900000070 : Boolean INDATASET;
      ESACC_F7_Editable@900000071 : Boolean INDATASET;
      ESACC_F7_HideValue@900000072 : Boolean INDATASET;
      ESACC_F8_Visible@900000080 : Boolean INDATASET;
      ESACC_F8_Editable@900000081 : Boolean INDATASET;
      ESACC_F8_HideValue@900000082 : Boolean INDATASET;
      ESACC_F11_Visible@900000110 : Boolean INDATASET;
      ESACC_F11_Editable@900000111 : Boolean INDATASET;
      ESACC_F11_HideValue@900000112 : Boolean INDATASET;
      ESACC_F12_Visible@900000120 : Boolean INDATASET;
      ESACC_F12_Editable@900000121 : Boolean INDATASET;
      ESACC_F12_HideValue@900000122 : Boolean INDATASET;
      ESACC_F19_Visible@900000190 : Boolean INDATASET;
      ESACC_F19_Editable@900000191 : Boolean INDATASET;
      ESACC_F19_HideValue@900000192 : Boolean INDATASET;
      ESACC_F22_Visible@900000220 : Boolean INDATASET;
      ESACC_F22_Editable@900000221 : Boolean INDATASET;
      ESACC_F22_HideValue@900000222 : Boolean INDATASET;
      ESACC_F23_Visible@900000230 : Boolean INDATASET;
      ESACC_F23_Editable@900000231 : Boolean INDATASET;
      ESACC_F23_HideValue@900000232 : Boolean INDATASET;
      ESACC_F32_Visible@900000320 : Boolean INDATASET;
      ESACC_F32_Editable@900000321 : Boolean INDATASET;
      ESACC_F32_HideValue@900000322 : Boolean INDATASET;
      ESACC_F54_Visible@900000540 : Boolean INDATASET;
      ESACC_F54_Editable@900000541 : Boolean INDATASET;
      ESACC_F54_HideValue@900000542 : Boolean INDATASET;
      ESACC_F84_Visible@900000840 : Boolean INDATASET;
      ESACC_F84_Editable@900000841 : Boolean INDATASET;
      ESACC_F84_HideValue@900000842 : Boolean INDATASET;
      ESACC_F85_Visible@900000850 : Boolean INDATASET;
      ESACC_F85_HideValue@900000852 : Boolean INDATASET;
      ESACC_F95_Visible@900000950 : Boolean INDATASET;
      ESACC_F95_Editable@900000951 : Boolean INDATASET;
      ESACC_F95_HideValue@900000952 : Boolean INDATASET;
      ESACC_F5701_Visible@900057010 : Boolean INDATASET;
      ESACC_F5701_Editable@900057011 : Boolean INDATASET;
      ESACC_F5701_HideValue@900057012 : Boolean INDATASET;
      ESACC_F5709_Visible@900057090 : Boolean INDATASET;
      ESACC_F5709_Editable@900057091 : Boolean INDATASET;
      ESACC_F5709_HideValue@900057092 : Boolean INDATASET;
      ESACC_F5712_Visible@900057120 : Boolean INDATASET;
      ESACC_F5712_Editable@900057121 : Boolean INDATASET;
      ESACC_F5712_HideValue@900057122 : Boolean INDATASET;
      ESACC_F50000_Visible@900500000 : Boolean INDATASET;
      ESACC_F50000_Editable@900500001 : Boolean INDATASET;
      ESACC_F50000_HideValue@900500002 : Boolean INDATASET;
      ESACC_F50001_Visible@900500010 : Boolean INDATASET;
      ESACC_F50001_Editable@900500011 : Boolean INDATASET;
      ESACC_F50001_HideValue@900500012 : Boolean INDATASET;
      ESACC_F50002_Visible@900500020 : Boolean INDATASET;
      ESACC_F50002_Editable@900500021 : Boolean INDATASET;
      ESACC_F50002_HideValue@900500022 : Boolean INDATASET;
      ESACC_F50003_Visible@900500030 : Boolean INDATASET;
      ESACC_F50003_Editable@900500031 : Boolean INDATASET;
      ESACC_F50003_HideValue@900500032 : Boolean INDATASET;
      ESACC_F50004_Visible@900500040 : Boolean INDATASET;
      ESACC_F50004_Editable@900500041 : Boolean INDATASET;
      ESACC_F50004_HideValue@900500042 : Boolean INDATASET;
      ESACC_F50005_Visible@900500050 : Boolean INDATASET;
      ESACC_F50005_Editable@900500051 : Boolean INDATASET;
      ESACC_F50005_HideValue@900500052 : Boolean INDATASET;
      ESACC_F50006_Visible@900500060 : Boolean INDATASET;
      ESACC_F50006_Editable@900500061 : Boolean INDATASET;
      ESACC_F50006_HideValue@900500062 : Boolean INDATASET;
      ESACC_F50007_Visible@900500070 : Boolean INDATASET;
      ESACC_F50007_Editable@900500071 : Boolean INDATASET;
      ESACC_F50007_HideValue@900500072 : Boolean INDATASET;
      ESACC_F50008_Visible@900500080 : Boolean INDATASET;
      ESACC_F50008_Editable@900500081 : Boolean INDATASET;
      ESACC_F50008_HideValue@900500082 : Boolean INDATASET;
      ESACC_F50009_Visible@900500090 : Boolean INDATASET;
      ESACC_F50009_Editable@900500091 : Boolean INDATASET;
      ESACC_F50009_HideValue@900500092 : Boolean INDATASET;
      ESACC_F50010_Visible@900500100 : Boolean INDATASET;
      ESACC_F50010_Editable@900500101 : Boolean INDATASET;
      ESACC_F50010_HideValue@900500102 : Boolean INDATASET;
      ESACC_F50011_Visible@900500110 : Boolean INDATASET;
      ESACC_F50011_Editable@900500111 : Boolean INDATASET;
      ESACC_F50011_HideValue@900500112 : Boolean INDATASET;
      ESACC_F50012_Visible@900500120 : Boolean INDATASET;
      ESACC_F50012_Editable@900500121 : Boolean INDATASET;
      ESACC_F50012_HideValue@900500122 : Boolean INDATASET;
      ESACC_F50013_Visible@900500130 : Boolean INDATASET;
      ESACC_F50013_Editable@900500131 : Boolean INDATASET;
      ESACC_F50013_HideValue@900500132 : Boolean INDATASET;
      ESACC_F50014_Visible@900500140 : Boolean INDATASET;
      ESACC_F50014_Editable@900500141 : Boolean INDATASET;
      ESACC_F50014_HideValue@900500142 : Boolean INDATASET;
      ESACC_F50015_Visible@900500150 : Boolean INDATASET;
      ESACC_F50015_Editable@900500151 : Boolean INDATASET;
      ESACC_F50015_HideValue@900500152 : Boolean INDATASET;
      ESACC_F50016_Visible@900500160 : Boolean INDATASET;
      ESACC_F50016_HideValue@900500162 : Boolean INDATASET;
      ESACC_F50017_Visible@900500170 : Boolean INDATASET;
      ESACC_F50017_Editable@900500171 : Boolean INDATASET;
      ESACC_F50017_HideValue@900500172 : Boolean INDATASET;
      ESACC_F50018_Visible@900500180 : Boolean INDATASET;
      ESACC_F50018_Editable@900500181 : Boolean INDATASET;
      ESACC_F50018_HideValue@900500182 : Boolean INDATASET;
      ESACC_F50020_Visible@900500200 : Boolean INDATASET;
      ESACC_F50020_Editable@900500201 : Boolean INDATASET;
      ESACC_F50020_HideValue@900500202 : Boolean INDATASET;
      ESACC_F50021_Visible@900500210 : Boolean INDATASET;
      ESACC_F50021_Editable@900500211 : Boolean INDATASET;
      ESACC_F50021_HideValue@900500212 : Boolean INDATASET;
      ESACC_F50022_Visible@900500220 : Boolean INDATASET;
      ESACC_F50022_Editable@900500221 : Boolean INDATASET;
      ESACC_F50022_HideValue@900500222 : Boolean INDATASET;
      ESACC_F50023_Visible@900500230 : Boolean INDATASET;
      ESACC_F50023_Editable@900500231 : Boolean INDATASET;
      ESACC_F50023_HideValue@900500232 : Boolean INDATASET;
      ESACC_F50024_Visible@900500240 : Boolean INDATASET;
      ESACC_F50024_Editable@900500241 : Boolean INDATASET;
      ESACC_F50024_HideValue@900500242 : Boolean INDATASET;
      ESACC_F50025_Visible@900500250 : Boolean INDATASET;
      ESACC_F50025_Editable@900500251 : Boolean INDATASET;
      ESACC_F50025_HideValue@900500252 : Boolean INDATASET;
      ESACC_F50026_Visible@900500260 : Boolean INDATASET;
      ESACC_F50026_Editable@900500261 : Boolean INDATASET;
      ESACC_F50026_HideValue@900500262 : Boolean INDATASET;
      ESACC_F50027_Visible@900500270 : Boolean INDATASET;
      ESACC_F50027_Editable@900500271 : Boolean INDATASET;
      ESACC_F50027_HideValue@900500272 : Boolean INDATASET;
      ESACC_F50028_Visible@900500280 : Boolean INDATASET;
      ESACC_F50028_Editable@900500281 : Boolean INDATASET;
      ESACC_F50028_HideValue@900500282 : Boolean INDATASET;
      ESACC_F50029_Visible@900500290 : Boolean INDATASET;
      ESACC_F50029_Editable@900500291 : Boolean INDATASET;
      ESACC_F50029_HideValue@900500292 : Boolean INDATASET;
      ESACC_F50030_Visible@900500300 : Boolean INDATASET;
      ESACC_F50030_Editable@900500301 : Boolean INDATASET;
      ESACC_F50030_HideValue@900500302 : Boolean INDATASET;
      ESACC_F50031_Visible@900500310 : Boolean INDATASET;
      ESACC_F50031_Editable@900500311 : Boolean INDATASET;
      ESACC_F50031_HideValue@900500312 : Boolean INDATASET;
      ESACC_F50040_Visible@900500400 : Boolean INDATASET;
      ESACC_F50040_Editable@900500401 : Boolean INDATASET;
      ESACC_F50040_HideValue@900500402 : Boolean INDATASET;
      ESACC_F50100_Visible@900501000 : Boolean INDATASET;
      ESACC_F50100_Editable@900501001 : Boolean INDATASET;
      ESACC_F50100_HideValue@900501002 : Boolean INDATASET;
      ESACC_F50202_Visible@900502020 : Boolean INDATASET;
      ESACC_F50202_Editable@900502021 : Boolean INDATASET;
      ESACC_F50202_HideValue@900502022 : Boolean INDATASET;
      ESACC_F51077_Visible@900510770 : Boolean INDATASET;
      ESACC_F51077_Editable@900510771 : Boolean INDATASET;
      ESACC_F51077_HideValue@900510772 : Boolean INDATASET;
      StockStatusQuickQuote@1000000001 : TEMPORARY Record 50000;
      QuickQuoteWorkSheet@1000000000 : TEMPORARY Record 50001;
      SalesSetup@1000000054 : Record 311;
      WhseCreatePick@1000000055 : Codeunit 5778;
      LineNo@1000000002 : Integer;
      PrevLocationCode@1000000049 : Code[10];
      NextLocationCode@1000000050 : Code[10];
      LocationUpdated@1000000051 : Boolean;
      InFromItemNo@1000000006 : Code[20];
      InToItemNo@1000000005 : Code[20];
      InCustFilter@1000000004 : Code[20];
      InLocFilter@1000000003 : Code[10];
      Item@1000000012 : Record 27;
      Item2@1000000007 : Record 27;
      UserSetup@1000000008 : Record 91;
      SalesHeader@1000000010 : Record 36;
      SalesLine@1000000009 : Record 37;
      SalesLineNo@1000000011 : Integer;
      ItemUnitCost@1000000014 : Decimal;
      ItemUnitPrice@1000000013 : Decimal;
      EffPriceIncrDate@1000000015 : Date;
      QtyPerUOM@1000000016 : Decimal;
      UOMMgt@1000000017 : Codeunit 5402;
      ItemAvail@1000000018 : Decimal;
      ItemQOH@1000000020 : Decimal;
      ItemQPO@1000000019 : Decimal;
      ItemLead@1000000021 : DateFormula;
      CompanyInformation@1000000022 : Record 79;
      Item3@1000000024 : Record 27;
      MItemAvail@1000000023 : Decimal;
      LastSalesPrice@1000000044 : Record 50004;
      NewLastSalesPrice@1000000045 : Record 50004;
      SalesPrice@1000000026 : Record 7002;
      NewSalesPrice@1000000025 : Record 7002;
      BaseUOM@1000000027 : Code[10];
      Company@1000000028 : Record 79;
      OrderTotal@1000000033 : Decimal;
      SLoc@1000000034 : Record 14;
      MultiOrder@1000000032 : Boolean;
      FirstNo@1000000031 : Code[10];
      LastNo@1000000030 : Code[10];
      ONo@1000000029 : Code[10];
      LastPriceInfo@1000000035 : Text[60];
      LastPriceUserID@1000000036 : Code[10];
      Customer@1000000038 : Record 18;
      WLoc@1000000039 : Record 14;
      ItemUOM@1000000040 : Record 5404;
      OldLineNo@1000000041 : Integer;
      TempSalesHeader@1000000043 : TEMPORARY Record 36;
      TempSalesLine@1000000037 : TEMPORARY Record 37;
      LastSalesLineNo@1000000042 : Integer;
      CurrDivisionCodeFilter@1000000046 : Code[20];
      LastLostOpportunity@1000000047 : Record 50002;
      DocType@1000000048 : 'Quote,Order,Stock Status';
      Text00001@1000000052 : TextConst 'ENU=There are No Lines with Current Qty Populated. \ Please poulate Lines with Curr. Quantity and Unit Price to Proceed further';
      Text00002@1000000053 : TextConst 'ENU=There are Lines with Current Qty Populated. \ Are you sure you want to change the Division Code?';
      Text00003@1000000056 : TextConst 'ENU=Processing halted to respect the user selection';
      ItemMgt@1000000058 : Codeunit 50020;
      xItemNo@1000000059 : Text;
      xVendorItemNo@1000000062 : Text;
      WSHSHELL@1000000061 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{72C24DD5-D70A-438B-8A42-98424B88AFB8}:'Windows Script Host Object Model'.WshShell";
      MSVBD@1000000060 : DotNet "'Microsoft.VisualBasic, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.Microsoft.VisualBasic.Devices.Keyboard" RUNONCLIENT;
      Newunitprice@1000000063 : Decimal;
      StyleTxtNew@1000000064 : Text;
      ItemDivisionMatrix@1000000065 : Record 50032;
      DefaultDimension@1000000066 : Record 352;
      StockStatusQuickQuoteMgt@1000000067 : Codeunit 50000;
      StyleTxtABC@1000000068 : Text;
      sItemNo@1000100057 : Code[20];
      StyleRep@1000000057 : Text;

    LOCAL PROCEDURE ESACC_EasySecurity@14123801(OpenObject@14123801 : Boolean);
    VAR
      SetFilters@14123802 : Codeunit 14123812;
      TempBoolean@14123803 : Boolean;
    BEGIN
      IF OpenObject THEN BEGIN
        SetFilters.Filter50000(Rec,8,50000);

        TempBoolean := CurrPage.EDITABLE;
        IF ESACC_ESFLADSMgt.PageGeneral(50000,50000,TempBoolean) THEN
          CurrPage.EDITABLE := TempBoolean;
      END;

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,1,1000000055,
        ESACC_C1000000055_Visible,ESACC_C1000000055_Enabled,TempBoolean);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,1,1000000058,
        ESACC_C1000000058_Visible,ESACC_C1000000058_Enabled,TempBoolean);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,1,1000000059,
        ESACC_C1000000059_Visible,ESACC_C1000000059_Enabled,TempBoolean);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,1,1000000255,
        ESACC_C1000000255_Visible,ESACC_C1000000255_Enabled,TempBoolean);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,1,1000000257,
        ESACC_C1000000257_Visible,ESACC_C1000000257_Enabled,TempBoolean);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,1,1000000258,
        ESACC_C1000000258_Visible,ESACC_C1000000258_Enabled,TempBoolean);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,2,
        ESACC_F2_Visible,ESACC_F2_Editable,ESACC_F2_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,6,
        ESACC_F6_Visible,ESACC_F6_Editable,ESACC_F6_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,7,
        ESACC_F7_Visible,ESACC_F7_Editable,ESACC_F7_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,8,
        ESACC_F8_Visible,ESACC_F8_Editable,ESACC_F8_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,11,
        ESACC_F11_Visible,ESACC_F11_Editable,ESACC_F11_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,12,
        ESACC_F12_Visible,ESACC_F12_Editable,ESACC_F12_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,19,
        ESACC_F19_Visible,ESACC_F19_Editable,ESACC_F19_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,22,
        ESACC_F22_Visible,ESACC_F22_Editable,ESACC_F22_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,23,
        ESACC_F23_Visible,ESACC_F23_Editable,ESACC_F23_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,32,
        ESACC_F32_Visible,ESACC_F32_Editable,ESACC_F32_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,54,
        ESACC_F54_Visible,ESACC_F54_Editable,ESACC_F54_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,84,
        ESACC_F84_Visible,ESACC_F84_Editable,ESACC_F84_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,85,
        ESACC_F85_Visible,TempBoolean,ESACC_F85_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,95,
        ESACC_F95_Visible,ESACC_F95_Editable,ESACC_F95_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,5701,
        ESACC_F5701_Visible,ESACC_F5701_Editable,ESACC_F5701_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,5709,
        ESACC_F5709_Visible,ESACC_F5709_Editable,ESACC_F5709_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,5712,
        ESACC_F5712_Visible,ESACC_F5712_Editable,ESACC_F5712_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50000,
        ESACC_F50000_Visible,ESACC_F50000_Editable,ESACC_F50000_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50001,
        ESACC_F50001_Visible,ESACC_F50001_Editable,ESACC_F50001_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50002,
        ESACC_F50002_Visible,ESACC_F50002_Editable,ESACC_F50002_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50003,
        ESACC_F50003_Visible,ESACC_F50003_Editable,ESACC_F50003_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50004,
        ESACC_F50004_Visible,ESACC_F50004_Editable,ESACC_F50004_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50005,
        ESACC_F50005_Visible,ESACC_F50005_Editable,ESACC_F50005_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50006,
        ESACC_F50006_Visible,ESACC_F50006_Editable,ESACC_F50006_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50007,
        ESACC_F50007_Visible,ESACC_F50007_Editable,ESACC_F50007_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50008,
        ESACC_F50008_Visible,ESACC_F50008_Editable,ESACC_F50008_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50009,
        ESACC_F50009_Visible,ESACC_F50009_Editable,ESACC_F50009_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50010,
        ESACC_F50010_Visible,ESACC_F50010_Editable,ESACC_F50010_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50011,
        ESACC_F50011_Visible,ESACC_F50011_Editable,ESACC_F50011_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50012,
        ESACC_F50012_Visible,ESACC_F50012_Editable,ESACC_F50012_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50013,
        ESACC_F50013_Visible,ESACC_F50013_Editable,ESACC_F50013_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50014,
        ESACC_F50014_Visible,ESACC_F50014_Editable,ESACC_F50014_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50015,
        ESACC_F50015_Visible,ESACC_F50015_Editable,ESACC_F50015_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50016,
        ESACC_F50016_Visible,TempBoolean,ESACC_F50016_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50017,
        ESACC_F50017_Visible,ESACC_F50017_Editable,ESACC_F50017_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50018,
        ESACC_F50018_Visible,ESACC_F50018_Editable,ESACC_F50018_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50020,
        ESACC_F50020_Visible,ESACC_F50020_Editable,ESACC_F50020_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50021,
        ESACC_F50021_Visible,ESACC_F50021_Editable,ESACC_F50021_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50022,
        ESACC_F50022_Visible,ESACC_F50022_Editable,ESACC_F50022_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50023,
        ESACC_F50023_Visible,ESACC_F50023_Editable,ESACC_F50023_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50024,
        ESACC_F50024_Visible,ESACC_F50024_Editable,ESACC_F50024_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50025,
        ESACC_F50025_Visible,ESACC_F50025_Editable,ESACC_F50025_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50026,
        ESACC_F50026_Visible,ESACC_F50026_Editable,ESACC_F50026_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50027,
        ESACC_F50027_Visible,ESACC_F50027_Editable,ESACC_F50027_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50028,
        ESACC_F50028_Visible,ESACC_F50028_Editable,ESACC_F50028_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50029,
        ESACC_F50029_Visible,ESACC_F50029_Editable,ESACC_F50029_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50030,
        ESACC_F50030_Visible,ESACC_F50030_Editable,ESACC_F50030_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50031,
        ESACC_F50031_Visible,ESACC_F50031_Editable,ESACC_F50031_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50040,
        ESACC_F50040_Visible,ESACC_F50040_Editable,ESACC_F50040_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50100,
        ESACC_F50100_Visible,ESACC_F50100_Editable,ESACC_F50100_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,50202,
        ESACC_F50202_Visible,ESACC_F50202_Editable,ESACC_F50202_HideValue);

      ESACC_ESFLADSMgt.PageControl(
        50000,50000,0,51077,
        ESACC_F51077_Visible,ESACC_F51077_Editable,ESACC_F51077_HideValue);

      ESACC_EasySecurityManual(OpenObject);
    END;

    LOCAL PROCEDURE ESACC_EasySecurityManual@14123811(OpenObject@14123811 : Boolean);
    BEGIN
    END;

    PROCEDURE UserPrompt@1000000011();
    BEGIN
      //TOP010B KT ABCSI SSQQ Division Code 07092015
      QuickQuoteWorkSheet.RESET;
      QuickQuoteWorkSheet.SETCURRENTKEY("Location Code",Description,"Item No.","Sell-To Customer No.");
      QuickQuoteWorkSheet.SETFILTER("Current Qty.",'<>%1',0);
      QuickQuoteWorkSheet.SETFILTER("Lost Opportunity",'%1',FALSE);
      IF QuickQuoteWorkSheet.FINDFIRST THEN
        IF NOT CONFIRM(Text00002) THEN
          ERROR(Text00003) ELSE
        BEGIN
          CheckLostOpportunity;
          StockStatusQuickQuote.RESET;
          StockStatusQuickQuote.DELETEALL;
          QuickQuoteWorkSheet.RESET;
          QuickQuoteWorkSheet.DELETEALL;
          CLEAR(LineNo);
        END;
      //TOP010B KT ABCSI SSQQ Division Code 07092015
    END;

    PROCEDURE UserUpdate@1000000000();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE Refresh@1000000001(NewCust@1000000000 : Boolean);
    VAR
      CustRec@1000000001 : Record 18;
      ItemDivMatrix@1000000002 : Record 50032;
      ItemABC1@1000000003 : Record 27;
    BEGIN
      IF NewCust THEN
        BEGIN
          CheckLostOpportunity;
          StockStatusQuickQuote.RESET;
          StockStatusQuickQuote.DELETEALL;
          QuickQuoteWorkSheet.RESET;
          QuickQuoteWorkSheet.DELETEALL;
          CLEAR(LineNo);
        END;

      RESET;

      //TOP130 KT ABCSI Item List Sort and Filter by Status 04102015 Start
      // <TPZ591>
      ASCENDING := TRUE;
      SETCURRENTKEY("Sorting Order");
      // </TPZ591>

      IF CustRec.GET(InCustFilter) THEN BEGIN
        IF  (NOT CustRec."Non Divisional") THEN BEGIN
          FILTERGROUP(2);
          IF ItemDivMatrix.GET(CurrDivisionCodeFilter) THEN
            SETFILTER("Shortcut Dimension 5 Code",ItemDivMatrix."Divisional Filter");
          FILTERGROUP(0);
        END;
      END;
      //TOP130 KT ABCSI Item List Sort and Filter by Status 04102015 End
       //<TPZ1801>
       //SETFILTER(Blocked,'<>%1',Blocked::All); //EB
       SETFILTER(Blocked,'<>%1',TRUE); //EB //UTK TPZ2785
       //<TPZ1801>
       SETFILTER("ABC Code",'<>%1','OB'); //<TPZ2839>

      {
      IF InCustFilter <> '' THEN
         QuickQuoteWorkSheet.SETRANGE("Sell-To Customer No.", InCustFilter);
      IF NOT QuickQuoteWorkSheet.FIND('+') THEN
         LineNo := 1
      ELSE
         LineNo := QuickQuoteWorkSheet."Line No." + 1;
      }
      IF FIND('-') THEN;
      CurrPage.UPDATE(FALSE);
      CurrPage.ACTIVATE;
    END;

    PROCEDURE FindItemNo@1000000008(varItemNo@1000000000 : Code[20]);
    VAR
      icnt@1000000001 : Integer;
      wrk@1000000002 : Record 50000;
      sDivisionalFilter@1000000004 : Text[20];
    BEGIN
      //TOP10C KT ABCSI - SSQQ Item Search 07082015
      //>>RS1.00
      RESET;//vah
      varItemNo:=UPPERCASE(varItemNo);
      IF ItemDivisionMatrix.GET("Shortcut Dimension 5 Code") THEN
         sDivisionalFilter:= ItemDivisionMatrix."Divisional Filter";

      wrk.RESET;
      wrk.SETCURRENTKEY("Sorting Order");
      //wrk.SETCURRENTKEY("Item No.");
      IF sDivisionalFilter <>'' THEN
        wrk.SETFILTER("Shortcut Dimension 5 Code", ItemDivisionMatrix."Divisional Filter")
      ELSE
        wrk.SETRANGE("Shortcut Dimension 5 Code","Shortcut Dimension 5 Code" );

      //wrk.SETFILTER(Blocked, '<>All');  //gg item blocking  TPZ2785
      wrk.SETRANGE(Blocked,FALSE);//TPZ2785
      //wrk.SETFILTER("Item No.",xItemNo + '*');
      wrk.SETFILTER("ABC Code",'<>OB'); //<TPZ2839>
      icnt:= 0;
      IF wrk.FINDFIRST THEN BEGIN
        REPEAT
          icnt := icnt + 1;
         IF varItemNo = COPYSTR(wrk."Item No.", 1, STRLEN(varItemNo)) THEN
           BEGIN
           sItemNo:= wrk."Item No.";
           wrk.FINDLAST;
           END;
      UNTIL wrk.NEXT=0;
      END;

      "Item Filter" := sItemNo ;
      MODIFY;
      SETFILTER("Shortcut Dimension 5 Code", sDivisionalFilter); //VAH

      //MESSAGE(sItemNo + ' ' + FORMAT(icnt));
      SETFILTER("Item No.","Item Filter");//VAH
      SETFILTER("Item No.", sItemNo);//vah
      FINDSET;//vah
      CurrPage.SETTABLEVIEW(Rec);
      CurrPage.SETRECORD(Rec);
      CurrPage.UPDATE(FALSE);//VAH
      IF CURRENTCLIENTTYPE = CLIENTTYPE::Windows THEN BEGIN
        IF ISCLEAR(WSHSHELL) THEN
          CREATE(WSHSHELL, TRUE, TRUE);
      //  WSHSHELL.SendKeys('{F5}'); //VAH temp
      END;



      //SETFILTER("Shortcut Dimension 5 Code", sDivisionalFilter); //VAH
      //RS1.00

      {IF ISCLEAR(WSHSHELL) THEN
        CREATE(WSHSHELL, TRUE, TRUE);

      WSHSHELL.SendKeys('^Z');}


      //MSVBD := MSVBD.Keyboard;
      //MSVBD.SendKeys('^Z');
      //MSVBD.SendKeys('^+A');
      //TOP10C KT ABCSI - SSQQ Item Search 07082015
    END;

    PROCEDURE FindVendItemNo@1000000012(varVendItemNo@1000000000 : Text[30]);
    VAR
      wrk@1000000003 : Record 50000;
      icnt@1000000004 : Integer;
      sItemNo@1000000005 : Code[20];
      sDivisionalFilter@1000000001 : Text[20];
    BEGIN
      //TOP10E KT ABCSI - Additional Stock Status 07282015
      varVendItemNo:=DELCHR(DELCHR(UPPERCASE(varVendItemNo),'=', '&'), '=', ' ');

      wrk.SETCURRENTKEY("Sorting Order");
      IF ItemDivisionMatrix.GET("Shortcut Dimension 5 Code") THEN
         sDivisionalFilter:= ItemDivisionMatrix."Divisional Filter";

      //wrk.SETCURRENTKEY("Vendor Item No.");
      IF sDivisionalFilter <>'' THEN
        wrk.SETFILTER("Shortcut Dimension 5 Code", ItemDivisionMatrix."Divisional Filter")
      ELSE
        wrk.SETRANGE("Shortcut Dimension 5 Code","Shortcut Dimension 5 Code" );

      //wrk.SETFILTER(Blocked, '<>All');  //gg item blocking TPZ2785
      wrk.SETRANGE(Blocked,FALSE);//TPZ2785
      //wrk.SETFILTER("Item No.",xVendorItemNo + '*');
      wrk.SETFILTER("ABC Code",'<>OB'); //<TPZ2839>
      icnt:= 0;
      IF wrk.FINDFIRST THEN BEGIN
        REPEAT
          icnt := icnt + 1;
         IF varVendItemNo = DELCHR(DELCHR(UPPERCASE(COPYSTR(wrk."Vendor Item No.", 1, STRLEN(varVendItemNo))), '=','&'), '=',' ') THEN
           BEGIN
           sItemNo:= wrk."Vendor Item No.";
           wrk.FINDLAST;
           END;
      UNTIL wrk.NEXT=0;
      END;
      //MESSAGE(sItemNo + ' ' + FORMAT(icnt));
      sItemNo := CONVERTSTR(sItemNo, '&', '*');
      SETFILTER("Vendor Item No.", sItemNo);
      FINDFIRST;

      CurrPage.UPDATE(FALSE);
      CurrPage.ACTIVATE(TRUE);
      IF CURRENTCLIENTTYPE = CLIENTTYPE::Windows THEN BEGIN
        IF ISCLEAR(WSHSHELL) THEN
          CREATE(WSHSHELL, TRUE, TRUE);
        WSHSHELL.SendKeys('{F5}');
      END;
      SETFILTER("Shortcut Dimension 5 Code", sDivisionalFilter);
      //RS1.00

      //TOP10E KT ABCSI - Additional Stock Status 07282015
    END;

    PROCEDURE SetUserFilters@1000000002(InCustomer@1000000000 : Code[20];InLocation@1000000001 : Code[10];InDivisionCodeFilter@1000000002 : Code[20]);
    BEGIN
      InCustFilter := InCustomer;
      InLocFilter := InLocation;
      CurrDivisionCodeFilter := InDivisionCodeFilter;
      UpdateLine;
    END;

    PROCEDURE UpdateLastSalesPrice@1000000003(VAR InRec@1000000000 : Record 50000);
    VAR
      CustLoc@1000000001 : Record 18;
    BEGIN
      IF Item.GET(InRec."Item No.") THEN BEGIN
        BaseUOM := Item."Base Unit of Measure";
      END;

      IF "Unit Price" = 0 THEN
        EXIT;
      NewLastSalesPrice.RESET;
      NewLastSalesPrice.SETRANGE("Document Type",NewLastSalesPrice."Document Type"::"Stock Status");
      NewLastSalesPrice.SETRANGE("Document No.",'');
      NewLastSalesPrice.SETRANGE("Sell-to Customer No.",InCustFilter);
      NewLastSalesPrice.SETRANGE("Item No.","Item No.");
      NewLastSalesPrice.SETRANGE("Unit of Measure Code","Current UOM");
      IF NewLastSalesPrice.FINDFIRST THEN BEGIN
        NewLastSalesPrice."Document Date" := "Order Date";
        NewLastSalesPrice."Last Unit Price" := "Unit Price";
        NewLastSalesPrice."Last Price UOM" := "Current UOM";
        NewLastSalesPrice."Last Price Qty." := "Current Qty.";
        NewLastSalesPrice."Last Price Date" := TODAY;
        NewLastSalesPrice."Last Price User ID" := USERID;
        NewLastSalesPrice.MODIFY;
      END ELSE BEGIN
        IF "Special Price" THEN //TPZ2970
        EXIT; //TPZ2970
        NewLastSalesPrice.INIT;
        NewLastSalesPrice."Document Type" := NewLastSalesPrice."Document Type"::"Stock Status";
        NewLastSalesPrice."Document No." := '';
        // <TPZ1014>
        NewLastSalesPrice.VALIDATE("Sell-to Customer No.",InCustFilter);
        // </TPZ1014>
        NewLastSalesPrice."Item No." := "Item No.";
        NewLastSalesPrice."Unit of Measure Code" := "Current UOM";
        NewLastSalesPrice."Document Date" := "Order Date";
        NewLastSalesPrice."Last Unit Price" := "Unit Price";
        NewLastSalesPrice."Last Price UOM" := "Current UOM";
        NewLastSalesPrice."Last Price Qty." := "Current Qty.";
        NewLastSalesPrice."Last Price Date" := TODAY;
        NewLastSalesPrice."Last Price User ID" := USERID;
        // <TPZ449>
        IF CustLoc.GET(InCustFilter) THEN BEGIN
          NewLastSalesPrice."Shortcut Dimension 5 Code" := CurrDivisionCodeFilter;
          NewLastSalesPrice."Country/Region Code" := CustLoc."Country/Region Code";
        END;
        // </TPZ449>
        NewLastSalesPrice.INSERT;
      END;
    END;

    PROCEDURE CalcQtyOnPick@1000000015(varItemNo@1000000001 : Code[20];varLocCode@1000000002 : Code[10]) : Decimal;
    VAR
      ItemRec@1000000000 : Record 27;
    BEGIN
      //TOP010 - Stock Status Quick Quote Screen - KT ABCSI 11052015
      ItemRec.GET(varItemNo);
      ItemRec.SETRANGE("Location Filter",varLocCode);
      ItemRec.CALCFIELDS("Qty. on Pick");
      EXIT(ItemRec."Qty. on Pick");
      //TOP010 - Stock Status Quick Quote Screen - KT ABCSI 11052015
    END;

    PROCEDURE NewOrderQuote@1000000005(CreateType@1000000000 : 'Order,Quote,Credit Memo,Return Order';"Doc No."@1000000001 : Code[10]);
    VAR
      OLocation@1000000002 : Code[10];
      NLocation@1000000003 : Code[10];
      OK@1000000004 : Boolean;
      ONo@1000000005 : Code[10];
      SOrders@1000000007 : Record 36;
      "LostQuoteNo."@1000000006 : Code[10];
      OnlyLost@1000000008 : Boolean;
      ShipToAddrDivision@1000000009 : Record 51002;
      Item@1000000010 : Record 27;
    BEGIN
      IF (StockStatusQuickQuote.COUNT = 0) AND ((CreateType = CreateType::Order) OR (CreateType = CreateType::Quote)) THEN
        BEGIN
          MESSAGE('There is no item to process.');
          EXIT;
        END;

      //TOP010 KT ABCSI Stock Status Quick Quote 06042015
      QuickQuoteWorkSheet.RESET;
      QuickQuoteWorkSheet.SETCURRENTKEY("Location Code",Description,"Item No.","Sell-To Customer No.");
      QuickQuoteWorkSheet.SETFILTER("Current Qty.",'<>%1',0);
      QuickQuoteWorkSheet.SETFILTER("Lost Opportunity",'%1',FALSE);
      IF NOT QuickQuoteWorkSheet.FINDFIRST THEN
        ERROR(Text00001);
      //TOP010 KT ABCSI Stock Status Quick Quote 06042015

      CheckLostOpportunity;
      StockStatusQuickQuote.SETFILTER("Lost Opportunity",'%1',FALSE);
      IF (StockStatusQuickQuote.COUNT <> 0) THEN BEGIN
        CLEAR(OnlyLost);
        CLEAR(OLocation);
        CLEAR(NLocation);
        CLEAR(SalesHeader);
        CLEAR(LocationUpdated);
        CLEAR(PrevLocationCode);
        CLEAR(NextLocationCode);
        CLEAR(MultiOrder);
        CLEAR(FirstNo);
        CLEAR(LastNo);
        OrderTotal := CalcTotal(MultiOrder);
        SalesHeader.INIT;
        IF CreateType = CreateType::Order THEN
          SalesHeader."Document Type" := SalesHeader."Document Type"::Order
        ELSE
          BEGIN
          IF CreateType = CreateType::Quote THEN
            SalesHeader."Document Type" := SalesHeader."Document Type"::Quote
          ELSE
            EXIT;
          END;

        IF "Doc No." = '' THEN
          BEGIN
            SalesHeader.INSERT(TRUE);
            SalesHeader.SetHideValidationDialog(TRUE);
            SalesHeader.VALIDATE("Sell-to Customer No.",InCustFilter);
            SalesHeader.VALIDATE("Payment Terms Code");
            SalesHeader.VALIDATE("Shortcut Dimension 5 Code",CurrDivisionCodeFilter);  //TOP130 KT ABCSI Item List Sort and Filter by Status 04172015
            SalesHeader."Location Code" := '';
            SalesHeader.VALIDATE("Order Date",TODAY);
            SalesHeader.MODIFY(TRUE);
            //TOP040 KT ABCSI Sales Order Split by Locations 03052015 Commented per SMT
            {
            FirstNo := SalesHeader."No.";
            IF MultiOrder THEN BEGIN
              SalesHeader."Master Order No." := FirstNo;
              SalesHeader."Original Free Freight Base" := OrderTotal;
            END;
            LastNo := SalesHeader."No."
            }
            //TOP040 KT ABCSI Sales Order Split by Locations 03052015 Commented per SMT
          END;

        SalesLine.RESET;
        SalesLine.SETCURRENTKEY("Document Type","Document No.");
        SalesLine.SETRANGE(SalesLine."Document Type",SalesHeader."Document Type");
        //TOP170 KT ABCSI Sales Order Updates 04022015
        IF "Doc No." <> '' THEN
          SalesLine.SETRANGE(SalesLine."Document No.","Doc No.")
        ELSE
          SalesLine.SETRANGE(SalesLine."Document No.",SalesHeader."No.");
        //TOP170 KT ABCSI Sales Order Updates 04022015
        IF SalesLine.FIND('+') THEN
          SalesLineNo := SalesLine."Line No." + 10000
        ELSE
          SalesLineNo := 10000;
        QuickQuoteWorkSheet.RESET;
        //QuickQuoteWorkSheet.SETCURRENTKEY("Location Code",Description,"Item No.","Sell-To Customer No.");
        QuickQuoteWorkSheet.SETCURRENTKEY("Line No.","Item No.","Sell-To Customer No.");
        QuickQuoteWorkSheet.SETFILTER("Current Qty.",'<>%1',0);
        QuickQuoteWorkSheet.SETFILTER("Lost Opportunity",'%1',FALSE);

        IF QuickQuoteWorkSheet.FIND('-') THEN
          REPEAT
            IF "Doc No." = '' THEN
              IF SalesHeader."Location Code" = '' THEN BEGIN
              //<TPZ1697>
                IF ShipToAddrDivision.GET(SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code",SalesHeader."Shortcut Dimension 5 Code") THEN BEGIN
                  IF ShipToAddrDivision."Location Code" <> '' THEN
                    SalesHeader.VALIDATE("Location Code",ShipToAddrDivision."Location Code");
                END ELSE BEGIN
                    SalesHeader.VALIDATE(SalesHeader."Location Code",QuickQuoteWorkSheet."Location Code");
                END;
                //<TPZ1697>
               // SalesHeader.VALIDATE(SalesHeader."Location Code",QuickQuoteWorkSheet."Location Code");
                SalesHeader.MODIFY(TRUE);
              END;
            //EB
            //TOP040 KT ABCSI Sales Order Split by Locations 03052015 Commented per SMT
            {
            IF OLocation = '' THEN OLocation := QuickQuoteWorkSheet."Location Code"
            ELSE OLocation := NLocation;
            NLocation := QuickQuoteWorkSheet."Location Code";
            IF OLocation <> NLocation THEN BEGIN
              SLoc.GET(NLocation);
              CLEAR(SalesHeader);
              SalesHeader.INIT;
              IF CreateType = CreateType::Order THEN
                SalesHeader."Document Type" := SalesHeader."Document Type"::Order
              ELSE IF CreateType = CreateType::Quote THEN
                SalesHeader."Document Type" := SalesHeader."Document Type"::Quote;
              IF "Doc No." = '' THEN BEGIN
                MultiOrder := TRUE;
                SalesHeader.INSERT(TRUE);
                SalesHeader.SetHideValidationDialog(TRUE);
                SalesHeader.VALIDATE("Sell-to Customer No.",InCustFilter);
                LastNo := SalesHeader."No.";
                SalesHeader."Master Order No." := FirstNo;
                SalesHeader."Original Free Freight Base" := OrderTotal;
                SalesHeader.VALIDATE("Payment Terms Code");
                SalesHeader.VALIDATE("Location Code",NLocation);
                SalesHeader.VALIDATE("Order Date",TODAY);
                PrevLocationCode := NLocation;
                SalesHeader.MODIFY(TRUE);
              END;
            END;
            }
            //TOP040 KT ABCSI Sales Order Split by Locations 03052015 Commented per SMT
            SalesLine.INIT;
            SalesLine."Document Type" := SalesHeader."Document Type";
            IF "Doc No." = '' THEN
              SalesLine."Document No." := SalesHeader."No."
            ELSE
              SalesLine."Document No." := "Doc No.";
            SalesLine."Line No." := SalesLineNo;
            SalesLineNo := SalesLineNo + 10000;
            SalesLine.VALIDATE("Sell-to Customer No.",InCustFilter);
            SalesLine.Type := SalesLine.Type::Item;
            SalesLine.VALIDATE("No.",QuickQuoteWorkSheet."Item No.");
            IF QuickQuoteWorkSheet."Location Code" <> '' THEN
              SalesLine.VALIDATE("Location Code",QuickQuoteWorkSheet."Location Code");
            SalesLine.Quantity := QuickQuoteWorkSheet."Current Qty.";
            SalesLine.VALIDATE("Unit of Measure Code",QuickQuoteWorkSheet."Current UOM");
            SalesLine.VALIDATE("Unit Price",QuickQuoteWorkSheet."Unit Price");
            SalesLine."Base UOM Price" := QuickQuoteWorkSheet."Unit Price";
            SalesLine."Last Unit Price" := QuickQuoteWorkSheet."Last Unit Price";
            SalesLine."Last Price UOM" := QuickQuoteWorkSheet."Last Price UOM";
            SalesLine."Last Price Qty." := QuickQuoteWorkSheet."Last Price Qty.";
            SalesLine."Last Price Date" := QuickQuoteWorkSheet."Last Price Date";
            SalesLine."Modified UserID" := USERID;
            SalesLine."Special Price" := Rec."Special Price"; //TPZ2970
           SalesLine.INSERT(TRUE);
          UNTIL QuickQuoteWorkSheet.NEXT = 0;
      END ELSE OnlyLost := TRUE;

      StockStatusQuickQuote.RESET;
      StockStatusQuickQuote.DELETEALL;

      QuickQuoteWorkSheet.RESET;
      QuickQuoteWorkSheet.DELETEALL;

      COMMIT;
      IF NOT OnlyLost THEN BEGIN
        IF "Doc No." = '' THEN
          //IF NOT MultiOrder THEN BEGIN //TOP040 KT ABCSI Sales Order Split by Locations 03052015 Commented per SMT
            IF CreateType = CreateType::Order THEN
              PAGE.RUNMODAL(PAGE::"Sales Order",SalesHeader)
            ELSE
              PAGE.RUNMODAL(PAGE::"Sales Quote",SalesHeader);
          //TOP040 KT ABCSI Sales Order Split by Locations 03052015 Commented per SMT
          {
          END ELSE BEGIN
            SOrders.RESET;
            SOrders.SETFILTER("No.",'%1..%2',FirstNo,LastNo);
            SOrders.FIND('-');
            IF CreateType = CreateType::Order THEN
              PAGE.RUNMODAL(PAGE::"Sales Order List",SOrders)
            ELSE
              PAGE.RUNMODAL(PAGE::"Sales Quotes",SOrders);
          END;
          }
          //TOP040 KT ABCSI Sales Order Split by Locations 03052015 Commented per SMT
      END;
    END;

    PROCEDURE ShowWorksheet@1000000004();
    VAR
      QuickQuoteWkshPg@1000000000 : Page 50001;
      LocalOrderTotal@1000000001 : Decimal;
    BEGIN
      QuickQuoteWorkSheet.SETCURRENTKEY("Line No.","Item No.","Sell-To Customer No.");
      QuickQuoteWorkSheet.SETFILTER("Line No.", '<>%1',0);
      PAGE.RUNMODAL(50001,QuickQuoteWorkSheet);
      QuickQuoteWorkSheet.RESET;
      IF QuickQuoteWorkSheet.FIND('-') THEN
        REPEAT
          IF StockStatusQuickQuote.GET(QuickQuoteWorkSheet."Item No.") THEN
            BEGIN
              StockStatusQuickQuote."Current Qty." := QuickQuoteWorkSheet."Current Qty.";
              StockStatusQuickQuote."Current UOM" := QuickQuoteWorkSheet."Current UOM";
              StockStatusQuickQuote."Unit Price" := QuickQuoteWorkSheet."Unit Price";
              StockStatusQuickQuote."Location Code" := QuickQuoteWorkSheet."Location Code";
              StockStatusQuickQuote.MODIFY;
            END;
        UNTIL QuickQuoteWorkSheet.NEXT = 0;
    END;

    PROCEDURE UpdateLine@1000000007();
    VAR
      OK@1000000000 : Boolean;
    BEGIN

      IF (StockStatusQuickQuote.GET("Item No.")) THEN
        BEGIN
          "Current Qty." := StockStatusQuickQuote."Current Qty.";
          "Current UOM" := StockStatusQuickQuote."Current UOM";
          "Unit Price" := StockStatusQuickQuote."Unit Price";
          "Reason Code" := StockStatusQuickQuote."Reason Code";
          "Reason Code Comment" := StockStatusQuickQuote."Reason Code Comment";
          "Lost Opportunity Description" := StockStatusQuickQuote."Lost Opportunity Description";  //TOP230 KT ABCSI CRP 2 Fixes 06092015
          "Lost Opportunity" := StockStatusQuickQuote."Lost Opportunity";
          "Order Date" := TODAY;
          //TOP230 KT ABCSI CRP 2 Fixes 05282015
          "Recomm. Unit Price" := StockStatusQuickQuote."Recomm. Unit Price";
          "Recomm. Multiplier" := StockStatusQuickQuote."Recomm. Multiplier";
          //TOP230 KT ABCSI CRP 2 Fixes 05282015
          IF (StockStatusQuickQuote."Location Code" <> InLocFilter) AND ("Location Code" = xRec."Location Code") AND (Item.Type<>Item.Type::Service) THEN BEGIN //<TPZ2482>
            "Location Code" := StockStatusQuickQuote."Location Code";
            "Location Filter" := StockStatusQuickQuote."Location Code"
          END;
          //"Shortcut Dimension 5 Code" := CurrDivisionCodeFilter;
          "Sell-to Customer No." := InCustFilter;
          CALCFIELDS("Cust. Qty. on SO", "Qty. on Sales Order");
          IF Item.GET("Item No.") THEN
            BEGIN
              Description := Item.Description;
              "Unit Cost" := Item."Unit Cost";
              //"ABC Code" := Item."ABC Code";//Utkarsh
              QtyPerUOM := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Current UOM");
              Item.SETRANGE("Location Filter");
              Item.CALCFIELDS(Inventory,"Qty. on Sales Order","Qty. on Purch. Order");
              "Total Qty. on Hand" := Item.Inventory / QtyPerUOM;
              Item.SETRANGE("Location Filter",StockStatusQuickQuote."Location Code");
              Item.CALCFIELDS(Inventory,"Qty. on Sales Order","Qty. on Purch. Order");

              //<TPZ1678>
              "Quantity Available on Location" := (Item.Inventory - Item."Qty. on Sales Order") / QtyPerUOM;
              //"Quantity Available on Location" := ItemMgt.CalcQtyAvailable(Item) / QtyPerUOM;
              //</TPZ1678>

              "Qty. on Hand" := Item.Inventory / QtyPerUOM;
              "Qty. on Purch. Order" := Item."Qty. on Purch. Order" / QtyPerUOM;
              "Qty. on Sales Order" := Item."Qty. on Sales Order" / QtyPerUOM;
              ItemLead := Item."Lead Time Calculation";
              "MSRP Price" := Item."MSRP Price";//TPZ3090
              InsertScaleddate ;//<TPZ3163>
              IF (CompanyInformation."Location Code" <> '') AND (Item3.GET("Item No.")) THEN BEGIN
                Item3.SETFILTER("Location Filter",CompanyInformation."Location Code");
                Item3.CALCFIELDS(Inventory,"Qty. on Sales Order");
                //<TPZ1678>
                "Main Loc. Qty. Avail" := (Item3.Inventory - Item3."Qty. on Sales Order") / QtyPerUOM;
                //"Main Loc. Qty. Avail" := ItemMgt.CalcQtyAvailable(Item3)/QtyPerUOM;
                //</TPZ1675>
              END ELSE CLEAR("Main Loc. Qty. Avail");
              //TOP230 KT ABCSI CRP 2 Fixes 05282015
              "Low Unit Price" := Item."Low Unit Price";
              "High Unit Price" := Item."High Unit Price";
              "Medium Unit Price" := Item."Medium Unit Price";
              //TOP230 KT ABCSI CRP 2 Fixes 05282015
            END;

            SalesPrice.RESET;
            SalesPrice.SETRANGE("Item No.","Item No.");
            SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::Customer);
            SalesPrice.SETRANGE("Sales Code",InCustFilter);
            IF SalesPrice.FINDLAST THEN BEGIN
              "Last Price Change Date" := SalesPrice."Starting Date";
              //"Low Unit Price" := SalesPrice."Low Unit Price";
              //"High Unit Price" := SalesPrice."High Unit Price";
              //"Medium Unit Price" := SalesPrice."Medium Unit Price";
              "Curr. Unit Price Starting Date" := SalesPrice."Starting Date";
              "Curr. Unit Price Ending Date" := SalesPrice."Ending Date";
            END;

          //Find Last Lost Opportunity
          LastLostOpportunity.RESET;
          //SQLPerform
          LastLostOpportunity.SETCURRENTKEY("Sell-to Customer No.",Type,"No.");
          LastLostOpportunity.SETRANGE(Type, LastLostOpportunity.Type::Item);

          LastLostOpportunity.SETRANGE("Document Type",LastLostOpportunity."Document Type"::"3");
          LastLostOpportunity.SETRANGE("No.","Item No.");
          LastLostOpportunity.SETRANGE("Sell-to Customer No.",InCustFilter);
          IF LastLostOpportunity.FINDLAST THEN BEGIN
            "Last Lost Opportunity" := TRUE;
            "Last Reason Code" := LastLostOpportunity."Reason Code";
            "Last Reason Code Comment" := LastLostOpportunity."Reason Code Comment";
          END;

          //Find Last Quoted Unit Price and related fields
          LastSalesPrice.RESET;
          //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 Start
          LastSalesPrice.ASCENDING;
          //SQLPerform
          //LastSalesPrice.SETCURRENTKEY("Sell-to Customer No.","Item No.","Document Date");
          LastSalesPrice.SETCURRENTKEY("Sell-to Customer No.","Item No.","Unit of Measure Code","Document Type");
          //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 Start
          LastSalesPrice.SETRANGE("Document Type",LastSalesPrice."Document Type"::Quote);
          LastSalesPrice.SETRANGE("Sell-to Customer No.",InCustFilter);
          LastSalesPrice.SETRANGE("Item No.","Item No.");
          LastSalesPrice.SETRANGE("Unit of Measure Code","Base Unit of Measure");
          IF LastSalesPrice.FINDLAST THEN BEGIN
            "Last Quoted Unit Price" := LastSalesPrice."Last Unit Price";
            "Last Quoted UOM" := LastSalesPrice."Last Price UOM";
            "Last Quoted Qty." := LastSalesPrice."Last Price Qty.";
          END ELSE BEGIN
            "Last Quoted Unit Price" := 0;
            "Last Quoted UOM" := '';
            "Last Quoted Qty." := 0;
          END;

          //Find Last Invoiced Unit Price and related fields
          LastSalesPrice.RESET;
          //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 Start
          LastSalesPrice.ASCENDING;
          //SQLPerform
          //LastSalesPrice.SETCURRENTKEY("Sell-to Customer No.","Item No.","Document Date");
          LastSalesPrice.SETCURRENTKEY("Sell-to Customer No.","Item No.","Unit of Measure Code","Document Type");
          //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 Start
          LastSalesPrice.SETRANGE("Document Type",LastSalesPrice."Document Type"::"Posted Sales Invoice");
          LastSalesPrice.SETRANGE("Sell-to Customer No.",InCustFilter);
          LastSalesPrice.SETRANGE("Item No.","Item No.");
          LastSalesPrice.SETRANGE("Unit of Measure Code","Base Unit of Measure");
          IF LastSalesPrice.FINDLAST THEN BEGIN
            "Last Invoice Price" := LastSalesPrice."Last Unit Price";
            "Last Invoiced Qty." := LastSalesPrice."Last Price Qty.";
          END ELSE BEGIN
            "Last Invoice Price" := 0;
            "Last Invoiced Qty." := 0;
          END;

          //Find Last Unit Price and related fields
          LastSalesPrice.RESET;
          //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 Start
          LastSalesPrice.ASCENDING;
          LastSalesPrice.SETCURRENTKEY("Sell-to Customer No.","Item No.","Document Date");
          //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 Start
          LastSalesPrice.SETRANGE("Sell-to Customer No.",InCustFilter);
          LastSalesPrice.SETRANGE("Item No.","Item No.");
          IF LastSalesPrice.FINDLAST THEN BEGIN
            "Last Unit Price" := LastSalesPrice."Last Unit Price";
            "Last Price UOM" := LastSalesPrice."Last Price UOM";
            "Last Price Qty." := LastSalesPrice."Last Price Qty.";
            "Last Price Date" := LastSalesPrice."Last Price Date";
            "Last Price User ID" := LastSalesPrice."Last Price User ID";  //TOP010E KT ABCSI 07282015
          END ELSE BEGIN
            "Last Unit Price" := 0;
            "Last Price UOM" := '';
            "Last Price Qty." := 0;
            "Last Price Date" := 0D;
            "Last Price User ID" := ''; //TOP010E KT ABCSI 07282015
          END;
        END
      ELSE
        BEGIN
        IF Item.GET("Item No.") THEN
          BEGIN
            Description := Item.Description;
            "Unit Cost" := Item."Unit Cost";
            ItemUnitPrice := Item."Unit Price";
            "Unit Price" := 0;
            "Order Date" := TODAY;
            "Current UOM" := Item."Sales Unit of Measure";
            //"ABC Code" := Item."ABC Code"; //Utkarsh
            QtyPerUOM := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Current UOM");
            Item.SETRANGE("Location Filter");
            Item.CALCFIELDS(Inventory,"Qty. on Sales Order","Qty. on Purch. Order");
            "Total Qty. on Hand" := Item.Inventory / QtyPerUOM;
            Item.SETRANGE("Location Filter",InLocFilter);
            Item.CALCFIELDS(Inventory,"Qty. on Sales Order","Qty. on Purch. Order");

            //<TPZ1675>
            "Quantity Available on Location" := (Item.Inventory - Item."Qty. on Sales Order") / QtyPerUOM;
           // "Quantity Available on Location" := ItemMgt.CalcQtyAvailable(Item) / QtyPerUOM;
            //</TPZ1675>

            "Qty. on Hand" := Item.Inventory / QtyPerUOM;
            "Qty. on Purch. Order" := Item."Qty. on Purch. Order" / QtyPerUOM;
            "Qty. on Sales Order" := Item."Qty. on Sales Order" / QtyPerUOM;
            ItemLead := Item."Lead Time Calculation";
            "MSRP Price" := Item."MSRP Price";//TPZ3090

            IF (CompanyInformation."Location Code" <> '') AND (Item3.GET("Item No.")) THEN BEGIN
              Item3.SETFILTER("Location Filter",CompanyInformation."Location Code");
              Item3.CALCFIELDS(Inventory,"Qty. on Sales Order");
              //<TPZ1675>
              "Main Loc. Qty. Avail" := (Item3.Inventory - Item3."Qty. on Sales Order") / QtyPerUOM;
              //"Main Loc. Qty. Avail" := ItemMgt.CalcQtyAvailable(Item3) / QtyPerUOM;
              //</TPZ1675>
            END ELSE CLEAR("Main Loc. Qty. Avail");
            "Current Qty." := 0;
            BaseUOM := Item."Base Unit of Measure";
            IF (Item.Type<>Item.Type::Service) THEN //<TPZ2482>
             "Location Code" := InLocFilter;
            //"Shortcut Dimension 5 Code" := CurrDivisionCodeFilter;
            CALCFIELDS("Cust. Qty. on SO", "Qty. on Sales Order");
            "Sell-to Customer No." := InCustFilter;
            "Vendor Item No." := Item."Vendor Item No.";

            //TOP230 KT ABCSI CRP 2 Fixes 05282015
            "Low Unit Price" := Item."Low Unit Price";
            "High Unit Price" := Item."High Unit Price";
            "Medium Unit Price" := Item."Medium Unit Price";
            //TOP230 KT ABCSI CRP 2 Fixes 05282015

                InsertScaleddate ;//<TPZ3163>

            SalesPrice.RESET;
            SalesPrice.SETRANGE("Item No.","Item No.");
            SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::Customer);
            SalesPrice.SETRANGE("Sales Code",InCustFilter);
            IF SalesPrice.FINDLAST THEN BEGIN
              "Last Price Change Date" := SalesPrice."Starting Date";
              //"Low Unit Price" := SalesPrice."Low Unit Price";
              //"High Unit Price" := SalesPrice."High Unit Price";
              //"Medium Unit Price" := SalesPrice."Medium Unit Price";
              "Curr. Unit Price Starting Date" := SalesPrice."Starting Date";
              "Curr. Unit Price Ending Date" := SalesPrice."Ending Date";
            END;


            //Find Last Lost Opportunity
            LastLostOpportunity.RESET;
            //SQLPerform
            LastLostOpportunity.SETCURRENTKEY("Sell-to Customer No.",Type,"No.");
            LastLostOpportunity.SETRANGE(Type, LastLostOpportunity.Type::Item);

            LastLostOpportunity.SETRANGE("Document Type",LastLostOpportunity."Document Type"::"3");
            LastLostOpportunity.SETRANGE("No.","Item No.");
            LastLostOpportunity.SETRANGE("Sell-to Customer No.",InCustFilter);
            IF LastLostOpportunity.FINDLAST THEN BEGIN
              "Last Lost Opportunity" := TRUE;
              "Last Reason Code" := LastLostOpportunity."Reason Code";
              "Last Reason Code Comment" := LastLostOpportunity."Reason Code Comment";
            END;

            //Find Last Quoted Unit Price and related fields
            LastSalesPrice.RESET;
            //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 Start
            LastSalesPrice.ASCENDING;
            //SQLPerform
            //LastSalesPrice.SETCURRENTKEY("Sell-to Customer No.","Item No.","Document Date");
            LastSalesPrice.SETCURRENTKEY("Sell-to Customer No.","Item No.","Unit of Measure Code","Document Type");
            //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 Start
            LastSalesPrice.SETRANGE("Document Type",LastSalesPrice."Document Type"::Quote);
            LastSalesPrice.SETRANGE("Sell-to Customer No.",InCustFilter);
            LastSalesPrice.SETRANGE("Item No.","Item No.");
            LastSalesPrice.SETRANGE("Unit of Measure Code","Base Unit of Measure");
            IF LastSalesPrice.FINDLAST THEN BEGIN
              "Last Quoted Unit Price" := LastSalesPrice."Last Unit Price";
              "Last Quoted UOM" := LastSalesPrice."Last Price UOM";
              "Last Quoted Qty." := LastSalesPrice."Last Price Qty.";
            END ELSE BEGIN
              "Last Quoted Unit Price" := 0;
              "Last Quoted UOM" := '';
              "Last Quoted Qty." := 0;
            END;

            //Find Last Invoiced Unit Price and related fields
            LastSalesPrice.RESET;
            //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 Start
            LastSalesPrice.ASCENDING;
            //SQLPerform
            //LastSalesPrice.SETCURRENTKEY("Sell-to Customer No.","Item No.","Document Date");
            LastSalesPrice.SETCURRENTKEY("Sell-to Customer No.","Item No.","Unit of Measure Code","Document Type");
            //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 Start
            LastSalesPrice.SETRANGE("Document Type",LastSalesPrice."Document Type"::"Posted Sales Invoice");
            LastSalesPrice.SETRANGE("Sell-to Customer No.",InCustFilter);
            LastSalesPrice.SETRANGE("Item No.","Item No.");
            LastSalesPrice.SETRANGE("Unit of Measure Code","Base Unit of Measure");
            IF LastSalesPrice.FINDLAST THEN BEGIN
              "Last Invoice Price" := LastSalesPrice."Last Unit Price";
              "Last Invoiced Qty." := LastSalesPrice."Last Price Qty.";
            END ELSE BEGIN
              "Last Invoice Price" := 0;
              "Last Invoiced Qty." := 0;
            END;
             StyleTxtNew :='Standard';
            LastSalesPrice.RESET;
            //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 Start
            LastSalesPrice.ASCENDING;
            LastSalesPrice.SETCURRENTKEY("Sell-to Customer No.","Item No.","Document Date");
            LastSalesPrice.SETRANGE("Document Type",LastSalesPrice."Document Type"::"Stock Status");//<TPZ3253>
            //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 Start
            LastSalesPrice.SETRANGE("Sell-to Customer No.",InCustFilter);
            LastSalesPrice.SETRANGE("Item No.","Item No.");
            LastSalesPrice.SETRANGE("Special Price",FALSE);//TPZ2970
            IF LastSalesPrice.FINDLAST THEN BEGIN
              "Last Unit Price" := LastSalesPrice."Last Unit Price";
              //TOP010D KT ABCSI SSQQ Unit Price 07142015
              StyleTxtNew :='';
              IF LastSalesPrice."Price Increase" THEN BEGIN
                "Post Increase Unit Price":=LastSalesPrice."Last Unit Price"; //EB
                "Pre Increase Unit Price":=LastSalesPrice."Pre Increase Unit Price";//EB
                StyleTxtNew := 'Attention'
              END ELSE
                StyleTxtNew :='Standard';
              //<TPZ2651>
              IF LastSalesPrice.Scaled THEN
                StyleTxtNew := 'Attention';
              //</TPZ2651>
              IF ("Shortcut Dimension 5 Code" = 'I') OR ("Shortcut Dimension 5 Code" = 'L') THEN


               "Unit Price" := LastSalesPrice."Last Unit Price";
              // "Last Unit Price" := LastSalesPrice."Last Unit Price";//utk
              //TOP010D KT ABCSI SSQQ Unit Price 07142015
              "Last Price UOM" := LastSalesPrice."Last Price UOM";
              "Last Price Qty." := LastSalesPrice."Last Price Qty.";
              "Last Price Date" := LastSalesPrice."Last Price Date";
              "Last Price User ID" := LastSalesPrice."Last Price User ID";  //TOP010E KT ABCSI 07282015
            END ELSE BEGIN
              "Last Unit Price" := 0;
              "Last Price UOM" := '';
              "Last Price Qty." := 0;
              "Last Price Date" := 0D;
              "Last Price User ID" := '';  //TOP010E KT ABCSI 07282015
            END;

            //TOP010D KT ABCSI SSQQ Unit Price 07142015
            IF "Shortcut Dimension 5 Code" = 'E' THEN
              "Unit Price" := "Recomm. Unit Price";
            //TOP010D KT ABCSI SSQQ Unit Price 07142015
          END;
        END;
      "Average Unit Cost" := GetAvgCostPerUnit("Item No.","Unit Cost");//TPZ2881
      //-->TPZ3189
      IF Item."Replacement Cost" <> 0 THEN BEGIN
        "Replacement Cost" := Item."Replacement Cost";
        StyleRep := '';  //TPZ3247
      END ELSE BEGIN
        "Replacement Cost" := "Average Unit Cost";
        StyleRep := 'StrongAccent'; //TPZ3247
      END;
      IF ("Replacement Cost" <> 0) AND ("Unit Price" <> 0) THEN
        "Replacement Margin" := ROUND((( "Unit Price") - ("Replacement Cost")) * 100 / ("Unit Price"),0.1);
      //<--TPZ3189
    END;

    PROCEDURE UpdateSingleLine@1000000009(LineLocation@1000000000 : Code[10]);
    BEGIN

      IF (StockStatusQuickQuote.GET("Item No.")) THEN
        BEGIN
          "Current Qty." := StockStatusQuickQuote."Current Qty.";
          "Current UOM" := StockStatusQuickQuote."Current UOM";
          "Unit Price" := StockStatusQuickQuote."Unit Price";
          "Reason Code" := StockStatusQuickQuote."Reason Code";
          "Reason Code Comment" := StockStatusQuickQuote."Reason Code Comment";
          "Lost Opportunity Description" := StockStatusQuickQuote."Lost Opportunity Description";  //TOP230 KT ABCSI CRP 2 Fixes 06092015
          "Lost Opportunity" := StockStatusQuickQuote."Lost Opportunity";
          "Location Code" := LineLocation;
          "Order Date" := TODAY;
          //TOP230 KT ABCSI CRP 2 Fixes 05282015
          "Recomm. Unit Price" := StockStatusQuickQuote."Recomm. Unit Price";
          "Recomm. Multiplier" := StockStatusQuickQuote."Recomm. Multiplier";
          //TOP230 KT ABCSI CRP 2 Fixes 05282015
          //"Shortcut Dimension 5 Code" := CurrDivisionCodeFilter;
          "Sell-to Customer No." := InCustFilter;
          IF Item.GET("Item No.") THEN
            BEGIN
              Description := Item.Description;
              "Unit Cost" := Item."Unit Cost";
              ItemUnitPrice := Item."Unit Price";
              //"ABC Code" := Item."ABC Code"; //UTKARSH
              QtyPerUOM := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Current UOM");
              Item.SETRANGE("Location Filter");
              Item.CALCFIELDS(Inventory,"Qty. on Sales Order","Qty. on Purch. Order");
              "Total Qty. on Hand" := Item.Inventory / QtyPerUOM;
              Item.SETFILTER("Location Filter","Location Code");
              Item.CALCFIELDS(Inventory,"Qty. on Sales Order","Qty. on Purch. Order");

              //<TPZ1675>
              "Quantity Available on Location" := (Item.Inventory - Item."Qty. on Sales Order") / QtyPerUOM;
              //"Quantity Available on Location" := ItemMgt.CalcQtyAvailable(Item) / QtyPerUOM;
              //<//TPZ1675>


              "Qty. on Hand" := Item.Inventory / QtyPerUOM;
              "Qty. on Purch. Order" := Item."Qty. on Purch. Order" / QtyPerUOM;
              "Qty. on Sales Order" := Item."Qty. on Sales Order" / QtyPerUOM;

              IF (CompanyInformation."Location Code" <> '') AND (Item3.GET("Item No.")) THEN BEGIN
                Item3.SETFILTER("Location Filter",CompanyInformation."Location Code");
                Item3.CALCFIELDS(Inventory,"Qty. on Sales Order");
                //<TPZ1675>
                "Main Loc. Qty. Avail" := (Item3.Inventory - Item3."Qty. on Sales Order") / QtyPerUOM;
               // "Main Loc. Qty. Avail" := ItemMgt.CalcQtyAvailable(Item3) / QtyPerUOM;
                //<//TPZ1675>
              END ELSE CLEAR("Main Loc. Qty. Avail");
              //TOP230 KT ABCSI CRP 2 Fixes 05282015
              "Low Unit Price" := Item."Low Unit Price";
              "High Unit Price" := Item."High Unit Price";
              "Medium Unit Price" := Item."Medium Unit Price";
              //TOP230 KT ABCSI CRP 2 Fixes 05282015
            END;



            SalesPrice.RESET;
            SalesPrice.SETRANGE("Item No.","Item No.");
            SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::Customer);
            SalesPrice.SETRANGE("Sales Code",InCustFilter);
            IF SalesPrice.FINDLAST THEN BEGIN
              "Last Price Change Date" := SalesPrice."Starting Date";
              //"Low Unit Price" := SalesPrice."Low Unit Price";
              //"High Unit Price" := SalesPrice."High Unit Price";
              //"Medium Unit Price" := SalesPrice."Medium Unit Price";
              "Curr. Unit Price Starting Date" := SalesPrice."Starting Date";
              "Curr. Unit Price Ending Date" := SalesPrice."Ending Date";
            END;


            //Find Last Quoted Unit Price and related fields
            LastSalesPrice.RESET;
            //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 Start
            LastSalesPrice.ASCENDING;
            LastSalesPrice.SETCURRENTKEY("Sell-to Customer No.","Item No.","Document Date");
            //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 End
            LastSalesPrice.SETRANGE("Document Type",LastSalesPrice."Document Type"::Quote);
            LastSalesPrice.SETRANGE("Sell-to Customer No.",InCustFilter);
            LastSalesPrice.SETRANGE("Item No.","Item No.");
            LastSalesPrice.SETRANGE("Unit of Measure Code","Base Unit of Measure");
            IF LastSalesPrice.FINDLAST THEN BEGIN
              "Last Quoted Unit Price" := LastSalesPrice."Last Unit Price";
              "Last Quoted UOM" := LastSalesPrice."Last Price UOM";
              "Last Quoted Qty." := LastSalesPrice."Last Price Qty.";
            END ELSE BEGIN
              "Last Quoted Unit Price" := 0;
              "Last Quoted UOM" := '';
              "Last Quoted Qty." := 0;
            END;

            //Find Last Invoiced Unit Price and related fields
            LastSalesPrice.RESET;
            //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 Start
            LastSalesPrice.ASCENDING;
            LastSalesPrice.SETCURRENTKEY("Sell-to Customer No.","Item No.","Document Date");
            //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 End
            LastSalesPrice.SETRANGE("Document Type",LastSalesPrice."Document Type"::"Posted Sales Invoice");
            LastSalesPrice.SETRANGE("Sell-to Customer No.",InCustFilter);
            LastSalesPrice.SETRANGE("Item No.","Item No.");
            LastSalesPrice.SETRANGE("Unit of Measure Code","Base Unit of Measure");
            IF LastSalesPrice.FINDLAST THEN BEGIN
              "Last Invoice Price" := LastSalesPrice."Last Unit Price";
              "Last Invoiced Qty." := LastSalesPrice."Last Price Qty.";
            END ELSE BEGIN
              "Last Invoice Price" := 0;
              "Last Invoiced Qty." := 0;
            END;

            //Find Last Unit Price and related fields
            LastSalesPrice.RESET;
            //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 Start
            LastSalesPrice.ASCENDING;
            LastSalesPrice.SETCURRENTKEY("Sell-to Customer No.","Item No.","Document Date");
            //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 End
            LastSalesPrice.SETRANGE("Sell-to Customer No.",InCustFilter);
            LastSalesPrice.SETRANGE("Item No.","Item No.");
            IF LastSalesPrice.FINDLAST THEN BEGIN
              "Last Unit Price" := LastSalesPrice."Last Unit Price";
              "Last Price UOM" := LastSalesPrice."Last Price UOM";
              "Last Price Qty." := LastSalesPrice."Last Price Qty.";
              "Last Price Date" := LastSalesPrice."Last Price Date";
              "Last Price User ID" := LastSalesPrice."Last Price User ID";  //TOP010E KT ABCSI 07282015
            END ELSE BEGIN
              "Last Unit Price" := 0;
              "Last Price UOM" := '';
              "Last Price Qty." := 0;
              "Last Price Date" := 0D;
              "Last Price User ID" := '';  //TOP010E KT ABCSI 07282015
            END;
        END
      ELSE
        BEGIN
        IF Item.GET("Item No.") THEN
          BEGIN
            "Unit Cost" := Item."Unit Cost";
            ItemUnitPrice := Item."Unit Price";
            "Unit Price" := 0;
            "Order Date" := TODAY;
            "Current UOM" := Item."Sales Unit of Measure";
            //"ABC Code" := Item."ABC Code"; //UTKARSH
            QtyPerUOM := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Current UOM");
            Item.SETRANGE("Location Filter");
            Item.CALCFIELDS(Inventory,"Qty. on Sales Order","Qty. on Purch. Order");
            "Total Qty. on Hand" := Item.Inventory / QtyPerUOM;
            Item.SETRANGE("Location Filter",LineLocation);
            Item.CALCFIELDS(Inventory,"Qty. on Sales Order","Qty. on Purch. Order");

            //<TPZ1675>
            "Quantity Available on Location" := (Item.Inventory - Item."Qty. on Sales Order") / QtyPerUOM;
            //"Quantity Available on Location" := ItemMgt.CalcQtyAvailable(Item) / QtyPerUOM;
            //</TPZ1675>

            "Qty. on Hand" := Item.Inventory / QtyPerUOM;
            "Qty. on Purch. Order" := Item."Qty. on Purch. Order" / QtyPerUOM;
            "Qty. on Sales Order" := Item."Qty. on Sales Order" / QtyPerUOM;
            ItemLead := Item."Lead Time Calculation";
            IF (CompanyInformation."Location Code" <> '') AND (Item3.GET("Item No.")) THEN BEGIN
              Item3.SETFILTER("Location Filter",CompanyInformation."Location Code");
              Item3.CALCFIELDS(Inventory,"Qty. on Sales Order");
              //<TPZ1675>
              "Main Loc. Qty. Avail" := (Item3.Inventory - Item3."Qty. on Sales Order") / QtyPerUOM;
              //"Main Loc. Qty. Avail" := ItemMgt.CalcQtyAvailable(Item3) / QtyPerUOM;
              //</TPZ1675>
            END ELSE CLEAR("Main Loc. Qty. Avail");
            "Current Qty." := 0;
            BaseUOM := Item."Base Unit of Measure";
            "Location Code" := LineLocation;
            //"Shortcut Dimension 5 Code" := CurrDivisionCodeFilter;
            "Sell-to Customer No." := InCustFilter;
            "Vendor Item No." := Item."Vendor Item No.";

            //TOP230 KT ABCSI CRP 2 Fixes 05282015
            "Low Unit Price" := Item."Low Unit Price";
            "High Unit Price" := Item."High Unit Price";
            "Medium Unit Price" := Item."Medium Unit Price";
            //TOP230 KT ABCSI CRP 2 Fixes 05282015

            SalesPrice.RESET;
            SalesPrice.SETRANGE("Item No.","Item No.");
            SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::Customer);
            SalesPrice.SETRANGE("Sales Code",InCustFilter);
            IF SalesPrice.FINDLAST THEN BEGIN
              "Last Price Change Date" := SalesPrice."Starting Date";
              //"Low Unit Price" := SalesPrice."Low Unit Price";
              //"High Unit Price" := SalesPrice."High Unit Price";
              //"Medium Unit Price" := SalesPrice."Medium Unit Price";
              "Curr. Unit Price Starting Date" := SalesPrice."Starting Date";
              "Curr. Unit Price Ending Date" := SalesPrice."Ending Date";
            END;


            //Find Last Quoted Unit Price and related fields
            LastSalesPrice.RESET;
            //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 Start
            LastSalesPrice.ASCENDING;
            LastSalesPrice.SETCURRENTKEY("Sell-to Customer No.","Item No.","Document Date");
            //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 End
            LastSalesPrice.SETRANGE("Document Type",LastSalesPrice."Document Type"::Quote);
            LastSalesPrice.SETRANGE("Sell-to Customer No.",InCustFilter);
            LastSalesPrice.SETRANGE("Item No.","Item No.");
            LastSalesPrice.SETRANGE("Unit of Measure Code","Current UOM");
            IF LastSalesPrice.FINDLAST THEN BEGIN
              "Last Quoted Unit Price" := LastSalesPrice."Last Unit Price";
              "Last Quoted UOM" := LastSalesPrice."Last Price UOM";
              "Last Quoted Qty." := LastSalesPrice."Last Price Qty.";
            END ELSE BEGIN
              "Last Quoted Unit Price" := 0;
              "Last Quoted UOM" := '';
              "Last Quoted Qty." := 0;
            END;

            //Find Last Invoiced Unit Price and related fields
            LastSalesPrice.RESET;
            //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 Start
            LastSalesPrice.ASCENDING;
            LastSalesPrice.SETCURRENTKEY("Sell-to Customer No.","Item No.","Document Date");
            //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 End
            LastSalesPrice.SETRANGE("Document Type",LastSalesPrice."Document Type"::"Posted Sales Invoice");
            LastSalesPrice.SETRANGE("Sell-to Customer No.",InCustFilter);
            LastSalesPrice.SETRANGE("Item No.","Item No.");
            LastSalesPrice.SETRANGE("Unit of Measure Code","Current UOM");
            IF LastSalesPrice.FINDLAST THEN BEGIN
              "Last Invoice Price" := LastSalesPrice."Last Unit Price";
              "Last Invoiced Qty." := LastSalesPrice."Last Price Qty.";
            END ELSE BEGIN
              "Last Invoice Price" := 0;
              "Last Invoiced Qty." := 0;
            END;

            //Find Last Unit Price and related fields
            LastSalesPrice.RESET;
            //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 Start
            LastSalesPrice.ASCENDING;
            LastSalesPrice.SETCURRENTKEY("Sell-to Customer No.","Item No.","Document Date");
            //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 End
            LastSalesPrice.SETRANGE("Sell-to Customer No.",InCustFilter);
            LastSalesPrice.SETRANGE("Item No.","Item No.");
            IF LastSalesPrice.FINDLAST THEN BEGIN
              "Last Unit Price" := LastSalesPrice."Last Unit Price";
              "Last Price UOM" := LastSalesPrice."Last Price UOM";
              "Last Price Qty." := LastSalesPrice."Last Price Qty.";
              "Last Price Date" := LastSalesPrice."Last Price Date";
              "Last Price User ID" := LastSalesPrice."Last Price User ID";  //TOP010E KT ABCSI 07282015
            END ELSE BEGIN
              "Last Unit Price" := 0;
              "Last Price UOM" := '';
              "Last Price Qty." := 0;
              "Last Price Date" := 0D;
              "Last Price User ID" := '';  //TOP010E KT ABCSI 07282015
            END;
          END;
        END;
      "Average Unit Cost" := GetAvgCostPerUnit("Item No.","Unit Cost"); //TPZ2881
    END;

    PROCEDURE CheckLostOpportunity@1000000016();
    VAR
      "LostQuoteNo."@1000000000 : Code[10];
    BEGIN
      QuickQuoteWorkSheet.RESET;
      QuickQuoteWorkSheet.SETCURRENTKEY("Location Code",Description,"Item No.","Sell-To Customer No.");
      QuickQuoteWorkSheet.SETFILTER("Current Qty.",'<>%1',0);
      QuickQuoteWorkSheet.SETFILTER("Lost Opportunity",'%1',TRUE);
      IF QuickQuoteWorkSheet.FIND('-') THEN REPEAT
        UpDateLostOpportunity(DocType::"Stock Status","LostQuoteNo.",QuickQuoteWorkSheet."Line No."*10000,QuickQuoteWorkSheet,QuickQuoteWorkSheet."Location Code");
      UNTIL QuickQuoteWorkSheet.NEXT = 0;
    END;

    PROCEDURE CalcTotal@1000000010(VAR MultiOrder@1000000000 : Boolean) OrderTotal : Decimal;
    VAR
      OLocation@1000000001 : Code[10];
    BEGIN
      CLEAR(OLocation);
      QuickQuoteWorkSheet.RESET;
      QuickQuoteWorkSheet.SETCURRENTKEY("Location Code",Description,"Item No.","Sell-To Customer No.");
      QuickQuoteWorkSheet.SETFILTER("Current Qty.",'<>%1',0);
      QuickQuoteWorkSheet.SETRANGE("Sell-To Customer No.",InCustFilter);
      IF QuickQuoteWorkSheet.FIND('-') THEN REPEAT
        IF OLocation = '' THEN OLocation := QuickQuoteWorkSheet."Location Code"
        ELSE IF QuickQuoteWorkSheet."Location Code" <> OLocation THEN MultiOrder := TRUE;
        OLocation := QuickQuoteWorkSheet."Location Code";
        OrderTotal += QuickQuoteWorkSheet."Current Qty (Base)" * QuickQuoteWorkSheet."Unit Price";
      UNTIL QuickQuoteWorkSheet.NEXT = 0;
    END;

    PROCEDURE VerifySalesLine@1000000017() HasLine : Boolean;
    BEGIN
      StockStatusQuickQuote.SETFILTER("Lost Opportunity",'%1',FALSE);
      HasLine := (StockStatusQuickQuote.COUNT <> 0);
    END;

    PROCEDURE FetchRecommFieldValues@1000000006(ItemNo@1000000001 : Code[20];CustNo@1000000000 : Code[20]);
    VAR
      LocalItem@1000000002 : Record 27;
      SalesSetup@1000000003 : Record 311;
      NoSeriesMgt@1000000004 : Codeunit 396;
      TSalesHeader@1000000005 : Record 36;
      TSalesLine@1000000006 : Record 37;
    BEGIN
      IF ItemNo = '' THEN
        EXIT;

      IF CustNo = '' THEN
        EXIT;

      IF "Shortcut Dimension 5 Code" = 'E' THEN BEGIN //TOP010D KT ABCSI SSQQ Unit Price 07142015
      //TOP230 KT ABCSI CRP 2 Fixes 05012015
      LocalItem.GET(ItemNo);
      SalesSetup.GET;
      SalesSetup.TESTFIELD("Temp Order Nos.");
      //TOP230 KT ABCSI CRP 2 Fixes 05012015
        TSalesHeader."Document Type" := TSalesHeader."Document Type"::Order;
        TSalesHeader.VALIDATE("No.",NoSeriesMgt.GetNextNo(SalesSetup."Temp Order Nos.",WORKDATE,TRUE));//TOP230 KT ABCSI CRP 2 Fixes 05012015
        TSalesHeader.INSERT(TRUE);
        TSalesHeader.SetHideValidationDialog(TRUE);
        TSalesHeader.VALIDATE("Sell-to Customer No.",CustNo);
          TSalesHeader.VALIDATE("Shortcut Dimension 5 Code",CurrDivisionCodeFilter); //TOP10B KT ABCSI - SSQQ Division Code 07142015
        IF TSalesHeader."Shortcut Dimension 5 Code" = '' THEN
          TSalesHeader.VALIDATE("Shortcut Dimension 5 Code",LocalItem."Shortcut Dimension 5 Code");
        TSalesHeader."Location Code" := "Location Code";
        TSalesHeader.VALIDATE("Order Date",TODAY);
        TSalesHeader.MODIFY(TRUE);
      //END;

        TSalesLine.RESET;
        TSalesLine.SETCURRENTKEY("Document Type","Document No.");
        TSalesLine.SETRANGE(TSalesLine."Document Type",TSalesHeader."Document Type");
        TSalesLine.SETRANGE(TSalesLine."Document No.",TSalesHeader."No.");
        IF TSalesLine.FIND('+') THEN
          SalesLineNo := TSalesLine."Line No." + 10000
        ELSE
          SalesLineNo := 10000;

        TSalesLine.INIT;
        TSalesLine."Document Type" := TSalesLine."Document Type"::Order;
        TSalesLine."Document No." := TSalesHeader."No.";
        TSalesLine."Line No." := SalesLineNo;
        TSalesLine.VALIDATE("Sell-to Customer No.",CustNo);
        TSalesLine.Type := TSalesLine.Type::Item;
        TSalesLine.VALIDATE("No.",ItemNo);
        TSalesLine.VALIDATE("Location Code","Location Code");
        TSalesLine.Quantity := 1;
        TSalesLine.INSERT(TRUE);

      "Recomm. Multiplier" := TSalesLine."Recomm. Multiplier";
      "Recomm. Unit Price" := TSalesLine."Recomm. Unit Price";
        "Unit Price" := TSalesLine."Recomm. Unit Price";

      TSalesHeader.DELETE(TRUE);
      //TOP010D KT ABCSI SSQQ Unit Price 07142015
      END ELSE BEGIN
        LastSalesPrice.RESET;
        LastSalesPrice.ASCENDING;
        LastSalesPrice.SETCURRENTKEY("Sell-to Customer No.","Item No.","Document Date");
        LastSalesPrice.SETRANGE("Sell-to Customer No.",InCustFilter);
        LastSalesPrice.SETRANGE("Item No.","Item No.");
        LastSalesPrice.SETRANGE("Special Price",FALSE);//TPZ2970
        //<TPZ2729>
        LastSalesPrice.SETFILTER("Document Type",'<>%1&<>%2',LastSalesPrice."Document Type"::"Return Order",LastSalesPrice."Document Type"::"Credit Memo");
        //</TPZ2729>
        IF LastSalesPrice.FINDLAST THEN BEGIN
          "Last Unit Price" := LastSalesPrice."Last Unit Price";
          "Last Price UOM" := LastSalesPrice."Last Price UOM";
          "Last Price Qty." := LastSalesPrice."Last Price Qty.";
          "Last Price Date" := LastSalesPrice."Last Price Date";
          "Last Price User ID" := LastSalesPrice."Last Price User ID";  //TOP010E KT ABCSI 07282015
        END ELSE BEGIN
          "Last Unit Price" := 0;
          "Last Price UOM" := '';
          "Last Price Qty." := 0;
          "Last Price Date" := 0D;
          "Last Price User ID" := '';  //TOP010E KT ABCSI 07282015
        END;
        "Unit Price" := "Last Unit Price";
      END;
      //TOP010D KT ABCSI SSQQ Unit Price 07142015
    END;

    PROCEDURE GetItemNo@1000000208() : Code[20];
    BEGIN
      // <TPZ820>
      EXIT("Item No.");
      // </TPZ820>
    END;

    PROCEDURE FilterByItemDescription@1000000013(ItemDescriptionFilter@1000000000 : Text[50]);
    BEGIN
      // <TPZ1055>
      IF ItemDescriptionFilter <> '' THEN BEGIN
        SETFILTER(Description,'*' + ItemDescriptionFilter +'*');
        IF FIND('-') THEN;
        CurrPage.UPDATE(FALSE);
        CurrPage.ACTIVATE(TRUE);
      END ELSE BEGIN
        SETRANGE(Description);
        IF FIND('-') THEN;
        CurrPage.UPDATE(FALSE);
        CurrPage.ACTIVATE(TRUE);
      END;
      // </TPZ1055>
    END;

    PROCEDURE FilterByItemDescription2@1000000014(ItemDescription2Filter@1000000000 : Text[50]);
    BEGIN
      // <TPZ1055>
      IF ItemDescription2Filter <> '' THEN BEGIN
        SETFILTER("Description 2",'*' + ItemDescription2Filter +'*');
        IF FIND('-') THEN;
        CurrPage.UPDATE(FALSE);
        CurrPage.ACTIVATE(TRUE);
      END ELSE BEGIN
        SETRANGE("Description 2");
        IF FIND('-') THEN;
        CurrPage.UPDATE(FALSE);
        CurrPage.ACTIVATE(TRUE);
      END;
      // </TPZ1055>
    END;

    LOCAL PROCEDURE UpdateUnitPrice@1000000018();
    BEGIN
      Newunitprice := (("Unit Price"*5)/100)+"Unit Price";
      VALIDATE("Unit Price",Newunitprice); //Ajay
      MESSAGE('%1',"Unit Price");
      MODIFY(TRUE);
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE SetStyleABC@1000000019();
    VAR
      ItemABC@1000000000 : Record 27;
    BEGIN
      //<TPZ2788>
      StyleTxtABC := '';
      ItemABC.RESET;
      IF ItemABC.GET("Item No.") THEN BEGIN
        CASE ItemABC."ABC Code" OF
          'LS' : StyleTxtABC := 'favorable';
          'N' : StyleTxtABC := 'Standard';
          'A' : StyleTxtABC := 'Standard';
          'B' : StyleTxtABC := 'Standard';
          'C' : StyleTxtABC := 'Standard';
          'MD' : StyleTxtABC := 'Standard';
          'SO' : StyleTxtABC := 'Standard';
          'CL' : StyleTxtABC := 'Attention';
          'DI' : StyleTxtABC := 'Ambiguous';
          'OB' : StyleTxtABC := 'Strongaccent';
        END;
      END;
      //</TPZ2788>
    END;

    PROCEDURE GetAvgCostPerUnit@1000000065(ItemNoPara@1000000000 : Code[20];UnitCost@1000000002 : Decimal) : Decimal;
    VAR
      ItemLedgerEntry@1000000003 : Record 32;
      TotalCostPerUnit@1000000004 : Decimal;
      ItemLoc@1000000007 : Record 27;
      TotalRemainingQty@1000000008 : Decimal;
      NoOfEntry@1000000005 : Integer;
      AvgCostPerUnit@1000000001 : Decimal;
    BEGIN
      ////TPZ2881 PSHUKLA new functionality for Avg Unit cost per location
      TotalCostPerUnit := 0;
      TotalRemainingQty := 0;
      NoOfEntry := 0;
      AvgCostPerUnit := 0;
      IF ItemLoc.GET(ItemNoPara) THEN BEGIN
        ItemLedgerEntry.RESET;
        ItemLedgerEntry.SETCURRENTKEY("Item No.",Open,"Variant Code",Positive,"Location Code","Posting Date");
        ItemLedgerEntry.SETRANGE("Item No.",ItemNoPara);
        ItemLedgerEntry.SETRANGE(Open,TRUE);
        ItemLedgerEntry.SETFILTER("Location Code",'<>%1&<>%2','ONWATER','OWTRANSIT');
        IF ItemLedgerEntry.FINDFIRST THEN
          REPEAT
            ItemLedgerEntry.CALCFIELDS("Cost per Unit","Cost Amount (Actual)","Cost Amount (Expected)");
            //TotalCostPerUnit += (ItemLedgerEntry."Cost per Unit" * ItemLedgerEntry."Remaining Quantity");
            //TotalCostPerUnit += ItemLedgerEntry."Cost per Unit"; //Avg of cos per unit
            IF ItemLedgerEntry.Quantity > 0 THEN
              TotalCostPerUnit += (((ItemLedgerEntry."Cost Amount (Actual)" + ItemLedgerEntry."Cost Amount (Expected)")
                                  /ItemLedgerEntry.Quantity) * ItemLedgerEntry."Remaining Quantity")
            ELSE
              TotalCostPerUnit += ((ItemLedgerEntry."Cost Amount (Actual)" + ItemLedgerEntry."Cost Amount (Expected)")
                                   * ItemLedgerEntry."Remaining Quantity");
            TotalRemainingQty += ItemLedgerEntry."Remaining Quantity";
            //NoOfEntry += 1;
          UNTIL ItemLedgerEntry.NEXT = 0;

        IF TotalRemainingQty = 0 THEN
            TotalRemainingQty := 1;
        AvgCostPerUnit := ROUND(TotalCostPerUnit/TotalRemainingQty,0.0001,'=');
        //IF AvgCostPerUnit = 0 THEN
          //AvgCostPerUnit := ROUND(UnitCost,0.0001,'=');
      END;
      EXIT(AvgCostPerUnit);
    END;

    PROCEDURE InsertScaleddate@1000000021();
    VAR
      CustLoc@1000000001 : Record 18;
      LastSalesPriceScaled@1000000002 : Record 50004;
    BEGIN
      //<TPZ3163>
      LastSalesPriceScaled.RESET;
      LastSalesPriceScaled.ASCENDING;
      LastSalesPriceScaled.SETCURRENTKEY("Sell-to Customer No.","Item No.","Document Date");
      LastSalesPriceScaled.SETRANGE("Sell-to Customer No.",InCustFilter);
      LastSalesPriceScaled.SETRANGE("Item No.",Item."No.");
      LastSalesPriceScaled.SETRANGE(Scaled,TRUE);
        IF LastSalesPriceScaled.FINDLAST THEN
          "Scaled Date" := LastSalesPriceScaled."Document Date";
      //</TPZ3163>
    END;

    BEGIN
    {
      TOP010 KT ABCSI Stock Status Quick Quote Screen 12082014
       - Created this page and Functions related to Stock Status Quick Quote

      TOP170 KT ABCSI Sales Order Updates 04022015
        - Added code to the NewOrderQuote function

      TOP130 KT ABCSI Item List Sort and Filter by Status 04172015
        - Added a new field "Blocked Sequence"
        - Added code to filter the records in Refresh() functions
        - Made Blocked field non editable
        - Added code in the NewOrderQuote function to pass the Shortcut Dimension 5 Code to the Sales Quote or Sales Order
        - Checked for Blocked field when entering values into Current Qty. and other required fields

      TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 Start
        - Added code to set the key for Last Unit Price fields

      TOP230 KT ABCSI CRP 2 Fixes 07152015
        - Added a lookup functionality to "Qty. on Purch. Order" field
        - Added code in UpdateLine and UpdateSingleLine functions to update the Low Unit Price, High Unit Price and Medium Unit Price
        - Added a new field "Lost Opportunity Description"
        - Added Go Home Action to move to the first record

      TOP010 KT ABCSI Stock Status Quick Quote 06042015
        - Added an error message in NewOrderQuote function to prevent creating Sales Order/Quote with Curr. Qty. = 0
        - Updated the default Sorting of the page in the SourceTableView property

      TOP010B KT ABCSI SSQQ Division Code 07092015
        - Created a new function UserPrompt for checking the curr. qty field

      TOP10C KT ABCSI - SSQQ Item Search 07082015
        - Added a function FindItemNo

      TOP010D KT ABCSI SSQQ Unit Price 07142015
        - Added code in UpdateLine function to update the Unit Price and Recomm. Unit Price

      TOP10E KT ABCSI - Additional Stock Status 07282015
        - Added a function FindVendItemNo
        - Added a new field 'Last Price User ID' and the code to populate the field

      2015-06-19 TPZ591 VCHERNYA
        Sorting Order field has been added
        Sorting has been changed to Sorting Order field
      2015-06-30 TPZ449 VCHERNYA
        Last Prices and Country/Region Last Prices page actions have been added
        Population of Division Code (Shortcut Dimension 5 Code) and Country/Region Code in Last Sales Price table has been added
      2015-07-01 TPZ835 VCHERNYA
        Comments page action has been added
      2015-07-13 TPZ820 VCHERNYA
        GetItemNo function has been added
      2015-09-25 TPZ1046 VCHERNYA
        BlankZero property set to Yes for Current Qty. column
      2015-10-06 TPZ1055 VCHERNYA
        FilterByItemDescription and FilterByItemDescription2 functions have been added

      TOP010 - Stock Status Quick Quote Screen - KT ABCSI 11052015
        - Added the function CalcQtyOnPick, added code on OnDrillDown trigger of Qty. on Pick Loc. and Qty. Avail. to Pick fields
        - Changed the properties of Qty. On Pick, Qty. Avail. to Pick fields

      2016-03-24 TPZ1519 TAKHMETO
        Page Action Ledger Entries has been added
      2016-04-01 TPZ1014 TAKHMETO
        Validation of Customer No. in Last Sales Price has been added
      2016-07-08 TPZ1545 EBAGIM
        Color Coding based on blocked item attributes
      2016-09-27 TPZ1697 EBAGIM
        Assign location code based on Ship-to Division
      2017-02-17 TPZ1801 EBAGIM
        Filter out blocked items by default

      2018.11.09 BUG2386 RIS  - revamp code to eliminate error failures
      2018-12-27 SQLPerform AKB
        Revised function UpdateLine() to add SETCURRENTKEY statements, and missing filter statements
      2019-05-03 TPZ2531 Uchouhan
        Removed NPI Blocked option and added code for dimension code 'Intro';
      2019-06-28 TPZ2590 UCHOUHAN
        Added Month of Stock feild.
      2019-07-12 TPZ2482 UCHOUHAN
        Changes for OverWrap Sevice Item.
      2019-10-23 TPZ2651 VAHAMAD
        Code added in Function UpdateLine
      2019-11-26 TPZ2718 UCHOUHAN
        Change Blankzero Property to YES for 'Month of Stock' Field.
      2019-12-04 TPZ2729 RTIWARI
        Code added to ignore Return Order/Credit Memo while updating Last Sales Price
      2020-05-13 TPZ2839 UCHOUHAN
        Added "ABC Code" field.
        Added code for filter out 'OB' ABC Code.
      2020-05-13 TPZ2788 UCHOUHAN
        Added code to change color coding according to  ABC Code.
      TPZ2785 05112020 GGUPTA Remove Item blocking Topaz Customization
      TPZ2859 05192020 RSAH
        - Filter Item by attribute on the stock status screen
      001 TPZ2881 PKS 07232020  Added new fields Average Unit Cost and Gross Margin % Avg Cost
      002 TPZ2970 VAH 11252020 Added code in functions : FetchRecommFieldValues,UpdateLastSalesPrice,NewOrderQuote,UpdateLine
          Added Field : Special Price
      003 TPZ3090 VAH 02222020 Added new field "MSRP Price"
      004 TPZ3189 PKS 05252021 Added Replacemnt cost field
      005 UTK TPZ3163 06162021 Added new Field 'Scaled Date' and added code to update Scaled Date field.
      006 UTK TPZ3253 06302021 Added stock status Documrnt type filter to fix unit price.
      007 TPZ3247 PKS 06292021 Added new logic on color coding of replacement cost field to show blue bold if replacement cost is zero on item card
      008 TPZ3223 VAH 07072021 Added new not editable field "Unit Price"
    }
    END.
  }
}

