OBJECT Table 14002414 E.D.I. Inventory Advice Line
{
  OBJECT-PROPERTIES
  {
    Date=02/25/19;
    Time=12:00:00 PM;
    Version List=SE0.61;
  }
  PROPERTIES
  {
    CaptionML=ENU=E.D.I. Inventory Advice Line;
  }
  FIELDS
  {
    { 1   ;   ;Inventory Advice No.;Code10        ;CaptionML=ENU=Inventory Advice No. }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 3   ;   ;Trade Partner No.   ;Code20        ;CaptionML=ENU=Trade Partner No. }
    { 4   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU="  ,Location,Adjustment,Price Catalog";
                                                   OptionString=[  ,Location,Adjustment,Price Catalog] }
    { 11  ;   ;No.                 ;Code20        ;TableRelation=Item.No.;
                                                   OnValidate=BEGIN
                                                                GetInventoryAdviceHdr;
                                                                InventoryAdviceHdr.TESTFIELD(Released,FALSE);

                                                                GetItem("No.");

                                                                Description := Item.Description;
                                                                "Description 2" := Item."Description 2";
                                                                "Unit of Measure Code" := Item."Base Unit of Measure";
                                                                Discontinued := Item.Blocked;

                                                                IF ((InventoryAdviceHdr.Type = InventoryAdviceHdr.Type::"  ") OR
                                                                    (InventoryAdviceHdr.Type = InventoryAdviceHdr.Type::"Price Catalog")) AND
                                                                   (CurrFieldNo <> 0)
                                                                THEN BEGIN
                                                                  TmpQuoteHeader.SetEDITemp(TRUE);
                                                                  TmpQuoteHeader."Document Type" := TmpQuoteHeader."Document Type"::Quote;
                                                                  TmpQuoteHeader."No." := InventoryAdviceHdr."No.";
                                                                  TmpQuoteHeader."Order Date" := WORKDATE;
                                                                  TmpQuoteHeader."Posting Date" := WORKDATE;
                                                                  TmpQuoteHeader."Document Date" := WORKDATE;
                                                                  TmpQuoteHeader.VALIDATE("Sell-to Customer No.",InventoryAdviceHdr."Sell-to Customer No.");
                                                                  IF "Location Code" <> '' THEN
                                                                    TmpQuoteHeader.VALIDATE("Location Code",InventoryAdviceHdr."Location Code");

                                                                  TmpQuoteLine.SetEDITemp(TRUE);
                                                                  TmpQuoteLine."Document Type" := TmpQuoteHeader."Document Type";
                                                                  TmpQuoteLine."Document No." := TmpQuoteHeader."No.";
                                                                  TmpQuoteLine.SetSalesHeader(TmpQuoteHeader);
                                                                  TmpQuoteLine."Sell-to Customer No." := TmpQuoteHeader."Sell-to Customer No.";
                                                                  TmpQuoteLine.VALIDATE(Type,TmpQuoteLine.Type::Item);
                                                                  TmpQuoteLine.VALIDATE("No.","No.");
                                                                  TmpQuoteLine.VALIDATE("Variant Code","Variant Code");
                                                                  IF InventoryAdviceHdr."Location Code" <> '' THEN
                                                                    TmpQuoteLine.VALIDATE("Location Code",TmpQuoteHeader."Location Code");
                                                                  TmpQuoteLine.VALIDATE("Unit of Measure Code","Unit of Measure Code");
                                                                  TmpQuoteLine.VALIDATE(Quantity,1);
                                                                  TmpQuoteHeader.SetEDITemp(FALSE);
                                                                  TmpQuoteLine.SetEDITemp(FALSE);
                                                                  "Unit Price" := TmpQuoteLine."Line Amount";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 12  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   OnValidate=VAR
                                                                Item@1240020000 : Record 27;
                                                              BEGIN
                                                                IF "Variant Code" = '' THEN
                                                                  EXIT;
                                                                ItemVariant.GET("No.","Variant Code");
                                                                IF ItemVariant.Description = '' THEN BEGIN
                                                                  IF Item.GET("No.") THEN
                                                                    Description := Item.Description;
                                                                END ELSE
                                                                  Description := ItemVariant.Description;
                                                                IF ItemVariant."Description 2" = '' THEN BEGIN
                                                                  IF Item.GET("No.") THEN
                                                                    "Description 2" := Item."Description 2";
                                                                END ELSE
                                                                  "Description 2" := ItemVariant."Description 2";
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 13  ;   ;Quantity Available for Sale;Decimal;CaptionML=ENU=Quantity Available for Sale;
                                                   DecimalPlaces=0:5 }
    { 14  ;   ;Expected Receipt Quantity;Decimal  ;CaptionML=ENU=Expected Receipt Quantity;
                                                   DecimalPlaces=0:5 }
    { 15  ;   ;Cross-Reference No. ;Code20        ;OnValidate=BEGIN
                                                                GetInventoryAdviceHdr;
                                                                ReturnedCrossRef.INIT;
                                                                IF "Cross-Reference No." <> '' THEN BEGIN
                                                                  ICRLookupItem("Cross-Reference No.",ReturnedCrossRef);
                                                                  VALIDATE("No.",ReturnedCrossRef."Item No.");
                                                                  IF ReturnedCrossRef."Variant Code" <> '' THEN
                                                                    VALIDATE("Variant Code",ReturnedCrossRef."Variant Code");

                                                                  IF ReturnedCrossRef."Unit of Measure" <> '' THEN
                                                                    VALIDATE("Unit of Measure Code",ReturnedCrossRef."Unit of Measure");
                                                                END;

                                                                "Unit of Measure (Cross Ref.)":= ReturnedCrossRef."Unit of Measure";
                                                                "Cross-Reference Type" := ReturnedCrossRef."Cross-Reference Type";
                                                                "Cross-Reference Type No." := ReturnedCrossRef."Cross-Reference Type No.";
                                                                "Cross-Reference No." := ReturnedCrossRef."Cross-Reference No.";
                                                                Discontinued := ReturnedCrossRef."Discontinue Bar Code";
                                                                IF ReturnedCrossRef.Description <> '' THEN
                                                                  Description := ReturnedCrossRef.Description;
                                                              END;

                                                   OnLookup=BEGIN
                                                              GetInventoryAdviceHdr;
                                                              ItemCrossReference.RESET;
                                                              ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
                                                              ItemCrossReference.SETFILTER(
                                                                "Cross-Reference Type",'%1|%2',
                                                                ItemCrossReference."Cross-Reference Type"::Customer,
                                                                ItemCrossReference."Cross-Reference Type"::" ");
                                                              ItemCrossReference.SETFILTER(
                                                                "Cross-Reference Type No.",'%1|%2',InventoryAdviceHdr."Sell-to Customer No.",'');
                                                              IF PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) = ACTION::LookupOK THEN
                                                                VALIDATE("Cross-Reference No.",ItemCrossReference."Cross-Reference No.");
                                                            END;

                                                   CaptionML=ENU=Cross-Reference No. }
    { 16  ;   ;Discontinued        ;Boolean       ;CaptionML=ENU=Discontinued }
    { 19  ;   ;Expected Availability Date;Date    ;CaptionML=ENU=Expected Availability Date }
    { 20  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=ENU=Unit of Measure Code }
    { 21  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 22  ;   ;Cross-Reference Type;Option        ;CaptionML=ENU=Cross-Reference Type;
                                                   OptionCaptionML=ENU=" ,Customer,Vendor,Bar Code";
                                                   OptionString=[ ,Customer,Vendor,Bar Code] }
    { 23  ;   ;Cross-Reference Type No.;Code30    ;CaptionML=ENU=Cross-Reference Type No. }
    { 24  ;   ;Unit of Measure (Cross Ref.);Code10;CaptionML=ENU=Unit of Measure (Cross Ref.) }
    { 25  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 26  ;   ;Lot No.             ;Code20        ;OnValidate=BEGIN
                                                                IF (("Lot No." <> '') AND (CurrFieldNo <> 0)) OR (CurrFieldNo = 0) THEN
                                                                  IF Item.GET("No.") THEN BEGIN
                                                                    Item.TESTFIELD("Item Tracking Code");
                                                                    ItemTrackingCode.GET(Item."Item Tracking Code");
                                                                    IF ItemTrackingCode."Lot Specific Tracking" THEN BEGIN
                                                                      ItemLedgerEntry.SETCURRENTKEY(
                                                                        "Item No.",Open,"Variant Code",Positive,"Location Code",
                                                                        "Posting Date","Expiration Date","Lot No.","Serial No.");
                                                                      ItemLedgerEntry.SETRANGE("Item No.","No.");
                                                                      ItemLedgerEntry.SETRANGE("Variant Code","Variant Code");
                                                                      ItemLedgerEntry.SETRANGE(Open,TRUE);
                                                                      ItemLedgerEntry.SETRANGE(Positive,TRUE);
                                                                      ItemLedgerEntry.SETRANGE("Lot No.","Lot No.");
                                                                      IF NOT ItemLedgerEntry.FIND('-') THEN
                                                                        ERROR(Text001,"Lot No.");
                                                                    END;
                                                                  END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupLotNo;
                                                            END;

                                                   CaptionML=ENU=Lot No. }
    { 27  ;   ;Serial No.          ;Code20        ;OnValidate=BEGIN
                                                                IF (("Serial No." <> '') AND (CurrFieldNo <> 0)) OR (CurrFieldNo = 0) THEN
                                                                  IF Item.GET("No.") THEN BEGIN
                                                                    Item.TESTFIELD("Item Tracking Code");
                                                                    ItemTrackingCode.GET(Item."Item Tracking Code");
                                                                    IF ItemTrackingCode."SN Specific Tracking" THEN BEGIN
                                                                      ItemLedgerEntry.SETCURRENTKEY(
                                                                        "Item No.",Open,"Variant Code",Positive,"Location Code",
                                                                        "Posting Date","Expiration Date","Lot No.","Serial No.");
                                                                      ItemLedgerEntry.SETRANGE("Item No.","No.");
                                                                      ItemLedgerEntry.SETRANGE("Variant Code","Variant Code");
                                                                      ItemLedgerEntry.SETRANGE(Open,TRUE);
                                                                      ItemLedgerEntry.SETRANGE(Positive,TRUE);
                                                                      ItemLedgerEntry.SETRANGE("Serial No.","Serial No.");
                                                                      IF NOT ItemLedgerEntry.FIND('-') THEN
                                                                        ERROR(Text002,"Serial No.");
                                                                    END;
                                                                  END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupSerialNo;
                                                            END;

                                                   CaptionML=ENU=Serial No. }
    { 28  ;   ;Committed Quantity  ;Decimal       ;CaptionML=ENU=Committed Quantity;
                                                   DecimalPlaces=0:5 }
    { 29  ;   ;Damaged Quantity    ;Decimal       ;CaptionML=ENU=Damaged Quantity;
                                                   DecimalPlaces=0:5 }
    { 30  ;   ;Quantity On Hold    ;Decimal       ;CaptionML=ENU=On Hold Quantity;
                                                   DecimalPlaces=0:5 }
    { 31  ;   ;Quantity On Hand    ;Decimal       ;CaptionML=ENU=On Hand Quantity;
                                                   DecimalPlaces=0:5 }
    { 32  ;   ;Expiration Date     ;Date          ;CaptionML=ENU=Expiration Date;
                                                   Editable=No }
    { 33  ;   ;Unit Price          ;Decimal       ;CaptionML=ENU=Unit Price }
    { 34  ;   ;EDI Unit of Measure ;Code10        ;CaptionML=ENU=EDI Unit of Measure }
    { 35  ;   ;EDI Trade Partner Item;Code40      ;OnLookup=BEGIN
                                                              LookUpEDIPartnerItem;
                                                            END;

                                                   CaptionML=ENU=EDI Item Cross Ref. }
    { 36  ;   ;Start Date          ;Date          ;CaptionML=ENU=Start Date }
    { 37  ;   ;Adjustment Quantity ;Decimal       ;CaptionML=ENU=Adjustment Quantity }
    { 38  ;   ;Adjustment Description;Text80      ;CaptionML=ENU=Adjustment Description }
    { 39  ;   ;Warranty Date       ;Date          ;CaptionML=ENU=Warranty Date }
    { 40  ;   ;EDI Reason Code     ;Code10        ;CaptionML=ENU=EDI Reason Code }
    { 41  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=ENU=Location Code }
    { 42  ;   ;GTIN-14             ;Code14        ;CaptionML=ENU=GTIN-14 }
    { 43  ;   ;Replacement Item No.;Code20        ;TableRelation=Item;
                                                   CaptionML=ENU=Replacement Item No. }
    { 44  ;   ;Maintenance Type    ;Option        ;CaptionML=ENU=Maintenance Type;
                                                   OptionCaptionML=ENU=" ,Change,Delete,Add Full Item Detail";
                                                   OptionString=[ ,Change,Delete,Add Full Item Detail] }
    { 45  ;   ;Ship Date           ;Date          ;CaptionML=ENU=Ship Date }
    { 46  ;   ;Substitue Item No.  ;Code20        ;TableRelation=Item WHERE (No.=FIELD(No.));
                                                   CaptionML=ENU=Substitue Item No. }
    { 47  ;   ;End Date            ;Date          ;CaptionML=ENU=End Date }
    { 48  ;   ;EDI Variant Code    ;Code40        ;CaptionML=ENU=EDI Variant Code }
    { 49  ;   ;Zero Available Qty. ;Boolean       ;CaptionML=ENU=Zero Available Qty. }
    { 50  ;   ;Zero Damaged Qty.   ;Boolean       ;CaptionML=ENU=Zero Damaged Qty. }
    { 51  ;   ;Zero On Hold Qty.   ;Boolean       ;CaptionML=ENU=Zero On Hold Qty. }
  }
  KEYS
  {
    {    ;Inventory Advice No.,Type,Line No.      ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      InventoryAdviceHdr@1240030000 : Record 14002413;
      Item@1240030001 : Record 27;
      ItemCrossReference@1240030003 : Record 5717;
      ItemVariant@1240030005 : Record 5401;
      ReturnedCrossRef@1240030002 : Record 5717;
      Text000@1240030004 : TextConst 'ENU=There are no items with cross reference: %1';
      Text001@1240020000 : TextConst 'ENU=Lot No. %1 is not on inventory.';
      Text002@1240020001 : TextConst 'ENU=Serial No. %1 is not on inventory.';
      ItemLedgerEntry@1240020002 : Record 32;
      ItemTrackingCode@1240020003 : Record 6502;
      TmpQuoteHeader@1240020005 : TEMPORARY Record 36;
      TmpQuoteLine@1240020006 : TEMPORARY Record 37;
      EDITradePartnerItem@1240020007 : Record 14002364;

    LOCAL PROCEDURE GetItem@2(ItemNo@1000 : Code[20]);
    BEGIN
      IF ItemNo <> '' THEN BEGIN
        IF ItemNo <> Item."No." THEN
          Item.GET(ItemNo);
      END ELSE
        CLEAR(Item);
    END;

    PROCEDURE GetInventoryAdviceHdr@1240030001();
    BEGIN
      InventoryAdviceHdr.GET("Inventory Advice No.",Type);
    END;

    PROCEDURE ICRLookupItem@1240030000(CrossReferenceNo@1000 : Code[20];VAR ReturnedCrossRef@1001 : Record 5717);
    VAR
      TempCrossRefItem@1240030000 : Code[20];
    BEGIN
      WITH ItemCrossReference DO BEGIN
        TempCrossRefItem := CrossReferenceNo;

        RESET;
        SETCURRENTKEY(
          "Cross-Reference No.","Cross-Reference Type","Cross-Reference Type No.","Discontinue Bar Code");
        SETRANGE("Cross-Reference No.",CrossReferenceNo);
        SETFILTER("Cross-Reference Type",'<> %1',"Cross-Reference Type"::Vendor);
        SETFILTER("Cross-Reference Type No.",'%1|%2',InventoryAdviceHdr."Sell-to Customer No.",'');
        SETRANGE("Item No.","No.");
        IF NOT FIND('-') THEN BEGIN
          SETRANGE("Item No.");
          IF NOT FIND('-') THEN
            ERROR(Text000,TempCrossRefItem);
          IF NEXT <> 0 THEN BEGIN
            SETRANGE("Cross-Reference Type No.",InventoryAdviceHdr."Sell-to Customer No.");
            IF FIND('-') THEN
              IF NEXT <> 0 THEN BEGIN
                SETRANGE("Cross-Reference Type No.");
                IF PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) <> ACTION::LookupOK
                THEN
                  ERROR(Text000,TempCrossRefItem);
              END;
          END;
        END;
        ReturnedCrossRef.COPY(ItemCrossReference);
      END;
    END;

    PROCEDURE SalesOrders@1240030003(FilterType@1240030002 : 'Customer,Location');
    VAR
      SalesLine@1240030001 : Record 37;
    BEGIN
      GetInventoryAdviceHdr;

      CASE FilterType OF
        FilterType::Customer:
          BEGIN
            SalesLine.RESET;
            SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
            SalesLine.SETRANGE(Type,SalesLine.Type::Item);
            SalesLine.SETRANGE("No.","No.");
            SalesLine.SETFILTER("Outstanding Quantity",'<>%1',0);
            IF InventoryAdviceHdr."Sell-to Customer No." <> '' THEN
              SalesLine.SETRANGE("Sell-to Customer No.",InventoryAdviceHdr."Sell-to Customer No.");
            PAGE.RUNMODAL(PAGE::"Sales Orders",SalesLine);
          END;
        FilterType::Location:
          BEGIN
            SalesLine.RESET;
            SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
            SalesLine.SETRANGE(Type,SalesLine.Type::Item);
            SalesLine.SETRANGE("No.","No.");
            SalesLine.SETFILTER("Outstanding Quantity",'<>%1',0);
            SalesLine.SETRANGE("Location Code",InventoryAdviceHdr."Location Code");
            PAGE.RUNMODAL(PAGE::"Sales Orders",SalesLine);
          END;
      END;
    END;

    PROCEDURE PurchaseOrders@1240030004(FilterType@1240030000 : 'Vendor,Location');
    VAR
      PurchaseLine@1240030001 : Record 39;
    BEGIN
      GetInventoryAdviceHdr;
      GetItem("No.");

      CASE FilterType OF
        FilterType::Vendor:
          BEGIN
            PurchaseLine.RESET;
            PurchaseLine.SETCURRENTKEY(
              "Document Type",Type,"No.","Variant Code","Drop Shipment","Location Code",
              "Expected Receipt Date");
            PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
            PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
            PurchaseLine.SETRANGE("No.","No.");
            PurchaseLine.SETRANGE("Variant Code","Variant Code");
            IF InventoryAdviceHdr."Buy-from Vendor No." <> '' THEN
              PurchaseLine.SETRANGE("Buy-from Vendor No.",InventoryAdviceHdr."Buy-from Vendor No.");
            PurchaseLine.SETFILTER("Qty. to Receive",'<>%1',0);
            PAGE.RUNMODAL(PAGE::"Purchase Orders",PurchaseLine);
          END;
        FilterType::Location:
          BEGIN
            PurchaseLine.RESET;
            PurchaseLine.SETCURRENTKEY(
              "Document Type",Type,"No.","Variant Code","Drop Shipment","Location Code",
              "Expected Receipt Date");
            PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
            PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
            PurchaseLine.SETRANGE("No.","No.");
            PurchaseLine.SETRANGE("Variant Code","Variant Code");
            PurchaseLine.SETRANGE("Location Code",InventoryAdviceHdr."Location Code");
            PurchaseLine.SETFILTER("Qty. to Receive",'<>%1',0);
            PAGE.RUNMODAL(PAGE::"Purchase Orders",PurchaseLine);
           END;
      END;
    END;

    PROCEDURE ItemAvailability@12(AvailabilityType@1000 : 'Date,Variant,Location');
    VAR
      ItemAvailByDate@1240030002 : Page 157;
      ItemAvailByVar@1240030001 : Page 5414;
      ItemAvailByLoc@1240030000 : Page 492;
      AdviceBeginDate@1240030003 : Date;
      AdviceEndDate@1240030004 : Date;
    BEGIN
      GetInventoryAdviceHdr;
      AdviceBeginDate := InventoryAdviceHdr."Advice Begin Date";
      AdviceEndDate := InventoryAdviceHdr."Advice End Date";

      TESTFIELD("No.");
      Item.RESET;
      Item.GET("No.");
      Item.SETRANGE("No.","No.");
      Item.SETRANGE(
        "Date Filter",AdviceBeginDate,AdviceEndDate);

      CASE AvailabilityType OF
        AvailabilityType::Date:
          BEGIN
            Item.SETRANGE("Variant Filter","Variant Code");
            Item.SETRANGE("Location Filter",InventoryAdviceHdr."Location Code");
            CLEAR(ItemAvailByDate);
            ItemAvailByDate.LOOKUPMODE(TRUE);
            ItemAvailByDate.SETRECORD(Item);
            ItemAvailByDate.SETTABLEVIEW(Item);
            ItemAvailByDate.RUNMODAL;
          END;
        AvailabilityType::Variant:
          BEGIN
            Item.SETRANGE("Location Filter",InventoryAdviceHdr."Location Code");
            CLEAR(ItemAvailByVar);
            ItemAvailByVar.LOOKUPMODE(TRUE);
            ItemAvailByVar.SETRECORD(Item);
            ItemAvailByVar.SETTABLEVIEW(Item);
            ItemAvailByVar.RUNMODAL;
          END;
        AvailabilityType::Location:
          BEGIN
            Item.SETRANGE("Variant Filter","Variant Code");
            CLEAR(ItemAvailByLoc);
            ItemAvailByLoc.LOOKUPMODE(TRUE);
            ItemAvailByLoc.SETRECORD(Item);
            ItemAvailByLoc.SETTABLEVIEW(Item);
            ItemAvailByLoc.RUNMODAL;
          END;
      END;
    END;

    PROCEDURE LookupSerialNo@10();
    BEGIN
      IF Item.GET("No.") THEN BEGIN
        Item.TESTFIELD("Item Tracking Code");
        ItemLedgerEntry.RESET;
        ItemLedgerEntry.SETCURRENTKEY(
          "Item No.",Open,"Variant Code",Positive,"Location Code",
          "Posting Date","Expiration Date","Lot No.","Serial No.");
        ItemLedgerEntry.SETRANGE("Item No.","No.");
        ItemLedgerEntry.SETRANGE("Variant Code","Variant Code");
        ItemLedgerEntry.SETRANGE(Open,TRUE);
        ItemLedgerEntry.SETRANGE(Positive,TRUE);
        IF PAGE.RUNMODAL(0,ItemLedgerEntry) = ACTION::LookupOK THEN
          VALIDATE("Serial No.",ItemLedgerEntry."Serial No.");
      END;
    END;

    PROCEDURE LookupLotNo@11();
    BEGIN
      IF Item.GET("No.") THEN BEGIN
        Item.TESTFIELD("Item Tracking Code");
        ItemLedgerEntry.RESET;
        ItemLedgerEntry.SETCURRENTKEY(
          "Item No.",Open,"Variant Code",Positive,"Location Code",
          "Posting Date","Expiration Date","Lot No.","Serial No.");
        ItemLedgerEntry.SETRANGE("Item No.","No.");
        ItemLedgerEntry.SETRANGE("Variant Code","Variant Code");
        ItemLedgerEntry.SETRANGE(Open,TRUE);
        ItemLedgerEntry.SETRANGE(Positive,TRUE);
        IF PAGE.RUNMODAL(0,ItemLedgerEntry) = ACTION::LookupOK THEN
          VALIDATE("Lot No.",ItemLedgerEntry."Lot No.");
      END;
    END;

    PROCEDURE LookUpEDIPartnerItem@1240020000();
    BEGIN
      GetInventoryAdviceHdr;
      EDITradePartnerItem.RESET;
      EDITradePartnerItem.SETRANGE("Trade Partner No.",InventoryAdviceHdr."Trade Partner No.");
      EDITradePartnerItem.SETRANGE("Partner Item No.","EDI Trade Partner Item");
      IF EDITradePartnerItem.FIND('-') THEN
        EDITradePartnerItem.SETRANGE("Partner Item No.")
      ELSE
        EDITradePartnerItem.SETRANGE("Partner Item No.");
      PAGE.RUNMODAL(PAGE::"E.D.I. Trade Partner Items",EDITradePartnerItem);
    END;

    BEGIN
    END.
  }
}

