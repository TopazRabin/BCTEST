OBJECT Table 7822 MS-QBO Invoice
{
  OBJECT-PROPERTIES
  {
    Date=11/22/17;
    Time=12:00:00 PM;
    Version List=NAVW111.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=MS-QBO Invoice;
               ESM=MS - Factura de QBO;
               FRC=Facture MS-QBO;
               ENC=MS-QBO Invoice];
  }
  FIELDS
  {
    { 1   ;   ;Id                  ;Text250       ;CaptionML=[ENU=Id;
                                                              ESM=Id.;
                                                              FRC="Code ";
                                                              ENC=Id] }
    { 2   ;   ;SyncToken           ;Text250       ;CaptionML=[ENU=SyncToken;
                                                              ESM=SyncToken;
                                                              FRC=SyncToken;
                                                              ENC=SyncToken] }
    { 3   ;   ;MetaData            ;BLOB          ;CaptionML=[ENU=MetaData;
                                                              ESM=Metadatos;
                                                              FRC=M‚tadonn‚es;
                                                              ENC=MetaData] }
    { 4   ;   ;MetaData CreateTime ;DateTime      ;CaptionML=[ENU=MetaData CreateTime;
                                                              ESM=CreateTime de metadatos;
                                                              FRC=M‚tadonn‚esÿ: CreateTime;
                                                              ENC=MetaData CreateTime] }
    { 5   ;   ;MetaData LastUpdatedTime;DateTime  ;CaptionML=[ENU=MetaData LastUpdatedTime;
                                                              ESM=LastUpdatedTime de metadatos;
                                                              FRC=M‚tadonn‚esÿ: LastUpdatedTime;
                                                              ENC=MetaData LastUpdatedTime] }
    { 6   ;   ;CustomField         ;BLOB          ;CaptionML=[ENU=CustomField;
                                                              ESM=CustomField;
                                                              FRC=CustomField;
                                                              ENC=CustomField] }
    { 7   ;   ;DocNumber           ;Text21        ;CaptionML=[ENU=DocNumber;
                                                              ESM=DocNumber;
                                                              FRC=DocNumber;
                                                              ENC=DocNumber];
                                                   Description=Reference number for the transaction. }
    { 8   ;   ;TxnDate             ;Date          ;CaptionML=[ENU=TxnDate;
                                                              ESM=TxnDate;
                                                              FRC=TxnDate;
                                                              ENC=TxnDate];
                                                   Description=The date entered by the user when this transaction occurred.For posting transactions, this is the posting date that affects the financial statements. If the date is not supplied, the current date on the server is used. }
    { 9   ;   ;DepartmentRef       ;BLOB          ;CaptionML=[ENU=DepartmentRef;
                                                              ESM=DepartmentRef;
                                                              FRC=DepartmentRef;
                                                              ENC=DepartmentRef];
                                                   Description=A reference to a Department object specifying the location of the transaction. Default is null. }
    { 10  ;   ;CurrencyRef         ;BLOB          ;CaptionML=[ENU=CurrencyRef;
                                                              ESM=CurrencyRef;
                                                              FRC=CurrencyRef;
                                                              ENC=CurrencyRef];
                                                   Description=Reference to the currency in which all amounts on the associated transaction are expressed. If not returned, currency for the transaction is the home currency of the company. }
    { 11  ;   ;ExchangeRate        ;Decimal       ;CaptionML=[ENU=ExchangeRate;
                                                              ESM=ExchangeRate;
                                                              FRC=ExchangeRate;
                                                              ENC=ExchangeRate];
                                                   Description=Default is 1, applicable if multicurrency is enabled for the company. }
    { 12  ;   ;PrivateNote         ;BLOB          ;CaptionML=[ENU=PrivateNote;
                                                              ESM=PrivateNote;
                                                              FRC=PrivateNote;
                                                              ENC=PrivateNote];
                                                   Description=User entered, organization-private note about the transaction.String, max of 4000 chars. }
    { 13  ;   ;LinkedTxn           ;BLOB          ;CaptionML=[ENU=LinkedTxn;
                                                              ESM=LinkedTxn;
                                                              FRC=LinkedTxn;
                                                              ENC=LinkedTxn];
                                                   Description=Zero or more related transactions to this Invoice object. }
    { 14  ;   ;Line                ;BLOB          ;CaptionML=[ENU=Line;
                                                              ESM=L¡nea;
                                                              FRC=Ligne;
                                                              ENC=Line];
                                                   Description=Individual line items of a transaction. }
    { 15  ;   ;TxnTaxDetail        ;BLOB          ;CaptionML=[ENU=TxnTaxDetail;
                                                              ESM=TxnTaxDetail;
                                                              FRC=TxnTaxDetail;
                                                              ENC=TxnTaxDetail];
                                                   Description=TxnTaxDetail  This data type provides information for taxes charged on the transaction as a whole. It captures the details sales taxes calculated for the transaction based on the tax codes referenced by the transaction. This can be calculated by QuickBooks business logic or you may supply it when adding a transaction. }
    { 16  ;   ;CustomerRef         ;BLOB          ;CaptionML=[ENU=CustomerRef;
                                                              ESM=CustomerRef;
                                                              FRC=CustomerRef;
                                                              ENC=CustomerRef];
                                                   Description=Reference to a customer or job. Query the Customer name list resource to determine the appropriate Customer object to reference here. }
    { 17  ;   ;CustomerMemo        ;BLOB          ;CaptionML=[ENU=CustomerMemo;
                                                              ESM=CustomerMemo;
                                                              FRC=CustomerMemo;
                                                              ENC=CustomerMemo];
                                                   Description=[User-entered message to the customer; this message is visible to end user on their transactions.] }
    { 18  ;   ;BillAddr            ;BLOB          ;CaptionML=[ENU=BillAddr;
                                                              ESM=BillAddr;
                                                              FRC=BillAddr;
                                                              ENC=BillAddr];
                                                   Description=Bill-to address of the Invoice. If BillAddris not specified, and a default Customer:BillingAddr is specified in QuickBooks for this customer, the default bill-to address is used by QuickBooks. }
    { 19  ;   ;ShipAddr            ;BLOB          ;CaptionML=[ENU=ShipAddr;
                                                              ESM=ShipAddr;
                                                              FRC=ShipAddr;
                                                              ENC=ShipAddr];
                                                   Description=Identifies the address where the goods must be shipped. If ShipAddris not specified, and a default Customer:ShippingAddr is specified in QuickBooks for this customer, the default ship-to address will be used by QuickBooks. }
    { 20  ;   ;ClassRef            ;BLOB          ;CaptionML=[ENU=ClassRef;
                                                              ESM=ClassRef;
                                                              FRC=ClassRef;
                                                              ENC=ClassRef];
                                                   Description=Reference to the Class associated with the transaction. }
    { 21  ;   ;SalesTermRef        ;BLOB          ;CaptionML=[ENU=SalesTermRef;
                                                              ESM=SalesTermRef;
                                                              FRC=SalesTermRef;
                                                              ENC=SalesTermRef];
                                                   Description=Reference to the sales term associated with the transaction. Query the Term name list resource to determine the appropriate Term object to reference here. }
    { 22  ;   ;DueDate             ;Date          ;CaptionML=[ENU=DueDate;
                                                              ESM=DueDate;
                                                              FRC=DueDate;
                                                              ENC=DueDate];
                                                   Description=Date when the payment of the transaction is due. If date is not provided, the number of days specified in SalesTermRef added the transaction date will be used. }
    { 23  ;   ;GlobalTaxCalculation;BLOB          ;CaptionML=[ENU=GlobalTaxCalculation;
                                                              ESM=GlobalTaxCalculation;
                                                              FRC=GlobalTaxCalculation;
                                                              ENC=GlobalTaxCalculation];
                                                   Description=Default is TaxExcluded. Method in which tax is applied. Allowed values are: TaxExcluded, TaxInclusive, and NotApplicable. }
    { 24  ;   ;ShipMethodRef       ;BLOB          ;CaptionML=[ENU=ShipMethodRef;
                                                              ESM=ShipMethodRef;
                                                              FRC=ShipMethodRef;
                                                              ENC=ShipMethodRef];
                                                   Description=Reference to the ShipMethod associated with the transaction. There is no shipping method list. Reference resolves to a string. }
    { 25  ;   ;ShipDate            ;Date          ;CaptionML=[ENU=ShipDate;
                                                              ESM=ShipDate;
                                                              FRC=ShipDate;
                                                              ENC=ShipDate];
                                                   Description=Date for delivery of goods or services. }
    { 26  ;   ;TrackingNum         ;Text250       ;CaptionML=[ENU=TrackingNum;
                                                              ESM=TrackingNum;
                                                              FRC=TrackingNum;
                                                              ENC=TrackingNum];
                                                   Description=Shipping provider's tracking number for the delivery of the goods associated with the transaction. }
    { 27  ;   ;TotalAmt            ;Decimal       ;CaptionML=[ENU=TotalAmt;
                                                              ESM=TotalAmt;
                                                              FRC=TotalAmt;
                                                              ENC=TotalAmt];
                                                   Description=[Indicates the total amount of the transaction. This includes the total of all the charges, allowances, and taxes. Calculated by QuickBooks business logic; any value you supply is over-written by QuickBooks.] }
    { 28  ;   ;HomeTotalAmt        ;Decimal       ;CaptionML=[ENU=HomeTotalAmt;
                                                              ESM=HomeTotalAmt;
                                                              FRC=HomeTotalAmt;
                                                              ENC=HomeTotalAmt];
                                                   Description=Applicable if multicurrency is enabled for the company. Total amount of the transaction in the home currency. Includes the total of all the charges, allowances and taxes. Calculated by QuickBooks business logic. }
    { 29  ;   ;ApplyTaxAfterDiscount;Boolean      ;CaptionML=[ENU=ApplyTaxAfterDiscount;
                                                              ESM=ApplyTaxAfterDiscount;
                                                              FRC=ApplyTaxAfterDiscount;
                                                              ENC=ApplyTaxAfterDiscount];
                                                   Description=If false or null, calculate the sales tax first, and then apply the discount. If true, subtract the discount first and then calculate the sales tax. }
    { 30  ;   ;PrintStatus         ;Text13        ;CaptionML=[ENU=PrintStatus;
                                                              ESM=PrintStatus;
                                                              FRC=PrintStatus;
                                                              ENC=PrintStatus];
                                                   Description=Valid values: NotSet, NeedToPrint, PrintComplete. }
    { 31  ;   ;EmailStatus         ;Text10        ;CaptionML=[ENU=EmailStatus;
                                                              ESM=EmailStatus;
                                                              FRC=EmailStatus;
                                                              ENC=EmailStatus];
                                                   Description=Valid values: NotSet,NeedToSend, EmailSent. }
    { 32  ;   ;BillEmail           ;BLOB          ;CaptionML=[ENU=BillEmail;
                                                              ESM=BillEmail;
                                                              FRC=BillEmail;
                                                              ENC=BillEmail];
                                                   Description=Identifies the e-mail address where the invoice is sent. If EmailStatus=NeedToSend, BillEmailis a required input. }
    { 33  ;   ;DeliveryInfo        ;Text250       ;CaptionML=[ENU=DeliveryInfo;
                                                              ESM=DeliveryInfo;
                                                              FRC=DeliveryInfo;
                                                              ENC=DeliveryInfo];
                                                   Description=Email delivery information. Returned when a request has been made to deliver email with the send operation. }
    { 34  ;   ;Balance             ;Decimal       ;CaptionML=[ENU=Balance;
                                                              ESM=Saldo;
                                                              FRC=Solde;
                                                              ENC=Balance];
                                                   Description=[The balance reflecting any payments made against the transaction. Initially set to the value of TotalAmt. A Balance of 0 indicates the invoice is fully paid. Calculated by QuickBooks business logic;] }
    { 35  ;   ;HomeBalance         ;Decimal       ;CaptionML=[ENU=HomeBalance;
                                                              ESM=HomeBalance;
                                                              FRC=HomeBalance;
                                                              ENC=HomeBalance];
                                                   Description=Applicable if multicurrency is enabled for the company.Convenience field containing the amount in Balance expressed in terms of the home currency.Calculated by QuickBooks business logic. }
    { 36  ;   ;TxnSource           ;Text250       ;CaptionML=[ENU=TxnSource;
                                                              ESM=TxnSource;
                                                              FRC=TxnSource;
                                                              ENC=TxnSource];
                                                   Description=Used internally to specify originating source of a credit card transaction. }
    { 37  ;   ;Deposit             ;Text30        ;CaptionML=[ENU=Deposit;
                                                              ESM=Dep¢sito;
                                                              FRC=D‚p“t;
                                                              ENC=Deposit];
                                                   Description=The deposit made towards this invoice. }
  }
  KEYS
  {
    {    ;Id                                      ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      IntegrationRecordNotFoundErr@1000 : TextConst '@@@=%1 ID of the record, %2 ID of the already mapped record;ENU=The Integration Record for record %1 was not found when pushing sales invoice.;ESM=El registro de integraci¢n del registro %1 no se encontr¢ al insertar la factura de venta.;FRC=L''enregistrement d''int‚gration pour l''enregistrement %1 est introuvable lors de l''‚mission de la facture vente.;ENC=The Integration Record for record %1 was not found when pushing sales invoice.';

    PROCEDURE Create@26(MSQBOTableMgt@1000 : Codeunit 7820) : Boolean;
    VAR
      JSONManagement@1003 : Codeunit 5459;
      JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      InvoiceJObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      Value@1004 : Variant;
    BEGIN
      QBOInvoiceToJson(JObject);
      IF MSQBOTableMgt.CreateEntity('Invoice',JObject,InvoiceJObject) THEN BEGIN
        JSONManagement.GetPropertyValueFromJObjectByName(InvoiceJObject,'Id',Value);
        Id := FORMAT(Value);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE UpdateFromSalesInvoice@5(SalesInvoiceHeader@1000 : Record 112;MSQBOSetup@1012 : Record 7824) : Boolean;
    VAR
      Customer@1005 : Record 18;
      SalesInvoiceLine@1003 : Record 113;
      ExtTxtIDIntegrationRecord@1001 : Record 5377;
      JSONManagement@1004 : Codeunit 5459;
      CustomerRefJObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      LinesJArray@1015 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      TxnTaxDetailJObject@1009 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TxnTaxCodeRefJObject@1010 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TaxLinesJArray@1016 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      TaxLineJObject@1018 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TxnTaxLineDetailJObject@1020 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TxnTaxRateJObject@1021 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      QBOCustomerId@1014 : Text[250];
      TotalTaxAmount@1019 : Decimal;
    BEGIN
      // Create CustomerRef BLOB
      Customer.SETRANGE("No.",SalesInvoiceHeader."Sell-to Customer No.");
      Customer.FINDFIRST;

      IF NOT ExtTxtIDIntegrationRecord.FindIDFromRecordID(Customer.RECORDID,QBOCustomerId) THEN
        ERROR(STRSUBSTNO(IntegrationRecordNotFoundErr,Customer.RECORDID));

      CustomerRefJObject := CustomerRefJObject.JObject;
      JSONManagement.AddJPropertyToJObject(CustomerRefJObject,'value',QBOCustomerId);
      SetBlobFieldFromJson(FIELDNO(CustomerRef),CustomerRefJObject);

      // Create Line BLOB
      SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      SalesInvoiceLine.SETRANGE(Type,SalesInvoiceLine.Type::Item);
      LinesJArray := LinesJArray.JArray;
      SalesInvoiceHeader.CALCFIELDS("Invoice Discount Amount");
      AddLinesToJArray(LinesJArray,SalesInvoiceLine,MSQBOSetup,SalesInvoiceHeader."Invoice Discount Amount");
      SetBlobFieldFromJson(FIELDNO(Line),LinesJArray);

      // TxnTaxDetail
      SalesInvoiceHeader.CALCFIELDS(Amount);
      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
      TotalTaxAmount := SalesInvoiceHeader."Amount Including VAT" -
        (SalesInvoiceHeader.Amount - SalesInvoiceHeader."Invoice Discount Amount");
      TxnTaxDetailJObject := TxnTaxDetailJObject.JObject;
      JSONManagement.AddJPropertyToJObject(TxnTaxDetailJObject,'TotalTax',TotalTaxAmount);
      CASE MSQBOSetup."Default Country As Option" OF
        MSQBOSetup."Default Country As Option"::Canada,
        MSQBOSetup."Default Country As Option"::UK:
          BEGIN
            TaxLinesJArray := TaxLinesJArray.JArray;
            TaxLineJObject := TaxLineJObject.JObject;

            JSONManagement.AddJPropertyToJObject(TaxLineJObject,'Amount',TotalTaxAmount);
            JSONManagement.AddJPropertyToJObject(TaxLineJObject,'DetailType','TaxLineDetail');

            TxnTaxLineDetailJObject := TxnTaxLineDetailJObject.JObject;

            TxnTaxRateJObject := TxnTaxRateJObject.JObject;
            JSONManagement.AddJPropertyToJObject(TxnTaxRateJObject,'value',MSQBOSetup."Default Tax Rate");
            JSONManagement.AddJObjectToJObject(TxnTaxLineDetailJObject,'TaxRateRef',TxnTaxRateJObject);

            JSONManagement.AddJPropertyToJObject(TxnTaxLineDetailJObject,'PercentBased',TRUE);
            JSONManagement.AddJPropertyToJObject(TxnTaxLineDetailJObject,'TaxPercent',0);
            JSONManagement.AddJPropertyToJObject(TxnTaxLineDetailJObject,'NetAmountTaxable',SalesInvoiceHeader.Amount);
            JSONManagement.AddJObjectToJObject(TaxLineJObject,'TaxLineDetail',TxnTaxLineDetailJObject);

            JSONManagement.AddJObjectToJArray(TaxLinesJArray,TaxLineJObject);
            JSONManagement.AddJArrayToJObject(TxnTaxDetailJObject,'TaxLine',TaxLinesJArray);
          END;
        ELSE BEGIN
          TxnTaxCodeRefJObject := TxnTaxCodeRefJObject.JObject;
          JSONManagement.AddJPropertyToJObject(TxnTaxCodeRefJObject,'value',MSQBOSetup."Default Tax Code");
          JSONManagement.AddJObjectToJObject(TxnTaxDetailJObject,'TxnTaxCodeRef',TxnTaxCodeRefJObject);
        END;
      END;
      SetBlobFieldFromJson(FIELDNO(TxnTaxDetail),TxnTaxDetailJObject);

      // Other properties
      DueDate := SalesInvoiceHeader."Due Date";
      TxnDate := SalesInvoiceHeader."Posting Date";
      DocNumber := SalesInvoiceHeader."No.";
      EmailStatus := 'EmailSent';

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AddLinesToJArray@96(VAR LinesJArray@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";VAR SalesInvoiceLine@1002 : Record 113;MSQBOSetup@1003 : Record 7824;InvoiceDiscount@1000 : Decimal);
    VAR
      Item@1005 : Record 27;
      ExtTxtIDIntegrationRecord@1006 : Record 5377;
      JSONManagement@1007 : Codeunit 5459;
      TaxCodeRefJObject@1008 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      ItemRefJObject@1009 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      SalesItemLineDetailJObject@1010 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      DiscountLineDetailJObject@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      DiscountAccountRefJObject@1013 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      LineJObject@1011 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      QBOItemId@1012 : Text[250];
    BEGIN
      SalesInvoiceLine.FINDSET;
      REPEAT
        Item.GET(SalesInvoiceLine."No.");
        IF NOT ExtTxtIDIntegrationRecord.FindIDFromRecordID(Item.RECORDID,QBOItemId) THEN
          ERROR(IntegrationRecordNotFoundErr,Item.RECORDID);
        LineJObject := LineJObject.JObject;
        JSONManagement.AddJPropertyToJObject(LineJObject,'Amount',SalesInvoiceLine.Amount);
        JSONManagement.AddJPropertyToJObject(LineJObject,'Description',SalesInvoiceLine.Description);
        JSONManagement.AddJPropertyToJObject(LineJObject,'DetailType','SalesItemLineDetail');

        SalesItemLineDetailJObject := SalesItemLineDetailJObject.JObject;

        IF SalesInvoiceLine.Quantity <> 0 THEN
          JSONManagement.AddJPropertyToJObject(SalesItemLineDetailJObject,'UnitPrice',
            SalesInvoiceLine.Amount / SalesInvoiceLine.Quantity)
        ELSE
          JSONManagement.AddJPropertyToJObject(SalesItemLineDetailJObject,'UnitPrice',SalesInvoiceLine.Amount);
        JSONManagement.AddJPropertyToJObject(SalesItemLineDetailJObject,'Qty',SalesInvoiceLine.Quantity);

        ItemRefJObject := ItemRefJObject.JObject;
        JSONManagement.AddJPropertyToJObject(ItemRefJObject,'value',QBOItemId);
        JSONManagement.AddJPropertyToJObject(ItemRefJObject,'name',Item.Description);
        JSONManagement.AddJObjectToJObject(SalesItemLineDetailJObject,'ItemRef',ItemRefJObject);

        TaxCodeRefJObject := TaxCodeRefJObject.JObject;
        CASE MSQBOSetup."Default Country As Option" OF
          MSQBOSetup."Default Country As Option"::Canada,
          MSQBOSetup."Default Country As Option"::UK:
            JSONManagement.AddJPropertyToJObject(TaxCodeRefJObject,'value',MSQBOSetup."Default Tax Code");
          ELSE
            JSONManagement.AddJPropertyToJObject(TaxCodeRefJObject,'value','TAX');
        END;
        JSONManagement.AddJObjectToJObject(SalesItemLineDetailJObject,'TaxCodeRef',TaxCodeRefJObject);

        JSONManagement.AddJObjectToJObject(LineJObject,'SalesItemLineDetail',SalesItemLineDetailJObject);

        JSONManagement.AddJObjectToJArray(LinesJArray,LineJObject);
      UNTIL SalesInvoiceLine.NEXT = 0;

      IF InvoiceDiscount <> 0 THEN BEGIN
        LineJObject := LineJObject.JObject;
        JSONManagement.AddJPropertyToJObject(LineJObject,'Amount',InvoiceDiscount);
        JSONManagement.AddJPropertyToJObject(LineJObject,'DetailType','DiscountLineDetail');

        DiscountLineDetailJObject := DiscountLineDetailJObject.JObject;
        JSONManagement.AddJPropertyToJObject(DiscountLineDetailJObject,'PercentBased',FALSE);
        DiscountAccountRefJObject := DiscountAccountRefJObject.JObject;
        JSONManagement.AddJPropertyToJObject(DiscountAccountRefJObject,'value',MSQBOSetup."Default Discount Account Id");
        JSONManagement.AddJPropertyToJObject(DiscountAccountRefJObject,'name',MSQBOSetup."Default Discount Account Code");
        JSONManagement.AddJObjectToJObject(DiscountLineDetailJObject,'DiscountAccountRef',DiscountAccountRefJObject);
        JSONManagement.AddJObjectToJObject(LineJObject,'DiscountLineDetail',DiscountLineDetailJObject);

        JSONManagement.AddJObjectToJArray(LinesJArray,LineJObject);
      END;
    END;

    PROCEDURE QBOInvoiceToJson@29(VAR JObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      JSONManagement@1005 : Codeunit 5459;
      CustomerRefJObject@1008 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TxnTaxDetailJObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      LinesJArray@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
    BEGIN
      JObject := JObject.JObject;

      LinesJArray := LinesJArray.Parse(GetBlobFieldAsText(FIELDNO(Line)));
      JSONManagement.AddJArrayToJObject(JObject,FIELDNAME(Line),LinesJArray);

      CustomerRefJObject := CustomerRefJObject.Parse(GetBlobFieldAsText(FIELDNO(CustomerRef)));
      JSONManagement.AddJObjectToJObject(JObject,FIELDNAME(CustomerRef),CustomerRefJObject);

      TxnTaxDetailJObject := TxnTaxDetailJObject.Parse(GetBlobFieldAsText(FIELDNO(TxnTaxDetail)));
      JSONManagement.AddJObjectToJObject(JObject,FIELDNAME(TxnTaxDetail),TxnTaxDetailJObject);

      JSONManagement.AddJPropertyToJObject(JObject,FIELDNAME(DueDate),FORMAT(DueDate,0,9));
      JSONManagement.AddJPropertyToJObject(JObject,FIELDNAME(TxnDate),FORMAT(TxnDate,0,9));
      JSONManagement.AddJPropertyToJObject(JObject,FIELDNAME(EmailStatus),FORMAT(EmailStatus,0,9));
      JSONManagement.AddJPropertyToJObject(JObject,FIELDNAME(DocNumber),DocNumber);
    END;

    PROCEDURE GetBlobFieldAsText@30(FieldNo@1002 : Integer) : Text;
    VAR
      TypeHelper@1006 : Codeunit 10;
      RecordRef@1000 : RecordRef;
      FieldRef@1001 : FieldRef;
    BEGIN
      RecordRef.GETTABLE(Rec);
      FieldRef := RecordRef.FIELD(FieldNo);
      EXIT(TypeHelper.ReadBlob(FieldRef));
    END;

    PROCEDURE SetBlobFieldFromJson@8(FieldNo@1002 : Integer;JObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      TypeHelper@1006 : Codeunit 10;
      RecordRef@1000 : RecordRef;
      FieldRef@1001 : FieldRef;
    BEGIN
      RecordRef.GETTABLE(Rec);
      FieldRef := RecordRef.FIELD(FieldNo);
      TypeHelper.WriteBlob(FieldRef,FORMAT(JObject));
      RecordRef.SETTABLE(Rec);
    END;

    BEGIN
    END.
  }
}

