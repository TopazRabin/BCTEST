OBJECT Table 14123522 ES Object Property
{
  OBJECT-PROPERTIES
  {
    Date=10/05/18;
    Time=12:00:00 PM;
    Version List=ES1.41.55;
  }
  PROPERTIES
  {
    DataCaptionFields=Object Type,Object ID,Object Caption;
    OnInsert=BEGIN
               ESSecuritySetup.GET;
               ESSecuritySetup.TestPublishCompany;

               IF NOT NoInitObjectLevel THEN
                 InitObjectLevelPermissions;

               IF NOT NoComment THEN BEGIN
                 CALCFIELDS("Object Caption");
                 Comment(1,STRSUBSTNO(Text028,TABLECAPTION,"Object Type","Object ID","Object Caption"));
                 ESSecuritySetup.Comment(
                   1,STRSUBSTNO(Text028,TABLECAPTION,"Object Type","Object ID","Object Caption"));
               END;

               "Created By User" := USERID;
               "Created Date Time" := CURRENTDATETIME;
             END;

    OnModify=BEGIN
               ESSecuritySetup.GET;

               IF NOT NoComment THEN BEGIN
                 CALCFIELDS("Object Caption");
                 Comment(1,STRSUBSTNO(Text029,TABLECAPTION,"Object Type","Object ID","Object Caption"));
                 ESSecuritySetup.Comment(
                   1,STRSUBSTNO(Text029,TABLECAPTION,"Object Type","Object ID","Object Caption"));
               END;
             END;

    OnDelete=BEGIN
               ESSecuritySetup.GET;

               IF NOT NoComment THEN BEGIN
                 CALCFIELDS("Object Caption");
                 Comment(1,STRSUBSTNO(Text030,TABLECAPTION,"Object Type","Object ID","Object Caption"));
                 ESSecuritySetup.Comment(
                   1,STRSUBSTNO(Text030,TABLECAPTION,"Object Type","Object ID","Object Caption"));
               END;
             END;

    CaptionML=ENU=Object Property;
    LookupPageID=Page14123522;
    DrillDownPageID=Page14123522;
  }
  FIELDS
  {
    { 1   ;   ;Object Type         ;Option        ;CaptionML=ENU=Object Type;
                                                   OptionCaptionML=ENU=TableData,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query,System;
                                                   OptionString=TableData,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query,System }
    { 3   ;   ;Object ID           ;Integer       ;TableRelation="ES Object Information"."Object ID" WHERE (Object Type=FIELD(Object Type));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Object ID;
                                                   NotBlank=Yes }
    { 4   ;   ;Object Caption      ;Text249       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("ES Object Information"."Object Caption" WHERE (Object Type=FIELD(Object Type),
                                                                                                                      Object ID=FIELD(Object ID)));
                                                   CaptionML=ENU=Object Caption;
                                                   Editable=No }
    { 5   ;   ;Source/DataItem Table ID;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("ES Relation"."Relation Object ID" WHERE (Object Type=FIELD(Object Type),
                                                                                                                Object ID=FIELD(Object ID),
                                                                                                                Type=FILTER(Source Table|Data Item)));
                                                   CaptionML=ENU=Source/DataItem Table ID;
                                                   Editable=No }
    { 6   ;   ;Role Permissions    ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("ES Role Permission" WHERE (Object Type=FIELD(Object Type),
                                                                                                 Object ID=FIELD(Object ID)));
                                                   CaptionML=ENU=Permissions;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 7   ;   ;Read Role Permissions;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("ES Role Permission" WHERE (Object Type=FIELD(Object Type),
                                                                                                 Object ID=FIELD(Object ID),
                                                                                                 Read Permission=FILTER(<>' ')));
                                                   CaptionML=ENU=Read Permissions;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 8   ;   ;Insert Role Permissions;Integer    ;FieldClass=FlowField;
                                                   CalcFormula=Count("ES Role Permission" WHERE (Object Type=FIELD(Object Type),
                                                                                                 Object ID=FIELD(Object ID),
                                                                                                 Insert Permission=FILTER(<>' ')));
                                                   CaptionML=ENU=Insert Permissions;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 9   ;   ;Modify Role Permissions;Integer    ;FieldClass=FlowField;
                                                   CalcFormula=Count("ES Role Permission" WHERE (Object Type=FIELD(Object Type),
                                                                                                 Object ID=FIELD(Object ID),
                                                                                                 Modify Permission=FILTER(<>' ')));
                                                   CaptionML=ENU=Modify Permissions;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 10  ;   ;Delete Role Permissions;Integer    ;FieldClass=FlowField;
                                                   CalcFormula=Count("ES Role Permission" WHERE (Object Type=FIELD(Object Type),
                                                                                                 Object ID=FIELD(Object ID),
                                                                                                 Delete Permission=FILTER(<>' ')));
                                                   CaptionML=ENU=Delete Permissions;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 11  ;   ;Execute Role Permissions;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Count("ES Role Permission" WHERE (Object Type=FIELD(Object Type),
                                                                                                 Object ID=FIELD(Object ID),
                                                                                                 Execute Permission=FILTER(<>' ')));
                                                   CaptionML=ENU=Execute Permissions;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 12  ;   ;Recording Permissions;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("ES Recording Permission" WHERE (Object Type=FIELD(Object Type),
                                                                                                      Object ID=FIELD(Object ID)));
                                                   CaptionML=ENU=Recording Permissions;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 13  ;   ;Role Builder Permissions;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Count("ES Role Builder Permission" WHERE (Object Type=FIELD(Object Type),
                                                                                                         Object ID=FIELD(Object ID)));
                                                   CaptionML=ENU=Builder Permissions;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 14  ;   ;Limited License Object;Boolean     ;CaptionML=ENU=Limited License Object;
                                                   Editable=No }
    { 15  ;   ;Read Permission (License);Option   ;CaptionML=ENU=Read Permission (License);
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect];
                                                   Editable=No }
    { 16  ;   ;Insert Permission (License);Option ;CaptionML=ENU=Insert Permission (License);
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect];
                                                   Editable=No }
    { 17  ;   ;Modify Permission (License);Option ;CaptionML=ENU=Modify Permission (License);
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect];
                                                   Editable=No }
    { 18  ;   ;Delete Permission (License);Option ;CaptionML=ENU=Delete Permission (License);
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect];
                                                   Editable=No }
    { 19  ;   ;Execute Permission (License);Option;CaptionML=ENU=Execute Permission (License);
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect];
                                                   Editable=No }
    { 20  ;   ;Object Level Permissions;Boolean   ;CaptionML=ENU=Object Level Permissions }
    { 21  ;   ;Created By User     ;Code50        ;CaptionML=ENU=Created By User;
                                                   Editable=No }
    { 22  ;   ;Created Date Time   ;DateTime      ;CaptionML=ENU=Created Date Time;
                                                   Editable=No }
    { 23  ;   ;History Table ID    ;Integer       ;TableRelation="ES Object Information"."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF "History Table ID" <> 0 THEN BEGIN
                                                                  TESTFIELD("Object Type","Object Type"::Table);

                                                                  IF "History Table ID" = "Security Table ID" THEN
                                                                    TESTFIELD("Security Table ID",0);

                                                                  CheckHistoryAndSecurity("History Table ID");
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=History Table ID;
                                                   BlankZero=Yes }
    { 24  ;   ;Security Table ID   ;Integer       ;TableRelation="ES Object Information"."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF "Security Table ID" <> 0 THEN BEGIN
                                                                  TESTFIELD("Object Type","Object Type"::Table);

                                                                  IF "History Table ID" = "Security Table ID" THEN
                                                                    TESTFIELD("History Table ID",0);

                                                                  CheckHistoryAndSecurity("Security Table ID");
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Security Table ID;
                                                   BlankZero=Yes }
    { 25  ;   ;Skip During Export  ;Boolean       ;CaptionML=ENU=Skip During Export }
    { 26  ;   ;Export Error        ;Text250       ;CaptionML=ENU=Export Error }
    { 27  ;   ;Security Filter Table;Boolean      ;OnValidate=BEGIN
                                                                IF "Security Filter Table" THEN
                                                                  TESTFIELD("Object Type","Object Type"::TableData);
                                                              END;

                                                   CaptionML=ENU=Security Filter Table }
    { 28  ;   ;Limited User Table Access;Option   ;OnValidate=BEGIN
                                                                IF "Limited User Table Access" <> 0 THEN
                                                                  TESTFIELD("Object Type","Object Type"::TableData);
                                                              END;

                                                   CaptionML=ENU=Limited User Table Access;
                                                   OptionCaptionML=ENU=" ,Included,Excluded";
                                                   OptionString=[ ,Included,Excluded] }
    { 30  ;   ;Exported Date Time  ;DateTime      ;CaptionML=ENU=Exported Date Time;
                                                   Editable=No }
    { 31  ;   ;Imported Date Time  ;DateTime      ;CaptionML=ENU=Imported Date Time }
    { 32  ;   ;Quick Security Type ;Option        ;OnValidate=BEGIN
                                                                IF "Quick Security Type" IN
                                                                   ["Quick Security Type"::"3","Quick Security Type"::"Read Only"]
                                                                THEN
                                                                  TESTFIELD("Object Type","Object Type"::TableData);
                                                              END;

                                                   CaptionML=ENU=Quick Security Type;
                                                   OptionCaptionML=ENU=Full Access,Read Only,No Access;
                                                   OptionString=Full Access,Read Only,No Access }
    { 33  ;   ;Segregation of Duties;Boolean      ;CaptionML=ENU=Segregation of Duties }
  }
  KEYS
  {
    {    ;Object Type,Object ID                   ;Clustered=Yes }
    {    ;Created Date Time                        }
    {    ;History Table ID                         }
    {    ;Security Table ID                        }
    {    ;Created By User,Created Date Time        }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text002@1240520010 : TextConst 'ENU=Default Limited License Objects have been added.';
      Text003@1240520011 : TextConst 'ENU=Permissions';
      Text001@1001 : TextConst 'ENU=Test Export Object\';
      Text004@1002 : TextConst 'ENU=Updating %1.';
      Text005@1003 : TextConst 'ENU=%1 exported, %2 errors.';
      Text006@1004 : TextConst 'ENU=Default Limited User objects have been added.';
      Text007@1005 : TextConst 'ENU=%1 %2 cannot be executed.';
      ESSecuritySetup@1240520001 : Record 14123521;
      Text008@1240520005 : TextConst 'ENU=Limited User table access summary\';
      Text009@1240520004 : TextConst 'ENU=Read: %1\';
      Text010@1240520003 : TextConst 'ENU=Write: %5 (%6 allowed, %7 included and %8 excluded)\';
      Text011@1240520002 : TextConst 'ENU=Allowed tables: %2\';
      ESObjectPropertyReadTmp@1240520006 : TEMPORARY Record 14123522;
      ESObjectPropertyWriteTmp@1240520007 : TEMPORARY Record 14123522;
      Text012@1240520008 : TextConst 'ENU=Excluded tables: %4';
      Text013@1006 : TextConst 'ENU=%1 %2 inserted.';
      Text021@1240520026 : TextConst 'ENU=Nothing imported.';
      Text014@1240520025 : TextConst 'ENU=File Name must be entered.';
      Text027@1240520024 : TextConst 'ENU=%1 %2 exported to %3 with %4 records.';
      Text033@1240520023 : TextConst 'ENU=File %1 already exists, overwrite?';
      Text034@1240520022 : TextConst 'ENU=Nothing has been exported.';
      Text035@1240520021 : TextConst 'ENU=Exporting %1 to file\';
      Text036@1240520020 : TextConst 'ENU=Process #1################################################';
      Text037@1240520019 : TextConst 'ENU=Updating Version';
      Text038@1240520018 : TextConst 'ENU=Creating File';
      Text019@1240520017 : TextConst 'ENU=Closing File';
      Text020@1240520016 : TextConst 'ENU=Permission Set Detail %1 exported to %2 with %3 records.';
      Text015@1240520015 : TextConst 'ENU=Importing %1 from file\';
      Text016@1240520014 : TextConst 'ENU=Process #1################################################\';
      Text017@1240520013 : TextConst 'ENU=Opening file';
      Text018@1240520012 : TextConst 'ENU=%1 records have been imported from %2.';
      ESFileMgt@1240520027 : Codeunit 14123502;
      Text022@1007 : TextConst 'ENU=%1 is not valid content for this filetype.';
      Text023@1008 : TextConst 'ENU=Quick Security Type has already been set on some objects. Continue?';
      Text024@1009 : TextConst 'ENU=Nothing changed.';
      Text025@1010 : TextConst 'ENU=Default Quick Security records have been added.';
      NoInitObjectLevel@1240520009 : Boolean;
      Text026@1011 : TextConst 'ENU=Default Segregation of Duties objects have been added.';
      Text028@1240520031 : TextConst 'ENU=Inserted %1 %2 %3 %4';
      Text029@1240520029 : TextConst 'ENU=Modified %1 %2 %3 %4';
      Text030@1240520028 : TextConst 'ENU=Deleted %1 %2 %3 %4';
      NoComment@1240520030 : Boolean;
      Text101@1100 : TextConst 'ENU=Downloading File.';
      Text102@1108 : TextConst 'ENU=Uploading file.';

    PROCEDURE ObjectWhereUsed@1240520010();
    VAR
      ESObjectWhereUsed@1240520008 : Page 14123562;
    BEGIN
      CLEAR(ESObjectWhereUsed);
      ESObjectWhereUsed.InitObject("Object Type","Object ID");
      ESObjectWhereUsed.RUN;
    END;

    PROCEDURE FormatPermissionLicenseString@1240520011() : Text[30];
    VAR
      ESFormatPermssion@1240520008 : Codeunit 14123506;
    BEGIN
      IF NOT "Limited License Object" THEN
        EXIT('');

      EXIT(
        ESFormatPermssion.FormatPermissionString(
          "Read Permission (License)","Insert Permission (License)","Modify Permission (License)",
          "Delete Permission (License)","Execute Permission (License)"));
    END;

    PROCEDURE SetNoInitObjectLevel@1240520022(NewValue@1240520001 : Boolean);
    BEGIN
      NoInitObjectLevel := NewValue;
    END;

    PROCEDURE InitObjectLevelPermissions@1240520021();
    BEGIN
      IF "Object Type" = "Object Type"::TableData THEN
        EXIT;

      ESSecuritySetup.GET;
      ESSecuritySetup.TestPublishCompany;
      CASE "Object Type" OF
        "Object Type"::Table:
          "Object Level Permissions" := ESSecuritySetup."Limit All Tables";
        "Object Type"::"2":
          "Object Level Permissions" := ESSecuritySetup."Limit All Forms";
        "Object Type"::Report:
          "Object Level Permissions" := ESSecuritySetup."Limit All Reports";
        "Object Type"::"4":
          "Object Level Permissions" := ESSecuritySetup."Limit All Dataports";
        "Object Type"::Codeunit:
          "Object Level Permissions" := ESSecuritySetup."Limit All Codeunits";
        "Object Type"::XMLport:
          "Object Level Permissions" := ESSecuritySetup."Limit All XMLPorts";
        "Object Type"::Page:
          "Object Level Permissions" := ESSecuritySetup."Limit All Pages";
        "Object Type"::Query:
          "Object Level Permissions" := ESSecuritySetup."Limit All Queries";
      END;
    END;

    PROCEDURE InsertDefaultLicense@1240520012(ShowStatus@1240520008 : Boolean);
    BEGIN
      InsertOneLicense(17,1);
      InsertOneLicense(21,1);
      InsertOneLicense(25,1);
      InsertOneLicense(32,1);
      InsertOneLicense(45,1);
      InsertOneLicense(46,1);
      InsertOneLicense(49,1);
      InsertOneLicense(86,1);
      InsertOneLicense(87,1);
      InsertOneLicense(110,2);
      InsertOneLicense(111,1);
      InsertOneLicense(112,2);
      InsertOneLicense(113,1);
      InsertOneLicense(114,2);
      InsertOneLicense(115,1);
      InsertOneLicense(120,2);
      InsertOneLicense(121,1);
      InsertOneLicense(122,2);
      InsertOneLicense(123,1);
      InsertOneLicense(124,2);
      InsertOneLicense(125,1);
      InsertOneLicense(131,1);
      InsertOneLicense(132,1);
      InsertOneLicense(169,1);
      InsertOneLicense(203,1);
      InsertOneLicense(238,1);
      InsertOneLicense(239,1);
      InsertOneLicense(240,1);
      InsertOneLicense(241,1);
      InsertOneLicense(254,1);
      InsertOneLicense(271,1);
      InsertOneLicense(272,1);
      InsertOneLicense(275,2);
      InsertOneLicense(276,1);
      InsertOneLicense(281,1);
      InsertOneLicense(297,2);
      InsertOneLicense(298,1);
      InsertOneLicense(300,1);
      InsertOneLicense(304,2);
      InsertOneLicense(305,1);
      InsertOneLicense(339,1);
      InsertOneLicense(379,1);
      InsertOneLicense(380,1);
      InsertOneLicense(405,1);
      InsertOneLicense(454,1);
      InsertOneLicense(456,1);
      InsertOneLicense(457,1);
      InsertOneLicense(458,1);
      InsertOneLicense(480,3);
      InsertOneLicense(481,4);
      InsertOneLicense(824,1);
      InsertOneLicense(828,1);
      InsertOneLicense(829,1);
      InsertOneLicense(1005,1);
      InsertOneLicense(1015,1);
      InsertOneLicense(1017,1);
      InsertOneLicense(1018,1);
      InsertOneLicense(1019,1);
      InsertOneLicense(1261,5);
      InsertOneLicense(5601,1);
      InsertOneLicense(5617,1);
      InsertOneLicense(5625,1);
      InsertOneLicense(5629,1);
      InsertOneLicense(5636,1);
      InsertOneLicense(5772,2);
      InsertOneLicense(5773,1);
      InsertOneLicense(5802,1);
      InsertOneLicense(5806,2);
      InsertOneLicense(5807,1);
      InsertOneLicense(5810,2);
      InsertOneLicense(5811,1);
      InsertOneLicense(5812,1);
      InsertOneLicense(5823,1);
      InsertOneLicense(6501,1);
      InsertOneLicense(6507,1);
      InsertOneLicense(6508,1);
      InsertOneLicense(6509,1);
      InsertOneLicense(6521,1);
      InsertOneLicense(6523,1);
      InsertOneLicense(6525,1);
      InsertOneLicense(6531,1);
      InsertOneLicense(6533,1);
      InsertOneLicense(6535,1);
      InsertOneLicense(6536,1);
      InsertOneLicense(6537,1);
      InsertOneLicense(6550,1);
      InsertOneLicense(6650,2);
      InsertOneLicense(6651,2);
      InsertOneLicense(6656,1);
      InsertOneLicense(6660,2);
      InsertOneLicense(6661,1);
      InsertOneLicense(6666,1);
      InsertOneLicense(7312,1);
      InsertOneLicense(7322,2);
      InsertOneLicense(7323,1);
      InsertOneLicense(7340,2);
      InsertOneLicense(7341,1);
      InsertOneLicense(7342,2);
      InsertOneLicense(7343,1);
      InsertOneLicense(10123,2);
      InsertOneLicense(10124,1);
      InsertOneLicense(10143,2);
      InsertOneLicense(10144,1);
      InsertOneLicense(10145,1);
      InsertOneLicense(25004,1);
      InsertOneLicense(25005,1);
      InsertOneLicense(99000755,1);
      InsertOneLicense(99000769,1);
      InsertOneLicense(99000794,1);
      InsertOneLicense(99000798,1);
      InsertOneLicense(99000815,1);
      InsertOneLicense(99000817,1);
      InsertOneLicense(99000818,1);
      InsertOneLicense(99000819,1);
      InsertOneLicense(99000820,1);
      InsertOneLicense(99000821,1);
      InsertOneLicense(99000822,1);
      InsertOneLicense(99000823,1);
      InsertOneLicense(99000824,1);
      InsertOneLicense(99000825,1);
      InsertOneLicense(99004711,2);
      InsertOneLicense(99004712,2);
      InsertOneLicense(99004713,2);
      InsertOneLicense(99004714,2);
      InsertOneLicense(99004715,2);
      InsertOneLicense(99004716,2);
      InsertOneLicense(99004717,2);
      InsertOneLicense(99004718,2);
      InsertOneLicense(99004719,2);
      InsertOneLicense(99004720,2);
      InsertOneLicense(99004721,2);
      InsertOneLicense(99004722,2);
      InsertOneLicense(99004723,2);
      InsertOneLicense(99004724,2);
      InsertOneLicense(99004725,2);
      InsertOneLicense(99004726,2);
      InsertOneLicense(99004727,2);
      InsertOneLicense(99004728,2);
      InsertOneLicense(99004729,2);
      InsertOneLicense(99004730,2);
      InsertOneLicense(99004731,2);
      InsertOneLicense(99004732,2);
      InsertOneLicense(99004733,2);
      InsertOneLicense(99004734,2);
      InsertOneLicense(99004735,2);
      InsertOneLicense(99004736,2);
      InsertOneLicense(99004737,2);
      InsertOneLicense(99004738,2);
      InsertOneLicense(99004739,2);
      InsertOneLicense(99004740,2);
      InsertOneLicense(99004741,2);
      InsertOneLicense(99004742,2);
      InsertOneLicense(99004743,2);
      InsertOneLicense(99004744,2);
      InsertOneLicense(99004745,2);
      InsertOneLicense(99004748,2);
      InsertOneLicense(99004749,2);
      InsertOneLicense(99004750,2);
      InsertOneLicense(99004753,2);
      InsertOneLicense(99004754,2);
      InsertOneLicense(99004755,2);
      InsertOneLicense(99004757,2);
      InsertOneLicense(99004758,2);
      InsertOneLicense(99004759,2);
      InsertOneLicense(99004760,2);
      InsertOneLicense(99004761,2);
      InsertOneLicense(99004762,2);
      InsertOneLicense(99004763,2);
      InsertOneLicense(99004764,2);
      InsertOneLicense(99004765,2);
      InsertOneLicense(99004766,2);
      InsertOneLicense(99004767,2);
      InsertOneLicense(99004768,2);
      InsertOneLicense(99004769,2);
      InsertOneLicense(99004770,2);
      InsertOneLicense(99004771,2);
      InsertOneLicense(99004772,2);
      InsertOneLicense(99004773,2);
      InsertOneLicense(99004774,2);
      InsertOneLicense(99004775,2);
      InsertOneLicense(99004776,2);
      InsertOneLicense(99004777,2);
      InsertOneLicense(99004784,2);
      InsertOneLicense(99004785,2);
      InsertOneLicense(99004786,2);
      InsertOneLicense(99004789,2);
      InsertOneLicense(99004790,2);
      InsertOneLicense(99004794,2);
      InsertOneLicense(99004796,2);
      InsertOneLicense(99004797,2);
      InsertOneLicense(99004798,2);
      InsertOneLicense(99004799,2);
      InsertOneLicense(99004808,2);
      InsertOneLicense(99004867,2);
      InsertOneLicense(99004868,2);
      InsertOneLicense(99004869,2);
      InsertOneLicense(99004870,2);
      InsertOneLicense(99004871,2);
      InsertOneLicense(99004872,2);
      InsertOneLicense(99004873,2);
      InsertOneLicense(99004874,2);
      InsertOneLicense(99004875,2);
      InsertOneLicense(99004876,2);
      InsertOneLicense(99004877,2);
      InsertOneLicense(99004878,2);
      InsertOneLicense(99004879,2);
      InsertOneLicense(99004880,2);
      InsertOneLicense(99004881,2);
      InsertOneLicense(99004882,2);
      InsertOneLicense(99004890,2);
      InsertOneLicense(99004891,2);
      InsertOneLicense(99004892,2);
      InsertOneLicense(99004896,2);
      InsertOneLicense(99004897,2);
      InsertOneLicense(99004898,2);

      IF ShowStatus THEN
        MESSAGE(Text002);
    END;

    PROCEDURE InsertLimitedUserIncluded@1240520002(ShowStatus@1240520001 : Boolean);
    BEGIN
      ESSecuritySetup.GET;
      ESSecuritySetup.TestPublishCompany;

      InsertOneLicense(18,11);
      InsertOneLicense(19,11);
      InsertOneLicense(23,11);
      InsertOneLicense(24,11);
      InsertOneLicense(36,11);
      InsertOneLicense(37,11);
      InsertOneLicense(38,11);
      InsertOneLicense(39,11);
      InsertOneLicense(43,11);
      InsertOneLicense(44,11);
      InsertOneLicense(51,11);
      InsertOneLicense(97,11);
      InsertOneLicense(130,11);
      InsertOneLicense(133,11);
      InsertOneLicense(222,11);
      InsertOneLicense(224,11);
      InsertOneLicense(225,11);
      InsertOneLicense(249,11);
      InsertOneLicense(308,11);
      InsertOneLicense(309,11);
      InsertOneLicense(336,11);
      InsertOneLicense(337,11);
      InsertOneLicense(348,11);
      InsertOneLicense(355,11);
      InsertOneLicense(356,11);
      InsertOneLicense(357,11);
      InsertOneLicense(358,11);
      InsertOneLicense(359,11);
      InsertOneLicense(361,11);
      InsertOneLicense(389,11);
      InsertOneLicense(405,11);
      InsertOneLicense(454,11);
      InsertOneLicense(455,11);
      InsertOneLicense(480,11);
      InsertOneLicense(481,11);
      InsertOneLicense(487,11);
      InsertOneLicense(760,11);
      InsertOneLicense(762,11);
      InsertOneLicense(763,11);
      InsertOneLicense(770,11);
      InsertOneLicense(771,11);
      InsertOneLicense(869,11);
      InsertOneLicense(900,11);
      InsertOneLicense(901,11);
      InsertOneLicense(904,11);
      InsertOneLicense(906,11);
      InsertOneLicense(950,11);
      InsertOneLicense(951,11);
      InsertOneLicense(952,11);
      InsertOneLicense(953,11);
      InsertOneLicense(954,11);
      InsertOneLicense(955,11);
      InsertOneLicense(956,11);
      InsertOneLicense(957,11);
      InsertOneLicense(959,11);
      InsertOneLicense(1311,11);
      InsertOneLicense(1319,11);
      InsertOneLicense(1504,11);
      InsertOneLicense(1506,11);
      InsertOneLicense(1511,11);
      InsertOneLicense(1522,11);
      InsertOneLicense(1523,11);
      InsertOneLicense(1524,11);
      InsertOneLicense(1530,11);
      InsertOneLicense(1550,11);
      InsertOneLicense(1701,11);
      InsertOneLicense(1702,11);
      InsertOneLicense(5050,11);
      InsertOneLicense(5051,11);
      InsertOneLicense(5052,11);
      InsertOneLicense(5053,11);
      InsertOneLicense(5054,11);
      InsertOneLicense(5056,11);
      InsertOneLicense(5058,11);
      InsertOneLicense(5061,11);
      InsertOneLicense(5062,11);
      InsertOneLicense(5065,11);
      InsertOneLicense(5072,11);
      InsertOneLicense(5075,11);
      InsertOneLicense(5078,11);
      InsertOneLicense(5080,11);
      InsertOneLicense(5086,11);
      InsertOneLicense(5092,11);
      InsertOneLicense(5093,11);
      InsertOneLicense(5106,11);
      InsertOneLicense(5107,11);
      InsertOneLicense(5108,11);
      InsertOneLicense(5109,11);
      InsertOneLicense(5110,11);
      InsertOneLicense(5123,11);
      InsertOneLicense(5125,11);
      InsertOneLicense(5126,11);
      InsertOneLicense(5127,11);
      InsertOneLicense(5128,11);
      InsertOneLicense(5150,11);
      InsertOneLicense(5151,11);
      InsertOneLicense(5199,11);
      InsertOneLicense(5200,11);
      InsertOneLicense(5201,11);
      InsertOneLicense(5203,11);
      InsertOneLicense(5205,11);
      InsertOneLicense(5207,11);
      InsertOneLicense(5214,11);
      InsertOneLicense(5648,11);
      InsertOneLicense(5765,11);
      InsertOneLicense(5766,11);
      InsertOneLicense(5772,11);
      InsertOneLicense(5773,11);
      InsertOneLicense(5806,11);
      InsertOneLicense(5809,11);
      InsertOneLicense(5814,11);
      InsertOneLicense(6550,11);
      InsertOneLicense(7002,11);
      InsertOneLicense(7004,11);
      InsertOneLicense(7012,11);
      InsertOneLicense(7014,11);
      InsertOneLicense(7135,11);
      InsertOneLicense(7310,11);
      InsertOneLicense(7311,11);
      InsertOneLicense(7312,11);
      InsertOneLicense(7313,11);
      InsertOneLicense(7318,11);
      InsertOneLicense(7319,11);
      InsertOneLicense(7320,11);
      InsertOneLicense(7321,11);
      InsertOneLicense(7322,11);
      InsertOneLicense(7323,11);
      InsertOneLicense(7324,11);
      InsertOneLicense(7325,11);
      InsertOneLicense(7326,11);
      InsertOneLicense(7331,11);
      InsertOneLicense(7332,11);
      InsertOneLicense(7354,11);
      InsertOneLicense(9050,11);
      InsertOneLicense(9051,11);
      InsertOneLicense(9052,11);
      InsertOneLicense(9053,11);
      InsertOneLicense(9054,11);
      InsertOneLicense(9055,11);
      InsertOneLicense(9150,11);
      InsertOneLicense(9151,11);
      InsertOneLicense(9152,11);
      InsertOneLicense(9180,11);
      InsertOneLicense(9500,11);
      InsertOneLicense(99000850,11);
      InsertOneLicense(2000000067,11);
      InsertOneLicense(2000000068,11);
      InsertOneLicense(2000000073,11);
      InsertOneLicense(2000000075,11);
      InsertOneLicense(2000000080,11);
      InsertOneLicense(2000000111,11);

      InsertOneLicense(17,12);
      InsertOneLicense(200000004,12);
      InsertOneLicense(200000005,12);
      InsertOneLicense(200000053,12);

      IF ShowStatus THEN
        MESSAGE(Text006);
      ESSecuritySetup.Comment(1,Text006);
    END;

    PROCEDURE InsertSegregationOfDuties@1240520023(ShowStatus@1240520001 : Boolean);
    BEGIN
      ESSecuritySetup.GET;
      ESSecuritySetup.TestPublishCompany;

      InsertOneLicense(15,13);
      InsertOneLicense(17,13);
      InsertOneLicense(18,13);
      InsertOneLicense(21,13);
      InsertOneLicense(23,13);
      InsertOneLicense(25,13);
      InsertOneLicense(27,13);
      InsertOneLicense(32,13);
      InsertOneLicense(36,13);
      InsertOneLicense(37,13);
      InsertOneLicense(38,13);
      InsertOneLicense(39,13);
      InsertOneLicense(45,13);
      InsertOneLicense(46,13);
      InsertOneLicense(51,13);
      InsertOneLicense(81,13);
      InsertOneLicense(83,13);
      InsertOneLicense(90,13);
      InsertOneLicense(110,13);
      InsertOneLicense(111,13);
      InsertOneLicense(112,13);
      InsertOneLicense(113,13);
      InsertOneLicense(114,13);
      InsertOneLicense(115,13);
      InsertOneLicense(120,13);
      InsertOneLicense(121,13);
      InsertOneLicense(122,13);
      InsertOneLicense(123,13);
      InsertOneLicense(124,13);
      InsertOneLicense(125,13);
      InsertOneLicense(156,13);
      InsertOneLicense(160,13);
      InsertOneLicense(167,13);
      InsertOneLicense(169,13);
      InsertOneLicense(203,13);
      InsertOneLicense(207,13);
      InsertOneLicense(210,13);
      InsertOneLicense(222,13);
      InsertOneLicense(224,13);
      InsertOneLicense(240,13);
      InsertOneLicense(241,13);
      InsertOneLicense(246,13);
      InsertOneLicense(253,13);
      InsertOneLicense(254,13);
      InsertOneLicense(270,13);
      InsertOneLicense(271,13);
      InsertOneLicense(272,13);
      InsertOneLicense(273,13);
      InsertOneLicense(274,13);
      InsertOneLicense(275,13);
      InsertOneLicense(276,13);
      InsertOneLicense(281,13);
      InsertOneLicense(287,13);
      InsertOneLicense(288,13);
      InsertOneLicense(295,13);
      InsertOneLicense(296,13);
      InsertOneLicense(297,13);
      InsertOneLicense(298,13);
      InsertOneLicense(302,13);
      InsertOneLicense(303,13);
      InsertOneLicense(304,13);
      InsertOneLicense(305,13);
      InsertOneLicense(308,13);
      InsertOneLicense(309,13);
      InsertOneLicense(337,13);
      InsertOneLicense(339,13);
      InsertOneLicense(402,13);
      InsertOneLicense(403,13);
      InsertOneLicense(404,13);
      InsertOneLicense(405,13);
      InsertOneLicense(900,13);
      InsertOneLicense(901,13);
      InsertOneLicense(910,13);
      InsertOneLicense(911,13);
      InsertOneLicense(950,13);
      InsertOneLicense(951,13);
      InsertOneLicense(952,13);
      InsertOneLicense(958,13);
      InsertOneLicense(1004,13);
      InsertOneLicense(1005,13);
      InsertOneLicense(1231,13);
      InsertOneLicense(1232,13);
      InsertOneLicense(1511,13);
      InsertOneLicense(1701,13);
      InsertOneLicense(1702,13);
      InsertOneLicense(1704,13);
      InsertOneLicense(1705,13);
      InsertOneLicense(5050,13);
      InsertOneLicense(5107,13);
      InsertOneLicense(5108,13);
      InsertOneLicense(5109,13);
      InsertOneLicense(5110,13);
      InsertOneLicense(5125,13);
      InsertOneLicense(5126,13);
      InsertOneLicense(5127,13);
      InsertOneLicense(5128,13);
      InsertOneLicense(5200,13);
      InsertOneLicense(5222,13);
      InsertOneLicense(5223,13);
      InsertOneLicense(5224,13);
      InsertOneLicense(5401,13);
      InsertOneLicense(5404,13);
      InsertOneLicense(5600,13);
      InsertOneLicense(5601,13);
      InsertOneLicense(5621,13);
      InsertOneLicense(5624,13);
      InsertOneLicense(5628,13);
      InsertOneLicense(5629,13);
      InsertOneLicense(5635,13);
      InsertOneLicense(5700,13);
      InsertOneLicense(5740,13);
      InsertOneLicense(5741,13);
      InsertOneLicense(5742,13);
      InsertOneLicense(5744,13);
      InsertOneLicense(5745,13);
      InsertOneLicense(5746,13);
      InsertOneLicense(5747,13);
      InsertOneLicense(5802,13);
      InsertOneLicense(6650,13);
      InsertOneLicense(6651,13);
      InsertOneLicense(6660,13);
      InsertOneLicense(6661,13);
      InsertOneLicense(9000,13);
      InsertOneLicense(9001,13);
      InsertOneLicense(9002,13);
      InsertOneLicense(9003,13);
      InsertOneLicense(2000000002,13);
      InsertOneLicense(2000000003,13);
      InsertOneLicense(2000000004,13);
      InsertOneLicense(2000000005,13);
      InsertOneLicense(2000000006,13);
      InsertOneLicense(2000000053,13);
      InsertOneLicense(2000000054,13);
      InsertOneLicense(2000000120,13);

      IF ShowStatus THEN
        MESSAGE(Text026);
      ESSecuritySetup.Comment(1,Text026);
    END;

    LOCAL PROCEDURE InsertOneLicense@1240520013(TabelNo@1240520008 : Integer;StandardPattern@1240520009 : Integer);
    VAR
      ESObjectProperty@1240520010 : Record 14123522;
      ESObjectInfo@1240520001 : Record 14123509;
      RecordExists@1240520011 : Boolean;
    BEGIN
      IF NOT ESObjectInfo.GET(ESObjectInfo."Object Type"::TableData,TabelNo) THEN
        EXIT;

      IF NOT ESObjectProperty.GET(ESObjectProperty."Object Type"::TableData,TabelNo) THEN BEGIN
        ESObjectProperty.INIT;
        ESObjectProperty."Object Type" := ESObjectProperty."Object Type"::TableData;
        ESObjectProperty."Object ID" := TabelNo;
        ESObjectProperty."Object Level Permissions" := FALSE;
      END ELSE
        RecordExists := TRUE;

      CASE StandardPattern OF
        1:
          BEGIN
            ESObjectProperty."Limited License Object" := TRUE;
            ESObjectProperty."Read Permission (License)" :=
              ESObjectProperty."Read Permission (License)"::Yes;
            ESObjectProperty."Insert Permission (License)" :=
              ESObjectProperty."Insert Permission (License)"::Indirect;
            ESObjectProperty."Modify Permission (License)" :=
              ESObjectProperty."Modify Permission (License)"::Indirect;
            ESObjectProperty."Delete Permission (License)" :=
              ESObjectProperty."Delete Permission (License)"::Indirect;
            ESObjectProperty."Execute Permission (License)" :=
              ESObjectProperty."Execute Permission (License)"::" ";
          END;
        2:
          BEGIN
            ESObjectProperty."Limited License Object" := TRUE;
            ESObjectProperty."Read Permission (License)" :=
              ESObjectProperty."Read Permission (License)"::Yes;
            ESObjectProperty."Insert Permission (License)" :=
              ESObjectProperty."Insert Permission (License)"::Indirect;
            ESObjectProperty."Modify Permission (License)" :=
              ESObjectProperty."Modify Permission (License)"::Indirect;
            ESObjectProperty."Delete Permission (License)" :=
              ESObjectProperty."Delete Permission (License)"::Yes;
            ESObjectProperty."Execute Permission (License)" :=
              ESObjectProperty."Execute Permission (License)"::" ";
          END;
        3:
          BEGIN
            ESObjectProperty."Limited License Object" := TRUE;
            ESObjectProperty."Read Permission (License)" :=
              ESObjectProperty."Read Permission (License)"::Yes;
            ESObjectProperty."Insert Permission (License)" :=
              ESObjectProperty."Insert Permission (License)"::Indirect;
            ESObjectProperty."Modify Permission (License)" :=
              ESObjectProperty."Modify Permission (License)"::" ";
            ESObjectProperty."Delete Permission (License)" :=
              ESObjectProperty."Delete Permission (License)"::" ";
            ESObjectProperty."Execute Permission (License)" :=
              ESObjectProperty."Execute Permission (License)"::" ";
          END;
        4:
          BEGIN
            ESObjectProperty."Limited License Object" := TRUE;
            ESObjectProperty."Read Permission (License)" :=
              ESObjectProperty."Read Permission (License)"::Yes;
            ESObjectProperty."Insert Permission (License)" :=
              ESObjectProperty."Insert Permission (License)"::Indirect;
            ESObjectProperty."Modify Permission (License)" :=
              ESObjectProperty."Modify Permission (License)"::Indirect;
            ESObjectProperty."Delete Permission (License)" :=
              ESObjectProperty."Delete Permission (License)"::" ";
            ESObjectProperty."Execute Permission (License)" :=
              ESObjectProperty."Execute Permission (License)"::" ";
          END;
        5:
          BEGIN
            ESObjectProperty."Limited License Object" := TRUE;
            ESObjectProperty."Read Permission (License)" :=
              ESObjectProperty."Read Permission (License)"::Indirect;
            ESObjectProperty."Insert Permission (License)" :=
              ESObjectProperty."Insert Permission (License)"::Indirect;
            ESObjectProperty."Modify Permission (License)" :=
              ESObjectProperty."Modify Permission (License)"::Indirect;
            ESObjectProperty."Delete Permission (License)" :=
              ESObjectProperty."Delete Permission (License)"::Indirect;
            ESObjectProperty."Execute Permission (License)" :=
              ESObjectProperty."Execute Permission (License)"::" ";
          END;
        11:
          ESObjectProperty."Limited User Table Access" := ESObjectProperty."Limited User Table Access"::Included;
        12:
          ESObjectProperty."Limited User Table Access" := ESObjectProperty."Limited User Table Access"::Excluded;
        13:
          ESObjectProperty."Segregation of Duties" := TRUE;
      END;

      ESObjectProperty.SetNoComment(NOT ESSecuritySetup."Detailed Comments");
      IF RecordExists THEN
        ESObjectProperty.MODIFY(TRUE)
      ELSE
        ESObjectProperty.INSERT(TRUE);
    END;

    PROCEDURE InsertDefaultQuickSecurity@1240520016(ShowStatus@1240520003 : Boolean);
    VAR
      ESObjectProperty@1240520001 : Record 14123522;
      TableNo@1240520002 : Integer;
    BEGIN
      ESSecuritySetup.GET;
      ESSecuritySetup.TestPublishCompany;

      ESObjectProperty.RESET;
      ESObjectProperty.SETFILTER("Quick Security Type",'>0');
      IF ESObjectProperty.FIND('-') THEN
        IF NOT CONFIRM(Text023,FALSE) THEN
          ERROR(Text024);

      SetQuickSecurity(3,1);
      SetQuickSecurity(4,1);
      SetQuickSecurity(5,1);
      SetQuickSecurity(6,1);
      SetQuickSecurity(7,1);
      SetQuickSecurity(8,1);
      SetQuickSecurity(9,1);
      SetQuickSecurity(10,1);
      SetQuickSecurity(11,1);
      SetQuickSecurity(13,1);
      SetQuickSecurity(14,1);
      SetQuickSecurity(15,1);
      SetQuickSecurity(42,1);
      SetQuickSecurity(50,1);
      SetQuickSecurity(52,1);
      SetQuickSecurity(53,1);
      SetQuickSecurity(60,1);
      SetQuickSecurity(61,1);
      SetQuickSecurity(77,1);
      SetQuickSecurity(78,1);
      SetQuickSecurity(79,1);
      SetQuickSecurity(80,1);
      SetQuickSecurity(82,1);
      SetQuickSecurity(84,1);
      SetQuickSecurity(85,1);
      SetQuickSecurity(88,1);
      SetQuickSecurity(91,1);
      SetQuickSecurity(92,1);
      SetQuickSecurity(93,1);
      SetQuickSecurity(94,1);
      SetQuickSecurity(95,1);
      SetQuickSecurity(98,1);
      SetQuickSecurity(131,1);
      SetQuickSecurity(132,1);
      SetQuickSecurity(135,1);
      SetQuickSecurity(136,1);
      SetQuickSecurity(140,1);
      SetQuickSecurity(161,1);
      SetQuickSecurity(162,1);
      SetQuickSecurity(163,1);
      SetQuickSecurity(170,1);
      SetQuickSecurity(171,1);
      SetQuickSecurity(172,1);
      SetQuickSecurity(173,1);
      SetQuickSecurity(174,1);
      SetQuickSecurity(175,1);
      SetQuickSecurity(200,1);
      SetQuickSecurity(204,1);
      SetQuickSecurity(206,1);
      SetQuickSecurity(208,1);
      SetQuickSecurity(209,1);
      SetQuickSecurity(220,1);
      SetQuickSecurity(230,1);
      SetQuickSecurity(231,1);
      SetQuickSecurity(232,1);
      SetQuickSecurity(233,1);
      SetQuickSecurity(234,1);
      SetQuickSecurity(236,1);
      SetQuickSecurity(237,1);
      SetQuickSecurity(242,1);
      SetQuickSecurity(243,1);
      SetQuickSecurity(244,1);
      SetQuickSecurity(245,1);
      SetQuickSecurity(247,1);
      SetQuickSecurity(250,1);
      SetQuickSecurity(251,1);
      SetQuickSecurity(252,1);
      SetQuickSecurity(255,1);
      SetQuickSecurity(256,1);
      SetQuickSecurity(257,1);
      SetQuickSecurity(258,1);
      SetQuickSecurity(259,1);
      SetQuickSecurity(260,1);
      SetQuickSecurity(261,1);
      SetQuickSecurity(262,1);
      SetQuickSecurity(277,1);
      SetQuickSecurity(282,1);
      SetQuickSecurity(284,1);
      SetQuickSecurity(285,1);
      SetQuickSecurity(286,1);
      SetQuickSecurity(289,1);
      SetQuickSecurity(291,1);
      SetQuickSecurity(292,1);
      SetQuickSecurity(293,1);
      SetQuickSecurity(294,1);
      SetQuickSecurity(301,1);
      SetQuickSecurity(308,1);
      SetQuickSecurity(310,1);
      SetQuickSecurity(311,1);
      SetQuickSecurity(312,1);
      SetQuickSecurity(313,1);
      SetQuickSecurity(314,1);
      SetQuickSecurity(315,1);
      SetQuickSecurity(316,1);
      SetQuickSecurity(318,1);
      SetQuickSecurity(319,1);
      SetQuickSecurity(320,1);
      SetQuickSecurity(321,1);
      SetQuickSecurity(322,1);
      SetQuickSecurity(323,1);
      SetQuickSecurity(324,1);
      SetQuickSecurity(325,1);
      SetQuickSecurity(326,1);
      SetQuickSecurity(327,1);
      SetQuickSecurity(328,1);
      SetQuickSecurity(329,1);
      SetQuickSecurity(330,1);
      SetQuickSecurity(333,1);
      SetQuickSecurity(334,1);
      SetQuickSecurity(340,1);
      SetQuickSecurity(341,1);
      SetQuickSecurity(344,1);
      SetQuickSecurity(345,1);
      SetQuickSecurity(346,1);
      SetQuickSecurity(348,1);
      SetQuickSecurity(349,1);
      SetQuickSecurity(350,1);
      SetQuickSecurity(351,1);
      SetQuickSecurity(352,1);
      SetQuickSecurity(354,1);
      SetQuickSecurity(361,1);
      SetQuickSecurity(363,1);
      SetQuickSecurity(364,1);
      SetQuickSecurity(376,1);
      SetQuickSecurity(377,1);
      SetQuickSecurity(378,1);
      SetQuickSecurity(381,1);
      SetQuickSecurity(385,1);
      SetQuickSecurity(387,1);
      SetQuickSecurity(388,1);
      SetQuickSecurity(389,1);
      SetQuickSecurity(402,1);
      SetQuickSecurity(403,1);
      SetQuickSecurity(404,1);
      SetQuickSecurity(407,1);
      SetQuickSecurity(409,1);
      SetQuickSecurity(452,1);
      SetQuickSecurity(453,1);
      SetQuickSecurity(459,1);
      SetQuickSecurity(460,1);
      SetQuickSecurity(462,1);
      SetQuickSecurity(463,1);
      SetQuickSecurity(464,1);
      SetQuickSecurity(465,1);
      SetQuickSecurity(466,1);
      SetQuickSecurity(470,1);
      SetQuickSecurity(471,1);
      SetQuickSecurity(484,1);
      SetQuickSecurity(486,1);
      SetQuickSecurity(550,1);
      SetQuickSecurity(551,1);
      SetQuickSecurity(560,1);
      SetQuickSecurity(561,1);
      SetQuickSecurity(570,1);
      SetQuickSecurity(572,1);
      SetQuickSecurity(725,1);
      SetQuickSecurity(726,1);
      SetQuickSecurity(740,1);
      SetQuickSecurity(741,1);
      SetQuickSecurity(743,1);
      SetQuickSecurity(750,1);
      SetQuickSecurity(751,1);
      SetQuickSecurity(752,1);
      SetQuickSecurity(753,1);
      SetQuickSecurity(762,1);
      SetQuickSecurity(763,1);
      SetQuickSecurity(770,1);
      SetQuickSecurity(771,1);
      SetQuickSecurity(780,1);
      SetQuickSecurity(800,1);
      SetQuickSecurity(801,1);
      SetQuickSecurity(824,1);
      SetQuickSecurity(825,1);
      SetQuickSecurity(826,1);
      SetQuickSecurity(827,1);
      SetQuickSecurity(828,1);
      SetQuickSecurity(830,1);
      SetQuickSecurity(840,1);
      SetQuickSecurity(841,1);
      SetQuickSecurity(843,1);
      SetQuickSecurity(856,1);
      SetQuickSecurity(869,1);
      SetQuickSecurity(870,1);
      SetQuickSecurity(880,1);
      SetQuickSecurity(905,1);
      SetQuickSecurity(959,1);
      SetQuickSecurity(980,1);
      SetQuickSecurity(1001,1);
      SetQuickSecurity(1002,1);
      SetQuickSecurity(1006,1);
      SetQuickSecurity(1050,1);
      SetQuickSecurity(1052,1);
      SetQuickSecurity(1060,1);
      SetQuickSecurity(1062,1);
      SetQuickSecurity(1100,1);
      SetQuickSecurity(1102,1);
      SetQuickSecurity(1103,1);
      SetQuickSecurity(1106,1);
      SetQuickSecurity(1107,1);
      SetQuickSecurity(1108,1);
      SetQuickSecurity(1110,1);
      SetQuickSecurity(1112,1);
      SetQuickSecurity(1113,1);
      SetQuickSecurity(1180,1);
      SetQuickSecurity(1181,1);
      SetQuickSecurity(1200,1);
      SetQuickSecurity(1207,1);
      SetQuickSecurity(1213,1);
      SetQuickSecurity(1220,1);
      SetQuickSecurity(1221,1);
      SetQuickSecurity(1222,1);
      SetQuickSecurity(1223,1);
      SetQuickSecurity(1224,1);
      SetQuickSecurity(1225,1);
      SetQuickSecurity(1226,1);
      SetQuickSecurity(1227,1);
      SetQuickSecurity(1228,1);
      SetQuickSecurity(1229,1);
      SetQuickSecurity(1230,1);
      SetQuickSecurity(1237,1);
      SetQuickSecurity(1240,1);
      SetQuickSecurity(1241,1);
      SetQuickSecurity(1242,1);
      SetQuickSecurity(1251,1);
      SetQuickSecurity(1252,1);
      SetQuickSecurity(1259,1);
      SetQuickSecurity(1260,1);
      SetQuickSecurity(1261,1);
      SetQuickSecurity(1270,1);
      SetQuickSecurity(1271,1);
      SetQuickSecurity(1275,1);
      SetQuickSecurity(1280,1);
      SetQuickSecurity(1281,1);
      SetQuickSecurity(1300,1);
      SetQuickSecurity(1301,1);
      SetQuickSecurity(1302,1);
      SetQuickSecurity(1303,1);
      SetQuickSecurity(1305,1);
      SetQuickSecurity(1306,1);
      SetQuickSecurity(1310,1);
      SetQuickSecurity(1312,1);
      SetQuickSecurity(1319,1);
      SetQuickSecurity(1440,1);
      SetQuickSecurity(1441,1);
      SetQuickSecurity(1442,1);
      SetQuickSecurity(1443,1);
      SetQuickSecurity(1444,1);
      SetQuickSecurity(1445,1);
      SetQuickSecurity(1446,1);
      SetQuickSecurity(1447,1);
      SetQuickSecurity(1448,1);
      SetQuickSecurity(1501,1);
      SetQuickSecurity(1502,1);
      SetQuickSecurity(1504,1);
      SetQuickSecurity(1505,1);
      SetQuickSecurity(1506,1);
      SetQuickSecurity(1508,1);
      SetQuickSecurity(1509,1);
      SetQuickSecurity(1512,1);
      SetQuickSecurity(1513,1);
      SetQuickSecurity(1524,1);
      SetQuickSecurity(1540,1);
      SetQuickSecurity(1541,1);
      SetQuickSecurity(1543,1);
      SetQuickSecurity(1601,1);
      SetQuickSecurity(1660,1);
      SetQuickSecurity(1750,1);
      SetQuickSecurity(1751,1);
      SetQuickSecurity(1802,1);
      SetQuickSecurity(1803,1);
      SetQuickSecurity(1806,1);
      SetQuickSecurity(1808,1);
      SetQuickSecurity(1827,1);
      SetQuickSecurity(1828,1);
      SetQuickSecurity(1829,1);
      SetQuickSecurity(1875,1);
      SetQuickSecurity(1876,1);
      SetQuickSecurity(1877,1);
      SetQuickSecurity(1878,1);
      SetQuickSecurity(1879,1);
      SetQuickSecurity(2003,1);
      SetQuickSecurity(2020,1);
      SetQuickSecurity(2155,1);
      SetQuickSecurity(2156,1);
      SetQuickSecurity(2170,1);
      SetQuickSecurity(5053,1);
      SetQuickSecurity(5055,1);
      SetQuickSecurity(5057,1);
      SetQuickSecurity(5059,1);
      SetQuickSecurity(5062,1);
      SetQuickSecurity(5063,1);
      SetQuickSecurity(5064,1);
      SetQuickSecurity(5066,1);
      SetQuickSecurity(5068,1);
      SetQuickSecurity(5069,1);
      SetQuickSecurity(5070,1);
      SetQuickSecurity(5073,1);
      SetQuickSecurity(5079,1);
      SetQuickSecurity(5081,1);
      SetQuickSecurity(5082,1);
      SetQuickSecurity(5083,1);
      SetQuickSecurity(5084,1);
      SetQuickSecurity(5087,1);
      SetQuickSecurity(5088,1);
      SetQuickSecurity(5090,1);
      SetQuickSecurity(5091,1);
      SetQuickSecurity(5094,1);
      SetQuickSecurity(5095,1);
      SetQuickSecurity(5096,1);
      SetQuickSecurity(5097,1);
      SetQuickSecurity(5098,1);
      SetQuickSecurity(5099,1);
      SetQuickSecurity(5100,1);
      SetQuickSecurity(5103,1);
      SetQuickSecurity(5104,1);
      SetQuickSecurity(5105,1);
      SetQuickSecurity(5111,1);
      SetQuickSecurity(5112,1);
      SetQuickSecurity(5122,1);
      SetQuickSecurity(5196,1);
      SetQuickSecurity(5202,1);
      SetQuickSecurity(5204,1);
      SetQuickSecurity(5206,1);
      SetQuickSecurity(5209,1);
      SetQuickSecurity(5210,1);
      SetQuickSecurity(5211,1);
      SetQuickSecurity(5212,1);
      SetQuickSecurity(5213,1);
      SetQuickSecurity(5215,1);
      SetQuickSecurity(5217,1);
      SetQuickSecurity(5218,1);
      SetQuickSecurity(5220,1);
      SetQuickSecurity(5221,1);
      SetQuickSecurity(5320,1);
      SetQuickSecurity(5324,1);
      SetQuickSecurity(5329,1);
      SetQuickSecurity(5330,1);
      SetQuickSecurity(5331,1);
      SetQuickSecurity(5400,1);
      SetQuickSecurity(5402,1);
      SetQuickSecurity(5408,1);
      SetQuickSecurity(5433,1);
      SetQuickSecurity(5460,1);
      SetQuickSecurity(5468,1);
      SetQuickSecurity(5481,1);
      SetQuickSecurity(5500,1);
      SetQuickSecurity(5503,1);
      SetQuickSecurity(5525,1);
      SetQuickSecurity(5531,1);
      SetQuickSecurity(5603,1);
      SetQuickSecurity(5604,1);
      SetQuickSecurity(5605,1);
      SetQuickSecurity(5606,1);
      SetQuickSecurity(5607,1);
      SetQuickSecurity(5608,1);
      SetQuickSecurity(5609,1);
      SetQuickSecurity(5611,1);
      SetQuickSecurity(5612,1);
      SetQuickSecurity(5615,1);
      SetQuickSecurity(5619,1);
      SetQuickSecurity(5620,1);
      SetQuickSecurity(5622,1);
      SetQuickSecurity(5623,1);
      SetQuickSecurity(5626,1);
      SetQuickSecurity(5628,1);
      SetQuickSecurity(5630,1);
      SetQuickSecurity(5633,1);
      SetQuickSecurity(5634,1);
      SetQuickSecurity(5642,1);
      SetQuickSecurity(5643,1);
      SetQuickSecurity(5644,1);
      SetQuickSecurity(5645,1);
      SetQuickSecurity(5647,1);
      SetQuickSecurity(5648,1);
      SetQuickSecurity(5714,1);
      SetQuickSecurity(5719,1);
      SetQuickSecurity(5720,1);
      SetQuickSecurity(5721,1);
      SetQuickSecurity(5722,1);
      SetQuickSecurity(5723,1);
      SetQuickSecurity(5769,1);
      SetQuickSecurity(5771,1);
      SetQuickSecurity(5790,1);
      SetQuickSecurity(5800,1);
      SetQuickSecurity(5813,1);
      SetQuickSecurity(5814,1);
      SetQuickSecurity(5840,1);
      SetQuickSecurity(5845,1);
      SetQuickSecurity(5910,1);
      SetQuickSecurity(5911,1);
      SetQuickSecurity(5915,1);
      SetQuickSecurity(5916,1);
      SetQuickSecurity(5917,1);
      SetQuickSecurity(5918,1);
      SetQuickSecurity(5919,1);
      SetQuickSecurity(5920,1);
      SetQuickSecurity(5921,1);
      SetQuickSecurity(5928,1);
      SetQuickSecurity(5929,1);
      SetQuickSecurity(5943,1);
      SetQuickSecurity(5944,1);
      SetQuickSecurity(5945,1);
      SetQuickSecurity(5954,1);
      SetQuickSecurity(5955,1);
      SetQuickSecurity(5956,1);
      SetQuickSecurity(5957,1);
      SetQuickSecurity(5958,1);
      SetQuickSecurity(5966,1);
      SetQuickSecurity(5968,1);
      SetQuickSecurity(5973,1);
      SetQuickSecurity(5980,1);
      SetQuickSecurity(5981,1);
      SetQuickSecurity(5996,1);
      SetQuickSecurity(5997,1);
      SetQuickSecurity(5998,1);
      SetQuickSecurity(6080,1);
      SetQuickSecurity(6081,1);
      SetQuickSecurity(6082,1);
      SetQuickSecurity(6083,1);
      SetQuickSecurity(6084,1);
      SetQuickSecurity(6301,1);
      SetQuickSecurity(6303,1);
      SetQuickSecurity(6306,1);
      SetQuickSecurity(6307,1);
      SetQuickSecurity(6308,1);
      SetQuickSecurity(6309,1);
      SetQuickSecurity(6310,1);
      SetQuickSecurity(6502,1);
      SetQuickSecurity(6635,1);
      SetQuickSecurity(6721,1);
      SetQuickSecurity(7030,1);
      SetQuickSecurity(7110,1);
      SetQuickSecurity(7111,1);
      SetQuickSecurity(7112,1);
      SetQuickSecurity(7113,1);
      SetQuickSecurity(7114,1);
      SetQuickSecurity(7116,1);
      SetQuickSecurity(7118,1);
      SetQuickSecurity(7132,1);
      SetQuickSecurity(7153,1);
      SetQuickSecurity(7159,1);
      SetQuickSecurity(7300,1);
      SetQuickSecurity(7301,1);
      SetQuickSecurity(7303,1);
      SetQuickSecurity(7304,1);
      SetQuickSecurity(7305,1);
      SetQuickSecurity(7307,1);
      SetQuickSecurity(7308,1);
      SetQuickSecurity(7309,1);
      SetQuickSecurity(7310,1);
      SetQuickSecurity(7327,1);
      SetQuickSecurity(7328,1);
      SetQuickSecurity(7335,1);
      SetQuickSecurity(7336,1);
      SetQuickSecurity(7337,1);
      SetQuickSecurity(7338,1);
      SetQuickSecurity(7354,1);
      SetQuickSecurity(7380,1);
      SetQuickSecurity(7381,1);
      SetQuickSecurity(7500,1);
      SetQuickSecurity(7502,1);
      SetQuickSecurity(7504,1);
      SetQuickSecurity(7505,1);
      SetQuickSecurity(7600,1);
      SetQuickSecurity(7601,1);
      SetQuickSecurity(7602,1);
      SetQuickSecurity(7603,1);
      SetQuickSecurity(7700,1);
      SetQuickSecurity(7701,1);
      SetQuickSecurity(7702,1);
      SetQuickSecurity(7703,1);
      SetQuickSecurity(7710,1);
      SetQuickSecurity(8383,1);
      SetQuickSecurity(8451,1);
      SetQuickSecurity(8601,1);
      SetQuickSecurity(8602,1);
      SetQuickSecurity(8603,1);
      SetQuickSecurity(8610,1);
      SetQuickSecurity(8611,1);
      SetQuickSecurity(8612,1);
      SetQuickSecurity(8613,1);
      SetQuickSecurity(8614,1);
      SetQuickSecurity(8615,1);
      SetQuickSecurity(8616,1);
      SetQuickSecurity(8617,1);
      SetQuickSecurity(8618,1);
      SetQuickSecurity(8619,1);
      SetQuickSecurity(8620,1);
      SetQuickSecurity(8621,1);
      SetQuickSecurity(8622,1);
      SetQuickSecurity(8623,1);
      SetQuickSecurity(8624,1);
      SetQuickSecurity(8625,1);
      SetQuickSecurity(8626,1);
      SetQuickSecurity(8627,1);
      SetQuickSecurity(8628,1);
      SetQuickSecurity(8640,1);
      SetQuickSecurity(9000,2);
      SetQuickSecurity(9001,2);
      SetQuickSecurity(9002,2);
      SetQuickSecurity(9003,2);
      SetQuickSecurity(9004,2);
      SetQuickSecurity(9005,2);
      SetQuickSecurity(9006,2);
      SetQuickSecurity(9007,2);
      SetQuickSecurity(9008,2);
      SetQuickSecurity(9062,1);
      SetQuickSecurity(9176,1);
      SetQuickSecurity(9178,1);
      SetQuickSecurity(9179,1);
      SetQuickSecurity(9180,1);
      SetQuickSecurity(9181,1);
      SetQuickSecurity(9182,1);
      SetQuickSecurity(9183,1);
      SetQuickSecurity(9190,1);
      SetQuickSecurity(9191,1);
      SetQuickSecurity(9600,1);
      SetQuickSecurity(9610,1);
      SetQuickSecurity(9611,1);
      SetQuickSecurity(9650,1);
      SetQuickSecurity(9651,1);
      SetQuickSecurity(9800,1);
      SetQuickSecurity(9801,1);
      SetQuickSecurity(9802,1);
      SetQuickSecurity(9805,1);
      SetQuickSecurity(9999,1);
      SetQuickSecurity(10010,1);
      SetQuickSecurity(10011,1);
      SetQuickSecurity(10012,1);
      SetQuickSecurity(10015,1);
      SetQuickSecurity(10040,1);
      SetQuickSecurity(10100,1);
      SetQuickSecurity(10240,1);
      SetQuickSecurity(14012,1);
      SetQuickSecurity(14014,1);
      SetQuickSecurity(14020,1);
      SetQuickSecurity(99000750,1);
      SetQuickSecurity(99000751,1);
      SetQuickSecurity(99000752,1);
      SetQuickSecurity(99000753,1);
      SetQuickSecurity(99000754,1);
      SetQuickSecurity(99000756,1);
      SetQuickSecurity(99000757,1);
      SetQuickSecurity(99000758,1);
      SetQuickSecurity(99000760,1);
      SetQuickSecurity(99000761,1);
      SetQuickSecurity(99000762,1);
      SetQuickSecurity(99000763,1);
      SetQuickSecurity(99000764,1);
      SetQuickSecurity(99000765,1);
      SetQuickSecurity(99000770,1);
      SetQuickSecurity(99000771,1);
      SetQuickSecurity(99000772,1);
      SetQuickSecurity(99000773,1);
      SetQuickSecurity(99000774,1);
      SetQuickSecurity(99000775,1);
      SetQuickSecurity(99000776,1);
      SetQuickSecurity(99000777,1);
      SetQuickSecurity(99000778,1);
      SetQuickSecurity(99000779,1);
      SetQuickSecurity(99000780,1);
      SetQuickSecurity(99000781,1);
      SetQuickSecurity(99000782,1);
      SetQuickSecurity(99000783,1);
      SetQuickSecurity(99000784,1);
      SetQuickSecurity(99000785,1);
      SetQuickSecurity(99000786,1);
      SetQuickSecurity(99000788,1);
      SetQuickSecurity(99000802,1);
      SetQuickSecurity(99000803,1);
      SetQuickSecurity(99000805,1);
      SetQuickSecurity(99000829,1);
      SetQuickSecurity(99000830,1);
      SetQuickSecurity(99000853,1);
      SetQuickSecurity(99000875,1);
      SetQuickSecurity(99000880,1);
      SetQuickSecurity(2000000002,2);
      SetQuickSecurity(2000000003,2);
      SetQuickSecurity(2000000004,2);
      SetQuickSecurity(2000000005,2);
      SetQuickSecurity(2000000006,2);
      SetQuickSecurity(2000000053,2);
      SetQuickSecurity(2000000054,2);
      SetQuickSecurity(2000000061,2);
      SetQuickSecurity(2000000065,1);
      SetQuickSecurity(2000000066,1);
      SetQuickSecurity(2000000069,1);
      SetQuickSecurity(2000000071,1);
      SetQuickSecurity(2000000072,1);
      SetQuickSecurity(2000000074,1);
      SetQuickSecurity(2000000076,1);
      SetQuickSecurity(2000000078,1);
      SetQuickSecurity(2000000079,1);
      SetQuickSecurity(2000000081,1);
      SetQuickSecurity(2000000082,1);
      SetQuickSecurity(2000000107,1);
      SetQuickSecurity(2000000110,1);
      SetQuickSecurity(2000000111,1);
      SetQuickSecurity(2000000112,1);
      SetQuickSecurity(2000000114,1);
      SetQuickSecurity(2000000120,2);
      SetQuickSecurity(2000000121,1);
      SetQuickSecurity(2000000130,1);
      SetQuickSecurity(2000000144,1);
      SetQuickSecurity(2000000145,1);
      SetQuickSecurity(2000000146,1);
      SetQuickSecurity(2000000150,1);
      SetQuickSecurity(2000000151,1);
      SetQuickSecurity(2000000152,1);
      SetQuickSecurity(2000000153,1);
      SetQuickSecurity(2000000155,1);
      SetQuickSecurity(2000000156,1);
      SetQuickSecurity(2000000159,1);
      SetQuickSecurity(2000000160,1);
      SetQuickSecurity(2000000161,1);
      SetQuickSecurity(2000000162,1);
      SetQuickSecurity(2000000163,1);
      SetQuickSecurity(2000000165,1);
      SetQuickSecurity(2000000166,1);
      SetQuickSecurity(2000000168,1);
      SetQuickSecurity(2000000169,1);
      SetQuickSecurity(2000000173,1);
      SetQuickSecurity(2000000180,1);
      SetQuickSecurity(2000000181,1);
      SetQuickSecurity(2000000182,1);
      SetQuickSecurity(2000000183,1);
      SetQuickSecurity(2000000184,1);
      SetQuickSecurity(2000000185,1);
      SetQuickSecurity(2000000200,1);
      SetQuickSecurity(2000000203,1);

      FOR TableNo := 14123501 TO 14123999 DO
        IF TableNo IN
           [14123801,14123802,14123803,14123804,14123805,14123806,14123807,14123808,14123809,
            14123811,14123812,14123813,14123817,14123818,14123819]
        THEN
          SetQuickSecurity(TableNo,1)
        ELSE
          SetQuickSecurity(TableNo,2);

      FOR TableNo := 37079301 TO 37079350 DO
        SetQuickSecurity(TableNo,2);

      IF ShowStatus THEN
        MESSAGE(Text025);
    END;

    PROCEDURE SetQuickSecurity@1240520020(TableNo@1240520001 : Integer;NewValue@1240520002 : Integer);
    VAR
      ESObjectProperty@1240520003 : Record 14123522;
      ESObjectInfo@1240520004 : Record 14123509;
    BEGIN
      IF ESObjectProperty.GET(ESObjectProperty."Object Type"::TableData,TableNo) THEN BEGIN
        ESObjectProperty."Quick Security Type" := NewValue;
        ESObjectProperty.MODIFY(TRUE);
      END ELSE
        IF ESObjectInfo.GET(ESObjectInfo."Object Type"::TableData,TableNo) THEN BEGIN
          ESObjectProperty.INIT;
          ESObjectProperty."Object Type" := ESObjectInfo."Object Type";
          ESObjectProperty."Object ID" := ESObjectInfo."Object ID";
          ESObjectProperty."Quick Security Type" := NewValue;
          ESObjectProperty.SetNoComment(NOT ESSecuritySetup."Detailed Comments");
          ESObjectProperty.INSERT(TRUE);
        END;
    END;

    PROCEDURE TestExport@1240520001(ShowStatus@1240520005 : Boolean);
    VAR
      Object@1240520002 : Record 2000000001;
      ESObjectProperty@1240520003 : Record 14123522;
      ESObjectProperty2@1240520009 : Record 14123522;
      ESObjectPropertyTmp@1240520011 : TEMPORARY Record 14123522;
      Window@1240520004 : Dialog;
      TempFile@1240520010 : File;
      ExportedObjects@1240520006 : Integer;
      ErrorObjects@1240520007 : Integer;
      TempFilePath@1240520008 : Text[250];
      ESSecuritySetupExist@1240520012 : Boolean;
    BEGIN
      IF ESSecuritySetup.GET THEN BEGIN
        ESSecuritySetupExist := TRUE;
        ESSecuritySetup.TestPublishCompany;
      END;

      TempFile.CREATETEMPFILE;
      TempFilePath := TempFile.NAME;
      TempFile.CLOSE;

      WHILE COPYSTR(TempFilePath,STRLEN(TempFilePath)) <> '\' DO
        TempFilePath := COPYSTR(TempFilePath,1,STRLEN(TempFilePath) - 1);

      IF GUIALLOWED THEN
        Window.OPEN(
          Text001 +
          '#1############################');

      Object.RESET;
      Object.SETRANGE(Type,Object.Type::Table,Object.Type::Query);
      Object.SETRANGE(ID,1,1999999999);
      IF Object.FIND('-') THEN
        REPEAT
          IF GUIALLOWED THEN
            Window.UPDATE(1,STRSUBSTNO('%1 %2 %3',Object.Type,Object.ID,Object.Name));

          IF (Object.Type <> Object.Type::Table) OR (Object.ID <> DATABASE::"ES Object Property") THEN BEGIN
            ESObjectProperty2."Object Type" := Object.Type;
            ESObjectProperty2."Object ID" := Object.ID;
            ESObjectProperty2."Export Error" := TempFilePath;

            IF CODEUNIT.RUN(CODEUNIT::"ES Export Object Test",ESObjectProperty2) THEN BEGIN
              ExportedObjects := ExportedObjects + 1;

              IF ESObjectProperty.GET(Object.Type,Object.ID) THEN
                IF ESObjectProperty."Export Error" <> '' THEN BEGIN
                  ESObjectProperty."Export Error" := '';
                  ESObjectPropertyTmp := ESObjectProperty;
                END;
            END ELSE BEGIN
              ErrorObjects := ErrorObjects + 1;

              IF ESObjectProperty.GET(Object.Type,Object.ID) THEN BEGIN
                ESObjectProperty."Export Error" :=
                  COPYSTR(GETLASTERRORTEXT,1,MAXSTRLEN(ESObjectProperty."Export Error"));
                ESObjectPropertyTmp := ESObjectProperty;
                ESObjectPropertyTmp.INSERT;
              END ELSE BEGIN
                ESObjectProperty.INIT;
                ESObjectProperty."Object Type" := Object.Type;
                ESObjectProperty."Object ID" := Object.ID;
                ESObjectProperty."Export Error" :=
                  COPYSTR(GETLASTERRORTEXT,1,MAXSTRLEN(ESObjectProperty."Export Error"));
                IF ESSecuritySetupExist THEN BEGIN
                  CASE ESObjectProperty."Object Type" OF
                    ESObjectProperty."Object Type"::Table:
                      ESObjectProperty."Object Level Permissions" :=
                        ESSecuritySetup."Limit All Tables";
                    ESObjectProperty."Object Type"::"2":
                      ESObjectProperty."Object Level Permissions" :=
                        ESSecuritySetup."Limit All Forms";
                    ESObjectProperty."Object Type"::Report:
                      ESObjectProperty."Object Level Permissions" :=
                        ESSecuritySetup."Limit All Reports";
                    ESObjectProperty."Object Type"::"4":
                      ESObjectProperty."Object Level Permissions" :=
                        ESSecuritySetup."Limit All Dataports";
                    ESObjectProperty."Object Type"::Codeunit:
                      ESObjectProperty."Object Level Permissions" :=
                        ESSecuritySetup."Limit All Codeunits";
                    ESObjectProperty."Object Type"::XMLport:
                      ESObjectProperty."Object Level Permissions" :=
                        ESSecuritySetup."Limit All XMLPorts";
                    ESObjectProperty."Object Type"::Page:
                      ESObjectProperty."Object Level Permissions" :=
                        ESSecuritySetup."Limit All Pages";
                    ESObjectProperty."Object Type"::Query:
                      ESObjectProperty."Object Level Permissions" :=
                        ESSecuritySetup."Limit All Queries";
                  END;
                END;
                ESObjectPropertyTmp := ESObjectProperty;
                ESObjectPropertyTmp.INSERT;
              END;
            END;
          END;
        UNTIL Object.NEXT = 0;

      IF GUIALLOWED THEN
        Window.UPDATE(1,STRSUBSTNO(Text004,ESObjectProperty.TABLECAPTION));

      IF ESObjectPropertyTmp.FIND('-') THEN
        REPEAT
          ESObjectProperty := ESObjectPropertyTmp;
          IF NOT ESObjectProperty.INSERT THEN
            ESObjectProperty.MODIFY;
        UNTIL ESObjectPropertyTmp.NEXT = 0;

      IF GUIALLOWED THEN
        Window.CLOSE;

      IF ShowStatus THEN
        MESSAGE(Text005,ExportedObjects,ErrorObjects);
    END;

    PROCEDURE CopyHistoryTableSetup@1240520015();
    VAR
      HistoryAndSecurityIntegr@1240520008 : Codeunit 14123507;
    BEGIN
      HistoryAndSecurityIntegr.CopyHistoryTableSetup;
    END;

    PROCEDURE CheckHistoryAndSecurity@1240520008(TableID@1240520008 : Integer);
    VAR
      ESObjectProperty@1240520009 : Record 14123522;
    BEGIN
      ESObjectProperty.RESET;
      ESObjectProperty.SETCURRENTKEY("History Table ID");
      ESObjectProperty.SETRANGE("History Table ID",TableID);
      ESObjectProperty.SETRANGE("Object Type",ESObjectProperty."Object Type"::Table);
      ESObjectProperty.SETFILTER("Object ID",'<>%1',"Object ID");
      IF ESObjectProperty.FIND('-') THEN
        ESObjectProperty.TESTFIELD("History Table ID",0);

      ESObjectProperty.RESET;
      ESObjectProperty.SETCURRENTKEY("Security Table ID");
      ESObjectProperty.SETRANGE("Security Table ID",TableID);
      ESObjectProperty.SETRANGE("Object Type",ESObjectProperty."Object Type"::Table);
      ESObjectProperty.SETFILTER("Object ID",'<>%1',"Object ID");
      IF ESObjectProperty.FIND('-') THEN
        ESObjectProperty.TESTFIELD("Security Table ID",0);
    END;

    PROCEDURE RunObject@1240520003(ObjectType@1240520001 : Integer;ObjectID@1240520002 : Integer);
    VAR
      AllObj@1240520004 : Record 2000000038;
      ESObjectProperty@1240520003 : Record 14123522;
    BEGIN
      AllObj.GET(ObjectType,ObjectID);

      CASE TRUE OF
        (ObjectType = "Object Type"::"2") AND NOT ISSERVICETIER:
          IF NOT ISSERVICETIER THEN
            PAGE.RUNMODAL(ObjectID);
        ObjectType = "Object Type"::Report:
          REPORT.RUNMODAL(ObjectID);
        (ObjectType = "Object Type"::Page) AND ISSERVICETIER:
          PAGE.RUNMODAL(ObjectID);
        ELSE BEGIN
          ESObjectProperty."Object Type" := ObjectType;
          ERROR(Text007,ESObjectProperty."Object Type",ObjectID);
        END;
      END;
    END;

    PROCEDURE RunCurrentObject@1240520004();
    BEGIN
      RunObject("Object Type","Object ID");
    END;

    PROCEDURE CountAccessClearCount@1240520006();
    VAR
      ESObjectProperty@1240520001 : Record 14123522;
    BEGIN
      ESObjectProperty.RESET;
      ESObjectProperty.SETFILTER("Limited User Table Access",'<>%1',ESObjectProperty."Limited User Table Access"::" ");
      ESObjectProperty.FIND('-');

      ESObjectPropertyReadTmp.RESET;
      ESObjectPropertyReadTmp.DELETEALL;

      ESObjectPropertyWriteTmp.RESET;
      ESObjectPropertyWriteTmp.DELETEALL;
    END;

    PROCEDURE CountAccessAddTable@1240520007(TableID@1240520001 : Integer;ChangeAccess@1240520002 : Boolean);
    VAR
      ESObjectProperty@1240520003 : Record 14123522;
      ESObjectInformation@1240520004 : Record 14123509;
    BEGIN
      IF NOT ESObjectPropertyReadTmp.GET("Object Type"::TableData,TableID) THEN
        IF ESObjectProperty.GET("Object Type"::TableData,TableID) THEN BEGIN
          ESObjectPropertyReadTmp := ESObjectProperty;
          ESObjectPropertyReadTmp.INSERT;
        END ELSE BEGIN
          IF ESObjectInformation.GET(ESObjectInformation."Object Type"::TableData,TableID) THEN BEGIN
            ESObjectPropertyReadTmp.INIT;
            ESObjectPropertyReadTmp."Object Type" := ESObjectInformation."Object Type";
            ESObjectPropertyReadTmp."Object ID" := ESObjectInformation."Object ID";
            ESObjectPropertyReadTmp.INSERT;
          END;
        END;

      IF ChangeAccess THEN
        IF NOT ESObjectPropertyWriteTmp.GET("Object Type"::TableData,TableID) THEN
          IF ESObjectProperty.GET("Object Type"::TableData,TableID) THEN BEGIN
            ESObjectPropertyWriteTmp := ESObjectProperty;
            ESObjectPropertyWriteTmp.INSERT;
        END ELSE BEGIN
          IF ESObjectInformation.GET(ESObjectInformation."Object Type"::TableData,TableID) THEN BEGIN
            ESObjectPropertyWriteTmp.INIT;
            ESObjectPropertyWriteTmp."Object Type" := ESObjectInformation."Object Type";
            ESObjectPropertyWriteTmp."Object ID" := ESObjectInformation."Object ID";
            ESObjectPropertyWriteTmp.INSERT;
          END;
        END;
    END;

    PROCEDURE CountAccessMessage@1240520005();
    VAR
      Counter@1240520005 : Integer;
      ReadCount@1240520003 : ARRAY [3] OF Integer;
      WriteCount@1240520002 : ARRAY [3] OF Integer;
      TablesText@1240520001 : ARRAY [3] OF Text[150];
      TablesTextFull@1240520004 : ARRAY [3] OF Boolean;
    BEGIN
      ESObjectPropertyReadTmp.RESET;
      IF ESObjectPropertyReadTmp.FIND('-') THEN
        REPEAT
          CASE ESObjectPropertyReadTmp."Limited User Table Access" OF
            ESObjectPropertyReadTmp."Limited User Table Access"::" ":
              Counter := 1;
            ESObjectPropertyReadTmp."Limited User Table Access"::Included:
              Counter := 2;
            ESObjectPropertyReadTmp."Limited User Table Access"::Excluded:
              Counter := 3;
            ELSE
              Counter := 0;
          END;

          IF Counter > 0 THEN
            ReadCount[Counter] := ReadCount[Counter] + 1;
        UNTIL ESObjectPropertyReadTmp.NEXT = 0;

      ESObjectPropertyWriteTmp.RESET;
      IF ESObjectPropertyWriteTmp.FIND('-') THEN
        REPEAT
          CASE ESObjectPropertyWriteTmp."Limited User Table Access" OF
            ESObjectPropertyWriteTmp."Limited User Table Access"::" ":
              Counter := 1;
            ESObjectPropertyWriteTmp."Limited User Table Access"::Included:
              Counter := 2;
            ESObjectPropertyWriteTmp."Limited User Table Access"::Excluded:
              Counter := 3;
          END;

          IF Counter > 0 THEN BEGIN
            WriteCount[Counter] := WriteCount[Counter] + 1;

            IF NOT TablesTextFull[Counter] THEN BEGIN
              ESObjectPropertyWriteTmp.CALCFIELDS("Object Caption");
              IF STRLEN(TablesText[Counter]) >=
                 MAXSTRLEN(TablesText[Counter]) -
                 (STRLEN(FORMAT(ESObjectPropertyWriteTmp."Object ID")) +
                 STRLEN(ESObjectPropertyWriteTmp."Object Caption") + 9)
              THEN BEGIN
                TablesText[Counter] := TablesText[Counter] + '...';
                TablesTextFull[Counter] := TRUE;
              END ELSE BEGIN
                IF TablesText[Counter] <> '' THEN
                  TablesText[Counter] := TablesText[Counter] + ', ';
                TablesText[Counter] :=
                  TablesText[Counter] +
                  STRSUBSTNO(
                    '%1 "%2"',ESObjectPropertyWriteTmp."Object ID",
                    ESObjectPropertyWriteTmp."Object Caption");
              END;
            END;
          END;
        UNTIL ESObjectPropertyWriteTmp.NEXT = 0;

      MESSAGE(
        Text008 + Text009 + Text010 + Text011 + Text012,
        ReadCount[1] + ReadCount[2] + ReadCount[3],
        TablesText[1],TablesText[2],TablesText[3],
        WriteCount[1] + WriteCount[2] + WriteCount[3],
        WriteCount[1],WriteCount[2],WriteCount[3]);
    END;

    PROCEDURE InsertAllTableData@1240520014(ShowStatus@1240520003 : Boolean);
    VAR
      ESObjectInfo@1240520001 : Record 14123509;
      ESObjectProperty@1240520002 : Record 14123522;
      InsertedRecords@1240520004 : Integer;
    BEGIN
      ESObjectInfo.RESET;
      ESObjectInfo.SETRANGE("Object Type",ESObjectInfo."Object Type"::Table);
      IF ESObjectInfo.FIND('-') THEN
        REPEAT
          IF NOT ESObjectProperty.GET(
                   ESObjectProperty."Object Type"::TableData,ESObjectInfo."Object ID")
          THEN BEGIN
            ESObjectProperty.INIT;
            ESObjectProperty."Object Type" := ESObjectProperty."Object Type"::TableData;
            ESObjectProperty."Object ID" := ESObjectInfo."Object ID";
            ESObjectProperty.INSERT(TRUE);

            InsertedRecords := InsertedRecords + 1;
          END;
        UNTIL ESObjectInfo.NEXT = 0;

      IF ShowStatus THEN
        MESSAGE(Text013,InsertedRecords,ESObjectProperty.TABLECAPTION);
    END;

    PROCEDURE ExportMultipleObjectProperties@1240520019(VAR ESObjectProperty@1240520004 : Record 14123522;ShowStatus@1240520021 : Boolean;ExportFileName@1240520001 : Text[250]);
    VAR
      ESEnterFileName@1240520002 : Page 14123560;
      FileMgt@1000 : Codeunit 419;
      TempServerFile@1001 : File;
      TempServerFileName@1002 : Text[1000];
      TotalRecords@1240520008 : Integer;
      TotalCodes@1240520003 : Integer;
      Window@1240520005 : Dialog;
    BEGIN
      IF ExportFileName = '' THEN BEGIN
        CLEAR(ESEnterFileName);
        ESEnterFileName.LOOKUPMODE(TRUE);
        ESEnterFileName.SelectNewFile(TRUE);
        IF ESEnterFileName.RUNMODAL <> ACTION::LookupOK THEN
          ERROR(Text021);
        ExportFileName := ESEnterFileName.GetFileName;
      END;

      TempServerFile.WRITEMODE(TRUE);
      TempServerFile.TEXTMODE(TRUE);
      TempServerFile.CREATETEMPFILE;
      TempServerFileName := TempServerFile.NAME;
      TempServerFile.CLOSE;

      IF GUIALLOWED THEN
        Window.OPEN(STRSUBSTNO(ESSecuritySetup.ExtendProgressText(Text035),TABLECAPTION) + Text036);

      IF ESObjectProperty.FIND('-') THEN
        REPEAT
          ESObjectProperty.CALCFIELDS("Object Caption");
          Window.UPDATE(
            1,
            STRSUBSTNO(
              '%1 %2 %3',ESObjectProperty."Object Type",ESObjectProperty."Object ID",
              ESObjectProperty."Object Caption"));

          TotalCodes := TotalCodes + 1;

          TotalRecords :=
            TotalRecords +
            ESObjectProperty.ExportObjectProperties(FALSE,FALSE,TRUE,TRUE,TempServerFileName);
        UNTIL ESObjectProperty.NEXT = 0;

      IF GUIALLOWED THEN
        Window.UPDATE(1,Text101);
      FileMgt.DownloadToFile(TempServerFileName,ExportFileName);

      IF GUIALLOWED THEN
        Window.CLOSE;

      IF ShowStatus THEN
        MESSAGE(
          Text027,
          TotalCodes,TABLECAPTION,ExportFileName,TotalRecords);
    END;

    PROCEDURE ExportObjectProperties@1240520018(ShowStatus@1240520021 : Boolean;ShowDialog@1240520004 : Boolean;ConfirmOverwrite@1240520020 : Boolean;AppendToFile@1240520001 : Boolean;ExportFileName@1240520002 : Text[1000]) : Integer;
    VAR
      ESEnterFileName@1240520003 : Page 14123560;
      FileMgt@1000 : Codeunit 419;
      Window@1240520009 : Dialog;
      OutputFile@1240520019 : File;
      Value@1240520022 : ARRAY [100] OF Text[1000];
      LocalFileName@1001 : Text[250];
      TotalRecords@1240520008 : Integer;
    BEGIN
      IF NOT AppendToFile THEN BEGIN
        IF ExportFileName = '' THEN BEGIN
          CLEAR(ESEnterFileName);
          ESEnterFileName.LOOKUPMODE(TRUE);
          ESEnterFileName.SelectNewFile(TRUE);
          IF ESEnterFileName.RUNMODAL <> ACTION::LookupOK THEN
            ERROR(Text021);
          ExportFileName := ESEnterFileName.GetFileName;
        END;

        IF ConfirmOverwrite THEN
          IF EXISTS(ExportFileName) THEN
            IF NOT CONFIRM(Text033,FALSE,ExportFileName) THEN
              ERROR(Text034);

        LocalFileName := ExportFileName;
        OutputFile.WRITEMODE(TRUE);
        OutputFile.TEXTMODE(TRUE);
        OutputFile.CREATETEMPFILE;
        ExportFileName := OutputFile.NAME;
        OutputFile.CLOSE;
      END;

      IF GUIALLOWED AND ShowDialog THEN
        Window.OPEN(ESSecuritySetup.ExtendProgressText(Text035) + Text036);

      IF GUIALLOWED AND ShowDialog THEN
        Window.UPDATE(1,Text037);
      "Exported Date Time" := CREATEDATETIME(TODAY,TIME);
      MODIFY(TRUE);

      IF GUIALLOWED AND ShowDialog THEN
        Window.UPDATE(1,Text038);
      OutputFile.WRITEMODE(TRUE);
      OutputFile.TEXTMODE(TRUE);
      IF EXISTS(ExportFileName) AND AppendToFile THEN BEGIN
        OutputFile.OPEN(ExportFileName);
        OutputFile.SEEK(OutputFile.LEN);
      END ELSE
        OutputFile.CREATE(ExportFileName);

      CLEAR(ESFileMgt);
      ESFileMgt.SetDelimiters('~"','"~',',');

      CALCFIELDS("Object Caption");
      IF GUIALLOWED AND ShowDialog THEN
        Window.UPDATE(1,'HEADER');
      Value[1] := ESFileMgt.FormatInteger(0) +'V1';
      Value[2] := 'HEADER';
      Value[3] := STRSUBSTNO('%1 %2',"Object Type","Object ID");
      Value[4] := "Object Caption";
      Value[5] := USERID;
      Value[6] := ESFileMgt.FormatDate(TODAY);
      Value[7] := ESFileMgt.FormatTime(TIME);
      OutputFile.WRITE(ESFileMgt.FormatValues(Value,7));

      Value[1] := ESFileMgt.FormatInteger(DATABASE::"ES Object Property") + 'V2';
      Value[2] := ESFileMgt.FormatInteger("Object Type");
      Value[3] := ESFileMgt.FormatInteger("Object ID");
      Value[4] := ESFileMgt.FormatBoolean("Limited License Object");
      Value[5] := ESFileMgt.FormatInteger("Read Permission (License)");
      Value[6] := ESFileMgt.FormatInteger("Insert Permission (License)");
      Value[7] := ESFileMgt.FormatInteger("Modify Permission (License)");
      Value[8] := ESFileMgt.FormatInteger("Delete Permission (License)");
      Value[9] := ESFileMgt.FormatInteger("Execute Permission (License)");
      Value[10] := ESFileMgt.FormatBoolean("Object Level Permissions");
      Value[11] := "Created By User";
      Value[12] := ESFileMgt.FormatDateTime("Created Date Time");
      Value[13] := ESFileMgt.FormatInteger("History Table ID");
      Value[14] := ESFileMgt.FormatInteger("Security Table ID");
      Value[15] := ESFileMgt.FormatBoolean("Skip During Export");
      Value[16] := "Export Error";
      Value[17] := ESFileMgt.FormatBoolean("Security Filter Table");
      Value[18] := ESFileMgt.FormatInteger("Limited User Table Access");
      Value[19] := ESFileMgt.FormatInteger("Quick Security Type");
      Value[20] := ESFileMgt.FormatBoolean("Segregation of Duties");

      OutputFile.WRITE(ESFileMgt.FormatValues(Value,20));

      TotalRecords := TotalRecords + 1;

      IF GUIALLOWED AND ShowDialog THEN
        Window.UPDATE(1,'TOTALS');
      Value[1] := ESFileMgt.FormatInteger(0) + 'V1';
      Value[2] := 'TOTALS';
      Value[3] := STRSUBSTNO('%1 %2',"Object Type","Object ID");
      Value[4] := "Object Caption";
      Value[5] := USERID;
      Value[6] := ESFileMgt.FormatDate(TODAY);
      Value[7] := ESFileMgt.FormatTime(TIME);
      Value[8] := ESFileMgt.FormatInteger(TotalRecords);
      OutputFile.WRITE(ESFileMgt.FormatValues(Value,8));

      IF GUIALLOWED AND ShowDialog THEN
        Window.UPDATE(1,Text019);
      OutputFile.CLOSE;

      IF NOT AppendToFile THEN BEGIN
        IF GUIALLOWED AND ShowDialog THEN
          Window.UPDATE(1,Text101);
        FileMgt.DownloadToFile(ExportFileName,LocalFileName);
      END;

      IF GUIALLOWED AND ShowDialog THEN
        Window.CLOSE;

      IF ShowStatus THEN
        MESSAGE(
          Text020,
          STRSUBSTNO('%1 %2 %3',"Object Type","Object ID","Object Caption"),
          LocalFileName,TotalRecords);

      EXIT(TotalRecords);
    END;

    PROCEDURE ImportObjectProperties@1240520017(ShowStatus@1240520011 : Boolean;ImportFileName@1240520018 : Text[250];OverWriteExisting@1240520001 : Boolean);
    VAR
      ESObjectProperty@1240520015 : Record 14123522;
      ESObjectProperty2@1240520004 : Record 14123522;
      ESEnterFileName@1240520019 : Page 14123560;
      FileMgt@1000 : Codeunit 419;
      InputFile@1240520009 : File;
      Window@1240520012 : Dialog;
      TempText@1240520010 : Text[1000];
      Value@1240520008 : ARRAY [100] OF Text[1000];
      ServerFileName@1001 : Text[1000];
      NextUpdatePos@1240520022 : Integer;
      TotalRecords@1240520023 : Integer;
    BEGIN
      IF ImportFileName = '' THEN BEGIN
        CLEAR(ESEnterFileName);
        ESEnterFileName.LOOKUPMODE(TRUE);
        IF ESEnterFileName.RUNMODAL <> ACTION::LookupOK THEN
          ERROR(Text021);
        ImportFileName := ESEnterFileName.GetFileName;
      END;

      IF ImportFileName = '' THEN
        ERROR(Text014);

      ESSecuritySetup.GET;

      IF GUIALLOWED THEN
        Window.OPEN(
          STRSUBSTNO(ESSecuritySetup.ExtendProgressText(Text015),TABLECAPTION) +
          Text016 + '        @2@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      CLEAR(ESFileMgt);
      ESFileMgt.SetDelimiters('~"','"~',',');

      IF GUIALLOWED THEN
        Window.UPDATE(1,Text017);
      InputFile.WRITEMODE(FALSE);
      InputFile.TEXTMODE(TRUE);
      IF NOT InputFile.OPEN(ImportFileName) THEN BEGIN
        IF GUIALLOWED THEN
          Window.UPDATE(1,Text102);
        ServerFileName := FileMgt.UploadFileSilent(ImportFileName);
        IF GUIALLOWED THEN
          Window.UPDATE(1,Text017);

        IF NOT InputFile.OPEN(ServerFileName) THEN
          InputFile.OPEN(ImportFileName);
      END;
      WHILE InputFile.POS < InputFile.LEN DO BEGIN
        IF NextUpdatePos < InputFile.POS THEN BEGIN
          IF GUIALLOWED THEN
            Window.UPDATE(2,ROUND(10000 * (InputFile.POS / InputFile.LEN),1));
          NextUpdatePos := ROUND(InputFile.POS + InputFile.LEN / 500,1);
        END;

        InputFile.READ(TempText);
        ESFileMgt.SplitInValues(Value,TempText);

        CASE Value[1] OF
          '','0V1':
            ;
          '14123522V1','14123522V2':
            BEGIN
              ESObjectProperty.INIT;
              ESObjectProperty."Object Type" := ESFileMgt.EvaluateInteger(Value[2]);
              ESObjectProperty."Object ID" := ESFileMgt.EvaluateInteger(Value[3]);

              IF GUIALLOWED THEN
                Window.UPDATE(
                  1,STRSUBSTNO('%1 %2',ESObjectProperty."Object Type",ESObjectProperty."Object ID"));

              ESObjectProperty."Limited License Object" := ESFileMgt.EvaluateBoolean(Value[4]);
              ESObjectProperty."Read Permission (License)" := ESFileMgt.EvaluateInteger(Value[5]);
              ESObjectProperty."Insert Permission (License)" := ESFileMgt.EvaluateInteger(Value[6]);
              ESObjectProperty."Modify Permission (License)" := ESFileMgt.EvaluateInteger(Value[7]);
              ESObjectProperty."Delete Permission (License)" := ESFileMgt.EvaluateInteger(Value[8]);
              ESObjectProperty."Execute Permission (License)" := ESFileMgt.EvaluateInteger(Value[9]);
              ESObjectProperty."Object Level Permissions" := ESFileMgt.EvaluateBoolean(Value[10]);
              ESObjectProperty."Created By User" := Value[11];
              ESObjectProperty."Created Date Time" := ESFileMgt.EvaluateDateTime(Value[12]);
              ESObjectProperty."History Table ID" := ESFileMgt.EvaluateInteger(Value[13]);
              ESObjectProperty."Security Table ID" := ESFileMgt.EvaluateInteger(Value[14]);
              ESObjectProperty."Skip During Export" := ESFileMgt.EvaluateBoolean(Value[15]);
              ESObjectProperty."Export Error" := Value[16];
              ESObjectProperty."Security Filter Table" := ESFileMgt.EvaluateBoolean(Value[17]);
              ESObjectProperty."Limited User Table Access" := ESFileMgt.EvaluateInteger(Value[18]);
              IF Value[1] > '14123522V1' THEN BEGIN
                ESObjectProperty."Quick Security Type" := ESFileMgt.EvaluateInteger(Value[19]);
                ESObjectProperty."Segregation of Duties" := ESFileMgt.EvaluateBoolean(Value[20]);
              END;
              ESObjectProperty.SetNoInitObjectLevel(TRUE);

              ESObjectProperty."Imported Date Time" := CREATEDATETIME(TODAY,TIME);

              IF OverWriteExisting AND
                 ESObjectProperty2.GET(ESObjectProperty."Object Type",ESObjectProperty."Object ID")
              THEN BEGIN
                ESObjectProperty2.SetNoComment(NOT ESSecuritySetup."Detailed Comments");
                ESObjectProperty2.DELETE(TRUE);
              END;

              ESObjectProperty.SetNoComment(NOT ESSecuritySetup."Detailed Comments");
              ESObjectProperty.INSERT(TRUE);

              TotalRecords := TotalRecords + 1;
            END;
          ELSE
            ERROR(Text022,Value[1]);
        END;
      END;

      InputFile.CLOSE;
      IF ServerFileName <> '' THEN
        ERASE(ServerFileName);

      IF GUIALLOWED THEN
        Window.CLOSE;

      IF ShowStatus THEN
        MESSAGE(Text018,TotalRecords,ImportFileName);

      ESSecuritySetup.Comment(
        1,ESObjectProperty.TABLECAPTION + ': ' + STRSUBSTNO(Text018,TotalRecords,ImportFileName));
    END;

    PROCEDURE FormatAsTextLine@1240520042(ShortPermissionText@1240520013 : Boolean;VAR ESTextLine@1240520011 : Record 14123520;NoOfRelatedKeyFields@1240520009 : Integer;CalcFlowFields@1240520012 : Boolean;UserDateTimeDetails@1240520008 : Boolean) : Boolean;
    VAR
      ESFormatMgt@1240520014 : Codeunit 14123505;
      RecRef@1240520010 : RecordRef;
    BEGIN
      ESFormatMgt.NewRecord(
        TABLECAPTION,FORMAT("Object Type"),FORMAT("Object ID"),'','','','','','','','',2,
        NoOfRelatedKeyFields);
      IF NOT ShortPermissionText THEN BEGIN
        ESFormatMgt.AddField(FIELDCAPTION(
          "Read Permission (License)"),FORMAT("Read Permission (License)"));
        ESFormatMgt.AddField(FIELDCAPTION(
          "Insert Permission (License)"),FORMAT("Insert Permission (License)"));
        ESFormatMgt.AddField(FIELDCAPTION(
          "Modify Permission (License)"),FORMAT("Modify Permission (License)"));
        ESFormatMgt.AddField(FIELDCAPTION(
          "Delete Permission (License)"),FORMAT("Delete Permission (License)"));
        ESFormatMgt.AddField(FIELDCAPTION(
          "Execute Permission (License)"),FORMAT("Execute Permission (License)"));
      END ELSE
        ESFormatMgt.AddField(Text003,FormatPermissionLicenseString);
      IF "Limited License Object" THEN
        ESFormatMgt.AddField(FIELDCAPTION("Limited License Object"),FORMAT("Limited License Object"));
      IF "Object Level Permissions" THEN
        ESFormatMgt.AddField(
          FIELDCAPTION("Object Level Permissions"),FORMAT("Object Level Permissions"));
      IF "Quick Security Type" <> 0 THEN
        ESFormatMgt.AddField(
          FIELDCAPTION("Quick Security Type"),FORMAT("Quick Security Type"));
      IF "Segregation of Duties" THEN
        ESFormatMgt.AddField(
          FIELDCAPTION("Segregation of Duties"),FORMAT("Segregation of Duties"));

      IF UserDateTimeDetails THEN BEGIN
        ESFormatMgt.AddField(FIELDCAPTION("Created By User"),FORMAT("Created By User"));
        IF "Created Date Time" <> 0DT THEN
          ESFormatMgt.AddField(FIELDCAPTION("Created Date Time"),FORMAT("Created Date Time"));
      END;

      IF CalcFlowFields THEN BEGIN
        CALCFIELDS(
          "Object Caption","Source/DataItem Table ID","Role Permissions",
          "Read Role Permissions","Insert Role Permissions","Modify Role Permissions",
          "Delete Role Permissions","Execute Role Permissions","Recording Permissions",
          "Role Builder Permissions");

        ESFormatMgt.AddFlowField(FIELDCAPTION("Object Caption"),FORMAT("Object Caption"));
        IF "Source/DataItem Table ID" <> 0 THEN
          ESFormatMgt.AddFlowField(
            FIELDCAPTION("Source/DataItem Table ID"),FORMAT("Source/DataItem Table ID"));
        IF "Role Permissions" <> 0 THEN
          ESFormatMgt.AddFlowField(FIELDCAPTION("Role Permissions"),FORMAT("Role Permissions"));
        IF "Read Role Permissions" <> 0 THEN
          ESFormatMgt.AddFlowField(
            FIELDCAPTION("Read Role Permissions"),FORMAT("Read Role Permissions"));
        IF "Insert Role Permissions" <> 0 THEN
          ESFormatMgt.AddFlowField(
            FIELDCAPTION("Insert Role Permissions"),FORMAT("Insert Role Permissions"));
        IF "Modify Role Permissions" <> 0 THEN
          ESFormatMgt.AddFlowField(
            FIELDCAPTION("Modify Role Permissions"),FORMAT("Modify Role Permissions"));
        IF "Delete Role Permissions" <> 0 THEN
          ESFormatMgt.AddFlowField(
            FIELDCAPTION("Delete Role Permissions"),FORMAT("Delete Role Permissions"));
        IF "Execute Role Permissions" <> 0 THEN
          ESFormatMgt.AddFlowField(
            FIELDCAPTION("Execute Role Permissions"),FORMAT("Execute Role Permissions"));
        IF "Recording Permissions" <> 0 THEN
          ESFormatMgt.AddFlowField(
            FIELDCAPTION("Recording Permissions"),FORMAT("Recording Permissions"));
        IF "Role Builder Permissions" <> 0 THEN
          ESFormatMgt.AddFlowField(
            FIELDCAPTION("Role Builder Permissions"),FORMAT("Role Builder Permissions"));
      END;

      RecRef.OPEN(DATABASE::"ES Object Property");
      RecRef.GETTABLE(Rec);
      ESFormatMgt.FormatNewESTextLine(ESTextLine,DATABASE::"ES Object Property",RecRef.RECORDID);

      EXIT(ESFormatMgt.NoTextOverflow);
    END;

    PROCEDURE SetNoComment@1240520024(NewValue@1240520001 : Boolean);
    BEGIN
      NoComment := NewValue;
    END;

    PROCEDURE Comment@1240520009(FunctionNo@1240520008 : ' ,Insert,Show,Exist,DeleteAll';NewText@1240520010 : Text[250]) : Boolean;
    VAR
      ESComment@1240520009 : Record 14123524;
    BEGIN
      ESComment.RESET;
      ESComment.SETRANGE("Table ID",DATABASE::"ES Object Property");
      ESComment.SETRANGE(Type,"Object Type");
      ESComment.SETRANGE("Object ID","Object ID");
      EXIT(ESComment.Functions(FunctionNo,NewText));
    END;

    BEGIN
    END.
  }
}

