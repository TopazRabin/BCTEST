OBJECT Table 14000822 Bill of Lading
{
  OBJECT-PROPERTIES
  {
    Date=09/24/20;
    Time=[ 5:35:06 AM];
    Modified=Yes;
    Version List=SE0.60.18;
  }
  PROPERTIES
  {
    Permissions=TableData 36=rm;
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 GetShippingSetup;
                 ShippingSetup.TESTFIELD(ShippingSetup."Bill of Lading Nos.");
                 "No." := NoSeriesMgt.GetNextNo(ShippingSetup."Bill of Lading Nos.",WORKDATE,TRUE);
               END;

               TransferFromPackingStation;
             END;

    OnModify=BEGIN
               TESTFIELD(Released,FALSE);
             END;

    OnDelete=BEGIN
               SalesShipmentHeader.RESET;
               SalesShipmentHeader.SETCURRENTKEY("Bill of Lading No.");
               SalesShipmentHeader.SETRANGE("Bill of Lading No.","No.");
               IF SalesShipmentHeader.FIND('-') THEN
                 SalesShipmentHeader.TESTFIELD("Bill of Lading No.",'');

               PostedPackage.RESET;
               PostedPackage.SETCURRENTKEY("Bill of Lading No.");
               PostedPackage.SETRANGE("Bill of Lading No.","No.");
               IF PostedPackage.FIND('-') THEN
                 PostedPackage.TESTFIELD("Bill of Lading No.",'');

               TESTFIELD(Released,FALSE);

               BillOfLadingLine.RESET;
               BillOfLadingLine.SETCURRENTKEY(Type,"No.");
               BillOfLadingLine.SETFILTER(
                 Type,'%1|%2',
                 BillOfLadingLine.Type::"Bill of Lading",BillOfLadingLine.Type::"Bill of Lading (Released)");
               BillOfLadingLine.SETRANGE("No.","No.");
               IF BillOfLadingLine.FIND('-') THEN
                 ERROR(Text019,TABLECAPTION,BillOfLadingLine."Bill of Lading No.");

               BillOfLadingLine.RESET;
               BillOfLadingLine.SETRANGE("Bill of Lading No.","No.");
               BillOfLadingLine.DELETEALL(TRUE);

               BillOfLadingInfoLine.RESET;
               BillOfLadingInfoLine.SETRANGE("Bill of Lading No.","No.");
               BillOfLadingInfoLine.DELETEALL(TRUE);

               BillOfLadingSummaryLine.RESET;
               BillOfLadingSummaryLine.SETRANGE("Bill of Lading No.","No.");
               BillOfLadingSummaryLine.DELETEALL;

               GetShippingSetup;
               IF ShippingSetup."Enable LTL Interface" THEN BEGIN
                 IF LTLWeightDistr.GET(LTLWeightDistr.Type::"Bill of Lading","No.") THEN
                   LTLWeightDistr.DELETE(TRUE);
               END;

               ShipperTypeMgt.BillOfLadingDelShipAgntOptPage(Rec);
             END;

    OnRename=BEGIN
               ERROR(Text001);
             END;

    CaptionML=ENU=Bill of Lading;
    LookupPageID=Page14000824;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=ENU=No. }
    { 11  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 12  ;   ;Released            ;Boolean       ;OnValidate=BEGIN
                                                                IF Released THEN BEGIN
                                                                  BillOfLadingLine.RESET;
                                                                  BillOfLadingLine.SETRANGE("Bill of Lading No.","No.");
                                                                  BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
                                                                  IF BillOfLadingLine.FIND('-') THEN
                                                                    ERROR(Text002,BillOfLadingLine.Type,TABLENAME);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Released;
                                                   Editable=No }
    { 13  ;   ;Ship-to No.         ;Code20        ;TableRelation=IF (Ship-to Type=CONST(Customer)) Customer
                                                                 ELSE IF (Ship-to Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Ship-to Type=CONST(Bank)) "Bank Account"
                                                                 ELSE IF (Ship-to Type=CONST(Prospect)) Contact
                                                                 ELSE IF (Ship-to Type=CONST(Resource)) Resource
                                                                 ELSE IF (Ship-to Type=CONST(Employee)) Employee
                                                                 ELSE IF (Ship-to Type=CONST(Location)) Location;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Released,FALSE);

                                                                IF "Ship-to No." <> xRec."Ship-to No." THEN
                                                                  "VICS Bill of Lading No." := '';

                                                                IF "Ship-to No." = '' THEN BEGIN
                                                                  "Ship-to Code" := '';
                                                                  "External Ship-to No." := '';
                                                                  "External Ship-to Code" := '';
                                                                  ClearShipToAddess;
                                                                END ELSE BEGIN
                                                                  CASE "Ship-to Type" OF
                                                                    "Ship-to Type"::Customer:
                                                                      BEGIN
                                                                        IF ("Ship-to Code" <> '') AND ShipToAddress.GET("Ship-to No.","Ship-to Code") THEN BEGIN
                                                                          TransferFromShipToAddress(ShipToAddress);
                                                                        END ELSE BEGIN
                                                                          "Ship-to Code" := '';
                                                                          Customer.GET("Ship-to No.");
                                                                          TransferFromCustomer(Customer);
                                                                        END;
                                                                      END;
                                                                    "Ship-to Type"::Vendor:
                                                                      BEGIN
                                                                        IF ("Ship-to Code" <> '') AND OrderAddress.GET("Ship-to No.","Ship-to Code") THEN BEGIN
                                                                          TransferFromOrderAddress(OrderAddress);
                                                                        END ELSE BEGIN
                                                                          "Ship-to Code" := '';
                                                                          Vendor.GET("Ship-to No.");
                                                                          TransferFromVendor(Vendor);
                                                                        END;
                                                                      END;
                                                                    "Ship-to Type"::Bank:
                                                                      BEGIN
                                                                        BankAccount.GET("Ship-to No.");
                                                                        TransferFromBankAccount(BankAccount);
                                                                      END;
                                                                    "Ship-to Type"::Prospect:
                                                                      BEGIN
                                                                        Prospect.GET("Ship-to No.");
                                                                        TransferFromProspect(Prospect);
                                                                      END;
                                                                    "Ship-to Type"::Resource:
                                                                      BEGIN
                                                                        Resource.GET("Ship-to No.");
                                                                        TransferFromResource(Resource);
                                                                      END;
                                                                    "Ship-to Type"::Employee:
                                                                      BEGIN
                                                                        Employee.GET("Ship-to No.");
                                                                        TransferFromEmployee(Employee);
                                                                      END;
                                                                    "Ship-to Type"::Location:
                                                                      BEGIN
                                                                        Location.GET("Ship-to No.");
                                                                        TransferFromLocation(Location);
                                                                      END;
                                                                  END;
                                                                END;

                                                                UpdateEDIASN;

                                                                IF "VICS Bill of Lading No." = '' THEN
                                                                  IF PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code") THEN
                                                                    IF PackingRule."Create VICS BOL No. on Close" THEN
                                                                      BillOfLadingMgt.CreateVicsBOLNo(Rec);
                                                              END;

                                                   CaptionML=ENU=Ship-to No. }
    { 14  ;   ;Ship-to Code        ;Code10        ;TableRelation=IF (Ship-to Type=CONST(Customer)) "Ship-to Address".Code WHERE (Customer No.=FIELD(Ship-to No.))
                                                                 ELSE IF (Ship-to Type=CONST(Vendor)) "Order Address".Code WHERE (Vendor No.=FIELD(Ship-to No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Released,FALSE);
                                                                TESTFIELD("Ship-to No.");

                                                                IF ("Ship-to Type" <> "Ship-to Type"::Customer) AND
                                                                   ("Ship-to Type" <> "Ship-to Type"::Vendor) AND
                                                                   ("Ship-to Type" <> "Ship-to Type"::Contact) AND
                                                                   ("Ship-to Code" <> '')
                                                                THEN
                                                                  ERROR(Text003,FIELDNAME("Ship-to Type"));

                                                                IF "Ship-to Code" <> xRec."Ship-to Code" THEN
                                                                  "VICS Bill of Lading No." := '';

                                                                IF "Ship-to Code" <> '' THEN BEGIN
                                                                  CASE "Ship-to Type" OF
                                                                    "Ship-to Type"::Customer:
                                                                      BEGIN
                                                                        ShipToAddress.GET("Ship-to No.","Ship-to Code");
                                                                        TransferFromShipToAddress(ShipToAddress);
                                                                      END;
                                                                    "Ship-to Type"::Vendor:
                                                                      BEGIN
                                                                        OrderAddress.GET("Ship-to No.","Ship-to Code");
                                                                        TransferFromOrderAddress(OrderAddress);
                                                                      END;
                                                                  END;
                                                                END ELSE
                                                                  VALIDATE("Ship-to No.");

                                                                UpdateEDIASN;

                                                                IF "VICS Bill of Lading No." = '' THEN
                                                                  IF PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code") THEN
                                                                    IF PackingRule."Create VICS BOL No. on Close" THEN
                                                                      BillOfLadingMgt.CreateVicsBOLNo(Rec);
                                                              END;

                                                   CaptionML=ENU=Ship-to Code }
    { 15  ;   ;Summary Released    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Summary Released" THEN
                                                                  TESTFIELD(Released);
                                                              END;

                                                   CaptionML=ENU=Summary Released;
                                                   Editable=No }
    { 16  ;   ;External Tracking No.;Code30       ;CaptionML=ENU=External Tracking No. }
    { 17  ;   ;Packing Date        ;Date          ;CaptionML=ENU=Packing Date }
    { 18  ;   ;Expected Delivery Date;Date        ;CaptionML=ENU=Expected Delivery Date }
    { 19  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Shipping Comment Line" WHERE (Table ID=CONST(14000822),
                                                                                                    Code=FIELD(No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 20  ;   ;Ship-to Type        ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Released,FALSE);

                                                                IF "Ship-to Type" <> xRec."Ship-to Type" THEN BEGIN
                                                                  VALIDATE("Ship-to No.",'');
                                                                  UpdateEDIASN;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Ship-to Type;
                                                   OptionCaptionML=ENU=Customer,Vendor,Bank,Prospect,Resource,Employee,Contact,Location;
                                                   OptionString=Customer,Vendor,Bank,Prospect,Resource,Employee,Contact,Location }
    { 21  ;   ;Posted Weight       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bill of Lading Line".Weight WHERE (Bill of Lading No.=FIELD(No.)));
                                                   CaptionML=ENU=Posted Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 22  ;   ;Posted Volume       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bill of Lading Line".Volume WHERE (Bill of Lading No.=FIELD(No.)));
                                                   CaptionML=ENU=Posted Volume;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 23  ;   ;Posted Value        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bill of Lading Line".Value WHERE (Bill of Lading No.=FIELD(No.)));
                                                   CaptionML=ENU=Posted Value;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 24  ;   ;Override Weight     ;Decimal       ;CaptionML=ENU=Override Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 25  ;   ;Override Volume     ;Decimal       ;CaptionML=ENU=Override Volume;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 26  ;   ;Override Value      ;Decimal       ;CaptionML=ENU=Override Value;
                                                   BlankZero=Yes }
    { 27  ;   ;Scale Weight        ;Decimal       ;CaptionML=ENU=Scale Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 28  ;   ;Calculation Weight  ;Decimal       ;CaptionML=ENU=Calculation Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 29  ;   ;Calculation Volume  ;Decimal       ;CaptionML=ENU=Calculation Volume;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 30  ;   ;Calculation Value   ;Decimal       ;CaptionML=ENU=Calculation Value;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 31  ;   ;Ship-to Name        ;Text50        ;CaptionML=ENU=Ship-to Name }
    { 32  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=ENU=Ship-to Name 2 }
    { 33  ;   ;Ship-to Address     ;Text50        ;CaptionML=ENU=Ship-to Address }
    { 34  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=ENU=Ship-to Address 2 }
    { 35  ;   ;Ship-to City        ;Text30        ;CaptionML=ENU=Ship-to City }
    { 36  ;   ;Ship-to Contact     ;Text50        ;CaptionML=ENU=Ship-to Contact }
    { 37  ;   ;Ship-to ZIP Code    ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Ship-to ZIP Code }
    { 38  ;   ;Ship-to State       ;Text30        ;CaptionML=ENU=Ship-to State }
    { 39  ;   ;Ship-to Country Code;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                IF "Ship-to Country Code"<> xRec."Ship-to Country Code" THEN
                                                                  IF "Shipping Agent Code" <> '' THEN BEGIN
                                                                    xRec."Shipping Agent Code" := '';
                                                                    VALIDATE("Shipping Agent Code");
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Ship-to Country Code }
    { 40  ;   ;Ship-to Phone No.   ;Text30        ;CaptionML=ENU=Ship-to Phone No. }
    { 41  ;   ;Ship-to Fax No.     ;Text30        ;CaptionML=ENU=Ship-to Fax No. }
    { 42  ;   ;External Ship-to No.;Code20        ;CaptionML=ENU=External Ship-to No. }
    { 43  ;   ;External Ship-to Code;Code20       ;CaptionML=ENU=External Ship-to Code }
    { 51  ;   ;Ship-from Name      ;Text50        ;CaptionML=ENU=Ship-from Name;
                                                   Editable=No }
    { 52  ;   ;Ship-from Name 2    ;Text50        ;CaptionML=ENU=Ship-from Name 2;
                                                   Editable=No }
    { 53  ;   ;Ship-from Address   ;Text50        ;CaptionML=ENU=Ship-from Address;
                                                   Editable=No }
    { 54  ;   ;Ship-from Address 2 ;Text50        ;CaptionML=ENU=Ship-from Address 2;
                                                   Editable=No }
    { 55  ;   ;Ship-from City      ;Text30        ;CaptionML=ENU=Ship-from City;
                                                   Editable=No }
    { 56  ;   ;Ship-from Contact   ;Text50        ;CaptionML=ENU=Ship-from Contact;
                                                   Editable=No }
    { 57  ;   ;Ship-from ZIP Code  ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Ship-from ZIP Code;
                                                   Editable=No }
    { 58  ;   ;Ship-from State     ;Text30        ;CaptionML=ENU=Ship-from State;
                                                   Editable=No }
    { 59  ;   ;Ship-from Country Code;Code10      ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Ship-from Country Code;
                                                   Editable=No }
    { 60  ;   ;Ship-from Phone No. ;Text30        ;CaptionML=ENU=Ship-from Phone No.;
                                                   Editable=No }
    { 61  ;   ;Ship-from Fax No.   ;Text30        ;CaptionML=ENU=Ship-from Fax No.;
                                                   Editable=No }
    { 71  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent".Code;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Released,FALSE);

                                                                IF ("Shipping Agent Code" <> xRec."Shipping Agent Code") AND
                                                                   (xRec."Shipping Agent Code" <> '')
                                                                THEN
                                                                  ShipperTypeMgt.BillOfLadingDelShipAgntOptPage(Rec);

                                                                IF "Shipping Agent Code" <> '' THEN BEGIN
                                                                  ShippingAgent.GET("Shipping Agent Code");
                                                                  "World Wide Service" :=
                                                                    ShippingAgentService.InternationalShipment(ShippingAgent,"Ship-to Country Code");
                                                                  GetPackingStation;
                                                                  ShipperTypeMgt.BillOfLadingValidateShipAgent(Rec,PackingStation,ShippingAgent);
                                                                END ELSE BEGIN
                                                                  "World Wide Service" := FALSE;
                                                                  "Shipping Agent Account No." := '';
                                                                END;

                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  IF "Shipping Agent Code" = '' THEN
                                                                    VALIDATE("Shipping Agent Service",'')
                                                                  ELSE BEGIN
                                                                    ShippingAgent.GET("Shipping Agent Code");
                                                                    CASE TRUE OF
                                                                      ShippingAgentService.InternationalShipment(ShippingAgent,"Ship-to Country Code"):
                                                                        VALIDATE("Shipping Agent Service",ShippingAgent."Def. Int. E-Ship Agent Service");
                                                                      ShippingAgentService.UPSCanadianShipment(ShippingAgent,"Ship-to Country Code"):
                                                                        VALIDATE("Shipping Agent Service",ShippingAgent."Def. UPS Can. E-Ship Agent Srv");
                                                                      ShippingAgentService.UPSPuertoRicoShipment(ShippingAgent,"Ship-to Country Code"):
                                                                        VALIDATE("Shipping Agent Service",ShippingAgent."Def. UPS PR E-Ship Agent Srv.");
                                                                      ELSE
                                                                        VALIDATE("Shipping Agent Service",ShippingAgent."Default E-Ship Agent Service");
                                                                    END;
                                                                  END;

                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
                                                                    VALIDATE("Third Party Ship. Account No.",'')
                                                                  ELSE
                                                                    IF ShippingAccount.GetPrimaryShippingAccountNo(
                                                                         "Shipping Agent Code","Ship-to Type","Ship-to No.","Ship-to Code")
                                                                    THEN
                                                                      VALIDATE("Third Party Ship. Account No.",ShippingAccount."Account No.")
                                                                    ELSE
                                                                      VALIDATE("Third Party Ship. Account No.",'');
                                                              END;

                                                   CaptionML=ENU=Shipping Agent Code }
    { 72  ;   ;World Wide Service  ;Boolean       ;CaptionML=ENU=World Wide Service;
                                                   Editable=No }
    { 73  ;   ;Shipping Agent Service;Code30      ;TableRelation="E-Ship Agent Service".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code),
                                                                                                    World Wide Service=FIELD(World Wide Service));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Released,FALSE);

                                                                IF "Shipping Agent Service" <> xRec."Shipping Agent Service" THEN
                                                                  ShipperTypeMgt.BillOfLadingDelShipAgntOptPage(Rec);

                                                                IF "Shipping Agent Service" <> '' THEN BEGIN
                                                                  IF NOT ShippingAgentService.GET(
                                                                           "Shipping Agent Code","Shipping Agent Service","World Wide Service")
                                                                  THEN
                                                                    ERROR(Text004);
                                                                  GetShippingAgent;
                                                                  IF ShippingAgentService.UPSCanadianShipment(ShippingAgent,"Ship-to Country Code") THEN
                                                                    ShippingAgentService.TESTFIELD("UPS Canadian Service");
                                                                  IF ShippingAgentService.UPSPuertoRicoShipment(ShippingAgent,"Ship-to Country Code") THEN
                                                                    ShippingAgentService.TESTFIELD("UPS Puerto Rico Service");
                                                                  IF ShippingAgentService.AirborneCanadianShipment(ShippingAgent,"Ship-to Country Code") THEN
                                                                    ShippingAgentService.TESTFIELD("Airborne Canadian Service");
                                                                  IF ShippingAgentService.AirbornePuertoRicoShipment(ShippingAgent,"Ship-to Country Code") THEN
                                                                    ShippingAgentService.TESTFIELD("Airborne Puerto Rico Service");

                                                                  "Service Indicator" := ShippingAgentService."Service Indicator";
                                                                  "Delivery Days" := ShippingAgentService."Delivery Days";
                                                                END ELSE BEGIN
                                                                  "Service Indicator" := '';
                                                                  "Delivery Days" := 0;
                                                                END;

                                                                IF EDIBillOfLadingCarrier.READPERMISSION THEN
                                                                  UpdateEDIBOL;
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Shipping Agent Code");
                                                              ShippingAgent.GET("Shipping Agent Code");
                                                              ShippingAgentService.RESET;
                                                              ShippingAgentService.SETRANGE("Shipping Agent Code",ShippingAgent.Code);
                                                              ShippingAgentService.SETRANGE("World Wide Service","World Wide Service");
                                                              IF ShippingAgentService.UPSCanadianShipment(ShippingAgent,"Ship-to Country Code") THEN
                                                                ShippingAgentService.SETRANGE("UPS Canadian Service",TRUE);
                                                              IF ShippingAgentService.UPSPuertoRicoShipment(ShippingAgent,"Ship-to Country Code") THEN
                                                                ShippingAgentService.SETRANGE("UPS Puerto Rico Service",TRUE);
                                                              IF ShippingAgentService.AirborneCanadianShipment(ShippingAgent,"Ship-to Country Code") THEN
                                                                ShippingAgentService.SETRANGE("Airborne Canadian Service",TRUE);
                                                              IF ShippingAgentService.AirbornePuertoRicoShipment(ShippingAgent,"Ship-to Country Code") THEN
                                                                ShippingAgentService.SETRANGE("Airborne Puerto Rico Service",TRUE);
                                                              IF PAGE.RUNMODAL(0,ShippingAgentService) = ACTION::LookupOK THEN
                                                                VALIDATE("Shipping Agent Service",ShippingAgentService.Code);
                                                            END;

                                                   CaptionML=ENU=Shipping Agent Service }
    { 74  ;   ;Shipping Agent Account No.;Code20  ;OnValidate=BEGIN
                                                                TESTFIELD(Released,FALSE);

                                                                IF "Shipping Agent Account No." <> '' THEN BEGIN
                                                                  TESTFIELD("Shipping Agent Code");
                                                                  GetShippingAgent;
                                                                  GetShippingSetup;
                                                                  ShipperTypeMgt.BillOfLadingValidateAcctNo(Rec,ShippingAgent,ShippingSetup);
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Shipping Agent Code");
                                                              GetShippingAgent;
                                                              GetShippingSetup;
                                                              ShipperTypeMgt.BillOfLadingLookupAcctNo(Rec,ShippingAgent,ShippingSetup);
                                                            END;

                                                   CaptionML=ENU=Shipping Agent Account No. }
    { 75  ;   ;Service Indicator   ;Code10        ;CaptionML=ENU=Service Indicator }
    { 76  ;   ;Delivery Days       ;Integer       ;CaptionML=ENU=Delivery Days;
                                                   Editable=No }
    { 77  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                IF "Location Code" <> xRec."Location Code" THEN BEGIN
                                                                  GetShippingSetup;

                                                                  IF ShippingSetup."Location Packing" THEN BEGIN
                                                                    BillOfLadingLine.RESET;
                                                                    BillOfLadingLine.SETRANGE("Bill of Lading No.","No.");
                                                                    IF BillOfLadingLine.FIND('-') THEN
                                                                      ERROR(Text005,FIELDNAME("Location Code"));
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 78  ;   ;Posted              ;Boolean       ;CaptionML=ENU=Posted;
                                                   Editable=No }
    { 79  ;   ;Override Insured Value;Decimal     ;CaptionML=ENU=Override Insured Value;
                                                   BlankZero=Yes }
    { 80  ;   ;Calculation Insured Value;Decimal  ;CaptionML=ENU=Calculation Insured Value;
                                                   BlankZero=Yes }
    { 81  ;   ;Shipping Charge     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Cost On Documents",FALSE);
                                                              END;

                                                   CaptionML=ENU=Shipping Charge;
                                                   BlankZero=Yes }
    { 82  ;   ;Shipping Cost       ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Cost On Documents",FALSE);

                                                                //TM BEG 070915
                                                                VALIDATE("Shipping Charge", "Shipping Cost");
                                                                //TM END 070915
                                                              END;

                                                   CaptionML=ENU=Shipping Cost;
                                                   BlankZero=Yes }
    { 83  ;   ;Manifest No.        ;Code20        ;TableRelation="Manifest Header";
                                                   CaptionML=ENU=Manifest No.;
                                                   Editable=No }
    { 84  ;   ;Pickup Date         ;Date          ;CaptionML=ENU=Pickup Date }
    { 85  ;   ;Cost On Documents   ;Boolean       ;OnValidate=BEGIN
                                                                IF xRec."Cost On Documents" AND NOT "Cost On Documents" AND
                                                                   (CurrFieldNo <> 0)
                                                                THEN
                                                                  MESSAGE(Text006);
                                                              END;

                                                   CaptionML=ENU=Cost On Documents }
    { 86  ;   ;VICS Bill of Lading No.;Code20     ;OnValidate=BEGIN
                                                                BillOfLadingMgt.FormatVicsBOLNoPrint(Rec);
                                                              END;

                                                   CaptionML=ENU=VICS Bill of Lading No. }
    { 87  ;   ;VICS Bill of Lading No.(Print);Code30;
                                                   CaptionML=ENU=VICS Bill of Lading No.(Print) }
    { 88  ;   ;Used on Bill of Lading No.;Code20  ;TableRelation="Bill of Lading".No.;
                                                   CaptionML=ENU=Used on Bill of Lading No.;
                                                   Editable=No }
    { 91  ;   ;Documents Exists    ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Bill of Lading Line" WHERE (Bill of Lading No.=FIELD(No.),
                                                                                                  Type=FILTER(Order),
                                                                                                  No.=FILTER(<>'')));
                                                   CaptionML=ENU=Documents Exists;
                                                   Editable=No }
    { 92  ;   ;Residential Delivery;Boolean       ;CaptionML=ENU=Residential Delivery }
    { 93  ;   ;Free Freight        ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT "Free Freight" THEN
                                                                  "No Free Freight Lines on Order" := FALSE;
                                                              END;

                                                   CaptionML=ENU=Free Freight }
    { 94  ;   ;No Free Freight Lines on Order;Boolean;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Free Freight");
                                                              END;

                                                   CaptionML=ENU=No Free Freight Lines on Order }
    { 97  ;   ;Shipping Payment Type;Option       ;OnValidate=BEGIN
                                                                IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
                                                                  VALIDATE("Third Party Ship. Account No.",'')
                                                                ELSE
                                                                  IF ShippingAccount.GetPrimaryShippingAccountNo(
                                                                       "Shipping Agent Code","Ship-to Type","Ship-to No.","Ship-to Code")
                                                                  THEN
                                                                    VALIDATE("Third Party Ship. Account No.",ShippingAccount."Account No.");
                                                              END;

                                                   CaptionML=ENU=Shipping Payment Type;
                                                   OptionCaptionML=ENU=Prepaid,Third Party,Freight Collect,Consignee;
                                                   OptionString=Prepaid,Third Party,Freight Collect,Consignee }
    { 98  ;   ;Third Party Ship. Account No.;Code20;
                                                   OnValidate=BEGIN
                                                                ShippingAccount."Shipping Agent Code" := "Shipping Agent Code";
                                                                ShippingAccount.TestShippingAccountNo("Third Party Ship. Account No.");

                                                                IF ("Third Party Ship. Account No." <> '') AND
                                                                   ("Shipping Payment Type" <> "Shipping Payment Type"::Prepaid)
                                                                THEN BEGIN
                                                                  CLEAR(ShippingAccount);

                                                                  IF NOT ShippingAccount.GET(
                                                                           "Ship-to Type","Ship-to No.","Ship-to Code",
                                                                           "Shipping Agent Code","Third Party Ship. Account No.")
                                                                  THEN BEGIN
                                                                    ShippingAccount.RESET;
                                                                    ShippingAccount.SETCURRENTKEY("Shipping Agent Code","Account No.");
                                                                    ShippingAccount.SETRANGE("Shipping Agent Code","Shipping Agent Code");
                                                                    ShippingAccount.SETRANGE("Account No.","Third Party Ship. Account No.");
                                                                    IF NOT ShippingAccount.FIND('-') THEN
                                                                      ;
                                                                  END;

                                                                  IF (ShippingAccount."Account No." <> '') AND
                                                                     ("Shipping Payment Type" <> "Shipping Payment Type"::Prepaid)
                                                                  THEN BEGIN
                                                                    "Shipping Insurance" := ShippingAccount."Shipping Insurance";

                                                                    VALIDATE("Shipping Agent Account No.");
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF ShippingAccount.LookupThirdPartyAccountNo(
                                                                   "Shipping Agent Code","Ship-to Type","Ship-to No.","Ship-to Code")
                                                              THEN
                                                                VALIDATE("Third Party Ship. Account No.",ShippingAccount.GetLookupAccountNo);
                                                            END;

                                                   CaptionML=ENU=Third Party Ship. Account No. }
    { 99  ;   ;Shipping Insurance  ;Option        ;OnValidate=BEGIN
                                                                IF "Shipping Insurance" <> xRec."Shipping Insurance" THEN
                                                                  VALIDATE("Shipping Agent Account No.");
                                                              END;

                                                   CaptionML=ENU=Shipping Insurance;
                                                   OptionCaptionML=ENU=" ,Never,Always";
                                                   OptionString=[ ,Never,Always] }
    { 100 ;   ;Insure Through Shipping Agent;Boolean;
                                                   CaptionML=ENU=Insure Through Shipping Agent;
                                                   Editable=No }
    { 101 ;   ;Custom Value 1      ;Code20        ;CaptionML=ENU=Custom Value 1 }
    { 102 ;   ;Custom Value 2      ;Code20        ;CaptionML=ENU=Custom Value 2 }
    { 103 ;   ;Custom Value 3      ;Code20        ;CaptionML=ENU=Custom Value 3 }
    { 104 ;   ;Custom Value 4      ;Code20        ;CaptionML=ENU=Custom Value 4 }
    { 105 ;   ;Custom Value 5      ;Code20        ;CaptionML=ENU=Custom Value 5 }
    { 111 ;   ;COD Payment         ;Boolean       ;OnValidate=BEGIN
                                                                IF "COD Payment" THEN BEGIN
                                                                  GetShippingSetup;
                                                                  GetShippingAgent;
                                                                  GetPackingStation;
                                                                  ShipperTypeMgt.BillOfLadingValidateCODPayment(Rec,PackingStation,ShippingAgent,ShippingSetup);
                                                                END ELSE BEGIN
                                                                  "COD Cashiers Check" := FALSE;
                                                                   "Add Shipping Charge to COD Amt" := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=COD Payment;
                                                   BlankZero=Yes }
    { 112 ;   ;COD Cashiers Check  ;Boolean       ;CaptionML=ENU=COD Cashiers Check }
    { 113 ;   ;COD Amount          ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Released,FALSE);

                                                                IF "COD Amount" <> 0 THEN
                                                                  TESTFIELD("COD Payment");
                                                              END;

                                                   CaptionML=ENU=COD Amount;
                                                   BlankZero=Yes }
    { 114 ;   ;Add Shipping Charge to COD Amt;Boolean;
                                                   CaptionML=ENU=Add Shipping Charge to COD Amt }
    { 115 ;   ;Seal No.            ;Code15        ;CaptionML=ENU=Seal No. }
    { 116 ;   ;Equipment No.       ;Code15        ;CaptionML=ENU=Equipment No. }
    { 117 ;   ;Equipment Initial   ;Code4         ;CaptionML=ENU=Equipment Initial }
    { 14000350;;EDI ASN Generated  ;Boolean       ;OnValidate=BEGIN
                                                                IF "EDI ASN Generated" AND NOT Posted THEN BEGIN
                                                                  PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code");
                                                                  IF PackingRule."Auto Post when ASN Send" THEN
                                                                    BillOfLadingMgt.PostBillOfLading(Rec,TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=EDI ASN Generated;
                                                   Editable=No }
    { 14000351;;EDI ASN Gen. Date  ;Date          ;CaptionML=ENU=EDI ASN Gen. Date;
                                                   Editable=No }
    { 14000352;;EDI ASN            ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("EDI BSN",FALSE);
                                                              END;

                                                   CaptionML=ENU=EDI ASN }
    { 14000353;;EDI Internal Doc. No.;Code10      ;CaptionML=ENU=EDI Internal Doc. No.;
                                                   Editable=No }
    { 14000354;;EDI 3PL Shipment ID;Code30        ;CaptionML=ENU=3PL Shipment ID }
    { 14000355;;EDI 3PL Bill of Lading No.;Code30 ;CaptionML=ENU=3PL Bill of Lading No. }
    { 14000356;;3PL Master Bill of Lading No.;Code30;
                                                   CaptionML=ENU=EDI 3PL Master Bill of Lading No. }
    { 14000357;;EDI BSN Generated  ;Boolean       ;OnValidate=BEGIN
                                                                IF "EDI BSN Generated" AND NOT Posted THEN BEGIN
                                                                  PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code");
                                                                  IF PackingRule."Auto Post when ASN Send" THEN
                                                                    BillOfLadingMgt.PostBillOfLading(Rec,TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=EDI BSN Generated;
                                                   Editable=No }
    { 14000358;;EDI BSN Gen. Date  ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD("EDI ASN",FALSE);
                                                              END;

                                                   CaptionML=ENU=EDI BSN Gen. Date;
                                                   Editable=No }
    { 14000359;;EDI BSN            ;Boolean       ;CaptionML=ENU=EDI BSN }
    { 14000360;;EDI Electronic BOL ;Boolean       ;CaptionML=ENU=EDI Electronic BOL }
    { 14000361;;EDI Electronic BOL Generated;Boolean;
                                                   CaptionML=ENU=EDI Electronic BOL Generated;
                                                   Editable=No }
    { 14000362;;EDI Electronic BOL Gen. Date;Date ;CaptionML=ENU=EDI Electronic BOL Gen. Date;
                                                   Editable=No }
    { 14000363;;EDI 3PL Bill of Lading;Boolean    ;CaptionML=ENU=EDI 3PL Bill of Lading;
                                                   Editable=No }
    { 14000364;;EDI Routing Request PUA;Text30    ;CaptionML=ENU=EDI Routing Request PUA }
    { 14000365;;EDI Routing Request Load ID;Text30;CaptionML=ENU=EDI Routing Request Load ID }
    { 14000366;;EDI Routing Req. Ship-to Code;Code20;
                                                   CaptionML=ENU=EDI Routing Req. Ship-to Code }
    { 14000367;;EDI Routing Request No.;Code20    ;CaptionML=ENU=EDI Routing Request No. }
    { 14000751;;Shipping Bill Verified;Boolean    ;CaptionML=ENU=Shipping Bill Verified;
                                                   Editable=No }
    { 14000752;;Shipping Bill Verified Date;Date  ;CaptionML=ENU=Shipping Bill Verified Date;
                                                   Editable=No }
    { 14000753;;Shipping Bill Amount;Decimal      ;CaptionML=ENU=Shipping Bill Amount;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 14000754;;Shipping Bill Weight;Decimal      ;CaptionML=ENU=Shipping Bill Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 14000755;;Shipping Bill Volume;Decimal      ;CaptionML=ENU=Shipping Bill Volume;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 14000756;;Shipping Bill Delivery Date;Date  ;CaptionML=ENU=Shipping Bill Delivery Date;
                                                   Editable=No }
    { 14000757;;Shipping Bill COD Amount;Decimal  ;CaptionML=ENU=Shipping Bill COD Amount;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 14000781;;FedEx Generated Package No.;Code10;CaptionML=ENU=FedEx Generated Package No. }
    { 14000901;;E-Mail Notification Handled;Boolean;
                                                   CaptionML=ENU=E-Mail Notification Handled }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Shipping Agent Code,Pickup Date,Shipping Bill Verified }
    {    ;EDI ASN                                  }
    {    ;Manifest No.                             }
    {    ;Released,Summary Released,Posted         }
    {    ;VICS Bill of Lading No.                  }
    {    ;EDI 3PL Shipment ID,EDI 3PL Bill of Lading No. }
    {    ;EDI Electronic BOL,EDI Electronic BOL Generated }
    {    ;EDI Internal Doc. No.                    }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Description,Shipping Agent Code,Shipping Agent Service }
  }
  CODE
  {
    VAR
      BillOfLadingLine@1000000000 : Record 14000823;
      BillOfLadingInfoLine@1240030000 : Record 14000827;
      BillOfLadingSummaryLine@1000000001 : Record 14000825;
      ShippingSetup@1000000002 : Record 14000707;
      ShippingAgent@1000000003 : Record 291;
      ShippingAgentService@1000000004 : Record 14000708;
      PackingStation@1000000009 : Record 14000709;
      Customer@1000000010 : Record 18;
      ShipToAddress@1000000011 : Record 222;
      Vendor@1000000012 : Record 23;
      OrderAddress@1000000013 : Record 224;
      BankAccount@1000000014 : Record 270;
      Prospect@1000000015 : Record 5050;
      Resource@1000000016 : Record 156;
      Employee@1000000017 : Record 5200;
      Location@1240030006 : Record 14;
      LTLWeightDistr@1000000022 : Record 14000807;
      PackingRule@1000000023 : Record 14000715;
      ShippingAccount@1240030001 : Record 14000714;
      SalesHeader@1240030002 : Record 36;
      SalesShipmentHeader@1240030003 : Record 110;
      PostedPackage@1240030004 : Record 14000704;
      Country@1240030008 : Record 9;
      EDIBillOfLadingCarrier@1240020000 : Record 14050901;
      NoSeriesMgt@1000000018 : Codeunit 396;
      BillOfLadingMgt@1240030005 : Codeunit 14000821;
      LabelMgt@1240030007 : Codeunit 14000841;
      ShipperTypeMgt@1240030011 : Codeunit 14000711;
      ShippingSetupRetrieved@1000000019 : Boolean;
      Text001@1001 : TextConst 'ENU=Cannot be renamed.';
      Text002@1002 : TextConst 'ENU=Lines of the type %1 must not exist when closing a %2.';
      Text003@1003 : TextConst 'ENU=%1 must be Customer or Vendor.';
      Text004@1004 : TextConst 'ENU=This is not a valid shipping agent service.';
      Text005@1005 : TextConst 'ENU=%1 cannot be changed when lines exists.';
      Text006@1006 : TextConst 'ENU=Shipping Charge added to documents must be deleted manually.';
      Text007@1007 : TextConst 'ENU=%1 %2 ships form multiple locations, Must be added on the Bill of Lading.';
      Text008@1008 : TextConst 'ENU=%1 %2 is already on Bill of Lading %3.';
      Text009@1009 : TextConst 'ENU="Bill of Lading %1 already exist for this Customer. "';
      Text010@1010 : TextConst 'ENU=Use existing Bill of Lading?';
      Text011@1011 : TextConst 'ENU=Sales Shipment %1';
      Text012@1012 : TextConst 'ENU=Package %1';
      Text013@1013 : TextConst 'ENU="Bill of Lading %1 already exist for this Vendor. "';
      Text014@1014 : TextConst 'ENU=Posted Purchase Credit Memo %1';
      Text015@1015 : TextConst 'ENU=%1 ships from multiple locations, Must be added on the Bill of Lading.';
      Text016@1016 : TextConst 'ENU=%1 is already on Bill of Lading %2.';
      Text017@1017 : TextConst 'ENU="Bill of Lading %1 already exist for this Location. "';
      Text018@1018 : TextConst 'ENU=Transfer %1';
      Text019@1240030009 : TextConst 'ENU=%1 used on %1 %2.';
      Text020@1240030010 : TextConst 'ENU=Posted Return Shipment %1';
      Text021@1240030012 : TextConst 'ENU=Posted Transfer Shipment %1';

    PROCEDURE CreateBillOfLadingSalesHeader@1(VAR SalesHeader@1240030000 : Record 36;AllowQuestion@1240030001 : Boolean);
    VAR
      BillOfLading@1240030002 : Record 14000822;
      SalesLine@1240030003 : Record 37;
      CreateBillOfLading@1240030004 : Boolean;
    BEGIN
      GetShippingSetup;

      BillOfLadingLine.RESET;
      BillOfLadingLine.SETCURRENTKEY(Type,"No.");
      BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
      BillOfLadingLine.SETRANGE("No.",SalesHeader."No.");
      BillOfLadingLine.SETRANGE("Source Type",DATABASE::"Sales Header");
      BillOfLadingLine.SETRANGE("Source Subtype",SalesHeader."Document Type");
      BillOfLadingLine.SETRANGE("Source ID",SalesHeader."No.");
      IF ShippingSetup."Location Packing" THEN BEGIN
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
        SalesLine.SETFILTER("Location Code",'<>%1',SalesHeader."Location Code");
        IF SalesLine.FIND('-') THEN
          ERROR(
            Text007,
            SalesHeader."Document Type",SalesHeader."No.");

        BillOfLadingLine.SETRANGE("Location Code",SalesHeader."Location Code");
      END;
      IF BillOfLadingLine.FIND('-') THEN
        ERROR(
          Text008,
          SalesHeader."Document Type",SalesHeader."No.",BillOfLadingLine."Bill of Lading No.");

      BillOfLading.RESET;
      BillOfLading.SETCURRENTKEY(Released);
      BillOfLading.SETRANGE(Released,FALSE);
      BillOfLading.SETRANGE("Ship-to Type",BillOfLading."Ship-to Type"::Customer);
      BillOfLading.SETRANGE("Ship-to No.",SalesHeader."Sell-to Customer No.");
      BillOfLading.SETRANGE("Shipping Agent Code",SalesHeader."Shipping Agent Code");
      BillOfLading.SETRANGE("Shipping Agent Service",SalesHeader."E-Ship Agent Service");
      IF ShippingSetup."Location Packing" THEN
        BillOfLading.SETRANGE("Location Code",SalesHeader."Location Code");
      IF SalesHeader."Ship-to Code" <> '' THEN
        BillOfLading.SETRANGE("Ship-to Code",SalesHeader."Ship-to Code");
      IF BillOfLading.FIND('-') AND AllowQuestion THEN BEGIN
        CreateBillOfLading :=
          NOT CONFIRM(
                Text009 +
                Text010,TRUE,BillOfLading."No.");
        IF NOT CreateBillOfLading THEN
          Rec := BillOfLading;
      END ELSE
        CreateBillOfLading := TRUE;

      IF CreateBillOfLading THEN BEGIN
        INIT;
        "No." := '';
        INSERT(TRUE);

        Description := STRSUBSTNO('%1 %2',SalesHeader."Document Type",SalesHeader."No.");
        "Ship-to Type" := "Ship-to Type"::Customer;
        VALIDATE("Ship-to No.",SalesHeader."Sell-to Customer No.");
        VALIDATE("Ship-to Code",SalesHeader."Ship-to Code");
        VALIDATE("Location Code",SalesHeader."Location Code");
        "Ship-to Name" := SalesHeader."Ship-to Name";
        "Ship-to Name 2" := SalesHeader."Ship-to Name 2";
        "Ship-to Address" := SalesHeader."Ship-to Address";
        "Ship-to Address 2" := SalesHeader."Ship-to Address 2";
        "Ship-to City" := SalesHeader."Ship-to City";
        "Ship-to Contact" := SalesHeader."Ship-to Contact";
        "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(SalesHeader."Ship-to Post Code");
        "Ship-to State" := SalesHeader."Ship-to County";
        "Ship-to Country Code" := SalesHeader."Ship-to Country/Region Code";
        ShippingSetup.AdjustZIPStateCityCode(
          "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
        VALIDATE("Shipping Agent Code",SalesHeader."Shipping Agent Code");
        VALIDATE("Shipping Agent Service",SalesHeader."E-Ship Agent Service");
        VALIDATE("Shipping Payment Type",SalesHeader."Shipping Payment Type");
        VALIDATE("Third Party Ship. Account No.",SalesHeader."Third Party Ship. Account No.");
        VALIDATE("Shipping Insurance",SalesHeader."Shipping Insurance");
        "Residential Delivery" := SalesHeader."Residential Delivery";
        "Free Freight" := SalesHeader."Free Freight";
        "No Free Freight Lines on Order" := SalesHeader."No Free Freight Lines on Order";
        MODIFY;
      END;

      BillOfLadingLine.RESET;
      BillOfLadingLine.SETRANGE("Bill of Lading No.","No.");
      IF NOT BillOfLadingLine.FIND('+') THEN BEGIN
        BillOfLadingLine."Bill of Lading No." := "No.";
        BillOfLadingLine."Line No." := 10000;
      END ELSE
        BillOfLadingLine."Line No." := BillOfLadingLine."Line No." + 10000;
      BillOfLadingLine.INIT;
      BillOfLadingLine.INSERT(TRUE);
      BillOfLadingLine."Source Type" := DATABASE::"Sales Header";
      BillOfLadingLine."Source Subtype" := SalesHeader."Document Type";
      BillOfLadingLine."Source ID" := SalesHeader."No.";
      BillOfLadingLine.VALIDATE(Type,BillOfLadingLine.Type::Order);
      BillOfLadingLine.VALIDATE("No.",SalesHeader."No.");
      BillOfLadingLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateBillOfLadingSalesShpt@4(VAR SalesShipmentHeader@1240030000 : Record 110;ByPackage@1240030001 : Boolean;AllowQuestion@1240030002 : Boolean;AutoCreate@1240030003 : Boolean);
    VAR
      BillOfLading@1000000003 : Record 14000822;
      BillOfLadingLine@1000000004 : Record 14000823;
      PostedPackage@1000000005 : Record 14000704;
      CreateBillOfLading@1000000006 : Boolean;
    BEGIN
      SalesShipmentHeader.TESTFIELD("Bill of Lading No.",'');

      GetShippingSetup;

      PackingRule.GetPackingRule(
        "Ship-to Type"::Customer,SalesShipmentHeader."Sell-to Customer No.",
        SalesShipmentHeader."Ship-to Code");

      IF NOT ByPackage THEN BEGIN
        BillOfLading.RESET;
        BillOfLading.SETCURRENTKEY(Released);
        BillOfLading.SETRANGE(Released,FALSE);
        BillOfLading.SETRANGE("Ship-to Type",BillOfLading."Ship-to Type"::Customer);
        BillOfLading.SETRANGE("Ship-to No.",SalesShipmentHeader."Sell-to Customer No.");
        IF SalesShipmentHeader."Ship-to Code" <> '' THEN
          BillOfLading.SETRANGE("Ship-to Code",SalesShipmentHeader."Ship-to Code");

        IF BillOfLading.FIND('-') AND AllowQuestion THEN BEGIN
          CreateBillOfLading :=
            NOT CONFIRM(
                  Text009 +
                  Text010,TRUE,BillOfLading."No.");
          IF NOT CreateBillOfLading THEN
            Rec := BillOfLading;
        END ELSE
          CreateBillOfLading := TRUE;

        IF NOT ByPackage THEN
          SalesShipmentHeader.LOCKTABLE;

        IF CreateBillOfLading THEN BEGIN
          INIT;

          PostedPackage.RESET;
          PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Posted Source ID");
          PostedPackage.SETRANGE("Source Type",DATABASE::"Sales Header");
          PostedPackage.SETRANGE("Posted Source ID",SalesShipmentHeader."No.");
          IF PostedPackage.FIND('-') THEN
            "No." := PostedPackage."No."
          ELSE
            "No." := '';
          INSERT(TRUE);

          Description := STRSUBSTNO(Text011,SalesShipmentHeader."No.");
          "Ship-to Type" := "Ship-to Type"::Customer;
          VALIDATE("Ship-to No.",SalesShipmentHeader."Sell-to Customer No.");
          VALIDATE("Ship-to Code",SalesShipmentHeader."Ship-to Code");
          "Ship-to Name" := SalesShipmentHeader."Ship-to Name";
          "Ship-to Name 2" := SalesShipmentHeader."Ship-to Name 2";
          "Ship-to Address" := SalesShipmentHeader."Ship-to Address";
          "Ship-to Address 2" := SalesShipmentHeader."Ship-to Address 2";
          "Ship-to City" := SalesShipmentHeader."Ship-to City";
          "Ship-to Contact" := SalesShipmentHeader."Ship-to Contact";
          "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(SalesShipmentHeader."Ship-to Post Code");
          "Ship-to State" := SalesShipmentHeader."Ship-to County";
          "Ship-to Country Code" := SalesShipmentHeader."Ship-to Country/Region Code";
          ShippingSetup.AdjustZIPStateCityCode(
            "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
          VALIDATE("Shipping Agent Code",SalesShipmentHeader."Shipping Agent Code");
          VALIDATE("Shipping Agent Service",SalesShipmentHeader."E-Ship Agent Service");
          VALIDATE("Shipping Payment Type",SalesShipmentHeader."Shipping Payment Type");
          VALIDATE("Third Party Ship. Account No.",SalesShipmentHeader."Third Party Ship. Account No.");
          VALIDATE("Shipping Insurance",SalesShipmentHeader."Shipping Insurance");
          "Residential Delivery" := SalesShipmentHeader."Residential Delivery";
          "Free Freight" := SalesShipmentHeader."Free Freight";
          "No Free Freight Lines on Order" := SalesShipmentHeader."No Free Freight Lines on Order";
          MODIFY;
        END;

        BillOfLadingLine.LOCKTABLE;
        BillOfLadingLine.INIT;
        BillOfLadingLine."Bill of Lading No." := "No.";
        BillOfLadingLine."Line No." := 10000;
        BillOfLadingLine."Source Type" := DATABASE::"Sales Header";
        IF SalesShipmentHeader."Order No." <> '' THEN BEGIN
          BillOfLadingLine."Source Subtype" := 1;
          BillOfLadingLine."Source ID" := SalesShipmentHeader."Order No.";
        END ELSE
          BillOfLadingLine."Source Subtype" := 2;
        BillOfLadingLine."Posted Source ID" := SalesShipmentHeader."No.";
        BillOfLadingLine.Type := BillOfLadingLine.Type::"Sales Shipment (Posted)";
        BillOfLadingLine.VALIDATE("No.",SalesShipmentHeader."No.");
        BillOfLadingLine.INSERT(TRUE);

        IF AutoCreate THEN
          IF PackingRule."Auto Release Summary" THEN BEGIN
            BillOfLadingMgt.CloseBillOfLading(
              Rec,PackingRule."Release Bill of Lading Action"::"Remove Document from Bill of Lading");

            BillOfLadingMgt.CloseBOLSummary(Rec);
            IF PackingRule."Allow BOL Post Before ASN Send" THEN
              IF PackingRule."Auto Post when ASN Send" THEN
                BillOfLadingMgt.PostBillOfLading(Rec,TRUE);
          END;
      END ELSE BEGIN
        PostedPackage.RESET;
        PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Posted Source ID");
        PostedPackage.SETRANGE("Source Type",DATABASE::"Sales Header");
        PostedPackage.SETRANGE("Posted Source ID",SalesShipmentHeader."No.");
        IF PostedPackage.FIND('-') THEN
          REPEAT
            PostedPackage.TESTFIELD("Multi Document Package",FALSE);

            PostedPackage.SETRANGE("Used on Bill of Lading No.",'');
            PostedPackage.SETRANGE("Bill of Lading No.",'');

            PostedPackage.CALCFIELDS("Exist in Other Package");
            IF NOT PostedPackage."Exist in Other Package" THEN BEGIN
              INIT;
              "No." := PostedPackage."No.";
              INSERT(TRUE);

              Description := STRSUBSTNO(Text012,PostedPackage."No.");
              "Ship-to Type" := "Ship-to Type"::Customer;
              VALIDATE("Ship-to No.",PostedPackage."Ship-to No.");
              VALIDATE("Ship-to Code",PostedPackage."Ship-to Code");
              "Ship-to Name" := PostedPackage."Ship-to Name";
              "Ship-to Name 2" := PostedPackage."Ship-to Name 2";
              "Ship-to Address" := PostedPackage."Ship-to Address";
              "Ship-to Address 2" := PostedPackage."Ship-to Address 2";
              "Ship-to City" := PostedPackage."Ship-to City";
              "Ship-to Contact" := PostedPackage."Ship-to Contact";
              "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(PostedPackage."Ship-to ZIP Code");
              "Ship-to State" := PostedPackage."Ship-to State";
              "Ship-to Country Code" := PostedPackage."Ship-to Country Code";
              ShippingSetup.AdjustZIPStateCityCode(
                "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
              "Ship-to Phone No." := PostedPackage."Ship-to Phone No.";
              "Ship-to Fax No." := PostedPackage."Ship-to Fax No.";
              VALIDATE("Shipping Agent Code",PostedPackage."Shipping Agent Code");
              VALIDATE("Shipping Agent Service",PostedPackage."Shipping Agent Service");
              VALIDATE("Shipping Payment Type",PostedPackage."Shipping Payment Type");
              VALIDATE("Third Party Ship. Account No.",PostedPackage."Third Party Ship. Account No.");
              VALIDATE("Shipping Insurance",PostedPackage."Shipping Insurance");
              "External Tracking No." := PostedPackage."External Tracking No.";
              MODIFY;

              BillOfLadingLine.LOCKTABLE;
              BillOfLadingLine.INIT;
              BillOfLadingLine."Bill of Lading No." := "No.";
              BillOfLadingLine."Line No." := 10000;
              BillOfLadingLine.Type := BillOfLadingLine.Type::Package;
              BillOfLadingLine.VALIDATE("No.",PostedPackage."No.");
              BillOfLadingLine.INSERT(TRUE);

              IF AutoCreate THEN
                IF PackingRule."Auto Release Summary" THEN BEGIN
                  BillOfLadingMgt.CloseBillOfLading(
                    Rec,PackingRule."Release Bill of Lading Action"::"Remove Document from Bill of Lading");

                  BillOfLadingMgt.CloseBOLSummary(Rec);
                  IF PackingRule."Allow BOL Post Before ASN Send" THEN
                    IF PackingRule."Auto Post when ASN Send" THEN
                      BillOfLadingMgt.PostBillOfLading(Rec,TRUE);
                END;
            END;
          UNTIL PostedPackage.NEXT = 0;
      END;
    END;

    PROCEDURE CreateBillOfLadingPurchHeader@10(VAR PurchHeader@1240030000 : Record 38;AllowQuestion@1240030001 : Boolean);
    VAR
      BillOfLading@1240030002 : Record 14000822;
      PurchLine@1240030003 : Record 39;
      CreateBillOfLading@1240030004 : Boolean;
    BEGIN
      GetShippingSetup;

      BillOfLadingLine.RESET;
      BillOfLadingLine.SETCURRENTKEY(Type,"No.");
      BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
      BillOfLadingLine.SETRANGE("No.",PurchHeader."No.");
      BillOfLadingLine.SETRANGE("Source Type",DATABASE::"Purchase Header");
      BillOfLadingLine.SETRANGE("Source Subtype",PurchHeader."Document Type");
      BillOfLadingLine.SETRANGE("Source ID",PurchHeader."No.");
      IF ShippingSetup."Location Packing" THEN BEGIN
        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
        PurchLine.SETRANGE("Document No.",PurchHeader."No.");
        PurchLine.SETFILTER("Location Code",'<>%1',PurchHeader."Location Code");
        IF PurchLine.FIND('-') THEN
          ERROR(
            Text007,
            PurchHeader."Document Type",PurchHeader."No.");

        BillOfLadingLine.SETRANGE("Location Code",PurchHeader."Location Code");
      END;
      IF BillOfLadingLine.FIND('-') THEN
        ERROR(
          Text008,
          PurchHeader."Document Type",PurchHeader."No.",BillOfLadingLine."Bill of Lading No.");

      BillOfLading.RESET;
      BillOfLading.SETCURRENTKEY(Released);
      BillOfLading.SETRANGE(Released,FALSE);
      BillOfLading.SETRANGE("Ship-to Type",BillOfLading."Ship-to Type"::Vendor);
      BillOfLading.SETRANGE("Ship-to No.",PurchHeader."Buy-from Vendor No.");
      BillOfLading.SETRANGE("Shipping Agent Code",PurchHeader."E-Ship Agent Code");
      BillOfLading.SETRANGE("Shipping Agent Service",PurchHeader."E-Ship Agent Service");
      IF ShippingSetup."Location Packing" THEN
        BillOfLading.SETRANGE("Location Code",PurchHeader."Location Code");
      IF PurchHeader."Order Address Code" <> '' THEN
        BillOfLading.SETRANGE("Ship-to Code",PurchHeader."Order Address Code");
      IF BillOfLading.FIND('-') AND AllowQuestion THEN BEGIN
        CreateBillOfLading :=
          NOT CONFIRM(
                Text013 +
                Text010,TRUE,BillOfLading."No.");
        IF NOT CreateBillOfLading THEN
          Rec := BillOfLading;
      END ELSE
        CreateBillOfLading := TRUE;

      IF CreateBillOfLading THEN BEGIN
        INIT;
        "No." := '';
        INSERT(TRUE);

        Description := STRSUBSTNO('%1 %2',PurchHeader."Document Type",PurchHeader."No.");
        "Ship-to Type" := "Ship-to Type"::Vendor;
        VALIDATE("Ship-to No.",PurchHeader."Buy-from Vendor No.");
        VALIDATE("Ship-to Code",PurchHeader."Order Address Code");
        VALIDATE("Location Code",PurchHeader."Location Code");
        "Ship-to Name" := PurchHeader."Ship-to Name";
        "Ship-to Name 2" := PurchHeader."Ship-to Name 2";
        "Ship-to Address" := PurchHeader."Ship-to Address";
        "Ship-to Address 2" := PurchHeader."Ship-to Address 2";
        "Ship-to City" := PurchHeader."Ship-to City";
        "Ship-to Contact" := PurchHeader."Ship-to Contact";
        "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(PurchHeader."Ship-to Post Code");
        "Ship-to State" := PurchHeader."Ship-to County";
        "Ship-to Country Code" := PurchHeader."Ship-to Country/Region Code";
        ShippingSetup.AdjustZIPStateCityCode(
          "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
        VALIDATE("Shipping Agent Code",PurchHeader."E-Ship Agent Code");
        VALIDATE("Shipping Agent Service",PurchHeader."E-Ship Agent Service");
        VALIDATE("Shipping Payment Type",PurchHeader."Shipping Payment Type");
        VALIDATE("Third Party Ship. Account No.",PurchHeader."Third Party Ship. Account No.");
        VALIDATE("Shipping Insurance",PurchHeader."Shipping Insurance");
        "Residential Delivery" := PurchHeader."Residential Delivery";
        MODIFY;
      END;

      BillOfLadingLine.RESET;
      BillOfLadingLine.SETRANGE("Bill of Lading No.","No.");
      IF NOT BillOfLadingLine.FIND('+') THEN BEGIN
        BillOfLadingLine."Bill of Lading No." := "No.";
        BillOfLadingLine."Line No." := 10000;
      END ELSE
        BillOfLadingLine."Line No." := BillOfLadingLine."Line No." + 10000;
      BillOfLadingLine.INIT;
      BillOfLadingLine.INSERT(TRUE);
      BillOfLadingLine."Source Type" := DATABASE::"Purchase Header";
      BillOfLadingLine."Source Subtype" := PurchHeader."Document Type";
      BillOfLadingLine."Source ID" := PurchHeader."No.";
      BillOfLadingLine.VALIDATE(Type,BillOfLadingLine.Type::Order);
      BillOfLadingLine.VALIDATE("No.",PurchHeader."No.");
      BillOfLadingLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateBillOfLadingPurchCrMemo@8(VAR PurchCrMemoHeader@1240030000 : Record 124;ByPackage@1240030001 : Boolean;AllowQuestion@1240030002 : Boolean);
    VAR
      BillOfLading@1240030003 : Record 14000822;
      BillOfLadingLine@1240030004 : Record 14000823;
      PostedPackage@1240030005 : Record 14000704;
      CreateBillOfLading@1240030006 : Boolean;
    BEGIN
      PurchCrMemoHeader.TESTFIELD("Bill of Lading No.",'');

      GetShippingSetup;

      IF NOT ByPackage THEN BEGIN
        BillOfLading.RESET;
        BillOfLading.SETCURRENTKEY(Released);
        BillOfLading.SETRANGE(Released,FALSE);
        BillOfLading.SETRANGE("Ship-to Type",BillOfLading."Ship-to Type"::Vendor);
        BillOfLading.SETRANGE("Ship-to No.",PurchCrMemoHeader."Buy-from Vendor No.");
        IF PurchCrMemoHeader."Order Address Code" <> '' THEN
          BillOfLading.SETRANGE("Ship-to Code",PurchCrMemoHeader."Order Address Code");

        IF BillOfLading.FIND('-') AND AllowQuestion THEN BEGIN
          CreateBillOfLading :=
            NOT CONFIRM(
                  Text013 +
                  Text010,TRUE,BillOfLading."No.");
          IF NOT CreateBillOfLading THEN
            Rec := BillOfLading;
        END ELSE
          CreateBillOfLading := TRUE;

        IF NOT ByPackage THEN
          PurchCrMemoHeader.LOCKTABLE;

        IF CreateBillOfLading THEN BEGIN
          INIT;

          PostedPackage.RESET;
          PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Posted Source ID");
          PostedPackage.SETRANGE("Source Type",DATABASE::"Purchase Header");
          PostedPackage.SETRANGE("Posted Source ID",PurchCrMemoHeader."No.");
          IF PostedPackage.FIND('-') THEN
            "No." := PostedPackage."No."
          ELSE
            "No." := '';
          INSERT(TRUE);

          Description := STRSUBSTNO(Text014,PurchCrMemoHeader."No.");
          "Ship-to Type" := "Ship-to Type"::Vendor;
          VALIDATE("Ship-to No.",PurchCrMemoHeader."Buy-from Vendor No.");
          VALIDATE("Ship-to Code",PurchCrMemoHeader."Order Address Code");
          "Ship-to Name" := PurchCrMemoHeader."Buy-from Vendor Name";
          "Ship-to Name 2" := PurchCrMemoHeader."Buy-from Vendor Name 2";
          "Ship-to Address" := PurchCrMemoHeader."Buy-from Address";
          "Ship-to Address 2" := PurchCrMemoHeader."Buy-from Address 2";
          "Ship-to City" := PurchCrMemoHeader."Buy-from City";
          "Ship-to Contact" := PurchCrMemoHeader."Buy-from Contact";
          "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(PurchCrMemoHeader."Buy-from Post Code");
          "Ship-to State" := PurchCrMemoHeader."Buy-from County";
          "Ship-to Country Code" := PurchCrMemoHeader."Buy-from Country/Region Code";
          ShippingSetup.AdjustZIPStateCityCode(
            "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
          VALIDATE("Shipping Agent Code",PurchCrMemoHeader."E-Ship Agent Code");
          VALIDATE("Shipping Agent Service",PurchCrMemoHeader."E-Ship Agent Service");
          VALIDATE("Shipping Payment Type",PurchCrMemoHeader."Shipping Payment Type");
          VALIDATE("Third Party Ship. Account No.",PurchCrMemoHeader."Third Party Ship. Account No.");
          VALIDATE("Shipping Insurance",PurchCrMemoHeader."Shipping Insurance");
          "Residential Delivery" := PurchCrMemoHeader."Residential Delivery";
          MODIFY;
        END;

        BillOfLadingLine.LOCKTABLE;
        BillOfLadingLine.INIT;
        BillOfLadingLine."Bill of Lading No." := "No.";
        BillOfLadingLine."Line No." := 10000;
        BillOfLadingLine."Source Type" := DATABASE::"Purchase Header";
        BillOfLadingLine."Source Subtype" := 3;
        BillOfLadingLine."Source ID" := PurchCrMemoHeader."Pre-Assigned No.";
        BillOfLadingLine."Posted Source ID" := PurchCrMemoHeader."No.";
        BillOfLadingLine.Type := BillOfLadingLine.Type::"Purchase Credit Memo (Posted)";
        BillOfLadingLine.VALIDATE("No.",PurchCrMemoHeader."No.");
        BillOfLadingLine.INSERT(TRUE);
      END ELSE BEGIN
        PostedPackage.RESET;
        PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Posted Source ID");
        PostedPackage.SETRANGE("Source Type",DATABASE::"Purchase Header");
        PostedPackage.SETRANGE("Posted Source ID",PurchCrMemoHeader."No.");
        IF PostedPackage.FIND('-') THEN
          REPEAT
            PostedPackage.TESTFIELD("Multi Document Package",FALSE);

            PostedPackage.SETRANGE("Used on Bill of Lading No.",'');
            PostedPackage.SETRANGE("Bill of Lading No.",'');

            PostedPackage.CALCFIELDS("Exist in Other Package");
            IF NOT PostedPackage."Exist in Other Package" THEN BEGIN
              INIT;
              "No." := PostedPackage."No.";
              INSERT(TRUE);

              Description := STRSUBSTNO(Text012,PostedPackage."No.");
              "Ship-to Type" := PostedPackage."Ship-to Type";
              VALIDATE("Ship-to No.",PostedPackage."Ship-to No.");
              VALIDATE("Ship-to Code",PostedPackage."Ship-to Code");
              "Ship-to Name" := PostedPackage."Ship-to Name";
              "Ship-to Name 2" := PostedPackage."Ship-to Name 2";
              "Ship-to Address" := PostedPackage."Ship-to Address";
              "Ship-to Address 2" := PostedPackage."Ship-to Address 2";
              "Ship-to City" := PostedPackage."Ship-to City";
              "Ship-to Contact" := PostedPackage."Ship-to Contact";
              "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(PostedPackage."Ship-to ZIP Code");
              "Ship-to State" := PostedPackage."Ship-to State";
              "Ship-to Country Code" := PostedPackage."Ship-to Country Code";
              ShippingSetup.AdjustZIPStateCityCode(
                "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
              "Ship-to Phone No." := PostedPackage."Ship-to Phone No.";
              "Ship-to Fax No." := PostedPackage."Ship-to Fax No.";
              VALIDATE("Shipping Agent Code",PostedPackage."Shipping Agent Code");
              VALIDATE("Shipping Agent Service",PostedPackage."Shipping Agent Service");
              VALIDATE("Shipping Payment Type",PostedPackage."Shipping Payment Type");
              VALIDATE("Third Party Ship. Account No.",PostedPackage."Third Party Ship. Account No.");
              VALIDATE("Shipping Insurance",PostedPackage."Shipping Insurance");
              "External Tracking No." := PostedPackage."External Tracking No.";
              MODIFY;

              BillOfLadingLine.LOCKTABLE;
              BillOfLadingLine.INIT;
              BillOfLadingLine."Bill of Lading No." := "No.";
              BillOfLadingLine."Line No." := 10000;
              BillOfLadingLine.Type := BillOfLadingLine.Type::Package;
              BillOfLadingLine.VALIDATE("No.",PostedPackage."No.");
              BillOfLadingLine.INSERT(TRUE);
            END;
          UNTIL PostedPackage.NEXT = 0;
      END;
    END;

    PROCEDURE CreateBillOfLadingPurchRetOrdr@1240030000(VAR ReturnShipmentHeader@1240030000 : Record 6650;ByPackage@1240030001 : Boolean;AllowQuestion@1240030002 : Boolean);
    VAR
      BillOfLading@1240030003 : Record 14000822;
      BillOfLadingLine@1240030004 : Record 14000823;
      PostedPackage@1240030005 : Record 14000704;
      CreateBillOfLading@1240030006 : Boolean;
    BEGIN
      ReturnShipmentHeader.TESTFIELD("Bill of Lading No.",'');

      GetShippingSetup;

      IF NOT ByPackage THEN BEGIN
        BillOfLading.RESET;
        BillOfLading.SETCURRENTKEY(Released);
        BillOfLading.SETRANGE(Released,FALSE);
        BillOfLading.SETRANGE("Ship-to Type",BillOfLading."Ship-to Type"::Vendor);
        BillOfLading.SETRANGE("Ship-to No.",ReturnShipmentHeader."Buy-from Vendor No.");
        IF ReturnShipmentHeader."Order Address Code" <> '' THEN
          BillOfLading.SETRANGE("Ship-to Code",ReturnShipmentHeader."Order Address Code");

        IF BillOfLading.FIND('-') AND AllowQuestion THEN BEGIN
          CreateBillOfLading :=
            NOT CONFIRM(
                  Text013 +
                  Text010,TRUE,BillOfLading."No.");
          IF NOT CreateBillOfLading THEN
            Rec := BillOfLading;
        END ELSE
          CreateBillOfLading := TRUE;

        IF NOT ByPackage THEN
          ReturnShipmentHeader.LOCKTABLE;

        IF CreateBillOfLading THEN BEGIN
          INIT;

          PostedPackage.RESET;
          PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Posted Source ID");
          PostedPackage.SETRANGE("Source Type",DATABASE::"Purchase Header");
          PostedPackage.SETRANGE("Posted Source ID",ReturnShipmentHeader."No.");
          IF PostedPackage.FIND('-') THEN
            "No." := PostedPackage."No."
          ELSE
            "No." := '';
          INSERT(TRUE);

          Description := STRSUBSTNO(Text020,ReturnShipmentHeader."No.");
          "Ship-to Type" := "Ship-to Type"::Vendor;
          VALIDATE("Ship-to No.",ReturnShipmentHeader."Buy-from Vendor No.");
          VALIDATE("Ship-to Code",ReturnShipmentHeader."Order Address Code");
          "Ship-to Name" := ReturnShipmentHeader."Buy-from Vendor Name";
          "Ship-to Name 2" := ReturnShipmentHeader."Buy-from Vendor Name 2";
          "Ship-to Address" := ReturnShipmentHeader."Buy-from Address";
          "Ship-to Address 2" := ReturnShipmentHeader."Buy-from Address 2";
          "Ship-to City" := ReturnShipmentHeader."Buy-from City";
          "Ship-to Contact" := ReturnShipmentHeader."Buy-from Contact";
          "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(ReturnShipmentHeader."Buy-from Post Code");
          "Ship-to State" := ReturnShipmentHeader."Buy-from County";
          "Ship-to Country Code" := ReturnShipmentHeader."Buy-from Country/Region Code";
          ShippingSetup.AdjustZIPStateCityCode(
            "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
          VALIDATE("Shipping Agent Code",ReturnShipmentHeader."E-Ship Agent Code");
          VALIDATE("Shipping Agent Service",ReturnShipmentHeader."E-Ship Agent Service");
          VALIDATE("Shipping Payment Type",ReturnShipmentHeader."Shipping Payment Type");
          VALIDATE("Third Party Ship. Account No.",ReturnShipmentHeader."Third Party Ship. Account No.");
          VALIDATE("Shipping Insurance",ReturnShipmentHeader."Shipping Insurance");
          "Residential Delivery" := ReturnShipmentHeader."Residential Delivery";
          MODIFY;
        END;

        BillOfLadingLine.LOCKTABLE;
        BillOfLadingLine.INIT;
        BillOfLadingLine."Bill of Lading No." := "No.";
        BillOfLadingLine."Line No." := 10000;
        BillOfLadingLine."Source Type" := DATABASE::"Purchase Header";
        BillOfLadingLine."Source Subtype" := 5;
        BillOfLadingLine."Source ID" := ReturnShipmentHeader."Return Order No.";
        BillOfLadingLine."Posted Source ID" := ReturnShipmentHeader."No.";
        BillOfLadingLine.Type := BillOfLadingLine.Type::"Return Shipment (Posted)";
        BillOfLadingLine.VALIDATE("No.",ReturnShipmentHeader."No.");
        BillOfLadingLine.INSERT(TRUE);
      END ELSE BEGIN
        PostedPackage.RESET;
        PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Posted Source ID");
        PostedPackage.SETRANGE("Source Type",DATABASE::"Purchase Header");
        PostedPackage.SETRANGE("Posted Source ID",ReturnShipmentHeader."No.");
        IF PostedPackage.FIND('-') THEN
          REPEAT
            PostedPackage.TESTFIELD("Multi Document Package",FALSE);

            PostedPackage.SETRANGE("Used on Bill of Lading No.",'');
            PostedPackage.SETRANGE("Bill of Lading No.",'');

            PostedPackage.CALCFIELDS("Exist in Other Package");
            IF NOT PostedPackage."Exist in Other Package" THEN BEGIN
              INIT;
              "No." := PostedPackage."No.";
              INSERT(TRUE);

              Description := STRSUBSTNO(Text012,PostedPackage."No.");
              "Ship-to Type" := PostedPackage."Ship-to Type";
              VALIDATE("Ship-to No.",PostedPackage."Ship-to No.");
              VALIDATE("Ship-to Code",PostedPackage."Ship-to Code");
              "Ship-to Name" := PostedPackage."Ship-to Name";
              "Ship-to Name 2" := PostedPackage."Ship-to Name 2";
              "Ship-to Address" := PostedPackage."Ship-to Address";
              "Ship-to Address 2" := PostedPackage."Ship-to Address 2";
              "Ship-to City" := PostedPackage."Ship-to City";
              "Ship-to Contact" := PostedPackage."Ship-to Contact";
              "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(PostedPackage."Ship-to ZIP Code");
              "Ship-to State" := PostedPackage."Ship-to State";
              "Ship-to Country Code" := PostedPackage."Ship-to Country Code";
              ShippingSetup.AdjustZIPStateCityCode(
                "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
              "Ship-to Phone No." := PostedPackage."Ship-to Phone No.";
              "Ship-to Fax No." := PostedPackage."Ship-to Fax No.";
              VALIDATE("Shipping Agent Code",PostedPackage."Shipping Agent Code");
              VALIDATE("Shipping Agent Service",PostedPackage."Shipping Agent Service");
              VALIDATE("Shipping Payment Type",PostedPackage."Shipping Payment Type");
              VALIDATE("Third Party Ship. Account No.",PostedPackage."Third Party Ship. Account No.");
              VALIDATE("Shipping Insurance",PostedPackage."Shipping Insurance");
              "External Tracking No." := PostedPackage."External Tracking No.";
              MODIFY;

              BillOfLadingLine.LOCKTABLE;
              BillOfLadingLine.INIT;
              BillOfLadingLine."Bill of Lading No." := "No.";
              BillOfLadingLine."Line No." := 10000;
              BillOfLadingLine.Type := BillOfLadingLine.Type::Package;
              BillOfLadingLine.VALIDATE("No.",PostedPackage."No.");
              BillOfLadingLine.INSERT(TRUE);
            END;
          UNTIL PostedPackage.NEXT = 0;
      END;
    END;

    PROCEDURE CreateBillOfLadingTransHeader@1240030002(VAR TransferHeader@1240030000 : Record 5740;AllowQuestion@1240030001 : Boolean);
    VAR
      BillOfLading@1240030002 : Record 14000822;
      TransferLine@1240030003 : Record 5741;
      CreateBillOfLading@1240030004 : Boolean;
    BEGIN
      GetShippingSetup;

      BillOfLadingLine.RESET;
      BillOfLadingLine.SETCURRENTKEY(Type,"No.");
      BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
      BillOfLadingLine.SETRANGE("No.",TransferHeader."No.");
      BillOfLadingLine.SETRANGE("Source Type",DATABASE::"Transfer Header");
      BillOfLadingLine.SETRANGE("Source Subtype",0);
      BillOfLadingLine.SETRANGE("Source ID",TransferHeader."No.");
      IF ShippingSetup."Location Packing" THEN BEGIN
        TransferLine.RESET;
        TransferLine.SETRANGE("Document No.",TransferHeader."No.");
        TransferLine.SETFILTER("Transfer-to Code",'<>%1',TransferHeader."Transfer-to Code");
        IF TransferLine.FIND('-') THEN
          ERROR(
            Text015,
            TransferHeader."No.");

        BillOfLadingLine.SETRANGE("Location Code",TransferHeader."Transfer-to Code");
      END;
      IF BillOfLadingLine.FIND('-') THEN
        ERROR(
          Text016,
          TransferHeader."No.",BillOfLadingLine."Bill of Lading No.");

      BillOfLading.RESET;
      BillOfLading.SETCURRENTKEY(Released);
      BillOfLading.SETRANGE(Released,FALSE);
      BillOfLading.SETRANGE("Ship-to Type",BillOfLading."Ship-to Type"::Location);
      BillOfLading.SETRANGE("Ship-to No.",TransferHeader."Transfer-to Code");
      BillOfLading.SETRANGE("Shipping Agent Code",TransferHeader."Shipping Agent Code");
      BillOfLading.SETRANGE("Shipping Agent Service",TransferHeader."E-Ship Agent Service");
      IF ShippingSetup."Location Packing" THEN
        BillOfLading.SETRANGE("Location Code",TransferHeader."Transfer-to Code");
      IF BillOfLading.FIND('-') AND AllowQuestion THEN BEGIN
        CreateBillOfLading :=
          NOT CONFIRM(
                Text017 +
                Text010,TRUE,BillOfLading."No.");
        IF NOT CreateBillOfLading THEN
          Rec := BillOfLading;
      END ELSE
        CreateBillOfLading := TRUE;

      IF CreateBillOfLading THEN BEGIN
        INIT;
        "No." := '';
        INSERT(TRUE);

        Description := STRSUBSTNO(Text018,TransferHeader."No.");
        "Ship-to Type" := "Ship-to Type"::Location;
        VALIDATE("Ship-to No.",TransferHeader."Transfer-to Code");
        VALIDATE("Ship-to Code",'');
        VALIDATE("Location Code",TransferHeader."Transfer-to Code");
        "Ship-to Name" := TransferHeader."Transfer-to Name";
        "Ship-to Name 2" := TransferHeader."Transfer-to Name 2";
        "Ship-to Address" := TransferHeader."Transfer-to Address";
        "Ship-to Address 2" := TransferHeader."Transfer-to Address 2";
        "Ship-to City" := TransferHeader."Transfer-to City";
        "Ship-to Contact" := TransferHeader."Transfer-to Contact";
        "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(TransferHeader."Transfer-to Post Code");
        "Ship-to State" := TransferHeader."Transfer-to County";
        "Ship-to Country Code" := TransferHeader."Trsf.-to Country/Region Code";
        ShippingSetup.AdjustZIPStateCityCode(
          "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
        VALIDATE("Shipping Agent Code",TransferHeader."Shipping Agent Code");
        VALIDATE("Shipping Agent Service",TransferHeader."E-Ship Agent Service");
        VALIDATE("Shipping Payment Type",TransferHeader."Shipping Payment Type");
        VALIDATE("Third Party Ship. Account No.",TransferHeader."Third Party Ship. Account No.");
        VALIDATE("Shipping Insurance",TransferHeader."Shipping Insurance");
        "Residential Delivery" := TransferHeader."Residential Delivery";
        MODIFY;
      END;

      BillOfLadingLine.RESET;
      BillOfLadingLine.SETRANGE("Bill of Lading No.","No.");
      IF NOT BillOfLadingLine.FIND('+') THEN BEGIN
        BillOfLadingLine."Bill of Lading No." := "No.";
        BillOfLadingLine."Line No." := 10000;
      END ELSE
        BillOfLadingLine."Line No." := BillOfLadingLine."Line No." + 10000;
      BillOfLadingLine.INIT;
      BillOfLadingLine.INSERT(TRUE);
      BillOfLadingLine."Source Type" := DATABASE::"Transfer Header";
      BillOfLadingLine."Source Subtype" := 0;
      BillOfLadingLine."Source ID" := TransferHeader."No.";
      BillOfLadingLine.VALIDATE(Type,BillOfLadingLine.Type::Order);
      BillOfLadingLine.VALIDATE("No.",TransferHeader."No.");
      BillOfLadingLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateBillOfLadingTransShipmnt@1240030003(VAR TransferShipmentHeader@1240030000 : Record 5744;ByPackage@1240030001 : Boolean;AllowQuestion@1240030002 : Boolean);
    VAR
      BillOfLading@1240030003 : Record 14000822;
      BillOfLadingLine@1240030004 : Record 14000823;
      PostedPackage@1240030005 : Record 14000704;
      CreateBillOfLading@1240030006 : Boolean;
    BEGIN
      TransferShipmentHeader.TESTFIELD("Bill of Lading No.",'');

      GetShippingSetup;

      IF NOT ByPackage THEN BEGIN
        BillOfLading.RESET;
        BillOfLading.SETCURRENTKEY(Released);
        BillOfLading.SETRANGE(Released,FALSE);
        BillOfLading.SETRANGE("Ship-to Type",BillOfLading."Ship-to Type"::Location);
        BillOfLading.SETRANGE("Ship-to No.",TransferShipmentHeader."Transfer-to Code");
        BillOfLading.SETRANGE("Ship-to Code",'');

        IF BillOfLading.FIND('-') AND AllowQuestion THEN BEGIN
          CreateBillOfLading :=
            NOT CONFIRM(
                  Text013 +
                  Text010,TRUE,BillOfLading."No.");
          IF NOT CreateBillOfLading THEN
            Rec := BillOfLading;
        END ELSE
          CreateBillOfLading := TRUE;

        IF NOT ByPackage THEN
          TransferShipmentHeader.LOCKTABLE;

        IF CreateBillOfLading THEN BEGIN
          INIT;

          PostedPackage.RESET;
          PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Posted Source ID");
          PostedPackage.SETRANGE("Source Type",DATABASE::"Transfer Header");
          PostedPackage.SETRANGE("Posted Source ID",TransferShipmentHeader."No.");
          IF PostedPackage.FIND('-') THEN
            "No." := PostedPackage."No."
          ELSE
            "No." := '';
          INSERT(TRUE);

          Description := STRSUBSTNO(Text021,TransferShipmentHeader."No.");
          "Ship-to Type" := "Ship-to Type"::Location;
          VALIDATE("Ship-to No.",TransferShipmentHeader."Transfer-to Code");
          VALIDATE("Ship-to Code",'');
          "Ship-to Name" := TransferShipmentHeader."Transfer-to Name";
          "Ship-to Name 2" := TransferShipmentHeader."Transfer-to Name 2";
          "Ship-to Address" := TransferShipmentHeader."Transfer-to Address";
          "Ship-to Address 2" := TransferShipmentHeader."Transfer-to Address 2";
          "Ship-to City" := TransferShipmentHeader."Transfer-to City";
          "Ship-to Contact" := TransferShipmentHeader."Transfer-to Contact";
          "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(TransferShipmentHeader."Transfer-to Post Code");
          "Ship-to State" := TransferShipmentHeader."Transfer-to County";
          "Ship-to Country Code" := TransferShipmentHeader."Trsf.-to Country/Region Code";
          ShippingSetup.AdjustZIPStateCityCode(
            "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
          VALIDATE("Shipping Agent Code",TransferShipmentHeader."Shipping Agent Code");
          VALIDATE("Shipping Agent Service",TransferShipmentHeader."E-Ship Agent Service");
          VALIDATE("Shipping Payment Type",TransferShipmentHeader."Shipping Payment Type");
          VALIDATE("Third Party Ship. Account No.",TransferShipmentHeader."Third Party Ship. Account No.");
          VALIDATE("Shipping Insurance",TransferShipmentHeader."Shipping Insurance");
          "Residential Delivery" := TransferShipmentHeader."Residential Delivery";
          MODIFY;
        END;

        BillOfLadingLine.LOCKTABLE;
        BillOfLadingLine.INIT;
        BillOfLadingLine."Bill of Lading No." := "No.";
        BillOfLadingLine."Line No." := 10000;
        BillOfLadingLine."Source Type" := DATABASE::"Transfer Header";
        BillOfLadingLine."Source Subtype" := 0;
        BillOfLadingLine."Source ID" := TransferShipmentHeader."Transfer Order No.";
        BillOfLadingLine."Posted Source ID" := TransferShipmentHeader."No.";
        BillOfLadingLine.Type := BillOfLadingLine.Type::"Transfer Shipment (Posted)";
        BillOfLadingLine.VALIDATE("No.",TransferShipmentHeader."No.");
        BillOfLadingLine.INSERT(TRUE);
      END ELSE BEGIN
        PostedPackage.RESET;
        PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Posted Source ID");
        PostedPackage.SETRANGE("Source Type",DATABASE::"Transfer Header");
        PostedPackage.SETRANGE("Posted Source ID",TransferShipmentHeader."No.");
        IF PostedPackage.FIND('-') THEN
          REPEAT
            PostedPackage.TESTFIELD("Multi Document Package",FALSE);

            PostedPackage.SETRANGE("Used on Bill of Lading No.",'');
            PostedPackage.SETRANGE("Bill of Lading No.",'');

            PostedPackage.CALCFIELDS("Exist in Other Package");
            IF NOT PostedPackage."Exist in Other Package" THEN BEGIN
              INIT;
              "No." := PostedPackage."No.";
              INSERT(TRUE);

              Description := STRSUBSTNO(Text012,PostedPackage."No.");
              "Ship-to Type" := PostedPackage."Ship-to Type";
              VALIDATE("Ship-to No.",PostedPackage."Ship-to No.");
              VALIDATE("Ship-to Code",PostedPackage."Ship-to Code");
              "Ship-to Name" := PostedPackage."Ship-to Name";
              "Ship-to Name 2" := PostedPackage."Ship-to Name 2";
              "Ship-to Address" := PostedPackage."Ship-to Address";
              "Ship-to Address 2" := PostedPackage."Ship-to Address 2";
              "Ship-to City" := PostedPackage."Ship-to City";
              "Ship-to Contact" := PostedPackage."Ship-to Contact";
              "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(PostedPackage."Ship-to ZIP Code");
              "Ship-to State" := PostedPackage."Ship-to State";
              "Ship-to Country Code" := PostedPackage."Ship-to Country Code";
              ShippingSetup.AdjustZIPStateCityCode(
                "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
              "Ship-to Phone No." := PostedPackage."Ship-to Phone No.";
              "Ship-to Fax No." := PostedPackage."Ship-to Fax No.";
              VALIDATE("Shipping Agent Code",PostedPackage."Shipping Agent Code");
              VALIDATE("Shipping Agent Service",PostedPackage."Shipping Agent Service");
              VALIDATE("Shipping Payment Type",PostedPackage."Shipping Payment Type");
              VALIDATE("Third Party Ship. Account No.",PostedPackage."Third Party Ship. Account No.");
              VALIDATE("Shipping Insurance",PostedPackage."Shipping Insurance");
              "External Tracking No." := PostedPackage."External Tracking No.";
              MODIFY;

              BillOfLadingLine.LOCKTABLE;
              BillOfLadingLine.INIT;
              BillOfLadingLine."Bill of Lading No." := "No.";
              BillOfLadingLine."Line No." := 10000;
              BillOfLadingLine.Type := BillOfLadingLine.Type::Package;
              BillOfLadingLine.VALIDATE("No.",PostedPackage."No.");
              BillOfLadingLine.INSERT(TRUE);
            END;
          UNTIL PostedPackage.NEXT = 0;
      END;
    END;

    PROCEDURE AddSalesHeader@1240030012(DocumentType@1240030000 : Integer);
    VAR
      SalesHeader@1240030001 : Record 36;
      SalesDocsBOL@1240030002 : Page 14000830;
    BEGIN
      TESTFIELD(Released,FALSE);

      //TM BEG 070915
      TESTFIELD("External Tracking No.");
      TESTFIELD("Shipping Agent Service");
      TESTFIELD("Location Code");
      //TM END 070915

      SalesHeader.RESET;
      SalesHeader.FILTERGROUP(2);
      IF ShippingSetup."Location Packing" THEN
        SalesHeader.SETRANGE("Location Filter",PackingStation."Location Code");

      //TM BEG 070915
      SalesHeader.SETRANGE("Shipping Agent Code", "Shipping Agent Code");
      //TM END 070915

      SalesHeader.SETRANGE("Document Type",DocumentType);
      SalesHeader.FILTERGROUP(0);
      SalesHeader.SETRANGE("Exists on Bill of Lading",FALSE);
      SalesHeader.SETRANGE("E-Ship Outst. Lines Exists",TRUE);
      IF "Ship-to Type" = "Ship-to Type"::Customer THEN BEGIN
        IF "Ship-to No." <> ''THEN
          SalesHeader.SETRANGE("Sell-to Customer No.","Ship-to No.");
        IF "Ship-to Code" <> '' THEN
          SalesHeader.SETRANGE("Ship-to Code","Ship-to Code");
      END;

      CLEAR(SalesDocsBOL);
      SalesDocsBOL.SetBillOfLadingCode("No.");
      SalesDocsBOL.SETTABLEVIEW(SalesHeader);
      SalesDocsBOL.RUNMODAL;
    END;

    PROCEDURE AddPostedSalesShipment@1240030011();
    VAR
      SalesShipmentHeader@1240030000 : Record 110;
      PostedSalesShipmentBOL@1240030001 : Page 14000831;
    BEGIN
      TESTFIELD(Released,FALSE);

      SalesShipmentHeader.RESET;
      SalesShipmentHeader.SETCURRENTKEY("Bill of Lading No.");
      SalesShipmentHeader.SETRANGE("Bill of Lading No.",'');
      IF "Ship-to Type" = "Ship-to Type"::Customer THEN BEGIN
        IF "Ship-to No." <> ''THEN
          SalesShipmentHeader.SETRANGE("Sell-to Customer No.","Ship-to No.");
        IF "Ship-to Code" <> '' THEN
          SalesShipmentHeader.SETRANGE("Ship-to Code","Ship-to Code");
      END;

      CLEAR(PostedSalesShipmentBOL);
      PostedSalesShipmentBOL.SetBillOfLadingCode("No.");
      PostedSalesShipmentBOL.SETTABLEVIEW(SalesShipmentHeader);
      PostedSalesShipmentBOL.RUNMODAL;
    END;

    PROCEDURE AddPostedPackages@1240030010();
    VAR
      PostedPackage@1240030000 : Record 14000704;
      PostedPackageBOL@1240030001 : Page 14000835;
    BEGIN
      TESTFIELD(Released,FALSE);

      PostedPackage.RESET;
      PostedPackage.SETCURRENTKEY("Bill of Lading No.");
      PostedPackage.SETRANGE("Bill of Lading No.",'');
      PostedPackage.SETRANGE("Original Package No.",'');
      IF "Ship-to Type" = "Ship-to Type"::Customer THEN BEGIN
        IF "Ship-to No." <> ''THEN
          PostedPackage.SETRANGE("Ship-to No.","Ship-to No.");
        IF "Ship-to Code" <> '' THEN
          PostedPackage.SETRANGE("Ship-to Code","Ship-to Code");
      END;

      CLEAR(PostedPackageBOL);
      PostedPackageBOL.SetBillOfLadingCode("No.");
      PostedPackageBOL.SETTABLEVIEW(PostedPackage);
      PostedPackageBOL.RUNMODAL;
    END;

    PROCEDURE AddBillOfLading@1240030009();
    VAR
      BillOfLading@1240030001 : Record 14000822;
      BillOfLadingBOL@1240030000 : Page 14000854;
    BEGIN
      TESTFIELD(Released,FALSE);

      BillOfLading.RESET;
      BillOfLading.FILTERGROUP(2);
      BillOfLading.SETFILTER("No.",'<>%1',"No.");
      BillOfLading.SETRANGE("Used on Bill of Lading No.",'');
      BillOfLading.FILTERGROUP(0);
      IF ShippingSetup."Location Packing" THEN
        BillOfLading.SETRANGE("Location Code",PackingStation."Location Code");
      IF "Ship-to Type" = "Ship-to Type"::Customer THEN BEGIN
        IF "Ship-to No." <> '' THEN
          BillOfLading.SETRANGE("Ship-to No.","Ship-to No.");
        IF "Ship-to Code" <> '' THEN
          BillOfLading.SETRANGE("Ship-to Code","Ship-to Code");
      END;

      CLEAR(BillOfLadingBOL);
      BillOfLadingBOL.SetBillOfLadingCode("No.");
      BillOfLadingBOL.SETTABLEVIEW(BillOfLading);
      BillOfLadingBOL.RUNMODAL;
    END;

    PROCEDURE AddPurchaseHeader@1240030004(DocumentType@1240030001 : Integer);
    VAR
      PurchHeader@1240030000 : Record 38;
      PurchDocsBOL@1240030002 : Page 14000839;
    BEGIN
      TESTFIELD(Released,FALSE);

      PurchHeader.RESET;
      PurchHeader.FILTERGROUP(2);
      IF ShippingSetup."Location Packing" THEN
        PurchHeader.SETRANGE("Location Filter",PackingStation."Location Code");
      PurchHeader.SETRANGE("Document Type",DocumentType);
      PurchHeader.FILTERGROUP(0);
      PurchHeader.SETRANGE("Exists on Bill of Lading",FALSE);
      PurchHeader.SETRANGE("E-Ship Outst. Lines Exists",TRUE);
      IF "Ship-to Type" = "Ship-to Type"::Vendor THEN BEGIN
        IF "Ship-to No." <> ''THEN
          PurchHeader.SETRANGE("Buy-from Vendor No.","Ship-to No.");
        IF "Ship-to Code" <> '' THEN
          PurchHeader.SETRANGE("Order Address Code","Ship-to Code");
      END;

      CLEAR(PurchDocsBOL);
      PurchDocsBOL.SetBillOfLadingCode("No.");
      PurchDocsBOL.SETTABLEVIEW(PurchHeader);
      PurchDocsBOL.RUNMODAL;
    END;

    PROCEDURE AddTransferOrder@1240030005();
    VAR
      TransferHeader@1240030000 : Record 5740;
      TransferOrderBOL@1240030001 : Page 14000853;
    BEGIN
      TESTFIELD(Released,FALSE);

      TransferHeader.RESET;
      TransferHeader.FILTERGROUP(2);
      IF ShippingSetup."Location Packing" THEN
        TransferHeader.SETRANGE("Location Filter",PackingStation."Location Code");
      TransferHeader.FILTERGROUP(0);
      TransferHeader.SETRANGE("Exists on Bill of Lading",FALSE);
      TransferHeader.SETRANGE("E-Ship Outst. Lines Exists",TRUE);
      IF "Ship-to Type" = "Ship-to Type"::Location THEN BEGIN
        IF "Ship-to No." <> ''THEN
          TransferHeader.SETRANGE("Transfer-to Code","Ship-to No.");
      END;

      CLEAR(TransferOrderBOL);
      TransferOrderBOL.SetBillOfLadingCode("No.");
      TransferOrderBOL.SETTABLEVIEW(TransferHeader);
      TransferOrderBOL.RUNMODAL;
    END;

    PROCEDURE AddPostedPurchaseCreditMemo@1240030006();
    VAR
      PurchCrMemoHeader@1240030000 : Record 124;
      PostedPurchCrMemoBOL@1240030002 : Page 14000840;
    BEGIN
      TESTFIELD(Released,FALSE);

      PurchCrMemoHeader.RESET;
      PurchCrMemoHeader.SETCURRENTKEY("Bill of Lading No.");
      PurchCrMemoHeader.SETRANGE("Bill of Lading No.",'');
      IF "Ship-to Type" = "Ship-to Type"::Vendor THEN BEGIN
        IF "Ship-to No." <> ''THEN
          PurchCrMemoHeader.SETRANGE("Buy-from Vendor No.","Ship-to No.");
        IF "Ship-to Code" <> '' THEN
          PurchCrMemoHeader.SETRANGE("Order Address Code","Ship-to Code");
      END;

      CLEAR(PostedPurchCrMemoBOL);
      PostedPurchCrMemoBOL.SetBillOfLadingCode("No.");
      PostedPurchCrMemoBOL.SETTABLEVIEW(PurchCrMemoHeader);
      PostedPurchCrMemoBOL.RUNMODAL;
    END;

    PROCEDURE AddPostedReturnShipment@1240030007();
    VAR
      ReturnShipmentHeader@1240030000 : Record 6650;
      PostedReturnShipmentBOL@1240030001 : Page 14000851;
    BEGIN
      TESTFIELD(Released,FALSE);

      ReturnShipmentHeader.RESET;
      ReturnShipmentHeader.SETCURRENTKEY("Bill of Lading No.");
      ReturnShipmentHeader.SETRANGE("Bill of Lading No.",'');
      IF "Ship-to Type" = "Ship-to Type"::Vendor THEN BEGIN
        IF "Ship-to No." <> ''THEN
          ReturnShipmentHeader.SETRANGE("Buy-from Vendor No.","Ship-to No.");
        IF "Ship-to Code" <> '' THEN
          ReturnShipmentHeader.SETRANGE("Order Address Code","Ship-to Code");
      END;

      CLEAR(PostedReturnShipmentBOL);
      PostedReturnShipmentBOL.SetBillOfLadingCode("No.");
      PostedReturnShipmentBOL.SETTABLEVIEW(ReturnShipmentHeader);
      PostedReturnShipmentBOL.RUNMODAL;
    END;

    PROCEDURE AddPostedTransferShipment@1240030008();
    VAR
      TransferShipmentHeader@1240030000 : Record 5744;
      PostedTransferShipmentBOL@1240030001 : Page 14000852;
    BEGIN
      TESTFIELD(Released,FALSE);

      TransferShipmentHeader.RESET;
      TransferShipmentHeader.SETCURRENTKEY("Bill of Lading No.");
      TransferShipmentHeader.SETRANGE("Bill of Lading No.",'');
      IF "Ship-to Type" = "Ship-to Type"::Location THEN BEGIN
        IF "Ship-to No." <> ''THEN
          TransferShipmentHeader.SETRANGE("Transfer-to Code","Ship-to No.");
      END;

      CLEAR(PostedTransferShipmentBOL);
      PostedTransferShipmentBOL.SetBillOfLadingCode("No.");
      PostedTransferShipmentBOL.SETTABLEVIEW(TransferShipmentHeader);
      PostedTransferShipmentBOL.RUNMODAL;
    END;

    PROCEDURE TransferFromCustomer@23(CurrentCustomer@1000000000 : Record 18);
    VAR
      PaymentTerms@1000000001 : Record 3;
    BEGIN
      GetShippingSetup;

      "Ship-to Name" := CurrentCustomer.Name;
      "Ship-to Name 2" := CurrentCustomer."Name 2";
      "Ship-to Address" := CurrentCustomer.Address;
      "Ship-to Address 2" := CurrentCustomer."Address 2";
      "Ship-to City" := CurrentCustomer.City;
      "Ship-to Contact" := CurrentCustomer.Contact;
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(CurrentCustomer."Post Code");
      "Ship-to State" := CurrentCustomer.County;
      "Ship-to Country Code" := CurrentCustomer."Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Ship-to Phone No." := CurrentCustomer."Phone No.";
      "Ship-to Fax No." := CurrentCustomer."Fax No.";

      "External Ship-to No." := CurrentCustomer."External No.";
      "External Ship-to Code" := CurrentCustomer."External No.";
      "Residential Delivery" := CurrentCustomer."Residential Delivery";
      IF NOT "Free Freight" THEN BEGIN
        "Free Freight" := CurrentCustomer."Free Freight";
        "No Free Freight Lines on Order" := CurrentCustomer."No Free Freight Lines on Order";
      END;
      IF PaymentTerms.GET(CurrentCustomer."Payment Terms Code") THEN BEGIN
        "COD Payment" := PaymentTerms."COD Payment";
        "COD Cashiers Check" := PaymentTerms."COD Cashiers Check";
      END ELSE BEGIN
        "COD Payment" := FALSE;
        "COD Cashiers Check" := FALSE;
      END;

      IF CurrentCustomer."Shipping Agent Code" <> '' THEN BEGIN
        VALIDATE("Shipping Agent Code",CurrentCustomer."Shipping Agent Code");
        IF CurrentCustomer."E-Ship Agent Service" <> '' THEN
          VALIDATE("Shipping Agent Service",CurrentCustomer."E-Ship Agent Service");
      END;

      "Shipping Payment Type" := CurrentCustomer."Shipping Payment Type";
      "Shipping Insurance" := CurrentCustomer."Shipping Insurance";
      IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
        VALIDATE("Third Party Ship. Account No.",'')
      ELSE
        IF ShippingAccount.GetPrimaryShippingAccountNo(
             "Shipping Agent Code","Ship-to Type","Ship-to No.","Ship-to Code")
        THEN
          VALIDATE("Third Party Ship. Account No.",ShippingAccount."Account No.");
    END;

    PROCEDURE TransferFromVendor@3(CurrentVendor@1000000000 : Record 23);
    BEGIN
      GetShippingSetup;

      "Ship-to Name" := CurrentVendor.Name;
      "Ship-to Name 2" := CurrentVendor."Name 2";
      "Ship-to Address" := CurrentVendor.Address;
      "Ship-to Address 2" := CurrentVendor."Address 2";
      "Ship-to City" := CurrentVendor.City;
      "Ship-to Contact" := CurrentVendor.Contact;
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(CurrentVendor."Post Code");
      "Ship-to State" := CurrentVendor.County;
      "Ship-to Country Code" := CurrentVendor."Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Ship-to Phone No." := CurrentVendor."Phone No.";
      "Ship-to Fax No." := CurrentVendor."Fax No.";

      "External Ship-to No." := '';
      "External Ship-to Code" := '';
      "Residential Delivery" := FALSE;
      "Free Freight" := FALSE;
      "No Free Freight Lines on Order" := FALSE;

      VALIDATE("Shipping Agent Code");
      VALIDATE("Shipping Agent Service");

      "Shipping Payment Type" := "Shipping Payment Type"::Prepaid;
      "Shipping Insurance" := "Shipping Insurance"::" ";
      "Third Party Ship. Account No." := '';
    END;

    PROCEDURE TransferFromBankAccount@21(CurrentBankAccount@1000000000 : Record 270);
    BEGIN
      GetShippingSetup;

      "Ship-to Name" := CurrentBankAccount.Name;
      "Ship-to Name 2" := CurrentBankAccount."Name 2";
      "Ship-to Address" := CurrentBankAccount.Address;
      "Ship-to Address 2" := CurrentBankAccount."Address 2";
      "Ship-to City" := CurrentBankAccount.City;
      "Ship-to Contact" := CurrentBankAccount.Contact;
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(CurrentBankAccount."Post Code");
      "Ship-to State" := CurrentBankAccount.County;
      "Ship-to Country Code" := CurrentBankAccount."Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Ship-to Phone No." := CurrentBankAccount."Phone No.";
      "Ship-to Fax No." := CurrentBankAccount."Fax No.";

      "External Ship-to No." := '';
      "External Ship-to Code" := '';
      "Residential Delivery" := FALSE;
      "Free Freight" := FALSE;
      "No Free Freight Lines on Order" := FALSE;

      VALIDATE("Shipping Agent Code");
      VALIDATE("Shipping Agent Service");

      "Shipping Payment Type" := "Shipping Payment Type"::Prepaid;
      "Shipping Insurance" := "Shipping Insurance"::" ";
      "Third Party Ship. Account No." := '';
    END;

    PROCEDURE TransferFromProspect@24(CurrentProspect@1000000000 : Record 5050);
    BEGIN
      GetShippingSetup;

      "Ship-to Name" := CurrentProspect.Name;
      "Ship-to Name 2" := CurrentProspect."Name 2";
      "Ship-to Address" := CurrentProspect.Address;
      "Ship-to Address 2" := CurrentProspect."Address 2";
      "Ship-to City" := CurrentProspect.City;
      "Ship-to Contact" := '';
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(CurrentProspect."Post Code");
      "Ship-to State" := CurrentProspect.County;
      "Ship-to Country Code" := CurrentProspect."Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Ship-to Phone No." := CurrentProspect."Phone No.";
      "Ship-to Fax No." := CurrentProspect."Fax No.";

      "External Ship-to No." := '';
      "External Ship-to Code" := '';
      "Residential Delivery" := FALSE;
      "Free Freight" := FALSE;
      "No Free Freight Lines on Order" := FALSE;

      VALIDATE("Shipping Agent Code");
      VALIDATE("Shipping Agent Service");

      "Shipping Payment Type" := "Shipping Payment Type"::Prepaid;
      "Shipping Insurance" := "Shipping Insurance"::" ";
      "Third Party Ship. Account No." := '';
    END;

    PROCEDURE TransferFromResource@26(CurrentResource@1000000000 : Record 156);
    BEGIN
      GetShippingSetup;

      "Ship-to Name" := CurrentResource.Name;
      "Ship-to Name 2" := CurrentResource."Name 2";
      "Ship-to Address" := CurrentResource.Address;
      "Ship-to Address 2" := CurrentResource."Address 2";
      "Ship-to City" := CurrentResource.City;
      "Ship-to Contact" := '';
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(CurrentResource."Post Code");
      "Ship-to State" := CurrentResource.County;
      "Ship-to Country Code" := '';
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Ship-to Phone No." := '';
      "Ship-to Fax No." := '';

      "External Ship-to No." := '';
      "External Ship-to Code" := '';
      "Residential Delivery" := FALSE;
      "Free Freight" := FALSE;
      "No Free Freight Lines on Order" := FALSE;

      VALIDATE("Shipping Agent Code");
      VALIDATE("Shipping Agent Service");

      "Shipping Payment Type" := "Shipping Payment Type"::Prepaid;
      "Shipping Insurance" := "Shipping Insurance"::" ";
      "Third Party Ship. Account No." := '';
    END;

    PROCEDURE TransferFromEmployee@34(CurrentEmployee@1000000000 : Record 5200);
    BEGIN
      GetShippingSetup;

      IF CurrentEmployee."Middle Name" <> '' THEN
        "Ship-to Name" :=
          CurrentEmployee."First Name" + ' ' + CurrentEmployee."Middle Name" + ' ' +
          CurrentEmployee."Last Name"
      ELSE
        "Ship-to Name" :=
          CurrentEmployee."First Name" + ' ' + CurrentEmployee."Last Name";
      "Ship-to Name 2" := '';
      "Ship-to Address" := CurrentEmployee.Address;
      "Ship-to Address 2" := CurrentEmployee."Address 2";
      "Ship-to City" := CurrentEmployee.City;
      "Ship-to Contact" := '';
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(CurrentEmployee."Post Code");
      "Ship-to State" := CurrentEmployee.County;
      "Ship-to Country Code" := CurrentEmployee."Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Ship-to Phone No." := CurrentEmployee."Phone No.";
      "Ship-to Fax No." := CurrentEmployee."Fax No.";

      "External Ship-to No." := '';
      "External Ship-to Code" := '';
      "Residential Delivery" := FALSE;
      "Free Freight" := FALSE;
      "No Free Freight Lines on Order" := FALSE;

      VALIDATE("Shipping Agent Code");
      VALIDATE("Shipping Agent Service");

      "Shipping Payment Type" := "Shipping Payment Type"::Prepaid;
      "Shipping Insurance" := "Shipping Insurance"::" ";
      "Third Party Ship. Account No." := '';
    END;

    PROCEDURE TransferFromLocation@11(CurrentLocation@1240030000 : Record 14);
    BEGIN
      GetShippingSetup;

      "Ship-to Name" := CurrentLocation.Name;
      "Ship-to Name 2" := '';
      "Ship-to Address" := CurrentLocation.Address;
      "Ship-to Address 2" := CurrentLocation."Address 2";
      "Ship-to City" := CurrentLocation.City;
      "Ship-to Contact" := '';
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(CurrentLocation."Post Code");
      "Ship-to State" := CurrentLocation.County;
      "Ship-to Country Code" := CurrentLocation."Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Ship-to Phone No." := CurrentLocation."Phone No.";
      "Ship-to Fax No." := CurrentLocation."Fax No.";

      "External Ship-to No." := '';
      "External Ship-to Code" := '';
      "Residential Delivery" := FALSE;
      "Free Freight" := FALSE;
      "No Free Freight Lines on Order" := FALSE;

      VALIDATE("Shipping Agent Code");
      VALIDATE("Shipping Agent Service");

      "Shipping Payment Type" := "Shipping Payment Type"::Prepaid;
      "Shipping Insurance" := "Shipping Insurance"::" ";
      "Third Party Ship. Account No." := '';
    END;

    PROCEDURE TransferFromShipToAddress@25(CurrentShipToAddress@1000000000 : Record 222);
    BEGIN
      GetShippingSetup;

      "Ship-to Name" := CurrentShipToAddress.Name;
      "Ship-to Name 2" := CurrentShipToAddress."Name 2";
      "Ship-to Address" := CurrentShipToAddress.Address;
      "Ship-to Address 2" := CurrentShipToAddress."Address 2";
      "Ship-to City" := CurrentShipToAddress.City;
      "Ship-to Contact" := CurrentShipToAddress.Contact;
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(CurrentShipToAddress."Post Code");
      "Ship-to State" := CurrentShipToAddress.County;
      "Ship-to Country Code" := CurrentShipToAddress."Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Ship-to Phone No." := CurrentShipToAddress."Phone No.";
      "Ship-to Fax No." := CurrentShipToAddress."Fax No.";
      "External Ship-to Code" := CurrentShipToAddress."External No.";
      "Residential Delivery" := CurrentShipToAddress."Residential Delivery";
      IF NOT "Free Freight" THEN BEGIN
        "Free Freight" := CurrentShipToAddress."Free Freight";
        "No Free Freight Lines on Order" := CurrentShipToAddress."No Free Freight Lines on Order";
      END;

      IF CurrentShipToAddress."Shipping Agent Code" <> '' THEN BEGIN
        VALIDATE("Shipping Agent Code",CurrentShipToAddress."Shipping Agent Code");
        IF CurrentShipToAddress."E-Ship Agent Service" <> '' THEN
          VALIDATE("Shipping Agent Service",CurrentShipToAddress."E-Ship Agent Service");
      END;

      "Shipping Payment Type" := CurrentShipToAddress."Shipping Payment Type";
      "Shipping Insurance" := CurrentShipToAddress."Shipping Insurance";
      IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
        VALIDATE("Third Party Ship. Account No.",'')
      ELSE
        IF ShippingAccount.GetPrimaryShippingAccountNo(
             "Shipping Agent Code","Ship-to Type","Ship-to No.","Ship-to Code")
        THEN
          VALIDATE("Third Party Ship. Account No.",ShippingAccount."Account No.");
    END;

    PROCEDURE TransferFromOrderAddress@27(CurrentOrderAddress@1000000000 : Record 224);
    BEGIN
      GetShippingSetup;

      "Ship-to Name" := CurrentOrderAddress.Name;
      "Ship-to Name 2" := CurrentOrderAddress."Name 2";
      "Ship-to Address" := CurrentOrderAddress.Address;
      "Ship-to Address 2" := CurrentOrderAddress."Address 2";
      "Ship-to City" := CurrentOrderAddress.City;
      "Ship-to Contact" := CurrentOrderAddress.Contact;
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(CurrentOrderAddress."Post Code");
      "Ship-to State" := CurrentOrderAddress.County;
      "Ship-to Country Code" := CurrentOrderAddress."Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Ship-to Phone No." := CurrentOrderAddress."Phone No.";
      "Ship-to Fax No." := CurrentOrderAddress."Fax No.";

      "External Ship-to No." := '';
      "External Ship-to Code" := '';
      "Residential Delivery" := FALSE;
      "Free Freight" := FALSE;
      "No Free Freight Lines on Order" := FALSE;

      VALIDATE("Shipping Agent Code");
      VALIDATE("Shipping Agent Service");

      "Shipping Payment Type" := "Shipping Payment Type"::Prepaid;
      "Shipping Insurance" := "Shipping Insurance"::" ";
      "Third Party Ship. Account No." := '';
    END;

    PROCEDURE ClearShipToAddess@28();
    BEGIN
      "Ship-to Name" := '';
      "Ship-to Name 2" := '';
      "Ship-to Address" := '';
      "Ship-to Address 2" := '';
      "Ship-to City" := '';
      "Ship-to Contact" := '';
      "Ship-to ZIP Code" := '';
      "Ship-to State" := '';
      "Ship-to Country Code" := '';
      "Ship-to Phone No." := '';
      "Ship-to Fax No." := '';

      "External Ship-to No." := '';
      "External Ship-to Code" := '';
      "Residential Delivery" := FALSE;
      "Free Freight" := FALSE;
      "No Free Freight Lines on Order" := FALSE;

      "Shipping Payment Type" := "Shipping Payment Type"::Prepaid;
      "Shipping Insurance" := "Shipping Insurance"::" ";
      "Third Party Ship. Account No." := '';
    END;

    PROCEDURE TransferFromPackingStation@2();
    BEGIN
      GetPackingStation;

      "Ship-from Name" := PackingStation."Ship-from Company";
      "Ship-from Name 2" := '';
      "Ship-from Address" := PackingStation."Ship-from Address";
      "Ship-from Address 2" := PackingStation."Ship-from Address2";
      "Ship-from City" := PackingStation."Ship-from City";
      "Ship-from Contact" := PackingStation."Ship-from Contact";
      "Ship-from ZIP Code" := PackingStation."Ship-from ZIP Code";
      "Ship-from State" := PackingStation."Ship-from State";
      "Ship-from Country Code" := PackingStation."Ship-from Country Code";
      "Ship-from Phone No." := PackingStation."Ship-from Phone No.";
      "Ship-from Fax No." := PackingStation."Ship-from Fax No.";
      "Location Code" := PackingStation."Location Code";
    END;

    LOCAL PROCEDURE GetShippingAgent@9();
    BEGIN
      IF ("Shipping Agent Code" <> ShippingAgent.Code) OR ("Shipping Agent Code" = '') THEN
        ShippingAgent.GET("Shipping Agent Code");
    END;

    LOCAL PROCEDURE GetShippingSetup@22();
    BEGIN
      IF NOT ShippingSetupRetrieved THEN BEGIN
        ShippingSetup.GET;
        ShippingSetupRetrieved := TRUE;
      END;
    END;

    LOCAL PROCEDURE GetPackingStation@51();
    BEGIN
      IF PackingStation.Code = '' THEN
        PackingStation.GetPackingStation;
    END;

    PROCEDURE GetWeight@19() : Decimal;
    BEGIN
      IF "Override Weight" <> 0 THEN
        EXIT("Override Weight");

      IF "Scale Weight" <> 0 THEN
        EXIT("Scale Weight");

      CALCFIELDS("Posted Weight");
      EXIT("Posted Weight");
    END;

    PROCEDURE GetValue@20() : Decimal;
    BEGIN
      IF "Override Value" <> 0 THEN
        EXIT("Override Value");

      CALCFIELDS("Posted Value");
      EXIT("Posted Value");
    END;

    PROCEDURE GetVolume@18() : Decimal;
    BEGIN
      IF "Override Volume" <> 0 THEN
        EXIT("Override Volume");

      CALCFIELDS("Posted Volume");
      EXIT("Posted Volume");
    END;

    PROCEDURE GetInsuredValue@37() : Decimal;
    BEGIN
      IF ("Override Insured Value" <> 0) AND "Insure Through Shipping Agent" THEN
        EXIT("Override Insured Value");

      IF "Insure Through Shipping Agent" THEN
        EXIT(GetValue)
      ELSE
        EXIT(0);
    END;

    LOCAL PROCEDURE UpdateEDIASN@6();
    BEGIN
      TESTFIELD("EDI ASN Generated",FALSE);

      "EDI ASN" := FALSE;

      PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code");
      "EDI ASN" := PackingRule."ASN Summary Type" <> PackingRule."ASN Summary Type"::" ";

      "EDI BSN" := PackingRule."Ship Notice Type" = PackingRule."Ship Notice Type"::"ASN (Billing)";
    END;

    PROCEDURE UpdateEDIBOL@14000351();
    VAR
      EDIBillOfLadingCarrier@14050901 : Record 14050901;
      EDITradePartner@14050902 : Record 14002360;
      EDICustCrossRef@14050903 : Record 14002362;
    BEGIN
      TESTFIELD("EDI Electronic BOL Generated",FALSE);

      "EDI Electronic BOL" := FALSE;

      EDIBillOfLadingCarrier.RESET;
      EDIBillOfLadingCarrier.SETRANGE("Shipping Agent Code","Shipping Agent Code");
      EDIBillOfLadingCarrier.SETRANGE("InDirect BOL",TRUE);
      IF EDIBillOfLadingCarrier.FIND('-') THEN BEGIN
        EDIBillOfLadingCarrier.RESET;
        EDIBillOfLadingCarrier.SETRANGE("Shipping Agent Code","Shipping Agent Code");
        EDIBillOfLadingCarrier.SETRANGE("Shipping Agent Service","Shipping Agent Service");
        EDIBillOfLadingCarrier.SETRANGE("InDirect BOL",TRUE);
        IF NOT EDIBillOfLadingCarrier.FIND('-') THEN BEGIN
          EDIBillOfLadingCarrier.SETRANGE("Shipping Agent Service");
          IF EDIBillOfLadingCarrier.FIND('-') THEN
            REPEAT
              EDITradePartner.SETCURRENTKEY("Customer No.");
              EDITradePartner.SETRANGE("Customer No.","Ship-to No.");
              EDITradePartner.SETRANGE("Indirect Electronic BOL Req.",TRUE);
              EDITradePartner.SETRANGE("No.",EDIBillOfLadingCarrier."Customer Trade Partner No.");
              IF EDITradePartner.FIND('-') THEN
                "EDI Electronic BOL" := TRUE
              ELSE BEGIN
                EDICustCrossRef.INIT;
                EDICustCrossRef.SETCURRENTKEY("Navision Sell To Code");
                EDICustCrossRef.SETRANGE("Navision Sell To Code","Ship-to No.");
                EDICustCrossRef.SETRANGE("Navision Ship To Code","Ship-to Code");
                IF EDICustCrossRef.FIND('-') THEN BEGIN
                  EDITradePartner.GET(EDICustCrossRef."Trade Partner No.");
                  IF EDITradePartner."Indirect Electronic BOL Req." THEN
                    IF EDITradePartner."No." = EDIBillOfLadingCarrier."Customer Trade Partner No."
                  THEN
                    "EDI Electronic BOL" := TRUE;
                END;
              END;
            UNTIL (EDIBillOfLadingCarrier.NEXT = 0) OR ("EDI Electronic BOL" = TRUE)
          ELSE
            "EDI Electronic BOL" := FALSE;
        END ELSE
          REPEAT
            EDITradePartner.SETCURRENTKEY("Customer No.");
            EDITradePartner.SETRANGE("Customer No.","Ship-to No.");
            EDITradePartner.SETRANGE("Indirect Electronic BOL Req.",TRUE);
            EDITradePartner.SETRANGE("No.",EDIBillOfLadingCarrier."Customer Trade Partner No.");
            IF EDITradePartner.FIND('-') THEN
              "EDI Electronic BOL" := TRUE
            ELSE BEGIN
              EDICustCrossRef.INIT;
              EDICustCrossRef.SETCURRENTKEY("Navision Sell To Code");
              EDICustCrossRef.SETRANGE("Navision Sell To Code","Ship-to No.");
              EDICustCrossRef.SETRANGE("Navision Ship To Code","Ship-to Code");
              IF EDICustCrossRef.FIND('-') THEN BEGIN
                EDITradePartner.GET(EDICustCrossRef."Trade Partner No.");
                IF EDITradePartner."Indirect Electronic BOL Req." THEN
                  IF EDITradePartner."No." =
                    EDIBillOfLadingCarrier."Customer Trade Partner No."
                  THEN
                    "EDI Electronic BOL" := TRUE
                  ELSE
                    "EDI Electronic BOL" := FALSE;
              END ELSE
                "EDI Electronic BOL" := FALSE;
            END;
          UNTIL (EDIBillOfLadingCarrier.NEXT = 0) OR ("EDI Electronic BOL" = TRUE)
      END ELSE BEGIN
        EDIBillOfLadingCarrier.RESET;
        EDIBillOfLadingCarrier.SETRANGE("Shipping Agent Code","Shipping Agent Code");
        EDIBillOfLadingCarrier.SETRANGE("Shipping Agent Service","Shipping Agent Service");
        IF NOT EDIBillOfLadingCarrier.FIND('-') THEN BEGIN
          EDIBillOfLadingCarrier.RESET;
          EDIBillOfLadingCarrier.SETRANGE("Shipping Agent Code","Shipping Agent Code");
          IF EDIBillOfLadingCarrier.FIND('-') THEN BEGIN
            "EDI Electronic BOL" := TRUE;
            IF NOT EDITradePartner.GET(EDIBillOfLadingCarrier."Carrier Trade Partner No.") THEN
              "EDI Electronic BOL" := FALSE;
            IF EDITradePartner."Indirect Electronic BOL Req." THEN
              "EDI Electronic BOL" := FALSE;
          END ELSE
            "EDI Electronic BOL" := FALSE;
        END ELSE BEGIN
          "EDI Electronic BOL" := TRUE;
          IF NOT EDITradePartner.GET(EDIBillOfLadingCarrier."Carrier Trade Partner No.") THEN
            "EDI Electronic BOL" := FALSE;
          IF EDITradePartner."Indirect Electronic BOL Req." THEN
            "EDI Electronic BOL" := FALSE;
        END;
      END;
    END;

    PROCEDURE InsertLabelFile@29(LabelFileName@1000000000 : Text[250];LabelDescription@1000000001 : Text[30];LabelType@1000000002 : Integer;PrinterPort@1000000003 : Code[100];PackingStationCode@1000000004 : Code[10];LabelPrinted@1000000005 : Boolean;DoNotImportLabel@1240030001 : Boolean);
    VAR
      LabelFile@1240030000 : Record 14000710;
    BEGIN
      IF LabelFileName = '' THEN
        ERROR(Text004);

      IF NOT DoNotImportLabel THEN
        IF NOT EXISTS(LabelFileName) THEN
          ERROR(Text005,LabelFileName);

      LabelFile.LOCKTABLE;
      LabelFile.RESET;
      LabelFile.SETRANGE(Type,LabelFile.Type::"Bill of Lading");
      LabelFile.SETRANGE("No.","No.");
      IF LabelFile.FIND('+') THEN
        LabelFile."File No." := LabelFile."File No." + 1
      ELSE BEGIN
        LabelFile.Type := LabelFile.Type::"Bill of Lading";
        LabelFile."No." := "No.";
        LabelFile."File No." := 1;
      END;

      LabelFile.INIT;
      LabelFile.Description := COPYSTR(LabelDescription,1,MAXSTRLEN(LabelFile.Description));
      LabelFile."File Type" := LabelType;
      LabelFile."File Name" := LabelFileName;
      LabelFile."Printer Port" := PrinterPort;
      LabelFile."Packing Station Code" := PackingStationCode;
      LabelFile."Created By" := USERID;
      LabelFile."Date Created" := TODAY;
      LabelFile."Time Created" := TIME;
      IF LabelPrinted THEN
        LabelFile."No. of Copies Printed" := 1;

      IF NOT DoNotImportLabel THEN
        LabelFile.ImportFileBinary(LabelFileName,FALSE)
      ELSE
        LabelFile."File Not Imported" := TRUE;

      LabelFile.INSERT;
    END;

    PROCEDURE PrintLabel@32();
    BEGIN
      LabelMgt.PrintBillOfLadingLabel(Rec);
    END;

    PROCEDURE StartTrackingBOL@1240030001();
    BEGIN
      IF "Ship-to Country Code" <> '' THEN
        Country.GET("Ship-to Country Code");
      TESTFIELD("Shipping Agent Code");
      ShippingAgent.GET("Shipping Agent Code");
      HYPERLINK(
        STRSUBSTNO(
           ShippingAgent."Internet Address","External Tracking No.",Country.Name,
           "Pickup Date",ShippingAgent."Account No."));
    END;

    PROCEDURE DisplayMap@1240031004();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FIND('-') THEN
        MapMgt.MakeSelection(DATABASE::"Bill of Lading",GETPOSITION);
    END;

    PROCEDURE CombineShipments@1240020000();
    VAR
      CombineShipmentsRep@1240020000 : Report 295;
    BEGIN
      BillOfLadingSummaryLine.RESET;
      BillOfLadingSummaryLine.SETRANGE("Bill of Lading No.","No.");
      BillOfLadingSummaryLine.SETRANGE(
        "Bill of Lading Type",BillOfLadingSummaryLine."Bill of Lading Type"::Standard);
      BillOfLadingSummaryLine.FIND('-');

      SalesShipmentHeader.RESET;
      SalesShipmentHeader.SETRANGE("Bill of Lading No.","No.");
      SalesShipmentHeader.SETRANGE("External Document No.",BillOfLadingSummaryLine."External Document No.");
      IF "Ship-to Code" <> '' THEN
        SalesShipmentHeader.SETRANGE("Ship-to Code","Ship-to Code");

      CLEAR(CombineShipmentsRep);
      CombineShipmentsRep.SetVariables;
      REPORT.RUN(REPORT::"Combine Shipments",TRUE,TRUE,SalesShipmentHeader);
    END;

    BEGIN
    END.
  }
}

