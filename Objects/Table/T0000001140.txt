OBJECT Table 1140 OAuth 2.0 Setup
{
  OBJECT-PROPERTIES
  {
    Date=10/26/19;
    Time=12:00:00 PM;
    Version List=NAVW111.00.00.37606;
  }
  PROPERTIES
  {
    Permissions=TableData 1261=rimd;
    OnDelete=BEGIN
               DeleteToken("Client ID");
               DeleteToken("Client Secret");
               DeleteToken("Access Token");
               DeleteToken("Refresh Token");
             END;

    CaptionML=[ENU=OAuth 2.0 Setup;
               ESM=Configuraci¢n de OAuth 2.0;
               FRC=Configuration OAuth 2.0;
               ENC=OAuth 2.0 Setup];
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=[ENU=Code;
                                                              ESM=C¢digo;
                                                              FRC=Code;
                                                              ENC=Code];
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              ESM=Descripci¢n;
                                                              FRC=Description;
                                                              ENC=Description] }
    { 3   ;   ;Service URL         ;Text250       ;OnValidate=VAR
                                                                WebRequestHelper@1000 : Codeunit 1299;
                                                              BEGIN
                                                                IF "Service URL" <> '' THEN
                                                                  WebRequestHelper.IsSecureHttpUrl("Service URL");
                                                              END;

                                                   CaptionML=[ENU=Service URL;
                                                              ESM=Direcci¢n URL de servicio;
                                                              FRC=URL du service;
                                                              ENC=Service URL] }
    { 4   ;   ;Redirect URL        ;Text250       ;CaptionML=[ENU=Redirect URL;
                                                              ESM=Direcci¢n URL de redireccionamiento;
                                                              FRC=URL de redirection;
                                                              ENC=Redirect URL] }
    { 5   ;   ;Client ID           ;GUID          ;DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=Client ID;
                                                              ESM=Id. de cliente;
                                                              FRC=Code client;
                                                              ENC=Client ID] }
    { 6   ;   ;Client Secret       ;GUID          ;DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=Client Secret;
                                                              ESM=Secreto de cliente;
                                                              FRC=ClÇ secräte client;
                                                              ENC=Client Secret] }
    { 7   ;   ;Access Token        ;GUID          ;DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=Access Token;
                                                              ESM=Token de acceso;
                                                              FRC=Jeton d'accäs;
                                                              ENC=Access Token] }
    { 8   ;   ;Refresh Token       ;GUID          ;DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=Refresh Token;
                                                              ESM=Token de actualizaci¢n;
                                                              FRC=Jeton d'actualisation;
                                                              ENC=Refresh Token] }
    { 9   ;   ;Authorization URL Path;Text250     ;OnValidate=BEGIN
                                                                CheckAndAppendURLPath("Authorization URL Path");
                                                              END;

                                                   CaptionML=[ENU=Authorization URL Path;
                                                              ESM=Ruta de acceso de direcci¢n URL de autorizaci¢n;
                                                              FRC=Chemin d'accäs de l'URL d'autorisation;
                                                              ENC=Authorization URL Path] }
    { 10  ;   ;Access Token URL Path;Text250      ;OnValidate=BEGIN
                                                                CheckAndAppendURLPath("Access Token URL Path");
                                                              END;

                                                   CaptionML=[ENU=Access Token URL Path;
                                                              ESM=Ruta de acceso de direcci¢n URL de token de acceso;
                                                              FRC=Chemin d'accäs de l'URL du jeton d'accäs;
                                                              ENC=Access Token URL Path] }
    { 11  ;   ;Refresh Token URL Path;Text250     ;OnValidate=BEGIN
                                                                CheckAndAppendURLPath("Refresh Token URL Path");
                                                              END;

                                                   CaptionML=[ENU=Refresh Token URL Path;
                                                              ESM=Ruta de acceso de direcci¢n URL de token de actualizaci¢n;
                                                              FRC=Chemin d'accäs de l'URL du jeton d'actualisation;
                                                              ENC=Refresh Token URL Path] }
    { 12  ;   ;Scope               ;Text250       ;CaptionML=[ENU=Scope;
                                                              ESM=µmbito;
                                                              FRC=PortÇe;
                                                              ENC=Scope] }
    { 13  ;   ;Authorization Response Type;Text250;CaptionML=[ENU=Authorization Response Type;
                                                              ESM=Tipo de respuesta de autorizaci¢n;
                                                              FRC=Type de rÇponse d'autorisation;
                                                              ENC=Authorization Response Type] }
    { 14  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ESM=Estado;
                                                              FRC=êtat;
                                                              ENC=Status];
                                                   OptionCaptionML=[ENU=" ,Enabled,Disabled,Connected,Error";
                                                                    ESM=" ,Habilitado,Deshabilitado,Conectado,Error";
                                                                    FRC=" ,ActivÇ,DÇsactivÇ,ConnectÇ,Erreur";
                                                                    ENC=" ,Enabled,Disabled,Connected,Error"];
                                                   OptionString=[ ,Enabled,Disabled,Connected,Error] }
    { 16  ;   ;Activity Log ID     ;Integer       ;CaptionML=[ENU=Activity Log ID;
                                                              ESM=Id. de registro de actividad;
                                                              FRC=Code journal des activitÇs;
                                                              ENC=Activity Log ID] }
    { 17  ;   ;Daily Limit         ;Integer       ;CaptionML=[ENU=Daily Limit;
                                                              ESM=L°mite diario;
                                                              FRC=Limite quotidienne;
                                                              ENC=Daily Limit];
                                                   Editable=No }
    { 18  ;   ;Daily Count         ;Integer       ;CaptionML=[ENU=Daily Count;
                                                              ESM=Recuento diario;
                                                              FRC=Nombre quotidien;
                                                              ENC=Daily Count];
                                                   Editable=No }
    { 19  ;   ;Latest Datetime     ;DateTime      ;CaptionML=[ENU=Latest Datetime;
                                                              ESM=Èltima fecha y hora;
                                                              FRC=Derniäre date et heure;
                                                              ENC=Latest Datetime];
                                                   Editable=No }
    { 20  ;   ;Access Token Due DateTime;DateTime ;CaptionML=[ENU=Access Token Due DateTime;
                                                              ESM=Fecha y hora de vencimiento de token de acceso;
                                                              FRC=Date/heure ÇchÇance du jeton d'accäs;
                                                              ENC=Access Token Due DateTime];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      OAuth20Mgt@1000 : Codeunit 1140;

    LOCAL PROCEDURE CheckAndAppendURLPath@1(VAR value@1000 : Text);
    BEGIN
      IF value <> '' THEN
        IF value[1] <> '/' THEN
          value := '/' + value;
    END;

    PROCEDURE SetToken@22(VAR TokenKey@1001 : GUID;TokenValue@1000 : Text);
    VAR
      ServicePassword@1002 : Record 1261;
    BEGIN
      IF ISNULLGUID(TokenKey) OR NOT ServicePassword.GET(TokenKey) THEN BEGIN
        ServicePassword.SavePassword(TokenValue);
        ServicePassword.INSERT(TRUE);
        TokenKey := ServicePassword.Key;
      END ELSE BEGIN
        ServicePassword.SavePassword(TokenValue);
        ServicePassword.MODIFY;
      END;
    END;

    PROCEDURE GetToken@21(TokenKey@1001 : GUID) : Text;
    VAR
      ServicePassword@1000 : Record 1261;
    BEGIN
      IF ServicePassword.GET(TokenKey) THEN
        EXIT(ServicePassword.GetPassword);
    END;

    LOCAL PROCEDURE DeleteToken@20(TokenKey@1000 : GUID);
    VAR
      ServicePassword@1001 : Record 1261;
    BEGIN
      IF ServicePassword.GET(TokenKey) THEN
        ServicePassword.DELETE;
    END;

    [External]
    PROCEDURE RequestAuthorizationCode@2();
    VAR
      Processed@1000 : Boolean;
    BEGIN
      OAuth20Mgt.CheckEncryption;

      OnBeforeRequestAuthoizationCode(Rec,Processed);
      IF Processed THEN
        EXIT;

      OAuth20Mgt.RequestAuthorizationCode(Rec);
    END;

    [External]
    PROCEDURE RequestAccessToken@8(VAR MessageText@1006 : Text;AuthorizationCode@1000 : Text) Result : Boolean;
    VAR
      Processed@1002 : Boolean;
    BEGIN
      OnBeforeRequestAccessToken(Rec,AuthorizationCode,Result,MessageText,Processed);
      IF NOT Processed THEN
        Result := OAuth20Mgt.RequestAndSaveAccessToken(Rec,MessageText,AuthorizationCode);

      OnAfterRequestAccessToken(Rec,Result,MessageText);
    END;

    [External]
    PROCEDURE RefreshAccessToken@4(VAR MessageText@1000 : Text) Result : Boolean;
    VAR
      Processed@1002 : Boolean;
    BEGIN
      OnBeforeRefreshAccessToken(Rec,Result,MessageText,Processed);
      IF NOT Processed THEN
        Result := OAuth20Mgt.RefreshAndSaveAccessToken(Rec,MessageText);
    END;

    [External]
    PROCEDURE InvokeRequest@3(RequestJSON@1007 : Text;VAR ResponseJSON@1005 : Text;VAR HttpError@1006 : Text;RetryOnCredentialsFailure@1001 : Boolean) Result : Boolean;
    VAR
      Processed@1000 : Boolean;
    BEGIN
      OnBeforeInvokeRequest(Rec,RequestJSON,ResponseJSON,HttpError,Result,Processed,RetryOnCredentialsFailure);
      IF NOT Processed THEN
        Result := OAuth20Mgt.InvokeRequestBasic(Rec,RequestJSON,ResponseJSON,HttpError,RetryOnCredentialsFailure);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterRequestAccessToken@100(OAuth20Setup@1000 : Record 1140;Result@1002 : Boolean;VAR MessageText@1001 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRequestAuthoizationCode@5(OAuth20Setup@1000 : Record 1140;VAR Processed@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRefreshAccessToken@7(VAR OAuth20Setup@1000 : Record 1140;VAR Result@1003 : Boolean;VAR MessageText@1002 : Text;VAR Processed@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRequestAccessToken@9(VAR OAuth20Setup@1000 : Record 1140;AuthorizationCode@1001 : Text;VAR Result@1003 : Boolean;VAR MessageText@1004 : Text;VAR Processed@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInvokeRequest@23(VAR OAuth20Setup@1003 : Record 1140;RequestJSON@1002 : Text;VAR ResponseJSON@1001 : Text;VAR HttpError@1000 : Text;VAR Result@1006 : Boolean;VAR Processed@1004 : Boolean;RetryOnCredentialsFailure@1005 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

