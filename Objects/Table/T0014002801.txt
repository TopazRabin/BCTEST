OBJECT Table 14002801 RF Setup
{
  OBJECT-PROPERTIES
  {
    Date=08/21/18;
    Time=12:00:00 PM;
    Version List=RF1.50.13;
  }
  PROPERTIES
  {
    CaptionML=ENU=RF Setup;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code20        ;TableRelation="Warehouse Employee";
                                                   CaptionML=ENU=Primary Key }
    { 11  ;   ;Screen Height       ;Integer       ;InitValue=12;
                                                   CaptionML=ENU=Screen Height }
    { 12  ;   ;Screen Width        ;Integer       ;InitValue=30;
                                                   CaptionML=ENU=Screen Width }
    { 13  ;   ;ADCS Server IP      ;Code20        ;CaptionML=ENU=ADCS Server IP }
    { 14  ;   ;ADCS Port No.       ;Integer       ;InitValue=6666;
                                                   CaptionML=ENU=ADCS Port No. }
    { 15  ;   ;Working Folder      ;Text250       ;OnValidate=BEGIN
                                                                IF STRLEN("Working Folder") > 0 THEN
                                                                  IF COPYSTR("Working Folder",STRLEN("Working Folder")) = '\' THEN
                                                                    "Working Folder" := COPYSTR("Working Folder",1,STRLEN("Working Folder") - 1);
                                                              END;

                                                   CaptionML=ENU=Working Folder }
    { 16  ;   ;Data Capture Nos.   ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Data Capture Nos. }
    { 17  ;   ;Availabilty Bin Order;Option       ;InitValue=Pick - Receive - Other;
                                                   CaptionML=ENU=Availabilty Bin Order;
                                                   OptionCaptionML=ENU=Pick,Pick - Receive,Pick - Other,Pick - Receive - Other,Pick - Other - Receive;
                                                   OptionString=Pick,Pick - Receive,Pick - Other,Pick - Receive - Other,Pick - Other - Receive }
    { 18  ;   ;Load NAS Objects Cache;Boolean     ;CaptionML=ENU=Load NAS Objects Cache }
    { 21  ;   ;Save XML Documents  ;Boolean       ;OnValidate=BEGIN
                                                                IF "Save XML Documents" THEN BEGIN
                                                                  TESTFIELD("Primary Key",'');
                                                                  TESTFIELD("Save XML Path");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Save XML Documents }
    { 22  ;   ;Save XML Path       ;Text250       ;OnValidate=BEGIN
                                                                IF "Save XML Path" = '' THEN
                                                                  TESTFIELD("Save XML Documents",FALSE)
                                                                ELSE
                                                                  TESTFIELD("Primary Key",'');
                                                              END;

                                                   CaptionML=ENU=Save XML Path }
    { 24  ;   ;Put-Away Worksheet Template;Code10 ;TableRelation="Whse. Worksheet Template".Name WHERE (Type=CONST(Put-away));
                                                   CaptionML=ENU=Put-Away Worksheet Template }
    { 25  ;   ;Put-Away Worksheet Name;Code10     ;TableRelation="Whse. Worksheet Name".Name WHERE (Worksheet Template Name=FIELD(Put-Away Worksheet Template));
                                                   CaptionML=ENU=Put-Away Worksheet Name }
    { 26  ;   ;Movement Worksheet Template;Code10 ;TableRelation="Whse. Worksheet Template".Name WHERE (Type=CONST(Movement));
                                                   CaptionML=ENU=Movement Worksheet Template }
    { 27  ;   ;Movement Worksheet Name;Code10     ;TableRelation="Whse. Worksheet Name".Name WHERE (Worksheet Template Name=FIELD(Movement Worksheet Template));
                                                   CaptionML=ENU=Movement Worksheet Name }
    { 28  ;   ;Movement Item Journal Template;Code10;
                                                   TableRelation="Item Journal Template".Name WHERE (Type=CONST(Transfer));
                                                   CaptionML=ENU=Movement Item Journal Template }
    { 29  ;   ;Movement Item Journal Name;Code10  ;TableRelation="Item Journal Batch".Name WHERE (Journal Template Name=FIELD(Movement Item Journal Template));
                                                   CaptionML=ENU=Movement Item Journal Name }
    { 30  ;   ;Register Dyn. Move as One Move;Boolean;
                                                   InitValue=Yes;
                                                   CaptionML=ENU=Register Dyn. Move as One Move }
    { 41  ;   ;Warehouse Activity Batch Post;Boolean;
                                                   CaptionML=ENU=Warehouse Activity Batch Post }
    { 42  ;   ;Warehouse Request Pick Batch;Boolean;
                                                   CaptionML=ENU=Warehouse Request Pick Batch }
    { 43  ;   ;Warehouse Request Ship Batch;Boolean;
                                                   CaptionML=ENU=Warehouse Request Ship Batch }
    { 44  ;   ;Update Interval (Seconds);Integer  ;CaptionML=ENU=Update Interval (Seconds) }
    { 45  ;   ;Last Batch Update Date;Date        ;CaptionML=ENU=Last Batch Update Date;
                                                   Editable=No }
    { 46  ;   ;Last Batch Update Time;Time        ;CaptionML=ENU=Last Batch Update Time;
                                                   Editable=No }
    { 47  ;   ;Whse. Activity Group Nos.;Code20   ;TableRelation="No. Series";
                                                   CaptionML=ENU=Whse. Activity Group Nos. }
    { 48  ;   ;NAS Server Name     ;Text100       ;CaptionML=ENU=NAS Server Name }
    { 49  ;   ;NAS Nettype         ;Text30        ;CaptionML=ENU=NAS Nettype }
    { 50  ;   ;NAS Startup Parameter;Text30       ;InitValue=ADCS ADCSID=NAS1;
                                                   CaptionML=ENU=NAS Startup Parameter }
    { 51  ;   ;Database Server Name;Text30        ;CaptionML=ENU=Database Server Name }
    { 52  ;   ;Database Name       ;Text30        ;CaptionML=ENU=Database Name }
    { 53  ;   ;Default Outbound WhseReqFilter;Code10;
                                                   TableRelation="Outbound Whse. Request Filter";
                                                   CaptionML=ENU=Default Outbound WhseReqFilter }
    { 56  ;   ;Receiving Batch Post;Boolean       ;CaptionML=ENU=Receiving Batch Post }
    { 57  ;   ;Consumption Batch Post;Boolean     ;CaptionML=ENU=Consumption Batch Post }
    { 58  ;   ;Output Batch Post   ;Boolean       ;CaptionML=ENU=Output Batch Post }
    { 59  ;   ;Repeat Batch Post if Error;Boolean ;CaptionML=ENU=Repeat Batch Post if Error }
    { 60  ;   ;Repeats of Batch Post if Error;Integer;
                                                   InitValue=5;
                                                   CaptionML=ENU=Repeats of Batch Post if Error }
    { 61  ;   ;Intervall (Sec)     ;Decimal       ;InitValue=5;
                                                   CaptionML=ENU=Intervall (Sec);
                                                   DecimalPlaces=3:3 }
    { 62  ;   ;Next Pallet No.     ;Code20        ;CaptionML=ENU=Next Pallet No. }
    { 63  ;   ;Pallet Nos          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Pallet Nos }
    { 64  ;   ;Force Single Item Pallets;Boolean  ;OnValidate=BEGIN
                                                                IF (xRec."Force Single Item Pallets" <> "Force Single Item Pallets") AND
                                                                   "Force Single Item Pallets"
                                                                THEN BEGIN
                                                                  "Force Single Item Boxes" := TRUE;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Force Single Item Pallets }
    { 65  ;   ;Force Single Item Boxes;Boolean    ;CaptionML=ENU=Force Single Item Boxes }
    { 66  ;   ;Next Box No.        ;Code20        ;CaptionML=ENU=Next Box No. }
    { 67  ;   ;Box Nos             ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Box Nos }
    { 68  ;   ;Next Movement No.   ;Code10        ;CaptionML=ENU=Next Movement No. }
    { 69  ;   ;Next Reg. Movem. No.;Code10        ;CaptionML=ENU=Next Reg. Movem. No. }
    { 70  ;   ;Movement No. as Reason Code;Boolean;CaptionML=ENU=Movement No. as Reason Code }
    { 71  ;   ;Del. Movement after Reg.;Boolean   ;CaptionML=ENU=Del. Movement after Reg. }
    { 72  ;   ;Copy EShip fields to OWR;Boolean   ;CaptionML=ENU=Copy EShip fields to OWR }
    { 73  ;   ;Intial QA Status    ;Code10        ;TableRelation="LP QA Status Option".Status;
                                                   CaptionML=ENU=Intial QA Status }
    { 74  ;   ;Whse. Phys. Inv. Jnl. Templ.;Code10;TableRelation="Warehouse Journal Template".Name;
                                                   CaptionML=ENU=Whse. Phys. Inv. Jnl. Templ. }
    { 75  ;   ;Whse. Phys. Inv. Jnl. Name;Code10  ;TableRelation="Warehouse Journal Batch".Name WHERE (Journal Template Name=FIELD(Whse. Phys. Inv. Jnl. Templ.));
                                                   CaptionML=ENU=Whse. Phys. Inv. Jnl. Name }
    { 76  ;   ;Use Registered Data Capture;Boolean;CaptionML=ENU=Use Registered Data Capture }
    { 77  ;   ;Pallet Label (LP)   ;Code20         }
    { 78  ;   ;Next FlowRack Temp Tote No;Code10  ;CaptionML=ENU=Next FlowRack Temp Tote No }
    { 79  ;   ;Split Line Spacing  ;Integer       ;CaptionML=ENU=Split Line Spacing }
    { 80  ;   ;Skip Priority Pick with Shorts;Boolean;
                                                   CaptionML=ENU=Skip Priority Pick with Shorts }
    { 81  ;   ;Delete Shipment Lines Handled;Boolean;
                                                   CaptionML=ENU=Delete Shipment Lines Handled }
    { 82  ;   ;Auto Delete Warehouse Shipment;Boolean;
                                                   CaptionML=ENU=Auto Delete Warehouse Shipment }
    { 83  ;   ;Enable RF           ;Boolean       ;CaptionML=ENU=Enable RF }
    { 84  ;   ;Warehouse Item Tracking;Boolean    ;CaptionML=ENU=Warehouse Item Tracking }
    { 85  ;   ;Optimize Unit of Meas. Picking;Boolean;
                                                   CaptionML=ENU=Optimize Unit of Meas. Picking }
    { 86  ;   ;Auto Post Break-Bulk;Boolean       ;CaptionML=ENU=Auto Post Break-Bulk }
    { 87  ;   ;ADCS Plugin Type    ;Option        ;CaptionML=ENU=ADCS Plugin Type;
                                                   OptionCaptionML=ENU=Message Queue,Socket,Encrypted Socket;
                                                   OptionString=Message Queue,Socket,Encrypted Socket }
    { 88  ;   ;Show WMS Fields on Whse. Docs.;Boolean;
                                                   InitValue=Yes;
                                                   CaptionML=ENU=Show WMS Fields on Whse. Docs. }
    { 89  ;   ;Show Lot No. on Whse. Docs.;Boolean;CaptionML=ENU=Show Lot No. on Whse. Docs. }
    { 90  ;   ;Show Ser. No. on Whse. Docs.;Boolean;
                                                   CaptionML=ENU=Show Ser. No. on Whse. Docs. }
    { 91  ;   ;Enable OWR          ;Boolean       ;CaptionML=ENU=Enable OWR }
    { 92  ;   ;Enable Bin Count    ;Boolean       ;CaptionML=ENU=Enable Bin Count }
    { 93  ;   ;Bin Count Nos.      ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Bin Count Nos. }
    { 94  ;   ;Bin Count Line Nos. ;Code10        ;TableRelation="No. Series";
                                                   OnValidate=VAR
                                                                NoSeriesLine@1240020000 : Record 309;
                                                              BEGIN
                                                                NoSeriesLine.RESET;
                                                                NoSeriesLine.SETRANGE("Series Code","Bin Count Line Nos.");
                                                                IF NoSeriesLine.FIND('-') THEN
                                                                  IF STRLEN(NoSeriesLine."Starting No.") > 10 THEN
                                                                    ERROR(Text018);
                                                              END;

                                                   CaptionML=ENU=Bin Count Line Nos. }
    { 95  ;   ;Calculate Reserved Qty to Pick;Boolean;
                                                   CaptionML=ENU=Calculate Reserved Qty to Pick }
    { 96  ;   ;Enable OWR Replenishments;Boolean  ;CaptionML=ENU=Enable OWR Replenishments }
    { 97  ;   ;Replen Worksheet Name;Code10       ;TableRelation="Whse. Worksheet Name".Name WHERE (Worksheet Template Name=FIELD(Movement Worksheet Template));
                                                   CaptionML=ENU=Replen Worksheet Name }
    { 98  ;   ;Review OWR Replenishments;Boolean  ;CaptionML=ENU=Review OWR Replenishments }
    { 101 ;   ;Pallet Journal Template;Code10     ;TableRelation="Pallet Journal Template";
                                                   CaptionML=ENU=Pallet Journal Template }
    { 102 ;   ;Use Pallet Journal for LP Phys;Boolean;
                                                   CaptionML=ENU=Use Pallet Journal for LP Phys }
    { 103 ;   ;Use Pallet No. Series;Boolean      ;CaptionML=ENU=Use Pallet No. Series }
    { 200 ;   ;Default OWR Emp. Setup Code;Code50 ;TableRelation="RF Employee Setup";
                                                   OnValidate=VAR
                                                                RFEmployeeSetup@1240020000 : Record 14002802;
                                                              BEGIN
                                                                RFEmployeeSetup.RESET;
                                                                IF NOT RFEmployeeSetup.GET("Default OWR Emp. Setup Code") THEN
                                                                  ERROR(Text200);
                                                              END;

                                                   CaptionML=ENU=Default RF Emp. Setup Code }
    { 201 ;   ;Enable Wave Picks   ;Boolean       ;OnValidate=VAR
                                                                ApplicationManagement@1240020002 : Codeunit 1;
                                                                IsExtension@1240020000 : Boolean;
                                                              BEGIN
                                                                CheckIsExtension(IsExtension);
                                                                IF "Enable Wave Picks" THEN
                                                                  IF IsExtension AND (NOT TestOverride) THEN
                                                                    ERROR(
                                                                      STRSUBSTNO(
                                                                        Text201,ApplicationManagement.ApplicationVersion,ApplicationManagement.ApplicationBuild));
                                                              END;

                                                   CaptionML=ENU=Enable Wave Picks }
    { 202 ;   ;Enable Combined Picks;Boolean      ;CaptionML=ENU=Enable Combined Picks }
    { 203 ;   ;Enable Extra Picks  ;Boolean       ;CaptionML=ENU=Enable Extra Picks }
    { 204 ;   ;Enable Priority Picks;Boolean      ;CaptionML=ENU=Enable Priority Picks }
    { 205 ;   ;Enable Per Zone     ;Boolean       ;OnValidate=VAR
                                                                ApplicationManagement@1240020000 : Codeunit 1;
                                                                IsExtension@1240020001 : Boolean;
                                                              BEGIN
                                                                CheckIsExtension(IsExtension);
                                                                IF "Enable Per Zone" THEN
                                                                  IF IsExtension AND (NOT TestOverride) THEN
                                                                    ERROR(
                                                                      STRSUBSTNO(
                                                                        Text201,ApplicationManagement.ApplicationVersion,ApplicationManagement.ApplicationBuild));
                                                              END;

                                                   CaptionML=ENU=Enable Per Zone }
    { 206 ;   ;Enable Pick-from Filters;Boolean   ;OnValidate=VAR
                                                                ApplicationManagement@1240020000 : Codeunit 1;
                                                                IsExtension@1240020001 : Boolean;
                                                              BEGIN
                                                                CheckIsExtension(IsExtension);
                                                                IF "Enable Pick-from Filters" THEN
                                                                  IF IsExtension AND (NOT TestOverride) THEN
                                                                    ERROR(
                                                                      STRSUBSTNO(
                                                                        Text201,ApplicationManagement.ApplicationVersion,ApplicationManagement.ApplicationBuild));
                                                              END;

                                                   CaptionML=ENU=Enable Pick-from Filters }
    { 207 ;   ;Enable Line Date Filters;Boolean   ;CaptionML=ENU=Enable Line Date Filters }
    { 208 ;   ;Enable Limits       ;Boolean       ;CaptionML=ENU=Enable Limits }
    { 209 ;   ;Enable Whse. Activity Groups;Boolean;
                                                   CaptionML=ENU=Enable Whse. Activity Groups }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      RFSetupRetrieved@1000 : Boolean;
      Window@1001 : Dialog;
      Text006@1240030005 : TextConst 'ENU=Restart the services';
      PickBinTypeFilter@1240030011 : Text[250];
      ReceiveBinTypeFilter@1240030013 : Text[250];
      PutBinTypeFilter@1240020000 : Text[250];
      OtherBinTypeFilter@1240030012 : Text[250];
      AllBinTypeFilter@1240030016 : Text[250];
      BinTypeFilterCalculated@1240030014 : Boolean;
      Test012@1240030015 : TextConst 'ENU=Bin Type Filter must be calculated first.';
      Text012@1002 : TextConst 'ENU=Version (%3)(Radio Frequency (%5))\\';
      Text014@1240030018 : TextConst 'ENU=Wrong database connection URL "%1".';
      Text017@1240030021 : TextConst 'ENU=The objects to Utilities has not been downloaded and installed in the database. Please contact your System Administrator';
      Text018@1240020001 : TextConst 'ENU=The number range used by the Bin Count Line No. Series must be not be greater than 10 characters in length.';
      Text020@1240020005 : TextConst 'ENU=Pallet No. Series is not defined in RF Setup.';
      Text021@1240020006 : TextConst 'ENU=Next Pallet No. is not defined in RF Setup.';
      Text022@1240020007 : TextConst 'ENU=Next RF Receipt No. is not defined in Data Capture Processing Setup.';
      Text023@1240020008 : TextConst 'ENU=Next Pallet Label No. is not defined in Data Capture Processing Setup.';
      Text200@1240020002 : TextConst 'ENU=The Employee Setup Code does not exist.';
      Text201@1240020003 : TextConst 'ENU=Not available in the OWR Extension version for %1 %2.';
      TestOverride@1240020004 : Boolean;

    [External]
    PROCEDURE GetRFSetup@100();
    VAR
      RFSetup@1000 : Record 14002801;
    BEGIN
      IF RFSetupRetrieved THEN
        EXIT;

      IF NOT RFSetup.GET THEN
        RFSetup.INIT;

      Rec := RFSetup;
      RFSetupRetrieved := TRUE;
    END;

    PROCEDURE OpenUtilitySetup@12(LanguageCode@1240030002 : Code[10]);
    VAR
      Object@1240030000 : Record 2000000001;
    BEGIN
      IF NOT Object.GET(Object.Type::Page,'',14100351) THEN
        ERROR(Text017);

      PAGE.RUN(14100351);
    END;

    PROCEDURE ExportOnlineHelp@6();
    VAR
      Object@1240030000 : Record 2000000001;
    BEGIN
      IF NOT Object.GET(Object.Type::Codeunit,'',14100351) THEN
        ERROR(Text017);

      CODEUNIT.RUN(14100351);
    END;

    PROCEDURE FindParameter@1240030009(CurrFormURL@1240030000 : Text[1000];SearchText@1240030002 : Text[30];GiveError@1240030004 : Boolean) : Text[1000];
    VAR
      TempText@1240030003 : Text[1000];
      Pos@1240030001 : Integer;
    BEGIN
      Pos := STRPOS(UPPERCASE(CurrFormURL),UPPERCASE(SearchText));
      IF Pos = 0 THEN
        IF GiveError THEN
          ERROR(Text014,CurrFormURL)
        ELSE
          EXIT('');

      TempText := COPYSTR(CurrFormURL,Pos + STRLEN(SearchText));

      Pos := STRPOS(TempText,'&');
      IF Pos = 0 THEN
        Pos := STRLEN(TempText) + 1;
      IF Pos IN [0,1] THEN
        ERROR(Text014,CurrFormURL);

      TempText := COPYSTR(TempText,1,Pos - 1);
      EXIT(TempText);
    END;

    [External]
    PROCEDURE CalculateBinTypeFilters@1240030002() : Boolean;
    VAR
      BinType@1240030000 : Record 7303;
    BEGIN
      IF BinTypeFilterCalculated THEN
        EXIT(TRUE);

      BinType.RESET;
      IF BinType.FIND('-') THEN
        REPEAT
          CASE TRUE OF
            BinType.Ship:
              ;
            BinType.Pick:
              IF PickBinTypeFilter = '' THEN
                PickBinTypeFilter := BinType.Code
              ELSE
                IF STRLEN(PickBinTypeFilter) + STRLEN(BinType.Code) + 1 <=
                   MAXSTRLEN(PickBinTypeFilter)
                THEN
                  PickBinTypeFilter := PickBinTypeFilter + '|' + BinType.Code
                ELSE
                  EXIT(FALSE);
            BinType.Receive:
              IF ReceiveBinTypeFilter = '' THEN
                ReceiveBinTypeFilter := BinType.Code
              ELSE
                IF STRLEN(ReceiveBinTypeFilter) + STRLEN(BinType.Code) + 1 <=
                   MAXSTRLEN(ReceiveBinTypeFilter)
                THEN
                  ReceiveBinTypeFilter := ReceiveBinTypeFilter + '|' + BinType.Code
                ELSE
                  EXIT(FALSE);
            BinType."Put Away":
              BEGIN
                IF PutBinTypeFilter = '' THEN
                  PutBinTypeFilter := BinType.Code
                ELSE
                  IF STRLEN(PutBinTypeFilter) + STRLEN(BinType.Code) + 1 <=
                     MAXSTRLEN(PutBinTypeFilter)
                  THEN
                    PutBinTypeFilter := PutBinTypeFilter + '|' + BinType.Code
                  ELSE
                    EXIT(FALSE);

                IF OtherBinTypeFilter = '' THEN
                  OtherBinTypeFilter := BinType.Code
                ELSE
                  IF STRLEN(OtherBinTypeFilter) + STRLEN(BinType.Code) + 1 <=
                     MAXSTRLEN(OtherBinTypeFilter)
                  THEN
                    OtherBinTypeFilter := OtherBinTypeFilter + '|' + BinType.Code
                  ELSE
                    EXIT(FALSE);
              END;
            ELSE
              IF OtherBinTypeFilter = '' THEN
                OtherBinTypeFilter := BinType.Code
              ELSE
                IF STRLEN(OtherBinTypeFilter) + STRLEN(BinType.Code) + 1 <=
                   MAXSTRLEN(OtherBinTypeFilter)
                THEN
                  OtherBinTypeFilter := OtherBinTypeFilter + '|' + BinType.Code
                ELSE
                  EXIT(FALSE);
          END;
        UNTIL BinType.NEXT = 0;

      AllBinTypeFilter := PickBinTypeFilter;
      IF ReceiveBinTypeFilter <> '' THEN
        IF STRLEN(AllBinTypeFilter) + STRLEN(ReceiveBinTypeFilter) + 1 <= MAXSTRLEN(AllBinTypeFilter) THEN
          AllBinTypeFilter := AllBinTypeFilter + '|' + ReceiveBinTypeFilter
        ELSE
          EXIT(FALSE);
      IF OtherBinTypeFilter <> '' THEN
        IF STRLEN(AllBinTypeFilter) + STRLEN(OtherBinTypeFilter) + 1 <= MAXSTRLEN(AllBinTypeFilter) THEN
          AllBinTypeFilter := AllBinTypeFilter + '|' + OtherBinTypeFilter
        ELSE
          EXIT(FALSE);

      BinTypeFilterCalculated := TRUE;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE GetPickBinTypeFilter@1240030004() : Text[250];
    BEGIN
      IF NOT BinTypeFilterCalculated THEN
        ERROR(Test012);

      EXIT(PickBinTypeFilter);
    END;

    [External]
    PROCEDURE GetReceiveBinTypeFilter@1240030006() : Text[250];
    BEGIN
      IF NOT BinTypeFilterCalculated THEN
        ERROR(Test012);

      EXIT(ReceiveBinTypeFilter);
    END;

    [External]
    PROCEDURE GetOtherBinTypeFilter@1240030005() : Text[250];
    BEGIN
      IF NOT BinTypeFilterCalculated THEN
        ERROR(Test012);

      EXIT(OtherBinTypeFilter);
    END;

    [External]
    PROCEDURE GetAllBinTypeFilter@1240030003() : Text[250];
    BEGIN
      IF NOT BinTypeFilterCalculated THEN
        ERROR(Test012);

      EXIT(AllBinTypeFilter);
    END;

    [External]
    PROCEDURE GetPutBinTypeFilter@1240020000() : Text[250];
    BEGIN
      IF NOT BinTypeFilterCalculated THEN
        ERROR(Test012);

      EXIT(PutBinTypeFilter);
    END;

    [External]
    PROCEDURE GetFirstAssemblyOrderNo@1240020001(CurrentWarehouseRequest@1240020000 : Record 5765;VAR AssemblyOrderNo@1240020004 : Code[20]) : Boolean;
    VAR
      SalesLine@1240020001 : Record 37;
      AssemblyHeader@1240020002 : Record 900;
      ATOLink@1240020003 : Record 904;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document No.",CurrentWarehouseRequest."Source No.");
      SalesLine.SETRANGE("Document Type",CurrentWarehouseRequest."Source Subtype");
      SalesLine.SETRANGE("Location Code",CurrentWarehouseRequest."Location Code");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETFILTER("Qty. to Assemble to Order",'<>0');
      SalesLine.SETFILTER("Outstanding Quantity",'<>0');
      IF SalesLine.FINDFIRST THEN BEGIN
        ATOLink.RESET;
        ATOLink.SETCURRENTKEY(Type,"Document Type","Document No.","Document Line No.");
        ATOLink.SETRANGE(Type,ATOLink.Type::Sale);
        ATOLink.SETRANGE("Document Type",ATOLink."Document Type"::Order);
        ATOLink.SETRANGE("Document No.",CurrentWarehouseRequest."Source No.");
        ATOLink.SETRANGE("Document Line No.",SalesLine."Line No.");
        IF ATOLink.FINDFIRST THEN BEGIN
          AssemblyOrderNo := ATOLink."Assembly Document No.";
          EXIT(TRUE);
        END ELSE
          EXIT(FALSE);
      END;
    END;

    [External]
    PROCEDURE GetNextPalletNo@1240020003(NextPalletNo@1240020003 : Boolean;NextRFReceiveNo@1240020004 : Boolean;NextPalletLabelNo@1240020005 : Boolean) : Code[20];
    VAR
      RFSetup@1240020001 : Record 14002801;
      DataCaptProcSetup@1240020006 : Record 14002982;
      NoSeriesMgt@1240020000 : Codeunit 396;
      PalletNo@1240020002 : Code[20];
    BEGIN
      RFSetup.GetRFSetup;
      IF RFSetup."Use Pallet No. Series" THEN BEGIN
        IF RFSetup."Pallet Nos" <> '' THEN BEGIN
          PalletNo := NoSeriesMgt.GetNextNo(RFSetup."Pallet Nos",WORKDATE,TRUE);
          EXIT(PalletNo);
        END ELSE
          ERROR(Text020);
      END ELSE BEGIN
        CASE TRUE OF
          NextPalletNo:
            BEGIN
              IF RFSetup."Next Pallet No." <> '' THEN BEGIN
                RFSetup.LOCKTABLE(TRUE);
                PalletNo := RFSetup."Next Pallet No.";
                RFSetup."Next Pallet No." := INCSTR(RFSetup."Next Pallet No.");
                RFSetup.MODIFY;
                EXIT(PalletNo);
              END ELSE
                ERROR(Text021);
            END;
          NextRFReceiveNo:
            BEGIN
              DataCaptProcSetup.GET('');
              IF DataCaptProcSetup."Next RF Receipt No." <> '' THEN BEGIN
                DataCaptProcSetup.LOCKTABLE(TRUE);
                PalletNo := DataCaptProcSetup."Next RF Receipt No.";
                DataCaptProcSetup."Next RF Receipt No." := INCSTR(DataCaptProcSetup."Next RF Receipt No.");
                DataCaptProcSetup.MODIFY;
                EXIT(PalletNo);
              END ELSE
                ERROR(Text022);
            END;
          NextPalletLabelNo:
            BEGIN
              DataCaptProcSetup.GET('');
              IF DataCaptProcSetup."Next Pallet Label No." <> '' THEN BEGIN
                DataCaptProcSetup.LOCKTABLE(TRUE);
                PalletNo := DataCaptProcSetup."Next Pallet Label No.";
                DataCaptProcSetup."Next Pallet Label No." := INCSTR(DataCaptProcSetup."Next Pallet Label No.");
                DataCaptProcSetup.MODIFY;
                EXIT(PalletNo);
              END ELSE
                ERROR(Text023);
            END;
          ELSE
            ERROR(Text020);
        END;
      END;
    END;

    [External]
    PROCEDURE AboutRF@1240030001();
    VAR
      Object@1240030000 : Record 2000000001;
      ApplicationManagement@1240030002 : Codeunit 1;
      HighestVersion@1240030001 : Text[250];
      OSVersionText@1240040000 : Text[250];
    BEGIN
      HighestVersion := '';

      Object.RESET;
      Object.SETFILTER("Version List",'RF1*');
      IF Object.FIND('-') THEN
        REPEAT
          IF Object."Version List" > HighestVersion THEN
            HighestVersion := Object."Version List";
        UNTIL Object.NEXT = 0;

      IF NOT ISSERVICETIER THEN
        OSVersionText := OSVERSION;

      MESSAGE(
        '%1\\' + '%2\\' + Text012 + '%4',
        COMPANYNAME,SERIALNUMBER,ApplicationManagement.ApplicationVersion,OSVersionText,HighestVersion);
    END;

    [External]
    PROCEDURE TestCodeunitOverride@1240020002(NewTestOverride@1240020000 : Boolean);
    BEGIN
      TestOverride := NewTestOverride;
    END;

    [Integration]
    [External]
    PROCEDURE CheckIsExtension@1240020040(VAR IsExtension@1240020001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

