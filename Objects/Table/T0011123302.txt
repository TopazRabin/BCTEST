OBJECT Table 11123302 SC - Operation
{
  OBJECT-PROPERTIES
  {
    Date=07/01/20;
    Time=12:00:00 AM;
    Modified=Yes;
    Version List=SCW18.3.1,SCW19.2.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Function to Call;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code50        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 2   ;   ;Operation Name      ;Text50        ;OnValidate=BEGIN
                                                                IF "Operation Name" <> xRec."Operation Name" THEN BEGIN
                                                                  IF "Operation Name" = '' THEN
                                                                    ERROR(Text11123302,FIELDCAPTION("Operation Name"));
                                                                  Code := "Operation Name";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Function Name }
    { 3   ;   ;Codeunit ID         ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=ENU=Codeunit ID }
    { 4   ;   ;Codeunit Name       ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Name" WHERE (Object Type=CONST(Codeunit),
                                                                                                             Object ID=FIELD(Codeunit ID)));
                                                   CaptionML=ENU=Codeunit Name;
                                                   Editable=No }
    { 5   ;   ;Internal Function   ;Boolean       ;CaptionML=ENU=Internal Function }
    { 6   ;   ;Description         ;Text250       ;CaptionML=ENU=Description }
    { 7   ;   ;Enabled             ;Boolean       ;InitValue=Yes;
                                                   CaptionML=ENU=Enabled }
    { 11  ;   ;Website ID          ;Code50        ;CaptionML=ENU=Website ID;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Code,Website ID                         ;Clustered=Yes }
    {    ;Codeunit ID,Internal Function            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text11123302@11123302 : TextConst 'ENU=%1 must be specified.';

    PROCEDURE Invoke@11123302();
    BEGIN
      CODEUNIT.RUN("Codeunit ID",Rec);
    END;

    PROCEDURE LookupCodeunitID@11123303(InCodeunitID@11123302 : Integer) : Integer;
    VAR
      AllObjWithCaption@11123304 : Record 2000000058;
      CodeunitList@11123303 : Page 11123318;
    BEGIN
      CLEAR(CodeunitList);

      AllObjWithCaption.FILTERGROUP := 2;
      AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::Codeunit);
      AllObjWithCaption.FILTERGROUP := 0;

      IF "Codeunit ID" <> 0 THEN BEGIN
        AllObjWithCaption."Object Type" := AllObjWithCaption."Object Type"::Codeunit;
        AllObjWithCaption."Object ID" := InCodeunitID;
        AllObjWithCaption.FIND;
      END ELSE
        AllObjWithCaption.FINDFIRST;

      CodeunitList.LOOKUPMODE := TRUE;
      CodeunitList.SETTABLEVIEW(AllObjWithCaption);
      CodeunitList.SETRECORD(AllObjWithCaption);
      IF CodeunitList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        CodeunitList.GETRECORD(AllObjWithCaption);
        EXIT(AllObjWithCaption."Object ID");
      END;
      EXIT(InCodeunitID);
    END;

    PROCEDURE SetDefaults@11123304();
    VAR
      Context@11123302 : Codeunit 11123305;
    BEGIN
      InsertFunction('GetEntities',11123309,FALSE,TRUE);
      InsertFunction('GetEntityFields',11123309,FALSE,TRUE);
      InsertFunction('GetParamsDescriptionNo',11123309,TRUE,TRUE);
      InsertFunction('GetSettings',11123311,FALSE,TRUE);
      InsertFunction('GetDefaultCurrency',11123311,FALSE,TRUE);
      InsertFunction('GetAnonymousCustomer',11123311,FALSE,TRUE);

      InsertFunction('GetB2cDefaultCustomer',11123311,FALSE,TRUE);
      InsertFunction('GetCountries',11123311,FALSE,TRUE);

      InsertFunction('GetCurrencies',11123311,FALSE,TRUE);
      InsertFunction('GetTaxNumberFormats',11123311,FALSE,TRUE);
      InsertFunction('TestConnection',11123311,FALSE,TRUE);
      InsertFunction('GetCustomers',11123313,FALSE,TRUE);
      InsertFunction('GetShippingAddresses',11123313,FALSE,TRUE);
      InsertFunction('GetContacts',11123313,FALSE,TRUE);
      InsertFunction('GetSalesPersons',11123313,FALSE,TRUE);
      InsertFunction('CreateShippingAddress',11123313,FALSE,TRUE);
      InsertFunction('GetShippingMethods',11123313,FALSE,TRUE);
      InsertFunction('GetShippingOrigin',11123313,FALSE,TRUE);
      InsertFunction('GetCustomerStatistics',11123313,FALSE,TRUE);
      InsertFunction('GetCustomerStatisticsFields',11123313,FALSE,TRUE);
      InsertFunction('GetUnitsOfMeasure',11123317,FALSE,TRUE);
      InsertFunction('GetPriceInfo',11123317,FALSE,TRUE);
      InsertFunction('GetStockInfo',11123317,FALSE,TRUE);
      InsertFunction('GetVolumePrices',11123317,FALSE,TRUE);
      InsertFunction('HasVolumePrices',11123317,FALSE,TRUE);
      InsertFunction('GetRetailOffers',11123317,FALSE,TRUE);
      InsertFunction('GetProductSuggestions',11123317,FALSE,TRUE);
      InsertFunction('GetAvailableStockForItem',11123318,TRUE,TRUE);
      InsertFunction('GetAvailableStockForVariant',11123318,TRUE,TRUE);
      InsertFunction('FindBarCode',11123318,TRUE,TRUE);
      InsertFunction('GetReturnReasonCodes',11123319,FALSE,TRUE);
      InsertFunction('PayInvoiceOrders',11123319,FALSE,TRUE);
      InsertFunction('UpdateOrderFields',11123320,FALSE,TRUE);


      InsertFunction('GetDefaultCurrency',11123311,FALSE,TRUE);
      InsertFunction('GetLanguages',11123311,FALSE,TRUE);
      InsertFunction('GetRegionalSettings',11123311,FALSE,TRUE);
      InsertFunction('GetVATNumberFormats',11123311,FALSE,TRUE);
      InsertFunction('PromoteQuote',11123320,FALSE,TRUE);
      InsertFunction('SaveReturnOrder',11123320,FALSE,TRUE);

      InsertFunction('CreateShippingAddress',11123313,FALSE,TRUE);
      InsertFunction('GetAllContacts',11123313,FALSE,TRUE);
      InsertFunction('GetAllCustomers',11123313,FALSE,TRUE);
      InsertFunction('GetAllSalesPersons',11123313,FALSE,TRUE);
      InsertFunction('GetContact',11123313,FALSE,TRUE);
      InsertFunction('GetCustomerByContact',11123313,FALSE,TRUE);
      InsertFunction('GetCustomersByIds',11123313,FALSE,TRUE);
      InsertFunction('GetCustomersBySalesPerson',11123313,FALSE,TRUE);
      InsertFunction('GetCustomerShippingAddresses',11123313,FALSE,TRUE);
      InsertFunction('GetShippingAddress',11123313,FALSE,TRUE);
      InsertFunction('GetShippingMethods',11123313,FALSE,TRUE);
      InsertFunction('GetShippingOrigin',11123313,FALSE,TRUE);
      InsertFunction('LoadCustomer',11123313,FALSE,TRUE);
      InsertFunction('LoadSalesPerson',11123313,FALSE,TRUE);
      InsertFunction('SaveContact',11123313,FALSE,TRUE);
      InsertFunction('SaveCustomer',11123313,FALSE,TRUE);
      InsertFunction('SaveSalesPerson',11123313,FALSE,TRUE);

      InsertFunction('GetBomProducts',11123317,FALSE,TRUE);
      InsertFunction('GetChildProductCategories',11123317,FALSE,TRUE);
      InsertFunction('GetProduct',11123317,FALSE,TRUE);
      InsertFunction('GetProductCategories',11123317,FALSE,TRUE);
      InsertFunction('GetProductCategoriesByFilter',11123317,FALSE,TRUE);
      InsertFunction('GetProductCategoriesByIdList',11123317,FALSE,TRUE);
      InsertFunction('GetProductPrepacks',11123317,FALSE,TRUE);
      InsertFunction('GetProductsByCategory',11123317,FALSE,TRUE);
      InsertFunction('GetProductsByFilter',11123317,FALSE,TRUE);
      InsertFunction('GetProductsByIdList',11123317,FALSE,TRUE);
      InsertFunction('GetProductVariants',11123317,FALSE,TRUE);
      InsertFunction('GetRelatedProducts',11123317,FALSE,TRUE);
      InsertFunction('GetVariantComponentGroups',11123317,FALSE,TRUE);
      InsertFunction('GetVariantComponents',11123317,FALSE,TRUE);
      InsertFunction('GetUnitsOfMeasure',11123317,FALSE,TRUE);
      InsertFunction('SearchProducts',11123317,FALSE,TRUE);
      InsertFunction('UpdateProductsInventory',11123317,FALSE,TRUE);

      InsertFunction('GetBOMComponents',11123318,TRUE,TRUE);
      InsertFunction('GetExtVariantComponents',11123318,TRUE,TRUE);
      InsertFunction('GetPrepacks',11123318,TRUE,TRUE);
      InsertFunction('GetRetailOffers',11123318,TRUE,TRUE);
      InsertFunction('GetVariants',11123318,TRUE,TRUE);
      InsertFunction('FindBarCode',11123318,TRUE,TRUE);
      InsertFunction('GetAvailableStockForItem',11123318,TRUE,TRUE);
      InsertFunction('GetAvailableStockForVariant',11123318,TRUE,TRUE);
      InsertFunction('TestItemStatus',11123318,TRUE,TRUE);

      InsertFunction('GetOrder',11123319,FALSE,TRUE);
      InsertFunction('GetOrderHistory',11123319,FALSE,TRUE);
      InsertFunction('GetOrderLines',11123319,FALSE,TRUE);
      InsertFunction('GetOrderShipmentStatuses',11123319,FALSE,TRUE);
      InsertFunction('GetPendingOrders',11123319,FALSE,TRUE);
      InsertFunction('UpdateOrderImportStatuses',11123319,FALSE,TRUE);

      InsertFunction('CalculateBasket',11123320,FALSE,TRUE);
      InsertFunction('SaveOrder',11123320,FALSE,TRUE);
      InsertFunction('UpdateOrder',11123320,FALSE,TRUE);
      InsertFunction('AddOrderSalesLines',11123320,TRUE,TRUE);

      IF Context.PfsAddonIsUsed THEN
        InsertFunction('PFItemStatusIMD',11123340,TRUE,TRUE);
      IF Context.LsObjectsExist THEN
          InsertLsAddonFunctions;

      InsertFunction('CreatePersistedBasket',11123330,FALSE,TRUE);
      InsertFunction('GetPersistedBasket',11123330,FALSE,TRUE);
      InsertFunction('PlacePersistedOrder',11123330,FALSE,TRUE);
      InsertFunction('UpdatePersistedBasket',11123330,FALSE,TRUE);
      InsertFunction('UpdatePersistedBasketLines',11123330,FALSE,TRUE);
      InsertFunction('ClearPersistedBasket',11123330,FALSE,TRUE);
      InsertFunction('DeletePersistedBasket',11123330,FALSE,TRUE);

      InsertFunction('GetProductImages',11123317,FALSE,TRUE);
      InsertFunction('GetProductImageFile',11123317,FALSE,TRUE);
      InsertFunction('GetOrderReport',11123319,FALSE,TRUE);
      InsertFunction('GetAttachmentFile',11123309,FALSE,TRUE);

      IF Context.SanaExtansionIsUsed THEN
        InsertFunction('CheckSupportPersistedBasket',11123388,TRUE,TRUE)
      ELSE
        InsertFunction('CheckSupportPersistedBasket',11123311,TRUE,TRUE);
    END;

    PROCEDURE InsertFunction@11123305(Name@11123302 : Text[50];CodeunitID@11123303 : Integer;InternalFunc@11123304 : Boolean;EnabledFunc@11123305 : Boolean);
    BEGIN
      INIT;
      VALIDATE("Operation Name",Name);
      "Codeunit ID" := CodeunitID;
      "Internal Function" := InternalFunc;
      Enabled := EnabledFunc;
      IF INSERT THEN;
    END;

    PROCEDURE InsertLsAddonFunctions@11123306();
    VAR
      TempOperation@11123303 : TEMPORARY Record 11123302;
    BEGIN
      InsertFunction('LSItemStatusLinkIMD',11123350,TRUE,TRUE);

      TempOperation.INIT;
      TempOperation.VALIDATE("Operation Name",'ChangeOperationsByWebshop');
      TempOperation.INSERT;

      CODEUNIT.RUN(11123350,TempOperation);
    END;

    BEGIN
    END.
  }
}

