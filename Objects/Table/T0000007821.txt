OBJECT Table 7821 MS-QBO Item
{
  OBJECT-PROPERTIES
  {
    Date=11/22/17;
    Time=12:00:00 PM;
    Version List=NAVW111.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               ExtTxtIDIntegrationRecord@1001 : Record 5377;
               RecordRef@1000 : RecordRef;
             BEGIN
               RecordRef.GETTABLE(Rec);
               ExtTxtIDIntegrationRecord.InsertIntegrationRecord(RecordRef);
             END;

    CaptionML=[ENU=MS-QBO Item;
               ESM=MS - Producto de QBO;
               FRC=Article MS-QBO;
               ENC=MS-QBO Item];
  }
  FIELDS
  {
    { 1   ;   ;Id                  ;Text250       ;CaptionML=[ENU=Id;
                                                              ESM=Id.;
                                                              FRC="Code ";
                                                              ENC=Id] }
    { 2   ;   ;SyncToken           ;Text250       ;CaptionML=[ENU=SyncToken;
                                                              ESM=SyncToken;
                                                              FRC=SyncToken;
                                                              ENC=SyncToken] }
    { 3   ;   ;MetaData            ;BLOB          ;CaptionML=[ENU=MetaData;
                                                              ESM=Metadatos;
                                                              FRC=M‚tadonn‚es;
                                                              ENC=MetaData] }
    { 4   ;   ;MetaData CreateTime ;DateTime      ;CaptionML=[ENU=MetaData CreateTime;
                                                              ESM=CreateTime de metadatos;
                                                              FRC=M‚tadonn‚esÿ: CreateTime;
                                                              ENC=MetaData CreateTime] }
    { 5   ;   ;MetaData LastUpdatedTime;DateTime  ;CaptionML=[ENU=MetaData LastUpdatedTime;
                                                              ESM=LastUpdatedTime de metadatos;
                                                              FRC=M‚tadonn‚esÿ: LastUpdatedTime;
                                                              ENC=MetaData LastUpdatedTime] }
    { 6   ;   ;Name                ;Text100       ;CaptionML=[ENU=Name;
                                                              ESM=Nombre;
                                                              FRC=Nom;
                                                              ENC=Name] }
    { 7   ;   ;Sku                 ;Text100       ;CaptionML=[ENU=Sku;
                                                              ESM=UA;
                                                              FRC=Pt de stock;
                                                              ENC=Sku] }
    { 8   ;   ;Description         ;BLOB          ;CaptionML=[ENU=Description;
                                                              ESM=Descripci¢n;
                                                              FRC=Description;
                                                              ENC=Description] }
    { 9   ;   ;Active              ;Boolean       ;CaptionML=[ENU=Active;
                                                              ESM=Activo;
                                                              FRC=Actif;
                                                              ENC=Active] }
    { 10  ;   ;SubItem             ;Boolean       ;CaptionML=[ENU=SubItem;
                                                              ESM=Subelemento;
                                                              FRC=Sous-‚l‚ment;
                                                              ENC=SubItem] }
    { 11  ;   ;ParentRef           ;BLOB          ;CaptionML=[ENU=ParentRef;
                                                              ESM=ParentRef;
                                                              FRC=ParentRef;
                                                              ENC=ParentRef] }
    { 12  ;   ;Level               ;Integer       ;CaptionML=[ENU=Level;
                                                              ESM=Nivel;
                                                              FRC=Niveau;
                                                              ENC=Level] }
    { 13  ;   ;FullyQualifiedName  ;Text250       ;CaptionML=[ENU=FullyQualifiedName;
                                                              ESM=FullyQualifiedName;
                                                              FRC=FullyQualifiedName;
                                                              ENC=FullyQualifiedName] }
    { 14  ;   ;Taxable             ;Boolean       ;CaptionML=[ENU=Taxable;
                                                              ESM=Gravable;
                                                              FRC=Imposable;
                                                              ENC=Taxable] }
    { 15  ;   ;SalesTaxIncluded    ;Boolean       ;CaptionML=[ENU=SalesTaxIncluded;
                                                              ESM=SalesTaxIncluded;
                                                              FRC=SalesTaxIncluded;
                                                              ENC=SalesTaxIncluded] }
    { 16  ;   ;UnitPrice           ;Decimal       ;CaptionML=[ENU=UnitPrice;
                                                              ESM=UnitPrice;
                                                              FRC=UnitPrice;
                                                              ENC=UnitPrice] }
    { 17  ;   ;Type                ;Text250       ;CaptionML=[ENU=Type;
                                                              ESM=Tipo;
                                                              FRC=Type;
                                                              ENC=Type] }
    { 18  ;   ;IncomeAccountRef    ;BLOB          ;CaptionML=[ENU=IncomeAccountRef;
                                                              ESM=IncomeAccountRef;
                                                              FRC=IncomeAccountRef;
                                                              ENC=IncomeAccountRef] }
    { 19  ;   ;ExpenseAccountRef   ;BLOB          ;CaptionML=[ENU=ExpenseAccountRef;
                                                              ESM=ExpenseAccountRef;
                                                              FRC=ExpenseAccountRef;
                                                              ENC=ExpenseAccountRef] }
    { 20  ;   ;PurchaseDesc        ;Text30        ;CaptionML=[ENU=PurchaseDesc;
                                                              ESM=PurchaseDesc;
                                                              FRC=PurchaseDesc;
                                                              ENC=PurchaseDesc] }
    { 21  ;   ;PurchaseTaxIncluded ;Boolean       ;CaptionML=[ENU=PurchaseTaxIncluded;
                                                              ESM=PurchaseTaxIncluded;
                                                              FRC=PurchaseTaxIncluded;
                                                              ENC=PurchaseTaxIncluded] }
    { 22  ;   ;PurchaseCost        ;Decimal       ;CaptionML=[ENU=PurchaseCost;
                                                              ESM=PurchaseCost;
                                                              FRC=PurchaseCost;
                                                              ENC=PurchaseCost] }
    { 23  ;   ;AssetAccountRef     ;BLOB          ;CaptionML=[ENU=AssetAccountRef;
                                                              ESM=AssetAccountRef;
                                                              FRC=AssetAccountRef;
                                                              ENC=AssetAccountRef] }
    { 24  ;   ;TrackQtyOnHand      ;Boolean       ;CaptionML=[ENU=TrackQtyOnHand;
                                                              ESM=TrackQtyOnHand;
                                                              FRC=TrackQtyOnHand;
                                                              ENC=TrackQtyOnHand] }
    { 25  ;   ;InvStartDate        ;Date          ;CaptionML=[ENU=InvStartDate;
                                                              ESM=InvStartDate;
                                                              FRC=InvStartDate;
                                                              ENC=InvStartDate] }
    { 26  ;   ;QtyOnHand           ;Decimal       ;CaptionML=[ENU=QtyOnHand;
                                                              ESM=QtyOnHand;
                                                              FRC=QtyOnHand;
                                                              ENC=QtyOnHand] }
    { 27  ;   ;SalesTaxCodeRef     ;BLOB          ;CaptionML=[ENU=SalesTaxCodeRef;
                                                              ESM=SalesTaxCodeRef;
                                                              FRC=SalesTaxCodeRef;
                                                              ENC=SalesTaxCodeRef] }
    { 28  ;   ;PurchaseTaxCodeRef  ;BLOB          ;CaptionML=[ENU=PurchaseTaxCodeRef;
                                                              ESM=PurchaseTaxCodeRef;
                                                              FRC=PurchaseTaxCodeRef;
                                                              ENC=PurchaseTaxCodeRef] }
    { 29  ;   ;All                 ;BLOB          ;CaptionML=[ENU=All;
                                                              ESM=Todo;
                                                              FRC=Tous;
                                                              ENC=All];
                                                   SubType=Json }
  }
  KEYS
  {
    {    ;Id                                      ;Clustered=Yes }
    {    ;MetaData LastUpdatedTime                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EmptyJsonTxt@1003 : TextConst '@@@={Locked};ENU={};ESM={};FRC={};ENC={}';

    PROCEDURE GetAll@41(MSQBOTableMgt@1000 : Codeunit 7820;IdToSkipSyncFor@1003 : Text[250]);
    VAR
      JToken@1011 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
      LastUpdateDateTime@1002 : DateTime;
      Query@1001 : Text;
    BEGIN
      OnGettingAll(MSQBOTableMgt);
      LastUpdateDateTime := MSQBOTableMgt.GetLastUpdatedTimeAsUtc(DATABASE::"MS-QBO Item");
      Query := 'Select * from Item';
      CASE TRUE OF
        (IdToSkipSyncFor = '') AND (LastUpdateDateTime <> 0DT):
          Query += STRSUBSTNO(' where Metadata.LastUpdatedTime > ''%1''',
              FORMAT(LastUpdateDateTime,0,9));
        (IdToSkipSyncFor <> '') AND (LastUpdateDateTime = 0DT):
          Query += STRSUBSTNO(' where Id != ''%1''',IdToSkipSyncFor);
        (IdToSkipSyncFor <> '') AND (LastUpdateDateTime <> 0DT):
          Query += STRSUBSTNO(' where Metadata.LastUpdatedTime > ''%1'' AND Id != ''%2''',
              FORMAT(LastUpdateDateTime,0,9),IdToSkipSyncFor);
      END;
      MSQBOTableMgt.GetEntities(Query,'Item',JToken);
      GetItemsFromJson(JToken,MSQBOTableMgt);
    END;

    [Integration]
    LOCAL PROCEDURE OnGettingAll@10(VAR MSQBOTableMgt@1000 : Codeunit 7820);
    BEGIN
    END;

    PROCEDURE GetNestedValue@5(FieldName@1000 : Text;Path@1001 : Text) : Text;
    VAR
      MSQBOTableMgt@1002 : Codeunit 7820;
      RecordRef@1005 : RecordRef;
    BEGIN
      RecordRef.GETTABLE(Rec);
      EXIT(MSQBOTableMgt.GetNestedValue(RecordRef,FIELDNO(All),FieldName + '.' + Path));
    END;

    PROCEDURE GetItem@25(MSQBOTableMgt@1001 : Codeunit 7820;ExternalId@1000 : Text[250]);
    VAR
      JToken@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
    BEGIN
      MSQBOTableMgt.GetEntity(ExternalId,'Item',JToken);
      GetItemsFromJson(JToken,MSQBOTableMgt);
    END;

    PROCEDURE Create@26(MSQBOTableMgt@1000 : Codeunit 7820) EntityCreated : Boolean;
    VAR
      JObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      JToken@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
    BEGIN
      ItemToJson(JObject,TRUE);
      IF JObject.ToString <> EmptyJsonTxt THEN BEGIN
        OnBeforeUpdate(Rec,MSQBOTableMgt);
        IF MSQBOTableMgt.CreateEntity('Item',JObject,JToken) THEN BEGIN
          GetItemsFromJson(JToken,MSQBOTableMgt);
          OnAfterUpdate(Rec);
          EntityCreated := TRUE;
        END;
      END;
    END;

    PROCEDURE Update@27(MSQBOTableMgt@1000 : Codeunit 7820) EntityUpdated : Boolean;
    VAR
      JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      JToken@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
    BEGIN
      ItemToJson(JObject,FALSE);
      IF JObject.ToString <> EmptyJsonTxt THEN BEGIN
        OnBeforeUpdate(Rec,MSQBOTableMgt);
        IF MSQBOTableMgt.UpdateEntity('Item',JObject,JToken) THEN BEGIN
          GetItemsFromJson(JToken,MSQBOTableMgt);
          OnAfterUpdate(Rec);
          EntityUpdated := TRUE;
        END;
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdate@11(MSQBOItem@1001 : Record 7821;VAR MSQBOTableMgt@1000 : Codeunit 7820);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdate@9(VAR MSQBOItem@1001 : Record 7821);
    BEGIN
    END;

    LOCAL PROCEDURE GetItemsFromJson@43(JToken@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";MSQBOTableMgt@1001 : Codeunit 7820);
    VAR
      MSQBOItem@1006 : Record 7821;
      ExtTxtIDIntegrationRecord@1007 : Record 5377;
      ChildJToken@1005 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
      JsonArray@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      OutStream@1003 : OutStream;
      EntityId@1002 : Text[250];
    BEGIN
      IF ISNULL(JToken) THEN BEGIN
        NoItemsPresentInResponseJson;
        EXIT;
      END;

      JsonArray := JsonArray.JArray;

      // Check if value is an array
      IF FORMAT(JToken.GetType) = FORMAT(JsonArray.GetType) THEN
        ChildJToken := JToken.First
      ELSE
        ChildJToken := JToken;

      WHILE NOT ISNULL(ChildJToken) DO BEGIN
        IF COPYSTR(MSQBOTableMgt.GetTextFromJToken(ChildJToken,'Type'),1,MAXSTRLEN(Type)) <> 'Category' THEN BEGIN
          EntityId := COPYSTR(MSQBOTableMgt.GetTextFromJToken(ChildJToken,'Id'),1,MAXSTRLEN(Id));

          IF NOT GET(EntityId) THEN BEGIN
            // Update the customer with the right primary key
            IF MSQBOItem.GET('') THEN BEGIN
              MSQBOItem.DELETE;
              ExtTxtIDIntegrationRecord.UpdateCoupledRecordForExternalId('',EntityId,DATABASE::Item);
            END;

            INIT;
            Id := EntityId;
            INSERT(TRUE);
          END;

          UpdateItemFromJson(Rec,ChildJToken);
          All.CREATEOUTSTREAM(OutStream);
          OutStream.WRITETEXT(FORMAT(ChildJToken));

          MODIFY;
        END;

        ChildJToken := ChildJToken.Next;
      END;
    END;

    PROCEDURE UpdateNameFromQBO@2(VAR Item@1000 : Record 27) : Boolean;
    BEGIN
      EXIT(UpdateFromQBO(Item,Item.FIELDNO(Description),FIELDNO(Name)));
    END;

    PROCEDURE UpdateNameInQBO@3(Item@1000 : Record 27) : Boolean;
    BEGIN
      EXIT(UpdateInQBO(Item,Item.FIELDNO(Description),FIELDNO(Name)));
    END;

    PROCEDURE UpdateTypeInQBO@7() : Boolean;
    BEGIN
      IF Type = '' THEN BEGIN
        Type := 'NonInventory'; // default enum type for item in QuickBooks
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateFromQBO@4(VAR Item@1004 : Record 27;ItemFieldNo@1000 : Integer;QBOItemFieldNo@1001 : Integer) : Boolean;
    VAR
      MSQBOTableMgt@1006 : Codeunit 7820;
      ItemRecordRef@1002 : RecordRef;
      QBOItemRecordRef@1003 : RecordRef;
      ItemFieldRef@1005 : FieldRef;
    BEGIN
      ItemRecordRef.GETTABLE(Item);
      QBOItemRecordRef.GETTABLE(Rec);
      ItemFieldRef := ItemRecordRef.FIELD(ItemFieldNo);
      IF MSQBOTableMgt.AssignValueFromField(QBOItemRecordRef.FIELD(QBOItemFieldNo),ItemFieldRef)
      THEN BEGIN
        ItemRecordRef.SETTABLE(Item);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateInQBO@6(Item@1002 : Record 27;ItemFieldNo@1001 : Integer;QBOItemFieldNo@1000 : Integer) : Boolean;
    VAR
      MSQBOTableMgt@1006 : Codeunit 7820;
      ItemRecordRef@1004 : RecordRef;
      QBOItemRecordRef@1003 : RecordRef;
      QBOFieldRef@1005 : FieldRef;
    BEGIN
      ItemRecordRef.GETTABLE(Item);
      QBOItemRecordRef.GETTABLE(Rec);
      QBOFieldRef := QBOItemRecordRef.FIELD(QBOItemFieldNo);
      IF MSQBOTableMgt.AssignValueFromField(ItemRecordRef.FIELD(ItemFieldNo),QBOFieldRef)
      THEN BEGIN
        QBOItemRecordRef.SETTABLE(Rec);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE ItemToJson@29(VAR JObject@1005 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";IsNewItem@1002 : Boolean);
    VAR
      JSONManagement@1001 : Codeunit 5459;
    BEGIN
      ChangesInItemToJson(JObject);

      IF JObject.ToString = EmptyJsonTxt THEN
        EXIT;

      IF NOT IsNewItem THEN BEGIN
        JSONManagement.InitializeObjectFromJObject(JObject);
        JSONManagement.AddJPropertyToJObject(JObject,FIELDNAME(Id),Id);
        JSONManagement.AddJPropertyToJObject(JObject,FIELDNAME(SyncToken),SyncToken);
        JSONManagement.AddJPropertyToJObject(JObject,'sparse','true');
      END ELSE
        AddDefaultIncomeAccountRef(JObject);
    END;

    LOCAL PROCEDURE ChangesInItemToJson@17(VAR JObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      TempPrevMSQBOItem@1001 : TEMPORARY Record 7821;
      JSONManagement@1002 : Codeunit 5459;
      MSQBOTableMgt@1106 : Codeunit 7820;
      JToken@1006 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
      Text@1005 : DotNet "'mscorlib'.System.String";
      RecordRef@1003 : RecordRef;
      FieldRef@1004 : FieldRef;
    BEGIN
      RecordRef.GETTABLE(Rec);
      FieldRef := RecordRef.FIELD(FIELDNO(All));
      Text := MSQBOTableMgt.GetTextValueFromField(FieldRef);

      TempPrevMSQBOItem.INIT;

      IF FORMAT(Text) <> '' THEN BEGIN
        JToken := JToken.Parse(FORMAT(Text));
        UpdateItemFromJson(TempPrevMSQBOItem,JToken);
      END;

      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JObject);

      AddFieldChangeToJson(FIELDNO(Name),TempPrevMSQBOItem,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Sku),TempPrevMSQBOItem,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Description),TempPrevMSQBOItem,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Active),TempPrevMSQBOItem,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(SubItem),TempPrevMSQBOItem,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(ParentRef),TempPrevMSQBOItem,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Level),TempPrevMSQBOItem,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(FullyQualifiedName),TempPrevMSQBOItem,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Taxable),TempPrevMSQBOItem,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(SalesTaxIncluded),TempPrevMSQBOItem,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(UnitPrice),TempPrevMSQBOItem,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Type),TempPrevMSQBOItem,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(IncomeAccountRef),TempPrevMSQBOItem,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(ExpenseAccountRef),TempPrevMSQBOItem,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(PurchaseDesc),TempPrevMSQBOItem,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(PurchaseTaxIncluded),TempPrevMSQBOItem,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(PurchaseCost),TempPrevMSQBOItem,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(AssetAccountRef),TempPrevMSQBOItem,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(TrackQtyOnHand),TempPrevMSQBOItem,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(InvStartDate),TempPrevMSQBOItem,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(QtyOnHand),TempPrevMSQBOItem,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(SalesTaxCodeRef),TempPrevMSQBOItem,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(PurchaseTaxCodeRef),TempPrevMSQBOItem,JSONManagement,JObject);
    END;

    LOCAL PROCEDURE UpdateItemFromJson@12(VAR MSQBOItem@1000 : Record 7821;JToken@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken");
    BEGIN
      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(SyncToken),JToken,'SyncToken');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(MetaData),JToken,'MetaData');

      UpdateFieldValueByPath(MSQBOItem,MSQBOItem.FIELDNO("MetaData CreateTime"),JToken,'MetaData.CreateTime');

      UpdateFieldValueByPath(MSQBOItem,MSQBOItem.FIELDNO("MetaData LastUpdatedTime"),JToken,'MetaData.LastUpdatedTime');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(Name),JToken,'Name');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(Sku),JToken,'Sku');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(Description),JToken,'Description');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(Active),JToken,'Active');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(SubItem),JToken,'SubItem');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(ParentRef),JToken,'ParentRef');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(Level),JToken,'Level');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(FullyQualifiedName),JToken,'FullyQualifiedName');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(Taxable),JToken,'Taxable');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(SalesTaxIncluded),JToken,'SalesTaxIncluded');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(UnitPrice),JToken,'UnitPrice');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(Type),JToken,'Type');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(IncomeAccountRef),JToken,'IncomeAccountRef');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(ExpenseAccountRef),JToken,'ExpenseAccountRef');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(PurchaseDesc),JToken,'PurchaseDesc');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(PurchaseTaxIncluded),JToken,'PurchaseTaxIncluded');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(PurchaseCost),JToken,'PurchaseCost');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(AssetAccountRef),JToken,'AssetAccountRef');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(TrackQtyOnHand),JToken,'TrackQtyOnHand');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(InvStartDate),JToken,'InvStartDate');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(QtyOnHand),JToken,'QtyOnHand');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(SalesTaxCodeRef),JToken,'SalesTaxCodeRef');

      UpdateFieldValue(MSQBOItem,MSQBOItem.FIELDNO(PurchaseTaxCodeRef),JToken,'PurchaseTaxCodeRef');
    END;

    LOCAL PROCEDURE UpdateFieldValue@14(VAR MSQBOItem@1001 : Record 7821;FieldNo@1000 : Integer;JObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyName@1002 : Text);
    VAR
      MSQBOTableMgt@1004 : Codeunit 7820;
      JSONManagement@1005 : Codeunit 5459;
      RecordRef@1006 : RecordRef;
      FieldRef@1007 : FieldRef;
      Value@1008 : Text;
    BEGIN
      RecordRef.GETTABLE(MSQBOItem);
      FieldRef := RecordRef.FIELD(FieldNo);

      IF JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,propertyName,Value) THEN
        MSQBOTableMgt.WriteTextToField(FieldRef,Value);

      RecordRef.SETTABLE(MSQBOItem);
    END;

    LOCAL PROCEDURE UpdateFieldValueByPath@8(VAR MSQBOItem@1001 : Record 7821;FieldNo@1000 : Integer;JObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyPath@1002 : Text);
    VAR
      MSQBOTableMgt@1004 : Codeunit 7820;
      JSONManagement@1005 : Codeunit 5459;
      RecordRef@1006 : RecordRef;
      FieldRef@1007 : FieldRef;
      Value@1008 : Text;
    BEGIN
      RecordRef.GETTABLE(MSQBOItem);
      FieldRef := RecordRef.FIELD(FieldNo);

      IF JSONManagement.GetStringPropertyValueFromJObjectByPath(JObject,propertyPath,Value) THEN
        MSQBOTableMgt.WriteTextToField(FieldRef,Value);

      RecordRef.SETTABLE(MSQBOItem);
    END;

    LOCAL PROCEDURE AddFieldChangeToJson@40(FieldNo@1001 : Integer;TempPrevMSQBOItem@1003 : TEMPORARY Record 7821;JSONManagement@1005 : Codeunit 5459;VAR JObject@1006 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      MSQBOTableMgt@1000 : Codeunit 7820;
      JSONManagement2@1002 : Codeunit 5459;
      CurrRecRef@1004 : RecordRef;
      PrevRecRef@1007 : RecordRef;
      CurrFieldRef@1008 : FieldRef;
      PrevFieldRef@1009 : FieldRef;
      JObject2@1012 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      PrevValue@1010 : Text;
      CurrValue@1011 : Text;
      FieldIsBlob@1014 : Boolean;
    BEGIN
      PrevRecRef.GETTABLE(TempPrevMSQBOItem);
      CurrRecRef.GETTABLE(Rec);
      CurrFieldRef := CurrRecRef.FIELD(FieldNo);
      PrevFieldRef := PrevRecRef.FIELD(FieldNo);

      PrevValue := MSQBOTableMgt.GetTextValueFromField(PrevFieldRef);
      CurrValue := MSQBOTableMgt.GetTextValueFromField(CurrFieldRef);

      IF CurrValue <> PrevValue THEN BEGIN
        FieldIsBlob := FORMAT(CurrFieldRef.TYPE) = 'BLOB';
        IF FieldIsBlob AND (FieldNo <> TempPrevMSQBOItem.FIELDNO(Description)) THEN BEGIN
          JSONManagement2.InitializeObject(CurrValue);
          JSONManagement2.GetJSONObject(JObject2);
          JSONManagement.AddJObjectToJObject(JObject,CurrFieldRef.NAME,CurrValue);
        END ELSE
          JSONManagement.AddJPropertyToJObject(JObject,CurrFieldRef.NAME,CurrValue);
      END;
    END;

    LOCAL PROCEDURE AddDefaultIncomeAccountRef@35(VAR JObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      JSONManagement@1002 : Codeunit 5459;
      JSONManagement2@1003 : Codeunit 5459;
      JObjectSales@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeObjectFromJObject(JObject);
      JSONManagement.GetJSONObject(JObject);
      JSONManagement2.InitializeEmptyObject;
      JSONManagement2.GetJSONObject(JObjectSales);
      JSONManagement2.AddJPropertyToJObject(JObjectSales,'value','1');
      JSONManagement2.AddJPropertyToJObject(JObjectSales,'name','Sales');
      JSONManagement.AddJObjectToJObject(JObject,FIELDNAME(IncomeAccountRef),JObjectSales);
    END;

    PROCEDURE CanSyncNavRecord@1(Item@1000 : Record 27) : Boolean;
    BEGIN
      EXIT(Item.Type = Item.Type::Service);
    END;

    [Integration]
    LOCAL PROCEDURE NoItemsPresentInResponseJson@13();
    BEGIN
    END;

    BEGIN
    END.
  }
}

