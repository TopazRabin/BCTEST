OBJECT Table 14000717 Packing Control
{
  OBJECT-PROPERTIES
  {
    Date=12/28/17;
    Time=12:00:00 PM;
    Version List=SE0.60.18;
  }
  PROPERTIES
  {
    CaptionML=ENU=Packing Control;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code }
    { 11  ;   ;Package Open        ;Boolean       ;CaptionML=ENU=Package Open }
    { 12  ;   ;Total Package Count ;Integer       ;CaptionML=ENU=Total Package Count }
    { 13  ;   ;Last Package No.    ;Integer       ;CaptionML=ENU=Last Package No. }
    { 14  ;   ;Prepack             ;Boolean       ;CaptionML=ENU=Prepack }
    { 15  ;   ;Error Message       ;Text250       ;CaptionML=ENU=Error Message }
    { 16  ;   ;Scale Weight        ;Decimal       ;CaptionML=ENU=Scale Weight }
    { 17  ;   ;Manual Weight       ;Decimal       ;CaptionML=ENU=Manual Weight }
    { 18  ;   ;Manual Value        ;Decimal       ;CaptionML=ENU=Manual Value }
    { 19  ;   ;Line Description    ;Text250       ;CaptionML=ENU=Line Description }
    { 21  ;   ;Multi Document No.  ;Code250       ;CaptionML=ENU=Multi Document No. }
    { 22  ;   ;Multi Document Package;Boolean     ;CaptionML=ENU=Multi Document Package }
    { 31  ;   ;Pack Serial Number  ;Boolean       ;CaptionML=ENU=Pack Serial Number }
    { 32  ;   ;Input Type          ;Option        ;CaptionML=ENU=Input Type;
                                                   OptionCaptionML=ENU=" ,Account (G/L),Item,Resource,,,,,,,,Receive Details,Package Details";
                                                   OptionString=[ ,Account (G/L),Item,Resource,,,,,,,,Receive Details,Package Details] }
    { 33  ;   ;Input No.           ;Code20        ;CaptionML=ENU=Input No. }
    { 34  ;   ;Input Serial Number ;Code20        ;CaptionML=ENU=Input Serial Number }
    { 35  ;   ;Input Unit of Measure Code;Code10  ;CaptionML=ENU=Input Unit of Measure Code }
    { 36  ;   ;Input Variant Code  ;Code10        ;CaptionML=ENU=Input Variant Code }
    { 37  ;   ;Pack Serial Number Late;Boolean    ;CaptionML=ENU=Pack Serial Number Late }
    { 38  ;   ;Input Qty. Per Unit of Measure;Decimal;
                                                   CaptionML=ENU=Input Qty. Per Unit of Measure }
    { 39  ;   ;Input Description   ;Text50        ;CaptionML=ENU=Input Description }
    { 40  ;   ;Input Always Enter Quantity;Boolean;CaptionML=ENU=Input Always Enter Quantity }
    { 41  ;   ;Input Base Unit of Meas. Code;Code10;
                                                   CaptionML=ENU=Input Base Unit of Meas. Code }
    { 42  ;   ;Always Enter Quantity;Boolean      ;CaptionML=ENU=Always Enter Quantity }
    { 43  ;   ;Standard Pack One item;Boolean     ;CaptionML=ENU=Standard Pack One item }
    { 44  ;   ;Pack Lot Number     ;Boolean       ;CaptionML=ENU=Pack Lot Number }
    { 45  ;   ;Pack Lot Number Late;Boolean       ;CaptionML=ENU=Pack Lot Number Late }
    { 46  ;   ;Input Lot Number    ;Code20        ;CaptionML=ENU=Input Lot Number }
    { 47  ;   ;Pack Warranty Date  ;Boolean       ;CaptionML=ENU=Pack Warranty Date }
    { 48  ;   ;Pack Warranty Date Late;Boolean    ;CaptionML=ENU=Pack Warranty Date Late }
    { 49  ;   ;Input Warranty Date ;Date          ;CaptionML=ENU=Input Warranty Date }
    { 50  ;   ;Pack Expiration Date;Boolean       ;CaptionML=ENU=Pack Expiration Date }
    { 51  ;   ;Pack Expiration Date Late;Boolean  ;CaptionML=ENU=Pack Expiration Date Late }
    { 52  ;   ;Input Expiration Date;Date         ;CaptionML=ENU=Input Expiration Date }
    { 53  ;   ;Scanned No.         ;Text30        ;CaptionML=ENU=Scanned No.;
                                                   Editable=No }
    { 54  ;   ;Required Shipping Agent Code;Code10;TableRelation="Shipping Agent";
                                                   CaptionML=ENU=Required Shipping Agent Code }
    { 55  ;   ;Required E-Ship Agent Service;Code30;
                                                   CaptionML=ENU=Required E-Ship Agent Service }
    { 56  ;   ;Allow Other Ship. Agent/Serv.;Boolean;
                                                   CaptionML=ENU=Allow Other Ship. Agent/Serv. }
    { 57  ;   ;Processing Multiple Commands;Boolean;
                                                   CaptionML=ENU=Processing Multiple Commands }
    { 58  ;   ;Total Order Qty. (Base);Decimal    ;CaptionML=ENU=Total Order Qty. (Base);
                                                   DecimalPlaces=0:5 }
    { 59  ;   ;Packed Order Qty. (Base);Decimal   ;CaptionML=ENU=Packed Order Qty. (Base);
                                                   DecimalPlaces=0:5 }
    { 60  ;   ;Total Line Qty. (Base);Decimal     ;CaptionML=ENU=Total Line Qty. (Base);
                                                   DecimalPlaces=0:5 }
    { 61  ;   ;Packed Line Qty. (Base);Decimal    ;CaptionML=ENU=Packed Line Qty. (Base);
                                                   DecimalPlaces=0:5 }
    { 62  ;   ;Line Unit of Measure Code;Code10   ;CaptionML=ENU=Line Unit of Measure Code }
    { 63  ;   ;Line Quantity       ;Decimal       ;CaptionML=ENU=Line Quantity }
    { 101 ;   ;Source Type         ;Integer       ;CaptionML=ENU=Source Type }
    { 102 ;   ;Source Subtype      ;Option        ;CaptionML=ENU=Source Subtype;
                                                   OptionCaptionML=ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                   OptionString=0,1,2,3,4,5,6,7,8,9,10 }
    { 103 ;   ;Source ID           ;Code20        ;OnValidate=BEGIN
                                                                IF "Source ID" <> '' THEN
                                                                  TransferFromSource("Source Type","Source Subtype","Source ID");
                                                              END;

                                                   CaptionML=ENU=Source ID }
    { 104 ;   ;Posted Source ID    ;Code20        ;CaptionML=ENU=Posted Source ID }
    { 111 ;   ;Ship-to Type        ;Option        ;CaptionML=ENU=Ship-to Type;
                                                   OptionCaptionML=ENU=Customer,Vendor,Bank,Prospect,Resource,Employee,Contact,Location;
                                                   OptionString=Customer,Vendor,Bank,Prospect,Resource,Employee,Contact,Location }
    { 112 ;   ;Ship-to No.         ;Code20        ;CaptionML=ENU=Ship-to No. }
    { 113 ;   ;Ship-to Code        ;Code10        ;CaptionML=ENU=Ship-to Code }
    { 114 ;   ;Ship-for Code       ;Code20        ;CaptionML=ENU=Ship-for Code }
    { 115 ;   ;Ship-to Name        ;Text50        ;CaptionML=ENU=Ship-to Name }
    { 116 ;   ;Ship-to Name 2      ;Text50        ;CaptionML=ENU=Ship-to Name 2 }
    { 117 ;   ;Ship-to Address     ;Text50        ;CaptionML=ENU=Ship-to Address }
    { 118 ;   ;Ship-to Address 2   ;Text50        ;CaptionML=ENU=Ship-to Address 2 }
    { 119 ;   ;Ship-to City        ;Text30        ;CaptionML=ENU=Ship-to City }
    { 120 ;   ;Ship-to Contact     ;Text50        ;CaptionML=ENU=Ship-to Contact }
    { 121 ;   ;Ship-to ZIP Code    ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Ship-to ZIP Code }
    { 122 ;   ;Ship-to State       ;Text30        ;CaptionML=ENU=Ship-to State }
    { 123 ;   ;Ship-to Country Code;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Ship-to Country Code }
    { 124 ;   ;Ship-to Phone No.   ;Text30        ;CaptionML=ENU=Ship-to Phone No. }
    { 125 ;   ;Ship-to Fax No.     ;Text30        ;CaptionML=ENU=Ship-to Fax No. }
    { 131 ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   CaptionML=ENU=Shipping Agent Code }
    { 132 ;   ;E-Ship Agent Service;Code30        ;TableRelation="E-Ship Agent Service".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code),
                                                                                                    World Wide Service=FIELD(World Wide Service));
                                                   CaptionML=ENU=E-Ship Agent Service }
    { 133 ;   ;World Wide Service  ;Boolean       ;CaptionML=ENU=World Wide Service;
                                                   Editable=No }
    { 134 ;   ;Residential Delivery;Boolean       ;CaptionML=ENU=Residential Delivery }
    { 135 ;   ;COD Payment         ;Boolean       ;CaptionML=ENU=COD Payment;
                                                   BlankZero=Yes }
    { 136 ;   ;COD Cashiers Check  ;Boolean       ;CaptionML=ENU=COD Cashiers Check;
                                                   Editable=No }
    { 137 ;   ;Blind Shipment      ;Boolean       ;CaptionML=ENU=Blind Shipment }
    { 138 ;   ;Double Blind Shipment;Boolean      ;CaptionML=ENU=Double Blind Shipment }
    { 139 ;   ;Double Blind Ship-from Cust No;Code20;
                                                   TableRelation=Customer;
                                                   CaptionML=ENU=Double Blind Ship-from Cust No }
    { 141 ;   ;Shipping Payment Type;Option       ;CaptionML=ENU=Shipping Payment Type;
                                                   OptionCaptionML=ENU=Prepaid,Third Party,Freight Collect,Consignee;
                                                   OptionString=Prepaid,Third Party,Freight Collect,Consignee }
    { 142 ;   ;Third Party Ship. Account No.;Code20;
                                                   CaptionML=ENU=Third Party Ship. Account No. }
    { 143 ;   ;Shipping Insurance  ;Option        ;CaptionML=ENU=Shipping Insurance;
                                                   OptionCaptionML=ENU=" ,Never,Always";
                                                   OptionString=[ ,Never,Always] }
    { 151 ;   ;Bill of Lading No.  ;Code20        ;TableRelation="Bill of Lading" WHERE (Posted=CONST(No));
                                                   CaptionML=ENU=Bill of Lading No. }
    { 152 ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No. }
    { 153 ;   ;Currency Factor     ;Decimal       ;CaptionML=ENU=Currency Factor }
    { 154 ;   ;Free Freight        ;Boolean       ;CaptionML=ENU=Free Freight }
    { 155 ;   ;EDI Trade Partner   ;Code20        ;CaptionML=ENU=EDI Trade Partner }
    { 161 ;   ;Blind Ship-from No. ;Code20        ;CaptionML=ENU=Blind Ship-from No. }
    { 162 ;   ;Blind Ship-from Name;Text50        ;CaptionML=ENU=Blind Ship-from Name;
                                                   Editable=No }
    { 163 ;   ;Blind Ship-from Name 2;Text50      ;CaptionML=ENU=Blind Ship-from Name 2;
                                                   Editable=No }
    { 164 ;   ;Blind Ship-from Address;Text50     ;CaptionML=ENU=Blind Ship-from Address;
                                                   Editable=No }
    { 165 ;   ;Blind Ship-from Address 2;Text50   ;CaptionML=ENU=Blind Ship-from Address 2;
                                                   Editable=No }
    { 166 ;   ;Blind Ship-from City;Text30        ;CaptionML=ENU=Blind Ship-from City;
                                                   Editable=No }
    { 167 ;   ;Blind Ship-from Contact;Text50     ;CaptionML=ENU=Blind Ship-from Contact;
                                                   Editable=No }
    { 168 ;   ;Blind Ship-from ZIP Code;Code20    ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Blind Ship-from ZIP Code;
                                                   Editable=No }
    { 169 ;   ;Blind Ship-from State;Text30       ;CaptionML=ENU=Blind Ship-from State;
                                                   Editable=No }
    { 170 ;   ;Blind Ship-from Country Code;Code10;TableRelation=Country/Region;
                                                   CaptionML=ENU=Blind Ship-from Country Code;
                                                   Editable=No }
    { 171 ;   ;Blind Ship-from Phone No.;Text30   ;CaptionML=ENU=Blind Ship-from Phone No.;
                                                   Editable=No }
    { 172 ;   ;Blind Ship-from Fax No.;Text30     ;CaptionML=ENU=Blind Ship-from Fax No.;
                                                   Editable=No }
    { 173 ;   ;Export Document No. ;Code20        ;CaptionML=ENU=Export Document No. }
    { 200 ;   ;Message Line        ;Text250       ;CaptionML=ENU=Message Line }
    { 201 ;   ;Order Message       ;Text30        ;CaptionML=ENU=Order Message }
    { 202 ;   ;Package Message     ;Text30        ;CaptionML=ENU=Package Message }
    { 203 ;   ;Order Open          ;Boolean       ;CaptionML=ENU=Order Open }
    { 204 ;   ;Display Value       ;Decimal       ;CaptionML=ENU=Display Value }
    { 205 ;   ;Display Caption     ;Text100       ;CaptionML=ENU=Display Caption }
    { 206 ;   ;Open Source Type    ;Integer       ;CaptionML=ENU=Open Source Type }
    { 207 ;   ;Open Source Subtype ;Integer       ;CaptionML=ENU=Open Source Subtype }
    { 208 ;   ;Open Source ID      ;Text30        ;CaptionML=ENU=Open Source ID }
    { 209 ;   ;Close When Close Order;Boolean     ;CaptionML=ENU=Close When Close Order }
    { 210 ;   ;Ship-to Email Address;Text80        }
    { 14000781;;Currency Code      ;Code10         }
    { 14000982;;No AES Required    ;Boolean       ;CaptionML=ENU=No AES Required }
    { 14002801;;Tote No.           ;Code20        ;CaptionML=ENU=Tote No.;
                                                   Editable=No }
    { 14050102;;Contains Hazardous Materials;Boolean }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ShippingSetup@1240030000 : Record 14000707;
      PackingStation@1240030001 : Record 14000709;
      ShippingSetupRetrieved@1240030002 : Boolean;
      PackingStationRetrieved@1240030003 : Boolean;
      Text001@1001 : TextConst 'ENU=%1 and %2 cannot be blank.';
      Text002@1002 : TextConst 'ENU=Unknown Type %1';
      Text003@1003 : TextConst 'ENU=Sales %1 %2';
      Text004@1004 : TextConst 'ENU=Purchase %1 %2';
      Text005@1005 : TextConst 'ENU=Transfer %1';
      Text006@1006 : TextConst 'ENU=Unknown Source Type %1 %2 %3.';
      Text007@1007 : TextConst 'ENU=No quantities found on the sales lines.';
      Text008@1008 : TextConst 'ENU=No quantities found on the purchase lines.';
      Text009@1009 : TextConst 'ENU=No quantities found on the Transfer lines.';
      Text010@1010 : TextConst 'ENU=%1 must be on a Bill of Lading.';
      Text011@1240030005 : TextConst 'ENU=Only one line can be selected.';
      Text012@1240030004 : TextConst 'ENU=Wrong Quantity.';
      Text013@1240030006 : TextConst 'ENU=Documents must be selected.';
      EShipValidation@1240020000 : Codeunit 14000240;

    PROCEDURE TransferFromSource@3(SourceType@1240030000 : Integer;SourceSubtype@1240030001 : Integer;SourceID@1240030002 : Code[20]);
    VAR
      SalesHeader@1240030003 : Record 36;
      PurchHeader@1240030004 : Record 38;
      TransferHeader@1240030005 : Record 5740;
    BEGIN
      IF (SourceType = 0) OR (SourceID = '') THEN
        ERROR(Text001,FIELDCAPTION("Source Type"),FIELDCAPTION("Source ID"));

      CASE SourceType OF
        DATABASE::"Sales Header":
          IF SalesHeader.GET(SourceSubtype,SourceID) THEN
            TransferFromSalesHeader(SalesHeader);
        DATABASE::"Purchase Header":
          IF PurchHeader.GET(SourceSubtype,SourceID) THEN
            TransferFromPurchHeader(PurchHeader);
        DATABASE::"Transfer Header":
          IF TransferHeader.GET(SourceID) THEN
            TransferFromTransferHeader(TransferHeader);
        ELSE
          ERROR(Text002,"Source Type");
      END;
    END;

    PROCEDURE TransferFromSource2@9();
    BEGIN
      TransferFromSource("Source Type","Source Subtype","Source ID");
    END;

    PROCEDURE TransferFromPackage@4(Package@1240030000 : Record 14000701);
    BEGIN
      "Source Type" := Package."Source Type";
      "Source Subtype" := Package."Source Subtype";
      "Source ID" := Package."Source ID";
      "Posted Source ID" := Package."Posted Source ID";

      IF (Package."Source Type" <> 0) AND (Package."Source ID" <> '') THEN
        TransferFromSource("Source Type","Source Subtype","Source ID");

      "Ship-to Type" := Package."Ship-to Type";
      "Ship-to No." := Package."Ship-to No.";
      "Ship-to Code" := Package."Ship-to Code";
      // "Ship-for Code" := ;
      "Ship-to Name" := Package."Ship-to Name";
      "Ship-to Name 2" := Package."Ship-to Name 2";
      "Ship-to Address" := Package."Ship-to Address";
      "Ship-to Address 2" := Package."Ship-to Address 2";
      "Ship-to City" := Package."Ship-to City";
      "Ship-to Contact" := Package."Ship-to Contact";
      "Ship-to ZIP Code" := Package."Ship-to ZIP Code";
      "Ship-to State" := Package."Ship-to State";
      "Ship-to Country Code" := Package."Ship-to Country Code";
      "Ship-to Phone No." := Package."Ship-to Phone No.";
      "Ship-to Fax No." := Package."Ship-to Fax No.";
      "Ship-to Email Address" := Package."Ship-to Email Address";
      "Shipping Agent Code" := Package."Shipping Agent Code";
      "E-Ship Agent Service" := Package."Shipping Agent Service";
      "World Wide Service" := Package."World Wide Service";
      // "Residential Delivery" := ;
      "COD Payment" := Package.COD;
      "COD Cashiers Check" := Package."COD Cashiers Check";
      "Blind Shipment" := Package."Blind Shipment";
      "Double Blind Shipment" := Package."Double Blind Shipment";
      "Double Blind Ship-from Cust No" := Package."Double Blind Ship-from Cust No";
      "Shipping Payment Type" := Package."Shipping Payment Type";
      "Third Party Ship. Account No." := Package."Third Party Ship. Account No.";
      "Shipping Insurance" := Package."Shipping Insurance";
      // "Bill of Lading No." := ;
      "External Document No." := Package."External Document No.";
      "Currency Code" := Package."Currency Code";
      // "Free Freight" := ;
    END;

    PROCEDURE TransferFromSalesHeader@1(SalesHeader@1240030000 : Record 36);
    VAR
      Customer@1240030001 : Record 18;
      ShipToAddress@1240030002 : Record 222;
      BillOfLadingLine@1240030003 : Record 14000823;
      SalesSetup@1240030004 : Record 311;
      BillOfLading@1240030005 : Record 14000822;
      NameAndAddressMgt@1240030006 : Codeunit 14000709;
    BEGIN
      IF SalesHeader."External Document No." = '' THEN BEGIN
        SalesSetup.GET;

        IF SalesSetup."Ext. Doc. No. Mandatory" THEN
          SalesHeader.TESTFIELD("External Document No.");
      END;

      "Source Type" := DATABASE::"Sales Header";
      "Source Subtype" := SalesHeader."Document Type";
      "Source ID" := SalesHeader."No.";
      "Posted Source ID" := '';
      "Ship-to Type" := "Ship-to Type"::Customer;
      "Ship-to No." := SalesHeader."Sell-to Customer No.";
      "Ship-to Code" := SalesHeader."Ship-to Code";
      "Ship-for Code" := SalesHeader."Ship-for Code";
      "Ship-to Name" := SalesHeader."Ship-to Name";
      "Ship-to Name 2" := SalesHeader."Ship-to Name 2";
      "Ship-to Address" := SalesHeader."Ship-to Address";
      "Ship-to Address 2" := SalesHeader."Ship-to Address 2";
      "Ship-to City" := SalesHeader."Ship-to City";
      "Ship-to Contact" := SalesHeader."Ship-to Contact";
      "Ship-to ZIP Code" := SalesHeader."Ship-to Post Code";
      "Ship-to State" := SalesHeader."Ship-to County";
      "Ship-to Country Code" := SalesHeader."Ship-to Country/Region Code";
      CASE TRUE OF
        SalesHeader."Ship-to Code" <> '':
          BEGIN
            ShipToAddress.GET(SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code");
            "Ship-to Phone No." := ShipToAddress."Phone No.";
            "Ship-to Fax No." := ShipToAddress."Fax No.";
            //kvb 1/31/18 ->
            //"Ship-to Email Address" := ShipToAddress."E-Mail";
            IF STRLEN(ShipToAddress."E-Mail") > MAXSTRLEN("Ship-to Email Address")
              THEN "Ship-to Email Address" := COPYSTR(ShipToAddress."E-Mail", 1, MAXSTRLEN("Ship-to Email Address"))
              ELSE "Ship-to Email Address" := ShipToAddress."E-Mail";
            //kvb 1/31/18 <-
          END;
        SalesHeader."Sell-to Customer No." <> '':
          BEGIN
            Customer.GET(SalesHeader."Sell-to Customer No.");
            "Ship-to Phone No." := Customer."Phone No.";
            "Ship-to Fax No." := Customer."Fax No.";
            //kvb 1/31/18 ->
            //"Ship-to Email Address" := Customer."E-Mail";
            IF STRLEN(Customer."E-Mail") > MAXSTRLEN("Ship-to Email Address")
              THEN "Ship-to Email Address" := COPYSTR(Customer."E-Mail", 1, MAXSTRLEN("Ship-to Email Address"))
              ELSE "Ship-to Email Address" := Customer."E-Mail";
            //kvb 1/31/18 <-
          END;
        ELSE BEGIN
          "Ship-to Phone No." := '';
          "Ship-to Fax No." := '';
          "Ship-to Email Address" := '';
        END;
      END;
      //<TPZ1243>
      "Ship-to Phone No." := SalesHeader."Ship-to Phone No.";
      //</TPZ1243>

      "Shipping Agent Code" := SalesHeader."Shipping Agent Code";
      "E-Ship Agent Service" := SalesHeader."E-Ship Agent Service";
      "World Wide Service" := SalesHeader."World Wide Service";
      "Residential Delivery" := SalesHeader."Residential Delivery";
      "COD Payment" := SalesHeader."COD Payment";
      "COD Cashiers Check" := SalesHeader."COD Cashiers Check";
      "Blind Shipment" := SalesHeader."Blind Shipment";
      "Double Blind Shipment" := SalesHeader."Double Blind Shipment";
      "Double Blind Ship-from Cust No" := SalesHeader."Double Blind Ship-from Cust No";
      "Shipping Payment Type" := SalesHeader."Shipping Payment Type";
      "Third Party Ship. Account No." := SalesHeader."Third Party Ship. Account No.";
      "Shipping Insurance" := SalesHeader."Shipping Insurance";
      "External Document No." := SalesHeader."External Document No.";
      "Currency Factor" := SalesHeader."Currency Factor";
      "Currency Code" := SalesHeader."Currency Code";
      "Free Freight" := SalesHeader."Free Freight";
      "EDI Trade Partner" := SalesHeader."EDI Trade Partner";
      "Blind Ship-from No." := SalesHeader."Sell-to Customer No.";
      "Blind Ship-from Name" := SalesHeader."Bill-to Name";
      "Blind Ship-from Name 2" := SalesHeader."Bill-to Name 2";
      "Blind Ship-from Address" := SalesHeader."Bill-to Address";
      "Blind Ship-from Address 2" := SalesHeader."Bill-to Address 2";
      "Blind Ship-from City" := SalesHeader."Bill-to City";
      "Blind Ship-from Contact" := SalesHeader."Bill-to Contact";
      "Blind Ship-from ZIP Code" := SalesHeader."Bill-to Post Code";
      "Blind Ship-from State" := SalesHeader."Bill-to County";
      "Blind Ship-from Country Code" := SalesHeader."Bill-to Country/Region Code";
      Customer.GET(SalesHeader."Sell-to Customer No.");
      "Blind Ship-from Phone No." := Customer."Phone No.";
      "Blind Ship-from Fax No." := Customer."Fax No.";

      GetShippingSetup;
      BillOfLadingLine.RESET;
      BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
      BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
      BillOfLadingLine.SETRANGE("No.",SalesHeader."No.");
      BillOfLadingLine.SETRANGE(Closed,FALSE);
      IF ShippingSetup."Location Packing" THEN BEGIN
        GetPackingStation;
        BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
      END;
      BillOfLadingLine.SETRANGE("Source Type","Source Type");
      BillOfLadingLine.SETRANGE("Source Subtype","Source Subtype");
      BillOfLadingLine.SETRANGE("Source ID","Source ID");
      IF BillOfLadingLine.FIND('-') THEN
        "Bill of Lading No." := BillOfLadingLine."Bill of Lading No.";
    END;

    PROCEDURE TransferFromPurchHeader@2(PurchHeader@1240030000 : Record 38);
    VAR
      Vendor@1240030001 : Record 23;
      OrderAddress@1240030002 : Record 224;
      BillOfLadingLine@1240030003 : Record 14000823;
    BEGIN
      "Source Type" := DATABASE::"Purchase Header";
      "Source Subtype" := PurchHeader."Document Type";
      "Source ID" := PurchHeader."No.";
      "Posted Source ID" := '';
      "Ship-to Type" := "Ship-to Type"::Vendor;
      "Ship-to No." := PurchHeader."Buy-from Vendor No.";
      "Ship-to Code" := PurchHeader."Order Address Code";
      "Ship-for Code" := '';
      "Ship-to Name" := PurchHeader."Ship-to Name";
      "Ship-to Name 2" := PurchHeader."Ship-to Name 2";
      "Ship-to Address" := PurchHeader."Ship-to Address";
      "Ship-to Address 2" := PurchHeader."Ship-to Address 2";
      "Ship-to City" := PurchHeader."Ship-to City";
      "Ship-to Contact" := PurchHeader."Ship-to Contact";
      "Ship-to ZIP Code" := PurchHeader."Ship-to Post Code";
      "Ship-to State" := PurchHeader."Ship-to County";
      "Ship-to Country Code" := PurchHeader."Ship-to Country/Region Code";
      CASE TRUE OF
        PurchHeader."Order Address Code" <> '':
          BEGIN
            OrderAddress.GET(PurchHeader."Buy-from Vendor No.",PurchHeader."Order Address Code");
            "Ship-to Phone No." := OrderAddress."Phone No.";
            "Ship-to Fax No." := OrderAddress."Fax No.";
            "Ship-to Email Address" := OrderAddress."E-Mail";
          END;
        PurchHeader."Buy-from Vendor No." <> '':
          BEGIN
            Vendor.GET(PurchHeader."Buy-from Vendor No.");
            "Ship-to Phone No." := Vendor."Phone No.";
            "Ship-to Fax No." := Vendor."Fax No.";
            "Ship-to Email Address" := Vendor."E-Mail";
          END;
        ELSE BEGIN
          "Ship-to Phone No." := '';
          "Ship-to Fax No." := '';
          "Ship-to Email Address" := '';
        END;
      END;
      "Shipping Agent Code" := PurchHeader."E-Ship Agent Code";
      "E-Ship Agent Service" := PurchHeader."E-Ship Agent Service";
      "World Wide Service" := PurchHeader."World Wide Service";
      "Residential Delivery" := PurchHeader."Residential Delivery";
      "COD Payment" := PurchHeader."COD Payment";
      "COD Cashiers Check" := PurchHeader."COD Cashiers Check";
      // "Blind Shipment" := PurchHeader."Blind Shipment";
      // "Double Blind Shipment" := PurchHeader."Double Blind Shipment";
      // "Double Blind Ship-from Cust No" := PurchHeader."Double Blind Ship-from Cust No";
      "Shipping Payment Type" := PurchHeader."Shipping Payment Type";
      "Third Party Ship. Account No." := PurchHeader."Third Party Ship. Account No.";
      "Shipping Insurance" := PurchHeader."Shipping Insurance";
      // "External Document No." := PurchHeader."External Document No.";
      "Currency Factor" := PurchHeader."Currency Factor";
      // "Free Freight" := PurchHeader."Free Freight";
      "EDI Trade Partner" := PurchHeader."EDI Trade Partner";
      "Blind Ship-from No." := PurchHeader."Buy-from Vendor No.";
      "Blind Ship-from Name" := PurchHeader."Pay-to Name";
      "Blind Ship-from Name 2" := PurchHeader."Pay-to Name 2";
      "Blind Ship-from Address" := PurchHeader."Pay-to Address";
      "Blind Ship-from Address 2" := PurchHeader."Pay-to Address 2";
      "Blind Ship-from City" := PurchHeader."Pay-to City";
      "Blind Ship-from Contact" := PurchHeader."Pay-to Contact";
      "Blind Ship-from ZIP Code" := PurchHeader."Pay-to Post Code";
      "Blind Ship-from State" := PurchHeader."Pay-to County";
      "Blind Ship-from Country Code" := PurchHeader."Pay-to Country/Region Code";
      Vendor.GET(PurchHeader."Buy-from Vendor No.");
      "Blind Ship-from Phone No." := Vendor."Phone No.";
      "Blind Ship-from Fax No." := Vendor."Fax No.";

      GetShippingSetup;
      BillOfLadingLine.RESET;
      BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
      BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
      BillOfLadingLine.SETRANGE("No.",PurchHeader."No.");
      BillOfLadingLine.SETRANGE(Closed,FALSE);
      IF ShippingSetup."Location Packing" THEN BEGIN
        GetPackingStation;
        BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
      END;
      BillOfLadingLine.SETRANGE("Source Type","Source Type");
      BillOfLadingLine.SETRANGE("Source Subtype","Source Subtype");
      BillOfLadingLine.SETRANGE("Source ID","Source ID");
      IF BillOfLadingLine.FIND('-') THEN
        "Bill of Lading No." := BillOfLadingLine."Bill of Lading No.";
    END;

    PROCEDURE TransferFromTransferHeader@8(TransferHeader@1240030000 : Record 5740);
    VAR
      Location@1240030001 : Record 14;
      BillOfLadingLine@1240030002 : Record 14000823;
    BEGIN
      "Source Type" := DATABASE::"Transfer Header";
      "Source Subtype" := 0;
      "Source ID" := TransferHeader."No.";
      "Posted Source ID" := '';
      "Ship-to Type" := "Ship-to Type"::Location;
      "Ship-to No." := TransferHeader."Transfer-to Code";
      "Ship-to Code" := '';
      "Ship-for Code" := '';
      "Ship-to Name" := TransferHeader."Transfer-to Name";
      "Ship-to Name 2" := TransferHeader."Transfer-to Name 2";
      "Ship-to Address" := TransferHeader."Transfer-to Address";
      "Ship-to Address 2" := TransferHeader."Transfer-to Address 2";
      "Ship-to City" := TransferHeader."Transfer-to City";
      "Ship-to Contact" := TransferHeader."Transfer-to Contact";
      "Ship-to ZIP Code" := TransferHeader."Transfer-to Post Code";
      "Ship-to State" := TransferHeader."Transfer-to County";
      "Ship-to Country Code" := TransferHeader."Trsf.-to Country/Region Code";
      IF TransferHeader."Transfer-to Code" <> '' THEN BEGIN
        Location.GET(TransferHeader."Transfer-to Code");
        "Ship-to Phone No." := Location."Phone No.";
        "Ship-to Fax No." := Location."Fax No.";
        "Ship-to Email Address" := Location."E-Mail";
      END;
      "Shipping Agent Code" := TransferHeader."Shipping Agent Code";
      "E-Ship Agent Service" := TransferHeader."E-Ship Agent Service";
      "World Wide Service" := TransferHeader."World Wide Service";
      "Residential Delivery" := TransferHeader."Residential Delivery";
      // "COD Payment" := TransferHeader."COD Payment";
      // "COD Cashiers Check" := TransferHeader."COD Cashiers Check";
      // "Blind Shipment" := TransferHeader."Blind Shipment";
      // "Double Blind Shipment" := TransferHeader."Double Blind Shipment";
      // "Double Blind Ship-from Cust No" := TransferHeader."Double Blind Ship-from Cust No";
      "Shipping Payment Type" := TransferHeader."Shipping Payment Type";
      "Third Party Ship. Account No." := TransferHeader."Third Party Ship. Account No.";
      "Shipping Insurance" := TransferHeader."Shipping Insurance";
      // "External Document No." := TransferHeader."External Document No.";
      // "Currency Factor" := TransferHeader."Currency Factor";
      "Currency Factor" := 1;
      // "Free Freight" := TransferHeader."Free Freight";
       "EDI Trade Partner" := TransferHeader."EDI Trade Partner";
      "Blind Ship-from No." := '';
      "Blind Ship-from Name" := '';
      "Blind Ship-from Name 2" := '';
      "Blind Ship-from Address" := '';
      "Blind Ship-from Address 2" := '';
      "Blind Ship-from City" := '';
      "Blind Ship-from Contact" := '';
      "Blind Ship-from ZIP Code" := '';
      "Blind Ship-from State" := '';
      "Blind Ship-from Country Code" := '';
      "Blind Ship-from Phone No." := '';
      "Blind Ship-from Fax No." := '';

      GetShippingSetup;
      BillOfLadingLine.RESET;
      BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
      BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
      BillOfLadingLine.SETRANGE("No.",TransferHeader."No.");
      BillOfLadingLine.SETRANGE(Closed,FALSE);
      IF ShippingSetup."Location Packing" THEN BEGIN
        GetPackingStation;
        BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
      END;
      BillOfLadingLine.SETRANGE("Source Type","Source Type");
      BillOfLadingLine.SETRANGE("Source Subtype","Source Subtype");
      BillOfLadingLine.SETRANGE("Source ID","Source ID");
      IF BillOfLadingLine.FIND('-') THEN
        "Bill of Lading No." := BillOfLadingLine."Bill of Lading No.";
    END;

    PROCEDURE FormatSource@5(SourceType@1240030000 : Integer;SourceSubtype@1240030001 : Integer;SourceID@1240030002 : Code[250]) : Text[250];
    VAR
      Salesheader@1240030003 : Record 36;
      PurchHeader@1240030004 : Record 38;
    BEGIN
      CASE SourceType OF
        0:
          EXIT('');
        DATABASE::"Sales Header":
          BEGIN
            Salesheader."Document Type" := SourceSubtype;
            EXIT(
              COPYSTR(
                STRSUBSTNO(Text003,Salesheader."Document Type",SourceID),1,250));
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader."Document Type" := SourceSubtype;
            EXIT(
              COPYSTR(
                STRSUBSTNO(Text004,PurchHeader."Document Type",SourceID),1,250));
          END;
        DATABASE::"Transfer Header":
          EXIT(COPYSTR(STRSUBSTNO(Text005,SourceID),1,250));
        ELSE
          EXIT(STRSUBSTNO('%1 %2 %3',SourceType,SourceSubtype,SourceID));
      END;
    END;

    PROCEDURE FormatSource2@6() : Text[250];
    BEGIN
      EXIT(FormatSource("Source Type","Source Subtype","Source ID"));
    END;

    PROCEDURE FormatPostedSource@13(SourceType@1240030000 : Integer;SourceSubtype@1240030005 : Integer;PostedSourceID@1240030001 : Code[250]) : Text[250];
    VAR
      SalesShipmentheader@1240030002 : Record 110;
      PurchCrMemoHeader@1240030003 : Record 124;
      ReturnShipmentHeader@1240030006 : Record 6650;
      TransferShipmentHeader@1240030004 : Record 5744;
    BEGIN
      CASE SourceType OF
        0:
          EXIT('');
        DATABASE::"Sales Header":
          EXIT(COPYSTR(STRSUBSTNO('%1 %2',SalesShipmentheader.TABLECAPTION,PostedSourceID),1,250));
        DATABASE::"Purchase Header":
          IF SourceSubtype = 3 THEN
            EXIT(COPYSTR(STRSUBSTNO('%1 %2',PurchCrMemoHeader.TABLECAPTION,PostedSourceID),1,250))
          ELSE
            EXIT(COPYSTR(STRSUBSTNO('%1 %2',ReturnShipmentHeader.TABLECAPTION,PostedSourceID),1,250));
        DATABASE::"Transfer Header":
          EXIT(COPYSTR(STRSUBSTNO('%1 %2',TransferShipmentHeader.TABLECAPTION,PostedSourceID),1,250));
        ELSE
          EXIT(STRSUBSTNO('%1 %2 %3',SourceType,PostedSourceID));
      END;
    END;

    PROCEDURE FormatPostedSource2@12() : Text[250];
    BEGIN
      EXIT(FormatPostedSource("Source Type","Source Subtype","Posted Source ID"));
    END;

    PROCEDURE FormatOptionPageCaption@1240030005(Type@1240030000 : Integer;SourceType@1240030001 : Integer;SourceSubtype@1240030004 : Integer;SourceID@1240030002 : Code[20];SecondSourceID@1240030003 : Code[20];TypeText@1240030007 : Text[30];ShippingAgentCode@1240030005 : Code[10];ShippingAgentService@1240030006 : Code[30]) : Text[250];
    VAR
      Location@1240030008 : Record 14;
      Customer@1240030009 : Record 18;
      Vendor@1240030010 : Record 23;
      ShipToAddress@1240030011 : Record 222;
      OrderAddress@1240030012 : Record 224;
    BEGIN
      CASE Type OF
        1: // Type::Document:
          EXIT(FormatSource(SourceType,SourceSubtype,SourceID));
        2: // Type::Setup:
          EXIT(STRSUBSTNO('%1 %2 %3',TypeText,ShippingAgentCode,ShippingAgentService));
        8: // Type::"Master Data":
          CASE SourceType OF
            DATABASE::Location:
              EXIT(STRSUBSTNO('%1 %2',Location.TABLECAPTION,SourceID));
            DATABASE::Customer:
              EXIT(STRSUBSTNO('%1 %2',Customer.TABLECAPTION,SourceID));
            DATABASE::Vendor:
              EXIT(STRSUBSTNO('%1 %2',Vendor.TABLECAPTION,SourceID));
            DATABASE::"Ship-to Address":
              EXIT(STRSUBSTNO('%1 %2 %3',ShipToAddress.TABLECAPTION,SourceID,SecondSourceID));
            DATABASE::"Order Address":
              EXIT(STRSUBSTNO('%1 %2 %3',OrderAddress.TABLECAPTION,SourceID,SecondSourceID));
            ELSE
              EXIT(STRSUBSTNO('%1 %2',TypeText,SourceID));
          END;
        ELSE
          EXIT(STRSUBSTNO('%1 %2',TypeText,SourceID));
      END;
    END;

    PROCEDURE ClearOrderInfo@7();
    BEGIN
      "Multi Document No." := '';
      "Multi Document Package" := FALSE;
      "Total Order Qty. (Base)" := 0;
      "Packed Order Qty. (Base)" := 0;
      "Total Line Qty. (Base)" := 0;
      "Packed Line Qty. (Base)" := 0;
      "Line Unit of Measure Code" := '';
      "Line Quantity" := 0;

      "Source Type" := 0;
      "Source Subtype" := 0;
      "Source ID" := '';
      "Posted Source ID" := '';
      "Ship-to Type" := 0;
      "Ship-to No." := '';
      "Ship-to Code" := '';
      "Ship-for Code" := '';
      "Ship-to Name" := '';
      "Ship-to Name 2" := '';
      "Ship-to Address" := '';
      "Ship-to Address 2" := '';
      "Ship-to City" := '';
      "Ship-to Contact" := '';
      "Ship-to ZIP Code" := '';
      "Ship-to State" := '';
      "Ship-to Country Code" := '';
      "Ship-to Phone No." := '';
      "Ship-to Fax No." := '';
      "Ship-to Email Address" := '';
      "Shipping Agent Code" := '';
      "E-Ship Agent Service" := '';
      "World Wide Service" := FALSE;
      "Residential Delivery" := FALSE;
      "COD Payment" := FALSE;
      "COD Cashiers Check" := FALSE;
      "Blind Shipment" := FALSE;
      "Double Blind Shipment" := FALSE;
      "Double Blind Ship-from Cust No" := '';
      "Shipping Payment Type" := 0;
      "Third Party Ship. Account No." := '';
      "Shipping Insurance" := 0;
      "Bill of Lading No." := '';
      "External Document No." := '';
      "Currency Factor" := 0;
      "Currency Code" := '';
      "Free Freight" := FALSE;
      "EDI Trade Partner" := '';
      "Blind Ship-from No." := '';
      "Blind Ship-from Name" := '';
      "Blind Ship-from Name 2" := '';
      "Blind Ship-from Address" := '';
      "Blind Ship-from Address 2" := '';
      "Blind Ship-from City" := '';
      "Blind Ship-from Contact" := '';
      "Blind Ship-from ZIP Code" := '';
      "Blind Ship-from State" := '';
      "Blind Ship-from Country Code" := '';
      "Blind Ship-from Phone No." := '';
      "Blind Ship-from Fax No." := '';
      "Export Document No." := '';
      "No AES Required" := FALSE;
    END;

    PROCEDURE ErrorUnknownSourceType@10(SourceType@1240030000 : Integer;SourceSubtype@1240030001 : Integer;SourceID@1240030002 : Code[250]);
    BEGIN
      ERROR(Text006,SourceType,SourceSubtype,SourceID);
    END;

    PROCEDURE ErrorUnknownSourceType2@11();
    BEGIN
      ErrorUnknownSourceType("Source Type","Source Subtype","Source ID");
    END;

    PROCEDURE PackingStatus@14() : Text[250];
    VAR
      SalesHeader@1240030000 : Record 36;
      PurchHeader@1240030001 : Record 38;
      TransferHeader@1240030002 : Record 5740;
    BEGIN
      CASE "Source Type" OF
        0:
          EXIT('');
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader."Document Type" := "Source Subtype";
            SalesHeader."No." := "Source ID";

            EXIT(EShipValidation."SalesHeader-PackingStatus"(SalesHeader));
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader."Document Type" := "Source Subtype";
            PurchHeader."No." := "Source ID";

            EXIT(EShipValidation."PurchaseHeader-PackingStatus"(PurchHeader));
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferHeader."No." := "Source ID";

            EXIT(EShipValidation."TransferHeader-PackingStatus"(TransferHeader));
          END;
        ELSE
          ErrorUnknownSourceType2;
      END;
    END;

    PROCEDURE LookupSourceLine@15(MultiDocumentPackage@1240030000 : Boolean;MultiDocumentNo@1240030001 : Code[250];LineType@1240030002 : Integer;LineNo@1240030003 : Code[20];SourceType@1240030004 : Integer;SourceSubtype@1240030005 : Integer;SourceID@1240030006 : Code[250]) : Boolean;
    VAR
      SalesLine@1240030007 : Record 37;
      PurchLine@1240030008 : Record 39;
      TransferLine@1240030009 : Record 5741;
    BEGIN
      GetShippingSetup;

      CASE SourceType OF
        DATABASE::"Sales Header":
          BEGIN
            SalesLine.RESET;
            SalesLine.SETRANGE("Document Type",SourceSubtype);
            IF MultiDocumentPackage THEN
              SalesLine.SETFILTER("Document No.",MultiDocumentNo)
            ELSE
              SalesLine.SETRANGE("Document No.",SourceID);
            SalesLine.SETRANGE("Drop Shipment",FALSE);
            SalesLine.SETRANGE(Pack,TRUE);
            SalesLine.SETRANGE(Type,LineType);
            IF LineNo <> '' THEN
              SalesLine.SETRANGE("No.",LineNo);
            SalesLine.SETFILTER("Outstanding Quantity",'<>0');
            IF ShippingSetup."Location Packing" THEN BEGIN
              GetPackingStation;
              SalesLine.SETRANGE("Location Code",PackingStation."Location Code");
            END;
            IF PAGE.RUNMODAL(0,SalesLine) = ACTION::LookupOK THEN BEGIN
              "Input No." := SalesLine."No.";
              "Input Variant Code" := SalesLine."Variant Code";
              "Input Unit of Measure Code" := SalesLine."Unit of Measure Code";

              EXIT(TRUE);
            END;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchLine.RESET;
            PurchLine.SETRANGE("Document Type",SourceSubtype);
            IF MultiDocumentPackage THEN
              PurchLine.SETRANGE("Document No.",MultiDocumentNo)
            ELSE
              PurchLine.SETRANGE("Document No.",SourceID);
            PurchLine.SETRANGE(PurchLine."Drop Shipment",FALSE);
            PurchLine.SETRANGE(Type,LineType);
            IF LineNo <> '' THEN
              PurchLine.SETRANGE("No.",LineNo);
            PurchLine.SETFILTER("Outstanding Quantity",'<>0');
            IF ShippingSetup."Location Packing" THEN BEGIN
              GetPackingStation;
              PurchLine.SETRANGE("Location Code",PackingStation."Location Code");
            END;
            IF PAGE.RUNMODAL(0,PurchLine) = ACTION::LookupOK THEN BEGIN
              "Input No." := PurchLine."No.";
              "Input Variant Code" := PurchLine."Variant Code";
              "Input Unit of Measure Code" := PurchLine."Unit of Measure Code";

              EXIT(TRUE);
            END;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferLine.RESET;
            IF MultiDocumentPackage THEN
              TransferLine.SETRANGE("Document No.",MultiDocumentNo)
            ELSE
              TransferLine.SETRANGE("Document No.",SourceID);
            IF LineNo <> '' THEN
              TransferLine.SETRANGE("Item No.",LineNo);
            TransferLine.SETFILTER("Outstanding Quantity",'<>0');
            TransferLine.SETRANGE("Derived From Line No.",0);
            IF ShippingSetup."Location Packing" THEN BEGIN
              GetPackingStation;
              TransferLine.SETRANGE("Transfer-from Code",PackingStation."Location Code");
            END;
            IF PAGE.RUNMODAL(0,TransferLine) = ACTION::LookupOK THEN BEGIN
              "Input No." := TransferLine."Item No.";
              "Input Variant Code" := TransferLine."Variant Code";
              "Input Unit of Measure Code" := TransferLine."Unit of Measure Code";

              EXIT(TRUE);
            END;
          END;
        ELSE
          ErrorUnknownSourceType(SourceType,SourceSubtype,SourceID);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE CalculateQtyToShip@16(MultiDocumentPackage@1240030000 : Boolean;MultiDocumentNo@1240030001 : Code[250];LineType@1240030002 : Integer;LineNo@1240030003 : Code[20];LineVariantCode@1240030004 : Code[10];SourceType@1240030005 : Integer;SourceSubtype@1240030006 : Integer;SourceID@1240030007 : Code[250]) : Decimal;
    VAR
      LineUnitOfMeasureCode@1240030008 : Code[10];
      LineQuantity@1240030009 : Decimal;
    BEGIN
      EXIT(
        CalculateQtyToShipLocal(
          LineUnitOfMeasureCode,LineQuantity,
          MultiDocumentPackage,MultiDocumentNo,LineType,LineNo,LineVariantCode,
          SourceType,SourceSubtype,SourceID));
    END;

    PROCEDURE CalculateQtyToShip2@20();
    BEGIN
      "Total Line Qty. (Base)" :=
        CalculateQtyToShipLocal(
          "Line Unit of Measure Code","Line Quantity",
          "Multi Document Package","Multi Document No.","Input Type","Input No.","Input Variant Code",
          "Source Type","Source Subtype","Source ID");
    END;

    LOCAL PROCEDURE CalculateQtyToShipLocal@19(VAR LineUnitOfMeasureCode@1240030001 : Code[10];VAR LineQuantity@1240030002 : Decimal;MultiDocumentPackage@1240030003 : Boolean;MultiDocumentNo@1240030004 : Code[250];LineType@1240030005 : Integer;LineNo@1240030006 : Code[20];LineVariantCode@1240030007 : Code[10];SourceType@1240030008 : Integer;SourceSubtype@1240030009 : Integer;SourceID@1240030010 : Code[250]) QtyToShip@1240030000 : Decimal;
    VAR
      SalesLine@1240030011 : Record 37;
      PurchLine@1240030012 : Record 39;
      TransferLine@1240030013 : Record 5741;
    BEGIN
      QtyToShip := 0;

      GetShippingSetup;
      IF ShippingSetup."Location Packing" THEN
        GetPackingStation;

      CASE SourceType OF
        DATABASE::"Sales Header":
          BEGIN
            SalesLine.RESET;
            SalesLine.SETCURRENTKEY(
              "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment",Pack);
            SalesLine.SETRANGE("Document Type",SourceSubtype);
            IF MultiDocumentPackage THEN
              SalesLine.SETFILTER("Document No.",MultiDocumentNo)
            ELSE
              SalesLine.SETRANGE("Document No.",SourceID);
            SalesLine.SETRANGE(Type,LineType);
            SalesLine.SETRANGE("No.",LineNo);
            SalesLine.SETRANGE("Variant Code",LineVariantCode);
            SalesLine.SETRANGE("Drop Shipment",FALSE);
            SalesLine.SETRANGE(Pack,TRUE);
            IF ShippingSetup."Location Packing" THEN
              SalesLine.SETRANGE("Location Code",PackingStation."Location Code");
            IF NOT SalesLine.FIND('-') THEN
              ;
            SalesLine.CALCSUMS("Qty. to Ship (Base)");

            // Additional code required in Attain
            QtyToShip := SalesLine."Qty. to Ship (Base)";
            QtyToShip :=
              QtyToShip +
              EShipValidation."SalesLine-CalcEShipWhseOutstQtyBase"(SalesLine,
                ShippingSetup."Location Packing",PackingStation."Location Code");

            LineUnitOfMeasureCode := SalesLine."Unit of Measure Code";
            LineQuantity := SalesLine.Quantity;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchLine.RESET;
            PurchLine.SETCURRENTKEY(
              "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment","Location Code");
            PurchLine.SETRANGE("Document Type",SourceSubtype);
            IF MultiDocumentPackage THEN
              PurchLine.SETFILTER("Document No.",MultiDocumentNo)
            ELSE
              PurchLine.SETRANGE("Document No.",SourceID);
            PurchLine.SETRANGE(Type,LineType);
            PurchLine.SETRANGE("No.",LineNo);
            PurchLine.SETRANGE("Variant Code",LineVariantCode);
            PurchLine.SETRANGE("Drop Shipment",FALSE);
            IF ShippingSetup."Location Packing" THEN
              PurchLine.SETRANGE("Location Code",PackingStation."Location Code");
            IF NOT PurchLine.FIND('-') THEN
              ;

            // Additional code required in Attain
            IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN BEGIN
              PurchLine.CALCSUMS("Return Qty. to Ship (Base)");
              QtyToShip := PurchLine."Return Qty. to Ship (Base)";
              QtyToShip :=
                QtyToShip +
                EShipValidation."PurchaseLine-CalcEShipWhseOutstQtyBase"(PurchLine,
                                ShippingSetup."Location Packing",PackingStation."Location Code");
            END ELSE BEGIN
              PurchLine.CALCSUMS("Outstanding Qty. (Base)");
              QtyToShip := PurchLine."Outstanding Qty. (Base)";
            END;
            LineUnitOfMeasureCode := PurchLine."Unit of Measure Code";
            LineQuantity := PurchLine.Quantity;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferLine.RESET;
            TransferLine.SETCURRENTKEY(
              "Transfer-from Code",Status,"Derived From Line No.","Item No.","Variant Code");
            IF MultiDocumentPackage THEN
              TransferLine.SETFILTER("Document No.",MultiDocumentNo)
            ELSE
              TransferLine.SETRANGE("Document No.",SourceID);
            TransferLine.SETRANGE("Item No.",LineNo);
            TransferLine.SETRANGE("Variant Code",LineVariantCode);
            TransferLine.SETRANGE("Derived From Line No.",0);
            IF ShippingSetup."Location Packing" THEN
              TransferLine.SETRANGE("Transfer-from Code",PackingStation."Location Code");
            IF NOT TransferLine.FIND('-') THEN
              ;

            // Additional code required in Attain
            TransferLine.CALCSUMS("Qty. to Ship (Base)");
            QtyToShip := TransferLine."Qty. to Ship (Base)";
            QtyToShip :=
              QtyToShip +
              EShipValidation."TransferLine-CalcEShipWhseOutstQtyBase"(TransferLine,
                ShippingSetup."Location Packing",PackingStation."Location Code");
            LineUnitOfMeasureCode := TransferLine."Unit of Measure Code";
            LineQuantity := TransferLine.Quantity;
          END;
        ELSE
          ErrorUnknownSourceType(SourceType,SourceSubtype,SourceID);
      END;
    END;

    PROCEDURE CalculateOrderQtyToShip@21();
    VAR
      SalesHeader@1240030000 : Record 36;
      PurchHeader@1240030001 : Record 38;
      TransferHeader@1240030002 : Record 5740;
    BEGIN
      "Total Order Qty. (Base)" := 0;
      "Packed Order Qty. (Base)" := 0;

      GetShippingSetup;
      IF ShippingSetup."Location Packing" THEN
        GetPackingStation;

      CASE "Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader.RESET;
            IF ShippingSetup."Location Packing" THEN
              SalesHeader.SETRANGE("Location Filter",PackingStation."Location Code");
            IF "Multi Document Package" THEN BEGIN
              SalesHeader.SETRANGE("Document Type","Source Subtype");
              SalesHeader.SETFILTER("No.","Multi Document No.");
              IF SalesHeader.FIND('-') THEN
                REPEAT
                  SalesHeader.CALCFIELDS(
                    "Total Qty. To Ship (base)","Total Qty. Packed (base)",
                    "E-Ship Whse. Outst. Qty (Base)","E-Ship Whse. Ship. Qty (Base)",
                    "E-Ship Invt. Outst. Qty (Base)");

                  // Additional code required in Attain
                  "Total Order Qty. (Base)" :=
                    "Total Order Qty. (Base)" + SalesHeader."Total Qty. To Ship (base)" +
                    SalesHeader."E-Ship Whse. Outst. Qty (Base)" +
                    SalesHeader."E-Ship Whse. Ship. Qty (Base)";
                  IF SalesHeader."Total Qty. To Ship (base)" = 0 THEN
                    "Total Order Qty. (Base)" :=
                      "Total Order Qty. (Base)" + SalesHeader."E-Ship Invt. Outst. Qty (Base)";
                  "Packed Order Qty. (Base)" :=
                    "Packed Order Qty. (Base)" + SalesHeader."Total Qty. Packed (base)";
                UNTIL SalesHeader.NEXT = 0;
            END ELSE BEGIN
              SalesHeader."Document Type" := "Source Subtype";
              SalesHeader."No." := "Source ID";
              SalesHeader.CALCFIELDS(
                "Total Qty. To Ship (base)","Total Qty. Packed (base)",
                "E-Ship Whse. Outst. Qty (Base)","E-Ship Whse. Ship. Qty (Base)",
                "E-Ship Invt. Outst. Qty (Base)");

              // Additional code required in Attain
              "Total Order Qty. (Base)" :=
                SalesHeader."Total Qty. To Ship (base)" +
                SalesHeader."E-Ship Whse. Outst. Qty (Base)" +
                SalesHeader."E-Ship Whse. Ship. Qty (Base)";
                IF SalesHeader."Total Qty. To Ship (base)" = 0 THEN
                  "Total Order Qty. (Base)" :=
                    "Total Order Qty. (Base)" + SalesHeader."E-Ship Invt. Outst. Qty (Base)";
              "Packed Order Qty. (Base)" := SalesHeader."Total Qty. Packed (base)";
            END;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader.RESET;
            IF ShippingSetup."Location Packing" THEN
              PurchHeader.SETRANGE("Location Filter",PackingStation."Location Code");
            IF "Multi Document Package" THEN BEGIN
              PurchHeader.SETRANGE("Document Type","Source Subtype");
              PurchHeader.SETFILTER("No.","Multi Document No.");
              IF PurchHeader.FIND('-') THEN
                REPEAT
                  // Additional code required in Attain
                  IF PurchHeader."Document Type" = PurchHeader."Document Type"::"Return Order" THEN BEGIN
                    PurchHeader.CALCFIELDS(
                      "Total Ret. Qty. To Ship (base)","Total Qty. Packed (base)",
                      "E-Ship Whse. Outst. Qty (Base)","E-Ship Whse. Ship. Qty (Base)",
                      "E-Ship Invt. Outst. Qty (Base)");
                    "Total Order Qty. (Base)" :=
                      "Total Order Qty. (Base)" + PurchHeader."Total Ret. Qty. To Ship (base)" +
                      PurchHeader."E-Ship Whse. Outst. Qty (Base)" +
                      PurchHeader."E-Ship Whse. Ship. Qty (Base)";
                    IF PurchHeader."Total Qty. To Receive (base)" = 0 THEN
                      "Total Order Qty. (Base)" :=
                        "Total Order Qty. (Base)" + PurchHeader."E-Ship Invt. Outst. Qty (Base)";
                  END ELSE BEGIN
                    PurchHeader.CALCFIELDS("Total Outstanding Qty. (base)","Total Qty. Packed (base)");
                    "Total Order Qty. (Base)" :=
                      "Total Order Qty. (Base)" + PurchHeader."Total Outstanding Qty. (base)";
                  END;
                  "Packed Order Qty. (Base)" :=
                    "Packed Order Qty. (Base)" + PurchHeader."Total Qty. Packed (base)";
                UNTIL PurchHeader.NEXT = 0;
            END ELSE BEGIN
              PurchHeader."Document Type" := "Source Subtype";
              PurchHeader."No." := "Source ID";

              // Additional code required in Attain
              IF PurchHeader."Document Type" = PurchHeader."Document Type"::"Return Order" THEN BEGIN
                PurchHeader.CALCFIELDS(
                  "Total Ret. Qty. To Ship (base)","Total Qty. Packed (base)",
                  "E-Ship Whse. Outst. Qty (Base)","E-Ship Whse. Ship. Qty (Base)",
                  "E-Ship Invt. Outst. Qty (Base)");
                "Total Order Qty. (Base)" :=
                  PurchHeader."Total Ret. Qty. To Ship (base)" +
                  PurchHeader."E-Ship Whse. Outst. Qty (Base)" +
                  PurchHeader."E-Ship Whse. Ship. Qty (Base)";
                IF PurchHeader."Total Qty. To Receive (base)" = 0 THEN
                  "Total Order Qty. (Base)" :=
                    "Total Order Qty. (Base)" + PurchHeader."E-Ship Invt. Outst. Qty (Base)";
              END ELSE BEGIN
                PurchHeader.CALCFIELDS("Total Outstanding Qty. (base)","Total Qty. Packed (base)");
                "Total Order Qty. (Base)" := PurchHeader."Total Outstanding Qty. (base)";
              END;
              "Packed Order Qty. (Base)" := PurchHeader."Total Qty. Packed (base)";
            END;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferHeader.RESET;
            IF ShippingSetup."Location Packing" THEN
              TransferHeader.SETRANGE("Location Filter",PackingStation."Location Code");
            IF "Multi Document Package" THEN BEGIN
              TransferHeader.SETFILTER("No.","Multi Document No.");
              IF TransferHeader.FIND('-') THEN
                REPEAT
                  // Additional code required in Attain
                  TransferHeader.CALCFIELDS(
                    "Total Qty. To Ship (base)","Total Qty. Packed (base)",
                    "E-Ship Whse. Outst. Qty (Base)","E-Ship Whse. Ship. Qty (Base)",
                    "E-Ship Invt. Outst. Qty (Base)");
                  "Total Order Qty. (Base)" :=
                    "Total Order Qty. (Base)" + TransferHeader."Total Qty. To Ship (base)" +
                    TransferHeader."E-Ship Whse. Outst. Qty (Base)" +
                    TransferHeader."E-Ship Whse. Ship. Qty (Base)";
                  IF TransferHeader."Total Qty. To Ship (base)" = 0 THEN
                    "Total Order Qty. (Base)" :=
                      "Total Order Qty. (Base)" + TransferHeader."E-Ship Invt. Outst. Qty (Base)";
                  "Packed Order Qty. (Base)" :=
                    "Packed Order Qty. (Base)" + TransferHeader."Total Qty. Packed (base)";
                UNTIL TransferHeader.NEXT = 0;
            END ELSE BEGIN
              TransferHeader."No." := "Source ID";

              // Additional code required in Attain
              TransferHeader.CALCFIELDS(
                "Total Qty. To Ship (base)","Total Qty. Packed (base)",
                "E-Ship Whse. Outst. Qty (Base)","E-Ship Whse. Ship. Qty (Base)",
                "E-Ship Invt. Outst. Qty (Base)");
              "Total Order Qty. (Base)" :=
                TransferHeader."Total Qty. To Ship (base)" +
                TransferHeader."E-Ship Whse. Outst. Qty (Base)" +
                TransferHeader."E-Ship Whse. Ship. Qty (Base)";
              IF TransferHeader."Total Qty. To Ship (base)" = 0 THEN
                "Total Order Qty. (Base)" :=
                  "Total Order Qty. (Base)" + TransferHeader."E-Ship Invt. Outst. Qty (Base)";
              "Packed Order Qty. (Base)" := TransferHeader."Total Qty. Packed (base)";
            END;
          END;
        ELSE
          ErrorUnknownSourceType2;
      END;
    END;

    PROCEDURE CalculateTotalValue@17(VAR TotalQuantityBase@1240030000 : Decimal;VAR TotalValueCostBase@1240030001 : Decimal;VAR TotalValuePriceBase@1240030002 : Decimal;VAR NewUnitOfMeasureCode@1240030003 : Code[10];MultiDocumentPackage@1240030004 : Boolean;MultiDocumentNo@1240030005 : Code[250];LineType@1240030006 : Integer;LineNo@1240030007 : Code[20];LineVariantCode@1240030008 : Code[10];FilterVariant@1240030009 : Boolean;LineUnitOfMeasureCode@1240030010 : Code[10];FromUnitOfMeasureCode@1240030011 : Boolean;SourceType@1240030012 : Integer;SourceSubtype@1240030013 : Integer;SourceID@1240030014 : Code[250]);
    VAR
      SalesHeader@1240030015 : Record 36;
      SalesLine@1240030016 : Record 37;
      PurchHeader@1240030017 : Record 38;
      PurchLine@1240030018 : Record 39;
      TransferHeader@1240030019 : Record 5740;
      TransferLine@1240030020 : Record 5741;
      Item@1240030021 : Record 27;
    BEGIN
      NewUnitOfMeasureCode := '';

      GetShippingSetup;
      IF ShippingSetup."Location Packing" THEN
        GetPackingStation;

      CASE SourceType OF
        DATABASE::"Sales Header":
          BEGIN
            IF SalesHeader."No." <> SourceID THEN
              SalesHeader.GET(SourceSubtype,SourceID);
            IF SalesHeader."Currency Factor" = 0 THEN
              SalesHeader."Currency Factor" := 1;

            SalesLine.RESET;
            SalesLine.SETCURRENTKEY(
              "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment",Pack);
            SalesLine.SETRANGE("Document Type",SourceSubtype);
            IF MultiDocumentPackage THEN
              SalesLine.SETFILTER("Document No.",MultiDocumentNo)
            ELSE
              SalesLine.SETRANGE("Document No.",SourceID);
            SalesLine.SETRANGE(Type,LineType);
            SalesLine.SETRANGE("No.",LineNo);
            IF FilterVariant OR (LineVariantCode <> '') THEN
              SalesLine.SETRANGE("Variant Code",LineVariantCode);
            SalesLine.SETRANGE("Drop Shipment",FALSE);
            SalesLine.SETRANGE(Pack,TRUE);
            SalesLine.SETFILTER(Quantity,'<>0');
            SalesLine.SETFILTER("Outstanding Quantity",'<>0');
            IF ShippingSetup."Location Packing" THEN
              SalesLine.SETRANGE("Location Code",PackingStation."Location Code");
            SalesLine.SETRANGE("Unit of Measure Code",LineUnitOfMeasureCode);
            IF NOT SalesLine.FIND('-') THEN BEGIN
              SalesLine.SETRANGE("Unit of Measure Code");
              SalesLine.FIND('-');
              IF (LineUnitOfMeasureCode = '') AND NOT FromUnitOfMeasureCode AND
                 (LineUnitOfMeasureCode <> SalesLine."Unit of Measure Code")
              THEN
                NewUnitOfMeasureCode := SalesLine."Unit of Measure Code";
            END;

            REPEAT
              TotalQuantityBase := TotalQuantityBase + SalesLine."Outstanding Qty. (Base)";
              TotalValueCostBase :=
                TotalValueCostBase + SalesLine."Outstanding Quantity" * SalesLine."Unit Cost (LCY)";
              TotalValuePriceBase :=
                TotalValuePriceBase +
                ROUND(
                  (SalesLine."Outstanding Quantity" / SalesLine.Quantity) *
                  (SalesLine."Amount Including VAT" / SalesHeader."Currency Factor"),0.01);
            UNTIL SalesLine.NEXT = 0;

            IF TotalQuantityBase = 0 THEN
              ERROR(Text007);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            IF PurchHeader."No." <> SourceID THEN
              PurchHeader.GET(SourceSubtype,SourceID);
            IF PurchHeader."Currency Factor" = 0 THEN
              PurchHeader."Currency Factor" := 1;

            PurchLine.RESET;
            PurchLine.SETCURRENTKEY(
              "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment","Location Code");
            PurchLine.SETRANGE("Document Type",SourceSubtype);
            IF MultiDocumentPackage THEN
              PurchLine.SETFILTER("Document No.",MultiDocumentNo)
            ELSE
              PurchLine.SETRANGE("Document No.",SourceID);
            PurchLine.SETRANGE(Type,LineType);
            PurchLine.SETRANGE("No.",LineNo);
            IF FilterVariant OR (LineVariantCode <> '') THEN
              PurchLine.SETRANGE("Variant Code",LineVariantCode);
            PurchLine.SETRANGE("Drop Shipment",FALSE);
            PurchLine.SETFILTER(Quantity,'<>0');
            PurchLine.SETFILTER("Outstanding Quantity",'<>0');
            IF ShippingSetup."Location Packing" THEN
              PurchLine.SETRANGE("Location Code",PackingStation."Location Code");
            PurchLine.SETRANGE("Unit of Measure Code",LineUnitOfMeasureCode);
            IF NOT PurchLine.FIND('-') THEN BEGIN
              PurchLine.SETRANGE("Unit of Measure Code");
              PurchLine.FIND('-');
              IF (LineUnitOfMeasureCode = '') AND NOT FromUnitOfMeasureCode AND
                 (LineUnitOfMeasureCode <> PurchLine."Unit of Measure Code")
              THEN
                NewUnitOfMeasureCode := PurchLine."Unit of Measure Code";
            END;

            REPEAT
              TotalQuantityBase := TotalQuantityBase + PurchLine."Outstanding Qty. (Base)";
              TotalValueCostBase :=
                TotalValueCostBase + PurchLine."Outstanding Quantity" * PurchLine."Unit Cost (LCY)";
              TotalValuePriceBase :=
                TotalValuePriceBase +
                ROUND(
                  (PurchLine."Outstanding Quantity" / PurchLine.Quantity) *
                  (PurchLine."Amount Including VAT" / PurchHeader."Currency Factor"),0.01);
            UNTIL PurchLine.NEXT = 0;

            IF TotalQuantityBase = 0 THEN
              ERROR(Text008);
          END;
        DATABASE::"Transfer Header":
          BEGIN
            IF TransferHeader."No." <> SourceID THEN
              TransferHeader.GET(SourceID);

            TransferLine.RESET;
            TransferLine.SETCURRENTKEY(
              "Transfer-from Code",Status,"Derived From Line No.","Item No.","Variant Code");
            IF MultiDocumentPackage THEN
              TransferLine.SETFILTER("Document No.",MultiDocumentNo)
            ELSE
              TransferLine.SETRANGE("Document No.",SourceID);
            TransferLine.SETRANGE("Item No.",LineNo);
            IF FilterVariant OR (LineVariantCode <> '') THEN
              TransferLine.SETRANGE("Variant Code",LineVariantCode);
            TransferLine.SETFILTER(Quantity,'<>0');
            TransferLine.SETFILTER("Outstanding Quantity",'<>0');
            TransferLine.SETRANGE("Derived From Line No.",0);
            IF ShippingSetup."Location Packing" THEN
              TransferLine.SETRANGE("Transfer-from Code",PackingStation."Location Code");
            TransferLine.SETRANGE("Unit of Measure Code",LineUnitOfMeasureCode);
            IF NOT TransferLine.FIND('-') THEN BEGIN
              TransferLine.SETRANGE("Unit of Measure Code");
              TransferLine.FIND('-');
              IF (LineUnitOfMeasureCode = '') AND NOT FromUnitOfMeasureCode AND
                 (LineUnitOfMeasureCode <> TransferLine."Unit of Measure Code")
              THEN
                NewUnitOfMeasureCode := TransferLine."Unit of Measure Code";
            END;

            REPEAT
              IF TransferLine."Item No." <> '' THEN BEGIN
                IF TransferLine."Item No." <> Item."No." THEN
                  Item.GET(TransferLine."Item No.");
              END ELSE
                CLEAR(Item);

              TotalQuantityBase := TotalQuantityBase + TransferLine."Outstanding Qty. (Base)";
              TotalValueCostBase :=
                TotalValueCostBase + ROUND(TransferLine."Outstanding Qty. (Base)" * Item."Unit Cost");
              TotalValuePriceBase :=
                TotalValuePriceBase + ROUND(TransferLine."Outstanding Qty. (Base)" * Item."Unit Price");
            UNTIL TransferLine.NEXT = 0;

            IF TotalQuantityBase = 0 THEN
              ERROR(Text009);
          END;
        ELSE
          ErrorUnknownSourceType(SourceType,SourceSubtype,SourceID);
      END;
    END;

    PROCEDURE GetLineInfo@18() : Boolean;
    VAR
      SalesLine@1240030000 : Record 37;
      PurchLine@1240030001 : Record 39;
      TransferLine@1240030002 : Record 5741;
    BEGIN
      GetShippingSetup;
      IF ShippingSetup."Location Packing" THEN
        GetPackingStation;

      CASE "Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            SalesLine.RESET;
            SalesLine.SETRANGE("Document Type","Source Subtype");
            IF "Multi Document Package" THEN
              SalesLine.SETFILTER("Document No.","Multi Document No.")
            ELSE
              SalesLine.SETRANGE("Document No.","Source ID");
            SalesLine.SETRANGE(Type,"Input Type");
            SalesLine.SETRANGE("No.","Input No.");
            SalesLine.SETRANGE("Drop Shipment",FALSE);
            SalesLine.SETRANGE(Pack,TRUE);
            IF ShippingSetup."Location Packing" THEN
              SalesLine.SETRANGE("Location Code",PackingStation."Location Code");
            IF SalesLine.FIND('-') THEN BEGIN
              "Required Shipping Agent Code" := SalesLine."Required Shipping Agent Code";
              "Required E-Ship Agent Service" := SalesLine."Required E-Ship Agent Service";
              "Allow Other Ship. Agent/Serv." := SalesLine."Allow Other Ship. Agent/Serv.";
              "Line Unit of Measure Code" := SalesLine."Unit of Measure Code";
              "Line Quantity" := SalesLine.Quantity;

              EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchLine.RESET;
            PurchLine.SETRANGE("Document Type","Source Subtype");
            IF "Multi Document Package" THEN
              PurchLine.SETFILTER("Document No.","Multi Document No.")
            ELSE
              PurchLine.SETRANGE("Document No.","Source ID");
            PurchLine.SETRANGE(Type,"Input Type");
            PurchLine.SETRANGE("No.","Input No.");
            PurchLine.SETRANGE("Drop Shipment",FALSE);
            IF ShippingSetup."Location Packing" THEN
              PurchLine.SETRANGE("Location Code",PackingStation."Location Code");
            IF PurchLine.FIND('-') THEN BEGIN
              "Line Unit of Measure Code" := PurchLine."Unit of Measure Code";
              "Line Quantity" := PurchLine.Quantity;

              EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferLine.RESET;
            IF "Multi Document Package" THEN
              TransferLine.SETFILTER("Document No.","Multi Document No.")
            ELSE
              TransferLine.SETRANGE("Document No.","Source ID");
            TransferLine.SETRANGE("Item No.","Input No.");
            IF ShippingSetup."Location Packing" THEN
              TransferLine.SETRANGE("Transfer-from Code",PackingStation."Location Code");
            TransferLine.SETRANGE("Derived From Line No.",0);
            IF TransferLine.FIND('-') THEN BEGIN
              "Line Unit of Measure Code" := TransferLine."Unit of Measure Code";
              "Line Quantity" := TransferLine.Quantity;

              EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END;
        ELSE
          ErrorUnknownSourceType2;
      END;
    END;

    PROCEDURE ListSourceDocuments@22(MultiDocumentPackage@1240030000 : Boolean;MultiDocumentNo@1240030001 : Code[250];SourceType@1240030002 : Integer;SourceSubtype@1240030003 : Integer;SourceID@1240030004 : Code[250]) : Code[20];
    BEGIN
    END;

    PROCEDURE ViewSourceDocument@23(MultiDocumentPackage@1240030000 : Boolean;MultiDocumentNo@1240030001 : Code[250];SourceType@1240030002 : Integer;SourceSubtype@1240030003 : Integer;SourceID@1240030004 : Code[250]);
    VAR
      Salesheader@1240030005 : Record 36;
      PurchHeader@1240030006 : Record 38;
      TransferHeader@1240030007 : Record 5740;
    BEGIN
      CASE SourceType OF
        DATABASE::"Sales Header":
          BEGIN
            Salesheader.RESET;
            Salesheader.SETRANGE("Document Type",SourceSubtype);
            IF MultiDocumentPackage THEN
              Salesheader.SETFILTER("No.",MultiDocumentNo)
            ELSE
              Salesheader.SETRANGE("No.",SourceID);

            Salesheader.GET(SourceSubtype,SourceID);
            CASE Salesheader."Document Type" OF
              Salesheader."Document Type"::Order:
                PAGE.RUNMODAL(PAGE::"Sales Order",Salesheader);
              Salesheader."Document Type"::Invoice:
                PAGE.RUNMODAL(PAGE::"Sales Invoice",Salesheader);
              ELSE
                PAGE.RUNMODAL(0,Salesheader);
            END;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader.RESET;
            PurchHeader.SETRANGE("Document Type",SourceSubtype);
            IF MultiDocumentPackage THEN
              PurchHeader.SETFILTER("No.",MultiDocumentNo)
            ELSE
              PurchHeader.SETRANGE("No.",SourceID);

            PurchHeader.GET(SourceSubtype,SourceID);
            CASE PurchHeader."Document Type" OF
              PurchHeader."Document Type"::"Credit Memo":
                PAGE.RUNMODAL(PAGE::"Purchase Credit Memo",PurchHeader);
              PurchHeader."Document Type"::"Return Order":
                PAGE.RUNMODAL(PAGE::"Purchase Return Order",PurchHeader);
              ELSE
                PAGE.RUNMODAL(0,PurchHeader);
            END;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferHeader.RESET;
            IF MultiDocumentPackage THEN
              TransferHeader.SETFILTER("No.",MultiDocumentNo)
            ELSE
              TransferHeader.SETRANGE("No.",SourceID);

            TransferHeader.GET(SourceID);
            PAGE.RUNMODAL(PAGE::"Transfer Order",TransferHeader);
          END;
        ELSE
          ErrorUnknownSourceType(SourceType,SourceSubtype,SourceID);
      END;
    END;

    PROCEDURE ViewSourceDocument2@24();
    BEGIN
      ViewSourceDocument(
        "Multi Document Package","Multi Document No.","Source Type","Source Subtype","Source ID");
    END;

    PROCEDURE ViewPostedSourceDocument@1240030004(SourceType@1240030002 : Integer;SourceSubtype@1240030003 : Integer;PostedSourceID@1240030004 : Code[250]);
    VAR
      SalesShipmentheader@1240030005 : Record 110;
      PurchCrMemoHeader@1240030006 : Record 124;
      ReturnShipmentHeader@1240030000 : Record 6650;
      TransferShipmentHeader@1240030007 : Record 5744;
    BEGIN
      CASE SourceType OF
        DATABASE::"Sales Header":
          BEGIN
            SalesShipmentheader.GET(PostedSourceID);
            PAGE.RUNMODAL(PAGE::"Posted Sales Shipment",SalesShipmentheader);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            CASE SourceSubtype OF
              3:
                BEGIN
                  PurchCrMemoHeader.GET(PostedSourceID);
                  PAGE.RUNMODAL(PAGE::"Posted Purchase Credit Memo",PurchCrMemoHeader);
                END;
              5:
                BEGIN
                  ReturnShipmentHeader.GET(PostedSourceID);
                  PAGE.RUNMODAL(PAGE::"Posted Return Shipment",ReturnShipmentHeader);
                END;
            END;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferShipmentHeader.GET(PostedSourceID);
            PAGE.RUNMODAL(PAGE::"Posted Transfer Shipment",SalesShipmentheader);
          END;
        ELSE
          ErrorUnknownSourceType(SourceType,SourceSubtype,PostedSourceID);
      END;
    END;

    PROCEDURE TestBillOfladingNo@25(SourceType@1240030000 : Integer;SourceSubtype@1240030001 : Integer;SourceID@1240030002 : Code[250]);
    VAR
      Salesheader@1240030003 : Record 36;
      PurchHeader@1240030004 : Record 38;
      TransferHeader@1240030006 : Record 5740;
      BillOfLadingLine@1240030005 : Record 14000823;
    BEGIN
      GetShippingSetup;
      IF ShippingSetup."Location Packing" THEN
        GetPackingStation;

      CASE SourceType OF
        DATABASE::"Sales Header":
          BEGIN
            Salesheader.GET(SourceSubtype,SourceID);

            BillOfLadingLine.RESET;
            BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
            BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
            BillOfLadingLine.SETRANGE("No.",Salesheader."No.");
            BillOfLadingLine.SETRANGE(Closed,FALSE);
            IF ShippingSetup."Location Packing" THEN
              BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
            BillOfLadingLine.SETRANGE("Source Type",SourceType);
            BillOfLadingLine.SETRANGE("Source Subtype",SourceSubtype);
            BillOfLadingLine.SETRANGE("Source ID",SourceID);
            IF NOT BillOfLadingLine.FIND('-') THEN
              ERROR(Text010,FormatSource(SourceType,SourceSubtype,SourceID));
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader.GET(SourceSubtype,SourceID);

            BillOfLadingLine.RESET;
            BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
            BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
            BillOfLadingLine.SETRANGE("No.",PurchHeader."No.");
            BillOfLadingLine.SETRANGE(Closed,FALSE);
            IF ShippingSetup."Location Packing" THEN
              BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
            BillOfLadingLine.SETRANGE("Source Type",SourceType);
            BillOfLadingLine.SETRANGE("Source Subtype",SourceSubtype);
            BillOfLadingLine.SETRANGE("Source ID",SourceID);
            IF NOT BillOfLadingLine.FIND('-') THEN
              ERROR(Text010,FormatSource(SourceType,SourceSubtype,SourceID));
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferHeader.GET(SourceID);

            BillOfLadingLine.RESET;
            BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
            BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
            BillOfLadingLine.SETRANGE("No.",TransferHeader."No.");
            BillOfLadingLine.SETRANGE(Closed,FALSE);
            IF ShippingSetup."Location Packing" THEN
              BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
            BillOfLadingLine.SETRANGE("Source Type",SourceType);
            BillOfLadingLine.SETRANGE("Source Subtype",SourceSubtype);
            BillOfLadingLine.SETRANGE("Source ID",SourceID);
            IF NOT BillOfLadingLine.FIND('-') THEN
              ERROR(Text010,FormatSource(SourceType,SourceSubtype,SourceID));
          END;
        ELSE
          ErrorUnknownSourceType("Source Type","Source Subtype","Source ID");
      END;
    END;

    PROCEDURE GetShippingSetup@26();
    BEGIN
      IF ShippingSetupRetrieved THEN
        EXIT;

      ShippingSetup.GET;
      ShippingSetupRetrieved := TRUE;
    END;

    PROCEDURE GetPackingStation@27();
    BEGIN
      IF PackingStationRetrieved THEN
        EXIT;

      PackingStation.GetPackingStation;
      PackingStationRetrieved := TRUE;
    END;

    PROCEDURE ReverseMultiDocNoFilter@28() : Text[250];
    VAR
      TempFilter@1240030000 : Text[250];
      TempText@1240030001 : Text[250];
      Pos@1240030002 : Integer;
    BEGIN
      TempText := "Multi Document No.";
      TempFilter := '';
      IF TempText = '' THEN
        EXIT(TempFilter);

      REPEAT
        Pos := STRPOS(TempText,'|');
        IF TempFilter <> '' THEN BEGIN
          IF Pos <> 0 THEN BEGIN
            TempFilter := TempFilter + '&<>' + COPYSTR(TempText,1,Pos - 1);
            TempText := COPYSTR(TempText,Pos + 1);
          END ELSE
            TempFilter := TempFilter + '&<>' + TempText;
        END ELSE BEGIN
          TempFilter := '<>' + COPYSTR(TempText,1,Pos - 1);
          TempText := COPYSTR(TempText,Pos + 1);
        END;

        IF MAXSTRLEN(TempFilter) - STRLEN(TempFilter) < Pos + 4 THEN
          EXIT(TempFilter);
      UNTIL Pos = 0;

      EXIT(TempFilter);
    END;

    PROCEDURE LookupSelectedSourceID@1240030002(Package@1240030000 : Record 14000701;VAR FastPackLineTmp@1240030001 : TEMPORARY Record 14000711;CurrentLineNo@1240030002 : Integer;InputType@1240030003 : Integer;InputNo@1240030004 : Code[20];InputVariantCode@1240030005 : Code[10];InputQuantityBase@1240030006 : Decimal) : Boolean;
    VAR
      PackageLine@1240030007 : Record 14000702;
      FastPackLine@1240030008 : Record 14000711;
      PackingRule@1240030012 : Record 14000715;
      SelectSourceDocument@1240030009 : Page 14000671;
      PackageMgt@1240030010 : Codeunit 14000702;
      QuantityBase@1240030011 : Decimal;
    BEGIN
      IF NOT Package."Multi Document Package" THEN
        EXIT(FALSE);

      GetShippingSetup;
      ShippingSetup.TESTFIELD("Select Multi Document Source");
      IF ShippingSetup."Location Packing" THEN
        GetPackingStation;

      PackingRule.GetPackingRule(Package."Ship-to Type",Package."Ship-to No.",Package."Ship-to Code");
      PackageMgt.Initialize(PackingStation,ShippingSetup);
      PackageMgt.UpdateFastPackLines(
        Rec,FastPackLineTmp,PackingRule,FALSE,FALSE,TRUE,InputType,InputNo,InputVariantCode);

      FastPackLineTmp.RESET;
      IF FastPackLineTmp.FIND('-') THEN
        IF FastPackLineTmp.NEXT = 0 THEN
          EXIT(FALSE);

      PackageLine.RESET;
      PackageLine.SETRANGE("Package No.",Package."No.");
      PackageLine.SETRANGE(Type,InputType);
      PackageLine.SETRANGE("No.",InputNo);
      PackageLine.SETRANGE("Variant Code",InputVariantCode);
      IF PackageLine.FIND('-') THEN
        REPEAT
          PackageLine.TESTFIELD("Source ID");
          IF FastPackLineTmp.GET(InputType,InputNo,InputVariantCode,PackageLine."Source ID") THEN BEGIN
            FastPackLineTmp."Qty. Packed (Base)" :=
              FastPackLineTmp."Qty. Packed (Base)" - PackageLine."Quantity (Base)";
            FastPackLineTmp."Remaining Qty. to Pack (Base)" :=
              FastPackLineTmp."Qty. to Ship (Base)" - FastPackLineTmp."Qty. Packed (Base)";
            FastPackLineTmp.UpdatePackedQty;
            FastPackLineTmp.MODIFY;
          END;

          IF PackageLine."Line No." <> CurrentLineNo THEN BEGIN
            PackageLine.TESTFIELD("Selected Source ID");
            FastPackLineTmp.GET(InputType,InputNo,InputVariantCode,PackageLine."Selected Source ID");
            FastPackLineTmp."Qty. Packed (Base)" :=
              FastPackLineTmp."Qty. Packed (Base)" + PackageLine."Quantity (Base)";
            FastPackLineTmp."Remaining Qty. to Pack (Base)" :=
              FastPackLineTmp."Qty. to Ship (Base)" - FastPackLineTmp."Qty. Packed (Base)";
            FastPackLineTmp.UpdatePackedQty;
            FastPackLineTmp.MODIFY;
          END;
        UNTIL PackageLine.NEXT = 0;

      IF FastPackLineTmp.FIND('-') THEN
        IF FastPackLineTmp.NEXT = 0 THEN
          IF FastPackLineTmp."Remaining Qty. to Pack (Base)" >= InputQuantityBase THEN BEGIN
            FastPackLineTmp.VALIDATE("Qty. to Pack (Base)",InputQuantityBase);
            FastPackLineTmp.MODIFY;

            EXIT(TRUE);
          END;

      QuantityBase := 0;
      FastPackLineTmp.RESET;
      IF FastPackLineTmp.FIND('-') THEN BEGIN
        REPEAT
          QuantityBase := QuantityBase + FastPackLineTmp."Remaining Qty. to Pack (Base)";
        UNTIL FastPackLineTmp.NEXT = 0;

        IF QuantityBase = InputQuantityBase THEN BEGIN
          FastPackLineTmp.FIND('-');
          REPEAT
            IF FastPackLineTmp."Remaining Qty. to Pack (Base)" <> 0 THEN BEGIN
              FastPackLineTmp.VALIDATE(
                "Qty. to Pack",FastPackLineTmp."Remaining Qty. to Pack");
              FastPackLineTmp.VALIDATE(
                "Qty. to Pack (Base)",FastPackLineTmp."Remaining Qty. to Pack (Base)");
              FastPackLineTmp.MODIFY;
            END ELSE
              FastPackLineTmp.DELETE;
          UNTIL FastPackLineTmp.NEXT = 0;

          EXIT(TRUE);
        END;
      END;

      REPEAT
        CLEAR(SelectSourceDocument);
        SelectSourceDocument.LoadFastPackLines(FastPackLineTmp,InputQuantityBase);
        SelectSourceDocument.LOOKUPMODE(TRUE);
        IF SelectSourceDocument.RUNMODAL = ACTION::LookupOK THEN BEGIN
          SelectSourceDocument.GETRECORD(FastPackLine);

          SelectSourceDocument.GetFastPackLines(FastPackLineTmp);
          FastPackLineTmp.SETFILTER("Qty. to Pack (Base)",'<>0');
          IF NOT FastPackLineTmp.FIND('-') THEN BEGIN
            FastPackLineTmp.SETRANGE("Qty. to Pack (Base)");
            IF FastPackLine."Remaining Qty. to Pack (Base)" >= InputQuantityBase THEN BEGIN
              FastPackLineTmp.DELETEALL;

              FastPackLine."Qty. to Pack (Base)" := InputQuantityBase;
              FastPackLineTmp := FastPackLine;
              FastPackLineTmp.INSERT;
              EXIT(TRUE);
            END;
          END ELSE BEGIN
            QuantityBase := 0;
            REPEAT
              QuantityBase := QuantityBase + FastPackLineTmp."Qty. to Pack (Base)";
            UNTIL FastPackLineTmp.NEXT = 0;

            IF InputQuantityBase = QuantityBase THEN BEGIN
              FastPackLineTmp.SETRANGE("Qty. to Pack (Base)",0);
              FastPackLineTmp.DELETEALL;
              FastPackLineTmp.SETRANGE("Qty. to Pack (Base)");
              EXIT(TRUE);
            END ELSE
              MESSAGE(Text013);
          END;
        END ELSE
          ERROR(Text013);
      UNTIL FALSE;
    END;

    PROCEDURE LookupSelectedSourceID2@32(Package@1240030000 : Record 14000701;VAR CurrentPackageLine@1240030001 : Record 14000702) : Boolean;
    VAR
      FastPackLineTmp@1240030002 : TEMPORARY Record 14000711;
    BEGIN
      CurrentPackageLine.TESTFIELD("No.");

      IF LookupSelectedSourceID(
          Package,FastPackLineTmp,
          CurrentPackageLine."Line No.",CurrentPackageLine.Type,CurrentPackageLine."No.",
          CurrentPackageLine."Variant Code",CurrentPackageLine."Quantity (Base)")
      THEN BEGIN
        FastPackLineTmp.RESET;
        FastPackLineTmp.SETFILTER("Qty. to Pack (Base)",'<>0');
        IF NOT FastPackLineTmp.FIND('-') THEN
          EXIT(FALSE)
        ELSE
          IF FastPackLineTmp.NEXT <> 0 THEN
            ERROR(Text011);

        IF FastPackLineTmp."Qty. to Pack (Base)" <> CurrentPackageLine."Quantity (Base)" THEN
          ERROR(Text012);

        IF CurrentPackageLine."Selected Source ID" <> FastPackLineTmp."From Source ID" THEN
          CurrentPackageLine.VALIDATE("Selected Source ID",FastPackLineTmp."From Source ID");
      END;
    END;

    PROCEDURE ValidateSelectedSourceID@29(Package@1240030000 : Record 14000701;VAR PackageLine@1240030001 : Record 14000702);
    BEGIN
      IF NOT Package."Multi Document Package" THEN BEGIN
        PackageLine.TESTFIELD("Selected Source ID",'');
        EXIT;
      END;

      // Additional Quantity testing
    END;

    PROCEDURE TestReleased@1240030000(SourceType@1240030003 : Integer;SourceSubtype@1240030002 : Integer;SourceID@1240030001 : Code[250];GiveError@1240030000 : Boolean) : Boolean;
    VAR
      SalesHeader@1240030004 : Record 36;
      PurchHeader@1240030005 : Record 38;
      TransferHeader@1240030006 : Record 5740;
      SalesSetup@1240030007 : Record 311;
      PurchSetup@1240030008 : Record 312;
      InventorySetup@1240030009 : Record 313;
    BEGIN
      CASE SourceType OF
        DATABASE::"Sales Header":
          BEGIN
            SalesSetup.GET;
            SalesSetup.TESTFIELD("Enable Shipping");

            IF GiveError THEN
              SalesHeader.GET(SourceSubtype,SourceID)
            ELSE
              IF NOT SalesHeader.GET(SourceSubtype,SourceID) THEN
                EXIT(FALSE);

            IF SalesHeader.Status <> SalesHeader.Status::Released THEN
              IF GiveError THEN
                SalesHeader.TESTFIELD(Status,SalesHeader.Status::Released)
              ELSE
                EXIT(FALSE);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchSetup.GET;
            PurchSetup.TESTFIELD("Enable Shipping");

            IF GiveError THEN
              PurchHeader.GET(SourceSubtype,SourceID)
            ELSE
              IF NOT PurchHeader.GET(SourceSubtype,SourceID) THEN
                EXIT(FALSE);

            IF PurchHeader.Status <> PurchHeader.Status::Released THEN
              IF GiveError THEN
                PurchHeader.TESTFIELD(Status,PurchHeader.Status::Released)
              ELSE
                EXIT(FALSE);
          END;
        DATABASE::"Transfer Header":
          BEGIN
            InventorySetup.GET;
            InventorySetup.TESTFIELD("Enable Shipping");

            IF GiveError THEN
              TransferHeader.GET(SourceID)
            ELSE
              IF NOT TransferHeader.GET(SourceID) THEN
                EXIT(FALSE);

            IF TransferHeader.Status <> TransferHeader.Status::Released THEN
              IF GiveError THEN
                TransferHeader.TESTFIELD(Status,TransferHeader.Status::Released)
              ELSE
                EXIT(FALSE);
          END;
        ELSE
          ErrorUnknownSourceType(SourceType,SourceSubtype,SourceID);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE TestReleased2@1240030001(GiveError@1240030000 : Boolean) : Boolean;
    BEGIN
      EXIT(TestReleased("Source Type","Source Subtype","Source ID",GiveError));
    END;

    PROCEDURE TestAllDocumentsReleased@1240030003() : Boolean;
    VAR
      SalesHeader@1240030002 : Record 36;
      PurchHeader@1240030001 : Record 38;
      TransferHeader@1240030000 : Record 5740;
    BEGIN
      CASE "Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader.RESET;
            SalesHeader.SETRANGE("Document Type","Source Subtype");
            IF "Multi Document Package" THEN
              SalesHeader.SETFILTER("No.","Multi Document No.")
            ELSE
              SalesHeader.SETRANGE("No.","Source ID");
            IF SalesHeader.FIND('-') THEN
              REPEAT
                IF NOT TestReleased("Source Type",SalesHeader."Document Type",SalesHeader."No.",FALSE)
                THEN
                  EXIT(FALSE);
              UNTIL SalesHeader.NEXT = 0;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader.RESET;
            PurchHeader.SETRANGE("Document Type","Source Subtype");
            IF "Multi Document Package" THEN
              PurchHeader.SETFILTER("No.","Multi Document No.")
            ELSE
              PurchHeader.SETRANGE("No.","Source ID");
            IF PurchHeader.FIND('-') THEN
              REPEAT
                IF NOT TestReleased("Source Type",PurchHeader."Document Type",PurchHeader."No.",FALSE)
                THEN
                  EXIT(FALSE);
              UNTIL PurchHeader.NEXT = 0;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferHeader.RESET;
            IF "Multi Document Package" THEN
              TransferHeader.SETFILTER("No.","Multi Document No.")
            ELSE
              TransferHeader.SETRANGE("No.","Source ID");
            IF TransferHeader.FIND('-') THEN
              REPEAT
                IF NOT TestReleased("Source Type",0,TransferHeader."No.",FALSE) THEN
                  EXIT(FALSE);
              UNTIL TransferHeader.NEXT = 0;
          END;
        ELSE
          ErrorUnknownSourceType2;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE CheckNameAddress@1240031005(ShippingAgentCode@1240030000 : Code[10]);
    VAR
      SalesHeader@1240030003 : Record 36;
      PurchHeader@1240030002 : Record 38;
      TransferHeader@1240030001 : Record 5740;
      NameAndAddressMgt@1240030004 : Codeunit 14000709;
    BEGIN
      CASE "Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader.RESET;
            SalesHeader.SETRANGE("Document Type","Source Subtype");
            IF "Multi Document Package" THEN
              SalesHeader.SETFILTER("No.","Multi Document No.")
            ELSE
              SalesHeader.SETRANGE("No.","Source ID");
            IF SalesHeader.FIND('-') THEN
              REPEAT
                NameAndAddressMgt.CheckNameAddressSalesHeader(SalesHeader,ShippingAgentCode);
              UNTIL SalesHeader.NEXT = 0;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader.RESET;
            PurchHeader.SETRANGE("Document Type","Source Subtype");
            IF "Multi Document Package" THEN
              PurchHeader.SETFILTER("No.","Multi Document No.")
            ELSE
              PurchHeader.SETRANGE("No.","Source ID");
            IF PurchHeader.FIND('-') THEN
              REPEAT
                NameAndAddressMgt.CheckNameAddressPurchaseHeader(PurchHeader,ShippingAgentCode);
              UNTIL PurchHeader.NEXT = 0;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferHeader.RESET;
            IF "Multi Document Package" THEN
              TransferHeader.SETFILTER("No.","Multi Document No.")
            ELSE
              TransferHeader.SETRANGE("No.","Source ID");
            IF TransferHeader.FIND('-') THEN
              REPEAT
                NameAndAddressMgt.CheckNameAddressTransferHeader(TransferHeader,ShippingAgentCode);
              UNTIL TransferHeader.NEXT = 0;
          END;
        ELSE
          ErrorUnknownSourceType2;
      END;
    END;

    BEGIN
    END.
  }
}

