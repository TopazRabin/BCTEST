OBJECT Table 14000823 Bill of Lading Line
{
  OBJECT-PROPERTIES
  {
    Date=07/13/20;
    Time=12:00:00 PM;
    Version List=SE0.62;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               BillOfLading.GET("Bill of Lading No.");

               //TM BEG 080415
               IF NOT SuspendTestRelease THEN
               //TM END 080415
               BillOfLading.TESTFIELD(Released,FALSE);

               ShippingSetup.GET;
               IF ShippingSetup."Location Packing" THEN
                 "Location Code" := BillOfLading."Location Code";

               ModifyRelatedTable(0,'',Type,"No.",FALSE);
             END;

    OnModify=BEGIN
               BillOfLading.GET("Bill of Lading No.");

               //TM BEG 080415
               IF NOT SuspendTestRelease THEN
               //TM END 080415
               BillOfLading.TESTFIELD(Released,FALSE);

               ModifyRelatedTable(xRec.Type,xRec."No.",Type,"No.",FALSE);
             END;

    OnDelete=VAR
               BillOfLadingInfoLine@1000000000 : Record 14000827;
             BEGIN
               BillOfLading.GET("Bill of Lading No.");

               //TM BEG 080415
               IF NOT SuspendTestRelease THEN
               //TM END 080415
               BillOfLading.TESTFIELD(Released,FALSE);

               //TM BEG 080415
               IF "Source ID" <> '' THEN BEGIN
                 BillOfLadingInfoLine.SETRANGE("Bill of Lading No.", "Bill of Lading No.");
                 BillOfLadingInfoLine.SETRANGE("Source Type", "Source Type");
                 BillOfLadingInfoLine.SETRANGE("Source Subtype", "Source Subtype");
                 BillOfLadingInfoLine.SETRANGE("Source ID", "Source ID");
                 BillOfLadingInfoLine.SETRANGE("Posted Source ID", "Posted Source ID");
                 IF BillOfLadingInfoLine.FINDSET THEN
                 REPEAT
                   BillOfLadingInfoLine.SuspendTestReleased(TRUE);
                   BillOfLadingInfoLine.DELETE(TRUE);
                 UNTIL BillOfLadingInfoLine.NEXT = 0;
               END;
               //TM END 080415


               ModifyRelatedTable(xRec.Type,xRec."No.",0,'',FALSE);
             END;

    OnRename=BEGIN
               ERROR(Text001);
             END;

    CaptionML=ENU=Bill of Lading Line;
    LookupPageID=Page14000828;
    DrillDownPageID=Page14000828;
  }
  FIELDS
  {
    { 1   ;   ;Bill of Lading No.  ;Code20        ;CaptionML=ENU=Bill of Lading No. }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 11  ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                TestNotClosed;
                                                              END;

                                                   CaptionML=ENU=Description }
    { 12  ;   ;Closed              ;Boolean       ;CaptionML=ENU=Closed;
                                                   Editable=No }
    { 13  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=ENU=Location Code;
                                                   Editable=No }
    { 21  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                TestNotClosed;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,Order,Sales Shipment (Posted),Package,Purchase Credit Memo (Posted),Return Shipment (Posted),Transfer Shipment (Posted),Bill of Lading,Bill of Lading (Released)";
                                                   OptionString=[ ,Order,Sales Shipment (Posted),Package,Purchase Credit Memo (Posted),Return Shipment (Posted),Transfer Shipment (Posted),Bill of Lading,Bill of Lading (Released)];
                                                   Editable=No }
    { 22  ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST("Sales Shipment (Posted)")) "Sales Shipment Header".No.
                                                                 ELSE IF (Type=CONST(Package)) "Posted Package".No.
                                                                 ELSE IF (Type=CONST("Purchase Credit Memo (Posted)")) "Purch. Cr. Memo Hdr.".No.
                                                                 ELSE IF (Type=CONST("Return Shipment (Posted)")) "Return Shipment Header".No.
                                                                 ELSE IF (Type=CONST("Transfer Shipment (Posted)")) "Transfer Shipment Header".No.
                                                                 ELSE IF (Type=CONST(Bill of Lading)) "Bill of Lading".No.
                                                                 ELSE IF (Type=CONST("Bill of Lading (Released)")) "Bill of Lading".No.;
                                                   OnValidate=BEGIN
                                                                TestNotClosed;

                                                                TESTFIELD(Type);
                                                                IF Type <> Type::Package THEN BEGIN
                                                                  TESTFIELD("Source Type");
                                                                  IF "Posted Source ID" = '' THEN
                                                                    TESTFIELD("Source ID");
                                                                END;

                                                                IF  "No." = xRec."No." THEN
                                                                  EXIT;

                                                                IF (Type = Type::Package) AND ("No." <> '') THEN BEGIN
                                                                  PostedPackage.GET("No.");
                                                                  PostedPackage.TESTFIELD("Original Package No.",'');

                                                                  PostedPackageLine.RESET;
                                                                  PostedPackageLine.SETCURRENTKEY(Type,"No.");
                                                                  PostedPackageLine.SETRANGE(Type,PostedPackageLine.Type::Package);
                                                                  PostedPackageLine.SETRANGE("No.",PostedPackage."No.");
                                                                  IF PostedPackageLine.FIND('-') THEN
                                                                    ERROR(Text002,PostedPackageLine."Package No.");

                                                                  "Source Type" := PostedPackage."Source Type";
                                                                  "Source Subtype" := PostedPackage."Source Subtype";
                                                                  "Source ID" := PostedPackage."Source ID";
                                                                  "Posted Source ID" := PostedPackage."Posted Source ID";
                                                                  Weight := PostedPackage."Calculation Weight";
                                                                  Volume := PostedPackage."Calculation Volume";
                                                                  Value := PostedPackage."Calculation Value";
                                                                  "External Document No." := PostedPackage."External Document No.";
                                                                END;

                                                                ModifyRelatedTable(0,'',Type,"No.",TRUE);
                                                              END;

                                                   TestTableRelation=No;
                                                   CaptionML=ENU=No.;
                                                   Editable=No }
    { 23  ;   ;Source Type         ;Integer       ;CaptionML=ENU=Source Type }
    { 24  ;   ;Source Subtype      ;Option        ;CaptionML=ENU=Source Subtype;
                                                   OptionCaptionML=ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                   OptionString=0,1,2,3,4,5,6,7,8,9,10 }
    { 25  ;   ;Source ID           ;Code20        ;CaptionML=ENU=Source ID }
    { 26  ;   ;Posted Source ID    ;Code20        ;CaptionML=ENU=Posted Source ID }
    { 33  ;   ;Weight              ;Decimal       ;CaptionML=ENU=Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 34  ;   ;Volume              ;Decimal       ;CaptionML=ENU=Volume;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 35  ;   ;Value               ;Decimal       ;CaptionML=ENU=Value;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 36  ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No.;
                                                   Editable=No }
    { 37  ;   ;Packages (Top Level);Integer       ;CaptionML=ENU=Packages (Top Level);
                                                   Editable=No }
    { 38  ;   ;Packages (Lower Level);Integer     ;CaptionML=ENU=Packages (Lower Level);
                                                   Editable=No }
    { 39  ;   ;Shipment Invoice No.;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Shipment Header"."Shipment Invoice No." WHERE (No.=FIELD(No.)));
                                                   CaptionML=ENU=Shipment Invoice No.;
                                                   Editable=No }
    { 41  ;   ;Shipping Agent Code ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Bill of Lading"."Shipping Agent Code" WHERE (No.=FIELD(Bill of Lading No.)));
                                                   CaptionML=ENU=Shipping Agent Code;
                                                   Editable=No }
    { 42  ;   ;Shipping Agent Service;Code30      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Bill of Lading"."Shipping Agent Service" WHERE (No.=FIELD(Bill of Lading No.)));
                                                   CaptionML=ENU=Shipping Agent Service;
                                                   Editable=No }
    { 43  ;   ;Bill of Lading Description;Text50  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Bill of Lading".Description WHERE (No.=FIELD(Bill of Lading No.)));
                                                   CaptionML=ENU=Bill of Lading Description;
                                                   Editable=No }
    { 44  ;   ;External Tracking No.;Code30       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Bill of Lading"."External Tracking No." WHERE (No.=FIELD(Bill of Lading No.)));
                                                   CaptionML=ENU=External Tracking No.;
                                                   Editable=No }
    { 50001;  ;EDI ASN             ;Boolean       ;Description=TPZ2301 }
  }
  KEYS
  {
    {    ;Bill of Lading No.,Line No.             ;SumIndexFields=Weight,Volume,Value;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Type,No.,Closed,Location Code            }
    {    ;Bill of Lading No.,Source Type,Source Subtype,Source ID,Type;
                                                   MaintainSQLIndex=No }
    {    ;Bill of Lading No.,External Document No.,Source Type,Source Subtype,Source ID;
                                                   MaintainSQLIndex=No }
    {    ;Source Type,Source Subtype,Source ID     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      BillOfLading@1000000000 : Record 14000822;
      BillOfLadingLine@1000000001 : Record 14000823;
      SalesShipmentHeader@1240030000 : Record 110;
      PurchCrMemoHeader@1240030001 : Record 124;
      ReturnShipmentHeader@1240030003 : Record 6650;
      TransferShipmentHeader@1240030004 : Record 5744;
      Package@1000000003 : Record 14000701;
      PostedPackage@1000000004 : Record 14000704;
      PostedPackageLine@1000000005 : Record 14000705;
      ShippingSetup@1000000007 : Record 14000707;
      PackingStation@1240030002 : Record 14000709;
      Text001@1001 : TextConst 'ENU=Cannot be renamed.';
      Text002@1002 : TextConst 'ENU=Package is part of Package %1.';
      Text003@1003 : TextConst 'ENU=%1 already exist on %2 %3.';
      Text004@1004 : TextConst 'ENU=Package %1 already exist in Shipment %2 on %3 %4.';
      Text005@1240030006 : TextConst 'ENU=No Packages for this type.';
      Text006@1240030005 : TextConst 'ENU=Packages must be viewed from the Bill of Lading.';
      EShipShpmtHeadrEdit@1240020000 : Codeunit 14000242;
      SuspendTestRelease@1000000002 : Boolean;

    PROCEDURE ModifyRelatedTable@5(OldType@1000000000 : Integer;OldNo@1000000001 : Code[20];NewType@1000000002 : Integer;NewNo@1000000003 : Code[20];TestOnly@1000000004 : Boolean);
    BEGIN
      IF (OldNo = '') AND (NewNo = '') THEN
        EXIT;

      IF (OldType > 0) AND (OldNo <> '') AND NOT TestOnly THEN BEGIN
        CASE OldType OF
          Type::Order:
            BEGIN
            END;
          Type::"Sales Shipment (Posted)":
            BEGIN
              SalesShipmentHeader.GET(OldNo);
              EShipShpmtHeadrEdit.BillOfLadingSalesShipmentHdr(SalesShipmentHeader,'');

              LOCKTABLE;
            END;
          Type::Package:
            BEGIN
              LOCKTABLE;

              PostedPackage.GET(OldNo);
              PostedPackage.VALIDATE("Bill of Lading No.",'');
              PostedPackage.MODIFY;
            END;
          Type::"Purchase Credit Memo (Posted)":
            BEGIN
              PurchCrMemoHeader.GET(OldNo);
              EShipShpmtHeadrEdit.BillOfLadingPurchCrMemo(PurchCrMemoHeader,'');

              LOCKTABLE;
            END;
          Type::"Return Shipment (Posted)":
            BEGIN
              ReturnShipmentHeader.GET(OldNo);
              EShipShpmtHeadrEdit.BillOfLadingReturnShipment(ReturnShipmentHeader,'');

              LOCKTABLE;
            END;
          Type::"Transfer Shipment (Posted)":
            BEGIN
              TransferShipmentHeader.GET(OldNo);
              EShipShpmtHeadrEdit.BillOfLadingTransferShipment(TransferShipmentHeader,'');

              LOCKTABLE;
            END;
          Type::"Bill of Lading",
          Type::"Bill of Lading (Released)":
            BEGIN
              IF BillOfLading.GET(OldNo) THEN BEGIN
                BillOfLading."Used on Bill of Lading No." := '';
                BillOfLading.MODIFY;
              END;
            END;
        END;
      END;

      IF (NewType > 0) AND (NewNo <> '') THEN BEGIN
        ShippingSetup.GET;
        PackingStation.GetPackingStation;

        BillOfLadingLine.RESET;
        BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed);
        BillOfLadingLine.SETRANGE(Type,Type);
        BillOfLadingLine.SETRANGE("No.","No.");
        BillOfLadingLine.SETRANGE(Closed,FALSE);
        BillOfLadingLine.SETRANGE("Source Type","Source Type");
        BillOfLadingLine.SETRANGE("Source Subtype","Source Subtype");
        IF ShippingSetup."Location Packing" THEN
          BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
        IF BillOfLadingLine.FIND('-') THEN
          IF (BillOfLadingLine."Bill of Lading No." <> "Bill of Lading No.") OR
             (BillOfLadingLine."Line No." <> "Line No.")
          THEN
            ERROR(
              Text003,BillOfLadingLine.TABLENAME,
              BillOfLading.TABLENAME,BillOfLadingLine."Bill of Lading No.")
          ELSE
            IF BillOfLadingLine.NEXT <> 0 THEN
              ERROR(
                Text003,BillOfLadingLine.TABLENAME,
                BillOfLading.TABLENAME,BillOfLadingLine."Bill of Lading No.");

        CASE NewType OF
          Type::Order:
            BEGIN
              //TM BEG 080415
              BillOfLading.GET("Bill of Lading No.");
              Package.RESET;
              Package.SETRANGE("Source ID", "Source ID");
              Package.SETRANGE("Source Type", "Source Type");
              Package.SETRANGE("Source Subtype", "Source Subtype");
              IF Package.FIND('-') THEN
              REPEAT
                IF Package."External Tracking No." <> '' THEN BEGIN
                  Package."External Tracking No." := BillOfLading."External Tracking No.";
                  Package.MODIFY;
                END;
              UNTIL Package.NEXT = 0;
              //TM END 080415
            END;
          Type::"Sales Shipment (Posted)":
            BEGIN
              TestPostedPackages(DATABASE::"Sales Header",NewNo);

              IF NOT TestOnly THEN
                SalesShipmentHeader.LOCKTABLE;
              SalesShipmentHeader.GET(NewNo);
              SalesShipmentHeader.TESTFIELD("Bill of Lading No.",'');
              IF NOT TestOnly THEN BEGIN
                LOCKTABLE;

                EShipShpmtHeadrEdit.BillOfLadingSalesShipmentHdr(SalesShipmentHeader,"Bill of Lading No.");
              END;

              "Source Type" := DATABASE::"Sales Header";
              IF SalesShipmentHeader."Order No." <> '' THEN BEGIN
                "Source Subtype" := 1;
                "Source ID" := SalesShipmentHeader."Order No.";
              END ELSE BEGIN
                "Source Subtype" := 2;
                "Source ID" := '';
              END;
              "Posted Source ID" := SalesShipmentHeader."No.";
              "External Document No." := SalesShipmentHeader."External Document No.";

              SummarizePostedPackages(DATABASE::"Sales Header",NewNo);
            END;
          Type::"Purchase Credit Memo (Posted)":
            BEGIN
              TestPostedPackages(DATABASE::"Purchase Header",NewNo);

              IF NOT TestOnly THEN
                PurchCrMemoHeader.LOCKTABLE;
              PurchCrMemoHeader.GET(NewNo);
              PurchCrMemoHeader.TESTFIELD("Bill of Lading No.",'');
              IF NOT TestOnly THEN BEGIN
                LOCKTABLE;

                EShipShpmtHeadrEdit.BillOfLadingPurchCrMemo(PurchCrMemoHeader,"Bill of Lading No.");
              END;

              "Source Type" := DATABASE::"Purchase Header";
              "Source Subtype" := 3;
              "Source ID" := PurchCrMemoHeader."Pre-Assigned No.";
              "Posted Source ID" := PurchCrMemoHeader."No.";
              "External Document No." := PurchCrMemoHeader."Vendor Cr. Memo No.";

              SummarizePostedPackages(DATABASE::"Purchase Header",NewNo);
            END;
          Type::"Return Shipment (Posted)":
            BEGIN
              TestPostedPackages(DATABASE::"Purchase Header",NewNo);

              IF NOT TestOnly THEN
                ReturnShipmentHeader.LOCKTABLE;
              ReturnShipmentHeader.GET(NewNo);
              ReturnShipmentHeader.TESTFIELD("Bill of Lading No.",'');
              IF NOT TestOnly THEN BEGIN;
                LOCKTABLE;

                EShipShpmtHeadrEdit.BillOfLadingReturnShipment(ReturnShipmentHeader,"Bill of Lading No.");
              END;

              "Source Type" := DATABASE::"Purchase Header";
              "Source Subtype" := 5;
              "Source ID" := ReturnShipmentHeader."Return Order No.";
              "Posted Source ID" := ReturnShipmentHeader."No.";
              "External Document No." := ReturnShipmentHeader."Vendor Authorization No.";

              SummarizePostedPackages(DATABASE::"Purchase Header",NewNo);
            END;
          Type::"Transfer Shipment (Posted)":
            BEGIN
              TestPostedPackages(DATABASE::"Transfer Header",NewNo);

              IF NOT TestOnly THEN
                TransferShipmentHeader.LOCKTABLE;
              TransferShipmentHeader.GET(NewNo);
              TransferShipmentHeader.TESTFIELD("Bill of Lading No.",'');
              IF NOT TestOnly THEN BEGIN
                LOCKTABLE;

                EShipShpmtHeadrEdit.BillOfLadingTransferShipment(TransferShipmentHeader,"Bill of Lading No.");
              END;

              "Source Type" := DATABASE::"Transfer Header";
              "Source Subtype" := 0;
              "Source ID" := TransferShipmentHeader."Transfer Order No.";
              "Posted Source ID" := TransferShipmentHeader."No.";
              "External Document No." := '';

              SummarizePostedPackages(DATABASE::"Transfer Header",NewNo);
            END;
          Type::Package:
            BEGIN
              IF NOT TestOnly THEN
                LOCKTABLE;

              IF NOT TestOnly THEN
                PostedPackage.LOCKTABLE;
              PostedPackage.GET(NewNo);
              PostedPackage.TESTFIELD("Bill of Lading No.",'');
              PostedPackage.CALCFIELDS("Exist in Other Package");
              PostedPackage.TESTFIELD("Exist in Other Package",FALSE);

              TestPackageNotOnBillOfLading(PostedPackage);

              IF NOT TestOnly THEN BEGIN
                PostedPackage.VALIDATE("Bill of Lading No.","Bill of Lading No.");
                PostedPackage.MODIFY;
              END;

              Weight := PostedPackage."Calculation Weight";
              Volume := PostedPackage."Calculation Volume";
              Value := PostedPackage."Calculation Value";
              "Packages (Top Level)" := 1;
              "Packages (Lower Level)" := 0;
              "External Document No." := PostedPackage."External Document No.";
            END;
          Type::"Bill of Lading",
          Type::"Bill of Lading (Released)":
            BEGIN
              BillOfLading.GET(NewNo);
              BillOfLading.TESTFIELD("Used on Bill of Lading No.",'');
              BillOfLading."Used on Bill of Lading No." := "Bill of Lading No.";
              BillOfLading.MODIFY;
            END;
        END;
      END ELSE BEGIN
        "Source Type" := 0;
        "Source Subtype" := 0;
        "Source ID" := '';
        "Posted Source ID" := '';
        Weight := 0;
        Volume := 0;
        Value := 0;
        "Packages (Top Level)" := 0;
        "Packages (Lower Level)" := 0;
      END;
    END;

    PROCEDURE TestPackageNotOnBillOfLading@7(CurrentPostedPackage@1000000000 : Record 14000704);
    BEGIN
      PostedPackage.TESTFIELD("Bill of Lading No.",'');

      IF CurrentPostedPackage."Posted Source ID" <> '' THEN BEGIN
        BillOfLadingLine.RESET;
        BillOfLadingLine.SETCURRENTKEY(Type,"No.");
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::"Sales Shipment (Posted)");
        BillOfLadingLine.SETRANGE("No.",CurrentPostedPackage."Posted Source ID");
        IF BillOfLadingLine.FIND('-') AND
           ((BillOfLadingLine."Bill of Lading No." <> "Bill of Lading No.") OR
            (BillOfLadingLine."Line No." <> "Line No."))
        THEN
          ERROR(
            Text004,
            CurrentPostedPackage."No.",BillOfLadingLine."No.",
            BillOfLading.TABLENAME,BillOfLadingLine."Bill of Lading No.");
      END;
    END;

    LOCAL PROCEDURE TestPostedPackages@2(SourceType@1240030000 : Integer;SourceID@1240030001 : Code[20]);
    BEGIN
      PostedPackage.RESET;
      PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Posted Source ID");
      PostedPackage.SETRANGE("Source Type",SourceType);
      PostedPackage.SETRANGE("Posted Source ID",SourceID);
      IF PostedPackage.FIND('-') THEN
        REPEAT
          TestPackageNotOnBillOfLading(PostedPackage);
        UNTIL PostedPackage.NEXT = 0;
    END;

    LOCAL PROCEDURE SummarizePostedPackages@3(SourceType@1240030000 : Integer;SourceID@1240030001 : Code[20]);
    BEGIN
      PostedPackage.RESET;
      PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Posted Source ID");
      PostedPackage.SETRANGE("Source Type",SourceType);
      PostedPackage.SETRANGE("Posted Source ID",SourceID);
      IF PostedPackage."Multi Document Package" THEN
        PostedPackage.SETFILTER("Original Exist in Other Pack.",'%1',FALSE);
      Weight := 0;
      Volume := 0;
      Value := 0;
      "Packages (Top Level)" := 0;
      "Packages (Lower Level)" := 0;
      IF PostedPackage.FIND('-') THEN
        REPEAT
          PostedPackage.CALCFIELDS("Exist in Other Package");
          IF NOT PostedPackage."Exist in Other Package" THEN BEGIN
            Weight := Weight + PostedPackage."Calculation Weight";
            Volume := Volume + PostedPackage."Calculation Volume";
            Value := Value + PostedPackage."Calculation Value";
            "Packages (Top Level)" := "Packages (Top Level)" + 1;
          END ELSE
            "Packages (Lower Level)" := "Packages (Lower Level)" + 1;
        UNTIL PostedPackage.NEXT = 0;
    END;

    PROCEDURE ViewPackages@1240030002();
    BEGIN
      CASE Type OF
        Type::Order:
          BEGIN
            Package.RESET;
            Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
            Package.SETRANGE("Source Type","Source Type");
            Package.SETRANGE("Source Subtype","Source Subtype");
            Package.SETRANGE("Source ID","Source ID");
            PAGE.RUNMODAL(0,Package);
          END;
        Type::"Sales Shipment (Posted)":
          MESSAGE(Text005);
        Type::Package:
          MESSAGE(Text005);
        Type::"Bill of Lading",
        Type::"Bill of Lading (Released)":
          MESSAGE(Text006);
      END;
    END;

    PROCEDURE ViewPostedPackages@1240030001();
    BEGIN
      CASE Type OF
        Type::Order:
          BEGIN
            PostedPackage.RESET;
            PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
            PostedPackage.SETRANGE("Source Type","Source Type");
            PostedPackage.SETRANGE("Source Subtype","Source Subtype");
            PostedPackage.SETRANGE("Source ID","No.");
            PAGE.RUNMODAL(0,PostedPackage);
          END;
        Type::"Sales Shipment (Posted)":
          BEGIN
            PostedPackage.RESET;
            PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Posted Source ID");
            PostedPackage.SETRANGE("Source Type",DATABASE::"Sales Header");
            PostedPackage.SETRANGE("Posted Source ID","No.");
            PAGE.RUNMODAL(0,PostedPackage);
          END;
        Type::"Purchase Credit Memo (Posted)":
          BEGIN
            PostedPackage.RESET;
            PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Posted Source ID");
            PostedPackage.SETRANGE("Source Type",DATABASE::"Purchase Header");
            PostedPackage.SETRANGE("Source Subtype",1,2);
            PostedPackage.SETRANGE("Posted Source ID","No.");
            PAGE.RUNMODAL(0,PostedPackage);
          END;
        Type::"Return Shipment (Posted)":
          BEGIN
            PostedPackage.RESET;
            PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Posted Source ID");
            PostedPackage.SETRANGE("Source Type",DATABASE::"Purchase Header");
            PostedPackage.SETRANGE("Source Subtype",5);
            PostedPackage.SETRANGE("Posted Source ID","No.");
            PAGE.RUNMODAL(0,PostedPackage);
          END;
        Type::"Transfer Shipment (Posted)":
          BEGIN
            PostedPackage.RESET;
            PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Posted Source ID");
            PostedPackage.SETRANGE("Source Type",DATABASE::"Transfer Header");
            PostedPackage.SETRANGE("Source Subtype",0);
            PostedPackage.SETRANGE("Posted Source ID","No.");
            PAGE.RUNMODAL(0,PostedPackage);
          END;
        Type::Package:
          BEGIN
            PostedPackage.RESET;
            PostedPackage.SETRANGE("No.","No.");
            PAGE.RUNMODAL(0,PostedPackage);
          END;
        Type::"Bill of Lading",
        Type::"Bill of Lading (Released)":
          MESSAGE(Text006);
      END;
    END;

    PROCEDURE ViewDocument@1240030000();
    VAR
      PackingControl@1240030000 : Record 14000717;
    BEGIN
      CASE Type OF
        Type::Order:
          PackingControl.ViewSourceDocument(FALSE,"No.","Source Type","Source Subtype","Source ID");
        Type::"Sales Shipment (Posted)":
          BEGIN
            SalesShipmentHeader.RESET;
            SalesShipmentHeader.SETRANGE("No.","No.");
            PAGE.RUNMODAL(PAGE::"Posted Sales Shipment",SalesShipmentHeader);
          END;
        Type::"Purchase Credit Memo (Posted)":
          BEGIN
            PurchCrMemoHeader.RESET;
            PurchCrMemoHeader.SETRANGE("No.","No.");
            PAGE.RUNMODAL(PAGE::"Posted Purchase Credit Memo",PurchCrMemoHeader);
          END;
        Type::"Return Shipment (Posted)":
          BEGIN
            ReturnShipmentHeader.RESET;
            ReturnShipmentHeader.SETRANGE("No.","No.");
            PAGE.RUNMODAL(PAGE::"Posted Return Shipment",ReturnShipmentHeader);
          END;
        Type::"Transfer Shipment (Posted)":
          BEGIN
            TransferShipmentHeader.RESET;
            TransferShipmentHeader.SETRANGE("No.","No.");
            PAGE.RUNMODAL(PAGE::"Posted Transfer Shipment",TransferShipmentHeader);
          END;
        Type::Package:
          BEGIN
            PostedPackage.RESET;
            PostedPackage.SETRANGE("No.","No.");
            IF PostedPackage.FIND('-') THEN ;
            IF PostedPackage.Miscellaneous THEN
              PAGE.RUNMODAL(PAGE::"Posted Miscellaneous Package",PostedPackage)
            ELSE
              PAGE.RUNMODAL(PAGE::"Posted Package",PostedPackage);
          END;
        Type::"Bill of Lading":
          BEGIN
            BillOfLading.GET("Source ID");
            PAGE.RUNMODAL(PAGE::"Bill of Lading",BillOfLading);
          END;
        Type::"Bill of Lading (Released)":
          BEGIN
            BillOfLading.GET("Source ID");
            IF BillOfLading.Posted THEN
              PAGE.RUNMODAL(PAGE::"Posted Bill of Lading",BillOfLading)
            ELSE
              PAGE.RUNMODAL(PAGE::"Bill of Lading",BillOfLading);
          END;
      END;
    END;

    PROCEDURE TestNotClosed@1();
    BEGIN
      IF BillOfLading."No." <> "Bill of Lading No." THEN
        BillOfLading.GET("Bill of Lading No.");


      //TM BEG 080415
      IF NOT SuspendTestRelease THEN
      //TM END 080415
      BillOfLading.TESTFIELD(Released,FALSE);
    END;

    PROCEDURE SuspendTestReleased@1000000000(SuspendTestRelease2@1000000000 : Boolean);
    BEGIN
      //TM BEG 080415
      SuspendTestRelease := SuspendTestRelease2;
      //TM END 080415
    END;

    BEGIN
    {
      06-19-2018 TPZ2301 DKUMAR
       Added EDI Order Field.
    }
    END.
  }
}

