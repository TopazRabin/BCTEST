OBJECT Table 14099201 Inbound ASN Line
{
  OBJECT-PROPERTIES
  {
    Date=12/01/17;
    Time=12:00:00 PM;
    Version List=IBA1.11.01;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               GetHeader;
               IF (InboundASNHeader.Status > InboundASNHeader.Status::Open) THEN
                 ERROR(txtInsertError, InboundASNHeader."ASN No.");
               "On The Water Location" := InboundASNHeader."On The Water Location";
             END;

    OnModify=BEGIN
               GetHeader;
               IF (InboundASNHeader.Status > InboundASNHeader.Status::Updated) THEN
                 ERROR(txtModifyError, InboundASNHeader."ASN No.");
             END;

    OnDelete=VAR
               InboundASNCommentLine@1240020000 : Record 14099206;
             BEGIN
               InboundASNCommentLine.RESET;
               InboundASNCommentLine.SETRANGE("No.","ASN No.");
               InboundASNCommentLine.SETRANGE("Attached to Line No.","Line No.");
               InboundASNCommentLine.DELETEALL(TRUE);
             END;

    CaptionML=ENU=Inbound ASN Line;
  }
  FIELDS
  {
    { 1   ;   ;ASN No.             ;Code20        ;TableRelation="Inbound ASN Header"."ASN No.";
                                                   CaptionML=ENU=ASN No. }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 3   ;   ;Last Receipt No.    ;Code20        ;TableRelation="Purch. Rcpt. Header".No.;
                                                   CaptionML=ENU=Last Receipt No. }
    { 5   ;   ;Grouping No.        ;Code20        ;OnValidate=BEGIN
                                                                GetHeader;
                                                                IF (InboundASNHeader."Group by Purchase Order") AND ("Grouping No." <> '') THEN
                                                                  ERROR(txtGroupError, InboundASNHeader.FIELDCAPTION("Group by Purchase Order"));
                                                              END;
                                                               }
    { 11  ;   ;Purchase Order No.  ;Code20        ;CaptionML=ENU=Purchase Order No.;
                                                   Editable=No }
    { 12  ;   ;Purchase Order Line No.;Integer    ;CaptionML=ENU=Purchase Order Line No.;
                                                   Editable=No }
    { 13  ;   ;Item No.            ;Code50        ;TableRelation=Item.No.;
                                                   CaptionML=ENU=Item No. }
    { 14  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=ENU=Variant Code }
    { 15  ;   ;On The Water Location;Code10       ;TableRelation=Location.Code;
                                                   OnValidate=BEGIN
                                                                IF ("On The Water Location" <> '') AND ("On The Water Location" <> InboundASNHeader."Final Dest Location") THEN BEGIN
                                                                  ASNPost.CheckOnTheWaterLocationSetting("On The Water Location");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=On The Water Location }
    { 16  ;   ;Final Dest. Location;Code10        ;TableRelation=Location.Code;
                                                   CaptionML=ENU=Final Dest. Location }
    { 21  ;   ;Purchase Line Direct Unit Cost;Decimal;
                                                   CaptionML=ENU=Purchase Line Direct Unit Cost;
                                                   DecimalPlaces=0:5;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Purchase Line Direct Unit Cost")) }
    { 22  ;   ;Imported Unit Cost  ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Purchase Line Direct Unit Cost" <> "Imported Unit Cost") AND ("Imported Unit Cost" <> 0) THEN
                                                                  "Cost Discrepancy" := TRUE
                                                                ELSE
                                                                  "Cost Discrepancy" := FALSE;
                                                              END;

                                                   CaptionML=ENU=Imported Unit Cost;
                                                   DecimalPlaces=0:5;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Imported Unit Cost")) }
    { 23  ;   ;Cost Discrepancy    ;Boolean       ;CaptionML=ENU=Cost Discrepancy }
    { 30  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                CalcQtyBase;
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 31  ;   ;Qty. Per UOM        ;Decimal       ;CaptionML=ENU=Qty. Per UOM;
                                                   DecimalPlaces=0:5 }
    { 32  ;   ;Open PO Qty.        ;Decimal       ;OnValidate=BEGIN
                                                                CalcQtyBase;
                                                              END;

                                                   CaptionML=ENU=Open PO Qty.;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 33  ;   ;Open PO Qty. (Base) ;Decimal       ;CaptionML=ENU=Open PO Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 34  ;   ;Ship Qty.           ;Decimal       ;OnValidate=BEGIN
                                                                CalcQtyBase;
                                                              END;

                                                   CaptionML=ENU=Ship Qty.;
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Ship Qty. (Base)    ;Decimal       ;CaptionML=ENU=Ship Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 36  ;   ;Outstanding Qty.    ;Decimal       ;OnValidate=BEGIN
                                                                CalcQtyBase;
                                                              END;

                                                   CaptionML=ENU=Outstanding Qty.;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 37  ;   ;Outstanding Qty. (Base);Decimal    ;CaptionML=ENU=Outstanding Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 38  ;   ;Over Ship Qty.      ;Decimal       ;OnValidate=BEGIN
                                                                CalcQtyBase;
                                                              END;

                                                   CaptionML=ENU=Over Ship Qty.;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 39  ;   ;Over Ship Qty. (Base);Decimal      ;CaptionML=ENU=Over Ship Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 70  ;   ;Vendor Item No.     ;Text20        ;CaptionML=ENU=Vendor Item No.;
                                                   Editable=No }
    { 91  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code;
                                                   Editable=No }
    { 100 ;   ;Gross Weight        ;Decimal       ;CaptionML=ENU=Gross Weight;
                                                   DecimalPlaces=0:5 }
    { 101 ;   ;Net Weight          ;Decimal       ;CaptionML=ENU=Net Weight;
                                                   DecimalPlaces=0:5 }
    { 103 ;   ;Unit Volume         ;Decimal       ;CaptionML=ENU=Unit Volume;
                                                   DecimalPlaces=0:5 }
    { 70550;  ;Description         ;Text50        ;CaptionML=ENU=Description;
                                                   Editable=No }
    { 70551;  ;Description 2       ;Text50        ;CaptionML=ENU=Description 2;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;ASN No.,Line No.                        ;Clustered=Yes }
    {    ;On The Water Location,Purchase Order No.,Purchase Order Line No. }
    {    ;Grouping No.,Final Dest. Location        }
    {    ;ASN No.,Description 2                    }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      InboundASNHeader@1240020001 : Record 14099200;
      ASNPost@1000 : Codeunit 14099200;
      txtModifyError@1001 : TextConst 'ENU=Error:  ASN %1 must be in open or updated status to be modified.';
      txtInsertError@1002 : TextConst 'ENU=Error:  ASN %1 must be in open status to be modified.';
      txtGroupError@1240020000 : TextConst 'ENU=Error:  Group numbering cannot be used if %1 is active.';

    LOCAL PROCEDURE GetHeader@1240020005();
    BEGIN
      IF InboundASNHeader."ASN No." <> "ASN No." THEN
        InboundASNHeader.GET("ASN No.");
    END;

    PROCEDURE CalcQtyBase@1240020000();
    VAR
      ItemUOM@1000 : Record 5404;
    BEGIN
      ItemUOM.GET("Item No.","Unit of Measure Code");
      "Qty. Per UOM" := ItemUOM."Qty. per Unit of Measure";
      "Open PO Qty. (Base)" := "Open PO Qty." * "Qty. Per UOM";
      "Ship Qty. (Base)" := "Ship Qty." * "Qty. Per UOM";
      "Outstanding Qty." := "Open PO Qty." - "Ship Qty.";
      IF "Outstanding Qty." < 0 THEN BEGIN
        "Over Ship Qty." := - "Outstanding Qty.";
        "Outstanding Qty." := 0;
      END ELSE
        "Over Ship Qty." := 0;
      "Outstanding Qty. (Base)" := "Outstanding Qty." * "Qty. Per UOM";
      "Over Ship Qty. (Base)" := "Over Ship Qty." * "Qty. Per UOM";
    END;

    PROCEDURE ShowItem@1240020004();
    VAR
      Item@1001 : Record 27;
    BEGIN
      Item.RESET;
      Item.SETRANGE("No.","Item No.");
      PAGE.RUNMODAL(PAGE::"Item Card",Item);
      Item.RESET;
    END;

    PROCEDURE ShowPurchOrder@1240020001();
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      PurchaseHeader.RESET;
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::Order);
      PurchaseHeader.SETRANGE("No.","Purchase Order No.");
      PAGE.RUNMODAL(PAGE::"Purchase Order",PurchaseHeader);
      PurchaseHeader.RESET;
    END;

    PROCEDURE ShowPrevReceipts@1240020002();
    VAR
      PurchRcptHeader@1000 : Record 120;
    BEGIN
      PurchRcptHeader.RESET;
      PurchRcptHeader.SETCURRENTKEY("Order No.");
      PurchRcptHeader.SETRANGE("Order No.","Purchase Order No.");
      PAGE.RUNMODAL(PAGE::"Posted Purchase Receipt",PurchRcptHeader);
      PurchRcptHeader.RESET;
    END;

    PROCEDURE ShowOpenTransfers@1240020003();
    VAR
      TransferHeader@1000 : Record 5740;
    BEGIN
      TransferHeader.RESET;
      TransferHeader.SETRANGE("Inbound ASN Number", "ASN No.");
      PAGE.RUNMODAL(PAGE::"Transfer Order",TransferHeader);
    END;

    LOCAL PROCEDURE GetCaptionClass@34(FieldNumber@1000 : Integer) : Text[80];
    BEGIN
      EXIT('2,0,' + GetFieldCaption(FieldNumber));
    END;

    LOCAL PROCEDURE GetFieldCaption@31(FieldNumber@1000 : Integer) : Text[100];
    VAR
      Field@1001 : Record 2000000041;
    BEGIN
      Field.GET(DATABASE::"Inbound ASN Line",FieldNumber);
      EXIT(Field."Field Caption");
    END;

    PROCEDURE OpenItemTrackingLines@6500();
    VAR
      PurchLine@1240020000 : Record 39;
    BEGIN
      PurchLine.GET(PurchLine."Document Type"::Order,Rec."Purchase Order No.", Rec."Purchase Order Line No.");
      PurchLine.OpenItemTrackingLines;
    END;

    BEGIN
    END.
  }
}

