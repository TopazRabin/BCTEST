OBJECT Table 11123321 SC - Data Validation Line
{
  OBJECT-PROPERTIES
  {
    Date=07/01/20;
    Time=12:00:00 AM;
    Modified=Yes;
    Version List=SCW19.2.0;
  }
  PROPERTIES
  {
    OnInsert=VAR
               Validation@11123302 : Codeunit 11123310;
             BEGIN
               TestMandatoryFields;

               Validation.DefineRefreshCatOverviewReq("Table No.");
             END;

    OnModify=VAR
               Validation@11123302 : Codeunit 11123310;
             BEGIN
               Validation.DefineRefreshCatOverviewReq("Table No.");
             END;

    OnDelete=VAR
               Validation@11123302 : Codeunit 11123310;
             BEGIN
               Validation.DefineRefreshCatOverviewReq("Table No.");
             END;

    OnRename=VAR
               Validation@11123302 : Codeunit 11123310;
             BEGIN
               Validation.DefineRefreshCatOverviewReq("Table No.");
             END;

    CaptionML=ENU=Data Validation Line;
  }
  FIELDS
  {
    { 1   ;   ;Table No.           ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=FILTER(Table));
                                                   CaptionML=ENU=Table No.;
                                                   NotBlank=Yes }
    { 2   ;   ;Field No.           ;Integer       ;TableRelation=Field.No. WHERE (TableNo=FIELD(Table No.));
                                                   OnValidate=VAR
                                                                Field@11123302 : Record 2000000041;
                                                              BEGIN
                                                                Field.GET("Table No.","Field No.");
                                                                VALIDATE("Field Name",Field.FieldName);
                                                                VALIDATE("Field Caption",Field."Field Caption");
                                                                VALIDATE("Relation Table No.",Field.RelationTableNo);
                                                                VALIDATE("Relation Field No.",Field.RelationFieldNo);

                                                                CheckFieldNo("Table No.","Field No.");
                                                              END;

                                                   CaptionML=ENU=Field No. }
    { 3   ;   ;Field Name          ;Text30        ;OnValidate=VAR
                                                                Field@11123302 : Record 2000000041;
                                                                FieldNo@11123303 : Integer;
                                                              BEGIN
                                                                IF EVALUATE(FieldNo,"Field Name") THEN BEGIN
                                                                  Field.SETRANGE(TableNo,"Table No.");
                                                                  Field.SETRANGE("No.",FieldNo);
                                                                  Field.FINDFIRST;
                                                                  "Field No." := Field."No.";
                                                                  "Field Name" := Field.FieldName;
                                                                END ELSE BEGIN
                                                                  Field.SETRANGE(TableNo,"Table No.");
                                                                  Field.SETRANGE(FieldName,"Field Name");
                                                                  Field.FINDFIRST;
                                                                  "Field No." := Field."No.";
                                                                  "Field Name" := Field.FieldName;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Field Name }
    { 4   ;   ;Method              ;Option        ;OnValidate=BEGIN
                                                                IF Method <> xRec.Method THEN BEGIN
                                                                  TestMandatoryFields;
                                                                  IF (Method = Method::"Custom Function") OR
                                                                     (xRec.Method = Method::"Custom Function")
                                                                  THEN
                                                                    VALIDATE(Value,'');
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Method;
                                                   OptionCaptionML=ENU=" ,Equal,Not Equal,Greater,Greater or Equal,Less,Less or Equal,Custom Function";
                                                   OptionString=[ ,Equal,Not Equal,Greater,Greater or Equal,Less,Less or Equal,Custom Function] }
    { 5   ;   ;Value               ;Text250       ;OnValidate=BEGIN
                                                                TestMandatoryFields;
                                                                GetEmptyDefaultValue;
                                                                TestValue;
                                                              END;

                                                   OnLookup=VAR
                                                              Validation@11123303 : Codeunit 11123310;
                                                              ValueToUpdate@11123302 : Text[250];
                                                            BEGIN
                                                              ValueToUpdate := Value;
                                                              IF Validation.GetLookupName(Rec,ValueToUpdate) THEN
                                                                Value := ValueToUpdate;
                                                            END;

                                                   CaptionML=ENU=Value }
    { 6   ;   ;Error Text          ;Text250       ;OnValidate=BEGIN
                                                                TestMandatoryFields;
                                                              END;

                                                   CaptionML=ENU=Error Text }
    { 7   ;   ;Relation Table No.  ;Integer       ;CaptionML=ENU=Relation Table No. }
    { 8   ;   ;Relation Field No.  ;Integer       ;CaptionML=ENU=Relation Field No. }
    { 9   ;   ;Priority            ;Integer       ;CaptionML=ENU=Priority }
    { 10  ;   ;Field Caption       ;Text250       ;CaptionML=ENU=Field Caption;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Table No.,Field No.                     ;Clustered=Yes }
    {    ;Priority                                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text11123302@11123308 : TextConst 'ENU=Field %1 value ''%2'' does not exist.';
      Text11123303@11123310 : TextConst 'ENU=For Boolean type you can use only ''%1'', ''%2'', or ''%3'' %4.';
      Text11123304@11123309 : TextConst 'ENU=Field %1 already exists in data validation rule for table %2.';
      Text11123321@11123307 : TextConst 'ENU=<Empty>';
      Text11123322@11123306 : TextConst 'ENU=<0>';
      Text11123323@11123305 : TextConst 'ENU=<No>';
      Text11123325@11123303 : TextConst 'ENU=<0D>';
      Text11123326@11123302 : TextConst 'ENU=<0T>';

    PROCEDURE GetFieldNo@11123305();
    VAR
      FilterHelper@11123303 : Codeunit 11123321;
      FieldNo@11123302 : Integer;
    BEGIN
      FieldNo := FilterHelper.LookupField("Table No.","Field No.");
      IF FieldNo <> 0 THEN
        VALIDATE("Field No.",FieldNo);
    END;

    PROCEDURE GetNextSortNo@11123309() : Integer;
    VAR
      DataValidLine@11123302 : Record 11123321;
      NextSortNo@11123303 : Integer;
    BEGIN
      NextSortNo := 1;
      DataValidLine.RESET;
      DataValidLine.SETCURRENTKEY(Priority);
      DataValidLine.SETRANGE("Table No.","Table No.");
      IF DataValidLine.FINDLAST THEN
        NextSortNo := DataValidLine.Priority + NextSortNo;
      EXIT(NextSortNo);
    END;

    PROCEDURE TestMandatoryFields@11123302();
    VAR
      FieldRec@11123302 : Record 2000000041;
    BEGIN
      TESTFIELD("Field Name");
      TESTFIELD(Method);

      FieldRec.GET("Table No.","Field No.");
      IF FieldRec.Type IN [FieldRec.Type::Boolean,FieldRec.Type::DateFormula,FieldRec.Type::GUID] THEN
        IF NOT (Method IN [Method::Equal,Method::"Not Equal",Method::"Custom Function"]) THEN BEGIN
          ERROR(
            Text11123303,
            GetOptionStringByIndex(DATABASE::"SC - Data Validation Line",4,Method::"Not Equal"),
            GetOptionStringByIndex(DATABASE::"SC - Data Validation Line",4,Method::Equal),
            GetOptionStringByIndex(DATABASE::"SC - Data Validation Line",4,Method::"Custom Function"),
            LOWERCASE(FIELDCAPTION(Method)));
        END;
    END;

    LOCAL PROCEDURE CheckFieldNo@11123311(TableNo@11123303 : Integer;FieldNo@11123304 : Integer);
    VAR
      DataValidLine2@11123302 : Record 11123321;
      RecRef@11123305 : RecordRef;
    BEGIN
      DataValidLine2.SETRANGE("Table No.",TableNo);
      DataValidLine2.SETRANGE("Field No.",FieldNo);
      IF NOT DataValidLine2.ISEMPTY THEN BEGIN
        RecRef.OPEN(TableNo,TRUE);
        ERROR(Text11123304,"Field Caption",RecRef.CAPTION);
      END;
    END;

    PROCEDURE GetEmptyDefaultValidationValue@11123321() : Text[250];
    VAR
      FieldRec@11123304 : Record 2000000041;
      DefaultValidationValue@11123305 : Text[250];
    BEGIN
      IF ("Table No." = 0) OR ("Field No." = 0) THEN
        EXIT('');

      WITH FieldRec DO BEGIN
        GET("Table No.","Field No.");
        CASE Type OF
          Type::Code,Type::Text,Type::GUID,Type::DateFormula :
            DefaultValidationValue := Text11123321;
          Type::Integer,Type::Decimal,Type::Duration,Type::BigInteger :
            DefaultValidationValue := Text11123322;
          Type::Option :
            DefaultValidationValue := GetOptionStringByIndex("Table No.","Field No.",0);
          Type::Boolean :
            DefaultValidationValue := Text11123323;
          Type::Date,Type::DateTime :
            DefaultValidationValue := Text11123325;
          Type::Time :
            DefaultValidationValue := Text11123326;
        END;
      END;
      EXIT(DefaultValidationValue);
    END;

    PROCEDURE GetOptionsCount@11123323() : Integer;
    VAR
      RecRef@11123304 : RecordRef;
      FieldRef@11123305 : FieldRef;
      StartPos@11123306 : Integer;
      OptionCount@11123307 : Integer;
    BEGIN
      StartPos := 1;
      OptionCount := 0;

      RecRef.OPEN("Table No.",TRUE);
      FieldRef := RecRef.FIELD("Field No.");

      WHILE NOT (StartPos = STRLEN(FieldRef.OPTIONCAPTION) + 1) DO BEGIN
        IF COPYSTR(FieldRef.OPTIONCAPTION,StartPos,1) = ',' THEN
          OptionCount := OptionCount + 1;
        StartPos := StartPos + 1;
      END;

      EXIT(OptionCount);
    END;

    PROCEDURE GetOptionStringByIndex@11123322(TableNumber@11123302 : Integer;FieldNumber@11123303 : Integer;OptionIndex@11123304 : Integer) : Text[250];
    VAR
      RecRef@11123306 : RecordRef;
      FieldRef@11123305 : FieldRef;
    BEGIN
      RecRef.OPEN(TableNumber,TRUE);
      FieldRef := RecRef.FIELD(FieldNumber);
      EXIT(SELECTSTR(OptionIndex + 1,FORMAT(FieldRef.OPTIONCAPTION)));
    END;

    PROCEDURE GetCorrectStringValue@11123304() : Text[250];
    VAR
      NewValue@11123303 : Text[250];
    BEGIN
      NewValue := Value;
      IF NewValue = Text11123321 THEN
        NewValue := DELCHR(NewValue,'=',Text11123321)
      ELSE
        NewValue := DELCHR(NewValue,'<>','<>');
      EXIT(NewValue);
    END;

    PROCEDURE TestValue@11123307();
    VAR
      Validation@11123302 : Codeunit 11123310;
      RecRef@11123303 : RecordRef;
      FieldRef@11123304 : FieldRef;
      CorrectValue@11123305 : Text[250];
      ErrorMessage@11123306 : Text[250];
    BEGIN
      IF Method = Method::"Custom Function" THEN
        EXIT;

      CorrectValue := GetCorrectStringValue;

      RecRef.OPEN("Table No.",TRUE);
      FieldRef := RecRef.FIELD("Field No.");
      ErrorMessage := Validation.EvaluateValue(FieldRef,CorrectValue);
      IF ErrorMessage <> '' THEN
        ERROR(ErrorMessage);

      IF NOT Validation.ValidateTableRelation(FieldRef) THEN
        ERROR(Text11123302,FieldRef.CAPTION,CorrectValue);
    END;

    PROCEDURE GetEmptyDefaultValue@11123306();
    BEGIN
      IF (Value = '') AND (Method <> Method::"Custom Function") THEN
        Value := GetEmptyDefaultValidationValue;
    END;

    PROCEDURE ExecuteValidationTest@11123308(VAR RecRef@11123302 : RecordRef;VAR ErrorText@11123303 : Text[250]) : Boolean;
    VAR
      TempDataValidLine@11123306 : TEMPORARY Record 11123321;
      Validation@11123304 : Codeunit 11123310;
      TestSucceed@11123305 : Boolean;
    BEGIN
      Validation.SetGlobalRecordRefToTest(RecRef);
      TempDataValidLine.COPY(Rec);
      TempDataValidLine."Error Text" := '';
      Validation.RUN(TempDataValidLine);
      TestSucceed := Validation.GetTestSucceed;
      IF NOT TestSucceed THEN
        IF "Error Text" <> '' THEN
          ErrorText := "Error Text"
        ELSE
          ErrorText := TempDataValidLine."Error Text";
      EXIT(TestSucceed);
    END;

    BEGIN
    END.
  }
}

