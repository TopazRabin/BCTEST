OBJECT Table 14000842 Label Line
{
  OBJECT-PROPERTIES
  {
    Date=06/28/17;
    Time=12:00:00 PM;
    Version List=SE0.60.06;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "Zone Code" <> "Zone Code"::" " THEN BEGIN
                 IF Type = Type::Zone THEN BEGIN
                   LabelLine.RESET;
                   LabelLine.SETRANGE("Label Code","Label Code");
                   LabelLine.SETRANGE(Type,LabelLine.Type::Zone);
                   LabelLine.SETRANGE("Zone Code","Zone Code");
                   IF LabelLine.FIND('-') THEN
                     ERROR(Text001,"Zone Code");
                 END ELSE BEGIN
                   LabelLine.RESET;
                   LabelLine.SETRANGE("Label Code","Label Code");
                   LabelLine.SETRANGE(Type,LabelLine.Type::Zone);
                   LabelLine.SETRANGE("Zone Code","Zone Code");
                   IF NOT LabelLine.FIND('-') THEN
                     ERROR(Text002,"Zone Code");
                 END;
               END;

               UpdatePrinterString;
             END;

    OnModify=BEGIN
               UpdatePrinterString;
             END;

    OnDelete=BEGIN
               LabelElement.RESET;
               LabelElement.SETRANGE(Type,LabelElement.Type::Label);
               LabelElement.SETRANGE("Label Code","Label Code");
               LabelElement.SETRANGE("Line No.","Line No.");
               LabelElement.DELETEALL;
             END;

    CaptionML=ENU=Label Line;
  }
  FIELDS
  {
    { 1   ;   ;Label Code          ;Code10        ;TableRelation="Label Header";
                                                   CaptionML=ENU=Label Code }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 3   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  xType := Type;
                                                                  INIT;
                                                                  Type := xType;
                                                                END;

                                                                GetLabelHeader;

                                                                IF Type = Type::"RF-ID" THEN
                                                                  LabelHeader.TESTFIELD("Printer Type",LabelHeader."Printer Type"::Zebra);

                                                                IF LabelHeader."Printer Type" = LabelHeader."Printer Type"::"Text File" THEN
                                                                  IF NOT (Type IN [Type::" ",Type::Text]) THEN
                                                                    ERROR(Text017,LabelHeader.FIELDCAPTION("Printer Type"),LabelHeader."Printer Type");
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,Barcode,Text,Line,,,Zone,Bitmap,2D Barcode,RF-ID";
                                                   OptionString=[ ,Barcode,Text,Line,,,Zone,Bitmap,2D Barcode,RF-ID] }
    { 4   ;   ;Horizontal Position ;Integer       ;OnValidate=BEGIN
                                                                TESTFIELD("Zone Code","Zone Code"::" ");

                                                                "Horizontal Relative Position" := "Horizontal Position";
                                                              END;

                                                   CaptionML=ENU=Horizontal Position }
    { 5   ;   ;Vertical Position   ;Integer       ;OnValidate=BEGIN
                                                                TESTFIELD("Zone Code","Zone Code"::" ");

                                                                "Vertical Relative Position" := "Vertical Position";
                                                              END;

                                                   CaptionML=ENU=Vertical Position }
    { 6   ;   ;Rotation Degrees    ;Option        ;CaptionML=ENU=Rotation Degrees;
                                                   OptionCaptionML=ENU=0,90,180,270;
                                                   OptionString=0,90,180,270 }
    { 7   ;   ;Font                ;Option        ;InitValue=10 Point;
                                                   CaptionML=ENU=Font;
                                                   OptionCaptionML=ENU=" ,6 Point,7 Point,10 Point,12 Point,24 Point,Custom";
                                                   OptionString=[ ,6 Point,7 Point,10 Point,12 Point,24 Point,Custom] }
    { 8   ;   ;Horizontal Multiplier;Code1        ;InitValue=1;
                                                   CaptionML=ENU=Horizontal Multiplier;
                                                   CharAllowed=09 }
    { 9   ;   ;Vertical Multiplier ;Code1         ;InitValue=1;
                                                   CaptionML=ENU=Vertical Multiplier;
                                                   CharAllowed=09 }
    { 10  ;   ;Image               ;Option        ;InitValue=Normal;
                                                   CaptionML=ENU=Image;
                                                   OptionCaptionML=ENU=" ,Normal,Reverse";
                                                   OptionString=[ ,Normal,Reverse] }
    { 11  ;   ;Table No.           ;Integer       ;TableRelation="Label Mapping Table";
                                                   OnValidate=BEGIN
                                                                ERROR(Text003);
                                                              END;

                                                   OnLookup=BEGIN
                                                              ERROR(Text003);
                                                            END;

                                                   CaptionML=ENU=Table No. }
    { 12  ;   ;Table Name          ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Object.Name WHERE (Type=CONST(Table),
                                                                                         ID=FIELD(Table No.)));
                                                   OnLookup=BEGIN
                                                              ERROR(Text003);
                                                            END;

                                                   CaptionML=ENU=Table Name;
                                                   Editable=No }
    { 13  ;   ;Field No.           ;Integer       ;TableRelation=Field.No. WHERE (TableNo=FIELD(Table No.));
                                                   OnValidate=BEGIN
                                                                ERROR(Text003);
                                                              END;

                                                   OnLookup=BEGIN
                                                              ERROR(Text003);
                                                            END;

                                                   CaptionML=ENU=Field No. }
    { 14  ;   ;Field Name          ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Field.FieldName WHERE (TableNo=FIELD(Table No.),
                                                                                             No.=FIELD(Field No.)));
                                                   OnLookup=BEGIN
                                                              ERROR(Text003);
                                                            END;

                                                   CaptionML=ENU=Field Name;
                                                   Editable=No }
    { 15  ;   ;Line Length         ;Integer       ;CaptionML=ENU=Line Length }
    { 16  ;   ;Line Height         ;Integer       ;CaptionML=ENU=Line Height }
    { 17  ;   ;Barcode Type        ;Option        ;InitValue=Code 128 A B and C;
                                                   CaptionML=ENU=Barcode Type;
                                                   OptionCaptionML=ENU=" ,Code 39 Std,Code 39 with Mod 10,Code 93,Code 128 Serial Ship Container No.,Code 128 A B and C,Codebar,Interleaved 2 of 5,Interleaved 2 of 5 and Mod 10,Interleaved 2 of 5 and Text,Postnet 5 6 8 and 9 Digit,UPC A,UPC A 2 Dig Add On,UPC A 5 Dig Add On,UPC E,UPC E 2 Dig Add On,UPC E 5 Dig Add On,UPC Interleaved 2 of 5,Plessy with Mod 10,MSI-3 with Mod 10,UCC-EAN 128,EAN-13";
                                                   OptionString=[ ,Code 39 Std,Code 39 with Mod 10,Code 93,Code 128 Serial Ship Container No.,Code 128 A B and C,Codebar,Interleaved 2 of 5,Interleaved 2 of 5 and Mod 10,Interleaved 2 of 5 and Text,Postnet 5 6 8 and 9 Digit,UPC A,UPC A 2 Dig Add On,UPC A 5 Dig Add On,UPC E,UPC E 2 Dig Add On,UPC E 5 Dig Add On,UPC Interleaved 2 of 5,Plessy with Mod 10,MSI-3 with Mod 10,UCC-EAN 128,EAN-13] }
    { 18  ;   ;Narrow Barcode Width;Integer       ;CaptionML=ENU=Narrow Barcode Width }
    { 19  ;   ;Wide Barcode Width  ;Integer       ;CaptionML=ENU=Wide Barcode Width }
    { 20  ;   ;Barcode Height      ;Integer       ;CaptionML=ENU=Barcode Height }
    { 21  ;   ;Print Barcode Text  ;Boolean       ;CaptionML=ENU=Print Barcode Text }
    { 22  ;   ;Text                ;Text250       ;InitValue=%1;
                                                   CaptionML=ENU=Text }
    { 23  ;   ;Description         ;Text40        ;CaptionML=ENU=Description }
    { 24  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Shipping Comment Line" WHERE (Table ID=CONST(14000842),
                                                                                                    Code=FIELD(Label Code),
                                                                                                    Integer=FIELD(Line No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 25  ;   ;Use Formatted Text  ;Boolean       ;OnValidate=BEGIN
                                                                ERROR(Text003);
                                                              END;

                                                   CaptionML=ENU=Use Formatted Text }
    { 26  ;   ;Max Data Length     ;Integer       ;CaptionML=ENU=Max Data Length }
    { 27  ;   ;Min Data Length     ;Integer       ;CaptionML=ENU=Min Data Length }
    { 28  ;   ;Record No.          ;Integer       ;OnValidate=BEGIN
                                                                ERROR(Text003);
                                                              END;

                                                   OnLookup=BEGIN
                                                              ERROR(Text003);
                                                            END;

                                                   CaptionML=ENU=Record No.;
                                                   MinValue=0 }
    { 29  ;   ;Skip If All Elements Blank;Boolean ;CaptionML=ENU=Skip If All Elements Blank }
    { 30  ;   ;Elements Exists     ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Label Element" WHERE (Label Code=FIELD(Label Code),
                                                                                            Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Elements Exists;
                                                   Editable=No }
    { 31  ;   ;Horizontal Relative Position;Integer;
                                                   OnValidate=BEGIN
                                                                UpdateZoneReference;
                                                              END;

                                                   CaptionML=ENU=Horizontal Relative Position }
    { 32  ;   ;Vertical Relative Position;Integer ;OnValidate=BEGIN
                                                                UpdateZoneReference;
                                                              END;

                                                   CaptionML=ENU=Vertical Relative Position }
    { 33  ;   ;Zone Code           ;Option        ;OnValidate=BEGIN
                                                                IF (xRec."Zone Code" <> "Zone Code"::" ") AND (xRec."Zone Code" <> "Zone Code") AND
                                                                   (Type = Type::Zone)
                                                                THEN BEGIN
                                                                  LabelLine.RESET;
                                                                  LabelLine.SETRANGE("Label Code","Label Code");
                                                                  LabelLine.SETFILTER(Type,'<>%1',LabelLine.Type::Zone);
                                                                  LabelLine.SETRANGE("Zone Code",xRec."Zone Code");
                                                                  IF LabelLine.FIND('-') THEN
                                                                    ERROR(Text004,xRec."Zone Code");
                                                                END;

                                                                UpdateZoneReference;
                                                              END;

                                                   CaptionML=ENU=Zone Code;
                                                   OptionCaptionML=ENU=" ,0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,I,H,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z";
                                                   OptionString=[ ,0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,I,H,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z] }
    { 34  ;   ;Virtual Field       ;Option        ;OnValidate=BEGIN
                                                                ERROR(Text003);
                                                              END;

                                                   CaptionML=ENU=Virtual Field;
                                                   OptionCaptionML=ENU=" ,,,WorkDate,Today,Time,,,,,,Test";
                                                   OptionString=[ ,,,WorkDate,Today,Time,,,,,,Test] }
    { 35  ;   ;Line Thickness      ;Integer       ;OnValidate=BEGIN
                                                                ERROR(Text003);
                                                              END;

                                                   CaptionML=ENU=Line Thickness }
    { 36  ;   ;Barcode Ratio       ;Decimal       ;OnValidate=BEGIN
                                                                ERROR(Text003);
                                                              END;

                                                   CaptionML=ENU=Barcode Ratio }
    { 37  ;   ;Bitmap              ;BLOB          ;CaptionML=ENU=Bitmap }
    { 38  ;   ;Bitmap Name         ;Text250       ;CaptionML=ENU=Bitmap Name;
                                                   Editable=No }
    { 39  ;   ;Bitmap Width        ;Integer       ;CaptionML=ENU=Bitmap Width;
                                                   Editable=No }
    { 40  ;   ;Bitmap Height       ;Integer       ;CaptionML=ENU=Bitmap Height;
                                                   Editable=No }
    { 41  ;   ;Raster Start Position;Integer      ;CaptionML=ENU=Raster Start Position;
                                                   Editable=No }
    { 42  ;   ;Custom Font         ;Text30        ;OnValidate=BEGIN
                                                                IF "Custom Font" <> '' THEN BEGIN
                                                                  TESTFIELD(Font,Font::Custom);

                                                                  GetLabelHeader;
                                                                  CASE LabelHeader."Printer Type" OF
                                                                    LabelHeader."Printer Type"::"Eltron Orion":
                                                                      BEGIN
                                                                        IF STRLEN("Custom Font") > 1 THEN
                                                                          ERROR(Text005);
                                                                        "Custom Font" := LOWERCASE("Custom Font");
                                                                        IF STRPOS('123456789abcdefghijklmnopqrstuvwxyz',"Custom Font") = 0 THEN
                                                                          ERROR(Text006);
                                                                      END;
                                                                    LabelHeader."Printer Type"::Zebra:
                                                                      ;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Custom Font }
    { 43  ;   ;2D Barcode Command  ;Text100       ;CaptionML=ENU=2D Barcode Command }
    { 44  ;   ;Extended Data Code  ;Code10        ;TableRelation="Extended Data Header";
                                                   OnValidate=BEGIN
                                                                IF "Extended Data Code" <> '' THEN BEGIN
                                                                  GetLabelHeader;
                                                                  ExtendedDataHeader.GET("Extended Data Code");
                                                                  ExtendedDataHeader.TESTFIELD("Label Usage",LabelHeader."Label Usage");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              GetLabelHeader;
                                                              ExtendedDataHeader.RESET;
                                                              ExtendedDataHeader.SETRANGE("Label Usage",LabelHeader."Label Usage");
                                                              IF ExtendedDataHeader.GET("Extended Data Code") THEN
                                                                ;
                                                              IF PAGE.RUNMODAL(0,ExtendedDataHeader) = ACTION::LookupOK THEN
                                                                VALIDATE("Extended Data Code",ExtendedDataHeader.Code);
                                                            END;

                                                   CaptionML=ENU=Extended Data Code }
    { 45  ;   ;Substitution Separator Char;Code1  ;CaptionML=ENU=Substitution Separator Char }
    { 100 ;   ;Properties          ;Boolean       ;OnValidate=BEGIN
                                                                Properties := FALSE;
                                                              END;

                                                   CaptionML=ENU=Properties }
    { 101 ;   ;Printer String      ;Text200       ;CaptionML=ENU=Printer String;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Label Code,Line No.                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      LabelHeader@1000000000 : Record 14000841;
      LabelLine@1000000001 : Record 14000842;
      LabelElement@1000000004 : Record 14000844;
      ExtendedDataHeader@1240030000 : Record 14000961;
      xType@1000000005 : Integer;
      Text001@1001 : TextConst 'ENU=Zone %1 already used.';
      Text002@1002 : TextConst 'ENU=Zone %1 not found.';
      Text003@1003 : TextConst 'ENU=Old Information.';
      Text004@1004 : TextConst 'ENU=Lines exist with Zone %1.';
      Text005@1005 : TextConst 'ENU=Must be 1 character.';
      Text006@1006 : TextConst 'ENU=Must be digit or letter.';
      Text007@1007 : TextConst 'ENU=Codabar Barcodes are not supported by Zebra';
      Text008@1008 : TextConst 'ENU=UPC Interleaved 2 of 5 Barcodes are not supported by Zebra';
      Text009@1009 : TextConst 'ENU=Zone %1 already exists.';
      Text010@1010 : TextConst 'ENU=Not a proper Monocrome Bitmap File.';
      Text011@1011 : TextConst 'ENU=Bitmap cannot be larger than 1200 x 800 (960 kb.)';
      Text012@1012 : TextConst 'ENU=Not a proper BMP-File.';
      Text013@1013 : TextConst 'ENU=Width of BMP-file must be multiplum of 8.';
      Text014@1014 : TextConst 'ENU=Must be a Monocrome BMP-file.';
      Text015@1015 : TextConst 'ENU=Compression is not allowed in BMP-file.';
      Text016@1240030001 : TextConst 'ENU=%1 not available for this printer.';
      Text017@1240030002 : TextConst 'ENU=Only Text is allowed for %1 %2.';
      Text018@1240020000 : TextConst 'ENU=Exported to %1';
      Text019@1240020001 : TextConst 'ENU=Error creating %1 on server.';

    PROCEDURE LineProperties@1();
    BEGIN
      PAGE.RUNMODAL(PAGE::"Label Line Properties",Rec);
    END;

    PROCEDURE UpdatePrinterString@6();
    BEGIN
      GetLabelHeader;

      CASE LabelHeader."Printer Type" OF
        LabelHeader."Printer Type"::"Eltron Orion":
          CreateEltronOrionPrinterString;
        LabelHeader."Printer Type"::Zebra:
          CreateZebraPrinterString;
        LabelHeader."Printer Type"::"Text File":
          CreateTextFilePrinterString;
      END;
    END;

    PROCEDURE CreateEltronOrionPrinterString@2();
    VAR
      Option@1000000000 : Integer;
      HorMult@1240030000 : Integer;
      VertMult@1240030001 : Integer;
    BEGIN
      CASE Type OF
        Type::Barcode:
          BEGIN
            "Printer String" :=
              'B' + FORMAT("Horizontal Position") + ',' +
              FORMAT("Vertical Position") + ',';
            Option := "Rotation Degrees";
            "Printer String" :=
              "Printer String" + FORMAT(Option) + ',';
            CASE "Barcode Type" OF
              "Barcode Type"::"Code 39 Std":
                "Printer String" := "Printer String" + '3,';
              "Barcode Type"::"Code 39 with Mod 10":
                "Printer String" := "Printer String" + '3C,';
              "Barcode Type"::"Code 93":
                "Printer String" := "Printer String" + '9,';
              "Barcode Type"::"Code 128 Serial Ship Container No.":
                "Printer String" := "Printer String" + '0,';
              "Barcode Type"::"Code 128 A B and C":
                "Printer String" := "Printer String" + '1,';
              "Barcode Type"::Codebar:
                "Printer String" := "Printer String" + 'K,';
              "Barcode Type"::"Interleaved 2 of 5":
                "Printer String" := "Printer String" + '2,';
              "Barcode Type"::"Interleaved 2 of 5 and Mod 10":
                "Printer String" := "Printer String" + '2C,';
              "Barcode Type"::"Interleaved 2 of 5 and Text":
                "Printer String" := "Printer String" + '2D,';
              "Barcode Type"::"Postnet 5 6 8 and 9 Digit":
                "Printer String" := "Printer String" + 'P,';
              "Barcode Type"::"UPC A":
                "Printer String" := "Printer String" + 'UA0,';
              "Barcode Type"::"UPC A 2 Dig Add On":
                "Printer String" := "Printer String" + 'UA2.';
              "Barcode Type"::"UPC A 5 Dig Add On":
                "Printer String" := "Printer String" + 'UA5,';
              "Barcode Type"::"UPC E":
                "Printer String" := "Printer String" + 'UE0,';
              "Barcode Type"::"UPC E 2 Dig Add On":
                "Printer String" := "Printer String" + 'UE2,';
              "Barcode Type"::"UPC E 5 Dig Add On":
                "Printer String" := "Printer String" + 'UE5,';
              "Barcode Type"::"UPC Interleaved 2 of 5":
                "Printer String" := "Printer String" + '2U,';
              "Barcode Type"::"Plessy with Mod 10":
                "Printer String" := "Printer String" + 'L,';
              "Barcode Type"::"MSI-3 with Mod 10":
                "Printer String" := "Printer String" + 'M,';
              "Barcode Type"::"UCC-EAN 128":
                "Printer String" := "Printer String" + '1E,';
              "Barcode Type"::"EAN-13":
                "Printer String" := "Printer String" + 'E30,';
            END;
            "Printer String" :=
              "Printer String" + FORMAT("Narrow Barcode Width") + ',' +
              FORMAT("Wide Barcode Width") + ',' +
              FORMAT("Barcode Height") + ',';
            IF "Print Barcode Text" THEN
              "Printer String" := "Printer String" + 'B,'
            ELSE
              "Printer String" := "Printer String" + 'N,';
            "Printer String" := "Printer String" + '"%1"';
          END;
        Type::Line:
          BEGIN
            "Printer String" :=
              'LO' + FORMAT("Horizontal Position") + ',' +
              FORMAT("Vertical Position") + ',' +
              FORMAT("Line Length") + ',' +
              FORMAT("Line Height");
          END;
        Type::Text:
          BEGIN
            "Printer String" :=
              'A' + FORMAT("Horizontal Position") + ',' +
              FORMAT("Vertical Position") + ',';
            Option := "Rotation Degrees";
            "Printer String" :=
              "Printer String" + FORMAT(Option) + ',';
            IF Font = Font::Custom THEN
              "Printer String" := "Printer String" + "Custom Font" + ','
            ELSE BEGIN
              Option := Font;
              "Printer String" :=
                "Printer String" + FORMAT(Option) + ',';
            END;
            "Printer String" :=
              "Printer String" + FORMAT("Horizontal Multiplier") + ',' +
              FORMAT("Vertical Multiplier") + ',' +
              COPYSTR(FORMAT(Image),1,1) + ',';
            "Printer String" := "Printer String" + '"%1"';
          END;
        Type::Bitmap:
          BEGIN
            EVALUATE(HorMult,"Horizontal Multiplier");
            EVALUATE(VertMult,"Vertical Multiplier");
            "Printer String" :=
              STRSUBSTNO(
                'GW%1,%2,%3,%4,',
                DELCHR(FORMAT("Horizontal Position"),'=',',.'),
                DELCHR(FORMAT("Vertical Position"),'=',',.'),
                DELCHR(FORMAT(HorMult * ("Bitmap Width" DIV 8)),'=',',.'),
                DELCHR(FORMAT(VertMult * "Bitmap Height"),'=',',.'));
          END;
        Type::"2D Barcode":
          BEGIN
            "Printer String" :=
              'b' + FORMAT("Horizontal Position") + ',' + FORMAT("Vertical Position") + ',';
            "Printer String" := "Printer String" + "2D Barcode Command" + ',"%1"';
          END;
        Type::"RF-ID":
          ERROR(Text016,Type);
      END;
    END;

    PROCEDURE CreateZebraPrinterString@4();
    VAR
      Orientation@1000000000 : Text[30];
      Base@1000000001 : Integer;
      HorizMultiplier@1000000002 : Integer;
      VertMultiplier@1000000003 : Integer;
      BarcodeRatio@1000000004 : Decimal;
      LineThickness@1000000005 : Integer;
    BEGIN
      CASE "Rotation Degrees" OF
        "Rotation Degrees"::"0":
          Orientation := 'N';
        "Rotation Degrees"::"90":
          Orientation := 'R';
        "Rotation Degrees"::"180":
          Orientation := 'I';
        "Rotation Degrees"::"270":
          Orientation := 'B';
      END;

      IF "Line Length" < "Line Height" THEN
        LineThickness := "Line Length"
      ELSE
        LineThickness := "Line Height";

      CASE Type OF
        Type::Barcode:
          BEGIN
            IF "Narrow Barcode Width" <> 0 THEN
              BarcodeRatio := ROUND("Wide Barcode Width" / "Narrow Barcode Width",0.1);
            "Printer String" :=
              '^FO' + FORMAT("Horizontal Position") + ',' + FORMAT("Vertical Position");
            "Printer String" :=
              "Printer String" + '^BY' + FORMAT("Narrow Barcode Width") + ',' +
              FORMAT(BarcodeRatio) + ',' +
              FORMAT("Barcode Height");

            CASE "Barcode Type" OF
              "Barcode Type"::"Code 39 Std":
                BEGIN
                  "Printer String" :=
                    "Printer String" + '^B3' + Orientation + ',N,' + FORMAT("Barcode Height") + ',';
                  IF "Print Barcode Text" THEN
                    "Printer String" := "Printer String" + 'Y,N'
                  ELSE
                    "Printer String" := "Printer String" + 'N,N';
                END;
              "Barcode Type"::"Code 39 with Mod 10":
                BEGIN
                  "Printer String" :=
                    "Printer String" + '^B3' + Orientation + ',Y,' + FORMAT("Barcode Height") + ',';
                  IF "Print Barcode Text" THEN
                    "Printer String" := "Printer String" + 'Y,N'
                  ELSE
                    "Printer String" := "Printer String" + 'N,N';
                END;
              "Barcode Type"::"Code 93":
                BEGIN
                  "Printer String" :=
                    "Printer String" + '^BA' + Orientation + ',' + FORMAT("Barcode Height") + ',';
                  IF "Print Barcode Text" THEN
                    "Printer String" := "Printer String" + 'Y,N,N'
                  ELSE
                    "Printer String" := "Printer String" + 'N,N,N';
                END;
              "Barcode Type"::"Code 128 Serial Ship Container No.":
                BEGIN
                  "Printer String" :=
                    "Printer String" + '^BC' + Orientation + ',' + FORMAT("Barcode Height") + ',';
                  IF "Print Barcode Text" THEN
                    "Printer String" := "Printer String" + 'Y,N,N'
                  ELSE
                    "Printer String" := "Printer String" + 'N,N,N';
                END;
              "Barcode Type"::"Code 128 A B and C":
                BEGIN
                  "Printer String" :=
                    "Printer String" + '^BC' + Orientation + ',' + FORMAT("Barcode Height") + ',';
                  IF "Print Barcode Text" THEN
                    "Printer String" := "Printer String" + 'Y,N,N'
                  ELSE
                    "Printer String" := "Printer String" + 'N,N,N';
                END;
              "Barcode Type"::"UCC-EAN 128":
                BEGIN
                  "Printer String" :=
                    "Printer String" + '^BC' + Orientation + ',' + FORMAT("Barcode Height") + ',';
                  IF "Print Barcode Text" THEN
                    "Printer String" := "Printer String" + 'Y,N,N,U'
                  ELSE
                    "Printer String" := "Printer String" + 'N,N,N,U';
                END;
              "Barcode Type"::Codebar:
                ERROR(Text007);
              "Barcode Type"::"Interleaved 2 of 5":
                BEGIN
                  "Printer String" :=
                    "Printer String" + '^B2' + Orientation + ',' + FORMAT("Barcode Height") + ',';
                  IF "Print Barcode Text" THEN
                    "Printer String" := "Printer String" + 'Y,N,N'
                  ELSE
                    "Printer String" := "Printer String" + 'N,N,N';
                END;
              "Barcode Type"::"Interleaved 2 of 5 and Mod 10":
                BEGIN
                  "Printer String" :=
                    "Printer String" + '^B2' + Orientation + ',' + FORMAT("Barcode Height") + ',';
                  IF "Print Barcode Text" THEN
                    "Printer String" := "Printer String" + 'Y,N,Y'
                  ELSE
                    "Printer String" := "Printer String" + 'N,N,Y';
                END;
              "Barcode Type"::"Interleaved 2 of 5 and Text":
                "Printer String" :=
                  "Printer String" + '^B2' + Orientation + ',' + FORMAT("Barcode Height") + ',' +
                  'Y,N,N';
              "Barcode Type"::"Postnet 5 6 8 and 9 Digit":
                BEGIN
                  "Printer String" :=
                    "Printer String" + '^BZ' + Orientation + ',' + FORMAT("Barcode Height") + ',';
                  IF "Print Barcode Text" THEN
                    "Printer String" := "Printer String" + 'Y,N'
                  ELSE
                    "Printer String" := "Printer String" + 'N,N';
                END;
              "Barcode Type"::"UPC A":
                BEGIN
                  "Printer String" :=
                    "Printer String" + '^BU' + Orientation + ',' + FORMAT("Barcode Height") + ',';
                  IF "Print Barcode Text" THEN
                    "Printer String" := "Printer String" + 'Y,N,Y'
                  ELSE
                    "Printer String" := "Printer String" + 'N,N,Y';
                END;
              "Barcode Type"::"UPC A 2 Dig Add On","Barcode Type"::"UPC A 5 Dig Add On":
                BEGIN
                  "Printer String" :=
                    "Printer String" + '^BS' + Orientation + ',' + FORMAT("Barcode Height") + ',';
                  IF "Print Barcode Text" THEN
                    "Printer String" := "Printer String" + 'Y,N'
                  ELSE
                    "Printer String" := "Printer String" + 'N,N';
                END;
              "Barcode Type"::"UPC E":
                BEGIN
                  "Printer String" :=
                    "Printer String" + '^B9' + Orientation + ',' + FORMAT("Barcode Height") + ',';
                  IF "Print Barcode Text" THEN
                    "Printer String" := "Printer String" + 'Y,N,Y'
                  ELSE
                    "Printer String" := "Printer String" + 'N,N,Y';
                END;
              "Barcode Type"::"UPC E 2 Dig Add On","Barcode Type"::"UPC E 5 Dig Add On":
                BEGIN
                  "Printer String" :=
                    "Printer String" + '^BS' + Orientation + ',' + FORMAT("Barcode Height") + ',';
                  IF "Print Barcode Text" THEN
                    "Printer String" := "Printer String" + 'Y,N'
                  ELSE
                    "Printer String" := "Printer String" + 'N,N';
                END;
              "Barcode Type"::"UPC Interleaved 2 of 5":
                ERROR(Text008);
              "Barcode Type"::"Plessy with Mod 10":
                BEGIN
                  "Printer String" :=
                    "Printer String" + '^BP' + Orientation + ',Y,' + FORMAT("Barcode Height") + ',';
                  IF "Print Barcode Text" THEN
                    "Printer String" := "Printer String" + 'Y,N'
                  ELSE
                    "Printer String" := "Printer String" + 'N,N';
                END;
              "Barcode Type"::"MSI-3 with Mod 10":
                BEGIN
                  "Printer String" :=
                    "Printer String" + '^BM' + Orientation + ',B,' + FORMAT("Barcode Height") + ',';
                  IF "Print Barcode Text" THEN
                    "Printer String" := "Printer String" + 'Y,N,N'
                  ELSE
                    "Printer String" := "Printer String" + 'N,N,N';
                END;
              "Barcode Type"::"EAN-13":
                BEGIN
                  "Printer String" :=
                    "Printer String" + '^BE' + Orientation + ',' + FORMAT("Barcode Height") + ',';
                  IF "Print Barcode Text" THEN
                    "Printer String" := "Printer String" + 'Y,N,'
                  ELSE
                    "Printer String" := "Printer String" + ',N,N';
                END;
            END;
            "Printer String" := "Printer String" + '^FD%1^FS';
          END;
        Type::Line:
          "Printer String" :=
            '^FO' + FORMAT("Horizontal Position") + ',' + FORMAT("Vertical Position") +
            '^GB' + FORMAT("Line Length") + ',' + FORMAT("Line Height") + ',' +
            FORMAT(LineThickness) + '^FS';
        Type::Text:
          BEGIN
            "Printer String" :=
              '^FO' + FORMAT("Horizontal Position") + ',' + FORMAT("Vertical Position");
            "Printer String" := "Printer String" +'^FW' + Orientation;
            IF Font = Font::Custom THEN
              "Printer String" :=
                "Printer String" + '^A' + "Custom Font" + ',' + Orientation + ','
            ELSE
              "Printer String" :=
                "Printer String" + '^A0,' + Orientation + ',';
            CASE Font OF
              Font::"6 Point":
                Base := 17;
              Font::"7 Point":
                Base := 20;
              Font::"10 Point":
                Base := 29;
              Font::"12 Point":
                Base := 34;
              Font::"24 Point":
                Base := 68;
              Font::Custom:
                Base := 17;
            END;
            EVALUATE(HorizMultiplier,"Horizontal Multiplier");
            EVALUATE(VertMultiplier,"Vertical Multiplier");
            IF HorizMultiplier < 1 THEN
              HorizMultiplier := 1;
            IF VertMultiplier < 1 THEN
              VertMultiplier := 1;
            "Printer String" :=
              "Printer String" + FORMAT(Base * VertMultiplier) + ',' +
              FORMAT(Base * HorizMultiplier);
            IF Image = Image::Reverse THEN
              "Printer String" := "Printer String" + '^FR';
            "Printer String" := "Printer String" + '^FD%1^FS';
          END;
        Type::Bitmap:
          BEGIN
            EVALUATE(HorizMultiplier,"Horizontal Multiplier");
            EVALUATE(VertMultiplier,"Vertical Multiplier");
            "Printer String" :=
              STRSUBSTNO(
                '^FO%1,%2^GFB,%3,%3,%4,',
                DELCHR(FORMAT("Horizontal Position"),'=',',.'),
                DELCHR(FORMAT("Vertical Position"),'=',',.'),
                DELCHR(
                  FORMAT((HorizMultiplier * ("Bitmap Width" DIV 8)) * VertMultiplier * "Bitmap Height"),
                  '=',',.'),
                DELCHR(FORMAT(HorizMultiplier * ("Bitmap Width" DIV 8)),'=',',.'));
          END;
        Type::"2D Barcode":
          BEGIN
            "Printer String" :=
              '^FO' + FORMAT("Horizontal Position") + ',' + FORMAT("Vertical Position");
            "Printer String" := "Printer String" + "2D Barcode Command" + '^FD%1^FS';
          END;
        Type::"RF-ID":
          BEGIN
            "Printer String" := '^RFW,H^FD%1^FS';
          END;
      END;
    END;

    PROCEDURE CreateTextFilePrinterString@1240030000();
    BEGIN
      "Printer String" := '%1';
    END;

    PROCEDURE GetLabelHeader@3();
    BEGIN
      IF LabelHeader.Code <> "Label Code" THEN
        LabelHeader.GET("Label Code");
    END;

    PROCEDURE UpdateZoneReference@5();
    BEGIN
      IF "Zone Code" <> "Zone Code"::" " THEN BEGIN
        IF Type = Type::Zone THEN BEGIN
          LabelLine.RESET;
          LabelLine.SETRANGE("Label Code","Label Code");
          LabelLine.SETRANGE(Type,LabelLine.Type::Zone);
          LabelLine.SETRANGE("Zone Code","Zone Code");
          IF LabelLine.FIND('-') THEN
            IF (LabelLine."Line No." <> "Line No.") OR (LabelLine.NEXT <> 0) THEN
              ERROR(Text009,"Zone Code");

          LabelLine.SETFILTER(Type,'<>%1',LabelLine.Type::Zone);
          IF LabelLine.FIND('-') THEN
            REPEAT
              LabelLine."Horizontal Position" :=
                "Horizontal Relative Position" + LabelLine."Horizontal Relative Position";
              LabelLine."Vertical Position" :=
                "Vertical Relative Position" + LabelLine."Vertical Relative Position";
              LabelLine.UpdatePrinterString;
              LabelLine.MODIFY;
            UNTIL LabelLine.NEXT = 0;
        END ELSE BEGIN
          LabelLine.RESET;
          LabelLine.SETRANGE("Label Code","Label Code");
          LabelLine.SETRANGE(Type,LabelLine.Type::Zone);
          LabelLine.SETRANGE("Zone Code","Zone Code");
          IF NOT LabelLine.FIND('-') THEN
            ERROR(Text002,"Zone Code");

          "Horizontal Position" :=
            "Horizontal Relative Position" + LabelLine."Horizontal Relative Position";
          "Vertical Position" :=
            "Vertical Relative Position" + LabelLine."Vertical Relative Position";
          UpdatePrinterString;
        END;
      END ELSE BEGIN
        "Horizontal Position" := "Horizontal Relative Position";
        "Vertical Position" := "Vertical Relative Position";
      END;
    END;

    PROCEDURE TableInformation@7() : Text[250];
    VAR
      ElementValue@1000000000 : ARRAY [10] OF Text[100];
    BEGIN
      IF (Type <> Type::Text) AND (Type <> Type::Barcode) AND (Type <> Type::"2D Barcode") THEN
        EXIT('');

      CLEAR(ElementValue);

      LabelElement.RESET;
      LabelElement.SETRANGE(Type,LabelElement.Type::Label);
      LabelElement.SETRANGE("Label Code","Label Code");
      LabelElement.SETRANGE("Line No.","Line No.");
      IF LabelElement.FIND('-') THEN
        REPEAT
          CASE TRUE OF
            LabelElement."Virtual Field" <> LabelElement."Virtual Field"::" ":
              ElementValue[LabelElement."Element No."] :=
                STRSUBSTNO(
                  '%1 "%2"',
                  LabelElement.FIELDNAME("Virtual Field"),
                  FORMAT(LabelElement."Virtual Field"));
            LabelElement."Field ID" <> 0:
              BEGIN
                LabelElement.CALCFIELDS("Table Name","Field Name");
                ElementValue[LabelElement."Element No."] :=
                  STRSUBSTNO(
                    '"%1"."%2" (%3)',
                    LabelElement."Table Name",LabelElement."Field Name",LabelElement."Record No.");
              END;
          END;
        UNTIL LabelElement.NEXT = 0;

      EXIT(
        COPYSTR(
          STRSUBSTNO(
            Text,
            ElementValue[1],ElementValue[2],ElementValue[3],ElementValue[4],ElementValue[5],
            ElementValue[6],ElementValue[7],ElementValue[8],ElementValue[9],ElementValue[10]),1,250));
    END;

    PROCEDURE ShowLabelElementsForm@9();
    VAR
      LabelElements@1000000000 : Page 14000847;
    BEGIN
      LabelElement.RESET;
      LabelElement.SETRANGE(Type,LabelElement.Type::Label);
      LabelElement.SETRANGE("Label Code","Label Code");
      LabelElement.SETRANGE("Line No.","Line No.");
      CLEAR(LabelElements);
      LabelElements.SETTABLEVIEW(LabelElement);
      LabelElements.RUNMODAL;
    END;

    PROCEDURE ConvertFromOldFormat@8(RemoveOldData@1000000000 : Boolean);
    BEGIN
      CASE Type OF
        Type::" ":
          ;
        Type::Barcode,Type::Text:
          CASE TRUE OF
            "Use Formatted Text":
              BEGIN
                LabelLine.RESET;
                LabelLine.SETRANGE("Label Code","Label Code");
                LabelLine.SETRANGE("Line No.",0,"Line No." - 1);
                LabelLine := Rec;
                REPEAT
                UNTIL
                  (LabelLine.NEXT(-1) = 0) OR
                  ((LabelLine.Type <> LabelLine.Type::"4") AND
                   (LabelLine.Type <> LabelLine.Type::"5"));

                IF (LabelLine.Type <> LabelLine.Type::"4") AND
                   (LabelLine.Type <> LabelLine.Type::"5")
                THEN
                  LabelLine.NEXT;

                LabelElement.INIT;
                LabelElement.Type := LabelElement.Type::Label;
                LabelElement."Label Code" := "Label Code";
                LabelElement."Line No." := "Line No.";
                LabelElement."Element No." := 0;
                REPEAT
                  IF LabelLine.Type = LabelLine.Type::"4" THEN BEGIN
                    LabelElement.INIT;
                    LabelElement.VALIDATE("Element No.",LabelElement."Element No." + 1);
                    IF LabelLine."Virtual Field" <> LabelLine."Virtual Field"::" " THEN BEGIN
                      LabelElement.VALIDATE("Virtual Field",LabelLine."Virtual Field");
                    END ELSE BEGIN
                      LabelElement.VALIDATE("Table ID",LabelLine."Table No.");
                      LabelElement.VALIDATE("Record No.",LabelLine."Record No.");
                      LabelElement.VALIDATE("Field ID",LabelLine."Field No.");
                    END;
                    LabelElement.INSERT;
                  END ELSE
                    Text := LabelLine.Text;

                  IF RemoveOldData THEN
                    LabelLine.DELETE;
                UNTIL LabelLine.NEXT = 0;
              END;
            "Virtual Field" <> "Virtual Field"::" ":
              BEGIN
                LabelElement.INIT;
                LabelElement.Type := LabelElement.Type::Label;
                LabelElement."Label Code" := "Label Code";
                LabelElement."Line No." := "Line No.";
                LabelElement."Element No." := 1;
                LabelElement.VALIDATE("Virtual Field","Virtual Field");
                LabelElement.INSERT;

                Text := '%1';
              END;
            "Field No." <> 0:
              BEGIN
                LabelElement.INIT;
                LabelElement.Type := LabelElement.Type::Label;
                LabelElement."Label Code" := "Label Code";
                LabelElement."Line No." := "Line No.";
                LabelElement."Element No." := 1;
                LabelElement.VALIDATE("Table ID","Table No.");
                LabelElement.VALIDATE("Record No.","Record No.");
                LabelElement.VALIDATE("Field ID","Field No.");
                LabelElement.INSERT;

                Text := '%1';
              END;
          END;
        Type::Line:
          ;
        Type::Bitmap:
          ;
        Type::Zone:
          ;
      END;

      IF RemoveOldData AND (Type <> Type::"4") AND (Type <> Type::"5") THEN BEGIN
        "Table No." := 0;
        "Field No." := 0;
        "Use Formatted Text" := FALSE;
        "Record No." := 0;
        "Virtual Field" := 0;
        "Line Thickness" := 0;
        "Barcode Ratio" := 0;
      END;
    END;

    PROCEDURE ImportBitmap@10();
    VAR
      PackingStation@1240020003 : Record 14000709;
      BitmapFile@1240030000 : File;
      FileSystemObject@1240020004 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject";
      ReadChar@1240030001 : Char;
      TempText@1240030002 : Text[30];
      TempFile@1240020000 : Text[250];
      BitmapFilename@1240020005 : Text[250];
      TempInteger@1240030003 : Integer;
      IStream@1240020002 : InStream;
      OStream@1240020001 : OutStream;
      Streamreader@1240020007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader";
      Encoding@1240020008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
    BEGIN
      PackingStation.GetPackingStation();

      IF ISCLEAR(FileSystemObject) THEN
        CREATE(FileSystemObject,FALSE,ISSERVICETIER);

      IF ISSERVICETIER THEN BEGIN
        BitmapFilename := FileSystemObject.GetParentFolderName(PackingStation."Label Buffer File");
        IF UPLOADINTOSTREAM('Import','','All Files (*.*)|*.*',TempFile,IStream) THEN BEGIN
          Bitmap.CREATEOUTSTREAM(OStream);
          COPYSTREAM(OStream,IStream);
          "Bitmap Name" := FileSystemObject.GetFileName(TempFile);
          MODIFY(TRUE);
          Bitmap.CREATEINSTREAM(IStream);
          IF BitmapFile.CREATE(BitmapFilename + '\' + "Bitmap Name") THEN BEGIN
            BitmapFile.CREATEOUTSTREAM(OStream);
            COPYSTREAM(OStream,IStream);
            TempFile := BitmapFile.NAME;
            BitmapFile.CLOSE;
          END ELSE
           ERROR(Text019,BitmapFilename + '\' + "Bitmap Name");
        END;
      END ELSE BEGIN
        TempFile := Bitmap.IMPORT("Bitmap Name",TRUE);
        "Bitmap Name" := FileSystemObject.GetFileName(TempFile);
      END;

        BitmapFile.TEXTMODE(FALSE);
        BitmapFile.OPEN(TempFile);

        IF BitmapFile.LEN < 62 THEN
          ERROR(Text010);
        IF BitmapFile.LEN > 960000 THEN
          ERROR(Text011);

      BitmapFile.CREATEINSTREAM(IStream);
      Streamreader := Streamreader.StreamReader(IStream,Encoding.UTF7);

        // Signature
        TempText := '';
        ReadChar := Streamreader.Read();

        TempText[1] := ReadChar;
        ReadChar := Streamreader.Read();
        TempText[2] := ReadChar;

        IF TempText <> 'BM' THEN
          ERROR(Text012);

        // File Size
        ReadChar := Streamreader.Read();
        ReadChar := Streamreader.Read();
        ReadChar := Streamreader.Read();
        ReadChar := Streamreader.Read();

        // Reserved
        ReadChar := Streamreader.Read();
        ReadChar := Streamreader.Read();
        ReadChar := Streamreader.Read();
        ReadChar := Streamreader.Read();

        // DataOffset
        ReadChar := Streamreader.Read();
        "Raster Start Position" := ReadChar;

        ReadChar := Streamreader.Read();
        "Raster Start Position" := "Raster Start Position" + 256 * ReadChar;

        ReadChar := Streamreader.Read();
        "Raster Start Position" := "Raster Start Position" + 256 * 256 * ReadChar;

        ReadChar := Streamreader.Read();
        "Raster Start Position" := "Raster Start Position" + 256 * 256 * 256 * ReadChar;

        // Size
        ReadChar := Streamreader.Read();
        ReadChar := Streamreader.Read();
        ReadChar := Streamreader.Read();
        ReadChar := Streamreader.Read();

        // Width
        ReadChar := Streamreader.Read();
        "Bitmap Width" := ReadChar;
        ReadChar := Streamreader.Read();
        "Bitmap Width" := "Bitmap Width" + 256 * ReadChar;
        ReadChar := Streamreader.Read();
        "Bitmap Width" := "Bitmap Width" + 256 * 256 * ReadChar;
        ReadChar  := Streamreader.Read();
        "Bitmap Width" := "Bitmap Width" + 256 * 256 * 256 * ReadChar;
        IF "Bitmap Width" MOD 8 <> 0 THEN
          ERROR(Text013);

        // Height
        ReadChar := Streamreader.Read();
        "Bitmap Height" := ReadChar;
        ReadChar := Streamreader.Read();
        "Bitmap Height" := "Bitmap Height" + 256 * ReadChar;
        ReadChar := Streamreader.Read();
        "Bitmap Height" := "Bitmap Height" + 256 * 256 * ReadChar;
        ReadChar := Streamreader.Read();
        "Bitmap Height" := "Bitmap Height" + 256 * 256 * 256 * ReadChar;

        // Planes
        ReadChar := Streamreader.Read();
        ReadChar := Streamreader.Read();

        // BitCount
        ReadChar := Streamreader.Read();
        TempInteger := ReadChar;

        ReadChar := Streamreader.Read();
        TempInteger := TempInteger + 256 * ReadChar;

        IF TempInteger <> 1 THEN
          ERROR(Text014);

        // Compression
        ReadChar := Streamreader.Read();
        TempInteger := ReadChar;
        ReadChar := Streamreader.Read();
        TempInteger := TempInteger + 256 * ReadChar;
        ReadChar := Streamreader.Read();
        TempInteger := TempInteger + 256 * 256 * ReadChar;
        ReadChar := Streamreader.Read();
        TempInteger := TempInteger + 256 * 256 * 256 * ReadChar;

        IF TempInteger <> 0 THEN
          ERROR(Text015);

        Streamreader.Close;
        BitmapFile.CLOSE;

        MODIFY(TRUE);
    END;

    PROCEDURE ExportBitmap@12(ExportFileName@1240030000 : Text[1000];CommonDialog@1240030001 : Boolean);
    VAR
      PackingStation@1240020000 : Record 14000709;
      FileSystemObject@1240020003 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject";
      IStream@1240020004 : InStream;
      OStream@1240020001 : OutStream;
      BitmapFile@1240020002 : File;
      DestinationFileName@1240020005 : Text[1000];
      TempPath@1240020006 : Text[1000];
    BEGIN
      CALCFIELDS(Bitmap);
      IF NOT Bitmap.HASVALUE THEN
        TESTFIELD(Bitmap);

      IF ISCLEAR(FileSystemObject) THEN
        CREATE(FileSystemObject,FALSE,ISSERVICETIER);

      PackingStation.GetPackingStation();
      DestinationFileName := FileSystemObject.GetParentFolderName(PackingStation."Label Buffer File") +
        '\' + FileSystemObject.GetFileName(ExportFileName);

      IF NOT ISSERVICETIER THEN
        Bitmap.EXPORT(DestinationFileName,CommonDialog)
      ELSE BEGIN
        //exports to server and copies to client
        Bitmap.CREATEINSTREAM(IStream);
        DOWNLOADFROMSTREAM(IStream,'','<TEMP>','',TempPath);
        BitmapFile.WRITEMODE(TRUE);
        BitmapFile.CREATE(ExportFileName);
        BitmapFile.CREATEOUTSTREAM(OStream);
        COPYSTREAM(OStream,IStream);
        BitmapFile.CLOSE;

        IF FileSystemObject.FileExists(DestinationFileName) THEN
          FileSystemObject.DeleteFile(DestinationFileName);
        FileSystemObject.CopyFile(TempPath,DestinationFileName);
        IF CommonDialog THEN
          MESSAGE(Text018,DestinationFileName);
      END;
    END;

    BEGIN
    END.
  }
}

