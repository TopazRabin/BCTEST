OBJECT Table 14000983 Export Source Line
{
  OBJECT-PROPERTIES
  {
    Date=06/28/17;
    Time=12:00:00 PM;
    Version List=SE0.60.11;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               GetExportDocument;
               IF Type IN [Type::Item,Type::Resource] THEN
                 ExportDoc.TESTFIELD(Submitted,FALSE);

               "Export Information Code" := ExportDoc."Export Information Code";
               "License Type" := ExportDoc."License Type";
               "License No." := ExportDoc."License No.";
               "Entered By" := USERID;
               "Date Entered" := TODAY;
               "Source ID" := Text001;

               IF "No." = '' THEN
                 Type := Type::" ";
             END;

    OnModify=BEGIN
               GetExportDocument;
               IF Type IN [Type::Item,Type::Resource] THEN
                 ExportDoc.TESTFIELD(Submitted,FALSE);
               ExportDoc.MODIFY(TRUE);

               IF (Type <= Type::Resource) AND ("No." = '') THEN
                 Type := Type::" ";
             END;

    OnDelete=BEGIN
               GetExportDocument;
               IF Type IN [Type::Item,Type::Resource] THEN
                 ExportDoc.TESTFIELD(Submitted,FALSE);
             END;

    OnRename=BEGIN
               GetExportDocument;
               ExportDoc.TESTFIELD(Submitted,FALSE);
             END;

    CaptionML=ENU=Export Source Line;
    LookupPageID=Page14000985;
    DrillDownPageID=Page14000985;
  }
  FIELDS
  {
    { 1   ;   ;Export Document No. ;Code20        ;TableRelation="Export Document";
                                                   CaptionML=ENU=Export Document No. }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 11  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  "No." := '';
                                                                  ClearCommodityInfo;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,Account (G/L),Item,Resource,Adj. Shipping Charge,Adj. Discount,Adj. Ins. Charge";
                                                   OptionString=[ ,Account (G/L),Item,Resource,Adj. Shipping Charge,Adj. Discount,Adj. Ins. Charge] }
    { 12  ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(" ")) "Standard Text"
                                                                 ELSE IF (Type=CONST("Account (G/L)")) "G/L Account"
                                                                 ELSE IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(Resource)) Resource;
                                                   OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN
                                                                  ClearCommodityInfo;

                                                                GetCommodityInfo;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 13  ;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=ENU=Variant Code }
    { 14  ;   ;Description         ;Text45        ;OnValidate=BEGIN
                                                                TESTFIELD("Schedule B Code",'');
                                                              END;

                                                   CaptionML=ENU=Description }
    { 15  ;   ;Export Information Code;Code10     ;TableRelation="Export Document Validation".Code WHERE (Table=CONST(Export));
                                                   OnValidate=BEGIN
                                                                GetCommodityInfo;
                                                              END;

                                                   CaptionML=ENU=Export Information Code }
    { 16  ;   ;Value USD           ;Decimal       ;CaptionML=ENU=Value USD;
                                                   DecimalPlaces=0:5;
                                                   AutoFormatType=2 }
    { 17  ;   ;Schedule B Quantity 1;Decimal      ;CaptionML=ENU=Schedule B Quantity 1;
                                                   DecimalPlaces=0:5 }
    { 20  ;   ;Schedule B Unit of Measure 1;Code10;TableRelation="Schedule B Unit of Measure".Code;
                                                   CaptionML=ENU=Schedule B Unit of Measure 1 }
    { 21  ;   ;Schedule B Quantity 2;Decimal      ;CaptionML=ENU=Schedule B Quantity 2;
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Schedule B Unit of Measure 2;Code10;TableRelation="Schedule B Unit of Measure".Code;
                                                   CaptionML=ENU=Schedule B Unit of Measure 2 }
    { 23  ;   ;Weight (KGS)        ;Decimal       ;OnValidate=BEGIN
                                                                GetShippingSetup;

                                                                IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::LBS THEN
                                                                  Weight := ShippingSetup.KiloToPound("Weight (KGS)")
                                                                ELSE
                                                                  Weight := "Weight (KGS)";
                                                              END;

                                                   CaptionML=ENU=Weight (KGS);
                                                   DecimalPlaces=0:5 }
    { 24  ;   ;License Type        ;Code10        ;TableRelation="Export Document Validation".Code WHERE (Table=CONST(License));
                                                   OnValidate=VAR
                                                                ExportDocValidation@1240020000 : Record 14000985;
                                                              BEGIN
                                                                ExportDocValidation.GET(ExportDocValidation.Table::License,0,"License Type");
                                                                IF ExportDocValidation."Description 2" <> '' THEN
                                                                  "License No." := ExportDocValidation."Description 2";
                                                              END;

                                                   CaptionML=ENU=License Type }
    { 25  ;   ;License No.         ;Code20        ;CaptionML=ENU=License No. }
    { 26  ;   ;Schedule B Code     ;Code10        ;OnValidate=VAR
                                                                ScheduleBCode@1240030000 : Record 14000718;
                                                                TariffNumber@1240030003 : Record 260;
                                                              BEGIN
                                                                GetShippingSetup;
                                                                GetExportDocSetup;

                                                                IF ExportDocSetup."Tariff Number on Export Docs" THEN BEGIN
                                                                  TariffNumber.GET("Schedule B Code");
                                                                  Description :=COPYSTR(TariffNumber.Description,1,MAXSTRLEN(Description));
                                                                  "Commodity Code Type" := "Commodity Code Type"::"Tariff Number";
                                                                END ELSE BEGIN
                                                                  IF "Schedule B Code" = '' THEN BEGIN
                                                                    "Schedule B Unit of Measure 1" := '';
                                                                    "Schedule B Unit of Measure 2" := '';
                                                                    "Schedule B Quantity 1" := 0;
                                                                    "Schedule B Quantity 2" := 0;
                                                                  END ELSE BEGIN
                                                                    ScheduleBCode.GET("Schedule B Code");
                                                                    Description :=COPYSTR(ScheduleBCode.Description,1,MAXSTRLEN(Description));
                                                                    "Commodity Code Type" := "Commodity Code Type"::"Schedule B";

                                                                    IF "Schedule B Unit of Measure 1" <> ScheduleBCode."Unit of Measure 1" THEN BEGIN
                                                                      "Schedule B Unit of Measure 1" := ScheduleBCode."Unit of Measure 1";
                                                                      "Schedule B Quantity 1" := 0;
                                                                    END;

                                                                    IF "Schedule B Unit of Measure 2" <> ScheduleBCode."Unit of Measure 2" THEN BEGIN
                                                                      "Schedule B Unit of Measure 2" := ScheduleBCode."Unit of Measure 2";
                                                                      "Schedule B Quantity 2" := 0;
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              TariffNumber@1240030000 : Record 260;
                                                              ScheduleBCode@1240030001 : Record 14000718;
                                                            BEGIN
                                                              GetShippingSetup;
                                                              GetExportDocSetup;

                                                              IF ExportDocSetup."Tariff Number on Export Docs" THEN BEGIN
                                                                IF PAGE.RUNMODAL(0,TariffNumber) = ACTION::LookupOK THEN
                                                                  VALIDATE(
                                                                    "Schedule B Code",TariffNumber."No.");
                                                              END ELSE
                                                                IF PAGE.RUNMODAL(0,ScheduleBCode) = ACTION::LookupOK THEN
                                                                  VALIDATE(
                                                                    "Schedule B Code",ScheduleBCode.Code);
                                                            END;

                                                   CaptionML=ENU=Schedule B Code }
    { 27  ;   ;Commodity Code Type ;Option        ;CaptionML=ENU=Commodity Code Type;
                                                   OptionCaptionML=ENU=Schedule B,Harmonized Code,Tariff Number;
                                                   OptionString=Schedule B,Harmonized Code,Tariff Number }
    { 28  ;   ;Export Control Class No.;Code10    ;TableRelation="Export Controls Class Number".Code;
                                                   CaptionML=ENU=Export Control Class No. }
    { 29  ;   ;Origin              ;Code10        ;OnValidate=BEGIN
                                                                IF (Origin <> '') AND
                                                                   NOT (Origin IN ['D','F'])
                                                                THEN
                                                                  ERROR(Text002,FIELDCAPTION(Origin));
                                                              END;

                                                   CaptionML=ENU=Origin }
    { 30  ;   ;Entered By          ;Code50        ;CaptionML=ENU=Entered By;
                                                   Editable=No }
    { 31  ;   ;Date Entered        ;Date          ;CaptionML=ENU=Date Entered;
                                                   Editable=No }
    { 32  ;   ;Source Quantity     ;Decimal       ;OnValidate=VAR
                                                                ItemUnitOfMeasure@1240030005 : Record 5404;
                                                                QuantityPerUOM@1240030002 : Decimal;
                                                                Item@1240030000 : Record 27;
                                                                Resource@1240030001 : Record 156;
                                                              BEGIN
                                                                IF ("Source Quantity" > 0) THEN BEGIN
                                                                  CASE Type OF
                                                                    Type::Item:
                                                                      BEGIN
                                                                        Item.GET("No.");
                                                                        IF "Source Unit of Measure" = '' THEN
                                                                          QuantityPerUOM := 1
                                                                        ELSE BEGIN
                                                                          ItemUnitOfMeasure.GET("No.","Source Unit of Measure");
                                                                          QuantityPerUOM := ItemUnitOfMeasure."Qty. per Unit of Measure";
                                                                        END;
                                                                        "Source Quantity (Base)" := "Source Quantity" * QuantityPerUOM;
                                                                        "Source Unit of Measure (Base)" := Item."Base Unit of Measure";
                                                                      END;
                                                                    Type::Resource:
                                                                      BEGIN
                                                                        Resource.GET("No.");
                                                                        "Source Quantity (Base)" := "Source Quantity";
                                                                        "Source Unit of Measure" := Resource."Base Unit of Measure";
                                                                        "Source Unit of Measure (Base)" := Resource."Base Unit of Measure";
                                                                      END;
                                                                    Type::"Account (G/L)":
                                                                      BEGIN
                                                                        "Source Quantity (Base)" := "Source Quantity";
                                                                        "Source Unit of Measure" := 'EA';
                                                                        "Source Unit of Measure (Base)" := 'EA';
                                                                      END;
                                                                  END;
                                                                  GetCommodityInfo;
                                                                END ELSE BEGIN
                                                                  "Schedule B Quantity 1" := 0;
                                                                  "Schedule B Quantity 2" := 0;
                                                                  "Source Quantity (Base)" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Source Quantity;
                                                   DecimalPlaces=0:5 }
    { 33  ;   ;Source Unit of Measure;Code10      ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE IF (Type=CONST(Resource)) "Resource Unit of Measure".Code WHERE (Resource No.=FIELD(No.))
                                                                 ELSE "Unit of Measure";
                                                   OnValidate=BEGIN
                                                                VALIDATE("Source Quantity");
                                                              END;

                                                   CaptionML=ENU=Source Unit of Measure }
    { 34  ;   ;Source Type         ;Integer       ;CaptionML=ENU=Source Type;
                                                   Editable=No }
    { 35  ;   ;Source SubType      ;Integer       ;CaptionML=ENU=Source SubType;
                                                   Editable=No }
    { 36  ;   ;Source ID           ;Code20        ;CaptionML=ENU=Source ID;
                                                   Editable=No }
    { 37  ;   ;Export License Required;Boolean    ;CaptionML=ENU=Export License Required }
    { 38  ;   ;Source Quantity (Base);Decimal     ;CaptionML=ENU=Source Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 39  ;   ;License Exp. Date   ;Date          ;CaptionML=ENU=License Exp. Date }
    { 40  ;   ;Weight              ;Decimal       ;OnValidate=BEGIN
                                                                GetShippingSetup;

                                                                IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::LBS THEN
                                                                  "Weight (KGS)" := ShippingSetup.PoundToKilo(Weight)
                                                                ELSE
                                                                  "Weight (KGS)" := Weight;
                                                              END;

                                                   CaptionML=ENU=Weight;
                                                   DecimalPlaces=0:5 }
    { 41  ;   ;Used Vehicle        ;Boolean       ;CaptionML=ENU=Used Vehicle }
    { 42  ;   ;Used Vehicle ID Type;Option        ;CaptionML=ENU=Used Vehicle ID Type;
                                                   OptionCaptionML=ENU=VIN,Product ID;
                                                   OptionString=VIN,Product ID }
    { 43  ;   ;Used Vehicle ID     ;Text25        ;OnValidate=BEGIN
                                                                IF NOT "Used Vehicle" AND
                                                                  ("Used Vehicle ID" <> '')
                                                                THEN
                                                                  ERROR(Text003,FIELDCAPTION("Used Vehicle ID"),FIELDCAPTION("Used Vehicle"));
                                                              END;

                                                   CaptionML=ENU=Used Vehicle ID }
    { 44  ;   ;Used Vehicle Title  ;Text15        ;OnValidate=BEGIN
                                                                IF NOT "Used Vehicle" AND
                                                                  ("Used Vehicle Title" <> '')
                                                                THEN
                                                                  ERROR(Text004,FIELDCAPTION("Used Vehicle Title"),FIELDCAPTION("Used Vehicle"));
                                                              END;

                                                   CaptionML=ENU=Used Vehicle Title }
    { 45  ;   ;Used Vehicle Title State;Code2     ;TableRelation="Export Document Validation".Code WHERE (Table=CONST(US State));
                                                   OnValidate=BEGIN
                                                                IF NOT "Used Vehicle" AND
                                                                  ("Used Vehicle Title State" <> '')
                                                                THEN
                                                                  ERROR(Text005,FIELDCAPTION("Used Vehicle Title State"),FIELDCAPTION("Used Vehicle"));
                                                              END;

                                                   CaptionML=ENU=Used Vehicle Title State }
    { 46  ;   ;Source Net Weight   ;Decimal       ;CaptionML=ENU=Source Net Weight;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 47  ;   ;Source Gross Weight ;Decimal       ;CaptionML=ENU=Source Gross Weight;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 48  ;   ;Source Dimmed Weight;Decimal       ;CaptionML=ENU=Source Dimmed Weight;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 49  ;   ;Country of Origin ISO 2 Char;Code2 ;CaptionML=ENU=Country of Origin ISO 2 Char }
    { 50  ;   ;Preference Criteria ;Option        ;CaptionML=ENU=Preference Criteria;
                                                   OptionCaptionML=ENU=" ,A,B,C,D,E,F";
                                                   OptionString=[ ,A,B,C,D,E,F] }
    { 51  ;   ;Producer of Good Indicator;Option  ;CaptionML=ENU=Producer of Good Indicator;
                                                   OptionCaptionML=ENU=" ,YES,1,2,3";
                                                   OptionString=[ ,YES,1,2,3] }
    { 52  ;   ;RVC in Net Cost Method;Boolean     ;CaptionML=ENU=RVC in Net Cost Method }
    { 53  ;   ;Source Description  ;Text45        ;CaptionML=ENU=Source Description }
    { 54  ;   ;Country of Origin Code;Code10      ;OnValidate=BEGIN
                                                                "Country of Origin ISO 2 Char" := GetISOCountryCode("Country of Origin Code");
                                                              END;

                                                   CaptionML=ENU=Country of Origin Code }
    { 55  ;   ;Source Unit of Measure (Base);Code10;
                                                   CaptionML=ENU=Source Unit of Measure (Base) }
  }
  KEYS
  {
    {    ;Export Document No.,Line No.            ;SumIndexFields=Value USD;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Export Document No.,Type,No.,Country of Origin ISO 2 Char }
    {    ;Export Document No.,Schedule B Code,Description,Export Information Code,License Type,License No.,Export Control Class No.,Origin,Schedule B Unit of Measure 1,Schedule B Unit of Measure 2,Used Vehicle ID;
                                                   MaintainSQLIndex=No }
    {    ;Export Document No.,Schedule B Code,Description,Country of Origin ISO 2 Char,Source Unit of Measure (Base) }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ExportDoc@1240030000 : Record 14000981;
      ShippingSetup@1240030001 : Record 14000707;
      ShippingSetupRetrieved@1240030002 : Boolean;
      Text001@1240030003 : TextConst 'ENU=Manually Entered';
      Text002@1240030004 : TextConst 'ENU=IF entered, %1 must be D or F';
      Text003@1240030005 : TextConst 'ENU=%1 cannot be entered unless %2 is checked.';
      Text004@1240030006 : TextConst 'ENU=%1 cannot be entered unless %2 is checked.';
      Text005@1240030007 : TextConst 'ENU=%1 cannot be entered unless %2 is checked.';
      ExportDocSetup@1240030008 : Record 14000991;
      ExportDocSetupRetrieved@1240030009 : Boolean;

    LOCAL PROCEDURE GetExportDocument@1240030000();
    BEGIN
      IF ExportDoc."No." = '' THEN
        ExportDoc.GET("Export Document No.");
    END;

    LOCAL PROCEDURE GetISOCountryCode@1240030001(CountryCode@1240030000 : Code[10]) : Code[2];
    VAR
      Country@1240030001 : Record 9;
    BEGIN
      IF CountryCode = '' THEN
        EXIT('US')
      ELSE BEGIN
        Country.GET(CountryCode);
        EXIT(Country."ISO 2 char Country Code");
      END;
    END;

    LOCAL PROCEDURE GetShippingSetup@22();
    BEGIN
      IF NOT ShippingSetupRetrieved THEN BEGIN
        ShippingSetup.GET;
        ShippingSetupRetrieved := TRUE;
      END;
    END;

    LOCAL PROCEDURE GetCommodityInfo@1240030002();
    VAR
      ExportDocValidation@1240030001 : Record 14000985;
      Item@1240030000 : Record 27;
      Resource@1240030002 : Record 156;
      GLAccount@1240030003 : Record 15;
    BEGIN
      GetShippingSetup;
      GetExportDocSetup;

      CASE Type OF
        Type::Item:
          BEGIN
            Item.GET("No.");
            "Producer of Good Indicator" := Item."Producer of Good Indicator";
            "RVC in Net Cost Method" := Item."RVC in Net Cost Method";
            "Preference Criteria" := Item."Preference Criteria";
            "Country of Origin ISO 2 Char" := GetISOCountryCode(Item."Country/Region of Origin Code");
            "Country of Origin Code" := Item."Country/Region of Origin Code";
            IF CurrFieldNo <> 0 THEN
              Description := Item.Description;

            IF ExportDocSetup."Tariff Number on Export Docs" THEN BEGIN
              "Commodity Code Type" := "Commodity Code Type"::"Tariff Number";
              VALIDATE("Schedule B Code",Item."Tariff No.");
            END ELSE BEGIN
              IF ExportDocValidation.GET(
                   ExportDocValidation.Table::"Ltd. Rpt.",0,"Export Information Code")
              THEN BEGIN
                "Schedule B Unit of Measure 1" := '';
                "Schedule B Unit of Measure 2" := '';
                "Commodity Code Type" := "Commodity Code Type"::"Schedule B";
                "Schedule B Code" := '';

                "Schedule B Quantity 1" := 0;
                "Schedule B Quantity 2" := 0;
                "Export Control Class No." := '';
                Origin := '';
              END ELSE BEGIN
                "Schedule B Unit of Measure 1" := Item."Schedule B Unit of Measure 1";
                "Schedule B Unit of Measure 2" := Item."Schedule B Unit of Measure 2";

                "Commodity Code Type" := "Commodity Code Type"::"Schedule B";
                VALIDATE("Schedule B Code",Item."Schedule B Code");

                IF Item."Schedule B Quantity 1" <> 0 THEN
                  "Schedule B Quantity 1" := Item."Schedule B Quantity 1" * "Source Quantity (Base)";
                IF Item."Schedule B Quantity 2" <> 0 THEN
                  "Schedule B Quantity 2" := Item."Schedule B Quantity 2" * "Source Quantity (Base)";

                "Export Control Class No." := Item."Export Control Class No.";
                IF "Country of Origin ISO 2 Char" = 'US' THEN
                  Origin := 'D'
                ELSE
                  Origin := 'F';
              END;
            END;
          END;

        Type::Resource:
          BEGIN
            Resource.GET("No.");
            "Producer of Good Indicator" := Resource."Producer of Good Indicator";
            "RVC in Net Cost Method" := Resource."RVC in Net Cost Method";
            "Preference Criteria" := Resource."Preference Criteria";
            "Country of Origin ISO 2 Char" := GetISOCountryCode(Resource."Country of Origin Code");
            "Country of Origin Code" := Resource."Country of Origin Code";
            IF CurrFieldNo <> 0 THEN
              Description := Resource.Name;

            IF NOT ExportDocSetup."Tariff Number on Export Docs" THEN BEGIN
              IF ExportDocValidation.GET(
                   ExportDocValidation.Table::"Ltd. Rpt.",0,"Export Information Code")
              THEN BEGIN
                "Schedule B Unit of Measure 1" := '';
                "Schedule B Unit of Measure 2" := '';
                "Commodity Code Type" := "Commodity Code Type"::"Schedule B";
                "Schedule B Code" := '';

                "Schedule B Quantity 1" := 0;
                "Schedule B Quantity 2" := 0;
                "Export Control Class No." := '';
                Origin := '';
              END ELSE BEGIN
                "Schedule B Unit of Measure 1" := Resource."Schedule B Unit of Measure 1";
                "Schedule B Unit of Measure 2" := Resource."Schedule B Unit of Measure 2";

                "Schedule B Code" := Resource."Schedule B code";
                "Commodity Code Type" := "Commodity Code Type"::"Schedule B";

                IF Resource."Schedule B Quantity 1" <> 0 THEN
                  "Schedule B Quantity 1" := Resource."Schedule B Quantity 1" * "Source Quantity (Base)";
                IF Item."Schedule B Quantity 2" <> 0 THEN
                  "Schedule B Quantity 2" := Resource."Schedule B Quantity 2" * "Source Quantity (Base)";

                "Export Control Class No." := Resource."Export Control Class No.";
                IF "Country of Origin ISO 2 Char" = 'US' THEN
                  Origin := 'D'
                ELSE
                  Origin := 'F';
              END;
            END;
          END;
        Type::"Account (G/L)":
          BEGIN
            GLAccount.GET("No.");
            IF CurrFieldNo <> 0 THEN
              Description := GLAccount.Name;
            "Country of Origin ISO 2 Char" := 'US';
            "Country of Origin Code" := '';
          END;
        END;
    END;

    PROCEDURE ReCreateAllSrceLinesFromPkgs@1240030012(ExportDocNo@1240030000 : Code[20];CurrentShippingSetup@1240030004 : Record 14000707;OpenPackagesOnly@1240030005 : Boolean);
    VAR
      ExportDoc2@1240030002 : Record 14000981;
      ExportSourceDoc@1240030001 : Record 14000982;
      ExportSourceLine@1240030003 : Record 14000983;
    BEGIN
      ExportDoc2.GET(ExportDocNo);
      ExportDoc2.TESTFIELD(Submitted,FALSE);
      //ExportDoc2.TESTFIELD(Posted,FALSE);

      ExportSourceLine.SETRANGE("Export Document No.",ExportDocNo);
      ExportSourceLine.SETRANGE(Type,Type::Item,Type::Resource);
      ExportSourceLine.DELETEALL;

      ExportSourceDoc.RESET;
      ExportSourceDoc.SETRANGE("Export Document No.",ExportDocNo);

      ExportSourceDoc.FIND('-');
      REPEAT
        ReCreateDocSrceLnsFromPackages(
          ExportDocNo,ExportSourceDoc."Source Type",ExportSourceDoc."Source Subtype",
          ExportSourceDoc."Source ID",ExportSourceDoc."Location Code",CurrentShippingSetup,
          OpenPackagesOnly);
      UNTIL ExportSourceDoc.NEXT = 0;
    END;

    PROCEDURE ReCreateDocSrceLnsFromPackages@1240030003(ExportDocNo@1240030000 : Code[20];ExportSourceDocType@1240030008 : Integer;ExportSourceDocSubType@1240030009 : Integer;ExportSourceDocID@1240030010 : Code[20];LocationCode@1240030011 : Code[10];CurrentShippingSetup@1240030017 : Record 14000707;OpenPackagesOnly@1240030001 : Boolean);
    VAR
      ExportSourceDoc@1240030006 : Record 14000982;
      ExportSourceLine@1240030012 : Record 14000983;
      Package@1240030002 : Record 14000701;
      PackageLine@1240030003 : Record 14000702;
      PostedPackage@1240030005 : Record 14000704;
      PostedPackageLine@1240030004 : Record 14000705;
      PackageFound@1240030007 : Boolean;
      PackageWeight@1240030014 : Decimal;
      TotalItems@1240030015 : Integer;
      TotalValue@1240030016 : Decimal;
    BEGIN
      GetExportDocSetup;

      ExportSourceDoc.GET(
        ExportDocNo,ExportSourceDocType,ExportSourceDocSubType,ExportSourceDocID);

      ExportSourceLine.RESET;
      ExportSourceLine.SETRANGE("Export Document No.",ExportDocNo);
      ExportSourceLine.SETRANGE("Source Type",ExportSourceDocType);
      ExportSourceLine.SETRANGE("Source SubType",ExportSourceDocSubType);
      ExportSourceLine.SETRANGE("Source ID",ExportSourceDocID);
      ExportSourceLine.SETRANGE(Type,Type::Item,Type::Resource);
      ExportSourceLine.DELETEALL;

      Package.RESET;
      IF ExportSourceDoc."Source Type" = DATABASE::Package THEN BEGIN
        Package.SETRANGE("No.",ExportSourceDocID);
      END ELSE BEGIN
        Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        Package.SETRANGE("Export Document No.",ExportDocNo);
        Package.SETRANGE("Source Type",ExportSourceDocType);
        Package.SETRANGE("Source Subtype",ExportSourceDocSubType);
        Package.SETRANGE("Source ID",ExportSourceDocID);
        IF CurrentShippingSetup."Prepack Shipping Agent Code" <> '' THEN
          Package.SETFILTER(
            "Shipping Agent Code",'<>%1',CurrentShippingSetup."Prepack Shipping Agent Code");
        IF OpenPackagesOnly THEN
          Package.SETRANGE(Closed,FALSE);
      END;

      IF CurrentShippingSetup."Location Packing" THEN
        Package.SETRANGE("Location Code",LocationCode);

      IF Package.FIND('-') THEN BEGIN
        PackageFound := TRUE;
        REPEAT
          TotalItems := 0;
          TotalValue := 0;

          Package.ClearTotalValueFields;
          PackageWeight := Package.GetWeight;
          PackageLine.RESET;
          PackageLine.SETRANGE("Package No.",Package."No.");
          PackageLine.SETFILTER(
            Type,'%1|%2|%3',PackageLine.Type::"Account (G/L)",PackageLine.Type::Item,
            PackageLine.Type::Resource);
          PackageLine.SETFILTER("No.",'<>%1','');
          PackageLine.SETFILTER(Quantity,'>%1',0);
          IF PackageLine.FIND('-') THEN BEGIN
            IF ExportDocSetup."Export Doc. Weight As" <> ExportDocSetup."Export Doc. Weight As"::"Actual Weight"
            THEN BEGIN
              REPEAT
                TotalItems := TotalItems + PackageLine.Quantity;
                TotalValue := TotalValue + PackageLine."Value (Price)";
              UNTIL PackageLine.NEXT = 0;
              PackageLine.FIND('-');
            END;

            REPEAT
              ExportSourceLineFromPackage(
                PackageLine,ExportDocNo,ExportSourceDocType,ExportSourceDocSubType,ExportSourceDocID,
                CurrentShippingSetup,ExportDocSetup,PackageWeight,TotalItems,TotalValue);
              UNTIL PackageLine.NEXT = 0;
            END;
          PackageLine.SETRANGE(Type,PackageLine.Type::Package);
          PackageLine.SETFILTER("No.",'<>%1','');
          PackageLine.SETFILTER(Quantity,'>%1',0);
          IF PackageLine.FIND('-') THEN
            REPEAT
              CreateSourceLnsFromInnerPkg(
                PackageLine."No.",ExportSourceDocType,ExportSourceDocSubType,ExportSourceDocID,
                CurrentShippingSetup,ExportDocSetup)
            UNTIL PackageLine.NEXT = 0;
        UNTIL Package.NEXT = 0;
      END;

      IF OpenPackagesOnly THEN BEGIN
        IF PackageFound THEN BEGIN
          ExportDoc.GET(ExportDocNo);
          ExportDoc.UpdateSummaryLines;
        END;
        EXIT;
      END;

      PostedPackage.RESET;
      IF ExportSourceDoc."Source Type" IN [DATABASE::Package,DATABASE::"Posted Package"] THEN BEGIN
        PostedPackage.SETRANGE("No.",ExportSourceDocID);
      END ELSE BEGIN
        PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        PostedPackage.SETRANGE("Export Document No.",ExportDocNo);
        PostedPackage.SETRANGE("Source Type",ExportSourceDocType);
        PostedPackage.SETRANGE("Source Subtype",ExportSourceDocSubType);
        PostedPackage.SETRANGE("Source ID",ExportSourceDocID);
        IF CurrentShippingSetup."Prepack Shipping Agent Code" <> '' THEN
          PostedPackage.SETFILTER(
            "Shipping Agent Code",'<>%1',CurrentShippingSetup."Prepack Shipping Agent Code");
        PostedPackage.SETRANGE(Closed,TRUE);
      END;

      IF CurrentShippingSetup."Location Packing" THEN
        PostedPackage.SETRANGE("Location Code",LocationCode);

      IF PostedPackage.FIND('-') THEN BEGIN
        PackageFound := TRUE;
        REPEAT
          Package.ClearTotalValueFields;
          Package.TRANSFERFIELDS(PostedPackage);
          PackageWeight := Package.GetPostedWeight;
          PostedPackageLine.RESET;
          PostedPackageLine.SETRANGE("Package No.",PostedPackage."No.");
          PostedPackageLine.SETFILTER(
            Type,'%1|%2|%3',PostedPackageLine.Type::"Account (G/L)",PostedPackageLine.Type::Item,
            PostedPackageLine.Type::Resource);
          PostedPackageLine.SETFILTER("No.",'<>%1','');
          PostedPackageLine.SETFILTER(Quantity,'>%1',0);
          IF PostedPackageLine.FIND('-') THEN BEGIN
            IF ExportDocSetup."Export Doc. Weight As" <> ExportDocSetup."Export Doc. Weight As"::"Actual Weight"
            THEN BEGIN
              REPEAT
                TotalItems := TotalItems + PostedPackageLine.Quantity;
                TotalValue := TotalValue + PostedPackageLine."Value (Price)";
              UNTIL PostedPackageLine.NEXT = 0;
              PostedPackageLine.FIND('-');
            END;

            REPEAT
              PackageLine.TRANSFERFIELDS(PostedPackageLine);
              ExportSourceLineFromPackage(
                PackageLine,ExportDocNo,ExportSourceDocType,ExportSourceDocSubType,ExportSourceDocID,
                CurrentShippingSetup,ExportDocSetup,PackageWeight,TotalItems,TotalValue);
            UNTIL PostedPackageLine.NEXT = 0;
          END;

          PostedPackageLine.SETRANGE(Type,PostedPackageLine.Type::Package);
            PostedPackageLine.SETFILTER("No.",'<>%1','');
            PostedPackageLine.SETFILTER(Quantity,'>%1',0);
            IF PostedPackageLine.FIND('-') THEN
              REPEAT
                CreateSourceLnsFromInnerPkg(
                  PostedPackageLine."No.",ExportSourceDocType,ExportSourceDocSubType,ExportSourceDocID,
                  CurrentShippingSetup,ExportDocSetup)
              UNTIL PostedPackageLine.NEXT = 0;
        UNTIL PostedPackage.NEXT = 0;
      END;

      IF PackageFound = TRUE THEN BEGIN
        ExportDoc.GET(ExportDocNo);
        ExportDoc.UpdateSummaryLines;
      END ELSE
        Package.FIND('-');
    END;

    LOCAL PROCEDURE ExportSourceLineFromPackage@1240030004(PackageLine@1240030000 : Record 14000702;ExportDocNo@1240030003 : Code[20];ExportDocSourceType@1240030004 : Integer;ExportDocSourceSubType@1240030005 : Integer;ExportDocSourceID@1240030006 : Code[20];CurrentShippingSetup@1240030010 : Record 14000707;CurrentExportDocSetup@1240030011 : Record 14000991;PackageWeight@1240030007 : Decimal;TotalItems@1240030008 : Integer;TotalValue@1240030009 : Decimal);
    VAR
      ExportSourceLine@1240030001 : Record 14000983;
      LineNo@1240030002 : Integer;
    BEGIN
      ExportSourceLine.LOCKTABLE;
      ExportSourceLine.RESET;
      ExportSourceLine.SETRANGE("Export Document No.",ExportDocNo);
      IF ExportSourceLine.FIND('+') THEN
        LineNo := ExportSourceLine."Line No." + 1000
      ELSE
        LineNo := 1000;

      ExportSourceLine.INIT;
      ExportSourceLine."Export Document No." := ExportDocNo;
      ExportSourceLine."Line No." := LineNo;
      ExportSourceLine.INSERT(TRUE);
      LineNo := LineNo + 1000;

      CASE PackageLine.Type OF
        PackageLine.Type::"Account (G/L)":
          ExportSourceLine.Type := ExportSourceLine.Type::"Account (G/L)";
        PackageLine.Type::Item:
          ExportSourceLine.Type := ExportSourceLine.Type::Item;
        PackageLine.Type::Resource:
          ExportSourceLine.Type := ExportSourceLine.Type::Resource;
        ELSE
          ExportSourceLine.Type := ExportSourceLine.Type::" ";
      END;

      ExportSourceLine.VALIDATE("No.",PackageLine."No.");
      ExportSourceLine."Source Unit of Measure" := PackageLine."Unit of Measure Code";
      ExportSourceLine.VALIDATE("Source Quantity",PackageLine.Quantity);

      CASE CurrentExportDocSetup."Export Doc. Weight As" OF
        CurrentExportDocSetup."Export Doc. Weight As"::"Actual Weight":
          ExportSourceLine.VALIDATE(Weight,PackageLine.GetWeight);
        CurrentExportDocSetup."Export Doc. Weight As"::"Package Weight Equally":
          ExportSourceLine.VALIDATE(Weight,(PackageWeight/TotalItems) * PackageLine.Quantity);
        CurrentExportDocSetup."Export Doc. Weight As"::"Package Weight by Value":
          IF TotalValue = 0 THEN
            ExportSourceLine.VALIDATE(Weight,PackageWeight)
          ELSE
            ExportSourceLine.VALIDATE(Weight,(PackageWeight/TotalValue) * PackageLine."Value (Price)");
      END;

      IF ExportSourceLine.Description = '' THEN
        ExportSourceLine.Description :=
          COPYSTR(PackageLine.Description,1,MAXSTRLEN(ExportSourceLine.Description));
      ExportSourceLine."Variant Code" := PackageLine."Variant Code";

      ExportSourceLine."Source Type" := ExportDocSourceType;
      ExportSourceLine."Source SubType" := ExportDocSourceSubType;
      ExportSourceLine."Source ID" := ExportDocSourceID;

      ExportSourceLine."Value USD" := PackageLine."Value (Price)";
      ExportSourceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetExportDocSetup@1240030005();
    BEGIN
      IF NOT ExportDocSetupRetrieved THEN BEGIN
        ExportDocSetup.GET;
        ExportDocSetupRetrieved := TRUE;
      END;
    END;

    PROCEDURE ClearCommodityInfo@1240030007();
    BEGIN
      "Producer of Good Indicator" := "Producer of Good Indicator"::" ";
      "RVC in Net Cost Method" := FALSE;
      "Preference Criteria" := "Preference Criteria"::" ";
      "Country of Origin ISO 2 Char" := '';
      "Country of Origin Code" := '';
      "Value USD" := 0;
      Description := '';
      "Schedule B Code" := '';
      "Schedule B Quantity 1" := 0;
      "Schedule B Unit of Measure 1" := '';
      "Schedule B Quantity 2" := 0;
      "Schedule B Unit of Measure 2" := '';
      "Weight (KGS)" := 0;
      Weight := 0;
      "Source Quantity" := 0;
      "Source Unit of Measure" := '';
      "Source Quantity (Base)" := 0;
      "Source Unit of Measure (Base)" := '';
      "Commodity Code Type" := "Commodity Code Type"::"Schedule B";
      "Export Control Class No." := '';
      Origin := '';
    END;

    PROCEDURE CreateSourceLnsFromInnerPkg@1240020001(PackageNo@1240020000 : Code[10];ExportSourceDocType@1240020001 : Integer;ExportSourceDocSubType@1240020002 : Integer;ExportSourceDocID@1240020003 : Code[20];CurrentShippingSetup@1240020004 : Record 14000707;CurrentExportDocSetup@1240020005 : Record 14000991);
    VAR
      Package@1240020006 : Record 14000701;
      PackageLine@1240020007 : Record 14000702;
      PackageWeight@1240020008 : Decimal;
      TotalItems@1240020010 : Integer;
      TotalValue@1240020009 : Decimal;
    BEGIN
      Package.GET(PackageNo);
      Package.ClearTotalValueFields;
      PackageWeight := Package.GetWeight;

      PackageLine.RESET;
      PackageLine.SETRANGE("Package No.",Package."No.");
      PackageLine.SETFILTER(
        Type,'%1|%2|%3',PackageLine.Type::"Account (G/L)",PackageLine.Type::Item,
        PackageLine.Type::Resource);
      PackageLine.SETFILTER("No.",'<>%1','');
      PackageLine.SETFILTER(Quantity,'>%1',0);
      IF PackageLine.FIND('-') THEN BEGIN
        IF ExportDocSetup."Export Doc. Weight As" <> ExportDocSetup."Export Doc. Weight As"::"Actual Weight"
        THEN BEGIN
          REPEAT
            TotalItems := TotalItems + PackageLine.Quantity;
            TotalValue := TotalValue + PackageLine."Value (Price)";
          UNTIL PackageLine.NEXT = 0;
          PackageLine.FIND('-');
        END;

        REPEAT
          ExportSourceLineFromPackage(
            PackageLine,Package."Export Document No.",ExportSourceDocType,ExportSourceDocSubType,ExportSourceDocID,
            CurrentShippingSetup,ExportDocSetup,PackageWeight,TotalItems,TotalValue);
        UNTIL PackageLine.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

