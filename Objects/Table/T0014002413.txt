OBJECT Table 14002413 E.D.I. Inventory Advice Header
{
  OBJECT-PROPERTIES
  {
    Date=01/07/16;
    Time=12:00:00 PM;
    Version List=SE0.60.10;
  }
  PROPERTIES
  {
    DataCaptionFields=No.;
    OnInsert=BEGIN
               EDISetup.GET;

               IF "No." = '' THEN BEGIN
                 TestNoSeries;
                 NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Document Date","No.","No. Series");
               END;

               "Document Date" := WORKDATE;
               "Effective Date" := WORKDATE;
               "Inventory Advice Created" := TRUE;
               "Created Date" := TODAY;
               "Created Time" := TIME;
               "User ID" := USERID;
             END;

    OnModify=BEGIN
               TESTFIELD(Released,FALSE);

               "User ID" := USERID;
               Modified := WORKDATE;
             END;

    OnDelete=BEGIN
               TESTFIELD(Released,FALSE);

               InventoryAdviceLine.RESET;
               InventoryAdviceLine.SETRANGE("Inventory Advice No.","No.");
               InventoryAdviceLine.SETRANGE(Type,Type);
               InventoryAdviceLine.DELETEALL;
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLENAME);
             END;

    CaptionML=ENU=E.D.I. Inventory Advice Header;
    LookupPageID=Page14002423;
    DrillDownPageID=Page14002423;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code10        ;CaptionML=ENU=No. }
    { 2   ;   ;Trade Partner No.   ;Code20        ;TableRelation="E.D.I. Trade Partner".No.;
                                                   CaptionML=ENU=Trade Partner No. }
    { 3   ;   ;EDI Internal Doc. No.;Code10       ;TableRelation="E.D.I. Receive Document Hdr.";
                                                   CaptionML=ENU=EDI Internal Doc. No.;
                                                   Editable=No }
    { 4   ;   ;Released            ;Boolean       ;CaptionML=ENU=Released;
                                                   Editable=No }
    { 5   ;   ;Posted              ;Boolean       ;CaptionML=ENU=Posted }
    { 6   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU="  ,Location,Adjustment,Price Catalog";
                                                   OptionString=[  ,Location,Adjustment,Price Catalog] }
    { 11  ;   ;Document Date       ;Date          ;CaptionML=ENU=Document Date }
    { 12  ;   ;Transaction Purpose Code;Option    ;CaptionML=ENU=Transaction Purpose Code;
                                                   OptionCaptionML=ENU=Original,Duplicate,Cancellation,Add,Delete;
                                                   OptionString=Original,Duplicate,Cancellation,Add,Delete }
    { 13  ;   ;Report Type Code    ;Code2         ;CaptionML=ENU=Report Type Code }
    { 14  ;   ;Advice Begin Date   ;Date          ;CaptionML=ENU=Advice Begin Date }
    { 15  ;   ;Advice End Date     ;Date          ;CaptionML=ENU=Advice End Date }
    { 16  ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer.No.;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Released,FALSE);

                                                                GetCustomer("Sell-to Customer No.");

                                                                "Sell-to Customer Name" := Customer.Name;
                                                                "Sell-to Customer Name 2" := Customer."Name 2";
                                                                "Sell-to Address" := Customer.Address;
                                                                "Sell-to Address 2" := Customer."Address 2";
                                                                "Sell-to City" := Customer.City;
                                                                "Sell-to Post Code" := Customer."Post Code";
                                                                "Sell-to State" := Customer.County;
                                                                "Sell-to Country Code" := Customer."Country/Region Code";
                                                                IF Customer."Location Code" <> '' THEN
                                                                  VALIDATE("Location Code",Customer."Location Code");
                                                              END;

                                                   CaptionML=ENU=Sell-to Customer No. }
    { 17  ;   ;Sell-to Customer Name;Text50       ;CaptionML=ENU=Sell-to Customer Name }
    { 18  ;   ;Sell-to Customer Name 2;Text50     ;CaptionML=ENU=Sell-to Customer Name 2 }
    { 19  ;   ;Sell-to Address     ;Text50        ;CaptionML=ENU=Sell-to Address }
    { 20  ;   ;Sell-to Address 2   ;Text50        ;CaptionML=ENU=Sell-to Address 2 }
    { 21  ;   ;Sell-to City        ;Text30        ;CaptionML=ENU=Sell-to City }
    { 22  ;   ;Sell-to State       ;Text30        ;CaptionML=ENU=Sell-to State }
    { 23  ;   ;Sell-to Post Code   ;Code20        ;CaptionML=ENU=Sell-to Post Code }
    { 24  ;   ;Sell-to Country Code;Code10        ;CaptionML=ENU=Sell-to Country Code }
    { 25  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Released,FALSE);

                                                                GetShiptoAddress("Sell-to Customer No.","Ship-to Code");

                                                                "Ship-to Name" := ShiptoAddress.Name;
                                                                "Ship-to Name 2" := ShiptoAddress."Name 2";
                                                                "Ship-to Address" := ShiptoAddress.Address;
                                                                "Ship-to Address 2" := ShiptoAddress."Address 2";
                                                                "Ship-to City" := ShiptoAddress.City;
                                                                "Ship-to Post Code" := ShiptoAddress."Post Code";
                                                                "Ship-to State" := ShiptoAddress.County;
                                                                "Ship-to Country Code" := ShiptoAddress."Country/Region Code";
                                                                IF ShiptoAddress."Location Code" <> '' THEN
                                                                  VALIDATE("Location Code",ShiptoAddress."Location Code")
                                                                ELSE BEGIN
                                                                  Customer.GET("Sell-to Customer No.");
                                                                  VALIDATE("Location Code",Customer."Location Code");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Ship-to Code }
    { 26  ;   ;Ship-to Name        ;Text50        ;CaptionML=ENU=Ship-to Name }
    { 27  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=ENU=Ship-to Name 2 }
    { 28  ;   ;Ship-to Address     ;Text50        ;CaptionML=ENU=Ship-to Address }
    { 29  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=ENU=Ship-to Address 2 }
    { 30  ;   ;Ship-to City        ;Text30        ;CaptionML=ENU=Ship-to City }
    { 31  ;   ;Ship-to State       ;Text30        ;CaptionML=ENU=Ship-to State }
    { 32  ;   ;Ship-to Post Code   ;Code20        ;CaptionML=ENU=Ship-to Post Code }
    { 33  ;   ;Ship-to Country Code;Code10        ;CaptionML=ENU=Ship-to Country Code }
    { 34  ;   ;No. Series          ;Code10        ;CaptionML=ENU=No. Series }
    { 40  ;   ;Sell-to External No.;Code20        ;CaptionML=ENU=Sell-to External No. }
    { 41  ;   ;Ship-to External No.;Code20        ;CaptionML=ENU=Ship-to External No. }
    { 42  ;   ;Inventory Advice Created;Boolean   ;CaptionML=ENU=Inventory Advice Created;
                                                   Editable=No }
    { 43  ;   ;Created Date        ;Date          ;CaptionML=ENU=Created Date;
                                                   Editable=No }
    { 44  ;   ;Created Time        ;Time          ;CaptionML=ENU=Created Time;
                                                   Editable=No }
    { 45  ;   ;EDI Inventory Advice Generated;Boolean;
                                                   CaptionML=ENU=EDI Inventory Advice Generated;
                                                   Editable=No }
    { 46  ;   ;Generated Date      ;Date          ;CaptionML=ENU=Generated Date;
                                                   Editable=No }
    { 47  ;   ;Generated Time      ;Time          ;CaptionML=ENU=Generated Time;
                                                   Editable=No }
    { 48  ;   ;Version             ;Integer       ;CaptionML=ENU=Version;
                                                   Editable=No }
    { 49  ;   ;Location Code       ;Code10        ;TableRelation=Location.Code;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Released,FALSE);

                                                                GetLocation("Location Code");

                                                                "Location Name" := Location.Name;
                                                                "Location Name 2" := Location."Name 2";
                                                                "Location Address" := Location.Address;
                                                                "Location Address 2" := Location."Address 2";
                                                                "Location City" := Location.City;
                                                                "Location Post Code" := Location."Post Code";
                                                                "Location County" := Location.County;
                                                                "Location Country Code" := Location."Country/Region Code";
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 50  ;   ;Location Name       ;Text50        ;CaptionML=ENU=Location Name }
    { 51  ;   ;Location Address    ;Text50        ;CaptionML=ENU=Location Address }
    { 52  ;   ;Location Address 2  ;Text50        ;CaptionML=ENU=Location Address 2 }
    { 53  ;   ;Location City       ;Text30        ;CaptionML=ENU=Location City }
    { 54  ;   ;Location County     ;Text30        ;CaptionML=ENU=Location County }
    { 55  ;   ;Location Post Code  ;Code20        ;CaptionML=ENU=Location Post Code }
    { 56  ;   ;Location Country Code;Code10       ;CaptionML=ENU=Location Country Code }
    { 57  ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Released,FALSE);

                                                                GetVendor("Buy-from Vendor No.");

                                                                "Buy-from Vendor No." := Vendor.Name;
                                                                "Buy-from Vendor Name 2" := Vendor."Name 2";
                                                                "Buy-from Address" := Vendor.Address;
                                                                "Buy-from Address 2" := Vendor."Address 2";
                                                                "Buy-from City" := Vendor.City;
                                                                "Buy-from Post Code" := Vendor."Post Code";
                                                                "Buy-from County" := Vendor.County;
                                                                "Buy-from Country Code" := Vendor."Country/Region Code";
                                                              END;

                                                   CaptionML=ENU=Buy-from Vendor No. }
    { 58  ;   ;Buy-from Vendor Name;Text50        ;CaptionML=ENU=Buy-from Vendor Name }
    { 59  ;   ;Buy-from Vendor Name 2;Text50      ;CaptionML=ENU=Buy-from Vendor Name 2 }
    { 60  ;   ;Buy-from Address    ;Text50        ;CaptionML=ENU=Buy-from Address }
    { 61  ;   ;Buy-from Address 2  ;Text50        ;CaptionML=ENU=Buy-from Address 2 }
    { 62  ;   ;Buy-from City       ;Text30        ;CaptionML=ENU=Buy-from City }
    { 63  ;   ;Buy-from County     ;Code30        ;CaptionML=ENU=Buy-from County }
    { 64  ;   ;Buy-from Country Code;Code10       ;CaptionML=ENU=Buy-from Country Code }
    { 65  ;   ;Buy-from Post Code  ;Code20        ;CaptionML=ENU=Buy-from Post Code }
    { 66  ;   ;Location Name 2     ;Text50        ;CaptionML=ENU=Location Name 2 }
    { 67  ;   ;Suggested Item Journal Created;Boolean;
                                                   CaptionML=ENU=Suggested Item Journal Created;
                                                   Editable=No }
    { 68  ;   ;Available Quantity by Location;Boolean;
                                                   CaptionML=ENU=Available Quantity by Location }
    { 69  ;   ;Override Negative Availability;Boolean;
                                                   CaptionML=ENU=Override Negative Availability }
    { 70  ;   ;Receipt Quantity by Location;Boolean;
                                                   CaptionML=ENU=Receipt Quantity by Location }
    { 71  ;   ;Allocated Available Quantity %;Decimal;
                                                   CaptionML=ENU=Allocated Available Quantity % Override;
                                                   DecimalPlaces=0:5 }
    { 72  ;   ;Allocated Receipt Quantity %;Decimal;
                                                   CaptionML=ENU=Allocated Receipt Quantity % Overrided;
                                                   DecimalPlaces=0:5 }
    { 73  ;   ;Sales Quote No.     ;Code20        ;CaptionML=ENU=Sales Quote No. }
    { 75  ;   ;Catalog Version No. ;Code20        ;CaptionML=ENU=Catalog Version No. }
    { 76  ;   ;Effective Date      ;Date          ;CaptionML=ENU=Effective Date }
    { 77  ;   ;Description         ;Text80        ;CaptionML=ENU=Description }
    { 78  ;   ;EDI Price Catalog Generated;Boolean;CaptionML=ENU=EDI Price Catalog Generated;
                                                   Editable=No }
    { 79  ;   ;Document No.        ;Code30        ;CaptionML=ENU=Document No. }
    { 200 ;   ;User ID             ;Code50        ;CaptionML=ENU=User ID;
                                                   Editable=No }
    { 201 ;   ;Created             ;Date          ;CaptionML=ENU=Created;
                                                   Editable=No }
    { 202 ;   ;Modified            ;Date          ;CaptionML=ENU=Modified;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.,Type                                ;Clustered=Yes }
    {    ;Trade Partner No.,EDI Internal Doc. No.  }
    {    ;Document Date                            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1240030000 : TextConst 'ENU=You cannot rename a %1.';
      Customer@1240030005 : Record 18;
      Location@1240020000 : Record 14;
      Vendor@1240020002 : Record 23;
      EDISetup@1240030001 : Record 14002367;
      InventoryAdviceHdr@1240030004 : Record 14002413;
      InventoryAdviceLine@1240030002 : Record 14002414;
      ShiptoAddress@1240030006 : Record 222;
      NoSeriesMgt@1240030003 : Codeunit 396;
      Text002@1240030010 : TextConst 'ENU=Customer %1 is not set up with an Active EDI transaction %2.';
      Text003@1240030009 : TextConst 'ENU=Lines Exist.';
      Text004@1240030008 : TextConst 'ENU=Delete lines and continue?';
      Text005@1240030007 : TextConst 'ENU=Entries not created.';
      Text006@1240030012 : TextConst 'ENU=Entries were created on %1.  Do you want to recreate?  Existing lines will be deleted.';
      EDISetupRetrieved@1240020001 : Boolean;

    PROCEDURE AssistEdit@1(OldInventoryAdvice@1240030001 : Record 14002413) Resp@1240030000 : Boolean;
    BEGIN
      WITH InventoryAdviceHdr DO BEGIN
        InventoryAdviceHdr := Rec;
        EDISetup.GET;
        TestNoSeries;
        IF NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldInventoryAdvice."No. Series","No. Series") THEN BEGIN
          TestNoSeries;
          NoSeriesMgt.SetSeries("No.");
          Rec := InventoryAdviceHdr;
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE TestNoSeries@6() : Boolean;
    BEGIN
      CASE Type OF
        Type::"  ":
          EDISetup.TESTFIELD("Inventory Advice Nos.");
        Type::Location:
          EDISetup.TESTFIELD("Location Inventory Advice Nos.");
        Type::Adjustment:
          EDISetup.TESTFIELD("Inventory Adjustment Nos.");
        Type::"Price Catalog":
          EDISetup.TESTFIELD("Price Catalog Nos.");
      END;
    END;

    LOCAL PROCEDURE GetNoSeriesCode@9() : Code[10];
    BEGIN
      CASE Type OF
        Type::"  ":
          EXIT(EDISetup."Inventory Advice Nos.");
        Type::Location:
          EXIT(EDISetup."Location Inventory Advice Nos.");
        Type::Adjustment:
          EXIT(EDISetup."Inventory Adjustment Nos.");
        Type::"Price Catalog":
          EXIT(EDISetup."Price Catalog Nos.");
      END;
    END;

    PROCEDURE GetEDISetup@1240020002();
    BEGIN
      IF NOT EDISetupRetrieved THEN BEGIN
        EDISetup.GET;
        EDISetupRetrieved := TRUE;
      END;
    END;

    LOCAL PROCEDURE GetCustomer@2(CustNo@1000 : Code[20]);
    BEGIN
      IF CustNo <> '' THEN BEGIN
        IF CustNo <> Customer."No." THEN
          Customer.GET(CustNo);
      END ELSE
        CLEAR(Customer);
    END;

    PROCEDURE GetShiptoAddress@1240030000(CustNo@1240030000 : Code[20];ShiptoCode@1240030001 : Code[10]);
    BEGIN
      IF ShiptoCode <> '' THEN BEGIN
        IF ShiptoCode <> ShiptoAddress.Code THEN
          ShiptoAddress.GET(CustNo,ShiptoCode);
        END ELSE
          CLEAR(ShiptoAddress);
    END;

    LOCAL PROCEDURE GetLocation@1240020000(LocationCode@1000 : Code[20]);
    BEGIN
      IF LocationCode <> '' THEN BEGIN
        IF LocationCode <> Location.Code THEN
          Location.GET(LocationCode);
      END ELSE
        CLEAR(Location);
    END;

    LOCAL PROCEDURE GetVendor@1240020001(VendorNo@1000 : Code[20]);
    BEGIN
      IF VendorNo <> '' THEN BEGIN
        IF VendorNo <> Vendor."No." THEN
          Vendor.GET(VendorNo);
      END ELSE
        CLEAR("Buy-from Vendor No.");
    END;

    PROCEDURE ClearAdviceLines@1240030005() : Boolean;
    VAR
      EDIDocument@1240030003 : Record 14002353;
      ConfirmationMessage@1240030002 : Boolean;
      AdviceCreated@1240030001 : Boolean;
      NavisionDocument@1240020000 : Code[10];
    BEGIN
      ConfirmationMessage := TRUE;
      AdviceCreated := FALSE;

      CASE Type OF
        Type::"  ":
          NavisionDocument := 'E_INVADV';
        Type::"Price Catalog":
          NavisionDocument := 'E_PRICAT';
      END;

      InventoryAdviceLine.RESET;
      InventoryAdviceLine.SETRANGE("Inventory Advice No.","No.");
      InventoryAdviceLine.SETFILTER("No.",'<>%1','');
      IF InventoryAdviceLine.FIND('-') THEN BEGIN
        EDIDocument.SETRANGE("Trade Partner No.","Trade Partner No.");
        EDIDocument.SETFILTER(
          Status,'%1|%2',EDIDocument.Status::Test,EDIDocument.Status::Production);
        EDIDocument.SETRANGE("Navision Document",NavisionDocument);
        EDIDocument.SETRANGE(Type,EDIDocument.Type::Export);
        IF NOT EDIDocument.FIND('-') THEN
          ERROR(
            Text002,
            "Sell-to Customer No.",NavisionDocument);
        InventoryAdviceHdr.GET(InventoryAdviceLine."Inventory Advice No.",Type);
        AdviceCreated := InventoryAdviceHdr."Inventory Advice Created";
        IF EDIDocument."Reuse Existing InventoryAdvice" THEN
          ConfirmationMessage := EDIDocument."Re-create Confirmation Message";
        IF ConfirmationMessage THEN BEGIN
          CASE TRUE OF
            AdviceCreated:
              BEGIN
                IF NOT CONFIRM(STRSUBSTNO(Text006,InventoryAdviceHdr."Created Date")) THEN
                  ERROR(Text005)
              END;
            ELSE
              BEGIN
                IF NOT CONFIRM(
                  Text003 +
                  Text004) THEN
                    ERROR(Text005);
              END;
          END;
        END;

        IF (EDIDocument."Reuse Existing InventoryAdvice" = FALSE) OR
           ((EDIDocument."Reuse Existing InventoryAdvice" = TRUE) AND
            (EDIDocument."Auto. Reopen on Recreate" = FALSE))
        THEN
          TESTFIELD(Released,FALSE);
      END;

      COMMIT;

      EXIT(TRUE);
    END;

    PROCEDURE CreateAdviceEntries@1240030001();
    BEGIN
      InventoryAdviceHdr.RESET;
      InventoryAdviceHdr.SETRANGE("No.","No.");
      InventoryAdviceHdr.FIND('-');
      InventoryAdviceHdr.TESTFIELD("Sell-to Customer No.");
      InventoryAdviceHdr.TESTFIELD("Trade Partner No.");
      CASE InventoryAdviceHdr.Type OF
        Type::"  ":
          //REPORT.RUN(REPORT::"Create E.D.I. Inventory Advice",TRUE,TRUE,InventoryAdviceHdr);//<TPZ2682>
          REPORT.RUN(REPORT::"E.D.I. Create Inventory Advice",TRUE,TRUE,InventoryAdviceHdr); //<TPZ2682>
        Type::"Price Catalog":
          REPORT.RUN(REPORT::"Create Price Catalog Entries",TRUE,TRUE,InventoryAdviceHdr);
      END;
    END;

    PROCEDURE ViewSuggestedItemJnl@1240020003(EDIInventoryAdviceHdr@1240020002 : Record 14002413);
    VAR
      ItemJournalLine@1240020000 : Record 83;
      EDIRecDocHdr@1240020003 : Record 14002358;
    BEGIN
      EDIRecDocHdr.GET(EDIInventoryAdviceHdr."EDI Internal Doc. No.");

      ItemJournalLine.RESET;
      ItemJournalLine.SETCURRENTKEY("EDI Internal Doc. No.");
      ItemJournalLine.SETRANGE("External Document No.",EDIRecDocHdr."Internal Doc. No.");
      IF NOT ItemJournalLine.FIND('-') THEN
        ItemJournalLine.INIT;
      PAGE.RUN(PAGE::"Item Journal Lines",ItemJournalLine);
    END;

    PROCEDURE CreateInventoryDocHdr@1240020005(DocType@1240020000 : '  ,Location,Adjustment,Price Catalog') DocNo : Code[10];
    BEGIN
      InventoryAdviceHdr.INIT;
      InventoryAdviceHdr."No." := '';
      InventoryAdviceHdr.Type := DocType;
      InventoryAdviceHdr."Advice Begin Date" := WORKDATE;
      InventoryAdviceHdr.INSERT(TRUE);
      DocNo := InventoryAdviceHdr."No.";

      EXIT(DocNo);
    END;

    PROCEDURE SetAdviceStatus@1240020004(VAR EDIInventoryAdviceHdr@1240020001 : Record 14002413;EDIDocument@1240020002 : Record 14002353);
    BEGIN
      EDIInventoryAdviceHdr.GET(EDIInventoryAdviceHdr."No.",EDIInventoryAdviceHdr.Type);
      EDIInventoryAdviceHdr."Available Quantity by Location" :=
        EDIDocument."Available Quantity by Location";
      EDIInventoryAdviceHdr."Allocated Available Quantity %" :=
        EDIDocument."Available Quantity %";
      EDIInventoryAdviceHdr."Allocated Available Quantity %" :=
        EDIDocument."Available Quantity %";
      EDIInventoryAdviceHdr."Receipt Quantity by Location" :=
        EDIDocument."Receipt Quantity by Location";
      EDIInventoryAdviceHdr."Allocated Receipt Quantity %" :=
        EDIDocument."Receipt Quantity %";
      EDIInventoryAdviceHdr.MODIFY;
    END;

    BEGIN
    {
      2019-11-08 TPZ2682 UCHOUHAN
        modified code for inventory Advice report.
    }
    END.
  }
}

