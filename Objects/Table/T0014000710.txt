OBJECT Table 14000710 Label File
{
  OBJECT-PROPERTIES
  {
    Date=12/28/17;
    Time=12:00:00 PM;
    Version List=SE0.60.18;
  }
  PROPERTIES
  {
    CaptionML=ENU=Label File;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=ENU=No. }
    { 2   ;   ;File No.            ;Integer       ;CaptionML=ENU=File No. }
    { 3   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Package,Manifest,Bill of Lading;
                                                   OptionString=Package,Manifest,Bill of Lading }
    { 11  ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 12  ;   ;File Type           ;Option        ;CaptionML=ENU=File Type;
                                                   OptionCaptionML=ENU=" ,Package Label,UCC/UPC,Shipping Agent Label,,,,,,,,UPS,FEDEX,LTL,,Airborne,,USPostal,,,Generic,Item,Resource,USPostal PDF,USPostal Raw,USPostal PDF Raw,USPostal Image,USPostal Image Raw,Pdf,Ext. Carrier Image";
                                                   OptionString=[ ,Package Label,UCC/UPC,Shipping Agent Label,,,,,,,,UPS,FEDEX,LTL,,Airborne,,USPostal,,,Generic,Item,Resource,USPostal PDF,USPostal Raw,USPostal PDF Raw,USPostal Image,USPostal Image Raw,Pdf,Ext. Carrier Image];
                                                   Editable=No }
    { 13  ;   ;File (Binary)       ;BLOB          ;CaptionML=ENU=File (Binary) }
    { 14  ;   ;File Name           ;Text250       ;CaptionML=ENU=File Name;
                                                   Editable=No }
    { 15  ;   ;Printer Port        ;Code100       ;CaptionML=ENU=Printer Port }
    { 16  ;   ;Packing Station Code;Code10        ;TableRelation="Packing Station";
                                                   CaptionML=ENU=Packing Station Code }
    { 17  ;   ;File Not Imported   ;Boolean       ;CaptionML=ENU=File Not Imported }
    { 21  ;   ;Created By          ;Code50        ;TableRelation=User;
                                                   CaptionML=ENU=Created By;
                                                   Editable=No }
    { 22  ;   ;Date Created        ;Date          ;CaptionML=ENU=Date Created;
                                                   Editable=No }
    { 23  ;   ;Time Created        ;Time          ;CaptionML=ENU=Time Created;
                                                   Editable=No }
    { 24  ;   ;No. of Copies Printed;Integer      ;CaptionML=ENU=No. of Copies Printed;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Type,No.,File No.                       ;Clustered=Yes }
    {    ;Type,No.,File Type                       }
    {    ;Date Created                             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PackingStation@1000000000 : Record 14000709;
      CarrierPackingStation@1240030000 : Record 14000729;
      Text001@1001 : TextConst 'ENU=File Type %1 cannot be printed.';

    PROCEDURE PrintLabel@1();
    VAR
      PrinterPort@1000000001 : Code[100];
      LabelFileName@1240030000 : Text[250];
      PrintingImage@1240030001 : Codeunit 37031001;
    BEGIN
      TESTFIELD("File Not Imported",FALSE);
      IF (STRPOS(FORMAT("File Type"),'Raw') > 0) THEN
        ERROR(Text001,"File Type");

      CALCFIELDS("File (Binary)");

      PackingStation.GetPackingStation;
      CarrierPackingStation.GetPackingStation(PackingStation);
      PackingStation.TESTFIELD("Label Buffer File");
      LabelFileName := PackingStation.CalcLabelFileName(PackingStation."Label Buffer File");
      ExportFileBinary(LabelFileName,FALSE);

      IF (PackingStation.Code = "Packing Station Code") THEN BEGIN
        IF (STRPOS(FORMAT("File Type"),'PDF') > 0) OR
           (STRPOS(FORMAT("File Type"),'Pdf') > 0) THEN
          PackingStation.PrintPDFFile(
            LabelFileName,"Printer Port",PackingStation."No Label Printer")
        ELSE IF (STRPOS(FORMAT("File Type"),'Image') > 0) THEN BEGIN
          ExportFileBinary("File Name",FALSE);
          // >> ECS
          IF NOT(PackingStation."No Label Printer") THEN BEGIN
            GetExtCarrierPrinterPort(Rec,PrinterPort);
            IF PrinterPort = '' THEN
              PrinterPort := CarrierPackingStation."USPostal Label Printer Port";
            PrintingImage.PrintImage("File Name",PrinterPort);
          END;
          // << ECS
        END ELSE
          PackingStation.PrintLabelFile(
            LabelFileName,"Printer Port",PackingStation."No Label Printer",
            PackingStation."Auto Delete Label Buffer File");

        IF NOT PackingStation."No Label Printer" THEN BEGIN
          "No. of Copies Printed" := "No. of Copies Printed" + 1;
          MODIFY;
        END;
      END ELSE BEGIN
        PrinterPort := '';
        CASE "File Type" OF
          "File Type"::"Package Label":
            BEGIN
              PackingStation.TESTFIELD("Std. Pack. Label Printer Port");
              PrinterPort := PackingStation."Std. Pack. Label Printer Port";
            END;
          "File Type"::"UCC/UPC":
            BEGIN
              PackingStation.TESTFIELD("UCC/UPC Label Printer Port");
              PrinterPort := PackingStation."UCC/UPC Label Printer Port";
            END;
          "File Type"::UPS:
            BEGIN
              CarrierPackingStation.TESTFIELD("UPS Label Printer Port");
              PrinterPort := CarrierPackingStation."UPS Label Printer Port";
            END;
          "File Type"::FEDEX:
            BEGIN
              CarrierPackingStation.TESTFIELD("FedEx Label Printer Port");
              PrinterPort := CarrierPackingStation."FedEx Label Printer Port";
            END;
          "File Type"::LTL:
            BEGIN
              PackingStation.TESTFIELD("Std. Pack. Label Printer Port");
              PrinterPort := PackingStation."Std. Pack. Label Printer Port";
            END;
          "File Type"::Generic:
            BEGIN
              CarrierPackingStation.TESTFIELD("Generic Label Printer Port");
              PrinterPort := CarrierPackingStation."Generic Label Printer Port";
            END;
          "File Type"::"4":
            BEGIN
              CarrierPackingStation.TESTFIELD("USPS Label Printer Port");
              PrinterPort := CarrierPackingStation."USPS Label Printer Port";
            END;
          "File Type"::"5":
            BEGIN
              CarrierPackingStation.TESTFIELD("Airborne Label Printer Port");
              PrinterPort := CarrierPackingStation."Airborne Label Printer Port";
            END;
          "File Type"::"6":
            BEGIN
              CarrierPackingStation.TESTFIELD("DHL Label Printer Port");
              PrinterPort := CarrierPackingStation."DHL Label Printer Port";
            END;
          "File Type"::USPostal:
            BEGIN
              CarrierPackingStation.TESTFIELD("USPostal Label Printer Port");
              PrinterPort := CarrierPackingStation."USPostal Label Printer Port";
            END;
          "File Type"::"18":
            BEGIN
              CarrierPackingStation.TESTFIELD("Rating Label Printer Port");
              PrinterPort := CarrierPackingStation."Rating Label Printer Port";
            END;
          //>> ECS
          ELSE
             GetExtCarrierPrinterPort(Rec,PrinterPort);
          //<< ECS
        END;

        IF PrinterPort <> '' THEN BEGIN
          CASE "File Type" OF
            "File Type"::"USPostal PDF","File Type"::"USPostal PDF Raw":
              PackingStation.PrintPDFFile(
                LabelFileName,"Printer Port",PackingStation."No Label Printer");
            // >> ECS
            "File Type"::"Ext. Carrier Image":
              BEGIN
                ExportFileBinary("File Name",FALSE);
                PrintingImage.PrintImage("File Name",PrinterPort);
              END;
            // << ECS
            ELSE
              PackingStation.PrintLabelFile(
                LabelFileName,PrinterPort,PackingStation."No Label Printer",
                PackingStation."Auto Delete Label Buffer File");
          END;

          IF NOT PackingStation."No Label Printer" THEN BEGIN
            "No. of Copies Printed" := "No. of Copies Printed" + 1;
            MODIFY;
          END;
        END;
      END;
    END;

    PROCEDURE ImportFileBinary@1240030000(ImportFileName@1240030000 : Text[1000];CommonDialog@1240030001 : Boolean);
    VAR
      ImportFile@1240040002 : File;
      NVInStream@1240040001 : InStream;
      NVOutStream@1240040000 : OutStream;
    BEGIN
      IF ISSERVICETIER THEN BEGIN
        ImportFile.WRITEMODE(FALSE);
        ImportFile.TEXTMODE(FALSE);
        ImportFile.OPEN(ImportFileName);
        ImportFile.CREATEINSTREAM(NVInStream);
        "File (Binary)".CREATEOUTSTREAM(NVOutStream);
        COPYSTREAM(NVOutStream,NVInStream);
      END ELSE
        "File (Binary)".IMPORT(ImportFileName,CommonDialog);
    END;

    PROCEDURE ExportFileBinary@1240030001(ExportFileName@1240030001 : Text[1000];CommonDialog@1240030000 : Boolean);
    VAR
      ExportFile@1240040002 : File;
      NVInStream@1240040001 : InStream;
      NVOutStream@1240040000 : OutStream;
    BEGIN
      CALCFIELDS("File (Binary)");

      IF NOT "File (Binary)".HASVALUE THEN
        TESTFIELD("File (Binary)");

      IF ISSERVICETIER THEN BEGIN
        ExportFile.WRITEMODE(TRUE);
        ExportFile.TEXTMODE(FALSE);
        ExportFile.CREATE(ExportFileName);
        "File (Binary)".CREATEINSTREAM(NVInStream);
        ExportFile.CREATEOUTSTREAM(NVOutStream);
        COPYSTREAM(NVOutStream,NVInStream);
        ExportFile.CLOSE;
        IF CommonDialog THEN BEGIN
          PackingStation.GetPackingStation;
          PackingStation.ViewFile(ExportFileName);
        END;
      END ELSE
        "File (Binary)".EXPORT(ExportFileName,CommonDialog);
    END;

    PROCEDURE ViewWithNotepad@2();
    VAR
      LabelFileName@1240030000 : Text[250];
    BEGIN
      TESTFIELD("File Not Imported",FALSE);

      CALCFIELDS("File (Binary)");

      PackingStation.GetPackingStation;
      PackingStation.TESTFIELD("Label Buffer File");
      LabelFileName := PackingStation.CalcLabelFileName(PackingStation."Label Buffer File");
      ExportFileBinary(LabelFileName,FALSE);
      PackingStation.ViewFile(LabelFileName);
    END;

    PROCEDURE PrintPDFFile@1240020001();
    VAR
      PdfFileName@1240030000 : Text[250];
    BEGIN
      TESTFIELD("File Not Imported",FALSE);

      CALCFIELDS("File (Binary)");

      PackingStation.GetPackingStation;

      PackingStation.TESTFIELD("Label Buffer File");
      PdfFileName := PackingStation.CalcLabelFileName(PackingStation."Label Buffer File");
      ExportFileBinary(PdfFileName,FALSE);
      PackingStation.PrintPDFFile(PdfFileName,'',FALSE);
    END;

    [Business]
    LOCAL PROCEDURE GetExtCarrierPrinterPort@1240020000(Rec@1240020001 : Record 14000710;VAR PrinterPort@1240020000 : Code[100]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

