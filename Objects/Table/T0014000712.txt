OBJECT Table 14000712 Manifest Header
{
  OBJECT-PROPERTIES
  {
    Date=06/28/17;
    Time=12:00:00 PM;
    Version List=SE0.60.03;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               GetShippingSetup;
               IF "No." = '' THEN BEGIN
                 ShippingSetup.TESTFIELD("Manifest Nos.");
                 "No." := NoSeriesMgt.GetNextNo(ShippingSetup."Manifest Nos.",WORKDATE,TRUE);
               END;

               IF "Pickup Date" = 0D THEN
                 "Pickup Date" := WORKDATE;

               IF ShippingSetup."Location Packing" AND ("Packing Station" = '') THEN BEGIN
                 PackingStation.GetPackingStation;
                 "Location Code" := PackingStation."Location Code"
               END;
             END;

    OnModify=BEGIN
               TESTFIELD(Posted,FALSE);
             END;

    OnDelete=BEGIN
               TESTFIELD(Posted,FALSE);
               TESTFIELD("UPS Processing Required",FALSE);
               TESTFIELD("FedEx Processing Required",FALSE);
               TESTFIELD("LTL Processing Required",FALSE);
               TESTFIELD("Generic Processing Required",FALSE);
               TESTFIELD("USPS Processing Required",FALSE);
               TESTFIELD("Airborne Processing Required",FALSE);
               TESTFIELD("DHL Processing Required",FALSE);
               TESTFIELD("USPostal Processing Required",FALSE);

               // Label Files are not deleted by Purpose

               ManifestLine.RESET;
               ManifestLine.SETRANGE("Manifest No.","No.");
               ManifestLine.DELETEALL;
             END;

    OnRename=BEGIN
               ERROR(Text001);
             END;

    CaptionML=ENU=Manifest Header;
    LookupPageID=Page14000698;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=ENU=No. }
    { 11  ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 12  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  VALIDATE("Shipping Agent Account",'');
                                                              END;

                                                   CaptionML=ENU=Shipping Agent Code }
    { 13  ;   ;Shipping Agent Account;Code20      ;OnValidate=BEGIN
                                                                IF "Shipping Agent Account" = '' THEN
                                                                  EXIT;

                                                                TESTFIELD("Shipping Agent Code");
                                                                ShippingAgent.GET("Shipping Agent Code");
                                                                GetShippingSetup;
                                                                ShipperTypeMgt.ManifestHeaderValidateAcctNo(Rec,ShippingAgent,ShippingSetup);
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Shipping Agent Code");
                                                              ShippingAgent.GET("Shipping Agent Code");
                                                              GetShippingSetup;
                                                              ShipperTypeMgt.ManifestHeaderLookupAccountNo(Rec,ShippingAgent,ShippingSetup);
                                                            END;

                                                   CaptionML=ENU=Shipping Agent Account }
    { 14  ;   ;Pickup Date         ;Date          ;CaptionML=ENU=Pickup Date }
    { 15  ;   ;Posted              ;Boolean       ;CaptionML=ENU=Posted;
                                                   Editable=No }
    { 16  ;   ;Include Bill of Ladings;Boolean    ;CaptionML=ENU=Include Bill of Ladings }
    { 17  ;   ;Packing Station     ;Code10        ;TableRelation="Packing Station";
                                                   OnValidate=BEGIN
                                                                IF "Packing Station" <> '' THEN BEGIN
                                                                  GetShippingSetup;
                                                                  IF ShippingSetup."Location Packing" AND ("Packing Station" <> '') THEN BEGIN
                                                                    PackingStation.GET("Packing Station");
                                                                    "Location Code" := PackingStation."Location Code"
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Packing Station }
    { 18  ;   ;Closed By           ;Code50        ;TableRelation=User;
                                                   CaptionML=ENU=Closed By;
                                                   Editable=No }
    { 19  ;   ;Closing Date        ;Date          ;CaptionML=ENU=Closing Date;
                                                   Editable=No }
    { 20  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                IF "Location Code" <> '' THEN BEGIN
                                                                  GetShippingSetup;
                                                                  ShippingSetup.TESTFIELD("Location Packing");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Location Code;
                                                   Editable=No }
    { 21  ;   ;Weight              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Manifest Line".Weight WHERE (Manifest No.=FIELD(No.),
                                                                                                 Type=FILTER(<Summary)));
                                                   CaptionML=ENU=Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 22  ;   ;Volume              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Manifest Line".Volume WHERE (Manifest No.=FIELD(No.),
                                                                                                 Type=FILTER(<Summary)));
                                                   CaptionML=ENU=Volume;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 23  ;   ;Value               ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Manifest Line".Value WHERE (Manifest No.=FIELD(No.),
                                                                                                Type=FILTER(<Summary)));
                                                   CaptionML=ENU=Value;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 24  ;   ;Shipping Cost       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Manifest Line"."Shipping Cost" WHERE (Manifest No.=FIELD(No.),
                                                                                                          Type=FILTER(<Summary)));
                                                   CaptionML=ENU=Shipping Cost;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 25  ;   ;Shipping Charge     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Manifest Line"."Shipping Charge" WHERE (Manifest No.=FIELD(No.),
                                                                                                            Type=FILTER(<Summary)));
                                                   CaptionML=ENU=Shipping Charge;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 26  ;   ;Packages Shipped    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Manifest Line".One WHERE (Manifest No.=FIELD(No.),
                                                                                              Type=FILTER(<Summary)));
                                                   CaptionML=ENU=Packages Shipped;
                                                   DecimalPlaces=0:0;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 14000761;;UPS Processing Required;Boolean   ;CaptionML=ENU=UPS Processing Required;
                                                   Editable=No }
    { 14000781;;FedEx Processing Required;Boolean ;CaptionML=ENU=FedEx Processing Required;
                                                   Editable=No }
    { 14000801;;LTL Processing Required;Boolean   ;CaptionML=ENU=LTL Processing Required;
                                                   Editable=No }
    { 14000861;;Generic Processing Required;Boolean;
                                                   CaptionML=ENU=Generic Processing Required;
                                                   Editable=No }
    { 14000881;;USPS Processing Required;Boolean  ;CaptionML=ENU=USPS Processing Required;
                                                   Editable=No }
    { 14000941;;Airborne Processing Required;Boolean;
                                                   CaptionML=ENU=Airborne Processing Required;
                                                   Editable=No }
    { 14050401;;DHL Processing Required;Boolean   ;CaptionML=ENU=DHL Processing Required;
                                                   Editable=No }
    { 14050451;;Rating Processing Required;Boolean;CaptionML=ENU=Rating Processing Required;
                                                   Editable=No }
    { 14050501;;USPostal Processing Required;Boolean;
                                                   CaptionML=ENU=USPostal Processing Required;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ManifestLine@1000000000 : Record 14000713;
      ShippingSetup@1000000001 : Record 14000707;
      ShippingAgent@1000000002 : Record 291;
      PackingStation@1240030000 : Record 14000709;
      NoSeriesMgt@1000000007 : Codeunit 396;
      Text001@1001 : TextConst 'ENU=Cannot be renamed.';
      Text002@1002 : TextConst 'ENU=Label File cannot be blank.';
      Text003@1003 : TextConst 'ENU=%1 do not exists.';
      ShipperTypeMgt@1240030003 : Codeunit 14000711;
      ShippingSetupRetrieved@1240030002 : Boolean;

    PROCEDURE GetSuggestedLines@1();
    VAR
      Package@1000000000 : Record 14000701;
      PostedPackage@1000000001 : Record 14000704;
      BillOfLading@1000000002 : Record 14000822;
    BEGIN
      TESTFIELD("No.");
      TESTFIELD(Posted,FALSE);
      TESTFIELD("UPS Processing Required",FALSE);
      TESTFIELD("FedEx Processing Required",FALSE);
      TESTFIELD("LTL Processing Required",FALSE);
      TESTFIELD("Airborne Processing Required",FALSE);
      TESTFIELD("Generic Processing Required",FALSE);
      TESTFIELD("DHL Processing Required",FALSE);
      TESTFIELD("USPostal Processing Required",FALSE);

      GetShippingSetup;

      ManifestLine.RESET;
      ManifestLine.SETRANGE("Manifest No.","No.");
      ManifestLine.DELETEALL;

      ManifestLine."Manifest No." := "No.";
      ManifestLine."Line No." := 0;
      ManifestLine.INIT;

      Package.RESET;
      Package.SETCURRENTKEY(
        "Manifest No.","Shipping Agent Code","Shipping Agent Account No.",
        Closed,"Manual Shipment","Exclude From Manifest");
      Package.SETRANGE("Manifest No.",'');
      Package.SETRANGE(Closed,TRUE);
      Package.SETRANGE("Manual Shipment",FALSE);
      Package.SETRANGE("Exclude From Manifest",FALSE);
      IF ShippingSetup."Location Packing" THEN
        Package.SETRANGE("Location Code","Location Code");
      IF "Shipping Agent Code" <> '' THEN BEGIN
        Package.SETRANGE("Shipping Agent Code","Shipping Agent Code");
        IF "Shipping Agent Account" <> '' THEN
          Package.SETRANGE("Shipping Agent Account No.","Shipping Agent Account");
      END;
      IF "Packing Station" <> '' THEN
        Package.SETRANGE("Closed by Packing Station Code","Packing Station");
      Package.SETRANGE("Future Package",FALSE);

      IF Package.FIND('-') THEN
        REPEAT
          ManifestLine.INIT;
          ManifestLine."Line No." := ManifestLine."Line No." + 10000;
          ManifestLine.TransferFromPackage(Package);
          ManifestLine.INSERT;
        UNTIL Package.NEXT = 0;

      PostedPackage.RESET;
      PostedPackage.SETCURRENTKEY(
        "Manifest No.","Shipping Agent Code","Shipping Agent Account No.",
        Closed,"Manual Shipment","Exclude From Manifest");
      PostedPackage.SETRANGE("Manifest No.",'');
      PostedPackage.SETRANGE(Closed,TRUE);
      PostedPackage.SETRANGE("Manual Shipment",FALSE);
      PostedPackage.SETRANGE("Exclude From Manifest",FALSE);
      IF ShippingSetup."Location Packing" THEN
        PostedPackage.SETRANGE("Location Code","Location Code");
      IF "Shipping Agent Code" <> '' THEN BEGIN
        PostedPackage.SETRANGE("Shipping Agent Code","Shipping Agent Code");
        IF "Shipping Agent Account" <> '' THEN
          PostedPackage.SETRANGE("Shipping Agent Account No.","Shipping Agent Account");
      END;
      IF "Packing Station" <> '' THEN
        PostedPackage.SETRANGE("Closed by Packing Station Code","Packing Station");

      IF PostedPackage.FIND('-') THEN
        REPEAT
          ManifestLine.INIT;
          ManifestLine."Line No." := ManifestLine."Line No." + 10000;
          ManifestLine.TransferFromPostedPackage(PostedPackage);
          ManifestLine.INSERT;
        UNTIL PostedPackage.NEXT = 0;

      IF "Include Bill of Ladings" THEN BEGIN
        BillOfLading.RESET;
        BillOfLading.SETCURRENTKEY("Manifest No.");
        BillOfLading.SETRANGE("Manifest No.",'');
        BillOfLading.SETRANGE(Released,TRUE);
        IF ShippingSetup."Location Packing" THEN
          BillOfLading.SETRANGE("Location Code","Location Code");
        IF "Shipping Agent Code" <> '' THEN BEGIN
          BillOfLading.SETRANGE("Shipping Agent Code","Shipping Agent Code");
          IF "Shipping Agent Account" <> '' THEN
            BillOfLading.SETRANGE("Shipping Agent Account No.","Shipping Agent Account");
        END;

        IF BillOfLading.FIND('-') THEN
          REPEAT
            ManifestLine.INIT;
            ManifestLine."Line No." := ManifestLine."Line No." + 10000;
            ManifestLine.TransferFromBillOfLading(BillOfLading);
            ManifestLine.INSERT;
          UNTIL BillOfLading.NEXT = 0;
      END;
    END;

    PROCEDURE InsertLabelFile@29(LabelFileName@1000000000 : Text[250];FileDescription@1000000001 : Text[30];FileType@1000000002 : Integer;PrinterPort@1000000003 : Code[100];PackingStationCode@1000000004 : Code[10];LabelPrinted@1000000005 : Boolean;DoNotImportLabelFile@1240030000 : Boolean) : Integer;
    VAR
      LabelFile@1000000006 : Record 14000710;
    BEGIN
      IF LabelFileName = '' THEN
        ERROR(Text002);

      IF NOT EXISTS(LabelFileName) THEN
        ERROR(Text003,LabelFileName);

      LabelFile.LOCKTABLE;
      LabelFile.RESET;
      LabelFile.SETRANGE(Type,LabelFile.Type::Manifest);
      LabelFile.SETRANGE("No.","No.");
      IF LabelFile.FIND('+') THEN
        LabelFile."File No." := LabelFile."File No." + 1
      ELSE BEGIN
        LabelFile.Type := LabelFile.Type::Manifest;
        LabelFile."No." := "No.";
        LabelFile."File No." := 1;
      END;

      LabelFile.INIT;
      LabelFile.Description := COPYSTR(FileDescription,1,MAXSTRLEN(LabelFile.Description));
      LabelFile."File Type" := FileType;
      LabelFile."File Name" := LabelFileName;
      LabelFile."Printer Port" := PrinterPort;
      LabelFile."Packing Station Code" := PackingStationCode;
      LabelFile."Created By" := USERID;
      LabelFile."Date Created" := TODAY;
      LabelFile."Time Created" := TIME;
      IF LabelPrinted THEN
        LabelFile."No. of Copies Printed" := 1;

      IF NOT DoNotImportLabelFile THEN
        LabelFile.ImportFileBinary(LabelFileName,FALSE)
      ELSE
        LabelFile."File Not Imported" := TRUE;

      LabelFile.INSERT;

      EXIT(LabelFile."File No.");
    END;

    PROCEDURE InsertHazMatFile@1240020000(LabelFileName@1000000000 : Text[250];FileDescription@1000000001 : Text[30];FileType@1000000002 : Integer;PrinterPort@1000000003 : Code[100];PackingStationCode@1000000004 : Code[10];LabelPrinted@1000000005 : Boolean;DoNotImportLabelFile@1240030000 : Boolean) : Integer;
    VAR
      LabelFile@1000000006 : Record 14000710;
    BEGIN
      IF LabelFileName = '' THEN
        ERROR(Text002);

      IF NOT EXISTS(LabelFileName) THEN
        ERROR(Text003,LabelFileName);

      LabelFile.LOCKTABLE;
      LabelFile.RESET;
      LabelFile.SETRANGE(Type,LabelFile.Type::Manifest);
      LabelFile.SETRANGE("No.","No.");
      IF LabelFile.FIND('+') THEN
        LabelFile."File No." := LabelFile."File No." + 1
      ELSE BEGIN
        LabelFile.Type := LabelFile.Type::Manifest;
        LabelFile."No." := "No.";
        LabelFile."File No." := 1;
      END;

      LabelFile.INIT;
      LabelFile.Description := COPYSTR(FileDescription,1,MAXSTRLEN(LabelFile.Description));
      LabelFile."File Type" := FileType;
      LabelFile."File Name" := LabelFileName;
      LabelFile."Printer Port" := PrinterPort;
      LabelFile."Packing Station Code" := PackingStationCode;
      LabelFile."Created By" := USERID;
      LabelFile."Date Created" := TODAY;
      LabelFile."Time Created" := TIME;
      IF LabelPrinted THEN
        LabelFile."No. of Copies Printed" := 1;

      IF NOT DoNotImportLabelFile THEN
        LabelFile.ImportFileBinary(LabelFileName,FALSE)
      ELSE
        LabelFile."File Not Imported" := TRUE;

      LabelFile.INSERT;
      LabelFile.PrintPDFFile;

      EXIT(LabelFile."File No.");
    END;

    PROCEDURE TestAllCarriersProcessed@2();
    BEGIN
      TESTFIELD("UPS Processing Required",FALSE);
      TESTFIELD("FedEx Processing Required",FALSE);
      TESTFIELD("LTL Processing Required",FALSE);
      TESTFIELD("USPS Processing Required",FALSE);
      TESTFIELD("Airborne Processing Required",FALSE);
      TESTFIELD("Generic Processing Required",FALSE);
      TESTFIELD("DHL Processing Required",FALSE);
      TESTFIELD("USPostal Processing Required",FALSE);
    END;

    LOCAL PROCEDURE GetShippingSetup@22();
    BEGIN
      IF NOT ShippingSetupRetrieved THEN BEGIN
        ShippingSetup.GET;
        ShippingSetupRetrieved := TRUE;
      END;
    END;

    BEGIN
    END.
  }
}

