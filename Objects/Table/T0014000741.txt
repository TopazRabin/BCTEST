OBJECT Table 14000741 Rate Shop Header
{
  OBJECT-PROPERTIES
  {
    Date=03/05/18;
    Time=12:00:00 PM;
    Version List=SE0.60.19;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 ShippingSetup.GET;
                 ShippingSetup.TESTFIELD("Rate Shop Nos.");
                 "No." := NoSeriesMgt.GetNextNo(ShippingSetup."Rate Shop Nos.",WORKDATE,TRUE);
               END;

               "Created Date" := TODAY;
               "Created By" := USERID;
             END;

    OnDelete=BEGIN
               RateShopLine.RESET;
               RateShopLine.SETRANGE("Rate Shop No.","No.");
               RateShopLine.DELETEALL(TRUE);

               GetShippingSetup;
               IF ShippingSetup."Enable LTL Interface" THEN BEGIN
                 IF LTLWeightDistr.GET(LTLWeightDistr.Type::"Rate Shop","No.") THEN
                   LTLWeightDistr.DELETE(TRUE);
               END;
             END;

    OnRename=BEGIN
               ERROR(Text001);
             END;

    CaptionML=ENU=Rate Shop Header;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=ENU=No. }
    { 10  ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=ENU=Sell-to Customer No. }
    { 11  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   CaptionML=ENU=Ship-to Code }
    { 12  ;   ;Ship-to Name        ;Text50        ;CaptionML=ENU=Ship-to Name }
    { 13  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=ENU=Ship-to Name 2 }
    { 14  ;   ;Ship-to Address     ;Text50        ;CaptionML=ENU=Ship-to Address }
    { 15  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=ENU=Ship-to Address 2 }
    { 16  ;   ;Ship-to City        ;Text30        ;CaptionML=ENU=Ship-to City }
    { 17  ;   ;Ship-to Contact     ;Text50        ;CaptionML=ENU=Ship-to Contact }
    { 18  ;   ;Ship-to ZIP Code    ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Ship-to ZIP Code }
    { 19  ;   ;Ship-to State       ;Text30        ;CaptionML=ENU=Ship-to State }
    { 20  ;   ;Ship-to Country Code;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Ship-to Country Code }
    { 21  ;   ;Shipment Date       ;Date          ;CaptionML=ENU=Shipment Date }
    { 22  ;   ;Show Below Hundred Weight;Boolean  ;CaptionML=ENU=Show Below Hundred Weight }
    { 23  ;   ;Rate Shop Packing Station Code;Code10;
                                                   TableRelation="Packing Station";
                                                   CaptionML=ENU=Rate Shop Packing Station Code }
    { 24  ;   ;No. of Packages     ;Integer       ;InitValue=1;
                                                   CaptionML=ENU=No. of Packages }
    { 31  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code }
    { 32  ;   ;Value (Cost)        ;Decimal       ;CaptionML=ENU=Value (Cost);
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 33  ;   ;Value (Price)       ;Decimal       ;CaptionML=ENU=Value (Price);
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 34  ;   ;Calculation Weight (LBS);Decimal   ;OnValidate=BEGIN
                                                                GetShippingSetup;
                                                                IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::KGS THEN
                                                                  "Calculation Weight" := ShippingSetup.PoundToKilo("Calculation Weight (LBS)")
                                                                ELSE
                                                                  "Calculation Weight" := "Calculation Weight (LBS)";
                                                              END;

                                                   CaptionML=ENU=Calculation Weight (LBS);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=ENU=Net Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 36  ;   ;Dimmed Weight       ;Decimal       ;CaptionML=ENU=Dimmed Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 37  ;   ;Use Dim Weight      ;Boolean       ;CaptionML=ENU=Use Dim Weight }
    { 38  ;   ;Gross Weight        ;Decimal       ;CaptionML=ENU=Gross Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 39  ;   ;Calculation Weight  ;Decimal       ;OnValidate=BEGIN
                                                                GetShippingSetup;
                                                                IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::KGS THEN
                                                                  "Calculation Weight (LBS)" := ShippingSetup.KiloToPound("Calculation Weight")
                                                                ELSE
                                                                  "Calculation Weight (LBS)" := "Calculation Weight";
                                                              END;

                                                   CaptionML=ENU=Calculation Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 40  ;   ;Override Weight     ;Decimal       ;CaptionML=ENU=Override Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 41  ;   ;Calculation Value   ;Decimal       ;CaptionML=ENU=Calculation Value;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 42  ;   ;Override Value      ;Decimal       ;CaptionML=ENU=Override Value;
                                                   BlankZero=Yes }
    { 44  ;   ;Residential Delivery;Boolean       ;CaptionML=ENU=Residential Delivery }
    { 46  ;   ;Blind Shipment      ;Boolean       ;CaptionML=ENU=Blind Shipment }
    { 47  ;   ;Double Blind Ship-from Cust No;Code20;
                                                   TableRelation=Customer;
                                                   CaptionML=ENU=Double Blind Ship-from Cust No }
    { 48  ;   ;Double Blind Shipment;Boolean      ;CaptionML=ENU=Double Blind Shipment }
    { 50  ;   ;Package No.         ;Code20        ;TableRelation=Package;
                                                   CaptionML=ENU=Package No. }
    { 51  ;   ;Created Date        ;Date          ;CaptionML=ENU=Created Date;
                                                   Editable=No }
    { 52  ;   ;Created By          ;Code50        ;TableRelation=User;
                                                   CaptionML=ENU=Created By;
                                                   Editable=No }
    { 53  ;   ;Calculation Insured Value;Decimal  ;CaptionML=ENU=Calculation Insured Value;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 54  ;   ;Override Insured Value;Decimal     ;CaptionML=ENU=Override Insured Value;
                                                   BlankZero=Yes }
    { 55  ;   ;Volume              ;Decimal       ;CaptionML=ENU=Volume;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 56  ;   ;Override Volume     ;Decimal       ;CaptionML=ENU=Override Volume;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 57  ;   ;Calculation Volume  ;Decimal       ;CaptionML=ENU=Calculation Volume;
                                                   Editable=No }
    { 58  ;   ;Additional Shipping Charge;Decimal ;CaptionML=ENU=Additional Shipping Charge;
                                                   BlankZero=Yes }
    { 59  ;   ;Dimensional Weight  ;Decimal       ;CaptionML=ENU=Dimensional Weight;
                                                   DecimalPlaces=0:5 }
    { 61  ;   ;COD                 ;Boolean       ;CaptionML=ENU=COD }
    { 65  ;   ;COD Amount          ;Decimal       ;CaptionML=ENU=COD Amount;
                                                   BlankZero=Yes }
    { 66  ;   ;COD Cashiers Check  ;Boolean       ;CaptionML=ENU=COD Cashiers Check }
    { 67  ;   ;COD Collection Currency;Code10     ;CaptionML=ENU=COD Collection Currency }
    { 69  ;   ;Shipping Payment Type;Option       ;CaptionML=ENU=Shipping Payment Type;
                                                   OptionCaptionML=ENU=Prepaid,Third Party,Freight Collect,Consignee;
                                                   OptionString=Prepaid,Third Party,Freight Collect,Consignee }
    { 70  ;   ;Shipping Insurance  ;Option        ;CaptionML=ENU=Shipping Insurance;
                                                   OptionCaptionML=ENU=" ,Never,Always";
                                                   OptionString=[ ,Never,Always] }
    { 72  ;   ;Source Type         ;Integer       ;CaptionML=ENU=Source Type }
    { 73  ;   ;Source Subtype      ;Option        ;CaptionML=ENU=Source Subtype;
                                                   OptionCaptionML=ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                   OptionString=0,1,2,3,4,5,6,7,8,9,10 }
    { 74  ;   ;Source ID           ;Code20        ;CaptionML=ENU=Source ID }
    { 7300;   ;Length              ;Decimal       ;CaptionML=ENU=Length;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 7301;   ;Width               ;Decimal       ;CaptionML=ENU=Width;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 7302;   ;Height              ;Decimal       ;CaptionML=ENU=Height;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 7303;   ;Cubage              ;Decimal       ;CaptionML=ENU=Cubage;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 7304;   ;Unit of Measure Weight;Decimal     ;CaptionML=ENU=Unit of Measure Weight;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 7305;   ;Override Dimensions ;Boolean       ;CaptionML=ENU=Override Dimensions }
    { 7306;   ;Override Length     ;Decimal       ;CaptionML=ENU=Override Length;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7307;   ;Override Width      ;Decimal       ;CaptionML=ENU=Override Width;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7308;   ;Override Height     ;Decimal       ;CaptionML=ENU=Override Height;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7309;   ;Calculation Length  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Max("Package Line".Length WHERE (Package No.=FIELD(No.),
                                                                                                Use Unit of measure Dimensions=CONST(Yes)));
                                                   CaptionML=ENU=Calculation Length;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 7310;   ;Calculation Width   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Max("Package Line".Width WHERE (Package No.=FIELD(No.),
                                                                                               Use Unit of measure Dimensions=CONST(Yes)));
                                                   CaptionML=ENU=Calculation Width;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 7311;   ;Calculation Height  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Package Line".Height WHERE (Package No.=FIELD(No.)));
                                                   CaptionML=ENU=Calculation Height;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 14000781;;Shipping Origin Canada;Boolean     }
    { 14000785;;Intra Canadian Service;Boolean     }
    { 14000801;;LTL Freight Type   ;Code10        ;TableRelation="LTL Freight Type";
                                                   CaptionML=ENU=LTL Freight Type }
    { 14000821;;Bill of Lading No. ;Code20        ;TableRelation="Bill of Lading";
                                                   CaptionML=ENU=Bill of Lading No. }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      RateShopLine@1000000000 : Record 14000742;
      ShippingSetup@1000000001 : Record 14000707;
      LTLWeightDistr@1000000004 : Record 14000807;
      NoSeriesMgt@1000000002 : Codeunit 396;
      Shipping@1000000005 : Codeunit 14000701;
      ShippingSetupRetrieved@1000000003 : Boolean;
      Text001@1001 : TextConst 'ENU=Cannot be renamed.';

    PROCEDURE TransferFromSalesHeader@1(FromSalesHeader@1000000000 : Record 36);
    VAR
      SalesLine@1000000001 : Record 37;
      Item@1000000002 : Record 27;
      Resource@1000000004 : Record 156;
      Location@1000000003 : Record 14;
      ItemUnitOfMeasure@1240030008 : Record 5404;
      NetWeight@1000000005 : Decimal;
      GrossWeight@1000000006 : Decimal;
      DimmedWeight@1000000007 : Decimal;
      UOMWeight@1240030003 : Decimal;
      UnitVolume@1000000008 : Decimal;
      LineLength@1240030004 : Decimal;
      LineWidth@1240030005 : Decimal;
      LineHeight@1240030006 : Decimal;
      LineCubage@1240030007 : Decimal;
      LineUOMWeight@1240030009 : Decimal;
      LTLFreightType@1000000009 : Code[10];
      LineQty@1000000010 : Decimal;
      LineQtyBase@1000000011 : Decimal;
      LineValueCost@1240030000 : Decimal;
      LineValuePrice@1240030001 : Decimal;
      PackageAdded@1240030002 : Boolean;
    BEGIN
      ShippingSetup.GET;

      "Source Type" := DATABASE::"Sales Header";
      "Source Subtype" := FromSalesHeader."Document Type";
      "Source ID" := FromSalesHeader."No.";

      "Sell-to Customer No." := FromSalesHeader."Sell-to Customer No.";
      "Ship-to Code" := FromSalesHeader."Ship-to Code";
      "Ship-to Name" := FromSalesHeader."Ship-to Name";
      "Ship-to Name 2" := FromSalesHeader."Ship-to Name 2";
      "Ship-to Address" := FromSalesHeader."Ship-to Address";
      "Ship-to Address 2" := FromSalesHeader."Ship-to Address 2";
      "Ship-to City" := FromSalesHeader."Ship-to City";
      "Ship-to Contact" := FromSalesHeader."Ship-to Contact";
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(FromSalesHeader."Ship-to Post Code");
      "Ship-to State" := FromSalesHeader."Ship-to County";
      "Ship-to Country Code" := FromSalesHeader."Ship-to Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Shipment Date" := FromSalesHeader."Shipment Date";
      COD := FromSalesHeader."COD Payment";
      "Currency Code" := FromSalesHeader."Currency Code";
      IF "Currency Code" = '' THEN
        "Currency Code" := 'USD';
      "Residential Delivery" := FromSalesHeader."Residential Delivery";
      "Blind Shipment" := FromSalesHeader."Blind Shipment";
      "Double Blind Ship-from Cust No" := FromSalesHeader."Double Blind Ship-from Cust No";
      "Double Blind Shipment" := FromSalesHeader."Double Blind Shipment";
      "Shipping Payment Type" := FromSalesHeader."Shipping Payment Type";
      "Shipping Insurance" := FromSalesHeader."Shipping Insurance";
      "Source Type" := DATABASE::"Sales Header";
      "Source Subtype" := FromSalesHeader."Document Type";
      "Source ID" := FromSalesHeader."No.";
      "No. of Packages" := 0;

      IF Location.GET(FromSalesHeader."Location Code") THEN
        "Rate Shop Packing Station Code" := Location."Rate Shop Packing Station";

      "Value (Cost)" := 0;
      "Value (Price)" := 0;
      "Net Weight" := 0;
      "Dimmed Weight" := 0;
      "Gross Weight" := 0;
      Volume := 0;
      Length := 0;
      Width := 0;
      Height := 0;
      Cubage := 0;
      "Unit of Measure Weight" := 0;
      LTLFreightType := '';
      "No. of Packages" := 0;
      PackageAdded := FALSE;
      IF ShippingSetup."Enable LTL Interface" THEN
        IF NOT LTLWeightDistr.GET(LTLWeightDistr.Type::"Rate Shop","No.") THEN BEGIN
          LTLWeightDistr.Type := LTLWeightDistr.Type::"Rate Shop";
          LTLWeightDistr."No." := "No.";
          LTLWeightDistr.ClearFreightType;
          LTLWeightDistr.INSERT;
        END;

      IF FromSalesHeader."Currency Factor" = 0 THEN
        FromSalesHeader."Currency Factor" := 1;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",FromSalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",FromSalesHeader."No.");
      SalesLine.SETFILTER("No.",'<>%1','');
      SalesLine.SETFILTER(Quantity,'<>0');
      SalesLine.SETRANGE("Drop Shipment",FALSE);
      SalesLine.SETRANGE(Pack,TRUE);
      IF SalesLine.FIND('-') THEN
        REPEAT
          LineLength := 0;
          LineWidth := 0;
          LineHeight := 0;
          LineCubage := 0;
          LineUOMWeight := 0;

          CASE SalesLine.Type OF
            SalesLine.Type::Item:
              BEGIN
                Item.GET(SalesLine."No.");
                NetWeight := Item."Net Weight";
                GrossWeight := Item."Gross Weight";
                DimmedWeight := Item."Dimmed Weight";
                UnitVolume := Item."Unit Volume";
                LTLFreightType := Item."LTL Freight Type";
                IF ItemUnitOfMeasure.GET(SalesLine."No.",SalesLine."Unit of Measure Code") THEN BEGIN
                  LineLength := ItemUnitOfMeasure.Length;
                  LineWidth := ItemUnitOfMeasure.Width;
                  LineHeight := ItemUnitOfMeasure.Height;
                  LineCubage := ItemUnitOfMeasure.Cubage;
                  LineUOMWeight := ItemUnitOfMeasure.Weight;
                END;
              END;
            SalesLine.Type::Resource:
              BEGIN
                Resource.GET(SalesLine."No.");
                NetWeight := Resource."Net Weight";
                GrossWeight := Resource."Gross Weight";
                DimmedWeight := Resource."Dimmed Weight";
                UnitVolume := Resource."Unit Volume";
                LTLFreightType := Resource."LTL Freight Type";
              END;
            ELSE BEGIN
              NetWeight := 0;
              GrossWeight := 0;
              DimmedWeight := 0;
              UnitVolume := 0;
              LTLFreightType := '';
            END;
          END;

          CASE ShippingSetup."Rate Shop Quantity" OF
            ShippingSetup."Rate Shop Quantity"::"Outstanding Quantity":
              BEGIN
                LineQty := SalesLine."Outstanding Quantity";
                LineQtyBase := SalesLine."Outstanding Qty. (Base)";
              END;
            ShippingSetup."Rate Shop Quantity"::"Quantity to Ship":
              BEGIN
                LineQty := SalesLine."Qty. to Ship";
                LineQtyBase := SalesLine."Qty. to Ship (Base)";
              END;
            ELSE BEGIN
              LineQty := 0;
              LineQtyBase := 0;
            END;
          END;

          LineValueCost := ROUND(LineQty * SalesLine."Unit Cost (LCY)");
          IF SalesLine."Outstanding Quantity" <> 0 THEN
            LineValuePrice :=
              ROUND(
                (SalesLine."Outstanding Amount" / FromSalesHeader."Currency Factor") *
                (LineQtyBase / SalesLine."Outstanding Qty. (Base)"))
          ELSE
            LineValuePrice := 0;
          "Value (Cost)" := "Value (Cost)" + LineValueCost;
          "Value (Price)" := "Value (Price)" + LineValuePrice;
          "Net Weight" := "Net Weight" + LineQtyBase * NetWeight;
          "Gross Weight" := "Gross Weight" + LineQtyBase * GrossWeight;
          "Dimmed Weight" := "Dimmed Weight" + LineQtyBase * DimmedWeight;
          Volume := Volume + LineQtyBase * UnitVolume;
          IF Length < LineLength THEN
            Length := LineLength;
          IF Width < LineWidth THEN
            Width := LineWidth;
          Height := Height + LineHeight;
          Cubage := Cubage * LineQty * LineCubage;
          "Unit of Measure Weight" := "Unit of Measure Weight" + LineQty * LineUOMWeight;
          CASE ShippingSetup."Rate Shop No. of Packages as" OF
            ShippingSetup."Rate Shop No. of Packages as"::"No. of Lines":
              "No. of Packages" := "No. of Packages" + 1;
            ShippingSetup."Rate Shop No. of Packages as"::Quantity:
              "No. of Packages" := "No. of Packages" + LineQty;
            ShippingSetup."Rate Shop No. of Packages as"::"Quantity (Base)":
              "No. of Packages" := "No. of Packages" + LineQtyBase;
            ShippingSetup."Rate Shop No. of Packages as"::"Standard Pack (Rest in 1)",
            ShippingSetup."Rate Shop No. of Packages as"::"Standard Pack (No. of Lines)":
              IF SalesLine."Quantity (Base)" <> 0 THEN
                IF SalesLine."Package Quantity" = 0 THEN BEGIN
                  IF NOT PackageAdded OR
                     (ShippingSetup."Rate Shop No. of Packages as" =
                      ShippingSetup."Rate Shop No. of Packages as"::"Standard Pack (No. of Lines)")
                  THEN
                    "No. of Packages" := "No. of Packages" + 1;
                  PackageAdded := TRUE;
                END ELSE
                  "No. of Packages" :=
                    "No. of Packages" +
                    ROUND(SalesLine."Package Quantity" * LineQtyBase / SalesLine."Quantity (Base)",1,'>');
            ELSE
              "No. of Packages" := 1;
          END;

          IF ShippingSetup."Enable LTL Interface" THEN BEGIN
            CASE ShippingSetup."Rate Shop Actual Weight as" OF
              ShippingSetup."Rate Shop Actual Weight as"::"Net Weight":
                LTLWeightDistr.AddFreightTypeWeight(LTLFreightType,LineQtyBase * NetWeight);
              ShippingSetup."Rate Shop Actual Weight as"::"Gross Weight":
                LTLWeightDistr.AddFreightTypeWeight(LTLFreightType,LineQtyBase * GrossWeight);
              ShippingSetup."Rate Shop Actual Weight as"::"Dimmed Weight":
                LTLWeightDistr.AddFreightTypeWeight(LTLFreightType,LineQtyBase * DimmedWeight);
              ShippingSetup."Rate Shop Actual Weight as"::"Unit of Measure Weight":
                LTLWeightDistr.AddFreightTypeWeight(LTLFreightType,LineQty * UOMWeight);
            END;

            LTLWeightDistr.AddFreightTypeVolume(LTLFreightType,LineQtyBase * UnitVolume);

            CASE ShippingSetup."Declare Value As" OF
              ShippingSetup."Declare Value As"::Cost:
                LTLWeightDistr.AddFreightTypeValue(LTLFreightType,LineValueCost);
              ShippingSetup."Declare Value As"::Price:
                LTLWeightDistr.AddFreightTypeValue(LTLFreightType,LineValuePrice);
            END;
          END;
        UNTIL SalesLine.NEXT = 0;

      CASE ShippingSetup."Rate Shop Actual Weight as" OF
        ShippingSetup."Rate Shop Actual Weight as"::"Net Weight":
          "Override Weight" := "Net Weight";
        ShippingSetup."Rate Shop Actual Weight as"::"Gross Weight":
          "Override Weight" := "Gross Weight";
        ShippingSetup."Rate Shop Actual Weight as"::"Dimmed Weight":
          "Override Weight" := "Dimmed Weight";
        ShippingSetup."Rate Shop Actual Weight as"::"Unit of Measure Weight":
          "Override Weight" := "Unit of Measure Weight";
      END;

      IF ShippingSetup."Enable LTL Interface" THEN
        LTLWeightDistr.MODIFY;

      CASE ShippingSetup."Declare Value As" OF
        ShippingSetup."Declare Value As"::Cost:
          "Override Value" := "Value (Cost)";
        ShippingSetup."Declare Value As"::Price:
          "Override Value" := "Value (Price)";
      END;

      IF "Override Value" = 0 THEN
        "Override Value" := ShippingSetup."Zero Value Package Value";

      CASE ShippingSetup."Rate Shop Actual Volume as" OF
        ShippingSetup."Rate Shop Actual Volume as"::"Unit Volume":
          "Override Volume" := Volume;
        ShippingSetup."Rate Shop Actual Volume as"::Cubage:
          "Override Volume" := Cubage;
      END;

      IF COD THEN
        "COD Amount" := "Value (Price)";
    END;

    PROCEDURE TransferFromPurchHeader@10(FromPurchHeader@1240030000 : Record 38);
    VAR
      PurchLine@1240030001 : Record 39;
      Item@1240030002 : Record 27;
      ItemUnitOfMeasure@1240030003 : Record 5404;
      Location@1240030004 : Record 14;
      NetWeight@1240030005 : Decimal;
      GrossWeight@1240030006 : Decimal;
      DimmedWeight@1240030007 : Decimal;
      UOMWeight@1240030017 : Decimal;
      UnitVolume@1240030008 : Decimal;
      LineLength@1240030022 : Decimal;
      LineWidth@1240030021 : Decimal;
      LineHeight@1240030020 : Decimal;
      LineCubage@1240030019 : Decimal;
      LineUOMWeight@1240030018 : Decimal;
      LTLFreightType@1240030009 : Code[10];
      LineQty@1240030010 : Decimal;
      LineQtyBase@1240030011 : Decimal;
      LineValueCost@1240030012 : Decimal;
      LineValuePrice@1240030013 : Decimal;
      PackageAdded@1240030014 : Boolean;
      FulPackages@1240030015 : Decimal;
      RemainingQtyBase@1240030016 : Decimal;
    BEGIN
      ShippingSetup.GET;

      "Source Type" := DATABASE::"Purchase Header";
      "Source Subtype" := FromPurchHeader."Document Type";
      "Source ID" := FromPurchHeader."No.";

      "Sell-to Customer No." := FromPurchHeader."Buy-from Vendor No.";
      "Ship-to Code" := FromPurchHeader."Order Address Code";
      "Ship-to Name" := FromPurchHeader."Buy-from Vendor Name";
      "Ship-to Name 2" := FromPurchHeader."Buy-from Vendor Name 2";
      "Ship-to Address" := FromPurchHeader."Buy-from Address";
      "Ship-to Address 2" := FromPurchHeader."Buy-from Address 2";
      "Ship-to City" := FromPurchHeader."Buy-from City";
      "Ship-to Contact" := FromPurchHeader."Buy-from Contact";
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(FromPurchHeader."Buy-from Post Code");
      "Ship-to State" := FromPurchHeader."Buy-from County";
      "Ship-to Country Code" := FromPurchHeader."Buy-from Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Shipment Date" := FromPurchHeader."Expected Receipt Date";
      COD := FromPurchHeader."COD Payment";
      "Currency Code" := FromPurchHeader."Currency Code";
      IF "Currency Code" = '' THEN
        "Currency Code" := 'USD';
      "Residential Delivery" := FromPurchHeader."Residential Delivery";
      "Shipping Payment Type" := FromPurchHeader."Shipping Payment Type";
      "Shipping Insurance" := FromPurchHeader."Shipping Insurance";
      "Source Type" := DATABASE::"Purchase Header";
      "Source Subtype" := FromPurchHeader."Document Type";
      "Source ID" := FromPurchHeader."No.";
      "No. of Packages" := 0;

      IF Location.GET(FromPurchHeader."Location Code") THEN
        "Rate Shop Packing Station Code" := Location."Rate Shop Packing Station";

      "Value (Cost)" := 0;
      "Value (Price)" := 0;
      "Net Weight" := 0;
      "Dimmed Weight" := 0;
      "Gross Weight" := 0;
      Volume := 0;
      LTLFreightType := '';
      "No. of Packages" := 0;
      PackageAdded := FALSE;
      IF ShippingSetup."Enable LTL Interface" THEN
        IF NOT LTLWeightDistr.GET(LTLWeightDistr.Type::"Rate Shop","No.") THEN BEGIN
          LTLWeightDistr.Type := LTLWeightDistr.Type::"Rate Shop";
          LTLWeightDistr."No." := "No.";
          LTLWeightDistr.ClearFreightType;
          LTLWeightDistr.INSERT;
        END;

      IF FromPurchHeader."Currency Factor" = 0 THEN
        FromPurchHeader."Currency Factor" := 1;

      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type",FromPurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",FromPurchHeader."No.");
      PurchLine.SETFILTER("No.",'<>%1','');
      PurchLine.SETFILTER(Quantity,'<>0');
      PurchLine.SETRANGE("Drop Shipment",FALSE);
      IF PurchLine.FIND('-') THEN
        REPEAT
          LineLength := 0;
          LineWidth := 0;
          LineHeight := 0;
          LineCubage := 0;
          LineUOMWeight := 0;

          CASE PurchLine.Type OF
            PurchLine.Type::Item:
              BEGIN
                Item.GET(PurchLine."No.");
                NetWeight := Item."Net Weight";
                GrossWeight := Item."Gross Weight";
                DimmedWeight := Item."Dimmed Weight";
                UnitVolume := Item."Unit Volume";
                LTLFreightType := Item."LTL Freight Type";
                IF ItemUnitOfMeasure.GET(PurchLine."No.",PurchLine."Unit of Measure Code") THEN BEGIN
                  LineLength := ItemUnitOfMeasure.Length;
                  LineWidth := ItemUnitOfMeasure.Width;
                  LineHeight := ItemUnitOfMeasure.Height;
                  LineCubage := ItemUnitOfMeasure.Cubage;
                  LineUOMWeight := ItemUnitOfMeasure.Weight;
                END;
              END;
            ELSE BEGIN
              NetWeight := 0;
              GrossWeight := 0;
              DimmedWeight := 0;
              UnitVolume := 0;
              LTLFreightType := '';
            END;
          END;

          CASE ShippingSetup."Rate Shop Quantity" OF
            ShippingSetup."Rate Shop Quantity"::"Outstanding Quantity":
              BEGIN
                LineQty := PurchLine."Outstanding Quantity";
                LineQtyBase := PurchLine."Outstanding Qty. (Base)";
              END;
            ShippingSetup."Rate Shop Quantity"::"Quantity to Ship":
              BEGIN
                IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN BEGIN
                  LineQty := PurchLine."Return Qty. to Ship";
                  LineQtyBase := PurchLine."Return Qty. to Ship (Base)";
                END ELSE BEGIN
                  LineQty := PurchLine."Qty. to Receive";
                  LineQtyBase := PurchLine."Qty. to Receive (Base)";
                END;
              END;
            ELSE BEGIN
              LineQty := 0;
              LineQtyBase := 0;
            END;
          END;

          LineValueCost := ROUND(LineQty * PurchLine."Unit Cost (LCY)");
          LineValuePrice :=
            ROUND(
              (PurchLine."Outstanding Amount" / FromPurchHeader."Currency Factor") *
              (LineQtyBase / PurchLine."Quantity (Base)"));
          "Value (Cost)" := "Value (Cost)" + LineValueCost;
          "Value (Price)" := "Value (Price)" + LineValuePrice;
          "Net Weight" := "Net Weight" + LineQtyBase * NetWeight;
          "Gross Weight" := "Gross Weight" + LineQtyBase * GrossWeight;
          "Dimmed Weight" := "Dimmed Weight" + LineQtyBase * DimmedWeight;
          Volume := Volume + LineQtyBase * UnitVolume;
          IF Length < LineLength THEN
            Length := LineLength;
          IF Width < LineWidth THEN
            Width := LineWidth;
          Height := Height + LineHeight;
          Cubage := Cubage * LineQty * LineCubage;
          "Unit of Measure Weight" := "Unit of Measure Weight" + LineQty * LineUOMWeight;
          CASE ShippingSetup."Rate Shop No. of Packages as" OF
            ShippingSetup."Rate Shop No. of Packages as"::"No. of Lines":
              "No. of Packages" := "No. of Packages" + 1;
            ShippingSetup."Rate Shop No. of Packages as"::Quantity:
              "No. of Packages" := "No. of Packages" + LineQty;
            ShippingSetup."Rate Shop No. of Packages as"::"Quantity (Base)":
              "No. of Packages" := "No. of Packages" + LineQtyBase;
            ShippingSetup."Rate Shop No. of Packages as"::"Standard Pack (Rest in 1)",
            ShippingSetup."Rate Shop No. of Packages as"::"Standard Pack (No. of Lines)":
              IF (LineQtyBase <> 0) AND (PurchLine.Type = PurchLine.Type::Item) THEN BEGIN
                IF (Item."Std. Pack Unit of Measure Code" <> '') AND
                   (Item."Std. Packs per Package" <> 0)
                THEN BEGIN
                  ItemUnitOfMeasure.GET(Item."No.",Item."Std. Pack Unit of Measure Code");
                  ItemUnitOfMeasure.TESTFIELD("Qty. per Unit of Measure");

                  FulPackages :=
                    ROUND(
                      LineQtyBase /
                      (ItemUnitOfMeasure."Qty. per Unit of Measure" * Item."Std. Packs per Package"),1,'<');
                  RemainingQtyBase :=
                    LineQtyBase -
                    FulPackages *
                    ItemUnitOfMeasure."Qty. per Unit of Measure" * Item."Std. Packs per Package";

                  "No. of Packages" := "No. of Packages" + FulPackages;
                  IF NOT PackageAdded OR
                     ((RemainingQtyBase <> 0) AND
                      (ShippingSetup."Rate Shop No. of Packages as" =
                       ShippingSetup."Rate Shop No. of Packages as"::"Standard Pack (No. of Lines)"))
                  THEN BEGIN
                    "No. of Packages" := "No. of Packages" + 1;
                    PackageAdded := TRUE;
                  END;
                END ELSE
                  IF NOT PackageAdded OR
                     (ShippingSetup."Rate Shop No. of Packages as" =
                      ShippingSetup."Rate Shop No. of Packages as"::"Standard Pack (No. of Lines)")
                  THEN BEGIN
                    "No. of Packages" := "No. of Packages" + 1;
                    PackageAdded := TRUE;
                  END;
              END;
            ELSE
              "No. of Packages" := 1;
          END;

          IF ShippingSetup."Enable LTL Interface" THEN BEGIN
            CASE ShippingSetup."Rate Shop Actual Weight as" OF
              ShippingSetup."Rate Shop Actual Weight as"::"Net Weight":
                LTLWeightDistr.AddFreightTypeWeight(LTLFreightType,LineQtyBase * NetWeight);
              ShippingSetup."Rate Shop Actual Weight as"::"Gross Weight":
                LTLWeightDistr.AddFreightTypeWeight(LTLFreightType,LineQtyBase * GrossWeight);
              ShippingSetup."Rate Shop Actual Weight as"::"Dimmed Weight":
                LTLWeightDistr.AddFreightTypeWeight(LTLFreightType,LineQtyBase * DimmedWeight);
              ShippingSetup."Rate Shop Actual Weight as"::"Unit of Measure Weight":
                LTLWeightDistr.AddFreightTypeWeight(LTLFreightType,LineQty * UOMWeight);
            END;

            LTLWeightDistr.AddFreightTypeVolume(LTLFreightType,LineQtyBase * UnitVolume);

            CASE ShippingSetup."Declare Value As" OF
              ShippingSetup."Declare Value As"::Cost:
                LTLWeightDistr.AddFreightTypeValue(LTLFreightType,LineValueCost);
              ShippingSetup."Declare Value As"::Price:
                LTLWeightDistr.AddFreightTypeValue(LTLFreightType,LineValuePrice);
            END;
          END;
        UNTIL PurchLine.NEXT = 0;

      CASE ShippingSetup."Rate Shop Actual Weight as" OF
        ShippingSetup."Rate Shop Actual Weight as"::"Net Weight":
          "Override Weight" := "Net Weight";
        ShippingSetup."Rate Shop Actual Weight as"::"Gross Weight":
          "Override Weight" := "Gross Weight";
        ShippingSetup."Rate Shop Actual Weight as"::"Dimmed Weight":
          "Override Weight" := "Dimmed Weight";
        ShippingSetup."Rate Shop Actual Weight as"::"Unit of Measure Weight":
          "Override Weight" := "Unit of Measure Weight";
      END;

      IF ShippingSetup."Enable LTL Interface" THEN
        LTLWeightDistr.MODIFY;

      CASE ShippingSetup."Declare Value As" OF
        ShippingSetup."Declare Value As"::Cost:
          "Override Value" := "Value (Cost)";
        ShippingSetup."Declare Value As"::Price:
          "Override Value" := "Value (Price)";
      END;

      CASE ShippingSetup."Rate Shop Actual Volume as" OF
        ShippingSetup."Rate Shop Actual Volume as"::"Unit Volume":
          "Override Volume" := Volume;
        ShippingSetup."Rate Shop Actual Volume as"::Cubage:
          "Override Volume" := Cubage;
      END;

      IF COD THEN
        "COD Amount" := "Value (Price)";
    END;

    PROCEDURE TransferFromTransferHeader@1240030002(FromTransferHeader@1240030000 : Record 5740);
    VAR
      TransferLine@1240030001 : Record 5741;
      Item@1240030002 : Record 27;
      ItemUnitOfMeasure@1240030016 : Record 5404;
      Location@1240030004 : Record 14;
      NetWeight@1240030005 : Decimal;
      GrossWeight@1240030006 : Decimal;
      DimmedWeight@1240030007 : Decimal;
      UOMWeight@1240030017 : Decimal;
      UnitVolume@1240030008 : Decimal;
      LineLength@1240030022 : Decimal;
      LineWidth@1240030021 : Decimal;
      LineHeight@1240030020 : Decimal;
      LineCubage@1240030019 : Decimal;
      LineUOMWeight@1240030018 : Decimal;
      LTLFreightType@1240030009 : Code[10];
      LineQty@1240030010 : Decimal;
      LineQtyBase@1240030011 : Decimal;
      LineValueCost@1240030012 : Decimal;
      LineValuePrice@1240030013 : Decimal;
      PackageAdded@1240030014 : Boolean;
      FulPackages@1240030003 : Decimal;
      RemainingQtyBase@1240030015 : Decimal;
    BEGIN
      ShippingSetup.GET;

      "Source Type" := DATABASE::"Transfer Header";
      "Source Subtype" := 0;
      "Source ID" := FromTransferHeader."No.";

      "Sell-to Customer No." := FromTransferHeader."Transfer-to Code";
      "Ship-to Code" := '';
      "Ship-to Name" := FromTransferHeader."Transfer-to Name";
      "Ship-to Name 2" := FromTransferHeader."Transfer-to Name 2";
      "Ship-to Address" := FromTransferHeader."Transfer-to Address";
      "Ship-to Address 2" := FromTransferHeader."Transfer-to Address 2";
      "Ship-to City" := FromTransferHeader."Transfer-to City";
      "Ship-to Contact" := FromTransferHeader."Transfer-to Contact";
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(FromTransferHeader."Transfer-to Post Code");
      "Ship-to State" := FromTransferHeader."Transfer-to County";
      "Ship-to Country Code" := FromTransferHeader."Trsf.-to Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Shipment Date" := FromTransferHeader."Shipment Date";
      "Residential Delivery" := FromTransferHeader."Residential Delivery";
      "Shipping Payment Type" := FromTransferHeader."Shipping Payment Type";
      "Shipping Insurance" := FromTransferHeader."Shipping Insurance";
      "Source Type" := DATABASE::"Transfer Header";
      "Source Subtype" := 0;
      "Source ID" := FromTransferHeader."No.";
      "No. of Packages" := 0;

      IF Location.GET(FromTransferHeader."Transfer-from Code") THEN
        "Rate Shop Packing Station Code" := Location."Rate Shop Packing Station";

      "Value (Cost)" := 0;
      "Value (Price)" := 0;
      "Net Weight" := 0;
      "Dimmed Weight" := 0;
      "Gross Weight" := 0;
      Volume := 0;
      LTLFreightType := '';
      "No. of Packages" := 0;
      PackageAdded := FALSE;
      IF ShippingSetup."Enable LTL Interface" THEN
        IF NOT LTLWeightDistr.GET(LTLWeightDistr.Type::"Rate Shop","No.") THEN BEGIN
          LTLWeightDistr.Type := LTLWeightDistr.Type::"Rate Shop";
          LTLWeightDistr."No." := "No.";
          LTLWeightDistr.ClearFreightType;
          LTLWeightDistr.INSERT;
        END;

      TransferLine.RESET;
      TransferLine.SETRANGE("Document No.",FromTransferHeader."No.");
      TransferLine.SETFILTER("Item No.",'<>%1','');
      TransferLine.SETFILTER(Quantity,'<>0');
      IF TransferLine.FIND('-') THEN
        REPEAT
          LineLength := 0;
          LineWidth := 0;
          LineHeight := 0;
          LineCubage := 0;
          LineUOMWeight := 0;

          Item.GET(TransferLine."Item No.");
          NetWeight := Item."Net Weight";
          GrossWeight := Item."Gross Weight";
          DimmedWeight := Item."Dimmed Weight";
          UnitVolume := Item."Unit Volume";
          LTLFreightType := Item."LTL Freight Type";
          IF ItemUnitOfMeasure.GET(TransferLine."Item No.",TransferLine."Unit of Measure Code") THEN BEGIN
            LineLength := ItemUnitOfMeasure.Length;
            LineWidth := ItemUnitOfMeasure.Width;
            LineHeight := ItemUnitOfMeasure.Height;
            LineCubage := ItemUnitOfMeasure.Cubage;
            LineUOMWeight := ItemUnitOfMeasure.Weight;
          END;

          CASE ShippingSetup."Rate Shop Quantity" OF
            ShippingSetup."Rate Shop Quantity"::"Outstanding Quantity":
              BEGIN
                LineQty := TransferLine."Outstanding Quantity";
                LineQtyBase := TransferLine."Outstanding Qty. (Base)";
              END;
            ShippingSetup."Rate Shop Quantity"::"Quantity to Ship":
              BEGIN
                LineQty := TransferLine."Qty. to Ship";
                LineQtyBase := TransferLine."Qty. to Ship (Base)";
              END;
            ELSE BEGIN
              LineQty := 0;
              LineQtyBase := 0;
            END;
          END;

          LineValueCost := ROUND(LineQtyBase * Item."Unit Cost");
          LineValuePrice := ROUND(LineQtyBase * Item."Unit Price");
          "Value (Cost)" := "Value (Cost)" + LineValueCost;
          "Value (Price)" := "Value (Price)" + LineValuePrice;
          "Net Weight" := "Net Weight" + LineQtyBase * NetWeight;
          "Gross Weight" := "Gross Weight" + LineQtyBase * GrossWeight;
          "Dimmed Weight" := "Dimmed Weight" + LineQtyBase * DimmedWeight;
          Volume := Volume + LineQtyBase * UnitVolume;
          IF Length < LineLength THEN
            Length := LineLength;
          IF Width < LineWidth THEN
            Width := LineWidth;
          Height := Height + LineHeight;
          Cubage := Cubage * LineQty * LineCubage;
          "Unit of Measure Weight" := "Unit of Measure Weight" + LineQty * LineUOMWeight;
          CASE ShippingSetup."Rate Shop No. of Packages as" OF
            ShippingSetup."Rate Shop No. of Packages as"::"No. of Lines":
              "No. of Packages" := "No. of Packages" + 1;
            ShippingSetup."Rate Shop No. of Packages as"::Quantity:
              "No. of Packages" := "No. of Packages" + LineQty;
            ShippingSetup."Rate Shop No. of Packages as"::"Quantity (Base)":
              "No. of Packages" := "No. of Packages" + LineQtyBase;
            ShippingSetup."Rate Shop No. of Packages as"::"Standard Pack (Rest in 1)",
            ShippingSetup."Rate Shop No. of Packages as"::"Standard Pack (No. of Lines)":
              IF LineQtyBase <> 0 THEN BEGIN
                IF (Item."Std. Pack Unit of Measure Code" <> '') AND
                   (Item."Std. Packs per Package" <> 0)
                THEN BEGIN
                  ItemUnitOfMeasure.GET(Item."No.",Item."Std. Pack Unit of Measure Code");
                  ItemUnitOfMeasure.TESTFIELD("Qty. per Unit of Measure");

                  FulPackages :=
                    ROUND(
                      LineQtyBase /
                      (ItemUnitOfMeasure."Qty. per Unit of Measure" * Item."Std. Packs per Package"),1,'<');
                  RemainingQtyBase :=
                    LineQtyBase -
                    FulPackages *
                    ItemUnitOfMeasure."Qty. per Unit of Measure" * Item."Std. Packs per Package";

                  "No. of Packages" := "No. of Packages" + FulPackages;
                  IF NOT PackageAdded OR
                     ((RemainingQtyBase <> 0) AND
                      (ShippingSetup."Rate Shop No. of Packages as" =
                       ShippingSetup."Rate Shop No. of Packages as"::"Standard Pack (No. of Lines)"))
                  THEN BEGIN
                    "No. of Packages" := "No. of Packages" + 1;
                    PackageAdded := TRUE;
                  END;
                END ELSE
                  IF NOT PackageAdded OR
                     (ShippingSetup."Rate Shop No. of Packages as" =
                      ShippingSetup."Rate Shop No. of Packages as"::"Standard Pack (No. of Lines)")
                  THEN BEGIN
                    "No. of Packages" := "No. of Packages" + 1;
                    PackageAdded := TRUE;
                  END;
              END;
            ELSE
              "No. of Packages" := 1;
          END;

          IF ShippingSetup."Enable LTL Interface" THEN BEGIN
            CASE ShippingSetup."Rate Shop Actual Weight as" OF
              ShippingSetup."Rate Shop Actual Weight as"::"Net Weight":
                LTLWeightDistr.AddFreightTypeWeight(LTLFreightType,LineQtyBase * NetWeight);
              ShippingSetup."Rate Shop Actual Weight as"::"Gross Weight":
                LTLWeightDistr.AddFreightTypeWeight(LTLFreightType,LineQtyBase * GrossWeight);
              ShippingSetup."Rate Shop Actual Weight as"::"Dimmed Weight":
                LTLWeightDistr.AddFreightTypeWeight(LTLFreightType,LineQtyBase * DimmedWeight);
              ShippingSetup."Rate Shop Actual Weight as"::"Unit of Measure Weight":
                LTLWeightDistr.AddFreightTypeWeight(LTLFreightType,LineQty * UOMWeight);
            END;

            LTLWeightDistr.AddFreightTypeVolume(LTLFreightType,LineQtyBase * UnitVolume);

            CASE ShippingSetup."Declare Value As" OF
              ShippingSetup."Declare Value As"::Cost:
                LTLWeightDistr.AddFreightTypeValue(LTLFreightType,LineValueCost);
              ShippingSetup."Declare Value As"::Price:
                LTLWeightDistr.AddFreightTypeValue(LTLFreightType,LineValuePrice);
            END;
          END;
        UNTIL TransferLine.NEXT = 0;

      CASE ShippingSetup."Rate Shop Actual Weight as" OF
        ShippingSetup."Rate Shop Actual Weight as"::"Net Weight":
          "Override Weight" := "Net Weight";
        ShippingSetup."Rate Shop Actual Weight as"::"Gross Weight":
          "Override Weight" := "Gross Weight";
        ShippingSetup."Rate Shop Actual Weight as"::"Dimmed Weight":
          "Override Weight" := "Dimmed Weight";
        ShippingSetup."Rate Shop Actual Weight as"::"Unit of Measure Weight":
          "Override Weight" := "Unit of Measure Weight";
      END;

      IF ShippingSetup."Enable LTL Interface" THEN
        LTLWeightDistr.MODIFY;

      CASE ShippingSetup."Declare Value As" OF
        ShippingSetup."Declare Value As"::Cost:
          "Override Value" := "Value (Cost)";
        ShippingSetup."Declare Value As"::Price:
          "Override Value" := "Value (Price)";
      END;

      CASE ShippingSetup."Rate Shop Actual Volume as" OF
        ShippingSetup."Rate Shop Actual Volume as"::"Unit Volume":
          "Override Volume" := Volume;
        ShippingSetup."Rate Shop Actual Volume as"::Cubage:
          "Override Volume" := Cubage;
      END;

      IF COD THEN
        "COD Amount" := "Value (Price)";
    END;

    PROCEDURE TransferFromPackage@2(CurrentPackage@1000000000 : Record 14000701);
    VAR
      PackageLine@1000000001 : Record 14000702;
    BEGIN
      ShippingSetup.GET;

      "Sell-to Customer No." := CurrentPackage."Ship-to No.";
      "Ship-to Code" := CurrentPackage."Ship-to Code";
      "Ship-to Name" := CurrentPackage."Ship-to Name";
      "Ship-to Name 2" := CurrentPackage."Ship-to Name 2";
      "Ship-to Address" := CurrentPackage."Ship-to Address";
      "Ship-to Address 2" := CurrentPackage."Ship-to Address 2";
      "Ship-to City" := CurrentPackage."Ship-to City";
      "Ship-to Contact" := CurrentPackage."Ship-to Contact";
      "Ship-to ZIP Code" := CurrentPackage."Ship-to ZIP Code";
      "Ship-to State" := CurrentPackage."Ship-to State";
      "Ship-to Country Code" := CurrentPackage."Ship-to Country Code";
      "Shipment Date" := CurrentPackage."Packing Date";
      "Currency Code" := CurrentPackage."Currency Code";
      IF CurrentPackage."Intra Canadian Service" THEN BEGIN
        "Currency Code" := 'CAD';
        "Intra Canadian Service" := TRUE;
      END ELSE BEGIN
        "Currency Code" := 'USD';
        "Intra Canadian Service" := FALSE;
      END;
      "Override Value" := CurrentPackage."Override Value";
      COD := CurrentPackage.COD;
      "COD Amount" := CurrentPackage."COD Amount";
      "COD Cashiers Check" := CurrentPackage."COD Cashiers Check";
      "Use Dim Weight" := CurrentPackage."Use Dim Weight";
      "Residential Delivery" := CurrentPackage."Residential Delivery";
      "Blind Shipment" := CurrentPackage."Blind Shipment";
      "Double Blind Ship-from Cust No" := CurrentPackage."Double Blind Ship-from Cust No";
      "Double Blind Shipment" := CurrentPackage."Double Blind Shipment";
      "Shipping Payment Type" := CurrentPackage."Shipping Payment Type";
      "Shipping Insurance" := CurrentPackage."Shipping Insurance";
      "Package No." := CurrentPackage."No.";
      "Residential Delivery" := CurrentPackage."Residential Delivery";

      "Value (Cost)" := CurrentPackage.TotalValueCost;
      "Value (Price)" := CurrentPackage.TotalValuePrice;
      "Net Weight" := CurrentPackage.TotalNetWeight;
      "Gross Weight" := CurrentPackage.TotalGrossWeight;
      "Dimmed Weight" := CurrentPackage.TotalDimWeight;
      Volume := CurrentPackage.TotalVolume;
      "Override Weight" := CurrentPackage.GetWeight;
      "Override Value" := CurrentPackage.GetValue;
      "Override Volume" := CurrentPackage.GetVolume;
      Length := CurrentPackage.GetLength;
      Width := CurrentPackage.GetWidth;
      Height := CurrentPackage.GetHeight;

      IF ShippingSetup."Enable LTL Interface" THEN BEGIN
        IF NOT LTLWeightDistr.GET(LTLWeightDistr.Type::"Rate Shop","No.") THEN BEGIN
          LTLWeightDistr.Type := LTLWeightDistr.Type::"Rate Shop";
          LTLWeightDistr."No." := "No.";
          LTLWeightDistr.ClearFreightType;
          LTLWeightDistr.INSERT;
        END;

        PackageLine.RESET;
        PackageLine.SETRANGE("Package No.",CurrentPackage."No.");
        IF PackageLine.FIND('-') THEN BEGIN
          REPEAT
            CASE ShippingSetup."Rate Shop Actual Weight as" OF
              ShippingSetup."Rate Shop Actual Weight as"::"Net Weight":
                LTLWeightDistr.AddFreightTypeWeight(
                  PackageLine."LTL Freight Type",PackageLine."Net Weight");
              ShippingSetup."Rate Shop Actual Weight as"::"Gross Weight":
                LTLWeightDistr.AddFreightTypeWeight(
                  PackageLine."LTL Freight Type",PackageLine."Gross Weight");
              ShippingSetup."Rate Shop Actual Weight as"::"Dimmed Weight":
                LTLWeightDistr.AddFreightTypeWeight(
                  PackageLine."LTL Freight Type",PackageLine."Dim. Weight");
              ShippingSetup."Rate Shop Actual Weight as"::"Unit of Measure Weight":
                LTLWeightDistr.AddFreightTypeWeight(
                  PackageLine."LTL Freight Type",PackageLine."Unit of Measure Weight");
            END;

            LTLWeightDistr.AddFreightTypeVolume(PackageLine."LTL Freight Type",PackageLine.Volume);

            CASE ShippingSetup."Declare Value As" OF
              ShippingSetup."Declare Value As"::Cost:
                LTLWeightDistr.AddFreightTypeValue(
                  PackageLine."LTL Freight Type",PackageLine."Value (Cost)");
              ShippingSetup."Declare Value As"::Price:
                LTLWeightDistr.AddFreightTypeValue(
                  PackageLine."LTL Freight Type",PackageLine."Value (Price)");
            END;
          UNTIL PackageLine.NEXT = 0;

          LTLWeightDistr.AdjustTotalFreightType("Override Weight","Override Volume","Override Value");

          LTLWeightDistr.MODIFY;
        END;
      END;
    END;

    PROCEDURE TransferFromBillOfLading@5(FromBillOfLading@1000000000 : Record 14000822);
    VAR
      TotalRateShopHeader@1000000001 : Record 14000741;
      SalesHeader@1000000002 : Record 36;
      Package@1000000003 : Record 14000701;
      BillOfLadingLine@1240030000 : Record 14000823;
    BEGIN
      ShippingSetup.GET;

      "Sell-to Customer No." := FromBillOfLading."Ship-to No.";
      "Ship-to Code" := FromBillOfLading."Ship-to Code";
      "Ship-to Name" := FromBillOfLading."Ship-to Name";
      "Ship-to Name 2" := FromBillOfLading."Ship-to Name 2";
      "Ship-to Address" := FromBillOfLading."Ship-to Address";
      "Ship-to Address 2" := FromBillOfLading."Ship-to Address 2";
      "Ship-to City" := FromBillOfLading."Ship-to City";
      "Ship-to Contact" := FromBillOfLading."Ship-to Contact";
      "Ship-to ZIP Code" := FromBillOfLading."Ship-to ZIP Code";
      "Ship-to State" := FromBillOfLading."Ship-to State";
      "Ship-to Country Code" := FromBillOfLading."Ship-to Country Code";
      "Shipment Date" := FromBillOfLading."Packing Date";
      COD := FromBillOfLading."COD Payment";
      "COD Amount" := FromBillOfLading."COD Amount";
      "COD Cashiers Check" := FromBillOfLading."COD Cashiers Check";
      "Currency Code" := 'USD';
      "Residential Delivery" := FromBillOfLading."Residential Delivery";
      "Blind Shipment" := FALSE;
      "Double Blind Ship-from Cust No" := '';
      "Double Blind Shipment" := FALSE;
      "Shipping Payment Type" := FromBillOfLading."Shipping Payment Type";
      "Shipping Insurance" := FromBillOfLading."Shipping Insurance";
      "Bill of Lading No." := FromBillOfLading."No.";

      "Override Value" := FromBillOfLading.GetValue;
      "Override Volume" := FromBillOfLading.GetVolume;
      "Override Weight" := FromBillOfLading.GetWeight;

      TotalRateShopHeader := Rec;
      BillOfLadingLine.RESET;
      BillOfLadingLine.SETRANGE("Bill of Lading No.",FromBillOfLading."No.");
      BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
      IF BillOfLadingLine.FIND('-') THEN
        REPEAT
          SalesHeader.GET(SalesHeader."Document Type"::Order,BillOfLadingLine."No.");

          Package.RESET;
          Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          Package.SETRANGE("Source Type",DATABASE::"Sales Header");
          Package.SETRANGE("Source Subtype",SalesHeader."Document Type");
          Package.SETRANGE("Source ID",SalesHeader."No.");
          IF ShippingSetup."Rate Shop Packages for BOL" AND Package.FIND('-') THEN BEGIN
            REPEAT
              TransferFromPackage(Package);

              IF FromBillOfLading."Override Weight" = 0 THEN
                TotalRateShopHeader."Override Weight" :=
                  TotalRateShopHeader."Override Weight" + "Override Weight";
              IF FromBillOfLading."Override Value" = 0 THEN
                TotalRateShopHeader."Override Value" :=
                  TotalRateShopHeader."Override Value" + "Override Value";
              IF FromBillOfLading."Override Volume" = 0 THEN
                TotalRateShopHeader."Override Volume" :=
                  TotalRateShopHeader."Override Volume" + "Override Volume";
            UNTIL Package.NEXT = 0;
          END ELSE BEGIN
            TransferFromSalesHeader(SalesHeader);

            IF FromBillOfLading."Override Weight" = 0 THEN
              TotalRateShopHeader."Override Weight" :=
                TotalRateShopHeader."Override Weight" + "Override Weight";
            IF FromBillOfLading."Override Value" = 0 THEN
              TotalRateShopHeader."Override Value" :=
                TotalRateShopHeader."Override Value" + "Override Value";
            IF FromBillOfLading."Override Volume" = 0 THEN
              TotalRateShopHeader."Override Volume" :=
                TotalRateShopHeader."Override Volume" + "Override Volume";
          END;
        UNTIL BillOfLadingLine.NEXT = 0;

      Rec := TotalRateShopHeader;

      IF ShippingSetup."Enable LTL Interface" THEN BEGIN
        LTLWeightDistr.GET(LTLWeightDistr.Type::"Rate Shop","No.");
        IF LTLWeightDistr.AdjustTotalFreightType("Override Weight","Override Volume","Override Value") THEN
          LTLWeightDistr.MODIFY;
      END;
    END;

    LOCAL PROCEDURE GetShippingSetup@22();
    BEGIN
      IF NOT ShippingSetupRetrieved THEN BEGIN
        ShippingSetup.GET;
        ShippingSetupRetrieved := TRUE;
      END;
    END;

    PROCEDURE GetWeight@4() : Decimal;
    BEGIN
      IF "Override Weight" <> 0 THEN
        EXIT("Override Weight");

      GetShippingSetup;

      CASE ShippingSetup."Rate Shop Actual Weight as" OF
        ShippingSetup."Rate Shop Actual Weight as"::"Net Weight":
          EXIT("Net Weight");
        ShippingSetup."Rate Shop Actual Weight as"::"Gross Weight":
          EXIT("Gross Weight");
        ShippingSetup."Rate Shop Actual Weight as"::"Dimmed Weight":
          EXIT("Dimmed Weight");
        ShippingSetup."Rate Shop Actual Weight as"::"Unit of Measure Weight":
          EXIT("Unit of Measure Weight");
      END;
    END;

    PROCEDURE GetValue@3() : Decimal;
    BEGIN
      IF "Override Value" <> 0 THEN
        EXIT("Override Value");

      GetShippingSetup;

      CASE ShippingSetup."Declare Value As" OF
        ShippingSetup."Declare Value As"::Cost:
          EXIT("Value (Cost)");
        ShippingSetup."Declare Value As"::Price:
          EXIT("Value (Price)");
      END;
    END;

    PROCEDURE GetVolume@6() : Decimal;
    BEGIN
      IF "Override Volume" <> 0 THEN
        EXIT("Override Volume");

      GetShippingSetup;

      CASE ShippingSetup."Rate Shop Actual Volume as" OF
        ShippingSetup."Rate Shop Actual Volume as"::"Unit Volume":
          EXIT(Volume);
        ShippingSetup."Rate Shop Actual Volume as"::Cubage:
          EXIT(Cubage);
      END;
    END;

    PROCEDURE GetLength@1240030010() : Decimal;
    BEGIN
      IF "Override Dimensions" THEN
        EXIT("Override Length");

      EXIT(Length);
    END;

    PROCEDURE GetWidth@1240030011() : Decimal;
    BEGIN
      IF "Override Dimensions" THEN
        EXIT("Override Width");

      EXIT(Width);
    END;

    PROCEDURE GetHeight@1240030006() : Decimal;
    BEGIN
      IF "Override Dimensions" THEN
        EXIT("Override Height");

      EXIT(Height);
    END;

    PROCEDURE GetInsuredValue@7(InsureThroughCarrier@1000000000 : Boolean) : Decimal;
    BEGIN
      IF ("Override Insured Value" <> 0) AND InsureThroughCarrier THEN
        EXIT("Override Insured Value");

      IF InsureThroughCarrier THEN
        EXIT(GetValue)
      ELSE
        EXIT(0);
    END;

    PROCEDURE OpenLTLWeightDistr@8();
    VAR
      LTLWeightDistr@1000000000 : Record 14000807;
    BEGIN
      IF NOT LTLWeightDistr.GET(LTLWeightDistr.Type::"Rate Shop","No.") THEN BEGIN
        LTLWeightDistr.Type := LTLWeightDistr.Type::"Rate Shop";
        LTLWeightDistr."No." := "No.";
        LTLWeightDistr.INSERT;

        COMMIT;
      END;

      LTLWeightDistr.RESET;
      LTLWeightDistr.FILTERGROUP(2);
      LTLWeightDistr.SETRECFILTER;
      LTLWeightDistr.FILTERGROUP(0);
      PAGE.RUNMODAL(PAGE::"LTL Weight Distribution Card",LTLWeightDistr);
    END;

    PROCEDURE RateShop@9();
    BEGIN
      GetShippingSetup;
      IF "Ship-to Country Code" = '' THEN
        TESTFIELD("Ship-to ZIP Code");

      IF ShippingSetup."Enable LTL Interface" THEN
        IF LTLWeightDistr.GET(LTLWeightDistr.Type::"Rate Shop","No.") THEN
          IF LTLWeightDistr.AdjustTotalFreightType("Override Weight","Override Volume","Override Value") THEN
            LTLWeightDistr.MODIFY;

      Shipping.RateShop(Rec);
    END;

    PROCEDURE DisplayMap@1240030001();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FIND('-') THEN
        MapMgt.MakeSelection(DATABASE::"Rate Shop Header",GETPOSITION);
    END;

    BEGIN
    END.
  }
}

