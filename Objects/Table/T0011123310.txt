OBJECT Table 11123310 SC - Parameters Collection
{
  OBJECT-PROPERTIES
  {
    Date=05/11/21;
    Time=[ 3:30:13 AM];
    Modified=Yes;
    Version List=SCW19.2.0,TPZ3109,002;
  }
  PROPERTIES
  {
    CaptionML=ENU=Parameters Collection;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 10  ;   ;AccountId           ;Code20         }
    { 11  ;   ;AccountType         ;Text30         }
    { 12  ;   ;VisibleOnly         ;Boolean        }
    { 13  ;   ;WithCustomerTemplateOnly;Boolean    }
    { 14  ;   ;WebsiteId           ;Code50         }
    { 15  ;   ;ShopAccountType     ;Text30         }
    { 16  ;   ;ShopAccountEmail    ;Text80         }
    { 17  ;   ;PageIndex           ;Integer        }
    { 18  ;   ;PageSize            ;Integer        }
    { 19  ;   ;SortField           ;Text30         }
    { 20  ;   ;SortAscending       ;Boolean        }
    { 21  ;   ;ValidOnly           ;Boolean        }
    { 22  ;   ;IsValid             ;Boolean        }
    { 23  ;   ;LoadShippingAddresses;Boolean       }
    { 24  ;   ;CustomerId          ;Code20         }
    { 25  ;   ;ContactId           ;Code20         }
    { 26  ;   ;ContactName         ;Text50         }
    { 27  ;   ;SalesPersonId       ;Code10         }
    { 28  ;   ;SalesPersonName     ;Text50         }
    { 30  ;   ;CurrentCurrencyId   ;Code10         }
    { 31  ;   ;LanguageId          ;Code10         }
    { 32  ;   ;LoadOrderLines      ;Boolean        }
    { 33  ;   ;DocumentType        ;Text30         }
    { 34  ;   ;DocumentId          ;Code20         }
    { 35  ;   ;OriginalOrderId     ;Text50         }
    { 36  ;   ;StartDate           ;Date           }
    { 37  ;   ;EndDate             ;Date           }
    { 38  ;   ;RequestedDeliveryDate;Date          }
    { 39  ;   ;ReferenceNo         ;Text250        }
    { 40  ;   ;SanaOrderId         ;Text50         }
    { 41  ;   ;PaymentMethodName   ;Text50         }
    { 42  ;   ;PaymentTransactionId;Text30         }
    { 43  ;   ;PaymentStatus       ;Text30         }
    { 44  ;   ;ShippingMethodName  ;Text80         }
    { 45  ;   ;ShippingMethodCode  ;Text30         }
    { 46  ;   ;B2bOnlinePayments   ;Text30         }
    { 47  ;   ;Quantity            ;Decimal        }
    { 48  ;   ;ProductId           ;Code20         }
    { 49  ;   ;VariantId           ;Code10         }
    { 50  ;   ;PrepackId           ;Code20         }
    { 51  ;   ;LineType            ;Text30         }
    { 52  ;   ;DiscountType        ;Text30         }
    { 53  ;   ;Price               ;Decimal        }
    { 54  ;   ;DiscountValue       ;Decimal        }
    { 55  ;   ;Title               ;Text80         }
    { 56  ;   ;InvoiceDiscountAmount;Decimal       }
    { 57  ;   ;UnitOfMeasureId     ;Code10         }
    { 58  ;   ;CheckStock          ;Boolean        }
    { 59  ;   ;CalcFunction        ;Text80         }
    { 60  ;   ;CalcErrorText       ;Text250        }
    { 61  ;   ;CalcOrderable       ;Boolean        }
    { 62  ;   ;DiscountAmount      ;Decimal        }
    { 63  ;   ;DiscountPercent     ;Decimal        }
    { 64  ;   ;ShippingAgentCode   ;Text50         }
    { 65  ;   ;ShippingAgentServiceCode;Text50     }
    { 66  ;   ;SkipCalculations    ;Boolean        }
    { 67  ;   ;DocumentState       ;Integer        }
    { 68  ;   ;ProductOrderable    ;Boolean        }
    { 69  ;   ;ItemDescriptionNo   ;Integer        }
    { 70  ;   ;VariantDescriptionNo;Integer        }
    { 71  ;   ;HasVariants         ;Boolean        }
    { 72  ;   ;HasPrepacks         ;Boolean        }
    { 73  ;   ;HasMaterials        ;Boolean        }
    { 74  ;   ;LoadRelatedSkus     ;Boolean        }
    { 75  ;   ;CalculatePrices     ;Boolean        }
    { 76  ;   ;CalculateInventory  ;Boolean        }
    { 77  ;   ;CalculateSKUPrices  ;Boolean        }
    { 78  ;   ;CalculateSKUInventory;Boolean       }
    { 79  ;   ;LoadRelatedCustomers;Boolean        }
    { 80  ;   ;Inventory           ;Decimal        }
    { 81  ;   ;Wishlist            ;Boolean        }
    { 82  ;   ;Barcode             ;Text30         }
    { 83  ;   ;Basket              ;Boolean        }
    { 84  ;   ;MultiCurrency       ;Boolean        }
    { 85  ;   ;PrepackSpecific     ;Boolean        }
    { 86  ;   ;VATProdPostGroup    ;Code10         }
    { 87  ;   ;VATBusPostGroup     ;Code10         }
    { 88  ;   ;LoadVisibilityRules ;Boolean        }
    { 89  ;   ;PriceIncludesVAT    ;Boolean        }
    { 90  ;   ;PricesIncludingVAT  ;Boolean        }
    { 91  ;   ;VerticalId          ;Code10         }
    { 92  ;   ;BaseCurrencyId      ;Code10         }
    { 93  ;   ;QuantityPrecision   ;Decimal        }
    { 94  ;   ;SanaCustomerId      ;Text50         }
    { 95  ;   ;CheckPaymentStatus  ;Boolean        }
    { 96  ;   ;VariantCompCount    ;Integer        }
    { 97  ;   ;LoadForThisYear     ;Boolean        }
    { 98  ;   ;LoadForLastYear     ;Boolean        }
    { 99  ;   ;LoadToDate          ;Boolean        }
    { 100 ;   ;PromotableQuote     ;Boolean        }
    { 101 ;   ;BaseSalesPrice      ;Decimal        }
    { 102 ;   ;IndexRecords        ;Integer        }
    { 103 ;   ;AuthorizationStatus ;Text50         }
    { 110 ;   ;AttachmentType      ;Text50         }
    { 111 ;   ;AttachmentValue     ;Text250        }
    { 112 ;   ;AttachmentDescription;Text250       }
    { 113 ;   ;AttachmentFileName  ;Text250        }
    { 115 ;   ;Subtotal            ;Decimal        }
    { 120 ;   ;OrderLinesCount     ;Integer        }
    { 121 ;   ;MaxOrderLinesToLoad ;Integer        }
    { 218 ;   ;ReturnReasonCode    ;Text10         }
    { 219 ;   ;LineNo              ;Integer        }
    { 220 ;   ;LineId              ;Text50         }
    { 221 ;   ;OriginalQuoteId     ;Code20         }
    { 222 ;   ;PaymentMethodId     ;Text50         }
    { 223 ;   ;ShippingMethodId    ;Text50         }
    { 224 ;   ;MaxExpirationDate   ;Date           }
    { 225 ;   ;ReturnOrderId       ;Code20         }
    { 330 ;   ;BasketId            ;Code20         }
    { 331 ;   ;BasketType          ;Text30         }
    { 332 ;   ;CalculateTotals     ;Boolean        }
    { 333 ;   ;LoadLines           ;Boolean        }
    { 334 ;   ;SupportsPersistedBaskets;Boolean    }
    { 335 ;   ;Division            ;Code10        ;DataClassification=ToBeClassified;
                                                   Description=TPZ2503 }
    { 336 ;   ;ShortTermDescription;Text100       ;DataClassification=ToBeClassified;
                                                   Description=TPZ2672 }
    { 337 ;   ;LongTermDescription ;Text250       ;DataClassification=ToBeClassified;
                                                   Description=TPZ2672 }
    { 338 ;   ;StockMessage        ;Text50        ;DataClassification=ToBeClassified;
                                                   Description=TPZ3109 }
    { 339 ;   ;IsPickupOrder       ;Boolean       ;DataClassification=ToBeClassified;
                                                   Description=TPZ3154 }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      TempKeyValue@11123307 : TEMPORARY Record 11123330;
      TempExtraFieldList@11123308 : TEMPORARY Record 11123330;
      TempFilterList@11123309 : TEMPORARY Record 11123330;
      TempIdList@11123305 : TEMPORARY Record 11123330;
      TempLookupValue@11123302 : TEMPORARY Record 11123322;
      Text11123302@11123303 : TextConst 'ENU=Quantity of an order line cannot be empty or negative.';

    PROCEDURE InitializeEmptyParams@11123311();
    BEGIN
      ClearValues;

      RESET;
      DELETEALL;
      INIT;
      INSERT;
    END;

    PROCEDURE InitParams@11123302(VAR InXMLBuff@11123302 : Record 11123303;TableNo@11123303 : Integer);
    VAR
      Settings@11123304 : Codeunit 11123311;
      EventMgt@11123310 : Codeunit 11123331;
      RecRef@11123308 : RecordRef;
      Language@11123305 : Text[50];
    BEGIN
      InitializeEmptyParams;

      SetDefaultValues;

      IF TableNo > 0 THEN BEGIN
        RecRef.OPEN(TableNo);
        ReadExtraFieldsXML(InXMLBuff,RecRef,'ExtraFields');
        ReadIdListXML(InXMLBuff,RecRef);
        ReadFiltersXML(InXMLBuff,RecRef,'Filter');
        RecRef.CLOSE;
      END;

      WebsiteId := ReadStringValueFromXML(InXMLBuff,'//WebsiteId');
      AccountId := ReadStringValueFromXML(InXMLBuff,'//AccountId');
      AccountType := ReadStringValueFromXML(InXMLBuff,'//AccountType');
      CurrentCurrencyId := ReadStringValueFromXML(InXMLBuff,'//CurrencyId');
      SortAscending := ReadBooDefaultValueFromXML(InXMLBuff,'//SortAscending',TRUE);

      Language := ReadStringValueFromXML(InXMLBuff,'//LanguageId');
      IF Language <> '' THEN
        LanguageId := Settings.GetLanguageCode(Language);

      CheckStock := ReadBoolValueFromXML(InXMLBuff,'//CheckStock');
      PageIndex := ReadIntegerValueFromXML(InXMLBuff,'//PageIndex');
      PageSize := ReadIntegerValueFromXML(InXMLBuff,'//PageSize');
      SortField := ReadStringValueFromXML(InXMLBuff,'//SortField');
      VisibleOnly := ReadBoolValueFromXML(InXMLBuff,'//VisibleOnly');
      LoadRelatedSkus := ReadBoolValueFromXML(InXMLBuff,'//LoadRelatedSkus');
      LoadRelatedCustomers := ReadBoolValueFromXML(InXMLBuff,'//LoadRelatedCustomers');
      SalesPersonId := ReadStringValueFromXML(InXMLBuff,'//SalesPersonId');
      SalesPersonName := ReadStringValueFromXML(InXMLBuff,'//SalesPersonName');
      ContactName := ReadStringValueFromXML(InXMLBuff,'//ContactName');
      ContactId := ReadStringValueFromXML(InXMLBuff,'//ContactId');
      ShopAccountEmail := ReadStringValueFromXML(InXMLBuff,'//ShopAccountEmail');
      ShopAccountType := ReadStringValueFromXML(InXMLBuff,'//ShopAccountType');
      ReferenceNo := ReadStringValueFromXML(InXMLBuff,'//ReferenceNo');
      RequestedDeliveryDate := ReadDateValueFromXML(InXMLBuff,'//RequestedDeliveryDate');
      PaymentMethodName := ReadStringValueFromXML(InXMLBuff,'//PaymentMethodName');
      PaymentTransactionId := ReadStringValueFromXML(InXMLBuff,'//PaymentTransactionId');
      PaymentStatus := ReadStringValueFromXML(InXMLBuff,'//PaymentStatus');
      CustomerId := ReadStringValueFromXML(InXMLBuff,'//CustomerId');
      LoadForThisYear := ReadBoolValueFromXML(InXMLBuff,'//LoadForThisYear');
      LoadForLastYear := ReadBoolValueFromXML(InXMLBuff,'//LoadForLastYear');
      LoadToDate := ReadBoolValueFromXML(InXMLBuff,'//LoadToDate');
      DocumentType := GetDocumentType(InXMLBuff);
      BasketType := GetBasketType(InXMLBuff);
      DocumentId := ReadStringValueFromXML(InXMLBuff,'//DocumentId');
      OriginalOrderId := ReadStringValueFromXML(InXMLBuff,'//OriginalOrderId');
      B2bOnlinePayments := ReadStringValueFromXML(InXMLBuff,'//B2bOnlinePayments');
      UnitOfMeasureId := ReadStringValueFromXML(InXMLBuff,'//UnitOfMeasureId');
      LoadOrderLines := ReadBooDefaultValueFromXML(InXMLBuff,'//LoadOrderLines',TRUE);
      MaxOrderLinesToLoad := ReadIntegerValueFromXML(InXMLBuff,'//MaxOrderLinesToLoad');
      CalculatePrices := ReadBoolValueFromXML(InXMLBuff,'//CalculatePrices');
      CalculateInventory := ReadBoolValueFromXML(InXMLBuff,'//CalculateInventory');
      CalculateSKUPrices := ReadBoolValueFromXML(InXMLBuff,'//CalculateSkuPrices');
      CalculateSKUInventory := ReadBoolValueFromXML(InXMLBuff,'//CalculateSkuInventory');
      SanaOrderId := ReadStringValueFromXML(InXMLBuff,'//SanaOrderId');
      StartDate := ReadDateValueFromXML(InXMLBuff,'//StartDate');
      EndDate := ReadDateValueFromXML(InXMLBuff,'//EndDate');
      WithCustomerTemplateOnly := ReadBoolValueFromXML(InXMLBuff,'//WithCustomerTemplateOnly');
      MultiCurrency := ReadBoolValueFromXML(InXMLBuff,'//MultiCurrency');
      LoadVisibilityRules := ReadBoolValueFromXML(InXMLBuff,'//LoadVisibilityRules');
      LoadShippingAddresses := ReadBoolValueFromXML(InXMLBuff,'//LoadShippingAddresses');
      ValidOnly := ReadBoolValueFromXML(InXMLBuff,'//ValidOnly');
      IsValid := ReadBoolValueFromXML(InXMLBuff,'//IsValid');
      ShippingMethodCode := ReadStringValueFromXML(InXMLBuff,'//ShippingMethodCode');
      ShippingMethodName := ReadStringValueFromXML(InXMLBuff,'//ShippingMethodName');
      BasketId := ReadStringValueFromXML(InXMLBuff,'//BasketId');
      LoadLines := ReadBoolValueFromXML(InXMLBuff,'//LoadLines');
      CalculateTotals := ReadBoolValueFromXML(InXMLBuff,'//CalculateTotals');
      CheckPaymentStatus := ReadBooDefaultValueFromXML(InXMLBuff,'//CheckPaymentStatus',TRUE);
      Basket := IsBasket(InXMLBuff);
      SkipCalculations := ReadBoolValueFromXML(InXMLBuff,'//SkipCalculation');
      Wishlist := IsWishList(InXMLBuff);
      ProductId := ReadStringValueFromXML(InXMLBuff,'//ProductId');
      AttachmentFileName := ReadStringValueFromXML(InXMLBuff,'//FileName');
      Division:= ReadStringValueFromXML(InXMLBuff,'//Division');//<TPZ2503>
      ShortTermDescription := ReadStringValueFromXML(InXMLBuff,'//ShortTermDescription');//<TPZ2672>
      LongTermDescription := ReadStringValueFromXML(InXMLBuff,'//LongTermDescription');//<TPZ2672>
      StockMessage := ReadStringValueFromXML(InXMLBuff,'//StockMessage');//<TPZ3109>
      IsPickupOrder := ReadBoolValueFromXML(InXMLBuff,'//IsPickupOrder');//<TPZ3154>

      DefineRealCurrencyId;
      InitializeCurrencyList;

      EventMgt.OnInitParams(Rec);

      MODIFY;
    END;

    PROCEDURE InitFieldValues@11123364(VAR InXMLBuff@11123302 : Record 11123303);
    VAR
      EventMgt@11123303 : Codeunit 11123331;
      Position@11123304 : Integer;
      DateValue@11123307 : Date;
      DecValue@11123306 : Decimal;
      TextValue@11123305 : Text[1024];
    BEGIN
      TextValue := GetFieldValueByNameFromXML(InXMLBuff,'DocumentId');
      IF TextValue <> '' THEN
        DocumentId := TextValue;

      TextValue := GetFieldValueByNameFromXML(InXMLBuff,'ReturnOrderId');
      IF TextValue <> '' THEN
        ReturnOrderId := TextValue;

      TextValue := GetFieldValueByNameFromXML(InXMLBuff,'AccountId');
      IF TextValue <> '' THEN
        AccountId := TextValue;

      TextValue := GetFieldValueByNameFromXML(InXMLBuff,'AccountType');
      IF TextValue <> '' THEN
        AccountType := TextValue;

      DocumentType := GetDocumentType(InXMLBuff);

      TextValue := GetFieldValueByNameFromXML(InXMLBuff,'CurrencyId');
      IF TextValue <> '' THEN
        CurrentCurrencyId := TextValue;

      TextValue := GetFieldValueByNameFromXML(InXMLBuff,'ReferenceNo');
      IF TextValue <> '' THEN
        ReferenceNo := TextValue;

      TextValue := GetFieldValueByNameFromXML(InXMLBuff,'SanaOrderId');
      IF TextValue <> '' THEN
        SanaOrderId := TextValue;

      DateValue := GetDateFieldValueByNameFromXML(InXMLBuff,'RequestedDeliveryDate');
      IF DateValue <> 0D THEN
        RequestedDeliveryDate := DateValue;

      TextValue := GetFieldValueByNameFromXML(InXMLBuff,'ContactId');
      IF TextValue <> '' THEN
        ContactId := TextValue;

      TextValue := GetFieldValueByNameFromXML(InXMLBuff,'ContactName');
      IF TextValue <> '' THEN
        ContactName := TextValue;

      TextValue := GetFieldValueByNameFromXML(InXMLBuff,'SalesPersonName');
      IF TextValue <> '' THEN
        SalesPersonName := TextValue;

      TextValue := GetFieldValueByNameFromXML(InXMLBuff,'SalesPersonId');
      IF TextValue <> '' THEN
        SalesPersonId := TextValue;

      TextValue := GetFieldValueByNameFromXML(InXMLBuff,'PaymentMethodName');
      IF TextValue <> '' THEN
        PaymentMethodName := TextValue;

      TextValue := GetFieldValueByNameFromXML(InXMLBuff,'PaymentTransactionId');
      IF TextValue <> '' THEN
        PaymentTransactionId := TextValue;

      TextValue := GetFieldValueByNameFromXML(InXMLBuff,'PaymentStatus');
      IF TextValue <> '' THEN
        PaymentStatus := TextValue;

      TextValue := GetFieldValueByNameFromXML(InXMLBuff,'ShippingMethodCode');
      IF TextValue <> '' THEN
        ShippingMethodCode := TextValue;

      TextValue := GetFieldValueByNameFromXML(InXMLBuff,'ShippingMethodName');
      IF TextValue <> '' THEN
        ShippingMethodName := TextValue;

      TextValue := GetFieldValueByNameFromXML(InXMLBuff,'AuthorizationStatus');
      IF TextValue <> '' THEN
        AuthorizationStatus := TextValue;


      Position := STRPOS(ShippingMethodCode,'__');
      IF Position <> 0 THEN BEGIN
        ShippingAgentCode := COPYSTR(ShippingMethodCode,Position + 2);
        ShippingAgentServiceCode := COPYSTR(ShippingMethodCode,1,Position - 1);
      END;

      TextValue := GetFieldValueByNameFromXML(InXMLBuff,'ShopAccountEmail');
      IF TextValue <> '' THEN
        ShopAccountEmail := TextValue;

      LoadOrderLines := GetDefFieldValueByNameFromXML(InXMLBuff,'LoadOrderLines',TRUE);

      OriginalQuoteId := GetFieldValueByNameFromXML(InXMLBuff,'OriginalQuoteId');
      IF DocumentId = '' THEN
        IF OriginalQuoteId <> '' THEN
          DocumentId := OriginalQuoteId;

      TextValue := GetFieldValueByNameFromXML(InXMLBuff,'PaymentMethodId');
      IF TextValue <> '' THEN
        PaymentMethodId := TextValue;

      TextValue := GetFieldValueByNameFromXML(InXMLBuff,'ShippingMethodId');
      IF TextValue <> '' THEN
        ShippingMethodId := TextValue;

      DateValue := GetDateFieldValueByNameFromXML(InXMLBuff,'MaxExpirationDate');
      IF DateValue <> 0D THEN
        MaxExpirationDate := DateValue;

      DecValue := GetDecFieldValueByNameFromXML(InXMLBuff,'Subtotal');
      IF DecValue <> 0 THEN
        Subtotal := DecValue;

      //<TPZ2503>
      TextValue := GetFieldValueByNameFromXML(InXMLBuff,'Division');
      IF TextValue <> '' THEN
        Division := TextValue;
      //</TPZ2503>

      IsPickupOrder := GetDefFieldValueByNameFromXML(InXMLBuff,'IsPickupOrder',TRUE);//<TPZ3154>

      DefineRealCurrencyId;
      InitializeCurrencyList;

      EventMgt.OnInitFieldValues(Rec);

      MODIFY;
    END;

    PROCEDURE InitLineFieldValues@11123321(VAR LineNodeBuff@11123302 : Record 11123303);
    VAR
      EventMgt@11123304 : Codeunit 11123331;
      DecimalValue@11123306 : Decimal;
      IntValue@11123305 : Integer;
      TextValue@11123303 : Text[1024];
    BEGIN
      ProductId := '';
      VariantId := '';
      PrepackId := '';
      LineType := '';
      Quantity := 0;
      Price := 0;
      UnitOfMeasureId := '';
      DiscountPercent := 0;
      InvoiceDiscountAmount := 0;

      IF Wishlist THEN
        Quantity := 0
      ELSE BEGIN
        DecimalValue := GetDecFieldValueByNameFromXML(LineNodeBuff,'Quantity');
        IF DecimalValue <> 0 THEN BEGIN
          IF DecimalValue < 0 THEN
            ERROR(Text11123302);
          Quantity := DecimalValue;
        END;
      END;

      TextValue := GetFieldValueByNameFromXML(LineNodeBuff,'Id');
      IF TextValue <> '' THEN
        LineId := TextValue;

      TextValue := GetFieldValueByNameFromXML(LineNodeBuff,'ProductId');
      IF TextValue <> '' THEN
        ProductId := TextValue;

      TextValue := GetFieldValueByNameFromXML(LineNodeBuff,'VariantId');
      IF TextValue <> '' THEN
        VariantId := TextValue;

      TextValue := GetFieldValueByNameFromXML(LineNodeBuff,'PrepackId');
      IF TextValue <> '' THEN
        PrepackId := TextValue;

      DecimalValue := GetDecFieldValueByNameFromXML(LineNodeBuff,'DiscountValue');
      IF DecimalValue <> 0 THEN
        DiscountValue := DecimalValue;

      DecimalValue := GetDecFieldValueByNameFromXML(LineNodeBuff,'Price');
      IF DecimalValue <> 0 THEN
        Price := DecimalValue;

      IF Price <> 0 THEN
        SkipCalculations := TRUE;

      TextValue := GetFieldValueByNameFromXML(LineNodeBuff,'Title');
      IF TextValue <> '' THEN
        Title := TextValue;

      //<TPZ2672>
      TextValue := GetFieldValueByNameFromXML(LineNodeBuff,'ShortTermDescription');
      IF TextValue <> '' THEN
        ShortTermDescription := TextValue;

      TextValue := GetFieldValueByNameFromXML(LineNodeBuff,'LongTermDescription');
      IF TextValue <> '' THEN
        LongTermDescription := TextValue;
      //</TPZ2672>

      TextValue := GetFieldValueByNameFromXML(LineNodeBuff,'LineType');
      IF TextValue <> '' THEN
        LineType := TextValue;

      TextValue := GetFieldValueByNameFromXML(LineNodeBuff,'DiscountType');
      IF TextValue <> '' THEN
        DiscountType := TextValue;

      TextValue := GetFieldValueByNameFromXML(LineNodeBuff,'UnitOfMeasureId');
      IF TextValue <> '' THEN
        UnitOfMeasureId := TextValue;

      DecimalValue := GetDecFieldValueByNameFromXML(LineNodeBuff,'QuantityPrecision');
      IF DecimalValue <> 0 THEN
        QuantityPrecision := DecimalValue;

      IF SkipCalculations THEN BEGIN
        DecimalValue := GetDecFieldValueByNameFromXML(LineNodeBuff,'InvoiceDiscount');
        IF DecimalValue <> 0 THEN
          InvoiceDiscountAmount := DecimalValue;

        DecimalValue := GetDecFieldValueByNameFromXML(LineNodeBuff,'DiscountPercent');
        IF DecimalValue <> 0 THEN
          DiscountPercent := DecimalValue;
      END ELSE BEGIN
        DecimalValue := GetDecFieldValueByNameFromXML(LineNodeBuff,'DiscountPercent');
        IF DecimalValue <> 0 THEN
          DiscountPercent := DecimalValue;
      END;

      IntValue := GetIntFieldValueByNameFromXML(LineNodeBuff,'LineNo');
      IF IntValue <> 0 THEN
        LineNo := IntValue;

      TextValue := GetFieldValueByNameFromXML(LineNodeBuff,'ReturnReasonCode');
      IF TextValue <> '' THEN
        ReturnReasonCode := TextValue;

      EventMgt.OnInitLineFieldValues(Rec);
    END;

    LOCAL PROCEDURE ReadStringValueFromXML@11123303(VAR InXMLBuff@11123302 : Record 11123303;QueryString@11123303 : Text[1024]) : Text[1024];
    VAR
      TextValue@11123304 : Text[1024];
    BEGIN
      TextValue := InXMLBuff.SelectSingleNodeText(QueryString);
      EXIT(TextValue);
    END;

    LOCAL PROCEDURE ReadBoolValueFromXML@11123312(VAR InXMLBuff@11123302 : Record 11123303;QueryString@11123303 : Text[1024]) : Boolean;
    VAR
      TextValue@11123304 : Text[1024];
      BoolValue@11123305 : Boolean;
    BEGIN
      TextValue := InXMLBuff.SelectSingleNodeText(QueryString);
      IF EVALUATE(BoolValue,TextValue) THEN
        EXIT(BoolValue);
    END;

    LOCAL PROCEDURE ReadBooDefaultValueFromXML@11123339(VAR InXMLBuff@11123302 : Record 11123303;QueryString@11123303 : Text[1024];DefaultValue@11123306 : Boolean) : Boolean;
    VAR
      BoolValue@11123305 : Boolean;
      TextValue@11123304 : Text[1024];
    BEGIN
      TextValue := InXMLBuff.SelectSingleNodeText(QueryString);
      IF TextValue <> '' THEN
        IF EVALUATE(BoolValue,TextValue) THEN
          EXIT(BoolValue);

      EXIT(DefaultValue);
    END;

    LOCAL PROCEDURE ReadStringDefaultValueFromXML@11123317(VAR InXMLBuff@11123302 : Record 11123303;QueryString@11123303 : Text[1024];DefaultValue@11123306 : Text[1024]) : Text[1024];
    VAR
      TextValue@11123304 : Text[1024];
    BEGIN
      TextValue := InXMLBuff.SelectSingleNodeText(QueryString);
      IF TextValue <> '' THEN
        EXIT(TextValue);
      EXIT(DefaultValue);
    END;

    LOCAL PROCEDURE GetFieldValueByNameFromXML@11123372(VAR InXMLBuff@11123302 : Record 11123303;FieldName@11123303 : Text[1024]) TextValue : Text[1024];
    BEGIN
      TextValue := InXMLBuff.CutFieldValueByName(FieldName);
      EXIT(TextValue);
    END;

    LOCAL PROCEDURE GetIntFieldValueByNameFromXML@11123327(VAR InXMLBuff@11123302 : Record 11123303;FieldName@11123303 : Text[1024]) : Decimal;
    VAR
      TextValue@11123304 : Text[1024];
      IntValue@11123305 : Integer;
    BEGIN
      TextValue := InXMLBuff.CutFieldValueByName(FieldName);
      IF EVALUATE(IntValue,TextValue) THEN
        EXIT(IntValue);
    END;

    LOCAL PROCEDURE GetDecFieldValueByNameFromXML@11123320(VAR InXMLBuff@11123302 : Record 11123303;FieldName@11123303 : Text[1024]) : Decimal;
    VAR
      TextValue@11123304 : Text[1024];
      DecimalValue@11123305 : Decimal;
    BEGIN
      TextValue := InXMLBuff.CutFieldValueByName(FieldName);
      IF EVALUATE(DecimalValue,TextValue) THEN
        EXIT(DecimalValue);
    END;

    LOCAL PROCEDURE GetDateFieldValueByNameFromXML@11123326(VAR InXMLBuff@11123302 : Record 11123303;FieldName@11123303 : Text[1024]) : Date;
    VAR
      TextValue@11123304 : Text[1024];
      DateValue@11123305 : Date;
    BEGIN
      TextValue := InXMLBuff.CutFieldValueByName(FieldName);
      IF EVALUATE(DateValue,TextValue) THEN
        EXIT(DateValue);
    END;

    LOCAL PROCEDURE GetDefFieldValueByNameFromXML@11123329(VAR InXMLBuff@11123302 : Record 11123303;FieldName@11123303 : Text[1024];DefaultValue@11123304 : Boolean) : Boolean;
    VAR
      TextValue@11123305 : Text[1024];
      BoolValue@11123306 : Boolean;
    BEGIN
      TextValue := InXMLBuff.CutFieldValueByName(FieldName);
      IF TextValue <> '' THEN
        IF EVALUATE(BoolValue,TextValue) THEN
          EXIT(BoolValue);
      EXIT(DefaultValue);
    END;

    LOCAL PROCEDURE ReadIntegerValueFromXML@11123331(VAR InXMLBuff@11123302 : Record 11123303;QueryString@11123303 : Text[1024]) : Integer;
    VAR
      TextValue@11123304 : Text[1024];
      IntValue@11123305 : Integer;
    BEGIN
      TextValue := InXMLBuff.SelectSingleNodeText(QueryString);
      IF EVALUATE(IntValue,TextValue) THEN
        EXIT(IntValue);
    END;

    LOCAL PROCEDURE ReadDecimalValueFromXML@11123336(VAR InXMLBuff@11123302 : Record 11123303;QueryString@11123303 : Text[1024]) : Decimal;
    VAR
      TextValue@11123304 : Text[1024];
      DecValue@11123305 : Decimal;
    BEGIN
      TextValue := InXMLBuff.SelectSingleNodeText(QueryString);
      IF EVALUATE(DecValue,TextValue) THEN
        EXIT(DecValue);
    END;

    LOCAL PROCEDURE ReadDateValueFromXML@11123337(VAR InXMLBuff@11123302 : Record 11123303;QueryString@11123303 : Text[1024]) : Date;
    VAR
      TextValue@11123304 : Text[1024];
      DateValue@11123305 : Date;
    BEGIN
      TextValue := InXMLBuff.SelectSingleNodeText(QueryString);
      IF EVALUATE(DateValue,TextValue) THEN
        EXIT(DateValue);
    END;

    LOCAL PROCEDURE ReadExtraFieldsXML@11123308(VAR InXMLBuff@11123302 : Record 11123303;VAR RecRef@11123303 : RecordRef;QueryString@11123306 : Text[1024]);
    VAR
      ResultNodeBuff@11123305 : TEMPORARY Record 11123303;
      FilterHelper@11123304 : Codeunit 11123321;
    BEGIN
      IF InXMLBuff.SelectSingleNode(QueryString,ResultNodeBuff) THEN
        IF ResultNodeBuff.HasChildNodes THEN
          FilterHelper.ParseExtraFields(ResultNodeBuff,TempExtraFieldList,RecRef);
    END;

    PROCEDURE GetExtraFieldList@11123309(VAR OutExtraFieldList@11123302 : TEMPORARY Record 11123330);
    BEGIN
      OutExtraFieldList.RESET;
      IF NOT OutExtraFieldList.ISEMPTY THEN
        OutExtraFieldList.DELETEALL;

      IF TempExtraFieldList.FINDSET THEN
        REPEAT
          OutExtraFieldList.INIT;
          OutExtraFieldList := TempExtraFieldList;
          OutExtraFieldList.INSERT;
        UNTIL TempExtraFieldList.NEXT = 0;
    END;

    PROCEDURE ExtraFieldListIsEmpty@11123310() : Boolean;
    BEGIN
      EXIT(TempExtraFieldList.ISEMPTY);
    END;

    LOCAL PROCEDURE IsWishList@11123313(VAR InXMLBoof@11123302 : Record 11123303) : Boolean;
    VAR
      XmlNodeTxt@11123303 : Text[1024];
    BEGIN
      XmlNodeTxt := InXMLBoof.SelectSingleNodeText('Basket/CalculationType');
      IF XmlNodeTxt <> '' THEN
        EXIT(XmlNodeTxt = 'wishlist');
    END;

    LOCAL PROCEDURE ReadIdListXML@11123338(VAR InXMLBuff@11123302 : Record 11123303;VAR RecRef@11123305 : RecordRef);
    VAR
      ResultNodeBuffList@11123304 : TEMPORARY Record 11123303;
      FilterHelper@11123303 : Codeunit 11123321;
    BEGIN
      IF InXMLBuff.SelectNodes('Id',ResultNodeBuffList) THEN
        FilterHelper.ParseIdList(ResultNodeBuffList,TempIdList);

      IF InXMLBuff.SelectNodes('Product',ResultNodeBuffList) THEN
        FilterHelper.ParseProductIdList(ResultNodeBuffList,TempIdList);
    END;

    LOCAL PROCEDURE ReadFiltersXML@11123314(VAR InXMLBuff@11123302 : Record 11123303;VAR RecRef@11123305 : RecordRef;QueryString@11123306 : Text[1024]);
    VAR
      ResultNodeBuff@11123304 : TEMPORARY Record 11123303;
      FilterHelper@11123303 : Codeunit 11123321;
    BEGIN
      IF InXMLBuff.SelectSingleNode(QueryString,ResultNodeBuff) THEN
        FilterHelper.ParseFilters(ResultNodeBuff,TempFilterList,TempIdList,RecRef);
    END;

    PROCEDURE FilterIsEmpty@11123315() : Boolean;
    BEGIN
      EXIT(TempFilterList.ISEMPTY);
    END;

    PROCEDURE GetFilterList@11123316(VAR OutFilterList@11123302 : Record 11123330);
    BEGIN
      OutFilterList.RESET;
      IF NOT OutFilterList.ISEMPTY THEN
        OutFilterList.DELETEALL;

      IF TempFilterList.FINDSET THEN
        REPEAT
          OutFilterList.INIT;
          OutFilterList := TempFilterList;
          OutFilterList.INSERT;
        UNTIL TempFilterList.NEXT = 0;
    END;

    PROCEDURE SetDefaultValues@11123318();
    BEGIN
      SortAscending := TRUE;

      LanguageId := '0';
      AccountId := '0';
      AccountType := '0';
      Inventory := 0;
      CalcFunction := '';
      CalcErrorText := '';
      CalcOrderable := TRUE;
      ProductOrderable := TRUE;
      DiscountAmount := 0;
      DocumentState := 0;
      HasVariants := FALSE;
      HasPrepacks := FALSE;
      HasMaterials := FALSE;
      Barcode := '';
      PrepackSpecific := FALSE;
      VATProdPostGroup := '';
      VATBusPostGroup := '';
      PriceIncludesVAT := FALSE;
      PricesIncludingVAT := FALSE;
      Division:= '' ;//<TPZ2503>
      StockMessage := '';//<TPZ3109>
      GetDescriptionNo;
    END;

    LOCAL PROCEDURE GetDescriptionNo@11123322();
    VAR
      Dispatcher@11123303 : Codeunit 11123306;
    BEGIN
      Dispatcher.DispatchInternal('GetParamsDescriptionNo',Rec);
    END;

    PROCEDURE SetValue@11123333(Key@11123303 : Text[80];Value@11123302 : Text[1024]);
    BEGIN
      IF TempKeyValue.GET(Key) THEN BEGIN
        TempKeyValue.Key := Key;
        TempKeyValue.Value := COPYSTR(Value,1,MAXSTRLEN(TempKeyValue.Value));
        TempKeyValue.MODIFY;
      END ELSE BEGIN
        TempKeyValue.INIT;
        TempKeyValue.Key := Key;
        TempKeyValue.Value := COPYSTR(Value,1,MAXSTRLEN(TempKeyValue.Value));
        TempKeyValue.INSERT;
      END;
    END;

    PROCEDURE GetValue@11123332(Key@11123302 : Text[80]) : Text[1024];
    BEGIN
      IF TempKeyValue.GET(Key) THEN
        EXIT(TempKeyValue.Value);
    END;

    PROCEDURE SetExtraFieldListValue@11123348(Key@11123303 : Text[80];Value@11123302 : Text[1024]);
    BEGIN
      IF TempExtraFieldList.GET(Key) THEN BEGIN
        TempExtraFieldList.Key := Key;
        TempExtraFieldList.Value := COPYSTR(Value,1,MAXSTRLEN(TempExtraFieldList.Value));
        TempExtraFieldList.MODIFY;
      END ELSE BEGIN
        TempExtraFieldList.INIT;
        TempExtraFieldList.Key := Key;
        TempExtraFieldList.Value := COPYSTR(Value,1,MAXSTRLEN(TempExtraFieldList.Value));
        TempExtraFieldList.INSERT;
      END;
    END;

    PROCEDURE GetExtraFieldListValue@11123347(Key@11123302 : Text[80]) : Text[1024];
    BEGIN
      IF TempExtraFieldList.GET(Key) THEN
        EXIT(TempExtraFieldList.Value);
    END;

    PROCEDURE SetFilterListValue@11123352(Key@11123303 : Text[80];Value@11123302 : Text[1024]);
    BEGIN
      IF TempFilterList.GET(Key) THEN BEGIN
        TempFilterList.Key := Key;
        TempFilterList.Value := COPYSTR(Value,1,MAXSTRLEN(TempFilterList.Value));
        TempFilterList.MODIFY;
      END ELSE BEGIN
        TempFilterList.INIT;
        TempFilterList.Key := Key;
        TempFilterList.Value := COPYSTR(Value,1,MAXSTRLEN(TempFilterList.Value));
        TempFilterList.INSERT;
      END;
    END;

    PROCEDURE GetFilterListValue@11123351(Key@11123302 : Text[80]) : Text[1024];
    BEGIN
      IF TempFilterList.GET(Key) THEN
        EXIT(TempFilterList.Value);
    END;

    PROCEDURE SetIdListValue@11123341(Key@11123303 : Text[80];Value@11123302 : Text[1024]);
    BEGIN
      IF TempIdList.GET(Key) THEN BEGIN
        TempIdList.Key := Key;
        TempIdList.Value := COPYSTR(Value,1,MAXSTRLEN(TempIdList.Value));
        TempIdList.MODIFY;
      END ELSE BEGIN
        TempIdList.INIT;
        TempIdList.Key := Key;
        TempIdList.Value := COPYSTR(Value,1,MAXSTRLEN(TempIdList.Value));
        TempIdList.INSERT;
      END;
    END;

    PROCEDURE GetIdList@11123343(VAR OutIdList@11123302 : Record 11123330);
    BEGIN
      OutIdList.RESET;
      IF NOT OutIdList.ISEMPTY THEN
        OutIdList.DELETEALL;

      IF TempIdList.FINDSET THEN
        REPEAT
          OutIdList.INIT;
          OutIdList := TempIdList;
          OutIdList.INSERT;
        UNTIL TempIdList.NEXT = 0;
    END;

    PROCEDURE SetLookupValue@11123344(NewValue@11123302 : Text[200]);
    VAR
      NextEntryNo@11123303 : Integer;
    BEGIN
      NextEntryNo := 1;

      TempLookupValue.SETRANGE(Value,NewValue);
      IF TempLookupValue.ISEMPTY THEN BEGIN
        TempLookupValue.RESET;
        IF TempLookupValue.FINDLAST THEN
          NextEntryNo := TempLookupValue."Entry No." + 1;
        TempLookupValue.INIT;
        TempLookupValue."Entry No." := NextEntryNo;
        TempLookupValue.Value := NewValue;
        TempLookupValue.INSERT;
      END;
    END;

    PROCEDURE GetLookupValues@11123346(VAR OutLookupValue@11123302 : Record 11123322);
    BEGIN
      OutLookupValue.RESET;
      IF NOT OutLookupValue.ISEMPTY THEN
        OutLookupValue.DELETEALL;

      IF TempLookupValue.FINDSET THEN
        REPEAT
          OutLookupValue.INIT;
          OutLookupValue := TempLookupValue;
          OutLookupValue.INSERT;
        UNTIL TempLookupValue.NEXT = 0;
    END;

    PROCEDURE GetBooValue@11123335(Key@11123302 : Text[80]) : Boolean;
    VAR
      TextValue@11123303 : Text[1024];
      BoolValue@11123304 : Boolean;
    BEGIN
      TextValue := GetValue(Key);
      IF EVALUATE(BoolValue,TextValue) THEN
        EXIT(BoolValue);
    END;

    PROCEDURE GetIntValue@11123340(Key@11123302 : Text[80]) : Integer;
    VAR
      TextValue@11123303 : Text[1024];
      IntValue@11123304 : Integer;
    BEGIN
      TextValue := GetValue(Key);
      IF EVALUATE(IntValue,TextValue) THEN
        EXIT(IntValue);
    END;

    PROCEDURE GetDecimalValue@11123342(Key@11123302 : Text[80]) : Decimal;
    VAR
      TextValue@11123303 : Text[1024];
      DecimalValue@11123304 : Decimal;
    BEGIN
      TextValue := GetValue(Key);
      IF EVALUATE(DecimalValue,TextValue) THEN
        EXIT(DecimalValue);
    END;

    PROCEDURE GetDateValue@11123345(Key@11123302 : Text[80]) : Date;
    VAR
      TextValue@11123303 : Text[1024];
      DateValue@11123304 : Date;
    BEGIN
      TextValue := GetValue(Key);
      IF EVALUATE(DateValue,TextValue) THEN
        EXIT(DateValue);
    END;

    PROCEDURE GetTimeValue@11123349(Key@11123302 : Text[80]) : Time;
    VAR
      TextValue@11123303 : Text[1024];
      TimeValue@11123304 : Time;
    BEGIN
      TextValue := GetValue(Key);
      IF EVALUATE(TimeValue,TextValue) THEN
        EXIT(TimeValue);
    END;

    PROCEDURE GetDateTimeValue@11123350(Key@11123302 : Text[80]) : DateTime;
    VAR
      TextValue@11123303 : Text[1024];
      DateTimeValue@11123304 : DateTime;
    BEGIN
      TextValue := GetValue(Key);
      IF EVALUATE(DateTimeValue,TextValue) THEN
        EXIT(DateTimeValue);
    END;

    PROCEDURE CopyValuesTo@11123323(VAR ToParams@11123302 : Record 11123310);
    BEGIN
      ToParams.ClearValues;

      IF TempKeyValue.FINDSET THEN
        REPEAT
          ToParams.SetValue(TempKeyValue.Key,TempKeyValue.Value);
        UNTIL TempKeyValue.NEXT = 0;

      IF TempExtraFieldList.FINDSET THEN
        REPEAT
          ToParams.SetExtraFieldListValue(TempExtraFieldList.Key,TempExtraFieldList.Value);
        UNTIL TempExtraFieldList.NEXT = 0;

      IF TempFilterList.FINDSET THEN
        REPEAT
          ToParams.SetFilterListValue(TempFilterList.Key,TempFilterList.Value);
        UNTIL TempFilterList.NEXT = 0;

      IF TempIdList.FINDSET THEN
        REPEAT
          ToParams.SetIdListValue(TempIdList.Key,TempIdList.Value);
        UNTIL TempIdList.NEXT = 0;
    END;

    PROCEDURE ClearValues@11123324();
    BEGIN
      TempKeyValue.RESET;
      TempKeyValue.DELETEALL;

      TempExtraFieldList.RESET;
      TempExtraFieldList.DELETEALL;

      TempFilterList.RESET;
      TempFilterList.DELETEALL;

      TempIdList.RESET;
      TempIdList.DELETEALL;

      TempLookupValue.RESET;
      TempLookupValue.DELETEALL;
    END;

    LOCAL PROCEDURE DefineRealCurrencyId@11123307();
    VAR
      Customer@11123302 : Record 18;
      Contact@11123303 : Record 5050;
      Currency@11123307 : Record 4;
      Webshop@11123306 : Record 11123313;
      RecMgt@11123304 : Codeunit 11123326;
      CustomerHelper@11123305 : Codeunit 11123314;
      CustomerCurrencyId@11123308 : Code[10];
    BEGIN
      CustomerCurrencyId := CurrentCurrencyId;

      CASE AccountType OF
        'Customer' :
          IF RecMgt.GetCustomer(AccountId,Customer,FALSE) THEN
            CustomerCurrencyId := CustomerHelper.GetCustomerCurrency(Customer);
        'Contact' :
          IF RecMgt.GetContact(AccountId,Contact,FALSE) THEN
            CustomerCurrencyId := Contact."Currency Code";
        ELSE BEGIN
          RecMgt.GetWebshop(WebsiteId,Webshop,TRUE);
            IF RecMgt.GetCustomer(Webshop."Template Customer No.",Customer,FALSE) THEN
              CustomerCurrencyId := CustomerHelper.GetCustomerCurrency(Customer);
        END;
      END;

      BaseCurrencyId := CustomerCurrencyId;

      IF CurrentCurrencyId <> CustomerCurrencyId THEN
        IF RecMgt.GetCurrency(CurrentCurrencyId,Currency,FALSE) THEN
          CustomerCurrencyId := Currency.Code;

      CurrentCurrencyId := CustomerCurrencyId;
    END;

    LOCAL PROCEDURE InitializeCurrencyList@11123304();
    VAR
      Settings@11123302 : Codeunit 11123311;
    BEGIN
      Settings.InitCurrencyList(Rec);
    END;

    PROCEDURE GetDocumentType@11123305(VAR InXMLBuff@11123302 : Record 11123303) : Text[1024];
    VAR
      Webshop@11123305 : Record 11123313;
      RecMgt@11123304 : Codeunit 11123326;
      DocumentType@11123303 : Text[1024];
    BEGIN
      DocumentType := ReadStringValueFromXML(InXMLBuff,'//DocumentType');
      IF DocumentType <> '' THEN
        EXIT(DocumentType);

      DocumentType := GetFieldValueByNameFromXML(InXMLBuff,'DocumentType');
      IF DocumentType <> '' THEN
        EXIT(DocumentType);

      IF IsReturnOrder THEN
        EXIT('ReturnOrder');

      IF AccountType = 'Contact' THEN
        EXIT('Quote');

      RecMgt.GetWebshop(WebsiteId,Webshop,TRUE);
      IF Webshop."Order Type" = Webshop."Order Type":: Order THEN
        EXIT('Order')
      ELSE
        EXIT('Quote')
    END;

    PROCEDURE GetBasketType@11123306(VAR InXMLBuff@11123302 : Record 11123303) : Text[1024];
    VAR
      Webshop@11123305 : Record 11123313;
      RecMgt@11123304 : Codeunit 11123326;
    BEGIN
      BasketType := ReadStringValueFromXML(InXMLBuff,'//BasketType');
      IF BasketType <> '' THEN
        EXIT(BasketType);

      RecMgt.GetWebshop(WebsiteId,Webshop,TRUE);
      IF Webshop."Synchronized Basket Type" = Webshop."Synchronized Basket Type":: Order THEN
        EXIT('Order')
      ELSE
        EXIT('Quote')
    END;

    PROCEDURE IsBasket@11123319(VAR InXMLBuff@11123302 : Record 11123303) : Boolean;
    VAR
      Context@11123304 : Codeunit 11123305;
      Basket@11123303 : Boolean;
    BEGIN
      Basket := ReadBoolValueFromXML(InXMLBuff,'//Basket');
      IF NOT Basket THEN
        Basket := Context.GetCurrentOperationName = 'CalculateBasket';

      EXIT(Basket);
    END;

    PROCEDURE IsReturnOrder@11123325() : Boolean;
    VAR
      Context@11123302 : Codeunit 11123305;
    BEGIN
      EXIT(Context.GetCurrentOperationName = 'SaveReturnOrder');
    END;

    BEGIN
    {
      2019-05-20 TPZ/ UCHOUHAN
        Added New Field Division.
        Add code for Division Parameter Collection.
      2020-01-14 TPZ2672 UCHOUHAN
        Added new field 'Long Term Product Title' and 'Short Term Product Title'.
        Add code for Longe term title and short term term title collection.
      001 UTK TPZ3109 03312021 - Added new field 'STockMessage' and related code.
      002 TPZ3154 UTK 05112021 Added new field Ispickuporder and related code for Pickup integration with Sana.
    }
    END.
  }
}

