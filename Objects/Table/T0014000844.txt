OBJECT Table 14000844 Label Element
{
  OBJECT-PROPERTIES
  {
    Date=06/28/17;
    Time=12:00:00 PM;
    Version List=SE0.53.08;
  }
  PROPERTIES
  {
    CaptionML=ENU=Label Element;
    LookupPageID=Page14000903;
    DrillDownPageID=Page14000903;
  }
  FIELDS
  {
    { 1   ;   ;Label Code          ;Code10        ;TableRelation="Label Header";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Label Code }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 3   ;   ;Element No.         ;Integer       ;CaptionML=ENU=Element No.;
                                                   MinValue=1;
                                                   MaxValue=10;
                                                   NotBlank=Yes }
    { 4   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Label,Extended Data;
                                                   OptionString=Label,Extended Data }
    { 11  ;   ;Table ID            ;Integer       ;TableRelation="Label Mapping Table";
                                                   OnValidate=BEGIN
                                                                IF "Table ID" <> 0 THEN BEGIN
                                                                  TESTFIELD("Virtual Field","Virtual Field"::" ");

                                                                  GetLabelHeader;
                                                                  IF TableFilter <> '' THEN
                                                                    IF STRPOS('|' + TableFilter,'|' + DELCHR(FORMAT("Table ID"),'=',',.')) = 0 THEN
                                                                      ERROR(
                                                                        Text001,
                                                                        TableFilter,LabelHeader."Label Usage");
                                                                END;

                                                                CALCFIELDS("Table Name");

                                                                IF "Table ID" <> xRec."Table ID" THEN
                                                                  VALIDATE("Field ID",0);
                                                              END;

                                                   OnLookup=BEGIN
                                                              GetLabelHeader;

                                                              LabelMappingTable.RESET;
                                                              IF TableFilter <> '' THEN
                                                                LabelMappingTable.SETFILTER("Table No.",TableFilter);
                                                              IF PAGE.RUNMODAL(0,LabelMappingTable) = ACTION::LookupOK THEN
                                                                VALIDATE("Table ID",LabelMappingTable."Table No.");
                                                            END;

                                                   CaptionML=ENU=Table ID }
    { 12  ;   ;Field ID            ;Integer       ;TableRelation=Field.No. WHERE (TableNo=FIELD(Table ID));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Field Name");

                                                                IF "Field ID" <> 0 THEN BEGIN
                                                                  TESTFIELD("Virtual Field","Virtual Field"::" ");
                                                                  TESTFIELD("Table ID");

                                                                  Field.GET("Table ID","Field ID");
                                                                  CASE Field.Type OF
                                                                    Field.Type::Text:
                                                                      "Field Type" := "Field Type"::Text;
                                                                    Field.Type::Code:
                                                                      "Field Type" := "Field Type"::Code;
                                                                    Field.Type::Date:
                                                                      "Field Type" := "Field Type"::Date;
                                                                    Field.Type::Time:
                                                                      "Field Type" := "Field Type"::Time;
                                                                    Field.Type::DateFormula:
                                                                      "Field Type" := "Field Type"::DateFormula;
                                                                    Field.Type::Decimal:
                                                                      "Field Type" := "Field Type"::Decimal;
                                                                    Field.Type::Integer:
                                                                      "Field Type" := "Field Type"::Integer;
                                                                    Field.Type::Boolean:
                                                                      "Field Type" := "Field Type"::Boolean;
                                                                    Field.Type::Option:
                                                                      "Field Type" := "Field Type"::Option;
                                                                    ELSE
                                                                      "Field Type" := "Field Type"::Other;
                                                                  END;
                                                                END ELSE
                                                                  "Field Type" := "Field Type"::Integer;
                                                              END;

                                                   CaptionML=ENU=Field ID }
    { 13  ;   ;Table Name          ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Object.Name WHERE (Type=CONST(Table),
                                                                                         ID=FIELD(Table ID)));
                                                   CaptionML=ENU=Table Name;
                                                   Editable=No }
    { 14  ;   ;Field Name          ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Field.FieldName WHERE (TableNo=FIELD(Table ID),
                                                                                             No.=FIELD(Field ID)));
                                                   CaptionML=ENU=Field Name;
                                                   Editable=No }
    { 15  ;   ;Field Type          ;Option        ;CaptionML=ENU=Field Type;
                                                   OptionCaptionML=ENU=" ,Text,Code,Date,Time,DateFormula,Decimal,Integer,Boolean,Option,Other";
                                                   OptionString=[ ,Text,Code,Date,Time,DateFormula,Decimal,Integer,Boolean,Option,Other];
                                                   Editable=No }
    { 17  ;   ;Virtual Field       ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD("Table ID",0);
                                                                TESTFIELD("Field ID",0);
                                                              END;

                                                   CaptionML=ENU=Virtual Field;
                                                   OptionCaptionML=ENU=" ,,,WorkDate,Today,Time,Char,,,,,Custom 1,Custom 2,Custom 3,Custom 4,Custom 5";
                                                   OptionString=[ ,,,WorkDate,Today,Time,Char,,,,,Custom 1,Custom 2,Custom 3,Custom 4,Custom 5] }
    { 18  ;   ;Record No.          ;Integer       ;OnValidate=BEGIN
                                                                IF "Record No." <> 0 THEN BEGIN
                                                                  TESTFIELD("Table ID");

                                                                  GetRecordNoSelectionStrMenu;

                                                                  IF "Record No." > MaxRecordNo THEN
                                                                    ERROR(Text002,MaxRecordNo);
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Table ID");

                                                              GetRecordNoSelectionStrMenu;

                                                              IF RecordNoSelectionStrMenu = '' THEN BEGIN
                                                                MESSAGE(Text003);
                                                                VALIDATE("Record No.",0);
                                                              END ELSE BEGIN
                                                                Selection := STRMENU(RecordNoSelectionStrMenu);

                                                                IF Selection > 0 THEN
                                                                  VALIDATE("Record No.",Selection - 1);
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Record No. }
    { 21  ;   ;Format Length       ;Integer       ;CaptionML=ENU=Format Length;
                                                   BlankZero=Yes }
    { 22  ;   ;Format Number       ;Integer       ;CaptionML=ENU=Format Number;
                                                   BlankZero=Yes }
    { 23  ;   ;Format String       ;Text100       ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Format String }
    { 27  ;   ;Pre Substitution    ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Element No.",10);
                                                              END;

                                                   CaptionML=ENU=Pre Substitution }
    { 28  ;   ;Skip Line If Element Blank;Boolean ;OnValidate=BEGIN
                                                                TESTFIELD("Skip Line If Element Not Blank",FALSE);

                                                                IF "Skip Line If Element Blank" AND ("Line No." <= 0) THEN
                                                                  ERROR(Text004);
                                                              END;

                                                   CaptionML=ENU=Skip Line If Element Blank }
    { 29  ;   ;Skip Line If Element Not Blank;Boolean;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Skip Line If Element Blank",FALSE);

                                                                IF "Skip Line If Element Blank" AND ("Line No." <= 0) THEN
                                                                  ERROR(Text004);
                                                              END;

                                                   CaptionML=ENU=Skip Line If Element Not Blank }
    { 30  ;   ;Char Value          ;Text1         ;OnValidate=BEGIN
                                                                IF "Char Value" <> '' THEN BEGIN
                                                                  TESTFIELD("Virtual Field","Virtual Field"::Char);
                                                                  "Decimal Char Value" := "Char Value"[1];
                                                                END ELSE
                                                                  "Decimal Char Value" := 0;
                                                              END;

                                                   CaptionML=ENU=Char Value }
    { 31  ;   ;Decimal Char Value  ;Integer       ;OnValidate=BEGIN
                                                                IF "Decimal Char Value" <> 0 THEN BEGIN
                                                                  TESTFIELD("Virtual Field","Virtual Field"::Char);
                                                                  IF "Decimal Char Value" >= 32 THEN
                                                                    "Char Value"[1] := "Decimal Char Value"
                                                                  ELSE
                                                                    "Char Value" := '';
                                                                END ELSE
                                                                  "Char Value" := '';
                                                              END;

                                                   CaptionML=ENU=Decimal Char Value;
                                                   MinValue=0;
                                                   MaxValue=255 }
    { 32  ;   ;Cut-out Position    ;Integer       ;CaptionML=ENU=Cut-out Position;
                                                   BlankZero=Yes }
    { 33  ;   ;Cut-out Length      ;Integer       ;CaptionML=ENU=Cut-out Length;
                                                   BlankZero=Yes }
  }
  KEYS
  {
    {    ;Type,Label Code,Line No.,Element No.    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Field@1000000000 : Record 2000000041;
      LabelHeader@1000000002 : Record 14000841;
      LabelMappingTable@1000000003 : Record 14000843;
      PackageLabelFormattingHelp@1000000004 : Report 14000844;
      ItemLabel@1000000005 : Report 14000841;
      CustomerLabel@1000000006 : Report 14000842;
      ResourceLabel@1000000007 : Report 14000845;
      ReceiveLabelFormattingHelp@1240030000 : Report 14000846;
      ReceiveLineLabel@1240030001 : Report 14000847;
      BOLLabelFormattingHelp@1240030003 : Report 14000849;
      BinLabel@1240030002 : Report 14000848;
      TableFilter@1000000008 : Text[250];
      RecordNoSelectionStrMenu@1000000009 : Text[250];
      MaxRecordNo@1000000011 : Integer;
      Selection@1000000010 : Integer;
      Text001@1001 : TextConst 'ENU=Only table %1 are available for mapping in a %2 Label.';
      Text002@1002 : TextConst 'ENU=Maximum Record No. is %1.';
      Text003@1003 : TextConst 'ENU=Only 1 is available.';
      Text004@1004 : TextConst 'ENU=This can only be set for Label Line Elements.';
      Text005@1005 : TextConst 'ENU=%1.COUNTER';

    PROCEDURE FieldDescription@1() : Text[250];
    BEGIN
      CASE TRUE OF
        "Virtual Field" <> "Virtual Field"::" ":
          EXIT(FORMAT("Virtual Field"));
        "Table ID" = 0:
          EXIT('');
        "Field ID" = 0:
          BEGIN
            IF "Table Name" = '' THEN
              CALCFIELDS("Table Name");
            EXIT(STRSUBSTNO(Text005,"Table Name"));
          END;
        ELSE BEGIN
          IF "Table Name" = '' THEN
            CALCFIELDS("Table Name");
          IF "Field Name" = '' THEN
            CALCFIELDS("Field Name");
          EXIT(STRSUBSTNO('"%1"."%2" (%3)',"Table Name","Field Name","Record No."));
        END;
      END;
    END;

    PROCEDURE GetLabelHeader@2();
    VAR
      ExtendedDataHeader@1240030000 : Record 14000961;
    BEGIN
      IF LabelHeader.Code <> "Label Code" THEN BEGIN
        CASE Type OF
          Type::Label:
            LabelHeader.GET("Label Code");
          Type::"Extended Data":
            BEGIN
              ExtendedDataHeader.GET("Label Code");
              LabelHeader.Code := ExtendedDataHeader.Code;
              LabelHeader."Label Usage" := ExtendedDataHeader."Label Usage";
            END;
        END;

        CASE LabelHeader."Label Usage" OF
          LabelHeader."Label Usage"::Package:
            TableFilter := PackageLabelFormattingHelp.GetTableFilter;
          LabelHeader."Label Usage"::Item:
            TableFilter := ItemLabel.GetTableFilter;
          LabelHeader."Label Usage"::Customer:
            TableFilter := CustomerLabel.GetTableFilter;
          LabelHeader."Label Usage"::Resource:
            TableFilter := ResourceLabel.GetTableFilter;
          LabelHeader."Label Usage"::Receive:
            TableFilter := ReceiveLabelFormattingHelp.GetTableFilter;
          LabelHeader."Label Usage"::"Receive Line":
            TableFilter := ReceiveLineLabel.GetTableFilter;
          LabelHeader."Label Usage"::"Bill of Lading":
            TableFilter := BOLLabelFormattingHelp.GetTableFilter;
          LabelHeader."Label Usage"::Bin:
            TableFilter := BinLabel.GetTableFilter;
          ELSE
            TableFilter := '';
        END;
      END;
    END;

    PROCEDURE GetRecordNoSelectionStrMenu@8();
    VAR
      Text@1000000000 : Text[250];
    BEGIN
      GetLabelHeader;

      CASE LabelHeader."Label Usage" OF
        LabelHeader."Label Usage"::Package:
          RecordNoSelectionStrMenu := PackageLabelFormattingHelp.GetRecordNoStrMenu("Table ID");
        LabelHeader."Label Usage"::Item:
          RecordNoSelectionStrMenu := ItemLabel.GetRecordNoStrMenu("Table ID");
        LabelHeader."Label Usage"::Customer:
          RecordNoSelectionStrMenu := CustomerLabel.GetRecordNoStrMenu("Table ID");
        LabelHeader."Label Usage"::Resource:
          RecordNoSelectionStrMenu := ResourceLabel.GetRecordNoStrMenu("Table ID");
        LabelHeader."Label Usage"::Receive:
          RecordNoSelectionStrMenu := ReceiveLabelFormattingHelp.GetRecordNoStrMenu("Table ID");
        LabelHeader."Label Usage"::"Receive Line":
          RecordNoSelectionStrMenu := ReceiveLineLabel.GetRecordNoStrMenu("Table ID");
        LabelHeader."Label Usage"::"Bill of Lading":
          RecordNoSelectionStrMenu := BOLLabelFormattingHelp.GetRecordNoStrMenu("Table ID");
        LabelHeader."Label Usage"::Bin:
          RecordNoSelectionStrMenu := BinLabel.GetRecordNoStrMenu("Table ID");
        ELSE
          RecordNoSelectionStrMenu := '';
      END;

      MaxRecordNo := 0;

      IF RecordNoSelectionStrMenu <> '' THEN BEGIN
        Text := RecordNoSelectionStrMenu;
        WHILE STRPOS(Text,',') <> 0 DO BEGIN
          MaxRecordNo := MaxRecordNo + 1;
          Text := COPYSTR(Text,STRPOS(Text,',') + 1);
        END;
      END;
    END;

    BEGIN
    END.
  }
}

