OBJECT Table 14000566 Suggested Order Line
{
  OBJECT-PROPERTIES
  {
    Date=01/26/21;
    Time=[ 5:15:19 AM];
    Modified=Yes;
    Version List=UBP3.03,TPZ2785;
  }
  PROPERTIES
  {
    OnModify=BEGIN
               "Changed By" := USERID;
             END;

    OnDelete=BEGIN
               IF NOT "User Created Entry" THEN
                 ERROR(Text000);
             END;

    CaptionML=ENU=Suggested Order Line;
    PasteIsValid=No;
    DrillDownPageID=Page14000598;
  }
  FIELDS
  {
    { 2   ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Buy-from Vendor No.;
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Suggested Order Header".No.;
                                                   CaptionML=ENU=Document No. }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 5   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,Account (G/L),Item,,Fixed Asset,Charge (Item)";
                                                   OptionString=[ ,Account (G/L),Item,,Fixed Asset,Charge (Item)] }
    { 6   ;   ;No.                 ;Code50        ;TableRelation=IF (Type=CONST(" ")) "Standard Text"
                                                                 ELSE IF (Type=CONST("Account (G/L)")) "G/L Account"
                                                                 ELSE IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Type=CONST("Charge (Item)")) "Item Charge";
                                                   OnValidate=VAR
                                                                StdTxt@1000 : Record 7;
                                                                ItemCategory@1001 : Record 5722;
                                                                TempSugOrdLine@1002 : TEMPORARY Record 14000566;
                                                                Vend@1003 : Record 23;
                                                              BEGIN
                                                                TempSugOrdLine := Rec;
                                                                INIT;
                                                                Type := TempSugOrdLine.Type;
                                                                "No." := TempSugOrdLine."No.";
                                                                "Location Code" := TempSugOrdLine."Location Code";
                                                                "Variant Code" := TempSugOrdLine."Variant Code";
                                                                "Purchase Reason" := TempSugOrdLine."Purchase Reason";
                                                                "Buy-from Vendor No." := TempSugOrdLine."Buy-from Vendor No.";
                                                                "Document No." := TempSugOrdLine."Document No.";
                                                                IF TempSugOrdLine."User Created Entry" THEN BEGIN
                                                                  "User Created Entry" := TempSugOrdLine."User Created Entry";
                                                                END ELSE BEGIN
                                                                  "Original Quantity" := TempSugOrdLine."Original Quantity";
                                                                  "Original Unit of Measure Code" := TempSugOrdLine."Original Unit of Measure Code";
                                                                END;
                                                                IF "No." = '' THEN BEGIN
                                                                  "Variant Code" := '';
                                                                  EXIT;
                                                                END;
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  "Variant Code" := '';
                                                                END;
                                                                IF Type <> Type::" " THEN BEGIN
                                                                  Quantity := TempSugOrdLine.Quantity;
                                                                END;
                                                                GetSugOrdHeader;
                                                                "Buy-from Vendor No." := SugOrdHeader."Buy-from Vendor No.";
                                                                "Document No." := SugOrdHeader."No.";
                                                                "Expected Receipt Date" := SugOrdHeader."Requested Receipt Date";
                                                                Vend.GET("Buy-from Vendor No.");
                                                                IF Vend."Pay-to Vendor No." <> '' THEN
                                                                  "Pay-to Vendor No." := Vend."Pay-to Vendor No."
                                                                ELSE
                                                                  "Pay-to Vendor No." := "Buy-from Vendor No.";
                                                                "Requested Receipt Date" := SugOrdHeader."Requested Receipt Date";
                                                                "Order Date" := SugOrdHeader."Order Date";
                                                                CASE Type OF
                                                                  Type::" ":
                                                                    BEGIN
                                                                      StdTxt.GET("No.");
                                                                      Description := StdTxt.Description;
                                                                    END;
                                                                  Type::Item:
                                                                    BEGIN
                                                                      TESTFIELD("Location Code");
                                                                      GetItem;
                                                                      Item.TESTFIELD(Blocked,FALSE);
                                                                      Item.TESTFIELD("Gen. Prod. Posting Group");
                                                                      IF Item.Type = Item.Type::Inventory THEN BEGIN
                                                                      Item.TESTFIELD("Inventory Posting Group");
                                                                      "Posting Group" := Item."Inventory Posting Group";
                                                                      END;
                                                                      Description := Item.Description;
                                                                      "Description 2" := Item."Description 2";
                                                                      "Units per Parcel" := Item."Units per Parcel";
                                                                      "Indirect Cost %" := Item."Indirect Cost %";
                                                                      "Allow Invoice Disc." := Item."Allow Invoice Disc.";
                                                                      "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := Item."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := Item."Tax Group Code";
                                                                      "Item Category Code" := Item."Item Category Code";
                                                                      "Product Group Code" := Item."Product Group Code";
                                                                      IF "Item Category Code" <> '' THEN BEGIN
                                                                        ItemCategory.GET("Item Category Code");
                                                                        "Review Code" := ItemCategory."Review Code";
                                                                      END;
                                                                      "Base Unit of Measure Code" := Item."Base Unit of Measure";
                                                                      // using variants - Item PUC may not yet exist
                                                                      IF GetProcUnit THEN BEGIN
                                                                        IF "Requested Receipt Date" <> 0D THEN
                                                                          VALIDATE("Expected Receipt Date", SugOrdHeader."Requested Receipt Date")
                                                                        ELSE
                                                                          VALIDATE("Expected Receipt Date", CALCDATE(STRSUBSTNO('<+%1D>',UBP.CalcLeadTimeDays(ProcUnit)),"Order Date"));
                                                                        SetProcUnitFields(ProcUnit);
                                                                      END;
                                                                      SetPurchUOM;
                                                                      VALIDATE("Unit of Measure Code");
                                                                      SetRedirectwithInvWarning(Rec);
                                                                    END;
                                                                  Type::"Charge (Item)",Type::"Fixed Asset",Type::"Account (G/L)":
                                                                    ERROR(STRSUBSTNO(Text008, Type));
                                                                END;
                                                                UpdateItemReference;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 7   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                VALIDATE("No.");
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 8   ;   ;Posting Group       ;Code20        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group"
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "FA Posting Group";
                                                   CaptionML=ENU=Posting Group;
                                                   Editable=No }
    { 10  ;   ;Expected Receipt Date;Date         ;CaptionML=ENU=Planned Receipt Date }
    { 11  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 12  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 13  ;   ;Unit of Measure     ;Text10        ;CaptionML=ENU=Unit of Measure }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                IF Quantity <> 0 THEN BEGIN
                                                                  GetSetup;
                                                                  IF InvMgtSetup."Force Order Multiple" THEN BEGIN
                                                                    GetProcUnit;
                                                                    IF ProcUnit."Order Multiple" <> 0 THEN
                                                                      IF (Quantity * "Qty. per Unit of Measure") MOD ProcUnit."Order Multiple" <> 0 THEN
                                                                        ERROR(Text003,ProcUnit."Item No.",ProcUnit."Variant Code",ProcUnit."Order Multiple");
                                                                  END;
                                                                  IF InvMgtSetup."Force Order Minimum" AND (NOT "Split New Line") THEN BEGIN
                                                                    GetProcUnit;
                                                                    IF (ProcUnit."Order Minimum" <> 0) AND
                                                                       ((Quantity * "Qty. per Unit of Measure") < ProcUnit."Order Minimum")
                                                                    THEN
                                                                      ERROR(Text004,ProcUnit."Item No.",ProcUnit."Variant Code",ProcUnit."Order Minimum");
                                                                  END;
                                                                END;

                                                                "Quantity (Base)" := CalcBaseQty(Quantity);
                                                                IF "User Created Entry" THEN
                                                                  "Orig. Purchase Quantity (Base)" := "Quantity (Base)";
                                                                RecalcLine(FIELDNO(Quantity));
                                                                UpdateSuggDaysSupply;
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 16  ;   ;Outstanding Quantity;Decimal       ;CaptionML=ENU=Outstanding Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 22  ;   ;Direct Unit Cost    ;Decimal       ;CaptionML=ENU=Direct Unit Cost;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Direct Unit Cost")) }
    { 23  ;   ;Unit Cost (LCY)     ;Decimal       ;CaptionML=ENU=Unit Cost (LCY);
                                                   AutoFormatType=2 }
    { 25  ;   ;VAT %               ;Decimal       ;CaptionML=ENU=VAT %;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 26  ;   ;Quantity Disc. %    ;Decimal       ;CaptionML=ENU=Quantity Disc. %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 27  ;   ;Line Discount %     ;Decimal       ;CaptionML=ENU=Line Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 28  ;   ;Line Discount Amount;Decimal       ;CaptionML=ENU=Line Discount Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 29  ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 30  ;   ;Amount Including VAT;Decimal       ;CaptionML=ENU=Amount Including VAT;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 31  ;   ;Unit Price (LCY)    ;Decimal       ;CaptionML=ENU=Unit Price (LCY);
                                                   AutoFormatType=2 }
    { 32  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=Yes;
                                                   CaptionML=ENU=Allow Invoice Disc. }
    { 34  ;   ;Gross Weight        ;Decimal       ;CaptionML=ENU=Gross Weight;
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=ENU=Net Weight;
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Units per Parcel    ;Decimal       ;CaptionML=ENU=Units per Parcel;
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Unit Volume         ;Decimal       ;CaptionML=ENU=Unit Volume;
                                                   DecimalPlaces=0:5 }
    { 54  ;   ;Indirect Cost %     ;Decimal       ;CaptionML=ENU=Indirect Cost %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 57  ;   ;Outstanding Amount  ;Decimal       ;CaptionML=ENU=Outstanding Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 67  ;   ;Profit %            ;Decimal       ;CaptionML=ENU=Profit %;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 68  ;   ;Pay-to Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Pay-to Vendor No.;
                                                   Editable=No }
    { 69  ;   ;Inv. Discount Amount;Decimal       ;CaptionML=ENU=Inv. Discount Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 70  ;   ;Vendor Item No.     ;Text50        ;CaptionML=ENU=Vendor Item No. }
    { 74  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 75  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=ENU=VAT Calculation Type;
                                                   OptionCaptionML=ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 78  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=ENU=Transaction Type }
    { 79  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=ENU=Transport Method }
    { 81  ;   ;Entry Point         ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=ENU=Entry Point }
    { 82  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=ENU=Area }
    { 83  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=ENU=Transaction Specification }
    { 85  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=ENU=Tax Area Code }
    { 86  ;   ;Tax Liable          ;Boolean       ;CaptionML=ENU=Tax Liable }
    { 87  ;   ;Tax Group Code      ;Code20        ;TableRelation="Tax Group";
                                                   CaptionML=ENU=Tax Group Code }
    { 88  ;   ;Use Tax             ;Boolean       ;CaptionML=ENU=Use Tax }
    { 89  ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 90  ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 91  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code;
                                                   Editable=No }
    { 92  ;   ;Outstanding Amount (LCY);Decimal   ;CaptionML=ENU=Outstanding Amount (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 99  ;   ;VAT Base Amount     ;Decimal       ;CaptionML=ENU=VAT Base Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 100 ;   ;Unit Cost           ;Decimal       ;CaptionML=ENU=Unit Cost;
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 101 ;   ;System-Created Entry;Boolean       ;CaptionML=ENU=System-Created Entry;
                                                   Editable=No }
    { 103 ;   ;Line Amount         ;Decimal       ;CaptionML=ENU=Line Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Line Amount")) }
    { 104 ;   ;VAT Difference      ;Decimal       ;CaptionML=ENU=VAT Difference;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 105 ;   ;Inv. Disc. Amount to Invoice;Decimal;
                                                   CaptionML=ENU=Inv. Disc. Amount to Invoice;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 106 ;   ;VAT Identifier      ;Code10        ;CaptionML=ENU=VAT Identifier;
                                                   Editable=No }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   OnValidate=BEGIN
                                                                GetProcUnit;
                                                                IF (ProcUnit."Replenishment Source Type" = ProcUnit."Replenishment Source Type"::Vendor) AND
                                                                   (ProcUnit."Replenishment Source Code" <> "Buy-from Vendor No.") THEN
                                                                  VALIDATE("Override Vendor No.",ProcUnit."Replenishment Source Code")
                                                                ELSE
                                                                  IF "Override Vendor No." <> '' THEN
                                                                    VALIDATE("Override Vendor No.",'');

                                                                IF "Requested Receipt Date" <> 0D THEN BEGIN
                                                                  IF (SugOrdHeader."Requested Receipt Date" <> "Expected Receipt Date") THEN
                                                                    VALIDATE("Expected Receipt Date", SugOrdHeader."Requested Receipt Date")
                                                                END ELSE
                                                                  VALIDATE("Expected Receipt Date", CALCDATE(STRSUBSTNO('<+%1D>',UBP.CalcLeadTimeDays(ProcUnit)),"Order Date"));

                                                                SetPurchUOM;
                                                                VALIDATE("Unit of Measure Code");
                                                                SetRedirectwithInvWarning(Rec);
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE "Unit of Measure";
                                                   OnValidate=VAR
                                                                UnitOfMeasure@1000 : Record 204;
                                                                UOMMgt@1001 : Codeunit 5402;
                                                                OrderMultipleQty@1240020000 : Decimal;
                                                                NewQtyBase@1240020001 : Decimal;
                                                              BEGIN
                                                                IF "Unit of Measure Code" = '' THEN BEGIN
                                                                  "Unit of Measure Code" := Rec."Base Unit of Measure Code";
                                                                  UnitOfMeasure.GET("Unit of Measure Code");
                                                                  "Unit of Measure" := UnitOfMeasure.Description;
                                                                END ELSE BEGIN
                                                                  UnitOfMeasure.GET("Unit of Measure Code");
                                                                  "Unit of Measure" := UnitOfMeasure.Description;
                                                                END;
                                                                IF (Type = Type::Item) AND ("No." <> '') THEN BEGIN
                                                                  GetItem;
                                                                  "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
                                                                  "Gross Weight" := Item."Gross Weight" * "Qty. per Unit of Measure";
                                                                  "Net Weight" := Item."Net Weight" * "Qty. per Unit of Measure";
                                                                  "Unit Volume" := Item."Unit Volume" * "Qty. per Unit of Measure";
                                                                  "Units per Parcel" := ROUND(Item."Units per Parcel" / "Qty. per Unit of Measure",0.00001);
                                                                END ELSE
                                                                  "Qty. per Unit of Measure" := 1;

                                                                NewQtyBase := "Orig. Purchase Quantity (Base)";
                                                                GetProcUnit;
                                                                IF (ProcUnit."Order Minimum" > 0) AND ("Quantity (Base)" > 0) THEN BEGIN
                                                                  IF "Quantity (Base)" < ProcUnit."Order Minimum" THEN
                                                                    NewQtyBase := ProcUnit."Order Minimum";
                                                                END;

                                                                IF (ProcUnit."Order Multiple" > 0) AND ("Quantity (Base)" > 0) THEN BEGIN
                                                                  OrderMultipleQty := "Quantity (Base)" MOD ProcUnit."Order Multiple";
                                                                  IF OrderMultipleQty <> 0 THEN
                                                                    NewQtyBase := "Quantity (Base)" + (ProcUnit."Order Multiple"  - OrderMultipleQty);
                                                                END;

                                                                VALIDATE(Quantity, ROUND(NewQtyBase / "Qty. per Unit of Measure",1.0,'>'));
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 5415;   ;Quantity (Base)     ;Decimal       ;CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 5416;   ;Outstanding Qty. (Base);Decimal    ;CaptionML=ENU=Outstanding Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=ENU=Responsibility Center;
                                                   Editable=No }
    { 5705;   ;Cross-Reference No. ;Code20        ;CaptionML=ENU=Cross-Reference No. }
    { 5706;   ;Unit of Measure (Cross Ref.);Code10;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=ENU=Unit of Measure (Cross Ref.) }
    { 5707;   ;Cross-Reference Type;Option        ;CaptionML=ENU=Cross-Reference Type;
                                                   OptionCaptionML=ENU=" ,Customer,Vendor,Bar Code";
                                                   OptionString=[ ,Customer,Vendor,Bar Code] }
    { 5708;   ;Cross-Reference Type No.;Code30    ;CaptionML=ENU=Cross-Reference Type No. }
    { 5709;   ;Item Category Code  ;Code20        ;TableRelation="Item Category";
                                                   CaptionML=ENU=Item Category Code }
    { 5710;   ;Nonstock            ;Boolean       ;CaptionML=ENU=Nonstock }
    { 5711;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   CaptionML=ENU=Purchasing Code }
    { 5712;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=ENU=Product Group Code }
    { 5790;   ;Requested Receipt Date;Date        ;CaptionML=ENU=Requested Receipt Date }
    { 5791;   ;Promised Receipt Date;Date         ;CaptionML=ENU=Promised Receipt Date }
    { 5792;   ;Lead Time Calculation;DateFormula  ;CaptionML=ENU=Lead Time Calculation }
    { 5793;   ;Inbound Whse. Handling Time;DateFormula;
                                                   CaptionML=ENU=Inbound Whse. Handling Time }
    { 5794;   ;Planned Receipt Date;Date          ;CaptionML=ENU=NAV Planned Receipt Date }
    { 5795;   ;Order Date          ;Date          ;CaptionML=ENU=Order Date }
    { 51430;  ;Vendor Priority     ;Integer       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Vendor Priority;
                                                   Description=TPZ2323;
                                                   Editable=No }
    { 14000551;;Original Quantity  ;Decimal       ;CaptionML=ENU=Original Quantity }
    { 14000552;;Original Unit of Measure Code;Code10;
                                                   CaptionML=ENU=Original Unit of Measure Code;
                                                   Editable=No }
    { 14000553;;Changed By         ;Code60        ;CaptionML=ENU=Changed By;
                                                   Editable=No }
    { 14000554;;Purchase Reason    ;Option        ;CaptionML=ENU=Purchase Reason;
                                                   OptionCaptionML=ENU=Order Point,Line Point,Min/Max,Seasonal,Do Not Restock Neg.,No Usage Neg.,Target Stock Level,Lead Time Horiz.,Ext. Text,Adj. MinSOQ,Manual;
                                                   OptionString=Order Point,Line Point,Min/Max,Seasonal,Do Not Restock Neg.,No Usage Neg.,Target Stock Level,Lead Time Horiz.,Ext. Text,Adj. MinSOQ,Manual;
                                                   Editable=No }
    { 14000556;;Item Class Ranking ;Integer       ;CaptionML=ENU=Item Class Ranking }
    { 14000557;;Item Class Description;Text30     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Item Class".Description WHERE (Ranking=FIELD(Item Class Ranking)));
                                                   CaptionML=ENU=Item Class Description;
                                                   Editable=No }
    { 14000558;;Line Net Weight    ;Decimal       ;CaptionML=ENU=Line Net Weight }
    { 14000559;;Line Gross Weight  ;Decimal       ;CaptionML=ENU=Line Gross Weight }
    { 14000560;;Line Volume        ;Decimal       ;CaptionML=ENU=Line Volume }
    { 14000561;;Purchase Line Exists;Boolean      ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purchase Line" WHERE (Type=CONST(Item),
                                                                                            No.=FIELD(No.),
                                                                                            Variant Code=FIELD(Variant Code),
                                                                                            Drop Shipment=CONST(No),
                                                                                            Outstanding Quantity=FILTER(>0),
                                                                                            Location Code=FIELD(Location Code),
                                                                                            Document Type=CONST(Order)));
                                                   CaptionML=ENU=Purchase Lines Exist;
                                                   Editable=No }
    { 14000562;;Qty. Available For Sale;Decimal   ;CaptionML=ENU=Qty. Available For Sale;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 14000563;;Qty. Due In        ;Decimal       ;CaptionML=ENU=Qty. Due In;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 14000564;;Average Lead Time (Days);Decimal  ;CaptionML=ENU=Average Lead Time (Days);
                                                   DecimalPlaces=0:2 }
    { 14000565;;Seasonal Purchase  ;Boolean       ;CaptionML=ENU=Seasonal Purchase;
                                                   Editable=No }
    { 14000567;;Qty. to Transfer (Base);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Surplus Inventory Value"."Quantity To Transfer" WHERE (Item No.=FIELD(No.),
                                                                                                                           Variant Code=FIELD(Variant Code),
                                                                                                                           Suggested Order No.=FIELD(Document No.)));
                                                   CaptionML=ENU=Qty. to Transfer (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 14000568;;Qty. Transferred (Base);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Surplus Inventory Value"."Quantity Transferred" WHERE (Buy-from Vendor No.=FIELD(Buy-from Vendor No.),
                                                                                                                           Suggested Order No.=FIELD(Document No.),
                                                                                                                           Item No.=FIELD(No.),
                                                                                                                           Variant Code=FIELD(Variant Code)));
                                                   CaptionML=ENU=Qty. Transferred (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 14000569;;Override Vendor No.;Code20        ;TableRelation=Vendor.No.;
                                                   OnValidate=BEGIN
                                                                IF "Purchase Reason" = "Purchase Reason"::"Ext. Text" THEN
                                                                  ERROR(STRSUBSTNO(Text001,FORMAT("Purchase Reason")));
                                                                IF "Override Vendor No." = "Buy-from Vendor No." THEN
                                                                  ERROR(Text002);

                                                                RecalcLine(FIELDNO("Buy-from Vendor No."));
                                                              END;

                                                   CaptionML=ENU=Override Vendor No. }
    { 14000570;;Ranking Code       ;Code10        ;CaptionML=ENU=Ranking Code;
                                                   Editable=No }
    { 14000571;;Suggested Ave. Days Supply;Decimal;CaptionML=ENU=Suggested Ave. Days Supply;
                                                   DecimalPlaces=0:2 }
    { 14000572;;Summarize Variant Detail;Boolean  ;CaptionML=ENU=Summarize Variant Detail;
                                                   Editable=No }
    { 14000573;;PO Vendor No.      ;Code20        ;TableRelation=Vendor.No.;
                                                   CaptionML=ENU=PO Vendor No. }
    { 14000574;;PO Location Code   ;Code10        ;TableRelation=Location.Code;
                                                   CaptionML=ENU=PO Location Code }
    { 14000575;;Minimum Order Qty. ;Decimal       ;CaptionML=ENU=Minimum Order Qty.;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 14000576;;Maximum Order Qty. ;Decimal       ;CaptionML=ENU=Maximum Order Qty.;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 14000578;;Item Usage         ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Item Usage" WHERE (Location Code=FIELD(Location Code),
                                                                                         Item No.=FIELD(No.),
                                                                                         Variant Code=FIELD(Variant Code)));
                                                   CaptionML=ENU=Item Usage;
                                                   Editable=No }
    { 14000579;;Calculation Lines  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Calculation Line" WHERE (Location Code=FIELD(Location Code),
                                                                                               Item No.=FIELD(No.),
                                                                                               Variant Code=FIELD(Variant Code)));
                                                   CaptionML=ENU=Calculation Lines;
                                                   Editable=No }
    { 14000580;;Location Inv. Roll Up;Boolean     ;OnLookup=BEGIN
                                                              ShowLocInvRollUp;
                                                            END;

                                                   CaptionML=ENU=Location Inv. Roll Up;
                                                   Editable=No }
    { 14000581;;Replenishment Path ;Boolean       ;OnLookup=BEGIN
                                                              ShowReplPath;
                                                            END;

                                                   CaptionML=ENU=Replenishment Path;
                                                   Editable=No }
    { 14000582;;Forecast View      ;Boolean       ;OnLookup=BEGIN
                                                              ShowForecast;
                                                            END;

                                                   CaptionML=ENU=Forecast View;
                                                   Editable=No }
    { 14000583;;Surplus Available  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Surplus Inventory Value" WHERE (Item No.=FIELD(No.),
                                                                                                      Variant Code=FIELD(Variant Code),
                                                                                                      Surplus Available=CONST(Yes)));
                                                   CaptionML=ENU=Surplus Available;
                                                   Editable=No }
    { 14000585;;Procurement Unit   ;Boolean       ;OnLookup=BEGIN
                                                              ShowProcurementUnit;
                                                            END;

                                                   CaptionML=ENU=Procurement Unit;
                                                   Editable=No }
    { 14000586;;Alert              ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("AFP Alert Line" WHERE (Item No.=FIELD(No.),
                                                                                             Location Code=FIELD(Location Code),
                                                                                             Variant Code=FIELD(Variant Code)));
                                                   OnLookup=BEGIN
                                                              ShowAlert;
                                                            END;

                                                   CaptionML=ENU=Alert;
                                                   Editable=No }
    { 14000587;;Container Plan No. ;Code20        ;CaptionML=ENU=Container Plan No.;
                                                   Editable=No }
    { 14000588;;Container No.      ;Code20        ;CaptionML=ENU=Container No.;
                                                   Editable=No }
    { 14000589;;Split New Line     ;Boolean       ;CaptionML=ENU=Split New Line }
    { 14000590;;Order Multiple     ;Decimal       ;CaptionML=ENU=Order Multiple;
                                                   DecimalPlaces=0:2;
                                                   Editable=No }
    { 14000591;;Order Minimum      ;Decimal       ;CaptionML=ENU=Order Minimum;
                                                   DecimalPlaces=0:2;
                                                   Editable=No }
    { 14000592;;Quantity Less Transfer;Decimal    ;CaptionML=ENU=Quantity Less Transfer;
                                                   Editable=No }
    { 14000593;;Review Code        ;Code10        ;TableRelation="AFP Review Code".Code;
                                                   CaptionML=ENU=Review Code }
    { 14000595;;Line Reviewed      ;Boolean       ;CaptionML=ENU=Line Reviewed }
    { 14000596;;Periods With Sales ;Integer       ;CaptionML=ENU=Periods With Sales;
                                                   Editable=No }
    { 14000597;;Forecast Trend     ;Text30        ;CaptionML=ENU=Forecast Trend;
                                                   Editable=No }
    { 14000598;;EOQ Quantity       ;Decimal       ;CaptionML=ENU=EOQ Quantity;
                                                   DecimalPlaces=0:2;
                                                   Editable=No }
    { 14000599;;Replenishment Hierarchy;Option    ;CaptionML=ENU=Replenishment Hierarchy;
                                                   OptionCaptionML=ENU=" ,Hub,Spoke,Hub and Spoke";
                                                   OptionString=[ ,Hub,Spoke,Hub and Spoke] }
    { 14000600;;Critical Need      ;Boolean       ;CaptionML=ENU=Critical Need;
                                                   Editable=No }
    { 14097450;;Critical Location  ;Option        ;CaptionML=ENU=Critical Location;
                                                   OptionCaptionML=ENU=" ,Hub,Spoke,Hub and Spoke";
                                                   OptionString=[ ,Hub,Spoke,Hub and Spoke];
                                                   Editable=No }
    { 14097451;;Base Unit of Measure Code;Code10  ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE "Unit of Measure";
                                                   CaptionML=ENU=Base Unit of Measure Code }
    { 14097452;;Purchaser Code     ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Purchaser Code }
    { 14097453;;User Created Entry ;Boolean       ;CaptionML=ENU=User Created Entry;
                                                   Editable=No }
    { 14097454;;Orig. Purchase Quantity (Base);Decimal;
                                                   CaptionML=ENU=Original Purchase Quantity (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 14097455;;Auto-Forc. Adj. Warning;Boolean   ;CaptionML=ENU=Auto-Forecast Adjust Warning;
                                                   Editable=No }
    { 14097456;;Qty. (Base) from Redirects;Decimal;OnLookup=BEGIN
                                                              LookupRedirectwithInvWarning();
                                                            END;

                                                   CaptionML=ENU=Avail Qty. (Base) from Redirects;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 14097457;;Horizon Date       ;Date          ;CaptionML=ENU=Horizon Date;
                                                   Editable=No }
    { 14097458;;Division Code      ;Code20        ;CaptionML=ENU=Division Code }
    { 14097459;;Qty. (Base) Expiring Inv.;Decimal ;CaptionML=ENU=Expiring Inventory Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 14097460;;Lead Time Message  ;Text30        ;CaptionML=ENU=Lead Time Message;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Buy-from Vendor No.,Document No.,Line No.;
                                                   Clustered=Yes }
    {    ;Buy-from Vendor No.,Document No.,Purchase Reason,Override Vendor No.;
                                                   SumIndexFields=Line Amount,Line Net Weight,Line Gross Weight,Line Volume;
                                                   MaintainSIFTIndex=No }
    {    ;Container Plan No.,Buy-from Vendor No.,Document No.,Container No.;
                                                   SumIndexFields=Line Net Weight,Line Gross Weight,Line Volume }
    {    ;No.                                      }
    {    ;Line Amount                              }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@14000551 : TextConst 'ENU=You cannot delete a single suggested order line.  Zero the line quantity or delete the entire order.';
      SugOrdHeader@1000 : Record 14000565;
      ProcUnit@14000502 : Record 14000555;
      TempPurchHeader@14000504 : TEMPORARY Record 38;
      UBP@1003 : Codeunit 14000564;
      InvMgtSetup@1240030001 : Record 14000551;
      Item@1240030006 : Record 27;
      Text001@14000552 : TextConst 'ENU=Override Vendor is not valid with a Purchase Reason of %1.';
      Text002@14000553 : TextConst 'ENU=The Override Vendor No. must be different from the Buy-From Vendor No. on the Suggested Order Header.';
      Text003@14000554 : TextConst 'ENU=The Quantity Base entered for %1 %2 must be a multiple of %3.';
      Text004@14000555 : TextConst 'ENU=The Quantity Base entered for %1 %2 must not be less than Order Minimum %3.';
      Text005@1240020001 : TextConst 'ENU=Non Sea.';
      Text006@1240020002 : TextConst 'ENU=Sea.';
      Text007@1240020003 : TextConst 'ENU=No Trend';
      Text008@1001 : TextConst 'ENU=You cannot use suggested orders for %1''s.';
      SKU@1240020000 : Record 5700;
      SetupRead@1240020005 : Boolean;

    LOCAL PROCEDURE GetSetup@1240020006();
    BEGIN
      IF NOT SetupRead THEN BEGIN
        SetupRead := TRUE;
        InvMgtSetup.GET;
      END;
    END;

    LOCAL PROCEDURE GetSugOrdHeader@4();
    BEGIN
      TESTFIELD("Document No.");
      TESTFIELD("Buy-from Vendor No.");
      IF ("Buy-from Vendor No." <> SugOrdHeader."Buy-from Vendor No.") OR ("Document No." <> SugOrdHeader."No.") THEN BEGIN
        SugOrdHeader.GET("Buy-from Vendor No.","Document No.");
      END;
    END;

    PROCEDURE SetSugOrdHeader@10(NewSugOrdHeader@1000 : Record 14000565);
    BEGIN
      SugOrdHeader := NewSugOrdHeader;
    END;

    LOCAL PROCEDURE GetItem@12();
    BEGIN
      TESTFIELD("No.");
      IF Item."No." <> "No." THEN
        Item.GET("No.");
    END;

    LOCAL PROCEDURE SetPurchUOM@38();
    VAR
      ItemUnitOfMeasure@1000 : Record 5404;
    BEGIN
      "Unit of Measure Code" := '';
      "Qty. per Unit of Measure" := 1;
      IF (ProcUnit."Purchase Unit of Measure" <> '') THEN BEGIN
        "Unit of Measure Code" := ProcUnit."Purchase Unit of Measure";
      END ELSE BEGIN
        GetItem;
        IF (Item."Purch. Unit of Measure" <> '') THEN
          "Unit of Measure Code" := Item."Purch. Unit of Measure"
        ELSE
          "Unit of Measure Code" := Item."Base Unit of Measure";
      END;
    END;

    LOCAL PROCEDURE SetProcUnitFields@13(VAR CurrProcUnit@1000 : Record 14000555);
    BEGIN
      Nonstock := CurrProcUnit."Nonstock Unit";
      "Item Class Ranking" := CurrProcUnit."Item Class Ranking";
      FindForecastFields;
      "Average Lead Time (Days)" := UBP.CalcLeadTimeDays(CurrProcUnit);
      "Ranking Code" := CurrProcUnit."Ranking Code";
      "Periods With Sales" := CurrProcUnit."Periods With Sales";
      "Summarize Variant Detail" := CurrProcUnit."Summarize Variant Detail";
      "Order Multiple" := CurrProcUnit."Order Multiple";
      "Order Minimum" := CurrProcUnit."Order Minimum";
      "Replenishment Hierarchy" := CurrProcUnit."Replenishment Hierarchy";
      "Division Code" := CurrProcUnit."Division Code";
    END;

    LOCAL PROCEDURE GetFieldCaption@31(FieldNo@14000500 : Integer) : Text[30];
    VAR
      Field@14000501 : Record 2000000041;
    BEGIN
      Field.GET(DATABASE::"Purchase Line",FieldNo);
      EXIT(Field."Field Caption");
    END;

    LOCAL PROCEDURE GetCaptionClass@34(FieldNo@14000500 : Integer) : Text[80];
    BEGIN
      EXIT('2,0,' + GetFieldCaption(FieldNo));
    END;

    PROCEDURE ShowCalculationLines@1();
    VAR
      CalcLine@1000 : Record 14000569;
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      CalcLine.RESET;
      CalcLine.SETRANGE("Location Code","Location Code");
      CalcLine.SETRANGE("Item No.","No.");
      IF "User Created Entry" THEN
        CalcLine.SETFILTER("Line No.", '<=%1', 200000);
      IF "Summarize Variant Detail" THEN
        CalcLine.SETFILTER("Variant Code",'=%1','')
      ELSE
        CalcLine.SETRANGE("Variant Code","Variant Code");
      PAGE.RUNMODAL(PAGE::"Calculation Lines",CalcLine);
    END;

    PROCEDURE ShowItem@1240030006();
    BEGIN
      Item.RESET;
      Item.SETRANGE("No.","No.");
      PAGE.RUNMODAL(PAGE::"Item Card",Item);
    END;

    PROCEDURE ShowProcurementUnit@2();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      ProcUnit.RESET;
      ProcUnit.SETRANGE("Location Code","Location Code");
      ProcUnit.SETRANGE("Item No.","No.");
      ProcUnit.SETRANGE("Variant Code","Variant Code");
      PAGE.RUNMODAL(PAGE::"Procurement Unit Card",ProcUnit);
    END;

    PROCEDURE ShowPurchLines@5();
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      PurchLine.RESET;
      PurchLine.SETCURRENTKEY(
        Type,"No.","Variant Code","Drop Shipment","Location Code",
        "Document Type","Expected Receipt Date");
      PurchLine.SETRANGE(Type,PurchLine.Type::Item);
      PurchLine.SETRANGE("No.","No.");
      IF NOT "Summarize Variant Detail" THEN
        PurchLine.SETRANGE("Variant Code","Variant Code");
      PurchLine.SETRANGE("Location Code","Location Code");
      PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
      PurchLine.SETRANGE("Drop Shipment",FALSE);
      PAGE.RUNMODAL(PAGE::"Open Purchase Lines",PurchLine);
    END;

    PROCEDURE ShowReplPath@1240030002();
    VAR
      CreateLocInvRollUP@1002 : Codeunit 14000574;
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      GetProcUnit;
      CreateLocInvRollUP.CalcRollUp(ProcUnit,TRUE,1,0D);
    END;

    PROCEDURE ShowItemUsage@1240030000();
    VAR
      ItemUsage@1000 : Record 14000557;
    BEGIN
      ItemUsage.RESET;
      ItemUsage.SETCURRENTKEY(
        "Location Code","Item No.","Variant Code","Starting Date","Ending Date");
      ItemUsage.SETRANGE("Location Code","Location Code");
      ItemUsage.SETRANGE("Item No.","No.");
      IF "Summarize Variant Detail" THEN
        ItemUsage.SETRANGE("Variant Code",'')
      ELSE
        ItemUsage.SETRANGE("Variant Code","Variant Code");
      ItemUsage.SETFILTER("Source No.",'=%1','');
      PAGE.RUNMODAL(PAGE::"Item Usage List",ItemUsage);
    END;

    PROCEDURE ShowForecast@1240030001();
    VAR
      ForecastView@1000 : Page 14002661;
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      ProcUnit.RESET;
      ProcUnit.SETRANGE("Location Code","Location Code");
      ProcUnit.SETRANGE("Item No.","No.");
      IF "Summarize Variant Detail" THEN
        ProcUnit.SETRANGE("Variant Code",'')
      ELSE
        ProcUnit.SETRANGE("Variant Code","Variant Code");
      ProcUnit.FIND('-');
      CLEAR(ForecastView);
      IF "Horizon Date" <> 0D THEN
        ForecastView.SetLTHDate("Horizon Date");
      ForecastView.SetProcUnitandSourceNo(ProcUnit,'');
      ForecastView.RUNMODAL;
    END;

    PROCEDURE RecalcLine@3(CurrFieldNo@1001 : Integer);
    VAR
      PurchPriceCalcMgt@1000 : Codeunit 7010;
      TempPurchLine@1002 : TEMPORARY Record 39;
      BypassPurchPriceCalc@1240020000 : Boolean;
    BEGIN
      GetTempPurchHeader;

      IF TempPurchLine.GET(TempPurchHeader."Document Type", TempPurchHeader."No.",  Rec."Line No.") THEN
        TempPurchLine.DELETE;

      TempPurchLine.INIT;
      TempPurchLine.SetPurchHeader(TempPurchHeader);
      TempPurchLine.TRANSFERFIELDS(Rec);
      IF (TempPurchLine."Buy-from Vendor No." <> TempPurchHeader."Buy-from Vendor No.") THEN
        TempPurchLine."Buy-from Vendor No." := TempPurchHeader."Buy-from Vendor No.";
      IF (TempPurchLine."Pay-to Vendor No." <> TempPurchHeader."Pay-to Vendor No.") THEN
        TempPurchLine."Pay-to Vendor No." := TempPurchHeader."Pay-to Vendor No.";
      TempPurchLine.SuspendStatusCheck(TRUE);
      TempPurchLine."Document No." := TempPurchHeader."No.";
      TempPurchLine."Document Type" := TempPurchHeader."Document Type";
      TempPurchLine."Line No." := Rec."Line No.";

      "Currency Code" := TempPurchHeader."Currency Code";
      "Gen. Bus. Posting Group" := TempPurchHeader."Gen. Bus. Posting Group";
      "VAT Bus. Posting Group" := TempPurchHeader."VAT Bus. Posting Group";
      "Tax Area Code" := TempPurchHeader."Tax Area Code";
      "Tax Liable" := TempPurchHeader."Tax Liable";

      OnBeforePurchPriceCalcSuggOrdLine(BypassPurchPriceCalc,Rec,TempPurchHeader,TempPurchLine);
      IF NOT BypassPurchPriceCalc THEN BEGIN
        IF NOT InvMgtSetup."Bypass Sug. Order Price Calc." THEN BEGIN
      PurchPriceCalcMgt.FindPurchLinePrice(TempPurchHeader,TempPurchLine,0);
      PurchPriceCalcMgt.FindPurchLineLineDisc(TempPurchHeader,TempPurchLine);
      TempPurchLine.VALIDATE("Direct Unit Cost");
        END;
      END;
      CopyAmountsFromPurchLine(TempPurchLine);

      CALCFIELDS("Qty. to Transfer (Base)","Qty. Transferred (Base)");
      IF ("Qty. to Transfer (Base)" > 0) OR ("Qty. Transferred (Base)" > 0) THEN
        ReCalcLineTotals
      ELSE BEGIN
        "Quantity Less Transfer" := Quantity;
        "Line Net Weight" := "Quantity Less Transfer" * "Net Weight";
        "Line Gross Weight" := "Quantity Less Transfer" * "Gross Weight";
        "Line Volume" := "Quantity Less Transfer" * "Unit Volume";
      END;
    END;

    PROCEDURE FindForecastFields@1240020000();
    VAR
      LocInvPeriod@1001 : Record 14000553;
      ItemUsage@1000 : Record 14000557;
      UsagePerDay@1002 : Decimal;
    BEGIN
      IF LocInvPeriod."Location Code" <> "Location Code" THEN BEGIN
        LocInvPeriod.RESET;
        LocInvPeriod.SETCURRENTKEY("Location Code","Period End Closed");
        LocInvPeriod.SETRANGE("Location Code","Location Code");
        LocInvPeriod.SETRANGE("Period End Closed",TRUE);
        IF NOT LocInvPeriod.FINDLAST THEN
          LocInvPeriod.INIT;
      END;
      IF LocInvPeriod."Period End Closed" THEN BEGIN
        ItemUsage.RESET;
        ItemUsage.SETCURRENTKEY(
          "Location Code","Item No.","Variant Code","Starting Date","Ending Date");
        ItemUsage.SETRANGE("Location Code","Location Code");
        ItemUsage.SETRANGE("Item No.","No.");
        ItemUsage.SETRANGE("Variant Code","Variant Code");
        ItemUsage.SETRANGE("Starting Date",LocInvPeriod."Starting Date");
        ItemUsage.SETRANGE("Ending Date",LocInvPeriod."Ending Date");
        ItemUsage.SETFILTER("Source No.",'=%1','');
        IF ItemUsage.FINDFIRST THEN;
        "Forecast Trend" := Text007;
        IF ItemUsage."Re-For. Non Seasonal Trend %" <> 0 THEN
          "Forecast Trend" := Text005 + ' ' + FORMAT(ROUND(ItemUsage."Re-For. Non Seasonal Trend %",0.1)) + '%';
        IF ItemUsage."Re-For. Seasonal Trend %" <> 0 THEN
          "Forecast Trend" := Text006 + ' ' + FORMAT(ROUND(ItemUsage."Re-For. Seasonal Trend %",0.1)) + '%';
      END;
    END;

    PROCEDURE ShowSurplusAvailable@1240030003();
    VAR
      SurplusAvailable@1000 : Page 14000532;
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      CLEAR(SurplusAvailable);
      IF NOT "Summarize Variant Detail" THEN
        SurplusAvailable.LoadInfo(
          "No.","Variant Code","Location Code",("Outstanding Qty. (Base)" - "Qty. Transferred (Base)"),
          "Buy-from Vendor No.",1,"Document No.","Line No.")
      ELSE
        SurplusAvailable.LoadInfo(
          "No.",'',"Location Code",("Outstanding Qty. (Base)" - "Qty. Transferred (Base)"),
          "Buy-from Vendor No.",1,"Document No.","Line No.");
      SurplusAvailable.RUNMODAL;
      ReCalcLineTotals;
    END;

    PROCEDURE ShowLocInvRollUp@1240030004();
    VAR
      Text001@1240030000 : TextConst 'ENU=Location Inventory Rollup is not Enabled';
      LocInvRollUpRTC@1240020000 : Page 14097475;
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      GetSetup;
      IF InvMgtSetup."Roll Up Via Repl. Path" THEN BEGIN
        ProcUnit.GET("Location Code","No.","Variant Code");
        IF "Horizon Date" = 0D THEN
          "Horizon Date" := UBP.GetLeadTimeHorizHub(ProcUnit);
        LocInvRollUpRTC.LoadProcUnit(ProcUnit);
        LocInvRollUpRTC.LoadRollUPLines(ProcUnit, "Horizon Date");
        LocInvRollUpRTC.RUNMODAL;
      END ELSE
        ERROR(Text001);
    END;

    PROCEDURE ShowAlert@1240030005();
    VAR
      AlertLine@1000 : Record 14002709;
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      AlertLine.RESET;
      AlertLine.SETRANGE("Item No.","No.");
      AlertLine.SETRANGE("Location Code","Location Code");
      AlertLine.SETRANGE("Variant Code","Variant Code");
      PAGE.RUNMODAL(PAGE::"AFP Alert Lines",AlertLine);
      AlertLine.RESET;
    END;

    PROCEDURE ShowContainer@1240030007();
    VAR
      PlanContainerNo@1000 : Record 14097457;
    BEGIN
      PlanContainerNo.RESET;
      PlanContainerNo.SETRANGE("Container Plan No.","Container Plan No.");
      PlanContainerNo.SETRANGE("Container No.","Container No.");
      PAGE.RUNMODAL(PAGE::"Plan Container No.",PlanContainerNo);
    END;

    PROCEDURE ReCalcLineTotals@1240020001();
    VAR
      QuantityLessTransferBase@1000 : Decimal;
      TempPurchLine2@1240020001 : TEMPORARY Record 39;
      PurchPriceCalcMgt@1001 : Codeunit 7010;
      BypassPurchPriceCalc@1240020002 : Boolean;
    BEGIN
      CALCFIELDS("Qty. to Transfer (Base)","Qty. Transferred (Base)");
      QuantityLessTransferBase := "Quantity (Base)" - ("Qty. to Transfer (Base)" + "Qty. Transferred (Base)");
      "Quantity Less Transfer" := ROUND((QuantityLessTransferBase / "Qty. per Unit of Measure"),1.0,'>');

      IF "Quantity Less Transfer" <= 0 THEN BEGIN
        "Quantity Less Transfer" := 0;
        "Line Net Weight" := 0;
        "Line Gross Weight" := 0;
        "Line Volume" := 0;
        "Line Amount" := 0;
        "Line Discount Amount" := 0;
        "Line Discount %" := 0;
         Amount := 0;
        "Amount Including VAT" := 0;
        "Inv. Discount Amount" := 0;
        "VAT Base Amount" := 0;
        "VAT Difference" := 0;
        "Inv. Disc. Amount to Invoice" := 0;
      END ELSE BEGIN
        "Line Net Weight" := "Quantity Less Transfer" * "Net Weight";
        "Line Gross Weight" := "Quantity Less Transfer" * "Gross Weight";
        "Line Volume" := "Quantity Less Transfer" * "Unit Volume";
        GetTempPurchHeader;

        TempPurchLine2.INIT;
        TempPurchLine2.SetPurchHeader(TempPurchHeader);
        TempPurchLine2.SuspendStatusCheck(TRUE);
        TempPurchLine2.TRANSFERFIELDS(Rec);
        IF (TempPurchLine2."Buy-from Vendor No." <> TempPurchHeader."Buy-from Vendor No.") THEN
        TempPurchLine2."Buy-from Vendor No." := TempPurchHeader."Buy-from Vendor No.";
        IF (TempPurchLine2."Pay-to Vendor No." <> TempPurchHeader."Pay-to Vendor No.") THEN
          TempPurchLine2."Pay-to Vendor No." := TempPurchHeader."Pay-to Vendor No.";
        TempPurchLine2."Document No." := TempPurchHeader."No.";
        TempPurchLine2."Document Type" := TempPurchHeader."Document Type";
        TempPurchLine2."Line No." := Rec."Line No.";
        TempPurchLine2.VALIDATE(Quantity, "Quantity Less Transfer");
        GetProcUnit;
        IF ProcUnit."Purchase Unit of Measure" <> '' THEN
          TempPurchLine2.VALIDATE("Unit of Measure Code",ProcUnit."Purchase Unit of Measure");
        OnBeforePurchPriceCalcSuggOrdLine(BypassPurchPriceCalc,Rec,TempPurchHeader,TempPurchLine2);
        IF NOT BypassPurchPriceCalc THEN BEGIN
          IF NOT InvMgtSetup."Bypass Sug. Order Price Calc." THEN BEGIN
            PurchPriceCalcMgt.FindPurchLinePrice(TempPurchHeader,TempPurchLine2, 0);
        PurchPriceCalcMgt.FindPurchLineLineDisc(TempPurchHeader,TempPurchLine2);
          END;
        END;
        CopyAmountsFromPurchLine(TempPurchLine2);
      END;
    END;

    LOCAL PROCEDURE GetTempPurchHeader@1240020002();
    BEGIN
      IF NOT TempPurchHeader.GET(TempPurchHeader."Document Type"::Order, "Document No.") THEN BEGIN
        TempPurchHeader.INIT;
        TempPurchHeader.SetHideValidationDialog(TRUE);
        TempPurchHeader."Document Type" := TempPurchHeader."Document Type"::Order;
        TempPurchHeader."No." := "Document No.";
        TempPurchHeader."Order Date" := WORKDATE;
        TempPurchHeader."Posting Date" := WORKDATE;
        TempPurchHeader."Document Date" := WORKDATE;
        TempPurchHeader.INSERT(FALSE);
      END;
      IF ("Override Vendor No." = '') THEN BEGIN
        IF (TempPurchHeader."Buy-from Vendor No." <> "Buy-from Vendor No.") THEN
          TempPurchHeader.VALIDATE("Buy-from Vendor No.","Buy-from Vendor No.")
      END ELSE BEGIN
        IF (TempPurchHeader."Buy-from Vendor No." <> "Override Vendor No.") THEN
          TempPurchHeader.VALIDATE("Buy-from Vendor No.","Override Vendor No.");
      END;
      IF (TempPurchHeader."Location Code" <> "Location Code") THEN
        TempPurchHeader.VALIDATE("Location Code","Location Code");
    END;

    LOCAL PROCEDURE GetProcUnit@1240020004() : Boolean;
    BEGIN
      IF (Type <> Type::Item) THEN BEGIN
        ProcUnit.INIT;
        ProcUnit."Item No." := '';
        ProcUnit."Variant Code" := '';
        ProcUnit."Location Code" := '';
      END ELSE BEGIN
        IF (ProcUnit."Location Code" <> Rec."Location Code") OR (ProcUnit."Item No." <> Rec."No.") OR
          (ProcUnit."Variant Code" <> Rec."Variant Code") THEN BEGIN
          IF ProcUnit.GET(Rec."Location Code", Rec."No.", Rec."Variant Code") THEN
            EXIT(TRUE)
          ELSE BEGIN
            ProcUnit.INIT;
            EXIT(FALSE);
        END;
        END ELSE
          EXIT(TRUE);
      END;
    END;

    PROCEDURE CopyAmountsFromPurchLine@6(VAR CurrPurchLine@1000 : Record 39);
    BEGIN
      "Direct Unit Cost" := CurrPurchLine."Direct Unit Cost";
      "Line Discount %" := CurrPurchLine."Line Discount %";
      "Line Discount Amount" := CurrPurchLine."Line Discount Amount";
      Amount := CurrPurchLine.Amount;
      "Amount Including VAT" := CurrPurchLine."Amount Including VAT";
      "Indirect Cost %" := CurrPurchLine."Indirect Cost %";
      "Inv. Discount Amount" := CurrPurchLine."Inv. Discount Amount";
      "VAT Base Amount" := CurrPurchLine."VAT Base Amount";
      "Line Amount" := CurrPurchLine."Line Amount";
      "VAT Difference" := CurrPurchLine."VAT Difference";
      "Inv. Disc. Amount to Invoice" := CurrPurchLine."Inv. Disc. Amount to Invoice";
      "Currency Code" := CurrPurchLine."Currency Code";
    END;

    LOCAL PROCEDURE CalcBaseQty@16(Qty@1000 : Decimal) : Decimal;
    BEGIN
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE GetSKU@5806() : Boolean;
    BEGIN
      TESTFIELD("No.");
      IF (SKU."Location Code" = "Location Code") AND
         (SKU."Item No." = "No.") AND
         (SKU."Variant Code" = "Variant Code")
      THEN
        EXIT(TRUE);
      IF SKU.GET("Location Code","No.","Variant Code") THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE SetRedirectwithInvWarning@1240020003(VAR CurrSugOrderLine@1240020000 : Record 14000566);
    VAR
      UsageRedirect@1240020001 : Record 14000575;
      LocProcUnit@1240020002 : Record 14000555;
    BEGIN
      CurrSugOrderLine."Qty. (Base) from Redirects" := 0;
      IF (CurrSugOrderLine.Type = CurrSugOrderLine.Type::Item) AND (CurrSugOrderLine."No." <> '') THEN BEGIN
        UsageRedirect.SETRANGE("Redirect Location Code", CurrSugOrderLine."Location Code");
        UsageRedirect.SETRANGE("Redirect Item No.", CurrSugOrderLine."No.");
        IF CurrSugOrderLine."Variant Code" <> '' THEN
          UsageRedirect.SETRANGE("Redirect Variant Code", CurrSugOrderLine."Variant Code");
        UsageRedirect.SETRANGE("Customer No.", '');
        IF UsageRedirect.FINDSET THEN BEGIN
          REPEAT
            IF LocProcUnit.GET(UsageRedirect."Location Code", UsageRedirect."Item No.", UsageRedirect."Variant Code") THEN BEGIN
              CurrSugOrderLine."Qty. (Base) from Redirects" += LocProcUnit.QtyExpected();
            END;
          UNTIL UsageRedirect.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE LookupRedirectwithInvWarning@1240020007();
    VAR
      UsageRedirect@1240020001 : Record 14000575;
      LocProcUnit@1240020002 : Record 14000555;
    BEGIN
      IF (Rec.Type = Rec.Type::Item) AND (Rec."No." <> '') THEN BEGIN
        UsageRedirect.SETRANGE("Redirect Location Code", Rec."Location Code");
        UsageRedirect.SETRANGE("Redirect Item No.", Rec."No.");
        IF Rec."Variant Code" <> '' THEN
          UsageRedirect.SETRANGE("Redirect Variant Code", Rec."Variant Code");
        UsageRedirect.SETRANGE("Customer No.", '');
        IF UsageRedirect.FINDSET THEN BEGIN
          REPEAT
            IF LocProcUnit.GET(UsageRedirect."Location Code", UsageRedirect."Item No.", UsageRedirect."Variant Code") THEN
              LocProcUnit.MARK(TRUE);
          UNTIL UsageRedirect.NEXT = 0;
          LocProcUnit.MARKEDONLY(TRUE);
          PAGE.RUNMODAL(0, LocProcUnit);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateItemCrossRef@82();
    VAR
      DistIntegration@1240020000 : Codeunit 5702;
    BEGIN
      EnterPurchaseItemCrossRef(Rec);
    END;

    LOCAL PROCEDURE UpdateItemReference@85();
    BEGIN
      UpdateItemCrossRef;
      IF Type <> Type::Item THEN
        EXIT;
      IF "Cross-Reference No." = '' THEN
        SetVendorItemNo
      ELSE
        VALIDATE("Vendor Item No.","Cross-Reference No.");
    END;

    PROCEDURE EnterPurchaseItemCrossRef@1240020005(VAR CurrSugOrderLine@1240020000 : Record 14000566);
    VAR
      ItemCrossReference@1240020001 : Record 5717;
      ItemVariant@1240020003 : Record 5401;
      Found@1240020002 : Boolean;
    BEGIN
      WITH CurrSugOrderLine DO
        IF Type = Type::Item THEN BEGIN
          ItemCrossReference.RESET;
          ItemCrossReference.SETRANGE("Item No.","No.");
          ItemCrossReference.SETRANGE("Variant Code","Variant Code");
          ItemCrossReference.SETRANGE("Unit of Measure","Unit of Measure Code");
          ItemCrossReference.SETRANGE("Cross-Reference Type","Cross-Reference Type"::Vendor);
          ItemCrossReference.SETRANGE("Cross-Reference Type No.","Buy-from Vendor No.");
          ItemCrossReference.SETRANGE("Cross-Reference No.","Cross-Reference No.");
          IF ItemCrossReference.FINDFIRST THEN
            Found := TRUE
          ELSE BEGIN
            ItemCrossReference.SETRANGE("Cross-Reference No.");
            Found := ItemCrossReference.FIND('-');
          END;
          IF Found THEN BEGIN
            "Cross-Reference No." := ItemCrossReference."Cross-Reference No.";
            "Unit of Measure (Cross Ref.)" := ItemCrossReference."Unit of Measure";
            "Cross-Reference Type" := ItemCrossReference."Cross-Reference Type";
            "Cross-Reference Type No." := ItemCrossReference."Cross-Reference Type No.";
            IF ItemCrossReference.Description <> '' THEN BEGIN
              Description := ItemCrossReference.Description;
              "Description 2" := '';
            END;
          END ELSE BEGIN
            "Cross-Reference No." := '';
            "Cross-Reference Type" := "Cross-Reference Type"::" ";
            "Cross-Reference Type No." := '';
            IF "Variant Code" <> '' THEN BEGIN
              ItemVariant.GET("No.","Variant Code");
              Description := ItemVariant.Description;
              "Description 2" := ItemVariant."Description 2";
            END ELSE BEGIN
              Item.GET("No.");
              Description := Item.Description;
              "Description 2" := Item."Description 2";
            END;
            GetItemTranslation;
          END;
        END;
    END;

    PROCEDURE SetVendorItemNo@64();
    VAR
      ItemVend@1000 : Record 99;
    BEGIN
      GetItem;
      ItemVend.INIT;
      ItemVend."Vendor No." := "Buy-from Vendor No.";
      ItemVend."Variant Code" := "Variant Code";
      Item.FindItemVend(ItemVend,"Location Code");
      VALIDATE("Vendor Item No.",ItemVend."Vendor Item No.");
    END;

    PROCEDURE GetItemTranslation@44();
    VAR
      ItemTranslation@1000 : Record 30;
    BEGIN
      GetTempPurchHeader;
      IF ItemTranslation.GET("No.","Variant Code",TempPurchHeader."Language Code") THEN BEGIN
        Description := ItemTranslation.Description;
        "Description 2" := ItemTranslation."Description 2";
      END;
    END;

    LOCAL PROCEDURE UpdateSuggDaysSupply@1240020008();
    VAR
      LocInvPeriod@1001 : Record 14000553;
      ItemUsage@1000 : Record 14000557;
      UsagePerDay@1002 : Decimal;
    BEGIN
      "Suggested Ave. Days Supply" := 0;
      IF LocInvPeriod."Location Code" <> "Location Code" THEN BEGIN
        LocInvPeriod.RESET;
        LocInvPeriod.SETCURRENTKEY("Location Code","Period End Closed");
        LocInvPeriod.SETRANGE("Location Code","Location Code");
        LocInvPeriod.SETRANGE("Period End Closed",TRUE);
        IF NOT LocInvPeriod.FINDLAST THEN
          LocInvPeriod.INIT;
      END;
      IF LocInvPeriod."Period End Closed" THEN BEGIN
        ItemUsage.SETCURRENTKEY("Location Code","Item No.","Variant Code","Starting Date","Ending Date");
        ItemUsage.SETRANGE("Location Code","Location Code");
        ItemUsage.SETRANGE("Item No.","No.");
        ItemUsage.SETRANGE("Variant Code","Variant Code");
        ItemUsage.SETRANGE("Starting Date",LocInvPeriod."Starting Date");
        ItemUsage.SETRANGE("Ending Date",LocInvPeriod."Ending Date");
        ItemUsage.SETFILTER("Source No.",'=%1','');
        IF ItemUsage.FINDFIRST THEN BEGIN
          UsagePerDay := 0;
          IF ItemUsage."Average Usage Per Day" <> 0 THEN
            UsagePerDay := ItemUsage."Average Usage Per Day";
          IF ItemUsage."Forecast Usage Per Day" <> 0 THEN
            UsagePerDay := ItemUsage."Forecast Usage Per Day";
          IF (UsagePerDay <> 0) AND (Quantity <> 0) THEN
            "Suggested Ave. Days Supply" := ROUND(Quantity / UsagePerDay,0.01)
          ELSE
            "Suggested Ave. Days Supply" := 0;
        END;
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePurchPriceCalcSuggOrdLine@1240020009(VAR BypassPurchPriceCalc@1240020000 : Boolean;VAR CurrSuggOrderLine@1240020003 : Record 14000566;VAR TempPurchHeader@1240020001 : Record 38;VAR TempPurchLine@1240020002 : Record 39);
    BEGIN
    END;

    BEGIN
    END.
  }
}

