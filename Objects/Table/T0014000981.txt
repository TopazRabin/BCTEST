OBJECT Table 14000981 Export Document
{
  OBJECT-PROPERTIES
  {
    Date=10/23/17;
    Time=12:00:00 PM;
    Version List=SE0.60.16;
  }
  PROPERTIES
  {
    OnInsert=VAR
               NoSeriesMgt@1240030001 : Codeunit 396;
             BEGIN
               IF "No." = '' THEN BEGIN
                 GetShippingSetup;
                 ShippingSetup.TESTFIELD(ShippingSetup."Export Document Nos.");
                 "No." := NoSeriesMgt.GetNextNo(ShippingSetup."Export Document Nos.",WORKDATE,TRUE);
                 IF STRLEN("No.") > 17 THEN
                   ERROR(Text009,FIELDCAPTION("No."));
               END;

               "Departure Date" := WORKDATE;
               "Inbond Type" := '70';  // No Inbond Type
               TransferFromPackingStation;
             END;

    OnModify=BEGIN
               "Created From Packing" := FALSE;
             END;

    OnDelete=VAR
               ExportSourceDoc@1240030000 : Record 14000982;
               ExportSourceLine@1240030001 : Record 14000983;
               ExportDocLine@1240030004 : Record 14000984;
               Package@1240030002 : Record 14000701;
               PostedPackage@1240030003 : Record 14000704;
               Package2@1240030005 : Record 14000701;
               PostedPackage2@1240030006 : Record 14000704;
             BEGIN
               TESTFIELD(Submitted,FALSE);

               IF "ITN No." <> '' THEN
                 ERROR(STRSUBSTNO(Text011,TABLECAPTION, "No."));

               LOCKTABLE;

               ExportSourceDoc.RESET;
               ExportSourceDoc.SETRANGE("Export Document No.","No.");
               IF ExportSourceDoc.FIND('-') THEN
                 ExportSourceDoc.DELETEALL(TRUE);

               ExportSourceLine.RESET;
               ExportSourceLine.SETRANGE("Export Document No.","No.");
               IF ExportSourceLine.FIND('-') THEN
                 ExportSourceLine.DELETEALL;

               ExportDocLine.RESET;
               ExportDocLine.SETRANGE("Export Document No.","No.");
               IF ExportDocLine.FIND('-') THEN
                 ExportDocLine.DELETEALL;

               Package.RESET;
               Package.SETRANGE("Export Document No.","No.");
               IF Package.FIND('-') THEN REPEAT
                 Package2.GET(Package."No.");
                 Package2."Export Document No." := '';
                 Package2.MODIFY;
               UNTIL Package.NEXT = 0;

               PostedPackage.RESET;
               PostedPackage.SETRANGE("Export Document No.","No.");
               IF PostedPackage.FIND('-') THEN REPEAT
                 PostedPackage2.GET(PostedPackage."No.");
                 PostedPackage2."Export Document No." := '';
                 PostedPackage2.MODIFY;
               UNTIL PostedPackage.NEXT = 0;

               ShipperTypeMgt.DeleteExportDoc("No.");
             END;

    CaptionML=ENU=Export Document;
    LookupPageID=Page14000983;
    DrillDownPageID=Page14000981;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code17        ;CaptionML=ENU=No. }
    { 11  ;   ;ITN No.             ;Text20        ;CaptionML=ENU=ITN No. }
    { 12  ;   ;State of Origin     ;Code30        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   OnLookup=VAR
                                                              TempText@1240030001 : Text[30];
                                                            BEGIN
                                                              TempText := "State of Origin";
                                                              LookupStateValidationCode(TempText,GetISOCountryCode("PPI Country Code"));
                                                              "State of Origin" := TempText;
                                                            END;

                                                   CaptionML=ENU=State of Origin }
    { 13  ;   ;Country of Destination;Code10      ;TableRelation=Country/Region.Code;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Country of Destination }
    { 14  ;   ;Departure Date      ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Departure Date }
    { 15  ;   ;Carrier             ;Text30        ;TableRelation="Export Document Validation".Code WHERE (Table=CONST(IATA/SCAC));
                                                   OnValidate=VAR
                                                                ExportDocValidation@1240020000 : Record 14000985;
                                                              BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                                Carrier := UPPERCASE(Carrier);

                                                                IF STRLEN(Carrier) = 4 THEN  // SCAC codes are entered manually - no table validation
                                                                  EXIT
                                                                ELSE BEGIN
                                                                  ExportDocValidation.SETRANGE(Table,ExportDocValidation.Table::"IATA/SCAC");
                                                                  ExportDocValidation.SETRANGE(Code,Carrier);
                                                                  ExportDocValidation.FIND('-');
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              ExportDocValidation@1240030000 : Record 14000985;
                                                            BEGIN
                                                              ExportDocValidation.SETRANGE(Table,ExportDocValidation.Table::"IATA/SCAC");
                                                              ExportDocValidation.SETRANGE(Code,Carrier);
                                                              IF ExportDocValidation.FIND('-') THEN ;
                                                              ExportDocValidation.SETRANGE(Code);
                                                              IF PAGE.RUNMODAL(0,ExportDocValidation) = ACTION::LookupOK THEN
                                                                VALIDATE(Carrier,ExportDocValidation.Code);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Carrier }
    { 16  ;   ;PPI Name            ;Text50        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=PPI Name }
    { 17  ;   ;PPI ID              ;Text30        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=PPI ID }
    { 18  ;   ;PPI ID Type         ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD(Submitted,FALSE);
                                                            END;

                                                   CaptionML=ENU=PPI ID Type;
                                                   OptionCaptionML=ENU=EIN,SSN,Foreign;
                                                   OptionString=EIN,SSN,Foreign }
    { 19  ;   ;PPI Address         ;Text50        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=PPI Address }
    { 20  ;   ;PPI Address 2       ;Text50        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=PPI Address 2 }
    { 21  ;   ;PPI City            ;Text30        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=PPI City }
    { 22  ;   ;PPI State           ;Text30        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupStateValidationCode("PPI State",GetISOCountryCode("PPI Country Code"));
                                                            END;

                                                   CaptionML=ENU=PPI State }
    { 23  ;   ;PPI ZIP Code        ;Code20        ;TableRelation="Export Document Validation".Code WHERE (Table=CONST(ZIP),
                                                                                                          Description Lookup=FIELD(PPI State));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   OnLookup=VAR
                                                              ExportDocValidation@1240030000 : Record 14000985;
                                                            BEGIN
                                                              IF GetISOCountryCode("PPI Country Code") = 'US' THEN BEGIN
                                                                ExportDocValidation.RESET;
                                                                ExportDocValidation.SETRANGE(Table,ExportDocValidation.Table::ZIP);

                                                                ExportDocValidation.SETRANGE(Code,"PPI ZIP Code");
                                                                IF ExportDocValidation.FIND('-') THEN;
                                                                ExportDocValidation.SETRANGE(Code);

                                                                IF PAGE.RUNMODAL(0,ExportDocValidation) = ACTION::LookupOK THEN
                                                                  VALIDATE("PPI ZIP Code",ExportDocValidation.Code);
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=PPI ZIP Code }
    { 24  ;   ;PPI Contact First Name;Text50      ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=PPI Contact First Name }
    { 25  ;   ;PPI Contact Last Name;Text50       ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=PPI Contact Last Name }
    { 26  ;   ;PPI Phone No.       ;Text30        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=PPI Phone No. }
    { 27  ;   ;Ult. Consig. Name   ;Text50        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                                IF NOT "Alt. Ult. Consignee" AND
                                                                  ("Ult. Consig. Name" <> '')
                                                                THEN
                                                                  ERROR(Text001,FIELDCAPTION("Ult. Consig. Name"),FIELDCAPTION("Alt. Ult. Consignee"));
                                                              END;

                                                   CaptionML=ENU=Ult. Consig. Name }
    { 28  ;   ;Ult. Consig. Address;Text50        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                                IF NOT "Alt. Ult. Consignee" AND
                                                                  ("Ult. Consig. Address" <> '')
                                                                THEN
                                                                  ERROR(Text001,FIELDCAPTION("Ult. Consig. Address"),FIELDCAPTION("Alt. Ult. Consignee"));
                                                              END;

                                                   CaptionML=ENU=Ult. Consig. Address }
    { 29  ;   ;Ult. Consig. Address 2;Text50      ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                                IF NOT "Alt. Ult. Consignee" AND
                                                                  ("Ult. Consig. Address 2" <> '')
                                                                THEN
                                                                  ERROR(Text001,FIELDCAPTION("Ult. Consig. Address 2"),FIELDCAPTION("Alt. Ult. Consignee"));
                                                              END;

                                                   CaptionML=ENU=Ult. Consig. Address 2 }
    { 30  ;   ;Ult. Consig. City   ;Text30        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                                IF NOT "Alt. Ult. Consignee" AND
                                                                  ("Ult. Consig. City" <> '')
                                                                THEN
                                                                  ERROR(Text001,FIELDCAPTION("Ult. Consig. City"),FIELDCAPTION("Alt. Ult. Consignee"));
                                                              END;

                                                   CaptionML=ENU=Ult. Consig. City }
    { 31  ;   ;Ult. Consig. State  ;Text30        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                                IF NOT "Alt. Ult. Consignee" AND
                                                                  ("Ult. Consig. State" <> '')
                                                                THEN
                                                                  ERROR(Text001,FIELDCAPTION("Ult. Consig. State"),FIELDCAPTION("Alt. Ult. Consignee"));

                                                                IF "Ult. Consig. State" <> xRec."Ult. Consig. State" THEN
                                                                  "Ult. Consig. ZIP Code" := '';
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupStateValidationCode("Ult. Consig. State",GetISOCountryCode("Ult. Consig. Country Code"));
                                                              IF Rec."Ult. Consig. State" <> xRec."Ult. Consig. State" THEN
                                                                VALIDATE("Ult. Consig. State");
                                                            END;

                                                   CaptionML=ENU=Ult. Consig. State }
    { 32  ;   ;Ult. Consig. ZIP Code;Code20       ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                                IF NOT "Alt. Ult. Consignee" AND
                                                                  ("Ult. Consig. ZIP Code" <> '')
                                                                THEN
                                                                  ERROR(Text001,FIELDCAPTION("Ult. Consig. ZIP Code"),FIELDCAPTION("Alt. Ult. Consignee"));
                                                              END;

                                                   CaptionML=ENU=Ult. Consig. ZIP Code }
    { 33  ;   ;Ult. Consig. Country Code;Code10   ;TableRelation=Country/Region.Code;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                                IF NOT "Alt. Ult. Consignee" AND
                                                                  ("Ult. Consig. Country Code" <> '')
                                                                THEN
                                                                  ERROR(Text001,FIELDCAPTION("Ult. Consig. Country Code"),FIELDCAPTION("Alt. Ult. Consignee"));
                                                              END;

                                                   CaptionML=ENU=Ult. Consig. Country Code }
    { 34  ;   ;Ult. Consig. Contact;Text50        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                                IF NOT "Alt. Ult. Consignee" AND
                                                                  ("Ult. Consig. Contact" <> '')
                                                                THEN
                                                                  ERROR(Text001,FIELDCAPTION("Ult. Consig. Contact"),FIELDCAPTION("Alt. Ult. Consignee"));
                                                              END;

                                                   CaptionML=ENU=Ult. Consig. Contact }
    { 36  ;   ;Ult. Consig. Phone No.;Text30      ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                                IF NOT "Alt. Ult. Consignee" AND
                                                                  ("Ult. Consig. Phone No." <> '')
                                                                THEN
                                                                  ERROR(Text001,FIELDCAPTION("Ult. Consig. Phone No."),FIELDCAPTION("Alt. Ult. Consignee"));

                                                                IF NOT CheckPhone("Ult. Consig. Phone No.") THEN
                                                                  ERROR(Text002,FIELDCAPTION("Ult. Consig. Phone No."));
                                                              END;

                                                   CaptionML=ENU=Ult. Consig. Phone No. }
    { 37  ;   ;Ship-to Name        ;Text50        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Ship-to Name }
    { 38  ;   ;Ship-to Address     ;Text50        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Ship-to Address }
    { 39  ;   ;Ship-to Address 2   ;Text50        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Ship-to Address 2 }
    { 40  ;   ;Ship-to City        ;Text30        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Ship-to City }
    { 41  ;   ;Ship-to State       ;Text30        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupStateValidationCode("Ship-to State",GetISOCountryCode("Ship-to Country Code"));
                                                            END;

                                                   CaptionML=ENU=Ship-to State }
    { 42  ;   ;Ship-to ZIP Code    ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Ship-to ZIP Code }
    { 43  ;   ;Ship-to Country Code;Code10        ;TableRelation=Country/Region.Code;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Ship-to Country Code }
    { 44  ;   ;Ship-to Contact     ;Text50        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Ship-to Contact }
    { 45  ;   ;Ship-to Phone No.   ;Text30        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                                IF NOT CheckPhone("Ship-to Phone No.") THEN
                                                                  ERROR(Text002,FIELDCAPTION("Ship-to Phone No."));
                                                              END;

                                                   CaptionML=ENU=Ship-to Phone No. }
    { 46  ;   ;Frt. Fwdr. Name     ;Text50        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Frt. Fwdr. Name }
    { 47  ;   ;Frt. Fwdr. Address  ;Text50        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Frt. Fwdr. Address }
    { 48  ;   ;Frt. Fwdr. Address 2;Text50        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Frt. Fwdr. Address 2 }
    { 49  ;   ;Frt. Fwdr. City     ;Text30        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Frt. Fwdr. City }
    { 50  ;   ;Frt. Fwdr. State    ;Text30        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupStateValidationCode("Frt. Fwdr. State",GetISOCountryCode("Frt. Fwdr. Country Code"));
                                                            END;

                                                   CaptionML=ENU=Frt. Fwdr. State }
    { 51  ;   ;Frt. Fwdr. ZIP Code ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Frt. Fwdr. ZIP Code }
    { 52  ;   ;Frt. Fwdr. Country Code;Code10     ;TableRelation=Country/Region.Code;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Frt. Fwdr. Country Code }
    { 53  ;   ;Frt. Fwdr. Contact  ;Text50        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Frt. Fwdr. Contact }
    { 54  ;   ;Frt. Fwdr. Phone No.;Text30        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                                IF NOT CheckPhone("Frt. Fwdr. Phone No.") THEN
                                                                  ERROR(Text002,FIELDCAPTION("Frt. Fwdr. Phone No."));
                                                              END;

                                                   CaptionML=ENU=Frt. Fwdr. Phone No. }
    { 55  ;   ;Related Companies   ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Related Companies }
    { 56  ;   ;Alt. Ult. Consignee ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Alt. Ult. Consignee }
    { 57  ;   ;License Type        ;Code10        ;TableRelation="Export Document Validation".Code WHERE (Table=CONST(License));
                                                   OnValidate=VAR
                                                                ExportSourceLine@1240030000 : Record 14000983;
                                                                ExportDocValidation@1240020000 : Record 14000985;
                                                              BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                                ExportDocValidation.GET(ExportDocValidation.Table::License,0,"License Type");
                                                                IF ExportDocValidation."Description 2" <> '' THEN
                                                                  "License No." := ExportDocValidation."Description 2";
                                                                IF "License Type" <> xRec."License Type" THEN
                                                                  IF CONFIRM(STRSUBSTNO(Text003,FIELDCAPTION("License Type"))) THEN BEGIN
                                                                    ExportSourceLine.RESET;
                                                                    ExportSourceLine.SETRANGE("Export Document No.","No.");
                                                                    IF ExportSourceLine.FIND('-') THEN BEGIN
                                                                      ExportSourceLine.MODIFYALL("License Type","License Type");
                                                                      ExportSourceLine.MODIFYALL("License No.","License No.");
                                                                    END;
                                                                    UpdateSummaryLines;
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=License Type }
    { 58  ;   ;License No.         ;Code12        ;OnValidate=VAR
                                                                ExportSourceLine@1240030000 : Record 14000983;
                                                              BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                                IF "License No." <> xRec."License No." THEN
                                                                  IF CONFIRM(STRSUBSTNO(Text003,FIELDCAPTION("License No."))) THEN BEGIN
                                                                    ExportSourceLine.RESET;
                                                                    ExportSourceLine.SETRANGE("Export Document No.","No.");
                                                                    IF ExportSourceLine.FIND('-') THEN
                                                                      ExportSourceLine.MODIFYALL("License No.","License No.");
                                                                    UpdateSummaryLines;
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=License No. }
    { 59  ;   ;Export Information Code;Code10     ;TableRelation="Export Document Validation".Code WHERE (Table=CONST(Export));
                                                   OnValidate=VAR
                                                                ExportSourceLine@1240030000 : Record 14000983;
                                                              BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                                IF "Export Information Code" <> xRec."Export Information Code" THEN
                                                                  IF CONFIRM(STRSUBSTNO(Text003,FIELDCAPTION("Export Information Code"))) THEN BEGIN
                                                                    ExportSourceLine.RESET;
                                                                    ExportSourceLine.SETRANGE("Export Document No.","No.");
                                                                    IF ExportSourceLine.FIND('-') THEN
                                                                      REPEAT
                                                                        ExportSourceLine.VALIDATE("Export Information Code","Export Information Code");
                                                                        ExportSourceLine.MODIFY;
                                                                      UNTIL ExportSourceLine.NEXT = 0;
                                                                    UpdateSummaryLines;
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Export Information Code }
    { 60  ;   ;Ship-to No.         ;Code20        ;TableRelation=IF (Ship-to Type=CONST(Customer)) Customer
                                                                 ELSE IF (Ship-to Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Ship-to Type=CONST(Location)) Location
                                                                 ELSE IF (Ship-to Type=CONST(Bank)) "Bank Account"
                                                                 ELSE IF (Ship-to Type=CONST(Resource)) Resource
                                                                 ELSE IF (Ship-to Type=CONST(Employee)) Employee
                                                                 ELSE IF (Ship-to Type=CONST(Contact)) Contact;
                                                   OnValidate=VAR
                                                                Customer@1240030003 : Record 18;
                                                                ShipToAddress@1240030002 : Record 222;
                                                                Vendor@1240030001 : Record 23;
                                                                OrderAddress@1240030004 : Record 224;
                                                                Location@1240030000 : Record 14;
                                                                BankAccount@1240030005 : Record 270;
                                                                Contact@1240030006 : Record 5050;
                                                                Resource@1240030007 : Record 156;
                                                                Employee@1240030008 : Record 5200;
                                                              BEGIN
                                                                TESTFIELD(Submitted,FALSE);

                                                                IF LinesExist THEN
                                                                  ERROR(Text004,FIELDCAPTION("Ship-to No."));

                                                                IF "Ship-to No." = '' THEN BEGIN
                                                                  "Ship-to Code" := '';
                                                                  ClearShipToAddess;
                                                                END ELSE BEGIN
                                                                  CASE "Ship-to Type" OF
                                                                    "Ship-to Type"::Customer:
                                                                      BEGIN
                                                                        IF ("Ship-to Code" <> '') AND ShipToAddress.GET("Ship-to No.","Ship-to Code") THEN BEGIN
                                                                          TransferFromShipToAddress(ShipToAddress);
                                                                        END ELSE BEGIN
                                                                          "Ship-to Code" := '';
                                                                          Customer.GET("Ship-to No.");
                                                                          TransferFromCustomer(
                                                                            Customer,"Ship-to Name","Ship-to Name 2","Ship-to Address","Ship-to Address 2",
                                                                            "Ship-to City","Ship-to Contact","Ship-to ZIP Code","Ship-to State",
                                                                            "Ship-to Country Code","Ship-to Phone No.","Ship-to VAT Registration No.");
                                                                          "Country of Destination" := "Ship-to Country Code";
                                                                        END;
                                                                      END;
                                                                    "Ship-to Type"::Vendor:
                                                                      BEGIN
                                                                        IF ("Ship-to Code" <> '') AND OrderAddress.GET("Ship-to No.","Ship-to Code") THEN BEGIN
                                                                          TransferShipToFromOrderAddress(OrderAddress);
                                                                        END ELSE BEGIN
                                                                          "Ship-to Code" := '';
                                                                          Vendor.GET("Ship-to No.");
                                                                          TransferFromVendor(
                                                                            Vendor,"Ship-to Name","Ship-to Name 2","Ship-to Address","Ship-to Address 2",
                                                                            "Ship-to City","Ship-to Contact","Ship-to ZIP Code","Ship-to State",
                                                                            "Ship-to Country Code","Ship-to Phone No.","Ship-to VAT Registration No.");
                                                                          "Country of Destination" := "Ship-to Country Code";
                                                                        END;
                                                                      END;
                                                                    "Ship-to Type"::Location:
                                                                      BEGIN
                                                                        Location.GET("Ship-to No.");
                                                                        TransferFromLocation(
                                                                          Location,"Ship-to Name","Ship-to Name 2","Ship-to Address","Ship-to Address 2",
                                                                            "Ship-to City","Ship-to Contact","Ship-to ZIP Code","Ship-to State",
                                                                            "Ship-to Country Code","Ship-to Phone No.");
                                                                        "Country of Destination" := "Ship-to Country Code";
                                                                      END;
                                                                    "Ship-to Type"::Bank:
                                                                      BEGIN
                                                                        BankAccount.GET("Ship-to No.");
                                                                        TransferFromBankAccount(
                                                                          BankAccount,"Ship-to Name","Ship-to Name 2","Ship-to Address","Ship-to Address 2",
                                                                            "Ship-to City","Ship-to Contact","Ship-to ZIP Code","Ship-to State",
                                                                            "Ship-to Country Code","Ship-to Phone No.");
                                                                        "Country of Destination" := "Ship-to Country Code";
                                                                      END;
                                                                    "Ship-to Type"::Contact:
                                                                      BEGIN
                                                                        Contact.GET("Ship-to No.");
                                                                        TransferFromContact(
                                                                          Contact,"Ship-to Name","Ship-to Name 2","Ship-to Address","Ship-to Address 2",
                                                                            "Ship-to City","Ship-to Contact","Ship-to ZIP Code","Ship-to State",
                                                                            "Ship-to Country Code","Ship-to Phone No.");
                                                                        "Country of Destination" := "Ship-to Country Code";
                                                                      END;
                                                                    "Ship-to Type"::Resource:
                                                                      BEGIN
                                                                        Resource.GET("Ship-to No.");
                                                                        TransferFromResource(
                                                                          Resource,"Ship-to Name","Ship-to Name 2","Ship-to Address","Ship-to Address 2",
                                                                            "Ship-to City","Ship-to Contact","Ship-to ZIP Code","Ship-to State",
                                                                            "Ship-to Country Code","Ship-to Phone No.");
                                                                        "Country of Destination" := "Ship-to Country Code";
                                                                      END;
                                                                    "Ship-to Type"::Employee:
                                                                      BEGIN
                                                                        Employee.GET("Ship-to No.");
                                                                        TransferFromEmployee(
                                                                          Employee,"Ship-to Name","Ship-to Name 2","Ship-to Address","Ship-to Address 2",
                                                                            "Ship-to City","Ship-to Contact","Ship-to ZIP Code","Ship-to State",
                                                                            "Ship-to Country Code","Ship-to Phone No.");
                                                                        "Country of Destination" := "Ship-to Country Code";
                                                                      END;
                                                                    ELSE
                                                                      ERROR(Text010,"Ship-to Type",FIELDCAPTION("Ship-to No."));
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Ship-to No. }
    { 61  ;   ;Ship-to Code        ;Code10        ;TableRelation=IF (Ship-to Type=CONST(Customer)) "Ship-to Address".Code WHERE (Customer No.=FIELD(Ship-to No.))
                                                                 ELSE IF (Ship-to Type=CONST(Vendor)) "Order Address".Code WHERE (Vendor No.=FIELD(Ship-to No.));
                                                   OnValidate=VAR
                                                                ShipToAddress@1240030000 : Record 222;
                                                                OrderAddress@1240030001 : Record 224;
                                                              BEGIN
                                                                TESTFIELD(Submitted,FALSE);

                                                                IF LinesExist THEN
                                                                  ERROR(Text004,FIELDCAPTION("Ship-to Code"));

                                                                TESTFIELD("Ship-to No.");

                                                                IF ("Ship-to Type" <> "Ship-to Type"::Customer) AND
                                                                   ("Ship-to Type" <> "Ship-to Type"::Vendor) AND
                                                                   ("Ship-to Code" <> '')
                                                                THEN
                                                                  ERROR(Text006,FIELDCAPTION("Ship-to Type"));

                                                                IF "Ship-to Code" <> '' THEN BEGIN
                                                                  CASE "Ship-to Type" OF
                                                                    "Ship-to Type"::Customer:
                                                                      BEGIN
                                                                        ShipToAddress.GET("Ship-to No.","Ship-to Code");
                                                                        TransferFromShipToAddress(ShipToAddress);
                                                                      END;
                                                                    "Ship-to Type"::Vendor:
                                                                      BEGIN
                                                                        OrderAddress.GET("Ship-to No.","Ship-to Code");
                                                                        TransferShipToFromOrderAddress(OrderAddress);
                                                                      END;
                                                                  END;
                                                                END ELSE
                                                                  VALIDATE("Ship-to No.");
                                                              END;

                                                   CaptionML=ENU=Ship-to Code }
    { 62  ;   ;Ship-to Type        ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);

                                                                IF LinesExist THEN
                                                                  ERROR(Text004,FIELDCAPTION("Ship-to Type"));

                                                                IF "Ship-to Type" <> xRec."Ship-to Type" THEN BEGIN
                                                                  "Ship-to No." := '';
                                                                  "Ship-to Name" := '';
                                                                  "Ship-to Address" := '';
                                                                  "Ship-to Address 2" := '';
                                                                  "Ship-to City" := '';
                                                                  "Ship-to State" := '';
                                                                  "Ship-to ZIP Code" := '';
                                                                  "Ship-to Country Code" := '';
                                                                  "Ship-to Contact" := '';
                                                                  "Ship-to Phone No." := '';
                                                                  "Ship-to Code" := '';
                                                                  "Ship-to Name 2" := '';
                                                                  "Ship-to VAT Registration No." := '';
                                                                  "Ship-to FTR Type" := "Ship-to FTR Type"::" ";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Ship-to Type;
                                                   OptionCaptionML=ENU=Customer,Vendor,Bank,Contact,Resource,Employee,,Location;
                                                   OptionString=Customer,Vendor,Bank,Contact,Resource,Employee,,Location }
    { 63  ;   ;Posted              ;Boolean       ;CaptionML=ENU=Posted }
    { 64  ;   ;Manual              ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);

                                                                IF (xRec.Manual <> Manual) AND
                                                                   Manual
                                                                THEN
                                                                  CheckNoSourceDocs(FIELDCAPTION(Manual));
                                                              END;

                                                   CaptionML=ENU=Manual }
    { 65  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent".Code;
                                                   OnValidate=BEGIN
                                                                CheckNoSourceDocs(FIELDCAPTION("Shipping Agent Code"));
                                                                IF xRec."Shipping Agent Code" <> "Shipping Agent Code" THEN
                                                                  VALIDATE("E-Ship Agent Service",'');
                                                              END;

                                                   CaptionML=ENU=Shipping Agent Code }
    { 66  ;   ;Export License Required;Boolean    ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Export Source Line" WHERE (Export Document No.=FIELD(No.),
                                                                                                 Export License Required=CONST(Yes)));
                                                   CaptionML=ENU=Export License Required;
                                                   Editable=No }
    { 68  ;   ;AES Response Email  ;Text50        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=AES Response Email }
    { 69  ;   ;Submitted           ;Boolean       ;CaptionML=ENU=Submitted }
    { 75  ;   ;Frt. Fwdr. ID       ;Text30        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Frt. Fwdr. ID }
    { 76  ;   ;Frt. Fwdr. ID Type  ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Frt. Fwdr. ID Type;
                                                   OptionCaptionML=ENU=EIN,SSN,Foreign,D-U-N-S;
                                                   OptionString=EIN,SSN,Foreign,D-U-N-S }
    { 77  ;   ;Submitted Date      ;Date          ;CaptionML=ENU=Submitted Date;
                                                   Editable=No }
    { 78  ;   ;Submitted Time      ;Time          ;CaptionML=ENU=Submitted Time;
                                                   Editable=No }
    { 79  ;   ;Transport. Ref. No. ;Text30        ;CaptionML=ENU=Transport. Ref. No. }
    { 80  ;   ;Port of Export      ;Code10        ;TableRelation="Export Document Validation".Code WHERE (Table=CONST(Port),
                                                                                                          Section=CONST(1));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Port of Export }
    { 81  ;   ;Port of Unlading    ;Code10        ;TableRelation="Export Document Validation".Code WHERE (Table=CONST(Port),
                                                                                                          Section=CONST(2));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Port of Unlading }
    { 82  ;   ;Mode of Transportation;Code10      ;TableRelation="Export Document Validation".Code WHERE (Table=CONST(Transport Mode));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Mode of Transportation }
    { 83  ;   ;Conveyance Name     ;Text23        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Conveyance Name }
    { 84  ;   ;Vessel Flag         ;Code10        ;TableRelation=Country/Region.Code;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Vessel Flag }
    { 86  ;   ;Hazardous Cargo     ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Hazardous Cargo }
    { 87  ;   ;Routed Transaction  ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Routed Transaction }
    { 88  ;   ;Inbond Type         ;Code10        ;TableRelation="Export Document Validation".Code WHERE (Table=CONST(Inbond));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Inbond Type }
    { 89  ;   ;Import Entry No.    ;Text15        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Import Entry No. }
    { 90  ;   ;License Exp. Date   ;Date          ;OnValidate=VAR
                                                                ExportSourceLine@1240030000 : Record 14000983;
                                                              BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                                IF "License Exp. Date" <> xRec."License Exp. Date" THEN
                                                                  IF CONFIRM(STRSUBSTNO(Text003,FIELDCAPTION("License Exp. Date"))) THEN BEGIN
                                                                    ExportSourceLine.RESET;
                                                                    ExportSourceLine.SETRANGE("Export Document No.","No.");
                                                                    IF ExportSourceLine.FIND('-') THEN
                                                                      ExportSourceLine.MODIFYALL("License Exp. Date","License Exp. Date");
                                                                    UpdateSummaryLines;
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=License Exp. Date }
    { 91  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Shipping Comment Line" WHERE (Table ID=CONST(14000981),
                                                                                                    Code=FIELD(No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 92  ;   ;E-Ship Agent Service;Code30        ;TableRelation="E-Ship Agent Service".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                                TESTFIELD("Ship-to Country Code");
                                                                TESTFIELD("Shipping Agent Code");
                                                                CheckNoSourceDocs(FIELDCAPTION("E-Ship Agent Service"));

                                                                IF "E-Ship Agent Service" <> '' THEN BEGIN
                                                                  ShippingAgent.GET("Shipping Agent Code");
                                                                  ShippingAgentService.GET(
                                                                    "Shipping Agent Code","E-Ship Agent Service",
                                                                    ShippingAgentService.WorldWideService(ShippingAgent,"Ship-to Country Code"));
                                                                  Carrier := ShippingAgentService."SCAC Code";
                                                                END ELSE
                                                                  Carrier := '';
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Ship-to Country Code");
                                                              TESTFIELD("Shipping Agent Code");
                                                              ShippingAgent.GET("Shipping Agent Code");

                                                              ShippingAgentService.RESET;
                                                              ShippingAgentService.SETRANGE("Shipping Agent Code","Shipping Agent Code");
                                                              ShippingAgentService.SETRANGE(
                                                                "World Wide Service",ShippingAgentService.WorldWideService(ShippingAgent,"Ship-to Country Code"));

                                                              IF PAGE.RUNMODAL(0,ShippingAgentService) = ACTION::LookupOK THEN
                                                                VALIDATE("E-Ship Agent Service",ShippingAgentService.Code);
                                                            END;

                                                   CaptionML=ENU=E-Ship Agent Service }
    { 93  ;   ;Ship-to Name 2      ;Text50        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Ship-to Name 2 }
    { 94  ;   ;PPI Contact         ;Text100       ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=PPI Contact }
    { 95  ;   ;PPI Fax No.         ;Text30        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=PPI Fax No. }
    { 100 ;   ;Total Value USD     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Export Source Line"."Value USD" WHERE (Export Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Total Value USD;
                                                   DecimalPlaces=0:5;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 101 ;   ;Created From Packing;Boolean       ;CaptionML=ENU=Created From Packing }
    { 102 ;   ;Ship-to VAT Registration No.;Text30;CaptionML=ENU=Ship-to VAT Registration No. }
    { 103 ;   ;Ult. Consig. VAT Reg. No.;Text30   ;CaptionML=ENU=Ult. Consig. VAT Reg. No. }
    { 104 ;   ;Ult. Consig. No.    ;Code20        ;TableRelation=IF (Ult. Consig. Type=CONST(Customer)) Customer
                                                                 ELSE IF (Ult. Consig. Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Ult. Consig. Type=CONST(Location)) Location
                                                                 ELSE IF (Ult. Consig. Type=CONST(Bank)) "Bank Account"
                                                                 ELSE IF (Ult. Consig. Type=CONST(Resource)) Resource
                                                                 ELSE IF (Ult. Consig. Type=CONST(Employee)) Employee
                                                                 ELSE IF (Ult. Consig. Type=CONST(Contact)) Contact;
                                                   OnValidate=VAR
                                                                Customer@1240030003 : Record 18;
                                                                Vendor@1240030001 : Record 23;
                                                                Location@1240030000 : Record 14;
                                                                BankAccount@1240030008 : Record 270;
                                                                Contact@1240030007 : Record 5050;
                                                                Resource@1240030006 : Record 156;
                                                                Employee@1240030005 : Record 5200;
                                                                TempText1@1240030002 : Text[30];
                                                              BEGIN
                                                                TESTFIELD(Submitted,FALSE);

                                                                IF NOT "Alt. Ult. Consignee" AND
                                                                  ("Ult. Consig. No." <> '')
                                                                THEN
                                                                  ERROR(Text001,FIELDCAPTION("Ult. Consig. No."),FIELDCAPTION("Alt. Ult. Consignee"));

                                                                IF NOT "Alt. Ult. Consignee" AND
                                                                  ("Ult. Consig. No." = '')
                                                                THEN
                                                                  EXIT;

                                                                CASE "Ult. Consig. Type" OF
                                                                  "Ult. Consig. Type"::Customer:
                                                                    BEGIN
                                                                      Customer.GET("Ult. Consig. No.");
                                                                      TransferFromCustomer(
                                                                        Customer,"Ult. Consig. Name",TempText1,"Ult. Consig. Address","Ult. Consig. Address 2",
                                                                        "Ult. Consig. City","Ult. Consig. Contact","Ult. Consig. ZIP Code","Ult. Consig. State",
                                                                        "Ult. Consig. Country Code","Ult. Consig. Phone No.","Ult. Consig. VAT Reg. No.");
                                                                    END;
                                                                  "Ult. Consig. Type"::Vendor:
                                                                    BEGIN
                                                                      Vendor.GET("Ult. Consig. No.");
                                                                      TransferFromVendor(
                                                                        Vendor,"Ult. Consig. Name",TempText1,"Ult. Consig. Address","Ult. Consig. Address 2",
                                                                        "Ult. Consig. City","Ult. Consig. Contact","Ult. Consig. ZIP Code","Ult. Consig. State",
                                                                        "Ult. Consig. Country Code","Ult. Consig. Phone No.","Ult. Consig. VAT Reg. No.");
                                                                    END;
                                                                  "Ult. Consig. Type"::Location:
                                                                    BEGIN
                                                                      Location.GET("Ult. Consig. No.");
                                                                      TransferFromLocation(
                                                                        Location,"Ult. Consig. Name",TempText1,"Ult. Consig. Address","Ult. Consig. Address 2",
                                                                          "Ult. Consig. City","Ult. Consig. Contact","Ult. Consig. ZIP Code","Ult. Consig. State",
                                                                          "Ult. Consig. Country Code","Ult. Consig. Phone No.");
                                                                    END;
                                                                  "Ult. Consig. Type"::Bank:
                                                                    BEGIN
                                                                      BankAccount.GET("Ult. Consig. No.");
                                                                      TransferFromBankAccount(
                                                                        BankAccount,"Ult. Consig. Name",TempText1,"Ult. Consig. Address","Ult. Consig. Address 2",
                                                                          "Ult. Consig. City","Ult. Consig. Contact","Ult. Consig. ZIP Code","Ult. Consig. State",
                                                                          "Ult. Consig. Country Code","Ult. Consig. Phone No.");
                                                                    END;
                                                                  "Ult. Consig. Type"::Contact:
                                                                    BEGIN
                                                                      Contact.GET("Ult. Consig. No.");
                                                                      TransferFromContact(
                                                                        Contact,"Ult. Consig. Name",TempText1,"Ult. Consig. Address","Ult. Consig. Address 2",
                                                                          "Ult. Consig. City","Ult. Consig. Contact","Ult. Consig. ZIP Code","Ult. Consig. State",
                                                                          "Ult. Consig. Country Code","Ult. Consig. Phone No.");
                                                                    END;
                                                                  "Ult. Consig. Type"::Resource:
                                                                    BEGIN
                                                                      Resource.GET("Ult. Consig. No.");
                                                                      TransferFromResource(
                                                                        Resource,"Ult. Consig. Name",TempText1,"Ult. Consig. Address","Ult. Consig. Address 2",
                                                                          "Ult. Consig. City","Ult. Consig. Contact","Ult. Consig. ZIP Code","Ult. Consig. State",
                                                                          "Ult. Consig. Country Code","Ult. Consig. Phone No.");
                                                                    END;
                                                                  "Ult. Consig. Type"::Employee:
                                                                    BEGIN
                                                                      Employee.GET("Ult. Consig. No.");
                                                                      TransferFromEmployee(
                                                                        Employee,"Ult. Consig. Name",TempText1,"Ult. Consig. Address","Ult. Consig. Address 2",
                                                                          "Ult. Consig. City","Ult. Consig. Contact","Ult. Consig. ZIP Code","Ult. Consig. State",
                                                                          "Ult. Consig. Country Code","Ult. Consig. Phone No.");
                                                                    END;
                                                                  ELSE
                                                                    ERROR(Text010,"Ult. Consig. Type",FIELDCAPTION("Ult. Consig. No."));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Ult. Consig. No. }
    { 105 ;   ;Ult. Consig. Type   ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);

                                                                IF "Ult. Consig. Type" <> xRec."Ult. Consig. Type" THEN BEGIN
                                                                  "Ult. Consig. No." := '';
                                                                  "Ult. Consig. Name" := '';
                                                                  "Ult. Consig. Address" := '';
                                                                  "Ult. Consig. Address 2" := '';
                                                                  "Ult. Consig. City" := '';
                                                                  "Ult. Consig. State" := '';
                                                                  "Ult. Consig. ZIP Code" := '';
                                                                  "Ult. Consig. Country Code" := '';
                                                                  "Ult. Consig. Contact" := '';
                                                                  "Ult. Consig. Phone No." := '';
                                                                  "Ult. Consig. VAT Reg. No." := '';
                                                                  "Ult. Consig. FTR Type" := "Ult. Consig. FTR Type"::" ";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Ult. Consig. Type;
                                                   OptionCaptionML=ENU=Customer,Vendor,Bank,Contact,Resource,Employee,,Location;
                                                   OptionString=Customer,Vendor,Bank,Contact,Resource,Employee,,Location }
    { 106 ;   ;Frt. Fwdr. No.      ;Code20        ;TableRelation=IF (Frt. Fwdr. Type=CONST(Customer)) Customer
                                                                 ELSE IF (Frt. Fwdr. Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Frt. Fwdr. Type=CONST(Location)) Location
                                                                 ELSE IF (Frt. Fwdr. Type=CONST(Bank)) "Bank Account"
                                                                 ELSE IF (Frt. Fwdr. Type=CONST(Resource)) Resource
                                                                 ELSE IF (Frt. Fwdr. Type=CONST(Employee)) Employee
                                                                 ELSE IF (Frt. Fwdr. Type=CONST(Contact)) Contact;
                                                   OnValidate=VAR
                                                                Customer@1240030003 : Record 18;
                                                                Vendor@1240030001 : Record 23;
                                                                Location@1240030000 : Record 14;
                                                                BankAccount@1240030007 : Record 270;
                                                                Contact@1240030006 : Record 5050;
                                                                Resource@1240030005 : Record 156;
                                                                Employee@1240030004 : Record 5200;
                                                                TempText1@1240030002 : Text[30];
                                                                TempText2@1240030008 : Text[30];
                                                              BEGIN
                                                                TESTFIELD(Submitted,FALSE);

                                                                CASE "Frt. Fwdr. Type" OF
                                                                  "Frt. Fwdr. Type"::Customer:
                                                                    BEGIN
                                                                      Customer.GET("Frt. Fwdr. No.");
                                                                      TransferFromCustomer(
                                                                        Customer,"Frt. Fwdr. Name",TempText1,"Frt. Fwdr. Address","Frt. Fwdr. Address 2",
                                                                        "Frt. Fwdr. City","Frt. Fwdr. Contact","Frt. Fwdr. ZIP Code","Frt. Fwdr. State",
                                                                        "Frt. Fwdr. Country Code","Frt. Fwdr. Phone No.",TempText2);
                                                                    END;
                                                                  "Frt. Fwdr. Type"::Vendor:
                                                                    BEGIN
                                                                      Vendor.GET("Frt. Fwdr. No.");
                                                                      TransferFromVendor(
                                                                        Vendor,"Frt. Fwdr. Name",TempText1,"Frt. Fwdr. Address","Frt. Fwdr. Address 2",
                                                                        "Frt. Fwdr. City","Frt. Fwdr. Contact","Frt. Fwdr. ZIP Code","Frt. Fwdr. State",
                                                                        "Frt. Fwdr. Country Code","Frt. Fwdr. Phone No.",TempText2);
                                                                    END;
                                                                  "Frt. Fwdr. Type"::Location:
                                                                    BEGIN
                                                                      Location.GET("Frt. Fwdr. No.");
                                                                      TransferFromLocation(
                                                                        Location,"Frt. Fwdr. Name",TempText1,"Frt. Fwdr. Address","Frt. Fwdr. Address 2",
                                                                          "Frt. Fwdr. City","Frt. Fwdr. Contact","Frt. Fwdr. ZIP Code","Frt. Fwdr. State",
                                                                          "Frt. Fwdr. Country Code","Frt. Fwdr. Phone No.");
                                                                    END;
                                                                  "Frt. Fwdr. Type"::Bank:
                                                                    BEGIN
                                                                      BankAccount.GET("Frt. Fwdr. No.");
                                                                      TransferFromBankAccount(
                                                                        BankAccount,"Frt. Fwdr. Name",TempText1,"Frt. Fwdr. Address","Frt. Fwdr. Address 2",
                                                                          "Frt. Fwdr. City","Frt. Fwdr. Contact","Frt. Fwdr. ZIP Code","Frt. Fwdr. State",
                                                                          "Frt. Fwdr. Country Code","Frt. Fwdr. Phone No.");
                                                                    END;
                                                                  "Frt. Fwdr. Type"::Contact:
                                                                    BEGIN
                                                                      Contact.GET("Frt. Fwdr. No.");
                                                                      TransferFromContact(
                                                                        Contact,"Frt. Fwdr. Name",TempText1,"Frt. Fwdr. Address","Frt. Fwdr. Address 2",
                                                                          "Frt. Fwdr. City","Frt. Fwdr. Contact","Frt. Fwdr. ZIP Code","Frt. Fwdr. State",
                                                                          "Frt. Fwdr. Country Code","Frt. Fwdr. Phone No.");
                                                                    END;
                                                                  "Frt. Fwdr. Type"::Resource:
                                                                    BEGIN
                                                                      Resource.GET("Frt. Fwdr. No.");
                                                                      TransferFromResource(
                                                                        Resource,"Frt. Fwdr. Name",TempText1,"Frt. Fwdr. Address","Frt. Fwdr. Address 2",
                                                                          "Frt. Fwdr. City","Frt. Fwdr. Contact","Frt. Fwdr. ZIP Code","Frt. Fwdr. State",
                                                                          "Frt. Fwdr. Country Code","Frt. Fwdr. Phone No.");
                                                                    END;
                                                                  "Frt. Fwdr. Type"::Employee:
                                                                    BEGIN
                                                                      Employee.GET("Frt. Fwdr. No.");
                                                                      TransferFromEmployee(
                                                                        Employee,"Frt. Fwdr. Name",TempText1,"Frt. Fwdr. Address","Frt. Fwdr. Address 2",
                                                                          "Frt. Fwdr. City","Frt. Fwdr. Contact","Frt. Fwdr. ZIP Code","Frt. Fwdr. State",
                                                                          "Frt. Fwdr. Country Code","Frt. Fwdr. Phone No.");
                                                                    END;
                                                                  ELSE
                                                                    ERROR(Text010,"Frt. Fwdr. Type",FIELDCAPTION("Frt. Fwdr. No."));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Frt. Fwdr. No. }
    { 107 ;   ;Frt. Fwdr. Type     ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);

                                                                IF "Frt. Fwdr. Type" <> xRec."Frt. Fwdr. Type" THEN BEGIN
                                                                  "Frt. Fwdr. No." := '';
                                                                  "Frt. Fwdr. Name" := '';
                                                                  "Frt. Fwdr. Address" := '';
                                                                  "Frt. Fwdr. Address 2" := '';
                                                                  "Frt. Fwdr. City" := '';
                                                                  "Frt. Fwdr. State" := '';
                                                                  "Frt. Fwdr. ZIP Code" := '';
                                                                  "Frt. Fwdr. Country Code" := '';
                                                                  "Frt. Fwdr. Contact" := '';
                                                                  "Frt. Fwdr. Phone No." := '';
                                                                  "Frt. Fwdr. ID" := '';
                                                                  "Frt. Fwdr. ID Type" := "Frt. Fwdr. ID Type"::EIN;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Frt. Fwdr. Type;
                                                   OptionCaptionML=ENU=Customer,Vendor,Bank,,Resource,Employee,Contact,Location;
                                                   OptionString=Customer,Vendor,Bank,,Resource,Employee,Contact,Location }
    { 108 ;   ;Sold-to No.         ;Code20        ;TableRelation=IF (Sold-to Type=CONST(Customer)) Customer
                                                                 ELSE IF (Sold-to Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Sold-to Type=CONST(Location)) Location
                                                                 ELSE IF (Sold-to Type=CONST(Bank)) "Bank Account"
                                                                 ELSE IF (Sold-to Type=CONST(Resource)) Resource
                                                                 ELSE IF (Sold-to Type=CONST(Employee)) Employee
                                                                 ELSE IF (Sold-to Type=CONST(Contact)) Contact;
                                                   OnValidate=VAR
                                                                Customer@1240030003 : Record 18;
                                                                Vendor@1240030001 : Record 23;
                                                                Location@1240030000 : Record 14;
                                                                BankAccount@1240030008 : Record 270;
                                                                Contact@1240030007 : Record 5050;
                                                                Resource@1240030006 : Record 156;
                                                                Employee@1240030005 : Record 5200;
                                                                TempText1@1240030004 : Text[30];
                                                              BEGIN
                                                                IF NOT "Alt. Sold-to" AND
                                                                  ("Sold-to No." <> '')
                                                                THEN
                                                                  ERROR(Text001,FIELDCAPTION("Sold-to No."),FIELDCAPTION("Alt. Sold-to"));

                                                                IF NOT "Alt. Sold-to" AND
                                                                  ("Sold-to No." = '')
                                                                THEN
                                                                  EXIT;

                                                                CASE "Sold-to Type" OF
                                                                  "Sold-to Type"::Customer:
                                                                    BEGIN
                                                                      Customer.GET("Sold-to No.");
                                                                      TransferFromCustomer(
                                                                        Customer,"Sold-to Name",TempText1,"Sold-to Address","Sold-to Address 2",
                                                                        "Sold-to City","Sold-to Contact","Sold-to ZIP Code","Sold-to State",
                                                                        "Sold-to Country Code","Sold-to Phone No.","Sold-to VAT Registration No.");
                                                                      "Sold-to Email Address" := Customer."E-Mail";
                                                                    END;
                                                                  "Sold-to Type"::Vendor:
                                                                    BEGIN
                                                                      Vendor.GET("Sold-to No.");
                                                                      TransferFromVendor(
                                                                        Vendor,"Sold-to Name",TempText1,"Sold-to Address","Sold-to Address 2",
                                                                        "Sold-to City","Sold-to Contact","Sold-to ZIP Code","Sold-to State",
                                                                        "Sold-to Country Code","Sold-to Phone No.","Sold-to VAT Registration No.");
                                                                    END;
                                                                  "Sold-to Type"::Location:
                                                                    BEGIN
                                                                      Location.GET("Sold-to No.");
                                                                      TransferFromLocation(
                                                                        Location,"Sold-to Name",TempText1,"Sold-to Address","Sold-to Address 2",
                                                                          "Sold-to City","Sold-to Contact","Sold-to ZIP Code","Sold-to State",
                                                                          "Sold-to Country Code","Sold-to Phone No.");
                                                                    END;
                                                                  "Sold-to Type"::Bank:
                                                                    BEGIN
                                                                      BankAccount.GET("Sold-to No.");
                                                                      TransferFromBankAccount(
                                                                        BankAccount,"Sold-to Name",TempText1,"Sold-to Address","Sold-to Address 2",
                                                                          "Sold-to City","Sold-to Contact","Sold-to ZIP Code","Sold-to State",
                                                                          "Sold-to Country Code","Sold-to Phone No.");
                                                                    END;
                                                                  "Sold-to Type"::Contact:
                                                                    BEGIN
                                                                      Contact.GET("Sold-to No.");
                                                                      TransferFromContact(
                                                                        Contact,"Sold-to Name",TempText1,"Sold-to Address","Sold-to Address 2",
                                                                          "Sold-to City","Sold-to Contact","Sold-to ZIP Code","Sold-to State",
                                                                          "Sold-to Country Code","Sold-to Phone No.");
                                                                    END;
                                                                  "Sold-to Type"::Resource:
                                                                    BEGIN
                                                                      Resource.GET("Sold-to No.");
                                                                      TransferFromResource(
                                                                        Resource,"Sold-to Name",TempText1,"Sold-to Address","Sold-to Address 2",
                                                                          "Sold-to City","Sold-to Contact","Sold-to ZIP Code","Sold-to State",
                                                                          "Sold-to Country Code","Sold-to Phone No.");
                                                                    END;
                                                                  "Sold-to Type"::Employee:
                                                                    BEGIN
                                                                      Employee.GET("Sold-to No.");
                                                                      TransferFromEmployee(
                                                                        Employee,"Sold-to Name",TempText1,"Sold-to Address","Sold-to Address 2",
                                                                          "Sold-to City","Sold-to Contact","Sold-to ZIP Code","Sold-to State",
                                                                          "Sold-to Country Code","Sold-to Phone No.");
                                                                    END;
                                                                  ELSE
                                                                    ERROR(Text010,"Sold-to Type",FIELDCAPTION("Sold-to No."));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Sold-to No. }
    { 109 ;   ;Sold-to Type        ;Option        ;OnValidate=BEGIN
                                                                IF "Sold-to Type" <> xRec."Sold-to Type" THEN BEGIN
                                                                  "Sold-to No." := '';
                                                                  "Sold-to Name" := '';
                                                                  "Sold-to Address" := '';
                                                                  "Sold-to Address 2" := '';
                                                                  "Sold-to City" := '';
                                                                  "Sold-to State" := '';
                                                                  "Sold-to ZIP Code" := '';
                                                                  "Sold-to Country Code" := '';
                                                                  "Sold-to Phone No." := '';
                                                                  "Sold-to VAT Registration No." := '';
                                                                  "Sold-to Contact" := '';
                                                                  "Sold-to Email Address" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Sold-to Type;
                                                   OptionCaptionML=ENU=Customer,Vendor,Bank,Contact,Resource,Employee,,Location;
                                                   OptionString=Customer,Vendor,Bank,Contact,Resource,Employee,,Location }
    { 110 ;   ;Sold-to Name        ;Text50        ;OnValidate=BEGIN
                                                                IF NOT "Alt. Sold-to" AND
                                                                  ("Sold-to Name" <> '')
                                                                THEN
                                                                  ERROR(Text001,FIELDCAPTION("Sold-to Name"),FIELDCAPTION("Alt. Sold-to"));
                                                              END;

                                                   CaptionML=ENU=Sold-to Name }
    { 111 ;   ;Sold-to Address     ;Text50        ;OnValidate=BEGIN
                                                                IF NOT "Alt. Sold-to" AND
                                                                  ("Sold-to Address" <> '')
                                                                THEN
                                                                  ERROR(Text001,FIELDCAPTION("Sold-to Address"),FIELDCAPTION("Alt. Sold-to"));
                                                              END;

                                                   CaptionML=ENU=Sold-to Address }
    { 112 ;   ;Sold-to Address 2   ;Text50        ;OnValidate=BEGIN
                                                                IF NOT "Alt. Sold-to" AND
                                                                  ("Sold-to Address 2" <> '')
                                                                THEN
                                                                  ERROR(Text001,FIELDCAPTION("Sold-to Address 2"),FIELDCAPTION("Alt. Sold-to"));
                                                              END;

                                                   CaptionML=ENU=Sold-to Address 2 }
    { 113 ;   ;Sold-to City        ;Text30        ;OnValidate=BEGIN
                                                                IF NOT "Alt. Sold-to" AND
                                                                  ("Sold-to City" <> '')
                                                                THEN
                                                                  ERROR(Text001,FIELDCAPTION("Sold-to City"),FIELDCAPTION("Alt. Sold-to"));
                                                              END;

                                                   CaptionML=ENU=Sold-to City }
    { 114 ;   ;Sold-to State       ;Text30        ;OnValidate=BEGIN
                                                                IF NOT "Alt. Sold-to" AND
                                                                  ("Sold-to State" <> '')
                                                                THEN
                                                                  ERROR(Text001,FIELDCAPTION("Sold-to State"),FIELDCAPTION("Alt. Sold-to"));
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupStateValidationCode("Sold-to State",GetISOCountryCode("Sold-to Country Code"));
                                                            END;

                                                   CaptionML=ENU=Sold-to State }
    { 115 ;   ;Sold-to ZIP Code    ;Code20        ;OnValidate=BEGIN
                                                                IF NOT "Alt. Sold-to" AND
                                                                  ("Sold-to ZIP Code" <> '')
                                                                THEN
                                                                  ERROR(Text001,FIELDCAPTION("Sold-to ZIP Code"),FIELDCAPTION("Alt. Sold-to"));
                                                              END;

                                                   CaptionML=ENU=Sold-to ZIP Code }
    { 116 ;   ;Sold-to Country Code;Code10        ;TableRelation=Country/Region.Code;
                                                   OnValidate=BEGIN
                                                                IF NOT "Alt. Sold-to" AND
                                                                  ("Sold-to Country Code" <> '')
                                                                THEN
                                                                  ERROR(Text001,FIELDCAPTION("Sold-to Country Code"),FIELDCAPTION("Alt. Sold-to"));
                                                              END;

                                                   CaptionML=ENU=Sold-to Country Code }
    { 117 ;   ;Sold-to Contact     ;Text50        ;OnValidate=BEGIN
                                                                IF NOT "Alt. Sold-to" AND
                                                                  ("Sold-to Contact" <> '')
                                                                THEN
                                                                  ERROR(Text001,FIELDCAPTION("Sold-to Contact"),FIELDCAPTION("Alt. Sold-to"));
                                                              END;

                                                   CaptionML=ENU=Sold-to Contact }
    { 118 ;   ;Sold-to Phone No.   ;Text30        ;OnValidate=BEGIN
                                                                IF NOT "Alt. Sold-to" AND
                                                                  ("Sold-to Phone No." <> '')
                                                                THEN
                                                                  ERROR(Text001,FIELDCAPTION("Sold-to Phone No."),FIELDCAPTION("Alt. Sold-to"));

                                                                IF NOT CheckPhone("Sold-to Phone No.") THEN
                                                                  ERROR(Text002,FIELDCAPTION("Sold-to Phone No."));
                                                              END;

                                                   CaptionML=ENU=Sold-to Phone No. }
    { 119 ;   ;Sold-to VAT Registration No.;Text30;OnValidate=BEGIN
                                                                IF NOT "Alt. Sold-to" AND
                                                                  ("Sold-to VAT Registration No." <> '')
                                                                THEN
                                                                  ERROR(Text001,FIELDCAPTION("Sold-to VAT Registration No."),FIELDCAPTION("Alt. Sold-to"));
                                                              END;

                                                   CaptionML=ENU=Sold-to VAT Registration No. }
    { 121 ;   ;Alt. Sold-to        ;Boolean       ;CaptionML=ENU=Alt. Sold-to }
    { 123 ;   ;Location Code       ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 124 ;   ;PPI Country Code    ;Code10        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;

                                                   CaptionML=ENU=PPI Country Code }
    { 125 ;   ;Export Rpts. Excl. Pkg. Disc.;Boolean;
                                                   CaptionML=ENU=Export Rpts. Excl. Pkg. Disc. }
    { 126 ;   ;Filing Option       ;Option        ;InitValue=2 - Predeparture;
                                                   CaptionML=ENU=Filing Option;
                                                   OptionCaptionML=ENU=2 - Predeparture,4 - Approved Postdeparture";
                                                   OptionString=2 - Predeparture,4 - Approved Postdeparture }
    { 127 ;   ;Ship-to FTR Type    ;Option        ;CaptionML=ENU=Ship-to FTR Type;
                                                   OptionCaptionML=ENU=" ,D - Direct Consumer,G - Government Entity,R - Reseller,O - Other/Unknown";
                                                   OptionString=[ ,D - Direct Consumer,G - Government Entity,R - Reseller,O - Other/Unknown] }
    { 128 ;   ;Ult. Consig. FTR Type;Option       ;CaptionML=ENU=Ult. Consig. FTR Type;
                                                   OptionCaptionML=ENU=" ,D - Direct Consumer,G - Government Entity,R - Reseller,O - Other/Unknown";
                                                   OptionString=[ ,D - Direct Consumer,G - Government Entity,R - Reseller,O - Other/Unknown] }
    { 129 ;   ;PPI Email Address   ;Text80        ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;
                                                               }
    { 130 ;   ;Ship-to Email Address;Text80       ;OnValidate=BEGIN
                                                                TESTFIELD(Submitted,FALSE);
                                                              END;
                                                               }
    { 131 ;   ;Sold-to Email Address;Text80       ;OnValidate=BEGIN
                                                                IF NOT "Alt. Sold-to" AND
                                                                  ("Sold-to Email Address" <> '')
                                                                THEN
                                                                  ERROR(Text001,FIELDCAPTION("Sold-to Email Address"),FIELDCAPTION("Alt. Sold-to"));
                                                              END;
                                                               }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Ship-to Type,Ship-to No.,Ship-to Code,Carrier }
    {    ;Posted,Manual                            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ShippingSetup@1240030001 : Record 14000707;
      PackingStation@1240030002 : Record 14000709;
      ShippingSetupRetrieved@1240030000 : Boolean;
      Text001@1240030004 : TextConst 'ENU=%1 cannot be entered unless %2 is checked.';
      Text002@1240030005 : TextConst 'ENU=No more than 11 digits allowed in %1';
      Text003@1240030006 : TextConst 'ENU=Do you want to change the %1 on all the shipment lines?';
      Text004@1240030007 : TextConst 'ENU=Delete all Export Document Lines before changing %1';
      Text006@1240030009 : TextConst 'ENU=%1 must be Customer or Vendor.';
      Text007@1240030010 : TextConst 'ENU=%1 exists for this %2.  %3 cannot be changed.';
      Text009@1240030012 : TextConst 'ENU=%1 may not be longer than 17 characters.';
      Text010@1240030003 : TextConst 'ENU=%1 not available for %2.';
      ExportDocSetup@1240030011 : Record 14000991;
      ExportDocSetupRetrieved@1240030008 : Boolean;
      ShippingAgentService@1240030013 : Record 14000708;
      ShippingAgent@1240030015 : Record 291;
      ShipperTypeMgt@1240030014 : Codeunit 14000711;
      Item@1240030016 : Record 27;
      Text011@1240020000 : TextConst 'ENU=%1%2  has been accepted by the US Census Bureau.  It cannot be deleted.  If it has been cancelled, post the Export Document then Mark it as Cancelled.';

    LOCAL PROCEDURE GetShippingSetup@22();
    BEGIN
      IF NOT ShippingSetupRetrieved THEN BEGIN
        ShippingSetup.GET;
        ShippingSetupRetrieved := TRUE;
      END;
    END;

    LOCAL PROCEDURE GetPackingStation@51();
    BEGIN
      IF PackingStation.Code = '' THEN
        PackingStation.GetPackingStation;
    END;

    LOCAL PROCEDURE LinesExist@1240030001() : Boolean;
    VAR
      ExportSourceLine@1240030000 : Record 14000983;
    BEGIN
      ExportSourceLine.RESET;
      ExportSourceLine.SETRANGE("Export Document No.","No.");
      IF ExportSourceLine.FIND('-') THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE ClearShipToAddess@28();
    BEGIN
      "Ship-to Name" := '';
      "Ship-to Name 2" := '';
      "Ship-to Address" := '';
      "Ship-to Address 2" := '';
      "Ship-to City" := '';
      "Ship-to Contact" := '';
      "Ship-to ZIP Code" := '';
      "Ship-to State" := '';
      "Ship-to Country Code" := '';
      "Ship-to Phone No." := '';
      "Ship-to Contact" := '';
    END;

    PROCEDURE TransferFromCustomer@23(CurrentCustomer@1000000000 : Record 18;VAR Name@1240030000 : Text[50];VAR Name2@1240030001 : Text[50];VAR Address@1240030002 : Text[50];VAR Address2@1240030003 : Text[50];VAR City@1240030004 : Text[50];VAR Contact@1240030005 : Text[50];VAR ZipCode@1240030006 : Code[20];VAR State@1240030007 : Text[20];VAR CountryCode@1240030008 : Code[10];VAR PhoneNo@1240030009 : Text[30];VAR VatRegistrationNo@1240030011 : Text[30]);
    BEGIN
      GetShippingSetup;

      Name := CurrentCustomer.Name;
      Name2 := CurrentCustomer."Name 2";
      Address := CurrentCustomer.Address;
      Address2 := CurrentCustomer."Address 2";
      City := CurrentCustomer.City;
      Contact := CurrentCustomer.Contact;
      ZipCode := ShippingSetup.AdjustZIPCode(CurrentCustomer."Post Code");
      State := CurrentCustomer.County;
      CountryCode := CurrentCustomer."Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(ZipCode,State,City,CountryCode);
      PhoneNo := CurrentCustomer."Phone No.";
      VatRegistrationNo := CurrentCustomer."VAT Registration No.";
    END;

    PROCEDURE TransferFromVendor@3(CurrentVendor@1000000000 : Record 23;VAR Name@1240030011 : Text[50];VAR Name2@1240030010 : Text[50];VAR Address@1240030009 : Text[50];VAR Address2@1240030008 : Text[50];VAR City@1240030007 : Text[50];VAR Contact@1240030006 : Text[50];VAR ZipCode@1240030005 : Code[20];VAR State@1240030004 : Text[20];VAR CountryCode@1240030003 : Code[10];VAR PhoneNo@1240030002 : Text[30];VAR VatRegistrationNo@1240030000 : Text[30]);
    BEGIN
      GetShippingSetup;

      Name := CurrentVendor.Name;
      Name2 := CurrentVendor."Name 2";
      Address := CurrentVendor.Address;
      Address2 := CurrentVendor."Address 2";
      City := CurrentVendor.City;
      Contact := CurrentVendor.Contact;
      ZipCode := ShippingSetup.AdjustZIPCode(CurrentVendor."Post Code");
      State := CurrentVendor.County;
      CountryCode := CurrentVendor."Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(ZipCode,State,City,CountryCode);
      PhoneNo := CurrentVendor."Phone No.";
      VatRegistrationNo := CurrentVendor."VAT Registration No.";
    END;

    PROCEDURE TransferFromLocation@11(CurrentLocation@1240030000 : Record 14;VAR Name@1240030012 : Text[50];VAR Name2@1240030011 : Text[50];VAR Address@1240030010 : Text[50];VAR Address2@1240030009 : Text[50];VAR City@1240030008 : Text[50];VAR Contact@1240030007 : Text[50];VAR ZipCode@1240030006 : Code[20];VAR State@1240030005 : Text[20];VAR CountryCode@1240030004 : Code[10];VAR PhoneNo@1240030003 : Text[30]);
    BEGIN
      GetShippingSetup;

      Name := CurrentLocation.Name;
      Name2 := CurrentLocation."Name 2";
      Address := CurrentLocation.Address;
      Address2 := CurrentLocation."Address 2";
      City := CurrentLocation.City;
      Contact := '';
      ZipCode := ShippingSetup.AdjustZIPCode(CurrentLocation."Post Code");
      State := CurrentLocation.County;
      CountryCode := CurrentLocation."Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(ZipCode,State,City,CountryCode);
      PhoneNo := CurrentLocation."Phone No.";
    END;

    PROCEDURE TransferFromBankAccount@21(CurrentBankAccount@1000000000 : Record 270;VAR Name@1240030011 : Text[50];VAR Name2@1240030010 : Text[50];VAR Address@1240030009 : Text[50];VAR Address2@1240030008 : Text[50];VAR City@1240030007 : Text[50];VAR Contact@1240030006 : Text[50];VAR ZipCode@1240030005 : Code[20];VAR State@1240030004 : Text[20];VAR CountryCode@1240030003 : Code[10];VAR PhoneNo@1240030002 : Text[30]);
    BEGIN
      GetShippingSetup;
      Name := CurrentBankAccount.Name;
      Name2 := CurrentBankAccount."Name 2";
      Address := CurrentBankAccount.Address;
      Address2 := CurrentBankAccount."Address 2";
      City := CurrentBankAccount.City;
      Contact := CurrentBankAccount.Contact;
      ZipCode := ShippingSetup.AdjustZIPCode(CurrentBankAccount."Post Code");
      State := CurrentBankAccount.County;
      CountryCode := CurrentBankAccount."Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(ZipCode,State,City,CountryCode);
      PhoneNo := CurrentBankAccount."Phone No.";
    END;

    PROCEDURE TransferFromContact@24(CurrentProspect@1000000000 : Record 5050;VAR Name@1240030011 : Text[50];VAR Name2@1240030010 : Text[50];VAR Address@1240030009 : Text[50];VAR Address2@1240030008 : Text[50];VAR City@1240030007 : Text[50];VAR Contact@1240030006 : Text[50];VAR ZipCode@1240030005 : Code[20];VAR State@1240030004 : Text[20];VAR CountryCode@1240030003 : Code[10];VAR PhoneNo@1240030002 : Text[30]);
    BEGIN
      GetShippingSetup;
      Name := CurrentProspect.Name;
      Name2 := CurrentProspect."Name 2";
      Address := CurrentProspect.Address;
      Address2 := CurrentProspect."Address 2";
      City := CurrentProspect.City;
      Contact := '';
      ZipCode := ShippingSetup.AdjustZIPCode(CurrentProspect."Post Code");
      State := CurrentProspect.County;
      CountryCode := CurrentProspect."Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(ZipCode,State,City,CountryCode);
      PhoneNo := CurrentProspect."Phone No.";
    END;

    PROCEDURE TransferFromResource@26(CurrentResource@1000000000 : Record 156;VAR Name@1240030011 : Text[50];VAR Name2@1240030010 : Text[50];VAR Address@1240030009 : Text[50];VAR Address2@1240030008 : Text[50];VAR City@1240030007 : Text[50];VAR Contact@1240030006 : Text[50];VAR ZipCode@1240030005 : Code[20];VAR State@1240030004 : Text[20];VAR CountryCode@1240030003 : Code[10];VAR PhoneNo@1240030002 : Text[30]);
    BEGIN
      GetShippingSetup;
      Name := CurrentResource.Name;
      Name2 := CurrentResource."Name 2";
      Address := CurrentResource.Address;
      Address2 := CurrentResource."Address 2";
      City := CurrentResource.City;
      Contact := '';
      ZipCode := ShippingSetup.AdjustZIPCode(CurrentResource."Post Code");
      State := CurrentResource.County;
      CountryCode := '';
      ShippingSetup.AdjustZIPStateCityCode(ZipCode,State,City,CountryCode);
      PhoneNo := '';
    END;

    PROCEDURE TransferFromEmployee@34(CurrentEmployee@1000000000 : Record 5200;VAR Name@1240030011 : Text[50];VAR Name2@1240030010 : Text[50];VAR Address@1240030009 : Text[50];VAR Address2@1240030008 : Text[50];VAR City@1240030007 : Text[50];VAR Contact@1240030006 : Text[50];VAR ZipCode@1240030005 : Code[20];VAR State@1240030004 : Text[20];VAR CountryCode@1240030003 : Code[10];VAR PhoneNo@1240030002 : Text[30]);
    BEGIN
      GetShippingSetup;
      IF CurrentEmployee."Middle Name" <> '' THEN
         Name :=
          CurrentEmployee."First Name" + ' ' + CurrentEmployee."Middle Name" + ' ' +
          CurrentEmployee."Last Name"
      ELSE
         Name := CurrentEmployee."First Name" + ' ' + CurrentEmployee."Last Name";

      Name2 := '';
      Address := CurrentEmployee.Address;
      Address2 := CurrentEmployee."Address 2";
      City := CurrentEmployee.City;
      Contact := '';
      ZipCode := ShippingSetup.AdjustZIPCode(CurrentEmployee."Post Code");
      State := CurrentEmployee.County;
      CountryCode := CurrentEmployee."Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(ZipCode,State,City,CountryCode);
      PhoneNo := CurrentEmployee."Phone No.";
    END;

    PROCEDURE TransferFromShipToAddress@25(CurrentShipToAddress@1000000000 : Record 222);
    BEGIN
      GetShippingSetup;

      "Ship-to Name" := CurrentShipToAddress.Name;
      "Ship-to Name 2" := CurrentShipToAddress."Name 2";
      "Ship-to Address" := CurrentShipToAddress.Address;
      "Ship-to Address 2" := CurrentShipToAddress."Address 2";
      "Ship-to City" := CurrentShipToAddress.City;
      "Ship-to Contact" := CurrentShipToAddress.Contact;
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(CurrentShipToAddress."Post Code");
      "Ship-to State" := CurrentShipToAddress.County;
      VALIDATE("Ship-to Country Code",CurrentShipToAddress."Country/Region Code");
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Ship-to Phone No." := CurrentShipToAddress."Phone No.";
      VALIDATE("Country of Destination",CurrentShipToAddress."Country/Region Code");
    END;

    PROCEDURE TransferShipToFromOrderAddress@27(CurrentOrderAddress@1000000000 : Record 224);
    BEGIN
      GetShippingSetup;

      "Ship-to Name" := CurrentOrderAddress.Name;
      "Ship-to Name 2" := CurrentOrderAddress."Name 2";
      "Ship-to Address" := CurrentOrderAddress.Address;
      "Ship-to Address 2" := CurrentOrderAddress."Address 2";
      "Ship-to City" := CurrentOrderAddress.City;
      "Ship-to Contact" := CurrentOrderAddress.Contact;
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(CurrentOrderAddress."Post Code");
      "Ship-to State" := CurrentOrderAddress.County;
      VALIDATE("Ship-to Country Code",CurrentOrderAddress."Country/Region Code");
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Ship-to Phone No." := CurrentOrderAddress."Phone No.";
      VALIDATE("Country of Destination",CurrentOrderAddress."Country/Region Code");
    END;

    PROCEDURE TransferFromPackingStation@2();
    VAR
      i@1240030000 : Integer;
      ExportDocValidation@1240020000 : Record 14000985;
    BEGIN
      GetShippingSetup;
      GetPackingStation;
      GetExportDocSetup;

      VALIDATE("PPI Name",PackingStation."Ship-from Company");

      "PPI Address" := PackingStation."Ship-from Address";
      "PPI Address 2" := PackingStation."Ship-from Address2";
      "PPI City" := PackingStation."Ship-from City";
      "PPI State" := PackingStation."Ship-from State";
      VALIDATE("PPI Country Code",PackingStation."Ship-from Country Code");
      "State of Origin" := "PPI State";

      "PPI ZIP Code" := ShippingSetup.AdjustZIPCode(PackingStation."Ship-from ZIP Code");
      "PPI Phone No." := PackingStation."Ship-from Phone No.";
      "PPI Fax No." := PackingStation."Ship-from Fax No.";

      "PPI ID" := PackingStation."Federal ID No.";
      "PPI ID Type" := "PPI ID Type"::EIN;

      "License No." := PackingStation."Export License No.";
      "License Type" := PackingStation."Export License Type";
      ExportDocValidation.GET(ExportDocValidation.Table::License,0,"License Type");
      IF ExportDocValidation."Description 2" <> '' THEN
        "License No." := ExportDocValidation."Description 2";
      "License Exp. Date" := PackingStation."Export License Expiration Date";
      "Export Information Code" := PackingStation."Export Information Code";

      "PPI Contact" := PackingStation."Ship-from Contact";
      i := STRPOS(PackingStation."Ship-from Contact",' ');
      IF (i = 0) OR
         (i = STRLEN(PackingStation."Ship-from Contact"))
      THEN
        "PPI Contact Last Name" := PackingStation."Ship-from Contact"
      ELSE BEGIN
        "PPI Contact First Name" := COPYSTR(PackingStation."Ship-from Contact",1,i-1);
        "PPI Contact Last Name" := COPYSTR(PackingStation."Ship-from Contact",i+1);
      END;

      IF PackingStation."Ship-from E-Mail" <> '' THEN
        "AES Response Email" := PackingStation."Ship-from E-Mail";

      IF ShippingSetup."Location Packing" THEN
        "Location Code" := PackingStation."Location Code";

      "Export Rpts. Excl. Pkg. Disc." := ExportDocSetup."Export Rpts. Excl. Pkg. Disc.";

      "PPI Email Address" := PackingStation."Ship-from E-Mail";
    END;

    PROCEDURE UpdateSummaryLines@1240030002();
    VAR
      ExportSourceLine@1240030000 : Record 14000983;
      ExportDocLine@1240030001 : Record 14000984;
      TotalQuantity1@1240030002 : Decimal;
      TotalQuantity2@1240030005 : Decimal;
      TotalWeightKGS@1240030004 : Decimal;
      TotalWeight@1240030003 : Decimal;
    BEGIN
      TESTFIELD("No.");
      TESTFIELD(Submitted,FALSE);

      ExportDocLine.RESET;
      ExportDocLine.SETRANGE("Export Document No.","No.");
      ExportDocLine.DELETEALL;

      ExportDocLine."Export Document No." := "No.";
      ExportDocLine.INIT;

      ExportSourceLine.RESET;
      ExportSourceLine.SETCURRENTKEY(
        "Export Document No.","Schedule B Code",Description,"Export Information Code","License Type",
        "License No.","Export Control Class No.",Origin,"Schedule B Unit of Measure 1",
        "Schedule B Unit of Measure 2","Used Vehicle ID");
      ExportSourceLine.SETRANGE("Export Document No.","No.");
      ExportSourceLine.SETFILTER(
        Type,'%1|%2|%3',ExportSourceLine.Type::" ",ExportSourceLine.Type::Item,
        ExportSourceLine.Type::Resource);

      IF ExportSourceLine.FIND('-') THEN BEGIN
        ExportDocLine.INIT;
        ExportDocLine."Export Document No." := "No.";
        ExportDocLine."Schedule B Code" := ExportSourceLine."Schedule B Code";
        ExportDocLine."Commodity Code Type" := ExportSourceLine."Commodity Code Type";
        ExportDocLine.Description := ExportSourceLine.Description;

        ExportDocLine."Export Information Code" := ExportSourceLine."Export Information Code";
        ExportDocLine."License Type" := ExportSourceLine."License Type";
        ExportDocLine."License No." := ExportSourceLine."License No.";
        ExportDocLine."Export Control Class No." := ExportSourceLine."Export Control Class No.";

        ExportDocLine.Origin := ExportSourceLine.Origin;
        ExportDocLine."Schedule B Unit of Measure 1" := ExportSourceLine."Schedule B Unit of Measure 1";
        ExportDocLine."Schedule B Unit of Measure 2" := ExportSourceLine."Schedule B Unit of Measure 2";
        ExportDocLine."Used Vehicle ID" := ExportSourceLine."Used Vehicle ID";

        REPEAT
          IF (ExportSourceLine."Schedule B Code" <> ExportDocLine."Schedule B Code") OR
             (ExportSourceLine.Description <> ExportDocLine.Description) OR
             (ExportSourceLine."Export Information Code" <> ExportDocLine."Export Information Code") OR
             (ExportSourceLine."License Type" <> ExportDocLine."License Type") OR
             (ExportSourceLine."License No." <> ExportDocLine."License No.") OR
             (ExportSourceLine."Export Control Class No." <> ExportDocLine."Export Control Class No.") OR
             (ExportSourceLine.Origin <> ExportDocLine.Origin) OR
             (ExportSourceLine."Schedule B Unit of Measure 1" <> ExportDocLine."Schedule B Unit of Measure 1") OR
             (ExportSourceLine."Schedule B Unit of Measure 2" <> ExportDocLine."Schedule B Unit of Measure 2") OR
             (ExportSourceLine."Used Vehicle ID" <> ExportDocLine."Used Vehicle ID")
          THEN BEGIN
            IF ExportDocLine."Value USD" > 0 THEN BEGIN
              ExportDocLine."Schedule B Quantity 1" := ROUND(TotalQuantity1,1,'>');
              ExportDocLine."Schedule B Quantity 2" := ROUND(TotalQuantity2,1,'>');
              ExportDocLine."Weight (KGS)" := ROUND(TotalWeightKGS,1,'>');
              ExportDocLine.Weight := ROUND(TotalWeight,1,'>');
              ExportDocLine.INSERT;
            END;

            ExportDocLine.INIT;
            ExportDocLine."Export Document No." := "No.";
            ExportDocLine."Schedule B Code" := ExportSourceLine."Schedule B Code";
            ExportDocLine."Commodity Code Type" := ExportSourceLine."Commodity Code Type";
            ExportDocLine.Description := ExportSourceLine.Description;

            ExportDocLine."Export Information Code" := ExportSourceLine."Export Information Code";
            ExportDocLine."License Type" := ExportSourceLine."License Type";
            ExportDocLine."License No." := ExportSourceLine."License No.";
            ExportDocLine."Export Control Class No." := ExportSourceLine."Export Control Class No.";

            ExportDocLine.Origin := ExportSourceLine.Origin;
            ExportDocLine."Schedule B Unit of Measure 1" := ExportSourceLine."Schedule B Unit of Measure 1";
            ExportDocLine."Schedule B Unit of Measure 2" := ExportSourceLine."Schedule B Unit of Measure 2";
            ExportDocLine."Value USD" := ExportSourceLine."Value USD";

            TotalQuantity1 := ExportSourceLine."Schedule B Quantity 1";
            TotalQuantity2 := ExportSourceLine."Schedule B Quantity 2";
            TotalWeightKGS := ExportSourceLine."Weight (KGS)";
            TotalWeight := ExportSourceLine.Weight;

            ExportDocLine."Used Vehicle" := ExportSourceLine."Used Vehicle";
            ExportDocLine."Used Vehicle ID Type" := ExportSourceLine."Used Vehicle ID Type";
            ExportDocLine."Used Vehicle ID" := ExportSourceLine."Used Vehicle ID";
            ExportDocLine."Used Vehicle Title" := ExportSourceLine."Used Vehicle Title";
            ExportDocLine."Used Vehicle Title State" := ExportSourceLine."Used Vehicle Title State";
          END ELSE BEGIN
            ExportDocLine."Used Vehicle" := ExportSourceLine."Used Vehicle";
            ExportDocLine."Used Vehicle ID Type" := ExportSourceLine."Used Vehicle ID Type";
            ExportDocLine."Used Vehicle ID" := ExportSourceLine."Used Vehicle ID";
            ExportDocLine."Used Vehicle Title" := ExportSourceLine."Used Vehicle Title";
            ExportDocLine."Used Vehicle Title State" := ExportSourceLine."Used Vehicle Title State";

            ExportDocLine."Value USD" := ExportDocLine."Value USD" + ExportSourceLine."Value USD";
            TotalQuantity1 := TotalQuantity1 + ExportSourceLine."Schedule B Quantity 1";
            TotalQuantity2 := TotalQuantity2 + ExportSourceLine."Schedule B Quantity 2";
            TotalWeightKGS := TotalWeightKGS + ExportSourceLine."Weight (KGS)";
            TotalWeight := TotalWeight + ExportSourceLine.Weight;
          END;
        UNTIL ExportSourceLine.NEXT = 0;

        IF ExportDocLine."Value USD" > 0 THEN BEGIN
          ExportDocLine."Schedule B Quantity 1" := ROUND(TotalQuantity1,1,'>');
          ExportDocLine."Schedule B Quantity 2" := ROUND(TotalQuantity2,1,'>');
          ExportDocLine."Weight (KGS)" := ROUND(TotalWeightKGS,1,'>');
          ExportDocLine.Weight := ROUND(TotalWeight,1,'>');
          ExportDocLine.INSERT;
        END;
      END;
    END;

    LOCAL PROCEDURE CheckPhone@1240030003(PhoneNo@1240030000 : Code[20]) : Boolean;
    VAR
      i@1240030001 : Integer;
      j@1240030002 : Integer;
    BEGIN
      IF PhoneNo <> '' THEN
        REPEAT
          j := j + 1;
          IF COPYSTR(PhoneNo,j,1) IN ['0','1','2','3','4','5','6','7','8','9'] THEN
            i := i + 1;
        UNTIL j = STRLEN(PhoneNo);

      IF i > 11 THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE GetISOCountryCode@31(CountryCode@1000000000 : Code[10]) : Code[10];
    VAR
      Country@1000000001 : Record 9;
    BEGIN
      IF CountryCode <> '' THEN BEGIN
        Country.GET(CountryCode);
        EXIT(Country."ISO 2 char Country Code");
      END ELSE
        EXIT('US');
    END;

    PROCEDURE LookupStateValidationCode@1240030005(VAR StateCode@1240030001 : Text[30];CountryISO2chr@1240030000 : Code[2]);
    VAR
      ExportDocValidation@1240030002 : Record 14000985;
    BEGIN
      ExportDocValidation.RESET;
      CASE CountryISO2chr OF
        'US':
          BEGIN
            ExportDocValidation.SETRANGE(Table,ExportDocValidation.Table::"US State");
            ExportDocValidation.SETRANGE(Code,StateCode);
            IF ExportDocValidation.FIND('-') THEN ;
            ExportDocValidation.SETRANGE(Code);
            IF PAGE.RUNMODAL(0,ExportDocValidation) = ACTION::LookupOK THEN
              StateCode := ExportDocValidation.Code;
          END;
        'CA':
          BEGIN
            ExportDocValidation.SETRANGE(Table,ExportDocValidation.Table::"CAN State");
            ExportDocValidation.SETRANGE(Code,StateCode);
            IF ExportDocValidation.FIND('-') THEN ;
            ExportDocValidation.SETRANGE(Code);
            IF PAGE.RUNMODAL(0,ExportDocValidation) = ACTION::LookupOK THEN
              StateCode := ExportDocValidation.Code;
          END;
        'MX':
          BEGIN
            ExportDocValidation.SETRANGE(Table,ExportDocValidation.Table::"MEX State");
            ExportDocValidation.SETRANGE(Code,StateCode);
            IF ExportDocValidation.FIND('-') THEN ;
            ExportDocValidation.SETRANGE(Code);
            IF PAGE.RUNMODAL(0,ExportDocValidation) = ACTION::LookupOK THEN
              StateCode := ExportDocValidation.Code;
          END;
      END;
    END;

    PROCEDURE Recreate@1240030013() : Boolean;
    VAR
      ExportSourceDoc@1240030000 : Record 14000982;
      ExportSourceLine@1240030002 : Record 14000983;
    BEGIN
      IF "Created From Packing" AND
         NOT Posted AND
         NOT Submitted
      THEN BEGIN
        INIT;
        "Departure Date" := WORKDATE;
        TransferFromPackingStation;
        MODIFY;

        ExportSourceDoc.RESET;
        ExportSourceDoc.SETRANGE("Export Document No.","No.");
        IF ExportSourceDoc.FIND('-') THEN
          ExportSourceDoc.DELETEALL;

        ExportSourceLine.RESET;
        ExportSourceLine.SETRANGE("Export Document No.","No.");
        IF ExportSourceLine.FIND('-') THEN
          ExportSourceLine.DELETEALL;

        EXIT(TRUE);
      END;
    END;

    PROCEDURE AESITNRequired@1240030015() : Boolean;
    VAR
      ExportDocLine@1240030000 : Record 14000984;
    BEGIN
      GetExportDocSetup;

      CALCFIELDS("Export License Required");
      ExportDocLine.RESET;
      ExportDocLine.SETRANGE("Export Document No.","No.");
      ExportDocLine.SETFILTER("Value USD",'>%1',ExportDocSetup."AES Commodity Minimum Value");
      IF ExportDocLine.FIND('-') OR "Export License Required" THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetExportDocSetup@1240030014();
    BEGIN
      IF NOT ExportDocSetupRetrieved THEN BEGIN
        ExportDocSetup.GET;
        ExportDocSetupRetrieved := TRUE;
      END;
    END;

    PROCEDURE ClosedPackagesExist@1240030000() : Boolean;
    VAR
      Package@1240030000 : Record 14000701;
    BEGIN
      Package.RESET;
      Package.SETRANGE("Export Document No.","No.");
      Package.SETRANGE(Closed,TRUE);
      EXIT(Package.FIND('-'));
    END;

    PROCEDURE PostedPackagesExist@1240030004() : Boolean;
    VAR
      PostedPackage@1240030000 : Record 14000704;
    BEGIN
      PostedPackage.RESET;
      PostedPackage.SETCURRENTKEY("Export Document No.");
      PostedPackage.SETRANGE("Export Document No.","No.");
      PostedPackage.SETRANGE(Closed,TRUE);
      EXIT(PostedPackage.FIND('-'));
    END;

    PROCEDURE TotalPackages@1240030007() PackageCount : Integer;
    VAR
      Package@1240030000 : Record 14000701;
      PostedPackage@1240030001 : Record 14000704;
    BEGIN
      Package.RESET;
      Package.SETRANGE("Export Document No.","No.");
      Package.SETRANGE("Exclude From Manifest",FALSE);
      IF Package.FIND('-') THEN
        REPEAT
          PackageCount := PackageCount + 1;
        UNTIL Package.NEXT = 0;

      PostedPackage.RESET;
      PostedPackage.SETCURRENTKEY("Export Document No.");
      PostedPackage.SETRANGE("Export Document No.","No.");
      PostedPackage.SETRANGE("Exclude From Manifest",FALSE);
      PostedPackage.SETRANGE(Closed,TRUE);
      IF PostedPackage.FIND('-') THEN
        REPEAT
          PackageCount := PackageCount + 1;
        UNTIL PostedPackage.NEXT = 0;
    END;

    PROCEDURE TotalPackageShippingCharge@1240030009() : Decimal;
    VAR
      Package@1240030001 : Record 14000701;
      PostedPackage@1240030000 : Record 14000704;
      ShippingCharge@1240030002 : Decimal;
    BEGIN
      Package.RESET;
      Package.SETRANGE("Export Document No.","No.");
      Package.SETRANGE("Exclude From Manifest",FALSE);
      IF Package.FIND('-') THEN
        REPEAT
          IF Package."Shipping Charge" > 0 THEN
            ShippingCharge := ShippingCharge + ROUND(Package."Shipping Charge",0.01,'>');
        UNTIL Package.NEXT = 0;

      PostedPackage.RESET;
      PostedPackage.SETCURRENTKEY("Export Document No.");
      PostedPackage.SETRANGE("Export Document No.","No.");
      PostedPackage.SETRANGE("Exclude From Manifest",FALSE);
      PostedPackage.SETRANGE(Closed,TRUE);
      IF PostedPackage.FIND('-') THEN
        REPEAT
          IF PostedPackage."Shipping Charge" > 0 THEN
            ShippingCharge := ShippingCharge + ROUND(PostedPackage."Shipping Charge",0.01,'>');
        UNTIL PostedPackage.NEXT = 0;

      EXIT(ShippingCharge);
    END;

    PROCEDURE TotalPackageInsuranceCharge@1240030010() : Decimal;
    VAR
      Package@1240030001 : Record 14000701;
      PostedPackage@1240030000 : Record 14000704;
      InsuranceCharge@1240030002 : Decimal;
    BEGIN
      Package.RESET;
      Package.SETRANGE("Export Document No.","No.");
      Package.SETRANGE("Exclude From Manifest",FALSE);
      IF Package.FIND('-') THEN
        REPEAT
          IF Package."Shipping Charge" > 0 THEN
            InsuranceCharge := InsuranceCharge + ROUND(Package."Insurance Charge",0.01,'>');
        UNTIL Package.NEXT = 0;

      PostedPackage.RESET;
      PostedPackage.SETCURRENTKEY("Export Document No.");
      PostedPackage.SETRANGE("Export Document No.","No.");
      PostedPackage.SETRANGE("Exclude From Manifest",FALSE);
      PostedPackage.SETRANGE(Closed,TRUE);
      IF PostedPackage.FIND('-') THEN
        REPEAT
          IF PostedPackage."Shipping Charge" > 0 THEN
            InsuranceCharge := InsuranceCharge + ROUND(PostedPackage."Insurance Charge",0.01,'>');
        UNTIL PostedPackage.NEXT = 0;

      EXIT(InsuranceCharge);
    END;

    PROCEDURE TotalPackageInsuranceValue@1240030023() : Decimal;
    VAR
      Package@1240030001 : Record 14000701;
      PostedPackage@1240030000 : Record 14000704;
      InsuranceValue@1240030002 : Decimal;
    BEGIN
      Package.RESET;
      Package.SETRANGE("Export Document No.","No.");
      Package.SETRANGE("Exclude From Manifest",FALSE);
      IF Package.FIND('-') THEN
        REPEAT
          InsuranceValue := InsuranceValue + ROUND(Package."Calculation Insured Value",0.01,'>');
        UNTIL Package.NEXT = 0;

      PostedPackage.RESET;
      PostedPackage.SETCURRENTKEY("Export Document No.");
      PostedPackage.SETRANGE("Export Document No.","No.");
      PostedPackage.SETRANGE("Exclude From Manifest",FALSE);
      PostedPackage.SETRANGE(Closed,TRUE);
      IF PostedPackage.FIND('-') THEN
        REPEAT
          InsuranceValue := InsuranceValue + ROUND(PostedPackage."Calculation Insured Value",0.01,'>');
        UNTIL PostedPackage.NEXT = 0;

      EXIT(InsuranceValue);
    END;

    PROCEDURE TotalPackageDiscount@1240030011() : Decimal;
    VAR
      Package@1240030001 : Record 14000701;
      PostedPackage@1240030000 : Record 14000704;
      Discount@1240030002 : Decimal;
    BEGIN
      Package.RESET;
      Package.SETRANGE("Export Document No.","No.");
      Package.SETRANGE("Exclude From Manifest",FALSE);
      IF Package.FIND('-') THEN
        REPEAT
          Discount :=
            Discount + ROUND(Package."Discount Amount",0.01,'>') +
            ROUND(Package."Rebate Amount",0.01,'>');
        UNTIL Package.NEXT = 0;

      PostedPackage.RESET;
      PostedPackage.SETCURRENTKEY("Export Document No.");
      PostedPackage.SETRANGE("Export Document No.","No.");
      PostedPackage.SETRANGE("Exclude From Manifest",FALSE);
      PostedPackage.SETRANGE(Closed,TRUE);
      IF PostedPackage.FIND('-') THEN
        REPEAT
          Discount :=
            Discount + ROUND(PostedPackage."Discount Amount",0.01,'>') +
            ROUND(PostedPackage."Rebate Amount",0.01,'>');
        UNTIL PostedPackage.NEXT = 0;

      EXIT(Discount);
    END;

    PROCEDURE TotalPackageCod@1240030019() : Decimal;
    VAR
      Package@1240030001 : Record 14000701;
      PostedPackage@1240030000 : Record 14000704;
      CodAmount@1240030002 : Decimal;
    BEGIN
      Package.RESET;
      Package.SETRANGE("Export Document No.","No.");
      Package.SETRANGE("Exclude From Manifest",FALSE);
      IF Package.FIND('-') THEN
        REPEAT
          CodAmount := CodAmount + ROUND(Package."COD Amount",0.01,'>');
        UNTIL Package.NEXT = 0;

      PostedPackage.RESET;
      PostedPackage.SETCURRENTKEY("Export Document No.");
      PostedPackage.SETRANGE("Export Document No.","No.");
      PostedPackage.SETRANGE("Exclude From Manifest",FALSE);
      PostedPackage.SETRANGE(Closed,TRUE);
      IF PostedPackage.FIND('-') THEN
        REPEAT
          CodAmount := CodAmount + ROUND(PostedPackage."COD Amount",0.01,'>');
        UNTIL PostedPackage.NEXT = 0;

      EXIT(CodAmount);
    END;

    PROCEDURE TotalPackageWeight@1240030018() : Decimal;
    VAR
      Package@1240030001 : Record 14000701;
      PostedPackage@1240030000 : Record 14000704;
      TotalWeight@1240030002 : Decimal;
    BEGIN
      Package.RESET;
      Package.SETRANGE("Export Document No.","No.");
      Package.SETRANGE("Exclude From Manifest",FALSE);
      IF Package.FIND('-') THEN
        REPEAT
          BEGIN
            Package.ClearTotalValueFields;
            TotalWeight := TotalWeight + Package.GetWeight;
          END;
        UNTIL Package.NEXT = 0;

      PostedPackage.RESET;
      PostedPackage.SETCURRENTKEY("Export Document No.");
      PostedPackage.SETRANGE("Export Document No.","No.");
      PostedPackage.SETRANGE("Exclude From Manifest",FALSE);
      PostedPackage.SETRANGE(Closed,TRUE);
      IF PostedPackage.FIND('-') THEN
        REPEAT
          BEGIN
            Package.TRANSFERFIELDS(PostedPackage);
            Package.ClearTotalValueFields;
            TotalWeight := TotalWeight + Package.GetPostedWeight;
          END;
        UNTIL PostedPackage.NEXT = 0;

      EXIT(TotalWeight);
    END;

    PROCEDURE TotalPackageDimWeight@1240030020() : Decimal;
    VAR
      Package@1240030001 : Record 14000701;
      PostedPackage@1240030000 : Record 14000704;
      TotalWeight@1240030002 : Decimal;
    BEGIN
      Package.RESET;
      Package.SETRANGE("Export Document No.","No.");
      Package.SETRANGE("Exclude From Manifest",FALSE);
      IF Package.FIND('-') THEN
        REPEAT
          TotalWeight := TotalWeight + Package."Dimensional Weight";
        UNTIL Package.NEXT = 0;

      PostedPackage.RESET;
      PostedPackage.SETCURRENTKEY("Export Document No.");
      PostedPackage.SETRANGE("Export Document No.","No.");
      PostedPackage.SETRANGE("Exclude From Manifest",FALSE);
      PostedPackage.SETRANGE(Closed,TRUE);
      IF PostedPackage.FIND('-') THEN
        REPEAT
          TotalWeight := TotalWeight + PostedPackage."Dimensional Weight";
        UNTIL PostedPackage.NEXT = 0;

      EXIT(TotalWeight);
    END;

    PROCEDURE CheckNoSourceDocs@1240030006(FieldCaptionText@1240030001 : Text[250]);
    VAR
      ExportSourceDoc@1240030000 : Record 14000982;
    BEGIN
      ExportSourceDoc.RESET;
      ExportSourceDoc.SETRANGE("Export Document No.","No.");
      IF ExportSourceDoc.FIND('-') THEN
        ERROR(Text007,ExportSourceDoc.TABLECAPTION,TABLECAPTION,FieldCaptionText);
    END;

    PROCEDURE TotalPackagesForCommodity@1240030008(LineType@1240030000 : Integer;LineNo@1240030001 : Code[20];ScheduleBCode@1240030002 : Code[20];Description@1240030013 : Text[50];CountryCode@1240030003 : Code[10];UnitOfMeasureBase@1240030005 : Code[10];ECCN@1240030004 : Code[20]) : Integer;
    VAR
      Package@1240030006 : Record 14000701;
      PackageLine@1240030007 : Record 14000702;
      PostedPackage@1240030008 : Record 14000704;
      PostedPackageLine@1240030009 : Record 14000705;
      PrevPackageNo@1240030010 : Code[20];
      ExportDoc@1240030011 : Record 14000981;
      PackageCount@1240030012 : Integer;
      CommodityFound@1240030014 : Boolean;
    BEGIN
      Package.RESET;
      Package.SETRANGE("Export Document No.","No.");
      Package.SETRANGE("Exclude From Manifest",FALSE);
      PrevPackageNo := '';
      PackageCount := 0;

      IF Package.FIND('-') THEN BEGIN
        PackageLine.RESET;
        PackageLine.SETRANGE("Package No.",Package."No.");
        IF LineType > -1 THEN
          PackageLine.SETRANGE(Type,LineType);
        IF LineNo <> '' THEN
          PackageLine.SETRANGE("No.",LineNo);
        IF ScheduleBCode <> '' THEN
          PackageLine.SETRANGE("Schedule B code",ScheduleBCode)
        ELSE
          IF Description <> '' THEN
            PackageLine.SETRANGE(Description,Description);
        IF ExportDoc.GetISOCountryCode(CountryCode) = 'US' THEN
          PackageLine.SETFILTER("Country of Manufacture",'%1|%2','US','')
        ELSE
          PackageLine.SETRANGE("Country of Manufacture",CountryCode);
        IF ECCN <> '' THEN
          PackageLine.SETRANGE("Export Controls Class No.",ECCN);

        REPEAT
          CommodityFound := FALSE;
          PackageLine.SETRANGE("Package No.",Package."No.");
          IF PackageLine.FIND('-') THEN
            REPEAT
              IF (UnitOfMeasureBase <> '') AND
                 (PackageLine.Type = PackageLine.Type::Item)
              THEN BEGIN
                Item.GET(PackageLine."No.");
                IF Item."Base Unit of Measure" = UnitOfMeasureBase THEN BEGIN
                  PackageCount := PackageCount + 1;
                  CommodityFound := TRUE;
                END;
              END ELSE BEGIN
                PackageCount := PackageCount + 1;
                CommodityFound := TRUE;
              END;
            UNTIL (PackageLine.NEXT = 0) OR CommodityFound;
        UNTIL Package.NEXT = 0;
      END;

      PostedPackage.RESET;
      PostedPackage.SETCURRENTKEY("Export Document No.");
      PostedPackage.SETRANGE("Export Document No.","No.");
      PostedPackage.SETRANGE("Exclude From Manifest",FALSE);
      PrevPackageNo := '';
      IF PostedPackage.FIND('-') THEN BEGIN
        PostedPackageLine.RESET;
        PostedPackageLine.SETRANGE("Package No.",PostedPackage."No.");
        IF LineType > -1 THEN
          PostedPackageLine.SETRANGE(Type,LineType);
        IF LineNo <> '' THEN
          PostedPackageLine.SETRANGE("No.",LineNo);
        IF ScheduleBCode <> '' THEN
          PostedPackageLine.SETRANGE("Schedule B code",ScheduleBCode)
        ELSE
          IF Description <> '' THEN
            PostedPackageLine.SETRANGE(Description,Description);
        IF ExportDoc.GetISOCountryCode(CountryCode) = 'US' THEN
          PostedPackageLine.SETFILTER("Country of Manufacture",'%1|%2','US','')
        ELSE
          PostedPackageLine.SETRANGE("Country of Manufacture",CountryCode);
        IF ECCN <> '' THEN
          PostedPackageLine.SETRANGE("Export Controls Class No.",ECCN);

        REPEAT
          CommodityFound := FALSE;
          PostedPackageLine.SETRANGE("Package No.",PostedPackage."No.");
          IF PostedPackageLine.FIND('-') THEN
            REPEAT
              IF (UnitOfMeasureBase <> '') AND
                 (PostedPackageLine.Type = PostedPackageLine.Type::Item)
              THEN BEGIN
                Item.GET(PostedPackageLine."No.");
                IF Item."Base Unit of Measure" = UnitOfMeasureBase THEN BEGIN
                  PackageCount := PackageCount + 1;
                  CommodityFound := TRUE;
                END;
              END ELSE BEGIN
                PackageCount := PackageCount + 1;
                CommodityFound := TRUE;
              END;
            UNTIL (PostedPackageLine.NEXT = 0) OR CommodityFound;
        UNTIL PostedPackage.NEXT = 0;
      END;

      EXIT(PackageCount);
    END;

    PROCEDURE ItemSummaryByItem@1240030012(VAR SourceLineSummaryTmp@1240030000 : TEMPORARY Record 14000983;Append@1240030001 : Boolean);
    VAR
      ExportSourceLine@1240030002 : Record 14000983;
      PrevExportSourceLine@1240030003 : Record 14000983;
      TotalValue@1240030005 : Decimal;
      TotalQuantity@1240030004 : Decimal;
      TotalBaseQuantity@1240030007 : Decimal;
      TotalWeightKG@1240030006 : Decimal;
      SchedBQuantity1@1240030011 : Decimal;
      SchedBQuantity2@1240030008 : Decimal;
    BEGIN
      IF NOT Append THEN
        SourceLineSummaryTmp.DELETEALL;

      ExportSourceLine.SETCURRENTKEY("Export Document No.",Type,"No.","Country of Origin ISO 2 Char");

      ExportSourceLine.SETRANGE("Export Document No.","No.");
      ExportSourceLine.SETRANGE(Type,ExportSourceLine.Type::Item);

      IF ExportSourceLine.FIND('-') THEN BEGIN
        PrevExportSourceLine := ExportSourceLine;

        REPEAT
          IF (ExportSourceLine."No." <> PrevExportSourceLine."No.") OR
             (ExportSourceLine."Country of Origin ISO 2 Char" <>
              PrevExportSourceLine."Country of Origin ISO 2 Char")
          THEN BEGIN
            SourceLineSummaryTmp := PrevExportSourceLine;
            SourceLineSummaryTmp."Value USD" := TotalValue;
            SourceLineSummaryTmp."Source Quantity" := TotalQuantity;
            SourceLineSummaryTmp."Source Quantity (Base)" := TotalBaseQuantity;
            SourceLineSummaryTmp."Weight (KGS)" := TotalWeightKG;
            SourceLineSummaryTmp."Schedule B Quantity 1" := SchedBQuantity1;
            SourceLineSummaryTmp."Schedule B Quantity 2" := SchedBQuantity2;
            Item.GET(SourceLineSummaryTmp."No.");
            SourceLineSummaryTmp.Description :=
              COPYSTR(Item.Description,1,MAXSTRLEN(SourceLineSummaryTmp.Description));
            IF SourceLineSummaryTmp."Source Unit of Measure" = '' THEN BEGIN
              SourceLineSummaryTmp."Source Quantity" := TotalBaseQuantity;
              SourceLineSummaryTmp."Source Unit of Measure" := Item."Base Unit of Measure";
            END;
            SourceLineSummaryTmp.INSERT;

            PrevExportSourceLine := ExportSourceLine;
            TotalValue := ExportSourceLine."Value USD";
            TotalQuantity := ExportSourceLine."Source Quantity";
            TotalBaseQuantity := ExportSourceLine."Source Quantity (Base)";
            TotalWeightKG := ExportSourceLine."Weight (KGS)";
            SchedBQuantity1 := ExportSourceLine."Schedule B Quantity 1";
            SchedBQuantity2 := ExportSourceLine."Schedule B Quantity 2";
          END ELSE BEGIN
            TotalValue := TotalValue + ExportSourceLine."Value USD";
            IF ExportSourceLine."Source Unit of Measure" <>
               PrevExportSourceLine."Source Unit of Measure"
            THEN
              PrevExportSourceLine."Source Unit of Measure" := '';
            TotalQuantity := TotalQuantity + ExportSourceLine."Source Quantity";
            TotalBaseQuantity := TotalBaseQuantity + ExportSourceLine."Source Quantity (Base)";
            TotalWeightKG := TotalWeightKG + ExportSourceLine."Weight (KGS)";
            SchedBQuantity1 := SchedBQuantity1 + ExportSourceLine."Schedule B Quantity 1";
            SchedBQuantity2 := SchedBQuantity2 + ExportSourceLine."Schedule B Quantity 2";
          END;
        UNTIL ExportSourceLine.NEXT = 0;

        SourceLineSummaryTmp := PrevExportSourceLine;
        SourceLineSummaryTmp."Value USD" := TotalValue;
        SourceLineSummaryTmp."Source Quantity" := TotalQuantity;
        SourceLineSummaryTmp."Source Quantity (Base)" := TotalBaseQuantity;
        SourceLineSummaryTmp."Weight (KGS)" := TotalWeightKG;
        SourceLineSummaryTmp."Schedule B Quantity 1" := SchedBQuantity1;
        SourceLineSummaryTmp."Schedule B Quantity 2" := SchedBQuantity2;
        Item.GET(SourceLineSummaryTmp."No.");
        SourceLineSummaryTmp.Description :=
          COPYSTR(Item.Description,1,MAXSTRLEN(SourceLineSummaryTmp.Description));
        IF SourceLineSummaryTmp."Source Unit of Measure" = '' THEN BEGIN
          SourceLineSummaryTmp."Source Quantity" := TotalBaseQuantity;
          SourceLineSummaryTmp."Source Unit of Measure" := Item."Base Unit of Measure";
        END;
        SourceLineSummaryTmp.INSERT;
      END;
    END;

    PROCEDURE ItemResourceSummaryByScheduleB@1240030016(VAR SourceLineSummaryTmp@1240030001 : TEMPORARY Record 14000983;Append@1240030000 : Boolean;ExcludeItems@1240030003 : Boolean);
    VAR
      ExportSourceLine@1240030002 : Record 14000983;
      PrevExportSourceLine@1240030009 : Record 14000983;
      TotalValue@1240030008 : Decimal;
      TotalBaseQuantity@1240030006 : Decimal;
      TotalWeightKG@1240030005 : Decimal;
      SchedBQuantity1@1240030011 : Decimal;
      SchedBQuantity2@1240030010 : Decimal;
    BEGIN
      IF NOT Append THEN
        SourceLineSummaryTmp.DELETEALL;

      ExportSourceLine.SETCURRENTKEY(
        "Export Document No.","Schedule B Code",Description,"Country of Origin ISO 2 Char",
        "Source Unit of Measure (Base)");

      ExportSourceLine.SETRANGE("Export Document No.","No.");
      IF ExcludeItems THEN
        ExportSourceLine.SETRANGE(Type,ExportSourceLine.Type::Resource)
      ELSE
        ExportSourceLine.SETRANGE(Type,ExportSourceLine.Type::Item,ExportSourceLine.Type::Resource);

      IF ExportSourceLine.FIND('-') THEN BEGIN
        PrevExportSourceLine := ExportSourceLine;
        REPEAT
          IF (ExportSourceLine."Schedule B Code" <> PrevExportSourceLine."Schedule B Code") OR
             (ExportSourceLine.Description <> PrevExportSourceLine.Description) OR
             (ExportSourceLine."Country of Origin ISO 2 Char" <>
              PrevExportSourceLine."Country of Origin ISO 2 Char") OR
             (ExportSourceLine."Source Unit of Measure (Base)" <>
              PrevExportSourceLine."Source Unit of Measure (Base)")
          THEN BEGIN
            SourceLineSummaryTmp := PrevExportSourceLine;
            SourceLineSummaryTmp."Value USD" := TotalValue;
            SourceLineSummaryTmp."Source Quantity" := TotalBaseQuantity;
            SourceLineSummaryTmp."Source Quantity (Base)" := TotalBaseQuantity;
            SourceLineSummaryTmp."Source Unit of Measure" :=
              SourceLineSummaryTmp."Source Unit of Measure (Base)";
            SourceLineSummaryTmp."No." := '';
            SourceLineSummaryTmp."Weight (KGS)" := TotalWeightKG;
            SourceLineSummaryTmp."Schedule B Quantity 1" := SchedBQuantity1;
            SourceLineSummaryTmp."Schedule B Quantity 2" := SchedBQuantity2;
            SourceLineSummaryTmp.INSERT;

            PrevExportSourceLine := ExportSourceLine;
            TotalValue := ExportSourceLine."Value USD";
            TotalBaseQuantity := ExportSourceLine."Source Quantity (Base)";
            TotalWeightKG := ExportSourceLine."Weight (KGS)";
            SchedBQuantity1 := ExportSourceLine."Schedule B Quantity 1";
            SchedBQuantity2 := ExportSourceLine."Schedule B Quantity 2";
          END ELSE BEGIN
            TotalValue := TotalValue + ExportSourceLine."Value USD";
            TotalBaseQuantity := TotalBaseQuantity + ExportSourceLine."Source Quantity (Base)";
            TotalWeightKG := TotalWeightKG + ExportSourceLine."Weight (KGS)";
            SchedBQuantity1 := SchedBQuantity1 + ExportSourceLine."Schedule B Quantity 1";
            SchedBQuantity2 := SchedBQuantity2 + ExportSourceLine."Schedule B Quantity 2";
          END;
        UNTIL ExportSourceLine.NEXT = 0;

        SourceLineSummaryTmp := PrevExportSourceLine;
        SourceLineSummaryTmp."Value USD" := TotalValue;
        SourceLineSummaryTmp."Source Quantity" := TotalBaseQuantity;
        SourceLineSummaryTmp."Source Quantity (Base)" := TotalBaseQuantity;
        SourceLineSummaryTmp."Source Unit of Measure" :=
          SourceLineSummaryTmp."Source Unit of Measure (Base)";
        SourceLineSummaryTmp."No." := '';
        SourceLineSummaryTmp."Weight (KGS)" := TotalWeightKG;
        SourceLineSummaryTmp."Schedule B Quantity 1" := SchedBQuantity1;
        SourceLineSummaryTmp."Schedule B Quantity 2" := SchedBQuantity2;
        SourceLineSummaryTmp.INSERT;
      END;
    END;

    PROCEDURE TotalForType@1240030021(TypeToTotal@1240030000 : Integer) : Decimal;
    VAR
      ExportSourceLine@1240030001 : Record 14000983;
      TotalAmount@1240030002 : Decimal;
    BEGIN
      ExportSourceLine.SETRANGE("Export Document No.","No.");
      ExportSourceLine.SETRANGE(Type,TypeToTotal);
      IF ExportSourceLine.FIND('-') THEN
        REPEAT
          TotalAmount := TotalAmount + ExportSourceLine."Value USD";
        UNTIL ExportSourceLine.NEXT = 0;
      EXIT(TotalAmount);
    END;

    PROCEDURE DocumentSummaryOnly@1240020000(VAR SourceLineSummaryTmp@1240020000 : Record 14000983;Append@1240020001 : Boolean;ExcludeItems@1240020002 : Boolean);
    VAR
      ExportSourceLine@1240020003 : Record 14000983;
      PrevExportSourceLine@1240020004 : Record 14000983;
      TotalValue@1240020005 : Decimal;
      TotalBaseQuantity@1240020006 : Decimal;
      TotalWeightKG@1240020007 : Decimal;
      SchedBQuantity1@1240020008 : Decimal;
      SchedBQuantity2@1240020009 : Decimal;
    BEGIN
      IF NOT Append THEN
        SourceLineSummaryTmp.DELETEALL;

      ExportSourceLine.SETCURRENTKEY(
        "Export Document No.","Schedule B Code",Description,"Country of Origin ISO 2 Char",
        "Source Unit of Measure (Base)");

      ExportSourceLine.SETRANGE("Export Document No.","No.");
      ExportSourceLine.SETRANGE(Type,ExportSourceLine.Type::" ");

      IF ExportSourceLine.FIND('-') THEN BEGIN
        PrevExportSourceLine := ExportSourceLine;
        REPEAT
          IF ExportSourceLine."Source Quantity (Base)" = 0 THEN
            ExportSourceLine."Source Quantity (Base)" := 1;

          IF (ExportSourceLine."Schedule B Code" <> PrevExportSourceLine."Schedule B Code") OR
             (ExportSourceLine.Description <> PrevExportSourceLine.Description) OR
             (ExportSourceLine."Country of Origin ISO 2 Char" <>
              PrevExportSourceLine."Country of Origin ISO 2 Char") OR
             (ExportSourceLine."Source Unit of Measure (Base)" <>
              PrevExportSourceLine."Source Unit of Measure (Base)")
          THEN BEGIN
            SourceLineSummaryTmp := PrevExportSourceLine;
            SourceLineSummaryTmp."Value USD" := TotalValue;
            SourceLineSummaryTmp."Source Quantity" := TotalBaseQuantity;
            SourceLineSummaryTmp."Source Quantity (Base)" := TotalBaseQuantity;
            SourceLineSummaryTmp."Source Unit of Measure" :=
              SourceLineSummaryTmp."Source Unit of Measure (Base)";
            SourceLineSummaryTmp."No." := '';
            SourceLineSummaryTmp."Weight (KGS)" := TotalWeightKG;
            SourceLineSummaryTmp."Schedule B Quantity 1" := SchedBQuantity1;
            SourceLineSummaryTmp."Schedule B Quantity 2" := SchedBQuantity2;
            SourceLineSummaryTmp.INSERT;

            PrevExportSourceLine := ExportSourceLine;
            TotalValue := ExportSourceLine."Value USD";
            TotalBaseQuantity := ExportSourceLine."Source Quantity (Base)";
            TotalWeightKG := ExportSourceLine."Weight (KGS)";
            SchedBQuantity1 := ExportSourceLine."Schedule B Quantity 1";
            SchedBQuantity2 := ExportSourceLine."Schedule B Quantity 2";
          END ELSE BEGIN
            TotalValue := TotalValue + ExportSourceLine."Value USD";
            TotalBaseQuantity := TotalBaseQuantity + ExportSourceLine."Source Quantity (Base)";
            TotalWeightKG := TotalWeightKG + ExportSourceLine."Weight (KGS)";
            SchedBQuantity1 := SchedBQuantity1 + ExportSourceLine."Schedule B Quantity 1";
            SchedBQuantity2 := SchedBQuantity2 + ExportSourceLine."Schedule B Quantity 2";
          END;
        UNTIL ExportSourceLine.NEXT = 0;

        SourceLineSummaryTmp := PrevExportSourceLine;
        SourceLineSummaryTmp."Value USD" := TotalValue;
        SourceLineSummaryTmp."Source Quantity" := TotalBaseQuantity;
        SourceLineSummaryTmp."Source Quantity (Base)" := TotalBaseQuantity;
        SourceLineSummaryTmp."Source Unit of Measure" :=
          SourceLineSummaryTmp."Source Unit of Measure (Base)";
        SourceLineSummaryTmp."No." := '';
        SourceLineSummaryTmp."Weight (KGS)" := TotalWeightKG;
        SourceLineSummaryTmp."Schedule B Quantity 1" := SchedBQuantity1;
        SourceLineSummaryTmp."Schedule B Quantity 2" := SchedBQuantity2;
        SourceLineSummaryTmp.INSERT;
      END;
    END;

    BEGIN
    END.
  }
}

