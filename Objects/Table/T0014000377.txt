OBJECT Table 14000377 E.D.I. General Cross Reference
{
  OBJECT-PROPERTIES
  {
    Date=04/28/17;
    Time=12:00:00 PM;
    Version List=SE0.60.13.02;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               GeneralCrossReference.RESET;
               IsAscending := GeneralCrossReference.ASCENDING;
               IF GeneralCrossReference.FIND('+') THEN
                 EntryNo := GeneralCrossReference."Entry No." + 1
               ELSE
                 EntryNo := 1;
               Rec."Entry No." := EntryNo;

               "Date Created" := TODAY;
               "User ID" := USERID;
             END;

    OnModify=BEGIN
               "Date Changed" := TODAY;
               "User ID" := USERID;
             END;

    OnRename=BEGIN
               ERROR(Text001);
             END;

    CaptionML=ENU=E.D.I. General Cross Reference;
    LookupPageID=Page14002394;
    DrillDownPageID=Page14002394;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=ENU=Entry No. }
    { 2   ;   ;Trade Partner       ;Code20        ;TableRelation="E.D.I. Trade Partner".No.;
                                                   CaptionML=ENU=Trade Partner }
    { 3   ;   ;Cross Reference     ;Integer       ;OnValidate=BEGIN
                                                                IF "Cross Reference" <> xRec."Cross Reference" THEN
                                                                  ClearValues;

                                                                CASE "Cross Reference" OF
                                                                  1,6,11,21:
                                                                    BEGIN
                                                                      "NAV Table No. (Cross Ref.)" := DATABASE::"Shipping Agent";
                                                                      "NAV Table No. (Cross Ref. 2)" := DATABASE::"E-Ship Agent Service";
                                                                    END;
                                                                  2,7:
                                                                    "NAV Table No. (Cross Ref.)" := DATABASE::"Payment Terms";
                                                                  3,8:
                                                                    "NAV Table No. (Cross Ref.)" := DATABASE::"Shipment Method";
                                                                  5:
                                                                    BEGIN
                                                                    "NAV Table No. (Cross Ref.)" := DATABASE::"Tax Area";
                                                                    Outbound := TRUE;
                                                                    END;
                                                                  10,24,26:
                                                                    "NAV Table No. (Cross Ref.)" := DATABASE::"G/L Account";
                                                                  4,9,12,13,19,22,23,27,34:
                                                                    BEGIN
                                                                      "NAV Table No. (Cross Ref.)" := DATABASE::"E.D.I. Cross Ref. Option Setup";
                                                                      CASE "Cross Reference" OF
                                                                        23,27:
                                                                          "Allow Blank NAV Cross Ref." := TRUE
                                                                      END;
                                                                    END;
                                                                  14,15:
                                                                    "NAV Table No. (Cross Ref.)" := DATABASE::"Return Reason";
                                                                  16,17,18,20,38:
                                                                    "NAV Table No. (Cross Ref.)" := DATABASE::Location;
                                                                  25:
                                                                    "NAV Table No. (Cross Ref.)" := DATABASE::Resource;
                                                                  28:
                                                                    BEGIN
                                                                      "NAV Table No. (Cross Ref.)" := DATABASE::"Tax Jurisdiction";
                                                                      Outbound := TRUE;
                                                                    END;
                                                                  29,30:
                                                                    BEGIN
                                                                      "NAV Table No. (Cross Ref.)" := DATABASE::"Shipping Agent";
                                                                      "NAV Table No. (Cross Ref. 2)" := DATABASE::"Shipping Agent Services";
                                                                    END;
                                                                  //<TPZ1965>
                                                                  50000:
                                                                    BEGIN
                                                                      "NAV Table No. (Cross Ref.)" := DATABASE::"Shipping Agent";
                                                                      "NAV Table No. (Cross Ref. 2)" := DATABASE::"E-Ship Agent Service";
                                                                    END;
                                                                  //</TPZ1965>
                                                                  31:
                                                                    "NAV Table No. (Cross Ref.)" := DATABASE::Currency;
                                                                  32:
                                                                    "NAV Table No. (Cross Ref.)" := DATABASE::"Bank Account";
                                                                  33:
                                                                    "NAV Table No. (Cross Ref.)" := DATABASE::"E.D.I. Pmt. Remit Advice Line";
                                                                  35:
                                                                    "NAV Table No. (Cross Ref.)" := DATABASE::"Reason Code";
                                                                  36,37:
                                                                    "NAV Table No. (Cross Ref.)" := DATABASE::"Country/Region";
                                                                END;

                                                                AssocTableType;
                                                                AssignAssocTable("Cross Reference");
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupCrossReference;
                                                            END;

                                                   CaptionML=ENU=Cross Reference }
    { 4   ;   ;NAV Table No.       ;Integer       ;CaptionML=ENU=NAV Table No.;
                                                   Editable=No }
    { 5   ;   ;NAV Field No.       ;Integer       ;CaptionML=ENU=NAV Field No.;
                                                   Editable=No }
    { 6   ;   ;Functional Area     ;Option        ;CaptionML=ENU=Functional Area;
                                                   OptionCaptionML=ENU=" ,Sales,Purchasing,Shipping,Sales/Purchasing,Inventory";
                                                   OptionString=[ ,Sales,Purchasing,Shipping,Sales/Purchasing,Inventory];
                                                   NotBlank=No }
    { 10  ;   ;Cross Reference Type;Option        ;CaptionML=ENU=Cross Reference Type;
                                                   OptionCaptionML=ENU=" ,Shipping Agent Code,Payment Term Code,Shipment Method Code,Ship Payment Type,Tax Area Code,SAC Code";
                                                   OptionString=[ ,Shipping Agent Code,Payment Term Code,Shipment Method Code,Ship Payment Type,Tax Area Code,SAC Code];
                                                   Editable=No }
    { 11  ;   ;EDI Value           ;Code40        ;CaptionML=ENU=EDI Value }
    { 12  ;   ;EDI Value 2         ;Code40        ;CaptionML=ENU=EDI Value 2 }
    { 13  ;   ;NAV Value           ;Code40        ;TableRelation=IF (Cross Reference Type=CONST(Shipping Agent Code)) "Shipping Agent"
                                                                 ELSE IF (Cross Reference Type=CONST(Payment Term Code)) "Payment Terms"
                                                                 ELSE IF (Cross Reference Type=CONST(Shipment Method Code)) "Shipment Method";
                                                   OnLookup=BEGIN
                                                              "NAV Value" := LookupValue;
                                                              IF "NAV Value" = '' THEN
                                                                "NAV Value" := xRec."NAV Value";
                                                            END;

                                                   CaptionML=ENU=NAV Value }
    { 14  ;   ;NAV Value 2         ;Code40        ;OnLookup=BEGIN
                                                              "NAV Value 2" := LookupValue2;
                                                              IF "NAV Value 2" = '' THEN
                                                                "NAV Value 2" := xRec."NAV Value 2";
                                                            END;

                                                   CaptionML=ENU=NAV Value 2 }
    { 15  ;   ;Cross Reference Type 2;Option      ;CaptionML=ENU=Cross Reference Type 2;
                                                   OptionCaptionML=ENU=" ,E-Ship Agent Service";
                                                   OptionString=[ ,E-Ship Agent Service];
                                                   Editable=No }
    { 16  ;   ;NAV Table Name      ;Text40        ;CaptionML=ENU=NAV Table Name;
                                                   Editable=No }
    { 17  ;   ;NAV Field Name      ;Text40        ;CaptionML=ENU=NAV Field Name;
                                                   Editable=No }
    { 18  ;   ;NAV Data Type       ;Text10        ;CaptionML=ENU=NAV Data Type;
                                                   Editable=No }
    { 19  ;   ;NAV Data Type 2     ;Text10        ;CaptionML=ENU=NAV Data Type 2;
                                                   Editable=No }
    { 20  ;   ;NAV Table No. 2     ;Integer       ;CaptionML=ENU=NAV Table No. 2;
                                                   Editable=No }
    { 21  ;   ;NAV Field No. 2     ;Integer       ;CaptionML=ENU=NAV Field No. 2;
                                                   Editable=No }
    { 22  ;   ;NAV Table Name 2    ;Text30        ;CaptionML=ENU=NAV Table Name 2;
                                                   Editable=No }
    { 23  ;   ;NAV Field Name 2    ;Text30        ;CaptionML=ENU=NAV Field Name 2;
                                                   Editable=No }
    { 24  ;   ;Generic ID          ;Boolean       ;CaptionML=ENU=Generic ID }
    { 25  ;   ;Unassigned          ;Boolean       ;CaptionML=ENU=Unassigned }
    { 26  ;   ;Cross Reference Error;Boolean      ;FieldClass=Normal;
                                                   CaptionML=ENU=Cross Reference Error }
    { 27  ;   ;Direction           ;Option        ;CaptionML=ENU=Direction;
                                                   OptionCaptionML=ENU=" ,Inbound,Outbound";
                                                   OptionString=[ ,Inbound,Outbound] }
    { 28  ;   ;NAV Table No. (Cross Ref.);Integer ;CaptionML=ENU=NAV Table No. (Cross Ref.);
                                                   Editable=No }
    { 29  ;   ;NAV Table No. (Cross Ref. 2);Integer;
                                                   CaptionML=ENU=NAV Table No. (Cross Ref. 2);
                                                   Editable=No }
    { 30  ;   ;Outbound            ;Boolean       ;CaptionML=ENU=Outbound;
                                                   Editable=No }
    { 31  ;   ;Sub NAV Value       ;Code40        ;OnLookup=BEGIN
                                                              "Sub NAV Value" := SubLookUpValue;
                                                            END;

                                                   CaptionML=ENU=Sub NAV Value }
    { 32  ;   ;Sub NAV Value 2     ;Code40        ;OnLookup=BEGIN
                                                              "Sub NAV Value 2" := SubLookUpValue2;
                                                            END;

                                                   CaptionML=ENU=Sub NAV Value 2 }
    { 33  ;   ;Allow Blank NAV Cross Ref.;Boolean ;CaptionML=ENU=Allow Blank NAV Cross Ref. }
    { 34  ;   ;EDI Cross Ref. Identifiers;Text250 ;CaptionML=ENU=EDI Cross Ref. Identifiers }
    { 35  ;   ;Segment Group       ;Integer        }
    { 200 ;   ;Date Changed        ;Date          ;CaptionML=ENU=Date Changed;
                                                   Editable=No }
    { 201 ;   ;User ID             ;Code50        ;CaptionML=ENU=User ID;
                                                   Editable=No }
    { 202 ;   ;Date Created        ;Date          ;CaptionML=ENU=Date Created;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Trade Partner,Cross Reference            }
    {    ;Trade Partner,Unassigned                 }
    {    ;Trade Partner,Cross Reference,NAV Table Name }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Object@1240030002 : Record 2000000001;
      Field@1240030001 : Record 2000000041;
      GeneralCrossReference@1240030005 : Record 14000377;
      ShippingAgent@1000000001 : Record 291;
      PaymentTerms@1000000003 : Record 3;
      ShipmentMethod@1000000004 : Record 10;
      GLAccount@1240030008 : Record 15;
      Text001@1240030003 : TextConst 'ENC=You cannot rename a NAV table number.';
      ReturnReason@1240020003 : Record 6635;
      Item@1240020002 : Record 27;
      Resource@1240020001 : Record 156;
      Location@1240020011 : Record 14;
      EDIInventoryAdviceHeader@1240020010 : Record 14002413;
      TaxJurisdiction@1240020026 : Record 320;
      Currency@1240020034 : Record 4;
      BankAccount@1240020033 : Record 270;
      CountryRegion@1240020037 : Record 9;
      EntryNo@1240030004 : Integer;
      FunctionalArea@1240030007 : 'Sales,Purchasing,Shipping,SalesPurchasing,Inventory,General Ledger';
      Text002@1001 : TextConst 'ENU=Shipping Agent Code and E-Ship Agent Service';
      Text003@1002 : TextConst 'ENU=Payment Terms';
      Text004@1003 : TextConst 'ENU=Shipment Method';
      Text005@1004 : TextConst 'ENU=Shipping Payment Type';
      Text006@1005 : TextConst 'ENU=Tax Area Code (Outbound)';
      Text007@1006 : TextConst 'ENU=Applies-to Doc. Type';
      Text011@1010 : TextConst 'ENU=SAC';
      Text014@1013 : TextConst 'ENU=Standard Type %1';
      Text015@1014 : TextConst 'ENU=Shipping Advice';
      Text016@1240020008 : TextConst 'ENU=Return Reason Code';
      Text018@1240020006 : TextConst 'ENU=Transfer-from Code';
      Text019@1240020005 : TextConst 'ENU=Transfer-to Code';
      Text020@1240020004 : TextConst 'ENU=Location Code';
      Text021@1240020009 : TextConst 'ENU=Transaction Purpose Code';
      Text022@1240020000 : TextConst 'ENU=In-Transit Code';
      Text024@1240020014 : TextConst 'ENU=Shipping Payment Type';
      Text025@1240020013 : TextConst 'ENU=Sales Header';
      Text026@1240020015 : TextConst 'ENU=Purchase Header';
      Text027@1240020016 : TextConst 'ENU=Bill of Lading';
      Text028@1240020017 : TextConst 'ENU=Sales Invoice Header';
      Text029@1240020018 : TextConst 'ENU=Transfer Header';
      Text030@1240020019 : TextConst 'ENU=E.D.I. Inventory Advice Header';
      Text031@1240020020 : TextConst 'ENU=Sales Header, Sales Line';
      Text032@1240020021 : TextConst 'ENU=Purchase Header, Purchase Line';
      Text033@1240020022 : TextConst 'ENU=Purchase Line';
      Text034@1240020023 : TextConst 'ENU=G/L Account';
      Text035@1240020024 : TextConst 'ENU=Sales Line';
      Text036@1240020025 : TextConst 'ENU=Resource';
      Text037@1240020027 : TextConst 'ENU=Tax Jurisdiction Code(Outbound)';
      IsAscending@1240020007 : Boolean;
      Text038@1240020012 : TextConst 'ENU=Shipping Agent Code and Shipping Agent Service';
      Text039@1240020028 : TextConst 'ENU=Currency';
      Text040@1240020029 : TextConst 'ENU=Bank Account';
      Text041@1240020035 : TextConst 'ENU=E.D.I. Payment Remit Advice';
      Text042@1240020031 : TextConst 'ENU=Applies-to Doc. Type';
      Text043@1240020032 : TextConst 'ENU=E.D.I. Payment Advice Line';
      Text045@1240020030 : TextConst 'ENU=Account No.';
      Text046@1240020036 : TextConst 'ENU=Reason Code';
      Text047@1240020038 : TextConst 'ENU=Country/Region';

    PROCEDURE LookupValue@1240030003() : Code[40];
    VAR
      GLAccount@1240030005 : Record 15;
      ShippingAgent@1240030000 : Record 291;
      PaymentTerms@1240030002 : Record 3;
      ShipmentMethod@1240030003 : Record 10;
      TaxArea@1240030004 : Record 318;
      Resource@1240020000 : Record 156;
      CrossReferenceOptionSetup@1240030006 : Record 14000375;
      TaxJurisdiction@1240020002 : Record 320;
      ReasonCode@1240020001 : Record 231;
    BEGIN
      TESTFIELD("NAV Table No. (Cross Ref.)");

      CASE "NAV Table No. (Cross Ref.)" OF
        DATABASE::"Shipping Agent":
          IF PAGE.RUNMODAL(0,ShippingAgent) IN [ACTION::LookupOK,ACTION::OK] THEN

            EXIT(ShippingAgent.Code);
        DATABASE::"Payment Terms":
          IF PAGE.RUNMODAL(0,PaymentTerms) IN [ACTION::LookupOK,ACTION::OK] THEN

            EXIT(PaymentTerms.Code);
        DATABASE::"Shipment Method":
          IF PAGE.RUNMODAL(0,ShipmentMethod) IN [ACTION::LookupOK,ACTION::OK] THEN

            EXIT(ShipmentMethod.Code);
        DATABASE::"Tax Area":
          IF PAGE.RUNMODAL(0,TaxArea) IN [ACTION::LookupOK,ACTION::OK] THEN

            EXIT(TaxArea.Code);
        DATABASE::"G/L Account":
          IF PAGE.RUNMODAL(0,GLAccount) IN [ACTION::LookupOK,ACTION::OK] THEN

            EXIT(GLAccount."No.");
        DATABASE::"E.D.I. Cross Ref. Option Setup":
          BEGIN
            CrossReferenceOptionSetup.RESET;
            CrossReferenceOptionSetup.SETRANGE("Table No.","NAV Table No.");
            CrossReferenceOptionSetup.SETRANGE("Field No.","NAV Field No.");
            IF PAGE.RUNMODAL(0,CrossReferenceOptionSetup) IN [ACTION::LookupOK,ACTION::OK] THEN

              EXIT(CrossReferenceOptionSetup."Option String");
          END;
        DATABASE::"Return Reason":
          IF PAGE.RUNMODAL(0,ReturnReason) IN [ACTION::LookupOK,ACTION::OK] THEN
            EXIT(ReturnReason.Code);
        DATABASE::Item:
          IF PAGE.RUNMODAL(0,Item) IN [ACTION::LookupOK,ACTION::OK] THEN
            EXIT(Item."No.");
        DATABASE::Resource:
          IF PAGE.RUNMODAL(0,Resource) IN [ACTION::LookupOK,ACTION::OK] THEN
            EXIT(Resource."No.");
        DATABASE::Location:
          CASE "Cross Reference" OF
            16,17:
              BEGIN
                Location.RESET;
                Location.SETRANGE("Use As In-Transit",FALSE);
                IF PAGE.RUNMODAL(0,Location) IN [ACTION::LookupOK,ACTION::OK] THEN
                  EXIT(Location.Code);
              END;
            18,38:
              IF PAGE.RUNMODAL(0,Location) IN [ACTION::LookupOK,ACTION::OK] THEN
                EXIT(Location.Code);
            20:
              BEGIN
                Location.RESET;
                Location.SETRANGE("Use As In-Transit",TRUE);
                IF PAGE.RUNMODAL(0,Location) IN [ACTION::LookupOK,ACTION::OK] THEN
                  EXIT(Location.Code);
              END;
          END;
        DATABASE::Resource:
          IF PAGE.RUNMODAL(0,Resource) IN [ACTION::LookupOK,ACTION::OK] THEN
            EXIT(GLAccount."No.");
        DATABASE::"Tax Jurisdiction":
          IF PAGE.RUNMODAL(0,TaxJurisdiction) IN [ACTION::LookupOK,ACTION::OK] THEN
            EXIT(TaxJurisdiction.Code);
        DATABASE::Currency:
          IF PAGE.RUNMODAL(0,Currency) IN [ACTION::LookupOK,ACTION::OK] THEN
            EXIT(Currency.Code);
        DATABASE::"Bank Account":
          IF PAGE.RUNMODAL(0,BankAccount) IN [ACTION::LookupOK,ACTION::OK] THEN
            EXIT(BankAccount."No.");
        DATABASE::"E.D.I. Pmt. Remit Advice Line":
          BEGIN
            CASE "Cross Reference" OF
              33:
                IF PAGE.RUNMODAL(0,GLAccount) IN [ACTION::LookupOK,ACTION::OK] THEN
                  EXIT(GLAccount."No.");
            END;
          END;
        DATABASE::"Reason Code":
          IF PAGE.RUNMODAL(0,ReasonCode) IN [ACTION::LookupOK,ACTION::OK] THEN
            EXIT(ReasonCode.Code);
        DATABASE::"Country/Region":
          IF PAGE.RUNMODAL(0,CountryRegion) IN [ACTION::LookupOK,ACTION::OK] THEN
            EXIT(CountryRegion.Code);
      END;
    END;

    PROCEDURE LookupValue2@1240030009() : Code[40];
    VAR
      EShipShipAgentService@1240030000 : Record 14000708;
      ShippingAgentServices@1240020000 : Record 5790;
    BEGIN
      TESTFIELD("NAV Table No. (Cross Ref. 2)");

      CASE "NAV Table No. (Cross Ref. 2)" OF
        DATABASE::"E-Ship Agent Service":
          BEGIN
            EShipShipAgentService.RESET;
            EShipShipAgentService.SETRANGE("Shipping Agent Code","NAV Value");
              IF PAGE.RUNMODAL(0,EShipShipAgentService) IN [ACTION::LookupOK,ACTION::OK] THEN

            EXIT(EShipShipAgentService.Code);
          END;
        DATABASE::"Shipping Agent Services":
          BEGIN
            ShippingAgentServices.RESET;
            ShippingAgentServices.SETRANGE("Shipping Agent Code","NAV Value");
              IF PAGE.RUNMODAL(0,ShippingAgentServices) IN [ACTION::LookupOK,ACTION::OK] THEN

            EXIT(ShippingAgentServices.Code);
        END;
      END;
    END;

    PROCEDURE LookupCrossReference@1240030002();
    VAR
      GeneralEDICrossRefLookup@1240030000 : Page 14002399;
    BEGIN
      CLEAR(GeneralEDICrossRefLookup);
      GeneralEDICrossRefLookup.LOOKUPMODE(TRUE);
      IF GeneralEDICrossRefLookup.RUNMODAL = ACTION::LookupOK THEN
        VALIDATE("Cross Reference",GeneralEDICrossRefLookup.GetValue);
    END;

    PROCEDURE CrossReferenceType@1240030004() : Text[250];
    BEGIN
      CASE "Cross Reference" OF
        1,6,11,21,50000:   //TPZ1965
          EXIT(Text002);
        2,7:
          EXIT(Text003);
        3,8:
          EXIT(Text004);
        4,9,12:
          EXIT(Text005);
        5:
          EXIT(Text006);
        23,27:
          EXIT(Text007);
        10:
          EXIT(Text011);
        13:
          EXIT(Text015);
        14,15:
          EXIT(Text016);
        16:
          EXIT(Text018);
        17:
          EXIT(Text019);
        18,38:
          EXIT(Text020);
        19:
          EXIT(Text021);
        20:
          EXIT(Text022);
        22:
          EXIT(Text024);
        24,26,33:
          EXIT(Text034);
        25:
          EXIT(Text036);
        28:
          EXIT(Text037);
        29,30:
          EXIT(Text038);
        31:
          EXIT(Text039);
        32:
          EXIT(Text040);
        34:
          EXIT(Text042);
        35:
          EXIT(Text046);
        36,37:
          EXIT(Text047);
        ELSE
          EXIT(STRSUBSTNO(Text014,"Cross Reference"));
      END;
    END;

    PROCEDURE CrossReferenceTypeLookup@1240030005(CrossReference@1240030001 : Integer) : Text[250];
    BEGIN
      CASE CrossReference OF
        1,6,11,21,50000:
          EXIT(Text002);
        2,7:
          EXIT(Text003);
        3,8:
          EXIT(Text004);
        4,9,12:
          EXIT(Text005);
        5:
          EXIT(Text006);
        23,27:
          EXIT(Text007);
        10:
          EXIT(Text011);
        13:
          EXIT(Text015);
        14,15:
          EXIT(Text016);
        16:
          EXIT(Text018);
        17:
          EXIT(Text019);
        18,38:
          EXIT(Text020);
        19:
          EXIT(Text021);
        20:
          EXIT(Text022);
        22:
          EXIT(Text024);
        24,26,33:
          EXIT(Text034);
        25:
          EXIT(Text036);
        28:
          EXIT(Text037);
        29,30:
          EXIT(Text038);
        31:
          EXIT(Text039);
        32:
          EXIT(Text040);
        34:
          EXIT(Text042);
        35:
          EXIT(Text046);
        36,37:
          EXIT(Text047);
        ELSE
          EXIT(STRSUBSTNO(Text014,"Cross Reference"));
      END;
    END;

    PROCEDURE CrossReferenceTableLookup@1240020000(CrossReference@1240030001 : Integer) : Text[250];
    BEGIN
      CASE CrossReference OF
        1,2,3,4,13,23,29,38:
          EXIT(Text025);
        6,7,8,9,18,27:
          EXIT(Text026);
        11,12:
          EXIT(Text027);
        5:
          EXIT(Text028);
        16,17,20,21,22,30:
          EXIT(Text029);
        10,15,26,50000: //TPZ1965
          EXIT(Text033);
        19:
          EXIT(Text030);
        14,24,25:
          EXIT(Text035);
        28:
          EXIT(Text037);
        31:
          EXIT(Text039);
        32:
          EXIT(Text041);
        33,34:
          EXIT(Text043);
        35:
          EXIT(Text046);
        36:
          EXIT(Text025);
        37:
          EXIT(Text026);
      END;
    END;

    PROCEDURE AssocTableType@1240030007() : Integer;
    BEGIN
      CASE "Cross Reference" OF
        1,2,3,4,5,13,14,23,24,25,28,29,36,38:
          FunctionalArea := FunctionalArea::Sales;
        6,7,8,9,10,15,18,26,27,37,50000: //TPZ1965
          FunctionalArea := FunctionalArea::Purchasing;
        11,12:
          FunctionalArea := FunctionalArea::Shipping;
        16,17,19,20,21,22,30:
          FunctionalArea := FunctionalArea::Inventory;
        31,32,33,34,35:
          FunctionalArea := FunctionalArea::"General Ledger";
      END;
      EXIT(FunctionalArea);
    END;

    PROCEDURE AssignAssocTable@1240030000(CrossReference@1240030002 : Integer);
    VAR
      BillofLading@1240030001 : Record 14000822;
      SalesHeader@1240030000 : Record 36;
      PurchaseHeader@1240030003 : Record 38;
      SalesLine@1240020002 : Record 37;
      PurchaseLine@1240020001 : Record 39;
      TransferHdr@1240020000 : Record 5740;
      TaxArea@1240030004 : Record 318;
      SalesInvoiceHdr@1240030005 : Record 112;
      EDIPaymentRemitAdvice@1240020004 : Record 14050902;
      EDIPmtRemitAdviceLine@1240020003 : Record 14050903;
      Currency@1240020005 : Record 4;
      ReasonCode@1240020006 : Record 231;
    BEGIN
      SalesHeader.RESET;
      PurchaseHeader.RESET;
      BillofLading.RESET;
      TaxArea.RESET;
      SalesInvoiceHdr.RESET;
      TaxJurisdiction.RESET;
      TransferHdr.RESET;
      EDIInventoryAdviceHeader.RESET;
      Currency.RESET;
      ReasonCode.RESET;
      EDIPaymentRemitAdvice.RESET;
      EDIPmtRemitAdviceLine.RESET;

      CASE FunctionalArea OF
        FunctionalArea::Sales:
          BEGIN
            CASE CrossReference OF
              1,2,3,4,13,23,29,36,38:
                BEGIN
                  WITH SalesHeader DO BEGIN
                    Object.RESET;
                    Object.SETRANGE(ID,DATABASE::"Sales Header");
                    IF Object.FIND('-') THEN BEGIN
                      "NAV Table No." := DATABASE::"Sales Header";
                      "NAV Table Name" := TABLECAPTION;
                      Field.RESET;
                      Field.SETRANGE(TableNo,DATABASE::"Sales Header");
                    END;
                    "NAV Table No. 2" := DATABASE::"Sales Header";
                    "NAV Table Name 2" := TABLECAPTION;
                    CASE CrossReference OF
                      1:
                        BEGIN
                          Field.SETRANGE("No.",FIELDNO("Shipping Agent Code"));
                          IF Field.FIND('-') THEN BEGIN
                            "NAV Field No." := FIELDNO("Shipping Agent Code");
                            "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type" := FORMAT(Field.Type);
                            Field.SETRANGE("No.",FIELDNO("E-Ship Agent Service"));
                            IF Field.FIND('-') THEN BEGIN
                              "NAV Field No. 2" := FIELDNO("E-Ship Agent Service");
                              "NAV Field Name 2" := CONVERTSTR(Field.FieldName,'_',' ');
                              "NAV Data Type 2" := FORMAT(Field.Type);
                            END;
                          END;
                        END;
                      2:
                        BEGIN
                          Field.SETRANGE("No.",FIELDNO("Payment Terms Code"));
                          IF Field.FIND('-') THEN BEGIN
                            "NAV Field No." := FIELDNO("Payment Terms Code");
                            "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type" := FORMAT(Field.Type);
                          END;
                        END;
                      3:
                        BEGIN
                          Field.SETRANGE("No.",FIELDNO("Shipment Method Code"));
                          IF Field.FIND('-') THEN BEGIN
                            "NAV Field No." := FIELDNO("Shipment Method Code");
                            "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type" := FORMAT(Field.Type);
                          END;
                        END;
                      4:
                        BEGIN
                          Field.SETRANGE("No.",FIELDNO("Shipping Payment Type"));
                          IF Field.FIND('-') THEN BEGIN
                            "NAV Field No." := FIELDNO("Shipping Payment Type");
                            "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type" := FORMAT(Field.Type);
                          END;
                        END;
                      13:
                        BEGIN
                          Field.SETRANGE("No.",FIELDNO("Shipping Advice"));
                          IF Field.FIND('-') THEN BEGIN
                            "NAV Field No." := FIELDNO("Shipping Advice");
                            "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type" := FORMAT(Field.Type);
                          END;
                        END;
                      23:
                        BEGIN
                          Field.SETRANGE("No.",FIELDNO("Applies-to Doc. Type"));
                          IF Field.FIND('-') THEN BEGIN
                            "NAV Field No." := FIELDNO("Applies-to Doc. Type");
                            "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type" := FORMAT(Field.Type);
                          END;
                        END;
                      29:
                        BEGIN
                          Field.SETRANGE("No.",FIELDNO("Shipping Agent Code"));
                          IF Field.FIND('-') THEN BEGIN
                            "NAV Field No." := FIELDNO("Shipping Agent Code");
                            "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type" := FORMAT(Field.Type);
                            Field.SETRANGE("No.",FIELDNO("Shipping Agent Service Code"));
                            IF Field.FIND('-') THEN BEGIN
                              "NAV Field No. 2" := FIELDNO("Shipping Agent Service Code");
                              "NAV Field Name 2" := CONVERTSTR(Field.FieldName,'_',' ');
                              "NAV Data Type 2" := FORMAT(Field.Type);
                            END;
                          END;
                        END;
                      36:
                        BEGIN
                          CASE Field."No." OF
                            FIELDNO("Ship-to Country/Region Code"):
                              Field.SETRANGE("No.",FIELDNO("Ship-to Country/Region Code"));
                            FIELDNO("Bill-to Country/Region Code"):
                              Field.SETRANGE("No.",FIELDNO("Bill-to Country/Region Code"));
                            FIELDNO("Sell-to Country/Region Code"):
                              Field.SETRANGE("No.",FIELDNO("Sell-to Country/Region Code"));
                          END;
                          IF Field.FIND('-') THEN BEGIN
                            CASE Field."No." OF
                              FIELDNO("Ship-to Country/Region Code"):
                                "NAV Field No." := FIELDNO("Ship-to Country/Region Code");
                              FIELDNO("Bill-to Country/Region Code"):
                                "NAV Field No." := FIELDNO("Bill-to Country/Region Code");
                              FIELDNO("Sell-to Country/Region Code"):
                                "NAV Field No." := FIELDNO("Sell-to Country/Region Code");
                            END;
                            "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type" := FORMAT(Field.Type);
                          END;
                        END;
                      38:
                        BEGIN
                          Field.SETRANGE("No.",FIELDNO("Location Code"));
                          IF Field.FIND('-') THEN BEGIN
                            "NAV Table No." := FIELDNO("Location Code");
                            "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type" := FORMAT(Field.Type);
                          END;
                        END;
                    END;
                  END;
                END;
                5:
                  BEGIN
                    WITH SalesInvoiceHdr DO BEGIN
                      Object.RESET;
                      Object.SETRANGE(ID,DATABASE::"Sales Invoice Header");
                      IF Object.FIND('-') THEN BEGIN
                        "NAV Table No." := DATABASE::"Sales Invoice Header";
                        "NAV Table Name" := TABLECAPTION;
                        Field.RESET;
                        Field.SETRANGE(TableNo,DATABASE::"Sales Invoice Header");
                      END;
                      CASE CrossReference OF
                        5:
                          BEGIN
                            Field.SETRANGE("No.",FIELDNO("Tax Area Code"));
                            IF Field.FIND('-') THEN BEGIN
                              "NAV Field No." := FIELDNO("Tax Area Code");
                              "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                             "NAV Data Type" := FORMAT(Field.Type);
                            END;
                          END;
                      END;
                    END;
                  END;
                14,24,25:
                  BEGIN
                    WITH SalesLine DO BEGIN
                      Object.RESET;
                      Object.SETRANGE(ID,DATABASE::"Sales Line");
                      IF Object.FIND('-') THEN BEGIN
                        "NAV Table No." := DATABASE::"Sales Line";
                        "NAV Table Name" := TABLECAPTION;
                        Field.RESET;
                        Field.SETRANGE(TableNo,DATABASE::"Sales Line");
                      END;
                      CASE CrossReference OF
                      14:
                        BEGIN
                          Field.SETRANGE("No.",FIELDNO("Return Reason Code"));
                          IF Field.FIND('-') THEN BEGIN
                            "NAV Field No." := FIELDNO("Return Reason Code");
                            "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type" := FORMAT(Field.Type);
                          END;
                        END;
                        24,25:
                          BEGIN
                            Field.SETRANGE("No.",FIELDNO("No."));
                            IF Field.FIND('-') THEN BEGIN
                              "NAV Field No." := FIELDNO("No.");
                              "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                              "NAV Data Type" := FORMAT(Field.Type);
                            END;
                          END;
                        END;
                    END;
                  END;
                28:
                  BEGIN
                    WITH TaxJurisdiction DO BEGIN
                      Object.RESET;
                      Object.SETRANGE(ID,DATABASE::"Tax Jurisdiction");
                      IF Object.FIND('-') THEN BEGIN
                        "NAV Table No." := DATABASE::"Tax Jurisdiction";
                        "NAV Table Name" := TABLECAPTION;
                        Field.RESET;
                        Field.SETRANGE(TableNo,DATABASE::"Tax Jurisdiction");

                      END;
                    END;
                  END;
            END;
          END;
        FunctionalArea::Purchasing:
          BEGIN
            CASE CrossReference OF
              6,7,8,9,10,18,27,37:
                BEGIN
                  WITH PurchaseHeader DO BEGIN
                    Object.RESET;
                    Object.SETRANGE(ID,DATABASE::"Purchase Header");
                    IF Object.FIND('-') THEN BEGIN
                      "NAV Table No." := DATABASE::"Purchase Header";
                       "NAV Table Name" := TABLECAPTION;
                       Field.RESET;
                       Field.SETRANGE(TableNo,DATABASE::"Purchase Header");
                    END;
                  CASE CrossReference OF
                    6:
                      BEGIN
                        "NAV Table No. 2" := DATABASE::"Purchase Header";
                        "NAV Table Name 2" := TABLECAPTION;
                        Field.SETRANGE("No.",FIELDNO("E-Ship Agent Code"));
                        IF Field.FIND('-') THEN BEGIN
                          "NAV Field No." := FIELDNO("E-Ship Agent Code");
                          "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                          "NAV Data Type" := FORMAT(Field.Type);
                          Field.SETRANGE("No.",FIELDNO("E-Ship Agent Service"));
                          IF Field.FIND('-') THEN BEGIN
                            "NAV Field No. 2" := FIELDNO("E-Ship Agent Service");
                            "NAV Field Name 2" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type 2" := FORMAT(Field.Type);
                          END;
                        END;
                      END;
                    7:
                      BEGIN
                        Field.SETRANGE("No.",FIELDNO("Payment Terms Code"));
                        IF Field.FIND('-') THEN BEGIN
                          "NAV Table No." := FIELDNO("Payment Terms Code");
                          "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                          "NAV Data Type" := FORMAT(Field.Type);
                        END;
                      END;
                    8:
                      BEGIN
                        Field.SETRANGE("No.",FIELDNO("Shipment Method Code"));
                        IF Field.FIND('-') THEN BEGIN
                          "NAV Table No." := FIELDNO("Shipment Method Code");
                          "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                          "NAV Data Type" := FORMAT(Field.Type);
                        END;
                      END;
                    9:
                      BEGIN
                        Field.SETRANGE("No.",FIELDNO("Shipping Payment Type"));
                        IF Field.FIND('-') THEN BEGIN
                          "NAV Field No." := FIELDNO("Shipping Payment Type");
                          "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                          "NAV Data Type" := FORMAT(Field.Type);
                        END;
                      END;
                    10:
                      BEGIN
                        "NAV Table No." := DATABASE::"Purchase Line";
                        "NAV Table Name" := 'Purchase Line';
                      END;
                    18:
                      BEGIN
                        Field.SETRANGE("No.",FIELDNO("Location Code"));
                        IF Field.FIND('-') THEN BEGIN
                          "NAV Table No." := FIELDNO("Location Code");
                          "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                          "NAV Data Type" := FORMAT(Field.Type);
                        END;
                      END;
                    27:
                      BEGIN
                        Field.SETRANGE("No.",FIELDNO("Applies-to Doc. Type"));
                        IF Field.FIND('-') THEN BEGIN
                          "NAV Field No." := FIELDNO("Applies-to Doc. Type");
                          "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                          "NAV Data Type" := FORMAT(Field.Type);
                        END;
                      END;
                    37:
                      BEGIN
                        CASE Field."No." OF
                          FIELDNO("Buy-from Country/Region Code"):
                            Field.SETRANGE("No.",FIELDNO("Buy-from Country/Region Code"));
                          FIELDNO("Ship-to Country/Region Code"):
                            Field.SETRANGE("No.",FIELDNO("Ship-to Country/Region Code"));
                          FIELDNO("Pay-to Country/Region Code"):
                            Field.SETRANGE("No.",FIELDNO("Pay-to Country/Region Code"));
                        END;
                        IF Field.FIND('-') THEN BEGIN
                          CASE Field."No." OF
                            FIELDNO("Buy-from Country/Region Code"):
                              "NAV Field No." := FIELDNO("Buy-from Country/Region Code");
                            FIELDNO("Ship-to Country/Region Code"):
                              "NAV Field No." := FIELDNO("Ship-to Country/Region Code");
                            FIELDNO("Pay-to Country/Region Code"):
                              "NAV Field No." := FIELDNO("Pay-to Country/Region Code");
                          END;
                          "NAV Field No." := FIELDNO("Ship-to Country/Region Code");
                          "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                          "NAV Data Type" := FORMAT(Field.Type);
                        END;
                      END;
                  END;
                END;
              END;
              15,26:
                BEGIN
                  WITH PurchaseLine DO BEGIN
                    Object.RESET;
                    Object.SETRANGE(ID,DATABASE::"Purchase Line");
                    IF Object.FIND('-') THEN BEGIN
                      "NAV Table No." := DATABASE::"Purchase Line";
                       "NAV Table Name" := TABLECAPTION;
                       Field.RESET;
                       Field.SETRANGE(TableNo,DATABASE::"Purchase Line");
                    END;
                    CASE CrossReference OF
                    15:
                      BEGIN
                        Field.SETRANGE("No.",FIELDNO("Return Reason Code"));
                        IF Field.FIND('-') THEN BEGIN
                          "NAV Table No." := FIELDNO("Return Reason Code");
                          "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                          "NAV Data Type" := FORMAT(Field.Type);
                        END;
                      END;
                      26:
                        BEGIN
                          Field.SETRANGE("No.",FIELDNO("No."));
                          IF Field.FIND('-') THEN BEGIN
                            "NAV Field No." := FIELDNO("No.");
                            "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type" := FORMAT(Field.Type);
                          END;
                        END;
                      //<TPZ1965>
                      50000:
                        BEGIN
                          Field.SETRANGE("No.",FIELDNO("Shipping Agent Code"));
                          IF Field.FIND('-') THEN BEGIN
                            "NAV Field No." := FIELDNO("Shipping Agent Code");
                            "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type" := FORMAT(Field.Type);
                          END;
                        END;
                      //</TPZ1965>
                    END;
                  END;
                END;

            END;
          END;
        FunctionalArea::Shipping:
          BEGIN
            WITH BillofLading DO BEGIN
              Object.RESET;
              Object.SETRANGE(ID,DATABASE::"Bill of Lading");
              IF Object.FIND('-') THEN BEGIN
                "NAV Table No." := DATABASE::"Bill of Lading";
                "NAV Table Name" := TABLECAPTION;
                Field.RESET;
                Field.SETRANGE(TableNo,DATABASE::"Bill of Lading");
              END;
              CASE CrossReference OF
                11:
                  BEGIN
                    "NAV Table No. 2" := DATABASE::"Bill of Lading";
                    "NAV Table Name 2" := TABLECAPTION;
                    Field.SETRANGE("No.",FIELDNO("Shipping Agent Code"));
                    IF Field.FIND('-') THEN BEGIN
                      "NAV Field No." := FIELDNO("Shipping Agent Code");
                      "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                      "NAV Data Type" := FORMAT(Field.Type);
                      Field.SETRANGE("No.",FIELDNO("Shipping Agent Service"));
                      IF Field.FIND('-') THEN BEGIN
                        "NAV Field No. 2" := FIELDNO("Shipping Agent Service");
                        "NAV Field Name 2" := CONVERTSTR(Field.FieldName,'_',' ');
                        "NAV Data Type 2" := FORMAT(Field.Type);
                      END;
                    END;
                  END;
                12:
                  BEGIN
                    Field.SETRANGE("No.",FIELDNO("Shipping Payment Type"));
                    IF Field.FIND('-') THEN BEGIN
                      "NAV Field No." := FIELDNO("Shipping Payment Type");
                      "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                      "NAV Data Type" := FORMAT(Field.Type);
                    END;
                  END;
              END;
            END;
          END;
        FunctionalArea::Inventory:
          BEGIN
            CASE CrossReference OF
              19:
                BEGIN
                  WITH EDIInventoryAdviceHeader DO BEGIN
                    Object.RESET;
                    Object.SETRANGE(ID,DATABASE::"E.D.I. Inventory Advice Header");
                    IF Object.FIND('-') THEN BEGIN
                      "NAV Table No." := DATABASE::"E.D.I. Inventory Advice Header";
                      "NAV Table Name" := TABLECAPTION;
                      Field.RESET;
                      Field.SETRANGE(TableNo,DATABASE::"E.D.I. Inventory Advice Header");
                    END;
                    Field.SETRANGE("No.",FIELDNO("Transaction Purpose Code"));
                    IF Field.FIND('-') THEN BEGIN
                      "NAV Field No." := FIELDNO("Transaction Purpose Code");
                      "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                      "NAV Data Type" := FORMAT(Field.Type);
                    END;
                  END;
                END;
              16,17,20,21,22,30:
                BEGIN
                  WITH TransferHdr DO BEGIN
                    Object.RESET;
                    Object.SETRANGE(ID,DATABASE::"Transfer Header");
                    IF Object.FIND('-') THEN BEGIN
                      "NAV Table No." := DATABASE::"Transfer Header";
                      "NAV Table Name" := TABLECAPTION;
                      Field.RESET;
                      Field.SETRANGE(TableNo,DATABASE::"Transfer Header");
                    END;
                    CASE CrossReference OF
                      16:
                        BEGIN
                          Field.SETRANGE("No.",FIELDNO("Transfer-from Code"));
                          IF Field.FIND('-') THEN BEGIN
                            "NAV Field No." := FIELDNO("Transfer-from Code");
                            "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type" := FORMAT(Field.Type);
                          END;
                        END;
                      17:
                        BEGIN
                          Field.SETRANGE("No.",FIELDNO("Transfer-to Code"));
                          IF Field.FIND('-') THEN BEGIN
                            "NAV Field No." := FIELDNO("Transfer-to Code");
                            "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type" := FORMAT(Field.Type);
                          END;
                        END;
                      20:
                        BEGIN
                          Field.SETRANGE("No.",FIELDNO("In-Transit Code"));
                          IF Field.FIND('-') THEN BEGIN
                            "NAV Field No." := FIELDNO("In-Transit Code");
                            "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type" := FORMAT(Field.Type);
                          END;
                        END;
                      21:
                        BEGIN
                          Field.SETRANGE("No.",FIELDNO("Shipping Agent Code"));
                          IF Field.FIND('-') THEN BEGIN
                            "NAV Field No." := FIELDNO("Shipping Agent Code");
                            "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type" := FORMAT(Field.Type);
                            Field.SETRANGE("No.",FIELDNO("E-Ship Agent Service"));
                            IF Field.FIND('-') THEN BEGIN
                              "NAV Field No. 2" := FIELDNO("E-Ship Agent Service");
                              "NAV Field Name 2" := CONVERTSTR(Field.FieldName,'_',' ');
                              "NAV Data Type 2" := FORMAT(Field.Type);
                            END;
                          END;
                        END;
                      22:
                        BEGIN
                          Field.SETRANGE("No.",FIELDNO("Shipping Payment Type"));
                          IF Field.FIND('-') THEN BEGIN
                            "NAV Field No." := FIELDNO("Shipping Payment Type");
                            "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type" := FORMAT(Field.Type);
                          END;
                        END;
                      30:
                        BEGIN
                          Field.SETRANGE("No.",FIELDNO("Shipping Agent Code"));
                          IF Field.FIND('-') THEN BEGIN
                            "NAV Field No." := FIELDNO("Shipping Agent Code");
                            "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type" := FORMAT(Field.Type);
                            Field.SETRANGE("No.",FIELDNO("Shipping Agent Service Code"));
                            IF Field.FIND('-') THEN BEGIN
                              "NAV Field No. 2" := FIELDNO("Shipping Agent Service Code");
                              "NAV Field Name 2" := CONVERTSTR(Field.FieldName,'_',' ');
                              "NAV Data Type 2" := FORMAT(Field.Type);
                            END;
                          END;
                        END;
                    END;
                  END;
                END;
            END;
          END;
        FunctionalArea::"General Ledger":
          BEGIN
            CASE CrossReference OF
              31:
                BEGIN
                  WITH Currency DO BEGIN
                    Object.RESET;
                    Object.SETRANGE(ID,DATABASE::Currency);
                    IF Object.FIND('-') THEN BEGIN
                      "NAV Table No." := DATABASE::Currency;
                      "NAV Table Name" := TABLECAPTION;
                      Field.RESET;
                      Field.SETRANGE(TableNo,DATABASE::Currency);
                    END;
                    CASE CrossReference OF
                      31:
                        BEGIN
                          Field.SETRANGE("No.",FIELDNO(Code));
                          IF Field.FIND('-') THEN BEGIN
                            "NAV Field No." := FIELDNO(Code);
                            "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type" := FORMAT(Field.Type);
                          END;
                        END;
                    END;
                  END;
                END;
              32:
                BEGIN
                  WITH EDIPaymentRemitAdvice DO BEGIN
                    Object.RESET;
                    Object.SETRANGE(ID,DATABASE::"E.D.I. Payment Remit Advice");
                    IF Object.FIND('-') THEN BEGIN
                      "NAV Table No." := DATABASE::"E.D.I. Payment Remit Advice";
                      "NAV Table Name" := TABLECAPTION;
                      Field.RESET;
                      Field.SETRANGE(TableNo,DATABASE::"E.D.I. Payment Remit Advice");
                    END;
                    CASE CrossReference OF
                      32:
                        BEGIN
                          Field.SETRANGE("No.",FIELDNO("Bank Account No."));
                          IF Field.FIND('-') THEN BEGIN
                            "NAV Field No." := FIELDNO("Bank Account No.");
                            "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type" := FORMAT(Field.Type);
                          END;
                        END;
                    END;
                  END;
                END;
              33,34:
                BEGIN
                  WITH EDIPmtRemitAdviceLine DO BEGIN
                    Object.RESET;
                    Object.SETRANGE(ID,DATABASE::"E.D.I. Pmt. Remit Advice Line");
                    IF Object.FIND('-') THEN BEGIN
                      "NAV Table No." := DATABASE::"E.D.I. Pmt. Remit Advice Line";
                      "NAV Table Name" := TABLECAPTION;
                      Field.RESET;
                      Field.SETRANGE(TableNo,DATABASE::"E.D.I. Pmt. Remit Advice Line");
                    END;
                    CASE CrossReference OF
                      33:
                        BEGIN
                          Field.SETRANGE("No.",FIELDNO("Journal Account No."));
                          IF Field.FIND('-') THEN BEGIN
                            "NAV Field No." := FIELDNO("Journal Account No.");
                            "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type" := FORMAT(Field.Type);
                          END;
                        END;
                      34:
                        BEGIN
                          Field.SETRANGE("No.",FIELDNO("Journal Applies-to Doc. Type"));
                          IF Field.FIND('-') THEN BEGIN
                            "NAV Field No." := FIELDNO("Journal Applies-to Doc. Type");
                            "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type" := FORMAT(Field.Type);
                          END;
                        END;
                    END;
                  END;
                END;
              35:
                BEGIN
                  WITH ReasonCode DO BEGIN
                    Object.RESET;
                    Object.SETRANGE(ID,DATABASE::"Reason Code");
                    IF Object.FIND('-') THEN BEGIN
                      "NAV Table No." := DATABASE::"Reason Code";
                      "NAV Table Name" := TABLECAPTION;
                      Field.RESET;
                      Field.SETRANGE(TableNo,DATABASE::"Reason Code");
                    END;
                    CASE CrossReference OF
                      35:
                        BEGIN
                          Field.SETRANGE("No.",FIELDNO(Code));
                          IF Field.FIND('-') THEN BEGIN
                            "NAV Field No." := FIELDNO(Code);
                            "NAV Field Name" := CONVERTSTR(Field.FieldName,'_',' ');
                            "NAV Data Type" := FORMAT(Field.Type);
                          END;
                       END;
                    END;
                  END;
                END;
            END;
          END;
      END;
    END;

    PROCEDURE ClearValues@1240030001();
    BEGIN
      "EDI Value" := '';
      "NAV Value" := '';
      "NAV Table No." := 0;
      "NAV Table Name" := '';
      "NAV Field No." := 0;
      "NAV Field Name" := '';
      "NAV Data Type" := '';
      "EDI Value 2" := '';
      "NAV Value 2" := '';
      "NAV Table No. 2" := 0;
      "NAV Table Name 2" := '';
      "NAV Field No. 2" := 0;
      "NAV Field Name 2" := '';
      "NAV Data Type 2" := '';
      "Allow Blank NAV Cross Ref." := FALSE;
      Outbound := FALSE;
    END;

    PROCEDURE SubLookUpValue@1240030006() : Code[20];
    VAR
      Customer@1240030000 : Record 18;
    BEGIN
      //TESTFIELD("NAV Table No. (Cross Ref.)",DATABASE::"Tax Area");
      IF ("NAV Table No. (Cross Ref.)" = DATABASE::"Tax Area") OR
         ("NAV Table No. (Cross Ref.)" = DATABASE::"E.D.I. Pmt. Remit Advice Line")
      THEN
      CASE "NAV Table No. (Cross Ref.)" OF
        DATABASE::"Tax Area":
          IF PAGE.RUNMODAL(0,Customer) IN [ACTION::LookupOK,ACTION::OK] THEN
            EXIT(Customer."No.");
        DATABASE::"E.D.I. Pmt. Remit Advice Line":
          BEGIN
            CASE "Cross Reference" OF
              33:
                IF PAGE.RUNMODAL(0,GLAccount) IN [ACTION::LookupOK,ACTION::OK] THEN
                  EXIT(GLAccount."No.");
            END;
          END;
      END;
    END;

    PROCEDURE SubLookUpValue2@1240030008() : Code[20];
    VAR
      ShiptoAddress@1240030000 : Record 222;
    BEGIN
      TESTFIELD("NAV Table No. (Cross Ref.)",DATABASE::"Tax Area");
      TESTFIELD("Sub NAV Value");

      CASE "NAV Table No. (Cross Ref.)" OF
        DATABASE::"Tax Area":
          BEGIN
            ShiptoAddress.RESET;
            ShiptoAddress.SETRANGE("Customer No.","Sub NAV Value");
            IF PAGE.RUNMODAL(0,ShiptoAddress) IN [ACTION::LookupOK,ACTION::OK] THEN
              EXIT(ShiptoAddress.Code);
          END;
      END;
    END;

    BEGIN
    {
      TPZ1965 20170718 SDESAI - Correction for Gen. Cross Ref. for Shipping Agent Code at Purchase Line Level.
    }
    END.
  }
}

