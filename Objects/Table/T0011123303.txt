OBJECT Table 11123303 SC - XML Buffer (dotNET)
{
  OBJECT-PROPERTIES
  {
    Date=07/01/20;
    Time=12:00:00 AM;
    Modified=Yes;
    Version List=SCW19.2.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=XML Buffer;
  }
  FIELDS
  {
    { 1   ;   ;Document ID         ;GUID          ;CaptionML=ENU=Document ID }
    { 7   ;   ;XML                 ;BLOB          ;CaptionML=ENU=XML }
  }
  KEYS
  {
    {    ;Document ID                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Context@11123304 : Codeunit 11123305;
      XMLWrapper@11123303 : Codeunit 11123308;
      CurrentNodeGlobal@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CurrentNodeListGlobal@11123305 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      EnumeratorGlobal@11123306 : DotNet "'mscorlib'.System.Collections.IEnumerator";
      XMLTextGlobal@11123397 : Text;

    PROCEDURE InnerText@11123318() : Text[1024];
    BEGIN
      EXIT(CurrentNodeGlobal.InnerText);
    END;

    PROCEDURE NodeName@11123312() : Text[1024];
    BEGIN
      EXIT(CurrentNodeGlobal.Name);
    END;

    PROCEDURE HasChildNodes@11123314() : Boolean;
    BEGIN
      EXIT(CurrentNodeGlobal.HasChildNodes);
    END;

    PROCEDURE AddElement@11123302(VAR ResultNodeBuff@11123302 : Record 11123303;NewNodeName@11123303 : Text[1024];NewNodeValue@11123304 : Text[1024]);
    VAR
      ResultNode@11123305 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      CLEAR(ResultNodeBuff);
      Context.InitBuffer(ResultNodeBuff);
      ResultNodeBuff.INSERT;

      XMLWrapper.AddElement(CurrentNodeGlobal,NewNodeName,ResultNode,NewNodeValue);
      IF NOT ISNULL(ResultNode) THEN
        XMLWrapper.SetBufferCurrentNode(ResultNodeBuff,ResultNode);
    END;

    PROCEDURE AddElementEx@11123305(NewNodeName@11123303 : Text[1024];NewNodeValue@11123302 : Text[1024]);
    BEGIN
      XMLWrapper.AddElementEx(CurrentNodeGlobal,NewNodeName,NewNodeValue);
    END;

    PROCEDURE AddKeyElement@11123325(NodeName@11123304 : Text[1024];KeyName@11123303 : Text[1024];KeyValue@11123302 : Text[1024]);
    BEGIN
      XMLWrapper.AddKeyValueElement(CurrentNodeGlobal,NodeName,KeyName,KeyValue);
    END;

    PROCEDURE AddFieldElement@11123306(NewNodeName@11123303 : Text[1024];NewNodeValue@11123302 : Text[1024]);
    BEGIN
      XMLWrapper.AddFieldElement(CurrentNodeGlobal,NewNodeName,NewNodeValue);
    END;

    PROCEDURE AddFieldNameValueTypeElement@11123309(FieldName@11123304 : Text[1024];FieldValue@11123303 : Text[1024];FieldType@11123302 : Text[50]);
    BEGIN
      XMLWrapper.AddFieldNameValueTypeElement(CurrentNodeGlobal,FieldName,FieldValue,FieldType);
    END;

    PROCEDURE AddFieldElementByNo@11123317(VAR Recref@11123302 : RecordRef;FieldNo@11123303 : Integer);
    BEGIN
      XMLWrapper.AddFieldElementByNo(CurrentNodeGlobal,Recref,FieldNo);
    END;

    PROCEDURE AddFieldElementByName@11123324(VAR FieldRef@11123303 : FieldRef;FieldName@11123302 : Text[1024]);
    BEGIN
      XMLWrapper.AddFieldXMLByName(CurrentNodeGlobal,FieldRef,FieldName);
    END;

    PROCEDURE AddAttribute@11123322(NewAttributeName@11123303 : Text[1024];NewAttributeValue@11123302 : Text[1024]);
    BEGIN
      XMLWrapper.AddAttribute(CurrentNodeGlobal,NewAttributeName,NewAttributeValue);
    END;

    PROCEDURE ChildNodes@11123313(VAR ResultNodeBuff@11123302 : Record 11123303) : Boolean;
    VAR
      ResultNodeList@11123303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
    BEGIN
      IF ISNULL(CurrentNodeGlobal) THEN
        EXIT(FALSE);

      CLEAR(ResultNodeBuff);
      Context.InitBuffer(ResultNodeBuff);
      ResultNodeBuff.INSERT;

      ResultNodeList := CurrentNodeGlobal.ChildNodes;
      IF ISNULL(ResultNodeList) THEN
        EXIT(FALSE);

      IF ResultNodeList.Count <> 0 THEN BEGIN
        XMLWrapper.SetBufferCurrentNodeList(ResultNodeBuff,ResultNodeList);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE SelectNodes@11123308(QueryString@11123303 : Text[1024];VAR ResultNodeBuff@11123302 : Record 11123303) : Boolean;
    VAR
      ResultNodeList@11123304 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
    BEGIN
      IF ISNULL(CurrentNodeGlobal) THEN
        EXIT(FALSE);

      CLEAR(ResultNodeBuff);
      Context.InitBuffer(ResultNodeBuff);
      ResultNodeBuff.INSERT;

      ResultNodeList := CurrentNodeGlobal.SelectNodes(QueryString);
      IF ISNULL(ResultNodeList) THEN
        EXIT(FALSE);

      IF ResultNodeList.Count <> 0 THEN BEGIN
        XMLWrapper.SetBufferCurrentNodeList(ResultNodeBuff,ResultNodeList);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE SelectSingleNode@11123311(QueryString@11123303 : Text[1024];VAR ResultNodeBuff@11123302 : Record 11123303) : Boolean;
    VAR
      ResultNode@11123304 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF ISNULL(CurrentNodeGlobal) THEN
        EXIT(FALSE);

      CLEAR(ResultNodeBuff);
      Context.InitBuffer(ResultNodeBuff);
      ResultNodeBuff.INSERT;

      ResultNode := CurrentNodeGlobal.SelectSingleNode(QueryString);
      IF NOT ISNULL(ResultNode) THEN BEGIN
        XMLWrapper.SetBufferCurrentNode(ResultNodeBuff,ResultNode);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE SelectSingleNodeText@11123307(QueryString@11123302 : Text[1024]) : Text[1024];
    VAR
      ResultNode@11123303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF NOT ISNULL(CurrentNodeGlobal) THEN
        ResultNode := CurrentNodeGlobal.SelectSingleNode(QueryString);

      IF NOT ISNULL(ResultNode) THEN
        EXIT(ResultNode.InnerText);
    END;

    PROCEDURE FirstChild@11123321(VAR ResultNodeBuff@11123302 : Record 11123303) : Boolean;
    VAR
      ResultNode@11123303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF ISNULL(CurrentNodeGlobal) THEN
        EXIT(FALSE);

      CLEAR(ResultNodeBuff);
      Context.InitBuffer(ResultNodeBuff);
      ResultNodeBuff.INSERT;

      ResultNode := CurrentNodeGlobal.FirstChild;
      IF NOT ISNULL(ResultNode) THEN BEGIN
        XMLWrapper.SetBufferCurrentNode(ResultNodeBuff,ResultNode);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE LastChild@11123320(VAR ResultNodeBuff@11123302 : Record 11123303) : Boolean;
    VAR
      ResultNode@11123303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF ISNULL(CurrentNodeGlobal) THEN
        EXIT(FALSE);

      CLEAR(ResultNodeBuff);
      Context.InitBuffer(ResultNodeBuff);
      ResultNodeBuff.INSERT;

      ResultNode := CurrentNodeGlobal.LastChild;
      IF NOT ISNULL(ResultNode) THEN BEGIN
        XMLWrapper.SetBufferCurrentNode(ResultNodeBuff,ResultNode);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE ParrentNode@11123323(VAR ResultNodeBuff@11123302 : Record 11123303) : Boolean;
    VAR
      ResultNode@11123303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF ISNULL(CurrentNodeGlobal) THEN
        EXIT(FALSE);

      CLEAR(ResultNodeBuff);
      Context.InitBuffer(ResultNodeBuff);
      ResultNodeBuff.INSERT;

      ResultNode := CurrentNodeGlobal.ParentNode;
      IF NOT ISNULL(ResultNode) THEN BEGIN
        XMLWrapper.SetBufferCurrentNode(ResultNodeBuff,ResultNode);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetCurrentNode@11123303(VAR XMLNode@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    BEGIN
      XMLNode := CurrentNodeGlobal;
    END;

    PROCEDURE SetCurrentNode@11123304(VAR XMLNode@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    BEGIN
      CurrentNodeGlobal := XMLNode;
    END;

    PROCEDURE GetCurrentNodeList@11123316(VAR XMLNodeList@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList");
    BEGIN
      XMLNodeList := CurrentNodeListGlobal;
    END;

    PROCEDURE SetCurrentNodeList@11123315(VAR XMLNodeList@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList");
    BEGIN
      CurrentNodeListGlobal := XMLNodeList;
    END;

    PROCEDURE NextNode@11123310() : Boolean;
    BEGIN
      IF ISNULL(CurrentNodeListGlobal) THEN
        EXIT(FALSE);

      IF CurrentNodeListGlobal.Count = 0 THEN
        EXIT(FALSE);

      IF ISNULL(EnumeratorGlobal) THEN
        EnumeratorGlobal := CurrentNodeListGlobal.GetEnumerator;

      IF EnumeratorGlobal.MoveNext THEN
        CurrentNodeGlobal := EnumeratorGlobal.Current
      ELSE
        CLEAR(CurrentNodeGlobal);

      IF NOT ISNULL(CurrentNodeGlobal) THEN
        EXIT(TRUE);
    END;

    PROCEDURE CutFieldValueByName@11123319(FieldName@11123302 : Text[1024]) : Text[1024];
    VAR
      FieldValue@11123303 : Text[1024];
    BEGIN
      FieldValue := XMLWrapper.FindValueByKeyAttribute(CurrentNodeGlobal,'field','name','value',FieldName,TRUE);
      EXIT(FieldValue);
    END;

    PROCEDURE ReadFieldValueByName@11123326(FieldName@11123302 : Text[1024]) : Text[1024];
    VAR
      FieldValue@11123303 : Text[1024];
    BEGIN
      FieldValue := XMLWrapper.FindValueByKeyAttribute(CurrentNodeGlobal,'field','name','value',FieldName,FALSE);
      EXIT(FieldValue);
    END;

    PROCEDURE AddBlobElement@11123329(NewNodeName@11123303 : Text[1024];VAR TempBlob@11123302 : Record 99008535);
    BEGIN
      XMLWrapper.AddBlobElement(CurrentNodeGlobal,NewNodeName,TempBlob);
    END;

    PROCEDURE WriteXMLTextToStream@11123397(VAR WriteStream@11123302 : OutStream;VAR Request@11123303 : Text);
    BEGIN
      XML.CREATEOUTSTREAM(WriteStream);
      WriteStream.WRITETEXT(Request);
      XMLTextGlobal := Request;
    END;

    PROCEDURE SetXMLText@11123398(VAR InXMLText@11123302 : Text);
    BEGIN
      XMLTextGlobal := InXMLText;
    END;

    PROCEDURE GetXMLText@11123399() : Text;
    BEGIN
      EXIT(XMLTextGlobal);
    END;

    BEGIN
    END.
  }
}

