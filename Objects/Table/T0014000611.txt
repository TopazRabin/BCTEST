OBJECT Table 14000611 Receive Control
{
  OBJECT-PROPERTIES
  {
    Date=12/28/17;
    Time=12:00:00 PM;
    Version List=SE0.60.18;
  }
  PROPERTIES
  {
    CaptionML=ENU=Receive Control;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code }
    { 11  ;   ;Receive Open        ;Boolean       ;CaptionML=ENU=Receive Open }
    { 12  ;   ;Total Receive Count ;Integer       ;CaptionML=ENU=Total Receive Count }
    { 13  ;   ;Last Receive No.    ;Integer       ;CaptionML=ENU=Last Receive No. }
    { 15  ;   ;Error Message       ;Text250       ;CaptionML=ENU=Error Message }
    { 16  ;   ;Scale Weight        ;Decimal       ;CaptionML=ENU=Scale Weight }
    { 17  ;   ;Manual Weight       ;Decimal       ;CaptionML=ENU=Manual Weight }
    { 18  ;   ;Manual Value        ;Decimal       ;CaptionML=ENU=Manual Value }
    { 19  ;   ;Line Description    ;Text250       ;CaptionML=ENU=Line Description }
    { 21  ;   ;Multi Document No.  ;Code250       ;CaptionML=ENU=Multi Document No. }
    { 22  ;   ;Multi Document Receive;Boolean     ;CaptionML=ENU=Multi Document Receive }
    { 31  ;   ;Receive Serial Number;Boolean      ;CaptionML=ENU=Receive Serial Number }
    { 32  ;   ;Input Type          ;Option        ;CaptionML=ENU=Input Type;
                                                   OptionCaptionML=ENU=" ,Account (G/L),Item,Resource,,,,,,,,Receive Details,Package Details";
                                                   OptionString=[ ,Account (G/L),Item,Resource,,,,,,,,Receive Details,Package Details] }
    { 33  ;   ;Input No.           ;Code20        ;CaptionML=ENU=Input No. }
    { 34  ;   ;Input Serial Number ;Code20        ;CaptionML=ENU=Input Serial Number }
    { 35  ;   ;Input Unit of Measure Code;Code10  ;CaptionML=ENU=Input Unit of Measure Code }
    { 36  ;   ;Input Variant Code  ;Code10        ;CaptionML=ENU=Input Variant Code }
    { 37  ;   ;Receive Serial Number Late;Boolean ;CaptionML=ENU=Receive Serial Number Late }
    { 38  ;   ;Input Qty. Per Unit of Measure;Decimal;
                                                   CaptionML=ENU=Input Qty. Per Unit of Measure }
    { 39  ;   ;Input Description   ;Text50        ;CaptionML=ENU=Input Description }
    { 40  ;   ;Input Always Enter Quantity;Boolean;CaptionML=ENU=Input Always Enter Quantity }
    { 41  ;   ;Input Base Unit of Meas. Code;Code10;
                                                   CaptionML=ENU=Input Base Unit of Meas. Code }
    { 42  ;   ;Always Enter Quantity;Boolean      ;CaptionML=ENU=Always Enter Quantity }
    { 43  ;   ;Standard Receive One item;Boolean  ;CaptionML=ENU=Standard Receive One item }
    { 44  ;   ;Receive Lot Number  ;Boolean       ;CaptionML=ENU=Receive Lot Number }
    { 45  ;   ;Receive Lot Number Late;Boolean    ;CaptionML=ENU=Receive Lot Number Late }
    { 46  ;   ;Input Lot Number    ;Code20        ;CaptionML=ENU=Input Lot Number }
    { 47  ;   ;Current Receive No. ;Code20        ;CaptionML=ENU=Current Receive No. }
    { 48  ;   ;Receive Warranty Date;Boolean      ;CaptionML=ENU=Receive Warranty Date }
    { 49  ;   ;Receive Warranty Date Late;Boolean ;CaptionML=ENU=Receive Warranty Date Late }
    { 50  ;   ;Input Warranty Date ;Date          ;CaptionML=ENU=Input Warranty Date }
    { 51  ;   ;Receive Expiration Date;Boolean    ;CaptionML=ENU=Receive Expiration Date }
    { 52  ;   ;Receive Expiration Date Late;Boolean;
                                                   CaptionML=ENU=Receive Expiration Date Late }
    { 53  ;   ;Input Expiration Date;Date         ;CaptionML=ENU=Input Expiration Date }
    { 54  ;   ;Scanned No.         ;Text30        ;CaptionML=ENU=Scanned No.;
                                                   Editable=No }
    { 55  ;   ;Processing Multiple Commands;Boolean;
                                                   CaptionML=ENU=Processing Multiple Commands }
    { 56  ;   ;Total Order Qty. (Base);Decimal    ;CaptionML=ENU=Total Order Qty. (Base);
                                                   DecimalPlaces=0:5 }
    { 57  ;   ;Received Order Qty. (Base);Decimal ;CaptionML=ENU=Received Order Qty. (Base) }
    { 58  ;   ;Total Line Qty. (Base);Decimal     ;CaptionML=ENU=Total Line Qty. (Base);
                                                   DecimalPlaces=0:5 }
    { 59  ;   ;Received Line Qty. (Base);Decimal  ;CaptionML=ENU=Received Line Qty. (Base);
                                                   DecimalPlaces=0:5 }
    { 60  ;   ;Line Unit of Measure Code;Code10   ;CaptionML=ENU=Line Unit of Measure Code }
    { 61  ;   ;Line Quantity       ;Decimal       ;CaptionML=ENU=Line Quantity }
    { 62  ;   ;Selected Receive Bin Code;Code10   ;CaptionML=ENU=Selected Receive Bin Code }
    { 63  ;   ;Over Receive        ;Boolean       ;CaptionML=ENU=Over Receive }
    { 66  ;   ;Auto Create Document;Boolean       ;CaptionML=ENU=Auto Create Document }
    { 69  ;   ;Line Location Code  ;Code10        ;CaptionML=ENU=Line Location Code }
    { 101 ;   ;Source Type         ;Integer       ;CaptionML=ENU=Source Type }
    { 102 ;   ;Source Subtype      ;Option        ;CaptionML=ENU=Source Subtype;
                                                   OptionCaptionML=ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                   OptionString=0,1,2,3,4,5,6,7,8,9,10 }
    { 103 ;   ;Source ID           ;Code20        ;OnValidate=BEGIN
                                                                IF "Source ID" <> '' THEN
                                                                  TransferFromSource("Source Type","Source Subtype","Source ID");
                                                              END;

                                                   CaptionML=ENU=Source ID }
    { 104 ;   ;Posted Source ID    ;Code20        ;CaptionML=ENU=Posted Source ID }
    { 105 ;   ;COD Payment         ;Boolean       ;CaptionML=ENU=COD Payment }
    { 106 ;   ;COD Amount          ;Decimal       ;CaptionML=ENU=COD Amount;
                                                   BlankZero=Yes }
    { 107 ;   ;COD Cashiers Check  ;Boolean       ;CaptionML=ENU=COD Cashiers Check }
    { 111 ;   ;Ship-from Type      ;Option        ;CaptionML=ENU=Ship-from Type;
                                                   OptionCaptionML=ENU=Customer,Vendor,,,,,,Location;
                                                   OptionString=Customer,Vendor,,,,,,Location }
    { 112 ;   ;Ship-from No.       ;Code20        ;CaptionML=ENU=Ship-from No. }
    { 113 ;   ;Ship-from Code      ;Code10        ;CaptionML=ENU=Ship-from Code }
    { 114 ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No. }
    { 115 ;   ;Currency Factor     ;Decimal       ;CaptionML=ENU=Currency Factor }
    { 116 ;   ;EDI Trade Partner   ;Code20        ;CaptionML=ENU=EDI Trade Partner }
    { 117 ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   CaptionML=ENU=Shipping Agent Code }
    { 118 ;   ;E-Ship Agent Service;Code30        ;TableRelation="E-Ship Agent Service".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code),
                                                                                                    World Wide Service=FIELD(World Wide Service));
                                                   CaptionML=ENU=E-Ship Agent Service }
    { 119 ;   ;World Wide Service  ;Boolean       ;CaptionML=ENU=World Wide Service;
                                                   Editable=No }
    { 121 ;   ;Ship-from Name      ;Text50        ;CaptionML=ENU=Ship-from Name;
                                                   Editable=No }
    { 122 ;   ;Ship-from Name 2    ;Text50        ;CaptionML=ENU=Ship-from Name 2;
                                                   Editable=No }
    { 123 ;   ;Ship-from Address   ;Text50        ;CaptionML=ENU=Ship-from Address;
                                                   Editable=No }
    { 124 ;   ;Ship-from Address 2 ;Text50        ;CaptionML=ENU=Ship-from Address 2;
                                                   Editable=No }
    { 125 ;   ;Ship-from City      ;Text30        ;CaptionML=ENU=Ship-from City;
                                                   Editable=No }
    { 126 ;   ;Ship-from Contact   ;Text50        ;CaptionML=ENU=Ship-from Contact;
                                                   Editable=No }
    { 127 ;   ;Ship-from ZIP Code  ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Ship-from ZIP Code;
                                                   Editable=No }
    { 128 ;   ;Ship-from State     ;Text30        ;CaptionML=ENU=Ship-from State;
                                                   Editable=No }
    { 129 ;   ;Ship-from Country Code;Code10      ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Ship-from Country Code;
                                                   Editable=No }
    { 130 ;   ;Ship-from Phone No. ;Text30        ;CaptionML=ENU=Ship-from Phone No.;
                                                   Editable=No }
    { 131 ;   ;Ship-from Fax No.   ;Text30        ;CaptionML=ENU=Ship-from Fax No.;
                                                   Editable=No }
    { 132 ;   ;Source Location Code;Code10        ;CaptionML=ENU=Source Location Code }
    { 133 ;   ;Show Serial No. Info. Card;Boolean ;CaptionML=ENU=Show Serial No. Info. Card }
    { 134 ;   ;Show Lot No. Info. Card;Boolean    ;CaptionML=ENU=Show Lot No. Info. Card }
    { 135 ;   ;Auto Create Serial No.;Boolean     ;CaptionML=ENU=Auto Create Serial No. }
    { 136 ;   ;Auto Create Lot No. ;Boolean       ;CaptionML=ENU=Auto Create Lot No. }
    { 150 ;   ;Message Line        ;Text250       ;CaptionML=ENU=Message Line }
    { 151 ;   ;Order Message       ;Text100       ;CaptionML=ENU=Order Message }
    { 152 ;   ;Receive Message     ;Text100       ;CaptionML=ENU=Receive Message }
    { 153 ;   ;Order Open          ;Boolean       ;CaptionML=ENU=Order Open }
    { 154 ;   ;Display Value       ;Decimal       ;CaptionML=ENU=Display Value }
    { 155 ;   ;Display Caption     ;Text100       ;CaptionML=ENU=Display Caption }
    { 156 ;   ;Open Source Type    ;Integer       ;CaptionML=ENU=Open Source Type }
    { 157 ;   ;Open Source Subtype ;Integer       ;CaptionML=ENU=Open Source Subtype }
    { 158 ;   ;Open Source ID      ;Text30        ;CaptionML=ENU=Open Source ID }
    { 159 ;   ;Close When Close Order;Boolean     ;CaptionML=ENU=Close When Close Order }
    { 5400;   ;Put-away Location Code;Code10      ;TableRelation=Location;
                                                   CaptionML=ENU=Put-away Location Code }
    { 5401;   ;Put-away Zone Code  ;Code10        ;TableRelation=Zone.Code WHERE (Location Code=FIELD(Put-away Location Code));
                                                   CaptionML=ENU=Put-away Zone Code }
    { 5402;   ;Put-away Bin Code   ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Put-away Location Code));
                                                   CaptionML=ENU=Put-away Bin Code }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ReceiveSetup@1240030000 : Record 14000607;
      ReceiveStation@1240030001 : Record 14000608;
      ReceiveSetupRetrieved@1240030002 : Boolean;
      ReceiveStationRetrieved@1240030003 : Boolean;
      Text001@1001 : TextConst 'ENU=%1 and %2 cannot be blank.';
      Text002@1002 : TextConst 'ENU=Unknown Type %1';
      Text003@1003 : TextConst 'ENU=Sales %1 %2';
      Text004@1004 : TextConst 'ENU=Purchase %1 %2';
      Text005@1005 : TextConst 'ENU=Transfer %1';
      Text006@1006 : TextConst 'ENU=Unknown Source Type %1 %2 %3.';
      Text007@1007 : TextConst 'ENU=No quantities found on the sales lines.';
      Text008@1008 : TextConst 'ENU=No quantities found on the purchase lines.';
      Text009@1009 : TextConst 'ENU=No quantities found on the transfer lines.';
      Text010@1010 : TextConst 'ENU=Documents must be selected.';
      Text011@1011 : TextConst 'ENU=Only one line can be selected.';
      Text012@1012 : TextConst 'ENU=Wrong Quantity.';
      EShipValidation@1240020000 : Codeunit 14000240;

    PROCEDURE TransferFromSource@3(SourceType@1240030000 : Integer;SourceSubtype@1240030001 : Integer;SourceID@1240030002 : Code[20]);
    VAR
      SalesHeader@1240030003 : Record 36;
      PurchHeader@1240030004 : Record 38;
      TransferHeader@1240030005 : Record 5740;
    BEGIN
      IF (SourceType = 0) OR (SourceID = '') THEN
        ERROR(Text001,FIELDCAPTION("Source Type"),FIELDCAPTION("Source ID"));

      CASE SourceType OF
        DATABASE::"Sales Header":
          IF SalesHeader.GET(SourceSubtype,SourceID) THEN
            TransferFromSalesHeader(SalesHeader);
        DATABASE::"Purchase Header":
          IF PurchHeader.GET(SourceSubtype,SourceID) THEN
            TransferFromPurchHeader(PurchHeader);
        DATABASE::"Transfer Header":
          IF TransferHeader.GET(SourceID) THEN
            TransferFromTransferHeader(TransferHeader);
        ELSE
          ERROR(Text002,"Source Type");
      END;
    END;

    PROCEDURE TransferFromSource2@9();
    BEGIN
      TransferFromSource("Source Type","Source Subtype","Source ID");
    END;

    PROCEDURE TransferFromReceive@4(Receive@1240030000 : Record 14000601);
    BEGIN
      "Source Type" := Receive."Source Type";
      "Source Subtype" := Receive."Source Subtype";
      "Source ID" := Receive."Source ID";

      IF (Receive."Source Type" <> 0) AND (Receive."Source ID" <> '') THEN
        TransferFromSource("Source Type","Source Subtype","Source ID");

      "Ship-from Type" := Receive."Ship-from Type";
      "Ship-from No." := Receive."Ship-from No.";
      "Ship-from Code" := Receive."Ship-from Code";
      "Ship-from Name" := Receive."Ship-from Name";
      "Ship-from Name 2" := Receive."Ship-from Name 2";
      "Ship-from Address" := Receive."Ship-from Address";
      "Ship-from Address 2" := Receive."Ship-from Address 2";
      "Ship-from City" := Receive."Ship-from City";
      "Ship-from Contact" := Receive."Ship-from Contact";
      "Ship-from ZIP Code" := Receive."Ship-from ZIP Code";
      "Ship-from State" := Receive."Ship-from State";
      "Ship-from Country Code" := Receive."Ship-from Country Code";
      "Ship-from Phone No." := Receive."Ship-from Phone No.";
      "Ship-from Fax No." := Receive."Ship-from Fax No.";
      "Shipping Agent Code" := Receive."Shipping Agent Code";
      "E-Ship Agent Service" := Receive."Shipping Agent Service";
      "World Wide Service" := Receive."World Wide Service";
      "COD Payment" := Receive.COD;
      "COD Cashiers Check" := Receive."COD Cashiers Check";
      "External Document No." := Receive."External Document No.";
    END;

    PROCEDURE TransferFromSalesHeader@1(SalesHeader@1240030000 : Record 36);
    VAR
      Customer@1240030001 : Record 18;
      ShipToAddress@1240030002 : Record 222;
      SalesSetup@1240030003 : Record 311;
    BEGIN
      IF SalesHeader."External Document No." = '' THEN BEGIN
        SalesSetup.GET;

        IF SalesSetup."Ext. Doc. No. Mandatory" THEN
          SalesHeader.TESTFIELD("External Document No.");
      END;

      "Source Type" := DATABASE::"Sales Header";
      "Source Subtype" := SalesHeader."Document Type";
      "Source ID" := SalesHeader."No.";
      "Posted Source ID" := '';
      "Source Location Code" := SalesHeader."Location Code";
      "Ship-from Type" := "Ship-from Type"::Customer;
      "Ship-from No." := SalesHeader."Sell-to Customer No.";
      "Ship-from Code" := SalesHeader."Ship-to Code";
      "Ship-from Name" := SalesHeader."Sell-to Customer Name";
      "Ship-from Name 2" := SalesHeader."Sell-to Customer Name 2";
      "Ship-from Address" := SalesHeader."Sell-to Address";
      "Ship-from Address 2" := SalesHeader."Sell-to Address 2";
      "Ship-from City" := SalesHeader."Sell-to City";
      "Ship-from Contact" := SalesHeader."Sell-to Contact";
      "Ship-from ZIP Code" := SalesHeader."Sell-to Post Code";
      "Ship-from State" := SalesHeader."Sell-to County";
      "Ship-from Country Code" := SalesHeader."Sell-to Country/Region Code";
      CASE TRUE OF
        SalesHeader."Ship-to Code" <> '':
          BEGIN
            ShipToAddress.GET(SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code");
            "Ship-from Phone No." := ShipToAddress."Phone No.";
            "Ship-from Fax No." := ShipToAddress."Fax No.";
          END;
        SalesHeader."Sell-to Customer No." <> '':
          BEGIN
            Customer.GET(SalesHeader."Sell-to Customer No.");
            "Ship-from Phone No." := Customer."Phone No.";
            "Ship-from Fax No." := Customer."Fax No.";
          END;
        ELSE BEGIN
          "Ship-from Phone No." := '';
          "Ship-from Fax No." := '';
        END;
      END;
      "Shipping Agent Code" := SalesHeader."Shipping Agent Code";
      "E-Ship Agent Service" := SalesHeader."E-Ship Agent Service";
      "World Wide Service" := SalesHeader."World Wide Service";
      "COD Payment" := SalesHeader."COD Payment";
      "COD Cashiers Check" := SalesHeader."COD Cashiers Check";
      "External Document No." := SalesHeader."External Document No.";
      "Currency Factor" := SalesHeader."Currency Factor";
      "EDI Trade Partner" := SalesHeader."EDI Trade Partner";
    END;

    PROCEDURE TransferFromPurchHeader@2(PurchHeader@1240030000 : Record 38);
    VAR
      Vendor@1240030001 : Record 23;
      OrderAddress@1240030002 : Record 224;
    BEGIN
      "Source Type" := DATABASE::"Purchase Header";
      "Source Subtype" := PurchHeader."Document Type";
      "Source ID" := PurchHeader."No.";
      "Posted Source ID" := '';
      "Source Location Code" := PurchHeader."Location Code";
      "Ship-from Type" := "Ship-from Type"::Vendor;
      "Ship-from No." := PurchHeader."Buy-from Vendor No.";
      "Ship-from Code" := PurchHeader."Order Address Code";
      "Ship-from Name" := PurchHeader."Buy-from Vendor Name";
      "Ship-from Name 2" := PurchHeader."Buy-from Vendor Name 2";
      "Ship-from Address" := PurchHeader."Buy-from Address";
      "Ship-from Address 2" := PurchHeader."Buy-from Address 2";
      "Ship-from City" := PurchHeader."Buy-from City";
      "Ship-from Contact" := PurchHeader."Buy-from Contact";
      "Ship-from ZIP Code" := PurchHeader."Buy-from Post Code";
      "Ship-from State" := PurchHeader."Buy-from County";
      "Ship-from Country Code" := PurchHeader."Buy-from Country/Region Code";
      CASE TRUE OF
        PurchHeader."Order Address Code" <> '':
          BEGIN
            OrderAddress.GET(PurchHeader."Buy-from Vendor No.",PurchHeader."Order Address Code");
            "Ship-from Phone No." := OrderAddress."Phone No.";
            "Ship-from Fax No." := OrderAddress."Fax No.";
          END;
        PurchHeader."Buy-from Vendor No." <> '':
          BEGIN
            Vendor.GET(PurchHeader."Buy-from Vendor No.");
            "Ship-from Phone No." := Vendor."Phone No.";
            "Ship-from Fax No." := Vendor."Fax No.";
          END;
        ELSE BEGIN
          "Ship-from Phone No." := '';
          "Ship-from Fax No." := '';
        END;
      END;
      "Shipping Agent Code" := PurchHeader."E-Ship Agent Code";
      "E-Ship Agent Service" := PurchHeader."E-Ship Agent Service";
      "World Wide Service" := PurchHeader."World Wide Service";
      "COD Payment" := PurchHeader."COD Payment";
      "COD Cashiers Check" := PurchHeader."COD Cashiers Check";
      "External Document No." := PurchHeader."Vendor Shipment No.";
      "Currency Factor" := PurchHeader."Currency Factor";
    END;

    PROCEDURE TransferFromTransferHeader@8(TransferHeader@1240030002 : Record 5740);
    VAR
      Location@1240030000 : Record 14;
    BEGIN
      "Source Type" := DATABASE::"Transfer Header";
      "Source Subtype" := 0;
      "Source ID" := TransferHeader."No.";
      "Posted Source ID" := '';
      "Source Location Code" := TransferHeader."Transfer-to Code";
      "Ship-from Type" := "Ship-from Type"::Location;
      "Ship-from No." := TransferHeader."Transfer-from Code";
      "Ship-from Code" := '';
      "Ship-from Name" := TransferHeader."Transfer-from Name";
      "Ship-from Name 2" := TransferHeader."Transfer-from Name 2";
      "Ship-from Address" := TransferHeader."Transfer-from Address";
      "Ship-from Address 2" := TransferHeader."Transfer-from Address 2";
      "Ship-from City" := TransferHeader."Transfer-from City";
      "Ship-from Contact" := TransferHeader."Transfer-from Contact";
      "Ship-from ZIP Code" := TransferHeader."Transfer-from Post Code";
      "Ship-from State" := TransferHeader."Transfer-from County";
      "Ship-from Country Code" := TransferHeader."Trsf.-from Country/Region Code";
      Location.GET(TransferHeader."Transfer-from Code");
      "Ship-from Phone No." := Location."Phone No.";
      "Ship-from Fax No." := Location."Fax No.";
      "Shipping Agent Code" := TransferHeader."Shipping Agent Code";
      "E-Ship Agent Service" := TransferHeader."E-Ship Agent Service";
      "World Wide Service" := TransferHeader."World Wide Service";
    END;

    PROCEDURE FormatSource@5(SourceType@1240030000 : Integer;SourceSubtype@1240030001 : Integer;SourceID@1240030002 : Code[250]) : Text[250];
    VAR
      Salesheader@1240030003 : Record 36;
      PurchHeader@1240030004 : Record 38;
    BEGIN
      CASE SourceType OF
        0:
          EXIT('');
        DATABASE::"Sales Header":
          BEGIN
            Salesheader."Document Type" := SourceSubtype;
            EXIT(
              COPYSTR(
                STRSUBSTNO(Text003,Salesheader."Document Type",SourceID),1,250));
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader."Document Type" := SourceSubtype;
            EXIT(
              COPYSTR(
                STRSUBSTNO(Text004,PurchHeader."Document Type",SourceID),1,250));
          END;
        DATABASE::"Transfer Header":
          EXIT(COPYSTR(STRSUBSTNO(Text005,SourceID),1,250));
        ELSE
          EXIT(STRSUBSTNO('%1 %2 %3',SourceType,SourceSubtype,SourceID));
      END;
    END;

    PROCEDURE FormatSource2@6() : Text[250];
    BEGIN
      EXIT(FormatSource("Source Type","Source Subtype","Source ID"));
    END;

    PROCEDURE FormatPostedSource@13(SourceType@1240030000 : Integer;SourceSubtype@1240030005 : Integer;PostedSourceID@1240030001 : Code[250]) : Text[250];
    VAR
      SalesCrMemoHeader@1240030006 : Record 114;
      ReturnReceiptHeader@1240030002 : Record 6660;
      PurchReceiptHeader@1240030003 : Record 120;
      TransferReceiptHeader@1240030004 : Record 5746;
    BEGIN
      CASE SourceType OF
        0:
          EXIT('');
        DATABASE::"Sales Header":
          IF SourceSubtype = 3 THEN
            EXIT(COPYSTR(STRSUBSTNO('%1 %2',SalesCrMemoHeader.TABLECAPTION,PostedSourceID),1,250))
          ELSE
            EXIT(COPYSTR(STRSUBSTNO('%1 %2',ReturnReceiptHeader.TABLECAPTION,PostedSourceID),1,250));
        DATABASE::"Purchase Header":
          EXIT(COPYSTR(STRSUBSTNO('%1 %2',PurchReceiptHeader.TABLECAPTION,PostedSourceID),1,250));
        DATABASE::"Transfer Header":
          EXIT(COPYSTR(STRSUBSTNO('%1 %2',TransferReceiptHeader.TABLECAPTION,PostedSourceID),1,250));
        ELSE
          EXIT(STRSUBSTNO('%1 %2 %3',SourceType,PostedSourceID));
      END;
    END;

    PROCEDURE FormatPostedSource2@12() : Text[250];
    BEGIN
      EXIT(FormatPostedSource("Source Type","Source Subtype","Posted Source ID"));
    END;

    PROCEDURE ClearOrderInfo@7();
    BEGIN
      "Multi Document No." := '';
      "Multi Document Receive" := FALSE;
      "Total Order Qty. (Base)" := 0;
      "Received Order Qty. (Base)" := 0;
      "Total Line Qty. (Base)" := 0;
      "Received Line Qty. (Base)" := 0;
      "Line Unit of Measure Code" := '';
      "Line Quantity" := 0;

      "Source Type" := 0;
      "Source Subtype" := 0;
      "Source ID" := '';
      "Posted Source ID" := '';
      "Source Location Code" := '';
      "Ship-from Type" := 0;
      "Ship-from No." := '';
      "Ship-from Code" := '';
      "Ship-from Name" := '';
      "Ship-from Name 2" := '';
      "Ship-from Address" := '';
      "Ship-from Address 2" := '';
      "Ship-from City" := '';
      "Ship-from Contact" := '';
      "Ship-from ZIP Code" := '';
      "Ship-from State" := '';
      "Ship-from Country Code" := '';
      "Ship-from Phone No." := '';
      "Ship-from Fax No." := '';
      "Shipping Agent Code" := '';
      "E-Ship Agent Service" := '';
      "World Wide Service" := FALSE;
      "COD Payment" := FALSE;
      "COD Cashiers Check" := FALSE;
      "External Document No." := '';
      "Currency Factor" := 0;
      "EDI Trade Partner" := '';
    END;

    PROCEDURE ErrorUnknownSourceType@10(SourceType@1240030000 : Integer;SourceSubtype@1240030001 : Integer;SourceID@1240030002 : Code[250]);
    BEGIN
      ERROR(Text006,SourceType,SourceSubtype,SourceID);
    END;

    PROCEDURE ErrorUnknownSourceType2@11();
    BEGIN
      ErrorUnknownSourceType("Source Type","Source Subtype","Source ID");
    END;

    PROCEDURE ReceiveStatus@14() : Text[250];
    VAR
      SalesHeader@1240030000 : Record 36;
      PurchHeader@1240030001 : Record 38;
      TransferHeader@1240030002 : Record 5740;
    BEGIN
      CASE "Source Type" OF
        0:
          EXIT('');
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader."Document Type" := "Source Subtype";
            SalesHeader."No." := "Source ID";

            EXIT(EShipValidation."SalesHeader-ReceiveStatus"(SalesHeader));

          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader."Document Type" := "Source Subtype";
            PurchHeader."No." := "Source ID";
            EXIT(EShipValidation."PurchaseHeader-ReceiveStatus"(PurchHeader));
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferHeader."No." := "Source ID";

            EXIT(EShipValidation."TransferHeader-ReceiveStatus"(TransferHeader));
          END;
        ELSE
          ErrorUnknownSourceType2;
      END;
    END;

    PROCEDURE LookupSourceLine@15(MultiDocumentReceive@1240030000 : Boolean;MultiDocumentNo@1240030001 : Code[250];LineType@1240030002 : Integer;LineNo@1240030003 : Code[20];SourceType@1240030004 : Integer;SourceSubtype@1240030005 : Integer;SourceID@1240030006 : Code[250]) : Boolean;
    VAR
      SalesLine@1240030007 : Record 37;
      PurchLine@1240030008 : Record 39;
      TransferLine@1240030009 : Record 5741;
    BEGIN
      GetReceiveSetup;
      IF ReceiveSetup."Location Receiving" THEN
        GetReceiveStation;

      CASE SourceType OF
        DATABASE::"Sales Header":
          BEGIN
            SalesLine.RESET;
            SalesLine.SETRANGE("Document Type",SourceSubtype);
            IF MultiDocumentReceive THEN
              SalesLine.SETFILTER("Document No.",MultiDocumentNo)
            ELSE
              SalesLine.SETRANGE("Document No.",SourceID);
            SalesLine.SETRANGE("Drop Shipment",FALSE);
            SalesLine.SETRANGE(Pack,TRUE);
            SalesLine.SETRANGE(Type,LineType);
            IF LineNo <> '' THEN
              SalesLine.SETRANGE("No.",LineNo);
            SalesLine.SETFILTER("Outstanding Quantity",'<>0');
            IF ReceiveSetup."Location Receiving" THEN
              SalesLine.SETRANGE("Location Code",ReceiveStation."Location Code");
            IF PAGE.RUNMODAL(0,SalesLine) = ACTION::LookupOK THEN BEGIN
              "Input No." := SalesLine."No.";
              "Input Variant Code" := SalesLine."Variant Code";
              "Input Unit of Measure Code" := SalesLine."Unit of Measure Code";

              EXIT(TRUE);
            END;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchLine.RESET;
            PurchLine.SETRANGE("Document Type",SourceSubtype);
            IF MultiDocumentReceive THEN
              PurchLine.SETRANGE("Document No.",MultiDocumentNo)
            ELSE
              PurchLine.SETRANGE("Document No.",SourceID);
            PurchLine.SETRANGE(PurchLine."Drop Shipment",FALSE);
            PurchLine.SETRANGE(Type,LineType);
            IF LineNo <> '' THEN
              PurchLine.SETRANGE("No.",LineNo);
            PurchLine.SETFILTER("Outstanding Quantity",'<>0');
            IF ReceiveSetup."Location Receiving" THEN
              PurchLine.SETRANGE("Location Code",ReceiveStation."Location Code");
            IF PAGE.RUNMODAL(0,PurchLine) = ACTION::LookupOK THEN BEGIN
              "Input No." := PurchLine."No.";
              "Input Variant Code" := PurchLine."Variant Code";
              "Input Unit of Measure Code" := PurchLine."Unit of Measure Code";

              EXIT(TRUE);
            END;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferLine.RESET;
            IF MultiDocumentReceive THEN
              TransferLine.SETRANGE("Document No.",MultiDocumentNo)
            ELSE
              TransferLine.SETRANGE("Document No.",SourceID);
            IF LineNo <> '' THEN
              TransferLine.SETRANGE("Item No.",LineNo);
            TransferLine.SETFILTER("Outstanding Quantity",'<>0');
            IF ReceiveSetup."Location Receiving" THEN
              TransferLine.SETRANGE("Transfer-to Code",ReceiveStation."Location Code");
            IF PAGE.RUNMODAL(0,TransferLine) = ACTION::LookupOK THEN BEGIN
              "Input No." := TransferLine."Item No.";
              "Input Variant Code" := TransferLine."Variant Code";
              "Input Unit of Measure Code" := TransferLine."Unit of Measure Code";

              EXIT(TRUE);
            END;
          END;
        ELSE
          ErrorUnknownSourceType(SourceType,SourceSubtype,SourceID);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE CalculateQtyToReceive@16(MultiDocumentReceive@1240030000 : Boolean;MultiDocumentNo@1240030001 : Code[250];LineType@1240030002 : Integer;LineNo@1240030003 : Code[20];LineVariantCode@1240030004 : Code[10];SourceType@1240030005 : Integer;SourceSubtype@1240030006 : Integer;SourceID@1240030007 : Code[250]) : Decimal;
    VAR
      LineUnitOfMeasureCode@1240030008 : Code[10];
      LineQuantity@1240030009 : Decimal;
    BEGIN
      EXIT(
        CalculateQtyToReceiveLocal(
          LineUnitOfMeasureCode,LineQuantity,
          MultiDocumentReceive,MultiDocumentNo,LineType,LineNo,LineVariantCode,
          SourceType,SourceSubtype,SourceID));
    END;

    PROCEDURE CalculateQtyToReceive2@20();
    BEGIN
      "Total Line Qty. (Base)" :=
        CalculateQtyToReceiveLocal(
          "Line Unit of Measure Code","Line Quantity",
          "Multi Document Receive","Multi Document No.","Input Type","Input No.","Input Variant Code",
          "Source Type","Source Subtype","Source ID");
    END;

    LOCAL PROCEDURE CalculateQtyToReceiveLocal@19(VAR LineUnitOfMeasureCode@1240030001 : Code[10];VAR LineQuantity@1240030002 : Decimal;MultiDocumentReceive@1240030003 : Boolean;MultiDocumentNo@1240030004 : Code[250];LineType@1240030005 : Integer;LineNo@1240030006 : Code[20];LineVariantCode@1240030007 : Code[10];SourceType@1240030008 : Integer;SourceSubtype@1240030009 : Integer;SourceID@1240030010 : Code[250]) QtyToReceive@1240030000 : Decimal;
    VAR
      SalesLine@1240030011 : Record 37;
      PurchLine@1240030012 : Record 39;
      TransferLine@1240030021 : Record 5741;
      ItemUnitOfMeasure@1240030015 : Record 5404;
    BEGIN
      QtyToReceive := 0;

      GetReceiveSetup;
      IF ReceiveSetup."Location Receiving" THEN
        GetReceiveStation;

      CASE SourceType OF
        DATABASE::"Sales Header":
          BEGIN
            SalesLine.RESET;
            SalesLine.SETCURRENTKEY(
              "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment",Pack);
            SalesLine.SETRANGE("Document Type",SourceSubtype);
            IF MultiDocumentReceive THEN
              SalesLine.SETFILTER("Document No.",MultiDocumentNo)
            ELSE
              SalesLine.SETRANGE("Document No.",SourceID);
            SalesLine.SETRANGE(Type,LineType);
            SalesLine.SETRANGE("No.",LineNo);
            SalesLine.SETRANGE("Variant Code",LineVariantCode);
            SalesLine.SETRANGE(SalesLine."Drop Shipment",FALSE);
            SalesLine.SETRANGE(Pack,TRUE);
            IF ReceiveSetup."Location Receiving" THEN
              SalesLine.SETRANGE("Location Code",ReceiveStation."Location Code");
            IF NOT SalesLine.FIND('-') THEN
              ;

            // Additional code required in Attain
            IF (ReceiveSetup."Qty. to Receive as" = ReceiveSetup."Qty. to Receive as"::"Outstanding Quantity") OR
               (SalesLine."Document Type" <> SalesLine."Document Type"::"Return Order")
            THEN BEGIN
              SalesLine.CALCSUMS("Outstanding Qty. (Base)");
              QtyToReceive := SalesLine."Outstanding Qty. (Base)";
            END ELSE BEGIN
              SalesLine.CALCSUMS("Return Qty. to Receive (Base)");
              QtyToReceive := SalesLine."Return Qty. to Receive (Base)";
            END;
            LineUnitOfMeasureCode := SalesLine."Unit of Measure Code";
            LineQuantity := SalesLine.Quantity;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchLine.RESET;
            PurchLine.SETCURRENTKEY("Document Type",Type,"No.","Variant Code","Drop Shipment");
            PurchLine.SETRANGE("Document Type",SourceSubtype);
            IF MultiDocumentReceive THEN
              PurchLine.SETFILTER("Document No.",MultiDocumentNo)
            ELSE
              PurchLine.SETRANGE("Document No.",SourceID);
            PurchLine.SETRANGE(Type,LineType);
            PurchLine.SETRANGE("No.",LineNo);
            PurchLine.SETRANGE("Variant Code",LineVariantCode);
            PurchLine.SETRANGE(PurchLine."Drop Shipment",FALSE);
            IF ReceiveSetup."Location Receiving" THEN
              PurchLine.SETRANGE("Location Code",ReceiveStation."Location Code");
            IF NOT PurchLine.FIND('-') THEN
              ;

            // Additional code required in Attain
            IF ReceiveSetup."Qty. to Receive as" = ReceiveSetup."Qty. to Receive as"::"Outstanding Quantity"
            THEN BEGIN
              PurchLine.CALCSUMS("Outstanding Qty. (Base)");
              QtyToReceive := PurchLine."Outstanding Qty. (Base)";
            END ELSE BEGIN
              PurchLine.CALCSUMS("Qty. to Receive (Base)");
              QtyToReceive := PurchLine."Qty. to Receive (Base)";
            END;
            LineUnitOfMeasureCode := PurchLine."Unit of Measure Code";
            LineQuantity := PurchLine.Quantity;

            IF ReceiveSetup."Receive Subcontracting Order" THEN BEGIN
              PurchLine.SETFILTER("Prod. Order No.",'<>%1','');
              IF PurchLine.FIND('-') THEN BEGIN
                REPEAT
                  IF (ItemUnitOfMeasure."Item No." <> PurchLine."No.") OR
                     (ItemUnitOfMeasure.Code <> PurchLine."Unit of Measure Code")
                  THEN
                    ItemUnitOfMeasure.GET(PurchLine."No.",PurchLine."Unit of Measure Code");
                  IF ReceiveSetup."Qty. to Receive as" =
                     ReceiveSetup."Qty. to Receive as"::"Outstanding Quantity"
                  THEN
                    QtyToReceive :=
                      QtyToReceive +
                      PurchLine."Outstanding Quantity" *
                      ItemUnitOfMeasure."Qty. per Unit of Measure"
                  ELSE
                    QtyToReceive :=
                      QtyToReceive +
                      PurchLine."Qty. to Receive" *
                      ItemUnitOfMeasure."Qty. per Unit of Measure"
                UNTIL PurchLine.NEXT = 0;
              END;
              PurchLine.SETRANGE("Prod. Order No.");
            END;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferLine.RESET;
            TransferLine.SETCURRENTKEY(
              "Transfer-to Code",Status,"Derived From Line No.","Item No.","Variant Code");
            IF MultiDocumentReceive THEN
              TransferLine.SETFILTER("Document No.",MultiDocumentNo)
            ELSE
              TransferLine.SETRANGE("Document No.",SourceID);
            TransferLine.SETRANGE("Item No.",LineNo);
            TransferLine.SETRANGE("Variant Code",LineVariantCode);
            IF ReceiveSetup."Location Receiving" THEN
              TransferLine.SETRANGE("Transfer-to Code",ReceiveStation."Location Code");
            TransferLine.SETRANGE("Derived From Line No.",0);
            IF NOT TransferLine.FIND('-') THEN
              ;

            // Additional code required in Attain
            IF ReceiveSetup."Qty. to Receive as" = ReceiveSetup."Qty. to Receive as"::"Outstanding Quantity"
            THEN BEGIN
              TransferLine.CALCSUMS("Qty. in Transit (Base)");
              QtyToReceive := TransferLine."Qty. in Transit (Base)";
            END ELSE BEGIN
              TransferLine.CALCSUMS("Qty. to Receive (Base)");
              QtyToReceive := TransferLine."Qty. to Receive (Base)";
            END;
            LineUnitOfMeasureCode := TransferLine."Unit of Measure Code";
            LineQuantity := TransferLine.Quantity;
          END;
        ELSE
          ErrorUnknownSourceType(SourceType,SourceSubtype,SourceID);
      END;
    END;

    PROCEDURE CalculateOrderQtyToReceive@21();
    VAR
      SalesHeader@1240030000 : Record 36;
      PurchHeader@1240030001 : Record 38;
      TransferHeader@1240030002 : Record 5740;
      PurchLine@1240030003 : Record 39;
      ItemUnitOfMeasure@1240030004 : Record 5404;
    BEGIN
      "Total Order Qty. (Base)" := 0;
      "Received Order Qty. (Base)" := 0;

      GetReceiveSetup;
      IF ReceiveSetup."Location Receiving" THEN
        GetReceiveStation;

      CASE "Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader.RESET;
            SalesHeader.SETRANGE("Document Type","Source Subtype");
            IF "Multi Document Receive" THEN
              SalesHeader.SETFILTER("No.","Multi Document No.")
            ELSE
              SalesHeader.SETRANGE("No.","Source ID");
            IF ReceiveSetup."Location Receiving" THEN
              SalesHeader.SETRANGE("Location Filter",ReceiveStation."Location Code");
            IF SalesHeader.FIND('-') THEN
              REPEAT
                // Additional code required in Attain
                IF ReceiveSetup."Qty. to Receive as" = ReceiveSetup."Qty. to Receive as"::"Outstanding Quantity"
                THEN BEGIN
                  SalesHeader.CALCFIELDS("Total Outstanding Qty. (base)","Total Qty. Received (base)");
                  "Total Order Qty. (Base)" :=
                    "Total Order Qty. (Base)" + SalesHeader."Total Outstanding Qty. (base)";
                END ELSE BEGIN
                  IF SalesHeader."Document Type" = SalesHeader."Document Type"::"Return Order" THEN BEGIN
                    SalesHeader.CALCFIELDS("Total Return Qty to Rec (base)","Total Qty. Received (base)");
                    "Total Order Qty. (Base)" :=
                      "Total Order Qty. (Base)" + SalesHeader."Total Return Qty to Rec (base)";
                  END ELSE BEGIN
                    SalesHeader.CALCFIELDS("Total Qty. To Ship (base)","Total Qty. Received (base)");
                    "Total Order Qty. (Base)" :=
                      "Total Order Qty. (Base)" + SalesHeader."Total Qty. To Ship (base)";
                  END;
                END;
                "Received Order Qty. (Base)" :=
                  "Received Order Qty. (Base)" + SalesHeader."Total Qty. Received (base)";
              UNTIL SalesHeader.NEXT = 0;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader.RESET;
            PurchHeader.SETRANGE("Document Type","Source Subtype");
            IF "Multi Document Receive" THEN
              PurchHeader.SETFILTER("No.","Multi Document No.")
            ELSE
              PurchHeader.SETRANGE("No.","Source ID");
            IF ReceiveSetup."Location Receiving" THEN
              PurchHeader.SETRANGE("Location Filter",ReceiveStation."Location Code");
            IF PurchHeader.FIND('-') THEN
              REPEAT
                // Additional code required in Attain
                IF ReceiveSetup."Qty. to Receive as" = ReceiveSetup."Qty. to Receive as"::"Outstanding Quantity"
                THEN BEGIN
                  PurchHeader.CALCFIELDS("Total Outstanding Qty. (base)","Total Qty. Received (base)");
                "Total Order Qty. (Base)" :=
                  "Total Order Qty. (Base)" + PurchHeader."Total Outstanding Qty. (base)"
                END ELSE BEGIN
                  PurchHeader.CALCFIELDS("Total Qty. To Receive (base)","Total Qty. Received (base)");
                  "Total Order Qty. (Base)" :=
                    "Total Order Qty. (Base)" + PurchHeader."Total Qty. To Receive (base)";
                END;
                "Received Order Qty. (Base)" :=
                  "Received Order Qty. (Base)" + PurchHeader."Total Qty. Received (base)";

                IF ReceiveSetup."Receive Subcontracting Order" THEN BEGIN
                  PurchLine.RESET;
                  PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
                  PurchLine.SETRANGE("Document No.",PurchHeader."No.");
                  PurchLine.SETFILTER("Prod. Order No.",'<>%1','');
                  IF PurchLine.FIND('-') THEN
                    REPEAT
                      IF (ItemUnitOfMeasure."Item No." <> PurchLine."No.") OR
                         (ItemUnitOfMeasure.Code <> PurchLine."Unit of Measure Code")
                      THEN
                        ItemUnitOfMeasure.GET(PurchLine."No.",PurchLine."Unit of Measure Code");
                      IF ReceiveSetup."Qty. to Receive as" =
                         ReceiveSetup."Qty. to Receive as"::"Outstanding Quantity"
                      THEN
                        "Total Order Qty. (Base)" :=
                          "Total Order Qty. (Base)" +
                          PurchLine."Outstanding Quantity" * ItemUnitOfMeasure."Qty. per Unit of Measure"
                      ELSE
                        "Total Order Qty. (Base)" :=
                          "Total Order Qty. (Base)" +
                          PurchLine."Qty. to Receive" * ItemUnitOfMeasure."Qty. per Unit of Measure";
                    UNTIL PurchLine.NEXT = 0;
                END;
              UNTIL PurchHeader.NEXT = 0;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferHeader.RESET;
            IF "Multi Document Receive" THEN
              TransferHeader.SETFILTER("No.","Multi Document No.")
            ELSE
              TransferHeader.SETRANGE("No.","Source ID");
            IF ReceiveSetup."Location Receiving" THEN
              TransferHeader.SETRANGE("Location Filter",ReceiveStation."Location Code");
            IF TransferHeader.FIND('-') THEN
              REPEAT
                // Additional code required in Attain
                IF ReceiveSetup."Qty. to Receive as" =
                   ReceiveSetup."Qty. to Receive as"::"Outstanding Quantity"
                THEN BEGIN
                  TransferHeader.CALCFIELDS("Total Qty. in Transit (Base)","Total Qty. Received (base)");
                "Total Order Qty. (Base)" :=
                  "Total Order Qty. (Base)" + TransferHeader."Total Qty. in Transit (Base)"
                END ELSE BEGIN
                  TransferHeader.CALCFIELDS("Total Qty. To Receive (base)","Total Qty. Received (base)");
                  "Total Order Qty. (Base)" :=
                    "Total Order Qty. (Base)" + TransferHeader."Total Qty. To Receive (base)";
                END;
                "Received Order Qty. (Base)" :=
                  "Received Order Qty. (Base)" + TransferHeader."Total Qty. Received (base)";
              UNTIL TransferHeader.NEXT = 0;
          END;
        ELSE
          ErrorUnknownSourceType2;
      END;
    END;

    PROCEDURE CalculateTotalValue@17(VAR TotalQuantityBase@1240030000 : Decimal;VAR NewUnitOfMeasureCode@1240030001 : Code[10];MultiDocumentReceive@1240030002 : Boolean;MultiDocumentNo@1240030003 : Code[250];LineType@1240030004 : Integer;LineNo@1240030005 : Code[20];LineVariantCode@1240030006 : Code[10];FilterVariant@1240030007 : Boolean;LineUnitOfMeasureCode@1240030008 : Code[10];FromUnitOfMeasureCode@1240030009 : Boolean;SourceType@1240030010 : Integer;SourceSubtype@1240030011 : Integer;SourceID@1240030012 : Code[250]);
    VAR
      SalesLine@1240030013 : Record 37;
      PurchLine@1240030014 : Record 39;
      TransferLine@1240030015 : Record 5741;
      ItemUnitOfMeasure@1240030016 : Record 5404;
    BEGIN
      NewUnitOfMeasureCode := '';

      GetReceiveSetup;
      IF ReceiveSetup."Location Receiving" THEN
        GetReceiveStation;

      CASE SourceType OF
        DATABASE::"Sales Header":
          BEGIN
            SalesLine.RESET;
            SalesLine.SETCURRENTKEY(
              "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment",Pack);
            SalesLine.SETRANGE("Document Type",SourceSubtype);
            IF MultiDocumentReceive THEN
              SalesLine.SETFILTER("Document No.",MultiDocumentNo)
            ELSE
              SalesLine.SETRANGE("Document No.",SourceID);
            SalesLine.SETRANGE(Type,LineType);
            SalesLine.SETRANGE("No.",LineNo);
            IF FilterVariant OR (LineVariantCode <> '') THEN
              SalesLine.SETRANGE("Variant Code",LineVariantCode);
            SalesLine.SETRANGE("Drop Shipment",FALSE);
            SalesLine.SETRANGE(Pack,TRUE);
            SalesLine.SETFILTER(Quantity,'<>0');
            SalesLine.SETFILTER("Outstanding Quantity",'<>0');
            IF ReceiveSetup."Location Receiving" THEN
              SalesLine.SETRANGE("Location Code",ReceiveStation."Location Code");
            SalesLine.SETRANGE("Unit of Measure Code",LineUnitOfMeasureCode);
            IF NOT SalesLine.FIND('-') THEN BEGIN
              SalesLine.SETRANGE("Unit of Measure Code");
              SalesLine.FIND('-');
              IF (LineUnitOfMeasureCode = '') AND NOT FromUnitOfMeasureCode AND
                 (LineUnitOfMeasureCode <> SalesLine."Unit of Measure Code")
              THEN
                NewUnitOfMeasureCode := SalesLine."Unit of Measure Code";
            END;

            REPEAT
              TotalQuantityBase := TotalQuantityBase + SalesLine."Outstanding Qty. (Base)";
            UNTIL SalesLine.NEXT = 0;

            IF TotalQuantityBase = 0 THEN
              ERROR(Text007);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchLine.RESET;
            PurchLine.SETCURRENTKEY(
              "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment");
            PurchLine.SETRANGE("Document Type",SourceSubtype);
            IF MultiDocumentReceive THEN
              PurchLine.SETFILTER("Document No.",MultiDocumentNo)
            ELSE
              PurchLine.SETRANGE("Document No.",SourceID);
            PurchLine.SETRANGE(Type,LineType);
            PurchLine.SETRANGE("No.",LineNo);
            IF FilterVariant OR (LineVariantCode <> '') THEN
              PurchLine.SETRANGE("Variant Code",LineVariantCode);
            PurchLine.SETRANGE("Drop Shipment",FALSE);
            PurchLine.SETFILTER(Quantity,'<>0');
            PurchLine.SETFILTER("Outstanding Quantity",'<>0');
            IF ReceiveSetup."Location Receiving" THEN
              PurchLine.SETRANGE("Location Code",ReceiveStation."Location Code");
            PurchLine.SETRANGE("Unit of Measure Code",LineUnitOfMeasureCode);
            IF NOT PurchLine.FIND('-') THEN BEGIN
              PurchLine.SETRANGE("Unit of Measure Code");
              PurchLine.FIND('-');
              IF (LineUnitOfMeasureCode = '') AND NOT FromUnitOfMeasureCode AND
                 (LineUnitOfMeasureCode <> PurchLine."Unit of Measure Code")
              THEN
                NewUnitOfMeasureCode := PurchLine."Unit of Measure Code";
            END;

            REPEAT
              IF (PurchLine."Prod. Order No." <> '') AND ReceiveSetup."Receive Subcontracting Order" THEN BEGIN
                IF (ItemUnitOfMeasure."Item No." <> PurchLine."No.") OR
                   (ItemUnitOfMeasure.Code <> PurchLine."Unit of Measure Code")
                THEN
                  ItemUnitOfMeasure.GET(PurchLine."No.",PurchLine."Unit of Measure Code");
                TotalQuantityBase :=
                  TotalQuantityBase +
                  PurchLine."Outstanding Quantity" * ItemUnitOfMeasure."Qty. per Unit of Measure";
              END ELSE
                TotalQuantityBase := TotalQuantityBase + PurchLine."Outstanding Qty. (Base)";
            UNTIL PurchLine.NEXT = 0;

            IF TotalQuantityBase = 0 THEN
              ERROR(Text008);
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferLine.RESET;
            TransferLine.SETCURRENTKEY(
              "Transfer-to Code",Status,"Derived From Line No.","Item No.","Variant Code");
            IF MultiDocumentReceive THEN
              TransferLine.SETFILTER("Document No.",MultiDocumentNo)
            ELSE
              TransferLine.SETRANGE("Document No.",SourceID);
            TransferLine.SETRANGE("Item No.",LineNo);
            IF FilterVariant OR (LineVariantCode <> '') THEN
              TransferLine.SETRANGE("Variant Code",LineVariantCode);
            TransferLine.SETFILTER(Quantity,'<>0');
            TransferLine.SETFILTER("Outstanding Quantity",'<>0');
            IF ReceiveSetup."Location Receiving" THEN
              TransferLine.SETRANGE("Transfer-to Code",ReceiveStation."Location Code");
            TransferLine.SETRANGE("Unit of Measure Code",LineUnitOfMeasureCode);
            IF NOT TransferLine.FIND('-') THEN BEGIN
              TransferLine.SETRANGE("Unit of Measure Code");
              TransferLine.FIND('-');
              IF (LineUnitOfMeasureCode = '') AND NOT FromUnitOfMeasureCode AND
                 (LineUnitOfMeasureCode <> TransferLine."Unit of Measure Code")
              THEN
                NewUnitOfMeasureCode := TransferLine."Unit of Measure Code";
            END;

            REPEAT
              TotalQuantityBase := TotalQuantityBase + TransferLine."Outstanding Qty. (Base)";
            UNTIL TransferLine.NEXT = 0;

            IF TotalQuantityBase = 0 THEN
              ERROR(Text009);
          END;
        ELSE
          ErrorUnknownSourceType(SourceType,SourceSubtype,SourceID);
      END;
    END;

    PROCEDURE GetLineInfo@18() : Boolean;
    VAR
      SalesLine@1240030000 : Record 37;
      PurchLine@1240030001 : Record 39;
      TransferLine@1240030002 : Record 5741;
      Item@1240030003 : Record 27;
      Resource@1240030004 : Record 156;
    BEGIN
      GetReceiveSetup;
      IF ReceiveSetup."Location Receiving" THEN
        GetReceiveStation;

      CASE "Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            SalesLine.RESET;
            SalesLine.SETRANGE("Document Type","Source Subtype");
            IF "Multi Document Receive" THEN
              SalesLine.SETFILTER("Document No.","Multi Document No.")
            ELSE
              SalesLine.SETRANGE("Document No.","Source ID");
            SalesLine.SETRANGE(Type,"Input Type");
            SalesLine.SETRANGE("No.","Input No.");
            SalesLine.SETRANGE("Drop Shipment",FALSE);
            SalesLine.SETRANGE(Pack,TRUE);
            SalesLine.SETRANGE("Variant Code","Input Variant Code");
            IF ReceiveSetup."Location Receiving" THEN
              SalesLine.SETRANGE("Location Code",ReceiveStation."Location Code");
            IF SalesLine.FIND('-') THEN BEGIN
              "Line Unit of Measure Code" := SalesLine."Unit of Measure Code";
              "Line Quantity" := SalesLine.Quantity;
              "Line Location Code" := SalesLine."Location Code";

              EXIT(TRUE);
            END ELSE
              IF "Auto Create Document" THEN BEGIN
                IF "Input Unit of Measure Code" = '' THEN BEGIN
                  CASE "Input Type" OF
                    "Input Type"::Item:
                      BEGIN
                        Item.GET("Input No.");
                        "Line Unit of Measure Code" := Item."Sales Unit of Measure";
                      END;
                    "Input Type"::Resource:
                      BEGIN
                        Resource.GET("Input No.");
                        "Line Unit of Measure Code" := Resource."Base Unit of Measure";
                      END;
                  END;
                END ELSE
                  "Line Unit of Measure Code" := '';
                "Line Quantity" := 0;
                EXIT(TRUE);
              END ELSE
                EXIT(FALSE);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchLine.RESET;
            PurchLine.SETRANGE("Document Type","Source Subtype");
            IF "Multi Document Receive" THEN
              PurchLine.SETFILTER("Document No.","Multi Document No.")
            ELSE
              PurchLine.SETRANGE("Document No.","Source ID");
            PurchLine.SETRANGE(Type,"Input Type");
            PurchLine.SETRANGE("No.","Input No.");
            PurchLine.SETRANGE("Drop Shipment",FALSE);
            PurchLine.SETRANGE("Variant Code","Input Variant Code");
            IF ReceiveSetup."Location Receiving" THEN
              PurchLine.SETRANGE("Location Code",ReceiveStation."Location Code");
            IF PurchLine.FIND('-') THEN BEGIN
              "Line Unit of Measure Code" := PurchLine."Unit of Measure Code";
              "Line Quantity" := PurchLine.Quantity;
              "Line Location Code" := PurchLine."Location Code";

              EXIT(TRUE);
            END ELSE
              IF "Auto Create Document" THEN BEGIN
                IF "Input Unit of Measure Code" = '' THEN BEGIN
                  CASE "Input Type" OF
                    "Input Type"::Item:
                      BEGIN
                        Item.GET("Input No.");
                        "Line Unit of Measure Code" := Item."Sales Unit of Measure";
                      END;
                    "Input Type"::Resource:
                      BEGIN
                        Resource.GET("Input No.");
                        "Line Unit of Measure Code" := Resource."Base Unit of Measure";
                      END;
                  END;
                END ELSE
                  "Line Unit of Measure Code" := '';
                "Line Quantity" := 0;
                EXIT(TRUE);
              END ELSE
                EXIT(FALSE);
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferLine.RESET;
            IF "Multi Document Receive" THEN
              TransferLine.SETFILTER("Document No.","Multi Document No.")
            ELSE
              TransferLine.SETRANGE("Document No.","Source ID");
            TransferLine.SETRANGE("Item No.","Input No.");
            TransferLine.SETRANGE("Variant Code","Input Variant Code");
            IF ReceiveSetup."Location Receiving" THEN
              TransferLine.SETRANGE("Transfer-to Code",ReceiveStation."Location Code");
            IF TransferLine.FIND('-') THEN BEGIN
              "Line Unit of Measure Code" := TransferLine."Unit of Measure Code";
              "Line Quantity" := TransferLine.Quantity;
              "Line Location Code" := TransferLine."Transfer-to Code";

              EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END;
        ELSE
          ErrorUnknownSourceType2;
      END;
    END;

    PROCEDURE ListSourceDocuments@22(MultiDocumentReceive@1240030000 : Boolean;MultiDocumentNo@1240030001 : Code[250];SourceType@1240030002 : Integer;SourceSubtype@1240030003 : Integer;SourceID@1240030004 : Code[250]) : Code[20];
    BEGIN
    END;

    PROCEDURE ViewSourceDocument@23(MultiDocumentReceive@1240030000 : Boolean;MultiDocumentNo@1240030001 : Code[250];SourceType@1240030002 : Integer;SourceSubtype@1240030003 : Integer;SourceID@1240030004 : Code[250]);
    VAR
      Salesheader@1240030005 : Record 36;
      PurchHeader@1240030006 : Record 38;
      TransferHeader@1240030007 : Record 5740;
    BEGIN
      CASE SourceType OF
        DATABASE::"Sales Header":
          BEGIN
            Salesheader.RESET;
            Salesheader.SETRANGE("Document Type",SourceSubtype);
            IF MultiDocumentReceive THEN
              Salesheader.SETFILTER("No.",MultiDocumentNo)
            ELSE
              Salesheader.SETRANGE("No.",SourceID);

            Salesheader.GET(SourceSubtype,SourceID);
            CASE Salesheader."Document Type" OF
              Salesheader."Document Type"::"Credit Memo":
                PAGE.RUNMODAL(PAGE::"Sales Credit Memo",Salesheader);
              Salesheader."Document Type"::"Return Order":
                PAGE.RUNMODAL(PAGE::"Sales Return Order",Salesheader);
              ELSE
                PAGE.RUNMODAL(0,Salesheader);
            END;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader.RESET;
            PurchHeader.SETRANGE("Document Type",SourceSubtype);
            IF MultiDocumentReceive THEN
              PurchHeader.SETFILTER("No.",MultiDocumentNo)
            ELSE
              PurchHeader.SETRANGE("No.",SourceID);

            PurchHeader.GET(SourceSubtype,SourceID);
            CASE PurchHeader."Document Type" OF
              PurchHeader."Document Type"::Order:
                PAGE.RUNMODAL(PAGE::"Purchase Order",PurchHeader);
              PurchHeader."Document Type"::Invoice:
                PAGE.RUNMODAL(PAGE::"Purchase Invoice",PurchHeader);
              ELSE
                PAGE.RUNMODAL(0,PurchHeader);
            END;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferHeader.RESET;
            IF MultiDocumentReceive THEN
              TransferHeader.SETFILTER("No.",MultiDocumentNo)
            ELSE
              TransferHeader.SETRANGE("No.",SourceID);

            TransferHeader.GET(SourceID);
            PAGE.RUNMODAL(PAGE::"Transfer Order",TransferHeader);
          END;
        ELSE
          ErrorUnknownSourceType(SourceType,SourceSubtype,SourceID);
      END;
    END;

    PROCEDURE ViewSourceDocument2@24();
    BEGIN
      ViewSourceDocument(
        "Multi Document Receive","Multi Document No.","Source Type","Source Subtype","Source ID");
    END;

    PROCEDURE GetReceiveSetup@26();
    BEGIN
      IF ReceiveSetupRetrieved THEN
        EXIT;

      ReceiveSetup.GET;
      ReceiveSetupRetrieved := TRUE;
    END;

    PROCEDURE GetReceiveStation@27();
    BEGIN
      IF ReceiveStationRetrieved THEN
        EXIT;
      ReceiveStation.GetReceiveStation;
      ReceiveStationRetrieved := TRUE;
    END;

    PROCEDURE ReverseMultiDocNoFilter@28() : Text[250];
    VAR
      TempFilter@1240030000 : Text[250];
      TempText@1240030001 : Text[250];
      Pos@1240030002 : Integer;
    BEGIN
      TempText := "Multi Document No.";
      TempFilter := '';
      IF TempText = '' THEN
        EXIT(TempFilter);

      REPEAT
        Pos := STRPOS(TempText,'|');
        IF TempFilter <> '' THEN BEGIN
          IF Pos <> 0 THEN BEGIN
            TempFilter := TempFilter + '&<>' + COPYSTR(TempText,1,Pos - 1);
            TempText := COPYSTR(TempText,Pos + 1);
          END ELSE
            TempFilter := TempFilter + '&<>' + TempText;
        END ELSE BEGIN
          TempFilter := '<>' + COPYSTR(TempText,1,Pos - 1);
          TempText := COPYSTR(TempText,Pos + 1);
        END;

        IF MAXSTRLEN(TempFilter) - STRLEN(TempFilter) < Pos + 4 THEN
          EXIT(TempFilter);
      UNTIL Pos = 0;

      EXIT(TempFilter);
    END;

    PROCEDURE LookupSelectedSourceID@25(Receive@1240030000 : Record 14000601;VAR FastReceiveLineTmp@1240030001 : TEMPORARY Record 14000609;CurrentLineNo@1240030002 : Integer;InputType@1240030003 : Integer;InputNo@1240030004 : Code[20];InputVariantCode@1240030005 : Code[10];InputQuantityBase@1240030006 : Decimal) : Boolean;
    VAR
      ReceiveLine@1240030007 : Record 14000602;
      FastReceiveLine@1240030008 : Record 14000609;
      SelectReceiveSourceDocument@1240030009 : Page 14000631;
      ReceiveMgt@1240030010 : Codeunit 14000602;
      QuantityBase@1240030011 : Decimal;
    BEGIN
      IF NOT Receive."Multi Document Receive" THEN
        EXIT(FALSE);

      GetReceiveSetup;
      ReceiveSetup.TESTFIELD("Select Multi Document Source");
      IF ReceiveSetup."Location Receiving" THEN
        GetReceiveStation;

      ReceiveMgt.Initialize(ReceiveStation,ReceiveSetup);
      ReceiveMgt.UpdateFastReceiveLines(
        Rec,FastReceiveLineTmp,FALSE,TRUE,FALSE,InputType,InputNo,InputVariantCode);

      FastReceiveLineTmp.RESET;
      IF FastReceiveLineTmp.FIND('-') THEN
        IF FastReceiveLineTmp.NEXT = 0 THEN
          EXIT(FALSE);

      ReceiveLine.RESET;
      ReceiveLine.SETRANGE("Receive No.",Receive."No.");
      ReceiveLine.SETRANGE(Type,InputType);
      ReceiveLine.SETRANGE("No.",InputNo);
      ReceiveLine.SETRANGE("Variant Code",InputVariantCode);
      IF ReceiveLine.FIND('-') THEN
        REPEAT
          ReceiveLine.TESTFIELD("Source ID");
          IF FastReceiveLineTmp.GET(InputType,InputNo,InputVariantCode,ReceiveLine."Source ID") THEN BEGIN
            FastReceiveLineTmp."Qty. Received (Base)" :=
              FastReceiveLineTmp."Qty. Received (Base)" - ReceiveLine."Quantity (Base)";
            FastReceiveLineTmp."Rem. Qty. to Receive (Base)" :=
              FastReceiveLineTmp."Qty. on Order (Base)" - FastReceiveLineTmp."Qty. Received (Base)";
            FastReceiveLineTmp.UpdateReceivedQty;
            FastReceiveLineTmp.MODIFY;
          END;

          IF ReceiveLine."Line No." <> CurrentLineNo THEN BEGIN
            ReceiveLine.TESTFIELD("Selected Source ID");
            FastReceiveLineTmp.GET(InputType,InputNo,InputVariantCode,ReceiveLine."Selected Source ID");
            FastReceiveLineTmp."Qty. Received (Base)" :=
              FastReceiveLineTmp."Qty. Received (Base)" + ReceiveLine."Quantity (Base)";
            FastReceiveLineTmp."Rem. Qty. to Receive (Base)" :=
              FastReceiveLineTmp."Qty. on Order (Base)" - FastReceiveLineTmp."Qty. Received (Base)";
            FastReceiveLineTmp.UpdateReceivedQty;
            FastReceiveLineTmp.MODIFY;
          END;
        UNTIL ReceiveLine.NEXT = 0;

      IF FastReceiveLineTmp.FIND('-') THEN
        IF FastReceiveLineTmp.NEXT = 0 THEN
          IF FastReceiveLineTmp."Rem. Qty. to Receive (Base)" >= InputQuantityBase THEN BEGIN
            FastReceiveLineTmp.VALIDATE("Qty. to Receive (Base)",InputQuantityBase);
            FastReceiveLineTmp.MODIFY;

            EXIT(TRUE);
          END;

      QuantityBase := 0;
      FastReceiveLineTmp.RESET;
      IF FastReceiveLineTmp.FIND('-') THEN BEGIN
        REPEAT
          QuantityBase := QuantityBase + FastReceiveLineTmp."Rem. Qty. to Receive (Base)";
        UNTIL FastReceiveLineTmp.NEXT = 0;

        IF QuantityBase = InputQuantityBase THEN BEGIN
          FastReceiveLineTmp.FIND('-');
          REPEAT
            IF FastReceiveLineTmp."Rem. Qty. to Receive (Base)" <> 0 THEN BEGIN
              FastReceiveLineTmp.VALIDATE(
                "Qty. to Receive",FastReceiveLineTmp."Remaining Qty. to Receive");
              FastReceiveLineTmp.VALIDATE(
                "Qty. to Receive (Base)",FastReceiveLineTmp."Rem. Qty. to Receive (Base)");
              FastReceiveLineTmp.MODIFY;
            END ELSE
              FastReceiveLineTmp.DELETE;
          UNTIL FastReceiveLineTmp.NEXT = 0;

          EXIT(TRUE);
        END;
      END;

      REPEAT
        CLEAR(SelectReceiveSourceDocument);
        SelectReceiveSourceDocument.LoadFastReceiveLines(FastReceiveLineTmp,InputQuantityBase);
        SelectReceiveSourceDocument.LOOKUPMODE(TRUE);
        IF SelectReceiveSourceDocument.RUNMODAL = ACTION::LookupOK THEN BEGIN
          SelectReceiveSourceDocument.GETRECORD(FastReceiveLine);

          SelectReceiveSourceDocument.GetFastReceiveLines(FastReceiveLineTmp);
          FastReceiveLineTmp.SETFILTER("Qty. to Receive (Base)",'<>0');
          IF NOT FastReceiveLineTmp.FIND('-') THEN BEGIN
            FastReceiveLineTmp.SETRANGE("Qty. to Receive (Base)");
            IF FastReceiveLine."Rem. Qty. to Receive (Base)" >= InputQuantityBase THEN BEGIN
              FastReceiveLineTmp.DELETEALL;

              FastReceiveLine."Qty. to Receive (Base)" := InputQuantityBase;
              FastReceiveLineTmp := FastReceiveLine;
              FastReceiveLineTmp.INSERT;
              EXIT(TRUE);
            END;
          END ELSE BEGIN
            QuantityBase := 0;
            REPEAT
              QuantityBase := QuantityBase + FastReceiveLineTmp."Qty. to Receive (Base)";
            UNTIL FastReceiveLineTmp.NEXT = 0;

            IF InputQuantityBase = QuantityBase THEN BEGIN
              FastReceiveLineTmp.SETRANGE("Qty. to Receive (Base)",0);
              FastReceiveLineTmp.DELETEALL;
              FastReceiveLineTmp.SETRANGE("Qty. to Receive (Base)");
              EXIT(TRUE);
            END ELSE
              MESSAGE(Text010);
          END;
        END ELSE
          ERROR(Text010);
      UNTIL FALSE;
    END;

    PROCEDURE LookupSelectedSourceID2@32(Receive@1240030000 : Record 14000601;VAR CurrentReceiveLine@1240030001 : Record 14000602) : Boolean;
    VAR
      FastReceiveLineTmp@1240030002 : TEMPORARY Record 14000609;
    BEGIN
      CurrentReceiveLine.TESTFIELD("No.");

      IF LookupSelectedSourceID(
          Receive,FastReceiveLineTmp,
          CurrentReceiveLine."Line No.",CurrentReceiveLine.Type,CurrentReceiveLine."No.",
          CurrentReceiveLine."Variant Code",CurrentReceiveLine."Quantity (Base)")
      THEN BEGIN
        FastReceiveLineTmp.RESET;
        FastReceiveLineTmp.SETFILTER("Qty. to Receive (Base)",'<>0');
        IF NOT FastReceiveLineTmp.FIND('-') THEN
          EXIT(FALSE)
        ELSE
          IF FastReceiveLineTmp.NEXT <> 0 THEN
            ERROR(Text011);

        IF FastReceiveLineTmp."Qty. to Receive (Base)" <> CurrentReceiveLine."Quantity (Base)" THEN
          ERROR(Text012);

        IF CurrentReceiveLine."Selected Source ID" <> FastReceiveLineTmp."From Source ID" THEN
          CurrentReceiveLine.VALIDATE("Selected Source ID",FastReceiveLineTmp."From Source ID");
      END;
    END;

    PROCEDURE ValidateSelectedSourceID@29(Receive@1240030000 : Record 14000601;VAR ReceiveLine@1240030001 : Record 14000602);
    BEGIN
      IF NOT Receive."Multi Document Receive" THEN BEGIN
        ReceiveLine.TESTFIELD("Selected Source ID",'');
        EXIT;
      END;

      // Additional Quantity testing
    END;

    PROCEDURE TestReleased@1240030000(SourceType@1240030003 : Integer;SourceSubtype@1240030002 : Integer;SourceID@1240030001 : Code[250];GiveError@1240030000 : Boolean) : Boolean;
    VAR
      SalesHeader@1240030004 : Record 36;
      PurchHeader@1240030005 : Record 38;
      TransferHeader@1240030006 : Record 5740;
      SalesSetup@1240030007 : Record 311;
      PurchSetup@1240030008 : Record 312;
      InventorySetup@1240030009 : Record 313;
      SalesLine@1240030010 : Record 37;
      PurchLine@1240030011 : Record 39;
    BEGIN
      CASE SourceType OF
        DATABASE::"Sales Header":
          BEGIN
            SalesSetup.GET;
            SalesSetup.TESTFIELD("Enable Receive");

            IF GiveError THEN
              SalesHeader.GET(SourceSubtype,SourceID)
            ELSE
              IF NOT SalesHeader.GET(SourceSubtype,SourceID) THEN
                EXIT(FALSE);

            IF "Auto Create Document" THEN BEGIN
              SalesLine.RESET;
              SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
              SalesLine.SETRANGE("Document No.",SalesHeader."No.");
              IF NOT SalesLine.FIND('-') THEN
                EXIT(TRUE);
            END;

            IF SalesHeader.Status <> SalesHeader.Status::Released THEN
              IF GiveError THEN
                SalesHeader.TESTFIELD(Status,SalesHeader.Status::Released)
              ELSE
                EXIT(FALSE);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchSetup.GET;
            PurchSetup.TESTFIELD("Enable Receive");

            IF GiveError THEN
              PurchHeader.GET(SourceSubtype,SourceID)
            ELSE
              IF NOT PurchHeader.GET(SourceSubtype,SourceID) THEN
                EXIT(FALSE);

            IF "Auto Create Document" THEN BEGIN
              PurchLine.RESET;
              PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
              PurchLine.SETRANGE("Document No.",PurchHeader."No.");
              IF NOT PurchLine.FIND('-') THEN
                EXIT(TRUE);
            END;

            IF PurchHeader.Status <> PurchHeader.Status::Released THEN
              IF GiveError THEN
                PurchHeader.TESTFIELD(Status,PurchHeader.Status::Released)
              ELSE
                EXIT(FALSE);
          END;
        DATABASE::"Transfer Header":
          BEGIN
            InventorySetup.GET;
            InventorySetup.TESTFIELD("Enable Receive");

            IF GiveError THEN
              TransferHeader.GET(SourceID)
            ELSE
              IF NOT TransferHeader.GET(SourceID) THEN
                EXIT(FALSE);

            IF TransferHeader.Status <> TransferHeader.Status::Released THEN
              IF GiveError THEN
                TransferHeader.TESTFIELD(Status,TransferHeader.Status::Released)
              ELSE
                EXIT(FALSE);
          END;
        ELSE
          ErrorUnknownSourceType(SourceType,SourceSubtype,SourceID);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE TestReleased2@1240030001(GiveError@1240030000 : Boolean) : Boolean;
    BEGIN
      EXIT(TestReleased("Source Type","Source Subtype","Source ID",GiveError));
    END;

    PROCEDURE TestAllDocumentsReleased@1240030003() : Boolean;
    VAR
      SalesHeader@1240030002 : Record 36;
      PurchHeader@1240030001 : Record 38;
      TransferHeader@1240030000 : Record 5740;
    BEGIN
      CASE "Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader.RESET;
            SalesHeader.SETRANGE("Document Type","Source Subtype");
            IF "Multi Document Receive" THEN
              SalesHeader.SETFILTER("No.","Multi Document No.")
            ELSE
              SalesHeader.SETRANGE("No.","Source ID");
            IF SalesHeader.FIND('-') THEN
              REPEAT
                IF NOT TestReleased("Source Type",SalesHeader."Document Type",SalesHeader."No.",FALSE)
                THEN
                  EXIT(FALSE);
              UNTIL SalesHeader.NEXT = 0;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader.RESET;
            PurchHeader.SETRANGE("Document Type","Source Subtype");
            IF "Multi Document Receive" THEN
              PurchHeader.SETFILTER("No.","Multi Document No.")
            ELSE
              PurchHeader.SETRANGE("No.","Source ID");
            IF PurchHeader.FIND('-') THEN
              REPEAT
                IF NOT TestReleased("Source Type",PurchHeader."Document Type",PurchHeader."No.",FALSE)
                THEN
                  EXIT(FALSE);
              UNTIL PurchHeader.NEXT = 0;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferHeader.RESET;
            IF "Multi Document Receive" THEN
              TransferHeader.SETFILTER("No.","Multi Document No.")
            ELSE
              TransferHeader.SETRANGE("No.","Source ID");
            IF TransferHeader.FIND('-') THEN
              REPEAT
                IF NOT TestReleased("Source Type",0,TransferHeader."No.",FALSE) THEN
                  EXIT(FALSE);
              UNTIL TransferHeader.NEXT = 0;
          END;
        ELSE
          ErrorUnknownSourceType2;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE CalculateBackOrderQty@1240030002(VAR ReceiveInput@1240030001 : Record 14000615;DateCalculation@1240030000 : DateFormula);
    VAR
      Item@1240030003 : Record 27;
      EndDate@1240030002 : Date;
    BEGIN
      ReceiveInput."Sales Order Quantity" := 0;
      ReceiveInput."Sales Order Qty. (Base)" := 0;
      ReceiveInput.Inventory := 0;
      ReceiveInput."Inventory (Base)" := 0;
      ReceiveInput."Back Order Date Filter" := '';
      ReceiveInput."Back Order Location Filter" := '';

      IF (FORMAT(DateCalculation) = '') OR
         ("Input Type" <> "Input Type"::Item) OR ("Input No." = '')
      THEN
        EXIT;

      EndDate := CALCDATE(DateCalculation,WORKDATE);

      IF NOT Item.GET("Input No.") THEN
        EXIT;

      IF "Input Variant Code" <> '' THEN
        Item.SETRANGE("Variant Filter","Input Variant Code");
      Item.SETRANGE("Drop Shipment Filter",FALSE);
      IF ReceiveSetup."Location Receiving" THEN
        Item.SETRANGE("Location Filter",ReceiveStation."Location Code")
      ELSE
        IF ReceiveStation."Filter Incoming Location Code" THEN
          IF "Line Location Code" <> '' THEN
            Item.SETRANGE("Location Filter","Line Location Code");
      Item.SETRANGE("Date Filter",0D,EndDate);
      Item.CALCFIELDS("Qty. on Sales Order",Inventory,"Trans. Ord. Shipment (Qty.)");
      ReceiveInput."Sales Order Qty. (Base)" := Item."Qty. on Sales Order";
      ReceiveInput."Inventory (Base)" := Item.Inventory;
      ReceiveInput."Transfer Order Qty. (Base)" := Item."Trans. Ord. Shipment (Qty.)";
      IF "Input Qty. Per Unit of Measure" <> 0 THEN BEGIN
        ReceiveInput."Sales Order Quantity" :=
          ROUND(ReceiveInput."Sales Order Qty. (Base)" / "Input Qty. Per Unit of Measure",0.00001);
        ReceiveInput.Inventory :=
          ROUND(ReceiveInput."Inventory (Base)" / "Input Qty. Per Unit of Measure",0.00001);
        ReceiveInput."Transfer Order Quantity" :=
          ROUND(ReceiveInput."Transfer Order Qty. (Base)" / "Input Qty. Per Unit of Measure",0.00001);
      END ELSE BEGIN
        ReceiveInput."Sales Order Quantity" := ReceiveInput."Sales Order Qty. (Base)";
        ReceiveInput.Inventory := ReceiveInput."Inventory (Base)";
        ReceiveInput."Transfer Order Quantity" := ReceiveInput."Transfer Order Qty. (Base)";
      END;
      ReceiveInput."Back Order Date Filter" := Item.GETFILTER("Date Filter");
      ReceiveInput."Back Order Location Filter" := Item.GETFILTER("Location Filter");
    END;

    BEGIN
    END.
  }
}

