OBJECT Table 14002804 RF Statistics Entry
{
  OBJECT-PROPERTIES
  {
    Date=07/17/17;
    Time=12:00:00 PM;
    Version List=RF1.50.09;
  }
  PROPERTIES
  {
    CaptionML=ENU=RF Statistics Entry;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=ENU=Entry No. }
    { 11  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=ENU=Item No. }
    { 12  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=ENU=Variant Code }
    { 13  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=ENU=Unit of Measure Code }
    { 14  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 15  ;   ;Quantity            ;Decimal       ;CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 16  ;   ;Outstanding Quantity;Decimal       ;CaptionML=ENU=Outstanding Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 17  ;   ;Quantity (Base)     ;Decimal       ;CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 18  ;   ;Outstanding Qty. (Base);Decimal    ;CaptionML=ENU=Outstanding Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 19  ;   ;Break Bulk Quantity ;Decimal       ;OnLookup=BEGIN
                                                              IF "Item No." <> '' THEN
                                                                LookupBreakBulk;
                                                            END;

                                                   CaptionML=ENU=Break Bulk Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 20  ;   ;Break Bulk Qty. (Base);Decimal     ;OnLookup=BEGIN
                                                              IF "Item No." <> '' THEN
                                                                LookupBreakBulk;
                                                            END;

                                                   CaptionML=ENU=Break Bulk Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 21  ;   ;Quantity not Available;Decimal     ;CaptionML=ENU=Quantity not Available;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 22  ;   ;Qty. not Available (Base);Decimal  ;CaptionML=ENU=Qty. not Available (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 23  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 24  ;   ;Unit Price          ;Decimal       ;CaptionML=ENU=Unit Price }
    { 25  ;   ;Unit Amount         ;Decimal       ;CaptionML=ENU=Unit Amount }
    { 26  ;   ;Price               ;Decimal       ;CaptionML=ENU=Price }
    { 27  ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount }
    { 28  ;   ;Outstanding Price   ;Decimal       ;CaptionML=ENU=Outstanding Price }
    { 29  ;   ;Outstanding Amount  ;Decimal       ;CaptionML=ENU=Outstanding Amount }
    { 30  ;   ;Break Bulk Price    ;Decimal       ;CaptionML=ENU=Break Bulk Price }
    { 31  ;   ;Break Bulk Amount   ;Decimal       ;CaptionML=ENU=Break Bulk Amount }
    { 32  ;   ;Not Available Price ;Decimal       ;CaptionML=ENU=Not Available Price }
    { 33  ;   ;Not Available Amount;Decimal       ;CaptionML=ENU=Not Available Amount }
    { 34  ;   ;Available Quantity  ;Decimal       ;OnLookup=BEGIN
                                                              IF "Item No." <> '' THEN
                                                                LookupAvailable;
                                                            END;

                                                   CaptionML=ENU=Available Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 35  ;   ;Available Qty. (Base);Decimal      ;OnLookup=BEGIN
                                                              IF "Item No." <> '' THEN
                                                                LookupAvailable;
                                                            END;

                                                   CaptionML=ENU=Available Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 36  ;   ;Available Price     ;Decimal       ;CaptionML=ENU=Available Price }
    { 37  ;   ;Available Amount    ;Decimal       ;CaptionML=ENU=Available Amount }
    { 38  ;   ;Pick Quantity       ;Decimal       ;CaptionML=ENU=Pick Quantity;
                                                   DecimalPlaces=0:5 }
    { 39  ;   ;Pick Qty. (Base)    ;Decimal       ;CaptionML=ENU=Pick Qty. (Base);
                                                   DecimalPlaces=0:5 }
    { 40  ;   ;Pick Price          ;Decimal       ;CaptionML=ENU=Pick Price }
    { 41  ;   ;Pick Amount         ;Decimal       ;CaptionML=ENU=Pick Amount }
    { 42  ;   ;Shipment Quantity   ;Decimal       ;CaptionML=ENU=Shipment Quantity;
                                                   DecimalPlaces=0:5 }
    { 43  ;   ;Shipment Qty. (Base);Decimal       ;CaptionML=ENU=Shipment Qty. (Base);
                                                   DecimalPlaces=0:5 }
    { 44  ;   ;Shipment Price      ;Decimal       ;CaptionML=ENU=Shipment Price }
    { 45  ;   ;Shipment Amount     ;Decimal       ;CaptionML=ENU=Shipment Amount }
    { 46  ;   ;Picked Quantity     ;Decimal       ;CaptionML=ENU=Picked Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 47  ;   ;Picked Qty. (Base)  ;Decimal       ;CaptionML=ENU=Picked Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 48  ;   ;Picked Price        ;Decimal       ;CaptionML=ENU=Picked Price }
    { 49  ;   ;Picked Amount       ;Decimal       ;CaptionML=ENU=Picked Amount }
    { 50  ;   ;Source Outstanding Quantity;Decimal;CaptionML=ENU=Source Outstanding Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 51  ;   ;Source Outstanding Qty. (Base);Decimal;
                                                   CaptionML=ENU=Source Outstanding Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 52  ;   ;Source Outstanding Price;Decimal   ;CaptionML=ENU=Source Outstanding Price }
    { 53  ;   ;Source Outstanding Amount;Decimal  ;CaptionML=ENU=Source Outstanding Amount }
    { 54  ;   ;Pick or Picked Quantity;Decimal    ;CaptionML=ENU=Pick or Picked Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 55  ;   ;Pick or Picked Qty. (Base);Decimal ;CaptionML=ENU=Pick or Picked Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 56  ;   ;Pick or Picked Price;Decimal       ;CaptionML=ENU=Pick or Picked Price }
    { 57  ;   ;Pick or Picked Amount;Decimal      ;CaptionML=ENU=Pick or Picked Amount }
    { 58  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=ENU=Location Code }
    { 61  ;   ;Receive Quantity not Avail.;Decimal;CaptionML=ENU=Receive Quantity not Avail.;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 62  ;   ;Receive Qty. not Avail. (Base);Decimal;
                                                   CaptionML=ENU=Receive Qty. not Avail. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 63  ;   ;Receive Break Bulk Quantity;Decimal;OnLookup=BEGIN
                                                              IF "Item No." <> '' THEN
                                                                LookupReceiveBreakBulk;
                                                            END;

                                                   CaptionML=ENU=Receive Break Bulk Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 64  ;   ;Receive Break Bulk Qty. (Base);Decimal;
                                                   OnLookup=BEGIN
                                                              IF "Item No." <> '' THEN
                                                                LookupReceiveBreakBulk;
                                                            END;

                                                   CaptionML=ENU=Receive Break Bulk Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 65  ;   ;Receive Available Quantity;Decimal ;OnLookup=BEGIN
                                                              IF "Item No." <> '' THEN
                                                                LookupReceiveAvailable;
                                                            END;

                                                   CaptionML=ENU=Receive Available Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 66  ;   ;Receive Available Qty. (Base);Decimal;
                                                   OnLookup=BEGIN
                                                              IF "Item No." <> '' THEN
                                                                LookupReceiveAvailable;
                                                            END;

                                                   CaptionML=ENU=Receive Available Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 67  ;   ;Receive Not Available Price;Decimal;CaptionML=ENU=Receive Not Available Price }
    { 68  ;   ;Receive Not Available Amount;Decimal;
                                                   CaptionML=ENU=Receive Not Available Amount }
    { 69  ;   ;Receive Break Bulk Price;Decimal   ;CaptionML=ENU=Receive Break Bulk Price }
    { 70  ;   ;Receive Break Bulk Amount;Decimal  ;CaptionML=ENU=Receive Break Bulk Amount }
    { 71  ;   ;Receive Available Price;Decimal    ;CaptionML=ENU=Receive Available Price }
    { 72  ;   ;Receive Available Amount;Decimal   ;CaptionML=ENU=Receive Available Amount }
    { 73  ;   ;Receive Pick Quantity;Decimal      ;OnLookup=BEGIN
                                                              IF "Item No." <> '' THEN
                                                                LookupReceivePick;
                                                            END;

                                                   CaptionML=ENU=Receive Pick Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 74  ;   ;Receive Pick Qty. (Base);Decimal   ;OnLookup=BEGIN
                                                              IF "Item No." <> '' THEN
                                                                LookupReceivePick;
                                                            END;

                                                   CaptionML=ENU=Receive Pick Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 75  ;   ;Receive Pick Price  ;Decimal       ;CaptionML=ENU=Receive Pick Price }
    { 76  ;   ;Receive Pick Amount ;Decimal       ;CaptionML=ENU=Receive Pick Amount }
    { 81  ;   ;Other Quantity not Avail.;Decimal  ;CaptionML=ENU=Other Quantity not Avail.;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 82  ;   ;Other Qty. not Avail. (Base);Decimal;
                                                   CaptionML=ENU=Other Qty. not Avail. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 83  ;   ;Other Break Bulk Quantity;Decimal  ;OnLookup=BEGIN
                                                              IF "Item No." <> '' THEN
                                                                LookupOtherBreakBulk;
                                                            END;

                                                   CaptionML=ENU=Other Break Bulk Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 84  ;   ;Other Break Bulk Qty. (Base);Decimal;
                                                   OnLookup=BEGIN
                                                              IF "Item No." <> '' THEN
                                                                LookupOtherBreakBulk;
                                                            END;

                                                   CaptionML=ENU=Other Break Bulk Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 85  ;   ;Other Available Quantity;Decimal   ;OnLookup=BEGIN
                                                              IF "Item No." <> '' THEN
                                                                LookupOtherAvailable;
                                                            END;

                                                   CaptionML=ENU=Other Available Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 86  ;   ;Other Available Qty. (Base);Decimal;OnLookup=BEGIN
                                                              IF "Item No." <> '' THEN
                                                                LookupOtherAvailable;
                                                            END;

                                                   CaptionML=ENU=Other Available Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 87  ;   ;Other Not Available Price;Decimal  ;CaptionML=ENU=Other Not Available Price }
    { 88  ;   ;Other Not Available Amount;Decimal ;CaptionML=ENU=Other Not Available Amount }
    { 89  ;   ;Other Break Bulk Price;Decimal     ;CaptionML=ENU=Other Break Bulk Price }
    { 90  ;   ;Other Break Bulk Amount;Decimal    ;CaptionML=ENU=Other Break Bulk Amount }
    { 91  ;   ;Other Available Price;Decimal      ;CaptionML=ENU=Other Available Price }
    { 92  ;   ;Other Available Amount;Decimal     ;CaptionML=ENU=Other Available Amount }
    { 93  ;   ;Other Pick Quantity ;Decimal       ;OnLookup=BEGIN
                                                              IF "Item No." <> '' THEN
                                                                LookupOtherPick;
                                                            END;

                                                   CaptionML=ENU=Other Pick Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 94  ;   ;Other Pick Qty. (Base);Decimal     ;OnLookup=BEGIN
                                                              IF "Item No." <> '' THEN
                                                                LookupOtherPick;
                                                            END;

                                                   CaptionML=ENU=Other Pick Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 95  ;   ;Other Pick Price    ;Decimal       ;CaptionML=ENU=Other Pick Price }
    { 96  ;   ;Other Pick Amount   ;Decimal       ;CaptionML=ENU=Other Pick Amount }
    { 101 ;   ;Shipped Quantity    ;Decimal       ;CaptionML=ENU=Shipped Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 102 ;   ;Shipped Qty. (Base) ;Decimal       ;CaptionML=ENU=Shipped Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 103 ;   ;Shipped Price       ;Decimal       ;CaptionML=ENU=Shipped Price }
    { 104 ;   ;Shipped Amount      ;Decimal       ;CaptionML=ENU=Shipped Amount }
    { 105 ;   ;Total Available Quantity;Decimal   ;OnLookup=BEGIN
                                                              IF "Item No." <> '' THEN
                                                                LookupTotalAvailable;
                                                            END;

                                                   CaptionML=ENU=Total Available Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 106 ;   ;Total Available Qty. (Base);Decimal;OnLookup=BEGIN
                                                              IF "Item No." <> '' THEN
                                                                LookupTotalAvailable;
                                                            END;

                                                   CaptionML=ENU=Total Available Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 107 ;   ;Total Available Price;Decimal      ;CaptionML=ENU=Total Available Price }
    { 108 ;   ;Total Available Amount;Decimal     ;CaptionML=ENU=Total Available Amount }
    { 109 ;   ;Total Break Bulk Quantity;Decimal  ;OnLookup=BEGIN
                                                              IF "Item No." <> '' THEN
                                                                LookupTotalBreakBulk;
                                                            END;

                                                   CaptionML=ENU=Total Break Bulk Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 110 ;   ;Total Break Bulk Qty. (Base);Decimal;
                                                   OnLookup=BEGIN
                                                              IF "Item No." <> '' THEN
                                                                LookupTotalBreakBulk;
                                                            END;

                                                   CaptionML=ENU=Total Break Bulk Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 111 ;   ;Total Break Bulk Price;Decimal     ;CaptionML=ENU=Total Break Bulk Price }
    { 112 ;   ;Total Break Bulk Amount;Decimal    ;CaptionML=ENU=Total Break Bulk Amount }
    { 113 ;   ;Reserved Quantity   ;Decimal       ;CaptionML=ENU=Reserved Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 114 ;   ;Reserved Qty. (Base);Decimal       ;CaptionML=ENU=Reserved Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 115 ;   ;Reserved Price      ;Decimal       ;CaptionML=ENU=Reserved Price }
    { 116 ;   ;Reserved Amount     ;Decimal       ;CaptionML=ENU=Reserved Amount }
    { 117 ;   ;Inv. Reserved Quantity;Decimal     ;CaptionML=ENU=Inv. Reserved Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 118 ;   ;Inv. Reserved Qty. (Base);Decimal  ;CaptionML=ENU=Inv. Reserved Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 119 ;   ;Inv. Reserved Price ;Decimal       ;CaptionML=ENU=Inv. Reserved Price }
    { 120 ;   ;Inv. Reserved Amount;Decimal       ;CaptionML=ENU=Inv. Reserved Amount }
    { 121 ;   ;Other Reserved Quantity;Decimal    ;CaptionML=ENU=Other Reserved Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 122 ;   ;Other Reserved Qty. (Base);Decimal ;CaptionML=ENU=Other Reserved Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 123 ;   ;Other Reserved Price;Decimal       ;CaptionML=ENU=Other Reserved Price }
    { 124 ;   ;Other Reserved Amount;Decimal      ;CaptionML=ENU=Other Reserved Amount }
    { 125 ;   ;Outstanding Inv. Quantity;Decimal  ;CaptionML=ENU=Outstanding Inv. Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 126 ;   ;Outstanding Inv. Qty. (Base);Decimal;
                                                   CaptionML=ENU=Outstanding Inv. Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 127 ;   ;Outstanding Inv. Price;Decimal     ;CaptionML=ENU=Outstanding Inv. Price }
    { 128 ;   ;Outstanding Inv. Amount;Decimal    ;CaptionML=ENU=Outstanding Inv. Amount }
    { 131 ;   ;Gross Weight (Base) ;Decimal       ;CaptionML=ENU=Gross Weight (Base);
                                                   DecimalPlaces=0:5 }
    { 132 ;   ;Net Weight (Base)   ;Decimal       ;CaptionML=ENU=Net Weight (Base);
                                                   DecimalPlaces=0:5 }
    { 133 ;   ;Volume (Base)       ;Decimal       ;CaptionML=ENU=Volume (Base);
                                                   DecimalPlaces=0:5 }
    { 134 ;   ;Outstanding Gross Weight;Decimal   ;CaptionML=ENU=Outstanding Gross Weight;
                                                   DecimalPlaces=0:5 }
    { 135 ;   ;Outstanding Net Weight;Decimal     ;CaptionML=ENU=Outstanding Net Weight;
                                                   DecimalPlaces=0:5 }
    { 136 ;   ;Outstanding Volume  ;Decimal       ;CaptionML=ENU=Outstanding Volume;
                                                   DecimalPlaces=0:5 }
    { 137 ;   ;Available Gross Weight;Decimal     ;CaptionML=ENU=Available Gross Weight;
                                                   DecimalPlaces=0:5 }
    { 138 ;   ;Available Net Weight;Decimal       ;CaptionML=ENU=Available Net Weight;
                                                   DecimalPlaces=0:5 }
    { 139 ;   ;Available Volume    ;Decimal       ;CaptionML=ENU=Available Volume;
                                                   DecimalPlaces=0:5 }
    { 140 ;   ;Total Available Gross Weight;Decimal;
                                                   CaptionML=ENU=Total Available Gross Weight;
                                                   DecimalPlaces=0:5 }
    { 141 ;   ;Total Available Net Weight;Decimal ;CaptionML=ENU=Total Available Net Weight;
                                                   DecimalPlaces=0:5 }
    { 142 ;   ;Total Available Volume;Decimal     ;CaptionML=ENU=Total Available Volume;
                                                   DecimalPlaces=0:5 }
    { 143 ;   ;Outstanding No. of Lines;Integer   ;CaptionML=ENU=Outstanding No. of Lines }
    { 151 ;   ;Purchase Order Quantity;Decimal    ;OnLookup=BEGIN
                                                              LookupExpectedPurchaseLines;
                                                            END;

                                                   CaptionML=ENU=Purchase Order Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 152 ;   ;Purchase Order Qty. (Base);Decimal ;FieldClass=Normal;
                                                   OnLookup=BEGIN
                                                              LookupExpectedPurchaseLines;
                                                            END;

                                                   CaptionML=ENU=Purchase Order Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 153 ;   ;Transfer Order Quantity;Decimal    ;OnLookup=BEGIN
                                                              LookupExpectedTransferLines;
                                                            END;

                                                   CaptionML=ENU=Transfer Order Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 154 ;   ;Transfer Order Qty. (Base);Decimal ;FieldClass=Normal;
                                                   OnLookup=BEGIN
                                                              LookupExpectedTransferLines;
                                                            END;

                                                   CaptionML=ENU=Transfer Order Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 200 ;   ;ATO Quantity        ;Decimal       ;CaptionML=ENU=ATO Quantity;
                                                   DecimalPlaces=0:5 }
    { 201 ;   ;ATO Qty. (Base)     ;Decimal       ;CaptionML=ENU=ATO Qty. (Base);
                                                   DecimalPlaces=0:5 }
    { 202 ;   ;ATO Price           ;Decimal       ;CaptionML=ENU=ATO Price }
    { 203 ;   ;ATO Amount          ;Decimal       ;CaptionML=ENU=ATO Amount }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Item No.,Variant Code,Unit of Measure Code }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      RFSetup@1240030001 : Record 14002801;
      Text001@1240030000 : TextConst 'ENU=Wrong Type %1.';

    PROCEDURE UpdatePricesAndAmounts@1240030000();
    BEGIN
      Price := ROUND("Unit Price" * Quantity);
      Amount := ROUND("Unit Amount" * Quantity);
      "Outstanding Price" := ROUND("Unit Price" * "Outstanding Quantity");
      "Outstanding Amount" := ROUND("Unit Amount" * "Outstanding Quantity");
      "Break Bulk Price" := ROUND("Unit Price" * "Break Bulk Quantity");
      "Break Bulk Amount" := ROUND("Unit Amount" * "Break Bulk Quantity");
      "Not Available Price" := ROUND("Unit Price" * "Quantity not Available");
      "Not Available Amount" := ROUND("Unit Amount" * "Quantity not Available");
      "Available Price" := ROUND("Unit Price" * "Available Quantity");
      "Available Amount" := ROUND("Unit Amount" * "Available Quantity");
      "Pick Price" := ROUND("Pick Quantity" * "Unit Price");
      "Pick Amount" := ROUND("Pick Quantity" * "Unit Amount");
      "Shipment Price" := ROUND("Shipment Quantity" * "Unit Price");
      "Shipment Amount" := ROUND("Shipment Quantity" * "Unit Amount");
      "Picked Price" := ROUND("Picked Quantity" * "Unit Price");
      "Picked Amount" := ROUND("Picked Quantity" * "Unit Amount");
      "Pick or Picked Price" := ROUND("Pick or Picked Quantity" * "Unit Price");
      "Pick or Picked Amount" := ROUND("Pick or Picked Quantity" * "Unit Amount");
      "Source Outstanding Price" := ROUND("Source Outstanding Quantity" * "Unit Price");
      "Source Outstanding Amount" := ROUND("Source Outstanding Quantity" * "Unit Amount");
      "Receive Not Available Price" := ROUND("Receive Quantity not Avail." * "Unit Price");
      "Receive Not Available Amount" := ROUND("Receive Quantity not Avail." * "Unit Amount");
      "Receive Break Bulk Price" := ROUND("Receive Break Bulk Quantity" * "Unit Price");
      "Receive Break Bulk Amount" := ROUND("Receive Break Bulk Quantity" * "Unit Amount");
      "Receive Available Price" := ROUND("Receive Available Quantity" * "Unit Price");
      "Receive Available Amount" := ROUND("Receive Available Quantity" * "Unit Amount");
      "Receive Pick Price" := ROUND("Receive Pick Quantity" * "Unit Price");
      "Receive Pick Amount" := ROUND("Receive Pick Quantity" * "Unit Amount");
      "Other Not Available Price" := ROUND("Other Quantity not Avail." * "Unit Price");
      "Other Not Available Amount" := ROUND("Other Quantity not Avail." * "Unit Amount");
      "Other Break Bulk Price" := ROUND("Other Break Bulk Quantity" * "Unit Price");
      "Other Break Bulk Amount" := ROUND("Other Break Bulk Quantity" * "Unit Amount");
      "Other Available Price" := ROUND("Other Available Quantity" * "Unit Price");
      "Other Available Amount" := ROUND("Other Available Quantity" * "Unit Amount");
      "Other Pick Price" := ROUND("Other Pick Quantity" * "Unit Price");
      "Other Pick Amount" := ROUND("Other Pick Quantity" * "Unit Amount");
      "Shipped Price" := ROUND("Shipped Quantity" * "Unit Price");
      "Shipped Amount" := ROUND("Shipped Quantity" * "Unit Amount");
      "Total Available Price" := ROUND("Unit Price" * "Total Available Quantity");
      "Total Available Amount" := ROUND("Unit Amount" * "Total Available Quantity");
      "Total Break Bulk Price" := ROUND("Unit Price" * "Total Break Bulk Quantity");
      "Total Break Bulk Amount" := ROUND("Unit Amount" * "Total Break Bulk Quantity");
      "Reserved Price" := ROUND("Unit Price" * "Reserved Quantity");
      "Reserved Amount" := ROUND("Unit Amount" * "Reserved Quantity");
      "Inv. Reserved Price" := ROUND("Unit Price" * "Inv. Reserved Quantity");
      "Inv. Reserved Amount" := ROUND("Unit Amount" * "Inv. Reserved Quantity");
      "Other Reserved Price" := ROUND("Unit Price" * "Other Reserved Quantity");
      "Other Reserved Amount" := ROUND("Unit Amount" * "Other Reserved Quantity");
      "Outstanding Inv. Price" := ROUND("Unit Price" * "Outstanding Inv. Quantity");
      "Outstanding Inv. Amount" := ROUND("Unit Amount" * "Outstanding Inv. Quantity");
      "ATO Price" := ROUND("Unit Price" * "ATO Quantity");
      "ATO Amount" := ROUND("Unit Amount" * "ATO Quantity");

      "Outstanding Gross Weight" := "Gross Weight (Base)" * "Outstanding Qty. (Base)";
      "Outstanding Net Weight" := "Net Weight (Base)" * "Outstanding Qty. (Base)";
      "Outstanding Volume" := "Volume (Base)" * "Outstanding Qty. (Base)";
      "Available Gross Weight" := "Gross Weight (Base)" * "Available Qty. (Base)";
      "Available Net Weight" := "Net Weight (Base)" * "Available Qty. (Base)";
      "Available Volume" := "Volume (Base)" * "Available Qty. (Base)";
      "Total Available Gross Weight" := "Gross Weight (Base)" * "Total Available Qty. (Base)";
      "Total Available Net Weight" := "Net Weight (Base)" * "Total Available Qty. (Base)";
      "Total Available Volume" := "Volume (Base)" * "Total Available Qty. (Base)";
    END;

    PROCEDURE UpdateQtyFromQtyBase@1240030001();
    BEGIN
      IF "Qty. per Unit of Measure" <> 0 THEN BEGIN
        Quantity :=
          ROUND("Quantity (Base)" / "Qty. per Unit of Measure",0.00001);
        "Outstanding Quantity" :=
          ROUND("Outstanding Qty. (Base)" / "Qty. per Unit of Measure",0.00001);
        "Pick Quantity" :=
          ROUND("Pick Qty. (Base)" / "Qty. per Unit of Measure",0.00001);
        "Shipment Quantity" :=
          ROUND("Shipment Qty. (Base)" / "Qty. per Unit of Measure",0.00001);
        "Picked Quantity" :=
          ROUND("Picked Qty. (Base)" / "Qty. per Unit of Measure",0.00001);
        "Shipped Quantity" :=
          ROUND("Shipped Qty. (Base)" / "Qty. per Unit of Measure",0.00001);
        "Quantity not Available" :=
          ROUND("Qty. not Available (Base)" / "Qty. per Unit of Measure",0.00001);
        "Break Bulk Quantity" :=
          ROUND("Break Bulk Qty. (Base)" / "Qty. per Unit of Measure",0.00001);
        "Available Quantity" :=
          ROUND("Available Qty. (Base)" / "Qty. per Unit of Measure",0.00001);
        "Pick or Picked Quantity" :=
          ROUND("Pick or Picked Qty. (Base)" / "Qty. per Unit of Measure",0.00001);
        "Receive Quantity not Avail." :=
          ROUND("Receive Qty. not Avail. (Base)" / "Qty. per Unit of Measure",0.00001);
        "Receive Break Bulk Quantity" :=
          ROUND("Receive Break Bulk Qty. (Base)" / "Qty. per Unit of Measure",0.00001);
        "Receive Available Quantity" :=
          ROUND("Receive Available Qty. (Base)" / "Qty. per Unit of Measure",0.00001);
        "Receive Pick Quantity" :=
          ROUND("Receive Pick Qty. (Base)" / "Qty. per Unit of Measure",0.00001);
        "Other Quantity not Avail." :=
          ROUND("Other Qty. not Avail. (Base)" / "Qty. per Unit of Measure",0.00001);
        "Other Break Bulk Quantity" :=
          ROUND("Other Break Bulk Quantity" / "Qty. per Unit of Measure",0.00001);
        "Other Available Quantity" :=
          ROUND("Other Available Qty. (Base)" / "Qty. per Unit of Measure",0.00001);
        "Other Pick Quantity" :=
          ROUND("Other Pick Qty. (Base)" / "Qty. per Unit of Measure",0.00001);
        "Total Available Quantity" :=
          ROUND("Total Available Qty. (Base)" / "Qty. per Unit of Measure",0.00001);
        "Total Break Bulk Quantity" :=
          ROUND("Total Break Bulk Qty. (Base)" / "Qty. per Unit of Measure",0.00001);
        "Reserved Quantity" :=
          ROUND("Reserved Qty. (Base)" / "Qty. per Unit of Measure",0.00001);
        "Inv. Reserved Quantity" :=
          ROUND("Inv. Reserved Qty. (Base)" / "Qty. per Unit of Measure",0.00001);
        "Other Reserved Quantity" :=
          ROUND("Other Reserved Qty. (Base)" / "Qty. per Unit of Measure",0.00001);
        "Outstanding Inv. Quantity" :=
          ROUND("Outstanding Inv. Qty. (Base)" / "Qty. per Unit of Measure",0.00001);
        "ATO Quantity" :=
          ROUND("ATO Qty. (Base)" / "Qty. per Unit of Measure",0.00001);
      END ELSE BEGIN
        Quantity := "Quantity (Base)";
        "Outstanding Quantity" := "Outstanding Qty. (Base)";
        "Pick Quantity" := "Pick Qty. (Base)";
        "Shipment Quantity" := "Shipment Qty. (Base)";
        "Picked Quantity" := "Picked Qty. (Base)";
        "Shipped Quantity" := "Shipped Qty. (Base)";
        "Quantity not Available" := "Qty. not Available (Base)";
        "Break Bulk Quantity" := "Break Bulk Qty. (Base)";
        "Available Quantity" := "Available Qty. (Base)";
        "Pick or Picked Quantity" := "Pick or Picked Qty. (Base)";
        "Receive Quantity not Avail." := "Receive Qty. not Avail. (Base)";
        "Receive Break Bulk Quantity" := "Receive Break Bulk Qty. (Base)";
        "Receive Available Quantity" := "Receive Available Qty. (Base)";
        "Receive Pick Quantity" := "Receive Pick Qty. (Base)";
        "Other Quantity not Avail." := "Other Qty. not Avail. (Base)";
        "Other Break Bulk Quantity" := "Other Break Bulk Quantity";
        "Other Available Quantity" := "Other Available Qty. (Base)";
        "Other Pick Quantity" := "Other Pick Qty. (Base)";
        "Total Available Quantity" := "Total Available Qty. (Base)";
        "Total Break Bulk Quantity" := "Total Break Bulk Qty. (Base)";
        "Reserved Quantity" := "Reserved Qty. (Base)";
        "Inv. Reserved Quantity" := "Inv. Reserved Qty. (Base)";
        "Other Reserved Quantity" := "Other Reserved Qty. (Base)";
        "Outstanding Inv. Quantity" := "Outstanding Inv. Qty. (Base)";
        "ATO Quantity" := "ATO Qty. (Base)";
      END;
    END;

    PROCEDURE AddRFStatisticsEntry@1240030002(AddRec@1240030000 : Record 14002804);
    BEGIN
      Quantity := Quantity + AddRec.Quantity;
      "Outstanding Quantity" := "Outstanding Quantity" + AddRec."Outstanding Quantity";
      "Quantity (Base)" := "Quantity (Base)" + AddRec."Quantity (Base)";
      "Outstanding Qty. (Base)" := "Outstanding Qty. (Base)" + AddRec."Outstanding Qty. (Base)";
      "Break Bulk Quantity" := "Break Bulk Quantity" + AddRec."Break Bulk Quantity";
      "Break Bulk Qty. (Base)" := "Break Bulk Qty. (Base)" + AddRec."Break Bulk Qty. (Base)";
      "Quantity not Available" := "Quantity not Available" + AddRec."Quantity not Available";
      "Qty. not Available (Base)" := "Qty. not Available (Base)" + AddRec."Qty. not Available (Base)";
      Price := Price + AddRec.Price;
      Amount := Amount + AddRec.Amount;
      "Outstanding Price" := "Outstanding Price" + AddRec."Outstanding Price";
      "Outstanding Amount" := "Outstanding Amount" + AddRec."Outstanding Amount";
      "Break Bulk Price" := "Break Bulk Price" + AddRec."Break Bulk Price";
      "Break Bulk Amount" := "Break Bulk Amount" + AddRec."Break Bulk Amount";
      "Not Available Price" := "Not Available Price" + AddRec."Not Available Price";
      "Not Available Amount" := "Not Available Amount" + AddRec."Not Available Amount";
      "Available Quantity" := "Available Quantity" + AddRec."Available Quantity";
      "Available Qty. (Base)" := "Available Qty. (Base)" + AddRec."Available Qty. (Base)";
      "Available Price" := "Available Price" + AddRec."Available Price";
      "Available Amount" := "Available Amount" + AddRec."Available Amount";
      "Pick Quantity" := "Pick Quantity" + AddRec."Pick Quantity";
      "Pick Qty. (Base)" := "Pick Qty. (Base)" + AddRec."Pick Qty. (Base)";
      "Pick Price" := "Pick Price" + AddRec."Pick Price";
      "Pick Amount" := "Pick Amount" + AddRec."Pick Amount";
      "Shipment Quantity" := "Shipment Quantity" + AddRec."Shipment Quantity";
      "Shipment Qty. (Base)" := "Shipment Qty. (Base)" + AddRec."Shipment Qty. (Base)";
      "Shipment Price" := "Shipment Price" + AddRec."Shipment Price";
      "Shipment Amount" := "Shipment Amount" + AddRec."Shipment Amount";
      "Picked Quantity" := "Picked Quantity" + AddRec."Picked Quantity";
      "Picked Qty. (Base)" := "Picked Qty. (Base)" + AddRec."Picked Qty. (Base)";
      "Picked Price" := "Picked Price" + AddRec."Picked Price";
      "Picked Amount" := "Picked Amount" + AddRec."Picked Amount";
      "Pick or Picked Quantity" := "Pick or Picked Quantity" + AddRec."Pick or Picked Quantity";
      "Pick or Picked Qty. (Base)" := "Pick or Picked Qty. (Base)" + AddRec."Pick or Picked Qty. (Base)";
      "Pick or Picked Price" := "Pick or Picked Price" + AddRec."Pick or Picked Price";
      "Pick or Picked Amount" := "Pick or Picked Amount" + AddRec."Pick or Picked Amount";
      "Source Outstanding Quantity" := "Source Outstanding Quantity" + AddRec."Source Outstanding Quantity";
      "Source Outstanding Qty. (Base)" := "Source Outstanding Qty. (Base)" + AddRec."Source Outstanding Qty. (Base)";
      "Source Outstanding Price" := "Source Outstanding Price" + AddRec."Source Outstanding Price";
      "Source Outstanding Amount" := "Source Outstanding Amount" + AddRec."Source Outstanding Amount";
      "Receive Quantity not Avail." := "Receive Quantity not Avail." + AddRec."Receive Quantity not Avail.";
      "Receive Qty. not Avail. (Base)" := "Receive Qty. not Avail. (Base)" + AddRec."Receive Qty. not Avail. (Base)";
      "Receive Break Bulk Quantity" := "Receive Break Bulk Quantity" + AddRec."Receive Break Bulk Quantity";
      "Receive Break Bulk Qty. (Base)" := "Receive Break Bulk Qty. (Base)" + AddRec."Receive Break Bulk Qty. (Base)";
      "Receive Available Quantity" := "Receive Available Quantity" + AddRec."Receive Available Quantity";
      "Receive Available Qty. (Base)" := "Receive Available Qty. (Base)" + AddRec."Receive Available Qty. (Base)";
      "Receive Not Available Price" := "Receive Not Available Price" + AddRec."Receive Not Available Price";
      "Receive Not Available Amount" := "Receive Not Available Amount" + AddRec."Receive Not Available Amount";
      "Receive Break Bulk Price" := "Receive Break Bulk Price" + AddRec."Receive Break Bulk Price";
      "Receive Break Bulk Amount" := "Receive Break Bulk Amount" + AddRec."Receive Break Bulk Amount";
      "Receive Available Price" := "Receive Available Price" + AddRec."Receive Available Price";
      "Receive Available Amount" := "Receive Available Amount" + AddRec."Receive Available Amount";
      "Receive Pick Quantity" := "Receive Pick Quantity" + AddRec."Receive Pick Quantity";
      "Receive Pick Qty. (Base)" := "Receive Pick Qty. (Base)" + AddRec."Receive Pick Qty. (Base)";
      "Receive Pick Price" := "Receive Pick Price" + AddRec."Receive Pick Price";
      "Receive Pick Amount" := "Receive Pick Amount" + AddRec."Receive Pick Amount";
      "Other Quantity not Avail." := "Other Quantity not Avail." + AddRec."Other Quantity not Avail.";
      "Other Qty. not Avail. (Base)" := "Other Qty. not Avail. (Base)" + AddRec."Other Qty. not Avail. (Base)";
      "Other Break Bulk Quantity" := "Other Break Bulk Quantity" + AddRec."Other Break Bulk Quantity";
      "Other Break Bulk Qty. (Base)" := "Other Break Bulk Qty. (Base)" + AddRec."Other Break Bulk Qty. (Base)";
      "Other Available Quantity" := "Other Available Quantity" + AddRec."Other Available Quantity";
      "Other Available Qty. (Base)" := "Other Available Qty. (Base)" + AddRec."Other Available Qty. (Base)";
      "Other Not Available Price" := "Other Not Available Price" + AddRec."Other Not Available Price";
      "Other Not Available Amount" := "Other Not Available Amount" + AddRec."Other Not Available Amount";
      "Other Break Bulk Price" := "Other Break Bulk Price" + AddRec."Other Break Bulk Price";
      "Other Break Bulk Amount" := "Other Break Bulk Amount" + AddRec."Other Break Bulk Amount";
      "Other Available Price" := "Other Available Price" + AddRec."Other Available Price";
      "Other Available Amount" := "Other Available Amount" + AddRec."Other Available Amount";
      "Other Pick Quantity" := "Other Pick Quantity" + AddRec."Other Pick Quantity";
      "Other Pick Qty. (Base)" := "Other Pick Qty. (Base)" + AddRec."Other Pick Qty. (Base)";
      "Other Pick Price" := "Other Pick Price" + AddRec."Other Pick Price";
      "Other Pick Amount" := "Other Pick Amount" + AddRec."Other Pick Amount";
      "Shipped Quantity" := "Shipped Quantity" + AddRec."Shipped Quantity";
      "Shipped Qty. (Base)" := "Shipped Qty. (Base)" + AddRec."Shipped Qty. (Base)";
      "Shipped Price" := "Shipped Price" + AddRec."Shipped Price";
      "Shipped Amount" := "Shipped Amount" + AddRec."Shipped Amount";
      "Total Available Quantity" := "Total Available Quantity" + AddRec."Total Available Quantity";
      "Total Available Qty. (Base)" := "Total Available Qty. (Base)" + AddRec."Total Available Qty. (Base)";
      "Total Available Price" := "Total Available Price" + AddRec."Total Available Price";
      "Total Available Amount" := "Total Available Amount" + AddRec."Total Available Amount";
      "Total Break Bulk Quantity" := "Total Break Bulk Quantity" + AddRec."Total Break Bulk Quantity";
      "Total Break Bulk Qty. (Base)" := "Total Break Bulk Qty. (Base)" + AddRec."Total Break Bulk Qty. (Base)";
      "Total Break Bulk Price" := "Total Break Bulk Price" + AddRec."Total Break Bulk Price";
      "Total Break Bulk Amount" := "Total Break Bulk Amount" + AddRec."Total Break Bulk Amount";
      "Reserved Quantity" := "Reserved Quantity" + AddRec."Reserved Quantity";
      "Reserved Qty. (Base)" := "Reserved Qty. (Base)" + AddRec."Reserved Qty. (Base)";
      "Reserved Price" := "Reserved Price" + AddRec."Reserved Price";
      "Reserved Amount" := "Reserved Amount" + AddRec."Reserved Amount";
      "Inv. Reserved Quantity" := "Inv. Reserved Quantity" + AddRec."Inv. Reserved Quantity";
      "Inv. Reserved Qty. (Base)" := "Inv. Reserved Qty. (Base)" + AddRec."Inv. Reserved Qty. (Base)";
      "Inv. Reserved Price" := "Inv. Reserved Price" + AddRec."Inv. Reserved Price";
      "Inv. Reserved Amount" := "Inv. Reserved Amount" + AddRec."Inv. Reserved Amount";
      "Other Reserved Quantity" := "Other Reserved Quantity" + AddRec."Other Reserved Quantity";
      "Other Reserved Qty. (Base)" := "Other Reserved Qty. (Base)" + AddRec."Other Reserved Qty. (Base)";
      "Other Reserved Price" := "Other Reserved Price" + AddRec."Other Reserved Price";
      "Other Reserved Amount" := "Other Reserved Amount" + AddRec."Other Reserved Amount";
      "Outstanding Inv. Quantity" := "Outstanding Inv. Quantity" + AddRec."Outstanding Inv. Quantity";
      "Outstanding Inv. Qty. (Base)" := "Outstanding Inv. Qty. (Base)" + AddRec."Outstanding Inv. Qty. (Base)";
      "Outstanding Inv. Price" := "Outstanding Inv. Price" + AddRec."Outstanding Inv. Price";
      "Outstanding Inv. Amount" := "Outstanding Inv. Amount" + AddRec."Outstanding Inv. Amount";
      "ATO Quantity" := "ATO Quantity" + AddRec."ATO Quantity";
      "ATO Qty. (Base)" := "ATO Qty. (Base)" + AddRec."ATO Qty. (Base)";
      "ATO Price" := "ATO Price" + AddRec."ATO Price";
      "ATO Amount" := "ATO Amount" + AddRec."ATO Amount";

      "Outstanding Gross Weight" := "Outstanding Gross Weight" + AddRec."Outstanding Gross Weight";
      "Outstanding Net Weight" := "Outstanding Net Weight" + AddRec."Outstanding Net Weight";
      "Outstanding Volume" := "Outstanding Volume" + AddRec."Outstanding Volume";
      "Available Gross Weight" := "Available Gross Weight" + AddRec."Available Gross Weight";
      "Available Net Weight" := "Available Net Weight" + AddRec."Available Net Weight";
      "Available Volume" := "Available Volume" + AddRec."Available Volume";
      "Total Available Gross Weight" :=
        "Total Available Gross Weight" + AddRec."Total Available Gross Weight";
      "Total Available Net Weight" := "Total Available Net Weight" + AddRec."Total Available Net Weight";
      "Total Available Volume" := "Total Available Volume" + AddRec."Total Available Volume";
      "Outstanding No. of Lines" := "Outstanding No. of Lines" + AddRec."Outstanding No. of Lines";
    END;

    PROCEDURE LookupAvailable@1240030003();
    BEGIN
      RFSetup.CalculateBinTypeFilters;

      LookupBinContent(FALSE,FALSE,RFSetup.GetPickBinTypeFilter);
    END;

    PROCEDURE LookupBreakBulk@1240030008();
    BEGIN
      RFSetup.CalculateBinTypeFilters;

      LookupBinContent(TRUE,FALSE,RFSetup.GetPickBinTypeFilter);
    END;

    PROCEDURE LookupReceiveAvailable@1240030006();
    BEGIN
      RFSetup.CalculateBinTypeFilters;

      LookupBinContent(FALSE,FALSE,RFSetup.GetReceiveBinTypeFilter);
    END;

    PROCEDURE LookupReceiveBreakBulk@1240030009();
    BEGIN
      RFSetup.CalculateBinTypeFilters;

      LookupBinContent(TRUE,FALSE,RFSetup.GetReceiveBinTypeFilter);
    END;

    PROCEDURE LookupReceivePick@1240030005();
    BEGIN
      RFSetup.CalculateBinTypeFilters;

      LookupBinContent(FALSE,TRUE,RFSetup.GetReceiveBinTypeFilter);
    END;

    PROCEDURE LookupOtherAvailable@1240030007();
    BEGIN
      RFSetup.CalculateBinTypeFilters;

      LookupBinContent(FALSE,FALSE,RFSetup.GetOtherBinTypeFilter);
    END;

    PROCEDURE LookupOtherBreakBulk@1240030010();
    BEGIN
      RFSetup.CalculateBinTypeFilters;

      LookupBinContent(TRUE,FALSE,RFSetup.GetOtherBinTypeFilter);
    END;

    PROCEDURE LookupOtherPick@1240030011();
    BEGIN
      RFSetup.CalculateBinTypeFilters;

      LookupBinContent(FALSE,TRUE,RFSetup.GetOtherBinTypeFilter);
    END;

    PROCEDURE LookupTotalAvailable@1240030013();
    BEGIN
      RFSetup.CalculateBinTypeFilters;

      LookupBinContent(FALSE,FALSE,RFSetup.GetAllBinTypeFilter);
    END;

    PROCEDURE LookupTotalBreakBulk@1240030012();
    BEGIN
      RFSetup.CalculateBinTypeFilters;

      LookupBinContent(TRUE,FALSE,RFSetup.GetAllBinTypeFilter);
    END;

    LOCAL PROCEDURE LookupBinContent@1240030004(BreakBulk@1240030000 : Boolean;OnlyWithPick@1240030003 : Boolean;BinTypeFilter@1240030001 : Text[250]);
    VAR
      BinContent@1240030002 : Record 7302;
      Location@1240020000 : Record 14;
    BEGIN
      Location.GET("Location Code");

      BinContent.RESET;
      BinContent.SETRANGE("Location Code","Location Code");
      BinContent.SETRANGE("Item No.","Item No.");
      BinContent.SETRANGE("Variant Code","Variant Code");
      IF BreakBulk THEN
        BinContent.SETFILTER("Unit of Measure Code",'<>%1',"Unit of Measure Code");
      IF Location."Directed Put-away and Pick" THEN
        BinContent.SETFILTER("Bin Type Code",BinTypeFilter);
      IF OnlyWithPick THEN
        BinContent.SETFILTER("Pick Qty.",'<>0');
      PAGE.RUNMODAL(0,BinContent);
    END;

    PROCEDURE LookupDocumentLines@1240030014(VAR CurrentWarehouseRequest@1240030000 : Record 5765;LineDateFilter@1240030004 : Text[250]);
    VAR
      SalesLine@1240030003 : Record 37;
      PurchLine@1240030013 : Record 39;
      TransferLine@1240030014 : Record 5741;
      LineType@1240030002 : ARRAY [30] OF Text[250];
      LineFilter@1240030001 : ARRAY [30] OF Text[1000];
      StrMenuText@1240030009 : Text[1000];
      LastSourceType@1240030016 : Integer;
      LastSourceSubtype@1240030017 : Integer;
      LastSourceNo@1240030006 : Code[20];
      MissedDocuments@1240030007 : Boolean;
      DocumentTypes@1240030008 : Integer;
      SelctedDocumentType@1240030010 : Integer;
      i@1240030011 : Integer;
      AddSourceNo@1240030018 : Boolean;
    BEGIN
      LastSourceNo := '';
      CurrentWarehouseRequest.RESET;
      IF CurrentWarehouseRequest.FIND('-') THEN
        REPEAT
          AddSourceNo := FALSE;
          CASE CurrentWarehouseRequest."Source Type" OF
            DATABASE::"Sales Line":
              BEGIN
                SalesLine.RESET;
                SalesLine.SETRANGE("Document Type",CurrentWarehouseRequest."Source Subtype");
                SalesLine.SETRANGE("Document No.",CurrentWarehouseRequest."Source No.");
                SalesLine.SETRANGE(Type,SalesLine.Type::Item);
                SalesLine.SETRANGE("No.","Item No.");
                SalesLine.SETRANGE("Variant Code","Variant Code");
                SalesLine.SETRANGE("Unit of Measure Code","Unit of Measure Code");
                SalesLine.SETRANGE("Location Code",CurrentWarehouseRequest."Location Code");
                IF LineDateFilter <> '' THEN
                  SalesLine.SETFILTER("Shipment Date",LineDateFilter);
                IF SalesLine.FIND('-') THEN
                  AddSourceNo := TRUE;
              END;
            DATABASE::"Purchase Line":
              BEGIN
                PurchLine.RESET;
                PurchLine.SETRANGE("Document Type",CurrentWarehouseRequest."Source Subtype");
                PurchLine.SETRANGE("Document No.",CurrentWarehouseRequest."Source No.");
                PurchLine.SETRANGE(Type,PurchLine.Type::Item);
                PurchLine.SETRANGE("No.","Item No.");
                PurchLine.SETRANGE("Variant Code","Variant Code");
                PurchLine.SETRANGE("Unit of Measure Code","Unit of Measure Code");
                PurchLine.SETRANGE("Location Code",CurrentWarehouseRequest."Location Code");
                IF LineDateFilter <> '' THEN
                  PurchLine.SETFILTER("Expected Receipt Date",LineDateFilter);
                IF PurchLine.FIND('-') THEN
                  AddSourceNo := TRUE;
              END;
            DATABASE::"Transfer Line":
              BEGIN
                TransferLine.RESET;
                TransferLine.SETRANGE("Document No.",CurrentWarehouseRequest."Source No.");
                TransferLine.SETRANGE("Item No.","Item No.");
                TransferLine.SETRANGE("Variant Code","Variant Code");
                TransferLine.SETRANGE("Unit of Measure Code","Unit of Measure Code");
                TransferLine.SETRANGE("Transfer-from Code",CurrentWarehouseRequest."Location Code");
                IF LineDateFilter <> '' THEN
                  TransferLine.SETFILTER("Shipment Date",LineDateFilter);
                IF TransferLine.FIND('-') THEN
                  AddSourceNo := TRUE;
              END;
            ELSE
              ERROR(Text001,CurrentWarehouseRequest."Source Document");
          END;

          IF AddSourceNo THEN BEGIN
            LineType[CurrentWarehouseRequest."Source Document"] :=
              FORMAT(CurrentWarehouseRequest."Source Document");

            IF (LastSourceType <> CurrentWarehouseRequest."Source Type") OR
               (LastSourceSubtype <> CurrentWarehouseRequest."Source Subtype") OR
               (LastSourceNo <> CurrentWarehouseRequest."Source No.")
            THEN BEGIN
              IF STRLEN(CurrentWarehouseRequest."Source No.") +
                 STRLEN(LineFilter[CurrentWarehouseRequest."Source Document"]) + 1 <=
                 MAXSTRLEN(LineFilter[CurrentWarehouseRequest."Source Document"])
              THEN BEGIN
                IF LineFilter[CurrentWarehouseRequest."Source Document"] = '' THEN
                  LineFilter[CurrentWarehouseRequest."Source Document"] :=
                    CurrentWarehouseRequest."Source No."
                ELSE
                  LineFilter[CurrentWarehouseRequest."Source Document"] :=
                    LineFilter[CurrentWarehouseRequest."Source Document"] + '|' +
                    CurrentWarehouseRequest."Source No.";
              END ELSE
                MissedDocuments := TRUE;

              LastSourceType := CurrentWarehouseRequest."Source Type";
              LastSourceSubtype := CurrentWarehouseRequest."Source Subtype";
              LastSourceNo := CurrentWarehouseRequest."Source No.";
            END;
          END;
        UNTIL CurrentWarehouseRequest.NEXT = 0;

      DocumentTypes := 0;
      FOR i := 1 TO ARRAYLEN(LineFilter) DO BEGIN
        IF LineType[i] <> '' THEN BEGIN
          DocumentTypes := DocumentTypes + 1;
          IF DocumentTypes = 1 THEN
            SelctedDocumentType := i;
        END;

        IF i = 1 THEN
          StrMenuText := LineType[i]
        ELSE
          StrMenuText := StrMenuText + ',' + LineType[i];
      END;

      IF DocumentTypes > 1 THEN BEGIN
        SelctedDocumentType := STRMENU(StrMenuText,SelctedDocumentType);
        IF SelctedDocumentType = 0 THEN
          EXIT;
      END;

      CASE SelctedDocumentType OF
        1,4:
          BEGIN
            SalesLine.SETFILTER("Document No.",LineFilter[SelctedDocumentType]);
            PAGE.RUNMODAL(0,SalesLine);
          END;
        5,8:
          BEGIN
            PurchLine.SETFILTER("Document No.",LineFilter[SelctedDocumentType]);
            PAGE.RUNMODAL(0,PurchLine);
          END;
        9,10:
          BEGIN
            TransferLine.SETFILTER("Document No.",LineFilter[SelctedDocumentType]);
            PAGE.RUNMODAL(0,TransferLine);
          END;
        ELSE
          ERROR(Text001,SelctedDocumentType);
      END;
    END;

    PROCEDURE UpdateExpectedValues@1240030015();
    VAR
      PurchLine@1240030000 : Record 39;
      TransferLine@1240030001 : Record 5741;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETCURRENTKEY("Document Type",Type,"No.","Variant Code","Drop Shipment","Location Code");
      PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
      PurchLine.SETRANGE(Type,PurchLine.Type::Item);
      PurchLine.SETRANGE("No.","Item No.");
      PurchLine.SETRANGE("Variant Code","Variant Code");
      PurchLine.SETRANGE("Location Code","Location Code");
      PurchLine.SETRANGE("Drop Shipment",FALSE);
      PurchLine.CALCSUMS("Outstanding Qty. (Base)");
      "Purchase Order Qty. (Base)" := PurchLine."Outstanding Qty. (Base)";

      TransferLine.RESET;
      TransferLine.SETCURRENTKEY(
        "Transfer-to Code",Status,"Derived From Line No.","Item No.","Variant Code");
      TransferLine.SETRANGE("Item No.","Item No.");
      TransferLine.SETRANGE("Variant Code","Variant Code");
      TransferLine.SETRANGE("Transfer-to Code","Location Code");
      TransferLine.SETRANGE("Derived From Line No.",0);
      TransferLine.CALCSUMS("Qty. in Transit (Base)");
      "Transfer Order Qty. (Base)" := TransferLine."Qty. in Transit (Base)";

      IF "Qty. per Unit of Measure" <> 0 THEN BEGIN
        "Purchase Order Quantity" :=
          ROUND("Purchase Order Qty. (Base)" / "Qty. per Unit of Measure",0.00001);
        "Transfer Order Quantity" :=
          ROUND("Transfer Order Qty. (Base)" / "Qty. per Unit of Measure",0.00001);
      END ELSE BEGIN
        "Purchase Order Quantity" := "Purchase Order Qty. (Base)";
        "Transfer Order Quantity" := "Transfer Order Qty. (Base)";
      END;
    END;

    PROCEDURE LookupExpectedPurchaseLines@1240030016();
    VAR
      PurchLine@1240030001 : Record 39;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETCURRENTKEY("Document Type",Type,"No.","Variant Code","Drop Shipment","Location Code");
      PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
      PurchLine.SETRANGE(Type,PurchLine.Type::Item);
      PurchLine.SETRANGE("No.","Item No.");
      PurchLine.SETRANGE("Variant Code","Variant Code");
      PurchLine.SETRANGE("Location Code","Location Code");
      PurchLine.SETRANGE("Drop Shipment",FALSE);
      PAGE.RUNMODAL(0,PurchLine);
    END;

    PROCEDURE LookupExpectedTransferLines@1240030017();
    VAR
      TransferLine@1240030000 : Record 5741;
    BEGIN
      TransferLine.RESET;
      TransferLine.SETCURRENTKEY(
        "Transfer-to Code",Status,"Derived From Line No.","Item No.","Variant Code");
      TransferLine.SETRANGE("Item No.","Item No.");
      TransferLine.SETRANGE("Variant Code","Variant Code");
      TransferLine.SETRANGE("Transfer-to Code","Location Code");
      TransferLine.SETRANGE("Derived From Line No.",0);
      PAGE.RUNMODAL(0,TransferLine);
    END;

    BEGIN
    END.
  }
}

