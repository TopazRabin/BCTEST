OBJECT Table 14000702 Package Line
{
  OBJECT-PROPERTIES
  {
    Date=06/28/17;
    Time=12:00:00 PM;
    Version List=SE0.60.11;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CheckModify;
               GetPackage;
               "Source Type" := Package."Source Type";
               "Source Subtype" := Package."Source Subtype";
               "Source ID" := Package."Source ID";
               "Location Code" := Package."Location Code";
               CalcValue(FALSE,FALSE);

               //TOP040 KT ABCSI Sales ORder Split by Location 03032015
               "Ship-to Type" := Package."Ship-to Type";
               "Ship-to No." := Package."Ship-to No.";
               "Ship-to Code" := Package."Ship-to Code";
               "Ship-to Name" := Package."Ship-to Name";
               //TOP040 KT ABCSI Sales ORder Split by Location 03032015
               UpdateOptionPage;
             END;

    OnModify=BEGIN
               CheckModify;

               IF (Type <> xRec.Type) OR ("No." <> xRec."No.") THEN
                 UpdateOptionPage;
             END;

    OnDelete=BEGIN
               CheckModify;
             END;

    CaptionML=ENU=Package Line;
    LookupPageID=Page14000712;
    DrillDownPageID=Page14000712;
  }
  FIELDS
  {
    { 1   ;   ;Package No.         ;Code20        ;TableRelation=Package;
                                                   CaptionML=ENU=Package No. }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 11  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                GetPackage;
                                                                IF Type = Type::Package THEN
                                                                  Package.TESTFIELD(Miscellaneous,FALSE);

                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  xRec.Type := Type;
                                                                  xRec."Source Type" := "Source Type";
                                                                  xRec."Source Subtype" := "Source Subtype";
                                                                  xRec."Source ID" := "Source ID";
                                                                  INIT;
                                                                  Type := xRec.Type;
                                                                  "Source Type" := xRec."Source Type";
                                                                  "Source Subtype" := xRec."Source Subtype";
                                                                  "Source ID" := xRec."Source ID";
                                                                END;
                                                                "Location Code" := Package."Location Code";
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,Account (G/L),Item,Resource,,,,,,,Package";
                                                   OptionString=[ ,Account (G/L),Item,Resource,,,,,,,Package] }
    { 12  ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(Resource)) Resource
                                                                 ELSE IF (Type=CONST("Account (G/L)")) "G/L Account"
                                                                 ELSE IF (Type=CONST(Package)) Package;
                                                   OnValidate=BEGIN
                                                                GetPackage;
                                                                "Source Type" := Package."Source Type";
                                                                "Source Subtype" := Package."Source Subtype";
                                                                "Source ID" := Package."Source ID";

                                                                IF ("No." <> xRec."No.") AND (xRec."No." <> '') THEN BEGIN
                                                                  xRec.Type := Type;
                                                                  xRec."No." := "No.";
                                                                  INIT;
                                                                  Type := xRec.Type;
                                                                  "No." := xRec."No.";
                                                                  "Source Type" := xRec."Source Type";
                                                                  "Source Subtype" := xRec."Source Subtype";
                                                                  "Source ID" := xRec."Source ID";
                                                                END;
                                                                "Location Code" := Package."Location Code";

                                                                IF "No." <> '' THEN BEGIN
                                                                  PackingRule.GetPackingRule(Package."Ship-to Type",Package."Ship-to No.",Package."Ship-to Code");
                                                                  IF PackingRule."Mixed Packages not Allowed" THEN BEGIN
                                                                    PackageLine.RESET;
                                                                    PackageLine.SETRANGE("Package No.","Package No.");
                                                                    PackageLine.SETFILTER("Line No.",'<>%1',"Line No.");
                                                                    IF Type = Type::Package THEN
                                                                      PackageLine.SETFILTER(Type,'<>%1',Type::Package)
                                                                    ELSE
                                                                      PackageLine.SETRANGE(Type,Type::Package);
                                                                    PackageLine.SETFILTER("No.",'<>%1','');
                                                                    IF PackageLine.FIND('-') THEN
                                                                      ERROR(Text001);
                                                                  END;

                                                                  CASE Type OF
                                                                    Type::" ":
                                                                      BEGIN
                                                                        StandardText.GET("No.");
                                                                        Description := StandardText.Description;
                                                                        CalcValue(FALSE,FALSE);
                                                                      END;
                                                                    Type::"Account (G/L)":
                                                                      BEGIN
                                                                        GLAccount.GET("No.");
                                                                        Description := GLAccount.Name;

                                                                        CalcValue(FALSE,FALSE);
                                                                      END;
                                                                    Type::Item:
                                                                      BEGIN
                                                                        Item.GET("No.");
                                                                        Description := Item.Description;
                                                                        EShipTrackingCode.GetEShipTrackingCodeItem(Item);
                                                                        "Pack Serial Number" := EShipTrackingCode."Pack Serial Number";
                                                                        "Pack Lot Number" := EShipTrackingCode."Pack Lot Number";
                                                                        "Pack Warranty Date" := EShipTrackingCode."Pack Warranty Date";
                                                                        "Pack Expiration Date" := EShipTrackingCode."Pack Expiration Date";

                                                                        "Export License Required" := Item."Export License Required";
                                                                        "Country of Manufacture" := Item."Country/Region of Origin Code";
                                                                        "Export Controls Class No." := Item."Export Control Class No.";
                                                                        "Certificate of Origin No." := Item."Certificate of Origin No.";
                                                                        "UPS ISC Type" := Item."UPS ISC Type";

                                                                        "Goods Not In Free Circulation" := Item."Goods Not In Free Circulation";
                                                                        "LTL Freight Type" := Item."LTL Freight Type";
                                                                        "Tariff No." := Item."Tariff No.";
                                                                        "Schedule B code" := Item."Schedule B Code";
                                                                        "Schedule B Quantity 1" := Item."Schedule B Quantity 1";
                                                                        "Schedule B Unit of Measure 1" := Item."Schedule B Unit of Measure 1";
                                                                        "Schedule B Quantity 2" := Item."Schedule B Quantity 2";
                                                                        "Schedule B Unit of Measure 2" := Item."Schedule B Unit of Measure 2";
                                                                        "Preference Criteria" := Item."Preference Criteria";
                                                                        "Producer of Good Indicator" := Item."Producer of Good Indicator";
                                                                        "RVC in Net Cost Method" := Item."RVC in Net Cost Method";
                                                                        "Use Unit of measure Dimensions" := Item."Use Unit of Measure Dimensions";
                                                                        VALIDATE("Item UPC/EAN Number",Item."Item UPC/EAN Number");
                                                                        IF Package.Miscellaneous THEN
                                                                          VALIDATE("Unit of Measure Code",Item."Sales Unit of Measure");
                                                                        "NMFC Code" := Item."NMFC Code";

                                                                        CalcValue(FALSE,FALSE);
                                                                      END;
                                                                    Type::Resource:
                                                                      BEGIN
                                                                        Resource.GET("No.");
                                                                        Description := Resource.Name;
                                                                        EShipTrackingCode.GetEShipTrackingCodeResource(Resource);
                                                                        "Pack Serial Number" := EShipTrackingCode."Pack Serial Number";
                                                                        "Pack Lot Number" := EShipTrackingCode."Pack Lot Number";
                                                                        "Pack Warranty Date" := EShipTrackingCode."Pack Warranty Date";
                                                                        "Pack Expiration Date" := EShipTrackingCode."Pack Expiration Date";

                                                                        "Export License Required" := Resource."Export License Required";
                                                                        "Country of Manufacture" := Resource."Country of Origin Code";
                                                                        "Export Controls Class No." := Resource."Export Control Class No.";
                                                                        "Certificate of Origin No." := Resource."Certificate of Origin No.";
                                                                        "UPS ISC Type" := Resource."UPS ISC Type";

                                                                        "Goods Not In Free Circulation" := Resource."Goods Not In Free Circulation";
                                                                        "LTL Freight Type" := Resource."LTL Freight Type";
                                                                        "Schedule B code" := Resource."Schedule B code";
                                                                        "Schedule B Quantity 1" := Resource."Schedule B Quantity 1";
                                                                        "Schedule B Unit of Measure 1" := Resource."Schedule B Unit of Measure 1";
                                                                        "Schedule B Quantity 2" := Resource."Schedule B Quantity 2";
                                                                        "Schedule B Unit of Measure 2" := Resource."Schedule B Unit of Measure 2";
                                                                        "Preference Criteria" := Resource."Preference Criteria";
                                                                        "Producer of Good Indicator" := Resource."Producer of Good Indicator";
                                                                        "RVC in Net Cost Method" := Resource."RVC in Net Cost Method";
                                                                        IF Package.Miscellaneous THEN
                                                                          VALIDATE("Unit of Measure Code",Resource."Base Unit of Measure");

                                                                        CalcValue(FALSE,FALSE);
                                                                      END;
                                                                    Type::Package:
                                                                      BEGIN
                                                                        GetShippingSetup;

                                                                        Package.TESTFIELD(Miscellaneous,FALSE);

                                                                        IF Package."Multi Document Package" THEN BEGIN
                                                                          Package2.GET("No.");
                                                                          Package2.TESTFIELD(Closed,TRUE);
                                                                          IF Package2."Original Package No." <> '' THEN
                                                                            IF Package2."Original Package No." <> Package2."No." THEN
                                                                              Package2.GET(Package2."Original Package No.");
                                                                          Package2.TESTFIELD("Multi Document Package",TRUE);
                                                                          Package2.TESTFIELD("Multi Document No.",Package."Multi Document No.");
                                                                          Package2.TESTFIELD("Source Type","Source Type");
                                                                          Package2.TESTFIELD("Source Subtype","Source Subtype");
                                                                        END ELSE BEGIN
                                                                          Package2.GET("No.");
                                                                          Package2.TESTFIELD("Source Type","Source Type");
                                                                          Package2.TESTFIELD("Source Subtype","Source Subtype");
                                                                          Package2.TESTFIELD("Source ID","Source ID");
                                                                          Package2.TESTFIELD("Multi Document Package",FALSE);
                                                                        END;
                                                                        Package2.TESTFIELD(Closed,TRUE);
                                                                        Package2.TESTFIELD("Package No.",1);
                                                                        Package2.TESTFIELD("Total Packages",1);
                                                                        Package2.TESTFIELD("External Tracking No.",'');
                                                                        IF ShippingSetup."Location Packing" THEN
                                                                          Package2.TESTFIELD("Future Package",Package."Future Package");

                                                                        IF Package2.Description <> '' THEN
                                                                          Description := Package2.Description
                                                                        ELSE
                                                                          Description := Package2."No.";
                                                                        VALIDATE(Quantity,1);
                                                                        "LTL Freight Type" := Package2."LTL Freight Type";
                                                                      END;
                                                                  END;
                                                                END ELSE
                                                                  INIT;
                                                              END;

                                                   OnLookup=BEGIN
                                                              GetPackage;
                                                              "Source Type" := Package."Source Type";
                                                              "Source Subtype" := Package."Source Subtype";
                                                              "Source ID" := Package."Source ID";

                                                              CASE Type OF
                                                                Type::"Account (G/L)",Type::Item:
                                                                  BEGIN
                                                                    IF "Source ID" <> '' THEN BEGIN
                                                                      IF PackingControl.LookupSourceLine(
                                                                           Package."Multi Document Package",Package."Multi Document No.",
                                                                           Type,'',"Source Type","Source Subtype","Source ID")
                                                                      THEN BEGIN
                                                                        VALIDATE("No.",PackingControl."Input No.");
                                                                        VALIDATE("Variant Code",PackingControl."Input Variant Code");
                                                                        VALIDATE("Unit of Measure Code",PackingControl."Input Unit of Measure Code");
                                                                      END;
                                                                    END ELSE
                                                                      CASE Type OF
                                                                        Type::"Account (G/L)":
                                                                          IF PAGE.RUNMODAL(0,GLAccount) = ACTION::LookupOK THEN
                                                                            VALIDATE("No.",GLAccount."No.");
                                                                        Type::Item:
                                                                          IF PAGE.RUNMODAL(0,Item) = ACTION::LookupOK THEN
                                                                            VALIDATE("No.",Item."No.");
                                                                      END;
                                                                  END;
                                                                Type::" ":
                                                                  IF PAGE.RUNMODAL(0,StandardText) = ACTION::LookupOK THEN
                                                                    VALIDATE("No.",StandardText.Code);
                                                                        Type::Resource:
                                                                          IF PAGE.RUNMODAL(0,Resource) = ACTION::LookupOK THEN
                                                                            VALIDATE("No.",Resource."No.");
                                                                Type::Package:
                                                                  BEGIN
                                                                    Package.TESTFIELD("Source ID");
                                                                    Package.TESTFIELD(Miscellaneous,FALSE);
                                                                    Package.TESTFIELD("Multi Document Package",FALSE);

                                                                    Package2.RESET;
                                                                    Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
                                                                    Package2.SETRANGE("Source Type","Source Type");
                                                                    Package2.SETRANGE("Source Subtype","Source Subtype");
                                                                    Package2.SETRANGE("Source ID","Source ID");
                                                                    Package2.SETRANGE(Closed,TRUE);
                                                                    IF PAGE.RUNMODAL(0,Package2) = ACTION::LookupOK THEN
                                                                      VALIDATE("No.",Package2."No.");
                                                                  END;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=No. }
    { 13  ;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   OnValidate=BEGIN
                                                                IF "Variant Code" <> '' THEN BEGIN
                                                                  TESTFIELD(Type,Type::Item);
                                                                  TESTFIELD("No.");
                                                                END;

                                                                CalcValue(FALSE,TRUE);
                                                              END;

                                                   OnLookup=VAR
                                                              ItemVariant@1240030000 : Record 5401;
                                                            BEGIN
                                                              TESTFIELD(Type,Type::Item);
                                                              TESTFIELD("No.");

                                                              GetPackage;
                                                              Package.TESTFIELD(Miscellaneous,FALSE);
                                                              "Source Type" := Package."Source Type";
                                                              "Source Subtype" := Package."Source Subtype";
                                                              "Source ID" := Package."Source ID";

                                                              CASE Type OF
                                                                Type::Item:
                                                                  BEGIN
                                                                    IF "Source ID" <> '' THEN BEGIN
                                                                      IF PackingControl.LookupSourceLine(
                                                                           Package."Multi Document Package",Package."Multi Document No.",
                                                                           Type,"No.","Source Type","Source Subtype","Source ID")
                                                                      THEN BEGIN
                                                                        VALIDATE("Variant Code",PackingControl."Input Variant Code");
                                                                        VALIDATE("Unit of Measure Code",PackingControl."Input Unit of Measure Code");
                                                                      END;
                                                                    END ELSE BEGIN
                                                                      ItemVariant.RESET;
                                                                      ItemVariant.SETRANGE("Item No.","No.");
                                                                      IF PAGE.RUNMODAL(0,ItemVariant) = ACTION::LookupOK THEN
                                                                        VALIDATE("Variant Code",ItemVariant.Code);
                                                                    END;
                                                                  END;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Variant Code }
    { 14  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                IF Type = Type::Package THEN
                                                                  TESTFIELD(Quantity,1);

                                                                CalcBaseQty;
                                                                CalcValue(FALSE,TRUE);
                                                                UpdateExportDocumentTotals;
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 15  ;   ;Quantity (Base)     ;Decimal       ;CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 16  ;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE IF (Type=FILTER(<>Item)) "Unit of Measure";
                                                   OnValidate=BEGIN
                                                                IF Type = Type::Item THEN BEGIN
                                                                  ItemUnitOfMeasure.GET("No.","Unit of Measure Code");

                                                                  VALIDATE("Std. Pack UPC/EAN Number",ItemUnitOfMeasure."Std. Pack UPC/EAN Number");
                                                                  "Unit Length" := ItemUnitOfMeasure.Length;
                                                                  "Unit Width" := ItemUnitOfMeasure.Width;
                                                                  "Unit Height" := ItemUnitOfMeasure.Height;
                                                                  "Unit Cubage" := ItemUnitOfMeasure.Cubage;
                                                                  "Unit Weight" := ItemUnitOfMeasure.Weight;
                                                                END;

                                                                CalcBaseQty;
                                                                CalcValue(TRUE,FALSE);
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 17  ;   ;Qty. per Unit of Measure;Decimal   ;CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 18  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 21  ;   ;Net Weight          ;Decimal       ;CaptionML=ENU=Net Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 22  ;   ;Gross Weight        ;Decimal       ;CaptionML=ENU=Gross Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 23  ;   ;Dim. Weight         ;Decimal       ;CaptionML=ENU=Dim. Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 24  ;   ;Value (Price)       ;Decimal       ;OnValidate=BEGIN
                                                                UpdateExportDocumentTotals;
                                                              END;

                                                   CaptionML=ENU=Value (Price);
                                                   BlankZero=Yes }
    { 25  ;   ;Value (Cost)        ;Decimal       ;CaptionML=ENU=Value (Cost);
                                                   BlankZero=Yes }
    { 26  ;   ;Serial No.          ;Code20        ;OnValidate=VAR
                                                                ShowSerialNoError@1240030000 : Boolean;
                                                              BEGIN
                                                                IF "Serial No." = '' THEN
                                                                  EXIT;

                                                                ShowSerialNoError := FALSE;

                                                                PackageLine.RESET;
                                                                PackageLine.SETCURRENTKEY("No.","Serial No.");
                                                                PackageLine.SETRANGE("No.","No.");
                                                                PackageLine.SETRANGE("Serial No.","Serial No.");
                                                                PackageLine.SETFILTER(Quantity,'<>0');
                                                                PackageLine.SETRANGE("Distribution Factor",0);
                                                                IF PackageLine.FIND('-') THEN
                                                                  IF ("Package No." = PackageLine."Package No.") AND ("Line No." = PackageLine."Line No.")
                                                                  THEN BEGIN
                                                                    IF PackageLine.NEXT <> 0 THEN
                                                                      ShowSerialNoError := TRUE;
                                                                  END ELSE
                                                                    ShowSerialNoError := TRUE;

                                                                IF ShowSerialNoError THEN
                                                                  ERROR(
                                                                    Text002,
                                                                    PackingControl.FormatSource(
                                                                      PackageLine."Source Type",PackageLine."Source Subtype",PackageLine."Source ID"),
                                                                    PackageLine."Package No.");

                                                                IF (Type = Type::Item) AND ("Serial No." <> '') THEN
                                                                  IF Item.GET("No.") THEN BEGIN
                                                                    Item.TESTFIELD("E-Ship Tracking Code");
                                                                    EShipTrackingCode.GET(Item."E-Ship Tracking Code");
                                                                    IF EShipTrackingCode."Transfer Serial Numbers" THEN BEGIN
                                                                      Item.TESTFIELD("Item Tracking Code");
                                                                      ItemTrackingCode.GET(Item."Item Tracking Code");
                                                                      IF ItemTrackingCode."SN Specific Tracking" THEN BEGIN
                                                                        ItemLedgEntry.SETCURRENTKEY(
                                                                          "Item No.",Open,"Variant Code",Positive,"Location Code",
                                                                          "Posting Date","Expiration Date","Lot No.","Serial No.");
                                                                        ItemLedgEntry.SETRANGE("Item No.","No.");
                                                                        ItemLedgEntry.SETRANGE("Variant Code","Variant Code");
                                                                        ItemLedgEntry.SETRANGE(Open,TRUE);
                                                                        ItemLedgEntry.SETRANGE(Positive,TRUE);
                                                                        ItemLedgEntry.SETRANGE("Serial No.","Serial No.");
                                                                        IF NOT ItemLedgEntry.FIND('-') THEN
                                                                          ERROR(Text003,"Serial No.");
                                                                      END;
                                                                    END;
                                                                  END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupSerialNo;
                                                            END;

                                                   CaptionML=ENU=Serial No. }
    { 27  ;   ;Volume              ;Decimal       ;CaptionML=ENU=Volume;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 28  ;   ;Pack Serial Number  ;Boolean       ;CaptionML=ENU=Pack Serial Number;
                                                   Editable=No }
    { 29  ;   ;Lot No.             ;Code20        ;OnValidate=BEGIN
                                                                IF (Type = Type::Item) AND ("Lot No." <> '') THEN
                                                                  IF Item.GET("No.") THEN BEGIN
                                                                    Item.TESTFIELD("E-Ship Tracking Code");
                                                                    EShipTrackingCode.GET(Item."E-Ship Tracking Code");
                                                                    IF EShipTrackingCode."Transfer Lot Numbers" THEN BEGIN
                                                                      Item.TESTFIELD("Item Tracking Code");
                                                                      ItemTrackingCode.GET(Item."Item Tracking Code");
                                                                      IF ItemTrackingCode."Lot Specific Tracking" THEN BEGIN
                                                                        ItemLedgEntry.SETCURRENTKEY(
                                                                          "Item No.",Open,"Variant Code",Positive,"Location Code",
                                                                          "Posting Date","Expiration Date","Lot No.","Serial No.");
                                                                        ItemLedgEntry.SETRANGE("Item No.","No.");
                                                                        ItemLedgEntry.SETRANGE("Variant Code","Variant Code");
                                                                        ItemLedgEntry.SETRANGE(Open,TRUE);
                                                                        ItemLedgEntry.SETRANGE(Positive,TRUE);
                                                                        ItemLedgEntry.SETRANGE("Lot No.","Lot No.");
                                                                        IF NOT ItemLedgEntry.FIND('-') THEN
                                                                          ERROR(Text004,"Lot No.");
                                                                      END;
                                                                    END;
                                                                  END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupLotNo;
                                                            END;

                                                   CaptionML=ENU=Lot No. }
    { 30  ;   ;Pack Lot Number     ;Boolean       ;CaptionML=ENU=Pack Lot Number;
                                                   Editable=No }
    { 33  ;   ;Source Type         ;Integer       ;CaptionML=ENU=Source Type;
                                                   Editable=No }
    { 34  ;   ;Source Subtype      ;Option        ;CaptionML=ENU=Source Subtype;
                                                   OptionCaptionML=ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                   OptionString=0,1,2,3,4,5,6,7,8,9,10;
                                                   Editable=No }
    { 35  ;   ;Source ID           ;Code20        ;CaptionML=ENU=Source ID;
                                                   Editable=No }
    { 36  ;   ;Selected Source ID  ;Code20        ;OnValidate=BEGIN
                                                                GetPackage;
                                                                PackingControl.TransferFromPackage(Package);
                                                                PackingControl."Multi Document Package" := Package."Multi Document Package";
                                                                PackingControl."Multi Document No." := Package."Multi Document No.";
                                                                PackingControl.ValidateSelectedSourceID(Package,Rec);
                                                              END;

                                                   OnLookup=BEGIN
                                                              GetPackage;
                                                              PackingControl.TransferFromPackage(Package);
                                                              PackingControl."Multi Document Package" := Package."Multi Document Package";
                                                              PackingControl."Multi Document No." := Package."Multi Document No.";
                                                              PackingControl.LookupSelectedSourceID2(Package,Rec);
                                                            END;

                                                   CaptionML=ENU=Selected Source ID }
    { 37  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=ENU=Location Code;
                                                   Editable=No }
    { 41  ;   ;Schedule B code     ;Code10        ;TableRelation="Schedule B Code".Code;
                                                   CaptionML=ENU=Schedule B code;
                                                   Editable=No }
    { 44  ;   ;Preference Criteria ;Option        ;CaptionML=ENU=Preference Criteria;
                                                   OptionCaptionML=ENU=" ,A,B,C,D,E,F";
                                                   OptionString=[ ,A,B,C,D,E,F] }
    { 45  ;   ;Producer of Good Indicator;Option  ;CaptionML=ENU=Producer of Good Indicator;
                                                   OptionCaptionML=ENU=" ,YES,1,2,3";
                                                   OptionString=[ ,YES,1,2,3] }
    { 46  ;   ;RVC in Net Cost Method;Boolean     ;CaptionML=ENU=RVC in Net Cost Method }
    { 51  ;   ;Warranty Date       ;Date          ;CaptionML=ENU=Warranty Date }
    { 52  ;   ;Pack Warranty Date  ;Boolean       ;CaptionML=ENU=Pack Warranty Date;
                                                   Editable=No }
    { 53  ;   ;Expiration Date     ;Date          ;CaptionML=ENU=Expiration Date }
    { 54  ;   ;Pack Expiration Date;Boolean       ;CaptionML=ENU=Pack Expiration Date;
                                                   Editable=No }
    { 55  ;   ;Scanned No.         ;Text30        ;CaptionML=ENU=Scanned No.;
                                                   Editable=No }
    { 56  ;   ;Schedule B Quantity 1;Decimal      ;CaptionML=ENU=Schedule B Quantity 1;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 57  ;   ;Schedule B Unit of Measure 1;Code10;TableRelation="Schedule B Unit of Measure".Code;
                                                   CaptionML=ENU=Schedule B Unit of Measure 1;
                                                   Editable=No }
    { 58  ;   ;Schedule B Quantity 2;Decimal      ;CaptionML=ENU=Schedule B Quantity 2;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 59  ;   ;Schedule B Unit of Measure 2;Code10;TableRelation="Schedule B Unit of Measure".Code;
                                                   CaptionML=ENU=Schedule B Unit of Measure 2;
                                                   Editable=No }
    { 60  ;   ;NMFC Code           ;Code10        ;TableRelation="LTL Freight NMFC Code";
                                                   CaptionML=ENU=NMFC Code }
    { 7300;   ;Unit Length         ;Decimal       ;OnValidate=BEGIN
                                                                IF "Use Unit of measure Dimensions" THEN
                                                                  IF Quantity <> 0 THEN
                                                                    Length := "Unit Length";
                                                              END;

                                                   CaptionML=ENU=Unit Length;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7301;   ;Unit Width          ;Decimal       ;OnValidate=BEGIN
                                                                IF "Use Unit of measure Dimensions" THEN
                                                                  IF Quantity <> 0 THEN
                                                                    Width := "Unit Width";
                                                              END;

                                                   CaptionML=ENU=Unit Width;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7302;   ;Unit Height         ;Decimal       ;OnValidate=BEGIN
                                                                IF "Use Unit of measure Dimensions" THEN
                                                                  Height := Quantity * "Unit Height";
                                                              END;

                                                   CaptionML=ENU=Unit Height;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7303;   ;Unit Cubage         ;Decimal       ;CaptionML=ENU=Unit Cubage;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7304;   ;Unit Weight         ;Decimal       ;CaptionML=ENU=Unit Weight;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7305;   ;Use Unit of measure Dimensions;Boolean;
                                                   CaptionML=ENU=Use Unit of measure Dimensions }
    { 7306;   ;Length              ;Decimal       ;CaptionML=ENU=Length;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7307;   ;Width               ;Decimal       ;CaptionML=ENU=Width;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7308;   ;Height              ;Decimal       ;CaptionML=ENU=Height;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7309;   ;Cubage              ;Decimal       ;CaptionML=ENU=Cubage;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7310;   ;Unit of Measure Weight;Decimal     ;CaptionML=ENU=Unit of Measure Weight;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 50000;  ;Ship-to Type        ;Option        ;CaptionML=ENU=Ship-to Type;
                                                   OptionCaptionML=ENU=Customer,Vendor,Bank,Contact,Resource,Employee,,Location;
                                                   OptionString=Customer,Vendor,Bank,Contact,Resource,Employee,,Location;
                                                   Description=TOP040 }
    { 50001;  ;Ship-to No.         ;Code20        ;TableRelation=IF (Ship-to Type=CONST(Customer)) Customer
                                                                 ELSE IF (Ship-to Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Ship-to Type=CONST(Bank)) "Bank Account"
                                                                 ELSE IF (Ship-to Type=CONST(Contact)) Contact
                                                                 ELSE IF (Ship-to Type=CONST(Resource)) Resource
                                                                 ELSE IF (Ship-to Type=CONST(Location)) Location;
                                                   CaptionML=ENU=Ship-to No.;
                                                   Description=TOP040 }
    { 50002;  ;Ship-to Code        ;Code10        ;TableRelation=IF (Ship-to Type=CONST(Customer)) "Ship-to Address".Code WHERE (Customer No.=FIELD(Ship-to No.))
                                                                 ELSE IF (Ship-to Type=CONST(Vendor)) "Order Address".Code WHERE (Vendor No.=FIELD(Ship-to No.));
                                                   CaptionML=ENU=Ship-to Code;
                                                   Description=TOP040 }
    { 50003;  ;Ship-to Name        ;Text50        ;CaptionML=ENU=Ship-to Name;
                                                   Description=TOP040 }
    { 50010;  ;Source Line No.     ;Integer        }
    { 14000721;;Multi Document Quantity;Decimal   ;CaptionML=ENU=Multi Document Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 14000722;;Multi Document Qty. (Base);Decimal;CaptionML=ENU=Multi Document Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 14000723;;Distribution Factor;Decimal       ;CaptionML=ENU=Distribution Factor;
                                                   Editable=No }
    { 14000761;;Certificate of Origin No.;Code10  ;CaptionML=ENU=Certificate of Origin No. }
    { 14000762;;Goods Not In Free Circulation;Boolean;
                                                   CaptionML=ENU=Goods Not In Free Circulation }
    { 14000763;;Total Quantity Exported;Decimal   ;CaptionML=ENU=Total Quantity Exported;
                                                   DecimalPlaces=0:5 }
    { 14000764;;Total Value Exported;Decimal      ;CaptionML=ENU=Total Value Exported }
    { 14000765;;Line Weight Type   ;Option        ;CaptionML=ENU=Line Weight Type;
                                                   OptionCaptionML=ENU=Pounds,Kilograms;
                                                   OptionString=Pounds,Kilograms }
    { 14000781;;Country of Manufacture;Code10     ;TableRelation=Country/Region.Code;
                                                   CaptionML=ENU=Country of Manufacture }
    { 14000782;;Handling Units     ;Decimal       ;CaptionML=ENU=Handling Units;
                                                   DecimalPlaces=0:0 }
    { 14000783;;Export License Required;Boolean   ;CaptionML=ENU=Export License Required }
    { 14000785;;Export Controls Class No.;Code15  ;TableRelation="Export Controls Class Number";
                                                   CaptionML=ENU=Export Controls Class No. }
    { 14000786;;FXF Hazmat         ;Boolean       ;CaptionML=ENU=FXF Hazmat }
    { 14000787;;FXF Hazmat Item No.;Code20        ;CaptionML=ENU=FXF Hazmat Item No. }
    { 14000801;;LTL Freight Type   ;Code10        ;TableRelation="LTL Freight Type";
                                                   CaptionML=ENU=LTL Freight Type }
    { 14000821;;Item UPC/EAN Number;Code20        ;OnValidate=BEGIN
                                                                IF "Item UPC/EAN Number" <> '' THEN BEGIN
                                                                  GetPackage;

                                                                  GetShippingSetup;
                                                                  IF ShippingSetup."Enable Label Printing" THEN
                                                                    "Item UPC/EAN Number (Print)" := LabelMgt.FormatItemEANNumber(Package,"Item UPC/EAN Number");
                                                                END ELSE
                                                                  "Item UPC/EAN Number (Print)" := '';
                                                              END;

                                                   OnLookup=BEGIN
                                                              CASE Type OF
                                                                Type::"Account (G/L)":
                                                                  ;
                                                                Type::Item:
                                                                  BEGIN
                                                                    CLEAR(Item);
                                                                    IF Item.GET("No.") THEN
                                                                      ;
                                                                    IF PAGE.RUNMODAL(0,Item) = ACTION::LookupOK THEN
                                                                      VALIDATE("Item UPC/EAN Number",Item."Item UPC/EAN Number");
                                                                  END;
                                                                Type::Resource:
                                                                  ;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Item UPC/EAN Number }
    { 14000822;;Item UPC/EAN Number (Print);Code50;CaptionML=ENU=Item UPC/EAN Number (Print);
                                                   Editable=No }
    { 14000823;;Std. Pack UPC/EAN Number;Code20   ;OnValidate=BEGIN
                                                                IF "Std. Pack UPC/EAN Number" <> '' THEN BEGIN
                                                                  GetPackage;

                                                                  GetShippingSetup;
                                                                  IF ShippingSetup."Enable Label Printing" THEN
                                                                    "Std. Pack UPC/EAN No. (Print)" :=
                                                                      LabelMgt.FormatStdPackageEANNumber(Package,"Std. Pack UPC/EAN Number");
                                                                END ELSE
                                                                  "Std. Pack UPC/EAN No. (Print)" := '';
                                                              END;

                                                   OnLookup=BEGIN
                                                              CASE Type OF
                                                                Type::"Account (G/L)":
                                                                  ;
                                                                Type::Item:
                                                                  BEGIN
                                                                    CLEAR(ItemUnitOfMeasure);
                                                                    IF "No." <> '' THEN
                                                                      ItemUnitOfMeasure.SETRANGE("Item No.","No.");
                                                                    IF ItemUnitOfMeasure.GET("No.","Unit of Measure Code") THEN
                                                                      ;
                                                                    IF PAGE.RUNMODAL(0,ItemUnitOfMeasure) = ACTION::LookupOK THEN
                                                                      VALIDATE("Std. Pack UPC/EAN Number",ItemUnitOfMeasure."Std. Pack UPC/EAN Number");
                                                                  END;
                                                                Type::Resource:
                                                                  ;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Std. Pack UPC/EAN Number }
    { 14000824;;Std. Pack UPC/EAN No. (Print);Code50;
                                                   CaptionML=ENU=Std. Pack UPC/EAN No. (Print);
                                                   Editable=No }
    { 14000981;;Tariff No.         ;Code20        ;CaptionML=ENU=Tariff No. }
    { 14050001;;UPS ISC Type       ;Option        ;CaptionML=ENU=UPS ISC Type;
                                                   OptionCaptionML=ENU=" ,Seeds,Perishables,Tobacco,Plants,Alcoholic Beverages,Biological Substance,Special Exceptions";
                                                   OptionString=[ ,Seeds,Perishables,Tobacco,Plants,Alcoholic Beverages,Biological Substance,Special Exceptions] }
  }
  KEYS
  {
    {    ;Package No.,Line No.                    ;SumIndexFields=Net Weight,Value (Price),Value (Cost),Quantity,Dim. Weight,Gross Weight,Volume,Unit of Measure Weight,Cubage,Height;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Source Type,Source Subtype,Source ID,No.,Variant Code,Type,Location Code;
                                                   SumIndexFields=Quantity (Base),Quantity;
                                                   MaintainSIFTIndex=No }
    {    ;No.,Serial No.                           }
    {    ;Type,No.                                ;MaintainSQLIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Package@1000000000 : Record 14000701;
      Package2@1000000001 : Record 14000701;
      PackageLine@1000000002 : Record 14000702;
      Item@1000000003 : Record 27;
      ItemUnitOfMeasure@1000000004 : Record 5404;
      GLAccount@1000000006 : Record 15;
      Resource@1000000007 : Record 156;
      ShippingAgent@1000000011 : Record 291;
      EShipTrackingCode@1240030000 : Record 14000721;
      ItemTrackingCode@1240030001 : Record 6502;
      ItemLedgEntry@1240030002 : Record 32;
      ShippingSetup@1240030003 : Record 14000707;
      PackingRule@1240030005 : Record 14000715;
      PackingControl@1240030006 : Record 14000717;
      LabelMgt@1000000008 : Codeunit 14000841;
      ShipperTypeMgt@1240030007 : Codeunit 14000711;
      QtyToShip@1000000009 : Decimal;
      QtyPacked@1000000010 : Decimal;
      ShippingSetupRetrieved@1240030004 : Boolean;
      Text001@1001 : TextConst 'ENU=Mixed packages not allowed.';
      Text002@1002 : TextConst 'ENU=Duplicate Serial Number on %1 package %2 is packed but not shipped.';
      Text003@1003 : TextConst 'ENU=Serial No. %1 is not on inventory.';
      Text004@1004 : TextConst 'ENU=Lot No. %1 is not on inventory.';
      Text005@1005 : TextConst 'ENU=You are attempting to pack more of %1 %2 %3 than is scheduled to ship.';
      Text006@1006 : TextConst 'ENU=Package is already packed in another package %1.';
      StandardText@1000000005 : Record 7;

    PROCEDURE CalcBaseQty@2();
    BEGIN
      CASE Type OF
        Type::Item:
          BEGIN
            IF "Unit of Measure Code" = '' THEN BEGIN
              "Qty. per Unit of Measure" := 1;
              VALIDATE("Item UPC/EAN Number",Item."Item UPC/EAN Number");
            END ELSE BEGIN
              ItemUnitOfMeasure.GET("No.","Unit of Measure Code");
              "Qty. per Unit of Measure" := ItemUnitOfMeasure."Qty. per Unit of Measure";
              VALIDATE("Std. Pack UPC/EAN Number",ItemUnitOfMeasure."Std. Pack UPC/EAN Number");
            END;
            "Quantity (Base)" := Quantity * "Qty. per Unit of Measure";

            Item.GET("No.");
            "Net Weight" := Item."Net Weight" * "Quantity (Base)";
            "Gross Weight" := Item."Gross Weight" * "Quantity (Base)";
            "Dim. Weight" := Item."Dimmed Weight" * "Quantity (Base)";
            Volume := Item."Unit Volume" * "Quantity (Base)";
            IF "Use Unit of measure Dimensions" THEN BEGIN
              Length := "Unit Length";
              Width := "Unit Width";
              Height := Quantity * "Unit Height";
            END;
            Cubage := Quantity * "Unit Cubage";
            "Unit of Measure Weight" := Quantity * "Unit Weight";
          END;
        Type::Resource:
          BEGIN
            "Qty. per Unit of Measure" := 1;
            "Quantity (Base)" := Quantity;

            Resource.GET("No.");
            "Net Weight" := Resource."Net Weight" * "Quantity (Base)";
            "Gross Weight" := Resource."Gross Weight" * "Quantity (Base)";
            "Dim. Weight" := Resource."Dimmed Weight" * "Quantity (Base)";
            Volume := Resource."Unit Volume" * "Quantity (Base)";
            IF "Use Unit of measure Dimensions" THEN
              Height := Quantity * "Unit Height";
            Cubage := Quantity * "Unit Cubage";
            "Unit of Measure Weight" := Quantity * "Unit Weight";
          END;
        Type::Package:
          BEGIN
            "Qty. per Unit of Measure" := 1;
            "Quantity (Base)" := Quantity;

            Package2.GET("No.");
            Package2.ClearTotalValueFields;
            "Net Weight" := Package2."Calculation Weight";
            "Gross Weight" := Package2."Calculation Weight";
            "Dim. Weight" := Package2."Calculation Weight";
            Volume := Package2."Calculation Volume";
            Length := Package2."Calculation Length";
            Width := Package2."Calculation Width";
            Height := Package2."Calculation Height";
            Cubage := Package2."Calculation Volume";
            "Unit of Measure Weight" := Package2."Calculation Weight";
            "Use Unit of measure Dimensions" := FALSE;
          END;
      END;
    END;

    PROCEDURE GetPackage@1();
    BEGIN
      IF Package."No." <> "Package No." THEN
        Package.GET("Package No.");
    END;

    PROCEDURE GetShippingAgent@8();
    BEGIN
      GetPackage;
      IF Package."Shipping Agent Code" <> ShippingAgent.Code THEN
        IF Package."Shipping Agent Code" <> '' THEN
          ShippingAgent.GET(Package."Shipping Agent Code")
        ELSE BEGIN
          CLEAR(ShippingAgent);
          ShippingAgent.INIT;
        END;
    END;

    PROCEDURE CalcValue@3(FromUnitOfMeasureCode@1000000000 : Boolean;FilterVariant@1000000005 : Boolean);
    VAR
      TotalQuantityBase@1000000002 : Decimal;
      TotalValueCostBase@1000000003 : Decimal;
      TotalValuePriceBase@1000000004 : Decimal;
      NewUnitOfMeasureCode@1240030000 : Code[10];
    BEGIN
      GetPackage;
      IF Package.Miscellaneous THEN BEGIN
        CASE Type OF
          Type::Item:
            BEGIN
              IF Item."No." <> "No." THEN
                Item.GET("No.");

              "Value (Price)" := ROUND(Item."Unit Price" * "Quantity (Base)",0.01);
              "Value (Cost)" := ROUND(Item."Unit Cost" * "Quantity (Base)",0.01);
            END;
          Type::Resource:
            BEGIN
              IF Resource."No." <> "No." THEN
                Resource.GET("No.");

              "Value (Price)" := ROUND(Resource."Unit Price" * "Quantity (Base)",0.01);
              "Value (Cost)" := ROUND(Resource."Unit Cost" * "Quantity (Base)",0.01);
            END;
        END;

        EXIT;
      END;

      IF OverPackError AND (CurrFieldNo <> 0) THEN
        CASE Type OF
          Type::"Account (G/L)",Type::Item,Type::Resource:
            ERROR(
              Text005,
              Type,"No.","Variant Code");
          Type::Package:
            BEGIN
              PackageLine.RESET;
              PackageLine.SETCURRENTKEY(Type,"No.");
              PackageLine.SETRANGE(Type,Type);
              PackageLine.SETRANGE("No.","No.");
              PackageLine.FIND('-');
              IF (PackageLine."Package No." = "Package No.") AND
                 (PackageLine."Line No." = "Line No.")
              THEN
                PackageLine.NEXT;
              ERROR(Text006,PackageLine."Package No.");
            END;
        END;

      CASE Type OF
        Type::"Account (G/L)",Type::Item,Type::Resource:
          BEGIN
            IF "No." = '' THEN BEGIN
              "Value (Price)" := 0;
              "Value (Cost)" := 0;
              EXIT;
            END;

            PackingControl.CalculateTotalValue(
              TotalQuantityBase,TotalValueCostBase,TotalValuePriceBase,NewUnitOfMeasureCode,
              Package."Multi Document Package",Package."Multi Document No.",
              Type,"No.","Variant Code",FilterVariant,"Unit of Measure Code",FromUnitOfMeasureCode,
              "Source Type","Source Subtype","Source ID");

            IF NewUnitOfMeasureCode <> '' THEN
              VALIDATE("Unit of Measure Code",NewUnitOfMeasureCode);

            "Value (Price)" := ROUND((TotalValuePriceBase / TotalQuantityBase) * "Quantity (Base)",0.01);
            "Value (Cost)" := ROUND((TotalValueCostBase / TotalQuantityBase) * "Quantity (Base)",0.01);
          END;
        Type::Package:
          BEGIN
            IF "No." = '' THEN BEGIN
              "Value (Price)" := 0;
              "Value (Cost)" := 0;
              EXIT;
            END;

            Package2.GET("No.");
            Package2.ClearTotalValueFields;
            "Value (Price)" := Package2.TotalValuePrice;
            "Value (Cost)" := Package2.TotalValueCost;
          END;
      END;
    END;

    PROCEDURE OverPackError@4() : Boolean;
    BEGIN
      IF ("Source ID" = '') OR ("No." = '') THEN
        EXIT(FALSE);

      GetPackage;

      CASE Type OF
        Type::"Account (G/L)",Type::Item,Type::Resource:
          BEGIN
            GetShippingSetup;

            QtyToShip :=
              PackingControl.CalculateQtyToShip(
                Package."Multi Document Package",Package."Multi Document No.",
                Type,"No.","Variant Code","Source Type","Source Subtype","Source ID");

            QtyPacked := 0;
            PackageLine.RESET;
            PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID","No.","Variant Code");
            PackageLine.SETRANGE("Source Type","Source Type");
            PackageLine.SETRANGE("Source Subtype","Source Subtype");
            IF Package."Multi Document Package" THEN
              PackageLine.SETFILTER("Source ID",Package."Multi Document No.")
            ELSE
              PackageLine.SETRANGE("Source ID","Source ID");
            PackageLine.SETRANGE("No.","No.");
            PackageLine.SETRANGE("Variant Code","Variant Code");
            IF ShippingSetup."Location Packing" THEN
              PackageLine.SETRANGE("Location Code",Package."Location Code");
            PackageLine.CALCSUMS("Quantity (Base)");
            QtyPacked := PackageLine."Quantity (Base)";
            IF PackageLine.GET("Package No.","Line No.") THEN
              QtyPacked := QtyPacked - PackageLine."Quantity (Base)";
            QtyPacked := QtyPacked + "Quantity (Base)";

            EXIT(QtyPacked > QtyToShip);
          END;
        Type::Package:
          BEGIN
            PackageLine.RESET;
            PackageLine.SETCURRENTKEY(Type,"No.");
            PackageLine.SETRANGE(Type,Type);
            PackageLine.SETRANGE("No.","No.");
            IF PackageLine.FIND('-') THEN
              IF (PackageLine."Package No." = "Package No.") AND
                 (PackageLine."Line No." = "Line No.")
              THEN
                EXIT(PackageLine.NEXT <> 0)
              ELSE
                EXIT(TRUE);

            EXIT(FALSE);
          END;
      END;
    END;

    PROCEDURE CheckModify@6();
    BEGIN
      GetPackage;
      Package.TESTFIELD(Closed,FALSE);
    END;

    PROCEDURE UpdateExportDocumentTotals@5();
    BEGIN
      GetPackage;
      IF Package."World Wide Service" THEN BEGIN
        IF Quantity > "Total Quantity Exported" THEN
          "Total Quantity Exported" := Quantity;
        IF "Value (Price)" > "Total Value Exported" THEN
          "Total Value Exported" := "Value (Price)";
      END;
    END;

    PROCEDURE UpdateOptionPage@7();
    BEGIN
      IF (Type <> Type::Item) AND (Type <> Type::Resource) OR ("No." = '') THEN
        EXIT;

      GetPackage;
      GetShippingAgent;
      ShipperTypeMgt.PackageLineUpdateOptionPage(Rec,Package,ShippingAgent);
      ShipperTypeMgt.PackageLineUpdateHazMatOption(Rec,Package,ShippingAgent);
    END;

    PROCEDURE DivideQuantityAndValueFields@9(MultiDocPackageLine@1240030000 : Record 14000702;VAR TotalPackageLine@1240030001 : Record 14000702;CorrectionFactor@1240030002 : Decimal;UseRemainingAmounts@1240030003 : Boolean);
    BEGIN
      IF UseRemainingAmounts THEN BEGIN
        Quantity := MultiDocPackageLine.Quantity - TotalPackageLine.Quantity;
        "Quantity (Base)" :=
          MultiDocPackageLine."Quantity (Base)" - TotalPackageLine."Quantity (Base)";
        "Net Weight" := MultiDocPackageLine."Net Weight" - TotalPackageLine."Net Weight";
        "Gross Weight" := MultiDocPackageLine."Gross Weight" - TotalPackageLine."Gross Weight";
        "Dim. Weight" := MultiDocPackageLine."Dim. Weight" - TotalPackageLine."Dim. Weight";
        "Value (Price)" := MultiDocPackageLine."Value (Price)" - TotalPackageLine."Value (Price)";
        "Value (Cost)" := MultiDocPackageLine."Value (Cost)" - TotalPackageLine."Value (Cost)";
        Volume := MultiDocPackageLine.Volume - TotalPackageLine.Volume;
        "Total Quantity Exported" :=
          MultiDocPackageLine."Total Quantity Exported" - TotalPackageLine."Total Quantity Exported";
        "Total Value Exported" :=
          MultiDocPackageLine."Total Value Exported" - TotalPackageLine."Total Value Exported";
        "Handling Units" := MultiDocPackageLine."Handling Units" - TotalPackageLine."Handling Units";
      END ELSE BEGIN
        Quantity := ROUND(CorrectionFactor * MultiDocPackageLine.Quantity,0.0001);
        "Quantity (Base)" := ROUND(CorrectionFactor * MultiDocPackageLine."Quantity (Base)",0.0001);
        "Net Weight" := ROUND(CorrectionFactor * MultiDocPackageLine."Net Weight",0.0001);
        "Gross Weight" := ROUND(CorrectionFactor * MultiDocPackageLine."Gross Weight",0.0001);
        "Dim. Weight" := ROUND(CorrectionFactor * MultiDocPackageLine."Dim. Weight",0.0001);
        "Value (Price)" := ROUND(CorrectionFactor * MultiDocPackageLine."Value (Price)",0.0001);
        "Value (Cost)" := ROUND(CorrectionFactor * MultiDocPackageLine."Value (Cost)",0.0001);
        Volume := ROUND(CorrectionFactor * MultiDocPackageLine.Volume,0.0001);
        "Total Quantity Exported" :=
          ROUND(CorrectionFactor * MultiDocPackageLine."Total Quantity Exported",0.0001);
        "Total Value Exported" :=
          ROUND(CorrectionFactor * MultiDocPackageLine."Total Value Exported",0.0001);
        "Handling Units" := ROUND(CorrectionFactor * MultiDocPackageLine."Handling Units",1)
      END;
      "Distribution Factor" := CorrectionFactor;

      TotalPackageLine.Quantity := TotalPackageLine.Quantity + Quantity;
      TotalPackageLine."Quantity (Base)" := TotalPackageLine."Quantity (Base)" + "Quantity (Base)";
      TotalPackageLine."Net Weight" := TotalPackageLine."Net Weight" + "Net Weight";
      TotalPackageLine."Gross Weight" := TotalPackageLine."Gross Weight" + "Gross Weight";
      TotalPackageLine."Dim. Weight" := TotalPackageLine."Dim. Weight" + "Dim. Weight";
      TotalPackageLine."Value (Price)" := TotalPackageLine."Value (Price)" + "Value (Price)";
      TotalPackageLine."Value (Cost)" := TotalPackageLine."Value (Cost)" + "Value (Cost)";
      TotalPackageLine.Volume := TotalPackageLine.Volume + Volume;
      TotalPackageLine."Total Quantity Exported" := TotalPackageLine."Total Quantity Exported" + "Total Quantity Exported";
      TotalPackageLine."Total Value Exported" := TotalPackageLine."Total Value Exported" + "Total Value Exported";
      TotalPackageLine."Handling Units" := TotalPackageLine."Handling Units" + "Handling Units";
    END;

    LOCAL PROCEDURE GetShippingSetup@22();
    BEGIN
      IF NOT ShippingSetupRetrieved THEN BEGIN
        ShippingSetup.GET;
        ShippingSetupRetrieved := TRUE;
      END;
    END;

    PROCEDURE LookupSerialNo@10();
    BEGIN
      IF Type = Type::Item THEN
        IF Item.GET("No.") THEN BEGIN
          Item.TESTFIELD("Item Tracking Code");
          ItemLedgEntry.RESET;
          ItemLedgEntry.SETCURRENTKEY(
            "Item No.",Open,"Variant Code",Positive,"Location Code",
            "Posting Date","Expiration Date","Lot No.","Serial No.");
          ItemLedgEntry.SETRANGE("Item No.","No.");
          ItemLedgEntry.SETRANGE("Variant Code","Variant Code");
          ItemLedgEntry.SETRANGE(Open,TRUE);
          ItemLedgEntry.SETRANGE(Positive,TRUE);
          IF PAGE.RUNMODAL(0,ItemLedgEntry) = ACTION::LookupOK THEN
            VALIDATE("Serial No.",ItemLedgEntry."Serial No.");
        END;
    END;

    PROCEDURE LookupLotNo@11();
    BEGIN
      IF Type = Type::Item THEN
        IF Item.GET("No.") THEN BEGIN
          Item.TESTFIELD("Item Tracking Code");
          ItemLedgEntry.RESET;
          ItemLedgEntry.SETCURRENTKEY(
            "Item No.",Open,"Variant Code",Positive,"Location Code",
            "Posting Date","Expiration Date","Lot No.","Serial No.");
          ItemLedgEntry.SETRANGE("Item No.","No.");
          ItemLedgEntry.SETRANGE("Variant Code","Variant Code");
          ItemLedgEntry.SETRANGE(Open,TRUE);
          ItemLedgEntry.SETRANGE(Positive,TRUE);
          IF PAGE.RUNMODAL(0,ItemLedgEntry) = ACTION::LookupOK THEN
            VALIDATE("Lot No.",ItemLedgEntry."Lot No.");
        END;
    END;

    PROCEDURE GetWeight@19() : Decimal;
    BEGIN
      GetShippingSetup;
      ShippingSetup.TESTFIELD("Actual Weight as");

      CASE ShippingSetup."Actual Weight as" OF
        ShippingSetup."Actual Weight as"::"Net Weight":
          EXIT("Net Weight");
        ShippingSetup."Actual Weight as"::"Gross Weight":
          EXIT("Gross Weight");
        ShippingSetup."Actual Weight as"::"Dimmed Weight":
          EXIT("Dim. Weight");
        ShippingSetup."Actual Weight as"::"Unit of Measure Weight":
          EXIT("Unit Weight");
      END;
    END;

    BEGIN
    {
      TOP040 KT ABCSI Sales Order Split by Location 03032015
        - Added new fields
          50000  Ship-to Type
          50001  Ship-to No.
          50002  Ship-to Code
          50003  Ship-to Name
        - Added code on OnInsert trigger to populate fields from the package record
    }
    END.
  }
}

