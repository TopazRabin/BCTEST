OBJECT Table 14123901 ES Object Explorer
{
  OBJECT-PROPERTIES
  {
    Date=08/25/17;
    Time=12:00:00 PM;
    Version List=ES1.41.39;
  }
  PROPERTIES
  {
    CaptionML=ENU=Object Information;
  }
  FIELDS
  {
    { 1   ;   ;Object Type         ;Option        ;CaptionML=ENU=Object Type;
                                                   OptionCaptionML=ENU=" ,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query";
                                                   OptionString=[ ,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query] }
    { 2   ;   ;Company Name        ;Text30        ;CaptionML=ENU=Company Name }
    { 3   ;   ;Object ID           ;Integer       ;CaptionML=ENU=Object ID }
    { 4   ;   ;Name                ;Text30        ;CaptionML=ENU=Name }
    { 5   ;   ;Modified            ;Boolean       ;CaptionML=ENU=Modified }
    { 6   ;   ;Compiled            ;Boolean       ;CaptionML=ENU=Compiled }
    { 7   ;   ;BLOB Reference      ;BLOB          ;CaptionML=ENU=BLOB Reference }
    { 8   ;   ;BLOB Size           ;Integer       ;CaptionML=ENU=BLOB Size }
    { 9   ;   ;DBM Table No.       ;Integer       ;CaptionML=ENU=DBM Table No. }
    { 10  ;   ;Date                ;Date          ;CaptionML=ENU=Date }
    { 11  ;   ;Time                ;Time          ;CaptionML=ENU=Time }
    { 12  ;   ;Version List        ;Text250       ;CaptionML=ENU=Version List }
    { 13  ;   ;Caption             ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=FIELD(Object Type),
                                                                                                                Object ID=FIELD(Object ID)));
                                                   CaptionML=ENU=Caption }
    { 101 ;   ;Read Permission (License);Option   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("License Permission"."Read Permission" WHERE (Object Type=FIELD(Object Type),
                                                                                                                    Object Number=FIELD(Object ID)));
                                                   CaptionML=ENU=Read Permission (License);
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect];
                                                   Editable=No }
    { 102 ;   ;Insert Permission (License);Option ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("License Permission"."Insert Permission" WHERE (Object Type=FIELD(Object Type),
                                                                                                                      Object Number=FIELD(Object ID)));
                                                   CaptionML=ENU=Insert Permission (License);
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect];
                                                   Editable=No }
    { 103 ;   ;Modify Permission (License);Option ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("License Permission"."Modify Permission" WHERE (Object Type=FIELD(Object Type),
                                                                                                                      Object Number=FIELD(Object ID)));
                                                   CaptionML=ENU=Modify Permission (License);
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect];
                                                   Editable=No }
    { 104 ;   ;Delete Permission (License);Option ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("License Permission"."Delete Permission" WHERE (Object Type=FIELD(Object Type),
                                                                                                                      Object Number=FIELD(Object ID)));
                                                   CaptionML=ENU=Delete Permission (License);
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect];
                                                   Editable=No }
    { 105 ;   ;Execute Permission (License);Option;FieldClass=FlowField;
                                                   CalcFormula=Lookup("License Permission"."Execute Permission" WHERE (Object Type=FIELD(Object Type),
                                                                                                                       Object Number=FIELD(Object ID)));
                                                   CaptionML=ENU=Execute Permission (License);
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect];
                                                   Editable=No }
    { 109 ;   ;Skip During Export  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("ES Object Property" WHERE (Object Type=FIELD(Object Type),
                                                                                                 Object ID=FIELD(Object ID),
                                                                                                 Skip During Export=CONST(Yes)));
                                                   CaptionML=ENU=Skip During Export;
                                                   Editable=No }
    { 115 ;   ;Relations           ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("ES Relation" WHERE (Object Type=FIELD(Object Type),
                                                                                          Object ID=FIELD(Object ID)));
                                                   CaptionML=ENU=Relations;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 116 ;   ;Variables           ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("ES Variable" WHERE (Object Type=FIELD(Object Type),
                                                                                          Object ID=FIELD(Object ID)));
                                                   CaptionML=ENU=Variables;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 117 ;   ;Where-used as Relations;Integer    ;FieldClass=FlowField;
                                                   CalcFormula=Count("ES Relation" WHERE (Relation Object Type=FIELD(Object Type),
                                                                                          Relation Object ID=FIELD(Object ID)));
                                                   CaptionML=ENU=Where-Used as Relations;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 118 ;   ;Where-used as Variables;Integer    ;FieldClass=FlowField;
                                                   CalcFormula=Count("ES Variable" WHERE (Variable Object Type=FIELD(Object Type),
                                                                                          Variable Object ID=FIELD(Object ID)));
                                                   CaptionML=ENU=Where-Used as Variables;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 120 ;   ;Export Error        ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("ES Object Property"."Export Error" WHERE (Object Type=FIELD(Object Type),
                                                                                                                 Object ID=FIELD(Object ID)));
                                                   CaptionML=ENU=Export Error;
                                                   Editable=No }
    { 121 ;   ;Live Relations      ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("ES Live Relation" WHERE (Object Type=FIELD(Object Type),
                                                                                               Object ID=FIELD(Object ID)));
                                                   CaptionML=ENU=Live Relations;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 122 ;   ;Live Variables      ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("ES Live Variable" WHERE (Object Type=FIELD(Object Type),
                                                                                               Object ID=FIELD(Object ID)));
                                                   CaptionML=ENU=Live Variables;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 123 ;   ;Live Where-used as Relations;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("ES Live Relation" WHERE (Relation Object Type=FIELD(Object Type),
                                                                                               Relation Object ID=FIELD(Object ID)));
                                                   CaptionML=ENU=Live Where-Used as Relations;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 124 ;   ;Live Where-used as Variables;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("ES Live Variable" WHERE (Variable Object Type=FIELD(Object Type),
                                                                                               Variable Object ID=FIELD(Object ID)));
                                                   CaptionML=ENU=Live Where-Used as Variables;
                                                   BlankZero=Yes;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Object Type,Company Name,Object ID      ;Clustered=Yes }
    {    ;Name                                     }
    {    ;Date,Time                                }
    {    ;BLOB Size                                }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1240520014 : TextConst 'ENU=Objects of the type %1 cannot be executed directly.';
      Text002@1001 : TextConst 'ENU=Waiting for a future version of C/SIDE :-).';
      Text011@1240520003 : TextConst 'ENU=File %1 already exists.';
      Text013@1240520015 : TextConst 'ENU="%1 of %2 objects changed, Filter %3 = %4."';
      Text016@1240520016 : TextConst 'ENU=%1 objects have been changed.';
      Text017@1240520007 : TextConst 'ENU=Modifying objects.';
      Text021@1240520006 : TextConst 'ENU=Collecting objects.';
      Text022@1240520005 : TextConst 'ENU=Export %1 of %2 objects.';
      Text023@1240520004 : TextConst 'ENU=%1 of %2 objects exported to %3.';
      ESObjectExplorerTmp@1240520008 : TEMPORARY Record 14123901;
      Text003@1002 : TextConst 'ENU=This function cannot be used with the Native server.';
      Text004@1240520009 : TextConst 'ENU=Only if the NAV Service Tier is installed locally on this computer can a local file be used.';

    PROCEDURE Permissions@1240520008(CalcFlowFields@1240520008 : Boolean) PermissionString : Text[5];
    BEGIN
      IF CalcFlowFields THEN
        CALCFIELDS(
          "Read Permission (License)","Insert Permission (License)","Modify Permission (License)",
          "Delete Permission (License)","Execute Permission (License)");

      PermissionString :=
        GetPermissionTextPart("Read Permission (License)",'R') +
        GetPermissionTextPart("Insert Permission (License)",'I') +
        GetPermissionTextPart("Modify Permission (License)",'M') +
        GetPermissionTextPart("Delete Permission (License)",'D') +
        GetPermissionTextPart("Execute Permission (License)",'E');
    END;

    LOCAL PROCEDURE GetPermissionTextPart@1240520009(Permission@1240520008 : Integer;Character@1240520009 : Text[1]) : Text[1];
    BEGIN
      CASE Permission OF
        0:
          EXIT('-');
        1:
          EXIT(UPPERCASE(Character));
        2:
          EXIT(LOWERCASE(Character));
        ELSE
          EXIT(' ');
      END;
    END;

    PROCEDURE ExecuteObject@1240520012();
    BEGIN
      TESTFIELD("Object ID");

      CASE "Object Type" OF
        "Object Type"::"2":
          IF ISSERVICETIER THEN
            ERROR(Text001,"Object Type")
          ELSE
            PAGE.RUN("Object ID");
        "Object Type"::Report:
          REPORT.RUN("Object ID");
        "Object Type"::Page:
          IF ISSERVICETIER THEN
            PAGE.RUN("Object ID")
          ELSE
            ERROR(Text001,"Object Type");
        ELSE
          ERROR(Text001,"Object Type");
      END;
    END;

    PROCEDURE DesignObject@1240520013();
    BEGIN
      MESSAGE(Text002);
    END;

    PROCEDURE ObjectWhereUsed@1240520010();
    VAR
      ESObjectWhereUsed@1240520008 : Page 14123562;
    BEGIN
      CLEAR(ESObjectWhereUsed);
      ESObjectWhereUsed.InitObject("Object Type","Object ID");
      ESObjectWhereUsed.RUN;
    END;

    PROCEDURE ExportNeededObjects@1240520001(SourceCodeFileName@1240520002 : Text[250];SkipSecuritySetup@1240520006 : Boolean;AllObjects@1240520005 : Boolean;LoadedExportObject@1240520007 : Boolean;OnlyObjectsForFLADSInstall@1240520014 : Boolean;ModifyForms@1240520003 : Boolean;ModifyPages@1240520004 : Boolean;ShowStatus@1240520013 : Boolean;SetDBMTableNo@1240520015 : Boolean;OnlyLicensedObjects@1240520019 : Boolean;SingleSourceTableNo@1240520020 : Integer);
    VAR
      Object@1240520011 : Record 2000000001;
      ObjectTmp@1240520008 : TEMPORARY Record 2000000001;
      ESSourceTableSetup@1240520009 : Record 14123802;
      ESFLADSRelation@1240520010 : Record 14123810;
      ESObjectProperty@1240520001 : Record 14123522;
      Window@1240520012 : Dialog;
      ObjectsNeeded@1240520016 : Integer;
      ObjectsToExport@1240520017 : Integer;
      DBMTableNo@1240520018 : Integer;
    BEGIN
      IF SetDBMTableNo THEN BEGIN
        IF Object.GET(Object.Type::Table,'',DATABASE::Table2000000051) THEN
          ERROR(Text003);
      END ELSE BEGIN
        IF EXISTS(SourceCodeFileName) THEN
          ERROR(Text011,SourceCodeFileName);
      END;

      IF GUIALLOWED THEN
        Window.OPEN('#1############################');

      IF GUIALLOWED THEN
        Window.UPDATE(1,Text021);
      IF OnlyObjectsForFLADSInstall THEN BEGIN
        ESFLADSRelation.RESET;
        ESFLADSRelation.FIND('-');

        ESSourceTableSetup.RESET;
        IF (SingleSourceTableNo <> 0) AND (SingleSourceTableNo <> DATABASE::"ES FLADS Setup") THEN
          ESSourceTableSetup.SETRANGE("Source Table ID",SingleSourceTableNo)
        ELSE
          ESSourceTableSetup.SETFILTER("Source Table ID",'<>%1',DATABASE::"ES FLADS Setup");
        ESSourceTableSetup.FIND('-');
        REPEAT
          IF Object.GET(Object.Type::Table,'',ESSourceTableSetup."Source Table ID") THEN BEGIN
            ObjectTmp := Object;
            ObjectTmp.INSERT;
            ObjectsNeeded := ObjectsNeeded + 1;
            ObjectsToExport := ObjectsToExport + 1;

            ESFLADSRelation.RESET;
            CASE TRUE OF
              ESSourceTableSetup."Do Not Modify Objects":
                ESFLADSRelation.SETFILTER(
                  "Object Type",'%1&%2',
                  ESFLADSRelation."Object Type"::"2",ESFLADSRelation."Object Type"::Page);
              ModifyForms AND ModifyPages:
                ESFLADSRelation.SETFILTER(
                  "Object Type",'%1|%2',
                  ESFLADSRelation."Object Type"::"2",ESFLADSRelation."Object Type"::Page);
              ModifyForms:
                ESFLADSRelation.SETRANGE("Object Type",ESFLADSRelation."Object Type"::"2");
              ModifyPages:
                ESFLADSRelation.SETRANGE("Object Type",ESFLADSRelation."Object Type"::Page);
              ELSE
                ESFLADSRelation.SETFILTER(
                  "Object Type",'%1&%2',
                  ESFLADSRelation."Object Type"::"2",ESFLADSRelation."Object Type"::Page);
            END;
            ESFLADSRelation.SETRANGE(Type,ESFLADSRelation.Type::"Source Table");
            ESFLADSRelation.SETRANGE(
              "Relation Object Type",ESFLADSRelation."Relation Object Type"::Table);
            ESFLADSRelation.SETRANGE("Relation Object ID",ESSourceTableSetup."Source Table ID");
            IF ESFLADSRelation.FIND('-') THEN
              REPEAT
                IF Object.GET(ESFLADSRelation."Object Type",'',ESFLADSRelation."Object ID") THEN BEGIN
                  IF NOT ESObjectProperty.GET(Object.Type,Object.ID) THEN
                    ESObjectProperty.INIT;

                  IF NOT ESObjectProperty."Skip During Export" AND
                     (ESObjectProperty."Export Error" = '') AND
                     (NOT SkipSecuritySetup OR NOT ObjectIsESSetup(Object))
                  THEN BEGIN
                    ObjectsNeeded := ObjectsNeeded + 1;

                    IF AddObjectIfLicensed(ObjectTmp,Object,OnlyLicensedObjects) THEN
                      ObjectsToExport := ObjectsToExport + 1;
                  END;
                END;
              UNTIL ESFLADSRelation.NEXT = 0;
          END;
        UNTIL ESSourceTableSetup.NEXT = 0;
      END ELSE BEGIN
        IF LoadedExportObject THEN BEGIN
          IF ESObjectExplorerTmp.FIND('-') THEN
            REPEAT
              ObjectsNeeded := ObjectsNeeded + 1;

              IF Object.GET(ESObjectExplorerTmp."Object Type",'',ESObjectExplorerTmp."Object ID")
              THEN BEGIN
                ObjectsToExport := ObjectsToExport + 1;

                ObjectTmp := Object;
                ObjectTmp.INSERT;
              END;
            UNTIL ESObjectExplorerTmp.NEXT = 0;
        END ELSE BEGIN
          Object.RESET;
          IF AllObjects THEN
            Object.SETFILTER(Type,'1..9')
          ELSE
            Object.SETFILTER(Type,'%1|%2',Object.Type::Table,Object.Type::Page);
          Object.SETFILTER(ID,'<>%1',DATABASE::"ES FLADS Setup");
          IF Object.FIND('-') THEN
            REPEAT
              IF NOT ESObjectProperty.GET(Object.Type,Object.ID) THEN
                ESObjectProperty.INIT;

              IF NOT ESObjectProperty."Skip During Export" AND
                 (ESObjectProperty."Export Error" = '') AND
                 (NOT SkipSecuritySetup OR NOT ObjectIsESSetup(Object)) AND
                 (Object.Type <> Object.Type::MenuSuite)
              THEN BEGIN
                ObjectsNeeded := ObjectsNeeded + 1;

                IF AddObjectIfLicensed(ObjectTmp,Object,OnlyLicensedObjects) THEN
                  ObjectsToExport := ObjectsToExport + 1;
              END;
            UNTIL Object.NEXT = 0;
        END;
      END;

      IF GUIALLOWED THEN
        IF SetDBMTableNo THEN
          Window.UPDATE(1,STRSUBSTNO(Text017,ObjectsToExport,ObjectsNeeded))
        ELSE
          Window.UPDATE(1,STRSUBSTNO(Text022,ObjectsToExport,ObjectsNeeded));
      IF ObjectTmp.FIND('-') THEN
        IF SetDBMTableNo THEN BEGIN
          DBMTableNo := FindHighestDBMTableNo + 1;

          REPEAT
            IF ObjectTmp.Type <> ObjectTmp.Type::MenuSuite THEN BEGIN
              Object.GET(ObjectTmp.Type,'',ObjectTmp.ID);
              Object."DBM Table No." := DBMTableNo;
              Object.MODIFY;
            END;
          UNTIL ObjectTmp.NEXT = 0;
        END ELSE
          EXPORTOBJECTS(SourceCodeFileName,ObjectTmp,0);

      IF GUIALLOWED THEN
        Window.CLOSE;

      IF ShowStatus THEN
        IF SetDBMTableNo THEN
          MESSAGE(
            Text013,ObjectsToExport,ObjectsNeeded,Object.FIELDCAPTION("DBM Table No."),DBMTableNo)
        ELSE
          MESSAGE(Text023,ObjectsToExport,ObjectsNeeded,SourceCodeFileName);
    END;

    PROCEDURE ResetDBMTableNo@1240520022(AllObjects@1240520012 : Boolean;ShowStatus@1240520011 : Boolean);
    VAR
      Object@1240520008 : Record 2000000001;
      Object2@1240520009 : Record 2000000001;
      Window@1240520013 : Dialog;
      ChangedObjects@1240520010 : Integer;
    BEGIN
      IF Object.GET(Object.Type::Table,'',DATABASE::Table2000000051) THEN
        ERROR(Text003);

      IF GUIALLOWED THEN
        Window.OPEN('#1############################');

      IF GUIALLOWED THEN
        Window.UPDATE(1,Text017);
      Object.RESET;
      IF NOT AllObjects THEN
        Object.SETFILTER(Type,'%1|%2',Object.Type::Table,Object.Type::Page)
      ELSE
        Object.SETFILTER(Type,'%1..%2',Object.Type::Table,Object.Type::Page);
      Object.SETFILTER("DBM Table No.",'<>0');
      IF Object.FIND('-') THEN
        REPEAT
          Object2 := Object;
          Object2."DBM Table No." := 0;
          Object2.MODIFY;

          ChangedObjects := ChangedObjects + 1;
        UNTIL Object.NEXT = 0;

      IF GUIALLOWED THEN
        Window.CLOSE;

      IF ShowStatus THEN
        MESSAGE(Text016,ChangedObjects);
    END;

    PROCEDURE FindHighestDBMTableNo@1240520023() : Integer;
    VAR
      Object@1240520001 : Record 2000000001;
    BEGIN
      Object.RESET;
      Object.SETFILTER("DBM Table No.",'>0');
      IF Object.FIND('-') THEN BEGIN
        REPEAT
          Object.SETFILTER("DBM Table No.",'>%1',Object."DBM Table No.");
        UNTIL NOT Object.FIND('-');

        EXIT(Object."DBM Table No.");
      END ELSE
        EXIT(0);
    END;

    PROCEDURE ObjectIsESSetup@1240520026(Object@1240520001 : Record 2000000001) : Boolean;
    BEGIN
      CASE Object.Type OF
        Object.Type::Table:
          EXIT(Object.ID IN [DATABASE::"ES FLADS Setup",DATABASE::"ES Security Setup"]);
        Object.Type::Page:
          EXIT(
            Object.ID IN
              [PAGE::"ES FLADS Setup",PAGE::"ES Security Setup",
               PAGE::"ES Setup Easy Security",PAGE::"ES Setup Recording Only"]);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE AddObjectIfLicensed@1240520011(VAR ObjectTmp@1240520010 : TEMPORARY Record 2000000001;Object@1240520009 : Record 2000000001;OnlyLicensedObjects@1240520001 : Boolean) : Boolean;
    VAR
      LicensePerm@1240520008 : Record 2000000043;
      ESObjectProperty@1240520011 : Record 14123522;
    BEGIN
      IF OnlyLicensedObjects THEN BEGIN
        IF LicensePerm.GET(Object.Type,Object.ID) THEN BEGIN
          IF LicensePerm."Read Permission" = LicensePerm."Read Permission"::Yes THEN BEGIN
            IF NOT ESObjectProperty.GET(Object.Type,Object.ID) THEN
              CLEAR(ESObjectProperty);

            IF NOT ESObjectProperty."Skip During Export" THEN BEGIN
              ObjectTmp := Object;
              ObjectTmp.INSERT;
              EXIT(TRUE);
            END;
          END;
        END ELSE
          IF Object.Type = Object.Type::Page THEN
            IF LicensePerm.GET(Object.Type::"2",Object.ID) THEN
              IF LicensePerm."Read Permission" = LicensePerm."Read Permission"::Yes THEN BEGIN
                IF NOT ESObjectProperty.GET(Object.Type,Object.ID) THEN
                  CLEAR(ESObjectProperty);

                IF NOT ESObjectProperty."Skip During Export" THEN BEGIN
                  ObjectTmp := Object;
                  ObjectTmp.INSERT;
                  EXIT(TRUE);
                END;
              END;
      END ELSE BEGIN
        IF NOT ESObjectProperty.GET(Object.Type,Object.ID) THEN
          CLEAR(ESObjectProperty);

        IF NOT ESObjectProperty."Skip During Export" THEN BEGIN
          ObjectTmp := Object;
          ObjectTmp.INSERT;
          EXIT(TRUE);
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE ClearExportObjects@1240520002();
    BEGIN
      ESObjectExplorerTmp.RESET;
      ESObjectExplorerTmp.DELETEALL;
    END;

    PROCEDURE AddExportObject@1240520003(ESObjectExplorer@1240520001 : Record 14123901);
    BEGIN
      ESObjectExplorerTmp := ESObjectExplorer;
      ESObjectExplorerTmp.INSERT;
    END;

    PROCEDURE CheckCorrectFileName@1240520004(VAR FileName@1240520001 : Text[250];ShowStatus@1240520003 : Boolean) : Boolean;
    BEGIN
      IF FileName = '' THEN
        EXIT(TRUE);

      IF STRLEN(FileName) > 2 THEN
        IF (COPYSTR(FileName,1,1) = '"') AND (COPYSTR(FileName,STRLEN(FileName),1) = '"') THEN
          FileName := COPYSTR(FileName,2,STRLEN(FileName) -2);

      IF EXISTS(FileName) THEN
        EXIT(TRUE);

      IF NOT ISSERVICETIER THEN
        EXIT(TRUE);

      IF COPYSTR(FileName,1,2) = '\\' THEN
        EXIT(TRUE);

      // Added upload function
      EXIT(TRUE);

      MESSAGE(Text004);
    END;

    BEGIN
    END.
  }
}

