OBJECT Table 14000714 Shipping Account
{
  OBJECT-PROPERTIES
  {
    Date=11/12/18;
    Time=12:00:00 PM;
    Version List=SE0.60.19.02;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               ShippingAccount.RESET;
               ShippingAccount.SETCURRENTKEY("Shipping Agent Code","Account No.");
               ShippingAccount.SETRANGE("Shipping Agent Code","Shipping Agent Code");
               ShippingAccount.SETRANGE("Account No.","Account No.");
               IF ShippingAccount.FIND('-') THEN BEGIN
                 "Shipping Insurance" := ShippingAccount."Shipping Insurance";
                 "Third Party Name" := ShippingAccount."Third Party Name";
                 "Third Party Name 2" := ShippingAccount."Third Party Name 2";
                 "Third Party Address" := ShippingAccount."Third Party Address";
                 "Third Party Address 2" := ShippingAccount."Third Party Address 2";
                 "Third Party City" := ShippingAccount."Third Party City";
                 "Third Party Contact" := ShippingAccount."Third Party Contact";
                 "Third Party ZIP Code" := ShippingAccount."Third Party ZIP Code";
                 "Third Party State" := ShippingAccount."Third Party State";
                 "Third Party Country Code" := ShippingAccount."Third Party Country Code";
                 "Third Party Phone No." := ShippingAccount."Third Party Phone No.";
                 "Third Party Fax No." := ShippingAccount."Third Party Fax No.";
               END ELSE BEGIN
                 IF "Third Party Name" = '' THEN BEGIN
                   GetShippingSetup;
                   CASE TRUE OF
                     ("Ship-to Type" = "Ship-to Type"::Customer) AND
                     ("Ship-to No." <> '') AND ("Ship-to Code" = ''):
                       BEGIN
                         Customer.GET("Ship-to No.");
                         "Shipping Insurance" := Customer."Shipping Insurance";
                         "Third Party Name" := Customer.Name;
                         "Third Party Name 2" := Customer."Name 2";
                         "Third Party Address" := Customer.Address;
                         "Third Party Address 2" := Customer."Address 2";
                         "Third Party City" := Customer.City;
                         "Third Party Contact" := Customer.Contact;
                         "Third Party ZIP Code" := ShippingSetup.AdjustZIPCode(Customer."Post Code");
                         "Third Party State" := Customer.County;
                         "Third Party Country Code" := Customer."Country/Region Code";
                         ShippingSetup.AdjustZIPStateCityCode(
                           "Third Party ZIP Code","Third Party State",
                           "Third Party City","Third Party Country Code");
                         "Third Party Phone No." := Customer."Phone No.";
                         "Third Party Fax No." := Customer."Fax No.";
                       END;
                     ("Ship-to Type" = "Ship-to Type"::Customer) AND
                     ("Ship-to No." <> '') AND ("Ship-to Code" <> ''):
                       BEGIN
                         ShipToAddress.GET("Ship-to No.","Ship-to Code");
                         "Shipping Insurance" := ShipToAddress."Shipping Insurance";
                         "Third Party Name" := ShipToAddress.Name;
                         "Third Party Name 2" := ShipToAddress."Name 2";
                         "Third Party Address" := ShipToAddress.Address;
                         "Third Party Address 2" := ShipToAddress."Address 2";
                         "Third Party City" := ShipToAddress.City;
                         "Third Party Contact" := ShipToAddress.Contact;
                         "Third Party ZIP Code" := ShippingSetup.AdjustZIPCode(ShipToAddress."Post Code");
                         "Third Party State" := ShipToAddress.County;
                         "Third Party Country Code" := ShipToAddress."Country/Region Code";
                         ShippingSetup.AdjustZIPStateCityCode(
                           "Third Party ZIP Code","Third Party State",
                           "Third Party City","Third Party Country Code");
                         "Third Party Phone No." := ShipToAddress."Phone No.";
                         "Third Party Fax No." := ShipToAddress."Fax No.";
                       END;
                     ("Ship-to Type" = "Ship-to Type"::Vendor) AND
                     ("Ship-to No." <> '') AND ("Ship-to Code" = ''):
                       BEGIN
                         Vendor.GET("Ship-to No.");
                         "Shipping Insurance" := Vendor."Shipping Insurance";
                         "Third Party Name" := Vendor.Name;
                         "Third Party Name 2" := Vendor."Name 2";
                         "Third Party Address" := Vendor.Address;
                         "Third Party Address 2" := Vendor."Address 2";
                         "Third Party City" := Vendor.City;
                         "Third Party Contact" := Vendor.Contact;
                         "Third Party ZIP Code" := ShippingSetup.AdjustZIPCode(Vendor."Post Code");
                         "Third Party State" := Vendor.County;
                         "Third Party Country Code" := Vendor."Country/Region Code";
                         ShippingSetup.AdjustZIPStateCityCode(
                           "Third Party ZIP Code","Third Party State",
                           "Third Party City","Third Party Country Code");
                         "Third Party Phone No." := Vendor."Phone No.";
                         "Third Party Fax No." := Vendor."Fax No.";
                       END;
                     ("Ship-to Type" = "Ship-to Type"::Vendor) AND
                     ("Ship-to No." <> '') AND ("Ship-to Code" <> ''):
                       BEGIN
                         OrderAddress.GET("Ship-to No.","Ship-to Code");
                         "Shipping Insurance" := OrderAddress."Shipping Insurance";
                         "Third Party Name" := OrderAddress.Name;
                         "Third Party Name 2" := OrderAddress."Name 2";
                         "Third Party Address" := OrderAddress.Address;
                         "Third Party Address 2" := OrderAddress."Address 2";
                         "Third Party City" := OrderAddress.City;
                         "Third Party Contact" := OrderAddress.Contact;
                         "Third Party ZIP Code" := ShippingSetup.AdjustZIPCode(OrderAddress."Post Code");
                         "Third Party State" := OrderAddress.County;
                         "Third Party Country Code" := OrderAddress."Country/Region Code";
                         ShippingSetup.AdjustZIPStateCityCode(
                           "Third Party ZIP Code","Third Party State",
                           "Third Party City","Third Party Country Code");
                         "Third Party Phone No." := OrderAddress."Phone No.";
                         "Third Party Fax No." := OrderAddress."Fax No.";
                       END;
                     ("Ship-to Type" = "Ship-to Type"::Location) AND
                     ("Ship-to No." <> ''):
                       BEGIN
                         Location.GET("Ship-to No.");
                         "Shipping Insurance" := Location."Shipping Insurance";
                         "Third Party Name" := Location.Name;
                         "Third Party Name 2" := Location."Name 2";
                         "Third Party Address" := Location.Address;
                         "Third Party Address 2" := Location."Address 2";
                         "Third Party City" := Location.City;
                         "Third Party Contact" := Location.Contact;
                         "Third Party ZIP Code" := ShippingSetup.AdjustZIPCode(Location."Post Code");
                         "Third Party State" := Location.County;
                         "Third Party Country Code" := Location."Country/Region Code";
                         ShippingSetup.AdjustZIPStateCityCode(
                           "Third Party ZIP Code","Third Party State",
                           "Third Party City","Third Party Country Code");
                         "Third Party Phone No." := Location."Phone No.";
                         "Third Party Fax No." := Location."Fax No.";
                       END;
                   END;
                 END;
               END;
             END;

    OnModify=BEGIN
               IF "Primary Account" THEN BEGIN
                 ShippingAccount.RESET;
                 ShippingAccount.SETRANGE("Ship-to Type","Ship-to Type");
                 ShippingAccount.SETRANGE("Ship-to No.","Ship-to No.");
                 ShippingAccount.SETRANGE("Ship-to Code","Ship-to Code");
                 ShippingAccount.SETRANGE("Shipping Agent Code","Shipping Agent Code");
                 ShippingAccount.SETRANGE("Primary Account",TRUE);
                 IF ShippingAccount.FIND('-') THEN
                   IF (ShippingAccount."Account No." <> "Account No.") OR
                      (ShippingAccount.NEXT <> 0)
                   THEN
                     ERROR(Text001);
               END;

               GetShippingAgent;
               IF NOT ChangedFromOther THEN BEGIN
                 ShippingAccount.RESET;
                 ShippingAccount.SETCURRENTKEY("Shipping Agent Code","Account No.");
                 ShippingAccount.SETRANGE("Shipping Agent Code","Shipping Agent Code");
                 ShippingAccount.SETRANGE("Account No.","Account No.");
                 ChangeOther := ShippingAccount.FIND('-');
                 IF ("Ship-to No." = ShippingAccount."Ship-to No.") AND
                    ("Ship-to Code" = ShippingAccount."Ship-to Code") AND
                    ("Shipping Agent Code" = ShippingAccount."Shipping Agent Code") AND
                    ("Account No." = ShippingAccount."Account No.") AND
                    ChangeOther
                 THEN
                   ChangeOther := ShippingAccount.NEXT <> 0;

                 IF ChangeOther THEN
                   REPEAT
                     IF NOT (("Ship-to No." = ShippingAccount."Ship-to No.") AND
                             ("Ship-to Code" = ShippingAccount."Ship-to Code") AND
                             ("Shipping Agent Code" = ShippingAccount."Shipping Agent Code") AND
                             ("Account No." = ShippingAccount."Account No."))
                     THEN BEGIN
                       ShippingAccount."Shipping Insurance" := "Shipping Insurance";
                       ShippingAccount."Third Party Name" := "Third Party Name";
                       ShippingAccount."Third Party Name 2" := "Third Party Name 2";
                       ShippingAccount."Third Party Address" := "Third Party Address";
                       ShippingAccount."Third Party Address 2" := "Third Party Address 2";
                       ShippingAccount."Third Party City" := "Third Party City";
                       ShippingAccount."Third Party Contact" := "Third Party Contact";
                       ShippingAccount."Third Party ZIP Code" := "Third Party ZIP Code";
                       ShippingAccount."Third Party State" := "Third Party State";
                       ShippingAccount."Third Party Country Code" := "Third Party Country Code";
                       ShippingAccount."Third Party Phone No." := "Third Party Phone No.";
                       ShippingAccount."Third Party Fax No." := "Third Party Fax No.";
                       ShippingAccount.SetChangedFromOther;
                       ShippingAccount.MODIFY(TRUE);
                     END;
                   UNTIL ShippingAccount.NEXT = 0;
               END;
             END;

    CaptionML=ENU=Shipping Account;
    LookupPageID=Page14000257;
  }
  FIELDS
  {
    { 1   ;   ;Ship-to No.         ;Code20        ;TableRelation=IF (Ship-to Type=CONST(Customer)) Customer
                                                                 ELSE IF (Ship-to Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Ship-to Type=CONST(Location)) Location;
                                                   CaptionML=ENU=Ship-to No.;
                                                   NotBlank=Yes }
    { 2   ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   CaptionML=ENU=Shipping Agent Code;
                                                   NotBlank=Yes }
    { 3   ;   ;Ship-to Code        ;Code20        ;TableRelation=IF (Ship-to Type=CONST(Customer)) "Ship-to Address".Code WHERE (Customer No.=FIELD(Ship-to No.))
                                                                 ELSE IF (Ship-to Type=CONST(Vendor)) "Order Address".Code WHERE (Vendor No.=FIELD(Ship-to No.));
                                                   CaptionML=ENU=Ship-to Code }
    { 4   ;   ;Ship-to Type        ;Option        ;CaptionML=ENU=Ship-to Type;
                                                   OptionCaptionML=ENU=Customer,Vendor,Bank,Contact,Resource,Employee,,Location;
                                                   OptionString=Customer,Vendor,Bank,Contact,Resource,Employee,,Location }
    { 11  ;   ;Account No.         ;Code20        ;OnValidate=BEGIN
                                                                TestShippingAccountNo("Account No.");
                                                              END;

                                                   CaptionML=ENU=Account No.;
                                                   NotBlank=Yes }
    { 12  ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 13  ;   ;Use Only for Ship-to No.;Boolean   ;OnValidate=BEGIN
                                                                TESTFIELD("Ship-to Code",'');
                                                              END;

                                                   CaptionML=ENU=Use Only for Ship-to No. }
    { 14  ;   ;Shipping Insurance  ;Option        ;CaptionML=ENU=Shipping Insurance;
                                                   OptionCaptionML=ENU=" ,Never,Always";
                                                   OptionString=[ ,Never,Always] }
    { 15  ;   ;Primary Account     ;Boolean       ;CaptionML=ENU=Primary Account }
    { 21  ;   ;Third Party Name    ;Text50        ;CaptionML=ENU=Third Party Name }
    { 22  ;   ;Third Party Name 2  ;Text50        ;CaptionML=ENU=Third Party Name 2 }
    { 23  ;   ;Third Party Address ;Text50        ;CaptionML=ENU=Third Party Address }
    { 24  ;   ;Third Party Address 2;Text50       ;CaptionML=ENU=Third Party Address 2 }
    { 25  ;   ;Third Party City    ;Text30        ;CaptionML=ENU=Third Party City }
    { 26  ;   ;Third Party Contact ;Text50        ;CaptionML=ENU=Third Party Contact }
    { 27  ;   ;Third Party ZIP Code;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Third Party ZIP Code }
    { 28  ;   ;Third Party State   ;Text30        ;CaptionML=ENU=Third Party State }
    { 29  ;   ;Third Party Country Code;Code10    ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Third Party Country Code }
    { 30  ;   ;Third Party Phone No.;Text30       ;CaptionML=ENU=Third Party Phone No. }
    { 31  ;   ;Third Party Fax No. ;Text30        ;CaptionML=ENU=Third Party Fax No. }
    { 32  ;   ;Third Party Tax ID  ;Code15        ;CaptionML=ENU=Third Party Tax ID }
  }
  KEYS
  {
    {    ;Ship-to Type,Ship-to No.,Ship-to Code,Shipping Agent Code,Account No.;
                                                   Clustered=Yes }
    {    ;Shipping Agent Code,Account No.          }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Account No.,Description,Shipping Agent Code }
  }
  CODE
  {
    VAR
      Customer@1000000000 : Record 18;
      ShipToAddress@1000000004 : Record 222;
      Vendor@1240030004 : Record 23;
      OrderAddress@1240030005 : Record 224;
      Location@1240030006 : Record 14;
      ShippingAgent@1000000001 : Record 291;
      ShippingAccount@1240030000 : Record 14000714;
      ShippingSetup@1240030003 : Record 14000707;
      ShipperTypeMgt@1240030009 : Codeunit 14000711;
      ChangeOther@1240030001 : Boolean;
      ChangedFromOther@1240030002 : Boolean;
      Text001@1001 : TextConst 'ENU=Only one primary account per Shipping Agent.';
      Text003@1003 : TextConst 'ENU=Ship-to Type must be Customer.';
      ShippingSetupRetrieved@1240030008 : Boolean;
      Text004@1240030007 : TextConst 'ENU=No Shipping Accounts exist.';

    PROCEDURE GetShippingAgent@1();
    BEGIN
      IF ShippingAgent.Code <> "Shipping Agent Code" THEN
        IF "Shipping Agent Code" <> '' THEN
          ShippingAgent.GET("Shipping Agent Code")
        ELSE
          CLEAR(ShippingAgent);
    END;

    PROCEDURE GetPrimaryShippingAccountNo@3(ShippingAgentCode@1240030000 : Code[10];ShipToType@1240030001 : 'Customer,Vendor,Bank,Prospect,Resource,Employee,,Location';ShipToNo@1240030002 : Code[20];ShipToCode@1240030003 : Code[20]) : Boolean;
    BEGIN
      CASE ShipToType OF
        ShipToType::Customer:
          IF ShipToCode <> '' THEN BEGIN
            RESET;
            SETRANGE("Ship-to Type","Ship-to Type"::Customer);
            SETRANGE("Ship-to No.",ShipToNo);
            SETRANGE("Ship-to Code",ShipToCode);
            SETRANGE("Shipping Agent Code",ShippingAgentCode);
            SETRANGE("Primary Account",TRUE);
            IF NOT FIND('-') THEN BEGIN
              SETRANGE("Ship-to Code",'');
              IF FIND('-') THEN
                EXIT(NOT "Use Only for Ship-to No.");
            END ELSE
              EXIT(TRUE);
          END ELSE BEGIN
            RESET;
            SETRANGE("Ship-to Type","Ship-to Type"::Customer);
            SETRANGE("Ship-to No.",ShipToNo);
            SETRANGE("Ship-to Code",'');
            SETRANGE("Shipping Agent Code",ShippingAgentCode);
            SETRANGE("Primary Account",TRUE);
            EXIT(FIND('-'));
          END;
        ShipToType::Vendor:
          IF ShipToCode <> '' THEN BEGIN
            RESET;
            SETRANGE("Ship-to Type","Ship-to Type"::Vendor);
            SETRANGE("Ship-to No.",ShipToNo);
            SETRANGE("Ship-to Code",ShipToCode);
            SETRANGE("Shipping Agent Code",ShippingAgentCode);
            SETRANGE("Primary Account",TRUE);
            IF NOT FIND('-') THEN BEGIN
              SETRANGE("Ship-to Code",'');
              IF FIND('-') THEN
                EXIT(NOT "Use Only for Ship-to No.");
            END ELSE
              EXIT(TRUE);
          END ELSE BEGIN
            RESET;
            SETRANGE("Ship-to Type","Ship-to Type"::Vendor);
            SETRANGE("Ship-to No.",ShipToNo);
            SETRANGE("Ship-to Code",'');
            SETRANGE("Shipping Agent Code",ShippingAgentCode);
            SETRANGE("Primary Account",TRUE);
            EXIT(FIND('-'));
          END;
        ShipToType::Location:
          BEGIN
            RESET;
            SETRANGE("Ship-to Type","Ship-to Type"::Location);
            SETRANGE("Ship-to No.",ShipToNo);
            SETRANGE("Ship-to Code",'');
            SETRANGE("Shipping Agent Code",ShippingAgentCode);
            SETRANGE("Primary Account",TRUE);
            EXIT(FIND('-'));
          END;
        ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE TestShippingAccountNo@4(AccountNo@1240030000 : Code[20]);
    BEGIN
      GetShippingAgent;
      GetShippingSetup;
      ShipperTypeMgt.ShippingAccountTestAccountNo(Rec,ShippingAgent,ShippingSetup,AccountNo);
    END;

    PROCEDURE LookupThirdPartyAccountNo@5(ShippingAgentCode@1240030000 : Code[10];ShipToType@1240030001 : 'Customer,Vendor,Bank,Prospect,Resource,Employee,,Location';ShipToNo@1240030002 : Code[20];ShipToCode@1240030003 : Code[20]) : Boolean;
    BEGIN
      CASE ShipToType OF
        ShipToType::Customer:
          BEGIN
            ShippingAccount.RESET;
            ShippingAccount.SETRANGE("Ship-to Type","Ship-to Type"::Customer);
            ShippingAccount.SETRANGE("Ship-to No.",ShipToNo);
            ShippingAccount.SETFILTER("Ship-to Code",'%1|%2','',ShipToCode);
            ShippingAccount.SETRANGE("Shipping Agent Code",ShippingAgentCode);
            IF PAGE.RUNMODAL(0,ShippingAccount) = ACTION::LookupOK THEN BEGIN
              IF ShipToCode <> '' THEN
                ShippingAccount.TESTFIELD("Use Only for Ship-to No.",FALSE);

              EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END;
        ShipToType::Vendor:
          BEGIN
            ShippingAccount.RESET;
            ShippingAccount.SETRANGE("Ship-to Type","Ship-to Type"::Vendor);
            ShippingAccount.SETRANGE("Ship-to No.",ShipToNo);
            ShippingAccount.SETFILTER("Ship-to Code",'%1|%2','',ShipToCode);
            ShippingAccount.SETRANGE("Shipping Agent Code",ShippingAgentCode);
            IF PAGE.RUNMODAL(0,ShippingAccount) = ACTION::LookupOK THEN BEGIN
              IF ShipToCode <> '' THEN
                ShippingAccount.TESTFIELD("Use Only for Ship-to No.",FALSE);

              EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END;
        ShipToType::Location:
          BEGIN
            ShippingAccount.RESET;
            ShippingAccount.SETRANGE("Ship-to Type","Ship-to Type"::Location);
            ShippingAccount.SETRANGE("Ship-to No.",ShipToNo);
            ShippingAccount.SETRANGE("Shipping Agent Code",ShippingAgentCode);
            IF PAGE.RUNMODAL(0,ShippingAccount) = ACTION::LookupOK THEN BEGIN
              EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END;
        ELSE
          ERROR(Text003);
      END;
    END;

    PROCEDURE GetLookupAccountNo@7() : Code[20];
    BEGIN
      EXIT(ShippingAccount."Account No.");
    END;

    PROCEDURE SetChangedFromOther@6();
    BEGIN
      ChangedFromOther := TRUE;
    END;

    PROCEDURE GetShippingAccountOptionPage@1240030000(ShipToType@1240030003 : 'Customer,Vendor,Bank,Prospect,Resource,Employee,,Location';ShipToNo@1240030002 : Code[20];ShipToCode@1240030001 : Code[20];ShippingAgentCode@1240030004 : Code[10];ThirdPartyAccountNo@1240030000 : Code[20]) : Boolean;
    BEGIN
      CASE ShipToType OF
        ShipToType::Customer:
          BEGIN
            IF ShipToCode <> '' THEN
              IF GET(ShipToType,ShipToNo,ShipToCode,ShippingAgentCode,ThirdPartyAccountNo) THEN
                EXIT(TRUE);

            IF GET(ShipToType,ShipToNo,'',ShippingAgentCode,ThirdPartyAccountNo) THEN
              EXIT(NOT "Use Only for Ship-to No." OR (ShipToCode = ''))
            ELSE
              EXIT(FALSE);
          END;
        ShipToType::Vendor:
          BEGIN
            IF ShipToCode <> '' THEN
              IF GET(ShipToType,ShipToNo,ShipToCode,ShippingAgentCode,ThirdPartyAccountNo) THEN
                EXIT(TRUE);

            IF GET(ShipToType,ShipToNo,'',ShippingAgentCode,ThirdPartyAccountNo) THEN
              EXIT(NOT "Use Only for Ship-to No." OR (ShipToCode = ''))
            ELSE
              EXIT(FALSE);
          END;
        ShipToType::Location:
          EXIT(GET(ShipToType,ShipToNo,'',ShippingAgentCode,ThirdPartyAccountNo))
        ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE GetShippingSetup@1240030001();
    BEGIN
      IF NOT ShippingSetupRetrieved THEN BEGIN
        ShippingSetup.GET;
        ShippingSetupRetrieved := TRUE;
      END;
    END;

    PROCEDURE ValidateShippingAccount@1240030002(CurrentShippingAgent@1240030000 : Record 291;ShippingPaymentType@1240030004 : 'Prepaid,Third Party,Freight Collect,Consignee';ShipToType@1240030001 : Integer;ShipToNo@1240030002 : Code[20];ShipToCode@1240030003 : Code[20]);
    BEGIN
      IF ShippingPaymentType = ShippingPaymentType::"Third Party" THEN
        IF CurrentShippingAgent."Shipper Type" <> CurrentShippingAgent."Shipper Type"::" " THEN
          IF ShipToCode <> '' THEN BEGIN
            ShippingAccount.SETRANGE("Ship-to Type",ShipToType);
            ShippingAccount.SETRANGE("Ship-to No.",ShipToNo);
            ShippingAccount.SETFILTER("Ship-to Code",'%1','');
            ShippingAccount.SETRANGE("Shipping Agent Code",CurrentShippingAgent.Code);
            ShippingAccount.SETRANGE("Use Only for Ship-to No.",FALSE);
            IF NOT ShippingAccount.FIND('-') THEN BEGIN
              ShippingAccount.SETRANGE("Ship-to Code",ShipToCode);
              ShippingAccount.SETRANGE("Use Only for Ship-to No.");
              IF NOT ShippingAccount.FIND('-') THEN
                MESSAGE(Text004);
            END;
          END ELSE BEGIN
            ShippingAccount.RESET;
            ShippingAccount.SETRANGE("Ship-to Type",ShipToType);
            ShippingAccount.SETRANGE("Ship-to No.",ShipToNo);
            ShippingAccount.SETRANGE("Ship-to Code",ShipToCode);
            ShippingAccount.SETRANGE("Shipping Agent Code",CurrentShippingAgent.Code);
            IF NOT ShippingAccount.FIND('-') THEN
             MESSAGE(Text004);
          END;
    END;

    BEGIN
    END.
  }
}

