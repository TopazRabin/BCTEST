OBJECT Table 14123521 ES Security Setup
{
  OBJECT-PROPERTIES
  {
    Date=10/03/19;
    Time=12:00:00 PM;
    Version List=ES1.41.57;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CRONUSCompanyComment;

               Comment(1,STRSUBSTNO(Text013,TABLECAPTION));

               "Created By User" := USERID;
               "Created Date Time" := CURRENTDATETIME;
             END;

    OnModify=BEGIN
               CRONUSCompanyComment;

               Comment(1,STRSUBSTNO(Text014,TABLECAPTION));
             END;

    OnDelete=BEGIN
               Comment(1,STRSUBSTNO(Text015,TABLECAPTION));
             END;

    CaptionML=ENU=Security Setup;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 2   ;   ;Table Level Security;Boolean       ;OnValidate=BEGIN
                                                                Object0ExistsWarning(1,"Table Level Security",xRec."Table Level Security");
                                                              END;

                                                   CaptionML=ENU=Table Level Security }
    { 3   ;   ;Form Level Security ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                Object0ExistsWarning(2,"Form Level Security",xRec."Form Level Security");
                                                              END;

                                                   CaptionML=ENU=Form Level Security }
    { 4   ;   ;Report Level Security;Boolean      ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                Object0ExistsWarning(3,"Report Level Security",xRec."Report Level Security");
                                                              END;

                                                   CaptionML=ENU=Report Level Security }
    { 5   ;   ;Dataport Level Security;Boolean    ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                Object0ExistsWarning(4,"Dataport Level Security",xRec."Dataport Level Security");
                                                              END;

                                                   CaptionML=ENU=Dataport Level Security }
    { 6   ;   ;Codeunit Level Security;Boolean    ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                Object0ExistsWarning(5,"Codeunit Level Security",xRec."Codeunit Level Security");
                                                              END;

                                                   CaptionML=ENU=Codeunit Level Security }
    { 7   ;   ;XMLPort Level Security;Boolean     ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                Object0ExistsWarning(6,"XMLPort Level Security",xRec."XMLPort Level Security");
                                                              END;

                                                   CaptionML=ENU=XMLPort Level Security }
    { 8   ;   ;Page Level Security ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                Object0ExistsWarning(8,"Page Level Security",xRec."Page Level Security");
                                                              END;

                                                   CaptionML=ENU=Page Level Security }
    { 9   ;   ;All Free Tables Role ID;Code20     ;TableRelation="ES Role";
                                                   OnValidate=BEGIN
                                                                IF "All Free Tables Role ID" <> '' THEN
                                                                  TESTFIELD("All Free Objects Role ID",'');
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=All Free Tables Permission Set ID }
    { 10  ;   ;All Free Forms Role ID;Code20      ;TableRelation="ES Role";
                                                   OnValidate=BEGIN
                                                                IF "All Free Forms Role ID" <> '' THEN
                                                                  TESTFIELD("All Free Objects Role ID",'');
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=All Free Forms Permission Set ID }
    { 11  ;   ;All Free Reports Role ID;Code20    ;TableRelation="ES Role";
                                                   OnValidate=BEGIN
                                                                IF "All Free Reports Role ID" <> '' THEN
                                                                  TESTFIELD("All Free Objects Role ID",'');
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=All Free Reports Permission Set ID }
    { 12  ;   ;All Free Dataports Role ID;Code20  ;TableRelation="ES Role";
                                                   OnValidate=BEGIN
                                                                IF "All Free Dataports Role ID" <> '' THEN
                                                                  TESTFIELD("All Free Objects Role ID",'');
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=All Free Dataports Permission Set ID }
    { 13  ;   ;All Free Codeunits Role ID;Code20  ;TableRelation="ES Role";
                                                   OnValidate=BEGIN
                                                                IF "All Free Codeunits Role ID" <> '' THEN
                                                                  TESTFIELD("All Free Objects Role ID",'');
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=All Free Codeunits Permission Set ID }
    { 14  ;   ;All Free XMLPorts Role ID;Code20   ;TableRelation="ES Role";
                                                   OnValidate=BEGIN
                                                                IF "All Free XMLPorts Role ID" <> '' THEN
                                                                  TESTFIELD("All Free Objects Role ID",'');
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=All Free XMLPorts Permission Set ID }
    { 15  ;   ;All Free Pages Role ID;Code20      ;TableRelation="ES Role";
                                                   OnValidate=BEGIN
                                                                IF "All Free Pages Role ID" <> '' THEN
                                                                  TESTFIELD("All Free Objects Role ID",'');
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=All Free Pages Permission Set ID }
    { 16  ;   ;ALL Role ID         ;Code20        ;TableRelation="Permission Set";
                                                   OnLookup=BEGIN
                                                              "ALL Role ID" := LookupLiveRole("ALL Role ID");
                                                              CALCFIELDS("ALL Role Exists");
                                                            END;

                                                   CaptionML=ENU=ALL Permission Set ID }
    { 17  ;   ;SUPER Role ID       ;Code20        ;InitValue=SUPER;
                                                   TableRelation="Permission Set";
                                                   OnLookup=BEGIN
                                                              "SUPER Role ID" := LookupLiveRole("SUPER Role ID");
                                                              CALCFIELDS("SUPER Role Exists");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=SUPER Permission Set ID }
    { 18  ;   ;SUPER (DATA) Role ID;Code20        ;TableRelation="Permission Set";
                                                   OnLookup=BEGIN
                                                              "SUPER (DATA) Role ID" := LookupLiveRole("SUPER (DATA) Role ID");
                                                              CALCFIELDS("SUPER (DATA) Role Exists");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=SUPER (DATA) Permission Set ID }
    { 19  ;   ;Source Code File Name;Text250      ;OnValidate=VAR
                                                                ESObjectExplorer@1240520001 : Record 14123901;
                                                              BEGIN
                                                                ESObjectExplorer.CheckCorrectFileName("Source Code File Name",TRUE);
                                                              END;

                                                   OnLookup=VAR
                                                              ESObjectExplorer@1240520001 : Record 14123901;
                                                              CommonDialogMgt@1240520008 : Codeunit 14123901;
                                                            BEGIN
                                                              "Source Code File Name" :=
                                                                CommonDialogMgt.OpenFile(
                                                                  FIELDCAPTION("Source Code File Name"),"Source Code File Name",1,'*.txt',0);
                                                              ESObjectExplorer.CheckCorrectFileName("Source Code File Name",TRUE);
                                                            END;

                                                   CaptionML=ENU=Source Code File Name }
    { 20  ;   ;Test Mode           ;Boolean       ;CaptionML=ENU=Test Mode }
    { 21  ;   ;Import Source Code  ;Boolean       ;CaptionML=ENU=Import Source Code }
    { 22  ;   ;Restore Point Nos.  ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Restore Point Nos. }
    { 23  ;   ;Recording Nos.      ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Recording Nos. }
    { 24  ;   ;All Limited Tables Role ID;Code20  ;TableRelation="ES Role";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=All Limited Tables Permission Set ID }
    { 25  ;   ;All Limited Forms Role ID;Code20   ;TableRelation="ES Role";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=All Limited Forms Permission Set ID }
    { 26  ;   ;All Limited Reports Role ID;Code20 ;TableRelation="ES Role";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=All Limited Reports Permission Set ID }
    { 27  ;   ;All Limited Dataports Role ID;Code20;
                                                   TableRelation="ES Role";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=All Limited Dataports Permission Set ID }
    { 28  ;   ;All Limited Codeunits Role ID;Code20;
                                                   TableRelation="ES Role";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=All Limited Codeunits Permission Set ID }
    { 29  ;   ;All Limited XMLPorts Role ID;Code20;TableRelation="ES Role";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=All Limited XMLPorts Permission Set ID }
    { 30  ;   ;All Limited Pages Role ID;Code20   ;TableRelation="ES Role";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=All Limited Pages Permission Set ID }
    { 31  ;   ;BASIC Role ID       ;Code20        ;TableRelation="Permission Set";
                                                   OnLookup=BEGIN
                                                              "BASIC Role ID" := LookupLiveRole("BASIC Role ID");
                                                              CALCFIELDS("BASIC Role Exists");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=BASIC Permission Set ID }
    { 32  ;   ;Default Restore Point FileName;Text250;
                                                   OnValidate=BEGIN
                                                                IF ("Default Restore Point FileName" <> '') AND
                                                                   (STRPOS("Default Restore Point FileName",'%1') = 0)
                                                                THEN
                                                                  MESSAGE(
                                                                    Text032,
                                                                    FIELDCAPTION("Default Restore Point FileName"),'%1');
                                                              END;

                                                   OnLookup=VAR
                                                              CommonDialogMgt@1240520008 : Codeunit 14123901;
                                                            BEGIN
                                                              "Default Restore Point FileName" :=
                                                                CommonDialogMgt.OpenFile(
                                                                  FIELDCAPTION("Default Restore Point FileName"),"Default Restore Point FileName",1,'*.txt',1);
                                                              VALIDATE("Default Restore Point FileName");
                                                            END;

                                                   CaptionML=ENU=Default Restore Point File Name }
    { 33  ;   ;Default Recording File Name;Text250;OnValidate=BEGIN
                                                                IF ("Default Recording File Name" <> '') AND
                                                                   (STRPOS("Default Recording File Name",'%1') = 0)
                                                                THEN
                                                                  MESSAGE(
                                                                    Text032,
                                                                    FIELDCAPTION("Default Recording File Name"),'%1');
                                                              END;

                                                   OnLookup=VAR
                                                              CommonDialogMgt@1240520008 : Codeunit 14123901;
                                                            BEGIN
                                                              "Default Recording File Name" :=
                                                                CommonDialogMgt.OpenFile(
                                                                  FIELDCAPTION("Default Recording File Name"),"Default Recording File Name",1,'*.txt',1);
                                                              VALIDATE("Default Recording File Name");
                                                            END;

                                                   CaptionML=ENU=Default Recording File Name }
    { 35  ;   ;Default Role Detail File Name;Text250;
                                                   OnValidate=BEGIN
                                                                IF ("Default Role Detail File Name" <> '') AND
                                                                   (STRPOS("Default Role Detail File Name",'%1') = 0)
                                                                THEN
                                                                  MESSAGE(
                                                                    Text032,
                                                                    FIELDCAPTION("Default Role Detail File Name"),'%1');
                                                              END;

                                                   OnLookup=VAR
                                                              CommonDialogMgt@1240520008 : Codeunit 14123901;
                                                            BEGIN
                                                              "Default Role Detail File Name" :=
                                                                CommonDialogMgt.OpenFile(
                                                                  FIELDCAPTION("Default Role Detail File Name"),"Default Role Detail File Name",1,'*.txt',1);
                                                              VALIDATE("Default Role Detail File Name");
                                                            END;

                                                   CaptionML=ENU=Default Permission Set Detail File Name }
    { 36  ;   ;Extend Insert Permissions;Boolean  ;InitValue=Yes;
                                                   CaptionML=ENU=Extend Insert Permissions }
    { 37  ;   ;Add Related Permissions;Boolean    ;InitValue=Yes;
                                                   CaptionML=ENU=Add Related Permissions }
    { 38  ;   ;Role for Both Clients;Boolean      ;InitValue=Yes;
                                                   CaptionML=ENU=Permission Set for Both Clients }
    { 39  ;   ;Object Range Filter ;Text250       ;InitValue=..49999|99000000..99009999;
                                                   CaptionML=ENU=Object Range Filter }
    { 40  ;   ;Demo in CRONUS      ;Boolean       ;CaptionML=ENU=Demo in CRONUS }
    { 41  ;   ;Source Code Analyzer Licensed;Boolean;
                                                   OnValidate=VAR
                                                                LicensePerm@1240520008 : Record 2000000043;
                                                              BEGIN
                                                                IF "Source Code Analyzer Licensed" THEN BEGIN
                                                                  LicensePerm.GET(LicensePerm."Object Type"::Table,14123601);
                                                                  IF LicensePerm."Execute Permission" <> LicensePerm."Execute Permission"::Yes THEN
                                                                    IF NOT CONFIRM(Text033,FALSE) THEN
                                                                      ERROR(Text034);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Source Code Analyzer Licensed }
    { 42  ;   ;Permission Recorder Licensed;Boolean;
                                                   OnValidate=VAR
                                                                LicensePerm@1240520008 : Record 2000000043;
                                                              BEGIN
                                                                IF "Permission Recorder Licensed" THEN BEGIN
                                                                  LicensePerm.GET(LicensePerm."Object Type"::Table,14123651);
                                                                  IF LicensePerm."Execute Permission" <> LicensePerm."Execute Permission"::Yes THEN
                                                                    IF NOT CONFIRM(Text033,FALSE) THEN
                                                                      ERROR(Text034);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Permission Recorder Licensed }
    { 43  ;   ;Include All Summary Perms.;Boolean ;CaptionML=ENU=Include All Summary Permissions }
    { 44  ;   ;TableData Read Perm. Default;Option;InitValue=Yes;
                                                   CaptionML=ENU=TableData Read Perm. Default;
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect] }
    { 45  ;   ;TableData Insert Perm. Default;Option;
                                                   CaptionML=ENU=TableData Insert Perm. Default;
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect] }
    { 46  ;   ;TableData Modify Perm. Default;Option;
                                                   CaptionML=ENU=TableData Modify Perm. Default;
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect] }
    { 47  ;   ;TableData Delete Perm. Default;Option;
                                                   CaptionML=ENU=TableData Delete Perm. Default;
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect] }
    { 48  ;   ;TableData Execute Perm Default;Option;
                                                   CaptionML=ENU=TableData Execute Perm. Default;
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect] }
    { 49  ;   ;Object Read Perm. Default;Option   ;CaptionML=ENU=Object Read Perm. Default;
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect] }
    { 50  ;   ;Object Insert Perm. Default;Option ;CaptionML=ENU=Object Insert Perm. Default;
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect] }
    { 51  ;   ;Object Modify Perm. Default;Option ;CaptionML=ENU=Object Modify Perm. Default;
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect] }
    { 52  ;   ;Object Delete Perm. Default;Option ;CaptionML=ENU=Object Delete Perm. Default;
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect] }
    { 53  ;   ;Object Execute Perm. Default;Option;InitValue=Yes;
                                                   CaptionML=ENU=Object Execute Perm. Default;
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect] }
    { 54  ;   ;Use Indirect for FlowFields;Boolean;InitValue=Yes;
                                                   CaptionML=ENU=Use Indirect for FlowFields }
    { 55  ;   ;Lines to Match in Compare;Integer  ;InitValue=1;
                                                   CaptionML=ENU=Lines to Match in Compare;
                                                   MinValue=1;
                                                   MaxValue=10 }
    { 56  ;   ;Lines to Include in Log;Integer    ;InitValue=2;
                                                   CaptionML=ENU=Lines to Include in Log;
                                                   MinValue=0;
                                                   MaxValue=10 }
    { 57  ;   ;Include Objs. in Restore Point;Boolean;
                                                   CaptionML=ENU=Include Objects in Restore Point }
    { 58  ;   ;Timer Update Interval;Integer      ;InitValue=60;
                                                   CaptionML=ENU=Timer Update Interval;
                                                   MinValue=0;
                                                   MaxValue=300 }
    { 59  ;   ;Add All Role Builder Perms.;Boolean;InitValue=Yes;
                                                   CaptionML=ENU=Add All Builder Permissions }
    { 60  ;   ;Add All Recording Permissions;Boolean;
                                                   InitValue=Yes;
                                                   CaptionML=ENU=Add All Recording Permissions }
    { 61  ;   ;Limit All Tables    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Limit All Tables" THEN
                                                                  TESTFIELD("Table Level Security");
                                                              END;

                                                   CaptionML=ENU=Limit All Tables }
    { 62  ;   ;Limit All Forms     ;Boolean       ;OnValidate=BEGIN
                                                                IF "Limit All Forms" THEN
                                                                  TESTFIELD("Form Level Security");
                                                              END;

                                                   CaptionML=ENU=Limit All Forms }
    { 63  ;   ;Limit All Reports   ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                IF "Limit All Reports" THEN
                                                                  TESTFIELD("Report Level Security");
                                                              END;

                                                   CaptionML=ENU=Limit All Reports }
    { 64  ;   ;Limit All Dataports ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                IF "Limit All Dataports" THEN
                                                                  TESTFIELD("Dataport Level Security");
                                                              END;

                                                   CaptionML=ENU=Limit All Dataports }
    { 65  ;   ;Limit All Codeunits ;Boolean       ;OnValidate=BEGIN
                                                                IF "Limit All Codeunits" THEN
                                                                  TESTFIELD("Codeunit Level Security");
                                                              END;

                                                   CaptionML=ENU=Limit All Codeunits }
    { 66  ;   ;Limit All XMLPorts  ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                IF "Limit All XMLPorts" THEN
                                                                  TESTFIELD("XMLPort Level Security");
                                                              END;

                                                   CaptionML=ENU=Limit All XMLPorts }
    { 67  ;   ;Limit All Pages     ;Boolean       ;OnValidate=BEGIN
                                                                IF "Limit All Pages" THEN
                                                                  TESTFIELD("Page Level Security");
                                                              END;

                                                   CaptionML=ENU=Limit All Pages }
    { 68  ;   ;SUPER (NAVIPANE) Role ID;Code20    ;TableRelation="Permission Set";
                                                   OnLookup=BEGIN
                                                              "SUPER (NAVIPANE) Role ID" := LookupLiveRole("SUPER (NAVIPANE) Role ID");
                                                              CALCFIELDS("SUPER (NAVIPANE) Role Exists");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=SUPER (NAVIPANE) Permission Set ID }
    { 69  ;   ;Special 1 Role ID   ;Code20        ;TableRelation="Permission Set";
                                                   OnLookup=BEGIN
                                                              "Special 1 Role ID" := LookupLiveRole("Special 1 Role ID");
                                                              CALCFIELDS("Special 1 Role Exists");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Special 1 Permission Set ID }
    { 70  ;   ;Special 2 Role ID   ;Code20        ;TableRelation="Permission Set";
                                                   OnLookup=BEGIN
                                                              "Special 2 Role ID" := LookupLiveRole("Special 2 Role ID");
                                                              CALCFIELDS("Special 2 Role Exists");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Special 2 Permission Set ID }
    { 71  ;   ;Special 3 Role ID   ;Code20        ;TableRelation="Permission Set";
                                                   OnLookup=BEGIN
                                                              "Special 3 Role ID" := LookupLiveRole("Special 3 Role ID");
                                                              CALCFIELDS("Special 3 Role Exists");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Special 3 Permission Set ID }
    { 72  ;   ;Add History and Security Perm.;Boolean;
                                                   CaptionML=ENU=Add History and Security Permissions }
    { 73  ;   ;Extend Insert to Delete;Boolean    ;CaptionML=ENU=Extend Insert to Delete }
    { 74  ;   ;Extend Insert on Limited Lic.;Boolean;
                                                   InitValue=Yes;
                                                   CaptionML=ENU=Extend Insert on Limited Lic. }
    { 75  ;   ;Publish Allowed     ;Boolean       ;OnValidate=BEGIN
                                                                IF "Publish Allowed" THEN BEGIN
                                                                  TESTFIELD("Publish Allowed Company Name",'');

                                                                  TestNoPublishInOtherCompanies;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Publish Allowed }
    { 76  ;   ;ALL Role Exists     ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Permission Set" WHERE (Role ID=FIELD(ALL Role ID)));
                                                   CaptionML=ENU=ALL Permission Set Exists;
                                                   Editable=No }
    { 77  ;   ;SUPER Role Exists   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Permission Set" WHERE (Role ID=FIELD(SUPER Role ID)));
                                                   CaptionML=ENU=SUPER Permission Set Exists;
                                                   Editable=No }
    { 78  ;   ;SUPER (DATA) Role Exists;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Permission Set" WHERE (Role ID=FIELD("SUPER (DATA) Role ID")));
                                                   CaptionML=ENU=SUPER (DATA) Permission Set Exists;
                                                   Editable=No }
    { 79  ;   ;BASIC Role Exists   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Permission Set" WHERE (Role ID=FIELD(BASIC Role ID)));
                                                   CaptionML=ENU=BASIC Permission Set Exists;
                                                   Editable=No }
    { 80  ;   ;SUPER (NAVIPANE) Role Exists;Boolean;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Exist("Permission Set" WHERE (Role ID=FIELD("SUPER (NAVIPANE) Role ID")));
                                                   CaptionML=ENU=SUPER (NAVIPANE) Permission Set Exists;
                                                   Editable=No }
    { 81  ;   ;Special 1 Role Exists;Boolean      ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Permission Set" WHERE (Role ID=FIELD(Special 1 Role ID)));
                                                   CaptionML=ENU=Special 1 Permission Set Exists;
                                                   Editable=No }
    { 82  ;   ;Special 2 Role Exists;Boolean      ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Permission Set" WHERE (Role ID=FIELD(Special 2 Role ID)));
                                                   CaptionML=ENU=Special 2 Permission Set Exists;
                                                   Editable=No }
    { 83  ;   ;Special 3 Role Exists;Boolean      ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Permission Set" WHERE (Role ID=FIELD(Special 3 Role ID)));
                                                   CaptionML=ENU=Special 3 Permission Set Exists;
                                                   Editable=No }
    { 84  ;   ;Only Recording Allowed;Boolean     ;OnValidate=BEGIN
                                                                IF "Only Recording Allowed" THEN
                                                                  TESTFIELD("Publish Allowed",FALSE);
                                                              END;

                                                   CaptionML=ENU=Only Recording Allowed }
    { 85  ;   ;Use Limited License Permission;Boolean;
                                                   InitValue=Yes;
                                                   CaptionML=ENU=Use Limited License Permission }
    { 86  ;   ;Create Variables    ;Boolean       ;CaptionML=ENU=Create Variables }
    { 87  ;   ;Allow 0 Permission  ;Boolean       ;CaptionML=ENU=Allow 0 Permission }
    { 88  ;   ;Allow Blank Company ;Boolean       ;CaptionML=ENU=Allow Blank Company }
    { 89  ;   ;Maximum Lines to Search;Integer    ;InitValue=200;
                                                   CaptionML=ENU=Maximum Lines to Search }
    { 90  ;   ;Add Execute to FactBox on Page;Boolean;
                                                   InitValue=Yes;
                                                   CaptionML=ENU=Add Execute to FactBox on Page }
    { 91  ;   ;Publish Allowed Company Name;Text30;TableRelation=Company;
                                                   OnValidate=BEGIN
                                                                IF "Publish Allowed Company Name" <> '' THEN BEGIN
                                                                  TESTFIELD("Publish Allowed",FALSE);

                                                                  ESSecuritySetup.CHANGECOMPANY("Publish Allowed Company Name");
                                                                  ESSecuritySetup.GET;
                                                                  ESSecuritySetup.TESTFIELD("Publish Allowed");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Publish Allowed Company Name }
    { 92  ;   ;Recording Company Identifier;Code5 ;CaptionML=ENU=Recording Company Identifier }
    { 93  ;   ;Keep Imported SQL Trace Data;Boolean;
                                                   CaptionML=ENU=Keep Imported SQL Trace Data }
    { 94  ;   ;Manual Update of Summary Perm.;Boolean;
                                                   CaptionML=ENU=Manual Update of Summary Permissions }
    { 95  ;   ;Query Level Security;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                Object0ExistsWarning(9,"Query Level Security",xRec."Query Level Security");
                                                              END;

                                                   CaptionML=ENU=Query Level Security }
    { 96  ;   ;All Free Queries Role ID;Code20    ;TableRelation="ES Role";
                                                   OnValidate=BEGIN
                                                                IF "All Free Queries Role ID" <> '' THEN
                                                                  TESTFIELD("All Free Objects Role ID",'');
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=All Free Queries Permission Set ID }
    { 97  ;   ;All Limited Queries Role ID;Code20 ;TableRelation="ES Role";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=All Limited Queries Permission Set ID }
    { 98  ;   ;Limit All Queries   ;Boolean       ;OnValidate=BEGIN
                                                                IF "Limit All Queries" THEN
                                                                  TESTFIELD("Query Level Security");
                                                              END;

                                                   CaptionML=ENU=Limit All Queries }
    { 99  ;   ;Update Security Setup;Boolean      ;CaptionML=ENU=Update Security Setup }
    { 100 ;   ;Create No. Series   ;Boolean       ;CaptionML=ENU=Create No. Series }
    { 101 ;   ;Create Profile      ;Boolean       ;CaptionML=ENU=Create Profile }
    { 102 ;   ;Create Rest Point Live2EasySec;Boolean;
                                                   CaptionML=ENU=Create Restore Point of Live -> Easy Security }
    { 103 ;   ;Create Company Groups;Boolean      ;CaptionML=ENU=Create Company Groups }
    { 104 ;   ;Update Logins       ;Boolean       ;CaptionML=ENU=Update Logins }
    { 105 ;   ;Update Limited License Perms.;Boolean;
                                                   CaptionML=ENU=Update Limited License Permissions }
    { 106 ;   ;Get Relations from Source Code;Boolean;
                                                   CaptionML=ENU=Get Relations from Source Code }
    { 107 ;   ;Create Role Det from All Roles;Boolean;
                                                   CaptionML=ENU=Create Permission Set Details from All Permission Sets }
    { 108 ;   ;Test for <blank> records;Boolean   ;CaptionML=ENU=Test for <blank> records }
    { 109 ;   ;Test for UnrelDatabaseAccCtrls;Boolean;
                                                   CaptionML=ENU=Test for Unrelated Database Access Controls }
    { 110 ;   ;Test for Unrel.WindowsAccCtrls;Boolean;
                                                   CaptionML=ENU=Test for Unrelated User Access Controls }
    { 111 ;   ;Test for Unrelated Role Perms;Boolean;
                                                   CaptionML=ENU=Test for Unrelated Permissions }
    { 112 ;   ;Test for Old Object Perms;Boolean  ;CaptionML=ENU=Test for Old Object Permissions }
    { 113 ;   ;Setup Not Complete  ;Boolean       ;InitValue=Yes;
                                                   CaptionML=ENU=Setup Not Complete }
    { 114 ;   ;Last Restore Point No.;Code20      ;InitValue=RSP00000;
                                                   CaptionML=ENU=Last Restore Point No. }
    { 115 ;   ;Last Recording No.  ;Code20        ;InitValue=REC00000;
                                                   CaptionML=ENU=Last Recording No. }
    { 116 ;   ;No Parent Perm. in Restore Pnt;Boolean;
                                                   CaptionML=ENU=No Parent Permissions in Restore Point }
    { 117 ;   ;Create SQL Object Names;Boolean    ;CaptionML=ENU=Create SQL Object Names }
    { 118 ;   ;No. of Restore Points to Keep;Integer;
                                                   InitValue=20;
                                                   CaptionML=ENU=No. of Restore Points to Keep }
    { 119 ;   ;Optimized Publishing;Boolean       ;InitValue=Yes;
                                                   CaptionML=ENU=Optimized Publishing }
    { 120 ;   ;Default Role Group File Name;Text250;
                                                   OnValidate=BEGIN
                                                                IF ("Default Role Group File Name" <> '') AND
                                                                   (STRPOS("Default Role Group File Name",'%1') = 0)
                                                                THEN
                                                                  MESSAGE(
                                                                    Text032,
                                                                    FIELDCAPTION("Default Role Group File Name"),'%1');
                                                              END;

                                                   OnLookup=VAR
                                                              CommonDialogMgt@1240520008 : Codeunit 14123901;
                                                            BEGIN
                                                              "Default Role Group File Name" :=
                                                                CommonDialogMgt.OpenFile(
                                                                  FIELDCAPTION("Default Role Group File Name"),"Default Role Group File Name",1,'*.txt',1);
                                                              VALIDATE("Default Role Group File Name");
                                                            END;

                                                   CaptionML=ENU=Default Permission Group File Name }
    { 121 ;   ;Do Not Compress if SUPER;Boolean   ;CaptionML=ENU=Do Not Compress if SUPER }
    { 122 ;   ;Use Complete User ID;Boolean       ;InitValue=Yes;
                                                   OnValidate=VAR
                                                                ESLogin@1000 : Record 14123527;
                                                              BEGIN
                                                                IF "Use Complete User ID" <> xRec."Use Complete User ID" THEN
                                                                  IF ESLogin.FIND('-') THEN
                                                                    ERROR(Text101,ESLogin.TABLECAPTION);
                                                              END;

                                                   CaptionML=ENU=Use Complete User ID }
    { 123 ;   ;Job Queue Code      ;Code10        ;TableRelation="Job Queue Category";
                                                   CaptionML=ENU=Job Queue Code }
    { 124 ;   ;Data Role ID (Quick Security);Code20;
                                                   InitValue=ES_QS_DATA;
                                                   TableRelation="ES Role";
                                                   OnValidate=BEGIN
                                                                IF "Data Role ID (Quick Security)" <> '' THEN
                                                                  TestNoRoleDetail("Data Role ID (Quick Security)");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Data Permission Set ID (Quick Security) }
    { 125 ;   ;Data Read Role ID (Quick Sec.);Code20;
                                                   InitValue=ES_QS_DATA_READ;
                                                   TableRelation="ES Role";
                                                   OnValidate=BEGIN
                                                                IF "Data Read Role ID (Quick Sec.)" <> '' THEN
                                                                  TestNoRoleDetail("Data Read Role ID (Quick Sec.)");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Data Read Permission Set ID (Quick Security) }
    { 126 ;   ;Data Super Role ID (Quick Sec);Code20;
                                                   InitValue=ES_QS_DATA_SUPER;
                                                   TableRelation="ES Role";
                                                   OnValidate=BEGIN
                                                                IF "Data Super Role ID (Quick Sec)" <> '' THEN
                                                                  TestNoRoleDetail("Data Super Role ID (Quick Sec)");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Data Super Permission Set ID (Quick Security) }
    { 127 ;   ;Object Role ID (Quick Sec.);Code20 ;InitValue=ES_QS_OBJECTS;
                                                   TableRelation="ES Role";
                                                   OnValidate=BEGIN
                                                                IF "Object Role ID (Quick Sec.)" <> '' THEN
                                                                  TestNoRoleDetail("Object Role ID (Quick Sec.)");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Object Permission Set ID (Quick Security) }
    { 128 ;   ;Login Role ID (Quick Security);Code20;
                                                   InitValue=ES_QS_LOGIN;
                                                   TableRelation="ES Role";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Login Permission Set ID (Quick Security) }
    { 129 ;   ;All Free Objects Role ID;Code20    ;InitValue=ES_TECH_ALLOBJFREE;
                                                   TableRelation="ES Role";
                                                   OnValidate=BEGIN
                                                                IF "All Free Objects Role ID" <> '' THEN BEGIN
                                                                  TESTFIELD("All Free Tables Role ID",'');
                                                                  TESTFIELD("All Free Forms Role ID",'');
                                                                  TESTFIELD("All Free Reports Role ID",'');
                                                                  TESTFIELD("All Free Dataports Role ID",'');
                                                                  TESTFIELD("All Free Codeunits Role ID",'');
                                                                  TESTFIELD("All Free XMLPorts Role ID",'');
                                                                  TESTFIELD("All Free Pages Role ID",'');
                                                                  TESTFIELD("All Free Queries Role ID",'');

                                                                  TestNoRoleDetail("All Free Objects Role ID");
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=All Free Objects Permission Set ID }
    { 130 ;   ;Use User Name instead of SID;Boolean;
                                                   InitValue=Yes;
                                                   CaptionML=ENU=Use User Name instead of User Security ID }
    { 131 ;   ;Remove Specific Table Perm.;Boolean;InitValue=Yes;
                                                   CaptionML=ENU=Remove Specific Table Permissions }
    { 132 ;   ;Direct Login Integration;Boolean   ;CaptionML=ENU=Direct Login Integration }
    { 133 ;   ;Direct Role Integration;Boolean    ;CaptionML=ENU=Direct Permission Set Integration }
    { 134 ;   ;Direct Int. No Restore Point;Boolean;
                                                   CaptionML=ENU=Direct Int. No Restore Point }
    { 135 ;   ;Created By User     ;Code20        ;CaptionML=ENU=Created By User;
                                                   Editable=No }
    { 136 ;   ;Created Date Time   ;DateTime      ;CaptionML=ENU=Created Date Time;
                                                   Editable=No }
    { 137 ;   ;No Sec. Filter in Summary Perm;Boolean;
                                                   CaptionML=ENU=No Security Filter in Summary Permissions }
    { 138 ;   ;Summary Result Company Filter;Text80;
                                                   OnValidate=VAR
                                                                Company@1240520001 : Record 2000000006;
                                                              BEGIN
                                                                IF "Summary Result Company Filter" <> '' THEN BEGIN
                                                                  Company.SETFILTER(Name,"Summary Result Company Filter");
                                                                  IF Company.FIND('-') THEN
                                                                    ;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Summary Result Company Filter }
    { 139 ;   ;Detailed Comments   ;Boolean       ;CaptionML=ENU=Detailed Comments }
    { 140 ;   ;Always Add Missing from Fields;Boolean;
                                                   CaptionML=ENU=Always Add Missing Relations from Fields }
    { 141 ;   ;Always Add Miss. from Metadata;Boolean;
                                                   CaptionML=ENU=Always Add Missing from Table Relations Metadata }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=Updating All Free Permission Set\';
      Text002@1002 : TextConst 'ENU=Process #1################################################';
      Text004@1004 : TextConst 'ENU=Free Objects';
      Text005@1005 : TextConst 'ENU=Limited Objects';
      Text006@1006 : TextConst 'ENU=Permission Set %1 is used as a All Permission Set and cannot be modified manually.';
      Text010@1010 : TextConst 'ENU=Adding License Limited Objects\';
      Text016@1016 : TextConst 'ENU=%1 objects inserted %2 modified.';
      Text017@1017 : TextConst 'ENU=Permission Set ID %1 is restricted.';
      Text019@1019 : TextConst 'ENU=%1 0 permission found in other Permission Sets must be deleted manually.';
      Text020@1020 : TextConst 'ENU=%1 0 permission found in Builder Permissions.';
      Text021@1021 : TextConst 'ENU=%1 0 permission found in Recording Permissions.';
      Text022@1022 : TextConst 'ENU=%1 0 permission must be added manually in ALL and BASIC Permission Sets.';
      Text023@1023 : TextConst 'ENU=Easy Security must be purchased and is only fully functional in a non-CRONUS company.';
      Text024@1024 : TextConst 'ENU=When using a CRONUS company some functions are limited.';
      Text025@1025 : TextConst 'ENU=All Free Permission Set updated.';
      Text026@1026 : TextConst 'ENU=File %1 does not exists.';
      Text027@1240520009 : TextConst 'ENU=Process #1################################################\';
      Text028@1240520008 : TextConst 'ENU=Object  #2################################################';
      Text029@1027 : TextConst 'ENU=Initialize Setup';
      Text009@1009 : TextConst 'ENU=NAV Easy Security %1\%2 objects, %3 modified.';
      Text030@1240520010 : TextConst 'ENU=Live Permission Set %1 in %2 does not exist.';
      Text031@1028 : TextConst 'ENU=%1 is set in company %2. Only one company can be used for publish of permissions.';
      Text032@1029 : TextConst 'ENU=%1 should contain a %2 to ensure unique file names.';
      Text033@1030 : TextConst 'ENU=License does not have permissions for this granule, Continue?';
      Text034@1031 : TextConst 'ENU=Nothing changed.';
      Text035@1032 : TextConst 'ENU=%1 %2 exists without a parent.';
      Text036@1033 : TextConst 'ENU=These records will cause problems during publish of permissions. Delete the records?';
      Text037@1034 : TextConst 'ENU=No unrelated %1 found.';
      Text038@1240520011 : TextConst 'ENU=User %1 (User Security ID %2 and %3) is not unique when mapped in Easy Security. Please setup a %4 for this login.';
      Text039@1035 : TextConst 'ENU=Set Up completed in %1 seconds.';
      Text040@1240520013 : TextConst 'ENU=%1 %2 exists without an object.';
      Text041@1240520012 : TextConst 'ENU=No %1 found without an object.';
      ESSecuritySetup@1240520014 : Record 14123521;
      Text003@1003 : TextConst 'ENU=Initialize Complete Setup,Initialize Recording Only Setup';
      Text018@1018 : TextConst 'ENU=The <blank> %1 exists.';
      Text042@1240520001 : TextConst 'ENU="Start: "';
      Text043@1240520002 : TextConst 'ENU="Finish: "';
      Text044@1036 : TextConst 'ENU=Set Up Easy Security';
      Text045@1037 : TextConst 'ENU=Create Profile';
      Text046@1038 : TextConst 'ENU=Create Restore Point of Live -> Easy Security';
      Text047@1039 : TextConst 'ENU=Create Company Groups';
      Text048@1040 : TextConst 'ENU=Update Logins';
      Text049@1041 : TextConst 'ENU=Update Limited License Permissions';
      Text050@1042 : TextConst 'ENU=Get Relations from Source Code';
      Text051@1043 : TextConst 'ENU=Create Permission Set Details from All Permission Sets';
      Text052@1044 : TextConst 'ENU=Test for <blank> records';
      Text053@1045 : TextConst 'ENU=Test for Unrelated Database Access Controls';
      Text054@1046 : TextConst 'ENU=Test for Unrelated User Access Controls';
      Text056@1048 : TextConst 'ENU=Test for Old Object Permissions';
      Text057@1240520003 : TextConst 'ENU=SQL Object Names';
      Text007@1007 : TextConst 'ENU=Set Up Easy Security';
      Text008@1008 : TextConst 'ENU=Updating Quick Security Permission Set\';
      Text058@1049 : TextConst 'ENU=Quick Security (No Setup)';
      Text059@1050 : TextConst 'ENU=Quick Security Permission Sets have been updated.';
      Text060@1051 : TextConst 'ENU=Quick Security Login';
      Text061@1052 : TextConst 'ENU=Quick Security Login Permission Set has been updated.';
      Text062@1053 : TextConst 'ENU=Quick Security (Read-only)';
      Text063@1054 : TextConst 'ENU=Quick Security (SUPER)';
      Text064@1055 : TextConst 'ENU=Quick Security (Objects)';
      Text065@1056 : TextConst 'ENU="NAV Easy Security must be set up before opening this screen. "';
      Text066@1057 : TextConst 'ENU="If the database has already been set up the company with Published Allowed=Yes must be opened."';
      Text067@1240520004 : TextConst 'ENU=Existing %1 setup is not consistent.';
      Text068@1058 : TextConst 'ENU=Enable %1?';
      Text069@1059 : TextConst 'ENU="Set %1 = 20?"';
      Text011@1011 : TextConst 'ENU=Add Default Segregation of Duties Objects';
      Text012@1012 : TextConst 'ENU=Change Log Activated';
      Text013@1013 : TextConst 'ENU=Inserted %1';
      Text014@1014 : TextConst 'ENU=Modified %1';
      Text015@1015 : TextConst 'ENU=Deleted %1';
      Text101@1000 : TextConst 'ENU=%1 already exists.';
      Text102@1047 : TextConst 'ENU=Uploading file.';

    PROCEDURE UpdateFREEAndLIMITEDRoles@1240520008(ShowStatus@1240520010 : Boolean);
    VAR
      ESObjectInfo@1240520008 : Record 14123509;
    BEGIN
      TESTFIELD("Publish Allowed");

      IF ("All Free Tables Role ID" = '') AND ("All Free Forms Role ID" = '') AND
         ("All Free Reports Role ID" = '') AND ("All Free Dataports Role ID" = '') AND
         ("All Free Codeunits Role ID" = '') AND ("All Free XMLPorts Role ID" = '') AND
         ("All Free Pages Role ID" = '') AND ("All Free Queries Role ID" = '')
      THEN
        TESTFIELD("All Free Objects Role ID");

      IF "Table Level Security" THEN BEGIN
        IF "All Free Objects Role ID" = '' THEN BEGIN
          TESTFIELD("All Free Tables Role ID");
          UpdateFREEandLIMITEDRole(
            FIELDCAPTION("Table Level Security"),ESObjectInfo."Object Type"::Table,
            "All Free Tables Role ID","All Limited Tables Role ID","Limit All Tables");
        END ELSE
          UpdateFREEandLIMITEDRole(
            FIELDCAPTION("Table Level Security"),ESObjectInfo."Object Type"::Table,
            "All Free Objects Role ID","All Limited Tables Role ID","Limit All Tables");
      END;

      IF "Form Level Security" THEN BEGIN
        IF "All Free Objects Role ID" = '' THEN BEGIN
          TESTFIELD("All Free Forms Role ID");
          UpdateFREEandLIMITEDRole(
            FIELDCAPTION("Form Level Security"),ESObjectInfo."Object Type"::"2",
            "All Free Forms Role ID","All Limited Forms Role ID","Limit All Forms");
        END ELSE
          UpdateFREEandLIMITEDRole(
            FIELDCAPTION("Form Level Security"),ESObjectInfo."Object Type"::"2",
            "All Free Objects Role ID","All Limited Forms Role ID","Limit All Forms");
      END;

      IF "Report Level Security" THEN BEGIN
        IF "All Free Objects Role ID" = '' THEN BEGIN
          TESTFIELD("All Free Reports Role ID");
          UpdateFREEandLIMITEDRole(
            FIELDCAPTION("Report Level Security"),ESObjectInfo."Object Type"::Report,
            "All Free Reports Role ID","All Limited Reports Role ID","Limit All Reports");
        END ELSE
          UpdateFREEandLIMITEDRole(
            FIELDCAPTION("Report Level Security"),ESObjectInfo."Object Type"::Report,
            "All Free Objects Role ID","All Limited Reports Role ID","Limit All Reports");
      END;

      IF "Dataport Level Security" THEN BEGIN
        IF "All Free Objects Role ID" = '' THEN BEGIN
          TESTFIELD("All Free Dataports Role ID");
          UpdateFREEandLIMITEDRole(
            FIELDCAPTION("Dataport Level Security"),ESObjectInfo."Object Type"::"4",
            "All Free Dataports Role ID","All Limited Dataports Role ID","Limit All Dataports");
        END ELSE
          UpdateFREEandLIMITEDRole(
            FIELDCAPTION("Dataport Level Security"),ESObjectInfo."Object Type"::"4",
            "All Free Objects Role ID","All Limited Dataports Role ID","Limit All Dataports");
      END;

      IF "Codeunit Level Security" THEN BEGIN
        IF "All Free Objects Role ID" = '' THEN BEGIN
          TESTFIELD("All Free Codeunits Role ID");
          UpdateFREEandLIMITEDRole(
            FIELDCAPTION("Codeunit Level Security"),ESObjectInfo."Object Type"::Codeunit,
            "All Free Codeunits Role ID","All Limited Codeunits Role ID","Limit All Codeunits");
        END ELSE
          UpdateFREEandLIMITEDRole(
            FIELDCAPTION("Codeunit Level Security"),ESObjectInfo."Object Type"::Codeunit,
            "All Free Objects Role ID","All Limited Codeunits Role ID","Limit All Codeunits");
      END;

      IF "XMLPort Level Security" THEN BEGIN
        IF "All Free Objects Role ID" = '' THEN BEGIN
          TESTFIELD("All Free XMLPorts Role ID");
          UpdateFREEandLIMITEDRole(
            FIELDCAPTION("XMLPort Level Security"),ESObjectInfo."Object Type"::XMLport,
            "All Free XMLPorts Role ID","All Limited XMLPorts Role ID","Limit All XMLPorts");
        END ELSE
          UpdateFREEandLIMITEDRole(
            FIELDCAPTION("XMLPort Level Security"),ESObjectInfo."Object Type"::XMLport,
            "All Free Objects Role ID","All Limited XMLPorts Role ID","Limit All XMLPorts");
      END;

      IF "Page Level Security" THEN BEGIN
        IF "All Free Objects Role ID" = '' THEN BEGIN
          TESTFIELD("All Free Pages Role ID");
          UpdateFREEandLIMITEDRole(
            FIELDCAPTION("Page Level Security"),ESObjectInfo."Object Type"::Page,
            "All Free Pages Role ID","All Limited Pages Role ID","Limit All Pages");
        END ELSE
          UpdateFREEandLIMITEDRole(
            FIELDCAPTION("Page Level Security"),ESObjectInfo."Object Type"::Page,
            "All Free Objects Role ID","All Limited Pages Role ID","Limit All Pages");
      END;

      IF "Query Level Security" THEN BEGIN
        IF "All Free Objects Role ID" = '' THEN BEGIN
          TESTFIELD("All Free Queries Role ID");
          UpdateFREEandLIMITEDRole(
            FIELDCAPTION("Query Level Security"),ESObjectInfo."Object Type"::Query,
            "All Free Queries Role ID","All Limited Queries Role ID","Limit All Queries");
        END ELSE
          UpdateFREEandLIMITEDRole(
            FIELDCAPTION("Query Level Security"),ESObjectInfo."Object Type"::Query,
            "All Free Objects Role ID","All Limited Queries Role ID","Limit All Queries");
      END;


      IF ShowStatus THEN
        MESSAGE(Text025);
      Comment(1,Text025);
    END;

    LOCAL PROCEDURE UpdateFREEandLIMITEDRole@1240520009(WindowText@1240520016 : Text[250];ObjectType@1240520008 : Integer;FreeRoleID@1240520009 : Code[20];LimitedRoleID@1240520014 : Code[20];LimitAll@1240520021 : Boolean);
    VAR
      FreeESRole@1240520011 : Record 14123505;
      LimitedESRole@1240520015 : Record 14123505;
      ESRolePerm@1240520010 : Record 14123506;
      ESObjectInfo@1240520012 : Record 14123509;
      ESObjectProperty@1240520013 : Record 14123522;
      Window@1240520020 : Dialog;
      TotalCount@1240520017 : Integer;
      CurrentCount@1240520018 : Integer;
      NextUpdateCount@1240520019 : Integer;
    BEGIN
      TESTFIELD("Publish Allowed");

      IF GUIALLOWED THEN BEGIN
        Window.OPEN(ExtendProgressText(Text001) + Text027 + Text028);
        Window.UPDATE(1,WindowText);
      END;

      IF NOT FreeESRole.GET(FreeRoleID) THEN BEGIN
        FreeESRole.SetAllowZeroNoQuestion(TRUE);
        FreeESRole."Role ID" := FreeRoleID;
        FreeESRole.Name := COPYSTR(Text004,1,MAXSTRLEN(FreeESRole.Name));
        FreeESRole.INSERT(TRUE);
      END;
      FreeESRole.CALCFIELDS("Role Detail Exists");
      FreeESRole.TESTFIELD("Role Detail Exists",FALSE);

      IF LimitedRoleID <> '' THEN
        IF NOT LimitedESRole.GET(LimitedRoleID) THEN BEGIN
          LimitedESRole.SetAllowZeroNoQuestion(TRUE);
          LimitedESRole."Role ID" := LimitedRoleID;
          LimitedESRole.Name := COPYSTR(Text005,1,MAXSTRLEN(LimitedESRole.Name));
          LimitedESRole.INSERT(TRUE);
        END;
        LimitedESRole.CALCFIELDS("Role Detail Exists");
        LimitedESRole.TESTFIELD("Role Detail Exists",FALSE);

      ESRolePerm.RESET;
      ESRolePerm.SETFILTER("Role ID",'%1|%2',FreeESRole."Role ID",LimitedESRole."Role ID");
      ESRolePerm.SETRANGE("Object Type",ObjectType);
      ESRolePerm.DELETEALL;

      ESObjectInfo.RESET;
      ESObjectInfo.SETRANGE("Object Type",ObjectType);
      IF ESObjectInfo.FIND('-') THEN BEGIN
        TotalCount := ESObjectInfo.COUNT;

        REPEAT
          ESRolePerm.INIT;
          IF ESObjectProperty.GET(ESObjectInfo."Object Type",ESObjectInfo."Object ID") THEN
            IF ESObjectProperty."Object Level Permissions" THEN
              ESRolePerm."Role ID" := LimitedESRole."Role ID"
            ELSE
              ESRolePerm."Role ID" := FreeESRole."Role ID"
          ELSE
            IF LimitAll THEN
              ESRolePerm."Role ID" := LimitedESRole."Role ID"
            ELSE
              ESRolePerm."Role ID" := FreeESRole."Role ID";
          ESRolePerm."Object Type" := ESObjectInfo."Object Type";
          ESRolePerm."Object ID" := ESObjectInfo."Object ID";
          ESRolePerm."Read Permission" := ESRolePerm."Read Permission"::" ";
          ESRolePerm."Insert Permission" := ESRolePerm."Insert Permission"::" ";
          ESRolePerm."Modify Permission" := ESRolePerm."Modify Permission"::" ";
          ESRolePerm."Delete Permission" := ESRolePerm."Delete Permission"::" ";
          ESRolePerm."Execute Permission" := ESRolePerm."Execute Permission"::Yes;
          IF ESRolePerm."Role ID" <> '' THEN
            ESRolePerm.INSERT;

          CurrentCount := CurrentCount + 1;
          IF CurrentCount > NextUpdateCount THEN BEGIN
            IF GUIALLOWED THEN
              Window.UPDATE(
                2,
                STRSUBSTNO(
                  '%1 %2 %3',ESObjectInfo."Object Type",ESObjectInfo."Object ID",
                  ESObjectInfo."Object Caption"));
            NextUpdateCount := CurrentCount + ROUND(TotalCount / 100,1);
          END;
        UNTIL ESObjectInfo.NEXT = 0;
      END;

      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    PROCEDURE InFREERoles@1240520010(RoleID@1240520008 : Code[20];GiveError@1240520009 : Boolean) : Boolean;
    BEGIN
      IF ((RoleID = "All Free Tables Role ID") AND "Table Level Security") OR
         ((RoleID = "All Free Forms Role ID") AND "Form Level Security") OR
         ((RoleID = "All Free Reports Role ID") AND "Report Level Security") OR
         ((RoleID = "All Free Dataports Role ID") AND "Dataport Level Security") OR
         ((RoleID = "All Free Codeunits Role ID") AND "Codeunit Level Security") OR
         ((RoleID = "All Free XMLPorts Role ID") AND "XMLPort Level Security") OR
         ((RoleID = "All Free Pages Role ID") AND "Page Level Security") OR
         ((RoleID = "All Free Queries Role ID") AND "Query Level Security") OR
         (RoleID = "All Free Objects Role ID") OR
         (RoleID = "Data Role ID (Quick Security)") OR
         (RoleID = "Data Read Role ID (Quick Sec.)") OR
         (RoleID = "Data Super Role ID (Quick Sec)") OR
         (RoleID = "Object Role ID (Quick Sec.)")
      THEN
        IF GiveError THEN
          ERROR(Text006,RoleID)
        ELSE
          EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE TestNoRoleDetail@1240520040(RoleID@1240520001 : Code[20]);
    VAR
      ESRole@1240520002 : Record 14123505;
    BEGIN
      IF ESRole.GET(RoleID) THEN BEGIN
        ESRole.CALCFIELDS("Role Detail Exists");
        ESRole.TESTFIELD("Role Detail Exists",FALSE);
      END;
    END;

    PROCEDURE CreateQuickSecurityLoginRole@1240520007(ShowStatus@1240520005 : Boolean);
    VAR
      ESRole@1240520004 : Record 14123505;
      InsertedPermissions@1240520002 : Integer;
      ExistingPermissions@1240520001 : Integer;
      Window@1240520006 : Dialog;
    BEGIN
      TESTFIELD("Login Role ID (Quick Security)");

      IF GUIALLOWED THEN
        Window.OPEN(ExtendProgressText(Text008) + Text002);

      IF NOT ESRole.GET("Login Role ID (Quick Security)") THEN BEGIN
        ESRole.INIT;
        ESRole."Role ID" := "Login Role ID (Quick Security)";
        ESRole.Name := COPYSTR(Text060,1,MAXSTRLEN(ESRole.Name));
        ESRole.INSERT;

        IF "Permission Recorder Licensed" THEN
          ESRole.CreateRoleDetail(FALSE);
      END;

      InsertMinimumLoginPerm(
        ESRole."Role ID",InsertedPermissions,ExistingPermissions,NOT "Detailed Comments");

      IF GUIALLOWED THEN
        Window.CLOSE;

      IF ShowStatus THEN
        MESSAGE(Text061);
      Comment(1,Text061);
    END;

    PROCEDURE UpdateQuickSecurityRoles@1240520006(ShowStatus@1240520005 : Boolean);
    VAR
      ESRole@1240520004 : Record 14123505;
      ESRoleRead@1240520009 : Record 14123505;
      ESRoleSuper@1240520008 : Record 14123505;
      ESRoleObject@1240520007 : Record 14123505;
      ESObjectInfo@1240520001 : Record 14123509;
      ESObjectProperty@1240520002 : Record 14123522;
      ESRolePermission@1240520003 : Record 14123506;
      Window@1240520006 : Dialog;
    BEGIN
      TESTFIELD("Data Role ID (Quick Security)");
      TESTFIELD("Data Read Role ID (Quick Sec.)");
      TESTFIELD("Data Super Role ID (Quick Sec)");
      TESTFIELD("Object Role ID (Quick Sec.)");

      IF GUIALLOWED THEN
        Window.OPEN(ExtendProgressText(Text008) + Text002);

      IF NOT ESRole.GET("Data Role ID (Quick Security)") THEN BEGIN
        ESRole.SetAllowZeroNoQuestion(TRUE);
        ESRole."Role ID" := "Data Role ID (Quick Security)";
        ESRole.Name := COPYSTR(Text058,1,MAXSTRLEN(ESRole.Name));
        ESRole.INSERT(TRUE);
      END;
      ESRole.CALCFIELDS("Role Detail Exists");
      ESRole.TESTFIELD("Role Detail Exists",FALSE);

      ESRolePermission.RESET;
      ESRolePermission.SETRANGE("Role ID",ESRole."Role ID");
      ESRolePermission.DELETEALL;

      IF NOT ESRoleRead.GET("Data Read Role ID (Quick Sec.)") THEN BEGIN
        ESRoleRead.SetAllowZeroNoQuestion(TRUE);
        ESRoleRead."Role ID" := "Data Read Role ID (Quick Sec.)";
        ESRoleRead.Name := COPYSTR(Text062,1,MAXSTRLEN(ESRoleRead.Name));
        ESRoleRead.INSERT(TRUE);
      END;
      ESRoleRead.CALCFIELDS("Role Detail Exists");
      ESRoleRead.TESTFIELD("Role Detail Exists",FALSE);

      ESRolePermission.RESET;
      ESRolePermission.SETRANGE("Role ID",ESRoleRead."Role ID");
      ESRolePermission.DELETEALL;

      IF NOT ESRoleSuper.GET("Data Super Role ID (Quick Sec)") THEN BEGIN
        ESRoleSuper.SetAllowZeroNoQuestion(TRUE);
        ESRoleSuper."Role ID" := "Data Super Role ID (Quick Sec)";
        ESRoleSuper.Name := COPYSTR(Text063,1,MAXSTRLEN(ESRoleSuper.Name));
        ESRoleSuper.INSERT(TRUE);
      END;
      ESRoleSuper.CALCFIELDS("Role Detail Exists");
      ESRoleSuper.TESTFIELD("Role Detail Exists",FALSE);

      ESRolePermission.RESET;
      ESRolePermission.SETRANGE("Role ID",ESRoleSuper."Role ID");
      ESRolePermission.DELETEALL;

      IF NOT ESRoleObject.GET("Object Role ID (Quick Sec.)") THEN BEGIN
        ESRoleObject.SetAllowZeroNoQuestion(TRUE);
        ESRoleObject."Role ID" := "Object Role ID (Quick Sec.)";
        ESRoleObject.Name := COPYSTR(Text064,1,MAXSTRLEN(ESRoleObject.Name));
        ESRoleObject.INSERT(TRUE);
      END;
      ESRoleObject.CALCFIELDS("Role Detail Exists");
      ESRoleObject.TESTFIELD("Role Detail Exists",FALSE);

      ESRolePermission.RESET;
      ESRolePermission.SETRANGE("Role ID",ESRoleObject."Role ID");
      ESRolePermission.DELETEALL;

      ESObjectInfo.RESET;
      ESObjectInfo.SETRANGE("Object Type",ESObjectInfo."Object Type"::TableData);
      IF ESObjectInfo.FIND('-') THEN
        REPEAT
          IF GUIALLOWED THEN
            Window.UPDATE(
              1,
              STRSUBSTNO(
                '%1 %2 %3',
                ESObjectInfo."Object Type",ESObjectInfo."Object ID",ESObjectInfo."Object Name"));

          ESRolePermission.INIT;
          ESRolePermission."Role ID" := ESRole."Role ID";
          ESRolePermission."Object Type" := ESObjectInfo."Object Type";
          ESRolePermission."Object ID" := ESObjectInfo."Object ID";
          ESRolePermission."Execute Permission" := ESRolePermission."Execute Permission"::" ";

          IF ESObjectProperty.GET(ESObjectInfo."Object Type",ESObjectInfo."Object ID") THEN BEGIN
            CASE ESObjectProperty."Quick Security Type" OF
              ESObjectProperty."Quick Security Type"::"Full Access":
                BEGIN
                  IF ESObjectProperty."Limited License Object" THEN BEGIN
                    ESRolePermission."Read Permission" :=
                      ESObjectProperty."Read Permission (License)";
                    ESRolePermission."Insert Permission" :=
                      ESObjectProperty."Insert Permission (License)";
                    ESRolePermission."Modify Permission" :=
                      ESObjectProperty."Modify Permission (License)";
                    ESRolePermission."Delete Permission" :=
                      ESObjectProperty."Delete Permission (License)";
                  END ELSE BEGIN
                    ESRolePermission."Read Permission" := ESRolePermission."Read Permission"::Yes;
                    ESRolePermission."Insert Permission" := ESRolePermission."Insert Permission" ::Yes;
                    ESRolePermission."Modify Permission" := ESRolePermission."Modify Permission"::Yes;
                    ESRolePermission."Delete Permission" := ESRolePermission."Delete Permission"::Yes;
                  END;
                  ESRolePermission.INSERT;

                  ESRolePermission."Role ID" := ESRoleSuper."Role ID";
                  ESRolePermission.INSERT;

                  ESRolePermission."Role ID" := ESRoleRead."Role ID";
                  ESRolePermission."Insert Permission" := ESRolePermission."Insert Permission"::" ";
                  ESRolePermission."Modify Permission" := ESRolePermission."Modify Permission"::" ";
                  ESRolePermission."Delete Permission" := ESRolePermission."Delete Permission"::" ";
                  ESRolePermission.INSERT;
                END;
              ESObjectProperty."Quick Security Type"::"Read Only":
                BEGIN
                  ESRolePermission."Read Permission" := ESRolePermission."Read Permission"::Yes;
                  ESRolePermission."Insert Permission" := ESRolePermission."Insert Permission" ::" ";
                  ESRolePermission."Modify Permission" := ESRolePermission."Modify Permission"::" ";
                  ESRolePermission."Delete Permission" := ESRolePermission."Delete Permission"::" ";
                  ESRolePermission.INSERT;

                  ESRolePermission."Role ID" := ESRoleRead."Role ID";
                  ESRolePermission.INSERT;

                  ESRolePermission."Role ID" := ESRoleSuper."Role ID";
                  ESRolePermission."Insert Permission" := ESRolePermission."Insert Permission"::Yes;
                  ESRolePermission."Modify Permission" := ESRolePermission."Modify Permission"::Yes;
                  ESRolePermission."Delete Permission" := ESRolePermission."Delete Permission"::Yes;
                  ESRolePermission.INSERT;
                END;
              ESObjectProperty."Quick Security Type"::"3":
                BEGIN
                  ESRolePermission."Read Permission" := ESRolePermission."Read Permission"::Indirect;
                  ESRolePermission."Insert Permission" := ESRolePermission."Insert Permission" ::Indirect;
                  ESRolePermission."Modify Permission" := ESRolePermission."Modify Permission"::Indirect;
                  ESRolePermission."Delete Permission" := ESRolePermission."Delete Permission"::Indirect;
                  ESRolePermission.INSERT;

                  ESRolePermission."Role ID" := ESRoleSuper."Role ID";
                  ESRolePermission.INSERT;

                  ESRolePermission."Role ID" := ESRoleRead."Role ID";
                  ESRolePermission."Insert Permission" := ESRolePermission."Insert Permission"::" ";
                  ESRolePermission."Modify Permission" := ESRolePermission."Modify Permission"::" ";
                  ESRolePermission."Delete Permission" := ESRolePermission."Delete Permission"::" ";
                  ESRolePermission.INSERT;
                END;
            END;
          END ELSE BEGIN
            ESRolePermission."Read Permission" := ESRolePermission."Read Permission"::Yes;
            ESRolePermission."Insert Permission" := ESRolePermission."Insert Permission" ::Yes;
            ESRolePermission."Modify Permission" := ESRolePermission."Modify Permission"::Yes;
            ESRolePermission."Delete Permission" := ESRolePermission."Delete Permission"::Yes;
            ESRolePermission.INSERT;

            ESRolePermission."Role ID" := ESRoleSuper."Role ID";
            ESRolePermission.INSERT;

            ESRolePermission."Role ID" := ESRoleRead."Role ID";
            ESRolePermission."Insert Permission" := ESRolePermission."Insert Permission"::" ";
            ESRolePermission."Modify Permission" := ESRolePermission."Modify Permission"::" ";
            ESRolePermission."Delete Permission" := ESRolePermission."Delete Permission"::" ";
            ESRolePermission.INSERT;
          END;
        UNTIL ESObjectInfo.NEXT = 0;

      ESObjectInfo.RESET;
      IF "Remove Specific Table Perm." THEN
        ESObjectInfo.SETFILTER("Object Type",'2..9')
      ELSE
        ESObjectInfo.SETFILTER("Object Type",'1..9');
      IF ESObjectInfo.FIND('-') THEN
        REPEAT
          IF GUIALLOWED THEN
            Window.UPDATE(
              1,
              STRSUBSTNO(
                '%1 %2 %3',
                ESObjectInfo."Object Type",ESObjectInfo."Object ID",ESObjectInfo."Object Name"));

          ESRolePermission.INIT;
          ESRolePermission."Role ID" := ESRoleObject."Role ID";
          ESRolePermission."Object Type" := ESObjectInfo."Object Type";
          ESRolePermission."Object ID" := ESObjectInfo."Object ID";
          ESRolePermission."Read Permission" := ESRolePermission."Read Permission"::" ";
          ESRolePermission."Insert Permission" := ESRolePermission."Insert Permission" ::" ";
          ESRolePermission."Modify Permission" := ESRolePermission."Modify Permission"::" ";
          ESRolePermission."Delete Permission" := ESRolePermission."Delete Permission"::" ";

          IF ESObjectProperty.GET(ESObjectInfo."Object Type",ESObjectInfo."Object ID") THEN BEGIN
            CASE ESObjectProperty."Quick Security Type" OF
              ESObjectProperty."Quick Security Type"::"Full Access",
              ESObjectProperty."Quick Security Type"::"Read Only",
              ESObjectProperty."Quick Security Type"::"3":
                BEGIN
                  ESRolePermission."Execute Permission" :=
                    ESRolePermission."Execute Permission"::Yes;
                  ESRolePermission.INSERT;
                END;
            END;
          END ELSE BEGIN
            ESRolePermission."Execute Permission" := ESRolePermission."Execute Permission"::Yes;
            ESRolePermission.INSERT;
          END;
        UNTIL ESObjectInfo.NEXT = 0;

      IF GUIALLOWED THEN
        Window.CLOSE;

      IF ShowStatus THEN
        MESSAGE(Text059);
      Comment(1,Text059);
    END;

    PROCEDURE InsertMinimumLoginPerm@1240520011(RoleID@1240520007 : Code[20];VAR InsertedPermissions@1240520002 : Integer;VAR ExistingPermissions@1240520001 : Integer;NoComment@1240520008 : Boolean);
    VAR
      ESRoleDetail@1240520003 : Record 14123653;
      ESRole@1240520006 : Record 14123505;
      ESRolePerm@1240520004 : Record 14123506;
      UseRoleBuilderPerm@1240520005 : Boolean;
    BEGIN
      ESRole.GET(RoleID);
      UseRoleBuilderPerm := ESRoleDetail.GET(RoleID);

      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,51,
        1,1,1,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,79,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,91,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,98,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,140,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,309,
        1,0,1,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,348,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,388,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,402,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,403,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,404,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,405,
        1,2,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,480,
        1,2,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,481,
        1,2,2,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,487,
        1,2,2,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,800,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,870,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,1311,
        1,1,1,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,1501,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,1502,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,1520,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,1601,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,5079,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,5151,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,5330,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,6304,
        1,1,1,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,7600,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,7601,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,7602,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,7603,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,9008,
        1,2,2,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,9150,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,9151,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,9152,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,9153,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,9154,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,9155,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,14123801,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,14123802,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,14123803,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,14123804,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,14123805,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,14123806,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,14123807,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,14123808,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,14123809,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,14123813,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,14123817,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,14123818,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,14123819,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,23019501,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000001,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000002,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000003,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000004,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000005,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000006,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000053,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000054,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000061,
        1,1,1,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000068,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000069,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000071,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000072,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000073,
        1,1,1,1,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000074,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000075,
        1,1,1,1,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000079,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000080,
        1,1,1,1,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000110,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000111,
        1,1,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000112,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000120,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000177,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000184,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::TableData,2000000198,
        1,0,0,0,0,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,17,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,91,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,98,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,140,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,402,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,403,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,404,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,405,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,483,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,484,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,5079,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,8705,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,2000000001,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,2000000006,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,2000000007,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,2000000026,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,2000000041,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,2000000058,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,2000000061,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,2000000068,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,2000000072,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,2000000074,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,2000000075,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,2000000080,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,2000000120,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,4,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,10,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,40,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,41,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,42,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,43,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,44,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,45,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,46,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,47,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,48,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,49,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,50,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,151,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,280,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,358,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,396,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,405,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,423,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,455,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,457,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,483,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,484,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,701,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,703,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,853,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,871,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,883,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,884,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1070,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1080,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1299,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1302,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1306,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1330,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1400,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1432,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1433,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1501,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1502,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1504,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1508,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1511,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1520,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1530,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1535,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1543,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1630,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1631,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1633,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1800,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1802,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1826,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1850,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1852,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,1854,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,2110,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,2162,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,3702,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,4030,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,2200,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,4030,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,4032,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,5110,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,5150,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,5330,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,5331,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,5377,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,5441,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,5450,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,5452,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,5465,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,5477,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,5496,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,5506,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,5508,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,5529,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,6305,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,6721,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,6723,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,6810,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,8700,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,9002,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,9010,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,9013,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,9016,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,9017,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,9018,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,9026,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,9150,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,9520,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,9170,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,9178,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,9179,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,9701,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,9801,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,9802,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,9995,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,14014900,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,14123652,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,14123801,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,14123805,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,14123806,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,14123811,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,14123812,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,14125500,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,23019027,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,37002008,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,37003000,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,37028340,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,99008528,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Page,9809,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Query,1502,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);

      IF NOT "Table Level Security" THEN
        InsertRolePerm(
          ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Table,0,
          0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);

      IF NOT "Form Level Security" AND NOT "Add All Recording Permissions" THEN
        InsertRolePerm(
          ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::"2",0,
          0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);

      IF NOT "Report Level Security" AND NOT "Add All Recording Permissions" THEN
        InsertRolePerm(
          ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Report,0,
          0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);

      IF NOT "Dataport Level Security" AND NOT "Add All Recording Permissions" THEN
        InsertRolePerm(
          ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::"4",0,
          0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);

      IF NOT "Codeunit Level Security" AND NOT "Add All Recording Permissions" THEN
        InsertRolePerm(
          ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Codeunit,0,
          0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);

      IF NOT "XMLPort Level Security" AND NOT "Add All Recording Permissions" THEN
        InsertRolePerm(
          ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::XMLport,0,
          0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);

      IF NOT "Page Level Security" AND NOT "Add All Recording Permissions" THEN
        InsertRolePerm(
          ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Page,0,
          0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);

      IF NOT "Query Level Security" AND NOT "Add All Recording Permissions" THEN
        InsertRolePerm(
          ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::Query,0,
          0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);

      InsertRolePerm(
        ESRole,UseRoleBuilderPerm,ESRolePerm."Object Type"::MenuSuite,0,
        0,0,0,0,1,InsertedPermissions,ExistingPermissions,NoComment);
    END;

    PROCEDURE InsertRolePerm@1240520030(ESRole@1240520010 : Record 14123505;UseRoleBuilderPerm@1240520013 : Boolean;ObjectType@1240520009 : Integer;ObjectID@1240520008 : Integer;ReadPerm@1240520007 : Integer;InsertPerm@1240520006 : Integer;ModifyPerm@1240520005 : Integer;DeletePerm@1240520004 : Integer;ExecutePerm@1240520003 : Integer;VAR InsertedPermissions@1240520002 : Integer;VAR ExistingPermissions@1240520001 : Integer;NoComment@1240520015 : Boolean);
    VAR
      ESRoleBuilderPerm@1240520012 : Record 14123655;
      ESRolePerm@1240520014 : Record 14123506;
      ESObjectInfo@1240520011 : Record 14123509;
    BEGIN
      IF UseRoleBuilderPerm THEN BEGIN
        IF  NOT ESRoleBuilderPerm.GET(ESRole."Role ID",ObjectType,ObjectID) THEN BEGIN
          IF ESObjectInfo.GET(ObjectType,ObjectID) OR (ObjectID = 0) THEN BEGIN
            ESRoleBuilderPerm.INIT;
            ESRoleBuilderPerm."Role ID" := ESRole."Role ID";
            ESRoleBuilderPerm."Object Type" := ObjectType;
            ESRoleBuilderPerm."Object ID" := ObjectID;
            ESRoleBuilderPerm.SetAllowZeroNoQuestion(TRUE,NoComment);
            ESRoleBuilderPerm.INSERT(TRUE);
            ESRoleBuilderPerm."Read Permission" := ReadPerm;
            ESRoleBuilderPerm."Insert Permission" := InsertPerm;
            ESRoleBuilderPerm."Modify Permission" := ModifyPerm;
            ESRoleBuilderPerm."Delete Permission" := DeletePerm;
            ESRoleBuilderPerm."Execute Permission" := ExecutePerm;
            ESRoleBuilderPerm.SetAllowZeroNoQuestion(TRUE,NoComment);
            ESRoleBuilderPerm.MODIFY(TRUE);

            InsertedPermissions := InsertedPermissions + 1;
          END;
        END ELSE
          ExistingPermissions := ExistingPermissions + 1;
      END ELSE BEGIN
        IF  NOT ESRolePerm.GET(ESRole."Role ID",ObjectType,ObjectID) THEN BEGIN
          IF (ESObjectInfo.GET(ObjectType,ObjectID) AND
              ((ObjectType <> ESRolePerm."Object Type"::Table) OR
               NOT "Remove Specific Table Perm.")) OR
             (ObjectID = 0)
          THEN BEGIN
            ESRolePerm.INIT;
            ESRolePerm."Role ID" := ESRole."Role ID";
            ESRolePerm."Object Type" := ObjectType;
            ESRolePerm."Object ID" := ObjectID;
            IF ObjectID = 0 THEN
              ESRolePerm.SetAllowZeroNoQuestion(TRUE,NoComment);
            ESRolePerm.INSERT(TRUE);
            ESRolePerm."Read Permission" := ReadPerm;
            ESRolePerm."Insert Permission" := InsertPerm;
            ESRolePerm."Modify Permission" := ModifyPerm;
            ESRolePerm."Delete Permission" := DeletePerm;
            ESRolePerm."Execute Permission" := ExecutePerm;
            ESRolePerm.MODIFY(TRUE);

            InsertedPermissions := InsertedPermissions + 1;
          END;
        END ELSE
          ExistingPermissions := ExistingPermissions + 1;
      END;
    END;

    PROCEDURE BuildDefaultFileName@1240520023(TempFileName@1240520008 : Text[250];MaxStrLenFileName@1240520012 : Integer;NewCode@1240520010 : Code[20]) : Text[250];
    VAR
      TempText@1240520009 : Text[1000];
    BEGIN
      IF STRPOS(TempFileName,'%') > 0 THEN
        TempText := STRSUBSTNO(TempFileName,NewCode)
      ELSE
        TempText := TempFileName;

      IF STRLEN(TempText) < MaxStrLenFileName THEN
        EXIT(TempText)
      ELSE
        EXIT('');
    END;

    PROCEDURE AddUpdateLicenseLimitedObjects@1240520013(ShowStatus@1240520011 : Boolean);
    VAR
      LicensePerm@1240520008 : Record 2000000043;
      ESObjectProperty@1240520009 : Record 14123522;
      ESObjectInfo@1240520001 : Record 14123509;
      Window@1240520010 : Dialog;
      InsertedRecords@1240520012 : Integer;
      ModifiedRecords@1240520014 : Integer;
      i@1240520013 : Integer;
    BEGIN
      IF GUIALLOWED THEN
        Window.OPEN(ExtendProgressText(Text010) + Text002);

      ESObjectInfo.RESET;
      ESObjectInfo.SETRANGE("Object Type",ESObjectInfo."Object Type"::Table);
      IF ESObjectInfo.FIND('-') THEN
        REPEAT
          LicensePerm.GET(LicensePerm."Object Type"::TableData,ESObjectInfo."Object ID");
          IF (LicensePerm."Read Permission" = LicensePerm."Read Permission"::Indirect) OR
             (LicensePerm."Insert Permission" = LicensePerm."Insert Permission"::Indirect) OR
             (LicensePerm."Modify Permission" = LicensePerm."Modify Permission"::Indirect) OR
             (LicensePerm."Delete Permission" = LicensePerm."Delete Permission"::Indirect) OR
             (LicensePerm."Execute Permission" = LicensePerm."Execute Permission"::Indirect)
          THEN BEGIN
            IF ESObjectProperty.GET(LicensePerm."Object Type",LicensePerm."Object Number")
            THEN BEGIN
              IF NOT ESObjectProperty."Limited License Object" THEN BEGIN
                ESObjectProperty."Limited License Object" := TRUE;
                ESObjectProperty."Read Permission (License)" := LicensePerm."Read Permission";
                ESObjectProperty."Insert Permission (License)" := LicensePerm."Insert Permission";
                ESObjectProperty."Modify Permission (License)" := LicensePerm."Modify Permission";
                ESObjectProperty."Delete Permission (License)" := LicensePerm."Delete Permission";
                ESObjectProperty."Execute Permission (License)" := LicensePerm."Execute Permission";
                ESObjectProperty.MODIFY(TRUE);

                ModifiedRecords := ModifiedRecords + 1;
              END;
            END ELSE BEGIN
              ESObjectProperty.INIT;
              ESObjectProperty."Object Type" := LicensePerm."Object Type";
              ESObjectProperty."Object ID" := LicensePerm."Object Number";
              ESObjectProperty."Object Level Permissions" := FALSE;
              ESObjectProperty."Limited License Object" := TRUE;
              ESObjectProperty."Read Permission (License)" := LicensePerm."Read Permission";
              ESObjectProperty."Insert Permission (License)" := LicensePerm."Insert Permission";
              ESObjectProperty."Modify Permission (License)" := LicensePerm."Modify Permission";
              ESObjectProperty."Delete Permission (License)" := LicensePerm."Delete Permission";
              ESObjectProperty."Execute Permission (License)" := LicensePerm."Execute Permission";
              ESObjectProperty.INSERT(TRUE);

              InsertedRecords := InsertedRecords + 1;
            END;
          END ELSE BEGIN
            IF (LicensePerm."Read Permission" = LicensePerm."Read Permission"::Yes) OR
               (LicensePerm."Insert Permission" = LicensePerm."Insert Permission"::Yes) OR
               (LicensePerm."Modify Permission" = LicensePerm."Modify Permission"::Yes) OR
               (LicensePerm."Delete Permission" = LicensePerm."Delete Permission"::Yes)
            THEN BEGIN
              IF ESObjectProperty.GET(ESObjectProperty."Object Type"::TableData,ESObjectInfo."Object ID")
              THEN BEGIN
                IF ESObjectProperty."Limited License Object" THEN BEGIN
                  ESObjectProperty."Read Permission (License)" :=
                    ESObjectProperty."Read Permission (License)"::" ";
                  ESObjectProperty."Insert Permission (License)" :=
                    ESObjectProperty."Insert Permission (License)"::" ";
                  ESObjectProperty."Modify Permission (License)" :=
                    ESObjectProperty."Modify Permission (License)"::" ";
                  ESObjectProperty."Delete Permission (License)" :=
                    ESObjectProperty."Delete Permission (License)"::" ";
                  ESObjectProperty."Limited License Object" := FALSE;
                  ESObjectProperty.MODIFY(TRUE);

                  ModifiedRecords := ModifiedRecords + 1;
                END;
              END;
            END;
          END;
        UNTIL ESObjectInfo.NEXT = 0;

      IF GUIALLOWED THEN
        Window.CLOSE;

      IF ShowStatus THEN
        MESSAGE(Text016,InsertedRecords,ModifiedRecords);
      Comment(1,STRSUBSTNO(Text016,InsertedRecords,ModifiedRecords));
    END;

    PROCEDURE ObjectTypeFilter@1240520014() TypeFilter : Text[30];
    BEGIN
      TypeFilter := '0|10';
      IF "Table Level Security" THEN
        TypeFilter := TypeFilter + '|1';
      IF "Form Level Security" THEN
        TypeFilter := TypeFilter + '|2';
      IF "Report Level Security" THEN
        TypeFilter := TypeFilter + '|3';
      IF "Dataport Level Security" THEN
        TypeFilter := TypeFilter + '|4';
      IF "Codeunit Level Security" THEN
        TypeFilter := TypeFilter + '|5';
      IF "XMLPort Level Security" THEN
        TypeFilter := TypeFilter + '|6';
      IF "Page Level Security" THEN
        TypeFilter := TypeFilter + '|8';
      IF "Query Level Security" THEN
        TypeFilter := TypeFilter + '|9';
      EXIT(TypeFilter);
    END;

    PROCEDURE TableFinFilter@1240520036() : Text[1000];
    BEGIN
      EXIT(
        '15|17|21|25|45|81|84|85|95|96|232|253|254|270|271|272|273|274|275|276|' +
        '300|333|363|365|366|379|380|410|840|841|846|847|849|850|' +
        '1101|1103|1104|1105|1109|1110|1111|1112|1113');
    END;

    PROCEDURE TableSalesFilter@1240520037() : Text[1000];
    BEGIN
      EXIT('18|21|36|37|44|110|111|112|113|114|115|222|287|300|379|5107|5108|5126|6660|6661');
    END;

    PROCEDURE TablePurchFilter@1240520038() : Text[1000];
    BEGIN
      EXIT('23|25|38|39|43|99|120|121|122|123|124|125|224|288|380|5109|5110|5125|6650|6651');
    END;

    PROCEDURE TableInvFilter@1240520039() : Text[1000];
    BEGIN
      EXIT(
        '27|30|32|46|83|89|99|233|281|337|339|341|343|5401|5404|' +
        '5700|5715|5717|5718|5823|6507|7002|7012|7023|7132|7134|7154|7156');
    END;

    PROCEDURE TestRestrictedRoleID@1240520015(RoleID@1240520008 : Code[20];ShowError@1240520009 : Boolean) : Boolean;
    BEGIN
      IF (("ALL Role ID" <> '') AND ("ALL Role ID" = RoleID)) OR
         (("SUPER Role ID" <> '') AND ("SUPER Role ID" = RoleID)) OR
         (("SUPER (DATA) Role ID" <> '') AND ("SUPER (DATA) Role ID" = RoleID)) OR
         (("BASIC Role ID" <> '') AND ("BASIC Role ID" = RoleID)) OR
         (("SUPER (NAVIPANE) Role ID" <> '') AND ("SUPER (NAVIPANE) Role ID" = RoleID)) OR
         (("Special 1 Role ID" <> '') AND ("Special 1 Role ID" = RoleID)) OR
         (("Special 2 Role ID" <> '') AND ("Special 2 Role ID" = RoleID)) OR
         (("Special 3 Role ID" <> '') AND ("Special 3 Role ID" = RoleID)) OR
         (("Data Role ID (Quick Security)" <> '') AND ("Data Role ID (Quick Security)" = RoleID)) OR
         (("Data Read Role ID (Quick Sec.)" <> '') AND ("Data Read Role ID (Quick Sec.)" = RoleID)) OR
         (("Data Super Role ID (Quick Sec)" <> '') AND ("Data Super Role ID (Quick Sec)" = RoleID)) OR
         (("Object Role ID (Quick Sec.)" <> '') AND ("Object Role ID (Quick Sec.)" = RoleID))
      THEN
        IF ShowError THEN
          ERROR(Text017,RoleID)
        ELSE
          EXIT(TRUE);

      IF "Table Level Security" AND
         ((("All Free Tables Role ID" <> '') AND ("All Free Tables Role ID" = RoleID)) OR
          (("All Limited Tables Role ID" <> '') AND ("All Limited Tables Role ID" = RoleID)))
      THEN
        IF ShowError THEN
          ERROR(Text017,RoleID)
        ELSE
          EXIT(TRUE);

      IF "Form Level Security" AND
         ((("All Free Forms Role ID" <> '') AND ("All Free Forms Role ID" = RoleID)) OR
          (("All Limited Forms Role ID" <> '') AND ("All Limited Forms Role ID" = RoleID)))
      THEN
        IF ShowError THEN
          ERROR(Text017,RoleID)
        ELSE
          EXIT(TRUE);

      IF "Report Level Security" AND
         ((("All Free Reports Role ID" <> '') AND ("All Free Reports Role ID" = RoleID)) OR
          (("All Limited Reports Role ID" <> '') AND ("All Limited Reports Role ID" = RoleID)))
      THEN
        IF ShowError THEN
          ERROR(Text017,RoleID)
        ELSE
          EXIT(TRUE);

      IF "Dataport Level Security" AND
         ((("All Free Dataports Role ID" <> '') AND ("All Free Dataports Role ID" = RoleID)) OR
          (("All Limited Dataports Role ID" <> '') AND ("All Limited Dataports Role ID" = RoleID)))
      THEN
        IF ShowError THEN
          ERROR(Text017,RoleID)
        ELSE
          EXIT(TRUE);

      IF "Codeunit Level Security" AND
         ((("All Free Codeunits Role ID" <> '') AND ("All Free Codeunits Role ID" = RoleID)) OR
          (("All Limited Codeunits Role ID" <> '') AND ("All Limited Codeunits Role ID" = RoleID)))
      THEN
        IF ShowError THEN
          ERROR(Text017,RoleID)
        ELSE
          EXIT(TRUE);

      IF "XMLPort Level Security" AND
         ((("All Free XMLPorts Role ID" <> '') AND ("All Free XMLPorts Role ID" = RoleID)) OR
          (("All Limited XMLPorts Role ID" <> '') AND ("All Limited XMLPorts Role ID" = RoleID)))
      THEN
        IF ShowError THEN
          ERROR(Text017,RoleID)
        ELSE
          EXIT(TRUE);

      IF "Page Level Security" AND
         ((("All Free Pages Role ID" <> '') AND ("All Free Pages Role ID" = RoleID)) OR
          (("All Limited Pages Role ID" <> '') AND ("All Limited Pages Role ID" = RoleID)))
      THEN
        IF ShowError THEN
          ERROR(Text017,RoleID)
        ELSE
          EXIT(TRUE);

      IF "Query Level Security" AND
         ((("All Free Queries Role ID" <> '') AND ("All Free Queries Role ID" = RoleID)) OR
          (("All Limited Queries Role ID" <> '') AND ("All Limited Queries Role ID" = RoleID)))
      THEN
        IF ShowError THEN
          ERROR(Text017,RoleID)
        ELSE
          EXIT(TRUE);

      IF ("All Free Objects Role ID" <> '') AND ("All Free Objects Role ID" = RoleID) THEN
        IF ShowError THEN
          ERROR(Text017,RoleID)
        ELSE
          EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE Object0ExistsWarning@1240520016(ObjectType@1240520008 : Integer;LevelSecurity@1240520009 : Boolean;xRecLevelSecurity@1240520010 : Boolean);
    VAR
      ESObjectInfo@1240520014 : Record 14123509;
      ESRolePerm@1240520012 : Record 14123506;
      ESRoleBuilderPerm@1240520015 : Record 14123655;
      ESRecordingPerm@1240520016 : Record 14123652;
      PermFound@1240520013 : ARRAY [10] OF Boolean;
    BEGIN
      IF LevelSecurity = xRecLevelSecurity THEN
        EXIT;

      ESObjectInfo."Object Type" := ObjectType;
      IF LevelSecurity THEN BEGIN
        ESRolePerm.RESET;
        ESRolePerm.SETRANGE("Object Type",ObjectType);
        ESRolePerm.SETRANGE("Object ID",0);
        IF ESRolePerm.FIND('-') THEN
          REPEAT
            CASE TRUE OF
              ESRolePerm."Role ID" = "ALL Role ID":
                PermFound[1] := TRUE;
              ESRolePerm."Role ID" = "SUPER Role ID":
                PermFound[2] := TRUE;
              ESRolePerm."Role ID" = "SUPER (DATA) Role ID":
                PermFound[3] := TRUE;
              ESRolePerm."Role ID" = "BASIC Role ID":
                PermFound[4] := TRUE;
              ELSE
                PermFound[5] := TRUE;
            END;
          UNTIL ESRolePerm.NEXT = 0;

        MODIFY(TRUE);

        IF PermFound[5] THEN
          MESSAGE(Text019,ESObjectInfo."Object Type");

        ESRoleBuilderPerm.RESET;
        ESRoleBuilderPerm.SETRANGE("Object Type",ObjectType);
        ESRoleBuilderPerm.SETRANGE("Object ID",0);
        IF ESRoleBuilderPerm.FIND('-') THEN
          MESSAGE(Text020,ESObjectInfo."Object Type");

        ESRecordingPerm.RESET;
        ESRecordingPerm.SETRANGE("Object Type",ObjectType);
        ESRecordingPerm.SETRANGE("Object ID",0);
        IF ESRecordingPerm.FIND('-') THEN
          MESSAGE(Text021,ESObjectInfo."Object Type");
      END ELSE
        MESSAGE(Text022,ESObjectInfo."Object Type");
    END;

    PROCEDURE LookupLiveRole@1240520024(RoleID@1240520008 : Code[20]) : Code[20];
    VAR
      UserRole@1240520009 : Record 2000000004;
    BEGIN
      UserRole."Role ID" := RoleID;
      IF UserRole.FIND('=<>') THEN
        ;

      IF PAGE.RUNMODAL(PAGE::"ES Live Roles",UserRole) = ACTION::LookupOK THEN
        EXIT(UserRole."Role ID")
      ELSE
        EXIT(RoleID);
    END;

    PROCEDURE CreateProfile@1240520017(ShowStatus@1240520009 : Boolean);
    VAR
      ESCreateProfile@1240520008 : Codeunit 14123504;
    BEGIN
      ESCreateProfile.RUN;
    END;

    PROCEDURE ActivateChangeLog@1240520032(ShowStatus@1240520002 : Boolean);
    VAR
      ChangeLogSetup@1240520001 : Record 402;
    BEGIN
      IF ChangeLogSetup.GET THEN BEGIN
        IF NOT ChangeLogSetup."Change Log Activated" THEN BEGIN
          ChangeLogSetup.VALIDATE("Change Log Activated",TRUE);
          ChangeLogSetup.MODIFY(TRUE);
        END;
      END ELSE BEGIN
        ChangeLogSetup.INIT;
        ChangeLogSetup.VALIDATE("Change Log Activated",TRUE);
        ChangeLogSetup.INSERT(TRUE);
      END;

      CreateChangeLogTable(14123521);
      CreateChangeLogTable(14123522);
      CreateChangeLogTable(14123523);
      CreateChangeLogTable(14123525);
      CreateChangeLogTable(14123526);
      CreateChangeLogTable(14123527);
      CreateChangeLogTable(14123528);
      CreateChangeLogTable(14123529);
      CreateChangeLogTable(14123530);
      CreateChangeLogTable(14123531);
      CreateChangeLogTable(14123538);
      CreateChangeLogTable(14123539);
      CreateChangeLogTable(14123540);
      CreateChangeLogTable(14123651);
      CreateChangeLogTable(14123652);
      CreateChangeLogTable(14123653);
      CreateChangeLogTable(14123654);
      CreateChangeLogTable(14123655);
      CreateChangeLogTable(14123658);

      IF ShowStatus THEN
        MESSAGE(Text012);
      Comment(1,Text012);
    END;

    LOCAL PROCEDURE CreateChangeLogTable@1240520033(TableNo@1240520001 : Integer) : Boolean;
    VAR
      ChangeLogSetupTable@1240520002 : Record 403;
      AllObjWithCaption@1240520003 : Record 2000000058;
    BEGIN
      IF ChangeLogSetupTable.GET(TableNo) THEN
        EXIT(FALSE);

      IF NOT AllObjWithCaption.GET(AllObjWithCaption."Object Type"::Table,TableNo) THEN
        EXIT(FALSE);

      ChangeLogSetupTable.INIT;
      ChangeLogSetupTable.VALIDATE("Table No.",TableNo);
      ChangeLogSetupTable.VALIDATE("Log Insertion",ChangeLogSetupTable."Log Insertion"::"All Fields");
      ChangeLogSetupTable.VALIDATE("Log Modification",ChangeLogSetupTable."Log Modification"::"All Fields");
      ChangeLogSetupTable.VALIDATE("Log Deletion",ChangeLogSetupTable."Log Deletion"::"All Fields");
      ChangeLogSetupTable.INSERT(TRUE);

      EXIT(TRUE);
    END;

    PROCEDURE ImportSourceCode@1240520018(ShowStatus@1240520009 : Boolean);
    VAR
      ESReadSourceCode@1240520008 : Codeunit 14123601;
      ESRelation@1240520001 : Record 14123601;
    BEGIN
      TESTFIELD("Source Code File Name");
      IF "Publish Allowed" THEN BEGIN
        ESReadSourceCode.UpdateFromSourceCode(
          "Source Code File Name","Test Mode",0,"Create Variables",FALSE,ShowStatus);

        IF "Always Add Missing from Fields" THEN
          ESRelation.AddMissingFromFields(ShowStatus);

        IF "Always Add Miss. from Metadata" THEN
          ESRelation.AddMissingFromTableRelMetadata(ShowStatus);
      END ELSE
        ESReadSourceCode.UpdateFromSourceCode(
          "Source Code File Name","Test Mode",3,"Create Variables",FALSE,ShowStatus);
    END;

    PROCEDURE DirectRoleIntegration@1240520034() : Boolean;
    VAR
      ESLoginSetup@1240520001 : Record 14123540;
    BEGIN
      IF NOT "Direct Role Integration" THEN
        EXIT(FALSE);

      IF NOT ESLoginSetup.GET(USERID) THEN
        EXIT(FALSE);

      EXIT(ESLoginSetup."Direct Role Integration");
    END;

    PROCEDURE DirectLoginIntegration@1240520035() : Boolean;
    VAR
      ESLoginSetup@1240520001 : Record 14123540;
    BEGIN
      IF NOT "Direct Login Integration" THEN
        EXIT(FALSE);

      IF NOT ESLoginSetup.GET(USERID) THEN
        EXIT(FALSE);

      EXIT(ESLoginSetup."Direct Login Integration");
    END;

    PROCEDURE TestNoPublishInOtherCompanies@1240520022();
    VAR
      Company@1240520008 : Record 2000000006;
      ESSecuritySetup@1240520009 : Record 14123521;
    BEGIN
      Company.RESET;
      IF Company.FIND('-') THEN
        REPEAT
          IF Company.Name <> COMPANYNAME THEN BEGIN
            ESSecuritySetup.CHANGECOMPANY(Company.Name);
            IF ESSecuritySetup.GET THEN
              IF ESSecuritySetup."Publish Allowed" THEN
                ERROR(
                  Text031,
                  FIELDCAPTION("Publish Allowed"),Company.Name);
          END;
        UNTIL Company.NEXT = 0;
    END;

    PROCEDURE TestNoBlankRecords@1240520001(ConfirmDelete@1240520002 : Boolean;ShowStatus@1240520001 : Boolean);
    VAR
      ESRole@1240520003 : Record 14123505;
      ESWindowsAccessControl@1240520007 : Record 14123504;
    BEGIN
      IF ESRole.GET('') THEN BEGIN
        IF ConfirmDelete THEN BEGIN
          IF CONFIRM(
               STRSUBSTNO(Text018,ESRole.TABLECAPTION) + ' ' +
               Text036,
               TRUE)
          THEN
            ESRole.DELETE;
        END ELSE BEGIN
          ESRole.DELETE;
          MESSAGE(Text018,ESRole.TABLECAPTION);
        END;
      END;

      ESWindowsAccessControl.RESET;
      ESWindowsAccessControl.SETRANGE("Role ID",'');
      IF ESWindowsAccessControl.FIND('-') THEN BEGIN
        IF ConfirmDelete THEN BEGIN
          IF CONFIRM(
               STRSUBSTNO(Text018,ESWindowsAccessControl.TABLECAPTION) + ' ' +
               Text036,
               TRUE)
          THEN
            ESWindowsAccessControl.DELETEALL;
        END ELSE BEGIN
          ESWindowsAccessControl.DELETEALL;
          MESSAGE(Text018,ESWindowsAccessControl.TABLECAPTION);
        END;
      END;
    END;

    PROCEDURE TestUnrelatedChilds@1240520026(TestWindowsAccessControls@1240520009 : Boolean;TestRolePermissions@1240520010 : Boolean;ConfirmDelete@1240520001 : Boolean;ShowStatus@1240520015 : Boolean);
    VAR
      ESWindowsAccessControl@1240520011 : Record 14123504;
      ESRolePerm@1240520013 : Record 14123506;
      RecordCount@1240520014 : Integer;
    BEGIN
      IF TestWindowsAccessControls THEN BEGIN
        ESWindowsAccessControl.RESET;
        ESWindowsAccessControl.SETRANGE("Windows Login Exists",FALSE);
        IF ESWindowsAccessControl.FIND('-') THEN BEGIN
          RecordCount := ESWindowsAccessControl.COUNT;

          IF ConfirmDelete THEN BEGIN
            IF CONFIRM(
                 STRSUBSTNO(Text035,RecordCount,ESWindowsAccessControl.TABLECAPTION) + ' ' +
                 Text036,
                 TRUE)
            THEN
              ESWindowsAccessControl.DELETEALL;
          END ELSE BEGIN
            ESWindowsAccessControl.DELETEALL;
            MESSAGE(Text035,RecordCount,ESWindowsAccessControl.TABLECAPTION);
          END;
        END ELSE BEGIN
          IF ShowStatus THEN
            MESSAGE(Text037,ESWindowsAccessControl.TABLECAPTION);
          Comment(1,STRSUBSTNO(Text037,ESWindowsAccessControl.TABLECAPTION));
        END;
      END;

      IF TestRolePermissions THEN BEGIN
        ESRolePerm.RESET;
        ESRolePerm.SETRANGE("Role Exists",FALSE);
        IF ESRolePerm.FIND('-') THEN BEGIN
          RecordCount := ESRolePerm.COUNT;

          IF ConfirmDelete THEN BEGIN
            IF CONFIRM(
                 STRSUBSTNO(Text035,RecordCount,ESRolePerm.TABLECAPTION) + ' ' +
                 Text036,
                 TRUE)
            THEN
              ESRolePerm.DELETEALL;
          END ELSE BEGIN
            ESRolePerm.DELETEALL;
            MESSAGE(Text035,RecordCount,ESRolePerm.TABLECAPTION);
          END;
        END ELSE BEGIN
          IF ShowStatus THEN
            MESSAGE(Text037,ESRolePerm.TABLECAPTION);
          Comment(1,STRSUBSTNO(Text037,ESRolePerm.TABLECAPTION));
        END;
      END;
    END;

    PROCEDURE TestUnrelatedChildsLive@1240520005(TestDatabaseAccessControls@1240520008 : Boolean;TestWindowsAccessControls@1240520009 : Boolean;TestRolePermissions@1240520010 : Boolean;ConfirmDelete@1240520001 : Boolean;ShowStatus@1240520015 : Boolean);
    VAR
      WindowsAccessControl@1240520011 : Record 2000000053;
      WindowsAccessControlTmp@1240520005 : TEMPORARY Record 2000000053;
      WindowsLogin@1240520003 : Record 2000000120;
      Role@1240520004 : Record 2000000004;
      Company@1240520007 : Record 2000000006;
      Permission@1240520013 : Record 2000000005;
      PermissionTmp@1240520016 : TEMPORARY Record 2000000005;
      RecordCount@1240520014 : Integer;
    BEGIN
      IF TestWindowsAccessControls THEN BEGIN
        RecordCount := 0;
        WindowsAccessControl.RESET;
        IF WindowsAccessControl.FIND('-') THEN
          REPEAT
            IF NOT WindowsLogin.GET(WindowsAccessControl."User Security ID") OR
               NOT Role.GET(WindowsAccessControl."Role ID") OR
               (WindowsAccessControl."Role ID" = '') OR
               (NOT Company.GET(WindowsAccessControlTmp."Company Name") AND
                (WindowsAccessControl."Company Name" <> ''))
            THEN BEGIN
              WindowsAccessControlTmp := WindowsAccessControl;
              WindowsAccessControlTmp.INSERT;

              RecordCount := RecordCount + 1;
            END;
          UNTIL WindowsAccessControl.NEXT = 0;

        IF WindowsAccessControlTmp.FIND('-') THEN BEGIN
          IF ConfirmDelete THEN BEGIN
            IF CONFIRM(STRSUBSTNO(Text035,RecordCount,WindowsAccessControl.TABLECAPTION),TRUE)
            THEN
              REPEAT
                WindowsAccessControl := WindowsAccessControlTmp;
                WindowsAccessControl.DELETE;
              UNTIL WindowsAccessControlTmp.NEXT = 0;
          END ELSE BEGIN
            REPEAT
              WindowsAccessControl := WindowsAccessControlTmp;
              WindowsAccessControl.DELETE;
            UNTIL WindowsAccessControlTmp.NEXT = 0;

            MESSAGE(Text035,RecordCount,WindowsAccessControl.TABLECAPTION);
          END;
        END ELSE BEGIN
          IF ShowStatus THEN
            MESSAGE(Text037,WindowsAccessControl.TABLECAPTION);
          Comment(1,STRSUBSTNO(Text037,WindowsAccessControl.TABLECAPTION));
        END;
      END;

      IF TestRolePermissions THEN BEGIN
        RecordCount := 0;
        Permission.RESET;
        IF Permission.FIND('-') THEN
          REPEAT
            IF NOT Role.GET(Permission."Role ID") OR
               (Permission."Role ID" = '')
            THEN BEGIN
              PermissionTmp := Permission;
              PermissionTmp.INSERT;

              RecordCount := RecordCount + 1;
            END;
          UNTIL Permission.NEXT = 0;

        IF PermissionTmp.FIND('-') THEN BEGIN
          IF ConfirmDelete THEN BEGIN
            IF CONFIRM(STRSUBSTNO(Text035,RecordCount,Permission.TABLECAPTION),TRUE)
            THEN
              REPEAT
                Permission := PermissionTmp;
                Permission.DELETE;
              UNTIL PermissionTmp.NEXT = 0;
          END ELSE BEGIN
            REPEAT
              Permission := PermissionTmp;
              Permission.DELETE;
            UNTIL PermissionTmp.NEXT = 0;

            MESSAGE(Text035,RecordCount,Permission.TABLECAPTION);
          END;
        END ELSE BEGIN
          IF ShowStatus THEN
            MESSAGE(Text037,Permission.TABLECAPTION);
          Comment(1,STRSUBSTNO(Text037,Permission.TABLECAPTION));
        END;
      END;
    END;

    PROCEDURE TestOldPermissions@1240520029(TestRolePermissions@1240520009 : Boolean;ConfirmDelete@1240520001 : Boolean;ShowStatus@1240520008 : Boolean);
    VAR
      ESRolePerm@1240520011 : Record 14123506;
      RecordCount@1240520010 : Integer;
    BEGIN
      IF TestRolePermissions THEN BEGIN
        ESRolePerm.RESET;
        ESRolePerm.SETRANGE(
          "Object Type",ESRolePerm."Object Type"::TableData,ESRolePerm."Object Type"::Query);
        ESRolePerm.SETFILTER("Object ID",'>0');
        ESRolePerm.SETRANGE("Object Caption",'');
        IF ESRolePerm.FIND('-') THEN BEGIN
          RecordCount := ESRolePerm.COUNT;

          IF ConfirmDelete THEN BEGIN
            IF CONFIRM(
                 STRSUBSTNO(Text040,RecordCount,ESRolePerm.TABLECAPTION) + ' ' +
                 Text036,
                 TRUE)
            THEN
              ESRolePerm.DELETEALL;
          END ELSE BEGIN
            ESRolePerm.DELETEALL;
            MESSAGE(Text040,RecordCount,ESRolePerm.TABLECAPTION);
          END;
        END ELSE BEGIN
          IF ShowStatus THEN
            MESSAGE(Text041,ESRolePerm.TABLECAPTION);
          Comment(1,STRSUBSTNO(Text041,ESRolePerm.TABLECAPTION));
        END;
      END;
    END;

    PROCEDURE TestUniqueWindowsLogins@1240520027();
    VAR
      WindowsLogin@1240520008 : Record 2000000120;
      ESWindowsLogin@1240520011 : Record 14123503;
      ESWindowsLoginMapping@1240520009 : Record 14123529;
      ESLoginTmp@1240520010 : TEMPORARY Record 14123527;
    BEGIN
      IF "Use Complete User ID" THEN
        EXIT;

      WindowsLogin.RESET;
      IF WindowsLogin.FIND('-') THEN
        REPEAT
          ESLoginTmp.Type := ESLoginTmp.Type::Windows;
          IF NOT ESWindowsLoginMapping.GET(WindowsLogin."User Security ID") THEN BEGIN
            ESLoginTmp."User ID" := ESWindowsLogin.FindUserID(WindowsLogin."User Name");
          END ELSE
            ESLoginTmp."User ID" := ESWindowsLoginMapping."User ID";
          ESLoginTmp."Login SID" := WindowsLogin."User Security ID";

          IF ESLoginTmp.GET(ESLoginTmp.Type,ESLoginTmp."User ID") THEN
            ERROR(
              Text038,
              WindowsLogin."User Name",WindowsLogin."User Security ID",ESLoginTmp."Login SID",
              ESWindowsLoginMapping.TABLECAPTION)
          ELSE
            ESLoginTmp.INSERT;
        UNTIL WindowsLogin.NEXT = 0;
    END;

    PROCEDURE TestPublishCompany@1240520002();
    BEGIN
      TestSetupFinished;
      IF NOT "Publish Allowed" THEN
        ERROR(Text065 + Text066);
    END;

    PROCEDURE TestRecordingOnlyCompany@1240520003();
    BEGIN
      TestSetupFinished;
      TESTFIELD("Publish Allowed",FALSE);
    END;

    PROCEDURE TestSetupFinished@1240520004();
    BEGIN
      IF NOT GET THEN
        ERROR(Text065 + Text066);
    END;

    PROCEDURE CRONUSCompanyComment@1240520019();
    BEGIN
      IF NOT "Demo in CRONUS" AND (COPYSTR(COMPANYNAME,1,6) = 'CRONUS') THEN
        MESSAGE(Text023 + Text024);
    END;

    PROCEDURE ExtendProgressText@1240520041(OriginalText@1240520001 : Text[1000]) : Text[1000];
    VAR
      NewText@1240520002 : Text[1000];
    BEGIN
      IF NOT ISSERVICETIER THEN
        EXIT(OriginalText);

      IF STRLEN(OriginalText) = 0 THEN
        EXIT(OriginalText);

      IF STRLEN(OriginalText) > 100 THEN
        EXIT(OriginalText);

      IF COPYSTR(OriginalText,STRLEN(OriginalText),1) = '\' THEN
        EXIT(
          COPYSTR(OriginalText,1,STRLEN(OriginalText) - 1) +
          PADSTR(' ',100 - STRLEN(OriginalText) + 1,' ') + '.\')
      ELSE
        EXIT(OriginalText + PADSTR(' ',100 - STRLEN(OriginalText),' ') + '.');
    END;

    PROCEDURE CreateSetup@1240520020(ShowStatus@1240520012 : Boolean;CompleteSetup@1240520017 : Boolean);
    VAR
      ESLogin@1240520008 : Record 14123527;
      ESRole@1240520010 : Record 14123505;
      UserRole@1240520011 : Record 2000000004;
      ESCompanyGroup@1240520014 : Record 14123530;
      ESObjectProperty@1240520018 : Record 14123522;
      ESSQLObjectName@1240520001 : Record 14123658;
      ESRestorePoint@1240520002 : Record 14123523;
      ESSecuritySetupCompany@1240520003 : Record 14123521;
      ESMgt@1240520009 : Codeunit 14123501;
      FileMgt@1003 : Codeunit 419;
      SourceCodeFile@1000 : File;
      Window@1002 : Dialog;
      ServerFileName@1001 : Text[1000];
      StartTime@1240520013 : Time;
    BEGIN
      IF NOT "Setup Not Complete" THEN BEGIN
        TESTFIELD("Publish Allowed",FALSE);
        TESTFIELD("Only Recording Allowed",FALSE);
      END;
      TESTFIELD("Object Range Filter");

      IF NOT CompleteSetup THEN BEGIN
        TESTFIELD("Publish Allowed Company Name");
        ESSecuritySetupCompany.CHANGECOMPANY("Publish Allowed Company Name");
        ESSecuritySetupCompany.GET;
        ESSecuritySetupCompany.TESTFIELD("Publish Allowed");
        "Source Code Analyzer Licensed" := ESSecuritySetupCompany."Source Code Analyzer Licensed";
        "Permission Recorder Licensed" := ESSecuritySetupCompany."Permission Recorder Licensed";
      END ELSE
        TestNoPublishInOtherCompanies;

      IF CompleteSetup THEN BEGIN
        IF "Source Code Analyzer Licensed" THEN BEGIN
          TESTFIELD("Source Code File Name");

          SourceCodeFile.WRITEMODE(FALSE);
          SourceCodeFile.TEXTMODE(FALSE);
          IF NOT SourceCodeFile.OPEN("Source Code File Name") THEN BEGIN
            IF GUIALLOWED THEN
              Window.OPEN(Text102);
            ServerFileName := FileMgt.UploadFileSilent("Source Code File Name");
            IF GUIALLOWED THEN
              Window.CLOSE;

            IF NOT SourceCodeFile.OPEN(ServerFileName) THEN
              SourceCodeFile.OPEN("Source Code File Name");
            SourceCodeFile.CLOSE;
            ERASE(ServerFileName);
          END ELSE
            SourceCodeFile.CLOSE;
        END;

        IF "ALL Role ID" <> '' THEN
          IF NOT UserRole.GET("ALL Role ID") THEN
            ERROR(Text030,"ALL Role ID",FIELDCAPTION("ALL Role ID"));

        IF "SUPER Role ID" <> '' THEN
          IF NOT UserRole.GET("SUPER Role ID") THEN
            ERROR(Text030,"SUPER Role ID",FIELDCAPTION("SUPER Role ID"));

        IF "SUPER (DATA) Role ID" <> '' THEN
          IF NOT UserRole.GET("SUPER (DATA) Role ID") THEN
            ERROR(Text030,"SUPER (DATA) Role ID",FIELDCAPTION("SUPER (DATA) Role ID"));

        IF "BASIC Role ID" <> '' THEN
          IF NOT UserRole.GET("BASIC Role ID") THEN
            ERROR(Text030,"BASIC Role ID",FIELDCAPTION("BASIC Role ID"));

        IF "SUPER (NAVIPANE) Role ID" <> '' THEN
          IF NOT UserRole.GET("SUPER (NAVIPANE) Role ID") THEN
            ERROR(Text030,"SUPER (NAVIPANE) Role ID",FIELDCAPTION("SUPER (NAVIPANE) Role ID"));

        IF "Special 1 Role ID" <> '' THEN
          IF NOT UserRole.GET("Special 1 Role ID") THEN
            ERROR(Text030,"Special 1 Role ID",FIELDCAPTION("Special 1 Role ID"));

        IF "Special 2 Role ID" <> '' THEN
          IF NOT UserRole.GET("Special 2 Role ID") THEN
            ERROR(Text030,"Special 2 Role ID",FIELDCAPTION("Special 2 Role ID"));

        IF "Special 3 Role ID" <> '' THEN
          IF NOT UserRole.GET("Special 3 Role ID") THEN
            ERROR(Text030,"Special 3 Role ID",FIELDCAPTION("Special 3 Role ID"));

        TestUniqueWindowsLogins;

        TESTFIELD("Last Restore Point No.");
      END;

      IF "Permission Recorder Licensed" THEN
        TESTFIELD("Last Recording No.");

      StartTime := TIME;
      Comment(1,Text042 + Text044);

      FIND;
      "Publish Allowed" := CompleteSetup;
      "Only Recording Allowed" := NOT CompleteSetup;
      "Update Security Setup" := TRUE;
      MODIFY(TRUE);
      COMMIT;

      IF NOT "Create Profile" THEN BEGIN
        Comment(1,Text042 + Text045);
        CreateProfile(ShowStatus);

        FIND;
        "Create Profile" := TRUE;
        MODIFY;
        COMMIT;
      END;

      IF CompleteSetup THEN BEGIN
        IF NOT "Create Rest Point Live2EasySec" THEN BEGIN
          Comment(1,Text042 + Text046);
          ESMgt.Live2ES(TRUE,Text029,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE);

          ESRestorePoint.RESET;
          ESRestorePoint.SETRANGE("Live Restore Point",TRUE);
          IF ESRestorePoint.FIND('+') THEN BEGIN
            ESRestorePoint.Locked := TRUE;
            ESRestorePoint.MODIFY;
          END;

          FIND;
          "Create Rest Point Live2EasySec" := TRUE;
          MODIFY;
          COMMIT;
        END;

        IF NOT "Create Company Groups" THEN BEGIN
          Comment(1,Text042 + Text047);
          ESCompanyGroup.CreateCompanyGroupPerCompany(FALSE,ShowStatus);

          FIND;
          "Create Company Groups" := TRUE;
          MODIFY;
          COMMIT;
        END;

        IF NOT "Update Logins" THEN BEGIN
          Comment(1,Text042 + Text048);
          ESLogin.GetNewLogins(ShowStatus,FALSE,TRUE);

          FIND;
          "Update Logins" := TRUE;
          MODIFY;
          COMMIT;
        END;

        IF NOT "Update Limited License Perms." THEN BEGIN
          Comment(1,Text042 + Text049);
          AddUpdateLicenseLimitedObjects(ShowStatus);

          ESObjectProperty.RESET;
          ESObjectProperty.SETRANGE("Object Type",ESObjectProperty."Object Type"::TableData);
          ESObjectProperty.SETRANGE("Limited License Object",TRUE);
          IF NOT ESObjectProperty.FIND('-') THEN
            ESObjectProperty.InsertDefaultLicense(ShowStatus);

          FIND;
          "Update Limited License Perms." := TRUE;
          MODIFY;
          COMMIT;
        END;
      END;

      IF "Source Code Analyzer Licensed" THEN BEGIN
        IF NOT "Get Relations from Source Code" THEN BEGIN
          Comment(1,Text042 + Text050);
          ImportSourceCode(ShowStatus);

          FIND;
          "Get Relations from Source Code" := TRUE;
          MODIFY;
          COMMIT;
        END;
      END;

      IF CompleteSetup THEN BEGIN
        IF "Permission Recorder Licensed" THEN BEGIN
          IF NOT "Create Role Det from All Roles" THEN BEGIN
            Comment(1,Text042 + Text051);
            ESRole.UpdateAllToRoleDetail(ShowStatus);

            FIND;
            "Create Role Det from All Roles" := TRUE;
            MODIFY;
            COMMIT;
          END;

          IF NOT "Create SQL Object Names" THEN BEGIN
            Comment(1,Text042 + Text057);
            ESSQLObjectName.PopulateWithAllTables(ShowStatus);

            FIND;
            "Create SQL Object Names" := TRUE;
            MODIFY;
            COMMIT;
          END;
        END;
      END;

      IF CompleteSetup THEN BEGIN
        IF NOT "Test for <blank> records" THEN BEGIN
          Comment(1,Text042 + Text052);
          TestNoBlankRecords(FALSE,ShowStatus);

          FIND;
          "Test for <blank> records" := TRUE;
          MODIFY;
          COMMIT;
        END;

        IF NOT "Test for Unrel.WindowsAccCtrls" THEN BEGIN
          Comment(1,Text042 + Text053);
          TestUnrelatedChilds(TRUE,FALSE,FALSE,ShowStatus);

          FIND;
          "Test for Unrel.WindowsAccCtrls" := TRUE;
          MODIFY;
          COMMIT;
        END;

        IF NOT "Test for Unrelated Role Perms" THEN BEGIN
          Comment(1,Text042 + Text054);
          TestUnrelatedChilds(FALSE,TRUE,FALSE,ShowStatus);

          FIND;
          "Test for Unrelated Role Perms" := TRUE;
          MODIFY;
          COMMIT;
        END;

        IF NOT "Test for Old Object Perms" THEN BEGIN
          Comment(1,Text042 + Text056);
          TestOldPermissions(TRUE,FALSE,ShowStatus);

          FIND;
          "Test for Old Object Perms" := TRUE;
          MODIFY;
          COMMIT;
        END;
      END;

      IF CompleteSetup THEN BEGIN
        UpdateFREEAndLIMITEDRoles(ShowStatus);
        COMMIT;
      END;

      IF CompleteSetup THEN BEGIN
        ESObjectProperty.InsertDefaultQuickSecurity(ShowStatus);
        COMMIT;

        UpdateQuickSecurityRoles(ShowStatus);
        COMMIT;

        CreateQuickSecurityLoginRole(ShowStatus);
        COMMIT;
      END;

      IF CompleteSetup THEN BEGIN
        ESObjectProperty.InsertLimitedUserIncluded(ShowStatus);
        COMMIT;

        ESObjectProperty.InsertSegregationOfDuties(ShowStatus);
        UpdateQuickSecurityRoles(ShowStatus);
        COMMIT;
      END;

      Comment(1,Text043 + Text044);
      FIND;
      "Setup Not Complete" := FALSE;
      MODIFY;
      COMMIT;

      MESSAGE(Text039,ROUND((TIME - StartTime) / 1000,1));
    END;

    PROCEDURE UpdateData@1240520031(ShowStatus@1240520004 : Boolean);
    VAR
      ESSecuritySetup2@1240520001 : Record 14123521;
      ESObjectProperty@1240520003 : Record 14123522;
      TestRoleID@1240520002 : Code[20];
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"ES Create Profile");

      IF ("Data Role ID (Quick Security)" = '') AND ("Data Read Role ID (Quick Sec.)" = '') AND
         ("Data Super Role ID (Quick Sec)" = '') AND ("Object Role ID (Quick Sec.)" = '') AND
         ("Login Role ID (Quick Security)" = '')
      THEN BEGIN
        ESSecuritySetup2.INIT;
        "Data Role ID (Quick Security)" := ESSecuritySetup2."Data Role ID (Quick Security)";
        "Data Read Role ID (Quick Sec.)" := ESSecuritySetup2."Data Read Role ID (Quick Sec.)";
        "Data Super Role ID (Quick Sec)" := ESSecuritySetup2."Data Super Role ID (Quick Sec)";
        "Object Role ID (Quick Sec.)" := ESSecuritySetup2."Object Role ID (Quick Sec.)";
        "Login Role ID (Quick Security)" := ESSecuritySetup2."Login Role ID (Quick Security)";
        MODIFY(TRUE);
        COMMIT;

        ESObjectProperty.InsertDefaultQuickSecurity(ShowStatus);
        CreateQuickSecurityLoginRole(ShowStatus);
        UpdateQuickSecurityRoles(ShowStatus);

        COMMIT;
        GET;
      END;

      IF "All Free Objects Role ID" = '' THEN BEGIN
        CASE TRUE OF
          "All Free Codeunits Role ID" <> '':
            TestRoleID := "All Free Codeunits Role ID";
          "All Free Reports Role ID" <> '':
            TestRoleID := "All Free Reports Role ID";
          "All Free Forms Role ID" <> '':
            TestRoleID := "All Free Forms Role ID";
          "All Free Pages Role ID" <> '':
            TestRoleID := "All Free Pages Role ID";
          "All Free Tables Role ID" <> '':
            TestRoleID := "All Free Tables Role ID";
          "All Free XMLPorts Role ID" <> '':
            TestRoleID := "All Free XMLPorts Role ID";
          "All Free Dataports Role ID" <> '':
            TestRoleID := "All Free Dataports Role ID";
          "All Free Queries Role ID" <> '':
            TestRoleID := "All Free Queries Role ID";
          ELSE
            TestRoleID := '';
        END;

        IF TestRoleID <> '' THEN BEGIN
          IF (("All Free Tables Role ID" ='') OR ("All Free Tables Role ID" = TestRoleID)) AND
             (("All Free Forms Role ID" ='') OR ("All Free Forms Role ID" = TestRoleID)) AND
             (("All Free Reports Role ID" ='') OR ("All Free Reports Role ID" = TestRoleID)) AND
             (("All Free Dataports Role ID" ='') OR ("All Free Dataports Role ID" = TestRoleID)) AND
             (("All Free Codeunits Role ID" ='') OR ("All Free Codeunits Role ID" = TestRoleID)) AND
             (("All Free XMLPorts Role ID" ='') OR ("All Free XMLPorts Role ID" = TestRoleID)) AND
             (("All Free Pages Role ID" ='') OR ("All Free Pages Role ID" = TestRoleID)) AND
             (("All Free Queries Role ID" ='') OR ("All Free Queries Role ID" = TestRoleID))
          THEN BEGIN
            "All Free Objects Role ID" := TestRoleID;
            "All Free Tables Role ID" := '';
            "All Free Forms Role ID" := '';
            "All Free Reports Role ID" := '';
            "All Free Dataports Role ID" := '';
            "All Free Codeunits Role ID" := '';
            "All Free XMLPorts Role ID" := '';
            "All Free Pages Role ID" := '';
            "All Free Queries Role ID" := '';
            MODIFY(TRUE);
            COMMIT;

            UpdateFREEAndLIMITEDRoles(ShowStatus);

            COMMIT;
            GET;
          END ELSE
            MESSAGE(Text067,FIELDCAPTION("All Free Objects Role ID"));
        END ELSE BEGIN
          ESSecuritySetup2.INIT;
          "All Free Objects Role ID" := ESSecuritySetup2."All Free Objects Role ID";
          MODIFY(TRUE);
          COMMIT;

          UpdateFREEAndLIMITEDRoles(ShowStatus);

          COMMIT;
          GET;
        END;
      END;

      IF NOT "Optimized Publishing" THEN
        IF CONFIRM(Text068,TRUE,FIELDCAPTION("Optimized Publishing")) THEN BEGIN
          "Optimized Publishing" := TRUE;
          MODIFY(TRUE);
          COMMIT;
        END;

      IF "No. of Restore Points to Keep" = 0 THEN
        IF CONFIRM(Text069,TRUE,FIELDCAPTION("No. of Restore Points to Keep")) THEN BEGIN
          "No. of Restore Points to Keep" := 20;
          MODIFY(TRUE);
          COMMIT;
        END;

      IF NOT "Remove Specific Table Perm." THEN
        IF CONFIRM(Text068,TRUE,FIELDCAPTION("Remove Specific Table Perm.")) THEN BEGIN
          "Remove Specific Table Perm." := TRUE;
          MODIFY(TRUE);
          COMMIT;
        END;

      IF NOT "Use User Name instead of SID" THEN
        IF CONFIRM(Text068,TRUE,FIELDCAPTION("Use User Name instead of SID")) THEN BEGIN
          "Use User Name instead of SID" := TRUE;
          MODIFY(TRUE);
          COMMIT;
        END;

      ESObjectProperty.RESET;
      ESObjectProperty.SETRANGE("Segregation of Duties",TRUE);
      IF NOT ESObjectProperty.FIND('-') THEN
        IF CONFIRM(Text011,TRUE) THEN BEGIN
          ESObjectProperty.InsertSegregationOfDuties(TRUE);
          COMMIT;
        END;
    END;

    PROCEDURE AboutEasySecurity@1240520021();
    VAR
      Object@1240520008 : Record 2000000001;
      HighestVersion@1240520009 : Text[80];
      NoOfObjects@1240520010 : Integer;
      ModifiedObjects@1240520011 : Integer;
    BEGIN
      Object.RESET;
      Object.SETFILTER(Type,'>0');
      Object.SETRANGE("Company Name",'');
      Object.SETFILTER("Version List",'ES1*');
      Object.FIND('-');
      REPEAT
        NoOfObjects := NoOfObjects + 1;
        IF Object.Modified THEN
          ModifiedObjects := ModifiedObjects + 1;

        IF Object."Version List" > HighestVersion THEN
          HighestVersion := Object."Version List";
      UNTIL Object.NEXT = 0;

      MESSAGE(Text009,HighestVersion,NoOfObjects,ModifiedObjects);
    END;

    PROCEDURE ExportAllLicensedObjectsToText@1240520028(SetDBMTableNo@1240520001 : Boolean;OnlyLicensedObjects@1240520002 : Boolean);
    VAR
      ESMgt@1240520008 : Codeunit 14123501;
    BEGIN
      TESTFIELD("Source Code Analyzer Licensed");
      IF NOT SetDBMTableNo THEN
        TESTFIELD("Source Code File Name");
      ESMgt.ExportLicenseObjectToText(
        "Source Code File Name",TRUE,SetDBMTableNo,OnlyLicensedObjects,TRUE);
    END;

    PROCEDURE RunInstallWizard@1240520025(InitRecord@1240520009 : Boolean);
    VAR
      Company@1240520001 : Record 2000000006;
      Selection@1240520008 : Integer;
    BEGIN
      TESTFIELD("Publish Allowed",FALSE);
      TESTFIELD("Only Recording Allowed",FALSE);

      IF InitRecord THEN BEGIN
        INIT;
        INSERT;
        COMMIT;
      END;

      CRONUSCompanyComment;

      Selection := STRMENU(Text003,1,Text007);

      CASE Selection OF
        1:
          BEGIN
            TestNoPublishInOtherCompanies;

            IF "Setup Not Complete" THEN BEGIN
              FIND;
              "Source Code Analyzer Licensed" := TRUE;
              "Permission Recorder Licensed" := TRUE;
              "Create Variables" := TRUE;
              MODIFY;
              COMMIT;
            END;

            PAGE.RUNMODAL(PAGE::"ES Setup Easy Security");
          END;
        2:
          BEGIN
            IF "Setup Not Complete" THEN BEGIN
              FIND;

              IF "Publish Allowed Company Name" = '' THEN BEGIN
                Company.FIND('-');
                REPEAT
                  ESSecuritySetup.CHANGECOMPANY(Company.Name);
                  IF ESSecuritySetup.GET THEN
                    IF ESSecuritySetup."Publish Allowed" THEN BEGIN
                      "Permission Recorder Licensed" := ESSecuritySetup."Permission Recorder Licensed";
                      "Publish Allowed Company Name" := Company.Name;
                    END;
                UNTIL (Company.NEXT = 0) OR ("Publish Allowed Company Name" <> '');
              END;

              MODIFY;
              COMMIT;
            END;

            PAGE.RUNMODAL(PAGE::"ES Setup Recording Only");
          END;
      END;
    END;

    PROCEDURE Comment@1240520012(FunctionNo@1240520008 : ' ,Insert,Show,Exist,DeleteAll';NewText@1240520010 : Text[1000]) : Boolean;
    VAR
      ESComment@1240520009 : Record 14123524;
    BEGIN
      ESComment.RESET;
      ESComment.SETRANGE("Table ID",DATABASE::"ES Security Setup");
      ESComment.SETRANGE(Code,"Primary Key");
      EXIT(ESComment.Functions(FunctionNo,COPYSTR(NewText,1,MAXSTRLEN(ESComment.Text))));
    END;

    BEGIN
    END.
  }
}

