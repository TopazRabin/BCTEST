OBJECT Table 14000902 E-Mail Line
{
  OBJECT-PROPERTIES
  {
    Date=09/24/20;
    Time=[ 5:43:57 AM];
    Modified=Yes;
    Version List=SE0.50.32;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               EMailElement.RESET;
               EMailElement.SETRANGE("E-Mail Code","E-Mail Code");
               EMailElement.SETRANGE("Line No.","Line No.");
               EMailElement.DELETEALL;

               EMailCommentLine.RESET;
               EMailCommentLine.SETRANGE("Table ID",DATABASE::"E-Mail Line");
               EMailCommentLine.SETRANGE(Code,"E-Mail Code");
               EMailCommentLine.SETRANGE("Integer 1","Line No.");
               EMailCommentLine.DELETEALL;
             END;

    CaptionML=ENU=E-Mail Line;
  }
  FIELDS
  {
    { 1   ;   ;E-Mail Code         ;Code10        ;TableRelation="E-Mail Header";
                                                   CaptionML=ENU=E-Mail Code }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 11  ;   ;Text                ;Text250       ;CaptionML=ENU=Text }
    { 12  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  EMailElement.RESET;
                                                                  EMailElement.SETRANGE("E-Mail Code","E-Mail Code");
                                                                  EMailElement.SETRANGE("Line No.","Line No.");
                                                                  IF EMailElement.FIND('-') THEN
                                                                    REPEAT
                                                                      EMailElement.VALIDATE("Line Type",Type);
                                                                      EMailElement.MODIFY;
                                                                    UNTIL EMailElement.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,Header,Loop,Total";
                                                   OptionString=[ ,Header,Loop,Total] }
    { 13  ;   ;Level               ;Integer       ;InitValue=1;
                                                   OnLookup=BEGIN
                                                              LookupLevel;
                                                            END;

                                                   CaptionML=ENU=Level;
                                                   MinValue=1;
                                                   MaxValue=10 }
    { 14  ;   ;Include only level if details;Boolean;
                                                   CaptionML=ENU=Include only level if details }
    { 15  ;   ;Skip If All Elements Blank;Boolean ;CaptionML=ENU=Skip If All Elements Blank }
    { 16  ;   ;Elements Exists     ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("E-Mail Element" WHERE (E-Mail Code=FIELD(E-Mail Code),
                                                                                             Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Elements Exists;
                                                   Editable=No }
    { 17  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("E-Mail Comment Line" WHERE (Table ID=CONST(14000902),
                                                                                                  Code=FIELD(E-Mail Code),
                                                                                                  Integer 1=FIELD(Line No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;E-Mail Code,Line No.                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EMailHeader@1000000001 : Record 14000901;
      EMailElement@1000000000 : Record 14000903;
      EMailCommentLine@1000000004 : Record 14000910;
      EMailComment@1000000005 : Page 14000921;
      LevelLookupString@1000000002 : Text[250];
      MaxLevels@1000000003 : Integer;

    LOCAL PROCEDURE GetHeader@1();
    VAR
      SalesOrderEMail@1000000000 : Report 14000901;
      SalesShipmentEMail@1000000001 : Report 14000902;
      SalesInvoiceEMail@1000000002 : Report 14000903;
      BillOfLadingEMail@1000000003 : Report 14000908;
      CustomerStatementEMail@1000000004 : Report 14000910;
      EMailListEntryEMail@1000000007 : Report 14000913;
      ContactEMail@1000000008 : Report 14000912;
      PurchaseEMail@1000000009 : Report 14000914;
      IssuedReminderEMail@1000000010 : Report 14000916;
      IssuedFinChargeMemoEMail@1000000011 : Report 14000918;
      PurchaseReceiptEMail@1240030000 : Report 14000920;
      PurchaseInvoiceEMail@1240030001 : Report 14000921;
      MfrRepStatementEmail@1000000012 : Report 51706;
      LocHdlgStatementEMail@1000000013 : Report 51707;
      SalesCrMemoEMail@1000000014 : Report 51020;
      i@1000000005 : Integer;
      LevelText@1000000006 : Text[30];
    BEGIN
      IF EMailHeader.Code <> "E-Mail Code" THEN
        IF "E-Mail Code" = '' THEN BEGIN
          CLEAR(EMailHeader);
          LevelLookupString := '';
          MaxLevels := 0;
        END ELSE BEGIN
          EMailHeader.GET("E-Mail Code");

          LevelLookupString := '';
          MaxLevels := 0;
          REPEAT
            MaxLevels := MaxLevels + 1;

            CASE EMailHeader."E-Mail Usage" OF
              EMailHeader."E-Mail Usage"::"Sales Order":
                LevelText := SalesOrderEMail.GetLevelName(MaxLevels);
              EMailHeader."E-Mail Usage"::"Sales Shipment":
                LevelText := SalesShipmentEMail.GetLevelName(MaxLevels);
              EMailHeader."E-Mail Usage"::"Sales Invoice":
                LevelText := SalesInvoiceEMail.GetLevelName(MaxLevels);
              EMailHeader."E-Mail Usage"::"Bill of Lading":
                LevelText := BillOfLadingEMail.GetLevelName(MaxLevels);
              EMailHeader."E-Mail Usage"::"Customer Statement":
                LevelText := CustomerStatementEMail.GetLevelName(MaxLevels);
              EMailHeader."E-Mail Usage"::"E-Mail List Mailing":
                LevelText := EMailListEntryEMail.GetLevelName(MaxLevels);
              EMailHeader."E-Mail Usage"::"Contact Mailing":
                LevelText := ContactEMail.GetLevelName(MaxLevels);
              EMailHeader."E-Mail Usage"::Purchase:
                LevelText := PurchaseEMail.GetLevelName(MaxLevels);
              EMailHeader."E-Mail Usage"::"Issued Reminder":
                LevelText := IssuedReminderEMail.GetLevelName(MaxLevels);
              EMailHeader."E-Mail Usage"::"Issued Fin. Charge Memo":
                LevelText := IssuedFinChargeMemoEMail.GetLevelName(MaxLevels);
              EMailHeader."E-Mail Usage"::"Purchase Receipt":
                LevelText := PurchaseReceiptEMail.GetLevelName(MaxLevels);
              EMailHeader."E-Mail Usage"::"Purchase Invoice":
                LevelText := PurchaseInvoiceEMail.GetLevelName(MaxLevels);
              // <TPZ92, TPZ143>
              EMailHeader."E-Mail Usage"::"Mfr. Rep. Statement":
                LevelText := MfrRepStatementEmail.GetLevelName(MaxLevels);
              EMailHeader."E-Mail Usage"::"Location Hdlg. Statement":
                LevelText := LocHdlgStatementEMail.GetLevelName(MaxLevels);
              EMailHeader."E-Mail Usage"::"Sales Credit Memo":
                LevelText := SalesCrMemoEMail.GetLevelName(MaxLevels);
              // </TPZ92, TPZ143>
              ELSE
                LevelText := '';
            END;

            IF LevelText <> '' THEN
              IF LevelLookupString <> '' THEN
                LevelLookupString := LevelLookupString + ',' + LevelText
              ELSE
                LevelLookupString := LevelText;
          UNTIL LevelText = '';
          MaxLevels := MaxLevels - 1;
        END;
    END;

    PROCEDURE GetLevelText@2() : Text[30];
    BEGIN
      GetHeader;

      IF MaxLevels < Level THEN
        EXIT('')
      ELSE
        EXIT(SELECTSTR(Level,LevelLookupString));
    END;

    PROCEDURE LookupLevel@3();
    VAR
      Selection@1000000000 : Integer;
    BEGIN
      GetHeader;

      Selection := STRMENU(LevelLookupString,Level);
      IF Selection <> 0 THEN
        VALIDATE(Level,Selection);
    END;

    PROCEDURE ShowCommentsForm@4();
    BEGIN
      EMailCommentLine.RESET;
      EMailCommentLine.SETRANGE("Table ID",DATABASE::"E-Mail Line");
      EMailCommentLine.SETRANGE(Code,"E-Mail Code");
      EMailCommentLine.SETRANGE("Integer 1","Line No.");
      CLEAR(EMailComment);
      EMailComment.SETTABLEVIEW(EMailCommentLine);
      EMailComment.RUNMODAL;
    END;

    PROCEDURE ShowEMailElementsForm@5();
    VAR
      EMailElements@1000000000 : Page 14000903;
    BEGIN
      EMailElement.RESET;
      EMailElement.SETRANGE("E-Mail Code","E-Mail Code");
      EMailElement.SETRANGE("Line No.","Line No.");
      CLEAR(EMailElements);
      EMailElements.SETTABLEVIEW(EMailElement);
      EMailElements.RUNMODAL;
    END;

    BEGIN
    {
      2015-06-11 TPZ92 TAKHMETO
        Handling of Mfr. Rep. Statement, Location Hdlg. Statement have been added
      2015-08-25 TPZ143 TAKHMETO
        Handling of Sales Credit Memo has been added
    }
    END.
  }
}

