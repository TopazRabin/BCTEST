OBJECT Table 14099200 Inbound ASN Header
{
  OBJECT-PROPERTIES
  {
    Date=09/16/21;
    Time=[ 3:36:02 AM];
    Modified=Yes;
    Version List=IBA1.11,TPZ2524;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               InboundASNSetup.GET;
               InboundASNSetup.TESTFIELD("Last Inbound ASN No.");
               InboundASNSetup.TESTFIELD("Def. On The Water Location");

               GetASNNo;

               "On The Water Location" := InboundASNSetup."Def. On The Water Location";
               "Group by Purchase Order" := InboundASNSetup."Group by Purchase Order";
             END;

    OnModify=BEGIN
               IF (Status > Status::Updated) THEN
                 ERROR(txtModifyError, "ASN No.");
             END;

    OnDelete=VAR
               InboundASNCommentLine@1240020000 : Record 14099206;
               InboundASNLine@1240020001 : Record 14099201;
             BEGIN
               InboundASNLine.RESET;
               InboundASNLine.SETRANGE("ASN No.","ASN No.");
               InboundASNLine.DELETEALL(TRUE);

               InboundASNCommentLine.RESET;
               InboundASNCommentLine.SETRANGE("No.","ASN No.");
               InboundASNCommentLine.SETRANGE("Attached to Line No.",0);
               InboundASNCommentLine.DELETEALL(TRUE);
             END;

    CaptionML=ENU=Inbound ASN Header;
    LookupPageID=Page14099202;
    DrillDownPageID=Page14099202;
  }
  FIELDS
  {
    { 1   ;   ;ASN No.             ;Code20        ;OnValidate=BEGIN
                                                                GetASNNo;
                                                              END;

                                                   CaptionML=ENU=ASN No. }
    { 11  ;   ;Ship From           ;Text30        ;CaptionML=ENU=Ship From }
    { 12  ;   ;Ship From Address 1 ;Text50        ;CaptionML=ENU=Ship From Address 1 }
    { 13  ;   ;Ship From Address 2 ;Text50        ;CaptionML=ENU=Ship From Address 2 }
    { 14  ;   ;Ship From City      ;Text30        ;CaptionML=ENU=Ship From City }
    { 15  ;   ;Ship From State     ;Text30        ;CaptionML=ENU=Ship From State }
    { 16  ;   ;Ship From Postal Code;Code10       ;CaptionML=ENU=Ship From Postal Code }
    { 17  ;   ;Ship From Country   ;Code10        ;CaptionML=ENU=Ship From Country }
    { 18  ;   ;Shipping Agent      ;Code10        ;TableRelation="Shipping Agent".Code;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Shipping Agent }
    { 20  ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                IF "Posting Date" <> 0D THEN
                                                                  ASNPost.PostingDateAllowed("Posting Date");
                                                              END;

                                                   CaptionML=ENU=Receipt Posting Date }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Shipment Method Code }
    { 30  ;   ;Transfer Shipment Date;Date        ;OnValidate=BEGIN
                                                                IF "Transfer Shipment Date" <> 0D THEN
                                                                  ASNPost.CheckShipDate(Rec);
                                                              END;

                                                   CaptionML=ENU=Transfer Shipment Date }
    { 31  ;   ;Transfer Receipt Date;Date         ;OnValidate=BEGIN
                                                                IF "Transfer Receipt Date" <> 0D THEN
                                                                  ASNPost.CheckExpReceiptDate(Rec);
                                                              END;

                                                   CaptionML=ENU=Transfer Receipt Date }
    { 32  ;   ;On The Water Location;Code10       ;TableRelation=Location.Code;
                                                   OnValidate=BEGIN
                                                                IF "On The Water Location" <> '' THEN
                                                                  ASNPost.CheckOnTheWaterLocationSetting("On The Water Location");
                                                              END;

                                                   CaptionML=ENU=On The Water Location Code }
    { 33  ;   ;Final Dest Location ;Code10        ;TableRelation=Location.Code;
                                                   CaptionML=ENU=Final Dest Location }
    { 50  ;   ;Group by Purchase Order;Boolean    ;CaptionML=ENU=Group by Purchase Order }
    { 60  ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Open,Updated,Posted,Transfer Created,Closed;
                                                   OptionString=Open,Updated,Posted,Transfer Created,Closed;
                                                   Editable=No }
    { 61  ;   ;Doc. Received Date  ;Date          ;CaptionML=ENU=Doc. Received Date;
                                                   Editable=No }
    { 62  ;   ;Doc. Received Time  ;Time          ;CaptionML=ENU=Doc. Received Time;
                                                   Editable=No }
    { 63  ;   ;EDI Internal Doc. No.;Code20       ;CaptionML=ENU=EDI Internal Doc. No.;
                                                   Editable=No }
    { 64  ;   ;Inbound Container Number;Code50    ;CaptionML=ENU=Inbound Container Number }
    { 65  ;   ;Vessel Number       ;Code50        ;CaptionML=ENU=Vessel Number }
    { 66  ;   ;Booking Number      ;Code20        ;CaptionML=ENU=Booking Number }
    { 67  ;   ;Bill of Lading Number;Code20       ;CaptionML=ENU=Bill of Lading Number }
    { 68  ;   ;Container Group Number;Code50      ;CaptionML=ENU=Container Group Number }
    { 70  ;   ;Declared Value (LCY);Decimal       ;CaptionML=ENU=Declared Value ($);
                                                   AutoFormatType=1 }
  }
  KEYS
  {
    {    ;ASN No.                                 ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      InboundASNSetup@1240020002 : Record 14099202;
      ASNPost@1000 : Codeunit 14099200;
      txtModifyError@1001 : TextConst 'ENU=Error:  ASN %1 must be in open or updated status to be modified.';

    PROCEDURE GetASNNo@1240020000();
    BEGIN
      IF "ASN No." = '' THEN BEGIN
        InboundASNSetup.LOCKTABLE;
        InboundASNSetup.GET;
        InboundASNSetup."Last Inbound ASN No." := INCSTR(InboundASNSetup."Last Inbound ASN No.");
        "ASN No." := InboundASNSetup."Last Inbound ASN No.";
        InboundASNSetup.MODIFY;
      END;
    END;

    PROCEDURE ValidateItemDuplicates@1170000000();
    VAR
      InboundASNLine@1170000000 : Record 14099201;
      PostedInboundASNLine@1170000001 : Record 14099204;
      PostedInboundASNHeader@1170000002 : Record 14099203;
      InboundASNLine1@1000000000 : Record 14099201;
    BEGIN
      //<TPZ2524>
      InboundASNLine.RESET;
      InboundASNLine.SETRANGE("ASN No.","ASN No.");
      IF InboundASNLine.FINDSET THEN
        REPEAT
          PostedInboundASNHeader.RESET;
          PostedInboundASNHeader.SETRANGE("Inbound Container Number","Inbound Container Number");
          IF PostedInboundASNHeader.FINDSET THEN
            REPEAT
              PostedInboundASNLine.RESET;
              PostedInboundASNLine.SETRANGE("ASN No.",PostedInboundASNHeader."ASN No.");
              PostedInboundASNLine.SETRANGE("Item No.",InboundASNLine."Item No.");
              PostedInboundASNLine.SETRANGE("Purchase Order No.",InboundASNLine."Purchase Order No.");
              IF NOT PostedInboundASNLine.ISEMPTY THEN
                ERROR('Item No. %1 PO No. %2 and Inbound Container No. %3 Already Present On Posted ASN %4',InboundASNLine."Item No.",
                  InboundASNLine."Purchase Order No.","Inbound Container Number",PostedInboundASNHeader."ASN No.");
            UNTIL PostedInboundASNHeader.NEXT=0;
          InboundASNLine1.RESET;
          InboundASNLine1.SETRANGE("ASN No.","ASN No.");
          InboundASNLine1.SETRANGE("Purchase Order No.",InboundASNLine."Purchase Order No.");
          InboundASNLine1.SETRANGE("Item No.",InboundASNLine."Item No.");
          //>>001 TPZ3355
          InboundASNLine1.SETRANGE("Imported Unit Cost",InboundASNLine."Imported Unit Cost");
          //<<001 TPZ3355
          IF InboundASNLine1.COUNT > 1 THEN
            ERROR('Item No. %1 PO No. %2 Is duplicated',InboundASNLine."Item No.",InboundASNLine."Purchase Order No.");
        UNTIL InboundASNLine.NEXT=0;
      //</TPZ2524>
    END;

    BEGIN
    {
      2019-06-12 VSO2524 VAHAMAD
        New function ValidateItemDuplicates added
    }
    END.
  }
}

