OBJECT Table 7820 MS-QBO Customer
{
  OBJECT-PROPERTIES
  {
    Date=11/22/17;
    Time=12:00:00 PM;
    Version List=NAVW111.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               ExtTxtIDIntegrationRecord@1000 : Record 5377;
               RecordRef@1001 : RecordRef;
             BEGIN
               RecordRef.GETTABLE(Rec);
               ExtTxtIDIntegrationRecord.InsertIntegrationRecord(RecordRef);
             END;

    CaptionML=[ENU=MS-QBO Customer;
               ESM=MS - Cliente de QBO;
               FRC=Client MS-QBO;
               ENC=MS-QBO Customer];
  }
  FIELDS
  {
    { 1   ;   ;Id                  ;Text250       ;CaptionML=[ENU=Id;
                                                              ESM=Id.;
                                                              FRC="Code ";
                                                              ENC=Id] }
    { 2   ;   ;SyncToken           ;Text250       ;CaptionML=[ENU=SyncToken;
                                                              ESM=SyncToken;
                                                              FRC=SyncToken;
                                                              ENC=SyncToken] }
    { 3   ;   ;MetaData            ;BLOB          ;CaptionML=[ENU=MetaData;
                                                              ESM=Metadatos;
                                                              FRC=M‚tadonn‚es;
                                                              ENC=MetaData] }
    { 4   ;   ;MetaData CreateTime ;DateTime      ;CaptionML=[ENU=MetaData CreateTime;
                                                              ESM=CreateTime de metadatos;
                                                              FRC=M‚tadonn‚esÿ: CreateTime;
                                                              ENC=MetaData CreateTime] }
    { 5   ;   ;MetaData LastUpdatedTime;DateTime  ;CaptionML=[ENU=MetaData LastUpdatedTime;
                                                              ESM=LastUpdatedTime de metadatos;
                                                              FRC=M‚tadonn‚esÿ: LastUpdatedTime;
                                                              ENC=MetaData LastUpdatedTime] }
    { 6   ;   ;Title               ;Text15        ;CaptionML=[ENU=Title;
                                                              ESM=T¡tulo;
                                                              FRC=Titre;
                                                              ENC=Title] }
    { 7   ;   ;GivenName           ;Text25        ;CaptionML=[ENU=GivenName;
                                                              ESM=GivenName;
                                                              FRC=GivenName;
                                                              ENC=GivenName] }
    { 8   ;   ;MiddleName          ;Text25        ;CaptionML=[ENU=MiddleName;
                                                              ESM=MiddleName;
                                                              FRC=MiddleName;
                                                              ENC=MiddleName] }
    { 9   ;   ;FamilyName          ;Text25        ;CaptionML=[ENU=FamilyName;
                                                              ESM=FamilyName;
                                                              FRC=FamilyName;
                                                              ENC=FamilyName] }
    { 10  ;   ;Suffix              ;Text10        ;CaptionML=[ENU=Suffix;
                                                              ESM=Sufijo;
                                                              FRC=Suffixe;
                                                              ENC=Suffix] }
    { 11  ;   ;DisplayName         ;Text100       ;CaptionML=[ENU=DisplayName;
                                                              ESM=DisplayName;
                                                              FRC=DisplayName;
                                                              ENC=DisplayName] }
    { 12  ;   ;FullyQualifiedName  ;Text250       ;CaptionML=[ENU=FullyQualifiedName;
                                                              ESM=FullyQualifiedName;
                                                              FRC=FullyQualifiedName;
                                                              ENC=FullyQualifiedName] }
    { 13  ;   ;CompanyName         ;Text50        ;CaptionML=[ENU=CompanyName;
                                                              ESM=CompanyName;
                                                              FRC=CompanyName;
                                                              ENC=CompanyName] }
    { 14  ;   ;PrintOnCheckName    ;Text110       ;CaptionML=[ENU=PrintOnCheckName;
                                                              ESM=PrintOnCheckName;
                                                              FRC=PrintOnCheckName;
                                                              ENC=PrintOnCheckName] }
    { 15  ;   ;Active              ;Boolean       ;CaptionML=[ENU=Active;
                                                              ESM=Activo;
                                                              FRC=Actif;
                                                              ENC=Active] }
    { 16  ;   ;PrimaryPhone        ;BLOB          ;CaptionML=[ENU=PrimaryPhone;
                                                              ESM=PrimaryPhone;
                                                              FRC=PrimaryPhone;
                                                              ENC=PrimaryPhone];
                                                   SubType=Json }
    { 17  ;   ;AlternatePhone      ;BLOB          ;CaptionML=[ENU=AlternatePhone;
                                                              ESM=AlternatePhone;
                                                              FRC=AlternatePhone;
                                                              ENC=AlternatePhone] }
    { 18  ;   ;Mobile              ;BLOB          ;CaptionML=[ENU=Mobile;
                                                              ESM=M¢vil;
                                                              FRC=Mobile;
                                                              ENC=Mobile] }
    { 19  ;   ;Fax                 ;BLOB          ;CaptionML=[ENU=Fax;
                                                              ESM=Fax;
                                                              FRC=T‚l‚copieur;
                                                              ENC=Fax] }
    { 20  ;   ;PrimaryEmailAddr    ;BLOB          ;CaptionML=[ENU=PrimaryEmailAddr;
                                                              ESM=PrimaryEmailAddr;
                                                              FRC=PrimaryEmailAddr;
                                                              ENC=PrimaryEmailAddr];
                                                   SubType=Json }
    { 21  ;   ;WebAddr             ;BLOB          ;CaptionML=[ENU=WebAddr;
                                                              ESM=WebAddr;
                                                              FRC=WebAddr;
                                                              ENC=WebAddr] }
    { 22  ;   ;DefaultTaxCodeRef   ;BLOB          ;CaptionML=[ENU=DefaultTaxCodeRef;
                                                              ESM=DefaultTaxCodeRef;
                                                              FRC=DefaultTaxCodeRef;
                                                              ENC=DefaultTaxCodeRef] }
    { 23  ;   ;Taxable             ;Boolean       ;CaptionML=[ENU=Taxable;
                                                              ESM=Gravable;
                                                              FRC=Imposable;
                                                              ENC=Taxable] }
    { 24  ;   ;BillAddr            ;BLOB          ;CaptionML=[ENU=BillAddr;
                                                              ESM=BillAddr;
                                                              FRC=BillAddr;
                                                              ENC=BillAddr];
                                                   SubType=Json }
    { 25  ;   ;ShipAddr            ;BLOB          ;CaptionML=[ENU=ShipAddr;
                                                              ESM=ShipAddr;
                                                              FRC=ShipAddr;
                                                              ENC=ShipAddr] }
    { 26  ;   ;Notes               ;BLOB          ;CaptionML=[ENU=Notes;
                                                              ESM=Notas;
                                                              FRC=Notes;
                                                              ENC=Notes] }
    { 27  ;   ;Job                 ;Boolean       ;CaptionML=[ENU=Job;
                                                              ESM=Proyecto;
                                                              FRC=Projet;
                                                              ENC=Job] }
    { 28  ;   ;BillWithParent      ;Boolean       ;CaptionML=[ENU=BillWithParent;
                                                              ESM=BillWithParent;
                                                              FRC=BillWithParent;
                                                              ENC=BillWithParent] }
    { 29  ;   ;ParentRef           ;BLOB          ;CaptionML=[ENU=ParentRef;
                                                              ESM=ParentRef;
                                                              FRC=ParentRef;
                                                              ENC=ParentRef] }
    { 30  ;   ;Level               ;Integer       ;CaptionML=[ENU=Level;
                                                              ESM=Nivel;
                                                              FRC=Niveau;
                                                              ENC=Level] }
    { 31  ;   ;SalesTermRef        ;BLOB          ;CaptionML=[ENU=SalesTermRef;
                                                              ESM=SalesTermRef;
                                                              FRC=SalesTermRef;
                                                              ENC=SalesTermRef] }
    { 32  ;   ;PaymentMethodRef    ;BLOB          ;CaptionML=[ENU=PaymentMethodRef;
                                                              ESM=PaymentMethodRef;
                                                              FRC=PaymentMethodRef;
                                                              ENC=PaymentMethodRef] }
    { 33  ;   ;Balance             ;Decimal       ;CaptionML=[ENU=Balance;
                                                              ESM=Saldo;
                                                              FRC=Solde;
                                                              ENC=Balance] }
    { 34  ;   ;OpenBalanceDate     ;Date          ;CaptionML=[ENU=OpenBalanceDate;
                                                              ESM=OpenBalanceDate;
                                                              FRC=OpenBalanceDate;
                                                              ENC=OpenBalanceDate] }
    { 35  ;   ;BalanceWithJobs     ;Decimal       ;CaptionML=[ENU=BalanceWithJobs;
                                                              ESM=BalanceWithJobs;
                                                              FRC=BalanceWithJobs;
                                                              ENC=BalanceWithJobs] }
    { 36  ;   ;CurrencyRef         ;BLOB          ;CaptionML=[ENU=CurrencyRef;
                                                              ESM=CurrencyRef;
                                                              FRC=CurrencyRef;
                                                              ENC=CurrencyRef] }
    { 37  ;   ;PreferredDeliveryMethod;Text250    ;CaptionML=[ENU=PreferredDeliveryMethod;
                                                              ESM=PreferredDeliveryMethod;
                                                              FRC=PreferredDeliveryMethod;
                                                              ENC=PreferredDeliveryMethod] }
    { 38  ;   ;ResaleNum           ;Text16        ;CaptionML=[ENU=ResaleNum;
                                                              ESM=ResaleNum;
                                                              FRC=ResaleNum;
                                                              ENC=ResaleNum] }
    { 39  ;   ;All                 ;BLOB          ;CaptionML=[ENU=All;
                                                              ESM=Todo;
                                                              FRC=Tous;
                                                              ENC=All];
                                                   SubType=Json }
  }
  KEYS
  {
    {    ;Id                                      ;Clustered=Yes }
    {    ;MetaData LastUpdatedTime                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EmptyJsonTxt@1001 : TextConst '@@@={Locked};ENU={};ESM={};FRC={};ENC={}';

    PROCEDURE GetAll@2(MSQBOTableMgt@1000 : Codeunit 7820;IdToSkipSyncFor@1001 : Text[250]);
    VAR
      JToken@1011 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
      LastUpdateDateTime@1002 : DateTime;
      Query@1004 : Text;
    BEGIN
      OnGettingAll(MSQBOTableMgt);
      LastUpdateDateTime := MSQBOTableMgt.GetLastUpdatedTimeAsUtc(DATABASE::"MS-QBO Customer");
      Query := 'Select * from Customer';
      CASE TRUE OF
        (IdToSkipSyncFor = '') AND (LastUpdateDateTime <> 0DT):
          Query += STRSUBSTNO(' where Metadata.LastUpdatedTime > ''%1''',
              FORMAT(LastUpdateDateTime,0,9));
        (IdToSkipSyncFor <> '') AND (LastUpdateDateTime = 0DT):
          Query += STRSUBSTNO(' where Id != ''%1''',IdToSkipSyncFor);
        (IdToSkipSyncFor <> '') AND (LastUpdateDateTime <> 0DT):
          Query += STRSUBSTNO(' where Metadata.LastUpdatedTime > ''%1'' AND Id != ''%2''',
              FORMAT(LastUpdateDateTime,0,9),IdToSkipSyncFor);
      END;
      MSQBOTableMgt.GetEntities(Query,'Customer',JToken);
      GetCustomersFromJson(JToken,MSQBOTableMgt);
    END;

    [Integration]
    LOCAL PROCEDURE OnGettingAll@8(VAR MSQBOTableMgt@1000 : Codeunit 7820);
    BEGIN
    END;

    PROCEDURE GetCustomer@25(MSQBOTableMgt@1001 : Codeunit 7820;ExternalId@1000 : Text[250]);
    VAR
      JToken@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
    BEGIN
      MSQBOTableMgt.GetEntity(ExternalId,'Customer',JToken);
      GetCustomersFromJson(JToken,MSQBOTableMgt);
    END;

    PROCEDURE Create@26(MSQBOTableMgt@1000 : Codeunit 7820) EntityCreated : Boolean;
    VAR
      JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      JToken@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
    BEGIN
      CustomerToJson(JObject,TRUE);
      IF JObject.ToString <> EmptyJsonTxt THEN BEGIN
        OnBeforeUpdate(Rec,MSQBOTableMgt);
        IF MSQBOTableMgt.CreateEntity('Customer',JObject,JToken) THEN BEGIN
          GetCustomersFromJson(JToken,MSQBOTableMgt);
          OnAfterUpdate(Rec);
          EntityCreated := TRUE;
        END;
      END;
    END;

    PROCEDURE Update@27(MSQBOTableMgt@1000 : Codeunit 7820) EntityUpdated : Boolean;
    VAR
      JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      JToken@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
    BEGIN
      CustomerToJson(JObject,FALSE);
      IF JObject.ToString <> EmptyJsonTxt THEN BEGIN
        OnBeforeUpdate(Rec,MSQBOTableMgt);
        IF MSQBOTableMgt.UpdateEntity('Customer',JObject,JToken) THEN BEGIN
          GetCustomersFromJson(JToken,MSQBOTableMgt);
          OnAfterUpdate(Rec);
          EntityUpdated := TRUE;
        END;
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdate@10(MSQBOCustomer@1001 : Record 7820;VAR MSQBOTableMgt@1000 : Codeunit 7820);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdate@9(VAR MSQBOCustomer@1001 : Record 7820);
    BEGIN
    END;

    LOCAL PROCEDURE GetCustomersFromJson@44(JToken@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";MSQBOTableMgt@1002 : Codeunit 7820);
    VAR
      MSQBOCustomer@1003 : Record 7820;
      ExtTxtIDIntegrationRecord@1007 : Record 5377;
      ChildJToken@1005 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
      JsonArray@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      OutStream@1006 : OutStream;
      EntityId@1004 : Text[250];
    BEGIN
      IF ISNULL(JToken) THEN BEGIN
        NoCustomersPresentInResponseJson;
        EXIT;
      END;

      JsonArray := JsonArray.JArray;

      // Check if value is an array
      IF FORMAT(JToken.GetType) = FORMAT(JsonArray.GetType) THEN
        ChildJToken := JToken.First
      ELSE
        ChildJToken := JToken;

      WHILE NOT ISNULL(ChildJToken) DO BEGIN
        EntityId := COPYSTR(MSQBOTableMgt.GetTextFromJToken(ChildJToken,'Id'),1,MAXSTRLEN(Id));

        // Customer does not exist
        IF NOT GET(EntityId) THEN BEGIN
          // Update the customer with the right primary key
          IF MSQBOCustomer.GET('') THEN BEGIN
            MSQBOCustomer.DELETE;
            ExtTxtIDIntegrationRecord.UpdateCoupledRecordForExternalId('',EntityId,DATABASE::Customer);
          END;

          INIT;
          Id := EntityId;
          INSERT(TRUE);
        END;

        UpdateCustomerFromJson(Rec,ChildJToken);
        All.CREATEOUTSTREAM(OutStream);
        OutStream.WRITETEXT(FORMAT(ChildJToken));

        MODIFY;

        ChildJToken := ChildJToken.Next;
      END;
    END;

    PROCEDURE GetNestedValue@5(FieldName@1000 : Text;Path@1001 : Text) : Text;
    VAR
      MSQBOTableMgt@1002 : Codeunit 7820;
      RecordRef@1005 : RecordRef;
    BEGIN
      RecordRef.GETTABLE(Rec);
      EXIT(MSQBOTableMgt.GetNestedValue(RecordRef,FIELDNO(All),FieldName + '.' + Path));
    END;

    PROCEDURE UpdateDisplayNameInQBO@4() ValueChanged : Boolean;
    BEGIN
      DisplayName := COPYSTR(FullyQualifiedName,1,MAXSTRLEN(DisplayName));
      ValueChanged := DisplayName <> '';
    END;

    PROCEDURE UpdateEmailFromQBO@1(VAR Customer@1000 : Record 18) ValueChanged : Boolean;
    VAR
      MSQBOTableMgt@1003 : Codeunit 7820;
      CustomerRecordRef@1001 : RecordRef;
      CustomerFieldRef@1002 : FieldRef;
    BEGIN
      CustomerRecordRef.GETTABLE(Customer);
      CustomerFieldRef := CustomerRecordRef.FIELD(Customer.FIELDNO("E-Mail"));
      ValueChanged := MSQBOTableMgt.AssignValueFromText(GetNestedValue(FIELDNAME(PrimaryEmailAddr),'Address'),
          CustomerFieldRef);
      IF ValueChanged THEN
        CustomerRecordRef.SETTABLE(Customer);
    END;

    PROCEDURE UpdateEmailInQBO@3(Customer@1000 : Record 18) ValueChanged : Boolean;
    VAR
      MSQBOTableMgt@1002 : Codeunit 7820;
      RecordRef@1001 : RecordRef;
    BEGIN
      RecordRef.GETTABLE(Rec);
      ValueChanged := MSQBOTableMgt.SetNestedValue(RecordRef,FIELDNO(PrimaryEmailAddr),'Address',Customer."E-Mail");
      IF ValueChanged THEN
        RecordRef.SETTABLE(Rec);
    END;

    PROCEDURE UpdatePhoneFromQBO@16(VAR Customer@1000 : Record 18) ValueChanged : Boolean;
    VAR
      MSQBOTableMgt@1003 : Codeunit 7820;
      CustomerRecordRef@1001 : RecordRef;
      CustomerFieldRef@1002 : FieldRef;
    BEGIN
      CustomerRecordRef.GETTABLE(Customer);
      CustomerFieldRef := CustomerRecordRef.FIELD(Customer.FIELDNO("Phone No."));
      ValueChanged := MSQBOTableMgt.AssignValueFromText(GetNestedValue(FIELDNAME(PrimaryPhone),'FreeFormNumber'),
          CustomerFieldRef);
      IF ValueChanged THEN
        CustomerRecordRef.SETTABLE(Customer);
    END;

    PROCEDURE UpdatePhoneInQBO@15(Customer@1000 : Record 18) ValueChanged : Boolean;
    VAR
      MSQBOTableMgt@1002 : Codeunit 7820;
      RecordRef@1001 : RecordRef;
    BEGIN
      RecordRef.GETTABLE(Rec);
      ValueChanged := MSQBOTableMgt.SetNestedValue(RecordRef,FIELDNO(PrimaryPhone),'FreeFormNumber',Customer."Phone No.");
      IF ValueChanged THEN
        RecordRef.SETTABLE(Rec);
    END;

    PROCEDURE UpdateAddressFromQBO@21(VAR Customer@1000 : Record 18) ValueChanged : Boolean;
    VAR
      CountryRegion@1001 : Record 9;
      MSQBOTableMgt@1008 : Codeunit 7820;
      CustomerRecordRef@1007 : RecordRef;
      CustomerFieldRef@1006 : FieldRef;
      CountryText@1002 : Text;
      PostCodeTxt@1004 : Text;
      CityText@1005 : Text;
    BEGIN
      CustomerRecordRef.GETTABLE(Customer);
      CustomerFieldRef := CustomerRecordRef.FIELD(Customer.FIELDNO(Address));
      ValueChanged := MSQBOTableMgt.AssignValueFromText(GetNestedValue(FIELDNAME(BillAddr),'Line1'),
          CustomerFieldRef);

      CountryText := GetNestedValue(FIELDNAME(BillAddr),'Country');
      IF CountryText <> '' THEN BEGIN
        CountryRegion.SETRANGE(Name,CountryText);
        IF NOT CountryRegion.FINDFIRST THEN BEGIN
          IF STRLEN(CountryText) <= MAXSTRLEN(CountryRegion.Code) THEN BEGIN
            CountryRegion.SETRANGE(Name);
            CountryRegion.SETRANGE(Code,CountryText);
            IF NOT CountryRegion.FINDFIRST THEN
              CustomerHasAnInvalidCountryName(CountryText);
          END ELSE
            CustomerHasAnInvalidCountryName(CountryText);
        END;
      END;
      CustomerFieldRef := CustomerRecordRef.FIELD(Customer.FIELDNO("Country/Region Code"));
      ValueChanged := ValueChanged OR
        MSQBOTableMgt.AssignValueFromText(CountryRegion.Code,CustomerFieldRef);
      IF ValueChanged THEN
        CustomerRecordRef.SETTABLE(Customer);

      PostCodeTxt := GetNestedValue(FIELDNAME(BillAddr),'PostalCode');
      CustomerFieldRef := CustomerRecordRef.FIELD(Customer.FIELDNO("Post Code"));
      ValueChanged := ValueChanged OR
        MSQBOTableMgt.AssignValueFromText(PostCodeTxt,CustomerFieldRef);
      IF ValueChanged THEN
        CustomerRecordRef.SETTABLE(Customer);

      CityText := GetNestedValue(FIELDNAME(BillAddr),'City');
      CustomerFieldRef := CustomerRecordRef.FIELD(Customer.FIELDNO(City));
      ValueChanged := ValueChanged OR
        MSQBOTableMgt.AssignValueFromText(CityText,CustomerFieldRef);
      IF ValueChanged THEN
        CustomerRecordRef.SETTABLE(Customer);
    END;

    PROCEDURE UpdateAddressInQBO@20(Customer@1000 : Record 18) ValueChanged : Boolean;
    VAR
      CountryRegion@1001 : Record 9;
      MSQBOTableMgt@1010 : Codeunit 7820;
      RecordRef@1006 : RecordRef;
      FieldRef@1009 : FieldRef;
      Paths@1007 : ARRAY [10] OF Text;
      NewValues@1008 : ARRAY [10] OF Text;
      CountryTxt@1003 : Text;
    BEGIN
      RecordRef.GETTABLE(Rec);
      Paths[1] := 'Line1';
      NewValues[1] := Customer.Address;

      IF Customer."Country/Region Code" <> '' THEN BEGIN
        CountryRegion.GET(Customer."Country/Region Code");
        CountryTxt := CountryRegion.Name;
      END;
      Paths[2] := 'Country';
      NewValues[2] := CountryTxt;
      Paths[3] := 'PostalCode';
      NewValues[3] := Customer."Post Code";
      Paths[4] := 'City';
      NewValues[4] := Customer.City;

      FieldRef := RecordRef.FIELD(FIELDNO(BillAddr));
      ValueChanged := MSQBOTableMgt.SetNestedValues(FieldRef,Paths,NewValues,4);
      IF ValueChanged THEN
        RecordRef.SETTABLE(Rec);
    END;

    LOCAL PROCEDURE CustomerToJson@29(VAR JObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";IsNewCustomer@1000 : Boolean);
    VAR
      JSONManagement@1005 : Codeunit 5459;
    BEGIN
      ChangesInCustomerToJson(JObject);

      IF JObject.ToString = EmptyJsonTxt THEN
        EXIT;

      IF NOT IsNewCustomer THEN BEGIN
        JSONManagement.InitializeObjectFromJObject(JObject);
        JSONManagement.AddJPropertyToJObject(JObject,FIELDNAME(Id),Id);
        JSONManagement.AddJPropertyToJObject(JObject,FIELDNAME(SyncToken),SyncToken);
        JSONManagement.AddJPropertyToJObject(JObject,'sparse','true');
      END;
    END;

    LOCAL PROCEDURE ChangesInCustomerToJson@11(VAR JObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      TempPrevMSQBOCustomer@1001 : TEMPORARY Record 7820;
      MSQBOTableMgt@1003 : Codeunit 7820;
      JSONManagement@1005 : Codeunit 5459;
      JToken@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
      Text@1004 : DotNet "'mscorlib'.System.String";
      RecordRef@1008 : RecordRef;
      FieldRef@1009 : FieldRef;
    BEGIN
      RecordRef.GETTABLE(Rec);
      FieldRef := RecordRef.FIELD(FIELDNO(All));
      Text := MSQBOTableMgt.GetTextValueFromField(FieldRef);

      TempPrevMSQBOCustomer.INIT;

      IF FORMAT(Text) <> '' THEN BEGIN
        JToken := JToken.Parse(FORMAT(Text));
        UpdateCustomerFromJson(TempPrevMSQBOCustomer,JToken);
      END;

      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JObject);

      AddFieldChangeToJson(FIELDNO(GivenName),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(MiddleName),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(FamilyName),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Suffix),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(DisplayName),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(FullyQualifiedName),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(CompanyName),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(PrintOnCheckName),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Active),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(PrimaryPhone),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(AlternatePhone),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Mobile),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Fax),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(PrimaryEmailAddr),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(WebAddr),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(DefaultTaxCodeRef),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Taxable),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(BillAddr),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(ShipAddr),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Notes),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Job),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(BillWithParent),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(ParentRef),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Level),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(SalesTermRef),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(PaymentMethodRef),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Balance),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(OpenBalanceDate),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(BalanceWithJobs),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(CurrencyRef),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(PreferredDeliveryMethod),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(ResaleNum),TempPrevMSQBOCustomer,JSONManagement,JObject);
    END;

    LOCAL PROCEDURE UpdateCustomerFromJson@7(VAR MSQBOCustomer@1000 : Record 7820;JToken@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken");
    BEGIN
      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(SyncToken),JToken,'SyncToken');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(MetaData),JToken,'MetaData');

      UpdateFieldValueByPath(MSQBOCustomer,MSQBOCustomer.FIELDNO("MetaData CreateTime"),JToken,'MetaData.CreateTime');

      UpdateFieldValueByPath(MSQBOCustomer,MSQBOCustomer.FIELDNO("MetaData LastUpdatedTime"),JToken,'MetaData.LastUpdatedTime');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(Title),JToken,'Title');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(GivenName),JToken,'GivenName');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(MiddleName),JToken,'MiddleName');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(FamilyName),JToken,'FamilyName');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(Suffix),JToken,'Suffix');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(DisplayName),JToken,'DisplayName');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(FullyQualifiedName),JToken,'FullyQualifiedName');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(CompanyName),JToken,'CompanyName');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(PrintOnCheckName),JToken,'PrintOnCheckName');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(Active),JToken,'Active');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(PrimaryPhone),JToken,'PrimaryPhone');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(AlternatePhone),JToken,'AlternatePhone');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(Mobile),JToken,'Mobile');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(Fax),JToken,'Fax');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(PrimaryEmailAddr),JToken,'PrimaryEmailAddr');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(WebAddr),JToken,'WebAddr');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(DefaultTaxCodeRef),JToken,'DefaultTaxCodeRef');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(Taxable),JToken,'Taxable');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(BillAddr),JToken,'BillAddr');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(ShipAddr),JToken,'ShipAddr');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(Notes),JToken,'Notes');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(Job),JToken,'Job');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(BillWithParent),JToken,'BillWithParent');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(ParentRef),JToken,'ParentRef');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(Level),JToken,'Level');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(SalesTermRef),JToken,'SalesTermRef');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(PaymentMethodRef),JToken,'PaymentMethodRef');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(Balance),JToken,'Balance');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(OpenBalanceDate),JToken,'OpenBalanceDate');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(BalanceWithJobs),JToken,'BalanceWithJobs');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(CurrencyRef),JToken,'CurrencyRef');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(PreferredDeliveryMethod),JToken,'PreferredDeliveryMethod');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(ResaleNum),JToken,'ResaleNum');
    END;

    LOCAL PROCEDURE UpdateFieldValue@40(VAR MSQBOCustomer@1002 : Record 7820;FieldNo@1001 : Integer;JObject@1006 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyName@1005 : Text);
    VAR
      MSQBOTableMgt@1004 : Codeunit 7820;
      JSONManagement@1008 : Codeunit 5459;
      RecordRef@1003 : RecordRef;
      FieldRef@1000 : FieldRef;
      Value@1007 : Text;
    BEGIN
      RecordRef.GETTABLE(MSQBOCustomer);
      FieldRef := RecordRef.FIELD(FieldNo);

      IF JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,propertyName,Value) THEN
        MSQBOTableMgt.WriteTextToField(FieldRef,Value);

      RecordRef.SETTABLE(MSQBOCustomer);
    END;

    LOCAL PROCEDURE UpdateFieldValueByPath@6(VAR MSQBOCustomer@1002 : Record 7820;FieldNo@1001 : Integer;JObject@1006 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyPath@1005 : Text);
    VAR
      MSQBOTableMgt@1004 : Codeunit 7820;
      JSONManagement@1008 : Codeunit 5459;
      RecordRef@1003 : RecordRef;
      FieldRef@1000 : FieldRef;
      Value@1007 : Text;
    BEGIN
      RecordRef.GETTABLE(MSQBOCustomer);
      FieldRef := RecordRef.FIELD(FieldNo);

      IF JSONManagement.GetStringPropertyValueFromJObjectByPath(JObject,propertyPath,Value) THEN
        MSQBOTableMgt.WriteTextToField(FieldRef,Value);

      RecordRef.SETTABLE(MSQBOCustomer);
    END;

    LOCAL PROCEDURE AddFieldChangeToJson@22(FieldNo@1000 : Integer;TempPrevMSQBOCustomer@1001 : TEMPORARY Record 7820;JSONManagement@1002 : Codeunit 5459;VAR JObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      MSQBOTableMgt@1008 : Codeunit 7820;
      JSONManagement2@1012 : Codeunit 5459;
      CurrRecRef@1004 : RecordRef;
      PrevRecRef@1005 : RecordRef;
      PrevFieldRef@1006 : FieldRef;
      CurrFieldRef@1007 : FieldRef;
      JObject2@1011 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      PrevValue@1009 : Text;
      CurrValue@1010 : Text;
    BEGIN
      PrevRecRef.GETTABLE(TempPrevMSQBOCustomer);
      CurrRecRef.GETTABLE(Rec);
      CurrFieldRef := CurrRecRef.FIELD(FieldNo);
      PrevFieldRef := PrevRecRef.FIELD(FieldNo);

      PrevValue := MSQBOTableMgt.GetTextValueFromField(PrevFieldRef);
      CurrValue := MSQBOTableMgt.GetTextValueFromField(CurrFieldRef);

      IF CurrValue <> PrevValue THEN
        IF FORMAT(CurrFieldRef.TYPE) = 'BLOB' THEN BEGIN
          JSONManagement2.InitializeObject(CurrValue);
          JSONManagement2.GetJSONObject(JObject2);
          JSONManagement.AddJObjectToJObject(JObject,CurrFieldRef.NAME,CurrValue);
        END ELSE
          JSONManagement.AddJPropertyToJObject(JObject,CurrFieldRef.NAME,CurrValue);
    END;

    [Integration]
    LOCAL PROCEDURE NoCustomersPresentInResponseJson@12();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE CustomerHasAnInvalidCountryName@13(BadCountryName@1000 : Text);
    BEGIN
    END;

    BEGIN
    END.
  }
}

