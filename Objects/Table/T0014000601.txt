OBJECT Table 14000601 Receive
{
  OBJECT-PROPERTIES
  {
    Date=06/28/17;
    Time=12:00:00 PM;
    Version List=SE0.60.10;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 GetReceiveSetup;
                 IF ReceiveNumbering.GET(
                   DATABASE::"Receive Setup",ReceiveSetup."Primary Key",
                   ReceiveSetup.FIELDNO("Last Receive No."))
                 THEN BEGIN
                   ReceiveNumbering.GetNextNumber;
                   "No." := ReceiveNumbering."Last No. Used";
                 END ELSE BEGIN
                   ReceiveSetup.TESTFIELD(ReceiveSetup."Receive Nos.");
                   NoSeriesMgt.InitSeries(ReceiveSetup."Receive Nos.",xRec."No. Series",0D,"No.","No. Series");
                 END;

                 IF Description = '' THEN BEGIN
                   GetReceiveStation;
                   Description := ReceiveStation."Default Receive Description";
                 END;
               END;

               IF GETFILTER("Source Type") <> '' THEN
                 EVALUATE("Source Type",GETFILTER("Source Type"));
               IF GETFILTER("Source Subtype") <> '' THEN
                 EVALUATE("Source Subtype",GETFILTER("Source Subtype"));
               IF GETFILTER("Source ID") <> '' THEN
                 "Source ID" := GETFILTER("Source ID");

               "External Tracking No." := '';

               IF ("Source Type" <> 0) AND ("Source ID" <> '') THEN BEGIN
                 ReceiveControl.TransferFromSource("Source Type","Source Subtype","Source ID");

                 TransferFromReceiveControl(ReceiveControl);
               END;

               IF "Shipping Agent Code" <> '' THEN BEGIN
                 GetShippingAgent;
                 IF "Shipping Agent Service" <> '' THEN
                   VALIDATE("Shipping Agent Service");
               END ELSE
                 ShippingAgent.INIT;

               GetReceiveSetup;
               IF ReceiveSetup."Location Receiving" THEN BEGIN
                 GetReceiveStation;
                 "Location Code" := ReceiveStation."Location Code";
               END;

               IF "Receive No." = 0 THEN
                 "Receive No." := 1;
               IF "Total Receives" = 0 THEN
                 "Total Receives" := 1;
               "Creation Time" := TIME;
             END;

    OnModify=BEGIN
               TESTFIELD(Closed,FALSE);
             END;

    OnDelete=BEGIN
               TESTFIELD(Closed,FALSE);

               ReceiveLine.RESET;
               ReceiveLine.SETRANGE("Receive No.","No.");
               ReceiveLine.DELETEALL;

               // Receive Labels are not deleted by Purpose

               IF "Shipping Agent Code" <> '' THEN
                 GetShippingAgent
               ELSE
                 ShippingAgent.INIT;
             END;

    OnRename=BEGIN
               ERROR(Text001);
             END;

    CaptionML=ENU=Receive;
    LookupPageID=Page14000608;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=ENU=No. }
    { 11  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 12  ;   ;Closed              ;Boolean       ;CaptionML=ENU=Closed;
                                                   Editable=No }
    { 13  ;   ;Closed by Receive Station Code;Code10;
                                                   TableRelation="Receive Station";
                                                   CaptionML=ENU=Closed by Receive Station Code;
                                                   Editable=No }
    { 14  ;   ;Receive Date        ;Date          ;CaptionML=ENU=Receive Date }
    { 15  ;   ;Exist in Other Receive;Boolean     ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Receive Line" WHERE (Type=CONST(Receive),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=ENU=Exist in Other Receive;
                                                   Editable=No }
    { 16  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Receive Comment Line" WHERE (Table ID=CONST(14000601),
                                                                                                   Code=FIELD(No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 21  ;   ;Scale Weight        ;Decimal       ;CaptionML=ENU=Scale Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 22  ;   ;Override Weight     ;Decimal       ;CaptionML=ENU=Override Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 23  ;   ;Calculation Weight  ;Decimal       ;CaptionML=ENU=Calculation Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 24  ;   ;Override Volume     ;Decimal       ;CaptionML=ENU=Override Volume;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 25  ;   ;Calculation Volume  ;Decimal       ;CaptionML=ENU=Calculation Volume;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 26  ;   ;Net Weight          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Receive Line"."Net Weight" WHERE (Receive No.=FIELD(No.)));
                                                   CaptionML=ENU=Net Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 27  ;   ;Gross Weight        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Receive Line"."Gross Weight" WHERE (Receive No.=FIELD(No.)));
                                                   CaptionML=ENU=Gross Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 28  ;   ;Dim. Weight         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Receive Line"."Dimmed Weight" WHERE (Receive No.=FIELD(No.)));
                                                   CaptionML=ENU=Dim. Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 29  ;   ;Volume              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Receive Line".Volume WHERE (Receive No.=FIELD(No.)));
                                                   CaptionML=ENU=Volume;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 31  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent".Code;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Closed,FALSE);

                                                                IF "Shipping Agent Code" <> '' THEN BEGIN
                                                                  GetShippingAgent;
                                                                END ELSE BEGIN
                                                                  "World Wide Service" := FALSE;
                                                                END;

                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  IF "Shipping Agent Code" = '' THEN
                                                                    VALIDATE("Shipping Agent Service",'')
                                                                  ELSE BEGIN
                                                                    ShippingAgent.GET("Shipping Agent Code");
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Shipping Agent Code }
    { 32  ;   ;World Wide Service  ;Boolean       ;CaptionML=ENU=World Wide Service;
                                                   Editable=No }
    { 33  ;   ;Shipping Agent Service;Code30      ;TableRelation="E-Ship Agent Service".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code),
                                                                                                    World Wide Service=FIELD(World Wide Service));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Closed,FALSE);
                                                              END;

                                                   CaptionML=ENU=Shipping Agent Service }
    { 34  ;   ;External Tracking No.;Text30       ;OnValidate=BEGIN
                                                                TESTFIELD(Closed,FALSE);
                                                              END;

                                                   CaptionML=ENU=External Tracking No.;
                                                   Editable=Yes }
    { 35  ;   ;Creation Time       ;Time          ;CaptionML=ENU=Creation Time;
                                                   Editable=No }
    { 36  ;   ;Receive Time        ;Time          ;CaptionML=ENU=Receive Time;
                                                   Editable=No }
    { 41  ;   ;Shipping Charge     ;Decimal       ;CaptionML=ENU=Shipping Charge;
                                                   BlankZero=Yes }
    { 42  ;   ;Receive No.         ;Integer       ;CaptionML=ENU=Receive No.;
                                                   Editable=No }
    { 43  ;   ;Total Receives      ;Integer       ;CaptionML=ENU=Total Receives;
                                                   Editable=No }
    { 46  ;   ;No. Series          ;Code10        ;CaptionML=ENU=No. Series }
    { 48  ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No.;
                                                   Editable=No }
    { 51  ;   ;COD                 ;Boolean       ;OnValidate=BEGIN
                                                                IF COD THEN BEGIN
                                                                  GetReceiveSetup;
                                                                  GetShippingAgent;
                                                                END ELSE
                                                                  "COD Cashiers Check" := FALSE;
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD(Closed,FALSE);
                                                            END;

                                                   CaptionML=ENU=COD }
    { 52  ;   ;COD Amount          ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Closed,FALSE);

                                                                IF "COD Amount" <> 0 THEN
                                                                  TESTFIELD(COD);
                                                              END;

                                                   CaptionML=ENU=COD Amount;
                                                   BlankZero=Yes }
    { 53  ;   ;COD Cashiers Check  ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Closed,FALSE);
                                                                GetShippingAgent;
                                                              END;

                                                   CaptionML=ENU=COD Cashiers Check }
    { 54  ;   ;Source Type         ;Integer       ;CaptionML=ENU=Source Type;
                                                   Editable=No }
    { 55  ;   ;Source Subtype      ;Option        ;CaptionML=ENU=Source Subtype;
                                                   OptionCaptionML=ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                   OptionString=0,1,2,3,4,5,6,7,8,9,10;
                                                   Editable=No }
    { 56  ;   ;Source ID           ;Code20        ;CaptionML=ENU=Source ID;
                                                   Editable=No }
    { 58  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=ENU=Location Code;
                                                   Editable=No }
    { 60  ;   ;Ship-from Type      ;Option        ;CaptionML=ENU=Ship-from Type;
                                                   OptionCaptionML=ENU=Customer,Vendor,,,,,,Location;
                                                   OptionString=Customer,Vendor,,,,,,Location }
    { 61  ;   ;Ship-from No.       ;Code20        ;TableRelation=IF (Ship-from Type=CONST(Customer)) Customer
                                                                 ELSE IF (Ship-from Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Ship-from Type=CONST(Location)) Location;
                                                   OnValidate=VAR
                                                                Customer@1240030000 : Record 18;
                                                                ShipToAddress@1240030001 : Record 222;
                                                                Vendor@1240030002 : Record 23;
                                                                OrderAddress@1240030003 : Record 224;
                                                                Location@1240030009 : Record 14;
                                                              BEGIN
                                                                TESTFIELD(Closed,FALSE);
                                                                TESTFIELD("Source ID",'');

                                                                IF "Ship-from No." = '' THEN BEGIN
                                                                  "Ship-from Code" := '';
                                                                  ClearShipFromAddess;
                                                                END ELSE BEGIN
                                                                  CASE "Ship-from Type" OF
                                                                    "Ship-from Type"::Customer:
                                                                      BEGIN
                                                                        IF ("Ship-from Code" <> '') AND ShipToAddress.GET("Ship-from No.","Ship-from Code") THEN BEGIN
                                                                          TransferFromShipToAddress(ShipToAddress);
                                                                        END ELSE BEGIN
                                                                          "Ship-from Code" := '';
                                                                          Customer.GET("Ship-from No.");
                                                                          TransferFromCustomer(Customer);
                                                                        END;
                                                                      END;
                                                                    "Ship-from Type"::Vendor:
                                                                      BEGIN
                                                                        IF ("Ship-from Code" <> '') AND OrderAddress.GET("Ship-from No.","Ship-from Code") THEN BEGIN
                                                                          TransferFromOrderAddress(OrderAddress);
                                                                        END ELSE BEGIN
                                                                          "Ship-from Code" := '';
                                                                          Vendor.GET("Ship-from No.");
                                                                          TransferFromVendor(Vendor);
                                                                        END;
                                                                      END;
                                                                    "Ship-from Type"::Location:
                                                                      BEGIN
                                                                        Location.GET("Ship-from No.");
                                                                        TransferFromLocation(Location);
                                                                      END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Ship-from No. }
    { 62  ;   ;Ship-from Code      ;Code10        ;TableRelation=IF (Ship-from Type=CONST(Customer)) "Ship-to Address".Code WHERE (Customer No.=FIELD(Ship-from No.))
                                                                 ELSE IF (Ship-from Type=CONST(Vendor)) "Order Address".Code WHERE (Vendor No.=FIELD(Ship-from No.));
                                                   OnValidate=VAR
                                                                ShipToAddress@1240030000 : Record 222;
                                                                OrderAddress@1240030001 : Record 224;
                                                              BEGIN
                                                                TESTFIELD(Closed,FALSE);
                                                                TESTFIELD("Source ID",'');
                                                                TESTFIELD("Ship-from No.");

                                                                IF ("Ship-from Type" <> "Ship-from Type"::Customer) AND
                                                                   ("Ship-from Type" <> "Ship-from Type"::Vendor) AND
                                                                   ("Ship-from Code" <> '')
                                                                THEN
                                                                  ERROR(Text002,FIELDNAME("Ship-from Type"));

                                                                IF "Ship-from Code" <> '' THEN BEGIN
                                                                  CASE "Ship-from Type" OF
                                                                    "Ship-from Type"::Customer:
                                                                      BEGIN
                                                                        ShipToAddress.GET("Ship-from No.","Ship-from Code");
                                                                        TransferFromShipToAddress(ShipToAddress);
                                                                      END;
                                                                    "Ship-from Type"::Vendor:
                                                                      BEGIN
                                                                        OrderAddress.GET("Ship-from No.","Ship-from Code");
                                                                        TransferFromOrderAddress(OrderAddress);
                                                                      END;
                                                                  END;
                                                                END ELSE
                                                                  VALIDATE("Ship-from No.");
                                                              END;

                                                   CaptionML=ENU=Ship-from Code }
    { 63  ;   ;Ship-from Name      ;Text50        ;CaptionML=ENU=Ship-from Name;
                                                   Editable=No }
    { 64  ;   ;Ship-from Name 2    ;Text50        ;CaptionML=ENU=Ship-from Name 2;
                                                   Editable=No }
    { 65  ;   ;Ship-from Address   ;Text50        ;CaptionML=ENU=Ship-from Address;
                                                   Editable=No }
    { 66  ;   ;Ship-from Address 2 ;Text50        ;CaptionML=ENU=Ship-from Address 2;
                                                   Editable=No }
    { 67  ;   ;Ship-from City      ;Text30        ;CaptionML=ENU=Ship-from City;
                                                   Editable=No }
    { 68  ;   ;Ship-from Contact   ;Text50        ;CaptionML=ENU=Ship-from Contact;
                                                   Editable=No }
    { 69  ;   ;Ship-from ZIP Code  ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Ship-from ZIP Code;
                                                   Editable=No }
    { 70  ;   ;Ship-from State     ;Text30        ;CaptionML=ENU=Ship-from State;
                                                   Editable=No }
    { 71  ;   ;Ship-from Country Code;Code10      ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Ship-from Country Code;
                                                   Editable=No }
    { 72  ;   ;Ship-from Phone No. ;Text30        ;CaptionML=ENU=Ship-from Phone No.;
                                                   Editable=No }
    { 73  ;   ;Ship-from Fax No.   ;Text30        ;CaptionML=ENU=Ship-from Fax No.;
                                                   Editable=No }
    { 81  ;   ;Multi Document Receive;Boolean     ;CaptionML=ENU=Multi Document Receive;
                                                   Editable=No }
    { 82  ;   ;Multi Document No.  ;Code250       ;OnValidate=BEGIN
                                                                IF "Multi Document No." <> '' THEN
                                                                  TESTFIELD("Multi Document Receive");
                                                              END;

                                                   CaptionML=ENU=Multi Document No.;
                                                   Editable=No }
    { 83  ;   ;Multi Document Receive Split;Boolean;
                                                   CaptionML=ENU=Multi Document Receive Split;
                                                   Editable=No }
    { 84  ;   ;Original Receive No.;Code20        ;CaptionML=ENU=Original Receive No.;
                                                   Editable=No }
    { 85  ;   ;Original Shipping Charge;Decimal   ;CaptionML=ENU=Original Shipping Charge;
                                                   Editable=No }
    { 86  ;   ;Distribution Factor ;Decimal       ;CaptionML=ENU=Distribution Factor;
                                                   Editable=No }
    { 87  ;   ;Original Exist in Other Rec.;Boolean;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Exist("Receive Line" WHERE (Type=CONST(Receive),
                                                                                           No.=FIELD(Original Receive No.)));
                                                   CaptionML=ENU=Original Exist in Other Rec.;
                                                   Editable=No }
    { 7300;   ;Length              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Max("Receive Line".Length WHERE (Receive No.=FIELD(No.),
                                                                                                Use Unit of measure Dimensions=CONST(Yes)));
                                                   CaptionML=ENU=Length;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 7301;   ;Width               ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Max("Receive Line".Width WHERE (Receive No.=FIELD(No.),
                                                                                               Use Unit of measure Dimensions=CONST(Yes)));
                                                   CaptionML=ENU=Width;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 7302;   ;Height              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Receive Line".Height WHERE (Receive No.=FIELD(No.)));
                                                   CaptionML=ENU=Height;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 7303;   ;Cubage              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Receive Line".Cubage WHERE (Receive No.=FIELD(No.)));
                                                   CaptionML=ENU=Cubage;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 7304;   ;Unit of Measure Weight;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Receive Line"."Unit of Measure Weight" WHERE (Receive No.=FIELD(No.)));
                                                   CaptionML=ENU=Unit of Measure Weight;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 7305;   ;Override Dimensions ;Boolean       ;CaptionML=ENU=Override Dimensions }
    { 7306;   ;Override Length     ;Decimal       ;CaptionML=ENU=Override Length;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7307;   ;Override Width      ;Decimal       ;CaptionML=ENU=Override Width;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7308;   ;Override Height     ;Decimal       ;CaptionML=ENU=Override Height;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7309;   ;Calculation Length  ;Decimal       ;CaptionML=ENU=Calculation Length;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 7310;   ;Calculation Width   ;Decimal       ;CaptionML=ENU=Calculation Width;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 7311;   ;Calculation Height  ;Decimal       ;CaptionML=ENU=Calculation Height;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 14000801;;LTL Freight Type   ;Code10        ;TableRelation="LTL Freight Type";
                                                   CaptionML=ENU=LTL Freight Type }
    { 14000821;;UCC No.            ;Code30        ;OnValidate=BEGIN
                                                                GetReceiveSetup;
                                                                IF ReceiveSetup."Enable Label Printing" THEN
                                                                  LabelMgt.FormatUCC128PrintReceive(Rec);
                                                              END;

                                                   CaptionML=ENU=UCC No. }
    { 14000822;;UCC No. (Print)    ;Code50        ;CaptionML=ENU=UCC No. (Print) }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Source Type,Source Subtype,Source ID    ;SumIndexFields=Calculation Weight,Calculation Volume,COD Amount,Shipping Charge;
                                                   MaintainSIFTIndex=No }
    {    ;External Tracking No.                    }
    {    ;Shipping Agent Code,Shipping Agent Service,No.;
                                                   SumIndexFields=Calculation Weight;
                                                   MaintainSIFTIndex=No }
    {    ;Ship-from Type,Ship-from No.,Ship-from Code }
    {    ;UCC No.                                  }
    {    ;Original Receive No.                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ReceiveLine@1240030000 : Record 14000602;
      ReceiveControl@1240030001 : Record 14000611;
      ReceiveSetup@1240030002 : Record 14000607;
      Receive@1240030003 : Record 14000601;
      ShippingAgent@1240030005 : Record 291;
      ReceiveStation@1240030006 : Record 14000608;
      Country@1240030009 : Record 9;
      ReceiveNumbering@1240030007 : Record 14000613;
      NoSeriesMgt@1240030010 : Codeunit 396;
      Receiving@1240030011 : Codeunit 14000601;
      LabelMgt@1240030012 : Codeunit 14000841;
      NetWeightFlowfieldsCalc@1240030013 : Boolean;
      ValueCostFlowfieldsCalc@1240030014 : Boolean;
      ValuePriceFlowfieldsCalc@1240030015 : Boolean;
      DimWeightFlowfieldsCalc@1240030016 : Boolean;
      GrossWeightFlowfieldsCalc@1240030017 : Boolean;
      UnitVolumeFlowfieldsCalc@1240030018 : Boolean;
      UOMWeightFlowfieldsCalc@1240030004 : Boolean;
      CubageFlowfieldsCalc@1240030008 : Boolean;
      LengthFlowfieldsCalc@1240030020 : Boolean;
      WidthFlowfieldsCalc@1240030021 : Boolean;
      HeightFlowfieldsCalc@1240030022 : Boolean;
      ReceiveSetupRetrieved@1240030019 : Boolean;
      Text001@1001 : TextConst 'ENU=Cannot be renamed.';
      Text002@1002 : TextConst 'ENU=%1 must be Customer or Vendor.';
      Text003@1003 : TextConst 'ENU=Label File cannot be blank.';
      Text004@1004 : TextConst 'ENU=%1 do not exists.';
      Text005@1005 : TextConst 'ENU=More is being received of %1 %2 %3 than ordered.';

    PROCEDURE TestFromPurchHeader@2(FromPurchHeader@1240030000 : Record 38);
    VAR
      Vendor@1240030001 : Record 23;
      OrderAddress@1240030002 : Record 224;
    BEGIN
      GetReceiveSetup;

      FromPurchHeader.TESTFIELD("Buy-from Vendor No.");
      FromPurchHeader.TESTFIELD("Buy-from Vendor Name");
      FromPurchHeader.TESTFIELD("Buy-from Address");
      FromPurchHeader.TESTFIELD("Buy-from City");
      FromPurchHeader.TESTFIELD("Buy-from Contact");
      FromPurchHeader.TESTFIELD("Buy-from Post Code");
      IF FromPurchHeader."Order Address Code" = '' THEN BEGIN
        Vendor.GET(FromPurchHeader."Buy-from Vendor No.");
        Vendor.TESTFIELD("Phone No.");
      END ELSE BEGIN
        OrderAddress.GET(FromPurchHeader."Buy-from Vendor No.",FromPurchHeader."Order Address Code");
        OrderAddress.TESTFIELD("Phone No.");
      END;
    END;

    PROCEDURE TransferFromReceiveControl@1(FromReceiveControl@1240030000 : Record 14000611);
    BEGIN
      GetReceiveSetup;
      GetReceiveStation;

      "Ship-from Type" := FromReceiveControl."Ship-from Type";
      "Ship-from No." := FromReceiveControl."Ship-from No.";
      "Ship-from Code" := FromReceiveControl."Ship-from Code";
      "Ship-from Name" := FromReceiveControl."Ship-from Name";
      "Ship-from Name 2" := FromReceiveControl."Ship-from Name 2";
      "Ship-from Address" := FromReceiveControl."Ship-from Address";
      "Ship-from Address 2" := FromReceiveControl."Ship-from Address 2";
      "Ship-from City" := FromReceiveControl."Ship-from City";
      "Ship-from Contact" := FromReceiveControl."Ship-from Contact";
      "Ship-from ZIP Code" := FromReceiveControl."Ship-from ZIP Code";
      "Ship-from State" := FromReceiveControl."Ship-from State";
      "Ship-from Country Code" := FromReceiveControl."Ship-from Country Code";
      "Ship-from Phone No." := FromReceiveControl."Ship-from Phone No.";
      "Ship-from Fax No." := FromReceiveControl."Ship-from Fax No.";
    END;

    PROCEDURE TransferFromCustomer@6(CurrentCustomer@1240030000 : Record 18);
    BEGIN
      "Ship-from Name" := CurrentCustomer.Name;
      "Ship-from Name 2" := CurrentCustomer."Name 2";
      "Ship-from Address" := CurrentCustomer.Address;
      "Ship-from Address 2" := CurrentCustomer."Address 2";
      "Ship-from City" := CurrentCustomer.City;
      "Ship-from Contact" := CurrentCustomer.Contact;
      "Ship-from ZIP Code" := CurrentCustomer."Post Code";
      "Ship-from State" := CurrentCustomer.County;
      "Ship-from Country Code" := CurrentCustomer."Country/Region Code";
      "Ship-from Phone No." := CurrentCustomer."Phone No.";
      "Ship-from Fax No." := CurrentCustomer."Fax No.";

      VALIDATE("Shipping Agent Code",'');
      VALIDATE("Shipping Agent Service",'');
    END;

    PROCEDURE TransferFromVendor@3(CurrentVendor@1240030000 : Record 23);
    BEGIN
      "Ship-from Name" := CurrentVendor.Name;
      "Ship-from Name 2" := CurrentVendor."Name 2";
      "Ship-from Address" := CurrentVendor.Address;
      "Ship-from Address 2" := CurrentVendor."Address 2";
      "Ship-from City" := CurrentVendor.City;
      "Ship-from Contact" := CurrentVendor.Contact;
      "Ship-from ZIP Code" := CurrentVendor."Post Code";
      "Ship-from State" := CurrentVendor.County;
      "Ship-from Country Code" := CurrentVendor."Country/Region Code";
      "Ship-from Phone No." := CurrentVendor."Phone No.";
      "Ship-from Fax No." := CurrentVendor."Fax No.";

      VALIDATE("Shipping Agent Code",'');
      VALIDATE("Shipping Agent Service",'');
    END;

    PROCEDURE TransferFromLocation@7(CurrentLocation@1240030000 : Record 14);
    BEGIN
      "Ship-from Name" := CurrentLocation.Name;
      "Ship-from Name 2" := CurrentLocation."Name 2";
      "Ship-from Address" := CurrentLocation.Address;
      "Ship-from Address 2" := CurrentLocation."Address 2";
      "Ship-from City" := CurrentLocation.City;
      "Ship-from Contact" := CurrentLocation.Contact;
      "Ship-from ZIP Code" := CurrentLocation."Post Code";
      "Ship-from State" := CurrentLocation.County;
      "Ship-from Country Code" := CurrentLocation."Country/Region Code";
      "Ship-from Phone No." := CurrentLocation."Phone No.";
      "Ship-from Fax No." := CurrentLocation."Fax No.";

      VALIDATE("Shipping Agent Code",CurrentLocation."E-Ship Agent Code");
      VALIDATE("Shipping Agent Service",CurrentLocation."E-Ship Agent Service");
    END;

    PROCEDURE TransferFromShipToAddress@25(CurrentShipToAddress@1240030000 : Record 222);
    BEGIN
      "Ship-from Name" := CurrentShipToAddress.Name;
      "Ship-from Name 2" := CurrentShipToAddress."Name 2";
      "Ship-from Address" := CurrentShipToAddress.Address;
      "Ship-from Address 2" := CurrentShipToAddress."Address 2";
      "Ship-from City" := CurrentShipToAddress.City;
      "Ship-from Contact" := CurrentShipToAddress.Contact;
      "Ship-from ZIP Code" := CurrentShipToAddress."Post Code";
      "Ship-from State" := CurrentShipToAddress.County;
      "Ship-from Country Code" := CurrentShipToAddress."Country/Region Code";
      "Ship-from Phone No." := CurrentShipToAddress."Phone No.";
      "Ship-from Fax No." := CurrentShipToAddress."Fax No.";

      VALIDATE("Shipping Agent Code",CurrentShipToAddress."Shipping Agent Code");
      VALIDATE("Shipping Agent Service",CurrentShipToAddress."E-Ship Agent Service");
    END;

    PROCEDURE TransferFromOrderAddress@27(CurrentOrderAddress@1240030000 : Record 224);
    BEGIN
      "Ship-from Name" := CurrentOrderAddress.Name;
      "Ship-from Name 2" := CurrentOrderAddress."Name 2";
      "Ship-from Address" := CurrentOrderAddress.Address;
      "Ship-from Address 2" := CurrentOrderAddress."Address 2";
      "Ship-from City" := CurrentOrderAddress.City;
      "Ship-from Contact" := CurrentOrderAddress.Contact;
      "Ship-from ZIP Code" := CurrentOrderAddress."Post Code";
      "Ship-from State" := CurrentOrderAddress.County;
      "Ship-from Country Code" := CurrentOrderAddress."Country/Region Code";
      "Ship-from Phone No." := CurrentOrderAddress."Phone No.";
      "Ship-from Fax No." := CurrentOrderAddress."Fax No.";

      VALIDATE("Shipping Agent Code",'');
      VALIDATE("Shipping Agent Service",'');
    END;

    PROCEDURE ClearShipFromAddess@28();
    BEGIN
      "Ship-from Name" := '';
      "Ship-from Name 2" := '';
      "Ship-from Address" := '';
      "Ship-from Address 2" := '';
      "Ship-from City" := '';
      "Ship-from Contact" := '';
      "Ship-from ZIP Code" := '';
      "Ship-from State" := '';
      "Ship-from Country Code" := '';
      "Ship-from Phone No." := '';
      "Ship-from Fax No." := '';
    END;

    LOCAL PROCEDURE GetShippingAgent@9();
    BEGIN
      IF ("Shipping Agent Code" <> ShippingAgent.Code) OR ("Shipping Agent Code" = '') THEN
        ShippingAgent.GET("Shipping Agent Code");
    END;

    LOCAL PROCEDURE GetReceiveSetup@22();
    BEGIN
      IF NOT ReceiveSetupRetrieved THEN BEGIN
        ReceiveSetup.GET;
        ReceiveSetupRetrieved := TRUE;
      END;
    END;

    PROCEDURE TotalNetWeight@4() : Decimal;
    BEGIN
      IF NOT NetWeightFlowfieldsCalc THEN BEGIN
        CALCFIELDS("Net Weight");
        NetWeightFlowfieldsCalc := TRUE;
      END;

      EXIT("Net Weight");
    END;

    PROCEDURE TotalGrossWeight@16() : Decimal;
    BEGIN
      IF NOT GrossWeightFlowfieldsCalc THEN BEGIN
        CALCFIELDS("Gross Weight");
        GrossWeightFlowfieldsCalc := TRUE;
      END;

      EXIT("Gross Weight");
    END;

    PROCEDURE TotalDimWeight@11() : Decimal;
    BEGIN
      IF NOT DimWeightFlowfieldsCalc THEN BEGIN
        CALCFIELDS("Dim. Weight");
        DimWeightFlowfieldsCalc := TRUE;
      END;

      EXIT("Dim. Weight");
    END;

    PROCEDURE TotalVolume@17() : Decimal;
    BEGIN
      IF NOT UnitVolumeFlowfieldsCalc THEN BEGIN
        CALCFIELDS(Volume);
        UnitVolumeFlowfieldsCalc := TRUE;
      END;

      EXIT(Volume);
    END;

    PROCEDURE TotalUOMWeight@1240030002() : Decimal;
    BEGIN
      IF NOT UOMWeightFlowfieldsCalc THEN BEGIN
        CALCFIELDS("Unit of Measure Weight");
        UOMWeightFlowfieldsCalc := TRUE;
      END;

      EXIT("Unit of Measure Weight");
    END;

    PROCEDURE TotalCubage@1240030003() : Decimal;
    BEGIN
      IF NOT CubageFlowfieldsCalc THEN BEGIN
        CALCFIELDS(Cubage);
        CubageFlowfieldsCalc := TRUE;
      END;

      EXIT(Cubage);
    END;

    PROCEDURE TotalLength@1240030007() : Decimal;
    BEGIN
      IF NOT LengthFlowfieldsCalc THEN BEGIN
        CALCFIELDS(Length);
        LengthFlowfieldsCalc := TRUE;
      END;

      EXIT(Length);
    END;

    PROCEDURE TotalWidth@1240030008() : Decimal;
    BEGIN
      IF NOT WidthFlowfieldsCalc THEN BEGIN
        CALCFIELDS(Width);
        WidthFlowfieldsCalc := TRUE;
      END;

      EXIT(Width);
    END;

    PROCEDURE TotalHeight@1240030009() : Decimal;
    BEGIN
      IF NOT HeightFlowfieldsCalc THEN BEGIN
        CALCFIELDS(Height);
        HeightFlowfieldsCalc := TRUE;
      END;

      EXIT(Height);
    END;

    PROCEDURE GetWeight@19() : Decimal;
    BEGIN
      IF "Override Weight" <> 0 THEN
        EXIT("Override Weight");

      IF "Scale Weight" <> 0 THEN
        EXIT("Scale Weight");

      GetReceiveSetup;
      ReceiveSetup.TESTFIELD("Actual Weight as");

      CASE ReceiveSetup."Actual Weight as" OF
        ReceiveSetup."Actual Weight as"::"Net Weight":
          EXIT(TotalNetWeight);
        ReceiveSetup."Actual Weight as"::"Gross Weight":
          EXIT(TotalGrossWeight);
        ReceiveSetup."Actual Weight as"::"Dimmed Weight":
          EXIT(TotalDimWeight);
        ReceiveSetup."Actual Weight as"::"Unit of Measure Weight":
          EXIT(TotalUOMWeight);
      END;
    END;

    PROCEDURE GetVolume@18() : Decimal;
    BEGIN
      IF "Override Volume" <> 0 THEN
        EXIT("Override Volume");

      GetReceiveSetup;

      CASE ReceiveSetup."Actual Volume as" OF
        ReceiveSetup."Actual Volume as"::"Unit Volume":
          EXIT(TotalVolume);
        ReceiveSetup."Actual Volume as"::Cubage:
          EXIT(TotalCubage);
      END;
    END;

    PROCEDURE GetLength@1240030010() : Decimal;
    BEGIN
      IF "Override Dimensions" THEN
        EXIT("Override Length");

      EXIT(TotalLength);
    END;

    PROCEDURE GetWidth@1240030011() : Decimal;
    BEGIN
      IF "Override Dimensions" THEN
        EXIT("Override Width");

      EXIT(TotalWidth);
    END;

    PROCEDURE GetHeight@1240030006() : Decimal;
    BEGIN
      IF "Override Dimensions" THEN
        EXIT("Override Height");

      EXIT(TotalHeight);
    END;

    PROCEDURE GetCalculationFields@1240030005(DimPrecision@1240030000 : Decimal;DimDirection@1240030001 : Code[10]);
    BEGIN
      "Calculation Volume" := GetVolume;
      IF DimPrecision <> 0 THEN BEGIN
        "Calculation Length" := ROUND(GetLength,DimPrecision,DimDirection);
        "Calculation Width" := ROUND(GetWidth,DimPrecision,DimDirection);
        "Calculation Height" := ROUND(GetHeight,DimPrecision,DimDirection);
      END ELSE BEGIN
        "Calculation Length" := GetLength;
        "Calculation Width" := GetWidth;
        "Calculation Height" := GetHeight;
      END;
    END;

    PROCEDURE ClearTotalValueFields@5();
    BEGIN
      NetWeightFlowfieldsCalc := FALSE;
      ValueCostFlowfieldsCalc := FALSE;
      ValuePriceFlowfieldsCalc := FALSE;
      DimWeightFlowfieldsCalc := FALSE;
      GrossWeightFlowfieldsCalc := FALSE;
      UnitVolumeFlowfieldsCalc := FALSE;
      UOMWeightFlowfieldsCalc := FALSE;
      CubageFlowfieldsCalc := FALSE;
      LengthFlowfieldsCalc := FALSE;
      WidthFlowfieldsCalc := FALSE;
      HeightFlowfieldsCalc := FALSE;
    END;

    LOCAL PROCEDURE GetReceiveStation@51();
    BEGIN
      IF ReceiveStation.Code = '' THEN
        ReceiveStation.GetReceiveStation;
    END;

    PROCEDURE InsertLabelFile@29(LabelFile@1240030000 : Text[250];LabelDescription@1240030001 : Text[250];LabelType@1240030002 : Integer;PrinterPort@1240030003 : Code[100];ReceiveStationCode@1240030004 : Code[10];LabelPrinted@1240030005 : Boolean;DoNotImportLabelFile@1240030007 : Boolean);
    VAR
      ReceiveLabel@1240030006 : Record 14000605;
    BEGIN
      IF LabelFile = '' THEN
        ERROR(Text003);

      IF NOT DoNotImportLabelFile THEN
        IF NOT EXISTS(LabelFile) THEN
          ERROR(Text004,LabelFile);

      ReceiveLabel.LOCKTABLE;
      ReceiveLabel.RESET;
      ReceiveLabel.SETRANGE(Type,ReceiveLabel.Type::Receive);
      ReceiveLabel.SETRANGE("No.","No.");
      IF ReceiveLabel.FIND('+') THEN
        ReceiveLabel."File No." := ReceiveLabel."File No." + 1
      ELSE BEGIN
        ReceiveLabel.Type := ReceiveLabel.Type::Receive;
        ReceiveLabel."No." := "No.";
        ReceiveLabel."File No." := 1;
      END;

      ReceiveLabel.INIT;
      ReceiveLabel.Description := COPYSTR(LabelDescription,1,MAXSTRLEN(ReceiveLabel.Description));
      ReceiveLabel."File Type" := LabelType;
      ReceiveLabel."File Name" := LabelFile;
      ReceiveLabel."Printer Port" := PrinterPort;
      ReceiveLabel."Receive Station Code" := ReceiveStationCode;
      ReceiveLabel."Created By" := USERID;
      ReceiveLabel."Date Created" := TODAY;
      ReceiveLabel."Time Created" := TIME;
      IF LabelPrinted THEN
        ReceiveLabel."No. of Copies Printed" := 1;

      IF NOT DoNotImportLabelFile THEN
        ReceiveLabel.ImportFileBinary(LabelFile,FALSE)
      ELSE
        ReceiveLabel."File Not Imported" := TRUE;

      ReceiveLabel.INSERT;
    END;

    PROCEDURE PrintStdReceiveLabel@32();
    BEGIN
      LabelMgt.PrintStdReceiveLabel(Rec);
    END;

    PROCEDURE CopyReceive@33(Copies@1240030000 : Integer;GiveError@1240030001 : Boolean;PrintLabel@1240030002 : Boolean) : Integer;
    VAR
      ReceiveLine2@1240030003 : Record 14000602;
      NewReceiveNo@1240030004 : Code[20];
      i@1240030005 : Integer;
      ReceivesCreated@1240030006 : Integer;
      OverReceivedStop@1240030007 : Boolean;
      PrintUCC128@1240030008 : Boolean;
    BEGIN
      TESTFIELD(Closed);

      IF "Shipping Agent Code" <> '' THEN
        GetShippingAgent
      ELSE
        CLEAR(ShippingAgent);

      ReceivesCreated := 0;
      OverReceivedStop := FALSE;
      WHILE (ReceivesCreated < Copies) AND NOT OverReceivedStop DO BEGIN
        CLEAR(Receive);
        Receive."Source Type" := "Source Type";
        Receive."Source Subtype" := "Source Subtype";
        Receive."Source ID" := "Source ID";
        Receive.INSERT(TRUE);

        NewReceiveNo := Receive."No.";
        Receive.TRANSFERFIELDS(Rec,FALSE);
        Receive."No." := NewReceiveNo;
        Receive.Closed := FALSE;
        Receive."Closed by Receive Station Code" := '';
        Receive."Receive Date" := 0D;
        Receive."External Tracking No." := '';
        Receive."Receive No." := Receive."Receive No." + ReceivesCreated + 1;
        IF Receive."Receive No." > Receive."Total Receives" THEN BEGIN
          Receive."Receive No." := 1;
          Receive."Total Receives" := 1;
        END;
        PrintUCC128 :=  Receive."UCC No." <> '';
        Receive."UCC No." := '';
        IF "Shipping Agent Code" <> '' THEN
          Receive.VALIDATE("Shipping Agent Code","Shipping Agent Code");
        IF "Shipping Agent Service" <> '' THEN
          Receive.VALIDATE("Shipping Agent Service","Shipping Agent Service");
        Receive."Multi Document Receive Split" := FALSE;
        Receive."Original Receive No." := '';
        Receive."Original Shipping Charge" := 0;
        Receive.MODIFY(TRUE);

        ReceiveLine.RESET;
        ReceiveLine.SETRANGE("Receive No.","No.");
        IF ReceiveLine.FIND('-') THEN
          REPEAT
            ReceiveLine.TESTFIELD("Serial No.",'');

            CLEAR(ReceiveLine2);
            ReceiveLine2."Receive No." := Receive."No.";
            ReceiveLine2."Line No." := ReceiveLine."Line No.";
            ReceiveLine2."Source Type" := ReceiveLine."Source Type";
            ReceiveLine2."Source Subtype" := ReceiveLine."Source Subtype";
            ReceiveLine2."Source ID" := ReceiveLine."Source ID";
            ReceiveLine2.INSERT(TRUE);
            IF ReceiveLine.Type <> ReceiveLine.Type::" " THEN
              ReceiveLine2.VALIDATE(Type,ReceiveLine.Type);
            IF ReceiveLine."No." <> '' THEN
              ReceiveLine2.VALIDATE("No.",ReceiveLine."No.");
            IF ReceiveLine."Variant Code" <> '' THEN
              ReceiveLine2.VALIDATE("Variant Code",ReceiveLine."Variant Code");
            IF ReceiveLine.Quantity <> 0 THEN
              ReceiveLine2.VALIDATE(Quantity,ReceiveLine.Quantity);
            IF ReceiveLine2."Unit of Measure Code" <> ReceiveLine."Unit of Measure Code" THEN
              ReceiveLine2.VALIDATE("Unit of Measure Code",ReceiveLine."Unit of Measure Code");

            ReceiveLine2.Description := ReceiveLine.Description;
            ReceiveLine2."Net Weight" := ReceiveLine."Net Weight";
            ReceiveLine2."Gross Weight" := ReceiveLine."Gross Weight";
            ReceiveLine2."Dimmed Weight" := ReceiveLine."Dimmed Weight";
            ReceiveLine2.Volume := ReceiveLine.Volume;
            ReceiveLine2."Unit Length" := ReceiveLine."Unit Length";
            ReceiveLine2."Unit Width" := ReceiveLine."Unit Width";
            ReceiveLine2."Unit Height" := ReceiveLine."Unit Height";
            ReceiveLine2."Unit Cubage" := ReceiveLine."Unit Cubage";
            ReceiveLine2."Unit Weight" := ReceiveLine."Unit Weight";
            ReceiveLine2."Use Unit of measure Dimensions" := ReceiveLine."Use Unit of measure Dimensions";
            ReceiveLine2.Length := ReceiveLine.Length;
            ReceiveLine2.Width := ReceiveLine.Width;
            ReceiveLine2.Height := ReceiveLine.Height;
            ReceiveLine2.Cubage := ReceiveLine.Cubage;
            ReceiveLine2."Unit of Measure Weight" := ReceiveLine."Unit of Measure Weight";
            ReceiveLine2.MODIFY(TRUE);

            IF ReceiveLine2.OverReceiveError THEN BEGIN
              OverReceivedStop := TRUE;
              IF GiveError THEN
                ERROR(
                  Text005,
                  ReceiveLine2.Type,ReceiveLine2."No.",ReceiveLine2.Description);
            END;
          UNTIL (ReceiveLine.NEXT = 0) OR OverReceivedStop;

        IF NOT OverReceivedStop THEN BEGIN
          Receiving.CloseReceive(Receive,PrintLabel);

          ReceivesCreated := ReceivesCreated + 1;
        END ELSE
          Receive.DELETE(TRUE);
      END;

      EXIT(ReceivesCreated);
    END;

    PROCEDURE CopyReceiveAskNoOfCopies@1240030000(GiveError@1240030001 : Boolean;PrintLabel@1240030002 : Boolean) : Integer;
    VAR
      ReceiveInput@1240030003 : Record 14000615;
      EReceiveNoOfCopies@1240030000 : Page 14050051;
    BEGIN
      TESTFIELD(Closed);

      CLEAR(EReceiveNoOfCopies);
      EReceiveNoOfCopies.LOOKUPMODE(TRUE);
      IF EReceiveNoOfCopies.RUNMODAL = ACTION::LookupOK THEN BEGIN
        EReceiveNoOfCopies.GetReceiveInput(ReceiveInput);
        EXIT(CopyReceive(ReceiveInput."No. of Copies",GiveError,PrintLabel));
      END ELSE
        EXIT(0);
    END;

    PROCEDURE DivideQuantityAndValueFields@38(MultiDocReceive@1240030000 : Record 14000601;VAR TotalReceive@1240030001 : Record 14000601;CorrectionFactor@1240030002 : Decimal;UseRemainingAmounts@1240030003 : Boolean);
    BEGIN
      IF UseRemainingAmounts THEN BEGIN
        "Scale Weight" := MultiDocReceive."Scale Weight" - TotalReceive."Scale Weight";
        "Override Weight" := MultiDocReceive."Override Weight" - TotalReceive."Override Weight";
        "Calculation Weight" :=
          MultiDocReceive."Calculation Weight" - TotalReceive."Calculation Weight";
        "Override Volume" := MultiDocReceive."Override Volume" - TotalReceive."Override Volume";
        "Calculation Volume" :=
          MultiDocReceive."Calculation Volume" - TotalReceive."Calculation Volume";
        "Shipping Charge" := MultiDocReceive."Shipping Charge" - TotalReceive."Shipping Charge";
        "COD Amount" := MultiDocReceive."COD Amount" - TotalReceive."COD Amount";
      END ELSE BEGIN
        "Scale Weight" := ROUND(CorrectionFactor * MultiDocReceive."Scale Weight",0.0001);
        "Override Weight" := ROUND(CorrectionFactor * MultiDocReceive."Override Weight",0.0001);
        "Calculation Weight" := ROUND(CorrectionFactor * MultiDocReceive."Calculation Weight",0.0001);
        "Override Volume" := ROUND(CorrectionFactor * MultiDocReceive."Override Volume",0.0001);
        "Calculation Volume" := ROUND(CorrectionFactor * MultiDocReceive."Calculation Volume",0.0001);
        "Shipping Charge" := ROUND(CorrectionFactor * MultiDocReceive."Shipping Charge",0.01);
        "COD Amount" := ROUND(CorrectionFactor * MultiDocReceive."COD Amount",0.01);
      END;

      TotalReceive."Scale Weight" := TotalReceive."Scale Weight" + "Scale Weight";
      TotalReceive."Override Weight" := TotalReceive."Override Weight" + "Override Weight";
      TotalReceive."Calculation Weight" := TotalReceive."Calculation Weight" + "Calculation Weight";
      TotalReceive."Override Volume" := TotalReceive."Override Volume" + "Override Volume";
      TotalReceive."Calculation Volume" := TotalReceive."Calculation Volume" + "Calculation Volume";
      TotalReceive."Shipping Charge" := TotalReceive."Shipping Charge" + "Shipping Charge";
      TotalReceive."COD Amount" := TotalReceive."COD Amount" + "COD Amount";
    END;

    PROCEDURE LookupMultiDocReceive@39();
    BEGIN
      TESTFIELD("Multi Document Receive");

      Receive.RESET;
      Receive.SETRANGE("No.","Original Receive No.");
      PAGE.RUNMODAL(PAGE::Receive,Receive);
    END;

    PROCEDURE SetStandardSetupOptionPage@40(OptionPageNo@1240030000 : Code[20]);
    VAR
      StandardOptionSetup@1240030001 : Record 14000610;
    BEGIN
      TESTFIELD(Closed,FALSE);

      StandardOptionSetup.GET(OptionPageNo);

      IF StandardOptionSetup."Override Weight" <> 0 THEN
        VALIDATE("Override Weight",StandardOptionSetup."Override Weight");
      IF StandardOptionSetup."Override Volume" <> 0 THEN
        VALIDATE("Override Volume",StandardOptionSetup."Override Volume");
      IF StandardOptionSetup."LTL Freight Type" <> '' THEN
        VALIDATE("LTL Freight Type",StandardOptionSetup."LTL Freight Type");
      IF StandardOptionSetup."Override Length" <> 0 THEN
        VALIDATE("Override Length",StandardOptionSetup."Override Length");
      IF StandardOptionSetup."Override Width" <> 0 THEN
        VALIDATE("Override Width",StandardOptionSetup."Override Width");
      IF StandardOptionSetup."Override Height" <> 0 THEN
        VALIDATE("Override Height",StandardOptionSetup."Override Height");
      IF StandardOptionSetup."Override Dimensions" THEN
        VALIDATE("Override Dimensions",StandardOptionSetup."Override Dimensions");
      MODIFY(TRUE);

      IF StandardOptionSetup."Add Line to Receive" THEN BEGIN
        ReceiveLine.RESET;
        ReceiveLine.SETRANGE("Receive No.","No.");
        IF ReceiveLine.FIND('+') THEN
          ReceiveLine."Line No." := ReceiveLine."Line No." + 10000
        ELSE
          ReceiveLine."Line No." := 10000;
        ReceiveLine.INIT;
        ReceiveLine.VALIDATE(Type,ReceiveLine.Type::" ");
        ReceiveLine.Description := StandardOptionSetup."Line Description";
        ReceiveLine."Net Weight" := StandardOptionSetup."Line Net Weight";
        ReceiveLine."Gross Weight" := StandardOptionSetup."Line Gross Weight";
        ReceiveLine."Dimmed Weight" := StandardOptionSetup."Line Dim. Weight";
        ReceiveLine.Volume := StandardOptionSetup."Line Volume";
        ReceiveLine."LTL Freight Type" := StandardOptionSetup."Line LTL Freight Type";
        ReceiveLine."Unit Length" := StandardOptionSetup."Line Length";
        ReceiveLine."Unit Width" := StandardOptionSetup."Line Width";
        ReceiveLine."Unit Height" := StandardOptionSetup."Line Height";
        ReceiveLine."Unit Cubage" := StandardOptionSetup."Line Cubage";
        ReceiveLine."Unit Weight" := StandardOptionSetup."Line Unit of Measure Weight";
        ReceiveLine."Use Unit of measure Dimensions" := StandardOptionSetup."Line Use Unit of meas. Dim.";
        IF StandardOptionSetup."Line Use Unit of meas. Dim." THEN BEGIN
          ReceiveLine.Length := StandardOptionSetup."Line Length";
          ReceiveLine.Width := StandardOptionSetup."Line Width";
          ReceiveLine.Height := StandardOptionSetup."Line Height";
        END;

        ReceiveLine.INSERT(TRUE);
      END;
    END;

    PROCEDURE ReceiveLevel@42() : Integer;
    VAR
      MinimumLevel@1240030000 : Integer;
      TempLevel@1240030001 : Integer;
    BEGIN
      IF "Original Receive No." <> '' THEN BEGIN
        IF NOT Receive.GET("Original Receive No.") THEN
          EXIT(0);
      END ELSE
        Receive := Rec;

      ReceiveLine.RESET;
      ReceiveLine.SETRANGE("Receive No.",Receive."No.");
      ReceiveLine.SETRANGE(Type,ReceiveLine.Type::"Account (G/L)",ReceiveLine.Type::"3");
      ReceiveLine.SETFILTER("No.",'<>%1','');
      IF ReceiveLine.FIND('-') THEN BEGIN
        EXIT(1);
      END ELSE BEGIN
        ReceiveLine.SETRANGE(Type,ReceiveLine.Type::Receive);
        IF ReceiveLine.FIND('-') THEN BEGIN
          REPEAT
            IF NOT Receive.GET(ReceiveLine."No.") THEN
              EXIT(0);

            TempLevel := Receive.ReceiveLevel;
            IF MinimumLevel = 0 THEN
              MinimumLevel := TempLevel
            ELSE
              IF TempLevel < MinimumLevel THEN
                MinimumLevel := TempLevel;

            IF MinimumLevel = 1 THEN
              EXIT(2);
          UNTIL ReceiveLine.NEXT = 0;
            EXIT(MinimumLevel + 1);
        END ELSE
          EXIT(1);
      END;
    END;

    PROCEDURE StartTrackingReceive@43();
    BEGIN
      IF "Ship-from Country Code" <> '' THEN
        Country.GET("Ship-from Country Code");
      TESTFIELD("Shipping Agent Code");
      ShippingAgent.GET("Shipping Agent Code");
      HYPERLINK(
        STRSUBSTNO(
           ShippingAgent."Internet Address","External Tracking No.",Country.Name,
           GetVolume,ShippingAgent."Account No."));
    END;

    BEGIN
    END.
  }
}

