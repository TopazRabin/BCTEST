OBJECT Table 14123651 ES Recording
{
  OBJECT-PROPERTIES
  {
    Date=04/30/18;
    Time=12:00:00 PM;
    Version List=ES1.41.51;
  }
  PROPERTIES
  {
    Permissions=TableData 14123521=rm;
    OnInsert=BEGIN
               ESSecuritySetup.GET;
               IF Code = '' THEN BEGIN
                 IF ESSecuritySetup."Last Recording No." <> '' THEN BEGIN
                   ESSecuritySetup."Last Recording No." :=
                     INCSTR(ESSecuritySetup."Last Recording No.");
                   ESSecuritySetup.MODIFY;
                   Code := ESSecuritySetup."Last Recording No.";
                 END ELSE BEGIN
                   IF ESSecuritySetup."Recording Nos." <> '' THEN
                     Code := NoSeriesMgt.GetNextNo(ESSecuritySetup."Recording Nos.",WORKDATE,TRUE)
                   ELSE
                     ESSecuritySetup.TESTFIELD("Last Recording No.");
                 END;

                 IF NOT ESSecuritySetup."Publish Allowed" THEN BEGIN
                   ESSecuritySetup.TESTFIELD("Recording Company Identifier");

                   Code := Code + '-' + ESSecuritySetup."Recording Company Identifier";
                 END;
               END;

               IF "File Name" = '' THEN BEGIN
                 IF ESSecuritySetup."Default Recording File Name" <> '' THEN
                   "File Name" :=
                     ESSecuritySetup.BuildDefaultFileName(
                       ESSecuritySetup."Default Recording File Name",MAXSTRLEN("File Name"),Code);
               END;

               IF NOT DoNotSetDefault THEN BEGIN
                 "Extend Insert Permissions" := ESSecuritySetup."Extend Insert Permissions";
                 "Add Related Permissions" := ESSecuritySetup."Add Related Permissions";
                 "Role for Both Clients" := ESSecuritySetup."Role for Both Clients";
               END;

               Comment(1,STRSUBSTNO(Text010,TABLECAPTION,Code));
             END;

    OnModify=BEGIN
               Comment(1,STRSUBSTNO(Text011,TABLECAPTION,Code));
             END;

    OnDelete=BEGIN
               ESRoleRecording.RESET;
               ESRoleRecording.SETRANGE("Recording Code",Code);
               IF ESRoleRecording.FIND('-') THEN
                 ESRoleRecording.TESTFIELD("Recording Code",'');

               ESRecordingPerm.RESET;
               ESRecordingPerm.SETRANGE("Recording Code",Code);
               ESRecordingPerm.DELETEALL;

               Comment(1,STRSUBSTNO(Text012,TABLECAPTION,Code));
             END;

    CaptionML=ENU=Recording;
    LookupPageID=Page14123652;
    DrillDownPageID=Page14123652;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code30        ;CaptionML=ENU=Code }
    { 2   ;   ;Description         ;Text250       ;CaptionML=ENU=Description }
    { 3   ;   ;Recorded by User    ;Code50        ;OnLookup=VAR
                                                              LoginMgt@1240520008 : Codeunit 418;
                                                            BEGIN
                                                              LoginMgt.LookupUserID("Recorded by User");
                                                            END;

                                                   CaptionML=ENU=Recorded by User;
                                                   Editable=No }
    { 4   ;   ;Start Date Time     ;DateTime      ;CaptionML=ENU=Start Date Time;
                                                   Editable=No }
    { 6   ;   ;End Date Time       ;DateTime      ;CaptionML=ENU=End Date Time;
                                                   Editable=No }
    { 8   ;   ;File Name           ;Text250       ;OnValidate=VAR
                                                                ESObjectExplorer@1240520001 : Record 14123901;
                                                              BEGIN
                                                                ESObjectExplorer.CheckCorrectFileName("File Name",TRUE);
                                                              END;

                                                   OnLookup=VAR
                                                              ESObjectExplorer@1240520001 : Record 14123901;
                                                            BEGIN
                                                              "File Name" := CommonDialogMgt.OpenFile(FIELDCAPTION("File Name"),"File Name",1,'*.txt',1);
                                                              ESObjectExplorer.CheckCorrectFileName("File Name",TRUE);
                                                            END;

                                                   CaptionML=ENU=File Name }
    { 9   ;   ;Exported Date Time  ;DateTime      ;CaptionML=ENU=Exported Date Time;
                                                   Editable=No }
    { 10  ;   ;Imported Date Time  ;DateTime      ;CaptionML=ENU=Imported Date Time;
                                                   Editable=No }
    { 11  ;   ;Extend Insert Permissions;Boolean  ;CaptionML=ENU=Extend Insert Permissions }
    { 12  ;   ;Add Related Permissions;Boolean    ;CaptionML=ENU=Add Related Permissions }
    { 13  ;   ;Role for Both Clients;Boolean      ;CaptionML=ENU=Permission Set for Both Clients }
    { 14  ;   ;Recording Permissions;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("ES Recording Permission" WHERE (Recording Code=FIELD(Code),
                                                                                                      Object Type=FIELD(Object Type Filter)));
                                                   CaptionML=ENU=Recording Permissions;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 15  ;   ;Summary Permissions ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("ES Summary Permission" WHERE (Type=CONST(Recording),
                                                                                                    Code=FIELD(Code)));
                                                   CaptionML=ENU=Summary Permissions;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 16  ;   ;Role Recordings     ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("ES Role Recording" WHERE (Recording Code=FIELD(Code)));
                                                   CaptionML=ENU=Permission Set Recordings;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 17  ;   ;SQL Profiler Trace File Name;Text250;
                                                   OnValidate=VAR
                                                                ESObjectExplorer@1240520001 : Record 14123901;
                                                              BEGIN
                                                                ESObjectExplorer.CheckCorrectFileName("SQL Profiler Trace File Name",TRUE);
                                                              END;

                                                   OnLookup=VAR
                                                              ESObjectExplorer@1240520001 : Record 14123901;
                                                            BEGIN
                                                              "SQL Profiler Trace File Name" :=
                                                                CommonDialogMgt.OpenFile(
                                                                  FIELDCAPTION("SQL Profiler Trace File Name"),"SQL Profiler Trace File Name",5,'*.xml',0);
                                                              ESObjectExplorer.CheckCorrectFileName("SQL Profiler Trace File Name",TRUE);
                                                            END;

                                                   CaptionML=ENU=SQL Profiler Trace File Name }
    { 18  ;   ;Object Type Filter  ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Object Type Filter;
                                                   OptionCaptionML=ENU=TableData,Table,Form,Report,Dataport,Codeunit,XMLport,MenuSuite,Page,Query,System;
                                                   OptionString=TableData,Table,Form,Report,Dataport,Codeunit,XMLport,MenuSuite,Page,Query,System }
    { 19  ;   ;Summary Results     ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("ES Summary Result" WHERE (Type=CONST(Recording),
                                                                                                Code=FIELD(Code)));
                                                   CaptionML=ENU=Summary Results;
                                                   BlankZero=Yes;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Start Date Time                          }
    {    ;Recorded by User,Start Date Time         }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ESSecuritySetup@1240520008 : Record 14123521;
      ESRecordingPerm@1240520011 : Record 14123652;
      ESRoleRecording@1240520012 : Record 14123654;
      NoSeriesMgt@1240520009 : Codeunit 396;
      ESFileMgt@1240520010 : Codeunit 14123502;
      Text001@1001 : TextConst 'ENU=Extending Insert Permissions on Recording\';
      Text002@1002 : TextConst 'ENU=Process #1################################################';
      Text003@1003 : TextConst 'ENU=Updating Recording Permissions';
      Text004@1004 : TextConst 'ENU=%1 Recording entries have been updated.';
      Text005@1005 : TextConst 'ENU=Copying Permissions for Both Clients\';
      Text007@1007 : TextConst 'ENU=Copying Objects for Both Clients';
      Text008@1008 : TextConst 'ENU=%1 objects inserted.';
      Text016@1016 : TextConst 'ENU=Closing File';
      Text017@1017 : TextConst 'ENU=Recording %1 exported to %2 with %3 records.';
      Text018@1018 : TextConst 'ENU=Nothing imported.';
      Text019@1019 : TextConst 'ENU=File Name must be entered.';
      Text020@1020 : TextConst 'ENU=Importing %1 from file\';
      Text021@1021 : TextConst 'ENU=Process #1################################################\';
      Text022@1022 : TextConst 'ENU=Opening file';
      Text023@1023 : TextConst 'ENU=%1 records have been imported from %2.';
      Text006@1006 : TextConst 'ENU=Nothing has been copied.';
      Text014@1014 : TextConst 'ENU=No recordings exist in company %1.';
      Text015@1015 : TextConst 'ENU=Copied from company %1';
      Text024@1024 : TextConst 'ENU=%1 %2 inserted %3 already exists.';
      CommonDialogMgt@1240520000 : Codeunit 14123901;
      Text025@1025 : TextConst 'ENU=%1 is not valid content for this filetype.';
      Text026@1026 : TextConst 'ENU=Imported %1';
      Text027@1027 : TextConst 'ENU=Nothing has been exported.';
      Text028@1028 : TextConst 'ENU=File %1 already exists, overwrite?';
      Text029@1029 : TextConst 'ENU=Process #1################################################';
      Text030@1030 : TextConst 'ENU=%1 %2 exported to %3 with %4 records.';
      Text031@1031 : TextConst 'ENU=Exporting %1 to file\';
      Text032@1032 : TextConst 'ENU=Updating Version';
      Text033@1033 : TextConst 'ENU=Creating File';
      Text009@1009 : TextConst 'ENU=Import (Overwrite Existing)';
      ESLogTablePermissions@1200 : Codeunit 14123657;
      DoNotSetDefault@1240520001 : Boolean;
      Text010@1010 : TextConst 'ENU=Inserted %1 %2';
      Text011@1011 : TextConst 'ENU=Modified %1 %2';
      Text012@1012 : TextConst 'ENU=Deleted %1 %2';
      Text101@1126 : TextConst 'ENU=Downloading File.';
      Text102@1100 : TextConst 'ENU=Uploading file.';
      Text213@1234 : TextConst 'ENU=Add SUPER temporary?';
      Text234@1235 : TextConst 'ENU=Recording has been started for %1. Click Yes when done.';
      Text235@1236 : TextConst 'ENU=Recording has been started.';
      Test236@1237 : TextConst 'ENU=Recording has not been started.';
      Text237@1238 : TextConst 'ENU=Nothing recorded.';
      RecordingStarted@1213 : Boolean;

    PROCEDURE ExtendInsertPermOnRecorded@1240520009(ShowStatus@1240520012 : Boolean);
    VAR
      ESRecordingPerm@1240520008 : Record 14123652;
      ESRecordingPerm2@1240520009 : Record 14123652;
      Window@1240520010 : Dialog;
      ModifiedRecords@1240520011 : Integer;
    BEGIN
      IF GUIALLOWED THEN
        Window.OPEN(ESSecuritySetup.ExtendProgressText(Text001) + Text002);

      IF GUIALLOWED THEN
        Window.UPDATE(1,Text003);
      ESRecordingPerm.RESET;
      ESRecordingPerm.SETRANGE("Recording Code",Code);
      ESRecordingPerm.SETRANGE("Object Type",ESRecordingPerm."Object Type"::TableData);
      ESRecordingPerm.SETRANGE("Insert Required",TRUE);
      IF ESRecordingPerm.FIND('-') THEN
        REPEAT
          IF NOT ESRecordingPerm."Modify Required" OR
             NOT ESRecordingPerm."Delete Required"
          THEN BEGIN
            ESRecordingPerm2 := ESRecordingPerm;
            ESRecordingPerm2."Modify Required" := TRUE;
            ESRecordingPerm2."Delete Required" := TRUE;
            ESRecordingPerm2.MODIFY(TRUE);

            ModifiedRecords := ModifiedRecords + 1;
          END;
        UNTIL ESRecordingPerm.NEXT = 0;

      IF GUIALLOWED THEN
        Window.CLOSE;

      IF ShowStatus THEN
        MESSAGE(Text004,ModifiedRecords);
    END;

    PROCEDURE CopyPermissionsForBothClients@1240520010(ShowStatus@1240520010 : Boolean);
    VAR
      ESRecordingPerm@1240520008 : Record 14123652;
      ESRecordingPerm2@1240520009 : Record 14123652;
      ESObjectInformation@1240520001 : Record 14123509;
      Window@1240520011 : Dialog;
      InsertedPages@1240520013 : Integer;
    BEGIN
      IF GUIALLOWED THEN
        Window.OPEN(ESSecuritySetup.ExtendProgressText(Text005) + Text002);

      IF GUIALLOWED THEN
        Window.UPDATE(1,Text007);
      ESRecordingPerm.SETRANGE("Recording Code",Code);
      ESRecordingPerm.SETFILTER(
        "Object Type",'%1|%2',
        ESRecordingPerm."Object Type"::"2",ESRecordingPerm."Object Type"::Page);
      ESRecordingPerm.SETRANGE(Origin,ESRecordingPerm.Origin::Recorded);
      IF ESRecordingPerm.FIND('-') THEN
        REPEAT
          ESRecordingPerm2 := ESRecordingPerm;
          CASE ESRecordingPerm."Object Type" OF
            ESRecordingPerm."Object Type"::"2":
              ESRecordingPerm2."Object Type" := ESRecordingPerm2."Object Type"::Page;
            ESRecordingPerm."Object Type"::Page:
              ESRecordingPerm2."Object Type" := ESRecordingPerm2."Object Type"::"2";
          END;

          IF ESObjectInformation.GET(ESRecordingPerm2."Object Type",ESRecordingPerm2."Object ID") THEN
            IF ESRecordingPerm2.INSERT(TRUE) THEN
              InsertedPages := InsertedPages + 1;
        UNTIL ESRecordingPerm.NEXT = 0;

      IF GUIALLOWED THEN
        Window.CLOSE;

      IF ShowStatus THEN
        MESSAGE(Text008,InsertedPages);
    END;

    PROCEDURE CopyFromOtherCompany@1240520018(CopyAllNewRecording@1240520018 : Boolean);
    VAR
      Company@1240520008 : Record 2000000006;
      ESRecording@1240520009 : Record 14123651;
      ESRecordingCompany@1240520012 : Record 14123651;
      ESRecordingTmp@1240520011 : TEMPORARY Record 14123651;
      ESRecordingPerm@1240520014 : Record 14123652;
      ESRecordingPermCompany@1240520013 : Record 14123652;
      ESCopyRecordings@1240520010 : Page 14123662;
      NewRecordings@1240520017 : Integer;
      ExistingRecordings@1240520016 : Integer;
    BEGIN
      Company.RESET;
      Company.SETFILTER(Name,'<>%1',COMPANYNAME);
      IF PAGE.RUNMODAL(PAGE::"ES Live Companies",Company) <> ACTION::LookupOK THEN
        ERROR(Text006);

      ESRecordingCompany.CHANGECOMPANY(Company.Name);
      IF NOT ESRecordingCompany.FIND('-') THEN
        ERROR(Text014,Company.Name);

      REPEAT
        ESRecordingTmp := ESRecordingCompany;
        ESRecordingTmp.INSERT;
      UNTIL ESRecordingCompany.NEXT = 0;

      IF NOT CopyAllNewRecording THEN BEGIN
        CLEAR(ESCopyRecordings);
        ESCopyRecordings.LOOKUPMODE(TRUE);
        ESCopyRecordings.LoadRecords(ESRecordingTmp);
        IF ESCopyRecordings.RUNMODAL <> ACTION::LookupOK THEN
          ERROR(Text006);

        ESRecordingTmp.RESET;
        ESRecordingTmp.DELETEALL;
        ESCopyRecordings.GetSelection(ESRecordingTmp);
        ESRecordingTmp.INSERT;
      END;

      IF ESRecordingTmp.FIND('-') THEN
        REPEAT
          IF NOT ESRecording.GET(ESRecordingTmp.Code) THEN BEGIN
            ESRecordingCompany.CHANGECOMPANY(Company.Name);
            ESRecordingCompany.GET(ESRecordingTmp.Code);

            ESRecording.INIT;
            ESRecording.Code := ESRecordingCompany.Code;
            ESRecording.INSERT(TRUE);
            ESRecording.Description := ESRecordingCompany.Description;
            ESRecording."Recorded by User" := ESRecordingCompany."Recorded by User";
            ESRecording."Start Date Time" := ESRecordingCompany."Start Date Time";
            ESRecording."End Date Time" := ESRecordingCompany."End Date Time";
            ESRecording.MODIFY(TRUE);
            ESRecording.Comment(1,STRSUBSTNO(Text015,Company.Name));

            ESRecordingPermCompany.CHANGECOMPANY(Company.Name);
            ESRecordingPermCompany.RESET;
            ESRecordingPermCompany.SETRANGE("Recording Code",ESRecordingCompany.Code);
            IF ESRecordingPermCompany.FIND('-') THEN
              REPEAT
                ESRecordingPerm := ESRecordingPermCompany;
                ESRecordingPerm.INSERT;
              UNTIL ESRecordingPermCompany.NEXT = 0;

            NewRecordings := NewRecordings + 1;
          END ELSE
            ExistingRecordings := ExistingRecordings + 1;
        UNTIL ESRecordingTmp.NEXT = 0;

      MESSAGE(Text024,NewRecordings,ESRecording.TABLECAPTION,ExistingRecordings);
    END;

    PROCEDURE AddToRolePermission@1240520012(ShowStatus@1240520010 : Boolean);
    VAR
      ESRole@1240520008 : Record 14123505;
      ESRoleRecordingMgt@1240520009 : Codeunit 14123651;
    BEGIN
      IF PAGE.RUNMODAL(0,ESRole) <> ACTION::LookupOK THEN
        EXIT;

      ESRoleRecordingMgt.AddRecordingToRolePerm(ESRole,Code,ShowStatus);
    END;

    PROCEDURE AddToRole@1240520015(ShowStatus@1240520010 : Boolean);
    VAR
      ESRole@1240520011 : Record 14123505;
      ESRoleDetail@1240520008 : Record 14123653;
      ESRoleRecordingMgt@1240520009 : Codeunit 14123651;
    BEGIN
      ESRole.RESET;
      ESRole.SETRANGE("Role Detail Exists",TRUE);
      IF PAGE.RUNMODAL(0,ESRole) <> ACTION::LookupOK THEN
        EXIT;

      ESRoleDetail.GET(ESRole."Role ID");
      ESRoleRecordingMgt.AddRecordingToRoleDetail(ESRoleDetail,Code,ShowStatus);
    END;

    PROCEDURE AddToRoleBuilderPermission@1240520016(ShowStatus@1240520010 : Boolean);
    VAR
      ESRole@1240520008 : Record 14123505;
      ESRoleDetail@1240520011 : Record 14123653;
      ESRoleRecordingMgt@1240520009 : Codeunit 14123651;
    BEGIN
      ESRole.RESET;
      ESRole.SETRANGE("Role Detail Exists",TRUE);
      IF PAGE.RUNMODAL(0,ESRole) <> ACTION::LookupOK THEN
        EXIT;

      ESRoleDetail.GET(ESRole."Role ID");
      ESRoleRecordingMgt.AddRecordingToRoleDetailPerm(ESRoleDetail,Code,ShowStatus);
    END;

    PROCEDURE ImportSQLProfilerTrace@1240520000();
    VAR
      ESObjectExplorer@1240520001 : Record 14123901;
      ESSQLProfilerMgt@1240520000 : Codeunit 14123656;
      TempText@1240520002 : Text[1000];
    BEGIN
      IF "SQL Profiler Trace File Name" = '' THEN BEGIN
        "SQL Profiler Trace File Name" :=
          CommonDialogMgt.OpenFile(
            FIELDCAPTION("SQL Profiler Trace File Name"),"SQL Profiler Trace File Name",5,'*.xml',0);

        ESObjectExplorer.CheckCorrectFileName("SQL Profiler Trace File Name",TRUE);

        IF (Description = '') AND (STRLEN("SQL Profiler Trace File Name") > 10) THEN BEGIN
          TempText := "SQL Profiler Trace File Name";
          IF UPPERCASE(COPYSTR(TempText,STRLEN(TempText) - 3,4)) = '.XML' THEN
            TempText := COPYSTR(TempText,1,STRLEN(TempText) - 4);
          WHILE STRPOS(TempText,'\') > 0 DO
            TempText := COPYSTR(TempText,STRPOS(TempText,'\') + 1);
          Description := COPYSTR(TempText,1,MAXSTRLEN(Description));
        END;

        MODIFY;
        COMMIT;
      END;

      TESTFIELD("SQL Profiler Trace File Name");

      ESSQLProfilerMgt.ImportTrace(Rec,TRUE,TRUE,TRUE);
    END;

    PROCEDURE StartDotNetRecording@1000000000(MySession@1000000000 : Boolean) : Boolean;
    VAR
      ActiveSession@1000000001 : Record 2000000110;
      MyActiveSession@1000000002 : Record 2000000110;
      AccessControl@1000 : Record 2000000053;
      TablePermissionBufferTmp@1002 : TEMPORARY Record 14123660;
      SUPERAdded@1001 : Boolean;
    BEGIN
      IF NOT MySession THEN BEGIN
        MyActiveSession.GET(SERVICEINSTANCEID,SESSIONID);

        ActiveSession.RESET;
        ActiveSession.SETRANGE("Server Instance ID",MyActiveSession."Server Instance ID");
        IF PAGE.RUNMODAL(PAGE::"ES Live Sessions",ActiveSession) <> ACTION::LookupOK THEN
          EXIT(RecordingStarted);
        ActiveSession.TESTFIELD("Server Instance ID",MyActiveSession."Server Instance ID");

        IF NOT AccessControl.GET(ActiveSession."User SID",'SUPER','') THEN
          IF CONFIRM(Text213,FALSE) THEN BEGIN
            AccessControl.INIT;
            AccessControl.VALIDATE("User Security ID",ActiveSession."User SID");
            AccessControl.VALIDATE("Role ID",'SUPER');
            AccessControl.VALIDATE("Company Name",'');
            AccessControl.INSERT;

            COMMIT;

            SUPERAdded := TRUE;
        END;

        ESLogTablePermissions.StartSessionID(ActiveSession."Session ID");

        RecordingStarted := TRUE;

        IF CONFIRM(Text234,TRUE,ActiveSession."User ID") THEN BEGIN
          IF SUPERAdded THEN
            IF AccessControl.GET(ActiveSession."User SID",'SUPER','') THEN BEGIN
              AccessControl.DELETE;

              COMMIT;
            END;

          StopDotNetRecording(TRUE);
        END ELSE BEGIN
            IF AccessControl.GET(ActiveSession."User SID",'SUPER','') THEN BEGIN
              AccessControl.DELETE;

              COMMIT;
            END;

          ESLogTablePermissions.Stop(TablePermissionBufferTmp);
        END;

        RecordingStarted := FALSE;
      END ELSE BEGIN
        ESLogTablePermissions.Start;

        RecordingStarted := TRUE;

        MESSAGE(Text235);
      END;

      EXIT(RecordingStarted);
    END;

    PROCEDURE StopDotNetRecording@1000000001(ShowStatus@1000000003 : Boolean) : Boolean;
    VAR
      TablePermissionBufferTmp@1000000001 : TEMPORARY Record 14123660;
      ESRecordingPermTmp@1000000002 : TEMPORARY Record 14123652;
      ESSQLProfilerMgt@1000000006 : Codeunit 14123656;
      InsertedRecords@1000000004 : Integer;
      ModifiedRecords@1000000005 : Integer;
    BEGIN
      IF NOT RecordingStarted THEN
        ERROR(Test236);
      RecordingStarted := FALSE;

      ESLogTablePermissions.Stop(TablePermissionBufferTmp);

      ESRecordingPermTmp.DELETEALL;
      IF TablePermissionBufferTmp.FIND('-') THEN BEGIN
        REPEAT
          ESRecordingPermTmp.INIT;
          ESRecordingPermTmp."Recording Code" := Code;
          ESRecordingPermTmp."Object Type" := TablePermissionBufferTmp."Object Type";
          ESRecordingPermTmp."Object ID" := TablePermissionBufferTmp."Object ID";
          ESRecordingPermTmp.Origin := ESRecordingPermTmp.Origin::Recorded;
          ESRecordingPermTmp."Read Required" :=
            TablePermissionBufferTmp."Read Permission" = TablePermissionBufferTmp."Read Permission"::Yes;
          ESRecordingPermTmp."Calculate Flowfield Required" :=
            TablePermissionBufferTmp."Read Permission" = TablePermissionBufferTmp."Read Permission"::Indirect;
          ESRecordingPermTmp."Insert Required" :=
            TablePermissionBufferTmp."Insert Permission" <> TablePermissionBufferTmp."Insert Permission"::" ";
          ESRecordingPermTmp."Modify Required" :=
            TablePermissionBufferTmp."Modify Permission" <> TablePermissionBufferTmp."Modify Permission"::" ";
          ESRecordingPermTmp."Delete Required" :=
            TablePermissionBufferTmp."Delete Permission" <> TablePermissionBufferTmp."Delete Permission"::" ";
          ESRecordingPermTmp."Execute Required" :=
            TablePermissionBufferTmp."Execute Permission" <> TablePermissionBufferTmp."Execute Permission"::" ";
          ESRecordingPermTmp.INSERT;
        UNTIL TablePermissionBufferTmp.NEXT = 0;

        ESSQLProfilerMgt.MergeRecPerm(
          Code,ESRecordingPermTmp,InsertedRecords,ModifiedRecords,FALSE,ShowStatus);
      END ELSE
        ERROR(Text237);

      EXIT(RecordingStarted);
    END;

    PROCEDURE ExportMultipleRecordings@1240520002(VAR ESRecording@1240520004 : Record 14123651;ShowStatus@1240520021 : Boolean;ExportFileName@1240520001 : Text[250]);
    VAR
      ESEnterFileName@1240520002 : Page 14123560;
      FileMgt@1002 : Codeunit 419;
      TempServerFile@1000 : File;
      Window@1240520005 : Dialog;
      TempServerFileName@1001 : Text[1000];
      TotalRecords@1240520008 : Integer;
      TotalCodes@1240520003 : Integer;
    BEGIN
      IF ExportFileName = '' THEN BEGIN
        CLEAR(ESEnterFileName);
        ESEnterFileName.LOOKUPMODE(TRUE);
        ESEnterFileName.SelectNewFile(TRUE);
        IF ESEnterFileName.RUNMODAL <> ACTION::LookupOK THEN
          ERROR(Text027);
        ExportFileName := ESEnterFileName.GetFileName;
      END;

      TempServerFile.WRITEMODE(TRUE);
      TempServerFile.TEXTMODE(TRUE);
      TempServerFile.CREATETEMPFILE;
      TempServerFileName := TempServerFile.NAME;
      TempServerFile.CLOSE;

      IF GUIALLOWED THEN
        Window.OPEN(Text029);

      IF ESRecording.FIND('-') THEN
        REPEAT
          IF GUIALLOWED THEN
            Window.UPDATE(1,ESRecording.Code);

          TotalCodes := TotalCodes + 1;

          TotalRecords :=
            TotalRecords + ESRecording.ExportRecording(FALSE,TRUE,TRUE,TempServerFileName,FALSE);
        UNTIL ESRecording.NEXT = 0;

      IF GUIALLOWED THEN
        Window.UPDATE(1,Text101);
      FileMgt.DownloadToFile(TempServerFileName,ExportFileName);

      IF GUIALLOWED THEN
        Window.CLOSE;

      IF ShowStatus THEN
        MESSAGE(
          Text030,
          TotalCodes,TABLECAPTION,ExportFileName,TotalRecords);
    END;

    PROCEDURE ExportRecording@1240520014(ShowStatus@1240520021 : Boolean;ConfirmOverwrite@1240520020 : Boolean;AppendToFile@1240520004 : Boolean;ExportFileName@1240520003 : Text[250];ShowProgress@1240520002 : Boolean) : Integer;
    VAR
      ESRecording@1240520010 : Record 14123651;
      ESRecordingPerm@1240520011 : Record 14123652;
      ESEnterFileName@1240520001 : Page 14123560;
      FileMgt@1001 : Codeunit 419;
      Window@1240520009 : Dialog;
      OutputFile@1240520019 : File;
      Value@1240520022 : ARRAY [100] OF Text[1000];
      LocalFileName@1000 : Text[1000];
      TotalRecords@1240520008 : Integer;
    BEGIN
      IF NOT AppendToFile THEN BEGIN
        IF ExportFileName = '' THEN BEGIN
          CLEAR(ESEnterFileName);
          ESEnterFileName.LOOKUPMODE(TRUE);
          ESEnterFileName.SelectNewFile(TRUE);
          IF ESEnterFileName.RUNMODAL <> ACTION::LookupOK THEN
            ERROR(Text027);
          ExportFileName := ESEnterFileName.GetFileName;
        END;

        IF ConfirmOverwrite THEN
          IF EXISTS(ExportFileName) THEN
            IF NOT CONFIRM(Text028,FALSE,ExportFileName) THEN
              ERROR(Text027);

        LocalFileName := ExportFileName;
        OutputFile.WRITEMODE(TRUE);
        OutputFile.TEXTMODE(TRUE);
        OutputFile.CREATETEMPFILE;
        ExportFileName := OutputFile.NAME;
        OutputFile.CLOSE;
      END;

      IF GUIALLOWED AND ShowProgress THEN
        Window.OPEN(STRSUBSTNO(ESSecuritySetup.ExtendProgressText(Text031),TABLECAPTION) + Text029);

      IF GUIALLOWED AND ShowProgress THEN
        Window.UPDATE(1,Text032);
      "Exported Date Time" := CREATEDATETIME(TODAY,TIME);
      MODIFY(TRUE);

      IF GUIALLOWED AND ShowProgress THEN
        Window.UPDATE(1,Text033);
      OutputFile.WRITEMODE(TRUE);
      OutputFile.TEXTMODE(TRUE);
      IF EXISTS(ExportFileName) AND AppendToFile THEN BEGIN
        OutputFile.OPEN(ExportFileName);
        OutputFile.SEEK(OutputFile.LEN);
      END ELSE
        OutputFile.CREATE(ExportFileName);

      CLEAR(ESFileMgt);
      ESFileMgt.SetDelimiters('~"','"~',',');

      IF GUIALLOWED AND ShowProgress THEN
        Window.UPDATE(1,'HEADER');
      Value[1] := ESFileMgt.FormatInteger(0) +'V1';
      Value[2] := 'HEADER';
      Value[3] := Code;
      Value[4] := Description;
      Value[5] := USERID;
      Value[6] := ESFileMgt.FormatDate(TODAY);
      Value[7] := ESFileMgt.FormatTime(TIME);
      OutputFile.WRITE(ESFileMgt.FormatValues(Value,7));

      Value[1] := ESFileMgt.FormatInteger(DATABASE::"ES Recording") + 'V2';
      Value[2] := Code;
      Value[3] := Description;
      Value[4] := "Recorded by User";
      Value[5] := ESFileMgt.FormatDateTime("Start Date Time");
      Value[6] := ESFileMgt.FormatDateTime("End Date Time");
      Value[7] := "File Name";
      Value[8] := ESFileMgt.FormatBoolean("Extend Insert Permissions");
      Value[9] := ESFileMgt.FormatBoolean("Add Related Permissions");
      Value[10] := ESFileMgt.FormatBoolean("Role for Both Clients");
      Value[11] := "SQL Profiler Trace File Name";
      OutputFile.WRITE(ESFileMgt.FormatValues(Value,11));

      TotalRecords := TotalRecords + 1;

      ESRecordingPerm.RESET;
      ESRecordingPerm.SETRANGE("Recording Code",Code);
      IF ESRecordingPerm.FIND('-') THEN
        REPEAT
          Value[1] := ESFileMgt.FormatInteger(DATABASE::"ES Recording Permission") + 'V1';
          Value[2] := ESRecordingPerm."Recording Code";
          Value[3] := ESFileMgt.FormatInteger(ESRecordingPerm."Object Type");
          Value[4] := ESFileMgt.FormatInteger(ESRecordingPerm."Object ID");
          Value[5] := ESFileMgt.FormatBoolean(ESRecordingPerm."Read Required");
          Value[6] := ESFileMgt.FormatBoolean(ESRecordingPerm."Insert Required");
          Value[7] := ESFileMgt.FormatBoolean(ESRecordingPerm."Modify Required");
          Value[8] := ESFileMgt.FormatBoolean(ESRecordingPerm."Delete Required");
          Value[9] := ESFileMgt.FormatBoolean(ESRecordingPerm."Execute Required");
          Value[10] := ESFileMgt.FormatInteger(ESRecordingPerm.Origin);
          Value[11] := ESFileMgt.FormatBoolean(ESRecordingPerm."Do not include Additional");
          Value[12] := ESRecordingPerm."Created By User";
          Value[13] := ESFileMgt.FormatDateTime(ESRecordingPerm."Created Date Time");
          Value[14] := ESFileMgt.FormatBoolean(ESRecordingPerm."Calculate Flowfield Required");
          OutputFile.WRITE(ESFileMgt.FormatValues(Value,14));

          TotalRecords := TotalRecords + 1;
        UNTIL ESRecordingPerm.NEXT = 0;

      IF GUIALLOWED AND ShowProgress THEN
        Window.UPDATE(1,'TOTALS');
      Value[1] := ESFileMgt.FormatInteger(0) + 'V1';
      Value[2] := 'TOTALS';
      Value[3] := Code;
      Value[4] := Description;
      Value[5] := USERID;
      Value[6] := ESFileMgt.FormatDate(TODAY);
      Value[7] := ESFileMgt.FormatTime(TIME);
      Value[8] := ESFileMgt.FormatInteger(TotalRecords);
      OutputFile.WRITE(ESFileMgt.FormatValues(Value,8));

      IF GUIALLOWED AND ShowProgress THEN
        Window.UPDATE(1,Text016);
      OutputFile.CLOSE;

      IF NOT AppendToFile THEN BEGIN
        IF GUIALLOWED AND ShowProgress THEN
          Window.UPDATE(1,Text101);
        FileMgt.DownloadToFile(ExportFileName,LocalFileName);
      END;

      IF GUIALLOWED AND ShowProgress THEN
        Window.CLOSE;

      IF ShowStatus THEN
        MESSAGE(
          Text017,
          Code,LocalFileName,TotalRecords);

      EXIT(TotalRecords);
    END;

    PROCEDURE ImportRecording@1240520013(ShowStatus@1240520011 : Boolean;ImportFileName@1240520015 : Text[250];OverWriteExisting@1240520001 : Boolean);
    VAR
      ESRecording@1240520013 : Record 14123651;
      ESRecording2@1240520002 : Record 14123651;
      ESRecordingPerm@1240520014 : Record 14123652;
      FileMgt@1000 : Codeunit 419;
      ESEnterFileName@1240520009 : Page 14123560;
      InputFile@1240520016 : File;
      Window@1240520012 : Dialog;
      TempText@1240520010 : Text[1000];
      Value@1240520008 : ARRAY [100] OF Text[1000];
      ServerFileName@1001 : Text[1000];
      NextUpdatePos@1240520022 : Integer;
      TotalRecords@1240520023 : Integer;
    BEGIN
      IF ImportFileName = '' THEN BEGIN
        CLEAR(ESEnterFileName);
        ESEnterFileName.LOOKUPMODE(TRUE);
        IF ESEnterFileName.RUNMODAL <> ACTION::LookupOK THEN
          ERROR(Text018);
        ImportFileName := ESEnterFileName.GetFileName;
      END;

      IF ImportFileName = '' THEN
        ERROR(Text019);

      ESSecuritySetup.GET;

      IF GUIALLOWED THEN
        Window.OPEN(
          STRSUBSTNO(ESSecuritySetup.ExtendProgressText(Text020),TABLECAPTION) +
          Text021 + '        @2@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      CLEAR(ESFileMgt);
      ESFileMgt.SetDelimiters('~"','"~',',');

      IF GUIALLOWED THEN
        Window.UPDATE(1,Text022);
      InputFile.WRITEMODE(FALSE);
      InputFile.TEXTMODE(TRUE);
      IF NOT InputFile.OPEN(ImportFileName) THEN BEGIN
        IF GUIALLOWED THEN
          Window.UPDATE(1,Text102);
        ServerFileName := FileMgt.UploadFileSilent(ImportFileName);
        IF GUIALLOWED THEN
          Window.UPDATE(1,Text022);

        IF NOT InputFile.OPEN(ServerFileName) THEN
          InputFile.OPEN(ImportFileName);
      END;
      WHILE InputFile.POS < InputFile.LEN DO BEGIN
        IF NextUpdatePos < InputFile.POS THEN BEGIN
          IF GUIALLOWED THEN
            Window.UPDATE(2,ROUND(10000 * (InputFile.POS / InputFile.LEN),1));
          NextUpdatePos := ROUND(InputFile.POS + InputFile.LEN / 500,1);
        END;

        InputFile.READ(TempText);
        ESFileMgt.SplitInValues(Value,TempText);

        CASE Value[1] OF
          '','0V1':
            ;
          '14123651V1','14123651V2':
            BEGIN
              IF GUIALLOWED THEN
                Window.UPDATE(1,Value[2]);

              ESRecording.INIT;
              ESRecording.Code := Value[2];
              ESRecording.Description := Value[3];
              ESRecording."Recorded by User" := Value[4];
              ESRecording."Start Date Time" := ESFileMgt.EvaluateDateTime(Value[5]);
              ESRecording."End Date Time" := ESFileMgt.EvaluateDateTime(Value[6]);
              ESRecording."File Name" := Value[7];
              ESRecording."Extend Insert Permissions" := ESFileMgt.EvaluateBoolean(Value[8]);
              ESRecording."Add Related Permissions" := ESFileMgt.EvaluateBoolean(Value[9]);
              ESRecording."Role for Both Clients" := ESFileMgt.EvaluateBoolean(Value[10]);
              IF Value[1] > '14123651V1' THEN BEGIN
                ESRecording."SQL Profiler Trace File Name" := Value[11];
              END;
              ESRecording.ChangeDoNotSetDefault(TRUE);

              ESRecording."Imported Date Time" := CREATEDATETIME(TODAY,TIME);
              ESRecording."File Name" := ImportFileName;

              IF OverWriteExisting AND ESRecording2.GET(ESRecording.Code) THEN BEGIN
                ESRecording2.Comment(1,Text009);
                ESRecording2.DELETE;

                ESRecordingPerm.RESET;
                ESRecordingPerm.SETRANGE("Recording Code",ESRecording2.Code);
                ESRecordingPerm.DELETEALL;
              END;

              ESRecording.INSERT(TRUE);

              ESRecording.Comment(1,STRSUBSTNO(Text026,ESRecording.TABLECAPTION));

              TotalRecords := TotalRecords + 1;
            END;
          '14123652V1':
            BEGIN
              ESRecordingPerm.INIT;
              ESRecordingPerm.SetAllowZeroNoQuestion(TRUE,NOT ESSecuritySetup."Detailed Comments");
              ESRecordingPerm."Recording Code" := Value[2];
              ESRecordingPerm."Object Type" := ESFileMgt.EvaluateInteger(Value[3]);
              ESRecordingPerm."Object ID" := ESFileMgt.EvaluateInteger(Value[4]);
              ESRecordingPerm."Read Required" := ESFileMgt.EvaluateBoolean(Value[5]);
              ESRecordingPerm."Insert Required" := ESFileMgt.EvaluateBoolean(Value[6]);
              ESRecordingPerm."Modify Required" := ESFileMgt.EvaluateBoolean(Value[7]);
              ESRecordingPerm."Delete Required" := ESFileMgt.EvaluateBoolean(Value[8]);
              ESRecordingPerm."Execute Required" := ESFileMgt.EvaluateBoolean(Value[9]);
              ESRecordingPerm.Origin := ESFileMgt.EvaluateInteger(Value[10]);
              ESRecordingPerm."Do not include Additional" := ESFileMgt.EvaluateBoolean(Value[11]);
              ESRecordingPerm."Created By User" := Value[12];
              ESRecordingPerm."Created Date Time" := ESFileMgt.EvaluateDateTime(Value[13]);
              ESRecordingPerm."Calculate Flowfield Required" := ESFileMgt.EvaluateBoolean(Value[14]);

              ESRecordingPerm.INSERT(TRUE);

              TotalRecords := TotalRecords + 1;
            END;
          ELSE
            ERROR(Text025,Value[1]);
        END;
      END;

      InputFile.CLOSE;
      IF ServerFileName <> '' THEN
        ERASE(ServerFileName);

      IF GUIALLOWED THEN
        Window.CLOSE;

      IF ShowStatus THEN
        MESSAGE(Text023,TotalRecords,ImportFileName);

      ESSecuritySetup.Comment(
        1,ESRecording.TABLECAPTION + ': ' + STRSUBSTNO(Text023,TotalRecords,ImportFileName));
    END;

    PROCEDURE CountLimitedUserAccess@1240520030();
    VAR
      ESRecordingPerm@1240520001 : Record 14123652;
      ESObjectProperty@1240520002 : Record 14123522;
    BEGIN
      ESObjectProperty.CountAccessClearCount;

      ESRecordingPerm.RESET;
      ESRecordingPerm.SETRANGE("Recording Code",Code);
      ESRecordingPerm.SETRANGE("Object Type",ESRecordingPerm."Object Type"::TableData);
      ESRecordingPerm.SETFILTER("Object ID",'>0');
      IF ESRecordingPerm.FIND('-') THEN
        REPEAT
          ESObjectProperty.CountAccessAddTable(
            ESRecordingPerm."Object ID",
            ESRecordingPerm."Insert Required" OR ESRecordingPerm."Modify Required" OR
            ESRecordingPerm."Delete Required");
        UNTIL ESRecordingPerm.NEXT = 0;

      ESObjectProperty.CountAccessMessage;
    END;

    PROCEDURE UpdateSummaryPermissions@1240520003(ShowStatus@1240520002 : Boolean;ShowProgress@1240520003 : Boolean);
    VAR
      ESRoleBuilderMgt@1240520001 : Codeunit 14123651;
    BEGIN
      ESRoleBuilderMgt.UpdateRecordingSummaryPerm(Rec,TRUE,ShowStatus,ShowProgress);
    END;

    PROCEDURE ChangeDoNotSetDefault@1240520001(NewValue@1240520001 : Boolean);
    BEGIN
      DoNotSetDefault := NewValue;
    END;

    PROCEDURE CreateTextLines@1240520011();
    VAR
      ESRecording@1240520008 : Record 14123651;
      ESPrintRecording@1240520009 : Report 14123651;
    BEGIN
      ESRecording := Rec;
      ESRecording.SETRECFILTER;

      CLEAR(ESPrintRecording);
      ESPrintRecording.SETTABLEVIEW(ESRecording);
      ESPrintRecording.RUN;
    END;

    PROCEDURE FormatAsTextLine@1240520060(VAR ESTextLine@1240520011 : Record 14123520;NoOfRelatedKeyFields@1240520009 : Integer;CalcFlowFields@1240520012 : Boolean;UserDateTimeDetails@1240520013 : Boolean) : Boolean;
    VAR
      ESFormatMgt@1240520014 : Codeunit 14123505;
      RecRef@1240520010 : RecordRef;
    BEGIN
      ESFormatMgt.NewRecord(TABLECAPTION,Code,'','','','','','','','','',1,NoOfRelatedKeyFields);
      ESFormatMgt.AddField(FIELDCAPTION(Description),FORMAT(Description));
      IF "Extend Insert Permissions" THEN
        ESFormatMgt.AddField(
          FIELDCAPTION("Extend Insert Permissions"),FORMAT("Extend Insert Permissions"));
      IF "Add Related Permissions" THEN
        ESFormatMgt.AddField(FIELDCAPTION("Add Related Permissions"),FORMAT("Add Related Permissions"));
      IF "Role for Both Clients" THEN
        ESFormatMgt.AddField(FIELDCAPTION("Role for Both Clients"),FORMAT("Role for Both Clients"));
      ESFormatMgt.AddField(FIELDCAPTION("File Name"),FORMAT("File Name"));

      IF UserDateTimeDetails THEN BEGIN
        ESFormatMgt.AddField(FIELDCAPTION("Recorded by User"),FORMAT("Recorded by User"));
        IF "Start Date Time" <> 0DT THEN
          ESFormatMgt.AddField(FIELDCAPTION("Start Date Time"),FORMAT("Start Date Time"));
        IF "End Date Time" <> 0DT THEN
          ESFormatMgt.AddField(FIELDCAPTION("End Date Time"),FORMAT("End Date Time"));
        IF "Exported Date Time" <> 0DT THEN
          ESFormatMgt.AddField(FIELDCAPTION("Exported Date Time"),FORMAT("Exported Date Time"));
        IF "Imported Date Time" <> 0DT THEN
          ESFormatMgt.AddField(FIELDCAPTION("Imported Date Time"),FORMAT("Imported Date Time"));
      END;

      IF CalcFlowFields THEN BEGIN
        CALCFIELDS("Recording Permissions","Role Recordings","Summary Permissions","Summary Results");

        IF "Recording Permissions" <> 0 THEN
          ESFormatMgt.AddFlowField(
            FIELDCAPTION("Recording Permissions"),FORMAT("Recording Permissions"));
        IF "Role Recordings" <> 0 THEN
          ESFormatMgt.AddFlowField(
            FIELDCAPTION("Role Recordings"),FORMAT("Role Recordings"));
        IF "Summary Permissions" <> 0 THEN
          ESFormatMgt.AddFlowField(
            FIELDCAPTION("Summary Permissions"),FORMAT("Summary Permissions"));
        IF "Summary Results" <> 0 THEN
          ESFormatMgt.AddFlowField(
            FIELDCAPTION("Summary Results"),FORMAT("Summary Results"));
      END;

      RecRef.OPEN(DATABASE::"ES Recording");
      RecRef.GETTABLE(Rec);
      ESFormatMgt.FormatNewESTextLine(ESTextLine,DATABASE::"ES Recording",RecRef.RECORDID);

      EXIT(ESFormatMgt.NoTextOverflow);
    END;

    PROCEDURE Comment@1240520020(FunctionNo@1240520008 : ' ,Insert,Show,Exist,DeleteAll';NewText@1240520010 : Text[250]) : Boolean;
    VAR
      ESComment@1240520009 : Record 14123524;
    BEGIN
      ESComment.RESET;
      ESComment.SETRANGE("Table ID",DATABASE::"ES Recording");
      ESComment.SETRANGE(Code,Code);
      EXIT(ESComment.Functions(FunctionNo,NewText));
    END;

    BEGIN
    END.
  }
}

