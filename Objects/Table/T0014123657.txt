OBJECT Table 14123657 ES Trace Event
{
  OBJECT-PROPERTIES
  {
    Date=09/22/15;
    Time=12:00:00 PM;
    Version List=ES1.41.15;
  }
  PROPERTIES
  {
    CaptionML=ENU=Trace Event;
    LookupPageID=Page14123665;
    DrillDownPageID=Page14123665;
  }
  FIELDS
  {
    { 1   ;   ;Recording Code      ;Code30        ;TableRelation="ES Recording";
                                                   CaptionML=ENU=Recording Code }
    { 2   ;   ;Entry No.           ;Integer       ;CaptionML=ENU=Entry No. }
    { 11  ;   ;Name                ;Text30        ;CaptionML=ENU=Name;
                                                   Editable=No }
    { 12  ;   ;ID                  ;Integer       ;CaptionML=ENU=ID;
                                                   Editable=No }
    { 13  ;   ;TextData            ;Text100       ;OnValidate=VAR
                                                                ESSQLObjectName@1240520001 : Record 14123658;
                                                              BEGIN
                                                                IF TextData <> '' THEN
                                                                  UpdateDetails(ESSQLObjectName);
                                                              END;

                                                   CaptionML=ENU=TextData }
    { 14  ;   ;ClientProcessID     ;Integer       ;CaptionML=ENU=ClientProcessID;
                                                   Editable=No }
    { 15  ;   ;LoginName           ;Text100       ;CaptionML=ENU=LoginName;
                                                   Editable=No }
    { 16  ;   ;ApplicationName     ;Text100       ;CaptionML=ENU=ApplicationName;
                                                   Editable=No }
    { 17  ;   ;SPID                ;Integer       ;CaptionML=ENU=SPID;
                                                   Editable=No }
    { 18  ;   ;NTUserName          ;Text100       ;CaptionML=ENU=NTUserName;
                                                   Editable=No }
    { 19  ;   ;HostName            ;Text100       ;CaptionML=ENU=HostName }
    { 20  ;   ;DatabaseName        ;Text100       ;CaptionML=ENU=DatabaseName }
    { 21  ;   ;TextData Start      ;Text250       ;CaptionML=ENU=TextData Start;
                                                   Editable=No }
    { 22  ;   ;TextData From Statement;Text250    ;CaptionML=ENU=TextData From Statement;
                                                   Editable=No }
    { 25  ;   ;TextData Length     ;Integer       ;CaptionML=ENU=TextData Length;
                                                   Editable=No }
    { 31  ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,SELECT,INSERT,UPDATE,DELETE,Object";
                                                   OptionString=[ ,SELECT,INSERT,UPDATE,DELETE,Object];
                                                   Editable=No }
    { 32  ;   ;Object Type         ;Option        ;CaptionML=ENU=Object Type;
                                                   OptionCaptionML=ENU=TableData,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query,System;
                                                   OptionString=TableData,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query,System;
                                                   Editable=No }
    { 33  ;   ;Object ID           ;Integer       ;TableRelation="ES Object Information"."Object ID" WHERE (Object Type=FIELD(Object Type));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Object ID;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 34  ;   ;Object Caption      ;Text249       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("ES Object Information"."Object Caption" WHERE (Object Type=FIELD(Object Type),
                                                                                                                      Object ID=FIELD(Object ID)));
                                                   CaptionML=ENU=Object Caption;
                                                   Editable=No }
    { 35  ;   ;Read Required       ;Boolean       ;CaptionML=ENU=Read Required;
                                                   Editable=No }
    { 36  ;   ;Insert Required     ;Boolean       ;CaptionML=ENU=Insert Required;
                                                   Editable=No }
    { 37  ;   ;Modify Required     ;Boolean       ;CaptionML=ENU=Modify Required;
                                                   Editable=No }
    { 38  ;   ;Delete Required     ;Boolean       ;CaptionML=ENU=Delete Required;
                                                   Editable=No }
    { 39  ;   ;Execute Required    ;Boolean       ;CaptionML=ENU=Execute Required;
                                                   Editable=No }
    { 40  ;   ;Calculate Flowfield Required;Boolean;
                                                   CaptionML=ENU=Calculate Flowfield Required;
                                                   Editable=No }
    { 41  ;   ;Table Text          ;Text250       ;CaptionML=ENU=Table Text;
                                                   Editable=No }
    { 42  ;   ;Table Name Text     ;Text100       ;CaptionML=ENU=Table Name Text;
                                                   Editable=No }
    { 45  ;   ;Trace not Complete  ;Boolean       ;CaptionML=ENU=Trace not Complete }
    { 46  ;   ;Company Name        ;Text30        ;CaptionML=ENU=Company Name }
    { 47  ;   ;NAV Processing Time ;Integer       ;CaptionML=ENU=NAV Processing Time }
    { 48  ;   ;Reads               ;Decimal       ;CaptionML=ENU=Reads;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 49  ;   ;Writes              ;Decimal       ;CaptionML=ENU=Writes;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 50  ;   ;Duration            ;Decimal       ;CaptionML=ENU=Duration;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 51  ;   ;RowCounts           ;Decimal       ;CaptionML=ENU=RowCounts;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
  }
  KEYS
  {
    {    ;Recording Code,Entry No.                ;Clustered=Yes }
    {    ;Recording Code,ClientProcessID           }
    {    ;Recording Code,SPID,Company Name        ;SumIndexFields=Reads,Writes,Duration,RowCounts }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=r';
      Text002@1240520008 : TextConst 'ENU=R';
      Text003@1240520009 : TextConst 'ENU=I';
      Text004@1240520010 : TextConst 'ENU=M';
      Text005@1240520011 : TextConst 'ENU=D';
      Text006@1240520012 : TextConst 'ENU=E';
      Text007@1002 : TextConst 'ENU=NAV Classic';
      Text008@1003 : TextConst 'ENU=NAV RTC';
      Text009@1004 : TextConst 'ENU=Other';
      Text010@1240520001 : TextConst 'ENU=NAS';
      Text011@1240520002 : TextConst 'ENU=Web Service';

    PROCEDURE UpdateDetails@1240520000(VAR ESSQLObjectName@1240520007 : Record 14123658);
    VAR
      AllObjWithCaption@1240520006 : Record 2000000058;
      ESTraceEvent@1240520008 : Record 14123657;
      TempText@1240520000 : Text[1024];
      TextPart@1240520002 : ARRAY [10] OF Text[1024];
      SearchText@1240520004 : Text[30];
      Pos@1240520001 : Integer;
      PartNo@1240520003 : Integer;
      DBOPartNo@1240520005 : Integer;
      StartTime@1240520009 : Time;
      InsertMissingTable@1240520010 : Boolean;
    BEGIN
      StartTime := TIME;

      IF TextData = '' THEN
        EXIT;

      "Trace not Complete" := FALSE;
      CASE UPPERCASE(COPYSTR(TextData,1,6)) OF
        'SELECT':
          BEGIN
            Type := Type::SELECT;
            IF (UPPERCASE(COPYSTR(TextData,1,10)) = 'SELECT SUM') THEN
              "Calculate Flowfield Required" := TRUE
            ELSE
              "Read Required" := TRUE;

            TempText := "TextData From Statement";
          END;
        'INSERT':
          BEGIN
            Type := Type::INSERT;
            "Read Required" := TRUE;
            "Insert Required" := TRUE;
            IF COPYSTR("TextData Start",1,13) = 'INSERT INTO "' THEN
              TempText := COPYSTR("TextData Start",13);
          END;
        'UPDATE':
          BEGIN
            Type := Type::UPDATE;
            "Read Required" := TRUE;
            "Modify Required" := TRUE;
            IF COPYSTR("TextData Start",1,8) = 'UPDATE "' THEN
              TempText := COPYSTR("TextData Start",8);
          END;
        'DELETE':
          BEGIN
            Type := Type::DELETE;
            "Read Required" := TRUE;
            "Delete Required" := TRUE;
            IF COPYSTR("TextData Start",1,13) = 'DELETE FROM "' THEN
              TempText := COPYSTR("TextData Start",13);
          END;
        ELSE BEGIN
        END;
      END;

      IF TempText <> '' THEN BEGIN
        "Table Text" := COPYSTR(TempText,1,MAXSTRLEN("Table Text"));

        WHILE TempText <> '' DO BEGIN
          PartNo := PartNo + 1;

          CASE COPYSTR(TempText,1,1) OF
            '''':
              BEGIN
                DBOPartNo := PartNo;
                PartNo := PartNo + 1;
                SearchText := '''';
              END;
            '"':
              SearchText := '"';
            '[':
              SearchText := ']';
            ELSE
              SearchText := '';
          END;

          IF SearchText <> '' THEN BEGIN
            TempText := COPYSTR(TempText,2);
            Pos := STRPOS(TempText,SearchText);
            IF Pos < 2 THEN BEGIN
              "Trace not Complete" := TRUE;
              EXIT;
            END;
            TextPart[PartNo] := COPYSTR(TempText,1,Pos - 1);
            IF Pos < STRLEN(TempText) THEN BEGIN
              IF SearchText <> ' ' THEN
                TempText := COPYSTR(TempText,Pos + 1)
              ELSE
                TempText := COPYSTR(TempText,Pos);
            END ELSE
              TempText := '';
          END ELSE BEGIN
            Pos := STRPOS(TempText,'.');
            IF Pos > STRPOS(TempText,' ') THEN
              Pos := STRPOS(TempText,' ');
            IF Pos = 0 THEN BEGIN
              TextPart[PartNo] := TempText;
              TempText := '';
            END ELSE BEGIN
              IF Pos < 2 THEN BEGIN
                "Trace not Complete" := TRUE;
                EXIT;
              END;
              TextPart[PartNo] := COPYSTR(TempText,1,Pos - 1);
              IF Pos < STRLEN(TempText) THEN BEGIN
                TempText := COPYSTR(TempText,Pos);
              END ELSE BEGIN
                "Trace not Complete" := TRUE;
                EXIT;
              END;
            END;
          END;

          IF (COPYSTR(TextPart[PartNo],1,1) = '"') AND
             (COPYSTR(TextPart[PartNo],STRLEN(TextPart[PartNo]),1) = '"')
          THEN
            TextPart[PartNo] := COPYSTR(TextPart[PartNo],2,STRLEN(TextPart[PartNo]) - 2);

          IF TempText <> '' THEN
            IF COPYSTR(TempText,1,1) = '.' THEN BEGIN
              IF STRLEN(TempText) > 1 THEN
                TempText := COPYSTR(TempText,2)
              ELSE
                TempText := '';
            END ELSE
              TempText := '';

          IF LOWERCASE(TextPart[PartNo]) = 'dbo' THEN
            DBOPartNo := PartNo;
        END;
      END;

      IF (DBOPartNo <> 0) AND (DBOPartNo < PartNo) THEN BEGIN
        Pos := STRPOS(TextPart[DBOPartNo + 1],'$');
        IF (Pos > 0) AND (STRPOS(TextPart[DBOPartNo + 1],'$VSIFT$') = Pos) THEN BEGIN
          "Table Name Text" := COPYSTR(TextPart[DBOPartNo + 1],1,Pos - 1);
        END ELSE BEGIN
          IF Pos <> 0 THEN BEGIN
            "Table Name Text" :=
              COPYSTR(COPYSTR(TextPart[DBOPartNo + 1],Pos + 1),1,MAXSTRLEN("Table Name Text"));
            "Company Name" :=
              COPYSTR(COPYSTR(TextPart[DBOPartNo + 1],1,Pos - 1),1,MAXSTRLEN("Company Name"));
            IF (STRLEN("Company Name") > 0) AND (DELCHR("Company Name",'<>') <> "Company Name") THEN
              "Company Name" := CONVERTSTR("Company Name",' ','_');
          END ELSE
            "Table Name Text" := COPYSTR(TextPart[DBOPartNo + 1],1,MAXSTRLEN("Table Name Text"));

          Pos := STRPOS("Table Name Text",'$');
          IF Pos > 0 THEN
            "Table Name Text" := COPYSTR("Table Name Text",1,Pos - 1);
        END;
      END;

      IF "Table Name Text" <> '' THEN BEGIN
        WHILE STRPOS("Table Name Text",'&amp;') > 0 DO BEGIN
          Pos := STRPOS("Table Name Text",'&amp;');
          CASE TRUE OF
            Pos = 1:
              "Table Name Text" := '&' + COPYSTR("Table Name Text",6);
            Pos = STRLEN("Table Name Text"):
              "Table Name Text" :=
                COPYSTR("Table Name Text",1,STRLEN("Table Name Text") - 5) + '&';
            ELSE
              "Table Name Text" :=
                COPYSTR("Table Name Text",1,Pos - 1) + '&' + COPYSTR("Table Name Text",Pos + 5);
          END;
        END;

        IF STRLEN("Table Name Text") > 30 THEN BEGIN
          "Trace not Complete" := TRUE;
          EXIT;
        END;

        IF NOT ESSQLObjectName.GET("Table Name Text") THEN BEGIN
          InsertMissingTable := FALSE;

          AllObjWithCaption.RESET;
          AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::Table);
          TempText := CONVERTSTR("Table Name Text",'_@&|()<>=','?????????');
          AllObjWithCaption.SETFILTER("Object Name",TempText);
          IF AllObjWithCaption.FIND('-') THEN BEGIN
            IF AllObjWithCaption.NEXT = 0 THEN BEGIN
              ESSQLObjectName.INIT;
              ESSQLObjectName."SQL Object Name" := "Table Name Text";
              ESSQLObjectName."Table ID" := AllObjWithCaption."Object ID";
              ESSQLObjectName."Object Name" := AllObjWithCaption."Object Name";
              IF NOT ESSQLObjectName.INSERT THEN
                ESSQLObjectName.MODIFY;

              "Object ID" := AllObjWithCaption."Object ID";
            END ELSE
              InsertMissingTable := TRUE;
          END ELSE
            InsertMissingTable := TRUE;

          IF InsertMissingTable THEN BEGIN
            ESSQLObjectName.INIT;
            ESSQLObjectName."SQL Object Name" := "Table Name Text";
            ESSQLObjectName."Object Not Found" := TRUE;
            ESSQLObjectName.INSERT;
          END;
        END ELSE
          IF ESSQLObjectName."Table ID" > 0 THEN
            "Object ID" := ESSQLObjectName."Table ID";
      END;

      IF ("Object Type" = "Object Type"::TableData) AND ("Object ID" = 2000000001) THEN BEGIN
        IF COPYSTR(TextData,1,28) = 'SELECT "BLOB Reference" FROM' THEN BEGIN
          // Additional reads 'SELECT "timestamp","Type","C','SELECT  "timestamp","Type","']
          ESTraceEvent.RESET;
          ESTraceEvent.SETRANGE("Recording Code","Recording Code");
          ESTraceEvent.SETRANGE(SPID,SPID);
          ESTraceEvent := Rec;
          IF ESTraceEvent.NEXT(-1) <> 0 THEN BEGIN
            IF (COPYSTR(ESTraceEvent.TextData,1,15) = 'exec sp_execute') AND
               (ESTraceEvent."Object ID" = 0)
            THEN BEGIN
              Type := Type::Object;
              ESTraceEvent."Execute Required" := TRUE;

              Pos := STRPOS(ESTraceEvent.TextData,'@0=');
              IF Pos > 15 THEN BEGIN
                TempText := COPYSTR(ESTraceEvent.TextData,Pos + 3);
                Pos := STRPOS(TempText,',');
                IF Pos > 1 THEN BEGIN
                  IF EVALUATE(ESTraceEvent."Object Type",COPYSTR(TempText,1,Pos - 1)) THEN BEGIN
                    TempText := COPYSTR(TempText,Pos + 10);
                    Pos := STRPOS(TempText,',');
                    IF Pos > 1 THEN
                      TempText := COPYSTR(TempText,1,Pos - 1);

                    IF EVALUATE(ESTraceEvent."Object ID",TempText) THEN BEGIN
                      ESTraceEvent."Company Name" := "Company Name";
                      ESTraceEvent.MODIFY;
                    END;
                  END;
                END;
              END ELSE BEGIN
                Pos := STRPOS(ESTraceEvent.TextData,',');
                IF Pos > 15 THEN BEGIN
                  TempText := COPYSTR(ESTraceEvent.TextData,Pos + 1);
                  Pos := STRPOS(TempText,',');
                  IF Pos > 1 THEN BEGIN
                    IF EVALUATE(ESTraceEvent."Object Type",COPYSTR(TempText,1,Pos - 1)) THEN BEGIN
                      TempText := COPYSTR(TempText,Pos + 4);
                      Pos := STRPOS(TempText,',');
                      IF Pos > 1 THEN
                        TempText := COPYSTR(TempText,1,Pos - 1);

                      IF EVALUATE(ESTraceEvent."Object ID",TempText) THEN BEGIN
                        ESTraceEvent."Company Name" := "Company Name";
                        ESTraceEvent.MODIFY;
                      END;
                    END;
                  END;
                END;
              END;
            END ELSE
              IF (COPYSTR(ESTraceEvent.TextData,1,15) = 'declare @p1 int') AND
                 (ESTraceEvent."Object ID" = 0)
              THEN BEGIN
                Type := Type::Object;
                ESTraceEvent."Execute Required" := TRUE;

                Pos := STRPOS(ESTraceEvent."TextData From Statement",'"Company Name"=@P2 AND "ID"=@P3');
                IF Pos > 40 THEN BEGIN
                  TempText := COPYSTR(ESTraceEvent."TextData From Statement",Pos + 33);
                  Pos := STRPOS(TempText,' select @p1');
                  IF Pos > 1 THEN BEGIN
                    TempText := COPYSTR(TempText,1,Pos - 1);
                    Pos := STRPOS(TempText,',');
                    IF Pos > 1 THEN BEGIN
                      IF EVALUATE(ESTraceEvent."Object Type",COPYSTR(TempText,1,Pos - 1)) THEN BEGIN
                        TempText := COPYSTR(TempText,Pos + 4);
                        IF EVALUATE(ESTraceEvent."Object ID",TempText) THEN BEGIN
                          ESTraceEvent."Company Name" := "Company Name";
                          ESTraceEvent.MODIFY;
                        END;
                      END;
                    END;
                  END;
                END;
              END;
          END;
        END;

        IF COPYSTR(TextData,1,22) = 'SELECT TOP 1 NULL FROM' THEN BEGIN
          ESTraceEvent.RESET;
          ESTraceEvent.SETRANGE("Recording Code","Recording Code");
          ESTraceEvent.SETRANGE(SPID,SPID);
          ESTraceEvent := Rec;
          IF ESTraceEvent.NEXT(-1) <> 0 THEN BEGIN
            IF (COPYSTR(ESTraceEvent.TextData,1,15) = 'exec sp_execute') AND
               (ESTraceEvent."Object ID" = 0)
            THEN BEGIN
              Type := Type::Object;
              ESTraceEvent."Execute Required" := TRUE;
              Pos := STRPOS(ESTraceEvent.TextData,',');
              IF Pos > 15 THEN BEGIN
                TempText := COPYSTR(ESTraceEvent.TextData,Pos + 1);
                Pos := STRPOS(TempText,',');
                IF Pos > 1 THEN BEGIN
                  IF EVALUATE(ESTraceEvent."Object Type",COPYSTR(TempText,1,Pos - 1)) THEN BEGIN
                    TempText := COPYSTR(TempText,Pos + 1);
                    Pos := STRPOS(TempText,',');
                    IF Pos > 1 THEN
                      TempText := COPYSTR(TempText,1,Pos - 1);

                    IF EVALUATE(ESTraceEvent."Object ID",TempText) THEN BEGIN
                      ESTraceEvent."Company Name" := "Company Name";
                      ESTraceEvent.MODIFY;
                    END;
                  END;
                END;
              END;
            END;
          END;
        END;
      END;

      IF ("Object Type" = "Object Type"::TableData) AND ("Object ID" = 2000000071) THEN BEGIN
        IF COPYSTR(TextData,1,19) IN
           ['SELECT "User Code" ','SELECT  "timestamp"','SELECT "timestamp",']
        THEN BEGIN
          ESTraceEvent.RESET;
          ESTraceEvent.SETRANGE("Recording Code","Recording Code");
          ESTraceEvent.SETRANGE(SPID,SPID);
          ESTraceEvent := Rec;
          IF ESTraceEvent.NEXT(-1) <> 0 THEN BEGIN
            IF (COPYSTR(ESTraceEvent.TextData,1,15) = 'exec sp_execute') AND
               (ESTraceEvent."Object ID" = 0)
            THEN BEGIN
              Type := Type::Object;
              ESTraceEvent."Execute Required" := TRUE;

              Pos := STRPOS(ESTraceEvent.TextData,'@0=');
              IF Pos > 15 THEN BEGIN
                TempText := COPYSTR(ESTraceEvent.TextData,Pos + 3);
                Pos := STRPOS(TempText,',');
                IF Pos > 1 THEN BEGIN
                  IF EVALUATE(ESTraceEvent."Object Type",COPYSTR(TempText,1,Pos - 1)) THEN BEGIN
                    TempText := COPYSTR(TempText,Pos + 4);
                    IF EVALUATE(ESTraceEvent."Object ID",TempText) THEN BEGIN
                      ESTraceEvent."Company Name" := "Company Name";
                      ESTraceEvent.MODIFY;
                    END;
                  END;
                END;
              END ELSE BEGIN
                Pos := STRPOS(ESTraceEvent.TextData,',');
                IF Pos > 15 THEN BEGIN
                  TempText := COPYSTR(ESTraceEvent.TextData,Pos + 1);
                  Pos := STRPOS(TempText,',');
                  IF Pos > 1 THEN BEGIN
                    IF EVALUATE(ESTraceEvent."Object Type",COPYSTR(TempText,1,Pos - 1)) THEN BEGIN
                      TempText := COPYSTR(TempText,Pos + 1);
                      IF EVALUATE(ESTraceEvent."Object ID",TempText) THEN BEGIN
                        ESTraceEvent."Company Name" := "Company Name";
                        ESTraceEvent.MODIFY;
                      END;
                    END;
                  END;
                END;
              END;
            END;
          END;
        END;
      END;

      IF ("Object Type" = "Object Type"::TableData) AND ("Object ID" = 2000000075) THEN BEGIN
        ESTraceEvent.RESET;
        ESTraceEvent.SETRANGE("Recording Code","Recording Code");
        ESTraceEvent.SETRANGE(SPID,SPID);
        ESTraceEvent := Rec;
        IF ESTraceEvent.NEXT(-1) <> 0 THEN BEGIN
          IF (COPYSTR(ESTraceEvent.TextData,1,15) = 'exec sp_execute') AND
             (ESTraceEvent."Object ID" = 0)
          THEN BEGIN
            ESTraceEvent.Type := ESTraceEvent.Type::Object;
            ESTraceEvent."Execute Required" := TRUE;

            Pos := STRPOS(ESTraceEvent.TextData,'@0=8,@1=');
            IF Pos > 15 THEN BEGIN
              TempText := COPYSTR(ESTraceEvent.TextData,Pos + 8);
              Pos := STRPOS(TempText,',');
              IF Pos = 0 THEN BEGIN
                IF EVALUATE(ESTraceEvent."Object ID",TempText) THEN BEGIN
                  ESTraceEvent."Object Type" := ESTraceEvent."Object Type"::Page;
                  ESTraceEvent."Company Name" := "Company Name";
                  ESTraceEvent.MODIFY;
                END;
              END
            END ELSE BEGIN
              Pos := STRPOS(ESTraceEvent.TextData,',');
              IF Pos > 15 THEN BEGIN
                TempText := COPYSTR(ESTraceEvent.TextData,Pos + 1);
                Pos := STRPOS(TempText,',');
                IF Pos > 1 THEN BEGIN
                  TempText := COPYSTR(TempText,Pos + 1);
                  IF COPYSTR(TempText,1,3) = '@1=' THEN
                    TempText := COPYSTR(TempText,4);
                  Pos := STRPOS(TempText,',');
                  IF Pos > 1 THEN BEGIN
                    IF EVALUATE(ESTraceEvent."Object ID",COPYSTR(TempText,1,Pos - 1)) THEN BEGIN
                      ESTraceEvent."Object Type" := ESTraceEvent."Object Type"::Page;
                      ESTraceEvent."Company Name" := "Company Name";
                      ESTraceEvent.MODIFY;
                    END;
                  END;
                END;
              END;
            END;
          END;
        END;
      END;

      "NAV Processing Time" := TIME - StartTime;
      IF "NAV Processing Time" < 0 THEN
        "NAV Processing Time" := 0;
    END;

    PROCEDURE ClientInformationText@1240520002() : Text[250];
    BEGIN
      EXIT(ClientInformationText2(ApplicationName,"Company Name",LoginName,DatabaseName));
    END;

    PROCEDURE ClientInformationText2@1240520001(CurrentApplicationName@1240520001 : Text[250];CurrentCompanyName@1240520002 : Text[30];CurrentLoginName@1240520003 : Text[250];CurrentDatabaseName@1240520004 : Text[250]) ReturnText : Text[250];
    BEGIN
      CASE TRUE OF
        STRPOS(UPPERCASE(CurrentApplicationName),'NAV CLASSIC CLIENT') > 0,
        STRPOS(UPPERCASE(CurrentApplicationName),'DYNAMICS NAV CLIENT') > 0,
        STRPOS(UPPERCASE(CurrentApplicationName),'NAVISION CLIENT') > 0:
          ReturnText := Text007;
        STRPOS(UPPERCASE(CurrentApplicationName),'NAV RTC') > 0,
        STRPOS(UPPERCASE(CurrentApplicationName),'NAV SERVICE') > 0:
          ReturnText := Text008;
        STRPOS(UPPERCASE(CurrentApplicationName),'APPLICATION SERVER') > 0:
          ReturnText := Text010;
        STRPOS(UPPERCASE(CurrentApplicationName),'NAV WEB') > 0:
          ReturnText := Text011;
        STRPOS(UPPERCASE(CurrentApplicationName),'C/ODBC') > 0:
          ReturnText := 'C/ODBC';
        STRPOS(UPPERCASE(CurrentApplicationName),'C/FRONT') > 0:
          ReturnText := 'C/FRONT';
        ELSE
          ReturnText := Text009;
      END;

      IF CurrentCompanyName = '' THEN
        ReturnText := CurrentDatabaseName + ' ' + CurrentLoginName + ' (' + ReturnText + ')'
      ELSE
        ReturnText :=
          CurrentDatabaseName + ' ' + CurrentLoginName +
          ' (' + ReturnText + ' "' + CurrentCompanyName + '")';
    END;

    PROCEDURE FormatPermissionString@1240520008() PermissionText : Text[30];
    BEGIN
      IF NOT "Read Required" AND NOT "Insert Required" AND NOT "Modify Required" AND
         NOT "Delete Required" AND NOT "Execute Required" AND NOT "Calculate Flowfield Required"
      THEN
        EXIT('');

      IF "Read Required" THEN
        PermissionText := Text002
      ELSE
        IF "Calculate Flowfield Required" THEN
          PermissionText := Text001
        ELSE
          PermissionText := '-';
      IF "Insert Required" THEN
        PermissionText := PermissionText + Text003
      ELSE
        PermissionText := PermissionText + '-';
      IF "Modify Required" THEN
        PermissionText := PermissionText + Text004
      ELSE
        PermissionText := PermissionText + '-';
      IF "Delete Required" THEN
        PermissionText := PermissionText + Text005
      ELSE
        PermissionText := PermissionText + '-';
      IF "Execute Required" THEN
        PermissionText := PermissionText + Text006
      ELSE
        PermissionText := PermissionText + '-';
      EXIT(PermissionText);
    END;

    PROCEDURE ObjectWhereUsed@1240520011();
    VAR
      ESObjectWhereUsed@1240520008 : Page 14123562;
    BEGIN
      CLEAR(ESObjectWhereUsed);
      ESObjectWhereUsed.InitObject("Object Type","Object ID");
      ESObjectWhereUsed.RUN;
    END;

    BEGIN
    END.
  }
}

