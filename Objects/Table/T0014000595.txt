OBJECT Table 14000595 Location Transfer Rule
{
  OBJECT-PROPERTIES
  {
    Date=10/31/16;
    Time=12:00:00 PM;
    Version List=UBP2.96;
  }
  PROPERTIES
  {
    CaptionML=ENU=Location Transfer Rule;
  }
  FIELDS
  {
    { 1   ;   ;From Location       ;Code10        ;TableRelation=Location.Code WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=ENU=From Location }
    { 2   ;   ;To Location         ;Code10        ;TableRelation=Location.Code WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=ENU=To Location }
    { 11  ;   ;Transfer Surplus    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Transfer Surplus" THEN
                                                                  "Transfer Excess" := FALSE;
                                                              END;

                                                   CaptionML=ENU=Transfer Surplus }
    { 12  ;   ;Transfer Excess     ;Boolean       ;OnValidate=BEGIN
                                                                IF "Transfer Excess" THEN
                                                                  "Transfer Surplus" := FALSE;
                                                              END;

                                                   CaptionML=ENU=Transfer Excess }
    { 14  ;   ;From Priority       ;Integer       ;CaptionML=ENU=From Priority }
  }
  KEYS
  {
    {    ;To Location,From Location               ;Clustered=Yes }
    {    ;To Location,From Priority                }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Location@1240030000 : Record 14;
      Location2@1240030001 : Record 14;
      LocTransferRules@1240030002 : Record 14000595;

    PROCEDURE CreateRuleOptions@1240030000();
    BEGIN
      Location.RESET;
      Location.SETRANGE("Enable Adv. Forecasting",TRUE);
      Location2.RESET;
      Location2.SETRANGE("Enable Adv. Forecasting",TRUE);
      IF Location.FIND('-') THEN
        REPEAT
          IF Location2.FIND('-') THEN
            REPEAT
              IF NOT LocTransferRules.GET(Location.Code,Location2.Code) THEN BEGIN
                LocTransferRules.INIT;
                LocTransferRules."To Location" := Location.Code;
                LocTransferRules."From Location" := Location2.Code;
                IF LocTransferRules."From Location" <> LocTransferRules."To Location" THEN
                  LocTransferRules.INSERT;
              END;
            UNTIL Location2.NEXT = 0;
        UNTIL Location.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

