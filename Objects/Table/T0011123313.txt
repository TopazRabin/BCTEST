OBJECT Table 11123313 SC - Webshop
{
  OBJECT-PROPERTIES
  {
    Date=07/01/20;
    Time=12:00:00 AM;
    Modified=Yes;
    Version List=SCW19.2.0,SCW19.2.0;
  }
  PROPERTIES
  {
    OnDelete=VAR
               CatalogFilter@11123302 : Record 11123309;
             BEGIN
               CatalogFilter.SETRANGE(Code,ID);
               CatalogFilter.DELETEALL;
             END;

    CaptionML=ENU=Webshop;
    LookupPageID=Page11123312;
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Code50        ;CaptionML=ENU=ID;
                                                   NotBlank=Yes }
    { 2   ;   ;Template Customer No.;Code20       ;TableRelation=Customer;
                                                   OnValidate=VAR
                                                                Customer@11123303 : Record 18;
                                                                CustomerFunc@11123302 : Codeunit 11123313;
                                                              BEGIN
                                                                IF ("Template Customer No." <> '') THEN BEGIN
                                                                  Customer.GET("Template Customer No.");
                                                                  IF NOT CustomerFunc.TestCustomer(Customer,FALSE) THEN
                                                                    ERROR(Text11123302);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Template Customer No. }
    { 3   ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   CaptionML=ENU=Payment Method Code }
    { 4   ;   ;Shipping Cost No.   ;Code20        ;TableRelation=IF (Shipping Cost Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Shipping Cost Type=CONST(Item)) Item
                                                                 ELSE IF (Shipping Cost Type=CONST(Resource)) Resource
                                                                 ELSE IF (Shipping Cost Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Shipping Cost Type=CONST("Charge (Item)")) "Item Charge";
                                                   OnValidate=BEGIN
                                                                ValidateCostNo("Shipping Cost Type","Shipping Cost No.");
                                                              END;

                                                   CaptionML=ENU=Shipping Cost No. }
    { 5   ;   ;Shipping Cost Type  ;Option        ;OnValidate=BEGIN
                                                                IF xRec."Shipping Cost Type" <> Rec."Shipping Cost Type" THEN
                                                                  "Shipping Cost No." := '';
                                                              END;

                                                   CaptionML=ENU=Shipping Cost Type;
                                                   OptionCaptionML=ENU=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)";
                                                   OptionString=[ ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)] }
    { 6   ;   ;Payment Cost No.    ;Code20        ;TableRelation=IF (Payment Cost Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Payment Cost Type=CONST(Item)) Item
                                                                 ELSE IF (Payment Cost Type=CONST(Resource)) Resource
                                                                 ELSE IF (Payment Cost Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Payment Cost Type=CONST("Charge (Item)")) "Item Charge";
                                                   OnValidate=BEGIN
                                                                ValidateCostNo("Payment Cost Type","Payment Cost No.");
                                                              END;

                                                   CaptionML=ENU=Payment Cost No. }
    { 7   ;   ;Payment Cost Type   ;Option        ;OnValidate=BEGIN
                                                                IF xRec."Payment Cost Type" <> Rec."Payment Cost Type" THEN
                                                                  "Payment Cost No." := '';
                                                              END;

                                                   CaptionML=ENU=Payment Cost Type;
                                                   OptionCaptionML=ENU=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)";
                                                   OptionString=[ ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)] }
    { 8   ;   ;Quote Nos.          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Quote Nos. }
    { 9   ;   ;Order Nos.          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Order Nos. }
    { 10  ;   ;Location Code Source;Option        ;OnValidate=BEGIN
                                                                IF "Location Code Source" <> xRec."Location Code Source" THEN
                                                                  IF "Location Code Source" = "Location Code Source"::Customer THEN
                                                                    VALIDATE("Location Code",'');
                                                              END;

                                                   CaptionML=ENU=Location Code Source;
                                                   OptionCaptionML=ENU=Customer,Webshop;
                                                   OptionString=Customer,Webshop }
    { 11  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=ENU=Location Code }
    { 12  ;   ;Inventory Calculation;Option       ;OnValidate=BEGIN
                                                                IF "Inventory Calculation" <> xRec."Inventory Calculation" THEN
                                                                  IF "Inventory Calculation" = xRec."Inventory Calculation"::"Projected Available Balance" THEN BEGIN
                                                                    IF FORMAT("Projected Date Calculation") = '' THEN
                                                                      EVALUATE("Projected Date Calculation",'<1M>');
                                                                  END ELSE BEGIN
                                                                    IF FORMAT("Projected Date Calculation") <> '' THEN
                                                                      EVALUATE("Projected Date Calculation",'');
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Inventory Calculation;
                                                   OptionCaptionML=ENU=Inventory - Qty. on Sales Orders,Projected Available Balance;
                                                   OptionString=Inventory - Qty. on Sales Orders,Projected Available Balance }
    { 13  ;   ;Projected Date Calculation;DateFormula;
                                                   CaptionML=ENU=Projected Date Calculation }
    { 14  ;   ;Quote Promotable    ;Boolean        }
    { 15  ;   ;Order Type          ;Option        ;OnValidate=BEGIN
                                                                CheckOrderType;
                                                              END;

                                                   OptionString=Order,Quote }
    { 16  ;   ;Synchronized Basket Type;Option    ;OnValidate=BEGIN
                                                                CheckOrderType;
                                                              END;

                                                   OptionString=Order,Quote }
    { 17  ;   ;Sorting Option      ;Option        ;OptionString=Counts,Revenue }
    { 18  ;   ;Lookback Years      ;Integer       ;MinValue=0 }
    { 19  ;   ;Day Range           ;Integer       ;MinValue=0 }
    { 21  ;   ;Exclude BOM Comp.   ;Boolean       ;CaptionML=ENU=Exclude BOM Comp. }
    { 22  ;   ;Exclude Tax Percent ;Boolean       ;CaptionML=ENU=Exclude Tax Percent }
    { 23  ;   ;Obsolete Field 23   ;Boolean       ;Description=Temp. Basket Calculation }
    { 24  ;   ;Enable Document Downloads;Boolean   }
    { 25  ;   ;Enable Product Attachment;Boolean  ;CaptionML=ENU=Enable Product Attachment Downloads }
    { 26  ;   ;Enable Document Attachment;Boolean ;CaptionML=ENU=Enable Document Attachment Downloads }
    { 27  ;   ;Guest Nos.          ;Code10        ;TableRelation="No. Series" }
    { 30  ;   ;Journal Template Name;Code10       ;TableRelation="Gen. Journal Template";
                                                   OnValidate=BEGIN
                                                                IF "Journal Template Name" <> xRec."Journal Template Name" THEN
                                                                  "Journal Batch Name" := '';
                                                              END;
                                                               }
    { 31  ;   ;Journal Batch Name  ;Code10        ;TableRelation="Gen. Journal Batch".Name WHERE (Journal Template Name=FIELD(Journal Template Name)) }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text11123302@11123302 : TextConst 'ENU=This customer can''t be used as Template Customer. It might be blocked or not all required fields are filled.';

    LOCAL PROCEDURE ValidateCostNo@11123302(CostType@11123302 : ' ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)';CostNo@11123303 : Code[20]);
    VAR
      GLAccount@11123304 : Record 15;
      Item@11123305 : Record 27;
      Resource@11123307 : Record 156;
      FixedAsset@11123309 : Record 5600;
    BEGIN
      CASE CostType OF
        CostType::"G/L Account" :
          IF GLAccount.GET(CostNo) THEN BEGIN
            GLAccount.TESTFIELD("Account Type",GLAccount."Account Type"::Posting);
            GLAccount.TESTFIELD("Direct Posting",TRUE);
          END;
       CostType::Item :
          IF Item.GET(CostNo) THEN
            Item.TESTFIELD(Blocked,TRUE);//EB TPZ2785
            //Item.TESTFIELD(Blocked,Item.Blocked::"3");//EB
        CostType::Resource :
          IF Resource.GET(CostNo) THEN
            Resource.TESTFIELD(Blocked,FALSE);
        CostType::"Fixed Asset" :
          IF FixedAsset.GET(CostNo) THEN
              FixedAsset.TESTFIELD(Blocked,FALSE);
      END;
    END;

    PROCEDURE GetFilterIndicator@11123303(Name@11123302 : Text[1024]) : Text[1024];
    VAR
      WebshopFilter@11123303 : Record 11123309;
      tempFilters@11123304 : Text[1024];
      filters@11123305 : Text[1024];
    BEGIN
      WITH WebshopFilter DO BEGIN
        RESET;
        SETRANGE(Code,Name);
        IF FINDSET THEN BEGIN
          REPEAT
            tempFilters := STRSUBSTNO('Table:%1 Field:%2 FILTER(%3), ',"Table Name","Field Name",Filter);
            IF STRLEN(tempFilters + filters) > 1024 THEN BEGIN
              filters := COPYSTR(filters + tempFilters, 1, 1020) + '...';
              EXIT(filters);
            END ELSE
             filters += tempFilters;
          UNTIL NEXT = 0;
          filters := COPYSTR(filters,1,STRLEN(filters) - 2);
        END;

        EXIT(filters);
      END;
    END;

    PROCEDURE OpenCatalogFilters@11123304();
    VAR
      CatalogFilter@11123302 : Record 11123309;
      CatalogFilters@11123303 : Page 11123309;
    BEGIN
      CatalogFilter.FILTERGROUP(2);
      CatalogFilter.SETRANGE(Code,ID);
      CatalogFilter.FILTERGROUP(0);

      CLEAR(CatalogFilters);
      CatalogFilters.SETTABLEVIEW(CatalogFilter);
      CatalogFilters.RUNMODAL;
    END;

    PROCEDURE LSRetailConnectorAvailable@11123305() : Boolean;
    VAR
      Object@11123302 : Record 2000000001;
    BEGIN
      EXIT(Object.GET(Object.Type::Table,'',11123350));
    END;

    PROCEDURE OpenLSRetailSetup@11123306();
    VAR
      TempOperation@11123302 : TEMPORARY Record 11123302;
      TempParams@11123303 : TEMPORARY Record 11123310;
      Context@11123304 : Codeunit 11123305;
    BEGIN
      IF LSRetailConnectorAvailable THEN BEGIN
        Rec.TESTFIELD(ID);

        TempOperation.INIT;
        TempOperation.VALIDATE("Operation Name",'OpenLSSetupForm');
        TempOperation.INSERT;

        TempParams.InitializeEmptyParams;
        TempParams.WebsiteId := ID;
        TempParams.MODIFY;

        Context.SetParams(TempParams);
        CODEUNIT.RUN(11123350,TempOperation);
      END;
    END;

    PROCEDURE CheckOrderType@11123312();
    BEGIN
      IF "Order Type" = "Order Type"::Quote THEN
        "Synchronized Basket Type" := "Synchronized Basket Type"::Quote;
    END;

    PROCEDURE TempBasketCalcAvailable@11123307() : Boolean;
    VAR
      Context@11123303 : Codeunit 11123305;
    BEGIN
      EXIT(NOT Context.IsNorthAmericaLocalization);
    END;

    PROCEDURE LookUpGeneralJournalBatch@11123308(CurrentJournalTemplateName@11123303 : Code[10]) : Text[10];
    VAR
      GenJournalBatch@11123302 : Record 232;
    BEGIN
      GenJournalBatch.SETRANGE("Journal Template Name",CurrentJournalTemplateName);
      IF PAGE.RUNMODAL(PAGE::"General Journal Batches",GenJournalBatch) = ACTION::LookupOK THEN
        EXIT(GenJournalBatch.Name);
    END;

    BEGIN
    {
      TPZ2785 05112020 GGUPTA Remove Item blocking Topaz Customization
    }
    END.
  }
}

