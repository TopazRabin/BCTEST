OBJECT Table 14002863 Outbound Whse. Request Filter
{
  OBJECT-PROPERTIES
  {
    Date=09/18/20;
    Time=[ 8:55:09 AM];
    Modified=Yes;
    Version List=RF1.50.13;
  }
  PROPERTIES
  {
    OnDelete=VAR
               RFSetup@1240020000 : Record 14002801;
             BEGIN
               RFSetup.RESET;
               IF RFSetup.GET('') THEN
                 IF RFSetup."Default Outbound WhseReqFilter" = Code THEN BEGIN
                   RFSetup."Default Outbound WhseReqFilter" := '';
                   RFSetup.MODIFY(TRUE);
                 END;
             END;

    CaptionML=ENU=Outbound Whse. Request Filter;
    LookupPageID=Page14002861;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 11  ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 12  ;   ;Sorting Method for Act. Lines;Option;
                                                   CaptionML=ENU=Sorting Method for Act. Lines;
                                                   OptionCaptionML=ENU=" ,Item,Document,Shelf or Bin,Due Date,Destination,Bin Ranking,Action Type,,,,,,,,,,,Bin Sorting";
                                                   OptionString=[ ,Item,Document,Shelf or Bin,Due Date,Destination,Bin Ranking,Action Type,,,,,,,,,,,Bin Sorting] }
    { 13  ;   ;Print Document      ;Boolean       ;CaptionML=ENU=Print Document }
    { 14  ;   ;Shipping Advice Handling;Option    ;CaptionML=ENU=Shipping Advice Handling;
                                                   OptionCaptionML=ENU=" ,Use Shipping Advice,Partial on Complete,All Available";
                                                   OptionString=[ ,Use Shipping Advice,Partial on Complete,All Available] }
    { 15  ;   ;Set Breakbulk Filter;Boolean       ;CaptionML=ENU=Set Breakbulk Filter }
    { 16  ;   ;Do Not Fill Qty. to Handle;Boolean ;CaptionML=ENU=Do Not Fill Qty. to Handle }
    { 17  ;   ;Per Zone            ;Boolean       ;CaptionML=ENU=Per Zone }
    { 18  ;   ;Only Pick from Wave Pick Bin;Boolean;
                                                   CaptionML=ENU=Only Pick from Wave Pick Bin }
    { 19  ;   ;No. of Picks to create;Integer     ;CaptionML=ENU=No. of Picks to create }
    { 20  ;   ;Location Code       ;Code10        ;TableRelation=Location.Code;
                                                   CaptionML=ENU=Location Code }
    { 21  ;   ;Pick-from Zone Filter;Code250      ;TableRelation=Zone.Code WHERE (Location Code=FIELD(Location Code));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Pick-from Zone Filter }
    { 22  ;   ;Pick-from Bin Filter;Code250       ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Pick-from Bin Filter }
    { 23  ;   ;Line Date From Filter;DateFormula  ;OnValidate=BEGIN
                                                                "Line Date Filter" := GetDateFilter(WORKDATE);
                                                              END;

                                                   CaptionML=ENU=Line Date From Filter }
    { 24  ;   ;Line Date To Filter ;DateFormula   ;OnValidate=BEGIN
                                                                "Line Date Filter" := GetDateFilter(WORKDATE);
                                                              END;

                                                   CaptionML=ENU=Line Date To Filter }
    { 25  ;   ;Line Date Filter    ;Code250       ;CaptionML=ENU=Line Date Filter;
                                                   Editable=No }
    { 26  ;   ;Warehouse Activity Group Size;Integer;
                                                   CaptionML=ENU=Warehouse Activity Group Size }
    { 27  ;   ;Combine Picks Whse. Act. Group;Boolean;
                                                   CaptionML=ENU=Combine Picks Whse. Act. Group }
    { 28  ;   ;Combine Shipments WhseActGroup;Boolean;
                                                   CaptionML=ENU=Combine Shipments WhseActGroup }
    { 29  ;   ;Minimum Avail. Amount;Decimal      ;CaptionML=ENU=Minimum Avail. Amount;
                                                   DecimalPlaces=2:2;
                                                   MinValue=0 }
    { 30  ;   ;Maximum Avail. Amount;Decimal      ;CaptionML=ENU=Maximum Avail. Amount;
                                                   DecimalPlaces=2:2;
                                                   MinValue=0 }
    { 31  ;   ;Minimum Avail. Net Weight;Decimal  ;CaptionML=ENU=Minimum Avail. Net Weight;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 32  ;   ;Maximum Avail. Net Weight;Decimal  ;CaptionML=ENU=Maximum Avail. Net Weight;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 33  ;   ;Minimum Avail. Gross Weight;Decimal;CaptionML=ENU=Minimum Avail. Gross Weight;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 34  ;   ;Maximum Avail. Gross Weight;Decimal;CaptionML=ENU=Maximum Avail. Gross Weight;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 35  ;   ;Minimum Avail. Volume;Decimal      ;CaptionML=ENU=Minimum Avail. Volume;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 36  ;   ;Maximum Avail. Volume;Decimal      ;CaptionML=ENU=Maximum Avail. Volume;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 37  ;   ;Minimum Outst. No. of Lines;Integer;CaptionML=ENU=Minimum Outst. No. of Lines;
                                                   MinValue=0 }
    { 38  ;   ;Maximum Outst. No. of Lines;Integer;CaptionML=ENU=Maximum Outst. No. of Lines;
                                                   MinValue=0 }
    { 39  ;   ;Minimum Avail. Qty. (Base);Decimal ;CaptionML=ENU=Minimum Avail. Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 40  ;   ;Maximum Avail. Qty. (Base);Decimal ;CaptionML=ENU=Maximum Avail. Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 51  ;   ;Source Type Filter  ;Integer       ;CaptionML=ENU=Source Type Filter }
    { 52  ;   ;Document Status Filter;Option      ;CaptionML=ENU=Document Status Filter;
                                                   OptionString=All,Open,Released }
    { 53  ;   ;Shipment Method Code Filter;Code250;TableRelation="Shipment Method";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Shipment Method Code Filter }
    { 54  ;   ;Shipping Agent Code Filter;Code250 ;TableRelation="Shipping Agent";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Shipping Agent Code Filter }
    { 55  ;   ;Shipping Advice Filter;Option      ;CaptionML=ENU=Shipping Advice Filter;
                                                   OptionString=All,Partial,Complete }
    { 57  ;   ;Destination No. Filter;Code250     ;CaptionML=ENU=Destination No. Filter }
    { 58  ;   ;Action Code Filter  ;Code250       ;CaptionML=ENU=Action Code Filter }
    { 59  ;   ;Action Responsible Filter;Code250  ;CaptionML=ENU=Action Responsible Filter }
    { 61  ;   ;Shipment Date Filter;Code250       ;CaptionML=ENU=Shipment Date Filter }
    { 62  ;   ;From Shipment Date Filter;DateFormula;
                                                   OnValidate=BEGIN
                                                                "Shipment Date Filter" := GetShipmentDateFilter(WORKDATE);
                                                              END;

                                                   CaptionML=ENU=From Shipment Date Filter }
    { 63  ;   ;To Shipment Date Filter;DateFormula;OnValidate=BEGIN
                                                                "Shipment Date Filter" := GetShipmentDateFilter(WORKDATE);
                                                              END;

                                                   CaptionML=ENU=To Shipment Date Filter }
    { 65  ;   ;ATO Pick Required Filter;Option    ;CaptionML=ENU=ATO Pick Required Filter;
                                                   OptionString=All,ATO Orders Only,No ATO Orders }
    { 70  ;   ;Destination Ship Bin;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=VAR
                                                                Bin@1240020000 : Record 7354;
                                                              BEGIN
                                                                Bin.SETRANGE(Code,"Destination Ship Bin");
                                                                IF "Location Code" <> '' THEN
                                                                  Bin.SETRANGE("Location Code","Location Code");
                                                                IF NOT Bin.FIND('-') THEN
                                                                  ERROR(STRSUBSTNO(Text002,"Destination Ship Bin"));
                                                              END;

                                                   CaptionML=ENU=Destination Ship Bin }
    { 100 ;   ;Wave Pick Check Cust Blocked;Boolean;
                                                   InitValue=Yes;
                                                   CaptionML=ENU=Wave Pick Check Cust Blocked }
    { 101 ;   ;E-Ship Agent Service Filter;Code250;CaptionML=ENU=E-Ship Agent Service Filter }
    { 103 ;   ;EDI Order Filter    ;Option        ;CaptionML=ENU=EDI Order Filter;
                                                   OptionString=All,EDI Only,No EDI Orders }
    { 50000;  ;Location Filter     ;Code250       ;DataClassification=ToBeClassified;
                                                   Description=TM 071715 }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1240030000 : TextConst 'ENU=must be less than %1.';
      Text002@1240020000 : TextConst 'ENU=Bin %1 not found.';

    [External]
    PROCEDURE GetDateFilter@1240030000(CurrentDate@1240030000 : Date) : Text[250];
    VAR
      GLEntry@1240030003 : Record 17;
      FromDate@1240030001 : Date;
      ToDate@1240030002 : Date;
    BEGIN
      IF FORMAT("Line Date From Filter") <> '' THEN
        FromDate := CALCDATE("Line Date From Filter",CurrentDate);
      IF FORMAT("Line Date To Filter") <> '' THEN
        ToDate := CALCDATE("Line Date To Filter",CurrentDate);

      CASE TRUE OF
        (FromDate <> 0D) AND (ToDate <> 0D):
          GLEntry.SETFILTER("Posting Date",'%1..%2',FromDate,ToDate);
        FromDate <> 0D:
          GLEntry.SETFILTER("Posting Date",'%1..',FromDate);
        ToDate <> 0D:
          GLEntry.SETFILTER("Posting Date",'..%2',ToDate);
        ELSE
          GLEntry.SETRANGE("Posting Date");
      END;

      EXIT(GLEntry.GETFILTER("Posting Date"));
    END;

    [External]
    PROCEDURE CheckWithinLimits@1240030001(RFStatEntryTotal@1240030000 : Record 14002804) : Boolean;
    BEGIN
      CheckLimits;

      IF "Minimum Avail. Amount" <> 0 THEN
        IF "Minimum Avail. Amount" > RFStatEntryTotal."Available Amount" THEN
          EXIT(FALSE);
      IF "Maximum Avail. Amount" <> 0 THEN
        IF "Maximum Avail. Amount" < RFStatEntryTotal."Available Amount" THEN
          EXIT(FALSE);

      IF "Minimum Avail. Net Weight" <> 0 THEN
        IF "Minimum Avail. Net Weight" > RFStatEntryTotal."Available Net Weight" THEN
          EXIT(FALSE);
      IF "Maximum Avail. Net Weight" <> 0 THEN
        IF "Maximum Avail. Net Weight" < RFStatEntryTotal."Available Net Weight" THEN
          EXIT(FALSE);

      IF "Minimum Avail. Gross Weight" <> 0 THEN
        IF "Minimum Avail. Gross Weight" > RFStatEntryTotal."Available Gross Weight" THEN
          EXIT(FALSE);
      IF "Maximum Avail. Gross Weight" <> 0 THEN
        IF "Maximum Avail. Gross Weight" < RFStatEntryTotal."Available Gross Weight" THEN
          EXIT(FALSE);

      IF "Minimum Avail. Volume" <> 0 THEN
        IF "Minimum Avail. Volume" > RFStatEntryTotal."Available Volume" THEN
          EXIT(FALSE);
      IF "Maximum Avail. Volume" <> 0 THEN
        IF "Maximum Avail. Volume" < RFStatEntryTotal."Available Volume" THEN
          EXIT(FALSE);

      IF "Minimum Outst. No. of Lines" <> 0 THEN
        IF "Minimum Outst. No. of Lines" > RFStatEntryTotal."Outstanding No. of Lines" THEN
          EXIT(FALSE);
      IF "Maximum Outst. No. of Lines" <> 0 THEN
        IF "Maximum Outst. No. of Lines" < RFStatEntryTotal."Outstanding No. of Lines" THEN
          EXIT(FALSE);

      IF "Minimum Avail. Qty. (Base)" <> 0 THEN
        IF "Minimum Avail. Qty. (Base)" > RFStatEntryTotal."Available Qty. (Base)" THEN
          EXIT(FALSE);
      IF "Maximum Avail. Qty. (Base)" <> 0 THEN
        IF "Maximum Avail. Qty. (Base)" < RFStatEntryTotal."Available Qty. (Base)" THEN
          EXIT(FALSE);

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE CheckLimits@1240030002();
    BEGIN
      IF ("Minimum Avail. Amount" <> 0) AND ("Maximum Avail. Amount" <> 0) AND
         ("Minimum Avail. Amount" > "Maximum Avail. Amount")
      THEN
        FIELDERROR("Minimum Avail. Amount",STRSUBSTNO(Text001,"Maximum Avail. Amount"));

      IF ("Minimum Avail. Net Weight" <> 0) AND ("Maximum Avail. Net Weight" <> 0) AND
         ("Minimum Avail. Net Weight" > "Maximum Avail. Net Weight")
      THEN
        FIELDERROR("Minimum Avail. Net Weight",STRSUBSTNO(Text001,"Maximum Avail. Net Weight"));

      IF ("Minimum Avail. Gross Weight" <> 0) AND ("Maximum Avail. Gross Weight" <> 0) AND
         ("Minimum Avail. Gross Weight" > "Maximum Avail. Gross Weight")
      THEN
        FIELDERROR("Minimum Avail. Gross Weight",STRSUBSTNO(Text001,"Maximum Avail. Gross Weight"));

      IF ("Minimum Avail. Volume" <> 0) AND ("Maximum Avail. Volume" <> 0) AND
         ("Minimum Avail. Volume" > "Maximum Avail. Volume")
      THEN
        FIELDERROR("Minimum Avail. Volume",STRSUBSTNO(Text001,"Maximum Avail. Volume"));

      IF ("Minimum Outst. No. of Lines" <> 0) AND ("Maximum Outst. No. of Lines" <> 0) AND
         ("Minimum Outst. No. of Lines" > "Maximum Outst. No. of Lines")
      THEN
        FIELDERROR("Minimum Outst. No. of Lines",STRSUBSTNO(Text001,"Maximum Outst. No. of Lines"));

      IF ("Minimum Avail. Qty. (Base)" <> 0) AND ("Maximum Avail. Qty. (Base)" <> 0) AND
         ("Minimum Avail. Qty. (Base)" > "Maximum Avail. Qty. (Base)")
      THEN
        FIELDERROR("Minimum Avail. Qty. (Base)",STRSUBSTNO(Text001,"Maximum Avail. Qty. (Base)"));
    END;

    [External]
    PROCEDURE GetOutboundWhseRequestFilter@1240040000(RFSetup@1240040000 : Record 14002801;RFEmployeeSetup@1240040001 : Record 14002802);
    BEGIN
      IF RFEmployeeSetup."Outbound Whse.Req. Filter Code" = '' THEN BEGIN
        IF RFSetup."Default Outbound WhseReqFilter" <> '' THEN
          GET(RFSetup."Default Outbound WhseReqFilter")
        ELSE
          INIT;
      END ELSE
        GET(RFEmployeeSetup."Outbound Whse.Req. Filter Code");
    END;

    [External]
    PROCEDURE GetShipmentDateFilter@1240020000(CurrentDate@1240020000 : Date) : Text[250];
    VAR
      GLEntry@1240030003 : Record 17;
      FromDate@1240030001 : Date;
      ToDate@1240030002 : Date;
    BEGIN
      IF FORMAT("From Shipment Date Filter") <> '' THEN
        FromDate := CALCDATE("From Shipment Date Filter",CurrentDate);
      IF FORMAT("To Shipment Date Filter") <> '' THEN
        ToDate := CALCDATE("To Shipment Date Filter",CurrentDate);

      CASE TRUE OF
        (FromDate <> 0D) AND (ToDate <> 0D):
          GLEntry.SETFILTER("Posting Date",'%1..%2',FromDate,ToDate);
        FromDate <> 0D:
          GLEntry.SETFILTER("Posting Date",'%1..',FromDate);
        ToDate <> 0D:
          GLEntry.SETFILTER("Posting Date",'..%2',ToDate);
        ELSE
          GLEntry.SETRANGE("Posting Date");
      END;

      EXIT(GLEntry.GETFILTER("Posting Date"));
    END;

    BEGIN
    END.
  }
}

