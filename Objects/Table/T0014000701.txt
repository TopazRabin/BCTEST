OBJECT Table 14000701 Package
{
  OBJECT-PROPERTIES
  {
    Date=02/25/19;
    Time=12:00:00 PM;
    Version List=SE0.61;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 GetShippingSetup;
                 IF ShippingNumbering.GET(
                      DATABASE::"Shipping Setup",ShippingSetup."Primary Key",
                      ShippingSetup.FIELDNO("Last Package No."))
                 THEN BEGIN
                   ShippingNumbering.GetNextNumber;
                   "No." := ShippingNumbering."Last No. Used";
                 END ELSE BEGIN
                   ShippingSetup.TESTFIELD(ShippingSetup."Package Nos.");
                   NoSeriesMgt.InitSeries(ShippingSetup."Package Nos.",xRec."No. Series",0D,"No.","No. Series");
                 END;

                 IF Description = '' THEN BEGIN
                   GetPackingStation;
                   Description := PackingStation."Default Package Description";
                 END;
               END;

               IF (GETFILTER("Source Type") <> '') AND (GETFILTER("Source Subtype") <> '') AND
                  (GETFILTER("Source ID") <> '')
               THEN BEGIN
                 EVALUATE("Source Type",GETFILTER("Source Type"));
                 EVALUATE("Source Subtype",GETFILTER("Source Subtype"));
                 "Source ID" := GETFILTER("Source ID");
               END;

               "External Tracking No." := '';

               LOCKTABLE;

               IF ("Source Type" <> 0) AND ("Source ID" <> '') THEN BEGIN
                 PackingControl.TransferFromSource("Source Type","Source Subtype","Source ID");

                 TransferFromPackingControl(PackingControl);
               END;

               IF "Shipping Agent Code" <> '' THEN BEGIN
                 GetShippingAgent;
                 IF "Shipping Agent Service" <> '' THEN
                   VALIDATE("Shipping Agent Service");
                 ShipperTypeMgt.PackageInsertOptionPage(Rec,ShippingAgent."Shipper Type");
               END ELSE
                 ShippingAgent.INIT;

               GetShippingSetup;
               IF ShippingSetup."Location Packing" THEN BEGIN
                 GetPackingStation;
                 "Location Code" := PackingStation."Location Code";
               END;

               IF "Package No." = 0 THEN
                 "Package No." := 1;
               IF "Total Packages" = 0 THEN
                 "Total Packages" := 1;
               "Creation Time" := TIME;
               GetPackingStation;
               IF PackingStation."Ship-from Country Code" = 'CA' THEN
                 "Shipping Origin Canada" := TRUE;
             END;

    OnModify=BEGIN
               TESTFIELD(Closed,FALSE);
             END;

    OnDelete=BEGIN
               TESTFIELD(Closed,FALSE);

               LOCKTABLE;

               IF "Shipping Agent Code" <> '' THEN
                 GetShippingAgent
               ELSE
                 ShippingAgent.INIT;
               ShipperTypeMgt.PackageDeleteOptionPage(Rec,ShippingAgent."Shipper Type");

               PackageLine.RESET;
               PackageLine.SETRANGE("Package No.","No.");
               PackageLine.DELETEALL;

               PackageSummaryLine.RESET;
               PackageSummaryLine.SETRANGE("Package No.","No.");
               PackageSummaryLine.DELETEALL;

               // Package Labels are not deleted by Purpose
             END;

    OnRename=BEGIN
               ERROR(Text001);
             END;

    CaptionML=ENU=Package;
    LookupPageID=Page14000711;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=ENU=No. }
    { 11  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 12  ;   ;Closed              ;Boolean       ;CaptionML=ENU=Closed;
                                                   Editable=No }
    { 13  ;   ;Closed by Packing Station Code;Code10;
                                                   TableRelation="Packing Station";
                                                   CaptionML=ENU=Closed by Packing Station Code;
                                                   Editable=No }
    { 14  ;   ;Manual Shipment     ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Closed,FALSE);
                                                              END;

                                                   CaptionML=ENU=Manual Shipment }
    { 16  ;   ;Expected Delivery Date;Date        ;CaptionML=ENU=Expected Delivery Date }
    { 17  ;   ;Packing Date        ;Date          ;CaptionML=ENU=Packing Date }
    { 18  ;   ;Pickup Date         ;Date          ;CaptionML=ENU=Pickup Date }
    { 19  ;   ;Exist in Other Package;Boolean     ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Package Line" WHERE (Type=CONST(Package),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=ENU=Exist in Other Package;
                                                   Editable=No }
    { 20  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Shipping Comment Line" WHERE (Table ID=CONST(14000701),
                                                                                                    Code=FIELD(No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 22  ;   ;Scale Weight        ;Decimal       ;CaptionML=ENU=Scale Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 23  ;   ;Calculation Weight (LBS);Decimal   ;OnValidate=BEGIN
                                                                GetShippingSetup;
                                                                IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::KGS THEN
                                                                  "Calculation Weight" := ShippingSetup.PoundToKilo("Calculation Weight (LBS)")
                                                                ELSE
                                                                  "Calculation Weight" := "Calculation Weight (LBS)";
                                                              END;

                                                   CaptionML=ENU=Calculation Weight (LBS);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 24  ;   ;Use Dim Weight      ;Boolean       ;CaptionML=ENU=Use Dim Weight }
    { 25  ;   ;Override Weight     ;Decimal       ;CaptionML=ENU=Override Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 26  ;   ;Calculation Weight  ;Decimal       ;OnValidate=BEGIN
                                                                GetShippingSetup;
                                                                IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::KGS THEN
                                                                  "Calculation Weight (LBS)" := ShippingSetup.KiloToPound("Calculation Weight")
                                                                ELSE
                                                                  "Calculation Weight (LBS)" := "Calculation Weight";
                                                              END;

                                                   CaptionML=ENU=Calculation Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 27  ;   ;Override Volume     ;Decimal       ;CaptionML=ENU=Override Volume;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 28  ;   ;Calculation Volume  ;Decimal       ;CaptionML=ENU=Calculation Volume;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 31  ;   ;Net Weight          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Package Line"."Net Weight" WHERE (Package No.=FIELD(No.)));
                                                   CaptionML=ENU=Net Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 32  ;   ;Gross Weight        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Package Line"."Gross Weight" WHERE (Package No.=FIELD(No.)));
                                                   CaptionML=ENU=Gross Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 33  ;   ;Dim. Weight         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Package Line"."Dim. Weight" WHERE (Package No.=FIELD(No.)));
                                                   CaptionML=ENU=Dim. Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 34  ;   ;Value (Price)       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Package Line"."Value (Price)" WHERE (Package No.=FIELD(No.)));
                                                   CaptionML=ENU=Value (Price);
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 35  ;   ;Value (Cost)        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Package Line"."Value (Cost)" WHERE (Package No.=FIELD(No.)));
                                                   CaptionML=ENU=Value (Cost);
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 36  ;   ;Calculation Value   ;Decimal       ;CaptionML=ENU=Calculation Value;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 37  ;   ;Override Value      ;Decimal       ;CaptionML=ENU=Override Value;
                                                   BlankZero=Yes }
    { 38  ;   ;Calculation Insured Value;Decimal  ;CaptionML=ENU=Calculation Insured Value;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 39  ;   ;Override Insured Value;Decimal     ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Insured Value","Override Insured Value");
                                                              END;

                                                   CaptionML=ENU=Override Insured Value;
                                                   BlankZero=Yes }
    { 40  ;   ;Volume              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Package Line".Volume WHERE (Package No.=FIELD(No.)));
                                                   CaptionML=ENU=Volume;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 41  ;   ;Miscellaneous       ;Boolean       ;CaptionML=ENU=Miscellaneous;
                                                   Editable=No }
    { 42  ;   ;Override Shipping Charge;Decimal   ;OnValidate=BEGIN
                                                                TESTFIELD("Additional Shipping Charge",0);
                                                              END;

                                                   CaptionML=ENU=Override Shipping Charge;
                                                   BlankZero=Yes }
    { 43  ;   ;Additional Shipping Charge;Decimal ;OnValidate=BEGIN
                                                                TESTFIELD("Override Shipping Charge",0);
                                                              END;

                                                   CaptionML=ENU=Additional Shipping Charge;
                                                   BlankZero=Yes }
    { 44  ;   ;Dimensional Weight  ;Decimal       ;CaptionML=ENU=Dimensional Weight;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 61  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent".Code;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Closed,FALSE);

                                                                IF "Shipping Agent Code" <> '' THEN BEGIN
                                                                  GetShippingAgent;
                                                                  "World Wide Service" :=
                                                                    ShippingAgentService.InternationalShipment(ShippingAgent,"Ship-to Country Code");
                                                                  "UPS Canadian Service" :=
                                                                    ShippingAgentService.UPSCanadianShipment(ShippingAgent,"Ship-to Country Code");
                                                                  "UPS Puerto Rico Service" :=
                                                                    ShippingAgentService.UPSPuertoRicoShipment(ShippingAgent,"Ship-to Country Code");
                                                                  "Airborne Canadian Service" :=
                                                                    ShippingAgentService.AirborneCanadianShipment(ShippingAgent,"Ship-to Country Code");
                                                                  "Airborne Puerto Rico Service" :=
                                                                    ShippingAgentService.AirbornePuertoRicoShipment(ShippingAgent,"Ship-to Country Code");

                                                                  IF CurrFieldNo = FIELDNO("Shipping Agent Code") THEN
                                                                    ShippingAgentService.CheckNameAddressPackage(ShippingAgent,Rec);

                                                                  GetPackingStation;
                                                                  ShipperTypeMgt.PackageGetShipAgentAccountNo(Rec,PackingStation,ShippingAgent);
                                                                END ELSE BEGIN
                                                                  "World Wide Service" := FALSE;
                                                                  "Shipping Agent Account No." := '';
                                                                END;

                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  IF "Shipping Agent Code" = '' THEN
                                                                    VALIDATE("Shipping Agent Service",'')
                                                                  ELSE BEGIN
                                                                    ShippingAgent.GET("Shipping Agent Code");
                                                                    VALIDATE(
                                                                      "Shipping Agent Service",
                                                                      ShippingAgentService.DefaultShipAgentService(ShippingAgent,"Ship-to Country Code"));
                                                                  END;

                                                                IF ("Shipping Agent Code" <> xRec."Shipping Agent Code") OR Miscellaneous THEN
                                                                  IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
                                                                    VALIDATE("Third Party Ship. Account No.",'')
                                                                  ELSE
                                                                    IF ShippingAccount.GetPrimaryShippingAccountNo(
                                                                         "Shipping Agent Code","Ship-to Type","Ship-to No.","Ship-to Code")
                                                                    THEN
                                                                      VALIDATE("Third Party Ship. Account No.",ShippingAccount."Account No.")
                                                                    ELSE
                                                                      VALIDATE("Third Party Ship. Account No.",'');

                                                                UpdateCarrierPackage(xRec,Rec);
                                                              END;

                                                   CaptionML=ENU=Shipping Agent Code }
    { 62  ;   ;World Wide Service  ;Boolean       ;OnValidate=BEGIN
                                                                UpdateCarrierPackage(xRec,Rec);
                                                              END;

                                                   CaptionML=ENU=World Wide Service;
                                                   Editable=No }
    { 63  ;   ;Shipping Agent Service;Code30      ;TableRelation="E-Ship Agent Service".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code),
                                                                                                    World Wide Service=FIELD(World Wide Service));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Closed,FALSE);

                                                                IF "Shipping Agent Service" <> '' THEN BEGIN
                                                                  IF NOT ShippingAgentService.GET(
                                                                           "Shipping Agent Code","Shipping Agent Service","World Wide Service")
                                                                  THEN
                                                                    ERROR(Text002);
                                                                  GetShippingAgent;
                                                                  IF "UPS Canadian Service" THEN
                                                                    ShippingAgentService.TESTFIELD("UPS Canadian Service","UPS Canadian Service");
                                                                  IF "UPS Puerto Rico Service" THEN
                                                                    ShippingAgentService.TESTFIELD("UPS Puerto Rico Service","UPS Puerto Rico Service");
                                                                  IF "Airborne Canadian Service" THEN
                                                                    ShippingAgentService.TESTFIELD("Airborne Canadian Service","Airborne Canadian Service");
                                                                  IF "Airborne Puerto Rico Service" THEN
                                                                    ShippingAgentService.TESTFIELD("Airborne Puerto Rico Service","Airborne Puerto Rico Service");
                                                                  IF "Shipping Origin Canada"
                                                                     AND (ShippingAgent."Shipper Type" <> ShippingAgent."Shipper Type"::Extended) THEN BEGIN // >> ECS <<
                                                                    ShippingAgentService.TESTFIELD("FedEx Canadian Service","Shipping Origin Canada");
                                                                    IF NOT "World Wide Service" THEN
                                                                      VALIDATE("Intra Canadian Service",TRUE)
                                                                    ELSE
                                                                      VALIDATE("Intra Canadian Service",FALSE);
                                                                  END;
                                                                  "Service Indicator" := ShippingAgentService."Service Indicator";
                                                                  "Delivery Days" := ShippingAgentService."Delivery Days";
                                                                  "LTL Freight Type" := ShippingAgentService."Default LTL Freight Type";
                                                                END ELSE BEGIN
                                                                  "Service Indicator" := '';
                                                                  "Delivery Days" := 0;
                                                                END;
                                                                "External Tracking No." := '';

                                                                UpdateCarrierPackage(xRec,Rec);
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Shipping Agent Code");
                                                              ShippingAgent.GET("Shipping Agent Code");
                                                              ShippingAgentService.RESET;
                                                              ShippingAgentService.SETRANGE("Shipping Agent Code",ShippingAgent.Code);
                                                              ShippingAgentService.SETRANGE(
                                                                "World Wide Service",
                                                                ShippingAgentService.InternationalShipment(ShippingAgent,"Ship-to Country Code"));
                                                              IF ShippingAgent."Shipper Type" <> ShippingAgent."Shipper Type"::Extended THEN BEGIN // >> ECS <<
                                                                IF "UPS Canadian Service" THEN
                                                                  ShippingAgentService.SETRANGE("UPS Canadian Service",TRUE);
                                                                IF "UPS Puerto Rico Service" THEN
                                                                  ShippingAgentService.SETRANGE("UPS Puerto Rico Service",TRUE);
                                                                IF "Airborne Canadian Service" THEN
                                                                  ShippingAgentService.SETRANGE("Airborne Canadian Service",TRUE);
                                                                IF "Airborne Puerto Rico Service" THEN
                                                                  ShippingAgentService.SETRANGE("Airborne Puerto Rico Service",TRUE);

                                                                IF "Shipping Origin Canada" THEN BEGIN
                                                                  VALIDATE("World Wide Service");
                                                                  ShippingAgentService.SETRANGE("World Wide Service");
                                                                  ShippingAgentService.SETRANGE("FedEx Canadian Service",TRUE);
                                                                  COMMIT;
                                                                END;
                                                              END;  // >> ECS <<
                                                              IF PAGE.RUNMODAL(0,ShippingAgentService) = ACTION::LookupOK THEN BEGIN
                                                                FromServiceLookup := TRUE;
                                                                VALIDATE("Shipping Agent Service",ShippingAgentService.Code);
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Shipping Agent Service }
    { 64  ;   ;Service Indicator   ;Code10        ;CaptionML=ENU=Service Indicator }
    { 65  ;   ;External Tracking No.;Text30       ;OnValidate=BEGIN
                                                                TESTFIELD(Closed,FALSE);

                                                                IF (CurrFieldNo <> 0) AND ("External Tracking No." <> xRec."External Tracking No.") THEN
                                                                  TESTFIELD("Manual Shipment");
                                                              END;

                                                   CaptionML=ENU=External Tracking No.;
                                                   Editable=Yes }
    { 66  ;   ;Manifest No.        ;Code20        ;TableRelation="Manifest Header";
                                                   OnValidate=BEGIN
                                                                IF "Shipping Agent Code" <> '' THEN BEGIN
                                                                  GetShippingAgent;
                                                                  IF ShippingAgent."Shipper Type" = ShippingAgent."Shipper Type"::UPS THEN BEGIN
                                                                    UPSManifest.RESET;
                                                                    UPSManifest.SETCURRENTKEY("Package No.");
                                                                    UPSManifest.SETRANGE("Package No.","No.");
                                                                    UPSManifest.MODIFYALL("Manifest No.","Manifest No.",TRUE);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Manifest No.;
                                                   Editable=No }
    { 67  ;   ;Delivery Days       ;Integer       ;CaptionML=ENU=Delivery Days;
                                                   Editable=No }
    { 68  ;   ;Creation Time       ;Time          ;CaptionML=ENU=Creation Time;
                                                   Editable=No }
    { 69  ;   ;Packing Time        ;Time          ;CaptionML=ENU=Packing Time;
                                                   Editable=No }
    { 70  ;   ;Packed By           ;Code50        ;TableRelation=User;
                                                   CaptionML=ENU=Packed By;
                                                   Editable=No }
    { 71  ;   ;Shipping Charge     ;Decimal       ;CaptionML=ENU=Shipping Charge;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 72  ;   ;Accessorial Charge  ;Decimal       ;CaptionML=ENU=Accessorial Charge;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 73  ;   ;Surcharge           ;Decimal       ;CaptionML=ENU=Surcharge;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 74  ;   ;Markup              ;Decimal       ;CaptionML=ENU=Markup;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 75  ;   ;Base Charge         ;Decimal       ;CaptionML=ENU=Base Charge;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 76  ;   ;Rebate Amount       ;Decimal       ;CaptionML=ENU=Rebate Amount;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 77  ;   ;Discount Amount     ;Decimal       ;CaptionML=ENU=Discount Amount;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 78  ;   ;Shipping Charge Updated;Boolean    ;CaptionML=ENU=Shipping Charge Updated;
                                                   Editable=No }
    { 79  ;   ;Shipping Cost       ;Decimal       ;CaptionML=ENU=Shipping Cost;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 80  ;   ;First Package No.   ;Code20        ;CaptionML=ENU=First Package No. }
    { 81  ;   ;Package No.         ;Integer       ;CaptionML=ENU=Package No.;
                                                   Editable=No }
    { 82  ;   ;Total Packages      ;Integer       ;CaptionML=ENU=Total Packages;
                                                   Editable=No }
    { 85  ;   ;No. Series          ;Code10        ;CaptionML=ENU=No. Series }
    { 87  ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No.;
                                                   Editable=No }
    { 88  ;   ;Future Package      ;Boolean       ;CaptionML=ENU=Future Package }
    { 89  ;   ;Source Type         ;Integer       ;CaptionML=ENU=Source Type;
                                                   Editable=No }
    { 90  ;   ;Source Subtype      ;Option        ;CaptionML=ENU=Source Subtype;
                                                   OptionCaptionML=ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                   OptionString=0,1,2,3,4,5,6,7,8,9,10;
                                                   Editable=No }
    { 91  ;   ;Source ID           ;Code20        ;CaptionML=ENU=Source ID;
                                                   Editable=No }
    { 92  ;   ;Posted Source ID    ;Code20        ;CaptionML=ENU=Posted Source ID;
                                                   Editable=No }
    { 93  ;   ;Shipping Agent Account No.;Code20  ;OnValidate=BEGIN
                                                                TESTFIELD(Closed,FALSE);

                                                                IF "Shipping Agent Account No." <> '' THEN BEGIN
                                                                  IF ("Source Type" <> 0) AND("Source ID" <> '') THEN
                                                                    PackingControl.TransferFromSource("Source Type","Source Subtype","Source ID")
                                                                  ELSE
                                                                    CLEAR(PackingControl);

                                                                  TESTFIELD("Shipping Agent Code");
                                                                  GetShippingAgent;
                                                                  GetPackingStation;
                                                                  GetShippingSetup;
                                                                  ShipperTypeMgt.PackageValidateAccountNo(
                                                                    Rec,PackingStation,ShippingAgent,ShippingSetup,PackingControl);
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Shipping Agent Code");
                                                              GetShippingAgent;
                                                              GetShippingSetup;
                                                              ShipperTypeMgt.PackageLookupAccountNo(Rec,ShippingAgent,ShippingSetup);
                                                            END;

                                                   CaptionML=ENU=Shipping Agent Account No. }
    { 96  ;   ;Shipping Payment Type;Option       ;OnValidate=BEGIN
                                                                IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
                                                                  VALIDATE("Third Party Ship. Account No.",'')
                                                                ELSE
                                                                  IF ShippingAccount.GetPrimaryShippingAccountNo(
                                                                       "Shipping Agent Code","Ship-to Type","Ship-to No.","Ship-to Code")
                                                                  THEN
                                                                    VALIDATE("Third Party Ship. Account No.",ShippingAccount."Account No.");
                                                              END;

                                                   CaptionML=ENU=Shipping Payment Type;
                                                   OptionCaptionML=ENU=Prepaid,Third Party,Freight Collect,Consignee;
                                                   OptionString=Prepaid,Third Party,Freight Collect,Consignee }
    { 97  ;   ;Third Party Ship. Account No.;Code20;
                                                   OnValidate=BEGIN
                                                                ShippingAccount."Shipping Agent Code" := "Shipping Agent Code";
                                                                ShippingAccount.TestShippingAccountNo("Third Party Ship. Account No.");

                                                                IF ("Third Party Ship. Account No." <> '') AND
                                                                   ("Shipping Payment Type" <> "Shipping Payment Type"::Prepaid)
                                                                THEN BEGIN
                                                                  CLEAR(ShippingAccount);

                                                                  IF NOT ShippingAccount.GET(
                                                                           "Ship-to Type","Ship-to No.","Ship-to Code",
                                                                           "Shipping Agent Code","Third Party Ship. Account No.")
                                                                  THEN BEGIN
                                                                    ShippingAccount.RESET;
                                                                    ShippingAccount.SETCURRENTKEY("Shipping Agent Code","Account No.");
                                                                    ShippingAccount.SETRANGE("Shipping Agent Code","Shipping Agent Code");
                                                                    ShippingAccount.SETRANGE("Account No.","Third Party Ship. Account No.");
                                                                    IF NOT ShippingAccount.FIND('-') THEN
                                                                      ;
                                                                  END;

                                                                  IF (ShippingAccount."Account No." <> '') AND
                                                                     ("Shipping Payment Type" <> "Shipping Payment Type"::Prepaid)
                                                                  THEN BEGIN
                                                                    "Shipping Insurance" := ShippingAccount."Shipping Insurance";

                                                                    VALIDATE("Shipping Agent Account No.");
                                                                  END;

                                                                  UpdateCarrierPackage(xRec,Rec);
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF ShippingAccount.LookupThirdPartyAccountNo(
                                                                   "Shipping Agent Code","Ship-to Type","Ship-to No.","Ship-to Code")
                                                              THEN
                                                                VALIDATE("Third Party Ship. Account No.",ShippingAccount.GetLookupAccountNo);
                                                            END;

                                                   CaptionML=ENU=Third Party Ship. Account No. }
    { 104 ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code;
                                                   Editable=No }
    { 105 ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=ENU=Location Code;
                                                   Editable=No }
    { 111 ;   ;COD                 ;Boolean       ;OnValidate=BEGIN
                                                                IF COD THEN BEGIN
                                                                  GetShippingSetup;
                                                                  GetShippingAgent;
                                                                  GetPackingStation;
                                                                  ShipperTypeMgt.PackageValidateCOD(Rec,PackingStation,ShippingAgent,ShippingSetup);
                                                                END ELSE BEGIN
                                                                  "COD Cashiers Check" := FALSE;
                                                                   "Add Shipping Charge to COD Amt" := FALSE;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD(Closed,FALSE);
                                                            END;

                                                   CaptionML=ENU=COD }
    { 112 ;   ;COD Amount          ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Closed,FALSE);

                                                                IF "COD Amount" <> 0 THEN
                                                                  TESTFIELD(COD);
                                                              END;

                                                   CaptionML=ENU=COD Amount;
                                                   BlankZero=Yes }
    { 113 ;   ;COD Cashiers Check  ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Closed,FALSE);
                                                                GetShippingAgent;
                                                                ShipperTypeMgt.PackageValidateCODCashCheck(Rec,ShippingAgent);
                                                              END;

                                                   CaptionML=ENU=COD Cashiers Check }
    { 114 ;   ;Add Shipping Charge to COD Amt;Boolean;
                                                   CaptionML=ENU=Add Shipping Charge to COD Amt }
    { 115 ;   ;Insure Through Shipping Agent;Boolean;
                                                   CaptionML=ENU=Insure Through Shipping Agent;
                                                   Editable=No }
    { 116 ;   ;Shipping Insurance  ;Option        ;OnValidate=BEGIN
                                                                IF "Shipping Insurance" <> xRec."Shipping Insurance" THEN
                                                                  VALIDATE("Shipping Agent Account No.");
                                                              END;

                                                   CaptionML=ENU=Shipping Insurance;
                                                   OptionCaptionML=ENU=" ,Never,Always";
                                                   OptionString=[ ,Never,Always] }
    { 117 ;   ;Additional COD Amount;Decimal      ;OnValidate=BEGIN
                                                                TESTFIELD(Closed,FALSE);
                                                                TESTFIELD(COD);

                                                                IF "COD Amount" <> 0 THEN
                                                                  "COD Amount" := "COD Amount" - xRec."Additional COD Amount" + "Additional COD Amount";
                                                              END;

                                                   CaptionML=ENU=Additional COD Amount;
                                                   BlankZero=Yes }
    { 118 ;   ;COD Collection Currency;Code10     ;CaptionML=ENU=COD Collection Currency }
    { 121 ;   ;Ship-to Type        ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Closed,FALSE);
                                                                TESTFIELD("Source ID",'');

                                                                IF "Ship-to Type" <> xRec."Ship-to Type" THEN
                                                                  VALIDATE("Ship-to No.",'');
                                                              END;

                                                   CaptionML=ENU=Ship-to Type;
                                                   OptionCaptionML=ENU=Customer,Vendor,Bank,Contact,Resource,Employee,,Location;
                                                   OptionString=Customer,Vendor,Bank,Contact,Resource,Employee,,Location }
    { 122 ;   ;Ship-to No.         ;Code20        ;TableRelation=IF (Ship-to Type=CONST(Customer)) Customer
                                                                 ELSE IF (Ship-to Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Ship-to Type=CONST(Bank)) "Bank Account"
                                                                 ELSE IF (Ship-to Type=CONST(Contact)) Contact
                                                                 ELSE IF (Ship-to Type=CONST(Resource)) Resource
                                                                 ELSE IF (Ship-to Type=CONST(Location)) Location;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Closed,FALSE);
                                                                TESTFIELD("Source ID",'');

                                                                IF "Ship-to No." = '' THEN BEGIN
                                                                  "Ship-to Code" := '';
                                                                  ClearShipToAddess;
                                                                END ELSE BEGIN
                                                                  CASE "Ship-to Type" OF
                                                                    "Ship-to Type"::Customer:
                                                                      BEGIN
                                                                        IF ("Ship-to Code" <> '') AND ShipToAddress.GET("Ship-to No.","Ship-to Code") THEN BEGIN
                                                                          TransferFromShipToAddress(ShipToAddress);
                                                                        END ELSE BEGIN
                                                                          "Ship-to Code" := '';
                                                                          Customer.GET("Ship-to No.");
                                                                          TransferFromCustomer(Customer);
                                                                        END;
                                                                      END;
                                                                    "Ship-to Type"::Vendor:
                                                                      BEGIN
                                                                        IF ("Ship-to Code" <> '') AND OrderAddress.GET("Ship-to No.","Ship-to Code") THEN BEGIN
                                                                          TransferFromOrderAddress(OrderAddress);
                                                                        END ELSE BEGIN
                                                                          "Ship-to Code" := '';
                                                                          Vendor.GET("Ship-to No.");
                                                                          TransferFromVendor(Vendor);
                                                                        END;
                                                                      END;
                                                                    "Ship-to Type"::Bank:
                                                                      BEGIN
                                                                        BankAccount.GET("Ship-to No.");
                                                                        TransferFromBankAccount(BankAccount);
                                                                      END;
                                                                    "Ship-to Type"::Contact:
                                                                      BEGIN
                                                                        Prospect.GET("Ship-to No.");
                                                                        TransferFromProspect(Prospect);
                                                                      END;
                                                                    "Ship-to Type"::Resource:
                                                                      BEGIN
                                                                        Resource.GET("Ship-to No.");
                                                                        TransferFromResource(Resource);
                                                                      END;
                                                                    "Ship-to Type"::Employee:
                                                                      BEGIN
                                                                        Employee.GET("Ship-to No.");
                                                                        TransferFromEmployee(Employee);
                                                                      END;
                                                                    "Ship-to Type"::Location:
                                                                      BEGIN
                                                                        Location.GET("Ship-to No.");
                                                                        TransferFromLocation(Location);
                                                                      END;
                                                                  END;

                                                                  IF "Shipping Origin Canada" THEN BEGIN
                                                                    VALIDATE("World Wide Service",("Ship-to Country Code" <> 'CA'));
                                                                    VALIDATE("Intra Canadian Service",("Ship-to Country Code" = 'CA'));
                                                                    IF "Intra Canadian Service" THEN
                                                                      "Currency Code" := 'CAD';
                                                                  END;
                                                                  IF (CurrFieldNo = FIELDNO("Ship-to No.")) AND
                                                                     ("Shipping Agent Code" <> '')
                                                                  THEN BEGIN
                                                                    GetShippingAgent;
                                                                    ShippingAgentService.CheckNameAddressPackage(ShippingAgent,Rec);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Ship-to No. }
    { 123 ;   ;Ship-to Code        ;Code10        ;TableRelation=IF (Ship-to Type=CONST(Customer)) "Ship-to Address".Code WHERE (Customer No.=FIELD(Ship-to No.))
                                                                 ELSE IF (Ship-to Type=CONST(Vendor)) "Order Address".Code WHERE (Vendor No.=FIELD(Ship-to No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Closed,FALSE);
                                                                TESTFIELD("Source ID",'');
                                                                TESTFIELD("Ship-to No.");

                                                                IF ("Ship-to Type" <> "Ship-to Type"::Customer) AND
                                                                   ("Ship-to Type" <> "Ship-to Type"::Vendor) AND
                                                                   ("Ship-to Type" <> "Ship-to Type"::Contact) AND
                                                                   ("Ship-to Code" <> '')
                                                                THEN
                                                                  ERROR(Text003,FIELDNAME("Ship-to Type"));

                                                                IF "Ship-to Code" <> '' THEN BEGIN
                                                                  CASE "Ship-to Type" OF
                                                                    "Ship-to Type"::Customer:
                                                                      BEGIN
                                                                        ShipToAddress.GET("Ship-to No.","Ship-to Code");
                                                                        // <TPZ208>
                                                                        ShipToAddress.TESTFIELD(Blocked,FALSE);
                                                                        // </TPZ208>
                                                                        TransferFromShipToAddress(ShipToAddress);
                                                                      END;
                                                                    "Ship-to Type"::Vendor:
                                                                      BEGIN
                                                                        OrderAddress.GET("Ship-to No.","Ship-to Code");
                                                                        TransferFromOrderAddress(OrderAddress);
                                                                      END;
                                                                  END;

                                                                  IF "Shipping Origin Canada" THEN BEGIN
                                                                    VALIDATE("World Wide Service",("Ship-to Country Code" <> 'CA'));
                                                                    VALIDATE("Intra Canadian Service",("Ship-to Country Code" = 'CA'));
                                                                    IF "Intra Canadian Service" THEN
                                                                      "Currency Code" := 'CAD';
                                                                  END;
                                                                  IF (CurrFieldNo = FIELDNO("Ship-to Code")) AND
                                                                     ("Shipping Agent Code" <> '')
                                                                  THEN BEGIN
                                                                    GetShippingAgent;
                                                                    ShippingAgentService.CheckNameAddressPackage(ShippingAgent,Rec);
                                                                  END;
                                                                END ELSE
                                                                  VALIDATE("Ship-to No.");
                                                              END;

                                                   CaptionML=ENU=Ship-to Code }
    { 124 ;   ;Ship-to Name        ;Text50        ;CaptionML=ENU=Ship-to Name }
    { 125 ;   ;Ship-to Name 2      ;Text50        ;CaptionML=ENU=Ship-to Name 2 }
    { 126 ;   ;Ship-to Address     ;Text50        ;CaptionML=ENU=Ship-to Address }
    { 127 ;   ;Ship-to Address 2   ;Text50        ;CaptionML=ENU=Ship-to Address 2 }
    { 128 ;   ;Ship-to City        ;Text30        ;CaptionML=ENU=Ship-to City }
    { 129 ;   ;Ship-to Contact     ;Text50        ;CaptionML=ENU=Ship-to Contact }
    { 130 ;   ;Ship-to ZIP Code    ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Ship-to ZIP Code }
    { 131 ;   ;Ship-to State       ;Text30        ;TableRelation=County.Code WHERE (Country/Region Code=FIELD(Ship-to Country Code));
                                                   CaptionML=ENU=Ship-to State }
    { 132 ;   ;Ship-to Country Code;Code10        ;InitValue=US;
                                                   TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                IF "Ship-to Country Code" <> xRec."Ship-to Country Code" THEN
                                                                  IF "Shipping Agent Code" <> '' THEN BEGIN
                                                                    xRec."Shipping Agent Code" := '';
                                                                    VALIDATE("Shipping Agent Code");
                                                                  END;
                                                                IF "Shipping Origin Canada" THEN BEGIN
                                                                  VALIDATE("World Wide Service",("Ship-to Country Code" <> 'CA'));
                                                                  VALIDATE("Intra Canadian Service",("Ship-to Country Code" = 'CA'));
                                                                  IF "Intra Canadian Service" THEN
                                                                    "Currency Code" := 'CAD';
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Ship-to Country Code }
    { 133 ;   ;Ship-to Phone No.   ;Text30        ;CaptionML=ENU=Ship-to Phone No. }
    { 134 ;   ;Ship-to Fax No.     ;Text30        ;CaptionML=ENU=Ship-to Fax No. }
    { 135 ;   ;Residential Delivery;Boolean       ;CaptionML=ENU=Residential Delivery }
    { 141 ;   ;Blind Shipment      ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Source ID");

                                                                IF "Blind Shipment" THEN BEGIN
                                                                  "Double Blind Shipment" := FALSE;
                                                                  IF NOT xRec."Blind Shipment" THEN
                                                                    ClearBlindShipFromAddess;
                                                                END ELSE
                                                                  VALIDATE("Double Blind Ship-from Cust No",'');
                                                              END;

                                                   CaptionML=ENU=Blind Shipment;
                                                   Editable=No }
    { 142 ;   ;Double Blind Shipment;Boolean      ;OnValidate=BEGIN
                                                                IF "Double Blind Shipment" THEN BEGIN
                                                                  "Blind Shipment" := FALSE;
                                                                  IF NOT xRec."Double Blind Shipment" THEN
                                                                    ClearBlindShipFromAddess;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Double Blind Shipment }
    { 143 ;   ;Double Blind Ship-from Cust No;Code20;
                                                   TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Double Blind Shipment");

                                                                IF "Double Blind Ship-from Cust No" <> '' THEN BEGIN
                                                                  Customer.GET("Double Blind Ship-from Cust No");
                                                                  TransferBlindFromCustomer(Customer);
                                                                END ELSE
                                                                  ClearBlindShipFromAddess;
                                                              END;

                                                   CaptionML=ENU=Double Blind Ship-from Cust No }
    { 144 ;   ;Blind Ship-from Customer No.;Code20;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Closed,FALSE);
                                                                TESTFIELD("Blind Shipment");

                                                                IF "Blind Ship-from Customer No." <> '' THEN BEGIN
                                                                  Customer.GET("Blind Ship-from Customer No.");
                                                                  TransferBlindFromCustomer(Customer);
                                                                END ELSE
                                                                  ClearBlindShipFromAddess;
                                                              END;

                                                   CaptionML=ENU=Blind Ship-from Customer No.;
                                                   Editable=No }
    { 145 ;   ;Blind Ship-from Name;Text50        ;CaptionML=ENU=Blind Ship-from Name;
                                                   Editable=No }
    { 146 ;   ;Blind Ship-from Name 2;Text50      ;CaptionML=ENU=Blind Ship-from Name 2;
                                                   Editable=No }
    { 147 ;   ;Blind Ship-from Address;Text50     ;CaptionML=ENU=Blind Ship-from Address;
                                                   Editable=No }
    { 148 ;   ;Blind Ship-from Address 2;Text50   ;CaptionML=ENU=Blind Ship-from Address 2;
                                                   Editable=No }
    { 149 ;   ;Blind Ship-from City;Text30        ;CaptionML=ENU=Blind Ship-from City;
                                                   Editable=No }
    { 150 ;   ;Blind Ship-from Contact;Text50     ;CaptionML=ENU=Blind Ship-from Contact;
                                                   Editable=No }
    { 151 ;   ;Blind Ship-from ZIP Code;Code20    ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Blind Ship-from ZIP Code;
                                                   Editable=No }
    { 152 ;   ;Blind Ship-from State;Text30       ;TableRelation=County.Code WHERE (Country/Region Code=FIELD(Blind Ship-from Country Code));
                                                   CaptionML=ENU=Blind Ship-from State;
                                                   Editable=No }
    { 153 ;   ;Blind Ship-from Country Code;Code10;TableRelation=Country/Region;
                                                   CaptionML=ENU=Blind Ship-from Country Code;
                                                   Editable=No }
    { 154 ;   ;Blind Ship-from Phone No.;Text30   ;CaptionML=ENU=Blind Ship-from Phone No.;
                                                   Editable=No }
    { 155 ;   ;Blind Ship-from Fax No.;Text30     ;CaptionML=ENU=Blind Ship-from Fax No.;
                                                   Editable=No }
    { 161 ;   ;Third Party Shipping Charge;Decimal;CaptionML=ENU=Third Party Shipping Charge;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 162 ;   ;Third Party Accessorial Charge;Decimal;
                                                   CaptionML=ENU=Third Party Accessorial Charge;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 163 ;   ;Third Party Surcharge;Decimal      ;CaptionML=ENU=Third Party Surcharge;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 164 ;   ;Third Party Markup  ;Decimal       ;CaptionML=ENU=Third Party Markup;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 165 ;   ;Third Party Base Charge;Decimal    ;CaptionML=ENU=Third Party Base Charge;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 166 ;   ;Third Party Rebate Amount;Decimal  ;CaptionML=ENU=Third Party Rebate Amount;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 167 ;   ;Third Party Discount Amount;Decimal;CaptionML=ENU=Third Party Discount Amount;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 169 ;   ;Third Party Shipping Cost;Decimal  ;CaptionML=ENU=Third Party Shipping Cost;
                                                   DecimalPlaces=2:2;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 170 ;   ;AES ITN No.         ;Text20        ;CaptionML=ENU=AES ITN No. }
    { 171 ;   ;Ship-to Email Address;Text80        }
    { 7300;   ;Length              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Max("Package Line".Length WHERE (Package No.=FIELD(No.),
                                                                                                Use Unit of measure Dimensions=CONST(Yes)));
                                                   CaptionML=ENU=Length;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 7301;   ;Width               ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Max("Package Line".Width WHERE (Package No.=FIELD(No.),
                                                                                               Use Unit of measure Dimensions=CONST(Yes)));
                                                   CaptionML=ENU=Width;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 7302;   ;Height              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Package Line".Height WHERE (Package No.=FIELD(No.)));
                                                   CaptionML=ENU=Height;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 7303;   ;Cubage              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Package Line".Cubage WHERE (Package No.=FIELD(No.)));
                                                   CaptionML=ENU=Cubage;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 7304;   ;Unit of Measure Weight;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Package Line"."Unit of Measure Weight" WHERE (Package No.=FIELD(No.)));
                                                   CaptionML=ENU=Unit of Measure Weight;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 7305;   ;Override Dimensions ;Boolean       ;CaptionML=ENU=Override Dimensions }
    { 7306;   ;Override Length     ;Decimal       ;CaptionML=ENU=Override Length;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7307;   ;Override Width      ;Decimal       ;CaptionML=ENU=Override Width;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7308;   ;Override Height     ;Decimal       ;CaptionML=ENU=Override Height;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7309;   ;Calculation Length  ;Decimal       ;CaptionML=ENU=Calculation Length;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 7310;   ;Calculation Width   ;Decimal       ;CaptionML=ENU=Calculation Width;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 7311;   ;Calculation Height  ;Decimal       ;CaptionML=ENU=Calculation Height;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 50000;  ;Shortcut Dimension 5 Code;Code20   ;OnValidate=VAR
                                                                DimVal@1000000001 : Record 349;
                                                                GLSetup@1000000000 : Record 98;
                                                              BEGIN
                                                                //<TPZ1435>
                                                                GLSetup.GET;
                                                                IF NOT DimVal.GET(GLSetup."Shortcut Dimension 5 Code","Shortcut Dimension 5 Code") THEN
                                                                  FIELDERROR("Shortcut Dimension 5 Code",'is not valid');
                                                                //</TPZ1435>
                                                              END;

                                                   OnLookup=BEGIN
                                                              //<TPZ1435>
                                                              LookupShortcutDimCode(5,"Shortcut Dimension 5 Code");
                                                              VALIDATE("Shortcut Dimension 5 Code");
                                                              //</TPZ1435>
                                                            END;

                                                   CaptionML=[ENU=Shortcut Dimension 5 Code;
                                                              ESM=C�d. dim. acceso dir. 2;
                                                              FRC=Code raccourci de dimension 2;
                                                              ENC=Shortcut Dimension 2 Code];
                                                   Description=TPZ1435;
                                                   CaptionClass='1,2,5' }
    { 50001;  ;Number of pallet    ;Integer       ;DataClassification=ToBeClassified;
                                                   Editable=No }
    { 14000350;;EDI Trade Partner  ;Code20        ;TableRelation="E.D.I. Trade Partner";
                                                   CaptionML=ENU=EDI Trade Partner }
    { 14000720;;Multi Document Package;Boolean    ;OnValidate=BEGIN
                                                                TESTFIELD(Miscellaneous,FALSE);
                                                              END;

                                                   CaptionML=ENU=Multi Document Package;
                                                   Editable=No }
    { 14000721;;Multi Document No. ;Code250       ;OnValidate=BEGIN
                                                                   TESTFIELD(Miscellaneous,FALSE);

                                                                   IF "Multi Document No." <> '' THEN
                                                                     TESTFIELD("Multi Document Package");
                                                              END;

                                                   CaptionML=ENU=Multi Document No.;
                                                   Editable=No }
    { 14000722;;Multi Document Package Split;Boolean;
                                                   CaptionML=ENU=Multi Document Package Split;
                                                   Editable=No }
    { 14000723;;Original Package No.;Code20       ;CaptionML=ENU=Original Package No.;
                                                   Editable=No }
    { 14000724;;Original Shipping Charge;Decimal  ;CaptionML=ENU=Original Shipping Charge;
                                                   Editable=No }
    { 14000725;;Original Shipping Cost;Decimal    ;CaptionML=ENU=Original Shipping Cost;
                                                   Editable=No }
    { 14000726;;Org. Third Party Ship. Charge;Decimal;
                                                   CaptionML=ENU=Org. Third Party Ship. Charge;
                                                   Editable=No }
    { 14000727;;Org. Third Party Shipping Cost;Decimal;
                                                   CaptionML=ENU=Org. Third Party Shipping Cost;
                                                   Editable=No }
    { 14000728;;Exclude From Manifest;Boolean     ;CaptionML=ENU=Exclude From Manifest;
                                                   Editable=No }
    { 14000729;;Distribution Factor;Decimal       ;CaptionML=ENU=Distribution Factor;
                                                   Editable=No }
    { 14000730;;Original Exist in Other Pack.;Boolean;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Exist("Package Line" WHERE (Type=CONST(Package),
                                                                                           No.=FIELD(Original Package No.)));
                                                   CaptionML=ENU=Original Exist in Other Pack.;
                                                   Editable=No }
    { 14000761;;UPS Zone           ;Code10        ;CaptionML=ENU=UPS Zone;
                                                   Editable=No }
    { 14000762;;UPS Hundred Weight ;Boolean       ;CaptionML=ENU=UPS Hundred Weight }
    { 14000764;;UPS Manifest Entry No.;Integer    ;CaptionML=ENU=UPS Manifest Entry No.;
                                                   Editable=No }
    { 14000766;;UPS Transaction ID ;Code20        ;CaptionML=ENU=UPS Transaction ID;
                                                   Editable=No }
    { 14000767;;Insurance Charge   ;Decimal       ;CaptionML=ENU=Insurance Charge }
    { 14000768;;UPS Canadian Service;Boolean      ;CaptionML=ENU=UPS Canadian Service }
    { 14000769;;Oversize Actual Weight;Decimal    ;CaptionML=ENU=Oversize Actual Weight;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 14000770;;UPS Puerto Rico Service;Boolean   ;CaptionML=ENU=UPS Puerto Rico Service }
    { 14000781;;Shipping Origin Canada;Boolean     }
    { 14000782;;FedEx Transaction ID;Code40       ;CaptionML=ENU=FedEx Transaction ID;
                                                   Editable=No }
    { 14000783;;Total Handling Units;Integer      ;CaptionML=ENU=Total Handling Units }
    { 14000784;;FedEx Canadian Service;Boolean     }
    { 14000785;;Intra Canadian Service;Boolean     }
    { 14000786;;Total Line Quantity;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Package Line".Quantity WHERE (Package No.=FIELD(No.))) }
    { 14000801;;LTL Freight Type   ;Code10        ;TableRelation="LTL Freight Type";
                                                   CaptionML=ENU=LTL Freight Type }
    { 14000825;;UCC No.            ;Code30        ;OnValidate=BEGIN
                                                                GetShippingSetup;
                                                                IF ShippingSetup."Enable Label Printing" THEN
                                                                  LabelMgt.FormatUCC128PrintPackage(Rec);
                                                              END;

                                                   CaptionML=ENU=UCC No. }
    { 14000828;;Label Package Type ;Code1         ;CaptionML=ENU=Label Package Type;
                                                   CharAllowed=09 }
    { 14000829;;UCC No. (Print)    ;Code50        ;CaptionML=ENU=UCC No. (Print) }
    { 14000941;;Airborne Sort Code ;Code10        ;CaptionML=ENU=Airborne Sort Code }
    { 14000942;;Airborne Airbill Type;Option      ;CaptionML=ENU=Airborne Airbill Type;
                                                   OptionCaptionML=ENU=" ,PRI,PTR,CAN,COD,AHM,DEL,AMM,AMD";
                                                   OptionString=[ ,PRI,PTR,CAN,COD,AHM,DEL,AMM,AMD] }
    { 14000944;;Airborne Manifest Entry No.;Integer;
                                                   CaptionML=ENU=Airborne Manifest Entry No. }
    { 14000945;;Airborne Canadian Service;Boolean ;CaptionML=ENU=Airborne Canadian Service }
    { 14000946;;Airborne Puerto Rico Service;Boolean;
                                                   CaptionML=ENU=Airborne Puerto Rico Service }
    { 14000947;;Airborne Regional Hub Code;Code10 ;CaptionML=ENU=Airborne Regional Hub Code }
    { 14000948;;Airborne ABX Hub Code;Code10      ;CaptionML=ENU=Airborne ABX Hub Code }
    { 14000961;;RF-ID (Hex)        ;Code50        ;CaptionML=ENU=RF-ID (Hex) }
    { 14000962;;RF-ID Type         ;Option        ;CaptionML=ENU=RF-ID Type;
                                                   OptionCaptionML=ENU=" ,SGTIN,SSCC,SGLN,,,,,,,,Custom 1,Custom 2,Custom 3";
                                                   OptionString=[ ,SGTIN,SSCC,SGLN,,,,,,,,Custom 1,Custom 2,Custom 3] }
    { 14000981;;Export Document No.;Code10        ;TableRelation="Export Document" WHERE (No.=FIELD(Export Document No.));
                                                   OnLookup=VAR
                                                              ExportDocument@1240030000 : Record 14000981;
                                                            BEGIN
                                                              ExportDocument.RESET;
                                                              ExportDocument.GET("Export Document No.");

                                                              ExportDocument.FILTERGROUP(2);
                                                              ExportDocument.RESET;
                                                              ExportDocument.SETRECFILTER;
                                                              ExportDocument.FILTERGROUP(0);

                                                              IF ExportDocument.Posted THEN
                                                                PAGE.RUNMODAL(PAGE::"Export Posted Document",ExportDocument)
                                                              ELSE
                                                                PAGE.RUNMODAL(PAGE::"Export Document",ExportDocument);
                                                            END;

                                                   CaptionML=ENU=Export Document No. }
    { 14000982;;No AES Required    ;Boolean       ;CaptionML=ENU=No AES Required }
    { 14002801;;Tote No.           ;Code20        ;CaptionML=ENU=Tote No.;
                                                   Editable=No }
    { 14002802;;USPS Tracking ID   ;Code30        ;CaptionML=ENU=USPS Tracking ID }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Source Type,Source Subtype,Source ID,Location Code;
                                                   SumIndexFields=Calculation Weight,Calculation Volume,Calculation Value,COD Amount,Shipping Charge,Additional COD Amount;
                                                   MaintainSIFTIndex=No }
    {    ;External Tracking No.                    }
    {    ;Shipping Agent Code,Shipping Agent Service,No.;
                                                   SumIndexFields=Calculation Weight,Calculation Weight (LBS);
                                                   MaintainSIFTIndex=No }
    {    ;Miscellaneous,No.                        }
    {    ;Manifest No.,Shipping Agent Code,Shipping Agent Account No.,Closed,Manual Shipment,Exclude From Manifest;
                                                   MaintainSQLIndex=No }
    {    ;Ship-to Type,Ship-to No.,Ship-to Code    }
    {    ;UCC No.                                  }
    {    ;Source Type,Source Subtype,Source ID,Shipping Agent Code;
                                                   MaintainSQLIndex=No }
    {    ;Original Package No.                     }
    {    ;Manifest No.,Shipping Agent Account No.,Shipping Agent Service }
    {    ;First Package No.                        }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,External Tracking No.,Shipping Agent Code,Shipping Agent Service }
  }
  CODE
  {
    VAR
      PackageLine@1000000000 : Record 14000702;
      PackageLabel@1000000001 : Record 14000710;
      ShippingSetup@1000000003 : Record 14000707;
      Package@1000000004 : Record 14000701;
      PostedPackage@1240030003 : Record 14000704;
      ShippingAgent@1000000006 : Record 291;
      ShippingAgentService@1000000007 : Record 14000708;
      PackingStation@1000000008 : Record 14000709;
      UPSManifest@1000000013 : Record 14000768;
      Customer@1000000018 : Record 18;
      ShipToAddress@1000000019 : Record 222;
      Vendor@1000000020 : Record 23;
      OrderAddress@1000000021 : Record 224;
      BankAccount@1000000022 : Record 270;
      Prospect@1000000023 : Record 5050;
      Resource@1000000024 : Record 156;
      Employee@1000000025 : Record 5200;
      Location@1240030005 : Record 14;
      ShippingAccount@1240030001 : Record 14000714;
      PackingControl@1240030004 : Record 14000717;
      ShippingNumbering@1240030006 : Record 14000725;
      PackageSummaryLine@1240030007 : Record 14000964;
      NoSeriesMgt@1000000026 : Codeunit 396;
      Shipping@1000000027 : Codeunit 14000701;
      LabelMgt@1000000030 : Codeunit 14000841;
      ShipperTypeMgt@1240030009 : Codeunit 14000711;
      NetWeightFlowfieldsCalc@1000000031 : Boolean;
      ValueCostFlowfieldsCalc@1000000032 : Boolean;
      ValuePriceFlowfieldsCalc@1000000033 : Boolean;
      DimWeightFlowfieldsCalc@1000000034 : Boolean;
      GrossWeightFlowfieldsCalc@1000000035 : Boolean;
      UnitVolumeFlowfieldsCalc@1000000036 : Boolean;
      UOMWeightFlowfieldsCalc@1240030008 : Boolean;
      CubageFlowfieldsCalc@1240030010 : Boolean;
      LengthFlowfieldsCalc@1240030011 : Boolean;
      WidthFlowfieldsCalc@1240030012 : Boolean;
      HeightFlowfieldsCalc@1240030013 : Boolean;
      ShippingSetupRetrieved@1000000037 : Boolean;
      FromServiceLookup@1240030002 : Boolean;
      Text001@1001 : TextConst 'ENU=Cannot be renamed.';
      Text002@1002 : TextConst 'ENU=This is not a valid shipping agent service.';
      Text003@1003 : TextConst 'ENU=%1 must be Customer or Vendor.';
      Text004@1004 : TextConst 'ENU=Label File cannot be blank.';
      Text005@1005 : TextConst 'ENU=%1 do not exists.';
      Text006@1006 : TextConst 'ENU=More is being packed of %1 %2 %3 than shipping.';
      Text50000@1000000002 : TextConst 'ENU=This Shortcut Dimension is not defined in the %1.';

    PROCEDURE TestFromSalesHeader@2(VAR FromSalesHeader@1000000000 : Record 36);
    VAR
      Customer@1000000001 : Record 18;
      ShipToAddress@1000000002 : Record 222;
      NameAndAddressMgt@1240030000 : Codeunit 14000709;
    BEGIN
      GetShippingSetup;
      FromSalesHeader.TESTFIELD("Shipping Agent Code");
      FromSalesHeader.TESTFIELD("E-Ship Agent Service");

      FromSalesHeader.TESTFIELD("Sell-to Customer No.");
      FromSalesHeader.TESTFIELD("Ship-to Name");
      FromSalesHeader.TESTFIELD("Ship-to Address");
      FromSalesHeader.TESTFIELD("Ship-to City");
      FromSalesHeader.TESTFIELD("Ship-to Contact");
      FromSalesHeader.TESTFIELD("Ship-to Post Code");
      IF FromSalesHeader."Ship-to Code" = '' THEN BEGIN
        Customer.GET(FromSalesHeader."Sell-to Customer No.");
        Customer.TESTFIELD("Phone No.");
      END ELSE BEGIN
        ShipToAddress.GET(FromSalesHeader."Sell-to Customer No.",FromSalesHeader."Ship-to Code");
        ShipToAddress.TESTFIELD("Phone No.");
      END;

      NameAndAddressMgt.CheckNameAddressSalesHeader(
        FromSalesHeader,FromSalesHeader."Shipping Agent Code");
    END;

    PROCEDURE TransferFromPackingControl@57(FromPackingControl@1240030000 : Record 14000717);
    VAR
      BillOfLading@1240030001 : Record 14000822;
    BEGIN
      GetShippingSetup;
      GetPackingStation;

      "Blind Shipment" := FromPackingControl."Blind Shipment";
      "Double Blind Shipment" := FromPackingControl."Double Blind Shipment";
      "Double Blind Ship-from Cust No" := FromPackingControl."Double Blind Ship-from Cust No";

      "Ship-to Type" := FromPackingControl."Ship-to Type";
      "Ship-to No." := FromPackingControl."Ship-to No.";
      "Ship-to Code" := FromPackingControl."Ship-to Code";
      "Ship-to Name" := FromPackingControl."Ship-to Name";
      "Ship-to Name 2" := FromPackingControl."Ship-to Name 2";
      "Ship-to Address" := FromPackingControl."Ship-to Address";
      "Ship-to Address 2" := FromPackingControl."Ship-to Address 2";
      "Ship-to City" := FromPackingControl."Ship-to City";
      "Ship-to Contact" := FromPackingControl."Ship-to Contact";
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(FromPackingControl."Ship-to ZIP Code");
      "Ship-to State" := FromPackingControl."Ship-to State";
      "Ship-to Country Code" := FromPackingControl."Ship-to Country Code";
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Ship-to Phone No." := FromPackingControl."Ship-to Phone No.";
      "Ship-to Fax No." := FromPackingControl."Ship-to Fax No.";
      "Residential Delivery" := PackingControl."Residential Delivery";
      "Currency Code" := PackingControl."Currency Code";
      IF "Intra Canadian Service" THEN
        "Currency Code" := 'CAD';
      "External Document No." := FromPackingControl."External Document No.";
      "EDI Trade Partner" := FromPackingControl."EDI Trade Partner";
      CASE TRUE OF
        "Blind Shipment":
          BEGIN
            "Blind Ship-from Customer No." := FromPackingControl."Blind Ship-from No.";
            "Blind Ship-from Name" := FromPackingControl."Blind Ship-from Name";
            "Blind Ship-from Name 2" := FromPackingControl."Blind Ship-from Name 2";
            "Blind Ship-from Address" := FromPackingControl."Blind Ship-from Address";
            "Blind Ship-from Address 2" := FromPackingControl."Blind Ship-from Address 2";
            "Blind Ship-from City" := FromPackingControl."Blind Ship-from City";
            "Blind Ship-from Contact" := FromPackingControl."Blind Ship-from Contact";
            "Blind Ship-from ZIP Code" :=
              ShippingSetup.AdjustZIPCode(FromPackingControl."Blind Ship-from ZIP Code");
            "Blind Ship-from State" := FromPackingControl."Blind Ship-from State";
            "Blind Ship-from Country Code" := FromPackingControl."Blind Ship-from Country Code";
            ShippingSetup.AdjustZIPStateCityCode(
              "Blind Ship-from ZIP Code","Blind Ship-from State",
              "Blind Ship-from City","Blind Ship-from Country Code");
            "Blind Ship-from Phone No." := FromPackingControl."Blind Ship-from Phone No.";
            "Blind Ship-from Fax No." := FromPackingControl."Blind Ship-from Fax No.";
          END;
        "Double Blind Shipment":
          BEGIN
            TESTFIELD("Double Blind Ship-from Cust No");
            Customer.GET("Double Blind Ship-from Cust No");
            TransferBlindFromCustomer(Customer);
          END;
        ELSE
          ClearBlindShipFromAddess;
      END;

      "Shipping Payment Type" := FromPackingControl."Shipping Payment Type";
      "Shipping Insurance" := FromPackingControl."Shipping Insurance";
      "Third Party Ship. Account No." := FromPackingControl."Third Party Ship. Account No.";

      IF (FromPackingControl."Bill of Lading No." <> '') AND ShippingSetup."Use Shipping Agent from BOL"
      THEN BEGIN
        BillOfLading.GET(FromPackingControl."Bill of Lading No.");
        VALIDATE("Shipping Agent Code",BillOfLading."Shipping Agent Code");
        VALIDATE("Shipping Agent Service",BillOfLading."Shipping Agent Service");

        VALIDATE(COD,BillOfLading."COD Payment");
        IF BillOfLading."COD Cashiers Check" THEN
          VALIDATE("COD Cashiers Check",TRUE);
      END ELSE BEGIN
        VALIDATE("Shipping Agent Code",FromPackingControl."Shipping Agent Code");
        VALIDATE("Shipping Agent Service",FromPackingControl."E-Ship Agent Service");

        VALIDATE(COD,FromPackingControl."COD Payment");
        IF FromPackingControl."COD Cashiers Check" THEN
          VALIDATE("COD Cashiers Check",TRUE);
      END;
    END;

    PROCEDURE TransferFromCustomer@23(CurrentCustomer@1000000000 : Record 18);
    BEGIN
      GetShippingSetup;
      "Ship-to Name" := CurrentCustomer.Name;
      "Ship-to Name 2" := CurrentCustomer."Name 2";
      "Ship-to Address" := CurrentCustomer.Address;
      "Ship-to Address 2" := CurrentCustomer."Address 2";
      "Ship-to City" := CurrentCustomer.City;
      "Ship-to Contact" := CurrentCustomer.Contact;
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(CurrentCustomer."Post Code");
      "Ship-to State" := CurrentCustomer.County;
      "Ship-to Country Code" := CurrentCustomer."Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Ship-to Phone No." := CurrentCustomer."Phone No.";
      "Ship-to Fax No." := CurrentCustomer."Fax No.";
      "Residential Delivery" := CurrentCustomer."Residential Delivery";
      "Ship-to Email Address" := CurrentCustomer."E-Mail";
      IF CurrentCustomer."Currency Code" <> '' THEN
        "Currency Code" := CurrentCustomer."Currency Code"
      ELSE
        "Currency Code" := 'USD';
      IF "Intra Canadian Service" THEN
        "Currency Code" := 'CAD';

      "Shipping Payment Type" := CurrentCustomer."Shipping Payment Type";
      "Shipping Insurance" := CurrentCustomer."Shipping Insurance";
      IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
        VALIDATE("Third Party Ship. Account No.",'')
      ELSE
        IF ShippingAccount.GetPrimaryShippingAccountNo(
             "Shipping Agent Code","Ship-to Type","Ship-to No.","Ship-to Code")
        THEN
          VALIDATE("Third Party Ship. Account No.",ShippingAccount."Account No.");

      VALIDATE("Shipping Agent Code",CurrentCustomer."Shipping Agent Code");
      VALIDATE("Shipping Agent Service",CurrentCustomer."E-Ship Agent Service");
    END;

    PROCEDURE TransferFromVendor@3(CurrentVendor@1000000000 : Record 23);
    BEGIN
      GetShippingSetup;
      "Ship-to Name" := CurrentVendor.Name;
      "Ship-to Name 2" := CurrentVendor."Name 2";
      "Ship-to Address" := CurrentVendor.Address;
      "Ship-to Address 2" := CurrentVendor."Address 2";
      "Ship-to City" := CurrentVendor.City;
      "Ship-to Contact" := CurrentVendor.Contact;
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(CurrentVendor."Post Code");
      "Ship-to State" := CurrentVendor.County;
      "Ship-to Country Code" := CurrentVendor."Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Ship-to Phone No." := CurrentVendor."Phone No.";
      "Ship-to Fax No." := CurrentVendor."Fax No.";
      "Residential Delivery" := CurrentVendor."Residential Delivery";
      "Currency Code" := '';

      "Shipping Payment Type" := "Shipping Payment Type"::Prepaid;
      "Shipping Insurance" := "Shipping Insurance"::" ";
      "Third Party Ship. Account No." := '';

      VALIDATE("Shipping Agent Code",'');
      VALIDATE("Shipping Agent Service",'');
    END;

    PROCEDURE TransferFromBankAccount@21(CurrentBankAccount@1000000000 : Record 270);
    BEGIN
      GetShippingSetup;
      "Ship-to Name" := CurrentBankAccount.Name;
      "Ship-to Name 2" := CurrentBankAccount."Name 2";
      "Ship-to Address" := CurrentBankAccount.Address;
      "Ship-to Address 2" := CurrentBankAccount."Address 2";
      "Ship-to City" := CurrentBankAccount.City;
      "Ship-to Contact" := CurrentBankAccount.Contact;
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(CurrentBankAccount."Post Code");
      "Ship-to State" := CurrentBankAccount.County;
      "Ship-to Country Code" := CurrentBankAccount."Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Ship-to Phone No." := CurrentBankAccount."Phone No.";
      "Ship-to Fax No." := CurrentBankAccount."Fax No.";
      "Residential Delivery" := FALSE;
      "Currency Code" := '';

      "Shipping Payment Type" := "Shipping Payment Type"::Prepaid;
      "Shipping Insurance" := "Shipping Insurance"::" ";
      "Third Party Ship. Account No." := '';

      VALIDATE("Shipping Agent Code",'');
      VALIDATE("Shipping Agent Service",'');
    END;

    PROCEDURE TransferFromProspect@24(CurrentProspect@1000000000 : Record 5050);
    BEGIN
      GetShippingSetup;
      "Ship-to Name" := CurrentProspect.Name;
      "Ship-to Name 2" := CurrentProspect."Name 2";
      "Ship-to Address" := CurrentProspect.Address;
      "Ship-to Address 2" := CurrentProspect."Address 2";
      "Ship-to City" := CurrentProspect.City;
      "Ship-to Contact" := '';
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(CurrentProspect."Post Code");
      "Ship-to State" := CurrentProspect.County;
      "Ship-to Country Code" := CurrentProspect."Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Ship-to Phone No." := CurrentProspect."Phone No.";
      "Ship-to Fax No." := CurrentProspect."Fax No.";
      "Residential Delivery" := FALSE;
      "Currency Code" := '';

      "Shipping Payment Type" := "Shipping Payment Type"::Prepaid;
      "Shipping Insurance" := "Shipping Insurance"::" ";
      "Third Party Ship. Account No." := '';

      VALIDATE("Shipping Agent Code",'');
      VALIDATE("Shipping Agent Service",'');
    END;

    PROCEDURE TransferFromResource@26(CurrentResource@1000000000 : Record 156);
    BEGIN
      GetShippingSetup;
      "Ship-to Name" := CurrentResource.Name;
      "Ship-to Name 2" := CurrentResource."Name 2";
      "Ship-to Address" := CurrentResource.Address;
      "Ship-to Address 2" := CurrentResource."Address 2";
      "Ship-to City" := CurrentResource.City;
      "Ship-to Contact" := '';
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(CurrentResource."Post Code");
      "Ship-to State" := CurrentResource.County;
      "Ship-to Country Code" := '';
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Ship-to Phone No." := '';
      "Ship-to Fax No." := '';
      "Residential Delivery" := FALSE;
      "Currency Code" := '';

      "Shipping Payment Type" := "Shipping Payment Type"::Prepaid;
      "Shipping Insurance" := "Shipping Insurance"::" ";
      "Third Party Ship. Account No." := '';

      VALIDATE("Shipping Agent Code",'');
      VALIDATE("Shipping Agent Service",'');
    END;

    PROCEDURE TransferFromEmployee@34(CurrentEmployee@1000000000 : Record 5200);
    BEGIN
      GetShippingSetup;
      IF CurrentEmployee."Middle Name" <> '' THEN
        "Ship-to Name" :=
          CurrentEmployee."First Name" + ' ' + CurrentEmployee."Middle Name" + ' ' +
          CurrentEmployee."Last Name"
      ELSE
        "Ship-to Name" :=
          CurrentEmployee."First Name" + ' ' + CurrentEmployee."Last Name";
      "Ship-to Name 2" := '';
      "Ship-to Address" := CurrentEmployee.Address;
      "Ship-to Address 2" := CurrentEmployee."Address 2";
      "Ship-to City" := CurrentEmployee.City;
      "Ship-to Contact" := '';
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(CurrentEmployee."Post Code");
      "Ship-to State" := CurrentEmployee.County;
      "Ship-to Country Code" := CurrentEmployee."Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Ship-to Phone No." := CurrentEmployee."Phone No.";
      "Ship-to Fax No." := CurrentEmployee."Fax No.";
      "Residential Delivery" := FALSE;
      "Currency Code" := '';

      "Shipping Payment Type" := "Shipping Payment Type"::Prepaid;
      "Shipping Insurance" := "Shipping Insurance"::" ";
      "Third Party Ship. Account No." := '';

      VALIDATE("Shipping Agent Code",'');
      VALIDATE("Shipping Agent Service",'');
    END;

    PROCEDURE TransferFromLocation@1(CurrentLocation@1240030000 : Record 14);
    BEGIN
      GetShippingSetup;
      "Ship-to Name" := CurrentLocation.Name;
      "Ship-to Name 2" := CurrentLocation."Name 2";
      "Ship-to Address" := CurrentLocation.Address;
      "Ship-to Address 2" := CurrentLocation."Address 2";
      "Ship-to City" := CurrentLocation.City;
      "Ship-to Contact" := CurrentLocation.Contact;
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(CurrentLocation."Post Code");
      "Ship-to State" := CurrentLocation.County;
      "Ship-to Country Code" := CurrentLocation."Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Ship-to Phone No." := CurrentLocation."Phone No.";
      "Ship-to Fax No." := CurrentLocation."Fax No.";
      "Residential Delivery" := CurrentLocation."Residential Delivery";
      "Currency Code" := '';

      "Shipping Payment Type" := "Shipping Payment Type"::Prepaid;
      "Shipping Insurance" := "Shipping Insurance"::" ";
      "Third Party Ship. Account No." := '';

      VALIDATE("Shipping Agent Code",CurrentLocation."E-Ship Agent Code");
      VALIDATE("Shipping Agent Service",CurrentLocation."E-Ship Agent Service");
    END;

    PROCEDURE TransferFromShipToAddress@25(CurrentShipToAddress@1000000000 : Record 222);
    VAR
      Customer@1000000001 : Record 18;
    BEGIN
      GetShippingSetup;
      Customer.GET(CurrentShipToAddress."Customer No.");
      "Ship-to Name" := CurrentShipToAddress.Name;
      "Ship-to Name 2" := CurrentShipToAddress."Name 2";
      "Ship-to Address" := CurrentShipToAddress.Address;
      "Ship-to Address 2" := CurrentShipToAddress."Address 2";
      "Ship-to City" := CurrentShipToAddress.City;
      "Ship-to Contact" := CurrentShipToAddress.Contact;
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(CurrentShipToAddress."Post Code");
      "Ship-to State" := CurrentShipToAddress.County;
      "Ship-to Country Code" := CurrentShipToAddress."Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Ship-to Phone No." := CurrentShipToAddress."Phone No.";
      "Ship-to Fax No." := CurrentShipToAddress."Fax No.";
      "Residential Delivery" := CurrentShipToAddress."Residential Delivery";
      "Ship-to Email Address" := CurrentShipToAddress."E-Mail";
      "Currency Code" := Customer."Currency Code";
      IF "Intra Canadian Service" THEN
        "Currency Code" := 'CAD';

      "Shipping Payment Type" := CurrentShipToAddress."Shipping Payment Type";
      "Shipping Insurance" := CurrentShipToAddress."Shipping Insurance";
      IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
        VALIDATE("Third Party Ship. Account No.",'')
      ELSE
        IF ShippingAccount.GetPrimaryShippingAccountNo(
             "Shipping Agent Code","Ship-to Type","Ship-to No.","Ship-to Code")
        THEN
          VALIDATE("Third Party Ship. Account No.",ShippingAccount."Account No.");

      VALIDATE("Shipping Agent Code",CurrentShipToAddress."Shipping Agent Code");
      VALIDATE("Shipping Agent Service",CurrentShipToAddress."E-Ship Agent Service");
    END;

    PROCEDURE TransferFromOrderAddress@27(CurrentOrderAddress@1000000000 : Record 224);
    BEGIN
      GetShippingSetup;
      Vendor.GET(CurrentOrderAddress."Vendor No.");
      "Ship-to Name" := CurrentOrderAddress.Name;
      "Ship-to Name 2" := CurrentOrderAddress."Name 2";
      "Ship-to Address" := CurrentOrderAddress.Address;
      "Ship-to Address 2" := CurrentOrderAddress."Address 2";
      "Ship-to City" := CurrentOrderAddress.City;
      "Ship-to Contact" := CurrentOrderAddress.Contact;
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(CurrentOrderAddress."Post Code");
      "Ship-to State" := CurrentOrderAddress.County;
      "Ship-to Country Code" := CurrentOrderAddress."Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      "Ship-to Phone No." := CurrentOrderAddress."Phone No.";
      "Ship-to Fax No." := CurrentOrderAddress."Fax No.";
      "Residential Delivery" := CurrentOrderAddress."Residential Delivery";
      "Currency Code" := '';

      "Shipping Payment Type" := "Shipping Payment Type"::Prepaid;
      "Shipping Insurance" := "Shipping Insurance"::" ";
      "Third Party Ship. Account No." := '';

      VALIDATE("Shipping Agent Code",'');
      VALIDATE("Shipping Agent Service",'');
    END;

    PROCEDURE ClearShipToAddess@28();
    BEGIN
      "Ship-to Name" := '';
      "Ship-to Name 2" := '';
      "Ship-to Address" := '';
      "Ship-to Address 2" := '';
      "Ship-to City" := '';
      "Ship-to Contact" := '';
      "Ship-to ZIP Code" := '';
      "Ship-to State" := '';
      //<TPZ1078>
      //"Ship-to Country Code" := '';
      "Ship-to Country Code" := 'US';
      //<TPZ1078>
      "Ship-to Phone No." := '';
      "Ship-to Fax No." := '';
      "Residential Delivery" := FALSE;
      "Currency Code" := '';

      "Shipping Payment Type" := "Shipping Payment Type"::Prepaid;
      "Shipping Insurance" := "Shipping Insurance"::" ";
      "Third Party Ship. Account No." := '';
    END;

    PROCEDURE TransferBlindFromCustomer@10(CurrentCustomer@1000000000 : Record 18);
    BEGIN
      GetShippingSetup;
      "Blind Ship-from Name" := CurrentCustomer.Name;
      "Blind Ship-from Name 2" := CurrentCustomer."Name 2";
      "Blind Ship-from Address" := CurrentCustomer.Address;
      "Blind Ship-from Address 2" := CurrentCustomer."Address 2";
      "Blind Ship-from City" := CurrentCustomer.City;
      "Blind Ship-from Contact" := CurrentCustomer.Contact;
      "Blind Ship-from ZIP Code" := ShippingSetup.AdjustZIPCode(CurrentCustomer."Post Code");
      "Blind Ship-from State" := CurrentCustomer.County;
      "Blind Ship-from Country Code" := CurrentCustomer."Country/Region Code";
      ShippingSetup.AdjustZIPStateCityCode(
        "Blind Ship-from ZIP Code","Blind Ship-from State",
        "Blind Ship-from City","Blind Ship-from Country Code");
      "Blind Ship-from Phone No." := CurrentCustomer."Phone No.";
      "Blind Ship-from Fax No." := CurrentCustomer."Fax No.";
    END;

    PROCEDURE TransferFromRateShopHeader@14(CurrentRateShopHeader@1000000000 : Record 14000741);
    VAR
      Customer@1000000001 : Record 18;
      ShipToAddress@1000000002 : Record 222;
    BEGIN
      GetShippingSetup;
      GetPackingStation;

      VALIDATE(COD,CurrentRateShopHeader.COD);
      "COD Amount" := CurrentRateShopHeader."COD Amount";
      "COD Cashiers Check" := CurrentRateShopHeader."COD Cashiers Check";
      "Blind Shipment" := CurrentRateShopHeader."Blind Shipment";
      "Double Blind Shipment" := CurrentRateShopHeader."Double Blind Shipment";
      "Double Blind Ship-from Cust No" := CurrentRateShopHeader."Double Blind Ship-from Cust No";

      "Ship-to No." := CurrentRateShopHeader."Sell-to Customer No.";
      "Ship-to Code" := CurrentRateShopHeader."Ship-to Code";
      "Ship-to Name" := CurrentRateShopHeader."Ship-to Name";
      "Ship-to Name 2" := CurrentRateShopHeader."Ship-to Name 2";
      "Ship-to Address" := CurrentRateShopHeader."Ship-to Address";
      "Ship-to Address 2" := CurrentRateShopHeader."Ship-to Address 2";
      "Ship-to City" := CurrentRateShopHeader."Ship-to City";
      "Ship-to Contact" := CurrentRateShopHeader."Ship-to Contact";
      "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(CurrentRateShopHeader."Ship-to ZIP Code");
      "Ship-to State" := CurrentRateShopHeader."Ship-to State";
      "Ship-to Country Code" := CurrentRateShopHeader."Ship-to Country Code";
      ShippingSetup.AdjustZIPStateCityCode(
        "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
      IF CurrentRateShopHeader."Ship-to Code" = '' THEN BEGIN
        Customer.GET(CurrentRateShopHeader."Sell-to Customer No.");
        "Ship-to Phone No." := Customer."Phone No.";
        "Ship-to Fax No." := Customer."Fax No.";
      END ELSE BEGIN
        ShipToAddress.GET(
          CurrentRateShopHeader."Sell-to Customer No.",CurrentRateShopHeader."Ship-to Code");
        "Ship-to Phone No." := ShipToAddress."Phone No.";
        "Ship-to Fax No." := ShipToAddress."Fax No.";
      END;
      "Residential Delivery" := CurrentRateShopHeader."Residential Delivery";
      "Currency Code" := CurrentRateShopHeader."Currency Code";
      IF "Intra Canadian Service" THEN
        "Currency Code" := 'CAD';

      "Shipping Payment Type" := CurrentRateShopHeader."Shipping Payment Type";
      "Shipping Insurance" := CurrentRateShopHeader."Shipping Insurance";
      ShippingAccount.GetPrimaryShippingAccountNo
        ("Shipping Agent Code","Ship-to Type","Ship-to No.","Ship-to Code");
      "Third Party Ship. Account No." := ShippingAccount."Account No.";

      ClearBlindShipFromAddess;

      VALIDATE("Shipping Agent Code");
    END;

    LOCAL PROCEDURE ClearBlindShipFromAddess@15();
    BEGIN
      "Blind Ship-from Name" := '';
      "Blind Ship-from Name 2" := '';
      "Blind Ship-from Address" := '';
      "Blind Ship-from Address 2" := '';
      "Blind Ship-from City" := '';
      "Blind Ship-from Contact" := '';
      "Blind Ship-from ZIP Code" := '';
      "Blind Ship-from State" := '';
      "Blind Ship-from Country Code" := '';
      "Blind Ship-from Phone No." := '';
      "Blind Ship-from Fax No." := '';
    END;

    LOCAL PROCEDURE UpdateCarrierPackage@7(VAR OldPackage@1000000000 : Record 14000701;NewPackage@1000000001 : Record 14000701);
    BEGIN
      IF (OldPackage."Shipping Agent Code" <> NewPackage."Shipping Agent Code") OR
         (OldPackage."Shipping Agent Service" <> NewPackage."Shipping Agent Service") OR
         (OldPackage."World Wide Service" <> NewPackage."World Wide Service") OR
         FromServiceLookup OR NewPackage.Miscellaneous
      THEN BEGIN
        IF ShippingAgent.GET(OldPackage."Shipping Agent Code") THEN
          ShipperTypeMgt.PackageDeleteOptionPage(Rec,ShippingAgent."Shipper Type")
        ELSE
          IF FromServiceLookup THEN
            IF ShippingAgent.GET(NewPackage."Shipping Agent Code") THEN
              ShipperTypeMgt.PackageDeleteOptionPage(Rec,ShippingAgent."Shipper Type");
        IF ShippingAgent.GET(NewPackage."Shipping Agent Code") THEN
          ShipperTypeMgt.PackageInsertOptionPage(Rec,ShippingAgent."Shipper Type");

        OldPackage."Shipping Agent Code" := NewPackage."Shipping Agent Code";
        OldPackage."Shipping Agent Service" := NewPackage."Shipping Agent Service";
        OldPackage."World Wide Service" := NewPackage."World Wide Service";
      END;

      FromServiceLookup := FALSE;
    END;

    LOCAL PROCEDURE GetShippingAgent@9();
    BEGIN
      IF ("Shipping Agent Code" <> ShippingAgent.Code) OR ("Shipping Agent Code" = '') THEN
        ShippingAgent.GET("Shipping Agent Code");
      IF ShippingAgent."FedEx Canadian Shipping Agent" THEN
        "Shipping Origin Canada" := TRUE;
    END;

    LOCAL PROCEDURE GetShippingSetup@22();
    BEGIN
      IF NOT ShippingSetupRetrieved THEN BEGIN
        ShippingSetup.GET;
        ShippingSetupRetrieved := TRUE;
      END;
    END;

    PROCEDURE TotalNetWeight@4() : Decimal;
    BEGIN
      IF NOT NetWeightFlowfieldsCalc THEN BEGIN
        CALCFIELDS("Net Weight");
        NetWeightFlowfieldsCalc := TRUE;
      END;

      EXIT("Net Weight");
    END;

    PROCEDURE TotalGrossWeight@16() : Decimal;
    BEGIN
      IF NOT GrossWeightFlowfieldsCalc THEN BEGIN
        CALCFIELDS("Gross Weight");
        GrossWeightFlowfieldsCalc := TRUE;
      END;

      EXIT("Gross Weight");
    END;

    PROCEDURE TotalDimWeight@11() : Decimal;
    BEGIN
      IF NOT DimWeightFlowfieldsCalc THEN BEGIN
        CALCFIELDS("Dim. Weight");
        DimWeightFlowfieldsCalc := TRUE;
      END;

      EXIT("Dim. Weight");
    END;

    PROCEDURE TotalUOMWeight@1240030002() : Decimal;
    BEGIN
      IF NOT UOMWeightFlowfieldsCalc THEN BEGIN
        CALCFIELDS("Unit of Measure Weight");
        UOMWeightFlowfieldsCalc := TRUE;
      END;

      EXIT("Unit of Measure Weight");
    END;

    PROCEDURE TotalValueCost@12() : Decimal;
    BEGIN
      IF NOT ValueCostFlowfieldsCalc THEN BEGIN
        CALCFIELDS("Value (Cost)");
        ValueCostFlowfieldsCalc := TRUE;
      END;

      EXIT("Value (Cost)");
    END;

    PROCEDURE TotalValuePrice@13() : Decimal;
    BEGIN
      IF NOT ValuePriceFlowfieldsCalc THEN BEGIN
        CALCFIELDS("Value (Price)");
        ValuePriceFlowfieldsCalc := TRUE;
      END;

      EXIT("Value (Price)");
    END;

    PROCEDURE TotalVolume@17() : Decimal;
    BEGIN
      IF NOT UnitVolumeFlowfieldsCalc THEN BEGIN
        CALCFIELDS(Volume);
        UnitVolumeFlowfieldsCalc := TRUE;
      END;

      EXIT(Volume);
    END;

    PROCEDURE TotalCubage@1240030003() : Decimal;
    BEGIN
      IF NOT CubageFlowfieldsCalc THEN BEGIN
        CALCFIELDS(Cubage);
        CubageFlowfieldsCalc := TRUE;
      END;

      EXIT(Cubage);
    END;

    PROCEDURE TotalLength@1240030007() : Decimal;
    BEGIN
      IF NOT LengthFlowfieldsCalc THEN BEGIN
        CALCFIELDS(Length);
        LengthFlowfieldsCalc := TRUE;
      END;

      EXIT(Length);
    END;

    PROCEDURE TotalWidth@1240030008() : Decimal;
    BEGIN
      IF NOT WidthFlowfieldsCalc THEN BEGIN
        CALCFIELDS(Width);
        WidthFlowfieldsCalc := TRUE;
      END;

      EXIT(Width);
    END;

    PROCEDURE TotalHeight@1240030009() : Decimal;
    BEGIN
      IF NOT HeightFlowfieldsCalc THEN BEGIN
        CALCFIELDS(Height);
        HeightFlowfieldsCalc := TRUE;
      END;

      EXIT(Height);
    END;

    PROCEDURE GetWeight@19() : Decimal;
    BEGIN
      IF "Override Weight" <> 0 THEN
        EXIT("Override Weight");

      IF "Scale Weight" <> 0 THEN
        EXIT("Scale Weight");

      GetShippingSetup;
      ShippingSetup.TESTFIELD("Actual Weight as");

      CASE ShippingSetup."Actual Weight as" OF
        ShippingSetup."Actual Weight as"::"Net Weight":
          EXIT(TotalNetWeight);
        ShippingSetup."Actual Weight as"::"Gross Weight":
          EXIT(TotalGrossWeight);
        ShippingSetup."Actual Weight as"::"Dimmed Weight":
          EXIT(TotalDimWeight);
        ShippingSetup."Actual Weight as"::"Unit of Measure Weight":
          EXIT(TotalUOMWeight);
      END;
    END;

    PROCEDURE GetValue@20() : Decimal;
    BEGIN
      IF "Override Value" <> 0 THEN
        EXIT("Override Value");

      GetShippingSetup;
      ShippingSetup.TESTFIELD("Declare Value As");

      CASE ShippingSetup."Declare Value As" OF
        ShippingSetup."Declare Value As"::Cost:
          IF TotalValueCost = 0 THEN
            EXIT(ShippingSetup."Zero Value Package Value");
        ShippingSetup."Declare Value As"::Price:
          IF TotalValuePrice = 0 THEN
            EXIT(ShippingSetup."Zero Value Package Value");
      END;

      CASE ShippingSetup."Declare Value As" OF
        ShippingSetup."Declare Value As"::Cost:
          EXIT(TotalValueCost);
        ShippingSetup."Declare Value As"::Price:
          EXIT(TotalValuePrice);
      END;
    END;

    PROCEDURE GetVolume@18() : Decimal;
    BEGIN
      IF "Override Volume" <> 0 THEN
        EXIT("Override Volume");

      GetShippingSetup;

      CASE ShippingSetup."Actual Volume as" OF
        ShippingSetup."Actual Volume as"::"Unit Volume":
          EXIT(TotalVolume);
        ShippingSetup."Actual Volume as"::Cubage:
          EXIT(TotalCubage);
      END;
    END;

    PROCEDURE GetLength@1240030010() : Decimal;
    BEGIN
      IF "Override Dimensions" THEN
        EXIT("Override Length");

      EXIT(TotalLength);
    END;

    PROCEDURE GetWidth@1240030011() : Decimal;
    BEGIN
      IF "Override Dimensions" THEN
        EXIT("Override Width");

      EXIT(TotalWidth);
    END;

    PROCEDURE GetHeight@1240030006() : Decimal;
    BEGIN
      IF "Override Dimensions" THEN
        EXIT("Override Height");

      EXIT(TotalHeight);
    END;

    PROCEDURE GetInsuredValue@37() : Decimal;
    BEGIN
      IF ("Override Insured Value" <> 0) AND "Insure Through Shipping Agent" THEN
        EXIT("Override Insured Value");

      IF "Insure Through Shipping Agent" THEN
        EXIT(GetValue)
      ELSE
        EXIT(0);
    END;

    PROCEDURE GetCalculationFields@1240030005(DimPrecision@1240030000 : Decimal;DimDirection@1240030001 : Code[10]);
    BEGIN
      "Calculation Volume" := GetVolume;
      IF DimPrecision <> 0 THEN BEGIN
        "Calculation Length" := ROUND(GetLength,DimPrecision,DimDirection);
        "Calculation Width" := ROUND(GetWidth,DimPrecision,DimDirection);
        "Calculation Height" := ROUND(GetHeight,DimPrecision,DimDirection);
      END ELSE BEGIN
        "Calculation Length" := GetLength;
        "Calculation Width" := GetWidth;
        "Calculation Height" := GetHeight;
      END;
      "Calculation Value" := GetValue;
      "Calculation Insured Value" := GetInsuredValue;
    END;

    PROCEDURE TotalPostedNetWeight@46() : Decimal;
    BEGIN
      IF NOT NetWeightFlowfieldsCalc THEN BEGIN
        PostedPackage.GET("No.");
        PostedPackage.CALCFIELDS("Net Weight");
        "Net Weight" := PostedPackage."Net Weight";
        NetWeightFlowfieldsCalc := TRUE;
      END;

      EXIT("Net Weight");
    END;

    PROCEDURE TotalPostedGrossWeight@47() : Decimal;
    BEGIN
      IF NOT GrossWeightFlowfieldsCalc THEN BEGIN
        PostedPackage.GET("No.");
        PostedPackage.CALCFIELDS("Gross Weight");
        "Gross Weight" := PostedPackage."Gross Weight";
        GrossWeightFlowfieldsCalc := TRUE;
      END;

      EXIT("Gross Weight");
    END;

    PROCEDURE TotalPostedDimWeight@48() : Decimal;
    BEGIN
      IF NOT DimWeightFlowfieldsCalc THEN BEGIN
        PostedPackage.GET("No.");
        PostedPackage.CALCFIELDS("Dim. Weight");
        "Dim. Weight" := PostedPackage."Dim. Weight";
        DimWeightFlowfieldsCalc := TRUE;
      END;

      EXIT("Dim. Weight");
    END;

    PROCEDURE TotalPostedUOMWeight@1240030004() : Decimal;
    BEGIN
      IF NOT UOMWeightFlowfieldsCalc THEN BEGIN
        PostedPackage.GET("No.");
        PostedPackage.CALCFIELDS("Unit of Measure Weight");
        "Unit of Measure Weight" := PostedPackage."Unit of Measure Weight";
        UOMWeightFlowfieldsCalc := TRUE;
      END;

      EXIT("Unit of Measure Weight");
    END;

    PROCEDURE GetPostedWeight@45() : Decimal;
    BEGIN
      IF "Override Weight" <> 0 THEN
        EXIT("Override Weight");

      IF "Scale Weight" <> 0 THEN
        EXIT("Scale Weight");

      GetShippingSetup;
      ShippingSetup.TESTFIELD("Actual Weight as");

      CASE ShippingSetup."Actual Weight as" OF
        ShippingSetup."Actual Weight as"::"Net Weight":
          EXIT(TotalPostedNetWeight);
        ShippingSetup."Actual Weight as"::"Gross Weight":
          EXIT(TotalPostedGrossWeight);
        ShippingSetup."Actual Weight as"::"Dimmed Weight":
          EXIT(TotalPostedDimWeight);
        ShippingSetup."Actual Weight as"::"Unit of Measure Weight":
          EXIT(TotalPostedUOMWeight);
      END;
    END;

    PROCEDURE ClearTotalValueFields@5();
    BEGIN
      NetWeightFlowfieldsCalc := FALSE;
      ValueCostFlowfieldsCalc := FALSE;
      ValuePriceFlowfieldsCalc := FALSE;
      DimWeightFlowfieldsCalc := FALSE;
      GrossWeightFlowfieldsCalc := FALSE;
      UnitVolumeFlowfieldsCalc := FALSE;
      UOMWeightFlowfieldsCalc := FALSE;
      CubageFlowfieldsCalc := FALSE;
      LengthFlowfieldsCalc := FALSE;
      WidthFlowfieldsCalc := FALSE;
      HeightFlowfieldsCalc := FALSE;
    END;

    LOCAL PROCEDURE GetPackingStation@51();
    BEGIN
      IF PackingStation.Code = '' THEN
        PackingStation.GetPackingStation;
    END;

    PROCEDURE InsertLabelFile@29(LabelFile@1000000000 : Text[250];LabelDescription@1000000001 : Text[30];LabelType@1000000002 : Integer;PrinterPort@1000000003 : Code[100];PackingStationCode@1000000004 : Code[10];LabelPrinted@1000000005 : Boolean;DoNotImportLabelFile@1240030000 : Boolean);
    BEGIN
      IF LabelFile = '' THEN
        ERROR(Text004);

      IF NOT DoNotImportLabelFile THEN
        IF NOT EXISTS(LabelFile) THEN
          ERROR(Text005,LabelFile);

      PackageLabel.LOCKTABLE;
      PackageLabel.RESET;
      PackageLabel.SETRANGE(Type,PackageLabel.Type::Package);
      PackageLabel.SETRANGE("No.","No.");
      IF PackageLabel.FIND('+') THEN
        PackageLabel."File No." := PackageLabel."File No." + 1
      ELSE BEGIN
        PackageLabel.Type := PackageLabel.Type::Package;
        PackageLabel."No." := "No.";
        PackageLabel."File No." := 1;
      END;

      PackageLabel.INIT;
      PackageLabel.Description := COPYSTR(LabelDescription,1,MAXSTRLEN(PackageLabel.Description));
      PackageLabel."File Type" := LabelType;
      PackageLabel."File Name" := LabelFile;
      PackageLabel."Printer Port" := PrinterPort;
      PackageLabel."Packing Station Code" := PackingStationCode;
      PackageLabel."Created By" := USERID;
      PackageLabel."Date Created" := TODAY;
      PackageLabel."Time Created" := TIME;
      IF LabelPrinted THEN
        PackageLabel."No. of Copies Printed" := 1;

      IF NOT DoNotImportLabelFile THEN
        PackageLabel.ImportFileBinary(LabelFile,FALSE)
      ELSE
        PackageLabel."File Not Imported" := TRUE;

      PackageLabel.INSERT;
    END;

    PROCEDURE PrintStdPackageLabel@32();
    BEGIN
      LabelMgt.PrintStdPackageLabel(Rec);
    END;

    PROCEDURE CreatePrintUCC128Label@30();
    BEGIN
      LabelMgt.PrintUCC128Label(Rec);
    END;

    PROCEDURE CreatePrintRFIDLabel@1240030000();
    BEGIN
      LabelMgt.PrintRFIDLabel(Rec);
    END;

    PROCEDURE CopyPackage@33(Copies@1000000000 : Integer;GiveError@1000000001 : Boolean;PrintLabel@1000000002 : Boolean) : Integer;
    VAR
      PackageLine2@1000000003 : Record 14000702;
      NewPackageNo@1000000004 : Code[20];
      i@1000000005 : Integer;
      PackagesCreated@1000000006 : Integer;
      OverPackedStop@1000000007 : Boolean;
      PrintUCC128@1000000008 : Boolean;
    BEGIN
      TESTFIELD(Closed);
      TESTFIELD(COD,FALSE);

      IF "Shipping Agent Code" <> '' THEN
        GetShippingAgent
      ELSE
        CLEAR(ShippingAgent);

      PackagesCreated := 0;
      OverPackedStop := FALSE;
      WHILE (PackagesCreated < Copies) AND NOT OverPackedStop DO BEGIN
        CLEAR(Package);
        Package.Miscellaneous :=  Miscellaneous;
        Package."Source Type" := "Source Type";
        Package."Source Subtype" := "Source Subtype";
        Package."Source ID" := "Source ID";
        Package.INSERT(TRUE);

        NewPackageNo := Package."No.";
        Package.TRANSFERFIELDS(Rec,FALSE);
        Package."No." := NewPackageNo;
        Package.Closed := FALSE;
        Package."Closed by Packing Station Code" := '';
        Package."Expected Delivery Date" := 0D;
        Package."Packing Date" := 0D;
        Package."Pickup Date" := 0D;
        Package."External Tracking No." := '';
        Package."Manifest No." := '';
        Package."First Package No." := '';
        Package.ClearCost;
        Package.ClearThirdPartyCost;
        Package."Shipping Charge Updated" := FALSE;
        Package."Package No." := Package."Package No." + PackagesCreated + 1;
        IF Package."Package No." > Package."Total Packages" THEN BEGIN
          Package."Package No." := 1;
          Package."Total Packages" := 1;
        END;
        Package."UPS Zone" := '';
        Package."UPS Hundred Weight" := "UPS Hundred Weight";
        Package."UPS Manifest Entry No." := 0;
        Package."UPS Transaction ID" := '';
        Package."FedEx Transaction ID" := '';
        PrintUCC128 :=  Package."UCC No." <> '';
        Package."UCC No." := '';
        IF "Shipping Agent Code" <> '' THEN
          Package.VALIDATE("Shipping Agent Code","Shipping Agent Code");
        IF "Shipping Agent Service" <> '' THEN
          Package.VALIDATE("Shipping Agent Service","Shipping Agent Service");
        Package."Multi Document Package Split" := FALSE;
        Package."Original Package No." := '';
        Package."Original Shipping Charge" := 0;
        Package."Original Shipping Cost" := 0;
        Package."Org. Third Party Ship. Charge" := 0;
        Package."Org. Third Party Shipping Cost" := 0;
        Package."Exclude From Manifest" := FALSE;
        Package."RF-ID (Hex)" := '';
        Package.MODIFY(TRUE);

        ShipperTypeMgt.PackageCopyOptionPage(Rec,Package,ShippingAgent);

        PackageLine.RESET;
        PackageLine.SETRANGE("Package No.","No.");
        IF PackageLine.FIND('-') THEN
          REPEAT
            PackageLine.TESTFIELD("Serial No.",'');

            CLEAR(PackageLine2);
            PackageLine2."Package No." := Package."No.";
            PackageLine2."Line No." := PackageLine."Line No.";
            PackageLine2."Source Type" := PackageLine."Source Type";
            PackageLine2."Source Subtype" := PackageLine."Source Subtype";
            PackageLine2."Source ID" := PackageLine."Source ID";
            PackageLine2.INSERT(TRUE);
            IF PackageLine.Type <> PackageLine.Type::" " THEN
              PackageLine2.VALIDATE(Type,PackageLine.Type);
            IF PackageLine."No." <> '' THEN
              PackageLine2.VALIDATE("No.",PackageLine."No.");
            IF PackageLine."Variant Code" <> '' THEN
              PackageLine2.VALIDATE("Variant Code",PackageLine."Variant Code");
            IF PackageLine.Quantity <> 0 THEN
              PackageLine2.VALIDATE(Quantity,PackageLine.Quantity);
            IF PackageLine2."Unit of Measure Code" <> PackageLine."Unit of Measure Code" THEN
              PackageLine2.VALIDATE("Unit of Measure Code",PackageLine."Unit of Measure Code");

            PackageLine2.Description := PackageLine.Description;
            PackageLine2."Net Weight" := PackageLine."Net Weight";
            PackageLine2."Gross Weight" := PackageLine."Gross Weight";
            PackageLine2."Dim. Weight" := PackageLine."Dim. Weight";
            PackageLine2."Value (Price)" := PackageLine."Value (Price)";
            PackageLine2."Value (Cost)" := PackageLine."Value (Cost)";
            PackageLine2.Volume := PackageLine.Volume;
            PackageLine2."Unit Length" := PackageLine."Unit Length";
            PackageLine2."Unit Width" := PackageLine."Unit Width";
            PackageLine2."Unit Height" := PackageLine."Unit Height";
            PackageLine2."Unit Cubage" := PackageLine."Unit Cubage";
            PackageLine2."Unit Weight" := PackageLine."Unit Weight";
            PackageLine2."Use Unit of measure Dimensions" := PackageLine."Use Unit of measure Dimensions";
            PackageLine2.Length := PackageLine.Length;
            PackageLine2.Width := PackageLine.Width;
            PackageLine2.Height := PackageLine.Height;
            PackageLine2.Cubage := PackageLine.Cubage;
            PackageLine2."Unit of Measure Weight" := PackageLine."Unit of Measure Weight";
            PackageLine2."Country of Manufacture" := PackageLine."Country of Manufacture";
            PackageLine2."Export License Required" := PackageLine."Export License Required";
            PackageLine2."Export Controls Class No." := PackageLine."Export Controls Class No.";
            PackageLine2.MODIFY(TRUE);

            IF PackageLine2.OverPackError THEN BEGIN
              OverPackedStop := TRUE;
              IF GiveError THEN
                ERROR(
                  Text006,
                  PackageLine2.Type,PackageLine2."No.",PackageLine2.Description);
            END;
          UNTIL (PackageLine.NEXT = 0) OR OverPackedStop;

        IF NOT OverPackedStop THEN BEGIN
          Shipping.ClosePackage(Package,PrintLabel);

          IF PrintUCC128 AND (Package."UCC No." = '') THEN
            Package.CreatePrintUCC128Label;

          PackagesCreated := PackagesCreated + 1;
        END ELSE
          Package.DELETE(TRUE);
      END;

      EXIT(PackagesCreated);
    END;

    PROCEDURE CopyPackageAskNoOfCopies@1240030001(GiveError@1240030000 : Boolean;PrintLabel@1240030001 : Boolean) : Integer;
    VAR
      EShipInput@1240030002 : Record 14000728;
      EShipNoOfCopies@1240030003 : Page 14050101;
    BEGIN
      TESTFIELD(Closed);

      CLEAR(EShipNoOfCopies);
      EShipNoOfCopies.LOOKUPMODE(TRUE);
      IF EShipNoOfCopies.RUNMODAL = ACTION::LookupOK THEN BEGIN
        EShipNoOfCopies.GetEShipInput(EShipInput);
        EXIT(CopyPackage(EShipInput."No. of Copies",GiveError,PrintLabel));
      END ELSE
        EXIT(0);
    END;

    PROCEDURE ClearCost@41();
    BEGIN
      "Shipping Charge" := 0;
      "Accessorial Charge" := 0;
      Surcharge := 0;
      Markup := 0;
      "Base Charge" := 0;
      "Rebate Amount" := 0;
      "Discount Amount" := 0;
      "Shipping Cost" := 0;
    END;

    PROCEDURE ClearThirdPartyCost@35();
    BEGIN
      "Third Party Shipping Charge" := 0;
      "Third Party Accessorial Charge" := 0;
      "Third Party Surcharge" := 0;
      "Third Party Markup" := 0;
      "Third Party Base Charge" := 0;
      "Third Party Rebate Amount" := 0;
      "Third Party Discount Amount" := 0;
      "Third Party Shipping Cost" := 0;
    END;

    PROCEDURE TransferToThirdPartyCost@31(MarkupOnZeroShippingCost@1000000000 : Boolean);
    BEGIN
      "Third Party Accessorial Charge" := "Accessorial Charge";
      "Third Party Surcharge" := Surcharge;
      "Third Party Base Charge" := "Base Charge";
      "Third Party Rebate Amount" := "Rebate Amount";
      "Third Party Discount Amount" := "Discount Amount";
      "Third Party Shipping Cost" := "Shipping Cost";
      "Third Party Markup" := Markup;
      "Third Party Shipping Charge" := "Shipping Charge";

      "Accessorial Charge" := 0;
      Surcharge := 0;
      "Base Charge" := 0;
      "Rebate Amount" := 0;
      "Discount Amount" := 0;
      "Shipping Cost" := 0;
      IF NOT MarkupOnZeroShippingCost THEN
        Markup := 0;
      "Shipping Charge" := "Shipping Cost" + Markup + "Additional Shipping Charge";
    END;

    PROCEDURE DivideQuantityAndValueFields@38(MultiDocPackage@1240030000 : Record 14000701;VAR TotalPackage@1240030001 : Record 14000701;CorrectionFactor@1240030002 : Decimal;UseRemainingAmounts@1240030003 : Boolean);
    BEGIN
      IF UseRemainingAmounts THEN BEGIN
        "Scale Weight" := MultiDocPackage."Scale Weight" - TotalPackage."Scale Weight";
        "Calculation Weight (LBS)" :=
          MultiDocPackage."Calculation Weight (LBS)" - TotalPackage."Calculation Weight (LBS)";
        "Override Weight" := MultiDocPackage."Override Weight" - TotalPackage."Override Weight";
        "Calculation Weight" :=
          MultiDocPackage."Calculation Weight" - TotalPackage."Calculation Weight";
        "Override Volume" := MultiDocPackage."Override Volume" - TotalPackage."Override Volume";
        "Calculation Volume" :=
          MultiDocPackage."Calculation Volume" - TotalPackage."Calculation Volume";
        "Calculation Value" := MultiDocPackage."Calculation Value" - TotalPackage."Calculation Value";
        "Override Value" := MultiDocPackage."Override Value" - TotalPackage."Override Value";
        "Calculation Insured Value" :=
          MultiDocPackage."Calculation Insured Value" - TotalPackage."Calculation Insured Value";
        "Override Insured Value" :=
           MultiDocPackage."Override Insured Value" - TotalPackage."Override Insured Value";
        "Override Shipping Charge" :=
           MultiDocPackage."Override Shipping Charge" - TotalPackage."Override Shipping Charge";
        "Additional Shipping Charge" :=
           MultiDocPackage."Additional Shipping Charge" - TotalPackage."Additional Shipping Charge";
        "Shipping Charge" := MultiDocPackage."Shipping Charge" - TotalPackage."Shipping Charge";
        "Accessorial Charge" :=
          MultiDocPackage."Accessorial Charge" - TotalPackage."Accessorial Charge";
        Surcharge := MultiDocPackage.Surcharge - TotalPackage.Surcharge;
        Markup := MultiDocPackage.Markup - TotalPackage.Markup;
        "Base Charge" := MultiDocPackage."Base Charge" - TotalPackage."Base Charge";
        "Rebate Amount" := MultiDocPackage."Rebate Amount" - TotalPackage."Rebate Amount";
        "Discount Amount" := MultiDocPackage."Discount Amount" - TotalPackage."Discount Amount";
        "Shipping Cost" := MultiDocPackage."Shipping Cost" - TotalPackage."Shipping Cost";
        "COD Amount" := MultiDocPackage."COD Amount" - TotalPackage."COD Amount";
        "Third Party Shipping Charge" :=
          MultiDocPackage."Third Party Shipping Charge" - TotalPackage."Third Party Shipping Charge";
        "Third Party Accessorial Charge" :=
          MultiDocPackage."Third Party Accessorial Charge" -
          TotalPackage."Third Party Accessorial Charge";
        "Third Party Surcharge" :=
          MultiDocPackage."Third Party Surcharge" - TotalPackage."Third Party Surcharge";
        "Third Party Markup" :=
          MultiDocPackage."Third Party Markup" - TotalPackage."Third Party Markup";
        "Third Party Base Charge" :=
          MultiDocPackage."Third Party Base Charge" - TotalPackage."Third Party Base Charge";
        "Third Party Rebate Amount" :=
          MultiDocPackage."Third Party Rebate Amount" - TotalPackage."Third Party Rebate Amount";
        "Third Party Discount Amount" :=
          MultiDocPackage."Third Party Discount Amount" - TotalPackage."Third Party Discount Amount";
        "Third Party Shipping Cost" :=
          MultiDocPackage."Third Party Shipping Cost" - TotalPackage."Third Party Shipping Cost";
      END ELSE BEGIN
        "Scale Weight" := ROUND(CorrectionFactor * MultiDocPackage."Scale Weight",0.0001);
        "Calculation Weight (LBS)" :=
          ROUND(CorrectionFactor * MultiDocPackage."Calculation Weight (LBS)",0.0001);
        "Override Weight" := ROUND(CorrectionFactor * MultiDocPackage."Override Weight",0.0001);
        "Calculation Weight" := ROUND(CorrectionFactor * MultiDocPackage."Calculation Weight",0.0001);
        "Override Volume" := ROUND(CorrectionFactor * MultiDocPackage."Override Volume",0.0001);
        "Calculation Volume" := ROUND(CorrectionFactor * MultiDocPackage."Calculation Volume",0.0001);
        "Calculation Value" := ROUND(CorrectionFactor * MultiDocPackage."Calculation Value",0.01);
        "Override Value" := ROUND(CorrectionFactor * MultiDocPackage."Override Value",0.01);
        "Calculation Insured Value" :=
           ROUND(CorrectionFactor * MultiDocPackage."Calculation Insured Value",0.01);
        "Override Insured Value" :=
          ROUND(CorrectionFactor * MultiDocPackage."Override Insured Value",0.01);
        "Override Shipping Charge" :=
          ROUND(CorrectionFactor * MultiDocPackage."Override Shipping Charge",0.01);
        "Additional Shipping Charge" :=
          ROUND(CorrectionFactor * MultiDocPackage."Additional Shipping Charge",0.01);
        "Shipping Charge" := ROUND(CorrectionFactor * MultiDocPackage."Shipping Charge",0.01);
        "Accessorial Charge" := ROUND(CorrectionFactor * MultiDocPackage."Accessorial Charge",0.01);
        Surcharge := ROUND(CorrectionFactor * MultiDocPackage.Surcharge,0.01);
        Markup := ROUND(CorrectionFactor * MultiDocPackage.Markup,0.01);
        "Base Charge" := ROUND(CorrectionFactor * MultiDocPackage."Base Charge",0.01);
        "Rebate Amount" := ROUND(CorrectionFactor * MultiDocPackage."Rebate Amount",0.01);
        "Discount Amount" := ROUND(CorrectionFactor * MultiDocPackage."Discount Amount",0.01);
        "Shipping Cost" := ROUND(CorrectionFactor * MultiDocPackage."Shipping Cost",0.01);
        "COD Amount" := ROUND(CorrectionFactor * MultiDocPackage."COD Amount",0.01);
        "Third Party Shipping Charge" :=
          ROUND(CorrectionFactor * MultiDocPackage."Third Party Shipping Charge",0.01);
        "Third Party Accessorial Charge" :=
          ROUND(CorrectionFactor * MultiDocPackage."Third Party Accessorial Charge",0.01);
        "Third Party Surcharge" :=
          ROUND(CorrectionFactor * MultiDocPackage."Third Party Surcharge",0.01);
        "Third Party Markup" := ROUND(CorrectionFactor * MultiDocPackage."Third Party Markup",0.01);
        "Third Party Base Charge" :=
          ROUND(CorrectionFactor * MultiDocPackage."Third Party Base Charge",0.01);
        "Third Party Rebate Amount" :=
          ROUND(CorrectionFactor * MultiDocPackage."Third Party Rebate Amount",0.01);
        "Third Party Discount Amount" :=
          ROUND(CorrectionFactor * MultiDocPackage."Third Party Discount Amount",0.01);
        "Third Party Shipping Cost" :=
          ROUND(CorrectionFactor * MultiDocPackage."Third Party Shipping Cost",0.01);
      END;

      TotalPackage."Scale Weight" := TotalPackage."Scale Weight" + "Scale Weight";
      TotalPackage."Calculation Weight (LBS)" :=
         TotalPackage."Calculation Weight (LBS)" + "Calculation Weight (LBS)";
      TotalPackage."Override Weight" := TotalPackage."Override Weight" + "Override Weight";
      TotalPackage."Calculation Weight" := TotalPackage."Calculation Weight" + "Calculation Weight";
      TotalPackage."Override Volume" := TotalPackage."Override Volume" + "Override Volume";
      TotalPackage."Calculation Volume" := TotalPackage."Calculation Volume" + "Calculation Volume";
      TotalPackage."Calculation Value" := TotalPackage."Calculation Value" + "Calculation Value";
      TotalPackage."Override Value" := TotalPackage."Override Value" + "Override Value";
      TotalPackage."Calculation Insured Value" :=
        TotalPackage."Calculation Insured Value" + "Calculation Insured Value";
      TotalPackage."Override Insured Value" :=
        TotalPackage."Override Insured Value" + "Override Insured Value";
      TotalPackage."Override Shipping Charge" :=
        TotalPackage."Override Shipping Charge" + "Override Shipping Charge";
      TotalPackage."Additional Shipping Charge" :=
        TotalPackage."Additional Shipping Charge" + "Additional Shipping Charge";
      TotalPackage."Shipping Charge" := TotalPackage."Shipping Charge" + "Shipping Charge";
      TotalPackage."Accessorial Charge" := TotalPackage."Accessorial Charge" + "Accessorial Charge";
      TotalPackage.Surcharge := TotalPackage.Surcharge + Surcharge;
      TotalPackage.Markup := TotalPackage.Markup + Markup;
      TotalPackage."Base Charge" := TotalPackage."Base Charge" + "Base Charge";
      TotalPackage."Rebate Amount" := TotalPackage."Rebate Amount" + "Rebate Amount";
      TotalPackage."Discount Amount" := TotalPackage."Discount Amount" + "Discount Amount";
      TotalPackage."Shipping Cost" := TotalPackage."Shipping Cost" + "Shipping Cost";
      TotalPackage."COD Amount" := TotalPackage."COD Amount" + "COD Amount";
      TotalPackage."Third Party Shipping Charge" :=
        TotalPackage."Third Party Shipping Charge" + "Third Party Shipping Charge";
      TotalPackage."Third Party Accessorial Charge" :=
        TotalPackage."Third Party Accessorial Charge" + "Third Party Accessorial Charge";
      TotalPackage."Third Party Surcharge" :=
        TotalPackage."Third Party Surcharge" + "Third Party Surcharge";
      TotalPackage."Third Party Markup" := TotalPackage."Third Party Markup" + "Third Party Markup";
      TotalPackage."Third Party Base Charge" :=
         TotalPackage."Third Party Base Charge" + "Third Party Base Charge";
      TotalPackage."Third Party Rebate Amount" :=
        TotalPackage."Third Party Rebate Amount" + "Third Party Rebate Amount";
      TotalPackage."Third Party Discount Amount" :=
        TotalPackage."Third Party Discount Amount" + "Third Party Discount Amount";
      TotalPackage."Third Party Shipping Cost" :=
        TotalPackage."Third Party Shipping Cost" + "Third Party Shipping Cost";
    END;

    PROCEDURE LookupMultiDocPackage@39();
    BEGIN
      TESTFIELD("Multi Document Package");

      Package.RESET;
      Package.SETRANGE("No.","Original Package No.");
      PAGE.RUNMODAL(PAGE::Package,Package);
    END;

    PROCEDURE SetStandardSetupOptionPage@40(OptionPageNo@1000000000 : Code[20]);
    VAR
      StandardOptionSetup@1000000007 : Record 14000716;
    BEGIN
      TESTFIELD(Closed,FALSE);

      StandardOptionSetup.GET(OptionPageNo);

      IF "Shipping Agent Code" <> '' THEN
        GetShippingAgent;

      ShipperTypeMgt.PackageSetStdSetupOptionPage(Rec,ShippingAgent,OptionPageNo);

      IF StandardOptionSetup."Override Weight" <> 0 THEN
        VALIDATE("Override Weight",StandardOptionSetup."Override Weight");
      IF StandardOptionSetup."Override Volume" <> 0 THEN
        VALIDATE("Override Volume",StandardOptionSetup."Override Volume");
      IF StandardOptionSetup."Override Value" <> 0 THEN
        VALIDATE("Override Value",StandardOptionSetup."Override Value");
      IF StandardOptionSetup."Override Insured Value" <> 0 THEN
        VALIDATE("Override Insured Value",StandardOptionSetup."Override Insured Value");
      IF StandardOptionSetup."Override Shipping Charge" <> 0 THEN
        VALIDATE("Override Shipping Charge",StandardOptionSetup."Override Shipping Charge");
      IF StandardOptionSetup."Additional Shipping Charge" <> 0 THEN
        VALIDATE("Additional Shipping Charge",StandardOptionSetup."Additional Shipping Charge");
      IF StandardOptionSetup."LTL Freight Type" <> '' THEN
        VALIDATE("LTL Freight Type",StandardOptionSetup."LTL Freight Type");
      IF StandardOptionSetup."Use Dimmed Weight" THEN
        VALIDATE("Use Dim Weight",StandardOptionSetup."Use Dimmed Weight");
      IF StandardOptionSetup."Shipping Payment Type" <>
         StandardOptionSetup."Shipping Payment Type"::Prepaid
      THEN
        VALIDATE("Shipping Payment Type",StandardOptionSetup."Shipping Payment Type");
      IF StandardOptionSetup."Shipping Insurance" <>
         StandardOptionSetup."Shipping Insurance"::" "
      THEN
        VALIDATE("Shipping Insurance",StandardOptionSetup."Shipping Insurance");
      IF StandardOptionSetup."Override Length" <> 0 THEN
        VALIDATE("Override Length",StandardOptionSetup."Override Length");
      IF StandardOptionSetup."Override Width" <> 0 THEN
        VALIDATE("Override Width",StandardOptionSetup."Override Width");
      IF StandardOptionSetup."Override Height" <> 0 THEN
        VALIDATE("Override Height",StandardOptionSetup."Override Height");
      IF StandardOptionSetup."Override Dimensions" THEN
        VALIDATE("Override Dimensions",StandardOptionSetup."Override Dimensions");
      IF StandardOptionSetup."Residential Delivery" THEN
        VALIDATE("Residential Delivery",StandardOptionSetup."Residential Delivery");
      MODIFY(TRUE);

      IF StandardOptionSetup."Add Line to Package" THEN BEGIN
        PackageLine.RESET;
        PackageLine.SETRANGE("Package No.","No.");
        IF PackageLine.FIND('+') THEN
          PackageLine."Line No." := PackageLine."Line No." + 10000
        ELSE
          PackageLine."Line No." := 10000;
        PackageLine.INIT;
        PackageLine.VALIDATE(Type,PackageLine.Type::" ");
        PackageLine.Description := StandardOptionSetup."Line Description";
        PackageLine."Net Weight" := StandardOptionSetup."Line Net Weight";
        PackageLine."Gross Weight" := StandardOptionSetup."Line Gross Weight";
        PackageLine."Dim. Weight" := StandardOptionSetup."Line Dim. Weight";
        PackageLine."Value (Price)" := StandardOptionSetup."Line Value (Price)";
        PackageLine."Value (Cost)" := StandardOptionSetup."Line Value (Cost)";
        PackageLine.Volume := StandardOptionSetup."Line Volume";
        PackageLine."LTL Freight Type" := StandardOptionSetup."Line LTL Freight Type";
        PackageLine."Unit Length" := StandardOptionSetup."Line Length";
        PackageLine."Unit Width" := StandardOptionSetup."Line Width";
        PackageLine."Unit Height" := StandardOptionSetup."Line Height";
        PackageLine."Unit Cubage" := StandardOptionSetup."Line Cubage";
        PackageLine."Unit Weight" := StandardOptionSetup."Line Unit of Measure Weight";
        PackageLine."Use Unit of measure Dimensions" := StandardOptionSetup."Line Use Unit of meas. Dim.";
        IF StandardOptionSetup."Line Use Unit of meas. Dim." THEN BEGIN
          PackageLine.Length := StandardOptionSetup."Line Length";
          PackageLine.Width := StandardOptionSetup."Line Width";
          PackageLine.Height := StandardOptionSetup."Line Height";
        END;

        PackageLine.INSERT(TRUE);
      END;
    END;

    PROCEDURE PackageLevel@42() : Integer;
    VAR
      MinimumLevel@1000000000 : Integer;
      TempLevel@1000000001 : Integer;
    BEGIN
      IF "Original Package No." <> '' THEN BEGIN
        IF NOT Package.GET("Original Package No.") THEN
          EXIT(0);
      END ELSE
        Package := Rec;

      PackageLine.RESET;
      PackageLine.SETRANGE("Package No.",Package."No.");
      PackageLine.SETRANGE(Type,PackageLine.Type::"Account (G/L)",PackageLine.Type::Resource);
      PackageLine.SETFILTER("No.",'<>%1','');
      IF PackageLine.FIND('-') THEN BEGIN
        EXIT(1);
      END ELSE BEGIN
        PackageLine.SETRANGE(Type,PackageLine.Type::Package);
        IF PackageLine.FIND('-') THEN BEGIN
          REPEAT
            IF NOT Package.GET(PackageLine."No.") THEN
              EXIT(0);

            TempLevel := Package.PackageLevel;
            IF MinimumLevel = 0 THEN
              MinimumLevel := TempLevel
            ELSE
              IF TempLevel < MinimumLevel THEN
                MinimumLevel := TempLevel;

            IF MinimumLevel = 1 THEN
              EXIT(2);
          UNTIL PackageLine.NEXT = 0;
            EXIT(MinimumLevel + 1);
        END ELSE
          EXIT(1);
      END;
    END;

    PROCEDURE StartTrackingPackage@43();
    BEGIN
      Shipping.TrackPackage(Rec);
    END;

    PROCEDURE CalcInsureThroughShippingAgent@44(InsuredStandard@1240030000 : Boolean;InsuredThridParty@1240030001 : Boolean) : Boolean;
    BEGIN
      CASE "Shipping Insurance" OF
        "Shipping Insurance"::" ":
          IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
            EXIT(InsuredStandard)
          ELSE
            EXIT(InsuredThridParty);
        "Shipping Insurance"::Never:
          EXIT(FALSE);
        "Shipping Insurance"::Always:
          EXIT(TRUE);
      END;
    END;

    PROCEDURE DisplayMap@1240031001();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FIND('-') THEN
        MapMgt.MakeSelection(DATABASE::Package,GETPOSITION);
    END;

    PROCEDURE LookupShortcutDimCode@1000000001(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimVal@1000000000 : Record 349;
      CustDiv@1000000001 : Record 50007;
      CustDivFilter@1000000002 : Text;
      SLines@1000000003 : Record 37;
      GLSetup@1000000004 : Record 98;
    BEGIN
      //TPZ1435
      GLSetup.GET;
      IF GLSetup."Shortcut Dimension 5 Code" = '' THEN
        ERROR(Text50000,GLSetup.TABLECAPTION);

      DimVal.SETRANGE("Dimension Code",GLSetup."Shortcut Dimension 5 Code");
      IF PAGE.RUNMODAL(0,DimVal) = ACTION::LookupOK THEN BEGIN
        ShortcutDimCode := DimVal.Code;
      END;

      GLSetup.GET;
      IF NOT DimVal.GET(GLSetup."Shortcut Dimension 5 Code","Shortcut Dimension 5 Code") THEN
        FIELDERROR("Shortcut Dimension 5 Code",'is not valid.');
      //TPZ1435
    END;

    BEGIN
    {
      2015-03-25 TPZ416 VCHERNYA
        Table relation to State (County) table has been added to Ship-to State and Blind Ship-from State fields
      2015-03-27 TPZ208 VCHERNYA
        Check for Blocked Ship-to Address has been added
      2015-10-19 TPZ1078 TMEI
        Default Country Code to US
    }
    END.
  }
}

