OBJECT Codeunit 50066 Table39EventSubscribers
{
  OBJECT-PROPERTIES
  {
    Date=09/09/21;
    Time=[ 1:52:03 PM];
    Modified=Yes;
    Version List=TPZ000.00.00,001;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [EventSubscriber(Table,39,OnBeforeValidateEvent,"No.")]
    LOCAL PROCEDURE Tb39_No_OnValidate@1000000000(VAR Rec@1000000000 : Record 39;VAR xRec@1000000001 : Record 39;CurrFieldNo@1000000002 : Integer);
    VAR
      Item@1000000003 : Record 27;
    BEGIN
      WITH Rec DO BEGIN
        IF Type = Type::Item THEN BEGIN
            //TOP050 KT ABCSI Modification to Item Cards 01192015
          Item.GET("No.");
            Item.TESTFIELD(Blocked,FALSE);  //Standard NAV Code Commented out
            //<TPZ2172>
            {
            TESTFIELD("No.");
            IF Item."No." <> "No." THEN
              Item.GET("No.");
            IF "Document Type" <> "Document Type"::Order THEN BEGIN
              IF Item.Blocked = Item.Blocked::"3" THEN
                Item.FIELDERROR(Blocked);
            END ELSE
            //</TPZ2171>
              IF (Item.Blocked = Item.Blocked::"3") OR (Item.Blocked = Item.Blocked::"2") THEN
                Item.FIELDERROR(Blocked);
                }
            //TOP050 KT ABCSI Modification to Item Cards 01192015
        END;
      END;
    END;

    [EventSubscriber(Table,39,OnAfterValidateEvent,"No.")]
    LOCAL PROCEDURE Tb39_No_OnValidate_1@1000000001(VAR Rec@1000000000 : Record 39;VAR xRec@1000000001 : Record 39;CurrFieldNo@1000000002 : Integer);
    VAR
      Item@1000000003 : Record 27;
    BEGIN
      WITH Rec DO BEGIN
        IF Type=Type::Item THEN BEGIN
          TESTFIELD("No.");
          IF Item."No."<>"No." THEN
            Item.GET("No.");
          "Alt. UOM Code" := Item."Alt. Purch. Unit of Measure";  //TOP050 KT ABCSI Modification to Item Cards 01212015
        END;
        IF Type<>Type::" " THEN
          VALIDATE("Alt. UOM Code");  //TOP050 KT ABCSI Modification to Item Cards 01212015
      END;
    END;

    [EventSubscriber(Codeunit,50067,Tb39_OnCalcAltUOMQty)]
    LOCAL PROCEDURE Tb39_CalcAltUOMQty@1000000003(VAR Sender@1000000000 : Codeunit 50067;VAR Rec@1000000001 : Record 39;Qty@1000000002 : Decimal;VAR AltUOMQty@1000000003 : Decimal);
    BEGIN
      WITH Rec DO BEGIN
        IF "Alt. UOM Code" <> '' THEN BEGIN
          //TOP050 KT ABCSI Modification to Item Cards 01212015
          IF "Qty. per Alt. UOM" <> 0 THEN BEGIN
            IF "Qty. per Alt. UOM" <> "Qty. per Unit of Measure" THEN BEGIN
              IF "Qty. per Alt. UOM" > "Qty. per Unit of Measure" THEN
                //EXIT(ROUND(Qty / "Qty. per Alt. UOM",0.00001))
                AltUOMQty := (ROUND(Qty / "Qty. per Alt. UOM",0.00001))
              ELSE
                //EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
                AltUOMQty := (ROUND(Qty * "Qty. per Unit of Measure",0.00001));
            END ELSE
              //EXIT(Qty);
              AltUOMQty := Qty;
          END ELSE
          //EXIT(0);
          AltUOMQty := 0;
        END;
        //TOP050 KT ABCSI Modification to Item Cards 01212015
      END;
    END;

    [EventSubscriber(Codeunit,50067,Tb39_OnCalcAltUOMDirectUnitCost)]
    LOCAL PROCEDURE Tb39_CalcAltUOMDirectUnitCost@1000000002(VAR Sender@1000000000 : Codeunit 50067;VAR Rec@1000000001 : Record 39;DirectUnitCost@1000000002 : Decimal;AltUOMDirectUnitCost@1000000003 : Decimal);
    BEGIN
      WITH Rec DO BEGIN
        IF "Alt. UOM Code" <> '' THEN BEGIN
        //TOP050 KT ABCSI Modification to Item Cards 01212015
        IF "Qty. per Alt. UOM" <> 0 THEN BEGIN
          IF "Qty. per Alt. UOM" <> "Qty. per Unit of Measure" THEN BEGIN
            IF "Qty. per Alt. UOM" > "Qty. per Unit of Measure" THEN
              //EXIT(ROUND(DirectUnitCost * "Qty. per Alt. UOM",0.00001))
              AltUOMDirectUnitCost := ROUND(DirectUnitCost * "Qty. per Alt. UOM",0.00001)
            ELSE
              //EXIT(ROUND(DirectUnitCost / "Qty. per Unit of Measure",0.00001));
              AltUOMDirectUnitCost := ROUND(DirectUnitCost / "Qty. per Unit of Measure",0.00001);
          END ELSE
            //EXIT(DirectUnitCost);
            AltUOMDirectUnitCost := DirectUnitCost;
        END ELSE
          //EXIT(0);
          AltUOMDirectUnitCost := 0;

        //TOP050 KT ABCSI Modification to Item Cards 01212015
        END;
      END;
    END;

    [EventSubscriber(Codeunit,50067,Tb39_OnSetVendorItemNo)]
    LOCAL PROCEDURE Tb39_SetVendorItemNo@1000000004(VAR Sender@1000000000 : Codeunit 50067;VAR Rec@1000000001 : Record 39;ItemVend@1000000002 : Record 99);
    BEGIN
      WITH Rec DO BEGIN
      // <TPZ135>
        ItemVend.CALCFIELDS("Vendor Item Description");
        "Vendor Priority" := ItemVend."Vendor Priority";
        "Vendor Item Description" := ItemVend."Vendor Item Description";
        "Vendor Comment" := ItemVend."Vendor Comment";
        "Internal Comment" := ItemVend."Internal Comment";
      // </TPZ135>
      END;
    END;

    [EventSubscriber(Codeunit,50067,Tb39_OnCalcDUnitCostFromAltUOMDUnitCost)]
    LOCAL PROCEDURE Tb39_CalcDUnitCostFromAltUOMDUnitCost@1000000005(VAR Sender@1000000000 : Codeunit 50067;VAR Rec@1000000001 : Record 39;AltUOMDirectUnitCost@1000000002 : Decimal;VAR DirectUnitCost@1000000003 : Decimal);
    BEGIN
      WITH Rec DO BEGIN
      //TOP050 KT ABCSI Modification to Item Cards 01212015
        IF "Qty. per Alt. UOM" <> 0 THEN BEGIN
          IF "Qty. per Alt. UOM" <> "Qty. per Unit of Measure" THEN BEGIN
            IF "Qty. per Alt. UOM" > "Qty. per Unit of Measure" THEN
              //EXIT(ROUND(DirectUnitCost / "Qty. per Alt. UOM",0.00001))
              DirectUnitCost := ROUND(AltUOMDirectUnitCost / "Qty. per Alt. UOM",0.00001)
            ELSE
              //EXIT(ROUND(DirectUnitCost / "Qty. per Unit of Measure",0.00001));
              DirectUnitCost := ROUND(DirectUnitCost / "Qty. per Unit of Measure",0.00001);
          END ELSE
            //EXIT(DirectUnitCost);
            DirectUnitCost := AltUOMDirectUnitCost;
        END ELSE
          //EXIT(0);
          DirectUnitCost := 0;

        //TOP050 KT ABCSI Modification to Item Cards 01212015

      END;
    END;

    [EventSubscriber(Codeunit,50067,Tb39_OnCalcQtyFromAltUOMQty)]
    LOCAL PROCEDURE Tb39_CalcQtyFromAltUOMQty@1000000006(VAR Sender@1000000000 : Codeunit 50067;VAR Rec@1000000001 : Record 39;AltUOMQty@1000000002 : Decimal;VAR Qty@1000000003 : Decimal);
    BEGIN
      WITH Rec DO BEGIN
        //TOP050 KT ABCSI Modification to Item Cards 01212015
        IF "Qty. per Alt. UOM" <> 0 THEN BEGIN
          IF "Qty. per Alt. UOM" <> "Qty. per Unit of Measure" THEN BEGIN
            IF "Qty. per Alt. UOM" > "Qty. per Unit of Measure" THEN
              //EXIT(ROUND(Qty * "Qty. per Alt. UOM",0.00001))
              Qty := ROUND(AltUOMQty * "Qty. per Alt. UOM",0.00001)
            ELSE
              //EXIT(ROUND(Qty / "Qty. per Unit of Measure",0.00001));
              Qty := ROUND(AltUOMQty / "Qty. per Unit of Measure",0.00001);
          END ELSE
            Qty := AltUOMQty;
        END ELSE
          Qty := 0;//EXIT(0);
        //TOP050 KT ABCSI Modification to Item Cards 01212015
      END;
    END;

    [EventSubscriber(Page,54,OnAfterActionEvent,Action1000000024)]
    LOCAL PROCEDURE "Pg54_Update Drop Ship Cost"@1170000000(VAR Rec@1170000000 : Record 39);
    VAR
      PurchaseHeader@1170000001 : Record 38;
      JobQueueEntry@1170000002 : Record 472;
      JobQueueCat@1170000003 : Record 471;
      UnitCost@1170000004 : Text;
      Window@1170000005 : DotNet "'Microsoft.VisualBasic, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.Microsoft.VisualBasic.Interaction" RUNONCLIENT;
    BEGIN
      //<TPZ2643>
      WITH Rec DO BEGIN
        PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,"Document No.");
        PurchaseHeader.TESTFIELD(Status,PurchaseHeader.Status::Open);
        COMMIT;
        UnitCost:= Window.InputBox('Input Unit Cost:','INPUT','',100,100);
        IF UnitCost <> '' THEN BEGIN
          JobQueueEntry.INIT();
          JobQueueEntry."Object Type to Run" := JobQueueEntry."Object Type to Run"::Codeunit;
          JobQueueEntry."Object ID to Run" := CODEUNIT::"Update Sales Price Drop Ship";
          JobQueueEntry."Parameter String":= FORMAT("Document Type")+','+"Document No."+','+FORMAT("Line No.")+','+UnitCost;
          JobQueueEntry.ID:=CREATEGUID;
          JobQueueCat.GET('MISC');
          JobQueueEntry."Job Queue Category Code" := 'MISC';
          JobQueueEntry."Timeout (sec.)" := 7200;
          JobQueueEntry."Earliest Start Date/Time" := CURRENTDATETIME;
          JobQueueEntry.Priority := 1000;
          JobQueueEntry.Description := 'Update Sales Price Drop Shipment';
          JobQueueEntry.INSERT(TRUE);
          CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue-DropShip",JobQueueEntry);
        END;
      END;
        //</TPZ2643>
    END;

    LOCAL PROCEDURE CreateTrackingLine@37009703(PurchaseLine@1170000000 : Record 39);
    VAR
      ReservationEntry@1102615000 : Record 337;
      ReservationEntryToDelete@1102615002 : Record 337;
      EntryNo@1102615001 : Integer;
    BEGIN
      // LM17.10.01 -->
      ReservationEntryToDelete.RESET;
      ReservationEntryToDelete.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype","Source Batch Name","Source Prod. Order Line","Reservation Status","Shipment Date","Expected Receipt Date");
      ReservationEntryToDelete.SETRANGE("Source ID",PurchaseLine."Document No.");
      ReservationEntryToDelete.SETRANGE("Source Ref. No.",PurchaseLine."Line No.");
      ReservationEntryToDelete.SETRANGE("Source Type",39) ;
      ReservationEntryToDelete.SETRANGE("Source Subtype",1);
      ReservationEntryToDelete.SETRANGE("Item No.",PurchaseLine."No.");
      //ReservationEntryToDelete.SETRANGE("Lot No.",PurchaseLine."Lot No.");
      IF ReservationEntryToDelete.FINDSET THEN
        ReservationEntryToDelete.DELETEALL;
      ReservationEntry.RESET;
      IF ReservationEntry.FINDLAST THEN
        EntryNo := ReservationEntry."Entry No." + 1;
      ReservationEntry.RESET;
      ReservationEntry.INIT;
      ReservationEntry."Entry No." := EntryNo;
      ReservationEntry."Item No." := PurchaseLine."No.";
      ReservationEntry."Location Code" := PurchaseLine."Location Code";
      ReservationEntry.VALIDATE("Quantity (Base)",PurchaseLine."Quantity (Base)");
      ReservationEntry."Reservation Status" := ReservationEntry."Reservation Status"::Surplus;
      ReservationEntry."Creation Date" := TODAY;
      ReservationEntry."Source Type" := 39 ;
      ReservationEntry."Source Subtype" := 1;
      ReservationEntry."Source ID" := PurchaseLine."Document No.";
      ReservationEntry."Source Ref. No." := PurchaseLine."Line No.";
      ReservationEntry."Expected Receipt Date":= PurchaseLine."Expected Receipt Date";
      ReservationEntry."Created By" := USERID;
      ReservationEntry."Changed By" := USERID;
      ReservationEntry.Positive := TRUE ;
      ReservationEntry."Qty. per Unit of Measure" := PurchaseLine."Qty. per Unit of Measure";
      //ReservationEntry."Lot No." := PurchaseLine."Lot No.";
      ReservationEntry."Item Tracking" := ReservationEntry."Item Tracking"::"Lot No.";
      //ReservationEntry."Expiration Date" := PurchaseLine."Expiry Date";
      //ReservationEntry."Lot Category" := LotCatagory;
      ReservationEntry.INSERT;
      AutoInsertLotInformation(ReservationEntry);
      // LM17 <-
    END;

    LOCAL PROCEDURE AutoInsertLotInformation@37009701(ReservationEntry@50500 : Record 337);
    VAR
      LotInformation@1102615000 : Record 6505;
    BEGIN
      // LM17-->
      LotInformation.RESET;
      IF ReservationEntry."Lot No." <> '' THEN BEGIN
        IF NOT LotInformation.GET(ReservationEntry."Item No.",ReservationEntry."Variant Code",ReservationEntry."Lot No.")THEN BEGIN
          LotInformation.INIT;
          LotInformation.VALIDATE("Item No.",ReservationEntry."Item No.");
          LotInformation.VALIDATE("Variant Code",ReservationEntry."Variant Code");
          LotInformation.VALIDATE("Lot No.",ReservationEntry."Lot No.");
          LotInformation.INSERT(TRUE);
          LotInformation.MODIFY;
        END;
      END;
      // LM17 <--
    END;

    [EventSubscriber(Table,39,OnAfterAssignFixedAssetValues)]
    LOCAL PROCEDURE Tb39_OnAfterAssignFixedAssetValues@1000000007(VAR PurchaseLine@1000000000 : Record 39;FixedAsset@1000000001 : Record 5600);
    VAR
      FADepreciationBook@1000000002 : Record 5612;
    BEGIN
      //>>001 TPZ3306
      FADepreciationBook.SETRANGE("FA No.",PurchaseLine."No.");
      IF FADepreciationBook.FINDFIRST THEN BEGIN
        PurchaseLine.VALIDATE("Depreciation Book Code",FADepreciationBook."Depreciation Book Code");
        PurchaseLine.MODIFY;
      END;
      //<<001 TPZ3306
    END;

    BEGIN
    END.
  }
}

