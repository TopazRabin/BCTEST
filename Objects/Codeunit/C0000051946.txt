OBJECT Codeunit 51946 Codeunit414EventSubscriber
{
  OBJECT-PROPERTIES
  {
    Date=10/22/21;
    Time=[ 7:13:31 AM];
    Modified=Yes;
    Version List=NAVEVENT,TPZ2829,010;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000000000 : TextConst 'ENU=The Sales Line %1 has different location code than Sales Header %2. Do you want to proceed?';
      Text51001@1000000001 : TextConst 'ENU=Do you want to round the quantity up to %1 %2 for Line no. %3, Item no. %4';
      TextRNDERROR@1000000003 : TextConst 'ENU=Quantity must be round of %1 for line no. %2, Item no. %3';

    [EventSubscriber(Codeunit,414,OnBeforeReleaseSalesDoc)]
    PROCEDURE CU414_OnRun@1000000026(VAR SalesHeader@1000000000 : Record 36;PreviewMode@1000000001 : Boolean);
    VAR
      cust@1000000002 : Record 18;
      tmpSalesLine@1000000003 : Record 37;
      RetrunReason@1000000004 : Record 6635;
      TextApplError@1000000005 : TextConst 'ENU="Document %1 Line No. %2 is not assigned to a related Document - you must delete the line and use the Get Posted Document Lines  Function "';
    BEGIN
      WITH SalesHeader DO BEGIN
        //<TPZ1666>
        cust.GET("Sell-to Customer No.");
        cust.CheckBlockedCustOnDocs(cust,"Document Type",FALSE,FALSE);
        //<TPZ1666>
          //<TPZ118>  <TPZ1692>
        tmpSalesLine.RESET();
        tmpSalesLine.SETRANGE("Document Type","Document Type"::"Return Order");
        tmpSalesLine.SETRANGE("Document No.","No.");
        tmpSalesLine.SETRANGE(Type,tmpSalesLine.Type::Item);
        tmpSalesLine.SETFILTER(Quantity,'<>0');
        IF tmpSalesLine.FIND('-') THEN
          REPEAT
            RetrunReason.GET(tmpSalesLine."Return Reason Code");
            IF RetrunReason.Type=RetrunReason.Type::Quality THEN
               tmpSalesLine.TESTFIELD("QA Sub Reason Code");

         UNTIL tmpSalesLine.NEXT=0;
        //</TPZ118>
        //</TPZ1692>

        //<TPZ1636>
        tmpSalesLine.RESET();
        tmpSalesLine.SETRANGE("Document Type","Document Type"::"Return Order");
        tmpSalesLine.SETRANGE("Document No.","No.");
        tmpSalesLine.SETRANGE(Type,tmpSalesLine.Type::Item);
        tmpSalesLine.SETRANGE("Appl.-from Item Entry",0);
        tmpSalesLine.SETFILTER(Quantity,'<>0');
        IF tmpSalesLine.FIND('-') THEN BEGIN
          REPEAT
            RetrunReason.GET(tmpSalesLine."Return Reason Code");
            IF (RetrunReason.Type<>RetrunReason.Type::"Annual Return") THEN
               ERROR(TextApplError,tmpSalesLine."Document No.",tmpSalesLine."Line No.");
          UNTIL tmpSalesLine.NEXT=0;
        END;
        //</TPZ1636>


        //<TPZ1454>
        IF ("Shipping Payment Type" = "Shipping Payment Type"::"Third Party") AND ("Document Type" = "Document Type"::Order)  THEN
          TESTFIELD("Third Party Ship. Account No.");
        //<TPZ1454>
         // <TPZ930>
        CU414_ValidateSalesLines(SalesHeader);
        // </TPZ930>
      END;
    END;

    [EventSubscriber(Codeunit,51945,CU414_OnRun)]
    PROCEDURE CU414_OnRun_1@1000000027(VAR SalesHeader@1000000000 : Record 36;VAR RunFromEship@1000000001 : Boolean);
    VAR
      Cust@1000000006 : Record 18;
      tmpLocation@1000000010 : Record 14;
      ShippingAgents@1000000004 : Record 291;
      SalesSetup@1000000005 : Record 311;
      CalendarMgmt@1000000009 : Codeunit 7600;
      WarehouseRequest@1000000003 : Record 5765;
      LocationBackup@1000000002 : Record 14;
      Division@1000000007 : Record 51001;
      SalesSplitOrder@1000000008 : Codeunit 51409;
      PaymentTerms@1000000011 : Record 3;
      Text51095@1000000013 : TextConst 'ENU=Payment Term %1 cannot be combined with %2.';
      UserSetup@1000000012 : Record 91;
    BEGIN
      WITH SalesHeader DO BEGIN
          //<TPZ1530>
        SalesSetup.GET;
        //<TPZ3377>
        IF Status = Status::"Pending Approval" THEN BEGIN
          "Shipment Date" := WORKDATE;
          MODIFY();
        END;
        //</TPZ3377>

         IF NOT RunFromEship  THEN BEGIN
          tmpLocation.GET("Location Code");
          //IF ("Document Type" = "Document Type"::Order) AND (tmpLocation."Shipping Location") AND (("Shipment Date")<WORKDATE) THEN BEGIN //TPZ1894 EB
          IF ("Document Type" = "Document Type"::Order) AND (tmpLocation."Shipping Location" OR tmpLocation."Auto Pick") AND (("Shipment Date")<WORKDATE) THEN BEGIN //TPZ1894 EB TPZ3271
              "Shipment Date" := WORKDATE;
              MODIFY();
          END;
        END;
        //</TPZ1530>
        //<TPZ1953>
         //IF ("Delivery Date"<=WORKDATE) AND ("Delivery Date"<>0D)  THEN BEGIN //<TPZ2257>
             tmpLocation.GET("Location Code");
             ShippingAgents.GET("Shipping Agent Code");
             UserSetup.GET(USERID);//<TPZ3269>
             IF ("Document Type" = "Document Type"::Order) AND (tmpLocation."Shipping Location") AND (ShippingAgents.Type=ShippingAgents.Type::"Local")
                AND (NOT UserSetup."Warehouse Employee") THEN BEGIN  //EB  TMW //<TPZ3269>
                "Delivery Date":=CalendarMgmt.CalcDateBOC('+1WD',"Shipment Date",0,'1','', 0, '', '', FALSE);
                 MODIFY;
              END;
         //END;
        //</TPZ1953>

        // <TPZ573>
        IF SalesSetup."Calc. Free Freight" THEN
          CODEUNIT.RUN(CODEUNIT::"Sales-Calc. Free Freight",SalesHeader);
        // </TPZ573>


        //TOP090 KT ABCSI 01072015

        IF SalesSetup."Ext. Doc. No. Mandatory" AND
           (("Document Type" = "Document Type"::Order) OR ("Document Type" = "Document Type"::"Return Order")) //<TPZ1929)
        THEN
          TESTFIELD("External Document No.");
        //TOP090 KT ABCSI 01072015

        //<TPZ1576>
        IF ("Document Type" = "Document Type"::Quote) AND ("Shortcut Dimension 5 Code"='L') THEN
            TESTFIELD("Job Name");
        //</TPZ1576>

        // <TPZ426>

        IF SalesSetup."Validate Ext. Doc. No. Format" AND
           ("Document Type" = "Document Type"::Order)
        THEN
          CU414_ValidateExtDocNoFormat(SalesHeader);

        // <TPZ1118>
        IF Cust.GET("Sell-to Customer No.") AND
           Cust."Ship-to Code Mandatory" AND
           (("Document Type" = "Document Type"::Order) OR
            ("Document Type" = "Document Type"::Invoice))
        // <TPZ1118>
        THEN BEGIN    //<TPZ1424
          TESTFIELD("Ship-to Code");
          TESTFIELD("Ship-to Name");
          TESTFIELD("Ship-to Address");

          //<TPZ1424>
          IF ("Shortcut Dimension 5 Code" <> 'I') AND
            (("Ship-to Country/Region Code" = 'US') OR
            ("Ship-to Country/Region Code"  = ''))
          THEN BEGIN
            TESTFIELD("Ship-to City");
            TESTFIELD("Ship-to County");
            TESTFIELD("Ship-to Post Code");
          END;
        END;
        // </TPZ426>

        //<TPZ1424>
        IF (("Document Type" = "Document Type"::Order) OR
            ("Document Type" = "Document Type"::Invoice))
        THEN BEGIN
          TESTFIELD("Shipping Agent Code");
        END;
        //</TPZ1424>

        // <TPZ159>
        IF SalesSetup."Dupl. Whse. Rel. No. Warning" AND
           ("Document Type" = "Document Type"::Order)
        THEN
          CU414_ValidateWhseReleaseNo(SalesHeader);
        // </TPZ159>

        // <TPZ1145>
        IF Division.GET("Shortcut Dimension 5 Code") THEN BEGIN
          IF Division."OSR Code Mandatory" THEN
            TESTFIELD("Salesperson Code");

          IF Division."Mfr. Rep. Code Mandatory" THEN
            TESTFIELD("Mfr. Rep. Code");
        END;
        // </TPZ1145>


        // <TPZ844>
        IF SalesSetup."One Location per Order" AND
           ("Document Type" = "Document Type"::Order)
        THEN
          CU414_ValidateOneLocation(SalesHeader);
        // </TPZ844>


        //2016-03-14 TPZ1256 EBAGIM
        IF "Document Type" IN ["Document Type"::"Credit Memo","Document Type"::Invoice,"Document Type"::"Return Order"] THEN
            CU414_ValidateOneDivision(SalesHeader);

        //2016-03-14 TPZ1256 EBAGIM

        //<TPZ2782>
          IF ("Document Type" = "Document Type"::Order) AND (Status = Status::Open) THEN BEGIN
            LocationBackup.RESET;
            IF LocationBackup.GET("Location Code") AND (LocationBackup."Backup Location Code" <> '') THEN
            SalesSplitOrder.CreateSplitOrder(SalesHeader);
          END;
        ///<TPZ2782>

        // <TPZ884>
        IF PaymentTerms.GET("Payment Terms Code") AND
           PaymentTerms."Do Not Allow Blind Shipment" AND
           "Blind Shipment"
        THEN
          ERROR(Text51095,PaymentTerms.Code,FIELDCAPTION("Blind Shipment"));

        IF PaymentTerms.GET("Payment Terms Code") AND
           PaymentTerms."Do Not Allow Double Bl. Shpt." AND
           "Double Blind Shipment"
        THEN
          ERROR(Text51095,PaymentTerms.Code,FIELDCAPTION("Double Blind Shipment"));
        // </TPZ884>
      END;
    END;

    [EventSubscriber(Codeunit,51945,CU414_OnRun_1)]
    PROCEDURE CU414_OnRun_2@1000000028(VAR SalesHeader@1000000000 : Record 36;VAR RunFromEship@1000000001 : Boolean;VAR CreateWhseShpt@1000000002 : Boolean);
    VAR
      ArchiveManagement@1000000005 : Codeunit 5063;
      SalesSetup@1000000004 : Record 311;
      WhseRqst@1000000003 : Record 5765;
      EmailListEntry@1000000006 : Record 14000908;
      Salesperson@1000000007 : Record 13;
      GetSourceDocOutbound@1000000008 : Codeunit 5752;
      tmpSalesLine@1000000009 : Record 37;
      RetrunReason@1000000010 : Record 6635;
      EMailSetup@1000000011 : Record 14000905;
      SalesReturnEmail@1000000012 : Report 51009;
      WarehouseRequest@1000000014 : Record 5765;
      SalesOrderEMail@1000000013 : Report 14000901;
      Location@1000000015 : Record 14;
    BEGIN
      WITH SalesHeader DO BEGIN
        //TOP170 KT ABCSI Sales Order Updates 04012015
        SalesSetup.GET;
        IF SalesSetup."Archive Quotes and Orders" THEN
          ArchiveManagement.ArchSalesDocumentNoConfirm(SalesHeader);
        //TOP170 KT ABCSI Sales Order Updates 04012015


        //TOP150 - KT ABCSI Sales Order Margin Review 04032015 Start

        IF (NOT RunFromEship) AND (CreateWhseShpt) THEN BEGIN
            IF ("Document Type" IN ["Document Type"::Order]) THEN BEGIN
              WhseRqst.SETRANGE(Type,WhseRqst.Type::Outbound);
              WhseRqst.SETRANGE("Source Type",DATABASE::"Sales Line");
              WhseRqst.SETRANGE("Source Subtype","Document Type");
              WhseRqst.SETRANGE("Source No.","No.");
              WhseRqst.SETRANGE("Document Status",WhseRqst."Document Status"::Released);
              IF (NOT WhseRqst.ISEMPTY) AND (NOT CU414_CheckifWhseShptExists(SalesHeader)) THEN
                GetSourceDocOutbound.CreateFromSalesOrder(SalesHeader);
            END;
        END;
        //TOP150 - KT ABCSI Sales Order Margin Review 04032015 End
        //<TPZ1576>
        CALCFIELDS(Amount);
        IF ("Document Type" = "Document Type"::Quote) AND ("Shortcut Dimension 5 Code"='L') AND ("E-Mail Confirmation Handled"=FALSE) THEN BEGIN
          IF Salesperson.GET("RSM Code") AND (Salesperson."Send Quote Confirmation") AND (Amount>=SalesSetup."Min Quote Ntf Amount") THEN BEGIN
              EmailListEntry.INIT();
              EmailListEntry."Table ID":=36;
              EmailListEntry.Type:="Document Type";
              EmailListEntry.Code:= "No.";
              EmailListEntry."Entry No.":=100000;

              EmailListEntry."E-Mail":=Salesperson."E-Mail";
              EmailListEntry."Sales Quote Conf. E-Mail":=EmailListEntry."Sales Quote Conf. E-Mail"::"To";
              EmailListEntry.INSERT();
              SalesOrderEMail.InitializeRequest("Document Type","No.",FALSE);
              SalesOrderEMail.USEREQUESTPAGE(FALSE);
              SalesOrderEMail.RUNMODAL;

           END;
           //>>002 TPZ3105
           IF Salesperson.GET("Salesperson Code") AND (Salesperson."Send Quote Confirmation") AND (Amount>=SalesSetup."Min Quote Ntf Amount") THEN BEGIN
              EmailListEntry.INIT();
              EmailListEntry."Table ID":=36;
              EmailListEntry.Type:="Document Type";
              EmailListEntry.Code:= "No.";
              EmailListEntry."Entry No.":=100000;

              EmailListEntry."E-Mail":=Salesperson."E-Mail";
              EmailListEntry."Sales Quote Conf. E-Mail":=EmailListEntry."Sales Quote Conf. E-Mail"::"To";
              EmailListEntry.INSERT();
              SalesOrderEMail.InitializeRequest("Document Type","No.",FALSE);
              SalesOrderEMail.USEREQUESTPAGE(FALSE);
              SalesOrderEMail.RUNMODAL;

            END;
          END;
            //<<002 TPZ3105
        //</TPZ1576>

        //<TPZ118>

        IF ("Document Type" = "Document Type"::"Return Order") AND ("E-Mail Confirmation Handled"=FALSE)  THEN BEGIN
              tmpSalesLine.RESET();
              tmpSalesLine.SETRANGE("Document Type","Document Type"::"Return Order");
              tmpSalesLine.SETRANGE("Document No.","No.");
              tmpSalesLine.SETRANGE(Type,tmpSalesLine.Type::Item);
              tmpSalesLine.SETFILTER(Quantity,'<>0');
              IF tmpSalesLine.FIND('-') THEN BEGIN
                 RetrunReason.GET(tmpSalesLine."Return Reason Code");
                 IF RetrunReason.Type=RetrunReason.Type::Quality THEN BEGIN
                      EmailListEntry.INIT();
                      EmailListEntry."Entry No.":=100000;
                      EmailListEntry."Table ID":=36;
                      EmailListEntry.Type:="Document Type";
                      EmailListEntry.Code:= "No.";
                      EMailSetup.GET(' ');
                      EmailListEntry."E-Mail":=EMailSetup."Qualty Return Conf. E-Mail";
                      EmailListEntry."Sales Ret. Order Conf. E-Mail":=EmailListEntry."Sales Ret. Order Conf. E-Mail"::"To";
                      EmailListEntry.INSERT();
                      SalesReturnEmail.InitializeRequest("Document Type","No.",FALSE);

                      SalesReturnEmail.USEREQUESTPAGE(FALSE);
                      SalesReturnEmail.RUNMODAL;

                  END;

              END;
            END;
        //</TPZ118>

        //TMEI BEG 070215 - WMS Mod
        CU414_UpdateOutboundWhseRequest(SalesHeader);
        //TMEI END 070215

        //<TPZ1942>
        CU414_CheckSalesLineQtyRounding(SalesHeader);
        //</TPZ1942>
        //<TPZ2673>
        WarehouseRequest.RESET;
        WarehouseRequest.SETRANGE("Source Type",37);
        WarehouseRequest.SETRANGE("Source Document",WarehouseRequest."Source Document"::"Sales Order");
        WarehouseRequest.SETRANGE("Source No.",SalesHeader."No.");
        //WarehouseRequest.SETRANGE("Activity Status",WarehouseRequest."Activity Status"::" ");//EB
        IF WarehouseRequest.FINDFIRST THEN
          IF SalesHeader."Document Type"=SalesHeader."Document Type"::Order THEN BEGIN
            IF Location.GET(SalesHeader."Location Code") THEN BEGIN
              IF Location."Auto Pick" THEN BEGIN
                CU414_CreateJobQueueforAutoPick(SalesHeader);
                //<TPZ2701>
                //IF CU414_PickEmailExists(SalesHeader) THEN //VAH bug fix
                  //CU414_CreateJobQueueForSendingPick(SalesHeader);
                //</TPZ2701>
              END;
            END;
          END;
        //</TPZ2673>

      END;
    END;

    [EventSubscriber(Codeunit,51945,CU414_PerformManualCheckAndRelease)]
    PROCEDURE CU414_PerformManualCheckAndRelease@1000000029(VAR SalesHeader@1000000000 : Record 36);
    VAR
      Cust@1000000001 : Record 18;
      SalesLine@1000000002 : Record 37;
      SalesLine1@1000000003 : Record 37;
      Rec_SalesLine@1000000009 : Record 37;
      tmpLocation@1000000004 : Record 14;
      ShippingAgents@1000000005 : Record 291;
      CalendarMgmt@1000000006 : Codeunit 7600;
      Table37EventSubscribers@1000000007 : Codeunit 50077;
      ItemTypeCheck@1000000008 : Record 27;
      Item@1000000010 : Record 27;
      RoundedUpQty@1000000011 : Decimal;
      UserSetup@1000000012 : Record 91;
    BEGIN
      WITH SalesHeader DO BEGIN
        //<TPZ3183>
        CU414_DuplicateSanaPOCheck(SalesHeader);
        //</TPZ3183>
        //<TPZ2247>
         Cust.GET("Sell-to Customer No.");
         Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE);
        //</TPZ2247>
        //>>TPZ2893
         Rec_SalesLine.RESET;
         Rec_SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
         Rec_SalesLine.SETRANGE("Document No.",SalesHeader."No.");
         IF Rec_SalesLine.FINDSET THEN REPEAT
           IF   ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND
             (Rec_SalesLine.Type = Rec_SalesLine.Type::Item) AND
             (Rec_SalesLine.Quantity <> 0) AND
             Item.GET(Rec_SalesLine."No.") AND
             (Item."Sales Order Multiple" <> 0) AND
             (Rec_SalesLine."Outstanding Quantity" <> 0)
           AND (NOT Item."Override Sales Order Multiple")  //TPZ2899
          THEN BEGIN
            IF Rec_SalesLine.Quantity MOD Item."Sales Order Multiple" <> 0 THEN BEGIN
              ERROR(TextRNDERROR,Item."Sales Order Multiple",Rec_SalesLine."Line No.",Item."No.");
            END;
          END;
         UNTIL Rec_SalesLine.NEXT = 0;
        //<<TPZ2893
         //TOP010E KT ABCSI Additional Stock Status 07282015
        IF ("Document Type" = "Document Type"::Quote) AND ("Lock Price") THEN BEGIN
          SalesLine.SETRANGE("Document Type","Document Type");
          SalesLine.SETRANGE("Document No.","No.");
          IF SalesLine.FINDSET THEN REPEAT
            IF SalesLine."Actual Unit Price" <> 0 THEN
             // SalesLine.UpdateLastSalesPrice(SalesLine);
              Table37EventSubscribers.Tb37_UpdateLastSalesPrice(SalesLine);
          UNTIL SalesLine.NEXT = 0;
        END;
        //TOP010E KT ABCSI Additional Stock Status 07282015

        //<TPZ2482>
        IF ("Document Type" = "Document Type"::Order) THEN BEGIN
            SalesLine1.SETRANGE("Document Type","Document Type");
            SalesLine1.SETRANGE("Document No.","No.");
            IF SalesLine1.FINDSET THEN REPEAT
              ItemTypeCheck.RESET;
              IF ItemTypeCheck.GET(SalesLine1."No.") THEN BEGIN
                IF ItemTypeCheck.Type = ItemTypeCheck.Type :: Service THEN BEGIN
                  SalesLine1.VALIDATE("Qty. to Ship",SalesLine1.Quantity);
                  SalesLine1.MODIFY(TRUE);
                END;
              END;
            UNTIL SalesLine1.NEXT = 0;
          END;
        //</TPZ2482>
        //<TPZ1530>
        tmpLocation.GET("Location Code");
        //IF ("Document Type" = "Document Type"::Order) AND (tmpLocation."Shipping Location") AND (("Shipment Date")<WORKDATE) THEN BEGIN //TPZ1894 EB
        IF ("Document Type" = "Document Type"::Order) AND (tmpLocation."Shipping Location" OR tmpLocation."Auto Pick") AND (("Shipment Date")<WORKDATE) THEN BEGIN //TPZ1894 EB TPZ3271
            "Shipment Date" := WORKDATE;
            MODIFY();
        END;
        //</TPZ1530>
        //<TPZ1927>  <TPZ1970>
        ShippingAgents.GET("Shipping Agent Code");
        UserSetup.GET(USERID);//<TPZ3269>
          IF ("Document Type" = "Document Type"::Order) AND (tmpLocation."Shipping Location") AND (ShippingAgents.Type=ShippingAgents.Type::"Local")
             AND (NOT UserSetup."Warehouse Employee")  THEN BEGIN  //EB  TMW //<TPZ3269>
            "Delivery Date":=CalendarMgmt.CalcDateBOC('+1WD',"Shipment Date",0,'1','', 0, '', '', FALSE);
              MODIFY;
          END;

       CU414_ItemShipRestriction(SalesHeader);//<TPZ3151>

      END;
    END;

    [EventSubscriber(Codeunit,51945,CU414_PerformManualCheckAndRelease_1)]
    PROCEDURE CU414_PerformManualCheckAndRelease_1@1000000030(VAR SalesHeader@1000000000 : Record 36);
    VAR
      SalesSetup@1000000001 : Record 311;
      Cust@1000000002 : Record 18;
      Division@1000000003 : Record 51001;
      PaymentTerms@1000000004 : Record 3;
      Text51095@1000000005 : TextConst 'ENU=Payment Term %1 cannot be combined with %2.';
    BEGIN
      WITH SalesHeader DO BEGIN
        //TOP090 KT ABCSI - Customer PO Mandatory 06042015
          SalesSetup.GET;
          IF SalesSetup."Ext. Doc. No. Mandatory" AND
             (("Document Type" = "Document Type"::Order) OR ("Document Type" = "Document Type"::"Return Order")) //<VSO1929)
          THEN
            TESTFIELD("External Document No.");
          //TOP090 KT ABCSI - Customer PO Mandatory 06042015

          // <TPZ426>
          IF SalesSetup."Validate Ext. Doc. No. Format" AND
            ("Document Type" = "Document Type"::Order)
          THEN
            CU414_ValidateExtDocNoFormat(SalesHeader);

          // <TPZ1118>
          IF Cust.GET("Sell-to Customer No.") AND
             Cust."Ship-to Code Mandatory" AND
             (("Document Type" = "Document Type"::Order) OR
              ("Document Type" = "Document Type"::Invoice))
          // <TPZ1118>
          THEN BEGIN    //<TPZ1424
            TESTFIELD("Ship-to Code");
            TESTFIELD("Ship-to Name");
            TESTFIELD("Ship-to Address");

            //<TPZ1424>
         IF ("Shortcut Dimension 5 Code" <> 'I') AND
            (("Ship-to Country/Region Code" = 'US') OR
            ("Ship-to Country/Region Code"  = ''))
          THEN BEGIN
              TESTFIELD("Ship-to City");
              TESTFIELD("Ship-to County");
              TESTFIELD("Ship-to Post Code");
            END;
          END;
          // </TPZ426>

          //<TPZ1424>
          IF (("Document Type" = "Document Type"::Order) OR
              ("Document Type" = "Document Type"::Invoice))
          THEN BEGIN
            TESTFIELD("Shipping Agent Code");
          END;
          //</TPZ1424>

          // <TPZ159>
          IF SalesSetup."Dupl. Whse. Rel. No. Warning" AND
            ("Document Type" = "Document Type"::Order)
          THEN
            CU414_ValidateWhseReleaseNo(SalesHeader);
          // </TPZ159>

          // <TPZ1145>
          IF Division.GET("Shortcut Dimension 5 Code") THEN BEGIN
            IF Division."OSR Code Mandatory" THEN
              TESTFIELD("Salesperson Code");

            IF Division."Mfr. Rep. Code Mandatory" THEN
              TESTFIELD("Mfr. Rep. Code");
          END;
          // </TPZ1145>

          // <TPZ844>
          IF SalesSetup."One Location per Order" THEN
            CU414_ValidateOneLocation(SalesHeader);
          // </TPZ844>

          // <TPZ884>
          IF PaymentTerms.GET("Payment Terms Code") AND
             PaymentTerms."Do Not Allow Blind Shipment" AND
             "Blind Shipment"
          THEN
            ERROR(Text51095,PaymentTerms.Code,FIELDCAPTION("Blind Shipment"));

          IF PaymentTerms.GET("Payment Terms Code") AND
             PaymentTerms."Do Not Allow Double Bl. Shpt." AND
             "Double Blind Shipment"
          THEN
            ERROR(Text51095,PaymentTerms.Code,FIELDCAPTION("Double Blind Shipment"));
          // </TPZ884>

          // <TPZ930>
          CU414_ValidateSalesLines(SalesHeader);
          // </TPZ930>

          //<TPZ1942>
          //CheckSalesLineQtyRounding(SalesHeader);
          //</TPZ1942>
      END;
    END;

    [EventSubscriber(Codeunit,51945,CU414_PerformManualReopen)]
    PROCEDURE CU414_PerformManualReopen@1000000031(VAR SalesHeader@1000000000 : Record 36);
    BEGIN

      CU414_ClearWhseReleaseNo(SalesHeader);//<TPZ2464>
    END;

    PROCEDURE CU414_CheckifWhseShptExists@1000000040(SalesHeader@1000000000 : Record 36) : Boolean;
    VAR
      SalesLine@1000000001 : Record 37;
      Location@1000000002 : Record 14;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETFILTER("No.",'<>%1','');
      IF SalesLine.FINDFIRST THEN REPEAT
        SalesLine.CALCFIELDS(SalesLine."Whse. Outstanding Qty. (Base)");
        IF Location.GET(SalesLine."Location Code") THEN BEGIN
          IF (Location.RequireShipment(SalesLine."Location Code")) THEN
            IF SalesLine."Outstanding Qty. (Base)" <= SalesLine."Whse. Outstanding Qty. (Base)" THEN
              EXIT(TRUE)
        END;
      UNTIL SalesLine.NEXT = 0;

      EXIT(FALSE);
    END;

    PROCEDURE CU414_ValidateExtDocNoFormat@1000000039(SalesHeader@1000000000 : Record 36);
    VAR
      Cust@1000000001 : Record 18;
      ShipToAddr@1000000002 : Record 222;
      Text51096@1000000003 : TextConst 'ENU=doesn''t match %1 ''%2''';
    BEGIN
      // <TPZ426>
      WITH SalesHeader DO BEGIN
        IF "Ship-to Code" <> '' THEN BEGIN
          ShipToAddr.GET("Sell-to Customer No.","Ship-to Code");
          IF ShipToAddr."External Document No. Mask" <> '' THEN
            IF NOT CU414_ValidateExtDocNoUsingMask("External Document No.",ShipToAddr."External Document No. Mask") THEN
              FIELDERROR(
                "External Document No.",
                STRSUBSTNO(
                  Text51096,
                  ShipToAddr.FIELDCAPTION("External Document No. Mask"),
                  ShipToAddr."External Document No. Mask"));
        END ELSE BEGIN
          Cust.GET("Sell-to Customer No.");
          IF Cust."External Document No. Mask" <> '' THEN
            IF NOT CU414_ValidateExtDocNoUsingMask("External Document No.",Cust."External Document No. Mask") THEN
              FIELDERROR(
                "External Document No.",
                STRSUBSTNO(
                  Text51096,
                  Cust.FIELDCAPTION("External Document No. Mask"),
                  ShipToAddr."External Document No. Mask"));
        END;
      END;
      // </TPZ426>
    END;

    LOCAL PROCEDURE CU414_ValidateExtDocNoUsingMask@1000000038(ExternalDocumentNo@1000000000 : Code[35];ExternalDocumentNoMask@1000000001 : Code[35]) : Boolean;
    VAR
      Index@1000000002 : Integer;
    BEGIN
      // <TPZ426>
      FOR Index := 1 TO STRLEN(ExternalDocumentNoMask) DO
        IF (ExternalDocumentNoMask[Index] = '0') THEN BEGIN
          IF NOT (ExternalDocumentNo[Index] IN ['0'..'9']) THEN
            EXIT(FALSE);
        END ELSE
          IF ExternalDocumentNo[Index] <> ExternalDocumentNoMask[Index] THEN
            EXIT(FALSE);
      EXIT(TRUE);
      // </TPZ426>
    END;

    PROCEDURE CU414_UpdateOutboundWhseRequest@1000000037(SalesHeader@1000000002 : Record 36);
    VAR
      GetSourceDocuments@1000000000 : Report 5753;
      WarehouseRequest@1000000001 : Record 5765;
      WhseShipmentHeader@1000000003 : Record 7320;
      ReleaseWhseShptDoc@1000000004 : Codeunit 7310;
      OutboundWhseReqMgt@1000000006 : Codeunit 50002;
    BEGIN
      //TMEI BEG 070115 for adding new line to  warehouse shipment document.
      WarehouseRequest.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
      WarehouseRequest.SETRANGE("Source Type", DATABASE::"Sales Line");
      WarehouseRequest.SETRANGE("Source Subtype", SalesHeader."Document Type");
      WarehouseRequest.SETRANGE("Source No.", SalesHeader."No.");
      IF WarehouseRequest.FIND('-') THEN BEGIN
      REPEAT
        //WarehouseRequest.SETRANGE("Location Code", WarehouseRequest."Location Code");

        //Synch warehouse shipment document and sales order
        WarehouseRequest.CALCFIELDS("Warehouse Shipment No.");
        IF WarehouseRequest."Warehouse Shipment No." <> '' THEN BEGIN
          WhseShipmentHeader.GET(WarehouseRequest."Warehouse Shipment No.");
          CLEAR(GetSourceDocuments);
          GetSourceDocuments.SetHideDialog(TRUE);
          GetSourceDocuments.SetSkipBlocked(FALSE);
          GetSourceDocuments.USEREQUESTPAGE(FALSE);
          GetSourceDocuments.SETTABLEVIEW(WarehouseRequest);
          GetSourceDocuments.SetOneCreatedShptHeader(WhseShipmentHeader);
          GetSourceDocuments.RUNMODAL;

          IF GetSourceDocuments.IsSourceDocumentChanged THEN BEGIN
            WarehouseRequest."Order Changed" := TRUE;
            WarehouseRequest.MODIFY;
          END;
        END;

       UNTIL WarehouseRequest.NEXT = 0;
      END;
      //TMEI END 070115
    END;

    PROCEDURE CU414_ValidateOneLocation@1000000036(SalesHeader@1000000001 : Record 36);
    VAR
      SalesLineLoc@1000000000 : Record 37;
      tmpLocation@1000000002 : Record 14;
      txtLocationWarning@1000000003 : TextConst 'ENU=The location in Document No. %1 line No. %2 Doesn''t Match the Header information';
      item@1000000004 : Record 27;
      HeaderLocation@1000000005 : Record 14;
      InvtSetup@1000000006 : Record 313;
    BEGIN
      // <TPZ844>
      SalesLineLoc.RESET;
      SalesLineLoc.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLineLoc.SETRANGE("Document No.",SalesHeader."No.");
      SalesLineLoc.SETRANGE(Type,SalesLineLoc.Type::Item);
      SalesLineLoc.SETFILTER(Quantity,'<>0');
      InvtSetup.GET;
      IF InvtSetup."Location Mandatory" THEN
        IF SalesLineLoc.FINDSET THEN
          REPEAT
          //<TPZ1568>
          IF item.GET(SalesLineLoc."No.") THEN BEGIN //<TPZ2482>
            IF item.Type = item.Type::Inventory THEN BEGIN //<TPZ2482>
             tmpLocation.GET(SalesLineLoc."Location Code");
             //<TPZ2648>
      //        HeaderLocation.GET(SalesHeader."Location Code");//TPZ2648//<TPZ2716> Code Commented
              IF (SalesHeader."Document Type"=SalesHeader."Document Type"::"Return Order")AND (tmpLocation."Non Inventory Location") AND (SalesHeader."Location Code"<>SalesLineLoc."Location Code") THEN
               MESSAGE(txtLocationWarning,SalesLineLoc."Document No.",SalesLineLoc."Line No.")
              ELSE
               //IF (SalesHeader."Document Type"<>SalesHeader."Document Type"::"Return Order") OR  (HeaderLocation."Shipping Location") THEN //TPZ2648//<TPZ2716> Code Commented
                SalesLineLoc.TESTFIELD("Location Code",SalesHeader."Location Code");
             END;//<TPZ2482>
            END;//<TPZ2482>
          UNTIL SalesLineLoc.NEXT = 0;
      // </TPZ844>
    END;

    PROCEDURE CU414_ValidateWhseReleaseNo@1000000105(SalesHeader@1000000000 : Record 36);
    VAR
      LocSalesHeader@1000000003 : Record 36;
      LocSalesShptHeader@1000000002 : Record 110;
      LocSalesInvHeader@1000000001 : Record 112;
      Text51004@1000000006 : TextConst 'ENU=%1 %2 was already used on Sales Order No. %3 for %4 %5.';
      Text51005@1000000005 : TextConst 'ENU=%1 %2 was already used on Posted Sales Shipment No. %3 for %4 %5.';
      Text51006@1000000004 : TextConst 'ENU=%1 %2 was already used on Posted Sales Invoice No. %3 for %4 %5.';
    BEGIN
      // <TPZ159>
      IF (SalesHeader."Document Type" = SalesHeader."Document Type"::Order) AND
         (SalesHeader."Location Code" <> '') AND
         (SalesHeader."Warehouse Release No." <> '')
      THEN BEGIN
        LocSalesHeader.RESET;
        LocSalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
        LocSalesHeader.SETFILTER("No.",'<>%1',SalesHeader."No.");
        LocSalesHeader.SETRANGE("Location Code",SalesHeader."Location Code");
        LocSalesHeader.SETRANGE("Warehouse Release No.",SalesHeader."Warehouse Release No.");
        IF LocSalesHeader.FINDFIRST THEN
          ERROR(
            Text51004,
            SalesHeader.FIELDCAPTION("Warehouse Release No."),
            SalesHeader."Warehouse Release No.",
            LocSalesHeader."No.",
            SalesHeader.FIELDCAPTION("Location Code"),
            SalesHeader."Location Code");

        LocSalesShptHeader.RESET;
        LocSalesShptHeader.SETRANGE("Location Code",SalesHeader."Location Code");
        LocSalesShptHeader.SETRANGE("Warehouse Release No.",SalesHeader."Warehouse Release No.");
        IF LocSalesShptHeader.FINDFIRST THEN
          ERROR(
            Text51005,
            SalesHeader.FIELDCAPTION("Warehouse Release No."),
            SalesHeader."Warehouse Release No.",
            LocSalesShptHeader."No.",
            SalesHeader.FIELDCAPTION("Location Code"),
            SalesHeader."Location Code");

        LocSalesInvHeader.RESET;
        LocSalesInvHeader.SETRANGE("Location Code",SalesHeader."Location Code");
        LocSalesInvHeader.SETRANGE("Warehouse Release No.",SalesHeader."Warehouse Release No.");
        IF LocSalesInvHeader.FINDFIRST THEN
          ERROR(
            Text51006,
            SalesHeader.FIELDCAPTION("Warehouse Release No."),
            SalesHeader."Warehouse Release No.",
            LocSalesInvHeader."No.",
            SalesHeader.FIELDCAPTION("Location Code"),
            SalesHeader."Location Code");
      END;
      // </TPZ159>
    END;

    PROCEDURE CU414_ValidateOneDivision@1000000035(SalesHeader@1000000001 : Record 36);
    VAR
      SalesLineLoc@1000000000 : Record 37;
    BEGIN
      // <TPZ1256>
      //SalesHeader.TESTFIELD("Shortcut Dimension 5 Code");  //AJAY
      SalesLineLoc.RESET;
      SalesLineLoc.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLineLoc.SETRANGE("Document No.",SalesHeader."No.");
      SalesLineLoc.SETFILTER(Type,'<>%1',SalesLineLoc.Type::Item);
      SalesLineLoc.SETFILTER(Quantity,'<>0');
        IF SalesLineLoc.FINDSET THEN
          REPEAT
            SalesLineLoc.TESTFIELD("Shortcut Dimension 5 Code",SalesHeader."Shortcut Dimension 5 Code");
          UNTIL SalesLineLoc.NEXT = 0;
      // </TPZ1256>
    END;

    PROCEDURE CU414_ValidateSalesLines@1000000034(SalesHeader@1000000000 : Record 36);
    VAR
      SalesLine@1000000001 : Record 37;
    BEGIN
      // <TPZ930>
      WITH SalesHeader DO BEGIN
        IF "Document Type" <> "Document Type"::Order THEN
          EXIT;

        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        IF SalesLine.FINDSET THEN
          REPEAT
            IF (SalesLine.Type = SalesLine.Type::" ") AND (SalesLine."No." = '') THEN
              SalesLine.TESTFIELD(Description);
            IF (SalesLine.Type = SalesLine.Type::Item) AND
               (SalesLine."No." <> '') AND
               (SalesLine.Quantity <> 0) AND
               NOT SalesLine.Sample AND
               NOT SalesLine.Promo //<TPZ2368>
            THEN BEGIN
              SalesLine.TESTFIELD("Actual Unit Price");
              SalesLine.TESTFIELD(Description); //<TPZ1765>
            END;
          UNTIL SalesLine.NEXT = 0;
      END;
      // </TPZ930>
    END;

    PROCEDURE CU414_CreateJobQueueforAutoPick@1000000033(SalesHeader@1000000000 : Record 36);
    VAR
      JobQueueEntry@1000000001 : Record 472;
      JobQueueCategory@1000000002 : Record 471;
    BEGIN
      //<TPZ2673>
      WITH SalesHeader DO BEGIN
        JobQueueEntry.INIT();
        JobQueueEntry."Object Type to Run" := JobQueueEntry."Object Type to Run"::Codeunit;
        JobQueueEntry."Object ID to Run" := CODEUNIT::"Auto Pick";
        JobQueueEntry."Parameter String":= FORMAT("Document Type")+','+"No.";
        JobQueueEntry.ID:=CREATEGUID;
        JobQueueCategory.GET('MISC');
        JobQueueEntry."Job Queue Category Code" := 'MISC';
        JobQueueEntry."Timeout (sec.)" := 7200;
        JobQueueEntry."Maximum No. of Attempts to Run" := 10;//<TPZ3284>
        JobQueueEntry."Earliest Start Date/Time" := CURRENTDATETIME;
        //JobQueueEntry.Priority := 1000;
        JobQueueEntry.Description := "No.";
        JobQueueEntry.INSERT(TRUE);
        CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry);
      END;
      //</TPZ2673>
    END;

    PROCEDURE CU414_PickEmailExists@1000000032(VAR SalesHeader@1000000001 : Record 36) : Boolean;
    VAR
      EMailListEntry@1000000000 : Record 14000908;
    BEGIN
      //<TPZ2701>
      EMailListEntry.RESET;
      EMailListEntry.SETRANGE("Table ID",DATABASE::Location);
      EMailListEntry.SETRANGE(Code,SalesHeader."Location Code");
      EMailListEntry.SETFILTER("Pick Report E-Mail",'<>%1',EMailListEntry."Pick Report E-Mail"::" ");
      IF EMailListEntry.ISEMPTY THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
      //</TPZ2701>
    END;

    PROCEDURE CU414_CheckSalesLineQtyRounding@1000000041(VAR pSalesHdr@1000000000 : Record 36);
    VAR
      LocalSalesLine@1000000001 : Record 37;
      LocalItemRec@1000000002 : Record 27;
      LocalRoundedUpQty@1000000003 : Decimal;
      Text51007@1000000004 : TextConst 'ENU=The %1:%2 on %3:%4 is not in the Order Multiple,setup for the %5:%6, It must be rounded up to %7.';
    BEGIN
      //<TPZ1942>
      WITH LocalSalesLine DO BEGIN
        RESET;
        SETRANGE("Document Type",pSalesHdr."Document Type");
        SETRANGE("Document No.", pSalesHdr."No.");
        SETRANGE(Type, Type::Item);
        IF FINDSET(TRUE,FALSE) THEN
          REPEAT
            LocalItemRec.GET("No.");
            IF (LocalItemRec."Sales Order Multiple" <> 0)
                 AND    (LocalSalesLine."Outstanding Quantity" <> 0) //TPZ2899
                 AND (NOT LocalItemRec."Override Sales Order Multiple")  //TPZ2899
              THEN
               IF (Quantity MOD LocalItemRec."Sales Order Multiple" <> 0) THEN BEGIN
                LocalRoundedUpQty :=  LocalItemRec."Sales Order Multiple" * (Quantity DIV LocalItemRec."Sales Order Multiple" + 1);
                ERROR(Text51007,FIELDCAPTION(Quantity),
                                Quantity,
                                TABLECAPTION,
                                "Line No.",
                                LocalItemRec.TABLECAPTION,
                                LocalItemRec."No.",
                                LocalRoundedUpQty);
               END;
          UNTIL(LocalSalesLine.NEXT=0);
      END;
      //</TPZ1942>
    END;

    PROCEDURE CU414_CreateJobQueueForSendingPick@1000000042(SalesHeader@1000000002 : Record 36);
    VAR
      JobQueueEntry@1000000000 : Record 472;
      JobQueueCategory@1000000001 : Record 471;
      WarehouseActivityHeader@1000000003 : Record 5766;
    BEGIN
      //<TPZ2701>
      WITH SalesHeader DO BEGIN

        WarehouseActivityHeader.RESET;
        WarehouseActivityHeader.SETCURRENTKEY("Source Document","Source No.","Location Code");
        WarehouseActivityHeader.SETRANGE("Source Document",WarehouseActivityHeader."Source Document"::"Sales Order");
        WarehouseActivityHeader.SETRANGE("Source No.",SalesHeader."No.");
        IF WarehouseActivityHeader.FINDLAST THEN; //EB

        JobQueueEntry.INIT();
        JobQueueEntry."Object Type to Run" := JobQueueEntry."Object Type to Run"::Codeunit;
        JobQueueEntry."Object ID to Run" := CODEUNIT::"Pick Email Handling";
        JobQueueEntry."Parameter String":= FORMAT("Document Type")+','+"No.";
        JobQueueEntry.ID:=CREATEGUID;
        JobQueueCategory.GET('MISC');
        JobQueueEntry."Job Queue Category Code" := 'MISC';
        JobQueueEntry."Timeout (sec.)" := 7200;
        JobQueueEntry."Earliest Start Date/Time" := CURRENTDATETIME;
        //JobQueueEntry.Priority := 1000;
        JobQueueEntry.Description := FORMAT("Document Type")+','+"No."+','+WarehouseActivityHeader."No.";
        JobQueueEntry.INSERT(TRUE);
        CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry);
      END;
      //</TPZ2701>
    END;

    PROCEDURE CU414_ClearWhseReleaseNo@1000000043(SalesHeader@1000000000 : Record 36);
    VAR
      LocationWhse@1000000003 : Record 14;
    BEGIN
      //<TPZ2464>
      IF (SalesHeader."Document Type" = SalesHeader."Document Type"::Order) AND
         (SalesHeader."Location Code" <> '') AND
         (SalesHeader."Warehouse Release No." <> '')
      THEN BEGIN
        IF LocationWhse.GET(SalesHeader."Location Code") THEN BEGIN
          IF LocationWhse."Enable DMS" = FALSE THEN BEGIN
            SalesHeader."Warehouse Release No." := '';
            SalesHeader.MODIFY;
          END;
        END;
      END;
      //</TPZ2464>
    END;

    PROCEDURE CU414_CheckGPPG_Dept_UnitPrice@1000000047(pSalesHeaderRec@1000000000 : Record 36);
    VAR
      SalesLine@1000000001 : Record 37;
      GLSetup@1000000002 : Record 98;
      ItemRec@1000000003 : Record 27;
    BEGIN
      // <TPZ1682>
      WITH pSalesHeaderRec DO BEGIN

        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETRANGE(Type,SalesLine.Type::Item);
        SalesLine.SETRANGE(Sample, TRUE);
        IF SalesLine.FINDSET THEN BEGIN
          GLSetup.GET;
          REPEAT
            GLSetup.TESTFIELD(GLSetup."Sample Items Expense G/L Acct.");
            GLSetup.TESTFIELD("Sample Items GPPG Code");
            SalesLine.TESTFIELD("Gen. Prod. Posting Group",GLSetup."Sample Items GPPG Code");
            SalesLine.TESTFIELD("Shortcut Dimension 1 Code",GLSetup."Sample Department Code");
            SalesLine.TESTFIELD("Shortcut Dimension 2 Code",GLSetup."Sample Site Code");
            SalesLine.TESTFIELD("Unit Price",0.0);
            SalesLine.TESTFIELD("Actual Unit Price",0.0);
          UNTIL SalesLine.NEXT = 0;
        END;

        SalesLine.SETRANGE(Sample,FALSE);
        IF SalesLine.FINDSET THEN
          REPEAT
            ItemRec.GET(SalesLine."No.");
            SalesLine.TESTFIELD("Gen. Prod. Posting Group",ItemRec."Gen. Prod. Posting Group");
          UNTIL SalesLine.NEXT = 0;
      END;
      // </TPZ1682>
    END;

    PROCEDURE CU414_CheckGPPG_Dept_UnitPrice_Promo@1000000046(pSalesHeaderRec@1000000000 : Record 36);
    VAR
      SalesLine@1000000001 : Record 37;
      GLSetup@1000000002 : Record 98;
      ItemRec@1000000003 : Record 27;
    BEGIN
      // <TPZ2368>
      WITH pSalesHeaderRec DO BEGIN

        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETRANGE(Type,SalesLine.Type::Item);
        SalesLine.SETRANGE(Promo, TRUE);
        IF SalesLine.FINDSET THEN BEGIN
          GLSetup.GET;
          REPEAT
            GLSetup.TESTFIELD(GLSetup."Promo Items Expense G/L Acct.");
            GLSetup.TESTFIELD("Promo Items GPPG Code");
            SalesLine.TESTFIELD("Gen. Prod. Posting Group",GLSetup."Promo Items GPPG Code");
            SalesLine.TESTFIELD("Shortcut Dimension 1 Code",GLSetup."Promo Department Code");
            SalesLine.TESTFIELD("Shortcut Dimension 2 Code",GLSetup."Promo Site Code");
            SalesLine.TESTFIELD("Unit Price",0.0);
            SalesLine.TESTFIELD("Actual Unit Price",0.0);
          UNTIL SalesLine.NEXT = 0;
        END;

        SalesLine.SETRANGE(Promo,FALSE);
        IF SalesLine.FINDSET THEN
          REPEAT
            ItemRec.GET(SalesLine."No.");
            SalesLine.TESTFIELD("Gen. Prod. Posting Group",ItemRec."Gen. Prod. Posting Group");
          UNTIL SalesLine.NEXT = 0;
      END;
      // </TPZ2368>
    END;

    [EventSubscriber(Codeunit,414,OnBeforeReleaseSalesDoc)]
    LOCAL PROCEDURE CU414_ValidateSalesLineForUniqueLocation@1000000000(VAR SalesHeader@1000000000 : Record 36;PreviewMode@1000000001 : Boolean);
    VAR
      SalesLineLoc@1000000002 : Record 37;
    BEGIN
      //TPZ2875
      IF NOT GUIALLOWED THEN
        EXIT;
      IF SalesHeader."Document Type" IN[SalesHeader."Document Type"::"Return Order",SalesHeader."Document Type"::"Credit Memo"] THEN BEGIN
        SalesLineLoc.RESET;
        SalesLineLoc.SETRANGE("Document Type",SalesHeader."Document Type");
        SalesLineLoc.SETRANGE("Document No.",SalesHeader."No.");
        SalesLineLoc.SETRANGE(Type,SalesLineLoc.Type::Item);
        SalesLineLoc.SETFILTER("Location Code",'<>%1',SalesHeader."Location Code");
        IF SalesLineLoc.FINDFIRST THEN
          IF NOT CONFIRM(Text001,TRUE,SalesLineLoc."Line No.",SalesHeader."Location Code") THEN
            ERROR('');
      END;
    END;

    LOCAL PROCEDURE CU414_DuplicateSanaPOCheck@1000000003(VAR rec@1000000000 : Record 36);
    VAR
      SalesHeader1@1000000001 : Record 36;
      SalesInvHeader1@1000000004 : Record 112;
      SalesSetup@1000000005 : Record 311;
      Text51010@1000000007 : TextConst 'ENU=%1 %2 was already used on Sales Order No. %3 %4 %5 for Customer No. %6. Do you want to use it again?';
      Text51011@1000000006 : TextConst 'ENU=%1 %2 was already used on Posted Sales Invoice No. %3 %4 %5 for Customer No. %6. Do you want to use it again?';
    BEGIN
      //<TPZ3183>
      WITH rec DO BEGIN
        SalesSetup.GET;
       IF NOT SalesSetup."Dupl. Ext. Doc. No. Warning" THEN
        EXIT;

        IF "Unique Webshop Document Id" <> '{00000000-0000-0000-0000-000000000000}' THEN BEGIN
          IF ("Document Type" = "Document Type"::Order) AND
             ("Sell-to Customer No." <> '') AND
             ("External Document No." <> '')
          THEN BEGIN
            SalesHeader1.RESET;
            SalesHeader1.SETRANGE("Document Type","Document Type"::Order);
            SalesHeader1.SETFILTER("No.",'<>%1',"No.");
            SalesHeader1.SETRANGE("Sell-to Customer No.","Sell-to Customer No.");
            SalesHeader1.SETRANGE("External Document No.","External Document No.");
            IF SalesHeader1.FINDFIRST THEN
              IF NOT
                   CONFIRM(
                     Text51010,
                     FALSE,
                     FIELDCAPTION("External Document No."),
                     "External Document No.",
                     SalesHeader1."No.",
                     FIELDCAPTION("Shortcut Dimension 5 Code"),SalesHeader1."Shortcut Dimension 5 Code",
                     "Sell-to Customer No.")
              THEN
                ERROR('');
            SalesInvHeader1.RESET;
            SalesInvHeader1.SETRANGE("Sell-to Customer No.","Sell-to Customer No.");
            SalesInvHeader1.SETRANGE("External Document No.","External Document No.");
            IF SalesInvHeader1.FINDFIRST THEN
              IF NOT
                   CONFIRM(
                     Text51011,
                     FALSE,
                     FIELDCAPTION("External Document No."),
                     "External Document No.",
                     SalesInvHeader1."No.",
                       FIELDCAPTION("Shortcut Dimension 5 Code"),SalesInvHeader1."Shortcut Dimension 5 Code",
                     "Sell-to Customer No.")
              THEN
                ERROR('');
          END;
         END;
      END;
      //</TPZ3183>
    END;

    LOCAL PROCEDURE CU414_ItemShipRestriction@1000000002(VAR rec@1000000000 : Record 36);
    VAR
      ItemShippingRestriction@1000000001 : Record 50066;
      BlockedItemRestriction@1000000003 : TextConst 'ENU=Ship-to Country "%1", associated with item"%2" is restricted to Ship. \This Item is  Restricted from being shipped in %1 Country';
      BlockedItemRestriction1@1000000002 : TextConst 'ENU=Ship-to State "%1", associated with item"%2" is restricted to Ship. \This Item is  Restricted from being shipped in %1 State';
      tmpSalesLine@1000000008 : Record 37;
      CountryRegion@1000000007 : Record 9;
      County@1000000006 : Record 51128;
      tmpItem@1000000005 : Record 27;
      BlockedItemRestriction2@1000000004 : TextConst 'ENU=Shipping Mode "%2" for Shipping Agent "%1", associated with item"%3" is restricted to Ship. \This Item is  Restricted from being shipped by %2 Mode for %1 Shipping Agent';
      BlockedItemRestriction3@1000000009 : TextConst 'ENU=Customer "%1", associated with item"%2" is restricted to Ship. \This Item is  Restricted from being shipped to %1 Customer';
      BlockedItemRestriction4@1000000010 : TextConst 'ENU=Stock  Rep. Location "%1", associated with item"%2" is restricted to Ship. \This Item is  Restricted from being shipped to %1 Location';
    BEGIN
      //<TPZ3151>
      WITH rec DO BEGIN
          tmpSalesLine.RESET();
          tmpSalesLine.SETRANGE("Document No.","No.");
          tmpSalesLine.SETRANGE(Type,tmpSalesLine.Type::Item);
          IF tmpSalesLine.FIND('-') THEN BEGIN
            REPEAT
              IF tmpItem.GET(tmpSalesLine."No.") THEN BEGIN
                IF "Ship-to Country/Region Code" <>'' THEN BEGIN
                  ItemShippingRestriction.RESET;
                  ItemShippingRestriction.SETRANGE("Item No.",tmpSalesLine."No.");
                  ItemShippingRestriction.SETRANGE("Restriction Type",ItemShippingRestriction."Restriction Type"::Country);
                  ItemShippingRestriction.SETRANGE("Restriction Code 1","Ship-to Country/Region Code");
                  IF ItemShippingRestriction.FINDFIRST THEN
                        ERROR(BlockedItemRestriction,ItemShippingRestriction."Restriction Code 1",tmpItem."No.");
                END;

                ItemShippingRestriction.RESET;
                ItemShippingRestriction.SETRANGE("Item No.",tmpSalesLine."No.");
                ItemShippingRestriction.SETRANGE("Restriction Type",ItemShippingRestriction."Restriction Type"::State);
                ItemShippingRestriction.SETRANGE("Restriction Code 1","Ship-to County");
                IF ItemShippingRestriction.FINDFIRST THEN
                      ERROR(BlockedItemRestriction1,ItemShippingRestriction."Restriction Code 1",tmpItem."No.");

                ItemShippingRestriction.RESET;
                ItemShippingRestriction.SETRANGE("Item No.",tmpSalesLine."No.");
                ItemShippingRestriction.SETRANGE("Restriction Type",ItemShippingRestriction."Restriction Type"::"Shipping Mode");
                ItemShippingRestriction.SETRANGE("Restriction Code 1","Shipping Agent Code");
                ItemShippingRestriction.SETRANGE("Restriction Code 2","E-Ship Agent Service");
                IF ItemShippingRestriction.FINDFIRST THEN
                      ERROR(BlockedItemRestriction2,ItemShippingRestriction."Restriction Code 1",ItemShippingRestriction."Restriction Code 2",tmpItem."No.");

                ItemShippingRestriction.RESET;
                ItemShippingRestriction.SETRANGE("Item No.",tmpSalesLine."No.");
                ItemShippingRestriction.SETRANGE("Restriction Type",ItemShippingRestriction."Restriction Type"::Customer);
                ItemShippingRestriction.SETRANGE("Restriction Code 1",tmpSalesLine."Sell-to Customer No.");
                IF ItemShippingRestriction.FINDFIRST THEN
                      ERROR(BlockedItemRestriction3,ItemShippingRestriction."Restriction Code 1",tmpItem."No.");

                //<TPZ3305>
                IF "Location Code"<> '' THEN BEGIN
                  ItemShippingRestriction.RESET;
                  ItemShippingRestriction.SETRANGE("Item No.",tmpSalesLine."No.");
                  ItemShippingRestriction.SETRANGE("Restriction Type",ItemShippingRestriction."Restriction Type"::"Stock Rep");
                  ItemShippingRestriction.SETRANGE("Restriction Code 1",tmpSalesLine."Location Code");
                  IF ItemShippingRestriction.FINDFIRST THEN
                        ERROR(BlockedItemRestriction4,ItemShippingRestriction."Restriction Code 1",tmpItem."No.");
                END;
                //</TPZ3305>
              END;
            UNTIL tmpSalesLine.NEXT=0;
          END;
      END;
      //</TPZ3151>
    END;

    BEGIN
    {
      2020-06-19  TPZ2875  Added new subscriber functions for validate location code in sales return and credit memo line
      001 TPZ2893 GKG 07272020 - Code added for 'Validate Sales order Multiple on release for handling EDI orders'
      002 TPZ3105 RPS 03032021 - Send Quote Confirmation for OSR
      003 TPZ3183 UTK 05262021 - Check Duplicate PO No. for Sana Orders.
      004 TPZ3151 UTK 06302021 - Added code to Validate Shipping Mode restriction.
      005 TPZ3271 GKG 07142021 - Added code to update shipping date
      006 TPZ3284 UTK 07232021 - Added code to update "Max No Of attempts to run" in Auto pick Job Queue.
      007 TPZ3269 UTK 08182021 - Code added to restrict warehouse user to update delivery date while processing orders.
      008 TPZ3305 UTK 08252021 - Added code for Stock Rep Ite, Ship Restriction.
      010 TPZ3377 GKG 10082021 code added to shipment date as workdate if approve from credit screen
    }
    END.
  }
}

