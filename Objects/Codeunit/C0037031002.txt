OBJECT Codeunit 37031002 Scales Communication
{
  OBJECT-PROPERTIES
  {
    Date=06/28/17;
    Time=12:00:00 PM;
    Version List=SE0.60.03;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CommControlMgt@1240030000 : Codeunit 14000747;
      DotNETAutomationMgt@1240030001 : Codeunit 37031001;
      Text001@1001 : TextConst 'ENU=Scale response to zero %1';
      Text002@1002 : TextConst 'ENU=Time Out';
      Text003@1003 : TextConst 'ENU=Maximum 3 digits supported.';
      Text004@1004 : TextConst 'ENU=Weight not received <%1>, press enter and scan again.';
      Text005@1005 : TextConst 'ENU=Scale reading was incomplete <%1>, press enter and scan again.';

    PROCEDURE ZeroScale@18(ScaleInterface@1000000000 : Record 14000746);
    VAR
      ReceiveString@1000000001 : Text[30];
    BEGIN
      WITH ScaleInterface DO BEGIN
        TESTFIELD("Scale Comm. Port");
        TESTFIELD("Scale Baud Rate");
        TESTFIELD("Scale Parity");
        TESTFIELD("Scale Data Bits");
        TESTFIELD("Scale Stop Bits");
        TESTFIELD("Scale Time Out");

        "Scale Zero Scale String" := ModifyScaleString(ScaleInterface,"Scale Zero Scale String");
        TESTFIELD("Scale Zero Scale String");
        "Scale Weigh String" := ModifyScaleString(ScaleInterface,"Scale Weigh String");
        TESTFIELD("Scale Weigh String");

        CASE "Scale Integration" OF
          "Scale Integration"::MSComm:
            ReceiveString := CommControlMgt.ZeroScale(ScaleInterface);
          "Scale Integration"::".NET Automation":
            ReceiveString := DotNETAutomationMgt.ZeroScale(ScaleInterface);
        END;

        MESSAGE(Text001,ReceiveString);
      END;
    END;

    PROCEDURE GetPackageWeight@15(ScaleInterface@1000000001 : Record 14000746;VAR Package@1000000002 : Record 14000701) ReturnBoolean@1000000000 : Boolean;
    VAR
      ScaleWeight@1000000003 : Decimal;
    BEGIN
      CASE ScaleInterface."Scale Connection Type" OF
        ScaleInterface."Scale Connection Type"::"Comm. Port":
          IF GetScaleWeight(ScaleInterface,ScaleWeight,FALSE) THEN BEGIN
            Package.VALIDATE(Package."Scale Weight",ScaleWeight);
            EXIT(TRUE);
          END ELSE
            EXIT(FALSE);
        ScaleInterface."Scale Connection Type"::USB:
          IF GetUSBScaleWeight(ScaleInterface,ScaleWeight,FALSE) THEN BEGIN
            Package.VALIDATE(Package."Scale Weight",ScaleWeight);
            EXIT(TRUE)
          END ELSE
            EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE ModifyScaleString@1(ScaleInterface@1000000000 : Record 14000746;ScaleString@1000000001 : Text[30]) : Text[30];
    BEGIN
      WITH ScaleInterface DO BEGIN
        CASE "Standard Scale Type" OF
          "Standard Scale Type"::" ":
            ;
          "Standard Scale Type"::Fairbanks:
            IF ScaleString = '' THEN
              ScaleString[1] := 13;
          "Standard Scale Type"::"NCI Weigh-Tronix":
            ScaleString[STRLEN(ScaleString) + 1] := 13;
        END;

        EXIT(ScaleString);
      END;
    END;

    PROCEDURE GetScaleWeight@2(ScaleInterface@1000000000 : Record 14000746;VAR ScaleWeight@1000000001 : Decimal;Quiet@1000000002 : Boolean) : Boolean;
    VAR
      ReceiveString@1000000003 : Text[250];
      OuncesOK@1000000006 : Boolean;
      PoundsOK@1000000007 : Boolean;
      UseScaleWeight@1000000008 : Boolean;
      WeightPounds@1000000009 : Decimal;
      WeightOunces@1000000010 : Decimal;
      Measures@1000000011 : Integer;
      ASMgt@1000000004 : Codeunit 50012;
      RetValue@1000000005 : Boolean;
    BEGIN
      WITH ScaleInterface DO BEGIN
        //TM BEG 081115
        IF "Use ActiveXpert COM" THEN BEGIN
          RetValue := ASMgt.GetScaleWeight(ScaleInterface, ScaleWeight, Quiet);
          EXIT(RetValue);
        END;
        //TM END 081115

        CLEAR(ReceiveString);
        UseScaleWeight := FALSE;

        TESTFIELD("Scale Comm. Port");
        TESTFIELD("Scale Baud Rate");
        TESTFIELD("Scale Parity");
        TESTFIELD("Scale Data Bits");
        TESTFIELD("Scale Stop Bits");
        TESTFIELD("Scale Time Out");

        TESTFIELD("Scale Lbs. Beg. Pos.");
        TESTFIELD("Scale Lbs. Length");
        TESTFIELD("Scale Oz. Beg. Pos");
        TESTFIELD("Scale Oz. Length");

        "Scale Weigh String" := ModifyScaleString(ScaleInterface,"Scale Weigh String");
        TESTFIELD("Scale Weigh String");

        Measures := 0;
        REPEAT
          CLEAR(ReceiveString);
          CASE "Scale Integration" OF
            "Scale Integration"::MSComm:
              ReceiveString := CommControlMgt.GetScaleWeight(ScaleInterface);
            "Scale Integration"::".NET Automation":
              ReceiveString := DotNETAutomationMgt.GetScaleWeight(ScaleInterface);
          END;

          PoundsOK := FALSE;
          OuncesOK := FALSE;

          IF (ReceiveString <> '') AND (ReceiveString <> Text002) THEN BEGIN
            IF STRLEN(ReceiveString) > "Scale Lbs. Beg. Pos." THEN
              PoundsOK :=
                EVALUATE(
                  WeightPounds,COPYSTR(ReceiveString,"Scale Lbs. Beg. Pos.","Scale Lbs. Length"));
            IF STRLEN(ReceiveString) > "Scale Oz. Beg. Pos" THEN
              OuncesOK :=
                EVALUATE(
                  WeightOunces,COPYSTR(ReceiveString,"Scale Oz. Beg. Pos","Scale Oz. Length"));
            UseScaleWeight := PoundsOK AND OuncesOK;
          END;

          Measures := Measures + 1;
        UNTIL UseScaleWeight OR (Measures > "Maximum Retries When Error");

        IF UseScaleWeight THEN BEGIN
          IF WeightOunces > 0 THEN
            CASE "Scale Oz. Length" OF
              0:
                ;
              1:
                WeightPounds := WeightPounds + (WeightOunces * 0.1);
              2:
                WeightPounds := WeightPounds + (WeightOunces * 0.01);
              3:
                WeightPounds := WeightPounds + (WeightOunces * 0.001);
              ELSE
                ERROR(Text003);
            END;
          ScaleWeight := WeightPounds;

          EXIT(TRUE);
        END ELSE BEGIN
          IF NOT Quiet THEN
            IF (ReceiveString = '') OR (ReceiveString = Text002) THEN
              MESSAGE(Text004,ReceiveString)
            ELSE
              MESSAGE(Text005,ReceiveString);

          EXIT(FALSE);
        END;
      END;
    END;

    PROCEDURE RegisterUSBScale@1240020001(ScaleInterface@1240020000 : Record 14000746);
    VAR
      ReceiveString@1240020001 : Text[250];
      Text001@1240020002 : TextConst 'ENU=Vendor and Product ID must be 4 characters (Hex)';
      Text002@1240020003 : TextConst 'ENU=Scale type not USB';
    BEGIN
      WITH ScaleInterface DO BEGIN
        CLEAR(ReceiveString);

        IF ScaleInterface."Scale Connection Type" <> ScaleInterface."Scale Connection Type"::USB THEN
          ERROR(Text002);

        IF (STRLEN("Vendor ID (Hex)") <> 4) OR
           (STRLEN("Product ID (Hex)") <> 4)
        THEN
          ERROR(Text001);

        ReceiveString := DotNETAutomationMgt.RegisterUSBScale(ScaleInterface);

        IF GUIALLOWED THEN
          MESSAGE(ReceiveString);

      END;
    END;

    PROCEDURE GetUSBScaleWeight@1240020000(ScaleInterface@1240020000 : Record 14000746;VAR ScaleWeight@1240020001 : Decimal;Quiet@1240020002 : Boolean) : Boolean;
    VAR
      ReceiveString@1240020003 : Text[250];
      UseScaleWeight@1240020004 : Boolean;
      FirstDelimiter@1240020005 : Integer;
      Text001@1240020006 : TextConst 'ENU=Vendor and Product ID must be 4 characters (Hex)';
      Text002@1240020007 : TextConst 'ENU=License not found.';
      Text003@1240020008 : TextConst 'ENU=Granule not found.';
      Text004@1240020009 : TextConst 'ENU=Weight not in LB.';
    BEGIN
      WITH ScaleInterface DO BEGIN
        CLEAR(ReceiveString);
        UseScaleWeight := FALSE;

        IF (STRLEN("Vendor ID (Hex)") <> 4) OR
           (STRLEN("Product ID (Hex)") <> 4)
        THEN
          ERROR(Text001);

        ScaleWeight := 0;
        CLEAR(ReceiveString);

        ReceiveString := DotNETAutomationMgt.GetUSBScaleWeight(ScaleInterface);

        IF ReceiveString[1] = '#' THEN BEGIN
          CASE ReceiveString OF
            '#LNF':
              ERROR(Text002);
            '#GNF':
              ERROR(Text003);
            ELSE
              ERROR(ReceiveString);
          END;
        END;

        FirstDelimiter := STRPOS(ReceiveString,'/');
        IF COPYSTR(ReceiveString,FirstDelimiter + 1,2) = 'KG' THEN
          ERROR(Text004 + '--' + ReceiveString);
        EVALUATE(ScaleWeight,COPYSTR(ReceiveString,1,FirstDelimiter - 1));

        //<TPZ1528>
        IF "USB Conversion Factor" <> 0 THEN
          ScaleWeight := ScaleWeight * "USB Conversion Factor";
        //</TPZ1528>
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetReceiveWeight@3(ScaleInterface@1240030001 : Record 14000746;VAR Receive@1240030002 : Record 14000601) ReturnBoolean@1240030000 : Boolean;
    VAR
      ScaleWeight@1240030003 : Decimal;
    BEGIN
      CASE ScaleInterface."Scale Connection Type" OF
        ScaleInterface."Scale Connection Type"::"Comm. Port":
          IF GetScaleWeight(ScaleInterface,ScaleWeight,FALSE) THEN BEGIN
            Receive.VALIDATE(Receive."Scale Weight",ScaleWeight);
            EXIT(TRUE);
          END ELSE
            EXIT(FALSE);
        ScaleInterface."Scale Connection Type"::USB:
          IF GetUSBScaleWeight(ScaleInterface,ScaleWeight,FALSE) THEN BEGIN
            Receive.VALIDATE(Receive."Scale Weight",ScaleWeight);
            EXIT(TRUE);
          END ELSE
            EXIT(FALSE);
      END;
    END;

    BEGIN
    END.
  }
}

