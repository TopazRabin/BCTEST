OBJECT Codeunit 14002513 Pallet QA Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=08/21/18;
    Time=12:00:00 PM;
    Version List=RF1.50.13;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1240020000 : TextConst 'ENU=Pallet QA Record Missing';
      Text001@1240020001 : TextConst 'ENU=Quick Count';

    [External]
    PROCEDURE CreateInitialStorageID@1240020001(PalletNo@1240020001 : Code[20];LocationCode@1240020002 : Code[10];WarehouseEmployeeCode@1240020000 : Code[50]);
    VAR
      StorageID@1240020004 : Record 14002972;
      RFLocationSetup@1240020003 : Record 14099031;
    BEGIN
      IF NOT RFLocationSetup.GET(LocationCode) THEN
        EXIT;

      IF NOT StorageID.GET(PalletNo) THEN BEGIN
        StorageID.INIT;
        StorageID."Pallet No." := PalletNo;
        StorageID."QA Status" := RFLocationSetup."Initial LP QA Status";
        StorageID.INSERT;
      END;

      CreatePalletQAEntry(StorageID."Pallet No.",StorageID."QA Status",WarehouseEmployeeCode);
    END;

    [External]
    PROCEDURE CreatePalletRecord@1240020000(PalletNo@1240020000 : Code[20];WarehouseEmployeeCode@1240020004 : Code[50]);
    VAR
      PalletBinContent@1240020001 : Record 14002963;
      StorageID@1240020002 : Record 14002972;
      RFLocationSetup@1240020003 : Record 14099031;
    BEGIN
      PalletBinContent.SETRANGE("Pallet No.",PalletNo);
      IF NOT PalletBinContent.FINDFIRST THEN
        EXIT;

      RFLocationSetup.GET(PalletBinContent.Location);

      IF NOT StorageID.GET(PalletNo) THEN BEGIN
        StorageID.INIT;
        StorageID."Pallet No." := PalletNo;
        StorageID."QA Status" := RFLocationSetup."Initial LP QA Status";
        StorageID.INSERT;
      END;

      CreatePalletQAEntry(StorageID."Pallet No.",StorageID."QA Status",WarehouseEmployeeCode);
    END;

    [External]
    PROCEDURE RequireQARecord@1240020004(PalletNo@1240020000 : Code[20]) : Boolean;
    VAR
      PalletBinContent@1240020001 : Record 14002963;
      RFLocationSetup@1240020002 : Record 14099031;
    BEGIN
      PalletBinContent.SETRANGE("Pallet No.",PalletNo);
      IF PalletBinContent.FINDFIRST THEN
        IF RFLocationSetup.GET(PalletBinContent.Location) THEN
          EXIT(RFLocationSetup."Require LP QA Record");
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE PickRestricted@1240020006(PalletNo@1240020000 : Code[20];VAR Remark@1240020003 : Text[250]) : Boolean;
    VAR
      StorageID@1240020001 : Record 14002972;
      LPQAStatusOption@1240020002 : Record 14099005;
    BEGIN
      IF NOT StorageID.GET(PalletNo) THEN
        IF RequireQARecord(PalletNo) THEN BEGIN
          Remark := Text000;
          EXIT(FALSE);
        END;

      IF StorageID."QA Status" = '' THEN
        EXIT(FALSE)
      ELSE BEGIN
        IF LPQAStatusOption.GET(StorageID."QA Status") THEN BEGIN
          EXIT(LPQAStatusOption."Pick Restricted");
        END;
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE MovementRestricted@1240020007(PalletNo@1240020000 : Code[20];VAR Remark@1240020003 : Text[250]) : Boolean;
    VAR
      StorageID@1240020002 : Record 14002972;
      LPQAStatusOption@1240020001 : Record 14099005;
    BEGIN
      IF NOT StorageID.GET(PalletNo) THEN
        IF RequireQARecord(PalletNo) THEN BEGIN
          Remark := Text000;
          EXIT(FALSE);
        END;

      IF StorageID."QA Status" = '' THEN
        EXIT(FALSE)
      ELSE BEGIN
        IF LPQAStatusOption.GET(StorageID."QA Status") THEN BEGIN
          EXIT(LPQAStatusOption."Movement Restricted");
        END;
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE PosAdjRestricted@1240020008(PalletNo@1240020000 : Code[20];VAR Remark@1240020003 : Text[250]) : Boolean;
    VAR
      StorageID@1240020002 : Record 14002972;
      LPQAStatusOption@1240020001 : Record 14099005;
    BEGIN
      IF NOT StorageID.GET(PalletNo) THEN
        IF RequireQARecord(PalletNo) THEN BEGIN
          Remark := Text000;
          EXIT(FALSE);
        END;

      IF StorageID."QA Status" = '' THEN
        EXIT(FALSE)
      ELSE BEGIN
        IF LPQAStatusOption.GET(StorageID."QA Status") THEN BEGIN
          EXIT(LPQAStatusOption."Pos. Adj. Restricted");
        END;
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE NegAdjRestricted@1240020009(PalletNo@1240020000 : Code[20];VAR Remark@1240020003 : Text[250]) : Boolean;
    VAR
      StorageID@1240020002 : Record 14002972;
      LPQAStatusOption@1240020001 : Record 14099005;
    BEGIN
      IF NOT StorageID.GET(PalletNo) THEN
        IF RequireQARecord(PalletNo) THEN BEGIN
          Remark := Text000;
          EXIT(FALSE);
        END;

      IF StorageID."QA Status" = '' THEN
        EXIT(FALSE)
      ELSE BEGIN
        IF LPQAStatusOption.GET(StorageID."QA Status") THEN BEGIN
          EXIT(LPQAStatusOption."Neg. Adj. Restricted");
        END;
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE AddItemRestricted@1240020010(PalletNo@1240020000 : Code[20];VAR Remark@1240020003 : Text[250]) : Boolean;
    VAR
      StorageID@1240020002 : Record 14002972;
      LPQAStatusOption@1240020001 : Record 14099005;
    BEGIN
      IF NOT StorageID.GET(PalletNo) THEN
        IF RequireQARecord(PalletNo) THEN BEGIN
          Remark := Text000;
          EXIT(FALSE);
        END;

      IF StorageID."QA Status" = '' THEN
        EXIT(FALSE)
      ELSE BEGIN
        IF LPQAStatusOption.GET(StorageID."QA Status") THEN BEGIN
          EXIT(LPQAStatusOption."Add Item Restricted");
        END;
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE RemoveItemRestricted@1240020011(PalletNo@1240020000 : Code[20];VAR Remark@1240020003 : Text[250]) : Boolean;
    VAR
      StorageID@1240020002 : Record 14002972;
      LPQAStatusOption@1240020001 : Record 14099005;
    BEGIN
      IF NOT StorageID.GET(PalletNo) THEN
        IF RequireQARecord(PalletNo) THEN BEGIN
          Remark := Text000;
          EXIT(FALSE);
        END;

      IF StorageID."QA Status" = '' THEN
        EXIT(FALSE)
      ELSE BEGIN
        IF LPQAStatusOption.GET(StorageID."QA Status") THEN BEGIN
          EXIT(LPQAStatusOption."Remove Item Restricted");
        END;
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE DestroyPalletRestricted@1240020012(PalletNo@1240020000 : Code[20];VAR Remark@1240020003 : Text[250]) : Boolean;
    VAR
      StorageID@1240020002 : Record 14002972;
      LPQAStatusOption@1240020001 : Record 14099005;
    BEGIN
      IF NOT StorageID.GET(PalletNo) THEN
        IF RequireQARecord(PalletNo) THEN BEGIN
          Remark := Text000;
          EXIT(FALSE);
        END;

      IF StorageID."QA Status" = '' THEN
        EXIT(FALSE)
      ELSE BEGIN
        IF LPQAStatusOption.GET(StorageID."QA Status") THEN BEGIN
          EXIT(LPQAStatusOption."Destroy Pallet Restricted");
        END;
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE CreatePalletQAEntry@1240020003(PalletNo@1240020000 : Code[20];Status@1240020001 : Code[20];WarehouseEmployeeCode@1240020004 : Code[50]);
    VAR
      PalletQAEntry@1240020002 : Record 14002501;
      PalletQAEntry2@1240020003 : Record 14002501;
    BEGIN
      PalletQAEntry2.LOCKTABLE(TRUE);
      IF PalletQAEntry2.FINDLAST THEN ;

      PalletQAEntry.INIT;
      PalletQAEntry."Entry No." := PalletQAEntry2."Entry No." + 1;
      PalletQAEntry."Pallet No." := PalletNo;
      PalletQAEntry."QA Status" := Status;
      PalletQAEntry."Warehouse Employee Code" := WarehouseEmployeeCode;
      PalletQAEntry.Date := WORKDATE;
      PalletQAEntry.Time := TIME;
      PalletQAEntry.INSERT;
    END;

    [External]
    PROCEDURE CreateStatisticEntry@1240020005(PalletJournalLine@1240020001 : Record 14002966);
    VAR
      PalletCountStatistic@1240020000 : Record 14002502;
      PalletCountStatistic2@1240020002 : Record 14002502;
      Difference@1240020003 : Decimal;
    BEGIN
      PalletCountStatistic2.LOCKTABLE(TRUE);
      IF PalletCountStatistic2.FINDLAST THEN ;
      Difference := PalletJournalLine."Qty. (Phys. Inventory)" -
        PalletJournalLine."Qty. (Calculated)";

      PalletCountStatistic.INIT;
      PalletCountStatistic."No." := PalletCountStatistic2."No." + 1;
      PalletCountStatistic.Bin := PalletJournalLine."Bin Code";
      PalletCountStatistic.Zone := PalletJournalLine."Zone Code";
      PalletCountStatistic.Location := PalletJournalLine."Location Code";
      PalletCountStatistic.Pallet := PalletJournalLine."Pallet No.";
      PalletCountStatistic.Box := PalletJournalLine."Box No.";
      PalletCountStatistic.Item := PalletJournalLine."Item No.";
      PalletCountStatistic.Variant := PalletJournalLine."Variant Code";
      PalletCountStatistic.UOM := PalletJournalLine."Unit of Measure Code";
      PalletCountStatistic."Lot No." := PalletJournalLine."Lot No.";
      PalletCountStatistic."Serial No." := PalletJournalLine."Serial No.";
      PalletCountStatistic."Qty Calculated" := PalletJournalLine."Qty. (Calculated)";
      PalletCountStatistic."Qty Physical" := PalletJournalLine."Qty. (Phys. Inventory)";
      PalletCountStatistic."Qty Difference" := Difference;
      IF Difference = 0 THEN
        PalletCountStatistic.Status := PalletCountStatistic.Status::Correct
      ELSE
        PalletCountStatistic.Status := PalletCountStatistic.Status::Wrong;
      PalletCountStatistic.Type := PalletCountStatistic.Type::Pallet;
      PalletCountStatistic."Pallet Found" :=
        (Difference = PalletJournalLine."Qty. (Phys. Inventory)");
      PalletCountStatistic."Pallet No Found" :=
        (Difference = PalletJournalLine."Qty. (Calculated)");
      PalletCountStatistic."Processing Started Date" := PalletJournalLine."First Scan Date";
      PalletCountStatistic."Processing Started Time" := PalletJournalLine."First Scan Time";
      PalletCountStatistic."Processing End Date" := PalletJournalLine."Last Scan Date";
      PalletCountStatistic."Processing End Time" := PalletJournalLine."Last Scan Time";
      PalletCountStatistic."Warehouse Employee Code" :=
        PalletJournalLine."Warehouse Employee Code";
      PalletCountStatistic."Pallet Jnl Template Code" := PalletJournalLine."Journal Template Name";
      PalletCountStatistic."Pallet Patch Code" := PalletJournalLine."Journal Batch Name";
      PalletCountStatistic.INSERT;
    END;

    [External]
    PROCEDURE CreateStatisticEntryPBC@1240020002(LocationCode@1240020007 : Code[20];PalletNo@1240020001 : Code[20];BinCode@1240020006 : Code[20];Found@1240020004 : Boolean;WarehouseEmployeeCode@1240020008 : Code[50]);
    VAR
      PalletCountStatistic@1240020000 : Record 14002502;
      PalletCountStatistic2@1240020002 : Record 14002502;
      PalletBinContent@1240020005 : Record 14002963;
      Location@1240020009 : Record 14;
      Bin@1240020010 : Record 7354;
      Difference@1240020003 : Decimal;
    BEGIN
      Location.GET(LocationCode);
      Bin.GET(LocationCode,BinCode);
      PalletBinContent.SETRANGE(Location,LocationCode);
      PalletBinContent.SETRANGE("Pallet No.",PalletNo);
      IF PalletBinContent.FINDSET THEN BEGIN
        REPEAT
          PalletCountStatistic2.LOCKTABLE(TRUE);
          IF PalletCountStatistic2.FINDLAST THEN ;

          PalletCountStatistic.INIT;
          PalletCountStatistic."No." := PalletCountStatistic2."No." + 1;
          PalletCountStatistic.INSERT;

          PalletCountStatistic.Bin := Bin.Code;
          PalletCountStatistic.Zone := Bin."Zone Code";
          PalletCountStatistic.Location := PalletBinContent.Location;
          PalletCountStatistic.Pallet := PalletBinContent."Pallet No.";
          PalletCountStatistic.Box := PalletBinContent."Box No.";
          PalletCountStatistic.Item := PalletBinContent."Item No.";
          PalletCountStatistic.Variant := PalletBinContent."Variant No.";
          PalletCountStatistic.UOM := PalletBinContent."Unit of Measure";
          PalletCountStatistic."Lot No." := PalletBinContent."Lot No.";
          PalletCountStatistic."Serial No." := PalletBinContent."Serial No.";

          IF BinCode = PalletBinContent.Bin THEN BEGIN
            PalletCountStatistic."Qty Calculated" := PalletBinContent.Quantity;
            PalletCountStatistic."Qty Physical" := PalletBinContent.Quantity;
            PalletCountStatistic."Qty Difference" := 0;
            PalletCountStatistic.Status := PalletCountStatistic.Status::Correct;
          END ELSE BEGIN
            IF Found THEN BEGIN
              PalletCountStatistic."Qty Calculated" := PalletBinContent.Quantity;
              PalletCountStatistic."Qty Physical" := 0;
              PalletCountStatistic."Qty Difference" := - PalletBinContent.Quantity;
            END ELSE BEGIN
              PalletCountStatistic."Qty Calculated" := 0;
              PalletCountStatistic."Qty Physical" := PalletBinContent.Quantity;
              PalletCountStatistic."Qty Difference" := PalletBinContent.Quantity;
            END;
            PalletCountStatistic.Status := PalletCountStatistic.Status::Wrong;
          END;
          PalletCountStatistic.Type := PalletCountStatistic.Type::Pallet;
          PalletCountStatistic."Pallet Found" := Found;
          PalletCountStatistic."Pallet No Found" := NOT Found;
          PalletCountStatistic."Processing Started Date" := WORKDATE;
          PalletCountStatistic."Processing Started Time" := TIME;
          PalletCountStatistic."Processing End Date" := WORKDATE;
          PalletCountStatistic."Processing End Time" := TIME;
          PalletCountStatistic."Warehouse Employee Code" := WarehouseEmployeeCode;
          PalletCountStatistic."Pallet Jnl Template Code" := Text001;
          PalletCountStatistic."Pallet Patch Code" := Text001;
          PalletCountStatistic.MODIFY;
        UNTIL PalletBinContent.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE GetInitialQAStatus@1240020013(LocationCode@1240020000 : Code[10]) : Code[10];
    VAR
      RFSetup@1240020001 : Record 14002801;
      RFLocationSetup@1240020002 : Record 14099031;
      LPQAStatus@1240020003 : Record 14099005;
    BEGIN
      RFSetup.GetRFSetup;
      IF LocationCode <> '' THEN
        IF RFLocationSetup.GET(LocationCode) THEN
          IF LPQAStatus.GET(RFLocationSetup."Initial LP QA Status") THEN
            EXIT(RFLocationSetup."Initial LP QA Status");

      IF LPQAStatus.GET(RFSetup."Intial QA Status") THEN
        EXIT(RFSetup."Intial QA Status");

      EXIT('');
    END;

    [External]
    PROCEDURE GetStorageID@1240020014(PalletNo@1240020000 : Code[20]) : Boolean;
    VAR
      StorageID@1240020001 : Record 14002972;
    BEGIN
      IF StorageID.GET(PalletNo) THEN
        EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

