OBJECT Codeunit 23044502 WHI Misc. Mgmt.
{
  OBJECT-PROPERTIES
  {
    Date=03/30/21;
    Time=[ 3:20:22 PM];
    Modified=Yes;
    Version List=WHI2.4.7684.0;
  }
  PROPERTIES
  {
    TableNo=23044511;
    OnRun=VAR
            liEventID@1000000002 : Integer;
            ltxtOutputText@1000000001 : BigText;
            losReturnMessage@1000000000 : OutStream;
          BEGIN
            //<FUNC>
            //  Description: Main execution point for codeunit.  Handles misc. handheld functions/calls not
            //               specific to any one application.
            //  Side Effect: None
            //</FUNC>
            codRegionCode := Rec.getValue('device_culture'); //<IW author="R.Trudeau" date="10/17/18" issue="TFS3495" />

            liEventID := Rec.getEvent();
            //ERROR(FORMAT(liEventID));
            executeEvent(liEventID, Rec, ltxtOutputText);
            "Extensibility Blob".CREATEOUTSTREAM( losReturnMessage );
            ltxtOutputText.WRITE(losReturnMessage);
            MODIFY();
          END;

  }
  CODE
  {
    VAR
      iEventID@1000000004 : Integer;
      cuWHICommon@1000000000 : Codeunit 23044501;
      cuDecodeRuleMgmt@1000000001 : Codeunit 23044517;
      cuDatasetTools@1000000012 : Codeunit 23044535;
      recWHISetup@1000000017 : Record 23044502;
      cuActivityLogMgt@1000000023 : Codeunit 23044537;
      cuCommonBase@1000000025 : Codeunit 23044519;
      cuTranslationMgmt@1000000022 : Codeunit 23044526;
      codRegionCode@1000000019 : Code[10];

    PROCEDURE executeEvent@1000000005(piEventID@1000000000 : Integer;VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000002 : BigText);
    BEGIN
      //<FUNC>
      //  Description: Calls the appropriate function based on the event id.
      //  Called From: "OnRun"
      //  Side Effect: None
      //</FUNC>

      iEventID := piEventID;
      IF ( recWHISetup.GET() ) THEN;

      CASE piEventID OF
         5:     testConnection(ptrecEventParams, pbsOutput);
        10:     validateLogin(ptrecEventParams, pbsOutput);
        20:     GetVersionInformation(ptrecEventParams, pbsOutput);
        21:     GetDeviceLatestVersion(ptrecEventParams,pbsOutput);
        100:    isSerialNumberAvailable(ptrecEventParams, pbsOutput);
        101:    getLotSerialQtyByUOM(ptrecEventParams,pbsOutput);
        102:    getItemBinQtyByUOM(ptrecEventParams,pbsOutput);
        215:    changeBinOnLine( ptrecEventParams, pbsOutput);
        300:    getDocumentType(ptrecEventParams, pbsOutput);
        400:    getItemDescription(ptrecEventParams, pbsOutput);
        412:    genericTableLookup(ptrecEventParams, pbsOutput);
        413:    genericPromptToBarcode(ptrecEventParams, pbsOutput);
        500:    isBinValid(ptrecEventParams, pbsOutput);
        600:    getDeviceConfig(ptrecEventParams, pbsOutput);
        601:    getLocationConfig(ptrecEventParams, pbsOutput);
        700:    decodeItemBarcode(ptrecEventParams, pbsOutput);
        701:    getLotSerialInformation(ptrecEventParams, pbsOutput);
        702:    getItemDetails(ptrecEventParams, pbsOutput);
        703:    getLotInfoDS(ptrecEventParams, pbsOutput);
        704:    getSerialInfoDS(ptrecEventParams, pbsOutput);
        800:    autoCreateLotSerialNo(ptrecEventParams, pbsOutput);
        801:    autoGenerateLotNo(ptrecEventParams, pbsOutput);
        802:    autoGenerateSerialNo(ptrecEventParams, pbsOutput);
        900:    changeExpirationDate(ptrecEventParams, pbsOutput);
        910:    getItemUnitsOfMeasure(ptrecEventParams, pbsOutput);
        920:    setRecordValue(ptrecEventParams, pbsOutput);
        930:    getUnitsOfMeasure(ptrecEventParams, pbsOutput);
        931:    GetItemsForCache(ptrecEventParams, pbsOutput); // @cache
        932:    GetBinsForCache(ptrecEventParams, pbsOutput); // @cache
        933:    GetBarcodeRulesForCache(ptrecEventParams, pbsOutput); // @cache
        934:    GetCrossRefForCache(ptrecEventParams, pbsOutput); // @cache
        935:    GetItemUnitsOfMeasureForCache(ptrecEventParams, pbsOutput); // @cache
        936:    GetItemLedgerEntriesForCache(ptrecEventParams, pbsOutput); // @cache
        950:    getLPDimensionUOM(ptrecEventParams, pbsOutput);
        960:    convertUnitOfMeasure(ptrecEventParams, pbsOutput);
        961:    echoKeyValue( ptrecEventParams, pbsOutput);
        962:    getItemTrackingCodes( ptrecEventParams, pbsOutput);
        963:    createItemCrossReference( ptrecEventParams, pbsOutput);
        964:    addItemPicture( ptrecEventParams, pbsOutput );
        965:    uploadPictureRecord( ptrecEventParams, pbsOutput );
        966:    printAnything( ptrecEventParams, pbsOutput );
        967:    downloadLatestUpdate( ptrecEventParams, pbsOutput );
        969:    runCodeUnit( ptrecEventParams, pbsOutput );
        970:    addNote( ptrecEventParams, pbsOutput );
        971:    logCloseDocumentActivity( ptrecEventParams, pbsOutput );
        972:    GetDeviceTranslations(ptrecEventParams, pbsOutput);
        973:    GetIcons(ptrecEventParams, pbsOutput);
        974:    GetQuantityExtensions(ptrecEventParams, pbsOutput); //<IW author="R.Trudeau" date="09/12/18" issue="TFS4194" />
        975:    GetOfflineApplications(ptrecEventParams, pbsOutput); //<IW author="R.Trudeau" date="10/26/18" issue="TFS4295" />
        976:    AddAttachment(ptrecEventParams, pbsOutput);   //<Iw author="h.z" date="05/01/2019' issuE+"TFS4543" />
      END;
    END;

    PROCEDURE testConnection@1000000000(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    BEGIN
      //<FUNC>
      //  Description: Quick validation function to ensure the connection to NAV has been established by the device.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      cuWHICommon.generateSuccessReturn(1, pbsOutput);
      ptrecEventParams.setValue('details', cuTranslationMgmt.getTranslatedString('LOG_TEST_CONNECTION', codRegionCode));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE validateLogin@1000000037(VAR ptrecEventParams@1000000005 : TEMPORARY Record 23044511;VAR pbsOutput@1000000001 : BigText);
    VAR
      lrecIWXUser@1000000004 : Record 23044514;
      lcodUserName@1000000003 : Code[50];
      ltxtPassword@1000000002 : Text[250];
      lcodDomain@1000000007 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Validates the credentials entered by the user against the IWX User table entries.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      lcodUserName := ptrecEventParams.getValue('user_name');
      lcodDomain := ptrecEventParams.getValue('default_domain');
      ltxtPassword := ptrecEventParams.getValue('password');

      //ERROR('User is |%1|, Password is |%2|', lcodUserName, ltxtPassword);
      IF(lcodDomain<>'')THEN
        lcodUserName := STRSUBSTNO('%1\%2',lcodDomain,lcodUserName);

      //<IW author="R.Trudeau" date="08/16/16" issue="TFS2544" >
      IF NOT lrecIWXUser.GET(lcodUserName) THEN
        ERROR(cuTranslationMgmt.getTranslatedString('ERR_INVALID_LOGIN', codRegionCode));
      //ERROR('%1 vs %2', ltxtPassword,lrecIWXUser.Password);
      IF lrecIWXUser.Password <> ltxtPassword THEN
        ERROR(cuTranslationMgmt.getTranslatedString('ERR_INVALID_LOGIN', codRegionCode));

      cuWHICommon.generateSuccessReturn(1, pbsOutput);

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getDeviceConfig@1000000003(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000006 : BigText);
    VAR
      lrecLocation@1000000002 : Record 14;
      lrecDeviceConfig@1000000003 : Record 23044504;
      lcodDeviceCode@1000000004 : Code[20];
      lcodUsername@1000000000 : Code[20];
      liConvertTemp@1000000005 : Integer;
      liMoveOption@1000000007 : Integer;
      liTempTransferOrderSurplusOpt@1000000008 : Integer;
      liTempPlaceBinHandlingOption@1000000010 : Integer;
      liTempTakeBinHandlingOption@1000000011 : Integer;
      liTempLotSerialBehavior@1000000012 : Integer;
      liTempInventoryScanItemBehavior@1000000013 : Integer;
      lrecWHISetup@1000000014 : Record 23044502;
      lrecCustomConfigValue@1000000015 : Record 23044391;
      lrefDeviceConfig@1000000016 : RecordRef;
      liTempValue@1000000017 : Integer;
    BEGIN
      //<FUNC>
      //  Description: Retrieves the device and location configuration based on the supplied device/user id
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      cuWHICommon.getDeviceConfig( lrecDeviceConfig, ptrecEventParams );

      IF( lrecLocation.GET(lrecDeviceConfig."Location Code") ) THEN ;

      pbsOutput.ADDTEXT('<CONFIG>');

      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="config_id" value="%1" type="S" />',cuWHICommon.escapeText(lrecDeviceConfig.Code)));
      addLocationConfiguration( lrecLocation, pbsOutput );
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="cons_batch" value="%1" type="B" />',lrecDeviceConfig."Consumption Journal Batch"));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="change_qty" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Allow Consumption Qty Change")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="neg_cons" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Allow Negative Consumption")));
      //pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="enforce_bom" value="%1" />',lrecDeviceConfig."Enforce BOM"));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="output_excess_qty" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Allow Excess Output")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="output_scrap" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Allow Scrap")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="output_last_only" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Output To Last Operation")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="output_time" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Show Output Time")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="pick_place"  value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Auto Handle Pick Placements")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="put_take"    value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Auto Handle Put-Away Takes")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="move_place"  value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Auto Handle Move Placements")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="auto_reg_put" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Auto Register Put-Away")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="auto_reg_pick" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Auto Register Pick")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="auto_reg_move" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Auto Register Move")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="ship_pick"   value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Update Shipment on Pick")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="exempt_bins" value="%1" type="S" />',cuWHICommon.escapeText(lrecDeviceConfig."Exempt Bins")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="clear_bin"   value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Clear Bin on Inventory Count")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="scratchpad_enabled" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Scratchpad Enabled")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="count_enabled" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Inventory Count Enabled")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="inquiry_enabled" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Inventory Inquiry Enabled")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="lp_enabled" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."License Plating Enabled")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="extended_errors" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Show Extended Errors")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="gen_ti_rec" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Gen. Tracking Info On Rec.")));
      //pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="ignore_bin_rec" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Ignore Bin on Receipt")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="reclass_batch"  value="%1" type="S" />',lrecDeviceConfig."Reclass Journal Batch"));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="count_batch"  value="%1" type="S" />',lrecDeviceConfig."Inventory Count Batch Name"));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="reclass_default_new_bin"  value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Reclass Default Bin on New")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="reclass_default_qty"  value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Reclass Default Quantity")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="allow_decimals"  value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Allow Decimal Quantities")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="output_batch"   value="%1" type="S" />',lrecDeviceConfig."Output Journal Batch"));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="auto_post_inv_adjust"   value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Auto Post Inv. Adjustment")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="override_bin_shipping" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Override Blank Bin - Shipping")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="override_bin_receiving" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Override Blank Bin - Receiving")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="inv_adj_batch"  value="%1" type="S" />',lrecDeviceConfig."Inventory Adjustment Batch"));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="allow_post_inv_count" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Allow Post - Inventory Count")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="allow_zoom" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Allow Zoom")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="bin_decode" value="%1" type="S" />',lrecDeviceConfig."Bin Decode Expression"));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="display_item_picture" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Display Item Picture")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="picture_display_time" value="%1" type="I" />',lrecDeviceConfig."Picture Display Time"));
      liConvertTemp :=lrecDeviceConfig."Reclass Scan Bin Behavior";
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="reclass_scan_bin" value="%1" type="I" />',liConvertTemp ));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="item_inquiry_shortcut" value="%1" type="S" />',lrecDeviceConfig."Item Inquiry Shortcut"));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="bin_inquiry_shortcut" value="%1" type="S" />',lrecDeviceConfig."Bin Inquiry Shortcut"));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="extensible_dll" value="%1" type="S" />',
        cuWHICommon.escapeText(lrecDeviceConfig."Extensibility Assembly" )));

      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="extensible_cu" value="%1" type="I" />',lrecDeviceConfig."Extensibility CodeUnit" ));
      IF ( 0 <> lrecDeviceConfig."Extensibility CodeUnit" ) THEN BEGIN
        lrecDeviceConfig.CALCFIELDS(lrecDeviceConfig."Extensibility CodeUnit Name");
        pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="extensible_cn" value="%1" type="S" />',cuWHICommon.escapeText(
          lrecDeviceConfig."Extensibility CodeUnit Name" )));
      END;
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="whse_reclass_batch"  value="%1" type="S" />',lrecDeviceConfig."Whse. Reclass Journal Batch"));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="allow_post_consumption" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Allow Post Consumption")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="auto_switch_to_place" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Auto-Switch to Place")));

      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="production_enabled" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Production Enabled")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="receiving_enabled" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Receiving Enabled")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="shipping_enabled" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Shipping Enabled")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="move_enabled" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Movements Enabled")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="pick_enabled" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Picking Enabled")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="putaway_enabled" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Put-Aways Enabled")));
      liTempTransferOrderSurplusOpt := lrecDeviceConfig."Transfer Order Surplus";
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="transfer_order_surplus"  value="%1" type="I" />', liTempTransferOrderSurplusOpt));
      liTempPlaceBinHandlingOption := lrecDeviceConfig."Place Bin Handling";
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="place_bin_handling"  value="%1" type="I" />', liTempPlaceBinHandlingOption ));

      liTempTakeBinHandlingOption := lrecDeviceConfig."Take Bin Handling";
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="take_bin_handling"  value="%1" type="I" />', liTempTakeBinHandlingOption ));

      liTempLotSerialBehavior := lrecDeviceConfig."Shipping Lot Serial Behavior";
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="ship_lot_serial_behavior"  value="%1" type="I" />', liTempLotSerialBehavior ));

      liTempInventoryScanItemBehavior := lrecDeviceConfig."Inventory Scan Item Behavior";
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="inventory_scan_item_behavior"  value="%1" type="I" />', liTempInventoryScanItemBehavior ));

      lrecWHISetup.GET;
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="whi_date_format"  value="%1" type="S" />',
                        cuWHICommon.escapeText(lrecWHISetup."Default Date Format" )));

      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="available_version"  value="%1" type="S" />',
                        cuWHICommon.escapeText(lrecWHISetup."Handheld Version" )));

      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="item_inq_app"  value="%1" type="S" />',
                        cuWHICommon.escapeText(lrecWHISetup."Item Inquiry Application" )));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="bin_inq_app"  value="%1" type="S" />',
                        cuWHICommon.escapeText(lrecWHISetup."Bin Inquiry Application" )));



      liTempValue := lrecDeviceConfig."Show Remaining Mode";
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="show_remaining_mode" value="%1" type="I" />', liTempValue ));

      liTempValue := lrecDeviceConfig."Unknown Scan Receive Behavior";
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="unknown_receive_behavior" value="%1" type="I" />', liTempValue ));

      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="auto_post_receive" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Auto Post On Receive")));

      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="auto_post_ship" value="%1" type="B" />',cuWHICommon.getTrueFalse(lrecDeviceConfig."Auto Post On Ship")));

      liTempValue := lrecDeviceConfig."Use Source Doc. - Receiving";
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="use_source_doc_receiving" value="%1" type="I" />', liTempValue));

      liTempValue := lrecDeviceConfig."Use Source Doc. - Shipping";
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="use_source_doc_shipping" value="%1" type="I" />', liTempValue));

      liTempValue := lrecDeviceConfig."Bin Decode In NAV";
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="bins_decodable" value="%1" type="I" />', liTempValue));

      // for android project compatibility
      IF liTempValue = 0 THEN
        pbsOutput.ADDTEXT('<OPTION key="force_bin_prefix" value="1" type="I" />')
      ELSE
        pbsOutput.ADDTEXT('<OPTION key="force_bin_prefix" value="0" type="I" />');




      liTempValue := lrecDeviceConfig."LP Usage Action Behavior";
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="lp_usage_action_behavior" value="%1" />', liTempValue));

      liTempValue := lrecDeviceConfig."Enforce BOM";
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="enforce_bom" value="%1" type="I" />', liTempValue));

      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="logo_height" value="%1" type="I" />', lrecDeviceConfig."Logo Height")); //<IW author="R.Trudeau" date="08/22/16" issue="TFS2633" />

      liTempValue := lrecDeviceConfig."Display Mode";
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="display_mode" value="%1" type="I" />', liTempValue));
      liTempValue := lrecDeviceConfig."Card View Scan Behavior";
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="card_view_scan_behavior" value="%1" type="I" />', liTempValue));

      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="gen_ti_output" value="%1" type="B" />', cuWHICommon.getTrueFalse(lrecDeviceConfig."Gen. Tracking Info. On Output")));

      liTempValue := lrecDeviceConfig."Show Output Dialog";
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="show_output_dialog" value="%1" type="I" />', liTempValue));

      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="print_on_qty_change" value="%1" type="B" />', cuWHICommon.getTrueFalse(lrecDeviceConfig."Print On Receipt Qty. Change")));



      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="print_on_output" value="%1" type="B" />', cuWHICommon.getTrueFalse(lrecDeviceConfig."Auto Print On Output")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="clear_bin_prod" value="%1" type="B" />', cuWHICommon.getTrueFalse(lrecDeviceConfig."Clear Bin on Production")));


      lrefDeviceConfig.GETTABLE(lrecDeviceConfig);
      lrecCustomConfigValue.SETRANGE("Record ID", lrefDeviceConfig.RECORDID);
      IF (lrecCustomConfigValue.FINDSET(FALSE)) THEN BEGIN
        REPEAT
          pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="%1"  value="%2" type="S" />',
                            lrecCustomConfigValue."Template Key", cuWHICommon.escapeText(lrecCustomConfigValue.Value)));
        UNTIL (lrecCustomConfigValue.NEXT = 0);
      END;

      addDevicePictureToResponse( lrecDeviceConfig, pbsOutput );

      getDefaultQuantityBehaviors(lrecDeviceConfig.Code, pbsOutput);


      getFindLineBehaviors(lrecDeviceConfig.Code,pbsOutput); //<IW author="R.Trudeau" date="03/28/18" issue="TFS3903" >


      addServerCultureToResponse(pbsOutput);

      pbsOutput.ADDTEXT('</CONFIG>');

      ptrecEventParams.setValue('location', lrecDeviceConfig."Location Code");
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getLocationConfig@1000000009(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000006 : BigText);
    VAR
      lrecLocation@1000000002 : Record 14;
      lcodLocation@1000000004 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Called when a location barcode is scanned.
      //               Returns required information about the scanned location.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      lcodLocation := ptrecEventParams.getValue('temp_loc_code');
      IF(lcodLocation='') THEN BEGIN
        lcodLocation := ptrecEventParams.getValue('loc_code');
        IF ( '' = lcodLocation ) THEN BEGIN
          lcodLocation := ptrecEventParams.getValue('location');
        END;

        IF( lrecLocation.GET( lcodLocation ) ) THEN ;
      END
      ELSE BEGIN
        lrecLocation.GET(lcodLocation);
      END;

      pbsOutput.ADDTEXT('<CONFIG>');
      addLocationConfiguration( lrecLocation, pbsOutput );
      pbsOutput.ADDTEXT('</CONFIG>');

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE addLocationConfiguration@1000000010(VAR precLocation@1000000001 : TEMPORARY Record 14;VAR pbsOutput@1000000006 : BigText);
    BEGIN
      //<FUNC>
      //  Description: Addss location specific information to the xml output string.
      //  Called From: "getDeviceConfig"
      //               "getLocationConfig"
      //  Side Effect: None
      //</FUNC>

      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="loc_code"    value="%1" type="S" />',cuWHICommon.escapeText(precLocation.Code)));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="loc_name"    value="%1" type="S" />',cuWHICommon.escapeText(precLocation.Name)));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="req_receive" value="%1" type="B" />',cuWHICommon.getTrueFalse(precLocation."Require Receive")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="req_ship"    value="%1" type="B" />',cuWHICommon.getTrueFalse(precLocation."Require Shipment")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="req_put"     value="%1" type="B" />',cuWHICommon.getTrueFalse(precLocation."Require Put-away")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="req_pick"    value="%1" type="B" />',cuWHICommon.getTrueFalse(precLocation."Require Pick")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="req_bins"    value="%1" type="B" />',cuWHICommon.getTrueFalse(precLocation."Bin Mandatory")));
      pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION key="directed"    value="%1" type="B" />',cuWHICommon.getTrueFalse(precLocation."Directed Put-away and Pick")));
    END;

    PROCEDURE addDevicePictureToResponse@1000000007(VAR precDeviceConfig@1000000001 : Record 23044504;VAR pbsOutput@1000000000 : BigText);
    VAR
      ltrecTempBlob@1000000006 : TEMPORARY Record 99008535;
      ldnMemStream@1000000003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      ldnBytes@1000000002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      lisPictureStream@1000000004 : InStream;
      ldnConvert@1000000005 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
    BEGIN
      //<FUNC>
      //  Description: Adds the Device Logo (if enabled on the config) to the output response.
      //  Side Effect: None
      //</FUNC>

      // make sure they chose this option
      IF ( NOT precDeviceConfig."Use Device Logo" ) THEN EXIT;

      // and make sure there is a picture to do something.
      precDeviceConfig.CALCFIELDS( precDeviceConfig."Device Logo" );
      IF ( NOT precDeviceConfig."Device Logo".HASVALUE ) THEN EXIT;

      // get a stream from the blob to copy into a .net memorystream
      precDeviceConfig."Device Logo".CREATEINSTREAM( lisPictureStream );
      ldnMemStream := ldnMemStream.MemoryStream();
      COPYSTREAM( ldnMemStream, lisPictureStream );

      // Now that we've got a memory stream, grab it's bytes
      // and convert to a base64string
      ldnBytes := ldnMemStream.GetBuffer();

      pbsOutput.ADDTEXT('<OPTION key="logo" value="');
      pbsOutput.ADDTEXT( ldnConvert.ToBase64String( ldnBytes ) );
      pbsOutput.ADDTEXT('" />');
    END;

    PROCEDURE isSerialNumberAvailable@1000000039(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      ldQuantityAvailable@1000000006 : Decimal;
      lcodLocation@1000000004 : Code[10];
      lcodItemNumber@1000000003 : Text;
      lsSerialNumber@1000000002 : Text;
    BEGIN
      //<FUNC>
      //  Description: This function determines if a serial number is available for use.  Will return the amount available.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>


      lcodLocation := ptrecEventParams.getValue('location');
      lcodItemNumber := ptrecEventParams.getItemNo();
      lsSerialNumber := ptrecEventParams.getSerialNo();

      ldQuantityAvailable := cuCommonBase.getSNQtyAvailable(lcodItemNumber, lsSerialNumber, lcodLocation);

      pbsOutput.ADDTEXT(STRSUBSTNO('<VALUE>%1</VALUE>',ldQuantityAvailable));
    END;

    PROCEDURE getDocumentType@1000000042(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000007 : BigText);
    VAR
      liDocumentType@1000000002 : Integer;
      lrecSalesHeader@1000000003 : Record 36;
      lrecPurchaseHeader@1000000004 : Record 38;
      lrecTransferHeader@1000000005 : Record 5740;
      lcodDocumentNumber@1000000000 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Returns the type of document (sales/purchase/transfer order)
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      lcodDocumentNumber := ptrecEventParams.getDocumentNo();

      liDocumentType := -1;
      // try to find the document
      IF( lrecSalesHeader.GET(lrecSalesHeader."Document Type"::Order, lcodDocumentNumber)) THEN BEGIN
        liDocumentType := 0;
      END
      ELSE IF( lrecPurchaseHeader.GET(lrecPurchaseHeader."Document Type"::Order, lcodDocumentNumber)) THEN BEGIN
        liDocumentType := 1;
      END
      ELSE IF( lrecTransferHeader.GET(lcodDocumentNumber)) THEN BEGIN
        liDocumentType := 2;
      END;

      pbsOutput.ADDTEXT(STRSUBSTNO('<VALUE>%1</VALUE>',liDocumentType));

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getItemDescription@1000000040(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000002 : BigText);
    VAR
      lrecItem@1000000004 : Record 27;
      lcodItemNumber@1000000000 : Text;
      lcodVariant@1000000003 : Text;
      lrecItemVariant@1000000005 : Record 5401;
    BEGIN
      //<FUNC>
      //  Description: Returns the item description.
      //  Called From: "executEvent"
      //  Side Effect: None
      //</FUNC>

      lcodItemNumber := COPYSTR( ptrecEventParams.getItemNo(), 1, MAXSTRLEN( lcodItemNumber) );


      lrecItem.GET(lcodItemNumber);
      lcodVariant := COPYSTR( ptrecEventParams.getValue('variant_code'), 1, MAXSTRLEN( lcodVariant) );

      IF ( '' <> lcodVariant ) THEN BEGIN
        lrecItemVariant.SETCURRENTKEY("Item No.",Code);
        IF ( lrecItemVariant.GET( lcodItemNumber, lcodVariant) ) THEN BEGIN
          pbsOutput.ADDTEXT(STRSUBSTNO('<VALUE>%1</VALUE>',
            cuWHICommon.escapeText(lrecItemVariant.Description + lrecItemVariant."Description 2")));
        END;
      END ELSE BEGIN
        // no variant, just use the item description
        pbsOutput.ADDTEXT(STRSUBSTNO('<VALUE>%1</VALUE>',
          cuWHICommon.escapeText(lrecItem.Description + lrecItem."Description 2")));
      END;

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE genericTableLookup@1000000008(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000002 : BigText);
    VAR
      lrrefWriter@1000000000 : RecordRef;
      lfrefField@1000000006 : FieldRef;
      liTableNo@1000000003 : Integer;
      ltxtBarcodeFormat@1000000004 : Text[100];
      ltxtTableFields@1000000005 : Text[100];
      liFieldIterator@1000000007 : Integer;
      lariFieldNos@1000000008 : ARRAY [10] OF Integer;
      liUsedFieldsCounter@1000000009 : Integer;
      liArrayLoop@1000000010 : Integer;
      ltxtTableFilter@1000000011 : Text[100];
      lrecFields@1000000012 : Record 2000000041;
      ltxtLocation@1000000013 : Text[20];
    BEGIN
      //<FUNC>
      //  Description: Run a generic lookup list.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>


      liTableNo := ptrecEventParams.getValueAsInt('table_id');
      ltxtTableFields := COPYSTR( ptrecEventParams.getValue('table_fields'), 1, MAXSTRLEN(ltxtBarcodeFormat) );
      ltxtBarcodeFormat := COPYSTR( ptrecEventParams.getValue('lookupformat'), 1, MAXSTRLEN(ltxtBarcodeFormat) );
      ltxtTableFilter := COPYSTR( ptrecEventParams.getValue('table_filter'), 1, MAXSTRLEN(ltxtTableFilter) );

      lrrefWriter.OPEN( liTableNo );

      IF ( STRLEN( ltxtTableFilter ) > 1 ) THEN BEGIN
        lrrefWriter.SETVIEW( ltxtTableFilter );
      END ELSE IF ( liTableNo = DATABASE::Bin ) THEN BEGIN
      //  // if it's the bin table, and we don't have another filter,
      //  // then add on a filter for location code.
      //  ltxtLocation := COPYSTR(ptrecEventParams.getValue('location'), 1, MAXSTRLEN(ltxtLocation) );
      //  IF ( '' <> ltxtLocation ) THEN BEGIN
      //    // in the bin table, location is field 1.
      //    lfrefField := lrrefWriter.Field(1 );
      //    lfrefField.SetRange( ltxtLocation );
      //  END;
      END;


      pbsOutput.ADDTEXT('<DATASET>');
      pbsOutput.ADDTEXT('<TABLE id="list">');
      pbsOutput.ADDTEXT('<COLS>');
      cuWHICommon.initializeColumns(TRUE);
      // barcode is always the first field, and it's always kidden.
      cuWHICommon.addDSColumnTracked(pbsOutput,FALSE,0,'Barcode','Barcode', iEventID,'',liTableNo,-1 );


      FOR liArrayLoop :=1 TO 4 DO BEGIN
        lariFieldNos[liArrayLoop] := 0;
      END;
      liUsedFieldsCounter := 0;

      lrecFields.SETRANGE(TableNo, liTableNo );
      lrecFields.ASCENDING(TRUE);

      lrecFields.FIND('-');
      liFieldIterator := 0;
      REPEAT
        liFieldIterator += 1;
        {// 2019+::begin
        IF NOT(lrecFields.ObsoleteState = lrecFields.ObsoleteState::Removed) THEN BEGIN //<IW author="R.Letts" date="05/14/19">
        }// 2019+::end
          lfrefField := lrrefWriter.FIELD( lrecFields."No." );
          IF ( 1 = liFieldIterator ) THEN BEGIN
            // default array for first run to the first field
            FOR liArrayLoop :=1 TO 4 DO BEGIN
              lariFieldNos[liArrayLoop] := lfrefField.NUMBER;
            END;
          END;

          IF ( STRPOS( ltxtTableFields, lfrefField.NAME ) > 0 ) THEN BEGIN
            liUsedFieldsCounter+=1;
            // looking to see if this field is in our list of fields.
            // only purpose is to allow it to be fairly user friendly for specifying which fields to include.
            // might make more sense in the future to have a more rigid control.
            cuWHICommon.addDSColumnTracked(pbsOutput,
              TRUE,
              100,
              lfrefField.NAME,
              lfrefField.NAME,
              iEventID,
              '',
              liTableNo,
              lfrefField.NUMBER );
            lariFieldNos[liUsedFieldsCounter] := lfrefField.NUMBER;
          END;
        {// 2019+::begin
        END;  //<IW author="R.Letts" date="05/14/19">
        }// 2019+::end
      UNTIL( lrecFields.NEXT()  = 0 );

      // TODO: now that there is a known list of fields that are being added, then
      // take the available width and divide by # of columns respecting a minimum width
      // max width is 240 on low-res

      pbsOutput.ADDTEXT('</COLS>');
      pbsOutput.ADDTEXT('<ROWS>');
      IF ( lrrefWriter.FIND('-') ) THEN BEGIN
        REPEAT
          pbsOutput.ADDTEXT('<R><FIELDS>');

          cuWHICommon.setDSFieldOverrideValue(iEventID,
              '',
              liTableNo,
              -1,
              // for now limited to only three substitutions.
              // should instead build up a field string.
              STRSUBSTNO( ltxtBarcodeFormat,
                FORMAT( lrrefWriter.FIELD( lariFieldNos[1] ).VALUE), // %1
                FORMAT( lrrefWriter.FIELD( lariFieldNos[2] ).VALUE), // %2
                FORMAT( lrrefWriter.FIELD( lariFieldNos[3] ).VALUE) ) // %3
              );
          cuWHICommon.addDSFieldsForRecord(pbsOutput,lrrefWriter,iEventID,'');
          pbsOutput.ADDTEXT('</FIELDS></R>');

        UNTIL ( 0 = lrrefWriter.NEXT() );
      END;

      pbsOutput.ADDTEXT('</ROWS>');
      pbsOutput.ADDTEXT('</TABLE>');
      pbsOutput.ADDTEXT('</DATASET>');

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE genericPromptToBarcode@1000000012(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000002 : BigText);
    VAR
      ltxtBarcodeFormat@1000000004 : Text[100];
      ltxtBarCode@1000000005 : Text[1024];
    BEGIN
      //<FUNC>
      //  Description: Formats the 'Prompt to Barcode' result to barcode format requested.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      ltxtBarCode := COPYSTR( ptrecEventParams.getValue('action_result'), 1, MAXSTRLEN(ltxtBarCode) );
      ltxtBarcodeFormat := COPYSTR( ptrecEventParams.getValue('lookupformat'), 1, MAXSTRLEN(ltxtBarcodeFormat) );

      ltxtBarCode := COPYSTR( STRSUBSTNO( ltxtBarcodeFormat, ltxtBarCode ), 1, MAXSTRLEN( ltxtBarCode) );

      pbsOutput.ADDTEXT('<VALUE>');
      pbsOutput.ADDTEXT( cuWHICommon.escapeText( ltxtBarCode ) );
      pbsOutput.ADDTEXT('</VALUE>');

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE isBinValid@1000000061(VAR ptrecEventParams@1000000002 : TEMPORARY Record 23044511;VAR pbsOutput@1000000005 : BigText);
    VAR
      lrecBin@1000000001 : Record 7354;
      lrrRecRef@1000000006 : RecordRef;
      lfrFieldRef@1000000004 : FieldRef;
      lsBinCode@1000000003 : Text;
      lsLocation@1000000000 : Text;
    BEGIN
      //<FUNC>
      //  Description: Determines if the bin code supplied exists in NAV.
      //               Used when the 'Bin Decode in NAV' option is set to 'Yes'.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      lsBinCode := ptrecEventParams.getValue('bin_code');
      lrrRecRef.OPEN(DATABASE::Bin);
      lfrFieldRef := lrrRecRef.FIELD(2); // code

      IF( STRLEN(lsBinCode) > lfrFieldRef.LENGTH ) THEN BEGIN
        pbsOutput.ADDTEXT('<VALUE>0</VALUE>');
      END ELSE BEGIN
        lsLocation := ptrecEventParams.getValue('location');
        IF( lrecBin.GET(lsLocation,lsBinCode) ) THEN
          pbsOutput.ADDTEXT('<VALUE>1</VALUE>')
        ELSE
          pbsOutput.ADDTEXT('<VALUE>0</VALUE>');
      END;

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE decodeItemBarcode@1000000006(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lbFound@1000000020 : Boolean;
      lrecBarcodeRule@1000000021 : Record 23044509;
      lrecItem@1000000022 : Record 27;
      lrecItemTrackingCode@1000000006 : Record 6502;
      lrecItemUOM@1000000040 : Record 5404;
      lbLotTracked@1000000004 : Boolean;
      lbSNTracked@1000000005 : Boolean;
      lbSNWhseTracked@1000000009 : Boolean;
      lbLotWhseTracked@1000000010 : Boolean;
      lbLNSaleOut@1000000017 : Boolean;
      lbSNSaleOut@1000000018 : Boolean;
      lsBarcode@1000000003 : Text[250];
      lcodBinCode@1000000007 : Code[20];
      ldBinQuantity@1000000002 : Decimal;
      liMenu@1000000008 : Integer;
      lcodStickyItem@1000000011 : Code[20];
      lcodVariant@1000000024 : Text;
      ltxtTestMenu@1000000016 : Text[100];
      lbLotManuOut@1000000015 : Boolean;
      lbLotManuIn@1000000014 : Boolean;
      lbSerialManuOut@1000000013 : Boolean;
      lbSerialManuIn@1000000012 : Boolean;
      lbManualExpirationDateReq@1000000025 : Boolean;
      lcodKnownItem@1000000026 : Code[20];
      lbLotInfoInboundRequired@1000000027 : Boolean;
      lbLotInfoOutboundRequired@1000000028 : Boolean;
      ltxtDateString@1000000029 : Text[10];
      lrecScratchEntry@1000000030 : Record 23044500;
      lrecSample@1000000031 : Record 23044522;
      lrecUnknownBarcodeRule@1000000032 : Record 23044509;
      lbSerialInfoInboundRequired@1000000034 : Boolean;
      lbSerialInfoOutboundRequired@1000000033 : Boolean;
      lcodUOM@1000000035 : Code[10];
      lrecItemLedgerEntry@1000000036 : Record 32;
      lsItemNumber@1000000019 : Text;
      lsVariantCode@1000000023 : Text;
      lbForceBinPrefix@1000000037 : Boolean;
      lrecBin@1000000038 : Record 7354;
      lcodLocationCode@1000000039 : Code[10];
    BEGIN
      //<FUNC>
      //  Description: Runs the decode barcode rules and returns to the scanner the decoded
      //               information about the item.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      lsBarcode := ptrecEventParams.getValue('barcode');
      lsItemNumber := ptrecEventParams.getValue('item_number');
      lsVariantCode := ptrecEventParams.getValue('variant_code');
      lbForceBinPrefix := ptrecEventParams.getValueAsBool('force_bin_prefix');
      lcodLocationCode := ptrecEventParams.getValue('location');

      IF NOT lbForceBinPrefix THEN BEGIN
        IF lrecBin.GET(lcodLocationCode,COPYSTR(lsBarcode,1,MAXSTRLEN(lrecBin.Code))) THEN BEGIN
          pbsOutput.ADDTEXT('<BIN>1</BIN>');
          EXIT;
        END;
      END;

      liMenu := lrecBarcodeRule.Context::Generic;
      ltxtTestMenu := COPYSTR( ptrecEventParams.getValue('form_id'), 1, MAXSTRLEN( ltxtTestMenu ) );
      IF ( '' <> ltxtTestMenu ) THEN BEGIN
        EVALUATE( liMenu, ltxtTestMenu );
      END;

      lbFound := cuDecodeRuleMgmt.decodeItemBarcode(lsBarcode,lrecBarcodeRule, lrecItem, liMenu, lsItemNumber, lsVariantCode );


      IF lbFound THEN BEGIN
        IF (lrecItem."No." = '')  THEN
          ERROR(cuTranslationMgmt.getTranslatedString('ERR_UNKNOWN_BARCODE', codRegionCode),lsBarcode);

        //
        // determine if the item is lot/serial tracked
        //
        lbLotTracked := FALSE;
        lbSNTracked := FALSE;

        lcodUOM := COPYSTR(lrecBarcodeRule."UOM Result", 1, MAXSTRLEN(lcodUOM));
        IF (NOT validateUOM(liMenu, lrecItem."No.", lcodUOM, lrecBarcodeRule."Lot No. Result", lrecBarcodeRule."Serial No. Result")) THEN
          ERROR(cuTranslationMgmt.getTranslatedString('ERR_BARCODE_WRONG_UOM', codRegionCode), lrecBarcodeRule."UOM Result", lrecItem."No.");

        lrecBarcodeRule."UOM Result" := lcodUOM;

        IF lrecItem."Item Tracking Code" <> '' THEN BEGIN
          IF( lrecItemTrackingCode.GET(lrecItem."Item Tracking Code") ) THEN BEGIN
            lbSNTracked := lrecItemTrackingCode."SN Specific Tracking";
            lbLotTracked := lrecItemTrackingCode."Lot Specific Tracking";
            lbSNWhseTracked := lrecItemTrackingCode."SN Warehouse Tracking";
            lbLotWhseTracked := lrecItemTrackingCode."Lot Warehouse Tracking";
            lbLNSaleOut := lrecItemTrackingCode."Lot Sales Outbound Tracking";
            lbSNSaleOut := lrecItemTrackingCode."SN Sales Outbound Tracking";
            lbLotManuOut := lrecItemTrackingCode."Lot Manuf. Outbound Tracking";
            lbLotManuIn := lrecItemTrackingCode."Lot Manuf. Inbound Tracking";
            lbSerialManuOut := lrecItemTrackingCode."SN Manuf. Outbound Tracking";
            lbSerialManuIn := lrecItemTrackingCode."SN Manuf. Inbound Tracking";
            lbManualExpirationDateReq := lrecItemTrackingCode."Man. Expir. Date Entry Reqd.";
            lbLotInfoInboundRequired := lrecItemTrackingCode."Lot Info. Inbound Must Exist";
            lbLotInfoOutboundRequired := lrecItemTrackingCode."Lot Info. Outbound Must Exist";
            lbSerialInfoInboundRequired := lrecItemTrackingCode."SN Info. Inbound Must Exist";
            lbSerialInfoOutboundRequired := lrecItemTrackingCode."SN Info. Outbound Must Exist";
          END;
        END;


        pbsOutput.ADDTEXT('<ITEM>');

        //cuWHICommon.addComment( STRSUBSTNO( 'Rule:%1', lrecBarcodeRule."Rule ID" ) , pbsOutput );
        pbsOutput.ADDTEXT(STRSUBSTNO('<NUMBER>%1</NUMBER>',cuWHICommon.escapeText(lrecItem."No.")));

        pbsOutput.ADDTEXT(STRSUBSTNO('<DESCR>%1</DESCR>',cuWHICommon.escapeText(lrecItem.Description)));
        pbsOutput.ADDTEXT(STRSUBSTNO('<DESCR2>%1</DESCR2>',cuWHICommon.escapeText(lrecItem."Description 2")));
        pbsOutput.ADDTEXT(STRSUBSTNO('<SN>%1</SN>',cuWHICommon.escapeText(lrecBarcodeRule."Serial No. Result")));
        pbsOutput.ADDTEXT(STRSUBSTNO('<LOT>%1</LOT>',cuWHICommon.escapeText(lrecBarcodeRule."Lot No. Result")));
        pbsOutput.ADDTEXT(STRSUBSTNO('<SN_TRACKED>%1</SN_TRACKED>',lbSNTracked));
        pbsOutput.ADDTEXT(STRSUBSTNO('<LOT_TRACKED>%1</LOT_TRACKED>',lbLotTracked));
        pbsOutput.ADDTEXT(STRSUBSTNO('<SN_WHSE_TRACKED>%1</SN_WHSE_TRACKED>',lbSNWhseTracked));
        pbsOutput.ADDTEXT(STRSUBSTNO('<LOT_WHSE_TRACKED>%1</LOT_WHSE_TRACKED>',lbLotWhseTracked));

        pbsOutput.ADDTEXT(STRSUBSTNO('<LN_SALE_OUT>%1</LN_SALE_OUT>',lbLNSaleOut));
        pbsOutput.ADDTEXT(STRSUBSTNO('<SN_SALE_OUT>%1</SN_SALE_OUT>',lbSNSaleOut));
        pbsOutput.ADDTEXT(STRSUBSTNO('<VARIANT_CODE>%1</VARIANT_CODE>',
          cuWHICommon.escapeText(lrecBarcodeRule."Variant Result")));

        pbsOutput.ADDTEXT(STRSUBSTNO('<LN_MAN_OUT>%1</LN_MAN_OUT>',lbLotManuOut));
        pbsOutput.ADDTEXT(STRSUBSTNO('<LN_MAN_IN>%1</LN_MAN_IN>',lbLotManuIn));
        pbsOutput.ADDTEXT(STRSUBSTNO('<SN_MAN_OUT>%1</SN_MAN_OUT>',lbSerialManuOut));
        pbsOutput.ADDTEXT(STRSUBSTNO('<SN_MAN_IN>%1</SN_MAN_IN>',lbSerialManuIn));

        pbsOutput.ADDTEXT(STRSUBSTNO('<UOM>%1</UOM>',cuWHICommon.escapeText(lrecBarcodeRule."UOM Result")));
        pbsOutput.ADDTEXT(STRSUBSTNO('<BASEUOM>%1</BASEUOM>',cuWHICommon.escapeText(lrecItem."Base Unit of Measure")));
        pbsOutput.ADDTEXT(STRSUBSTNO('<PUTAWAYUOM>%1</PUTAWAYUOM>',cuWHICommon.escapeText(lrecItem."Put-away Unit of Measure Code")));
        pbsOutput.ADDTEXT(STRSUBSTNO('<SALESUOM>%1</SALESUOM>',cuWHICommon.escapeText(lrecItem."Sales Unit of Measure")));
        pbsOutput.ADDTEXT(STRSUBSTNO('<PURCHASEUOM>%1</PURCHASEUOM>',cuWHICommon.escapeText(lrecItem."Purch. Unit of Measure")));
        pbsOutput.ADDTEXT(STRSUBSTNO('<EXP>%1</EXP>',lrecBarcodeRule."Expiry Date Result"));
        pbsOutput.ADDTEXT(STRSUBSTNO('<CUST1>%1</CUST1>',cuWHICommon.escapeText(lrecBarcodeRule."Custom 1 Result")));
        pbsOutput.ADDTEXT(STRSUBSTNO('<CUST2>%1</CUST2>',cuWHICommon.escapeText(lrecBarcodeRule."Custom 2 Result")));
        pbsOutput.ADDTEXT(STRSUBSTNO('<CUST3>%1</CUST3>',cuWHICommon.escapeText(lrecBarcodeRule."Custom 3 Result")));
        pbsOutput.ADDTEXT(STRSUBSTNO('<BCQTY>%1</BCQTY>',lrecBarcodeRule."Quantity Result"));
        pbsOutput.ADDTEXT(STRSUBSTNO('<MEXPD>%1</MEXPD>',lbManualExpirationDateReq));
        pbsOutput.ADDTEXT(STRSUBSTNO('<LOT_INFO_IN>%1</LOT_INFO_IN>', lbLotInfoInboundRequired));
        pbsOutput.ADDTEXT(STRSUBSTNO('<LOT_INFO_OUT>%1</LOT_INFO_OUT>', lbLotInfoOutboundRequired));
        pbsOutput.ADDTEXT(STRSUBSTNO('<SERIAL_INFO_IN>%1</SERIAL_INFO_IN>', lbSerialInfoInboundRequired));
        pbsOutput.ADDTEXT(STRSUBSTNO('<SERIAL_INFO_OUT>%1</SERIAL_INFO_OUT>', lbSerialInfoOutboundRequired));


        lcodBinCode := '';
        ldBinQuantity := 0;
        IF ( lrecBarcodeRule."Return Bin and Qty with Lot" ) THEN BEGIN
          lcodBinCode := '';
          ldBinQuantity := 0;
          IF( lrecBarcodeRule."Lot No. Result" <> '' ) THEN BEGIN
            getQuantityAndBinFromLot(lrecBarcodeRule."Lot No. Result",lcodBinCode,ldBinQuantity);
          END;
        END;


        pbsOutput.ADDTEXT(STRSUBSTNO('<BIN>%1</BIN>',lcodBinCode));
        pbsOutput.ADDTEXT(STRSUBSTNO('<QUANTITY>%1</QUANTITY>',ldBinQuantity));
        pbsOutput.ADDTEXT(STRSUBSTNO('<ITEMCATEGORYCODE>%1</ITEMCATEGORYCODE>',cuWHICommon.escapeText(lrecItem."Item Category Code")));
        pbsOutput.ADDTEXT(STRSUBSTNO('<ITEMTRACKINGCODE>%1</ITEMTRACKINGCODE>',cuWHICommon.escapeText(lrecItem."Item Tracking Code")));

        pbsOutput.ADDTEXT('<UNITSOFMEASURE>');
        lrecItemUOM.SETRANGE("Item No.",lrecItem."No.");
        IF lrecItemUOM.FINDSET(FALSE) THEN BEGIN
          REPEAT
            pbsOutput.ADDTEXT(STRSUBSTNO('<UM code="%1" qty="%2" />',lrecItemUOM.Code,lrecItemUOM."Qty. per Unit of Measure"));
          UNTIL(lrecItemUOM.NEXT=0);
        END;
        pbsOutput.ADDTEXT('</UNITSOFMEASURE>');



        pbsOutput.ADDTEXT('</ITEM>');
      END
      ELSE BEGIN
        CASE recWHISetup."Unknown Barcode Scans" OF
          recWHISetup."Unknown Barcode Scans"::"Record in Scratch":
            BEGIN
              lrecScratchEntry.INIT();
              lrecScratchEntry.Category := lrecScratchEntry.Category::Other;
              lrecScratchEntry.VALIDATE("Creation Date", TODAY);
              lrecScratchEntry.VALIDATE(Barcode, lsBarcode );
              lrecScratchEntry.VALIDATE("User ID", ptrecEventParams.getValue('user_name') );
              lrecScratchEntry.VALIDATE(Comment, cuTranslationMgmt.getTranslatedString('MSG_BARCODE_AUTO_GENERATED', codRegionCode) );
              lrecScratchEntry.INSERT(TRUE);
              COMMIT(); // commit is needed because we're also going to error right after this
            END;
          recWHISetup."Unknown Barcode Scans"::"Record in Samples":
            BEGIN
              lrecSample.INIT();
              lrecSample.Template := FALSE;
              lrecSample.Type := lrecSample.Type::Item;
              lrecSample.State := 'UNKNOWN';
              lrecSample.VALIDATE(Barcode, lsBarcode );
              lrecSample.VALIDATE(Description, cuTranslationMgmt.getTranslatedString('MSG_BARCODE_AUTO_GENERATED', codRegionCode) );
              lrecSample.INSERT(TRUE);
              COMMIT(); // commit is needed because we're also going to error right after this
            END;
          recWHISetup."Unknown Barcode Scans"::"Create Empty Barcode Rule":
            BEGIN
              // just create an empty barcode rule with the sample text of the barcode
              lrecUnknownBarcodeRule.INIT();
              lrecUnknownBarcodeRule.Enabled := FALSE;
              lrecUnknownBarcodeRule.VALIDATE("Sample Text", lsBarcode );
              lrecUnknownBarcodeRule.VALIDATE(Description, cuTranslationMgmt.getTranslatedString('MSG_BARCODE_AUTO_GENERATED', codRegionCode) );
              lrecUnknownBarcodeRule.INSERT(TRUE);
              COMMIT(); // commit is needed because we're also going to error right after this
            END;

        END; // end case
        ERROR(cuTranslationMgmt.getTranslatedString('ERR_UNKNOWN_BARCODE', codRegionCode),lsBarcode);
      END;



      ptrecEventParams.setValue('Item No.', lrecItem."No.");
      ptrecEventParams.setValue('Lot No.', lrecBarcodeRule."Lot No. Result");
      ptrecEventParams.setValue('Serial No.', lrecBarcodeRule."Serial No. Result");
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE autoCreateLotSerialNo@1000000013(VAR ptrecEventParams@1000000008 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecLotInfo@1000000001 : Record 6505;
      lsLotNumber@1000000006 : Text;
      lsSerialNumber@1000000007 : Text;
      lrecItem@1000000009 : Record 27;
      lrecItemTrackingCode@1000000010 : Record 6502;
      lcodItemNumber@1000000005 : Text;
      lcodVariantCode@1000000004 : Text;
      lbAutoGenLN@1000000003 : Boolean;
      lbAutoGenSN@1000000002 : Boolean;
      ltxtDetails@1000000011 : Text[250];
    BEGIN
      //<FUNC>
      //  Description: Function will generate a lot number and/or serial number for the supplied item.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      lcodItemNumber := ptrecEventParams.getItemNo();

      lcodVariantCode := ptrecEventParams.getValue('variant_code');
      lbAutoGenLN := ptrecEventParams.getValueAsBool('auto_gen_ln');
      lbAutoGenSN := ptrecEventParams.getValueAsBool('auto_gen_sn');

      lrecItem.GET(lcodItemNumber);

      IF( lrecItemTrackingCode.GET(lrecItem."Item Tracking Code") ) THEN BEGIN

        IF( lbAutoGenLN AND (lrecItem."Lot Nos." <> '') ) THEN BEGIN
          lsLotNumber := generateLotNumber(lcodItemNumber,lcodVariantCode);
        END;

        IF( lbAutoGenSN AND (lrecItem."Serial Nos." <> '') ) THEN BEGIN
          lsSerialNumber := generateSerialNumber(lcodItemNumber,lcodVariantCode);
        END;
      END;

      pbsOutput.ADDTEXT('<ITEM>');
      pbsOutput.ADDTEXT(STRSUBSTNO('<SN>%1</SN>',cuWHICommon.escapeText(lsSerialNumber)));
      pbsOutput.ADDTEXT(STRSUBSTNO('<LOT>%1</LOT>',cuWHICommon.escapeText(lsLotNumber)));
      pbsOutput.ADDTEXT('</ITEM>');

      IF (lsLotNumber <> '') THEN BEGIN
        ltxtDetails := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_AUTO_GENERATED_LN', codRegionCode), lsLotNumber, lcodItemNumber);
      END;

      IF (lsSerialNumber <> '') THEN BEGIN
        ltxtDetails := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_AUTO_GENERATED_SN', codRegionCode), lsSerialNumber, lcodItemNumber);
      END;

      ptrecEventParams.setValue('details', ltxtDetails);
      ptrecEventParams.setValue('Lot No.', lsLotNumber);
      ptrecEventParams.setValue('Serial No.', lsSerialNumber);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE autoGenerateLotNo@1000000057(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecItem@1000000004 : Record 27;
      lsItemNumber@1000000003 : Text;
      lsVariantCode@1000000002 : Text;
      lsLotNumber@1000000005 : Text;
    BEGIN
      //<FUNC>
      //  Auto generates a lot number for the item/variant.
      //</FUNC>

      lsItemNumber := ptrecEventParams.getItemNo();

      lsVariantCode := ptrecEventParams.getValue('variant_code');
      lrecItem.GET(lsItemNumber);

      //lrecItem.TESTFIELD("Lot Nos.");
      lsLotNumber := generateLotNumber(lsItemNumber,lsVariantCode);

      pbsOutput.ADDTEXT(STRSUBSTNO('<VALUE>%1</VALUE>',lsLotNumber));

      ptrecEventParams.setValue('details', STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_AUTO_GENERATED_LN', codRegionCode), lsLotNumber, lsItemNumber));
      ptrecEventParams.setValue('Lot No.', lsLotNumber);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE autoGenerateSerialNo@1000000058(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecItem@1000000005 : Record 27;
      lsItemNumber@1000000004 : Text;
      lsVariantCode@1000000003 : Text;
      lsSerialNumber@1000000002 : Text;
    BEGIN
      //<FUNC>
      //  Auto generates a serial number for the item/variant.
      //</FUNC>

      lsItemNumber := ptrecEventParams.getItemNo();

      lsVariantCode := ptrecEventParams.getValue('variant_code');
      lrecItem.GET(lsItemNumber);

      //lrecItem.TESTFIELD("Lot Nos.");
      lsSerialNumber := generateSerialNumber(lsItemNumber,lsVariantCode);

      pbsOutput.ADDTEXT(STRSUBSTNO('<VALUE>%1</VALUE>',lsSerialNumber));

      ptrecEventParams.setValue('details', STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_AUTO_GENERATED_SN', codRegionCode), lsSerialNumber, lsItemNumber));
      ptrecEventParams.setValue('Serial No.', lsSerialNumber);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE changeExpirationDate@1000000002(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecReservationEntry@1000000004 : Record 337;
      liEntryNumber@1000000006 : Integer;
      lsLotNumber@1000000005 : Text;
      ldtExpirationDate@1000000003 : Date;
      lbPositive@1000000002 : Boolean;
      ltxtDetails@1000000007 : Text[250];
    BEGIN
      //<FUNC>
      //  Description: Changes an expiration date for a known reservation entry.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      liEntryNumber := ptrecEventParams.getValueAsInt('entry_number');
      lsLotNumber := ptrecEventParams.getLotNo();
      ldtExpirationDate := cuWHICommon.getExpirationDate(ptrecEventParams);
      lbPositive := ptrecEventParams.getValueAsBool('positive');

      lrecReservationEntry.GET(liEntryNumber, lbPositive);

      // sanity check
      lrecReservationEntry.TESTFIELD("Lot No.",lsLotNumber);

      lrecReservationEntry."Expiration Date" := ldtExpirationDate;
      lrecReservationEntry.MODIFY;

      cuWHICommon.generateSuccessReturn(1, pbsOutput);

      ltxtDetails := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_CHANGE_EXPIRY_DATE', codRegionCode), FORMAT(ldtExpirationDate), lsLotNumber);
      ptrecEventParams.setValue('Lot No.', lsLotNumber);
      ptrecEventParams.setValue('details', ltxtDetails);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE generateLotNumber@1000000001(pcodItemNo@1000000000 : Text;pcodVariantCode@1000000003 : Text) : Text;
    VAR
      lrecItem@1000000004 : Record 27;
      lrecItemTrackingCode@1000000001 : Record 6502;
      lcuNoSeriesMgt@1000000005 : Codeunit 396;
      lcodLotNumberMaxLength@1000000002 : Code[250];
    BEGIN
      //<FUNC>
      //  Description: Creates a lot number for the supplied info.
      //               Will generate a lot information card if required.
      //  Called From: "autoCreateLotSerialNo"
      //  Side Effect: None
      //</FUNC>


      lrecItem.GET(pcodItemNo);

      lcodLotNumberMaxLength := '';

      IF( lrecItemTrackingCode.GET(lrecItem."Item Tracking Code") ) THEN BEGIN
        IF( lrecItem."Lot Nos." <> '' ) THEN BEGIN
          // generate a lot number
          lcuNoSeriesMgt.InitSeries(lrecItem."Lot Nos.",lrecItem."Lot Nos.",0D,lcodLotNumberMaxLength,lrecItem."Lot Nos.");

          IF( lrecItemTrackingCode."Lot Info. Inbound Must Exist" OR lrecItemTrackingCode."Lot Info. Outbound Must Exist" ) THEN
            createLotInfo(lrecItem."No.",pcodVariantCode,lcodLotNumberMaxLength);  //<IW author="R.Trudeau" date="10/13/17" issue="3562" />
        END;
      END;

      EXIT(lcodLotNumberMaxLength);
    END;

    PROCEDURE createLotInfo@1000000041(psItemNumber@1000000000 : Text;psVariantCode@1000000001 : Text;psLotNumber@1000000002 : Text);
    VAR
      lrecLotInfo@1000000003 : Record 6505;
    BEGIN
      //<FUNC>
      //  Description: Creates the Lot information record.
      //  Called From: "generateLotNumber"
      //  Side Effect: None
      //</FUNC>

      IF lrecLotInfo.GET(psItemNumber,psVariantCode,psLotNumber) THEN
        EXIT;

      lrecLotInfo.INIT;
      lrecLotInfo."Item No." := psItemNumber;
      lrecLotInfo."Variant Code" := psVariantCode;
      lrecLotInfo."Lot No." := psLotNumber;
      lrecLotInfo.INSERT;
    END;

    PROCEDURE generateSerialNumber@1000000004(pcodItemNo@1000000001 : Text;pcodVariantCode@1000000000 : Text) : Text;
    VAR
      lrecItem@1000000006 : Record 27;
      lrecItemTrackingCode@1000000005 : Record 6502;
      lcuNoSeriesMgt@1000000004 : Codeunit 396;
      lcodSerialNumberMaxLength@1000000002 : Code[250];
    BEGIN
      //<FUNC>
      //  Description: Creates a serial number for the supplied info.
      //  Called From: "autoCreateLotSerialNo"
      //  Side Effect: None
      //</FUNC>


      lrecItem.GET(pcodItemNo);

      lcodSerialNumberMaxLength := '';

      IF( lrecItemTrackingCode.GET(lrecItem."Item Tracking Code") ) THEN BEGIN
        IF( lrecItem."Serial Nos." <> '' ) THEN BEGIN
          // generate a serial number
          lcuNoSeriesMgt.InitSeries(lrecItem."Serial Nos.",lrecItem."Serial Nos.",0D,lcodSerialNumberMaxLength,lrecItem."Serial Nos.");


          //<IW author="R.Trudeau" date="10/13/17" issue="3562">
          IF( lrecItemTrackingCode."SN Info. Inbound Must Exist" OR lrecItemTrackingCode."SN Info. Outbound Must Exist" ) THEN
            createSerialInfo(lrecItem."No.",pcodVariantCode,lcodSerialNumberMaxLength);
        END;
      END;

      EXIT(lcodSerialNumberMaxLength);
    END;

    PROCEDURE createSerialInfo@1000000043(psItemNumber@1000000002 : Text;psVariantCode@1000000001 : Text;psSerialNumber@1000000000 : Text);
    VAR
      lrecSerialInfo@1000000003 : Record 6504;
    BEGIN
      //<FUNC>
      //  Description: Creates the Serial information record.
      //  Called From: "generateSerialNumber"
      //  Side Effect: None
      //</FUNC>

      IF lrecSerialInfo.GET(psItemNumber,psVariantCode,psSerialNumber) THEN
        EXIT;

      lrecSerialInfo.INIT;
      lrecSerialInfo."Item No." := psItemNumber;
      lrecSerialInfo."Variant Code" := psVariantCode;
      lrecSerialInfo."Serial No." := psSerialNumber;
      lrecSerialInfo.INSERT;
    END;

    PROCEDURE getQuantityAndBinFromLot@1000000011(psLotNo@1000000000 : Text;VAR pcodBinCode@1000000001 : Code[20];VAR pdQuantity@1000000002 : Decimal) : Boolean;
    VAR
      lrecItemLedgerEntry@1000000003 : Record 32;
      lrecWhseEntry@1000000004 : Record 7312;
      lrecBinContent@1000000005 : Record 7302;
    BEGIN
      //<FUNC>
      //  Description: Retrieves the Bin and Quantity based on a lot number.
      //  Called From: "decodeItemBarcode"
      //  Side Effect: None
      //</FUNC>

      psLotNo := UPPERCASE(psLotNo);

      pcodBinCode := '';
      pdQuantity := 0;

      IF( psLotNo <> '' ) THEN BEGIN
        lrecItemLedgerEntry.RESET;
        lrecItemLedgerEntry.SETCURRENTKEY("Lot No.");
        lrecItemLedgerEntry.SETRANGE("Lot No.", psLotNo);
        lrecItemLedgerEntry.SETRANGE(Open,TRUE);

        IF lrecItemLedgerEntry.FINDFIRST THEN BEGIN

          lrecWhseEntry.RESET;
          lrecWhseEntry.SETCURRENTKEY("Item No.","Location Code","Variant Code","Bin Type Code",
                                  "Unit of Measure Code","Lot No.","Serial No.");
          lrecWhseEntry.SETRANGE("Item No.", lrecItemLedgerEntry."Item No.");
          lrecWhseEntry.SETRANGE("Location Code", lrecItemLedgerEntry."Location Code");
          lrecWhseEntry.SETRANGE("Lot No.", lrecItemLedgerEntry."Lot No.");
          IF lrecWhseEntry.FINDSET THEN BEGIN
            REPEAT
              lrecBinContent.RESET;
              lrecBinContent.SETRANGE("Location Code", lrecWhseEntry."Location Code");
              lrecBinContent.SETRANGE("Bin Code", lrecWhseEntry."Bin Code");
              lrecBinContent.SETRANGE("Item No.", lrecWhseEntry."Item No.");
              IF lrecBinContent.FINDSET THEN BEGIN
                REPEAT
                  lrecBinContent.SETFILTER("Lot No. Filter", psLotNo);
                  lrecBinContent.CALCFIELDS(Quantity);
                  IF lrecBinContent.Quantity <> 0 THEN BEGIN
                    pcodBinCode := lrecWhseEntry."Bin Code";
                    pdQuantity := lrecBinContent.Quantity;
                    EXIT(TRUE);
                  END;
                UNTIL lrecBinContent.NEXT = 0;
              END;
            UNTIL lrecWhseEntry.NEXT = 0;
          END;
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE getItemUnitsOfMeasure@1000000014(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput2@1000000002 : BigText);
    VAR
      lrecItemUOM@1000000004 : Record 5404;
      lrecUOM@1000000005 : Record 204;
      lrecItem@1000000003 : Record 27;
      lrrefItemUOM@1000000007 : RecordRef;
      ldnOutput@1000000009 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lcodItemNumber@1000000000 : Text;
      lbReturnDataSet@1000000006 : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Returns the item unit of measures.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      ldnOutput := ldnOutput.StringBuilder();
      lcodItemNumber := COPYSTR( ptrecEventParams.getItemNo(), 1, MAXSTRLEN( lcodItemNumber) );
      lbReturnDataSet := ptrecEventParams.getValueAsBool('whi_dataset');
      lrecItem.GET(lcodItemNumber);

      lrecItemUOM.SETRANGE("Item No.", lcodItemNumber);

      // old behavior, return custom XML,need to deprecate after next breaking release.
      IF (NOT lbReturnDataSet) THEN BEGIN
        ldnOutput.Append('<ITEMUOM>');
        IF(lrecItemUOM.FINDSET(FALSE,FALSE)) THEN BEGIN
          REPEAT
            IF(lrecUOM.GET(lrecItemUOM.Code)) THEN BEGIN
              ldnOutput.Append('<UOM>');
              ldnOutput.Append(STRSUBSTNO('<CODE>%1</CODE>',
                cuWHICommon.escapeText( lrecItemUOM.Code)) );
              ldnOutput.Append(STRSUBSTNO('<QTYPERBASE>%1</QTYPERBASE>',
                 lrecItemUOM."Qty. per Unit of Measure") );
              ldnOutput.Append(STRSUBSTNO('<DESCRIPTION>%1</DESCRIPTION>',
                cuWHICommon.escapeText( lrecUOM.Description)) );
              IF (lrecItemUOM.Code = lrecItem."Base Unit of Measure") THEN BEGIN
                ldnOutput.Append('<BASEUNITOFMEASURE>1</BASEUNITOFMEASURE>');
              END ELSE BEGIN
                ldnOutput.Append('<BASEUNITOFMEASURE>0</BASEUNITOFMEASURE>');
              END;
              ldnOutput.Append('</UOM>');
            END;
          UNTIL lrecItemUOM.NEXT = 0;
        END; // if we found records
        ldnOutput.Append('</ITEMUOM>');
      END ELSE BEGIN
        //
        // new behavior, standard dataset
        // return dataset with configurable columns
        IF (lrecItemUOM.FINDSET(FALSE) ) THEN; // then nothing.
        lrrefItemUOM.GETTABLE( lrecItemUOM );
        cuDatasetTools.SetFormulaCalcEachRow(
          iEventID,
          lrrefItemUOM,
          -1, // - 1 is setup in AutoSetup, and is used for our unit of measure description.
          DATABASE::"Unit of Measure", // piLookupTable
          2, // piLookupField,  2 is the description field no. in unit of measure table
          'WHERE (Code=FILTER(''[Code]''))' ); //  Code is the column in both [Code] will get replaced with the code per row.

        cuDatasetTools.BuildLinesOnlyDataset(iEventID, lrrefItemUOM,FALSE ,ldnOutput);
      END;

      pbsOutput2.ADDTEXT( ldnOutput.ToString() );

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE setRecordValue@1000000025(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000002 : BigText);
    VAR
      lrrefValue@1000000000 : RecordRef;
      liTable@1000000003 : Integer;
      ltxtFilter@1000000005 : Text[200];
      liExpectedRecords@1000000004 : Integer;
      ltxtFieldName@1000000006 : Text[80];
      lfrefField@1000000007 : FieldRef;
      lrecFieldDef@1000000008 : Record 2000000041;
      lvarTemp@1000000009 : Variant;
      liSuccessCount@1000000010 : Integer;
      liFailureCount@1000000011 : Integer;
      ltxtFieldType@1000000012 : Text[100];
      liOptionType@1000000013 : Integer;
      ltxtTempValue@1000000014 : Text[1024];
      ldtDateTimeValue@1000000016 : DateTime;
      ltmTimeValue@1000000015 : Time;
      ltxtTempError@1000000017 : Text[1024];
      lcuBlobCompatbility@1000000018 : Codeunit 23044543;
      liEventID@1000000019 : Integer;
      lrecColumn@1000000020 : Record 23044512;
      lrecLPHeader@1000000021 : Record 23044505;
    BEGIN
      //<FUNC>
      //  Description: Used for extensions and applications to set record values
      //               This is used as a means for "quick and dirty" record changes without needing
      //               to write extensibility codeunits.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      liTable := ptrecEventParams.getValueAsInt('settable'); // table
      ltxtFilter := ptrecEventParams.getValue('setview'); // table view
      liExpectedRecords := ptrecEventParams.getValueAsInt('setexprec'); // expected records
      liEventID := ptrecEventParams.getValueAsInt('source_event');

      // for editable panel when it tries to autosave
      IF((liTable=0) AND (liEventID<>0)) THEN BEGIN
        lrecColumn.SETRANGE("Event",liEventID);
        IF(lrecColumn.FINDFIRST) THEN
          liTable := lrecColumn."Table No.";
        lrecColumn.RESET;
      END;

      lrrefValue.OPEN(liTable);
      lrrefValue.SETVIEW( ltxtFilter );

      IF ( NOT lrrefValue.FIND('-') )  THEN BEGIN
        ERROR(cuTranslationMgmt.getTranslatedString('ERR_NO_RECORDS_FOUND_IN_FILTER', codRegionCode), ltxtFilter );
      END;

      IF ( liExpectedRecords >= 0 ) THEN BEGIN
        // if we have asked to verify the number of records affected (any non negative number)
        // then also check the count.
        IF ( lrrefValue.COUNT() <> liExpectedRecords ) THEN BEGIN
          ERROR(cuTranslationMgmt.getTranslatedString('ERR_UPDATE_COUNT_MISMATCH', codRegionCode), lrrefValue.NAME, liExpectedRecords, lrrefValue.COUNT() );
        END;
      END;

      ptrecEventParams.RESET();
      ptrecEventParams.SETFILTER(Key,'setfld*');

      pbsOutput.ADDTEXT( '<RESULT>' );
      IF ( ptrecEventParams.FIND('-') ) THEN BEGIN
        REPEAT // for every record to update
          ptrecEventParams.NEXT(-1 * ptrecEventParams.COUNT() ); // move to the beginning
          REPEAT

            ltxtFieldName := COPYSTR( ptrecEventParams.Key, STRLEN('setfld')+1, MAXSTRLEN(ltxtFieldName) );
            lrecFieldDef.RESET();
            lrecFieldDef.SETRANGE(TableNo, liTable );
            IF (liEventID >0) THEN BEGIN
              lrecColumn.RESET();
              lrecColumn.SETRANGE("Event", liEventID);
              lrecColumn.SETRANGE("Table No.", liTable);
              lrecColumn.SETRANGE("Override Field Name", ltxtFieldName);
              IF (lrecColumn.FINDFIRST) THEN BEGIN
                lrecFieldDef.SETRANGE("No.", lrecColumn."Field No.");
              END ELSE BEGIN
                lrecColumn.SETRANGE("Override Field Name");
                lrecColumn.SETRANGE("Column Caption", ltxtFieldName);
                IF (lrecColumn.FINDFIRST) THEN BEGIN
                  lrecFieldDef.SETRANGE("No.", lrecColumn."Field No.");
                END;
              END;
            END ELSE BEGIN
              lrecFieldDef.SETRANGE(FieldName, ltxtFieldName );
            END;

            IF ( NOT lrecFieldDef.FINDFIRST() ) THEN BEGIN
              // if we couldn't find the text by name, then try caption
              lrecFieldDef.SETRANGE(FieldName); // clear
              lrecFieldDef.SETRANGE("Field Caption", ltxtFieldName );
              IF ( lrecFieldDef.FINDFIRST() ) THEN; // then nothing
            END;
            IF ( lrecFieldDef.ISEMPTY() ) THEN BEGIN
              ERROR( cuTranslationMgmt.getTranslatedString('ERR_FIELD_NOT_FOUND', codRegionCode), ltxtFieldName, liTable );
            END;
            // at this point we know everything about the field we need to update.
            // but really we just needed the field no.
            lfrefField := lrrefValue.FIELD( lrecFieldDef."No.");
            ltxtFieldType := FORMAT( lfrefField.TYPE );
            IF ( ltxtFieldType = 'Boolean' ) THEN BEGIN
              lvarTemp := ptrecEventParams.getValueAsBool( ptrecEventParams.Key );
            END ELSE IF (  ltxtFieldType = 'Option') THEN BEGIN
              // first try as an int.
              ltxtTempValue := COPYSTR( ptrecEventParams.Value, 1, MAXSTRLEN(ltxtTempValue) ) ;
              IF ( EVALUATE (liOptionType,ltxtTempValue) ) THEN BEGIN
                // the input is an int, so put the int
                // into the variant
                lvarTemp := liOptionType;
              END ELSE BEGIN
                // if that doesn't work, then try as a string.
                //
                liOptionType := cuWHICommon.getOptionFromText( ltxtTempValue, lfrefField );
                lvarTemp := liOptionType;
              END;
            END ELSE IF (  ltxtFieldType = 'Date') THEN BEGIN
              // use event param
              lvarTemp := cuWHICommon.getValueAsDate( ptrecEventParams.Key,ptrecEventParams )
            END ELSE IF (  ltxtFieldType = 'DateTime') THEN BEGIN
              lvarTemp := cuWHICommon.getValueAsDateTime( ptrecEventParams.Key,ptrecEventParams )
            END ELSE IF (  ltxtFieldType = 'Time') THEN BEGIN
              lvarTemp := ptrecEventParams.getValueAsTime( ptrecEventParams.Key )
            END ELSE IF (  ltxtFieldType = 'BLOB') THEN BEGIN
              ltxtTempValue := COPYSTR( ptrecEventParams.Value, 1, lfrefField.LENGTH+1 ) ;
              lcuBlobCompatbility.doBlobImport(lrrefValue, lfrefField, ltxtTempValue);
            END ELSE BEGIN
              lvarTemp := COPYSTR( ptrecEventParams.Value, 1, lfrefField.LENGTH+1 ) ;
            END;

            lfrefField.VALIDATE( lvarTemp );
          UNTIL( ptrecEventParams.NEXT() = 0 ); // for every field to update

          IF ( lrrefValue.MODIFY(TRUE) ) THEN BEGIN
            liSuccessCount += 1;
          END ELSE BEGIN
            liFailureCount += 1;
            ltxtTempError := COPYSTR( GETLASTERRORTEXT(), 1, MAXSTRLEN(ltxtTempError) );
            pbsOutput.ADDTEXT( STRSUBSTNO('<MESSAGE>%1</MESSAGE>',cuWHICommon.escapeText( ltxtTempError ) ) );
          END;
        UNTIL( lrrefValue.NEXT() = 0);// every record to update
      END; // if we have values to set
      ptrecEventParams.RESET();

      pbsOutput.ADDTEXT( STRSUBSTNO('<SUCCESS>%1</SUCCESS>',liSuccessCount) );
      pbsOutput.ADDTEXT( STRSUBSTNO('<FAILURE>%1</FAILURE>',liFailureCount) );
      pbsOutput.ADDTEXT( '</RESULT>' );

      ptrecEventParams.setValue('Document Type', FORMAT(liTable));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getLotSerialInformation@1000000015(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lsLotNo@1000000004 : Text;
      lsSerialNo@1000000002 : Text;
      ltxtDetails@1000000003 : Text[250];
    BEGIN
      //<FUNC>
      //  Description: This function is responsible for returning to the device side lot/serial information.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      lsLotNo := ptrecEventParams.getLotNo();
      lsSerialNo := ptrecEventParams.getSerialNo();

      IF (lsLotNo <> '') THEN BEGIN
        getLotInformation(ptrecEventParams, pbsOutput);
      END;

      IF (lsSerialNo <> '') THEN BEGIN
        getSerialInformation(ptrecEventParams, pbsOutput);
      END;

      IF (lsLotNo <> '') THEN BEGIN
        ltxtDetails := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_LOT_INFO', codRegionCode), lsLotNo);
      END;

      IF (lsSerialNo <> '') THEN BEGIN
        ltxtDetails := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_SERIAL_INFO', codRegionCode), lsSerialNo);
      END;

      ptrecEventParams.setValue('details', ltxtDetails);
      ptrecEventParams.setValue('Lot No.', lsLotNo);
      ptrecEventParams.setValue('Serial No.', lsSerialNo);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getLotInfoDS@1000000051(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecLotInfo@1000000002 : Record 6505;
      lrrefRecRef@1000000006 : RecordRef;
      ldnOutput@1000000008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lsItemNo@1000000004 : Text;
      lsVariantCode@1000000005 : Text;
      lsLotNo@1000000003 : Text;
    BEGIN
      //<FUNC>
      //  Description: Returns the lot information in standard table format
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      lsItemNo := ptrecEventParams.getItemNo();
      lsVariantCode := ptrecEventParams.getVariant();
      lsLotNo := ptrecEventParams.getLotNo();

      createLotInfo(lsItemNo, lsVariantCode, lsLotNo);

      lrecLotInfo.SETRANGE("Item No.", lsItemNo);
      lrecLotInfo.SETRANGE("Variant Code", lsVariantCode);
      lrecLotInfo.SETRANGE("Lot No.", lsLotNo);

      lrrefRecRef.GETTABLE( lrecLotInfo );
      IF ( lrrefRecRef.FINDFIRST() ) THEN;

      ldnOutput := ldnOutput.StringBuilder();

      cuDatasetTools.BuildLinesOnlyDataset(
        iEventID,
        lrrefRecRef,
        FALSE,
        ldnOutput);

      pbsOutput.ADDTEXT( ldnOutput.ToString() );


      ptrecEventParams.setValue('details', STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_LOT_INFO', codRegionCode), lsLotNo));
      ptrecEventParams.setValue('Lot No.', lsLotNo);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getSerialInfoDS@1000000052(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecSerialInfo@1000000007 : Record 6504;
      lrrefRecRef@1000000006 : RecordRef;
      ldnOutput@1000000008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lsItemNo@1000000005 : Text;
      lsVariantCode@1000000004 : Text;
      lsSerialNo@1000000003 : Text;
    BEGIN
      //<FUNC>
      //  Description: Returns the serial information in standard table format
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      lsItemNo := ptrecEventParams.getItemNo();
      lsVariantCode := ptrecEventParams.getVariant();
      lsSerialNo := ptrecEventParams.getSerialNo();

      createSerialInfo(lsItemNo, lsVariantCode, lsSerialNo);


      lrecSerialInfo.SETRANGE("Item No.", lsItemNo);
      lrecSerialInfo.SETRANGE("Variant Code", lsVariantCode);
      lrecSerialInfo.SETRANGE("Serial No.", lsSerialNo);

      lrrefRecRef.GETTABLE( lrecSerialInfo );
      IF ( lrrefRecRef.FINDFIRST() ) THEN;

      ldnOutput := ldnOutput.StringBuilder();

      cuDatasetTools.BuildLinesOnlyDataset(
        iEventID,
        lrrefRecRef,
        FALSE,
        ldnOutput);

      pbsOutput.ADDTEXT( ldnOutput.ToString() );


      ptrecEventParams.setValue('details', STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_SERIAL_INFO', codRegionCode), lsSerialNo));
      ptrecEventParams.setValue('Serial No.', lsSerialNo);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getUnitsOfMeasure@1000000016(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000002 : BigText);
    VAR
      lrecUOM@1000000005 : Record 204;
      lrrefUOM@1000000000 : RecordRef;
      ldnOutput@1000000004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
    BEGIN
      //<FUNC>
      //  Description: Return all available units of measure.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      ldnOutput := ldnOutput.StringBuilder();
      IF (lrecUOM.FINDSET(FALSE) ) THEN; // then nothing.
      lrrefUOM.GETTABLE( lrecUOM );

      cuDatasetTools.BuildLinesOnlyDataset(iEventID, lrrefUOM,FALSE ,ldnOutput);
      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getLPDimensionUOM@1000000017(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000002 : BigText);
    VAR
      lrecUOM@1000000005 : Record 23044525;
      lrrefUOM@1000000000 : RecordRef;
    BEGIN
      //<FUNC>
      //  Description: Return all available License Plate Dimension units of measure.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      pbsOutput.ADDTEXT('<DATASET>');

      pbsOutput.ADDTEXT('<TABLE id="UOM">');
      pbsOutput.ADDTEXT('<COLS>');
      cuWHICommon.initializeColumns( TRUE );
      cuWHICommon.addDSColumnsFromConfig( pbsOutput,iEventID,'', DATABASE::"IWX Unit Of Measure" );
      pbsOutput.ADDTEXT('</COLS>');
      pbsOutput.ADDTEXT('<ROWS>');

      IF (lrecUOM.FINDSET(FALSE) )THEN BEGIN      //  find all records
        REPEAT
          pbsOutput.ADDTEXT('<R><FIELDS>');
          lrrefUOM.GETTABLE( lrecUOM);
          cuWHICommon.addDSFieldsForRecord(pbsOutput, lrrefUOM, iEventID, '');
          pbsOutput.ADDTEXT('</FIELDS></R>');
        UNTIL (lrecUOM.NEXT() = 0);
      END; // IF FIND license plate UOM

      pbsOutput.ADDTEXT('</ROWS>');
      pbsOutput.ADDTEXT('</TABLE>');
      pbsOutput.ADDTEXT('</DATASET>');

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE convertUnitOfMeasure@1000000019(VAR precEventParams@1000000000 : Record 23044511;VAR pbsOutput@1000000001 : BigText);
    VAR
      lcodItemNumber@1000000002 : Text;
      lrrefWriter@1000000011 : RecordRef;
      lrecItem@1000000003 : Record 27;
      ldConvertedValue@1000000005 : Decimal;
      lcuNAVUOM@1000000007 : Codeunit 5402;
      ldInput@1000000009 : Decimal;
      lcodFromUOM@1000000012 : Code[10];
      lcodToUOM@1000000013 : Code[10];
      ltxtDetails@1000000004 : Text[250];
    BEGIN
      //<FUNC>
      //  Description: Convert from one unit of measure to another.  This is used to help
      //               work with the new changes for alt/scanned/catch quantity work.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      lcodItemNumber := precEventParams.getItemNo();
      ldInput := precEventParams.getValueAsDecimal('value_to_convert');
      lcodFromUOM := precEventParams.getValue('from_uom');
      lcodToUOM := precEventParams.getValue('to_uom');

      lrecItem.GET( lcodItemNumber );
      ldConvertedValue := cuWHICommon.ConvertUnitOfMeasure(
        lrecItem,
        ldInput,
        lcodFromUOM,
        lcodToUOM );

      pbsOutput.ADDTEXT('<RESULT><VALUE>');
      pbsOutput.ADDTEXT( STRSUBSTNO( '%1', ldConvertedValue ) );
      pbsOutput.ADDTEXT('</VALUE></RESULT>');

      ltxtDetails := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_CONVERT_UOM', codRegionCode), ldInput, lcodFromUOM, ldConvertedValue, lcodToUOM);
      precEventParams.setValue('details', ltxtDetails);
      precEventParams.setValue('previous_quantity', FORMAT(ldInput));
      precEventParams.setValue('new_quantity', FORMAT(ldConvertedValue));
      cuActivityLogMgt.logActivity(precEventParams);
    END;

    PROCEDURE echoKeyValue@1000000018(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lchrReturn@1000000004 : Text[1];
    BEGIN
      //<FUNC>
      //  Description: This is to help troubleshoot items on site.
      //               Configure a menu item to see what is sent back from the device.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>


      pbsOutput.ADDTEXT( '<RESULT><SUCCESS>1</SUCCESS><MESSAGE>' );
      pbsOutput.ADDTEXT('ECHO:');
      lchrReturn[1] := 13;
      pbsOutput.ADDTEXT( lchrReturn );

      IF ( ptrecEventParams.FIND('-') ) THEN BEGIN
        REPEAT
          pbsOutput.ADDTEXT( STRSUBSTNO('[%1]=', cuWHICommon.escapeText( ptrecEventParams.Key ) ) );
          pbsOutput.ADDTEXT( STRSUBSTNO('[%1]', cuWHICommon.escapeText( ptrecEventParams.Value )  ) );
          pbsOutput.ADDTEXT( lchrReturn );
        UNTIL( ptrecEventParams.NEXT() = 0 );
      END ELSE BEGIN
        pbsOutput.ADDTEXT('none');
      END;

      pbsOutput.ADDTEXT( '</MESSAGE></RESULT>');

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getItemTrackingCodes@1000000020(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      ldnOutput@1000000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
    BEGIN
      //<FUNC>
      //  Description: Added to work with item tracking caching on the handheld
      //               This can be called explicitly, or ad-hoc.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>


      ldnOutput := ldnOutput.StringBuilder();
      ldnOutput.Append('<DATASET>');
      cuDatasetTools.BuildItemTrackingTable( ldnOutput );
      ldnOutput.Append('</DATASET>');
      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE createItemCrossReference@1000000022(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecItemCrossReference@1000000002 : Record 5717;
      lcodCrossReferenceNo@1000000003 : Code[20];
      lcodItemNumber@1000000005 : Text;
      lcodVariant@1000000004 : Text;
      lcodUOM@1000000006 : Code[10];
      ltxtDetails@1000000007 : Text[250];
    BEGIN
      //<FUNC>
      //  Description: This function will create item cross reference from device
      //               This is intended to be connected with a menu item, and will use action_result to clean up.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      lcodItemNumber := COPYSTR( ptrecEventParams.getItemNo(), 1, MAXSTRLEN( lcodItemNumber) );
      lcodVariant := COPYSTR( ptrecEventParams.getValue('variant_code'), 1, MAXSTRLEN( lcodVariant) );
      lcodCrossReferenceNo := COPYSTR( ptrecEventParams.getValue('action_result'), 1,
        MAXSTRLEN( lcodCrossReferenceNo) );

      IF ( lcodCrossReferenceNo = '' ) THEN BEGIN
        lcodCrossReferenceNo := COPYSTR( ptrecEventParams.getValue('barcode'), 1,
          MAXSTRLEN( lcodCrossReferenceNo) );

      END;

      lcodUOM := COPYSTR( ptrecEventParams.getValue('Unit of Measure Code'), 1,
        MAXSTRLEN( lcodUOM) );

      lrecItemCrossReference.SETRANGE("Item No.", lcodItemNumber);
      lrecItemCrossReference.SETRANGE("Variant Code", lcodVariant);
      lrecItemCrossReference.SETRANGE("Unit of Measure", lcodUOM);
      lrecItemCrossReference.SETRANGE("Cross-Reference Type", lrecItemCrossReference."Cross-Reference Type"::"Bar Code");
      lrecItemCrossReference.SETRANGE("Cross-Reference No.", lcodCrossReferenceNo);
      IF (NOT lrecItemCrossReference.FIND('-')) THEN BEGIN
        lrecItemCrossReference.RESET();
        lrecItemCrossReference.INIT;
        lrecItemCrossReference.VALIDATE("Item No.", lcodItemNumber);
        lrecItemCrossReference.VALIDATE("Variant Code", lcodVariant);
        lrecItemCrossReference.VALIDATE("Unit of Measure", lcodUOM);
        lrecItemCrossReference.VALIDATE("Cross-Reference Type", lrecItemCrossReference."Cross-Reference Type"::"Bar Code");
        lrecItemCrossReference.VALIDATE("Cross-Reference No.", lcodCrossReferenceNo);

        lrecItemCrossReference.INSERT;
      END;

      cuWHICommon.generateSuccessReturn(1, pbsOutput);

      ltxtDetails := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_ADD_CROSS_REF', codRegionCode), lcodCrossReferenceNo, lcodItemNumber);
      ptrecEventParams.setValue('details', ltxtDetails);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE addItemPicture@1000000023(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lcuBlobCompatbility@1000000003 : Codeunit 23044543;
    BEGIN
      //<FUNC>
      //  Description: This function will add an item picture based on the supplied blob.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>


      lcuBlobCompatbility.addItemPicture(ptrecEventParams, pbsOutput);

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE uploadPictureRecord@1000000024(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecWHISetup@1000000010 : Record 23044502;
      lcuLinkManagement@1000000005 : Codeunit 23044529;
      ltxtAutoFileName@1000000008 : Text;
    BEGIN
      //<FUNC>
      //  Description: This function will upload a picture to the specified location on the network
      //               and then create a record link to it.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      lrecWHISetup.GET();
      IF ( lrecWHISetup."Default Image Upload Location" = '' ) THEN BEGIN
        ERROR(cuTranslationMgmt.getTranslatedString('ERR_UPLOAD_LOCATION_MISSING', codRegionCode));
      END;

      ltxtAutoFileName := getPictureSavePath(ptrecEventParams,lrecWHISetup."Default Image Upload Location"); //<IW author="R.Trudeau" date="07/18/18" issue="TFS4092" />

      //lcuSBEncoded.Init();
      //lcuSBEncoded.Append(ptrecEventParams.getLargeValue( 'blob'));
      //cuIWXExtensionCompat.SaveImageTextToFile(lcuSBEncoded.ToString(), ltxtAutoFileName);

      // find the record to link to
      // and then link it
      lcuLinkManagement.insertRecordLinkOnDocument( ptrecEventParams, ltxtAutoFileName );

      cuWHICommon.generateSuccessReturnWithMsg(
        1,
        STRSUBSTNO( cuTranslationMgmt.getTranslatedString('MSG_IMAGE_UPLOADED', codRegionCode), ltxtAutoFileName ),
        pbsOutput);

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getPictureSavePath@1000000063(VAR ptrecEventParams@1000000009 : TEMPORARY Record 23044511;psDefaultUploadLocation@1000000008 : Text) : Text;
    VAR
      lrecDeviceConfig@1000000005 : Record 23044504;
      lrecLocation@1000000006 : Record 14;
      lrecRecordSearchRule@1000000007 : Record 23044529;
      lrrefSomething@1000000010 : RecordRef;
      lcuLinkManagement@1000000011 : Codeunit 23044529;
      ldnPath@1000000004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path";
      ldnSB@1000000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      ldnFileInfo@1000000002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileInfo";
      lsDocNo@1000000014 : Text;
      lsFilePath@1000000001 : Text;
      lsFileName@1000000000 : Text;
      lsPageName@1000000013 : Text;
      lbFoundSearchRule@1000000012 : Boolean;
    BEGIN
      //<IW author="R.Trudeau" date="07/18/18" issue="TFS4092">

      // add the company name to the path
      lsFilePath := ldnPath.Combine(psDefaultUploadLocation,COMPANYNAME);

      // find the appropriate record
      // add the page captin to the path
      ptrecEventParams.getLocation( lrecLocation );
      lbFoundSearchRule := lcuLinkManagement.GetRecordRefKeys(
                lrecLocation.Code, // pcodLoc
                ptrecEventParams.getBin(), // pcodBin
                ptrecEventParams.getDocumentNo(), // document
                ptrecEventParams.getLineNo(), // piline
                ptrecEventParams.getItemNo(), // pcodItem
                FALSE, // pbWithQuantityField
                ptrecEventParams,
                lrrefSomething, // out recordref
                lrecRecordSearchRule);

      IF( lbFoundSearchRule AND (lrrefSomething.NUMBER<>0) ) THEN BEGIN
        lsPageName := cuWHICommon.getPageCaptionFromRecSearch(lrecRecordSearchRule);
        IF lsPageName<>'' THEN
          lsFilePath := ldnPath.Combine(lsFilePath,lsPageName);
      END;

      // add the document number to the path
      lsDocNo := ptrecEventParams.getDocumentNo();
      IF lsDocNo<>'' THEN BEGIN
        lsFilePath := ldnPath.Combine(lsFilePath,lsDocNo);
      END;

      // add the image file name
      cuWHICommon.getDeviceConfig(lrecDeviceConfig,ptrecEventParams);
      lsFileName := STRSUBSTNO('%1_', lrecDeviceConfig.Code );
      lsFileName := lsFileName + FORMAT( CREATEGUID ) + '.jpg';
      lsFileName := DELCHR( lsFileName, '=','{}-=_+' );
      lsFilePath := ldnPath.Combine(lsFilePath, lsFileName);

      // replace any invalid characters in the filepath name
      ldnSB := ldnSB.StringBuilder();
      ldnSB.Append(lsFilePath);
      //ldnSB.Replace('\','_');
      ldnSB.Replace('/','_');
      ldnSB.Replace(':','_');
      ldnSB.Replace('*','_');
      ldnSB.Replace('?','_');
      ldnSB.Replace('"','_');
      ldnSB.Replace('<','_');
      ldnSB.Replace('>','_');
      ldnSB.Replace('|','_');

      lsFilePath := ldnSB.ToString();

      ldnFileInfo := ldnFileInfo.FileInfo(lsFilePath);
      ldnFileInfo.Directory().Create();

      EXIT(lsFilePath);
    END;

    PROCEDURE printAnything@1000000026(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511;VAR pbsOutput@1000000001 : BigText);
    VAR
      lcuPrintingMgt@1000000002 : Codeunit 23044525;
    BEGIN
      //<FUNC>
      //  Description: This function will print any document (in theory).
      //               It requires document link search rules to be configured, as well as printer
      //               report configuration setup in IWX Report selections.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>


      IF ( lcuPrintingMgt.printAutomaticAnything(ptrecEventParams) ) THEN BEGIN
        cuWHICommon.generateSuccessReturnWithMsg(1, cuTranslationMgmt.getTranslatedString('MSG_REPORT_QUEUED', codRegionCode), pbsOutput);
      END ELSE BEGIN
        ERROR(cuTranslationMgmt.getTranslatedString('ERR_PRINT_FAILED', codRegionCode));
      END;

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE downloadLatestUpdate@1000000028(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511;VAR pbsOutput@1000000001 : BigText);
    VAR
      lrecWHISetup@1000000002 : Record 23044502;
      ltrecTempBlob@1000000005 : TEMPORARY Record 99008535;
      ldnOutput@1000000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lisCabStream@1000000004 : InStream;
      ldnStreamReader@1000000007 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader";
      ldnTextEncoder@1000000006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
    BEGIN
      //<FUNC>
      //  Description: This function will return the latest Cab to device
      //               This assumes that the BLOB is already in base 64 encoded string.
      //  Called From: "executeEvent"
      //</FUNC>

      lrecWHISetup.GET();
      ldnOutput := ldnOutput.StringBuilder();

      // Make sure there is a cab file in the blob
      lrecWHISetup.CALCFIELDS("Handheld Blob");
      IF (lrecWHISetup."Handheld Blob".HASVALUE) THEN BEGIN
        lrecWHISetup."Handheld Blob".CREATEINSTREAM( lisCabStream );
        ldnStreamReader := ldnStreamReader.StreamReader(lisCabStream, ldnTextEncoder.UTF8);
        ldnOutput.Append( ldnStreamReader.ReadToEnd() );
      END;

      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE changeBinOnLine@1000000021(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511;VAR pbsOutput@1000000001 : BigText);
    VAR
      lcuDocLink@1000000002 : Codeunit 23044529;
      lrrefRecord@1000000003 : RecordRef;
      lbFound@1000000004 : Boolean;
      lrecLocation@1000000005 : Record 14;
      lrecSearchRule@1000000006 : Record 23044529;
      lfrefBinField@1000000007 : FieldRef;
      lcodBinToChangeTo@1000000008 : Code[20];
      lcodDocNo@1000000009 : Code[20];
      liLineNo@1000000010 : Integer;
      lcodPreviousBin@1000000011 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: This function will change the bin on any line configured in the document search management.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      // find the bin to change to.
      // First try action_result, as this will be set from a menu.
      lcodBinToChangeTo := ptrecEventParams.getValue('action_result');
      IF ( lcodBinToChangeTo = '' ) THEN BEGIN
        // if it's not that, then it will just be a standard bin field.
        lcodBinToChangeTo := ptrecEventParams.getBin();
      END;

      // Now, it's still possible that the bin is blank, however we don't
      // know if that's intentional, or not intentional.   NAV will error in that scenario.
      lcodDocNo := ptrecEventParams.getDocumentNo();
      liLineNo := ptrecEventParams.getLineNo();

      ptrecEventParams.getLocation( lrecLocation );
      lbFound := lcuDocLink.GetRecordRefKeys(
          lrecLocation.Code, // pcodLoc
          '',   // pcodBin, we're passing in bin code as blank intentionally, otherwise it will be used to help find the record.
          lcodDocNo, // document
          liLineNo, // piline
          ptrecEventParams.getItemNo(), // pcodItem
          FALSE, // pbWithQuantityField
          ptrecEventParams,
          lrrefRecord, // out recordref
          lrecSearchRule );

      IF ( lbFound  ) THEN BEGIN
        IF ( lrecSearchRule."Bin Field No." = 0 ) THEN BEGIN
          ERROR(cuTranslationMgmt.getTranslatedString('ERR_CHANGE_BIN_NO_RULE', codRegionCode), lrecSearchRule."Entry No.", lrecSearchRule."Table No." );
        END ELSE BEGIN
          // cool, we have a bin field, and we have a bin.
          // let's change.
          lfrefBinField := lrrefRecord.FIELD( lrecSearchRule."Bin Field No." );
          lcodPreviousBin := FORMAT(lfrefBinField.VALUE);
          lfrefBinField.VALIDATE( lcodBinToChangeTo );
          lrrefRecord.MODIFY(TRUE);
        END; // if there is a bin field to adjust
      END ELSE BEGIN
        ERROR(cuTranslationMgmt.getTranslatedString('ERR_CHANGE_BIN_CANNOT_FIND_LINE', codRegionCode));
      END;


      // If we have gotten this far, then we were successfull.
      cuWHICommon.generateSuccessReturnWithMsg(
        1,
        STRSUBSTNO(cuTranslationMgmt.getTranslatedString('MSG_CHANGE_BIN_SUCCEEDED', codRegionCode), lcodDocNo, liLineNo, lcodBinToChangeTo ),
        pbsOutput);

      ptrecEventParams.setValue('previous_bin', lcodPreviousBin);
      ptrecEventParams.setValue('new_bin', lcodBinToChangeTo);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE runCodeUnit@1000000029(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      liCodeUnitID@1000000002 : Integer;
      ltxtDetails@1000000003 : Text[250];
    BEGIN
      //<FUNC>
      //  Description: Will run a codeunit based on the id passed in by device.
      //               No result will return to device
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      liCodeUnitID := ptrecEventParams.getValueAsInt('code_unit');

      IF (liCodeUnitID > 0) THEN BEGIN
        // The below from MSDN:
        // If you do not include the optional return value and an error occurs
        // while the codeunit is running, the C/AL code that called this codeunit will terminate.
        // If you include the return value and an error occurs,
        // the calling C/AL code continues to run. This means that you must handle any errors.
        // From the testing, got run-time error.
        // If there is write transaction in the codeunit, can't check return value of a codeunit.run.
        CODEUNIT.RUN(liCodeUnitID, ptrecEventParams);
        cuWHICommon.generateSuccessReturn(1, pbsOutput);
      END;

      ltxtDetails := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_RUN_CODEUNIT', codRegionCode), liCodeUnitID);
      ptrecEventParams.setValue('details', ltxtDetails);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getIsAdvCountInstalled@1000000030() pbOutInstalled : Boolean;
    VAR
      lrecObject@1000000000 : Record 2000000038;
    BEGIN
      //<FUNC>
      //  Description: Returns true if advanced count is installed.
      //  Called From: "License Plate Mgmt."::"getLPUsage"
      //  Side Effect: None
      //</FUNC>

      lrecObject.SETRANGE(lrecObject."Object Type",  lrecObject."Object Type"::Codeunit );
      // using a number because DAtabase::object can cause compile issues if the object is missing.
      lrecObject.SETRANGE(lrecObject."Object ID",  23044300 );
      pbOutInstalled := lrecObject.FINDFIRST();
    END;

    PROCEDURE getIsLPInstalled@1000000031() pbOutInstalled : Boolean;
    VAR
      lrecObject@1000000000 : Record 2000000038;
    BEGIN
      //<FUNC>
      //  Description: Returns true if license plating is installed.
      //  Called From:
      //  Side Effect: None
      //</FUNC>

      lrecObject.SETRANGE(lrecObject."Object Type",  lrecObject."Object Type"::Codeunit );
      // using a number because DAtabase::object can cause compile issues if the object is missing.
      lrecObject.SETRANGE(lrecObject."Object ID",  23044520 );
      pbOutInstalled := lrecObject.FINDFIRST();
    END;

    PROCEDURE getLotInformation@1000000027(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lcodItemCode@1000000002 : Text;
      lcodVariantCode@1000000003 : Text;
      lsLotNo@1000000004 : Text;
      lrecLotInfo@1000000005 : Record 6505;
      lrrefLotInfo@1000000006 : RecordRef;
      lrecItem@1000000007 : Record 27;
      lrecItemTrackingCode@1000000009 : Record 6502;
      lbShowLotInfo@1000000008 : Boolean;
      lrecDeviceConfig@1000000010 : Record 23044504;
      lbEnforceShowLotInfo@1000000011 : Boolean;
    BEGIN
      //<FUNC>
      //  Description: This function is responsible for returning to the device side lot information from table 6505
      //  Called From: "getLotSerialInformation"
      //  Side Effect: None
      //</FUNC>

      lcodItemCode := ptrecEventParams.getItemNo();
      lcodVariantCode := ptrecEventParams.getVariant();
      lsLotNo := ptrecEventParams.getLotNo();

      lbEnforceShowLotInfo := ptrecEventParams.getValueAsBool('enforce_show_lotserialinfo_if_exits');
      cuWHICommon.getDeviceConfig(lrecDeviceConfig,ptrecEventParams);

      lbShowLotInfo := FALSE;
      IF ((lrecDeviceConfig."Show Lot/Serial Info. Behavior" = lrecDeviceConfig."Show Lot/Serial Info. Behavior"::"Show Lot/Serial Info. if Missing") OR
          (lrecDeviceConfig."Show Lot/Serial Info. Behavior" = lrecDeviceConfig."Show Lot/Serial Info. Behavior"::"Always Show Lot/Serial Info.")) THEN BEGIN
        lbShowLotInfo := TRUE;
      END;

      pbsOutput.ADDTEXT('<DATASET>');
      IF (lrecLotInfo.GET(lcodItemCode, lcodVariantCode, lsLotNo)) THEN BEGIN
        // IF Device needs the lot info card, then send lot info
        // otherwise, check configuration, already exists, then don't show it on PDA
        IF (lbEnforceShowLotInfo) THEN BEGIN
          lbShowLotInfo := TRUE;
        END ELSE BEGIN
          IF (lrecDeviceConfig."Show Lot/Serial Info. Behavior" = lrecDeviceConfig."Show Lot/Serial Info. Behavior"::"Show Lot/Serial Info. if Missing") THEN BEGIN
            lbShowLotInfo := FALSE;
          END;
        END;
      END ELSE BEGIN
        // IF doesn't exist AND need to show it on PDA, then create lot info card
        IF (lbShowLotInfo OR lbEnforceShowLotInfo) THEN BEGIN
          lrecLotInfo.RESET;
          lrecLotInfo.INIT;
          lrecLotInfo."Item No." := lcodItemCode;
          lrecLotInfo."Variant Code" := lcodVariantCode;
          lrecLotInfo."Lot No." := lsLotNo;
          lrecLotInfo.INSERT;
        END;   // if auto create lot info card
      END;

      IF (lbShowLotInfo OR lbEnforceShowLotInfo) THEN BEGIN
        IF (lrecLotInfo."Lot No." <> '') THEN BEGIN
          lrecLotInfo.SETRANGE("Date Filter", 01010000D, WORKDATE); // from beginning of time until now
          lrecLotInfo.CALCFIELDS("Expired Inventory");

          pbsOutput.ADDTEXT('<TABLE id="LotInfo">');
          pbsOutput.ADDTEXT('<COLS>');
          cuWHICommon.initializeColumns( TRUE );
          cuWHICommon.addDSColumnsFromConfig( pbsOutput,iEventID,'', DATABASE::"Lot No. Information" );
          pbsOutput.ADDTEXT('</COLS>');

          pbsOutput.ADDTEXT('<ROWS>');
          pbsOutput.ADDTEXT('<R><FIELDS>');
          lrrefLotInfo.GETTABLE( lrecLotInfo );
          cuWHICommon.addDSFieldsForRecord(pbsOutput, lrrefLotInfo, iEventID, '');
          pbsOutput.ADDTEXT('</FIELDS></R>');
          pbsOutput.ADDTEXT('</ROWS>');
          pbsOutput.ADDTEXT('</TABLE>');
        END;
      END;
      pbsOutput.ADDTEXT('</DATASET>');
    END;

    PROCEDURE getSerialInformation@1000000032(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lcodItemCode@1000000002 : Text;
      lcodVariantCode@1000000003 : Text;
      lsSerialNo@1000000004 : Text;
      lrecSerialInfo@1000000005 : Record 6504;
      lrrefSerialInfo@1000000006 : RecordRef;
      lrecItem@1000000007 : Record 27;
      lrecItemTrackingCode@1000000009 : Record 6502;
      lbShowSerialInfo@1000000008 : Boolean;
      lrecDeviceConfig@1000000010 : Record 23044504;
      lbEnforceShowSerialInfo@1000000011 : Boolean;
    BEGIN
      //<FUNC>
      //  Description: This function is responsible for returning to the device side serial information from table 6505
      //  Called From: "getLotSerialInformation"
      //  Side Effect: None
      //</FUNC>

      lcodItemCode := ptrecEventParams.getItemNo();
      lcodVariantCode := ptrecEventParams.getVariant();
      lsSerialNo := ptrecEventParams.getSerialNo();

      lbEnforceShowSerialInfo := ptrecEventParams.getValueAsBool('enforce_show_lotserialinfo_if_exits');
      cuWHICommon.getDeviceConfig(lrecDeviceConfig,ptrecEventParams);

      lbShowSerialInfo := FALSE;
      IF ((lrecDeviceConfig."Show Lot/Serial Info. Behavior" = lrecDeviceConfig."Show Lot/Serial Info. Behavior"::"Show Lot/Serial Info. if Missing") OR
          (lrecDeviceConfig."Show Lot/Serial Info. Behavior" = lrecDeviceConfig."Show Lot/Serial Info. Behavior"::"Always Show Lot/Serial Info.")) THEN BEGIN
        lbShowSerialInfo := TRUE;
      END;

      pbsOutput.ADDTEXT('<DATASET>');
      IF (lrecSerialInfo.GET(lcodItemCode, lcodVariantCode, lsSerialNo)) THEN BEGIN
        // IF Device needs the serial info card, then send serial info
        // otherwise, check configuration, already exists, then don't show it on PDA
        IF (lbEnforceShowSerialInfo) THEN BEGIN
          lbShowSerialInfo := TRUE;
        END ELSE BEGIN
          IF (lrecDeviceConfig."Show Lot/Serial Info. Behavior" = lrecDeviceConfig."Show Lot/Serial Info. Behavior"::"Show Lot/Serial Info. if Missing") THEN BEGIN
            lbShowSerialInfo := FALSE;
          END;
        END;
      END ELSE BEGIN
        // IF doesn't exist AND need to show it on PDA, then create lot info card
        IF (lbShowSerialInfo OR lbEnforceShowSerialInfo) THEN BEGIN
          lrecSerialInfo.RESET;
          lrecSerialInfo.INIT;
          lrecSerialInfo."Item No." := lcodItemCode;
          lrecSerialInfo."Variant Code" := lcodVariantCode;
          lrecSerialInfo."Serial No." := lsSerialNo;
          lrecSerialInfo.INSERT;
        END;   // if auto create lot info card
      END;

      IF (lbShowSerialInfo OR lbEnforceShowSerialInfo) THEN BEGIN
        IF (lrecSerialInfo."Serial No." <> '') THEN BEGIN
          lrecSerialInfo.SETRANGE("Date Filter", 01010000D, WORKDATE); // from beginning of time until now
          lrecSerialInfo.CALCFIELDS("Expired Inventory");

          pbsOutput.ADDTEXT('<TABLE id="SerialInfo">');
          pbsOutput.ADDTEXT('<COLS>');
          cuWHICommon.initializeColumns( TRUE );
          cuWHICommon.addDSColumnsFromConfig( pbsOutput,iEventID,'', DATABASE::"Serial No. Information" );
          pbsOutput.ADDTEXT('</COLS>');

          pbsOutput.ADDTEXT('<ROWS>');
          pbsOutput.ADDTEXT('<R><FIELDS>');
          lrrefSerialInfo.GETTABLE( lrecSerialInfo );
          cuWHICommon.addDSFieldsForRecord(pbsOutput, lrrefSerialInfo, iEventID, '');
          pbsOutput.ADDTEXT('</FIELDS></R>');
          pbsOutput.ADDTEXT('</ROWS>');
          pbsOutput.ADDTEXT('</TABLE>');
        END;
      END;
      pbsOutput.ADDTEXT('</DATASET>');
    END;

    PROCEDURE getDefaultQuantityBehaviors@1000000033(pcodConfigID@1000000002 : Code[20];VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecScanBehavior@1000000001 : Record 23044521;
      liTempValue@1000000003 : Integer;
    BEGIN
      //<FUNC>
      //  Description: Return default quantity behavior values.
      //  Side Effect: None
      //</FUNC>

      lrecScanBehavior.SETFILTER("Config ID", '%1|%2', '',  pcodConfigID);
      IF (NOT lrecScanBehavior.FIND('-')) THEN BEGIN
        lrecScanBehavior.SETRANGE("Config ID");
      END;

      IF (lrecScanBehavior.FINDSET(FALSE)) THEN BEGIN

        REPEAT
          pbsOutput.ADDTEXT('<QUANTITYBEHAVIOR>');
          pbsOutput.ADDTEXT(STRSUBSTNO('<config_id>%1</config_id>', lrecScanBehavior."Config ID"));
          pbsOutput.ADDTEXT(STRSUBSTNO('<application_screen>%1</application_screen>', lrecScanBehavior."Application Screen"));
          pbsOutput.ADDTEXT(STRSUBSTNO('<item_category_code>%1</item_category_code>', lrecScanBehavior."Item Category Code"));
          pbsOutput.ADDTEXT(STRSUBSTNO('<product_group_code>%1</product_group_code>', lrecScanBehavior."Product Group Code"));
          pbsOutput.ADDTEXT(STRSUBSTNO('<item_no>%1</item_no>', lrecScanBehavior."Item No."));
          pbsOutput.ADDTEXT(STRSUBSTNO('<variant_code>%1</variant_code>', lrecScanBehavior."Variant Code"));
          pbsOutput.ADDTEXT(STRSUBSTNO('<description>%1</description>', lrecScanBehavior.Description));

          liTempValue := lrecScanBehavior."Form ID";
          pbsOutput.ADDTEXT(STRSUBSTNO('<form_id>%1</form_id>', liTempValue));

          liTempValue := lrecScanBehavior."Scan Required";
          pbsOutput.ADDTEXT(STRSUBSTNO('<scan_required_behavior>%1</scan_required_behavior>', liTempValue));

          liTempValue := lrecScanBehavior."Scan Quantity Behavior";
          pbsOutput.ADDTEXT(STRSUBSTNO('<scan_quantity_behavior>%1</scan_quantity_behavior>', liTempValue));

          liTempValue := lrecScanBehavior."Default Unit of Measure";
          pbsOutput.ADDTEXT(STRSUBSTNO('<default_uom_behavior>%1</default_uom_behavior>', liTempValue));

          liTempValue := lrecScanBehavior."Manual Quantity Behavior";
          pbsOutput.ADDTEXT(STRSUBSTNO('<manual_quantity_behavior>%1</manual_quantity_behavior>', liTempValue));

          liTempValue := lrecScanBehavior."Quantity Validation";
          pbsOutput.ADDTEXT(STRSUBSTNO('<quantity_validation>%1</quantity_validation>', liTempValue));
          pbsOutput.ADDTEXT(STRSUBSTNO('<item_tracking_code>%1</item_tracking_code>', lrecScanBehavior."Item Tracking Code"));

          pbsOutput.ADDTEXT(STRSUBSTNO('<qty_ext_code>%1</qty_ext_code>', lrecScanBehavior."Quantity Extension Code"));

          pbsOutput.ADDTEXT('</QUANTITYBEHAVIOR>');
        UNTIL (lrecScanBehavior.NEXT = 0);
      END;
    END;

    PROCEDURE getFindLineBehaviors@1000000048(pcodConfigID@1000000001 : Code[20];VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecFindLineTemplateHeader@1000000004 : Record 23044537;
      lrecFindLineTemplateLine@1000000005 : Record 23044538;
      liTempValue@1000000003 : Integer;
    BEGIN
      //<FUNC>
      //  Description: Adds the find line behaviors to the device configuration result set.
      //  Side Effect: None
      //</FUNC>

      pbsOutput.ADDTEXT('<FINDLINETEMPLATES>');

      IF(lrecFindLineTemplateHeader.FINDSET(FALSE)) THEN BEGIN
        REPEAT
          pbsOutput.ADDTEXT('<FINDLINETEMPLATE>');
          pbsOutput.ADDTEXT('<FINDLINETEMPLATEHEADER>');
          pbsOutput.ADDTEXT(STRSUBSTNO('<APPLICATION_CODE>%1</APPLICATION_CODE>', lrecFindLineTemplateHeader."Application Code"));
          liTempValue := lrecFindLineTemplateHeader."Ignore Bins";
          pbsOutput.ADDTEXT(STRSUBSTNO('<IGNORE_BINS>%1</IGNORE_BINS>', liTempValue));
          liTempValue := lrecFindLineTemplateHeader."Consider Quantity";
          pbsOutput.ADDTEXT(STRSUBSTNO('<CONSIDER_QUANTITY>%1</CONSIDER_QUANTITY>', liTempValue));
          liTempValue := lrecFindLineTemplateHeader."Scan Order";
          pbsOutput.ADDTEXT(STRSUBSTNO('<SCAN_ORDER>%1</SCAN_ORDER>', liTempValue));
          pbsOutput.ADDTEXT('</FINDLINETEMPLATEHEADER>');



          lrecFindLineTemplateLine.SETRANGE("Find Line Template Code", lrecFindLineTemplateHeader."Application Code");
          IF(lrecFindLineTemplateLine.FINDSET(FALSE)) THEN BEGIN
            pbsOutput.ADDTEXT('<FINDLINETEMPLATELINES>');
            REPEAT
              pbsOutput.ADDTEXT('<FINDLINETEMPLATELINE>');

              liTempValue := lrecFindLineTemplateLine."Item No.";
              pbsOutput.ADDTEXT(STRSUBSTNO('<FIND_ITEM>%1</FIND_ITEM>', liTempValue));

              liTempValue := lrecFindLineTemplateLine."Variant Code";
              pbsOutput.ADDTEXT(STRSUBSTNO('<FIND_VARIANT>%1</FIND_VARIANT>', liTempValue));

              liTempValue := lrecFindLineTemplateLine."Lot No.";
              pbsOutput.ADDTEXT(STRSUBSTNO('<FIND_LOT>%1</FIND_LOT>', liTempValue));

              liTempValue := lrecFindLineTemplateLine."Serial No.";
              pbsOutput.ADDTEXT(STRSUBSTNO('<FIND_SERIAL>%1</FIND_SERIAL>', liTempValue));

              liTempValue := lrecFindLineTemplateLine."Unit of Measure Code";
              pbsOutput.ADDTEXT(STRSUBSTNO('<FIND_UOM>%1</FIND_UOM>', liTempValue));

              liTempValue := lrecFindLineTemplateLine."Bin Code";
              pbsOutput.ADDTEXT(STRSUBSTNO('<FIND_BIN>%1</FIND_BIN>', liTempValue));

              liTempValue := lrecFindLineTemplateLine."Shelf No.";
              pbsOutput.ADDTEXT(STRSUBSTNO('<FIND_SHELF>%1</FIND_SHELF>', liTempValue));

              liTempValue := lrecFindLineTemplateLine."Expiration Date";
              pbsOutput.ADDTEXT(STRSUBSTNO('<FIND_EXPIRY>%1</FIND_EXPIRY>', liTempValue));



              pbsOutput.ADDTEXT('</FINDLINETEMPLATELINE>');
            UNTIL(lrecFindLineTemplateLine.NEXT=0);
            pbsOutput.ADDTEXT('</FINDLINETEMPLATELINES>');
          END;


          pbsOutput.ADDTEXT('</FINDLINETEMPLATE>');
        UNTIL(lrecFindLineTemplateHeader.NEXT=0);
      END;

      pbsOutput.ADDTEXT('</FINDLINETEMPLATES>');
    END;

    PROCEDURE addNote@1000000034(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrrefDocument@1000000003 : RecordRef;
      lrecObject@1000000005 : Record 2000000058;
      lrecDeviceConfig@1000000009 : Record 23044504;
      lcuLinkManagement@1000000002 : Codeunit 23044529;
      liPageID@1000000007 : Integer;
      lsDescription@1000000006 : Text;
      lsUserID@1000000010 : Text[100];
      liSubType@1000000012 : Integer;
    BEGIN
      //<FUNC>
      //  Description: Takes the comment/note entered by the user and creates a 'Note' with optional
      //               notification set if the 'Device Configuration' has a custom value specified for
      //               'Note Notify User'.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      cuWHICommon.getDeviceConfig( lrecDeviceConfig,ptrecEventParams );

      lcuLinkManagement.GetRecordRef( ptrecEventParams, lrrefDocument );

      IF ( lrrefDocument.NUMBER =0 ) THEN
        ERROR(cuTranslationMgmt.getTranslatedString('ERR_MISSING_RECORD_SEARCH', codRegionCode), lrrefDocument.NUMBER);

      // Try get from event params first
      liPageID := ptrecEventParams.getValueAsInt('Custom 1');

      IF (liPageID = 0) THEN
        liPageID := lcuLinkManagement.getDefautPageIDFromRec(lrrefDocument);

      IF( liPageID = 0 ) THEN
        ERROR(cuTranslationMgmt.getTranslatedString('ERR_NO_PAGE_FOUND', codRegionCode), lrrefDocument.NUMBER);

      lrecObject.SETRANGE("Object Type",lrecObject."Object Type"::Page);
      lrecObject.SETRANGE("Object ID", liPageID);
      lrecObject.FINDFIRST;
      lsDescription := lrecObject."Object Caption" + ' - ' + ptrecEventParams.getDocumentNo();

      // Try get from event params first
      lsUserID := ptrecEventParams.getValue('Custom 2');

      IF (lsUserID = '') THEN
        lsUserID := ptrecEventParams.getValue('user_name');

      IF( lsUserID = '' ) THEN
        lsUserID := lrecDeviceConfig.Code;

      lcuLinkManagement.insertRecordLink(
        lrrefDocument,
        lsDescription,
        cuWHICommon.getStdText(ptrecEventParams.getValue('action_result')),
        lsUserID,
        liPageID,
        cuWHICommon.getCustomConfigValue(lrecDeviceConfig,'Note Notify User')
      );

      cuWHICommon.generateSuccessReturnWithMsg(
        1,
        cuTranslationMgmt.getTranslatedString('MSG_NOTE_SAVED', codRegionCode),
        pbsOutput);

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE logCloseDocumentActivity@1000000035(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    BEGIN
      //<FUNC>
      //  Description: Creates an activity entry for when a document is closed on the device.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      cuActivityLogMgt.logActivity(ptrecEventParams);

      cuWHICommon.generateSuccessReturn(1, pbsOutput);
    END;

    PROCEDURE validateUOM@1000000036(piMenu@1000000003 : Integer;ptxtItemNumber@1000000001 : Text;VAR pcodUOM@1000000000 : Code[10];psLotNumber@1000000004 : Text;psSerialNumber@1000000005 : Text) : Boolean;
    VAR
      lrecItemUnitofMeasure@1000000002 : Record 5404;
      lrecScanBehavior@1000000006 : Record 23044521;
      lrecItemLedgerEntry@1000000007 : Record 32;
    BEGIN
      //<FUNC>
      //  Description: Validate item unit of measure code.
      //  Called From: "decodeItemBarcode"
      //  Side Effect: None
      //</FUNC>

      psLotNumber := UPPERCASE(psLotNumber);
      psSerialNumber := UPPERCASE(psSerialNumber);

      lrecScanBehavior.SETRANGE("Form ID", piMenu);
      lrecScanBehavior.SETRANGE("Item No.", ptxtItemNumber);
      IF (NOT lrecScanBehavior.FIND('-')) THEN
        lrecScanBehavior.SETRANGE("Item No.");

      IF (lrecScanBehavior.FINDFIRST) THEN BEGIN
        IF (lrecScanBehavior."Default Unit of Measure" = lrecScanBehavior."Default Unit of Measure"::Lot) THEN BEGIN
          lrecItemLedgerEntry.SETRANGE("Item No.", ptxtItemNumber);
          lrecItemLedgerEntry.SETRANGE("Lot No.", psLotNumber);
          lrecItemLedgerEntry.SETRANGE("Serial No.", psSerialNumber);
          IF ((lrecItemLedgerEntry.FINDFIRST) AND (pcodUOM = '')) THEN
          pcodUOM := lrecItemLedgerEntry."Unit of Measure Code";
        END;
      END;

      IF ((ptxtItemNumber = '') OR (pcodUOM = '')) THEN
        EXIT(TRUE);

      IF (lrecItemUnitofMeasure.GET(ptxtItemNumber, pcodUOM)) THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE getItemDetails@1000000038(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecItem@1000000022 : Record 27;
      lrecItemUOM@1000000020 : Record 5404;
      lrecItemTrackingCode@1000000006 : Record 6502;
      lbLotTracked@1000000004 : Boolean;
      lbSNTracked@1000000005 : Boolean;
      lbSNWhseTracked@1000000009 : Boolean;
      lbLotWhseTracked@1000000010 : Boolean;
      lbLNSaleOut@1000000017 : Boolean;
      lbSNSaleOut@1000000018 : Boolean;
      lcodBinCode@1000000007 : Code[20];
      ldBinQuantity@1000000002 : Decimal;
      lcodVariant@1000000024 : Text;
      lbLotManuOut@1000000015 : Boolean;
      lbLotManuIn@1000000014 : Boolean;
      lbSerialManuOut@1000000013 : Boolean;
      lbSerialManuIn@1000000012 : Boolean;
      lbLotInfoInboundRequired@1000000027 : Boolean;
      lbLotInfoOutboundRequired@1000000028 : Boolean;
      lbSerialInfoInboundRequired@1000000034 : Boolean;
      lbSerialInfoOutboundRequired@1000000033 : Boolean;
      lcodUOM@1000000035 : Code[10];
      lrecItemLedgerEntry@1000000036 : Record 32;
      lcodItemNumber@1000000021 : Text;
      lbManualExpirationDateReq@1000000003 : Boolean;
      lsLotNo@1000000008 : Text;
      lsSerialNo@1000000011 : Text;
      lrecBinContent@1000000016 : Record 7302;
      lrecDeviceConfig@1000000019 : Record 23044504;
    BEGIN
      //<FUNC>
      //  Description: Return item information.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      lcodItemNumber := ptrecEventParams.getItemNo();
      lcodVariant := ptrecEventParams.getVariant();
      lsLotNo := ptrecEventParams.getLotNo();
      lsSerialNo := ptrecEventParams.getSerialNo();
      lcodBinCode := ptrecEventParams.getBin();

      cuWHICommon.getDeviceConfig(lrecDeviceConfig,ptrecEventParams);
      IF (lrecItem.GET(lcodItemNumber)) THEN BEGIN
        lbLotTracked := FALSE;
        lbSNTracked := FALSE;

        IF( lrecItemTrackingCode.GET(lrecItem."Item Tracking Code") ) THEN BEGIN
          lbSNTracked := lrecItemTrackingCode."SN Specific Tracking";
          lbLotTracked := lrecItemTrackingCode."Lot Specific Tracking";
          lbSNWhseTracked := lrecItemTrackingCode."SN Warehouse Tracking";
          lbLotWhseTracked := lrecItemTrackingCode."Lot Warehouse Tracking";

          lbLNSaleOut := lrecItemTrackingCode."Lot Sales Outbound Tracking";
          lbSNSaleOut := lrecItemTrackingCode."SN Sales Outbound Tracking";

          lbLotManuOut := lrecItemTrackingCode."Lot Manuf. Outbound Tracking";
          lbLotManuIn := lrecItemTrackingCode."Lot Manuf. Inbound Tracking";
          lbSerialManuOut := lrecItemTrackingCode."SN Manuf. Outbound Tracking";
          lbSerialManuIn := lrecItemTrackingCode."SN Manuf. Inbound Tracking";

          lbManualExpirationDateReq := lrecItemTrackingCode."Man. Expir. Date Entry Reqd.";
          lbLotInfoInboundRequired := lrecItemTrackingCode."Lot Info. Inbound Must Exist";
          lbLotInfoOutboundRequired := lrecItemTrackingCode."Lot Info. Outbound Must Exist";

          lbSerialInfoInboundRequired := lrecItemTrackingCode."SN Info. Inbound Must Exist";
          lbSerialInfoOutboundRequired := lrecItemTrackingCode."SN Info. Outbound Must Exist";
        END;

        pbsOutput.ADDTEXT('<ITEM>');
        pbsOutput.ADDTEXT(STRSUBSTNO('<NUMBER>%1</NUMBER>',cuWHICommon.escapeText(lrecItem."No.")));
        pbsOutput.ADDTEXT(STRSUBSTNO('<DESCR>%1</DESCR>',cuWHICommon.escapeText(lrecItem.Description)));
        pbsOutput.ADDTEXT(STRSUBSTNO('<DESCR2>%1</DESCR2>',cuWHICommon.escapeText(lrecItem."Description 2")));
        pbsOutput.ADDTEXT(STRSUBSTNO('<SN_TRACKED>%1</SN_TRACKED>',cuWHICommon.getTrueFalse(lbSNTracked)));
        pbsOutput.ADDTEXT(STRSUBSTNO('<LOT_TRACKED>%1</LOT_TRACKED>',cuWHICommon.getTrueFalse(lbLotTracked)));
        pbsOutput.ADDTEXT(STRSUBSTNO('<SN_WHSE_TRACKED>%1</SN_WHSE_TRACKED>',cuWHICommon.getTrueFalse(lbSNWhseTracked)));
        pbsOutput.ADDTEXT(STRSUBSTNO('<LOT_WHSE_TRACKED>%1</LOT_WHSE_TRACKED>',cuWHICommon.getTrueFalse(lbLotWhseTracked)));

        pbsOutput.ADDTEXT(STRSUBSTNO('<LN_SALE_OUT>%1</LN_SALE_OUT>',cuWHICommon.getTrueFalse(lbLNSaleOut)));
        pbsOutput.ADDTEXT(STRSUBSTNO('<SN_SALE_OUT>%1</SN_SALE_OUT>',cuWHICommon.getTrueFalse(lbSNSaleOut)));
        pbsOutput.ADDTEXT(STRSUBSTNO('<VARIANT_CODE>%1</VARIANT_CODE>', lcodVariant));

        pbsOutput.ADDTEXT(STRSUBSTNO('<LN_MAN_OUT>%1</LN_MAN_OUT>',cuWHICommon.getTrueFalse(lbLotManuOut)));
        pbsOutput.ADDTEXT(STRSUBSTNO('<LN_MAN_IN>%1</LN_MAN_IN>',cuWHICommon.getTrueFalse(lbLotManuIn)));
        pbsOutput.ADDTEXT(STRSUBSTNO('<SN_MAN_OUT>%1</SN_MAN_OUT>',cuWHICommon.getTrueFalse(lbSerialManuOut)));
        pbsOutput.ADDTEXT(STRSUBSTNO('<SN_MAN_IN>%1</SN_MAN_IN>',cuWHICommon.getTrueFalse(lbSerialManuIn)));
        pbsOutput.ADDTEXT(STRSUBSTNO('<BASEUOM>%1</BASEUOM>',cuWHICommon.escapeText(lrecItem."Base Unit of Measure")));
        pbsOutput.ADDTEXT(STRSUBSTNO('<PUTAWAYUOM>%1</PUTAWAYUOM>',cuWHICommon.escapeText(lrecItem."Put-away Unit of Measure Code")));
        pbsOutput.ADDTEXT(STRSUBSTNO('<SALESUOM>%1</SALESUOM>',cuWHICommon.escapeText(lrecItem."Sales Unit of Measure")));
        pbsOutput.ADDTEXT(STRSUBSTNO('<PURCHASEUOM>%1</PURCHASEUOM>',cuWHICommon.escapeText(lrecItem."Purch. Unit of Measure")));
        pbsOutput.ADDTEXT(STRSUBSTNO('<MEXPD>%1</MEXPD>',cuWHICommon.getTrueFalse(lbManualExpirationDateReq)));
        pbsOutput.ADDTEXT(STRSUBSTNO('<LOT_INFO_IN>%1</LOT_INFO_IN>', cuWHICommon.getTrueFalse(lbLotInfoInboundRequired)));
        pbsOutput.ADDTEXT(STRSUBSTNO('<LOT_INFO_OUT>%1</LOT_INFO_OUT>', cuWHICommon.getTrueFalse(lbLotInfoOutboundRequired)));
        pbsOutput.ADDTEXT(STRSUBSTNO('<SERIAL_INFO_IN>%1</SERIAL_INFO_IN>', cuWHICommon.getTrueFalse(lbSerialInfoInboundRequired)));
        pbsOutput.ADDTEXT(STRSUBSTNO('<SERIAL_INFO_OUT>%1</SERIAL_INFO_OUT>', cuWHICommon.getTrueFalse(lbSerialInfoOutboundRequired)));

        IF (lcodBinCode <> '') THEN BEGIN
          lrecBinContent.SETRANGE("Location Code", lrecDeviceConfig."Location Code");
          lrecBinContent.SETRANGE("Item No.", lrecItem."No.");
          IF (lsLotNo <> '') THEN
            lrecBinContent.SETRANGE("Lot No. Filter", lsLotNo);
          IF (lsSerialNo <> '') THEN
            lrecBinContent.SETRANGE("Serial No. Filter", lsSerialNo);

          IF (lrecBinContent.FIND('-')) THEN
            ldBinQuantity := lrecBinContent.CalcQtyUOM();
        END;

        IF ((lsLotNo <> '') OR (lsSerialNo <> '')) THEN BEGIN
          lrecItemLedgerEntry.SETRANGE("Item No.", lrecItem."No.");
          lrecItemLedgerEntry.SETRANGE("Lot No.", lsLotNo);
          lrecItemLedgerEntry.SETRANGE("Serial No.", lsSerialNo);
          lrecItemLedgerEntry.SETFILTER("Remaining Quantity", '>0');
          IF (lrecItemLedgerEntry.FINDFIRST)  THEN
            lcodUOM := lrecItemLedgerEntry."Unit of Measure Code";
        END;

        pbsOutput.ADDTEXT(STRSUBSTNO('<UOM>%1</UOM>', lcodUOM));
        pbsOutput.ADDTEXT(STRSUBSTNO('<BIN>%1</BIN>',lcodBinCode));
        pbsOutput.ADDTEXT(STRSUBSTNO('<QUANTITY>%1</QUANTITY>',ldBinQuantity));
        pbsOutput.ADDTEXT(STRSUBSTNO('<ITEMCATEGORYCODE>%1</ITEMCATEGORYCODE>',cuWHICommon.escapeText(lrecItem."Item Category Code")));

        // 2018-::begin
        //pbsOutput.ADDTEXT(STRSUBSTNO('<PRODUCTGROUPCODE>%1</PRODUCTGROUPCODE>',cuWHICommon.escapeText(lrecItem."Product Group Code")));
        // 2018-::end
        // 2019+::begin
        pbsOutput.ADDTEXT('<PRODUCTGROUPCODE></PRODUCTGROUPCODE>');
        // 2019+::end

        pbsOutput.ADDTEXT(STRSUBSTNO('<ITEMTRACKINGCODE>%1</ITEMTRACKINGCODE>',cuWHICommon.escapeText(lrecItem."Item Tracking Code")));

        pbsOutput.ADDTEXT('<UNITSOFMEASURE>');
        lrecItemUOM.SETRANGE("Item No.",lrecItem."No.");
        IF lrecItemUOM.FINDSET(FALSE) THEN BEGIN
          REPEAT
            pbsOutput.ADDTEXT(STRSUBSTNO('<UM code="%1" qty="%2" />',lrecItemUOM.Code,lrecItemUOM."Qty. per Unit of Measure"));
          UNTIL(lrecItemUOM.NEXT=0);
        END;
        pbsOutput.ADDTEXT('</UNITSOFMEASURE>');



        pbsOutput.ADDTEXT('</ITEM>');
      END ELSE BEGIN
        cuWHICommon.generateSuccessReturn(1, pbsOutput);
      END;

      ptrecEventParams.setValue('Item No.', cuWHICommon.escapeText(lrecItem."No."));
      ptrecEventParams.setValue('Lot No.', lsLotNo);
      ptrecEventParams.setValue('Serial No.', lsSerialNo);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getLotSerialQtyByUOM@1000000044(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecItem@1000000010 : Record 27;
      lsItemNumber@1000000003 : Text;
      lsVariantCode@1000000004 : Text;
      lcodLocation@1000000002 : Code[10];
      lcodUOM@1000000005 : Code[10];
      lcodBinCode@1000000006 : Code[20];
      lsLotNumber@1000000007 : Text;
      lsSerialNumber@1000000011 : Text;
      ldQuantity@1000000008 : Decimal;
      lbWhseTracked@1000000009 : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Returns the quantity (in uom requested) for the lot number specified.
      //               If a bin code is supplied it will be factored in 'only' if the lot is warehouse tracked.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      lcodLocation := ptrecEventParams.getValue('location');
      lsItemNumber := ptrecEventParams.getItemNo();
      lsVariantCode := ptrecEventParams.getVariant();
      lcodUOM := ptrecEventParams.getValue('uom');    // the uom to convert to
      lcodBinCode := ptrecEventParams.getBin();
      lsLotNumber := ptrecEventParams.getLotNo();
      lsSerialNumber := ptrecEventParams.getSerialNo();
      ldQuantity:= 0;

      lrecItem.GET(lsItemNumber);

      lbWhseTracked := cuCommonBase.isWhseTracked(lsItemNumber);
      IF( lbWhseTracked AND (lcodBinCode<>'') ) THEN BEGIN
        ldQuantity := getLotSerialQtyByBin(lcodLocation,lcodBinCode,lsItemNumber,lsVariantCode,lsLotNumber,lsSerialNumber,lcodUOM);
      END ELSE BEGIN
        ldQuantity := getLotSerialQtyByILE(lcodLocation,lsItemNumber,lsVariantCode,lsLotNumber,lsSerialNumber,lcodUOM);
      END;

      pbsOutput.ADDTEXT(STRSUBSTNO('<VALUE>%1</VALUE>', ldQuantity));

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getLotSerialQtyByBin@1000000046(pcodLocationCode@1000000001 : Code[10];pcodBinCode@1000000002 : Code[20];psItemNumber@1000000003 : Text;psVariantCode@1000000004 : Text;psLotNumber@1000000005 : Text;psSerialNumber@1000000010 : Text;pcodUOM@1000000006 : Code[10]) : Decimal;
    VAR
      lrecBinContent@1000000000 : Record 7302;
      lrecItem@1000000008 : Record 27;
      ldQuantityBase@1000000007 : Decimal;
      ldQuantity@1000000009 : Decimal;
    BEGIN
      //<FUNC>
      //  Description: Returns the quantity (in uom requested, otherwise base) for the lot number specified in the bin.
      //  Called From: "getLotQtyByUOM"
      //  Side Effect: None
      //</FUNC>

      psLotNumber := UPPERCASE(psLotNumber);
      psSerialNumber := UPPERCASE(psSerialNumber);

      lrecBinContent.SETRANGE("Location Code",pcodLocationCode);
      lrecBinContent.SETRANGE("Bin Code", pcodBinCode);
      lrecBinContent.SETRANGE("Item No.",psItemNumber);
      IF psVariantCode <> '' THEN
        lrecBinContent.SETRANGE("Variant Code", psVariantCode);

      IF psLotNumber <> '' THEN
        lrecBinContent.SETRANGE("Lot No. Filter", psLotNumber);

      IF psSerialNumber <> '' THEN
        lrecBinContent.SETRANGE("Serial No. Filter", psSerialNumber);

      lrecBinContent.SETAUTOCALCFIELDS("Quantity (Base)");

      IF (lrecBinContent.FINDSET(FALSE)) THEN BEGIN
        REPEAT
          ldQuantityBase := ldQuantityBase + lrecBinContent."Quantity (Base)";
        UNTIL(lrecBinContent.NEXT=0);
      END;

      IF pcodUOM = '' THEN BEGIN
        ldQuantity := ldQuantityBase;
      END ELSE BEGIN
        lrecItem.GET(psItemNumber);
        ldQuantity := cuCommonBase.ConvertUnitOfMeasure(lrecItem,ldQuantityBase,lrecItem."Base Unit of Measure",pcodUOM);
      END;

      EXIT(ldQuantity);
    END;

    PROCEDURE getLotSerialQtyByILE@1000000047(pcodLocationCode@1000000005 : Code[10];psItemNumber@1000000003 : Text;psVariantCode@1000000002 : Text;psLotNumber@1000000001 : Text;psSerialNumber@1000000009 : Text;pcodUOM@1000000000 : Code[10]) : Decimal;
    VAR
      lrecItemLedgerEntry@1000000004 : Record 32;
      lrecItem@1000000008 : Record 27;
      ldQuantityBase@1000000006 : Decimal;
      ldQuantity@1000000007 : Decimal;
    BEGIN
      //<FUNC>
      //  Description: Returns the quantity (in uom requested, otherwise base) for the lot number in ILE.
      //  Called From: "getLotQtyByUOM"
      //  Side Effect: None
      //</FUNC>

      psLotNumber := UPPERCASE(psLotNumber);
      psSerialNumber := UPPERCASE(psSerialNumber);

      lrecItemLedgerEntry.SETCURRENTKEY("Item No.", Open, "Variant Code", "Location Code", "Item Tracking", "Lot No.", "Serial No.");
      lrecItemLedgerEntry.SETRANGE("Item No.", psItemNumber);
      lrecItemLedgerEntry.SETRANGE(Open, TRUE);
      lrecItemLedgerEntry.SETRANGE("Variant Code", psVariantCode);
      lrecItemLedgerEntry.SETRANGE("Location Code", pcodLocationCode);

      IF psLotNumber <> '' THEN
        lrecItemLedgerEntry.SETRANGE("Lot No.", psLotNumber);

      IF psSerialNumber <> '' THEN
        lrecItemLedgerEntry.SETRANGE("Serial No.", psSerialNumber);

      lrecItemLedgerEntry.CALCSUMS("Remaining Quantity");

      ldQuantityBase := lrecItemLedgerEntry."Remaining Quantity";

      IF pcodUOM = '' THEN BEGIN
        ldQuantity := ldQuantityBase;
      END ELSE BEGIN
        lrecItem.GET(psItemNumber);
        ldQuantity := cuCommonBase.ConvertUnitOfMeasure(lrecItem,ldQuantityBase,lrecItem."Base Unit of Measure",pcodUOM);
      END;

      EXIT(ldQuantity);
    END;

    PROCEDURE getItemBinQtyByUOM@1000000049(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecItem@1000000011 : Record 27;
      lsItemNumber@1000000010 : Text;
      lsVariantCode@1000000009 : Text;
      lcodLocation@1000000008 : Code[10];
      lcodUOM@1000000007 : Code[10];
      lcodBinCode@1000000006 : Code[20];
      ldQuantity@1000000003 : Decimal;
      lbWhseTracked@1000000002 : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Returns the quantity (in uom requested) for the item number in the specified bin.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      lcodLocation := ptrecEventParams.getValue('location');
      lsItemNumber := ptrecEventParams.getItemNo();
      lsVariantCode := ptrecEventParams.getVariant();
      lcodUOM := ptrecEventParams.getValue('uom');    // the uom to convert to
      lcodBinCode := ptrecEventParams.getBin();
      ldQuantity:= 0;

      IF lcodBinCode <> '' THEN
        ldQuantity := getLotSerialQtyByBin(lcodLocation,lcodBinCode,lsItemNumber,lsVariantCode,'','',lcodUOM);

      pbsOutput.ADDTEXT(STRSUBSTNO('<VALUE>%1</VALUE>', ldQuantity));

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE addServerCultureToResponse@1000000045(VAR pbsOutput@1000000000 : BigText);
    VAR
      ldnServerCulture@1000000001 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
    BEGIN
      //<FUNC>
      //  Description:
      //  Side Effect: None
      //</FUNC>

      ldnServerCulture := ldnServerCulture.CurrentCulture;
      pbsOutput.ADDTEXT(STRSUBSTNO('<CULTURE><CULTURE_NAME></CULTURE_NAME></CULTURE>',ldnServerCulture.Name));
    END;

    PROCEDURE GetDeviceTranslations@1000000050(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecTranslation@1000000002 : Record 23044519;
    BEGIN
      //<FUNC>
      //  Description: Returns translations required by the handheld.
      //</FUNC>


      pbsOutput.ADDTEXT('<TRANSLATIONS>');

      lrecTranslation.SETFILTER(Environment,'%1|%2',lrecTranslation.Environment::All,lrecTranslation.Environment::Device);
      lrecTranslation.SETRANGE(Region,ptrecEventParams.getValue('device_culture'));

      IF lrecTranslation.FINDSET(FALSE) THEN BEGIN
        REPEAT
          pbsOutput.ADDTEXT(STRSUBSTNO('<T n="%1">%2</T>',lrecTranslation.Code,cuWHICommon.escapeText(lrecTranslation.Translation)));
        UNTIL(lrecTranslation.NEXT=0);
      END;

      pbsOutput.ADDTEXT('</TRANSLATIONS>');

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE GetIcons@1000000054(VAR ptrecEventParams@1000000002 : TEMPORARY Record 23044511;VAR pbsOutput@1000000001 : BigText);
    VAR
      lrecIcon@1000000000 : Record 23044520;
      ltrecTempBlob@1000000007 : TEMPORARY Record 99008535;
      ldnMemStream@1000000005 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      ldnBytes@1000000004 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      ldnConvert@1000000003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      lisPictureStream@1000000006 : InStream;
    BEGIN
      //<FUNC>
      //  Description: Returns the application icons
      //</FUNC>

      pbsOutput.ADDTEXT('<IMAGES>');

      lrecIcon.SETAUTOCALCFIELDS(Image);
      IF(lrecIcon.FINDSET(FALSE)) THEN BEGIN
        REPEAT
          IF lrecIcon.Image.HASVALUE THEN BEGIN
            lrecIcon.Image.CREATEINSTREAM( lisPictureStream );
            ldnMemStream := ldnMemStream.MemoryStream();
            COPYSTREAM( ldnMemStream, lisPictureStream );
            ldnBytes := ldnMemStream.GetBuffer();
            pbsOutput.ADDTEXT('<IMAGE>');
            pbsOutput.ADDTEXT(STRSUBSTNO('<NAME>%1</NAME>',lrecIcon.Code));
            pbsOutput.ADDTEXT(STRSUBSTNO('<CONTENT>%1</CONTENT>',ldnConvert.ToBase64String( ldnBytes )));
            pbsOutput.ADDTEXT('</IMAGE>');
          END;
        UNTIL(lrecIcon.NEXT=0);
      END;

      pbsOutput.ADDTEXT('</IMAGES>');
    END;

    PROCEDURE GetQuantityExtensions@1000000055(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecExtension@1000000002 : Record 23044544;
      lrecExtensionField@1000000003 : Record 23044545;
      liTempValue@1000000004 : Integer;
    BEGIN
      //<FUNC>
      //  Description: Returns the quantity extensions
      //</FUNC>

      pbsOutput.ADDTEXT('<EXTENSIONS>');

      IF(lrecExtension.FINDSET(FALSE)) THEN BEGIN
        REPEAT
          pbsOutput.ADDTEXT('<EXTENSION>');
          pbsOutput.ADDTEXT('<HEADER>');
          pbsOutput.ADDTEXT(STRSUBSTNO('<CODE>%1</CODE>', lrecExtension.Code));
          liTempValue := lrecExtension."New Page";
          pbsOutput.ADDTEXT(STRSUBSTNO('<NEW_PAGE>%1</NEW_PAGE>', liTempValue));
          pbsOutput.ADDTEXT(STRSUBSTNO('<PAGE_TITLE>%1</PAGE_TITLE>', lrecExtension."Page Title"));
          pbsOutput.ADDTEXT('</HEADER>');
          pbsOutput.ADDTEXT('<FIELDS>');
          lrecExtensionField.SETRANGE("Extension Code", lrecExtension.Code);
          IF(lrecExtensionField.FINDSET(FALSE)) THEN BEGIN
            REPEAT
              pbsOutput.ADDTEXT('<FIELD>');
              pbsOutput.ADDTEXT(STRSUBSTNO('<FIELD_NAME>%1</FIELD_NAME>', lrecExtensionField."Field Name"));
              pbsOutput.ADDTEXT(STRSUBSTNO('<FIELD_CAPTION>%1</FIELD_CAPTION>', lrecExtensionField."Field Caption"));
              pbsOutput.ADDTEXT(STRSUBSTNO('<DEFAULT_EVENT>%1</DEFAULT_EVENT>', lrecExtensionField."Default Event ID"));
              pbsOutput.ADDTEXT(STRSUBSTNO('<VALIDATION_EVENT>%1</VALIDATION_EVENT>', lrecExtensionField."Validation Event ID"));
              liTempValue := lrecExtensionField."Data Type";
              pbsOutput.ADDTEXT(STRSUBSTNO('<DATA_TYPE>%1</DATA_TYPE>', liTempValue));
              pbsOutput.ADDTEXT('</FIELD>');
            UNTIL(lrecExtensionField.NEXT=0);
          END;
          pbsOutput.ADDTEXT('</FIELDS>');
          pbsOutput.ADDTEXT('</EXTENSION>');
        UNTIL(lrecExtension.NEXT=0);
      END;

      pbsOutput.ADDTEXT('</EXTENSIONS>');
    END;

    PROCEDURE GetOfflineApplications@1000000056(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecOfflineAppHeader@1000000002 : Record 23044541;
      lrecOfflineAppField@1000000003 : Record 23044542;
      liTempValue@1000000004 : Integer;
    BEGIN
      //<FUNC>
      //  Description: Returns the offline application definitions
      //</FUNC>

      pbsOutput.ADDTEXT('<OFFLINEAPPS>');

      IF(lrecOfflineAppHeader.FINDSET(FALSE)) THEN BEGIN
        REPEAT
          pbsOutput.ADDTEXT('<APPLICATION>');
          pbsOutput.ADDTEXT('<HEADER>');
          pbsOutput.ADDTEXT(STRSUBSTNO('<CODE>%1</CODE>', lrecOfflineAppHeader.Code));
          pbsOutput.ADDTEXT(STRSUBSTNO('<EVENT_ID>%1</EVENT_ID>', lrecOfflineAppHeader."Event ID"));
          liTempValue := lrecOfflineAppHeader."Auto Close";
          pbsOutput.ADDTEXT(STRSUBSTNO('<AUTO_CLOSE>%1</AUTO_CLOSE>', liTempValue));
          liTempValue := lrecOfflineAppHeader."Entry Mode";
          pbsOutput.ADDTEXT(STRSUBSTNO('<ENTRY_MODE>%1</ENTRY_MODE>', liTempValue));
          liTempValue := lrecOfflineAppHeader."Auto Send";
          pbsOutput.ADDTEXT(STRSUBSTNO('<AUTO_SEND>%1</AUTO_SEND>', liTempValue));
          pbsOutput.ADDTEXT('</HEADER>');
          pbsOutput.ADDTEXT('<FIELDS>');
          lrecOfflineAppField.SETRANGE("Application Code", lrecOfflineAppHeader.Code);
          IF(lrecOfflineAppField.FINDSET(FALSE)) THEN BEGIN
            REPEAT
              pbsOutput.ADDTEXT('<FIELD>');
              pbsOutput.ADDTEXT(STRSUBSTNO('<FIELD_NAME>%1</FIELD_NAME>', lrecOfflineAppField.Name));
              pbsOutput.ADDTEXT(STRSUBSTNO('<FIELD_CAPTION>%1</FIELD_CAPTION>', lrecOfflineAppField.Caption));
              pbsOutput.ADDTEXT(STRSUBSTNO('<FIELD_PROMPT>%1</FIELD_PROMPT>', lrecOfflineAppField.Prompt));
              liTempValue := lrecOfflineAppField."Data Type";
              pbsOutput.ADDTEXT(STRSUBSTNO('<DATA_TYPE>%1</DATA_TYPE>', liTempValue));
              liTempValue := lrecOfflineAppField.Required;
              pbsOutput.ADDTEXT(STRSUBSTNO('<REQUIRED>%1</REQUIRED>', liTempValue));
              pbsOutput.ADDTEXT(STRSUBSTNO('<OPTION_VALUES>%1</OPTION_VALUES>', lrecOfflineAppField."Option Values"));
              pbsOutput.ADDTEXT(STRSUBSTNO('<DEFAULT_VALUE>%1</DEFAULT_VALUE>', lrecOfflineAppField."Default Value"));
              liTempValue := lrecOfflineAppField."Repeat Mode";
              pbsOutput.ADDTEXT(STRSUBSTNO('<REPEAT_MODE>%1</REPEAT_MODE>', liTempValue));
              pbsOutput.ADDTEXT('</FIELD>');
            UNTIL(lrecOfflineAppField.NEXT=0);
            pbsOutput.ADDTEXT('</FIELDS>');
          END;
          pbsOutput.ADDTEXT('</APPLICATION>');
        UNTIL(lrecOfflineAppHeader.NEXT=0);
      END;

      pbsOutput.ADDTEXT('</OFFLINEAPPS>');
    END;

    LOCAL PROCEDURE AddAttachment@1000000059(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lcuBlobCompatbility@1000000002 : Codeunit 23044543;
    BEGIN
      //<FUNC>
      //  Description: This function will add an attachment to documents/items
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      lcuBlobCompatbility.AddAttachment(ptrecEventParams, pbsOutput);

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    LOCAL PROCEDURE GetVersionInformation@1000000060(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecWHISetup@1000000002 : Record 23044502;
      lcuInstallMgmt@1000000005 : Codeunit 23044557;
      lsDownloadPath@1000000004 : Text;
      liFileType@1000000003 : Integer;
      ltrecTempBlob@1000000006 : TEMPORARY Record 99008535;
      lsBlobText@1000000007 : Text;
    BEGIN
      //<FUNC>
      //  Description: Returns the application version information.
      //</FUNC>

      liFileType := ptrecEventParams.getValueAsInt('file_type');
      recWHISetup.GET();

      pbsOutput.ADDTEXT('<VERSIONINFO>');
      pbsOutput.ADDTEXT(STRSUBSTNO('<EXTENSION>%1</EXTENSION>', lrecWHISetup.GetExpectedVersion()));
      pbsOutput.ADDTEXT(STRSUBSTNO('<CONFIGURED>%1</CONFIGURED>', lrecWHISetup."Installed Version"));
      pbsOutput.ADDTEXT(STRSUBSTNO('<ANDROID>%1</ANDROID>', lrecWHISetup."Android Device Version"));
      pbsOutput.ADDTEXT(STRSUBSTNO('<WINDOWS>%1</WINDOWS>', lrecWHISetup."Windows Device Version"));

      IF liFileType = 0 THEN BEGIN
        lrecWHISetup.CALCFIELDS("Windows CAB");
        IF (lrecWHISetup."Windows CAB".HASVALUE) THEN BEGIN
          ltrecTempBlob.Blob := lrecWHISetup."Windows CAB";
          ltrecTempBlob.INSERT;
          lsBlobText := cuWHICommon.GetTextFromBlob(ltrecTempBlob);
        END;

        pbsOutput.ADDTEXT(STRSUBSTNO('<SIZE>%1</SIZE>', STRLEN(lsBlobText)));
      END ELSE BEGIN
        lrecWHISetup.CALCFIELDS("Android APK");
        IF (lrecWHISetup."Android APK".HASVALUE) THEN BEGIN
          ltrecTempBlob.Blob := lrecWHISetup."Android APK";
          ltrecTempBlob.INSERT;
          lsBlobText := cuWHICommon.GetTextFromBlob(ltrecTempBlob);
        END;

        pbsOutput.ADDTEXT(STRSUBSTNO('<SIZE>%1</SIZE>', STRLEN(lsBlobText)));
      END;

      pbsOutput.ADDTEXT('</VERSIONINFO>');
    END;

    LOCAL PROCEDURE GetDeviceLatestVersion@1000000062(VAR ptrecEventParams@1000000002 : TEMPORARY Record 23044511;VAR pbsOutput@1000000001 : BigText);
    VAR
      lrecWHISetup@1000000000 : Record 23044502;
      ltrecTempBlob@1000000004 : TEMPORARY Record 99008535;
      lsBlobText@1000000007 : Text;
      lsResult@1000000003 : Text;
      liChunkSize@1000000006 : Integer;
      liOffset@1000000005 : Integer;
      liStart@1000000008 : Integer;
      liFileType@1000000009 : Integer;
    BEGIN
      lrecWHISetup.GET();

      liChunkSize := ptrecEventParams.getValueAsInt('chunksize');
      liOffset := ptrecEventParams.getValueAsInt('offset');
      liFileType := ptrecEventParams.getValueAsInt('file_type');

      IF liFileType = 0 THEN BEGIN
        lrecWHISetup.CALCFIELDS("Windows CAB");
        IF (lrecWHISetup."Windows CAB".HASVALUE) THEN BEGIN
          ltrecTempBlob.Blob := lrecWHISetup."Windows CAB";
          ltrecTempBlob.INSERT;
          lsBlobText := cuWHICommon.GetTextFromBlob(ltrecTempBlob);
        END;
      END ELSE BEGIN
        lrecWHISetup.CALCFIELDS("Android APK");
        IF (lrecWHISetup."Android APK".HASVALUE) THEN BEGIN
          ltrecTempBlob.Blob := lrecWHISetup."Android APK";
          ltrecTempBlob.INSERT;
          lsBlobText := cuWHICommon.GetTextFromBlob(ltrecTempBlob);
        END;
      END;

      IF (lsBlobText <> '') THEN BEGIN
        IF liChunkSize <= 0 THEN BEGIN
          lsResult := lsBlobText;
        END ELSE BEGIN
          liStart := liOffset*liChunkSize;
          IF liStart > STRLEN(lsBlobText) THEN
            lsResult := ''
          ELSE
            lsResult := COPYSTR(lsBlobText,liStart+1,liChunkSize);
        END;

        pbsOutput.ADDTEXT(lsResult);
      END;

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE GetItemsForCache@100000000(VAR ptrecEventParams@100000001 : TEMPORARY Record 23044511;VAR pbsOutput@100000000 : BigText);
    VAR
      lrecItem@100000002 : Record 27;
      ldtLastFetchedOn@100000003 : Date;
      ldnOutput@100000004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
    BEGIN
      ldnOutput := ldnOutput.StringBuilder();
      ldnOutput.Append('<ITEMS>');

      //ldtLastFetchedOn := ptrecEventParams.getValueAsDate('last_fetched_on', '');
      //IF ldtLastFetchedOn <> 0D THEN
      //  lrecItem.SETFILTER("Last Date Modified", '>=%1', ldtLastFetchedOn);


      IF(lrecItem.FINDSET(FALSE)) THEN BEGIN
        REPEAT
          ldnOutput.Append('<I>');
          ldnOutput.Append(STRSUBSTNO('<A>%1</A>', lrecItem."No."));
          ldnOutput.Append(STRSUBSTNO('<B>%1</B>', lrecItem.Description));
          ldnOutput.Append(STRSUBSTNO('<C>%1</C>', lrecItem."Description 2"));
          ldnOutput.Append(STRSUBSTNO('<D>%1</D>', lrecItem."No. 2"));
          ldnOutput.Append(STRSUBSTNO('<E>%1</E>', lrecItem."Base Unit of Measure"));
          ldnOutput.Append(STRSUBSTNO('<F>%1</F>', lrecItem."Put-away Unit of Measure Code"));
          ldnOutput.Append(STRSUBSTNO('<G>%1</G>', lrecItem."Sales Unit of Measure"));
          ldnOutput.Append(STRSUBSTNO('<H>%1</H>', lrecItem."Purch. Unit of Measure"));
          ldnOutput.Append(STRSUBSTNO('<J>%1</J>', lrecItem."Item Category Code"));
          ldnOutput.Append(STRSUBSTNO('<K>%1</K>', lrecItem."Item Tracking Code"));
          ldnOutput.Append(STRSUBSTNO('<L>%1</L>',''));// lrecItem."GTIN"));
          ldnOutput.Append('</I>');
        UNTIL(lrecItem.NEXT=0);
      END;

      ldnOutput.Append('</ITEMS>');
      pbsOutput.ADDTEXT(ldnOutput.ToString());
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE GetBinsForCache@100000001(VAR ptrecEventParams@100000001 : TEMPORARY Record 23044511;VAR pbsOutput@100000000 : BigText);
    VAR
      lrecBin@100000002 : Record 7354;
      ldnOutput@100000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
    BEGIN
      ldnOutput := ldnOutput.StringBuilder();
      ldnOutput.Append('<BINS>');

      IF(lrecBin.FINDSET(FALSE)) THEN BEGIN
        REPEAT
          ldnOutput.Append('<BIN>');
          ldnOutput.Append(STRSUBSTNO('<LOC>%1</LOC>', lrecBin."Location Code"));
          ldnOutput.Append(STRSUBSTNO('<CODE>%1</CODE>', lrecBin.Code));
          ldnOutput.Append('</BIN>');
        UNTIL(lrecBin.NEXT=0);
      END;

      ldnOutput.Append('</BINS>');
      pbsOutput.ADDTEXT(ldnOutput.ToString());
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE GetBarcodeRulesForCache@100000003(VAR ptrecEventParams@100000001 : TEMPORARY Record 23044511;VAR pbsOutput@100000000 : BigText);
    VAR
      lrecBarcodeRule@100000002 : Record 23044509;
      ldnOutput@100000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
    BEGIN
      ldnOutput := ldnOutput.StringBuilder();
      ldnOutput.Append('<RULES>');

      IF(lrecBarcodeRule.FINDSET(FALSE)) THEN BEGIN
        REPEAT
          ldnOutput.Append('<RULE>');
          ldnOutput.Append(STRSUBSTNO('<RULEID>%1</RULEID>', lrecBarcodeRule."Rule ID"));
          ldnOutput.Append(STRSUBSTNO('<RUNORDER>%1</RUNORDER>', lrecBarcodeRule."Run Order"));
          ldnOutput.Append(STRSUBSTNO('<FINDTEXT>%1</FINDTEXT>', lrecBarcodeRule."Find Text"));
          IF lrecBarcodeRule.Enabled THEN
            ldnOutput.Append('<ENABLED>1</ENABLED>')
          ELSE
            ldnOutput.Append('<ENABLED>0</ENABLED>');
          ldnOutput.Append(STRSUBSTNO('<ITEMEX>%1</ITEMEX>', lrecBarcodeRule."Item No. Expression"));
          ldnOutput.Append(STRSUBSTNO('<ITEM2EX>%1</ITEM2EX>', lrecBarcodeRule."Item No. 2 Expression"));
          ldnOutput.Append(STRSUBSTNO('<VAREX>%1</VAREX>', lrecBarcodeRule."Variant Expression"));
          ldnOutput.Append(STRSUBSTNO('<SNEX>%1</SNEX>', lrecBarcodeRule."Serial No. Expression"));
          ldnOutput.Append(STRSUBSTNO('<LNEX>%1</LNEX>', lrecBarcodeRule."Lot No. Expression"));
          ldnOutput.Append(STRSUBSTNO('<EXPEX>%1</EXPEX>', lrecBarcodeRule."Expiry Date Expression"));
          ldnOutput.Append(STRSUBSTNO('<QTYEX>%1</QTYEX>', lrecBarcodeRule."Quantity Expression"));
          ldnOutput.Append(STRSUBSTNO('<UOMEX>%1</UOMEX>', lrecBarcodeRule."UOM Expression"));
          ldnOutput.Append(STRSUBSTNO('<GTINEX>%1</GTINEX>', ''));  //lrecBarcodeRule."GTIN Expression"
          ldnOutput.Append(STRSUBSTNO('<CROSSEX>%1</CROSSEX>', lrecBarcodeRule."Cross-Ref. Expression"));
          ldnOutput.Append(STRSUBSTNO('<CUST1EX>%1</CUST1EX>', lrecBarcodeRule."Custom 1 Expression"));
          ldnOutput.Append(STRSUBSTNO('<CUST2EX>%1</CUST2EX>', lrecBarcodeRule."Custom 2 Expression"));
          ldnOutput.Append(STRSUBSTNO('<CUST3EX>%1</CUST3EX>', lrecBarcodeRule."Custom 3 Expression"));

          IF lrecBarcodeRule."Validate Serial No." THEN
            ldnOutput.Append('<VALIDATESN>1</VALIDATESN>')
          ELSE
            ldnOutput.Append('<VALIDATESN>0</VALIDATESN>');

          IF lrecBarcodeRule."Validate Lot No." THEN
            ldnOutput.Append('<VALIDATELN>1</VALIDATELN>')
          ELSE
            ldnOutput.Append('<VALIDATELN>0</VALIDATELN>');

          ldnOutput.Append('</RULE>');
        UNTIL(lrecBarcodeRule.NEXT=0);
      END;

      ldnOutput.Append('</RULES>');
      pbsOutput.ADDTEXT(ldnOutput.ToString());
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE GetCrossRefForCache@100000002(VAR ptrecEventParams@100000001 : TEMPORARY Record 23044511;VAR pbsOutput@100000000 : BigText);
    VAR
      lrecItemCrossRef@100000002 : Record 5717;
      ldnOutput@100000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
    BEGIN
      ldnOutput := ldnOutput.StringBuilder();
      ldnOutput.Append('<ENTRIES>');

      IF(lrecItemCrossRef.FINDSET(FALSE)) THEN BEGIN
        REPEAT
          ldnOutput.Append('<ENTRY>');
          ldnOutput.Append(STRSUBSTNO('<ITEMNUMBER>%1</ITEMNUMBER>', lrecItemCrossRef."Item No."));
          ldnOutput.Append(STRSUBSTNO('<VARIANT>%1</VARIANT>', lrecItemCrossRef."Variant Code"));
          ldnOutput.Append(STRSUBSTNO('<CROSSREF>%1</CROSSREF>', lrecItemCrossRef."Cross-Reference No."));
          ldnOutput.Append(STRSUBSTNO('<UOM>%1</UOM>', lrecItemCrossRef."Unit of Measure"));
          ldnOutput.Append('</ENTRY>');
        UNTIL(lrecItemCrossRef.NEXT=0);
      END;

      ldnOutput.Append('</ENTRIES>');
      pbsOutput.ADDTEXT(ldnOutput.ToString());
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE GetItemUnitsOfMeasureForCache@100000004(VAR ptrecEventParams@100000001 : TEMPORARY Record 23044511;VAR pbsOutput@100000000 : BigText);
    VAR
      lrecItemUOM@100000002 : Record 5404;
      ldnOutput@100000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
    BEGIN
      ldnOutput := ldnOutput.StringBuilder();
      ldnOutput.Append('<ENTRIES>');

      IF(lrecItemUOM.FINDSET(FALSE)) THEN BEGIN
        REPEAT
          ldnOutput.Append('<ENTRY>');
          ldnOutput.Append(STRSUBSTNO('<ITEM>%1</ITEM>', lrecItemUOM."Item No."));
          ldnOutput.Append(STRSUBSTNO('<CODE>%1</CODE>', lrecItemUOM.Code));
          ldnOutput.Append(STRSUBSTNO('<QTY>%1</QTY>', lrecItemUOM."Qty. per Unit of Measure"));
          ldnOutput.Append('</ENTRY>');
        UNTIL(lrecItemUOM.NEXT=0);
      END;

      ldnOutput.Append('</ENTRIES>');
      pbsOutput.ADDTEXT(ldnOutput.ToString());
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE GetItemLedgerEntriesForCache@1000000053(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecItemLedgerEntry@1000000004 : Record 32;
      liLastEntryNo@1000000003 : Integer;
      ldnOutput@100000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
    BEGIN
      ldnOutput := ldnOutput.StringBuilder();
      //liLastEntryNo := ptrecEventParams.getValueAsInt('last_fetched_entry_no');

      lrecItemLedgerEntry.SETFILTER("Item Tracking",'<>%1',lrecItemLedgerEntry."Item Tracking"::None);
      //IF liLastEntryNo > 0 THEN
      //  lrecItemLedgerEntry.SETFILTER("Entry No.",'>%1', liLastEntryNo);
      lrecItemLedgerEntry.SETRANGE(Open,TRUE);

      ldnOutput.Append('<ENTRIES>');

      IF lrecItemLedgerEntry.FINDSET(FALSE) THEN BEGIN
        REPEAT
          ldnOutput.Append('<ENTRY>');
          ldnOutput.Append(STRSUBSTNO('<ITEM>%1</ITEM>', lrecItemLedgerEntry."Item No."));
          ldnOutput.Append(STRSUBSTNO('<VAR>%1</VAR>', lrecItemLedgerEntry."Variant Code"));
          ldnOutput.Append(STRSUBSTNO('<UOM>%1</UOM>', lrecItemLedgerEntry."Unit of Measure Code"));
          ldnOutput.Append(STRSUBSTNO('<EXP>%1</EXP>', lrecItemLedgerEntry."Expiration Date"));
          ldnOutput.Append(STRSUBSTNO('<SN>%1</SN>', lrecItemLedgerEntry."Serial No."));
          ldnOutput.Append(STRSUBSTNO('<LN>%1</LN>', lrecItemLedgerEntry."Lot No."));
          ldnOutput.Append(STRSUBSTNO('<LOC>%1</LOC>', lrecItemLedgerEntry."Location Code"));
          ldnOutput.Append('</ENTRY>');
        UNTIL(lrecItemLedgerEntry.NEXT=0);
      END;

      ldnOutput.Append(STRSUBSTNO('<LAST_ENTRY_NO>%1</LAST_ENTRY_NO>',lrecItemLedgerEntry."Entry No."));

      ldnOutput.Append('</ENTRIES>');
      pbsOutput.ADDTEXT(ldnOutput.ToString());
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
    }
    END.
  }
}

