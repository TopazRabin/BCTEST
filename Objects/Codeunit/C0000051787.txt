OBJECT Codeunit 51787 Codeunit80EventSubscriber
{
  OBJECT-PROPERTIES
  {
    Date=05/28/21;
    Time=[ 6:30:18 AM];
    Modified=Yes;
    Version List=NAVEVENT,TPZ2829,002,003,TPZ2970,3125,006;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Table37EventSubscribers@1000000000 : Codeunit 50077;
      SalesPost@1000000001 : Codeunit 80;
      "--"@1000000002 : Integer;
      TotalSalesLineBuffer@1000000009 : Record 50006;
      TotalSalesLineLCYBuffer@1000000008 : Record 50006;
      xSalesLineBuffer@1000000007 : Record 50006;
      TempSalesLineForSalesTaxBuffer@1000000006 : TEMPORARY Record 50006;
      TempSalesLineForSpreadBuffer@1000000005 : Record 50006;
      SalesLineBuffer@1000000004 : Record 50006;
      SalesLineACYbuffer@1000000003 : Record 50006;
      RoundingLineInserted@1000000010 : Boolean;
      RoundingLineNo@1000000011 : Integer;
      Currency@1000000012 : Record 4;
      UseDate@1000000013 : Date;

    [EventSubscriber(Codeunit,80,OnBeforePostSalesDoc)]
    PROCEDURE CU80_OnRun@1000000000(VAR SalesHeader@1000000000 : Record 36);
    VAR
      WrongJobQueueStatus@1000000001 : TextConst '@@@="%1 = document type, %2 = document number. Example: Sales Order 1234 or Invoice 1234.";ENU=%1 %2 cannot be posted because it has already been scheduled for posting. Choose the Remove from Job Queue action to reset the job queue status and then post again.;ESM=%1 %2 no se puede registrar porque ya se ha programado para el registro. Elija la acci�n Quitar de cola de proyecto para restablecer el estado de la cola de proyecto y vuelva a registrarlo.;FRC=Impossible de reporter %1 %2, car ce document a d�j� �t� programm� pour report. Choisissez l''action Supprimer de la file d''attente des travaux pour r�initialiser l''�tat de la file des travaux, puis recommencez le report.;ENC=%1 %2 cannot be posted because it has already been scheduled for posting. Choose the Remove from Job Queue action to reset the job queue status and then post again.';
    BEGIN
      WITH SalesHeader DO BEGIN
        //<TPZ2378>
        IF NOT CU80_IsNASBackgroundClient AND  ("Document Type" = "Document Type"::Order) THEN BEGIN
          IF "Job Queue Status" = "Job Queue Status" :: "Scheduled for Posting" THEN
            ERROR(WrongJobQueueStatus,"Document Type","No.");
        END;
        //</TPZ2378>
      END;
    END;

    [EventSubscriber(Codeunit,51803,CU80_OnRun)]
    PROCEDURE CU80_OnRun_1@1000000001(VAR Sender@1000000000 : Codeunit 51803;VAR SalesHeader@1000000002 : Record 36;VAR SalesLine@1000000003 : Record 37);
    VAR
      WrongJobQueueStatus@1000000001 : TextConst '@@@="%1 = document type, %2 = document number. Example: Sales Order 1234 or Invoice 1234.";ENU=%1 %2 cannot be posted because it has already been scheduled for posting. Choose the Remove from Job Queue action to reset the job queue status and then post again.;ESM=%1 %2 no se puede registrar porque ya se ha programado para el registro. Elija la acci�n Quitar de cola de proyecto para restablecer el estado de la cola de proyecto y vuelva a registrarlo.;FRC=Impossible de reporter %1 %2, car ce document a d�j� �t� programm� pour report. Choisissez l''action Supprimer de la file d''attente des travaux pour r�initialiser l''�tat de la file des travaux, puis recommencez le report.;ENC=%1 %2 cannot be posted because it has already been scheduled for posting. Choose the Remove from Job Queue action to reset the job queue status and then post again.';
    BEGIN

      SalesLine.SETRANGE("Lost Opportunity",FALSE);
    END;

    [EventSubscriber(Codeunit,51803,CU80_ModifyTempLine)]
    PROCEDURE CU80_ModifyTempLine@1000000005(VAR SalesLine@1000000000 : Record 37;VAR TempSalesLineLocal@1000000001 : TEMPORARY Record 37);
    BEGIN

      IF SalesLine.GET(TempSalesLineLocal.RECORDID) THEN
      SalesLine.DELETE;
      SalesLine.INIT;
      SalesLine := TempSalesLineLocal;
      SalesLine.INSERT;
    END;

    [EventSubscriber(Codeunit,80,OnAfterCheckSalesDoc)]
    PROCEDURE CU80_CheckAndUpdate@1000000002(SalesHeader@1000000000 : Record 36);
    VAR
      SalesLine@1000000001 : Record 37;
    BEGIN
      WITH SalesHeader DO BEGIN
      //TOP030B KT ABCSI Lost Opportunities 03092015
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETRANGE(Type,SalesLine.Type::Item);
        SalesLine.SETRANGE("Lost Opportunity",TRUE);
        SalesLine.SETFILTER("No.",'<>%1','');
        IF SalesLine.FIND('-') THEN
          REPEAT
               // SalesLine.UpdateLostOpportunity;
              Table37EventSubscribers.Tb37_UpdateLostOpportunity(SalesLine);
          UNTIL SalesLine.NEXT = 0;
        //TOP030B KT ABCSI Lost Opportunities 03092015
      END;
    END;

    [EventSubscriber(Codeunit,80,OnBeforeSalesInvLineInsert)]
    PROCEDURE CU80_PostSalesLine@1000000004(VAR SalesInvLine@1000000000 : Record 113;SalesInvHeader@1000000001 : Record 112;SalesLine@1000000002 : Record 37);
    BEGIN
        // <TPZ1363>
        SalesInvLine."Qty. on Backorder" :=
        SalesLine.Quantity -
        SalesLine."Quantity Invoiced" -
        SalesLine."Qty. to Invoice";
        // </TPZ1363>

        //TOP030A KT ABCSI Sales Quote 02132015
        IF SalesLine."Document Type" = SalesLine."Document Type"::Order THEN BEGIN  //Utkarsh
            SalesInvLine."Order No." := SalesLine."Document No.";
            SalesInvLine."Order Line No." := SalesLine."Line No.";
        END;
        //TOP030A KT ABCSI Sales Quote 02132015
        CU80_UpdateLastSalesPriceWithSIL(SalesInvLine); //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015
        // <TPZ92>
        CU80_UpdateCommHdlgAmount(SalesInvLine);
        // </TPZ92>
    END;

    [EventSubscriber(Codeunit,51803,CU80_FinalizePosting)]
    PROCEDURE CU80_FinalizePosting@1000000006(VAR SalesHeader@1000000000 : Record 36;VAR SalesShipmentHeader@1000000001 : Record 110;VAR SalesInvoiceHeader@1000000002 : Record 112;VAR SalesCrMemoHeader@1000000003 : Record 114;VAR ReturnReceiptHeader@1000000004 : Record 6660;VAR Ship@1000000005 : Boolean;VAR Invoice@1000000006 : Boolean;VAR Batch@1000000007 : Boolean);
    BEGIN
       CU80_TPZ_SendPackingSlipNotification(SalesInvoiceHeader,Invoice);//<TPZ3185>
        //TPZ>>>
        CU80_TPZ_SendNotifications(SalesHeader,SalesShipmentHeader,SalesInvoiceHeader,SalesCrMemoHeader,ReturnReceiptHeader,Ship,Invoice,Batch);
        CU80_TPZ_SendASNNotification(SalesShipmentHeader,Ship);
        //TPZ<<<
        //<TPZ2241>
        CU80_DeleteJobQueueEntry(SalesHeader);
        //</TPZ2241>

       //<TPZ2378>
        IF SalesHeader."Document Type" = SalesHeader."Document Type"::Order THEN
          CU80_CreateInvoiceJobQueuEntry(SalesHeader,Ship,Invoice);
       //</TPZ2378>
    END;

    [EventSubscriber(Codeunit,51803,CU80_FinalizePosting_1)]
    PROCEDURE CU80_FinalizePosting_1@1000000026(VAR SalesHeader@1000000000 : Record 36);
    BEGIN
      WITH SalesHeader DO BEGIN
      // <TPZ815>
           IF "Document Type" = "Document Type"::Order THEN
            VALIDATE("Back Order",TRUE);
          // </TPZ815>
      END;
    END;

    [EventSubscriber(Codeunit,80,OnBeforePostCustomerEntry)]
    PROCEDURE CU80_PostCustomerEntry@1000000010(VAR GenJnlLine@1000000000 : Record 81;SalesHeader@1000000001 : Record 36;VAR TotalSalesLine@1000000002 : Record 37;VAR TotalSalesLineLCY@1000000003 : Record 37);
    VAR
      DimMgt@1000000004 : Codeunit 408;
      Cu225EventSubscriber@1000000005 : Codeunit 51908;
    BEGIN
      // <TOP9116>
        //GenJnlLine."Shortcut Dimension 5 Code" := DimMgt.GetShortcutDim5Code(SalesHeader."Dimension Set ID");
        GenJnlLine."Shortcut Dimension 5 Code" := Cu225EventSubscriber.Cu408_GetShortcutDim5Code(SalesHeader."Dimension Set ID");//<TPZ2829> Event Conversion
        // </TOP9116>

         // <TPZ2239>
        GenJnlLine."Mfr. Rep. Code" := SalesHeader."Mfr. Rep. Code";
        // </TPZ2239>
    END;

    [EventSubscriber(Codeunit,51803,CU80_PostSalesTaxToGL)]
    PROCEDURE CU80_PostSalesTaxToGL@1000000007(VAR GenJnlLine@1000000000 : Record 81;SalesHeader@1000000001 : Record 36);
    BEGIN
      // <TPZ92>
            GenJnlLine."Mfr. Rep. Code" := SalesHeader."Mfr. Rep. Code";
            // </TPZ92>
    END;

    [EventSubscriber(Codeunit,80,OnBeforeSalesInvHeaderInsert)]
    PROCEDURE CU80_InsertInvoiceHeader@1000000008(VAR SalesInvHeader@1000000000 : Record 112;SalesHeader@1000000001 : Record 36);
    VAR
      EDITradePrtnrDivExcp@1000000002 : Record 50040;
    BEGIN
        //SalesHeader.CALCFIELDS(SignatureImage);
        //SalesInvHeader.SignatureImage := SalesHeader.SignatureImage; //<TPZ2829>
          //<TPZ2683>
        EDITradePrtnrDivExcp.RESET;
        IF EDITradePrtnrDivExcp.GET(SalesHeader."EDI Trade Partner",SalesHeader."Shortcut Dimension 5 Code") AND
              EDITradePrtnrDivExcp.Exclude THEN BEGIN
          SalesInvHeader."EDI Order" := FALSE;
          SalesInvHeader."EDI Invoice" := FALSE;
          SalesInvHeader."EDI Trade Partner" := '';
          SalesInvHeader."EDI Sell-to Code" := '';
          SalesInvHeader."EDI Ship-to Code" := '';
        END;
        //</TPZ2683>}
    END;

    [EventSubscriber(Codeunit,80,OnAfterSalesInvHeaderInsert)]
    PROCEDURE CU80_InsertInvoiceHeader_1@1000000011(VAR SalesInvHeader@1000000000 : Record 112;SalesHeader@1000000001 : Record 36);
    VAR
      SalesSetup@1000000003 : Record 311;
    BEGIN
        // <TPZ1186>
        IF SalesSetup."Create Posted Whse. Releases" AND
           (SalesHeader."Warehouse Release No." <> '')
           THEN
           CU80_CreatePostedWhseRelease(SalesHeader);
        // </TPZ1186>
    END;

    [EventSubscriber(Codeunit,51803,CU80_InsertShipmentLine)]
    PROCEDURE CU80_InsertShipmentLine@1000000009(VAR SalesShptLine@1000000000 : Record 111;VAR xSalesLine@1000000001 : Record 37);
    BEGIN
      //<TPZ698>
      SalesShptLine."Order Quantity" := xSalesLine.Quantity;
      SalesShptLine."Order Quantity (Base)" := xSalesLine."Quantity (Base)";
      //</TPZ698>
    END;

    [EventSubscriber(Codeunit,80,OnAfterCheckMandatoryFields)]
    PROCEDURE CU80_CheckMandatoryHeaderFields@1000000014(VAR SalesHeader@1000000000 : Record 36);
    BEGIN

      SalesHeader.TESTFIELD("Shortcut Dimension 5 Code"); //TOP020 KT ABCSI Sales Orders by Division 02052015
    END;

    [EventSubscriber(Codeunit,51803,CU80_ValidatePostingAndDocumentDate)]
    PROCEDURE CU80_ValidatePostingAndDocumentDate@1000000012(VAR SalesHeader@1000000000 : Record 36);
    VAR
      Division@1000000001 : Record 51001;
      Text51480@1000000002 : TextConst 'ENU=Posting Date is not the same as the work date on Sales Order %1. Do you want to continue?';
    BEGIN
      // <TPZ1246>
      IF NOT CU80_IsNASBackgroundClient AND
         GUIALLOWED AND
         Division.GET(SalesHeader."Shortcut Dimension 5 Code") AND
         Division."Posting Date Check on Posting" AND
         (SalesHeader."Posting Date" <> WORKDATE)
      THEN
        IF NOT CONFIRM(Text51480,FALSE,SalesHeader."No.") THEN
          ERROR('');
      // </TPZ1246>
    END;

    LOCAL PROCEDURE "//TPZ===="@1000000019();
    BEGIN
    END;

    PROCEDURE CU80_RemoveQueueEntry@1000000018(VAR SalesHeader@1000 : Record 36);
    VAR
      JobQueueEntry@1002 : Record 472;
      RecRef@1001 : RecordRef;
    BEGIN
      // <TPZ162>
      WITH SalesHeader DO BEGIN
        IF "Job Queue Status" = "Job Queue Status"::" " THEN
          EXIT;
        RecRef.GETTABLE(SalesHeader);
        JobQueueEntry.SETRANGE(ID,"Job Queue Entry ID");
        JobQueueEntry.SETRANGE("Record ID to Process",RecRef.RECORDID);
        IF NOT JobQueueEntry.ISEMPTY THEN
          JobQueueEntry.DELETEALL;
      END;
      // <TPZ162>
    END;

    PROCEDURE CU80_IsNASBackgroundClient@1000000003() : Boolean;
    VAR
      ActiveSession@1000 : Record 2000000110;
    BEGIN
      // <TPZ162>
      IF ActiveSession.GET(SERVICEINSTANCEID,SESSIONID) AND
         ((ActiveSession."Client Type" = ActiveSession."Client Type"::NAS) OR
          (ActiveSession."Client Type" = ActiveSession."Client Type"::Background))
      THEN
        EXIT(TRUE);

      EXIT(FALSE);
      // </TPZ162>
    END;

    LOCAL PROCEDURE CU80_UpdateCommHdlgAmount@1000000015(VAR SalesInvLine@1000000000 : Record 113);
    VAR
      CustProdComm@1000000001 : Record 50039;
    BEGIN



      // <TPZ92,TPZ1539>
      WITH SalesInvLine DO BEGIN
        IF ("Mfr. Rep. Comm. %" <> 0) AND
           ((Type = Type::Item) OR
            ((Type = Type::"G/L Account") AND
             "Commission Payable") OR
            ((Type = Type::"Charge (Item)") AND
             "Commission Payable"))
        THEN
          "Mfr. Rep. Comm. Amount" := ("Mfr. Rep. Comm. %" * ("Line Amount"-"Inv. Discount Amount")) / 100; //<TPZ1949>

        IF ("Location Hdlg. %" <> 0) AND
           ((Type = Type::Item) OR
            ((Type = Type::"G/L Account") AND
             "Commission Payable") OR
            ((Type = Type::"Charge (Item)") AND
             "Commission Payable"))
        THEN
          "Location Hdlg. Amount" := ("Location Hdlg. %" * ("Line Amount"-"Inv. Discount Amount"))/ 100;  //<TPZ1949>
      END;
      // </TPZ92,TPZ1539>

       //<TPZ1641>
      WITH SalesInvLine DO BEGIN
         IF CustProdComm.GET("Sell-to Customer No.","Item Category Code","Product Group Code","Shortcut Dimension 5 Code") THEN
          IF (CustProdComm."Commission %" <> 0) AND
           ((Type = Type::Item) OR
            ((Type = Type::"G/L Account") AND
             "Commission Payable") OR
            ((Type = Type::"Charge (Item)") AND
             "Commission Payable"))
        THEN  BEGIN
          "Mfr. Rep. Comm. %":= CustProdComm."Commission %";
          "Mfr. Rep. Comm. Amount" := (CustProdComm."Commission %"  * ("Line Amount"-"Inv. Discount Amount")) / 100; //<TPZ1949>

       END;
        IF (CustProdComm."Location Hdlg %" <> 0) AND
           ((Type = Type::Item) OR
            ((Type = Type::"G/L Account") AND
             "Commission Payable") OR
            ((Type = Type::"Charge (Item)") AND
             "Commission Payable"))
        THEN BEGIN
          "Location Hdlg. %":=CustProdComm."Location Hdlg %";
          "Location Hdlg. Amount" := (CustProdComm."Location Hdlg %" * ("Line Amount"-"Inv. Discount Amount")) / 100;  //<TPZ1949>
        END;
      END;
       //</TPZ1641>
    END;

    LOCAL PROCEDURE CU80_TPZ_SendNotifications@1000000013(VAR pSalesHeader@1000000004 : Record 36;VAR SalesShptHeader@1000000013 : Record 110;VAR SalesInvHeader@1000000014 : Record 112;VAR SalesCrMemoHeader@1000000015 : Record 114;VAR ReturnReceiptHeader@1000000016 : Record 6660;VAR Ship@1000000003 : Boolean;VAR Invoice@1000000002 : Boolean;VAR Batch@1000000000 : Boolean);
    VAR
      EMailMgt@1000000001 : Codeunit 14000903;
      FaxMgmt@1000000005 : Codeunit 50010;
      SalesPostPrint@1000000006 : Codeunit 82;
      JobQueueCat@1000000008 : Record 471;
      JobQueueEntry@1000000007 : Record 472;
      PostDescription@1000000009 : TextConst '@@@="%1 = document type, %2 = document number. Example: Post Sales Order 1234.";ENU="Handle Notification for Invoice %1 ";ESM=Registrar ventas %1 %2.;FRC=Reportez les ventes %1 %2.;ENC=Post Sales %1 %2.';
      tmplocation@1000000010 : Record 14;
      PostDescriptionShpmnt@1000000011 : TextConst 'ENU="Handle Notification for Shipment %1 "';
      SalesSetup@1000000012 : Record 311;
      "----"@1000000017 : Integer;
      Codeunit82EventSubscriber@1000000018 : Codeunit 51877;
    BEGIN
      //<TPZ2214>
      SalesSetup.GET;//Utkarsh

        IF NOT CU80_IsNASBackgroundClient THEN BEGIN
           WITH pSalesHeader DO BEGIN
                IF Ship AND SalesSetup."Enable E-Mail" THEN
                    EMailMgt.SendSalesShipmentNotice(SalesShptHeader,FALSE,FALSE);

                  // <TPZ162, TPZ143>
                  IF Invoice THEN BEGIN
                    // IF SalesSetup."Enable E-Mail" AND NOT SalesInvHeader."EDI Order" THEN  //TPZ1878
                    IF SalesSetup."Enable E-Mail" AND NOT SalesInvHeader."EDI Invoice" THEN
                      EMailMgt.SendSalesInvoiceNotice(SalesInvHeader,FALSE,Batch);

                    CASE "Document Type" OF
                      "Document Type"::Order,"Document Type"::Invoice:
                        BEGIN
                          // IF SalesSetup."Enable E-Mail" AND Fax AND NOT SalesInvHeader."EDI Order" THEN Begin  //TPZ1878
                          IF SalesSetup."Enable Fax" AND Fax AND NOT SalesInvHeader."EDI Invoice" THEN BEGIN
                            IF CU80_IsNASBackgroundClient THEN
                              FaxMgmt.SaveSalesInvoice(SalesInvHeader)
                            ELSE
                              FaxMgmt.SalesInvoice(SalesInvHeader);
                          END;
                          // IF SalesSetup."Enable E-Mail" AND Mail AND NOT SalesInvHeader."EDI Order" THEN  //TPZ1878
                          //kvb TPZ2165 1/15/18 ->
                          IF SalesSetup."Enable Mail" AND Mail AND NOT pSalesHeader."EDI Invoice" THEN
                            Codeunit82EventSubscriber.CU82_GetInvoiceReport(SalesInvHeader);
                          //kvb TPZ2165 1/15/18 <-
                        END;
                      "Document Type"::"Return Order","Document Type"::"Credit Memo": //<TPZ1747>
                        IF SalesSetup."Enable E-Mail" THEN
                          EMailMgt.SendSalesCrMemoNotice(SalesCrMemoHeader,FALSE,Batch);
                      END;
                    END;
                    // </TPZ162, TPZ143>

              END;
        END ELSE BEGIN // shipping location will go into the job queue

          IF Ship AND SalesSetup."Enable E-Mail" THEN BEGIN

                JobQueueEntry.INIT();
                SalesSetup.GET;
                JobQueueEntry."Object Type to Run" := JobQueueEntry."Object Type to Run"::Codeunit;
                JobQueueEntry."Object ID to Run" := CODEUNIT::"Ship Notification Handling";
                JobQueueEntry."Parameter String":=SalesShptHeader."No.";
                JobQueueEntry.ID:=CREATEGUID;
                JobQueueCat.GET('INVNOTIFY');
                JobQueueEntry.VALIDATE(JobQueueEntry."User ID",'TOPAZ\SA_NY_NST_NAVNST6');//NAVEVENT
                JobQueueEntry."Job Queue Category Code" := SalesShptHeader."No.";//JobQueueCat.Code;//TPZ2254
                JobQueueEntry."Timeout (sec.)" := 7200;
                IF SalesSetup."Invoice Notification Start Tim" <> 0T THEN
                   //JobQueueEntry."Earliest Start Date/Time" := CREATEDATETIME(CALCDATE('+1D',TODAY),SalesSetup."Invoice Notification Start Tim");
                  JobQueueEntry."Earliest Start Date/Time" := CREATEDATETIME((pSalesHeader."Posting Date"),SalesSetup."Invoice Notification Start Tim");
                  //MESSAGE(FORMAT(JobQueueEntry."Earliest Start Date/Time"));
                JobQueueEntry.Priority := SalesSetup."Job Q. Prio. for P. from Whse.";
                JobQueueEntry.Description :=
                COPYSTR(STRSUBSTNO(PostDescriptionShpmnt,SalesShptHeader."No."),1,MAXSTRLEN(JobQueueEntry.Description));
                JobQueueEntry.INSERT;//NAVEVENT
                CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry);
              END;



              IF Invoice THEN BEGIN

                JobQueueEntry.INIT();
                SalesSetup.GET;
                JobQueueEntry."Object Type to Run" := JobQueueEntry."Object Type to Run"::Codeunit;
                JobQueueEntry."Object ID to Run" := CODEUNIT::"Invoice Notification Handling";
                JobQueueEntry."Parameter String":=SalesInvHeader."No.";
                JobQueueEntry.ID:=CREATEGUID;
                JobQueueCat.GET('INVNOTIFY');
                JobQueueEntry.VALIDATE(JobQueueEntry."User ID",'TOPAZ\SA_NY_NST_NAVNST6');//NAVEVENT
                JobQueueEntry."Job Queue Category Code" := SalesInvHeader."No.";//JobQueueCat.Code;//TPZ2254
                JobQueueEntry."Timeout (sec.)" := 7200;
                IF SalesSetup."Invoice Notification Start Tim" <> 0T THEN
                  // JobQueueEntry."Earliest Start Date/Time" := CREATEDATETIME(CALCDATE('+1D',TODAY),SalesSetup."Invoice Notification Start Tim");
                  JobQueueEntry."Earliest Start Date/Time" := CREATEDATETIME((pSalesHeader."Posting Date"),SalesSetup."Invoice Notification Start Tim");
                 // MESSAGE(FORMAT(JobQueueEntry."Earliest Start Date/Time"));
                JobQueueEntry.Priority := SalesSetup."Job Q. Prio. for P. from Whse.";
                JobQueueEntry.Description :=
                COPYSTR(STRSUBSTNO(PostDescription,SalesInvHeader."No."),1,MAXSTRLEN(JobQueueEntry.Description));
                JobQueueEntry.INSERT;//NAVEVENT
                CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry);
              END;

          //<TPZ2214>
      END;
    END;

    LOCAL PROCEDURE CU80_TPZ_SendASNNotification@1000000017(VAR SalesShptHeader@1000000003 : Record 110;VAR Ship@1000000000 : Boolean);
    VAR
      ASNMgt@1000000001 : Codeunit 50001;
      SalesSetup@1000000002 : Record 311;
      JobQueueEntry@1000000004 : Record 472;
      PostDescriptionShpmnt@1000000005 : TextConst 'ENU=Handle Notification for Shipment %1 - %2';
    BEGIN
       // </TPZ162, TPZ143>
        // << Shipping
        SalesSetup.GET;
        //TOP060 Advance Shipping Notices via Emaial - 04212015
        //<TPZ1628>
        //IF Ship AND (SalesSetup."Enable ASN E-Mail") AND (SalesShptHeader."E-Mail (ASN)" <> '') THEN
        IF Ship AND (SalesSetup."Enable ASN E-Mail") THEN
        //</TPZ1628>
        //  ASNMgt.SendSalesApprovalsMail(SalesShptHeader,TRUE); //TPZ3124
        //TOP060 Advance Shipping Notices via Emaial - 04212015
        //TPZ3124
         IF NOT CU80_IsNASBackgroundClient THEN BEGIN //TPZ3124
          WITH SalesShptHeader DO BEGIN
            JobQueueEntry.INIT();
            JobQueueEntry."Object Type to Run" := JobQueueEntry."Object Type to Run"::Codeunit;
            JobQueueEntry."Object ID to Run" := CODEUNIT:: "Ship Notification Handling -1";
            JobQueueEntry."Parameter String":= "No.";
            JobQueueEntry.ID:=CREATEGUID;
            JobQueueEntry."Job Queue Category Code" := "No.";
            JobQueueEntry."Timeout (sec.)" := 7200;
            JobQueueEntry."Earliest Start Date/Time" := CURRENTDATETIME;

            JobQueueEntry.Description := COPYSTR(STRSUBSTNO(PostDescriptionShpmnt,SalesShptHeader."No.",SalesShptHeader."Order No."),1,MAXSTRLEN(JobQueueEntry.Description));
            JobQueueEntry.INSERT(TRUE);
            CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry);
          END;
         END ELSE ASNMgt.SendSalesApprovalsMail(SalesShptHeader,TRUE);//TPZ3124
          //TPZ3124
    END;

    PROCEDURE CU80_GetSalesLines_ABCSI@1000000025(VAR NewSalesHeader@1000 : TEMPORARY Record 36;VAR NewSalesLine@1001 : TEMPORARY Record 37;QtyType@1002 : 'General,Invoicing,Shipping';VAR TempSL@1000000000 : TEMPORARY Record 37);
    VAR
      OldSalesLine@1003 : TEMPORARY Record 37;
      MergedSalesLines@1006 : TEMPORARY Record 37;
      TotalAdjCostLCY@1005 : Decimal;
      SalesHeader@1000000001 : Record 36;
      TempPrepaymentSalesLine@1000000002 : TEMPORARY Record 37;
    BEGIN
      SalesHeader := NewSalesHeader;
      OldSalesLine.COPY(TempSL,TRUE);
      IF QtyType = QtyType::Invoicing THEN BEGIN
        //CreatePrepaymentLines(SalesHeader,TempPrepaymentSalesLine,FALSE);
      ////  MergeSaleslines(SalesHeader,OldSalesLine,TempPrepaymentSalesLine,MergedSalesLines);
        //SalesPost.MergeSaleslines(SalesHeader,TempSL,TempPrepaymentSalesLine,MergedSalesLines);// temp blocked
        SalesPost.SumSalesLines2(SalesHeader,NewSalesLine,MergedSalesLines,QtyType,TRUE,FALSE,TotalAdjCostLCY);
      END ELSE
      //////  SumSalesLines2(NewSalesLine,OldSalesLine,QtyType,TRUE,FALSE,TotalAdjCostLCY);
        SalesPost.SumSalesLines2(SalesHeader,NewSalesLine,TempSL,QtyType,TRUE,FALSE,TotalAdjCostLCY);
    END;

    PROCEDURE CU80_UpdateLastSalesPriceWithSIL@1000000024(VAR InRec@1000000000 : Record 113);
    VAR
      NewLastSalesPrice@1000000001 : Record 50004;
      SalesInvHeaderLoc@1000000002 : Record 112;
      SalesInvHdr@1000000003 : Record 112;
    BEGIN
      //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 Start
      IF InRec.Type <> InRec.Type::Item THEN
        EXIT;
      IF (InRec."Unit Price" = 0) OR (InRec.Quantity = 0) THEN
        EXIT;
      IF SalesInvHdr.GET(InRec."Document No.") THEN;//After CU31 VA

      NewLastSalesPrice.RESET;
      NewLastSalesPrice.SETRANGE("Document Type",NewLastSalesPrice."Document Type"::"Posted Sales Invoice");
      NewLastSalesPrice.SETRANGE("Document No.",InRec."Document No.");
      NewLastSalesPrice.SETRANGE("Sell-to Customer No.",InRec."Sell-to Customer No.");
      NewLastSalesPrice.SETRANGE("Item No.",InRec."No.");
      NewLastSalesPrice.SETRANGE("Unit of Measure Code",InRec."Unit of Measure Code");
      IF NewLastSalesPrice.FINDFIRST THEN BEGIN
        //NewLastSalesPrice."Document Date" := SalesHeader."Document Date";//After CU31 VA
        NewLastSalesPrice."Document Date" := SalesInvHdr."Document Date";//After CU31 VA
        NewLastSalesPrice."Last Unit Price" := InRec."Actual Unit Price";
        NewLastSalesPrice."Last Price UOM" := InRec."Unit of Measure Code";
        NewLastSalesPrice."Last Price Qty." := InRec.Quantity;
        NewLastSalesPrice."Special Price" := InRec."Special Price";//TPZ2970
        //>>002 TPZ2909
        //Start Comment Old Code
        //NewLastSalesPrice."Last Price Date" := TODAY;
        //End Comment Old Code
        NewLastSalesPrice."Last Price Date" := SalesInvHdr."Posting Date";
        //<<002 TPZ2909
        NewLastSalesPrice."Last Price User ID" := USERID;
        NewLastSalesPrice.MODIFY;
      END ELSE BEGIN
        NewLastSalesPrice.INIT;
        NewLastSalesPrice."Document Type" := NewLastSalesPrice."Document Type"::"Posted Sales Invoice";
        NewLastSalesPrice."Document No." := InRec."Document No.";
        NewLastSalesPrice."Sell-to Customer No." := InRec."Sell-to Customer No.";
        NewLastSalesPrice."Item No." := InRec."No.";
        NewLastSalesPrice."Unit of Measure Code" := InRec."Unit of Measure Code";
        //NewLastSalesPrice."Document Date" := SalesHeader."Document Date";//After CU31 VA
        NewLastSalesPrice."Document Date" := SalesInvHdr."Document Date";//After CU31 VA
        NewLastSalesPrice."Last Unit Price" := InRec."Actual Unit Price";
        NewLastSalesPrice."Last Price UOM" := InRec."Unit of Measure Code";
        NewLastSalesPrice."Last Price Qty." := InRec.Quantity;
        //>>002 TPZ2909
        //Start Comment Old Code
        //NewLastSalesPrice."Last Price Date" := TODAY;
        //End Comment Old Code
        NewLastSalesPrice."Last Price Date" := SalesInvHdr."Posting Date";
        //<<002 TPZ2909
        NewLastSalesPrice."Last Price User ID" := USERID;
        NewLastSalesPrice."Special Price" := InRec."Special Price";//TPZ2970
        // <TPZ449> <TPZ1603>
        //IF SalesInvHeaderLoc.GET(InRec."No.") THEN BEGIN //EB COMMENT OUT TPZ1603
        IF SalesInvHeaderLoc.GET(InRec."Document No.") THEN BEGIN //EB COMMENT OUT TPZ1603
          NewLastSalesPrice."Shortcut Dimension 5 Code" := SalesInvHeaderLoc."Shortcut Dimension 5 Code";
          NewLastSalesPrice."Country/Region Code" := SalesInvHeaderLoc."Sell-to Country/Region Code";
        END;
        // </TPZ449><TPZ1603>
        NewLastSalesPrice.INSERT;
      END;
      //TOP180 KT ABCSI Customer Pricing - Hot Sheets 04162015 End
    END;

    PROCEDURE CU80_CreatePostedWhseRelease@1000000023(VAR SalesHeader@1000000002 : Record 36);
    VAR
      PostedWhseRelHdr@1000000000 : Record 50041;
      PostedWhseRelHdr2@1000000001 : Record 50041;
    BEGIN
      // <TPZ1186>
      PostedWhseRelHdr.INIT;
      PostedWhseRelHdr."Location Code" := SalesHeader."Location Code";
      PostedWhseRelHdr."No." := SalesHeader."Warehouse Release No.";

      PostedWhseRelHdr2.LOCKTABLE;
      PostedWhseRelHdr2.SETRANGE("Location Code",SalesHeader."Location Code");
      PostedWhseRelHdr2.SETRANGE("No.",SalesHeader."Warehouse Release No.");
      IF PostedWhseRelHdr2.FINDLAST THEN
        PostedWhseRelHdr."Doc. No. Occurence" := PostedWhseRelHdr2."Doc. No. Occurence" + 1
      ELSE
        PostedWhseRelHdr."Doc. No. Occurence" := 1;

      PostedWhseRelHdr."Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
      PostedWhseRelHdr."Posting Date" := SalesHeader."Posting Date";
      PostedWhseRelHdr."Order No." := SalesHeader."No.";
      PostedWhseRelHdr."Sell-to Customer Name" := SalesHeader."Sell-to Customer Name";
      PostedWhseRelHdr."User ID" := USERID;
      PostedWhseRelHdr."Mfr. Rep. Code" := SalesHeader."Mfr. Rep. Code";
      PostedWhseRelHdr."Internal Comment" := SalesHeader."Internal Comment";
      PostedWhseRelHdr.INSERT;
      // </TPZ1186>
    END;

    LOCAL PROCEDURE CU80_DeleteJobQueueEntry@1000000022(JsalesHeader@1000000002 : Record 36);
    VAR
      JobQueueEnrty@1000000000 : Record 472;
      JobQDesc@1000000001 : Text[50];
    BEGIN
      //<TPZ2241>
      IF NOT CU80_IsNASBackgroundClient THEN BEGIN
        JobQDesc:='';
        JobQDesc := 'Post Sales Order '+JsalesHeader."No."+'.';
        JobQueueEnrty.RESET;
        JobQueueEnrty.SETRANGE(JobQueueEnrty.Description,JobQDesc);
        IF JobQueueEnrty.FINDSET THEN BEGIN
          JobQueueEnrty.DELETEALL;
        END;
      END;
      //<TPZ2241>
    END;

    LOCAL PROCEDURE CU80_CreateInvoiceJobQueuEntry@1000000021(VAR pSalesHeader@1000000002 : Record 36;Ship@1000000001 : Boolean;Invoice@1000000009 : Boolean);
    VAR
      LocationInvoice@1000000000 : Record 14;
      JobQueueEntry@1000000003 : Record 472;
      JobQueueCat@1000000004 : Record 471;
      PostDescription@1000000005 : TextConst 'ENU=Post Sales Order %1';
      RecRef@1000000006 : RecordRef;
      TPZSalesPostviaJobQueue@1000000007 : Codeunit 50045;
      TPZSalesPostSchedule@1000000008 : Codeunit 50047;
      SalesSetup@1000000010 : Record 311;
    BEGIN
      //<TPZ2378>
      IF NOT CU80_IsNASBackgroundClient THEN BEGIN
        IF  (pSalesHeader."Job Queue Status" = pSalesHeader."Job Queue Status"::"Scheduled for Posting") THEN
              EXIT;
       IF LocationInvoice.GET(pSalesHeader."Location Code") THEN BEGIN
          IF Ship AND SalesSetup."Enable Shipping" AND LocationInvoice."Enable DMS" = FALSE THEN BEGIN
           IF NOT Invoice THEN
            TPZSalesPostviaJobQueue.EnqueueSalesDoc(pSalesHeader);
          END;
       END;
      END;
      //</TPZ2378/
    END;

    LOCAL PROCEDURE "-------------------"@1000000034();
    BEGIN
    END;

    PROCEDURE CU80_SumSalesLinesBuffer@1000000033(VAR NewSalesHeader@1000 : Record 50005;QtyType@1001 : 'General,Invoicing,Shipping';VAR NewTotalSalesLine@1002 : Record 50006;VAR NewTotalSalesLineLCY@1003 : Record 50006;VAR VATAmount@1004 : Decimal;VAR VATAmountText@1005 : Text[30];VAR ProfitLCY@1006 : Decimal;VAR ProfitPct@1007 : Decimal;VAR TotalAdjCostLCY@1010 : Decimal);
    VAR
      OldSalesLine@1008 : Record 50006;
    BEGIN
      CU80_SumSalesLinesTempBuffer(
        NewSalesHeader,OldSalesLine,QtyType,NewTotalSalesLine,NewTotalSalesLineLCY,
        VATAmount,VATAmountText,ProfitLCY,ProfitPct,TotalAdjCostLCY);
    END;

    PROCEDURE CU80_SumSalesLinesTempBuffer@1000000032(VAR SalesHeader@1000 : Record 50005;VAR OldSalesLine@1001 : Record 50006;QtyType@1002 : 'General,Invoicing,Shipping';VAR NewTotalSalesLine@1003 : Record 50006;VAR NewTotalSalesLineLCY@1004 : Record 50006;VAR VATAmount@1005 : Decimal;VAR VATAmountText@1006 : Text[30];VAR ProfitLCY@1007 : Decimal;VAR ProfitPct@1008 : Decimal;VAR TotalAdjCostLCY@1011 : Decimal);
    VAR
      SalesLine@1009 : Record 50006;
      VATAmountTxt@1000000001 : TextConst 'ENU=Tax Amount;ESM=Importe IVA;FRC=Montant de TVA;ENC=Tax Amount';
      VATRateTxt@1000000000 : TextConst '@@@="%1 = VAT Rate";ENU=%1% Tax;ESM=%1% IVA;FRC=%1% Taxe;ENC=%1% Tax';
    BEGIN
      WITH SalesHeader DO BEGIN
        CU80_SumSalesLines2Buffer(SalesHeader,SalesLine,OldSalesLine,QtyType,FALSE,TRUE,TotalAdjCostLCY);
        ProfitLCY := TotalSalesLineLCYBuffer.Amount - TotalSalesLineLCYBuffer."Unit Cost (LCY)";
        IF TotalSalesLineLCYBuffer.Amount = 0 THEN
          ProfitPct := 0
        ELSE
          ProfitPct := ROUND(ProfitLCY / TotalSalesLineLCYBuffer.Amount * 100,0.1);
        VATAmount := TotalSalesLineBuffer."Amount Including VAT" - TotalSalesLineBuffer.Amount;
        IF TotalSalesLineBuffer."VAT %" = 0 THEN
          VATAmountText := VATAmountTxt
        ELSE
          VATAmountText := STRSUBSTNO(VATRateTxt,TotalSalesLineBuffer."VAT %");
        NewTotalSalesLine := TotalSalesLineBuffer;
        NewTotalSalesLineLCY := TotalSalesLineLCYBuffer;
      END;
    END;

    LOCAL PROCEDURE CU80_SumSalesLines2Buffer@1000000016(SalesHeader@1011 : Record 50005;VAR NewSalesLine@1000 : Record 50006;VAR OldSalesLine@1001 : Record 50006;QtyType@1002 : 'General,Invoicing,Shipping';InsertSalesLine@1003 : Boolean;CalcAdCostLCY@1008 : Boolean;VAR TotalAdjCostLCY@1006 : Decimal);
    VAR
      SalesLine@1012 : Record 50006;
      TempVATAmountLine@1010 : TEMPORARY Record 290;
      TempVATAmountLineRemainder@1009 : TEMPORARY Record 290;
      SalesLineQty@1004 : Decimal;
      AdjCostLCY@1007 : Decimal;
      BiggestLineNo@1005 : Integer;
      "----------"@1000000003 : Integer;
      GLSetup@1000000000 : Record 98;
      SalesSetup@1000000001 : Record 311;
      LastLineRetrieved@1000000005 : Boolean;
    BEGIN
      TotalAdjCostLCY := 0;
      TempVATAmountLineRemainder.DELETEALL;
      OldSalesLine.CalcVATAmountLines(QtyType,SalesHeader,OldSalesLine,TempVATAmountLine);
      WITH SalesHeader DO BEGIN
        //GetGLSetup;
        GLSetup.GET;
        SalesSetup.GET;
        // GetCurrency("Currency Code");
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
        OldSalesLine.SETRANGE("Document Type","Document Type");
        OldSalesLine.SETRANGE("Document No.","No.");
        RoundingLineInserted := FALSE;
        IF OldSalesLine.FINDSET THEN
          REPEAT
            IF NOT RoundingLineInserted THEN
              SalesLine := OldSalesLine;
            CASE QtyType OF
              QtyType::General:
                SalesLineQty := SalesLine.Quantity;
              QtyType::Invoicing:
                SalesLineQty := SalesLine."Qty. to Invoice";
              QtyType::Shipping:
                BEGIN
                  IF IsCreditDocType THEN
                    SalesLineQty := SalesLine."Return Qty. to Receive"
                  ELSE
                    SalesLineQty := SalesLine."Qty. to Ship";
                END;
            END;
            CU80_DivideAmountBuffer(SalesHeader,SalesLine,QtyType,SalesLineQty,TempVATAmountLine,TempVATAmountLineRemainder);
            SalesLine.Quantity := SalesLineQty;
            IF SalesLineQty <> 0 THEN BEGIN
              IF (SalesLine.Amount <> 0) AND NOT RoundingLineInserted THEN
                IF TotalSalesLineBuffer.Amount = 0 THEN
                  TotalSalesLineBuffer."VAT %" := SalesLine."VAT %"
                ELSE
                  IF TotalSalesLineBuffer."VAT %" <> SalesLine."VAT %" THEN
                    TotalSalesLineBuffer."VAT %" := 0;
              CU80_RoundAmountBuffer(SalesHeader,SalesLine,SalesLineQty);  //AJ

              IF (QtyType IN [QtyType::General,QtyType::Invoicing]) AND
                 NOT InsertSalesLine AND CalcAdCostLCY
              THEN BEGIN
                //AdjCostLCY := CostCalcMgt.CalcSalesLineCostLCY(SalesLine,QtyType);  AJ
                TotalAdjCostLCY := TotalAdjCostLCY + CU80_GetSalesLineAdjCostLCYBuffer(SalesLine,QtyType,AdjCostLCY);  //AJ
              END;

              SalesLine := xSalesLineBuffer;
            END;
            IF InsertSalesLine THEN BEGIN
              NewSalesLine := SalesLine;
              NewSalesLine.INSERT;
            END;
            IF RoundingLineInserted THEN
              LastLineRetrieved := TRUE
            ELSE BEGIN
             // BiggestLineNo := MAX(BiggestLineNo,OldSalesLine."Line No.");
              IF BiggestLineNo > OldSalesLine."Line No." THEN
                  BiggestLineNo := BiggestLineNo
              ELSE
                  BiggestLineNo := OldSalesLine."Line No.";

              LastLineRetrieved := OldSalesLine.NEXT = 0;
              {
              IF LastLineRetrieved AND SalesSetup."Invoice Rounding" THEN
                InvoiceRounding(SalesHeader,SalesLine,TRUE,BiggestLineNo);
                }  //AJ
            END;
          UNTIL LastLineRetrieved;
      END;
    END;

    LOCAL PROCEDURE CU80_DivideAmountBuffer@1000000031(SalesHeader@1004 : Record 50005;VAR SalesLine@1005 : Record 50006;QtyType@1000 : 'General,Invoicing,Shipping';SalesLineQty@1001 : Decimal;VAR TempVATAmountLine@1002 : TEMPORARY Record 290;VAR TempVATAmountLineRemainder@1003 : TEMPORARY Record 290);
    VAR
      OriginalDeferralAmount@1006 : Decimal;
    BEGIN
      IF RoundingLineInserted AND (RoundingLineNo = SalesLine."Line No.") THEN
        EXIT;
      WITH SalesLine DO
        IF (SalesLineQty = 0) OR ("Unit Price" = 0) THEN BEGIN
          "Line Amount" := 0;
          "Line Discount Amount" := 0;
          "Inv. Discount Amount" := 0;
          "VAT Base Amount" := 0;
          Amount := 0;
          "Amount Including VAT" := 0;
        END ELSE BEGIN
          OriginalDeferralAmount := GetDeferralAmount;
          IF "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" THEN BEGIN
            IF (QtyType = QtyType::Invoicing) AND
               TempSalesLineForSalesTaxBuffer.GET("Document Type","Document No.","Line No.")
            THEN BEGIN
              "Line Amount" := TempSalesLineForSalesTaxBuffer."Line Amount";
              "Line Discount Amount" := TempSalesLineForSalesTaxBuffer."Line Discount Amount";
              Amount := TempSalesLineForSalesTaxBuffer.Amount;
              "Amount Including VAT" := TempSalesLineForSalesTaxBuffer."Amount Including VAT";
              "Inv. Discount Amount" := TempSalesLineForSalesTaxBuffer."Inv. Discount Amount";
              "VAT Base Amount" := TempSalesLineForSalesTaxBuffer."VAT Base Amount";
            END ELSE BEGIN
              "Line Amount" := ROUND(SalesLineQty * "Unit Price",Currency."Amount Rounding Precision");
              IF SalesLineQty <> Quantity THEN
                "Line Discount Amount" :=
                  ROUND("Line Amount" * "Line Discount %" / 100,Currency."Amount Rounding Precision");
              "Line Amount" := "Line Amount" - "Line Discount Amount";
              IF "Allow Invoice Disc." THEN
                IF QtyType = QtyType::Invoicing THEN
                  "Inv. Discount Amount" := "Inv. Disc. Amount to Invoice"
                ELSE BEGIN
                  TempSalesLineForSpreadBuffer."Inv. Discount Amount" :=
                    TempSalesLineForSpreadBuffer."Inv. Discount Amount" +
                    "Inv. Discount Amount" * SalesLineQty / Quantity;
                  "Inv. Discount Amount" :=
                    ROUND(TempSalesLineForSpreadBuffer."Inv. Discount Amount",Currency."Amount Rounding Precision");
                  TempSalesLineForSpreadBuffer."Inv. Discount Amount" :=
                    TempSalesLineForSpreadBuffer."Inv. Discount Amount" - "Inv. Discount Amount";
                END;
              Amount := "Line Amount" - "Inv. Discount Amount";
              "VAT Base Amount" := Amount;
              "Amount Including VAT" := Amount;
            END;
          END ELSE BEGIN
            TempVATAmountLine.GET("VAT Identifier","VAT Calculation Type","Tax Group Code","Tax Area Code",FALSE,"Line Amount" >= 0);
            IF "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" THEN
              "VAT %" := TempVATAmountLine."VAT %";
            TempVATAmountLineRemainder := TempVATAmountLine;
            IF NOT TempVATAmountLineRemainder.FIND THEN BEGIN
              TempVATAmountLineRemainder.INIT;
              TempVATAmountLineRemainder.INSERT;
            END;
            "Line Amount" := GetLineAmountToHandle(SalesLineQty); // + GetPrepmtDiffToLineAmount(SalesLine);AJ
            IF SalesLineQty <> Quantity THEN
              "Line Discount Amount" :=
                ROUND("Line Discount Amount" * SalesLineQty / Quantity,Currency."Amount Rounding Precision");

            IF "Allow Invoice Disc." AND (TempVATAmountLine."Inv. Disc. Base Amount" <> 0) THEN
              IF QtyType = QtyType::Invoicing THEN
                "Inv. Discount Amount" := "Inv. Disc. Amount to Invoice"
              ELSE BEGIN
                TempVATAmountLineRemainder."Invoice Discount Amount" :=
                  TempVATAmountLineRemainder."Invoice Discount Amount" +
                  TempVATAmountLine."Invoice Discount Amount" * "Line Amount" /
                  TempVATAmountLine."Inv. Disc. Base Amount";
                "Inv. Discount Amount" :=
                  ROUND(
                    TempVATAmountLineRemainder."Invoice Discount Amount",Currency."Amount Rounding Precision");
                TempVATAmountLineRemainder."Invoice Discount Amount" :=
                  TempVATAmountLineRemainder."Invoice Discount Amount" - "Inv. Discount Amount";
              END;

            IF SalesHeader."Prices Including VAT" THEN BEGIN
              IF (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount" = 0) OR
                 ("Line Amount" = 0)
              THEN BEGIN
                TempVATAmountLineRemainder."VAT Amount" := 0;
                TempVATAmountLineRemainder."Amount Including VAT" := 0;
              END ELSE BEGIN
                TempVATAmountLineRemainder."VAT Amount" :=
                  TempVATAmountLineRemainder."VAT Amount" +
                  TempVATAmountLine."VAT Amount" *
                  ("Line Amount" - "Inv. Discount Amount") /
                  (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
                TempVATAmountLineRemainder."Amount Including VAT" :=
                  TempVATAmountLineRemainder."Amount Including VAT" +
                  TempVATAmountLine."Amount Including VAT" *
                  ("Line Amount" - "Inv. Discount Amount") /
                  (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
              END;
              IF "Line Discount %" <> 100 THEN
                "Amount Including VAT" :=
                  ROUND(TempVATAmountLineRemainder."Amount Including VAT",Currency."Amount Rounding Precision")
              ELSE
                "Amount Including VAT" := 0;
              Amount :=
                ROUND("Amount Including VAT",Currency."Amount Rounding Precision") -
                ROUND(TempVATAmountLineRemainder."VAT Amount",Currency."Amount Rounding Precision");
              "VAT Base Amount" :=
                ROUND(
                  Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
              TempVATAmountLineRemainder."Amount Including VAT" :=
                TempVATAmountLineRemainder."Amount Including VAT" - "Amount Including VAT";
              TempVATAmountLineRemainder."VAT Amount" :=
                TempVATAmountLineRemainder."VAT Amount" - "Amount Including VAT" + Amount;
            END ELSE
              IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN BEGIN
                IF "Line Discount %" <> 100 THEN
                  "Amount Including VAT" := "Line Amount" - "Inv. Discount Amount"
                ELSE
                  "Amount Including VAT" := 0;
                Amount := 0;
                "VAT Base Amount" := 0;
              END ELSE BEGIN
                Amount := "Line Amount" - "Inv. Discount Amount";
                "VAT Base Amount" :=
                  ROUND(
                    Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                IF TempVATAmountLine."VAT Base" = 0 THEN
                  TempVATAmountLineRemainder."VAT Amount" := 0
                ELSE
                  TempVATAmountLineRemainder."VAT Amount" :=
                    TempVATAmountLineRemainder."VAT Amount" +
                    TempVATAmountLine."VAT Amount" *
                    ("Line Amount" - "Inv. Discount Amount") /
                    (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
                IF "Line Discount %" <> 100 THEN
                  "Amount Including VAT" :=
                    Amount + ROUND(TempVATAmountLineRemainder."VAT Amount",Currency."Amount Rounding Precision")
                ELSE
                  "Amount Including VAT" := 0;
                TempVATAmountLineRemainder."VAT Amount" :=
                  TempVATAmountLineRemainder."VAT Amount" - "Amount Including VAT" + Amount;
              END;

            TempVATAmountLineRemainder.MODIFY;
          END;
          {
          IF "Deferral Code" <> '' THEN
            CalcDeferralAmounts(SalesHeader,SalesLine,OriginalDeferralAmount);
            }//AJ
        END;
    END;

    PROCEDURE CU80_GetSalesLinesBuffer@1000000030(VAR SalesHeader@1000 : Record 50005;VAR NewSalesLine@1001 : Record 50006;QtyType@1002 : 'General,Invoicing,Shipping');
    VAR
      OldSalesLine@1003 : Record 50006;
      MergedSalesLines@1006 : TEMPORARY Record 50006;
      TotalAdjCostLCY@1005 : Decimal;
    BEGIN
      IF QtyType = QtyType::Invoicing THEN BEGIN
        //CreatePrepaymentLines(SalesHeader,TempPrepaymentSalesLine,FALSE);
        //MergeSaleslines(SalesHeader,OldSalesLine,TempPrepaymentSalesLine,MergedSalesLines);
        CU80_SumSalesLines2Buffer(SalesHeader,NewSalesLine,MergedSalesLines,QtyType,TRUE,FALSE,TotalAdjCostLCY);
      END ELSE
        CU80_SumSalesLines2Buffer(SalesHeader,NewSalesLine,OldSalesLine,QtyType,TRUE,FALSE,TotalAdjCostLCY);
    END;

    LOCAL PROCEDURE CU80_RoundAmountBuffer@1000000029(SalesHeader@1003 : Record 50005;VAR SalesLine@1004 : Record 50006;SalesLineQty@1000 : Decimal);
    VAR
      CurrExchRate@1002 : Record 330;
      NoVAT@1001 : Boolean;
    BEGIN
      WITH SalesLine DO BEGIN
        CU80_IncrAmountBuffer(SalesHeader,SalesLine,TotalSalesLineBuffer);
        CU80_Increment(TotalSalesLineBuffer."Net Weight",ROUND(SalesLineQty * "Net Weight",0.00001));
        CU80_Increment(TotalSalesLineBuffer."Gross Weight",ROUND(SalesLineQty * "Gross Weight",0.00001));
        CU80_Increment(TotalSalesLineBuffer."Unit Volume",ROUND(SalesLineQty * "Unit Volume",0.00001));
        CU80_Increment(TotalSalesLineBuffer.Quantity,SalesLineQty);
        IF "Units per Parcel" > 0 THEN
          CU80_Increment(
            TotalSalesLineBuffer."Units per Parcel",
            ROUND(SalesLineQty / "Units per Parcel",1,'>'));

        xSalesLineBuffer := SalesLine;
        SalesLineACYbuffer := SalesLine;

        IF SalesHeader."Currency Code" <> '' THEN BEGIN
          IF SalesHeader."Posting Date" = 0D THEN
            UseDate := WORKDATE
          ELSE
            UseDate := SalesHeader."Posting Date";

          NoVAT := Amount = "Amount Including VAT";
          "Amount Including VAT" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,SalesHeader."Currency Code",
                TotalSalesLineBuffer."Amount Including VAT",SalesHeader."Currency Factor")) -
            TotalSalesLineLCYBuffer."Amount Including VAT";
          IF NoVAT THEN
            Amount := "Amount Including VAT"
          ELSE
            Amount :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  UseDate,SalesHeader."Currency Code",
                  TotalSalesLineBuffer.Amount,SalesHeader."Currency Factor")) -
              TotalSalesLineLCYBuffer.Amount;
          "Line Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,SalesHeader."Currency Code",
                TotalSalesLineBuffer."Line Amount",SalesHeader."Currency Factor")) -
            TotalSalesLineLCYBuffer."Line Amount";
          "Line Discount Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,SalesHeader."Currency Code",
                TotalSalesLineBuffer."Line Discount Amount",SalesHeader."Currency Factor")) -
            TotalSalesLineLCYBuffer."Line Discount Amount";
          "Inv. Discount Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,SalesHeader."Currency Code",
                TotalSalesLineBuffer."Inv. Discount Amount",SalesHeader."Currency Factor")) -
            TotalSalesLineLCYBuffer."Inv. Discount Amount";
          "VAT Difference" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,SalesHeader."Currency Code",
                TotalSalesLineBuffer."VAT Difference",SalesHeader."Currency Factor")) -
            TotalSalesLineLCYBuffer."VAT Difference";
        END;
        CU80_IncrAmountBuffer(SalesHeader,SalesLine,TotalSalesLineLCYBuffer);
        IF "VAT %" <> 0 THEN
          TotalSalesLineLCYBuffer."VAT %" := "VAT %";
        CU80_Increment(TotalSalesLineLCYBuffer."Unit Cost (LCY)",ROUND(SalesLineQty * "Unit Cost (LCY)"));
        //>>001 TPZ2881
        CU80_Increment(TotalSalesLineLCYBuffer."Average Unit Cost",ROUND(SalesLineQty*"Average Unit Cost"));
        //<<001 TPZ2881
      END;
    END;

    LOCAL PROCEDURE CU80_IncrAmountBuffer@1000000028(SalesHeader@1001 : Record 50005;SalesLine@1002 : Record 50006;VAR TotalSalesLine@1000 : Record 50006);
    BEGIN
      WITH SalesLine DO BEGIN
        IF SalesHeader."Prices Including VAT" OR
           ("VAT Calculation Type" <> "VAT Calculation Type"::"Full VAT")
        THEN
          CU80_Increment(TotalSalesLine."Line Amount","Line Amount");
        CU80_Increment(TotalSalesLine.Amount,Amount);
        CU80_Increment(TotalSalesLine."VAT Base Amount","VAT Base Amount");
        CU80_Increment(TotalSalesLine."VAT Difference","VAT Difference");
        CU80_Increment(TotalSalesLine."Amount Including VAT","Amount Including VAT");
        CU80_Increment(TotalSalesLine."Line Discount Amount","Line Discount Amount");
        CU80_Increment(TotalSalesLine."Inv. Discount Amount","Inv. Discount Amount");
        CU80_Increment(TotalSalesLine."Inv. Disc. Amount to Invoice","Inv. Disc. Amount to Invoice");
        CU80_Increment(TotalSalesLine."Prepmt. Line Amount","Prepmt. Line Amount");
        CU80_Increment(TotalSalesLine."Prepmt. Amt. Inv.","Prepmt. Amt. Inv.");
        CU80_Increment(TotalSalesLine."Prepmt Amt to Deduct","Prepmt Amt to Deduct");
        CU80_Increment(TotalSalesLine."Prepmt Amt Deducted","Prepmt Amt Deducted");
        CU80_Increment(TotalSalesLine."Prepayment VAT Difference","Prepayment VAT Difference");
        CU80_Increment(TotalSalesLine."Prepmt VAT Diff. to Deduct","Prepmt VAT Diff. to Deduct");
        CU80_Increment(TotalSalesLine."Prepmt VAT Diff. Deducted","Prepmt VAT Diff. Deducted");
      END;
    END;

    LOCAL PROCEDURE CU80_GetSalesLineAdjCostLCYBuffer@1000000027(SalesLine2@1000 : Record 50006;QtyType@1002 : 'General,Invoicing,Shipping';AdjCostLCY@1001 : Decimal) : Decimal;
    BEGIN
      WITH SalesLine2 DO BEGIN
        IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
          AdjCostLCY := -AdjCostLCY;

        CASE TRUE OF
          "Shipment No." <> '',"Return Receipt No." <> '':
            EXIT(AdjCostLCY);
          QtyType = QtyType::General:
            EXIT(ROUND("Outstanding Quantity" * "Unit Cost (LCY)") + AdjCostLCY);
          "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]:
            BEGIN
              IF "Qty. to Invoice" > "Qty. to Ship" THEN
                EXIT(ROUND("Qty. to Ship" * "Unit Cost (LCY)") + AdjCostLCY);
              EXIT(ROUND("Qty. to Invoice" * "Unit Cost (LCY)"));
            END;
          IsCreditDocType:
            BEGIN
              IF "Qty. to Invoice" > "Return Qty. to Receive" THEN
                EXIT(ROUND("Return Qty. to Receive" * "Unit Cost (LCY)") + AdjCostLCY);
              EXIT(ROUND("Qty. to Invoice" * "Unit Cost (LCY)"));
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE CU80_Increment@14(VAR Number@1000 : Decimal;Number2@1001 : Decimal);
    BEGIN
      Number := Number + Number2;
    END;

    [EventSubscriber(Codeunit,51803,CU80_RoundAmount)]
    PROCEDURE CU80_RoundAmount@1000000020(VAR Sender@1000000000 : Codeunit 51803;VAR TempSalesLine@1000000001 : Record 37;VAR TempSalesLineLCY@1000000002 : Record 37;AvgUnitCost@1000000003 : Decimal;SalesLineQty@1000000004 : Record 37);
    BEGIN
      //TPZ2881  PSHUKLA
      TempSalesLine."Average Unit Cost" := TempSalesLine."Average Unit Cost" + ROUND(AvgUnitCost * SalesLineQty."Average Unit Cost");
      TempSalesLineLCY."Average Unit Cost" := TempSalesLine."Average Unit Cost";
      //-->TPZ3125
      TempSalesLine."Replacement Cost" := TempSalesLine."Replacement Cost" + ROUND(AvgUnitCost * SalesLineQty."Replacement Cost");
      TempSalesLineLCY."Replacement Cost" := TempSalesLine."Replacement Cost";
      //<--
    END;

    LOCAL PROCEDURE "---"@1000000035();
    BEGIN
    END;

    [EventSubscriber(Codeunit,51803,CU80_PostItemLine)]
    LOCAL PROCEDURE CU80_ItemLinePost@1000000036(VAR Sender@1000000000 : Codeunit 51803;VAR SalesLinePara@1000000001 : Record 37);
    VAR
      ItemLoc@1000000002 : Record 27;
    BEGIN
      IF ItemLoc.GET(SalesLinePara."No.") AND (ItemLoc.Type = ItemLoc.Type::Service) THEN
        SalesLinePara.Type := SalesLinePara.Type::" ";
    END;

    [EventSubscriber(Codeunit,51803,CU80_PostItemLine_1)]
    LOCAL PROCEDURE CU80_ItemLinePost_1@1000000037(VAR Sender@1000000000 : Codeunit 51803;VAR SalesLinePara@1000000001 : Record 37);
    VAR
      ItemLoc@1000000002 : Record 27;
    BEGIN
      IF ItemLoc.GET(SalesLinePara."No.") AND (SalesLinePara.Type = SalesLinePara.Type::" ") THEN
        SalesLinePara.Type := SalesLinePara.Type::Item;
    END;

    LOCAL PROCEDURE CU80_TPZ_SendPackingSlipNotification@1000000038(VAR SalesInvHeader@1000000000 : Record 112;VAR Invoice@1000000001 : Boolean);
    VAR
      LocationInvoice@1000000002 : Record 14;
      JobQueueEntry@1000000003 : Record 472;
      PostDescriptionPackingSlip@1000000004 : TextConst 'ENU=Handle Packing Slip Notification for Shipment %1 - %2';
      EMailListEntry@1000000005 : Record 14000908;
    BEGIN
      //<TPZ3185>
        EMailListEntry.RESET;
        EMailListEntry.SETRANGE("Table ID",DATABASE::"Ship-to Address");
        EMailListEntry.SETRANGE(Code,SalesInvHeader."Sell-to Customer No.");
        EMailListEntry.SETRANGE("Code 2",SalesInvHeader."Ship-to Code");
        EMailListEntry.SETFILTER("Packing List E-Mail",'<>%1',EMailListEntry."Packing List E-Mail"::" ");
        IF NOT EMailListEntry.FINDSET THEN
          EXIT;

          WITH SalesInvHeader DO BEGIN
           IF LocationInvoice.GET("Location Code") THEN BEGIN
             IF Invoice AND  LocationInvoice."Enable DMS" = TRUE THEN BEGIN

              JobQueueEntry.INIT();
              JobQueueEntry."Object Type to Run" := JobQueueEntry."Object Type to Run"::Codeunit;
              JobQueueEntry."Object ID to Run" := CODEUNIT:: "Packing Slip Email Handling";
              JobQueueEntry."Parameter String":= "No.";
              JobQueueEntry.ID:=CREATEGUID;
              JobQueueEntry."Job Queue Category Code" :=  "Order No." ;
              JobQueueEntry."Timeout (sec.)" := 7200;
              JobQueueEntry."Earliest Start Date/Time" := CURRENTDATETIME;

              JobQueueEntry.Description := COPYSTR(STRSUBSTNO(PostDescriptionPackingSlip,"No.","Order No."),1,MAXSTRLEN(JobQueueEntry.Description));
              JobQueueEntry.INSERT(TRUE);
              CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry);
             END;
           END;
          END;
      //</TPZ3185>
    END;

    BEGIN
    {
      001 TPZ2881 PKS 07202020  Added code to update average unit cost per loc
      002 TPZ2909 UTK 07292020 - Last price date modification as per Posting Date in Last Sales Price Table.
      003 TPZ2970 VAH 11252020 - Added code in function CU80_UpdateLastSalesPriceWithSIL
      004 TPZ3124 UTK 03252021 - Commented old code and Added job queue insertion code to send ASN Notification
      004 TPZ3125 PKS 03152021  Added code to function to calculate replacement cost.
      005 TPZ3124 UTK 04142021 - Added condition for IsNasbackGround Client.
      006 TPZ3185 UTK 05282021 Added code to Auto send PAcking list.
    }
    END.
  }
}

