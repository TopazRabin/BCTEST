OBJECT Codeunit 14000901 E-Mail Substitute
{
  OBJECT-PROPERTIES
  {
    Date=06/28/17;
    Time=12:00:00 PM;
    Version List=SE0.60.12.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TotalFieldTmp@1240020000 : TEMPORARY Record 14000906;
      Field@1240020001 : Record 2000000041;
      FieldValue@1240020002 : ARRAY [3] OF Codeunit 14000904;
      Text001@1001 : TextConst 'ENU=No';

    PROCEDURE PaymentTerms_3@3(PaymentTerms@1240020000 : Record 3;RecordNo@1240020001 : Integer);
    BEGIN
      // Payment Terms
      FieldValue[RecordNo + 1].PaymentTerms_3(PaymentTerms);
    END;

    PROCEDURE SalespersonPurchaser_13@13(SalespersonPurchaser@1240020000 : Record 13;RecordNo@1240020001 : Integer);
    BEGIN
      // Salesperson/Purchaser
      FieldValue[RecordNo + 1].SalespersonPurchaser_13(SalespersonPurchaser);
    END;

    PROCEDURE Location_14@14(Location@1240020000 : Record 14;RecordNo@1240020001 : Integer);
    BEGIN
      // Location
      FieldValue[RecordNo + 1].Location_14(Location);
    END;

    PROCEDURE Customer_18@18(Customer@1240020000 : Record 18;RecordNo@1240020001 : Integer);
    BEGIN
      // Customer
      FieldValue[RecordNo + 1].Customer_18(Customer);
    END;

    PROCEDURE CustLedgerEntry_21@21(CustLedgerEntry@1240020000 : Record 21;RecordNo@1240020001 : Integer);
    BEGIN
      // Cust. Ledger Entry
      FieldValue[RecordNo + 1].CustLedgerEntry_21(CustLedgerEntry);
    END;

    PROCEDURE Vendor_23@23(Vendor@1240020000 : Record 23;RecordNo@1240020001 : Integer);
    BEGIN
      // Vendor
      FieldValue[RecordNo + 1].Vendor_23(Vendor);
    END;

    PROCEDURE Item_27@27(Item@1240020000 : Record 27;RecordNo@1240020001 : Integer);
    BEGIN
      // Item
      FieldValue[RecordNo + 1].Item_27(Item);
    END;

    PROCEDURE SalesHeader_36@36(SalesHeader@1240020000 : Record 36;RecordNo@1240020001 : Integer);
    BEGIN
      // Sales Header
      FieldValue[RecordNo + 1].SalesHeader_36(SalesHeader);
    END;

    PROCEDURE SalesLine_37@37(SalesLine@1240020000 : Record 37;RecordNo@1240020001 : Integer);
    BEGIN
      // Sales Line
      FieldValue[RecordNo + 1].SalesLine_37(SalesLine);
    END;

    PROCEDURE PurchaseHeader_38@38(PurchaseHeader@1240020000 : Record 38;RecordNo@1240020001 : Integer);
    BEGIN
      // Purchase Header
      FieldValue[RecordNo + 1].PurchaseHeader_38(PurchaseHeader);
    END;

    PROCEDURE PurchaseLine_39@39(PurchaseLine@1240020000 : Record 39;RecordNo@1240020001 : Integer);
    BEGIN
      // Purchase Line
      FieldValue[RecordNo + 1].PurchaseLine_39(PurchaseLine);
    END;

    PROCEDURE PurchCommentLine_43@43(PurchCommentLine@1240020000 : Record 43;RecordNo@1240020001 : Integer);
    BEGIN
      // Purch. Comment Line
      FieldValue[RecordNo + 1].PurchCommentLine_43(PurchCommentLine);
    END;

    PROCEDURE SalesCommentLine_44@44(SalesCommentLine@1240020000 : Record 44;RecordNo@1240020001 : Integer);
    BEGIN
      // Sales Comment Line
      FieldValue[RecordNo + 1].SalesCommentLine_44(SalesCommentLine);
    END;

    PROCEDURE CompanyInformation_79@79(CompanyInformation@1240020000 : Record 79;RecordNo@1240020001 : Integer);
    BEGIN
      // Company Information
      FieldValue[RecordNo + 1].CompanyInformation_79(CompanyInformation);
    END;

    PROCEDURE CommentLine_97@97(CommentLine@1240020000 : Record 97;RecordNo@1240020001 : Integer);
    BEGIN
      // Comment Line
      FieldValue[RecordNo + 1].CommentLine_97(CommentLine);
    END;

    PROCEDURE SalesShipmentHeader_110@110(SalesShipmentHeader@1240020000 : Record 110;RecordNo@1240020001 : Integer);
    BEGIN
      // Sales Shipment Header
      FieldValue[RecordNo + 1].SalesShipmentHeader_110(SalesShipmentHeader);
    END;

    PROCEDURE SalesShipmentLine_111@111(SalesShipmentLine@1240020000 : Record 111;RecordNo@1240020001 : Integer);
    BEGIN
      // Sales Shipment Line
      FieldValue[RecordNo + 1].SalesShipmentLine_111(SalesShipmentLine);
    END;

    PROCEDURE SalesInvoiceHeader_112@112(SalesInvoiceHeader@1240020000 : Record 112;RecordNo@1240020001 : Integer);
    BEGIN
      // Sales Invoice Header
      FieldValue[RecordNo + 1].SalesInvoiceHeader_112(SalesInvoiceHeader);
    END;

    PROCEDURE SalesInvoiceLine_113@113(SalesInvoiceLine@1240020000 : Record 113;RecordNo@1240020001 : Integer);
    BEGIN
      // Sales Invoice Line
      FieldValue[RecordNo + 1].SalesInvoiceLine_113(SalesInvoiceLine);
    END;

    PROCEDURE SalesCrMemoHeader_114@1000000001(SalesCrMemoHeader@1000000001 : Record 114;RecordNo@1000000000 : Integer);
    BEGIN
      // <TPZ143>
      // Sales Cr. Memo Header
      FieldValue[RecordNo + 1].SalesCrMemoHeader_114(SalesCrMemoHeader);
      // </TPZ143>
    END;

    PROCEDURE SalesCrMemoLine_115@1000000002(SalesCrMemoLine@1000000001 : Record 115;RecordNo@1000000000 : Integer);
    BEGIN
      // <TPZ143>
      // Sales Cr. Memo Line
      FieldValue[RecordNo + 1].SalesCrMemoLine_115(SalesCrMemoLine);
      // </TPZ143>
    END;

    PROCEDURE PurchRcptHeader_120@120(PurchRcptHeader@1240020000 : Record 120;RecordNo@1240020001 : Integer);
    BEGIN
      // Purch. Rcpt. Header
      FieldValue[RecordNo + 1].PurchRcptHeader_120(PurchRcptHeader);
    END;

    PROCEDURE PurchRcptLine_121@121(PurchRcptLine@1240020000 : Record 121;RecordNo@1240020001 : Integer);
    BEGIN
      // Purch. Rcpt. Line
      FieldValue[RecordNo + 1].PurchRcptLine_121(PurchRcptLine);
    END;

    PROCEDURE PurchInvHeader_122@122(PurchInvHeader@1240020000 : Record 122;RecordNo@1240020001 : Integer);
    BEGIN
      // Purch. Inv. Header
      FieldValue[RecordNo + 1].PurchInvHeader_122(PurchInvHeader);
    END;

    PROCEDURE PurchInvLine_123@123(PurchInvLine@1240020000 : Record 123;RecordNo@1240020001 : Integer);
    BEGIN
      // Purch. Inv. Line
      FieldValue[RecordNo + 1].PurchInvLine_123(PurchInvLine);
    END;

    PROCEDURE Resource_156@156(Resource@1240020000 : Record 156;RecordNo@1240020001 : Integer);
    BEGIN
      // Resource
      FieldValue[RecordNo + 1].Resource_156(Resource);
    END;

    PROCEDURE ShiptoAddress_222@222(ShiptoAddress@1240020000 : Record 222;RecordNo@1240020001 : Integer);
    BEGIN
      // Ship-to Address
      FieldValue[RecordNo + 1].ShiptoAddress_222(ShiptoAddress);
    END;

    PROCEDURE OrderAddress_224@224(OrderAddress@1240020000 : Record 224;RecordNo@1240020001 : Integer);
    BEGIN
      // Order Address
      FieldValue[RecordNo + 1].OrderAddress_224(OrderAddress);
    END;

    PROCEDURE ShippingAgent_291@291(ShippingAgent@1240020000 : Record 291;RecordNo@1240020001 : Integer);
    BEGIN
      // Shipping Agent
      FieldValue[RecordNo + 1].ShippingAgent_291(ShippingAgent);
    END;

    PROCEDURE ReminderTerms_292@292(ReminderTerms@1240020000 : Record 292;RecordNo@1240020001 : Integer);
    BEGIN
      // Reminder Terms
      FieldValue[RecordNo + 1].ReminderTerms_292(ReminderTerms);
    END;

    PROCEDURE ReminderLevel_293@293(ReminderLevel@1240020000 : Record 293;RecordNo@1240020001 : Integer);
    BEGIN
      // Reminder Level
      FieldValue[RecordNo + 1].ReminderLevel_293(ReminderLevel);
    END;

    PROCEDURE IssuedReminderHeader_297@297(IssuedReminderHeader@1240020000 : Record 297;RecordNo@1240020001 : Integer);
    BEGIN
      // Issued Reminder Header
      FieldValue[RecordNo + 1].IssuedReminderHeader_297(IssuedReminderHeader);
    END;

    PROCEDURE IssuedReminderLine_298@298(IssuedReminderLine@1240020000 : Record 298;RecordNo@1240020001 : Integer);
    BEGIN
      // Issued Reminder Line
      FieldValue[RecordNo + 1].IssuedReminderLine_298(IssuedReminderLine);
    END;

    PROCEDURE ReminderCommentLine_299@299(ReminderCommentLine@1240020000 : Record 299;RecordNo@1240020001 : Integer);
    BEGIN
      // Reminder Comment Line
      FieldValue[RecordNo + 1].ReminderCommentLine_299(ReminderCommentLine);
    END;

    PROCEDURE IssuedFinChargeMemoHeader_304@304(IssuedFinChargeMemoHeader@1240020000 : Record 304;RecordNo@1240020001 : Integer);
    BEGIN
      // Issued Fin. Charge Memo Header
      FieldValue[RecordNo + 1].IssuedFinChargeMemoHeader_304(IssuedFinChargeMemoHeader);
    END;

    PROCEDURE IssuedFinChargeMemoLine_305@305(IssuedFinChargeMemoLine@1240020000 : Record 305;RecordNo@1240020001 : Integer);
    BEGIN
      // Issued Fin. Charge Memo Line
      FieldValue[RecordNo + 1].IssuedFinChargeMemoLine_305(IssuedFinChargeMemoLine);
    END;

    PROCEDURE FinChargeCommentLine_306@306(FinChargeCommentLine@1240020000 : Record 306;RecordNo@1240020001 : Integer);
    BEGIN
      // Fin. Charge Comment Line
      FieldValue[RecordNo + 1].FinChargeCommentLine_306(FinChargeCommentLine);
    END;

    PROCEDURE Contact_5050@5050(Contact@1240020000 : Record 5050;RecordNo@1240020001 : Integer);
    BEGIN
      // Contact
      FieldValue[RecordNo + 1].Contact_5050(Contact);
    END;

    PROCEDURE MfrRep_50027@1000000000(MfrRep@1000 : Record 50027;RecordNo@1001 : Integer);
    BEGIN
      // <TPZ92>
      // Mfr. Rep.
      FieldValue[RecordNo + 1].MfrRep_50027(MfrRep);
      // </TPZ92>
    END;

    PROCEDURE PostedReceive_14000603@3800603(PostedReceive@1240020000 : Record 14000603;RecordNo@1240020001 : Integer);
    BEGIN
      // Posted Receive
      FieldValue[RecordNo + 1].PostedReceive_14000603(PostedReceive);
    END;

    PROCEDURE PostedReceiveLine_14000604@3800604(PostedReceiveLine@1240020000 : Record 14000604;RecordNo@1240020001 : Integer);
    BEGIN
      // Posted Receive Line
      FieldValue[RecordNo + 1].PostedReceiveLine_14000604(PostedReceiveLine);
    END;

    PROCEDURE Package_14000701@3800701(Package@1240020000 : Record 14000701;RecordNo@1240020001 : Integer);
    BEGIN
      // Package
      FieldValue[RecordNo + 1].Package_14000701(Package);
    END;

    PROCEDURE PackageLine_14000702@3800702(PackageLine@1240020000 : Record 14000702;RecordNo@1240020001 : Integer);
    BEGIN
      // Package Line
      FieldValue[RecordNo + 1].PackageLine_14000702(PackageLine);
    END;

    PROCEDURE PostedPackage_14000704@3800704(PostedPackage@1240020000 : Record 14000704;RecordNo@1240020001 : Integer);
    BEGIN
      // Posted Package
      FieldValue[RecordNo + 1].PostedPackage_14000704(PostedPackage);
    END;

    PROCEDURE PostedPackageLine_14000705@3800705(PostedPackageLine@1240020000 : Record 14000705;RecordNo@1240020001 : Integer);
    BEGIN
      // Posted Package Line
      FieldValue[RecordNo + 1].PostedPackageLine_14000705(PostedPackageLine);
    END;

    PROCEDURE ShippingCommentLine_14000706@3800706(ShippingCommentLine@1240020000 : Record 14000706;RecordNo@1240020001 : Integer);
    BEGIN
      // Shipping Comment Line
      FieldValue[RecordNo + 1].ShippingCommentLine_14000706(ShippingCommentLine);
    END;

    PROCEDURE EShipAgentService_14000708@3800708(EShipAgentService@1240020000 : Record 14000708;RecordNo@1240020001 : Integer);
    BEGIN
      // E-Ship Agent Service
      FieldValue[RecordNo + 1].EShipAgentService_14000708(EShipAgentService);
    END;

    PROCEDURE PackingRule_14000715@3800715(PackingRule@1240020000 : Record 14000715;RecordNo@1240020001 : Integer);
    BEGIN
      // Packing Rule
      FieldValue[RecordNo + 1].PackingRule_14000715(PackingRule);
    END;

    PROCEDURE BillofLading_14000822@3800822(BillofLading@1240020000 : Record 14000822;RecordNo@1240020001 : Integer);
    BEGIN
      // Bill of Lading
      FieldValue[RecordNo + 1].BillofLading_14000822(BillofLading);
    END;

    PROCEDURE BillofLadingLine_14000823@3800823(BillofLadingLine@1240020000 : Record 14000823;RecordNo@1240020001 : Integer);
    BEGIN
      // Bill of Lading Line
      FieldValue[RecordNo + 1].BillofLadingLine_14000823(BillofLadingLine);
    END;

    PROCEDURE BillofLadingType_14000824@3800824(BillofLadingType@1240020000 : Record 14000824;RecordNo@1240020001 : Integer);
    BEGIN
      // Bill of Lading Type
      FieldValue[RecordNo + 1].BillofLadingType_14000824(BillofLadingType);
    END;

    PROCEDURE BillofLadingSummaryLi_14000825@3800825(BillofLadingSummaryLine@1240020000 : Record 14000825;RecordNo@1240020001 : Integer);
    BEGIN
      // Bill of Lading Summary Line
      FieldValue[RecordNo + 1].BillofLadingSummaryLi_14000825(BillofLadingSummaryLine);
    END;

    PROCEDURE BillofLadingStatDetai_14000826@3800826(BillofLadingStatDetail@1240020000 : Record 14000826;RecordNo@1240020001 : Integer);
    BEGIN
      // Bill of Lading Stat. Detail
      FieldValue[RecordNo + 1].BillofLadingStatDetai_14000826(BillofLadingStatDetail);
    END;

    PROCEDURE EMailHeader_14000901@3800901(EMailHeader@1240020000 : Record 14000901;RecordNo@1240020001 : Integer);
    BEGIN
      // E-Mail Header
      FieldValue[RecordNo + 1].EMailHeader_14000901(EMailHeader);
    END;

    PROCEDURE EMailRule_14000907@3800907(EMailRule@1240020000 : Record 14000907;RecordNo@1240020001 : Integer);
    BEGIN
      // E-Mail Rule
      FieldValue[RecordNo + 1].EMailRule_14000907(EMailRule);
    END;

    PROCEDURE EMailListEntry_14000908@3800908(EMailListEntry@1240020000 : Record 14000908;RecordNo@1240020001 : Integer);
    BEGIN
      // E-Mail List Entry
      FieldValue[RecordNo + 1].EMailListEntry_14000908(EMailListEntry);
    END;

    PROCEDURE SubstituteHeader@111121(NewHeader@1240020000 : Record 14000901) : Text[1000];
    BEGIN
      EXIT(SubstituteElements(NewHeader."Subject Text",NewHeader.Code,0,FALSE));
    END;

    PROCEDURE SubstituteLine@111122(NewLine@1240020000 : Record 14000902) : Text[1000];
    BEGIN
      EXIT(
        SubstituteElements(
          NewLine.Text,NewLine."E-Mail Code",NewLine."Line No.",
          NewLine."Skip If All Elements Blank"));
    END;

    PROCEDURE SubstituteAttachment@111124(NewAttachment@1240020000 : Record 14000909) : Text[1000];
    BEGIN
      EXIT(SubstituteElements(
        NewAttachment."Attachment Name",NewAttachment."E-Mail Code",
        -NewAttachment."Line No.",FALSE));
    END;

    LOCAL PROCEDURE SubstituteElements@111123(OriginalText@1240020000 : Text[1000];HeaderCode@1240020001 : Code[10];LineNo@1240020002 : Integer;SkipIfAllElementsBlank@1240020003 : Boolean) : Text[1000];
    VAR
      Element@1240020004 : Record 14000903;
      VirtualField@1240020005 : Codeunit 14000903;
      FormatValue@1240020006 : Codeunit 14000906;
      TextArray@1240020007 : ARRAY [10] OF Text[1000];
      DecimalValue@1240020008 : Decimal;
      IntegerValue@1240020009 : Integer;
    BEGIN
      CLEAR(TextArray);
      CLEAR(Element);

      Element.RESET;
      Element.SETRANGE("E-Mail Code",HeaderCode);
      Element.SETRANGE("Line No.",LineNo);
      Element.SETRANGE("Element No.",1,10);
      IF Element.FIND('-') THEN
        REPEAT
          // Find Value for Element
          IF Element."Virtual Field" <> Element."Virtual Field"::" " THEN BEGIN
            TextArray[Element."Element No."] := VirtualField.GetVirtualField(Element);

            IF Element."Skip Line If Element Blank" THEN
              IF (TextArray[Element."Element No."] = '') OR
                 ((Element."Field Type" IN
                   [Element."Field Type"::Boolean,Element."Field Type"::Integer,
                    Element."Field Type"::Decimal]) AND
                  (TextArray[Element."Element No."] = '0')) OR
                 ((Element."Field Type" = Element."Field Type"::Boolean) AND
                  (TextArray[Element."Element No."] = Text001))
              THEN
                EXIT('');

            IF Element."Skip Line If Element Not Blank" THEN
              CASE Element."Field Type" OF
                Element."Field Type"::Boolean:
                  IF (TextArray[Element."Element No."] <> '0') AND
                     (TextArray[Element."Element No."] <> Text001)
                  THEN
                    EXIT('');
                Element."Field Type"::Integer,Element."Field Type"::Decimal:
                  IF TextArray[Element."Element No."] <> '0' THEN
                    EXIT('');
                ELSE
                  IF TextArray[Element."Element No."] <> '' THEN
                    EXIT('');
              END;
          END ELSE BEGIN
            TextArray[Element."Element No."] :=
              FieldValue[Element."Record No." + 1].GetField(
                Element."Table ID",Element."Field ID",
                Element."Format Length",Element."Format Number",Element."Format String");

            // Handle Totals for Decimal and Integer fields
            IF (Element."Field Type" = Element."Field Type"::Decimal) OR
               (Element."Field Type" = Element."Field Type"::Integer)
            THEN BEGIN
              // Create Total for Element
              IF Element."Create Total" THEN BEGIN
                TotalFieldTmp.INIT;
                TotalFieldTmp."Table ID" := Element."Table ID";
                TotalFieldTmp."Field ID" := Element."Field ID";
                IF Element."Field Type" = Element."Field Type"::Decimal THEN BEGIN
                  TotalFieldTmp."Decimal Field" := TRUE;
                  DecimalValue := FieldValue[Element."Record No." + 1].GetDecimal;
                  TotalFieldTmp."Decimal Value" := DecimalValue;
                END ELSE BEGIN
                  TotalFieldTmp."Decimal Field" := FALSE;
                  IntegerValue := FieldValue[Element."Record No." + 1].GetInteger;
                  TotalFieldTmp."Integer Value" := IntegerValue;
                END;

                IF NOT TotalFieldTmp.INSERT THEN BEGIN
                  TotalFieldTmp.FIND;
                  IF TotalFieldTmp."Decimal Field" THEN
                    TotalFieldTmp."Decimal Value" :=
                      TotalFieldTmp."Decimal Value" + DecimalValue
                  ELSE
                    TotalFieldTmp."Integer Value" :=
                      TotalFieldTmp."Integer Value" + IntegerValue;
                  TotalFieldTmp.MODIFY;
                END;
              END;

              // Clear the Total Field
              IF Element."Clear Total" THEN BEGIN
                TotalFieldTmp.INIT;
                TotalFieldTmp."Table ID" := Element."Table ID";
                TotalFieldTmp."Field ID" := Element."Field ID";
                IF NOT TotalFieldTmp.DELETE THEN ;
              END;

              // Show the total field
              IF Element."Show Total" THEN BEGIN
                IF NOT TotalFieldTmp.GET(Element."Table ID",Element."Field ID") THEN BEGIN
                  TotalFieldTmp.INIT;
                  IF Element."Field Type" = Element."Field Type"::Decimal THEN
                    TotalFieldTmp."Decimal Field" := TRUE;
                END;

                IF TotalFieldTmp."Decimal Field" THEN
                  TextArray[Element."Element No."] :=
                    FormatValue.FormatDecimal(
                      TotalFieldTmp."Decimal Value",
                      Element."Format Length",Element."Format Number",
                      Element."Format String")
                ELSE
                  TextArray[Element."Element No."] :=
                    FormatValue.FormatInteger(
                      TotalFieldTmp."Integer Value",
                      Element."Format Length",Element."Format Number",
                      Element."Format String");
              END;
            END;

            IF Element."Skip Line If Element Blank" THEN
              IF (TextArray[Element."Element No."] = '') OR
                 ((Element."Field Type" IN
                   [Element."Field Type"::Boolean,Element."Field Type"::Integer,
                    Element."Field Type"::Decimal]) AND
                  (TextArray[Element."Element No."] = '0')) OR
                 ((Element."Field Type" = Element."Field Type"::Boolean) AND
                  (TextArray[Element."Element No."] = Text001))
              THEN
                EXIT('');
            IF Element."Skip Line If Element Not Blank" THEN
              CASE Element."Field Type" OF
                Element."Field Type"::Boolean:
                  IF (TextArray[Element."Element No."] <> '0') AND
                     (TextArray[Element."Element No."] <> Text001)
                  THEN
                    EXIT('');
                Element."Field Type"::Integer,Element."Field Type"::Decimal:
                  IF TextArray[Element."Element No."] <> '0' THEN
                    EXIT('');
                ELSE
                  IF TextArray[Element."Element No."] <> '' THEN
                    EXIT('');
              END;
          END;

          IF Element."Pre Substitution" THEN
            TextArray[Element."Element No."] :=
              STRSUBSTNO(
                TextArray[Element."Element No."],
                TextArray[1],TextArray[2],TextArray[3],TextArray[4],TextArray[5],
                TextArray[6],TextArray[7],TextArray[8],TextArray[9]);

        UNTIL Element.NEXT = 0;

      // Substitute Values
      IF (TextArray[1] = '') AND (TextArray[2] = '') AND (TextArray[3] = '') AND
         (TextArray[4] = '') AND (TextArray[5] = '') AND (TextArray[6] = '') AND
         (TextArray[7] = '') AND (TextArray[8] = '') AND (TextArray[9] = '') AND
         (TextArray[10] = '') AND SkipIfAllElementsBlank
      THEN
        EXIT('')
      ELSE
        CASE TRUE OF
          Element."Element No." = 10:
            EXIT(
              STRSUBSTNO(
                OriginalText,
                TextArray[1],TextArray[2],TextArray[3],TextArray[4],TextArray[5],
                TextArray[6],TextArray[7],TextArray[8],TextArray[9],TextArray[10]));
          Element."Element No." = 9:
            EXIT(
              STRSUBSTNO(
                OriginalText,
                TextArray[1],TextArray[2],TextArray[3],TextArray[4],TextArray[5],
                TextArray[6],TextArray[7],TextArray[8],TextArray[9]));
          Element."Element No." = 8:
            EXIT(
              STRSUBSTNO(
                OriginalText,
                TextArray[1],TextArray[2],TextArray[3],TextArray[4],TextArray[5],
                TextArray[6],TextArray[7],TextArray[8]));
          Element."Element No." = 7:
            EXIT(
              STRSUBSTNO(
                OriginalText,
                TextArray[1],TextArray[2],TextArray[3],TextArray[4],TextArray[5],
                TextArray[6],TextArray[7]));
          Element."Element No." = 6:
            EXIT(
              STRSUBSTNO(
                OriginalText,
                TextArray[1],TextArray[2],TextArray[3],TextArray[4],TextArray[5],
                TextArray[6]));
          Element."Element No." = 5:
            EXIT(
              STRSUBSTNO(
                OriginalText,
                TextArray[1],TextArray[2],TextArray[3],TextArray[4],TextArray[5]));
          Element."Element No." = 4:
            EXIT(
              STRSUBSTNO(OriginalText,TextArray[1],TextArray[2],TextArray[3],TextArray[4]));
          Element."Element No." = 3:
            EXIT(STRSUBSTNO(OriginalText,TextArray[1],TextArray[2],TextArray[3]));
          Element."Element No." = 2:
            EXIT(STRSUBSTNO(OriginalText,TextArray[1],TextArray[2]));
          Element."Element No." = 1:
            EXIT(STRSUBSTNO(OriginalText,TextArray[1]));
          ELSE
            EXIT(OriginalText);
      END;
    END;

    PROCEDURE GetMaxRecordNo@111125() : Integer;
    BEGIN
      EXIT(2);
    END;

    BEGIN
    {
      2015-06-11 TPZ92 TAKHMETO
        MfrRep_50027 function has been added
      2015-08-25 TPZ143 TAKHMETO
        SalesCrMemoHeader_114 and SalesCrMemoLine_115 functions have been created
      2017-07-13 TPZ1951 DKUMAR
        Fixed - PO Confirmation Email - PO No. is missing in attachment file name.
    }
    END.
  }
}

