OBJECT Codeunit 14002977 RF Pallet Bin Content Card
{
  OBJECT-PROPERTIES
  {
    Date=07/17/17;
    Time=12:00:00 PM;
    Version List=RF1.50.09;
  }
  PROPERTIES
  {
    TableNo=7700;
    OnRun=VAR
            MiniformMgmt@1240020000 : Codeunit 7702;
          BEGIN
            MiniformMgmt.Initialize(
              MiniformHeader,Rec,DOMxmlin,ReturnedNode,
              RootNode,XMLDOMMgmt,ADCSCommunication,LoginID,
              CurrentCode,StackCode,WhseEmpId,LocationFilter);

            IF Code <> CurrentCode THEN
              PrepareData
            ELSE
              ProcessInput;

            CLEAR(DOMxmlin);
          END;

  }
  CODE
  {
    VAR
      MiniformHeader@1240020014 : Record 7700;
      RFEmployeeSetup@1240020013 : Record 14002802;
      XMLDOMMgmt@1240020012 : Codeunit 6224;
      ADCSCommunication@1240020011 : Codeunit 7701;
      ADCSNasStartup@1240020010 : Codeunit 7700;
      DOMxmlin@1240020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ReturnedNode@1240020007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      RootNode@1240020006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Remark@1240020005 : Text[250];
      LoginID@1240020009 : Text[250];
      WhseEmpId@1240020021 : Text[250];
      LocationFilter@1240020004 : Text[250];
      CurrentCode@1240020003 : Text[250];
      StackCode@1240020002 : Text[250];
      ActiveInputField@1240020001 : Integer;
      RecRef@1240020000 : RecordRef;
      Text001@1240020020 : TextConst 'ENU=Unknown function %1';
      Text006@1240020019 : TextConst 'ENU=No input Node found';
      Text007@1240020018 : TextConst 'ENU=Record not found';
      Text008@1240020017 : TextConst 'ENU=End of Document';
      Text012@1240020016 : TextConst 'ENU=No Lines available';
      Text013@1240020015 : TextConst 'ENU=Picks exists';

    PROCEDURE ProcessInput@1240020000();
    VAR
      MiniformLine@1240020022 : Record 7701;
      BinContent2@1240020021 : Record 7302;
      Bin@1240020020 : Record 7354;
      BinContent@1240020019 : Record 7302;
      FuncGroup@1240020018 : Record 7702;
      ItemIdentifier@1240020017 : Record 7704;
      RFEmployeeMenuFilter@1240020016 : Record 14002806;
      DynamicMoveLine@1240020015 : Record 14002872;
      MiniformHeader2@1240020014 : Record 7700;
      WarehouseEntry@1240020013 : Record 7312;
      WarehouseEntry2@1240020012 : Record 7312;
      Item@1240020011 : Record 27;
      ItemTrackingCode@1240020010 : Record 6502;
      RFSetup@1240020009 : Record 14002801;
      RFDynamicMgt@1240020008 : Codeunit 14002882;
      ReturnedNode2@1240020007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FieldID@1240020005 : Text[250];
      TextValue@1240020004 : Text[250];
      TableNo@1240020003 : Integer;
      RecordId@1240020002 : RecordID;
      FldNo@1240020001 : Integer;
      Command@1240020000 : Code[10];
    BEGIN
      IF XMLDOMMgmt.FindNode(RootNode,'Header/Input',ReturnedNode) THEN
        TextValue := ReturnedNode.InnerText
      ELSE
        ERROR(Text006);

      XMLDOMMgmt.FindNode(RootNode,'ExtraInfo',ReturnedNode2);
      Bin.Code := ADCSCommunication.GetNodeAttribute(ReturnedNode2,'BinCode');
      ItemIdentifier."Item No." := ADCSCommunication.GetNodeAttribute(ReturnedNode2,'ItemNo');
      ItemIdentifier."Variant Code" := ADCSCommunication.GetNodeAttribute(ReturnedNode2,'Variant');
      ItemIdentifier."Unit of Measure Code" := ADCSCommunication.GetNodeAttribute(ReturnedNode2,'UOM');
      DynamicMoveLine.Name := ADCSCommunication.GetNodeAttribute(ReturnedNode2,'Name');
      DynamicMoveLine."Location Code" := ADCSCommunication.GetNodeAttribute(ReturnedNode2,'Location');
      EVALUATE(
        DynamicMoveLine."Line No.",ADCSCommunication.GetNodeAttribute(ReturnedNode2,'LineNo'));
      DynamicMoveLine."From Zone Code" := ADCSCommunication.GetNodeAttribute(ReturnedNode2,'FromZone');
      DynamicMoveLine."From Bin Code" := ADCSCommunication.GetNodeAttribute(ReturnedNode2,'FromBin');

      ADCSCommunication.SetExtraValue('BinCode',Bin.Code);
      ADCSCommunication.SetExtraValue('ItemNo',ItemIdentifier."Item No.");
      ADCSCommunication.SetExtraValue('Variant',ItemIdentifier."Variant Code");
      ADCSCommunication.SetExtraValue('UOM',ItemIdentifier."Unit of Measure Code");
      ADCSCommunication.SetExtraValue('Name',DynamicMoveLine.Name);
      ADCSCommunication.SetExtraValue('Location',DynamicMoveLine."Location Code");
      ADCSCommunication.SetExtraValue('LineNo',FORMAT(DynamicMoveLine."Line No."));
      ADCSCommunication.SetExtraValue('FromZone',DynamicMoveLine."From Zone Code");
      ADCSCommunication.SetExtraValue('FromBin',DynamicMoveLine."From Bin Code");

      EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'));
      RecRef.OPEN(TableNo);
      EVALUATE(RecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'));
      IF RecRef.GET(RecordId) THEN BEGIN
        RecRef.SETTABLE(BinContent);
        BinContent.RESET;
        BinContent.SETFILTER("Location Code",LocationFilter);
        IF ItemIdentifier."Item No." <> '' THEN BEGIN
          BinContent.SETRANGE("Item No.",ItemIdentifier."Item No.");
          IF ItemIdentifier."Variant Code" <> '' THEN
            BinContent.SETRANGE("Variant Code",ItemIdentifier."Variant Code");
          IF ItemIdentifier."Unit of Measure Code" <> '' THEN
            BinContent.SETRANGE("Unit of Measure Code",ItemIdentifier."Unit of Measure Code");
        END ELSE
          BinContent.SETRANGE("Bin Code",BinContent."Bin Code");
        RecRef.GETTABLE(BinContent);
        ADCSCommunication.SetRecRef(RecRef);
      END ELSE BEGIN
        ADCSCommunication.RunPreviousMiniform(DOMxmlin);
        EXIT;
      END;

      FuncGroup.KeyDef := ADCSCommunication.GetFunctionKey(MiniformHeader.Code,TextValue);
      ActiveInputField := 1;

      CASE FuncGroup.KeyDef OF
        FuncGroup.KeyDef::Esc:
          ADCSCommunication.RunPreviousMiniform(DOMxmlin);
        FuncGroup.KeyDef::First:
          ADCSCommunication.FindRecRef(0,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::LnDn:
          IF NOT ADCSCommunication.FindRecRef(1,MiniformHeader."No. of Records in List") THEN
            Remark := Text008;
        FuncGroup.KeyDef::LnUp:
          ADCSCommunication.FindRecRef(2,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::Last:
          ADCSCommunication.FindRecRef(3,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::PgDn:
          IF NOT ADCSCommunication.FindRecRef(4,MiniformHeader."No. of Records in List") THEN
            Remark := Text008;
        FuncGroup.KeyDef::PgUp:
          ADCSCommunication.FindRecRef(5,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::Reset:
          BEGIN
            RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
            IF RFEmployeeSetup."Local Menu Button" IN
               [RFEmployeeSetup."Local Menu Button"::F4,
                RFEmployeeSetup."Local Menu Button"::"F4 (F3 Post)"]
            THEN BEGIN
              MiniformHeader.TESTFIELD("Local Menu Miniform Code");
              ADCSCommunication.SetExtraValue('PrimaryMiniForm',MiniformHeader.Code);
              MiniformHeader.GET(MiniformHeader."Local Menu Miniform Code");
              IF RFEmployeeMenuFilter.GET(
                   RFEmployeeSetup.Code,MiniformHeader.Code)
              THEN
                ADCSCommunication.SetRFFunctionFilter(
                  RFEmployeeMenuFilter."RF Function Filter");
              ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,1,'',LoginID);
              ADCSCommunication.GetReturnXML(DOMxmlin);
              ADCSNasStartup.SendXMLReply(DOMxmlin);

              EXIT;
            END;
          END;
        FuncGroup.KeyDef::Register:
          BEGIN
            RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
            IF RFEmployeeSetup."Local Menu Button" IN [RFEmployeeSetup."Local Menu Button"::F3]
            THEN BEGIN
              MiniformHeader.TESTFIELD("Local Menu Miniform Code");
              ADCSCommunication.SetExtraValue('PrimaryMiniForm',MiniformHeader.Code);
              MiniformHeader.GET(MiniformHeader."Local Menu Miniform Code");
              IF RFEmployeeMenuFilter.GET(
                   RFEmployeeSetup.Code,MiniformHeader.Code)
              THEN
                ADCSCommunication.SetRFFunctionFilter(
                  RFEmployeeMenuFilter."RF Function Filter");
              ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,1,'',LoginID);
              ADCSCommunication.GetReturnXML(DOMxmlin);
              ADCSNasStartup.SendXMLReply(DOMxmlin);

              EXIT;
            END;
          END;
        FuncGroup.KeyDef::Input:
          BEGIN
            FieldID := ADCSCommunication.GetNodeAttribute(ReturnedNode,'FieldID');
            Command := '';
            IF STRLEN(TextValue) >= 3 THEN
              IF COPYSTR(TextValue,1,2) = '//' THEN
                Command := COPYSTR(TextValue,3,MAXSTRLEN(Command));
            IF (FieldID = '') OR (Command <> '') THEN BEGIN
              RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);

              IF Command <> '' THEN BEGIN
                MiniformLine.RESET;
                MiniformLine.SETRANGE("Miniform Code",MiniformHeader."Local Menu Miniform Code");
                MiniformLine.SETRANGE(Hide,FALSE);
                IF RFEmployeeMenuFilter.GET(
                     RFEmployeeSetup.Code,MiniformHeader."Local Menu Miniform Code")
                THEN
                  MiniformLine.SETFILTER("RF Function No.",RFEmployeeMenuFilter."RF Function Filter");
                MiniformLine.SETRANGE(MiniformLine."Command Text",Command);
                MiniformLine.FIND('-');
              END ELSE BEGIN
                MiniformLine.RESET;
                MiniformLine.SETRANGE("Miniform Code",MiniformHeader.Code);
                MiniformLine.SETRANGE(Hide,FALSE);
                IF RFEmployeeMenuFilter.GET(RFEmployeeSetup.Code,MiniformHeader.Code) THEN
                  MiniformLine.SETFILTER("RF Function No.",RFEmployeeMenuFilter."RF Function Filter");
                MiniformLine.SETRANGE(Text,ReturnedNode.InnerText);
                MiniformLine.FIND('-');
                XMLDOMMgmt.FindNode(RootNode,'ExtraInfo',ReturnedNode2);
                MiniformHeader.Code :=
                  ADCSCommunication.GetNodeAttribute(ReturnedNode2,'PrimaryMiniForm');
                MiniformHeader.GET(MiniformHeader.Code);
              END;
              CASE MiniformLine."RF Function No." OF
                0: // Escape or Return
                  ;
                1,2,3: // Create Physical Inventory
                  BEGIN
                  END;
                4,5: // Move Bin/Item
                  BEGIN
                    BinContent2.RESET;
                    BinContent2.SETRANGE("Location Code",BinContent."Location Code");
                    BinContent2.SETRANGE("Bin Code",BinContent."Bin Code");
                    IF MiniformLine."RF Function No." = 5 THEN BEGIN
                      BinContent2.SETRANGE("Item No.",BinContent."Item No.");
                      BinContent2.SETRANGE("Variant Code",BinContent."Variant Code");
                      BinContent2.SETRANGE("Unit of Measure Code",BinContent."Unit of Measure Code");
                    END;
                    IF BinContent2.FIND('-') THEN
                      REPEAT
                        BinContent2.CALCFIELDS(Quantity,"Pick Qty.","Neg. Adjmt. Qty.");
                        IF (BinContent2."Pick Qty." <> 0) OR (BinContent2."Neg. Adjmt. Qty." <> 0) THEN
                          Remark := Text013;

                        DynamicMoveLine."Line No." := DynamicMoveLine."Line No." + 1;
                        DynamicMoveLine."Item No." := BinContent2."Item No.";
                        DynamicMoveLine."Variant Code" := BinContent2."Variant Code";
                        DynamicMoveLine."Unit of Measure Code" := BinContent2."Unit of Measure Code";
                        DynamicMoveLine."First Scan Date" := TODAY;
                        DynamicMoveLine."First Scan Time" := TIME;
                        DynamicMoveLine."Last Scan Date" := TODAY;
                        DynamicMoveLine."Last Scan Time" := TIME;
                        DynamicMoveLine."Warehouse Employee Code" := WhseEmpId;

                        CLEAR(ItemTrackingCode);
                        IF Item.GET(DynamicMoveLine."Item No.") THEN
                          IF Item."Item Tracking Code" <> '' THEN
                            IF ItemTrackingCode.GET(Item."Item Tracking Code") THEN
                              ;

                        IF ItemTrackingCode."SN Warehouse Tracking" OR
                           ItemTrackingCode."Lot Warehouse Tracking"
                        THEN BEGIN
                          WarehouseEntry.RESET;
                          WarehouseEntry.SETCURRENTKEY(
                            "Item No.","Bin Code","Location Code","Variant Code",
                            "Unit of Measure Code","Lot No.","Serial No.","Entry Type");
                          WarehouseEntry.SETRANGE("Location Code",BinContent2."Location Code");
                          WarehouseEntry.SETRANGE("Bin Code",BinContent2."Bin Code");
                          WarehouseEntry.SETRANGE("Item No.",BinContent2."Item No.");
                          WarehouseEntry.SETRANGE("Variant Code",BinContent2."Variant Code");
                          WarehouseEntry.SETRANGE(
                            "Unit of Measure Code",BinContent2."Unit of Measure Code");
                          WarehouseEntry.FIND('-');
                          REPEAT
                            IF NOT ItemTrackingCode."SN Warehouse Tracking" THEN BEGIN
                              WarehouseEntry2.RESET;
                              WarehouseEntry.SETCURRENTKEY(
                                "Item No.","Bin Code","Location Code","Variant Code",
                                "Unit of Measure Code","Lot No.","Serial No.","Entry Type");
                              WarehouseEntry2.COPYFILTERS(WarehouseEntry);
                              WarehouseEntry2.SETRANGE("Lot No.",WarehouseEntry."Lot No.");
                              WarehouseEntry2 := WarehouseEntry;
                              WarehouseEntry.Quantity := 0;
                              REPEAT
                                WarehouseEntry.Quantity :=
                                  WarehouseEntry.Quantity + WarehouseEntry2.Quantity;
                              UNTIL WarehouseEntry2.NEXT = 0;
                              WarehouseEntry.SETFILTER("Lot No.",'>%1',WarehouseEntry."Lot No.");
                            END;

                            IF WarehouseEntry.Quantity > 0 THEN BEGIN
                              DynamicMoveLine."Serial No." := WarehouseEntry."Serial No.";
                              DynamicMoveLine."Lot No." := WarehouseEntry."Lot No.";
                              DynamicMoveLine.Quantity := WarehouseEntry.Quantity;
                              DynamicMoveLine.INSERT;

                              DynamicMoveLine."Line No." := DynamicMoveLine."Line No." + 1;
                            END;
                          UNTIL WarehouseEntry.NEXT = 0;
                        END ELSE BEGIN
                          DynamicMoveLine."Serial No." := '';
                          DynamicMoveLine."Lot No." := '';
                          DynamicMoveLine.Quantity := BinContent2.Quantity;
                          DynamicMoveLine.INSERT;
                        END;
                      UNTIL BinContent2.NEXT = 0;

                    IF Remark = '' THEN BEGIN
                      MiniformLine.TESTFIELD("Call Miniform");
                      MiniformHeader2.GET(MiniformLine."Call Miniform");
                      MiniformHeader2.SaveXMLin(DOMxmlin);
                      CODEUNIT.RUN(MiniformHeader2."Handling Codeunit",MiniformHeader2);
                      EXIT;
                    END ELSE BEGIN
                      DynamicMoveLine.RESET;
                      DynamicMoveLine.SETRANGE(Name,DynamicMoveLine.Name);
                      DynamicMoveLine.SETRANGE("Location Code",DynamicMoveLine."Location Code");
                      DynamicMoveLine.DELETEALL;
                    END;
                  END;
                6: // Create Replenishment
                  BEGIN
                    RFSetup.GET;
                    RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
                    BinContent2 := BinContent;
                    BinContent2.SETRANGE("Location Code",BinContent."Location Code");
                    BinContent2.SETRANGE("Bin Code",BinContent."Bin Code");
                    Remark :=
                      RFDynamicMgt.CreateReplenishment(
                        BinContent2,RFEmployeeSetup,RFSetup,BinContent2."Location Code",
                        BinContent2."Bin Code");
                  END;
                ELSE
                  Remark := STRSUBSTNO(Text001,MiniformLine."RF Function No.");
              END;
            END ELSE BEGIN
              EVALUATE(FldNo,FieldID);
              CASE FldNo OF
                ELSE BEGIN
                  ADCSCommunication.FieldSetvalue(RecRef,FldNo,TextValue);
                  RecRef.SETTABLE(BinContent);
                END;
              END;
            END;
          END;
      END;

      ADCSCommunication.SetRFGroupFilter(GetRFGroupFilter(BinContent));
      ADCSCommunication.SetExtraValue('FromCard','Yes');
      IF NOT (FuncGroup.KeyDef IN [FuncGroup.KeyDef::Esc]) THEN
        SendForm(ActiveInputField);
    END;

    PROCEDURE PrepareData@1240020001();
    VAR
      BinContent@1240020007 : Record 7302;
      ItemIdentifier@1240020006 : Record 7704;
      Bin@1240020005 : Record 7354;
      DynamicMoveLine@1240020004 : Record 14002872;
      ReturnedNode2@1240020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TableNo@1240020002 : Integer;
      RecordId@1240020001 : RecordID;
      BatchName@1240020000 : Code[20];
    BEGIN
      XMLDOMMgmt.FindNode(RootNode,'Header/Input',ReturnedNode);

      XMLDOMMgmt.FindNode(RootNode,'ExtraInfo',ReturnedNode2);
      Bin.Code := ADCSCommunication.GetNodeAttribute(ReturnedNode2,'BinCode');
      ItemIdentifier."Item No." := ADCSCommunication.GetNodeAttribute(ReturnedNode2,'ItemNo');
      ItemIdentifier."Variant Code" := ADCSCommunication.GetNodeAttribute(ReturnedNode2,'Variant');
      ItemIdentifier."Unit of Measure Code" := ADCSCommunication.GetNodeAttribute(ReturnedNode2,'UOM');

      EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'));
      RecRef.OPEN(TableNo);
      EVALUATE(RecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'));
      IF RecRef.GET(RecordId) THEN BEGIN
        RecRef.SETTABLE(BinContent);
        IF NOT BinContent.FIND THEN BEGIN
          ADCSNasStartup.SendError(Text012);
          EXIT;
        END;
        BinContent.RESET;
        BinContent.SETFILTER("Location Code",LocationFilter);
        IF ItemIdentifier."Item No." <> '' THEN BEGIN
          BinContent.SETRANGE("Item No.",ItemIdentifier."Item No.");
          IF ItemIdentifier."Variant Code" <> '' THEN
            BinContent.SETRANGE("Variant Code",ItemIdentifier."Variant Code");
          IF ItemIdentifier."Unit of Measure Code" <> '' THEN
            BinContent.SETRANGE("Unit of Measure Code",ItemIdentifier."Unit of Measure Code");
        END ELSE
          BinContent.SETRANGE("Bin Code",BinContent."Bin Code");

        BatchName := COPYSTR(WhseEmpId,1,5) + '1';
        DynamicMoveLine.RESET;
        DynamicMoveLine.SETRANGE(Name,BatchName);
        WHILE DynamicMoveLine.FIND('-') DO BEGIN
          BatchName := INCSTR(BatchName);
          DynamicMoveLine.SETRANGE(Name,BatchName);
        END;

        DynamicMoveLine.Name := BatchName;
        DynamicMoveLine."Location Code" := BinContent."Location Code";
        DynamicMoveLine."Line No." := 1;
        DynamicMoveLine."From Zone Code" := BinContent."Zone Code";
        DynamicMoveLine."From Bin Code" := BinContent."Bin Code";

        ADCSCommunication.SetExtraValue('BinCode',Bin.Code);
        ADCSCommunication.SetExtraValue('ItemNo',ItemIdentifier."Item No.");
        ADCSCommunication.SetExtraValue('Variant',ItemIdentifier."Variant Code");
        ADCSCommunication.SetExtraValue('UOM',ItemIdentifier."Unit of Measure Code");
        ADCSCommunication.SetExtraValue('Name',DynamicMoveLine.Name);
        ADCSCommunication.SetExtraValue('Location',DynamicMoveLine."Location Code");
        ADCSCommunication.SetExtraValue('LineNo',FORMAT(DynamicMoveLine."Line No."));
        ADCSCommunication.SetExtraValue('FromZone',DynamicMoveLine."From Zone Code");
        ADCSCommunication.SetExtraValue('FromBin',DynamicMoveLine."From Bin Code");

        RecRef.GETTABLE(BinContent);
        ADCSCommunication.SetRecRef(RecRef);
        ADCSCommunication.SetRFGroupFilter(GetRFGroupFilter(BinContent));
        ActiveInputField := 1;
        ADCSCommunication.SetExtraValue('FromCard','Yes');
        SendForm(ActiveInputField);
      END ELSE
        ERROR(Text007);
    END;

    PROCEDURE SendForm@1240020002(InputField@1240020000 : Integer);
    BEGIN
      // Prepare Miniform
      ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,InputField,Remark,LoginID);
      ADCSCommunication.GetReturnXML(DOMxmlin);
      ADCSNasStartup.SendXMLReply(DOMxmlin);
    END;

    PROCEDURE GetRFGroupFilter@1240020003(BinContent@1240020000 : Record 7302) : Text[30];
    VAR
      RFGroupFilter@1240020001 : Text[30];
    BEGIN
      RFGroupFilter :=  '0';
      IF BinContent."Variant Code" <> '' THEN
        RFGroupFilter := RFGroupFilter + '|1';
      IF BinContent.Fixed AND (BinContent."Min. Qty." > 0) THEN
        RFGroupFilter := RFGroupFilter + '|2';

      EXIT(RFGroupFilter);
    END;

    EVENT DOMxmlin@1240020008::NodeInserting@93(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020008::NodeInserted@94(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020008::NodeRemoving@95(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020008::NodeRemoved@96(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020008::NodeChanging@97(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020008::NodeChanged@98(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

