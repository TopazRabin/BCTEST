OBJECT Codeunit 14098053 DP Setup Mgt
{
  OBJECT-PROPERTIES
  {
    Date=11/04/20;
    Time=[ 6:21:13 AM];
    Modified=Yes;
    Version List=UBP3.02;
  }
  PROPERTIES
  {
    TableNo=14097491;
    OnRun=BEGIN
            IF NOT Rec.Completed THEN
              RunJobType(Rec);
          END;

  }
  CODE
  {
    VAR
      JobType@1045 : Integer;
      Txt001@1000 : TextConst 'ENU=Package was not imported';
      Txt002@1001 : TextConst 'ENU=Excel data was not imported';
      Txt003@1002 : TextConst 'ENU=Formulas are not in the database!';
      Txt004@1003 : TextConst 'ENU=Formula Period Details are not in the database!';
      Txt005@1240020000 : TextConst 'ENU=%1 %2 - Parameters are missing to install automatically!';
      Txt006@1240020001 : TextConst 'ENU=Inventory Management Record Not Found!';
      Txt007@1240020002 : TextConst 'ENU=Forecast Inventory Periods Not Found!';
      Txt008@1240020003 : TextConst 'ENU=Forecast Inventory Periods and Usage start do not match.  Please check!';
      Txt009@1240020004 : TextConst 'ENU=Could not find Package %1 to import Excel Data!';
      InvMgtSetup@1240020005 : Record 14000551;
      AdvForcSetup@1240020006 : Record 14002651;
      AFPProdSetup@1240020007 : Record 14002675;
      GlobalPeriodLength@1240020009 : Code[20];

    PROCEDURE RunJobType@7(VAR AFPProcess@1000 : Record 14097491) ErrorFound : Boolean;
    BEGIN
      ErrorFound := FALSE;
      CASE AFPProcess."Process No." OF
        0:
        BEGIN
          // process all
          ConfigureProcessEntries;
        END;
        10:
        BEGIN
          // a field from adv forecasting setup is used to determine seasonal group so this must be inserted first
          // this requirement will be removed in the future
          IF NOT AdvForcSetup.GET() THEN BEGIN
              AdvForcSetup.SetFirstTimeAutoInstallOverride();
              AdvForcSetup.SetInitialValues();
              AdvForcSetup.INSERT(TRUE);
          END;
          // Create Formulas
          CreateFormulas;
        END;
        50:
        BEGIN
          RunForecastPeriodCreation(AFPProcess);
        END;
        70:
        BEGIN
          // Create Number Series
          CreateNoSeries;
        END;
        72:
        BEGIN
          // Create Item Ranking
          CreateItemRankings;
        END;
        73:
        BEGIN
          // Create Item Class
          CreateItemClasses;
        END;
        76:
        BEGIN
          // Create Stocking Rule
          CreateStockingRules;
        END;
        77:
        BEGIN
          CreateSporadicRules;
        END;
        78:
        BEGIN
          CreateTargetServiceLevel;
        END;
        79:
        BEGIN
          CreateInTransitLocation;
        END;
        85:
        BEGIN
          CreateInvMgtSetup;
        END;
        86:
        BEGIN
          CreateAdvForcSetup;
        END;
        90:
        BEGIN
          CreateDefaultProductionSetup;
        END;
        95:
        BEGIN
          CreateAlertSetup;
        END;
        100:
        BEGIN
          ImportPackage(AFPProcess);
        END;
        101:
        BEGIN
          ImportExcelDataToPackage(AFPProcess);
        END;
        102:
        BEGIN
          ApplyPackageData(AFPProcess);
        END;
        110:
        BEGIN
          ImportPackage(AFPProcess);
        END;
        111:
        BEGIN
          ImportExcelDataToPackage(AFPProcess);
        END;
        112:
        BEGIN
          ApplyPackageData(AFPProcess);
        END;
        120:
        BEGIN
          ReleaseAllFormulas;
        END;
        129:
        BEGIN
          // AddDPUserGroups();
        END;
        130:
        BEGIN
          ConfigureAFPProfile;
        END;
        131:
        BEGIN
          CreateJobQueueEntry;
        END;
        133:
        BEGIN
          SetUsageStartDate;
        END;
        150:
        BEGIN
          ProcessHistoricalData(AFPProcess);
        END;
        500:
        BEGIN
         RunPeriodEndProcess;
        END;
        60:
        BEGIN
        END;
        999:
        BEGIN
          DeleteData;
        END;
      END;
    END;

    LOCAL PROCEDURE RunForecastPeriodCreation@16(VAR AFPProcess@1240020000 : Record 14097491);
    VAR
      CreateForecastInvPeriodRpt@1240020001 : Report 14000552;
    BEGIN
      IF InvMgtSetup.GET THEN;

      IF (InvMgtSetup."Usage Start Date" > 0D) AND GUIALLOWED THEN BEGIN
        CLEAR(CreateForecastInvPeriodRpt);
        CreateForecastInvPeriodRpt.RUNMODAL;
      END ELSE BEGIN
        IF (InvMgtSetup."Usage Start Date" = 0D) THEN
          CreateAutomaticInvPeriod
        ELSE BEGIN
          ERROR('Usage Start Date is already configured!  Please continue to setup manually.  Stopping.');
        END;
      END;
    END;

    PROCEDURE ImportPackage@3(VAR AFPProcess@1240020000 : Record 14097491);
    VAR
      ConfigXMLExchange@1000 : Codeunit 8614;
      IStream@1240020003 : InStream;
      XMLParamText@1240020002 : Text;
      DecompressedFileName@1240020001 : Text;
    BEGIN
      IF GUIALLOWED THEN BEGIN
        CLEAR(ConfigXMLExchange);
        // D365 >>
        //IF NOT ConfigXMLExchange.ImportPackageXMLFromClient THEN
        //  ERROR(Txt001);
        // D365 <<
      END ELSE BEGIN
        // Server Side Files
        AFPProcess.CALCFIELDS("Automated Parameter XML");
        IF NOT AFPProcess."Automated Parameter XML".HASVALUE THEN
          ERROR(Txt005,AFPProcess."Process No.", AFPProcess."Action Description");

        // 2015+
        AFPProcess."Automated Parameter XML".CREATEINSTREAM(IStream, TEXTENCODING::UTF8);
        IStream.READTEXT(XMLParamText);

        CLEAR(ConfigXMLExchange);
        ConfigXMLExchange.SetHideDialog(TRUE);
        // D365 >>
        //DecompressedFileName := ConfigXMLExchange.DecompressPackage(XMLParamText);
        //IF NOT ConfigXMLExchange.ImportPackageXML(DecompressedFileName) THEN
        //  ERROR(Txt001);
        // D365 <<
      END;
    END;

    PROCEDURE ImportExcelDataToPackage@5(VAR AFPProcess@1240020000 : Record 14097491);
    VAR
      ConfigExcelExchange@1240020004 : Codeunit 8618;
      IStream@1240020003 : InStream;
      XMLParamText@1240020002 : Text;
      DecompressedFileName@1240020001 : Text;
      ConfigPackageData@1240020005 : Record 8614;
      ConfigPackage@1240020006 : Record 8623;
    BEGIN
      IF GUIALLOWED THEN BEGIN
        CLEAR(ConfigExcelExchange);
        // D365 >>
        //IF NOT ConfigExcelExchange.ImportExcelFromPackage THEN
        //  ERROR(Txt002)
        // D365 <<
      END ELSE BEGIN

        IF NOT ConfigPackage.GET(AFPProcess."Manual Parameter") THEN BEGIN
          ERROR(Txt009,AFPProcess."Manual Parameter");
          ConfigPackageData.SETRANGE("Package Code", ConfigPackage.Code);
          IF ConfigPackageData.FIND('-') THEN BEGIN
            REPEAT
              ConfigPackageData.DELETE(TRUE);
            UNTIL ConfigPackageData.NEXT = 0;
            COMMIT;
          END;
        END;

        AFPProcess.CALCFIELDS("Automated Parameter XML");
        IF NOT AFPProcess."Automated Parameter XML".HASVALUE THEN
          ERROR(Txt005,AFPProcess."Process No.", AFPProcess."Action Description");

        // 2015+
        AFPProcess."Automated Parameter XML".CREATEINSTREAM(IStream, TEXTENCODING::UTF8);
        IStream.READTEXT(XMLParamText);
        ImportExcel(XMLParamText);
      END;
    END;

    PROCEDURE ImportExcel@1240020000(XmlExcelDataFile@1000 : Text);
    VAR
      locText019@1240020002 : TextConst 'ENU=Could not create Excel instance.;ESM=No se pudo crear una instancia en Excel.;FRC=Cr‚ation de l''instance Excel impossible.;ENC=Could not create Excel instance.';
      ConfigXMLExchange@1240020009 : Codeunit 8614;
    BEGIN
      CLEAR(ConfigXMLExchange);
      ConfigXMLExchange.SetHideDialog(TRUE);
      ConfigXMLExchange.SetExcelMode(TRUE);
      // D365 >>
      //ConfigXMLExchange.ImportPackageXML(XmlExcelDataFile);
      // D365 <<
    END;

    PROCEDURE ApplyPackageData@6(VAR AFPProcess@1240020000 : Record 14097491);
    VAR
      ConfigPackageTable@1002 : Record 8613;
      ConfigPackageMgt@1001 : Codeunit 8611;
      ConfigPackage@1000 : Record 8623;
      IStream@1240020003 : InStream;
      XMLParamText@1240020002 : Text;
    BEGIN
      IF GUIALLOWED THEN BEGIN
        IF ConfigPackage.GET(AFPProcess."Manual Parameter") THEN BEGIN
          ConfigPackageTable.SETRANGE("Package Code",ConfigPackage.Code);
          // D365 >>
          //ConfigPackageMgt.ApplyPackage(ConfigPackage,ConfigPackageTable,TRUE);
          // D365 <<
        END;
      END ELSE BEGIN
        AFPProcess.CALCFIELDS("Automated Parameter XML");
        IF NOT AFPProcess."Automated Parameter XML".HASVALUE THEN
          ERROR(Txt005,AFPProcess."Process No.", AFPProcess."Action Description");

        // 2015+
        AFPProcess."Automated Parameter XML".CREATEINSTREAM(IStream, TEXTENCODING::UTF8);
        IStream.READTEXT(XMLParamText);

        IF ConfigPackage.GET(XMLParamText) THEN BEGIN
          ConfigPackageTable.SETRANGE("Package Code",ConfigPackage.Code);
          ConfigPackageMgt.SetHideDialog(TRUE);
          // D365 >>
          //ConfigPackageMgt.ApplyPackage(ConfigPackage,ConfigPackageTable,TRUE);
          // D365 <<
        END;
      END;
    END;

    PROCEDURE ProcessHistoricalData@14(VAR AFPProcess@1240020002 : Record 14097491);
    VAR
      IStream@1240020001 : InStream;
      XMLParamText@1240020000 : Text;
      CreateHistoricalData@1240020003 : Codeunit 14098056;
    BEGIN
      IF GUIALLOWED THEN BEGIN
        CLEAR(CreateHistoricalData);
        CreateHistoricalData.RUN;
      END ELSE BEGIN
        AFPProcess.CALCFIELDS("Automated Parameter XML");
        IF NOT AFPProcess."Automated Parameter XML".HASVALUE THEN
          ERROR(Txt005,AFPProcess."Process No.", AFPProcess."Action Description");

        AFPProcess."Automated Parameter XML".CREATEINSTREAM(IStream, TEXTENCODING::UTF8);
        IStream.READTEXT(XMLParamText);

        CLEAR(CreateHistoricalData);
        CreateHistoricalData.RUN;
      END;
    END;

    PROCEDURE RunPeriodEndProcess@15();
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Period End (Yes/No)");
    END;

    PROCEDURE ReleaseAllFormulas@12();
    VAR
      Formula@1000 : Record 14002652;
      FormulaPeriod@1001 : Record 14002653;
      FormulaRelease@1002 : Codeunit 14002651;
    BEGIN
      IF NOT Formula.FIND('-') THEN
        ERROR(Txt003);

      IF NOT FormulaPeriod.FIND('-') THEN
        ERROR(Txt004);

      Formula.SETRANGE(Released, FALSE);
      IF Formula.FIND('-') THEN BEGIN
        REPEAT
          FormulaRelease.Release(Formula);
        UNTIL Formula.NEXT = 0;
      END;
    END;

    PROCEDURE ConfigureAFPProfile@10();
    VAR
      Profile@1000 : Record 2000000072;
    BEGIN
      Profile."Profile ID" := 'BUYER';
      Profile."Role Center ID" :=  PAGE::"Buyer Role Center";
      Profile.VALIDATE("Default Role Center", TRUE);
      IF NOT Profile.INSERT THEN
        Profile.MODIFY;
    END;

    PROCEDURE DeleteData@8();
    BEGIN
      // CLEAR(DataDeleteMgt);
      // DataDeleteMgt.CleanTables();
      // DataDeleteMgt.DeleteData()
    END;

    PROCEDURE CreateJobQueueEntry@13();
    VAR
      JobQueueEntry@1000 : Record 472;
    BEGIN
      JobQueueEntry.INIT;
      JobQueueEntry.INSERT(TRUE);
      JobQueueEntry.VALIDATE("Object Type to Run", JobQueueEntry."Object Type to Run"::Codeunit);
      JobQueueEntry.VALIDATE("Object ID to Run", CODEUNIT::"AFP Job Queue");
      JobQueueEntry."Parameter String" := '\AFPDAILY\';
      JobQueueEntry.VALIDATE("Run on Mondays", TRUE);
      JobQueueEntry.VALIDATE("Run on Tuesdays", TRUE);
      JobQueueEntry.VALIDATE("Run on Wednesdays", TRUE);
      JobQueueEntry.VALIDATE("Run on Thursdays", TRUE);
      JobQueueEntry.VALIDATE("Run on Fridays", TRUE);
      JobQueueEntry.VALIDATE("Run on Saturdays", TRUE);
      JobQueueEntry.VALIDATE("Run on Sundays", TRUE);
      JobQueueEntry.VALIDATE("Starting Time", 010000T);
      JobQueueEntry."No. of Minutes between Runs" := 0;
      JobQueueEntry.MODIFY(TRUE);
      JobQueueEntry.SetStatus(JobQueueEntry.Status::"On Hold");
    END;

    LOCAL PROCEDURE SetUsageStartDate@1240020012();
    VAR
      InvMgt@1240020000 : Record 14000551;
      ForecastInvPeriod@1240020001 : Record 14000552;
    BEGIN
      IF NOT InvMgt.GET THEN
        ERROR(Txt006);

      ForecastInvPeriod.SETRANGE(Type, ForecastInvPeriod.Type::" ");
      IF NOT ForecastInvPeriod.FIND('-') THEN
        ERROR(Txt007);

      IF ForecastInvPeriod."Starting Date" <> InvMgt."Usage Start Date" THEN BEGIN
        IF GUIALLOWED THEN BEGIN
          MESSAGE(Txt008);
        END ELSE BEGIN
          InvMgt."Usage Start Date" := ForecastInvPeriod."Starting Date";
          InvMgt.MODIFY;
        END;
      END;
    END;

    PROCEDURE SetType@4(inJobType@1000 : Integer);
    BEGIN
      JobType := inJobType;
    END;

    PROCEDURE SetWorkdate@1(VAR CurrWorkdate@1000 : Date);
    BEGIN
      IF CurrWorkdate <> WORKDATE THEN
        WORKDATE(CurrWorkdate);
    END;

    PROCEDURE ConfigureProcessEntries@9();
    BEGIN
      // Create Formulas and Formula Groups
      SetupEntry(10,'Create Formulas',FALSE,'');

      // Find and create forecast inventory periods
      SetupEntry(50,'Create Forecast Inventory Periods',FALSE,'');

      // Create Number Series
      SetupEntry(70,'Create Number Series', FALSE, '');

      // Create Item Ranking
      SetupEntry(72,'Create Item Ranking', FALSE, '');

      // Create Item Class
      SetupEntry(73,'Create Item Class', FALSE, '');

      // Create Stocking Rule
      SetupEntry(76,'Create Stocking Rule', FALSE, '');

      // Create Sporadic Rule
      SetupEntry(77,'Create Sporadic Rule', FALSE, '');

      // Create Target Service Level
      SetupEntry(78,'Target Customer Service Level', FALSE, '');

      // Default Transit Location
      SetupEntry(79,'Default In-Transit Location', FALSE, '');

      // Inventory Management Setup
      SetupEntry(85, 'Default Inventory Management Setup', FALSE, '');

      // Advanced Forecasting Setup
      SetupEntry(86, 'Default Advanced Forcasting Setup', FALSE, '');

      // check for production in license
      SetupEntry(90,'Default Production Setup', FALSE, '');

      // Inventory Management Setup
      SetupEntry(95, 'Default Alerts Setup', FALSE, '');

      // ask users about the locations
      // create transfer In-Transit location

      // Not yet allowed >>
      //SetupEntry(100,'Import AFP Setup Configuration Package',FALSE,'');
      //SetupEntry(101,'Import AFP Setup data from excel',FALSE,'');
      //SetupEntry(102,'Apply AFP Setup Data to Database',FALSE,'AFP SETUP');
      //SetupEntry(110,'Import AFP History Data Configuration Package',FALSE,'');
      //SetupEntry(111,'Import AFP History Data from excel',FALSE,'');
      //SetupEntry(112,'Apply AFP History data to Table',FALSE,'AV HISTORY');
      // Not yet allowed <<

      // Assign Users
      //SetupEntry(129, 'Assign DP User Roles', false, '');
      // Create Role Center
      //SetupEntry(130,'Create Role Center Profile (Buyer)',FALSE,'');

      // Create Job Queue Entry
      SetupEntry(131,'Create Job Queue Entry',FALSE,'');

      // DEMO
      //SetupEntry(150,'Process Historical Data (Demo Data)', TRUE,''); // Demo

      // Period End
      //SetupEntry(500,'Run Period End',FALSE,'');

      // clean
      //SetupEntry(999, 'Delete Data (Must be preconfigured)',TRUE,''); -- Demo
    END;

    LOCAL PROCEDURE SetupEntry@11(ProcessNumber@1000 : Integer;ProcessDesc@1001 : Text[250];SetComplete@1003 : Boolean;ParamText@1240020000 : Text);
    VAR
      AFPSetupProcessEntry@1002 : Record 14097491;
    BEGIN
      IF NOT AFPSetupProcessEntry.GET(ProcessNumber) THEN BEGIN
        AFPSetupProcessEntry.INIT;
        AFPSetupProcessEntry."Process No." := ProcessNumber;
        AFPSetupProcessEntry."Action Description" := ProcessDesc;
        AFPSetupProcessEntry.Completed := SetComplete;
        AFPSetupProcessEntry."Manual Parameter" := ParamText;
        AFPSetupProcessEntry.INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateFormulas@1240020007();
    VAR
      SeasonalTrend@1240020001 : ' ,Prior Season,Curr. Season';
      i@1240020000 : Integer;
      FormulaCode@1240020002 : Code[20];
      FormulaGroupCode@1240020005 : Code[10];
      Weight@1240020003 : Decimal;
      IncludeInTrend@1240020004 : Boolean;
      FormulaRelease@1240020006 : Codeunit 14002651;
      Formula@1240020007 : Record 14002652;
    BEGIN
      FormulaCode := '3MO';
      FormulaGroupCode := 'NS';
      CreateFormula(FormulaCode,FormulaCode,FALSE,FALSE,FALSE,FALSE,FormulaGroupCode,0);
      FOR i := 1 TO 3 DO BEGIN
        Weight := 1;
        CreateFormulaPeriod(FormulaCode, i, 1, FALSE, SeasonalTrend::" ");
      END;
      Formula.GET(FormulaCode);
      FormulaRelease.Release(Formula);

      FormulaCode := '3MOW/T';
      FormulaGroupCode := 'NS';
      CreateFormula(FormulaCode,FormulaCode,FALSE,FALSE,FALSE,FALSE,FormulaGroupCode,3);
      FOR i := 1 TO 3 DO BEGIN
        Weight := 1;
        CreateFormulaPeriod(FormulaCode, i, Weight, TRUE, SeasonalTrend::" ");
      END;
      Formula.GET(FormulaCode);
      FormulaRelease.Release(Formula);

      FormulaCode := '60DAY';
      FormulaGroupCode := 'NS';
      CreateFormula(FormulaCode,FormulaCode,FALSE,FALSE,FALSE,FALSE,FormulaGroupCode,0);
      FOR i := 1 TO 6 DO BEGIN
        IF (i MOD 2) = 0 THEN
          Weight := 0
        ELSE
          Weight := 1;
        CreateFormulaPeriod(FormulaCode, i, Weight, FALSE, SeasonalTrend::" ");
      END;
      Formula.GET(FormulaCode);
      FormulaRelease.Release(Formula);

      FormulaCode := '6MO';
      FormulaGroupCode := 'NS';
      CreateFormula(FormulaCode,FormulaCode,FALSE,FALSE,FALSE,FALSE,FormulaGroupCode,0);
      FOR i := 1 TO 6 DO BEGIN
        Weight := 1;
        CreateFormulaPeriod(FormulaCode, i, Weight, FALSE, SeasonalTrend::" ");
      END;
      Formula.GET(FormulaCode);
      FormulaRelease.Release(Formula);

      FormulaCode := '6MOW/T';
      FormulaGroupCode := 'NS';
      CreateFormula(FormulaCode,FormulaCode,FALSE,FALSE,FALSE,FALSE,FormulaGroupCode,3);
      FOR i := 1 TO 6 DO BEGIN
        Weight := 1;
        IncludeInTrend := FALSE;
        IF (i < 4) THEN
          IncludeInTrend := TRUE;
        CreateFormulaPeriod(FormulaCode, i, Weight, IncludeInTrend, SeasonalTrend::" ");
      END;
      Formula.GET(FormulaCode);
      FormulaRelease.Release(Formula);

      FormulaCode := 'AVE-EH/EL';
      FormulaGroupCode := 'NS';
      CreateFormula(FormulaCode,FormulaCode,FALSE,TRUE,TRUE,FALSE,FormulaGroupCode,0);
      FOR i := 1 TO 12 DO BEGIN
        Weight := 1;
        IncludeInTrend := FALSE;
        CreateFormulaPeriod(FormulaCode, i, Weight, IncludeInTrend, SeasonalTrend::" ");
      END;
      Formula.GET(FormulaCode);
      FormulaRelease.Release(Formula);


      FormulaCode := 'AVE-EZ';
      FormulaGroupCode := 'NS';
      CreateFormula(FormulaCode,FormulaCode,FALSE,FALSE,FALSE,TRUE,FormulaGroupCode,0);
      FOR i := 1 TO 12 DO BEGIN
        Weight := 1;
        IncludeInTrend := FALSE;
        CreateFormulaPeriod(FormulaCode, i, Weight, IncludeInTrend, SeasonalTrend::" ");
      END;
      Formula.GET(FormulaCode);
      FormulaRelease.Release(Formula);

      FormulaCode := 'EXPSMTH1';
      FormulaGroupCode := 'NS';
      CreateFormula(FormulaCode,FormulaCode,FALSE,FALSE,FALSE,FALSE,FormulaGroupCode,0);
      FOR i := 1 TO 5 DO BEGIN
        CASE i OF
          1: Weight := 3;
          2: Weight := 2.5;
          3: Weight := 2;
          4: Weight := 1.5;
          5: Weight := 1;
        END;
        IncludeInTrend := FALSE;
        CreateFormulaPeriod(FormulaCode, i, Weight, IncludeInTrend, SeasonalTrend::" ");
      END;
      Formula.GET(FormulaCode);
      FormulaRelease.Release(Formula);

      FormulaCode := 'EXPSMTH1W/T';
      FormulaGroupCode := 'NS';
      CreateFormula(FormulaCode,FormulaCode,FALSE,FALSE,FALSE,FALSE,FormulaGroupCode,3);
      FOR i := 1 TO 5 DO BEGIN
        CASE i OF
          1: Weight := 3;
          2: Weight := 2.5;
          3: Weight := 2;
          4: Weight := 1.5;
          5: Weight := 1;
        END;
        IncludeInTrend := FALSE;
        IF (i < 4) THEN
          IncludeInTrend := TRUE;
        CreateFormulaPeriod(FormulaCode, i, Weight, IncludeInTrend, SeasonalTrend::" ");
      END;
      Formula.GET(FormulaCode);
      FormulaRelease.Release(Formula);

      FormulaCode := 'EXPSMTH2';
      FormulaGroupCode := 'NS';
      CreateFormula(FormulaCode,FormulaCode,FALSE,FALSE,FALSE,FALSE,FormulaGroupCode,0);
      FOR i := 1 TO 3 DO BEGIN
        CASE i OF
          1: Weight := 5;
          2: Weight := 2;
          3: Weight := 1;
        END;
        IncludeInTrend := FALSE;
        CreateFormulaPeriod(FormulaCode, i, Weight, IncludeInTrend, SeasonalTrend::" ");
      END;
      Formula.GET(FormulaCode);
      FormulaRelease.Release(Formula);

      FormulaCode := 'NS-S1';
      FormulaGroupCode := 'SEASONAL';
      CreateFormula(FormulaCode,FormulaCode,FALSE,FALSE,FALSE,FALSE,FormulaGroupCode,0);
      FOR i := 1 TO 13 DO BEGIN
        SeasonalTrend := SeasonalTrend::" ";
        Weight := 0;
        CASE i OF
           1: Weight := 3;
          10: Weight := 1;
          11: Weight := 3;
          12: Weight := 9;
          13: Weight := 2;
         END;
         IncludeInTrend := FALSE;
         CreateFormulaPeriod(FormulaCode, i, Weight, IncludeInTrend, SeasonalTrend);
      END;
      Formula.GET(FormulaCode);
      FormulaRelease.Release(Formula);

      FormulaCode := 'NS-S2';
      FormulaGroupCode := 'SEASONAL';
      CreateFormula(FormulaCode,FormulaCode,FALSE,FALSE,FALSE,FALSE,FormulaGroupCode,0);
      FOR i := 1 TO 13 DO BEGIN
        SeasonalTrend := SeasonalTrend::" ";
        Weight := 0;
        CASE i OF
           1: Weight := 2;
          11: Weight := 1;
          12: Weight := 6;
          13: Weight := 1;
         END;
         IncludeInTrend := FALSE;
         CreateFormulaPeriod(FormulaCode, i, Weight, IncludeInTrend, SeasonalTrend);
      END;
      Formula.GET(FormulaCode);
      FormulaRelease.Release(Formula);

      FormulaCode := 'SEA1-3';
      FormulaGroupCode := 'SEASONAL';
      CreateFormula(FormulaCode,FormulaCode,TRUE,FALSE,FALSE,FALSE,FormulaGroupCode,0);
      FOR i := 1 TO 18 DO BEGIN
        Weight := 0;
        SeasonalTrend := SeasonalTrend::" ";
        CASE i OF
           1,2,3,4,5,6: SeasonalTrend := SeasonalTrend::"Curr. Season";
          12: Weight := 1;
          13,14,15,16,17,18: SeasonalTrend := SeasonalTrend::"Prior Season";
         END;
         IncludeInTrend := FALSE;
         CreateFormulaPeriod(FormulaCode, i, Weight, IncludeInTrend, SeasonalTrend);
      END;
      Formula.GET(FormulaCode);
      FormulaRelease.Release(Formula);

      FormulaCode := 'SEA2/1-0';
      FormulaGroupCode := 'SEASONAL';
      CreateFormula(FormulaCode,FormulaCode,FALSE,FALSE,FALSE,FALSE,FormulaGroupCode,0);
      FOR i := 1 TO 12 DO BEGIN
        Weight := 0;
        SeasonalTrend := SeasonalTrend::" ";
        CASE i OF
          11: Weight := 1;
          12: Weight := 2;
         END;
         IncludeInTrend := FALSE;
         CreateFormulaPeriod(FormulaCode, i, Weight, IncludeInTrend, SeasonalTrend);
      END;
      Formula.GET(FormulaCode);
      FormulaRelease.Release(Formula);

      FormulaCode := 'SEA2/1-3';
      FormulaGroupCode := 'SEASONAL';
      CreateFormula(FormulaCode,FormulaCode,TRUE,FALSE,FALSE,FALSE,FormulaGroupCode,0);
      FOR i := 1 TO 15 DO BEGIN
        Weight := 0;
        SeasonalTrend := SeasonalTrend::" ";
        CASE i OF
          1,2,3:  SeasonalTrend := SeasonalTrend::"Curr. Season";
          11: Weight := 1;
          12: Weight := 2;
          13,14,15:  SeasonalTrend := SeasonalTrend::"Prior Season";
         END;
         IncludeInTrend := FALSE;
         CreateFormulaPeriod(FormulaCode, i, Weight, IncludeInTrend, SeasonalTrend);
      END;
      Formula.GET(FormulaCode);
      FormulaRelease.Release(Formula);

      FormulaCode := 'SEA3-0';
      FormulaGroupCode := 'SEASONAL';
      CreateFormula(FormulaCode,FormulaCode,FALSE,FALSE,FALSE,FALSE,FormulaGroupCode,0);
      FOR i := 1 TO 12 DO BEGIN
        Weight := 0;
        SeasonalTrend := SeasonalTrend::" ";
        CASE i OF
          10,11,12:  Weight := 1;
         END;
         IncludeInTrend := FALSE;
         CreateFormulaPeriod(FormulaCode, i, Weight, IncludeInTrend, SeasonalTrend);
      END;
      Formula.GET(FormulaCode);
      FormulaRelease.Release(Formula);

      FormulaCode := 'SEA3-3';
      FormulaGroupCode := 'SEASONAL';
      CreateFormula(FormulaCode,FormulaCode,TRUE,FALSE,FALSE,FALSE,FormulaGroupCode,0);
      FOR i := 1 TO 15 DO BEGIN
        Weight := 0;
        SeasonalTrend := SeasonalTrend::" ";
        CASE i OF
           1,2,3:  SeasonalTrend := SeasonalTrend::"Curr. Season";
          10,11,12:  Weight := 1;
          13,14,15:  SeasonalTrend := SeasonalTrend::"Prior Season";
         END;
         IncludeInTrend := FALSE;
         CreateFormulaPeriod(FormulaCode, i, Weight, IncludeInTrend, SeasonalTrend);
      END;
      Formula.GET(FormulaCode);
      FormulaRelease.Release(Formula);

      FormulaCode := 'SEA4/1-3';
      FormulaGroupCode := 'SEASONAL';
      CreateFormula(FormulaCode,FormulaCode,TRUE,FALSE,FALSE,FALSE,FormulaGroupCode,0);
      FOR i := 1 TO 15 DO BEGIN
        Weight := 0;
        SeasonalTrend := SeasonalTrend::" ";
        CASE i OF
           1,2,3:  SeasonalTrend := SeasonalTrend::"Curr. Season";
          11: Weight := 1;
          12: Weight := 4;
          13,14,15:  SeasonalTrend := SeasonalTrend::"Prior Season";
         END;
         IncludeInTrend := FALSE;
         CreateFormulaPeriod(FormulaCode, i, Weight, IncludeInTrend, SeasonalTrend);
      END;
      Formula.GET(FormulaCode);
      FormulaRelease.Release(Formula);
    END;

    LOCAL PROCEDURE CreateFormula@1240020005(CurrFormulaCode@1240020000 : Code[20];CurrFormulaDesc@1240020001 : Text[50];CurrSeasonalFormula@1240020002 : Boolean;CurrExLowUsagePer@1240020003 : Boolean;CurrExHighUsagePer@1240020004 : Boolean;CurrExlZeroUsagePer@1240020005 : Boolean;CurrFormulaGroupCode@1240020006 : Code[10];CurrNonSeasonalTrendPerLimit@1240020007 : Integer);
    VAR
      Formula@1240020008 : Record 14002652;
    BEGIN
      Formula.INIT;
      Formula.Code := CurrFormulaCode;
      Formula.Description := CurrFormulaDesc;
      Formula."Seasonal Formula" := CurrSeasonalFormula;
      Formula."Exclude Low Usage Period" := CurrExLowUsagePer;
      Formula."Exclude High Usage Period" := CurrExHighUsagePer;
      Formula."Exclude Zero Usage Periods" := CurrExlZeroUsagePer;
      Formula."Formula Group Code" := CurrFormulaGroupCode;
      CreateFormulaGroup(Formula);
      Formula."Non Seasonal Trend Per. Limit" := CurrNonSeasonalTrendPerLimit;
      Formula.Released := FALSE;
      Formula."Date Changed" := TODAY;
      Formula."Changed By" := USERID;
      IF Formula.INSERT THEN;
    END;

    LOCAL PROCEDURE CreateFormulaGroup@1240020006(VAR CurrFormula@1240020000 : Record 14002652);
    VAR
      FormulaGroup@1240020001 : Record 14002664;
    BEGIN
      IF (CurrFormula."Formula Group Code" <> '') THEN BEGIN
        IF NOT FormulaGroup.GET(CurrFormula."Formula Group Code") THEN BEGIN
          FormulaGroup.INIT;
          FormulaGroup.Code := CurrFormula."Formula Group Code";
          FormulaGroup.INSERT;
        END;
      END;
    END;

    LOCAL PROCEDURE CreateFormulaPeriod@1240020070(CurrFormulaCode@1240020000 : Code[20];CurrPeriod@1240020001 : Integer;CurrWeight@1240020002 : Decimal;CurrIncludeInTrend@1240020003 : Boolean;CurrSeasonalTrend@1240020004 : ' ,Prior Season,Curr. Season');
    VAR
      FormulaPeriod@1240020005 : Record 14002653;
    BEGIN
      FormulaPeriod.INIT;
      FormulaPeriod."Formula Code" := CurrFormulaCode;
      FormulaPeriod.Period := CurrPeriod;
      FormulaPeriod.Weight := CurrWeight;
      FormulaPeriod."Include In Trend" := CurrIncludeInTrend;
      FormulaPeriod."Seasonal Trend" := CurrSeasonalTrend;
      FormulaPeriod."Date Changed" := TODAY;
      FormulaPeriod."Changed By" := USERID;
      FormulaPeriod.INSERT;
    END;

    LOCAL PROCEDURE CreateNoSeries@1240020014();
    VAR
      NoSeries@1240020001 : Record 308;
      NoSeriesLine@1240020000 : Record 309;
    BEGIN
      NoSeries.INIT;
      NoSeries.Code := InvMgtSetup.GetDefaultSugOrderNoSeries;
      NoSeries.Description := 'DP Suggested Order';
      NoSeries."Default Nos." := TRUE;
      IF NOT NoSeries.INSERT THEN;

      NoSeriesLine.INIT;
      NoSeriesLine."Series Code" := NoSeries.Code;
      NoSeriesLine."Line No." := 10000;
      NoSeriesLine."Starting No." := 'SUG000001';
      NoSeriesLine."Ending No." := 'SUG999999';
      NoSeriesLine.Open := TRUE;
      NoSeriesLine."Increment-by No." := 1;
      IF NOT NoSeriesLine.INSERT THEN;

      NoSeries.INIT;
      NoSeries.Code := InvMgtSetup.GetDefaultSugTransferNoSeries;
      NoSeries.Description := 'DP Suggested Transfer';
      NoSeries."Default Nos." := TRUE;
      IF NOT NoSeries.INSERT THEN;

      NoSeries.INIT;
      NoSeriesLine."Series Code" := NoSeries.Code;
      NoSeriesLine."Line No." := 10000;
      NoSeriesLine."Starting No." := 'ST000001';
      NoSeriesLine."Ending No." := 'ST999999';
      NoSeriesLine.Open := TRUE;
      NoSeriesLine."Increment-by No." := 1;
      IF NOT NoSeriesLine.INSERT THEN;

      NoSeries.INIT;
      NoSeries.Code := InvMgtSetup.GetDefaultSugContNoSeries;
      NoSeries.Description := 'DP Suggested Container';
      NoSeries."Default Nos." := TRUE;
      IF NOT NoSeries.INSERT THEN;

      NoSeriesLine.INIT;
      NoSeriesLine."Series Code" := NoSeries.Code;
      NoSeriesLine."Line No." := 10000;
      NoSeriesLine."Starting No." := 'CT000001';
      NoSeriesLine."Ending No." := 'CT999999';
      NoSeriesLine.Open := TRUE;
      NoSeriesLine."Increment-by No." := 1;
      IF NOT NoSeriesLine.INSERT THEN;

      IF AFPProdSetup.READPERMISSION THEN BEGIN
        NoSeries.INIT;
        NoSeries.Code := AFPProdSetup.GetDefaultProductionFCNoSeries;
        NoSeries.Description := 'DP Production Forecast';
        NoSeries."Default Nos." := TRUE;
        IF NOT NoSeries.INSERT THEN;

        NoSeriesLine.INIT;
        NoSeriesLine."Series Code" := NoSeries.Code;
        NoSeriesLine."Line No." := 10000;
        NoSeriesLine."Starting No." := 'PF000001';
        NoSeriesLine."Ending No." := 'PF999999';
        NoSeriesLine.Open := TRUE;
        NoSeriesLine."Increment-by No." := 1;
        IF NOT NoSeriesLine.INSERT THEN;

        NoSeries.INIT;
        NoSeries.Code := 'M-SIM';
        NoSeries.Description := 'DP M-Simulated Orders';
        NoSeries."Default Nos." := TRUE;
        IF NOT NoSeries.INSERT THEN;

        NoSeriesLine.INIT;
        NoSeriesLine."Series Code" := NoSeries.Code;
        NoSeriesLine."Line No." := 10000;
        NoSeriesLine."Starting No." := 'SIM000000001';
        NoSeriesLine."Ending No." := 'SIM999999999';
        NoSeriesLine.Open := TRUE;
        NoSeriesLine."Increment-by No." := 1;
        IF NOT NoSeriesLine.INSERT THEN;
      END;
    END;

    LOCAL PROCEDURE CreateItemRankings@1240020022();
    VAR
      ItemRanking@1240020000 : Record 14002656;
    BEGIN
      ItemRanking.CreateStdItemRankingCodes;
    END;

    LOCAL PROCEDURE CreateItemClasses@1240020025();
    VAR
      ItemClass@1240020002 : Record 14000554;
    BEGIN
      ItemClass.CreateStandardClasses;
    END;

    LOCAL PROCEDURE CreateTransferSetup@1240020027();
    VAR
      LocTransRule@1240020001 : Record 14000595;
      TransferCalendar@1240020000 : Record 14000597;
    BEGIN
      LocTransRule.CreateRuleOptions;
      TransferCalendar.CreateCalendar;
    END;

    LOCAL PROCEDURE CreateStockingRules@1240020028();
    VAR
      StockingRule@1240020000 : Record 14000573;
    BEGIN
      StockingRule.INIT;
      StockingRule.Code := GetDefaultStockingRule;
      StockingRule."Review Periods" := 6;
      StockingRule."Minimum Shipments" := 3;
      StockingRule."Minimum Usage" := 24;
      StockingRule.INSERT;
    END;

    LOCAL PROCEDURE CreateSporadicRules@1240020029();
    VAR
      SporadicRule@1240020002 : Record 14002662;
      SporadicUsageLTMult@1240020001 : Record 14002660;
      SporadicUsagePerMult@1240020000 : Record 14002661;
    BEGIN
      SporadicRule.INIT;
      SporadicRule.Code := AdvForcSetup.GetDefaultSporadicRule;
      SporadicRule.Description := FORMAT(AdvForcSetup.GetDefaultSporadicRule);
      SporadicRule.INSERT;

      SporadicUsagePerMult.INIT;
      SporadicUsagePerMult."Sporadic Code" := SporadicRule.Code;
      SporadicUsagePerMult."Min. Periods With Usage" := 1;
      SporadicUsagePerMult."Max. Periods With Usage" := 1;
      SporadicUsagePerMult."Usage Multiplier" := 0.5;
      SporadicUsagePerMult.INSERT;

      SporadicUsagePerMult."Min. Periods With Usage" := 2;
      SporadicUsagePerMult."Max. Periods With Usage" := 2;
      SporadicUsagePerMult."Usage Multiplier" := 0.5;
      SporadicUsagePerMult.INSERT;

      SporadicUsagePerMult."Min. Periods With Usage" := 3;
      SporadicUsagePerMult."Max. Periods With Usage" := 3;
      SporadicUsagePerMult."Usage Multiplier" := 0.5;
      SporadicUsagePerMult.INSERT;

      SporadicUsagePerMult."Min. Periods With Usage" := 4;
      SporadicUsagePerMult."Max. Periods With Usage" := 4;
      SporadicUsagePerMult."Usage Multiplier" := 1;
      SporadicUsagePerMult.INSERT;

      SporadicUsagePerMult."Min. Periods With Usage" := 5;
      SporadicUsagePerMult."Max. Periods With Usage" := 5;
      SporadicUsagePerMult."Usage Multiplier" := 1;
      SporadicUsagePerMult.INSERT;

      SporadicUsagePerMult."Min. Periods With Usage" := 6;
      SporadicUsagePerMult."Max. Periods With Usage" := 6;
      SporadicUsagePerMult."Usage Multiplier" := 1;
      SporadicUsagePerMult.INSERT;

      SporadicUsagePerMult."Min. Periods With Usage" := 7;
      SporadicUsagePerMult."Max. Periods With Usage" := 7;
      SporadicUsagePerMult."Usage Multiplier" := 2;
      SporadicUsagePerMult.INSERT;

      SporadicUsageLTMult."Sporadic Code" := SporadicRule.Code;
      SporadicUsageLTMult."Min. Vendor Lead Time" := 0;
      SporadicUsageLTMult."Max. Vendor Lead Time" := 30;
      SporadicUsageLTMult."Usage Multiplier" := 0;
      SporadicUsageLTMult.INSERT;

      SporadicUsageLTMult."Sporadic Code" := SporadicRule.Code;
      SporadicUsageLTMult."Min. Vendor Lead Time" := 31;
      SporadicUsageLTMult."Max. Vendor Lead Time" := 60;
      SporadicUsageLTMult."Usage Multiplier" := 1;
      SporadicUsageLTMult.INSERT;

      SporadicUsageLTMult."Sporadic Code" := SporadicRule.Code;
      SporadicUsageLTMult."Min. Vendor Lead Time" := 61;
      SporadicUsageLTMult."Max. Vendor Lead Time" := 90;
      SporadicUsageLTMult."Usage Multiplier" := 2;
      SporadicUsageLTMult.INSERT;

      SporadicUsageLTMult."Sporadic Code" := SporadicRule.Code;
      SporadicUsageLTMult."Min. Vendor Lead Time" := 91;
      SporadicUsageLTMult."Max. Vendor Lead Time" := 999;
      SporadicUsageLTMult."Usage Multiplier" := 3;
      SporadicUsageLTMult.INSERT;
    END;

    LOCAL PROCEDURE CreateTargetServiceLevel@1240020030();
    VAR
      TargetCustServLevel@1240020000 : Record 14002701;
    BEGIN
      TargetCustServLevel.CreateStandardSetup;
    END;

    LOCAL PROCEDURE CreateInTransitLocation@1240020040();
    VAR
      Location@1240020000 : Record 14;
    BEGIN
      Location.INIT;
      Location.Code := InvMgtSetup.GetDefaultTransitLocation;
      IF NOT Location.GET(Location.Code) THEN BEGIN
        Location.Name := FORMAT(Location.Code);
        Location."Use As In-Transit" := TRUE;
        Location.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateInvMgtSetup@1240020042();
    BEGIN
      InvMgtSetup.SetDefaultValues;
      IF InvMgtSetup.INSERT(TRUE) THEN;
      IF (GlobalPeriodLength <> '') THEN BEGIN
        EVALUATE(InvMgtSetup."Forecast Period Length", GlobalPeriodLength);
        EVALUATE(InvMgtSetup."Calculation Period Length", GlobalPeriodLength);
        InvMgtSetup.MODIFY(FALSE);
      END;
    END;

    LOCAL PROCEDURE CreateAdvForcSetup@1240020043();
    BEGIN
      AdvForcSetup.SetInitialValues;
      IF AdvForcSetup.INSERT(TRUE) THEN;
    END;

    LOCAL PROCEDURE CreateDefaultProductionSetup@1240020046();
    VAR
      AFPProdTemplate@1240020003 : Record 14002677;
      ProdItemGroup@1240020001 : Record 14002676;
      AFPProdPlanName@1240020000 : Record 14002678;
    BEGIN
      // Production Setup
      IF NOT AFPProdSetup.READPERMISSION THEN
        EXIT;

      AFPProdSetup.CreateDefaultProductionSetup;
    END;

    LOCAL PROCEDURE CreateAlertSetup@1240020054();
    VAR
      AlertSetup@1240020000 : Record 14002703;
    BEGIN
      AlertSetup.SetDefaultValues;
      AlertSetup.INSERT;
    END;

    LOCAL PROCEDURE GetDefaultStockingRule@1240020001() : Code[10];
    BEGIN
      EXIT('STANDARD');
    END;

    LOCAL PROCEDURE CreateAutomaticInvPeriod@1240020002();
    VAR
      InvPeriod@1240020010 : Record 14000552;
      CalcInvPeriod@1240020009 : Record 14000552;
      UBP@1240020001 : Codeunit 14000564;
      PrevPeriods@1240020002 : Integer;
      PeriodStartDate@1240020000 : Date;
      NoOfPeriods@1240020003 : Integer;
      CalcStartDate@1240020004 : Date;
      PeriodLength@1240020006 : Code[20];
      FirstPeriodStartDate@1240020007 : Date;
      i@1240020008 : Integer;
    BEGIN
      IF NOT InvPeriod.ISEMPTY THEN
        EXIT;

      IF InvMgtSetup.GET THEN;
      IF AdvForcSetup.GET THEN;

      UBP.CalcFormulaPeriodRequirements;
      PrevPeriods := UBP.GetFormulaMaxPeriod;
      IF (AdvForcSetup."Periods to Re-Forecast" = 0) THEN
        AdvForcSetup."Periods to Re-Forecast" := 4;
      PrevPeriods  := PrevPeriods + AdvForcSetup."Periods to Re-Forecast";
      PeriodStartDate := CALCDATE('-' + FORMAT(PrevPeriods) + 'M', WORKDATE);
      PeriodStartDate := CALCDATE('-CY', PeriodStartDate);

      NoOfPeriods := 0;
      IF PeriodLength = '' THEN BEGIN
        CASE InvMgtSetup."No. of Periods in a Year" OF
           0:
          BEGIN
             PeriodLength := '<1M>';
             NoOfPeriods := 60;
          END;
          12:
          BEGIN
            PeriodLength := '<1M>';
            NoOfPeriods := 60;
          END;
          52:
          BEGIN
            PeriodLength := '<1W>';
            NoOfPeriods := 260;
          END;
        END;
      END;

      FOR i := 1 TO NoOfPeriods DO BEGIN
        InvPeriod.INIT;
        InvPeriod."Starting Date" := PeriodStartDate;
        PeriodStartDate := CALCDATE(PeriodLength,PeriodStartDate);
        InvPeriod."Ending Date" := CALCDATE('<-1D>', PeriodStartDate);
        InvPeriod.INSERT;
        //InventoryMgt.CreateLocationInventoryPeriods(InvPeriod,PeriodClosed,LocationCode);

        CalcInvPeriod.INIT;
        CalcInvPeriod.TRANSFERFIELDS(InvPeriod, FALSE);
        CalcInvPeriod.Type := CalcInvPeriod.Type::Calculate;
        CalcInvPeriod."Starting Date" := InvPeriod."Starting Date";
        CalcInvPeriod."Ending Date" := InvPeriod."Ending Date";
        CalcInvPeriod.INSERT;
      END;
      GlobalPeriodLength := PeriodLength;
    END;

    [External]
    PROCEDURE CheckDPSetupStatus@1240020003(VAR CurrAggregateAssistedSetup@1240020001 : Record 1808) : Integer;
    VAR
      SetupProcessEntry@1240020000 : Record 14097491;
      LocationInvPeriod@1240020002 : Record 14000553;
    BEGIN
      IF SetupProcessEntry.ISEMPTY THEN BEGIN
        CurrAggregateAssistedSetup.Status := CurrAggregateAssistedSetup.Status::"Not Started";
        EXIT(CurrAggregateAssistedSetup.Status);
      END;

      LocationInvPeriod.SETRANGE("Period End Closed",TRUE);
      IF NOT LocationInvPeriod.ISEMPTY THEN BEGIN
        CurrAggregateAssistedSetup.Status := CurrAggregateAssistedSetup.Status::Completed;
        EXIT(CurrAggregateAssistedSetup.Status);
      END;

      CurrAggregateAssistedSetup.Status := CurrAggregateAssistedSetup.Status::"Not Completed";
      EXIT(CurrAggregateAssistedSetup.Status);
    END;

    PROCEDURE ShowLocationsToConfigureOrig@1240020004();
    VAR
      LocationInvPeriod@1240020000 : Record 14000553;
      TempLocation@1240020001 : TEMPORARY Record 14;
      Location@1240020002 : Record 14;
    BEGIN
      Location.SETRANGE("Enable Adv. Forecasting", FALSE);
      Location.SETRANGE("Use As In-Transit", FALSE);
      IF Location.FINDSET THEN BEGIN
        REPEAT
          IF LocationInvPeriod.ISEMPTY THEN BEGIN
            TempLocation.INIT;
            TempLocation.Code := Location.Code;
            TempLocation.Name := Location.Name;
            TempLocation.INSERT(FALSE);
          END;
        UNTIL Location.NEXT = 0;
      END;

      IF NOT TempLocation.ISEMPTY THEN BEGIN
        IF PAGE.RUNMODAL(PAGE::"DP Setup Locations", TempLocation, TempLocation."Enable Adv. Forecasting") = ACTION::LookupOK THEN BEGIN
          //TempLocation.RESET;

          TempLocation.SETRANGE("Enable Adv. Forecasting", TRUE);
          IF TempLocation.FINDSET THEN BEGIN
            REPEAT
              ConfigureLocation(TempLocation);
            UNTIL TempLocation.NEXT = 0;
          END;
        END;
      END;
      TempLocation.DELETEALL;
    END;

    PROCEDURE ShowLocationsToConfigure@1240020009();
    VAR
      LocationInvPeriod@1240020000 : Record 14000553;
      TempLocation@1240020001 : TEMPORARY Record 14;
      Location@1240020002 : Record 14;
    BEGIN
      Location.SETRANGE("Enable Adv. Forecasting", FALSE);
      Location.SETRANGE("Use As In-Transit", FALSE);
      IF PAGE.RUNMODAL(PAGE::"DP Setup Locations", Location, Location."Enable Adv. Forecasting") = ACTION::LookupOK THEN BEGIN
        Location.SETRANGE("Enable Adv. Forecasting", TRUE);
        IF Location.FINDSET THEN BEGIN
          REPEAT
            ConfigureLocation(Location);
          UNTIL Location.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE ConfigureLocation@1240020008(VAR CurrLocation@1000 : Record 14);
    VAR
      Location@1240020000 : Record 14;
    BEGIN
      IF Location.GET(CurrLocation.Code) THEN BEGIN
        Location."Carrying Cost %" := 20;
        Location."Ordering Cost" := 5;
        Location."Enable Adv. Forecasting" := TRUE;
        Location."Auto Process Period End" := TRUE;
        IF (CurrLocation."Def. Repl. Source Type" <> CurrLocation."Def. Repl. Source Type"::" ") THEN BEGIN
          Location."Def. Repl. Source Type" := CurrLocation."Def. Repl. Source Type";
          Location."Def. Repl. Source Code" := CurrLocation."Def. Repl. Source Code";
        END ELSE
          Location."Def. Repl. Source Type" := Location."Def. Repl. Source Type"::Vendor;
        Location."Vend. Surplus Calc. Add Days" := 30;
        Location."Vend. Surplus Calc. Add Pct." := 30;
        Location."Loc. Surplus Calc. Add Days" := 30;
        Location."Loc. Surplus Calc. Add Pct." := 30;
        Location."Sporadic Rule" := AdvForcSetup."Def. Sporadic Rule";
        Location."Roll Up Order Quantity Rule" := Location."Roll Up Order Quantity Rule"::MaxSOQ;

        IF Location."Enable AFP Production" THEN BEGIN
          Location."AFP Prod. Template Name" := AFPProdSetup.GetDefaultProductionTemplate;
          Location."Auto Process Prod. Plan" := TRUE;
        END;
        Location.MODIFY(FALSE);
      END;
      CreateNewLocInvPeriods(Location);
    END;

    PROCEDURE CreateNewLocInvPeriods@1240030000(VAR CurrLocation@1240030000 : Record 14);
    VAR
      InventoryPeriod@1240030001 : Record 14000552;
      LocInvPeriod@1240030002 : Record 14000553;
    BEGIN
      InventoryPeriod.SETRANGE(Type, InventoryPeriod.Type::" ");
      IF InventoryPeriod.FINDSET THEN
        REPEAT
          LocInvPeriod.INIT;
          LocInvPeriod."Starting Date" := InventoryPeriod."Starting Date";
          LocInvPeriod."Location Code" := CurrLocation.Code;
          LocInvPeriod."Ending Date" := InventoryPeriod."Ending Date";
          IF LocInvPeriod.INSERT THEN;
        UNTIL InventoryPeriod.NEXT = 0;
    END;

    BEGIN
    {
      Create codeunit to process all AFP setup after importing objects into the database.
      Call with different job types to initiate the process.
    }
    END.
  }
}

