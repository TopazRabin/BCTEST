OBJECT Codeunit 14002355 E.D.I. Document Import
{
  OBJECT-PROPERTIES
  {
    Date=03/09/21;
    Time=[ 6:35:25 AM];
    Modified=Yes;
    Version List=SE0.62,TPZ2499;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EDISetup@1240030000 : Record 14002367;
      EDITemplate@1240030001 : Record 14002350;
      EDITradePartner@1240030002 : Record 14002360;
      EDIDocument@1240030003 : Record 14002353;
      EDISegment@1240030004 : Record 14002354;
      EDIElement@1240030005 : Record 14002355;
      EDIConditional@1240030006 : Record 14002363;
      EDIRecDocHdr@1240030007 : Record 14002358;
      EDIRecDocFields@1240030008 : Record 14002359;
      EDIRecDocFields4@1240030009 : Record 14002359;
      EDIConditionalSequence@1240020015 : Record 14000374;
      EDIRecDocHdr2@1240020024 : Record 14002358;
      EDIRecDocHeader@1240020032 : Record 14002358;
      EDIPackageMapIntegration@1240030087 : Codeunit 14002378;
      CreateEDIAlert@1240020012 : Codeunit 14000375;
      EDIEvaluateXRefSeparately@1240020023 : Codeunit 14050305;
      EDIFile@1240030015 : File;
      IStream@1240020041 : InStream;
      StreamReader@1240020040 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader";
      encoding@1240020039 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      ProgressWindow@1240030016 : Dialog;
      ArchiveEDIFileName@1240030017 : Text[250];
      BeginPoss@1240030018 : Integer;
      Char@1240030019 : Char;
      ComponentDel@1240030020 : Text[1];
      ComponentDelChar@1240030021 : Char;
      ComponentDelDec@1240030022 : Integer;
      ComponentDelPos@1240030023 : Integer;
      ConditionalFound@1240030024 : Boolean;
      CurrSegment@1240030026 : Text[15];
      CurrTradePtnr@1240030027 : Text[20];
      CurrLineNo@1240030028 : Integer;
      CurrDecimalString@1240030029 : Text[60];
      DocumentCount@1240030030 : Integer;
      DelimiterPos@1240030031 : Integer;
      DelimiterStrValue@1240030032 : Text[3];
      DocumentNo@1240030033 : Code[10];
      EDIDocumentNo@1240030034 : Code[30];
      EDIFileName@1240030035 : Text[250];
      ElementDel@1240030036 : Text[1];
      ElementDelChar@1240030037 : Char;
      ElementDelDec@1240030038 : Integer;
      ElementDelPos@1240030039 : Integer;
      EvalString@1240030041 : Text[250];
      EndOfFile@1240030042 : Boolean;
      FirstSegment@1240030043 : Code[15];
      FirstTotalSegment@1240030044 : Code[15];
      FunctionalID@1240030045 : Code[2];
      GoodSegment@1240030046 : Boolean;
      GroupControlNo@1240030049 : Text[30];
      InputFileFound@1240030078 : Boolean;
      InterchangeControlNo@1240030082 : Text[30];
      Imported@1240030050 : Integer;
      InputPos@1240030051 : Integer;
      InsertPoss@1240030052 : Integer;
      InsertPos@1240030053 : Integer;
      InsertLen@1240030054 : Integer;
      ISABuffer@1240030055 : Text[250];
      i@1240030056 : Integer;
      j@1240030057 : Integer;
      LineLength@1240030058 : Integer;
      LineSegmentArray@1240030059 : ARRAY [30] OF Code[20];
      LineSegment@1240030060 : Boolean;
      NewEDIFileName@1240030061 : Text[250];
      NewSegment@1240030062 : Boolean;
      ProcessingLines@1240030063 : Boolean;
      ReadBuffer@1240030064 : Text[1024];
      ReadLine@1240030065 : ARRAY [10] OF Text[1024];
      SegmentDel@1240030066 : Text[1];
      SegmentDelChar@1240030067 : Char;
      SegmentDelDec@1240030068 : Integer;
      SegmentDelPos@1240030069 : Integer;
      SegmentFound@1240030070 : Boolean;
      SegmentGroup@1240030071 : Integer;
      si@1240030072 : Integer;
      SterlingDec@1240030073 : Text[1];
      StoreSegID@1240030074 : Boolean;
      StoreSegComplete@1240030075 : Boolean;
      TempReadLine@1240030076 : Text[1024];
      TranSetControlNo@1240030083 : Text[30];
      TranSetID@1240030079 : Code[3];
      z@1240030081 : Integer;
      Text001@1001 : TextConst 'ENU=EDI Document %1 for Trading Partner %2 has a mapping error.';
      Text002@1002 : TextConst 'ENU=EDI Template not found for %1 %2 %3';
      Text003@1003 : TextConst 'ENU=Importing EDI transactions.....\';
      Text004@1004 : TextConst 'ENU=Trading Partner   #1#################\';
      Text005@1005 : TextConst 'ENU=Internal Doc No.  #2########\';
      Text006@1006 : TextConst 'ENU=Document Count    #3########\';
      Text007@1007 : TextConst 'ENU=Current Segment   #4###############################################';
      Text008@1008 : TextConst 'ENU=Error renaming file from %1 to %2';
      Text009@1009 : TextConst 'ENU=Interface file name not found for Trading Partner %1 - Document %2 - Version %3 - Type %4.';
      Text010@1010 : TextConst 'ENU=Document %1 not found for trading partner %2.';
      Text011@1011 : TextConst 'ENU=Segment id %1 is not set up for trading partner %2 %3 document.';
      Text012@1012 : TextConst 'ENU=EDIFACT Segments with more than 1024 characters are not currently supported.';
      Text013@1013 : TextConst 'ENU=The definition for EDI Segment %1 can not be found.';
      Text014@1014 : TextConst 'ENU=Field length below min of %1';
      Text015@1015 : TextConst 'ENU=You must specify the Seg. ID Beg. Position on the %1 E.D.I. Template.';
      Text016@1016 : TextConst 'ENU=Trading Partner %1 not found.';
      TestDecimalValue@1240030084 : Decimal;
      TestTextFormat@1240030085 : Text[30];
      DecimalSymbol@1240030086 : Text[1];
      ReverseCond@1240030088 : Boolean;
      ReverseCondGroup@1240030089 : Integer;
      EDIFACT@1240030010 : Boolean;
      ReleaseCharacter@1240030011 : Boolean;
      FirstDetailSegment@1240030012 : Code[15];
      EvaluateCurrSegment@1240030014 : Boolean;
      CurrSegment2@1240030025 : Code[15];
      InsertRecDocHdr@1240030013 : Boolean;
      DelimitedFlatFile@1240030040 : Boolean;
      HeaderSegID@1240020001 : Code[15];
      HeaderSegIDFound@1240020002 : Boolean;
      BegSegIDFound@1240020003 : Boolean;
      TrailerSegIDFound@1240020007 : Boolean;
      BegSegID@1240020004 : Code[15];
      TrailerSegID@1240020008 : Code[15];
      t@1240020000 : Integer;
      BegSegIDError@1240020005 : Boolean;
      HdrSegIDError@1240020006 : Boolean;
      FlatFileTrailerID@1240020009 : Code[30];
      FlatFileHdrID@1240020010 : Code[30];
      NegativeValue@1240020011 : Boolean;
      WrapText@1240020013 : Boolean;
      WrapTextComplete@1240020014 : Boolean;
      PreviousSegment@1240020016 : Code[15];
      SegmentSequence@1240020017 : Integer;
      TransactionDateText@1240020020 : Code[8];
      TransactionTimeText@1240020021 : Code[9];
      TransactionDate@1240020019 : Date;
      TransactionTime@1240020018 : Time;
      OriginalFieldTextValue@1240020022 : Text[250];
      InternalDocNo@1240020025 : Code[20];
      FieldTextValue@1240020026 : Text[250];
      FieldDateValue@1240020027 : Date;
      FieldTimeValue@1240020028 : Time;
      DataErrorExist@1240020030 : Boolean;
      CheckInternalDocNo@1240020031 : Code[10];
      GlobalTPZDIVCode@1000000000 : Code[20];
      AllowBlankSegmentID@1240020033 : Boolean;
      AckOnly@1240020034 : Boolean;
      Text017@1240020035 : TextConst 'ENU=Receive Document cannot be created.';
      LastInternalDocNo@1240020036 : Code[10];
      PrevSegment@1240020037 : Text[15];
      ImportByXMLFile@1240020038 : Boolean;
      FileWithoutHeaderSegment@1240020138 : Boolean;
      Text018@1240020029 : TextConst 'ENU=Check the values set in the File Name Begin Postion and File Name Length fields on the %1 template.\ Both fields require non zero values.';
      CustomerDivision@1000000003 : Record 50007;
      EDIRecDocFieldsISR@1000000002 : Record 14002359;
      EDICustCrossRefISR@1000000001 : Record 14002362;

    PROCEDURE ImportTran@4(CurrentEDIDocument@1240030000 : Record 14002353;DocNo@1240030001 : Code[10];FileInfo@1240020000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileInfo") : Boolean;
    VAR
      FileNameLength@1240020001 : Integer;
      EDISegment2@1240020002 : Record 14002354;
      EDIXMLDocImport@1240020003 : Codeunit 14099301;
    BEGIN
      IF CurrentEDIDocument."Packaged Map" THEN BEGIN
        EDIPackageMapIntegration.EDIDocumentImport(CurrentEDIDocument,DocNo);
        EXIT;
      END;

      CurrentEDIDocument.CALCFIELDS("Element Mapping Error","Conditional Mapping Error");
      IF CurrentEDIDocument."Element Mapping Error" OR CurrentEDIDocument."Conditional Mapping Error" THEN
        ERROR(
          Text001,
          CurrentEDIDocument."Navision Document",CurrentEDIDocument."Trade Partner No.");
      IF CurrentEDIDocument."Navision Document" = 'I_ACKONLY' THEN
        AckOnly := TRUE
      ELSE
        AckOnly := FALSE;

      CurrTradePtnr := CurrentEDIDocument."Trade Partner No.";

      EDISetup.LOCKTABLE;
      EDISetup.GET;
      IF NOT EDITemplate.GET(CurrentEDIDocument."EDI Template Code") THEN
        ERROR(
          Text002,
            CurrentEDIDocument."Trade Partner No.",CurrentEDIDocument."Navision Document",
            CurrentEDIDocument."EDI Document No.");

      EDIFACT := FALSE;
      CASE EDITemplate."Interface File Type" OF
        EDITemplate."Interface File Type"::"EDIFACT Delimited":
          EDIFACT := TRUE;
        EDITemplate."Interface File Type"::cXML,EDITemplate."Interface File Type"::XML:
          BEGIN
            EDIXMLDocImport.ImportXMLFile(CurrentEDIDocument,DocNo,FileInfo);
            EXIT;
          END;
      END;

      EDIDocumentNo := CurrentEDIDocument."EDI Document No.";
      DocumentNo := DocNo;
      AllowBlankSegmentID :=  CurrentEDIDocument."Allow Blank Segment ID";
      IF GUIALLOWED THEN
        ProgressWindow.OPEN(
          Text003 +
          Text004 +
          Text005 +
          Text006 +
          Text007);
      IF NOT OpenEDIFile(CurrentEDIDocument,FileInfo) THEN BEGIN
        IF GUIALLOWED THEN
          ProgressWindow.CLOSE;
        EXIT;
      END;

      DelimitedFlatFile := FALSE;

      BegSegIDError := FALSE;
      HdrSegIDError := FALSE;
      BegSegIDFound := FALSE;
      HeaderSegIDFound := FALSE;
      TrailerSegIDFound := FALSE;

      IF (EDITemplate."File Format" = EDITemplate."File Format"::Delimited) AND
         (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::None)
      THEN
        DelimitedFlatFile := TRUE;

      IF DelimitedFlatFile THEN BEGIN
        IF EDITemplate."Header Segment ID" <> '' THEN BEGIN
          HeaderSegIDFound := TRUE;
          HeaderSegID := EDITemplate."Header Segment ID";
        END;
        IF EDITemplate."Beginning Segment ID" <> '' THEN BEGIN
          BegSegIDFound := TRUE;
          BegSegID := EDITemplate."Beginning Segment ID";
        END;
        IF EDITemplate."Trailer Segment ID" <> '' THEN BEGIN
          TrailerSegIDFound := TRUE;
          TrailerSegID := EDITemplate."Trailer Segment ID";
        END;
      END ELSE BEGIN
        HeaderSegIDFound := FALSE;
        BegSegIDFound := FALSE;
        TrailerSegIDFound := FALSE;
      END;

      TestDecimalValue := 5 / 3;
      TestTextFormat := FORMAT(TestDecimalValue,4,1);
      DecimalSymbol := COPYSTR(TestTextFormat,2,1);
      FileWithoutHeaderSegment := FALSE;

      EDISegment.SETRANGE("Trade Partner No.",CurrentEDIDocument."Trade Partner No.");
      EDISegment.SETRANGE("Navision Document",CurrentEDIDocument."Navision Document");
      EDISegment.SETRANGE("EDI Document No.",CurrentEDIDocument."EDI Document No.");
      EDISegment.SETRANGE(Version,CurrentEDIDocument.Version);
      IF AckOnly = FALSE THEN BEGIN
        EDISegment.FIND('-');
        IF EDISegment."Segment Type" = EDISegment."Segment Type"::Command THEN BEGIN
          EDISegment2.COPY(EDISegment);
          EDISegment2.NEXT;
          EDISegment2.TESTFIELD(Segment);
          FirstSegment := EDISegment2.Segment;
          IF NOT DelimitedFlatFile THEN
            FileWithoutHeaderSegment := TRUE;
        END ELSE BEGIN
          EDISegment.TESTFIELD(Segment);
          FirstSegment := EDISegment.Segment;
        END;

        i := 0;
        REPEAT
          IF EDISegment."Segment Type" = EDISegment."Segment Type"::Command THEN
            CASE EDISegment.Segment OF
              'LINE BEGIN':
                BEGIN;
                  StoreSegID := TRUE;
                  CLEAR(LineSegmentArray);
                  EDISegment.NEXT;
                  FirstDetailSegment := EDISegment.Segment;
                  IF (FirstDetailSegment = '') AND (AllowBlankSegmentID) THEN
                    FirstDetailSegment := '?';
                  IF (STRLEN(FirstDetailSegment) > 0) AND
                     (STRLEN(FirstDetailSegment) < EDITemplate."Segment ID Length")
                  THEN
                    EvaluateCurrSegment := TRUE
                  ELSE
                    EvaluateCurrSegment := FALSE;
                END;
              'LINE END':
                BEGIN;
                  StoreSegID := FALSE;
                  StoreSegComplete := TRUE;
                  IF EDISegment.NEXT <> 0 THEN
                    FirstTotalSegment := EDISegment.Segment
                  ELSE
                    FirstTotalSegment := '';
                END;
            END;
          IF StoreSegID THEN BEGIN
            i := i + 1;
            IF (i = 1) AND (FirstDetailSegment = '?') THEN
              LineSegmentArray[i] := FirstDetailSegment
            ELSE
              LineSegmentArray[i] := EDISegment.Segment;
          END;
        UNTIL (EDISegment.NEXT = 0) OR (StoreSegComplete);
      END;

      EDIConditionalSequence.RESET;
      EDIConditionalSequence.DELETEALL;

      CheckInternalDocNo := '';
      EvalSegment;

      IF BegSegIDError OR HdrSegIDError THEN
        EXIT;

      EndOfFile := FALSE;
      IF GUIALLOWED THEN
        ProgressWindow.CLOSE;
      StreamReader.Close;
      EDIFile.CLOSE;
      EDIRecDocHdr."Flat File Header ID" := FlatFileHdrID;
      EDIRecDocHdr."Flat File Trailer ID" := FlatFileTrailerID;
      ValidateReferenceFields;
      EDIRecDocHdr.MODIFY;

      EDIRecDocHeader.GET(CheckInternalDocNo);
      EDIRecDocHdr."Interface File Name" := EDIFileName;
      IF EDISetup."Rename Import File" THEN BEGIN
        EDISetup."Import Rename Sequence No." := INCSTR(EDISetup."Import Rename Sequence No.");
        NewEDIFileName := EDIFileName;
      //>> LS002
      //  NewEDIFileName := INSSTR(
      //    NewEDIFileName,'-' + EDISetup."Import Rename Sequence No.",STRPOS(EDIFileName,'.'));
      //  EDIRecDocHdr."Interface File Name" := NewEDIFileName;
      //  IF NOT RENAME(EDIFileName,NewEDIFileName) THEN
      //    ERROR(Text008,EDIFileName,NewEDIFileName);
      //END;
      //EDISetup.MODIFY;
        IF STRPOS(EDIFileName, '.') = 0 THEN BEGIN
          FileNameLength := STRLEN(EDIFileName) + 1;
          NewEDIFileName := EDIFileName;
          NewEDIFileName := INSSTR(
            NewEDIFileName,'-' + EDISetup."Import Rename Sequence No." + '.edi',FileNameLength);
         END ELSE
          NewEDIFileName := INSSTR(
            NewEDIFileName,'-' + EDISetup."Import Rename Sequence No.",STRPOS(EDIFileName,'.'));
        IF STRPOS(EDIFileName,'.') = 0 THEN BEGIN
          FileNameLength := STRLEN(EDIFileName) + 1;
          NewEDIFileName := INSSTR(
            NewEDIFileName,'-' + EDISetup."Import Rename Sequence No." + '.edi',FileNameLength);
        END ELSE
          NewEDIFileName := INSSTR(
            NewEDIFileName,'-' + EDISetup."Import Rename Sequence No.",STRPOS(EDIFileName,'.'));
        EDIRecDocHdr."Interface File Name" := NewEDIFileName;
        IF NOT RENAME(EDIFileName,NewEDIFileName) THEN
          ERROR(Text008,EDIFileName,NewEDIFileName);
        EDISetup.MODIFY;
        COMMIT;
      END;

      IF (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::"X12 Delimited") OR
         (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::"EDIFACT Delimited") OR
         ((EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::None) AND
          (BegSegIDError = FALSE) AND (HdrSegIDError = FALSE))
      THEN BEGIN
        InsertPos := 0;
        ArchiveEDIFileName := NewEDIFileName;
        WHILE STRPOS(COPYSTR(ArchiveEDIFileName,InsertPos + 1),'\') > 0 DO
          InsertPos := InsertPos + STRPOS(COPYSTR(ArchiveEDIFileName,InsertPos + 1),'\');
        ArchiveEDIFileName := INSSTR(NewEDIFileName,'\Archive',InsertPos);
        EDIRecDocHdr."Interface File Name" := ArchiveEDIFileName;
        IF COPY(NewEDIFileName,ArchiveEDIFileName) THEN ;
        IF ERASE(NewEDIFileName) THEN ;
      END;
      EDIRecDocHdr."Shortcut Dimension 5 Code" := GlobalTPZDIVCode; //TPZ1940
      //<TPZ2561>
      //<TPZ2344>
      {IF ((EDITemplate."My Trading Partner No." = '152085346TLP')OR (EDITemplate."My Trading Partner No." ='948511605TLT')) THEN
        EDIRecDocHdr."Shortcut Dimension 5 Code" := 'L'
      ELSE
        EDIRecDocHdr."Shortcut Dimension 5 Code" := 'E';}
      //</TPZ2344>

      IF ((EDITemplate."My Trading Partner No." = '152085346TLP')OR (EDITemplate."My Trading Partner No." ='948511605TLT')) THEN
        EDIRecDocHdr."Shortcut Dimension 5 Code" := 'L'
      ELSE IF (EDITemplate."My Trading Partner No." = '152085346') THEN
        EDIRecDocHdr."Shortcut Dimension 5 Code" := 'E'
      ELSE IF (EDITemplate."My Trading Partner No." = '152085346TCP') OR (EDITemplate."My Trading Partner No." = '152085346TCT') THEN
        EDIRecDocHdr."Shortcut Dimension 5 Code" := 'p';
      //</TPZ2561>

      //Utkarsh
      IF EDIRecDocHdr."Trade Partner No." = 'WAYFAIR' THEN
        EDIRecDocHdr."Shortcut Dimension 5 Code" := 'L';
      //Utkarsh

      //<TPZ2499>
      EDIRecDocFieldsISR.RESET;
      EDIRecDocFieldsISR.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocFieldsISR.SETRANGE("Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
      EDIRecDocFieldsISR.SETRANGE("NAV Table No.",36);
      EDIRecDocFieldsISR.SETRANGE("Nav Field No.",2);
      IF EDIRecDocFieldsISR.FIND('-') THEN BEGIN
        CustomerDivision.RESET;
        IF CustomerDivision.GET(EDIRecDocFieldsISR."Field Text Value",EDIRecDocHdr."Shortcut Dimension 5 Code") THEN BEGIN
           EDIRecDocHdr."ISR Code" := CustomerDivision."ISR Code"
        END ELSE BEGIN
           EDICustCrossRefISR.RESET;
           EDICustCrossRefISR.SETRANGE("EDI Sell To Code",EDIRecDocFieldsISR."Field Text Value");
           IF EDICustCrossRefISR.FINDFIRST THEN BEGIN
            CustomerDivision.RESET;
              IF CustomerDivision.GET(EDICustCrossRefISR."Navision Sell To Code",EDIRecDocHdr."Shortcut Dimension 5 Code") THEN
                EDIRecDocHdr."ISR Code" := CustomerDivision."ISR Code";
           END;
        END;
      END;
      //<//TPZ2499>
      EDIRecDocHdr.MODIFY;

      IF ReverseCond THEN
        EvaluateReverseConditional;

      DataErrorExist := FALSE;
      InternalDocNo := EDIRecDocHdr."Internal Doc. No.";
      IF (EDISetup."Eval. XRef at Doc. Import") AND
         (EDIRecDocHdr."Navision Document" <>'I_SLSGEN') AND
         (EDITradePartner."Disable Eval XRef at DocImport" = FALSE)
      THEN BEGIN
        IF EDISetup."Enable General Cross Ref." THEN BEGIN
          IF NOT EDITradePartner."Disable General Cross Ref." THEN BEGIN
            EDIRecDocHdr."Data Error" := TRUE;
            EDIRecDocHdr.MODIFY;
            COMMIT;

            EDIEvaluateXRefSeparately.SetProcessID(1);
            IF NOT EDIEvaluateXRefSeparately.RUN(EDIRecDocHdr) THEN BEGIN
              EDIRecDocHdr2.GET(EDIRecDocHdr."Internal Doc. No.");
              EDIRecDocHdr2."Error Message Text" := COPYSTR(GETLASTERRORTEXT,1,250);
            END ELSE BEGIN
              EDIRecDocHdr2.GET(EDIRecDocHdr."Internal Doc. No.");
              EDIRecDocHdr2."Gen. XRef Processed On Import" := TRUE;
              EDIRecDocHdr2."Data Error" := FALSE;
            END;
            EDIRecDocHdr2.MODIFY;
            COMMIT;
          END;
          DataErrorExist := EDIRecDocHdr2."Data Error";
        END;
        IF (EDISetup."Pre-evaluate Std. Cross Ref.") AND
           ((EDIRecDocHdr."Navision Document" = 'I_SLSORD') OR
            (EDIRecDocHdr."Navision Document" = 'I_SLSQUO') OR
            (EDIRecDocHdr."Navision Document" = 'I_SLSINV') OR
            (EDIRecDocHdr."Navision Document" = 'I_SLSCRM')) AND
           (NOT EDITradePartner."Disable Pre-evaluation")
        THEN BEGIN
          EDIRecDocHdr.GET(InternalDocNo);
          EDIRecDocHdr."Data Error" := TRUE;
          EDIRecDocHdr.MODIFY;
          COMMIT;

          EDIEvaluateXRefSeparately.SetProcessID(2);
          IF NOT EDIEvaluateXRefSeparately.RUN(EDIRecDocHdr) THEN BEGIN
            EDIRecDocHdr2.GET(EDIRecDocHdr."Internal Doc. No.");
            EDIRecDocHdr2."Error Message Text" := COPYSTR(GETLASTERRORTEXT,1,250);
          END ELSE BEGIN
            EDIRecDocHdr2.GET(EDIRecDocHdr."Internal Doc. No.");
            EDIRecDocHdr2."Std. XRef Processed On Import" := TRUE;
            IF DataErrorExist = FALSE THEN
              EDIRecDocHdr2."Data Error" := FALSE;
          END;
          EDIRecDocHdr2.MODIFY;
          COMMIT;
        END;
      END;

      IF (EDIRecDocHdr."Navision Document" = 'I_SLSGEN') AND
         (EDIDocument."Generic Document Received")
      THEN
        BEGIN
          CLEAR(CreateEDIAlert);
          CreateEDIAlert.CreateAlertGenericDoc(EDIRecDocHdr."Internal Doc. No.",1);
        END;

      COMMIT;

      CASE DocumentNo OF
        'I_FUNCTACK':
          EDIRecDocHdr.ProcessReceiveDocument(FALSE);
        'I_SLSORD','I_SLSQUO','I_SLSINV':
          IF EDITemplate."Create Sls. Order on Rec." THEN
            EDIRecDocHdr.CreateSalesOrdersAll(DocumentNo);
        'U_PURWSA', 'U_PURORD','I_PURINV','I_PURORD':
          IF EDITemplate."Update Purch. Order on Rec." THEN
          EDIRecDocHdr.PurchaseOrderUpdateAll(DocumentNo);
        'I_SLSCRM':
          IF EDITemplate."Create Sls. Cr. Memo on Rec." THEN
            EDIRecDocHdr.CreateSalesOrdersAll(DocumentNo);
        'I_SLSCUS':
          IF EDITemplate."Update Org. Relation on Rec." THEN
            EDIRecDocHdr.OrgRelationshipUpdateAll(DocumentNo);
        'I_SLSASN','I_SLSWSA':
          IF EDITemplate."Auto. Process 3PL Ship Notice" THEN
            EDIRecDocHdr.ProcessWarehouseShipNoticeAll(DocumentNo);
        'I_INVRPT','I_INVADJ':
          IF EDITemplate."Create Location Invt. Advice" THEN
            EDIRecDocHdr.ProcessInventoryAdviceAll(DocumentNo);
        'I_PURDOC':
          IF EDITemplate."Create Purch. Document on Rec." THEN
            EDIRecDocHdr.CreatePurchDocsAll(DocumentNo);
        'I_FGTINV':
          IF EDITemplate."Create Purch. Document on Rec." THEN
            EDIRecDocHdr.CreateFreightInvoiceAll(DocumentNo);
        'I_TFRORD':
          IF EDITemplate."Create Transfer Order on Rec." THEN
            EDIRecDocHdr.CreateTransferOrderAll(DocumentNo);
        'U_ROUTEREQ':
          IF EDITemplate."Update Routing Req. on Rec." THEN
            EDIRecDocHdr.RoutingReqUpdateAll(DocumentNo);
        'U_SLSORD','U_SLSWSA':
          IF EDITemplate."Update Sls. Order on Rec." THEN
            EDIRecDocHdr.SalesOrderUpdateAll(DocumentNo);
        'U_TFRORD':
          IF EDITemplate."Update Transfer On Receipt" THEN
            EDIRecDocHdr.TransferOrderUpdateAll(DocumentNo);
        'I_PMTADV':
          IF EDITemplate."Create Pmt. Advice On Receipt" THEN
            EDIRecDocHdr.CreatePaymentAdviceAll(DocumentNo);
      END;

      EDIConditionalSequence.RESET;
      EDIConditionalSequence.DELETEALL;

      EXIT(TRUE);
    END;

    PROCEDURE OpenEDIFile@1(CurrentEDIDocument@1240030001 : Record 14002353;FileInfo@1240020003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileInfo") InputFileFound@1240030000 : Boolean;
    VAR
      FileNameEndPos@1240020000 : Integer;
      EndPosition@1240020001 : Integer;
      InterfaceFileLen@1240020005 : Integer;
      InterfaceFilePath@1240020002 : Text[250];
      DirectoryFileName@1240020004 : Text[250];
      InterfaceFileName@1240020006 : Text[250];
    BEGIN
      EDIFileName := CurrentEDIDocument."Interface File";
      IF EDIFileName = '' THEN
        ERROR(
          Text009,
          CurrentEDIDocument."Trade Partner No.",CurrentEDIDocument."Navision Document",
          CurrentEDIDocument.Version,CurrentEDIDocument.Type);

      IF (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::None) THEN BEGIN
        InputFileFound := FALSE;
        EndPosition := 0;
        WHILE STRPOS(COPYSTR(EDIFileName,EndPosition + 1),'\') > 0 DO
          EndPosition := EndPosition + STRPOS(COPYSTR(EDIFileName,EndPosition + 1),'\');
        InterfaceFilePath := COPYSTR(EDIFileName,1,EndPosition - 1);
        FileNameEndPos := STRPOS(EDIFileName,'*');
        IF FileNameEndPos = 0 THEN BEGIN
          EDIFile.TEXTMODE(FALSE);
          InputFileFound := EDIFile.OPEN(EDIFileName,TEXTENCODING::Windows);
        END ELSE BEGIN
          InterfaceFileLen := EDITemplate."File Name Length";
          DirectoryFileName := FileInfo.Name;
          IF (EDITemplate."File Name Begin Position" = 0) OR (EDITemplate."File Name Length" = 0) THEN
            ERROR(Text018,EDITemplate.Code);
          DirectoryFileName :=
            UPPERCASE(
              COPYSTR(
                DirectoryFileName,
                EDITemplate."File Name Begin Position",
                EDITemplate."File Name Length"));
          InterfaceFileName :=
            UPPERCASE(
              COPYSTR(
                EDIFileName,(EndPosition + 1),InterfaceFileLen));
          IF DirectoryFileName = InterfaceFileName THEN BEGIN
            EDIFileName := FORMAT(FileInfo.Directory) + '\' + FORMAT(FileInfo.Name);
            EDIFile.TEXTMODE(FALSE);
            InputFileFound := EDIFile.OPEN(FORMAT(FileInfo.Directory) + '\' + FORMAT(FileInfo.Name));
          END;
        END;
      END ELSE BEGIN
        EDIFile.TEXTMODE(FALSE);
        InputFileFound := EDIFile.OPEN(EDIFileName,TEXTENCODING::Windows); //Leila
      END;

      EXIT(InputFileFound);
    END;

    PROCEDURE EvalSegment@3();
    VAR
      EDIRecDocField@1240020000 : Record 14002359;
    BEGIN
      t := 0;
      ProcessingLines := FALSE;
      ReverseCondGroup := 0;
      PreviousSegment := '';
      EDIFile.CREATEINSTREAM(IStream);
      CASE EDITemplate."Encoding Type" OF
        EDITemplate."Encoding Type"::ASCII:
          StreamReader := StreamReader.StreamReader(IStream,encoding.ASCII);
        EDITemplate."Encoding Type"::Unicode:
          StreamReader := StreamReader.StreamReader(IStream,encoding.Unicode);
        EDITemplate."Encoding Type"::Default:
          StreamReader := StreamReader.StreamReader(IStream,encoding.Default);
      END;
      IF EDITemplate."File Format" = EDITemplate."File Format"::Delimited THEN
        LoadDelimiters;
      REPEAT
        IF EndOfFile THEN
          EXIT;
        IF ReadEDILine THEN BEGIN
          IF GUIALLOWED THEN
            ProgressWindow.UPDATE(4,COPYSTR(ReadLine[1],1,50));
          LoadCurrSegment;
          t := t + 1;

      // Check for line Segment Group
          si := 0;
          IF FirstTotalSegment = CurrSegment THEN
            ProcessingLines := FALSE;
          IF NOT ProcessingLines THEN
            LineSegment := FALSE;
          REPEAT
            si := si + 1;
            IF EvaluateCurrSegment THEN BEGIN
              CurrSegment2 := CurrSegment;
              IF AllowBlankSegmentID THEN BEGIN
                IF (CurrSegment <> '') AND (CurrSegment <> FirstSegment)  THEN BEGIN
                  PrevSegment := CurrSegment;
                  CurrSegment2 := '?';
                END;
              END;
              IF DELCHR(CurrSegment2,'>',' ') = FirstDetailSegment THEN BEGIN
                CurrSegment := CurrSegment2;
                CurrSegment := DELCHR(CurrSegment,'>',' ');
              END;
            END;
            IF LineSegmentArray[si] = CurrSegment THEN BEGIN
              IF si = 1 THEN BEGIN
                ProcessingLines := TRUE;
                SegmentGroup := SegmentGroup + 1;
              END;
              LineSegment := TRUE;
            END;
          UNTIL (LineSegmentArray[si] = '') OR (LineSegment);
          IF (NOT LineSegment) OR (NOT ProcessingLines) THEN
            SegmentGroup := 0;
          IF CurrSegment2 = '?' THEN BEGIN
            CurrSegment := PrevSegment;
            CurrSegment2 := PrevSegment;
          END;

         InsertRecDocHdr := FALSE;

      // Bypass ISA segment
          IF CurrSegment = 'ISA' THEN BEGIN
            GetControlNo;
            ISABuffer := ReadLine[1];
            ReadEDILine;
            IF GUIALLOWED THEN
              ProgressWindow.UPDATE(4,COPYSTR(ReadLine[1],1,50));
            LoadCurrSegment;
          END;

          IF DelimitedFlatFile AND HeaderSegIDFound THEN BEGIN
            IF ((CurrSegment = HeaderSegID) AND
                (t = 1)) OR
               ((CurrSegment = (HeaderSegID + ' ')) AND
                (t = 1))
            THEN BEGIN
              GetControlNo;
              t := t + 1;
              ReadEDILine;
              LoadCurrSegment;
              LoadTradePtnr;
              InsertRecDocHdr := TRUE;
            END ELSE
              IF t = 1 THEN BEGIN
                HdrSegIDError := TRUE;
                EXIT;
              END ELSE
                BypassUnusedEnvSeg;
          END;

          IF (CurrSegment = 'ST ') OR
             (CurrSegment = 'SE ') OR
             (CurrSegment = 'UNH') OR
             ((CurrSegment = 'UNT') AND (ProcessingLines = FALSE))
          THEN BEGIN
            GetControlNo;
            BypassUnusedEnvSeg;
          END;
          IF (CurrSegment = '') AND (AllowBlankSegmentID = FALSE) THEN
            EXIT;
          IF (CurrSegment = '000') THEN BEGIN
            InterchangeControlNo := COPYSTR(ReadLine[1],87,9);
            GroupControlNo := COPYSTR(ReadLine[1],96,9);
            TranSetControlNo := COPYSTR(ReadLine[1],105,9);
          END;

          IF DelimitedFlatFile AND BegSegIDFound THEN BEGIN
            IF ((CurrSegment = BegSegID) AND
                (t = 1)) OR
               ((CurrSegment = (BegSegID + ' ')) AND
                (t = 1))
            THEN BEGIN
              LoadTradePtnr;
              InsertRecDocHdr := TRUE;
            END ELSE
              IF t = 1 THEN BEGIN
                BegSegIDError := TRUE;
                EXIT;
              END;
          END;

          IF DelimitedFlatFile AND TrailerSegIDFound THEN BEGIN
            IF (CurrSegment = TrailerSegID) OR
               (CurrSegment = (TrailerSegID + ' '))
            THEN BEGIN
              GetControlNo;
              BypassUnusedEnvSeg;
              IF (CurrSegment = '') THEN
                EXIT;
            END;
          END;

          IF (CurrSegment = '000') OR
             (CurrSegment = 'GS ') OR
             (CurrSegment = '//') OR
             (COPYSTR(ReadLine[1],1,6) = '*GE850') OR
             (CurrSegment = 'UNB') OR
      // >> LS001
                    ((NOT DelimitedFlatFile) AND (CurrSegment = EDITemplate."Header Segment ID")) OR
                    (CurrSegment = '0000')
      // << LS001
          THEN
            LoadTradePtnr
          ELSE BEGIN
            IF NOT DelimitedFlatFile THEN
              InsertRecDocHdr := TRUE;
            IF (EDITemplate."Interface File Type" <> EDITemplate."Interface File Type"::Harbinger) AND
               (EDITemplate."Interface File Type" <> EDITemplate."Interface File Type"::Sterling) AND
               (EDITemplate."Interface File Type" <> EDITemplate."Interface File Type"::"GE PC EDI")
            THEN
              LoadTradePtnr;
            IF (DelimitedFlatFile) AND
               ((HeaderSegIDFound = TRUE) OR
                (BegSegIDFound)) AND
               (t > 1)
            THEN
              InsertRecDocHdr := TRUE;
          END;

      // >> LS001
          IF (CurrSegment = '0200') OR  (CurrSegment = '0299') OR
      //     (CurrSegment = '0232') OR  (CurrSegment = '9999') OR (CurrSegment = '0290')
             (CurrSegment = '9999') OR (CurrSegment = '0290')
             THEN BEGIN
                 ReadLine[1] := '';
                 CurrSegment := '';
                 IF NOT ReadEDILine THEN
                   EXIT;
                 LoadCurrSegment;
                 IF (CurrSegment = '9999') OR (CurrSegment = '0290')OR (CurrSegment = '0299') THEN
                    InsertRecDocHdr := FALSE;
              END;

      // << LS001
          IF InsertRecDocHdr THEN BEGIN
            EDIDocument.SETRANGE("Trade Partner No.",EDITradePartner."No.");
            EDIDocument.SETRANGE("Navision Document",DocumentNo);
            EDIDocument.SETRANGE("EDI Document No.",EDIDocumentNo);
            EDIDocument.SETFILTER(Status,'<>%1',EDIDocument.Status::Inactive);
            IF NOT EDIDocument.FIND('-') THEN
              ERROR(Text010,DocumentNo,EDITradePartner."No.");
            EDISegment.SETRANGE("Trade Partner No.",EDITradePartner."No.");
            EDISegment.SETRANGE("Navision Document",EDIDocument."Navision Document");
            EDISegment.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
            EDISegment.SETRANGE(Version,EDIDocument.Version);
            LoadCurrSegment;
            CurrSegment := DELCHR(CurrSegment,'>',' ');
            EDISegment.SETRANGE(Segment,CurrSegment);
            IF (NOT EDISegment.FIND('-')) AND (AckOnly = FALSE) THEN
              IF DelimitedFlatFile THEN BEGIN
                IF AllowBlankSegmentID THEN BEGIN
                  IF (CurrSegment <> '') AND (CurrSegment <> FirstSegment)  THEN BEGIN
                    CurrSegment := '';
                    EDISegment.SETRANGE(Segment);
                    EDISegment.SETRANGE(Segment,CurrSegment);
                    IF NOT EDISegment.FIND('-') THEN
                     ERROR(
                       Text011,CurrSegment,EDITradePartner."No.",EDIDocument."EDI Document No.");
                  END ELSE
                    ERROR(
                      Text011,CurrSegment,EDITradePartner."No.",EDIDocument."EDI Document No.");
                END ELSE
                  ERROR(
                    Text011,CurrSegment,EDITradePartner."No.",EDIDocument."EDI Document No.");
              END ELSE
                ERROR(
                  Text011,CurrSegment,EDITradePartner."No.",EDIDocument."EDI Document No.");
            IF (EDISegment.Segment = FirstSegment) OR (AckOnly)  THEN
              IF (FileWithoutHeaderSegment = FALSE)  OR
                 ((FileWithoutHeaderSegment) AND (DocumentCount = 0))
            THEN BEGIN
              EDISetup."Last Internal Doc. No." := INCSTR(EDISetup."Last Internal Doc. No.");
              LastInternalDocNo := EDISetup."Last Internal Doc. No.";
              EDISetup.MODIFY;
              COMMIT;
              IF GUIALLOWED THEN
                ProgressWindow.UPDATE(2,LastInternalDocNo);
              DocumentCount := DocumentCount + 1;
              IF GUIALLOWED THEN
                ProgressWindow.UPDATE(3,DocumentCount);
              EDIRecDocHdr.INIT;

              EDIRecDocHdr."Company Name" := EDITradePartner."Company Name";
              EDIRecDocHdr."Trade Partner No." := EDITradePartner."No.";
              EDIRecDocHdr."Navision Document" := EDIDocument."Navision Document";
              EDIRecDocHdr."EDI Document No." := EDIDocument."EDI Document No.";
              EDIRecDocHdr."EDI Version" := EDIDocument.Version;
              EDIRecDocHdr."Internal Doc. No." := LastInternalDocNo;
              EDIRecDocHdr."EDI Template Code" := EDITemplate.Code;
              EDIRecDocHdr."Customer No." := '';
              EDIRecDocHdr."Date Received" := TODAY;
              EDIRecDocHdr."Time Received" := TIME;
              EDIRecDocHdr."Functional Identifier" := FunctionalID;
              EDIRecDocHdr."Group Control No." := GroupControlNo;
              EDIRecDocHdr."Transaction Set Control No." := TranSetControlNo;
              EDIRecDocHdr."Transaction Set Identifier" := TranSetID;
              EDIRecDocHdr."Interchange Control No." := InterchangeControlNo;
              EDIRecDocHdr."Funct. Ack. Required" := EDIDocument."Funct. Ack. Required";
              EDIRecDocHdr."Shipment Release" := EDIDocument."Shipment Release";
              EDIRecDocHdr."Enable Bulk Draw Down" := EDIDocument."Enable Bulk Draw Down";
              EDIRecDocHdr."Enable Forecast Release" := EDIDocument."Enable Forecast and Release";
              EDIRecDocHdr."Enable PO Change" := EDIDocument."Enable PO Change";
              EDIRecDocHdr."Whse. Ship. Order Required" := EDIDocument."Warehouse Ship Order Required";
              EDIRecDocHdr."Transaction Date"  := TransactionDate;
              EDIRecDocHdr."Transaction Time" := TransactionTime;
              EDIRecDocHdr."Same Day Ship Time" := EDIDocument."Same Day Ship Time";
              IF EDIDocument."Same Day Ship Time" <> 0T THEN
                EDIRecDocHdr."Use Same Day Ship Time" := TRUE
              ELSE
                EDIRecDocHdr."Use Same Day Ship Time" := FALSE;
              IF EDIDocument."Enable PO Change" AND NOT EDIDocument."Enable Forecast and Release" THEN
                EDIRecDocHdr."Evaluate PO Change" := TRUE;
              EDIRecDocHdr."PO Change Generates Change Ack" :=
                EDITemplate."PO Change Generates Change Ack";
              EDIRecDocHdr."Process Receive Doc. Job Ready" := TRUE;
              EDIRecDocHdr."Price Discrepancy Check Req." :=
                EDITemplate."Price Discrepancy Rel. Block";
              IF EDITemplate."Price Discrepancy Rel. Block" THEN
                EDIRecDocHdr."Price Discrepancy Rel. Block" := TRUE;
              EDIRecDocHdr."My GS Trade Partner ID Match" := EDIDocument."My GS Trade Partner ID Match";
              EDIRecDocHdr.INSERT;
              CheckInternalDocNo := EDIRecDocHdr."Internal Doc. No.";
              Imported := Imported + 1;
              IF ((EDITemplate."File Format" = EDITemplate."File Format"::Fixed) OR
                  (DelimitedFlatFile)) AND
                 (Imported > 1)
               THEN
                 SegmentGroup := 0;
              CurrLineNo := 0;
      // >> LS003
              SegmentGroup := 0;
      // << LS003
              IF AckOnly THEN
                EXIT;
            END;
            IF CheckInternalDocNo = '' THEN
              ERROR(Text017);
            EDIElement.SETRANGE("Trade Partner No.",CurrTradePtnr);
            EDIElement.SETRANGE("Navision Document",EDIDocument."Navision Document");
            EDIElement.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
            EDIElement.SETRANGE(Version,EDIDocument.Version);
            EDIElement.SETRANGE(Type,EDIDocument.Type);
            EDIElement.SETRANGE(Segment,CurrSegment);
            IF EDITemplate."Interface File Type" =
              EDITemplate."Interface File Type"::"EDIFACT Delimited"
            THEN BEGIN
              EDIElement.FIND('-');
              InputPos := 0;
              ReadBuffer := ReadLine[i];
              LineLength := STRPOS(ReadBuffer,FORMAT(SegmentDelChar));
              IF LineLength = 0 THEN
                ERROR(Text012);
              REPEAT
                REPEAT
                  InputPos := InputPos + 1;
                  IF InputPos > LineLength THEN
                    ERROR(Text012);
                  IF InputPos > 1 THEN BEGIN
                    ReleaseCharacter := FALSE;
                    IF ReadBuffer[InputPos-1] = '?' THEN
                      ReleaseCharacter := TRUE;
                  END;
                UNTIL (ReadBuffer[InputPos] = ComponentDelChar) OR
                      ((ReadBuffer[InputPos] = ElementDelChar) AND
                       (ReleaseCharacter = FALSE)) OR
                      (InputPos = LineLength);
                EDIElement.NEXT;
                IF EDIElement."Use Component Delimiter" AND
                   (ReadBuffer[InputPos] <> ComponentDelChar) AND
                   (ReadBuffer[InputPos] <> SegmentDelChar)
                THEN BEGIN
                  LineLength := LineLength + 1;
                  IF LineLength > 1024 THEN
                    ERROR(Text012);
                  ReadBuffer := INSSTR(ReadBuffer,ComponentDel,InputPos);
                END;
              UNTIL InputPos = LineLength;
              ReadLine[i] := ReadBuffer;
            END;
            BeginPoss := 1;
            i := 1;
            IF NOT EDIElement.FIND('-') THEN
              ERROR(Text013,CurrSegment);
            NewSegment := TRUE;
            IF NewSegment THEN BEGIN
              ReverseCondGroup := ReverseCondGroup + 1;
              IF CurrSegment <> PreviousSegment THEN
                SegmentSequence := 0;
              SegmentSequence := SegmentSequence + 1;
            END;
            REPEAT
              WrapTextComplete := TRUE;
              EDIRecDocFields.INIT;
              EDIRecDocFields."New Segment" := NewSegment;
              NewSegment := FALSE;
              EDIRecDocFields."Trade Partner No." := CurrTradePtnr;
              EDIRecDocFields."Navision Document" := EDIRecDocHdr."Navision Document";
              EDIRecDocFields."EDI Document No." := EDIDocument."EDI Document No.";
              EDIRecDocFields."EDI Version" := EDIDocument.Version;
              EDIRecDocFields."Internal Doc. No." := LastInternalDocNo;
              EDIRecDocFields.Segment := CurrSegment;
              EDIRecDocFields."Segment Line" := EDIElement."Processing Sequence";
              EDIRecDocFields.Element := EDIElement.Element;
              CurrLineNo := CurrLineNo + 1;
              EDIRecDocFields."Line No." := CurrLineNo;
              EDIRecDocFields."Field Name" := EDIElement."Field Name";
              EDIRecDocFields."Nav Field No." := EDIElement."NAV Field No.";
              EDIRecDocFields."Field Type" := EDIElement."NAV Data Type";
              EDIRecDocFields."Field Description" := '';
              EDIRecDocFields."EDI Description" := '';
              EDIRecDocFields."NAV Table No." := EDIElement."NAV Table No.";
              EDIRecDocFields.Trigger := EDIElement.Trigger;
              EDIRecDocFields.Viewable := EDIElement.Viewable;
              EDIRecDocFields."Item Description" := EDIElement."Item Description";
              EDIRecDocFields.Type := EDIElement.Type;
              EDIRecDocFields."Processing Sequence" := EDIElement."Processing Sequence";
              EDIRecDocFields.Print := EDIElement.Print;
              EDIRecDocFields.Column := EDIElement.Column;
              EDIRecDocFields."Columns Per Line" := EDIElement."Columns Per Line";
              EDIRecDocFields."New Line" := EDIElement."New Line";
              EDIRecDocFields."Data Type" := EDIElement."Data Type";
              EDIRecDocFields."Copy String Position" := EDIElement."Copy String Position";
              EDIRecDocFields."Copy String Length" := EDIElement."Copy String Length";
              EDIRecDocFields."Append to Field Contents" := EDIElement."Append to Field Contents";
              EDIRecDocFields."Insert into Field Contents" := EDIElement."Insert into Field Contents";
              EDIRecDocFields."Insert Position" := EDIElement."Insert Position";
              EDIRecDocFields."Reverse Sign" := EDIElement."Reverse Sign";
              EDIRecDocFields."Reverse Cond. Group" := ReverseCondGroup;
              EDIRecDocFields."Forecast Date Formula" := EDIElement."Forecast Date Formula";
              EDIRecDocFields."Wrap Text" := EDIElement."Wrap Text";
              EDIRecDocFields."Line Type" := EDIElement."Line Type";
              EDIRecDocFields."Separator Type" := EDIElement."Separator Type";
              EDIRecDocFields."Segment Sequence" := SegmentSequence;
              EDIRecDocFields."Validation Type" := EDIElement."Validation Type";
              EDIRecDocFields."Substitution Value" := EDIElement."Substitution Value";
              EDIRecDocFields.Multiplier := EDIElement.Multiplier;
              EDIRecDocFields."Cross Reference ID Type" := EDIElement."Cross Reference ID Type";
              EDIRecDocFields."Disable General Cross Ref." := EDIElement."Disable General Cross Ref.";
              IF EDIElement."Wrap Text" THEN
                WrapText := TRUE
              ELSE
                WrapText := FALSE;
              IF BeginPoss + EDIElement.Length <= 1024 THEN BEGIN
                EDIRecDocFields."Field Text Value" := COPYSTR(
                  ReadLine[i],BeginPoss,EDIElement.Length);
                IF EDITemplate."File Format" = EDITemplate."File Format"::Delimited THEN BEGIN
                  EDIRecDocFields."Field Text Value" := FormatDelimited(EDIRecDocFields."Field Text Value");
                  EDIElement.Length := DelimiterPos;
                END;
                BeginPoss := BeginPoss + EDIElement.Length;
                IF BeginPoss = 1025 THEN BEGIN
                  BeginPoss := 1;
                  i := i + 1;
                END;
              END ELSE BEGIN
                EDIRecDocFields."Field Text Value" := COPYSTR(
                  ReadLine[i],BeginPoss,1024);
                InsertPoss := 1025 - BeginPoss;
                InsertLen := EDIElement.Length - InsertPoss;
                i := i + 1;
                BeginPoss := 1;
                EDIRecDocFields."Field Text Value" := INSSTR(EDIRecDocFields."Field Text Value",
                  COPYSTR(ReadLine[i],BeginPoss,InsertLen),InsertPoss + 1);
                BeginPoss := BeginPoss + InsertLen;
                IF WrapText THEN
                  WrapTextComplete := FALSE;
              END;
              // Test required length
              EvalString := DELCHR(EDIRecDocFields."Field Text Value",'>',' ');
              EDIRecDocFields."Field Text Value" := DELCHR(EDIRecDocFields."Field Text Value",'>',' ');
              IF (EDIElement."Minimum Length" <> 0) AND
                 (STRLEN(EvalString) < EDIElement."Minimum Length")
              THEN BEGIN
                EDIRecDocFields."Error Description" := STRSUBSTNO(Text014,EDIElement."Minimum Length");
                EDIRecDocHdr.GET(EDIRecDocHdr."Internal Doc. No.");
                EDIRecDocHdr."Data Error" := TRUE;
                EDIRecDocHdr.MODIFY;
              END;
              EDIElement.CALCFIELDS(Conditional);

              // Substitution Value
              IF (EDIRecDocFields."Substitution Value" <> '') AND
                 (EDIElement.Conditional = FALSE)
              THEN BEGIN
                EDIRecDocFields."Received EDI Value" := EDIRecDocFields."Field Text Value";
                IF UPPERCASE(EDIRecDocFields."Substitution Value") = 'NULL' THEN
                  EDIRecDocFields."Field Text Value" := ''
                ELSE
                  EDIRecDocFields."Field Text Value" := EDIRecDocFields."Substitution Value";
                EDIRecDocFields.Substitution := TRUE;
              END;

              // format fields
              FormatFields;

              IF (EDIDocument."Delete Leading Blank Spaces") AND
                 (EDITemplate."File Format" = EDITemplate."File Format"::Delimited)
              THEN
                EDIRecDocFields."Field Text Value" := DELCHR(EDIRecDocFields."Field Text Value",'<',' ');
              EDIRecDocFields."Segment Group" := SegmentGroup;
              IF EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::Sterling THEN
                SterlingDec := COPYSTR(EDIRecDocFields."Field Text Value",1,1);
              OriginalFieldTextValue := EDIRecDocFields."Field Text Value";
              EDIElement.CALCFIELDS(EDIElement.Conditional);
              IF EDIElement.Conditional THEN BEGIN
                EDIConditional.RESET;
                EDIConditional.SETRANGE("Trade Partner No.",EDIElement."Trade Partner No.");
                EDIConditional.SETRANGE("Navision Document",EDIElement."Navision Document");
                EDIConditional.SETRANGE("EDI Document No.",EDIElement."EDI Document No.");
                EDIConditional.SETRANGE(Version,EDIElement.Version);
                EDIConditional.SETRANGE(Type,EDIElement.Type);
                EDIConditional.SETRANGE(Segment,EDIElement.Segment);
                EDIConditional.SETRANGE(Element,EDIElement.Element);
                ConditionalFound := FALSE;
                IF EDIConditional.FIND('-') THEN
                  REPEAT
                    EDIRecDocFields.Substitution := FALSE;
                    EDIRecDocFields."Received EDI Value" := '';
                    EDIRecDocFields."Substitution Value" := '';
                    ConditionalFound := FALSE;
                    IF (EDIConditional."Cond. Segment" = '') AND
                       (EDIConditional."Cond. Element" = '') AND
                       (EDIConditional."Cond. Value" = '') OR
                       (EDIConditional."Reverse Conditional")
                    THEN BEGIN
                      ConditionalFound := TRUE;
                      IF EDIConditional."Cond. Detail Segment" THEN BEGIN
                        ConditionalFound := FALSE;
                        IF EDIRecDocFields."Segment Group" <> 0 THEN
                          ConditionalFound := TRUE;
                      END;
                      IF EDIConditional."Cond. Non-Detail Segment" THEN BEGIN
                        ConditionalFound := FALSE;
                        IF EDIRecDocFields."Segment Group" = 0 THEN
                          ConditionalFound := TRUE;
                      END;
                      IF ConditionalFound THEN BEGIN
                        EDIRecDocFields."Cross Reference ID Type" := EDIConditional."Cross Reference ID Type";
                        IF EDIConditional."Use Conditional Sequence" THEN
                          EvaluateConditionalSequence;
                      END;
                      IF ConditionalFound THEN BEGIN
                        IF EDIConditional."Substitution Value" <> '' THEN BEGIN
                          EDIRecDocFields."Received EDI Value" := OriginalFieldTextValue;
                          IF UPPERCASE(EDIConditional."Substitution Value") = 'NULL' THEN
                            EDIRecDocFields."Field Text Value" := ''
                          ELSE
                            EDIRecDocFields."Field Text Value" := EDIConditional."Substitution Value";
                          EDIRecDocFields.Substitution := TRUE;
                          FormatFields;
                        END ELSE BEGIN
                          IF EDIRecDocFields.Substitution = TRUE THEN
                            EDIRecDocFields.Substitution := FALSE;
                          EDIRecDocFields."Field Text Value" := OriginalFieldTextValue;
                          EDIRecDocFields."Received EDI Value" := '';
                        END;
                        EDIRecDocFields4.RESET;
                        EDIRecDocFields4.SETRANGE("Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
                        IF EDIRecDocFields4.FIND('+') THEN BEGIN
                          EDIRecDocFields."NAV Table No." := EDIConditional."NAV Table No.";
                          EDIRecDocFields."Nav Field No." := EDIConditional."Nav Field No.";
                          EDIRecDocFields."Field Name" := EDIConditional."Field Name";
                          EDIRecDocFields.Trigger := EDIConditional.Trigger;
                          EDIRecDocFields.Print := EDIConditional.Print;
                          EDIRecDocFields.Column := EDIConditional.Column;
                          EDIRecDocFields."Columns Per Line" := EDIConditional."Columns Per Line";
                          EDIRecDocFields."New Line" := EDIConditional."New Line";
                          EDIRecDocFields."Copy String Position" := EDIConditional."Copy String Position";
                          EDIRecDocFields."Copy String Length" := EDIConditional."Copy String Length";
                          EDIRecDocFields."Append to Field Contents" :=
                            EDIConditional."Append to Field Contents";
                          EDIRecDocFields."Insert into Field Contents" :=
                            EDIConditional."Insert into Field Contents";
                          EDIRecDocFields."Insert Position" := EDIConditional."Insert Position";
                          EDIRecDocFields.Viewable := EDIElement.Viewable;
                          CurrLineNo := CurrLineNo + 1;
                          EDIRecDocFields."Line No." := CurrLineNo;
                          EDIRecDocFields."Reverse Conditional" := EDIConditional."Reverse Conditional";
                          EDIRecDocFields."Reverse Cond. Group" := ReverseCondGroup;
                          EDIRecDocFields."Forecast Date Formula" := EDIConditional."Forecast Date Formula";
                          EDIRecDocFields."Wrap Text" := EDIConditional."Wrap Text";
                          EDIRecDocFields."No Segment" := EDIConditional."Cond. Segment Not Present";
                          EDIRecDocFields."Line Type" := EDIConditional."Line Type";
                          EDIRecDocFields."Cond. Detail Segment" := EDIConditional."Cond. Detail Segment";
                          EDIRecDocFields."Cond. Non-Detail Segment" :=
                            EDIConditional."Cond. Non-Detail Segment";
                          EDIRecDocFields."Reverse Sign" := EDIConditional."Reverse Sign";
                          EDIRecDocFields."Separator Type" := EDIConditional."Separator Type";
                          EDIRecDocFields."Use Conditional Sequence" :=
                            EDIConditional."Use Conditional Sequence";
                          EDIRecDocFields."Segment Sequence" := SegmentSequence;
                          EDIRecDocFields."Validation Type" := EDIConditional."Validation Type";
                          EDIRecDocFields."Substitution Value" := EDIConditional."Substitution Value";
                          EDIRecDocFields.Multiplier := EDIConditional.Multiplier;
                          EDIRecDocFields."Cross Reference ID Type" := EDIConditional."Cross Reference ID Type";
                          EDIRecDocFields."Conditional Operator" := EDIConditional."Conditional Operator";
                          IF EDIElement.Viewable = FALSE THEN
                            EDIRecDocFields.Viewable := EDIConditional.Viewable;
                          EDIRecDocFields."Disable General Cross Ref." := EDIConditional."Disable General Cross Ref.";
                          EDIRecDocFields.INSERT;
                          IF EDIConditional."Reverse Conditional" THEN BEGIN
                            ReverseCond := TRUE;
                            EDIRecDocFields."Reverse Cond. Value-1" := EDIConditional."Cond. Value";
                            EDIRecDocFields."Reverse Cond. Value-2" := EDIConditional."Cond. Value-2";
                            EDIRecDocFields.MODIFY;
                          END;
                          IF EDIConditional."Reverse Sign" THEN BEGIN
                            EDIRecDocField.GET(EDIRecDocFields."Internal Doc. No.",CurrLineNo);
                            CASE EDIElement."Data Type" OF
                              EDIElement."Data Type"::"Dec Implied",EDIElement."Data Type"::"Dec Explicit":
                                BEGIN
                                  EDIRecDocField."Field Dec. Value" := -1 * EDIRecDocFields."Field Dec. Value";
                                  EDIRecDocField.MODIFY;
                                END;
                              EDIElement."Data Type"::Integer:
                                BEGIN
                                  EDIRecDocField."Field Integer Value" := -1 * EDIRecDocFields."Field Integer Value";
                                  EDIRecDocField.MODIFY;
                                END;
                            END;
                          END;
                        END;
                      END;
                    END ELSE BEGIN
                      ConditionalFound := FALSE;
                      EDIRecDocFields4.RESET;
                      EDIRecDocFields4.SETRANGE("Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
                      EDIRecDocFields4.SETRANGE(Segment,EDIConditional."Cond. Segment");
                      EDIRecDocFields4.SETRANGE(Element,EDIConditional."Cond. Element");
                      IF EDIRecDocFields4.FIND('+') THEN BEGIN
                        EDIRecDocFields.Substitution := FALSE;
                        EDIRecDocFields."Received EDI Value" := '';
                        EDIRecDocFields."Substitution Value" := '';
                        IF EDIRecDocFields4.Substitution = TRUE THEN BEGIN
                          CASE EDIConditional."Conditional Operator" OF
                            EDIConditional."Conditional Operator"::" ":
                              IF EDIConditional."Cond. Value" = UPPERCASE(EDIRecDocFields4."Received EDI Value") THEN
                                ConditionalFound := TRUE;
                            EDIConditional."Conditional Operator"::"<>":
                              IF EDIConditional."Cond. Value" <> UPPERCASE(EDIRecDocFields4."Received EDI Value") THEN
                                ConditionalFound := TRUE;
                          END;
                        END ELSE BEGIN
                          CASE EDIConditional."Conditional Operator" OF
                            EDIConditional."Conditional Operator"::" ":
                              IF EDIConditional."Cond. Value" =
                                UPPERCASE(EDIRecDocFields4."Field Text Value")
                              THEN
                                ConditionalFound := TRUE;
                            EDIConditional."Conditional Operator"::"<>":
                              IF EDIConditional."Cond. Value" <>
                                UPPERCASE(EDIRecDocFields4."Field Text Value")
                              THEN
                                ConditionalFound := TRUE;
                          END;
                        END;
                        IF ConditionalFound THEN BEGIN
                          IF (EDIConditional."Cond. Segment-2" <> '') THEN BEGIN
                            ConditionalFound := FALSE;
                            EDIRecDocFields4.SETRANGE(Segment,EDIConditional."Cond. Segment-2");
                            EDIRecDocFields4.SETRANGE(Element,EDIConditional."Cond. Element-2");
                            IF EDIRecDocFields4.FIND('+') THEN BEGIN
                              IF EDIRecDocFields4.Substitution = TRUE THEN BEGIN
                                CASE EDIConditional."Conditional Operator-2" OF
                                  EDIConditional."Conditional Operator-2"::" ":
                                    IF EDIConditional."Cond. Value-2" =
                                      UPPERCASE(EDIRecDocFields4."Received EDI Value")
                                    THEN
                                      ConditionalFound := TRUE;
                                  EDIConditional."Conditional Operator-2"::"<>":
                                    IF EDIConditional."Cond. Value-2" <>
                                      UPPERCASE(EDIRecDocFields4."Received EDI Value")
                                    THEN
                                      ConditionalFound := TRUE;
                                END;
                              END ELSE BEGIN
                                CASE EDIConditional."Conditional Operator-2" OF
                                  EDIConditional."Conditional Operator-2"::" ":
                                    IF EDIConditional."Cond. Value-2" =
                                      UPPERCASE(EDIRecDocFields4."Field Text Value")
                                    THEN
                                      ConditionalFound := TRUE;
                                  EDIConditional."Conditional Operator-2"::"<>":
                                    IF EDIConditional."Cond. Value-2" <>
                                      UPPERCASE(EDIRecDocFields4."Field Text Value")
                                    THEN
                                      ConditionalFound := TRUE;
                                END;
                              END;
                              IF EDIConditional."Cond. Detail Segment" THEN BEGIN
                                ConditionalFound := FALSE;
                                IF EDIRecDocFields4."Segment Group" <> 0 THEN
                                  ConditionalFound := TRUE;
                              END;
                              IF EDIConditional."Cond. Non-Detail Segment" THEN BEGIN
                                ConditionalFound := FALSE;
                                IF EDIRecDocFields4."Segment Group" = 0 THEN
                                  ConditionalFound := TRUE;
                              END;
                            END;
                          END ELSE BEGIN
                            IF EDIConditional."Cond. Detail Segment" THEN BEGIN
                              ConditionalFound := FALSE;
                              IF EDIRecDocFields4."Segment Group" <> 0 THEN
                                ConditionalFound := TRUE;
                            END;
                            IF EDIConditional."Cond. Non-Detail Segment" THEN BEGIN
                              ConditionalFound := FALSE;
                              IF EDIRecDocFields4."Segment Group" = 0 THEN
                                ConditionalFound := TRUE;
                            END;
                          END;
                        END;
                      END ELSE BEGIN
                        EDIRecDocFields.Substitution := FALSE;
                        EDIRecDocFields."Received EDI Value" := '';
                        EDIRecDocFields."Substitution Value" := '';

                        EDIRecDocFields4.RESET;
                        EDIRecDocFields4.SETRANGE("Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
                        EDIRecDocFields4.SETRANGE(Segment,EDIConditional."Cond. Segment");
                        IF NOT EDIRecDocFields4.FIND('+') THEN
                          IF EDIConditional."Cond. Segment Not Present" THEN
                            ConditionalFound := TRUE;
                      END;
                      IF EDIConditional."Use Conditional Sequence" AND ConditionalFound THEN BEGIN
                        EDIRecDocFields.Substitution := FALSE;
                        EDIRecDocFields."Received EDI Value" := '';
                        EDIRecDocFields."Substitution Value" := '';
                        EvaluateConditionalSequence;
                      END;
                      IF ConditionalFound THEN BEGIN
                        IF EDIConditional."Substitution Value" <> '' THEN BEGIN
                          EDIRecDocFields."Received EDI Value" := OriginalFieldTextValue;
                          IF UPPERCASE(EDIConditional."Substitution Value") = 'NULL' THEN
                            EDIRecDocFields."Field Text Value" := ''
                          ELSE
                            EDIRecDocFields."Field Text Value" := EDIConditional."Substitution Value";
                          EDIRecDocFields.Substitution := TRUE;
                          FormatFields;
                        END ELSE BEGIN
                          EDIRecDocFields.Substitution := FALSE;
                          EDIRecDocFields."Field Text Value" := OriginalFieldTextValue;
                          EDIRecDocFields."Received EDI Value" := '';
                        END;
                        EDIRecDocFields."NAV Table No." := EDIConditional."NAV Table No.";
                        EDIRecDocFields."Nav Field No." := EDIConditional."Nav Field No.";
                        EDIRecDocFields."Field Name" := EDIConditional."Field Name";
                        EDIRecDocFields.Trigger := EDIConditional.Trigger;
                        EDIRecDocFields.Print := EDIConditional.Print;
                        EDIRecDocFields.Column := EDIConditional.Column;
                        EDIRecDocFields."Columns Per Line" := EDIConditional."Columns Per Line";
                        EDIRecDocFields."New Line" := EDIConditional."New Line";
                        EDIRecDocFields."Copy String Position" := EDIConditional."Copy String Position";
                        EDIRecDocFields."Copy String Length" := EDIConditional."Copy String Length";
                        EDIRecDocFields."Append to Field Contents" :=
                          EDIConditional."Append to Field Contents";
                        EDIRecDocFields."Insert into Field Contents" :=
                          EDIConditional."Insert into Field Contents";
                        EDIRecDocFields."Insert Position" := EDIConditional."Insert Position";
                        EDIRecDocFields.Viewable := EDIElement.Viewable;
                        CurrLineNo := CurrLineNo + 1;
                        EDIRecDocFields."Line No." := CurrLineNo;
                        EDIRecDocFields."Reverse Conditional" := EDIConditional."Reverse Conditional";
                        EDIRecDocFields."Reverse Cond. Group" := ReverseCondGroup;
                        EDIRecDocFields."Forecast Date Formula" := EDIConditional."Forecast Date Formula";
                        EDIRecDocFields."Wrap Text" := EDIConditional."Wrap Text";
                        EDIRecDocFields."Line Type" := EDIConditional."Line Type";
                        EDIRecDocFields."Cond. Detail Segment" := EDIConditional."Cond. Detail Segment";
                        EDIRecDocFields."Cond. Non-Detail Segment" :=
                          EDIConditional."Cond. Non-Detail Segment";
                        EDIRecDocFields."Reverse Sign" := EDIConditional."Reverse Sign";
                        EDIRecDocFields."Use Conditional Sequence" :=
                          EDIConditional."Use Conditional Sequence";
                        EDIRecDocFields."Segment Sequence" := SegmentSequence;
                        EDIRecDocFields."Separator Type" := EDIConditional."Separator Type";
                        EDIRecDocFields."Validation Type" := EDIConditional."Validation Type";
                        EDIRecDocFields."Substitution Value" := EDIConditional."Substitution Value";
                        EDIRecDocFields.Multiplier := EDIConditional.Multiplier;
                        EDIRecDocFields."Cross Reference ID Type" := EDIConditional."Cross Reference ID Type";
                        EDIRecDocFields."Conditional Operator" := EDIConditional."Conditional Operator";
                        IF EDIElement.Viewable = FALSE THEN
                          EDIRecDocFields.Viewable := EDIConditional.Viewable;
                        EDIRecDocFields."Disable General Cross Ref." := EDIConditional."Disable General Cross Ref.";
                        EDIRecDocFields.INSERT;
                        IF EDIConditional."Reverse Sign" THEN BEGIN
                          EDIRecDocField.GET(EDIRecDocFields."Internal Doc. No.",CurrLineNo);
                          CASE EDIElement."Data Type" OF
                            EDIElement."Data Type"::"Dec Implied",EDIElement."Data Type"::"Dec Explicit":
                              BEGIN
                                EDIRecDocField."Field Dec. Value" := -1 * EDIRecDocFields."Field Dec. Value";
                                EDIRecDocField.MODIFY;
                              END;
                            EDIElement."Data Type"::Integer:
                              BEGIN
                                EDIRecDocField."Field Integer Value" := -1 * EDIRecDocFields."Field Integer Value";
                                EDIRecDocField.MODIFY;
                              END;
                          END;
                        END;
                      END;
                    END;
                  UNTIL (EDIConditional.NEXT = 0);
                OriginalFieldTextValue := '';
              END ELSE BEGIN
                IF WrapText THEN BEGIN
                  IF DelimiterPos <> 1 THEN
                    EDIRecDocFields.INSERT;
                END ELSE
                  EDIRecDocFields.INSERT;
              END;
              IF NOT WrapTextComplete THEN
                EDIElement.NEXT(-1);
            UNTIL EDIElement.NEXT = 0;
            PreviousSegment := CurrSegment;
          END;
        END;
      UNTIL EndOfFile;
    END;

    PROCEDURE BypassUnusedEnvSeg@14();
    BEGIN
      GoodSegment := FALSE;

      IF DelimitedFlatFile THEN BEGIN
        IF (CurrSegment = TrailerSegID) OR (CurrSegment = HeaderSegID) THEN BEGIN
          ReadLine[i] := '';
          CurrSegment := '';
          IF NOT ReadEDILine THEN
            EXIT;
          LoadCurrSegment;
        END;
      END ELSE BEGIN
        REPEAT
          IF (CurrSegment = 'ST ') OR
             (CurrSegment = 'SE ') OR
             (CurrSegment = 'GE ') OR
             (CurrSegment = 'ISA') OR
             (CurrSegment = 'IEA') OR
             (CurrSegment = 'UNB') OR
             (CurrSegment = 'UNH') OR
             (CurrSegment = 'UNT') OR
             (CurrSegment = 'UNZ')
          THEN BEGIN
            ReadLine[i] := '';
            CurrSegment := '';
            IF NOT ReadEDILine THEN
              EXIT;
            LoadCurrSegment;
            GetControlNo;
          END;
          IF (CurrSegment <> 'ST ') AND
             (CurrSegment <> 'SE ') AND
             (CurrSegment <> 'GE ') AND
             (CurrSegment <> 'ISA') AND
             (CurrSegment <> 'IEA') AND
             (CurrSegment <> 'UNB') AND
             (CurrSegment <> 'UNH') AND
             (CurrSegment <> 'UNT') AND
             (CurrSegment <> 'UNZ')
          THEN
            GoodSegment := TRUE;
        UNTIL GoodSegment = TRUE;
      END;
    END;

    PROCEDURE LoadCurrSegment@15();
    VAR
      x@1240020001 : Integer;
      Finished@1240020002 : Boolean;
    BEGIN
      IF EDITemplate."Segment ID Beg. Pos." = 0 THEN
        ERROR(Text015,EDITemplate.Code);
      CurrSegment := COPYSTR(ReadLine[1],EDITemplate."Segment ID Beg. Pos.",EDITemplate."Segment ID Length");
      IF (EDITemplate."File Format" = EDITemplate."File Format"::Delimited) THEN BEGIN
        IF DelimitedFlatFile THEN BEGIN
        x := 0;
        Finished := FALSE;
        REPEAT
          IF (CurrSegment[x+1] = ComponentDelChar) OR
             (CurrSegment[x+1] = ElementDelChar) OR
             (CurrSegment[x+1] = SegmentDelChar)
          THEN BEGIN
            CurrSegment :=  COPYSTR(CurrSegment,1,x);
            Finished := TRUE;
          END;
          x := x + 1;
        UNTIL (Finished = TRUE) OR (x = EDITemplate."Segment ID Length");
        CurrSegment := UPPERCASE(CurrSegment);
        END ELSE BEGIN
          IF (CurrSegment[3] = ComponentDelChar) OR
             (CurrSegment[3] = ElementDelChar) OR
             (CurrSegment[3] = SegmentDelChar)
          THEN
            CurrSegment[3] := ' ';
        END
      END;
    END;

    PROCEDURE GetControlNo@19();
    BEGIN
      LoadCurrSegment;
      CASE CurrSegment OF
        'ISA':
          InterchangeControlNo := SelectString(14,ReadLine[1]);
        'GS ':
          BEGIN
            GroupControlNo := SelectString(7,ReadLine[1]);
            FunctionalID := SelectString(2,ReadLine[1]);
            TransactionDateText := SelectString(5,ReadLine[1]);
            TransactionTimeText := SelectString(6,ReadLine[1]);
            FormatTransactionDateTime;
          END;
        'ST ':
          BEGIN
            TranSetControlNo := SelectString(3,ReadLine[1]);
            TranSetID := SelectString(2,ReadLine[1]);
          END;
        'UNB':
          BEGIN
            GroupControlNo := SelectString(10,ReadLine[1]);
            InterchangeControlNo := SelectString(10,ReadLine[1]);
            TransactionDateText := SelectString(8,ReadLine[1]);
            TransactionTimeText := SelectString(9,ReadLine[1]);
            FormatTransactionDateTime;
          END;
        'UNG':
            GroupControlNo := SelectString(9,ReadLine[1]);
        'UNH':
            TranSetControlNo := SelectString(2,ReadLine[1]);
      END;

      CASE TRUE OF
        (DelimitedFlatFile) AND (HeaderSegIDFound OR TrailerSegIDFound):
          BEGIN
            IF (CurrSegment = EDITemplate."Header Segment ID") OR
               (CurrSegment = EDITemplate."Header Segment ID" + ' ')
            THEN
              IF EDITemplate."Hdr. Segment File ID Position" <> 0 THEN BEGIN
                InterchangeControlNo :=
                  SelectString(EDITemplate."Hdr. Segment File ID Position",ReadLine[1]);
                FlatFileHdrID := InterchangeControlNo;
              END;
            IF (CurrSegment = EDITemplate."Trailer Segment ID") OR
               (CurrSegment = EDITemplate."Trailer Segment ID" + ' ')
            THEN
              IF EDITemplate."Trailer Segment File ID Pos." <> 0 THEN
                FlatFileTrailerID :=
                  SelectString(EDITemplate."Trailer Segment File ID Pos.",ReadLine[1]);
          END;
      END;
    END;

    PROCEDURE SelectString@7(RequestedElement@1240030001 : Integer;TempString@1240030002 : Text[1024]) ReturnString@1240030000 : Text[1024];
    VAR
      ElementBegin@1240030003 : Boolean;
      ElementEnd@1240030004 : Boolean;
      ElementNo@1240030005 : Integer;
      i@1240030007 : Integer;
      j@1240030008 : Integer;
    BEGIN
      ReturnString := '';
      ElementBegin := FALSE;
      i := 1;
      j := 1;
      ElementNo := 1;

      REPEAT
        IF EDIFACT THEN BEGIN
          IF (TempString[i] = SegmentDelDec) OR
             (TempString[i] = ElementDelDec) OR
             (TempString[i] = ComponentDelDec)
          THEN BEGIN
            IF (TempString[i-1] <> '?') THEN BEGIN
              ElementNo := ElementNo + 1;
              i := i + 1;
            END;
          END;
        END ELSE BEGIN
          IF (TempString[i] = SegmentDelDec) OR
             (TempString[i] = ElementDelDec) OR
             (TempString[i] = ComponentDelDec)
          THEN BEGIN
            ElementNo := ElementNo + 1;
            i := i + 1;
          END;
        END;
        IF ElementNo = RequestedElement THEN
          ElementBegin := TRUE
        ELSE
          i := i + 1;
      UNTIL ElementBegin;

      j := i + 1;
      REPEAT
        IF EDIFACT THEN BEGIN
          IF (TempString[j] = SegmentDelDec) OR
             (TempString[j] = ElementDelDec) OR
             (TempString[j] = ComponentDelDec)
          THEN BEGIN
            IF (TempString[j-1] <> '?')THEN
              ElementEnd := TRUE
          END ELSE
            j := j + 1;
        END ELSE BEGIN
          IF (TempString[j] = SegmentDelDec) OR
             (TempString[j] = ElementDelDec) OR
             (TempString[j] = ComponentDelDec)
          THEN
            ElementEnd := TRUE
          ELSE
            j := j + 1;
        END;
      UNTIL ElementEnd;

      IF (j - i) > 0 THEN
        EXIT(COPYSTR(TempString,i,j - i))
      ELSE
        EXIT('');
    END;

    PROCEDURE FormatDelimited@12(VAR TextString@1240030001 : Text[250]) ReturnTextString@1240030000 : Text[250];
    VAR
      Finished@1240020000 : Boolean;
      CharValue@1240020002 : Text[1];
      CharValueDec@1240020001 : Integer;
    BEGIN
      CLEAR(ReturnTextString);
      DelimiterPos := 5119;

      ComponentDelPos := STRPOS(TextString,ComponentDel);
      IF EDIFACT THEN BEGIN
        Finished := FALSE;
        IF ComponentDelPos > 1 THEN
          REPEAT
            IF COPYSTR(TextString,ComponentDelPos-1,1) = '?' THEN BEGIN
              IF STRPOS(
                COPYSTR(TextString,(ComponentDelPos+1)),ComponentDel) <> 0
              THEN BEGIN
                ComponentDelPos :=
                  STRPOS(
                    COPYSTR(TextString,(ComponentDelPos+1)),ComponentDel) +
                    ComponentDelPos;
                IF COPYSTR(TextString,ComponentDelPos-1,1) = '?' THEN BEGIN
                  IF STRPOS(
                    COPYSTR(TextString,(ComponentDelPos+1)),ComponentDel) <> 0 THEN
                      ComponentDelPos :=
                        STRPOS(
                          COPYSTR(TextString,(ComponentDelPos+1)),ComponentDel) +
                          ComponentDelPos;
                END ELSE
                  Finished := TRUE;
              END ELSE BEGIN
                ComponentDelPos := 0;
                Finished := TRUE;
              END;
            END ELSE
              Finished := TRUE;
          UNTIL Finished = TRUE;
      END;
      IF (ComponentDelPos <> 0) AND (ComponentDelPos < DelimiterPos) THEN
        DelimiterPos := ComponentDelPos;

      ElementDelPos := STRPOS(TextString,ElementDel);
      IF EDIFACT THEN BEGIN
        Finished := FALSE;
        IF (ElementDelPos <> 0) AND (ElementDelPos < DelimiterPos) THEN
          IF ElementDelPos > 1 THEN
            REPEAT
              IF COPYSTR(TextString,ElementDelPos-1,1) = '?' THEN BEGIN
                IF STRPOS(
                  COPYSTR(TextString,(ElementDelPos+1)),ElementDel) <> 0
                THEN BEGIN
                  ElementDelPos :=
                    STRPOS(
                      COPYSTR(TextString,(ElementDelPos+1)),ElementDel) +
                      ElementDelPos;
                  IF COPYSTR(TextString,ElementDelPos-1,1) = '?' THEN BEGIN
                    IF STRPOS(
                      COPYSTR(TextString,(ElementDelPos+1)),ElementDel) <> 0 THEN
                     ElementDelPos :=
                       STRPOS(
                         COPYSTR(TextString,(ElementDelPos+1)),ElementDel) +
                         ElementDelPos;
                  END ELSE
                    Finished := TRUE;
                END ELSE BEGIN
                  ElementDelPos := 0;
                  Finished := TRUE;
                END;
              END ELSE
                Finished := TRUE;
            UNTIL Finished = TRUE;
      END;
      IF (ElementDelPos <> 0) AND (ElementDelPos < DelimiterPos) THEN
        DelimiterPos := ElementDelPos;

      SegmentDelPos := STRPOS(TextString,SegmentDel);
      IF EDIFACT THEN BEGIN
        Finished := FALSE;
        IF (SegmentDelPos <> 0) AND (SegmentDelPos < DelimiterPos) THEN
          IF SegmentDelPos > 1 THEN
            REPEAT
              IF COPYSTR(TextString,SegmentDelPos-1,1) = '?' THEN BEGIN
                IF STRPOS(
                  COPYSTR(TextString,(SegmentDelPos+1)),SegmentDel) <> 0
                THEN BEGIN
                  SegmentDelPos :=
                    STRPOS(
                      COPYSTR(TextString,(SegmentDelPos+1)),SegmentDel) +
                      SegmentDelPos;
                  IF COPYSTR(TextString,SegmentDelPos-1,1) = '?' THEN BEGIN
                    IF STRPOS(
                      COPYSTR(TextString,(SegmentDelPos+1)),SegmentDel) <> 0 THEN
                     SegmentDelPos :=
                       STRPOS(
                         COPYSTR(TextString,(SegmentDelPos+1)),SegmentDel) +
                         SegmentDelPos;
                  END ELSE
                    Finished := TRUE;
                END ELSE BEGIN
                  SegmentDelPos := 0;
                  Finished := TRUE;
                END;
              END ELSE
                Finished := TRUE;
            UNTIL Finished = TRUE;
      END;
      IF (SegmentDelPos <> 0) AND (SegmentDelPos < DelimiterPos) THEN
        DelimiterPos := SegmentDelPos;

      IF DelimiterPos <> 5119 THEN BEGIN
        IF DelimiterPos > 1 THEN
          ReturnTextString := COPYSTR(TextString,1,DelimiterPos -1);
        IF DelimiterPos = 1 THEN
          ReturnTextString := '';
        IF WrapText THEN
          WrapTextComplete := TRUE;
      END ELSE BEGIN
        ReturnTextString := TextString;
        DelimiterPos := EDIElement.Length + 1;
        IF WrapText THEN BEGIN
          IF ReturnTextString = '' THEN BEGIN
            WrapTextComplete := TRUE;
          END ELSE BEGIN
          IF STRPOS(ReturnTextString,SegmentDel) <> 0 THEN
            WrapTextComplete := TRUE
          ELSE
            WrapTextComplete := FALSE;
          END;
          DelimiterPos := EDIElement.Length;
        END;
      END;

      IF EDIFACT THEN
        ReturnTextString := DELCHR(ReturnTextString,'=','?');

      IF DelimitedFlatFile AND
        ((SegmentDelDec = 10) OR (SegmentDelDec = 13))
      THEN BEGIN
        CharValueDec := 10;
        CharValue[1] := CharValueDec;
        IF STRPOS(ReturnTextString,CharValue) <> 0 THEN
          ReturnTextString :=
            COPYSTR(ReturnTextString,1,STRPOS(ReturnTextString,CharValue) - 1);
        CharValueDec := 13;
        CharValue[1] := CharValueDec;
        IF STRPOS(ReturnTextString,CharValue) <> 0 THEN
          ReturnTextString :=
            COPYSTR(ReturnTextString,1,STRPOS(ReturnTextString,CharValue) - 1);
      END;
      EXIT(ReturnTextString);
    END;

    PROCEDURE ReadEDILine@2() Status@1240030000 : Boolean;
    VAR
      SegmentDelimiter@1240030001 : Boolean;
    BEGIN
      CLEAR(ReadLine);
      TempReadLine := ' ';
      SegmentFound := FALSE;
      i := 1;
      j := 1;
      WHILE StreamReader.Peek > 0 DO BEGIN
        Char := StreamReader.Read;
        IF (Char <> 10) AND (Char <> 13) THEN
          SegmentFound := TRUE;
        IF SegmentFound THEN BEGIN
          IF EDITemplate."File Format" = EDITemplate."File Format"::Delimited THEN BEGIN
            IF Char = SegmentDelDec THEN BEGIN
              IF NOT EDIFACT THEN
                SegmentDelimiter := TRUE
              ELSE
               SegmentDelimiter := FALSE;
              IF EDIFACT THEN
                IF TempReadLine[j-1] <> '?' THEN
                  SegmentDelimiter := TRUE;
            END;
            IF SegmentDelimiter THEN BEGIN
              TempReadLine[j] := Char;
              IF (i = 1) AND (j = 1) THEN
                EXIT(FALSE);
              ReadLine[i] := TempReadLine;
              EXIT(TRUE);
            END;
            TempReadLine[j] := Char;
            IF j < 1024 THEN
              j := j + 1
            ELSE BEGIN
              ReadLine[i] := TempReadLine;
              TempReadLine := ' ';
              i := i + 1;
              j := 1;
            END;
          END;
          IF EDITemplate."File Format" = EDITemplate."File Format"::Fixed THEN BEGIN
            IF (Char = 10) OR (Char = 13) THEN BEGIN
              IF (i = 1) AND (j = 1) THEN
                EXIT(FALSE);
              ReadLine[i] := TempReadLine;
              EXIT(TRUE);
            END;
            TempReadLine[j] := Char;
            IF j < 1024 THEN
              j := j + 1
            ELSE BEGIN
              ReadLine[i] := TempReadLine;
              TempReadLine := ' ';
              i := i + 1;
              j := 1;
            END;
          END;
        END;
      END;
      EndOfFile := TRUE;
      //EXIT(TRUE); EB 04/27/18
      IF ((DelimitedFlatFile) AND (EndOfFile) AND (TempReadLine <> ' ')) AND
         ((SegmentDelDec = 10) OR (SegmentDelDec = 13))
      THEN BEGIN
        ReadLine[i] := TempReadLine;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE LoadDelimiters@11();
    BEGIN
      IF EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::None THEN BEGIN
        SegmentDelDec := EDITemplate."Dec. Segment Terminator";
        SegmentDelChar := SegmentDelDec;
        SegmentDel[1] := SegmentDelDec;
        ElementDelDec := EDITemplate."Dec. Element Delimeter";
        ElementDelChar := ElementDelDec;
        ElementDel[1] := ElementDelDec;;
        DelimitedFlatFile := TRUE;
      END ELSE BEGIN
        z := 0;
        REPEAT
          z := z + 1;
          Char := StreamReader.Read;
          CASE z OF
            12:
              BEGIN
                DelimiterStrValue := '';
                DelimiterStrValue[1] := Char;
              END;
            13:
              DelimiterStrValue[2] := Char;
            14:
              BEGIN
                DelimiterStrValue[3] := Char;
                EVALUATE(SegmentDelDec,COPYSTR(DelimiterStrValue,1,3));
                SegmentDelChar := SegmentDelDec;
                SegmentDel[1] := SegmentDelDec;
              END;
            16:
              BEGIN
                DelimiterStrValue := '';
                DelimiterStrValue[1] := Char;
              END;
            17:
              DelimiterStrValue[2] := Char;
            18:
              BEGIN
                DelimiterStrValue[3] := Char;
                EVALUATE(ElementDelDec,COPYSTR(DelimiterStrValue,1,3));
                ElementDelChar := ElementDelDec;
                ElementDel[1] := ElementDelDec;
              END;
            20:
              BEGIN
                DelimiterStrValue := '';
                DelimiterStrValue[1] := Char;
              END;
            21:
              DelimiterStrValue[2] := Char;
            22:
              BEGIN
                DelimiterStrValue[3] := Char;
                EVALUATE(ComponentDelDec,COPYSTR(DelimiterStrValue,1,3));
                ComponentDelChar := ComponentDelDec;
                ComponentDel[1] := ComponentDelDec;
              END;
          END;
        UNTIL Char = 13;
      END;
    END;

    PROCEDURE LoadTradePtnr@5();
    BEGIN
      IF (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::Harbinger) OR
         (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::Sterling) OR
         (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::"GE PC EDI")
      THEN BEGIN
        CurrTradePtnr :=
          COPYSTR(ReadLine[1],EDITemplate."Trade Partner Beg. Pos.",EDITemplate."Trade Partner Length");
        IF EDITemplate."File Format" = EDITemplate."File Format"::Delimited THEN
          CurrTradePtnr := FormatDelimited(CurrTradePtnr);
      END;

      IF NOT EDITradePartner.GET(CurrTradePtnr) THEN
        ERROR(Text016,CurrTradePtnr);

      GetControlNo;

      IF GUIALLOWED THEN
        ProgressWindow.UPDATE(1,EDITradePartner."No.");
    END;

    PROCEDURE FormatFields@1240020000();
    BEGIN
      CASE EDIElement."Data Type" OF
        EDIElement."Data Type"::"Dec Implied":
          BEGIN
            EDIRecDocFields."Field Text Value" := DELCHR(EDIRecDocFields."Field Text Value",'>',' ');
            IF EDIRecDocFields."Field Text Value" = '' THEN
              CurrDecimalString := '0.0'
            ELSE BEGIN
              IF EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::Sterling THEN
                EVALUATE(EDIElement.Decimals,SterlingDec);
              CurrDecimalString := EDIRecDocFields."Field Text Value";
              IF STRPOS(CurrDecimalString,'-') <> 0 THEN BEGIN
                NegativeValue := TRUE;
                CurrDecimalString := COPYSTR(CurrDecimalString,2);
              END ELSE
                NegativeValue := FALSE;
              WHILE STRLEN(CurrDecimalString) < EDIElement.Decimals DO
                CurrDecimalString := INSSTR(CurrDecimalString,'0',1);
              CurrDecimalString := INSSTR(
                CurrDecimalString,DecimalSymbol,
                (STRLEN(CurrDecimalString) - EDIElement.Decimals) + 1);
            END;
            IF NegativeValue THEN
              CurrDecimalString := '-' + CurrDecimalString;
            EVALUATE(EDIRecDocFields."Field Dec. Value",CurrDecimalString);
            IF EDIRecDocFields."Reverse Sign" THEN
              EDIRecDocFields."Field Dec. Value" := -1 * EDIRecDocFields."Field Dec. Value";
          END;
        EDIElement."Data Type"::"Dec Explicit":
          BEGIN
            EDIRecDocFields."Field Text Value" := DELCHR(EDIRecDocFields."Field Text Value",'>',' ');
            IF EDIRecDocFields."Field Text Value" = '' THEN
              CurrDecimalString := '0.0'
            ELSE
              CurrDecimalString := EDIRecDocFields."Field Text Value";
            IF DecimalSymbol = ',' THEN
              CurrDecimalString := CONVERTSTR(CurrDecimalString,'.',DecimalSymbol)
            ELSE
              CurrDecimalString := CONVERTSTR(CurrDecimalString,',',DecimalSymbol);
            EVALUATE(EDIRecDocFields."Field Dec. Value",CurrDecimalString);
            IF EDIRecDocFields."Reverse Sign" THEN
              EDIRecDocFields."Field Dec. Value" := -1 * EDIRecDocFields."Field Dec. Value";
          END;
        EDIElement."Data Type"::Integer:
          BEGIN
            EDIRecDocFields."Field Text Value" := DELCHR(EDIRecDocFields."Field Text Value",'>',' ');
            IF EDIRecDocFields."Field Text Value" = '' THEN
              CurrDecimalString := '0'
            ELSE
              CurrDecimalString := EDIRecDocFields."Field Text Value";
            EVALUATE (EDIRecDocFields."Field Integer Value",CurrDecimalString);
            IF EDIRecDocFields."Reverse Sign" THEN
              EDIRecDocFields."Field Integer Value" := -1 * EDIRecDocFields."Field Integer Value";
          END;
        EDIElement."Data Type"::"Date YYMMDD":
          IF EDIRecDocFields."Field Text Value" = '' THEN
            EDIRecDocFields."Field Date Value" := 0D
          ELSE BEGIN
            FieldTextValue := EDIRecDocFields."Field Text Value";
            FieldTextValue := DELCHR(FieldTextValue,'=','/');
            FieldTextValue := DELCHR(FieldTextValue,'=','-');
            CASE EDISetup."Local Date Format" OF
              EDISetup."Local Date Format"::"MM/DD/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,3,2) +
                  COPYSTR(FieldTextValue,5,2) +
                  COPYSTR(FieldTextValue,1,2));
              EDISetup."Local Date Format"::"DD/MM/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,5,2) +
                  COPYSTR(FieldTextValue,3,2) +
                  COPYSTR(FieldTextValue,1,2));
              EDISetup."Local Date Format"::"YY/MM/DD":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",FieldTextValue);
            END;
          END;
        EDIElement."Data Type"::"Date YYYYMMDD":
          IF EDIRecDocFields."Field Text Value" = '' THEN
            EDIRecDocFields."Field Date Value" := 0D
          ELSE BEGIN
            FieldTextValue := EDIRecDocFields."Field Text Value";
            FieldTextValue := DELCHR(FieldTextValue,'=','/');
            FieldTextValue := DELCHR(FieldTextValue,'=','-');
            CASE EDISetup."Local Date Format" OF
              EDISetup."Local Date Format"::"MM/DD/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,5,4) +
                  COPYSTR(FieldTextValue,1,4));
              EDISetup."Local Date Format"::"DD/MM/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,7,2) +
                  COPYSTR(FieldTextValue,5,2) +
                  COPYSTR(FieldTextValue,1,4));
              EDISetup."Local Date Format"::"YY/MM/DD":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,3,2) +
                  COPYSTR(FieldTextValue,5,2) +
                  COPYSTR(FieldTextValue,7,2));
            END;
          END;
        EDIElement."Data Type"::"Date DDMMYY":
          IF EDIRecDocFields."Field Text Value" = '' THEN
            EDIRecDocFields."Field Date Value" := 0D
          ELSE BEGIN
            FieldTextValue := EDIRecDocFields."Field Text Value";
            FieldTextValue := DELCHR(FieldTextValue,'=','/');
            FieldTextValue := DELCHR(FieldTextValue,'=','-');
            CASE EDISetup."Local Date Format" OF
              EDISetup."Local Date Format"::"MM/DD/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,3,2) +
                  COPYSTR(FieldTextValue,1,2) +
                  COPYSTR(FieldTextValue,5,2));
              EDISetup."Local Date Format"::"DD/MM/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",FieldTextValue);
              EDISetup."Local Date Format"::"YY/MM/DD":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,5,2) +
                  COPYSTR(FieldTextValue,3,2) +
                  COPYSTR(FieldTextValue,1,2));
            END;
          END;
        EDIElement."Data Type"::"Date DDMMYYYY":
          IF EDIRecDocFields."Field Text Value" = '' THEN
            EDIRecDocFields."Field Date Value" := 0D
          ELSE BEGIN
            FieldTextValue := EDIRecDocFields."Field Text Value";
            FieldTextValue := DELCHR(FieldTextValue,'=','/');
            FieldTextValue := DELCHR(FieldTextValue,'=','-');
            CASE EDISetup."Local Date Format" OF
              EDISetup."Local Date Format"::"MM/DD/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,3,2) +
                  COPYSTR(FieldTextValue,1,2) +
                  COPYSTR(FieldTextValue,5,4));
              EDISetup."Local Date Format"::"DD/MM/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",FieldTextValue);
              EDISetup."Local Date Format"::"YY/MM/DD":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(EDIRecDocFields."Field Text Value",7,2) +
                  COPYSTR(EDIRecDocFields."Field Text Value",3,2) +
                  COPYSTR(EDIRecDocFields."Field Text Value",1,2));
            END;
          END;
        EDIElement."Data Type"::"Date YYYYDDMM":
          IF EDIRecDocFields."Field Text Value" = '' THEN
            EDIRecDocFields."Field Date Value" := 0D
          ELSE BEGIN
            FieldTextValue := EDIRecDocFields."Field Text Value";
            FieldTextValue := DELCHR(FieldTextValue,'=','/');
            FieldTextValue := DELCHR(FieldTextValue,'=','-');
            CASE EDISetup."Local Date Format" OF
              EDISetup."Local Date Format"::"MM/DD/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,7,2) +
                  COPYSTR(FieldTextValue,5,2) +
                  COPYSTR(FieldTextValue,1,4));
              EDISetup."Local Date Format"::"MM/DD/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,5,2) +
                  COPYSTR(FieldTextValue,7,2) +
                  COPYSTR(FieldTextValue,1,4));
              EDISetup."Local Date Format"::"YY/MM/DD":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,3,2) +
                  COPYSTR(FieldTextValue,7,2) +
                  COPYSTR(FieldTextValue,5,2));
            END;
          END;
        EDIElement."Data Type"::"Date MMDDYY":
          IF EDIRecDocFields."Field Text Value" = '' THEN
            EDIRecDocFields."Field Date Value" := 0D
          ELSE BEGIN
            FieldTextValue := EDIRecDocFields."Field Text Value";
            FieldTextValue := DELCHR(FieldTextValue,'=','/');
            FieldTextValue := DELCHR(FieldTextValue,'=','-');
            CASE EDISetup."Local Date Format" OF
              EDISetup."Local Date Format"::"MM/DD/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",FieldTextValue);
              EDISetup."Local Date Format"::"DD/MM/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,3,2) +
                  COPYSTR(FieldTextValue,1,2) +
                  COPYSTR(FieldTextValue,5,2));
              EDISetup."Local Date Format"::"YY/MM/DD":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,5,2) +
                  COPYSTR(FieldTextValue,1,2) +
                  COPYSTR(FieldTextValue,3,2));
            END;
          END;
        EDIElement."Data Type"::"Date MMDDYYYY":
          IF EDIRecDocFields."Field Text Value" = '' THEN
            EDIRecDocFields."Field Date Value" := 0D
          ELSE BEGIN
            FieldTextValue := EDIRecDocFields."Field Text Value";
            FieldTextValue := DELCHR(FieldTextValue,'=','/');
            FieldTextValue := DELCHR(FieldTextValue,'=','-');
            CASE EDISetup."Local Date Format" OF
              EDISetup."Local Date Format"::"MM/DD/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",FieldTextValue);
              EDISetup."Local Date Format"::"DD/MM/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,3,2) +
                  COPYSTR(FieldTextValue,1,2) +
                  COPYSTR(FieldTextValue,5,4));
              EDISetup."Local Date Format"::"YY/MM/DD":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,5,4) +
                  COPYSTR(FieldTextValue,1,2) +
                  COPYSTR(FieldTextValue,3,2));
            END;
          END;
        EDIElement."Data Type"::"Time HHMM":
          IF EDIRecDocFields."Field Text Value" = '' THEN
            EDIRecDocFields."Field Time Value" := 0T
          ELSE BEGIN
            FieldTextValue := EDIRecDocFields."Field Text Value";
            EVALUATE(
              EDIRecDocFields."Field Time Value",FieldTextValue);
          END;
        EDIElement."Data Type"::"DateTime YYYYMMDDHHMM":
          IF EDIRecDocFields."Field Text Value" = '' THEN
            EDIRecDocFields."Field DateTime Value" := 0DT
          ELSE BEGIN
            IF EDIElement."Data Type" = EDIElement."Data Type"::"DateTime XML" THEN BEGIN
            END;
            FieldTextValue := EDIRecDocFields."Field Text Value";
            FieldTextValue := DELCHR(FieldTextValue,'=','/');
            FieldTextValue := DELCHR(FieldTextValue,'=','-');
            CASE EDISetup."Local Date Format" OF
              EDISetup."Local Date Format"::"MM/DD/YYYY":
                BEGIN
                  EVALUATE(
                    FieldDateValue,
                    COPYSTR(FieldTextValue,5,4) +
                    COPYSTR(FieldTextValue,1,4));
                  EVALUATE(
                    FieldTimeValue,
                    COPYSTR(FieldTextValue,9,4));
                  EDIRecDocFields."Field DateTime Value" :=
                    CREATEDATETIME(FieldDateValue,FieldTimeValue);
                END;
              EDISetup."Local Date Format"::"DD/MM/YYYY":
                BEGIN
                  EVALUATE(
                    FieldDateValue,
                    COPYSTR(FieldTextValue,7,2) +
                    COPYSTR(FieldTextValue,5,2) +
                    COPYSTR(FieldTextValue,1,4));
                  EVALUATE(
                    FieldTimeValue,
                    COPYSTR(FieldTextValue,9,4));
                  EDIRecDocFields."Field DateTime Value" :=
                    CREATEDATETIME(FieldDateValue,FieldTimeValue);
                END;
              EDISetup."Local Date Format"::"YY/MM/DD":
                BEGIN
                  EVALUATE(
                    FieldDateValue,
                    COPYSTR(FieldTextValue,3,2) +
                    COPYSTR(FieldTextValue,5,2) +
                    COPYSTR(FieldTextValue,7,4));
                  EVALUATE(
                    FieldTimeValue,
                    COPYSTR(FieldTextValue,9,4));
                  EDIRecDocFields."Field DateTime Value" :=
                    CREATEDATETIME(FieldDateValue,FieldTimeValue);
                END;
            END;
          END;
      END;
    END;

    PROCEDURE EvaluateReverseConditional@1240030000();
    VAR
      CurrentEDIRecDocFields@1240030002 : Record 14002359;
      ReverseConditional@1240030001 : Record 14002359;
      ReverseConditionalFound@1240030000 : Boolean;
    BEGIN
      ReverseConditional.RESET;
      ReverseConditional.SETCURRENTKEY("Internal Doc. No.","Reverse Conditional");
      ReverseConditional.SETRANGE("Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
      ReverseConditional.SETRANGE("Reverse Conditional",TRUE);
      IF ReverseConditional.FIND('-') THEN BEGIN
        REPEAT
          ReverseConditionalFound := FALSE;
          EDIConditional.RESET;
          EDIConditional.SETRANGE("Trade Partner No.",ReverseConditional."Trade Partner No.");
          EDIConditional.SETRANGE("Navision Document",ReverseConditional."Navision Document");
          EDIConditional.SETRANGE("EDI Document No.",ReverseConditional."EDI Document No.");
          EDIConditional.SETRANGE(Version,ReverseConditional."EDI Version");
          EDIConditional.SETRANGE(Type,ReverseConditional.Type);
          EDIConditional.SETRANGE(Segment,ReverseConditional.Segment);
          EDIConditional.SETRANGE(Element,ReverseConditional.Element);
          EDIConditional.SETRANGE("Field Name",ReverseConditional."Field Name");
          EDIConditional.SETRANGE("Cond. Value",ReverseConditional."Reverse Cond. Value-1");
          EDIConditional.SETRANGE("Cond. Value-2",ReverseConditional."Reverse Cond. Value-2");
          EDIConditional.SETRANGE("Reverse Conditional",TRUE);
          IF EDIConditional.FIND('-') THEN
            REPEAT
              IF EDIConditional."Cond. Segment Not Present" = FALSE THEN BEGIN
                CurrentEDIRecDocFields.RESET;
                CurrentEDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
                CurrentEDIRecDocFields.SETRANGE(Segment,EDIConditional."Cond. Segment");
                CurrentEDIRecDocFields.SETRANGE(Element,EDIConditional."Cond. Element");
                IF CurrentEDIRecDocFields.FIND('-') THEN BEGIN
                  IF ReverseConditional.Segment = EDIConditional."Cond. Segment" THEN
                    CurrentEDIRecDocFields.SETRANGE(
                      "Reverse Cond. Group",ReverseConditional."Reverse Cond. Group")
                  ELSE
                    CurrentEDIRecDocFields.SETFILTER(
                      "Reverse Cond. Group",'>%1',ReverseConditional."Reverse Cond. Group");
                  IF CurrentEDIRecDocFields.FIND('-') THEN BEGIN
                    IF CurrentEDIRecDocFields."Received EDI Value" <> '' THEN BEGIN
                      CASE EDIConditional."Conditional Operator" OF
                        EDIConditional."Conditional Operator"::" ":
                          IF EDIConditional."Cond. Value" =
                            CurrentEDIRecDocFields."Received EDI Value"
                          THEN
                            ReverseConditionalFound := TRUE;
                        EDIConditional."Conditional Operator"::"<>":
                          IF EDIConditional."Cond. Value" <>
                            CurrentEDIRecDocFields."Received EDI Value"
                          THEN
                            ReverseConditionalFound := TRUE;
                      END;
                    END ELSE
                      CASE EDIConditional."Conditional Operator" OF
                        EDIConditional."Conditional Operator"::" ":
                          IF EDIConditional."Cond. Value" =  CurrentEDIRecDocFields."Field Text Value" THEN
                            ReverseConditionalFound := TRUE;
                        EDIConditional."Conditional Operator"::"<>":
                          IF EDIConditional."Cond. Value" <>  CurrentEDIRecDocFields."Field Text Value" THEN
                            ReverseConditionalFound := TRUE;
                      END;
                    END;
                    IF (ReverseConditionalFound) AND (EDIConditional."Cond. Segment-2" <> '') THEN BEGIN
                      ReverseConditionalFound := FALSE;
                      CurrentEDIRecDocFields.RESET;
                      CurrentEDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
                      CurrentEDIRecDocFields.SETRANGE(Segment,EDIConditional."Cond. Segment-2");
                      CurrentEDIRecDocFields.SETRANGE(Element,EDIConditional."Cond. Element-2");
                      IF ReverseConditional.Segment = EDIConditional."Cond. Segment-2" THEN
                        CurrentEDIRecDocFields.SETRANGE(
                          "Reverse Cond. Group",ReverseConditional."Reverse Cond. Group")
                      ELSE
                        CurrentEDIRecDocFields.SETFILTER(
                          "Reverse Cond. Group",'>%1',ReverseConditional."Reverse Cond. Group");
                      IF CurrentEDIRecDocFields.FIND('-') THEN BEGIN
                        IF CurrentEDIRecDocFields."Received EDI Value" <> '' THEN BEGIN
                          CASE EDIConditional."Conditional Operator-2" OF
                            EDIConditional."Conditional Operator"::" ":
                              IF EDIConditional."Cond. Value-2" =
                                UPPERCASE(CurrentEDIRecDocFields."Received EDI Value")
                              THEN
                                ReverseConditionalFound := TRUE;
                          EDIConditional."Conditional Operator"::"<>":
                            IF EDIConditional."Cond. Value-2" <>
                              UPPERCASE(CurrentEDIRecDocFields."Received EDI Value")
                            THEN
                              ReverseConditionalFound := TRUE;
                         END;
                        END ELSE
                          CASE EDIConditional."Conditional Operator" OF
                            EDIConditional."Conditional Operator"::" ":
                              IF EDIConditional."Cond. Value-2" =  CurrentEDIRecDocFields."Field Text Value" THEN
                                ReverseConditionalFound := TRUE;
                            EDIConditional."Conditional Operator"::"<>":
                              IF EDIConditional."Cond. Value" <>  CurrentEDIRecDocFields."Field Text Value" THEN
                                ReverseConditionalFound := TRUE;
                          END;
                        IF EDIConditional."Cond. Detail Segment" THEN BEGIN
                          ReverseConditionalFound := FALSE;
                          IF CurrentEDIRecDocFields."Segment Group" <> 0 THEN
                            ReverseConditionalFound := TRUE;
                        END;
                        IF EDIConditional."Cond. Non-Detail Segment" THEN BEGIN
                          ReverseConditionalFound := FALSE;
                          IF CurrentEDIRecDocFields."Segment Group" = 0 THEN
                            ReverseConditionalFound := TRUE;
                        END;
                      END;
                    END;
                  IF NOT ReverseConditionalFound THEN
                    ReverseConditional.DELETE;
                END;
              END ELSE BEGIN
                CurrentEDIRecDocFields.RESET;
                CurrentEDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
                CurrentEDIRecDocFields.SETRANGE(Segment,EDIConditional."Cond. Segment");
                IF CurrentEDIRecDocFields.FIND('-') THEN
                  IF ReverseConditional."Segment Group" > 0 THEN BEGIN
                    CurrentEDIRecDocFields.SETRANGE("Segment Group",ReverseConditional."Segment Group");
                    IF NOT CurrentEDIRecDocFields.FIND('-') THEN
                      ReverseConditionalFound := TRUE;
                  END ELSE BEGIN
                    CurrentEDIRecDocFields.SETFILTER(
                      "Reverse Cond. Group",'>%1',ReverseConditional."Reverse Cond. Group");
                    IF NOT CurrentEDIRecDocFields.FIND('-') THEN
                      ReverseConditionalFound := TRUE;
                  END
                ELSE
                  IF EDIConditional."Cond. Segment Not Present" THEN
                    ReverseConditionalFound := TRUE;
                IF NOT ReverseConditionalFound THEN
                  ReverseConditional.DELETE;
              END;
            UNTIL EDIConditional.NEXT = 0;
        UNTIL ReverseConditional.NEXT = 0;
      END;

      ReverseCond := FALSE;
    END;

    PROCEDURE EvaluateConditionalSequence@1240020001();
    BEGIN
      ConditionalFound := FALSE;
      EDIConditionalSequence.RESET;
      EDIConditionalSequence.SETRANGE("Trade Partner No.",EDIConditional."Trade Partner No.");
      EDIConditionalSequence.SETRANGE("EDI Document No.",EDIConditional."EDI Document No.");
      EDIConditionalSequence.SETRANGE(Version,EDIConditional.Version);
      EDIConditionalSequence.SETRANGE(Type,EDIConditional.Type);
      EDIConditionalSequence.SETRANGE(Segment,EDIConditional.Segment);
      EDIConditionalSequence.SETRANGE(Element,EDIConditional.Element);
      EDIConditionalSequence.SETRANGE("Cond. Segment",EDIConditional."Cond. Segment");
      EDIConditionalSequence.SETRANGE("Cond. Element",EDIConditional."Cond. Element");
      EDIConditionalSequence.SETRANGE("Cond. Value",EDIConditional."Cond. Value");
      EDIConditionalSequence.SETRANGE("Cond. Element-2",EDIConditional."Cond. Element-2");
      EDIConditionalSequence.SETRANGE("Cond. Value-2",EDIConditional."Cond. Value-2");
      EDIConditionalSequence.SETRANGE("Cond. Segment-2",EDIConditional."Cond. Segment-2");
      EDIConditionalSequence.SETRANGE(
        "Cond. Segment Not Present",EDIConditional."Cond. Segment Not Present");
      EDIConditionalSequence.SETRANGE("Cond. Detail Segment",EDIConditional."Cond. Detail Segment");
      EDIConditionalSequence.SETRANGE(
        "Cond. Non-Detail Segment",EDIConditional."Cond. Non-Detail Segment");
      EDIConditionalSequence.SETRANGE("Processing Sequence",EDIConditional."Processing Sequence");
      EDIConditionalSequence.SETRANGE("Cond. Sequence",EDIConditional."Cond. Sequence");
      EDIConditionalSequence.SETRANGE("Segment Group",EDIRecDocFields4."Segment Group");
      IF NOT EDIConditionalSequence.FIND('-') THEN BEGIN
        IF EDIRecDocFields."Segment Sequence" = EDIConditional."Cond. Sequence" THEN BEGIN
          EDIConditionalSequence.INIT;
          EDIConditionalSequence.RESET;
          EDIConditionalSequence."Trade Partner No." := EDIConditional."Trade Partner No.";
          EDIConditionalSequence."EDI Document No." := EDIConditional."EDI Document No.";
          EDIConditionalSequence.Version := EDIConditional.Version;
          EDIConditionalSequence.Type := EDIConditional.Type;
          EDIConditionalSequence."Processing Sequence" := EDIConditional."Processing Sequence";
          EDIConditionalSequence.Segment := EDIConditional.Segment;
          EDIConditionalSequence.Element := EDIConditional.Element;
          EDIConditionalSequence."Cond. Segment" := EDIConditional."Cond. Segment";
          EDIConditionalSequence."Cond. Element" := EDIConditional."Cond. Element";
          EDIConditionalSequence."Cond. Value" := EDIConditional."Cond. Value";
          EDIConditionalSequence."Cond. Sequence" := EDIConditional."Cond. Sequence";
          EDIConditionalSequence."Cond. Element-2" := EDIConditional."Cond. Element-2";
          EDIConditionalSequence."Cond. Value-2" := EDIConditional."Cond. Value-2";
          EDIConditionalSequence."Cond. Segment-2" := EDIConditional."Cond. Segment-2";
          EDIConditionalSequence."Segment Group" := EDIRecDocFields4."Segment Group";
          IF EDIConditionalSequence.INSERT THEN;
          ConditionalFound := TRUE;
        END ELSE
          ConditionalFound := FALSE;
      END;
    END;

    PROCEDURE FormatTransactionDateTime@1240021000();
    BEGIN
      EDISetup.GET;

      IF TransactionTimeText <> '' THEN
        EVALUATE(TransactionTime,TransactionTimeText);

      IF TransactionDateText = '' THEN
        TransactionDate := 0D
      ELSE
        CASE STRLEN(TransactionDateText) OF
          6:
            CASE EDISetup."Local Date Format" OF
              EDISetup."Local Date Format"::"MM/DD/YYYY":
                EVALUATE(
                  TransactionDate,
                  COPYSTR(TransactionDateText,3,4) +
                  COPYSTR(TransactionDateText,1,2));
              EDISetup."Local Date Format"::"DD/MM/YYYY":
                EVALUATE(
                  TransactionDate,
                  COPYSTR(TransactionDateText,5,2) +
                  COPYSTR(TransactionDateText,3,2) +
                  COPYSTR(TransactionDateText,1,2));
              EDISetup."Local Date Format"::"YY/MM/DD":
                EVALUATE(
                  TransactionDate,TransactionDateText);
            END;
          8:
            CASE EDISetup."Local Date Format" OF
              EDISetup."Local Date Format"::"MM/DD/YYYY":
                EVALUATE(
                  TransactionDate,
                  COPYSTR(TransactionDateText,5,4) +
                  COPYSTR(TransactionDateText,1,4));
              EDISetup."Local Date Format"::"DD/MM/YYYY":
                EVALUATE(
                  TransactionDate,
                  COPYSTR(TransactionDateText,7,2) +
                  COPYSTR(TransactionDateText,5,2) +
                  COPYSTR(TransactionDateText,1,4));
              EDISetup."Local Date Format"::"YY/MM/DD":
                EVALUATE(
                  TransactionDate,
                  COPYSTR(TransactionDateText,3,2) +
                  COPYSTR(TransactionDateText,5,2) +
                  COPYSTR(TransactionDateText,7,2));
            END;
        END;
    END;

    PROCEDURE ValidateReferenceFields@1240020002();
    VAR
      EDIRecDocField@1240020000 : Record 14002359;
      EDILocalization@1240020001 : Codeunit 14002390;
      ReferenceID@1240020002 : Text;
      ReferenceType@1240020003 : Text;
      CustomerNo@1240020004 : Code[1024];
      CustomerReferenceNo@1240020009 : Text;
      VendorNo@1240020005 : Code[1024];
      VendorOrderNo@1240020006 : Text;
      VendorInvoiceNo@1240020007 : Text;
      VendorShipmentNo@1240020008 : Text;
    BEGIN
      EDIRecDocField.RESET;
      EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
      EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"E.D.I. Receive Document Hdr.");
      IF EDIRecDocField.FIND('-') THEN BEGIN
        ReferenceID := '';
        ReferenceType := '';
        CustomerReferenceNo := '';
        CustomerNo := '';
        VendorNo := '';
        VendorOrderNo := '';
        VendorInvoiceNo := '';
        VendorShipmentNo := '';
        REPEAT
          CASE EDIRecDocField."Nav Field No." OF
            EDIRecDocHdr.FIELDNO("Reference ID"):
              ReferenceID :=
                EDILocalization.LoadTextFields(ReferenceID,EDIRecDocField);
            EDIRecDocHdr.FIELDNO("Reference Type"):
              ReferenceType :=
                EDILocalization.LoadTextFields(ReferenceType,EDIRecDocField);
            EDIRecDocHdr.FIELDNO("Customer Reference No."):
              CustomerReferenceNo :=
                EDILocalization.LoadTextFields(CustomerReferenceNo,EDIRecDocField);
            EDIRecDocHdr.FIELDNO("Customer No."):
              CustomerNo :=
                EDILocalization.LoadTextFields(CustomerNo,EDIRecDocField);
            EDIRecDocHdr.FIELDNO("Vendor No."):
              VendorNo :=
                EDILocalization.LoadTextFields(VendorNo,EDIRecDocField);
            EDIRecDocHdr.FIELDNO("Vendor Order No."):
              VendorOrderNo :=
                EDILocalization.LoadTextFields(VendorOrderNo,EDIRecDocField);
            EDIRecDocHdr.FIELDNO("Vendor Invoice No."):
              VendorInvoiceNo :=
                EDILocalization.LoadTextFields(VendorInvoiceNo,EDIRecDocField);
            EDIRecDocHdr.FIELDNO("Vendor Shipment No."):
              VendorShipmentNo :=
                EDILocalization.LoadTextFields(VendorShipmentNo,EDIRecDocField);
          END;
        UNTIL EDIRecDocField.NEXT = 0;
        EDIRecDocHdr."Reference ID" := COPYSTR(ReferenceID,1,MAXSTRLEN(EDIRecDocHdr."Reference ID"));
        EDIRecDocHdr."Reference Type" := COPYSTR(ReferenceType,1,MAXSTRLEN(EDIRecDocHdr."Reference Type"));
        EDIRecDocHdr."Customer Reference No." :=
          COPYSTR(CustomerReferenceNo,1,MAXSTRLEN(EDIRecDocHdr."Customer Reference No."));
        EDIRecDocHdr."Customer No." := COPYSTR(CustomerNo,1,MAXSTRLEN(EDIRecDocHdr."Customer No."));
        EDIRecDocHdr."Vendor No." := COPYSTR(VendorNo,1,MAXSTRLEN(EDIRecDocHdr."Vendor No."));
        EDIRecDocHdr."Vendor Invoice No." :=
          COPYSTR(VendorInvoiceNo,1,MAXSTRLEN(EDIRecDocHdr."Vendor Invoice No."));
        EDIRecDocHdr."Vendor Shipment No." :=
          COPYSTR(VendorShipmentNo,1,MAXSTRLEN(EDIRecDocHdr."Vendor Shipment No."));
      END;
    END;

    PROCEDURE SetTPZDivCode@1000000000(pTPZDIVCode@1000000000 : Code[20]);
    BEGIN
      //TPZ1940
      GlobalTPZDIVCode := pTPZDIVCode;
    END;

    PROCEDURE SetImportByXMLFile@1240020007(ImportByFile@1240020000 : Boolean);
    BEGIN
      ImportByXMLFile := ImportByFile;
    END;

    BEGIN
    {
      // EDI Incoming Document
      20170714 TPZ1940 - EDI Division Code determination based on GS ID
      LS001 JH 112417 - add logic to skip flat file segments not needed
      LS002 JH 120817 - add logic from later version to handle files with a space between file name and extension
      LS003 JH 02/07/18 - segment group fix from LA support
      2018-07-09  UCHOUHAN TPZ2344
        Added code to update division code.
      2019-03-01 AKUMAR TPZ2499
        Added code to update ISR code.
      2019-05-01 UCHOUHAN TPZ2561
        Commented old code and Added new Code for Division 'P'.
    }
    END.
  }
}

