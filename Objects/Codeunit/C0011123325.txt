OBJECT Codeunit 11123325 SC - Calculation Management
{
  OBJECT-PROPERTIES
  {
    Date=03/04/21;
    Time=12:23:16 PM;
    Modified=Yes;
    Version List=SCW19.2.0;
  }
  PROPERTIES
  {
    TableNo=11123310;
    OnRun=BEGIN
            CLEARLASTERROR;

            Rec.CalcOrderable := TRUE;
            Rec.CalcErrorText := '';
            CASE Rec.CalcFunction OF
              'CalcSalesPrice' : CalcSalesPrice(Rec);
              'CalcItemPriceByCurrency' : CalcItemPriceByCurrency(Rec);
              'CalcUnitPriceByCurrencyAndVAT' : CalcUnitPriceByCurrencyAndVAT(Rec);
              'DeleteSalesLines' :  DeleteSalesLines(Rec);
            END;
          END;

  }
  CODE
  {
    VAR
      Context@11123303 : Codeunit 11123305;

    LOCAL PROCEDURE CalcSalesPrice@11123302(VAR Params@11123302 : Record 11123310);
    VAR
      Item@11123303 : Record 27;
      TempSalesHeader@11123306 : TEMPORARY Record 36;
      TempSalesLine@11123308 : TEMPORARY Record 37;
      SettingsFunctions@11123312 : Codeunit 11123311;
      RecMgt@11123304 : Codeunit 11123326;
      CatalogHelper@11123305 : Codeunit 11123318;
      OrderBasketFunc@11123307 : Codeunit 11123320;
      CustomerFunc@11123311 : Codeunit 11123313;
      SalesPriceCalcMgt@11123309 : Codeunit 7000;
      Price@11123313 : Decimal;
    BEGIN
      IF NOT RecMgt.GetItem(Params.ProductId,Item,FALSE) THEN
        EXIT;

      IF CustomerFunc.CheckAccountCode(Params) AND
         CatalogHelper.IsItemOrderable(Item,FALSE,Params) AND
         TryFindSalesPrice(Params)
      THEN BEGIN
        InitSalesHeader(TempSalesHeader,Params);
        FillAccountInfo(TempSalesHeader,Params);
        OrderBasketFunc.SetDocumentCurrency(TempSalesHeader,Params);

        CreateTempSalesLine(
          TempSalesHeader,
          TempSalesLine,
          Item,
          Params.VariantId,
          Params.VATProdPostGroup,
          Params.AccountType,
          Params.PrepackSpecific,
          Params.UnitOfMeasureId,
          1);

        SalesPriceCalcMgt.FindSalesLinePrice(TempSalesHeader,TempSalesLine,TempSalesLine.FIELDNO("No."));
        Price := SettingsFunctions.RoundPrice(TempSalesLine."Unit Price",TempSalesHeader."Currency Code");
        //Price:= GetSalePriceTopaz1(Params);//UTK
        Params.Price := Price;
        TempSalesHeader.DELETE;
      END ELSE
        CalcItemPriceByCurrency(Params);
    END;

    PROCEDURE InitSalesHeader@11123303(VAR SalesHeader@11123302 : Record 36;VAR Params@11123303 : Record 11123310);
    VAR
      OrderBasketFunc@11123304 : Codeunit 11123320;
    BEGIN
      SalesHeader.INIT;
      SalesHeader."Document Type" := OrderBasketFunc.GetDocumentType(Params);
      SalesHeader."No." := COPYSTR(FORMAT(CREATEGUID),2,20);

      SalesHeader."Order Date" := WORKDATE;
      SalesHeader."Posting Date" := WORKDATE;
      SalesHeader."Document Date" := WORKDATE;
      SalesHeader."Shipment Date" := WORKDATE;

      SalesHeader.INSERT;
    END;

    PROCEDURE FillAccountInfo@11123304(VAR SalesHeader@11123302 : Record 36;VAR Params@11123303 : Record 11123310);
    VAR
      Customer@11123304 : Record 18;
      Contact@11123305 : Record 5050;
      CustomerTemplate@11123308 : Record 5105;
      GLSetup@11123309 : Record 98;
      CurrExchRate@11123306 : Record 330;
      RecMgt@11123307 : Codeunit 11123326;
      CustomerFunc@11123310 : Codeunit 11123313;
      SCCustomerHelper@1000000000 : Codeunit 11123314;
    BEGIN
      IF CustomerFunc.IsAccountCustomer(Params.AccountType) THEN BEGIN
        RecMgt.GetCustomer(Params.AccountId,Customer,TRUE);

        CustomerFunc.TestCustomer(Customer,TRUE);

        SalesHeader."Sell-to Customer No." := Customer."No.";
        // <TPZ1412>
        SalesHeader."Shortcut Dimension 5 Code" := 'E';
        // </TPZ1412>
        SalesHeader."Sell-to Customer Template Code" := '';

        SalesHeader."Sell-to Customer Name" := Customer.Name;
        SalesHeader."Sell-to Customer Name 2" := Customer."Name 2";
        SalesHeader."Sell-to Address" := Customer.Address;
        SalesHeader."Sell-to Address 2" := Customer."Address 2";
        SalesHeader."Sell-to City" := Customer.City;
        SalesHeader."Sell-to Post Code" := Customer."Post Code";
        SalesHeader."Sell-to County" := Customer.County;

        SalesHeader."Gen. Bus. Posting Group" := Customer."Gen. Bus. Posting Group";
        SalesHeader."VAT Bus. Posting Group" := Customer."VAT Bus. Posting Group";
        SalesHeader."Tax Area Code" := Customer."Tax Area Code";
        SalesHeader."Tax Liable" := Customer."Tax Liable";
        SalesHeader."VAT Country/Region Code" := Customer."Country/Region Code";
        IF Customer."Bill-to Customer No." <> '' THEN BEGIN
          RecMgt.GetCustomer(Customer."Bill-to Customer No.",Customer,TRUE);
          SalesHeader."Bill-to Customer Template Code" := '';
          SalesHeader."Gen. Bus. Posting Group" := Customer."Gen. Bus. Posting Group";
          RecMgt.GetGLSetup(GLSetup,TRUE);
          IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No." THEN
            SalesHeader."VAT Bus. Posting Group" := Customer."VAT Bus. Posting Group";
        END;
        SalesHeader."Bill-to Customer No." := Customer."No.";
        SalesHeader."Customer Posting Group" := Customer."Customer Posting Group";

        IF NOT IsEmptyCurrencyId(Customer,Params) THEN BEGIN
          SalesHeader."Currency Code" := Params.CurrentCurrencyId;
          SalesHeader."Currency Factor" := CurrExchRate.ExchangeRate(WORKDATE,SalesHeader."Currency Code");
        END;

        SalesHeader."Customer Price Group" := Customer."Customer Price Group";
        SalesHeader."Prices Including VAT" := Customer."Prices Including VAT";
        SalesHeader."Allow Line Disc." := Customer."Allow Line Disc.";
        SalesHeader."Invoice Disc. Code" := Customer."Invoice Disc. Code";
        SalesHeader."Customer Disc. Group" := Customer."Customer Disc. Group";

        SalesHeader."Language Code" := Customer."Language Code";
        // <TPZ1412>
        //SalesHeader."Salesperson Code" := Customer."Salesperson Code";
        SalesHeader."Salesperson Code" := SCCustomerHelper.GetSalespersonCode(Customer."No.");
        // </TPZ1412>
        SalesHeader."Combine Shipments" := Customer."Combine Shipments";
        SalesHeader.Reserve := Customer.Reserve;
        SalesHeader."VAT Registration No." := Customer."VAT Registration No.";
        IF SalesHeader."Document Type" = SalesHeader."Document Type"::Order THEN
          SalesHeader."Prepayment %" := Customer."Prepayment %";
      END ELSE BEGIN
        RecMgt.GetContact(Params.AccountId,Contact,TRUE);

        CustomerFunc.TestContact(Contact,TRUE);

        SalesHeader."Sell-to Contact No." := Params.AccountId;
        SalesHeader."Bill-to Contact No." := Params.AccountId;

        RecMgt.GetCustomerTemplate(Contact."Customer Template Code",CustomerTemplate,TRUE);
        CustomerFunc.TestCustomerTemplate(CustomerTemplate,TRUE);
        SalesHeader."Sell-to Customer Template Code" := CustomerTemplate.Code;
        SalesHeader."Bill-to Customer Template Code" := CustomerTemplate.Code;

        SalesHeader."Gen. Bus. Posting Group" := CustomerTemplate."Gen. Bus. Posting Group";
        SalesHeader."VAT Bus. Posting Group" := CustomerTemplate."VAT Bus. Posting Group";
        SalesHeader."Customer Posting Group" := CustomerTemplate."Customer Posting Group";
        SalesHeader."Invoice Disc. Code" := CustomerTemplate."Invoice Disc. Code";
        SalesHeader."Customer Price Group" := CustomerTemplate."Customer Price Group";
        SalesHeader."Customer Disc. Group" := CustomerTemplate."Customer Disc. Group";
        SalesHeader."Allow Line Disc." := CustomerTemplate."Allow Line Disc.";
      END;
    END;

    LOCAL PROCEDURE IsEmptyCurrencyId@11123311(VAR Customer@11123302 : Record 18;VAR Params@11123303 : Record 11123310) : Boolean;
    VAR
      EmptyCurrencyId@11123304 : Boolean;
    BEGIN
      EmptyCurrencyId := (Params.BaseCurrencyId = Params.CurrentCurrencyId) AND (Customer."Currency Code" = '');
      EXIT(EmptyCurrencyId);
    END;

    PROCEDURE CreateTempSalesLine@11123305(VAR SalesHeader@11123314 : Record 36;VAR SalesLine@11123302 : Record 37;VAR Item@11123303 : Record 27;ItemVariantCode@11123304 : Code[10];VATProductGroup@11123305 : Code[10];AccountType@11123307 : Text[30];PrepackSpecific@11123308 : Boolean;UnitOfMeasureCode@11123310 : Code[10];Quantity@11123309 : Decimal);
    VAR
      VATSetup@11123311 : Record 325;
      ItemUOM@11123312 : Record 5404;
      RecMgt@11123306 : Codeunit 11123326;
      CustomerFunc@11123313 : Codeunit 11123313;
    BEGIN
      SalesLine.INIT;

      IF PrepackSpecific THEN
        SalesLine.SetSalesHeader(SalesHeader);

      SalesLine."Document Type" := SalesHeader."Document Type";
      SalesLine."Document No." := SalesHeader."No.";
      SalesLine."Line No." := 10000;

      IF CustomerFunc.IsAccountCustomer(AccountType) THEN BEGIN
        SalesLine."Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
        SalesLine."Bill-to Customer No." := SalesHeader."Bill-to Customer No.";
      END;

      SalesLine.Type := SalesLine.Type::Item;
      SalesLine."No." := Item."No.";

      IF ItemVariantCode <> '' THEN
        SalesLine."Variant Code" := ItemVariantCode;

      IF RecMgt.GetItemSalesUOM(Item."No.",UnitOfMeasureCode,ItemUOM,FALSE) THEN BEGIN
        SalesLine."Unit of Measure Code" := UnitOfMeasureCode;
        SalesLine."Qty. per Unit of Measure" := ItemUOM."Qty. per Unit of Measure";
      END;

      SalesLine."Currency Code" := SalesHeader."Currency Code";
      SalesLine."Location Code" := SalesHeader."Location Code";
      SalesLine."Customer Price Group" := SalesHeader."Customer Price Group";
      SalesLine."Customer Disc. Group" := SalesHeader."Customer Disc. Group";
      SalesLine."Allow Line Disc." := SalesHeader."Allow Line Disc.";
      SalesLine."Gen. Bus. Posting Group" := SalesHeader."Gen. Bus. Posting Group";
      SalesLine."VAT Bus. Posting Group" := SalesHeader."VAT Bus. Posting Group";
      SalesLine."Allow Invoice Disc." := Item."Allow Invoice Disc.";
      SalesLine."Posting Group" := Item."Inventory Posting Group";
      SalesLine.Description := Item.Description;
      SalesLine."Description 2" := Item."Description 2";
      SalesLine."Allow Invoice Disc." := Item."Allow Invoice Disc.";
      SalesLine."Units per Parcel" := Item."Units per Parcel";
      SalesLine."Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
      SalesLine."Tax Group Code" := Item."Tax Group Code";
      SalesLine."Item Category Code" := Item."Item Category Code";
      SalesLine."Product Group Code" := Item."Product Group Code";
      SalesLine.Nonstock := Item."Created From Nonstock Item";
      SalesLine."Profit %" := Item."Profit %";
      SalesLine."Allow Item Charge Assignment" := TRUE;

      SalesLine."Transaction Type" := SalesHeader."Transaction Type";
      SalesLine."Transport Method" := SalesHeader."Transport Method";
      SalesLine."Bill-to Customer No." := SalesHeader."Bill-to Customer No.";
      SalesLine."Exit Point" := SalesHeader."Exit Point";
      SalesLine.Area := SalesHeader.Area;
      SalesLine."Transaction Specification" := SalesHeader."Transaction Specification";
      SalesLine."Tax Area Code" := SalesHeader."Tax Area Code";
      SalesLine."Tax Liable" := SalesHeader."Tax Liable";
      IF NOT SalesLine."System-Created Entry" AND
        (SalesLine."Document Type" = SalesLine."Document Type"::Order) AND
        (SalesLine.Type <> SalesLine.Type::" ")
      THEN
        SalesLine."Prepayment %" := SalesHeader."Prepayment %";
      SalesLine."Prepayment Tax Area Code" := SalesHeader."Tax Area Code";
      SalesLine."Prepayment Tax Liable" := SalesHeader."Tax Liable";
      SalesLine."Responsibility Center" := SalesHeader."Responsibility Center";

      SalesLine.Quantity := Quantity;

      IF VATProductGroup = '' THEN
        VATProductGroup := Item."VAT Prod. Posting Group";

      RecMgt.GetVATSetup(SalesHeader."VAT Bus. Posting Group",VATProductGroup,VATSetup,TRUE);

      SalesLine."VAT Bus. Posting Group" := VATSetup."VAT Bus. Posting Group";
      SalesLine."VAT Calculation Type" := VATSetup."VAT Calculation Type";
      SalesLine."VAT %" := VATSetup."VAT %";
      SalesLine."VAT Difference" := 0;
      SalesLine."VAT Identifier" := VATSetup."VAT Identifier";
    END;

    PROCEDURE CalcItemPriceByCurrency@11123306(VAR Params@11123302 : Record 11123310);
    VAR
      GLSetup@11123304 : Record 98;
      CurrExchRate@11123305 : Record 330;
      Currency@11123306 : Record 4;
      Item@11123303 : Record 27;
      ItemUOM@11123312 : Record 5404;
      RecMgt@11123310 : Codeunit 11123326;
      RoundingPrecision@11123307 : Decimal;
      CurrencyFactor@11123308 : Decimal;
      ExchangedPrice@11123309 : Decimal;
      UnitPrice@11123311 : Decimal;
    BEGIN
      IF RecMgt.GetItem(Params.ProductId,Item,FALSE) THEN BEGIN
        GLSetup.GET;
        RoundingPrecision := GLSetup."Inv. Rounding Precision (LCY)";
        // <TPZ1301>
        //IF (Params."Currency Code" = '') OR (GLSetup."LCY Code" = Params."Currency Code") THEN
        IF (Params.CurrentCurrencyId = '') OR (Params.CurrentCurrencyId = 'USD') THEN
        // </TPZ1301>
          UnitPrice := ROUND(Item."Unit Price",RoundingPrecision)
        ELSE BEGIN
          IF RecMgt.GetCurrency(Params.CurrentCurrencyId,Currency,FALSE) THEN BEGIN
            RoundingPrecision := Currency."Invoice Rounding Precision";
            CurrencyFactor := CurrExchRate.ExchangeRate(TODAY,Currency.Code);
            ExchangedPrice := CurrExchRate.ExchangeAmtLCYToFCY(TODAY,Currency.Code,Item."Unit Price",CurrencyFactor);
            UnitPrice := ROUND(ExchangedPrice,RoundingPrecision);
          END ELSE
            UnitPrice := ROUND(Item."Unit Price",RoundingPrecision);
        END;
      END;

      //UnitPrice:= GetSalePriceTopaz1(Params);//UTK

      IF RecMgt.GetItemSalesUOM(Item."No.",Params.UnitOfMeasureId,ItemUOM,FALSE) THEN
        IF ItemUOM."Qty. per Unit of Measure" <> 1 THEN
          UnitPrice := UnitPrice * ItemUOM."Qty. per Unit of Measure";

      IF RoundingPrecision = 0 THEN
        RoundingPrecision := 0.01;

      Params.Price := UnitPrice;
    END;

    LOCAL PROCEDURE CalcUnitPriceByCurrencyAndVAT@11123307(VAR Params@11123306 : Record 11123310);
    VAR
      Customer@11123307 : Record 18;
      Contact@11123308 : Record 5050;
      CustomerTemplate@11123309 : Record 5105;
      Currency@11123310 : Record 4;
      CurrExchRate@11123311 : Record 330;
      GLSetup@11123312 : Record 98;
      VATSetup@11123313 : Record 325;
      Item@11123303 : Record 27;
      ItemUOM@11123314 : Record 5404;
      RecMgt@11123302 : Codeunit 11123326;
      CatalogHelper@11123304 : Codeunit 11123318;
      CustomerFunc@11123305 : Codeunit 11123313;
      VATBusPostingGroup@11123315 : Code[10];
      VATBusPostingGroupCustomer@11123316 : Code[10];
      ContactNo@11123322 : Code[20];
      CurrencyFactor@11123317 : Decimal;
      FinalRoundingPrecision@11123318 : Decimal;
      ResultPrice@11123319 : Decimal;
      VATPercent@11123320 : Decimal;
      ShowPricesIncludingVAT@11123321 : Boolean;
    BEGIN
      RecMgt.GetItem(Params.ProductId,Item,TRUE);
      IF NOT CatalogHelper.IsItemOrderable(Item,FALSE,Params) THEN
        EXIT;

      IF RecMgt.GetGLSetup(GLSetup,FALSE) THEN
        FinalRoundingPrecision := GLSetup."Inv. Rounding Precision (LCY)";

      ResultPrice := Params.Price;

      // <TPZ1301>
      //IF (Params."Currency Code" <> '') AND (Params."Currency Code" <> GLSetup."LCY Code") THEN
      IF (Params.CurrentCurrencyId <> '') AND (Params.CurrentCurrencyId <> 'USD') THEN
      // </TPZ1301>
        IF RecMgt.GetCurrency(Params.CurrentCurrencyId,Currency,FALSE) THEN BEGIN
          FinalRoundingPrecision := Currency."Invoice Rounding Precision";
          CurrencyFactor := CurrExchRate.ExchangeRate(TODAY,Params.CurrentCurrencyId);
          ResultPrice := CurrExchRate.ExchangeAmtLCYToFCY(TODAY,Currency.Code,Params.Price,CurrencyFactor);
        END;

      IF CustomerFunc.IsAccountCustomer(Params.AccountType) THEN BEGIN
        IF RecMgt.GetCustomer(Params.AccountId,Customer,FALSE) THEN BEGIN
          ShowPricesIncludingVAT := CustomerFunc.GetPricesIncludingVAT(Customer);
          VATBusPostingGroupCustomer := Customer."VAT Bus. Posting Group";
        END;
      END ELSE BEGIN
        ContactNo := Params.AccountId;
        IF CustomerFunc.GetRelatedCustByContNo(ContactNo,Customer) THEN BEGIN
          ShowPricesIncludingVAT := CustomerFunc.GetPricesIncludingVAT(Customer);
          VATBusPostingGroupCustomer := Customer."VAT Bus. Posting Group";
        END ELSE BEGIN
          IF Params.AccountType = 'Contact' THEN
            IF RecMgt.GetContact(Params.AccountId,Contact,FALSE) THEN
              IF RecMgt.GetCustomerTemplate(Contact."Customer Template Code",CustomerTemplate,FALSE) THEN
                VATBusPostingGroupCustomer := CustomerTemplate."VAT Bus. Posting Group";
        END;
      END;

      IF Params.PriceIncludesVAT THEN
        VATBusPostingGroup := Params.VATBusPostGroup
      ELSE
        VATBusPostingGroup := VATBusPostingGroupCustomer;

      IF RecMgt.GetVATSetup(VATBusPostingGroup,Params.VATProdPostGroup,VATSetup,FALSE) THEN
        CASE VATSetup."VAT Calculation Type" OF
          VATSetup."VAT Calculation Type"::"Normal VAT",
          VATSetup."VAT Calculation Type"::"Reverse Charge VAT" :
            VATPercent := VATSetup."VAT %";
          ELSE
            VATPercent := 0;
        END;

      IF ShowPricesIncludingVAT THEN BEGIN
        IF NOT Params.PriceIncludesVAT THEN
          ResultPrice := ResultPrice * (1 + (VATPercent / 100));
      END ELSE BEGIN
        IF Params.PriceIncludesVAT THEN
          ResultPrice := ResultPrice / (1 + (VATPercent / 100));
      END;

      //ResultPrice:= GetSalePriceTopaz1(Params);//UTK

      IF RecMgt.GetItemSalesUOM(Item."No.",Params.UnitOfMeasureId,ItemUOM,FALSE) THEN
        IF ItemUOM."Qty. per Unit of Measure" <> 1 THEN
          ResultPrice := ResultPrice * ItemUOM."Qty. per Unit of Measure";

      IF FinalRoundingPrecision = 0 THEN
        FinalRoundingPrecision := 0.01;

      Params.Price := ROUND(ResultPrice,FinalRoundingPrecision);
    END;

    LOCAL PROCEDURE DeleteSalesLines@11123308(VAR Params@11123302 : Record 11123310);
    VAR
      SalesLine@11123303 : Record 37;
      SalesDocLine@11123306 : Record 11123325;
      OrderBasketFunc@11123304 : Codeunit 11123320;
      DocumentNo@11123305 : Code[20];
    BEGIN
      DocumentNo := Params.DocumentId;
      SalesLine.SETRANGE("Document Type",OrderBasketFunc.GetDocumentType(Params));
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.DELETEALL(TRUE);

      SalesDocLine.SETRANGE("Document Type",OrderBasketFunc.GetDocumentType(Params));
      SalesDocLine.SETRANGE("Document No.",DocumentNo);
      IF NOT SalesDocLine.ISEMPTY THEN
        SalesDocLine.DELETEALL(TRUE);
    END;

    PROCEDURE TryFindSalesPrice@11123310(VAR Params@11123302 : Record 11123310) : Boolean;
    BEGIN
      EXIT(TRUE);

      // To be used for performance improvement
      // IF Params.VariantId = '' THEN
      //   EXIT(TRUE);
      // SalesPrice.RESET;
      // SalesPrice.SETRANGE("Variant Code",Params.VariantId);
      // EXIT(NOT SalesPrice.ISEMPTY);
    END;

    PROCEDURE GetError@11123402(VAR Params@11123302 : Record 11123310);
    VAR
      ErrorText@11123303 : Text[250];
    BEGIN
      Params.CalcOrderable := FALSE;
      ErrorText := Params.CalcErrorText;
      Params.CalcErrorText := COPYSTR(GETLASTERRORTEXT,1,MAXSTRLEN(ErrorText));
      CLEARLASTERROR;
    END;

    PROCEDURE LSRetailConnectorEnabled@11123350() : Boolean;
    VAR
      Context@11123307 : Codeunit 11123305;
      RecRef@11123306 : RecordRef;
      FieldRef@11123305 : FieldRef;
      WebshopId@11123304 : Code[50];
      LSConnectorEnabled@11123303 : Boolean;
    BEGIN
      IF Context.LsAddonIsUsed THEN BEGIN
        WebshopId := Context.GetCurrentWebsiteID;
        RecRef.OPEN(11123350);
        FieldRef := RecRef.FIELD(1);   // Webshop ID
        FieldRef.SETRANGE(WebshopId);
        IF RecRef.FINDFIRST THEN BEGIN
          FieldRef := RecRef.FIELD(4); // Enable LS Retail Connector
          EVALUATE(LSConnectorEnabled,FORMAT(FieldRef,0,2));
        END;
      END;
      EXIT(LSConnectorEnabled);
    END;

    LOCAL PROCEDURE GetSalePriceTopaz@1000000001(VAR SalesLine@1000000001 : Record 37;VAR Params@1000000000 : Record 11123310) : Decimal;
    VAR
      RecMgt@1000000003 : Codeunit 11123326;
      LastsalesPrice@1000000004 : Record 50004;
      SalesLineBuffer@1000000005 : Record 50021;
      Customer@1000000006 : Record 18;
      LineNo@1000000007 : Integer;
    BEGIN
      //<TPZ2751>
      {ItemDiv.RESET;
      IF ItemDiv.GET(Params.ProductId) AND (ItemDiv."Shortcut Dimension 5 Code" <> 'L') THEN BEGIN
      // IF Params.Type = SalesLine.Type :: Item THEN BEGIN}
      IF SalesLine."Shortcut Dimension 5 Code" <> 'L' THEN BEGIN
        RecMgt.GetCustomer(Params.AccountId,Customer,TRUE);
        LineNo+= 10000;
          SalesLineBuffer.INIT;
          SalesLineBuffer."Document Type" := SalesLineBuffer."Document Type"::Order;
          SalesLineBuffer."Document No." := '111';
          SalesLineBuffer."Line No." := LineNo;
          SalesLineBuffer.INSERT;
          SalesLineBuffer."Sell-to Customer No.":= Customer."No.";
          SalesLineBuffer.Type := SalesLineBuffer.Type::Item;
          SalesLineBuffer.VALIDATE("No.",Params.ProductId);
          SalesLineBuffer.MODIFY;
          EXIT ((SalesLineBuffer."Recomm. Unit Price"));
        //</TPZ2751>
       END ELSE BEGIN //UTK}
          RecMgt.GetCustomer(Params.AccountId,Customer,TRUE);
         // MESSAGE(Customer."No.");
          LastsalesPrice.RESET;
          LastsalesPrice.ASCENDING;
          LastsalesPrice.SETCURRENTKEY("Sell-to Customer No.","Item No.","Document Date");
          LastsalesPrice.SETRANGE("Sell-to Customer No.",Customer."No.");
          LastsalesPrice.SETRANGE("Item No.",SalesLine."No.");
          LastsalesPrice.SETRANGE("Document Type",LastsalesPrice."Document Type"::"Stock Status");
          IF LastsalesPrice.FINDLAST THEN
            EXIT (LastsalesPrice."Last Unit Price");

      // END;
      END; //UTK

      EXIT(SalesLine."Unit Price");
    END;

    LOCAL PROCEDURE GetSalePriceTopaz1@1000000000(VAR Params@1000000000 : Record 11123310) : Decimal;
    VAR
      RecMgt@1000000003 : Codeunit 11123326;
      LastsalesPrice@1000000004 : Record 50004;
      SalesLineBuffer@1000000005 : Record 50021;
      Customer@1000000006 : Record 18;
      LineNo@1000000007 : Integer;
      ItemDiv@1000000001 : Record 27;
    BEGIN
      //<TPZ2751>
      ItemDiv.RESET;
      IF ItemDiv.GET(Params.ProductId) AND (ItemDiv."Shortcut Dimension 5 Code" <> 'L') THEN BEGIN
      // IF Params.Type = SalesLine.Type :: Item THEN BEGIN}
      //IF SalesLine."Shortcut Dimension 5 Code" <> 'L' THEN BEGIN
        RecMgt.GetCustomer(Params.AccountId,Customer,TRUE);
        LineNo+= 10000;
          SalesLineBuffer.INIT;
          SalesLineBuffer."Document Type" := SalesLineBuffer."Document Type"::Order;
          SalesLineBuffer."Document No." := '111';
          SalesLineBuffer."Line No." := LineNo;
          SalesLineBuffer.INSERT;
          SalesLineBuffer."Sell-to Customer No.":= Customer."No.";
          SalesLineBuffer.Type := SalesLineBuffer.Type::Item;
          SalesLineBuffer.VALIDATE("No.",Params.ProductId);
          SalesLineBuffer.MODIFY;
          EXIT ((SalesLineBuffer."Recomm. Unit Price"));
        //</TPZ2751>
       END ELSE BEGIN //UTK}
          RecMgt.GetCustomer(Params.AccountId,Customer,TRUE);
         // MESSAGE(Customer."No.");
          LastsalesPrice.RESET;
          LastsalesPrice.ASCENDING;
          LastsalesPrice.SETCURRENTKEY("Sell-to Customer No.","Item No.","Document Date");
          LastsalesPrice.SETRANGE("Sell-to Customer No.",Customer."No.");
          LastsalesPrice.SETRANGE("Item No.",Params.ProductId);
          LastsalesPrice.SETRANGE("Document Type",LastsalesPrice."Document Type"::"Stock Status");
          IF LastsalesPrice.FINDLAST THEN
            EXIT (LastsalesPrice."Last Unit Price");

      // END;
      END; //UTK

      //EXIT("Unit Price");
    END;

    BEGIN
    {
      2016-01-20 TPZ1412 TAKHMETO
        GetSalespersonCode function has been added
      2016-02-09 TPZ1301 TAKHMETO
        CalcItemPriceByCurrency, CalcUnitPriceByCurrencyAndVAT function has been modified
    }
    END.
  }
}

