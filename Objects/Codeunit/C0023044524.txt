OBJECT Codeunit 23044524 WHI Reclass Mgmt.
{
  OBJECT-PROPERTIES
  {
    Date=02/19/20;
    Time=[ 2:12:50 PM];
    Version List=WHI2.4.7684.0;
  }
  PROPERTIES
  {
    TableNo=23044511;
    Permissions=TableData 6550=rimd;
    OnRun=VAR
            liEventID@1000000002 : Integer;
            ltxtOutputText@1000000001 : BigText;
            losReturnMessage@1000000000 : OutStream;
          BEGIN
            codRegionCode := Rec.getValue('device_culture'); //<IW author="R.Trudeau" date="10/17/18" issue="TFS3495" />

            liEventID := Rec.getEvent();
            executeEvent(liEventID, Rec, ltxtOutputText);
            "Extensibility Blob".CREATEOUTSTREAM( losReturnMessage );
            ltxtOutputText.WRITE(losReturnMessage);
            MODIFY();
          END;

  }
  CODE
  {
    VAR
      iEventID@1000000003 : Integer;
      cuCommonFuncs@1000000002 : Codeunit 23044501;
      cuResMgmt@1000000006 : Codeunit 23044514;
      cuWhseActMgmt@1000000007 : Codeunit 23044511;
      txtLastInsertedJournalLine@1000000009 : Text[1024];
      cuPrintingMgmt@1000000010 : Codeunit 23044525;
      cuWhseActivityMgmt@1000000015 : Codeunit 23044511;
      cuJournalFuncs@1000000016 : Codeunit 23044528;
      cuActivityLogMgt@1000000018 : Codeunit 23044537;
      cuCommonBase@1000000020 : Codeunit 23044519;
      cuLPCommon@1000000017 : Codeunit 23044541;
      cuLPMgmt@1000000021 : Codeunit 23044520;
      cuJournalFunc@1000000022 : Codeunit 23044528;
      cuTranslationMgmt@1000000024 : Codeunit 23044526;
      codRegionCode@1000000023 : Code[10];

    PROCEDURE executeEvent@1000000018(piEventID@1000000000 : Integer;VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000002 : BigText);
    VAR
      ltxtTestValue@1000000003 : Text[100];
    BEGIN
      iEventID := piEventID;

      CASE piEventID OF
        20070:  getWhseReclassJournal(ptrecEventParams, pbsOutput);
        20071:  updateWhseReclassLine(ptrecEventParams, pbsOutput);
        20072:  createWhseReclassLine(ptrecEventParams, pbsOutput);
        20073:  deleteWhseReclassLine(ptrecEventParams, pbsOutput);
        20074:  cuPrintingMgmt.handlePrint( ptrecEventParams, pbsOutput);
        20075:  postWhseReclassJournal(ptrecEventParams, pbsOutput);
        20076:  updateWhseReclassBin(ptrecEventParams, pbsOutput);
        20077:  addDocToWhseReclassJournal(ptrecEventParams, pbsOutput);
        20078:  processWhseReclassLPScan(ptrecEventParams, pbsOutput);
        20079:  copyExistingWhseReclassLine(ptrecEventParams, pbsOutput);   //<IW author="Howie Zhao" date="6/28/17" issue="TFS3128" />
      END;
    END;

    PROCEDURE getWhseReclassJournal@1000000001(VAR ptrecEventParams@1000000008 : TEMPORARY Record 23044511;VAR pbsOutput@1000000007 : BigText);
    VAR
      lcodLocation@1000000003 : Code[10];
      lcodReclassBatch@1000000009 : Code[10];
      lcodDocNumber@1000000004 : Code[20];
      lrecWhseJnlLine@1000000005 : Record 7311;
      lrecItemTrackingCode@1000000010 : Record 6502;
      lrecItem@1000000011 : Record 27;
    BEGIN
      // Event 20070

      // get the supplied params
      lcodLocation := ptrecEventParams.getValue('location');
      //lcodReclassBatch := ptrecEventParams.getValue('batch');
      lcodReclassBatch := COPYSTR( cuJournalFuncs.getWhseReclassBatchToUse( ptrecEventParams), 1, MAXSTRLEN( lcodReclassBatch) );

      // create the header
      pbsOutput.ADDTEXT('<DATASET>');
      pbsOutput.ADDTEXT('<TABLE id="header">');
      pbsOutput.ADDTEXT('<COLS>');

      cuCommonFuncs.initVariantColumnIndex();
      cuCommonFuncs.addDSColumn(pbsOutput,'',lcodReclassBatch,TRUE,60,'Batch','Journal Batch Name');
      //cuCommonFuncs.addDSColumn(pbsOutput,'',lcodDocNumber,TRUE,60,'Doc #','Document No.');

      pbsOutput.ADDTEXT('</COLS>');

      pbsOutput.ADDTEXT('<ROWS><R><FIELDS>');

      cuCommonFuncs.initVariantColumnIndex();
      cuCommonFuncs.addDSField(pbsOutput,lcodReclassBatch);
      //cuCommonFuncs.addDSField(pbsOutput,lcodDocNumber);
      pbsOutput.ADDTEXT('</FIELDS></R></ROWS>');
      pbsOutput.ADDTEXT('</TABLE>');

      // create the child
      pbsOutput.ADDTEXT('<TABLE id="line">');

      //
      // generate the dataset columns
      //
      pbsOutput.ADDTEXT('<COLS>');

      // add the journal lines
      cuCommonFuncs.initializeColumns( TRUE );
      cuCommonFuncs.addDSColumnsFromConfig( pbsOutput, 20070,'', DATABASE::"Warehouse Journal Line" );

      // add the item tracking info
      cuCommonFuncs.addDSTrackingColumns(pbsOutput);

      pbsOutput.ADDTEXT('</COLS>');
      pbsOutput.ADDTEXT('<ROWS>');

      // Moved getWhseTemplate
      lrecWhseJnlLine.SETRANGE("Journal Template Name",cuJournalFuncs.getWhseTemplate(PAGE::"Whse. Reclassification Journal",2));
      lrecWhseJnlLine.SETRANGE("Journal Batch Name",lcodReclassBatch);
      lrecWhseJnlLine.SETRANGE("Location Code",lcodLocation);
      lrecWhseJnlLine.SETFILTER("Item No.",'<>%1','');

      IF( lrecWhseJnlLine.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          getWhseReclassLine(pbsOutput,lrecWhseJnlLine);
        UNTIL(lrecWhseJnlLine.NEXT=0);
      END;

      pbsOutput.ADDTEXT('</ROWS>');
      pbsOutput.ADDTEXT('</TABLE>');
      pbsOutput.ADDTEXT('</DATASET>');

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Warehouse Journal Line"));
      ptrecEventParams.setValue('Document No.', lcodReclassBatch);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getWhseReclassLine@1000000006(VAR pbsXMLOutput@1000000001 : BigText;precWhseJnlLine@1000000000 : Record 7311);
    VAR
      lrecItem@1000000002 : Record 27;
      lrecItemTrackingCode@1000000003 : Record 6502;
      lrecLPLineUsage@1000000006 : Record 23044507;
      lrrefWriter@1000000004 : RecordRef;
      lcodLPNumber@1000000005 : Code[20];
      losOutStream@1000000007 : OutStream;
      lFile@1000000008 : File;
      ltrecEventParams@1000000009 : TEMPORARY Record 23044511;
    BEGIN
      pbsXMLOutput.ADDTEXT('<R>');
      pbsXMLOutput.ADDTEXT('<FIELDS>');

      lrrefWriter.GETTABLE( precWhseJnlLine );

      lcodLPNumber := '';
      lrecLPLineUsage.SETCURRENTKEY("Posting Date","Source No.","Source Line No.","Source Document");
      lrecLPLineUsage.SETFILTER("Posting Date",'%1',0D);
      lrecLPLineUsage.SETRANGE("Source No.", precWhseJnlLine."Journal Batch Name");
      lrecLPLineUsage.SETRANGE("Source Line No.",precWhseJnlLine."Line No.");
      lrecLPLineUsage.SETRANGE("Source Document",lrecLPLineUsage."Source Document"::Reclass); // @todo
      IF( lrecLPLineUsage.FINDFIRST ) THEN BEGIN
        lcodLPNumber := lrecLPLineUsage."License Plate No.";
      END;

      //cuCommonFuncs.setDSFieldOverrideValue(iEventID,'', DATABASE::"Warehouse Journal Line", -1, lcodLPNumber); //<IW author="Howie Zhao" date="05/24/16" issue="TFS2620" />
      cuCommonFuncs.setDSFieldOverrideValue(20070,'', DATABASE::"Warehouse Journal Line", -1, lcodLPNumber); //<IW author="R.Trudeau" date="07/05/18" issue="TFS4059" />
      cuCommonFuncs.addDSFieldsForRecord(pbsXMLOutput,lrrefWriter,20070,''); //<IW author="R.Trudeau" date="07/05/18" issue="TFS4059" />

      lrecItem.GET(precWhseJnlLine."Item No.");
      cuCommonFuncs.addDSTrackingFields(pbsXMLOutput, lrecItem."Item Tracking Code");
      pbsXMLOutput.ADDTEXT('</FIELDS>');

      // get the tracking lines
      cuCommonFuncs.getWhseReclassTrackingLines(
        pbsXMLOutput, precWhseJnlLine."Item No.", precWhseJnlLine."Location Code",precWhseJnlLine."Journal Batch Name",
        precWhseJnlLine."Journal Template Name",precWhseJnlLine."Line No.");

      pbsXMLOutput.ADDTEXT('</R>');
    END;

    PROCEDURE updateWhseReclassLine@1000000005(VAR ptrecEventParams@1000000014 : TEMPORARY Record 23044511;VAR pbsOutput@1000000013 : BigText);
    VAR
      lrecLPLineUsage@1000000000 : Record 23044507;
      lcodLocation@1000000006 : Code[10];
      lcodUserName@1000000005 : Code[20];
      lcodReclassBatch@1000000003 : Code[10];
      liLineNumber@1000000007 : Integer;
      ldQuantity@1000000010 : Decimal;
      lsSerialNumber@1000000008 : Text;
      lsLotNumber@1000000009 : Text;
      lrecWhseJnlLine@1000000001 : Record 7311;
      ldChange@1000000011 : Decimal;
      ltrecCommentLine@1000000012 : TEMPORARY Record 97;
      lcodReclassTemplate@1000000004 : Code[10];
      ldPreviousQuantity@1000000002 : Decimal;
      ldQuantityBase@1000000015 : Decimal;
      ldtExpirationDate@1000000018 : Date;
    BEGIN
      // Event 20071
      // updates the specified item journal line with quantity and item tracking info.

      // get the params
      lcodLocation := ptrecEventParams.getValue('location');
      //Prevent the User Name variable from overflow
      lcodUserName := COPYSTR(ptrecEventParams.getValue('user_name'),1,MAXSTRLEN(lcodUserName));
      //lcodReclassBatch := ptrecEventParams.getValue('batch');
      lcodReclassBatch := COPYSTR( cuJournalFuncs.getWhseReclassBatchToUse( ptrecEventParams), 1, MAXSTRLEN( lcodReclassBatch) );

      liLineNumber := ptrecEventParams.getLineNo(); //<IW author="R.Trudeau" date="07/05/18" issue="TFS4059" />
      ldQuantity := ptrecEventParams.getValueAsDecimal('qty');
      lsSerialNumber := ptrecEventParams.getSerialNo(); //<IW author="R.Trudeau" date="07/05/18" issue="TFS4059" />
      lsLotNumber := ptrecEventParams.getLotNo(); //<IW author="R.Trudeau" date="07/05/18" issue="TFS4059" />
      ldtExpirationDate := cuCommonFuncs.getExpirationDate(ptrecEventParams);

      lcodReclassTemplate := cuJournalFuncs.getWhseTemplate(PAGE::"Whse. Reclassification Journal",2);

      // get the effected line
      lrecWhseJnlLine.GET(lcodReclassTemplate,lcodReclassBatch,lcodLocation,liLineNumber);

      //
      // Special case for reclass -
      //   if increasing qty then do that before tracking
      //   if decreasing qty then do that after tracking
      //

      ldPreviousQuantity := lrecWhseJnlLine.Quantity;

      ldChange := ldQuantity - lrecWhseJnlLine.Quantity;

      IF (ldChange <> 0) THEN BEGIN
        lrecLPLineUsage.SETCURRENTKEY("Posting Date","Source No.","Source Line No.","Source Document");
        lrecLPLineUsage.SETFILTER("Posting Date",'%1',0D);
        lrecLPLineUsage.SETRANGE("Source Document",lrecLPLineUsage."Source Document"::Reclass);
        lrecLPLineUsage.SETRANGE("Source No.", lrecWhseJnlLine."Journal Batch Name");
        lrecLPLineUsage.SETRANGE("Source Line No.", lrecWhseJnlLine."Line No.");
        IF( lrecLPLineUsage.FINDFIRST ) THEN BEGIN
          ERROR(cuTranslationMgmt.getTranslatedString('ERR_CANNOT_CHANGE_LINE_ASSIGN_LP', codRegionCode), lrecWhseJnlLine."Item No.", lrecLPLineUsage."License Plate No.");
        END;
      END;


      IF( ldChange >= 0 ) THEN BEGIN
        ldQuantityBase := cuCommonFuncs.ConvertToBaseUomQuantity(lrecWhseJnlLine."Item No.", ldQuantity, lrecWhseJnlLine."Unit of Measure Code");
        cuCommonBase.validateReclassMove(
          lcodLocation,
          lrecWhseJnlLine."Item No.",
          lrecWhseJnlLine."Variant Code",
          lsLotNumber,
          lsSerialNumber,
          lrecWhseJnlLine."From Bin Code",
          ldQuantityBase);

        // set the quantity
        lrecWhseJnlLine.VALIDATE(Quantity,ldQuantity);
        IF ( lcodUserName <> '' ) THEN BEGIN
          lrecWhseJnlLine."User ID" := COPYSTR( lcodUserName, 1, MAXSTRLEN(lrecWhseJnlLine."User ID") );
        END;
        lrecWhseJnlLine.MODIFY(TRUE);

        // add/remove the serial number
        IF( cuCommonBase.isWhseTracked(lrecWhseJnlLine."Item No.") ) THEN BEGIN
          IF( (lsLotNumber <> '') OR (lsSerialNumber <> '') ) THEN BEGIN
            cuResMgmt.AddRemoveWhseReclassTracking(lrecWhseJnlLine,lsSerialNumber,lsLotNumber,ldChange, ldtExpirationDate);
          END;
        END;
      END
      ELSE BEGIN
        IF( cuCommonBase.isWhseTracked(lrecWhseJnlLine."Item No.") ) THEN BEGIN
          IF( (lsLotNumber <> '') OR (lsSerialNumber <> '') ) THEN BEGIN
            cuResMgmt.AddRemoveWhseReclassTracking(lrecWhseJnlLine,lsSerialNumber,lsLotNumber,ldChange, ldtExpirationDate);
          END;
        END;

        // set the quantity
        lrecWhseJnlLine.VALIDATE(Quantity,ldQuantity);
        lrecWhseJnlLine.MODIFY(TRUE);
      END;

      // store this line in the list of changed lines
      ltrecCommentLine.SETRANGE("Line No.", lrecWhseJnlLine."Line No.");
      IF( NOT ltrecCommentLine.FIND('-') ) THEN BEGIN
        ltrecCommentLine."Table Name" := ltrecCommentLine."Table Name"::Item;
        ltrecCommentLine."No." := lrecWhseJnlLine."Item No.";
        ltrecCommentLine."Line No." := lrecWhseJnlLine."Line No.";
        ltrecCommentLine.INSERT;
      END;

      //<IW author="R.Trudeau" date="07/05/18" issue="TFS4059">
      pbsOutput.ADDTEXT('<DATASET><TABLE id="line">');
      pbsOutput.ADDTEXT('<COLS>');
      cuCommonFuncs.initializeColumns( TRUE );
      //cuCommonFuncs.setWriteColumnHeader( FALSE ); // do not write the <c> definitions
      cuCommonFuncs.addDSColumnsFromConfig(pbsOutput, 20070, '', DATABASE::"Warehouse Journal Line");
      cuCommonFuncs.addDSTrackingColumns(pbsOutput);
      //cuCommonFuncs.setWriteColumnHeader( TRUE ); // the update in this case will not use them.
      pbsOutput.ADDTEXT('</COLS>');
      pbsOutput.ADDTEXT('<ROWS>');


      // in theory there are modified lines (including the original)
      // loop through them and return that xml set to the device for further processing
      //pbsOutput.ADDTEXT('<LINES>');
      ltrecCommentLine.RESET;
      ltrecCommentLine.FINDSET(FALSE);
      REPEAT
        lrecWhseJnlLine.GET(lcodReclassTemplate,lcodReclassBatch,lcodLocation,liLineNumber);
        getWhseReclassLine(pbsOutput, lrecWhseJnlLine);
      UNTIL( ltrecCommentLine.NEXT=0 );

      pbsOutput.ADDTEXT('</ROWS>');
      pbsOutput.ADDTEXT('</TABLE>');
      pbsOutput.ADDTEXT('</DATASET>');
      //pbsOutput.ADDTEXT('</LINES>');

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Warehouse Journal Line"));
      ptrecEventParams.setValue('Document No.', lcodReclassBatch);
      ptrecEventParams.setValue('Document Line No.', FORMAT(liLineNumber));
      ptrecEventParams.setValue('Previous Quantity', FORMAT(ldPreviousQuantity));
      ptrecEventParams.setValue('New Quantity', FORMAT(ldQuantity));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE createWhseReclassLine@1000000007(VAR ptrecEventParams@1000000019 : TEMPORARY Record 23044511;VAR pbsOutput@1000000016 : BigText);
    VAR
      lcodLocation@1000000009 : Code[10];
      lcodUserName@1000000008 : Code[20];
      lcodReclassBatch@1000000006 : Code[10];
      lcodItemNumber@1000000012 : Text;
      ldQuantity@1000000005 : Decimal;
      lsSerialNumber@1000000004 : Text;
      lsLotNumber@1000000003 : Text;
      lcodBinCode@1000000010 : Code[20];
      lcodDocNumber@1000000013 : Code[20];
      lcodVariantCode@1000000014 : Text;
      lrecBinContent@1000000017 : Record 7302;
      lbDefaultBin@1000000011 : Boolean;
      lbDefaultQty@1000000015 : Boolean;
      lbWhseTracked@1000000018 : Boolean;
      lcodNewBinCode@1000000001 : Code[20];
      lrecBinType@1000000000 : Record 7303;
      lcodUnitOfMeasure@1000000002 : Code[10];
      lrecItem@1000000007 : Record 27;
      ldQuantityBase@1000000020 : Decimal;
      ldtExpirationDate@1000000021 : Date;
      lcuSessionHelper@100000000 : Codeunit 23044527;
    BEGIN
      // Event 20072
      //
      // Creates a reclass entry based on the params supplied.
      //

      // get the params
      lcodLocation := ptrecEventParams.getValue('location');

      //Prevent the User Name variable from overflow
      lcodUserName := COPYSTR(ptrecEventParams.getValue('user_name'),1,MAXSTRLEN(lcodUserName));
      //lcodReclassBatch := ptrecEventParams.getValue('batch');
      lcodReclassBatch := COPYSTR( cuJournalFuncs.getWhseReclassBatchToUse( ptrecEventParams), 1, MAXSTRLEN( lcodReclassBatch) );

      lcodItemNumber := ptrecEventParams.getItemNo(); //<IW author="R.Trudeau" date="07/05/18" issue="TFS4059" />
      ldQuantity := ptrecEventParams.getValueAsDecimal('qty');
      lsSerialNumber := ptrecEventParams.getSerialNo(); //<IW author="R.Trudeau" date="07/05/18" issue="TFS4059" />
      lsLotNumber := ptrecEventParams.getLotNo();   //<IW author="R.Trudeau" date="07/05/18" issue="TFS4059" />
      lcodBinCode := ptrecEventParams.getValue('bin_code');
      lcodVariantCode := ptrecEventParams.getVariant();   //<IW author="R.Trudeau" date="07/05/18" issue="TFS4059" />
      lbDefaultBin := ptrecEventParams.getValueAsBool('default_bin');
      lbDefaultQty := ptrecEventParams.getValueAsBool('default_qty');
      lcodNewBinCode := ptrecEventParams.getValue('new_bin_code');
      ldtExpirationDate := cuCommonFuncs.getExpirationDate(ptrecEventParams);


      // return the new line
      pbsOutput.ADDTEXT('<DATASET><TABLE id="line">');
      pbsOutput.ADDTEXT('<COLS>');
      cuCommonFuncs.initializeColumns( TRUE );
      cuCommonFuncs.addDSColumnsFromConfig( pbsOutput,20070,'', DATABASE::"Warehouse Journal Line" );
      cuCommonFuncs.addDSTrackingColumns(pbsOutput);
      pbsOutput.ADDTEXT('</COLS>');
      pbsOutput.ADDTEXT('<ROWS>');
      //pbsOutput.ADDTEXT('<LINES>');

      lcodUnitOfMeasure := ptrecEventParams.getValue('uom');
      lrecItem.GET(lcodItemNumber);
      IF (lcodUnitOfMeasure <> '') THEN BEGIN
        ldQuantityBase := cuCommonFuncs.ConvertToBaseUomQuantity(lcodItemNumber, ldQuantity, lcodUnitOfMeasure);
      END;

      lrecBinContent.SETRANGE("Location Code",lcodLocation);
      lrecBinContent.SETRANGE("Item No.",lcodItemNumber);
      lrecBinContent.SETRANGE("Variant Code",lcodVariantCode);
      lrecBinContent.SETFILTER(Quantity,'>%1',0);

      lbWhseTracked := cuCommonBase.isWhseTracked( lcodItemNumber);

      IF( lbWhseTracked ) THEN BEGIN
        IF( lsLotNumber <> '' ) THEN BEGIN
          lrecBinContent.SETRANGE("Lot No. Filter",lsLotNumber);
        END;
        IF( lsSerialNumber <> '' ) THEN
          lrecBinContent.SETRANGE("Serial No. Filter",lsSerialNumber);
      END;
      //

      lrecBinContent.SETAUTOCALCFIELDS("Quantity (Base)");

      // create multiple entries
      IF( lbDefaultBin ) THEN BEGIN
        // Moved filters out of the loop.
        IF( lrecBinContent.FINDSET(FALSE) ) THEN BEGIN
          REPEAT
            IF ( ( lcodUnitOfMeasure = '' ) AND ( lrecBinContent."Unit of Measure Code" <> '' ) ) THEN BEGIN
              lcodUnitOfMeasure := lrecBinContent."Unit of Measure Code";
            END;

            lrecBinType.GET(lrecBinContent."Bin Type Code" );

            IF( NOT lrecBinType.Receive ) THEN BEGIN
              IF( lbDefaultQty ) THEN BEGIN
                ldQuantity := lrecBinContent."Quantity (Base)";  //<IW author="h.z" date="10/20/16" issue="TFS2699" />
                IF (lcodUnitOfMeasure <> '') THEN BEGIN
                  ldQuantity := cuCommonFuncs.ConvertUnitOfMeasure(lrecItem, ldQuantity, lrecItem."Base Unit of Measure", lcodUnitOfMeasure);
                END;
              END ELSE IF( ldQuantity <> 0 ) THEN BEGIN
                cuCommonBase.validateReclassMove(
                            lcodLocation,
                            lcodItemNumber,
                            lcodVariantCode,
                            lsLotNumber,
                            lsSerialNumber,
                            lrecBinContent."Bin Code",
                            ldQuantityBase);  //<IW author="h.z" date="10/20/16" issue="TFS2699" />
              END;

              // if the quantity is 0 and it's whse. tracked
              // we can't create 0 quantity reservations (if you do it will create orphan records)
              // therefore set the default to 1 (or bin qty) and allow the user to change from there
              IF( (ldQuantity = 0) AND lbWhseTracked ) THEN BEGIN
                IF( lrecBinContent.Quantity < 1 ) THEN
                  ldQuantity := lrecBinContent.Quantity
                ELSE
                  ldQuantity := 1;

                IF ( ( lcodUnitOfMeasure = '' ) AND ( lrecBinContent."Unit of Measure Code" <> '' ) ) THEN BEGIN
                  lcodUnitOfMeasure := lrecBinContent."Unit of Measure Code";
                END;
                IF (lcodUnitOfMeasure <> lrecBinContent."Unit of Measure Code") THEN BEGIN
                  ldQuantity := cuCommonFuncs.ConvertUnitOfMeasure(lrecItem, ldQuantity, lrecBinContent."Unit of Measure Code", lcodUnitOfMeasure);
                END;
              END;

              createWhseReclassJournalLine(
                lcodLocation,
                lcodReclassBatch,
                lcodItemNumber,
                lcodVariantCode,
                ldQuantity,
                lsSerialNumber,
                lsLotNumber,
                lrecBinContent."Bin Code",
                pbsOutput,
                lcodNewBinCode,
                '', // document
                lcodUnitOfMeasure, //
                lcodUserName,
                '',
                0,
                ldtExpirationDate //<IW author="h.z" date="6/07/17" issue="TFS3183" />
              );
            END; // IF not Receive bin type
          UNTIL(lrecBinContent.NEXT=0);
        END ELSE BEGIN
          ERROR(cuTranslationMgmt.getTranslatedString('ERR_NOTHING_AVAIL_MOVE', codRegionCode),lcodItemNumber);
        END;
      END ELSE BEGIN // create only a single entry

        //
        // Even if we're not defaulting in the bin or the quantity
        // we must still know the unit of measure in the bin contents.
        // This isn't the best case scenario if there are multiple units
        // of measure in the bin contents, because it will only identify one.
        IF ( lrecBinContent.FINDLAST() ) THEN BEGIN
          IF ( ( lcodUnitOfMeasure = '' ) AND ( lrecBinContent."Unit of Measure Code" <> '' ) ) THEN BEGIN
            lcodUnitOfMeasure := lrecBinContent."Unit of Measure Code";
          END;
        END;

        IF( lbDefaultQty ) THEN BEGIN
          ldQuantity := cuCommonBase.validateReclassMove(
                          lcodLocation,
                          lcodItemNumber,
                          lcodVariantCode,
                          lsLotNumber,
                          lsSerialNumber,
                          lcodBinCode,
                          0);
          IF (lcodUnitOfMeasure <> '') THEN BEGIN
            ldQuantity := cuCommonFuncs.ConvertUnitOfMeasure(lrecItem, ldQuantity, lrecItem."Base Unit of Measure", lcodUnitOfMeasure);
          END;

        END ELSE BEGIN
          cuCommonBase.validateReclassMove(
                          lcodLocation,
                          lcodItemNumber,
                          lcodVariantCode,
                          lsLotNumber,
                          lsSerialNumber,
                          lcodBinCode,
                          ldQuantityBase); //<IW author="h.z" date="10/20/16" issue="TFS2699" />
        END;

        createWhseReclassJournalLine(
            lcodLocation,
            lcodReclassBatch,
            lcodItemNumber,
            lcodVariantCode,
            ldQuantity,
            lsSerialNumber,
            lsLotNumber,
            lcodBinCode,
            pbsOutput,
            lcodNewBinCode,
            '',
            lcodUnitOfMeasure,
            lcodUserName,
            '',
            0,
            ldtExpirationDate  //<IW author="h.z" date="6/07/17" issue="TFS3183" />
           );
      END;

      pbsOutput.ADDTEXT('</ROWS>');
      pbsOutput.ADDTEXT('</TABLE>');
      pbsOutput.ADDTEXT('</DATASET>');
      //pbsOutput.ADDTEXT('</LINES>');

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Warehouse Journal Line"));
      ptrecEventParams.setValue('Document No.', lcodReclassBatch);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE createWhseReclassJournalLine@1000000030(pcodLocation@1000000007 : Code[10];pcodReclassBatch@1000000006 : Code[10];pcodItemNumber@1000000005 : Text;pcodVariantCode@1000000014 : Text;pdQuantity@1000000004 : Decimal;psSerialNumber@1000000003 : Text;psLotNumber@1000000002 : Text;pcodBinCode@1000000001 : Code[20];VAR pbsXMLOutput@1000000009 : BigText;pcodNewBinCode@1000000017 : Code[20];pcodScannedDocument@1000000019 : Code[20];pcodUnitOfMeasure@1000000016 : Code[10];pcodUserName@1000000020 : Code[20];pcodLicensePlateNo@1000000022 : Code[20];piLicensePlateLineNo@1000000021 : Integer;pdtExpirationDate@1000000027 : Date);
    VAR
      ltrecWhseJnlLineData@1000000025 : TEMPORARY Record 7311;
      ltrecEventParams@1000000023 : TEMPORARY Record 23044511;
      lrecWhseJnlLineOut@1000000000 : Record 7311;
      lrecLPLineUsage@1000000024 : Record 23044507;
      liNextLineNumber@1000000008 : Integer;
      lcodReclassTemplate@1000000010 : Code[10];
      lcodDocNumber@1000000011 : Code[20];
      lrecWhseJnlBatch@1000000012 : Record 7310;
      lcuNoSeriesMgmt@1000000013 : Codeunit 396;
      lbWhseTracked@1000000015 : Boolean;
      lrecBin@1000000018 : Record 7354;
    BEGIN
      // Sending unit of measure

      psLotNumber := UPPERCASE(psLotNumber);
      psSerialNumber := UPPERCASE(psSerialNumber);

      lcodDocNumber := cuJournalFuncs.getDocNoFromParameters();

      ltrecWhseJnlLineData."Journal Batch Name" := pcodReclassBatch;
      ltrecWhseJnlLineData."Location Code" := pcodLocation;
      ltrecWhseJnlLineData."Item No." := pcodItemNumber;
      ltrecWhseJnlLineData."Variant Code" := pcodVariantCode;
      ltrecWhseJnlLineData."From Bin Code" := pcodBinCode;
      ltrecWhseJnlLineData."To Bin Code" := pcodNewBinCode;
      ltrecWhseJnlLineData."Unit of Measure Code" := pcodUnitOfMeasure;
      ltrecWhseJnlLineData.Quantity := pdQuantity;
      ltrecWhseJnlLineData."User ID" := pcodUserName;
      ltrecWhseJnlLineData.INSERT;

      cuCommonBase.insertWhseReclassJournalLine(
        lrecWhseJnlLineOut,
        ltrecWhseJnlLineData,
        psSerialNumber,
        psLotNumber,
        FALSE,
        pcodScannedDocument,
        lcodDocNumber,
        pdtExpirationDate    //<IW author="h.z" date="6/07/17" issue="TFS3183" />
      );

      IF ((pcodLicensePlateNo <> '') AND (piLicensePlateLineNo > 0)) THEN BEGIN
        lrecLPLineUsage.VALIDATE("License Plate No.", pcodLicensePlateNo);
        lrecLPLineUsage.VALIDATE("License Plate Line No.", piLicensePlateLineNo);
        lrecLPLineUsage.VALIDATE("Source Line No.", lrecWhseJnlLineOut."Line No.");
        lrecLPLineUsage.VALIDATE(Quantity, pdQuantity);
        lrecLPLineUsage.VALIDATE("Source Company Name", COMPANYNAME);
        lrecLPLineUsage.VALIDATE("Source Document", lrecLPLineUsage."Source Document"::Reclass);
        lrecLPLineUsage.VALIDATE("Source No.", pcodReclassBatch);
        lrecLPLineUsage.INSERT(TRUE);
      END;

      //<IW author="Howie Zhao" date="06/08/16" issue="TFS2620" >
      // This method may be called from other codeunit which there is no event id.
      IF (iEventID <> 0) THEN BEGIN
        cuCommonFuncs.initializeColumns( TRUE );
        cuCommonFuncs.setWriteColumnHeader( FALSE ); // do not write the <c> definitions
        cuCommonFuncs.addDSColumnsFromConfig(pbsXMLOutput, 20070, '', DATABASE::"Warehouse Journal Line");
        cuCommonFuncs.setWriteColumnHeader( TRUE ); // the update in this case will not use them.
        txtLastInsertedJournalLine := COPYSTR( lrecWhseJnlLineOut.GETVIEW(), 1, MAXSTRLEN( txtLastInsertedJournalLine ) );

        getWhseReclassLine(pbsXMLOutput, lrecWhseJnlLineOut);
      END;
    END;

    PROCEDURE deleteWhseReclassLine@1000000015(VAR ptrecEventParams@1000000009 : TEMPORARY Record 23044511;VAR pbsOutput@1000000008 : BigText);
    VAR
      lrecWhseJnlLine@1000000002 : Record 7311;
      lcodLocation@1000000006 : Code[10];
      lcodUserName@1000000005 : Code[20];
      lcodReclassBatch@1000000004 : Code[10];
      liLineNumber@1000000003 : Integer;
      lcodReclassTemplate@1000000001 : Code[10];
    BEGIN
      //////////////////////////////////////////////
      //<Summary>
      // Deletes the requested line.
      //</Summary>
      //<Author>R.Trudeau</Author>
      //<Date>2/21/13</Date>
      //<Issue>TFS1129</Issue>
      //<Version>IW14.02</Version>
      //////////////////////////////////////////////

      lcodLocation := ptrecEventParams.getValue('location');
      //Prevent the User Name variable from overflow
      lcodUserName := COPYSTR(ptrecEventParams.getValue('user_name'),1,MAXSTRLEN(lcodUserName));
      lcodReclassBatch := ptrecEventParams.getValue('Journal Batch Name');
      liLineNumber := ptrecEventParams.getLineNo();//<IW author="h.z" date="06/08/16" issue="TFS2620" />

      lcodReclassTemplate := cuJournalFuncs.getWhseTemplate(PAGE::"Whse. Reclassification Journal",2);

      // get the effected line
      lrecWhseJnlLine.GET(lcodReclassTemplate,lcodReclassBatch,lcodLocation,liLineNumber);

      DeleteLPWhseReclassLines(lrecWhseJnlLine);

      IF lrecWhseJnlLine.GET(lcodReclassTemplate,lcodReclassBatch,lcodLocation,liLineNumber) THEN BEGIN
        DeleteWhseReclassReservationEntries(lrecWhseJnlLine);
        lrecWhseJnlLine.DELETE;
      END;

      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Warehouse Journal Line"));
      ptrecEventParams.setValue('Document No.', lcodReclassBatch);
      ptrecEventParams.setValue('Document Line No.', FORMAT(liLineNumber));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE postWhseReclassJournal@1000000004(VAR ptrecEventParams@1000000009 : TEMPORARY Record 23044511;VAR pbsOutput@1000000004 : BigText);
    VAR
      lcodLocation@1000000006 : Code[10];
      lcodUserName@1000000005 : Code[20];
      lcodReclassBatch@1000000003 : Code[10];
      lcodDocNumber@1000000007 : Code[20];
      lrecWhseJnlLine@1000000001 : Record 7311;
      lcuJnlRegister@1000000008 : Codeunit 7304;
      liJournalLines@1000000000 : Integer;
      lcodReclassTemplate@1000000010 : Code[10];
      lrecSourceWhseJnlLine@1000000011 : Record 7311;
      lcuLPMgmt@1000000013 : Codeunit 23044520;
    BEGIN
      //
      // Posts the specified item journal template/batch/document no.
      //

      // get the params
      lcodLocation := ptrecEventParams.getValue('location');
      lcodUserName := ptrecEventParams.getValue('user_name');

      //lcodReclassBatch := ptrecEventParams.getValue('Journal Batch Name');
      //IF ( '' = lcodReclassBatch ) THEN BEGIN
      //  lcodReclassBatch := ptrecEventParams.getValue('batch');
      //END;
      lcodReclassBatch := COPYSTR( cuJournalFuncs.getWhseReclassBatchToUse( ptrecEventParams), 1, MAXSTRLEN( lcodReclassBatch) );

      // get the required lines
      lrecWhseJnlLine.SETRANGE("Journal Template Name", cuJournalFuncs.getWhseTemplate(PAGE::"Whse. Reclassification Journal",2));
      lrecWhseJnlLine.SETRANGE("Journal Batch Name", lcodReclassBatch);
      lrecWhseJnlLine.SETRANGE("Location Code",lcodLocation);
      lrecWhseJnlLine.SETFILTER("Item No.",'<>%1','');

      lcodReclassTemplate := cuJournalFuncs.getWhseTemplate(PAGE::"Whse. Reclassification Journal",2);
      lrecWhseJnlLine.SETRANGE("Journal Template Name", lcodReclassTemplate);

      CLEAR( liJournalLines );
      IF lrecWhseJnlLine.FIND('-') THEN BEGIN
        liJournalLines := lrecWhseJnlLine.COUNT();
      END;

      // post the lines
      lcuJnlRegister.RUN(lrecWhseJnlLine);

      // return success (or else otherwise an error would already have been generated)
      cuCommonFuncs.generateSuccessReturnWithMsg(1, STRSUBSTNO( cuTranslationMgmt.getTranslatedString('MSG_JNL_LINES_POSTED', codRegionCode), liJournalLines), pbsOutput);

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Warehouse Journal Line"));
      ptrecEventParams.setValue('Document No.', lcodReclassBatch);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE updateWhseReclassBin@1000000009(VAR ptrecEventParams@1000000010 : TEMPORARY Record 23044511;VAR pbsOutput@1000000005 : BigText);
    VAR
      lrecWhseJnlLine@1000000011 : Record 7311;
      lrecWhseJnlLineTemp@1000000001 : Record 7311;
      lrecLPLineUsage@1000000012 : Record 23044507;
      lrecRelatedWhseJnlLine@1000000014 : Record 7311;
      ltrecTempModifiedLines@1000000017 : TEMPORARY Record 7311;
      lcodLocation@1000000000 : Code[10];
      lcodReclassBatch@1000000004 : Code[10];
      liLineNumber@1000000009 : Integer;
      lcodBinCode@1000000003 : Code[20];
      lcodNewBinCode@1000000008 : Code[20];
      lbsXMLOutput@1000000002 : BigText;
      lcodReclassTemplate@1000000006 : Code[10];
      lcodOrigialTakeBinCode@1000000007 : Code[20];
      lcodOrigialPlaceBinCode@1000000013 : Code[20];
      lcodPreviousBin@1000000016 : Code[20];
      lcodLicensePlateNo@1000000015 : Code[20];
      lbPlaceMode@100000000 : Boolean;
    BEGIN
      // Event 20076
      // Updates the bin code based on the supplied params.

      // get the params
      lcodLocation := ptrecEventParams.getValue('location');
      lcodReclassBatch := COPYSTR( cuJournalFuncs.getWhseReclassBatchToUse( ptrecEventParams), 1, MAXSTRLEN( lcodReclassBatch) );
      liLineNumber := ptrecEventParams.getLineNo();
      lcodBinCode := ptrecEventParams.getValue('bin_code');
      lcodNewBinCode := ptrecEventParams.getValue('new_bin_code');


      lcodReclassTemplate := cuJournalFuncs.getWhseTemplate(PAGE::"Whse. Reclassification Journal",2);
      lrecWhseJnlLine.GET(lcodReclassTemplate, lcodReclassBatch, lcodLocation, liLineNumber);

      lcodOrigialTakeBinCode := lrecWhseJnlLine."From Bin Code";
      lcodOrigialPlaceBinCode := lrecWhseJnlLine."To Bin Code";
      lbPlaceMode := (lcodOrigialTakeBinCode = lcodBinCode);
      lcodPreviousBin := lrecWhseJnlLine."To Bin Code";


      IF( lcodBinCode <> '' ) THEN BEGIN
        lrecWhseJnlLine."From Zone Code" := '';
        lrecWhseJnlLine.VALIDATE("From Bin Code",lcodBinCode);
      END;

      lrecWhseJnlLine."To Zone Code" := '';
      lrecWhseJnlLine.VALIDATE("To Bin Code",lcodNewBinCode);

      lrecWhseJnlLine.MODIFY;


      ltrecTempModifiedLines := lrecWhseJnlLine;
      IF ltrecTempModifiedLines.INSERT THEN ;

      // update lines based on license plates if applicable
      UpdateWhseReclassLineLPPlaceBins(lrecWhseJnlLine,ltrecTempModifiedLines, lbPlaceMode);

      pbsOutput.ADDTEXT('<DATASET><TABLE id="line">');
      pbsOutput.ADDTEXT('<COLS>');
      cuCommonFuncs.initializeColumns( TRUE );
      cuCommonFuncs.addDSColumnsFromConfig(pbsOutput, 20070, '', DATABASE::"Warehouse Journal Line");
      cuCommonFuncs.addDSTrackingColumns(pbsOutput);
      pbsOutput.ADDTEXT('</COLS>');
      pbsOutput.ADDTEXT('<ROWS>');

      ltrecTempModifiedLines.RESET;
      ltrecTempModifiedLines.FINDSET(FALSE);
      REPEAT
        getWhseReclassLine(pbsOutput, ltrecTempModifiedLines);
      UNTIL(ltrecTempModifiedLines.NEXT=0);

      pbsOutput.ADDTEXT('</ROWS>');
      pbsOutput.ADDTEXT('</TABLE>');
      pbsOutput.ADDTEXT('</DATASET>');

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Warehouse Journal Line"));
      ptrecEventParams.setValue('Document No.', lcodReclassBatch);
      ptrecEventParams.setValue('Document Line No.', FORMAT(liLineNumber));
      ptrecEventParams.setValue('Previous Bin', lcodPreviousBin);
      ptrecEventParams.setValue('New Bin', lcodNewBinCode);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE addDocToWhseReclassJournal@1000000002(VAR ptrecEventParams@1000000008 : TEMPORARY Record 23044511;VAR pbsOutput@1000000007 : BigText);
    VAR
      lcodLocation@1000000003 : Code[10];
      lcodNewLocation@1000000012 : Code[10];
      lcodUserName@1000000002 : Code[20];
      lcodReclassBatch@1000000009 : Code[10];
      lcodDocNumber@1000000004 : Code[20];
      lrecItemTrackingCode@1000000010 : Record 6502;
      lrecItem@1000000011 : Record 27;
      lbHandled@1000000000 : Boolean;
      lrecSalesDocument@1000000001 : Record 36;
      lrecSalesDocLine@1000000006 : Record 37;
      lbDefaultBin@1000000013 : Boolean;
      lbsIgnoreText@1000000014 : BigText;
      lcodBinCode@1000000015 : Code[20];
      lcodNewBinCode@1000000016 : Code[20];
      lrecPostedSalesInv@1000000017 : Record 112;
      lrecPostedSalesInvLine@1000000018 : Record 113;
      liAddedLinesCounter@1000000019 : Integer;
      ltxtDocType@1000000020 : Text[100];
      lrecPurchaseHeader@1000000021 : Record 38;
      lrecPurchaseLine@1000000022 : Record 39;
      lrecBin@1000000023 : Record 7354;
      lrecWhseJnlLine@1000000024 : Record 7311;
      liSourceDocumentType@1000000005 : Integer;
    BEGIN
      // Event 20077
      //  Similar to event 20061 for the item reclass
      //  to the reclass journal.
      // get the supplied params
      lcodLocation := COPYSTR( ptrecEventParams.getValue('location'), 1, MAXSTRLEN( lcodLocation) );
      lcodNewLocation := COPYSTR( ptrecEventParams.getValue('new_location'), 1, MAXSTRLEN( lcodNewLocation) );
      lcodUserName := COPYSTR( ptrecEventParams.getValue('user_name'), 1, MAXSTRLEN( lcodUserName ) ) ;

      // lcodReclassBatch := COPYSTR( ptrecEventParams.getValue('batch'), 1, MAXSTRLEN( lcodReclassBatch ) );
      lcodReclassBatch := COPYSTR( cuJournalFuncs.getWhseReclassBatchToUse( ptrecEventParams), 1, MAXSTRLEN( lcodReclassBatch) );

      //lcodDocNumber := COPYSTR( ptrecEventParams.getValue('doc_num'), 1, MAXSTRLEN( lcodDocNumber ) );
      lcodDocNumber := COPYSTR( ptrecEventParams.getDocumentNo(), 1, MAXSTRLEN( lcodDocNumber ) );

      lcodBinCode := COPYSTR( ptrecEventParams.getValue('bin_code'), 1, MAXSTRLEN( lcodBinCode ) );
      lcodNewBinCode := COPYSTR( ptrecEventParams.getValue('new_bin_code'), 1, MAXSTRLEN( lcodNewBinCode ) );


      lbHandled := FALSE;
      //lbsIgnoreText is being used to allow us to re-use the create reclass journal line functionality

      lrecBin.RESET();
      IF ( ( '' = lcodNewLocation ) AND ( '' <> lcodNewBinCode ) ) THEN BEGIN
        // if no new location is specified but a bin is specified, then lookup
        // the location from the bin.
        lcodNewLocation := cuWhseActivityMgmt.getLocationFromBin( lcodLocation, lcodNewBinCode );
      END;

      // try an unposted sales order first.
      lrecSalesDocument.RESET();
      lrecSalesDocument.SETRANGE("No.", lcodDocNumber );
      IF ( lrecSalesDocument.FINDLAST() ) THEN BEGIN
        ltxtDocType := FORMAT( lrecSalesDocument."Document Type" );

        lrecSalesDocLine.RESET();
        lrecSalesDocLine.SETRANGE("Document Type", lrecSalesDocument."Document Type" );
        lrecSalesDocLine.SETRANGE("Document No.", lrecSalesDocument."No." );
        lrecSalesDocLine.SETRANGE(Type, lrecSalesDocLine.Type::Item );
        lrecSalesDocLine.SETFILTER("No.", '<>''''' );
        IF ( lrecSalesDocLine.FIND('-') ) THEN BEGIN
          liSourceDocumentType := DATABASE::"Sales Line";

          REPEAT
            createWhseReclassJournalLine(
              lcodLocation,
              lcodReclassBatch,
              lrecSalesDocLine."No.",
              lrecSalesDocLine."Variant Code",
              lrecSalesDocLine.Quantity,
              '', // serial number
              '', // lot number
              lcodBinCode,
              lbsIgnoreText,
              lcodNewBinCode,
              lcodDocNumber,
              lrecSalesDocLine."Unit of Measure Code",
              lcodUserName,
              '',
              0,
              0D   //<IW author="h.z" date="6/07/17" issue="TFS3183" />
            );

            // above does most of the work.
            //lrecItemJnlLine.RESET();
            //lrecItemJnlLine.SETVIEW(txtLastInsertedJournalLine );
            //IF ( lrecItemJnlLine.FIND('-') ) THEN BEGIN
            //  lrecItemJnlLine.VALIDATE("Location Code",lcodLocation);
            //  lrecItemJnlLine.VALIDATE("New Location Code",lcodNewLocation);
            //  IF( lcodBinCode <> '' ) THEN BEGIN
            //    lrecItemJnlLine.VALIDATE("Bin Code",lcodBinCode);
            //  END;
            //  lrecItemJnlLine.VALIDATE("New Bin Code",lcodNewBinCode);
            //  lrecItemJnlLine.MODIFY();
            //END;
            lbHandled := TRUE;
            liAddedLinesCounter += 1;
          UNTIL( 0 = lrecSalesDocLine.NEXT() )
        END; // if we found lines in an unposted sales document.
      END; // if we found an unposted sales document

      // then try a posted sales order.
      IF ( NOT lbHandled ) THEN BEGIN
        lrecPostedSalesInv.RESET();
        lrecPostedSalesInv.SETRANGE("Order No.", lcodDocNumber );
        IF ( lrecPostedSalesInv.FINDLAST() ) THEN BEGIN
          ltxtDocType := FORMAT( lrecSalesDocument."Document Type"::Order );
        END ELSE BEGIN
          // if it's not the order no, then try the posted invoice no.
          lrecPostedSalesInv.SETRANGE("Order No." );
          lrecPostedSalesInv.SETRANGE("No.", lcodDocNumber );
          IF ( lrecPostedSalesInv.FIND('-') ) THEN BEGIN
            ltxtDocType := FORMAT( lrecSalesDocument."Document Type"::Invoice );
          END;
        END;

        //
        IF ( lrecPostedSalesInv.COUNT() > 0 ) THEN BEGIN
          lrecPostedSalesInvLine.SETRANGE("Document No.", lrecPostedSalesInv."No.");
          lrecPostedSalesInvLine.SETRANGE(Type, lrecPostedSalesInvLine.Type::Item );
          lrecPostedSalesInvLine.SETFILTER("No.", '<>''''');
          IF ( lrecPostedSalesInvLine.FIND('-') ) THEN BEGIN
            liSourceDocumentType := DATABASE::"Sales Invoice Line";

            REPEAT
              createWhseReclassJournalLine(
                lcodLocation,
                lcodReclassBatch,
                lrecPostedSalesInvLine."No.",
                lrecPostedSalesInvLine."Variant Code",
                lrecPostedSalesInvLine.Quantity,
                '', // serial number
                '', // lot number
                lcodBinCode,
                lbsIgnoreText,
                lcodNewBinCode,
                lcodDocNumber,
                lrecPostedSalesInvLine."Unit of Measure Code",
                lcodUserName,
                '',
                0,
                0D   //<IW author="h.z" date="6/07/17" issue="TFS3183" />
              );
              // above does most of the work.
              //lrecItemJnlLine.RESET();
              //lrecItemJnlLine.SETVIEW(txtLastInsertedJournalLine );
              //IF ( lrecItemJnlLine.FIND('-') ) THEN BEGIN
              //  lrecItemJnlLine.VALIDATE("Location Code",lcodLocation);
              //  lrecItemJnlLine.VALIDATE("New Location Code",lcodNewLocation);
              //  IF( lcodBinCode <> '' ) THEN BEGIN
              //    lrecItemJnlLine.VALIDATE("Bin Code",lcodBinCode);
              //  END;
              //  lrecItemJnlLine.VALIDATE("New Bin Code",lcodNewBinCode);
              //  lrecItemJnlLine.MODIFY();
              //END;

              lbHandled := TRUE;
              liAddedLinesCounter += 1;
            UNTIL ( 0 = lrecPostedSalesInvLine.NEXT() );
          END; // if we have posted sales lines with items
        END;// if we have a posted sales invoice.
      END; // if not yet handled, then try a posted sales invoice.

      IF ( NOT lbHandled ) THEN BEGIN
        lrecPurchaseHeader.RESET();
        lrecPurchaseHeader.SETRANGE("No.", lcodDocNumber );
        IF ( lrecPurchaseHeader.FINDLAST() ) THEN BEGIN
          lrecPurchaseLine.SETRANGE("Document Type", lrecPurchaseHeader."Document Type" );
          lrecPurchaseLine.SETRANGE("Document No.", lrecPurchaseHeader."No." );
          lrecPurchaseLine.SETRANGE(Type, lrecPurchaseLine.Type::Item );
          lrecPurchaseLine.SETFILTER("No.", '<>''''');
          IF ( lrecPurchaseLine.FIND('-') ) THEN BEGIN
            liSourceDocumentType := DATABASE::"Purchase Line";
            REPEAT
              createWhseReclassJournalLine(
                lcodLocation,
                lcodReclassBatch,
                lrecPurchaseLine."No.",
                lrecPurchaseLine."Variant Code",
                lrecPurchaseLine.Quantity,
                '', // serial number
                '', // lot number
                lcodBinCode,
                lbsIgnoreText,
                lcodNewBinCode,
                lcodDocNumber,
                lrecPurchaseLine."Unit of Measure Code",
                lcodUserName,
                '',
                0,
                0D   //<IW author="h.z" date="6/07/17" issue="TFS3183" />
              );
              // above does most of the work.
              //lrecItemJnlLine.RESET();
              //lrecItemJnlLine.SETVIEW(txtLastInsertedJournalLine );
              //IF ( lrecItemJnlLine.FIND('-') ) THEN BEGIN
              //  lrecItemJnlLine.VALIDATE("Location Code",lcodLocation);
              //  lrecItemJnlLine.VALIDATE("New Location Code",lcodNewLocation);
              //  IF( lcodBinCode <> '' ) THEN BEGIN
              //    lrecItemJnlLine.VALIDATE("Bin Code",lcodBinCode);
              //  END;
              //  lrecItemJnlLine.VALIDATE("New Bin Code",lcodNewBinCode);
              //  lrecItemJnlLine.MODIFY();
              //END;

              lbHandled := TRUE;
              liAddedLinesCounter += 1;
            UNTIL ( 0 = lrecPurchaseLine.NEXT() );

          END; // if we have purchase lines with items.
        END;// if we found a purchase header
      END;// if not yet handled try a purchase order.


      pbsOutput.ADDTEXT('<wrapper>'); // using a wrapper to have a dataset and a message available in the response.
      // now return the data in the journal to refresh for the handheld.
      getWhseReclassJournal( ptrecEventParams, pbsOutput );

      cuCommonFuncs.generateSuccessReturnWithMsg(
        1,
        STRSUBSTNO(
         cuTranslationMgmt.getTranslatedString('MSG_ADHOC_LINES_ADDED', codRegionCode),
         liAddedLinesCounter,
         ltxtDocType,
         lcodDocNumber ), pbsOutput);
      pbsOutput.ADDTEXT('</wrapper>');

      ptrecEventParams.setValue('Document Type', FORMAT(liSourceDocumentType));
      ptrecEventParams.setValue('Document No.', lcodDocNumber);
      ptrecEventParams.setValue('Source Document Type', FORMAT(DATABASE::"Warehouse Journal Line"));
      ptrecEventParams.setValue('Source Document No.', lcodReclassBatch);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE processWhseReclassLPScan@1000000000(VAR ptrecEventParams@1000000008 : TEMPORARY Record 23044511;VAR pbsOutput@1000000007 : BigText);
    VAR
      ltrecLPLine@1000000012 : TEMPORARY Record 23044506;
      ltrecLPHeader@1000000013 : TEMPORARY Record 23044505;
      lcodLicensePlateNumber@1000000011 : Code[20];
      ltxtDetails@1000000010 : Text[250];
      lcodLocation@1000000009 : Code[10];
      lcodNewLocation@1000000006 : Code[10];
      lcodBinCode@1000000005 : Code[20];
      lcodNewBinCode@1000000004 : Code[20];
      lcodReclassBatch@1000000003 : Code[10];
      lcodUserName@1000000000 : Code[20];
      liLPAction@1000000002 : Integer;
      lbTake@1000000001 : Boolean;
    BEGIN
      // Assign lp to warehouse reclass

      lcodLocation := ptrecEventParams.getValue('location');
      lcodNewLocation := ptrecEventParams.getValue('new_location');
      lcodBinCode := ptrecEventParams.getValue('bin');
      lcodNewBinCode := ptrecEventParams.getValue('new_bin_code');
      lcodLicensePlateNumber := ptrecEventParams.getValue('lp_number');

      lcodReclassBatch := COPYSTR( cuJournalFunc.getWhseReclassBatchToUse( ptrecEventParams), 1, MAXSTRLEN( lcodReclassBatch) );
      IF(lcodReclassBatch = '') THEN
        lcodReclassBatch := ptrecEventParams.getValue('batch');



      liLPAction := ptrecEventParams.getValueAsInt('update_action');
      lbTake := ptrecEventParams.getValueAsBool('take');
      lcodUserName := COPYSTR(ptrecEventParams.getValue('user_name'),1,MAXSTRLEN(lcodUserName));


      lcodLicensePlateNumber := cuLPMgmt.AdjustLicensePlate(ptrecEventParams, ltrecLPLine, ltrecLPHeader);
      ltrecLPHeader.RESET;

      IF( (liLPAction = 3) OR (liLPAction = 4) ) THEN BEGIN
        lcodLicensePlateNumber := '';
      END;

      cuLPCommon.updateWhseReclassLinesCode(lcodLicensePlateNumber,
                                 lbTake,
                                 lcodReclassBatch,
                                 lcodLocation,
                                 lcodBinCode,
                                 lcodNewLocation,
                                 lcodNewBinCode,
                                 FALSE,     // Force item tracking
                                 ltrecLPLine,
                                 lcodUserName,
                                 ltrecLPHeader
                                 );

      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);

      ltxtDetails := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_ASSIGN_LP', codRegionCode), lcodLicensePlateNumber, lcodReclassBatch);
      ptrecEventParams.setValue('details', ltxtDetails);
      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Warehouse Journal Line"));
      ptrecEventParams.setValue('Document No.', lcodReclassBatch);
      ptrecEventParams.setValue('Source Document Type', FORMAT(DATABASE::"IWX License Plate Line"));
      ptrecEventParams.setValue('Source Document No.', lcodLicensePlateNumber);

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE copyExistingWhseReclassLine@1000000003(VAR ptrecEventParams@1000000019 : TEMPORARY Record 23044511;VAR pbsOutput@1000000016 : BigText);
    VAR
      lcodReclassBatch@1000000006 : Code[10];
      liLineNumber@1000000000 : Integer;
      lrecExistingWhseJnlLine@1000000001 : Record 7311;
      lrecNewWhseJnlLine@1000000002 : Record 7311;
      lcodReclassTemplate@1000000003 : Code[10];
      lcodLocation@1000000004 : Code[10];
      liNextLineNumber@1000000005 : Integer;
      lrecExistingItemTrackingLine@1000000007 : Record 6550;
      lrecNewItemTrackingLine@1000000008 : Record 6550;
      liNextEntryNo@1000000009 : Integer;
    BEGIN
      //<IW author="Howie Zhao" date="6/28/17" issue="TFS3128" >
      // Copy an existing whse reclass line
      //<IW>

      lcodReclassBatch := COPYSTR( cuJournalFuncs.getWhseReclassBatchToUse( ptrecEventParams), 1, MAXSTRLEN( lcodReclassBatch) );
      liLineNumber := ptrecEventParams.getLineNo();
      lcodLocation := ptrecEventParams.getValue('location');

      lcodReclassTemplate := cuJournalFuncs.getWhseTemplate(PAGE::"Whse. Reclassification Journal",2);
      lrecExistingWhseJnlLine.GET(lcodReclassTemplate, lcodReclassBatch, lcodLocation, liLineNumber);
      liNextLineNumber := 10000;
      lrecNewWhseJnlLine.SETRANGE("Journal Template Name", lcodReclassTemplate);
      lrecNewWhseJnlLine.SETRANGE("Journal Batch Name", lcodReclassBatch);
      lrecNewWhseJnlLine.SETRANGE("Location Code", lcodLocation);
      IF( lrecNewWhseJnlLine.FINDLAST ) THEN BEGIN
        liNextLineNumber := lrecNewWhseJnlLine."Line No." + 10000;
      END;

      lrecNewWhseJnlLine.RESET;
      lrecNewWhseJnlLine.INIT;
      lrecNewWhseJnlLine.COPY(lrecExistingWhseJnlLine);
      lrecNewWhseJnlLine."Line No." := liNextLineNumber;
      lrecNewWhseJnlLine.SetUpNewLine(lrecNewWhseJnlLine);
      lrecNewWhseJnlLine.INSERT(TRUE);

      lrecExistingItemTrackingLine.SETRANGE("Location Code", lcodLocation);
      lrecExistingItemTrackingLine.SETRANGE("Source Type" ,DATABASE::"Warehouse Journal Line");
      lrecExistingItemTrackingLine.SETRANGE("Source ID", lcodReclassBatch);
      lrecExistingItemTrackingLine.SETRANGE("Source Batch Name", lcodReclassTemplate);
      lrecExistingItemTrackingLine.SETRANGE("Source Ref. No.", liLineNumber);
      IF(lrecExistingItemTrackingLine.FINDFIRST) THEN BEGIN
        liNextEntryNo := 1;
        lrecNewItemTrackingLine.RESET;
        IF( lrecNewItemTrackingLine.FINDLAST ) THEN
          liNextEntryNo := lrecNewItemTrackingLine."Entry No." + 1;

        lrecNewItemTrackingLine.RESET;
        lrecNewItemTrackingLine.INIT;
        lrecNewItemTrackingLine.COPY(lrecExistingItemTrackingLine);
        lrecNewItemTrackingLine."Entry No." := liNextEntryNo;
        lrecNewItemTrackingLine.VALIDATE("Source Ref. No.", liNextLineNumber);
        lrecNewItemTrackingLine.INSERT(TRUE);
      END;

      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Warehouse Journal Line"));
      ptrecEventParams.setValue('Document No.', lcodReclassBatch);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE UpdateWhseReclassLineLPPlaceBins@100000007(VAR precWhseJnlLine@100000001 : Record 7311;VAR ptrecTempModifiedLines@100000002 : TEMPORARY Record 7311;pbPlaceMode@100000006 : Boolean);
    VAR
      ltrecLPHeader@100000003 : TEMPORARY Record 23044505;
      lrecLPLineUsage@100000005 : Record 23044507;
      lrecRelatedWhseJnlLine@100000004 : Record 7311;
      lcodLicensePlateNo@100000000 : Code[20];
    BEGIN
      lcodLicensePlateNo := GetWhseReclassLineLPNumber(precWhseJnlLine);

      IF lcodLicensePlateNo <> '' THEN BEGIN
        IF NOT pbPlaceMode THEN BEGIN
          ERROR(cuTranslationMgmt.getTranslatedString('ERR_CANNOT_CHANGE_LINE_ASSIGN_LP', codRegionCode), precWhseJnlLine."Item No.", lcodLicensePlateNo);
        END;

        cuLPCommon.GetAssociatedLPs(lcodLicensePlateNo,ltrecLPHeader);

        ltrecLPHeader.RESET;
        IF ltrecLPHeader.FINDSET(FALSE) THEN BEGIN
          REPEAT
            lrecLPLineUsage.SETRANGE("License Plate No.",ltrecLPHeader."No.");
            lrecLPLineUsage.SETRANGE("Source Document",lrecLPLineUsage."Source Document"::Reclass);
            lrecLPLineUsage.SETRANGE("Source No.",precWhseJnlLine."Journal Batch Name");
            lrecLPLineUsage.SETRANGE("Posting Date",0D);

            IF lrecLPLineUsage.FINDSET(FALSE) THEN BEGIN
              REPEAT
                lrecRelatedWhseJnlLine.GET(precWhseJnlLine."Journal Template Name",precWhseJnlLine."Journal Batch Name",
                  precWhseJnlLine."Location Code", lrecLPLineUsage."Source Line No.");
                precWhseJnlLine."To Zone Code" := '';
                lrecRelatedWhseJnlLine.VALIDATE("To Bin Code", precWhseJnlLine."To Bin Code");
                lrecRelatedWhseJnlLine.MODIFY;

                ptrecTempModifiedLines :=  lrecRelatedWhseJnlLine;
                IF ptrecTempModifiedLines.INSERT THEN ;
              UNTIL(lrecLPLineUsage.NEXT=0);
            END;
          UNTIL(ltrecLPHeader.NEXT=0);
        END;
      END;
    END;

    PROCEDURE GetWhseReclassLineLPNumber@100000003(VAR precWhseJnlLine@100000000 : Record 7311) : Code[20];
    VAR
      lrecLPLineUsage@100000001 : Record 23044507;
    BEGIN
      lrecLPLineUsage.SETRANGE("Source Document",lrecLPLineUsage."Source Document"::Reclass);
      lrecLPLineUsage.SETRANGE("Source No.",precWhseJnlLine."Journal Batch Name");
      lrecLPLineUsage.SETRANGE("Source Line No.",precWhseJnlLine."Line No.");
      lrecLPLineUsage.SETRANGE("Posting Date",0D);

      IF lrecLPLineUsage.FINDSET(FALSE) THEN
        EXIT(lrecLPLineUsage."License Plate No.")
      ELSE
        EXIT('');
    END;

    PROCEDURE DeleteWhseReclassReservationEntries@100000022(VAR precWhseJnlLine@100000000 : Record 7311);
    VAR
      lrecWhseItemTrackingLine@100000002 : Record 6550;
    BEGIN
      IF( cuCommonBase.isWhseTracked(precWhseJnlLine."Item No.") ) THEN BEGIN
        lrecWhseItemTrackingLine.RESET;
        lrecWhseItemTrackingLine.SETRANGE("Location Code",precWhseJnlLine."Location Code");
        lrecWhseItemTrackingLine.SETRANGE("Source Type",DATABASE::"Warehouse Journal Line");
        lrecWhseItemTrackingLine.SETRANGE("Source ID", precWhseJnlLine."Journal Batch Name");
        lrecWhseItemTrackingLine.SETRANGE("Source Batch Name", precWhseJnlLine."Journal Template Name");
        lrecWhseItemTrackingLine.SETRANGE("Source Ref. No.",precWhseJnlLine."Line No.");
        lrecWhseItemTrackingLine.DELETEALL;
      END;
    END;

    PROCEDURE DeleteLPWhseReclassLines@100000020(VAR precWhseJnlLine@100000001 : Record 7311);
    VAR
      ltrecLPHeader@100000004 : TEMPORARY Record 23044505;
      lrecLPLineUsage@100000003 : Record 23044507;
      lrecRelatedWhseJnlLine@100000002 : Record 7311;
      ltrecTempWhseJnlLinesDelete@100000006 : TEMPORARY Record 7311;
      lrecLPHeader@100000005 : Record 23044505;
      lcodLicensePlateNo@100000000 : Code[20];
    BEGIN
      lcodLicensePlateNo := GetWhseReclassLineLPNumber(precWhseJnlLine);

      IF lcodLicensePlateNo <> '' THEN BEGIN
        cuLPCommon.GetAssociatedLPs(lcodLicensePlateNo,ltrecLPHeader);

        ltrecLPHeader.RESET;
        IF ltrecLPHeader.FINDSET(FALSE) THEN BEGIN
          REPEAT
            lrecLPLineUsage.SETRANGE("License Plate No.",ltrecLPHeader."No.");
            lrecLPLineUsage.SETRANGE("Source Document",lrecLPLineUsage."Source Document"::Reclass);
            lrecLPLineUsage.SETRANGE("Source No.",precWhseJnlLine."Journal Batch Name");
            lrecLPLineUsage.SETRANGE("Posting Date",0D);

            IF lrecLPLineUsage.FINDSET(FALSE) THEN BEGIN
              REPEAT
                lrecRelatedWhseJnlLine.GET(precWhseJnlLine."Journal Template Name",
                  precWhseJnlLine."Journal Batch Name",precWhseJnlLine."Location Code",lrecLPLineUsage."Source Line No.");
                ltrecTempWhseJnlLinesDelete := lrecRelatedWhseJnlLine;
                IF ltrecTempWhseJnlLinesDelete.INSERT THEN ;
              UNTIL(lrecLPLineUsage.NEXT=0);

              lrecLPLineUsage.DELETEALL;
            END;

            lrecLPHeader.GET(ltrecLPHeader."No.");
            lrecLPHeader."Source Document Type" := lrecLPHeader."Source Document Type"::" ";
            lrecLPHeader."Source Document No." := '';
            lrecLPHeader.MODIFY(TRUE);
          UNTIL(ltrecLPHeader.NEXT=0);
        END;
      END;

      // have to delete the journal lines 'after' to avoid the error saying
      // the line can't be deleted due to assigments
      ltrecTempWhseJnlLinesDelete.RESET;
      IF ltrecTempWhseJnlLinesDelete.FINDSET(FALSE) THEN BEGIN
        REPEAT
          lrecRelatedWhseJnlLine.GET(ltrecTempWhseJnlLinesDelete."Journal Template Name",ltrecTempWhseJnlLinesDelete."Journal Batch Name",
            ltrecTempWhseJnlLinesDelete."Location Code", ltrecTempWhseJnlLinesDelete."Line No.");
          DeleteWhseReclassReservationEntries(lrecRelatedWhseJnlLine);
          lrecRelatedWhseJnlLine.DELETE;
        UNTIL(ltrecTempWhseJnlLinesDelete.NEXT=0);
      END;
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
    }
    END.
  }
}

