OBJECT Codeunit 14000559 Create Suggested Order
{
  OBJECT-PROPERTIES
  {
    Date=03/05/21;
    Time=10:40:55 AM;
    Modified=Yes;
    Version List=UBP3.03,TPZ;
  }
  PROPERTIES
  {
    TableNo=14000563;
    OnRun=BEGIN
            AdvForSetup.GET;
            CalcVendorReplenishment(Rec);
          END;

  }
  CODE
  {
    VAR
      CalcLineTmp@14000501 : TEMPORARY Record 14000569;
      InvMgtSetup@14000502 : Record 14000551;
      Item@14000503 : Record 27;
      Location@14000507 : Record 14;
      TempPurchHeader@14000512 : TEMPORARY Record 38;
      SugOrderHeader@14000514 : Record 14000565;
      SugOrderLine@14000515 : Record 14000566;
      TempSugOrderHeader@14000516 : TEMPORARY Record 14000565;
      TempSugOrderLine@14000517 : TEMPORARY Record 14000566;
      Vend@14000518 : Record 23;
      AdvForSetup@1240030040 : Record 14002651;
      UBP@14002602 : Codeunit 14000564;
      Window@14002603 : Dialog;
      CalcLineNo@1240030004 : Integer;
      Text000@14000526 : TextConst 'ENU=A Closed Inventory Period could not be found for Location %1.';
      LineNo@1000000006 : Integer;
      LineNumber@1000000005 : Integer;
      PurchUOM@14000528 : Code[10];
      PurchQtyPerUOM@14000529 : Decimal;
      PurchQtyBase@14000530 : Decimal;
      PurchQty@14000532 : Decimal;
      Text001@14000536 : TextConst 'ENU="Qty. Expected %1 less than Min. Inventory %2 :: Purch. Qty. Base %3 = Max. Inventory %4 - Qty. Expected %5"';
      Text002@14000537 : TextConst 'ENU="Round up to Purch UOM %1 %2 = Round(Purc. Qty. Base %3 / Purch. Qty. Per UOM %4)"';
      Text003@14000538 : TextConst 'ENU="Purch. Qty. Base %1 = ROUND((Forecast Usage Per Day %2 * 30) * Item Class Reorder Qty. Months %3)"';
      PurchQtyRoundUpBase@1240020003 : Decimal;
      WindowCalcCount@14000541 : Integer;
      WindowProcCount@14000542 : Integer;
      WindowProcUnitCount@14000543 : Integer;
      WindowLineCount@14000544 : Integer;
      Text005@14000545 : TextConst 'ENU=Create Suggested Order for Location %1';
      Text006@14000546 : TextConst 'ENU=Vendor Number';
      Text007@14000547 : TextConst 'ENU=Document Number';
      Text008@14000548 : TextConst 'ENU=Create Suggested Order Lines';
      Text009@14000549 : TextConst 'ENU=Save Suggested Order Lines';
      Text010@14000550 : TextConst 'ENU=Save Calculation Formulas';
      Text011@14000551 : TextConst 'ENU="EOQ Qty. %1 %2 = Square Root of (24 * Ordering Cost %3 * Ave. Mo. Forecast %4 %5)  /  (Carrying Cost % %6 * Unit Cost %7) "';
      Text012@14000552 : TextConst 'ENU="EOQ Min. Purch Quantity %1 = (Forecast Usage Per Day %2 * EOQ Min Days Supply to Order %3)"';
      Text013@14000553 : TextConst 'ENU=EOQ Max. Purch Quantity %1 through EOQ Max Purchase Date %2';
      Text014@14000554 : TextConst 'ENU="EOQ Min. Purch Quantity [Usage Diring Review Cycle] %1 = (Forecast Usage Per Day %2 * Review Cycle Days %3)"';
      Text015@1000000000 : TextConst 'ENU="Purch. Qty. Base %1 = Purch. Qty. Base %2 + Negative Available for Sale %3"';
      Text018@1000000009 : TextConst 'ENU=Net Inv. Pos. at Min Days Supply [%1] is %2';
      Text019@1000000010 : TextConst 'ENU=Net Inv. Pos. at Max Days Supply [%1] is %2';
      Text020@1240030001 : TextConst 'ENU="[Do Not Restock Item and Neg. Qty. Expected] Purch. Qty. Base %1 = Qty. Expected %2 [%3 Lead Time Horiz Date]"';
      Text021@1240030003 : TextConst 'ENU="[No Usage and Neg. Qty. Expected] Purch. Qty. Base %1 = Qty. Expected %2"';
      Text024@1240030019 : TextConst 'ENU="Purch. Qty. Base %1 = Sporadic Target Stock Level %2 - Quantity Expected %3"';
      Text025@1240030018 : TextConst 'ENU=Purch. Qty. Base increased from %1 to %2 because of Order Minimum';
      Text026@1240030023 : TextConst 'ENU=Purch. Qty. Base increased from %1 to %2 because of Order Multiple of %3';
      NewPurchQtyBase@1240030025 : Decimal;
      PushVendorLTDays@1240030029 : Integer;
      Text028@1240030030 : TextConst 'ENU=Qty Ordered based on Min/Max Days Supply %1';
      Text029@1240030031 : TextConst 'ENU="Min Days Supply %1 * Average Usage Per Day %2 = %3"';
      Text030@1240030032 : TextConst 'ENU="Max Days Supply %1 * Average Usage Per Day %2 = %3"';
      Text031@1240030033 : TextConst 'ENU="Order Quantity %1 = Max Quantity %2 - Quantity Expected %3"';
      Text032@1240030034 : TextConst 'ENU=Quantity Expected %1 is less than Minimum Quantity %2';
      Text033@1240030035 : TextConst 'ENU="Order Quantity %1 = Maximum Quantity %2 - Quantity Expected %3"';
      Text036@1240030045 : TextConst 'ENU="Min Days Supply %1 * Frozen Usage Per Day %2 = %3"';
      Text037@1240030044 : TextConst 'ENU="Max Days Supply %1 * Frozen Usage Per Day %2 = %3"';
      Text040@1240030051 : TextConst 'ENU="LTH %1 = Workdate %2 + Lead Time Days %3 + Push Days %4 + Order Add Days %5 + Review Cycle Days %6"';
      Text042@14001001 : TextConst 'ENU="LTH %1 = Workdate %2 + Lead Time Days %3 + Push Days %4 + Order Add Days %5 + SS Days %6 + Review Cycle Days %7"';
      LTHDate@14001002 : Date;
      Text045@1240030062 : TextConst 'ENU="Adj. Purch. Qty. Base %1 = Purch. Qty. Base %2 + (Additional Stock Qty. %3 - (Purch. Qty. Base %2 + Qty. Expected %4))"';
      Text046@1240030063 : TextConst 'ENU="Purch. Qty. Base %1 = Additional Stock Qty. %2 - Qty. Expected %3"';
      Text047@1240030064 : TextConst 'ENU="Purch. Qty. Base %1 = Additional Stock Qty. %2 - (Qty. Expected %3 + Purch. Qty. Base %4)"';
      Text052@1240030070 : TextConst 'ENU="AdjMinSOQ %1 = MinSOQ %2 + Additional Stock Qty. %3"';
      Text053@1240030071 : TextConst 'ENU="MinSOQ %1 = (-1 * LTHQty %2) + SafetyStockQty %3 "';
      Text054@1240030006 : TextConst 'ENU="MinSOQ %1 = (-1 * LTHQty %2)"';
      Text055@1240030022 : TextConst 'ENU="AdjMinSOQ %1 = Purch. Qty. Base %2 + Additional Stock Qty. %3"';
      Text056@1240030072 : TextConst 'ENU="MinSOQ %1 = (-1 * LTHQty %2)  Note: LTHQty includes Safety Stock."';
      Text057@1240030074 : TextConst 'ENU="PurchQtyBase %1 = (-1 * LTHQty %2) +  Sporadic Target Stock Level %3"';
      Text058@1240030075 : TextConst 'ENU="MinSOQ = %1"';
      Text059@1240030010 : TextConst 'ENU=EOQ not calculated.  Unit Cost is zero.';
      Text060@1240030050 : TextConst 'ENU=EOQ not calculated.  Negative forecast %1.  Default to MinSOQ.';
      Text061@1240030052 : TextConst 'ENU="Order Qty (Base) %1 = MinSOQ %2 - Supply Orders Outside LTH %3."';
      RollUpMinSOQ@1240030067 : Decimal;
      RollUpMaxSOQ@1240030065 : Decimal;
      Text062@1240030068 : TextConst 'ENU="Minimum Surplus Rollup = %1  Maximum Surplus Rollup = %2"';
      Text063@1240030069 : TextConst 'ENU="PurchQtyBase %1 = Minimum Surplus Rollup %1"';
      Text064@1240030073 : TextConst 'ENU="PurchQtyBase %1 = Maximum Surplus Rollup %1"';
      Text065@1240030078 : TextConst 'ENU="Push Vendor LT Days = %1"';
      Text066@1240030077 : TextConst 'ENU=Lead Time Horizon Date %1';
      Text067@1240030081 : TextConst 'ENU="LTH Order Add Days = %1"';
      Text068@1240030086 : TextConst 'ENU="Forecast At L.T. %1 = Today %2 + L.T. Days %3 (%4)"';
      Text069@1240030087 : TextConst 'ENU="Safety Stock Qty. %1 = Forecast At L.T. %2 * Safety Stock Percent %3"';
      Text070@1240030088 : TextConst 'ENU="Forecast At L.T. Plus Rev. Cycle %1 = Today %2 + L.T. Days %3 + Rev. Cycle Days %4 (%5)"';
      Text071@1240030089 : TextConst 'ENU="Order Point %1 = Forecast At L.T. %2 + Safety Stock Qty. %3"';
      Text072@1240030090 : TextConst 'ENU="Line Point %1 = Order Point %2 + Forecast During Rev. Cycle %3"';
      EOQ@1240030091 : Decimal;
      Text073@1240030092 : TextConst 'ENU="          Calculate Order Point and Line Point"';
      Text074@1240030093 : TextConst 'ENU="          Calculate EOQ"';
      Text075@1240020004 : TextConst 'ENU="EOQ Qty. %1 %2 = Square Root of (24 * Ordering Cost %3 * Forecast %4 %5)  /  (Carrying Cost % %6 * Unit Cost %7) Below Qty. Break Min. %8"';
      EOQMaxDate@1240020005 : Date;
      Text076@1240020006 : TextConst 'ENU=EOQ Max Date %1 is less than Lead Time Horiz. Date %2, EOQ not used.';
      PushVendorLTDaysText@1240020011 : Text[5];
      Text077@1240020012 : TextConst 'ENU=Order Qty. (Base) %4 increased from UOM Qty %1 to %2 because of Order Multiple of %3';
      OrigPurchQtyBase@1240020013 : Decimal;
      Text078@1240020014 : TextConst 'ENU=Changed to Preferred Variant %1';
      Text079@1240020015 : TextConst 'ENU=Variant change caused a unit of measure change, %1 to %2.';
      SelectedEOQ@1240020016 : Decimal;
      Text080@1000000001 : TextConst 'ENU=Min %1 Max %2 Days';
      Text081@1240020000 : TextConst 'ENU="Order Qty (Base) %1 = MinSOQ %2 + Supply Expiring inside LTH %3."';
      VendorLeadTimeDays@1240020001 : Decimal;
      LeadTimeMessage@1240020002 : Text[30];
      PurchasePrice@1000000003 : Record 7012;
      tempProcUnit@1240020007 : TEMPORARY Record 14000555;

    LOCAL PROCEDURE SetInitialValues@3(VAR CurrVendBuyingCalendar@1000000000 : Record 14000563;VAR SugOrderHeader2@14000500 : Record 14000565);
    BEGIN
      SugOrderHeader2."Order Date" := WORKDATE;
      SugOrderHeader2."Document Date" := WORKDATE;
      SugOrderHeader2."Requested Receipt Date" := 0D;
      SugOrderHeader2."Creation Date" := WORKDATE;
      SugOrderHeader2."Created By" := USERID;
      SugOrderHeader2."Procurement Group Code" := CurrVendBuyingCalendar."Procurement Group Code";
    END;

    LOCAL PROCEDURE CalcVendorReplenishment@1000000000(VAR CurrVendBuyingCalendar@1000000000 : Record 14000563);
    VAR
      OrdersRemoved@1000000003 : Boolean;
      LeadTime@1000000002 : Integer;
      VendBuyingCalendar@1000000001 : Record 14000563;
      ByPassProcUnit@1000000004 : Boolean;
      LTHOrderAddDays@1000000005 : Integer;
      StdPurchQty@1000000006 : Decimal;
      LocInvPeriod@1000000007 : Record 14000553;
      LeadTimeSource@1240020000 : Text[20];
    BEGIN
      CalcVendorReplenishmentFromTemp(CurrVendBuyingCalendar);
      {
      IF (NOT Vend.GET(CurrVendBuyingCalendar."Vendor No.")) OR
         (Vend.Blocked = Vend.Blocked::All)
      THEN
        EXIT;

      VendBuyingCalendar.COPY(CurrVendBuyingCalendar);
      REPEAT
        SugOrderLine.SETRANGE("Buy-from Vendor No.",VendBuyingCalendar."Vendor No.");
        SugOrderLine.SETRANGE("Division Code",VendBuyingCalendar."Division Code");
        SugOrderLine.SETRANGE("Location Code",VendBuyingCalendar."Location Code");
        IF SugOrderLine.FINDFIRST THEN BEGIN
          IF SugOrderHeader.GET(SugOrderLine."Buy-from Vendor No.",SugOrderLine."Document No.") THEN
            SugOrderHeader.DELETE(TRUE)
          ELSE
            SugOrderLine.DELETEALL(FALSE);
        END ELSE
          OrdersRemoved := TRUE;
      UNTIL OrdersRemoved;

      // check pucs exist
      ProcUnit.SETCURRENTKEY("Location Code","Replenishment Source Type","Replenishment Source Code");
      ProcUnit.SETRANGE("Location Code",VendBuyingCalendar."Location Code");
      ProcUnit.SETRANGE("Division Code", VendBuyingCalendar."Division Code");
      ProcUnit.SETRANGE("Replenishment Source Type",ProcUnit."Replenishment Source Type"::Vendor);
      ProcUnit.SETRANGE("Replenishment Source Code",VendBuyingCalendar."Vendor No.");
      ProcUnit.SETRANGE("Manual Bypass Replenishment", FALSE);
      ProcUnit.SETRANGE("Exclude From Replenishment", FALSE);
      IF ProcUnit.ISEMPTY THEN BEGIN
        // TO-DO:  If "Delete VBC with Empty PUCs" THEN;
        EXIT;
      END;

      // check pucs exist
      PushVendorLTDays := VendBuyingCalendar."Push Vendor L.T. Days";
      IF PushVendorLTDays <> 0 THEN
        PushVendorLTDaysText := '+' + FORMAT(VendBuyingCalendar."Push Vendor L.T. Days")
      ELSE
        PushVendorLTDaysText := FORMAT(VendBuyingCalendar."Push Vendor L.T. Days");

      InvMgtSetup.GET;
      InvMgtSetup.TESTFIELD("EOQ Min. Days Supply to Order");
      InvMgtSetup.TESTFIELD("EOQ Max. Days Supply to Order");

      EOQMaxDate := CALCDATE(STRSUBSTNO('<+%1D>',InvMgtSetup."EOQ Max. Days Supply to Order"),WORKDATE);

      Location.GET(VendBuyingCalendar."Location Code");
      Location.TESTFIELD("Carrying Cost %");
      Location.TESTFIELD("Ordering Cost");

      LocInvPeriod.RESET;
      LocInvPeriod.SETCURRENTKEY("Location Code","Period End Closed");
      LocInvPeriod.SETRANGE("Location Code",VendBuyingCalendar."Location Code");
      LocInvPeriod.SETRANGE("Period End Closed",TRUE);
      IF NOT LocInvPeriod.FINDLAST THEN
        ERROR(Text000,VendBuyingCalendar."Location Code");

      SetupTempHeader(VendBuyingCalendar);

      IF GUIALLOWED THEN BEGIN
        Window.OPEN(
          STRSUBSTNO(
            Text005,VendBuyingCalendar."Location Code") + '\' +
            PADSTR(Text006,30) + '#2##################\' +
            PADSTR(Text007,30) + '#3##################\' +
            PADSTR(Text008,30) + '@4@@@@@@@@@@@@@@@@@@\' +
            PADSTR(Text009,30) + '@5@@@@@@@@@@@@@@@@@@\' +
            PADSTR(Text010,30) + '@6@@@@@@@@@@@@@@@@@@');
        Window.UPDATE(2,VendBuyingCalendar."Vendor No.");
        Window.UPDATE(3,TempSugOrderHeader."No.");
      END;

      ProcUnit.RESET;
      ProcUnit.SETRANGE("Location Code",VendBuyingCalendar."Location Code");
      ProcUnit.SETRANGE("Replenishment Source Type",ProcUnit."Replenishment Source Type"::Vendor);
      ProcUnit.SETRANGE("Replenishment Source Code",VendBuyingCalendar."Vendor No.");
      ProcUnit.SETRANGE("Division Code", VendBuyingCalendar."Division Code");
      ProcUnit.SETRANGE("Manual Bypass Replenishment", FALSE);
      ProcUnit.SETRANGE("Exclude From Replenishment", FALSE);
      WindowProcUnitCount := ProcUnit.COUNT;
      IF ProcUnit.FINDSET THEN
        REPEAT
          EOQ := 0;
          SelectedEOQ := 0;
          PurchQtyBase := 0;
          OrigPurchQtyBase := 0;
          RollUpMinSOQ := 0;
          RollUpMaxSOQ := 0;
          LTHDate := 0D;
          ByPassProcUnit := FALSE;
          Item.GET(ProcUnit."Item No.");
          LeadTimeSource := '';
          VendorLeadTimeDays := 0;
          LeadTimeMessage := '';
          OnBeforeProcessProcUnit(ByPassProcUnit, ProcUnit);
          IF (NOT Item.Blocked) AND (NOT ByPassProcUnit) THEN BEGIN
            LTHOrderAddDays := GetLTHOrderAddDays(VendBuyingCalendar, ProcUnit);
            LTHDate := UBP.GetLeadTimeHoriz(ProcUnit);
            LeadTimeSource := UBP.GetLeadTimeSource();
            VendorLeadTimeDays := UBP.GetLeadTimeDays;
            LeadTimeMessage := FORMAT(VendorLeadTimeDays);
            IF LeadTimeSource <> '' THEN
              LeadTimeMessage := COPYSTR(LeadTimeMessage + ' ' + LeadTimeSource, 1, 30);
            PurchQtyBase := 0;
            // do not record calc lines if using order add days
            IF (LTHOrderAddDays > 0) THEN
              CheckMinSOQ(FALSE, 0)
            ELSE
              CheckMinSOQ(TRUE, 0);  // get min soq ... can come from Roll-up or forecast
            IF (PurchQtyBase > 0) THEN BEGIN
              IF LTHOrderAddDays > 0 THEN BEGIN
                PurchQtyBase := 0;
                CheckMinSOQ(TRUE, LTHOrderAddDays);
              END;
              CheckOrderMinimum(ProcUnit);
              CheckOrderMultiple(ProcUnit);
              GetPurchUOM;
              RoundUpPurchQty;
              StdPurchQty := PurchQty;
              CheckQtyBreaks;
              IF StdPurchQty > PurchQty THEN
                PurchQty := StdPurchQty;
              IF PurchQty > 0 THEN
                CreateSugOrderLine
              ELSE BEGIN
                IF NOT ProcUnit."Nonstock Unit" THEN;
                  // ELSE - Check if stock item with 0 inventory for critical need
              END;
            END;
            WindowProcCount := WindowProcCount + 1;
            IF GUIALLOWED THEN
              IF WindowProcCount MOD 10 = 0 THEN
                Window.UPDATE(4,ROUND(10000 * (WindowProcCount / WindowProcUnitCount),1));
          END;
        UNTIL ProcUnit.NEXT = 0;

      IF GUIALLOWED THEN
        Window.UPDATE(4,10000);

      WindowProcCount := 0;
      WriteSugOrder;

      IF GUIALLOWED THEN
        Window.UPDATE(5,10000);

      WindowProcCount := 0;

      WriteCalcLines;

      IF GUIALLOWED THEN BEGIN
        Window.UPDATE(6,10000);
        Window.CLOSE;
      END;
      }
    END;

    LOCAL PROCEDURE GetPurchUOM@1240020022(VAR CurrProcUnit@1000000000 : Record 14000555);
    VAR
      ItemUnitOfMeasure@1240020000 : Record 5404;
    BEGIN
      PurchUOM := Item."Base Unit of Measure";
      PurchQtyPerUOM := 1;
      PurchQty := 0;
      IF CurrProcUnit."Purchase Unit of Measure" <> '' THEN BEGIN
        PurchUOM := CurrProcUnit."Purchase Unit of Measure";
        ItemUnitOfMeasure.GET(CurrProcUnit."Item No.",PurchUOM);
        PurchQtyPerUOM := ItemUnitOfMeasure."Qty. per Unit of Measure";
      END ELSE BEGIN
        IF Item."Purch. Unit of Measure" <> '' THEN BEGIN
          PurchUOM := Item."Purch. Unit of Measure";
          ItemUnitOfMeasure.GET(CurrProcUnit."Item No.",PurchUOM);
          PurchQtyPerUOM := ItemUnitOfMeasure."Qty. per Unit of Measure";
        END;
      END;
    END;

    LOCAL PROCEDURE RoundUpPurchQty@1240020021(VAR CurrProcUnit@1000000000 : Record 14000555);
    BEGIN
      IF PurchQtyPerUOM = 1 THEN BEGIN
        PurchQty := PurchQtyBase;
        PurchQtyRoundUpBase := 0;
        EXIT;
      END;
      PurchQty := ROUND(PurchQtyBase / PurchQtyPerUOM,1.0,'>');
      PurchQtyRoundUpBase := ((PurchQty * PurchQtyBase) - PurchQtyBase);

      CreateCalcLine(
        STRSUBSTNO(
          Text002,PurchQty,PurchUOM,PurchQtyBase,PurchQtyPerUOM), CurrProcUnit);
    END;

    LOCAL PROCEDURE CreateCalcLine@1240020023(Formula@14000501 : Text[250];VAR CurrProcUnit@1000000000 : Record 14000555);
    BEGIN
      CalcLineTmp.INIT;
      CalcLineTmp."Location Code" := CurrProcUnit."Location Code";
      CalcLineTmp."Item No." := CurrProcUnit."Item No.";
      CalcLineTmp."Variant Code" := CurrProcUnit."Variant Code";
      LineNo := LineNo + 1;
      CalcLineTmp."Line No." := LineNo;
      CalcLineTmp.Formula := Formula;
      CalcLineTmp.INSERT;
      WindowCalcCount := WindowCalcCount + 1;
    END;

    LOCAL PROCEDURE CreateSugOrderLine@6(VAR CurrVendBuyingCalendar@1240020001 : Record 14000563;VAR ProcUnit@1240020000 : Record 14000555);
    VAR
      ExtTextHeader@1000000001 : Record 279;
      ExtTextLine@1000000002 : Record 280;
      ExtText@1000000000 : Boolean;
      SugOrderLine2@1000000003 : Record 14000566;
      LocProcUnit@1240030002 : Record 14000555;
      PurchPriceCalcMgt@1000 : Codeunit 7010;
      ProcUnit3@1000000004 : Record 14000555;
    BEGIN
      WindowProcCount := WindowProcCount + 1;

      IF (InvMgtSetup."Summarize Variant Detail" <> InvMgtSetup."Summarize Variant Detail"::Never) AND
         (ProcUnit."Variant Code" <> '') THEN BEGIN
        IF LocProcUnit.GET(ProcUnit."Location Code", ProcUnit."Item No.", '') THEN
          IF LocProcUnit."Summarize Variant Detail" THEN
            EXIT;
      END;

      TempSugOrderLine.INIT;
      TempSugOrderLine."Document No." := TempSugOrderHeader."No.";
      TempSugOrderLine."Line No." := LineNumber;
      TempSugOrderLine."Buy-from Vendor No." := TempPurchHeader."Buy-from Vendor No.";
      TempSugOrderLine."Currency Code" := TempPurchHeader."Currency Code";
      TempSugOrderLine."Pay-to Vendor No." := TempPurchHeader."Pay-to Vendor No.";
      TempSugOrderLine.SetSugOrdHeader(TempSugOrderHeader);
      TempSugOrderLine.VALIDATE("Location Code",ProcUnit."Location Code");
      TempSugOrderLine.VALIDATE(Type,TempSugOrderLine.Type::Item);
      TempSugOrderLine.VALIDATE("No.",ProcUnit."Item No.");
      TempSugOrderLine."Orig. Purchase Quantity (Base)" := OrigPurchQtyBase;
      TempSugOrderLine."Summarize Variant Detail" := ProcUnit."Summarize Variant Detail";
      TempSugOrderLine."Horizon Date" := LTHDate;

      IF ProcUnit."Summarize Variant Detail" THEN BEGIN
        IF NOT ProcUnit."Preferred Variant" THEN BEGIN
          ProcUnit3.SETRANGE("Location Code",ProcUnit."Location Code");
          ProcUnit3.SETRANGE("Item No.",ProcUnit."Item No.");
          ProcUnit3.SETRANGE("Preferred Variant",TRUE);
          IF ProcUnit3.FINDFIRST THEN BEGIN
            // override vendor occurs on validate
            TempSugOrderLine.VALIDATE("Variant Code",ProcUnit3."Variant Code");
            CreateCalcLine(STRSUBSTNO(Text078,ProcUnit3."Variant Code"),ProcUnit3);
            IF PurchUOM <> TempSugOrderLine."Unit of Measure Code" THEN BEGIN
              CreateCalcLine(STRSUBSTNO(Text079,PurchUOM,TempSugOrderLine."Unit of Measure Code"),ProcUnit3);
              PurchUOM := TempSugOrderLine."Unit of Measure Code";
              PurchQtyPerUOM := TempSugOrderLine."Qty. per Unit of Measure";
              PurchQty := TempSugOrderLine.Quantity;
              PurchQtyBase := TempSugOrderLine."Quantity (Base)";
            END;
            CheckFutureSupply(TempSugOrderLine,ProcUnit3,PurchQty);
            CheckExpiringSupply(TempSugOrderLine, ProcUnit3, PurchQty);
            CheckOrderMultiple(ProcUnit3);
            CheckOrderMinimum(ProcUnit3);
          END;
        END;
      END ELSE BEGIN
        IF ProcUnit."Variant Code" <> '' THEN BEGIN
          // override vendor occurs on validate
          TempSugOrderLine.VALIDATE("Variant Code",ProcUnit."Variant Code");
        END;
        CheckFutureSupply(TempSugOrderLine,ProcUnit,PurchQty);
        CheckExpiringSupply(TempSugOrderLine, ProcUnit, PurchQty);
        CheckOrderMultiple(ProcUnit);
        CheckOrderMinimum(ProcUnit);
      END;

      // pricing updates occur in validate quantity
      TempSugOrderLine.VALIDATE(Quantity,PurchQty);

      TempSugOrderLine."Original Quantity" := TempSugOrderLine.Quantity;
      TempSugOrderLine."Original Unit of Measure Code" := TempSugOrderLine."Unit of Measure Code";
      LineNumber := LineNumber + 10000;

      CASE ProcUnit."Replenishment Model" OF
        ProcUnit."Replenishment Model"::"Usage Based Procurement":
          BEGIN
          END;
        ProcUnit."Replenishment Model"::"Min/Max":
          TempSugOrderLine."Purchase Reason" := TempSugOrderLine."Purchase Reason"::"Min/Max";

        ProcUnit."Replenishment Model"::"Lead Time Horizon":
          TempSugOrderLine."Purchase Reason" := TempSugOrderLine."Purchase Reason"::"Lead Time Horiz.";
      END;

      IF (ProcUnit."Nonstock Unit") THEN
        TempSugOrderLine."Purchase Reason" := TempSugOrderLine."Purchase Reason"::"Do Not Restock Neg.";

      TempSugOrderLine."Item Class Ranking" := ProcUnit."Item Class Ranking";
      TempSugOrderLine.FindForecastFields;


      TempSugOrderLine."Average Lead Time (Days)" := VendorLeadTimeDays;
      TempSugOrderLine."Lead Time Message" := LeadTimeMessage;

      TempSugOrderLine."Ranking Code" := ProcUnit."Ranking Code";
      TempSugOrderLine."Periods With Sales" := ProcUnit."Periods With Sales";


      IF InvMgtSetup."Roll Up Via Repl. Path" THEN BEGIN
        TempSugOrderLine."Minimum Order Qty." := RollUpMinSOQ;
        TempSugOrderLine."Maximum Order Qty." := RollUpMaxSOQ;
      END;

      TempSugOrderLine."Order Multiple" := ProcUnit."Order Multiple";
      TempSugOrderLine."Order Minimum" := ProcUnit."Order Minimum";

      IF (NOT ProcUnit."Nonstock Unit") THEN
        TempSugOrderLine."EOQ Quantity" := EOQ
      ELSE
        TempSugOrderLine."EOQ Quantity" := 0;
      IF (TempSugOrderLine.Type = TempSugOrderLine.Type::Item) AND (TempSugOrderLine."No." <> '') THEN
      GetReviewInfo(TempSugOrderLine);

      TempSugOrderLine."Replenishment Hierarchy" := ProcUnit."Replenishment Hierarchy";

      TempSugOrderLine."Quantity Less Transfer" := TempSugOrderLine.Quantity;
      TempSugOrderLine."Line Net Weight" := TempSugOrderLine."Quantity Less Transfer" * TempSugOrderLine."Net Weight";
      TempSugOrderLine."Line Gross Weight" := TempSugOrderLine."Quantity Less Transfer" * TempSugOrderLine."Gross Weight";
      TempSugOrderLine."Line Volume" := TempSugOrderLine."Quantity Less Transfer" * TempSugOrderLine."Unit Volume";
      TempSugOrderLine."Purchaser Code" := ProcUnit."Purchaser Code";

      TempSugOrderLine.INSERT(FALSE);

      IF (TempSugOrderLine.Type = TempSugOrderLine.Type::Item) AND (TempSugOrderLine."No." <> '') THEN BEGIN
      IF Item."Automatic Ext. Texts" THEN BEGIN
        ExtText := TRUE;
        ExtTextHeader.SETCURRENTKEY("Table Name","No.","Language Code","All Language Codes","Starting Date","Ending Date");
        ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::Item);
        ExtTextHeader.SETRANGE("No.",TempSugOrderLine."No.");
        ExtTextHeader.SETRANGE("Purchase Order",TRUE);
        ExtTextHeader.SETRANGE("Starting Date",0D,WORKDATE);
        ExtTextHeader.SETFILTER("Ending Date",'%1..|%2',WORKDATE,0D);
        IF TempPurchHeader."Language Code" = '' THEN BEGIN
          ExtTextHeader.SETRANGE("Language Code",'');
          IF NOT ExtTextHeader.FIND('+') THEN
            ExtText := FALSE;
        END ELSE BEGIN
          ExtTextHeader.SETRANGE("Language Code",TempPurchHeader."Language Code");
          IF NOT ExtTextHeader.FIND('+') THEN BEGIN
            ExtTextHeader.SETRANGE("All Language Codes",TRUE);
            ExtTextHeader.SETRANGE("Language Code",'');
            IF NOT ExtTextHeader.FIND('+') THEN
              ExtText := FALSE;
          END;
        END;

        IF ExtText THEN BEGIN
          ExtTextLine.SETRANGE("Table Name",ExtTextHeader."Table Name");
          ExtTextLine.SETRANGE("No.",ExtTextHeader."No.");
          ExtTextLine.SETRANGE("Language Code",ExtTextHeader."Language Code");
          ExtTextLine.SETRANGE("Text No.",ExtTextHeader."Text No.");
          IF ExtTextLine.FIND('-') THEN
            REPEAT
              SugOrderLine2.INIT;
              SugOrderLine2."Buy-from Vendor No." := TempSugOrderLine."Buy-from Vendor No.";
              SugOrderLine2."Document No." := TempSugOrderLine."Document No.";
              SugOrderLine2."Line No." := LineNumber;
              LineNumber := LineNumber + 10000;
              SugOrderLine2.Description := ExtTextLine.Text;
              SugOrderLine2."Purchase Reason" := SugOrderLine2."Purchase Reason"::"Ext. Text";
              TempSugOrderLine := SugOrderLine2;
              GetReviewInfo(TempSugOrderLine);
              TempSugOrderLine.INSERT;
            UNTIL ExtTextLine.NEXT = 0;
        END;
      END;
      END;

      WindowLineCount := WindowLineCount + 1;
    END;

    LOCAL PROCEDURE WriteSugOrder@5();
    BEGIN
      IF NOT SugOrderHeader.GET(
        TempSugOrderHeader."Buy-from Vendor No.",TempSugOrderHeader."No.") THEN BEGIN
        SugOrderHeader.COPY(TempSugOrderHeader);
        SugOrderHeader.INSERT(TRUE);
      END;
      TempSugOrderLine.RESET;
      IF TempSugOrderLine.FINDSET THEN
        REPEAT
          // To-Do: Add Call out function OnWriteSugOrderLine;
          SugOrderLine.COPY(TempSugOrderLine);
          IF (TempSugOrderLine.Type = TempSugOrderLine.Type::Item) AND (TempSugOrderLine."No." <> '') THEN
            GetReviewInfo(TempSugOrderLine);
          IF (TempSugOrderLine.Type = TempSugOrderLine.Type::Item) AND (TempSugOrderLine."No." <> '') THEN
            SetCriticalNeed(SugOrderLine);
          IF (InvMgtSetup."Check Auto-FC Adjust Sug. Ord.") AND
            ((TempSugOrderLine.Type = TempSugOrderLine.Type::Item) AND (TempSugOrderLine."No." <> '')
              AND (TempSugOrderLine."Horizon Date" > 0D)) THEN
            SetAutoFCAdjustWarning(SugOrderLine);
          SugOrderLine.INSERT(TRUE);
          WindowProcCount := WindowProcCount + 1;
          IF GUIALLOWED THEN
            IF WindowProcCount MOD 10 = 0 THEN
              Window.UPDATE(5,ROUND(10000 * (WindowProcCount / WindowLineCount),1));
        UNTIL TempSugOrderLine.NEXT = 0;
    END;

    LOCAL PROCEDURE WriteCalcLines@7();
    VAR
      CalcLine@1000000000 : Record 14000569;
    BEGIN
      IF CalcLineTmp.FINDSET THEN
        REPEAT
          IF (CalcLineTmp."Location Code" <> CalcLine."Location Code") OR
             (CalcLineTmp."Item No." <> CalcLine."Item No.") OR
             (CalcLineTmp."Variant Code" <> CalcLine."Variant Code")
          THEN BEGIN
            CalcLine.SETCURRENTKEY("Location Code","Item No.","Variant Code","Line No.");
            CalcLine.SETRANGE("Location Code",CalcLineTmp."Location Code");
            CalcLine.SETRANGE("Item No.",CalcLineTmp."Item No.");
            CalcLine.SETRANGE("Variant Code",CalcLineTmp."Variant Code");
            CalcLine.SETFILTER("Line No.",'>=%1',200000);
            CalcLine.DELETEALL;
            CalcLineNo := 200000;
          END;
          CalcLine.COPY(CalcLineTmp);
          CalcLine."Line No." := CalcLineNo;
          CalcLine.INSERT;
          CalcLineNo := CalcLineNo + 10000;
          WindowProcCount := WindowProcCount + 1;
          IF GUIALLOWED THEN
            IF WindowProcCount MOD 10 = 0 THEN
              Window.UPDATE(6,ROUND(10000 * (WindowProcCount / WindowCalcCount),1));
        UNTIL CalcLineTmp.NEXT = 0;
    END;

    PROCEDURE CheckMinSOQ@1240030000(VAR ProcUnit@1240020001 : Record 14000555;RecordCalcLines@1000000002 : Boolean;CurrOrderAddDays@1000000003 : Integer);
    VAR
      Forecast@1000000004 : Codeunit 14000567;
      CreateLocInvRollUp@1000000006 : Codeunit 14000574;
      PushDaysResult@1240020000 : Integer;
      MinDaysInvPos@1000000000 : Decimal;
      MaxDaysInvPos@1000000001 : Decimal;
      NetInvPos@1000000005 : Decimal;
    BEGIN
      // Recording the calc lines must be controlled due to the order add days

      PushDaysResult := (PushVendorLTDays + CurrOrderAddDays);
        IF (PushDaysResult >= 0) THEN
          PushVendorLTDaysText := '+'+FORMAT(PushDaysResult)
        ELSE
        // negative would be part of the calculation (i.e. -30D)
          PushVendorLTDaysText := FORMAT(PushDaysResult);
        IF (PushVendorLTDays <> 0) OR
          (CurrOrderAddDays <> 0) THEN
        LTHDate := CALCDATE(STRSUBSTNO('<%1D>',PushVendorLTDaysText), LTHDate);

      IF ((ProcUnit."Replenishment Model" = ProcUnit."Replenishment Model"::"Min/Max") AND
          ((ProcUnit."Maximum Inventory" > 0) OR
          ((ProcUnit."Maximum Inventory" = 0) AND
           (ProcUnit."Minimum Inventory" = 0) AND
           (ProcUnit."Minimum Days Supply" = 0) AND
           (ProcUnit."Maximum Days Supply" = 0)))) OR
           (ProcUnit."Replenishment Model" = ProcUnit."Replenishment Model"::"Lead Time Horizon")  THEN BEGIN

        // horizon calc line
        IF (ProcUnit."Safety Stock Calc. Method" = ProcUnit."Safety Stock Calc. Method"::Fixed) THEN BEGIN
          IF RecordCalcLines THEN BEGIN
              CreateCalcLine(
              STRSUBSTNO(Text042,
                LTHDate,
                WORKDATE,
                UBP.CalcLeadTimeDays(ProcUnit),
                PushVendorLTDays,
                CurrOrderAddDays,
                UBP.GetSafetyStockDays(ProcUnit,UBP.CalcLeadTimeDays(ProcUnit),UBP.GetReviewCycle(ProcUnit),PushVendorLTDays),
                UBP.GetReviewCycle(ProcUnit)),ProcUnit);
            //CreateCalcLine(STRSUBSTNO(Text066,LTHDate));
            END;
        END ELSE BEGIN
          IF RecordCalcLines THEN BEGIN
            // horizon calc line
              CreateCalcLine(
                STRSUBSTNO(Text040,
                  LTHDate,
                  WORKDATE,
                  UBP.CalcLeadTimeDays(ProcUnit),
                  PushVendorLTDays,
                  CurrOrderAddDays,
                  Forecast.GetSafetyStockQty(),
                  UBP.GetReviewCycle(ProcUnit)),ProcUnit);
            //CreateCalcLine(STRSUBSTNO(Text066,LTHDate));
            END;
        END;
      END ELSE BEGIN

      END;

      IF (UBP.SpokesExist(ProcUnit)) OR
        (Location."Roll Up Order Quantity Rule" = Location."Roll Up Order Quantity Rule"::MinSOQ) THEN BEGIN
      // roll up

          CASE ProcUnit."Replenishment Model" OF
            ProcUnit."Replenishment Model"::"Lead Time Horizon":
              BEGIN
            // Calc roll Up >>
            CLEAR(CreateLocInvRollUp);
            CreateLocInvRollUp.CalcRollUp(ProcUnit,FALSE,0,LTHDate);
            CreateLocInvRollUp.GetMinMaxSOQ(RollUpMinSOQ,RollUpMaxSOQ);
          END;

          ProcUnit."Replenishment Model"::"Min/Max":
                    BEGIN
              IF ((ProcUnit."Maximum Inventory" > 0) OR
                  ((ProcUnit."Maximum Inventory" = 0) AND
                  (ProcUnit."Minimum Inventory" = 0) AND
                  (ProcUnit."Minimum Days Supply" = 0) AND
                  (ProcUnit."Maximum Days Supply" = 0))) THEN BEGIN
                // Calc roll Up >>
                CLEAR(CreateLocInvRollUp);
                CreateLocInvRollUp.CalcRollUp(ProcUnit,FALSE,0,LTHDate);
                CreateLocInvRollUp.GetMinMaxSOQ(RollUpMinSOQ,RollUpMaxSOQ);
              END ELSE BEGIN
                // do min max days
                LTHDate := CALCDATE(STRSUBSTNO('<%1D>', PushVendorLTDaysText), WORKDATE + ProcUnit."Minimum Days Supply");
                CLEAR(CreateLocInvRollUp);
                CreateLocInvRollUp.CalcRollUp(ProcUnit,FALSE,0,LTHDate);
                CreateLocInvRollUp.GetMinMaxSOQ(RollUpMinSOQ,RollUpMaxSOQ);
                NetInvPos := CreateLocInvRollUp.GetTopLevelSurplus();
                IF (NetInvPos < 0) THEN BEGIN
                  MinDaysInvPos := NetInvPos;
                  LTHDate := CALCDATE(STRSUBSTNO('<%1D>', PushVendorLTDaysText), WORKDATE + ProcUnit."Maximum Days Supply");
                  NetInvPos := CreateLocInvRollUp.GetTopLevelSurplus();
                  MaxDaysInvPos := NetInvPos;
                    END;
                    END;
                END;
              END;

          IF RecordCalcLines THEN
            CreateCalcLine(STRSUBSTNO(Text062,RollUpMinSOQ,RollUpMaxSOQ),ProcUnit);

          CASE Location."Roll Up Order Quantity Rule" OF
            Location."Roll Up Order Quantity Rule"::MinSOQ:
                    BEGIN
                IF RecordCalcLines THEN
                  CreateCalcLine(STRSUBSTNO(Text063,RollUpMinSOQ),ProcUnit);
                PurchQtyBase := RollUpMinSOQ;
                    END;
            Location."Roll Up Order Quantity Rule"::MaxSOQ:
                    BEGIN
                IF RecordCalcLines THEN
                  CreateCalcLine(STRSUBSTNO(Text064,RollUpMaxSOQ),ProcUnit);
                PurchQtyBase := RollUpMaxSOQ;
                    END;
                END;
      // roll up
      END ELSE BEGIN
        CLEAR(Forecast);
        CASE ProcUnit."Replenishment Model" OF
          ProcUnit."Replenishment Model"::"Lead Time Horizon":
            BEGIN
              NetInvPos := Forecast.CalcNetNeed(ProcUnit, '', LTHDate,FALSE);
              PurchQtyBase := Forecast.GetMinSOQ();
              RollUpMaxSOQ := PurchQtyBase;
              IF RecordCalcLines THEN
                CreateCalcLine(Forecast.GetNetInvPosSource(),ProcUnit);
              END;
            ProcUnit."Replenishment Model"::"Min/Max":
              BEGIN
              IF ((ProcUnit."Maximum Inventory" > 0) OR
                  ((ProcUnit."Maximum Inventory" = 0) AND
                  (ProcUnit."Minimum Inventory" = 0) AND
                  (ProcUnit."Minimum Days Supply" = 0) AND
                  (ProcUnit."Maximum Days Supply" = 0))) THEN BEGIN
                NetInvPos := Forecast.CalcNetNeed(ProcUnit, '', LTHDate,FALSE);
                RollUpMaxSOQ := PurchQtyBase;
                PurchQtyBase := Forecast.GetMinSOQ();
                IF RecordCalcLines THEN
                  CreateCalcLine(Forecast.GetNetInvPosSource(),ProcUnit);

        END ELSE BEGIN
                // do min max days
                LTHDate := CALCDATE(STRSUBSTNO('<%1D>', PushVendorLTDaysText), WORKDATE + ProcUnit."Minimum Days Supply");
                NetInvPos := Forecast.CalcNetNeed(ProcUnit, '', LTHDate,FALSE);
                IF (NetInvPos < 0) THEN BEGIN
                  MinDaysInvPos := NetInvPos;
                  LTHDate := CALCDATE(STRSUBSTNO('<%1D>', PushVendorLTDaysText), WORKDATE + ProcUnit."Maximum Days Supply");
                  NetInvPos := Forecast.CalcNetNeed(ProcUnit, '', LTHDate,FALSE);
                  MaxDaysInvPos := NetInvPos;
                  PurchQtyBase := Forecast.GetMinSOQ();
                  RollUpMaxSOQ := PurchQtyBase;
                  IF RecordCalcLines THEN
                    CreateCalcLine(STRSUBSTNO(Text080, MinDaysInvPos, MaxDaysInvPos),ProcUnit);
                END;
        END;
        END;
      END;
      END;
    END;

    PROCEDURE CheckOrderMinimum@1240030002(VAR CurrProcUnit@1240020001 : Record 14000555);
    BEGIN
      IF OrigPurchQtyBase = 0 THEN
        OrigPurchQtyBase := PurchQtyBase
      ELSE
        IF (PurchQtyBase < OrigPurchQtyBase) THEN
          OrigPurchQtyBase := PurchQtyBase;

      IF (CurrProcUnit."Order Minimum" = 0) OR
         (PurchQtyBase <= 0) THEN
        EXIT;
      IF PurchQtyBase < CurrProcUnit."Order Minimum" THEN BEGIN
        CreateCalcLine(
          STRSUBSTNO(
             Text025,PurchQtyBase,CurrProcUnit."Order Minimum"),CurrProcUnit);
        PurchQtyBase := CurrProcUnit."Order Minimum";
      END;
    END;

    PROCEDURE CheckOrderMultiple@1240030003(VAR CurrProcUnit@1240020000 : Record 14000555);
    VAR
      OrderMultipleQty@1000000000 : Decimal;
    BEGIN
      IF (CurrProcUnit."Order Multiple" = 0) OR
         (PurchQtyBase <= 0) THEN
        EXIT;
      OrderMultipleQty := PurchQtyBase MOD CurrProcUnit."Order Multiple";
      IF OrderMultipleQty <> 0 THEN BEGIN
        NewPurchQtyBase := PurchQtyBase + (CurrProcUnit."Order Multiple"  - OrderMultipleQty);
        CreateCalcLine(
          STRSUBSTNO(
            Text026,PurchQtyBase,NewPurchQtyBase,CurrProcUnit."Order Multiple"),CurrProcUnit);
        PurchQtyBase := NewPurchQtyBase;
      END;
    END;

    PROCEDURE CheckFutureSupply@1240030004(VAR CurrSugOrderLine@1240020006 : Record 14000566;CurrProcUnit@1240030000 : Record 14000555;VAR CurrPurchQty@1240030001 : Decimal);
    VAR
      locPurchQtyBase@1240020000 : Decimal;
      AdjustedByMultiple@1240020001 : Boolean;
      PrevOrderQty@1240020003 : Decimal;
      SupplyOutsideLTH@1240020002 : Decimal;
      CurrOrderQtyBase@1240020005 : Decimal;
      OrigPurchQty@1240020004 : Decimal;
      PrevOrderQtyBase@1240020007 : Decimal;
      NewOrderQtyBase@1000 : Decimal;
      OrderMultipleQty@1000000000 : Decimal;
    BEGIN
      IF (CurrSugOrderLine.Type = CurrSugOrderLine.Type::Item) AND (CurrSugOrderLine."No." <> '') THEN BEGIN
        OrigPurchQty := CurrPurchQty;

        SupplyOutsideLTH := UBP.CheckFutureSupply(CurrProcUnit, CurrSugOrderLine."Horizon Date");

        IF SupplyOutsideLTH <> 0 THEN BEGIN
          CurrOrderQtyBase := CurrPurchQty * PurchQtyPerUOM;
          NewOrderQtyBase := CurrOrderQtyBase - SupplyOutsideLTH;
          IF NewOrderQtyBase < 0 THEN
            NewOrderQtyBase := 0;

          IF CurrOrderQtyBase <> NewOrderQtyBase THEN BEGIN

            CreateCalcLine(STRSUBSTNO(Text061, NewOrderQtyBase, OrigPurchQty * CurrSugOrderLine."Qty. per Unit of Measure", SupplyOutsideLTH),CurrProcUnit);

            {
            locPurchQtyBase := 0;
            AdjustedByMultiple := FALSE;
            PrevOrderQty := 0;
            OrderMultipleQty := 0;
            IF (CurrProcUnit."Order Multiple" > 0) AND
               (NewOrderQtyBase > 0) THEN BEGIN
              OrderMultipleQty := NewOrderQtyBase MOD CurrProcUnit."Order Multiple";
              IF OrderMultipleQty <> 0 THEN BEGIN
                locPurchQtyBase := NewOrderQtyBase + (CurrProcUnit."Order Multiple"  - OrderMultipleQty);
                AdjustedByMultiple := TRUE;
                PrevOrderQtyBase := NewOrderQtyBase;
                PrevOrderQty := ROUND(NewOrderQtyBase / PurchQtyPerUOM,1.0,'>');
                NewOrderQtyBase := locPurchQtyBase;
              END;
            END;
            }
            CurrPurchQty := ROUND(NewOrderQtyBase / PurchQtyPerUOM,1.0,'>');
            IF AdjustedByMultiple THEN
              CreateCalcLine(STRSUBSTNO(Text077,PrevOrderQty,CurrPurchQty,CurrProcUnit."Order Multiple",PrevOrderQtyBase),CurrProcUnit);
          END;
        END;
      END;
    END;

    PROCEDURE CheckExpiringSupply@1240020004(VAR CurrSugOrderLine@1240020006 : Record 14000566;CurrProcUnit@1240030000 : Record 14000555;VAR CurrPurchQty@1240030001 : Decimal);
    VAR
      locPurchQtyBase@1240020000 : Decimal;
      AdjustedByMultiple@1240020001 : Boolean;
      PrevOrderQty@1240020003 : Decimal;
      SupplyExpiringLTH@1240020002 : Decimal;
      CurrOrderQtyBase@1240020005 : Decimal;
      OrigPurchQty@1240020004 : Decimal;
      PrevOrderQtyBase@1240020007 : Decimal;
      NewOrderQtyBase@1000 : Decimal;
      OrderMultipleQty@1000000000 : Decimal;
    BEGIN
      IF NOT InvMgtSetup."Check Expiring Inventory" THEN
          EXIT;
      IF (CurrSugOrderLine.Type = CurrSugOrderLine.Type::Item) AND (CurrSugOrderLine."No." <> '') THEN BEGIN
        // increase ordering amount if inventory is epiring
        SupplyExpiringLTH := UBP.CheckExpiringInventory(CurrProcUnit."Location Code", CurrProcUnit."Item No.", CurrProcUnit."Variant Code", CurrSugOrderLine."Horizon Date");
        IF SupplyExpiringLTH > 0 THEN BEGIN
          CurrSugOrderLine."Qty. (Base) Expiring Inv." := SupplyExpiringLTH;
          IF NOT InvMgtSetup."Adj. for Expiring Inventory" THEN
            EXIT;
          OrigPurchQty := CurrPurchQty;
          CurrOrderQtyBase := CurrPurchQty * PurchQtyPerUOM;
          NewOrderQtyBase := CurrOrderQtyBase + SupplyExpiringLTH;
          IF NewOrderQtyBase < 0 THEN
            NewOrderQtyBase := 0;
          IF CurrOrderQtyBase <> NewOrderQtyBase THEN BEGIN
            CreateCalcLine(STRSUBSTNO(Text081, NewOrderQtyBase, OrigPurchQty * CurrSugOrderLine."Qty. per Unit of Measure", SupplyExpiringLTH),CurrProcUnit);
          {
            locPurchQtyBase := 0;
            AdjustedByMultiple := FALSE;
            PrevOrderQty := 0;
            OrderMultipleQty := 0;
            IF (CurrProcUnit."Order Multiple" > 0) AND
               (NewOrderQtyBase > 0) THEN BEGIN
              OrderMultipleQty := NewOrderQtyBase MOD CurrProcUnit."Order Multiple";
              IF OrderMultipleQty <> 0 THEN BEGIN
                locPurchQtyBase := NewOrderQtyBase + (CurrProcUnit."Order Multiple"  - OrderMultipleQty);
                AdjustedByMultiple := TRUE;
                PrevOrderQtyBase := NewOrderQtyBase;
                PrevOrderQty := ROUND(NewOrderQtyBase / PurchQtyPerUOM,1.0,'>');
                NewOrderQtyBase := locPurchQtyBase;
              END;
            END;
            }
            CurrPurchQty := ROUND(NewOrderQtyBase / PurchQtyPerUOM,1.0,'>');
            IF AdjustedByMultiple THEN
              CreateCalcLine(STRSUBSTNO(Text077,PrevOrderQty,CurrPurchQty,CurrProcUnit."Order Multiple",PrevOrderQtyBase),CurrProcUnit);
          END;
        END;
      END;
    END;

    PROCEDURE GetLTHOrderAddDays@1240030006(VAR CurrVendBuyingCalendar@1240020000 : Record 14000563;VAR CurrProcUnit@1240020001 : Record 14000555) OrderAddDays : Integer;
    BEGIN
      OrderAddDays := 0;
      OrderAddDays := InvMgtSetup."LTH Order Add Days";
      IF CurrVendBuyingCalendar."LTH Order Add Days" <> 0 THEN
        OrderAddDays := CurrVendBuyingCalendar."LTH Order Add Days";
      IF CurrProcUnit."LTH Order Add Days" <> 0 THEN
        OrderAddDays := CurrProcUnit."LTH Order Add Days";
      EXIT(OrderAddDays);
    END;

    PROCEDURE GetReviewInfo@1240030007(VAR CurrSugOrderLine@1240030000 : Record 14000566);
    VAR
      ItemCategory@1000000000 : Record 5722;
    BEGIN
      IF (CurrSugOrderLine.Type = CurrSugOrderLine.Type::Item) AND (CurrSugOrderLine."No." <> '') THEN BEGIN
        Item.GET(CurrSugOrderLine."No.");
        CurrSugOrderLine."Item Category Code" := Item."Item Category Code";
        CurrSugOrderLine."Base Unit of Measure Code" := Item."Base Unit of Measure";
        IF CurrSugOrderLine."Item Category Code" <> '' THEN BEGIN
          ItemCategory.GET(CurrSugOrderLine."Item Category Code");
          CurrSugOrderLine."Review Code" := ItemCategory."Review Code";
        END ELSE
          CurrSugOrderLine."Review Code" := '';
      END;
    END;

    PROCEDURE CheckQtyBreaks@1240020000(VAR CurrProcUnit@1240020000 : Record 14000555);
    VAR
      CreateLocInvRollUp@1000000000 : Codeunit 14000574;
      PurchasePrice@1000000001 : Record 7012;
      LocInvRollUp@1000000002 : Record 14000583;
      MinQty@1000000003 : Decimal;
      MaxQty@1000000004 : Decimal;
      EOQMaxPurchQty@1000000005 : Decimal;
      DailyForecast@1000000008 : Decimal;
      PrevPurchQtyBase@1000000010 : Decimal;
      UnitCost@1000000011 : Decimal;
    BEGIN
      IF (CurrProcUnit."Replenishment Model" <> CurrProcUnit."Replenishment Model"::"Usage Based Procurement") AND
         ((PurchQtyBase <= 0) OR
           (NOT InvMgtSetup."Show EOQ on Sug. Ord."))
      THEN
        EXIT;

      IF EOQMaxDate <= LTHDate THEN BEGIN
        CreateCalcLine(STRSUBSTNO(Text076,EOQMaxDate, LTHDate),CurrProcUnit);
        EXIT;
      END;

      CLEAR(CreateLocInvRollUp);
      CreateLocInvRollUp.CalcRollUp(CurrProcUnit,FALSE, 0, EOQMaxDate);
      CreateLocInvRollUp.GetNextRollUpLine(LocInvRollUp,TRUE);

      DailyForecast := ROUND(LocInvRollUp."Rolled Up Forecast" / InvMgtSetup."EOQ Max. Days Supply to Order",0.0001);

      CreateLocInvRollUp.GetMinMaxSOQ(MinQty,MaxQty);
      CASE Location."Roll Up Order Quantity Rule" OF
        Location."Roll Up Order Quantity Rule"::MaxSOQ:
          EOQMaxPurchQty := ROUND(MinQty / PurchQtyPerUOM,1.0);
        Location."Roll Up Order Quantity Rule"::MinSOQ:
          EOQMaxPurchQty := ROUND(MaxQty / PurchQtyPerUOM,1.0);
      END;

      IF Vend."No." <> TempSugOrderHeader."Buy-from Vendor No." THEN
        Vend.GET(TempSugOrderHeader."Buy-from Vendor No.");
      PurchasePrice.RESET;
      PurchasePrice.SETCURRENTKEY(
        "Item No.","Vendor No.","Starting Date","Currency Code",
        "Variant Code","Unit of Measure Code","Minimum Quantity");
      PurchasePrice.SETRANGE("Item No.",CurrProcUnit."Item No.");
      PurchasePrice.SETRANGE("Vendor No.",CurrProcUnit."Replenishment Source Code");
      PurchasePrice.SETFILTER("Starting Date",'<=%1',WORKDATE);
      PurchasePrice.SETRANGE("Currency Code",Vend."Currency Code");
      PurchasePrice.SETRANGE("Variant Code",CurrProcUnit."Variant Code");
      IF CurrProcUnit."Purchase Unit of Measure" <> '' THEN
        PurchasePrice.SETRANGE("Unit of Measure Code",CurrProcUnit."Purchase Unit of Measure");
      PrevPurchQtyBase := PurchQtyBase;
      IF PurchasePrice.FINDSET THEN BEGIN
        REPEAT
          IF (PurchasePrice."Ending Date" = 0D) OR
             (PurchasePrice."Ending Date" > TODAY)
          THEN BEGIN
            UnitCost := PurchasePrice."Direct Unit Cost";
            CheckEOQ(CurrProcUnit,PurchasePrice, UnitCost, DailyForecast,EOQMaxPurchQty);
          END;
        UNTIL PurchasePrice.NEXT = 0;
        IF SelectedEOQ > 0 THEN
          EOQ := SelectedEOQ;
      END ELSE BEGIN
        PurchasePrice.INIT;
        PurchasePrice."Item No." := '';
        PurchasePrice."Vendor No." := '';
        PurchasePrice."Starting Date" := 0D;
        PurchasePrice."Currency Code" := '';
        PurchasePrice."Variant Code" := '';
        PurchasePrice."Unit of Measure Code" := '';
        PurchasePrice."Minimum Quantity" := 0;
        UnitCost := UBP.GetUnitCost(CurrProcUnit."Location Code",CurrProcUnit."Item No.",CurrProcUnit."Variant Code");
        UnitCost := UnitCost * PurchQtyPerUOM;
        CheckEOQ(CurrProcUnit,PurchasePrice, UnitCost, DailyForecast,EOQMaxPurchQty);
      END;

      CheckOrderMinimum(CurrProcUnit);
      CheckOrderMultiple(CurrProcUnit);
      GetPurchUOM(CurrProcUnit);
      RoundUpPurchQty(CurrProcUnit);
    END;

    PROCEDURE CheckEOQ@1240030008(VAR CurrProcUnit@1240020000 : Record 14000555;VAR CurrPurchasePrice@1000000000 : Record 7012;CurrUnitCost@1000000003 : Decimal;CurrDailyForecast@1000000002 : Decimal;CurrEOQMaxPurchQty@1000000006 : Integer);
    VAR
      DailyForecastPerUOM@1000000001 : Decimal;
      MonthlyForecast@1000000005 : Decimal;
      EOQMinPurchQty@1000000004 : Decimal;
    BEGIN
      MonthlyForecast := ROUND(CurrDailyForecast * 30, 0.1);
      MonthlyForecast := ROUND(MonthlyForecast / PurchQtyPerUOM,0.1);
      IF (MonthlyForecast < 0) OR
         (CurrUnitCost = 0)
      THEN BEGIN
        EOQ := 0;
        IF MonthlyForecast < 0 THEN
          CreateCalcLine(STRSUBSTNO(Text060,MonthlyForecast),CurrProcUnit);
        IF CurrUnitCost = 0 THEN
          CreateCalcLine(Text059,CurrProcUnit);
      END ELSE BEGIN
        EOQ :=
          ROUND(POWER((24 * Location."Ordering Cost" * MonthlyForecast) /
          (Location."Carrying Cost %" / 100 * CurrUnitCost),0.5),1.0);
        IF EOQ >= CurrPurchasePrice."Minimum Quantity" THEN
          CreateCalcLine(
            STRSUBSTNO(
              Text011,EOQ,CurrProcUnit."Purchase Unit of Measure",Location."Ordering Cost",MonthlyForecast,
              CurrProcUnit."Purchase Unit of Measure",Location."Carrying Cost %",CurrUnitCost),CurrProcUnit)
        ELSE
          CreateCalcLine(
            STRSUBSTNO(
              Text075,EOQ,CurrProcUnit."Purchase Unit of Measure",Location."Ordering Cost",MonthlyForecast,
              CurrProcUnit."Purchase Unit of Measure",Location."Carrying Cost %",
              CurrUnitCost, CurrPurchasePrice."Minimum Quantity"),CurrProcUnit);
        DailyForecastPerUOM := ROUND(CurrDailyForecast / PurchQtyPerUOM,0.1);
        EOQMinPurchQty := ROUND(InvMgtSetup."EOQ Min. Days Supply to Order" * DailyForecastPerUOM,1.0,'>');
        IF (EOQ < EOQMinPurchQty)
        THEN BEGIN
          EOQ := EOQMinPurchQty;
          CreateCalcLine(
            STRSUBSTNO(
              Text012,EOQ,DailyForecastPerUOM,InvMgtSetup."EOQ Min. Days Supply to Order"),CurrProcUnit);
        END;
        IF EOQ > CurrEOQMaxPurchQty THEN BEGIN
          EOQ := CurrEOQMaxPurchQty;
          CreateCalcLine(STRSUBSTNO(Text013,EOQ,EOQMaxDate),CurrProcUnit);
        END;
      END;

      IF (CurrProcUnit."Order Qty. Method" = CurrProcUnit."Order Qty. Method"::EOQ) THEN BEGIN
        IF (EOQ > (PurchQtyBase /  PurchQtyPerUOM)) AND
           (EOQ >= CurrPurchasePrice."Minimum Quantity")
        THEN BEGIN
          PurchQty := EOQ;
          SelectedEOQ := EOQ;
          PurchQtyBase := EOQ * PurchQtyPerUOM;
        END;
      END;
    END;

    LOCAL PROCEDURE SetCriticalNeed@1240020001(VAR CurrSugOrderLine@1240020000 : Record 14000566);
    VAR
      LocProcUnit@1240020004 : Record 14000555;
      LocFilterString@1240020003 : Text[250];
      Critical@1240020002 : Boolean;
      LocQtyCritical@1240020001 : Decimal;
      LocLeadTimeDate@1240020005 : Date;
      CriticalHub@1240020006 : Boolean;
      CriticalSpoke@1240020007 : Boolean;
    BEGIN
      IF (CurrSugOrderLine.Type = CurrSugOrderLine.Type::Item) AND (CurrSugOrderLine."No." <> '') THEN BEGIN
        LocProcUnit.GET(CurrSugOrderLine."Location Code",CurrSugOrderLine."No.",CurrSugOrderLine."Variant Code");
        LocFilterString :=
          UBP.GetLocationFilter(LocProcUnit,FALSE);
        IF CurrSugOrderLine."Horizon Date" = 0D THEN
          LocLeadTimeDate := CALCDATE(STRSUBSTNO('<+%1D>',UBP.CalcLeadTimeDays(LocProcUnit)), WORKDATE)
        ELSE
          LocLeadTimeDate := CurrSugOrderLine."Horizon Date";
        LocProcUnit.RESET;
        // replenishment path filter
        LocProcUnit.SETFILTER("Location Code",LocFilterString);
        LocProcUnit.SETRANGE("Item No.",CurrSugOrderLine."No.");
        LocProcUnit.SETRANGE("Variant Code",CurrSugOrderLine."Variant Code");
        LocProcUnit.FINDSET;
        CurrSugOrderLine."Critical Location" := 0;
        CriticalHub := FALSE;
        CriticalSpoke := FALSE;
          //<TPZ2330>
        Item.GET(TempSugOrderLine."No.");
        PurchasePrice.SETRANGE("Item No.", TempSugOrderLine."No.");
        PurchasePrice.SETFILTER("Variant Code", TempSugOrderLine."Variant Code");
        PurchasePrice.SETRANGE("Vendor No.", TempSugOrderLine."Buy-from Vendor No.");
        PurchasePrice.SETRANGE("Unit of Measure Code", Item."Purch. Unit of Measure");
        PurchasePrice.SETFILTER("Ending Date",'%1|>=%2',0D,WORKDATE);
        IF PurchasePrice.FINDFIRST THEN
          SugOrderLine."Vendor Priority" := PurchasePrice."Vendor Priority";
        //</TPZ2330>
        REPEAT
          Critical := FALSE;
          // lead time to show critical
          LocQtyCritical := UBP.CalcCriticalQty(LocProcUnit, LocLeadTimeDate);
          IF LocQtyCritical < 0 THEN
            Critical := TRUE;
          IF (NOT LocProcUnit."Nonstock Unit") AND
              (LocQtyCritical = 0) AND
              (InvMgtSetup."Critical need stock item zero")
          THEN
            Critical := TRUE;
          IF Critical THEN BEGIN
            IF (LocProcUnit."Location Code" = SugOrderLine."Location Code") THEN
              CriticalHub := TRUE
            ELSE
              CriticalSpoke := TRUE;
          END;
        UNTIL LocProcUnit.NEXT = 0;
        IF CriticalHub OR CriticalSpoke THEN
          SugOrderLine."Critical Need" := TRUE;
        CASE TRUE OF
          CriticalHub AND CriticalSpoke:
            BEGIN
              SugOrderLine."Critical Location" := SugOrderLine."Critical Location"::"Hub and Spoke";
            END;
          CriticalHub:
            BEGIN
              SugOrderLine."Critical Location" := SugOrderLine."Critical Location"::Hub;
            END;
          CriticalSpoke:
            BEGIN
              SugOrderLine."Critical Location" := SugOrderLine."Critical Location"::Spoke;
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE SetAutoFCAdjustWarning@1240020002(VAR CurrSugOrderLine@1240020000 : Record 14000566);
    VAR
      Forecast@1000000000 : Codeunit 14000567;
      LocProcUnit@1240020001 : Record 14000555;
      TotFC@1240020005 : Decimal;
      TotCustFC@1240020004 : Decimal;
      PromoAdjExists@1240020003 : Boolean;
      TotAutoFCAdj@1240020002 : Decimal;
      LocOverrideLTHDate@1240020006 : Date;
      LTHPeriod@1240020007 : Integer;
      i@1240020008 : Integer;
      HorizonPeriodStartDate@1240020010 : Date;
      HorizonPeriodEndDate@1240020009 : Date;
    BEGIN
      IF (CurrSugOrderLine.Type = CurrSugOrderLine.Type::Item) AND (CurrSugOrderLine."No." <> '') THEN BEGIN
        LocProcUnit.GET(CurrSugOrderLine."Location Code",CurrSugOrderLine."No.",CurrSugOrderLine."Variant Code");
        CLEAR(Forecast);
        // all periods not just future to allow search of future collaborative // do not set required periods
        Forecast.CalcNetNeed(LocProcUnit, '', CurrSugOrderLine."Horizon Date",FALSE);
        TotFC := Forecast.GetLTHForecast;
        IF TotFC <= 0 THEN
          EXIT;
        // Auto FC Adjust through Horizon
        LTHPeriod := Forecast.GetLeadTimeHorizPeriod(CurrSugOrderLine."Horizon Date");
        FOR i := 1 TO LTHPeriod DO BEGIN
          TotAutoFCAdj := TotAutoFCAdj + Forecast.GetAutoForcAdjustment(i);
        END;
        // Collaborative and Promo through horizon period + future X periods
        FOR i := 1 TO (LTHPeriod + InvMgtSetup."FC Adj. Warning Future Periods") DO BEGIN
          TotCustFC := TotCustFC + Forecast.GetCustForecastUsage(i);
        END;
        HorizonPeriodStartDate := Forecast.GetPeriodStartingDate(1);
        HorizonPeriodEndDate := Forecast.GetPeriodEndingDate(LTHPeriod + InvMgtSetup."FC Adj. Warning Future Periods");
        PromoAdjExists := CalcForecastAdj(LocProcUnit, HorizonPeriodStartDate, HorizonPeriodEndDate);
        IF ((TotCustFC > 0) OR (PromoAdjExists)) AND (TotAutoFCAdj > 0) THEN
          CurrSugOrderLine."Auto-Forc. Adj. Warning" := TRUE;
      END;
    END;

    LOCAL PROCEDURE CalcForecastAdj@1240030038(CurrProcUnit@1240030001 : Record 14000555;StartDate@1240020000 : Date;EndDate@1240030002 : Date) ForcAdjExists : Boolean;
    VAR
      ForecastAdj@1240030000 : Record 14002707;
    BEGIN
      ForcAdjExists := FALSE;
      ForecastAdj.SETCURRENTKEY("Item No.","Variant Code","Location Code","Starting Date");
        ForecastAdj.SETFILTER("Location Code", UBP.GetUsageLocationFilter(CurrProcUnit."Location Code",CurrProcUnit."Item No.",CurrProcUnit."Variant Code",TRUE));
      ForecastAdj.SETRANGE("Item No.",CurrProcUnit."Item No.");
      IF CurrProcUnit."Summarize Variant Detail" THEN
        ForecastAdj.SETRANGE("Variant Code")
      ELSE
        ForecastAdj.SETRANGE("Variant Code",CurrProcUnit."Variant Code");
      ForecastAdj.SETRANGE("Starting Date", StartDate, EndDate);
      ForecastAdj.SETFILTER("Promotion Code", '<>%1', '');
      ForecastAdj.CALCSUMS(Quantity);
      IF (ForecastAdj.Quantity <> 0) THEN
        ForcAdjExists := TRUE;
      EXIT(ForcAdjExists);
    END;

    LOCAL PROCEDURE SetupTempHeader@1240020003(VAR CurrVendBuyingCalendar@1240020000 : Record 14000563);
    VAR
      DocNumber@1240020001 : Code[20];
      ProcGroup@1240020002 : Record 14000564;
    BEGIN
      IF CurrVendBuyingCalendar."Procurement Group Code" <> '' THEN
        DocNumber := CurrVendBuyingCalendar."Procurement Group Code"
      ELSE BEGIN
        IF CurrVendBuyingCalendar."Division Code" <> '' THEN
          DocNumber := CurrVendBuyingCalendar."Location Code" + CurrVendBuyingCalendar."Division Code"
        ELSE
          DocNumber := CurrVendBuyingCalendar."Location Code";
      END;
      TempPurchHeader."Document Type" := TempPurchHeader."Document Type"::Order;
      TempPurchHeader."No." := COPYSTR(DocNumber, 1, 20);
      TempPurchHeader."Order Date" := WORKDATE;
      TempPurchHeader."Posting Date" := WORKDATE;
      TempPurchHeader."Document Date" := WORKDATE;
      TempPurchHeader.VALIDATE("Buy-from Vendor No.",CurrVendBuyingCalendar."Vendor No.");
      IF CurrVendBuyingCalendar."Procurement Group Code" <> '' THEN BEGIN
        ProcGroup.GET(CurrVendBuyingCalendar."Vendor No.",CurrVendBuyingCalendar."Procurement Group Code");
        TempPurchHeader.VALIDATE("Location Code",ProcGroup."Default Ship-to Location");
      END ELSE
        TempPurchHeader.VALIDATE("Location Code",CurrVendBuyingCalendar."Location Code");
      IF SugOrderHeader.GET(CurrVendBuyingCalendar."Vendor No.",DocNumber) THEN BEGIN
        TempSugOrderHeader.COPY(SugOrderHeader);
        SetInitialValues(CurrVendBuyingCalendar, TempSugOrderHeader);
        TempSugOrderHeader."Purchaser Code" := CurrVendBuyingCalendar."Purchaser Code";
        TempSugOrderHeader.INSERT;
      END ELSE BEGIN
        TempSugOrderHeader.INIT;
        TempSugOrderHeader."Buy-from Vendor No." := TempPurchHeader."Buy-from Vendor No.";
        TempSugOrderHeader."No." := DocNumber;
        TempSugOrderHeader.VALIDATE("Location Code",TempPurchHeader."Location Code");
        SetInitialValues(CurrVendBuyingCalendar, TempSugOrderHeader);
        TempSugOrderHeader."Purchaser Code" := CurrVendBuyingCalendar."Purchaser Code";
        TempSugOrderHeader.INSERT;
      END;
      SugOrderLine.RESET;
      SugOrderLine.SETRANGE("Buy-from Vendor No.",CurrVendBuyingCalendar."Vendor No.");
      SugOrderLine.SETRANGE("Document No.",DocNumber);
      IF SugOrderLine.FINDLAST THEN
        LineNumber := SugOrderLine."Line No." + 10000
      ELSE
        LineNumber := 10000;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeProcessProcUnit@1240020009(VAR BypassProcUnit@1240020000 : Boolean;VAR ProcUnit@1240020003 : Record 14000555);
    BEGIN
    END;

    LOCAL PROCEDURE CreateSuggestedOrderByPUC@1240020007(VAR CurrVendBuyingCalendar@1240020000 : Record 14000563;VAR CurrProcUnit@1000000000 : Record 14000555;AltVendor@1000000001 : Boolean);
    VAR
      LeadTime@1240020008 : Integer;
      ByPassProcUnit@1240020006 : Boolean;
      LTHOrderAddDays@1240020005 : Integer;
      StdPurchQty@1240020004 : Decimal;
      LocInvPeriod@1240020003 : Record 14000553;
      LeadTimeSource@1240020002 : Text[20];
    BEGIN
      EOQ := 0;
      SelectedEOQ := 0;
      PurchQtyBase := 0;
      OrigPurchQtyBase := 0;
      RollUpMinSOQ := 0;
      RollUpMaxSOQ := 0;
      PurchUOM := '';
      PurchQtyPerUOM := 0;
      PurchQty := 0;
      PurchQtyRoundUpBase := 0;
      LTHDate := 0D;
      ByPassProcUnit := FALSE;
      Item.GET(CurrProcUnit."Item No.");
      LeadTimeSource := '';
      VendorLeadTimeDays := 0;
      LeadTimeMessage := '';
      OnBeforeProcessProcUnit(ByPassProcUnit, CurrProcUnit);
      IF (NOT Item.Blocked) AND (NOT ByPassProcUnit) THEN BEGIN
        LTHOrderAddDays := GetLTHOrderAddDays(CurrVendBuyingCalendar, CurrProcUnit);
        LTHDate := UBP.GetLeadTimeHoriz(CurrProcUnit);
        LeadTimeSource := UBP.GetLeadTimeSource();
        VendorLeadTimeDays := UBP.GetLeadTimeDays;
        LeadTimeMessage := FORMAT(VendorLeadTimeDays);
        IF LeadTimeSource <> '' THEN
          LeadTimeMessage := COPYSTR(LeadTimeMessage + ' ' + LeadTimeSource, 1, 30);

        // do not record calc lines if using order add days
        IF (LTHOrderAddDays > 0) THEN
          CheckMinSOQ(CurrProcUnit, FALSE, 0)
        ELSE
          CheckMinSOQ(CurrProcUnit, TRUE, 0);  // get min soq ... can come from Roll-up or forecast

        IF (PurchQtyBase > 0) THEN BEGIN
          IF LTHOrderAddDays > 0 THEN BEGIN
            PurchQtyBase := 0;
            CheckMinSOQ(CurrProcUnit, TRUE, LTHOrderAddDays);
          END;
          CheckOrderMinimum(CurrProcUnit);
          CheckOrderMultiple(CurrProcUnit);
          GetPurchUOM(CurrProcUnit);
          RoundUpPurchQty(CurrProcUnit);
          StdPurchQty := PurchQty;
          CheckQtyBreaks(CurrProcUnit);
          IF StdPurchQty > PurchQty THEN
            PurchQty := StdPurchQty;

          CreateSugOrderLine(CurrVendBuyingCalendar, CurrProcUnit)
        END ELSE BEGIN
          IF CurrVendBuyingCalendar."Include All Items" THEN
            CreateSugOrderLine(CurrVendBuyingCalendar, CurrProcUnit)
        END;
      END;
    END;

    LOCAL PROCEDURE CalcVendorReplenishmentFromTemp@1240020010(VAR CurrVendBuyingCalendar@1000000000 : Record 14000563);
    VAR
      OrdersRemoved@1000000003 : Boolean;
      LeadTime@1000000002 : Integer;
      VendBuyingCalendar@1000000001 : Record 14000563;
      ByPassProcUnit@1000000004 : Boolean;
      LTHOrderAddDays@1000000005 : Integer;
      StdPurchQty@1000000006 : Decimal;
      LocInvPeriod@1000000007 : Record 14000553;
      LeadTimeSource@1240020000 : Text[20];
      locPurchasePrice@1240020003 : Record 7012;
      IgnoreProcUnit@1240020002 : Boolean;
      ProcUnit@1240020001 : Record 14000555;
    BEGIN
      IF (NOT Vend.GET(CurrVendBuyingCalendar."Vendor No.")) OR
         (Vend.Blocked = Vend.Blocked::All)
      THEN
        EXIT;

      VendBuyingCalendar.COPY(CurrVendBuyingCalendar);
      REPEAT
        SugOrderLine.SETRANGE("Buy-from Vendor No.",VendBuyingCalendar."Vendor No.");
        SugOrderLine.SETRANGE("Division Code",VendBuyingCalendar."Division Code");
        SugOrderLine.SETRANGE("Location Code",VendBuyingCalendar."Location Code");
        IF SugOrderLine.FINDFIRST THEN BEGIN
          IF SugOrderHeader.GET(SugOrderLine."Buy-from Vendor No.",SugOrderLine."Document No.") THEN
            SugOrderHeader.DELETE(TRUE)
          ELSE
            SugOrderLine.DELETEALL(FALSE);
        END ELSE
          OrdersRemoved := TRUE;
      UNTIL OrdersRemoved;

      // check pucs exist
      PushVendorLTDays := VendBuyingCalendar."Push Vendor L.T. Days";
      IF PushVendorLTDays <> 0 THEN
        PushVendorLTDaysText := '+' + FORMAT(VendBuyingCalendar."Push Vendor L.T. Days")
      ELSE
        PushVendorLTDaysText := FORMAT(VendBuyingCalendar."Push Vendor L.T. Days");

      InvMgtSetup.GET;
      InvMgtSetup.TESTFIELD("EOQ Min. Days Supply to Order");
      InvMgtSetup.TESTFIELD("EOQ Max. Days Supply to Order");

      EOQMaxDate := CALCDATE(STRSUBSTNO('<+%1D>',InvMgtSetup."EOQ Max. Days Supply to Order"),WORKDATE);

      Location.GET(VendBuyingCalendar."Location Code");
      Location.TESTFIELD("Carrying Cost %");
      Location.TESTFIELD("Ordering Cost");

      LocInvPeriod.RESET;
      LocInvPeriod.SETCURRENTKEY("Location Code","Period End Closed");
      LocInvPeriod.SETRANGE("Location Code",VendBuyingCalendar."Location Code");
      LocInvPeriod.SETRANGE("Period End Closed",TRUE);
      IF NOT LocInvPeriod.FINDLAST THEN
        ERROR(Text000,VendBuyingCalendar."Location Code");

      SetupTempHeader(VendBuyingCalendar);

      IF GUIALLOWED THEN BEGIN
        Window.OPEN(
          STRSUBSTNO(
            Text005,VendBuyingCalendar."Location Code") + '\' +
            PADSTR(Text006,30) + '#2##################\' +
            PADSTR(Text007,30) + '#3##################\' +
            PADSTR(Text008,30) + '@4@@@@@@@@@@@@@@@@@@\' +
            PADSTR(Text009,30) + '@5@@@@@@@@@@@@@@@@@@\' +
            PADSTR(Text010,30) + '@6@@@@@@@@@@@@@@@@@@');
        Window.UPDATE(2,VendBuyingCalendar."Vendor No.");
        Window.UPDATE(3,TempSugOrderHeader."No.");
      END;

      ProcUnit.RESET;
      ProcUnit.SETRANGE("Location Code",VendBuyingCalendar."Location Code");
      ProcUnit.SETRANGE("Replenishment Source Type",ProcUnit."Replenishment Source Type"::Vendor);
      ProcUnit.SETRANGE("Replenishment Source Code",VendBuyingCalendar."Vendor No.");
      ProcUnit.SETRANGE("Division Code", VendBuyingCalendar."Division Code");
      ProcUnit.SETRANGE("Manual Bypass Replenishment", FALSE);
      ProcUnit.SETRANGE("Exclude From Replenishment", FALSE);
      IF ProcUnit.FINDSET THEN BEGIN
        REPEAT
          IF NOT tempProcUnit.GET(ProcUnit."Location Code", ProcUnit."Item No.", ProcUnit."Variant Code") THEN BEGIN
            tempProcUnit.INIT;
            tempProcUnit."Location Code" := CurrVendBuyingCalendar."Location Code";
            tempProcUnit."Item No." := ProcUnit."Item No.";
            tempProcUnit."Variant Code" := ProcUnit."Variant Code";
            tempProcUnit."Replenishment Source Type" := tempProcUnit."Replenishment Source Type"::Vendor;
            tempProcUnit."Replenishment Source Code" := CurrVendBuyingCalendar."Vendor No.";
            tempProcUnit.INSERT(FALSE);
          END;
        UNTIL ProcUnit.NEXT = 0;
      END;

      IF CurrVendBuyingCalendar."Suggest From Purchase Prices" THEN BEGIN
        locPurchasePrice.RESET;
        locPurchasePrice.SETCURRENTKEY(
          "Item No.","Vendor No.","Starting Date","Currency Code",
          "Variant Code","Unit of Measure Code","Minimum Quantity");
        locPurchasePrice.SETRANGE("Vendor No.", CurrVendBuyingCalendar."Vendor No.");
        locPurchasePrice.SETFILTER("Starting Date",'<=%1',WORKDATE);
        locPurchasePrice.SETRANGE("Variant Code",ProcUnit."Variant Code");
        IF locPurchasePrice.FIND('-') THEN BEGIN
          REPEAT
            IF NOT tempProcUnit.GET(CurrVendBuyingCalendar."Location Code", locPurchasePrice."Item No.", locPurchasePrice."Variant Code") THEN BEGIN
              IgnoreProcUnit := FALSE;
              IF ProcUnit.GET(CurrVendBuyingCalendar."Location Code", locPurchasePrice."Item No.", locPurchasePrice."Variant Code") THEN BEGIN
                IF ProcUnit."Replenishment Source Type" <> ProcUnit."Replenishment Source Type"::Vendor THEN
                  IgnoreProcUnit := TRUE;
              END;
              IF NOT IgnoreProcUnit THEN BEGIN
                tempProcUnit.INIT;
                tempProcUnit."Location Code" := CurrVendBuyingCalendar."Location Code";
                tempProcUnit."Replenishment Source Type" := tempProcUnit."Replenishment Source Type"::Vendor;
                tempProcUnit."Replenishment Source Code" := CurrVendBuyingCalendar."Vendor No.";
                // update lead time or safety days
                tempProcUnit."Item No." := locPurchasePrice."Item No.";
                tempProcUnit."Variant Code" := locPurchasePrice."Variant Code";
                // temporary variable to show non-primary vendor
                tempProcUnit.Review := TRUE;
                tempProcUnit.INSERT(FALSE);
              END;
            END;
          UNTIL locPurchasePrice.NEXT = 0;
        END;
      END;


      IF tempProcUnit.FINDSET THEN BEGIN
        WindowProcUnitCount := tempProcUnit.COUNT;
        REPEAT
          IF NOT ProcUnit.GET(tempProcUnit."Location Code", tempProcUnit."Item No.", tempProcUnit."Variant Code") THEN BEGIN
            ProcUnit.INIT;
            ProcUnit."Location Code" := CurrVendBuyingCalendar."Location Code";
            ProcUnit."Replenishment Source Type" := ProcUnit."Replenishment Source Type"::Vendor;
            ProcUnit."Item No." := tempProcUnit."Item No.";
            ProcUnit."Variant Code" := tempProcUnit."Variant Code";
            ProcUnit.SetAutoInsert;
            ProcUnit."User ID" := 'Create Sug Ord';
            ProcUnit.INSERT(TRUE);
          END;

          // alternative vendor
          IF tempProcUnit."Replenishment Source Code" <> '' THEN BEGIN
            ProcUnit."Replenishment Source Code" := tempProcUnit."Replenishment Source Code";

            IF tempProcUnit.Review THEN
              CreateSuggestedOrderByPUC(CurrVendBuyingCalendar,ProcUnit,TRUE)
            ELSE
              CreateSuggestedOrderByPUC(CurrVendBuyingCalendar,ProcUnit,FALSE);

            IF GUIALLOWED THEN
              IF WindowProcCount MOD 10 = 0 THEN
                Window.UPDATE(4,ROUND(10000 * (WindowProcCount / WindowProcUnitCount),1));
          END;

        UNTIL tempProcUnit.NEXT = 0;
      END;

      IF GUIALLOWED THEN
        Window.UPDATE(4,10000);

      //MESSAGE('%1', WindowProcCount); //HOTFIX

      WindowProcCount := 0;
      WriteSugOrder;

      IF GUIALLOWED THEN
        Window.UPDATE(5,10000);

      WindowProcCount := 0;

      WriteCalcLines;

      IF GUIALLOWED THEN BEGIN
        Window.UPDATE(6,10000);
        Window.CLOSE;
      END;
    END;

    BEGIN
    END.
  }
}

