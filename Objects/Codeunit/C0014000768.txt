OBJECT Codeunit 14000768 UPS WS XML Encoder
{
  OBJECT-PROPERTIES
  {
    Date=02/25/19;
    Time=12:00:00 PM;
    Version List=SE0.61;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Country@1240020015 : Record 9;
      ShippingAgent@1240020007 : Record 291;
      PackingStation@1240020006 : Record 14000709;
      CarrierPackingStation@1240020005 : Record 14000729;
      ShippingSetup@1240020004 : Record 14000707;
      ShippingAgentAccount@1240020003 : Record 14050005;
      ShippingAgentService@1240020002 : Record 14000708;
      UPSWSSetup@1240020001 : Record 14000777;
      UPSlinkSetup@1240020009 : Record 14050001;
      UPSOptionPage@1240020008 : Record 14000761;
      CompanyInfo@1240020013 : Record 79;
      UPSWSShippingAccount@1240020016 : Record 14000779;
      Shipping@1240020011 : Codeunit 14000701;
      XMLManagement@1240020010 : Codeunit 14000767;
      XMLDocOut@1240030004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      CurrNode@1240030002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NewChild@1240030001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1240030000 : Text[200];
      APIVer@1240020017 : Text[30];
      NameSpaceURI@1240020018 : Text[100];
      ShippingSetupRetrieved@1240030007 : Boolean;
      UPSlinkSetupRetrieved@1240030006 : Boolean;
      UPSWSSetupRetrieved@1240020012 : Boolean;
      Text001@1240020014 : TextConst 'ENU=Package Line %1 must have a "Value (Price)".';

    PROCEDURE VersionCheck@1240030004(RequestType@1240030001 : Text[30];RequestOption@1240030000 : Text[30]) Version : Text[30];
    BEGIN
      CASE RequestType OF
        'RateService':
          Version := '1.1';
        'Register':
          Version := '1.0';
        'Shipping':
          Version := '1.0';
        'Track':
          Version := '2.0';
        'Void':
          Version := '1.1';
        'Error':
          Version := '1.1';
      END;
    END;

    PROCEDURE CreateRequestHeader@1240030000(RequestType@1240030000 : Text[64];RequestOption@1240030006 : Text[64];VAR XMLDOMDocument@1240030001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    BEGIN
      DocNameSpace := '';
      APIVer := VersionCheck(RequestType,RequestOption);
      NameSpaceURI := GetNameSpaceURI(RequestType,'');

      CASE RequestType OF
        'Shipping':
          BEGIN
            CASE RequestOption OF
              'ShipmentRequest':
                BEGIN
                  DocNameSpace := GetNameSpaceURI('Common','');
                  XMLManagement.AddElement(CurrNode,RequestOption,'',NameSpaceURI,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'Request','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'SubVersion','1607',DocNameSpace,NewChild);
                      XMLManagement.AddElement(CurrNode,'RequestOption','validate',DocNameSpace,NewChild);
                      XMLManagement.AddElement(CurrNode,'TransactionReference','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        XMLManagement.AddElement(CurrNode,'CustomerContext','Ship Request',DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    CurrNode := CurrNode.ParentNode;
                END;
            END;
          END;
        'License':
          BEGIN
            CASE RequestOption OF
              'LicenseAgreement':
                BEGIN
                  CurrNode := XMLDOMDocument.DocumentElement;
                    XMLManagement.AddElement(CurrNode,'Request','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'TransactionReference','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        XMLManagement.AddElement(CurrNode,'CustomerContext','Lanham GetAgreement',DocNameSpace,NewChild);
                        XMLManagement.AddElement(CurrNode,'XpciVersion','1.0',DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                      XMLManagement.AddElement(CurrNode,'RequestAction','AccessLicense',DocNameSpace,NewChild);
                      XMLManagement.AddElement(CurrNode,'RequestOption','AllTools',DocNameSpace,NewChild);
                    CurrNode := CurrNode.ParentNode;
                  CurrNode := CurrNode.ParentNode;
                END;
              'LicenseRequest':
                BEGIN
                  CurrNode := XMLDOMDocument.DocumentElement;
                    XMLManagement.AddElement(CurrNode,'Request','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'RequestAction','AccessLicense',DocNameSpace,NewChild);
                      XMLManagement.AddElement(CurrNode,'RequestOption','AllTools',DocNameSpace,NewChild);
                    CurrNode := CurrNode.ParentNode;
                END;
            END;
          END;
        'Register':
          BEGIN
            CASE RequestOption OF
              'RegisterRequest':
                BEGIN
                  DocNameSpace := GetNameSpaceURI('Common','');
                  XMLManagement.AddElement(CurrNode,RequestOption,'',NameSpaceURI,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'Request','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'TransactionReference','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        XMLManagement.AddElement(CurrNode,'CustomerContext','Registration Request',DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    CurrNode := CurrNode.ParentNode;
                END;
              'AddAccount':
                BEGIN
                  DocNameSpace := GetNameSpaceURI('Common','');
                  XMLManagement.AddElement(CurrNode,'ManageAccountRequest','',NameSpaceURI,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'Request','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'TransactionReference','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        XMLManagement.AddElement(CurrNode,'CustomerContext','Add Account',DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    CurrNode := CurrNode.ParentNode;
                END;
            END;
          END;
        'Void':
          BEGIN
            CASE RequestOption OF
              'VoidShipment':
                BEGIN
                  DocNameSpace := GetNameSpaceURI('Common','');
                  XMLManagement.AddElement(CurrNode,'VoidShipmentRequest','',NameSpaceURI,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'Request','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'TransactionReference','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        XMLManagement.AddElement(CurrNode,'CustomerContext','Void Shipment',DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    CurrNode := CurrNode.ParentNode;
                END;
             END;
          END;
        'Track':
          BEGIN
            CASE RequestOption OF
              'TrackRequest':
                BEGIN
                  CurrNode := XMLDOMDocument.DocumentElement;
                  DocNameSpace := GetNameSpaceURI('Common','');
                    XMLManagement.AddElement(CurrNode,'Request','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'RequestOption','1',DocNameSpace,NewChild);
                    CurrNode := CurrNode.ParentNode;
                END;
            END;
          END;
        'RateService':
          BEGIN
            CASE RequestOption OF
              'RateRequest':
                BEGIN
                  DocNameSpace := GetNameSpaceURI('Common','');
                  XMLManagement.AddElement(CurrNode,RequestOption,'',NameSpaceURI,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'Request','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'RequestOption','Rate',DocNameSpace,NewChild);
                      XMLManagement.AddElement(CurrNode,'TransactionReference','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        XMLManagement.AddElement(CurrNode,'CustomerContext','Rating and Service',DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    CurrNode := CurrNode.ParentNode;
                END;
            END;
          END;
      END;

      DocNameSpace := NameSpaceURI;
    END;

    PROCEDURE ClosePackage@1240020003(CurrentPackage@1240030004 : Record 14000701;VAR XMLDOMDocument@1240030002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";GiveError@1240030000 : Boolean);
    VAR
      UPSOptionPage@1240020000 : Record 14000761;
      PackageLine@1240020003 : Record 14000702;
      ShippingAccount@1240020009 : Record 14000714;
      Package1@1240020011 : Record 14000701;
      LTLFreightType@1240020005 : Record 14000806;
      FormType@1240020007 : Text[1];
      Endorsement@1240020008 : Text[1];
      ISO2CountryCode@1240020010 : Text[2];
      UseValue@1240020002 : Decimal;
      UseQty@1240020006 : Decimal;
      SP@1240020001 : Boolean;
      PackageLoop@1240020004 : Integer;
    BEGIN
      WITH CurrentPackage DO BEGIN
        DocNameSpace := 'http://www.ups.com/XMLSchema/XOLTWS/Ship/v' + APIVer;

        GetSetupInfo;
        UPSWSShippingAccount.GET("Shipping Agent Account No.");
        UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.",0,0);

        IF "Service Indicator" IN ['92','93','94','95'] THEN
          SP := TRUE;

        IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::KGS THEN BEGIN
          "Calculation Weight (LBS)" :=
            ROUND(ShippingSetup.KiloToPound(GetWeight),0.01,'>');
          "Calculation Weight" := ROUND(GetWeight,0.01,'>');
        END ELSE BEGIN
          "Calculation Weight" := ROUND(GetWeight,0.01,'>');
          "Calculation Weight (LBS)" := "Calculation Weight";
        END;
        TESTFIELD("Calculation Weight");
        "Calculation Value" := GetValue;

        //Shipment Details
        XMLManagement.AddElement(CurrNode,'Shipment','',DocNameSpace,NewChild);
        CurrNode := NewChild;
          IF "World Wide Service" OR "UPS Canadian Service" OR NOT("Service Indicator" = 'GFP') THEN
            XMLManagement.AddElement(CurrNode,'Description',
              XMLManagement.FormatCleanNameAddress(Description,35,FALSE),DocNameSpace,NewChild);
          XMLManagement.AddElement(CurrNode,'Shipper','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            IF "Blind Shipment" OR "Double Blind Shipment" THEN BEGIN
              XMLManagement.AddElement(
                CurrNode,'Name',
                XMLManagement.FormatCleanNameAddress("Blind Ship-from Name",35,FALSE),DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'AttentionName',
                XMLManagement.FormatCleanNameAddress("Blind Ship-from Contact",35,FALSE),DocNameSpace,NewChild);
            END ELSE BEGIN
              XMLManagement.AddElement(
                CurrNode,'Name',
                XMLManagement.FormatCleanNameAddress(PackingStation."Ship-from Company",35,FALSE),DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'AttentionName',
                XMLManagement.FormatCleanNameAddress(PackingStation."Ship-from Contact",35,FALSE),DocNameSpace,NewChild);
            END;
            XMLManagement.AddElement(
              CurrNode,'ShipperNumber',
                CarrierPackingStation."UPS Shipping Agent Account No.",
                DocNameSpace,NewChild);
            XMLManagement.AddElement(CurrNode,'Address','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              IF "Blind Shipment" OR "Double Blind Shipment" THEN BEGIN
                XMLManagement.AddElement(
                  CurrNode,'AddressLine',
                  XMLManagement.FormatCleanNameAddress("Blind Ship-from Address",35,FALSE),DocNameSpace,NewChild);
                IF "Blind Ship-from Address 2" <> '' THEN
                  XMLManagement.AddElement(
                    CurrNode,'AddressLine',
                    XMLManagement.FormatCleanNameAddress("Blind Ship-from Address 2",35,FALSE),DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'City',
                  XMLManagement.FormatCleanNameAddress("Blind Ship-from City",30,FALSE),DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'StateProvinceCode',
                  XMLManagement.FixState("Blind Ship-from State"),DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'PostalCode',
                    XMLManagement.FixZIPCode("Blind Ship-from ZIP Code"),DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'CountryCode','US',DocNameSpace,NewChild);
              END ELSE BEGIN
                XMLManagement.AddElement(
                  CurrNode,'AddressLine',
                  XMLManagement.FormatCleanNameAddress(PackingStation."Ship-from Address",35,FALSE),DocNameSpace,NewChild);
                IF PackingStation."Ship-from Address2" <> '' THEN
                  XMLManagement.AddElement(
                    CurrNode,'AddressLine',
                    XMLManagement.FormatCleanNameAddress(PackingStation."Ship-from Address2",35,FALSE),DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'City',
                  XMLManagement.FormatCleanNameAddress(PackingStation."Ship-from City",30,FALSE),DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'StateProvinceCode',
                  XMLManagement.FixState(PackingStation."Ship-from State"),DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'PostalCode',
                    XMLManagement.FixZIPCode(PackingStation."Ship-from ZIP Code"),DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'CountryCode','US',DocNameSpace,NewChild);
              END;
            CurrNode := CurrNode.ParentNode;
          CurrNode := CurrNode.ParentNode;

          //Recipient Details
          XMLManagement.AddElement(CurrNode,'ShipTo','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            XMLManagement.AddElement(
              CurrNode,'Name',
              XMLManagement.FormatCleanNameAddress("Ship-to Name",35,FALSE),DocNameSpace,NewChild);
            XMLManagement.AddElement(
              CurrNode,'Address','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(
                CurrNode,'AddressLine',
                XMLManagement.FormatCleanNameAddress("Ship-to Address",35,FALSE),DocNameSpace,NewChild);
              IF "Ship-to Address 2" <> '' THEN
                XMLManagement.AddElement(
                  CurrNode,'AddressLine',
                  XMLManagement.FormatCleanNameAddress("Ship-to Address 2",35,FALSE),DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'City',
                XMLManagement.FormatCleanNameAddress("Ship-to City",30,FALSE),DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'StateProvinceCode',
                XMLManagement.FixState("Ship-to State"),DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'PostalCode',XMLManagement.FixZIPCode("Ship-to ZIP Code"),DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'CountryCode',
                XMLManagement.ReturnISOCountryCode("Ship-to Country Code"),DocNameSpace,NewChild);
              IF XMLManagement.IsPOBox("Ship-to Address") THEN
                XMLManagement.AddElement(CurrNode,'POBoxIndicator','',DocNameSpace,NewChild);
              IF "Residential Delivery" THEN
                XMLManagement.AddElement(
                  CurrNode,'ResidentialAddressIndicator','',DocNameSpace,NewChild);
            CurrNode := CurrNode.ParentNode;
          CurrNode := CurrNode.ParentNode;

          //Ship From Location Details
          XMLManagement.AddElement(CurrNode,'ShipFrom','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            XMLManagement.AddElement(
              CurrNode,'Name',
              XMLManagement.FormatCleanNameAddress(PackingStation."Ship-from Company",35,FALSE),DocNameSpace,NewChild);
            XMLManagement.AddElement(
              CurrNode,'Address','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(
                CurrNode,'AddressLine',
                XMLManagement.FormatCleanNameAddress(PackingStation."Ship-from Address",35,FALSE),DocNameSpace,NewChild);
              IF PackingStation."Ship-from Address2" <> '' THEN
                XMLManagement.AddElement(
                  CurrNode,'AddressLine',
                  XMLManagement.FormatCleanNameAddress(PackingStation."Ship-from Address2",35,FALSE),DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'City',PackingStation."Ship-from City",DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'StateProvinceCode',
                  XMLManagement.FixState(PackingStation."Ship-from State"),DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'PostalCode',PackingStation."Ship-from ZIP Code",DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'CountryCode','US',DocNameSpace,NewChild);
            CurrNode := CurrNode.ParentNode;
          CurrNode := CurrNode.ParentNode;

          //Payment Information
          IF "Service Indicator" <> 'GFP' THEN BEGIN
            XMLManagement.AddElement(CurrNode,'PaymentInformation','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(CurrNode,'ShipmentCharge','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(CurrNode,'Type','01',DocNameSpace,NewChild);
                CASE "Shipping Payment Type" OF
                  "Shipping Payment Type"::Prepaid:
                    BEGIN
                      XMLManagement.AddElement(CurrNode,'BillShipper','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        XMLManagement.AddElement(CurrNode,'AccountNumber',
                        CarrierPackingStation."UPS Shipping Agent Account No.",
                          DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    END;
                  "Shipping Payment Type"::"Third Party":
                    BEGIN
                      IF "Third Party Ship. Account No." <> '' THEN BEGIN
                        CLEAR(ShippingAccount);
                        ShippingAccount.SETCURRENTKEY("Ship-to Type","Ship-to No.","Ship-to Code",
                          "Shipping Agent Code","Account No.");
                        ShippingAccount.SETRANGE("Ship-to Type",ShippingAccount."Ship-to Type"::Customer);
                        ShippingAccount.SETRANGE(ShippingAccount."Shipping Agent Code",
                          "Shipping Agent Code");
                        ShippingAccount.SETRANGE("Account No.","Third Party Ship. Account No.");
                        IF ShippingAccount.FIND('-') THEN BEGIN
                          ShippingAccount.TESTFIELD(ShippingAccount."Third Party Country Code");
                          ShippingAccount.TESTFIELD(ShippingAccount."Third Party ZIP Code");
                          ISO2CountryCode :=
                            XMLManagement.ReturnISOCountryCode(ShippingAccount."Third Party Country Code");
                          XMLManagement.AddElement(CurrNode,'BillThirdParty','',DocNameSpace,NewChild);
                          CurrNode := NewChild;
                            XMLManagement.AddElement(CurrNode,'AccountNumber',
                              "Third Party Ship. Account No.",DocNameSpace,NewChild);
                            XMLManagement.AddElement(CurrNode,'Address','',DocNameSpace,NewChild);
                            CurrNode := NewChild;
                              XMLManagement.AddElement(CurrNode,'PostalCode',UPSOptionPage."Third Party ZIP Code"
                                ,DocNameSpace,NewChild);
                              XMLManagement.AddElement(CurrNode,'CountryCode',UPSOptionPage."Third Party Country Code"
                                ,DocNameSpace,NewChild);
                            CurrNode := CurrNode.ParentNode;
                          CurrNode := CurrNode.ParentNode;
                       END;
                      END;
                    END;
                  "Shipping Payment Type"::"Freight Collect":
                    BEGIN
                      IF "Third Party Ship. Account No." <> '' THEN BEGIN
                        CLEAR(ShippingAccount);
                        ShippingAccount.SETCURRENTKEY("Ship-to Type","Ship-to No.","Ship-to Code",
                          "Shipping Agent Code","Account No.");
                        ShippingAccount.SETRANGE("Ship-to Type",ShippingAccount."Ship-to Type"::Customer);
                        ShippingAccount.SETRANGE(ShippingAccount."Ship-to No.",CurrentPackage."Ship-to No.");
                        ShippingAccount.SETRANGE(ShippingAccount."Shipping Agent Code",
                          CurrentPackage."Shipping Agent Code");
                        ShippingAccount.SETRANGE("Account No.","Third Party Ship. Account No.");
                        IF ShippingAccount.FIND('-') THEN BEGIN
                          ShippingAccount.TESTFIELD(ShippingAccount."Third Party Country Code");
                          ISO2CountryCode :=
                            XMLManagement.ReturnISOCountryCode(ShippingAccount."Third Party Country Code");
                        END;
                      END;
                      XMLManagement.AddElement(CurrNode,'BillReceiver','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        XMLManagement.AddElement(CurrNode,'AccountNumber',
                          "Third Party Ship. Account No.",DocNameSpace,NewChild);
                        XMLManagement.AddElement(CurrNode,'Address','',DocNameSpace,NewChild);
                        CurrNode := NewChild;
                          XMLManagement.AddElement(CurrNode,'PostalCode',UPSOptionPage."Third Party ZIP Code"
                            ,DocNameSpace,NewChild);
                          XMLManagement.AddElement(CurrNode,'CountryCode',UPSOptionPage."Third Party Country Code"
                            ,DocNameSpace,NewChild);
                        CurrNode := CurrNode.ParentNode;
                      CurrNode := CurrNode.ParentNode;
                    END;
                  "Shipping Payment Type"::Consignee:
                    BEGIN
                      XMLManagement.AddElement(CurrNode,'ConsigneeBilledIndicator','',DocNameSpace,NewChild);
                    END;
                END;
              CurrNode := CurrNode.ParentNode;
            CurrNode := CurrNode.ParentNode;
          END ELSE BEGIN
            XMLManagement.AddElement(CurrNode,'FRSPaymentInformation','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(CurrNode,'Type','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                CASE "Shipping Payment Type" OF
                  "Shipping Payment Type"::Prepaid:
                    XMLManagement.AddElement(CurrNode,'Code','01',DocNameSpace,NewChild);
                  "Shipping Payment Type"::"Freight Collect":
                    XMLManagement.AddElement(CurrNode,'Code','02',DocNameSpace,NewChild);
                  "Shipping Payment Type"::"Third Party":
                    XMLManagement.AddElement(CurrNode,'Code','03',DocNameSpace,NewChild);
                END;
                XMLManagement.AddElement(CurrNode,'Description',FORMAT("Shipping Payment Type"),DocNameSpace,NewChild);
              CurrNode := CurrNode.ParentNode;
              IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
                XMLManagement.AddElement(CurrNode,'AccountNumber',
                  CarrierPackingStation."UPS Shipping Agent Account No.",DocNameSpace,NewChild);
              IF "Shipping Payment Type" IN ["Shipping Payment Type"::"Third Party",
                "Shipping Payment Type"::"Freight Collect"] THEN
                XMLManagement.AddElement(CurrNode,'AccountNumber',
                  "Third Party Ship. Account No.",DocNameSpace,NewChild);

              IF "Shipping Payment Type" IN ["Shipping Payment Type"::"Third Party",
                "Shipping Payment Type"::"Freight Collect"] THEN BEGIN
                XMLManagement.AddElement(CurrNode,'Address','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'PostalCode',
                      XMLManagement.ReturnShippingAcctPostalCode(CurrentPackage),
                      DocNameSpace,NewChild);
                    XMLManagement.AddElement(CurrNode,'CountryCode',
                      XMLManagement.ReturnShippingAcctCtryCode(CurrentPackage),DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
              END;
              CurrNode := CurrNode.ParentNode;
          END;

          //ShipmentRatingOptions
          IF "Service Indicator" = 'GFP' THEN BEGIN
            XMLManagement.AddElement(CurrNode,'ShipmentRatingOptions','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(CurrNode,'FRSShipmentIndicator','',DocNameSpace,NewChild);
            CurrNode := CurrNode.ParentNode;
          END;

          IF SP THEN BEGIN
            XMLManagement.AddElement(CurrNode,'ShipmentRatingOptions','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(CurrNode,'NegotiatedRatesIndicator','',DocNameSpace,NewChild);
            CurrNode := CurrNode.ParentNode;
          END;

          //Service
          XMLManagement.AddElement(CurrNode,'Service','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            IF "Service Indicator" = 'GFP' THEN
              XMLManagement.AddElement(CurrNode,'Code','03',DocNameSpace,NewChild)
            ELSE
              XMLManagement.AddElement(CurrNode,'Code',"Service Indicator",DocNameSpace,NewChild);
            XMLManagement.AddElement(CurrNode,'Description',"Shipping Agent Service",DocNameSpace,NewChild);
          CurrNode := CurrNode.ParentNode;

          FOR PackageLoop := 1 TO "Total Packages" DO BEGIN
            IF PackageLoop = "Total Packages" THEN BEGIN
              Package1 := CurrentPackage;
            END ELSE BEGIN
              //Filter for getting packages based on currentpackage which is the last package
              Package1.SETRANGE("Source Type","Source Type");
              Package1.SETRANGE("Source Subtype","Source Subtype");
              IF "Multi Document Package" THEN BEGIN
                Package1.SETRANGE("Source ID",'');
                Package1.SETRANGE("Multi Document No.","Multi Document No.");
                Package1.SETRANGE("Multi Document Package Split",TRUE);
              END ELSE
                Package1.SETRANGE("Source ID","Source ID");
              Package1.SETRANGE("Package No.",PackageLoop);
              IF NOT(Package1.FIND('-')) THEN
                ERROR(Package1.GETFILTERS);
            END;
            Package1.GetCalculationFields(1,'>');
            IF Package1."Multi Document Package" AND
                (Package1."Original Package No." <> '')
            THEN
              UPSOptionPage.GET(UPSOptionPage.Type::Package,Package1."Original Package No.")
            ELSE
              UPSOptionPage.GET(UPSOptionPage.Type::Package,Package1."No.");

            //Package Details
            XMLManagement.AddElement(CurrNode,'Package','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(CurrNode,'Description',
                Package1.Description+FORMAT(PackageLoop),DocNameSpace,NewChild);

              //Packaging Type
              XMLManagement.AddElement(CurrNode,'Packaging','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(CurrNode,'Code',
                  XMLManagement.FormatPackagingType(UPSOptionPage),DocNameSpace,NewChild);
              CurrNode := CurrNode.ParentNode;

            //Package Weight
            Package1.TESTFIELD("Calculation Weight");
            XMLManagement.AddElement(CurrNode,'PackageWeight','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(CurrNode,'UnitOfMeasurement','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                IF Package1."Service Indicator" = '92' THEN
                  XMLManagement.AddElement(CurrNode,'Code','OZS',DocNameSpace,NewChild)
                ELSE BEGIN
                  IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::LBS THEN
                    XMLManagement.AddElement(CurrNode,'Code','LBS',DocNameSpace,NewChild)
                  ELSE
                    XMLManagement.AddElement(CurrNode,'Code','KGS',DocNameSpace,NewChild);
                END;
              CurrNode := CurrNode.ParentNode;
              IF Package1."Service Indicator" = '92' THEN
                XMLManagement.AddElement(
                  CurrNode,'Weight',XMLManagement.ConvertWeightToOzToText(Package1."Calculation Weight"),DocNameSpace,NewChild)
              ELSE
                XMLManagement.AddElement(
                  CurrNode,'Weight',XMLManagement.Decimal2Text(Package1."Calculation Weight",2),DocNameSpace,NewChild);
            CurrNode := CurrNode.ParentNode;

            //Package Dimensions
            IF UPSOptionPage."UPS Packaging Type" <> UPSOptionPage."UPS Packaging Type"::"UPS Letter" THEN BEGIN
              XMLManagement.AddElement(CurrNode,'Dimensions','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(CurrNode,'UnitOfMeasurement','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  IF ShippingSetup."Default Size Units" = ShippingSetup."Default Size Units"::"IN" THEN
                    XMLManagement.AddElement(CurrNode,'Code','IN',DocNameSpace,NewChild)
                  ELSE
                    XMLManagement.AddElement(CurrNode,'Code','CM',DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
                XMLManagement.AddElement(
                  CurrNode,'Length',XMLManagement.Integer2Text(Package1."Calculation Length"),DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'Width',XMLManagement.Integer2Text(Package1."Calculation Width"),DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'Height',XMLManagement.Integer2Text(Package1."Calculation Height"),DocNameSpace,NewChild);
              CurrNode := CurrNode.ParentNode;
            END;

            IF UPSOptionPage."Large Package" THEN
              XMLManagement.AddElement(CurrNode,'LargePackageIndicator','',DocNameSpace,NewChild);

            //Commodity
            IF "Service Indicator" = 'GFP' THEN BEGIN
              LTLFreightType.GET(Package1."LTL Freight Type");
              XMLManagement.AddElement(CurrNode,'Commodity','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                  XMLManagement.AddElement(CurrNode,'FreightClass',
                    FORMAT(LTLFreightType."Standard Freight Type"),DocNameSpace,NewChild);
              CurrNode := CurrNode.ParentNode;
              CurrNode := CurrNode.ParentNode;
            END;
          END;

          //Package Service Options - shipment
          IF "Service Indicator" <> 'GFP' THEN BEGIN
            XMLManagement.AddElement(CurrNode,'PackageServiceOptions','',DocNameSpace,NewChild);
              IF "Calculation Insured Value" <> 0 THEN BEGIN
                CurrNode := NewChild;
                XMLManagement.AddElement(CurrNode,'InsuredValue','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  IF "Currency Code" <> '' THEN
                    XMLManagement.AddElement(CurrNode,'CurrencyCode',"Currency Code",DocNameSpace,NewChild)
                  ELSE
                    XMLManagement.AddElement(CurrNode,'CurrencyCode','USD',DocNameSpace,NewChild);
                  XMLManagement.AddElement(CurrNode,'MonetaryValue',
                    XMLManagement.Decimal2Text(
                      ROUND(
                        "Calculation Insured Value",0.01),2),DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
              END;

              IF UPSOptionPage."Verbal Confirm. of Delivery" THEN BEGIN
                IF "Ship-to Contact" = '' THEN
                  UPSOptionPage.TESTFIELD("Deliver-to Attn Name");
                IF "Ship-to Phone No." = '' THEN
                  UPSOptionPage.TESTFIELD("Deliver-to Attn Phone");
                XMLManagement.AddElement(CurrNode,'VerbalConfirmation','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(CurrNode,'ContactInfo','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(
                      CurrNode,'Name',
                      XMLManagement.FormatCleanNameAddress(UPSOptionPage."Deliver-to Attn Name",35,FALSE),DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'Phone','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        XMLManagement.AddElement(
                          CurrNode,'Number',
                          XMLManagement.FixPhoneNo(UPSOptionPage."Deliver-to Attn Phone"),DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    CurrNode := CurrNode.ParentNode;
                  CurrNode := CurrNode.ParentNode;
                CurrNode := CurrNode.ParentNode;
              END;

              IF UPSOptionPage."Shipper Release" THEN BEGIN
                XMLManagement.AddElement(CurrNode,'ShipperReleaseIndicator','',DocNameSpace,NewChild);
              END;

              IF SP THEN BEGIN
                IF XMLManagement.IsNonmachineable(UPSOptionPage,
                  "Calculation Weight (LBS)","Calculation Length","Calculation Width","Calculation Height")
                THEN
                  XMLManagement.AddElement(CurrNode,'NonMachineableIndicator','',DocNameSpace,NewChild);
              END;

              IF UPSOptionPage."Additional Handling Required" THEN
                XMLManagement.AddElement(CurrNode,'AdditionalHandlingIndicator','',DocNameSpace,NewChild);
            CurrNode := CurrNode.ParentNode;
          END;

          //Shipping Service Options
          XMLManagement.AddElement(CurrNode,'ShipmentServiceOptions','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            IF UPSOptionPage."Saturday Pickup" THEN
              XMLManagement.AddElement(CurrNode,'SaturdayPickupIndicator','',DocNameSpace,NewChild);
            IF UPSOptionPage."Saturday Delivery" THEN
              XMLManagement.AddElement(CurrNode,'SaturdayDeliveryIndicator','',DocNameSpace,NewChild);
            IF UPSOptionPage."UPS Carbon Neutral" THEN
              XMLManagement.AddElement(CurrNode,'UPScarbonneutralIndicator','',DocNameSpace,NewChild);

            //International Forms
            IF (UPPERCASE("Ship-to City") IN ['APO','DPO','FPO']) AND SP
            THEN BEGIN
              PackageLine.SETRANGE("Package No.","No.");
              IF PackageLine.FIND('-') THEN BEGIN
                XMLManagement.AddElement(CurrNode,'InternationalForms','',DocNameSpace,NewChild);
                DocNameSpace := 'http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0';
                CurrNode := NewChild;
                  XMLManagement.AddElement(CurrNode,'FormType','09',DocNameSpace,NewChild);
                  XMLManagement.AddElement(CurrNode,'FormGroupIdName','CN22 Form',DocNameSpace,NewChild);
                  XMLManagement.AddElement(CurrNode,'CN22Form','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'LabelSize','1',DocNameSpace,NewChild);
                    XMLManagement.AddElement(CurrNode,'PrintsPerPage','1',DocNameSpace,NewChild);
                    XMLManagement.AddElement(CurrNode,'LabelPrintType',
                      XMLManagement.FormatFormFormat(CarrierPackingStation."UPS WS CN22 Form Type",
                      CarrierPackingStation),
                      DocNameSpace,NewChild);
                    XMLManagement.AddElement(CurrNode,'CN22Type',
                      XMLManagement.FormatCN22Type(UPSOptionPage),DocNameSpace,NewChild);
                    XMLManagement.AddElement(CurrNode,'CN22OtherDescription',
                      COPYSTR(UPSOptionPage."CN22 Contents Explanation",1,20),DocNameSpace,NewChild);

                    REPEAT
                      UseValue := PackageLine."Value (Price)";
                      IF UseValue = 0 THEN
                        UseValue := ShippingSetup."Zero Value Package Value";

                      IF UseValue = 0 THEN
                        ERROR(Text001,PackageLine."Line No.");
                           IF PackageLine."Schedule B Quantity 1" = 0 THEN
                        UseQty := PackageLine.Quantity
                      ELSE
                        UseQty := PackageLine."Schedule B Quantity 1" * PackageLine.Quantity;

                      XMLManagement.AddElement(CurrNode,'CN22Content','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        XMLManagement.AddElement(CurrNode,
                          'CN22ContentQuantity',
                          XMLManagement.ConvertDecimalToText(UseQty,0.001,'0:4'),
                          DocNameSpace,NewChild);
                        XMLManagement.AddElement(CurrNode,
                          'CN22ContentDescription',PackageLine.Description,DocNameSpace,NewChild);
                        XMLManagement.AddElement(CurrNode,'CN22ContentWeight','',DocNameSpace,NewChild);
                        CurrNode := NewChild;
                          XMLManagement.AddElement(CurrNode,'UnitOfMeasurement','',DocNameSpace,NewChild);
                          CurrNode := NewChild;
                            XMLManagement.AddElement(CurrNode,'Code','lbs',DocNameSpace,NewChild);
                            XMLManagement.AddElement(CurrNode,'Description','pounds',DocNameSpace,NewChild);
                          CurrNode := CurrNode.ParentNode;
                        XMLManagement.AddElement(CurrNode,'Weight',
                          XMLManagement.ConvertDecimalToText(PackageLine.GetWeight,0.0001,'0:4'),DocNameSpace,NewChild);
                        CurrNode := CurrNode.ParentNode;
                        XMLManagement.AddElement(CurrNode,
                          'CN22ContentTotalValue',
                          XMLManagement.ConvertDecimalToText(UseValue,0.0001,'0:4'),
                          DocNameSpace,NewChild);
                        XMLManagement.AddElement(CurrNode,
                          'CN22ContentCurrenceyCode','USD',DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    UNTIL PackageLine.NEXT = 0;
                  CurrNode := CurrNode.ParentNode;
              END;
            CurrNode := CurrNode.ParentNode;
            END;

         IF NOT SP THEN
           CurrNode := CurrNode.ParentNode;

          DocNameSpace := 'http://www.ups.com/XMLSchema/XOLTWS/Ship/v' + APIVer;

          //Surepost Shipment
          IF SP THEN BEGIN
            XMLManagement.AddElement(CurrNode,'SurePostShipment','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              Endorsement := XMLManagement.FormatEndorsement(UPSOptionPage);
              IF Endorsement <> '' THEN
                XMLManagement.AddElement(CurrNode,'USPSEndorsement',
                  Endorsement,DocNameSpace,NewChild);
              XMLManagement.AddElement(CurrNode,'SubClassification',
              XMLManagement.FormatSubclassification(UPSOptionPage),DocNameSpace,NewChild);
            CurrNode := CurrNode.ParentNode;
            CurrNode := CurrNode.ParentNode;
           CurrNode := CurrNode.ParentNode;
          END ELSE
            CurrNode := CurrNode.ParentNode;

        //Label Specification
        XMLManagement.AddElement(CurrNode,'LabelSpecification','',DocNameSpace,NewChild);
        CurrNode := NewChild;
          XMLManagement.AddElement(CurrNode,'LabelImageFormat','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            XMLManagement.AddElement(CurrNode,
              'Code',XMLManagement.FormatImageFormat(CarrierPackingStation."UPS Label Printer Type"),
              DocNameSpace,NewChild);
            XMLManagement.AddElement(CurrNode,'Description','Label',DocNameSpace,NewChild);
          CurrNode := CurrNode.ParentNode;
          XMLManagement.AddElement(CurrNode,'LabelStockSize','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            XMLManagement.AddElement(CurrNode,'Height','6',DocNameSpace,NewChild);
            XMLManagement.AddElement(CurrNode,'Width','4',DocNameSpace,NewChild);
          CurrNode := CurrNode.ParentNode;
        CurrNode := CurrNode.ParentNode;

      END;
    END;

    PROCEDURE OpenPackage@1240020007(VAR CurrentPackage@1240020000 : Record 14000701);
    BEGIN
      WITH CurrentPackage DO BEGIN
        DocNameSpace := 'http://www.ups.com/XMLSchema/XOLTWS/Void/v1.1';

        GetSetupInfo;
        UPSWSShippingAccount.GET("Shipping Agent Account No.");
        IF "Multi Document Package" AND
            ("Original Package No." <> '')
        THEN
          UPSOptionPage.GET(UPSOptionPage.Type::Package,"Original Package No.",0,0)
        ELSE
          UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.",0,0);

        //Shipment Details
        XMLManagement.AddElement(CurrNode,'VoidShipment','',DocNameSpace,NewChild);
        CurrNode := NewChild;
          XMLManagement.AddElement(CurrNode,'ShipmentIdentificationNumber',
            UPPERCASE("External Tracking No."),DocNameSpace,NewChild);
          IF "Service Indicator" <> 'GFP' THEN
          XMLManagement.AddElement(CurrNode,'TrackingNumber',
            UPPERCASE("External Tracking No."),DocNameSpace,NewChild);
        CurrNode := CurrNode.ParentNode;
      END;
    END;

    PROCEDURE OpenPostedPackage@1240020010(VAR PostedPackage@1240020000 : Record 14000704);
    BEGIN
      WITH PostedPackage DO BEGIN
        DocNameSpace := 'http://www.ups.com/XMLSchema/XOLTWS/Void/v1.1';

        GetSetupInfo;
        UPSWSShippingAccount.GET("Shipping Agent Account No.");

        //Shipment Details
        XMLManagement.AddElement(CurrNode,'VoidShipment','',DocNameSpace,NewChild);
        CurrNode := NewChild;
          XMLManagement.AddElement(CurrNode,'ShipmentIdentificationNumber',
            UPPERCASE("External Tracking No."),DocNameSpace,NewChild);

          IF "Service Indicator" <> 'GFP' THEN
            XMLManagement.AddElement(CurrNode,'TrackingNumber',
              UPPERCASE("External Tracking No."),DocNameSpace,NewChild);
        CurrNode := CurrNode.ParentNode;
      END;
    END;

    PROCEDURE TrackPackage@1240020009(CurrentPackage@1240020000 : Record 14000701;VAR XMLDOMDocument@1240020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";GiveError@1240020001 : Boolean);
    BEGIN
      WITH CurrentPackage DO BEGIN
        DocNameSpace := 'http://www.ups.com/XMLSchema/XOLTWS/Track/v2.0';

        GetSetupInfo;
        UPSWSShippingAccount.GET("Shipping Agent Account No.");
        UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.",0,0);

        XMLManagement.AddElement(CurrNode,'InquiryNumber',
          UPPERCASE("External Tracking No."),DocNameSpace,NewChild);
        XMLManagement.AddElement(CurrNode,'TrackingOption','02',DocNameSpace,NewChild);
      END;
    END;

    PROCEDURE CreateRegisterRequest@1240020002(VAR XMLDOMDocument@1240020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";GiveError@1240020000 : Boolean;VAR Value1@1240020004 : Text[16];VAR Value2@1240020005 : Text[26]);
    BEGIN
      GetSetupInfo;
      APIVer := VersionCheck('Register','');
      DocNameSpace := 'http://www.ups.com/XMLSchema/XOLTWS/Registration/v' + APIVer;

      CompanyInfo.TESTFIELD("Ship-to Name");
      CompanyInfo.TESTFIELD("Ship-to Address");
      CompanyInfo.TESTFIELD("Ship-to City");
      CompanyInfo.TESTFIELD("Ship-to Post Code");
      CompanyInfo.TESTFIELD("Ship-to County");
      CompanyInfo.TESTFIELD(CompanyInfo."Ship-to Country/Region Code");
      CompanyInfo.TESTFIELD("Phone No.");
      CompanyInfo.TESTFIELD("E-Mail");
      UPSWSSetup.TESTFIELD("Access License");

      //RegisterRequest details
        XMLManagement.AddElement(CurrNode,'Username',Value1,DocNameSpace,NewChild);
        XMLManagement.AddElement(CurrNode,'Password',Value2,DocNameSpace,NewChild);
        XMLManagement.AddElement(CurrNode,'CompanyName',CompanyInfo."Ship-to Name",DocNameSpace,NewChild);
        XMLManagement.AddElement(CurrNode,'CustomerName',CompanyInfo."Ship-to Name",DocNameSpace,NewChild);
        XMLManagement.AddElement(CurrNode,'Address','',DocNameSpace,NewChild);
        CurrNode := NewChild;
          XMLManagement.AddElement(CurrNode,'AddressLine',CompanyInfo."Ship-to Address",DocNameSpace,NewChild);
          XMLManagement.AddElement(CurrNode,'City',CompanyInfo."Ship-to City",DocNameSpace,NewChild);
          XMLManagement.AddElement(CurrNode,'StateProvinceCode',
            XMLManagement.FixState(CompanyInfo."Ship-to County"),DocNameSpace,NewChild);
          XMLManagement.AddElement(CurrNode,'PostalCode',CompanyInfo."Ship-to Post Code",DocNameSpace,NewChild);
          XMLManagement.AddElement(CurrNode,'CountryCode',CompanyInfo."Ship-to Country/Region Code",DocNameSpace,NewChild);
        CurrNode := CurrNode.ParentNode;
        XMLManagement.AddElement(CurrNode,'PhoneNumber',CompanyInfo."Phone No.",DocNameSpace,NewChild);
        XMLManagement.AddElement(CurrNode,'EmailAddress',CompanyInfo."E-Mail",DocNameSpace,NewChild);
        XMLManagement.AddElement(CurrNode,'EndUserIPAddress',UPSWSSetup."External IP Address",DocNameSpace,NewChild);
        XMLManagement.AddElement(CurrNode,'NotificationCode','00',DocNameSpace,NewChild);
        XMLManagement.AddElement(CurrNode,'DeviceIdentity','',DocNameSpace,NewChild);
        XMLManagement.AddElement(CurrNode,'SuggestUsernameIndicator','Y',DocNameSpace,NewChild);
        CurrNode := CurrNode.ParentNode;
      CurrNode := CurrNode.ParentNode;
    END;

    PROCEDURE CreateLicenseAgreementRequest@1240020006(VAR XMLDOMDocument@1240020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";BufferFileName@1240020006 : Text[250];GiveError@1240020000 : Boolean);
    VAR
      UPSWSMgmt@1240020009 : Codeunit 14000767;
      TempOutFile@1240020007 : File;
      TempOutStream@1240020008 : OutStream;
    BEGIN
      GetUPSWSSetup;

      TempOutFile.CREATE(BufferFileName);
      TempOutFile.CREATEOUTSTREAM(TempOutStream);
      TempOutStream.WRITETEXT('<AccessLicenseAgreementRequest xml:lang="en-US">');
      TempOutStream.WRITETEXT('<Request>');
      TempOutStream.WRITETEXT('<TransactionReference>');
      TempOutStream.WRITETEXT('<CustomerContext>License Agreement Request</CustomerContext>');
      TempOutStream.WRITETEXT('<XpciVersion>1.0</XpciVersion>');
      TempOutStream.WRITETEXT('</TransactionReference>');
      TempOutStream.WRITETEXT('<RequestAction>AccessLicense</RequestAction>');
      TempOutStream.WRITETEXT('<RequestOption>AllTools</RequestOption>');
      TempOutStream.WRITETEXT('</Request>');
      TempOutStream.WRITETEXT('<DeveloperLicenseNumber>' +
        UPSWSMgmt.Cipher(UPSWSSetup.RetrieveInfo(3),FALSE,FALSE) + '</DeveloperLicenseNumber>');
      TempOutStream.WRITETEXT('<AccessLicenseProfile>');
      TempOutStream.WRITETEXT('<CountryCode>US</CountryCode>');
      TempOutStream.WRITETEXT('<LanguageCode>EN</LanguageCode>');
      TempOutStream.WRITETEXT('</AccessLicenseProfile>');
      TempOutStream.WRITETEXT('</AccessLicenseAgreementRequest>');
      TempOutFile.CLOSE;
    END;

    PROCEDURE CreateLicenseRequest@1240020004(VAR XMLDOMDocument@1240020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";BufferFilename@1240020006 : Text[250];GiveError@1240020000 : Boolean);
    VAR
      UPSInfo@1240020003 : Record 14000778;
      UPSWSMgmt@1240020011 : Codeunit 14000767;
      TempOutFile@1240020009 : File;
      AgreementInStream@1240020004 : InStream;
      TempOutStream@1240020008 : OutStream;
      LicenseAgreement@1240020002 : BigText;
      AgreementSubText@1240020005 : Text[45];
    BEGIN
      GetSetupInfo;

      IF UPSInfo.GET THEN BEGIN
        UPSInfo.CALCFIELDS("License Agreement");
        UPSInfo."License Agreement".CREATEINSTREAM(AgreementInStream);
        LicenseAgreement.READ(AgreementInStream);
        LicenseAgreement.GETSUBTEXT(AgreementSubText,1,45);
      END;

      CompanyInfo.TESTFIELD("Ship-to Name");
      CompanyInfo.TESTFIELD("Ship-to Address");
      CompanyInfo.TESTFIELD("Ship-to City");
      CompanyInfo.TESTFIELD("Ship-to Post Code");
      CompanyInfo.TESTFIELD("Ship-to County");
      CompanyInfo.TESTFIELD("Ship-to Country/Region Code");
      CompanyInfo.TESTFIELD("Ship-to Contact");
      CompanyInfo.TESTFIELD("Phone No.");
      CompanyInfo.TESTFIELD("E-Mail");

      TempOutFile.CREATE(BufferFilename);
      TempOutFile.CREATEOUTSTREAM(TempOutStream);
      TempOutStream.WRITETEXT('<AccessLicenseRequest xml:lang="en-US">');
        TempOutStream.WRITETEXT('<Request>');
          TempOutStream.WRITETEXT('<RequestAction>AccessLicense</RequestAction>');
          TempOutStream.WRITETEXT('<RequestOption>AllTools</RequestOption>');
        TempOutStream.WRITETEXT('</Request>');
        TempOutStream.WRITETEXT('<CompanyName>' +
          XMLManagement.FormatCleanNameAddress(CompanyInfo."Ship-to Name",35,FALSE) + '</CompanyName>');
        TempOutStream.WRITETEXT('<Address>');
          TempOutStream.WRITETEXT('<AddressLine1>' + CompanyInfo."Ship-to Address" + '</AddressLine1>');
          TempOutStream.WRITETEXT('<City>' + CompanyInfo."Ship-to City" + '</City>');
          TempOutStream.WRITETEXT('<StateProvinceCode>' +
            XMLManagement.FixState(CompanyInfo."Ship-to County") + '</StateProvinceCode>');
          TempOutStream.WRITETEXT('<PostalCode>' + CompanyInfo."Ship-to Post Code" + '</PostalCode>');
          TempOutStream.WRITETEXT('<CountryCode>' + CompanyInfo."Ship-to Country/Region Code" + '</CountryCode>');
        TempOutStream.WRITETEXT('</Address>');
        TempOutStream.WRITETEXT('<PrimaryContact>');
          TempOutStream.WRITETEXT('<Name>' + CompanyInfo."Ship-to Contact" + '</Name>');
          TempOutStream.WRITETEXT('<Title>Employee</Title>');
          TempOutStream.WRITETEXT('<EMailAddress>' + CompanyInfo."E-Mail" + '</EMailAddress>');
          TempOutStream.WRITETEXT('<PhoneNumber>' +
            UPSWSMgmt.FixPhoneNo(CompanyInfo."Phone No.") + '</PhoneNumber>');
        TempOutStream.WRITETEXT('</PrimaryContact>');
        TempOutStream.WRITETEXT('<CompanyURL>' + CompanyInfo."Home Page" + '</CompanyURL>');
        TempOutStream.WRITETEXT('<DeveloperLicenseNumber>' +
           UPSWSMgmt.Cipher(UPSWSSetup.RetrieveInfo(3),FALSE,FALSE) + '</DeveloperLicenseNumber>');
        TempOutStream.WRITETEXT('<AccessLicenseProfile>');
          TempOutStream.WRITETEXT('<CountryCode>US</CountryCode>');
          TempOutStream.WRITETEXT('<LanguageCode>EN</LanguageCode>');
          TempOutStream.WRITETEXT('<AccessLicenseText>');
          TempOutStream.WRITETEXT('<![CDATA[');
          LicenseAgreement.WRITE(TempOutStream);
          TempOutStream.WRITETEXT(']]>');
          TempOutStream.WRITETEXT('</AccessLicenseText>');
        TempOutStream.WRITETEXT('</AccessLicenseProfile>');
        TempOutStream.WRITETEXT('<OnLineTool>');
          TempOutStream.WRITETEXT('<ToolID>ShipWSXML</ToolID>');
          TempOutStream.WRITETEXT('<ToolVersion>1.0</ToolVersion>');
        TempOutStream.WRITETEXT('</OnLineTool>');
        TempOutStream.WRITETEXT('<ClientSoftwareProfile>');
          TempOutStream.WRITETEXT('<SoftwareInstaller>Lanham Partner</SoftwareInstaller>');
          TempOutStream.WRITETEXT('<SoftwareProductName>E-Ship</SoftwareProductName>');
          TempOutStream.WRITETEXT('<SoftwareProvider>Lanham Associates</SoftwareProvider>');
          TempOutStream.WRITETEXT('<SoftwareVersionNumber>' + UPSWSMgmt.GetVersion + '</SoftwareVersionNumber>');
        TempOutStream.WRITETEXT('</ClientSoftwareProfile>');
      TempOutStream.WRITETEXT('</AccessLicenseRequest>');
      TempOutFile.CLOSE;
    END;

    PROCEDURE AddAccountRequest@1240020008(VAR XMLDOMDocument@1240020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";GiveError@1240020000 : Boolean;VAR UPSWSShippingAccount@1240020004 : Record 14000779);
    VAR
      UPSlinkSetup@1240020003 : Record 14050001;
      UPSWSMgmt@1240020002 : Codeunit 14000767;
    BEGIN
      GetSetupInfo;
      DocNameSpace := 'http://www.ups.com/XMLSchema/XOLTWS/Registration/v1.0';
      IF UPSlinkSetup.GET(UPSWSShippingAccount."Account No.") THEN;

      CompanyInfo.TESTFIELD("Ship-to Name");
      CompanyInfo.TESTFIELD("Ship-to Address");
      CompanyInfo.TESTFIELD("Ship-to City");
      CompanyInfo.TESTFIELD("Ship-to Post Code");
      CompanyInfo.TESTFIELD("Ship-to County");
      CompanyInfo.TESTFIELD(CompanyInfo."Ship-to Country/Region Code");
      CompanyInfo.TESTFIELD("Phone No.");
      CompanyInfo.TESTFIELD("E-Mail");
      UPSWSSetup.TESTFIELD("Access License");

      WITH UPSWSShippingAccount DO BEGIN
        //ManageAccountRequest details
        XMLManagement.AddElement(CurrNode,'ShipperAccount','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            XMLManagement.AddElement(CurrNode,'AccountNumber',"Account No.",DocNameSpace,NewChild);
            XMLManagement.AddElement(CurrNode,'PostalCode',"Postal Code",DocNameSpace,NewChild);
            XMLManagement.AddElement(CurrNode,'CountryCode','US',DocNameSpace,NewChild);
            IF "Invoice No." <> '' THEN BEGIN
              TESTFIELD("Invoice Date");
              TESTFIELD("Currency Code");
              XMLManagement.AddElement(CurrNode,'InvoiceInfo','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                XMLManagement.AddElement(CurrNode,'InvoiceNumber',"Invoice No.",DocNameSpace,NewChild);
                XMLManagement.AddElement(CurrNode,'InvoiceDate',
                  UPSWSMgmt.FormatDateYYYYMMDD("Invoice Date"),DocNameSpace,NewChild);
                XMLManagement.AddElement(CurrNode,'CurrencyCode',"Currency Code",DocNameSpace,NewChild);
                XMLManagement.AddElement(CurrNode,'InvoiceAmount',
                  UPSWSMgmt.Decimal2Text("Invoice Amount",2),DocNameSpace,NewChild);
                IF UPSWSShippingAccount."Control ID" <> '' THEN
                  XMLManagement.AddElement(CurrNode,'ControlID',"Control ID",DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
            END;
            CurrNode := CurrNode.ParentNode;
          CurrNode := CurrNode.ParentNode;
        CurrNode := CurrNode.ParentNode;
      END;
    END;

    PROCEDURE CreateSOAPRequest@1240030026(VAR XMLRequest@1240030000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";RequestOption@1240030003 : Text[64];BufferFileName@1240030002 : Text[1024]);
    VAR
      UPSWSMgmt@1240020000 : Codeunit 14000767;
      XMLProcessingInstr@1240020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlProcessingInstruction";
    BEGIN
      GetSetupInfo;

      DocNameSpace := 'http://www.ups.com/XMLSchema/XOLTWS/UPSS/v1.0';
      XMLProcessingInstr := XMLRequest.CreateProcessingInstruction('xml','version="1.0" encoding="UTF-8"');
      CurrNode := XMLRequest.AppendChild(XMLProcessingInstr);
      CurrNode := XMLRequest.CreateElement('soap','Envelope','http://schemas.xmlsoap.org/soap/envelope/');
      NewChild := XMLRequest.AppendChild(CurrNode);
      CurrNode := NewChild;

      XMLManagement.AddAttribute(CurrNode,'xmlns:soap','http://schemas.xmlsoap.org/soap/envelope/',TRUE);
      XMLManagement.AddAttribute(CurrNode,'xmlns:xsd','http://www.w3.org/2001/XMLschema',TRUE);
      XMLManagement.AddAttribute(CurrNode,'xmlns:xsi','http://www.w3.org/2001/XMLschema-instance',TRUE);
      XMLManagement.AddAttribute(CurrNode,'xmlns:upss',DocNameSpace,TRUE);

      XMLManagement.AddElement(CurrNode,'soap:Header','','http://schemas.xmlsoap.org/soap/envelope/',NewChild);
      CurrNode := NewChild;
        XMLManagement.AddElement(CurrNode,'UPSSecurity','',DocNameSpace,NewChild);
        CurrNode := NewChild;
          XMLManagement.AddElement(CurrNode,'UsernameToken','',DocNameSpace,NewChild);
          IF RequestOption IN ['RegisterRequest'] THEN BEGIN
            CurrNode := NewChild;
              XMLManagement.AddElement(CurrNode,'Username',
                UPSWSMgmt.Cipher(UPSWSSetup.RetrieveInfo(1),FALSE,FALSE),DocNameSpace,NewChild);
              XMLManagement.AddElement(CurrNode,'Password',
                UPSWSMgmt.Cipher(UPSWSSetup.RetrieveInfo(2),FALSE,FALSE),DocNameSpace,NewChild);
            CurrNode := CurrNode.ParentNode;
          END ELSE BEGIN
            CurrNode := NewChild;
              XMLManagement.AddElement(CurrNode,'Username',
                UPSWSMgmt.Cipher(UPSWSSetup.Username,FALSE,FALSE),DocNameSpace,NewChild);
              XMLManagement.AddElement(CurrNode,'Password',
                UPSWSMgmt.Cipher(UPSWSSetup.Password,FALSE,FALSE),DocNameSpace,NewChild);
            CurrNode := CurrNode.ParentNode;
          END;
          XMLManagement.AddElement(CurrNode,'ServiceAccessToken','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            XMLManagement.AddElement(CurrNode,'AccessLicenseNumber',
              UPSWSMgmt.Cipher(UPSWSSetup."Access License",FALSE,FALSE),DocNameSpace,NewChild);
          CurrNode := CurrNode.ParentNode;
        CurrNode := CurrNode.ParentNode;
      CurrNode := CurrNode.ParentNode;

      XMLManagement.AddElement(CurrNode,'soap:Body','','http://schemas.xmlsoap.org/soap/envelope/',NewChild);
      CurrNode := NewChild;
    END;

    PROCEDURE RateShop@1240020013(RateShopHeader@1240020000 : Record 14000741;VAR RateShopLine@1240020001 : Record 14000742;CurrentShippingAgentService@1240020002 : Record 14000708;VAR XMLDOMDocument@1240020003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";GiveError@1240020004 : Boolean);
    VAR
      Weight@1240020009 : Decimal;
      Length@1240020006 : Decimal;
      Width@1240020007 : Decimal;
      Height@1240020008 : Decimal;
    BEGIN
      WITH RateShopHeader DO BEGIN
        DocNameSpace := 'http://www.ups.com/XMLSchema/XOLTWS/Rate/v' + APIVer;

        GetSetupInfo;
        UPSWSShippingAccount.GET(CarrierPackingStation."UPS Shipping Agent Account No.");

        IF NOT UPSOptionPage.GET(UPSOptionPage.Type::"Rate Shop","No.",0,0) THEN
          IF NOT UPSOptionPage.GET(UPSOptionPage.Type::Package,"Package No.",0,0) THEN
            IF NOT
               UPSOptionPage.GET(
               UPSOptionPage.Type::Document,"Source ID","Source Type","Source Subtype")
            THEN
              IF NOT
                 UPSOptionPage.GET(
                   UPSOptionPage.Type::"Bill of Lading","Bill of Lading No.",0,0)
              THEN BEGIN
                UPSOptionPage.RESET;
                UPSOptionPage.SETCURRENTKEY(
                  Type,"Shipping Agent Code","Shipping Agent Service","World Wide Service");
                UPSOptionPage.SETRANGE(Type,UPSOptionPage.Type::Setup);
                UPSOptionPage.SETRANGE(
                  "Shipping Agent Code",CurrentShippingAgentService."Shipping Agent Code");
                UPSOptionPage.SETRANGE("Shipping Agent Service",CurrentShippingAgentService.Code);
                UPSOptionPage.SETRANGE(
                  "World Wide Service",CurrentShippingAgentService."World Wide Service");
                IF NOT UPSOptionPage.FIND('-') THEN
                  UPSOptionPage.INIT;
              END;

        IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::KGS THEN
          "Calculation Weight" :=
            ROUND(
              ShippingSetup.PoundToKilo("Calculation Weight (LBS)" / "No. of Packages"),0.1,'>')
        ELSE
          "Calculation Weight" := "Calculation Weight (LBS)";

        Weight := ROUND(GetWeight,1,'>');
        Height := ROUND(GetHeight,1,'>');
        Width := ROUND(GetWidth,1,'>');
        Length := ROUND(GetLength,1,'>');

        XMLManagement.AddElement(CurrNode,'CustomerClassification','',DocNameSpace,NewChild);
        CurrNode := NewChild;
          XMLManagement.AddElement(CurrNode,'Code','00',DocNameSpace,NewChild);
          XMLManagement.AddElement(CurrNode,'Description','Rates Associated with Shipper Number',DocNameSpace,NewChild);
        CurrNode := CurrNode.ParentNode;

        //Shipper Details
        XMLManagement.AddElement(CurrNode,'Shipment','',DocNameSpace,NewChild);
        CurrNode := NewChild;
          XMLManagement.AddElement(CurrNode,'Shipper','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            XMLManagement.AddElement(
              CurrNode,'Name',
              XMLManagement.FormatCleanNameAddress(PackingStation."Ship-from Company",35,FALSE),DocNameSpace,NewChild);
            XMLManagement.AddElement(
              CurrNode,'ShipperNumber',CarrierPackingStation."UPS Shipping Agent Account No.",DocNameSpace,NewChild);
            XMLManagement.AddElement(
              CurrNode,'Address','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(
                CurrNode,'AddressLine',
                XMLManagement.FormatCleanNameAddress(PackingStation."Ship-from Address",35,FALSE),DocNameSpace,NewChild);
              IF PackingStation."Ship-from Address2" <> '' THEN
                XMLManagement.AddElement(
                  CurrNode,'AddressLine',
                  XMLManagement.FormatCleanNameAddress(PackingStation."Ship-from Address2",35,FALSE),DocNameSpace,NewChild);

              XMLManagement.AddElement(
                CurrNode,'City',
                XMLManagement.FormatCleanNameAddress(PackingStation."Ship-from City",30,FALSE),DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'StateProvinceCode',
                XMLManagement.FixState(PackingStation."Ship-from State"),DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'PostalCode',
                XMLManagement.FixZIPCode(PackingStation."Ship-from ZIP Code"),DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'CountryCode','US',DocNameSpace,NewChild);
            CurrNode := CurrNode.ParentNode;
          CurrNode := CurrNode.ParentNode;

          //Recipient Details
          XMLManagement.AddElement(CurrNode,'ShipTo','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            XMLManagement.AddElement(
              CurrNode,'Name',
              XMLManagement.FormatCleanNameAddress("Ship-to Name",35,FALSE),DocNameSpace,NewChild);
            XMLManagement.AddElement(
              CurrNode,'Address','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(
                CurrNode,'AddressLine',
                XMLManagement.FormatCleanNameAddress("Ship-to Address",35,FALSE),DocNameSpace,NewChild);
              IF "Ship-to Address 2" <> '' THEN
                XMLManagement.AddElement(
                  CurrNode,'AddressLine',
                  XMLManagement.FormatCleanNameAddress("Ship-to Address 2",35,FALSE),DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'City',
                XMLManagement.FormatCleanNameAddress("Ship-to City",30,FALSE),DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'StateProvinceCode',
                XMLManagement.FixState("Ship-to State"),DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'PostalCode',
                XMLManagement.FixZIPCode("Ship-to ZIP Code"),DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'CountryCode',
                XMLManagement.ReturnISOCountryCode("Ship-to Country Code"),DocNameSpace,NewChild);
              IF "Residential Delivery" THEN
                XMLManagement.AddElement(
                  CurrNode,'ResidentialAddressIndicator','',DocNameSpace,NewChild);
            CurrNode := CurrNode.ParentNode;
          CurrNode := CurrNode.ParentNode;

          //Ship From Location Details
          XMLManagement.AddElement(CurrNode,'ShipFrom','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            XMLManagement.AddElement(
              CurrNode,'Name',
              XMLManagement.FormatCleanNameAddress(PackingStation."Ship-from Company",35,FALSE),DocNameSpace,NewChild);
            XMLManagement.AddElement(
              CurrNode,'Address','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(
                CurrNode,'AddressLine',
                XMLManagement.FormatCleanNameAddress(PackingStation."Ship-from Address",35,FALSE),DocNameSpace,NewChild);
              IF PackingStation."Ship-from Address2" <> '' THEN
                XMLManagement.AddElement(
                  CurrNode,'AddressLine',
                  XMLManagement.FormatCleanNameAddress(PackingStation."Ship-from Address2",35,FALSE),DocNameSpace,NewChild);

              XMLManagement.AddElement(
                CurrNode,'City',
                XMLManagement.FormatCleanNameAddress(PackingStation."Ship-from City",30,FALSE),DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'StateProvinceCode',
                XMLManagement.FixState(PackingStation."Ship-from State"),DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'PostalCode',
                XMLManagement.FixZIPCode(PackingStation."Ship-from ZIP Code"),DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'CountryCode','US',DocNameSpace,NewChild);
            CurrNode := CurrNode.ParentNode;
          CurrNode := CurrNode.ParentNode;

          XMLManagement.AddElement(CurrNode,'Service','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            XMLManagement.AddElement(
              CurrNode,'Code',CurrentShippingAgentService."Service Indicator",DocNameSpace,NewChild);
            XMLManagement.AddElement(
              CurrNode,'Description',COPYSTR(CurrentShippingAgentService.Description,1,35),DocNameSpace,NewChild);
          CurrNode := CurrNode.ParentNode;

          //Package Details
          XMLManagement.AddElement(CurrNode,'Package','',DocNameSpace,NewChild);
          CurrNode := NewChild;

            //Packaging Type
            XMLManagement.AddElement(CurrNode,'PackagingType','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(CurrNode,'Code',
                XMLManagement.FormatPackagingType(UPSOptionPage),DocNameSpace,NewChild);
            CurrNode := CurrNode.ParentNode;

            IF UPSOptionPage."UPS Packaging Type" <> UPSOptionPage."UPS Packaging Type"::"UPS Letter" THEN
            BEGIN
              //Package Dimensions
              XMLManagement.AddElement(CurrNode,'Dimensions','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(CurrNode,'UnitOfMeasurement','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  IF ShippingSetup."Default Size Units" = ShippingSetup."Default Size Units"::"IN"
                  THEN
                    XMLManagement.AddElement(CurrNode,'Code','IN',DocNameSpace,NewChild)
                  ELSE
                    XMLManagement.AddElement(CurrNode,'Code','CM',DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
                XMLManagement.AddElement(
                  CurrNode,'Length',XMLManagement.Decimal2Text(Length,0),DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'Width',XMLManagement.Decimal2Text(Width,0),DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'Height',XMLManagement.Decimal2Text(Height,0),DocNameSpace,NewChild);
              CurrNode := CurrNode.ParentNode;
            END;

            //Package Weight
            TESTFIELD("Calculation Weight");
            XMLManagement.AddElement(CurrNode,'PackageWeight','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(CurrNode,'UnitOfMeasurement','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                IF CurrentShippingAgentService."Service Indicator" = '92' THEN
                  XMLManagement.AddElement(CurrNode,'Code','OZS',DocNameSpace,NewChild)
                ELSE BEGIN
                  IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::LBS THEN
                    XMLManagement.AddElement(CurrNode,'Code','LBS',DocNameSpace,NewChild)
                  ELSE
                    XMLManagement.AddElement(CurrNode,'Code','KGS',DocNameSpace,NewChild);
                END;
              CurrNode := CurrNode.ParentNode;
              IF CurrentShippingAgentService."Service Indicator" = '92' THEN
                XMLManagement.AddElement(
                  CurrNode,'Weight',XMLManagement.ConvertWeightToOzToText("Calculation Weight"),DocNameSpace,NewChild)
              ELSE
                XMLManagement.AddElement(
                  CurrNode,'Weight',XMLManagement.Decimal2Text("Calculation Weight",2),DocNameSpace,NewChild);
            CurrNode := CurrNode.ParentNode;

            IF UPSOptionPage."Large Package" THEN
              XMLManagement.AddElement(CurrNode,'LargePackageIndicator','',DocNameSpace,NewChild);

            //Package Service Options
            XMLManagement.AddElement(CurrNode,'PackageServiceOptions','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              IF COD THEN BEGIN
                XMLManagement.AddElement(CurrNode,'COD','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  IF "COD Cashiers Check" THEN
                    XMLManagement.AddElement(CurrNode,'CODFundsCode','0',DocNameSpace,NewChild);
                  XMLManagement.AddElement(CurrNode,'CODAmount','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'CurrencyCode','USD',DocNameSpace,NewChild);

                    XMLManagement.AddElement(
                      CurrNode,'MonetaryValue',XMLManagement.Decimal2Text("COD Amount",2),DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
                CurrNode := CurrNode.ParentNode;
              END;

              IF UPSOptionPage."Delivery Confirmation Type" <>
                UPSOptionPage."Delivery Confirmation Type"::None
                THEN BEGIN
                XMLManagement.AddElement(CurrNode,'DeliveryConfirmation','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                CASE UPSOptionPage."Delivery Confirmation Type" OF
                  UPSOptionPage."Delivery Confirmation Type"::"Name Date":
                  BEGIN
                    XMLManagement.AddElement(CurrNode,'DCISType','1',DocNameSpace,NewChild);
                  END;
                  UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                  BEGIN
                    XMLManagement.AddElement(CurrNode,'DCISType','2',DocNameSpace,NewChild);
                  END;
                  UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                  BEGIN
                    XMLManagement.AddElement(CurrNode,'DCISType','3',DocNameSpace,NewChild);
                  END;
                END;
                CurrNode := CurrNode.ParentNode;
              END;

              IF UPSOptionPage."Verbal Confirm. of Delivery" THEN
                XMLManagement.AddElement(CurrNode,'VerbalConfirmationIndicator','',DocNameSpace,NewChild);

              IF XMLManagement.IsNonmachineable(UPSOptionPage,Weight,Length,Width,Height) THEN
                XMLManagement.AddElement(CurrNode,'NonMachineableIndicator','',DocNameSpace,NewChild);
            CurrNode := CurrNode.ParentNode;
            IF UPSOptionPage."Additional Handling Required" THEN
              XMLManagement.AddElement(CurrNode,'AdditionalHandlingIndicator','',DocNameSpace,NewChild);
          CurrNode := CurrNode.ParentNode;

          //Shipping Service Options
          XMLManagement.AddElement(CurrNode,'ShipmentServiceOptions','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            IF UPSOptionPage."Saturday Pickup" THEN
              XMLManagement.AddElement(CurrNode,'SaturdayPickupIndicator','',DocNameSpace,NewChild);

            IF UPSOptionPage."Saturday Delivery" THEN
              XMLManagement.AddElement(CurrNode,'SaturdayDeliveryIndicator','',DocNameSpace,NewChild);

            IF UPSOptionPage."Delivery Confirmation Type" <>
              UPSOptionPage."Delivery Confirmation Type"::None
            THEN BEGIN
              XMLManagement.AddElement(CurrNode,'DeliveryConfirmation','',DocNameSpace,NewChild);
              CurrNode := NewChild;
              CASE UPSOptionPage."Delivery Confirmation Type" OF
                UPSOptionPage."Delivery Confirmation Type"::"Name Date":
                BEGIN
                  XMLManagement.AddElement(CurrNode,'DCISType','1',DocNameSpace,NewChild);
                END;
                UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                BEGIN
                  XMLManagement.AddElement(CurrNode,'DCISType','2',DocNameSpace,NewChild);
                END;
                UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                BEGIN
                  XMLManagement.AddElement(CurrNode,'DCISType','3',DocNameSpace,NewChild);
                END;
              END;
              CurrNode := CurrNode.ParentNode;
            END;

            IF UPSOptionPage."UPS Carbon Neutral" THEN
              XMLManagement.AddElement(CurrNode,'UPScarbonneutralIndicator','',DocNameSpace,NewChild);

          CurrNode := CurrNode.ParentNode;

          XMLManagement.AddElement(CurrNode,'ShipmentRatingOptions','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            XMLManagement.AddElement(CurrNode,'NegotiatedRatesIndicator','',DocNameSpace,NewChild);
          CurrNode := CurrNode.ParentNode;
          XMLManagement.AddElement(CurrNode,'RatingMethodRequestedIndicator','',DocNameSpace,NewChild);
        CurrNode := CurrNode.ParentNode;
      CurrNode := CurrNode.ParentNode;
      END;
    END;

    LOCAL PROCEDURE GetPackingStation@51();
    BEGIN
      IF PackingStation.Code = '' THEN
        PackingStation.GetPackingStation;
    END;

    LOCAL PROCEDURE GetShippingSetup@50();
    BEGIN
      IF NOT ShippingSetupRetrieved THEN BEGIN
        ShippingSetup.GET;
        ShippingSetupRetrieved := TRUE;
      END;
    END;

    LOCAL PROCEDURE GetShippingAgent@30(ShippingAgentCode@1000000000 : Code[10]);
    BEGIN
      IF (ShippingAgent.Code <> ShippingAgentCode) OR
         (ShippingAgentCode = '')
      THEN
        ShippingAgent.GET(ShippingAgentCode);
    END;

    LOCAL PROCEDURE GetShippingAgentService@14(ShippingAgentCode@1000000000 : Code[10];ShippingAgentServiceCode@1000000001 : Code[30];WorldWideService@1000000002 : Boolean);
    BEGIN
      IF (ShippingAgentService.Code <> ShippingAgentCode) OR
         (ShippingAgentService."World Wide Service" <> WorldWideService) OR
         (ShippingAgentService.Code <> ShippingAgentServiceCode) OR
         (ShippingAgentServiceCode = '')
      THEN
        ShippingAgentService.GET(ShippingAgentCode,ShippingAgentServiceCode,WorldWideService);
    END;

    LOCAL PROCEDURE GetShippingAgentAccount@22(ShippingAgentAccountNo@1000000000 : Code[10]);
    BEGIN
      IF (ShippingAgentAccount."Account No." <> ShippingAgentAccountNo) OR
         (ShippingAgentAccountNo = '')
      THEN
        ShippingAgentAccount.GET(ShippingAgentAccountNo);
    END;

    PROCEDURE GetSetupInfo@1240020001();
    BEGIN
      GetShippingSetup;
      GetPackingStation;
      CarrierPackingStation.GetPackingStation(PackingStation);
      GetUPSWSSetup;
      CompanyInfo.GET;
    END;

    PROCEDURE GetUPSWSSetup@1240020005();
    BEGIN
      IF NOT UPSWSSetupRetrieved THEN BEGIN
        IF UPSWSSetup.GET THEN
          UPSWSSetupRetrieved := TRUE;
      END;
    END;

    LOCAL PROCEDURE GetUPSlinkSetup@1240030001();
    BEGIN
      IF NOT UPSlinkSetupRetrieved THEN BEGIN
        UPSlinkSetup.GET;
        UPSlinkSetupRetrieved := TRUE;
      END;
    END;

    PROCEDURE GetDocNameSpace@1240020000(RequestType@1240030001 : Text[64];RequestOption@1240030000 : Text[64]) DocNameSpace : Text[30];
    BEGIN
      CASE RequestType OF
        'RateService':
          DocNameSpace := 'rate';
        'Shipping':
          DocNameSpace := 'ship';
        'Error':
          DocNameSpace := 'err';
        'Register':
          DocNameSpace := 'reg';
      END;
    END;

    PROCEDURE GetNameSpaceURI@1240020012(RequestType@1240020001 : Text[64];RequestOption@1240020000 : Text[64]) NameSpaceURI : Text[100];
    BEGIN
      CASE RequestType OF
        'Error':
          NameSpaceURI := 'http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1';
        'Register':
          NameSpaceURI := 'http://www.ups.com/XMLSchema/XOLTWS/Registration/v1.0';
        'Shipping':
          NameSpaceURI := 'http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0';
        'Common':
          NameSpaceURI := 'http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0';
        'Void':
          NameSpaceURI := 'http://www.ups.com/XMLSchema/XOLTWS/Void/v1.1';
        'RateService':
          NameSpaceURI := 'http://www.ups.com/XMLSchema/XOLTWS/Rate/v1.1';
      END;
    END;

    EVENT XMLDocOut@1240030004::NodeInserting@93(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XMLDocOut@1240030004::NodeInserted@94(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XMLDocOut@1240030004::NodeRemoving@95(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XMLDocOut@1240030004::NodeRemoved@96(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XMLDocOut@1240030004::NodeChanging@97(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XMLDocOut@1240030004::NodeChanged@98(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

