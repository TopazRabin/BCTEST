OBJECT Codeunit 50012 Activexpert Scale Mgt
{
  OBJECT-PROPERTIES
  {
    Date=07/01/20;
    Time=12:00:00 AM;
    Modified=Yes;
    Version List=TPZ000.00.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            x@1000000000 : Record 14000746;
          BEGIN
            x.GET('TOLEDO');
            MESSAGE('%1', GetScaleWeightActivexpert(x));
          END;

  }
  CODE
  {
    VAR
      Text001@1000000009 : TextConst 'ENU=Printing Label to %1';
      Text002@1000000008 : TextConst 'ENU=Communicating with Scale %1';
      Text003@1000000007 : TextConst 'ENU=Enter the Label Printer in Carrier Packing Station or Packing Station.';
      Text004@1000000006 : TextConst 'ENU=Registering USB Scale';
      Text014@1000000005 : TextConst 'ENU=Install the "Dot NET Automation Print and Scale" external component on this computer. Or contact your Lanham Partner.';
      Text015@1000000004 : TextConst 'ENU=There are multiple printers with same printer name, %1. Please contact your Lanham Partner.';
      Text016@1000000003 : TextConst 'ENU=Unable to access the ''Windows Script Host Object Model''.WshNetwork object. Please contact your Lanham Partner.';
      Text017@1000000002 : TextConst 'ENU=Label printer, %1, is not found. Make sure the printer is installed and check the printer name. Or contact your Lanham Partner.';
      Text018@1000000001 : TextConst 'ENU=Label Printer cannot be %1 when %2 %3 is set to %4.';
      Text019@1000000000 : TextConst 'ENU=Change the Label Printer, %1,that is setup in Carrier Packing Station or Packing Station to a printer name. This label is an image.';
      Scale@1000000010 : Automation "{B24D8715-8901-4293-9938-AC3FBFBC9E8A} 1.0:{9366AAD2-50F4-4CFE-9613-6AC3406ED46B}:Unknown Automation Server.Unknown Class";
      ScaleCreated@1000000011 : Boolean;

    PROCEDURE TestScaleCreated@1000000003();
    BEGIN
      IF ScaleCreated THEN
        EXIT;

      ScaleCreated := TRUE;
      IF NOT(CREATE(Scale,FALSE,TRUE)) THEN
        ERROR(Text014);
    END;

    PROCEDURE GetScaleWeightActivexpert@1240030009(ScaleInterface@1240030000 : Record 14000746) : Text[250];
    VAR
      Window@1240030001 : Dialog;
      Baudrate@1000000000 : Integer;
      ReceivedString@1000000001 : Text[250];
      StopBits@1000000002 : Integer;
      DataBits@1000000003 : Integer;
      Parity@1000000004 : Integer;
    BEGIN
      IF GUIALLOWED THEN
        Window.OPEN(STRSUBSTNO(Text002,ScaleInterface.Code));

      // TestScaleCreated;
      // <VACHOTFIX>
      IF NOT ISCLEAR(Scale) THEN
        CLEAR(Scale);
      CREATE(Scale,TRUE,TRUE);
      // </VACHOTFIX>
      Scale.LicenseKey := 'D76F3-0E112-63F95';
      Scale.Device := 'COM'+FORMAT(ScaleInterface."Scale Comm. Port");
      EVALUATE(Baudrate, ScaleInterface."Scale Baud Rate");
      Scale.BaudRate := Baudrate;
      EVALUATE(StopBits, ScaleInterface."Scale Stop Bits");
      Scale.StopBits := StopBits;
      EVALUATE(DataBits, ScaleInterface."Scale Data Bits");
      Scale.DataBits := DataBits;
      Scale.ComTimeout := 10000;
      //if userid = 'TOPAZ\EST30' THEN
      //message('timeout');
      CASE ScaleInterface."Scale Parity" OF
        'E' : Scale.Parity := Scale.asPARITY_EVEN;
        'O' : Scale.Parity := Scale.asPARITY_ODD;
        ELSE
          ERROR('Parity not supported. Contact NAV team');
      END;
      //Scale.Parity
      Scale.HardwareFlowControl := Scale.asFLOWCONTROL_DISABLE;
      Scale.Open;
      IF Scale.LastError <> 0 THEN
        MESSAGE('error code: %1', Scale.LastError);

      Scale.WriteString(ScaleInterface."Scale Weigh String");
      ReceivedString := Scale.ReadString;
      //if userid = 'TOPAZ\EST30' THEN
      //  MESSAGE(ReceivedString);

      Scale.Close;

      // <VACHOTFIX>
      CLEAR(Scale);
      // </VACHOTFIX>

      EXIT(ReceivedString);

      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    PROCEDURE GetScaleWeight@2(ScaleInterface@1000000000 : Record 14000746;VAR ScaleWeight@1000000001 : Decimal;Quiet@1000000002 : Boolean) : Boolean;
    VAR
      ReceiveString@1000000003 : Text[250];
      OuncesOK@1000000006 : Boolean;
      PoundsOK@1000000007 : Boolean;
      UseScaleWeight@1000000008 : Boolean;
      WeightPounds@1000000009 : Decimal;
      WeightOunces@1000000010 : Decimal;
      Measures@1000000011 : Integer;
      DecimalPointPos@1000000004 : Integer;
    BEGIN
      WITH ScaleInterface DO BEGIN
        CLEAR(ReceiveString);
        UseScaleWeight := FALSE;

        TESTFIELD("Scale Comm. Port");
        TESTFIELD("Scale Baud Rate");
        TESTFIELD("Scale Parity");
        TESTFIELD("Scale Data Bits");
        TESTFIELD("Scale Stop Bits");
        TESTFIELD("Scale Time Out");

        TESTFIELD("Scale Lbs. Beg. Pos.");
        TESTFIELD("Scale Lbs. Length");
        TESTFIELD("Scale Oz. Beg. Pos");
        TESTFIELD("Scale Oz. Length");

        "Scale Weigh String" := ModifyScaleString(ScaleInterface,"Scale Weigh String");
        TESTFIELD("Scale Weigh String");

        Measures := 0;
        REPEAT
          CLEAR(ReceiveString);
          CASE "Scale Integration" OF
            //"Scale Integration"::MSComm:
            //  ReceiveString := CommControlMgt.GetScaleWeight(ScaleInterface);
            "Scale Integration"::".NET Automation":
              ReceiveString := GetScaleWeightActivexpert(ScaleInterface);
          END;

          PoundsOK := FALSE;
          OuncesOK := FALSE;
          //IF USERID = 'TOPAZ\EST30' THEN
          //  MESSAGE(ReceiveString);
          IF (ReceiveString <> '') AND (ReceiveString <> Text002) THEN BEGIN
            //TM beg 080715
            IF "Standard Scale Type" = "Standard Scale Type"::Fairbanks THEN BEGIN
              DecimalPointPos := STRPOS(ReceiveString, '.');
              IF DecimalPointPos <= 0 THEN BEGIN
                 MESSAGE('Scale reading was incomplete <%1>, press enter and scan again.',ReceiveString);
                 EXIT(FALSE);
              END;
              "Scale Lbs. Beg. Pos." := 1;
              "Scale Lbs. Length" := DecimalPointPos;
              "Scale Oz. Beg. Pos" := "Scale Lbs. Length" + 1;
            END;
            //TM end 080715

            IF STRLEN(ReceiveString) > "Scale Lbs. Beg. Pos." THEN
              PoundsOK :=
                EVALUATE(
                  WeightPounds,COPYSTR(ReceiveString,"Scale Lbs. Beg. Pos.","Scale Lbs. Length"));
            IF STRLEN(ReceiveString) > "Scale Oz. Beg. Pos" THEN
              OuncesOK :=
                EVALUATE(
                  WeightOunces,COPYSTR(ReceiveString,"Scale Oz. Beg. Pos","Scale Oz. Length"));
              //message('%1', WeightOunces);
            UseScaleWeight := PoundsOK AND OuncesOK;
          END;

          Measures := Measures + 1;
        UNTIL UseScaleWeight OR (Measures > "Maximum Retries When Error");

        IF UseScaleWeight THEN BEGIN
          IF WeightOunces > 0 THEN
            CASE "Scale Oz. Length" OF
              0:
                ;
              1:
                WeightPounds := WeightPounds + (WeightOunces * 0.1);
              2:
                WeightPounds := WeightPounds + (WeightOunces * 0.01);
              3:
                WeightPounds := WeightPounds + (WeightOunces * 0.001);
              ELSE
                ERROR('Maximum 3 digits supported.');
            END;
          ScaleWeight := WeightPounds;

          EXIT(TRUE);
        END ELSE BEGIN
          IF NOT Quiet THEN
            IF (ReceiveString = '') OR (ReceiveString = 'Time Out') THEN
              MESSAGE('Weight not received <%1>, press enter and scan again.',ReceiveString)
            ELSE
              MESSAGE('Scale reading was incomplete <%1>, press enter and scan again.',ReceiveString);

          EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE ModifyScaleString@1(ScaleInterface@1000000000 : Record 14000746;ScaleString@1000000001 : Text[30]) : Text[30];
    BEGIN
      WITH ScaleInterface DO BEGIN
        CASE "Standard Scale Type" OF
          "Standard Scale Type"::" ":
            ;
          "Standard Scale Type"::Fairbanks:
            IF ScaleString = '' THEN
              ScaleString[1] := 13;
          "Standard Scale Type"::"NCI Weigh-Tronix":
            ScaleString[STRLEN(ScaleString) + 1] := 13;
        END;

        EXIT(ScaleString);
      END;
    END;

    BEGIN
    {
      testing codeunit Tony
    }
    END.
  }
}

