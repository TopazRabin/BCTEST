OBJECT Codeunit 14002980 RF Pallet Creation
{
  OBJECT-PROPERTIES
  {
    Date=08/21/18;
    Time=12:00:00 PM;
    Version List=RF1.50.13;
  }
  PROPERTIES
  {
    TableNo=7700;
    OnRun=VAR
            MiniformMgmt@1240020000 : Codeunit 7702;
          BEGIN
            MiniformMgmt.Initialize(
              MiniformHeader,Rec,DOMxmlin,ReturnedNode,
              RootNode,XMLDOMMgmt,ADCSCommunication,LoginID,
              CurrentCode,StackCode,WhseEmpId,LocationFilter);

            IF Code <> CurrentCode THEN
              PrepareData
            ELSE
              ProcessInput;

            CLEAR(DOMxmlin);
          END;

  }
  CODE
  {
    VAR
      MiniformHeader@1240020015 : Record 7700;
      RFEmployeeSetup@1240020014 : Record 14002802;
      XMLDOMMgmt@1240020013 : Codeunit 6224;
      ADCSCommunication@1240020012 : Codeunit 7701;
      ADCSNasStartup@1240020011 : Codeunit 7700;
      DOMxmlin@1240020009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ReturnedNode@1240020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      RootNode@1240020007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Remark@1240020006 : Text[250];
      LoginID@1240020010 : Text[250];
      WhseEmpId@1240020016 : Text[250];
      LocationFilter@1240020005 : Text[250];
      CurrentCode@1240020004 : Text[250];
      StackCode@1240020003 : Text[250];
      RFGroupFilter@1240020002 : Code[250];
      ActiveInputField@1240020001 : Integer;
      RecRef@1240020000 : RecordRef;
      Text001@1240020040 : TextConst 'ENU=Unknown function %1';
      Text004@1240020039 : TextConst 'ENU=Invalid %1.';
      Text006@1240020038 : TextConst 'ENU=No input Node found';
      Text008@1240020036 : TextConst 'ENU=End of Document';
      Text032@1240020041 : TextConst 'ENU=Bin must be Pallet enabled';
      Text033@1240020042 : TextConst 'ENU=RF Setup missing';
      Text034@1240020043 : TextConst 'ENU=Pallet Numbers must be setup';
      Text036@1240020045 : TextConst 'ENU="Limit is %1 "';
      Text038@1240020047 : TextConst 'ENU=Multi Label Printing not allowed';

    PROCEDURE ProcessInput@1240020000();
    VAR
      BoxHandlingLine@1240020034 : Record 14002970;
      BoxHandlingLine3@1240020033 : Record 14002970;
      MiniformLine@1240020032 : Record 7701;
      Bin@1240020031 : Record 7354;
      BinContent@1240020030 : Record 7302;
      Bin3@1240020029 : Record 7354;
      FuncGroup@1240020028 : Record 7702;
      RFEmployeeMenuFilter@1240020027 : Record 14002806;
      Location@1240020020 : Record 14;
      RFSetup@1240020000 : Record 14002801;
      LicensePlateMgt@1240020017 : Codeunit 14002971;
      RFMgt@1240020016 : Codeunit 14002801;
      PalletQAMgt@1240020039 : Codeunit 14002513;
      RFLabelMgt@1240020002 : Codeunit 14002851;
      ReturnedNode2@1240020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FieldID@1240020014 : Text[250];
      TextValue@1240020013 : Text[250];
      TableNo@1240020012 : Integer;
      IntegerValue@1240020036 : Integer;
      i@1240020035 : Integer;
      RecordId@1240020011 : RecordID;
      FldNo@1240020010 : Integer;
      Command@1240020009 : Code[10];
      BinCode@1240020005 : Code[20];
      LabelNo@1240020038 : Code[20];
    BEGIN
      IF XMLDOMMgmt.FindNode(RootNode,'Header/Input',ReturnedNode) THEN
        TextValue := ReturnedNode.InnerText
      ELSE
        ERROR(Text006);

      XMLDOMMgmt.FindNode(RootNode,'ExtraInfo',ReturnedNode2);
      Bin3.Code := ADCSCommunication.GetNodeAttribute(ReturnedNode2,'BinCode');
      RFGroupFilter := ADCSCommunication.GetNodeAttribute(ReturnedNode2,'RFGroupFilter');
      IF RFGroupFilter = '' THEN
        RFGroupFilter := '0';

      ADCSCommunication.SetExtraValue('BinCode',Bin3.Code);

      EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'));
      RecRef.OPEN(TableNo);
      EVALUATE(RecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'));
      IF RecRef.GET(RecordId) THEN BEGIN
        RecRef.SETTABLE(BoxHandlingLine);
        RecRef.GETTABLE(BoxHandlingLine);
        ADCSCommunication.SetRecRef(RecRef);
      END ELSE BEGIN
        ADCSCommunication.RunPreviousMiniform(DOMxmlin);
        EXIT;
      END;

      FuncGroup.KeyDef := ADCSCommunication.GetFunctionKey(MiniformHeader.Code,TextValue);

      CASE FuncGroup.KeyDef OF
        FuncGroup.KeyDef::Esc:
          BEGIN
            BoxHandlingLine3.SETRANGE("Warehouse Employee Code",BoxHandlingLine."Warehouse Employee Code");
            BoxHandlingLine3.DELETEALL;
            ADCSCommunication.RunPreviousMiniform(DOMxmlin);
          END;
        FuncGroup.KeyDef::First:
          ADCSCommunication.FindRecRef(0,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::LnDn:
          IF NOT ADCSCommunication.FindRecRef(1,MiniformHeader."No. of Records in List") THEN
            Remark := Text008;
        FuncGroup.KeyDef::LnUp:
          ADCSCommunication.FindRecRef(2,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::Last:
          ADCSCommunication.FindRecRef(3,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::PgDn:
          IF NOT ADCSCommunication.FindRecRef(4,MiniformHeader."No. of Records in List") THEN
            Remark := Text008;
        FuncGroup.KeyDef::PgUp:
          ADCSCommunication.FindRecRef(5,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::Reset:
          BEGIN
            RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
            IF RFEmployeeSetup."Local Menu Button" IN
               [RFEmployeeSetup."Local Menu Button"::F4,
                RFEmployeeSetup."Local Menu Button"::"F4 (F3 Post)"]
            THEN BEGIN
              MiniformHeader.TESTFIELD("Local Menu Miniform Code");
              ADCSCommunication.SetExtraValue('PrimaryMiniForm',MiniformHeader.Code);
              MiniformHeader.GET(MiniformHeader."Local Menu Miniform Code");
              IF RFEmployeeMenuFilter.GET(
                   RFEmployeeSetup.Code,MiniformHeader.Code)
              THEN
                ADCSCommunication.SetRFFunctionFilter(
                  RFEmployeeMenuFilter."RF Function Filter");
              ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,1,'',LoginID);
              ADCSCommunication.GetReturnXML(DOMxmlin);
              ADCSNasStartup.SendXMLReply(DOMxmlin);

              EXIT;
            END;
          END;
        FuncGroup.KeyDef::Register:
          BEGIN
            RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
            IF RFEmployeeSetup."Local Menu Button" IN [RFEmployeeSetup."Local Menu Button"::F3]
            THEN BEGIN
              MiniformHeader.TESTFIELD("Local Menu Miniform Code");
              ADCSCommunication.SetExtraValue('PrimaryMiniForm',MiniformHeader.Code);
              MiniformHeader.GET(MiniformHeader."Local Menu Miniform Code");
              IF RFEmployeeMenuFilter.GET(
                   RFEmployeeSetup.Code,MiniformHeader.Code)
              THEN
                ADCSCommunication.SetRFFunctionFilter(
                  RFEmployeeMenuFilter."RF Function Filter");
              ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,1,'',LoginID);
              ADCSCommunication.GetReturnXML(DOMxmlin);
              ADCSNasStartup.SendXMLReply(DOMxmlin);

              EXIT;
            END;
          END;
        FuncGroup.KeyDef::Input:
          BEGIN
            FieldID := ADCSCommunication.GetNodeAttribute(ReturnedNode,'FieldID');
            Command := '';
            IF STRLEN(TextValue) >= 3 THEN
              IF COPYSTR(TextValue,1,2) = '//' THEN
                Command := COPYSTR(TextValue,3,MAXSTRLEN(Command));
            IF (FieldID = '') OR (Command <> '') THEN BEGIN
              RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);

              IF Command <> '' THEN BEGIN
                MiniformLine.RESET;
                MiniformLine.SETRANGE("Miniform Code",MiniformHeader."Local Menu Miniform Code");
                MiniformLine.SETRANGE(Hide,FALSE);
                IF RFEmployeeMenuFilter.GET(
                     RFEmployeeSetup.Code,MiniformHeader."Local Menu Miniform Code")
                THEN
                  MiniformLine.SETFILTER("RF Function No.",RFEmployeeMenuFilter."RF Function Filter");
                MiniformLine.SETRANGE(MiniformLine."Command Text",Command);
                MiniformLine.FIND('-');
              END ELSE BEGIN
                MiniformLine.RESET;
                MiniformLine.SETRANGE("Miniform Code",MiniformHeader.Code);
                MiniformLine.SETRANGE(Hide,FALSE);
                IF RFEmployeeMenuFilter.GET(RFEmployeeSetup.Code,MiniformHeader.Code) THEN
                  MiniformLine.SETFILTER("RF Function No.",RFEmployeeMenuFilter."RF Function Filter");
                MiniformLine.SETRANGE(Text,ReturnedNode.InnerText);
                MiniformLine.FIND('-');
                XMLDOMMgmt.FindNode(RootNode,'ExtraInfo',ReturnedNode2);
                MiniformHeader.Code :=
                  ADCSCommunication.GetNodeAttribute(ReturnedNode2,'PrimaryMiniForm');
                MiniformHeader.GET(MiniformHeader.Code);
              END;
              CASE MiniformLine."RF Function No." OF
                0: // Escape or Return
                  BEGIN
                    BoxHandlingLine3.SETRANGE("Warehouse Employee Code",WhseEmpId);
                    IF BoxHandlingLine3.FIND('-') THEN
                      REPEAT
                        BoxHandlingLine3.DELETE;
                      UNTIL BoxHandlingLine3.NEXT = 0;
                  END;
                1,2,3: // Register
                  BEGIN
                  END;
                ELSE
                  Remark := STRSUBSTNO(Text001,MiniformLine."RF Function No.");
              END;
            END ELSE BEGIN
              EVALUATE(FldNo,FieldID);
              CASE FldNo OF
                BoxHandlingLine.FIELDNO("Bin Code"):
                  BEGIN
                    IF NOT RFSetup.GET('') THEN
                      Remark := Text033;

                    IF NOT RFMgt.GetBin(TextValue,RFEmployeeSetup,LocationFilter,FALSE,BinCode)
                    THEN
                      Remark := STRSUBSTNO(Text004,BoxHandlingLine.FIELDCAPTION("Bin Code"));

                    IF Remark = '' THEN BEGIN
                      IF Bin.GET(LocationFilter,BinCode) THEN
                        IF NOT Bin."Pallet Bin" THEN
                          Remark := Text032;
                    END;

                    IF Remark = '' THEN
                      IF RFSetup."Next Pallet No." <> '' THEN
                        BoxHandlingLine."Pallet No." := RFSetup.GetNextPalletNo(TRUE,FALSE,FALSE);

                    IF Remark = '' THEN BEGIN
                      BoxHandlingLine.Location := LocationFilter;
                      BoxHandlingLine."Bin Code" := BinCode;
                      BoxHandlingLine.MODIFY;
                    END;
                  END;
                BoxHandlingLine.FIELDNO(Integer1):
                  BEGIN
                    RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
                    IF NOT RFSetup.GET('') THEN
                      Remark := Text033;

                    IF NOT RFMgt.GetInteger(TextValue,RFEmployeeSetup,IntegerValue) THEN
                      Remark := STRSUBSTNO(Text001,TextValue);

                    IF Remark = '' THEN BEGIN
                      IF (IntegerValue > 1) AND
                         NOT RFEmployeeSetup."Multiple Label Printing"
                      THEN
                        Remark := Text038;
                    END;

                    IF Remark = '' THEN BEGIN
                      IF IntegerValue = 0 THEN
                        Remark := STRSUBSTNO(Text004,BoxHandlingLine.FIELDCAPTION(Quantity));
                    END;

                    IF Remark = '' THEN BEGIN
                      IF NOT RFEmployeeSetup."Multiple Label Printing" THEN
                        IntegerValue := 1
                      ELSE
                        IF IntegerValue > RFEmployeeSetup."Max Number of Labels created" THEN
                          Remark := STRSUBSTNO(Text036,RFEmployeeSetup."Max Number of Labels created");
                    END;

                    IF Remark = '' THEN BEGIN
                      IF IntegerValue > 0 THEN BEGIN
                        FOR i := 1 TO IntegerValue DO BEGIN
                          IF i <> 1 THEN BEGIN
                            LabelNo := RFSetup.GetNextPalletNo(TRUE,FALSE,FALSE);
                            BoxHandlingLine."Pallet No." := LabelNo;
                            BoxHandlingLine.MODIFY;
                          END ELSE
                            LabelNo := BoxHandlingLine."Pallet No.";

                          PalletQAMgt.CreateInitialStorageID(LabelNo,BoxHandlingLine.Location,WhseEmpId);
                          LicensePlateMgt.CreatePalletBinContent(BoxHandlingLine.Location,
                            BoxHandlingLine."Bin Code",LabelNo,'','','','','','',0D,0,7,WhseEmpId);

                          IF RFSetup."Pallet Label (LP)" <> '' THEN
                            RFLabelMgt.PrintLPLabel(BoxHandlingLine,WhseEmpId);
                        END;
                      END;
                    END;

                    IF Remark = '' THEN BEGIN
                      ADCSCommunication.RunPreviousMiniform(DOMxmlin);
                      BoxHandlingLine3.RESET;
                      BoxHandlingLine3.SETRANGE("Warehouse Employee Code",BoxHandlingLine."Warehouse Employee Code");
                      BoxHandlingLine3.DELETEALL;
                      EXIT;
                    END;
                  END;
                ELSE BEGIN
                  ADCSCommunication.FieldSetvalue(RecRef,FldNo,TextValue);
                  RecRef.SETTABLE(Bin);
                END;
              END;
                ADCSCommunication.SetExtraValue('RFGroupFilter',RFGroupFilter);
                ADCSCommunication.SetRFGroupFilter(RFGroupFilter);
                RecRef.GETTABLE(BoxHandlingLine);
                ADCSCommunication.SetRecRef(RecRef);
                ActiveInputField := ADCSCommunication.GetActiveInputNo(CurrentCode,FldNo);
                IF Remark = '' THEN
                  IF ADCSCommunication.LastEntryField(CurrentCode,FldNo) THEN BEGIN
                    RecRef.GETTABLE(BoxHandlingLine);
                    IF NOT ADCSCommunication.FindRecRef(1,ActiveInputField) THEN BEGIN
                      BoxHandlingLine."Line No." := BoxHandlingLine."Line No." + 10000;
                      BoxHandlingLine.INSERT;
                    END;

                    ActiveInputField := 1;
                  END ELSE
                    ActiveInputField += 1;
                RecRef.GETTABLE(BoxHandlingLine);
                ADCSCommunication.SetRecRef(RecRef);
              END;
          END;
      END;

      ADCSCommunication.SetExtraValue('FromCard','Yes');
      IF NOT (FuncGroup.KeyDef IN [FuncGroup.KeyDef::Esc]) THEN
        Sendform(ActiveInputField);
    END;

    PROCEDURE PrepareData@1240020001();
    VAR
      PalletJournalLine@1240020008 : Record 14002966;
      BoxHandlingLine@1240020007 : Record 14002970;
      BoxHandlingLine3@1240020006 : Record 14002970;
      ReturnedNode2@1240020004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TableNo@1240020002 : Integer;
      RecordId@1240020001 : RecordID;
      Box@1240020000 : Code[20];
    BEGIN
      XMLDOMMgmt.FindNode(RootNode,'Header/Input',ReturnedNode);

      XMLDOMMgmt.FindNode(RootNode,'ExtraInfo',ReturnedNode2);
      Box := ADCSCommunication.GetNodeAttribute(ReturnedNode2,'Box');
      IF EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'))
      THEN BEGIN
        RecRef.OPEN(TableNo);
        IF EVALUATE(RecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'))
        THEN BEGIN
          IF RecRef.GET(RecordId) THEN BEGIN
            RecRef.SETTABLE(PalletJournalLine);
            PalletJournalLine.RESET;
            PalletJournalLine.SETRANGE("Line No.",PalletJournalLine."Line No.");
          END;
          RecRef.CLOSE;
          RecRef.OPEN(DATABASE::"Pallet Journal Line");
          RecRef.GETTABLE(PalletJournalLine);
          ADCSCommunication.SetRecRef(RecRef);
          RecRef.CLOSE;
        END;
      END;

      BoxHandlingLine.SETRANGE("Warehouse Employee Code",WhseEmpId);
      IF BoxHandlingLine.FIND('-') THEN
        BoxHandlingLine.DELETEALL;

      BoxHandlingLine3.RESET;
      IF BoxHandlingLine3.FIND('+') THEN
        BoxHandlingLine."Line No." := BoxHandlingLine3."Line No." + 10000
      ELSE
        BoxHandlingLine."Line No." := 10000;
      BoxHandlingLine.INIT;
      BoxHandlingLine."Warehouse Employee Code" := WhseEmpId;
      BoxHandlingLine.Location := LocationFilter;
      BoxHandlingLine."Box No." := PalletJournalLine."Box No.";
      BoxHandlingLine.INSERT;

      RecRef.OPEN(DATABASE::"Box Handling Line");
      RecRef.GETTABLE(BoxHandlingLine);
      ADCSCommunication.SetRecRef(RecRef);
      ActiveInputField := 1;
      Sendform(ActiveInputField);
    END;

    PROCEDURE Sendform@1240020002(InputField@1240020000 : Integer);
    BEGIN
      // Prepare Miniform
      ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,InputField,Remark,LoginID);
      ADCSCommunication.GetReturnXML(DOMxmlin);
      ADCSNasStartup.SendXMLReply(DOMxmlin);
    END;

    EVENT DOMxmlin@1240020009::NodeInserting@93(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020009::NodeInserted@94(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020009::NodeRemoving@95(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020009::NodeRemoved@96(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020009::NodeChanging@97(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020009::NodeChanged@98(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

