OBJECT Codeunit 51992 Inventory Status Report
{
  OBJECT-PROPERTIES
  {
    Date=10/28/21;
    Time=11:22:25 AM;
    Modified=Yes;
    Version List=TPZ3001,3401;
  }
  PROPERTIES
  {
    TableNo=472;
    OnRun=BEGIN
            IF "Parameter String" = 'INVENTORY' THEN
              ExportCSVFile
            ELSE IF "Parameter String" = 'ITEM' THEN
              ExportItem
            ELSE IF "Parameter String" = 'UOM' THEN
              ExportItemUOM;
          END;

  }
  CODE
  {
    VAR
      DescriptionVar@1000000000 : Text[50];
      MOQVar@1000000001 : Text[20];
      LineNo@1000000003 : Integer;
      FieldNo@1000000002 : Integer;
      TempCSVBuffer@1000000004 : TEMPORARY Record 1234;
      TempExcelBuffer@1000000005 : TEMPORARY Record 370;
      TempItem@1000000006 : TEMPORARY Record 27;

    PROCEDURE ExportCSVFile@1000000001();
    VAR
      TopazSetup@1000000003 : Record 50056;
      LineNo@1000000000 : Integer;
      ItemLoc@1000000001 : Record 27;
      TempCSVBuffer@1000000002 : TEMPORARY Record 1234;
      TopazSetup1@1000000004 : Record 50056;
      FieldNo@1000000005 : Integer;
      itemManagement@1000000006 : Codeunit 50020;
      TopazSetupLoc@1000000007 : Record 50056;
    BEGIN
      TopazSetup.RESET;
      TopazSetup.SETRANGE("Option Choice",'INVENTORYSTATUS');
      TopazSetup.SETRANGE("Default Boolean",TRUE);
      TopazSetup.SETFILTER(DefaultDate,'<>%1',TODAY);
      IF TopazSetup.FINDFIRST THEN
        REPEAT
          IF NOT ExportDataandCreateFile(TopazSetup) THEN BEGIN
            TopazSetupLog(TopazSetup.Option,TRUE);//Error handling, save record
          END ELSE BEGIN
            CLEARLASTERROR;
            IF SendEmail(TopazSetup) THEN BEGIN
              TopazSetupLog(TopazSetup.Option,FALSE);//E/rror handling if notification failed
              TopazSetup.DefaultDate := TODAY;
              IF TopazSetup.MODIFY THEN;
              COMMIT;
            END ELSE CLEARLASTERROR;
          END;
        UNTIL TopazSetup.NEXT = 0;
    END;

    [TryFunction]
    PROCEDURE ExportDataandCreateFile@1000000004(TopazSetup@1000000005 : Record 50056);
    VAR
      TopazSetup1@1000000004 : Record 50056;
      TopazSetupLoc@1000000003 : Record 50056;
      itemManagement@1000000007 : Codeunit 50020;
      fromchar@1000000009 : Text[2];
      tochar@1000000010 : Text[4];
    BEGIN
      LineNo := 0; FieldNo := 1;
      TopazSetup1.RESET;
      TopazSetup1.SETRANGE("DefaultCode 20_1",'INVENTORYITEMCAT');
      TopazSetup1.SETRANGE("DefaultCode 20_3",TopazSetup.Option);
      IF TopazSetup1.FINDFIRST THEN BEGIN
        IF TopazSetupLoc.GET('INVENTORYSETUPFILEPATH','') THEN;
        //Heading of file
        LineNo += 1;
        IF STRPOS(TopazSetup."DefaultText 30_1",'A') = 0 THEN BEGIN
          TempCSVBuffer.InsertEntry(LineNo,FieldNo,'Supplier');
          FieldNo += 1;
        END;
        IF STRPOS(TopazSetup."DefaultText 30_1",'B') = 0 THEN BEGIN
          TempCSVBuffer.InsertEntry(LineNo,FieldNo,'Item Category Code');
          FieldNo += 1;
        END;
        IF STRPOS(TopazSetup."DefaultText 30_1",'C') = 0 THEN BEGIN
          TempCSVBuffer.InsertEntry(LineNo,FieldNo,'Item No.');
          FieldNo += 1;
        END;
        IF STRPOS(TopazSetup."DefaultText 30_1",'D') = 0 THEN BEGIN
          TempCSVBuffer.InsertEntry(LineNo,FieldNo,'Description');
          FieldNo += 1;
        END;
        IF STRPOS(TopazSetup."DefaultText 30_1",'E') = 0 THEN BEGIN
          TempCSVBuffer.InsertEntry(LineNo,FieldNo,'MOQ');
          FieldNo += 1;
        END;
        IF STRPOS(TopazSetup."DefaultText 30_1",'F') = 0 THEN BEGIN
          TempCSVBuffer.InsertEntry(LineNo,FieldNo,'Availability in NJ (08816)');
          FieldNo += 1;
        END;
        IF STRPOS(TopazSetup."DefaultText 30_1",'G') = 0 THEN BEGIN
          TempCSVBuffer.InsertEntry(LineNo,FieldNo,'Availability in FL (32218)');
          FieldNo += 1;
        END;
        IF STRPOS(TopazSetup."DefaultText 30_1",'H') = 0 THEN BEGIN
        TempCSVBuffer.InsertEntry(LineNo,FieldNo,'Availability in CA (91340)');
        END;
        // testing
      //  IF STRPOS(TopazSetup."DefaultText 30_1",'I') = 0 THEN BEGIN
      //    FieldNo += 1;
      //    TempCSVBuffer.InsertEntry(LineNo,FieldNo,'Division - Price Book Code');
      //  END;
        REPEAT
          GetItemList(TopazSetupLoc."DefaultText 30",'L',TopazSetup1,TopazSetup);
          GetItemList(TopazSetupLoc."DefaultText 30_1",'E',TopazSetup1,TopazSetup);
          GetItemList(TopazSetupLoc."DefaultText 30_2",'P',TopazSetup1,TopazSetup);
        UNTIL TopazSetup1.NEXT = 0;

        IF FILE.EXISTS(TopazSetupLoc.DefaultText250 + TopazSetup.DefaultText250) THEN
          FILE.ERASE(TopazSetupLoc.DefaultText250 + TopazSetup.DefaultText250);
        //TempCSVBuffer.SaveData(TopazSetupLoc.DefaultText250 + TopazSetup.DefaultText250,'|');
        TempCSVBuffer.SaveData(TopazSetupLoc.DefaultText250 + TopazSetup.DefaultText250,',');
      END;
    END;

    LOCAL PROCEDURE GetItemList@1000000013(PriceBookCodePara@1000000000 : Text[100];DivisionPara@1000000001 : Code[20];TopazSetup1@1000000003 : Record 50056;TopazSetup@1000000004 : Record 50056);
    VAR
      ItemLoc@1000000002 : Record 27;
      DimensionValue@1000000005 : Record 349;
      itemManagement@1000000006 : Codeunit 50020;
    BEGIN
      ItemLoc.RESET;
      //ItemLoc.SETRANGE("No.",'0B');
      ItemLoc.SETRANGE("Item Category Code",TopazSetup1.Option); //Comment this line for all categories
      //ItemLoc.SETFILTER("Item Category Code",'<>%1&<>%2','MISC','PKG'); //Open this line for all categories
      ItemLoc.SETRANGE(Blocked,FALSE);
      ItemLoc.SETFILTER("ABC Code",'<>%1&<>%2&<>%3','OB', 'DROP S','LS');
      ItemLoc.SETFILTER("Shortcut Dimension 5 Code",DivisionPara);
      ItemLoc.SETFILTER("Price Book Code",PriceBookCodePara);
      IF ItemLoc.FINDFIRST THEN
      REPEAT
        LineNo += 1; FieldNo := 1;
        IF STRPOS(TopazSetup."DefaultText 30_1",'A') = 0 THEN BEGIN
          IF DimensionValue.GET('DIVISION',ItemLoc."Shortcut Dimension 5 Code") THEN;
          TempCSVBuffer.InsertEntry(LineNo,FieldNo,'Topaz '+DimensionValue.Name);
          FieldNo += 1;
        END;
        IF STRPOS(TopazSetup."DefaultText 30_1",'B') = 0 THEN BEGIN
          TempCSVBuffer.InsertEntry(LineNo,FieldNo,ItemLoc."Item Category Code");
          FieldNo += 1;
        END;
        IF STRPOS(TopazSetup."DefaultText 30_1",'C') = 0 THEN BEGIN
          TempCSVBuffer.InsertEntry(LineNo,FieldNo,ItemLoc."No.");
          FieldNo += 1;
        END;
        IF STRPOS(TopazSetup."DefaultText 30_1",'D') = 0 THEN BEGIN
          IF STRPOS(ItemLoc.Description,',') > 0 THEN
            TempCSVBuffer.InsertEntry(LineNo,FieldNo,CONVERTSTR(ItemLoc.Description,',',' '))
          ELSE
            TempCSVBuffer.InsertEntry(LineNo,FieldNo,ItemLoc.Description);
          FieldNo += 1;
        END;
        IF STRPOS(TopazSetup."DefaultText 30_1",'E') = 0 THEN BEGIN
          IF STRPOS(GetMOQ(ItemLoc),',') > 0 THEN
            TempCSVBuffer.InsertEntry(LineNo,FieldNo,DELCHR(GetMOQ(ItemLoc),'=',','))
          ELSE
            TempCSVBuffer.InsertEntry(LineNo,FieldNo,GetMOQ(ItemLoc));
          FieldNo += 1;
        END;
        IF itemManagement.CalcMonthOfStock(ItemLoc) >= 1.0 THEN BEGIN
          IF STRPOS(TopazSetup."DefaultText 30_1",'F') = 0 THEN BEGIN
            TempCSVBuffer.InsertEntry(LineNo,FieldNo,GetAvailableInventory(ItemLoc,'80'));  //'Availability in NJ(08816)'
            FieldNo += 1;
          END;
          IF STRPOS(TopazSetup."DefaultText 30_1",'G') = 0 THEN BEGIN
            TempCSVBuffer.InsertEntry(LineNo,FieldNo,GetAvailableInventory(ItemLoc,'25')); //'Availability in FL(32218)'
            FieldNo += 1;
          END;
          IF STRPOS(TopazSetup."DefaultText 30_1",'H') = 0 THEN
            TempCSVBuffer.InsertEntry(LineNo,FieldNo,GetAvailableInventory(ItemLoc,'30')); //'Availability in CA(91340)'
        END ELSE BEGIN
          IF STRPOS(TopazSetup."DefaultText 30_1",'F') = 0 THEN BEGIN
            TempCSVBuffer.InsertEntry(LineNo,FieldNo,'0');  //'Availability in NJ(08816)'
            FieldNo += 1;
          END;
          IF STRPOS(TopazSetup."DefaultText 30_1",'G') = 0 THEN BEGIN
            TempCSVBuffer.InsertEntry(LineNo,FieldNo,'0'); //'Availability in FL(32218)'
            FieldNo += 1;
          END;
          IF STRPOS(TopazSetup."DefaultText 30_1",'H') = 0 THEN
            TempCSVBuffer.InsertEntry(LineNo,FieldNo,'0'); //'Availability in CA(91340)'
        END;
      //  FieldNo += 1;
      //  TempCSVBuffer.InsertEntry(LineNo,FieldNo,ItemLoc."Shortcut Dimension 5 Code" + ' - '+ItemLoc."Price Book Code");
      UNTIL ItemLoc.NEXT = 0;
    END;

    PROCEDURE GetMOQ@1000000010(ItemPara@1000000000 : Record 27) : Text;
    VAR
      ItemUnitofMeasureLoc@1000000001 : Record 5404;
      moqtest@1000000002 : Text;
      TopazSetupLoc@1000000003 : Record 50056;
    BEGIN
      {
       A Minimum Ordering Quantity (MOQ) will encourage proper buying habits.  This column should be populated according to the following algorithm:
         ÅFor items that have a Sales Order Multiple in NAV, use that value.
         ÅFor items that donÂt have a Sales Order Multiple and have an Inner Pack Quantity >= 5,
              oIf (Unit Cost * Inner Pack Quantity) < $7.50, the Inner Pack quantity should be used as the MOQ.
              oIf (Unit Cost * Inner Pack Quantity) = $7.50, then Ã1Ä should be used as the MOQ.
         ÅFor items that donÂt have a Sales Order Multiple and have an Inner Pack Quantity < 5, the value Ã1Ä should be used as the MOQ.
         ÅIf an item doesnÂt have a Sales Order Multiple and also doesnÂt have an Inner Pack Quantity:
              oIf (Unit Cost * Master Carton Quantity) < $5, then the Master Carton Quantity should be used as the MOQ
              oIf (Unit Cost * Master Carton Quantity) = $5, then Ã1Ä should be used as the MOQ
      }
      TopazSetupLoc.GET('INVENTORYSETUPFILEPATH','');
      IF ItemPara."Sales Order Multiple" <> 0 THEN BEGIN
        MOQVar := 'SOM';
        EXIT(FORMAT(ROUND(ItemPara."Sales Order Multiple",1,'=')))
      END ELSE BEGIN
        ItemUnitofMeasureLoc.RESET;
        ItemUnitofMeasureLoc.SETRANGE("Item No.",ItemPara."No.");
        ItemUnitofMeasureLoc.SETRANGE(Code,'I');
        IF ItemUnitofMeasureLoc.FINDFIRST THEN BEGIN
          IF (ItemUnitofMeasureLoc."Qty. per Unit of Measure" >= TopazSetupLoc.DefaultInteger) AND
             (ItemUnitofMeasureLoc."Qty. per Unit of Measure" * ItemPara."Unit Cost" <= TopazSetupLoc.DefaultDecimal_1) THEN BEGIN
            MOQVar := 'I';
            EXIT(FORMAT(ROUND(ItemUnitofMeasureLoc."Qty. per Unit of Measure",1,'=')));
          END ELSE BEGIN
            MOQVar := 'I1';
            EXIT('1');
          END;
        END ELSE BEGIN
          ItemUnitofMeasureLoc.RESET;
          ItemUnitofMeasureLoc.SETRANGE("Item No.",ItemPara."No.");
          ItemUnitofMeasureLoc.SETRANGE(Code,'M');
          IF ItemUnitofMeasureLoc.FINDFIRST THEN BEGIN
            IF ItemUnitofMeasureLoc."Qty. per Unit of Measure" * ItemPara."Unit Cost" <= TopazSetupLoc.DefaultDecimal THEN BEGIN
              MOQVar := ItemPara."Shortcut Dimension 5 Code"+'M';
              EXIT(FORMAT(ROUND(ItemUnitofMeasureLoc."Qty. per Unit of Measure",1,'=')));
            END ELSE BEGIN
              MOQVar := ItemPara."Shortcut Dimension 5 Code"+'M1';
              EXIT('1');
            END;
          END ELSE EXIT('0');
        END;
      END;
    END;

    PROCEDURE GetAvailableInventory@1000000014(ItemPara@1000000000 : Record 27;LocationPara@1000000001 : Code[10]) : Text;
    VAR
      WhseCreatePick@1000000002 : Codeunit 5778;
      NetInventory@1000000003 : Decimal;
      CalculatedAvailability@1000000004 : Decimal;
      i@1000000005 : Integer;
    BEGIN
      ItemPara.SETFILTER("Location Filter",LocationPara);
      ItemPara.CALCFIELDS("Qty. on Sales Order");
      // IF ItemPara."No."= '195' THEN
      //  i := 1;
      NetInventory := WhseCreatePick.QtyAvailtoPick(ItemPara."No.",LocationPara) - ItemPara."Qty. on Sales Order";
      IF NetInventory > 0 THEN BEGIN
        CalculatedAvailability := (NetInventory * 7)/100;
        IF CalculatedAvailability < 5000 THEN BEGIN
          IF CalculatedAvailability < 1 THEN
            EXIT('0');
          IF STRPOS(FORMAT(CalculatedAvailability),',') > 0 THEN
            EXIT(DELCHR(FORMAT(ROUND(CalculatedAvailability,1,'<')),'=',','))
          ELSE
            EXIT(FORMAT(ROUND(CalculatedAvailability,1,'<')))
        END ELSE
          EXIT('5000');
      END ELSE EXIT('0');
    END;

    [TryFunction]
    PROCEDURE SendEmail@1000000000(TopazSetupPara@1000000000 : Record 50056);
    VAR
      SMTPMail@1000000002 : Codeunit 400;
      SMTPMailSetup@1000000003 : Record 409;
      SubjectLoc@1000000004 : Text[250];
      BodyLoc@1000000005 : Text[1024];
      TopazSetupLoc@1000000007 : Record 50056;
    BEGIN
      IF TopazSetupPara."To Email" <> '' THEN BEGIN
        IF TopazSetupLoc.GET('INVENTORYSETUPFILEPATH','') THEN;
        CLEAR(SMTPMail);
        SMTPMailSetup.GET;
        SubjectLoc := 'Inventory Status';
        BodyLoc := 'Please find the attached inventory status report.';
        SMTPMail.CreateMessage(SMTPMailSetup."From Name",SMTPMailSetup."From Address",TopazSetupPara."To Email",SubjectLoc,BodyLoc,TRUE);
        //SMTPMail.CreateMessage(SMTPMailSetup."From Name",SMTPMailSetup."From Address",'pankaj.shukla@Topaz-usa.com',SubjectLoc,BodyLoc,TRUE);
        IF TopazSetupPara."CC Email" <> '' THEN
          SMTPMail.AddCC(TopazSetupPara."CC Email");
        IF TopazSetupLoc."Bcc Email" <> '' THEN
          SMTPMail.AddBCC(TopazSetupLoc."Bcc Email");
        SMTPMail.AddAttachment(TopazSetupLoc.DefaultText250 + TopazSetupPara.DefaultText250,TopazSetupPara.DefaultText250);
        SMTPMail.Send;
      END;
    END;

    PROCEDURE TopazSetupLog@1000000017(CustomerPara@1000000001 : Code[20];FileCreationError@1000000002 : Boolean);
    VAR
      TopazSetupLoc@1000000000 : Record 50056;
    BEGIN
      TopazSetupLoc.INIT;
      TopazSetupLoc.Option := CustomerPara;
      TopazSetupLoc."Option Choice" := FORMAT(CURRENTDATETIME);
      TopazSetupLoc."DefaultCode 20" := 'INVENTORYSTATUSERROR';
      IF FileCreationError THEN
        TopazSetupLoc."DefaultText 30" := 'File Creation Error'
      ELSE
        TopazSetupLoc."DefaultText 30" := 'Email Notification Error';
      TopazSetupLoc.DefaultText250 := COPYSTR(GETLASTERRORTEXT,1,250);
      TopazSetupLoc.DefaultDate := TODAY;
      IF TopazSetupLoc.DefaultText250 <> '' THEN
        TopazSetupLoc.INSERT;
      COMMIT;
    END;

    PROCEDURE ExportItem@1000000002();
    VAR
      ItemLoc@1000000000 : Record 27;
      RowNo@1000000001 : Integer;
      ColumnNo@1000000002 : Integer;
      ItemCategory@1000000003 : Record 5722;
      ProductGroup@1000000004 : Record 5723;
      Vend@1000000005 : Record 23;
      ABCCode@1000000006 : Record 51401;
      Manufacturer@1000000007 : Record 5720;
      TopazSetupLoc@1000000008 : Record 50056;
    BEGIN
      //Manufacture = Topaz
      //Division = E, L, P only
      //ABC code,  all products not equal to OB,  except where Webshop Item group =SA-Legacy
      GetItemtoExport;
      {ItemLoc.RESET;
      //ItemLoc.SETRANGE("No.",'L4T8B/850/14F/DE-39');
      ItemLoc.SETRANGE(Blocked,FALSE);
      ItemLoc.SETRANGE("Manufacturer Code",'TOPAZ');
      ItemLoc.SETFILTER("Shortcut Dimension 5 Code",'%1|%2|%3','E','L','P');
      ItemLoc.SETFILTER("Last Date Modified",'=%1',CALCDATE('<-1D>',TODAY));
      IF ItemLoc.FINDFIRST THEN BEGIN
      }
      TempItem.RESET;
      IF TempItem.FINDFIRST THEN BEGIN
        RowNo := 1; ColumnNo := 1; CLEAR(TempExcelBuffer); TempExcelBuffer.DELETEALL;
        EnterCell(RowNo,ColumnNo,'Item Number',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Description',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Description 2',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Base Unit of Measure',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Alt. Base Unit of Measure',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Assembly BOM',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Item Category Code',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Item Category Description',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Product Group Code',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Product Group Description',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Search Description',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Division Code',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Blocked',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Prior Generation',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Next Generation',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Unit Price',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Low Unit Price',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Medium Unit Price',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'High Unit Price',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Price Book Code',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Vendor No.',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Vendor',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'ABC Code',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'ABC Definition',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Tariff No.',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Country of Origin Code',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Item UPC',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Label Description',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Label Description 2',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Label Description 3',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Label Description 4',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Size',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Supplier',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Manufacturer',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Visible in Webshop',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Webshop Title',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Webshop Item Category Code',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Webshop Product Group Code',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'WebShop Order Minimum',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'WebShop Order Multiple',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'WebShop Gross Weight Per Pack',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'WebShop Length',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'WebShop Width',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'WebShop Height',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Long Term Product Title',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Short Term Product Title',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'MSRP Price',TRUE,FALSE,FALSE,'',1);
        //-->TPZ3249
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Do Not Sell State',TRUE,FALSE,FALSE,'',1); //Do Not Sell State
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Restriction',TRUE,FALSE,FALSE,'',1); //Restriction
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'CA T20',TRUE,FALSE,FALSE,'',1); //CA T20
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'CA T24 JA8',TRUE,FALSE,FALSE,'',1); //CA T24 JA8
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Supports CA T24 JA8',TRUE,FALSE,FALSE,'',1); //Supports CA T24 JA8
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'DLC Classification',TRUE,FALSE,FALSE,'',1); //DLC Classification
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'DLC Product ID',TRUE,FALSE,FALSE,'',1); //DLC Product ID
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'ENERGY STAR',TRUE,FALSE,FALSE,'',1); //ENERGY STAR
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Order Code',TRUE,FALSE,FALSE,'',1); //Order Code
        //<--TPZ3249
        //-->TPZ3401
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'DLC Primary Use',TRUE,FALSE,FALSE,'',1); //DLC Primary Use
        //<--TPZ3401
        REPEAT
          IF ItemLoc.GET(TempItem."No.") THEN;
          //IF AllowtoExport(ItemLoc) THEN BEGIN
            RowNo += 1; ColumnNo := 1; //Number,Text,Date,Time
            EnterCell(RowNo,ColumnNo,ItemLoc."No.",FALSE,FALSE,FALSE,'',1);  //Item Number
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc.Description,FALSE,FALSE,FALSE,'',1);  //Description
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."Description 2",FALSE,FALSE,FALSE,'',1);  //'Description 2'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."Base Unit of Measure",FALSE,FALSE,FALSE,'',1); //'Base Unit of Measure'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."Alt. Base Unit of Measure",FALSE,FALSE,FALSE,'',1); //Alt. Base Unit of Measure
            ColumnNo += 1;
            ItemLoc.CALCFIELDS("Assembly BOM");  //ZZ
            EnterCell(RowNo,ColumnNo,FORMAT(ItemLoc."Assembly BOM"),FALSE,FALSE,FALSE,'',1);  //Assembly BOM
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."Item Category Code",FALSE,FALSE,FALSE,'',1);//Item Category Code
            ColumnNo += 1;
            IF ItemCategory.GET(ItemLoc."Item Category Code") THEN
              EnterCell(RowNo,ColumnNo,ItemCategory.Description,FALSE,FALSE,FALSE,'',1)  //Item Category Description
            ELSE
              EnterCell(RowNo,ColumnNo,'',FALSE,FALSE,FALSE,'',1);  //Item Category Description
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."Product Group Code" ,FALSE,FALSE,FALSE,'',1); //Product Group Code
            ColumnNo += 1;
            IF ProductGroup.GET(ItemLoc."Item Category Code",ItemLoc."Product Group Code") THEN
              EnterCell(RowNo,ColumnNo,ProductGroup.Description,FALSE,FALSE,FALSE,'',1) //'Product Group Description'
            ELSE
              EnterCell(RowNo,ColumnNo,'',FALSE,FALSE,FALSE,'',1); //'Product Group Description'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."Search Description",FALSE,FALSE,FALSE,'',1);  //'Search Description'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."Shortcut Dimension 5 Code",FALSE,FALSE,FALSE,'',1);  //'Division Code'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,FORMAT(ItemLoc.Blocked),FALSE,FALSE,FALSE,'',1);  //'Blocked'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."Prior Generation",FALSE,FALSE,FALSE,'',1); //Prior Generation
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."Next Generation",FALSE,FALSE,FALSE,'',1);  //Next Generation
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,FORMAT(ItemLoc."Unit Price"),FALSE,FALSE,FALSE,'',0); //'Unit Price'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,FORMAT(ItemLoc."Low Unit Price"),FALSE,FALSE,FALSE,'',0);  //'Low Unit Price'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,FORMAT(ItemLoc."Medium Unit Price"),FALSE,FALSE,FALSE,'',0);  //Medium Unit Price
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,FORMAT(ItemLoc."High Unit Price"),FALSE,FALSE,FALSE,'',0);  //High Unit Price
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."Price Book Code",FALSE,FALSE,FALSE,'',1); //'Price Book Code'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."Vendor No.",FALSE,FALSE,FALSE,'',1); //'Vendor No.'
            ColumnNo += 1;
            IF Vend.GET(ItemLoc."Vendor No.") THEN
              EnterCell(RowNo,ColumnNo,Vend.Name,FALSE,FALSE,FALSE,'',1)  //'Vendor'
            ELSE
              EnterCell(RowNo,ColumnNo,Vend.Name,FALSE,FALSE,FALSE,'',1);  //'Vendor'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."ABC Code",FALSE,FALSE,FALSE,'',1);  //'ABC Code'
            ColumnNo += 1;
            IF ABCCode.GET(ItemLoc."ABC Code") THEN
              EnterCell(RowNo,ColumnNo,ABCCode."ABC Definition",FALSE,FALSE,FALSE,'',1) //'ABC Definition'
            ELSE
              EnterCell(RowNo,ColumnNo,'',FALSE,FALSE,FALSE,'',1); //'ABC Definition'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."Tariff No.",FALSE,FALSE,FALSE,'',1); //'Tariff No.'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."Country/Region of Origin Code",FALSE,FALSE,FALSE,'',1); //'Country of Origin Code'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."Item UPC/EAN Number",FALSE,FALSE,FALSE,'',1);  //'Item UPC'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."Label Description",FALSE,FALSE,FALSE,'',1);//'Label Description'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."Label Description 2",FALSE,FALSE,FALSE,'',1);  //'Label Description 2'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."Label Description 3",FALSE,FALSE,FALSE,'',1); //'Label Description 3'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."Label Description 4",FALSE,FALSE,FALSE,'',1); //'Label Description 4'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc.Size,FALSE,FALSE,FALSE,'',1); //'Size'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."Vendor No.",FALSE,FALSE,FALSE,'',1);  //'Supplier'
            ColumnNo += 1;
            IF Manufacturer.GET(ItemLoc."Manufacturer Code") THEN
              EnterCell(RowNo,ColumnNo,Manufacturer.Name,FALSE,FALSE,FALSE,'',1)  //'Manufacturer'
            ELSE
              EnterCell(RowNo,ColumnNo,'',FALSE,FALSE,FALSE,'',1);  //'Manufacturer'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,FORMAT(ItemLoc."Visible in Webshop"),FALSE,FALSE,FALSE,'',1);  //'Visible in Webshop'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."WebShop Title",FALSE,FALSE,FALSE,'',1);  //'Webshop Title'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."WebShop Item Category Code",FALSE,FALSE,FALSE,'',1);//'Webshop Item Category Code'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."WebShop Product Group Code",FALSE,FALSE,FALSE,'',1);  //'Webshop Product Group Code'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,FORMAT(ItemLoc."WebShop Order Minimum"),FALSE,FALSE,FALSE,'',0); //'WebShop Order Minimum'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,FORMAT(ItemLoc."WebShop Order Multiple"),FALSE,FALSE,FALSE,'',0); //'WebShop Order Multiple'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,FORMAT(ItemLoc."WebShop Gross Weight Per Pack"),FALSE,FALSE,FALSE,'',0); //'WebShop Gross Weight Per Pack'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,FORMAT(ItemLoc."WebShop Length"),FALSE,FALSE,FALSE,'',0); //'WebShop Length'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,FORMAT(ItemLoc."WebShop Width"),FALSE,FALSE,FALSE,'',0);  //'WebShop Width'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,FORMAT(ItemLoc."WebShop Height"),FALSE,FALSE,FALSE,'',1);  //'WebShop Height'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."Long Term Product Title",FALSE,FALSE,FALSE,'',1); //'Long Term Product Title'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,ItemLoc."Short Term Product Title",FALSE,FALSE,FALSE,'',1); //'Short Term Product Title'
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,FORMAT(ItemLoc."MSRP Price"),FALSE,FALSE,FALSE,'',0);  //MSRP Price
            //-->TPZ3249
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,GetItemAttribute(ItemLoc."No.",1),FALSE,FALSE,FALSE,'',1); //Do Not Sell State
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,GetItemAttribute(ItemLoc."No.",2),FALSE,FALSE,FALSE,'',1); //Restriction
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,GetItemAttribute(ItemLoc."No.",3),FALSE,FALSE,FALSE,'',1); //CA T20
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,GetItemAttribute(ItemLoc."No.",4),FALSE,FALSE,FALSE,'',1); //CA T24 JA8
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,GetItemAttribute(ItemLoc."No.",5),FALSE,FALSE,FALSE,'',1); //Supports CA T24 JA8
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,GetItemAttribute(ItemLoc."No.",6),FALSE,FALSE,FALSE,'',1); //DLC Classification
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,GetItemAttribute(ItemLoc."No.",7),FALSE,FALSE,FALSE,'',1); //DLC Product ID
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,GetItemAttribute(ItemLoc."No.",8),FALSE,FALSE,FALSE,'',1); //ENERGY STAR
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,GetItemAttribute(ItemLoc."No.",9),FALSE,FALSE,FALSE,'',1) //Order Code
            //<--TPZ3249
          //END;
        UNTIL TempItem.NEXT = 0;
        IF TopazSetupLoc.GET('PIMDATAFILEPATH','') THEN;
        IF FILE.EXISTS(TopazSetupLoc.DefaultText250 + 'Items_20'+DELCHR(FORMAT(DT2DATE(CURRENTDATETIME),0,'<Year,2>-<Month,2>-<Day,2>') + '-'+FORMAT(TIME,0,'<hours24,2><Filler Character,0>-<minutes,2>'),'=',':.\/')+'.xlsx') THEN
          FILE.ERASE(TopazSetupLoc.DefaultText250 + 'Items_20'+DELCHR(FORMAT(DT2DATE(CURRENTDATETIME),0,'<Year,2>-<Month,2>-<Day,2>') + '-'+FORMAT(TIME,0,'<hours24,2><Filler Character,0>-<minutes,2>'),'=',':.\/')+'.xlsx');
        ExporttoExcel(TopazSetupLoc.DefaultText250,'Items_20'+DELCHR(FORMAT(DT2DATE(CURRENTDATETIME),0,'<Year,2>-<Month,2>-<Day,2>') + '-'+FORMAT(TIME,0,'<hours24,2><Filler Character,0>-<minutes,2>'),'=',':.\/')+'.xlsx','Items');
      END;
    END;

    PROCEDURE ExportItemUOM@1000000003();
    VAR
      ItemUnitofMeasure@1000000000 : Record 5404;
      RowNo@1000000003 : Integer;
      ColumnNo@1000000002 : Integer;
      TopazSetupLoc@1000000001 : Record 50056;
      ItemLoc@1000000004 : Record 27;
      ItemCrossReference@1000000005 : Record 5717;
    BEGIN
      GetItemtoExport;
      TempItem.RESET;
      IF TempItem.FINDFIRST THEN BEGIN
        RowNo := 1; ColumnNo := 1; CLEAR(TempExcelBuffer); TempExcelBuffer.DELETEALL;
        EnterCell(RowNo,ColumnNo,'Item Number',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'UOM Code',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Qty. per Unit of Measure',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Visible in Webshop',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Length',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Width',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Height',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Weight',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Cubage',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Base Unit of Measure',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Cross-Reference Type',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Cross-Reference Type No.',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Cross-Reference No.',TRUE,FALSE,FALSE,'',1);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Discontinue Bar Code',TRUE,FALSE,FALSE,'',1);
        REPEAT
          ItemUnitofMeasure.RESET;
          ItemUnitofMeasure.SETRANGE("Item No.",TempItem."No.");
          IF ItemUnitofMeasure.FINDFIRST THEN
            REPEAT
              IF ItemLoc.GET(ItemUnitofMeasure."Item No.") THEN;
              //Manufacture = Topaz
              //Division = E, L, P only
              //ABC code,  all products not equal to OB,  except where Webshop Item group =SA-Legacy
              //IF (ItemUnitofMeasure.Code <> '') AND AllowtoExport(ItemLoc) THEN BEGIN
                RowNo += 1; ColumnNo := 1;
                EnterCell(RowNo,ColumnNo,ItemUnitofMeasure."Item No.",FALSE,FALSE,FALSE,'',1); //'Item Number'
                ColumnNo += 1;
                EnterCell(RowNo,ColumnNo,ItemUnitofMeasure.Code,FALSE,FALSE,FALSE,'',1);//'UOM Code'
                ColumnNo += 1;
                EnterCell(RowNo,ColumnNo,FORMAT(ItemUnitofMeasure."Qty. per Unit of Measure"),FALSE,FALSE,FALSE,'',0); //'Qty. per Unit of Measure'
                ColumnNo += 1;
                EnterCell(RowNo,ColumnNo,FORMAT(ItemUnitofMeasure."Visible in Webshop"),FALSE,FALSE,FALSE,'',1); //'Visible in Webshop'
                ColumnNo += 1;
                EnterCell(RowNo,ColumnNo,FORMAT(ItemUnitofMeasure.Length),FALSE,FALSE,FALSE,'',0);//'Length'
                ColumnNo += 1;
                EnterCell(RowNo,ColumnNo,FORMAT(ItemUnitofMeasure.Width),FALSE,FALSE,FALSE,'',0);//'Width'
                ColumnNo += 1;
                EnterCell(RowNo,ColumnNo,FORMAT(ItemUnitofMeasure.Height),FALSE,FALSE,FALSE,'',1); //'Height'
                ColumnNo += 1;
                EnterCell(RowNo,ColumnNo,FORMAT(ItemUnitofMeasure.Weight),FALSE,FALSE,FALSE,'',0);//'Weight'
                ColumnNo += 1;
                EnterCell(RowNo,ColumnNo,FORMAT(ItemUnitofMeasure.Cubage),FALSE,FALSE,FALSE,'',0);//Cubage
                ColumnNo += 1;
                EnterCell(RowNo,ColumnNo,ItemLoc."Base Unit of Measure",FALSE,FALSE,FALSE,'',1); //'Base Unit of Measure'
                ColumnNo += 1;
                ItemCrossReference.RESET;
                ItemCrossReference.SETRANGE("Item No.",ItemLoc."No.");
                ItemCrossReference.SETRANGE("Unit of Measure",ItemUnitofMeasure.Code);
                ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::"Bar Code");
                IF ItemCrossReference.FINDFIRST THEN BEGIN
                  EnterCell(RowNo,ColumnNo,FORMAT(ItemCrossReference."Cross-Reference Type"),FALSE,FALSE,FALSE,'',1); //'Cross-Reference Type'
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,ItemCrossReference."Cross-Reference Type No.",FALSE,FALSE,FALSE,'',1); //'Cross-Reference Type No.'
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,ItemCrossReference."Cross-Reference No.",FALSE,FALSE,FALSE,'',1); //'Cross-Reference No.'
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,FORMAT(ItemCrossReference."Discontinue Bar Code"),FALSE,FALSE,FALSE,'',1); //'Discontinue Bar Code'
                END ELSE BEGIN
                  EnterCell(RowNo,ColumnNo,'',FALSE,FALSE,FALSE,'',1); //'Cross-Reference Type'
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'',FALSE,FALSE,FALSE,'',1); //'Cross-Reference Type No.'
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'',FALSE,FALSE,FALSE,'',1); //'Cross-Reference No.'
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'',FALSE,FALSE,FALSE,'',1); //'Discontinue Bar Code'
                END;
              //END;
            UNTIL ItemUnitofMeasure.NEXT = 0;
        UNTIL TempItem.NEXT = 0;
        IF TopazSetupLoc.GET('PIMDATAFILEPATH','') THEN;
        IF FILE.EXISTS(TopazSetupLoc.DefaultText250 + 'UOM_Information_20'+DELCHR(FORMAT(DT2DATE(CURRENTDATETIME),0,'<Year,2>-<Month,2>-<Day,2>') + '-'+FORMAT(TIME,0,'<hours24,2><Filler Character,0>-<minutes,2>'),'=',':.\/')+'.xlsx') THEN
          FILE.ERASE(TopazSetupLoc.DefaultText250 + 'UOM_Information_20'+DELCHR(FORMAT(DT2DATE(CURRENTDATETIME),0,'<Year,2>-<Month,2>-<Day,2>') + '-'+FORMAT(TIME,0,'<hours24,2><Filler Character,0>-<minutes,2>'),'=',':.\/')+'.xlsx');
        ExporttoExcel(TopazSetupLoc.DefaultText250,'UOM_Information_20'+DELCHR(FORMAT(DT2DATE(CURRENTDATETIME),0,'<Year,2>-<Month,2>-<Day,2>') + '-'+FORMAT(TIME,0,'<hours24,2><Filler Character,0>-<minutes,2>'),'=',':.\/')+'.xlsx','UOM Information');
      END;
    END;

    LOCAL PROCEDURE ExporttoExcel@1000000006(FilePath@1000000002 : Text[250];FileName@1000000000 : Text[250];SheetName@1000000001 : Text[250]);
    BEGIN
      TempExcelBuffer.CreateBook(FilePath+FileName,SheetName);
      TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
      TempExcelBuffer.CloseBook;
      // TempExcelBuffer.OpenExcel;
      // TempExcelBuffer.GiveUserControl;
      //TempExcelBuffer.CreateBookandSaveExcel(FilePath,FileName,SheetName,'',COMPANYNAME,'');
    END;

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Bold@1003 : Boolean;Italic@1000000000 : Boolean;UnderLine@1000000001 : Boolean;Format@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := '';
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := Format;
      TempExcelBuffer."Cell Type" := CellType;//Number,Text,Date,Time
      TempExcelBuffer.INSERT;
    END;

    PROCEDURE AllowtoExport@1000000016(ItemPara@1000000000 : Record 27) : Boolean;
    VAR
      ItemAttributeValueMapping@1000000001 : Record 7505;
      ItemAttributeValue@1000000002 : Record 7501;
    BEGIN
      {Code Commented as per new request ticket 39094
      IF (ItemPara."ABC Code" = 'OB') THEN BEGIN
        CLEAR(ItemAttributeValueMapping);
        ItemAttributeValueMapping.SETRANGE("Table ID",DATABASE::Item);
        ItemAttributeValueMapping.SETRANGE("No.",ItemPara."No.");
        ItemAttributeValueMapping.SETRANGE("Item Attribute ID",1059);
        ItemAttributeValueMapping.SETRANGE("Item Attribute Value ID",1078);
        IF NOT ItemAttributeValueMapping.FINDFIRST THEN
          EXIT(FALSE);
      END ELSE BEGIN
        //IF (ItemPara."WebShop Item Category Code" <> 'SA-LEGACY')  THEN EXIT(FALSE);
        IF ItemPara.Blocked THEN
          EXIT(FALSE);
      }
        IF ItemPara."Manufacturer Code" <> 'TOPAZ' THEN
          EXIT(FALSE);
        IF (ItemPara."Shortcut Dimension 5 Code" <> 'P') AND (ItemPara."Shortcut Dimension 5 Code" <> 'L')
          AND (ItemPara."Shortcut Dimension 5 Code" <> 'E') THEN
          EXIT(FALSE);
      {Code Commented as per new request ticket 39094
        CLEAR(ItemAttributeValueMapping);
        ItemAttributeValueMapping.SETRANGE("Table ID",DATABASE::Item);
        ItemAttributeValueMapping.SETRANGE("No.",ItemPara."No.");
        ItemAttributeValueMapping.SETRANGE("Item Attribute ID",1059);
        ItemAttributeValueMapping.SETRANGE("Item Attribute Value ID",1078);
        IF NOT ItemAttributeValueMapping.FINDFIRST THEN
          EXIT(FALSE);
      END;
      }
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetItemtoExport@1000000005();
    VAR
      IUOM@1000000000 : Record 5404;
      ItemLoc@1000000001 : Record 27;
    BEGIN
      TempItem.RESET;
      TempItem.DELETEALL;
      ItemLoc.RESET;
      // ItemLoc.SETRANGE(Blocked,FALSE);
      // ItemLoc.SETRANGE("Manufacturer Code",'TOPAZ');
      // ItemLoc.SETFILTER("Shortcut Dimension 5 Code",'%1|%2|%3','E','L','P');
      ItemLoc.SETFILTER("Last Date Modified",'=%1',CALCDATE('<-1D>',TODAY));
      IF ItemLoc.FINDFIRST THEN
        REPEAT
          IF NOT TempItem.GET(ItemLoc."No.") AND AllowtoExport(ItemLoc) THEN BEGIN
            TempItem.INIT;
            TempItem.TRANSFERFIELDS(ItemLoc);
            TempItem.INSERT;
          END;
        UNTIL ItemLoc.NEXT = 0;

      CLEAR(ItemLoc);
      IUOM.RESET;
      IUOM.SETFILTER("Item No.",'<>%1','');
      IUOM.SETFILTER("Last Date Modified",'=%1',CALCDATE('<-1D>',TODAY));
      IF IUOM.FINDFIRST THEN
        REPEAT
          IF ItemLoc.GET(IUOM."Item No.") AND AllowtoExport(ItemLoc) AND NOT TempItem.GET(IUOM."Item No.") THEN BEGIN
            TempItem.INIT;
            TempItem.TRANSFERFIELDS(ItemLoc);
            TempItem.INSERT;
          END;
        UNTIL IUOM.NEXT = 0;
    END;

    LOCAL PROCEDURE GetItemAttribute@1000000008(ItemNoPara@1000000000 : Code[20];AttrPara@1000000001 : Integer) : Text;
    VAR
      ItemAttributeValueMapping@1000000003 : Record 7505;
      ItemAttributeValue@1000000002 : Record 7501;
      T7500@1000000004 : Record 7500;
    BEGIN
      //TPZ3249
      CLEAR(ItemAttributeValueMapping);
      ItemAttributeValueMapping.SETRANGE("Table ID",DATABASE::Item);
      ItemAttributeValueMapping.SETRANGE("No.",ItemNoPara);
      IF AttrPara = 1 THEN
        ItemAttributeValueMapping.SETRANGE("Item Attribute ID",1) //Do Not Sell State
      ELSE IF AttrPara = 2 THEN
        ItemAttributeValueMapping.SETRANGE("Item Attribute ID",2) //Restriction
      ELSE IF AttrPara = 3 THEN
        ItemAttributeValueMapping.SETRANGE("Item Attribute ID",1047) //CA T20
      ELSE IF AttrPara = 4 THEN
        ItemAttributeValueMapping.SETRANGE("Item Attribute ID",1048) //CA T24 JA8
      ELSE IF AttrPara = 5 THEN
        ItemAttributeValueMapping.SETRANGE("Item Attribute ID",1049) //Supports CA T24 JA8
      ELSE IF AttrPara = 6 THEN
        ItemAttributeValueMapping.SETRANGE("Item Attribute ID",1054) //DLC Classification
      ELSE IF AttrPara = 7 THEN
        ItemAttributeValueMapping.SETRANGE("Item Attribute ID",1055)//DLC Product ID
      ELSE IF AttrPara = 8 THEN
        ItemAttributeValueMapping.SETRANGE("Item Attribute ID",1056) //ENERGY STAR
      ELSE IF AttrPara = 9 THEN
        ItemAttributeValueMapping.SETRANGE("Item Attribute ID",1060) //Order Code
      //-->TPZ3401
      ELSE IF AttrPara = 10 THEN
        ItemAttributeValueMapping.SETRANGE("Item Attribute ID",1058); //DLC Primary Use
      //<--TPZ3401
      IF ItemAttributeValueMapping.FINDFIRST THEN BEGIN
        IF ItemAttributeValue.GET(ItemAttributeValueMapping."Item Attribute ID",ItemAttributeValueMapping."Item Attribute Value ID") THEN
          EXIT(ItemAttributeValue.Value);
      END;
      EXIT('');
    END;

    BEGIN
    {
      PKS  New object created
      001 TPZ3401 PKS 10282021 Added new attribute
    }
    END.
  }
}

