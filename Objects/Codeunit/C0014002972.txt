OBJECT Codeunit 14002972 RF Pallet Phys. Inventory
{
  OBJECT-PROPERTIES
  {
    Date=08/21/18;
    Time=12:00:00 PM;
    Version List=RF1.50.13;
  }
  PROPERTIES
  {
    TableNo=7700;
    OnRun=VAR
            MiniFormMgmt@1240020000 : Codeunit 7702;
          BEGIN
            MiniFormMgmt.Initialize(
              MiniformHeader,Rec,DOMxmlin,ReturnedNode,
              RootNode,XMLDOMMgmt,ADCSCommunication,LoginID,
              CurrentCode,StackCode,WhseEmpId,LocationFilter);

            IF Code <> CurrentCode THEN
              PrepareData
            ELSE
              ProcessInput;

            CLEAR(DOMxmlin);
          END;

  }
  CODE
  {
    VAR
      MiniformHeader@1240020021 : Record 7700;
      PalletJournalLine@1240020020 : Record 14002966;
      RFEmployeeSetup@1240020019 : Record 14002802;
      ItemUnitofMeasure@1240020060 : Record 5404;
      XMLDOMMgmt@1240020018 : Codeunit 6224;
      ADCSCommunication@1240020017 : Codeunit 7701;
      ADCSNasStartup@1240020016 : Codeunit 7700;
      DOMxmlin@1240020014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ReturnedNode@1240020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      RootNode@1240020012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Remark@1240020011 : Text[250];
      LoginID@1240020015 : Text[250];
      WhseEmpId@1240020033 : Text[250];
      LocationFilter@1240020010 : Text[250];
      CurrentCode@1240020009 : Text[250];
      StackCode@1240020008 : Text[250];
      RFGroupNoFilter@1240020007 : Text[30];
      Status@1240020006 : Text[30];
      NextStatus@1240020005 : Text[30];
      ActiveInputField@1240020004 : Integer;
      RecRef@1240020003 : RecordRef;
      RFEmployeeSetupRetrieved@1240020002 : Boolean;
      LastLine@1240020000 : Boolean;
      Text000@1240020055 : TextConst 'ENU=Function not Found';
      Text001@1240020054 : TextConst 'ENU=Not all items counted';
      Text002@1240020053 : TextConst 'ENU=Add Item not allowed';
      Text004@1240020051 : TextConst 'ENU=Invalid %1.';
      Text005@1240020050 : TextConst 'ENU=No Value entered';
      Text006@1240020049 : TextConst 'ENU=No input Node found';
      Text007@1240020048 : TextConst 'ENU=Record not found';
      Text008@1240020047 : TextConst 'ENU=End of Document';
      Text010@1240020046 : TextConst 'ENU=Invalid Bin';
      Text011@1240020045 : TextConst 'ENU=Item in Phys. Invt.';
      Text012@1240020044 : TextConst 'ENU=No Lines available';
      Text013@1240020043 : TextConst 'ENU=Item exists in Bin';
      Text015@1240020041 : TextConst 'ENU=Cannot change Variant';
      Text016@1240020040 : TextConst 'ENU=Cannot change Bin';
      Text017@1240020039 : TextConst 'ENU=Bin not in Phys. Inv.';
      Text018@1240020038 : TextConst 'ENU=Pallet not in Phys. Inv.';
      Text019@1240020037 : TextConst 'ENU=Box not in Phys. Inv.';
      Text020@1240020036 : TextConst 'ENU=Wrong Lot No.';
      Text024@1240020032 : TextConst 'ENU=Already Counted';
      Text025@1240020031 : TextConst 'ENU=Box already on Pallet';
      Text026@1240020030 : TextConst 'ENU=Box doesn''t exist';
      Text027@1240020029 : TextConst 'ENU=Wrong Box-Item for Pallet';
      Text028@1240020028 : TextConst 'ENU=Item already in Box';
      Text029@1240020027 : TextConst 'ENU=Invalid Box and Item';
      Text030@1240020026 : TextConst 'ENU=Invalid Lot No.';
      Text031@1240020025 : TextConst 'ENU=No Pallet selected';
      Text032@1240020024 : TextConst 'ENU=First Run: Add Item';
      Text033@1240020023 : TextConst 'ENU=Pallet not found';
      Text034@1240020022 : TextConst 'ENU=Pallet already Captured';
      Text035@1240020056 : TextConst 'ENU=Batch not Found';
      Text036@1240020057 : TextConst 'ENU=''Find'' Pallet first';
      Text037@1240020059 : TextConst 'ENU=Use: F3 - Pallet Found';
      Text038@1240020001 : TextConst 'ENU=LP Adj. Bin not setup';

    PROCEDURE ProcessInput@1240020000();
    VAR
      FuncGroup@1240020021 : Record 7702;
      MiniformLine@1240020020 : Record 7701;
      PalletJournalLine2@1240020019 : Record 14002966;
      PalletJournalLine3@1240020018 : Record 14002966;
      PalletJournalBatch@1240020017 : Record 14002965;
      RFEmployeeMenuFilter@1240020016 : Record 14002806;
      Bin@1240020015 : Record 7354;
      PalletBinContent@1240020013 : Record 14002963;
      BoxHandlingLine@1240020022 : Record 14002970;
      ItemIdent@1240020023 : Record 7704;
      Location@1240020001 : Record 14;
      RFLocationSetup@1240020010 : Record 14099031;
      LicensePlateMgt@1240020011 : Codeunit 14002971;
      ReturnedNode2@1240020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TableNo@1240020009 : Integer;
      RecordId@1240020008 : RecordID;
      FldNo@1240020007 : Integer;
      TextValue@1240020006 : Text[250];
      FieldID@1240020005 : Text[250];
      AddLine@1240020004 : Text[250];
      NewLineNo@1240020003 : Integer;
      Command@1240020000 : Code[10];
    BEGIN
      PalletJournalLine.SETCURRENTKEY(
        "Location Code","Bin Code","Pallet No.","Box No.","Item No.","Variant Code",
        "Unit of Measure Code","Lot No.","Serial No.");

      IF XMLDOMMgmt.FindNode(RootNode,'Header/Input',ReturnedNode) THEN
        TextValue := ReturnedNode.InnerText
      ELSE
        ERROR(Text006);

      EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'));
      EVALUATE(Status,ADCSCommunication.GetNodeAttribute(ReturnedNode,'NextStatus'));
      EVALUATE(RecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'));
      EVALUATE(AddLine,ADCSCommunication.GetNodeAttribute(ReturnedNode,'ADD'));
      IF RecRef.GET(RecordId) THEN BEGIN
        RecRef.SETTABLE(PalletJournalLine);
        GetRFEmployeeSetup;
        PalletJournalLine.SETRANGE("Journal Template Name",PalletJournalLine."Journal Template Name");
        PalletJournalLine.SETRANGE("Journal Batch Name",PalletJournalLine."Journal Batch Name");
        PalletJournalLine.SETRANGE("Location Code",PalletJournalLine."Location Code");
        PalletJournalLine.SETRANGE(Counted,FALSE);
        ADCSCommunication.SetRFGroupFilter(GetRFGroupNoFilter(PalletJournalLine,FALSE));

        RecRef.GETTABLE(PalletJournalLine);
        ADCSCommunication.SetRecRef(RecRef);
      END ELSE BEGIN
        ADCSCommunication.RunPreviousMiniform(DOMxmlin);
        EXIT;
      END;

      FuncGroup.KeyDef := ADCSCommunication.GetFunctionKey(MiniformHeader.Code,TextValue);
      ActiveInputField := 1;

      CASE FuncGroup.KeyDef OF
        FuncGroup.KeyDef::Esc:
          BEGIN
            ADCSCommunication.RunPreviousMiniform(DOMxmlin);
            IF PalletJournalLine."Added from RF" THEN
              PalletJournalLine.DELETE;
          END;
        FuncGroup.KeyDef::Reset:
          BEGIN
            GetRFEmployeeSetup;
            IF RFEmployeeSetup."Local Menu Button" IN
               [RFEmployeeSetup."Local Menu Button"::F4,
                RFEmployeeSetup."Local Menu Button"::"F4 (F3 Post)"]
            THEN BEGIN
              MiniformHeader.TESTFIELD("Local Menu Miniform Code");
              ADCSCommunication.SetExtraValue('PrimaryMiniForm',MiniformHeader.Code);
              MiniformHeader.GET(MiniformHeader."Local Menu Miniform Code");
              IF RFEmployeeMenuFilter.GET(
                   RFEmployeeSetup.Code,MiniformHeader.Code)
              THEN
                ADCSCommunication.SetRFFunctionFilter(
                  RFEmployeeMenuFilter."RF Function Filter");
              ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,1,'',LoginID);
              ADCSCommunication.GetReturnXML(DOMxmlin);
              ADCSNasStartup.SendXMLReply(DOMxmlin);

              EXIT;
            END;
          END;
        FuncGroup.KeyDef::Register:
          BEGIN
            GetRFEmployeeSetup;
            IF RFEmployeeSetup."Local Menu Button" IN [RFEmployeeSetup."Local Menu Button"::F3]
            THEN BEGIN
              MiniformHeader.TESTFIELD("Local Menu Miniform Code");
              ADCSCommunication.SetExtraValue('PrimaryMiniForm',MiniformHeader.Code);
              MiniformHeader.GET(MiniformHeader."Local Menu Miniform Code");
              IF RFEmployeeMenuFilter.GET(
                   RFEmployeeSetup.Code,MiniformHeader.Code)
              THEN
                ADCSCommunication.SetRFFunctionFilter(
                  RFEmployeeMenuFilter."RF Function Filter");
              ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,1,'',LoginID);
              ADCSCommunication.GetReturnXML(DOMxmlin);
              ADCSNasStartup.SendXMLReply(DOMxmlin);

              EXIT;
            END;
          END;
        FuncGroup.KeyDef::Input:
          BEGIN
            FieldID := ADCSCommunication.GetNodeAttribute(ReturnedNode,'FieldID');
            Command := '';
            IF STRLEN(TextValue) >= 3 THEN
              IF COPYSTR(TextValue,1,2) = '//' THEN
                Command := COPYSTR(TextValue,3,MAXSTRLEN(Command));
            IF (FieldID = '') OR (Command <> '') THEN BEGIN
              GetRFEmployeeSetup;

              IF Command <> '' THEN BEGIN
                MiniformLine.RESET;
                MiniformLine.SETRANGE("Miniform Code",MiniformHeader."Local Menu Miniform Code");
                MiniformLine.SETRANGE(Hide,FALSE);
                IF GetRFGroupNoFilter(PalletJournalLine,FALSE) <> '' THEN
                  MiniformLine.SETFILTER("RF Group No.",GetRFGroupNoFilter(PalletJournalLine,FALSE));
                IF RFEmployeeMenuFilter.GET(
                     RFEmployeeSetup.Code,MiniformHeader."Local Menu Miniform Code")
                THEN
                  MiniformLine.SETFILTER("RF Function No.",RFEmployeeMenuFilter."RF Function Filter");
                MiniformLine.SETRANGE(MiniformLine."Command Text",Command);
                MiniformLine.FINDFIRST;
              END ELSE BEGIN
                MiniformLine.RESET;
                MiniformLine.SETRANGE("Miniform Code",MiniformHeader.Code);
                MiniformLine.SETRANGE(Hide,FALSE);
                 IF GetRFGroupNoFilter(PalletJournalLine,FALSE) <> '' THEN
                   MiniformLine.SETFILTER("RF Group No.",GetRFGroupNoFilter(PalletJournalLine,FALSE));
                IF RFEmployeeMenuFilter.GET(RFEmployeeSetup.Code,MiniformHeader.Code) THEN
                  MiniformLine.SETFILTER("RF Function No.",RFEmployeeMenuFilter."RF Function Filter");
                MiniformLine.SETRANGE(Text,ReturnedNode.InnerText);
                MiniformLine.FINDFIRST;
                XMLDOMMgmt.FindNode(RootNode,'ExtraInfo',ReturnedNode2);
                MiniformHeader.Code :=
                  ADCSCommunication.GetNodeAttribute(ReturnedNode2,'PrimaryMiniForm');
                MiniformHeader.GET(MiniformHeader.Code);
              END;
              CASE MiniformLine."RF Function No." OF
                0: // Escape or Return
                  BEGIN
                    PalletJournalLine2.RESET;
                    PalletJournalLine2.SETRANGE(
                      "Journal Template Name",PalletJournalLine."Journal Template Name");
                    PalletJournalLine2.SETRANGE(
                      "Journal Batch Name",PalletJournalLine."Journal Batch Name");
                    PalletJournalLine2.SETRANGE("Added from RF",TRUE);
                    PalletJournalLine2.SETFILTER("Item No.",'=%1','');
                    PalletJournalLine2.DELETEALL;
                    NextStatus := 'Bin';
                    SetNextRFGroupNoFilter(NextStatus);
                  END;
                1: // Register Document
                  BEGIN
                    RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
                    CASE RFEmployeeSetup."Pallet Counting Type" OF
                      RFEmployeeSetup."Pallet Counting Type"::"Real Time":
                        BEGIN
                          PalletJournalLine2.RESET;
                          PalletJournalLine2.SETRANGE(
                            "Journal Template Name",PalletJournalLine."Journal Template Name");
                          PalletJournalLine2.SETRANGE(
                            "Journal Batch Name",PalletJournalLine."Journal Batch Name");
                          PalletJournalLine2.DELETEALL;
                          ADCSCommunication.RunPreviousMiniform(DOMxmlin);
                          EXIT;

                        END;
                      RFEmployeeSetup."Pallet Counting Type"::"1":
                        BEGIN
                          PalletJournalLine2.RESET;
                          PalletJournalLine2.SETRANGE(
                            "Journal Template Name",PalletJournalLine."Journal Template Name");
                          PalletJournalLine2.SETRANGE(
                            "Journal Batch Name",PalletJournalLine."Journal Batch Name");
                          PalletJournalLine2.SETRANGE(Counted,FALSE);

                          IF PalletJournalLine2.FINDFIRST THEN BEGIN
                            IF RFEmployeeSetup."Delete uncounted Phys. Inv." THEN BEGIN
                              REPEAT
                                PalletJournalLine2.DELETE;
                              UNTIL PalletJournalLine2.NEXT = 0;
                            END ELSE
                              ERROR(Text001);
                          END ELSE BEGIN
                            PalletJournalBatch.RESET;
                            IF PalletJournalBatch.GET(PalletJournalLine."Journal Template Name",
                              PalletJournalLine."Journal Batch Name",PalletJournalLine."Location Code")
                            THEN BEGIN
                              PalletJournalBatch."Ready to Register" := TRUE;
                              PalletJournalBatch.MODIFY;
                            END ELSE BEGIN
                              ERROR(Text035);
                            END;
                          END;

                          RegisterPalletJournalBatch(PalletJournalBatch);
                          ADCSCommunication.RunPreviousMiniform(DOMxmlin);
                          EXIT;

                        END;
                      RFEmployeeSetup."Pallet Counting Type"::"2":
                        BEGIN
                          PalletJournalLine2.RESET;
                          PalletJournalLine2.SETRANGE(
                            "Journal Template Name",PalletJournalLine."Journal Template Name");
                          PalletJournalLine2.SETRANGE(
                            "Journal Batch Name",PalletJournalLine."Journal Batch Name");
                          PalletJournalLine2.SETRANGE(Counted,FALSE);
                          IF RFEmployeeSetup."Delete uncounted Phys. Inv." THEN
                            IF PalletJournalLine2.FINDFIRST THEN
                              REPEAT
                                PalletJournalLine2.DELETE;
                              UNTIL PalletJournalLine2.NEXT = 0;

                          IF PalletJournalLine2.FINDFIRST THEN
                            ERROR(Text001);

                          PalletJournalBatch.RESET;
                          IF PalletJournalBatch.GET(PalletJournalLine."Journal Template Name",
                            PalletJournalLine."Journal Batch Name",PalletJournalLine."Location Code")
                          THEN BEGIN
                            PalletJournalBatch."Ready to Register" := TRUE;
                            PalletJournalBatch."Ready at Date" := WORKDATE;
                            PalletJournalBatch."Ready at Time" := TIME;
                            PalletJournalBatch."Ready by Warehouse Employee" := WhseEmpId;
                            PalletJournalBatch.MODIFY;
                          END ELSE BEGIN
                            ERROR(Text035);
                          END;

                          ADCSCommunication.RunPreviousMiniform(DOMxmlin);
                          EXIT;
                        END;
                      ELSE BEGIN
                        ERROR(Text000);
                      END;
                    END;
                  END;

                2: // Reset Document
                  BEGIN
                    GetRFEmployeeSetup;

                    PalletJournalLine2.RESET;
                    PalletJournalLine2.SETRANGE(
                      "Journal Template Name",PalletJournalLine."Journal Template Name");
                    PalletJournalLine2.SETRANGE(
                      "Journal Batch Name",PalletJournalLine."Journal Batch Name");
                    IF PalletJournalLine2.FINDFIRST THEN
                      REPEAT
                        PalletJournalLine2.Counted := FALSE;
                        GetPalletBinContent(PalletJournalLine2,PalletBinContent);
                        PalletJournalLine2."Qty. (Calculated)" := PalletBinContent.Quantity;
                        PalletJournalLine2."Qty. (Calculated) (Base)" := PalletBinContent."Quantity (Base)";
                        PalletJournalLine2."Qty. (Phys. Inventory)" := PalletBinContent.Quantity;
                        PalletJournalLine2."First Scan Date" := 0D;

                        PalletJournalLine2."First Scan Time" := 0T;
                        PalletJournalLine2."Last Scan Date" := 0D;
                        PalletJournalLine2."Last Scan Time" := 0T;
                        PalletJournalLine2."Warehouse Employee Code" := '';
                        IF PalletJournalLine2."Added from RF" THEN
                          PalletJournalLine2.DELETE
                        ELSE
                          PalletJournalLine2.MODIFY;
                      UNTIL PalletJournalLine2.NEXT = 0;

                    NextStatus := 'Bin';
                    SetNextRFGroupNoFilter(NextStatus);
                    PalletJournalLine.RESET;
                    PalletJournalLine.SETRANGE(
                      "Journal Template Name",PalletJournalLine."Journal Template Name");
                    PalletJournalLine.SETRANGE(
                      "Journal Batch Name",PalletJournalLine."Journal Batch Name");
                    IF PalletJournalLine.FINDFIRST THEN ;
                  END;
                3: // Clear User
                  BEGIN
                    PalletJournalBatch.GET(
                      PalletJournalLine."Journal Template Name",PalletJournalLine."Journal Batch Name",
                      PalletJournalLine."Location Code");
                    PalletJournalBatch.VALIDATE("Assigned User ID",'');
                    PalletJournalBatch.MODIFY;

                    ADCSCommunication.RunPreviousMiniform(DOMxmlin);
                    EXIT;
                  END;
                4: // Add Item
                  BEGIN
                    GetRFEmployeeSetup;
                    IF RFEmployeeSetup."Allow Phys. Invt. Add Item" THEN BEGIN
                      PalletJournalLine3.RESET;
                      PalletJournalLine2.LOCKTABLE(TRUE);
                      PalletJournalLine2.SETRANGE("Journal Template Name",PalletJournalLine."Journal Template Name");
                      PalletJournalLine2.SETRANGE("Journal Batch Name",PalletJournalLine."Journal Batch Name");
                      PalletJournalLine2.SETRANGE("Location Code",PalletJournalLine."Location Code");
                      IF PalletJournalLine2.FINDLAST THEN
                        PalletJournalLine3."Line No." := PalletJournalLine2."Line No." + 10000
                      ELSE
                        PalletJournalLine3."Line No." := 10000;
                      PalletJournalLine3.INIT;
                      PalletJournalLine3."Journal Template Name" := PalletJournalLine."Journal Template Name";
                      PalletJournalLine3."Journal Batch Name" := PalletJournalLine."Journal Batch Name";
                      PalletJournalLine3."Added from RF" := TRUE;
                      PalletJournalLine3."Location Code" := PalletJournalLine."Location Code";
                      IF PalletJournalLine3.INSERT THEN PalletJournalLine.MODIFY;

                      PalletJournalLine := PalletJournalLine3;

                      NextStatus := 'Bin';
                      SetNextRFGroupNoFilter(NextStatus);
                      ADCSCommunication.SetExtraValue('ADD','yes');
                      RecRef.GETTABLE(PalletJournalLine);
                      ADCSCommunication.SetRecRef(RecRef);
                    END ELSE
                      Remark := Text002;
                  END;
                5: // Reset Line
                  BEGIN
                    GetRFEmployeeSetup;
                    PalletJournalLine."Qty. (Phys. Inventory)" := 0;
                    PalletJournalLine.Counted := FALSE;
                    PalletJournalLine."Qty. (Phys. Inventory, Hide)" := 0;
                    PalletJournalLine."First Scan Date" := 0D;
                    PalletJournalLine."First Scan Time" := 0T;
                    PalletJournalLine."Last Scan Date" := 0D;
                    PalletJournalLine."Last Scan Time" := 0T;
                    PalletJournalLine."Warehouse Employee Code" := '';
                    PalletJournalLine.MODIFY;
                    IF PalletJournalLine."Added from RF" THEN BEGIN
                      PalletJournalLine2.SETRANGE("Journal Template Name",PalletJournalLine."Journal Template Name");
                      PalletJournalLine2.SETRANGE("Journal Batch Name",PalletJournalLine."Journal Batch Name");
                      PalletJournalLine2.SETRANGE(Counted,FALSE);
                      PalletJournalLine.DELETE;
                      IF PalletJournalLine2.FINDFIRST THEN
                        PalletJournalLine := PalletJournalLine2;
                    END;
                    IF NextStatus = '' THEN BEGIN
                      NextStatus := 'Bin';
                      SetNextRFGroupNoFilter(NextStatus);
                    END;

                  END;
                6: //  Finish Pallet
                  BEGIN
                    RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
                    PalletJournalLine2.RESET;
                    PalletJournalLine2.SETRANGE("Journal Template Name",PalletJournalLine."Journal Template Name");
                    PalletJournalLine2.SETRANGE("Journal Batch Name",PalletJournalLine."Journal Batch Name");
                    PalletJournalLine2.SETRANGE("Location Code",PalletJournalLine."Location Code");
                    PalletJournalLine2.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
                    PalletJournalLine2.SETRANGE("Pallet No.",PalletJournalLine."Pallet No.");
                    PalletJournalLine2.SETRANGE(Counted,FALSE);
                    IF PalletJournalLine2.FINDFIRST THEN BEGIN
                      IF PalletJournalLine2."Item No." = '' THEN
                        ERROR(Text036);
                      REPEAT
                        PalletJournalLine2."Qty. (Phys. Inventory)" := 0;
                        PalletJournalLine2.Counted := TRUE;
                        PalletJournalLine2.MODIFY;
                        IF RFEmployeeSetup."Pallet Counting Type" =
                          RFEmployeeSetup."Pallet Counting Type"::"Real Time"
                        THEN BEGIN
                          GetPalletBinContent(PalletJournalLine2,PalletBinContent);
                          BoxHandlingLine.RESET;
                          ItemIdent."Item No." := PalletJournalLine2."Item No.";
                          ItemIdent."Variant Code" := PalletJournalLine2."Variant Code";
                          ItemIdent."Unit of Measure Code" :=
                            PalletJournalLine2."Unit of Measure Code";
                          LicensePlateMgt.CreateTempBoxHandlingLine(
                            BoxHandlingLine,PalletBinContent,
                            PalletJournalLine2."Warehouse Employee Code");
                          LicensePlateMgt.AdjustStorageIDQty(BoxHandlingLine,
                            PalletJournalLine2."Qty. (Phys. Inventory)",
                          PalletJournalLine2."Warehouse Employee Code",Remark);
                          LicensePlateMgt.AdjustQuantity(PalletJournalLine2."Pallet No.",
                            PalletJournalLine2."Box No.",ItemIdent,PalletJournalLine2."Lot No.",
                            PalletJournalLine2."Serial No.",
                            PalletJournalLine2."Qty. (Phys. Inventory)",
                            PalletJournalLine2."Warehouse Employee Code",Remark);
                        END;

                      UNTIL PalletJournalLine2.NEXT = 0;
                    END;

                    PalletJournalLine2.RESET;
                    PalletJournalLine2.SETCURRENTKEY("Bin Code","Pallet No.","Box No.",Counted);
                    PalletJournalLine2.SETRANGE("Journal Template Name",PalletJournalLine."Journal Template Name");
                    PalletJournalLine2.SETRANGE("Journal Batch Name",PalletJournalLine."Journal Batch Name");
                    PalletJournalLine2.SETRANGE(Counted,FALSE);
                    IF NOT PalletJournalLine2.FINDFIRST THEN BEGIN
                      Remark := Text008;
                      NextStatus := 'Bin';
                    END;

                    IF Remark = '' THEN BEGIN
                      NextStatus := 'Bin';
                      PalletJournalLine := PalletJournalLine2;
                    END;
                    SetNextRFGroupNoFilter(NextStatus);
                  END;
                7: //  Confirm Pallet
                  BEGIN
                    RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
                    PalletJournalLine2.RESET;
                    PalletJournalLine2.SETRANGE("Journal Template Name",
                      PalletJournalLine."Journal Template Name");
                    PalletJournalLine2.SETRANGE("Journal Batch Name",
                      PalletJournalLine."Journal Batch Name");
                    PalletJournalLine2.SETRANGE("Location Code",PalletJournalLine."Location Code");
                    PalletJournalLine2.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
                    PalletJournalLine2.SETRANGE("Pallet No.",PalletJournalLine."Pallet No.");
                    PalletJournalLine2.SETRANGE(Counted,FALSE);
                    IF PalletJournalLine2.FINDFIRST THEN BEGIN
                      IF PalletJournalLine2."Item No." = '' THEN
                        ERROR(Text036);
                      REPEAT
                        GetPalletBinContent(PalletJournalLine2,PalletBinContent);
                        PalletJournalLine2."Qty. (Calculated)" := PalletBinContent.Quantity;
                        PalletJournalLine2."Qty. (Calculated) (Base)" :=
                          PalletBinContent."Quantity (Base)";
                        PalletJournalLine2."Qty. (Phys. Inventory)" := PalletBinContent.Quantity;
                        PalletJournalLine2.Counted := TRUE;
                        PalletJournalLine2.MODIFY;

                        IF RFEmployeeSetup."Pallet Counting Type" =
                          RFEmployeeSetup."Pallet Counting Type"::"Real Time"
                        THEN BEGIN
                          GetPalletBinContent(PalletJournalLine2,PalletBinContent);
                          BoxHandlingLine.RESET;
                          ItemIdent."Item No." := PalletJournalLine2."Item No.";
                          ItemIdent."Variant Code" := PalletJournalLine2."Variant Code";
                          ItemIdent."Unit of Measure Code" :=
                            PalletJournalLine2."Unit of Measure Code";
                          LicensePlateMgt.CreateTempBoxHandlingLine(BoxHandlingLine,PalletBinContent,
                            PalletJournalLine2."Warehouse Employee Code");
                          LicensePlateMgt.AdjustStorageIDQty(BoxHandlingLine,
                            PalletJournalLine2."Qty. (Phys. Inventory)",
                          PalletJournalLine2."Warehouse Employee Code",Remark);
                          LicensePlateMgt.AdjustQuantity(PalletJournalLine2."Pallet No.",
                            PalletJournalLine2."Box No.",ItemIdent,PalletJournalLine2."Lot No.",
                            PalletJournalLine2."Serial No.",
                            PalletJournalLine2."Qty. (Phys. Inventory)",
                            PalletJournalLine2."Warehouse Employee Code",Remark);
                        END;
                      UNTIL PalletJournalLine2.NEXT = 0;
                    END;

                    PalletJournalLine2.RESET;
                    PalletJournalLine2.SETCURRENTKEY("Bin Code","Pallet No.","Box No.",Counted);
                    PalletJournalLine2.SETRANGE("Journal Template Name",PalletJournalLine."Journal Template Name");
                    PalletJournalLine2.SETRANGE("Journal Batch Name",PalletJournalLine."Journal Batch Name");
                    PalletJournalLine2.SETRANGE(Counted,FALSE);
                    IF NOT PalletJournalLine2.FINDFIRST THEN BEGIN
                      Remark := Text008;
                      NextStatus := 'Bin';
                    END;

                    IF Remark = '' THEN BEGIN
                      NextStatus := 'Bin';
                      PalletJournalLine := PalletJournalLine2;
                    END;
                    SetNextRFGroupNoFilter(NextStatus);
                  END;
                8:    //Pallet Found
                  BEGIN
                    IF NOT PalletJournalLine."Added from RF" THEN
                      ERROR(Text032);

                    IF PalletJournalLine."Pallet No." = '' THEN
                      ERROR(Text031);

                    PalletBinContent.RESET;
                    PalletBinContent.SETRANGE(Location,PalletJournalLine."Location Code");
                    PalletBinContent.SETRANGE("Pallet No.",PalletJournalLine."Pallet No.");
                    IF PalletBinContent.FINDFIRST THEN BEGIN
                      PalletJournalLine2.RESET;
                      PalletJournalLine2.COPY(PalletJournalLine);
                      NewLineNo := PalletJournalLine."Line No.";
                      REPEAT
                        PalletJournalLine2.RESET;
                        PalletJournalLine2.SETRANGE("Journal Template Name",PalletJournalLine."Journal Template Name");
                        PalletJournalLine2.SETRANGE("Journal Batch Name",PalletJournalLine."Journal Batch Name");
                        PalletJournalLine2.LOCKTABLE;
                        IF PalletJournalLine2.FINDLAST THEN ;

                        PalletJournalLine.INIT;
                        PalletJournalLine."Journal Template Name" := PalletJournalLine2."Journal Template Name";
                        PalletJournalLine."Journal Batch Name" := PalletJournalLine2."Journal Batch Name";
                        PalletJournalLine."Line No." := PalletJournalLine2."Line No." + 10000;
                        PalletJournalLine.INSERT;

                        PalletJournalLine."Location Code" := PalletJournalLine2."Location Code";
                        PalletJournalLine."Bin Code" := PalletJournalLine2."Bin Code";
                        PalletJournalLine."Pallet No." := PalletBinContent."Pallet No.";
                        PalletJournalLine."Box No." := PalletBinContent."Box No.";
                        PalletJournalLine.Type := PalletJournalLine.Type::Pallet;
                        PalletJournalLine."Item No." := PalletBinContent."Item No.";
                        PalletJournalLine."Variant Code" := PalletBinContent."Variant No.";
                        PalletJournalLine."Unit of Measure Code" :=
                          PalletBinContent."Unit of Measure";
                        PalletJournalLine."Quantity Calc." := PalletBinContent.Quantity;
                        PalletJournalLine."Qty. (Calculated)" := 0;
                        PalletJournalLine."Qty. (Calculated) (Base)" := 0;
                        PalletJournalLine."Qty. (Phys. Inventory)" := PalletBinContent.Quantity;
                        PalletJournalLine."Qty. (Base)" := 0;
                        PalletJournalLine."Phys. Inventory" := TRUE;
                        PalletJournalLine."Serial No." := PalletBinContent."Serial No.";
                        PalletJournalLine."Lot No."  := PalletBinContent."Lot No.";
                        PalletJournalLine."Original Qty. (Calculated)" :=
                          PalletBinContent.Quantity;
                        PalletJournalLine."Warehouse Employee Code" := WhseEmpId;
                        PalletJournalLine."Registering Date" := WORKDATE;
                        PalletJournalLine."First Scan Date" := WORKDATE;
                        PalletJournalLine."First Scan Time" := TIME;
                        PalletJournalLine."Last Scan Date" := WORKDATE;
                        PalletJournalLine."Last Scan Time" := TIME;
                        PalletJournalLine.MODIFY;
                      UNTIL PalletBinContent.NEXT = 0;

                      PalletJournalLine2.RESET;
                      PalletJournalLine2.SETRANGE("Journal Template Name",
                        PalletJournalLine2."Journal Template Name");
                      PalletJournalLine2.SETRANGE("Journal Batch Name",
                        PalletJournalLine2."Journal Batch Name");
                      PalletJournalLine2.SETRANGE("Line No.",NewLineNo);
                      PalletJournalLine2.SETRANGE("Added from RF",TRUE);
                      PalletJournalLine2.DELETEALL;

                      PalletJournalLine2.RESET;
                      PalletJournalLine2.SETRANGE("Journal Template Name",
                        PalletJournalLine2."Journal Template Name");
                      PalletJournalLine2.SETRANGE("Pallet No.",
                        PalletJournalLine."Pallet No.");//same pallet
                      PalletJournalLine2.SETFILTER("Bin Code",'<>%1',
                        PalletJournalLine."Bin Code");
                      PalletJournalLine2.DELETEALL;

                      IF RFEmployeeSetup."Pallet Counting Type" =
                        RFEmployeeSetup."Pallet Counting Type"::"Real Time"
                      THEN
                        LicensePlateMgt.MovePallet(PalletJournalLine."Pallet No.",
                          PalletJournalLine."Bin Code",WhseEmpId,Remark);

                    END ELSE BEGIN
                      ERROR(Text033);
                    END;

                    PalletJournalLine2.RESET;
                    PalletJournalLine2.SETCURRENTKEY(
                      "Location Code","Bin Code","Pallet No.","Box No.","Item No.","Variant Code",
                      "Unit of Measure Code","Lot No.","Serial No.");

                    PalletJournalLine2.SETRANGE("Journal Template Name",PalletJournalLine."Journal Template Name");
                    PalletJournalLine2.SETRANGE("Journal Batch Name",PalletJournalLine."Journal Batch Name");
                    PalletJournalLine2.SETRANGE("Location Code",PalletJournalLine."Location Code");
                    PalletJournalLine2.SETRANGE(Counted,FALSE);
                    IF PalletJournalLine2.FINDFIRST THEN BEGIN
                      PalletJournalLine := PalletJournalLine2;
                      PalletJournalLine.COPYFILTERS(PalletJournalLine2);
                      PalletJournalLine.FINDFIRST;
                      NextStatus := 'Bin';
                    END ELSE
                      Remark := Text008;
                      NextStatus := 'Bin';
                  END;
                9:  //Pallet Not Found
                  BEGIN
                    IF PalletJournalLine."Pallet No." = '' THEN
                      ERROR(Text031);
                    RFLocationSetup.GET(LocationFilter);

                    IF RFLocationSetup."LP Pallet Adjustment Bin" = '' THEN
                      Remark := Text038;

                    IF Remark = '' THEN BEGIN
                      PalletBinContent.RESET;
                      PalletBinContent.SETRANGE(Location,PalletJournalLine."Location Code");
                      PalletBinContent.SETRANGE("Pallet No.",PalletJournalLine."Pallet No.");
                      IF PalletBinContent.FINDFIRST THEN BEGIN
                        LicensePlateMgt.MovePallet(PalletJournalLine."Pallet No.",
                          RFLocationSetup."LP Pallet Adjustment Bin",WhseEmpId,Remark);
                        IF Remark = '' THEN BEGIN
                          PalletJournalLine2.RESET;
                          PalletJournalLine2.SETRANGE("Journal Template Name",
                            PalletJournalLine."Journal Template Name");
                          PalletJournalLine2.SETRANGE("Pallet No.",
                            PalletJournalLine."Pallet No.");//same pallet
                          PalletJournalLine2.DELETEALL;
                        END;

                        PalletJournalLine2.RESET;
                        PalletJournalLine2.SETCURRENTKEY(
                          "Location Code","Bin Code","Pallet No.","Box No.","Item No.","Variant Code",
                          "Unit of Measure Code","Lot No.","Serial No.");
                        PalletJournalLine2.SETRANGE("Journal Template Name",PalletJournalLine."Journal Template Name");
                        PalletJournalLine2.SETRANGE("Journal Batch Name",PalletJournalLine."Journal Batch Name");
                        PalletJournalLine2.SETRANGE("Location Code",PalletJournalLine."Location Code");
                        PalletJournalLine2.SETRANGE(Counted,FALSE);
                        IF PalletJournalLine2.FINDFIRST THEN BEGIN
                          PalletJournalLine := PalletJournalLine2;
                          PalletJournalLine.COPYFILTERS(PalletJournalLine2);
                          PalletJournalLine.FINDFIRST;
                          NextStatus := 'Bin';
                        END ELSE
                          Remark := Text008;
                          NextStatus := 'Bin';
                      END;
                    END;
                  END;

                END;
                SetNextRFGroupNoFilter(NextStatus);
                ADCSCommunication.SetExtraValue('NextStatus',NextStatus);

                RecRef.GETTABLE(PalletJournalLine);
                ADCSCommunication.SetRecRef(RecRef);
                ActiveInputField := ADCSCommunication.GetActiveInputNo(CurrentCode,FldNo);

            END ELSE BEGIN
              EVALUATE(FldNo,FieldID);
              CASE FldNo OF
                PalletJournalLine.FIELDNO("Bin Code"):
                  CheckBinNo(UPPERCASE(TextValue));
                PalletJournalLine.FIELDNO("Pallet No."):
                  CheckPalletNo(UPPERCASE(TextValue));
                PalletJournalLine.FIELDNO("Box No."):
                  CheckBoxNo(UPPERCASE(TextValue));
                PalletJournalLine.FIELDNO("Item No."):
                  CheckItemNo(UPPERCASE(TextValue));
                PalletJournalLine.FIELDNO("Variant Code"):
                  CheckVariant(UPPERCASE(TextValue));
                PalletJournalLine.FIELDNO("Unit of Measure Code"):
                  CheckUnitOfMeasure(UPPERCASE(TextValue));
                PalletJournalLine.FIELDNO("Lot No."):
                  CheckLotNo(UPPERCASE(TextValue));
                PalletJournalLine.FIELDNO("Serial No."):
                  CheckSerialNo(UPPERCASE(TextValue));
                PalletJournalLine.FIELDNO("Qty. (Phys. Inventory)"):
                  CheckQtyPhysical(UPPERCASE(TextValue));
                PalletJournalLine.FIELDNO("Qty. (Phys. Inventory, Hide)"):
                  CheckQtyPhysical(UPPERCASE(TextValue));
                ELSE BEGIN
                  ADCSCommunication.FieldSetvalue(RecRef,FldNo,TextValue);
                  RecRef.SETTABLE(PalletJournalLine);
                END;
              END;

              IF PalletJournalLine."First Scan Date" = 0D THEN BEGIN
                PalletJournalLine."First Scan Date" := TODAY;
                PalletJournalLine."First Scan Time" := TIME;
                PalletJournalLine."Warehouse Employee Code" := WhseEmpId;
              END;

              IF (FldNo = PalletJournalLine.FIELDNO("Qty. (Phys. Inventory)")) AND (TextValue = '') THEN
                Remark := Text005;

              IF Remark = '' THEN BEGIN
                PalletJournalLine."Last Scan Date" := TODAY;
                PalletJournalLine."Last Scan Time" := TIME;
                PalletJournalLine."Warehouse Employee Code" := WhseEmpId;
              END;
              IF Remark = '' THEN BEGIN
                IF PalletJournalLine.MODIFY THEN;
                ADCSCommunication.SetExtraValue('NextStatus',NextStatus);

                RecRef.GETTABLE(PalletJournalLine);
                ADCSCommunication.SetRecRef(RecRef);
                ActiveInputField := ADCSCommunication.GetActiveInputNo(CurrentCode,FldNo);
              END;

              IF Remark = '' THEN BEGIN
                PalletJournalLine2.RESET;
                PalletJournalLine2.SETRANGE("Journal Template Name",PalletJournalLine."Journal Template Name");
                PalletJournalLine2.SETRANGE("Journal Batch Name",PalletJournalLine."Journal Batch Name");
                PalletJournalLine2.SETRANGE(Counted,FALSE);
                IF NOT PalletJournalLine2.FINDFIRST THEN BEGIN
                  Remark := Text008;
                END;
              END;
            END;
          END;
        ELSE
          ERROR(Text000);
      END;

      ActiveInputField := 1;

      IF NOT (FuncGroup.KeyDef IN [FuncGroup.KeyDef::Esc,FuncGroup.KeyDef::Register]) THEN
        SendForm(ActiveInputField);
    END;

    PROCEDURE CheckBinNo@1240020001(InputValue@1240020000 : Text[250]);
    VAR
      Bin@1240020004 : Record 7354;
      PalletJournalLine2@1240020003 : Record 14002966;
      RFMgt@1240020002 : Codeunit 14002801;
      BinCode@1240020001 : Code[20];
    BEGIN
      GetRFEmployeeSetup;

      IF (InputValue = '') THEN BEGIN
        Remark := STRSUBSTNO(Text004,PalletJournalLine.FIELDCAPTION("Bin Code"));
        NextStatus := 'Bin';
        SetNextRFGroupNoFilter(NextStatus);
        EXIT;
      END;

      IF NOT RFMgt.GetBin(InputValue,RFEmployeeSetup,PalletJournalLine."Location Code",TRUE,BinCode)
      THEN BEGIN
        Remark := STRSUBSTNO(Text004,PalletJournalLine.FIELDCAPTION("Bin Code"));
        NextStatus := 'Bin';
        SetNextRFGroupNoFilter(NextStatus);
        EXIT;
      END ELSE BEGIN
        InputValue := BinCode;
        PalletJournalLine.SETRANGE("Journal Template Name",PalletJournalLine."Journal Template Name");
        PalletJournalLine.SETRANGE("Journal Batch Name",PalletJournalLine."Journal Batch Name");
        PalletJournalLine.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
        PalletJournalLine.SETRANGE(Counted,FALSE);
        IF NOT PalletJournalLine.FINDFIRST THEN
          Remark := Text010;
      END;

      IF Remark = '' THEN BEGIN
        IF NOT PalletJournalLine."Added from RF" THEN BEGIN
          PalletJournalLine2.SETRANGE("Journal Template Name",PalletJournalLine."Journal Template Name");
          PalletJournalLine2.SETRANGE("Journal Batch Name",PalletJournalLine."Journal Batch Name");
          PalletJournalLine2.SETRANGE("Location Code",PalletJournalLine."Location Code");
          PalletJournalLine2.SETRANGE("Bin Code",BinCode);
          PalletJournalLine2.SETRANGE(Counted,FALSE);
          IF NOT PalletJournalLine2.FINDFIRST THEN
            Remark := Text017;
        END;
      END;

      IF Remark = '' THEN BEGIN
        IF PalletJournalLine."Bin Code" <> PalletJournalLine2."Bin Code" THEN
          PalletJournalLine := PalletJournalLine2;
      END;

      IF (Remark = '') AND
        PalletJournalLine."Added from RF"
      THEN BEGIN
        IF (PalletJournalLine."Bin Code" <> '') AND
           (PalletJournalLine."Item No." <> '')
        THEN
          IF PalletJournalLine."Bin Code" <> InputValue THEN
            Remark := Text016;

        Bin.RESET;
        Bin.SETRANGE("Location Code",PalletJournalLine."Location Code");
        Bin.SETRANGE(Code,InputValue);
        IF NOT Bin.FINDFIRST THEN BEGIN
          Remark := Text010;
        END;
      END;

      IF Remark = '' THEN BEGIN
        NextStatus := 'Pallet';
        ADCSCommunication.SetExtraValue('NextStatus',NextStatus);
        PalletJournalLine.VALIDATE("Location Code",LocationFilter);
        PalletJournalLine.VALIDATE("Bin Code",InputValue);
        IF PalletJournalLine."Zone Code" <> Bin."Zone Code" THEN
          PalletJournalLine.VALIDATE("Zone Code",Bin."Zone Code");
      END ELSE BEGIN
        NextStatus := 'Bin';
      END;

      SetNextRFGroupNoFilter(NextStatus);
    END;

    PROCEDURE CheckPalletNo@1240020002(InputValue@1240020000 : Text[250]);
    VAR
      Bin@1240020006 : Record 7354;
      PalletJournalLine2@1240020005 : Record 14002966;
      PalletBinContent@1240020004 : Record 14002963;
      LicensePlateMgt@1240020002 : Codeunit 14002971;
      PalletQAMgt@1240020007 : Codeunit 14002513;
    BEGIN
      GetRFEmployeeSetup;

      IF InputValue = '' THEN BEGIN
        Remark := STRSUBSTNO(Text004,PalletJournalLine.FIELDCAPTION("Bin Code"));
        NextStatus := 'Pallet';
        EXIT;
      END;

      IF Remark = '' THEN BEGIN
        IF RFEmployeeSetup."Scan Box instead of Pallet" THEN
          IF LicensePlateMgt.GetParentLicensePlateCode(InputValue) <> '' THEN
            InputValue := LicensePlateMgt.GetParentLicensePlateCode(InputValue);
      END;

      IF Remark = '' THEN BEGIN
        IF NOT PalletJournalLine."Added from RF" THEN BEGIN
          PalletJournalLine2.RESET;
          PalletJournalLine2.SETRANGE("Journal Template Name",PalletJournalLine."Journal Template Name");
          PalletJournalLine2.SETRANGE("Journal Batch Name",PalletJournalLine."Journal Batch Name");
          PalletJournalLine2.SETRANGE("Location Code",PalletJournalLine."Location Code");
          PalletJournalLine2.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
          PalletJournalLine2.SETRANGE(Counted,FALSE);

          PalletJournalLine2.SETRANGE("Pallet No.",InputValue);

          IF NOT PalletJournalLine2.FINDFIRST THEN BEGIN
            Remark := Text018;
            NextStatus := 'Pallet';
            SetNextRFGroupNoFilter(NextStatus);
          END;
          IF PalletJournalLine."Pallet No." <> PalletJournalLine2."Pallet No." THEN
            PalletJournalLine := PalletJournalLine2;
        END;
      END;

      IF PalletJournalLine."Added from RF" THEN BEGIN
        PalletJournalLine2.RESET;
        PalletJournalLine2.SETRANGE("Journal Template Name",PalletJournalLine."Journal Template Name");
        PalletJournalLine2.SETRANGE("Journal Batch Name",PalletJournalLine."Journal Batch Name");
        PalletJournalLine2.SETFILTER("Line No.",'<>%1',PalletJournalLine."Line No.");
        PalletJournalLine2.SETRANGE("Box No.",InputValue);
        IF PalletJournalLine2.FINDFIRST THEN BEGIN
          Remark := Text034;
          NextStatus := 'Pallet';
        END;
        IF Remark = '' THEN BEGIN
          PalletBinContent.SETRANGE(Location,PalletJournalLine."Location Code");
          PalletBinContent.SETRANGE("Pallet No.",InputValue);
          IF NOT PalletBinContent.FINDFIRST THEN
            Remark := Text033;
            NextStatus := 'Pallet';
        END;
      END;

      IF Remark = '' THEN BEGIN
        IF ((PalletJournalLine."Box No." <> '') AND
            (PalletJournalLine."Pallet No." <>
              PalletJournalLine."Box No." + RFEmployeeSetup."Single Box Pallet Extension"))
        THEN
          NextStatus := 'Box'
        ELSE
          NextStatus := 'ItemNoBox';
      END;

      IF Remark = '' THEN BEGIN
        IF PalletJournalLine."Added from RF" THEN BEGIN
          PalletJournalLine.VALIDATE("Pallet No.",InputValue);
          IF (NOT RFEmployeeSetup."Count Details" AND
              RFEmployeeSetup."Count Pallet Level" AND
              NOT RFEmployeeSetup."Count Boxes Level" AND
              NOT RFEmployeeSetup."Count Item Level")
          THEN
            NextStatus := 'Pallet';
          IF (RFEmployeeSetup."Count Details" OR
              RFEmployeeSetup."Count Item Level")
          THEN
            NextStatus := 'ItemNoBox';
        END;
      END;

      IF (Remark = '') AND NOT PalletJournalLine."Added from RF" THEN BEGIN
        IF NOT (RFEmployeeSetup."Count Details" OR
                RFEmployeeSetup."Count Boxes Level" OR
                RFEmployeeSetup."Count Item Level") AND
           RFEmployeeSetup."Count Pallet Level"
        THEN BEGIN
          PalletBinContent.RESET;
          PalletBinContent.SETRANGE("Pallet No.",InputValue);
          IF PalletBinContent.FINDSET THEN BEGIN
            REPEAT
              PalletJournalLine2.RESET;
              PalletJournalLine2.SETCURRENTKEY("Location Code","Bin Code","Pallet No.",
                "Box No.","Item No.","Variant Code","Unit of Measure Code","Lot No.","Serial No.");
              PalletJournalLine2.SETRANGE("Journal Template Name",
                PalletJournalLine."Journal Template Name");
              PalletJournalLine2.SETRANGE("Journal Batch Name",
                PalletJournalLine."Journal Batch Name");
              PalletJournalLine2.SETRANGE("Location Code",PalletBinContent.Location);
              PalletJournalLine2.SETRANGE("Bin Code",PalletBinContent.Bin);
              IF PalletBinContent."Box No." <> '' THEN
                PalletJournalLine2.SETRANGE("Box No.",PalletBinContent."Box No.");
              PalletJournalLine2.SETRANGE("Item No.",PalletBinContent."Item No.");
              IF PalletBinContent."Variant No." <> '' THEN
                PalletJournalLine2.SETRANGE("Variant Code",PalletBinContent."Variant No.");
              IF PalletBinContent."Unit of Measure" <> '' THEN
                PalletJournalLine2.SETRANGE("Unit of Measure Code",
                  PalletBinContent."Unit of Measure");
              IF PalletBinContent."Lot No." <> '' THEN
                PalletJournalLine2.SETRANGE("Lot No.",PalletBinContent."Lot No.");
              IF PalletBinContent."Serial No." <> '' THEN
                PalletJournalLine2.SETRANGE("Serial No.",PalletBinContent."Serial No.");
              PalletJournalLine2.SETRANGE(Counted,FALSE);
              IF PalletJournalLine2.FINDFIRST THEN BEGIN
                PalletJournalLine2."Qty. (Calculated)" := PalletBinContent.Quantity;
                PalletJournalLine2."Qty. (Calculated) (Base)" := PalletBinContent."Quantity (Base)";
                PalletJournalLine2."Qty. (Phys. Inventory)" := PalletBinContent.Quantity;
                PalletJournalLine2.Counted := TRUE;
                PalletJournalLine2.MODIFY;
              END;
            UNTIL PalletBinContent.NEXT = 0;
          END;
          PalletJournalLine2.RESET;
          PalletJournalLine2.SETCURRENTKEY("Location Code","Bin Code","Pallet No.",
            "Box No.","Item No.","Variant Code","Unit of Measure Code","Lot No.","Serial No.");
          PalletJournalLine2.SETRANGE("Journal Template Name",PalletJournalLine."Journal Template Name");
          PalletJournalLine2.SETRANGE("Journal Batch Name",PalletJournalLine."Journal Batch Name");
          PalletJournalLine2.SETRANGE("Location Code",PalletBinContent.Location);
          PalletJournalLine2.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
          PalletJournalLine2.SETRANGE(Counted,FALSE);
          IF PalletJournalLine2.FINDFIRST THEN BEGIN
            NextStatus := 'Pallet';
          END ELSE BEGIN
            PalletJournalLine2.RESET;
            PalletJournalLine2.SETCURRENTKEY("Location Code","Bin Code","Pallet No.",
            "Box No.","Item No.","Variant Code","Unit of Measure Code","Lot No.","Serial No.");
            PalletJournalLine2.SETRANGE("Journal Template Name",PalletJournalLine."Journal Template Name");
            PalletJournalLine2.SETRANGE("Journal Batch Name",PalletJournalLine."Journal Batch Name");
            PalletJournalLine2.SETRANGE("Location Code",PalletBinContent.Location);
            PalletJournalLine2.SETRANGE(Counted,FALSE);
            IF PalletJournalLine2.FINDFIRST THEN BEGIN
              NextStatus := 'Bin';
            END ELSE BEGIN
              NextStatus := 'Bin';
              Remark := Text008;
            END;
          END;
          PalletJournalLine := PalletJournalLine2;
        END;
      END;

      SetNextRFGroupNoFilter(NextStatus);
      IF NOT RFEmployeeSetup."Count Item Level" THEN
        PalletQAMgt.CreateStatisticEntry(PalletJournalLine);
    END;

    PROCEDURE CheckBoxNo@1240020003(InputValue@1240020000 : Text[250]);
    VAR
      Bin@1240020009 : Record 7354;
      PalletJournalLine2@1240020007 : Record 14002966;
      PalletBinContent@1240020005 : Record 14002963;
    BEGIN
      GetRFEmployeeSetup;
      RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);

      IF InputValue = '' THEN BEGIN
        NextStatus := 'Box';
        SetNextRFGroupNoFilter(NextStatus);
        EXIT;
      END;

      IF (RFEmployeeSetup."Count Details" OR
          RFEmployeeSetup."Count Item Level" OR
          RFEmployeeSetup."Count Item Tracking Level")
      THEN BEGIN
        IF NOT PalletJournalLine."Added from RF" THEN BEGIN
          PalletJournalLine2.RESET;
          PalletJournalLine2.SETRANGE("Journal Template Name",PalletJournalLine."Journal Template Name");
          PalletJournalLine2.SETRANGE("Journal Batch Name",PalletJournalLine."Journal Batch Name");
          PalletJournalLine2.SETRANGE("Location Code",PalletJournalLine."Location Code");
          PalletJournalLine2.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
          PalletJournalLine2.SETRANGE("Pallet No.",PalletJournalLine."Pallet No.");
          PalletJournalLine2.SETRANGE(Counted,FALSE);
          PalletJournalLine2.SETRANGE("Box No.",InputValue);
          IF NOT PalletJournalLine2.FINDFIRST THEN BEGIN
            Remark := Text019;
            NextStatus := 'ItemBox';
          END;
          IF PalletJournalLine."Box No." <> PalletJournalLine2."Box No." THEN
            PalletJournalLine := PalletJournalLine2;
        END ELSE
          NextStatus := 'Box';

        IF Remark = '' THEN BEGIN
          NextStatus := 'ItemBox';
        END;

        IF PalletJournalLine."Added from RF" THEN BEGIN
          IF InputValue = '' THEN BEGIN
            NextStatus := 'ItemNoBox';
            SetNextRFGroupNoFilter(NextStatus);
          END ELSE BEGIN
            PalletJournalLine.VALIDATE("Box No.",InputValue);
            NextStatus := 'ItemBox';
            SetNextRFGroupNoFilter(NextStatus);
          END;
        END;
      END ELSE BEGIN      // check only if boxes are there and ignore details
        IF NOT PalletJournalLine."Added from RF" THEN BEGIN
          PalletJournalLine2.RESET;
          PalletJournalLine2.SETRANGE(
            "Journal Template Name",PalletJournalLine."Journal Template Name");
          PalletJournalLine2.SETRANGE(
            "Journal Batch Name",PalletJournalLine."Journal Batch Name");
          PalletJournalLine2.SETRANGE("Location Code",PalletJournalLine."Location Code");
          PalletJournalLine2.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
          PalletJournalLine2.SETRANGE("Pallet No.",PalletJournalLine."Pallet No.");
          PalletJournalLine2.SETRANGE("Box No.",InputValue);
          PalletJournalLine2.SETRANGE(Counted,FALSE);
          IF PalletJournalLine2.FINDFIRST THEN BEGIN
            IF NOT (RFEmployeeSetup."Count Item Level" OR
                    RFEmployeeSetup."Count Item Tracking Level")
            THEN BEGIN
              PalletJournalLine2.Counted := TRUE;
              PalletJournalLine2.MODIFY;
            END;
          END ELSE BEGIN
            Remark := Text019;
            PalletJournalLine2.SETRANGE(Counted,TRUE);
            IF PalletJournalLine2.FINDFIRST THEN
              Remark := Text024;
            NextStatus := 'Box';
          END;
          IF Remark = '' THEN BEGIN
            PalletJournalLine2.RESET;
            PalletJournalLine2.SETRANGE(
              "Journal Template Name",PalletJournalLine."Journal Template Name");
            PalletJournalLine2.SETRANGE(
              "Journal Batch Name",PalletJournalLine."Journal Batch Name");
            PalletJournalLine2.SETRANGE("Location Code",PalletJournalLine."Location Code");
            PalletJournalLine2.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
            PalletJournalLine2.SETRANGE("Pallet No.",PalletJournalLine."Pallet No.");
            PalletJournalLine2.SETRANGE(Counted,FALSE);
            IF PalletJournalLine2.FINDFIRST THEN BEGIN  //at least one more box is uncounted
              PalletJournalLine := PalletJournalLine2;
              NextStatus := 'Box';
            END ELSE BEGIN
              PalletJournalLine2.RESET;
              PalletJournalLine2.SETRANGE(
                "Journal Template Name",PalletJournalLine."Journal Template Name");
              PalletJournalLine2.SETRANGE(
                "Journal Batch Name",PalletJournalLine."Journal Batch Name");
              PalletJournalLine2.SETRANGE("Location Code",PalletJournalLine."Location Code");
              PalletJournalLine2.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
              PalletJournalLine2.SETRANGE(Counted,FALSE);
              IF PalletJournalLine2.FINDFIRST THEN BEGIN // another pallet is in bin
                PalletJournalLine := PalletJournalLine2;
                NextStatus := 'Pallet';
              END ELSE BEGIN
                PalletJournalLine2.RESET;
                PalletJournalLine2.SETRANGE(
                  "Journal Template Name",PalletJournalLine."Journal Template Name");
                PalletJournalLine2.SETRANGE(
                  "Journal Batch Name",PalletJournalLine."Journal Batch Name");
                PalletJournalLine2.SETRANGE("Location Code",PalletJournalLine."Location Code");
                PalletJournalLine2.SETRANGE(Counted,FALSE);
                IF PalletJournalLine2.FINDFIRST THEN BEGIN // entry in another bin exists
                  PalletJournalLine := PalletJournalLine2;
                  NextStatus := 'Bin';
                END ELSE BEGIN  // last entry is processed
                  Remark := Text008;
                  NextStatus := 'Bin';
                END;
              END;
            END;
          END;
        END ELSE BEGIN //added from RF
          // is box actually on the pallet?
          PalletJournalLine2.RESET;
          PalletJournalLine2.SETRANGE(
            "Journal Template Name",PalletJournalLine."Journal Template Name");
          PalletJournalLine2.SETRANGE(
            "Journal Batch Name",PalletJournalLine."Journal Batch Name");
          PalletJournalLine2.SETRANGE("Location Code",PalletJournalLine."Location Code");
          PalletJournalLine2.SETRANGE("Pallet No.",PalletJournalLine."Pallet No.");
          PalletJournalLine2.SETRANGE(Counted,FALSE);
          PalletJournalLine2.SETRANGE("Box No.",InputValue);
          IF PalletJournalLine2.FINDFIRST THEN
            Remark := Text025;
          PalletJournalLine2.SETRANGE(Counted,TRUE);   //not counted yet?
          IF PalletJournalLine2.FINDFIRST THEN
            Remark := Text024;
            NextStatus := 'Box';
          // if the box is somewhere else in the journal but not counted yet
          IF Remark = '' THEN BEGIN
            PalletBinContent.RESET;
            PalletBinContent.SETRANGE(Location,PalletJournalLine."Location Code");
            PalletBinContent.SETRANGE("Box No.",InputValue);
            IF NOT PalletBinContent.FINDFIRST THEN BEGIN
              Remark := Text026;
              NextStatus := 'Box';
            END;
          END;

          IF Remark = '' THEN BEGIN
            PalletBinContent.SETFILTER("Pallet No.",'<>%1',PalletJournalLine."Pallet No.");
            IF PalletBinContent.FINDFIRST THEN BEGIN
              PalletJournalLine2.RESET;
              PalletJournalLine2.SETRANGE(
                "Journal Template Name",PalletJournalLine."Journal Template Name");
              PalletJournalLine2.SETRANGE(
                "Journal Batch Name",PalletJournalLine."Journal Batch Name");
              PalletJournalLine2.SETRANGE("Location Code",PalletJournalLine."Location Code");
              PalletJournalLine2.SETRANGE(PalletJournalLine2."Added from RF",FALSE);
              PalletJournalLine2.SETRANGE("Box No.",InputValue);
              IF PalletJournalLine2.FINDFIRST THEN BEGIN
                PalletJournalLine.Type := PalletJournalLine2.Type;
                PalletJournalLine."Item No." := PalletJournalLine2."Item No.";
                PalletJournalLine."Variant Code" := PalletJournalLine2."Variant Code";
                PalletJournalLine."Unit of Measure Code" :=
                  PalletJournalLine2."Unit of Measure Code";
                PalletJournalLine."Quantity Calc."  := PalletJournalLine2."Quantity Calc.";
                PalletJournalLine.Description := PalletJournalLine2.Description;
                PalletJournalLine.Quantity := PalletJournalLine2.Quantity;
                PalletJournalLine."Reason Code" := PalletJournalLine2."Reason Code";
                PalletJournalLine.Counted := TRUE;
                PalletJournalLine.MODIFY;

                PalletJournalLine.DELETE;
              END ELSE BEGIN
                NextStatus := 'ItemBox';
                SetNextRFGroupNoFilter(NextStatus);
              END;
            END ELSE BEGIN
              Remark := Text027;
              NextStatus := 'Box';
              SetNextRFGroupNoFilter(NextStatus);
            END;
          END;
        END;
      END;

      IF Remark <> '' THEN
        NextStatus := 'Box';

      SetNextRFGroupNoFilter(NextStatus);
    END;

    PROCEDURE CheckItemNo@1240020004(InputValue@1240020000 : Code[20]);
    VAR
      ItemIdent@1240020008 : Record 7704;
      PalletJournalline2@1240020007 : Record 14002966;
      BinContent@1240020005 : Record 7302;
      PalletBinContent@1240020004 : Record 14002963;
      Item@1240020009 : Record 27;
      RFMgt@1240020003 : Codeunit 14002801;
      LicensePlateMgt@1240020010 : Codeunit 14002971;
      LotNo@1240020002 : Code[20];
      SerialNo@1240020001 : Code[20];
    BEGIN
      GetRFEmployeeSetup;

      IF (RFEmployeeSetup."Count Details" OR
          RFEmployeeSetup."Count Item Tracking Level")
      THEN BEGIN
        IF (PalletJournalLine."Item No." <> '') AND
           (InputValue = '') AND
           RFEmployeeSetup."Blank as Item in Phys. Invt."
        THEN BEGIN
          IF PalletJournalLine."Box No." = '' THEN
            NextStatus := 'ItemNoBox'
          ELSE
            NextStatus := 'ItemBox';
          SetNextRFGroupNoFilter(NextStatus);
          EXIT;
        END;

        IF NOT RFMgt.GetItem(
                 InputValue,RFEmployeeSetup,ItemIdent."Item No.",ItemIdent."Variant Code",
                 ItemIdent."Unit of Measure Code",LotNo,SerialNo)
        THEN BEGIN
          Remark := STRSUBSTNO(Text004,PalletJournalLine.FIELDCAPTION("Item No."));
          IF PalletJournalLine."Box No." = '' THEN
            NextStatus := 'ItemNoBox'
          ELSE
            NextStatus := 'ItemBox';
          SetNextRFGroupNoFilter(NextStatus);
          EXIT;
        END;

      IF Remark = '' THEN BEGIN
        IF (ItemIdent."Item No." <> '') AND
           (ItemIdent."Unit of Measure Code" = '')
        THEN BEGIN
         IF  Item.GET(ItemIdent."Item No.") THEN
           ItemIdent."Unit of Measure Code" := Item."Base Unit of Measure";
        END;
      END;

      IF Remark = '' THEN BEGIN
        PalletJournalline2.RESET;
        PalletJournalline2.SETRANGE("Journal Template Name",PalletJournalLine."Journal Template Name");
        PalletJournalline2.SETRANGE("Journal Batch Name",PalletJournalLine."Journal Batch Name");
        PalletJournalline2.SETRANGE("Location Code",PalletJournalLine."Location Code");
        PalletJournalline2.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
        PalletJournalline2.SETRANGE("Pallet No.",PalletJournalLine."Pallet No.");
        PalletJournalline2.SETRANGE("Box No.",PalletJournalLine."Box No.");
        PalletJournalline2.SETRANGE("Item No.",ItemIdent."Item No.");
        IF ItemIdent."Variant Code" <> '' THEN
          PalletJournalline2.SETRANGE("Variant Code",ItemIdent."Variant Code");
        IF ItemIdent."Unit of Measure Code" <> '' THEN
          PalletJournalline2.SETRANGE("Unit of Measure Code",ItemIdent."Unit of Measure Code");
        PalletJournalline2.SETRANGE(Counted,FALSE);
        IF PalletJournalline2.FINDFIRST THEN
          IF ((PalletJournalline2."Item No." <> PalletJournalLine."Item No.") OR
              (PalletJournalline2."Variant Code" <> PalletJournalLine."Variant Code") OR
              (PalletJournalline2."Unit of Measure Code" <> PalletJournalLine."Unit of Measure Code"))
          THEN
            PalletJournalLine := PalletJournalline2;
      END;

        IF NOT PalletJournalLine."Added from RF" THEN BEGIN
          IF ItemIdent."Item No." <> PalletJournalLine."Item No." THEN BEGIN
            Remark := STRSUBSTNO(Text004,PalletJournalLine.FIELDCAPTION("Item No."));
            IF PalletJournalLine."Box No." = '' THEN
              NextStatus := 'ItemNoBox'
            ELSE
              NextStatus := 'ItemBox';
            SetNextRFGroupNoFilter(NextStatus);
            EXIT;
          END ELSE BEGIN
            IF (PalletJournalLine."Lot No." <> '') OR
               (PalletJournalLine."Serial No." <> '')
            THEN BEGIN
              IF PalletJournalLine."Serial No." <> '' THEN BEGIN
                IF PalletJournalLine."Box No." = '' THEN
                  NextStatus := 'SNNoBox'
                ELSE
                  NextStatus := 'SNBox';
                SetNextRFGroupNoFilter(NextStatus);
              END;
              IF PalletJournalLine."Lot No." <> '' THEN BEGIN
                IF PalletJournalLine."Box No." = '' THEN
                  NextStatus := 'LotNoBox'
                ELSE
                  NextStatus := 'LotBox';
                SetNextRFGroupNoFilter(NextStatus);
              END;

              IF (PalletJournalLine."Lot No." <> '') AND
                 (PalletJournalLine."Serial No." <> '')
              THEN BEGIN
                IF PalletJournalLine."Box No." = '' THEN
                  NextStatus := 'LotSNNoBox'
                ELSE
                  NextStatus := 'LotSNBox';
                SetNextRFGroupNoFilter(NextStatus);
              END;

            END ELSE BEGIN    //no item tracking --> Qty
              NextStatus := 'Qty';
              SetNextRFGroupNoFilter(NextStatus);
            END;
          END;

          IF ((ItemIdent."Variant Code" <> '') AND
              (ItemIdent."Variant Code" <> PalletJournalLine."Variant Code"))
          THEN BEGIN
            Remark := STRSUBSTNO(Text004,PalletJournalLine.FIELDCAPTION("Item No."));
            IF PalletJournalLine."Box No." = '' THEN
              NextStatus := 'ItemNoBox'
            ELSE
              NextStatus := 'ItemBox';
            SetNextRFGroupNoFilter(NextStatus);
            EXIT;
          END;

          IF (ItemIdent."Unit of Measure Code" <> '') AND
             (ItemIdent."Unit of Measure Code" <> PalletJournalLine."Unit of Measure Code") AND
             NOT RFEmployeeSetup."No Unit of Measure Check"
          THEN BEGIN
            Remark := STRSUBSTNO(Text004,PalletJournalLine.FIELDCAPTION("Item No."));
            IF PalletJournalLine."Box No." = '' THEN
              NextStatus := 'ItemNoBox'
            ELSE
              NextStatus := 'ItemBox';
            SetNextRFGroupNoFilter(NextStatus);
            EXIT;
          END;
        END ELSE BEGIN      //RF Added
          IF LicensePlateMgt.IsWhseLotTracked(ItemIdent."Item No.") OR
             LicensePlateMgt.IsWhseSerialTracked(ItemIdent."Item No.")
          THEN BEGIN
            IF LicensePlateMgt.IsWhseLotTracked(ItemIdent."Item No.") THEN BEGIN
              IF PalletJournalLine."Box No." <> '' THEN
                NextStatus := 'LotBox'
              ELSE
                NextStatus := 'LotNoBox';
            END ELSE BEGIN
              IF PalletJournalLine."Box No." <> '' THEN
                NextStatus := 'SNBox'
              ELSE
                NextStatus := 'SNNoBox';
            END;
          END ELSE BEGIN  //not lot tracked
            NextStatus := 'Qty';
          END;

          IF Remark = '' THEN BEGIN
            PalletBinContent.RESET;
            PalletBinContent.SETFILTER(Bin,'<>%1',PalletJournalLine."Bin Code");
            PalletBinContent.SETRANGE("Pallet No.",PalletJournalLine."Pallet No.");
            IF NOT PalletBinContent.ISEMPTY THEN
              Remark := Text037;
              IF PalletBinContent."Box No." <> '' THEN
                NextStatus := 'ItemBox'
              ELSE
                NextStatus := 'ItemNoBox';
          END;

          IF Remark = '' THEN BEGIN
            ItemUnitofMeasure.RESET;
            ItemUnitofMeasure.SETRANGE("Item No.",ItemIdent."Item No.");
            ItemUnitofMeasure.SETRANGE(Code,ItemIdent."Unit of Measure Code");
            IF ItemUnitofMeasure.FINDFIRST THEN
              PalletJournalLine."Qty. Per Unit of Measure" :=
                ItemUnitofMeasure."Qty. per Unit of Measure"
            ELSE
              PalletJournalLine."Qty. Per Unit of Measure" := 1;

            PalletJournalLine.VALIDATE("Item No.",ItemIdent."Item No.");
            PalletJournalLine.VALIDATE("Variant Code",ItemIdent."Variant Code");
            PalletJournalLine.VALIDATE("Unit of Measure Code",ItemIdent."Unit of Measure Code");

            PalletJournalLine."Phys. Inventory" := TRUE;
            PalletJournalLine."Registering Date" := WORKDATE;
          END;
        END;
      END ELSE BEGIN      // check only if boxes are there and ignore details
        IF NOT PalletJournalLine."Added from RF" THEN BEGIN
          PalletJournalline2.RESET;
          PalletJournalline2.SETRANGE(
            "Journal Template Name",PalletJournalLine."Journal Template Name");
          PalletJournalline2.SETRANGE(
            "Journal Batch Name",PalletJournalLine."Journal Batch Name");
          PalletJournalline2.SETRANGE("Location Code",PalletJournalLine."Location Code");
          PalletJournalline2.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
          PalletJournalline2.SETRANGE("Pallet No.",PalletJournalLine."Pallet No.");
          PalletJournalline2.SETRANGE("Box No.",PalletJournalLine."Box No.");
          PalletJournalline2.SETRANGE("Item No.",InputValue);
          PalletJournalline2.SETRANGE(Counted,FALSE);
          IF PalletJournalline2.FINDFIRST THEN BEGIN
            PalletJournalline2.Counted := TRUE;
            PalletJournalline2.MODIFY;
          END ELSE BEGIN
            PalletJournalline2.SETRANGE(Counted,TRUE);
            IF PalletJournalline2.FINDFIRST THEN
              Remark := Text024;
            NextStatus := 'Item';
          END;
          IF Remark = '' THEN BEGIN    //and now figure out the next step (filter)
            PalletJournalline2.RESET;
            PalletJournalline2.SETRANGE(
              "Journal Template Name",PalletJournalLine."Journal Template Name");
            PalletJournalline2.SETRANGE(
              "Journal Batch Name",PalletJournalLine."Journal Batch Name");
            PalletJournalline2.SETRANGE(
              "Location Code",PalletJournalLine."Location Code");
            PalletJournalline2.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
            PalletJournalline2.SETRANGE("Pallet No.",PalletJournalLine."Pallet No.");
            PalletJournalline2.SETRANGE("Box No.",PalletJournalLine."Box No.");
            PalletJournalline2.SETFILTER("Line No.",'<>%1',PalletJournalLine."Line No.");
            PalletJournalline2.SETRANGE(Counted,FALSE);
            IF PalletJournalline2.FINDFIRST THEN BEGIN  //item in the same box is not counted
              PalletJournalLine := PalletJournalline2;
              NextStatus := 'Item';
            END ELSE BEGIN
              PalletJournalline2.RESET;
              PalletJournalline2.SETRANGE(
                "Journal Template Name",PalletJournalLine."Journal Template Name");
              PalletJournalline2.SETRANGE(
                "Journal Batch Name",PalletJournalLine."Journal Batch Name");
              PalletJournalline2.SETRANGE("Location Code",PalletJournalLine."Location Code");
              PalletJournalline2.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
              PalletJournalline2.SETRANGE("Pallet No.",PalletJournalLine."Pallet No.");
              PalletJournalline2.SETFILTER("Line No.",'<>%1',PalletJournalLine."Line No.");
              PalletJournalline2.SETRANGE(Counted,FALSE);
              IF PalletJournalline2.FINDFIRST THEN BEGIN  //at least one more box is uncounted
                PalletJournalLine := PalletJournalline2;
                NextStatus := 'Box';
              END ELSE BEGIN
                PalletJournalline2.RESET;
                PalletJournalline2.SETRANGE(
                  "Journal Template Name",PalletJournalLine."Journal Template Name");
                PalletJournalline2.SETRANGE(
                  "Journal Batch Name",PalletJournalLine."Journal Batch Name");
                PalletJournalline2.SETRANGE("Location Code",PalletJournalLine."Location Code");
                PalletJournalline2.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
                PalletJournalline2.SETFILTER("Line No.",'<>%1',PalletJournalLine."Line No.");
                PalletJournalline2.SETRANGE(Counted,FALSE);
                IF PalletJournalline2.FINDFIRST THEN BEGIN // another pallet is in bin uncounted
                  PalletJournalLine := PalletJournalline2;
                  NextStatus := 'Pallet';
                END ELSE BEGIN
                  PalletJournalline2.RESET;
                  PalletJournalline2.SETRANGE(
                    "Journal Template Name",PalletJournalLine."Journal Template Name");
                  PalletJournalline2.SETRANGE(
                    "Journal Batch Name",PalletJournalLine."Journal Batch Name");
                  PalletJournalline2.SETRANGE(
                    "Location Code",PalletJournalLine."Location Code");
                  PalletJournalline2.SETFILTER("Line No.",'<>%1',PalletJournalLine."Line No.");
                  PalletJournalline2.SETRANGE(Counted,FALSE);
                  IF PalletJournalline2.FINDFIRST THEN BEGIN //entry in another bin exists
                    PalletJournalLine := PalletJournalline2;
                    NextStatus := 'Bin';
                  END ELSE BEGIN  // last entry is processed
                    Remark := Text008;
                    NextStatus := 'Bin';
                  END;
                END;
              END;
            END;
          END;
        END ELSE BEGIN //added from RF
          // is item actually in the box
          PalletJournalline2.RESET;
          PalletJournalline2.SETRANGE(
            "Journal Template Name",PalletJournalLine."Journal Template Name");
          PalletJournalline2.SETRANGE(
            "Journal Batch Name",PalletJournalLine."Journal Batch Name");
          PalletJournalline2.SETRANGE("Location Code",PalletJournalLine."Location Code");
          PalletJournalline2.SETRANGE("Pallet No.",PalletJournalLine."Pallet No.");
          PalletJournalline2.SETRANGE("Box No.",PalletJournalLine."Box No.");
          PalletJournalline2.SETRANGE("Item No.",InputValue);
          PalletJournalline2.SETRANGE(Counted,FALSE);
          IF PalletJournalline2.FINDFIRST THEN // already in list
            Remark := Text028;
          PalletJournalline2.SETRANGE(Counted,TRUE);   //already counted?
          IF PalletJournalline2.FINDFIRST THEN
            Remark := Text024;
          NextStatus := 'item';    // yes, already counted
          IF Remark = '' THEN BEGIN
            PalletJournalline2.RESET;
            PalletJournalline2.SETRANGE(
              "Journal Template Name",PalletJournalLine."Journal Template Name");
            PalletJournalline2.SETRANGE(
              "Journal Batch Name",PalletJournalLine."Journal Batch Name");
            PalletJournalline2.SETRANGE("Location Code",PalletJournalLine."Location Code");
            PalletJournalline2.SETRANGE(PalletJournalline2."Added from RF",FALSE);
            PalletJournalline2.SETRANGE("Box No.",PalletJournalLine."Box No.");
            PalletJournalline2.SETRANGE("Item No.",InputValue);
            IF PalletJournalline2.FINDFIRST THEN BEGIN   //box on different pallet in journal
              // fill in the rest in the Phys. Item Journal
              PalletJournalLine.Type := PalletJournalline2.Type;
              PalletJournalLine."Variant Code" := PalletJournalline2."Variant Code";
              PalletJournalLine."Unit of Measure Code" :=
                PalletJournalline2."Unit of Measure Code";
              PalletJournalLine."Quantity Calc."  := PalletJournalline2."Quantity Calc.";
              PalletJournalLine.Description := PalletJournalline2.Description;
              PalletJournalLine.Quantity := PalletJournalline2.Quantity;
              PalletJournalLine."Reason Code" := PalletJournalline2."Reason Code";
              PalletJournalLine.Counted := TRUE;
              PalletJournalLine."Item No." := InputValue;
              PalletJournalLine."Physical Inv. Line" := PalletJournalline2."Physical Inv. Line";
              PalletJournalLine."Qty. (Phys. Inventory)" := PalletJournalline2.Quantity;
              PalletJournalLine.MODIFY;
              // delete the other pallet journal entry
              PalletJournalline2."Quantity Calc." := 0;
              PalletJournalline2.Quantity := 0;
              PalletJournalline2."Qty. (Phys. Inventory)" := 0;
              PalletJournalline2.Counted := TRUE;

              PalletJournalline2."Warehouse Employee Code" :=
                PalletJournalLine."Warehouse Employee Code";
              PalletJournalline2."First Scan Date" := WORKDATE;
              PalletJournalline2."First Scan Time" := TIME;
              PalletJournalline2."Last Scan Date" := WORKDATE;
              PalletJournalline2."Last Scan Time" := TIME;

              PalletJournalline2.MODIFY;
              NextStatus := 'Bin';
              PalletJournalLine.SETRANGE(Counted,FALSE);
              IF PalletJournalLine.FINDFIRST THEN ;
            END ELSE BEGIN    // box not on different pallet in journal
              PalletBinContent.RESET;
              PalletBinContent.SETRANGE(Location,PalletJournalLine."Location Code");
              PalletBinContent.SETRANGE("Box No.",PalletJournalLine."Box No.");
              PalletBinContent.SETRANGE("Item No.",InputValue);
              IF NOT PalletBinContent.FINDFIRST THEN BEGIN
                Remark := Text029;
                NextStatus := 'ItemBox';
              END ELSE BEGIN
                PalletJournalLine."Item No." := InputValue;
                PalletJournalLine."Variant Code" := PalletBinContent."Variant No.";
                PalletJournalLine."Unit of Measure Code" := PalletBinContent."Unit of Measure";
                PalletJournalLine."Last Scan Date" := WORKDATE;
                PalletJournalLine."Last Scan Time" := TIME;
                PalletJournalLine.MODIFY;
                NextStatus := 'LotBox';
              END;
            END;
          END ELSE
            NextStatus := 'ItemBox';
        END;
      END;

      SetNextRFGroupNoFilter(NextStatus);
    END;

    PROCEDURE CheckVariant@1240020005(InputValue@1240020000 : Text[250]);
    VAR
      WarehouseJournalLine2@1240020004 : Record 7311;
      BinContent@1240020003 : Record 7302;
      RFMgt@1240020002 : Codeunit 14002801;
      NewVariantCode@1240020001 : Code[20];
    BEGIN
      GetRFEmployeeSetup;
      IF RFEmployeeSetup."Blank as Variant in Phys. Invt" AND (InputValue = '') THEN
        EXIT;

      IF NOT RFMgt.GetVariant(
               InputValue,RFEmployeeSetup,PalletJournalLine."Item No.",NewVariantCode)
      THEN BEGIN
        Remark := STRSUBSTNO(Text004,PalletJournalLine.FIELDCAPTION("Variant Code"));
        EXIT;
      END;

      IF NOT PalletJournalLine."Added from RF" THEN BEGIN
        IF NewVariantCode <> PalletJournalLine."Variant Code" THEN BEGIN
          Remark := STRSUBSTNO(Text004,PalletJournalLine.FIELDCAPTION("Variant Code"));
          EXIT;
        END;
      END ELSE BEGIN
        IF PalletJournalLine."Variant Code" <> '' THEN BEGIN
          IF PalletJournalLine."Variant Code" <> NewVariantCode THEN
            Remark := Text015;
          EXIT;
        END;

        WarehouseJournalLine2.RESET;
        WarehouseJournalLine2.SETRANGE(
          "Journal Template Name",PalletJournalLine."Journal Template Name");
        WarehouseJournalLine2.SETRANGE(
          "Journal Batch Name",PalletJournalLine."Journal Batch Name");
        WarehouseJournalLine2.SETRANGE("Location Code",PalletJournalLine."Location Code");
        WarehouseJournalLine2.SETFILTER("Line No.",'<>%1',PalletJournalLine."Line No.");
        WarehouseJournalLine2.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
        WarehouseJournalLine2.SETRANGE("Item No.",PalletJournalLine."Item No.");
        WarehouseJournalLine2.SETRANGE("Variant Code",NewVariantCode);
        IF (PalletJournalLine."Unit of Measure Code" <> '') AND
           NOT RFEmployeeSetup."No Unit of Measure Check"
        THEN
          WarehouseJournalLine2.SETRANGE(
            "Unit of Measure Code",PalletJournalLine."Unit of Measure Code");
        IF WarehouseJournalLine2.FINDFIRST THEN BEGIN
          Remark := Text011;
          EXIT;
        END;

        BinContent.RESET;
        BinContent.SETRANGE("Location Code",PalletJournalLine."Location Code");
        BinContent.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
        BinContent.SETRANGE("Item No.",PalletJournalLine."Item No.");
        BinContent.SETRANGE("Variant Code",NewVariantCode);
        IF (PalletJournalLine."Unit of Measure Code" <> '') AND
           NOT RFEmployeeSetup."No Unit of Measure Check"
        THEN
          BinContent.SETRANGE("Unit of Measure Code",PalletJournalLine."Unit of Measure Code");
        IF BinContent.FINDFIRST THEN BEGIN
          Remark := Text013;
          EXIT;
        END;

        PalletJournalLine.VALIDATE("Variant Code",NewVariantCode);
      END;
    END;

    PROCEDURE CheckUnitOfMeasure@1240020006(InputValue@1240020000 : Text[250]);
    VAR
      WarehouseJournalLine2@1240020004 : Record 7311;
      BinContent@1240020003 : Record 7302;
      RFMgt@1240020002 : Codeunit 14002801;
      NewUnitOfMeasureCode@1240020001 : Code[20];
    BEGIN
      GetRFEmployeeSetup;
      IF RFEmployeeSetup."Blank as UOM in Phys. Invt." THEN
        IF InputValue = '' THEN
          InputValue := PalletJournalLine."Unit of Measure Code";

      IF NOT RFMgt.GetUnitOfMeasure(
               InputValue,RFEmployeeSetup,PalletJournalLine."Item No.",NewUnitOfMeasureCode)
      THEN BEGIN
        Remark := STRSUBSTNO(Text004,PalletJournalLine.FIELDCAPTION("Unit of Measure Code"));
        EXIT;
      END;

      IF NOT PalletJournalLine."Added from RF" THEN BEGIN
        IF NewUnitOfMeasureCode <> PalletJournalLine."Unit of Measure Code" THEN BEGIN
          Remark := STRSUBSTNO(Text004,PalletJournalLine.FIELDCAPTION("Unit of Measure Code"));
          EXIT;
        END;
      END ELSE BEGIN
        WarehouseJournalLine2.RESET;
        WarehouseJournalLine2.SETRANGE(
          "Journal Template Name",PalletJournalLine."Journal Template Name");
        WarehouseJournalLine2.SETRANGE(
          "Journal Batch Name",PalletJournalLine."Journal Batch Name");
        WarehouseJournalLine2.SETRANGE("Location Code",PalletJournalLine."Location Code");
        WarehouseJournalLine2.SETFILTER("Line No.",'<>%1',PalletJournalLine."Line No.");
        WarehouseJournalLine2.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
        WarehouseJournalLine2.SETRANGE("Item No.",PalletJournalLine."Item No.");
        WarehouseJournalLine2.SETRANGE("Variant Code",PalletJournalLine."Variant Code");
        WarehouseJournalLine2.SETRANGE("Unit of Measure Code",NewUnitOfMeasureCode);
        IF WarehouseJournalLine2.FINDFIRST THEN BEGIN
          Remark := Text011;
          EXIT;
        END;

        BinContent.RESET;
        BinContent.SETRANGE("Location Code",PalletJournalLine."Location Code");
        BinContent.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
        BinContent.SETRANGE("Item No.",PalletJournalLine."Item No.");
        BinContent.SETRANGE("Variant Code",PalletJournalLine."Variant Code");
        BinContent.SETRANGE("Unit of Measure Code",NewUnitOfMeasureCode);
        IF BinContent.FINDFIRST THEN BEGIN
          Remark := Text013;
          EXIT;
        END;

        PalletJournalLine.VALIDATE("Unit of Measure Code",NewUnitOfMeasureCode);
      END;
    END;

    PROCEDURE CheckLotNo@1240020007(InputValue@1240020000 : Text[250]);
    VAR
      LicensePlateMgt@1240020003 : Codeunit 14002971;
    BEGIN
      GetRFEmployeeSetup;

      IF NOT PalletJournalLine."Added from RF" THEN BEGIN
        IF PalletJournalLine."Lot No." = InputValue THEN BEGIN

          IF PalletJournalLine."Serial No." <> '' THEN BEGIN
            IF PalletJournalLine."Box No." <> '' THEN
              NextStatus := 'LotSNnoBox'
            ELSE
              NextStatus := 'LotSNBox';
          END ELSE
            NextStatus := 'Qty';
        END ELSE BEGIN
          Remark := Text020;
          IF PalletJournalLine."Box No." = '' THEN
            NextStatus := 'LotNoBox'
          ELSE
            NextStatus := 'LotBox';
          SetNextRFGroupNoFilter(NextStatus);
        END;
      END;

      IF PalletJournalLine."Added from RF" THEN BEGIN
        PalletJournalLine."Lot No." := InputValue;
        PalletJournalLine.MODIFY;

        IF LicensePlateMgt.IsWhseSerialTracked(PalletJournalLine."Item No.") THEN BEGIN
          IF PalletJournalLine."Box No." <> '' THEN BEGIN
            NextStatus := 'LotSNBox'
          END ELSE BEGIN
            NextStatus := 'LotSNNoBox';
          END;
        END ELSE BEGIN
          NextStatus := 'Qty';
        END;
      END;

      SetNextRFGroupNoFilter(NextStatus);
    END;

    PROCEDURE CheckSerialNo@1240020021(InputValue@1240020000 : Text[250]);
    VAR
      ItemLedgerEntry@1240020001 : Record 32;
      PalletJournalLine2@1240020002 : Record 14002966;
    BEGIN
      GetRFEmployeeSetup;
      IF NOT PalletJournalLine."Added from RF" THEN BEGIN
        IF PalletJournalLine."Serial No." = InputValue THEN BEGIN
          PalletJournalLine."Qty. (Phys. Inventory)" := 1;
          PalletJournalLine.Counted := TRUE;
          PalletJournalLine.MODIFY;
        END ELSE BEGIN
          Remark := Text020;
          IF PalletJournalLine."Box No." = '' THEN
            NextStatus := 'SNNoBox'
          ELSE
            NextStatus := 'SNBox';
          SetNextRFGroupNoFilter(NextStatus);
        END;
      END;

      IF Remark = '' THEN BEGIN
        PalletJournalLine2.RESET;
        PalletJournalLine2.SETRANGE(
          "Journal Template Name",PalletJournalLine."Journal Template Name");
        PalletJournalLine2.SETRANGE(
          "Journal Batch Name",PalletJournalLine."Journal Batch Name");
        PalletJournalLine2.SETFILTER("Line No.",'<>%1',PalletJournalLine."Line No.");
        PalletJournalLine2.SETRANGE(Counted,FALSE);
        PalletJournalLine2.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
        PalletJournalLine2.SETRANGE("Pallet No.",PalletJournalLine."Pallet No.");
        IF PalletJournalLine."Box No." <> '' THEN
          PalletJournalLine2.SETRANGE("Box No.",PalletJournalLine."Box No.");
        PalletJournalLine2.SETRANGE("Item No.",PalletJournalLine."Item No.");
        IF PalletJournalLine."Variant Code" <> '' THEN
          PalletJournalLine2.SETRANGE("Variant Code",PalletJournalLine."Variant Code");
        IF PalletJournalLine."Unit of Measure Code" <> '' THEN
          PalletJournalLine2.SETRANGE(
            "Unit of Measure Code",PalletJournalLine."Unit of Measure Code");
        IF PalletJournalLine."Lot No." <> '' THEN
          PalletJournalLine2.SETRANGE("Lot No.",PalletJournalLine."Lot No.");
        IF PalletJournalLine2.FINDFIRST THEN BEGIN
          IF PalletJournalLine2."Box No." <> '' THEN BEGIN
            IF PalletJournalLine2."Lot No." <> '' THEN
              NextStatus := 'LotSNBox'
            ELSE
              NextStatus := 'SNBox';
          END ELSE BEGIN
            IF PalletJournalLine2."Lot No." <> '' THEN
              NextStatus := 'LotSNNoBox'
            ELSE
              NextStatus := 'SNNoBox';
          END;
        END ELSE BEGIN
          PalletJournalLine2.RESET;
          PalletJournalLine2.SETRANGE(
            "Journal Template Name",PalletJournalLine."Journal Template Name");
          PalletJournalLine2.SETRANGE(
            "Journal Batch Name",PalletJournalLine."Journal Batch Name");
          PalletJournalLine2.SETFILTER("Line No.",'<>%1',PalletJournalLine."Line No.");
          PalletJournalLine2.SETRANGE(Counted,FALSE);
          PalletJournalLine2.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
          PalletJournalLine2.SETRANGE("Pallet No.",PalletJournalLine."Pallet No.");
          IF PalletJournalLine."Box No." <> '' THEN
            PalletJournalLine2.SETRANGE("Box No.",PalletJournalLine."Box No.");
          PalletJournalLine2.SETRANGE("Item No.",PalletJournalLine."Item No.");
          IF PalletJournalLine."Variant Code" <> '' THEN
            PalletJournalLine2.SETRANGE("Variant Code",PalletJournalLine."Variant Code");
          IF PalletJournalLine."Unit of Measure Code" <> '' THEN
            PalletJournalLine2.SETRANGE(
              "Unit of Measure Code",PalletJournalLine."Unit of Measure Code");
          IF PalletJournalLine2.FINDFIRST THEN BEGIN
            IF PalletJournalLine2."Box No." <> '' THEN
              NextStatus := 'LotBox'
            ELSE
              NextStatus := 'LotNoBox';
          END ELSE BEGIN
            PalletJournalLine2.RESET;
            PalletJournalLine2.SETRANGE(
              "Journal Template Name",PalletJournalLine."Journal Template Name");
            PalletJournalLine2.SETRANGE(
              "Journal Batch Name",PalletJournalLine."Journal Batch Name");
            PalletJournalLine2.SETFILTER("Line No.",'<>%1',PalletJournalLine."Line No.");
            PalletJournalLine2.SETRANGE(Counted,FALSE);
            PalletJournalLine2.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
            PalletJournalLine2.SETRANGE("Pallet No.",PalletJournalLine."Pallet No.");
            IF PalletJournalLine."Box No." <> '' THEN
              PalletJournalLine2.SETRANGE("Box No.",PalletJournalLine."Box No.");
            IF PalletJournalLine2.FINDFIRST THEN BEGIN
              IF PalletJournalLine2."Box No." <> '' THEN
                NextStatus := 'ItemBox'
              ELSE
                NextStatus := 'ItemNoBox';
            END ELSE BEGIN
              PalletJournalLine2.RESET;
              PalletJournalLine2.SETRANGE(
                "Journal Template Name",PalletJournalLine."Journal Template Name");
              PalletJournalLine2.SETRANGE(
                "Journal Batch Name",PalletJournalLine."Journal Batch Name");
              PalletJournalLine2.SETFILTER("Line No.",'<>%1',PalletJournalLine."Line No.");
              PalletJournalLine2.SETRANGE(Counted,FALSE);
              PalletJournalLine2.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
              PalletJournalLine2.SETRANGE("Pallet No.",PalletJournalLine."Pallet No.");
              IF PalletJournalLine2.FINDFIRST THEN BEGIN
                IF PalletJournalLine2."Box No." <> '' THEN
                  NextStatus := 'Box'
                ELSE
                  NextStatus := 'ItemNoBox';
              END ELSE BEGIN
                PalletJournalLine2.RESET;
                PalletJournalLine2.SETRANGE(
                  "Journal Template Name",PalletJournalLine."Journal Template Name");
                PalletJournalLine2.SETRANGE(
                  "Journal Batch Name",PalletJournalLine."Journal Batch Name");
                PalletJournalLine2.SETFILTER("Line No.",'<>%1',PalletJournalLine."Line No.");
                PalletJournalLine2.SETRANGE(Counted,FALSE);
                PalletJournalLine2.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
                IF PalletJournalLine2.FINDFIRST THEN BEGIN
                  NextStatus := 'Pallet';
                END ELSE BEGIN
                  PalletJournalLine2.RESET;
                  PalletJournalLine2.SETRANGE(
                    "Journal Template Name",PalletJournalLine."Journal Template Name");
                  PalletJournalLine2.SETRANGE(
                    "Journal Batch Name",PalletJournalLine."Journal Batch Name");
                  PalletJournalLine2.SETFILTER(
                    "Line No.",'<>%1',PalletJournalLine."Line No.");
                  PalletJournalLine2.SETRANGE(Counted,FALSE);
                  IF PalletJournalLine2.FINDFIRST THEN BEGIN
                    NextStatus := 'Bin';
                  END ELSE BEGIN
                    Remark := Text008;
                    IF PalletJournalLine."Lot No." <> '' THEN BEGIN
                      IF PalletJournalLine."Box No." <> '' THEN
                        NextStatus := 'LotSNBox'
                      ELSE
                        NextStatus := 'LotSNNoBox';
                    END ELSE BEGIN
                      IF PalletJournalLine."Box No." <> '' THEN
                        NextStatus := 'SNBox'
                      ELSE
                        NextStatus := 'SNNoBox';
                    END;
                  END;
                END;
              END;
            END;
          END;
        END;
      END;

      IF PalletJournalLine."Added from RF" THEN BEGIN
        ItemLedgerEntry.SETRANGE("Item No.",PalletJournalLine."Item No.");
        ItemLedgerEntry.SETRANGE("Lot No.",InputValue);
        IF ItemLedgerEntry.FINDFIRST THEN BEGIN
          PalletJournalLine."Lot No." := InputValue;
          PalletJournalLine."Last Scan Date" := WORKDATE;
          PalletJournalLine."Last Scan Time" := TIME;
          PalletJournalLine.MODIFY;
          NextStatus := 'Qty';
        END ELSE BEGIN
          Remark := Text030;
          IF PalletJournalLine."Box No." <> '' THEN BEGIN
            NextStatus := 'LotBox';
          END ELSE BEGIN
            NextStatus := 'LotNoBox';
          END;
        END;
      END;

      SetNextRFGroupNoFilter(NextStatus);

      IF Remark = '' THEN BEGIN
        LastLine := TRUE;
        PalletJournalLine := PalletJournalLine2;
        PalletJournalLine.COPYFILTERS(PalletJournalLine2);
        PalletJournalLine.SETRANGE("Pallet No.",PalletJournalLine."Pallet No.");
      END;
    END;

    PROCEDURE CheckQtyPhysical@1240020008(InputValue@1240020000 : Text[250]);
    VAR
      PalletJournalLine2@1240020004 : Record 14002966;
      ItemIdent@1240020006 : Record 7704;
      LicensePlateMgt@1240020005 : Codeunit 14002971;
      PalletQAMgt@1240020007 : Codeunit 14002513;
      RFMgt@1240020002 : Codeunit 14002801;
      NewQuantity@1240020001 : Decimal;
    BEGIN
      GetRFEmployeeSetup;

      IF NOT RFMgt.GetQuantity(InputValue,RFEmployeeSetup,NewQuantity) THEN BEGIN
        Remark := STRSUBSTNO(Text004,PalletJournalLine.FIELDCAPTION(Quantity));
        NextStatus := 'Qty';
        Remark := STRSUBSTNO(Text004,PalletJournalLine.FIELDCAPTION(Quantity));
        SetNextRFGroupNoFilter(NextStatus);
        EXIT;
      END;

      IF Remark = '' THEN BEGIN
        PalletJournalLine2.RESET;
        PalletJournalLine2.SETRANGE(
          "Journal Template Name",PalletJournalLine."Journal Template Name");
        PalletJournalLine2.SETRANGE(
          "Journal Batch Name",PalletJournalLine."Journal Batch Name");
        PalletJournalLine2.SETFILTER("Line No.",'<>%1',PalletJournalLine."Line No.");
        PalletJournalLine2.SETRANGE(Counted,FALSE);
        PalletJournalLine2.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
        PalletJournalLine2.SETRANGE("Pallet No.",PalletJournalLine."Pallet No.");
        IF PalletJournalLine."Box No." <> '' THEN
          PalletJournalLine2.SETRANGE("Box No.",PalletJournalLine."Box No.");
        IF PalletJournalLine2.FINDFIRST THEN BEGIN
          IF PalletJournalLine2."Box No." <> '' THEN
            NextStatus := 'ItemBox'
          ELSE
            NextStatus := 'ItemNoBox';
        END ELSE BEGIN
          PalletJournalLine2.RESET;
          PalletJournalLine2.SETRANGE(
            "Journal Template Name",PalletJournalLine."Journal Template Name");
          PalletJournalLine2.SETRANGE(
            "Journal Batch Name",PalletJournalLine."Journal Batch Name");
          PalletJournalLine2.SETFILTER("Line No.",'<>%1',PalletJournalLine."Line No.");
          PalletJournalLine2.SETRANGE(Counted,FALSE);
          PalletJournalLine2.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
          PalletJournalLine2.SETRANGE("Pallet No.",PalletJournalLine."Pallet No.");
          IF PalletJournalLine2.FINDFIRST THEN BEGIN
            IF PalletJournalLine2."Box No." <> '' THEN
              NextStatus := 'Box'
            ELSE
              NextStatus := 'ItemNoBox';
          END ELSE BEGIN
            PalletJournalLine2.RESET;
            PalletJournalLine2.SETRANGE(
              "Journal Template Name",PalletJournalLine."Journal Template Name");
            PalletJournalLine2.SETRANGE(
              "Journal Batch Name",PalletJournalLine."Journal Batch Name");
            PalletJournalLine2.SETFILTER("Line No.",'<>%1',PalletJournalLine."Line No.");
            PalletJournalLine2.SETRANGE(Counted,FALSE);
            PalletJournalLine2.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
            IF PalletJournalLine2.FINDFIRST THEN BEGIN
              NextStatus := 'Pallet';
            END ELSE BEGIN
              PalletJournalLine2.RESET;
              PalletJournalLine2.SETRANGE(
                "Journal Template Name",PalletJournalLine."Journal Template Name");
              PalletJournalLine2.SETRANGE(
                "Journal Batch Name",PalletJournalLine."Journal Batch Name");
              PalletJournalLine2.SETFILTER("Line No.",'<>%1',PalletJournalLine."Line No.");
              PalletJournalLine2.SETRANGE(Counted,FALSE);
              IF PalletJournalLine2.FINDFIRST THEN BEGIN
                NextStatus := 'Bin';
              END ELSE BEGIN
                Remark := Text008;
                NextStatus := 'Bin';
                PalletJournalLine.Counted := TRUE;
                PalletJournalLine.VALIDATE("Qty. (Phys. Inventory)",NewQuantity);
                PalletJournalLine.MODIFY;
                LastLine := TRUE;
              END;
            END;
          END;
        END;
      END;

      IF (Remark = '') OR LastLine THEN BEGIN
        PalletJournalLine.Counted := TRUE;

        //calculated may have changed since starting the process
        PalletJournalLine."Qty. (Calculated)" := LicensePlateMgt.GetItemQtyOfStorageID(
          PalletJournalLine."Pallet No.",PalletJournalLine."Box No.",ItemIdent,
          PalletJournalLine."Lot No.",PalletJournalLine."Serial No.");

        PalletJournalLine."Qty. (Calculated) (Base)" :=
          PalletJournalLine."Qty. (Calculated)" * PalletJournalLine."Qty. Per Unit of Measure";

        IF RFEmployeeSetup."Pallet Counting Type" =
          RFEmployeeSetup."Pallet Counting Type"::"Real Time"
        THEN
          LicensePlateMgt.UpdatePhysInv(PalletJournalLine,NewQuantity,TRUE,
            PalletJournalLine."Warehouse Employee Code",Remark);

        ItemIdent."Item No." := PalletJournalLine."Item No.";
        ItemIdent."Variant Code" := PalletJournalLine."Variant Code";
        ItemIdent."Unit of Measure Code" := PalletJournalLine."Unit of Measure Code";

        PalletJournalLine.VALIDATE("Qty. (Phys. Inventory)",NewQuantity);
        PalletJournalLine.Quantity := PalletJournalLine."Qty. (Phys. Inventory)" -
          PalletJournalLine."Qty. (Calculated)";
        PalletJournalLine.MODIFY;

        LastLine := TRUE;
        PalletJournalLine := PalletJournalLine2;
        PalletJournalLine.COPYFILTERS(PalletJournalLine2);
        PalletJournalLine.SETRANGE("Pallet No.",PalletJournalLine."Pallet No.");
      END;

      SetNextRFGroupNoFilter(NextStatus);
      PalletQAMgt.CreateStatisticEntry(PalletJournalLine);
    END;

    PROCEDURE GetPalletBinContent@1240020022(PalletJournalLine@1240020000 : Record 14002966;VAR PalletBinContent@1240020001 : Record 14002963);
    BEGIN
      PalletBinContent.RESET;
      PalletBinContent.SETRANGE(Bin,PalletJournalLine."Bin Code");
      PalletBinContent.SETRANGE(Location,PalletJournalLine."Location Code");
      PalletBinContent.SETRANGE("Pallet No.",PalletJournalLine."Pallet No.");
      IF PalletJournalLine."Box No." <> '' THEN
        PalletBinContent.SETRANGE("Box No.",PalletJournalLine."Box No.");
      PalletBinContent.SETRANGE("Item No.",PalletJournalLine."Item No.");
      IF PalletJournalLine."Variant Code" <> '' THEN
        PalletBinContent.SETRANGE("Variant No.",PalletJournalLine."Variant Code");
      IF PalletJournalLine."Lot No." <> '' THEN
        PalletBinContent.SETRANGE("Lot No.",PalletJournalLine."Lot No.");
      IF PalletJournalLine."Serial No." <> '' THEN
        PalletBinContent.SETRANGE("Serial No.",PalletJournalLine."Serial No.");
      IF PalletJournalLine."Unit of Measure Code" <> '' THEN
        PalletBinContent.SETRANGE("Unit of Measure",PalletJournalLine."Unit of Measure Code");
      IF PalletBinContent.FINDFIRST THEN ;
    END;

    PROCEDURE RegisterPalletJournalBatch@1240020033(PalletJournalBatch@1240020000 : Record 14002965);
    VAR
      PalletJournalLine@1240020001 : Record 14002966;
      LicensePlateMgt@1240020002 : Codeunit 14002971;
    BEGIN
      PalletJournalLine.SETRANGE("Journal Template Name",
        PalletJournalBatch."Journal Template Name");
      PalletJournalLine.SETRANGE("Journal Batch Name",PalletJournalBatch.Name);
      IF PalletJournalLine.FINDFIRST THEN
        LicensePlateMgt.UpdatePhysInvLine(PalletJournalLine);
    END;

    PROCEDURE PrepareData@1240020009();
    VAR
      PalletJournalBatch@1240020002 : Record 14002965;
      TableNo@1240020001 : Integer;
      RecordId@1240020000 : RecordID;
    BEGIN
      XMLDOMMgmt.FindNode(RootNode,'Header/Input',ReturnedNode);

      EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'));
      RecRef.OPEN(TableNo);
      EVALUATE(RecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'));
      IF RecRef.GET(RecordId) THEN BEGIN
        RecRef.SETTABLE(PalletJournalBatch);
        GetRFEmployeeSetup;
        PalletJournalLine.SETRANGE(
          "Journal Template Name",PalletJournalBatch."Journal Template Name");
        PalletJournalLine.SETRANGE("Journal Batch Name",PalletJournalBatch.Name);
        PalletJournalLine.SETRANGE("Location Code",PalletJournalBatch."Location Code");
        PalletJournalLine.SETRANGE(Counted,FALSE);

        IF NOT PalletJournalLine.FINDFIRST THEN BEGIN
          ADCSNasStartup.SendError(Text012);
          EXIT;
        END;
        IF (PalletJournalLine."First Scan Time" = 0T) AND
           RFEmployeeSetup."No Physical Inventory Quantity"
        THEN BEGIN

        END;
        NextStatus := 'Bin';
        SetNextRFGroupNoFilter(NextStatus);

        ADCSCommunication.SetRFGroupFilter(GetRFGroupNoFilter(PalletJournalLine,FALSE));

        RecRef.GETTABLE(PalletJournalLine);
        ADCSCommunication.SetRecRef(RecRef);
        ActiveInputField := 1;
        SendForm(ActiveInputField);
      END ELSE
        ERROR(Text007);
    END;

    PROCEDURE SendForm@1240020010(InputField@1240020000 : Integer);
    BEGIN
      // Prepare Miniform
      ADCSCommunication.SetRFGroupFilter(GetRFGroupNoFilter(PalletJournalLine,FALSE));
      ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,InputField,Remark,LoginID);
      ADCSCommunication.GetReturnXML(DOMxmlin);
      ADCSCommunication.SetExtraValue('NextStatus',NextStatus);

      ADCSNasStartup.SendXMLReply(DOMxmlin);
    END;

    PROCEDURE GetRFGroupNoFilter@1240020012(PalletJournalLine@1240020001 : Record 14002966;ItemLevel@1240020000 : Boolean) : Text[30];
    BEGIN
      IF ItemLevel THEN BEGIN
        IF PalletJournalLine."Serial No." <> '' THEN
          RFGroupNoFilter := RFGroupNoFilter + '|1';
        IF PalletJournalLine."Lot No." <> '' THEN
          RFGroupNoFilter := RFGroupNoFilter + '|2';
        GetRFEmployeeSetup;
        IF RFEmployeeSetup."No Physical Inventory Quantity" THEN
          RFGroupNoFilter := RFGroupNoFilter + '|4'
        ELSE
          RFGroupNoFilter := RFGroupNoFilter + '|3';
        IF PalletJournalLine."Variant Code" <> '' THEN
          RFGroupNoFilter := RFGroupNoFilter + '|5';
      END;

      EXIT(RFGroupNoFilter);
    END;

    PROCEDURE SetNextRFGroupNoFilter@1240020013(Status@1240020000 : Text[30]);
    BEGIN

      CASE Status OF
        'Bin':             //Show bin - input
          RFGroupNoFilter := '0|8';
        'Pallet':          //show pallet - input|bin - output
          RFGroupNoFilter := '0|9|10';
        'Box':             //show box - input|bin,pallet - output
          RFGroupNoFilter := '0|9|11|12';
        'ItemNoBox':        //show item - input|bin,pallet - output
          RFGroupNoFilter := '0|5|9|11|7';
        'ItemBox':          //show item - input|bin,pallet,box - output
          RFGroupNoFilter := '0|5|9|11|13|7';
        'LotNoBox':         //show lot - input|bin,pallet,item - outpout
          RFGroupNoFilter := '0|5|9|11|17|14';
        'LotBox':           //show lot - input|bin,pallet,box.item - outpout
          RFGroupNoFilter := '0|5|9|11|13|17|14';
        'SNNoBox':          //show SN - input|bin,pallet,item - outpout
          RFGroupNoFilter := '0|5|9|11|17|15';
        'SNBox':            //show SN - input|bin,pallet,box,item - outpout
          RFGroupNoFilter := '0|5|9|11|13|17|15';
        'LotSNBox':         //show SN - input|bin,pallet,box,item,lot - outpout
          RFGroupNoFilter := '0|5|9|11|13|17|15|2';
        'LotSNNoBox':       //show SN - input|bin,pallet,item,lot - output
          RFGroupNoFilter := '0|5|9|11|17|15|2';
        'Qty':              //show everything
          BEGIN
            IF RFEmployeeSetup."No Physical Inventory Quantity" THEN
              RFGroupNoFilter := '0|5|9|11|17|13|3|2|18'
            ELSE
              RFGroupNoFilter := '0|5|9|11|17|13|3|2|16';
          END;
        'QtynoBox':         //show everything but no box
          BEGIN
            IF RFEmployeeSetup."No Physical Inventory Quantity" THEN
              RFGroupNoFilter := '0|5|9|11|17|3|2|18'
            ELSE
              RFGroupNoFilter := '0|5|9|11|17|3|2|16';
          END;
      END;

      IF (Status <> 'Bin') AND
         (Status <> 'Pallet') AND
         (Status <> 'Box')
      THEN
        IF PalletJournalLine."Variant Code" <> '' THEN
          RFGroupNoFilter := RFGroupNoFilter + '|6';
    END;

    PROCEDURE GetRFEmployeeSetup@1240020014();
    BEGIN
      IF RFEmployeeSetupRetrieved THEN
        EXIT;

      RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
      RFEmployeeSetupRetrieved := TRUE;
    END;

    PROCEDURE IsItemTracked@1240020015(ItemCode@1240020000 : Code[20]) : Boolean;
    VAR
      Item@1240020001 : Record 27;
    BEGIN
      EXIT(FALSE);
    END;

    PROCEDURE IsLotTracked@1240020016(ItemCode@1240020000 : Code[20]) : Boolean;
    VAR
      Item@1240020001 : Record 27;
    BEGIN
      EXIT(TRUE);
    END;

    PROCEDURE IsSNTracked@1240020017(ItemCode@1240020000 : Code[20]) : Boolean;
    BEGIN
      EXIT(TRUE);
    END;

    PROCEDURE UpdatePhysInv@1240020018(PalletJournalLine@1240020000 : Record 14002966);
    VAR
      Location@1240020005 : Record 14;
      ItemJournalLine@1240020003 : Record 83;
      PalletJournalLine2@1240020004 : Record 14002966;
      WhseJournalLine@1240020002 : Record 7311;
      QtyDummy@1240020001 : Decimal;
    BEGIN
      ERROR('updatephysicalinventory');
      Location.GET(PalletJournalLine."Location Code");
      IF Location."Directed Put-away and Pick" THEN BEGIN
        WhseJournalLine.SETRANGE("Journal Template Name",PalletJournalLine."Journal Template Name");
        WhseJournalLine.SETRANGE("Journal Batch Name",PalletJournalLine."Journal Batch Name");
        WhseJournalLine.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
        IF WhseJournalLine.FINDFIRST THEN BEGIN
          REPEAT
            QtyDummy := 0;
            PalletJournalLine2.RESET;
            PalletJournalLine2.SETRANGE("Journal Template Name",WhseJournalLine."Journal Template Name");
            PalletJournalLine2.SETRANGE("Journal Batch Name",WhseJournalLine."Journal Batch Name");
            PalletJournalLine2.SETRANGE("Location Code",WhseJournalLine."Location Code");
            PalletJournalLine2.SETRANGE("Physical Inv. Line",WhseJournalLine."Line No.");

            IF PalletJournalLine2.FINDFIRST THEN BEGIN

              REPEAT
                QtyDummy := QtyDummy + PalletJournalLine2."Qty. (Phys. Inventory)";
              UNTIL PalletJournalLine2.NEXT = 0;
              WhseJournalLine.VALIDATE("Qty. (Phys. Inventory)",QtyDummy);
              WhseJournalLine.MODIFY;
            END;
          UNTIL WhseJournalLine.NEXT = 0;
        END;
      END ELSE BEGIN
        ItemJournalLine.SETRANGE("Journal Template Name",PalletJournalLine."Journal Template Name");
        ItemJournalLine.SETRANGE("Journal Batch Name",PalletJournalLine."Journal Batch Name");
        ItemJournalLine.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
        IF ItemJournalLine.FINDFIRST THEN BEGIN
          REPEAT
            QtyDummy := 0;
            PalletJournalLine2.RESET;
            PalletJournalLine2.SETRANGE("Journal Template Name",ItemJournalLine."Journal Template Name");
            PalletJournalLine2.SETRANGE("Journal Batch Name",ItemJournalLine."Journal Batch Name");
            PalletJournalLine2.SETRANGE("Location Code",ItemJournalLine."Location Code");
            PalletJournalLine2.SETRANGE("Physical Inv. Line",ItemJournalLine."Line No.");

            IF PalletJournalLine2.FINDFIRST THEN BEGIN

              REPEAT
                QtyDummy := QtyDummy + PalletJournalLine2."Qty. (Phys. Inventory)";
              UNTIL PalletJournalLine2.NEXT = 0;
              ItemJournalLine.VALIDATE("Qty. (Phys. Inventory)",QtyDummy);
              ItemJournalLine.MODIFY;
            END;
          UNTIL ItemJournalLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE UpdatePhysicalinventory@1240020019(PalletJournalLine@1240020001 : Record 14002966;VAR Remark@1240020000 : Text[255]);
    VAR
      PalletJournalLine2@1240020011 : Record 14002966;
      ItemJnlLine@1240020010 : Record 83;
      Item@1240020007 : Record 27;
      PalletBinContent@1240020006 : Record 14002963;
      PhysQty@1240020004 : Decimal;
      MovedQty@1240020003 : Decimal;
    BEGIN
      IF NOT PalletJournalLine.FINDFIRST THEN BEGIN
        Remark := Text006;
        EXIT;
      END;

      ItemJnlLine.SETRANGE("Journal Template Name",PalletJournalLine."Journal Template Name");
      ItemJnlLine.SETRANGE("Journal Batch Name",PalletJournalLine."Journal Batch Name");
      ItemJnlLine.SETRANGE("Location Code",PalletJournalLine."Location Code");
      ItemJnlLine.SETRANGE("Bin Code",PalletJournalLine."Bin Code");
      IF ItemJnlLine.FINDFIRST THEN BEGIN
        PalletJournalLine2.SETRANGE("Journal Template Name",ItemJnlLine."Journal Template Name");
        PalletJournalLine2.SETRANGE("Journal Batch Name",ItemJnlLine."Journal Batch Name");
        PalletJournalLine2.SETRANGE("Location Code",ItemJnlLine."Location Code");
        PalletJournalLine2.SETRANGE("Bin Code",ItemJnlLine."Bin Code");
        REPEAT
          PalletJournalLine2.SETRANGE("Item No.",ItemJnlLine."Item No.");
          IF ItemJnlLine."Variant Code" <> '' THEN
            PalletJournalLine2.SETRANGE("Variant Code",ItemJnlLine."Variant Code");
          IF ItemJnlLine."Unit of Measure Code" <> '' THEN
            PalletJournalLine2.SETRANGE("Unit of Measure Code",ItemJnlLine."Unit of Measure Code");
          IF PalletJournalLine2.FINDFIRST THEN BEGIN
            PhysQty := 0;
            MovedQty := 0;
            REPEAT
              PhysQty := PhysQty + PalletJournalLine."Qty. (Phys. Inventory)";

              PalletBinContent.SETRANGE(Location,PalletJournalLine2."Location Code");
              PalletBinContent.SETRANGE(Bin,PalletJournalLine2."Bin Code");
              PalletBinContent.SETRANGE("Item No.",PalletJournalLine2."Item No.");
              IF PalletJournalLine2."Variant Code" <> '' THEN
                PalletBinContent.SETRANGE("Variant No.",PalletJournalLine2."Variant Code");
              IF PalletJournalLine2."Unit of Measure Code" <> '' THEN
                PalletBinContent.SETRANGE("Unit of Measure",PalletJournalLine2."Unit of Measure Code");
              IF NOT PalletBinContent.FINDFIRST THEN BEGIN // pallet was moved
                MovedQty := MovedQty + PalletJournalLine."Quantity Calc.";
              END;
              PalletJournalLine."Physical Inv. Line" := ItemJnlLine."Line No.";
              PalletJournalLine.MODIFY;
            UNTIL PalletJournalLine2.NEXT = 0;
            ItemJnlLine.VALIDATE("Qty. (Phys. Inventory)", PhysQty);
            IF MovedQty > 0 THEN
              ItemJnlLine.VALIDATE("Qty. (Calculated)",ItemJnlLine."Qty. (Calculated)" - MovedQty);

            PalletBinContent.RESET;
            PalletBinContent.SETRANGE(Location,PalletJournalLine2."Location Code");
            PalletBinContent.SETRANGE(Bin,PalletJournalLine2."Bin Code");
            PalletBinContent.SETRANGE("Pallet No.",PalletJournalLine2."Pallet No.");
            ItemJnlLine.MODIFY;
          END;
        UNTIL ItemJnlLine.NEXT = 0;
      END;
    END;

    PROCEDURE CreateItemTrackingLine@1240020020(PalletJournalLine@1240020000 : Record 14002966);
    BEGIN
      ERROR('');
    END;

    EVENT DOMxmlin@1240020014::NodeInserting@93(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020014::NodeInserted@94(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020014::NodeRemoving@95(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020014::NodeRemoved@96(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020014::NodeChanging@97(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020014::NodeChanged@98(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

