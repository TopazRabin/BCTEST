OBJECT Codeunit 51409 Sales-Split Order
{
  OBJECT-PROPERTIES
  {
    Date=09/24/21;
    Time=12:00:00 AM;
    Modified=Yes;
    Version List=TPZ000.00.00,001;
  }
  PROPERTIES
  {
    TableNo=36;
    OnRun=BEGIN
            TESTFIELD("Document Type","Document Type"::Order);
            TESTFIELD(Status,Status::Open);
            Location.RESET;
            IF Location.FINDSET THEN
              REPEAT
                OldSalesLine.RESET;
                OldSalesLine.SETCURRENTKEY("Document Type","Document No.","Location Code");
                OldSalesLine.SETRANGE("Document Type","Document Type");
                OldSalesLine.SETRANGE("Document No.","No.");
                OldSalesLine.SETRANGE(Type,OldSalesLine.Type::Item);
                OldSalesLine.SETRANGE("Location Code",Location.Code);
                OldSalesLine.SETFILTER("Outstanding Quantity",'>0');

                IF (Location.Code <> "Location Code") AND
                   OldSalesLine.FIND('-')
                THEN
                  REPEAT
                    NewSalesLine.LOCKTABLE;

                    IF (PrevLocationCode = '') OR
                       (Location.Code <> PrevLocationCode)
                    THEN BEGIN
                      NewSalesHeader.INIT;
                      NewSalesHeader."Document Type" := "Document Type";
                      NewSalesHeader."No." := '';
                      NewSalesHeader.INSERT(TRUE);

                      NewSalesLine.SETRANGE("Document Type","Document Type");
                      NewSalesLine.SETRANGE("Document No.","No.");

                      NewSalesHeader.TRANSFERFIELDS(Rec,FALSE);
                      //<TPZ1530>
                      NewSalesHeader."Shipment Date":=WORKDATE;
                      //</TPZ1530>
                      //<TPZ3324>
                      NewSalesHeader.VALIDATE("Shipment Date","Shipment Date");
                      NewSalesHeader.VALIDATE("Posting Date","Posting Date");
                      //</TPZ3324>

                      //<TPZ1640>
                      NewSalesHeader.VALIDATE("Document Date",WORKDATE);
                       //<TPZ1640>  -
                      //<TPZ9541>
                      NewSalesHeader.VALIDATE("Posting Date",WORKDATE);
                      //<TPZ9541>
                      NewSalesHeader."Last Shipping No." := '';
                      // <TOP8624>
                      NewSalesHeader."Shipping No." := '';
                      NewSalesHeader."Posting No." := '';
                      // <TOP8624>
                      //<TPZ1655>
                      NewSalesHeader."Warehouse Release No." := '';
                      //</TPZ1655>
                      NewSalesHeader.Status := NewSalesHeader.Status::Open;
                      NewSalesHeader.Invoice := FALSE;
                      NewSalesHeader.Ship := FALSE;
                      NewSalesHeader.VALIDATE("Location Code",Location.Code);
                      NewSalesHeader."No. Printed" := 0;

                      NewSalesHeader."Master Order No." := "No.";

                      IF "Free Freight" THEN BEGIN
                        SalesSetup.GET;
                        SalesSetup.TESTFIELD(SalesSetup."Split Order F. F. Reason Code");
                        NewSalesHeader."Free Freight Reason Code" := SalesSetup."Split Order F. F. Reason Code";
                        //<TPZ2120>
                        "Free Freight Reason Code" := SalesSetup."Split Order F. F. Reason Code";
                        MODIFY();
                        //</TPZ2120>
                      END;

                      NewSalesHeader.MODIFY;

                      CopyCommentLines(
                        "Document Type",
                        NewSalesHeader."Document Type",
                        "No.",
                        NewSalesHeader."No.");

                      SplitCount := SplitCount + 1;
                    END;

                    CopyEmailList("No.",NewSalesHeader."No.");//<TPZ1676>//EB

                    CopySalesLine(NewSalesHeader,NewSalesLine,Rec,OldSalesLine);

                    OldSalesLine.VALIDATE(Quantity,OldSalesLine."Quantity Shipped");
                    OldSalesLine.VALIDATE("Location Code",'');
                    OldSalesLine.MODIFY(TRUE);

                    PrevLocationCode := Location.Code;
                  UNTIL OldSalesLine.NEXT = 0;
              UNTIL Location.NEXT = 0;

            IF GUIALLOWED THEN
              IF SplitCount > 0 THEN
                MESSAGE(Text51400,"Document Type","No.",SplitCount + 1)
              ELSE
                ERROR(Text51401);
          END;

  }
  CODE
  {
    VAR
      SalesSetup@1000000007 : Record 311;
      Location@1000000001 : Record 14;
      NewSalesHeader@1000000000 : Record 36;
      OldSalesLine@1000000003 : Record 37;
      NewSalesLine@1000000002 : Record 37;
      OldSalesCommentLine@1000000009 : Record 44;
      NewSalesCommentLine@1000000010 : Record 44;
      SplitCount@1000000004 : Integer;
      Text51400@1000000005 : TextConst 'ENU=%1 %2 has been split into %3 order(s).';
      PrevLocationCode@1000000006 : Code[10];
      Text51401@1000000008 : TextConst 'ENU=There is nothing to split.';
      OldEmailList@1000000012 : Record 14000908;
      NewEmailList@1000000011 : Record 14000908;
      EmailList@1000000013 : Record 14000908;

    LOCAL PROCEDURE CopySalesLine@7(VAR ToSalesHeader@1004 : Record 36;VAR ToSalesLine@1001 : Record 37;VAR FromSalesHeader@1005 : Record 36;VAR FromSalesLine@1002 : Record 37);
    BEGIN
      ToSalesLine.SetSalesHeader(ToSalesHeader);
      ToSalesLine.INIT;
      ToSalesLine."Document Type" := ToSalesHeader."Document Type";
      ToSalesLine."Document No." := ToSalesHeader."No.";
      ToSalesLine."Line No." := FromSalesLine."Line No.";

      UpdateSalesLine(ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine);

      ToSalesLine."Shortcut Dimension 1 Code" := FromSalesLine."Shortcut Dimension 1 Code";
      ToSalesLine."Shortcut Dimension 2 Code" := FromSalesLine."Shortcut Dimension 2 Code";
      ToSalesLine."Shortcut Dimension 5 Code" := FromSalesLine."Shortcut Dimension 5 Code";
      ToSalesLine."Dimension Set ID" := FromSalesLine."Dimension Set ID";

      //<TPZ1427>
      ToSalesLine."External Document Line No." := FromSalesLine."External Document Line No.";
      //</TPZ1427>

      ToSalesLine.INSERT;
    END;

    LOCAL PROCEDURE UpdateSalesLine@132(VAR ToSalesHeader@1005 : Record 36;VAR ToSalesLine@1000 : Record 37;VAR FromSalesHeader@1001 : Record 36;VAR FromSalesLine@1002 : Record 37);
    BEGIN
      ToSalesLine.VALIDATE(Type,FromSalesLine.Type);

      //<TPZ2211>
      //ToSalesLine.VALIDATE(Description,FromSalesLine.Description);
      //ToSalesLine.VALIDATE("Description 2",FromSalesLine."Description 2");
      ToSalesLine.Description := FromSalesLine.Description;
      ToSalesLine."Description 2" := FromSalesLine."Description 2";
      //</TPZ2211>

      IF (FromSalesLine.Type <> 0) AND (FromSalesLine."No." <> '') THEN BEGIN
        ToSalesLine.VALIDATE("No.",FromSalesLine."No.");
        ToSalesLine.VALIDATE("Location Code",FromSalesLine."Location Code");
        ToSalesLine.VALIDATE("Unit of Measure",FromSalesLine."Unit of Measure");
        ToSalesLine.VALIDATE("Unit of Measure Code",FromSalesLine."Unit of Measure Code");
        ToSalesLine.VALIDATE(Quantity,FromSalesLine."Outstanding Quantity");

        ToSalesLine.VALIDATE("Unit Price",FromSalesLine."Unit Price");
        ToSalesLine.VALIDATE("Line Discount %",FromSalesLine."Line Discount %");
        // <TPZ1613>
        ToSalesLine."Quote No." := FromSalesLine."Quote No.";
        ToSalesLine."Quote Line No.":= FromSalesLine."Quote Line No.";
        // <TPZ1613>

      END;
      IF (FromSalesLine.Type = FromSalesLine.Type::" ") AND (FromSalesLine."No." <> '') THEN
        ToSalesLine.VALIDATE("No.",FromSalesLine."No.");
      // <TPZ1107>
      ToSalesLine.VALIDATE(Sample,FromSalesLine.Sample);
      // </TPZ1107>
      //<TPZ2368>
      ToSalesLine.VALIDATE(Promo,FromSalesLine.Promo);
      //</TPZ2368>
    END;

    LOCAL PROCEDURE CopyCommentLines@22(FromDocumentType@1000 : Integer;ToDocumentType@1001 : Integer;FromNumber@1002 : Code[20];ToNumber@1003 : Code[20]);
    BEGIN
      OldSalesCommentLine.RESET;
      OldSalesCommentLine.SETRANGE("Document Type",FromDocumentType);
      OldSalesCommentLine.SETRANGE("No.",FromNumber);
      IF OldSalesCommentLine.FINDSET THEN
        REPEAT
          NewSalesCommentLine := OldSalesCommentLine;
          NewSalesCommentLine."Document Type" := ToDocumentType;
          NewSalesCommentLine."No." := ToNumber;
          NewSalesCommentLine.INSERT;
        UNTIL OldSalesCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyEmailList@1000000000(FromNumber@1000000001 : Code[20];ToNumber@1000000000 : Code[20]);
    BEGIN
      //<TPZ1676>
      EmailList.RESET;
      EmailList.SETRANGE("Table ID",36);
      EmailList.SETRANGE(Type,1);
      EmailList.SETRANGE(Code,ToNumber);
      IF NOT EmailList.FINDFIRST THEN BEGIN
        OldEmailList.RESET;
        OldEmailList.SETRANGE("Table ID",36);
        OldEmailList.SETRANGE(Type,1);
        OldEmailList.SETRANGE(Code,FromNumber);
        IF OldEmailList.FINDSET THEN
          REPEAT
            NewEmailList := OldEmailList;
            NewEmailList.Code := ToNumber;
            NewEmailList.INSERT;
          UNTIL OldEmailList.NEXT = 0;
      END;
      //</TPZ1676>
    END;

    PROCEDURE CreateSplitOrder@1000000004(VAR PsalesHeader@1000000000 : Record 36);
    VAR
      SalesLineLoc@1000000006 : Record 37;
      QtyAvailQtyAvailToPick@1000000005 : Decimal;
      Item@1000000004 : Record 27;
      WhseCreatePick@1000000003 : Codeunit 5778;
      SalesSplitOrder@1000000002 : Codeunit 51409;
      SplitCOunt@1000000001 : Integer;
      SalesLineTemp@1000000007 : TEMPORARY Record 37;
      Text51402@1000000008 : TextConst 'ENU=Do you want to split the order by location?';
    BEGIN
      //<TPZ2782>
      SalesLineLoc.RESET;
      SalesLineLoc.SETRANGE("Document Type",PsalesHeader."Document Type");
      SalesLineLoc.SETRANGE("Document No.",PsalesHeader."No.");
      SalesLineLoc.SETRANGE(Type,SalesLineLoc.Type::Item);
      SalesLineLoc.SETFILTER("Outstanding Quantity",'>0');
      IF SalesLineLoc.FINDSET THEN BEGIN
        REPEAT
          QtyAvailQtyAvailToPick := 0;
          IF Item.GET(SalesLineLoc."No.") THEN BEGIN
            IF Location.GET(SalesLineLoc."Location Code") AND
                NOT Location."Bin Mandatory"
            THEN BEGIN
              Item.SETRANGE("Variant Filter",SalesLineLoc."Variant Code");
              Item.SETRANGE("Location Filter",SalesLineLoc."Location Code");
              Item.CALCFIELDS(Inventory,"Qty. on Sales Order");
              QtyAvailQtyAvailToPick := Item.Inventory - Item."Qty. on Sales Order";
            END ELSE
              QtyAvailQtyAvailToPick := WhseCreatePick.QtyAvailtoPick(SalesLineLoc."No.",SalesLineLoc."Location Code");
          END;

          IF QtyAvailQtyAvailToPick <= 0 THEN BEGIN

            SalesLineTemp.INIT;
            SalesLineTemp := SalesLineLoc;
            SalesLineTemp.INSERT;

          END;
        UNTIL SalesLineLoc.NEXT = 0;
      END;

      IF SalesLineTemp.FINDSET THEN BEGIN
        IF SplitCOunt = 0 THEN BEGIN
            IF GUIALLOWED THEN
                IF NOT CONFIRM(Text51402,FALSE) THEN
            EXIT;
        END;
          NewSalesLine.LOCKTABLE;
          NewSalesHeader.INIT;
          NewSalesHeader."Document Type" := PsalesHeader."Document Type";
          NewSalesHeader."No." := '';
          NewSalesHeader.INSERT(TRUE);

          NewSalesLine.SETRANGE("Document Type",PsalesHeader."Document Type");
          NewSalesLine.SETRANGE("Document No.",PsalesHeader."No.");

          NewSalesHeader.TRANSFERFIELDS(PsalesHeader,FALSE);

          NewSalesHeader."Shipment Date":=WORKDATE;
          NewSalesHeader.VALIDATE("Document Date",WORKDATE);
          NewSalesHeader.VALIDATE("Posting Date",WORKDATE);
          NewSalesHeader."Last Shipping No." := '';
          NewSalesHeader."Shipping No." := '';
          NewSalesHeader."Posting No." := '';
          NewSalesHeader."Warehouse Release No." := '';
          NewSalesHeader.Status := NewSalesHeader.Status::Open;
          NewSalesHeader.Invoice := FALSE;
          NewSalesHeader.Ship := FALSE;
          NewSalesHeader.VALIDATE("Location Code",Location."Backup Location Code");
          NewSalesHeader."No. Printed" := 0;

          NewSalesHeader."Master Order No." := PsalesHeader."No.";

          IF PsalesHeader."Free Freight" THEN BEGIN
            SalesSetup.GET;
            SalesSetup.TESTFIELD(SalesSetup."Split Order F. F. Reason Code");
            NewSalesHeader."Free Freight Reason Code" := SalesSetup."Split Order F. F. Reason Code";
            PsalesHeader."Free Freight Reason Code" := SalesSetup."Split Order F. F. Reason Code";
            PsalesHeader.MODIFY();
          END;

          NewSalesHeader.MODIFY;

          CopyCommentLines(
            PsalesHeader."Document Type",
            NewSalesHeader."Document Type",
            PsalesHeader."No.",
            NewSalesHeader."No.");

          SplitCOunt := SplitCOunt + 1;

        CopyEmailList(PsalesHeader."No.",NewSalesHeader."No.");

        REPEAT
          CopySalesLine1(NewSalesHeader,NewSalesLine,PsalesHeader,SalesLineTemp,Location);
          IF SalesLineLoc.GET(SalesLineTemp."Document Type",SalesLineTemp."Document No.",SalesLineTemp."Line No.") THEN BEGIN
            SalesLineLoc.VALIDATE(Quantity,OldSalesLine."Quantity Shipped");
            SalesLineLoc.VALIDATE("Location Code",'');
            SalesLineLoc.MODIFY(TRUE);
          END;
        UNTIL SalesLineTemp.NEXT=0;
      END;
        SalesLineTemp.DELETEALL;

        IF GUIALLOWED THEN
          IF SplitCOunt > 0 THEN
            MESSAGE(Text51400,PsalesHeader."Document Type",PsalesHeader."No.",SplitCOunt + 1);
      //</TPZ2782>
    END;

    LOCAL PROCEDURE CopySalesLine1@1000000003(VAR ToSalesHeader@1004 : Record 36;VAR ToSalesLine@1001 : Record 37;VAR FromSalesHeader@1005 : Record 36;VAR FromSalesLine@1002 : Record 37;VAR Ploc@1000000000 : Record 14);
    BEGIN
      //<TPZ2782>
      ToSalesLine.SetSalesHeader(ToSalesHeader);
      ToSalesLine.INIT;
      ToSalesLine."Document Type" := ToSalesHeader."Document Type";
      ToSalesLine."Document No." := ToSalesHeader."No.";
      ToSalesLine."Line No." := FromSalesLine."Line No.";

      UpdateSalesLine1(ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,Ploc);

      ToSalesLine."Shortcut Dimension 1 Code" := FromSalesLine."Shortcut Dimension 1 Code";
      ToSalesLine."Shortcut Dimension 2 Code" := FromSalesLine."Shortcut Dimension 2 Code";
      ToSalesLine."Shortcut Dimension 5 Code" := FromSalesLine."Shortcut Dimension 5 Code";
      ToSalesLine."Dimension Set ID" := FromSalesLine."Dimension Set ID";
      ToSalesLine."External Document Line No." := FromSalesLine."External Document Line No.";

      ToSalesLine.INSERT;
      //</TPZ2782>
    END;

    LOCAL PROCEDURE UpdateSalesLine1@1000000002(VAR ToSalesHeader@1005 : Record 36;VAR ToSalesLine@1000 : Record 37;VAR FromSalesHeader@1001 : Record 36;VAR FromSalesLine@1002 : Record 37;VAR Ploc1@1000000000 : Record 14);
    BEGIN
      //<TPZ2782>
      ToSalesLine.VALIDATE(Type,FromSalesLine.Type);
      ToSalesLine.Description := FromSalesLine.Description;
      ToSalesLine."Description 2" := FromSalesLine."Description 2";
      IF (FromSalesLine.Type <> 0) AND (FromSalesLine."No." <> '') THEN BEGIN
        ToSalesLine.VALIDATE("No.",FromSalesLine."No.");
        ToSalesLine.VALIDATE("Location Code",Ploc1."Backup Location Code");
        ToSalesLine.VALIDATE("Unit of Measure",FromSalesLine."Unit of Measure");
        ToSalesLine.VALIDATE("Unit of Measure Code",FromSalesLine."Unit of Measure Code");
        ToSalesLine.VALIDATE(Quantity,FromSalesLine."Outstanding Quantity");
        ToSalesLine.VALIDATE("Unit Price",FromSalesLine."Unit Price");
        ToSalesLine.VALIDATE("Line Discount %",FromSalesLine."Line Discount %");
        ToSalesLine."Quote No." := FromSalesLine."Quote No.";
        ToSalesLine."Quote Line No.":= FromSalesLine."Quote Line No.";
      END;
      IF (FromSalesLine.Type = FromSalesLine.Type::" ") AND (FromSalesLine."No." <> '') THEN
        ToSalesLine.VALIDATE("No.",FromSalesLine."No.");
      ToSalesLine.VALIDATE(Sample,FromSalesLine.Sample);
      ToSalesLine.VALIDATE(Promo,FromSalesLine.Promo);
      //</TPZ2782>
    END;

    BEGIN
    {
      2015-07-10 TPZ844 VCHERNYA
        Codeunit has been created
      2015-11-01 TPZ1107 TAKHMETO
        UpdateSalesLine function has been modified
      2016-02-26 TOP8624 TAKHMETO
        OnRun function has been modified
      2016-04-26 TPZ1530 EBAGIM
        Shipment Date Validation Added
      2016-06-03 TPZ1530 EBAGIM1
        Posting Date Validation Added
      2016-06-30 TPZ1613 EBAGIM
        Bug Fix for Quote Information on Split order
      2016-07-27 TPZ1640
        Add document date Validation on Split sales order
      2016-08-08 TPZ1655 TMEI
        Blank Warehouse Release No. when split order.
      2017-12-12 TPZ2120 EBAGIN
        Update Master Order with free frieght flag after splitting
      2018-02-12 TPZ2211 TMEI
        In NAV 2017, no need to validate Description because when validating Description field
        it will cause NAV to look for different item if sales line No. field is blank.
      2018-08-31 TPZ2368 UCHOUHAN
        Added code for Promo Field
      2018-11-28 TPZ1676 UCHOUHAN
        Added function to copy Email-List in Split orders.
      2020-05-13 TPZ2782 UCHOUHAN
        Added new function CreateSplitOrder,CopySalesLine1,UpdateSalesLine1 for auto create split order after releasing order.
      001 TPZ3324 GKG 09242021 flow same 'shipment date' and 'Order Date'
    }
    END.
  }
}

