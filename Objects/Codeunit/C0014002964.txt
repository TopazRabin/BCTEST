OBJECT Codeunit 14002964 Combined Pick Management
{
  OBJECT-PROPERTIES
  {
    Date=11/04/20;
    Time=[ 6:18:32 AM];
    Modified=Yes;
    Version List=RF1.50.13;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1240030017 : TextConst 'ENU=No Lines Found';
      Text002@1240030016 : TextConst 'ENU=Warehouse Shipment %1 already contains lines from Document %2';
      Text003@1240030003 : TextConst 'ENU=Warehouse Pick %1 already contains lines from Document %2';
      Text011@1240030005 : TextConst 'ENU=No Warehouse Requests found.';
      Text012@1240030004 : TextConst 'ENU=Must be same Location.';
      Text013@1240030002 : TextConst 'ENU=Multiple Outbound Request must be selected.';
      Text015@1240030000 : TextConst 'ENU=Nothing Available';
      Text017@1240020001 : TextConst 'ENU=Warehouse Activity already exists for %1 %2.';
      WarehouseStreamlineMgtGlobal@1240020002 : Codeunit 14002809;

    [External]
    PROCEDURE CreateWhseShipAndPick@1240030002(VAR CurrentWarehouseRequest@1240030000 : Record 5765;OutboundWhseRequestFilter@1240030032 : Record 14002863;AssignedID@1240030014 : Code[50];AssignedWhseEmplGroup@1240020000 : Code[20];VAR NewShipmentNo@1240030008 : Code[20];VAR NewPickNo@1240030009 : Code[20];GiveError@1240030016 : Boolean) : Boolean;
    VAR
      Location@1240030002 : Record 14;
      WarehouseRequest@1240030007 : Record 5765;
      WarehouseShipmentHeader@1240030006 : Record 7320;
      WarehouseShipmentLine@1240030005 : Record 7321;
      WarehouseShipmentLineTmp@1240030020 : TEMPORARY Record 7321;
      RFSetup@1240030017 : Record 14002801;
      WarehouseActivityLine@1240030018 : Record 5767;
      GetSourceDocuments@1240030004 : Report 5753;
      WhseShipmentCreatePick@1240030003 : Report 7318;
      WhseShipmentRelease@1240030001 : Codeunit 7310;
      WarehouseStreamlineMgt@1240030030 : Codeunit 14002809;
      OutboundWhseRequestMgt@1240020001 : Codeunit 14002863;
      OWRSingleInstance@1240020002 : Codeunit 14002864;
      FirstWarehouseRequest@1240030023 : Boolean;
      WarehouseRequestTmp@1240030031 : TEMPORARY Record 5765;
      RFStatEntryTotal@1240030029 : Record 14002804;
      NoOfWarehouseRequest@1240030027 : Integer;
      FirstLocationCode@1240030026 : Code[10];
      CalculatedCorrectly@1240030025 : Boolean;
      StatusText@1240030024 : Text[250];
    BEGIN
      RFSetup.GET;
      IF NOT CurrentWarehouseRequest.FIND('-') THEN
        IF GiveError THEN
          ERROR(Text011)
        ELSE
          EXIT(FALSE);

      OWRSingleInstance.SetMultiOrder;

      WarehouseRequestTmp.RESET;
      WarehouseRequestTmp.DELETEALL;
      NoOfWarehouseRequest := 0;
      FirstLocationCode := CurrentWarehouseRequest."Location Code";
      REPEAT
        IF (NOT CurrentWarehouseRequest."ATO Pick Required") AND
           (CurrentWarehouseRequest."Document Status" <> CurrentWarehouseRequest."Document Status"::Open)
        THEN BEGIN
          CurrentWarehouseRequest.CALCFIELDS("Wave Pick Whse. Request Exists","Pick Exists");
          IF (CurrentWarehouseRequest."Wave Pick Whse. Request Exists") OR
             (CurrentWarehouseRequest."Pick Exists")
          THEN
            ERROR(Text017,CurrentWarehouseRequest."Source Document",CurrentWarehouseRequest."Source No.");

          IF AvailPerShippingAdviceHandling(CurrentWarehouseRequest,OutboundWhseRequestFilter) THEN BEGIN
            NoOfWarehouseRequest := NoOfWarehouseRequest + 1;

            WarehouseRequestTmp := CurrentWarehouseRequest;
            WarehouseRequestTmp.INSERT;
          END;

          CurrentWarehouseRequest.TESTFIELD(Type,CurrentWarehouseRequest.Type::Outbound);
          IF CurrentWarehouseRequest."Location Code" <> FirstLocationCode THEN BEGIN
            OWRSingleInstance.ResetOWRProcessing;
            IF GiveError THEN
              ERROR(Text012)
            ELSE
              EXIT(FALSE);
          END;
        END;
      UNTIL CurrentWarehouseRequest.NEXT = 0;

      IF NoOfWarehouseRequest <= 1 THEN BEGIN
        OWRSingleInstance.ResetOWRProcessing;
        IF GiveError THEN
          ERROR(Text013)
        ELSE
          EXIT(FALSE);
      END;

      WarehouseRequestTmp.FIND('-');
      WarehouseStreamlineMgt.AddWarehouseRequest(WarehouseRequestTmp,TRUE);
      IF WarehouseRequestTmp.NEXT <> 0 THEN
        REPEAT
          WarehouseStreamlineMgt.AddWarehouseRequest(WarehouseRequestTmp,FALSE);
        UNTIL WarehouseRequestTmp.NEXT = 0;

      CalculatedCorrectly :=
        WarehouseStreamlineMgt.CalculateStatisticsMultiple(
          RFStatEntryTotal,OutboundWhseRequestFilter);
      IF CalculatedCorrectly THEN
        StatusText :=
          WarehouseStreamlineMgt.UpdateStatusText(WarehouseRequestTmp,RFStatEntryTotal)
      ELSE
        StatusText := '';

      WarehouseRequestTmp.FIND('-');
      REPEAT
        WarehouseRequestTmp.TESTFIELD(Type,WarehouseRequestTmp.Type::Outbound);
        IF NOT RFSetup."Auto Delete Warehouse Shipment" THEN BEGIN
           WarehouseRequestTmp.TESTFIELD("Completely Handled",FALSE);
          IF WarehouseRequestTmp."Warehouse Shipment No." = '' THEN
            WarehouseRequestTmp.CALCFIELDS("Warehouse Shipment No.");
          WarehouseRequestTmp.TESTFIELD("Warehouse Shipment No.",'');
        END;

        WarehouseShipmentLine.RESET;
        WarehouseShipmentLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
        WarehouseShipmentLine.SETRANGE("Source Type",WarehouseRequestTmp."Source Type");
        WarehouseShipmentLine.SETRANGE("Source Subtype",WarehouseRequestTmp."Source Subtype");
        WarehouseShipmentLine.SETRANGE("Source No.",WarehouseRequestTmp."Source No.");
        WarehouseShipmentLine.SETRANGE("Location Code",WarehouseRequestTmp."Location Code");
        IF WarehouseShipmentLine.FIND('-') THEN
          IF RFSetup."Auto Delete Warehouse Shipment" THEN BEGIN
            WarehouseActivityLine.RESET;
            WarehouseActivityLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
            WarehouseActivityLine.SETRANGE("Source Type",WarehouseRequestTmp."Source Type");
            WarehouseActivityLine.SETRANGE("Source Subtype",WarehouseRequestTmp."Source Subtype");
            WarehouseActivityLine.SETRANGE("Source No.",WarehouseRequestTmp."Source No.");
            WarehouseActivityLine.SETRANGE("Location Code",WarehouseRequestTmp."Location Code");
            IF WarehouseActivityLine.FIND('-') THEN BEGIN
              OWRSingleInstance.ResetOWRProcessing;
              IF GiveError THEN
                ERROR(Text003,WarehouseActivityLine."No.",WarehouseShipmentLine."Source No.")
              ELSE
                EXIT(FALSE);
            END;
          END ELSE BEGIN
            OWRSingleInstance.ResetOWRProcessing;
            IF GiveError THEN
              ERROR(Text002,WarehouseShipmentLine."No.",WarehouseShipmentLine."Source No.")
            ELSE
              EXIT(FALSE);
          END;
      UNTIL WarehouseRequestTmp.NEXT = 0;

      IF RFSetup."Auto Delete Warehouse Shipment" THEN BEGIN
        WarehouseRequestTmp.FIND('-');
        REPEAT
          WarehouseShipmentLine.RESET;
          WarehouseShipmentLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
          WarehouseShipmentLine.SETRANGE("Source Type",WarehouseRequestTmp."Source Type");
          WarehouseShipmentLine.SETRANGE("Source Subtype",WarehouseRequestTmp."Source Subtype");
          WarehouseShipmentLine.SETRANGE("Source No.",WarehouseRequestTmp."Source No.");
          WarehouseShipmentLine.SETRANGE("Location Code",WarehouseRequestTmp."Location Code");
          IF WarehouseShipmentLine.FIND('-') THEN BEGIN
            WarehouseActivityLine.RESET;
            WarehouseActivityLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
            WarehouseActivityLine.SETRANGE("Source Type",WarehouseRequestTmp."Source Type");
            WarehouseActivityLine.SETRANGE("Source Subtype",WarehouseRequestTmp."Source Subtype");
            WarehouseActivityLine.SETRANGE("Source No.",WarehouseRequestTmp."Source No.");
            WarehouseActivityLine.SETRANGE("Location Code",WarehouseRequestTmp."Location Code");
            IF NOT WarehouseActivityLine.FIND('-') THEN BEGIN
              REPEAT
                WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
                IF WarehouseShipmentHeader.Status = WarehouseShipmentHeader.Status::Released THEN
                  WhseShipmentRelease.Reopen(WarehouseShipmentHeader);

                WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentHeader."No.");
                WarehouseShipmentLine.DELETEALL(TRUE);
                WarehouseShipmentLine.SETRANGE("No.");
              UNTIL WarehouseShipmentLine.NEXT = 0;

              COMMIT;
            END ELSE BEGIN
              OWRSingleInstance.ResetOWRProcessing;
              IF GiveError THEN
                ERROR(Text003,WarehouseActivityLine."No.",WarehouseShipmentLine."Source No.")
              ELSE
                EXIT(FALSE);
            END;
          END;
        UNTIL WarehouseRequestTmp.NEXT = 0;
      END;

      FirstWarehouseRequest := TRUE;
      WarehouseRequestTmp.FIND('-');
      REPEAT
        WarehouseRequest.RESET;
        WarehouseRequest := WarehouseRequestTmp;
        WarehouseRequest.SETRECFILTER;

        OutboundWhseRequestMgt.CreateWarehouseShipment(
          WarehouseRequest,OutboundWhseRequestFilter,WarehouseShipmentHeader,AssignedID);
      UNTIL WarehouseRequestTmp.NEXT = 0;

      WarehouseShipmentHeader.FIND;
      IF AssignedID <> '' THEN
        WarehouseShipmentHeader.VALIDATE("Assigned User ID",AssignedID);
      IF OutboundWhseRequestFilter."Sorting Method for Act. Lines" > 0 THEN
        WarehouseShipmentHeader.VALIDATE(
          "Sorting Method",OutboundWhseRequestFilter."Sorting Method for Act. Lines");
      WarehouseShipmentHeader.MODIFY;

      WhseShipmentRelease.Release(WarehouseShipmentHeader);
      WarehouseShipmentHeader.FIND;
      WarehouseShipmentHeader.TESTFIELD(Status,WarehouseShipmentHeader.Status::Released);

      WarehouseShipmentLine.RESET;
      WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentHeader."No.");
      WarehouseShipmentLine.SETFILTER(Quantity,'>0');
      WarehouseShipmentLine.SETRANGE("Completely Picked",FALSE);
      IF OutboundWhseRequestFilter."Line Date Filter" <> '' THEN
        WarehouseShipmentLine.SETFILTER("Due Date",OutboundWhseRequestFilter."Line Date Filter");
      IF WarehouseShipmentLine.FIND('-') THEN BEGIN
        IF OutboundWhseRequestFilter."Line Date Filter" <> '' THEN BEGIN
          REPEAT
            WarehouseShipmentLineTmp := WarehouseShipmentLine;
            WarehouseShipmentLineTmp.INSERT;
          UNTIL WarehouseShipmentLine.NEXT = 0;

          WarehouseShipmentLine.SETRANGE("Due Date");
          WarehouseShipmentLine.FIND('-');
          REPEAT
            IF NOT WarehouseShipmentLineTmp.GET(
                     WarehouseShipmentLine."No.",WarehouseShipmentLine."Line No.")
            THEN
              WarehouseShipmentLine.DELETE;
          UNTIL WarehouseShipmentLine.NEXT = 0;
        END;

        Location.GET(CurrentWarehouseRequest."Location Code");
        IF Location."Require Pick" THEN BEGIN
          CLEAR(WhseShipmentCreatePick);
          WhseShipmentCreatePick.SETTABLEVIEW(WarehouseShipmentLine);
          WhseShipmentCreatePick.Initialize(
            AssignedID,OutboundWhseRequestFilter."Sorting Method for Act. Lines",
            OutboundWhseRequestFilter."Print Document",
            OutboundWhseRequestFilter."Do Not Fill Qty. to Handle",
            OutboundWhseRequestFilter."Set Breakbulk Filter",FALSE);
          WhseShipmentCreatePick.SetPerZone(OutboundWhseRequestFilter."Per Zone");
          WhseShipmentCreatePick.SetPickFromFilter(
            OutboundWhseRequestFilter."Pick-from Zone Filter",
            OutboundWhseRequestFilter."Pick-from Bin Filter");
          WhseShipmentCreatePick.SetWhseEmployeeGroupNo(AssignedWhseEmplGroup);
          WhseShipmentCreatePick.SetWhseShipmentLine(WarehouseShipmentLine,WarehouseShipmentHeader);
          WhseShipmentCreatePick.SetHideValidationDialog(TRUE);
          WhseShipmentCreatePick.USEREQUESTPAGE(FALSE);
          WhseShipmentCreatePick.RUNMODAL;
          WhseShipmentCreatePick.GetResultMessage;
          CLEAR(WhseShipmentCreatePick);
        END;
      END ELSE BEGIN
        OWRSingleInstance.ResetOWRProcessing;
        IF GiveError THEN
          ERROR(Text001)
        ELSE
          EXIT(FALSE);
      END;

      NewShipmentNo := WarehouseShipmentHeader."No.";
      WarehouseRequest.CALCFIELDS("Put-away / Pick No.");
      NewPickNo := WarehouseRequest."Put-away / Pick No.";
      OWRSingleInstance.ResetOWRProcessing;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE AvailPerShippingAdviceHandling@1240020000(CurrentWarehouseRequest@1240030000 : Record 5765;OutboundWhseRequestFilter@1240030032 : Record 14002863) : Boolean;
    VAR
      RFStatEntryTotal@1240030012 : Record 14002804;
      OWRSingleInstance@1240020000 : Codeunit 14002864;
      CalculatedCorrectly@1240030010 : Boolean;
    BEGIN
      CASE OutboundWhseRequestFilter."Shipping Advice Handling" OF
        OutboundWhseRequestFilter."Shipping Advice Handling"::" ":
          BEGIN
            CalculatedCorrectly :=
              WarehouseStreamlineMgtGlobal.CalculateStatisticsSingle(
                CurrentWarehouseRequest,RFStatEntryTotal,OutboundWhseRequestFilter);
            IF CalculatedCorrectly AND
                (RFStatEntryTotal."Available Qty. (Base)" > 0)
            THEN BEGIN
              OWRSingleInstance.SetMultiOrderQtyApplied(TRUE);
              EXIT(TRUE);
            END ELSE
              OWRSingleInstance.SetMultiOrderQtyApplied(FALSE);
          END;
        OutboundWhseRequestFilter."Shipping Advice Handling"::"Use Shipping Advice":
          BEGIN
            CalculatedCorrectly :=
              WarehouseStreamlineMgtGlobal.CalculateStatisticsSingle(
                CurrentWarehouseRequest,RFStatEntryTotal,OutboundWhseRequestFilter);
            IF CalculatedCorrectly AND
                OutboundWhseRequestFilter.CheckWithinLimits(RFStatEntryTotal) AND
                (((RFStatEntryTotal."Outstanding Qty. (Base)" =
                  RFStatEntryTotal."Available Qty. (Base)") AND
                  (CurrentWarehouseRequest."Shipping Advice" =
                  CurrentWarehouseRequest."Shipping Advice"::Complete)) OR
                ((RFStatEntryTotal."Available Qty. (Base)" > 0) AND
                  (CurrentWarehouseRequest."Shipping Advice" =
                  CurrentWarehouseRequest."Shipping Advice"::Partial)))
            THEN BEGIN
              OWRSingleInstance.SetMultiOrderQtyApplied(TRUE);
              EXIT(TRUE);
            END ELSE
              OWRSingleInstance.SetMultiOrderQtyApplied(FALSE);
          END;
        OutboundWhseRequestFilter."Shipping Advice Handling"::"Partial on Complete":
          BEGIN
            CalculatedCorrectly :=
              WarehouseStreamlineMgtGlobal.CalculateStatisticsSingle(
                CurrentWarehouseRequest,RFStatEntryTotal,OutboundWhseRequestFilter);
            IF CalculatedCorrectly AND
                OutboundWhseRequestFilter.CheckWithinLimits(RFStatEntryTotal) AND
                (RFStatEntryTotal."Available Qty. (Base)" > 0)
            THEN BEGIN
              OWRSingleInstance.SetMultiOrderQtyApplied(TRUE);
              EXIT(TRUE);
            END ELSE
              OWRSingleInstance.SetMultiOrderQtyApplied(FALSE);
          END;
        OutboundWhseRequestFilter."Shipping Advice Handling"::"All Available":
          BEGIN
            CalculatedCorrectly :=
              WarehouseStreamlineMgtGlobal.CalculateStatisticsSingle(
                CurrentWarehouseRequest,RFStatEntryTotal,OutboundWhseRequestFilter);
            IF CalculatedCorrectly AND
                OutboundWhseRequestFilter.CheckWithinLimits(RFStatEntryTotal) AND
                (RFStatEntryTotal."Available Qty. (Base)" =
                RFStatEntryTotal."Outstanding Qty. (Base)")
            THEN BEGIN
              OWRSingleInstance.SetMultiOrderQtyApplied(TRUE);
              EXIT(TRUE);
            END ELSE
              OWRSingleInstance.SetMultiOrderQtyApplied(FALSE);
          END;
      END;

      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}

