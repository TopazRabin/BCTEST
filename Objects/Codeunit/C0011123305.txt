OBJECT Codeunit 11123305 SC - Execution Context
{
  OBJECT-PROPERTIES
  {
    Date=07/01/20;
    Time=12:00:00 AM;
    Modified=Yes;
    Version List=SCW19.2.0;
  }
  PROPERTIES
  {
    TableNo=11123303;
    SingleInstance=Yes;
    OnRun=VAR
            ServerName@11123303 : Text[250];
            DatabaseName@11123302 : Text[250];
          BEGIN
            XMLWrapper.InitializeResponse(Rec);

            IF (NOT SkipEnabledCheck) AND (NOT SanaCommerceEnabled) THEN BEGIN
              GetSessionInfo(ServerName,DatabaseName);
              ERROR(Text11123302,ServerName,DatabaseName,COMPANYNAME);
            END;

            SkipEnabledCheck := FALSE;
          END;

  }
  CODE
  {
    VAR
      TempParamsGlobal@11123320 : TEMPORARY Record 11123310;
      TempCalcValuesInfoGlobal@11123321 : TEMPORARY Record 11123319;
      TempCurrencyListGlobal@11123322 : TEMPORARY Record 11123330;
      XMLWrapper@11123312 : Codeunit 11123308;
      RecRefHandledGlobal@11123316 : RecordRef;
      ErrorExtraInfoArray@11123318 : ARRAY [10] OF Text[1024];
      OperationName@11123306 : Text[80];
      SecureTokenGlobal@11123336 : Text[1024];
      SanaVersionGlobal@11123337 : Text[20];
      WebsiteID@11123323 : Code[50];
      DafaultCurrency@11123331 : Code[10];
      Version@11123313 : Decimal;
      GlobalDocStateFilter@11123334 : 'Normal,Basket,Wish List,Edit Order';
      ActionGlobal@11123317 : 'Read,Insert,Modify,Delete,Rename';
      PfsAddon@11123305 : Boolean;
      PfsAddonValueRetrieved@11123304 : Boolean;
      LsAddon@11123303 : Boolean;
      SanaLsAddon@11123332 : Boolean;
      LsAddonValueRetrieved@11123302 : Boolean;
      SanaLsObjectsRetrieved@11123387 : Boolean;
      OperationUpgraded@11123307 : Boolean;
      SanaCommerceEnabled@11123310 : Boolean;
      LoggingEnabled@11123309 : Boolean;
      SettingsInitialized@11123308 : Boolean;
      SkipEnabledCheck@11123311 : Boolean;
      VersionNavRetrieved@11123314 : Boolean;
      Text11123302@11123319 : TextConst 'ENU=The Sana Commerce functionality is currently disabled for: \\ - Host Name (Service Tier): %1\\ - Database Name: %2\\ - Company Name: %3.\\ Please check Sana Commerce Setup.';
      IsSupportPersistBasket@11123324 : Boolean;
      PersistBasketValueRetrieved@11123325 : Boolean;
      SupportsPrepValRetrieved@11123326 : Boolean;
      IsSupportsPrepayment@11123327 : Boolean;
      IsNaLocalization@11123328 : Boolean;
      NaLocalizationRetrieved@11123329 : Boolean;
      DefaultCurrencyRetrieved@11123330 : Boolean;
      TaxCalcType@11123350 : 'TAX,VAT';
      SupportsVATRetrived@11123351 : Boolean;
      VATInUseGlobal@11123352 : Boolean;
      SanaExtansionIsUsedRetrived@11123301 : Boolean;
      GlobalExtensionUsed@11123315 : Boolean;
      SupportsKitBOMRetrieved@11123333 : Boolean;
      SupportsKitBOMGlobal@11123335 : Boolean;

    PROCEDURE Initialize@11123305(VAR RequestBuff@11123302 : Record 11123303;VAR ResponseBuff@11123303 : Record 11123303);
    BEGIN
      InitSettings(FALSE);

      XMLWrapper.PrepareXMLDocuments(RequestBuff,ResponseBuff);
      OperationName := XMLWrapper.GetOperationName;
      WebsiteID := XMLWrapper.GetWebsiteID;
    END;

    PROCEDURE Finalize@11123302(VAR ResponseBuff@11123302 : Record 11123303);
    BEGIN
      XMLWrapper.FinalizeResponse(ResponseBuff);
    END;

    PROCEDURE InitSettings@11123311(ForceInitialization@11123303 : Boolean);
    VAR
      SanaCommerceSetup@11123302 : Record 11123305;
    BEGIN
      IF ForceInitialization THEN
        SettingsInitialized := FALSE;

      IF SettingsInitialized OR NOT SanaCommerceSetup.GET THEN
        EXIT;

      SanaCommerceEnabled := SanaCommerceSetup."Enable Sana Commerce";
      LoggingEnabled := SanaCommerceSetup."Enable Logging";
      OperationUpgraded := SanaCommerceSetup.Upgraded;

      SettingsInitialized := TRUE;
    END;

    PROCEDURE GetCurrentOperationName@11123303() : Text[80];
    BEGIN
      EXIT(OperationName);
    END;

    PROCEDURE GetCurrentWebsiteID@11123339() : Code[50];
    BEGIN
      EXIT(WebsiteID);
    END;

    PROCEDURE PfsAddonIsUsed@11123310() : Boolean;
    VAR
      ObjectRec@11123302 : Record 2000000001;
    BEGIN
      IF NOT PfsAddonValueRetrieved THEN BEGIN
        ObjectRec.SETRANGE(Type,ObjectRec.Type::Table);
        ObjectRec.SETRANGE("Company Name",'');
        ObjectRec.SETRANGE(ID,11006109); // PfsPebblestone Fashion Setup
        PfsAddon := (NOT ObjectRec.ISEMPTY);
        PfsAddonValueRetrieved := TRUE;
      END;
      EXIT(PfsAddon);
    END;

    PROCEDURE LsAddonIsUsed@11123328() : Boolean;
    VAR
      ObjectRec@11123302 : Record 2000000001;
    BEGIN
      IF NOT LsAddonValueRetrieved THEN BEGIN
        ObjectRec.SETRANGE(Type,ObjectRec.Type::Table);
        ObjectRec.SETRANGE("Company Name",'');
        ObjectRec.SETRANGE(ID,10000700); // Retail Setup
        LsAddon := (NOT ObjectRec.ISEMPTY);
        LsAddonValueRetrieved := TRUE;
      END;
      EXIT(LsAddon);
    END;

    PROCEDURE LsObjectsExist@11123327() : Boolean;
    VAR
      ObjectRec@11123302 : Record 2000000001;
    BEGIN
      IF NOT SanaLsObjectsRetrieved THEN BEGIN
        ObjectRec.SETRANGE(Type,ObjectRec.Type::Table);
        ObjectRec.SETRANGE("Company Name",'');
        ObjectRec.SETRANGE(ID,11123350); // SC - LS Retail Setup
        SanaLsAddon := (NOT ObjectRec.ISEMPTY);
        SanaLsObjectsRetrieved := TRUE;
      END;
      EXIT(SanaLsAddon);
    END;

    PROCEDURE SetHandledRecRef@11123329(VAR RecRef@11123302 : RecordRef);
    BEGIN
      RecRefHandledGlobal := RecRef;
    END;

    PROCEDURE GetHandledRecRef@11123330(VAR RecRef@11123302 : RecordRef);
    BEGIN
      RecRef := RecRefHandledGlobal;
    END;

    PROCEDURE SetAction@11123325(Action@11123303 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      ActionGlobal := Action;
    END;

    PROCEDURE GetAction@11123331(VAR Action@11123303 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      Action := ActionGlobal;
    END;

    PROCEDURE GetVersionNav@11123334() : Decimal;
    VAR
      ObjectRec@11123302 : Record 2000000001;
    BEGIN
      IF NOT VersionNavRetrieved THEN BEGIN
        Version := 5; // NAV 5 or older

        ObjectRec.SETRANGE(Type,ObjectRec.Type::Table);
        ObjectRec.SETRANGE("Company Name",'');
        ObjectRec.SETRANGE(ID,2000000071); // Object Metadata
        IF NOT ObjectRec.ISEMPTY THEN BEGIN
          VersionNavRetrieved := TRUE;
          Version := 6; // NAV2009
        END;

        ObjectRec.SETRANGE(Type,ObjectRec.Type::Table);
        ObjectRec.SETRANGE("Company Name",'');
        ObjectRec.SETRANGE(ID,2000000110); // Active Session
        IF NOT ObjectRec.ISEMPTY THEN BEGIN
          VersionNavRetrieved := TRUE;
          Version := 7; // NAV2013
        END;

        ObjectRec.SETRANGE(Type,ObjectRec.Type::Table);
        ObjectRec.SETRANGE("Company Name",'');
        ObjectRec.SETRANGE(ID,2000000160); // NAV App
        IF NOT ObjectRec.ISEMPTY THEN BEGIN
          VersionNavRetrieved := TRUE;
          Version := 9; // NAV2016
        END;
      END;
      EXIT(Version);
    END;

    PROCEDURE IsNorthAmericaLocalization@11123322() : Boolean;
    VAR
      ObjectRec@11123302 : Record 2000000001;
    BEGIN
      IF NOT NaLocalizationRetrieved THEN BEGIN
        ObjectRec.SETRANGE(Type,ObjectRec.Type::Table);
        ObjectRec.SETRANGE("Company Name",'');
        ObjectRec.SETRANGE(ID,10011); // Sales Tax Amount Line
        IsNaLocalization := NOT ObjectRec.ISEMPTY;
        NaLocalizationRetrieved := TRUE;
      END;
      EXIT(IsNaLocalization);
    END;

    PROCEDURE GetCodePage@11123316() : Text[30];
    BEGIN
      EXIT(XMLWrapper.GetCodePage);
    END;

    PROCEDURE GetOperationUpgraded@11123336() : Boolean;
    BEGIN
      EXIT(OperationUpgraded);
    END;

    PROCEDURE SkipSanaEnabledCheck@11123315();
    BEGIN
      SkipEnabledCheck := TRUE;
    END;

    PROCEDURE LogRequest@11123306();
    BEGIN
      IF LoggingEnabled THEN
        XMLWrapper.SaveRequest;
    END;

    PROCEDURE LogResponse@11123307();
    BEGIN
      IF LoggingEnabled THEN
        XMLWrapper.SaveResponse;
    END;

    PROCEDURE HandleError@11123308();
    VAR
      ServerName@11123303 : Text[250];
      DatabaseName@11123302 : Text[250];
    BEGIN
      GetSessionInfo(ServerName,DatabaseName);
      XMLWrapper.HandleError(ServerName,DatabaseName);
    END;

    LOCAL PROCEDURE GetSessionInfo@11123309(VAR ServerName@11123302 : Text[250];VAR DatabaseName@11123303 : Text[250]);
    VAR
      ActiveSession@11123304 : Record 2000000110;
    BEGIN
      ActiveSession.SETRANGE("Server Instance ID",SERVICEINSTANCEID);
      ActiveSession.SETRANGE("Session ID",SESSIONID);
      IF ActiveSession.FINDFIRST THEN BEGIN
        ServerName := ActiveSession."Server Computer Name";
        DatabaseName := ActiveSession."Database Name";
      END;
    END;

    PROCEDURE SetParams@11123319(VAR InParams@11123302 : Record 11123310);
    BEGIN
      TempParamsGlobal.InitializeEmptyParams;
      TempParamsGlobal.TRANSFERFIELDS(InParams);
      TempParamsGlobal.MODIFY;
      InParams.CopyValuesTo(TempParamsGlobal);
    END;

    PROCEDURE GetParams@11123320(VAR OutParams@11123302 : Record 11123310);
    BEGIN
      OutParams.InitializeEmptyParams;
      OutParams.TRANSFERFIELDS(TempParamsGlobal);
      OutParams.MODIFY;
      TempParamsGlobal.CopyValuesTo(OutParams);
    END;

    PROCEDURE InitBuffer@11123312(VAR Buffer@11123302 : Record 11123303);
    BEGIN
      CLEAR(Buffer);

      Buffer.INIT;
      Buffer."Document ID" := CREATEGUID;
    END;

    PROCEDURE GetBuffer@11123304(VAR Buffer@11123302 : Record 11123303);
    BEGIN
      Buffer.FINDFIRST;
      Buffer.CALCFIELDS(XML);
    END;

    PROCEDURE GetRequestBuff@11123313(VAR RequestBuff@11123302 : Record 11123303);
    BEGIN
      InitBuffer(RequestBuff);
      RequestBuff.INSERT;

      XMLWrapper.GetRequestNode(RequestBuff);
    END;

    PROCEDURE GetResponseBuff@11123314(VAR ResponseBuff@11123302 : Record 11123303);
    BEGIN
      InitBuffer(ResponseBuff);
      ResponseBuff.INSERT;

      XMLWrapper.GetResponseNode(ResponseBuff);
    END;

    PROCEDURE SetXMLNodeBuff@11123317(VAR Buffer@11123302 : Record 11123303);
    BEGIN
      XMLWrapper.SetCurrentNodeFromBuffer(Buffer);
    END;

    PROCEDURE GetXMLNodeBuff@11123318(VAR Buffer@11123302 : Record 11123303);
    BEGIN
      IF Buffer.ISEMPTY THEN BEGIN
        InitBuffer(Buffer);
        Buffer.INSERT;
      END;
      XMLWrapper.GetCurrentNodeToBuffer(Buffer);
    END;

    PROCEDURE SetErrorExtraInfo@11123324(NewErrorExtraInfo@11123302 : Text[1024];Index@11123303 : Integer);
    BEGIN
      ErrorExtraInfoArray[Index] := NewErrorExtraInfo;
    END;

    PROCEDURE GetErrorExtraInfo@11123321(VAR OutErrorExtraInfoArray@11123302 : ARRAY [10] OF Text[1024]);
    BEGIN
      COPYARRAY(OutErrorExtraInfoArray,ErrorExtraInfoArray,1);
    END;

    PROCEDURE SetCalcValuesInfo@11123333(VAR InCalcValuesInfo@11123302 : Record 11123319);
    BEGIN
      IF InCalcValuesInfo.FINDSET THEN
        REPEAT
          TempCalcValuesInfoGlobal.INIT;
          TempCalcValuesInfoGlobal.TRANSFERFIELDS(InCalcValuesInfo);
          IF TempCalcValuesInfoGlobal.INSERT THEN;
        UNTIL InCalcValuesInfo.NEXT = 0;
    END;

    PROCEDURE GetCalcValuesInfo@11123335(VAR OutCalcValuesInfo@11123302 : Record 11123319);
    BEGIN
      IF TempCalcValuesInfoGlobal.FINDSET THEN
        REPEAT
          OutCalcValuesInfo.INIT;
          OutCalcValuesInfo.TRANSFERFIELDS(TempCalcValuesInfoGlobal);
          IF OutCalcValuesInfo.INSERT THEN;
        UNTIL TempCalcValuesInfoGlobal.NEXT = 0;
    END;

    PROCEDURE ClearCalcValuesInfo@11123332();
    BEGIN
      TempCalcValuesInfoGlobal.RESET;
      TempCalcValuesInfoGlobal.DELETEALL;
    END;

    PROCEDURE SetCurrencyList@11123323(VAR InCurrencyList@11123302 : Record 11123330);
    BEGIN
      TempCurrencyListGlobal.RESET;
      TempCurrencyListGlobal.DELETEALL;

      IF InCurrencyList.FINDSET THEN
        REPEAT
          TempCurrencyListGlobal.INIT;
          TempCurrencyListGlobal.TRANSFERFIELDS(InCurrencyList);
          TempCurrencyListGlobal.INSERT;
        UNTIL InCurrencyList.NEXT = 0;
    END;

    PROCEDURE GetCurrencyList@11123337(VAR OutCurrencyList@11123302 : Record 11123330);
    BEGIN
      OutCurrencyList.RESET;
      OutCurrencyList.DELETEALL;

      IF TempCurrencyListGlobal.FINDSET THEN
        REPEAT
          OutCurrencyList.INIT;
          OutCurrencyList.TRANSFERFIELDS(TempCurrencyListGlobal);
          OutCurrencyList.INSERT;
        UNTIL TempCurrencyListGlobal.NEXT = 0;
    END;

    PROCEDURE SupportsPersistedBaskets@11123338() : Boolean;
    VAR
      Object@11123302 : Record 2000000001;
    BEGIN
      IF NOT PersistBasketValueRetrieved THEN BEGIN
        Object.SETRANGE(Type,Object.Type::Codeunit);
        Object.SETRANGE("Company Name",'');
        Object.SETRANGE(ID,11123330);
        IsSupportPersistBasket := NOT Object.ISEMPTY;
        PersistBasketValueRetrieved := TRUE;
      END;
      EXIT(IsSupportPersistBasket);
    END;

    PROCEDURE SupportsPrepayment@11123340() : Boolean;
    VAR
      Object@11123302 : Record 2000000001;
    BEGIN
      IF NOT SupportsPrepValRetrieved THEN BEGIN
        Object.SETRANGE(Type,Object.Type::Table);
        Object.SETRANGE("Company Name",'');
        Object.SETRANGE(ID,459);                    // Sales Prepayment %
        IsSupportsPrepayment := NOT Object.ISEMPTY;
        SupportsPrepValRetrieved := TRUE;
      END;
      EXIT(IsSupportsPrepayment);
    END;

    PROCEDURE GetDefaultCurrency@11123341() : Code[10];
    VAR
      DefaultCurrency@11123302 : Record 4;
      GLSetup@11123305 : Record 98;
      RecMgt@11123304 : Codeunit 11123326;
      Settings@11123306 : Codeunit 11123311;
    BEGIN

      // <TPZ1925>
      IF RecMgt.GetGLSetup(GLSetup,FALSE) THEN
        //EXIT(GLSetup."LCY Code");
        EXIT('USD');

      {
      IF NOT DefaultCurrencyRetrieved THEN BEGIN
        RecMgt.GetGLSetup(GLSetup,TRUE);

          DafaultCurrency := Settings.DefineCurrencyISOCode(DafaultCurrency)
        ELSE
          DafaultCurrency := Settings.DefineCurrencyISOCode(GLSetup."LCY Code");

        DefaultCurrencyRetrieved := TRUE;

      END;

      EXIT(DafaultCurrency);
       }
      // </TPZ1925>
    END;

    PROCEDURE SetDocStateFilter@11123388(NewDocStateFilter@11123302 : 'Normal,Basket,Wish List,Edit Order');
    BEGIN
      GlobalDocStateFilter := NewDocStateFilter;
    END;

    PROCEDURE GetDocStateFilter@11123389() : Integer;
    BEGIN
      EXIT(GlobalDocStateFilter);
    END;

    PROCEDURE SupportsVAT@11123342(ForceUpdate@11123303 : Boolean) : Boolean;
    VAR
      GLSetup@11123304 : Record 98;
      RecRef@11123306 : RecordRef;
      FieldRef@11123307 : FieldRef;
      RecMgt@11123305 : Codeunit 11123326;
    BEGIN
      IF ForceUpdate THEN
        SupportsVATRetrived := FALSE;

      IF NOT SupportsVATRetrived THEN BEGIN
        IF IsNorthAmericaLocalization THEN BEGIN
          RecMgt.GetGLSetup(GLSetup,TRUE);
          RecRef.GETTABLE(GLSetup);
          FieldRef := RecRef.FIELD(10001); //"VAT in Use"
          VATInUseGlobal := FieldRef.VALUE;
        END ELSE
          VATInUseGlobal := TRUE;

        SupportsVATRetrived := TRUE;
      END;

      EXIT(VATInUseGlobal);
    END;

    PROCEDURE SanaExtansionIsUsed@11123301() : Boolean;
    VAR
      RecRef@11123301 : RecordRef;
      FieldRefObjectType@11123303 : FieldRef;
      FieldRefObjectId@11123304 : FieldRef;
      ObjectType@11123302 : ',Table,Report,Codeunit';
    BEGIN
      IF NOT SanaExtansionIsUsedRetrived THEN BEGIN
        IF NOT ObjectExists(ObjectType::Table,2000000150) THEN BEGIN // "NAV App Object Metadata"
          SanaExtansionIsUsedRetrived := TRUE;
          EXIT(GlobalExtensionUsed);
        END;

        RecRef.OPEN(2000000150);                // "NAV App Object Metadata"
        FieldRefObjectType := RecRef.FIELD(2);  // "Object Type"
        FieldRefObjectId := RecRef.FIELD(3);    // "Object ID"
        FieldRefObjectType.SETRANGE(1);         // "Object Type"::Table
        FieldRefObjectId.SETRANGE(DATABASE::"SC - Setup");
        GlobalExtensionUsed := NOT RecRef.ISEMPTY;
        SanaExtansionIsUsedRetrived := TRUE;
      END;
      EXIT(GlobalExtensionUsed);
    END;

    PROCEDURE ObjectExists@11123326(Type@11123301 : ',Table,Report,Codeunit';ID@11123302 : Integer) : Boolean;
    VAR
      Object@11123303 : Record 2000000001;
    BEGIN
      Object.SETRANGE(Type,Type);
      Object.SETRANGE("Company Name",'');
      Object.SETRANGE(ID,ID);
      EXIT(NOT Object.ISEMPTY);
    END;

    PROCEDURE SupportsKitBOM@11123343() : Boolean;
    VAR
      Object@11123302 : Record 2000000001;
    BEGIN
      IF NOT SupportsKitBOMRetrieved THEN BEGIN
        Object.SETRANGE(Type,Object.Type::Table);
        Object.SETRANGE("Company Name",'');
        Object.SETRANGE(ID,25000);                    // "Kit Sales Line"
        SupportsKitBOMGlobal := NOT Object.ISEMPTY;
        SupportsKitBOMRetrieved := TRUE;
      END;
      EXIT(SupportsKitBOMGlobal);
    END;

    PROCEDURE SetSecureToken@11123344(NewToken@11123302 : Text[1024]);
    BEGIN
      SecureTokenGlobal := NewToken;
    END;

    PROCEDURE GetSecureToken@11123346() : Text[1024];
    BEGIN
      EXIT(SecureTokenGlobal)
    END;

    PROCEDURE SetSanaVersion@11123347(NewSanaVersion@11123302 : Text[20]);
    BEGIN
      SanaVersionGlobal := NewSanaVersion;
    END;

    PROCEDURE GetSanaVersion@11123345() : Text[20];
    BEGIN
      EXIT(SanaVersionGlobal);
    END;

    BEGIN
    {
      2017-08-09 TPZ1925 TAKHMETO/EBAGIM
        GetDefaultCurrency function has been modified
    }
    END.
  }
}

