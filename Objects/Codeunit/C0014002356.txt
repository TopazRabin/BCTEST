OBJECT Codeunit 14002356 E.D.I. Send
{
  OBJECT-PROPERTIES
  {
    Date=07/13/20;
    Time=12:00:00 PM;
    Version List=SE0.62,TPZEDI_0908,1984;
  }
  PROPERTIES
  {
    TableNo=14002353;
    OnRun=VAR
            EDISendDocumentHdr@1240030000 : Record 14002369;
            DocError@1240030003 : Boolean;
          BEGIN
            EDISendDocHdrTmp2.RESET;
            EDISendDocHdrTmp2.DELETEALL;

            OneDocPerFile := "Single Document File Export";
            IF OneDocPerFile THEN BEGIN
              SingleDocsExported := 0;
              EDISendDocumentHdr.RESET;
              EDISendDocumentHdr.SETCURRENTKEY("Trade Partner No.","Navision Document","Sent Date");
              EDISendDocumentHdr.SETRANGE("Trade Partner No.","Trade Partner No.");
              EDISendDocumentHdr.SETRANGE("Navision Document","Navision Document");
              EDISendDocumentHdr.SETRANGE("EDI Document No.","EDI Document No.");
              EDISendDocumentHdr.SETRANGE("Sent Date",0D);
              IF EDISendDocumentHdr.FIND('-') THEN
                REPEAT
                  ExportSingleDoc(EDISendDocumentHdr);
                UNTIL EDISendDocumentHdr.NEXT = 0;
              "Documents Exported" := SingleDocsExported;
              IF "XML Document" = FALSE THEN BEGIN
              {EDISendDocHdrTmp2.RESET;
              IF NOT EDISendDocHdrTmp2.FIND('-') THEN
                ERROR(
                  Text009,
                  EDISendDocumentHdr."Internal Doc No.",
                  EDISendDocumentHdr."Trade Partner No.",
                  EDISendDocumentHdr."EDI Document No.",
                  EDISendDocumentHdr."No.");}
              END;
            END ELSE
              IF NOT ExportDoc(Rec,EDISendDocumentHdr,TRUE) THEN BEGIN
                IF Batch THEN
                  ERROR(Text011)
                ELSE
                  ERROR(
                    Text009,
                    EDISendDocumentHdr."Internal Doc No.",
                    EDISendDocumentHdr."Trade Partner No.",
                    EDISendDocumentHdr."EDI Document No.",
                    EDISendDocumentHdr."No.");
              END;

            EDISetup.GET;
            IF EDISetup."Send Document Error" THEN BEGIN
              CLEAR(CreateEDIAlert);
              CreateEDIAlert.CheckAlertStatusSendDoc(EDISendDocumentHdr,3);
            END;
          END;

  }
  CODE
  {
    VAR
      EDISendDocHdrTmp2@1240020009 : TEMPORARY Record 14002369;
      EDIFile@1240030000 : File;
      CreateEDIAlert@1240020000 : Codeunit 14000375;
      EDISetup@1240020001 : Record 14002367;
      EDIFileName@1240030001 : Text[250];
      Text001@1001 : TextConst 'ENU=This document has already been exported.  Do you wish to export it again?';
      Text002@1002 : TextConst 'ENU=Document(s) Exported';
      Text003@1003 : TextConst 'ENU=EDI Template %1 not found for %2 %3.';
      Text004@1004 : TextConst 'ENU=Unable to create EDI file: %1';
      Text005@1005 : TextConst 'ENU=You must specify a component delimiter in template %1';
      Text006@1006 : TextConst 'ENU=You must specify an element delimiter in template %1';
      Text008@1240030003 : TextConst 'ENU=Send Document %1 has a data error. Document not exported.';
      Text009@1007 : TextConst 'ENU=Send Document %1 for Trading Partner %2 EDI Document %3 has a data error.';
      EDICopyToFileName@1240030002 : Text[250];
      FileName@1240020002 : Text[250];
      EDIOutStream@1240020005 : OutStream;
      StreamWriter@1240020006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamWriter";
      Encoding@1240020004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      Text010@1240020003 : TextConst 'ENU=Re-Export of document cancelled.';
      Text011@1240020007 : TextConst 'ENU=Send Document(s) created but not exported. Check for data errors.';
      Batch@1240020008 : Boolean;
      Text012@1240020094 : TextConst 'ENU=The %1 E.D.I. File Name Template must have a priority of 1 set.';
      NAVDocumentNo@1240020096 : Code[20];
      ExternalDocumentNo@1240020095 : Code[35];
      BeginFileLength@1240020209 : Integer;
      OneDocPerFile@1240020010 : Boolean;
      SingleDocsExported@1240020011 : Integer;
      ExportSequence@1240020012 : Code[10];
      GlobalTopazDivCode@1000000000 : Code[20];
      A@1000000001 : Integer;

    PROCEDURE CreateSendHdr@7(EDITradePartner@1240030000 : Record 14002360;EDIDocument@1240030001 : Record 14002353;VAR EDISendDocHdr@1240030002 : Record 14002369);
    VAR
      EDISendDocHdr2@1240030003 : Record 14002369;
      EDITemplate@1240030004 : Record 14002350;
      VersionNo@1240030005 : Integer;
      SendDocumentNo@1240030006 : Code[10];
    BEGIN
      EDISetup.GET;
      EDISetup.TESTFIELD("Last Send Document No.");

      EDISendDocHdr.TESTFIELD("Internal Doc No.");
      EDISendDocHdr.TESTFIELD("Navision Document");
      IF EDIDocument."XML Document"  THEN
       SetExportControlNo(EDITemplate,EDIDocument)
      ELSE
        EDISendDocHdr.TESTFIELD("Document No.");

      SendDocumentNo := '';

      EDISendDocHdr2.RESET;
      EDISendDocHdr2.SETCURRENTKEY("Internal Doc No.","Navision Document","Document No.",Version);
      IF EDISendDocHdr."Navision Document" = 'E_ROUTEREQ' THEN
        EDISendDocHdr2.SETRANGE("Document No.",EDISendDocHdr."Document No.")
      ELSE
        EDISendDocHdr2.SETRANGE("Internal Doc No.",EDISendDocHdr."Internal Doc No.");
      EDISendDocHdr2.SETRANGE("Navision Document",EDIDocument."Navision Document");
      EDISendDocHdr2.SETRANGE("Document No.",EDISendDocHdr."Document No.");
      EDISendDocHdr2.SETRANGE("Trade Partner No.",EDITradePartner."No.");
      EDISendDocHdr2.SETRANGE("Sent Date",0D);
      IF EDISendDocHdr2.FIND('-') THEN BEGIN
        SendDocumentNo := EDISendDocHdr2."No.";
        EDISendDocHdr2.DELETEALL(TRUE);
      END;
      EDISendDocHdr2.SETRANGE("Sent Date");
      EDISendDocHdr2.SETRANGE("Funct. Ack. Required",TRUE);
      IF EDIDocument."XML Document" THEN
      EDISendDocHdr2.SETFILTER(
        "Response Status",'=%1',EDISendDocHdr2."Response Status"::Rejected)
      ELSE BEGIN
        EDISendDocHdr2.SETFILTER(
          "Funct. Group Ack. Status",'=%1',EDISendDocHdr2."Funct. Group Ack. Status"::Rejected);
        EDISendDocHdr2.SETFILTER(
          "Tran. Set Funct. Ack. Status",'=%1',EDISendDocHdr2."Tran. Set Funct. Ack. Status"::Rejected);
      END;
      IF EDISendDocHdr2.FIND('-') THEN
        EDISendDocHdr2.DELETEALL(TRUE);

      EDISendDocHdr2.RESET;
      EDISendDocHdr2.SETCURRENTKEY("Internal Doc No.","Navision Document","Document No.",Version);
      EDISendDocHdr2.SETRANGE("Internal Doc No.",EDISendDocHdr."Internal Doc No.");
      EDISendDocHdr2.SETRANGE("Navision Document",EDIDocument."Navision Document");
      EDISendDocHdr2.SETRANGE("Document No.",EDISendDocHdr."Document No.");
      EDISendDocHdr2.SETRANGE("Trade Partner No.",EDITradePartner."No.");
      IF EDISendDocHdr2.FIND('+') THEN
        VersionNo := EDISendDocHdr2.Version + 1
      ELSE
        VersionNo := 1;

      EDITemplate.GET(EDIDocument."EDI Template Code");

      IF SendDocumentNo = '' THEN BEGIN
        EDISetup.LOCKTABLE;
        EDISetup."Last Send Document No." := INCSTR(EDISetup."Last Send Document No.");
        EDISetup.MODIFY;
        SendDocumentNo := EDISetup."Last Send Document No.";
      END;

      EDISendDocHdr2.RESET;
      EDISendDocHdr2.INIT;
      EDISendDocHdr2."No." := SendDocumentNo;
      EDISendDocHdr2."Internal Doc No." := EDISendDocHdr."Internal Doc No.";
      EDISendDocHdr2."Navision Document" := EDIDocument."Navision Document";
      EDISendDocHdr2."Document No." := EDISendDocHdr."Document No.";
      EDISendDocHdr2."Shortcut Dimension 5 Code" := EDISendDocHdr."Shortcut Dimension 5 Code"; //TPZEDI
      EDISendDocHdr2.Version := VersionNo;
      EDISendDocHdr2."Trade Partner No." := EDITradePartner."No.";
      EDISendDocHdr2."EDI Document No." := EDIDocument."EDI Document No.";
      EDISendDocHdr2."EDI Version" := EDIDocument.Version;
      EDISendDocHdr2."EDI Template Name" := EDIDocument."EDI Template Code";
      EDISendDocHdr2."Funct. Ack. Required" := EDIDocument."Funct. Ack. Required";
      EDISendDocHdr2."Outbox Archive Directory" := EDITemplate."Outbox Archive Directory";
      IF EDIDocument."XML Document" THEN BEGIN
        EDISendDocHdr2."XML Document" := TRUE;
        EDISendDocHdr2."Response DTD URL" := EDISendDocHdr."Response DTD URL";
        EDISendDocHdr2."cXML Response Payload ID" := EDISendDocHdr."cXML Response Payload ID";
        EDISendDocHdr2."Export Control No." := EDITemplate."Export Control No.";
      END;
      EDISendDocHdr2."Created Date" := TODAY;
      EDISendDocHdr2."Created Time" := TIME;
      EDISendDocHdr2."Created By" := USERID;
      SetExternalDocumentNo(EDISendDocHdr2);
      EDISendDocHdr2.INSERT;
      EDISendDocHdr.COPY(EDISendDocHdr2);
    END;

    PROCEDURE CreateSendLine@8(EDISendDocHdr@1240030000 : Record 14002369;EDIElement@1240030001 : Record 14002355;OutField@1240030002 : Text[250];OutLength@1240030003 : Integer;OutError@1240030004 : Boolean;NewSegment@1240030005 : Boolean;RevCrossRefValue@1240020003 : Text[40];EDIDocument@1240020006 : Record 14002353;NodeID@1240020008 : Boolean;EDISegment@1240020009 : Record 14002354);
    VAR
      EDISendDocField@1240030006 : Record 14002370;
      EDITemplate@1240030007 : Record 14002350;
      LineNo@1240030008 : Integer;
      CrossRefValue@1240020001 : Code[40];
      ReverseCrossReference@1240020002 : Boolean;
      SegmentParentLineNo@1240020004 : Integer;
      SegmentLineNo@1240020005 : Integer;
      XMLDoc@1240020007 : Boolean;
      A@1000000000 : Integer;
    BEGIN
      ReverseCrossReference := FALSE;
      SegmentParentLineNo := 0;
      SegmentLineNo := 0;
      XMLDoc := EDIDocument."XML Document";

      EDISendDocField.RESET;
      EDISendDocField.SETRANGE("No.",EDISendDocHdr."No.");
      IF EDISendDocField.FIND('+') THEN
        LineNo := EDISendDocField."Line No."
      ELSE
        LineNo := 0;

      IF EDITemplate.Code <> EDISendDocHdr."EDI Template Name" THEN
        EDITemplate.GET(EDISendDocHdr."EDI Template Name");

      IF EDIElement."Reverse Cross Reference" THEN
        ReverseCrossReference := TRUE;

      LineNo := LineNo + 10000;
      EDISendDocField.INIT;
      EDISendDocField."No." := EDISendDocHdr."No.";
      EDISendDocField."Internal Doc No." := EDISendDocHdr."Internal Doc No.";
      EDISendDocField."Document No." := EDISendDocHdr."Document No.";
      EDISendDocField.Version := EDISendDocHdr.Version;
      EDISendDocField."Line No." := LineNo;
      EDISendDocField."Trade Partner No." := EDISendDocHdr."Trade Partner No.";
      EDISendDocField."Navision Document" := EDISendDocHdr."Navision Document";
      EDISendDocField."EDI Document No." := EDISendDocHdr."EDI Document No.";
      IF NodeID THEN BEGIN
        EDISendDocField.Segment := EDISegment.Segment;
        EDISendDocField."Node Name" := EDISegment."Node Name";
        EDISendDocField."New Segment" := NewSegment;
        EDISendDocField.Depth := EDISegment.Depth;
        IF NewSegment AND EDISegment."Is Parent" THEN BEGIN
          EDISendDocField."Is Parent" := TRUE;
          EDISendDocField.Namespace := EDISegment.Namespace;
        END ELSE
          EDISendDocField."Is Parent" := FALSE;
        EDISendDocField.INSERT;
        EXIT;
      END;
      EDISendDocField.Segment := EDIElement.Segment;
      EDISendDocField.Element := EDIElement.Element;
      EDISendDocField."Field Name" := EDIElement."Field Name";
      EDISendDocField."NAV Table No." := EDIElement."NAV Table No.";
      EDISendDocField."NAV Field No." := EDIElement."NAV Field No.";
      EDISendDocField."Data Type" := EDIElement."Data Type";
      IF ReverseCrossReference THEN BEGIN
        IF EDIElement."Copy String Position" <> 0 THEN BEGIN
          IF EDIElement."Copy String Length" <> 0 THEN
            EDISendDocField."Field Text Value" :=
              COPYSTR(OutField,EDIElement."Copy String Position",EDIElement."Copy String Length")
          ELSE
            EDISendDocField."Field Text Value" :=
              COPYSTR(OutField,EDIElement."Copy String Position");
        END ELSE
          EDISendDocField."Field Text Value" := COPYSTR(OutField,1,STRLEN(OutField));
      END ELSE BEGIN
        IF EDIElement."Copy String Position" <> 0 THEN BEGIN
          IF EDIElement."Copy String Length" <> 0 THEN
            EDISendDocField."Field Text Value" :=
              COPYSTR(OutField,EDIElement."Copy String Position",EDIElement."Copy String Length")
          ELSE
            EDISendDocField."Field Text Value" :=
              COPYSTR(OutField,EDIElement."Copy String Position");
        END ELSE
          EDISendDocField."Field Text Value" := COPYSTR(OutField,1,OutLength);
      END;
      IF (EDIElement."Blank Zero") AND (EDISendDocField."Field Text Value" = '0') THEN
        CLEAR(EDISendDocField."Field Text Value");
      IF EDIElement.Lowercase THEN
        EDISendDocField."Field Text Value" := LOWERCASE(EDISendDocField."Field Text Value")
      ELSE
        IF EDITemplate."Export Uppercase Text" THEN
          EDISendDocField."Field Text Value" := UPPERCASE(EDISendDocField."Field Text Value");
      EDISendDocField."Field Length" := OutLength;
      EDISendDocField."Data Error" := OutError;
      EDISendDocField."New Segment" := NewSegment;
      EDISendDocField."Use Component Delimiter" := EDIElement."Use Component Delimiter";
      EDISendDocField."Bypass Blank Trailing Element" := EDIElement."Bypass Blank Trailing Element";
      EDISendDocField."Reverse Cross Reference" := EDIElement."Reverse Cross Reference";
      EDISendDocField."General Cross Ref. Value" := COPYSTR(RevCrossRefValue,1,OutLength);
      EDISendDocField."Blank Prev. Element if Blank" := EDIElement."Blank Prev. Element if Blank";
      IF XMLDoc THEN BEGIN
        EDISendDocField."Node Name" := EDIElement."Node Name";
        EDISendDocField.VALIDATE("Attribute Name",EDIElement."Attribute Name");
        EDISendDocField."Node Text" := EDIElement."Node Text";
        EDISendDocField.Depth := EDISegment.Depth;
        EDISendDocField."Response ID Substitution" := EDIElement."Response ID Substitution";
        EDISendDocField."Is Parent" := FALSE;
      END;
      EDISendDocField.INSERT;

      IF (EDIElement."Blank Prev. Element if Blank") AND (EDISendDocField."Field Text Value" = '') THEN BEGIN
        EDISendDocField.RESET;
        EDISendDocField.SETRANGE("No.",EDISendDocHdr."No.");
        EDISendDocField.SETRANGE("Line No.",(LineNo - 10000));
        IF EDISendDocField.FIND('-') THEN BEGIN
          EDISendDocField."Field Text Value" := '';
          EDISendDocField.MODIFY;
        END;
      END;
    END;

    PROCEDURE CheckSendDocError@2(NavisionDocument@1240030001 : Code[10];DocumentNo@1240030002 : Code[20]) Resp@1240030000 : Boolean;
    VAR
      EDISendDocHdr@1240030003 : Record 14002369;
    BEGIN
      EDISendDocHdr.RESET;
      EDISendDocHdr.SETCURRENTKEY("Navision Document","Document No.","Sent Date");
      EDISendDocHdr.SETRANGE("Navision Document",NavisionDocument);
      EDISendDocHdr.SETRANGE("Document No.",DocumentNo);
      EDISendDocHdr.SETRANGE("Sent Date",0D);
      IF EDISendDocHdr.FIND('-') THEN BEGIN
        EDISendDocHdr.CALCFIELDS("Data Error");
        EXIT(EDISendDocHdr."Data Error");
      END;
    END;

    PROCEDURE ExportSingleDoc@13(CurrentEDISendDocHdr@1240030000 : Record 14002369);
    VAR
      EDIDocument@1240030001 : Record 14002353;
    BEGIN
      IF CurrentEDISendDocHdr."Sent Date" <> 0D THEN
        IF GUIALLOWED THEN BEGIN
          IF NOT CONFIRM(Text001,FALSE) THEN
            ERROR(Text010);
        END ELSE
          ERROR(Text010);
      CurrentEDISendDocHdr.CALCFIELDS("Data Error");
      IF (CurrentEDISendDocHdr."Data Error") AND (OneDocPerFile = FALSE) THEN
        ERROR(Text008,CurrentEDISendDocHdr."No.");

      EDIDocument.GET(
        CurrentEDISendDocHdr."Trade Partner No.",CurrentEDISendDocHdr."Navision Document",
        CurrentEDISendDocHdr."EDI Document No.",CurrentEDISendDocHdr."EDI Version",
        EDIDocument.Type::Export);

      ExportDoc(EDIDocument,CurrentEDISendDocHdr,FALSE);

      EDISetup.GET;
      IF EDISetup."Send Document Error" THEN BEGIN
        CLEAR(CreateEDIAlert);
        CreateEDIAlert.CheckAlertStatusSendDoc(CurrentEDISendDocHdr,3);
      END;

      IF OneDocPerFile THEN
        EXIT;
      IF GUIALLOWED THEN
        MESSAGE(Text002);
    END;

    PROCEDURE ExportDoc@10(VAR EDIDoc@1240030001 : Record 14002353;VAR CurrentEDISendDocHdr@1240030002 : Record 14002369;MultipleDocuments@1240030003 : Boolean) Resp@1240030000 : Boolean;
    VAR
      EDIDocument@1240030004 : Record 14002353;
      EDISendDocHdr@1240030005 : Record 14002369;
      EDISendDocHdrTmp@1240030006 : TEMPORARY Record 14002369;
      EDISendDocField@1240030007 : Record 14002370;
      EDITemplate@1240030009 : Record 14002350;
      EDITradePartner@1240030010 : Record 14002360;
      StreamWriter@1240020002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamWriter";
      Encoding@1240020001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      EDIOutputEnvelope@1240030011 : Codeunit 14002352;
      EDISendXML@1240020000 : Codeunit 14099300;
      i@1240030013 : Integer;
      j@1240030014 : Integer;
      k@1240030015 : Integer;
      OutLineArray@1240030017 : ARRAY [5] OF Text[200];
      StringLength@1240030018 : Integer;
      TempChar@1240030019 : Char;
      TotalISASegments@1240030021 : Integer;
      TotalGSSegments@1240030022 : Integer;
      TotalSTSegments@1240030023 : Integer;
      TotalSegments@1240030024 : Integer;
      RemoveElement@1240030100 : Boolean;
      NewSegment@1240030125 : Boolean;
    BEGIN
      EDITradePartner.GET(EDIDoc."Trade Partner No.");
      EDIDocument.GET(
        EDIDoc."Trade Partner No.",EDIDoc."Navision Document",EDIDoc."EDI Document No.",EDIDoc.Version,
        EDIDoc.Type);

      IF NOT EDITemplate.GET(EDIDocument."EDI Template Code") THEN
        ERROR(
          Text003,
          EDIDoc."EDI Template Code",EDIDoc."Trade Partner No.",EDIDoc."Navision Document");
      IF EDITemplate."File Format" = EDITemplate."File Format"::XML THEN BEGIN
        EDISendXML.SetValues(EDIDoc,MultipleDocuments);
        EDISendXML.RUN(CurrentEDISendDocHdr);
        EXIT(TRUE);
      END;

      IF EDITemplate."Interface File Type" =
        EDITemplate."Interface File Type"::"X12 Delimited"
      THEN BEGIN
        EDIDocument.TESTFIELD(Version);
        EDIDocument.TESTFIELD("GS Funct. Identifier Code");
      END;

      IF EDITemplate."Export ISA Control No." = '' THEN BEGIN
        EDITemplate."Export ISA Control No." := '100000000';
        EDITemplate."Export GS Control No." := '200000000';
        EDITemplate."Export ST Control No." := '300000000';
        EDITemplate.MODIFY;
      END;

      EDISendDocHdrTmp.RESET;
      EDISendDocHdrTmp.DELETEALL;

      Batch := MultipleDocuments;
      IF MultipleDocuments THEN BEGIN
        EDISendDocHdr.RESET;
        EDISendDocHdr.SETCURRENTKEY("Trade Partner No.","Navision Document","Sent Date");
        EDISendDocHdr.SETRANGE("Trade Partner No.",EDIDocument."Trade Partner No.");
        EDISendDocHdr.SETRANGE("Navision Document",EDIDocument."Navision Document");
        EDISendDocHdr.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
        EDISendDocHdr.SETRANGE("Sent Date",0D);
        //<TPZ2302>
        //EDISendDocHdr.SETRANGE("Shortcut Dimension 5 Code", GlobalTopazDivCode); //TPZEDI
        //</TPZ2302>
      END ELSE BEGIN
        EDISendDocHdr.RESET;
        EDISendDocHdr.SETRANGE("No.",CurrentEDISendDocHdr."No.");
      END;

      IF EDISendDocHdr.FIND('-') THEN BEGIN
        EDIDoc."Documents Found" := 0;
        EDIDoc."Documents Exported" := 0;
        NAVDocumentNo := EDISendDocHdr."Document No.";
        ExternalDocumentNo := EDISendDocHdr."External Document No.";
        OpenOutputFile(EDITemplate,EDITradePartner,EDIDocument,EDISendDocHdr);
        EDIFile.CREATEOUTSTREAM(EDIOutStream);
        CASE EDITemplate."Encoding Type" OF
          EDITemplate."Encoding Type"::ASCII:
            StreamWriter := StreamWriter.StreamWriter(EDIOutStream,Encoding.ASCII);
          EDITemplate."Encoding Type"::Unicode:
            StreamWriter := StreamWriter.StreamWriter(EDIOutStream,Encoding.Unicode);
          EDITemplate."Encoding Type"::Default:
            StreamWriter := StreamWriter.StreamWriter(EDIOutStream,Encoding.Default);
        END;
        IF BeginFileLength <> 0 THEN
          EDIFile.SEEK(BeginFileLength);
        EDISendDocHdr."File Name" := FileName;
        TotalISASegments := 0;
        TotalGSSegments := 0;
        TotalSTSegments := 0;
        TotalSegments := 0;
        IF EDITemplate."Interface File Type" <> EDITemplate."Interface File Type"::None THEN BEGIN
          IF EDITemplate."File Format" = EDITemplate."File Format"::Delimited THEN BEGIN
            IF EDITemplate."Interface File Type" <>
              EDITemplate."Interface File Type"::"EDIFACT Delimited"
            THEN BEGIN
              EDIOutputEnvelope.CreateISASegment(
                EDITemplate,EDITradePartner,EDIDocument,OutLineArray);
              WriteEnvSeg(EDITemplate,OutLineArray[1],StreamWriter);
            END;
            EDIOutputEnvelope.SetTopazDivision(EDISendDocHdr."Shortcut Dimension 5 Code"); //TPZEDI
            EDIOutputEnvelope.CreateGSSegment(
              EDITemplate,EDITradePartner,EDIDocument,OutLineArray);
            WriteEnvSeg(EDITemplate,OutLineArray[1],StreamWriter);
            TotalGSSegments := TotalGSSegments + 1;
          END;
        END;
        REPEAT
          EDISendDocField.RESET;
          EDISendDocField.SETRANGE("No.",EDISendDocHdr."No.");
          EDISendDocField.SETRANGE("Bypass Blank Trailing Element",TRUE);
          EDISendDocField.SETFILTER("Field Text Value",'=%1','');
          IF EDISendDocField.FIND('-') THEN BEGIN
            RemoveElement := FALSE;
            NewSegment := TRUE;
            EDISendDocField.RESET;
            EDISendDocField.ASCENDING(FALSE);
            EDISendDocField.SETRANGE("No.",EDISendDocHdr."No.");
            IF EDISendDocField.FIND('-') THEN
              REPEAT
                IF EDISendDocField."New Segment" THEN BEGIN
                  RemoveElement := FALSE;
                  NewSegment := TRUE;
                END ELSE BEGIN
                  IF EDISendDocField."Bypass Blank Trailing Element" AND
                     NewSegment AND
                     (EDISendDocField."Field Text Value" = '') THEN
                    RemoveElement := TRUE
                  ELSE BEGIN
                    RemoveElement := FALSE;
                    NewSegment := FALSE;
                  END;
                  IF RemoveElement THEN
                    EDISendDocField.DELETE;
                END;
              UNTIL EDISendDocField.NEXT = 0;
          END;
          EDIDoc."Documents Found" := EDIDoc."Documents Found"  + 1;
          EDISendDocHdr.CALCFIELDS("Data Error");
          IF NOT EDISendDocHdr."Data Error" THEN BEGIN
            IF EDITemplate."Interface File Type" <> EDITemplate."Interface File Type"::None THEN BEGIN
              IF EDITemplate."File Format" = EDITemplate."File Format"::Fixed THEN BEGIN
                EDIOutputEnvelope.CreateISASegment(
                  EDITemplate,EDITradePartner,EDIDocument,OutLineArray);
                WriteEnvSeg(EDITemplate,OutLineArray[1],StreamWriter);
              END;
              IF EDITemplate."File Format" = EDITemplate."File Format"::Delimited THEN BEGIN
                EDIOutputEnvelope.CreateSTSegment(
                  EDITemplate,EDITradePartner,EDIDocument,OutLineArray);
                WriteEnvSeg(EDITemplate,OutLineArray[1],StreamWriter);
                TotalSTSegments := TotalSTSegments + 1;
                TotalSegments := 1;
              END;
            END;
            CLEAR(OutLineArray);
            i := 1;
            j := 1;
            EDISendDocField.RESET;
            EDISendDocField.SETRANGE("No.",EDISendDocHdr."No.");
            IF EDISendDocField.FIND('-') THEN
              REPEAT
                IF (EDISendDocField."New Segment") AND
                   (EDISendDocField."Line No." <> 10000)
                THEN
                  IF EDITemplate."File Format" = EDITemplate."File Format"::Delimited THEN BEGIN
                    AddSegTerm(EDIDoc,EDITemplate,StreamWriter);
                    TotalSegments := TotalSegments + 1;
                  END ELSE BEGIN
                    TempChar := 13;
                    StreamWriter.Write(TempChar);
                    TempChar := 10;
                    StreamWriter.Write(TempChar);
                  END;
                CASE EDITemplate."File Format" OF
                  EDITemplate."File Format"::Fixed:
                    StringLength := EDISendDocField."Field Length";
                  EDITemplate."File Format"::Delimited:
                    BEGIN
                      IF EDISendDocField."Reverse Cross Reference" THEN
                        StringLength := STRLEN(EDISendDocField."General Cross Ref. Value")
                      ELSE
                        StringLength := STRLEN(EDISendDocField."Field Text Value");
                    END;
                END;
                IF NOT EDISendDocField."New Segment" THEN
                  IF EDISendDocField."Use Component Delimiter" THEN
                    AddComponentTerm(EDITemplate,EDIDoc,StreamWriter)
                  ELSE
                    AddElementTerm(EDITemplate,EDIDoc,StreamWriter);
                k := 1;
                IF StringLength > 0 THEN
                  REPEAT
                    IF EDISendDocField."Reverse Cross Reference" THEN BEGIN
                      TempChar := EDISendDocField."General Cross Ref. Value"[k];
                      IF TempChar = 0 THEN
                        TempChar := 32;
                      StreamWriter.Write(TempChar);
                    END ELSE BEGIN
                      TempChar := EDISendDocField."Field Text Value"[k];
                      IF TempChar = 0 THEN
                        TempChar := 32;
                      StreamWriter.Write(TempChar);
                    END;
                    k := k + 1;
                  UNTIL k > StringLength;
              UNTIL EDISendDocField.NEXT = 0;
            IF EDITemplate."File Format" = EDITemplate."File Format"::Delimited THEN
              AddSegTerm(EDIDoc,EDITemplate,StreamWriter)
            ELSE BEGIN
              TempChar := 13;
              StreamWriter.Write(TempChar);
              TempChar := 10;
              StreamWriter.Write(TempChar);
            END;
            IF EDITemplate."Interface File Type" <> EDITemplate."Interface File Type"::None THEN BEGIN
              IF EDITemplate."File Format" = EDITemplate."File Format"::Delimited THEN BEGIN
                TotalSegments := TotalSegments + 1;
                EDIOutputEnvelope.CreateSESegment(
                  EDITemplate,EDITradePartner,EDIDocument,OutLineArray,TotalISASegments,
                  TotalGSSegments,TotalSTSegments,TotalSegments);
                WriteEnvSeg(EDITemplate,OutLineArray[1],StreamWriter);
              END;
            END;
            CLEAR(OutLineArray);
            EDISendDocHdrTmp.COPY(EDISendDocHdr);
            EDISendDocHdrTmp."Document Sent" := TRUE;
            EDISendDocHdrTmp."Sent Date" := TODAY;
            EDISendDocHdrTmp."Sent Time" := TIME;
            EDISendDocHdrTmp."Interchange Control No." := EDITemplate."Export ISA Control No.";
            EDISendDocHdrTmp."Group Control No." := EDITemplate."Export GS Control No.";
            EDISendDocHdrTmp."Transaction Set Control No." := EDITemplate."Export ST Control No.";
            EDISendDocHdrTmp.INSERT;
            IF OneDocPerFile THEN BEGIN
              EDISendDocHdrTmp2.COPY(EDISendDocHdrTmp);
              EDISendDocHdrTmp2.INSERT;
            END;
          END ELSE BEGIN
            EDISetup.GET;
            IF EDISetup."Abort Exp. if Send Doc. Error" THEN BEGIN
              CurrentEDISendDocHdr.COPY(EDISendDocHdr);
              StreamWriter.Close;
              EDIFile.CLOSE;
              ERASE(EDIFileName);
              EXIT(FALSE);
            END;
          END;
        UNTIL EDISendDocHdr.NEXT = 0;

        EDISendDocHdrTmp.RESET;
        IF NOT EDISendDocHdrTmp.FIND('-') THEN BEGIN
          StreamWriter.Close;
          EDIFile.CLOSE;
          ERASE(EDIFileName);
          CurrentEDISendDocHdr.COPY(EDISendDocHdr);
          EXIT(FALSE);
        END;

        IF EDITemplate."Interface File Type" <> EDITemplate."Interface File Type"::None THEN BEGIN
          IF EDITemplate."File Format" = EDITemplate."File Format"::Delimited THEN BEGIN
            EDIOutputEnvelope.CreateGESegment(
              EDITemplate,EDITradePartner,EDIDocument,OutLineArray,TotalISASegments,
              TotalGSSegments,TotalSTSegments,TotalSegments);
            WriteEnvSeg(EDITemplate,OutLineArray[1],StreamWriter);
            IF EDITemplate."Interface File Type" <> EDITemplate."Interface File Type"::"EDIFACT Delimited" THEN BEGIN
              EDIOutputEnvelope.CreateIEASegment(
                EDITemplate,EDITradePartner,EDIDocument,OutLineArray,TotalISASegments,
                TotalGSSegments,TotalSTSegments,TotalSegments);
              WriteEnvSeg(EDITemplate,OutLineArray[1],StreamWriter);
            END;
            AddInterchangeTerm(EDITemplate,StreamWriter);
          END;
        END;

        IF (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::"X12 Delimited") OR
           (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::"EDIFACT Delimited")
        THEN BEGIN
          EDICopyToFileName := EDIFileName;
          EDICopyToFileName := DELSTR(EDICopyToFileName,STRPOS(EDICopyToFileName,'\Temp'),5);
        END;
        EDISendDocHdrTmp.RESET;
        IF EDISendDocHdrTmp.FIND('-') THEN
          REPEAT
            EDISendDocHdr.COPY(EDISendDocHdrTmp);
            IF (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::"X12 Delimited") OR
               (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::"EDIFACT Delimited")
            THEN
              EDISendDocHdr."Interface File Name" := EDICopyToFileName
            ELSE
              EDISendDocHdr."Interface File Name" := EDIFileName;
            EDISendDocHdr."File Name" := FileName;
            EDISendDocHdr.MODIFY;
            EDIDoc."Documents Exported" := EDIDoc."Documents Exported" + 1;
            IF OneDocPerFile THEN
              SingleDocsExported := SingleDocsExported + EDIDoc."Documents Exported";
          UNTIL EDISendDocHdrTmp.NEXT = 0;
        EDIDocument.MODIFY;
        EDITemplate.MODIFY;

        CloseOutputFile(EDITemplate,EDITradePartner,EDIDocument,StreamWriter);
      END;
      COMMIT;

      EXIT(TRUE);
    END;

    PROCEDURE OpenOutputFile@1(VAR EDITemplate@1240030002 : Record 14002350;VAR EDITradePartner@1240030003 : Record 14002360;VAR EDIDocument@1240030004 : Record 14002353;EDISendDocHdr@1240020000 : Record 14002369) Response@1240030000 : Boolean;
    BEGIN
      EDISetup.GET;
      EDISetup.LOCKTABLE;
      EDISetup."Last Export Sequence No." := INCSTR(EDISetup."Last Export Sequence No.");
      EDISetup.MODIFY;
      ExportSequence := EDISetup."Last Export Sequence No.";
      COMMIT;

      FileName := '';
      IF (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::"X12 Delimited") OR
         (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::"EDIFACT Delimited")
      THEN BEGIN
        IF EDIDocument."File Name Template" = '' THEN BEGIN
          EDIFileName :=
            EDITemplate."Interface File Path" + 'Outbox\Temp\' + EDIDocument."Interface File" + '-' +
            EDIDocument."EDI Document No." + '-' + ExportSequence + '.edi';
          FileName :=
            EDIDocument."Interface File" + '-' + EDIDocument."EDI Document No." + '-' +
            ExportSequence + '.edi';
        END ELSE
          CreateCustomFileName(
            ExportSequence,EDITradePartner,EDIDocument,EDITemplate,EDIFileName,FileName,EDISendDocHdr);
        IF EXISTS(EDIFileName) THEN
          ERASE(EDIFileName);
        IF NOT EDIFile.CREATE(EDIFileName) THEN
          ERROR(Text004,EDIFileName);
      END ELSE BEGIN
        EDIDocument.TESTFIELD("Interface File");
        OneDocPerFile := EDIDocument."Single Document File Export";
        IF EDIDocument."File Name Template" = '' THEN BEGIN
          IF OneDocPerFile THEN
            EDIFileName := STRSUBSTNO(EDIDocument."Interface File",ExportSequence)
          ELSE
            EDIFileName := EDIDocument."Interface File";
        END ELSE
          CreateCustomFileName(
            ExportSequence,EDITradePartner,EDIDocument,EDITemplate,EDIFileName,FileName,EDISendDocHdr);
        EDIFile.TEXTMODE(FALSE);
        EDIFile.WRITEMODE(TRUE);
        IF OneDocPerFile THEN BEGIN
          IF NOT EDIFile.CREATE(EDIFileName) THEN
            ERROR(Text004,EDIFileName);
        END ELSE BEGIN
          IF EDIFile.OPEN(EDIFileName) THEN
            BeginFileLength := EDIFile.LEN
          ELSE
            IF NOT EDIFile.CREATE(EDIFileName) THEN
              ERROR(Text004,EDIFileName);
        END;
      END;
    END;

    PROCEDURE CloseOutputFile@3(VAR EDITemplate@1240030001 : Record 14002350;VAR EDITradePartner@1240030002 : Record 14002360;VAR EDIDocument@1240030003 : Record 14002353;VAR StreamWriter@1240020001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamWriter");
    BEGIN
      StreamWriter.Close;
      EDIFile.CLOSE;
      SETSTAMP(EDIFileName,TODAY,TIME);

      IF (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::"X12 Delimited") OR
         (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::"EDIFACT Delimited")
      THEN BEGIN
        COPY(EDIFileName,EDICopyToFileName);
        ERASE(EDIFileName);
      END;
    END;

    PROCEDURE AddComponentTerm@9(EDITemplate@1240030000 : Record 14002350;VAR EDIDoc@1240030001 : Record 14002353;VAR StreamWriter@1240020000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamWriter");
    VAR
      Delim@1240030002 : Char;
    BEGIN
      IF EDITemplate."File Format" = EDITemplate."File Format"::Delimited THEN BEGIN
        IF (EDITemplate."Component Delimeter" = '') AND
           (EDITemplate."Dec. Component Delimeter" = 0) THEN
          ERROR(Text005,EDITemplate.Code);
        IF EDITemplate."Component Delimeter" <> '' THEN
          Delim := EDITemplate."Component Delimeter"[1]
        ELSE
          Delim := EDITemplate."Dec. Component Delimeter";
        StreamWriter.Write(Delim);
      END;
    END;

    PROCEDURE AddElementTerm@4(EDITemplate@1240030000 : Record 14002350;VAR EDIDoc@1240030001 : Record 14002353;VAR StreamWriter@1240020000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamWriter");
    VAR
      Delim@1240030002 : Char;
    BEGIN
      IF EDITemplate."File Format" = EDITemplate."File Format"::Delimited THEN BEGIN
        IF (EDITemplate."Element Delimeter" = '') AND
           (EDITemplate."Dec. Element Delimeter" = 0) THEN
          ERROR(Text006,EDITemplate.Code);
        IF EDITemplate."Element Delimeter" <> '' THEN
          Delim := EDITemplate."Element Delimeter"[1]
        ELSE
          Delim := EDITemplate."Dec. Element Delimeter";
        StreamWriter.Write(Delim);
      END;
    END;

    PROCEDURE AddSegTerm@6(VAR EDIDocument@1240030000 : Record 14002353;VAR EDITemplate@1240030001 : Record 14002350;VAR StreamWriter@1240020000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamWriter");
    VAR
      EDIOutputEnvelope@1240030002 : Codeunit 14002352;
      TempChar@1240030003 : Char;
      i@1240030004 : Integer;
      Delim@1240030005 : Char;
      SegDelim@1240030006 : Char;
      CompDelim@1240030007 : Char;
    BEGIN
      EDIOutputEnvelope.GetDelim(EDITemplate,Delim,SegDelim,CompDelim);
      IF SegDelim > 0 THEN
        StreamWriter.Write(SegDelim);

      IF EDITemplate."Segment Line Terminator" =
        EDITemplate."Segment Line Terminator"::"CR LF" THEN BEGIN
          TempChar := 13;
          StreamWriter.Write(TempChar);
          TempChar := 10;
          StreamWriter.Write(TempChar);
      END;
    END;

    PROCEDURE AddInterchangeTerm@5(EDITemplate@1240030000 : Record 14002350;VAR StreamWriter@1240020000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamWriter");
    VAR
      TempChar@1240030001 : Char;
    BEGIN
      CASE EDITemplate."Interchange Terminator" OF
        EDITemplate."Interchange Terminator"::"CR LF":
          BEGIN
            TempChar := 13;
            StreamWriter.Write(TempChar);
            TempChar := 10;
            StreamWriter.Write(TempChar);
          END;
        EDITemplate."Interchange Terminator"::"Dec. Interchange Terminator":
        StreamWriter.Write(EDITemplate."Dec. Interchange Terminator");
      END;
    END;

    PROCEDURE WriteEnvSeg@11(VAR EDITemplate@1240030000 : Record 14002350;VAR OutLine@1240030001 : Text[200];VAR StreamWriter@1240020000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamWriter");
    VAR
      k@1240030002 : Integer;
      StringLength@1240030003 : Integer;
      TempChar@1240030004 : Char;
    BEGIN
      StringLength := STRLEN(OutLine);
      k := 1;
      REPEAT
        TempChar := OutLine[k];
        StreamWriter.Write(TempChar);
        k := k + 1;
      UNTIL k > StringLength;

      IF EDITemplate."Segment Line Terminator" =
        EDITemplate."Segment Line Terminator"::"CR LF"
      THEN BEGIN
        TempChar := 13;
        StreamWriter.Write(TempChar);
        TempChar := 10;
        StreamWriter.Write(TempChar);
      END;
    END;

    PROCEDURE CreateCustomFileName@1240020000(ExportSequence@1240020010 : Code[10];EDITradePartner@1240020012 : Record 14002360;EDIDocument@1240020011 : Record 14002353;EDITemplate@1240020017 : Record 14002350;VAR EDIFileName@1240020002 : Text[250];VAR FileName@1240020003 : Text[250];EDISendDocHdr@1240020007 : Record 14002369);
    VAR
      EDIFileNameTemplate@1240020014 : Record 14000373;
      SeparatorType@1240020016 : ' ,Space,Hyphen,Underscore,Period';
      TradePartner@1240020000 : Code[22];
      EDIDocumentNo@1240020001 : Code[30];
      TextValue1@1240020004 : Text[32];
      TextValue2@1240020005 : Text[32];
      TextValue3@1240020006 : Text[32];
      DateText@1240020021 : Text[12];
      TimeText@1240020022 : Text[12];
      Priority@1240020015 : Integer;
      Separator@1240020018 : Code[10];
      DateVariable@1240020019 : Date;
      FileExtension@1240020020 : Text[10];
      LastPos@1240020008 : Integer;
      CharPos@1240020013 : Integer;
      OriginalFileName@1240020023 : Text[250];
      NewFileName@1240020025 : Text[250];
      PriorityFound@1240020027 : Boolean;
    BEGIN
      EDIFileNameTemplate.GET(EDIDocument."File Name Template");

      PriorityFound := FALSE;
      WITH EDIFileNameTemplate DO BEGIN
        CASE TRUE OF
          "Trade Partner No. Priority" = 1:
            PriorityFound := TRUE;
          "EDI Document No. Priority" = 1:
            PriorityFound := TRUE;
          "Export Sequence Priority" = 1:
            PriorityFound := TRUE;
          "NAV Document No. Priority" = 1:
            PriorityFound := TRUE;
          "External Document No. Priority" = 1:
            PriorityFound := TRUE;
          "Export Date Priority" = 1:
            PriorityFound := TRUE;
          "Export Time Priority" = 1:
            PriorityFound := TRUE;
          "Interface File Priority" = 1:
            PriorityFound := TRUE;
          "Text Value 1 Priority" = 1:
            PriorityFound := TRUE;
          "Text Value 2 Priority" = 1:
            PriorityFound := TRUE;
          "Text Value 3 Priority" = 1:
            PriorityFound := TRUE
        END;
      END;
      IF (PriorityFound = FALSE) AND (EDIFileNameTemplate."File Extension" = '') THEN
       ERROR(Text012,EDIFileNameTemplate.Code);

      SeparatorType := EDIFileNameTemplate."Separator Type";
      CASE SeparatorType OF
        SeparatorType::" ":
          Separator := '';
        SeparatorType::Space:
          Separator := '%1?';
        SeparatorType::Hyphen:
          Separator := '-';
        SeparatorType::Underscore:
          Separator := '_';
        SeparatorType::Period:
          Separator := '.';
      END;

      DateVariable := TODAY;

      IF EDIFileNameTemplate."File Extension" = '' THEN BEGIN
        IF EDITemplate."File Format" = EDITemplate."File Format"::XML THEN
          FileExtension := '.xml'
        ELSE
          FileExtension := '.edi';
      END ELSE
        FileExtension := '.' + EDIFileNameTemplate."File Extension";
      IF (PriorityFound = FALSE) AND (EDIFileNameTemplate."File Extension" <> '') THEN BEGIN
        EDIFileName :=
          EDITemplate."Interface File Path" + 'Outbox\Temp\' + EDIDocument."Interface File" + '-' +
          DELCHR(EDIDocument."EDI Document No.",'=',':') + '-' + ExportSequence + '.' +
          EDIFileNameTemplate."File Extension";
        EXIT;
      END;

      IF (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::"X12 Delimited") OR
         (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::"EDIFACT Delimited") OR
         (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::cXML) OR
         (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::XML)
      THEN
        EDIFileName := EDITemplate."Interface File Path" + 'Outbox\Temp\'
      ELSE BEGIN
        CharPos := 0;
        LastPos := 0;
        NewFileName := '';
        OriginalFileName := '';
        OriginalFileName := EDIDocument."Interface File";
        REPEAT
          LastPos := STRPOS(OriginalFileName,'\');
          NewFileName := NewFileName + COPYSTR(OriginalFileName,1,LastPos);
          OriginalFileName := COPYSTR(OriginalFileName,LastPos + 1);
          IF LastPos <> 0 THEN BEGIN
            CharPos := LastPos;
          END;
        UNTIL LastPos = 0;
        IF CharPos <> 0 THEN
          EDIFileName := NewFileName
        ELSE BEGIN
          EDIFileName := EDIDocument."Interface File";
          EXIT;
        END;
      END;

      TradePartner := EDITradePartner."No.";
      EDIDocumentNo := EDIDocument."EDI Document No.";
      TextValue1 := EDIFileNameTemplate."Text Value 1";
      TextValue2 := EDIFileNameTemplate."Text Value 2";
      TextValue3 := EDIFileNameTemplate."Text Value 3";

      WITH EDIFileNameTemplate DO BEGIN
        FOR Priority := 1 TO 10 DO BEGIN
          CASE TRUE OF
            "Trade Partner No. Priority" = Priority:
             BEGIN
               IF "Trade Partner No." THEN BEGIN
                 EDIFileName := EDIFileName + EDITradePartner."No." + Separator;
                 FileName := FileName + EDITradePartner."No." + Separator;
               END;
             END;
            "EDI Document No. Priority" = Priority:
              BEGIN
                IF "EDI Document No." THEN BEGIN
                  EDIFileName := EDIFileName + DELCHR(EDIDocument."EDI Document No.",'=',':') + Separator;
                  FileName := FileName + EDIDocument."EDI Document No." + Separator;
                END;
              END;
            "Export Sequence Priority" = Priority:
              BEGIN
                IF "Export Sequence" THEN BEGIN
                  EDIFileName := EDIFileName + ExportSequence + Separator;
                  FileName := FileName + ExportSequence + Separator;
                END;
             END;
            "NAV Document No. Priority" = Priority:
              BEGIN
                IF "NAV Document No." THEN BEGIN
                  EDIFileName := EDIFileName + NAVDocumentNo + Separator;
                  FileName := FileName + NAVDocumentNo + Separator;
                END;
             END;
            "External Document No. Priority" = Priority:
              BEGIN
                IF "External Document No." THEN BEGIN
                  ExternalDocumentNo := EDISendDocHdr."External Document No.";
                  EDIFileName := EDIFileName + ExternalDocumentNo + Separator;
                  FileName := FileName + ExternalDocumentNo + Separator;
                END;
             END;
            "Export Date Priority" = Priority:
              BEGIN
                IF "Export Date" <>  "Export Date"::" " THEN
                  CASE "Export Date" OF
                    "Export Date"::"Date YYMMDD":
                      BEGIN
                        DateText := FORMAT(DateVariable,6,'<year,2><Month,2><Day,2>') + Separator;
                        EDIFileName := EDIFileName + DateText;
                        FileName := FileName + DateText;
                      END;
                    "Export Date"::"Date YYYYMMDD":
                      BEGIN
                        DateText := FORMAT(DateVariable,8,'<Year4,4><Month,2><Day,2>') + Separator;
                        EDIFileName := EDIFileName + DateText;
                        FileName := FileName + DateText;
                      END;
                    "Export Date"::"Date DDMMYY":
                      BEGIN
                        DateText := FORMAT(DateVariable,6,'<Day,2><Month,2><Year,2>') + Separator;
                        EDIFileName := EDIFileName + DateText;
                        FileName := FileName + DateText;
                      END;
                    "Export Date"::"Date DDMMYYYY":
                      BEGIN
                        DateText := FORMAT(DateVariable,8,'<Day,2><Month,2><Year4,4>') + Separator;
                        EDIFileName := EDIFileName + DateText;
                        FileName := FileName + DateText;
                      END;
                    "Export Date"::"Date YYYYDDMM":
                      BEGIN
                        DateText := FORMAT(DateVariable,8,'<Year4,4><Day,2><Month,2>') + Separator;
                        EDIFileName := EDIFileName + DateText;
                        FileName := FileName + DateText;
                      END;
                    "Export Date"::"Date MMDDYY":
                      BEGIN
                        DateText := FORMAT(DateVariable,6,'<Month,2><Day,2><Year,2>') + Separator;
                        EDIFileName := EDIFileName + DateText;
                        FileName := FileName + DateText;
                      END;
                  END;
              END;
            "Export Time Priority" = Priority:
              BEGIN
                IF "Export Time" <> "Export Time"::" " THEN
                  CASE "Export Time" OF
                    "Export Time"::Hours12:
                      BEGIN
                        TimeText := FORMAT(TIME,6,'<Hours12,2><Minutes,2>') + Separator;
                        TimeText := DELCHR(TimeText,'<',' ');
                        EDIFileName := EDIFileName + TimeText;
                        FileName := FileName + TimeText;
                      END;
                    "Export Time"::"Hours12 AM/PM":
                      BEGIN
                        TimeText := FORMAT(TIME,6,'<Hours12,2><Minutes,2><AM/PM>') + Separator;
                        TimeText := DELCHR(TimeText,'<',' ');
                        EDIFileName := EDIFileName + TimeText;
                        FileName := FileName + TimeText;
                      END;
                    "Export Time"::Hours24:
                      BEGIN
                        TimeText := CONVERTSTR(FORMAT(TIME,4,'<Hours24,2><Minutes,2>'),' ','0') + Separator;
                        EDIFileName := EDIFileName + TimeText;
                        FileName := FileName + TimeText;
                      END;
                  END;
             END;
            "Interface File Priority" = Priority:
              BEGIN
                IF "Interface File" THEN BEGIN
                  EDIFileName := EDIFileName + EDIDocument."Interface File" + Separator;
                  FileName := FileName + EDIDocument."Interface File" + Separator;
                END;
              END;
            "Text Value 1 Priority" = Priority:
              BEGIN
                IF "Text Value 1" <> '' THEN BEGIN
                  EDIFileName := EDIFileName + EDIFileNameTemplate."Text Value 1" + Separator;
                  FileName := FileName + EDIFileNameTemplate."Text Value 1" + Separator;
                END;
              END;
            "Text Value 2 Priority" = Priority:
              BEGIN
                IF "Text Value 1" <> '' THEN BEGIN
                  EDIFileName := EDIFileName + EDIFileNameTemplate."Text Value 2" + Separator;
                  FileName := FileName + EDIFileNameTemplate."Text Value 2" + Separator;
                END;
              END;
            "Text Value 3 Priority" = Priority:
              BEGIN
                IF "Text Value 3" <> '' THEN BEGIN
                  EDIFileName := EDIFileName + EDIFileNameTemplate."Text Value 3" + Separator;
                  FileName := FileName + EDIFileNameTemplate."Text Value 3" + Separator;
                END;
              END;


            // Add code here for Custom format
          END;
        END;

        CASE SeparatorType OF
          SeparatorType::Space:
            BEGIN
              EDIFileName := STRSUBSTNO(EDIFileName,' ','%1');
              EDIFileName := DELCHR(EDIFileName,'=', '?');
              EDIFileName := DELCHR(EDIFileName,'<', ' ');
              EDIFileName := DELCHR(EDIFileName,'>', ' ');
              FileName := STRSUBSTNO(FileName,' ','%1');
              FileName := DELCHR(FileName,'=', '?');
              FileName := DELCHR(FileName,'<', ' ');
              FileName := DELCHR(FileName,'>', ' ');
            END;
          SeparatorType::Hyphen:
            BEGIN
              EDIFileName := DELCHR(EDIFileName,'<', '-');
              EDIFileName := DELCHR(EDIFileName,'>', '-');
              FileName := DELCHR(FileName,'<', '-');
              FileName := DELCHR(FileName,'>', '-');
            END;
          SeparatorType::Underscore:
            BEGIN
              EDIFileName := DELCHR(EDIFileName,'<', '_');
              EDIFileName := DELCHR(EDIFileName,'>', '_');
              FileName := DELCHR(FileName,'<', '_');
              FileName := DELCHR(FileName,'>', '_');
            END;
          SeparatorType::Period:
            BEGIN
              EDIFileName := DELCHR(EDIFileName,'<', '.');
              EDIFileName := DELCHR(EDIFileName,'>', '.');
              FileName := DELCHR(FileName,'<', '.');
              FileName := DELCHR(FileName,'>', '.');
            END;
        END;
        EDIFileName := EDIFileName + FileExtension;
        FileName := FileName + FileExtension;
      END;
    END;

    PROCEDURE SetExternalDocumentNo@1240020001(VAR EDISendDocumentHdr@1240020008 : Record 14002369);
    VAR
      SalesHeader@1240020006 : Record 36;
      SalesInvoiceHeader@1240020005 : Record 112;
      SalesShipmentHeader@1240020004 : Record 110;
      OrderStatusHeader@1240020003 : Record 14002400;
      ReturnReceiptHeader@1240020001 : Record 6660;
      SalesCrMemoHeader@1240020000 : Record 114;
    BEGIN
      WITH EDISendDocumentHdr DO BEGIN
        CASE "Navision Document" OF
          'E_SLSWSA','E_SLSPOA':
            BEGIN
              SalesHeader.RESET;
              SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
              SalesHeader.SETRANGE("No.","Document No.");
              IF SalesHeader.FIND('-') THEN
                "External Document No." := SalesHeader."External Document No.";
            END;
          'E_SLSINV':
            BEGIN
              SalesInvoiceHeader.RESET;
              SalesInvoiceHeader.SETRANGE("No.","Document No.");
              IF SalesInvoiceHeader.FIND('-') THEN
                "External Document No." := SalesInvoiceHeader."External Document No.";
            END;
          'E_SHPADV','E_WHSESHP':
            BEGIN
              SalesShipmentHeader.RESET;
              SalesShipmentHeader.SETRANGE("No.","Document No.");
              IF SalesShipmentHeader.FIND('-') THEN
                "External Document No." := SalesShipmentHeader."External Document No.";
            END;
          'E_SLSSTA','E_ADVPOA','E_SLSPOC':
            BEGIN
              OrderStatusHeader.RESET;
              OrderStatusHeader.SETRANGE("Internal Doc. No.","Internal Doc No.");
              IF "Navision Document" = 'E_SLSSTA' THEN BEGIN
                OrderStatusHeader.SETRANGE("Document Type",OrderStatusHeader."Document Type"::" ");
                IF OrderStatusHeader.FIND('-') THEN BEGIN
                  SalesHeader.RESET;
                  SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
                  SalesHeader.SETRANGE("No.",OrderStatusHeader."Source Doc. No.");
                  IF SalesHeader.FIND('-') THEN
                    "External Document No." := SalesHeader."External Document No.";
                END;
              END;
              IF "Navision Document" = 'E_ADVPOA' THEN BEGIN
                OrderStatusHeader.SETRANGE(
                  "Document Type",OrderStatusHeader."Document Type"::"Advance P.O. Ack.");
                IF OrderStatusHeader.FIND('-') THEN BEGIN
                  SalesHeader.RESET;
                  SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
                  SalesHeader.SETRANGE("No.",OrderStatusHeader."Source Doc. No.");
                  IF SalesHeader.FIND('-') THEN
                    "External Document No." := SalesHeader."External Document No.";
                END;
              END;
              IF "Navision Document" = 'E_SLSPOC' THEN BEGIN
                OrderStatusHeader.SETRANGE(
                  "Document Type",OrderStatusHeader."Document Type"::"Advance P.O. Ack.");
                IF OrderStatusHeader.FIND('-') THEN BEGIN
                  SalesHeader.RESET;
                  SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
                  SalesHeader.SETRANGE("No.",OrderStatusHeader."Source Doc. No.");
                  IF SalesHeader.FIND('-') THEN
                    "External Document No." := SalesHeader."External Document No.";
                END;
              END;
            END;
          'E_SLSCRM':
            BEGIN
              SalesCrMemoHeader.RESET;
              SalesCrMemoHeader.SETRANGE("No.","Document No.");
              IF SalesCrMemoHeader.FIND('-') THEN
                "External Document No." := SalesCrMemoHeader."External Document No.";
            END;
          'E_SLSRMA':
            BEGIN
              ReturnReceiptHeader.RESET;
              ReturnReceiptHeader.SETRANGE("No.","Document No.");
              IF ReturnReceiptHeader.FIND('-') THEN
                "External Document No." := ReturnReceiptHeader."External Document No.";
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE SetExportControlNo@1240020002(VAR EDITemplate@1240020000 : Record 14002350;EDIDocument@1240020001 : Record 14002353);
    BEGIN
      EDITemplate.GET(EDIDocument."EDI Template Code");
      IF EDITemplate."Export Control No." = '' THEN
        EDITemplate."Export Control No." := '100000000'
      ELSE
        EDITemplate."Export Control No." := INCSTR(EDITemplate."Export Control No.");
      EDITemplate.MODIFY;
      COMMIT;
    END;

    PROCEDURE SetTopazDivision@1000000000(pDivCode@1000000000 : Code[20]);
    BEGIN
      GlobalTopazDivCode := pDivCode; //TPZEDI
    END;

    PROCEDURE ExportSingleDoc1@1000000001(CurrentEDISendDocHdr@1240030000 : Record 14002369);
    VAR
      EDIDocument@1240030001 : Record 14002353;
    BEGIN
      CurrentEDISendDocHdr.CALCFIELDS("Data Error");
      IF (CurrentEDISendDocHdr."Data Error") AND (OneDocPerFile = FALSE) THEN
        ERROR(Text008,CurrentEDISendDocHdr."No.");

      EDIDocument.GET(
        CurrentEDISendDocHdr."Trade Partner No.",CurrentEDISendDocHdr."Navision Document",
        CurrentEDISendDocHdr."EDI Document No.",CurrentEDISendDocHdr."EDI Version",
        EDIDocument.Type::Export);

      ExportDoc(EDIDocument,CurrentEDISendDocHdr,FALSE);

      EDISetup.GET;
      IF EDISetup."Send Document Error" THEN BEGIN
        CLEAR(CreateEDIAlert);
        CreateEDIAlert.CheckAlertStatusSendDoc(CurrentEDISendDocHdr,3);
      END;

      IF OneDocPerFile THEN
        EXIT;
    END;

    BEGIN
    {
      TPZEDI - Topaz EDI
      TPZ1984 2017-08-18 Length for Global Variable ExternalDocumentNo increased from 20 to 35 to match the field length on Sales Header table.
      2018-05-03 TPZ2302 DKUMAR
        Code Block.
    }
    END.
  }
}

