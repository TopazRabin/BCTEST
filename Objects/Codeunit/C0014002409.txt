OBJECT Codeunit 14002409 E.D.I. Return Receipt Send
{
  OBJECT-PROPERTIES
  {
    Date=08/15/17;
    Time=12:00:00 PM;
    Version List=SE0.60.14.02;
  }
  PROPERTIES
  {
    TableNo=6660;
    Permissions=TableData 6660=rimd;
    OnRun=BEGIN
            IF NOT ExportReturnReceipt(Rec) THEN
              ERROR(Text001,"No.");
          END;

  }
  CODE
  {
    VAR
      BilltoCustomer@1240030000 : Record 18;
      BillOfLading@1240030001 : Record 14000822;
      CompanyInformation@1240030002 : Record 79;
      EDISetup@1240030003 : Record 14002367;
      EDITemplate@1240030004 : Record 14002350;
      EDITradePartner@1240030005 : Record 14002360;
      EDIDocument@1240030006 : Record 14002353;
      EDISegment@1240030007 : Record 14002354;
      EDISegment2@1240030008 : Record 14002354;
      EDIElement@1240030009 : Record 14002355;
      EDISendDocHdr@1240030010 : Record 14002369;
      EDICustCrossRef@1240030012 : Record 14002362;
      Item@1240030013 : Record 27;
      ItemUnitOfMeasure@1240030014 : Record 5404;
      PaymentTerms@1240030015 : Record 3;
      SelltoCustomer@1240030016 : Record 18;
      ShiptoAddress@1240030017 : Record 222;
      ReturnReceiptHeader@1240030018 : Record 6660;
      ReturnReceiptLine@1240030019 : Record 6661;
      SalespersonPurchaser@1240030021 : Record 13;
      ShipmentMethod@1240030025 : Record 10;
      ShippingAgent@1240030026 : Record 291;
      EDIElementArray@1240030027 : ARRAY [100] OF Record 14002355;
      SalesCommentLine@1240030068 : Record 44;
      ItemCrossReference@1240030069 : Record 5717;
      EDITradePtnrItem@1240020007 : Record 14002364;
      EDITradePtnrUOM@1240020011 : Record 14002365;
      PostedReceive@1240020008 : Record 14000603;
      Location@1240020022 : Record 14;
      ShiptoCountry@1240020021 : Record 9;
      BilltoCountry@1240020020 : Record 9;
      SelltoCountry@1240020019 : Record 9;
      ShipfromCountry@1240020018 : Record 9;
      EDISend@1240030028 : Codeunit 14002356;
      EDIFormat@1240030030 : Codeunit 14002351;
      EDIPackageMapIntegration@1240030065 : Codeunit 14002378;
      EDIGetReverseCrossRef@1240020000 : Codeunit 14000373;
      CreateEDIAlert@1240020009 : Codeunit 14000375;
      EDILoadDBFields@1240020012 : Codeunit 14002392;
      EDILoadEDIOutFields@1240020016 : Codeunit 14000381;
      TimeVariable@1240020013 : Time;
      DateTimeVariable@1240020014 : DateTime;
      BooleanVariable@1240030031 : Boolean;
      BypassSegment@1240030032 : Boolean;
      DateVariable@1240030033 : Date;
      DecimalVariable@1240030034 : Decimal;
      DocumentNo@1240030035 : Code[10];
      LoopCnt@1240020006 : Integer;
      i@1240030036 : Integer;
      ReceiptLineNoArray@1240030038 : ARRAY [500] OF Integer;
      IntegerVariable@1240030039 : Integer;
      ReceiptNetShipWeight@1240030043 : Decimal;
      ReceiptGrossShipWeight@1240030044 : Decimal;
      ReceiptTotalUnits@1240030046 : Decimal;
      ReceiptTotalBaseUnits@1240030047 : Decimal;
      LineNumber@1240030048 : Integer;
      NewSegment@1240030049 : Boolean;
      Ok@1240030050 : Boolean;
      OutFldArray@1240030052 : ARRAY [100] OF Text[80];
      OutLenArray@1240030053 : ARRAY [100] OF Integer;
      OutErrorArray@1240030054 : ARRAY [100] OF Boolean;
      OutputOff@1240030055 : Boolean;
      ProcessingLines@1240030056 : Boolean;
      PmtDiscPercent@1240030061 : Decimal;
      TradePtnrFound@1240030063 : Boolean;
      TotalSegments@1240030064 : Integer;
      Text001@1001 : TextConst 'ENU=Return Receipt %1 not exported.';
      Text002@1002 : TextConst 'ENU=Customer %1 is not set up as an EDI Trading Partner.';
      Text003@1003 : TextConst 'ENU=Customer %1 is not set up with an Active EDI transaction %2.';
      Text004@1004 : TextConst 'ENU=EDI Document %1 for Trading Partner %2 has a mapping error.';
      Text005@1005 : TextConst 'ENU=Return Receipt line not found for Return Receipt # %1.';
      Text006@1006 : TextConst 'ENU=Unable to find EDI segment definition for Trading Partner %1.';
      Text007@1007 : TextConst 'ENU=LINE END Command found before LINE BEGIN.  Check Segment Definition.';
      Text008@1008 : TextConst 'ENU=Unable to find EDI Segment Elements for the following: %1 - %2 - %3 -%4.';
      LoopFinished@1240030067 : Boolean;
      RepeatCount@1240030051 : Integer;
      RecordNo@1240020010 : Integer;
      ReverseCrossReference@1240020005 : Boolean;
      ReverseCrossRefArray@1240020004 : ARRAY [100] OF Text[40];
      ReverseCrossRefValue@1240020003 : Text[40];
      BypassSegment2@1240020002 : Boolean;
      OutError2@1240020001 : Boolean;
      RecRef@1240020015 : RecordRef;
      XMLDoc@1240020017 : Boolean;

    PROCEDURE ExportReturnReceipt@18(VAR CurrentReturnReceiptHdr@1240030001 : Record 6660) ErrorCode@1240030000 : Boolean;
    VAR
      EDIXMLManagement@1240020000 : Codeunit 14099302;
    BEGIN
      CLEAR(EDILoadEDIOutFields);
      ReturnReceiptHeader.COPY(CurrentReturnReceiptHdr);

      EDISetup.LOCKTABLE;
      EDISetup.GET;
      IF ReturnReceiptHeader."EDI Internal Doc. No." = '' THEN BEGIN
        EDISetup."Last Internal Doc. No." := INCSTR(EDISetup."Last Internal Doc. No.");
        ReturnReceiptHeader."EDI Internal Doc. No." := EDISetup."Last Internal Doc. No.";
        EDISetup.MODIFY;
      END;

      TradePtnrFound := FALSE;

      EDITradePartner.SETCURRENTKEY("Customer No.");
      EDITradePartner.SETRANGE("Customer No.",ReturnReceiptHeader."Bill-to Customer No.");
      IF EDITradePartner.FIND('-') THEN BEGIN
        TradePtnrFound := TRUE;
        EDICustCrossRef.INIT;
        EDICustCrossRef.RESET;
        EDICustCrossRef.SETRANGE("Trade Partner No.",EDITradePartner."No.");
        EDICustCrossRef.SETRANGE("Navision Ship To Code",ReturnReceiptHeader."Ship-to Code");
        Ok := EDICustCrossRef.FIND('-');
      END;

      IF NOT TradePtnrFound THEN BEGIN
        EDICustCrossRef.INIT;
        EDICustCrossRef.SETCURRENTKEY("Navision Sell To Code");
        EDICustCrossRef.SETRANGE(
          "Navision Sell To Code",ReturnReceiptHeader."Sell-to Customer No.");
        EDICustCrossRef.SETRANGE("Navision Ship To Code",ReturnReceiptHeader."Ship-to Code");
        IF EDICustCrossRef.FIND('-') THEN BEGIN
          EDITradePartner.GET(EDICustCrossRef."Trade Partner No.");
          TradePtnrFound := TRUE;
        END;
      END;
      IF NOT TradePtnrFound THEN
        ERROR(
          Text002,
          ReturnReceiptHeader."Sell-to Customer No.");

      DocumentNo := 'E_SLSRMA';

      EDIDocument.SETRANGE("Trade Partner No.",EDITradePartner."No.");
      EDIDocument.SETFILTER(
        Status,'%1|%2',EDIDocument.Status::Test,EDIDocument.Status::Production);
      EDIDocument.SETRANGE("Navision Document",DocumentNo);
      EDIDocument.SETRANGE(Type,EDIDocument.Type::Export);
      IF NOT EDIDocument.FIND('-') THEN
        ERROR(
          Text003,
          ReturnReceiptHeader."Bill-to Customer No.",DocumentNo);
      XMLDoc := EDIDocument."XML Document";

      IF EDIDocument."Packaged Map" THEN BEGIN
        IF EDIPackageMapIntegration.EDISendReturnReceipt(ReturnReceiptHeader) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE)
      END;

      EDIDocument.CALCFIELDS("Element Mapping Error","Conditional Mapping Error");
      IF EDIDocument."Element Mapping Error" OR EDIDocument."Conditional Mapping Error" THEN
        ERROR(
          Text004,
          EDIDocument."Navision Document",EDIDocument."Trade Partner No.");

      EDITemplate.GET(EDIDocument."EDI Template Code");

      EDISendDocHdr."Internal Doc No." := ReturnReceiptHeader."EDI Internal Doc. No.";
      EDISendDocHdr."Navision Document" := DocumentNo;
      EDISendDocHdr."Document No." := ReturnReceiptHeader."No.";
      EDISend.CreateSendHdr(EDITradePartner,EDIDocument,EDISendDocHdr);

      ReadHdrAssocTables;

      CLEAR(ReceiptLineNoArray);
      LineNumber := 0;
      ReceiptNetShipWeight := 0;
      ReceiptGrossShipWeight := 0;
      ReceiptTotalUnits := 0;
      ReceiptTotalBaseUnits := 0;
      TotalSegments := 0;

      IF NOT GetFirstReceiptLine THEN
        ERROR(Text005,ReturnReceiptHeader."No.");

      ReadLineAssocTables;

      CreateSegments;

      IF XMLDoc THEN
        EDIXMLManagement.ResponseIDSubstitution(EDISendDocHdr);

      EXIT(TRUE);
    END;

    PROCEDURE CreateSegments@1240020004();
    VAR
      NodeOnly@1240020000 : Boolean;
      CreateNode@1240020001 : Boolean;
    BEGIN
      EDISegment.SETRANGE("Trade Partner No.",EDIDocument."Trade Partner No.");
      EDISegment.SETRANGE("Navision Document",EDIDocument."Navision Document");
      EDISegment.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
      EDISegment.SETRANGE(Version,EDIDocument.Version);
      EDISegment.SETRANGE(Type,EDIDocument.Type);
      IF NOT EDISegment.FIND('-') THEN
        ERROR(
          Text006,
          EDIDocument."Trade Partner No.");
      REPEAT
        CASE EDISegment."Segment Type" OF
          EDISegment."Segment Type"::Command:
            BEGIN
              IF (EDISegment.Segment = 'LINE BEGIN') OR
                 (EDISegment."Node Name" = 'LINE BEGIN')
               THEN BEGIN
                EDISegment2.COPY(EDISegment);
                ProcessingLines := TRUE;
              END;
              IF (EDISegment.Segment = 'LINE END') OR
                 (EDISegment."Node Name" = 'LINE END')
              THEN BEGIN
                IF NOT ProcessingLines THEN
                  ERROR(Text007);
                IF GetNextReceiptLine THEN BEGIN
                  ReadLineAssocTables;
                  EDISegment.GET(
                    EDISegment2."Trade Partner No.",EDISegment2."Navision Document",
                    EDISegment2."EDI Document No.",EDISegment2.Version,
                    EDISegment2.Type,EDISegment2."Processing Sequence",EDISegment2.Segment);
                END;
              END;
            END;
          EDISegment."Segment Type"::Segment:
            BEGIN
              LoopFinished := TRUE;
              BypassSegment := FALSE;
              NodeOnly := FALSE;
              CreateNode := TRUE;
              EDIElement.SETRANGE("Trade Partner No.",EDISegment."Trade Partner No.");
              EDIElement.SETRANGE("Navision Document",EDISegment."Navision Document");
              EDIElement.SETRANGE("EDI Document No.",EDISegment."EDI Document No.");
              EDIElement.SETRANGE(Version,EDISegment.Version);
              EDIElement.SETRANGE(Type,EDISegment.Type);
              EDIElement.SETRANGE(Segment,EDISegment.Segment);
              IF NOT EDIElement.FIND('-') THEN BEGIN
                IF XMLDoc THEN BEGIN
                  EDISegment.CALCFIELDS("Has Attributes","Node Text");
                  IF EDISegment."Node Text" OR EDISegment."Has Attributes" THEN
                    ERROR(
                      Text008,
                        EDISegment."Trade Partner No.",EDISegment."Navision Document",
                        EDISegment.Version,EDISegment."Node Name")
                  ELSE
                    NodeOnly := TRUE;
                END ELSE
                  ERROR(
                    Text008,
                      EDISegment."Trade Partner No.",EDISegment."Navision Document",
                      EDISegment.Version,EDISegment.Segment);
              END ELSE
                IF XMLDoc AND EDIElement."Node Text" THEN
                  CreateNode := FALSE;
              IF (XMLDoc = FALSE) OR (XMLDoc AND NodeOnly = FALSE) THEN BEGIN
                TotalSegments := TotalSegments + 1;
                CLEAR(OutFldArray);
                CLEAR(OutLenArray);
                CLEAR(OutErrorArray);
                CLEAR(EDIElementArray);
                i := 1;
                LoopCnt := 1;
                REPEAT
                  ReverseCrossRefArray[i] := '';
                  ReverseCrossReference := EDIElement."Reverse Cross Reference";
                  IF ((EDIElement."Fixed Value" <> '') AND (XMLDoc = FALSE)) OR
                     ((EDIElement."XML Fixed Value" <> '') AND (XMLDoc))
                  THEN BEGIN
                    IF XMLDoc THEN
                      OutFldArray[i] := EDIElement."XML Fixed Value"
                    ELSE
                      OutFldArray[i] := EDIElement."Fixed Value";
                  END ELSE
                    CASE EDIElement.Origin OF
                      EDIElement.Origin::Navision:
                        BEGIN
                          LoadDBFields;
                          IF ReverseCrossReference THEN BEGIN
                            CLEAR(EDIGetReverseCrossRef);
                            ReverseCrossRefArray[i] :=
                              EDIGetReverseCrossRef.GetReverseCrossRef(
                                EDIElement,EDISendDocHdr,OutFldArray[i]);
                              EDIGetReverseCrossRef.FormatOutput(
                                EDISendDocHdr,EDIElement,OutError2,ReverseCrossRefArray,BypassSegment2,i);
                          END;
                        END;
                      EDIElement.Origin::"EDI In":
                        EDIFormat.LoadEDIInFields(
                          EDIElement,ReturnReceiptHeader."EDI Internal Doc. No.",
                          ReturnReceiptLine."EDI Segment Group",ProcessingLines,i,OutFldArray,
                          BooleanVariable,DateVariable,DecimalVariable,IntegerVariable,TimeVariable,
                          DateTimeVariable);
                      EDIElement.Origin::"EDI Out":
                        LoadEDIOutFields;
                    END;
                  OutLenArray[i] := EDIElement.Length;
                  EDIFormat.FormatOutput(
                    EDITemplate,EDIElement,OutFldArray,OutErrorArray,i,BypassSegment,
                    BooleanVariable,DateVariable,DecimalVariable,IntegerVariable,TimeVariable,
                    DateTimeVariable);
                  EDIElementArray[i].COPY(EDIElement);
                  i := i + 1;
                UNTIL EDIElement.NEXT = 0;
              END;
              NewSegment := TRUE;
              i := 1;
              IF ReverseCrossReference THEN
                BypassSegment := BypassSegment2;
              IF (LoopCnt = 1) AND (EDISegment."Repeat Segment") THEN BEGIN
                RepeatSegment;
                LoopCnt := LoopCnt + 1;
              END;
              IF (NOT BypassSegment) AND (NOT OutputOff) THEN BEGIN
                IF XMLDoc AND CreateNode THEN BEGIN
                  EDISend.CreateSendLine(
                    EDISendDocHdr,EDIElementArray[i],OutFldArray[i],OutLenArray[i],OutErrorArray[i],
                    NewSegment,ReverseCrossRefValue,EDIDocument,TRUE,EDISegment);
                  NewSegment := FALSE;
                END;
                IF (XMLDoc = FALSE) OR (XMLDoc AND NodeOnly = FALSE) THEN
                  REPEAT
                    ReverseCrossRefValue := ReverseCrossRefArray[i];
                    EDISend.CreateSendLine(
                      EDISendDocHdr,EDIElementArray[i],OutFldArray[i],OutLenArray[i],OutErrorArray[i],
                      NewSegment,ReverseCrossRefValue,EDIDocument,FALSE,EDISegment);
                    NewSegment := FALSE;
                    i := i + 1;
                  UNTIL OutLenArray[i] = 0
              END ELSE
                TotalSegments := TotalSegments - 1;
            END;
        END;
        IF (EDISegment."Repeat Segment") AND (NOT LoopFinished) THEN BEGIN
          GetNextRecord;
          EDISegment.NEXT(-1);
       END;
      UNTIL EDISegment.NEXT = 0;

      IF EDISetup."Send Document Error" THEN BEGIN
        EDISendDocHdr.CALCFIELDS("Data Error");
        IF EDISendDocHdr."Data Error" THEN BEGIN
          CLEAR(CreateEDIAlert);
          CreateEDIAlert.CreateAlertSendDocError(EDISendDocHdr."No.",1,FALSE);
        END;
      END;

      ReturnReceiptHeader."EDI Return Receipt Generated" := TRUE;
      ReturnReceiptHeader."EDI Return Receipt Gen. Date" := TODAY;
      ReturnReceiptHeader.MODIFY;
    END;

    PROCEDURE UpdateLineTotals@28();
    BEGIN
      IF NOT OutputOff THEN BEGIN
        LineNumber := LineNumber + 1;
        ReceiptTotalUnits := ReceiptTotalUnits + ReturnReceiptLine.Quantity;
        ReceiptTotalBaseUnits := ReceiptTotalBaseUnits + ReturnReceiptLine."Quantity (Base)";
      END;

      ReceiptNetShipWeight :=
        ReceiptNetShipWeight + (ReturnReceiptLine."Net Weight" * ReturnReceiptLine.Quantity);
      ReceiptGrossShipWeight :=
        ReceiptGrossShipWeight + (ReturnReceiptLine."Gross Weight" * ReturnReceiptLine.Quantity);
    END;

    PROCEDURE GetFirstReceiptLine@1240030000() : Boolean;
    BEGIN
      ReturnReceiptLine.RESET;
      ReturnReceiptLine.SETRANGE("Document No.",ReturnReceiptHeader."No.");
      ReturnReceiptLine.SETFILTER("No.",'<>%1','');
      IF NOT EDIDocument."Export Zero Qty. Lines" THEN
        ReturnReceiptLine.SETFILTER(Quantity,'<>%1',0);
      IF ReturnReceiptLine.FIND('-') THEN
        REPEAT
          CASE ReturnReceiptLine.Type OF
            ReturnReceiptLine.Type::"G/L Account":
              IF EDIDocument."Export G/L Account Lines" THEN
                EXIT(TRUE);
            ReturnReceiptLine.Type::Item:
              EXIT(TRUE);
            ReturnReceiptLine.Type::Resource:
              IF EDIDocument."Export Resource Lines" THEN
                EXIT(TRUE);
            ReturnReceiptLine.Type::"Charge (Item)":
              IF EDIDocument."Export Item Charge Lines" THEN
                EXIT(TRUE);
          END;
        UNTIL ReturnReceiptLine.NEXT = 0;
      EXIT(FALSE);
    END;

    PROCEDURE GetNextReceiptLine@1240020000() : Boolean;
    BEGIN
      IF ReturnReceiptLine.NEXT = 0 THEN
        EXIT(FALSE);
      REPEAT
        CASE ReturnReceiptLine.Type OF
          ReturnReceiptLine.Type::"G/L Account":
            IF EDIDocument."Export G/L Account Lines" THEN
              EXIT(TRUE);
          ReturnReceiptLine.Type::Item:
            EXIT(TRUE);
          ReturnReceiptLine.Type::Resource:
            IF EDIDocument."Export Resource Lines" THEN
              EXIT(TRUE);
          ReturnReceiptLine.Type::"Charge (Item)":
            IF EDIDocument."Export Item Charge Lines" THEN
              EXIT(TRUE);
        END;
      UNTIL ReturnReceiptLine.NEXT = 0;
      EXIT(FALSE);
    END;

    PROCEDURE LoadEDIOutFields@16();
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;

      IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN BEGIN
        CASE EDIElement."Field Name" OF
          ELSE BEGIN
            LoadEDIOutVariable;
            LoadEDIOutRecordRef;
            EDILoadEDIOutFields.ReturnReceiptSendEDIOut(
              EDIElement,OutFldArray,DecimalVariable,IntegerVariable,DateVariable,
              BooleanVariable,TimeVariable,DateTimeVariable,i);
          END;
        END;
      END;
    END;

    PROCEDURE LoadDBFields@23();
    BEGIN
      CASE EDIElement."NAV Table No." OF
        3:
          BEGIN
            RecRef.OPEN(3);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(PaymentTerms);
          END;
        10:
          BEGIN
            RecRef.OPEN(10);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShipmentMethod);
          END;
        27:
          BEGIN
            RecRef.OPEN(27);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(Item);
          END;
        44:
          BEGIN
            RecRef.OPEN(44);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesCommentLine);
         END;
        79:
          BEGIN
            RecRef.OPEN(79);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(CompanyInformation);
          END;
        222:
          BEGIN
            RecRef.OPEN(222);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShiptoAddress);
          END;
        291:
          BEGIN
            RecRef.OPEN(291);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShippingAgent);
          END;
        5404:
          BEGIN
            RecRef.OPEN(5404);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ItemUnitOfMeasure);
          END;
        5717:
          BEGIN
            RecRef.OPEN(5717);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ItemCrossReference);
          END;
        6660:
          BEGIN
            RecRef.OPEN(6660);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ReturnReceiptHeader);
          END;
        6661:
          BEGIN
            RecRef.OPEN(6661);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ReturnReceiptLine);
          END;
        10018:
          BEGIN
            RecRef.OPEN(18);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SelltoCustomer);
          END;
        10019:
          BEGIN
            RecRef.OPEN(18);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(BilltoCustomer);
          END;
         19009:
          BEGIN
            RecRef.OPEN(9);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SelltoCountry);
          END;
        19010:
          BEGIN
            RecRef.OPEN(9);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(BilltoCountry);
          END;
        19011:
          BEGIN
            RecRef.OPEN(9);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShiptoCountry);
          END;
        19012:
          BEGIN
            RecRef.OPEN(9);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShipfromCountry);
          END;
        14000603:
          BEGIN
            RecRef.OPEN(14000603);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(PostedReceive);
          END;
        14000822:
          BEGIN
            RecRef.OPEN(14000822);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(BillOfLading);
          END;
        14002350:
          BEGIN
            RecRef.OPEN(14002350);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDITemplate);
          END;
        14002353:
          BEGIN
            RecRef.OPEN(14002353);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDIDocument);
          END;
        14002354:
          BEGIN
            RecRef.OPEN(14002354);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDISegment);
          END;
        14002360:
          BEGIN
            RecRef.OPEN(14002360);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDITradePartner);
          END;
        14002364:
          BEGIN
            RecRef.OPEN(14002364);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDITradePtnrItem);
          END;
          14002369:
          BEGIN
            RecRef.OPEN(14002369);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDISendDocHdr);
          END;
        ELSE
          EXIT;
      END;
      EDILoadDBFields.LoadDBFields(
        EDIElement,OutFldArray,DecimalVariable,IntegerVariable,DateVariable,
        BooleanVariable,TimeVariable,DateTimeVariable,i,RecRef);
      RecRef.CLOSE;
    END;

    PROCEDURE ReadHdrAssocTables@26();
    BEGIN
      EDITemplate.GET(EDIDocument."EDI Template Code");

      CompanyInformation.GET;

      PaymentTerms.INIT;
      IF ReturnReceiptHeader."Payment Terms Code" <> '' THEN BEGIN
        PaymentTerms.GET(ReturnReceiptHeader."Payment Terms Code");
        PmtDiscPercent := PaymentTerms."Discount %";
      END ELSE BEGIN
        PmtDiscPercent := 0;
      END;

      SelltoCustomer.GET(ReturnReceiptHeader."Sell-to Customer No.");

      BilltoCustomer.GET(ReturnReceiptHeader."Bill-to Customer No.");

      ShiptoAddress.INIT;
      IF ReturnReceiptHeader."Ship-to Code" <> '' THEN
        ShiptoAddress.GET(
          ReturnReceiptHeader."Sell-to Customer No.",ReturnReceiptHeader."Ship-to Code");

      SalespersonPurchaser.INIT;
      IF ReturnReceiptHeader."Salesperson Code" <> '' THEN BEGIN
        SalespersonPurchaser.SETRANGE(Code,ReturnReceiptHeader."Salesperson Code");
        SalespersonPurchaser.FIND('-');
      END;

      ShipmentMethod.INIT;
      IF ReturnReceiptHeader."Shipment Method Code" <> '' THEN
        ShipmentMethod.GET(ReturnReceiptHeader."Shipment Method Code");

      SalesCommentLine.RESET;
      SalesCommentLine.SETRANGE(
        "Document Type",SalesCommentLine."Document Type"::"Posted Return Receipt");
      SalesCommentLine.SETRANGE("No.",ReturnReceiptHeader."No.");
      IF NOT SalesCommentLine.FIND('-') THEN
        SalesCommentLine.INIT;

      IF NOT Location.GET(ReturnReceiptHeader."Location Code") THEN
        CLEAR(Location);

      IF ReturnReceiptHeader."Sell-to Country/Region Code" <> '' THEN
        IF NOT SelltoCountry.GET(ReturnReceiptHeader."Sell-to Country/Region Code") THEN
          CLEAR(SelltoCountry);

      IF ReturnReceiptHeader."Bill-to Country/Region Code" <> '' THEN
        IF NOT BilltoCountry.GET(ReturnReceiptHeader."Bill-to Country/Region Code") THEN
          CLEAR(BilltoCountry);

      IF ReturnReceiptHeader."Ship-to Country/Region Code" <> '' THEN
        IF NOT ShiptoCountry.GET(ReturnReceiptHeader."Ship-to Country/Region Code") THEN
          CLEAR(ShiptoCountry);

      IF Location."Country/Region Code" <> '' THEN
        IF NOT ShipfromCountry.GET(Location."Country/Region Code") THEN
          CLEAR(ShipfromCountry);

      //
      // Add any other tables associated with the Return Receipt Header here.
      //
    END;

    PROCEDURE ReadLineAssocTables@27();
    BEGIN
      UpdateLineTotals;

      // Get Line supporting data from other tables.
      IF ReturnReceiptLine.Type = ReturnReceiptLine.Type::Item THEN
          IF NOT Item.GET(ReturnReceiptLine."No.") THEN
            Item.INIT;

      IF ReturnReceiptLine.Type = ReturnReceiptLine.Type::Item THEN BEGIN
        IF NOT Item.GET(ReturnReceiptLine."No.") THEN
          Item.INIT;
        IF NOT ItemUnitOfMeasure.GET(
          ReturnReceiptLine."No.",ReturnReceiptLine."Unit of Measure Code")
        THEN
          ItemUnitOfMeasure.INIT;
      END;

      ItemCrossReference.RESET;
      ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
      ItemCrossReference.SETFILTER(
        "Cross-Reference Type",'<>%1|<>%2',ItemCrossReference."Cross-Reference Type"::Vendor,
        ItemCrossReference."Cross-Reference Type"::Customer);
      ItemCrossReference.SETRANGE("Cross-Reference Type No.",'');
      ItemCrossReference.SETRANGE("Item No.",ReturnReceiptLine."No.");
      ItemCrossReference.SETRANGE("Variant Code",ReturnReceiptLine."Variant Code");
        IF NOT ItemCrossReference.FIND('-') THEN
          CLEAR(ItemCrossReference);

      EDITradePtnrItem.RESET;
      EDITradePtnrItem.SETRANGE("Trade Partner No.",EDITradePartner."No.");
      EDITradePtnrItem.SETRANGE("Navision Item No.",ReturnReceiptLine."No.");
      EDITradePtnrItem.SETRANGE("Navision Variant Code",ReturnReceiptLine."Variant Code");
      IF NOT EDITradePtnrItem.FIND('-') THEN
        EDITradePtnrItem.SETRANGE("Navision Variant Code");
      IF NOT EDITradePtnrItem.FIND('-') THEN
        EDITradePtnrItem.INIT;

      EDITradePtnrUOM.RESET;
      EDITradePtnrUOM.SETRANGE("Trade Partner No.",EDITradePartner."No.");
      EDITradePtnrUOM.SETRANGE("Navision Item No.",ReturnReceiptLine."No.");
      EDITradePtnrUOM.SETRANGE("Navision Variant Code",ReturnReceiptLine."Variant Code");
      EDITradePtnrUOM.SETRANGE("Order Unit of Measure",ReturnReceiptLine."Unit of Measure Code");
      IF NOT EDITradePtnrUOM.FIND('-') THEN BEGIN
        EDITradePtnrUOM.SETFILTER("Navision Item No.",'=%1','');
        EDITradePtnrUOM.SETFILTER("Navision Variant Code",'=%1','');
        IF NOT EDITradePtnrUOM.FIND('-') THEN
          CLEAR(EDITradePtnrUOM)
      END;

      //
      // Add any other tables associated with the Return Receipt Line here.
      //
    END;

    PROCEDURE RoundValue@1240030001(DecimalValue@1240030004 : Decimal) RoundedValue : Decimal;
    VAR
      RoundingPrecision@1240030003 : Decimal;
      DecimalPlaces@1240030001 : Integer;
      Decimals@1240030000 : Integer;
      RoundingPrecisionString@1240030002 : Text[20];
    BEGIN
      IF EDIElement."NAV Data Type" = EDIElement."NAV Data Type"::Decimal THEN BEGIN
        Decimals := EDIElement.Decimals;
        DecimalPlaces := 0;
        IF Decimals > 0 THEN BEGIN
          RoundingPrecisionString  := '0.1';
          IF Decimals = 1 THEN
            DecimalPlaces := 1
          ELSE
            DecimalPlaces := Decimals - 1;
          WHILE DecimalPlaces > 0 DO BEGIN
            RoundingPrecisionString := INSSTR(RoundingPrecisionString,'0',3);
            DecimalPlaces := DecimalPlaces - 1;
          END;
        END ELSE
          RoundingPrecisionString := '1';
        EVALUATE(RoundingPrecision,RoundingPrecisionString);
        RoundedValue := ROUND(DecimalValue,RoundingPrecision);
      END;
    END;

    PROCEDURE RepeatSegment@1240030005() : Boolean;
    VAR
      SalesCommentLine2@1240020003 : Record 44;
      PostedReceive2@1240020001 : Record 14000603;
      EDIElement2@1240020002 : Record 14002355;
      LastRecord@1240030002 : Boolean;
      Found@1240020000 : Boolean;
    BEGIN
      LoopFinished := TRUE;
      LastRecord := FALSE;
      Found := FALSE;
      RecordNo := 0;

      EDIElement2.SETRANGE("Trade Partner No.",EDISegment."Trade Partner No.");
      EDIElement2.SETRANGE("Navision Document",EDISegment."Navision Document");
      EDIElement2.SETRANGE("EDI Document No.",EDISegment."EDI Document No.");
      EDIElement2.SETRANGE(Version,EDISegment.Version);
      EDIElement2.SETRANGE(Type,EDISegment.Type);
      EDIElement2.SETRANGE(Segment,EDISegment.Segment);
      IF EDIElement2.FIND('-') THEN
        REPEAT
          CASE EDIElement2.Origin OF
            EDIElement2.Origin::"EDI Out":
              BEGIN
              END;
            EDIElement2.Origin::Navision:
              CASE EDIElement2."NAV Table No." OF
                DATABASE::"Sales Comment Line":
                  BEGIN
                    Found := TRUE;
                    RecordNo := 1;
                    SalesCommentLine2.COPY(SalesCommentLine);
                    IF EDISegment.Maximum <> 0 THEN BEGIN
                      IF NOT BypassSegment THEN
                        RepeatCount := RepeatCount + 1;
                      IF (SalesCommentLine2.NEXT = 0) OR (RepeatCount = EDISegment.Maximum) THEN
                        LastRecord := TRUE
                      ELSE
                        LoopFinished := FALSE;
                    END ELSE BEGIN
                      IF SalesCommentLine2.NEXT = 0 THEN
                        LastRecord := TRUE
                      ELSE
                        LoopFinished := FALSE;
                    END;
                  END;
                DATABASE::"Posted Receive":
                  BEGIN
                    Found := TRUE;
                    RecordNo := 2;
                    PostedReceive2.COPY(PostedReceive);
                    IF EDISegment.Maximum <> 0 THEN BEGIN
                      IF NOT BypassSegment THEN
                        RepeatCount := RepeatCount + 1;
                      IF (PostedReceive2.NEXT = 0) OR (RepeatCount = EDISegment.Maximum) THEN
                        LastRecord := TRUE
                      ELSE
                        LoopFinished := FALSE;
                    END ELSE BEGIN
                      IF PostedReceive2.NEXT = 0 THEN
                        LastRecord := TRUE
                      ELSE
                        LoopFinished := FALSE;
                    END;
                  END;

                // Add additional tables here

              END;
          END;
        UNTIL (EDIElement2.NEXT = 0) OR (Found = TRUE);

      IF LastRecord THEN BEGIN
        LoopFinished := TRUE;
        RecordNo := 0;
        RepeatCount := 0;
      END;
    END;

    PROCEDURE GetNextRecord@1240020002();
    BEGIN
      CASE RecordNo OF
        1:
          SalesCommentLine.NEXT;
        2:
          PostedReceive.NEXT;

        // Add additional tables here

      END;
    END;

    PROCEDURE LoadEDIOutRecordRef@1240020006();
    BEGIN
        RecRef.OPEN(3);
        IF RecRef.FIND('-') THEN BEGIN
          RecRef.GETTABLE(PaymentTerms);
          EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
        END;
        RecRef.CLOSE;

        RecRef.OPEN(10);
        IF RecRef.FIND('-') THEN BEGIN
          RecRef.GETTABLE(ShipmentMethod);
          EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
        END;
        RecRef.CLOSE;

        RecRef.OPEN(18);
        IF RecRef.FIND('-') THEN BEGIN
          RecRef.GETTABLE(SelltoCustomer);
          EDILoadEDIOutFields.SetRecordVariable(RecRef,'Sell-to Customer');
          RecRef.GETTABLE(BilltoCustomer);
          EDILoadEDIOutFields.SetRecordVariable(RecRef,'Bill-to Customer');
        END;
        RecRef.CLOSE;

        RecRef.OPEN(27);
        IF RecRef.FIND('-') THEN BEGIN
          RecRef.GETTABLE(Item);
          EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
        END;
        RecRef.CLOSE;

        RecRef.OPEN(44);
        IF RecRef.FIND('-') THEN BEGIN
          RecRef.GETTABLE(SalesCommentLine);
          EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
        END;
        RecRef.CLOSE;

        RecRef.OPEN(79);
        IF RecRef.FIND('-') THEN BEGIN
          RecRef.GETTABLE(CompanyInformation);
          EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
        END;
        RecRef.CLOSE;

        RecRef.OPEN(222);
        IF RecRef.FIND('-') THEN BEGIN
          RecRef.GETTABLE(ShiptoAddress);
          EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
        END;
        RecRef.CLOSE;

        RecRef.OPEN(291);
        IF RecRef.FIND('-') THEN BEGIN
          RecRef.GETTABLE(ShippingAgent);
          EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
        END;
        RecRef.CLOSE;

        RecRef.OPEN(5404);
        IF RecRef.FIND('-') THEN BEGIN
          RecRef.GETTABLE(ItemUnitOfMeasure);
          EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
        END;
        RecRef.CLOSE;

        RecRef.OPEN(5717);
        IF RecRef.FIND('-') THEN BEGIN
          RecRef.GETTABLE(ItemCrossReference);
          EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
        END;
        RecRef.CLOSE;

        RecRef.OPEN(6660);
        IF RecRef.FIND('-') THEN BEGIN
          RecRef.GETTABLE(ReturnReceiptHeader);
          EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
        END;
        RecRef.CLOSE;

        RecRef.OPEN(6661);
        IF RecRef.FIND('-') THEN BEGIN
          RecRef.GETTABLE(ReturnReceiptLine);
          EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
        END;
        RecRef.CLOSE;

        RecRef.OPEN(14000603);
        IF RecRef.FIND('-') THEN BEGIN
          RecRef.GETTABLE(PostedReceive);
          EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
        END;
        RecRef.CLOSE;

        RecRef.OPEN(14000822);
        IF RecRef.FIND('-') THEN BEGIN
          RecRef.GETTABLE(BillOfLading);
          EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
        END;
        RecRef.CLOSE;

        RecRef.OPEN(14002350);
        IF RecRef.FIND('-') THEN BEGIN
          RecRef.GETTABLE(EDITemplate);
          EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
        END;
        RecRef.CLOSE;

        RecRef.OPEN(14002353);
        IF RecRef.FIND('-') THEN BEGIN
          RecRef.GETTABLE(EDIDocument);
          EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
        END;
        RecRef.CLOSE;

        RecRef.OPEN(14002354);
        IF RecRef.FIND('-') THEN BEGIN
          RecRef.GETTABLE(EDISegment);
          EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
        END;
        RecRef.CLOSE;

        RecRef.OPEN(14002359);
        IF RecRef.FIND('-') THEN BEGIN
          RecRef.GETTABLE(EDISendDocHdr);
          EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
        END;
        RecRef.CLOSE;

        RecRef.OPEN(14002360);
        IF RecRef.FIND('-') THEN BEGIN
          RecRef.GETTABLE(EDITradePartner);
          EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
        END;
        RecRef.CLOSE;

        RecRef.OPEN(14002364);
        IF RecRef.FIND('-') THEN BEGIN
          RecRef.GETTABLE(EDITradePtnrItem);
          EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
        END;
        RecRef.CLOSE;
    END;

    PROCEDURE LoadEDIOutVariable@1240020005();
    BEGIN
      EDILoadEDIOutFields.SetReturnReceiptSendVariable(
        LineNumber,ReceiptTotalUnits,ReceiptTotalBaseUnits,ReceiptNetShipWeight,ReceiptGrossShipWeight,
        TotalSegments);
    END;

    BEGIN
    END.
  }
}

