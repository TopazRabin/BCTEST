OBJECT Codeunit 14000575 Create Procurement Units
{
  OBJECT-PROPERTIES
  {
    Date=03/27/19;
    Time=12:00:00 PM;
    Version List=UBP3.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ProcUnitTmp@1000 : TEMPORARY Record 14000555;
      InvMgtSetup@1001 : Record 14000551;
      Window@1002 : Dialog;

    PROCEDURE ForReplPath@1240030000();
    VAR
      LocProcUnit@1240030001 : Record 14000555;
      LocProcUnit2@1240030002 : Record 14000555;
      InvMgt@1240030008 : Codeunit 14000553;
      ProgWindow@1240030003 : Dialog;
      Text001@1240030004 : TextConst 'ENU=Checking Procurement Units';
      LocationCode@1240030007 : Code[10];
      ProgressCount@1240030006 : Integer;
      TotalCount@1240030005 : Integer;
      i@1240030000 : Integer;
      LogEntryNo@1240030009 : Integer;
      Text002@1240030010 : TextConst 'ENU=Create Proc. Units for Replenishment Path';
    BEGIN
      InvMgt.CreateLogEntry('',Text002,LogEntryNo);
      COMMIT;

      IF GUIALLOWED THEN
        Window.OPEN(Text001 + '\' + '@1@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      LocProcUnit.RESET;
      LocProcUnit.SETCURRENTKEY("Item No.","Replenishment Source Type","Replenishment Source Code","Variant Code","Location Code");
      LocProcUnit.SETRANGE(
        "Replenishment Source Type",LocProcUnit."Replenishment Source Type"::Location);
      LocProcUnit.SETFILTER("Item No.",'<>%1','');
      IF GUIALLOWED THEN
        TotalCount := LocProcUnit.COUNT;
      IF LocProcUnit.FINDSET THEN
        REPEAT
          ProgressCount := ProgressCount + 1;
          IF GUIALLOWED THEN BEGIN
            IF ProgressCount MOD 50 = 0 THEN
              Window.UPDATE(1,ROUND(10000 * (ProgressCount / TotalCount),1));
          END;
          CheckReplPath(LocProcUnit);
        UNTIL LocProcUnit.NEXT = 0;

      ForceFixBrokenLocationLoops;

      IF GUIALLOWED THEN
        Window.CLOSE;

      InvMgt.CloseLogEntry(LogEntryNo,'');
      COMMIT;
    END;

    PROCEDURE CreateProcUnitForDayEnd@1(VAR Location@1001 : Record 14);
    VAR
      InvMgt@1000 : Codeunit 14000553;
      Text000@1009 : TextConst 'ENU=Creating Usage Entries';
      Text001@1008 : TextConst 'ENU=Location';
      Text002@1007 : TextConst 'ENU=Progress';
      Text003@1006 : TextConst 'ENU=Check For New Procurement Units';
      Text004@1005 : TextConst 'ENU=Location';
      Text005@1004 : TextConst 'ENU=Progress Qty. on Hand';
      Text006@1003 : TextConst 'ENU=Neg. Adj. Converted to Sale';
      Text007@1002 : TextConst 'ENU=Consumption Converted to Sale';
      ItemLedgEntry@1045 : Record 32;
      ProcUnit@1040 : Record 14000555;
      Item@1028 : Record 27;
      ItemVariant@1027 : Record 5401;
      ItemCount@1010 : Integer;
      TotalCount@1019 : Integer;
      ProcCount@1018 : Integer;
      UBPLogEntryNo@1015 : Integer;
    BEGIN
      InvMgt.CreateLogEntry(Location.Code,Text000,UBPLogEntryNo);

      ProcUnitTmp.DELETEALL;

      InvMgtSetup.GET;
      IF InvMgtSetup."New Proc. Unit if Purch. Order" OR
         InvMgtSetup."New Proc. Unit if Sales Order" OR
         InvMgtSetup."New Proc. Unit if Serv. Order" OR
         InvMgtSetup."New Proc. Unit if Trans. Order" OR
         InvMgtSetup."New Proc. Unit if Prod. Order" OR
         InvMgtSetup."New Proc. Unit if Assy. Order"
      THEN
        CheckDocuments(Location.Code);


      IF InvMgtSetup."New Proc. Unit if Inv. On-Hand" THEN
        CheckOnHand(Location);

      ProcUnitTmp.RESET;
      IF ProcUnitTmp.FINDSET THEN
        REPEAT
          IF NOT ProcUnit.GET(ProcUnitTmp."Location Code",ProcUnitTmp."Item No.",ProcUnitTmp."Variant Code") THEN BEGIN
            CreateProcUnit(ProcUnitTmp."Location Code",ProcUnitTmp."Item No.",ProcUnitTmp."Variant Code");
            IF ProcUnit.GET(ProcUnitTmp."Location Code", ProcUnitTmp."Item No.", ProcUnitTmp."Variant Code") THEN
              CheckReplPath(ProcUnit);
            IF InvMgtSetup."Summarize Variant Detail" = InvMgtSetup."Summarize Variant Detail"::Always THEN BEGIN
              IF ProcUnit.GET(ProcUnitTmp."Location Code", ProcUnitTmp."Item No.", '') THEN
            CheckReplPath(ProcUnit);
            END;
          END;
        UNTIL ProcUnitTmp.NEXT = 0;
      ProcUnitTmp.DELETEALL;

      InvMgt.CloseLogEntry(UBPLogEntryNo,'');
    END;

    LOCAL PROCEDURE CreateProcUnit@2(CurrLocation@1240030000 : Code[10];CurrItem@1240030001 : Code[50];CurrVariant@1240030002 : Code[10]);
    VAR
      ProcUnit@1000 : Record 14000555;
      UBP@1240020000 : Codeunit 14000564;
    BEGIN
      ProcUnit.INIT;
      ProcUnit."Location Code" := CurrLocation;
      ProcUnit."Item No." := CurrItem;
      ProcUnit."Variant Code" := CurrVariant;
      ProcUnit.SetAutoInsert;
      IF (InvMgtSetup."Summarize Variant Detail" = InvMgtSetup."Summarize Variant Detail"::Always) AND
         (ProcUnit."Variant Code" = '') THEN BEGIN
        ProcUnit.VALIDATE("Summarize Variant Detail",TRUE);
        ProcUnit."Summarize Pending" := TRUE;
        ProcUnit."Preferred Variant" := TRUE;
      END;
      IF (InvMgtSetup."Summarize Variant Detail" = InvMgtSetup."Summarize Variant Detail"::Always) AND
         (ProcUnit."Variant Code" <> '') THEN BEGIN
        ProcUnit."Exclude From Replenishment" := TRUE;
        ProcUnit."Manual Bypass Replenishment" := TRUE;
      END;
      ProcUnit.INSERT(TRUE);

      IF InvMgtSetup."Summarize Variant Detail" = InvMgtSetup."Summarize Variant Detail"::Always THEN BEGIN
        IF ProcUnit."Variant Code" <> '' THEN BEGIN
          IF NOT ProcUnit.GET(ProcUnit."Location Code",ProcUnit."Item No.",'') THEN BEGIN
            ProcUnit.INIT;
            ProcUnit."Location Code" := CurrLocation;
            ProcUnit."Item No." := CurrItem;
            ProcUnit."Variant Code" := '';
            ProcUnit.SetAutoInsert;
            ProcUnit."Summarize Variant Detail" := TRUE;
            ProcUnit."Summarize Pending" := TRUE;
            ProcUnit."Preferred Variant" := TRUE;
            ProcUnit.INSERT(TRUE);
          END;
          END;
        END;
    END;

    LOCAL PROCEDURE CheckProcUnit@1240030002(LocationCode@1240030002 : Code[10];ItemNo@1240030000 : Code[50];VariantNo@1240030001 : Code[10]);
    VAR
      ProcUnit@1000 : Record 14000555;
    BEGIN
      IF ProcUnit.GET(LocationCode,ItemNo,VariantNo) THEN
        EXIT;
      IF ProcUnitTmp.GET(LocationCode,ItemNo,VariantNo) THEN BEGIN
        ProcUnit.COPY(ProcUnitTmp);
        EXIT;
      END;
      ProcUnitTmp.INIT;
      ProcUnitTmp."Location Code" := LocationCode;
      ProcUnitTmp."Item No." := ItemNo;
      ProcUnitTmp."Variant Code" := VariantNo;
      ProcUnitTmp.SETFILTER("Location Filter",LocationCode);
      ProcUnitTmp.CALCFIELDS(Inventory);
      IF ProcUnitTmp.Inventory <> 0 THEN BEGIN
        ProcUnitTmp.SetTemp;
        ProcUnitTmp.SetAutoInsert;
        ProcUnitTmp.INSERT;
        ProcUnit.COPY(ProcUnitTmp);
      END;
    END;

    LOCAL PROCEDURE CheckDocuments@1240030004(CurrLocationCode@1240030000 : Code[10]);
    VAR
      ProcUnit@1000 : Record 14000555;
      ItemVariant@1001 : Record 5401;
      PurchLine@1240030002 : Record 39;
      SalesLine@1240030001 : Record 37;
      ServLine@1240030013 : Record 5902;
      TransLine@1240020000 : Record 5741;
      ProdOrdLine@1240020003 : Record 5406;
      ProdOrdLineComp@1240020004 : Record 5407;
      AssyOrdHeader@1240020011 : Record 900;
      AssyOrdLine@1240020012 : Record 901;
      PurchLineCount@1240030004 : Integer;
      PurchLineProg@1240030005 : Integer;
      SalesLineCount@1240030003 : Integer;
      SalesLineProg@1240030006 : Integer;
      LocText001@1240030007 : TextConst 'ENU=Check Sales Lines';
      LocText002@1240030008 : TextConst 'ENU=Location';
      LocText003@1240030009 : TextConst 'ENU=Progress';
      LocText004@1240030010 : TextConst 'ENU=Check Purchase Lines';
      LocText005@1240030011 : TextConst 'ENU=Location';
      LocText006@1240030012 : TextConst 'ENU=Progress';
      LocText007@1240030014 : TextConst 'ENU=Check Service Lines';
      LocText008@1240030015 : TextConst 'ENU=Location';
      LocText009@1240030016 : TextConst 'ENU=Progress';
      ServLineCount@1240030017 : Integer;
      ServLineProg@1240030018 : Integer;
      TransLineCount@1240020001 : Integer;
      TransLineProg@1240020002 : Integer;
      ProdOrdCount@1240020005 : Integer;
      ProdOrdProg@1240020006 : Integer;
      LocText010@1240020007 : TextConst 'ENU=Check Prod. Lines';
      LocText011@1240020008 : TextConst 'ENU=Check Prod. Comp. Lines';
      LocText012@1240020010 : TextConst 'ENU=Check Assy. Lines';
      LocText013@1240020009 : TextConst 'ENU=Check Assy. Comp. Lines';
      AssyOrdCount@1240020014 : Integer;
      AssyOrdProg@1240020013 : Integer;
    BEGIN
      IF InvMgtSetup."New Proc. Unit if Sales Order" THEN BEGIN
        SalesLine.RESET;
        SalesLine.SETCURRENTKEY("Document Type","Document No.","Location Code");
        SalesLine.SETRANGE("Document Type", SalesLine."Document Type"::Order);
        SalesLine.SETRANGE("Location Code",CurrLocationCode);
        SalesLine.SETRANGE(Type,SalesLine.Type::Item);
        SalesLine.SETFILTER("No.",'<>%1','');
        IF GUIALLOWED THEN BEGIN
          Window.OPEN(
            LocText001 + '\' +
            PADSTR(LocText002,25) + '#1##################\' +
            PADSTR(LocText003,25) + '@2@@@@@@@@@@@@@@@@@@');
          Window.UPDATE(1,CurrLocationCode);
          SalesLineCount := SalesLine.COUNT;
          SalesLineProg := 0;
        END;
        IF SalesLine.FINDSET THEN
          REPEAT
            IF NOT ProcUnit.GET(SalesLine."Location Code",SalesLine."No.",SalesLine."Variant Code") THEN BEGIN
              IF NOT ProcUnitTmp.GET(SalesLine."Location Code",SalesLine."No.",SalesLine."Variant Code") THEN BEGIN
                ProcUnitTmp.INIT;
                ProcUnitTmp."Location Code" := SalesLine."Location Code";
                ProcUnitTmp."Item No." := SalesLine."No.";
                IF SalesLine."Variant Code" <> '' THEN BEGIN
                  ItemVariant.RESET;
                  ItemVariant.SETRANGE("Item No.",SalesLine."No.");
                  IF ItemVariant.FINDSET THEN
                    REPEAT
                      ProcUnitTmp."Variant Code" := ItemVariant.Code;;
                      ProcUnitTmp.SetTemp;
                      ProcUnitTmp.SetAutoInsert;
                      ProcUnitTmp."User ID" := 'UL Create SL';
                      IF ProcUnitTmp.INSERT THEN;
                    UNTIL ItemVariant.NEXT = 0;
                END ELSE BEGIN
                  ProcUnitTmp."Variant Code" := SalesLine."Variant Code";
                  ProcUnitTmp.SetTemp;
                  ProcUnitTmp.SetAutoInsert;
                  ProcUnitTmp."User ID" := 'UL Create SL';
                  IF ProcUnitTmp.INSERT THEN;
                END;
              END;
            END;
            IF GUIALLOWED THEN BEGIN
              SalesLineProg := SalesLineProg + 1;
              IF SalesLineProg MOD 50 = 0 THEN
                Window.UPDATE(2,ROUND(10000 * (SalesLineProg / SalesLineCount),1));
            END;
          UNTIL SalesLine.NEXT = 0;
          IF GUIALLOWED THEN
            Window.CLOSE;
      END;

      IF InvMgtSetup."New Proc. Unit if Purch. Order" THEN BEGIN
        PurchLine.RESET;
        PurchLine.SETCURRENTKEY("Document Type","Document No.","Location Code");
        PurchLine.SETRANGE("Document Type", PurchLine."Document Type"::Order);
        PurchLine.SETRANGE("Location Code",CurrLocationCode);
        PurchLine.SETRANGE(Type,PurchLine.Type::Item);
        PurchLine.SETFILTER("No.",'<>%1','');
        IF GUIALLOWED THEN BEGIN
          Window.OPEN(
            LocText004 + '\' +
            PADSTR(LocText005,25) + '#1##################\' +
            PADSTR(LocText006,25) + '@2@@@@@@@@@@@@@@@@@@');
          Window.UPDATE(1,CurrLocationCode);
          PurchLineCount := PurchLine.COUNT;
          PurchLineProg := 0;
        END;
        IF PurchLine.FINDSET THEN
          REPEAT
            IF NOT ProcUnit.GET(PurchLine."Location Code",PurchLine."No.",PurchLine."Variant Code") THEN BEGIN
              IF NOT ProcUnitTmp.GET(PurchLine."Location Code",PurchLine."No.",PurchLine."Variant Code") THEN BEGIN
                ProcUnitTmp.INIT;
                ProcUnitTmp."Location Code" := PurchLine."Location Code";
                ProcUnitTmp."Item No." := PurchLine."No.";
                IF PurchLine."Variant Code" <> '' THEN BEGIN
                  ItemVariant.RESET;
                  ItemVariant.SETRANGE("Item No.",PurchLine."No.");
                  IF ItemVariant.FINDSET THEN BEGIN
                    REPEAT
                      ProcUnitTmp."Variant Code" := ItemVariant.Code;;
                      ProcUnitTmp.SetTemp;
                      ProcUnitTmp.SetAutoInsert;
                      ProcUnitTmp."User ID" := 'UL Create PO';
                      IF ProcUnitTmp.INSERT THEN;
                    UNTIL ItemVariant.NEXT = 0;
                  END;
                END ELSE BEGIN
                  ProcUnitTmp."Variant Code" := PurchLine."Variant Code";
                  ProcUnitTmp.SetTemp;
                  ProcUnitTmp.SetAutoInsert;
                  ProcUnitTmp."User ID" := 'UL Create PO';
                  IF ProcUnitTmp.INSERT THEN;
                END;
              END;
            END;
            IF GUIALLOWED THEN BEGIN
              PurchLineProg := PurchLineProg + 1;
              IF PurchLineProg MOD 50 = 0 THEN
                Window.UPDATE(2,ROUND(10000 * (PurchLineProg / PurchLineCount),1));
            END;
          UNTIL PurchLine.NEXT = 0;
          IF GUIALLOWED THEN
            Window.CLOSE;
      END;

      IF InvMgtSetup."New Proc. Unit if Serv. Order" THEN BEGIN
        ServLine.RESET;
        ServLine.SETCURRENTKEY(Type,"No.","Variant Code","Location Code");
        ServLine.SETRANGE(Type,ServLine.Type::Item);
        ServLine.SETRANGE("Location Code",CurrLocationCode);
        ServLine.SETFILTER("No.",'<>%1','');
        ServLine.SETFILTER(Quantity,'<>%1',0);
        IF GUIALLOWED THEN BEGIN
          Window.OPEN(
            LocText007 + '\' +
            PADSTR(LocText007,25) + '#1##################\' +
            PADSTR(LocText009,25) + '@2@@@@@@@@@@@@@@@@@@');
          Window.UPDATE(1,CurrLocationCode);
          ServLineCount := ServLine.COUNT;
          ServLineProg := 0;
        END;
        IF ServLine.FINDSET THEN
          REPEAT
            IF NOT ProcUnit.GET(ServLine."Location Code",ServLine."No.",ServLine."Variant Code") THEN BEGIN
              IF NOT ProcUnitTmp.GET(ServLine."Location Code",ServLine."No.",ServLine."Variant Code") THEN BEGIN
                ProcUnitTmp.INIT;
                ProcUnitTmp."Location Code" := ServLine."Location Code";
                ProcUnitTmp."Item No." := ServLine."No.";
                IF ServLine."Variant Code" <> '' THEN BEGIN
                  ItemVariant.RESET;
                  ItemVariant.SETRANGE("Item No.",ServLine."No.");
                  IF ItemVariant.FINDSET THEN BEGIN
                    REPEAT
                      ProcUnitTmp."Variant Code" := ItemVariant.Code;;
                      ProcUnitTmp.SetTemp;
                      ProcUnitTmp.SetAutoInsert;
                      ProcUnitTmp."User ID" := 'UL Create SVL';
                      IF ProcUnitTmp.INSERT THEN;
                    UNTIL ItemVariant.NEXT = 0;
                  END;
                END ELSE BEGIN
                  ProcUnitTmp."Variant Code" := ServLine."Variant Code";
                  ProcUnitTmp.SetTemp;
                  ProcUnitTmp.SetAutoInsert;
                  ProcUnitTmp."User ID" := 'UL Create SVL';
                  IF ProcUnitTmp.INSERT THEN;
                END;
              END;
            END;
            IF GUIALLOWED THEN BEGIN
              ServLineProg := ServLineProg + 1;
              IF ServLineProg MOD 50 = 0 THEN
                Window.UPDATE(2,ROUND(10000 * (ServLineProg / ServLineCount),1));
            END;
          UNTIL ServLine.NEXT = 0;
          IF GUIALLOWED THEN
            Window.CLOSE;
      END;

      //Create Proc Unit based on Transfer To Location
      IF InvMgtSetup."New Proc. Unit if Trans. Order" THEN BEGIN
        TransLine.RESET;
        TransLine.SETRANGE("Transfer-to Code",CurrLocationCode);
        TransLine.SETFILTER("Item No.",'<>%1','');
        IF GUIALLOWED THEN BEGIN
          Window.OPEN(
            LocText004 + '\' +
            PADSTR(LocText005,25) + '#1##################\' +
            PADSTR(LocText006,25) + '@2@@@@@@@@@@@@@@@@@@');
          Window.UPDATE(1,CurrLocationCode);
          TransLineCount := TransLine.COUNT;
          TransLineProg := 0;
        END;
        IF TransLine.FINDSET THEN
          REPEAT
            IF NOT ProcUnit.GET(TransLine."Transfer-to Code",TransLine."Item No.",TransLine."Variant Code") THEN BEGIN
              IF NOT ProcUnitTmp.GET(TransLine."Transfer-to Code",TransLine."Item No.",TransLine."Variant Code") THEN BEGIN
                ProcUnitTmp.INIT;
                ProcUnitTmp."Location Code" := TransLine."Transfer-to Code";
                ProcUnitTmp."Item No." := TransLine."Item No.";
                IF TransLine."Variant Code" <> '' THEN BEGIN
                  ItemVariant.RESET;
                  ItemVariant.SETRANGE("Item No.",TransLine."Item No.");
                  IF ItemVariant.FINDSET THEN BEGIN
                    REPEAT
                      ProcUnitTmp."Variant Code" := ItemVariant.Code;;
                      ProcUnitTmp.SetTemp;
                      ProcUnitTmp.SetAutoInsert;
                      ProcUnitTmp."User ID" := 'UL Create Transfer';
                      ProcUnitTmp.INSERT;
                    UNTIL ItemVariant.NEXT = 0;
                  END;
                END ELSE BEGIN
                  ProcUnitTmp."Variant Code" := TransLine."Variant Code";
                  ProcUnitTmp.SetTemp;
                  ProcUnitTmp.SetAutoInsert;
                  ProcUnitTmp."User ID" := 'UL Create Transfer';
                  ProcUnitTmp.INSERT;
                END;
              END;
            END;
            IF GUIALLOWED THEN BEGIN
              TransLineProg := TransLineProg + 1;
              IF TransLineProg MOD 50 = 0 THEN
                Window.UPDATE(2,ROUND(10000 * (TransLineProg / TransLineCount),1));
            END;
          UNTIL TransLine.NEXT = 0;
          IF GUIALLOWED THEN
            Window.CLOSE;
      END;

      //Create Proc Unit based on Transfer From Location
      IF InvMgtSetup."New Proc. Unit if Trans. Order" THEN BEGIN
        TransLine.RESET;
        TransLine.SETRANGE("Transfer-from Code",CurrLocationCode);
        TransLine.SETFILTER("Item No.",'<>%1','');
        IF GUIALLOWED THEN BEGIN
          Window.OPEN(
            LocText004 + '\' +
            PADSTR(LocText005,25) + '#1##################\' +
            PADSTR(LocText006,25) + '@2@@@@@@@@@@@@@@@@@@');
          Window.UPDATE(1,CurrLocationCode);
          TransLineCount := TransLine.COUNT;
          TransLineProg := 0;
        END;
        IF TransLine.FINDSET THEN
          REPEAT
            IF NOT ProcUnit.GET(TransLine."Transfer-from Code",TransLine."Item No.",TransLine."Variant Code") THEN BEGIN
              IF NOT ProcUnitTmp.GET(TransLine."Transfer-from Code",TransLine."Item No.",TransLine."Variant Code") THEN BEGIN
                ProcUnitTmp.INIT;
                ProcUnitTmp."Location Code" := TransLine."Transfer-from Code";
                ProcUnitTmp."Item No." := TransLine."Item No.";
                IF TransLine."Variant Code" <> '' THEN BEGIN
                  ItemVariant.RESET;
                  ItemVariant.SETRANGE("Item No.",TransLine."Item No.");
                  IF ItemVariant.FINDSET THEN BEGIN
                    REPEAT
                      ProcUnitTmp."Variant Code" := ItemVariant.Code;;
                      ProcUnitTmp.SetTemp;
                      ProcUnitTmp.SetAutoInsert;
                      ProcUnitTmp."User ID" := 'UL Create Transfer';
                      ProcUnitTmp.INSERT;
                    UNTIL ItemVariant.NEXT = 0;
                  END;
                END ELSE BEGIN
                  ProcUnitTmp."Variant Code" := TransLine."Variant Code";
                  ProcUnitTmp.SetTemp;
                  ProcUnitTmp.SetAutoInsert;
                  ProcUnitTmp."User ID" := 'UL Create Transfer';
                  ProcUnitTmp.INSERT;
                END;
              END;
            END;
            IF GUIALLOWED THEN BEGIN
              TransLineProg := TransLineProg + 1;
              IF TransLineProg MOD 50 = 0 THEN
                Window.UPDATE(2,ROUND(10000 * (TransLineProg / TransLineCount),1));
            END;
          UNTIL TransLine.NEXT = 0;
          IF GUIALLOWED THEN
            Window.CLOSE;
      END;


      IF InvMgtSetup."New Proc. Unit if Prod. Order" THEN BEGIN
        ProdOrdLine.SETRANGE("Location Code",CurrLocationCode);
        ProdOrdLine.SETRANGE(Status, ProdOrdLine.Status::Simulated, ProdOrdLine.Status::Released);
        ProdOrdLine.SETFILTER("Item No.",'<>%1','');
        ProdOrdLine.SETFILTER(Quantity,'<>%1',0);
        IF GUIALLOWED THEN BEGIN
          Window.OPEN(
            LocText007 + '\' +
            PADSTR(LocText010,25) + '#1##################\' +
            PADSTR(LocText009,25) + '@2@@@@@@@@@@@@@@@@@@');
          Window.UPDATE(1,CurrLocationCode);
          ProdOrdCount := ProdOrdLine.COUNT;
          ProdOrdProg := 0;
        END;

        IF ProdOrdLine.FINDSET THEN
          REPEAT
            IF NOT ProcUnit.GET(ProdOrdLine."Location Code",ProdOrdLine."Item No.",ProdOrdLine."Variant Code") THEN BEGIN
              IF NOT ProcUnitTmp.GET(ProdOrdLine."Location Code",ProdOrdLine."Item No.",ProdOrdLine."Variant Code") THEN BEGIN
                ProcUnitTmp.INIT;
                ProcUnitTmp."Location Code" := ProdOrdLine."Location Code";
                ProcUnitTmp."Item No." := ProdOrdLine."Item No.";
                IF ProdOrdLine."Variant Code" <> '' THEN BEGIN
                  ItemVariant.RESET;
                  ItemVariant.SETRANGE("Item No.",ProdOrdLine."Item No.");
                  IF ItemVariant.FINDSET THEN BEGIN
                    REPEAT
                      ProcUnitTmp."Variant Code" := ItemVariant.Code;;
                      ProcUnitTmp.SetTemp;
                      ProcUnitTmp.SetAutoInsert;
                      ProcUnitTmp."User ID" := 'UL Create Prod';
                      IF ProcUnitTmp.INSERT THEN;
                    UNTIL ItemVariant.NEXT = 0;
                  END;
                END ELSE BEGIN
                  ProcUnitTmp."Variant Code" := ProdOrdLine."Variant Code";
                  ProcUnitTmp.SetTemp;
                  ProcUnitTmp.SetAutoInsert;
                  ProcUnitTmp."User ID" := 'UL Create Prod';
                  IF ProcUnitTmp.INSERT THEN;
                END;
              END;
            END;
            IF GUIALLOWED THEN BEGIN
              ProdOrdProg := ProdOrdProg + 1;
              IF ProdOrdProg MOD 50 = 0 THEN
                Window.UPDATE(2,ROUND(10000 * (ProdOrdProg / ProdOrdCount),1));
            END;
          UNTIL ProdOrdLine.NEXT = 0;
          IF GUIALLOWED THEN
            Window.CLOSE;

        ProdOrdLineComp.SETRANGE("Location Code",CurrLocationCode);
        ProdOrdLineComp.SETRANGE(Status, ProdOrdLine.Status::Simulated, ProdOrdLine.Status::Released);
        ProdOrdLineComp.SETFILTER("Item No.",'<>%1','');
        ProdOrdLineComp.SETFILTER(Quantity,'<>%1',0);
        IF GUIALLOWED THEN BEGIN
          Window.OPEN(
            LocText007 + '\' +
            PADSTR(LocText011,25) + '#1##################\' +
            PADSTR(LocText009,25) + '@2@@@@@@@@@@@@@@@@@@');
          Window.UPDATE(1,CurrLocationCode);
          ProdOrdCount := ProdOrdLineComp.COUNT;
          ProdOrdProg := 0;
        END;
        IF ProdOrdLineComp.FINDSET THEN
          REPEAT
            IF NOT ProcUnit.GET(ProdOrdLineComp."Location Code",ProdOrdLineComp."Item No.",ProdOrdLineComp."Variant Code") THEN BEGIN
              IF NOT ProcUnitTmp.GET(ProdOrdLineComp."Location Code",ProdOrdLineComp."Item No.",ProdOrdLineComp."Variant Code") THEN BEGIN
                ProcUnitTmp.INIT;
                ProcUnitTmp."Location Code" := ProdOrdLineComp."Location Code";
                ProcUnitTmp."Item No." := ProdOrdLineComp."Item No.";
                IF ProdOrdLineComp."Variant Code" <> '' THEN BEGIN
                  ItemVariant.RESET;
                  ItemVariant.SETRANGE("Item No.",ProdOrdLineComp."Item No.");
                  IF ItemVariant.FINDSET THEN BEGIN
                    REPEAT
                      ProcUnitTmp."Variant Code" := ItemVariant.Code;;
                      ProcUnitTmp.SetTemp;
                      ProcUnitTmp.SetAutoInsert;
                      ProcUnitTmp."User ID" := 'UL Create Prod Comp';
                      IF ProcUnitTmp.INSERT THEN;
                    UNTIL ItemVariant.NEXT = 0;
                  END;
                END ELSE BEGIN
                  ProcUnitTmp."Variant Code" := ProdOrdLineComp."Variant Code";
                  ProcUnitTmp.SetTemp;
                  ProcUnitTmp.SetAutoInsert;
                  ProcUnitTmp."User ID" := 'UL Create Prod Comp';
                  IF ProcUnitTmp.INSERT THEN;
                END;
              END;
            END;
            IF GUIALLOWED THEN BEGIN
              ProdOrdProg := ProdOrdProg + 1;
              IF ProdOrdProg MOD 50 = 0 THEN
                Window.UPDATE(2,ROUND(10000 * (ProdOrdProg / ProdOrdCount),1));
            END;
          UNTIL ProdOrdLineComp.NEXT = 0;
          IF GUIALLOWED THEN
            Window.CLOSE;
      END;

      IF InvMgtSetup."New Proc. Unit if Assy. Order" THEN BEGIN
        AssyOrdHeader.RESET;
        AssyOrdHeader.SETRANGE("Location Code",CurrLocationCode);
        AssyOrdHeader.SETFILTER("Item No.",'<>%1','');
        AssyOrdHeader.SETFILTER(Quantity,'<>%1',0);
        IF GUIALLOWED THEN BEGIN
          Window.OPEN(
            LocText007 + '\' +
            PADSTR(LocText012,25) + '#1##################\' +
            PADSTR(LocText009,25) + '@2@@@@@@@@@@@@@@@@@@');
          Window.UPDATE(1,CurrLocationCode);
          AssyOrdCount := AssyOrdHeader.COUNT;
          AssyOrdProg := 0;
        END;
        IF AssyOrdHeader.FINDSET THEN
          REPEAT
            IF NOT ProcUnit.GET(AssyOrdHeader."Location Code",AssyOrdHeader."Item No.",AssyOrdHeader."Variant Code") THEN BEGIN
              IF NOT ProcUnitTmp.GET(AssyOrdHeader."Location Code",AssyOrdHeader."Item No.",AssyOrdHeader."Variant Code") THEN BEGIN
                ProcUnitTmp.INIT;
                ProcUnitTmp."Location Code" := AssyOrdHeader."Location Code";
                ProcUnitTmp."Item No." := AssyOrdHeader."Item No.";
                IF AssyOrdHeader."Variant Code" <> '' THEN BEGIN
                  ItemVariant.RESET;
                  ItemVariant.SETRANGE("Item No.",AssyOrdHeader."Item No.");
                  IF ItemVariant.FINDSET THEN BEGIN
                    REPEAT
                      ProcUnitTmp."Variant Code" := ItemVariant.Code;;
                      ProcUnitTmp.SetTemp;
                      ProcUnitTmp.SetAutoInsert;
                      ProcUnitTmp."User ID" := 'UL Create Assy';
                      IF ProcUnitTmp.INSERT THEN;
                    UNTIL ItemVariant.NEXT = 0;
                  END;
                END ELSE BEGIN
                  ProcUnitTmp."Variant Code" := AssyOrdHeader."Variant Code";
                  ProcUnitTmp.SetTemp;
                  ProcUnitTmp.SetAutoInsert;
                  ProcUnitTmp."User ID" := 'UL Create Assy';
                  IF ProcUnitTmp.INSERT THEN;
                END;
              END;
            END;
            IF GUIALLOWED THEN BEGIN
              AssyOrdProg := AssyOrdProg + 1;
              IF AssyOrdProg MOD 50 = 0 THEN
                Window.UPDATE(2,ROUND(10000 * (AssyOrdProg / AssyOrdCount),1));
            END;
          UNTIL AssyOrdHeader.NEXT = 0;
          IF GUIALLOWED THEN
            Window.CLOSE;

        AssyOrdLine.RESET;
        AssyOrdLine.SETRANGE("Location Code",CurrLocationCode);
        AssyOrdLine.SETRANGE(Type, AssyOrdLine.Type::Item);
        AssyOrdLine.SETFILTER("No.",'<>%1','');
        AssyOrdLine.SETFILTER(Quantity,'<>%1',0);
        IF GUIALLOWED THEN BEGIN
          Window.OPEN(
            LocText007 + '\' +
            PADSTR(LocText013,25) + '#1##################\' +
            PADSTR(LocText009,25) + '@2@@@@@@@@@@@@@@@@@@');
          Window.UPDATE(1,CurrLocationCode);
          AssyOrdCount := AssyOrdLine.COUNT;
          AssyOrdProg := 0;
        END;
        IF AssyOrdLine.FINDSET THEN
          REPEAT
            IF NOT ProcUnit.GET(AssyOrdLine."Location Code",AssyOrdLine."No.",AssyOrdLine."Variant Code") THEN BEGIN
              IF NOT ProcUnitTmp.GET(AssyOrdLine."Location Code",AssyOrdLine."No.",AssyOrdLine."Variant Code") THEN BEGIN
                ProcUnitTmp.INIT;
                ProcUnitTmp."Location Code" := AssyOrdLine."Location Code";
                ProcUnitTmp."Item No." := AssyOrdLine."No.";
                IF AssyOrdLine."Variant Code" <> '' THEN BEGIN
                  ItemVariant.RESET;
                  ItemVariant.SETRANGE("Item No.",AssyOrdLine."No.");
                  IF ItemVariant.FINDSET THEN BEGIN
                    REPEAT
                      ProcUnitTmp."Variant Code" := ItemVariant.Code;;
                      ProcUnitTmp.SetTemp;
                      ProcUnitTmp.SetAutoInsert;
                      ProcUnitTmp."User ID" := 'UL Create Assy Comp';
                      IF ProcUnitTmp.INSERT THEN;
                    UNTIL ItemVariant.NEXT = 0;
                  END;
                END ELSE BEGIN
                  ProcUnitTmp."Variant Code" := AssyOrdLine."Variant Code";
                  ProcUnitTmp.SetTemp;
                  ProcUnitTmp.SetAutoInsert;
                  ProcUnitTmp."User ID" := 'UL Create Assy Comp';
                  IF ProcUnitTmp.INSERT THEN;
                END;
              END;
            END;
            IF GUIALLOWED THEN BEGIN
              AssyOrdProg := AssyOrdProg + 1;
              IF AssyOrdProg MOD 50 = 0 THEN
                Window.UPDATE(2,ROUND(10000 * (AssyOrdProg / AssyOrdCount),1));
            END;
          UNTIL AssyOrdLine.NEXT = 0;
          IF GUIALLOWED THEN
            Window.CLOSE;
      END;
    END;

    PROCEDURE CheckReplPath@1240020000(VAR CurrProcUnit@1240020001 : Record 14000555);
    VAR
      LocProcUnit2@1240020000 : Record 14000555;
      i@1240020002 : Integer;
      LocationCode@1240020003 : Code[10];
    BEGIN
      IF (CurrProcUnit."Replenishment Source Type" = CurrProcUnit."Replenishment Source Type"::Location) AND
         (CurrProcUnit."Replenishment Source Code" <> '') THEN BEGIN
        LocationCode := CurrProcUnit."Replenishment Source Code";
        i := 0;
        REPEAT
          i := i + 1;
          IF NOT LocProcUnit2.GET(LocationCode,CurrProcUnit."Item No.",CurrProcUnit."Variant Code") THEN BEGIN
            LocProcUnit2.INIT;
            LocProcUnit2."Location Code" := LocationCode;
            LocProcUnit2."Item No." := CurrProcUnit."Item No.";
            LocProcUnit2."Variant Code" := CurrProcUnit."Variant Code";
            LocProcUnit2."Reforecast Item" := TRUE;
            LocProcUnit2.SetAutoInsert;
            LocProcUnit2.INSERT(TRUE);
            IF LocProcUnit2."Replenishment Source Type" =
              LocProcUnit2."Replenishment Source Type"::Location THEN
                LocationCode := LocProcUnit2."Replenishment Source Code"
            ELSE
              LocationCode := '';
          END ELSE
            LocationCode := '';
          IF i = 12 THEN
            LocationCode := '';
        UNTIL LocationCode = ''
      END;
    END;

    PROCEDURE ForceFixBrokenLocationLoops@1240020007();
    VAR
      LocProcUnit@1240020000 : Record 14000555;
    BEGIN
      LocProcUnit.SETRANGE("Replenishment Source Type",LocProcUnit."Replenishment Source Type"::Location);
      LocProcUnit.SETFILTER("Replenishment Source Code",'=%1','');
      IF NOT LocProcUnit.ISEMPTY THEN BEGIN
        LocProcUnit.MODIFYALL("Replenishment Source Type", LocProcUnit."Replenishment Source Type"::" ");
      END;
    END;

    LOCAL PROCEDURE CheckOnHand@1240020011(VAR CurrLocation@1001 : Record 14);
    VAR
      InvMgt@1000 : Codeunit 14000553;
      Text000@1009 : TextConst 'ENU=Creating Usage Entries';
      Text001@1008 : TextConst 'ENU=Location';
      Text002@1007 : TextConst 'ENU=Progress';
      Text003@1006 : TextConst 'ENU=Check For New Procurement Units';
      Text004@1005 : TextConst 'ENU=Location';
      Text005@1004 : TextConst 'ENU=Progress Qty. on Hand';
      Text006@1003 : TextConst 'ENU=Neg. Adj. Converted to Sale';
      Text007@1002 : TextConst 'ENU=Consumption Converted to Sale';
      ItemLedgEntry@1045 : Record 32;
      ProcUnit@1040 : Record 14000555;
      ProcUnitTmp@1039 : TEMPORARY Record 14000555;
      Item@1028 : Record 27;
      ItemVariant@1027 : Record 5401;
      ItemCount@1010 : Integer;
      TotalCount@1019 : Integer;
      ProcCount@1018 : Integer;
      UBPLogEntryNo@1015 : Integer;
      UBP@1011 : Codeunit 14000564;
    BEGIN
      IF InvMgtSetup."New Proc. Unit if Inv. On-Hand" THEN BEGIN
        IF GUIALLOWED THEN BEGIN
          Window.OPEN(
            Text003 + '\' +
            PADSTR(Text004,25) + '#1##################\' + '\' +
            PADSTR(Text005,25) + '@2@@@@@@@@@@@@@@@@@@');
          TotalCount := Item.COUNT;
          ItemCount := 0;
          Window.UPDATE(1,CurrLocation.Code);
        END;
        IF Item.FINDSET THEN BEGIN
          REPEAT
            ItemVariant.SETRANGE("Item No.",Item."No.");
            IF ItemVariant.FINDSET THEN
              REPEAT
                CheckProcUnit(CurrLocation.Code,ItemVariant."Item No.",ItemVariant.Code);
              UNTIL ItemVariant.NEXT = 0
            ELSE
              CheckProcUnit(CurrLocation.Code,Item."No.",'');
            IF GUIALLOWED THEN BEGIN
              ItemCount := ItemCount + 1;
              IF ItemCount MOD 50 = 0 THEN
                Window.UPDATE(2,ROUND(10000 * (ItemCount / TotalCount),1));
            END;
          UNTIL Item.NEXT = 0;
          IF GUIALLOWED THEN
            Window.CLOSE;
        END;
      END;
    END;

    BEGIN
    END.
  }
}

