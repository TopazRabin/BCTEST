OBJECT Codeunit 23044546 LPM Event Manager
{
  OBJECT-PROPERTIES
  {
    Date=10/07/20;
    Time=10:49:07 AM;
    Version List=LPM2.4.7684.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      cuLPCommon@1000000003 : Codeunit 23044541;
      optSourceDocument@1000000002 : ' ,Purchase Order,Sales Order,Inbound Transfer,Outbound Transfer,Prod. Order,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick,Receipt,Shipment,Reclass';
      cuCommonBase@1000000001 : Codeunit 23044519;
      trecEventParams@1000000000 : TEMPORARY Record 23044511;

    [EventSubscriber(Table,37,OnAfterValidateEvent,"Bin Code")]
    LOCAL PROCEDURE onAfterSalesLineBinCodeValidate@1000000036(VAR Rec@1000000000 : Record 37;VAR xRec@1000000001 : Record 37;CurrFieldNo@1000000002 : Integer);
    BEGIN
      IF Rec."Bin Code" <>xRec."Bin Code" THEN BEGIN
        cuLPCommon.checkSourceChangeBin(optSourceDocument::"Sales Order",
                                        Rec."Document No.",
                                        Rec."Line No.",
                                        Rec."Bin Code");
      END;
    END;

    [EventSubscriber(Table,37,OnAfterValidateEvent,"Qty. to Ship")]
    LOCAL PROCEDURE onAfterSalesLineQtyToShipValidate@1000000037(VAR Rec@1000000000 : Record 37;VAR xRec@1000000001 : Record 37;CurrFieldNo@1000000002 : Integer);
    VAR
      lrecLocation@1000000003 : Record 14;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      IF lrecLocation.GET(Rec."Location Code") THEN;

      IF NOT lrecLocation."Require Pick" THEN BEGIN
        //checks that the quantity to ship is not less than the quantity on the assigned LP
        IF Rec."Qty. to Ship" < xRec."Qty. to Ship" THEN
          cuLPCommon.validateSalesLineQtyChange(Rec, '');
      END;
    END;

    [EventSubscriber(Table,37,OnAfterValidateEvent,"Location Code")]
    LOCAL PROCEDURE onAfterSalesLineLocationCodeValidate@1000000019(VAR Rec@1000000000 : Record 37;VAR xRec@1000000001 : Record 37;CurrFieldNo@1000000002 : Integer);
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      //checks to make sure that an LP does not have an assigned Location code.
      IF Rec."Location Code" <> xRec."Location Code" THEN BEGIN
        cuLPCommon.checkSourceChangeLocation(optSourceDocument::"Sales Order",
                                             Rec."Document No.",
                                             Rec."Line No.",
                                             Rec."Location Code");
      END;
    END;

    [EventSubscriber(Table,39,OnAfterValidateEvent,"Qty. to Receive")]
    LOCAL PROCEDURE onAfterPurchaseLineQtyToReceiveValidate@1000000033(VAR Rec@1000000000 : Record 39;VAR xRec@1000000001 : Record 39;CurrFieldNo@1000000002 : Integer);
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      //checks that the quantity to receive is not less than the quantity on the assigned LP
      IF Rec."Qty. to Receive" < xRec."Qty. to Receive" THEN
        cuLPCommon.validatePurchaseLineQtyChange(Rec, '');
    END;

    [EventSubscriber(Table,5741,OnAfterValidateEvent,"Qty. to Receive")]
    LOCAL PROCEDURE onAfterTransferLineQtyToReceiveValidate@1000000062(VAR Rec@1000000000 : Record 5741;VAR xRec@1000000001 : Record 5741;CurrFieldNo@1000000002 : Integer);
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      //checks that the quantity to receive is not less than the quantity on the assigned LP
      IF Rec."Qty. to Receive" < xRec."Qty. to Receive" THEN
        cuLPCommon.validateTransferLineQtyChange(Rec, '', TRUE);
    END;

    [EventSubscriber(Table,5741,OnAfterValidateEvent,"Qty. to Ship")]
    LOCAL PROCEDURE onAfterTransferLineQtyToShipValidate@1000000063(VAR Rec@1000000000 : Record 5741;VAR xRec@1000000001 : Record 5741;CurrFieldNo@1000000002 : Integer);
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      IF Rec."Qty. to Ship" < xRec."Qty. to Ship" THEN
        cuLPCommon.validateTransferLineQtyChange(Rec, '', TRUE);
    END;

    [EventSubscriber(Codeunit,22,OnBeforePostItemJnlLine)]
    LOCAL PROCEDURE onBeforePostItemJnlLine@1000000014(VAR ItemJournalLine@1000000000 : Record 83);
    BEGIN
      IF (ItemJournalLine."Entry Type" = ItemJournalLine."Entry Type"::Transfer) THEN BEGIN
        cuLPCommon.postReclassLine(ItemJournalLine);
      END;

      IF (ItemJournalLine."Entry Type" = ItemJournalLine."Entry Type"::Output) AND
        (NOT ItemJournalLine.OutputValuePosting) THEN BEGIN
        cuLPCommon.updateLPOutputLine(ItemJournalLine);
      END;
    END;

    [EventSubscriber(Codeunit,22,OnAfterPostItemJnlLine)]
    LOCAL PROCEDURE onAfterPostItemJnlLine@1000000032(VAR ItemJournalLine@1000000000 : Record 83);
    BEGIN
      //Consumes the LP
      IF ItemJournalLine."Entry Type" = ItemJournalLine."Entry Type"::Consumption THEN
        cuLPCommon.consumeLicensePlate(ItemJournalLine."LPM License Plate No.", ItemJournalLine."Item No.",
                                       ItemJournalLine."Variant Code", ItemJournalLine.Quantity);

      IF ItemJournalLine."Entry Type" <> ItemJournalLine."Entry Type"::Transfer THEN
        cuLPCommon.postReclassLine(ItemJournalLine);
    END;

    [EventSubscriber(Codeunit,7304,OnBeforeRegisterLines)]
    LOCAL PROCEDURE onBeforeRegisterWhseItemJnlLines@1000000003(VAR WarehouseJournalLine@1000000000 : Record 7311;VAR TempTrackingSpecification@1000000001 : TEMPORARY Record 336);
    BEGIN
      cuLPCommon.postWhseReclassLine(WarehouseJournalLine); //<IW author="R.Trudeau" date="05/01/19" issue="TFS4551" />
    END;

    [EventSubscriber(Table,111,OnBeforeInsertEvent)]
    LOCAL PROCEDURE onBeforeSalesShipLineInsert@1000000041(VAR Rec@1000000000 : Record 111;RunTrigger@1000000001 : Boolean);
    VAR
      lrecSalesLine@1000000003 : Record 37;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      //post the LP associated with the sales shipment
      lrecSalesLine.SETRANGE("No.", Rec."No.");
      lrecSalesLine.SETRANGE("Document No.", Rec."Order No.");
      lrecSalesLine.SETRANGE("Line No.", Rec."Order Line No.");
      IF lrecSalesLine.FINDFIRST THEN BEGIN
        cuLPCommon.postSalesLine(lrecSalesLine, Rec."Document No.");
      END;
    END;

    [EventSubscriber(Table,121,OnBeforeInsertEvent)]
    LOCAL PROCEDURE onBeforePurchaseReceiptLineInsert@1000000011(VAR Rec@1000000000 : Record 121;RunTrigger@1000000001 : Boolean);
    VAR
      lrecPurchaseLine@1000000003 : Record 39;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      //post the LP associated with the purchase receipt
      lrecPurchaseLine.SETRANGE("No.", Rec."No.");
      lrecPurchaseLine.SETRANGE("Document No.", Rec."Order No.");
      lrecPurchaseLine.SETRANGE("Line No.", Rec."Line No.");
      IF lrecPurchaseLine.FINDFIRST THEN BEGIN
        cuLPCommon.postPurchaseLine(lrecPurchaseLine);
      END;
    END;

    [EventSubscriber(Table,5745,OnAfterInsertEvent)]
    LOCAL PROCEDURE onAfterTransShptLineInsert@1000000012(VAR Rec@1000000000 : Record 5745;RunTrigger@1000000001 : Boolean);
    VAR
      lrecTransferLine@1000000003 : Record 5741;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      //post the LP associated with the transfer shipment
      lrecTransferLine.SETRANGE("Document No.", Rec."Transfer Order No.");
      lrecTransferLine.SETRANGE("Line No.", Rec."Line No.");
      lrecTransferLine.SETRANGE("Item No.", Rec."Item No.");
      IF lrecTransferLine.FINDFIRST THEN BEGIN
        cuLPCommon.postTransferLine(lrecTransferLine, TRUE, Rec."Document No.");
      END;
    END;

    [EventSubscriber(Table,5747,OnBeforeInsertEvent)]
    LOCAL PROCEDURE onBeforeTransRcptLineInsert@1000000013(VAR Rec@1000000000 : Record 5747;RunTrigger@1000000001 : Boolean);
    VAR
      lrecTransferLine@1000000003 : Record 5741;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      //post the LP associated with the transfer receipt
      lrecTransferLine.SETRANGE("Document No.", Rec."Transfer Order No.");
      lrecTransferLine.SETRANGE("Line No.", Rec."Line No.");
      lrecTransferLine.SETRANGE("Item No.", Rec."Item No.");

      IF lrecTransferLine.FINDFIRST THEN BEGIN
          cuLPCommon.postTransferLine(lrecTransferLine, FALSE, '');
      END;
    END;

    [EventSubscriber(Codeunit,80,OnBeforePostSalesDoc)]
    LOCAL PROCEDURE onBeforeSalesOrderPost@1000000074(VAR SalesHeader@1000000000 : Record 36);
    VAR
      lrecWhseRcptLine@1000000001 : Record 7317;
      lrecWhseShipLine@1000000002 : Record 7321;
      liSourceType@1000000004 : Integer;
    BEGIN
      //post the LP associated with the warehouse receipt
      liSourceType := DATABASE::"Sales Line";

      lrecWhseRcptLine.SETRANGE("Source No.", SalesHeader."No.");
      lrecWhseRcptLine.SETRANGE("Source Type", liSourceType);
      IF lrecWhseRcptLine.FINDFIRST THEN BEGIN
        cuLPCommon.postReceiptLine(lrecWhseRcptLine);
      END;

      //post the LP associated with the warehouse shipment
      //lrecWhseShipLine.SETRANGE("Source No.", SalesHeader."No.");
      //lrecWhseShipLine.SETRANGE("Source Type", liSourceType);
      //IF lrecWhseShipLine.FINDFIRST THEN BEGIN
      //  cuLPCommon.postShipmentLine(lrecWhseShipLine);
      //END;
    END;

    [EventSubscriber(Codeunit,90,OnBeforePostPurchaseDoc)]
    LOCAL PROCEDURE onBeforePurchaseOrderPost@1000000075(VAR PurchaseHeader@1000000000 : Record 38);
    VAR
      lrecWhseRcptLine@1000000006 : Record 7317;
      lrecWhseShipLine@1000000001 : Record 7321;
      liSourceType@1000000003 : Integer;
    BEGIN
      liSourceType := DATABASE::"Purchase Line";
      //post the LP associated with the warehouse receipt
      lrecWhseRcptLine.SETRANGE("Source No.", PurchaseHeader."No.");
      lrecWhseRcptLine.SETRANGE("Source Type", liSourceType);
      IF lrecWhseRcptLine.FINDFIRST THEN BEGIN
        cuLPCommon.postReceiptLine(lrecWhseRcptLine);
      END;

      //post the LP associated with the warehouse shipment
      lrecWhseShipLine.SETRANGE("Source No.", PurchaseHeader."No.");
      lrecWhseShipLine.SETRANGE("Source Type", liSourceType);
      IF lrecWhseShipLine.FINDFIRST THEN BEGIN
        cuLPCommon.postShipmentLine(lrecWhseShipLine);
      END;
    END;

    [EventSubscriber(Table,5746,OnAfterInsertEvent)]
    LOCAL PROCEDURE onAfterTransRcptHeaderInsert@1000000083(VAR Rec@1000000000 : Record 5746;RunTrigger@1000000001 : Boolean);
    VAR
      lrecWhseRcptLine@1000000002 : Record 7317;
      liSourceType@1000000004 : Integer;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      liSourceType := DATABASE::"Transfer Line";
      lrecWhseRcptLine.SETRANGE("Source No.", Rec."Transfer Order No.");
      lrecWhseRcptLine.SETRANGE("Source Type", liSourceType);
      IF lrecWhseRcptLine.FINDFIRST THEN BEGIN
        cuLPCommon.postReceiptLine(lrecWhseRcptLine);
      END;
    END;

    [EventSubscriber(Table,5744,OnAfterInsertEvent)]
    LOCAL PROCEDURE onAfterTransShipHeaderInsert@1000000088(VAR Rec@1000000000 : Record 5744;RunTrigger@1000000001 : Boolean);
    VAR
      lrecWhseShipLine@1000000002 : Record 7321;
      liSourceType@1000000004 : Integer;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      //post the LP associated with the warehouse shipment
      liSourceType := DATABASE::"Transfer Line";

      lrecWhseShipLine.SETRANGE("Source No.", Rec."Transfer Order No.");
      lrecWhseShipLine.SETRANGE("Source Type", liSourceType);
      IF lrecWhseShipLine.FINDSET(FALSE) THEN BEGIN
        REPEAT
          cuLPCommon.PostWhseShipmentLine(lrecWhseShipLine);
        UNTIL(lrecWhseShipLine.NEXT=0);
      END;
    END;

    [EventSubscriber(Table,110,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterSalesShipHeaderInsert@1000000001(VAR Rec@1000000001 : Record 110;RunTrigger@1000000000 : Boolean);
    VAR
      lrecWhseShipLine@1000000002 : Record 7321;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      lrecWhseShipLine.SETRANGE("Source No.", Rec."Order No.");
      lrecWhseShipLine.SETRANGE("Source Type", DATABASE::"Sales Line");
      IF lrecWhseShipLine.FINDSET(FALSE) THEN BEGIN
        REPEAT
          cuLPCommon.PostWhseShipmentLine(lrecWhseShipLine);
        UNTIL(lrecWhseShipLine.NEXT=0);
      END;
    END;

    [EventSubscriber(Table,7312,OnBeforeInsertEvent)]
    LOCAL PROCEDURE onBeforeWhseEntryInsert@1000000018(VAR Rec@1000000000 : Record 7312;RunTrigger@1000000001 : Boolean);
    VAR
      lrecWhseJnlLine@1000000002 : Record 7311;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      //post the LP associated with the warehouse reclass
      IF lrecWhseJnlLine.GET(Rec."Journal Template Name",
                             Rec."Journal Batch Name",
                             Rec."Location Code",
                             Rec."Line No.") THEN BEGIN
        cuLPCommon.postWhseReclassLine(lrecWhseJnlLine);
      END;
    END;

    [EventSubscriber(Table,7345,OnAfterInsertEvent)]
    LOCAL PROCEDURE onAfterRegisteredInvtMoveLineInsert@1000000025(VAR Rec@1000000000 : Record 7345;RunTrigger@1000000001 : Boolean);
    VAR
      lrecWhseActivityLine@1000000002 : Record 5767;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      //register the LP associated with the warehouse activity
      lrecWhseActivityLine.SETRANGE("Line No.", Rec."Line No.");
      lrecWhseActivityLine.SETRANGE("Source No.", Rec."Source No.");
      lrecWhseActivityLine.SETRANGE("Source Type", Rec."Source Type");
      lrecWhseActivityLine.SETRANGE("Source Line No.", Rec."Source Line No.");
      IF lrecWhseActivityLine.FINDFIRST THEN BEGIN
        cuLPCommon.registerActivityLine(lrecWhseActivityLine);
      END;
    END;

    [EventSubscriber(Table,5773,OnAfterInsertEvent)]
    LOCAL PROCEDURE onAfterRegisteredWhseActivLineInsert@1000000026(VAR Rec@1000000000 : Record 5773;RunTrigger@1000000001 : Boolean);
    VAR
      lrecWhseActivityLine@1000000002 : Record 5767;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      //register the LP associated with the warehouse activity
      lrecWhseActivityLine.SETRANGE("Line No.", Rec."Line No.");
      lrecWhseActivityLine.SETRANGE("Activity Type", Rec."Activity Type");
      lrecWhseActivityLine.SETRANGE("Source No.", Rec."Source No.");
      lrecWhseActivityLine.SETRANGE("Source Line No.", Rec."Source Line No.");
      IF lrecWhseActivityLine.FINDFIRST THEN BEGIN
        cuLPCommon.registerActivityLine(lrecWhseActivityLine);
      END;
    END;

    [EventSubscriber(Table,83,OnAfterValidateEvent,"Location Code")]
    LOCAL PROCEDURE onAfterItemJnlLineLocationCodeValidate@1000000020(VAR Rec@1000000000 : Record 83;VAR xRec@1000000001 : Record 83;CurrFieldNo@1000000002 : Integer);
    VAR
      liSourceDocType@1000000004 : Integer;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      IF (Rec."Entry Type" = Rec."Entry Type"::Transfer) AND
         (Rec."Location Code" <> xRec."Location Code") THEN BEGIN
          liSourceDocType := optSourceDocument::Reclass;
          cuLPCommon.checkSourceChangeLocation(liSourceDocType,
                                               Rec."Journal Batch Name",
                                               Rec."Line No.",
                                               Rec."Location Code");
        END;
    END;

    [EventSubscriber(Table,83,OnAfterValidateEvent,"Bin Code")]
    LOCAL PROCEDURE onAfterItemJnlLineBinCodeValidate@1000000021(VAR Rec@1000000000 : Record 83;VAR xRec@1000000001 : Record 83;CurrFieldNo@1000000002 : Integer);
    VAR
      liSourceDocType@1000000004 : Integer;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      IF (Rec."Entry Type" = Rec."Entry Type"::Transfer) AND
         (Rec."Bin Code" <> xRec."Bin Code") THEN BEGIN
          liSourceDocType := optSourceDocument::Reclass;
          cuLPCommon.checkSourceChangeBin(liSourceDocType,
                                          Rec."Journal Batch Name",
                                          Rec."Line No.",
                                          Rec."Bin Code");
      END;
    END;

    [EventSubscriber(Table,83,OnAfterValidateEvent,Quantity)]
    LOCAL PROCEDURE onAfterItemJnlLineQtyValidate@1000000022(VAR Rec@1000000000 : Record 83;VAR xRec@1000000001 : Record 83;CurrFieldNo@1000000002 : Integer);
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      IF (Rec."Entry Type" = Rec."Entry Type"::Transfer) AND
         (Rec.Quantity < xRec.Quantity) THEN BEGIN
          cuLPCommon.validateReclassLineQtyChange(Rec);
      END;
    END;

    [EventSubscriber(Table,5767,OnBeforeValidateEvent,"Qty. Handled")]
    LOCAL PROCEDURE onBeforeWhseActLineQtyHandledValidate@1000000080(VAR Rec@1000000000 : Record 5767;VAR xRec@1000000001 : Record 5767;CurrFieldNo@1000000002 : Integer);
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      IF (Rec."Qty. to Handle" < xRec."Qty. to Handle") THEN
        cuLPCommon.validateWhseActivityQtyChange(Rec, '');
    END;

    [EventSubscriber(Table,7321,OnAfterValidateEvent,"Qty. to Ship")]
    LOCAL PROCEDURE onAfterWhseShipLineQtyToShipValidate@1000000048(VAR Rec@1000000000 : Record 7321;VAR xRec@1000000001 : Record 7321;CurrFieldNo@1000000002 : Integer);
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      IF (Rec."Qty. to Ship" < xRec."Qty. to Ship") THEN
        cuLPCommon.validateWhseShipmentQtyChange(Rec, '');
    END;

    [EventSubscriber(Table,7317,OnAfterValidateEvent,"Qty. to Receive")]
    LOCAL PROCEDURE onAfterWhseRcptLineQtyToReceiveValidate@1000000053(VAR Rec@1000000000 : Record 7317;VAR xRec@1000000001 : Record 7317;CurrFieldNo@1000000002 : Integer);
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      IF (Rec."Qty. to Receive" < xRec."Qty. to Receive") THEN
        cuLPCommon.validateWhseReceiptQtyChange(Rec, '');
    END;

    [EventSubscriber(Table,83,OnBeforeDeleteEvent)]
    LOCAL PROCEDURE onBeforeItemJnlLineDelete@1000000057(VAR Rec@1000000000 : Record 83;RunTrigger@1000000001 : Boolean);
    VAR
      liSourceDoc@1000000002 : Integer;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      IF (Rec."Entry Type" = Rec."Entry Type"::Transfer) AND
        (Rec."LPM Action" = Rec."LPM Action"::Delete) THEN BEGIN
          liSourceDoc := optSourceDocument::Reclass;
          cuLPCommon.checkDelete(liSourceDoc, Rec."Journal Batch Name", Rec."Line No.");
      END;
    END;

    [EventSubscriber(Table,5740,OnAfterDeleteEvent)]
    LOCAL PROCEDURE onAfterTransferHeaderDelete@1000000060(VAR Rec@1000000000 : Record 5740;RunTrigger@1000000001 : Boolean);
    VAR
      lrecTransferHeader@1000000002 : Record 5740;
      ltrecEventParam@1000000003 : TEMPORARY Record 23044511;
      liSourceDoc@1000000004 : Integer;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      liSourceDoc := optSourceDocument::"Outbound Transfer";
      cuLPCommon.checkDelete(liSourceDoc, Rec."No.", 0);
    END;

    [EventSubscriber(Table,5741,OnAfterDeleteEvent)]
    LOCAL PROCEDURE onAfterTransferLineDelete@1000000061(VAR Rec@1000000000 : Record 5741;RunTrigger@1000000001 : Boolean);
    VAR
      ltrecEventParam@1000000002 : TEMPORARY Record 23044511;
      liSourceDoc@1000000003 : Integer;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      liSourceDoc := optSourceDocument::"Outbound Transfer";
      cuLPCommon.checkDelete(liSourceDoc, Rec."Document No.", Rec."Line No.");
    END;

    [EventSubscriber(Table,5766,OnAfterDeleteEvent)]
    LOCAL PROCEDURE onAfterWhseActHeaderDelete@1000000064(VAR Rec@1000000000 : Record 5766;RunTrigger@1000000001 : Boolean);
    VAR
      liSourceDoc@1000000003 : Integer;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      CASE Rec.Type OF
        Rec.Type::Pick: liSourceDoc := optSourceDocument::Pick;
        Rec.Type::Movement: liSourceDoc := optSourceDocument::Movement;
        Rec.Type::"Put-away": liSourceDoc := optSourceDocument::"Put-away";
        Rec.Type::"Invt. Pick": liSourceDoc := optSourceDocument::"Invt. Pick";
        Rec.Type::"Invt. Put-away": liSourceDoc := optSourceDocument::"Invt. Put-away";
      END;
      cuLPCommon.checkDelete(liSourceDoc, Rec."No.", 0);
    END;

    [EventSubscriber(Table,5767,OnAfterDeleteEvent)]
    LOCAL PROCEDURE onAfterWhseActLineDelete@1000000065(VAR Rec@1000000000 : Record 5767;RunTrigger@1000000001 : Boolean);
    VAR
      liSourceDoc@1000000003 : Integer;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      CASE Rec."Activity Type" OF
        Rec."Activity Type"::Pick: liSourceDoc := optSourceDocument::Pick;
        Rec."Activity Type"::Movement: liSourceDoc := optSourceDocument::Movement;
        Rec."Activity Type"::"Put-away": liSourceDoc := optSourceDocument::"Put-away";
        Rec."Activity Type"::"Invt. Pick": liSourceDoc := optSourceDocument::"Invt. Pick";
        Rec."Activity Type"::"Invt. Put-away": liSourceDoc := optSourceDocument::"Invt. Put-away";
      END;
      cuLPCommon.checkDelete(liSourceDoc, Rec."No.", Rec."Line No.");
    END;

    [EventSubscriber(Table,36,OnAfterDeleteEvent)]
    LOCAL PROCEDURE onAfterSalesHeaderDelete@1000000066(VAR Rec@1000000000 : Record 36;RunTrigger@1000000001 : Boolean);
    VAR
      liSourceDoc@1000000003 : Integer;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      liSourceDoc := optSourceDocument::"Sales Order";
      cuLPCommon.checkDelete(liSourceDoc, Rec."No.", 0);
    END;

    [EventSubscriber(Table,37,OnAfterDeleteEvent)]
    LOCAL PROCEDURE onAfterSalesLineDelete@1000000067(VAR Rec@1000000000 : Record 37;RunTrigger@1000000001 : Boolean);
    VAR
      liSourceDoc@1000000003 : Integer;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      liSourceDoc := optSourceDocument::"Sales Order";
      cuLPCommon.checkDelete(liSourceDoc, Rec."Document No.", Rec."Line No.");
    END;

    [EventSubscriber(Table,7320,OnAfterDeleteEvent)]
    LOCAL PROCEDURE onAfterWhseShipHeaderDelete@1000000068(VAR Rec@1000000000 : Record 7320;RunTrigger@1000000001 : Boolean);
    VAR
      liSourceDoc@1000000003 : Integer;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      liSourceDoc := optSourceDocument::Shipment;
      cuLPCommon.checkDelete(liSourceDoc, Rec."No.", 0);
    END;

    [EventSubscriber(Table,7321,OnAfterDeleteEvent)]
    LOCAL PROCEDURE onAfterWhseShipLineDelete@1000000069(VAR Rec@1000000000 : Record 7321;RunTrigger@1000000001 : Boolean);
    VAR
      liSourceDoc@1000000003 : Integer;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      liSourceDoc := optSourceDocument::Shipment;
      cuLPCommon.checkDelete(liSourceDoc, Rec."No.", Rec."Line No.");
    END;

    [EventSubscriber(Table,38,OnAfterDeleteEvent)]
    LOCAL PROCEDURE onAfterPurchHeaderDelete@1000000071(VAR Rec@1000000000 : Record 38;RunTrigger@1000000001 : Boolean);
    VAR
      liSourceDoc@1000000003 : Integer;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      liSourceDoc := optSourceDocument::"Purchase Order";
      cuLPCommon.checkDelete(liSourceDoc, Rec."No.", 0);
    END;

    [EventSubscriber(Table,39,OnAfterDeleteEvent)]
    LOCAL PROCEDURE onAfterPurchLineDelete@1000000072(VAR Rec@1000000000 : Record 39;RunTrigger@1000000001 : Boolean);
    VAR
      ltrecEventParam@1000000002 : TEMPORARY Record 23044511;
      liSourceDoc@1000000003 : Integer;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      liSourceDoc := optSourceDocument::"Purchase Order";
      cuLPCommon.checkDelete(liSourceDoc, Rec."Document No.", Rec."Line No.");
    END;

    [EventSubscriber(Table,7316,OnAfterDeleteEvent)]
    LOCAL PROCEDURE onAfterWhseRcptHeaderDelete@1000000073(VAR Rec@1000000000 : Record 7316;RunTrigger@1000000001 : Boolean);
    VAR
      liSourceDoc@1000000003 : Integer;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      liSourceDoc := optSourceDocument::Receipt;
      cuLPCommon.checkDelete(liSourceDoc, Rec."No.", 0);
    END;

    [EventSubscriber(Table,7317,OnAfterDeleteEvent)]
    LOCAL PROCEDURE onAfterWhseRcptLineDelete@1000000076(VAR Rec@1000000000 : Record 7317;RunTrigger@1000000001 : Boolean);
    VAR
      ltrecEventParam@1000000002 : TEMPORARY Record 23044511;
      liSourceDoc@1000000003 : Integer;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      liSourceDoc := optSourceDocument::Receipt;
      cuLPCommon.checkDelete(liSourceDoc, Rec."No.", Rec."Line No.");
    END;

    [EventSubscriber(Table,7311,OnBeforeDeleteEvent)]
    LOCAL PROCEDURE onBeforeWhseJournalLineDelete@1000000078(VAR Rec@1000000000 : Record 7311;RunTrigger@1000000001 : Boolean);
    VAR
      ltrecEventParam@1000000002 : TEMPORARY Record 23044511;
      liSourceDoc@1000000003 : Integer;
    BEGIN
      IF Rec.ISTEMPORARY THEN
        EXIT;

      liSourceDoc := optSourceDocument::Reclass;
      cuLPCommon.checkDeleteWhseReclassLine(liSourceDoc,
                                            Rec."Journal Template Name",
                                            Rec."Journal Batch Name",
                                            Rec."Line No.");
    END;

    [EventSubscriber(Page,99000846,OnAfterActionEvent,miConsumptionConsumeLP)]
    LOCAL PROCEDURE onAfterConsumeLPAction@1000000000(VAR Rec@1000000000 : Record 83);
    VAR
      lrptConsumeLicensePlate@1000000001 : Report 23044524;
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      lrptConsumeLicensePlate.setTemplateBatchName(Rec."Journal Template Name",Rec."Journal Batch Name");
      lrptConsumeLicensePlate.RUNMODAL();
    END;

    [EventSubscriber(Page,393,OnBeforeActionEvent,Post)]
    LOCAL PROCEDURE onBeforePostReclassJnlAction@1000000023(VAR Rec@1000000000 : Record 83);
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      Rec.MODIFYALL("LPM Action", Rec."LPM Action"::Delete);
    END;

    [EventSubscriber(Page,393,OnBeforeActionEvent,Action35)]
    LOCAL PROCEDURE onBeforePostPrintReclassJnlAction@1000000024(VAR Rec@1000000000 : Record 83);
    BEGIN
      IF (Rec.ISTEMPORARY) THEN
        EXIT;

      Rec.MODIFYALL("LPM Action", Rec."LPM Action"::Delete);
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
    }
    END.
  }
}

