OBJECT Codeunit 14123502 ES File Management
{
  OBJECT-PROPERTIES
  {
    Date=05/21/15;
    Time=12:00:00 PM;
    Version List=ES1.41.03;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      StartFieldText@1240520010 : Text[30];
      EndFieldText@1240520009 : Text[30];
      DelimiterText@1240520008 : Text[30];
      Text001@1001 : TextConst 'ENU=Wrong delimiters %1, %2 and %3.';
      Text002@1002 : TextConst 'ENU=Text exceed maximum length %1';
      Text003@1003 : TextConst 'ENU=Wrong format of text line %1';
      Text004@1004 : TextConst 'ENU=Could not evaluate %1.';

    PROCEDURE SetDelimiters@1240520009(NewStartFieldText@1240520010 : Text[30];NewEndFieldText@1240520009 : Text[30];NewDelimiterText@1240520008 : Text[30]);
    BEGIN
      StartFieldText := NewStartFieldText;
      EndFieldText := NewEndFieldText;
      DelimiterText := NewDelimiterText;
    END;

    PROCEDURE FormatValues@1240520029(VAR Value@1240520008 : ARRAY [100] OF Text[1000];NoOfValues@1240520009 : Integer) : Text[1000];
    VAR
      TempText@1240520013 : Text[1000];
      TempText2@1240520002 : Text[1000];
      i@1240520014 : Integer;
      j@1240520001 : Integer;
      ChangedChars@1240520003 : Boolean;
    BEGIN
      IF (StartFieldText = '') OR (EndFieldText = '') OR (DelimiterText = '')
      THEN
        ERROR(Text001,StartFieldText,EndFieldText,DelimiterText);

      FOR i := 1 TO NoOfValues DO BEGIN
        IF STRLEN(TempText) + STRLEN(Value[i]) +
           STRLEN(DelimiterText) + STRLEN(StartFieldText) + STRLEN(EndFieldText) >
           MAXSTRLEN(TempText)
        THEN
          ERROR(Text002,TempText);

        TempText2 := Value[i];
        ChangedChars := FALSE;
        FOR j := 1 TO STRLEN(TempText2) DO BEGIN
          IF TempText2[j] < 32 THEN BEGIN
            TempText2[j] := 32;
            ChangedChars := TRUE;
          END;
        END;
        IF ChangedChars THEN
          Value[i] := TempText2;

        IF i > 1 THEN
          TempText := TempText + DelimiterText;
        TempText := TempText + StartFieldText + Value[i] + EndFieldText;
      END;

      EXIT(TempText);
    END;

    PROCEDURE FormatInteger@1240520013(TempInteger@1240520008 : Integer) : Text[30];
    BEGIN
      EXIT(DELCHR(FORMAT(TempInteger),'=',',.'));
    END;

    PROCEDURE FormatDate@1240520014(TempDate@1240520008 : Date) : Text[30];
    VAR
      Value@1240520009 : ARRAY [3] OF Integer;
      i@1240520011 : Integer;
      ValueText@1240520010 : ARRAY [3] OF Text[30];
    BEGIN
      IF TempDate = 0D THEN
        EXIT('00000000D');

      FOR i := 1 TO 3 DO BEGIN
        Value[i] := DATE2DMY(TempDate,i);
        ValueText[i] := FormatInteger(Value[i]);
        IF STRLEN(ValueText[i]) < 2 THEN
          ValueText[i] := '0' + ValueText[i];
      END;

      EXIT(ValueText[3] + ValueText[2] + ValueText[1] + 'D');
    END;

    PROCEDURE FormatTime@1240520016(TempTime@1240520008 : Time) : Text[30];
    BEGIN
      IF TempTime = 0T THEN
        EXIT('000000T')
      ELSE
        EXIT(FORMAT(TempTime,7,'<Hours24,2><Minutes,2><Seconds,2>T'));
    END;

    PROCEDURE FormatBoolean@1240520015(TempBoolean@1240520008 : Boolean) : Text[30];
    BEGIN
      IF TempBoolean THEN
        EXIT('1')
      ELSE
        EXIT('0');
    END;

    PROCEDURE FormatDateTime@1240520008(TempDateTime@1240520008 : DateTime) : Text[30];
    VAR
      TempDate@1240520012 : Date;
      TempTime@1240520013 : Time;
    BEGIN
      IF TempDateTime = 0DT THEN
        EXIT('0DT');

      TempDate := DT2DATE(TempDateTime);
      TempTime := DT2TIME(TempDateTime);
      EXIT(FormatDate(TempDate) + '-' + FormatTime(TempTime) + '-DT');
    END;

    PROCEDURE SplitInValues@1240520024(VAR Value@1240520008 : ARRAY [100] OF Text[1000];TextLine@1240520009 : Text[1000]);
    VAR
      TempText@1240520013 : Text[1000];
      Pos@1240520014 : Integer;
      ValueCount@1240520015 : Integer;
    BEGIN
      IF (StartFieldText = '') OR (EndFieldText = '') OR (DelimiterText = '') THEN
        ERROR(Text001,StartFieldText,EndFieldText,DelimiterText);

      CLEAR(Value);

      IF TextLine = '' THEN
        EXIT;

      TempText := DELCHR(TextLine,'<>',' ');
      WHILE TempText <> '' DO BEGIN
        IF COPYSTR(TempText,1,STRLEN(StartFieldText)) <> StartFieldText THEN
          ERROR(Text003,TextLine);

        TempText := COPYSTR(TempText,STRLEN(StartFieldText) + 1);
        Pos := STRPOS(TempText,EndFieldText);
        IF Pos = 0 THEN
          ERROR(Text003,TextLine);

        ValueCount := ValueCount + 1;
        Value[ValueCount] := COPYSTR(TempText,1,Pos - 1);

        TempText := COPYSTR(TempText,Pos + STRLEN(EndFieldText));
        IF TempText <> '' THEN BEGIN
          IF COPYSTR(TempText,1,STRLEN(DelimiterText)) <> DelimiterText THEN
            ERROR(Text003,TextLine);
          TempText := COPYSTR(TempText,STRLEN(DelimiterText) + 1);
        END;
      END;
    END;

    PROCEDURE EvaluateInteger@1240520025(TextValue@1240520008 : Text[1000]) : Integer;
    VAR
      TempInt@1240520009 : Integer;
    BEGIN
      IF TextValue = '' THEN
        EXIT(0);

      IF EVALUATE(TempInt,TextValue) THEN
        EXIT(TempInt);

      ERROR(Text004,TextValue);
    END;

    PROCEDURE EvaluateDate@1240520026(TextValue@1240520008 : Text[1000]) : Date;
    VAR
      TempDate@1240520009 : Date;
      TempYear@1240520010 : Integer;
      TempMonth@1240520011 : Integer;
      TempDay@1240520012 : Integer;
    BEGIN
      IF TextValue = '' THEN
        EXIT(0D);

      IF TextValue = '00000000D' THEN
        EXIT(0D);

      IF (COPYSTR(TextValue,STRLEN(TextValue),1) = 'D') AND (STRLEN(TextValue) = 9) THEN BEGIN
        EVALUATE(TempYear,COPYSTR(TextValue,1,4));
        EVALUATE(TempMonth,COPYSTR(TextValue,5,2));
        EVALUATE(TempDay,COPYSTR(TextValue,7,2));
        TempDate :=DMY2DATE(TempDay,TempMonth,TempYear);
        EXIT(TempDate);
      END;

      IF EVALUATE(TempDate,TextValue) THEN
        EXIT(TempDate);

      ERROR(Text004,TextValue);
    END;

    PROCEDURE EvaluateTime@1240520027(TextValue@1240520008 : Text[1000]) : Time;
    VAR
      TempTime@1240520009 : Time;
      TempHour@1240520010 : Integer;
      TempMinute@1240520011 : Integer;
      TempSecond@1240520012 : Integer;
    BEGIN
      IF TextValue = '' THEN
        EXIT(0T);

      IF TextValue = '000000T' THEN
        EXIT(0T);

      IF (COPYSTR(TextValue,STRLEN(TextValue),1) = 'T') AND (STRLEN(TextValue) = 7) THEN BEGIN
        EVALUATE(TempHour,COPYSTR(TextValue,1,2));
        EVALUATE(TempMinute,COPYSTR(TextValue,3,2));
        EVALUATE(TempSecond,COPYSTR(TextValue,5,2));
        TempTime := 000010T + 1000 * (TempHour * 60 * 60 + TempMinute * 60 + TempSecond - 10);
        EXIT(TempTime);
      END;

      IF EVALUATE(TempTime,TextValue) THEN
        EXIT(TempTime);

      ERROR(Text004,TextValue);
    END;

    PROCEDURE EvaluateBoolean@1240520028(TextValue@1240520008 : Text[1000]) : Boolean;
    VAR
      TempBoolean@1240520009 : Boolean;
    BEGIN
      IF TextValue = '' THEN
        EXIT(FALSE);

      IF TextValue = '1' THEN
        EXIT(TRUE);

      IF EVALUATE(TempBoolean,TextValue) THEN
        EXIT(TempBoolean);

      ERROR(Text004,TextValue);
    END;

    PROCEDURE EvaluateDateTime@1240520010(TextValue@1240520008 : Text[1000]) : DateTime;
    VAR
      TempDateTime@1240520010 : DateTime;
      TempDate@1240520009 : Date;
      TempTime@1240520013 : Time;
    BEGIN
      IF TextValue = '' THEN
        EXIT(0DT);

      IF TextValue = '0DT' THEN
        EXIT(0DT);

      IF (COPYSTR(TextValue,STRLEN(TextValue) -2,3) = '-DT') AND (STRLEN(TextValue) = 20) THEN BEGIN
        TempDate := EvaluateDate(COPYSTR(TextValue,1,9));
        TempTime := EvaluateTime(COPYSTR(TextValue,11,7));
        EXIT(CREATEDATETIME(TempDate,TempTime));
      END;

      IF EVALUATE(TempDateTime,TextValue) THEN
        EXIT(TempDateTime);

      ERROR(Text004,TextValue);
    END;

    BEGIN
    END.
  }
}

