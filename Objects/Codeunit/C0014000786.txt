OBJECT Codeunit 14000786 FedEx XML Encoder
{
  OBJECT-PROPERTIES
  {
    Date=07/13/20;
    Time=12:00:00 PM;
    Version List=SE0.62;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ShippingAgentAccount@1240030011 : Record 14000788;
      FedExGlobalRegistration@1240030017 : Record 14000786;
      ShippingAgent@1240030009 : Record 291;
      CurrNode@1240030006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NewChild@1240030005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1240030004 : Text[50];
      NameSpaceURI@1240020001 : Text[50];
      XMLRequestDocument@1240030003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocOut@1240030002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLManagement@1240030007 : Codeunit 14000785;

    PROCEDURE VersionCheck@1240030004(RequestType@1240030001 : Text[64];RequestOption@1240030000 : Text[64]) DocNameSpace : Text[30];
    BEGIN
      CASE RequestType OF
        'RegistrationService':
          DocNameSpace := 'v3';
        'RateService':
          DocNameSpace := 'v16';
        'ShipService':
          DocNameSpace := 'v15';
        'TrackService':
          DocNameSpace := 'v9';
        'CloseService':
          DocNameSpace := 'v3';
        'UploadDocumentService':
          DocNameSpace := 'v11';
        'AddressVerificationService':
          DocNameSpace := 'v3';
        'AddressValidation':
          DocNameSpace := 'v3';
        'ASYNCService':
          DocNameSpace := 'v2';
        'CountryService':
          DocNameSpace := 'v2';
        'LocationsService':
          DocNameSpace := 'v1';
        'OpenShipService':
          DocNameSpace := 'v7';
        'PickupService':
          DocNameSpace := 'v9';
        'ReturnTagService':
          DocNameSpace := 'v1';
        'ValidationAvailabilityAndCommitmentService':
          DocNameSpace := 'v2';
      END;
    END;

    PROCEDURE GetNameSpaceURI@1240020012(RequestType@1240020001 : Text[64];RequestOption@1240020000 : Text[64]) NameSpaceURI : Text[100];
    BEGIN
      CASE RequestType OF
        'RegistrationService':
          NameSpaceURI := 'http://fedex.com/ws/registration/v3';
        'RateService':
          NameSpaceURI := 'http://fedex.com/ws/rate/v16';
        'ShipService':
          NameSpaceURI := 'http://fedex.com/ws/ship/v15';
        'TrackService':
          NameSpaceURI := 'http://fedex.com/ws/track/v9';
        'CloseService':
          NameSpaceURI := 'http://fedex.com/ws/close/v3';
        'UploadDocumentService':
          NameSpaceURI := 'http://fedex.com/ws/uploaddocument/v11';
        'AddressValidation':
          NameSpaceURI := 'http://fedex.com/ws/addressvalidation/v3';
      END;
    END;

    PROCEDURE CreateRequestHeader@1240030000(RequestType@1240030000 : Text[64];RequestOption@1240030006 : Text[64];VAR XMLDOMDocument@1240030001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";ShippingAgentAccount@1240030007 : Record 14000788;FedExGlobalRegistration@1240030013 : Record 14000786;CustomerTransactionId@1240020000 : Text[50]);
    VAR
      VersionServiceID@1240030002 : Text[30];
      VersionMajor@1240030003 : Text[30];
      VersionIntermediate@1240030004 : Text[30];
      VersionMinor@1240030005 : Text[30];
    BEGIN
      NameSpaceURI := GetNameSpaceURI(RequestType,'');

      CASE RequestType OF
        'RegistrationService':
          BEGIN
            CASE RequestOption OF
              'CSPUserRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'RegisterWebCspUserRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'fcas';
                  VersionMajor := '3';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'SubscriptionRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'SubscriptionRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'fcas';
                  VersionMajor := '3';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'VersionCapture':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'VersionCaptureRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'fcas';
                  VersionMajor := '3';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
            END;
          END;
        'RateService':
          BEGIN
            CASE RequestOption OF
              'RateRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'RateRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'crs';
                  VersionMajor := '16';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
            END;
          END;
        'CloseService':
          BEGIN
            CASE RequestOption OF
              'GroundCloseRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'GroundCloseRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'clos';
                  VersionMajor := '3';
                  VersionIntermediate := '1';
                  VersionMinor := '0';
                END;
              'SmartPostCloseRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'SmartPostCloseRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'clos';
                  VersionMajor := '3';
                  VersionIntermediate := '1';
                  VersionMinor := '0';
                END;
              'GroundCloseWithDocumentsRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'GroundCloseWithDocumentsRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'clos';
                  VersionMajor := '3';
                  VersionIntermediate := '1';
                  VersionMinor := '0';
                END;
              'GroundCloseReportsReprintRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'GroundCloseReportsReprintRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'clos';
                  VersionMajor := '3';
                  VersionIntermediate := '1';
                  VersionMinor := '0';
                END;
              'CloseWithDocumentsRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'CloseWithDocumentsRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'clos';
                  VersionMajor := '3';
                  VersionIntermediate := '1';
                  VersionMinor := '0';
                END;
              'ReprintGroundCloseDocumentsRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'ReprintGroundCloseDocumentsRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'clos';
                  VersionMajor := '3';
                  VersionIntermediate := '1';
                  VersionMinor := '0';
                END;
            END;
          END;
        'ShipService':
          BEGIN
            CASE RequestOption OF
              'ProcessShipmentRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'ProcessShipmentRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '15';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'DeleteShipmentRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'DeleteShipmentRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '15';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'ProcessTagRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'ProcessTagRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '15';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'DeleteTagRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'DeleteTagRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '15';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'ValidateShipmentRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'ValidateShipmentRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '15';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
            END;
          END;
        'UploadDocumentService':
          BEGIN
            CASE RequestOption OF
              'UploadDocumentsRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'UploadDocumentsRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'cdus';
                  VersionMajor := '11';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'UploadImagesRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'UploadImagesRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'cdus';
                  VersionMajor := '11';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
            END;
          END;
        'AddressValidation':
          BEGIN
            CASE RequestOption OF
              'AddressValidationRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'AddressValidationRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'aval';
                  VersionMajor := '3';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
            END;
          END;
        'ASYNCService':
          BEGIN
            CASE RequestOption OF
              'RetrieveJobResultsRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'RetrieveJobResultsRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'async';
                  VersionMajor := '2';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
            END;
          END;
        'CountryService':
          BEGIN
            CASE RequestOption OF
              'PostalCodeInquiryRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'PostalCodeInquiryRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'cnty';
                  VersionMajor := '2';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
            END;
          END;
        'LocationsService':
          BEGIN
            CASE RequestOption OF
              'SearchLocationsRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'SearchLocationsRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'locs';
                  VersionMajor := '1';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
            END;
          END;
        'OpenShipService':
          BEGIN
            CASE RequestOption OF
              'AddPackagesToOpenShipmentRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'AddPackagesToOpenShipmentRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '7';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'ConfirmConsolidationRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'ConfirmConsolidationRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '7';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'ConfirmOpenShipmentRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'ConfirmOpenShipmentRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '7';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'CreateConsolidationRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'CreateConsolidationRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '7';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'CreateOpenShipmentRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'CreateOpenShipmentRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '7';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'CreatePendingShipmentRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'CreatePendingShipmentRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '7';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'DeleteOpenConsolidationRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'DeleteOpenConsolidationRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '7';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'DeleteOpenShipmentRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'DeleteOpenShipmentRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '7';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'DeletePackagesFromOpenShipmentRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'DeletePackagesFromOpenShipmentRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '7';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'DeletePendingShipmentRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'DeletePendingShipmentRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '7';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'GetConfirmConsolidationResultsRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'GetConfirmConsolidationResultsRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '7';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'GetConfirmOpenShipmentResultsRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'GetConfirmOpenShipmentResultsRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '7';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'GetCreateOpenShipmentResultsRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'GetCreateOpenShipmentResultsRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '7';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'GetModifyOpenShipmentResultsRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'GetModifyOpenShipmentResultsRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '7';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'ModifyConsolidationRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'ModifyConsolidationRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '7';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'ModifyOpenShipmentRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'ModifyOpenShipmentRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '7';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'ModifyPackageInOpenShipmentRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'ModifyPackageInOpenShipmentRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '7';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'RetrieveConsolidatedCommoditiesRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'RetrieveConsolidatedCommoditiesRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '7';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'RetrieveConsolidationRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'RetrieveConsolidationRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '7';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'RetrieveOpenShipmentRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'RetrieveOpenShipmentRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '7';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'RetrievePackageInOpenShipmentRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'RetrievePackageInOpenShipmentRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '7';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
              'ValidateOpenShipmentRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'ValidateOpenShipmentRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'ship';
                  VersionMajor := '7';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
            END;
          END;
        'PickupService':
          BEGIN
            CASE RequestOption OF
              'CancelPickupRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'CancelPickupRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'disp';
                  VersionMajor := '9';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
            'CreatePickupRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'CreatePickupRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'disp';
                  VersionMajor := '9';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
            'PickupAvailabilityRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'PickupAvailabilityRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'disp';
                  VersionMajor := '9';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
            END;
          END;
        'ReturnTagService':
          BEGIN
            CASE RequestOption OF
              'ExpressTagAvailabilityRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'ExpressTagAvailabilityRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'wsi';
                  VersionMajor := '1';
                  VersionIntermediate := '1';
                  VersionMinor := '0';
                END;
            END;
          END;
        'TrackService':
          BEGIN
            CASE RequestOption OF
              'SendNotificationsRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'SendNotificationsRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'trck';
                  VersionMajor := '9';
                  VersionIntermediate := '1';
                  VersionMinor := '0';
                END;
              'SignatureProofOfDeliveryFaxRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'SignatureProofOfDeliveryRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'trck';
                  VersionMajor := '9';
                  VersionIntermediate := '1';
                  VersionMinor := '0';
                END;
              'SignatureProofOfDeliveryLetterRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'SignatureProofOfDeliveryLetterRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'trck';
                  VersionMajor := '9';
                  VersionIntermediate := '1';
                  VersionMinor := '0';
                END;
              'TrackRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'TrackRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'trck';
                  VersionMajor := '9';
                  VersionIntermediate := '1';
                  VersionMinor := '0';
                END;
            END;
          END;
        'ValidationAvailabilityAndCommitmentService':
          BEGIN
            CASE RequestOption OF
              'ServiceAvailabilityRequest':
                BEGIN
                  XMLManagement.AddElement(CurrNode,'ServiceAvailabilityRequest','',NameSpaceURI,NewChild);
                  VersionServiceID := 'vacs';
                  VersionMajor := '2';
                  VersionIntermediate := '0';
                  VersionMinor := '0';
                END;
            END;
          END;
      END;
      DocNameSpace := NameSpaceURI;
      CurrNode := NewChild;
        XMLManagement.AddElement(CurrNode,'WebAuthenticationDetail','',DocNameSpace,NewChild);
        CurrNode := NewChild;
          XMLManagement.AddElement(CurrNode,'CspCredential','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            XMLManagement.AddElement(CurrNode,'Key','LRg1UKUVeAw40jWH',DocNameSpace,NewChild);
            XMLManagement.AddElement(CurrNode,'Password','6qrZFKyvCbDgRYJYtHpYykICd',DocNameSpace,NewChild);
            CurrNode := CurrNode.ParentNode;
          IF (RequestOption <> 'CSPUserRequest') THEN BEGIN
            XMLManagement.AddElement(CurrNode,'UserCredential','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(
                CurrNode,'Key',FedExGlobalRegistration."User Key",DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'Password',FedExGlobalRegistration."User Password",DocNameSpace,NewChild);
              CurrNode := CurrNode.ParentNode;
          END;
          CurrNode := CurrNode.ParentNode;
        XMLManagement.AddElement(CurrNode,'ClientDetail','',DocNameSpace,NewChild);
        CurrNode := NewChild;
          XMLManagement.AddElement(
            CurrNode,'AccountNumber',ShippingAgentAccount."Account No.",DocNameSpace,NewChild);
          IF FedExGlobalRegistration."Meter Number" <> '' THEN
            XMLManagement.AddElement(
              CurrNode,'MeterNumber',FedExGlobalRegistration."Meter Number",DocNameSpace,NewChild);
          XMLManagement.AddElement(CurrNode,'ClientProductId','BCTH',DocNameSpace,NewChild);
          XMLManagement.AddElement(CurrNode,'ClientProductVersion','1858',DocNameSpace,NewChild);
          XMLManagement.AddElement(CurrNode,'Region','US',DocNameSpace,NewChild);
          CurrNode := CurrNode.ParentNode;
        IF RequestOption = 'GroundCloseWithDocumentsRequest' THEN BEGIN
          XMLManagement.AddElement(CurrNode,'TransactionDetail','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            XMLManagement.AddElement(CurrNode,
              'CustomerTransactionId','OP-950_Close',DocNameSpace,NewChild);
            CurrNode := CurrNode.ParentNode;
        END;
        IF CustomerTransactionId <> '' THEN BEGIN
          XMLManagement.AddElement(CurrNode,'TransactionDetail','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            XMLManagement.AddElement(CurrNode,
              'CustomerTransactionId',CustomerTransactionId,DocNameSpace,NewChild);
            CurrNode := CurrNode.ParentNode;
        END;

        XMLManagement.AddElement(CurrNode,'Version','',DocNameSpace,NewChild);
        CurrNode := NewChild;
          XMLManagement.AddElement(CurrNode,'ServiceId',VersionServiceID,DocNameSpace,NewChild);
          XMLManagement.AddElement(CurrNode,'Major',VersionMajor,DocNameSpace,NewChild);
          XMLManagement.AddElement(CurrNode,'Intermediate',VersionIntermediate,DocNameSpace,NewChild);
          XMLManagement.AddElement(CurrNode,'Minor',VersionMinor,DocNameSpace,NewChild);
          CurrNode := CurrNode.ParentNode;
        IF RequestOption = 'RateRequest' THEN
          XMLManagement.AddElement(CurrNode,'ReturnTransitAndCommit','true',DocNameSpace,NewChild);
    END;

    PROCEDURE CreateRegistrationRequest@1240030007(VAR XMLDOMDocument@1240030001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";CurrentFedExGlobalRegistration@1240030000 : Record 14000786;RequestType@1240030002 : Text[30]);
    BEGIN
      WITH CurrentFedExGlobalRegistration DO BEGIN
        ShippingAgentAccount.GET("Shipper Account No.");

      DocNameSpace := GetNameSpaceURI('RegistrationService','');

        CASE RequestType OF
          'SubscriptionRequest':
            BEGIN
              XMLManagement.AddElement(CurrNode,'CspSolutionId','172',DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'CspType','CERTIFIED_SOLUTION_PROVIDER',DocNameSpace,NewChild);
              XMLManagement.AddElement(CurrNode,'Subscriber','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(
                  CurrNode,'AccountNumber',
                    ShippingAgentAccount."Account No.",DocNameSpace,NewChild);
                XMLManagement.AddElement(CurrNode,'Contact','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(
                    CurrNode,'PersonName',"Shipper Contact",DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'CompanyName',"Shipper Company Name",DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'PhoneNumber',
                      XMLManagement.FixPhoneNo("Shipper Phone Number"),DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'FaxNumber',
                      XMLManagement.FixPhoneNo("Shipper FAX Number"),DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'EMailAddress',"Email Address",DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
                XMLManagement.AddElement(CurrNode,'Address','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                   XMLManagement.AddElement(
                     CurrNode,'StreetLines',"Shipper Address 1",DocNameSpace,NewChild);
                  IF "Shipper Address 2" <> '' THEN
                    XMLManagement.AddElement(
                      CurrNode,'StreetLines',"Shipper Address 2",DocNameSpace,NewChild);
                  XMLManagement.AddElement(CurrNode,'City',"Shipper City",DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'StateOrProvinceCode',
                    XMLManagement.FixState(
                      "Shipper State"),DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'PostalCode',
                    XMLManagement.FixZIPCode(
                      "Shipper ZIP Code"),DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'CountryCode',XMLManagement.GetFedExCountryCode("Shipper Country Code"),
                      DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
              CurrNode := CurrNode.ParentNode;
              XMLManagement.AddElement(CurrNode,'AccountShippingAddress','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(
                  CurrNode,'StreetLines',"Shipper Address 1",DocNameSpace,NewChild);
                IF "Shipper Address 2" <> '' THEN
                  XMLManagement.AddElement(
                    CurrNode,'StreetLines',"Shipper Address 2",DocNameSpace,NewChild);
                XMLManagement.AddElement(CurrNode,'City',"Shipper City",DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'StateOrProvinceCode',
                  XMLManagement.FixState(
                    "Shipper State"),DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'PostalCode',
                  XMLManagement.FixZIPCode(
                    "Shipper ZIP Code"),DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'CountryCode',XMLManagement.GetFedExCountryCode("Shipper Country Code"),
                    DocNameSpace,NewChild);
              CurrNode := CurrNode.ParentNode;
            END;
          'CSPUserRequest':
            BEGIN
              XMLManagement.AddElement(CurrNode,'Categories','SHIPPING',DocNameSpace,NewChild);
              XMLManagement.AddElement(CurrNode,'BillingAddress','',DocNameSpace,NewChild);

              CurrNode := NewChild;
                XMLManagement.AddElement(
                  CurrNode,'StreetLines',"Shipper Address 1",DocNameSpace,NewChild);
                IF "Shipper Address 2" <> '' THEN
                  XMLManagement.AddElement(
                    CurrNode,'StreetLines',"Shipper Address 2",DocNameSpace,NewChild);
                XMLManagement.AddElement(CurrNode,'City',"Shipper City",DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'StateOrProvinceCode',
                  XMLManagement.FixState(
                    "Shipper State"),DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'PostalCode',
                  XMLManagement.FixZIPCode(
                    "Shipper ZIP Code"),DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'CountryCode',"Shipper Country Code",DocNameSpace,NewChild);
              CurrNode := CurrNode.ParentNode;

              XMLManagement.AddElement(CurrNode,'UserContactAndAddress','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(CurrNode,'Contact','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(CurrNode,'PersonName','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(
                      CurrNode,'FirstName',"Billing Contact First Name",DocNameSpace,NewChild);
                    XMLManagement.AddElement(
                      CurrNode,'LastName',"Billing Contact Last Name",DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
                  XMLManagement.AddElement(
                    CurrNode,'CompanyName',"Shipper Company Name",DocNameSpace,NewChild);
                  XMLManagement.AddElement(CurrNode,'PhoneNumber',XMLManagement.
                    FixPhoneNo("Shipper Phone Number"),DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'FaxNumber',XMLManagement.FixPhoneNo(
                      "Shipper FAX Number"),DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'EMailAddress',"Email Address",DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
                XMLManagement.AddElement(CurrNode,'Address','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(
                    CurrNode,'StreetLines',"Shipper Address 1",DocNameSpace,NewChild);
                  IF "Shipper Address 2" <> '' THEN
                    XMLManagement.AddElement(
                      CurrNode,'StreetLines',"Shipper Address 2",DocNameSpace,NewChild);
                  XMLManagement.AddElement(CurrNode,'City',"Shipper City",DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'StateOrProvinceCode',
                    XMLManagement.FixState(
                      "Shipper State"),DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'PostalCode',
                    XMLManagement.FixZIPCode(
                      "Shipper ZIP Code"),DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'CountryCode',XMLManagement.GetFedExCountryCode("Shipper Country Code"),
                      DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
              CurrNode := CurrNode.ParentNode;
            END;
          'VersionCapture':
            BEGIN
              XMLManagement.AddElement(
                CurrNode,'OriginLocationId','LIYA',DocNameSpace,NewChild);
              XMLManagement.AddElement(CurrNode,'VendorProductPlatform','WINXP',DocNameSpace,NewChild);
            END;
        END;
      END;
    END;

    PROCEDURE CreateRateRequest@1240030001();
    BEGIN
      // No Longer Used
      // Rate Request is built within Ship Request Code
    END;

    PROCEDURE CreateSOAPRequest@1240030026(VAR XMLRequest@1240030000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";RequestType@1240030003 : Text[64];BufferFileName@1240030002 : Text[1024]);
    VAR
      XMLProcessingInst@1240020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlProcessingInstruction";
      TempOutFile@1240030001 : File;
      TempOutStream@1240030007 : OutStream;
    BEGIN
      DocNameSpace := VersionCheck(RequestType,'');
      NameSpaceURI := GetNameSpaceURI(RequestType,'');
      XMLRequest := XMLRequestDocument.XmlDocument;

      XMLProcessingInst := XMLRequest.CreateProcessingInstruction('xml','version="1.0" encoding="UTF-8"');
      CurrNode := XMLRequest.AppendChild(XMLProcessingInst);
      CurrNode := XMLRequest.CreateElement('soapenv','Envelope','http://schemas.xmlsoap.org/soap/envelope/');
      NewChild := XMLRequest.AppendChild(CurrNode);
      CurrNode := NewChild;
      XMLManagement.AddAttribute(CurrNode,'xmlns:xsd','http://www.w3.org/2001/XMLSchema',TRUE);
      XMLManagement.AddAttribute(CurrNode,'xmlns:xsi','http://www.w3.org/2001/XMLSchema-instance',TRUE);
      XMLManagement.AddAttribute(CurrNode,'xmlns:s1','http://schemas.xmlsoap.org/wsdl/soap/',TRUE);
      XMLManagement.AddAttribute(CurrNode,'xmlns',NameSpaceURI,TRUE);
      XMLManagement.AddAttribute(CurrNode,'xmlns:soapenv','http://schemas.xmlsoap.org/soap/envelope/',TRUE);
      XMLManagement.AddElement(CurrNode,'soapenv:Body','','http://schemas.xmlsoap.org/soap/envelope/',NewChild);
      CurrNode := NewChild;
    END;

    PROCEDURE CreateDeleteTagRequest@1240030009(ReturnConfirmation@1240030006 : Text[50];ShipperAccountNo@1240020000 : Text[50];VAR XMLDOMDocument@1240030004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";DocNameSpace@1240030000 : Text[30];GiveError@1240030001 : Boolean);
    BEGIN
      XMLManagement.AddElement(CurrNode,'Payment','',DocNameSpace,NewChild);
      CurrNode := NewChild;
        XMLManagement.AddElement(CurrNode,'PaymentType','SENDER',DocNameSpace,NewChild);
        XMLManagement.AddElement(CurrNode,'Payor','',DocNameSpace,NewChild);
        CurrNode := NewChild;
          XMLManagement.AddElement(CurrNode,'ResponsibleParty','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            XMLManagement.AddElement(CurrNode,'AccountNumber',ShipperAccountNo,DocNameSpace,NewChild);
            CurrNode := CurrNode.ParentNode;
          CurrNode := CurrNode.ParentNode;
      CurrNode := CurrNode.ParentNode;
      XMLManagement.AddElement(CurrNode,'ConfirmationNumber',ReturnConfirmation,DocNameSpace,NewChild);
    END;

    PROCEDURE CreateDeleteShipmentRequest@1240030003(ShipTimeStamp@1240030005 : Date;TrackingNumber@1240030006 : Text[50];FormID@1240030003 : Text[50];SmartPost@1240030002 : Boolean;ShippingAgentService@1240030008 : Record 14000708;VAR XMLDOMDocument@1240030004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";DocNameSpace@1240030000 : Text[30];GiveError@1240030001 : Boolean);
    BEGIN
      XMLManagement.AddElement(
        CurrNode,'ShipTimestamp',
        XMLManagement.FormatDateYYYYMMDD(ShipTimeStamp) + 'T' +
          XMLManagement.FormatTime24HRMMSS(TIME) + '-00:00',DocNameSpace,NewChild);

      XMLManagement.AddElement(CurrNode,'TrackingId','',DocNameSpace,NewChild);
      CurrNode := NewChild;
        IF SmartPost THEN BEGIN
          XMLManagement.AddElement(CurrNode,'TrackingIdType','USPS',DocNameSpace,NewChild);
          IF FormID <> '' THEN
            XMLManagement.AddElement(CurrNode,'FormId',FormID,DocNameSpace,NewChild);
        END ELSE
          CASE ShippingAgentService."Transport Method Type" OF
            0:
              XMLManagement.AddElement(CurrNode,'TrackingIdType','EXPRESS',DocNameSpace,NewChild);
            1:
              XMLManagement.AddElement(CurrNode,'TrackingIdType','GROUND',DocNameSpace,NewChild);
            2:
            XMLManagement.AddElement(CurrNode,'TrackingIdType','FREIGHT',DocNameSpace,NewChild);
          END;

        XMLManagement.AddElement(CurrNode,'TrackingNumber',TrackingNumber,DocNameSpace,NewChild);
      CurrNode := CurrNode.ParentNode;

      XMLManagement.AddElement(CurrNode,'DeletionControl','DELETE_ONE_PACKAGE',DocNameSpace,NewChild);
    END;

    PROCEDURE CreateDeletePostedShipRequest@1240030010(TrackingNumber@1240030006 : Text[50];VAR XMLDOMDocument@1240030004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";DocNameSpace@1240030000 : Text[30];GiveError@1240030001 : Boolean);
    BEGIN
      XMLManagement.AddElement(CurrNode,'TrackingNumber',TrackingNumber,DocNameSpace,NewChild);
      XMLManagement.AddElement(CurrNode,'DeletionControl','DELETE_ONE_PACKAGE',DocNameSpace,NewChild);
    END;

    PROCEDURE CreateShippingRequest@1240030017(FedExXMLControl@1240030004 : Record 14000791;FedExXMLControlExt@1240030027 : Record 14000792;FedExXMLControl3@1240020011 : Record 14000796;FedExFreightXMLControl@1240020000 : Record 14000795;VAR XMLDOMDocument@1240030002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";RateRequest@1240030026 : Boolean;ShippingAgentService@1240030003 : Record 14000708;DocNameSpace@1240030001 : Text[50];GiveError@1240030000 : Boolean);
    VAR
      PackagingType@1240030010 : Text[30];
      PackageLine@1240030018 : Record 14000702;
      ServiceType@1240030023 : Text[64];
      ExportDoc@1240030007 : Record 14000981;
      TempSummaryLine@1240030011 : TEMPORARY Record 14000983;
      ShippingSetup@1240020100 : Record 14000707;
      Counter@1240030006 : Integer;
      HazMatItem@1240020003 : Record 14050102;
      HazMatProductClass@1240020004 : Record 14050103;
      FedExManagement@1240020005 : Codeunit 14000785;
      RateShopHeader@1240020001 : Record 14000741;
      RateShopFromOrder@1240020002 : Boolean;
      SalesLine@1240020006 : Record 37;
      Item@1240020007 : Record 27;
      HazMatItemCount@1240020009 : Integer;
      HazMatDescription@1240020008 : Text[1000];
      HazMatRate@1240020010 : Boolean;
      CustRefCount@1240020012 : Integer;
      PackageFilter@1240020013 : Text[1000];
      PackageLineWeight@1240020014 : Decimal;
    BEGIN
      WITH FedExXMLControl DO BEGIN
        ShippingSetup.GET;
        ShippingAgentAccount.GET("Shipper Account No.");
        TESTFIELD("Service Indicator");
        "Smart Post Shipment" := FALSE;
        CASE "World Wide Service" OF
          "World Wide Service"::"1":
            CASE "Service Indicator" OF
              '01':
                ServiceType := 'INTERNATIONAL_PRIORITY';
              '02':
                ServiceType := 'PRIORITY_OVERNIGHT';
              '03':
                ServiceType := 'INTERNATIONAL_ECONOMY';
              '06':
                ServiceType := 'INTERNATIONAL_FIRST';
              '70':
                ServiceType := 'INTERNATIONAL_PRIORITY_FREIGHT';
              '71':
                ServiceType := 'INTERNATIONAL_PRIORITY_DISTRIBUTION';
              '86':
                ServiceType := 'INTERNATIONAL_ECONOMY_FREIGHT';
              '92':
                ServiceType := 'FEDEX_GROUND';
              'FEF1':
                BEGIN
                  ServiceType := 'FEDEX_FREIGHT_ECONOMY';
                  IF FedExXMLControlExt."Physical Packaging Type" <> '' THEN
                    PackagingType := FedExXMLControlExt."Physical Packaging Type"
                  ELSE
                  PackagingType := 'PIECE';
                END;
              'FEF2':
                BEGIN
                  ServiceType := 'FEDEX_FREIGHT_PRIORITY';
                  IF FedExXMLControlExt."Physical Packaging Type" <> '' THEN
                    PackagingType := FedExXMLControlExt."Physical Packaging Type"
                  ELSE
                  PackagingType := 'PIECE';
                END;
            END;
          "World Wide Service"::"0":
            CASE "Service Indicator" OF
              '01':
                BEGIN
                  ServiceType := 'PRIORITY_OVERNIGHT';
                  IF "Package Weight Units" = 'KG' THEN BEGIN
                    "Package Weight Units" := 'LB';
                    "Package Weight" := ShippingSetup.KiloToPound("Package Weight");
                    "Total Shipment Weight" := ShippingSetup.KiloToPound("Total Shipment Weight");
                  END;
                END;
              '03':
                BEGIN
                  ServiceType := 'FEDEX_2_DAY';
                  IF "Package Weight Units" = 'KG' THEN BEGIN
                    "Package Weight Units" := 'LB';
                    "Package Weight" := ShippingSetup.KiloToPound("Package Weight");
                    "Total Shipment Weight" := ShippingSetup.KiloToPound("Total Shipment Weight");
                  END;
                END;
              '05':
                BEGIN
                  ServiceType := 'STANDARD_OVERNIGHT';
                  IF "Package Weight Units" = 'KG' THEN BEGIN
                    "Package Weight Units" := 'LB';
                    "Package Weight" := ShippingSetup.KiloToPound("Package Weight");
                    "Total Shipment Weight" := ShippingSetup.KiloToPound("Total Shipment Weight");
                  END;
                END;
              '06':
                BEGIN
                  ServiceType := 'FIRST_OVERNIGHT';
                  IF "Package Weight Units" = 'KG' THEN BEGIN
                    "Package Weight Units" := 'LB';
                    "Package Weight" := ShippingSetup.KiloToPound("Package Weight");
                    "Total Shipment Weight" := ShippingSetup.KiloToPound("Total Shipment Weight");
                  END;
                END;
              '20':
                BEGIN
                  ServiceType := 'FEDEX_EXPRESS_SAVER';
                  IF "Package Weight Units" = 'KG' THEN BEGIN
                    "Package Weight Units" := 'LB';
                    "Package Weight" := ShippingSetup.KiloToPound("Package Weight");
                    "Total Shipment Weight" := ShippingSetup.KiloToPound("Total Shipment Weight");
                  END;
                END;
              '30':
                BEGIN
                  ServiceType := 'FEDEX_2_DAY_AM';
                  IF "Package Weight Units" = 'KG' THEN BEGIN
                    "Package Weight Units" := 'LB';
                    "Package Weight" := ShippingSetup.KiloToPound("Package Weight");
                    "Total Shipment Weight" := ShippingSetup.KiloToPound("Total Shipment Weight");
                  END;
                END;
              '70':
                BEGIN
                  ServiceType := 'FEDEX_1_DAY_FREIGHT';
                  IF "Package Weight Units" = 'KG' THEN BEGIN
                    "Package Weight Units" := 'LB';
                    "Package Weight" := ShippingSetup.KiloToPound("Package Weight");
                    "Total Shipment Weight" := ShippingSetup.KiloToPound("Total Shipment Weight");
                  END;
                END;
              '71':
                BEGIN
                  ServiceType := 'FEDEX_FIRST_FREIGHT';
                  IF "Package Weight Units" = 'KG' THEN BEGIN
                    "Package Weight Units" := 'LB';
                    "Package Weight" := ShippingSetup.KiloToPound("Package Weight");
                    "Total Shipment Weight" := ShippingSetup.KiloToPound("Total Shipment Weight");
                  END;
                END;
              '80':
                BEGIN
                  ServiceType := 'FEDEX_2_DAY_FREIGHT';
                  IF "Package Weight Units" = 'KG' THEN BEGIN
                    "Package Weight Units" := 'LB';
                    "Package Weight" := ShippingSetup.KiloToPound("Package Weight");
                    "Total Shipment Weight" := ShippingSetup.KiloToPound("Total Shipment Weight");
                  END;
                END;
              '83':
                BEGIN
                  ServiceType := 'FEDEX_3_DAY_FREIGHT';
                  IF "Package Weight Units" = 'KG' THEN BEGIN
                    "Package Weight Units" := 'LB';
                    "Package Weight" := ShippingSetup.KiloToPound("Package Weight");
                    "Total Shipment Weight" := ShippingSetup.KiloToPound("Total Shipment Weight");
                  END;
                END;
              '90':
                ServiceType := 'GROUND_HOME_DELIVERY';
              '92':
                ServiceType := 'FEDEX_GROUND';
              'FEF1':
                BEGIN
                  ServiceType := 'FEDEX_FREIGHT_ECONOMY';
                  IF FedExXMLControlExt."Physical Packaging Type" <> '' THEN
                    PackagingType := FedExXMLControlExt."Physical Packaging Type"
                  ELSE
                  PackagingType := 'PIECE';
                END;
              'FEF2':
                BEGIN
                  ServiceType := 'FEDEX_FREIGHT_PRIORITY';
                  IF FedExXMLControlExt."Physical Packaging Type" <> '' THEN
                    PackagingType := FedExXMLControlExt."Physical Packaging Type"
                  ELSE
                  PackagingType := 'PIECE';
                END;
              'SP':
                BEGIN
                ServiceType := 'SMART_POST';
                  "Smart Post Shipment" := TRUE;
                END;
              '110':
                ServiceType := 'SAME_DAY';
              '120':
                ServiceType := 'SAME_DAY_CITY';
            END;
        END;

        XMLManagement.AddElement(CurrNode,'RequestedShipment','',DocNameSpace,NewChild);
        CurrNode := NewChild;
          IF "Future Day Shipment" THEN
          XMLManagement.AddElement(
            CurrNode,'ShipTimestamp',
            XMLManagement.FormatDateYYYYMMDD(
                FedExXMLControlExt."Requested Ship Date") + 'T' +
                  XMLManagement.FormatTime24HRMMSS(FedExXMLControlExt."Requested Ship Time") + '-00:00',DocNameSpace,NewChild)
          ELSE
            XMLManagement.AddElement(
              CurrNode,'ShipTimestamp',
                XMLManagement.FormatDateYYYYMMDD(
              "Packing Date") + 'T' +
              XMLManagement.FormatTime24HRMMSS(TIME) + '-00:00',DocNameSpace,NewChild);
          XMLManagement.AddElement(CurrNode,'DropoffType',"Drop Off Type",DocNameSpace,NewChild);
          IF "Smart Post Shipment" AND NOT RateRequest THEN BEGIN
            XMLManagement.AddElement(CurrNode,'ServiceType','SMART_POST',DocNameSpace,NewChild)
          END ELSE
           XMLManagement.AddElement(CurrNode,'ServiceType',ServiceType,DocNameSpace,NewChild);

          IF "Packaging Type" <> '' THEN
          XMLManagement.AddElement(CurrNode,'PackagingType',"Packaging Type",DocNameSpace,NewChild);

          XMLManagement.AddElement(CurrNode,'TotalWeight','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            XMLManagement.AddElement(CurrNode,'Units',"Package Weight Units",DocNameSpace,NewChild);
            XMLManagement.AddElement(
              CurrNode,'Value',
                XMLManagement.Decimal2Text(
                ROUND(
                  "Total Shipment Weight",0.1),2),DocNameSpace,NewChild);
          CurrNode := CurrNode.ParentNode;

          IF ("Total Shipment Insured Value" <> 0) AND NOT "Smart Post Shipment" THEN BEGIN
            XMLManagement.AddElement(CurrNode,'TotalInsuredValue','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(
                CurrNode,'Currency',"Insured Value Currency",DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'Amount',
                XMLManagement.Decimal2Text(
                  ROUND(
                    "Total Shipment Insured Value",0.01),2),DocNameSpace,NewChild);
            CurrNode := CurrNode.ParentNode;
          END;

          IF "Package Currency Code" <> '' THEN
            XMLManagement.AddElement(CurrNode,'PreferredCurrency',"Package Currency Code",
              DocNameSpace,NewChild);
          XMLManagement.AddElement(CurrNode,'Shipper','',DocNameSpace,NewChild);
          IF NOT "FedEx Freight" THEN BEGIN
            CurrNode := NewChild;
              IF FedExXMLControl."Shipper TIN EIN/SSN No." <> '' THEN BEGIN
                XMLManagement.AddElement(CurrNode,'Tins','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(
                    CurrNode,'TinType',"Shipper TIN EIN/SSN Indicator",DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'Number',"Shipper TIN EIN/SSN No.",DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
              END;
              XMLManagement.AddElement(CurrNode,'Contact','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(
                  CurrNode,'PersonName',"Shipper Contact Name",DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'CompanyName',"Shipper Company Name",DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'PhoneNumber',
                  XMLManagement.FixPhoneNo(
                    "Shipper Phone No."),DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
              XMLManagement.AddElement(CurrNode,'Address','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(CurrNode,'StreetLines',"Shipper Address 1",DocNameSpace,NewChild);
                IF "Shipper Address 2" <> '' THEN
                  XMLManagement.AddElement(
                    CurrNode,'StreetLines',"Shipper Address 2",DocNameSpace,NewChild);
                XMLManagement.AddElement(CurrNode,'City',"Shipper City",DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'StateOrProvinceCode',
                    XMLManagement.FixState(
                      "Shipper State"),DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'PostalCode',
                  XMLManagement.FixZIPCode(
                    "Shipper Zip Code"),DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'CountryCode',"Shipper Country Code",DocNameSpace,NewChild);
                IF "Shipper Return Residential" THEN
                  XMLManagement.AddElement(CurrNode,'Residential','true',DocNameSpace,NewChild)
                ELSE
                  XMLManagement.AddElement(CurrNode,'Residential','false',DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
              CurrNode := CurrNode.ParentNode;
          END ELSE BEGIN
            CurrNode := NewChild;
              XMLManagement.AddElement(CurrNode,'Contact','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(CurrNode,'PersonName',
                  FedExFreightXMLControl."FXF Billing Contact Name",DocNameSpace,NewChild);
                XMLManagement.AddElement(CurrNode,'CompanyName',
                  FedExFreightXMLControl."FXF Billing Contact Company",DocNameSpace,NewChild);
                XMLManagement.AddElement(CurrNode,'PhoneNumber',
                  XMLManagement.FixPhoneNo(FedExXMLControl."Shipper Phone No."),
                    DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
              XMLManagement.AddElement(CurrNode,'Address','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(CurrNode,'StreetLines',
                  FedExFreightXMLControl."FXF Billing Address",DocNameSpace,NewChild);
                XMLManagement.AddElement(CurrNode,'City',
                  FedExFreightXMLControl."FXF Billing City",DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'StateOrProvinceCode',
                    XMLManagement.FixState(
                      FedExFreightXMLControl."FXF Billing State"),DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'PostalCode',
                    XMLManagement.FixZIPCode(
                      FedExFreightXMLControl."FXF Billing Postal Code"),DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'CountryCode',
                    FedExFreightXMLControl."FXF Billing Country Code",DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
              CurrNode := CurrNode.ParentNode;
          END;
          XMLManagement.AddElement(CurrNode,'Recipient','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            IF "World Wide Service" AND ("Ship-to TIN EIN/SSN No." <> '') THEN BEGIN
              XMLManagement.AddElement(CurrNode,'Tins','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(
                  CurrNode,'TinType',"Ship-to TIN EIN/SSN Indicator",DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'Number',"Ship-to TIN EIN/SSN No.",DocNameSpace,NewChild);
              CurrNode := CurrNode.ParentNode;
            END;
            XMLManagement.AddElement(CurrNode,'Contact','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(
                CurrNode,'PersonName',"Ship-to Contact Name",DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'CompanyName',"Ship-to Company Name",DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'PhoneNumber',
                XMLManagement.FixPhoneNo(
                  "Ship-to Phone No."),DocNameSpace,NewChild);
            CurrNode := CurrNode.ParentNode;
            XMLManagement.AddElement(CurrNode,'Address','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(
                CurrNode,'StreetLines',FedExXMLControl."Ship-to Address 1",DocNameSpace,NewChild);
              IF "Ship-to Address 2" <> '' THEN
                XMLManagement.AddElement(
                  CurrNode,'StreetLines',"Ship-to Address 2",DocNameSpace,NewChild);
              IF "Ship-to City" <> '' THEN
                XMLManagement.AddElement(CurrNode,'City',"Ship-to City",DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'StateOrProvinceCode',
                XMLManagement.FixState(
                  "Ship-to State"),DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'PostalCode',
                XMLManagement.FixZIPCode(
                  "Ship-to Zip Code"),DocNameSpace,NewChild);
              IF "World Wide Service" THEN
                IF "Ship-to Country Code" = 'PR' THEN
                XMLManagement.AddElement(CurrNode,'UrbanizationCode','',DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'CountryCode',"Ship-to Country Code",DocNameSpace,NewChild);
              IF "Ship-to Residential" THEN
                XMLManagement.AddElement(CurrNode,'Residential','true',DocNameSpace,NewChild);
            CurrNode := CurrNode.ParentNode;
          CurrNode := CurrNode.ParentNode;

          XMLManagement.AddElement(CurrNode,'ShippingChargesPayment','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            IF "Payment Type" <> '' THEN
          XMLManagement.AddElement(CurrNode,'PaymentType',"Payment Type",DocNameSpace,NewChild);
          IF "Payor Account No." <> '' THEN BEGIN
            XMLManagement.AddElement(CurrNode,'Payor','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(CurrNode,'ResponsibleParty','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(
                  CurrNode,'AccountNumber',"Payor Account No.",DocNameSpace,NewChild);
                IF FedExFreightXMLControl."FX Freight Payment Type" = 'THIRD_PARTY' THEN BEGIN
                  XMLManagement.AddElement(CurrNode,'Contact','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(
                    CurrNode,'PersonName',FedExFreightXMLControl."Third Party Contact Name",DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'CompanyName',
                      FedExFreightXMLControl."Third Party Contact Company",DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'PhoneNumber',FedExFreightXMLControl."Third Party Contact Phone",DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
                XMLManagement.AddElement(CurrNode,'Address','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(
                    CurrNode,'StreetLines',FedExFreightXMLControl."Third Party Address",DocNameSpace,NewChild);
                  IF FedExFreightXMLControl."Third Party Address 2" <> '' THEN
                    XMLManagement.AddElement(
                      CurrNode,'StreetLines',FedExFreightXMLControl."Third Party Address 2",DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'City',FedExFreightXMLControl."Third Party City",DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'StateOrProvinceCode',FedExFreightXMLControl."Third Party State",DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'PostalCode',FedExFreightXMLControl."Third Party Postal Code",DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'CountryCode',FedExFreightXMLControl."Third Party Country Code",DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
              END;
              CurrNode := CurrNode.ParentNode;
            CurrNode := CurrNode.ParentNode;
          END;
          CurrNode := CurrNode.ParentNode;

          IF "Shipment Special Services Flag" THEN BEGIN
            XMLManagement.AddElement(CurrNode,'SpecialServicesRequested','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              IF "Include Broker Info." AND "World Wide Service" THEN
                XMLManagement.AddElement(
                  CurrNode,'SpecialServiceTypes','BROKER_SELECT_OPTION',DocNameSpace,NewChild);

              IF COD THEN
                IF "Service Indicator" <> '92' THEN
                  XMLManagement.AddElement(CurrNode,'SpecialServiceTypes','COD',DocNameSpace,NewChild);

                IF ("Dangerous Goods" AND "FedEx Freight") THEN
                  XMLManagement.AddElement(
                    CurrNode,'SpecialServiceTypes','DANGEROUS_GOODS',DocNameSpace,NewChild);

              IF "Hold at Location" THEN
                XMLManagement.AddElement(
                  CurrNode,'SpecialServiceTypes','HOLD_AT_LOCATION',DocNameSpace,NewChild);

              IF "Ship Notification" THEN
                XMLManagement.AddElement(
                  CurrNode,'SpecialServiceTypes','EMAIL_NOTIFICATION',DocNameSpace,NewChild);

              IF ("Packing Date" > TODAY) OR "Future Day Shipment" THEN
                IF NOT ("Call Tag Request" OR "Return Shipment") THEN
                  XMLManagement.AddElement(
                    CurrNode,'SpecialServiceTypes','FUTURE_DAY_SHIPMENT',DocNameSpace,NewChild);

              IF "Saturday Pickup" THEN
                IF NOT "Return Shipment" THEN
                XMLManagement.AddElement(
                  CurrNode,'SpecialServiceTypes','SATURDAY_PICKUP',DocNameSpace,NewChild);
              IF "Additional Handling Required" THEN
                XMLManagement.AddElement(
                  CurrNode,'SpecialServiceTypes','ADDITIONAL_HANDLING',DocNameSpace,NewChild);

              IF "Intl Controlled Export Service" THEN BEGIN
                XMLManagement.AddElement(
                  CurrNode,'SpecialServiceTypes','INTERNATIONAL_CONTROLLED_EXPORT_SERVICE',
                    DocNameSpace,NewChild);
              END;

              IF "Home Delivery Type" <> '' THEN
                XMLManagement.AddElement(
                  CurrNode,'SpecialServiceTypes','HOME_DELIVERY_PREMIUM',DocNameSpace,NewChild);

              IF "Inside Delivery" THEN
                XMLManagement.AddElement(
                  CurrNode,'SpecialServiceTypes','INSIDE_DELIVERY',DocNameSpace,NewChild);

              IF "Inside Pickup" THEN
                XMLManagement.AddElement(
                  CurrNode,'SpecialServiceTypes','INSIDE_PICKUP',DocNameSpace,NewChild);

              IF "FedEx Freight" THEN BEGIN
                IF "Liftgate Pickup" THEN
                  XMLManagement.AddElement(
                    CurrNode,'SpecialServiceTypes','LIFTGATE_PICKUP',DocNameSpace,NewChild);
                IF "Liftgate Delivery" THEN
                  XMLManagement.AddElement(
                    CurrNode,'SpecialServiceTypes','LIFTGATE_DELIVERY',DocNameSpace,NewChild);
              END;
              IF "Electronic Trade Documents" THEN
                XMLManagement.AddElement(
                  CurrNode,'SpecialServiceTypes','ELECTRONIC_TRADE_DOCUMENTS',DocNameSpace,NewChild);

              IF "Call Tag Request" THEN
                XMLManagement.AddElement(
                  CurrNode,'SpecialServiceTypes','RETURN_SHIPMENT',DocNameSpace,NewChild);

              IF "Return Shipment" THEN
                XMLManagement.AddElement(
                  CurrNode,'SpecialServiceTypes','RETURN_SHIPMENT',DocNameSpace,NewChild);

              IF "Saturday Delivery" THEN
                IF NOT "Return Shipment" THEN
                XMLManagement.AddElement(
                  CurrNode,'SpecialServiceTypes','SATURDAY_DELIVERY',DocNameSpace,NewChild);
              IF "Call Before Delivery" THEN
                XMLManagement.AddElement(
                  CurrNode,'SpecialServiceTypes','CALL_BEFORE_DELIVERY',DocNameSpace,NewChild);
              IF FedExXMLControl3."Do Not Stack Pallets" THEN
                XMLManagement.AddElement(
                  CurrNode,'SpecialServiceTypes','DO_NOT_STACK_PALLETS',DocNameSpace,NewChild);
              IF FedExXMLControl3."Do Not Break Down Pallets" THEN
                XMLManagement.AddElement(
                  CurrNode,'SpecialServiceTypes','DO_NOT_BREAK_DOWN_PALLETS',DocNameSpace,NewChild);
              IF "Extreme Length" THEN
                XMLManagement.AddElement(
                  CurrNode,'SpecialServiceTypes','EXTREME_LENGTH',DocNameSpace,NewChild);
              IF "FedEx One Rate" THEN
                XMLManagement.AddElement(
                  CurrNode,'SpecialServiceTypes','FEDEX_ONE_RATE',DocNameSpace,NewChild);
              IF "Pharmacy Delivery" THEN
                XMLManagement.AddElement(
                  CurrNode,'SpecialServiceTypes','PHARMACY_DELIVERY',DocNameSpace,NewChild);
              IF FedExXMLControlExt.ITAR THEN
                XMLManagement.AddElement(
                  CurrNode,'SpecialServiceTypes','INTERNATIONAL_TRAFFIC_IN_ARMS_REGULATIONS',DocNameSpace,NewChild);

              IF COD THEN
                IF "Service Indicator" <> '92' THEN BEGIN
                XMLManagement.AddElement(CurrNode,'CodDetail','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(CurrNode,'CodCollectionAmount','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'Currency',"COD Currency",DocNameSpace,NewChild);
                    XMLManagement.AddElement(
                      CurrNode,'Amount',
                      XMLManagement.Decimal2Text(
                        "COD Amount",2),DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
                  IF "Add Shipping Charge to COD Amt" THEN BEGIN
                    XMLManagement.AddElement(CurrNode,
                      'AddTransportationChargesDetail','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      IF FedExXMLControl."COD Add Charges Rate Basis" <> '' THEN
                        XMLManagement.AddElement(
                          CurrNode,'RateTypeBasis',FedExXMLControl."COD Add Charges Rate Basis",
                            DocNameSpace,NewChild)
                      ELSE
                        CASE "Rate Request Type" OF
                          'ACCOUNT':
                            XMLManagement.AddElement(
                              CurrNode,'RateTypeBasis','ACCOUNT',DocNameSpace,NewChild);
                          'LIST':
                            XMLManagement.AddElement(
                              CurrNode,'RateTypeBasis','LIST',DocNameSpace,NewChild);
                          'NONE':
                            XMLManagement.AddElement(
                              CurrNode,'RateTypeBasis','LIST',DocNameSpace,NewChild);
                          'PREFERRED':
                            XMLManagement.AddElement(
                              CurrNode,'RateTypeBasis','ACCOUNT',DocNameSpace,NewChild);
                        END;
                      IF "COD Add Charges Charge Basis" <> '' THEN
                        XMLManagement.AddElement(CurrNode,'ChargeBasis',"COD Add Charges Charge Basis",
                          DocNameSpace,NewChild)
                      ELSE
                        XMLManagement.AddElement(CurrNode,'ChargeBasis','NET_CHARGE',
                          DocNameSpace,NewChild);
                        XMLManagement.AddElement(CurrNode,
                              'ChargeBasisLevel','SUM_OF_PACKAGES',DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                  END;

                  XMLManagement.AddElement(CurrNode,'CollectionType',
                    FedExXMLControl."COD Collection Type",DocNameSpace,NewChild);

                  XMLManagement.AddElement(CurrNode,'CodRecipient','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    IF "Payor Account No." <> "Shipper Account No." THEN
                      XMLManagement.AddElement(CurrNode,
                        'AccountNumber',"Payor Account No.",DocNameSpace,NewChild)
                    ELSE
                      XMLManagement.AddElement(CurrNode,
                      'AccountNumber',"Shipper Account No.",DocNameSpace,NewChild);
                    IF FedExXMLControl."Shipper TIN EIN/SSN No." <> '' THEN BEGIN
                      XMLManagement.AddElement(CurrNode,'Tins','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        IF FedExXMLControl."Shipper TIN EIN/SSN Indicator" <> '' THEN
                          XMLManagement.AddElement(CurrNode,'TinType',
                            FedExXMLControl."Shipper TIN EIN/SSN Indicator",DocNameSpace,NewChild);
                          XMLManagement.AddElement(CurrNode,
                            'Number',FedExXMLControl."Shipper TIN EIN/SSN No.",DocNameSpace,NewChild);
                        CurrNode := CurrNode.ParentNode;
                      END;
                    XMLManagement.AddElement(CurrNode,'Contact','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(
                        CurrNode,'PersonName',FedExXMLControl."Shipper Contact Name",
                          DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'Title','',
                          DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'CompanyName',FedExXMLControl."Shipper Company Name",
                          DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'PhoneNumber',
                          XMLManagement.FixPhoneNo(FedExXMLControl."Shipper Phone No."),
                            DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    XMLManagement.AddElement(CurrNode,'Address','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(
                        CurrNode,'StreetLines',FedExXMLControl."Shipper Address 1",
                          DocNameSpace,NewChild);
                      IF "Shipper Address 2" <> '' THEN
                        XMLManagement.AddElement(
                          CurrNode,'StreetLines',"Shipper Address 2",DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'City',FedExXMLControl."Shipper City",
                          DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'StateOrProvinceCode',
                          XMLManagement.FixState(
                            FedExXMLControl."Shipper State"),DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'PostalCode',
                          XMLManagement.FixZIPCode(
                            FedExXMLControl."Shipper Zip Code"),DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'CountryCode',FedExXMLControl."Shipper Country Code",
                          DocNameSpace,NewChild);
                      IF FedExXMLControl."Shipper Return Residential" THEN
                        XMLManagement.AddElement(CurrNode,'Residential','true',DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    CurrNode := CurrNode.ParentNode;
                  IF "COD Reference" <> '' THEN
                    XMLManagement.AddElement(CurrNode,'ReferenceIndicator',"COD Reference",DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
              END;

              IF "Hold at Location" THEN BEGIN
                XMLManagement.AddElement(CurrNode,'HoldAtLocationDetail','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  TESTFIELD("HAL Recipient Phone Number");
                  XMLManagement.AddElement(
                    CurrNode,'PhoneNumber',XMLManagement.FixPhoneNo(
                      "HAL Recipient Phone Number"),DocNameSpace,NewChild);
                  XMLManagement.AddElement(CurrNode,'LocationContactAndAddress','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(
                      CurrNode,'Contact','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                    XMLManagement.AddElement(
                        CurrNode,'ContactId',FedExXMLControlExt."HAL Contact Id",DocNameSpace,NewChild);
                      XMLManagement.AddElement(CurrNode,'PersonName',"HAL Recipient Name",
                        DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'Title',FedExXMLControlExt."HAL Contact Title",DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'CompanyName',FedExXMLControlExt."HAL Company",DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'PhoneNumber',XMLManagement.FixPhoneNo(
                          FedExXMLControlExt."HAL Fedex Phone No."),DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'PhoneExtension',FedExXMLControlExt."HAL Location Phone Ext.",
                          DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'PagerNumber',FedExXMLControlExt."HAL Location Pager No.",
                          DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'FaxNumber',FedExXMLControlExt."HAL Location FAX No.",
                          DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'EMailAddress',FedExXMLControlExt."HAL Location Email Address",
                          DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    XMLManagement.AddElement(CurrNode,'Address','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(
                        CurrNode,'StreetLines',"HAL FedEx Location Address",DocNameSpace,NewChild);
                      XMLManagement.AddElement(CurrNode,'City',"HAL FedEx Location City",
                        DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'StateOrProvinceCode',XMLManagement.FixState(
                          "HAL FedEx Location State"),DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'PostalCode',
                        XMLManagement.FixZIPCode(
                          "HAL FedEx Location Zip Code"),DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'UrbanizationCode',FedExXMLControlExt."HAL Location Urbanization Code",
                          DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'CountryCode',"HAL FedEx Location Country",DocNameSpace,NewChild);
                    CurrNode := CurrNode.ParentNode;
                  CurrNode := CurrNode.ParentNode;
                  IF "HAL Fedex Location Type" <> '' THEN
                    XMLManagement.AddElement(CurrNode,'LocationType',"HAL Fedex Location Type",
                      DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
              END;

              IF "Ship Notification" THEN BEGIN
                XMLManagement.AddElement(CurrNode,'EMailNotificationDetail','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  IF "Notification Memo" <> '' THEN
                  XMLManagement.AddElement(
                    CurrNode,'PersonalMessage',"Notification Memo",DocNameSpace,NewChild);
                  IF "Shipper Ship Notification" OR
                     "Shipper Delivery Notification" OR
                     "Shipper Exception Notification"
                  THEN BEGIN
                    XMLManagement.AddElement(CurrNode,'Recipients','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(
                        CurrNode,'EMailNotificationRecipientType','SHIPPER',DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'EMailAddress',"Shipper EMail Address",DocNameSpace,NewChild);
                      IF "Shipper Ship Notification" THEN
                        XMLManagement.AddElement(
                          CurrNode,'NotificationEventsRequested','ON_SHIPMENT',DocNameSpace,NewChild);
                      IF "Shipper Exception Notification" THEN
                        XMLManagement.AddElement(
                          CurrNode,'NotificationEventsRequested','ON_EXCEPTION',DocNameSpace,NewChild);
                      IF "Shipper Delivery Notification" THEN
                        XMLManagement.AddElement(
                          CurrNode,'NotificationEventsRequested','ON_DELIVERY',DocNameSpace,NewChild);

                      XMLManagement.AddElement(
                        CurrNode,'Format',"Notification Format",DocNameSpace,NewChild);
                      XMLManagement.AddElement(CurrNode,'Localization','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        XMLManagement.AddElement(
                          CurrNode,'LanguageCode',"Notification Language Code",DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    CurrNode := CurrNode.ParentNode;
                  END;
                  IF "Recipient Delivery Notif." OR
                     "Recipient Ship Notification" OR
                     "Recipient Exception Notif."
                  THEN BEGIN
                    XMLManagement.AddElement(CurrNode,'Recipients','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(
                        CurrNode,'EMailNotificationRecipientType','RECIPIENT',DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'EMailAddress',"Ship Notification Email",DocNameSpace,NewChild);
                      IF "Recipient Ship Notification" THEN
                        XMLManagement.AddElement(
                          CurrNode,'NotificationEventsRequested','ON_SHIPMENT',DocNameSpace,NewChild);
                      IF "Recipient Exception Notif." THEN
                        XMLManagement.AddElement(
                          CurrNode,'NotificationEventsRequested','ON_EXCEPTION',DocNameSpace,NewChild);
                      IF "Recipient Delivery Notif." THEN
                        XMLManagement.AddElement(
                          CurrNode,'NotificationEventsRequested','ON_DELIVERY',DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'Format',"Notification Format",DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'Localization','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        XMLManagement.AddElement(
                          CurrNode,'LanguageCode',"Notification Language Code",DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    CurrNode := CurrNode.ParentNode;
                  END;

                  IF "Broker Ship Notification" OR
                     "Broker Delivery Notification" OR
                     "Broker Exception Notification"
                  THEN BEGIN
                    XMLManagement.AddElement(CurrNode,'Recipients','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(
                        CurrNode,'EMailNotificationRecipientType','BROKER',DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'EMailAddress',
                          FedExXMLControlExt."Broker Email Address",DocNameSpace,NewChild);
                      IF "Broker Ship Notification" THEN
                        XMLManagement.AddElement(
                          CurrNode,'NotificationEventsRequested','ON_SHIPMENT',DocNameSpace,NewChild);
                      IF "Broker Exception Notification" THEN
                        XMLManagement.AddElement(
                          CurrNode,'NotificationEventsRequested','ON_EXCEPTION',DocNameSpace,NewChild);
                      IF "Broker Delivery Notification" THEN
                        XMLManagement.AddElement(
                          CurrNode,'NotificationEventsRequested','ON_DELIVERY',DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'Format',"Notification Format",DocNameSpace,NewChild);
                      XMLManagement.AddElement(CurrNode,'Localization','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        XMLManagement.AddElement(
                          CurrNode,'LanguageCode',"Notification Language Code",DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    CurrNode := CurrNode.ParentNode;
                  END;

                  IF "Ship Notification Email" <> '' THEN BEGIN
                    IF NOT ("Recipient Delivery Notif." OR
                     "Recipient Ship Notification" OR
                     "Recipient Exception Notif.") THEN
                     IF "Optional Delivery Notification" OR
                       "Optional Ship Notification" OR
                       "Optional Exception Notif." THEN BEGIN
                      XMLManagement.AddElement(CurrNode,'Recipients','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        XMLManagement.AddElement(
                          CurrNode,'EMailNotificationRecipientType','OTHER',DocNameSpace,NewChild);
                        XMLManagement.AddElement(
                          CurrNode,'EMailAddress',"Ship Notification Email",DocNameSpace,NewChild);

                        IF "Optional Ship Notification" THEN
                          XMLManagement.AddElement(
                            CurrNode,'NotificationEventsRequested','ON_SHIPMENT',DocNameSpace,NewChild);
                        IF "Optional Exception Notif." THEN
                          XMLManagement.AddElement(
                            CurrNode,'NotificationEventsRequested','ON_EXCEPTION',DocNameSpace,NewChild);
                        IF "Optional Delivery Notification" THEN
                          XMLManagement.AddElement(
                            CurrNode,'NotificationEventsRequested','ON_DELIVERY',DocNameSpace,NewChild);
                        XMLManagement.AddElement(
                          CurrNode,'Format',"Notification Format",DocNameSpace,NewChild);
                        XMLManagement.AddElement(CurrNode,'Localization','',DocNameSpace,NewChild);
                        CurrNode := NewChild;
                          XMLManagement.AddElement(
                            CurrNode,'LanguageCode',"Notification Language Code",DocNameSpace,NewChild);
                        CurrNode := CurrNode.ParentNode;
                      CurrNode := CurrNode.ParentNode;
                    END;
                  END;
                  IF "Ship Notification Email 2" <> '' THEN BEGIN
                    IF "Optional Delivery Notification" OR
                       "Optional Ship Notification" OR
                       "Optional Exception Notif."
                    THEN BEGIN
                      XMLManagement.AddElement(CurrNode,'Recipients','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        XMLManagement.AddElement(
                          CurrNode,'EMailNotificationRecipientType','OTHER',DocNameSpace,NewChild);
                        XMLManagement.AddElement(
                          CurrNode,'EMailAddress',"Ship Notification Email 2",DocNameSpace,NewChild);
                        IF "Optional Ship Notification" THEN
                          XMLManagement.AddElement(
                            CurrNode,'NotificationEventsRequested','ON_SHIPMENT',DocNameSpace,NewChild);
                        IF "Optional Exception Notif." THEN
                          XMLManagement.AddElement(
                            CurrNode,'NotificationEventsRequested','ON_EXCEPTION',DocNameSpace,NewChild);
                        IF "Optional Delivery Notification" THEN
                          XMLManagement.AddElement(
                            CurrNode,'NotificationEventsRequested','ON_DELIVERY',DocNameSpace,NewChild);
                        XMLManagement.AddElement(
                          CurrNode,'Format',"Notification Format",DocNameSpace,NewChild);
                        XMLManagement.AddElement(CurrNode,'Localization','',DocNameSpace,NewChild);
                        CurrNode := NewChild;
                          XMLManagement.AddElement(
                            CurrNode,'LanguageCode',"Notification Language Code",DocNameSpace,NewChild);
                        CurrNode := CurrNode.ParentNode;
                      CurrNode := CurrNode.ParentNode;
                    END;
                  END;
                  IF "Ship Notification Email 3" <> '' THEN BEGIN
                    IF "Optional Delivery Notification" OR
                       "Optional Ship Notification" OR
                       "Optional Exception Notif."
                    THEN BEGIN
                      XMLManagement.AddElement(CurrNode,'Recipients','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        XMLManagement.AddElement(
                          CurrNode,'EMailNotificationRecipientType','OTHER',DocNameSpace,NewChild);
                        XMLManagement.AddElement(
                          CurrNode,'EMailAddress',"Ship Notification Email 3",DocNameSpace,NewChild);
                        IF "Optional Ship Notification" THEN
                          XMLManagement.AddElement(
                            CurrNode,'NotificationEventsRequested','ON_SHIPMENT',DocNameSpace,NewChild);
                        IF "Optional Exception Notif." THEN
                          XMLManagement.AddElement(
                            CurrNode,'NotificationEventsRequested','ON_EXCEPTION',DocNameSpace,NewChild);
                        IF "Optional Delivery Notification" THEN
                          XMLManagement.AddElement(
                            CurrNode,'NotificationEventsRequested','ON_DELIVERY',DocNameSpace,NewChild);
                        XMLManagement.AddElement(
                          CurrNode,'Format',"Notification Format",DocNameSpace,NewChild);
                        XMLManagement.AddElement(CurrNode,'Localization','',DocNameSpace,NewChild);
                        CurrNode := NewChild;
                          XMLManagement.AddElement(
                            CurrNode,'LanguageCode',"Notification Language Code",DocNameSpace,NewChild);
                        CurrNode := CurrNode.ParentNode;
                      CurrNode := CurrNode.ParentNode;
                    END;
                  END;
                CurrNode := CurrNode.ParentNode;
              END;

              IF "Call Tag Request" THEN BEGIN
                XMLManagement.AddElement(CurrNode,'ReturnShipmentDetail','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(CurrNode,'ReturnType','FEDEX_TAG',DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
              END;

              IF "Return Shipment" THEN BEGIN
                XMLManagement.AddElement(CurrNode,'ReturnShipmentDetail','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(
                    CurrNode,'ReturnType','PRINT_RETURN_LABEL',DocNameSpace,NewChild);
                  IF FedExXMLControlExt."Return RMA Reason" <> '' THEN BEGIN
                    XMLManagement.AddElement(CurrNode,'Rma','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(
                        CurrNode,'Reason',
                          FedExXMLControlExt."Return RMA Reason",DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                  END;
                  IF FedExXMLControlExt."Return RMA Reason 2" <> '' THEN BEGIN
                    XMLManagement.AddElement(CurrNode,'Rma','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(
                        CurrNode,'Reason',
                          FedExXMLControlExt."Return RMA Reason 2",DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                  END;
                  IF "Saturday Pickup" THEN BEGIN
                    XMLManagement.AddElement(CurrNode,'ReturnEMailDetail','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(
                        CurrNode,'AllowedSpecialServices','SATURDAY_PICKUP',DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                  END;
                  IF "Saturday Delivery" THEN BEGIN
                    XMLManagement.AddElement(CurrNode,'ReturnEMailDetail','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(
                        CurrNode,'AllowedSpecialServices','SATURDAY_DELIVERY',DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                  END;
                  CurrNode := CurrNode.ParentNode;
              END;
              IF "Intl Controlled Export Service" THEN BEGIN
                XMLManagement.AddElement(
                  CurrNode,'InternationalControlledExportDetail','',
                    DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(CurrNode,'Type',FedExXMLControl."FICE License Type",
                    DocNameSpace,NewChild);
                  XMLManagement.AddElement(CurrNode,'ForeignTradeZoneCode',
                    FedExXMLControl."FICE Foreign Trade Zone",DocNameSpace,NewChild);
                  XMLManagement.AddElement(CurrNode,'EntryNumber','1',DocNameSpace,NewChild);
                  XMLManagement.AddElement(CurrNode,'LicenseOrPermitNumber',
                    FedExXMLControl."FICE License/Permit No.",DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                   CurrNode,'LicenseOrPermitExpirationDate',
                   XMLManagement.FormatDateYYYYMMDD(
                     "FICE License/Permit Exp. Date"),DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
              END;
              IF FedExXMLControlExt.ITAR THEN BEGIN
                XMLManagement.AddElement(CurrNode,'InternationalTrafficInArmsRegulationsDetail','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(
                    CurrNode,'LicenseOrExemptionNumber',FedExXMLControlExt."ITAR License or Exemption No.",
                      DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
              END;

              IF "Home Delivery Type" <> '' THEN BEGIN
                XMLManagement.AddElement(CurrNode,'HomeDeliveryPremiumDetail','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(
                    CurrNode,'HomeDeliveryPremiumType',"Home Delivery Type",DocNameSpace,NewChild);
                  IF "Home Delivery Date" <> 0D THEN
                    XMLManagement.AddElement(
                      CurrNode,'Date',
                      XMLManagement.FormatDateYYYYMMDD(
                        "Home Delivery Date"),DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'PhoneNumber',
                    XMLManagement.FixPhoneNo(
                      "Home Delivery Phone No."),DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
              END;

              IF "Electronic Trade Documents" THEN IF
                "Create Commercial Invoice" OR
                "Create Certificate of Origin" OR
                "Create Gen. Agency Agreement" OR
                "Create NAFTA Cert. of Origin" OR
                "Create Pro Forma Invoice" THEN BEGIN
                  XMLManagement.AddElement(CurrNode,'EtdDetail','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    IF "Create Commercial Invoice" THEN
                      XMLManagement.AddElement(CurrNode,'RequestedDocumentCopies',
                      'COMMERCIAL_INVOICE',DocNameSpace,NewChild);
                    IF "Create Certificate of Origin" THEN
                      XMLManagement.AddElement(CurrNode,'RequestedDocumentCopies',
                      'CERTIFICATE_OF_ORIGIN',DocNameSpace,NewChild);
                    IF "Create Gen. Agency Agreement" THEN
                      XMLManagement.AddElement(CurrNode,'RequestedDocumentCopies',
                      'GENERAL_AGENCY_AGREEMENT',DocNameSpace,NewChild);
                    IF "Create NAFTA Cert. of Origin" THEN
                       XMLManagement.AddElement(CurrNode,'RequestedDocumentCopies',
                      'NAFTA_CERTIFICATE_OF_ORIGIN',DocNameSpace,NewChild);
                    IF "Create Pro Forma Invoice" THEN
                      XMLManagement.AddElement(CurrNode,'RequestedDocumentCopies',
                      'PRO_FORMA_INVOICE',DocNameSpace,NewChild);
                    CurrNode := CurrNode.ParentNode;
                END;
            CurrNode := CurrNode.ParentNode;
          END;

          IF "Express Freight Shipment" THEN BEGIN
            XMLManagement.AddElement(CurrNode,'ExpressFreightDetail','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              IF "Packing List Enclosed" THEN
                XMLManagement.AddElement(CurrNode,'PackingListEnclosed','true',DocNameSpace,NewChild);
              IF "Shippers Load And Count" > 0 THEN BEGIN
                XMLManagement.AddElement(
                  CurrNode,'ShippersLoadAndCount',
                  XMLManagement.Decimal2Text(
                    "Shippers Load And Count",0),DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'BookingConfirmationNumber',"Booking Confirmation No.",DocNameSpace,NewChild);
              END;
            CurrNode := CurrNode.ParentNode;
          END;

          IF "FedEx Freight" THEN BEGIN
            XMLManagement.AddElement(CurrNode,'FreightShipmentDetail','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(
                CurrNode,'FedExFreightAccountNumber',
                  FedExFreightXMLControl."FX Freight Account No.",DocNameSpace,NewChild);

              XMLManagement.AddElement(
                CurrNode,'FedExFreightBillingContactAndAddress','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(CurrNode,'Contact','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(CurrNode,'PersonName',
                    FedExFreightXMLControl."FXF Billing Contact Name",DocNameSpace,NewChild);
                  XMLManagement.AddElement(CurrNode,'CompanyName',
                    FedExFreightXMLControl."FXF Billing Contact Company",DocNameSpace,NewChild);
                  XMLManagement.AddElement(CurrNode,'PhoneNumber',
                    XMLManagement.FixPhoneNo(FedExFreightXMLControl."FXF Billing Contact Pager No."),
                      DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
                XMLManagement.AddElement(CurrNode,'Address','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(CurrNode,'StreetLines',
                    FedExFreightXMLControl."FXF Billing Address",DocNameSpace,NewChild);
                  XMLManagement.AddElement(CurrNode,'City',
                    FedExFreightXMLControl."FXF Billing City",DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'StateOrProvinceCode',
                      XMLManagement.FixState(
                        FedExFreightXMLControl."FXF Billing State"),DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'PostalCode',
                    XMLManagement.FixZIPCode(
                      FedExFreightXMLControl."FXF Billing Postal Code"),DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'CountryCode',
                      FedExFreightXMLControl."FXF Billing Country Code",DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
                CurrNode := CurrNode.ParentNode;
              IF FedExXMLControl."Label Inv. Reference" <> '' THEN BEGIN
                XMLManagement.AddElement(CurrNode,'PrintedReferences','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'Type',
                      'SHIPPER_ID_NUMBER',DocNameSpace,NewChild);
                    XMLManagement.AddElement(CurrNode,'Value',
                      FedExXMLControl."Label Inv. Reference" ,DocNameSpace,NewChild);
                    CurrNode := CurrNode.ParentNode;
                END;
              IF FedExFreightXMLControl."Bill of Lading No." <> '' THEN BEGIN
                XMLManagement.AddElement(CurrNode,'PrintedReferences','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'Type',
                      'BILL_OF_LADING',DocNameSpace,NewChild);
                    XMLManagement.AddElement(CurrNode,'Value',
                      FedExFreightXMLControl."Bill of Lading No.",DocNameSpace,NewChild);
                    CurrNode := CurrNode.ParentNode;
                END;
              XMLManagement.AddElement(CurrNode,'Role',
                FedExFreightXMLControl."FX Freight Role",DocNameSpace,NewChild);
              IF FedExFreightXMLControl."FX Freight Payment Type" = 'COLLECT' THEN
                IF FedExFreightXMLControl."Collect Terms Type" <> '' THEN
                XMLManagement.AddElement(CurrNode,'CollectTermsType',
                  FedExFreightXMLControl."Collect Terms Type",DocNameSpace,NewChild);
              XMLManagement.AddElement(CurrNode,'DeclaredValuePerUnit','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                IF "Insured Value Currency" = '' THEN
                  "Insured Value Currency" := "Package Currency Code";
                XMLManagement.AddElement(CurrNode,'Currency',
                  "Insured Value Currency",DocNameSpace,NewChild);
                XMLManagement.AddElement(CurrNode,'Amount',
                  XMLManagement.Decimal2Text(
                    (FedExFreightXMLControl."FX Freight Value Amount"/
                      FedExFreightXMLControl."FX Freight Value Units"),2),
                        DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;

              XMLManagement.AddElement(CurrNode,'DeclaredValueUnits',
                XMLManagement.Decimal2Text(
                  FedExFreightXMLControl."FX Freight Total Handling Unit",0),DocNameSpace,NewChild);

              IF ((FedExFreightXMLControl."FX Freight Coverage Amount" <> 0) AND
                  ("Total Shipment Weight" <> 0)) THEN BEGIN
                XMLManagement.AddElement(CurrNode,'LiabilityCoverageDetail','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(CurrNode,'CoverageType',
                    FedExFreightXMLControl."FX Freight Liability Cov. Type",DocNameSpace,NewChild);
                  XMLManagement.AddElement(CurrNode,'CoverageAmount','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'Currency',
                      FedExFreightXMLControl."FX Freight Coverage Amt. Curr.",DocNameSpace,NewChild);

                    XMLManagement.AddElement(CurrNode,'Amount',
                      XMLManagement.Decimal2Text(
                        FedExFreightXMLControl."FX Freight Coverage Amount" / "Total Shipment Weight",2),DocNameSpace,NewChild);
                    CurrNode := CurrNode.ParentNode;
                  CurrNode := CurrNode.ParentNode;
              END;
              PackageLine.RESET;
              RateShopFromOrder := FALSE;
              IF RateRequest THEN BEGIN
                IF NOT RateShopHeader.GET(FedExXMLControl."Source No.") THEN
                  RateShopHeader.INIT;
                IF RateShopHeader."Source Type" = 36 THEN
                  RateShopFromOrder := TRUE;
                SetFreightPackageLines(PackageLine,FedExFreightXMLControl);
                PackageLine.SETRANGE(Type,PackageLine.Type::Item);
              END ELSE BEGIN
                PackageLine.SETFILTER(Type,'%1|%2',PackageLine.Type::Item,PackageLine.Type::" ");
                PackageLine.SETRANGE("Package No.","Source No.");
              END;
              IF NOT RateShopFromOrder THEN BEGIN
                IF PackageLine.FINDFIRST THEN
                  FedExFreightXMLControl."FX Freight Total Handling Unit" := 0;
                  IF PackageLine."Handling Units" = 0 THEN
                    PackageLine."Handling Units" := 1;
                  REPEAT
                    FedExFreightXMLControl."FX Freight Total Handling Unit" +=
                      PackageLine."Handling Units";
                  UNTIL PackageLine.NEXT = 0;
              END;
              IF FedExFreightXMLControl."FXF Palletized" THEN
                XMLManagement.AddElement(CurrNode,'TotalHandlingUnits',
                  XMLManagement.Decimal2Text(
                    FedExFreightXMLControl."No. of Pallets",0),DocNameSpace,NewChild)
              ELSE
                XMLManagement.AddElement(CurrNode,'TotalHandlingUnits',
                  XMLManagement.Decimal2Text(
                    FedExFreightXMLControl."FX Freight Total Handling Unit",0),DocNameSpace,NewChild);
              XMLManagement.AddElement(CurrNode,'ClientDiscountPercent',
                XMLManagement.Decimal2Text(
                  FedExFreightXMLControl."FX Freight Client Discount Pct",2),DocNameSpace,NewChild);
              XMLManagement.AddElement(CurrNode,'PalletWeight','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(CurrNode,'Units',
                  FedExFreightXMLControl."FX Freight Pallet Weight Units",DocNameSpace,NewChild);
                XMLManagement.AddElement(CurrNode,'Value',
                  XMLManagement.Decimal2Text(
                    FedExFreightXMLControl."FX Freight Pallet Weight Value",0),DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
              XMLManagement.AddElement(CurrNode,'ShipmentDimensions','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(CurrNode,'Length',
                  XMLManagement.Integer2Text(
                    ROUND(FedExFreightXMLControl."FX Freight Shipment Dim Length",1,'>')),DocNameSpace,NewChild);
                XMLManagement.AddElement(CurrNode,'Width',
                  XMLManagement.Integer2Text(
                    ROUND(FedExFreightXMLControl."FX Freight Shipment Dim Width",1,'>')),DocNameSpace,NewChild);
                XMLManagement.AddElement(CurrNode,'Height',
                  XMLManagement.Integer2Text(
                    ROUND(FedExFreightXMLControl."FX Freight Shipment Dim Height",1,'>')),DocNameSpace,NewChild);
                XMLManagement.AddElement(CurrNode,'Units',
                  FedExFreightXMLControl."FX Freight Shipment Dim Units",DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;

              IF FedExFreightXMLControl."FX Freight Comment" <> '' THEN
                XMLManagement.AddElement(CurrNode,'Comment',
                  FedExFreightXMLControl."FX Freight Comment",DocNameSpace,NewChild);

              IF ((FedExFreightXMLControl."FX Freight Shipment Dim Units" = 'IN') AND
                  (FedExFreightXMLControl."FX Freight Shipment Dim Length" >= 180)) OR
                  ((FedExFreightXMLControl."FX Freight Shipment Dim Units" = 'FT') AND
                  (FedExFreightXMLControl."FX Freight Shipment Dim Length" >= 15)) THEN
                  BEGIN
                    XMLManagement.AddElement(CurrNode,'SpecialServicePayments',
                      '',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'SpecialService',
                        'EXTREME_LENGTH',DocNameSpace,NewChild);
                      IF FedExFreightXMLControl."Special Services Payment Type" <> '' THEN
                      XMLManagement.AddElement(CurrNode,'PaymentType',
                          FedExFreightXMLControl."Special Services Payment Type",DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                  END;

              IF Hazmat OR "Dangerous Goods" THEN BEGIN
                XMLManagement.AddElement(
                  CurrNode,'HazardousMaterialsEmergencyContactNumber',
                    XMLManagement.FixPhoneNo("Hazmat Contact Phone No."),DocNameSpace,NewChild);
                  IF "Hazmat Contact Name" <> '' THEN
                    XMLManagement.AddElement(
                      CurrNode,'HazardousMaterialsOfferor',"Hazmat Contact Name",DocNameSpace,NewChild);
                END;

              PackageLine.RESET;
              RateShopFromOrder := FALSE;
              IF RateRequest THEN BEGIN
                IF NOT RateShopHeader.GET(FedExXMLControl."Source No.") THEN
                  RateShopHeader.INIT;
                IF RateShopHeader."Source Type" = 36 THEN
                  RateShopFromOrder := TRUE;
                SetFreightPackageLines(PackageLine,FedExFreightXMLControl);
                PackageLine.SETRANGE(Type,PackageLine.Type::Item);
              END ELSE BEGIN
                // Check for Packages
                PackageFilter := '';
                PackageLine.SETRANGE("Package No.","Source No.");
                PackageLine.SETFILTER(Type,'%1',PackageLine.Type::Package);
                IF PackageLine.FIND('-') THEN
                  REPEAT
                    IF STRPOS(PackageFilter,PackageLine."No.") = 0 THEN
                      IF STRLEN(PackageFilter) = 0 THEN
                        PackageFilter += PackageLine."No."
                    ELSE
                      PackageFilter += '|' + PackageLine."No.";
                  UNTIL PackageLine.NEXT = 0;
                IF STRLEN(PackageFilter) = 0 THEN
                  PackageFilter := "Source No."
                ELSE
                  PackageFilter += '|' + "Source No.";

                PackageLine.RESET;
                PackageLine.SETFILTER(Type,'%1|%2',PackageLine.Type::Item,PackageLine.Type::" ");
                PackageLine.SETFILTER("Package No.",PackageFilter);
              END;
              IF NOT RateShopFromOrder THEN BEGIN
                IF PackageLine.FINDFIRST THEN
                REPEAT
                  IF (PackageLine."Unit of Measure Code" = 'PCS')
                    OR (PackageLine."Unit of Measure Code" = 'EA') THEN
                      PackageLine."Unit of Measure Code" := 'PIECE';
                  IF FedExFreightXMLControl."FX Freight Line Item Class" = '' THEN
                    FedExFreightXMLControl."FX Freight Line Item Class" :=
                      ShippingAgentService."Default LTL Freight Type";
                  IF PackageLine."LTL Freight Type" = '' THEN
                    PackageLine."LTL Freight Type" :=
                        ShippingAgentService."Default LTL Freight Type";
                  CASE PackageLine."LTL Freight Type" OF
                    '50':
                      FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_050';
                    '55':
                      FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_055';
                    '60':
                      FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_060';
                    '65':
                      FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_065';
                    '70':
                      FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_070';
                    '77':
                      FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_077';
                    '77.5':
                      FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_077_5';
                    '85':
                      FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_085';
                    '92.5':
                      FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_092_5';
                    '100':
                      FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_100';
                    '110':
                      FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_110';
                    '125':
                      FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_125';
                    '150':
                      FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_150';
                    '175':
                      FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_175';
                    '200':
                      FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_200';
                    '250':
                      FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_250';
                    '300':
                      FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_300';
                    '400':
                      FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_400';
                    '500':
                      FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_500';
                  END;

                  XMLManagement.AddElement(CurrNode,'LineItems','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'FreightClass',
                      FedExFreightXMLControl."FX Freight Line Item Class",DocNameSpace,NewChild);

                    IF FedExFreightXMLControl."FX Freight LIC Prov. by Cust." THEN
                      XMLManagement.AddElement(CurrNode,'ClassProvidedByCustomer',
                        'true',DocNameSpace,NewChild);
                    IF PackageLine."Handling Units" = 0 THEN
                      PackageLine."Handling Units" := PackageLine.Quantity;
                    IF FedExFreightXMLControl."FedEx Freight BOL Line Type" =
                      FedExFreightXMLControl."FedEx Freight BOL Line Type"::"BOL Info. Lines" THEN BEGIN
                      XMLManagement.AddElement(CurrNode,'HandlingUnits',
                        XMLManagement.Decimal2Text(
                          ROUND(PackageLine."Handling Units",1,'>'),0),DocNameSpace,NewChild);
                      XMLManagement.AddElement(CurrNode,'Packaging',
                        UPPERCASE('PALLET'),DocNameSpace,NewChild);
                      XMLManagement.AddElement(CurrNode,'Pieces',
                        XMLManagement.Decimal2Text(
                          ROUND(PackageLine.Quantity,1,'>'),0),DocNameSpace,NewChild);
                    END ELSE BEGIN
                      IF PackageLine."Handling Units" = 0 THEN
                        PackageLine."Handling Units" := PackageLine.Quantity;
                      XMLManagement.AddElement(CurrNode,'HandlingUnits',
                        XMLManagement.Decimal2Text(
                          ROUND(PackageLine."Handling Units",1,'>'),0),DocNameSpace,NewChild);

                    IF PackagingType <> '' THEN
                      XMLManagement.AddElement(CurrNode,'Packaging',
                        PackagingType,DocNameSpace,NewChild);
                      XMLManagement.AddElement(CurrNode,'Pieces',
                        XMLManagement.Decimal2Text(
                          ROUND(PackageLine.Quantity,1,'>'),0),DocNameSpace,NewChild);
                    END;

                    IF PackageLine."NMFC Code" <> '' THEN
                      XMLManagement.AddElement(CurrNode,'NmfcCode',
                        PackageLine."NMFC Code",DocNameSpace,NewChild)
                    ELSE
                      IF ShippingSetup."Default NMFC Code" <> '' THEN
                        XMLManagement.AddElement(CurrNode,'NmfcCode',
                          ShippingSetup."Default NMFC Code",DocNameSpace,NewChild);

                    HazMatItem.RESET;
                    HazMatItemCount := 0;
                    HazMatDescription := '';
                    HazMatItem.SETRANGE(HazMatItem.Type,HazMatItem.Type::Item);
                    IF PackageLine.Type = PackageLine.Type::Item THEN
                      HazMatItem.SETRANGE("No.",PackageLine."No.")
                    ELSE
                      HazMatItem.SETRANGE("No.",PackageLine."FXF Hazmat Item No.");
                    IF HazMatItem.FINDFIRST THEN
                      REPEAT
                        HazMatProductClass.GET(HazMatItem."Product Class");
                        IF HazMatProductClass."Option Type" <>
                          HazMatProductClass."Option Type"::"Limited Quantities Commodities" THEN BEGIN
                        HazMatItemCount += 1;
                        IF HazMatItemCount = 1 THEN
                        XMLManagement.AddElement(CurrNode,'HazardousMaterials',
                          FedExManagement.Blank2Underscore(UPPERCASE(
                            STRSUBSTNO('%1',HazMatProductClass."Option Type"))),
                              DocNameSpace,NewChild);
                        IF HazMatItemCount = 1 THEN
                          HazMatDescription := ''
                        ELSE
                          HazMatDescription += ' PART 2: ';

                        IF HazMatProductClass.Code <> '' THEN
                          HazMatDescription += STRSUBSTNO('%1, ',HazMatProductClass.Code);
                        IF HazMatProductClass."Proper Shipping Name" <> '' THEN
                          HazMatDescription += STRSUBSTNO('%1, ',HazMatProductClass."Proper Shipping Name");
                        IF HazMatProductClass."Technical Name" <> '' THEN
                          HazMatDescription += STRSUBSTNO('%1, ',HazMatProductClass."Technical Name");
                        IF HazMatProductClass."Hazard Division No." <> '' THEN
                          HazMatDescription += STRSUBSTNO('%1, ',HazMatProductClass."Hazard Division No.");
                        IF HazMatProductClass."Packing Group No." <> '' THEN
                          HazMatDescription += STRSUBSTNO('%1, ',HazMatProductClass."Packing Group No.");
                        IF HazMatProductClass."Additional Description" <> '' THEN
                          HazMatDescription += STRSUBSTNO('%1, ',HazMatProductClass."Additional Description");
                        END;
                      UNTIL HazMatItem.NEXT = 0;
                    IF FedExXMLControl."Label PO Reference" <> '' THEN
                      XMLManagement.AddElement(CurrNode,'PurchaseOrderNumber',
                        FedExXMLControl."Label PO Reference",DocNameSpace,NewChild);
                        IF STRLEN(HazMatDescription) > 0 THEN
                          HazMatDescription := COPYSTR(HazMatDescription,1,(STRLEN(HazMatDescription)-2));
                       IF HazMatItemCount <> 0 THEN
                         XMLManagement.AddElement(CurrNode,'Description',
                           HazMatDescription,DocNameSpace,NewChild)
                       ELSE
                      IF STRPOS(PackageLine.Description,'"') <> 0 THEN
                        PackageLine.Description := XMLManagement.Quote2Blank(PackageLine.Description);
                    IF HazMatDescription = '' THEN
                    XMLManagement.AddElement(CurrNode,'Description',
                      PackageLine.Description,DocNameSpace,NewChild);
                    PackageLineWeight := PackageLine."Net Weight";
                    IF PackageLineWeight = 0 THEN
                      PackageLineWeight := PackageLine."Gross Weight";
                    IF PackageLineWeight = 0 THEN
                      IF FedExFreightXMLControl."FX Freight Value Amount" <> 0 THEN
                        PackageLineWeight :=
                          (PackageLine."Value (Cost)"/FedExFreightXMLControl."FX Freight Value Amount") *
                            FedExXMLControl."Package Weight";
                    XMLManagement.AddElement(CurrNode,'Weight','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      CASE PackageLine."Line Weight Type" OF
                        PackageLine."Line Weight Type"::Pounds:
                         XMLManagement.AddElement(CurrNode,'Units','LB',DocNameSpace,NewChild);
                        PackageLine."Line Weight Type"::Kilograms:
                         XMLManagement.AddElement(CurrNode,'Units','KG',DocNameSpace,NewChild);
                      END;
                      XMLManagement.AddElement(CurrNode,'Value',
                        XMLManagement.Decimal2Text(
                          PackageLineWeight,2),DocNameSpace,NewChild);
                        CurrNode := CurrNode.ParentNode;
                    IF FedExFreightXMLControl."FX Freight Shipment Dim Length" <> 0 THEN BEGIN
                      PackageLine."Unit Length" := FedExFreightXMLControl."FX Freight Shipment Dim Length";
                      PackageLine."Unit Width" := FedExFreightXMLControl."FX Freight Shipment Dim Width";
                      PackageLine."Unit Height" := FedExFreightXMLControl."FX Freight Shipment Dim Height";
                    END;
                    XMLManagement.AddElement(CurrNode,'Dimensions','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'Length',
                        XMLManagement.Integer2Text(
                          ROUND(PackageLine."Unit Length",1,'>')),
                            DocNameSpace,NewChild);
                      XMLManagement.AddElement(CurrNode,'Width',
                        XMLManagement.Integer2Text(
                          ROUND(PackageLine."Unit Width",1,'>')),
                            DocNameSpace,NewChild);
                      XMLManagement.AddElement(CurrNode,'Height',
                        XMLManagement.Integer2Text(
                          ROUND(PackageLine."Unit Height",1,'>')),
                            DocNameSpace,NewChild);
                      XMLManagement.AddElement(CurrNode,'Units',
                        FedExFreightXMLControl."FX Freight Shipment Dim Units",DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                      IF PackageLine.Cubage <> 0 THEN BEGIN
                        XMLManagement.AddElement(CurrNode,'Volume','',DocNameSpace,NewChild);
                        CurrNode := NewChild;
                          CASE FedExFreightXMLControl."FX Freight Shipment Dim Units" OF
                            'IN':
                              XMLManagement.AddElement(CurrNode,'Units','CUBIC_FT',DocNameSpace,NewChild);
                            'CM':
                              XMLManagement.AddElement(CurrNode,'Units','CUBIC_M',DocNameSpace,NewChild);
                          END;
                          XMLManagement.AddElement(CurrNode,'Value',
                            XMLManagement.Decimal2Text(
                              PackageLine.Cubage,2),DocNameSpace,NewChild);
                          CurrNode := CurrNode.ParentNode;
                      END;
                    CurrNode := CurrNode.ParentNode;
                  UNTIL PackageLine.NEXT = 0;
              END ELSE BEGIN
                SalesLine.RESET;
                SalesLine.SETFILTER("Document Type",'%1',RateShopHeader."Source Subtype");
                SalesLine.SETRANGE("Document No.",RateShopHeader."Source ID");
                SalesLine.SETRANGE(Type,SalesLine.Type::Item);
                IF SalesLine.FIND('-') THEN
                  REPEAT
                  IF (SalesLine."Unit of Measure" = 'PCS') OR (SalesLine."Unit of Measure" = 'EA') THEN
                    SalesLine."Unit of Measure" := 'PIECE';
                    Item.GET(SalesLine."No.");
                    HazMatItem.RESET;
                    HazMatItem.SETRANGE(HazMatItem.Type,HazMatItem.Type::Item);
                    HazMatItem.SETRANGE("No.",Item."No.");
                    IF HazMatItem.GET(HazMatItem.Type::Item,Item."No.") THEN BEGIN
                      HazMatProductClass.GET(HazMatItem."Product Class");
                      HazMatRate := TRUE;
                    END;
                    IF FedExFreightXMLControl."FX Freight Line Item Class" = '' THEN
                      FedExFreightXMLControl."FX Freight Line Item Class" :=
                        ShippingAgentService."Default LTL Freight Type";
                    IF Item."LTL Freight Type" = '' THEN
                      Item."LTL Freight Type" := FedExFreightXMLControl."FX Freight Line Item Class";
                    CASE Item."LTL Freight Type" OF
                      '50':
                        FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_050';
                      '55':
                        FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_055';
                      '60':
                        FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_060';
                      '65':
                        FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_065';
                      '70':
                        FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_070';
                      '77':
                        FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_077';
                      '77.5':
                        FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_077_5';
                      '85':
                        FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_085';
                      '92.5':
                        FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_092_5';
                      '100':
                        FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_100';
                      '110':
                        FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_110';
                      '125':
                        FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_125';
                      '150':
                        FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_150';
                      '175':
                        FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_175';
                      '200':
                        FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_200';
                      '250':
                        FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_250';
                      '300':
                        FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_300';
                      '400':
                        FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_400';
                      '500':
                        FedExFreightXMLControl."FX Freight Line Item Class" := 'CLASS_500';
                    END;

                    XMLManagement.AddElement(CurrNode,'LineItems','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'FreightClass',
                        FedExFreightXMLControl."FX Freight Line Item Class",DocNameSpace,NewChild);
                      IF FedExFreightXMLControl."FX Freight LIC Prov. by Cust." THEN
                        XMLManagement.AddElement(CurrNode,'ClassProvidedByCustomer',
                          'true',DocNameSpace,NewChild);
                    IF FedExFreightXMLControl."FX Freight Total Handling Unit" <> 0 THEN
                      XMLManagement.AddElement(CurrNode,'HandlingUnits',
                        XMLManagement.Decimal2Text(
                        FedExFreightXMLControl."FX Freight Total Handling Unit",0),
                          DocNameSpace,NewChild)
                  ELSE
                    XMLManagement.AddElement(CurrNode,'HandlingUnits',
                      XMLManagement.Decimal2Text(
                          1,0),DocNameSpace,NewChild);
                      IF PackagingType <> '' THEN
                        XMLManagement.AddElement(CurrNode,'Packaging',
                          PackagingType,DocNameSpace,NewChild);
                      XMLManagement.AddElement(CurrNode,'Pieces',
                        XMLManagement.Decimal2Text(
                          SalesLine.Quantity,0),DocNameSpace,NewChild);
                      IF Item."NMFC Code" <> '' THEN
                        XMLManagement.AddElement(CurrNode,'NmfcCode',
                          Item."NMFC Code",DocNameSpace,NewChild)
                      ELSE
                        IF ShippingSetup."Default NMFC Code" <> '' THEN
                          XMLManagement.AddElement(CurrNode,'NmfcCode',
                            ShippingSetup."Default NMFC Code",DocNameSpace,NewChild);

                      IF FedExXMLControl."Label PO Reference" <> '' THEN
                      XMLManagement.AddElement(CurrNode,'PurchaseOrderNumber',
                        FedExXMLControl."Label PO Reference",DocNameSpace,NewChild);
                      IF HazMatRate THEN
                        XMLManagement.AddElement(CurrNode,'HazardousMaterials',
                          FedExManagement.Blank2Underscore(UPPERCASE(
                            STRSUBSTNO('%1',HazMatProductClass."Option Type"))),
                              DocNameSpace,NewChild);
                      IF STRPOS(PackageLine.Description,'"') <> 0 THEN
                        PackageLine.Description := XMLManagement.Quote2Blank(PackageLine.Description);
                      XMLManagement.AddElement(CurrNode,'Description',
                        SalesLine.Description,DocNameSpace,NewChild);
                      XMLManagement.AddElement(CurrNode,'Weight','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        XMLManagement.AddElement(CurrNode,
                          'Units',FedExXMLControl."Package Weight Units",DocNameSpace,NewChild);
                        XMLManagement.AddElement(CurrNode,'Value',
                          XMLManagement.Decimal2Text(
                            SalesLine."Net Weight" * SalesLine."Outstanding Quantity",2),DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    CurrNode := CurrNode.ParentNode;
                  UNTIL SalesLine.NEXT = 0;
              END;
                    CurrNode := CurrNode.ParentNode;

            IF FedExFreightXMLControl."Special Delivery Instructions" <> '' THEN
                XMLManagement.AddElement(CurrNode,'DeliveryInstructions',
              FedExFreightXMLControl."Special Delivery Instructions",DocNameSpace,NewChild);
              END;

          IF "World Wide Service" THEN BEGIN
            IF NOT ExportDoc.GET("Export Document No.") THEN
              ExportDoc.INIT;
            XMLManagement.AddElement(CurrNode,'CustomsClearanceDetail','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              IF "Include Broker Info." THEN BEGIN
                XMLManagement.AddElement(CurrNode,'Brokers','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  CASE FedExXMLControlExt."Broker Type" OF
                    FedExXMLControlExt."Broker Type"::IMPORT:
                      XMLManagement.AddElement(CurrNode,'Type','IMPORT',DocNameSpace,NewChild);
                    FedExXMLControlExt."Broker Type"::EXPORT:
                      XMLManagement.AddElement(CurrNode,'Type','EXPORT',DocNameSpace,NewChild);
                  END;
                XMLManagement.AddElement(CurrNode,'Broker','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(
                    CurrNode,'AccountNumber',FedExXMLControlExt."Broker Account No.",
                      DocNameSpace,NewChild);
                  IF FedExXMLControlExt."Broker SSN/EIN" <> '' THEN BEGIN
                    XMLManagement.AddElement(CurrNode,'Tins','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(
                        CurrNode,'TinType',FedExXMLControlExt."Broker TIN Type",DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'Number',FedExXMLControlExt."Broker SSN/EIN",DocNameSpace,NewChild);
                    CurrNode := CurrNode.ParentNode;
                  END;
                  XMLManagement.AddElement(CurrNode,'Contact','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(
                        CurrNode,'ContactId',FedExXMLControlExt."Broker Contact Id",DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                      CurrNode,'PersonName',FedExXMLControlExt."Broker Name",DocNameSpace,NewChild);
                    XMLManagement.AddElement(
                        CurrNode,'Title',FedExXMLControlExt."Broker Title",DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                      CurrNode,'CompanyName',FedExXMLControlExt."Broker Name",DocNameSpace,NewChild);
                    XMLManagement.AddElement(
                      CurrNode,'PhoneNumber',
                      XMLManagement.FixPhoneNo(
                        FedExXMLControlExt."Broker Phone No."),DocNameSpace,NewChild);
                    XMLManagement.AddElement(
                        CurrNode,'PhoneExtension',FedExXMLControlExt."Broker Phone Ext.",DocNameSpace,NewChild);
                    XMLManagement.AddElement(
                      CurrNode,'EMailAddress',FedExXMLControlExt."Broker Email Address",
                        DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
                  XMLManagement.AddElement(CurrNode,'Address','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(
                      CurrNode,'StreetLines',FedExXMLControlExt."Broker Address 1",DocNameSpace,NewChild);
                    XMLManagement.AddElement(
                      CurrNode,'StreetLines',FedExXMLControlExt."Broker Address 2",DocNameSpace,NewChild);
                    XMLManagement.AddElement(
                      CurrNode,'City',FedExXMLControlExt."Broker City",DocNameSpace,NewChild);
                    XMLManagement.AddElement(
                        CurrNode,'StateOrProvinceCode',XMLManagement.FixState(
                        FedExXMLControlExt."Broker State"),DocNameSpace,NewChild);
                    XMLManagement.AddElement(
                      CurrNode,'PostalCode',
                      XMLManagement.FixZIPCode(
                        FedExXMLControlExt."Broker Postal Code"),DocNameSpace,NewChild);
                    XMLManagement.AddElement(
                      CurrNode,'CountryCode',
                        FedExXMLControlExt."Broker Country Code",DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
                CurrNode := CurrNode.ParentNode;
                  CurrNode := CurrNode.ParentNode;
                XMLManagement.AddElement(
                  CurrNode,'ClearanceBrokerage',
                    FedExXMLControlExt."Clearance Brokerage Type",DocNameSpace,NewChild);
              END;
              IF FedExXMLControlExt."Customs Option Type" <> '' THEN BEGIN
                XMLManagement.AddElement(CurrNode,'CustomsOptions','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(
                    CurrNode,'Type',FedExXMLControlExt."Customs Option Type",DocNameSpace,NewChild);
                  IF FedExXMLControlExt."Customs Option Description" <> '' THEN
                    XMLManagement.AddElement(
                      CurrNode,'Description',FedExXMLControlExt."Customs Option Description",
                        DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
              END;

              // ImporterOfRecord from ExportDoc Alt-Sold-To
              IF ExportDoc."Alt. Sold-to" THEN BEGIN
                FedExXMLControlExt."Importer Country" := ExportDoc."Sold-to Country Code";
                FedExXMLControlExt."Importer Country Name" :=  '';
                FedExXMLControlExt."Importer Name" := ExportDoc."Sold-to Contact";
                FedExXMLControlExt."Importer Company" := ExportDoc."Sold-to Name";
                FedExXMLControlExt."Importer Address 1" := ExportDoc."Sold-to Address";
                FedExXMLControlExt."Importer Address 2" := ExportDoc."Sold-to Address 2";
                FedExXMLControlExt."Importer City" := ExportDoc."Sold-to City";
                FedExXMLControlExt."Importer State" := ExportDoc."Sold-to State";
                FedExXMLControlExt."Importer Postal Code" := ExportDoc."Sold-to ZIP Code";
                FedExXMLControlExt."Importer Account No." := '';
                FedExXMLControlExt."Importer Phone No." := ExportDoc."Sold-to Phone No.";
                FedExXMLControlExt."Importer Email" := '';
                FedExXMLControlExt."Importer SSN/EIN No." := ExportDoc."Sold-to VAT Registration No.";
                FedExXMLControlExt."Importer Residential" := FALSE;
              END;

              IF FedExXMLControlExt."Importer Company" <> '' THEN BEGIN
                XMLManagement.AddElement(CurrNode,'ImporterOfRecord','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  IF FedExXMLControlExt."Importer SSN/EIN No." <> '' THEN BEGIN
                    XMLManagement.AddElement(
                      CurrNode,'AccountNumber',FedExXMLControlExt."Importer Account No.",DocNameSpace,NewChild);
                    IF FedExXMLControlExt."Importer SSN/EIN No." <> '' THEN
                    XMLManagement.AddElement(CurrNode,'Tins','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(
                        CurrNode,'TinType','BUSINESS_NATIONAL',DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'Number',FedExXMLControlExt."Importer SSN/EIN No.",DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                  END;
                  XMLManagement.AddElement(
                    CurrNode,'Contact','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(
                      CurrNode,'PersonName',FedExXMLControlExt."Importer Name",DocNameSpace,NewChild);
                    IF ExportDoc."Alt. Sold-to" THEN
                      XMLManagement.AddElement(
                        CurrNode,'CompanyName',FedExXMLControlExt."Importer Company",DocNameSpace,NewChild)
                    ELSE
                      XMLManagement.AddElement(
                        CurrNode,'CompanyName',FedExXMLControlExt."Broker Name",DocNameSpace,NewChild);
                    XMLManagement.AddElement(
                      CurrNode,'PhoneNumber',
                        XMLManagement.FixPhoneNo(
                          FedExXMLControlExt."Importer Phone No."),DocNameSpace,NewChild);
                    CurrNode := CurrNode.ParentNode;
                  XMLManagement.AddElement(
                    CurrNode,'Address','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(
                      CurrNode,'StreetLines',FedExXMLControlExt."Importer Address 1",DocNameSpace,NewChild);
                    XMLManagement.AddElement(
                      CurrNode,'StreetLines',FedExXMLControlExt."Importer Address 2",DocNameSpace,NewChild);
                    XMLManagement.AddElement(
                      CurrNode,'City',FedExXMLControlExt."Importer City",DocNameSpace,NewChild);
                    XMLManagement.AddElement(
                      CurrNode,'StateOrProvinceCode',XMLManagement.FixState(
                            FedExXMLControlExt."Importer State"),DocNameSpace,NewChild);
                    XMLManagement.AddElement(
                      CurrNode,'PostalCode',
                        XMLManagement.FixZIPCode(
                          FedExXMLControlExt."Importer Postal Code"),DocNameSpace,NewChild);
                    XMLManagement.AddElement(
                      CurrNode,'CountryCode',
                        FedExXMLControlExt."Importer Country",DocNameSpace,NewChild);
                    CurrNode := CurrNode.ParentNode;
                  CurrNode := CurrNode.ParentNode;
              END;

              IF FedExXMLControlExt."Recipient Customs ID" <> '' THEN BEGIN
                XMLManagement.AddElement(CurrNode,'RecipientCustomsId','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(
                    CurrNode,'Type',FedExXMLControlExt."Recipient Customs ID Type",DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'Value',FedExXMLControlExt."Recipient Customs ID",DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
              END;
              XMLManagement.AddElement(CurrNode,'DutiesPayment','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                IF FedExXMLControlExt."Duties Payor Type" <> '' THEN
                XMLManagement.AddElement(
                    CurrNode,'PaymentType',FedExXMLControlExt."Duties Payor Type",DocNameSpace,NewChild);
                  IF FedExXMLControlExt."Duties Payor Account No." <> '' THEN BEGIN
                XMLManagement.AddElement(CurrNode,'Payor','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'ResponsibleParty','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                  XMLManagement.AddElement(
                        CurrNode,'AccountNumber',FedExXMLControlExt."Duties Payor Account No.",
                      DocNameSpace,NewChild);
                      IF FedExXMLControl3."Duties Payor Tins No" <> '' THEN BEGIN
                  XMLManagement.AddElement(
                          CurrNode,'Tins','',DocNameSpace,NewChild);
                        CurrNode := NewChild;
                          XMLManagement.AddElement(
                            CurrNode,'TinType',FedExXMLControl3."Duties Payor Tins Type",
                        DocNameSpace,NewChild);
                          XMLManagement.AddElement(
                            CurrNode,'Number',FedExXMLControl3."Duties Payor Tins No",
                              DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                  END;
                      XMLManagement.AddElement(CurrNode,'Contact','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        XMLManagement.AddElement(
                          CurrNode,'ContactId',FedExXMLControl3."Duties Payor Contact Id",
                      DocNameSpace,NewChild);
                        XMLManagement.AddElement(
                          CurrNode,'PersonName',FedExXMLControl3."Duties Payor Name",
                            DocNameSpace,NewChild);
                        XMLManagement.AddElement(
                          CurrNode,'PhoneNumber',
                            XMLManagement.FixPhoneNo(FedExXMLControl3."Duties Payor Phone"),
                              DocNameSpace,NewChild);
                        XMLManagement.AddElement(
                          CurrNode,'EMailAddress',FedExXMLControl3."Duties Payor Email",
                            DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
                      XMLManagement.AddElement(CurrNode,'Address','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        XMLManagement.AddElement(
                          CurrNode,'StreetLines',FedExXMLControl3."Duties Payor Address",
                            DocNameSpace,NewChild);
                        XMLManagement.AddElement(CurrNode,'City',FedExXMLControl3."Duties Payor City",
                          DocNameSpace,NewChild);
                        XMLManagement.AddElement(
                          CurrNode,'StateOrProvinceCode',
                            XMLManagement.FixState(FedExXMLControl3."Duties Payor State"),
                              DocNameSpace,NewChild);
                        XMLManagement.AddElement(
                          CurrNode,'PostalCode',
                            XMLManagement.FixZIPCode(FedExXMLControl3."Duties Payor Postal"),
                              DocNameSpace,NewChild);
                        XMLManagement.AddElement(
                          CurrNode,'CountryCode',XMLManagement.GetFedExCountryCode(
                            FedExXMLControlExt."Duties Payor Country Code"),
                              DocNameSpace,NewChild);
                        IF FedExXMLControl3."Duties Payor Residential" <> '' THEN
                          XMLManagement.AddElement(
                            CurrNode,'Residential',FedExXMLControl3."Duties Payor Residential",
                              DocNameSpace,NewChild);
                        CurrNode := CurrNode.ParentNode;
                      CurrNode := CurrNode.ParentNode;
                CurrNode := CurrNode.ParentNode;
                END;
              CurrNode := CurrNode.ParentNode;

              IF NOT FedExXMLControlExt."Non-dutiable Document" THEN BEGIN
                XMLManagement.AddElement(
                  CurrNode,'DocumentContent','NON_DOCUMENTS',DocNameSpace,NewChild);
              END ELSE
                XMLManagement.AddElement(
                  CurrNode,'DocumentContent','DOCUMENTS_ONLY',DocNameSpace,NewChild);

              IF FedExXMLControlExt."Non-dutiable Document" THEN
                IF FedExXMLControlExt."Export Declared Value" = 0 THEN
                  FedExXMLControlExt."Export Declared Value" := 1;

              XMLManagement.AddElement(CurrNode,'CustomsValue','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(
                  CurrNode,'Currency',FedExXMLControlExt."Export Declared Value Currency",
                    DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'Amount',
                  XMLManagement.Decimal2Text(
                    FedExXMLControlExt."Export Declared Value",2),DocNameSpace,NewChild);
              CurrNode := CurrNode.ParentNode;

              IF "Recipient Related" THEN
                XMLManagement.AddElement(CurrNode,'PartiesToTransactionAreRelated','true',DocNameSpace,NewChild);
              IF FedExXMLControlExt."Include Commercial Invoice" THEN BEGIN
                XMLManagement.AddElement(CurrNode,'CommercialInvoice','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  IF FedExXMLControlExt."Commercial Invoice Comments" <> '' THEN
                    XMLManagement.AddElement(CurrNode,'Comments',
                      FedExXMLControlExt."Commercial Invoice Comments",DocNameSpace,NewChild);
                  IF FedExXMLControlExt."CI Freight Charge" <> 0 THEN BEGIN
                    XMLManagement.AddElement(CurrNode,'FreightCharge','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(
                        CurrNode,'Currency',"Package Currency Code",DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'Amount',
                        XMLManagement.Decimal2Text(
                          FedExXMLControlExt."CI Freight Charge",2),DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                  END;
                  XMLManagement.AddElement(
                    CurrNode,'TaxesOrMiscellaneousCharge','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'Currency',"Package Currency Code",DocNameSpace,NewChild);
                    XMLManagement.AddElement(
                      CurrNode,'Amount',
                      XMLManagement.Decimal2Text(
                        FedExXMLControlExt."CI Misc Charge",2),DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
                  IF FedExXMLControlExt."CI Purpose of Shipment" <> '' THEN
                    XMLManagement.AddElement(
                      CurrNode,'Purpose',FedExXMLControlExt."CI Purpose of Shipment",
                        DocNameSpace,NewChild);
                  IF FedExXMLControlExt."Customer Invoice No." <> '' THEN BEGIN
                    XMLManagement.AddElement(CurrNode,'CustomerReferences','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(
                        CurrNode,'CustomerReferenceType','INVOICE_NUMBER',DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'Value',FedExXMLControlExt."Customer Invoice No.",DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                  END;
                  XMLManagement.AddElement(
                    CurrNode,'CustomerInvoiceNumber',
                      FedExXMLControlExt."Customer Invoice No.",DocNameSpace,NewChild);

                  IF FedExXMLControlExt."International Terms of Sale" <> '' THEN
                    XMLManagement.AddElement(
                      CurrNode,'TermsOfSale',FedExXMLControlExt."International Terms of Sale",
                        DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
              END;

              IF NOT RateRequest THEN BEGIN
                ExportDoc.GET("Export Document No.");
                IF FedExXMLControlExt."Non-dutiable Document" THEN
                  ExportDoc.DocumentSummaryOnly(TempSummaryLine,FALSE,FALSE)
              ELSE
                ExportDoc.ItemSummaryByItem(TempSummaryLine,TRUE);
              END ELSE
               "Total Packages" := 1;

              Counter := 0;

              IF TempSummaryLine.FIND('-') THEN
                REPEAT
                  XMLManagement.AddElement(CurrNode,'Commodities','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    IF "Total Packages" = 1 THEN
                      XMLManagement.AddElement(CurrNode,'NumberOfPieces','1',DocNameSpace,NewChild)
                    ELSE
                      XMLManagement.AddElement(
                        CurrNode,'NumberOfPieces',
                        XMLManagement.Decimal2Text(
                          ExportDoc.TotalPackagesForCommodity(
                            -1,'',TempSummaryLine."Schedule B Code",TempSummaryLine.Description,
                            TempSummaryLine."Country of Origin Code",
                            TempSummaryLine."Source Unit of Measure (Base)",''),
                          0),
                        DocNameSpace,NewChild);
                    XMLManagement.AddElement(CurrNode,'Description',COPYSTR(
                      TempSummaryLine.Description,1,30),DocNameSpace,NewChild);
                    XMLManagement.AddElement(CurrNode,'CountryOfManufacture',
                      XMLManagement.GetFedExCountryCode(
                        TempSummaryLine."Country of Origin Code"),DocNameSpace,NewChild);

                    IF TempSummaryLine."Schedule B Code" <> '' THEN
                      XMLManagement.AddElement(CurrNode,'HarmonizedCode',
                        TempSummaryLine."Schedule B Code",DocNameSpace,NewChild);

                    XMLManagement.AddElement(CurrNode,'Weight','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'Units','LB',DocNameSpace,NewChild);
                      IF TempSummaryLine.Type = TempSummaryLine.Type::Item THEN
                        IF TempSummaryLine."No." <> '' THEN BEGIN
                          Item.GET(TempSummaryLine."No.");
                          TempSummaryLine.Weight := TempSummaryLine."Source Quantity" * Item."Net Weight";
                        END;
                      XMLManagement.AddElement(CurrNode,'Value',XMLManagement.Decimal2Text(
                        ROUND(TempSummaryLine.Weight,0.1),0),DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    IF TempSummaryLine."Schedule B Quantity 1" <> 0 THEN BEGIN
                      TempSummaryLine."Schedule B Quantity 1" :=
                        ROUND(TempSummaryLine."Schedule B Quantity 1",1,'>');
                      XMLManagement.AddElement(CurrNode,'Quantity',XMLManagement.Decimal2Text(
                        TempSummaryLine."Schedule B Quantity 1",0),DocNameSpace,NewChild);
                    END ELSE BEGIN
                      TempSummaryLine."Source Quantity (Base)" :=
                        ROUND(TempSummaryLine."Source Quantity (Base)",1,'>');
                      XMLManagement.AddElement(CurrNode,'Quantity',XMLManagement.Decimal2Text(
                        TempSummaryLine."Source Quantity (Base)",0),DocNameSpace,NewChild);
                    END;
                    IF TempSummaryLine."Schedule B Unit of Measure 1" <> '' THEN BEGIN
                      XMLManagement.AddElement(CurrNode,'QuantityUnits',XMLManagement.FixUnitOfMeasure(
                        TempSummaryLine."Schedule B Unit of Measure 1"),DocNameSpace,NewChild);
                    END ELSE
                      XMLManagement.AddElement(CurrNode,'QuantityUnits',XMLManagement.FixUnitOfMeasure(
                        TempSummaryLine."Source Unit of Measure"),DocNameSpace,NewChild);

                    XMLManagement.AddElement(CurrNode,'UnitPrice','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'Currency',"Package Currency Code",DocNameSpace,NewChild);
                      XMLManagement.AddElement(CurrNode,'Amount',XMLManagement.Decimal2Text(
                        TempSummaryLine."Value USD" / TempSummaryLine."Source Quantity",2),
                        DocNameSpace,NewChild);
                    CurrNode := CurrNode.ParentNode;
                    XMLManagement.AddElement(CurrNode,'CustomsValue','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'Currency',"Package Currency Code",DocNameSpace,NewChild);
                      XMLManagement.AddElement(CurrNode,'Amount',XMLManagement.Decimal2Text(
                        TempSummaryLine."Value USD",2),DocNameSpace,NewChild);
                    CurrNode := CurrNode.ParentNode;
                    IF FedExXMLControlExt."Export License No." <> '' THEN BEGIN
                      XMLManagement.AddElement(
                        CurrNode,'ExportLicenseNumber',FedExXMLControlExt."Export License No.",
                        DocNameSpace,NewChild);
                      IF FedExXMLControlExt."Export License Exp. Date" <> 0D THEN
                        XMLManagement.AddElement(CurrNode,'ExportLicenseExpirationDate',
                          XMLManagement.FormatDateYYYYMMDD(
                            FedExXMLControlExt."Export License Exp. Date"),DocNameSpace,NewChild);
                    END;

                  IF FedExXMLControlExt.NAFTA THEN BEGIN
                      XMLManagement.AddElement(CurrNode,'NaftaDetail','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        IF TempSummaryLine."Preference Criteria" <> 0 THEN
                          XMLManagement.AddElement(
                            CurrNode,'PreferenceCriterion',
                              STRSUBSTNO('%1',TempSummaryLine."Preference Criteria"),
                                DocNameSpace,NewChild);
                        CASE TempSummaryLine."Producer of Good Indicator" OF
                          0:
                            XMLManagement.AddElement(
                              CurrNode,'ProducerDetermination','NO_1',DocNameSpace,NewChild);
                          1:
                            XMLManagement.AddElement(
                              CurrNode,'ProducerDetermination','YES',DocNameSpace,NewChild);
                          2:
                            XMLManagement.AddElement(
                             CurrNode,'ProducerDetermination','NO_1',DocNameSpace,NewChild);
                          3:
                            XMLManagement.AddElement(
                              CurrNode,'ProducerDetermination','NO_2',DocNameSpace,NewChild);
                          4:
                            XMLManagement.AddElement(
                              CurrNode,'ProducerDetermination','NO_3',DocNameSpace,NewChild);
                        END;
                        IF FedExXMLControlExt."NAFTA Producer ID" <> '' THEN
                          XMLManagement.AddElement(
                            CurrNode,'ProducerId',FedExXMLControlExt."NAFTA Producer ID",DocNameSpace,NewChild);
                        IF TempSummaryLine."RVC in Net Cost Method" THEN
                          XMLManagement.AddElement(
                            CurrNode,'NetCostMethod','NC',DocNameSpace,NewChild)
                        ELSE
                          XMLManagement.AddElement(
                            CurrNode,'NetCostMethod','NO',DocNameSpace,NewChild);
                        IF ((FedExXMLControlExt."NAFTA Cost Beg. Date" <> 0D) AND
                            (FedExXMLControlExt."NAFTA Cost End Date" <> 0D)) THEN BEGIN
                          XMLManagement.AddElement(
                            CurrNode,'NetCostDateRange','',DocNameSpace,NewChild);
                          CurrNode := NewChild;
                            XMLManagement.AddElement(
                              CurrNode,'Begins',XMLManagement.FormatDateYYYYMMDD(FedExXMLControlExt."NAFTA Cost Beg. Date"),
                                DocNameSpace,NewChild);
                            XMLManagement.AddElement(
                              CurrNode,'Ends',XMLManagement.FormatDateYYYYMMDD(FedExXMLControlExt."NAFTA Cost End Date"),
                                DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                        END;
                        CurrNode := CurrNode.ParentNode;
                    END;
                  CurrNode := CurrNode.ParentNode;
                  Counter := Counter + 1;
                UNTIL (TempSummaryLine.NEXT = 0) OR (Counter > 20);

              IF ((FedExXMLControlExt."Non-dutiable Document") AND (Counter = 0)) THEN BEGIN
                XMLManagement.AddElement(CurrNode,'Commodities','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(CurrNode,'NumberOfPieces','1',DocNameSpace,NewChild);
                  XMLManagement.AddElement(CurrNode,'Description','Non-Dutiable Document',
                    DocNameSpace,NewChild);
                  XMLManagement.AddElement(CurrNode,'CountryOfManufacture','US',
                    DocNameSpace,NewChild);
                  XMLManagement.AddElement(CurrNode,'Weight','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'Units','LB',DocNameSpace,NewChild);
                    XMLManagement.AddElement(CurrNode,'Value','1',DocNameSpace,NewChild);
                    CurrNode := CurrNode.ParentNode;
                  XMLManagement.AddElement(CurrNode,'Quantity','1',DocNameSpace,NewChild);
                  XMLManagement.AddElement(CurrNode,'QuantityUnits','PCS',DocNameSpace,NewChild);
                  XMLManagement.AddElement(CurrNode,'UnitPrice','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'Currency',"Package Currency Code",DocNameSpace,NewChild);
                    XMLManagement.AddElement(CurrNode,'Amount','1.00',DocNameSpace,NewChild);
                    CurrNode := CurrNode.ParentNode;
                  XMLManagement.AddElement(CurrNode,'CustomsValue','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'Currency',"Package Currency Code",DocNameSpace,NewChild);
                    XMLManagement.AddElement(CurrNode,'Amount','1.00',DocNameSpace,NewChild);
                    CurrNode := CurrNode.ParentNode;
                  CurrNode := CurrNode.ParentNode;
                END;

              XMLManagement.AddElement(CurrNode,'ExportDetail','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                IF "Shipper Country Code" = 'CA' THEN BEGIN
                  IF FedExXMLControlExt."Export B13A Filing Option" = '' THEN
                    FedExXMLControlExt."Export B13A Filing Option" := 'NOT_REQUIRED'
                  ELSE
                  XMLManagement.AddElement(
                    CurrNode,'B13AFilingOption',FedExXMLControlExt."Export B13A Filing Option",
                      DocNameSpace,NewChild);
                END;
                IF FedExXMLControlExt."Export Compliance Statement" <> '' THEN
                XMLManagement.AddElement(
                  CurrNode,'ExportComplianceStatement',FedExXMLControlExt."Export Compliance Statement",
                    DocNameSpace,NewChild);
                IF "Shipper Country Code" = 'CA' THEN
                  IF NOT "Return Shipment" THEN
                    IF FedExXMLControlExt."Export License No." <> '' THEN
                      XMLManagement.AddElement(CurrNode,'PermitNumber',FedExXMLControlExt."Export License No.",
                        DocNameSpace,NewChild);
              CurrNode := CurrNode.ParentNode;
            CurrNode := CurrNode.ParentNode;
          END;

          IF "Call Tag Request" THEN BEGIN
            XMLManagement.AddElement(CurrNode,'PickupDetail','',DocNameSpace,NewChild);
            CurrNode := NewChild;
            IF "Call Tag Ready Date" <> WORKDATE THEN
              XMLManagement.AddElement(
                CurrNode,'ReadyDateTime',
                XMLManagement.FormatDateYYYYMMDD(
                  "Call Tag Ready Date")+ 'T08:00:00-00:00',DocNameSpace,NewChild)
            ELSE
              XMLManagement.AddElement(
                CurrNode,'ReadyDateTime',
                XMLManagement.FormatDateYYYYMMDD(
                  "Call Tag Ready Date")+ 'T' +
                  XMLManagement.FormatTime24HRMMSS(
                    TIME) + '-00:00',DocNameSpace,NewChild);

            XMLManagement.AddElement(
              CurrNode,'LatestPickupDateTime',
              XMLManagement.FormatDateYYYYMMDD(
                "Call Tag Latest Pickup Date") + 'T18:00:00-00:00',DocNameSpace,NewChild);

            XMLManagement.AddElement(
              CurrNode,'CourierInstructions',"Call Tag Courier Instructions",DocNameSpace,NewChild);

            XMLManagement.AddElement(
              CurrNode,'RequestType',"Call Tag Request Type",DocNameSpace,NewChild);
            XMLManagement.AddElement(
              CurrNode,'RequestSource',"Call Tag Request Source",DocNameSpace,NewChild);

            CurrNode := CurrNode.ParentNode;
          END;

          IF "Smart Post Shipment" THEN BEGIN
            XMLManagement.AddElement(CurrNode,'SmartPostDetail','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(CurrNode,'Indicia',"Smart Post Indicia",DocNameSpace,NewChild);
              IF "Smart Post Endorsement" <> '' THEN
                XMLManagement.AddElement(
                  CurrNode,'AncillaryEndorsement',"Smart Post Endorsement",DocNameSpace,NewChild);
              IF "Smart Post Delivery Conf." THEN
                XMLManagement.AddElement(
                  CurrNode,'SpecialServices','USPS_DELIVERY_CONFIRMATION',DocNameSpace,NewChild);
              XMLManagement.AddElement(CurrNode,'HubId',"Smart Post Hub ID",DocNameSpace,NewChild);
            CurrNode := CurrNode.ParentNode;
          END;

          IF "Block Insight Visibility" THEN
            XMLManagement.AddElement(CurrNode,'BlockInsightVisibility','true',DocNameSpace,NewChild);

          IF "FedEx Freight" THEN BEGIN
            XMLManagement.AddElement(CurrNode,'LabelSpecification','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(CurrNode,'LabelFormatType',
               FedExManagement.Blank2Underscore(UPPERCASE(
                 FedExFreightXMLControl."Freight Label Format Type")),DocNameSpace,NewChild);
              XMLManagement.AddElement(CurrNode,'ImageType',
               FedExFreightXMLControl."Freight Label Image Type",DocNameSpace,NewChild);
              XMLManagement.AddElement(CurrNode,'LabelStockType',
               FedExFreightXMLControl."Freight Label Stock Type",DocNameSpace,NewChild);
          END ELSE BEGIN
            XMLManagement.AddElement(CurrNode,'LabelSpecification','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(
                CurrNode,'LabelFormatType',"Label Format Type",DocNameSpace,NewChild);
              XMLManagement.AddElement(CurrNode,'ImageType',"Label Image Type",DocNameSpace,NewChild);
              CASE "Label Stock Type" OF
                "Label Stock Type"::"4X6 with Trailing Doc Tab":
                    XMLManagement.AddElement(
                      CurrNode,'LabelStockType','STOCK_4X6.75_TRAILING_DOC_TAB',DocNameSpace,NewChild);
                "Label Stock Type"::"4X6 with Leading Doc Tab":
                    XMLManagement.AddElement(
                      CurrNode,'LabelStockType','STOCK_4X6.75_LEADING_DOC_TAB',DocNameSpace,NewChild);
                "Label Stock Type"::"4X6 W/O Doc Tab":
                    XMLManagement.AddElement(CurrNode,'LabelStockType','STOCK_4X6',DocNameSpace,NewChild);
              END;
            END;

            IF NOT "Return Shipment" THEN BEGIN
              XMLManagement.AddElement(
                CurrNode,'LabelPrintingOrientation',"Label Printing Orientation",DocNameSpace,NewChild);

              IF NOT "FedEx Freight" THEN BEGIN
                XMLManagement.AddElement(CurrNode,'PrintedLabelOrigin','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(CurrNode,'Contact','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    IF "Alternate Ship-To Person Name" <> '' THEN
                      XMLManagement.AddElement(
                        CurrNode,'PersonName',"Alternate Ship-To Person Name",DocNameSpace,NewChild);
                    IF "Alternate Ship-To Company Name" <> '' THEN
                      XMLManagement.AddElement(
                        CurrNode,'CompanyName',"Alternate Ship-To Company Name",DocNameSpace,NewChild);
                    XMLManagement.AddElement(
                      CurrNode,'PhoneNumber',
                      XMLManagement.FixPhoneNo(
                        "Alternate Ship-To Phone No."),DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
                XMLManagement.AddElement(CurrNode,'Address','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(
                    CurrNode,'StreetLines',"Alternate Ship-To Address 1",DocNameSpace,NewChild);
                  IF "Alternate Ship-To Address 2" <> '' THEN
                    XMLManagement.AddElement(
                      CurrNode,'StreetLines',"Alternate Ship-To Address 2",DocNameSpace,NewChild);
                  IF "Alternate Ship-To City" <> '' THEN
                    XMLManagement.AddElement(
                      CurrNode,'City',"Alternate Ship-To City",DocNameSpace,NewChild);
                  IF "Alternate Ship-To State" <> '' THEN
                  XMLManagement.AddElement(
                    CurrNode,'StateOrProvinceCode',
                    XMLManagement.FixState(
                      "Alternate Ship-To State"),DocNameSpace,NewChild);
                  IF "Alternate Ship-To Postal Code" <> '' THEN
                  XMLManagement.AddElement(
                    CurrNode,'PostalCode',
                    XMLManagement.FixZIPCode(
                      "Alternate Ship-To Postal Code"),DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'CountryCode',"Alternate Ship-To Country",DocNameSpace,NewChild);
                  IF "Alternate Ship-To Residential" THEN
                    XMLManagement.AddElement(CurrNode,'Residential','true',DocNameSpace,NewChild)
                  ELSE
                    XMLManagement.AddElement(CurrNode,'Residential','false',DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
                CurrNode := CurrNode.ParentNode;
              END;
            END;

            IF "Enable Doc Tab" THEN BEGIN
              XMLManagement.AddElement(CurrNode,'CustomerSpecifiedDetail','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(CurrNode,'DocTabContent','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(CurrNode,'DocTabContentType','ZONE001',DocNameSpace,NewChild);
                  XMLManagement.AddElement(CurrNode,'Zone001','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(
                      CurrNode,'DocTabZoneSpecifications','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'ZoneNumber','1',DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'Header',FedExXMLControlExt."DocTab Field 1 Header",
                          DocNameSpace,NewChild);
                      IF FedExXMLControlExt."DocTab Field 1 Literal Value" <> '' THEN
                        XMLManagement.AddElement(CurrNode,'LiteralValue',FedExXMLControlExt.
                          "DocTab Field 1 Literal Value",DocNameSpace,NewChild)
                      ELSE
                        XMLManagement.AddElement(CurrNode,'DataField',
                          FedExXMLControlExt."DocTab Field 1 DataField",DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    XMLManagement.AddElement(
                      CurrNode,'DocTabZoneSpecifications','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'ZoneNumber','2',DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'Header',FedExXMLControlExt."DocTab Field 2 Header",
                          DocNameSpace,NewChild);
                      IF FedExXMLControlExt."DocTab Field 2 Literal Value" <> '' THEN
                        XMLManagement.AddElement(CurrNode,'LiteralValue',
                          FedExXMLControlExt."DocTab Field 2 Literal Value",DocNameSpace,NewChild)
                      ELSE
                        XMLManagement.AddElement(
                          CurrNode,'DataField',FedExXMLControlExt."DocTab Field 2 DataField",
                            DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    XMLManagement.AddElement(
                      CurrNode,'DocTabZoneSpecifications','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'ZoneNumber','3',DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'Header',FedExXMLControlExt."DocTab Field 3 Header",
                          DocNameSpace,NewChild);
                      IF FedExXMLControlExt."DocTab Field 3 Literal Value" <> '' THEN
                        XMLManagement.AddElement(
                          CurrNode,'LiteralValue',FedExXMLControlExt."DocTab Field 3 Literal Value",
                            DocNameSpace,NewChild)
                      ELSE
                        XMLManagement.AddElement(CurrNode,'DataField',
                          FedExXMLControlExt."DocTab Field 3 DataField",DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    XMLManagement.AddElement(
                      CurrNode,'DocTabZoneSpecifications','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'ZoneNumber','4',DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'Header',FedExXMLControlExt."DocTab Field 4 Header",
                         DocNameSpace,NewChild);
                      IF FedExXMLControlExt."DocTab Field 4 Literal Value" <> '' THEN
                        XMLManagement.AddElement(CurrNode,'LiteralValue',
                          FedExXMLControlExt."DocTab Field 4 Literal Value",DocNameSpace,NewChild)
                      ELSE
                        XMLManagement.AddElement(CurrNode,'DataField',
                          FedExXMLControlExt."DocTab Field 4 DataField",DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    XMLManagement.AddElement(
                      CurrNode,'DocTabZoneSpecifications','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'ZoneNumber','5',DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'Header',FedExXMLControlExt."DocTab Field 5 Header",
                          DocNameSpace,NewChild);
                      IF FedExXMLControlExt."DocTab Field 5 Literal Value" <> '' THEN
                        XMLManagement.AddElement(CurrNode,'LiteralValue',
                          FedExXMLControlExt."DocTab Field 5 Literal Value",DocNameSpace,NewChild)
                      ELSE
                        XMLManagement.AddElement(CurrNode,'DataField',
                          FedExXMLControlExt."DocTab Field 5 DataField",DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    XMLManagement.AddElement(
                      CurrNode,'DocTabZoneSpecifications','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'ZoneNumber','6',DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'Header',FedExXMLControlExt."DocTab Field 6 Header",
                          DocNameSpace,NewChild);
                      IF FedExXMLControlExt."DocTab Field 6 Literal Value" <> '' THEN
                        XMLManagement.AddElement(CurrNode,'LiteralValue',
                          FedExXMLControlExt."DocTab Field 6 Literal Value",DocNameSpace,NewChild)
                      ELSE
                        XMLManagement.AddElement(CurrNode,'DataField',
                          FedExXMLControlExt."DocTab Field 6 DataField",DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    XMLManagement.AddElement(
                      CurrNode,'DocTabZoneSpecifications','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'ZoneNumber','7',DocNameSpace,NewChild);
                         XMLManagement.AddElement(
                           CurrNode,'Header',FedExXMLControlExt."DocTab Field 7 Header",
                             DocNameSpace,NewChild);
                      IF FedExXMLControlExt."DocTab Field 7 Literal Value" <> '' THEN
                        XMLManagement.AddElement(
                          CurrNode,'LiteralValue',FedExXMLControlExt."DocTab Field 7 Literal Value",
                            DocNameSpace,NewChild)
                      ELSE
                        XMLManagement.AddElement(
                          CurrNode,'DataField',FedExXMLControlExt."DocTab Field 7 DataField",
                            DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    XMLManagement.AddElement(
                      CurrNode,'DocTabZoneSpecifications','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'ZoneNumber','8',DocNameSpace,NewChild);
                       XMLManagement.AddElement(
                         CurrNode,'Header',FedExXMLControlExt."DocTab Field 8 Header",
                           DocNameSpace,NewChild);
                      IF FedExXMLControlExt."DocTab Field 8 Literal Value" <> '' THEN
                        XMLManagement.AddElement(
                          CurrNode,'LiteralValue',FedExXMLControlExt."DocTab Field 8 Literal Value",
                            DocNameSpace,NewChild)
                      ELSE
                        XMLManagement.AddElement(
                          CurrNode,'DataField',FedExXMLControlExt."DocTab Field 8 DataField",
                            DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    XMLManagement.AddElement(
                      CurrNode,'DocTabZoneSpecifications','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'ZoneNumber','9',DocNameSpace,NewChild);
                       XMLManagement.AddElement(
                         CurrNode,'Header',FedExXMLControlExt."DocTab Field 9 Header",
                           DocNameSpace,NewChild);
                      IF FedExXMLControlExt."DocTab Field 9 Literal Value" <> '' THEN
                        XMLManagement.AddElement(
                          CurrNode,'LiteralValue',FedExXMLControlExt."DocTab Field 9 Literal Value",
                            DocNameSpace,NewChild)
                      ELSE
                        XMLManagement.AddElement(
                          CurrNode,'DataField',FedExXMLControlExt."DocTab Field 9 DataField",
                            DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    CurrNode := CurrNode.ParentNode;
                  CurrNode := CurrNode.ParentNode;
              XMLManagement.AddElement(CurrNode,'MaskedData','SHIPPER_ACCOUNT_NUMBER',DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
            END;
            CurrNode := CurrNode.ParentNode;

          IF Hazmat OR
           "Dangerous Goods" OR
           "Create Commercial Invoice" OR
           "Electronic Trade Documents" OR
           "FedEx Freight" OR
           "Create Certificate of Origin" OR
           "Create Gen. Agency Agreement" OR
           "Create NAFTA Cert. of Origin" OR
           "Create Pro Forma Invoice" THEN
          BEGIN
            XMLManagement.AddElement(
              CurrNode,'ShippingDocumentSpecification','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              IF "Create Certificate of Origin" THEN
                XMLManagement.AddElement(
                  CurrNode,'ShippingDocumentTypes','CERTIFICATE_OF_ORIGIN',DocNameSpace,NewChild);
              IF Hazmat THEN
                IF NOT "FedEx Freight" THEN
                  XMLManagement.AddElement(
                    CurrNode,'ShippingDocumentTypes','OP_900',DocNameSpace,NewChild);
              IF "Dangerous Goods" THEN
                  IF (("Service Indicator" <> '92') AND (NOT "FedEx Freight")) THEN
                    XMLManagement.AddElement(
                      CurrNode,'ShippingDocumentTypes','DANGEROUS_GOODS_SHIPPERS_DECLARATION',
                        DocNameSpace,NewChild);
              IF "Create Commercial Invoice" THEN
                XMLManagement.AddElement(
                  CurrNode,'ShippingDocumentTypes','COMMERCIAL_INVOICE',DocNameSpace,NewChild);
              IF "Create Gen. Agency Agreement" THEN
                XMLManagement.AddElement(
                  CurrNode,'ShippingDocumentTypes','GENERAL_AGENCY_AGREEMENT',DocNameSpace,NewChild);
              IF "Create Pro Forma Invoice" THEN
                XMLManagement.AddElement(
                  CurrNode,'ShippingDocumentTypes','PRO_FORMA_INVOICE',DocNameSpace,NewChild);
              IF "Create NAFTA Cert. of Origin" THEN
                XMLManagement.AddElement(
                  CurrNode,'ShippingDocumentTypes','NAFTA_CERTIFICATE_OF_ORIGIN',DocNameSpace,NewChild);
              IF "FedEx Freight" THEN
                XMLManagement.AddElement(
                  CurrNode,'ShippingDocumentTypes','FREIGHT_ADDRESS_LABEL',DocNameSpace,NewChild);

              IF "Create Certificate of Origin" THEN BEGIN
                XMLManagement.AddElement(
                  CurrNode,'CertificateOfOrigin','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(CurrNode,'DocumentFormat','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'ImageType','PDF',DocNameSpace,NewChild);
                    XMLManagement.AddElement(CurrNode,'StockType','PAPER_LETTER',
                      DocNameSpace,NewChild);
                    CurrNode := CurrNode.ParentNode;
                  CurrNode := CurrNode.ParentNode;
              END;

              IF "Create Commercial Invoice" THEN BEGIN
                XMLManagement.AddElement(
                  CurrNode,'CommercialInvoiceDetail','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(CurrNode,'Format','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'ImageType','PDF',DocNameSpace,NewChild);
                    XMLManagement.AddElement(CurrNode,'StockType','PAPER_LETTER',
                      DocNameSpace,NewChild);
                    CurrNode := CurrNode.ParentNode;
                  CurrNode := CurrNode.ParentNode;
              END;

              IF "Create Gen. Agency Agreement" THEN BEGIN
                XMLManagement.AddElement(
                  CurrNode,'GeneralAgencyAgreementDetail','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(CurrNode,'Format','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'ImageType','PDF',DocNameSpace,NewChild);
                    XMLManagement.AddElement(CurrNode,'StockType','PAPER_LETTER',
                      DocNameSpace,NewChild);
                    CurrNode := CurrNode.ParentNode;
                  CurrNode := CurrNode.ParentNode;
              END;

              IF "Create NAFTA Cert. of Origin" THEN BEGIN
                XMLManagement.AddElement(
                  CurrNode,'NaftaCertificateOfOriginDetail','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(CurrNode,'Format','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'ImageType','PDF',DocNameSpace,NewChild);
                    XMLManagement.AddElement(CurrNode,'StockType','PAPER_LETTER',
                      DocNameSpace,NewChild);
                    CurrNode := CurrNode.ParentNode;
                  XMLManagement.AddElement(CurrNode,'ImporterSpecification',
                    'IMPORTER_OF_RECORD',DocNameSpace,NewChild);
                  XMLManagement.AddElement(CurrNode,'SignatureContact','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'PersonName',
                      ShippingAgentAccount."NAFTA Contact Name",DocNameSpace,NewChild);
                    CurrNode := CurrNode.ParentNode;
                  XMLManagement.AddElement(CurrNode,'ProducerSpecification',
                    'AVAILABLE_UPON_REQUEST',DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
              END;

              IF Hazmat THEN
                IF NOT "FedEx Freight" THEN BEGIN
                XMLManagement.AddElement(
                  CurrNode,'Op900Detail','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(CurrNode,'Format','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'ImageType','PDF',DocNameSpace,NewChild);
                    XMLManagement.AddElement(CurrNode,'StockType','OP_900_LL_B',
                      DocNameSpace,NewChild);
                    CurrNode := CurrNode.ParentNode;
                  CurrNode := CurrNode.ParentNode;
              END;
              IF "Dangerous Goods" THEN
                IF "Service Indicator" <> '92' THEN BEGIN
                    XMLManagement.AddElement(
                      CurrNode,'DangerousGoodsShippersDeclarationDetail','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'Format','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        XMLManagement.AddElement(CurrNode,'ImageType','PDF',DocNameSpace,NewChild);
                        XMLManagement.AddElement(CurrNode,'StockType','PAPER_LETTER',
                          DocNameSpace,NewChild);
                        CurrNode := CurrNode.ParentNode;
                      CurrNode := CurrNode.ParentNode;
              END;

              IF "FedEx Freight" THEN BEGIN
                XMLManagement.AddElement(
                  CurrNode,'FreightAddressLabelDetail','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(CurrNode,'Format','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    XMLManagement.AddElement(CurrNode,'ImageType',
                      "Label Image Type",DocNameSpace,NewChild);
                    CASE "Label Stock Type" OF
                      "Label Stock Type"::"4X6 with Trailing Doc Tab":
                        XMLManagement.AddElement(
                          CurrNode,'StockType','STOCK_4X6.75_TRAILING_DOC_TAB',DocNameSpace,NewChild);
                      "Label Stock Type"::"4X6 with Leading Doc Tab":
                        XMLManagement.AddElement(
                          CurrNode,'StockType','STOCK_4X6.75_LEADING_DOC_TAB',DocNameSpace,NewChild);
                      "Label Stock Type"::"4X6 W/O Doc Tab":
                        XMLManagement.AddElement(CurrNode,'StockType','STOCK_4X6',DocNameSpace,NewChild);
                    END;
                    CurrNode := CurrNode.ParentNode;
                  IF FedExFreightXMLControl."FXF Palletized" THEN
                  XMLManagement.AddElement(CurrNode,'Copies',
                    XMLManagement.Decimal2Text(
                         FedExFreightXMLControl."No. of Pallets",0),DocNameSpace,NewChild)
                  ELSE
                    XMLManagement.AddElement(CurrNode,'Copies',
                      XMLManagement.Decimal2Text(
                        FedExFreightXMLControl."FX Freight Total Handling Unit",0),DocNameSpace,NewChild);

                  CurrNode := CurrNode.ParentNode;
              END;
              CurrNode := CurrNode.ParentNode;
          END;

          XMLManagement.AddElement(CurrNode,'RateRequestTypes',"Rate Request Type",DocNameSpace,NewChild);

          IF "Total Packages" > 1 THEN BEGIN
            IF "Package Sequence No." > 1 THEN BEGIN
              XMLManagement.AddElement(CurrNode,'MasterTrackingId','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                IF "Smart Post Shipment" THEN BEGIN
                  XMLManagement.AddElement(CurrNode,'TrackingIdType','USPS',DocNameSpace,NewChild);
                END ELSE BEGIN
                  IF ShippingAgentService."Transport Method Type" = 1 THEN BEGIN
                    XMLManagement.AddElement(CurrNode,'TrackingIdType','GROUND',DocNameSpace,NewChild);
                  END ELSE
                    XMLManagement.AddElement(CurrNode,'TrackingIdType','EXPRESS',DocNameSpace,NewChild);

                END;
                XMLManagement.AddElement(
                  CurrNode,'FormId',"Master Tracking  Form ID",DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'TrackingNumber',"Master Tracking No.",DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
            END;
          END;

          IF COD THEN
            IF "Package Sequence No." = "Total Packages" THEN BEGIN
              IF ("COD Return Form ID" <> '') AND ("COD Return Tracking No." <> '') THEN BEGIN
                XMLManagement.AddElement(CurrNode,'CodReturnTrackingId','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(CurrNode,'FormId',"COD Return Form ID",DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'TrackingNumber',"COD Return Tracking No.",DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
              END;
            END;

          IF NOT "Return Shipment" THEN
            XMLManagement.AddElement(
              CurrNode,'PackageCount',XMLManagement.Integer2Text("Total Packages"),DocNameSpace,NewChild)
          ELSE
            XMLManagement.AddElement(
              CurrNode,'PackageCount','1',DocNameSpace,NewChild);

          XMLManagement.AddElement(CurrNode,'RequestedPackageLineItems','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            IF NOT "Return Shipment" THEN
            XMLManagement.AddElement(
              CurrNode,'SequenceNumber',XMLManagement.Integer2Text("Package Sequence No."),
                  DocNameSpace,NewChild)
            ELSE
              XMLManagement.AddElement(
                CurrNode,'SequenceNumber','1',DocNameSpace,NewChild);

            XMLManagement.AddElement(CurrNode,'GroupPackageCount',
              '1',DocNameSpace,NewChild);

            IF NOT "Smart Post Shipment" THEN BEGIN
              XMLManagement.AddElement(CurrNode,'InsuredValue','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(CurrNode,'Currency',"Insured Value Currency",
                  DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'Amount',
                  XMLManagement.Decimal2Text(
                    ROUND(
                      "Insured Value",0.01),2),DocNameSpace,NewChild);
              CurrNode := CurrNode.ParentNode;
            END;
            XMLManagement.AddElement(CurrNode,'Weight','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(CurrNode,'Units',"Package Weight Units",DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'Value',
                XMLManagement.Decimal2Text(ROUND(
                  "Package Weight",0.1),1),DocNameSpace,NewChild);
              CurrNode := CurrNode.ParentNode;

            IF "Smart Post Shipment" THEN BEGIN
              IF "Calculation Length" < 6 THEN
                "Calculation Length" := 6;
              IF "Calculation Width" < 4 THEN
                "Calculation Width" := 4;
              IF "Calculation Height" < 1 THEN
                "Calculation Height" := 1;
            END;
            IF FedExFreightXMLControl."FX Freight Shipment Dim Length" <> 0 THEN BEGIN
              XMLManagement.AddElement(CurrNode,'Dimensions','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(CurrNode,'Length',
                  XMLManagement.Integer2Text(
                    ROUND(FedExFreightXMLControl."FX Freight Shipment Dim Length",1,'>')),DocNameSpace,NewChild);
                XMLManagement.AddElement(CurrNode,'Width',
                  XMLManagement.Integer2Text(
                    ROUND(FedExFreightXMLControl."FX Freight Shipment Dim Width",1,'>')),DocNameSpace,NewChild);
                XMLManagement.AddElement(CurrNode,'Height',
                  XMLManagement.Integer2Text(
                    ROUND(FedExFreightXMLControl."FX Freight Shipment Dim Height",1,'>')),DocNameSpace,NewChild);
                IF FedExFreightXMLControl."FX Freight Shipment Dim Units" <> '' THEN
                  XMLManagement.AddElement(CurrNode,'Units',
                    FedExFreightXMLControl."FX Freight Shipment Dim Units",DocNameSpace,NewChild)
                ELSE
                  XMLManagement.AddElement(CurrNode,'Units',"Package Size Units",DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
            END ELSE
            IF "Calculation Length" <> 0 THEN BEGIN
              XMLManagement.AddElement(CurrNode,'Dimensions','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(
                  CurrNode,'Length',
                  XMLManagement.Integer2Text(ROUND("Calculation Length",1,'>')),DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'Width',XMLManagement.Integer2Text(ROUND("Calculation Width",1,'>')),DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'Height',
                  XMLManagement.Integer2Text(ROUND("Calculation Height",1,'>')),DocNameSpace,NewChild);
                XMLManagement.AddElement(CurrNode,'Units',"Package Size Units",DocNameSpace,NewChild);
              CurrNode := CurrNode.ParentNode;
            END;
            IF PackagingType <> '' THEN
              XMLManagement.AddElement(CurrNode,'PhysicalPackaging',PackagingType,DocNameSpace,NewChild);

            XMLManagement.AddElement(
              CurrNode,'ItemDescription',"Package Description",DocNameSpace,NewChild);

            XMLManagement.AddElement(CurrNode,'CustomerReferences','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(
                CurrNode,'CustomerReferenceType','P_O_NUMBER',DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'Value',"Label PO Reference",DocNameSpace,NewChild);
              CurrNode := CurrNode.ParentNode;

            XMLManagement.AddElement(CurrNode,'CustomerReferences','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(
                CurrNode,'CustomerReferenceType','INVOICE_NUMBER',DocNameSpace,NewChild);
              XMLManagement.AddElement(CurrNode,'Value',"Label Inv. Reference",DocNameSpace,NewChild);
              CurrNode := CurrNode.ParentNode;

            IF Alcohol THEN BEGIN
              XMLManagement.AddElement(CurrNode,'CustomerReferences','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(
                  CurrNode,'CustomerReferenceType','CUSTOMER_REFERENCE',DocNameSpace,NewChild);
                XMLManagement.AddElement(CurrNode,'Value','$AW',DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
            END ELSE BEGIN
              XMLManagement.AddElement(CurrNode,'CustomerReferences','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(
                  CurrNode,'CustomerReferenceType','CUSTOMER_REFERENCE',DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'Value',"Label Customer Reference",DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
            END;
            XMLManagement.AddElement(CurrNode,'CustomerReferences','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(
                CurrNode,'CustomerReferenceType','DEPARTMENT_NUMBER',DocNameSpace,NewChild);
              XMLManagement.AddElement(CurrNode,'Value',"Label Dept. Reference",DocNameSpace,NewChild);
              CurrNode := CurrNode.ParentNode;

            IF "Shipment Special Services Flag" OR "Package Special Services Flag" THEN BEGIN
              XMLManagement.AddElement(CurrNode,'SpecialServicesRequested','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                IF Alcohol THEN
                  XMLManagement.AddElement(
                    CurrNode,'SpecialServiceTypes','ALCOHOL',DocNameSpace,NewChild);
                IF "Additional Handling Required" OR "Non Standard Container" THEN
                  XMLManagement.AddElement(
                    CurrNode,'SpecialServiceTypes','NON_STANDARD_CONTAINER',DocNameSpace,NewChild);
                IF COD THEN
                  IF "Service Indicator" = '92' THEN
                    XMLManagement.AddElement(CurrNode,'SpecialServiceTypes','COD',DocNameSpace,NewChild);
                IF "Dry Ice" THEN
                  XMLManagement.AddElement(
                    CurrNode,'SpecialServiceTypes','DRY_ICE',DocNameSpace,NewChild);
                IF "Dangerous Goods" THEN
                  XMLManagement.AddElement(
                    CurrNode,'SpecialServiceTypes','DANGEROUS_GOODS',DocNameSpace,NewChild);
                IF "Signature Release" OR
                  ("Delivery Signature Options" <> "Delivery Signature Options"::" ") THEN
                  XMLManagement.AddElement(
                    CurrNode,'SpecialServiceTypes','SIGNATURE_OPTION',DocNameSpace,NewChild);
                IF "Priority Alert" THEN
                  XMLManagement.AddElement(
                    CurrNode,'SpecialServiceTypes','PRIORITY_ALERT',DocNameSpace,NewChild);

                IF COD THEN BEGIN
                  IF "Service Indicator" = '92' THEN BEGIN
                    XMLManagement.AddElement(CurrNode,'CodDetail','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'CodCollectionAmount','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        XMLManagement.AddElement(CurrNode,'Currency',"COD Currency",DocNameSpace,NewChild);
                        XMLManagement.AddElement(
                          CurrNode,'Amount',
                            XMLManagement.Decimal2Text(
                              "COD Amount",2),DocNameSpace,NewChild);
                        CurrNode := CurrNode.ParentNode;

                      IF "Add Shipping Charge to COD Amt" THEN BEGIN
                        XMLManagement.AddElement(CurrNode,
                          'AddTransportationChargesDetail','',DocNameSpace,NewChild);
                        CurrNode := NewChild;
                          IF FedExXMLControl."COD Add Charges Rate Basis" <> '' THEN
                          XMLManagement.AddElement(
                              CurrNode,'RateTypeBasis',FedExXMLControl."COD Add Charges Rate Basis",
                                DocNameSpace,NewChild)
                          ELSE
                            CASE "Rate Request Type" OF
                              'ACCOUNT':
                                XMLManagement.AddElement(
                                  CurrNode,'RateTypeBasis','ACCOUNT',DocNameSpace,NewChild);
                              'LIST':
                                XMLManagement.AddElement(
                                  CurrNode,'RateTypeBasis','LIST',DocNameSpace,NewChild);
                              'NONE':
                                XMLManagement.AddElement(
                                  CurrNode,'RateTypeBasis','LIST',DocNameSpace,NewChild);
                              'PREFERRED':
                                XMLManagement.AddElement(
                                  CurrNode,'RateTypeBasis','ACCOUNT',DocNameSpace,NewChild);
                            END;
                          IF "COD Add Charges Charge Basis" <> '' THEN
                            XMLManagement.AddElement(CurrNode,'ChargeBasis',"COD Add Charges Charge Basis",
                              DocNameSpace,NewChild)
                          ELSE
                          XMLManagement.AddElement(CurrNode,'ChargeBasis','NET_CHARGE',
                            DocNameSpace,NewChild);
                          IF ShippingAgentAccount."COD Rule" = ShippingAgentAccount."COD Rule"::"All on Last Package" THEN

                                 XMLManagement.AddElement(CurrNode,
                                   'ChargeBasisLevel','SUM_OF_PACKAGES',DocNameSpace,NewChild)
                          ELSE
                            XMLManagement.AddElement(CurrNode,
                              'ChargeBasisLevel','CURRENT_PACKAGE',DocNameSpace,NewChild);
                          CurrNode := CurrNode.ParentNode;
                      END;

                      XMLManagement.AddElement(CurrNode,'CollectionType',
                        FedExXMLControl."COD Collection Type",DocNameSpace,NewChild);

                      XMLManagement.AddElement(CurrNode,'CodRecipient','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        IF "Payor Account No." <> "Shipper Account No." THEN
                          XMLManagement.AddElement(CurrNode,
                            'AccountNumber',"Payor Account No.",DocNameSpace,NewChild)
                        ELSE
                          XMLManagement.AddElement(CurrNode,
                            'AccountNumber',"Shipper Account No.",DocNameSpace,NewChild);
                        IF FedExXMLControl."Shipper TIN EIN/SSN No." <> '' THEN BEGIN
                          XMLManagement.AddElement(CurrNode,'Tins','',DocNameSpace,NewChild);
                          CurrNode := NewChild;
                            IF FedExXMLControl."Shipper TIN EIN/SSN Indicator" <> '' THEN
                              XMLManagement.AddElement(CurrNode,'TinType',
                                FedExXMLControl."Shipper TIN EIN/SSN Indicator",DocNameSpace,NewChild);
                            XMLManagement.AddElement(CurrNode,
                              'Number',FedExXMLControl."Shipper TIN EIN/SSN No.",DocNameSpace,NewChild);
                            CurrNode := CurrNode.ParentNode;
                        END;

                        XMLManagement.AddElement(CurrNode,'Contact','',DocNameSpace,NewChild);
                        CurrNode := NewChild;
                          XMLManagement.AddElement(
                            CurrNode,'PersonName',FedExXMLControl."Shipper Contact Name",
                              DocNameSpace,NewChild);
                          XMLManagement.AddElement(
                            CurrNode,'Title','',
                              DocNameSpace,NewChild);
                          XMLManagement.AddElement(
                            CurrNode,'CompanyName',FedExXMLControl."Shipper Company Name",
                              DocNameSpace,NewChild);
                          XMLManagement.AddElement(
                            CurrNode,'PhoneNumber',
                              XMLManagement.FixPhoneNo(FedExXMLControl."Shipper Phone No."),
                                DocNameSpace,NewChild);
                          CurrNode := CurrNode.ParentNode;

                        XMLManagement.AddElement(CurrNode,'Address','',DocNameSpace,NewChild);
                        CurrNode := NewChild;
                          XMLManagement.AddElement(
                            CurrNode,'StreetLines',FedExXMLControl."Shipper Address 1",
                              DocNameSpace,NewChild);
                          IF "Shipper Address 2" <> '' THEN
                            XMLManagement.AddElement(
                              CurrNode,'StreetLines',"Shipper Address 2",DocNameSpace,NewChild);
                          XMLManagement.AddElement(
                            CurrNode,'City',FedExXMLControl."Shipper City",
                              DocNameSpace,NewChild);
                          XMLManagement.AddElement(
                            CurrNode,'StateOrProvinceCode',
                              XMLManagement.FixState(
                                FedExXMLControl."Shipper State"),DocNameSpace,NewChild);
                          XMLManagement.AddElement(
                            CurrNode,'PostalCode',
                              XMLManagement.FixZIPCode(
                                FedExXMLControl."Shipper Zip Code"),DocNameSpace,NewChild);
                          XMLManagement.AddElement(
                            CurrNode,'CountryCode',FedExXMLControl."Shipper Country Code",
                              DocNameSpace,NewChild);
                          IF FedExXMLControl."Shipper Return Residential" THEN
                            XMLManagement.AddElement(CurrNode,'Residential','true',DocNameSpace,NewChild);
                          CurrNode := CurrNode.ParentNode;
                        CurrNode := CurrNode.ParentNode;
                      IF "COD Reference" <> '' THEN
                        XMLManagement.AddElement(CurrNode,
                          'ReferenceIndicator',"COD Reference",DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                  END;
                END;
                IF "Dangerous Goods" THEN BEGIN
                  XMLManagement.AddElement(CurrNode,'DangerousGoodsDetail','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    IF "Dangerous Goods Type" <> '' THEN
                      IF "Service Indicator" <> '92' THEN
                      XMLManagement.AddElement(
                        CurrNode,'Accessibility',"Dangerous Goods Type",DocNameSpace,NewChild);

                    IF "Cargo Aircraft" THEN
                      XMLManagement.AddElement(
                        CurrNode,'CargoAircraftOnly','true',DocNameSpace,NewChild);

                    IF FedExXMLControl."Hazmat Option Type" <> '' THEN
                      XMLManagement.AddElement(CurrNode,'Options',
                        FedExXMLControl."Hazmat Option Type",DocNameSpace,NewChild);

                    IF ((Hazmat OR "Dangerous Goods") AND (NOT "FedEx Freight")) THEN BEGIN
                      XMLManagement.AddElement(CurrNode,'Containers','',DocNameSpace,NewChild);
                      CurrNode := NewChild;
                        IF FedExXMLControlExt."DG Container Type" = '' THEN
                          FedExXMLControlExt."DG Container Type" := 'Fibreboard Box';
                        XMLManagement.AddElement(CurrNode,
                          'ContainerType',FedExXMLControlExt."DG Container Type",DocNameSpace,NewChild);
                        XMLManagement.AddElement(CurrNode,'NumberOfContainers','1',DocNameSpace,NewChild);
                        PackageLine.RESET;
                        PackageLine.SETFILTER(Type,'%1|%2',PackageLine.Type::Item,PackageLine.Type::" ");
                        PackageLine.SETRANGE("Package No.","Source No.");
                        IF PackageLine.FIND('-') THEN
                          REPEAT
                            HazMatItem.RESET;
                            HazMatItem.SETRANGE(Type,HazMatItem.Type::Item);
                            HazMatItem.SETRANGE("No.",PackageLine."No.");
                            IF HazMatItem.FINDFIRST THEN
                              REPEAT
                                IF HazMatProductClass.GET(HazMatItem."Product Class") THEN BEGIN
                                  Hazmat := TRUE;

                                  XMLManagement.AddElement(CurrNode,'HazardousCommodities','',DocNameSpace,NewChild);
                                  CurrNode := NewChild;
                                    XMLManagement.AddElement(CurrNode,'Description','',DocNameSpace,NewChild);
                                    CurrNode := NewChild;
                                      IF HazMatProductClass."Identification No." <> '' THEN
                                        XMLManagement.AddElement(
                                          CurrNode,'Id',HazMatProductClass."Identification No.",DocNameSpace,NewChild);
                                      IF HazMatProductClass."Packing Group No." <> '' THEN
                                        XMLManagement.AddElement(
                                          CurrNode,'PackingGroup',HazMatProductClass."Packing Group No.",DocNameSpace,NewChild);
                                      XMLManagement.AddElement(CurrNode,'PackingDetails','',DocNameSpace,NewChild);
                                      CurrNode := NewChild;
                                        IF "Cargo Aircraft" THEN
                                          XMLManagement.AddElement(
                                            CurrNode,'CargoAircraftOnly','true',DocNameSpace,NewChild)
                                        ELSE
                                          XMLManagement.AddElement(
                                            CurrNode,'CargoAircraftOnly','false',DocNameSpace,NewChild);
                                          IF HazMatProductClass."Packing Instructions Code" <> '' THEN
                                        XMLManagement.AddElement(CurrNode,'PackingInstructions',
                                          HazMatProductClass."Packing Instructions Code",DocNameSpace,NewChild);
                                        CurrNode := CurrNode.ParentNode;
                                      IF HazMatProductClass."Proper Shipping Name" <> '' THEN
                                        XMLManagement.AddElement(
                                          CurrNode,'ProperShippingName',HazMatProductClass."Proper Shipping Name",
                                            DocNameSpace,NewChild);
                                      IF HazMatItem."Other Technical Description" <> '' THEN
                                        XMLManagement.AddElement(
                                          CurrNode,'TechnicalName',HazMatItem."Other Technical Description",
                                            DocNameSpace,NewChild)
                                      ELSE
                                        IF HazMatProductClass."Technical Name" <> '' THEN
                                        XMLManagement.AddElement(
                                          CurrNode,'TechnicalName',HazMatProductClass."Technical Name",
                                              DocNameSpace,NewChild);
                                      IF HazMatProductClass."Hazard Division No." <> '' THEN
                                        XMLManagement.AddElement(
                                          CurrNode,'HazardClass',HazMatProductClass."Hazard Division No.",DocNameSpace,NewChild);
                                      IF HazMatProductClass."Labels Required" <> '' THEN
                                        XMLManagement.AddElement(
                                          CurrNode,'LabelText',HazMatProductClass."Labels Required",DocNameSpace,NewChild);
                                      CurrNode := CurrNode.ParentNode;
                                    XMLManagement.AddElement(CurrNode,'Quantity','',DocNameSpace,NewChild);
                                    CurrNode := NewChild;
                                      IF PackageLine."Net Weight" <> 0 THEN
                                        XMLManagement.AddElement(CurrNode,'Amount',
                                          XMLManagement.Decimal2Text(PackageLine."Net Weight",2),DocNameSpace,NewChild)
                                      ELSE
                                        XMLManagement.AddElement(CurrNode,'Amount',
                                          XMLManagement.Decimal2Text(PackageLine."Gross Weight",2),DocNameSpace,NewChild);
                                      CASE PackageLine."Line Weight Type" OF
                                        PackageLine."Line Weight Type"::Pounds:
                                          XMLManagement.AddElement(CurrNode,'Units','LB',DocNameSpace,NewChild);
                                        PackageLine."Line Weight Type"::Kilograms:
                                          XMLManagement.AddElement(CurrNode,'Units','KG',DocNameSpace,NewChild);
                                        END;
                                      CurrNode := CurrNode.ParentNode;
                                    CurrNode := CurrNode.ParentNode;
                                END;
                              UNTIL HazMatItem.NEXT = 0;
                          UNTIL PackageLine.NEXT = 0;
                        CurrNode := CurrNode.ParentNode;
                    END;
                    IF (Hazmat AND "FedEx Freight") THEN BEGIN
                      PackageLine.RESET;
                      PackageLine.SETFILTER(Type,'%1|%2',PackageLine.Type::Item,PackageLine.Type::" ");
                      PackageLine.SETRANGE("Package No.","Source No.");
                      IF PackageLine.FIND('-') THEN
                        REPEAT
                          HazMatItem.RESET;
                          HazMatItem.SETRANGE(Type,HazMatItem.Type::Item);
                          HazMatItem.SETRANGE("No.",PackageLine."No.");
                          IF HazMatItem.FINDFIRST THEN
                            REPEAT
                            IF HazMatProductClass.GET(HazMatItem."Product Class") THEN BEGIN
                              Hazmat := TRUE;
                            XMLManagement.AddElement(CurrNode,'Containers','',DocNameSpace,NewChild);
                            CurrNode := NewChild;
                                XMLManagement.AddElement(CurrNode,
                                'NumberOfContainers','1',DocNameSpace,NewChild);
                              XMLManagement.AddElement(CurrNode,'HazardousCommodities','',DocNameSpace,NewChild);
                            CurrNode := NewChild;
                              XMLManagement.AddElement(CurrNode,'Description','',DocNameSpace,NewChild);
                              CurrNode := NewChild;
                                IF HazMatProductClass.Code <> '' THEN
                                XMLManagement.AddElement(
                                    CurrNode,'Id',HazMatProductClass."Identification No.",DocNameSpace,NewChild);
                                IF HazMatProductClass."Packing Group No." <> '' THEN
                                  XMLManagement.AddElement(
                                    CurrNode,'PackingGroup',HazMatProductClass."Packing Group No.",DocNameSpace,NewChild);
                                IF HazMatProductClass."Proper Shipping Name" <> '' THEN
                                      XMLManagement.AddElement(
                                        CurrNode,'ProperShippingName',HazMatProductClass."Proper Shipping Name",
                                          DocNameSpace,NewChild);
                                  IF HazMatItem."Other Technical Description" <> '' THEN
                                      XMLManagement.AddElement(
                                      CurrNode,'TechnicalName',HazMatItem."Other Technical Description",
                                        DocNameSpace,NewChild)
                                  ELSE
                                    XMLManagement.AddElement(
                                      CurrNode,'TechnicalName',HazMatProductClass."Technical Name",
                                          DocNameSpace,NewChild);
                                IF HazMatProductClass."Hazard Division No." <> '' THEN
                                  XMLManagement.AddElement(
                                    CurrNode,'HazardClass',HazMatProductClass."Hazard Division No.",DocNameSpace,NewChild);
                                IF HazMatProductClass."Labels Required" <> '' THEN
                                  XMLManagement.AddElement(
                                    CurrNode,'LabelText',HazMatProductClass."Labels Required",DocNameSpace,NewChild);
                                CurrNode := CurrNode.ParentNode;
                              XMLManagement.AddElement(CurrNode,'Quantity','',DocNameSpace,NewChild);
                              CurrNode := NewChild;
                                IF PackageLine."Net Weight" <> 0 THEN
                                  XMLManagement.AddElement(CurrNode,'Amount',
                                    XMLManagement.Decimal2Text(PackageLine."Net Weight",2),DocNameSpace,NewChild)
                                ELSE
                                  XMLManagement.AddElement(CurrNode,'Amount',
                                    XMLManagement.Decimal2Text(PackageLine."Gross Weight",2),DocNameSpace,NewChild);
                                CASE PackageLine."Line Weight Type" OF
                                  PackageLine."Line Weight Type"::Pounds:
                                    XMLManagement.AddElement(CurrNode,'Units','LB',DocNameSpace,NewChild);
                                  PackageLine."Line Weight Type"::Kilograms:
                                    XMLManagement.AddElement(CurrNode,'Units','KG',DocNameSpace,NewChild);
                                  END;
                                CurrNode := CurrNode.ParentNode;
                              CurrNode := CurrNode.ParentNode;
                          END;
                            CurrNode := CurrNode.ParentNode;
                            UNTIL HazMatItem.NEXT = 0;
                        UNTIL PackageLine.NEXT = 0;
                    END;

                    XMLManagement.AddElement(CurrNode,'Packaging','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(
                        CurrNode,'Count','1',DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'Units','FIBREBOARD BOX',DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;
                    XMLManagement.AddElement(CurrNode,'Signatory','',DocNameSpace,NewChild);
                    CurrNode := NewChild;
                      XMLManagement.AddElement(
                        CurrNode,'ContactName',"Hazmat Contact Name",DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'Title','Signatory Contact',DocNameSpace,NewChild);
                      XMLManagement.AddElement(
                        CurrNode,'Place','Home Office',DocNameSpace,NewChild);
                      CurrNode := CurrNode.ParentNode;

                    XMLManagement.AddElement(
                      CurrNode,'EmergencyContactNumber',
                        XMLManagement.FixPhoneNo("Hazmat Contact Phone No."),DocNameSpace,NewChild);
                    IF "Hazmat Contact Name" <> '' THEN
                      XMLManagement.AddElement(
                        CurrNode,'Offeror',"Hazmat Contact Name",DocNameSpace,NewChild);
                    CurrNode := CurrNode.ParentNode;
                  END;

                IF "Dry Ice" THEN BEGIN
                  XMLManagement.AddElement(CurrNode,'DryIceWeight','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                      XMLManagement.AddElement(CurrNode,'Units','KG',DocNameSpace,NewChild);
                    XMLManagement.AddElement(
                      CurrNode,'Value',
                      XMLManagement.Integer2Text(
                        "Dry Ice Weight"),DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
                END;

                IF "Signature Release" OR
                     ("Delivery Signature Options" <> "Delivery Signature Options"::" ") THEN BEGIN
                  XMLManagement.AddElement(CurrNode,'SignatureOptionDetail','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    CASE "Delivery Signature Options" OF
                      "Delivery Signature Options"::" ","Delivery Signature Options"::"Service Default":
                        XMLManagement.AddElement(
                          CurrNode,'OptionType','SERVICE_DEFAULT',DocNameSpace,NewChild);
                      "Delivery Signature Options"::"Indirect Signature":
                        XMLManagement.AddElement(CurrNode,'OptionType','INDIRECT',DocNameSpace,NewChild);
                      "Delivery Signature Options"::"Deliver without Signature":
                        XMLManagement.AddElement(
                          CurrNode,'OptionType','NO_SIGNATURE_REQUIRED',DocNameSpace,NewChild);
                      "Delivery Signature Options"::"Direct Signature":
                        XMLManagement.AddElement(CurrNode,'OptionType','DIRECT',DocNameSpace,NewChild);
                      "Delivery Signature Options"::"Adult Signature":
                        XMLManagement.AddElement(CurrNode,'OptionType','ADULT',DocNameSpace,NewChild);
                    END;
                    IF "Signature Release Auth." <> '' THEN
                      XMLManagement.AddElement(
                        CurrNode,'SignatureReleaseNumber',
                        "Signature Release Auth.",DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
                END;

                IF "Priority Alert" AND ("Priority Alert Detail" <> '') THEN BEGIN
                  XMLManagement.AddElement(CurrNode,'PriorityAlertDetail','',DocNameSpace,NewChild);
                  CurrNode := NewChild;
                    IF "Priority Alert Plus" THEN
                      XMLManagement.AddElement(
                        CurrNode,'EnhancementTypes','PRIORITY_ALERT_PLUS',DocNameSpace,NewChild);
                    XMLManagement.AddElement(
                      CurrNode,'Content',"Priority Alert Detail",DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
                END;
                IF Alcohol THEN
                  CASE "Alcohol Recipient Type" OF
                    "Alcohol Recipient Type"::Consumer:
                      BEGIN
                        XMLManagement.AddElement(CurrNode,'AlcoholDetail','',DocNameSpace,NewChild);
                        CurrNode := NewChild;
                          XMLManagement.AddElement(
                            CurrNode,'RecipientType','CONSUMER',DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
                      END;
                    "Alcohol Recipient Type"::Licensee:
                      BEGIN
                        XMLManagement.AddElement(CurrNode,'AlcoholDetail','',DocNameSpace,NewChild);
                        CurrNode := NewChild;
                          XMLManagement.AddElement(
                            CurrNode,'RecipientType','LICENSEE',DocNameSpace,NewChild);
                          CurrNode := CurrNode.ParentNode;
                      END;
                  END;
                  CurrNode := CurrNode.ParentNode;
                CurrNode := CurrNode.ParentNode;
            END;
            CurrNode := CurrNode.ParentNode;
          CurrNode := CurrNode.ParentNode;
        CurrNode := CurrNode.ParentNode;
      END;
    END;

    PROCEDURE CreateManifestRequest@1240030002(VAR XMLDOMDocument@1240030001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";CurrentManifestHeader@1240030007 : Record 14000712;CurrentShippingAgentAccount@1240030006 : Record 14000788;ManifestOnly@1240030005 : Boolean;DocNameSpace@1240030000 : Text[30];SmartPost@1240030002 : Boolean);
    BEGIN
      IF SmartPost THEN BEGIN
        XMLManagement.AddElement(CurrNode,'PickUpCarrier','FXSP',DocNameSpace,NewChild);
      END ELSE
        XMLManagement.AddElement(
          CurrNode,'TimeUpToWhichShipmentsAreToBeClosed',XMLManagement.FormatDateYYYYMMDD(
            WORKDATE) + 'T' + XMLManagement.FormatTime24HRMMSS(TIME) + '-00:00',DocNameSpace,NewChild);
    END;

    PROCEDURE CreateManifestWithDocsRequest@1240020001(VAR XMLDOMDocument@1240020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";CurrentManifestHeader@1240030007 : Record 14000712;CurrentShippingAgentAccount@1240030006 : Record 14000788;PackingStation@1240020001 : Record 14000709;CarrierPackingStation@1240020000 : Record 14000729;ManifestOnly@1240030005 : Boolean;DocNameSpace@1240030000 : Text[30];SmartPost@1240030002 : Boolean);
    BEGIN
      XMLManagement.AddElement(
        CurrNode,'ApplicationId','esb',DocNameSpace,NewChild);
      XMLManagement.AddElement(
        CurrNode,'CloseDate',XMLManagement.FormatDateYYYYMMDD(
          TODAY),DocNameSpace,NewChild);
      XMLManagement.AddElement(
        CurrNode,'CloseDocumentSpecification','',DocNameSpace,NewChild);
      CurrNode := NewChild;
        IF ManifestOnly THEN
        XMLManagement.AddElement(
            CurrNode,'CloseDocumentTypes','MANIFEST',DocNameSpace,NewChild)
        ELSE BEGIN
          XMLManagement.AddElement(
          CurrNode,'CloseDocumentTypes','MANIFEST',DocNameSpace,NewChild);
        XMLManagement.AddElement(
          CurrNode,'CloseDocumentTypes','OP_950',DocNameSpace,NewChild);
        XMLManagement.AddElement(
          CurrNode,'CloseDocumentTypes','COD_REPORT',DocNameSpace,NewChild);
        END;

        XMLManagement.AddElement(
          CurrNode,'Op950Detail','',DocNameSpace,NewChild);
        CurrNode := NewChild;
          XMLManagement.AddElement(
            CurrNode,'Format','',DocNameSpace,NewChild);
          CurrNode := NewChild;
            XMLManagement.AddElement(
              CurrNode,'Dispositions','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(
                CurrNode,'Grouping','CONSOLIDATED_BY_DOCUMENT_TYPE',DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'StorageDetail','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(
                  CurrNode,'FilePath',CarrierPackingStation."FedEx Buffer Directory",DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'FileNaming','FAST',DocNameSpace,NewChild);
                XMLManagement.AddElement(
                  CurrNode,'FileSuffix','pdf',DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
              XMLManagement.AddElement(
                CurrNode,'EMailDetail','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(
                  CurrNode,'EMailRecipients','',DocNameSpace,NewChild);
                CurrNode := NewChild;
                  XMLManagement.AddElement(
                    CurrNode,'RecipientType','BROKER',DocNameSpace,NewChild);
                  XMLManagement.AddElement(
                    CurrNode,'Address','',DocNameSpace,NewChild);
                  CurrNode := CurrNode.ParentNode;
                XMLManagement.AddElement(
                  CurrNode,'Grouping','BY_RECIPIENT',DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
              XMLManagement.AddElement(
                CurrNode,'PrintDetail','',DocNameSpace,NewChild);
              CurrNode := NewChild;
                XMLManagement.AddElement(
                  CurrNode,'PrinterId','LPT1:',DocNameSpace,NewChild);
                CurrNode := CurrNode.ParentNode;
              CurrNode := CurrNode.ParentNode;
            XMLManagement.AddElement(
              CurrNode,'ImageType','PDF',DocNameSpace,NewChild);
            XMLManagement.AddElement(
              CurrNode,'StockType','OP_950',DocNameSpace,NewChild);
            XMLManagement.AddElement(
              CurrNode,'ProvideInstructions','1',DocNameSpace,NewChild);
            XMLManagement.AddElement(
              CurrNode,'Localization','',DocNameSpace,NewChild);
            CurrNode := NewChild;
              XMLManagement.AddElement(
                CurrNode,'LanguageCode','EN',DocNameSpace,NewChild);
              XMLManagement.AddElement(
                CurrNode,'LocaleCode','US',DocNameSpace,NewChild);
              CurrNode := CurrNode.ParentNode;
            CurrNode := CurrNode.ParentNode;
          XMLManagement.AddElement(
            CurrNode,'SignatureName',CarrierPackingStation."Hazmat Contact Name",
              DocNameSpace,NewChild);
          CurrNode := CurrNode.ParentNode;
        CurrNode := CurrNode.ParentNode;
    END;

    PROCEDURE SetFreightPackageLines@1240020000(VAR PackageLine@1240020000 : Record 14000702;FedExFreightXMLControl@1240020001 : Record 14000795);
    VAR
      BillOfLadingLine@1240020002 : Record 14000823;
      SalesHeader@1240020003 : Record 36;
      Package@1240020004 : Record 14000701;
      PackageLineFilter@1240020005 : Text[1000];
    BEGIN
      IF FedExFreightXMLControl."Rated Package No." <> '' THEN
        PackageLine.SETRANGE("Package No.",FedExFreightXMLControl."Rated Package No.")
      ELSE
        IF FedExFreightXMLControl."Bill of Lading No." <> '' THEN BEGIN
          PackageLineFilter := '';
          BillOfLadingLine.RESET;
          BillOfLadingLine.SETRANGE("Bill of Lading No.",FedExFreightXMLControl."Bill of Lading No.");
          BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
          IF BillOfLadingLine.FINDFIRST THEN
            REPEAT
              SalesHeader.RESET;
              SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
              SalesHeader.SETRANGE("No.",BillOfLadingLine."No.");
              IF SalesHeader.FINDFIRST THEN
                REPEAT
                  Package.RESET;
                  Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
                  Package.SETRANGE("Source Type",36);
                  Package.SETRANGE("Source Subtype",1);
                  Package.SETRANGE("Source ID",SalesHeader."No.");
                  IF Package.FINDFIRST THEN
                    REPEAT
                      IF PackageLineFilter = '' THEN
                        PackageLineFilter := PackageLineFilter + Package."No."
                      ELSE
                        PackageLineFilter := PackageLineFilter + '|' + Package."No."
                    UNTIL Package.NEXT = 0;
                UNTIL SalesHeader.NEXT = 0;
            UNTIL BillOfLadingLine.NEXT = 0;
          PackageLine.RESET;
          PackageLine.SETFILTER("Package No.",PackageLineFilter);
          PackageLine.SETRANGE(Type,PackageLine.Type::Item);
        END;
    END;

    EVENT XMLDocOut@1240030002::ondataavailable@198();
    BEGIN
    END;

    EVENT XMLDocOut@1240030002::onreadystatechange@-609();
    BEGIN
    END;

    EVENT XMLRequestDocument@1240030003::ondataavailable@198();
    BEGIN
    END;

    EVENT XMLRequestDocument@1240030003::onreadystatechange@-609();
    BEGIN
    END;

    BEGIN
    END.
  }
}

