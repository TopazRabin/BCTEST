OBJECT Codeunit 23044590 WHI Auto Setup
{
  OBJECT-PROPERTIES
  {
    Date=09/30/19;
    Time=12:24:07 PM;
    Version List=WHI2.4.7684.0;
  }
  PROPERTIES
  {
    Permissions=TableData 97=rimd,
                TableData 2000000005=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      cuCommonFuncs@1000000006 : Codeunit 23044501;
      cuTranslationMgmt@1000000007 : Codeunit 23044526;
      recWHISetup@1000000003 : Record 23044502;
      cuCompatibility@1000000030 : Codeunit 23044530;
      cuWorkflowMgmt@1000000042 : Codeunit 23044532;

    PROCEDURE ConfigPrintingJobQueue@1000000034(pbTurnOn@1000000002 : Boolean);
    VAR
      lrecWHISetup@1000000000 : Record 23044502;
      lrecJobQueueEntry@1000000001 : Record 472;
      lbJobQueueEntryExists@1000000003 : Boolean;
    BEGIN
      // config printing in job queue

      lrecWHISetup.GET();

      lrecJobQueueEntry.RESET();
      lrecJobQueueEntry.SETRANGE("Object Type to Run", lrecJobQueueEntry."Object Type to Run"::Codeunit);
      lrecJobQueueEntry.SETRANGE("Object ID to Run", CODEUNIT::"WHI Job Queue Printing");
      lbJobQueueEntryExists := lrecJobQueueEntry.FIND('-');


      IF ( pbTurnOn AND NOT lbJobQueueEntryExists ) THEN BEGIN
          // if it doesn't exist, but it should exist.
          lrecJobQueueEntry.RESET;
          lrecJobQueueEntry.INIT;
          lrecJobQueueEntry.VALIDATE("Object Type to Run", lrecJobQueueEntry."Object Type to Run"::Codeunit);
          lrecJobQueueEntry.VALIDATE("Object ID to Run", CODEUNIT::"WHI Job Queue Printing");
          lrecJobQueueEntry.VALIDATE("Timeout (sec.)", 300);
          lrecJobQueueEntry.VALIDATE(Priority, 1000);
          lrecJobQueueEntry.VALIDATE("Recurring Job", TRUE);
          lrecJobQueueEntry.VALIDATE("Run on Mondays", TRUE);
          lrecJobQueueEntry.VALIDATE("Run on Tuesdays", TRUE);
          lrecJobQueueEntry.VALIDATE("Run on Wednesdays", TRUE);
          lrecJobQueueEntry.VALIDATE("Run on Thursdays", TRUE);
          lrecJobQueueEntry.VALIDATE("Run on Fridays", TRUE);
          lrecJobQueueEntry.VALIDATE("Run on Saturdays", TRUE);
          lrecJobQueueEntry.VALIDATE("Run on Sundays", TRUE);
          lrecJobQueueEntry.VALIDATE("No. of Minutes between Runs", 30 ); // check every half hour
          lrecJobQueueEntry.VALIDATE("Starting Time", 020000T);
          lrecJobQueueEntry.VALIDATE("Ending Time", 230000T);
          lrecJobQueueEntry.INSERT(TRUE);
          lbJobQueueEntryExists := TRUE;
          // SetStatus isn't in all NAV versions.
          // lrecJobQueueEntry.SetStatus(lrecJobQueueEntry.Status::Ready);
      END;

      IF ( lbJobQueueEntryExists ) THEN BEGIN
        // at this point lrecJobQueueEntry either already exists, or was just inserted.
        IF ( pbTurnOn ) THEN BEGIN
          lrecJobQueueEntry.Status := lrecJobQueueEntry.Status::Ready;
          lrecJobQueueEntry."Earliest Start Date/Time" := CURRENTDATETIME - (1000 * 5 * 60); // 5 minutes ago
          // 5 minutes is arbitrary, but allows for servers to be slightly off-sync on their clocks
          // in the scenario that the NAS is not the same computer as the service tier.
        END ELSE BEGIN
          // it exists, so let's put it on hold.
          lrecJobQueueEntry.Status := lrecJobQueueEntry.Status::"On Hold";
        END;
        IF ( lrecJobQueueEntry.MODIFY(TRUE) ) THEN;
        // then nothing.   This isn't critical, but not worth stopping, especially since we know it's already in the queue.
      END;
    END;

    PROCEDURE UploadWindowsCAB@1000000037() rbOutWorked : Boolean;
    VAR
      lcu2013Support@1000000001 : Codeunit 23044530;
      losOutStream@1000000002 : OutStream;
    BEGIN
      rbOutWorked := FALSE;

      recWHISetup.GET();

      recWHISetup."Windows CAB".CREATEOUTSTREAM(losOutStream);
      rbOutWorked := lcu2013Support.PromptAndImportIntoBlob( 'Handheld CAB Files|*.cab', losOutStream );
      IF ( rbOutWorked ) THEN BEGIN
        recWHISetup.MODIFY();
        MESSAGE(cuTranslationMgmt.getTranslatedString('MSG_HANDHELD_UPDATED', ''));
      END;
    END;

    PROCEDURE UploadAndroidAPK@1000000003() rbOutWorked : Boolean;
    VAR
      lcu2013Support@1000000001 : Codeunit 23044530;
      losOutStream@1000000000 : OutStream;
    BEGIN
      rbOutWorked := FALSE;

      recWHISetup.GET();

      recWHISetup."Android APK".CREATEOUTSTREAM(losOutStream);
      rbOutWorked := lcu2013Support.PromptAndImportIntoBlob('Android APK Files|*.apk', losOutStream );
      IF ( rbOutWorked ) THEN BEGIN
        recWHISetup.MODIFY();
        MESSAGE(cuTranslationMgmt.getTranslatedString('MSG_HANDHELD_UPDATED', ''));
      END;
    END;

    PROCEDURE ApplyRapidStartFiles@1000000000(psBaseURL@1000000001 : Text;psPackageName@1000000002 : Text);
    VAR
      lrecWHISetup@1000000000 : Record 23044502;
    BEGIN
      // Downloads the rapidstart files and attempts to apply them
      {
      cuIWXExtensionCompat.DownloadAndApplyRapidstart(STRSUBSTNO('%1/rapidstarts/%2',psBaseURL,psPackageName));

      // apply rapidstart for IWX
      cuIWXExtensionCompat.DownloadAndApplyRapidstart(STRSUBSTNO('%1/rapidstarts/iwx_setup.rapidstart',psBaseURL));

      // apply rapidstart for WHI
      cuIWXExtensionCompat.DownloadAndApplyRapidstart(STRSUBSTNO('%1/rapidstarts/whi_setup.rapidstart',psBaseURL));
      }
    END;

    PROCEDURE ImportApplicationXMLFiles@1000000002(psBaseURL@1000000001 : Text;psDeploymentVersion@1000000003 : Text;pbOverride@1000000002 : Boolean);
    VAR
      lrecApplication@1000000000 : Record 23044527;
    BEGIN
      // Loops through the installed applications and imports the xml data
      lrecApplication.SETRANGE("Deployment Tag",'WHI');
      IF lrecApplication.FINDSET(FALSE) THEN BEGIN
        REPEAT
          ImportXMLFile(psBaseURL, lrecApplication.Code, psDeploymentVersion, TRUE);
        UNTIL(lrecApplication.NEXT=0);
      END;
    END;

    LOCAL PROCEDURE ImportXMLFile@1000000012(psBaseURL@1000000005 : Text;pcodApplicationCode@1000000000 : Code[20];psDeploymentVersion@1000000006 : Text;pbOverride@1000000003 : Boolean);
    VAR
      lrecApplication@1000000001 : Record 23044527;
      ltrecTempBlob@1000000002 : TEMPORARY Record 99008535;
      lsFileName@1000000004 : Text;
    BEGIN
      //  Attempt to download and import the application xml from the website

      {
      IF lrecApplication.GET(pcodApplicationCode) THEN BEGIN
        lrecApplication.CALCFIELDS("Application Blob");
        IF lrecApplication."Application Blob".HASVALUE AND (NOT pbOverride) THEN
          EXIT;

        lsFileName := STRSUBSTNO('%1.xml',LOWERCASE(pcodApplicationCode));

        cuIWXExtensionCompat.DownloadBlobFromURL(
          STRSUBSTNO('%1/applicationxml/%2',psBaseURL,lsFileName),
          ltrecTempBlob
          );

        ltrecTempBlob.CALCFIELDS(Blob);
        IF (ltrecTempBlob.Blob.HASVALUE()) THEN BEGIN
          lrecApplication."Application Blob" := ltrecTempBlob.Blob;
          lrecApplication."Deployment Version" := psDeploymentVersion;
          lrecApplication.MODIFY;
        END;
      END;
      }
    END;

    PROCEDURE ImportIcons@1000000015(psBaseURL@1000000001 : Text;psDeploymentVersion@1000000002 : Text;pbOverride@1000000003 : Boolean);
    VAR
      lrecIcon@1000000000 : Record 23044520;
    BEGIN
      // Loops through the installed icons and imports the image data
      {
      lrecIcon.SETRANGE("Deployment Tag",'WHI');
      IF lrecIcon.FINDSET(FALSE) THEN BEGIN
        REPEAT
          ImportIcon(psBaseURL, lrecIcon.Code, psDeploymentVersion, pbOverride);
        UNTIL(lrecIcon.NEXT=0);
      END;
      }
    END;

    LOCAL PROCEDURE ImportIcon@1000000016(psBaseURL@1000000005 : Text;pcodIconCode@1000000000 : Code[20];psDeploymentVersion@1000000006 : Text;pbOverride@1000000003 : Boolean);
    VAR
      lrecIcon@1000000001 : Record 23044520;
      ltrecTempBlob@1000000002 : TEMPORARY Record 99008535;
      lsFileName@1000000004 : Text;
    BEGIN
      //  Attempt to download and import the icon image from the website

      {
      IF lrecIcon.GET(pcodIconCode) THEN BEGIN
        lrecIcon.CALCFIELDS(Image);
        IF lrecIcon.Image.HASVALUE AND (NOT pbOverride) THEN
          EXIT;

        lsFileName := STRSUBSTNO('%1.png',LOWERCASE(pcodIconCode));
        cuIWXExtensionCompat.DownloadBlobFromURL(
          STRSUBSTNO('%1/icons/%2',psBaseURL,lsFileName),
          ltrecTempBlob
        );

        ltrecTempBlob.CALCFIELDS(Blob);
        IF (ltrecTempBlob.Blob.HASVALUE()) THEN BEGIN
          lrecIcon.Image := ltrecTempBlob.Blob;
          lrecIcon."Deployment Version" := psDeploymentVersion;
          lrecIcon.MODIFY;
        END;
      END;
      }
    END;

    PROCEDURE ImportDeviceSoftware@1000000001(psBaseURL@1000000000 : Text;psDeploymentVersion@1000000004 : Text);
    VAR
      lrecWHISetup@1000000003 : Record 23044502;
      ltrecTempBlob@1000000001 : TEMPORARY Record 99008535;
      lsFileName@1000000002 : Text;
    BEGIN
      // Imports the device software (windows/android) into the WHI Setup
      // for download by clients when needed.
         {
      lrecWHISetup.GET;

      lsFileName := 'WHI_Scanner_Install.CAB';
      cuIWXExtensionCompat.DownloadBlobFromURL(
          STRSUBSTNO('%1/software/%2',psBaseURL,lsFileName),
          ltrecTempBlob
        );

      ltrecTempBlob.CALCFIELDS(Blob);
      IF (ltrecTempBlob.Blob.HASVALUE()) THEN BEGIN
        lrecWHISetup.TempBlob := ltrecTempBlob.Blob;
      END;


      CLEAR(ltrecTempBlob);
      lsFileName := 'InsightWorks.WarehouseInsight.apk';
      cuIWXExtensionCompat.DownloadBlobFromURL(
          STRSUBSTNO('%1/software/%2',psBaseURL,lsFileName),
          ltrecTempBlob
        );

      ltrecTempBlob.CALCFIELDS(Blob);
      IF (ltrecTempBlob.Blob.HASVALUE()) THEN BEGIN
        lrecWHISetup."Android APK" := ltrecTempBlob.Blob;

      END;

      lrecWHISetup."Handheld Version" := psDeploymentVersion;
      lrecWHISetup.MODIFY;
          }
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
    }
    END.
  }
}

