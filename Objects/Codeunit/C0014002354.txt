OBJECT Codeunit 14002354 E.D.I. Import
{
  OBJECT-PROPERTIES
  {
    Date=07/13/20;
    Time=12:00:00 PM;
    Version List=SE0.62;
  }
  PROPERTIES
  {
    TableNo=14002353;
    OnRun=BEGIN
            ImportDocument(Rec,Rec."Navision Document");
          END;

  }
  CODE
  {
    VAR
      DelimiterLine@1240030000 : Text[30];
      DecComponentDel@1240030001 : Integer;
      DecElementDel@1240030002 : Integer;
      DecSegmentDel@1240030003 : Integer;
      Text001@1001 : TextConst 'ENU=You can not import a file from an Archive directory.';
      Text002@1002 : TextConst 'ENU=An active EDI Document could not be found for Trade Partner %1 EDI Document No. %2';
      EDIFACT@1240030004 : Boolean;
      xFile@1240020000 : Record 2000000022;
      FileInfo@1240020009 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileInfo";
      CurrentFileName@1240020001 : Text[250];
      FileCount2@1240020002 : Integer;
      Text003@1240020003 : TextConst 'ENU=The template %1 assigned to EDI Document %2 %3 for Trade Partner %4 has an Interface File Type of None.\This Interface File Type requires the Interface File field on document card to contain the file path.';
      XMLFile@1240020007 : Boolean;
      NodeListFound@1240020004 : Boolean;
      Text300@1240020005 : TextConst 'ENU=EDI Template %1 does not have an Interface File Type of  XML. \Update template and reprocess.';
      Text301@1240020006 : TextConst 'ENU=An active EDI Document could not be found using node list %1 for Trade Partner %2.\Verify trade partner setup.';
      FileName@1240020008 : Text[250];

    PROCEDURE ImportByFile@9(EDIFileRec@1240030000 : Record 14002368);
    VAR
      EDIDocument@1240030001 : Record 14002353;
      EDIDocument2@1240030017 : Record 14002353;
      EDITradePtnr@1240030011 : Record 14002360;
      EDITemplate@1240020002 : Record 14002350;
      EDIDocImport@1240030002 : Codeunit 14002355;
      EDIFile@1240030003 : File;
      CurrEDIDoc@1240030004 : Text[6];
      CurrEDISegment@1240030012 : Text[3];
      CurrTradePtnr@1240030005 : Text[20];
      ENVISATradePtnrNo@1240030013 : Code[20];
      EnvISAMyTradePtnrNo@1240030014 : Code[20];
      ENVGSTradePtnrNo@1240030015 : Code[20];
      ENVGSMyTradePtnrNo@1240030016 : Code[20];
      ENVUNBTradePtnrNo@1240020000 : Code[35];
      ENVUNBMyTradePtnrNo@1240020001 : Code[35];
      TempEnvLine@1240030007 : Text[250];
      TempFilePath@1240030008 : Text[250];
      TempLine@1240030009 : Text[250];
      TempPos@1240030010 : Integer;
      MyGSMatchFound@1240020003 : Boolean;
    BEGIN
      CLEAR(FileInfo);
      TempFilePath := EDIFileRec.Path;
      REPEAT
        TempPos := STRPOS(TempFilePath,'\');
        IF TempPos <> 0 THEN BEGIN
          IF COPYSTR(TempFilePath,TempPos,8) = '\Archive' THEN
            ERROR(Text001);
          TempFilePath[TempPos] := '_';
        END;
      UNTIL TempPos = 0;

      XMLFile := FALSE;
      IF (STRPOS(EDIFileRec.Name,'.xml') <> 0) OR
         (STRPOS(EDIFileRec.Name,'.xsd') <> 0)
      THEN BEGIN
        XMLFileCheck(EDIFileRec);
        IF XMLFile THEN
          EXIT;
      END;

      EDIFile.TEXTMODE(TRUE);
      EDIFile.OPEN(EDIFileRec.Path + EDIFileRec.Name);
      EDIFile.READ(DelimiterLine);

      EVALUATE(DecSegmentDel,COPYSTR(DelimiterLine,12,3));
      EVALUATE(DecElementDel,COPYSTR(DelimiterLine,16,3));
      EVALUATE(DecComponentDel,COPYSTR(DelimiterLine,20,3));

      EDIFACT := FALSE;

      REPEAT
        IF EDIFile.READ(TempEnvLine) = 0 THEN
          TempLine := '';
        CurrEDISegment := COPYSTR(TempEnvLine,1,3);
        IF (CurrEDISegment[3] = DecComponentDel) OR
           (CurrEDISegment[3] = DecElementDel) OR
           (CurrEDISegment[3] = DecSegmentDel) THEN
          CurrEDISegment[3] := ' ';
        CASE CurrEDISegment OF
          'ISA':
            BEGIN
              ENVISATradePtnrNo := SelectString(7,TempEnvLine);
              EnvISAMyTradePtnrNo := SelectString(9,TempEnvLine);
            END;
          'GS ':
            BEGIN
              ENVGSTradePtnrNo := SelectString(3,TempEnvLine);
              ENVGSMyTradePtnrNo := SelectString(4,TempEnvLine);
              EDITradePtnr.RESET;
              EDITradePtnr.SETCURRENTKEY(
                EDITradePtnr."ISA Trade Ptnr. No.",
                EDITradePtnr."ISA My Trade Ptnr. No.",
                EDITradePtnr."GS Trade Ptnr. No.",
                EDITradePtnr."GS My Trade Ptnr. No.");
              EDITradePtnr.SETRANGE("ISA Trade Ptnr. No.",ENVISATradePtnrNo);
              EDITradePtnr.SETRANGE("ISA My Trade Ptnr. No.",EnvISAMyTradePtnrNo);
              EDITradePtnr.SETRANGE("GS Trade Ptnr. No.",ENVGSTradePtnrNo);
              EDITradePtnr.SETRANGE("GS My Trade Ptnr. No.",ENVGSMyTradePtnrNo);
              IF EDITradePtnr.FIND('-') THEN
                CurrTradePtnr := EDITradePtnr."No."
              ELSE BEGIN
                EDIDocument2.RESET;
                EDIDocument2.SETCURRENTKEY("GS Trade Partner No. Override",Type);
                EDIDocument2.SETRANGE("GS Trade Partner No. Override",ENVGSTradePtnrNo);
                EDIDocument2.SETRANGE(Type,EDIDocument2.Type::Export);
                IF EDIDocument2.FIND('-') THEN
                  CurrTradePtnr := EDIDocument2."Trade Partner No."
                ELSE
                  CurrTradePtnr := ENVGSTradePtnrNo;
              END;
            END;
          'UNB':
            BEGIN
              EDIFACT := TRUE;
              ENVUNBTradePtnrNo := SelectString(3,TempEnvLine);
              ENVUNBMyTradePtnrNo := SelectString(4,TempEnvLine);
              EDITradePtnr.RESET;
              EDITradePtnr.SETCURRENTKEY("UNB Trade Partner No.","UNB My Trade Partner No.");
              EDITradePtnr.SETRANGE("UNB Trade Partner No.",ENVUNBTradePtnrNo);
              EDITradePtnr.SETRANGE("UNB My Trade Partner No.",ENVUNBMyTradePtnrNo);
              IF EDITradePtnr.FIND('-') THEN
                CurrTradePtnr := EDITradePtnr."No."
              ELSE
                CurrTradePtnr := ENVUNBTradePtnrNo;
            END;
          'ST ','UNH':
            BEGIN
              IF CurrEDISegment = 'ST ' THEN
                CurrEDIDoc := SelectString(2,TempEnvLine)
              ELSE
                CurrEDIDoc := SelectString(3,TempEnvLine);
              EDIDocument.RESET;
              EDIDocument.SETRANGE("Trade Partner No.",CurrTradePtnr);
              EDIDocument.SETRANGE("EDI Document No.",CurrEDIDoc);
              EDIDocument.SETRANGE(Type,EDIDocument.Type::Import);
              EDIDocument.SETFILTER(Status,'<>%1',EDIDocument.Status::Inactive);
              IF EDIDocument.FIND('-') THEN BEGIN
                IF EDIDocument.COUNT > 1 THEN BEGIN
                  EDIDocument.SETRANGE("My GS Trade Partner ID Match",TRUE);
                  IF EDIDocument.FIND('-') THEN BEGIN
                    MyGSMatchFound := FALSE;
                    EDIDocument.RESET;
                    EDIDocument.SETRANGE("Trade Partner No.",CurrTradePtnr);
                    EDIDocument.SETRANGE("EDI Document No.",CurrEDIDoc);
                    EDIDocument.SETRANGE(Type,EDIDocument.Type::Import);
                    EDIDocument.SETRANGE("My GS Trade Partner ID Match",TRUE);
                    IF EDIDocument.FIND('-') THEN
                      REPEAT
                        EDITemplate.GET(EDIDocument."EDI Template Code");
                        IF EDITemplate."My GS Trade Ptnr. Override" <> '' THEN
                          IF EDITemplate."My GS Trade Ptnr. Override" = ENVGSMyTradePtnrNo THEN
                            MyGSMatchFound := TRUE;
                      UNTIL (EDIDocument.NEXT = 0) OR (MyGSMatchFound);
                      IF NOT MyGSMatchFound THEN BEGIN
                        EDIDocument.RESET;
                        EDIDocument.SETRANGE("Trade Partner No.",CurrTradePtnr);
                        EDIDocument.SETRANGE("EDI Document No.",CurrEDIDoc);
                        EDIDocument.SETRANGE(Type,EDIDocument.Type::Import);
                        EDIDocument.SETRANGE("My GS Trade Partner ID Match",FALSE);
                        IF NOT EDIDocument.FIND('-') THEN
                          ERROR(
                            Text002,CurrTradePtnr,CurrEDIDoc,
                            EDIDocument.Type::Import,EDIDocument.Status::Inactive);
                      END;
                  END ELSE BEGIN
                    EDIDocument.SETRANGE("My GS Trade Partner ID Match");
                    EDIDocument.SETRANGE("My GS Trade Partner ID Match",FALSE);
                    IF NOT EDIDocument.FIND('-') THEN
                      ERROR(
                        Text002,CurrTradePtnr,CurrEDIDoc,
                        EDIDocument.Type::Import,EDIDocument.Status::Inactive);
                  END;
                END;
                EDIFile.CLOSE;
                EDIDocument."Interface File" := EDIFileRec.Path + EDIFileRec.Name;
                FileInfo := FileInfo.FileInfo(EDIDocument."Interface File");
                CLEAR(EDIDocImport);
                EDIDocImport.ImportTran(EDIDocument,EDIDocument."Navision Document",FileInfo);
              END ELSE
                ERROR(Text002,CurrTradePtnr,CurrEDIDoc);
            END;
        END;
      UNTIL (CurrEDISegment = 'ST ') OR
            (CurrEDISegment = 'UNH');
    END;

    PROCEDURE ImportDocument@8(EDIDocument@1240030000 : Record 14002353;DocumentNo@1240030001 : Code[10]) FileCount : Integer;
    VAR
      EDITemplate@1240030002 : Record 14002350;
      EDISetup@1240020005 : Record 14002367;
      EDIDocImport@1240030003 : Codeunit 14002355;
      EDIXMLDocImport@1240020064 : Codeunit 14099301;
      FileList@1240020007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IList";
      Directory@1240020006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Directory";
      List@1240020003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      FileInfo@1240020011 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileInfo";
      InterfaceFile@1240030005 : Text[100];
      ImportFilePath@1240030006 : Text[100];
      EDIFileName@1240020000 : Text[250];
      InterfaceFileLen@1240030007 : Integer;
      EndPosition@1240020001 : Integer;
      Processed@1240020002 : Boolean;
      XMLDoc@1240020063 : Boolean;
      Count@1240020009 : Integer;
      LoopCount@1240020010 : Integer;
    BEGIN
      FileCount := 0;
      FileCount2 := 0;
      EDISetup.GET;
      EDITemplate.GET(EDIDocument."EDI Template Code");

      EDIFACT := FALSE;
      XMLDoc := FALSE;
      CASE EDITemplate."Interface File Type" OF
        EDITemplate."Interface File Type"::"EDIFACT Delimited":
          EDIFACT := TRUE;
        EDITemplate."Interface File Type"::cXML,EDITemplate."Interface File Type"::XML:
          XMLDoc := TRUE
      END;

      IF (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::"X12 Delimited") OR
         (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::"EDIFACT Delimited") OR
         (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::cXML) OR
         (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::XML)
      THEN BEGIN
        ImportFilePath := EDITemplate."Interface File Path" + 'Inbox\';
        InterfaceFile := EDIDocument."Interface File";
        InterfaceFileLen := STRLEN(InterfaceFile);
        CASE EDITemplate."Interface File Type" OF
          EDITemplate."Interface File Type"::"X12 Delimited":
            InterfaceFileLen := InterfaceFileLen + 4;
          EDITemplate."Interface File Type"::"EDIFACT Delimited":
            InterfaceFileLen := InterfaceFileLen + 7;
          EDITemplate."Interface File Type"::cXML,EDITemplate."Interface File Type"::XML:
            InterfaceFileLen := InterfaceFileLen + STRLEN(DELCHR(EDIDocument."EDI Document No.",'=',':')) + 1;
        END;
        FileCount := 0;
        Count := 0;
          FileList := Directory.EnumerateFiles(ImportFilePath);
        List := List.List;
        List.AddRange(FileList);
        IF List.Count > 0 THEN BEGIN
          LoopCount := List.Count;
          REPEAT
            FileInfo := FileInfo.FileInfo(FORMAT(List.Item(Count)));
            FileName := FileInfo.Name;
            IF ((CurrentFileName <> '') AND ((FileName) = CurrentFileName)) OR
               (CurrentFileName = '') AND (FileInfo.Length <> 0)
           THEN BEGIN
            Processed := FALSE;
            FileName := COPYSTR(FileName,1,InterfaceFileLen);
            IF COPYSTR(FileName,1,InterfaceFileLen) = InterfaceFile + '-' + DELCHR(EDIDocument."EDI Document No.",'=',':') THEN BEGIN
              EDIDocument."Interface File" := ImportFilePath + FORMAT(FileInfo.Name);
              IF XMLDoc THEN BEGIN
                CLEAR(EDIXMLDocImport);
                Processed := EDIXMLDocImport.ImportXMLFile(EDIDocument,DocumentNo,FileInfo);
              END ELSE BEGIN
                CLEAR(EDIDocImport);
                Processed := EDIDocImport.ImportTran(EDIDocument,DocumentNo,FileInfo);
              END;
              IF Processed THEN BEGIN
                FileCount := FileCount + 1;
                FileCount2 := FileCount;
              END;
              COMMIT;
            END;
            END;
            Count += 1;
          UNTIL Count = LoopCount;
        END;
      END ELSE
        IF (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::None) THEN BEGIN
          IF EDITemplate."File Format" = EDITemplate."File Format"::XML THEN
            XMLDoc := TRUE
          ELSE
            XMLDoc := FALSE;
          EDIFileName := EDIDocument."Interface File";
          EndPosition := 0;
          IF STRPOS(COPYSTR(EDIFileName,EndPosition + 1),'\') = 0 THEN
            ERROR(
              Text003,
              EDITemplate.Code,EDIDocument."Navision Document",EDIDocument."EDI Document No.",EDIDocument."Trade Partner No.");
          WHILE STRPOS(COPYSTR(EDIFileName,EndPosition + 1),'\') > 0 DO
            EndPosition := EndPosition + STRPOS(COPYSTR(EDIFileName,EndPosition + 1),'\');
          ImportFilePath := COPYSTR(EDIFileName,1,EndPosition - 1);
           Count := 0;
           FileList := Directory.EnumerateFiles(ImportFilePath);
          List := List.List;
          List.AddRange(FileList);
          IF List.Count > 0 THEN BEGIN
            LoopCount := List.Count;
            REPEAT
              FileInfo := FileInfo.FileInfo(FORMAT(List.Item(Count)));
              FileName := FORMAT(FileInfo.Name);
              IF ((CurrentFileName <> '') AND ((FileName) = CurrentFileName))OR
                 (CurrentFileName = '')
             THEN BEGIN
              Processed := FALSE;
              IF XMLDoc THEN BEGIN
                CLEAR(EDIXMLDocImport);
                Processed := EDIXMLDocImport.ImportXMLFile(EDIDocument,DocumentNo,FileInfo);
              END ELSE BEGIN
                CLEAR(EDIDocImport);
                Processed := EDIDocImport.ImportTran(EDIDocument,DocumentNo,FileInfo);
              END;
              IF Processed THEN BEGIN
                FileCount := FileCount + 1;
                FileCount2 := FileCount;
              END;
              END;
              Count += 1;
            UNTIL Count = LoopCount;
            FileCount2 := FileCount;
          END;
        END ELSE BEGIN
          CLEAR(EDIDocImport);
          Processed := FALSE;
          Processed := EDIDocImport.ImportTran(EDIDocument,DocumentNo,FileInfo);
          IF Processed THEN BEGIN
            FileCount := FileCount + 1;
            FileCount2 := FileCount;
          END;
        END;

      COMMIT;
    END;

    PROCEDURE SelectString@7(RequestedElement@1240030001 : Integer;TempString@1240030002 : Text[250]) ReturnString@1240030000 : Text[250];
    VAR
      ElementBegin@1240030003 : Boolean;
      ElementEnd@1240030004 : Boolean;
      ElementNo@1240030005 : Integer;
      i@1240030007 : Integer;
      j@1240030008 : Integer;
    BEGIN
      ReturnString := '';
      ElementBegin := FALSE;
      i := 1;
      j := 1;
      ElementNo := 1;
      REPEAT
        IF TempString[i] = DecElementDel THEN BEGIN
          ElementNo := ElementNo + 1;
          i := i + 1;
        END;
        IF ElementNo = RequestedElement THEN
          ElementBegin := TRUE
        ELSE
          i := i + 1;
      UNTIL ElementBegin;

      j := i + 1;
      REPEAT
        IF EDIFACT THEN BEGIN
          IF (TempString[j] = DecComponentDel) OR
             (TempString[j] = DecElementDel) OR
            ((TempString[j] = DecSegmentDel) AND
             (TempString[j-1] <> '?')) THEN
            ElementEnd := TRUE
          ELSE
            j := j + 1;
        END ELSE BEGIN
          IF (TempString[j] = DecComponentDel) OR
             (TempString[j] = DecElementDel) OR
             (TempString[j] = DecSegmentDel) THEN
            ElementEnd := TRUE
          ELSE
            j := j + 1;
        END;
      UNTIL ElementEnd;

      IF (j - i) > 0 THEN
        EXIT(COPYSTR(TempString,i,j - i))
      ELSE
        EXIT('');
    END;

    PROCEDURE GetFile@1240020000(List@1240020001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";NumFiles@1240020000 : Integer);
    BEGIN
      CurrentFileName := FORMAT(List.Item(NumFiles));
      GetFileName(CurrentFileName);
    END;

    PROCEDURE GetFileCount@1240020001() ProcessedFile : Boolean;
    BEGIN
      IF FileCount2 <> 0 THEN
        ProcessedFile := TRUE
      ELSE
        ProcessedFile := FALSE;
    END;

    PROCEDURE XMLFileCheck@1240020003(EDIFile@1240020000 : Record 14002368);
    BEGIN
      XMLFile := ImportXMLDocument(EDIFile);
    END;

    PROCEDURE ImportXMLDocument@1000000000(EDIFile@1240020012 : Record 14002368) : Boolean;
    VAR
      EDIDocument@1240020010 : Record 14002353;
      EDIDocument2@1240020004 : Record 14002353;
      EDITradePtnr@1240020007 : Record 14002360;
      EDITradePtnr2@1240020021 : Record 14002360;
      EDITemplate@1240020020 : Record 14002350;
      EDIDocImport@1240020015 : Codeunit 14002355;
      XMLDocument@1240020017 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLNodeList@1240020016 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLNode@1240020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLCurrNode@1240020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TempXMLAttributeList@1240020022 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLNsMgr@1240020028 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      FileName@1240020000 : Text[1024];
      XMLSenderID@1240020006 : Code[50];
      XMLReceiverID@1240020005 : Code[50];
      TradePtnrNo@1240020009 : Code[20];
      EDIDoc@1240020014 : Code[30];
      AttributeFound@1240020019 : Boolean;
      TradePartnerFound@1240020018 : Boolean;
      Loop@1240020023 : Integer;
      LoopCount@1240020024 : Integer;
      ResponseDoc@1240020002 : Boolean;
      NodeName@1240020003 : Text[250];
      NumberOfNodes@1240020026 : Integer;
      Counter@1240020025 : Integer;
      ReceiverIDFound@1240020011 : Boolean;
      SenderIDFound@1240020008 : Boolean;
      XMLEDIDocNo@1240020027 : Code[30];
    BEGIN
      NodeListFound := FALSE;
      FileName := EDIFile.Path + EDIFile.Name;

      IF ISNULL(XMLDocument) THEN
        XMLDocument := XMLDocument.XmlDocument;
      XMLDocument.Load(FileName);
      XMLNodeList := XMLDocument.ChildNodes();
      IF XMLNodeList.Count = 0 THEN
        EXIT(FALSE);
      NodeListFound := TRUE;

      XMLCurrNode := XMLDocument.SelectSingleNode('//cXML');
      IF ISNULL(XMLCurrNode) THEN BEGIN
        TradePartnerFound := FALSE;
        EDIDocument.RESET;
        EDIDocument.SETCURRENTKEY("Receiver ID Node List","Sender ID Node List",Type);
        EDIDocument.SETFILTER("Sender ID Node List",'<>%1','');
        EDIDocument.SETRANGE(Type,EDIDocument.Type::Import);
        EDIDocument.SETFILTER(Status,'<>%1',EDIDocument.Status::Inactive);
        IF EDIDocument.FIND('-') THEN
          REPEAT
            XMLReceiverID := '';
            XMLSenderID := '';
            XMLEDIDocNo := '';
            AttributeFound := FALSE;
            ReceiverIDFound:= FALSE;
            NumberOfNodes := 0;
            Counter := 0;

            XMLNsMgr := XMLNsMgr.XmlNamespaceManager(XMLDocument.NameTable);
            XMLNsMgr.AddNamespace(EDIDocument."Namespace Prefix",EDIDocument.Namespace);
            EDITemplate.GET(EDIDocument."EDI Template Code");
            IF EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::XML THEN BEGIN
              IF EDIDocument."Receiver ID Node List" <> '' THEN BEGIN
                XMLNsMgr := XMLNsMgr.XmlNamespaceManager(XMLDocument.NameTable);
                XMLNsMgr.AddNamespace(EDIDocument."Namespace Prefix",EDIDocument.Namespace);
                XMLNodeList := XMLDocument.SelectNodes(EDIDocument."Receiver ID Node List",XMLNsMgr);
                NumberOfNodes := XMLNodeList.Count;
                IF NumberOfNodes > 0 THEN
                  REPEAT
                    XMLCurrNode := XMLNodeList.Item(Counter);
                    IF NOT ISNULL(XMLCurrNode) THEN BEGIN
                      IF EDIDocument."Receiver ID Attribute" = '' THEN BEGIN
                        XMLReceiverID := XMLCurrNode.InnerText;
                        IF XMLReceiverID   = EDIDocument."Receiver ID" THEN
                          ReceiverIDFound := TRUE
                        ELSE
                          XMLReceiverID := '';
                      END ELSE BEGIN
                        TempXMLAttributeList := XMLCurrNode.Attributes;
                        Loop := 0;
                        LoopCount := TempXMLAttributeList.Count;
                        REPEAT
                          XMLCurrNode := TempXMLAttributeList.Item(Loop);
                          NodeName := XMLCurrNode.Name;
                          AttributeFound := FALSE;
                          IF XMLCurrNode.Name = EDIDocument."Receiver ID Attribute" THEN BEGIN
                            XMLReceiverID := XMLCurrNode.InnerText;
                            IF XMLReceiverID = EDIDocument."Receiver ID" THEN BEGIN
                              AttributeFound := TRUE;
                              ReceiverIDFound := TRUE;
                            END ELSE
                              XMLReceiverID := '';
                           END ELSE
                             XMLReceiverID := '';
                           Loop += 1;
                        UNTIL (AttributeFound) OR (Loop = LoopCount);
                      END;
                    END;
                    Counter += 1;
                  UNTIL (ReceiverIDFound) OR (Counter = NumberOfNodes);
               END;

              Counter := 0;
              NumberOfNodes := 0;
              AttributeFound := FALSE;
              SenderIDFound := FALSE;

              XMLNodeList := XMLDocument.SelectNodes(EDIDocument."Sender ID Node List",XMLNsMgr);
              NumberOfNodes := XMLNodeList.Count;
              IF NumberOfNodes > 0 THEN
                REPEAT
                  XMLCurrNode := XMLNodeList.Item(Counter);
                 IF NOT ISNULL(XMLCurrNode) THEN BEGIN
                   IF EDIDocument."Sender ID Attribute" = '' THEN BEGIN
                      XMLSenderID := XMLCurrNode.InnerText;
                      IF XMLSenderID = EDIDocument."Sender ID" THEN
                        SenderIDFound := TRUE
                      ELSE
                        XMLSenderID := '';
                    END ELSE BEGIN
                      TempXMLAttributeList := XMLCurrNode.Attributes;
                      Loop := 0;
                      LoopCount := TempXMLAttributeList.Count;
                      REPEAT
                        XMLCurrNode := TempXMLAttributeList.Item(Loop);
                        NodeName := XMLCurrNode.Name;
                        AttributeFound := FALSE;
                        IF XMLCurrNode.Name = EDIDocument."Sender ID Attribute" THEN BEGIN
                          XMLSenderID := XMLCurrNode.InnerText;
                          IF XMLSenderID = EDIDocument."Sender ID" THEN BEGIN
                            AttributeFound := TRUE;
                            SenderIDFound := TRUE;
                          END ELSE
                            XMLSenderID := '';
                        END ELSE
                          XMLSenderID := '';
                        Loop += 1;
                      UNTIL (AttributeFound) OR (Loop = LoopCount);
                    END;
                    Counter += 1;
                  END;
                UNTIL (SenderIDFound) OR (Counter = NumberOfNodes);

                XMLCurrNode :=
                  XMLDocument.SelectSingleNode(EDIDocument."EDI Document No. Node List",XMLNsMgr);
                IF ISNULL(XMLCurrNode) THEN
                  XMLEDIDocNo := EDIDocument."EDI Document No. Node List"
                ELSE
                  XMLEDIDocNo := XMLCurrNode.Name;

              IF (XMLReceiverID = EDIDocument."Receiver ID") AND
                 (XMLSenderID = EDIDocument."Sender ID") AND
                 (XMLEDIDocNo = EDIDocument."EDI Document No.")
              THEN BEGIN
                TradePartnerFound := TRUE;
                EDIDocument2.COPY(EDIDocument);
                TradePtnrNo := EDIDocument2."Trade Partner No."
              END;
            END;
          UNTIL (TradePartnerFound) OR (EDIDocument.NEXT = 0);
          IF NOT TradePartnerFound THEN BEGIN
            EDITradePtnr.RESET;
            EDITradePtnr.SETCURRENTKEY("Receiver ID Node List","Sender ID Node List");
            EDITradePtnr.SETFILTER("Receiver ID Node List",'<>%1','');
            EDITradePtnr.SETFILTER("Sender ID Node List",'<>%1','');
            IF EDITradePtnr.FIND('-') THEN
              REPEAT
                XMLReceiverID := '';
                XMLSenderID := '';
                ReceiverIDFound := FALSE;
                NumberOfNodes := 0;
                Counter := 0;

                XMLNsMgr := XMLNsMgr.XmlNamespaceManager(XMLDocument.NameTable);
                XMLNsMgr.AddNamespace(EDITradePtnr."Namespace Prefix",EDITradePtnr.Namespace);
                IF EDITradePtnr."Receiver ID Node List" <> '' THEN BEGIN
                  XMLNodeList := XMLDocument.SelectNodes(EDITradePtnr."Receiver ID Node List",XMLNsMgr);
                  NumberOfNodes := XMLNodeList.Count;
                  IF NumberOfNodes > 0 THEN
                    REPEAT
                      XMLCurrNode := XMLNodeList.Item(Counter);
                      IF NOT ISNULL(XMLCurrNode) THEN BEGIN
                        IF EDITradePtnr."Receiver ID Attribute" = '' THEN BEGIN
                          XMLReceiverID := XMLCurrNode.InnerText;
                          IF XMLReceiverID   = EDITradePtnr."Receiver ID" THEN
                            ReceiverIDFound := TRUE
                          ELSE
                            XMLReceiverID := '';
                        END ELSE BEGIN
                          TempXMLAttributeList := XMLCurrNode.Attributes;
                          Loop := 0;
                          LoopCount := TempXMLAttributeList.Count;
                          REPEAT
                            XMLCurrNode := TempXMLAttributeList.Item(Loop);
                            NodeName := XMLCurrNode.Name;
                            AttributeFound := FALSE;
                            IF XMLCurrNode.Name = EDITradePtnr."Receiver ID Attribute" THEN BEGIN
                              XMLReceiverID := XMLCurrNode.InnerText;
                              IF XMLReceiverID = EDIDocument."Receiver ID" THEN BEGIN
                                AttributeFound := TRUE;
                                ReceiverIDFound := TRUE;
                              END ELSE
                                XMLReceiverID := '';
                            END ELSE
                              XMLReceiverID := '';
                            Loop += 1;
                          UNTIL (AttributeFound) OR (Loop = LoopCount);
                        END;
                      END;
                      Counter += 1;
                    UNTIL (ReceiverIDFound) OR (Counter = NumberOfNodes);
                END;

                NumberOfNodes := 0;
                Counter := 0;
                SenderIDFound := FALSE;

                XMLNodeList := XMLDocument.SelectNodes(EDITradePtnr."Sender ID Node List",XMLNsMgr);
                NumberOfNodes := XMLNodeList.Count;
                IF NumberOfNodes > 0 THEN
                  REPEAT
                    XMLCurrNode := XMLNodeList.Item(Counter);
                    IF NOT ISNULL(XMLCurrNode) THEN BEGIN
                      IF EDITradePtnr."Sender ID Attribute" = '' THEN BEGIN
                         XMLSenderID := XMLCurrNode.InnerText;
                        IF XMLSenderID = EDITradePtnr."Sender ID" THEN
                          SenderIDFound := TRUE
                        ELSE
                          XMLSenderID := '';
                      END ELSE BEGIN
                        TempXMLAttributeList := XMLCurrNode.Attributes;
                        Loop := 0;
                        LoopCount := TempXMLAttributeList.Count;
                        REPEAT
                          XMLCurrNode := TempXMLAttributeList.Item(Loop);
                          NodeName := XMLCurrNode.Name;
                          AttributeFound := FALSE;
                          IF XMLCurrNode.Name = EDITradePtnr."Sender ID Attribute" THEN BEGIN
                            XMLSenderID := XMLCurrNode.InnerText;
                            IF XMLSenderID = EDITradePtnr."Sender ID" THEN BEGIN
                              AttributeFound := TRUE;
                              SenderIDFound := TRUE;
                            END ELSE
                              XMLSenderID := '';
                          END ELSE
                            XMLSenderID := '';
                          Loop += 1;
                        UNTIL (AttributeFound) OR (Loop = LoopCount);
                      END;
                      Counter += 1;
                    END;
                  UNTIL (SenderIDFound) OR (Counter = NumberOfNodes);

                IF (XMLReceiverID = EDITradePtnr."Receiver ID") AND
                   (XMLSenderID = EDITradePtnr."Sender ID")
                THEN BEGIN
                  TradePartnerFound := TRUE;
                  EDITradePtnr2.COPY(EDITradePtnr);
                  TradePtnrNo := EDITradePtnr2."No.";
                  XMLCurrNode :=
                    XMLDocument.SelectSingleNode(EDITradePtnr."EDI Document No. Node List",XMLNsMgr);
                  IF ISNULL(XMLCurrNode) THEN
                    EDIDoc := EDITradePtnr."EDI Document No. Node List"
                  ELSE
                    EDIDoc := XMLCurrNode.Name;
                  EDIDocument2.RESET;
                  EDIDocument2.SETRANGE("Trade Partner No.",EDITradePtnr2."No.");
                  EDIDocument2.SETRANGE("EDI Document No.",EDIDoc);
                  EDIDocument2.SETRANGE(Type,EDIDocument2.Type::Import);
                  EDIDocument2.SETFILTER(Status,'<>%1',EDIDocument2.Status::Inactive);
                  IF NOT EDIDocument2.FIND('-') THEN
                    IF ISNULL(XMLCurrNode) THEN
                      ERROR(Text301,EDIDoc,TradePtnrNo)
                    ELSE
                      ERROR(Text002,TradePtnrNo,EDIDoc);
                END;
              UNTIL (TradePartnerFound) OR (EDITradePtnr.NEXT = 0);
          END;
          IF TradePartnerFound THEN BEGIN
            EDIDoc := EDIDocument2."EDI Document No.";
            EDIDocument2."Interface File" := EDIFile.Path + EDIFile.Name;
            CLEAR(EDIDocImport);
            EDIDocImport.SetImportByXMLFile(TRUE);
            EDIDocImport.ImportTran(EDIDocument2,EDIDocument2."Navision Document",FileInfo);
          END ELSE
            ERROR(
              Text002,TradePtnrNo,EDIDoc);
      END ELSE BEGIN
        XMLNodeList := XMLCurrNode.ChildNodes;
        ResponseDoc := FALSE;
        IF XMLNodeList.Count > 0 THEN BEGIN
          XMLCurrNode := XMLDocument.SelectSingleNode('//Response');
          IF NOT ISNULL(XMLCurrNode) THEN BEGIN
            ResponseDoc := TRUE;
            GetCXMLResponseTP(XMLDocument,XMLCurrNode,TradePtnrNo);
          END ELSE BEGIN
            XMLCurrNode := XMLDocument.SelectSingleNode('//cXML');
            XMLNodeList := XMLCurrNode.ChildNodes;
            XMLCurrNode := XMLDocument.SelectSingleNode('//Header/From/Credential/Identity');
            IF NOT ISNULL(XMLCurrNode) THEN
              XMLSenderID := XMLCurrNode.InnerText;
            XMLCurrNode := XMLDocument.SelectSingleNode('//Header/To/Credential/Identity');
            IF NOT ISNULL(XMLCurrNode) THEN
              XMLReceiverID := XMLCurrNode.InnerText;
            EDITradePtnr.RESET;
            EDITradePtnr.SETCURRENTKEY("To Identifier","From Identifier");
            EDITradePtnr.SETRANGE("To Identifier",XMLReceiverID);
            EDITradePtnr.SETRANGE("From Identifier",XMLSenderID);
            IF EDITradePtnr.FIND('-') THEN
              TradePtnrNo := EDITradePtnr."No."
            ELSE
              TradePtnrNo := XMLSenderID;
          END;
        END;
        IF ResponseDoc THEN
          XMLCurrNode := XMLDocument.SelectSingleNode('//Response')
        ELSE
          XMLCurrNode := XMLDocument.SelectSingleNode('//Request');
        IF NOT ResponseDoc THEN BEGIN
          XMLNodeList := XMLCurrNode.ChildNodes;
          IF XMLNodeList.Count > 0 THEN
            XMLCurrNode := XMLNodeList.ItemOf(0);
        END;
        EDIDoc := XMLCurrNode.Name;
        EDIDocument.RESET;
        EDIDocument.SETRANGE("Trade Partner No.",TradePtnrNo);
        EDIDocument.SETRANGE("EDI Document No.",XMLCurrNode.Name);
        EDIDocument.SETRANGE(Type,EDIDocument.Type::Import);
        EDIDocument.SETFILTER(Status,'<>%1',EDIDocument.Status::Inactive);
        IF EDIDocument.FIND('-') THEN BEGIN
          EDIDocument."Interface File" := EDIFile.Path + EDIFile.Name;
          CLEAR(EDIDocImport);
          EDIDocImport.ImportTran(EDIDocument,EDIDocument."Navision Document",FileInfo);
        END ELSE
          ERROR(Text002,TradePtnrNo,EDIDoc);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE SetValues@1240020004(EDIDocument@1240020000 : Record 14002353;DocumentNo@1240020001 : Code[10];xFile@1240020002 : Record 2000000022);
    BEGIN
    END;

    LOCAL PROCEDURE GetFileName@1240020006(VAR CurrentFileName@1240020000 : Text[250]);
    VAR
      EndPosition@1240020003 : Integer;
      FileName@1240020002 : Text[250];
      ImportFilePath@1240020001 : Text[250];
      Path@1240020004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
    BEGIN
      EndPosition := 0;
      WHILE STRPOS(COPYSTR(CurrentFileName,EndPosition + 1),'\') > 0 DO
        EndPosition := EndPosition + STRPOS(COPYSTR(CurrentFileName,EndPosition + 1),'\');
      ImportFilePath := COPYSTR(CurrentFileName,1,EndPosition);
      CurrentFileName := COPYSTR(CurrentFileName,EndPosition + 1);
    END;

    LOCAL PROCEDURE GetCXMLResponseTP@1240020008(XMLDocument@1240020007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLCurrNode@1240020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR TradePtnrNo@1240020008 : Code[20]);
    VAR
      EDISendDocHdr@1240020000 : Record 14002369;
      TempXMLAttributeList@1240020004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      Loop@1240020003 : Integer;
      LoopCount@1240020002 : Integer;
      PayloadID@1240020005 : Text[250];
      AttributeFound@1240020006 : Boolean;
      NodeName@1240020009 : Text[250];
    BEGIN
      XMLCurrNode := XMLDocument.SelectSingleNode('//cXML');
      NodeName := XMLCurrNode.Name;
      TempXMLAttributeList := XMLCurrNode.Attributes;
      Loop := 0;
      LoopCount := TempXMLAttributeList.Count;
      REPEAT
        XMLCurrNode := TempXMLAttributeList.Item(Loop);
        NodeName := XMLCurrNode.Name;
        AttributeFound := FALSE;
        IF XMLCurrNode.Name = 'payloadID'THEN BEGIN
          AttributeFound := TRUE;
          PayloadID := XMLCurrNode.InnerText;
          EDISendDocHdr.RESET;
          EDISendDocHdr.SETRANGE("cXML Payload ID",PayloadID);
          IF EDISendDocHdr.FIND('-') THEN
            TradePtnrNo := EDISendDocHdr."Trade Partner No."
          ELSE
            TradePtnrNo := '';
        END ELSE
          PayloadID := '';
        Loop += 1;
      UNTIL (AttributeFound) OR (Loop = LoopCount);
    END;

    BEGIN
    END.
  }
}

