OBJECT Codeunit 14002359 E.D.I. Sales Order Send
{
  OBJECT-PROPERTIES
  {
    Date=02/25/19;
    Time=12:00:00 PM;
    Version List=SE0.61,TPZEDI_0908;
  }
  PROPERTIES
  {
    TableNo=36;
    Permissions=TableData 36=rimd;
    OnRun=BEGIN
            CASE ProcessID OF
              1,3,4:
                CreatePOAck(Rec);
              2:
                CreateWHSEShipOrder(Rec);
            END;
          END;

  }
  CODE
  {
    VAR
      EDISetup@1240030000 : Record 14002367;
      EDITemplate@1240030001 : Record 14002350;
      EDITradePartner@1240030002 : Record 14002360;
      EDICustCrossRef@1240030003 : Record 14002362;
      EDIDocument@1240030004 : Record 14002353;
      EDISendDocHdr@1240030005 : Record 14002369;
      EDISegment@1240030006 : Record 14002354;
      EDISegment2@1240030007 : Record 14002354;
      EDIElement@1240030008 : Record 14002355;
      EDIRecDocFields@1240030009 : Record 14002359;
      SelltoCustomer@1240030010 : Record 18;
      BilltoCustomer@1240030011 : Record 18;
      CompanyInformation@1240030012 : Record 79;
      ShiptoAddress@1240030013 : Record 222;
      SalespersonPurchaser@1240030014 : Record 13;
      PaymentTerms@1240030015 : Record 3;
      SalesInvoiceHeader@1240030016 : Record 112;
      SalesInvoiceLine@1240030017 : Record 113;
      SalesHeader@1240030018 : Record 36;
      SalesLine@1240030019 : Record 37;
      ShipmentMethod@1240030020 : Record 10;
      ShippingAgent@1240030021 : Record 291;
      Item@1240030022 : Record 27;
      ItemUnitOfMeasure@1240030023 : Record 5404;
      EDIElementArray@1240030024 : ARRAY [100] OF TEMPORARY Record 14002355;
      Location@1240030025 : Record 14;
      EDIRecDocHdr@1240030056 : Record 14002358;
      SalesCommentLine@1240020000 : Record 44;
      ItemCrossReference@1240020001 : Record 5717;
      ShipforAddress@1240020007 : Record 222;
      EDITradePtnrItem@1240020009 : Record 14002364;
      ReservationEntry@1240020015 : Record 337;
      SalesCommentLineDetail@1240020017 : Record 44;
      ShiptoCountry@1240020029 : Record 9;
      BilltoCountry@1240020028 : Record 9;
      SelltoCountry@1240020027 : Record 9;
      ShipfromCountry@1240020026 : Record 9;
      EDIReceiveDocHdrInfo@1240020225 : Record 14002371;
      EDIReceiveDocLineInfo@1240020030 : Record 14002372;
      EDIFormat@1240030026 : Codeunit 14002351;
      EDISend@1240030028 : Codeunit 14002356;
      EDIPackageMapIntegration@1240030055 : Codeunit 14002378;
      EDIGetReverseCrossRef@1240020014 : Codeunit 14000373;
      CreateEDIAlert@1240020016 : Codeunit 14000375;
      EDILoadDBFields@1240020020 : Codeunit 14002392;
      EDILoadEDIOutFields@1240020023 : Codeunit 14000381;
      BooleanVariable@1240030029 : Boolean;
      BypassSegment@1240030030 : Boolean;
      DateVariable@1240030031 : Date;
      DecimalVariable@1240030032 : Decimal;
      DocumentNo@1240030037 : Code[10];
      GrossShipWeight@1240030038 : Decimal;
      i@1240030039 : Integer;
      IntegerVariable@1240030040 : Integer;
      LineNumber@1240030041 : Integer;
      NetShipWeight@1240030043 : Decimal;
      NewSegment@1240030044 : Boolean;
      Ok@1240030045 : Boolean;
      OutErrorArray@1240030046 : ARRAY [100] OF Boolean;
      OutFldArray@1240030047 : ARRAY [100] OF Text[250];
      OutLenArray@1240030048 : ARRAY [100] OF Integer;
      OutputOff@1240030049 : Boolean;
      ProcessingLines@1240030050 : Boolean;
      TotalUnits@1240030051 : Decimal;
      TotalSegments@1240030052 : Integer;
      TempLineNo@1240030053 : Integer;
      RecordNo@1240020005 : Integer;
      TradePtnrFound@1240030054 : Boolean;
      Text001@1001 : TextConst 'ENU=Customer %1 is not set up as an EDI Trading Partner.';
      Text002@1002 : TextConst 'ENU=EDI Document %1 for Trading Partner %2 has a mapping error.';
      Text003@1003 : TextConst 'ENU=Sales line not found for Order # %1.';
      Text004@1004 : TextConst 'ENU=Order %1 does not contain a shipping location in the header.';
      Text005@1005 : TextConst 'ENU=Trading partner %1 could not be found for Location %2.';
      Text006@1006 : TextConst 'ENU=Unable to find EDI segment definition for Trading Partner %1.';
      Text007@1007 : TextConst 'ENU=LINE END Command found before LINE BEGIN.  Check Segment Definition.';
      Text008@1008 : TextConst 'ENU=Unable to find EDI Element for the following: %1 - %2 - %3 - %4';
      InternalDocNo@1240030057 : Code[10];
      LoopFinished@1240020002 : Boolean;
      RepeatCount@1240020003 : Integer;
      TotalUnitsBase@1240020004 : Decimal;
      LoopCnt@1240020006 : Integer;
      ReverseCrossReference@1240020013 : Boolean;
      ReverseCrossRefArray@1240020012 : ARRAY [100] OF Text[40];
      ReverseCrossRefValue@1240020011 : Text[40];
      BypassSegment2@1240020010 : Boolean;
      OutError2@1240020008 : Boolean;
      ProcessID@1240020019 : Integer;
      TimeVariable@1240020021 : Time;
      DateTimeVariable@1240020022 : DateTime;
      RecRef@1240020024 : RecordRef;
      Text009@1240020018 : TextConst 'ENU=Customer %1 is not set up for EDI transaction %2.';
      XMLDoc@1240020025 : Boolean;

    PROCEDURE CreatePOAck@18(VAR CurrentSalesHdr@1240030001 : Record 36) ErrCode@1240030000 : Boolean;
    VAR
      EDIXMLManagement@1240020000 : Codeunit 14099302;
    BEGIN
      CLEAR(EDILoadEDIOutFields);

      SalesHeader.COPY(CurrentSalesHdr);
      SalesHeader.CALCFIELDS(Amount,"Amount Including VAT");

      TradePtnrFound := FALSE;

      EDITradePartner.SETCURRENTKEY("Customer No.");
      EDITradePartner.SETRANGE("Customer No.",SalesHeader."Bill-to Customer No.");
      IF EDITradePartner.FIND('-') THEN BEGIN
        TradePtnrFound := TRUE;
        EDICustCrossRef.INIT;
        EDICustCrossRef.RESET;
        EDICustCrossRef.SETRANGE("Trade Partner No.",EDITradePartner."No.");
        EDICustCrossRef.SETRANGE("Navision Ship To Code",SalesHeader."Ship-to Code");
        Ok := EDICustCrossRef.FIND('-');
      END;

      IF NOT TradePtnrFound THEN BEGIN
        EDICustCrossRef.INIT;
        EDICustCrossRef.SETCURRENTKEY("Navision Sell To Code");
        EDICustCrossRef.SETRANGE("Navision Sell To Code",SalesHeader."Sell-to Customer No.");
        EDICustCrossRef.SETRANGE("Navision Ship To Code",SalesHeader."Ship-to Code");
        IF EDICustCrossRef.FIND('-') THEN BEGIN
          EDITradePartner.GET(EDICustCrossRef."Trade Partner No.");
          TradePtnrFound := TRUE;
        END;
      END;
      IF NOT TradePtnrFound THEN
        ERROR(Text001,SalesHeader."Sell-to Customer No.");

      IF SalesHeader."EDI Internal Doc. No." = '' THEN BEGIN
        EDISetup.LOCKTABLE;
        EDISetup.GET;
        EDISetup."Last Internal Doc. No." := INCSTR(EDISetup."Last Internal Doc. No.");
        SalesHeader."EDI Internal Doc. No." := EDISetup."Last Internal Doc. No.";
        EDISetup.MODIFY;
      END;

      CASE ProcessID OF
        1:
          DocumentNo := 'E_SLSPOA';
        3:
          DocumentNo := 'E_ZEROSN';
        4:
          DocumentNo := 'E_SLSQUO'
        ELSE BEGIN
          ProcessID := 1;
          DocumentNo := 'E_SLSPOA';
        END;
      END;

      EDIDocument.SETRANGE("Trade Partner No.",EDITradePartner."No.");
      EDIDocument.SETFILTER(Status,'%1|%2',EDIDocument.Status::Test,EDIDocument.Status::Production);
      EDIDocument.SETRANGE(EDIDocument."Navision Document",DocumentNo);
      IF NOT EDIDocument.FIND('-') THEN
        ERROR(Text009,SalesHeader."Sell-to Customer No.",DocumentNo);
      XMLDoc := EDIDocument."XML Document";

      IF EDIDocument."Packaged Map" THEN BEGIN
        IF EDIPackageMapIntegration.EDISalesOrderSendCreatePOAck(SalesHeader) THEN
        // IF EDISalesOrderSendPM.CreatePOAck(SalesHeader) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END;

      EDIDocument.CALCFIELDS("Element Mapping Error","Conditional Mapping Error");
      IF EDIDocument."Element Mapping Error" OR EDIDocument."Conditional Mapping Error" THEN
        ERROR(
          Text002,
          EDIDocument."Navision Document",EDIDocument."Trade Partner No.");

      EDISendDocHdr."Internal Doc No." := SalesHeader."EDI Internal Doc. No.";
      EDISendDocHdr."Navision Document" := DocumentNo;
      EDISendDocHdr."Document No." := SalesHeader."No.";
      EDISendDocHdr."Shortcut Dimension 5 Code" := SalesHeader."Shortcut Dimension 5 Code"; //TPZEDI
      EDISend.SetTopazDivision(EDISendDocHdr."Shortcut Dimension 5 Code"); //TPZEDI
      EDISend.CreateSendHdr(EDITradePartner,EDIDocument,EDISendDocHdr);

      ReadHdrAssocTables;

      LineNumber := 0;
      NetShipWeight := 0;
      GrossShipWeight := 0;
      TotalUnits := 0;
      TotalUnitsBase := 0;
      TotalSegments := 0;

      IF NOT GetFirstSalesLine THEN
        ERROR(Text003,SalesHeader."No.");

      ReadLineAssocTables;

      CreateSegments;

      IF XMLDoc THEN
        EDIXMLManagement.ResponseIDSubstitution(EDISendDocHdr);

      EXIT(TRUE);
    END;

    PROCEDURE CreateWHSEShipOrder@3(VAR CurrentSalesHdr@1240030001 : Record 36) ErrCode@1240030000 : Boolean;
    BEGIN
      CLEAR(EDILoadEDIOutFields);

      SalesHeader.COPY(CurrentSalesHdr);
      SalesHeader.CALCFIELDS(Amount,"Amount Including VAT");

      IF SalesHeader."Location Code" = '' THEN
        ERROR(Text004,
                 SalesHeader."No.");

      IF Location.GET(SalesHeader."Location Code") THEN
        ;
      IF NOT EDITradePartner.GET(Location."EDI Trading Partner ID") THEN
        ERROR(
          Text005,Location."EDI Trading Partner ID",
          SalesHeader."Location Code");

      IF SalesHeader."EDI Internal Doc. No." = '' THEN BEGIN
        EDISetup.LOCKTABLE;
        EDISetup.GET;
        EDISetup."Last Internal Doc. No." := INCSTR(EDISetup."Last Internal Doc. No.");
        SalesHeader."EDI Internal Doc. No." := EDISetup."Last Internal Doc. No.";
        SalesHeader.MODIFY;
        EDISetup.MODIFY;
      END;

      DocumentNo := 'E_SLSWSA';

      EDIDocument.SETRANGE("Trade Partner No.",EDITradePartner."No.");
      EDIDocument.SETFILTER(Status,'%1|%2',EDIDocument.Status::Test,EDIDocument.Status::Production);
      EDIDocument.SETRANGE("Navision Document",DocumentNo);
      IF NOT EDIDocument.FIND('-') THEN
        EXIT(FALSE);
      XMLDoc := EDIDocument."XML Document";

      IF EDIDocument."Packaged Map" THEN BEGIN
        IF EDIPackageMapIntegration.EDISalesOrderSendWHSEShipOrder(SalesHeader) THEN
        // IF EDISalesOrderSendPM.CreateWHSEShipOrder(SalesHeader) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END;

      EDISendDocHdr."Internal Doc No." := SalesHeader."EDI Internal Doc. No.";
      EDISendDocHdr."Navision Document" := DocumentNo;
      EDISendDocHdr."Document No." := SalesHeader."No.";
      EDISend.CreateSendHdr(EDITradePartner,EDIDocument,EDISendDocHdr);

      ReadHdrAssocTables;

      LineNumber := 0;
      NetShipWeight := 0;
      GrossShipWeight := 0;
      TotalUnits := 0;
      TotalUnitsBase := 0;
      TotalSegments := 0;

      IF NOT GetFirstSalesLine THEN
        ERROR(Text003,SalesHeader."No.");

      ReadLineAssocTables;

      CreateSegments;

      EXIT(TRUE);
    END;

    PROCEDURE CreateSegments@24();
    VAR
      NodeOnly@1240020000 : Boolean;
      CreateNode@1240020001 : Boolean;
    BEGIN
      EDISegment.SETRANGE("Trade Partner No.",EDIDocument."Trade Partner No.");
      EDISegment.SETRANGE("Navision Document",EDIDocument."Navision Document");
      EDISegment.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
      EDISegment.SETRANGE(Version,EDIDocument.Version);
      IF NOT EDISegment.FIND('-') THEN
        ERROR(Text006,EDIDocument."Trade Partner No.");
      REPEAT
        InternalDocNo := SalesHeader."EDI Internal Doc. No.";
        IF (SalesLine."EDI Line Type" = SalesLine."EDI Line Type"::Change) AND
           (SalesLine."EDI Line Status" = SalesLine."EDI Line Status"::New)
        THEN
          GetAssocInternalDocNo(SalesHeader);
        CASE EDISegment."Segment Type" OF
          EDISegment."Segment Type"::Command:
            BEGIN
              IF (EDISegment.Segment = 'LINE BEGIN') OR
                 (EDISegment."Node Name" = 'LINE BEGIN')
              THEN BEGIN
                EDISegment2.COPY(EDISegment);
                ProcessingLines := TRUE;
              END;
              IF (EDISegment.Segment = 'LINE END') OR
                 (EDISegment."Node Name" = 'LINE END')
              THEN BEGIN
                IF NOT ProcessingLines THEN
                  ERROR(Text007);
                IF GetNextSalesLine THEN BEGIN
                  ReadLineAssocTables;
                  EDISegment.GET(
                    EDISegment2."Trade Partner No.",EDISegment2."Navision Document",
                    EDISegment2."EDI Document No.",EDISegment2.Version,EDISegment2.Type,
                    EDISegment2."Processing Sequence",EDISegment2.Segment);
                END;
              END;
            END;
          EDISegment."Segment Type"::Segment:
            BEGIN
              LoopFinished := TRUE;
              BypassSegment := FALSE;
              NodeOnly := FALSE;
              CreateNode := TRUE;
              EDIElement.SETRANGE("Trade Partner No.",EDISegment."Trade Partner No.");
              EDIElement.SETRANGE("Navision Document",EDISegment."Navision Document");
              EDIElement.SETRANGE("EDI Document No.",EDISegment."EDI Document No.");
              EDIElement.SETRANGE(Version,EDISegment.Version);
              EDIElement.SETRANGE(Segment,EDISegment.Segment);
              EDIElement.SETRANGE(Type,EDIElement.Type::Export);
              IF NOT EDIElement.FIND('-') THEN BEGIN
                IF XMLDoc THEN BEGIN
                  EDISegment.CALCFIELDS("Has Attributes","Node Text");
                  IF EDISegment."Node Text" OR EDISegment."Has Attributes" THEN
                    ERROR(
                      Text008,
                        EDISegment."Trade Partner No.",EDISegment."Navision Document",
                        EDISegment.Version,EDISegment."Node Name")
                  ELSE
                    NodeOnly := TRUE;
                END ELSE
                  ERROR(
                    Text008,
                      EDISegment."Trade Partner No.",EDISegment."Navision Document",
                      EDISegment.Version,EDISegment.Segment);
              END ELSE
                IF XMLDoc AND EDIElement."Node Text" THEN
                  CreateNode := FALSE;
              IF (XMLDoc = FALSE) OR (XMLDoc AND NodeOnly = FALSE) THEN BEGIN
                TotalSegments := TotalSegments + 1;
                CLEAR(OutFldArray);
                CLEAR(OutLenArray);
                CLEAR(OutErrorArray);
                i := 1;
                LoopCnt := 1;
                REPEAT
                  ReverseCrossRefArray[i] := '';
                  ReverseCrossReference := EDIElement."Reverse Cross Reference";
                  IF ((EDIElement."Fixed Value" <> '') AND (XMLDoc = FALSE)) OR
                     ((EDIElement."XML Fixed Value" <> '') AND (XMLDoc))
                  THEN BEGIN
                    IF XMLDoc THEN
                      OutFldArray[i] := EDIElement."XML Fixed Value"
                    ELSE
                      OutFldArray[i] := EDIElement."Fixed Value";
                  END ELSE
                    CASE EDIElement.Origin OF
                      EDIElement.Origin::Navision:
                      BEGIN
                        LoadDBFields;
                          IF ReverseCrossReference THEN BEGIN
                            CLEAR(EDIGetReverseCrossRef);
                            ReverseCrossRefArray[i] :=
                              EDIGetReverseCrossRef.GetReverseCrossRef(
                                EDIElement,EDISendDocHdr,OutFldArray[i]);
                              EDIGetReverseCrossRef.FormatOutput(
                                EDISendDocHdr,EDIElement,OutError2,ReverseCrossRefArray,BypassSegment2,i);
                          END;
                      END;
                      EDIElement.Origin::"EDI In":
                        EDIFormat.LoadEDIInFields(
                          EDIElement,InternalDocNo,SalesLine."EDI Segment Group",
                          ProcessingLines,i,OutFldArray,BooleanVariable,DateVariable,DecimalVariable,IntegerVariable,
                          TimeVariable,DateTimeVariable);
                      EDIElement.Origin::"EDI Out":
                        LoadEDIOutFields;
                    END;
                  OutLenArray[i] := EDIElement.Length;
                  EDIFormat.FormatOutput(
                    EDITemplate,EDIElement,OutFldArray,OutErrorArray,i,BypassSegment,
                    BooleanVariable,DateVariable,DecimalVariable,IntegerVariable,TimeVariable,
                    DateTimeVariable);
                  IF ReverseCrossReference THEN
                    OutErrorArray[i] := OutError2;
                  EDIElementArray[i].COPY(EDIElement);
                  i := i + 1;
                UNTIL EDIElement.NEXT = 0;
              END;
              NewSegment := TRUE;
              i := 1;
              IF ReverseCrossReference THEN
                BypassSegment := BypassSegment2;
              IF (LoopCnt = 1) AND (EDISegment."Repeat Segment") THEN BEGIN
                RepeatSegment;
                LoopCnt := LoopCnt + 1;
              END;
              IF (NOT BypassSegment) AND (NOT OutputOff) THEN BEGIN
                IF XMLDoc AND CreateNode THEN BEGIN
                   EDISend.CreateSendLine(
                    EDISendDocHdr,EDIElementArray[i],OutFldArray[i],OutLenArray[i],OutErrorArray[i],
                    NewSegment,ReverseCrossRefValue,EDIDocument,TRUE,EDISegment);
                  NewSegment := FALSE;
                END;
                IF (XMLDoc = FALSE) OR (XMLDoc AND NodeOnly = FALSE) THEN
                  REPEAT
                    ReverseCrossRefValue := ReverseCrossRefArray[i];
                    EDISend.CreateSendLine(
                      EDISendDocHdr,EDIElementArray[i],OutFldArray[i],OutLenArray[i],OutErrorArray[i],
                      NewSegment,ReverseCrossRefValue,EDIDocument,FALSE,EDISegment);
                    NewSegment := FALSE;
                    i := i + 1;
                  UNTIL OutLenArray[i] = 0
              END ELSE
                TotalSegments := TotalSegments - 1;
            END;
        END;
        IF (EDISegment."Repeat Segment") THEN
          CASE TRUE OF
            LoopFinished = FALSE:
              BEGIN
                GetNextRecord;
                EDISegment.NEXT(-1);
              END;
            LoopFinished = TRUE:
              ResetAssocRecord(RecordNo);
        END;
      UNTIL EDISegment.NEXT = 0;

      IF EDISetup."Send Document Error" THEN BEGIN
        EDISendDocHdr.CALCFIELDS("Data Error");
        IF EDISendDocHdr."Data Error" THEN BEGIN
          CLEAR(CreateEDIAlert);
          CreateEDIAlert.CreateAlertSendDocError(EDISendDocHdr."No.",1,FALSE);
        END;
      END;

      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      CASE EDIDocument."Navision Document" OF
        'E_SLSWSA':
          BEGIN
            SalesHeader."EDI WHSE Shp. Gen" := TRUE;
            SalesHeader."EDI WHSE Shp. Gen Date" := WORKDATE;
            IF EDIRecDocHdr.GET(SalesHeader."EDI Internal Doc. No.") THEN BEGIN
              EDIRecDocHdr."Whse. Ship. Order Generated" := TRUE;
              EDIRecDocHdr."Generated Date" := WORKDATE;
              EDIRecDocHdr."Generated Time" := TIME;
              EDIRecDocHdr.MODIFY;
            END;
          END;
        'E_SLSPOA':
          BEGIN
            SalesHeader."EDI Ack. Generated" := TRUE;
            SalesHeader."EDI Ack. Gen. Date" := WORKDATE;
          END;
        'E_ZEROSN':
          BEGIN
            SalesHeader."EDI Cancellation Generated" := TRUE;
            SalesHeader."EDI Cancellation Advice Date" := WORKDATE;
          END;
        'E_SLSQUO':
          BEGIN
            SalesHeader."EDI Response Generated" := TRUE;
            SalesHeader."EDI Response Generated Date" := WORKDATE;
          END;
      END;
      SalesHeader.MODIFY;
    END;

    PROCEDURE LoadEDIInFields@20();
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;

      EDIRecDocFields.RESET;
      EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","Field Name");
      EDIRecDocFields.SETRANGE("Internal Doc. No.",SalesHeader."EDI Internal Doc. No.");
      EDIRecDocFields.SETRANGE("Field Name",EDIElement."Field Name");
      IF EDIRecDocFields.FIND('-') THEN
        CASE EDIElement."Data Type" OF
          EDIElement."Data Type"::Text:
            OutFldArray[i] := EDIRecDocFields."Field Text Value";
          EDIElement."Data Type"::"Dec Implied":
            DecimalVariable := EDIRecDocFields."Field Dec. Value";
          EDIElement."Data Type"::"Dec Explicit":
            DecimalVariable := EDIRecDocFields."Field Dec. Value";
          EDIElement."Data Type"::Integer:
            IntegerVariable := EDIRecDocFields."Field Integer Value";
          EDIElement."Data Type"::"Date YYMMDD":
            DateVariable := EDIRecDocFields."Field Date Value";
          EDIElement."Data Type"::"Date YYYYMMDD":
            DateVariable := EDIRecDocFields."Field Date Value";
        END;

      IF (ProcessingLines = TRUE) AND
         (BooleanVariable = FALSE) AND
         (DateVariable = 0D) AND
         (IntegerVariable = 0) AND
         (DecimalVariable = 0) THEN
        LoadEDILineInFields;
    END;

    PROCEDURE LoadEDIOutFields@16();
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;

      IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN BEGIN
        CASE EDIElement."Field Name" OF
          ELSE BEGIN
            LoadEDIOutVariable;
            LoadEDIOutRecordRef;
            EDILoadEDIOutFields.SalesOrderSendEDIOut(
              EDIElement,OutFldArray,DecimalVariable,IntegerVariable,DateVariable,
              BooleanVariable,TimeVariable,DateTimeVariable,i);
          END;
        END;
      END;
    END;

    PROCEDURE LoadEDILineInFields@22();
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;

      EDIRecDocFields.RESET;
      EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","Field Name");
      EDIRecDocFields.SETRANGE("Internal Doc. No.",SalesHeader."EDI Internal Doc. No.");
      EDIRecDocFields.SETRANGE("Field Name",EDIElement."Field Name");
      EDIRecDocFields.SETRANGE("Document Line No.",SalesLine."Line No.");
      IF EDIRecDocFields.FIND('-') THEN
        CASE EDIElement."Data Type" OF
          EDIElement."Data Type"::Text:
            OutFldArray[i] := EDIRecDocFields."Field Text Value";
          EDIElement."Data Type"::"Dec Implied":
            DecimalVariable := EDIRecDocFields."Field Dec. Value";
          EDIElement."Data Type"::"Dec Explicit":
            DecimalVariable := EDIRecDocFields."Field Dec. Value";
          EDIElement."Data Type"::Integer:
            IntegerVariable := EDIRecDocFields."Field Integer Value";
          EDIElement."Data Type"::"Date YYMMDD":
            DateVariable := EDIRecDocFields."Field Date Value";
          EDIElement."Data Type"::"Date YYYYMMDD":
            DateVariable := EDIRecDocFields."Field Date Value";
        END ELSE BEGIN
        EDIRecDocFields.RESET;
        EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","Line No.");
        EDIRecDocFields.SETRANGE("Internal Doc. No.",SalesHeader."EDI Internal Doc. No.");
        EDIRecDocFields.SETRANGE("Document Line No.",SalesLine."Line No.");
        IF EDIRecDocFields.FIND('-') THEN BEGIN
          TempLineNo := EDIRecDocFields."Line No.";
          EDIRecDocFields.SETRANGE("Document Line No.",0);
          EDIRecDocFields.SETRANGE("Field Name",EDIElement."Field Name");
          EDIRecDocFields.SETFILTER("Line No.",'<%1',TempLineNo);
          IF EDIRecDocFields.FIND('-') THEN
            CASE EDIElement."Data Type" OF
              EDIElement."Data Type"::Text:
                OutFldArray[i] := EDIRecDocFields."Field Text Value";
              EDIElement."Data Type"::"Dec Implied":
                DecimalVariable := EDIRecDocFields."Field Dec. Value";
              EDIElement."Data Type"::"Dec Explicit":
                DecimalVariable := EDIRecDocFields."Field Dec. Value";
              EDIElement."Data Type"::Integer:
                IntegerVariable := EDIRecDocFields."Field Integer Value";
              EDIElement."Data Type"::"Date YYMMDD":
                DateVariable := EDIRecDocFields."Field Date Value";
              EDIElement."Data Type"::"Date YYYYMMDD":
                DateVariable := EDIRecDocFields."Field Date Value";
            END;
        END;
      END;
    END;

    PROCEDURE UpdateLineTotals@28();
    BEGIN
      LineNumber := LineNumber + 1;

      TotalUnits := TotalUnits + SalesLine.Quantity;
      TotalUnitsBase := TotalUnitsBase + SalesLine."Quantity (Base)";

      NetShipWeight := NetShipWeight + (SalesLine."Net Weight" * SalesLine.Quantity);
      GrossShipWeight := GrossShipWeight + (SalesLine."Gross Weight" * SalesLine.Quantity);
    END;

    PROCEDURE LoadDBFields@23();
    BEGIN
      CASE EDIElement."NAV Table No." OF
        3:
          BEGIN
            RecRef.OPEN(3);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(PaymentTerms);
          END;
        10:
          BEGIN
            RecRef.OPEN(10);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShipmentMethod);
          END;
        14:
          BEGIN
            RecRef.OPEN(14);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(Location);
          END;
        27:
          BEGIN
            RecRef.OPEN(27);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(Item);
          END;
        36:
          BEGIN
            RecRef.OPEN(36);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesHeader);
          END;
        37:
          BEGIN
            RecRef.OPEN(37);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesLine);
          END;
        44:
          BEGIN
            RecRef.OPEN(44);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesCommentLine);
          END;
        79:
          BEGIN
            RecRef.OPEN(79);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(CompanyInformation);
          END;
        112:
          BEGIN
            RecRef.OPEN(112);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesInvoiceHeader);
          END;
        113:
          BEGIN
            RecRef.OPEN(113);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesInvoiceLine);
          END;
        222:
          BEGIN
            RecRef.OPEN(222);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShiptoAddress);
          END;
        291:
          BEGIN
            RecRef.OPEN(291);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShippingAgent);
          END;
        337:
          BEGIN
            RecRef.OPEN(337);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ReservationEntry);
          END;
        5404:
          BEGIN
            RecRef.OPEN(5404);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ItemUnitOfMeasure);
          END;
        5717:
          BEGIN
            RecRef.OPEN(5717);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ItemCrossReference);
          END;
        10018:
          BEGIN
            RecRef.OPEN(18);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SelltoCustomer);
          END;
        10019:
          BEGIN
            RecRef.OPEN(18);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(BilltoCustomer);
          END;
        10222:
          BEGIN
            RecRef.OPEN(222);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShipforAddress);
          END;
        10044:
          BEGIN
            RecRef.OPEN(44);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesCommentLineDetail);
          END;
         19009:
          BEGIN
            RecRef.OPEN(9);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SelltoCountry);
          END;
        19010:
          BEGIN
            RecRef.OPEN(9);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(BilltoCountry);
          END;
        19011:
          BEGIN
            RecRef.OPEN(9);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShiptoCountry);
          END;
        19012:
          BEGIN
            RecRef.OPEN(9);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShipfromCountry);
          END;
        14002350:
          BEGIN
            RecRef.OPEN(14002350);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDITemplate);
          END;
        14002353:
          BEGIN
            RecRef.OPEN(14002353);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDIDocument);
          END;
        14002354:
          BEGIN
            RecRef.OPEN(14002354);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDISegment);
          END;
        14002360:
          BEGIN
            RecRef.OPEN(14002360);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDITradePartner);
          END;
        14002362:
          BEGIN
            RecRef.OPEN(14002362);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDICustCrossRef);
          END;
        14002364:
          BEGIN
            RecRef.OPEN(14002364);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDITradePtnrItem);
          END;
          14002369:
          BEGIN
            RecRef.OPEN(14002369);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDISendDocHdr);
          END;
        ELSE
          EXIT;
      END;
      EDILoadDBFields.LoadDBFields(
        EDIElement,OutFldArray,DecimalVariable,IntegerVariable,DateVariable,
        BooleanVariable,TimeVariable,DateTimeVariable,i,RecRef);
      RecRef.CLOSE;
    END;

    PROCEDURE ReadHdrAssocTables@26();
    BEGIN
      // Get supporting data from other tables
      EDITemplate.GET(EDIDocument."EDI Template Code");

      CompanyInformation.GET;

      PaymentTerms.INIT;
      IF SalesHeader."Payment Terms Code" <> '' THEN
        PaymentTerms.GET(SalesHeader."Payment Terms Code");

      SelltoCustomer.GET(SalesHeader."Sell-to Customer No.");

      BilltoCustomer.GET(SalesHeader."Bill-to Customer No.");

      ShiptoAddress.INIT;
      IF SalesHeader."Ship-to Code" <> '' THEN
        ShiptoAddress.GET(SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code");

      SalespersonPurchaser.INIT;
      IF SalesHeader."Salesperson Code" <> '' THEN BEGIN
        SalespersonPurchaser.SETRANGE(Code,SalesHeader."Salesperson Code");
        SalespersonPurchaser.FIND('-');
      END;

      ShipmentMethod.INIT;
      IF SalesHeader."Shipment Method Code" <> '' THEN
        ShipmentMethod.GET(SalesHeader."Shipment Method Code");

      ShippingAgent.INIT;
      IF SalesHeader."Shipping Agent Code" <> '' THEN
        ShippingAgent.GET(SalesHeader."Shipping Agent Code");

      SalesCommentLine.RESET;
      SalesCommentLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesCommentLine.SETRANGE("No.",SalesHeader."No.");
      SalesCommentLine.SETRANGE("Document Line No.",0);
      IF NOT SalesCommentLine.FIND('-') THEN
        SalesCommentLine.INIT;

      ShipforAddress.INIT;
      IF SalesHeader."Ship-for Code" <> '' THEN
        ShipforAddress.GET(SalesHeader."Sell-to Customer No.",SalesHeader."Ship-for Code");

      Location.GET(SalesHeader."Location Code");

      IF SalesHeader."Sell-to Country/Region Code" <> '' THEN
        IF NOT SelltoCountry.GET(SalesHeader."Sell-to Country/Region Code") THEN
          CLEAR(SelltoCountry);

      IF SalesHeader."Bill-to Country/Region Code" <> '' THEN
        IF NOT BilltoCountry.GET(SalesHeader."Bill-to Country/Region Code") THEN
          CLEAR(BilltoCountry);

      IF SalesHeader."Ship-to Country/Region Code" <> '' THEN
        IF NOT ShiptoCountry.GET(SalesHeader."Ship-to Country/Region Code") THEN
          CLEAR(ShiptoCountry);

      IF Location."Country/Region Code" <> '' THEN
        IF NOT ShipfromCountry.GET(Location."Country/Region Code") THEN
          CLEAR(ShipfromCountry);

      EDIReceiveDocHdrInfo.RESET;
      EDIReceiveDocHdrInfo.SETCURRENTKEY("Document No.");
      EDIReceiveDocHdrInfo.SETRANGE("Document No.",SalesHeader."No.");
      EDIReceiveDocHdrInfo.SETRANGE("Internal Doc. No.",SalesHeader."EDI Internal Doc. No.");
      IF NOT EDIReceiveDocHdrInfo.FIND('-') THEN
        CLEAR(EDIReceiveDocHdrInfo);

      //
      // Add any other tables associated with the sales header here.
      //

      // Call the site specific customization codeunit
    END;

    PROCEDURE ReadLineAssocTables@27();
    BEGIN
      UpdateLineTotals;

      // Get Line supporting data from other tables.
      IF SalesLine.Type = SalesLine.Type::Item THEN BEGIN
        IF NOT Item.GET(SalesLine."No.") THEN
          Item.INIT;
        IF NOT ItemUnitOfMeasure.GET(SalesLine."No.",SalesLine."Unit of Measure Code") THEN
          ItemUnitOfMeasure.INIT;
      END;

      ItemCrossReference.RESET;
      ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
      ItemCrossReference.SETFILTER(
        "Cross-Reference Type",'<>%1',ItemCrossReference."Cross-Reference Type"::Vendor);
      ItemCrossReference.SETRANGE("Cross-Reference Type No.",SalesHeader."Sell-to Customer No.");
      ItemCrossReference.SETRANGE("Item No.",SalesLine."No.");
      ItemCrossReference.SETRANGE("Variant Code",SalesLine."Variant Code");
      IF NOT ItemCrossReference.FIND('-') THEN BEGIN
        ItemCrossReference.SETRANGE("Cross-Reference Type No.",'');
        IF NOT ItemCrossReference.FIND('-') THEN
          ItemCrossReference.INIT;
      END;

      EDITradePtnrItem.RESET;
      IF DocumentNo = 'E_SLSWSA' THEN
        EDITradePtnrItem.SETRANGE("Trade Partner No.",SalesHeader."EDI Trade Partner")
      ELSE
        EDITradePtnrItem.SETRANGE("Trade Partner No.",EDITradePartner."No.");
      EDITradePtnrItem.SETRANGE("Navision Item No.",SalesLine."No.");
      EDITradePtnrItem.SETRANGE("Navision Variant Code",SalesLine."Variant Code");
      IF NOT EDITradePtnrItem.FIND('-') THEN
        EDITradePtnrItem.SETRANGE("Navision Variant Code");
      IF NOT EDITradePtnrItem.FIND('-') THEN
        EDITradePtnrItem.INIT;

      ReservationEntry.RESET;
      ReservationEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
      ReservationEntry.SETRANGE("Source ID",SalesLine."Document No.");
      ReservationEntry.SETRANGE("Source Type",37);
      ReservationEntry.SETRANGE("Source Subtype",1);
      ReservationEntry.SETRANGE("Source Ref. No.",SalesLine."Line No.");
      IF NOT ReservationEntry.FIND('-') THEN
        ReservationEntry.INIT;

      SalesCommentLineDetail.RESET;
      SalesCommentLineDetail.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesCommentLineDetail.SETRANGE("No.",SalesHeader."No.");
      SalesCommentLineDetail.SETRANGE("Document Line No.",SalesLine."Line No.");
      IF NOT SalesCommentLineDetail.FIND('-') THEN
        SalesCommentLineDetail.INIT;

      EDIReceiveDocLineInfo.RESET;
      EDIReceiveDocLineInfo.SETCURRENTKEY("Document No.","Line No.");
      EDIReceiveDocLineInfo.SETRANGE("Document No.",SalesHeader."No.");
      EDIReceiveDocLineInfo.SETRANGE("Internal Doc. No.",SalesHeader."EDI Internal Doc. No.");
      EDIReceiveDocLineInfo.SETRANGE("Line No.",SalesLine."Line No.");
      IF NOT EDIReceiveDocLineInfo.FIND('-') THEN
        CLEAR(EDIReceiveDocLineInfo);

      //
      // Add any other tables associated with the sales line here.
      //
    END;

    PROCEDURE GetFirstSalesLine@1240030000() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE(SalesLine."Document No.",SalesHeader."No.");
      SalesLine.SETFILTER("No.",'<>%1','');
      CASE ProcessID OF
        1,2:
          BEGIN
            IF EDIDocument."Export Reserved Quantity Lines" THEN BEGIN
              IF NOT EDIDocument."Export Zero Qty. Lines" THEN
                SalesLine.SETFILTER("Reserved Quantity",'<>%1',0);
            END ELSE BEGIN
              IF NOT EDIDocument."Export Zero Qty. Lines" THEN
                SalesLine.SETFILTER("Qty. to Ship",'<>%1',0);
            END;
          END;
        3:
          SalesLine.SETRANGE(Quantity,0);
      END;
      IF SalesLine.FIND('-') THEN BEGIN
        SalesLine.CALCFIELDS("Reserved Quantity");
        REPEAT
          CASE SalesLine.Type OF
            SalesLine.Type::"G/L Account":
              IF EDIDocument."Export G/L Account Lines" THEN
                EXIT(TRUE);
            SalesLine.Type::Item:
              EXIT(TRUE);
            SalesLine.Type::Resource:
              IF EDIDocument."Export Resource Lines" THEN
                EXIT(TRUE);
            SalesLine.Type::"Charge (Item)":
              IF EDIDocument."Export Item Charge Lines" THEN
                EXIT(TRUE);
          END;
        UNTIL SalesLine.NEXT = 0;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE GetNextSalesLine@1240030001() : Boolean;
    BEGIN
      IF SalesLine.NEXT = 0 THEN
        EXIT(FALSE);
      SalesLine.CALCFIELDS("Reserved Quantity");
      REPEAT
        CASE SalesLine.Type OF
          SalesLine.Type::"G/L Account":
            IF EDIDocument."Export G/L Account Lines" THEN
              EXIT(TRUE);
          SalesLine.Type::Item:
            EXIT(TRUE);
          SalesLine.Type::Resource:
            IF EDIDocument."Export Resource Lines" THEN
              EXIT(TRUE);
          SalesLine.Type::"Charge (Item)":
            IF EDIDocument."Export Item Charge Lines" THEN
              EXIT(TRUE);
        END;
      UNTIL SalesLine.NEXT = 0;
      EXIT(FALSE);
    END;

    PROCEDURE GetAssocInternalDocNo@1240030002(SalesHdr@1240030001 : Record 36);
    VAR
      EDIChangedDocument@1240030000 : Record 14002373;
      CurrEDIRecDocField@1240030002 : Record 14002359;
      Found@1240030003 : Boolean;
      RecordCount@1240030004 : Integer;
    BEGIN
      Found := FALSE;

      EDIChangedDocument.RESET;
      EDIChangedDocument.SETRANGE("Assoc. Internal Doc. No.",SalesHdr."EDI Internal Doc. No.");
      IF EDIChangedDocument.FIND('-') THEN BEGIN
        RecordCount := EDIChangedDocument.COUNT;
        IF RecordCount = 1 THEN
          InternalDocNo := EDIChangedDocument."Internal Doc. No."
        ELSE
          REPEAT
            CurrEDIRecDocField.RESET;
            CurrEDIRecDocField.SETCURRENTKEY("Internal Doc. No.","Segment Group");
            CurrEDIRecDocField.SETRANGE("Internal Doc. No.",EDIChangedDocument."Internal Doc. No.");
            CurrEDIRecDocField.SETRANGE("Segment Group",SalesLine."EDI Segment Group");
            CurrEDIRecDocField.SETRANGE("New Item",TRUE);
            IF CurrEDIRecDocField.FIND('-') THEN
              CASE CurrEDIRecDocField."Nav Field No." OF
               SalesLine.FIELDNO("EDI Item Cross Ref."):
                  BEGIN
                    IF SalesLine."EDI Item Cross Ref." =
                      CurrEDIRecDocField."Field Text Value" THEN BEGIN
                        InternalDocNo := CurrEDIRecDocField."Internal Doc. No.";
                        Found := TRUE;
                      END;
                  END;
                SalesLine.FIELDNO("Cross-Reference No."):
                  BEGIN
                    IF SalesLine."Cross-Reference No." =
                      CurrEDIRecDocField."Field Text Value" THEN BEGIN
                        InternalDocNo := CurrEDIRecDocField."Internal Doc. No.";
                        Found := TRUE;
                     END;
                  END;
                SalesLine.FIELDNO("No."):
                  BEGIN
                    IF SalesLine."No." =
                      CurrEDIRecDocField."Field Text Value" THEN BEGIN
                        InternalDocNo := CurrEDIRecDocField."Internal Doc. No.";
                        Found := TRUE;
                      END;
                  END;
              END;
          UNTIL (EDIChangedDocument.NEXT = 0) OR (Found = TRUE);
      END;
    END;

    PROCEDURE RepeatSegment@1240030005() : Boolean;
    VAR
      SalesCommentLine2@1240020000 : Record 44;
      SalesCommentLineDetail2@1240020001 : Record 44;
      ReservationEntry2@1240020002 : Record 337;
      EDIElement2@1240020004 : Record 14002355;
      LastRecord@1240030002 : Boolean;
      Found@1240020003 : Boolean;
    BEGIN
      LoopFinished := TRUE;
      LastRecord := FALSE;
      RecordNo := 0;
      Found := FALSE;

      EDIElement2.SETRANGE("Trade Partner No.",EDISegment."Trade Partner No.");
      EDIElement2.SETRANGE("Navision Document",EDISegment."Navision Document");
      EDIElement2.SETRANGE("EDI Document No.",EDISegment."EDI Document No.");
      EDIElement2.SETRANGE(Version,EDISegment.Version);
      EDIElement2.SETRANGE(Type,EDISegment.Type);
      EDIElement2.SETRANGE(Segment,EDISegment.Segment);
      IF EDIElement2.FIND('-') THEN
        REPEAT
          CASE EDIElement2.Origin OF
            EDIElement2.Origin::"EDI Out":
              BEGIN
              END;
            EDIElement2.Origin::Navision:
              CASE EDIElement2."NAV Table No." OF
                DATABASE::"Sales Comment Line":
                  BEGIN
                    Found := TRUE;
                    RecordNo := 1;
                    IF SalesCommentLine."No." = '' THEN
                      LastRecord := TRUE
                    ELSE BEGIN
                      SalesCommentLine2.COPY(SalesCommentLine);
                      IF EDISegment.Maximum <> 0 THEN BEGIN
                        IF NOT BypassSegment THEN
                          RepeatCount := RepeatCount + 1;
                        IF (SalesCommentLine2.NEXT = 0) OR (RepeatCount = EDISegment.Maximum) THEN
                          LastRecord := TRUE
                        ELSE
                          LoopFinished := FALSE;
                      END ELSE BEGIN
                        IF SalesCommentLine2.NEXT = 0 THEN
                          LastRecord := TRUE
                        ELSE
                          LoopFinished := FALSE;
                      END;
                    END;
                  END;
                DATABASE::"Reservation Entry":
                  BEGIN
                    Found := TRUE;
                    RecordNo := 2;
                    IF ReservationEntry."Entry No." = 0 THEN
                      LastRecord := TRUE
                    ELSE BEGIN
                      ReservationEntry2.COPY(ReservationEntry);
                      IF EDISegment.Maximum <> 0 THEN BEGIN
                        IF NOT BypassSegment THEN
                          RepeatCount := RepeatCount + 1;
                        IF (ReservationEntry2.NEXT = 0) OR (RepeatCount = EDISegment.Maximum) THEN
                          LastRecord := TRUE
                        ELSE
                          LoopFinished := FALSE;
                      END ELSE BEGIN
                        IF ReservationEntry2.NEXT = 0 THEN
                          LastRecord := TRUE
                        ELSE
                          LoopFinished := FALSE;
                      END;
                    END;
                  END;
                10044:
                  BEGIN
                    Found := TRUE;
                    RecordNo := 3;
                    IF SalesCommentLineDetail."No." = '' THEN
                      LastRecord := TRUE
                    ELSE BEGIN
                      SalesCommentLineDetail2.COPY(SalesCommentLineDetail);
                      IF EDISegment.Maximum <> 0 THEN BEGIN
                        IF NOT BypassSegment THEN
                          RepeatCount := RepeatCount + 1;
                        IF (SalesCommentLineDetail2.NEXT = 0) OR (RepeatCount = EDISegment.Maximum) THEN
                          LastRecord := TRUE
                        ELSE
                          LoopFinished := FALSE;
                      END ELSE BEGIN
                        IF SalesCommentLineDetail2.NEXT = 0 THEN
                          LastRecord := TRUE
                        ELSE
                          LoopFinished := FALSE;
                      END;
                    END;
                  END;

                // Add additional tables here

              END;
          END;
        UNTIL (EDIElement2.NEXT = 0) OR (Found = TRUE);

      IF LastRecord THEN BEGIN
        LoopFinished := TRUE;
        RecordNo := 0;
        RepeatCount := 0;
      END;
    END;

    PROCEDURE GetNextRecord@1240020000();
    BEGIN
      CASE RecordNo OF
        1:
          SalesCommentLine.NEXT;
        2:
          ReservationEntry.NEXT;
        3:
          SalesCommentLineDetail.NEXT;

        // Add additional tables here

      END;
    END;

    PROCEDURE SetProcessID@1240020001(ID@1240020000 : Integer);
    BEGIN
      ProcessID := ID;
    END;

    PROCEDURE LoadEDIOutRecordRef@1240020002();
    BEGIN
      RecRef.OPEN(3);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(PaymentTerms);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(10);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(ShipmentMethod);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(13);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SalespersonPurchaser);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(Location);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(18);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SelltoCustomer);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'Sell-to Customer');
        RecRef.GETTABLE(BilltoCustomer);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'Bill-to Customer');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(27);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(Item);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(36);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SalesHeader);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(37);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SalesLine);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(44);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SalesCommentLine);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(79);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(CompanyInformation);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(222);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(ShiptoAddress);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
        RecRef.GETTABLE(ShipforAddress);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'Ship-for Address');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(291);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(ShippingAgent);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(337);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(ReservationEntry);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(5404);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(ItemUnitOfMeasure);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(5717);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(ItemCrossReference);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002350);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDITemplate);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002353);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDIDocument);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002359);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDISendDocHdr);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002360);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDITradePartner);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002362);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDICustCrossRef);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002364);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDITradePtnrItem);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;
    END;

    PROCEDURE LoadEDIOutVariable@1240020003();
    BEGIN
      EDILoadEDIOutFields.SetSalesOrderSendVariable(
        LineNumber,TotalUnits,NetShipWeight,GrossShipWeight,TotalSegments,TotalUnitsBase);
    END;

    PROCEDURE ResetAssocRecord@1240040004(CurrRecordNo@1240020000 : Integer);
    BEGIN
      CASE RecordNo OF
        1:
          BEGIN
            SalesCommentLine.RESET;
            SalesCommentLine.SETRANGE("Document Type",SalesHeader."Document Type");
            SalesCommentLine.SETRANGE("No.",SalesHeader."No.");
            IF NOT SalesCommentLine.FIND('-') THEN
              SalesCommentLine.INIT;
          END;
        2:
          BEGIN
            ReservationEntry.RESET;
            ReservationEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
            ReservationEntry.SETRANGE("Source ID",SalesLine."Document No.");
            ReservationEntry.SETRANGE("Source Type",37);
            ReservationEntry.SETRANGE("Source Subtype",1);
            ReservationEntry.SETRANGE("Source Ref. No.",SalesLine."Line No.");
            IF NOT ReservationEntry.FIND('-') THEN
              ReservationEntry.INIT;
          END;
      END;
    END;

    BEGIN
    END.
  }
}

