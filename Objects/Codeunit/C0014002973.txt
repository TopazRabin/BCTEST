OBJECT Codeunit 14002973 RF Pallet Phys Inv Jnl List
{
  OBJECT-PROPERTIES
  {
    Date=07/17/17;
    Time=12:00:00 PM;
    Version List=RF1.50.09;
  }
  PROPERTIES
  {
    TableNo=7700;
    OnRun=VAR
            MiniFormMgmt@1240020000 : Codeunit 7702;
          BEGIN
            MiniFormMgmt.Initialize(
              MiniformHeader,Rec,DOMxmlin,ReturnedNode,
              RootNode,XMLDOMMgmt,ADCSCommunication,LoginID,
              CurrentCode,StackCode,WhseEmpId,LocationFilter);

            IF Code <> CurrentCode THEN
              PrepareData
            ELSE
              ProcessSelection;

            CLEAR(DOMxmlin);
          END;

  }
  CODE
  {
    VAR
      MiniformHeader@1240020019 : Record 7700;
      MiniformHeader2@1240020018 : Record 7700;
      PalletJnlBatch@1240020016 : Record 14002965;
      RFEmployeeSetup@1240020015 : Record 14002802;
      XMLDOMMgmt@1240020014 : Codeunit 6224;
      ADCSCommunication@1240020013 : Codeunit 7701;
      ADCSNASStartup@1240020012 : Codeunit 7700;
      DOMxmlin@1240020010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ReturnedNode@1240020009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      RootNode@1240020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      LoginID@1240020007 : Text[250];
      WhseEmpId@1240020011 : Text[250];
      TextValue@1240020017 : Text[250];
      LocationFilter@1240020006 : Text[250];
      CurrentCode@1240020005 : Text[250];
      PreviousCode@1240020004 : Text[250];
      StackCode@1240020003 : Text[250];
      Remark@1240020002 : Text[250];
      ActiveInputField@1240020001 : Integer;
      RecRef@1240020000 : RecordRef;
      Text000@1240020024 : TextConst 'ENU=Function not Found';
      Text001@1240020023 : TextConst 'ENU=Whse. Phys. Invt. does not exists';
      Text002@1240020022 : TextConst 'ENU=Already Assigned';
      Text006@1240020021 : TextConst 'ENU=No input Node found';
      Text009@1240020020 : TextConst 'ENU=No Documents found';

    PROCEDURE ProcessSelection@1240020000();
    VAR
      FuncGroup@1240020002 : Record 7702;
      TableNo@1240020001 : Integer;
      RecordId@1240020000 : RecordID;
    BEGIN
      IF XMLDOMMgmt.FindNode(RootNode,'Header/Input',ReturnedNode) THEN
        TextValue := ReturnedNode.InnerText
      ELSE
        ERROR(Text006);

      EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'));
      RecRef.OPEN(TableNo);
      EVALUATE(RecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'));
      IF RecRef.GET(RecordId) THEN BEGIN
        RecRef.SETTABLE(PalletJnlBatch);
        PalletJnlBatch.SETFILTER("Location Code",LocationFilter);
        PalletJnlBatch.SETRANGE("Lines Exist",TRUE);
        PalletJnlBatch.SETRANGE("Assigned User ID",WhseEmpId);
        RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
        IF RFEmployeeSetup."Select Unassigned Phys. Invt." THEN
          PalletJnlBatch.SETFILTER("Assigned User ID",'%1|%2','',WhseEmpId);
        PalletJnlBatch.SETRANGE("Ready to Register",FALSE);
        RecRef.GETTABLE(PalletJnlBatch);
        ADCSCommunication.SetRecRef(RecRef);
      END ELSE BEGIN
        ADCSCommunication.RunPreviousMiniform(DOMxmlin);
        EXIT;
      END;

      FuncGroup.KeyDef := ADCSCommunication.GetFunctionKey(MiniformHeader.Code,TextValue);
      ActiveInputField := 1;

      CASE FuncGroup.KeyDef OF
        FuncGroup.KeyDef::Esc:
          ADCSCommunication.RunPreviousMiniform(DOMxmlin);
        FuncGroup.KeyDef::First:
          ADCSCommunication.FindRecRef(0,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::LnDn:
          IF NOT ADCSCommunication.FindRecRef(1,MiniformHeader."No. of Records in List") THEN
            Remark := Text009;
        FuncGroup.KeyDef::LnUp:
          ADCSCommunication.FindRecRef(2,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::Last:
          ADCSCommunication.FindRecRef(3,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::PgDn:
          IF NOT ADCSCommunication.FindRecRef(4,MiniformHeader."No. of Records in List") THEN
            Remark := Text009;
        FuncGroup.KeyDef::PgUp:
          ADCSCommunication.FindRecRef(5,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::Input:
          BEGIN
            PalletJnlBatch.LOCKTABLE;
            IF NOT PalletJnlBatch.FIND THEN BEGIN
              ADCSNASStartup.SendError(Text001);
              EXIT;
            END ELSE
              IF PalletJnlBatch."Assigned User ID" <> WhseEmpId THEN
                IF PalletJnlBatch."Assigned User ID" <> '' THEN BEGIN
                  ADCSNASStartup.SendError(Text002);
                  EXIT;
                END ELSE BEGIN
                  PalletJnlBatch.VALIDATE("Assigned User ID",WhseEmpId);
                  PalletJnlBatch.MODIFY;
                END;

            ADCSCommunication.IncreaseStack(DOMxmlin,MiniformHeader.Code);
            ADCSCommunication.GetNextMiniForm(MiniformHeader,MiniformHeader2);
            MiniformHeader2.SaveXMLin(DOMxmlin);
            CODEUNIT.RUN(MiniformHeader2."Handling Codeunit",MiniformHeader2);
          END;
        ELSE
          ERROR(Text000);
      END;

      IF NOT (FuncGroup.KeyDef IN [FuncGroup.KeyDef::Esc,FuncGroup.KeyDef::Input]) THEN
        SendForm(ActiveInputField);
    END;

    PROCEDURE PrepareData@1240020001();
    BEGIN
      WITH PalletJnlBatch DO BEGIN
        RESET;
        SETCURRENTKEY("Location Code","Assigned User ID");
        SETFILTER("Location Code",LocationFilter);
        SETRANGE("Lines Exist",TRUE);
        IF WhseEmpId <> '' THEN BEGIN
          SETRANGE("Assigned User ID",WhseEmpId);
          RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
          IF RFEmployeeSetup."Select Unassigned Phys. Invt." THEN
            SETFILTER("Assigned User ID",'%1|%2','',WhseEmpId);
        END;
        SETRANGE("Ready to Register",FALSE);

        IF NOT FIND('-') THEN BEGIN
          IF ADCSCommunication.GetNodeAttribute(ReturnedNode,'RunReturn') = '0' THEN BEGIN
            ADCSNASStartup.SendError(Text009);
            EXIT;
          END;
          ADCSCommunication.DecreaseStack(DOMxmlin,PreviousCode);
          MiniformHeader2.GET(PreviousCode);
          MiniformHeader2.SaveXMLin(DOMxmlin);
          CODEUNIT.RUN(MiniformHeader2."Handling Codeunit",MiniformHeader2);
        END ELSE BEGIN
          RecRef.GETTABLE(PalletJnlBatch);
          ADCSCommunication.SetRecRef(RecRef);
          ActiveInputField := 1;
          SendForm(ActiveInputField);
        END;
      END;
    END;

    PROCEDURE SendForm@1240020002(InputField@1240020000 : Integer);
    BEGIN
      ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,InputField,Remark,LoginID);
      ADCSCommunication.GetReturnXML(DOMxmlin);
      ADCSNASStartup.SendXMLReply(DOMxmlin);
    END;

    PROCEDURE CalculateTemplateFilter@1240020003() TemplateFilter : Text[250];
    VAR
      WhseJournalTemplate@1240020000 : Record 7309;
    BEGIN
      WhseJournalTemplate.RESET;
      WhseJournalTemplate.SETRANGE(Type,WhseJournalTemplate.Type::"Physical Inventory");
      IF WhseJournalTemplate.FIND('-') THEN BEGIN
        REPEAT
          IF TemplateFilter <> '' THEN BEGIN
            IF STRLEN(TemplateFilter) + STRLEN(WhseJournalTemplate.Name) + 1 <=
               MAXSTRLEN(TemplateFilter)
            THEN
              TemplateFilter := TemplateFilter + '|' + WhseJournalTemplate.Name;
          END ELSE
            TemplateFilter := WhseJournalTemplate.Name;
        UNTIL WhseJournalTemplate.NEXT = 0;
      END ELSE
        TemplateFilter := 'A&<>A';

      EXIT(TemplateFilter);
    END;

    EVENT DOMxmlin@1240020010::NodeInserting@93(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020010::NodeInserted@94(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020010::NodeRemoving@95(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020010::NodeRemoved@96(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020010::NodeChanging@97(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020010::NodeChanged@98(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

