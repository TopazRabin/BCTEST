OBJECT Codeunit 14000601 Receiving
{
  OBJECT-PROPERTIES
  {
    Date=02/25/19;
    Time=12:00:00 PM;
    Version List=SE0.61;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ShippingAgent@1240030000 : Record 291;
      ReceiveStation@1240030001 : Record 14000608;
      ReceiveSetup@1240030002 : Record 14000607;
      LabelMgt@1240030003 : Codeunit 14000841;
      MultiDocReceiveMgt@1240030004 : Codeunit 14000603;
      LineNo@1240030005 : Integer;
      Window@1240030006 : Dialog;
      ReceiveSetupRetrieved@1240030007 : Boolean;
      Text001@1001 : TextConst 'ENU=Received %1';
      Text002@1002 : TextConst 'ENU=You must specify a Shipping Agent Code for Receive %1 on %2 %3.';
      Text003@1003 : TextConst 'ENU=You must specify a Shipping Agent Service for Receive %1 on %2 %3.';
      Text004@1004 : TextConst 'ENU=You have not received all that is ordered.';
      Text005@1005 : TextConst 'ENU=You have received more than is ordered.';
      Text006@1006 : TextConst 'ENU=You have not received all that is ordered of item %1 %2.';
      Text007@1007 : TextConst 'ENU=You have received more than is ordered for item %1 %2.';
      Text008@1008 : TextConst 'ENU=Serial Number is required for %1 %2 in Receive %3.';
      Text009@1009 : TextConst 'ENU=Lot Number is required for %1 %2 in Receive %3.';
      Text010@1010 : TextConst 'ENU=Warranty Date is required for %1 %2 in Receive %3.';
      Text011@1011 : TextConst 'ENU=Expiration Date is required for %1 %2 in Receive %3.';
      Text012@1012 : TextConst 'ENU=Posting receipt can only be for location %1 when using %2.';
      Text013@1013 : TextConst 'ENU=You must specify a Shipping Agent Code for Receive %1 on %2.';
      Text014@1014 : TextConst 'ENU=You must specify a Shipping Agent Service for Receive %1 on %2.';
      Text015@1015 : TextConst 'ENU=Receive is already in Receive %1 and cannot be reopened.';
      Text016@1240030008 : TextConst 'ENU=Over Receive has not been verified in %1 %2.';
      Text101@1240031009 : TextConst 'ENU=Item Tracking Serial No. %1, Lot No. %2, Warranty Date %3 and Expiration Date %4 not found.';
      Text102@1240030009 : TextConst 'ENU=Too many received of Item Tracking Serial No. %1, Lot No. %2, Warranty Date %3 and Expiration Date %4 not found.';

    PROCEDURE CreateShipCharge@68(SourceType@1240030000 : Integer;SourceSubtype@1240030001 : Integer;SourceID@1240030002 : Code[20]);
    VAR
      Salesheader@1240030003 : Record 36;
      PurchHeader@1240030004 : Record 38;
      TransferHeader@1240030006 : Record 5740;
      PackingControl@1240030005 : Record 14000717;
    BEGIN
      CASE SourceType OF
        DATABASE::"Sales Header":
          BEGIN
            Salesheader.GET(SourceSubtype,SourceID);
            CreateShipChargeSalesHeader(Salesheader);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader.GET(SourceSubtype,SourceID);
            CreateShipChargePurchHeader(PurchHeader);
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferHeader.GET(SourceID);
            CreateShipChargeTransferHeader(TransferHeader);
          END;
        ELSE
          PackingControl.ErrorUnknownSourceType(SourceType,SourceSubtype,SourceID);
      END;
    END;

    LOCAL PROCEDURE CreateShipChargeSalesHeader@2(SalesHeader@1240030000 : Record 36);
    VAR
      SalesLine@1240030001 : Record 37;
      Receive@1240030002 : Record 14000601;
      TotalShipCharge@1240030003 : Decimal;
    BEGIN
      GetReceiveSetup;
      IF ReceiveSetup."Location Receiving" THEN
        GetReceiveStation;
      SalesLine.RESET;
      SalesLine.SETCURRENTKEY("Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Shipping Charge",TRUE);
      IF ReceiveSetup."Location Receiving" THEN
        SalesLine.SETRANGE("Location Code",ReceiveStation."Location Code");
      SalesLine.SETRANGE("Quantity Shipped",0);
      SalesLine.SETFILTER("Outstanding Quantity",'>%1',0);
      SalesLine.DELETEALL;

      IF ReceiveSetup."No Shipping Cost on Order" THEN
        EXIT;

      Receive.RESET;
      Receive.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Receive.SETRANGE("Source Type",DATABASE::"Sales Header");
      Receive.SETRANGE("Source Subtype",SalesHeader."Document Type");
      Receive.SETRANGE("Source ID",SalesHeader."No.");
      Receive.SETRANGE(Closed,TRUE);
      IF ReceiveSetup."Location Receiving" THEN
        Receive.SETRANGE("Location Code",ReceiveStation."Location Code");
      TotalShipCharge := 0;
      IF Receive.FIND('-') THEN BEGIN
        REPEAT
          TotalShipCharge := TotalShipCharge + Receive."Shipping Charge";
        UNTIL Receive.NEXT = 0;

        IF TotalShipCharge <> 0 THEN
          WriteShipChargeSalesHeader(SalesHeader,TotalShipCharge,FALSE);
      END ELSE
        WriteShipChargeSalesHeader(SalesHeader,TotalShipCharge,TRUE);
    END;

    PROCEDURE WriteShipChargeSalesHeader@7(VAR SalesHeader@1240030000 : Record 36;TotalShipCharge@1240030001 : Decimal;NoReceives@1240030002 : Boolean);
    VAR
      SalesLine@1240030003 : Record 37;
      Currency@1240030004 : Record 4;
    BEGIN
      IF SalesHeader."Currency Factor" = 0 THEN
        SalesHeader."Currency Factor" := 1;
      IF NOT Currency.GET(SalesHeader."Currency Code") THEN
        Currency.INIT;

      IF NOT NoReceives THEN BEGIN
        GetReceiveSetup;
        IF ReceiveSetup."Location Receiving" THEN
          GetReceiveStation;

        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
        IF SalesLine.FIND('+') THEN
          LineNo := SalesLine."Line No." + 10000
        ELSE
          LineNo := 10000;
        SalesLine.INIT;
        SalesLine."Document Type" := SalesHeader."Document Type";
        SalesLine."Document No." := SalesHeader."No.";
        SalesLine."Line No." := LineNo;
        SalesLine."Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
        ReceiveSetup.TESTFIELD("Prepaid Freight Type");
        SalesLine.Type := ReceiveSetup."Prepaid Freight Type";
        ReceiveSetup.TESTFIELD("Prepaid Freight Code");
        SalesLine.VALIDATE("No.",ReceiveSetup."Prepaid Freight Code");
        SalesLine.Description := COPYSTR(STRSUBSTNO(Text001,WORKDATE),1,30);
        IF ReceiveSetup."Location Receiving" THEN
          SalesLine.VALIDATE("Location Code",ReceiveStation."Location Code");
        SalesLine.VALIDATE(Quantity,1);
        SalesLine.VALIDATE("Unit Cost (LCY)",TotalShipCharge);
        SalesLine.VALIDATE(
          "Unit Price",
          ROUND(
            SalesHeader."Currency Factor" * TotalShipCharge,
            Currency."Unit-Amount Rounding Precision"));
        SalesLine."Shipping Charge" := TRUE;
        SalesLine.INSERT;
      END;
    END;

    PROCEDURE CheckSalesHeader@8(SalesHeader@1240030000 : Record 36);
    VAR
      Receive@1240030001 : Record 14000601;
      SalesLine@1240030002 : Record 37;
      Location@1000000000 : Record 14;
    BEGIN
      IF NOT (SalesHeader."Document Type" IN
              [SalesHeader."Document Type"::"Credit Memo",SalesHeader."Document Type"::"Return Order"])
      THEN
        EXIT;

      GetReceiveSetup;

      IF (ReceiveSetup."Verify Over Receive (Receive)" AND SalesHeader.Receive) OR
         (ReceiveSetup."Verify Over Receive (Invoice)" AND SalesHeader.Invoice)
      THEN BEGIN
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
        SalesLine.SETRANGE("Over Receive",TRUE);
        SalesLine.SETRANGE("Over Receive Verified",FALSE);
        IF SalesLine.FIND('-') THEN
          ERROR(Text016,SalesHeader."Document Type",SalesHeader."No.");
      END;

      IF NOT SalesHeader.Receive THEN
        EXIT;



      Receive.RESET;
      Receive.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Receive.SETRANGE("Source Type",DATABASE::"Sales Header");
      Receive.SETRANGE("Source Subtype",SalesHeader."Document Type");
      Receive.SETRANGE("Source ID",SalesHeader."No.");
      IF ReceiveSetup."Location Receiving" THEN BEGIN
        GetReceiveStation;
        Receive.SETRANGE("Location Code",ReceiveStation."Location Code");
      END;

      //<TPZ1430>
      IF ReceiveSetup."Location Receiving" THEN BEGIN
        Location.GET(ReceiveStation."Location Code");
        IF Location."Enable E-Receive" = FALSE THEN
          EXIT;
      END;
      //</TPZ1430>

      IF Receive.FIND('-') THEN
        REPEAT
          Receive.TESTFIELD(Closed);

          IF ReceiveSetup."Shipping Agent Required" THEN BEGIN
            IF (Receive."Shipping Agent Code" = '') THEN
              ERROR(
                Text002,
                Receive."No.",SalesHeader."Document Type",SalesHeader."No.");
            IF (Receive."Shipping Agent Service" = '') THEN
              ERROR(
                Text003,
                Receive."No.",SalesHeader."Document Type",SalesHeader."No.");
          END;
        UNTIL Receive.NEXT = 0;

      CheckSalesHeaderReceived(SalesHeader,FALSE);
    END;

    LOCAL PROCEDURE CheckSalesHeaderReceived@9(SalesHeader@1240030000 : Record 36;DuringPosting@1240030001 : Boolean);
    VAR
      Receive@1240030002 : Record 14000601;
      ReceiveLine@1240030004 : Record 14000602;
      SalesLine@1240030005 : Record 37;
      SalesLine2@1240030006 : Record 37;
      QtyToReceive@1240030007 : Decimal;
      LineQtyToReceiveBase@1240030009 : Decimal;
      Line2QtyToReceiveBase@1240030010 : Decimal;
      Location@1000000000 : Record 14;
    BEGIN
      GetReceiveSetup;
      IF ReceiveSetup."Location Receiving" THEN
        GetReceiveStation;

      //<TPZ1430>
      IF ReceiveSetup."Location Receiving" THEN BEGIN
        Location.GET(ReceiveStation."Location Code");
        IF Location."Enable E-Receive" = FALSE THEN
          EXIT;
      END;
      //</TPZ1430>

      ReceiveLine.RESET;
      ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      ReceiveLine.SETRANGE("Source Type",DATABASE::"Sales Header");
      ReceiveLine.SETRANGE("Source Subtype",SalesHeader."Document Type");
      ReceiveLine.SETRANGE("Source ID",SalesHeader."No.");
      ReceiveLine.SETRANGE(Type,ReceiveLine.Type::"Account (G/L)",ReceiveLine.Type::Item);
      IF ReceiveSetup."Location Receiving" THEN
        ReceiveLine.SETRANGE("Location Code",ReceiveStation."Location Code");

      CLEAR(ShippingAgent);

      IF NOT ReceiveSetup.ReceiveDetail(
               DATABASE::"Sales Header",SalesHeader."Document Type") AND
         NOT ReceiveLine.FIND('-')
      THEN
        EXIT;

      //<TPZ9756_TPZ9862 - WhatAbountPostedReceiveLine?!>
      IF NOT ReceiveLine.FINDFIRST THEN
        EXIT;
      //</TPZ9756_TPZ9862>

      SalesLine.RESET;
      SalesLine.SETCURRENTKEY(
        "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETRANGE("Drop Shipment",FALSE);
      IF ReceiveSetup."Location Receiving" THEN
        SalesLine.SETRANGE("Location Code",ReceiveStation."Location Code");

      // Additional code required in Attain
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::"Return Order" THEN BEGIN
        SalesLine.CALCSUMS("Return Qty. to Receive (Base)");
        LineQtyToReceiveBase := SalesLine."Return Qty. to Receive (Base)";
      END ELSE BEGIN
        SalesLine.CALCSUMS("Outstanding Qty. (Base)");
        LineQtyToReceiveBase := SalesLine."Outstanding Qty. (Base)";
      END;

      ReceiveLine.CALCSUMS(ReceiveLine."Quantity (Base)");
      IF LineQtyToReceiveBase <> ReceiveLine."Quantity (Base)" THEN BEGIN
        IF LineQtyToReceiveBase > ReceiveLine."Quantity (Base)" THEN
          ERROR(Text004);
        IF ReceiveLine."Quantity (Base)" > LineQtyToReceiveBase THEN
          ERROR(Text005);
      END;

      SalesLine2.RESET;
      SalesLine2.SETCURRENTKEY(
        "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment");
      SalesLine2.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine2.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine2.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine2.SETRANGE("Drop Shipment",FALSE);
      IF ReceiveSetup."Location Receiving" THEN
        SalesLine2.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF SalesLine.FIND('-') THEN
        REPEAT
          ReceiveLine.SETRANGE("No.",SalesLine."No.");
          ReceiveLine.SETRANGE("Variant Code",SalesLine."Variant Code");
          SalesLine2.SETRANGE("No.",SalesLine."No.");
          SalesLine2.SETRANGE("Variant Code",SalesLine."Variant Code");

          ReceiveLine.CALCSUMS("Quantity (Base)");

          // Additional code required in Attain
          IF SalesHeader."Document Type" = SalesHeader."Document Type"::"Return Order" THEN BEGIN
            SalesLine2.CALCSUMS("Return Qty. to Receive (Base)");
            Line2QtyToReceiveBase := SalesLine2."Return Qty. to Receive (Base)";
          END ELSE BEGIN
            SalesLine2.CALCSUMS("Outstanding Qty. (Base)");
            Line2QtyToReceiveBase := SalesLine2."Outstanding Qty. (Base)";
          END;

          IF Line2QtyToReceiveBase > ReceiveLine."Quantity (Base)" THEN
            ERROR(
              Text006,
              SalesLine."No.",SalesLine."Variant Code");
          IF ReceiveLine."Quantity (Base)" > Line2QtyToReceiveBase THEN
            ERROR(
              Text007,
              SalesLine."No.",SalesLine."Variant Code");
        UNTIL SalesLine.NEXT = 0;

      ReceiveLine.RESET;
      ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      ReceiveLine.SETRANGE("Source Type",DATABASE::"Sales Header");
      ReceiveLine.SETRANGE("Source Subtype",SalesHeader."Document Type");
      ReceiveLine.SETRANGE("Source ID",SalesHeader."No.");
      ReceiveLine.SETRANGE("Serial No.",'');
      ReceiveLine.SETRANGE("Receive Serial Number",TRUE);
      IF ReceiveSetup."Location Receiving" THEN
        ReceiveLine.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF ReceiveLine.FIND('-') THEN
        ERROR(
          Text008,
          ReceiveLine.Type,ReceiveLine."No.",ReceiveLine."Receive No.");

      ReceiveLine.RESET;
      ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      ReceiveLine.SETRANGE("Source Type",DATABASE::"Sales Header");
      ReceiveLine.SETRANGE("Source Subtype",SalesHeader."Document Type");
      ReceiveLine.SETRANGE("Source ID",SalesHeader."No.");
      ReceiveLine.SETRANGE("Lot No.",'');
      ReceiveLine.SETRANGE("Receive Lot Number",TRUE);
      IF ReceiveSetup."Location Receiving" THEN
        ReceiveLine.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF ReceiveLine.FIND('-') THEN
        ERROR(
          Text009,
          ReceiveLine.Type,ReceiveLine."No.",ReceiveLine."Receive No.");

      ReceiveLine.RESET;
      ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      ReceiveLine.SETRANGE("Source Type",DATABASE::"Sales Header");
      ReceiveLine.SETRANGE("Source Subtype",SalesHeader."Document Type");
      ReceiveLine.SETRANGE("Source ID",SalesHeader."No.");
      ReceiveLine.SETRANGE("Warranty Date",0D);
      ReceiveLine.SETRANGE("Receive Warranty Date",TRUE);
      IF ReceiveSetup."Location Receiving" THEN
        ReceiveLine.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF ReceiveLine.FIND('-') THEN
        ERROR(
          Text010,
          ReceiveLine.Type,ReceiveLine."No.",ReceiveLine."Receive No.");

      ReceiveLine.RESET;
      ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      ReceiveLine.SETRANGE("Source Type",DATABASE::"Sales Header");
      ReceiveLine.SETRANGE("Source Subtype",SalesHeader."Document Type");
      ReceiveLine.SETRANGE("Source ID",SalesHeader."No.");
      ReceiveLine.SETRANGE("Expiration Date",0D);
      ReceiveLine.SETRANGE("Receive Expiration Date",TRUE);
      IF ReceiveSetup."Location Receiving" THEN
        ReceiveLine.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF ReceiveLine.FIND('-') THEN
        ERROR(
          Text011,
          ReceiveLine.Type,ReceiveLine."No.",ReceiveLine."Receive No.");
    END;

    PROCEDURE PostReceiveSalesCrMemo@11(SalesHeader@1240030000 : Record 36;SalesCrMemoHeader@1240030001 : Record 114);
    VAR
      Receive@1240030002 : Record 14000601;
      Receive2@1240030003 : Record 14000601;
      SalesLine@1240030005 : Record 37;
      Location@1000000000 : Record 14;
    BEGIN
      IF NOT (SalesHeader."Document Type" IN
              [SalesHeader."Document Type"::"Credit Memo",SalesHeader."Document Type"::"Return Order"])
      THEN
        EXIT;

      CheckSalesHeaderReceived(SalesHeader,TRUE);

      GetReceiveSetup;
      IF ReceiveSetup."Location Receiving" THEN BEGIN
        GetReceiveStation;

        //<TPZ1430>
        ChangeReceiveStationLocation(DATABASE::"Sales Header", SalesHeader."Document Type", SalesHeader."No.");

        IF ReceiveSetup."Location Receiving" THEN BEGIN
          Location.GET(ReceiveStation."Location Code");
          IF Location."Enable E-Receive" = FALSE THEN
            EXIT;
        END;
        //</TPZ1430>

        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
        SalesLine.SETFILTER("Outstanding Qty. (Base)",'<>0');
        SalesLine.SETFILTER("Location Code",'<>%1',ReceiveStation."Location Code");
        IF SalesLine.FIND('-') THEN
          ERROR(
            Text012,
            ReceiveStation."Location Code",ReceiveSetup.FIELDNAME("Location Receiving"));
      END;

      Receive.RESET;
      Receive.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Receive.SETRANGE("Source Type",DATABASE::"Sales Header");
      Receive.SETRANGE("Source Subtype",SalesHeader."Document Type");
      Receive.SETRANGE("Source ID",SalesHeader."No.");
      IF ReceiveSetup."Location Receiving" THEN
        Receive.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF Receive.FIND('-') THEN BEGIN
        REPEAT
          Receive.TESTFIELD(Closed);

          PostReceive(
            Receive,SalesCrMemoHeader."No.",SalesCrMemoHeader."Posting Date");

          IF Receive."Multi Document Receive" THEN BEGIN
            Receive2.RESET;
            Receive2.SETCURRENTKEY("Original Receive No.");
            Receive2.SETRANGE("Original Receive No.",Receive."Original Receive No.");
            IF NOT Receive2.FIND('-') THEN BEGIN
              Receive2.GET(Receive."Original Receive No.");
              PostReceive(Receive2,'',WORKDATE);
            END;
          END;
        UNTIL Receive.NEXT = 0;
      END;
    END;

    PROCEDURE PostReceiveSalesReturnOrder@1240030000(SalesHeader@1240030000 : Record 36;ReturnReceiptHeader@1240030001 : Record 6660);
    VAR
      Receive@1240030002 : Record 14000601;
      Receive2@1240030003 : Record 14000601;
      SalesLine@1240030005 : Record 37;
      Location@1000000000 : Record 14;
    BEGIN
      IF NOT (SalesHeader."Document Type" IN
              [SalesHeader."Document Type"::"Credit Memo",SalesHeader."Document Type"::"Return Order"])
      THEN
        EXIT;

      CheckSalesHeaderReceived(SalesHeader,TRUE);

      GetReceiveSetup;
      IF ReceiveSetup."Location Receiving" THEN BEGIN
        GetReceiveStation;

        //<TPZ1430>
        ChangeReceiveStationLocation(DATABASE::"Sales Header", SalesHeader."Document Type", SalesHeader."No.");

        IF ReceiveSetup."Location Receiving" THEN BEGIN
          Location.GET(ReceiveStation."Location Code");
          IF Location."Enable E-Receive" = FALSE THEN
            EXIT;
        END;
        //</TPZ1430>


        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
        SalesLine.SETFILTER("Return Qty. to Receive",'<>0');
        SalesLine.SETFILTER("Location Code",'<>%1',ReceiveStation."Location Code");
        IF SalesLine.FIND('-') THEN
          ERROR(
            Text012,
            ReceiveStation."Location Code",ReceiveSetup.FIELDNAME("Location Receiving"));
      END;

      Receive.RESET;
      Receive.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Receive.SETRANGE("Source Type",DATABASE::"Sales Header");
      Receive.SETRANGE("Source Subtype",SalesHeader."Document Type");
      Receive.SETRANGE("Source ID",SalesHeader."No.");
      IF ReceiveSetup."Location Receiving" THEN
        Receive.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF Receive.FIND('-') THEN BEGIN
        REPEAT
          Receive.TESTFIELD(Closed);

          PostReceive(
            Receive,ReturnReceiptHeader."No.",ReturnReceiptHeader."Posting Date");

          IF Receive."Multi Document Receive" THEN BEGIN
            Receive2.RESET;
            Receive2.SETCURRENTKEY("Original Receive No.");
            Receive2.SETRANGE("Original Receive No.",Receive."Original Receive No.");
            IF NOT Receive2.FIND('-') THEN BEGIN
              Receive2.GET(Receive."Original Receive No.");
              PostReceive(Receive2,'',WORKDATE);
            END;
          END;
        UNTIL Receive.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateShipChargePurchHeader@3(PurchHeader@1240030000 : Record 38);
    VAR
      PurchLine@1240030001 : Record 39;
      Receive@1240030002 : Record 14000601;
      TotalShipCharge@1240030003 : Decimal;
    BEGIN
      GetReceiveSetup;
      IF ReceiveSetup."Location Receiving" THEN
        GetReceiveStation;

      PurchLine.RESET;
      PurchLine.SETCURRENTKEY("Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment");
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETRANGE("Shipping Charge",TRUE);
      PurchLine.SETRANGE("Quantity Received",0);
      PurchLine.SETFILTER("Outstanding Quantity",'>%1',0);
      IF ReceiveSetup."Location Receiving" THEN
        PurchLine.SETRANGE("Location Code",ReceiveStation."Location Code");
      PurchLine.DELETEALL;

      IF ReceiveSetup."No Shipping Cost on Order" THEN
        EXIT;

      Receive.RESET;
      Receive.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Receive.SETRANGE("Source Type",DATABASE::"Purchase Header");
      Receive.SETRANGE("Source Subtype",PurchHeader."Document Type");
      Receive.SETRANGE("Source ID",PurchHeader."No.");
      Receive.SETRANGE(Closed,TRUE);
      IF ReceiveSetup."Location Receiving" THEN
        Receive.SETRANGE("Location Code",ReceiveStation."Location Code");
      TotalShipCharge := 0;
      IF Receive.FIND('-') THEN BEGIN
        REPEAT
          TotalShipCharge := TotalShipCharge + Receive."Shipping Charge";
        UNTIL Receive.NEXT = 0;

        IF TotalShipCharge <> 0 THEN
          WriteShipChargePurchHeader(PurchHeader,TotalShipCharge,FALSE);
      END ELSE
        WriteShipChargePurchHeader(PurchHeader,TotalShipCharge,TRUE);
    END;

    PROCEDURE WriteShipChargePurchHeader@4(VAR PurchHeader@1240030000 : Record 38;TotalShipCharge@1240030001 : Decimal;NoReceives@1240030002 : Boolean);
    VAR
      PurchLine@1240030003 : Record 39;
      Currency@1240030004 : Record 4;
    BEGIN
      IF PurchHeader."Currency Factor" = 0 THEN
        PurchHeader."Currency Factor" := 1;
      IF NOT Currency.GET(PurchHeader."Currency Code") THEN
        Currency.INIT;

      IF NOT NoReceives THEN BEGIN
        GetReceiveSetup;
        IF ReceiveSetup."Location Receiving" THEN
          GetReceiveStation;

        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
        PurchLine.SETRANGE("Document No.",PurchHeader."No.");
        IF PurchLine.FIND('+') THEN
          LineNo := PurchLine."Line No." + 10000
        ELSE
          LineNo := 10000;
        PurchLine.INIT;
        PurchLine."Document Type" := PurchHeader."Document Type";
        PurchLine."Document No." := PurchHeader."No.";
        PurchLine."Line No." := LineNo;
        PurchLine."Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
        ReceiveSetup.TESTFIELD("Prepaid Freight Type");
        PurchLine.Type := ReceiveSetup."Prepaid Freight Type";
        ReceiveSetup.TESTFIELD("Prepaid Freight Code");
        PurchLine.VALIDATE("No.",ReceiveSetup."Prepaid Freight Code");
        PurchLine.Description := COPYSTR(STRSUBSTNO(Text001,WORKDATE),1,30);
        IF ReceiveSetup."Location Receiving" THEN
          PurchLine.VALIDATE("Location Code",ReceiveStation."Location Code");
        PurchLine.VALIDATE(Quantity,1);
        PurchLine.VALIDATE("Unit Cost (LCY)",TotalShipCharge);
        PurchLine.VALIDATE(
          "Direct Unit Cost",
          ROUND(
            PurchHeader."Currency Factor" * TotalShipCharge,
            Currency."Unit-Amount Rounding Precision"));
        PurchLine.VALIDATE(
          Amount,
          ROUND(
            PurchHeader."Currency Factor" * TotalShipCharge,
            Currency."Unit-Amount Rounding Precision"));
        PurchLine."Shipping Charge" := TRUE;
        PurchLine.INSERT;
      END;
    END;

    PROCEDURE CheckPurchHeader@25(PurchHeader@1240030000 : Record 38);
    VAR
      Receive@1240030001 : Record 14000601;
      PurchLine@1240030002 : Record 39;
      Location@1000000000 : Record 14;
      NonEReceivePO@1000000001 : Boolean;
    BEGIN
      IF NOT (PurchHeader."Document Type" IN
              [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::Invoice])
      THEN
        EXIT;

      GetReceiveSetup;

      IF (ReceiveSetup."Verify Over Receive (Receive)" AND PurchHeader.Receive) OR
         (ReceiveSetup."Verify Over Receive (Invoice)" AND PurchHeader.Invoice)
      THEN BEGIN
        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
        PurchLine.SETRANGE("Document No.",PurchHeader."No.");
        PurchLine.SETRANGE("Over Receive",TRUE);
        PurchLine.SETRANGE("Over Receive Verified",FALSE);
        IF PurchLine.FIND('-') THEN
          ERROR(Text016,PurchHeader."Document Type",PurchHeader."No.");
      END;

      IF NOT PurchHeader.Receive THEN
        EXIT;

      IF ReceiveSetup."Location Receiving" THEN
        GetReceiveStation;

      //<TPZ1592>
      NonEReceivePO := TRUE;
      PurchLine.RESET;
      PurchLine.SETCURRENTKEY("Document Type","Document No.","Location Code");
      PurchLine.SETRANGE("Document Type", PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.", PurchHeader."No.");
      PurchLine.SETRANGE(Type, PurchLine.Type::Item);
      PurchLine.SETFILTER("Qty. to Receive", '<>0');
      IF PurchLine.FIND('-') THEN BEGIN
        REPEAT
          PurchLine.SETRANGE("Location Code", PurchLine."Location Code");
          PurchLine.FIND('+');

          Location.GET(PurchLine."Location Code");
          IF Location."Enable E-Receive" = TRUE THEN
            NonEReceivePO := FALSE;

          PurchLine.SETRANGE("Location Code");
        UNTIL (PurchLine.NEXT = 0) OR (NonEReceivePO = FALSE);
        IF NonEReceivePO THEN
          EXIT;
      END;
      //</TPZ1592>



      Receive.RESET;
      Receive.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Receive.SETRANGE("Source Type",DATABASE::"Purchase Header");
      Receive.SETRANGE("Source Subtype",PurchHeader."Document Type");
      Receive.SETRANGE("Source ID",PurchHeader."No.");
      IF ReceiveSetup."Location Receiving" THEN
        Receive.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF Receive.FIND('-') THEN
        REPEAT
          Receive.TESTFIELD(Closed);

          IF ReceiveSetup."Shipping Agent Required" THEN BEGIN
            IF (Receive."Shipping Agent Code" = '') THEN
              ERROR(
                Text002,
                Receive."No.",PurchHeader."Document Type",PurchHeader."No.");
            IF (Receive."Shipping Agent Service" = '') THEN
              ERROR(
                Text003,
                Receive."No.",PurchHeader."Document Type",PurchHeader."No.");
          END;
        UNTIL Receive.NEXT = 0;

      CheckPurchHeaderReceived(PurchHeader,FALSE);
    END;

    LOCAL PROCEDURE CheckPurchHeaderReceived@5(PurchHeader@1240030000 : Record 38;DuringPosting@1240030001 : Boolean);
    VAR
      Receive@1240030002 : Record 14000601;
      ReceiveLine@1240030004 : Record 14000602;
      PurchLine@1240030005 : Record 39;
      PurchLine2@1240030006 : Record 39;
      ItemUnitOfMeasure@1240030011 : Record 5404;
      QtyToReceive@1240030007 : Decimal;
      LineQtyToReceiveBase@1240030009 : Decimal;
      Line2QtyToReceiveBase@1240030010 : Decimal;
      Location@1000000000 : Record 14;
      NonEReceivePO@1000000001 : Boolean;
    BEGIN
      GetReceiveSetup;
      IF ReceiveSetup."Location Receiving" THEN
        GetReceiveStation;

      //<TPZ1592>
      NonEReceivePO := TRUE;
      PurchLine.RESET;
      PurchLine.SETCURRENTKEY("Document Type","Document No.","Location Code");
      PurchLine.SETRANGE("Document Type", PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.", PurchHeader."No.");
      PurchLine.SETRANGE(Type, PurchLine.Type::Item);
      PurchLine.SETFILTER("Qty. to Receive", '<>0');
      IF PurchLine.FIND('-') THEN BEGIN
        REPEAT
          PurchLine.SETRANGE("Location Code", PurchLine."Location Code");
          PurchLine.FIND('+');

          Location.GET(PurchLine."Location Code");
          IF Location."Enable E-Receive" = TRUE THEN
            NonEReceivePO := FALSE;

          PurchLine.SETRANGE("Location Code");
        UNTIL (PurchLine.NEXT = 0) OR (NonEReceivePO = FALSE);
        IF NonEReceivePO THEN
          EXIT;
      END;
      //</TPZ1592>

      ReceiveLine.RESET;
      ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      ReceiveLine.SETRANGE("Source Type",DATABASE::"Purchase Header");
      ReceiveLine.SETRANGE("Source Subtype",PurchHeader."Document Type");
      ReceiveLine.SETRANGE("Source ID",PurchHeader."No.");
      ReceiveLine.SETRANGE(Type,ReceiveLine.Type::"Account (G/L)",ReceiveLine.Type::Item);
      IF ReceiveSetup."Location Receiving" THEN
        ReceiveLine.SETRANGE("Location Code",ReceiveStation."Location Code");

      CLEAR(ShippingAgent);

      IF NOT ReceiveSetup.ReceiveDetail(
               DATABASE::"Purchase Header",PurchHeader."Document Type") AND
         NOT ReceiveLine.FIND('-')
      THEN
        EXIT;

      //<TPZ9756_TPZ9862 - WhatAbountPostedReceiveLine?!>
      IF NOT ReceiveLine.FINDFIRST THEN
        EXIT;
      //</TPZ9756_TPZ9862>
      PurchLine.RESET;
      PurchLine.SETCURRENTKEY(
        "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment");
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETRANGE(Type,PurchLine.Type::Item);
      PurchLine.SETRANGE("Drop Shipment",FALSE);
      IF ReceiveSetup."Location Receiving" THEN
        PurchLine.SETRANGE("Location Code",ReceiveStation."Location Code");

      PurchLine.CALCSUMS("Qty. to Receive (Base)");

      // Additional code required in Attain
      LineQtyToReceiveBase := PurchLine."Qty. to Receive (Base)";

      IF ReceiveSetup."Receive Subcontracting Order" THEN BEGIN
        PurchLine.SETFILTER("Prod. Order No.",'<>%1','');
        IF PurchLine.FIND('-') THEN
          REPEAT
            IF (ItemUnitOfMeasure."Item No." <> PurchLine."No.") OR
               (ItemUnitOfMeasure.Code <> PurchLine."Unit of Measure Code")
            THEN
              ItemUnitOfMeasure.GET(PurchLine."No.",PurchLine."Unit of Measure Code");
              LineQtyToReceiveBase :=
                LineQtyToReceiveBase +
                PurchLine."Qty. to Receive" * ItemUnitOfMeasure."Qty. per Unit of Measure";
          UNTIL PurchLine.NEXT = 0;
        PurchLine.SETRANGE("Prod. Order No.");
      END;

      ReceiveLine.CALCSUMS(ReceiveLine."Quantity (Base)");
      IF LineQtyToReceiveBase <> ReceiveLine."Quantity (Base)" THEN BEGIN
        IF LineQtyToReceiveBase > ReceiveLine."Quantity (Base)" THEN
          ERROR(Text004);
        IF ReceiveLine."Quantity (Base)" > LineQtyToReceiveBase THEN
          ERROR(Text005);
      END;

      PurchLine2.RESET;
      PurchLine2.SETCURRENTKEY(
        "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment");
      PurchLine2.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine2.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine2.SETRANGE(Type,PurchLine.Type::Item);
      PurchLine2.SETRANGE("Drop Shipment",FALSE);
      IF ReceiveSetup."Location Receiving" THEN
        PurchLine2.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF PurchLine.FIND('-') THEN
        REPEAT
          ReceiveLine.SETRANGE("No.",PurchLine."No.");
          ReceiveLine.SETRANGE("Variant Code",PurchLine."Variant Code");
          PurchLine2.SETRANGE("No.",PurchLine."No.");
          PurchLine2.SETRANGE("Variant Code",PurchLine."Variant Code");

          ReceiveLine.CALCSUMS("Quantity (Base)");
          PurchLine2.CALCSUMS("Qty. to Receive (Base)");

          // Additional code required in Attain
          Line2QtyToReceiveBase := PurchLine2."Qty. to Receive (Base)";

          IF ReceiveSetup."Receive Subcontracting Order" THEN BEGIN
            PurchLine2.SETFILTER("Prod. Order No.",'<>%1','');
            IF PurchLine2.FIND('-') THEN
              REPEAT
                IF (ItemUnitOfMeasure."Item No." <> PurchLine2."No.") OR
                   (ItemUnitOfMeasure.Code <> PurchLine2."Unit of Measure Code")
                THEN
                  ItemUnitOfMeasure.GET(PurchLine."No.",PurchLine2."Unit of Measure Code");
                  Line2QtyToReceiveBase :=
                    Line2QtyToReceiveBase +
                    PurchLine2."Qty. to Receive" * ItemUnitOfMeasure."Qty. per Unit of Measure";
              UNTIL PurchLine2.NEXT = 0;
            PurchLine2.SETRANGE("Prod. Order No.");
          END;

          IF Line2QtyToReceiveBase > ReceiveLine."Quantity (Base)" THEN
            ERROR(
              Text006,
              PurchLine."No.",PurchLine."Variant Code");
          //<TPZ1430>
          //IF ReceiveLine."Quantity (Base)" > Line2QtyToReceiveBase THEN
          //  ERROR(
          //    Text007,
          //    PurchLine."No.",PurchLine."Variant Code");
          //</TPZ1430>
        UNTIL PurchLine.NEXT = 0;

      ReceiveLine.RESET;
      ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      ReceiveLine.SETRANGE("Source Type",DATABASE::"Purchase Header");
      ReceiveLine.SETRANGE("Source Subtype",PurchHeader."Document Type");
      ReceiveLine.SETRANGE("Source ID",PurchHeader."No.");
      ReceiveLine.SETRANGE("Serial No.",'');
      ReceiveLine.SETRANGE("Receive Serial Number",TRUE);
      IF ReceiveSetup."Location Receiving" THEN
        ReceiveLine.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF ReceiveLine.FIND('-') THEN
        ERROR(
          Text008,
          ReceiveLine.Type,ReceiveLine."No.",ReceiveLine."Receive No.");

      ReceiveLine.RESET;
      ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      ReceiveLine.SETRANGE("Source Type",DATABASE::"Purchase Header");
      ReceiveLine.SETRANGE("Source Subtype",PurchHeader."Document Type");
      ReceiveLine.SETRANGE("Source ID",PurchHeader."No.");
      ReceiveLine.SETRANGE("Lot No.",'');
      ReceiveLine.SETRANGE("Receive Lot Number",TRUE);
      IF ReceiveSetup."Location Receiving" THEN
        ReceiveLine.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF ReceiveLine.FIND('-') THEN
        ERROR(
          Text009,
          ReceiveLine.Type,ReceiveLine."No.",ReceiveLine."Receive No.");

      ReceiveLine.RESET;
      ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      ReceiveLine.SETRANGE("Source Type",DATABASE::"Purchase Header");
      ReceiveLine.SETRANGE("Source Subtype",PurchHeader."Document Type");
      ReceiveLine.SETRANGE("Source ID",PurchHeader."No.");
      ReceiveLine.SETRANGE("Warranty Date",0D);
      ReceiveLine.SETRANGE("Receive Warranty Date",TRUE);
      IF ReceiveSetup."Location Receiving" THEN
        ReceiveLine.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF ReceiveLine.FIND('-') THEN
        ERROR(
          Text010,
          ReceiveLine.Type,ReceiveLine."No.",ReceiveLine."Receive No.");

      ReceiveLine.RESET;
      ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      ReceiveLine.SETRANGE("Source Type",DATABASE::"Purchase Header");
      ReceiveLine.SETRANGE("Source Subtype",PurchHeader."Document Type");
      ReceiveLine.SETRANGE("Source ID",PurchHeader."No.");
      ReceiveLine.SETRANGE("Expiration Date",0D);
      ReceiveLine.SETRANGE("Receive Expiration Date",TRUE);
      IF ReceiveSetup."Location Receiving" THEN
        ReceiveLine.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF ReceiveLine.FIND('-') THEN
        ERROR(
          Text011,
          ReceiveLine.Type,ReceiveLine."No.",ReceiveLine."Receive No.");
    END;

    PROCEDURE PostReceivePurchHeader@1(PurchHeader@1240030000 : Record 38;PurchReceiptHeader@1240030001 : Record 120);
    VAR
      Receive@1240030002 : Record 14000601;
      Receive2@1240030003 : Record 14000601;
      PurchLine@1240030005 : Record 39;
      Location@1000000000 : Record 14;
      NonEReceivePO@1000000001 : Boolean;
    BEGIN
      IF (PurchHeader."Document Type" <> PurchHeader."Document Type"::Order) AND
         (PurchHeader."Document Type" <> PurchHeader."Document Type"::Invoice)
      THEN
        EXIT;

      CheckPurchHeaderReceived(PurchHeader,TRUE);

      GetReceiveSetup;
      IF ReceiveSetup."Location Receiving" THEN BEGIN
        GetReceiveStation;

        //<TPZ1592>
        NonEReceivePO := TRUE;
        PurchLine.RESET;
        PurchLine.SETCURRENTKEY("Document Type","Document No.","Location Code");
        PurchLine.SETRANGE("Document Type", PurchHeader."Document Type");
        PurchLine.SETRANGE("Document No.", PurchHeader."No.");
        PurchLine.SETRANGE(Type, PurchLine.Type::Item);
        PurchLine.SETFILTER("Qty. to Receive", '<>0');
        IF PurchLine.FIND('-') THEN BEGIN
          REPEAT
            PurchLine.SETRANGE("Location Code", PurchLine."Location Code");
            PurchLine.FIND('+');

            Location.GET(PurchLine."Location Code");
            IF Location."Enable E-Receive" = TRUE THEN
              NonEReceivePO := FALSE;

            PurchLine.SETRANGE("Location Code");
          UNTIL (PurchLine.NEXT = 0) OR (NonEReceivePO = FALSE);
          IF NonEReceivePO THEN
            EXIT;
        END;
        //</TPZ1592>

        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
        PurchLine.SETRANGE("Document No.",PurchHeader."No.");
        PurchLine.SETFILTER("Qty. to Receive",'<>0');
        PurchLine.SETFILTER("Location Code",'<>%1',ReceiveStation."Location Code");
        IF PurchLine.FIND('-') THEN
          ERROR(
            Text012,
            ReceiveStation."Location Code",ReceiveSetup.FIELDNAME("Location Receiving"));
      END;

      Receive.RESET;
      Receive.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Receive.SETRANGE("Source Type",DATABASE::"Purchase Header");
      Receive.SETRANGE("Source Subtype",PurchHeader."Document Type");
      Receive.SETRANGE("Source ID",PurchHeader."No.");
      IF ReceiveSetup."Location Receiving" THEN
        Receive.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF Receive.FIND('-') THEN BEGIN
        REPEAT
          Receive.TESTFIELD(Closed);

          PostReceive(
            Receive,PurchReceiptHeader."No.",PurchReceiptHeader."Posting Date");

          IF Receive."Multi Document Receive" THEN BEGIN
            Receive2.RESET;
            Receive2.SETCURRENTKEY("Original Receive No.");
            Receive2.SETRANGE("Original Receive No.",Receive."Original Receive No.");
            IF NOT Receive2.FIND('-') THEN BEGIN
              Receive2.GET(Receive."Original Receive No.");
              PostReceive(Receive2,'',WORKDATE);
            END;
          END;
        UNTIL Receive.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateShipChargeTransferHeader@1240030005(TransferHeader@1240030000 : Record 5740);
    BEGIN
    END;

    PROCEDURE WriteShipChargeTransferHeader@1240030004(VAR TransferHeader@1240030000 : Record 5740;TotalShipCharge@1240030001 : Decimal;NoReceives@1240030002 : Boolean);
    BEGIN
    END;

    PROCEDURE CheckTransferHeader@1240030003(TransferHeader@1240030000 : Record 5740);
    VAR
      Receive@1240030001 : Record 14000601;
      Location@1000000000 : Record 14;
    BEGIN
      GetReceiveSetup;
      IF ReceiveSetup."Location Receiving" THEN
        GetReceiveStation;

       //<TPZ1430>
      IF ReceiveSetup."Location Receiving" THEN BEGIN
        Location.GET(ReceiveStation."Location Code");
        IF Location."Enable E-Receive" = FALSE THEN
          EXIT;
      END;
      //</TPZ1430>

      Receive.RESET;
      Receive.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Receive.SETRANGE("Source Type",DATABASE::"Transfer Header");
      Receive.SETRANGE("Source Subtype",0);
      Receive.SETRANGE("Source ID",TransferHeader."No.");
      IF ReceiveSetup."Location Receiving" THEN
        Receive.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF Receive.FIND('-') THEN
        REPEAT
          Receive.TESTFIELD(Closed);

          IF ReceiveSetup."Shipping Agent Required" THEN BEGIN
            IF (Receive."Shipping Agent Code" = '') THEN
              ERROR(
                Text013,
                Receive."No.",TransferHeader."No.");
            IF (Receive."Shipping Agent Service" = '') THEN
              ERROR(
                Text014,
                Receive."No.",TransferHeader."No.");
          END;
        UNTIL Receive.NEXT = 0;

      CheckTransferHeaderReceived(TransferHeader,FALSE);
    END;

    LOCAL PROCEDURE CheckTransferHeaderReceived@1240030002(TransferHeader@1240030000 : Record 5740;DuringPosting@1240030001 : Boolean);
    VAR
      Receive@1240030002 : Record 14000601;
      ReceiveLine@1240030004 : Record 14000602;
      TransferLine@1240030005 : Record 5741;
      TransferLine2@1240030006 : Record 5741;
      QtyToReceive@1240030007 : Decimal;
      LineQtyToReceiveBase@1240030009 : Decimal;
      Line2QtyToReceiveBase@1240030010 : Decimal;
      Location@1000000000 : Record 14;
    BEGIN
      GetReceiveSetup;
      IF ReceiveSetup."Location Receiving" THEN
        GetReceiveStation;

       //<TPZ1430>
      IF ReceiveSetup."Location Receiving" THEN BEGIN
        Location.GET(ReceiveStation."Location Code");
        IF Location."Enable E-Receive" = FALSE THEN
          EXIT;
      END;
      //</TPZ1430>

      ReceiveLine.RESET;
      ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      ReceiveLine.SETRANGE("Source Type",DATABASE::"Transfer Header");
      ReceiveLine.SETRANGE("Source Subtype",0);
      ReceiveLine.SETRANGE("Source ID",TransferHeader."No.");
      ReceiveLine.SETRANGE(Type,ReceiveLine.Type::"Account (G/L)",ReceiveLine.Type::Item);
      IF ReceiveSetup."Location Receiving" THEN
        ReceiveLine.SETRANGE("Location Code",ReceiveStation."Location Code");

      CLEAR(ShippingAgent);

      IF NOT ReceiveSetup.ReceiveDetail(DATABASE::"Transfer Header",0) AND
         NOT ReceiveLine.FIND('-')
      THEN
        EXIT;

      //<TPZ9756_TPZ9862 - WhatAbountPostedReceiveLine?!>
      IF NOT ReceiveLine.FINDFIRST THEN
        EXIT;
      //</TPZ9756_TPZ9862>

      TransferLine.RESET;
      TransferLine.SETCURRENTKEY(
        "Transfer-to Code",Status,"Derived From Line No.","Item No.","Variant Code");
      TransferLine.SETRANGE("Document No.",TransferHeader."No.");
      IF ReceiveSetup."Location Receiving" THEN
        TransferLine.SETRANGE("Transfer-to Code",ReceiveStation."Location Code");
      TransferLine.SETRANGE("Derived From Line No.",0);

      TransferLine.CALCSUMS("Qty. to Receive (Base)");

      // Additional code required in Attain
      LineQtyToReceiveBase := TransferLine."Qty. to Receive (Base)";

      ReceiveLine.CALCSUMS(ReceiveLine."Quantity (Base)");
      IF LineQtyToReceiveBase <> ReceiveLine."Quantity (Base)" THEN BEGIN
        IF LineQtyToReceiveBase > ReceiveLine."Quantity (Base)" THEN
          ERROR(Text004);
        IF ReceiveLine."Quantity (Base)" > LineQtyToReceiveBase THEN
          ERROR(Text005);
      END;

      TransferLine2.RESET;
      TransferLine2.SETCURRENTKEY(
        "Transfer-to Code",Status,"Derived From Line No.","Item No.","Variant Code");
      TransferLine2.SETRANGE("Document No.",TransferHeader."No.");
      IF ReceiveSetup."Location Receiving" THEN
        TransferLine2.SETRANGE("Transfer-to Code",ReceiveStation."Location Code");
      TransferLine2.SETRANGE("Derived From Line No.",0);
      IF TransferLine.FIND('-') THEN
        REPEAT
          ReceiveLine.SETRANGE("No.",TransferLine."Item No.");
          ReceiveLine.SETRANGE("Variant Code",TransferLine."Variant Code");
          TransferLine2.SETRANGE("Item No.",TransferLine."Item No.");
          TransferLine2.SETRANGE("Variant Code",TransferLine."Variant Code");

          ReceiveLine.CALCSUMS("Quantity (Base)");
          TransferLine2.CALCSUMS("Qty. to Receive (Base)");

          // Additional code required in Attain
          Line2QtyToReceiveBase := TransferLine2."Qty. to Receive (Base)";

          IF Line2QtyToReceiveBase > ReceiveLine."Quantity (Base)" THEN
            ERROR(
              Text006,
              TransferLine."Item No.",TransferLine."Variant Code");
          IF ReceiveLine."Quantity (Base)" > Line2QtyToReceiveBase THEN
            ERROR(
              Text007,
              TransferLine."Item No.",TransferLine."Variant Code");
        UNTIL TransferLine.NEXT = 0;

      ReceiveLine.RESET;
      ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      ReceiveLine.SETRANGE("Source Type",DATABASE::"Transfer Header");
      ReceiveLine.SETRANGE("Source Subtype",0);
      ReceiveLine.SETRANGE("Source ID",TransferHeader."No.");
      ReceiveLine.SETRANGE("Serial No.",'');
      ReceiveLine.SETRANGE("Receive Serial Number",TRUE);
      IF ReceiveSetup."Location Receiving" THEN
        ReceiveLine.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF ReceiveLine.FIND('-') THEN
        ERROR(
          Text008,
          ReceiveLine.Type,ReceiveLine."No.",ReceiveLine."Receive No.");

      ReceiveLine.RESET;
      ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      ReceiveLine.SETRANGE("Source Type",DATABASE::"Transfer Header");
      ReceiveLine.SETRANGE("Source Subtype",0);
      ReceiveLine.SETRANGE("Source ID",TransferHeader."No.");
      ReceiveLine.SETRANGE("Lot No.",'');
      ReceiveLine.SETRANGE("Receive Lot Number",TRUE);
      IF ReceiveSetup."Location Receiving" THEN
        ReceiveLine.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF ReceiveLine.FIND('-') THEN
        ERROR(
          Text009,
          ReceiveLine.Type,ReceiveLine."No.",ReceiveLine."Receive No.");

      ReceiveLine.RESET;
      ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      ReceiveLine.SETRANGE("Source Type",DATABASE::"Transfer Header");
      ReceiveLine.SETRANGE("Source Subtype",0);
      ReceiveLine.SETRANGE("Source ID",TransferHeader."No.");
      ReceiveLine.SETRANGE("Warranty Date",0D);
      ReceiveLine.SETRANGE("Receive Warranty Date",TRUE);
      IF ReceiveSetup."Location Receiving" THEN
        ReceiveLine.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF ReceiveLine.FIND('-') THEN
        ERROR(
          Text010,
          ReceiveLine.Type,ReceiveLine."No.",ReceiveLine."Receive No.");

      ReceiveLine.RESET;
      ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      ReceiveLine.SETRANGE("Source Type",DATABASE::"Transfer Header");
      ReceiveLine.SETRANGE("Source Subtype",0);
      ReceiveLine.SETRANGE("Source ID",TransferHeader."No.");
      ReceiveLine.SETRANGE("Expiration Date",0D);
      ReceiveLine.SETRANGE("Receive Expiration Date",TRUE);
      IF ReceiveSetup."Location Receiving" THEN
        ReceiveLine.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF ReceiveLine.FIND('-') THEN
        ERROR(
          Text011,
          ReceiveLine.Type,ReceiveLine."No.",ReceiveLine."Receive No.");
    END;

    PROCEDURE PostReceiveTransferHeader@1240030001(TransferHeader@1240030000 : Record 5740;TransferReceiptHeader@1240030001 : Record 5746);
    VAR
      Receive@1240030002 : Record 14000601;
      Receive2@1240030003 : Record 14000601;
      Location@1000000000 : Record 14;
    BEGIN
      CheckTransferHeaderReceived(TransferHeader,TRUE);

      GetReceiveSetup;
      IF ReceiveSetup."Location Receiving" THEN
        GetReceiveStation;

       //<TPZ1430>
      IF ReceiveSetup."Location Receiving" THEN BEGIN
        Location.GET(ReceiveStation."Location Code");
        IF Location."Enable E-Receive" = FALSE THEN
          EXIT;
      END;
      //</TPZ1430>


      Receive.RESET;
      Receive.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Receive.SETRANGE("Source Type",DATABASE::"Transfer Header");
      Receive.SETRANGE("Source Subtype",0);
      Receive.SETRANGE("Source ID",TransferHeader."No.");
      IF ReceiveSetup."Location Receiving" THEN
        Receive.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF Receive.FIND('-') THEN BEGIN
        REPEAT
          Receive.TESTFIELD(Closed);

          PostReceive(
            Receive,TransferReceiptHeader."No.",TransferReceiptHeader."Posting Date");

          IF Receive."Multi Document Receive" THEN BEGIN
            Receive2.RESET;
            Receive2.SETCURRENTKEY("Original Receive No.");
            Receive2.SETRANGE("Original Receive No.",Receive."Original Receive No.");
            IF NOT Receive2.FIND('-') THEN BEGIN
              Receive2.GET(Receive."Original Receive No.");
              PostReceive(Receive2,'',WORKDATE);
            END;
          END;
        UNTIL Receive.NEXT = 0;
      END;
    END;

    PROCEDURE PostReceive@12(VAR CurrentReceive@1240030000 : Record 14000601;PurchReceiptNo@1240030001 : Code[20];PostingDate@1240030002 : Date);
    VAR
      ReceiveLine@1240030003 : Record 14000602;
      ReceiveLine2@1240030004 : Record 14000602;
      PostedReceive@1240030005 : Record 14000603;
      PostedReceiveLine@1240030006 : Record 14000604;
      Receive@1240030007 : Record 14000601;
      ReceiveRule@1240030008 : Record 14000612;
      Item@1240030009 : Record 27;
    BEGIN
      WITH CurrentReceive DO BEGIN
        TESTFIELD(Closed);

        ReceiveLine.RESET;
        ReceiveLine.SETRANGE("Receive No.","No.");
        ReceiveLine.SETRANGE(Type,ReceiveLine.Type::Item);
        ReceiveLine.SETFILTER("No.",'<>%1','');
        ReceiveLine.SETRANGE("Action Required",TRUE);
        IF ReceiveLine.FIND('-') THEN
          REPEAT
            ReceiveRule.GetReceiveRule(ReceiveLine."No.");
            Item.GET(ReceiveLine."No.");
            IF ReceiveRule.ActionRequired(Item) THEN BEGIN
              IF NOT ReceiveSetup."Allow Action Required Posting" THEN
                ReceiveLine.TESTFIELD("Action Required",FALSE);
            END ELSE BEGIN
              ReceiveLine2 := ReceiveLine;
              ReceiveLine2."Action Required" := FALSE;
              ReceiveLine2.MODIFY;
            END;
          UNTIL ReceiveLine.NEXT = 0;

        PostedReceive.INIT;
        PostedReceive.TRANSFERFIELDS(CurrentReceive);
        PostedReceive."Posted Source ID" := PurchReceiptNo;
        PostedReceive."Posting Date" := PostingDate;

        IF PostedReceive."Receive Date" = 0D THEN
          PostedReceive."Receive Date" := WORKDATE;
        PostedReceive.INSERT;

        PostedReceive.COPYLINKS(CurrentReceive);
        CurrentReceive.DELETELINKS;

        ReceiveLine.RESET;
        ReceiveLine.SETRANGE(ReceiveLine."Receive No.","No.");
        IF ReceiveLine.FIND('-') THEN BEGIN
          REPEAT
            PostedReceiveLine.INIT;
            PostedReceiveLine.TRANSFERFIELDS(ReceiveLine);
            PostedReceiveLine."Posted Source ID" := PurchReceiptNo;
            PostedReceiveLine.INSERT;

            PostedReceiveLine.COPYLINKS(ReceiveLine);
            CurrentReceive.DELETELINKS;
          UNTIL ReceiveLine.NEXT = 0;
        END ELSE BEGIN
          PostedReceiveLine.INIT;
          PostedReceiveLine."Receive No." := "No.";
          PostedReceiveLine."Line No." := 10000;
          PostedReceiveLine.INSERT;
        END;
        DELETE;

        ReceiveLine.DELETEALL;
      END;
    END;

    PROCEDURE CloseSalesHeader@13(SalesHeader@1240030000 : Record 36;PrintLabel@1240030001 : Boolean);
    VAR
      Receive@1240030002 : Record 14000601;
    BEGIN
      GetReceiveSetup;
      IF ReceiveSetup."Location Receiving" THEN
        GetReceiveStation;

      Receive.RESET;
      Receive.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Receive.SETRANGE("Source Type",DATABASE::"Sales Header");
      Receive.SETRANGE("Source Subtype",SalesHeader."Document Type");
      Receive.SETRANGE("Source ID",SalesHeader."No.");
      Receive.SETRANGE(Closed,FALSE);
      IF ReceiveSetup."Location Receiving" THEN
        Receive.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF Receive.FIND('-') THEN
        Receive.TESTFIELD(Closed);

      CreateShipChargeSalesHeader(SalesHeader);

      GetReceiveStation;
      IF ReceiveStation."Change Posting Date on Close" THEN
        IF SalesHeader."Posting Date" <> WORKDATE THEN BEGIN
          SalesHeader.FIND;
          SalesHeader.VALIDATE("Posting Date",WORKDATE);
          SalesHeader.MODIFY(TRUE);
        END;

      COMMIT;

      TransferItemTrackingSalesHdr(SalesHeader);

      IF PrintLabel THEN
        PrintSalesHeaderPackingList(SalesHeader,FALSE);
    END;

    LOCAL PROCEDURE TransferItemTrackingSalesHdr@15(CurrentSalesHeader@1240030000 : Record 36);
    VAR
      ReceiveLine@1240030019 : Record 14000602;
      Item@1240030018 : Record 27;
      ItemLedgEntry@1240020000 : Record 32;
      SalesLine@1240030017 : Record 37;
      SalesLineTmp@1240030016 : TEMPORARY Record 37;
      SalesRecSetup@1240020001 : Record 311;
      EShipTrackingCode@1240030014 : Record 14000721;
      TrackingSpecification@1240030013 : Record 336;
      TrackingSpecificationTmp@1240030012 : TEMPORARY Record 336;
      WhseRcptLine@1240030011 : Record 7317;
      EShipItemTrackPage@1240030010 : Page 14000254;
      ReserveSalesLine@1240030009 : Codeunit 99000832;
      LastEntryNo@1240030008 : Integer;
      LinesInserted@1240030007 : Boolean;
      ModifyRecord@1240030006 : Boolean;
      LotNoToSet@1240030005 : Code[20];
      WarrantyDateToSet@1240030004 : Date;
      ExpirationDateToSet@1240030003 : Date;
      LineQty@1240030002 : Decimal;
      SecondSourceQtyArray@1240030001 : ARRAY [3] OF Decimal;
    BEGIN
      GetReceiveSetup;

      SalesLineTmp.DELETEALL;

      ReceiveLine.RESET;
      ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      ReceiveLine.SETRANGE("Source Type",DATABASE::"Sales Header");
      ReceiveLine.SETRANGE("Source Subtype",CurrentSalesHeader."Document Type");
      ReceiveLine.SETRANGE("Source ID",CurrentSalesHeader."No.");
      ReceiveLine.SETRANGE(Type,ReceiveLine.Type::Item);
      ReceiveLine.SETFILTER(Quantity,'<>0');
      IF ReceiveLine.FIND('-') THEN
        REPEAT
          Item.GET(ReceiveLine."No.");
          EShipTrackingCode.GetEShipTrackingCodeItem(Item);

          IF EShipTrackingCode."Rec. Transfer Lot Numbers" THEN
            LotNoToSet := ReceiveLine."Lot No."
          ELSE
            LotNoToSet := '';

          IF EShipTrackingCode."Rec. Transfer Warranty Date" THEN
            WarrantyDateToSet := ReceiveLine."Warranty Date"
          ELSE
            WarrantyDateToSet := 0D;

          IF EShipTrackingCode."Rec. Transfer Expiration Date" THEN
            ExpirationDateToSet := ReceiveLine."Expiration Date"
          ELSE
            ExpirationDateToSet := 0D;

          IF EShipTrackingCode."Rec. Transfer Serial Numbers" OR
             EShipTrackingCode."Rec. Transfer Lot Numbers" OR
             EShipTrackingCode."Rec. Transfer Warranty Date" OR
             EShipTrackingCode."Rec. Transfer Expiration Date"
          THEN BEGIN
            SalesLineTmp.RESET;
            SalesLineTmp.SETRANGE("Document Type",CurrentSalesHeader."Document Type");
            SalesLineTmp.SETRANGE("Document No.",CurrentSalesHeader."No.");
            SalesLineTmp.SETRANGE(Type,SalesLineTmp.Type::Item);
            SalesLineTmp.SETRANGE("No.",ReceiveLine."No.");
            SalesLineTmp.SETRANGE("Variant Code",ReceiveLine."Variant Code");
            IF NOT SalesLineTmp.FIND('-') THEN BEGIN
              SalesLine.COPYFILTERS(SalesLineTmp);
              IF SalesLine.FIND('-') THEN
                REPEAT
                  SalesLineTmp := SalesLine;
                  IF ReceiveSetup."Qty. to Receive as" =
                     ReceiveSetup."Qty. to Receive as"::"Outstanding Quantity"
                  THEN
                    SalesLineTmp."Qty. to Ship (Base)" := SalesLineTmp."Outstanding Qty. (Base)";
                  SalesLineTmp.INSERT;

                  IF EShipTrackingCode."Autom. Delete Item Track Lines" THEN BEGIN
                    CLEAR(ReserveSalesLine);
                    CLEAR(EShipItemTrackPage);
                    CLEAR(TrackingSpecification);
                    TrackingSpecification.InitFromSalesLine(SalesLine);
                    EShipItemTrackPage.SetSourceSpec(
                      TrackingSpecification,SalesLine."Shipment Date");

                    WhseRcptLine.RESET;
                    WhseRcptLine.SETCURRENTKEY(
                      "Source Type","Source Subtype","Source No.","Source Line No.");
                    WhseRcptLine.SETRANGE("Source Type",DATABASE::"Sales Line");
                    WhseRcptLine.SETRANGE("Source Subtype",SalesLine."Document Type");
                    WhseRcptLine.SETRANGE("Source No.",SalesLine."Document No.");
                    WhseRcptLine.SETRANGE("Source Line No.",SalesLine."Line No.");
                    IF WhseRcptLine.FIND('-') THEN BEGIN
                      SecondSourceQtyArray[1] := DATABASE::"Warehouse Receipt Line";
                      SecondSourceQtyArray[2] := SalesLine."Outstanding Qty. (Base)";
                      SecondSourceQtyArray[3] := 0;
                      EShipItemTrackPage.SetSecondSourceQuantity(SecondSourceQtyArray);
                    END;
                    EShipItemTrackPage.EShipOpenForm;

                    TrackingSpecificationTmp.RESET;
                    TrackingSpecificationTmp.DELETEALL;
                    EShipItemTrackPage.EShipGetRecords(TrackingSpecificationTmp);
                    IF TrackingSpecificationTmp.FIND('-') THEN BEGIN
                      REPEAT
                        IF TrackingSpecificationTmp."Quantity Handled (Base)" = 0 THEN BEGIN
                          EShipItemTrackPage.EShipDeleteRecord(TrackingSpecificationTmp);
                        END ELSE BEGIN
                          ModifyRecord := FALSE;
                          IF TrackingSpecificationTmp."Quantity (Base)" >
                             TrackingSpecificationTmp."Quantity Handled (Base)"
                          THEN BEGIN
                            TrackingSpecificationTmp.VALIDATE(
                              "Quantity (Base)",
                              TrackingSpecificationTmp."Quantity Handled (Base)");
                            ModifyRecord := TRUE;
                          END;
                          IF TrackingSpecificationTmp."Qty. to Handle" <> 0 THEN BEGIN
                            TrackingSpecificationTmp.VALIDATE("Qty. to Handle",0);
                            ModifyRecord := TRUE;
                          END;
                          IF ModifyRecord THEN
                            EShipItemTrackPage.EShipModifyRecord(TrackingSpecificationTmp);
                        END;
                      UNTIL TrackingSpecificationTmp.NEXT = 0;

                      EShipItemTrackPage.EShipCloseForm;
                    END;
                  END;
                UNTIL SalesLine.NEXT = 0;
            END;

            IF SalesLineTmp.FIND('-') THEN BEGIN
              REPEAT
                IF (SalesLine."Document Type" <> SalesLineTmp."Document Type") OR
                   (SalesLine."Document No." <> SalesLineTmp."Document No.") OR
                   (SalesLine."Line No." <> SalesLineTmp."Line No.")
                THEN
                  SalesLine.GET(
                    SalesLineTmp."Document Type",SalesLineTmp."Document No.",
                    SalesLineTmp."Line No.");

                IF SalesLineTmp."Qty. to Ship (Base)" >= ReceiveLine."Quantity (Base)" THEN BEGIN
                  LineQty := ReceiveLine."Quantity (Base)";
                  ReceiveLine."Quantity (Base)" := 0;
                  SalesLineTmp."Qty. to Ship (Base)" :=
                    SalesLineTmp."Qty. to Ship (Base)" - LineQty;
                  IF SalesLineTmp."Qty. to Ship (Base)" = 0 THEN
                    SalesLineTmp.DELETE
                  ELSE
                    SalesLineTmp.MODIFY;
                END ELSE BEGIN
                  LineQty := SalesLineTmp."Qty. to Ship (Base)";
                  ReceiveLine."Quantity (Base)" := ReceiveLine."Quantity (Base)" - LineQty;
                  SalesLineTmp."Qty. to Ship (Base)" := 0;
                  SalesLineTmp.DELETE;
                END;

                CLEAR(ReserveSalesLine);
                CLEAR(EShipItemTrackPage);
                CLEAR(TrackingSpecification);
                TrackingSpecification.InitFromSalesLine(SalesLine);
                EShipItemTrackPage.SetSourceSpec(TrackingSpecification,SalesLine."Shipment Date");

                WhseRcptLine.RESET;
                WhseRcptLine.SETCURRENTKEY(
                  "Source Type","Source Subtype","Source No.","Source Line No.");
                WhseRcptLine.SETRANGE("Source Type",DATABASE::"Sales Line");
                WhseRcptLine.SETRANGE("Source Subtype",SalesLine."Document Type");
                WhseRcptLine.SETRANGE("Source No.",SalesLine."Document No.");
                WhseRcptLine.SETRANGE("Source Line No.",SalesLine."Line No.");
                IF WhseRcptLine.FIND('-') THEN BEGIN
                  SecondSourceQtyArray[1] := DATABASE::"Warehouse Receipt Line";
                  SecondSourceQtyArray[2] := SalesLine."Outstanding Qty. (Base)";
                  SecondSourceQtyArray[3] := 0;
                  EShipItemTrackPage.SetSecondSourceQuantity(SecondSourceQtyArray);
                END;
                EShipItemTrackPage.EShipOpenForm;

                TrackingSpecificationTmp.RESET;
                TrackingSpecificationTmp.DELETEALL;
                EShipItemTrackPage.EShipGetRecords(TrackingSpecificationTmp);
                IF TrackingSpecificationTmp.FIND('+') THEN
                  LastEntryNo := TrackingSpecificationTmp."Entry No."
                ELSE
                  LastEntryNo := 0;
                IF EShipTrackingCode."Rec. Transfer Serial Numbers" THEN BEGIN
                  TrackingSpecificationTmp := TrackingSpecification;
                  TrackingSpecificationTmp."Quantity (Base)" := 0;
                  TrackingSpecificationTmp."Qty. to Handle (Base)" := 0;
                  TrackingSpecificationTmp."Qty. to Invoice (Base)" := 0;
                  TrackingSpecificationTmp."Quantity Handled (Base)" := 0;
                  TrackingSpecificationTmp."Quantity Invoiced (Base)" := 0;
                  TrackingSpecificationTmp."Qty. to Handle" := 0;
                  TrackingSpecificationTmp."Qty. to Invoice" := 0;

                  LastEntryNo := LastEntryNo + 1;
                  TrackingSpecificationTmp."Entry No." := LastEntryNo;
                  TrackingSpecificationTmp.VALIDATE("Quantity (Base)",1);
                  TrackingSpecificationTmp.VALIDATE("Serial No.",ReceiveLine."Serial No.");
                  IF LotNoToSet <> '' THEN
                    TrackingSpecificationTmp.VALIDATE("Lot No.",LotNoToSet);
                  IF WarrantyDateToSet <> 0D THEN
                    TrackingSpecificationTmp.VALIDATE("Warranty Date",WarrantyDateToSet);
                  IF ExpirationDateToSet <> 0D THEN
                    TrackingSpecificationTmp.VALIDATE("Expiration Date",ExpirationDateToSet);

                  SalesRecSetup.GET;
                  IF SalesRecSetup."Exact Cost Reversing Mandatory" THEN BEGIN
                    ItemLedgEntry.SETCURRENTKEY("Item No.",Positive,"Location Code","Variant Code");
                    ItemLedgEntry.SETRANGE("Item No.",ReceiveLine."No.");
                    ItemLedgEntry.SETRANGE(Positive,FALSE);
                    IF ItemLedgEntry."Location Code" <> '' THEN
                      ItemLedgEntry.SETRANGE("Location Code",ReceiveLine."Location Code");
                    ItemLedgEntry.SETRANGE("Variant Code",ReceiveLine."Variant Code");
                    ItemLedgEntry.SETRANGE("Serial No.",ReceiveLine."Serial No.");
                    ItemLedgEntry.SETRANGE("Lot No.",ReceiveLine."Lot No.");
                    ItemLedgEntry.SETFILTER("Shipped Qty. Not Returned",'<0');
                    IF ItemLedgEntry.FIND('-') THEN
                      TrackingSpecificationTmp."Appl.-from Item Entry" := ItemLedgEntry."Entry No.";
                  END;

                  EShipItemTrackPage.EShipInsertRecord(TrackingSpecificationTmp);
                END ELSE BEGIN
                  IF LastEntryNo <> 0 THEN BEGIN
                    TrackingSpecificationTmp.SETRANGE("Serial No.",'');
                    TrackingSpecificationTmp.SETRANGE("Lot No.",LotNoToSet);
                    TrackingSpecificationTmp.SETRANGE("Warranty Date",WarrantyDateToSet);
                    TrackingSpecificationTmp.SETRANGE("Expiration Date",ExpirationDateToSet);
                    IF TrackingSpecificationTmp.FIND('-') THEN BEGIN
                      TrackingSpecificationTmp.VALIDATE(
                        "Quantity (Base)",
                        TrackingSpecificationTmp."Quantity (Base)" + LineQty);
                      IF TrackingSpecificationTmp."Qty. per Unit of Measure" IN [1,0] THEN
                        TrackingSpecificationTmp.VALIDATE(
                          "Qty. to Handle",
                          TrackingSpecificationTmp."Qty. to Handle" + LineQty)
                      ELSE
                        TrackingSpecificationTmp.VALIDATE(
                          "Qty. to Handle",
                          ROUND(
                            TrackingSpecificationTmp."Qty. to Handle" +
                            LineQty / TrackingSpecificationTmp."Qty. per Unit of Measure",
                            0.00001));
                      EShipItemTrackPage.EShipModifyRecord(TrackingSpecificationTmp);
                    END ELSE BEGIN
                      TrackingSpecificationTmp := TrackingSpecification;
                      TrackingSpecificationTmp."Quantity (Base)" := 0;
                      TrackingSpecificationTmp."Qty. to Handle (Base)" := 0;
                      TrackingSpecificationTmp."Qty. to Invoice (Base)" := 0;
                      TrackingSpecificationTmp."Quantity Handled (Base)" := 0;
                      TrackingSpecificationTmp."Quantity Invoiced (Base)" := 0;
                      TrackingSpecificationTmp."Qty. to Handle" := 0;
                      TrackingSpecificationTmp."Qty. to Invoice" := 0;

                      LastEntryNo := LastEntryNo + 1;
                      TrackingSpecificationTmp."Entry No." := LastEntryNo;
                      TrackingSpecificationTmp.VALIDATE("Quantity (Base)",LineQty);
                      IF TrackingSpecificationTmp."Qty. per Unit of Measure" IN [1,0] THEN
                        TrackingSpecificationTmp.VALIDATE("Qty. to Handle",LineQty)
                      ELSE
                        TrackingSpecificationTmp.VALIDATE(
                          "Qty. to Handle",
                          ROUND(
                            LineQty / TrackingSpecificationTmp."Qty. per Unit of Measure",
                            0.00001));
                      IF LotNoToSet <> '' THEN
                        TrackingSpecificationTmp.VALIDATE("Lot No.",LotNoToSet);
                      IF WarrantyDateToSet <> 0D THEN
                        TrackingSpecificationTmp.VALIDATE("Warranty Date",WarrantyDateToSet);
                      IF ExpirationDateToSet <> 0D THEN
                        TrackingSpecificationTmp.VALIDATE("Expiration Date",ExpirationDateToSet);
                      EShipItemTrackPage.EShipInsertRecord(TrackingSpecificationTmp);
                    END;
                  END ELSE BEGIN
                    TrackingSpecificationTmp := TrackingSpecification;
                    LastEntryNo := LastEntryNo + 1;
                    TrackingSpecificationTmp."Entry No." := LastEntryNo;
                    TrackingSpecificationTmp.VALIDATE("Quantity (Base)",LineQty);
                    IF TrackingSpecificationTmp."Qty. per Unit of Measure" IN [1,0] THEN
                      TrackingSpecificationTmp.VALIDATE("Qty. to Handle",LineQty)
                    ELSE
                      TrackingSpecificationTmp.VALIDATE(
                        "Qty. to Handle",
                        ROUND(
                          LineQty / TrackingSpecificationTmp."Qty. per Unit of Measure",
                          0.00001));
                    IF LotNoToSet <> '' THEN
                      TrackingSpecificationTmp.VALIDATE("Lot No.",LotNoToSet);
                    IF WarrantyDateToSet <> 0D THEN
                      TrackingSpecificationTmp.VALIDATE("Warranty Date",WarrantyDateToSet);
                    IF ExpirationDateToSet <> 0D THEN
                      TrackingSpecificationTmp.VALIDATE("Expiration Date",ExpirationDateToSet);
                    EShipItemTrackPage.EShipInsertRecord(TrackingSpecificationTmp);
                  END;
                END;

                EShipItemTrackPage.EShipCloseForm;
              UNTIL (SalesLineTmp.NEXT = 0) OR (ReceiveLine."Quantity (Base)" = 0);

              LinesInserted := TRUE;
            END;
          END;
        UNTIL ReceiveLine.NEXT = 0;

      IF LinesInserted THEN
        COMMIT;
    END;

    PROCEDURE ClosePurchHeader@6(PurchHeader@1240030000 : Record 38;PrintLabel@1240030001 : Boolean);
    VAR
      Receive@1240030002 : Record 14000601;
    BEGIN
      GetReceiveSetup;
      IF ReceiveSetup."Location Receiving" THEN
        GetReceiveStation;

      Receive.RESET;
      Receive.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Receive.SETRANGE("Source Type",DATABASE::"Purchase Header");
      Receive.SETRANGE("Source Subtype",PurchHeader."Document Type");
      Receive.SETRANGE("Source ID",PurchHeader."No.");
      Receive.SETRANGE(Closed,FALSE);
      IF ReceiveSetup."Location Receiving" THEN
        Receive.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF Receive.FIND('-') THEN
        Receive.TESTFIELD(Closed);

      CreateShipChargePurchHeader(PurchHeader);

      GetReceiveStation;
      IF ReceiveStation."Change Posting Date on Close" THEN
        IF PurchHeader."Posting Date" <> WORKDATE THEN BEGIN
          PurchHeader.FIND;
          PurchHeader.VALIDATE("Posting Date",WORKDATE);
          PurchHeader.MODIFY(TRUE);
        END;

      COMMIT;

      TransferItemTrackingPurchHdr(PurchHeader);

      IF PrintLabel THEN
        PrintPurchHeaderPackingList(PurchHeader,FALSE);
    END;

    LOCAL PROCEDURE TransferItemTrackingPurchHdr@40(CurrentPurchHeader@1240030000 : Record 38);
    VAR
      ReceiveLine@1240030019 : Record 14000602;
      Item@1240030018 : Record 27;
      PurchLine@1240030017 : Record 39;
      PurchLineTmp@1240030016 : TEMPORARY Record 39;
      EShipTrackingCode@1240030014 : Record 14000721;
      TrackingSpecification@1240030013 : Record 336;
      TrackingSpecificationTmp@1240030012 : TEMPORARY Record 336;
      WhseRcptLine@1240030011 : Record 7317;
      EShipItemTrackPage@1240030010 : Page 14000254;
      ReservePurchLine@1240030009 : Codeunit 99000834;
      LastEntryNo@1240030008 : Integer;
      LinesInserted@1240030007 : Boolean;
      ModifyRecord@1240030006 : Boolean;
      LotNoToSet@1240030005 : Code[20];
      WarrantyDateToSet@1240030004 : Date;
      ExpirationDateToSet@1240030003 : Date;
      LineQty@1240030002 : Decimal;
      SecondSourceQtyArray@1240030001 : ARRAY [3] OF Decimal;
    BEGIN
      GetReceiveSetup;

      PurchLineTmp.DELETEALL;

      ReceiveLine.RESET;
      ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      ReceiveLine.SETRANGE("Source Type",DATABASE::"Purchase Header");
      ReceiveLine.SETRANGE("Source Subtype",CurrentPurchHeader."Document Type");
      ReceiveLine.SETRANGE("Source ID",CurrentPurchHeader."No.");
      ReceiveLine.SETRANGE(Type,ReceiveLine.Type::Item);
      ReceiveLine.SETFILTER(Quantity,'<>0');
      IF ReceiveLine.FIND('-') THEN
        REPEAT
          Item.GET(ReceiveLine."No.");
          EShipTrackingCode.GetEShipTrackingCodeItem(Item);

          IF EShipTrackingCode."Rec. Transfer Lot Numbers" THEN
            LotNoToSet := ReceiveLine."Lot No."
          ELSE
            LotNoToSet := '';

          IF EShipTrackingCode."Rec. Transfer Warranty Date" THEN
            WarrantyDateToSet := ReceiveLine."Warranty Date"
          ELSE
            WarrantyDateToSet := 0D;

          IF EShipTrackingCode."Rec. Transfer Expiration Date" THEN
            ExpirationDateToSet := ReceiveLine."Expiration Date"
          ELSE
            ExpirationDateToSet := 0D;

          IF EShipTrackingCode."Rec. Transfer Serial Numbers" OR
             EShipTrackingCode."Rec. Transfer Lot Numbers" OR
             EShipTrackingCode."Rec. Transfer Warranty Date" OR
             EShipTrackingCode."Rec. Transfer Expiration Date"
          THEN BEGIN
            PurchLineTmp.RESET;
            PurchLineTmp.SETRANGE("Document Type",CurrentPurchHeader."Document Type");
            PurchLineTmp.SETRANGE("Document No.",CurrentPurchHeader."No.");
            PurchLineTmp.SETRANGE(Type,PurchLineTmp.Type::Item);
            PurchLineTmp.SETRANGE("No.",ReceiveLine."No.");
            PurchLineTmp.SETRANGE("Variant Code",ReceiveLine."Variant Code");
            IF NOT PurchLineTmp.FIND('-') THEN BEGIN
              PurchLine.COPYFILTERS(PurchLineTmp);
              IF PurchLine.FIND('-') THEN
                REPEAT
                  PurchLineTmp := PurchLine;
                  IF ReceiveSetup."Qty. to Receive as" =
                     ReceiveSetup."Qty. to Receive as"::"Outstanding Quantity"
                  THEN
                    PurchLineTmp."Qty. to Receive (Base)" := PurchLineTmp."Outstanding Qty. (Base)";
                  PurchLineTmp.INSERT;

                  IF EShipTrackingCode."Autom. Delete Item Track Lines" THEN BEGIN
                    CLEAR(ReservePurchLine);
                    CLEAR(EShipItemTrackPage);
                    CLEAR(TrackingSpecification);
                    TrackingSpecification.InitFromPurchLine(PurchLine);
                    EShipItemTrackPage.SetSourceSpec(
                      TrackingSpecification,PurchLine."Expected Receipt Date");

                    WhseRcptLine.RESET;
                    WhseRcptLine.SETCURRENTKEY(
                      "Source Type","Source Subtype","Source No.","Source Line No.");
                    WhseRcptLine.SETRANGE("Source Type",DATABASE::"Purchase Line");
                    WhseRcptLine.SETRANGE("Source Subtype",PurchLine."Document Type");
                    WhseRcptLine.SETRANGE("Source No.",PurchLine."Document No.");
                    WhseRcptLine.SETRANGE("Source Line No.",PurchLine."Line No.");
                    IF WhseRcptLine.FIND('-') THEN BEGIN
                      SecondSourceQtyArray[1] := DATABASE::"Warehouse Receipt Line";
                      SecondSourceQtyArray[2] := PurchLine."Outstanding Qty. (Base)";
                      SecondSourceQtyArray[3] := 0;
                      EShipItemTrackPage.SetSecondSourceQuantity(SecondSourceQtyArray);
                    END;
                    EShipItemTrackPage.EShipOpenForm;

                    TrackingSpecificationTmp.RESET;
                    TrackingSpecificationTmp.DELETEALL;
                    EShipItemTrackPage.EShipGetRecords(TrackingSpecificationTmp);
                    IF TrackingSpecificationTmp.FIND('-') THEN BEGIN
                      REPEAT
                        IF TrackingSpecificationTmp."Quantity Handled (Base)" = 0 THEN BEGIN
                          EShipItemTrackPage.EShipDeleteRecord(TrackingSpecificationTmp);
                        END ELSE BEGIN
                          ModifyRecord := FALSE;
                          IF TrackingSpecificationTmp."Quantity (Base)" >
                             TrackingSpecificationTmp."Quantity Handled (Base)"
                          THEN BEGIN
                            TrackingSpecificationTmp.VALIDATE(
                              "Quantity (Base)",
                              TrackingSpecificationTmp."Quantity Handled (Base)");
                            ModifyRecord := TRUE;
                          END;
                          IF TrackingSpecificationTmp."Qty. to Handle" <> 0 THEN BEGIN
                            TrackingSpecificationTmp.VALIDATE("Qty. to Handle",0);
                            ModifyRecord := TRUE;
                          END;
                          IF ModifyRecord THEN
                            EShipItemTrackPage.EShipModifyRecord(TrackingSpecificationTmp);
                        END;
                      UNTIL TrackingSpecificationTmp.NEXT = 0;

                      EShipItemTrackPage.EShipCloseForm;
                    END;
                  END;
                UNTIL PurchLine.NEXT = 0;
            END;

            IF PurchLineTmp.FIND('-') THEN BEGIN
              REPEAT
                IF (PurchLine."Document Type" <> PurchLineTmp."Document Type") OR
                   (PurchLine."Document No." <> PurchLineTmp."Document No.") OR
                   (PurchLine."Line No." <> PurchLineTmp."Line No.")
                THEN
                  PurchLine.GET(
                    PurchLineTmp."Document Type",PurchLineTmp."Document No.",
                    PurchLineTmp."Line No.");

                IF PurchLineTmp."Qty. to Receive (Base)" >= ReceiveLine."Quantity (Base)" THEN BEGIN
                  LineQty := ReceiveLine."Quantity (Base)";
                  ReceiveLine."Quantity (Base)" := 0;
                  PurchLineTmp."Qty. to Receive (Base)" :=
                    PurchLineTmp."Qty. to Receive (Base)" - LineQty;
                  IF PurchLineTmp."Qty. to Receive (Base)" = 0 THEN
                    PurchLineTmp.DELETE
                  ELSE
                    PurchLineTmp.MODIFY;
                END ELSE BEGIN
                  LineQty := PurchLineTmp."Qty. to Receive (Base)";
                  ReceiveLine."Quantity (Base)" := ReceiveLine."Quantity (Base)" - LineQty;
                  PurchLineTmp."Qty. to Receive (Base)" := 0;
                  PurchLineTmp.DELETE;
                END;

                CLEAR(ReservePurchLine);
                CLEAR(EShipItemTrackPage);
                CLEAR(TrackingSpecification);
                TrackingSpecification.InitFromPurchLine(PurchLine);
                EShipItemTrackPage.SetSourceSpec(TrackingSpecification,PurchLine."Expected Receipt Date");

                WhseRcptLine.RESET;
                WhseRcptLine.SETCURRENTKEY(
                  "Source Type","Source Subtype","Source No.","Source Line No.");
                WhseRcptLine.SETRANGE("Source Type",DATABASE::"Purchase Line");
                WhseRcptLine.SETRANGE("Source Subtype",PurchLine."Document Type");
                WhseRcptLine.SETRANGE("Source No.",PurchLine."Document No.");
                WhseRcptLine.SETRANGE("Source Line No.",PurchLine."Line No.");
                IF WhseRcptLine.FIND('-') THEN BEGIN
                  SecondSourceQtyArray[1] := DATABASE::"Warehouse Receipt Line";
                  SecondSourceQtyArray[2] := PurchLine."Outstanding Qty. (Base)";
                  SecondSourceQtyArray[3] := 0;
                  EShipItemTrackPage.SetSecondSourceQuantity(SecondSourceQtyArray);
                END;
                EShipItemTrackPage.EShipOpenForm;

                TrackingSpecificationTmp.RESET;
                TrackingSpecificationTmp.DELETEALL;
                EShipItemTrackPage.EShipGetRecords(TrackingSpecificationTmp);
                IF TrackingSpecificationTmp.FIND('+') THEN
                  LastEntryNo := TrackingSpecificationTmp."Entry No."
                ELSE
                  LastEntryNo := 0;
                IF EShipTrackingCode."Rec. Transfer Serial Numbers" THEN BEGIN
                  TrackingSpecificationTmp := TrackingSpecification;
                  TrackingSpecificationTmp."Quantity (Base)" := 0;
                  TrackingSpecificationTmp."Qty. to Handle (Base)" := 0;
                  TrackingSpecificationTmp."Qty. to Invoice (Base)" := 0;
                  TrackingSpecificationTmp."Quantity Handled (Base)" := 0;
                  TrackingSpecificationTmp."Quantity Invoiced (Base)" := 0;
                  TrackingSpecificationTmp."Qty. to Handle" := 0;
                  TrackingSpecificationTmp."Qty. to Invoice" := 0;

                  LastEntryNo := LastEntryNo + 1;
                  TrackingSpecificationTmp."Entry No." := LastEntryNo;
                  TrackingSpecificationTmp.VALIDATE("Quantity (Base)",1);
                  TrackingSpecificationTmp.VALIDATE("Serial No.",ReceiveLine."Serial No.");
                  IF LotNoToSet <> '' THEN
                    TrackingSpecificationTmp.VALIDATE("Lot No.",LotNoToSet);
                  IF WarrantyDateToSet <> 0D THEN
                    TrackingSpecificationTmp.VALIDATE("Warranty Date",WarrantyDateToSet);
                  IF ExpirationDateToSet <> 0D THEN
                    TrackingSpecificationTmp.VALIDATE("Expiration Date",ExpirationDateToSet);
                  EShipItemTrackPage.EShipInsertRecord(TrackingSpecificationTmp);
                END ELSE BEGIN
                  IF LastEntryNo <> 0 THEN BEGIN
                    TrackingSpecificationTmp.SETRANGE("Serial No.",'');
                    TrackingSpecificationTmp.SETRANGE("Lot No.",LotNoToSet);
                    TrackingSpecificationTmp.SETRANGE("Warranty Date",WarrantyDateToSet);
                    TrackingSpecificationTmp.SETRANGE("Expiration Date",ExpirationDateToSet);
                    IF TrackingSpecificationTmp.FIND('-') THEN BEGIN
                      TrackingSpecificationTmp.VALIDATE(
                        "Quantity (Base)",
                        TrackingSpecificationTmp."Quantity (Base)" + LineQty);
                      IF TrackingSpecificationTmp."Qty. per Unit of Measure" IN [1,0] THEN
                        TrackingSpecificationTmp.VALIDATE(
                          "Qty. to Handle",
                          TrackingSpecificationTmp."Qty. to Handle" + LineQty)
                      ELSE
                        TrackingSpecificationTmp.VALIDATE(
                          "Qty. to Handle",
                          ROUND(
                            TrackingSpecificationTmp."Qty. to Handle" +
                            LineQty / TrackingSpecificationTmp."Qty. per Unit of Measure",
                            0.00001));
                      EShipItemTrackPage.EShipModifyRecord(TrackingSpecificationTmp);
                    END ELSE BEGIN
                      TrackingSpecificationTmp := TrackingSpecification;
                      TrackingSpecificationTmp."Quantity (Base)" := 0;
                      TrackingSpecificationTmp."Qty. to Handle (Base)" := 0;
                      TrackingSpecificationTmp."Qty. to Invoice (Base)" := 0;
                      TrackingSpecificationTmp."Quantity Handled (Base)" := 0;
                      TrackingSpecificationTmp."Quantity Invoiced (Base)" := 0;
                      TrackingSpecificationTmp."Qty. to Handle" := 0;
                      TrackingSpecificationTmp."Qty. to Invoice" := 0;

                      LastEntryNo := LastEntryNo + 1;
                      TrackingSpecificationTmp."Entry No." := LastEntryNo;
                      TrackingSpecificationTmp.VALIDATE("Quantity (Base)",LineQty);
                      IF TrackingSpecificationTmp."Qty. per Unit of Measure" IN [1,0] THEN
                        TrackingSpecificationTmp.VALIDATE("Qty. to Handle",LineQty)
                      ELSE
                        TrackingSpecificationTmp.VALIDATE(
                          "Qty. to Handle",
                          ROUND(
                            LineQty / TrackingSpecificationTmp."Qty. per Unit of Measure",
                            0.00001));
                      IF LotNoToSet <> '' THEN
                        TrackingSpecificationTmp.VALIDATE("Lot No.",LotNoToSet);
                      IF WarrantyDateToSet <> 0D THEN
                        TrackingSpecificationTmp.VALIDATE("Warranty Date",WarrantyDateToSet);
                      IF ExpirationDateToSet <> 0D THEN
                        TrackingSpecificationTmp.VALIDATE("Expiration Date",ExpirationDateToSet);
                      EShipItemTrackPage.EShipInsertRecord(TrackingSpecificationTmp);
                    END;
                  END ELSE BEGIN
                    TrackingSpecificationTmp := TrackingSpecification;
                    LastEntryNo := LastEntryNo + 1;
                    TrackingSpecificationTmp."Entry No." := LastEntryNo;
                    TrackingSpecificationTmp.VALIDATE("Quantity (Base)",LineQty);
                    IF TrackingSpecificationTmp."Qty. per Unit of Measure" IN [1,0] THEN
                      TrackingSpecificationTmp.VALIDATE("Qty. to Handle",LineQty)
                    ELSE
                      TrackingSpecificationTmp.VALIDATE(
                        "Qty. to Handle",
                        ROUND(
                          LineQty / TrackingSpecificationTmp."Qty. per Unit of Measure",
                          0.00001));
                    IF LotNoToSet <> '' THEN
                      TrackingSpecificationTmp.VALIDATE("Lot No.",LotNoToSet);
                    IF WarrantyDateToSet <> 0D THEN
                      TrackingSpecificationTmp.VALIDATE("Warranty Date",WarrantyDateToSet);
                    IF ExpirationDateToSet <> 0D THEN
                      TrackingSpecificationTmp.VALIDATE("Expiration Date",ExpirationDateToSet);
                    EShipItemTrackPage.EShipInsertRecord(TrackingSpecificationTmp);
                  END;
                END;

                EShipItemTrackPage.EShipCloseForm;
              UNTIL (PurchLineTmp.NEXT = 0) OR (ReceiveLine."Quantity (Base)" = 0);

              LinesInserted := TRUE;
            END;
          END;
        UNTIL ReceiveLine.NEXT = 0;

      IF LinesInserted THEN
        COMMIT;
    END;

    PROCEDURE CloseTransferHeader@1240030007(TransferHeader@1240030000 : Record 5740;PrintLabel@1240030001 : Boolean);
    VAR
      Receive@1240030002 : Record 14000601;
    BEGIN
      GetReceiveSetup;
      IF ReceiveSetup."Location Receiving" THEN
        GetReceiveStation;

      Receive.RESET;
      Receive.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Receive.SETRANGE("Source Type",DATABASE::"Transfer Header");
      Receive.SETRANGE("Source Subtype",0);
      Receive.SETRANGE("Source ID",TransferHeader."No.");
      Receive.SETRANGE(Closed,FALSE);
      IF ReceiveSetup."Location Receiving" THEN
        Receive.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF Receive.FIND('-') THEN
        Receive.TESTFIELD(Closed);

      CreateShipChargeTransferHeader(TransferHeader);

      GetReceiveStation;
      IF ReceiveStation."Change Posting Date on Close" THEN
        IF TransferHeader."Posting Date" <> WORKDATE THEN BEGIN
          TransferHeader.FIND;
          TransferHeader.VALIDATE("Posting Date",WORKDATE);
          TransferHeader.MODIFY(TRUE);
        END;

      COMMIT;

      TransferItemTrackingTransHdr(TransferHeader);

      IF PrintLabel THEN
        PrintTransferHeaderPackingList(TransferHeader,FALSE);
    END;

    LOCAL PROCEDURE TransferItemTrackingTransHdr@1240030006(CurrentTransferHeader@1240030000 : Record 5740);
    VAR
      ReceiveLine@1240030019 : Record 14000602;
      Item@1240030018 : Record 27;
      TransferLine@1240030017 : Record 5741;
      TransferLineTmp@1240030016 : TEMPORARY Record 5741;
      EShipTrackingCode@1240030014 : Record 14000721;
      TrackingSpecification@1240030013 : Record 336;
      TrackingSpecificationTmp@1240030012 : TEMPORARY Record 336;
      WhseRcptLine@1240030011 : Record 7317;
      EShipItemTrackPage@1240030010 : Page 14000254;
      ReserveTransferLine@1240030009 : Codeunit 99000836;
      LastEntryNo@1240030008 : Integer;
      LinesInserted@1240030007 : Boolean;
      SerialNoToSet@1240030015 : Code[20];
      LotNoToSet@1240030005 : Code[20];
      WarrantyDateToSet@1240030004 : Date;
      ExpirationDateToSet@1240030003 : Date;
      LineQty@1240030002 : Decimal;
      SecondSourceQtyArray@1240030001 : ARRAY [3] OF Decimal;
    BEGIN
      GetReceiveSetup;

      TransferLineTmp.DELETEALL;

      ReceiveLine.RESET;
      ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      ReceiveLine.SETRANGE("Source Type",DATABASE::"Transfer Header");
      ReceiveLine.SETRANGE("Source Subtype",0);
      ReceiveLine.SETRANGE("Source ID",CurrentTransferHeader."No.");
      ReceiveLine.SETRANGE(Type,ReceiveLine.Type::Item);
      ReceiveLine.SETFILTER(Quantity,'<>0');
      IF ReceiveLine.FIND('-') THEN
        REPEAT
          Item.GET(ReceiveLine."No.");
          EShipTrackingCode.GetEShipTrackingCodeItem(Item);

          IF EShipTrackingCode."Rec. Transfer Serial Numbers" THEN
            SerialNoToSet := ReceiveLine."Serial No."
          ELSE
            SerialNoToSet := '';

          IF EShipTrackingCode."Rec. Transfer Lot Numbers" THEN
            LotNoToSet := ReceiveLine."Lot No."
          ELSE
            LotNoToSet := '';

          IF EShipTrackingCode."Rec. Transfer Warranty Date" THEN
            WarrantyDateToSet := ReceiveLine."Warranty Date"
          ELSE
            WarrantyDateToSet := 0D;

          IF EShipTrackingCode."Rec. Transfer Expiration Date" THEN
            ExpirationDateToSet := ReceiveLine."Expiration Date"
          ELSE
            ExpirationDateToSet := 0D;

          IF EShipTrackingCode."Rec. Transfer Serial Numbers" OR
             EShipTrackingCode."Rec. Transfer Lot Numbers" OR
             EShipTrackingCode."Rec. Transfer Warranty Date" OR
             EShipTrackingCode."Rec. Transfer Expiration Date"
          THEN BEGIN
            TransferLineTmp.RESET;
            TransferLineTmp.SETRANGE("Document No.",CurrentTransferHeader."No.");
            TransferLineTmp.SETRANGE("Item No.",ReceiveLine."No.");
            TransferLineTmp.SETRANGE("Variant Code",ReceiveLine."Variant Code");
            IF NOT TransferLineTmp.FIND('-') THEN BEGIN
              TransferLine.COPYFILTERS(TransferLineTmp);
              IF TransferLine.FIND('-') THEN
                REPEAT
                  TransferLineTmp := TransferLine;
                  IF ReceiveSetup."Qty. to Receive as" =
                     ReceiveSetup."Qty. to Receive as"::"Outstanding Quantity"
                  THEN
                    TransferLineTmp."Qty. to Receive (Base)" := TransferLineTmp."Qty. in Transit (Base)";
                  TransferLineTmp.INSERT;

                  IF EShipTrackingCode."Autom. Delete Item Track Lines" THEN BEGIN
                    CLEAR(ReserveTransferLine);
                    CLEAR(EShipItemTrackPage);
                    CLEAR(TrackingSpecification);
                    TrackingSpecification.InitFromTransLine(
                      TransferLine,CurrentTransferHeader."Receipt Date",1);
                    EShipItemTrackPage.SetSourceSpec(
                      TrackingSpecification,TransferLine."Receipt Date");

                    WhseRcptLine.RESET;
                    WhseRcptLine.SETCURRENTKEY(
                      "Source Type","Source Subtype","Source No.","Source Line No.");
                    WhseRcptLine.SETRANGE("Source Type",DATABASE::"Transfer Line");
                    WhseRcptLine.SETRANGE("Source Subtype",0);
                    WhseRcptLine.SETRANGE("Source No.",TransferLine."Document No.");
                    WhseRcptLine.SETRANGE("Source Line No.",TransferLine."Line No.");
                    IF WhseRcptLine.FIND('-') THEN BEGIN
                      SecondSourceQtyArray[1] := DATABASE::"Warehouse Receipt Line";
                      SecondSourceQtyArray[2] := TransferLine."Qty. in Transit (Base)";
                      SecondSourceQtyArray[3] := 0;
                      EShipItemTrackPage.SetSecondSourceQuantity(SecondSourceQtyArray);
                    END;
                    EShipItemTrackPage.EShipOpenForm;

                    TrackingSpecificationTmp.RESET;
                    TrackingSpecificationTmp.DELETEALL;
                    EShipItemTrackPage.EShipGetRecords(TrackingSpecificationTmp);
                    IF TrackingSpecificationTmp.FIND('-') THEN BEGIN
                      REPEAT
                        IF TrackingSpecificationTmp."Qty. to Handle" <> 0 THEN BEGIN
                          TrackingSpecificationTmp.VALIDATE("Qty. to Handle (Base)",0);
                          TrackingSpecificationTmp.VALIDATE("Qty. to Handle",0);
                          EShipItemTrackPage.EShipModifyRecord(TrackingSpecificationTmp);
                        END;
                      UNTIL TrackingSpecificationTmp.NEXT = 0;

                      EShipItemTrackPage.EShipCloseForm;
                    END;
                  END;
                UNTIL TransferLine.NEXT = 0;
            END;

            IF TransferLineTmp.FIND('-') THEN BEGIN
              REPEAT
                IF (TransferLine."Document No." <> TransferLineTmp."Document No.") OR
                   (TransferLine."Line No." <> TransferLineTmp."Line No.")
                THEN
                  TransferLine.GET(TransferLineTmp."Document No.",TransferLineTmp."Line No.");

                IF TransferLineTmp."Qty. to Receive (Base)" >= ReceiveLine."Quantity (Base)" THEN BEGIN
                  LineQty := ReceiveLine."Quantity (Base)";
                  ReceiveLine."Quantity (Base)" := 0;
                  TransferLineTmp."Qty. to Receive (Base)" :=
                    TransferLineTmp."Qty. to Receive (Base)" - LineQty;
                  IF TransferLineTmp."Qty. to Receive (Base)" = 0 THEN
                    TransferLineTmp.DELETE
                  ELSE
                    TransferLineTmp.MODIFY;
                END ELSE BEGIN
                  LineQty := TransferLineTmp."Qty. to Receive (Base)";
                  ReceiveLine."Quantity (Base)" := ReceiveLine."Quantity (Base)" - LineQty;
                  TransferLineTmp."Qty. to Receive (Base)" := 0;
                  TransferLineTmp.DELETE;
                END;

                CLEAR(ReserveTransferLine);
                CLEAR(EShipItemTrackPage);
                CLEAR(TrackingSpecification);
                TrackingSpecification.InitFromTransLine(
                  TransferLine,TransferLine."Receipt Date",1);
                EShipItemTrackPage.SetSourceSpec(TrackingSpecification,TransferLine."Receipt Date");

                WhseRcptLine.RESET;
                WhseRcptLine.SETCURRENTKEY(
                  "Source Type","Source Subtype","Source No.","Source Line No.");
                WhseRcptLine.SETRANGE("Source Type",DATABASE::"Transfer Line");
                WhseRcptLine.SETRANGE("Source Subtype",0);
                WhseRcptLine.SETRANGE("Source No.",TransferLine."Document No.");
                WhseRcptLine.SETRANGE("Source Line No.",TransferLine."Line No.");
                IF WhseRcptLine.FIND('-') THEN BEGIN
                  SecondSourceQtyArray[1] := DATABASE::"Warehouse Receipt Line";
                  SecondSourceQtyArray[2] := TransferLine."Qty. in Transit (Base)";
                  SecondSourceQtyArray[3] := 0;
                  EShipItemTrackPage.SetSecondSourceQuantity(SecondSourceQtyArray);
                END;
                EShipItemTrackPage.EShipOpenForm;

                TrackingSpecificationTmp.RESET;
                TrackingSpecificationTmp.DELETEALL;
                EShipItemTrackPage.EShipGetRecords(TrackingSpecificationTmp);
                IF TrackingSpecificationTmp.FIND('+') THEN
                  LastEntryNo := TrackingSpecificationTmp."Entry No."
                ELSE
                  LastEntryNo := 0;

                TrackingSpecificationTmp.SETRANGE("Serial No.",SerialNoToSet);
                TrackingSpecificationTmp.SETRANGE("Lot No.",LotNoToSet);
                TrackingSpecificationTmp.SETRANGE("Warranty Date",WarrantyDateToSet);
                TrackingSpecificationTmp.SETRANGE("Expiration Date",ExpirationDateToSet);
                IF TrackingSpecificationTmp.FIND('-') THEN BEGIN
                  IF TrackingSpecificationTmp."Qty. to Handle (Base)" + LineQty >
                     TrackingSpecificationTmp."Quantity (Base)" -
                     TrackingSpecificationTmp."Quantity Handled (Base)"
                  THEN
                    ERROR(Text102,SerialNoToSet,LotNoToSet,WarrantyDateToSet,ExpirationDateToSet);

                  TrackingSpecificationTmp.VALIDATE(
                    "Qty. to Handle (Base)",
                    TrackingSpecificationTmp."Qty. to Handle (Base)" + LineQty);
                  IF TrackingSpecificationTmp."Qty. per Unit of Measure" IN [1,0] THEN
                    TrackingSpecificationTmp.VALIDATE(
                      "Qty. to Handle",
                      TrackingSpecificationTmp."Qty. to Handle" + LineQty)
                  ELSE
                    TrackingSpecificationTmp.VALIDATE(
                      "Qty. to Handle",
                      ROUND(
                        TrackingSpecificationTmp."Qty. to Handle" +
                        LineQty / TrackingSpecificationTmp."Qty. per Unit of Measure",
                        0.00001));

                  EShipItemTrackPage.EShipModifyRecord(TrackingSpecificationTmp);
                END ELSE
                  ERROR(Text101,SerialNoToSet,LotNoToSet,WarrantyDateToSet,ExpirationDateToSet);

                EShipItemTrackPage.EShipCloseForm;
              UNTIL (TransferLineTmp.NEXT = 0) OR (ReceiveLine."Quantity (Base)" = 0);

              LinesInserted := TRUE;
            END;
          END;
        UNTIL ReceiveLine.NEXT = 0;

      IF LinesInserted THEN
        COMMIT;
    END;

    PROCEDURE CloseReceive@18(VAR CurrentReceive@1240030000 : Record 14000601;PrintLabel@1240030001 : Boolean);
    VAR
      MultiDocReceiveTmp@1240030002 : TEMPORARY Record 14000601;
    BEGIN
      WITH CurrentReceive DO BEGIN
        TESTFIELD(Closed,FALSE);

        GetReceiveSetup;
        GetReceiveStation;
        GetShippingAgent("Shipping Agent Code");

        IF COD THEN
          TESTFIELD("COD Amount");

        IF ShippingAgent."Enter Ext. Track. No. on Close" OR
           ReceiveStation."Enter Ext. Track. No. on Close"
        THEN BEGIN
          COMMIT;

          EnterExternalTrackingNo(CurrentReceive,FALSE);
        END;

        "Closed by Receive Station Code" := ReceiveStation.Code;
        ClearTotalValueFields;
        VALIDATE("Calculation Weight",GetWeight);
        GetCalculationFields(0,'');

        "Receive Date" := WORKDATE;
        "Receive Time" := TIME;
        Closed := TRUE;
        MODIFY;
        COMMIT;

        IF "Multi Document Receive" THEN BEGIN
          MultiDocReceiveMgt.SplitMultiDocReceive(
            CurrentReceive,MultiDocReceiveTmp,ReceiveStation,ReceiveSetup);
          COMMIT;
        END;

        IF (("Source ID" <> '') OR "Multi Document Receive") THEN BEGIN
          IF "Multi Document Receive" THEN BEGIN
            IF MultiDocReceiveTmp.FIND('-') THEN
              REPEAT
                CreateShipCharge("Source Type","Source Subtype",MultiDocReceiveTmp."Source ID")
              UNTIL MultiDocReceiveTmp.NEXT = 0;
          END ELSE
            CreateShipCharge("Source Type","Source Subtype","Source ID");

          COMMIT;
        END;

        IF ReceiveSetup."Enable Label Printing" THEN
          LabelMgt.CloseReceive(CurrentReceive,PrintLabel);

        IF PrintLabel THEN
          PrintReceivePackingList(CurrentReceive,FALSE);
      END;
    END;

    PROCEDURE OpenReceive@19(VAR CurrentReceive@1240030000 : Record 14000601);
    VAR
      ReceiveLine@1240030002 : Record 14000602;
      MultiDocReceiveTmp@1240030001 : TEMPORARY Record 14000601;
    BEGIN
      WITH CurrentReceive DO BEGIN
        TESTFIELD(Closed);

        ReceiveLine.RESET;
        ReceiveLine.SETCURRENTKEY(Type,"No.");
        ReceiveLine.SETRANGE(Type,ReceiveLine.Type::Receive);
        ReceiveLine.SETRANGE("No.","No.");
        IF ReceiveLine.FIND('-') THEN
          ERROR(
            Text015,
            ReceiveLine."Receive No.");

        IF "Multi Document Receive" THEN BEGIN
          MultiDocReceiveMgt.CombineMultiDocReceive(CurrentReceive,MultiDocReceiveTmp);
          COMMIT;
        END;

        Closed := FALSE;
        MODIFY;
        COMMIT;

        IF "Source ID" <> '' THEN BEGIN
          IF "Multi Document Receive" THEN BEGIN
            MultiDocReceiveTmp.FIND('-');
            REPEAT
              CreateShipCharge("Source Type","Source Subtype",MultiDocReceiveTmp."Source ID");
            UNTIL MultiDocReceiveTmp.NEXT = 0;
          END ELSE
            CreateShipCharge("Source Type","Source Subtype","Source ID");

          COMMIT;
        END;
      END;
    END;

    PROCEDURE ReOpenPostedReceive@38(VAR CurrentPostedReceive@1240030000 : Record 14000603);
    BEGIN
      WITH CurrentPostedReceive DO BEGIN
        TESTFIELD(Closed);

        Closed := FALSE;
        MODIFY;
        COMMIT;
      END;
    END;

    PROCEDURE PrintReceivePackingList@21(CurrentReceive@1240030000 : Record 14000601;GiveError@1240030001 : Boolean);
    BEGIN
      GetReceiveSetup;

      IF ReceiveSetup."Close Receive Report ID" <> 0 THEN BEGIN
        CurrentReceive.SETRECFILTER;
        REPORT.RUNMODAL(ReceiveSetup."Close Receive Report ID",FALSE,TRUE,CurrentReceive);
      END;
    END;

    PROCEDURE PrintSalesHeaderPackingList@14(SalesHeader@1240030000 : Record 36;GiveError@1240030001 : Boolean);
    BEGIN
      GetReceiveSetup;

      IF ReceiveSetup."Close Sales Report ID" <> 0 THEN BEGIN
        SalesHeader.RESET;
        SalesHeader.SETRECFILTER;
        REPORT.RUNMODAL(ReceiveSetup."Close Sales Report ID",FALSE,TRUE,SalesHeader);
      END;
    END;

    PROCEDURE PrintPurchHeaderPackingList@26(PurchHeader@1240030000 : Record 38;GiveError@1240030001 : Boolean);
    BEGIN
      GetReceiveSetup;

      IF ReceiveSetup."Close Purchase Report ID" <> 0 THEN BEGIN
        PurchHeader.RESET;
        PurchHeader.SETRECFILTER;
        REPORT.RUNMODAL(ReceiveSetup."Close Purchase Report ID",FALSE,TRUE,PurchHeader);
      END;
    END;

    PROCEDURE PrintTransferHeaderPackingList@1240030008(TransferHeader@1240030000 : Record 5740;GiveError@1240030001 : Boolean);
    BEGIN
      GetReceiveSetup;

      IF ReceiveSetup."Close Transfer Report ID" <> 0 THEN BEGIN
        TransferHeader.RESET;
        TransferHeader.SETRECFILTER;
        REPORT.RUNMODAL(ReceiveSetup."Close Transfer Report ID",FALSE,TRUE,TransferHeader);
      END;
    END;

    LOCAL PROCEDURE GetReceiveStation@51();
    BEGIN
      IF ReceiveStation.Code = '' THEN
        ReceiveStation.GetReceiveStation;
    END;

    LOCAL PROCEDURE GetReceiveSetup@50();
    VAR
      PurchSetup@1240030000 : Record 312;
    BEGIN
      IF NOT ReceiveSetupRetrieved THEN BEGIN
        ReceiveSetup.GET;
        ReceiveSetupRetrieved := TRUE;

        PurchSetup.GET;
        PurchSetup.TESTFIELD("Enable Receive");
      END;
    END;

    LOCAL PROCEDURE GetShippingAgent@10(ShippingAgentCode@1240030000 : Code[10]);
    BEGIN
      IF (ShippingAgent.Code <> ShippingAgentCode) OR (ShippingAgentCode = '') THEN BEGIN
        GetReceiveSetup;
        IF (ShippingAgentCode <> '') OR ReceiveSetup."Shipping Agent Required" THEN
          ShippingAgent.GET(ShippingAgentCode)
        ELSE
          CLEAR(ShippingAgent);
      END;
    END;

    PROCEDURE CombineMultiOrders@42(SourceType@1240030000 : Integer;SourceSubtype@1240030001 : Integer;OrderNo1@1240030002 : Code[20];OrderNo2@1240030003 : Code[20];VAR MultiDocNo@1240030004 : Code[250];VAR MultiDoc@1240030005 : Boolean);
    VAR
      SalesHeader@1240030006 : Record 36;
      PurchHeader@1240030007 : Record 38;
      TransferHeader@1240030009 : Record 5740;
      ReceiveControl@1240030008 : Record 14000611;
    BEGIN
      GetReceiveSetup;
      GetReceiveStation;
      MultiDocReceiveMgt.CombineMultiPurchOrders(
        ReceiveStation,ReceiveSetup,SourceType,SourceSubtype,OrderNo1,OrderNo2,MultiDocNo,MultiDoc);

      IF MultiDoc THEN BEGIN
        CASE SourceType OF
          DATABASE::"Sales Header":
            BEGIN
              SalesHeader.RESET;
              SalesHeader.SETRANGE("Document Type",SourceSubtype);
              SalesHeader.SETFILTER("No.",MultiDocNo);
              IF SalesHeader.FIND('-') THEN
                REPEAT
                  CreateShipChargeSalesHeader(SalesHeader);
                UNTIL SalesHeader.NEXT = 0;
            END;
          DATABASE::"Purchase Header":
            BEGIN
              PurchHeader.RESET;
              PurchHeader.SETRANGE("Document Type",SourceSubtype);
              PurchHeader.SETFILTER("No.",MultiDocNo);
              IF PurchHeader.FIND('-') THEN
                REPEAT
                  CreateShipChargePurchHeader(PurchHeader);
                UNTIL PurchHeader.NEXT = 0;
            END;
          DATABASE::"Transfer Header":
            BEGIN
              TransferHeader.RESET;
              TransferHeader.SETFILTER("No.",MultiDocNo);
              IF TransferHeader.FIND('-') THEN
                REPEAT
                  CreateShipChargeTransferHeader(TransferHeader);
                UNTIL TransferHeader.NEXT = 0;
            END;
          ELSE
            ReceiveControl.ErrorUnknownSourceType(SourceType,SourceSubtype,OrderNo1);
        END;
      END;
    END;

    PROCEDURE EnterExternalTrackingNo@47(VAR CurrentReceive@1240030000 : Record 14000601;AlwaysOpenWindow@1240030001 : Boolean);
    VAR
      Receive@1240030002 : Record 14000601;
      EnterExternalTrackingNoForm@1240030003 : Page 14000614;
    BEGIN
      WITH CurrentReceive DO BEGIN
        IF ("External Tracking No." = '') OR AlwaysOpenWindow THEN BEGIN
          Receive := CurrentReceive;
          CLEAR(EnterExternalTrackingNoForm);
          EnterExternalTrackingNoForm.SetReceive(Receive);
          IF EnterExternalTrackingNoForm.RUNMODAL = ACTION::OK THEN BEGIN
          EnterExternalTrackingNoForm.GetReceive(Receive);
          IF "External Tracking No." <> Receive."External Tracking No." THEN
            VALIDATE("External Tracking No.",Receive."External Tracking No.");
        END;
      END;
      END;
    END;

    PROCEDURE GetItemLabelInfo@54(CurrentReceive@1240030000 : Record 14000601;VAR ItemLabelInfo@1240030001 : ARRAY [10,8] OF Text[50]);
    VAR
      ReceiveLine@1240030002 : Record 14000602;
      PostedReceiveLine@1240030003 : Record 14000604;
      LineCounter@1240030004 : Integer;
    BEGIN
      WITH CurrentReceive DO BEGIN
        CLEAR(ItemLabelInfo);
        LineCounter := 0;
        ReceiveLine.RESET;
        ReceiveLine.SETRANGE("Receive No.","No.");
        IF ReceiveLine.FIND('-') THEN BEGIN
          REPEAT
            LineCounter := LineCounter + 1;
            ItemLabelInfo[LineCounter,1] := FORMAT(ReceiveLine.Type);
            ItemLabelInfo[LineCounter,2] := ReceiveLine."No.";
            ItemLabelInfo[LineCounter,3] := ReceiveLine."Variant Code";
            ItemLabelInfo[LineCounter,4] := ReceiveLine.Description;
            ItemLabelInfo[LineCounter,5] := ReceiveLine."Unit of Measure Code";
            ItemLabelInfo[LineCounter,6] := FORMAT(ReceiveLine.Quantity);
            ItemLabelInfo[LineCounter,7] := FORMAT(ReceiveLine."Quantity (Base)");
            ItemLabelInfo[LineCounter,8] := FORMAT(ReceiveLine."Line No.");
          UNTIL (ReceiveLine.NEXT = 0) OR (LineCounter >= ARRAYLEN(ItemLabelInfo,1));
        END ELSE BEGIN
          PostedReceiveLine.RESET;
          PostedReceiveLine.SETRANGE("Receive No.","No.");
          IF PostedReceiveLine.FIND('-') THEN
            REPEAT
              LineCounter := LineCounter + 1;
              ItemLabelInfo[LineCounter,1] := FORMAT(PostedReceiveLine.Type);
              ItemLabelInfo[LineCounter,2] := PostedReceiveLine."No.";
              ItemLabelInfo[LineCounter,3] := PostedReceiveLine."Variant Code";
              ItemLabelInfo[LineCounter,4] := PostedReceiveLine.Description;
              ItemLabelInfo[LineCounter,5] := PostedReceiveLine."Unit of Measure Code";
              ItemLabelInfo[LineCounter,6] := FORMAT(PostedReceiveLine.Quantity);
              ItemLabelInfo[LineCounter,7] := FORMAT(PostedReceiveLine."Quantity (Base)");
              ItemLabelInfo[LineCounter,8] := FORMAT(PostedReceiveLine."Line No.");
            UNTIL (PostedReceiveLine.NEXT = 0) OR (LineCounter >= ARRAYLEN(ItemLabelInfo,1));
        END;
      END;
    END;

    PROCEDURE DirectPrintOrionLabelInfo@58(VAR LabelFile@1240030000 : File;ItemLabelInfo@1240030001 : ARRAY [10,8] OF Text[50]);
    BEGIN
      IF ItemLabelInfo[1,8] <> '' THEN BEGIN
        LabelFile.WRITE('A50,1300,0,3,1,1,N,"Item No."');
        LabelFile.WRITE('A250,1300,0,3,1,1,N,"Description"');
        LabelFile.WRITE('A550,1300,0,3,1,1,N,"UOM"');
        LabelFile.WRITE('A650,1300,0,3,1,1,N,"Qty."');
        LabelFile.WRITE(STRSUBSTNO('A50,1340,0,2,1,1,N,"%1"',ItemLabelInfo[1,2]));
        LabelFile.WRITE(STRSUBSTNO('A250,1340,0,2,1,1,N,"%1"',FORMAT(ItemLabelInfo[1,4],24)));
        LabelFile.WRITE(STRSUBSTNO('A550,1340,0,2,1,1,N,"%1"',ItemLabelInfo[1,5]));
        LabelFile.WRITE(STRSUBSTNO('A650,1340,0,2,1,1,N,"%1"',ItemLabelInfo[1,6]));
        LabelFile.WRITE(STRSUBSTNO('A50,1370,0,2,1,1,N,"%1"',ItemLabelInfo[2,2]));
        LabelFile.WRITE(STRSUBSTNO('A250,1370,0,2,1,1,N,"%1"',FORMAT(ItemLabelInfo[2,4],24)));
        LabelFile.WRITE(STRSUBSTNO('A550,1370,0,2,1,1,N,"%1"',ItemLabelInfo[2,5]));
        LabelFile.WRITE(STRSUBSTNO('A650,1370,0,2,1,1,N,"%1"',ItemLabelInfo[2,6]));
        LabelFile.WRITE(STRSUBSTNO('A50,1400,0,2,1,1,N,"%1"',ItemLabelInfo[3,2]));
        LabelFile.WRITE(STRSUBSTNO('A250,1400,0,2,1,1,N,"%1"',FORMAT(ItemLabelInfo[3,4],24)));
        LabelFile.WRITE(STRSUBSTNO('A550,1400,0,2,1,1,N,"%1"',ItemLabelInfo[3,5]));
        LabelFile.WRITE(STRSUBSTNO('A650,1400,0,2,1,1,N,"%1"',ItemLabelInfo[3,6]));
        LabelFile.WRITE(STRSUBSTNO('A50,1430,0,2,1,1,N,"%1"',ItemLabelInfo[4,2]));
        LabelFile.WRITE(STRSUBSTNO('A250,1430,0,2,1,1,N,"%1"',FORMAT(ItemLabelInfo[4,4],24)));
        LabelFile.WRITE(STRSUBSTNO('A550,1430,0,2,1,1,N,"%1"',ItemLabelInfo[4,5]));
        LabelFile.WRITE(STRSUBSTNO('A650,1430,0,2,1,1,N,"%1"',ItemLabelInfo[4,6]));
        LabelFile.WRITE(STRSUBSTNO('A50,1460,0,2,1,1,N,"%1"',ItemLabelInfo[5,2]));
        LabelFile.WRITE(STRSUBSTNO('A250,1460,0,2,1,1,N,"%1"',FORMAT(ItemLabelInfo[5,4],24)));
        LabelFile.WRITE(STRSUBSTNO('A550,1460,0,2,1,1,N,"%1"',ItemLabelInfo[5,5]));
        LabelFile.WRITE(STRSUBSTNO('A650,1460,0,2,1,1,N,"%1"',ItemLabelInfo[5,6]));
        LabelFile.WRITE(STRSUBSTNO('A50,1490,0,2,1,1,N,"%1"',ItemLabelInfo[6,2]));
        LabelFile.WRITE(STRSUBSTNO('A250,1490,0,2,1,1,N,"%1"',FORMAT(ItemLabelInfo[6,4],24)));
        LabelFile.WRITE(STRSUBSTNO('A550,1490,0,2,1,1,N,"%1"',ItemLabelInfo[6,5]));
        LabelFile.WRITE(STRSUBSTNO('A650,1490,0,2,1,1,N,"%1"',ItemLabelInfo[6,6]));
        IF ItemLabelInfo[7,8] <> '' THEN
          LabelFile.WRITE('A50,1540,0,3,2,2,N,"MORE ITEMS IN RECEIVE"');
      END;
    END;

    PROCEDURE DirectPrintZebraLabelInfo@55(VAR LabelFile@1240030000 : File;ItemLabelInfo@1240030001 : ARRAY [10,8] OF Text[50]);
    BEGIN
      IF ItemLabelInfo[1,8] <> '' THEN BEGIN
        LabelFile.WRITE('^FO50,1300^A0,N,29,29^FDItem No.%1^FS');
        LabelFile.WRITE('^FO250,1300^A0,N,29,29^FDDescription%1^FS');
        LabelFile.WRITE('^FO550,1300^A0,N,29,29^FDUOM^FS');
        LabelFile.WRITE('^FO650,1300^A0,N,29,29^FDQty.^FS');
        LabelFile.WRITE(STRSUBSTNO('^FO50,1340^A0,N,29,29^FD%1^FS',ItemLabelInfo[1,2]));
        LabelFile.WRITE(STRSUBSTNO('^FO250,1340^A0,N,29,29^FD%1^FS',FORMAT(ItemLabelInfo[1,4],24)));
        LabelFile.WRITE(STRSUBSTNO('^FO550,1340^A0,N,29,29^FD%1^FS',ItemLabelInfo[1,5]));
        LabelFile.WRITE(STRSUBSTNO('^FO650,1340^A0,N,29,29^FD%1^FS',ItemLabelInfo[1,6]));
        LabelFile.WRITE(STRSUBSTNO('^FO50,1370^A0,N,29,29^FD%1^FS',ItemLabelInfo[2,2]));
        LabelFile.WRITE(STRSUBSTNO('^FO250,1370^A0,N,29,29^FD%1^FS',FORMAT(ItemLabelInfo[2,4],24)));
        LabelFile.WRITE(STRSUBSTNO('^FO550,1370^A0,N,29,29^FD%1^FS',ItemLabelInfo[2,5]));
        LabelFile.WRITE(STRSUBSTNO('^FO650,1370^A0,N,29,29^FD%1^FS',ItemLabelInfo[2,6]));
        LabelFile.WRITE(STRSUBSTNO('^FO50,1400^A0,N,29,29^FD%1^FS',ItemLabelInfo[3,2]));
        LabelFile.WRITE(STRSUBSTNO('^FO250,1400^A0,N,29,29^FD%1^FS',FORMAT(ItemLabelInfo[3,4],24)));
        LabelFile.WRITE(STRSUBSTNO('^FO550,1400^A0,N,29,29^FD%1^FS',ItemLabelInfo[3,5]));
        LabelFile.WRITE(STRSUBSTNO('^FO650,1400^A0,N,29,29^FD%1^FS',ItemLabelInfo[3,6]));
        LabelFile.WRITE(STRSUBSTNO('^FO50,1430^A0,N,29,29^FD%1^FS',ItemLabelInfo[4,2]));
        LabelFile.WRITE(STRSUBSTNO('^FO250,1430^A0,N,29,29^FD%1^FS',FORMAT(ItemLabelInfo[4,4],24)));
        LabelFile.WRITE(STRSUBSTNO('^FO550,1430^A0,N,29,29^FD%1^FS',ItemLabelInfo[4,5]));
        LabelFile.WRITE(STRSUBSTNO('^FO650,1430^A0,N,29,29^FD%1^FS',ItemLabelInfo[4,6]));
        LabelFile.WRITE(STRSUBSTNO('^FO50,1460^A0,N,29,29^FD%1^FS',ItemLabelInfo[5,2]));
        LabelFile.WRITE(STRSUBSTNO('^FO250,1460^A0,N,29,29^FD%1^FS',FORMAT(ItemLabelInfo[5,4],24)));
        LabelFile.WRITE(STRSUBSTNO('^FO550,1460^A0,N,29,29^FD%1^FS',ItemLabelInfo[5,5]));
        LabelFile.WRITE(STRSUBSTNO('^FO650,1460^A0,N,29,29^FD%1^FS',ItemLabelInfo[5,6]));
        LabelFile.WRITE(STRSUBSTNO('^FO50,1490^A0,N,29,29^FD%1^FS',ItemLabelInfo[6,2]));
        LabelFile.WRITE(STRSUBSTNO('^FO250,1490^A0,N,29,29^FD%1^FS',FORMAT(ItemLabelInfo[6,4],24)));
        LabelFile.WRITE(STRSUBSTNO('^FO550,1490^A0,N,29,29^FD%1^FS',ItemLabelInfo[6,5]));
        LabelFile.WRITE(STRSUBSTNO('^FO650,1490^A0,N,29,29^FD%1^FS',ItemLabelInfo[6,6]));
        IF ItemLabelInfo[7,8] <> '' THEN
          LabelFile.WRITE('^FO50,1540^A0,N,58,58^FDMORE ITEMS IN RECEIVE^FS');
      END;
    END;

    PROCEDURE ChangeReceiveStationLocation@1000000005(SourceType@1000000000 : Integer;SourceSubtype@1000000001 : Integer;SourceID@1000000002 : Code[20]);
    VAR
      PurchLine@1000000003 : Record 39;
      WhseEmployee@1000000004 : Record 7301;
      Location@1000000005 : Record 14;
      SalesLine@1000000006 : Record 37;
    BEGIN
      //</TPZ1430> - Allow one user with multiple warehouse employee setup to post shipment for multiple location from
      //                   Sales Order form.
      CASE SourceType OF
        DATABASE::"Purchase Header": BEGIN
            PurchLine.RESET;
            PurchLine.SETRANGE("Document Type",SourceSubtype);
            PurchLine.SETRANGE("Document No.",SourceID);
            PurchLine.SETFILTER("Qty. to Receive",'<>0');
            IF PurchLine.FIND('-') THEN BEGIN
              Location.GET(PurchLine."Location Code");
              //IF Location."Enable E-Receive" THEN
                IF PurchLine."Location Code" <> ReceiveStation."Location Code" THEN BEGIN
                  //WhseEmployee.SETRANGE("User ID", USERID);
                  //WhseEmployee.SETRANGE("Location Code", PurchLine."Location Code");
                  //IF WhseEmployee.ISEMPTY THEN
                  //  ERROR(Text012, ReceiveStation."Location Code",ReceiveSetup.FIELDNAME("Location Receiving"));
                  ReceiveStation."Location Code" := PurchLine."Location Code";
                END;
            END;
          END;
        DATABASE::"Sales Header": BEGIN
            SalesLine.RESET;
            SalesLine.SETRANGE("Document Type", SourceSubtype);
            SalesLine.SETRANGE("Document No.", SourceID);

            IF SourceSubtype = SalesLine."Document Type"::"Return Order" THEN
              SalesLine.SETFILTER("Return Qty. to Receive", '<>0')
            ELSE
              SalesLine.SETFILTER("Outstanding Quantity", '<>0');

            IF SalesLine.FIND('-') THEN BEGIN
              Location.GET(SalesLine."Location Code");
              //IF Location."Enable E-Receive" THEN
                IF SalesLine."Location Code" <> ReceiveStation."Location Code" THEN BEGIN
                  //WhseEmployee.SETRANGE("User ID", USERID);
                  //WhseEmployee.SETRANGE("Location Code", SalesLine."Location Code");
                  //IF WhseEmployee.ISEMPTY THEN
                  //  ERROR(Text012, ReceiveStation."Location Code",ReceiveSetup.FIELDNAME("Location Receiving"));
                  ReceiveStation."Location Code" := SalesLine."Location Code";
                END;
            END;
          END;
        ELSE ERROR('Source Type %1 not supported', SourceType);
      END;
      //</TPZ1430>
    END;

    BEGIN
    {
      TPZ1592 TM 2016-06-01
        Allow E-Receive location users to post receive of non-wms location PO/Transfer/SRT.
      TPZ9756_TPZ9862 - WhatAbountPostedReceiveLine?!
        Made this change permanent due to the second instance of support ticket
    }
    END.
  }
}

