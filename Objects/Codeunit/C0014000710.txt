OBJECT Codeunit 14000710 Pack Line Scanning Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=01/04/21;
    Time=10:54:34 AM;
    Modified=Yes;
    Version List=SE0.60.03,TPZ2554,VSO2524,001,TPZ3011;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Package@1240030027 : Record 14000701;
      ShippingSetup@1240030026 : Record 14000707;
      PackingStation@1240030025 : Record 14000709;
      ScaleInterface@1240030024 : Record 14000746;
      ShippingAgent@1240030023 : Record 291;
      SalesSetup@1240030022 : Record 311;
      PackingControl@1240030021 : Record 14000717;
      BillOfLading@1240030020 : Record 14000822;
      ItemCrossReference@1240030018 : Record 5717;
      Shipping@1240030017 : Codeunit 14000701;
      PackageMgt@1240030016 : Codeunit 14000702;
      ScalesComm@1240030015 : Codeunit 37031002;
      WhsePickAndPackingMgt@1240030014 : Codeunit 14000704;
      InputLine@1240030011 : Text[250];
      Text001@1240030074 : TextConst 'ENU=%1 do not exists.';
      Text002@1240030073 : TextConst 'ENU=Type //HELP to see all options, use F6 for lookup';
      Text003@1240030072 : TextConst 'ENU=" (Location: "';
      Text004@1240030071 : TextConst 'ENU=%1 is not released or do not exist any longer.';
      Text005@1240030070 : TextConst 'ENU=Unknown command %1.';
      Text006@1240030069 : TextConst 'ENU=No document found.';
      Text007@1240030068 : TextConst 'ENU=Item not found';
      Text008@1240030067 : TextConst 'ENU=%1 not found on order';
      Text009@1240030066 : TextConst 'ENU=%1 must be 0, requires code for Custom.';
      Text010@1240030065 : TextConst 'ENU=Create Item Conversion,Create Resource Conversion';
      Text011@1240030064 : TextConst 'ENU=Do you want to create an Item Cross Reference for %1?';
      Text012@1240030063 : TextConst 'ENU=Duplicate Serial Number on %1 package %2 is packed but not shipped.';
      Text014@1240030061 : TextConst 'ENU=Required Serial No. not entered.';
      Text015@1240030060 : TextConst 'ENU=Not a valid Serial No.';
      Text017@1240030058 : TextConst 'ENU=Required Lot No. not entered.';
      Text018@1240030057 : TextConst 'ENU=Not a valid Lot No.';
      Text021@1240030054 : TextConst 'ENU=Required Warranty Date not entered.';
      Text023@1240030052 : TextConst 'ENU=Required Expiration Date not entered.';
      Text024@1240030051 : TextConst 'ENU=%1 has no External Document No.';
      Text025@1240030050 : TextConst 'ENU=%1 is not released.';
      Text031@1240030049 : TextConst 'ENU=Open';
      Text032@1240030048 : TextConst 'ENU=Closed';
      Text033@1240030047 : TextConst 'ENU=" (Prepack)"';
      Text034@1240030046 : TextConst 'ENU="Order: "';
      Text035@1240030045 : TextConst 'ENU="Package: "';
      Text036@1240030044 : TextConst 'ENU=Command Not Allowed';
      Text037@1240030043 : TextConst 'ENU=Package Still Open';
      Text038@1240030042 : TextConst 'ENU=No Open Package';
      Text039@1240030041 : TextConst 'ENU=No Order Open';
      Text040@1240030040 : TextConst 'ENU=Order Open';
      Text042@1240030038 : TextConst 'ENU=Type %1 not handled.';
      Text043@1240030037 : TextConst 'ENU=No Item or Resource currently selected.';
      Text044@1240030036 : TextConst 'ENU=Only Item and Resource can be shown.';
      Text045@1240030035 : TextConst 'ENU=No Warehpuse Package Lines found for %1.';
      Text046@1240030034 : TextConst 'ENU=Document is not released, Continue?';
      Text047@1240030033 : TextConst 'ENU=%1 contains multiple documents.';
      Text048@1240030032 : TextConst 'ENU="%1 %2 is not unique. "';
      Text050@1240030030 : TextConst 'ENU=Nothing to ship.';
      Text051@1240030029 : TextConst 'ENU=Unknown command %1 translated from %2.';
      CurrFormClose@1240030075 : Boolean;
      CurrFormScaleWeightUpdate@1240030076 : Boolean;
      Text053@1240030000 : TextConst 'ENU=Custom Code missing.';
      Text054@1240030001 : TextConst 'ENU=Quantity of %1 %2 is not sufficient.';
      Text013@1001 : TextConst 'ENU=No Wave Pick Bin selected.';
      Text016@1002 : TextConst 'ENU=No Activities found.';
      Text019@1003 : TextConst 'ENU=No Warehouse Activity Line Selected.';
      Text020@1004 : TextConst 'ENU=Not a valid document type %1 %2 %3';
      Text022@1005 : TextConst 'ENU=No Wave Pick Bin selected.';
      Text026@1006 : TextConst 'ENU=No Activities found.';
      Text027@1007 : TextConst 'ENU=No Warehouse Activity Line Selected.';
      Text028@1008 : TextConst 'ENU=Not a valid document type %1 %2 %3';
      LicensePlateHeader@1000000000 : Record 23044505;

    PROCEDURE SetValues@1240030007(CurrentPackingControl@1240030000 : Record 14000717;CurrentShippingSetup@1240030004 : Record 14000707;CurrentPackingStation@1240030003 : Record 14000709;CurrentPackage@1240030001 : Record 14000701);
    BEGIN
      PackingControl := CurrentPackingControl;
      ShippingSetup := CurrentShippingSetup;
      PackingStation := CurrentPackingStation;
      Package := CurrentPackage;

      CurrFormClose := FALSE;
      CurrFormScaleWeightUpdate := FALSE;
    END;

    PROCEDURE GetValues@1240030006(VAR NewPackingControl@1240030010 : Record 14000717;VAR NewShippingSetup@1240030009 : Record 14000707;VAR NewPackingStation@1240030008 : Record 14000709;VAR NewPackage@1240030007 : Record 14000701;VAR NewCurrFormClose@1240030005 : Boolean;VAR NewCurrFormScaleWeightUpdate@1240030004 : Boolean);
    BEGIN
      NewPackingControl := PackingControl;
      NewShippingSetup := ShippingSetup;
      NewPackingStation := PackingStation;
      NewPackage := Package;

      NewCurrFormClose := NewCurrFormClose;
      NewCurrFormScaleWeightUpdate := NewCurrFormScaleWeightUpdate;
    END;

    PROCEDURE OnOpenFormCode@1240030000();
    BEGIN
      SalesSetup.GET;
      ShippingSetup.GET;
      PackingStation.GetPackingStation;
      PackageMgt.Initialize(PackingStation,ShippingSetup);

      IF PackingStation."Scale Interface Code" <> '' THEN
        ScaleInterface.GET(PackingStation."Scale Interface Code");
      IF (PackingStation."Scale Update Interval (second)" <> 0) AND
         (PackingStation."Show What During Packing" =
          PackingStation."Show What During Packing"::"Scale Weight")
      THEN
        UpdateScaleWeight;
      PackingControl.INIT;
      PackingControl."Display Caption" := FORMAT(PackingStation."Show What During Packing");
      PackingControl.Prepack := PackingStation."Open with Prepack";

      IF (PackingControl."Open Source Type" <> 0) AND (PackingControl."Open Source ID" <> '') THEN BEGIN
        PackingControl."Source Type" := PackingControl."Open Source Type";
        PackingControl."Source Subtype" := PackingControl."Open Source Subtype";
        IF NOT GetHeader(PackingControl."Open Source ID") THEN
          ERROR(
            Text001,
            PackingControl.FormatSource(
              PackingControl."Open Source Type",PackingControl."Open Source Subtype",
              PackingControl."Open Source ID"));

        IF NOT OpenOrder THEN
          IF PackingStation."Confirm on Errors" THEN
            CurrFormClose := TRUE
          ELSE
            ERROR(PackingControl."Message Line");

        FormatMessage;

        UpdateOrderValues;
      END ELSE
        PackingControl."Message Line" := Text002;

      IF ShippingSetup."Location Packing" THEN
        PackingControl."Message Line" :=
          PackingControl."Message Line" + Text003 + PackingStation."Location Code" + ')';
    END;

    PROCEDURE UpdateSetup@1240030011();
    BEGIN
      SalesSetup.GET;
      ShippingSetup.GET;
      CLEAR(PackingStation);
      PackingStation.GetPackingStation;
      CLEAR(PackageMgt);
      PackageMgt.Initialize(PackingStation,ShippingSetup);

      IF PackingStation."Scale Interface Code" <> '' THEN
        ScaleInterface.GET(PackingStation."Scale Interface Code");

      PackingControl.INIT;
      PackingControl."Display Caption" := FORMAT(PackingStation."Show What During Packing");
      PackingControl.Prepack := PackingStation."Open with Prepack";
    END;

    PROCEDURE ParseInput@1(VAR CurrentInputLine@1000000000 : Text[250]);
    VAR
      Package2@1240030000 : Record 14000701;
      CommandTranslation@1240030004 : Record 14000727;
      SourceType@1240030001 : Integer;
      SourceSubtype@1240030002 : Integer;
      SourceID@1240030003 : Code[20];
      CommandInputLine@1240030005 : Text[250];
      SalesHeader@1000000001 : Record 36;
    BEGIN
      PackingControl."Message Line" := '';

      //>>001 TPZ2988
      CheckSalesLineQuantityPack(CurrentInputLine);
      //<<001 TPZ2988

      IF PackingControl."Package Open" THEN BEGIN
        IF Package.GET(Package."No.") THEN
          PackingControl."Package Open" := NOT Package.Closed
        ELSE
          PackingControl."Package Open" := FALSE;

        IF NOT PackingControl."Package Open" THEN BEGIN
          Package.ClearTotalValueFields;
          Package.TotalNetWeight;
        END;
      END;

      IF PackingControl."Order Open" THEN
        IF NOT PackingControl.TestReleased2(FALSE) THEN BEGIN
          SetMessage(
            STRSUBSTNO(
              Text004,PackingControl.FormatSource2));

          PackingControl.ClearOrderInfo;

          EXIT;
        END;

      CommandInputLine := UPPERCASE(CurrentInputLine);
      IF STRLEN(CurrentInputLine) > 2 THEN
        IF (COPYSTR(UPPERCASE(CurrentInputLine),1,2) = '//') AND
           (COPYSTR(UPPERCASE(CurrentInputLine),1,3) <> '//X')
        THEN BEGIN
          CommandTranslation.RESET;
          CommandTranslation.SETRANGE("Language ID",GLOBALLANGUAGE);
          CommandTranslation.SETRANGE(
            "Command Code",
            COPYSTR(UPPERCASE(CurrentInputLine),1,MAXSTRLEN(CommandTranslation."Command Code")));
          IF CommandTranslation.FIND('-') THEN BEGIN
            CommandTranslation.TESTFIELD("Replace Command Code");
            CommandInputLine := CommandTranslation."Replace Command Code";
          END;
        END;

      CASE COPYSTR(CommandInputLine,1,40) OF
        '//CSO','//CO':
          IF TestLegal(PackingStation."Close Order Command") THEN
            CloseOrder(FALSE,FALSE,FALSE);
        '//CSOP','//COP':
          IF TestLegal(PackingStation."Close Order Print Command") THEN BEGIN
            //<TPZ1943>
            IF COPYSTR(CommandInputLine,1,40) = '//COP' THEN
              CheckSalesLineQuantity(Package."Source Type",Package."Source Subtype",Package."Source ID",Package."No.");
            //</TPZ1943>
            CloseOrder(TRUE,FALSE,FALSE);
          END;
        '//CSOF','//COF':
          IF TestLegal(PackingStation."Close Order Force Command") THEN
            CloseOrder(FALSE,TRUE,FALSE);
        '//CSOPF','//COPF','//CSOFP','//COFP':
          IF TestLegal(PackingStation."Close Order Print Force Cmd.") THEN
            CloseOrder(TRUE,TRUE,FALSE);
        '//FCSO','//FCO':
          IF TestLegal(PackingStation."Future Close Order Command") THEN
            CloseOrder(FALSE,FALSE,TRUE);
        '//FCSOF','//FCOF':
          IF TestLegal(PackingStation."Future Close Order Force Cmd.") THEN
            CloseOrder(FALSE,TRUE,TRUE);
        '//LSO','//LO':
          IF TestLegal(PackingStation."List Orders Command") THEN
            ListOrders;
        '//RSOQ','//ROQ':
          IF TestLegal(PackingStation."Reset Order Quantity Command") THEN
            ResetOrderQuantity;
        '//SSOQ','//SOQ':
          IF TestLegal(PackingStation."Set Order Quantity Command") THEN
            SetOrderQuantity;
        '//RWP':
          IF PackingStation."Register Whse. Pick Command" THEN
            RegisterWarehousePick;
        '//VI':
          IF TestLegal(PackingStation."View Item Command") THEN
            ShowItemResource;
        '//CPP','//CCP':
          IF TestLegal(PackingStation."Close Package Print Command") THEN
            ClosePackage(TRUE,0,0,0);
        '//CP','//CC':
          IF TestLegal(PackingStation."Close Package Command") THEN
            ClosePackage(FALSE,0,0,0);
        '//CLP','//CLC':
          IF TestLegal(PackingStation."Copy Last Package Command") THEN
            CopyLastPackage(FALSE);
        '//CLL':
          IF TestLegal(PackingStation."Copy Last Label(s) Command") THEN
            CopyLastLabel;
        '//CLPP','//CLCP':
          IF TestLegal(PackingStation."Copy Last Package Print Cmd.") THEN
            CopyLastPackage(TRUE);
        '//CSA':
          IF TestLegal(PackingStation."Change Shipping Agent Command") THEN
            ChangeShippingAgent(FALSE);
        '//CSAP':
          IF TestLegal(PackingStation."Change Ship. Agent Print Cmd.") THEN
            ChangeShippingAgent(TRUE);
        '//LP','//LC':
          ListPackages;
        '//VP','//VC':
          ViewPackage;
        '//OP','//OC':
          IF TestLegal(PackingStation."Open Package Command") THEN
            OpenPackage;
        '//AP','//AC':
          IF TestLegal(PackingStation."Add Package Command") THEN
            AddPackageToPackage;
        '//AMP','//AMC':
          IF TestLegal(PackingStation."Add Multiple Packages Command") THEN
            AddMultiplePackagesToPackage;
        '//ASP','//ASC':
          IF TestLegal(PackingStation."Add Selected Packages Command") THEN
            AddSelectedPackagesToPackage;
        '//AAP','//AAC':
          IF TestLegal(PackingStation."Add All Packages Command") THEN
            AddAllPackagesToPackage;
        '//PA':
          IF TestLegal(PackingStation."Pack All Command") THEN
            CreateShipComplete;
        '//PR':
          IF TestLegal(PackingStation."Pack Remaining Command") THEN
            PackRemaining;
        '//CSP':
          IF TestLegal(PackingStation."Create Std. Packages Cmd.") THEN
            CreateStandardPackages(FALSE);
        '//CSPP':
          IF TestLegal(PackingStation."Create Std. Packages Cmd.") THEN
            CreateStandardPackages(TRUE);
        '//CEP','//CEC':
          IF TestLegal(PackingStation."Create Extra Package Command") THEN
            CreateExtraPackage;
        '//CMP','//CMC':
          IF TestLegal(PackingStation."Create Misc. Package Command") THEN
            CreateMiscPackage;
        '//VSO','//VO':
          IF TestLegal(PackingStation."View Order Command") THEN
            ViewOrder;
         '//VWS','//VWHS':
          IF TestLegal(PackingStation."View Warehouse Statistics Cmd.") THEN
            ViewWarehouseStatistics;
         '//VWSL','//VWHSL':
          IF TestLegal(PackingStation."View Whse. Shipment Lines Cmd.") THEN
            ViewWarehouseShipmentLines;
        '//VSOC','//VOC':
          IF TestLegal(PackingStation."View Order Comments Cmd.") THEN
            ViewOrderComments(FALSE);
        '//VWAL','//VWHAL':
          IF TestLegal(PackingStation."View Whse. Activity Lines Cmd.") THEN
            ViewWarehouseActivityLines(FALSE);
        //TM BEG 061615 UPG
        '//VWP','//VWHAL':
          IF TestLegal(PackingStation."View Whse. Activity Lines Cmd.") THEN
            ViewWarehousePickLines;
        //TM END 061615
        '//VIAL':
          IF TestLegal(PackingStation."View Invt. Activity Lines Cmd.") THEN
            ViewWarehouseActivityLines(TRUE);
        '//DOP','//DOC':
          DeleteOpenPackage;
        '//DAP','//DAC':
          IF TestLegal(PackingStation."Delete All Packages Command") THEN
            DeleteAllPackages;
        '//RAP','//RAC':
          IF TestLegal(PackingStation."Renumber All Packages Command") THEN
            RenumberAllPackages(FALSE,FALSE);
        '//RAPP','//RACP':
          IF TestLegal(PackingStation."Renumber All Pcks. Print Cmd.") THEN
            RenumberAllPackages(TRUE,FALSE);
        '//FML':
          IF TestLegal(PackingStation."Fedex Master Label Command") THEN
            RenumberAllPackages(FALSE,TRUE);
        '//FMLP':
          IF TestLegal(PackingStation."Fedex Master Label Print Cmd.") THEN
            RenumberAllPackages(TRUE,TRUE);
        '//RSO','//RO':
          IF TestLegal(PackingStation."Rate Shop Order Command") THEN
            RateShopOrder;
        '//RP','//RC':
          IF TestLegal(PackingStation."Rate Shop Package Command") THEN
            RateShopPackage;
        '//TPC','//TCC':
          IF TestLegal(PackingStation."Total Package Count Command") THEN
            ChangeTotalPackageCount;
        '//SMSN','//SMSLN','//SMLN','//SMS','//SMSL','//SML':
          IF TestLegal(PackingStation."Scan Missing Serial Lot Cmd.") THEN
            ScanSerialLot(FALSE);
        '//SASN','//SASLN','//SALN','//SAS','//SASL','//SAL':
          IF TestLegal(PackingStation."Scan Missing Serial Lot Cmd.") THEN
            ScanSerialLot(TRUE);
        '//PASL':
          IF TestLegal(PackingStation."Print All Shipping Labels Cmd.") THEN
            PrintAllLabels(FALSE,FALSE);
        '//PAL':
          IF TestLegal(PackingStation."Print All Labels Command") THEN
            PrintAllLabels(TRUE,FALSE);
        '//PALD':
          IF TestLegal(PackingStation."Print All labels And Docs. Cmd") THEN
            PrintAllLabels(TRUE,TRUE);
        '//PSPL':
          IF TestLegal(PackingStation."Print Std. Package Labels Cmd.") THEN
            PrintStdPackageLabel;
        '//PUL':
          IF TestLegal(PackingStation."Print UCC Labels Command") THEN
            PrintUCC128Label;
        '//PRFL':
          IF TestLegal(PackingStation."Print RF-ID Label Command") THEN
            PrintRFIDLabel;
        '//PIL','PRL','//PIRL','//PRIL':
          IF TestLegal(PackingStation."Print Item/Resource Label") THEN
            PrintItemResourceLabel;
        '//PBOLL':
          IF TestLegal(PackingStation."Print Bill of Lading Label Cmd") THEN
            PrintBOLLabel;
        '//EAL':
          IF TestLegal(PackingStation."Export All Labels") THEN
            ExportAllLabels(TRUE,TRUE);
        '//EAIL','//EARL','//EAIRL','//EARIL':
          IF TestLegal(PackingStation."Export All Item/Res. Labels") THEN
            ExportAllLabels(FALSE,TRUE);
        '//EASL':
          IF TestLegal(PackingStation."Export All Shipping Labels") THEN
            ExportAllLabels(TRUE,FALSE);
        '//VPO','//VCO':
          ShowPackageOptions;
        '//VSOO','//VOO':
          IF TestLegal(PackingStation."View Order Options Cmd.") THEN
            ShowOptionPageOrder;
        '//MSOL','//MOL':
          IF TestLegal(PackingStation."Missing Order Lines Command") THEN
            MissingOrderLines;
        '//OPW','//OPWEIGHT':
          IF TestLegal(PackingStation."Override Package Weight Cmd.") THEN
            WeightOverride;
        '//OPVOL','//OPVOLUME':
          IF TestLegal(PackingStation."Override Package Volume Cmd.") THEN
            VolumeOverride;
        '//OPVAL','//OPVALUE':
          IF TestLegal(PackingStation."Override Package Value Command") THEN
            ValueOverride;
        '//CLEAR','//CAI':
          ClearAllInfo;
        '//FPA','//FCA':
          IF TestLegal(PackingStation."Fix Package Address Command") THEN
            FixAddress;
        '//FP':
          IF TestLegal(PackingStation."Fast Pack Command") THEN
            OpenFastPack;
        '//CM':
          IF TestLegal(PackingStation."Create Manifest Command") THEN
            CreateManifest;
        '//BOL','//CBOL':
          IF TestLegal(PackingStation."Bill of Lading Command") THEN
            CreateBillOfLading;
        '//VBOL':
          IF TestLegal(PackingStation."View Bill of Lading Command") THEN
            ViewBillOfLading;
        '//ED':
          IF TestLegal(PackingStation."Export Document Command") THEN
            ExportDoc;
        '//VED':
          IF TestLegal(PackingStation."View Export Document Command") THEN
            ViewExportDoc;
        '//UEDD':
          IF TestLegal(PackingStation."Update Export Doc Detail Cmd.") THEN
            UpdateExportDocDetail;
        '//NAESR':
          IF TestLegal(PackingStation."No AES Required Command") THEN
            PackingControl."No AES Required" := TRUE;
        '//TAEQ':
          IF TestLegal(PackingStation."Toggle Always Enter Qty. Cmd.") THEN
            ToggleAlwaysEnterQuantity;
        '//MD','//MOP','//MSOP':
          IF TestLegal(PackingStation."Multi Document Command") THEN
            MultiDocPacking(FALSE);
        '//MDL','//MOPL','//MSOPL':
          IF TestLegal(PackingStation."Multi Document Lookup Cmd") THEN
            MultiDocPacking(TRUE);
        '//SP':
          IF TestLegal(PackingStation."Set Prepack Command") THEN
            SetPrepack;
        '//EWP','//EPP','//ET':
          IF TestLegal(PackingStation."Enter Tote Command") THEN
            EnterWarehousePackage;
        '//SWP','//SPP','//ST':
          IF TestLegal(PackingStation."Select Tote Command") THEN
            SelectWarehousePackage;
        '//SWPO','//SWO':
          IF TestLegal(PackingStation."Select Wave Pick Order Command") THEN
            SelectWavePickOrder;
        '//ZERO','//Z':
          IF TestLegal(PackingStation."Zero Scale Command") THEN
            PackageMgt.ZeroScale(ScaleInterface);
        //TM BEG 082715
        '//GW':
            TestScale;
        //TM END 082715
        '//HELP':
          ShowHelp;
        '//MM':
          IF TestLegal(PackingStation."Main Menu Command") THEN
            OpenMainMenu;
        '//PS':
          PackingStatus;
        '//FXBOL':
          IF TestLegal(PackingStation."Create FedEx Freight BOL") THEN
            CreateFedExFreightBillOfLading(BillOfLading);
        '//FXPAL':
          IF TestLegal(PackingStation."FedEx Freight Palletized") THEN
            SetFedExFreightPalletized(BillOfLading);
        ELSE BEGIN
          IF COPYSTR(CommandInputLine,1,3) = '//X' THEN BEGIN
            IF TestLegal(PackingStation."Xtra Option Command") THEN BEGIN
              PackingControl."Processing Multiple Commands" := FALSE;
              SetStandardOption(COPYSTR(CommandInputLine,4,20));
            END;
            EXIT;
          END;

          IF COPYSTR(CommandInputLine,1,2) = '//' THEN BEGIN
            IF CommandInputLine <> CurrentInputLine THEN
              SetMessage(STRSUBSTNO(Text051,CommandInputLine,CurrentInputLine))
            ELSE
              SetMessage(STRSUBSTNO(Text005,CommandInputLine));
            EXIT;
          END;

          IF NOT PackingControl."Order Open" THEN BEGIN
            IF NOT GetHeader(CurrentInputLine) THEN BEGIN
              Package2."No." := PackageMgt.GetPackageNo(CurrentInputLine);
              IF Package2."No." <> '' THEN BEGIN
                Package2.GET(Package2."No.");
                IF Package2."Multi Document Package" AND (Package2."Source ID" = '') THEN BEGIN
                  Package2.RESET;
                  Package2.SETCURRENTKEY("Original Package No.");
                  Package2.SETRANGE("Original Package No.",Package2."No.");
                  IF NOT Package2.FIND('-') THEN
                    ;
                END;
                CurrentInputLine := Package2."Source ID";
                GetHeader(CurrentInputLine);
              END ELSE
                IF WhsePickAndPackingMgt.GetSalesOrderNo(
                     CurrentInputLine,SourceType,SourceSubtype,SourceID)
                THEN BEGIN
                  PackingControl."Source Type" := SourceType;
                  PackingControl."Source Subtype" := SourceSubtype;
                  PackingControl."Source ID" := SourceID;
                  CurrentInputLine := SourceID;
                  GetHeader(CurrentInputLine);
                END;
            END;

            IF PackingControl."Source ID" <> '' THEN BEGIN
              IF NOT OpenOrder THEN
                EXIT;

              FormatMessage;
            END ELSE BEGIN
              SetMessage(Text006);

              ClearAllInfo;
            END;
          END ELSE BEGIN
            FormatMessage;

            IF NOT ParseItemInput(CurrentInputLine) THEN BEGIN
              SetMessage(Text007);
              CurrentInputLine := '';

              ClearInputFields;
              UpdateOrderValues;

              EXIT;
            END;

            CASE PackingControl."Input Type" OF
              PackingControl."Input Type"::"Receive Details":
                IF NOT CreateLinesFromPostedReceive(CurrentInputLine) THEN
                  EXIT;
              PackingControl."Input Type"::"Package Details":
                IF NOT CreateLinesFromPostedPackage(CurrentInputLine) THEN
                  EXIT;
              ELSE BEGIN
                IF NOT PackingControl.GetLineInfo THEN BEGIN
                  IF PackingControl."Input Variant Code" <> '' THEN
                    SetMessage(
                      STRSUBSTNO(
                        Text008,
                        STRSUBSTNO(
                          '%1 %2 %3',PackingControl."Input Type",PackingControl."Input No.",
                          PackingControl."Input Variant Code")))
                  ELSE
                    SetMessage(
                      STRSUBSTNO(
                        Text008,
                        STRSUBSTNO('%1 %2',PackingControl."Input Type",PackingControl."Input No.")));
                  CurrentInputLine := '';

                  ClearInputFields;
                  UpdateOrderValues;

                  EXIT;
                END;

                IF NOT EnterSerialLotNo THEN BEGIN
                  UpdateOrderValues;

                  EXIT;
                END;

                IF NOT PackingControl."Package Open" THEN BEGIN
                  CreatePackage;
                  COMMIT;
                END;
                CreatePackageLine;
              END;
            END;
          END;
        END;
      END;

      IF PackingControl."Order Open" THEN
        UpdateOrderValues
      ELSE
        IF PackingControl."Close When Close Order" THEN
          CurrFormClose := TRUE
        ELSE
          PackingControl.ClearOrderInfo;
    END;

    LOCAL PROCEDURE ParseItemInput@10(CurrentInputLine@1000000000 : Text[250]) : Boolean;
    VAR
      Item@1000000001 : Record 27;
      Resource@1000000002 : Record 156;
      BarcodeConversion@1000000003 : Record 14000733;
      SerialNumberConversion@1000000004 : Record 14000731;
      ItemVariant@1000000005 : Record 5401;
      ItemUnitOfMeasure@1000000006 : Record 5404;
      UnitOfMeasure@1000000010 : Record 204;
      EShipTrackingCode@1240030000 : Record 14000721;
      PostedReceive@1240030002 : Record 14000603;
      PostedPackage@1240030003 : Record 14000704;
      Pos@1000000008 : Integer;
      Priority@1000000009 : Integer;
      TempText@1240030001 : Text[250];
    BEGIN
      ClearInputFields;
      PackingControl."Scanned No." := COPYSTR(CurrentInputLine,1,MAXSTRLEN(PackingControl."Scanned No."));
      PackingControl."Input Serial Number" := '';
      PackingControl."Input Lot Number" := '';
      PackingControl."Input Warranty Date" := 0D;
      PackingControl."Input Expiration Date" := 0D;

      IF ShippingSetup."Item No. Includes Ser. No." THEN BEGIN
        Pos := STRPOS(CurrentInputLine,ShippingSetup."Item No. Delimiter");
        IF (Pos <= 1) OR (STRLEN(CurrentInputLine) = Pos) THEN
          PackingControl."Input No." := COPYSTR(CurrentInputLine,1,20)
        ELSE BEGIN
          PackingControl."Input No." := COPYSTR(CurrentInputLine,1,Pos - 1);
          TempText := COPYSTR(CurrentInputLine,Pos + 1);
          CASE ShippingSetup."Item No. Delimiter Type" OF
            ShippingSetup."Item No. Delimiter Type"::"Serial No.":
              PackingControl."Input Serial Number" :=
                COPYSTR(TempText,1,MAXSTRLEN(PackingControl."Input Serial Number"));
            ShippingSetup."Item No. Delimiter Type"::"Lot No.":
              PackingControl."Input Lot Number" :=
                COPYSTR(TempText,1,MAXSTRLEN(PackingControl."Input Lot Number"));
            ShippingSetup."Item No. Delimiter Type"::"Serial No.-Lot No.":
              BEGIN
                Pos := STRPOS(TempText,ShippingSetup."Item No. Delimiter");
                IF Pos > 0 THEN BEGIN
                  PackingControl."Input Serial Number" :=
                    COPYSTR(
                      COPYSTR(TempText,1,Pos - 1),1,MAXSTRLEN(PackingControl."Input Serial Number"));
                  IF Pos < STRLEN(TempText) THEN
                    PackingControl."Input Lot Number" :=
                      COPYSTR(
                        COPYSTR(TempText,Pos + 1),1,MAXSTRLEN(PackingControl."Input Lot Number"));
                END ELSE
                  PackingControl."Input Serial Number" :=
                    COPYSTR(TempText,1,MAXSTRLEN(PackingControl."Input Serial Number"));
              END;
            ShippingSetup."Item No. Delimiter Type"::"Lot No.-Serial No.":
              BEGIN
                Pos := STRPOS(TempText,ShippingSetup."Item No. Delimiter");
                IF Pos > 0 THEN BEGIN
                  PackingControl."Input Lot Number" :=
                    COPYSTR(
                      COPYSTR(TempText,1,Pos - 1),1,MAXSTRLEN(PackingControl."Input Lot Number"));
                  IF Pos < STRLEN(TempText) THEN
                    PackingControl."Input Serial Number" :=
                      COPYSTR(
                        COPYSTR(TempText,Pos + 1),1,MAXSTRLEN(PackingControl."Input Serial Number"));
                END ELSE
                  PackingControl."Input Lot Number" :=
                    COPYSTR(TempText,1,MAXSTRLEN(PackingControl."Input Lot Number"));
              END;
          END;
        END;
      END ELSE
        PackingControl."Input No." := COPYSTR(CurrentInputLine,1,20);

      FOR Priority := 1 TO 10 DO
        CASE TRUE OF
          PackingControl."Input Type" <> PackingControl."Input Type"::" ":
            ;
          ShippingSetup."Item Priority" = Priority:
            IF Item.GET(PackingControl."Input No.") THEN
              GetItemInputFields(Item,'','');
          ShippingSetup."Resource Priority" = Priority:
            IF Resource.GET(PackingControl."Input No.") THEN
              GetResourceInputFields(Resource,'');
          ShippingSetup."Barcode Conversion Priority" = Priority:
            IF BarcodeConversion.GET(PackingControl."Input No.") THEN BEGIN
              CASE BarcodeConversion.Type OF
                BarcodeConversion.Type::Item:
                  IF Item.GET(BarcodeConversion."Item No.") THEN
                    GetItemInputFields(
                      Item,BarcodeConversion."Variant Code",BarcodeConversion."Unit of Measure Code")
                  ELSE
                    EXIT(FALSE);
                BarcodeConversion.Type::Resource:
                  IF Resource.GET(BarcodeConversion."Item No.") THEN
                    GetResourceInputFields(Resource,BarcodeConversion."Unit of Measure Code")
                  ELSE
                    EXIT(FALSE);
                ELSE
                  EXIT(FALSE);
              END;
            END ELSE BEGIN
            END;
          ShippingSetup."Item Cross Reference Priority" = Priority:
            BEGIN
              ItemCrossReference.RESET;
              ItemCrossReference.SETCURRENTKEY(
                "Cross-Reference No.","Cross-Reference Type","Cross-Reference Type No.",
                ItemCrossReference."Discontinue Bar Code");
              ItemCrossReference.SETRANGE(
                "Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::"Bar Code");
              ItemCrossReference.SETRANGE("Cross-Reference No.",PackingControl."Input No.");
              ItemCrossReference.SETRANGE("Discontinue Bar Code",FALSE);
              IF ItemCrossReference.FIND('-') THEN BEGIN
                IF ShippingSetup."Require Unique Identifier" THEN
                  IF ItemCrossReference.NEXT <> 0 THEN BEGIN
                    MESSAGE(Text048,ItemCrossReference.TABLECAPTION,PackingControl."Input No.");
                    EXIT(FALSE);
                  END;

                PackingControl."Input Type" := PackingControl."Input Type"::Item;
                PackingControl."Input No." := ItemCrossReference."Item No.";
                PackingControl."Input Variant Code" := ItemCrossReference."Variant Code";
                PackingControl."Input Unit of Measure Code" := ItemCrossReference."Unit of Measure";
                IF Item.GET(PackingControl."Input No.") THEN
                  GetItemInputFields(
                    Item,PackingControl."Input Variant Code",
                    PackingControl."Input Unit of Measure Code");
              END;
            END;
          ShippingSetup."Common Item No. Priority" = Priority:
            BEGIN
              Item.RESET;
              Item.SETCURRENTKEY("Common Item No.");
              Item.SETRANGE(
                "Common Item No.",
                COPYSTR(PackingControl."Input No.",1,MAXSTRLEN(Item."Common Item No.")));
              IF Item.FIND('-') THEN BEGIN
                IF ShippingSetup."Require Unique Identifier" THEN
                  IF Item.NEXT <> 0 THEN BEGIN
                    MESSAGE(Text048,Item.FIELDCAPTION("Common Item No."),PackingControl."Input No.");
                    EXIT(FALSE);
                  END;

                GetItemInputFields(Item,'','');
              END;
            END;
          ShippingSetup."Vendor Item No. Priority" = Priority:
            BEGIN
              Item.RESET;
              Item.SETCURRENTKEY("Vendor Item No.");
              Item.SETFILTER(
                "Vendor Item No.",
                '@' + COPYSTR(PackingControl."Input No.",1,MAXSTRLEN(Item."Vendor Item No.")));
              IF Item.FIND('-') THEN BEGIN
                IF ShippingSetup."Require Unique Identifier" THEN
                  IF Item.NEXT <> 0 THEN BEGIN
                    MESSAGE(Text048,Item.FIELDCAPTION("Vendor Item No."),PackingControl."Input No.");
                    EXIT(FALSE);
                  END;

                GetItemInputFields(Item,'','');
              END;
            END;
          ShippingSetup."Item UPC/EAN Number Priority" = Priority:
            BEGIN
              Item.RESET;
              Item.SETCURRENTKEY("Item UPC/EAN Number");
              Item.SETFILTER(
                "Item UPC/EAN Number",
                '@' + COPYSTR(PackingControl."Input No.",1,MAXSTRLEN(Item."Item UPC/EAN Number")));
              IF Item.FIND('-') THEN BEGIN
                IF ShippingSetup."Require Unique Identifier" THEN
                  IF Item.NEXT <> 0 THEN BEGIN
                    MESSAGE(Text048,Item.FIELDCAPTION("Item UPC/EAN Number"),PackingControl."Input No.");
                    EXIT(FALSE);
                  END;

                GetItemInputFields(Item,'','');
              END;
            END;
          ShippingSetup."Std. Pack UPC/EAN No. Priority" = Priority:
            BEGIN
              ItemUnitOfMeasure.RESET;
              ItemUnitOfMeasure.SETCURRENTKEY("Std. Pack UPC/EAN Number");
              ItemUnitOfMeasure.SETFILTER(
                "Std. Pack UPC/EAN Number",'@' +
                COPYSTR(
                  PackingControl."Input No.",1,
                  MAXSTRLEN(ItemUnitOfMeasure."Std. Pack UPC/EAN Number")));
              IF ItemUnitOfMeasure.FIND('-') THEN BEGIN
                IF ShippingSetup."Require Unique Identifier" THEN
                  IF ItemUnitOfMeasure.NEXT <> 0 THEN BEGIN
                    MESSAGE(
                      Text048,ItemUnitOfMeasure.FIELDCAPTION("Std. Pack UPC/EAN Number"),
                      PackingControl."Input No.");
                    EXIT(FALSE);
                  END;

                Item.GET(ItemUnitOfMeasure."Item No.");
                GetItemInputFields(Item,'',ItemUnitOfMeasure.Code);
              END;
            END;
          ShippingSetup."Receive No. Details Priority" = Priority:
            BEGIN
              PostedReceive.RESET;
              PostedReceive.SETRANGE(
                "No.",COPYSTR(PackingControl."Input No.",1,MAXSTRLEN(PostedReceive."No.")));
              PostedReceive.SETRANGE("Original Receive No.",'');
              IF PostedReceive.FIND('-') THEN BEGIN
                PackingControl."Input Type" := PackingControl."Input Type"::"Receive Details";
                PackingControl."Input No." := PostedReceive."No.";
              END;
            END;
          ShippingSetup."Rec. Ext. Track. Det. Priority" = Priority:
            BEGIN
              PostedReceive.RESET;
              PostedReceive.SETCURRENTKEY("External Tracking No.");
              PostedReceive.SETFILTER("External Tracking No.",'@' + PackingControl."Input No.");
              PostedReceive.SETRANGE("Original Receive No.",'');
              IF PostedReceive.FIND('-') THEN BEGIN
                IF ShippingSetup."Require Unique Identifier" THEN
                  IF PostedReceive.NEXT <> 0 THEN BEGIN
                    MESSAGE(
                      Text046,
                      PostedReceive.TABLECAPTION + ' ' +
                      PostedReceive.FIELDCAPTION("External Tracking No."),
                      PackingControl."Input No.");
                    EXIT(FALSE);
                  END;

                PackingControl."Input Type" := PackingControl."Input Type"::"Receive Details";
                PackingControl."Input No." := PostedReceive."No.";
              END;
            END;
          ShippingSetup."Receive UCC No. Det. Priority" = Priority:
            BEGIN
              PostedReceive.RESET;
              PostedReceive.SETCURRENTKEY("UCC No.");
              PostedReceive.SETFILTER("UCC No.",'@' + PackingControl."Input No.");
              PostedReceive.SETRANGE("Original Receive No.",'');
              IF PostedReceive.FIND('-') THEN BEGIN
                IF ShippingSetup."Require Unique Identifier" THEN
                  IF PostedReceive.NEXT <> 0 THEN BEGIN
                    MESSAGE(
                      Text046,
                      PostedReceive.TABLECAPTION + ' ' + PostedReceive.FIELDCAPTION("UCC No."),
                      PackingControl."Input No.");
                    EXIT(FALSE);
                  END;

                PackingControl."Input Type" := PackingControl."Input Type"::"Receive Details";
                PackingControl."Input No." := PostedReceive."No.";
              END;
            END;
          ShippingSetup."Package No. Details Priority" = Priority:
            BEGIN
              PostedPackage.RESET;
              PostedPackage.SETRANGE(
                "No.",COPYSTR(PackingControl."Input No.",1,MAXSTRLEN(PostedPackage."No.")));
              PostedPackage.SETRANGE("Original Package No.",'');
              IF PostedPackage.FIND('-') THEN BEGIN
                PackingControl."Input Type" := PackingControl."Input Type"::"Package Details";
                PackingControl."Input No." := PostedPackage."No.";
              END;
            END;
          ShippingSetup."Pack. Ext. Track. Det Priority" = Priority:
            BEGIN
              PostedPackage.RESET;
              PostedPackage.SETCURRENTKEY("External Tracking No.");
              PostedPackage.SETFILTER("External Tracking No.",'@' + PackingControl."Input No.");
              PostedPackage.SETRANGE("Original Package No.",'');
              IF PostedPackage.FIND('-') THEN BEGIN
                IF ShippingSetup."Require Unique Identifier" THEN
                  IF PostedPackage.NEXT <> 0 THEN BEGIN
                    MESSAGE(
                      Text046,
                      PostedPackage.TABLECAPTION + ' ' +
                      PostedPackage.FIELDCAPTION("External Tracking No."),
                      PackingControl."Input No.");
                    EXIT(FALSE);
                  END;

                PackingControl."Input Type" := PackingControl."Input Type"::"Package Details";
                PackingControl."Input No." := PostedPackage."No.";
              END;
            END;
          ShippingSetup."Package UCC No. Det. Priority" = Priority:
            BEGIN
              PostedPackage.RESET;
              PostedPackage.SETCURRENTKEY("UCC No.");
              PostedPackage.SETFILTER("UCC No.",'@' + PackingControl."Input No.");
              PostedPackage.SETRANGE("Original Package No.",'');
              IF PostedPackage.FIND('-') THEN BEGIN
                IF ShippingSetup."Require Unique Identifier" THEN
                  IF PostedPackage.NEXT <> 0 THEN BEGIN
                    MESSAGE(
                      Text046,
                      PostedPackage.TABLECAPTION + ' ' + PostedPackage.FIELDCAPTION("UCC No."),
                      PackingControl."Input No.");
                    EXIT(FALSE);
                  END;

                PackingControl."Input Type" := PackingControl."Input Type"::"Package Details";
                PackingControl."Input No." := PostedPackage."No.";
              END;
            END;
          ShippingSetup."Custom Priority" = Priority:
            BEGIN
              MESSAGE(
                Text009,
                ShippingSetup.FIELDNAME("Custom Priority"));
              EXIT(FALSE);

              // Add code here for Custom format
            END;
        END;

      IF PackingControl."Input Type" = PackingControl."Input Type"::" " THEN BEGIN
        IF PackingStation."Create Barcode Conversion" THEN BEGIN
          BarcodeConversion."Bar Code" := PackingControl."Input No.";
          BarcodeConversion.INIT;
          Pos := STRMENU(Text010);
          CASE Pos OF
            1: // Item
              IF PAGE.RUNMODAL(0,Item) = ACTION::LookupOK THEN BEGIN
                CLEAR(ItemVariant);
                ItemVariant.SETRANGE("Item No.",Item."No.");
                IF ItemVariant.FIND('-') THEN
                  IF ItemVariant.NEXT <> 0 THEN
                    IF NOT (PAGE.RUNMODAL(0,ItemVariant) = ACTION::LookupOK) THEN
                      EXIT(FALSE);

                CLEAR(ItemUnitOfMeasure);
                ItemUnitOfMeasure.SETRANGE("Item No.",Item."No.");
                IF ItemUnitOfMeasure.FIND('-') THEN
                  IF ItemUnitOfMeasure.NEXT <> 0 THEN
                    IF NOT (PAGE.RUNMODAL(0,ItemUnitOfMeasure) = ACTION::LookupOK) THEN
                      EXIT(FALSE);

                CLEAR(BarcodeConversion);
                BarcodeConversion."Bar Code" := COPYSTR(CurrentInputLine,1,20);
                BarcodeConversion.Type := BarcodeConversion.Type::Item;
                BarcodeConversion."Item No." := Item."No.";
                BarcodeConversion."Variant Code" := ItemVariant.Code;
                BarcodeConversion."Unit of Measure Code" := ItemUnitOfMeasure.Code;
                BarcodeConversion.INSERT(TRUE);
                COMMIT;

                GetItemInputFields(
                  Item,BarcodeConversion."Variant Code",BarcodeConversion."Unit of Measure Code");
              END ELSE
                EXIT(FALSE);
            2: // Resource
              IF PAGE.RUNMODAL(0,Resource) = ACTION::LookupOK THEN BEGIN
                CLEAR(UnitOfMeasure);
                IF UnitOfMeasure.FIND('-') THEN
                  IF UnitOfMeasure.NEXT <> 0 THEN
                    IF NOT (PAGE.RUNMODAL(0,UnitOfMeasure) = ACTION::LookupOK) THEN
                      EXIT(FALSE);

                CLEAR(BarcodeConversion);
                BarcodeConversion."Bar Code" := COPYSTR(CurrentInputLine,1,20);
                BarcodeConversion.Type := BarcodeConversion.Type::Resource;
                BarcodeConversion."Item No." := Resource."No.";
                BarcodeConversion."Unit of Measure Code" := UnitOfMeasure.Code;
                BarcodeConversion.INSERT(TRUE);
                COMMIT;

                GetResourceInputFields(Resource,BarcodeConversion."Unit of Measure Code");
              END ELSE
                EXIT(FALSE);
            ELSE
              EXIT(FALSE);
          END;
        END;

        IF PackingStation."Create Item Cross Reference" AND
           (PackingControl."Input Type" = PackingControl."Input Type"::" ")
        THEN BEGIN
          IF CONFIRM(Text011,FALSE,PackingControl."Input No.") THEN
            IF PAGE.RUNMODAL(0,Item) = ACTION::LookupOK THEN BEGIN
              CLEAR(ItemVariant);
              ItemVariant.SETRANGE("Item No.",Item."No.");
              IF ItemVariant.FIND('-') THEN
                IF ItemVariant.NEXT <> 0 THEN
                  IF NOT (PAGE.RUNMODAL(0,ItemVariant) = ACTION::LookupOK) THEN
                    EXIT(FALSE);

              CLEAR(ItemUnitOfMeasure);
              ItemUnitOfMeasure.SETRANGE("Item No.",Item."No.");
              IF ItemUnitOfMeasure.FIND('-') THEN
                IF ItemUnitOfMeasure.NEXT <> 0 THEN
                  IF NOT (PAGE.RUNMODAL(0,ItemUnitOfMeasure) = ACTION::LookupOK) THEN
                    EXIT(FALSE);

              CLEAR(ItemCrossReference);
              ItemCrossReference."Item No." := Item."No.";
              ItemCrossReference."Variant Code" := ItemVariant.Code;
              ItemCrossReference."Unit of Measure" := ItemUnitOfMeasure.Code;
              ItemCrossReference."Cross-Reference Type" :=
                ItemCrossReference."Cross-Reference Type"::"Bar Code";
              ItemCrossReference."Cross-Reference No." := COPYSTR(CurrentInputLine,1,20);
              ItemCrossReference.INSERT(TRUE);
              COMMIT;

              ItemCrossReference.RESET;
              ItemCrossReference.SETCURRENTKEY(
                "Cross-Reference No.","Cross-Reference Type","Cross-Reference Type No.",
                ItemCrossReference."Discontinue Bar Code");
              ItemCrossReference.SETRANGE(
                "Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::"Bar Code");
              ItemCrossReference.SETRANGE("Cross-Reference No.",PackingControl."Input No.");
              ItemCrossReference.SETRANGE("Discontinue Bar Code",FALSE);
              IF ItemCrossReference.FIND('-') THEN BEGIN
                PackingControl."Input Type" := PackingControl."Input Type"::Item;
                PackingControl."Input No." := ItemCrossReference."Item No.";
                PackingControl."Input Variant Code" := ItemCrossReference."Variant Code";
                PackingControl."Input Unit of Measure Code" := ItemCrossReference."Unit of Measure";
                IF Item.GET(PackingControl."Input No.") THEN
                  GetItemInputFields(
                    Item,PackingControl."Input Variant Code",
                    PackingControl."Input Unit of Measure Code");
              END ELSE
                EXIT(FALSE);
            END ELSE
              EXIT(FALSE);
        END;

        IF PackingControl."Input Type" = PackingControl."Input Type"::" " THEN
          EXIT(FALSE);
      END;

      IF PackingControl."Input Serial Number" <> '' THEN
        IF Item."E-Ship Tracking Code" <> '' THEN BEGIN
          EShipTrackingCode.GetEShipTrackingCodeItem(Item);
          IF EShipTrackingCode."Serial/Lot No. Conversion Code" <> '' THEN BEGIN
            SerialNumberConversion.GET(EShipTrackingCode."Serial/Lot No. Conversion Code");
            PackingControl."Input Serial Number" :=
              SerialNumberConversion.ConvertString(PackingControl."Input Serial Number");
          END;
        END;

      IF PackingControl."Input Lot Number" <> '' THEN
        IF Item."E-Ship Tracking Code" <> '' THEN BEGIN
          EShipTrackingCode.GetEShipTrackingCodeItem(Item);
          IF EShipTrackingCode."Serial/Lot No. Conversion Code" <> '' THEN BEGIN
            SerialNumberConversion.GET(EShipTrackingCode."Serial/Lot No. Conversion Code");
            PackingControl."Input Lot Number" :=
              SerialNumberConversion.ConvertString(PackingControl."Input Lot Number");
          END;
        END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE DuplicateSN@22() : Boolean;
    VAR
      PackageLine2@1000000000 : Record 14000702;
    BEGIN
      IF PackingControl."Input Serial Number" = '' THEN
        EXIT(FALSE);
      PackageLine2.RESET;
      PackageLine2.SETCURRENTKEY("No.","Serial No.");
      PackageLine2.SETRANGE("No.",PackingControl."Input No.");
      PackageLine2.SETRANGE("Serial No.",PackingControl."Input Serial Number");
      IF PackageLine2.FIND('-') THEN BEGIN
        SetMessage(
          STRSUBSTNO(
            Text012,
            PackageLine2."Source ID",PackageLine2."Package No."));
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetHeader@2(VAR CurrentInputLine@1240030000 : Text[250]) : Boolean;
    VAR
      SalesHeader@1240030001 : Record 36;
      PurchHeader@1240030002 : Record 38;
      TransferHeader@1240030004 : Record 5740;
      WarehouseShipmentHeader@1240030005 : Record 7320;
      WarehouseShipmentLine@1240030006 : Record 7321;
      WarehouseActivityHeader@1240030008 : Record 5766;
      WarehouseActivityLine@1240030007 : Record 5767;
      RegisteredWhseActivityHdr@1240030009 : Record 5772;
      RegisteredWhseActivityLine@1240030010 : Record 5773;
      Priority@1240030003 : Integer;
      RunWAPCommand@1000000000 : Boolean;
      WSL@1000000001 : Record 7321;
      WAH@1000000002 : Record 5766;
      RegisteredWhseActivityLine1@1000000003 : Record 5773;
      RegisteredWhseActivityHdr1@1000000004 : Record 5772;
      strlp@1000000005 : Text;
    BEGIN
      IF COPYSTR(CurrentInputLine,1,20) = '' THEN
        EXIT(FALSE);

      IF PackingControl."Source Type" <> 0 THEN BEGIN
        CASE PackingControl."Source Type" OF
          DATABASE::"Sales Header":
            IF SalesHeader.GET(PackingControl."Source Subtype",PackingControl."Source ID") THEN BEGIN
              //<TPZ1732>
              CheckCustomerBlock(SalesHeader."No.",SalesHeader."Sell-to Customer No.");
              //</TPZ1732>
              PackingControl.TransferFromSalesHeader(SalesHeader);
              EXIT(TRUE);
            END;
          DATABASE::"Purchase Header":
            IF PurchHeader.GET(PackingControl."Source Subtype",PackingControl."Source ID") THEN BEGIN
              PackingControl.TransferFromPurchHeader(PurchHeader);
              EXIT(TRUE);
            END;
          DATABASE::"Transfer Header":
            IF TransferHeader.GET(PackingControl."Source ID") THEN BEGIN
              PackingControl.TransferFromTransferHeader(TransferHeader);
              EXIT(TRUE);
            END;
          ELSE
            PackingControl.ErrorUnknownSourceType2;
        END;
      END;

       //<TPZ2554>
           IF LicensePlateHeader.GET(COPYSTR(CurrentInputLine,STRLEN(CurrentInputLine)-6)) THEN BEGIN
             //MESSAGE('%1',COPYSTR(CurrentInputLine,STRLEN(CurrentInputLine)-6));
              LicensePlateHeader.CALCFIELDS("Source Document");
              LicensePlateHeader.CALCFIELDS("Source No.");
              IF LicensePlateHeader."Source Document"=LicensePlateHeader."Source Document"::Shipment THEN BEGIN
                RegisteredWhseActivityLine1.RESET;
                RegisteredWhseActivityLine1.SETRANGE("Whse. Document Type",RegisteredWhseActivityLine1."Whse. Document Type"::Shipment);
                RegisteredWhseActivityLine1.SETRANGE("Whse. Document No.",LicensePlateHeader."Source No.");
                IF RegisteredWhseActivityLine1.FINDFIRST THEN BEGIN
                  RegisteredWhseActivityHdr1.GET(RegisteredWhseActivityLine1."Activity Type",RegisteredWhseActivityLine1."No.");
                  CurrentInputLine := RegisteredWhseActivityHdr1."Whse. Activity No.";
                  //IF TestLegal(PackingStation."Pack All Command") THEN
                    //CreateShipComplete;
                END;
              END;
              IF LicensePlateHeader."Source Document"=LicensePlateHeader."Source Document"::Pick THEN
                 CurrentInputLine := LicensePlateHeader."Source No.";//eb
            END;
            //</TPZ2554>
      FOR Priority := 1 TO 10 DO
        CASE TRUE OF
          ShippingSetup."Sales Order Priority" = Priority:
          BEGIN
      {      //<TPZ2554>
            IF LicensePlateHeader.GET(CurrentInputLine) THEN BEGIN
              LicensePlateHeader.CALCFIELDS("Source Document");
              LicensePlateHeader.CALCFIELDS("Source No.");
              IF LicensePlateHeader."Source Document"=LicensePlateHeader."Source Document"::Shipment THEN BEGIN
                WSL.RESET;
                WSL.SETRANGE("No.",LicensePlateHeader."Source No.");
                WSL.SETFILTER("Source No.",'<>%1','');
                WSL.SETRANGE("Source Document",WSL."Source Document"::"Sales Order");
                IF WSL.FINDFIRST THEN BEGIN
                  CurrentInputLine := WSL."Source No.";
                  IF TestLegal(PackingStation."Pack All Command") THEN
                    CreateShipComplete;
                END;
              END;
              IF LicensePlateHeader."Source Document"=LicensePlateHeader."Source Document"::Pick THEN BEGIN
                WAH.RESET;
                WAH.SETRANGE(Type,WAH.Type::Pick);
                WAH.SETRANGE("Source Document",WAH."Source Document"::"Sales Order");
                IF WAH.FINDFIRST THEN BEGIN
                  CurrentInputLine := WAH."Source No.";
                  IF TestLegal(PackingStation."Pack All Command") THEN
                    CreateShipComplete;
                END;
              END;
            END;
            //</TPZ2554>}
            IF SalesHeader.GET(
                 SalesHeader."Document Type"::Order,
                 COPYSTR(CurrentInputLine,1,MAXSTRLEN(SalesHeader."No.")))
            THEN BEGIN
              PackingControl.TransferFromSalesHeader(SalesHeader);
              EXIT(TRUE);
            END;
          END;
          ShippingSetup."Sales Invoice Priority" = Priority:
            IF SalesHeader.GET(
                 SalesHeader."Document Type"::Invoice,
                 COPYSTR(CurrentInputLine,1,MAXSTRLEN(SalesHeader."No.")))
            THEN BEGIN
              PackingControl.TransferFromSalesHeader(SalesHeader);
              EXIT(TRUE);
            END;
          ShippingSetup."Purchase Credit Memo Priority" = Priority:
            IF PurchHeader.GET(
                 PurchHeader."Document Type"::"Credit Memo",
                 COPYSTR(CurrentInputLine,1,MAXSTRLEN(PurchHeader."No.")))
            THEN BEGIN
              PackingControl.TransferFromPurchHeader(PurchHeader);
              EXIT(TRUE);
            END;
          ShippingSetup."Purchase Return Order Priority" = Priority:
            IF PurchHeader.GET(
                 PurchHeader."Document Type"::"Return Order",
                 COPYSTR(CurrentInputLine,1,MAXSTRLEN(PurchHeader."No.")))
            THEN BEGIN
              PackingControl.TransferFromPurchHeader(PurchHeader);
              EXIT(TRUE);
            END;
          ShippingSetup."Transfer Order Priority" = Priority:
            IF TransferHeader.GET(COPYSTR(CurrentInputLine,1,MAXSTRLEN(TransferHeader."No."))) THEN BEGIN
              PackingControl.TransferFromTransferHeader(TransferHeader);
              EXIT(TRUE);
            END;
          ShippingSetup."Warehouse Shipment Priority" = Priority:
            BEGIN
            //<TPZ2554>
            {IF LicensePlateHeader.GET(CurrentInputLine) THEN BEGIN
              LicensePlateHeader.CALCFIELDS("Source Document");
              LicensePlateHeader.CALCFIELDS("Source No.");
              IF LicensePlateHeader."Source Document"=LicensePlateHeader."Source Document"::Shipment THEN
                CurrentInputLine := LicensePlateHeader."Source No.";
            END;}
            //</TPZ2554>
              IF WarehouseShipmentHeader.GET(COPYSTR(CurrentInputLine,1,MAXSTRLEN(WarehouseShipmentHeader."No.")))
              THEN BEGIN
                WarehouseShipmentLine.RESET;
                WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentHeader."No.");
                IF WarehouseShipmentLine.FIND('-') THEN BEGIN
                  WarehouseShipmentLine.SETFILTER("Source No.",'<>%1',WarehouseShipmentLine."Source No.");
                  IF WarehouseShipmentLine.NEXT <> 0 THEN BEGIN
                    SetMessage(STRSUBSTNO(Text047,WarehouseShipmentHeader.TABLECAPTION));
                    EXIT(FALSE);
                  END;

                  CASE WarehouseShipmentLine."Source Type" OF
                    DATABASE::"Sales Line":
                      BEGIN
                        SalesHeader.GET(
                          WarehouseShipmentLine."Source Subtype",WarehouseShipmentLine."Source No.");
                        PackingControl.TransferFromSalesHeader(SalesHeader);
                        EXIT(TRUE);
                      END;
                    DATABASE::"Purchase Line":
                      BEGIN
                        PurchHeader.GET(
                          WarehouseShipmentLine."Source Subtype",WarehouseShipmentLine."Source No.");
                        PackingControl.TransferFromPurchHeader(PurchHeader);
                        EXIT(TRUE);
                      END;
                    DATABASE::"Transfer Line":
                      BEGIN
                        TransferHeader.GET(WarehouseShipmentLine."Source No.");
                        PackingControl.TransferFromTransferHeader(TransferHeader);
                        EXIT(TRUE);
                      END;
                  END;
                END;
              END;
          END;
          ShippingSetup."Warehouse Activity Priority" = Priority:
            BEGIN
      {      //<TPZ2554>
            IF LicensePlateHeader.GET(CurrentInputLine) THEN BEGIN
              LicensePlateHeader.CALCFIELDS("Source Document");
              LicensePlateHeader.CALCFIELDS("Source No.");
              IF LicensePlateHeader."Source Document"=LicensePlateHeader."Source Document"::Shipment THEN BEGIN
                RegisteredWhseActivityLine1.RESET;
                RegisteredWhseActivityLine1.SETRANGE("Whse. Document Type",RegisteredWhseActivityLine1."Whse. Document Type"::Shipment);
                RegisteredWhseActivityLine1.SETRANGE("Whse. Document No.",LicensePlateHeader."Source No.");
                IF RegisteredWhseActivityLine1.FINDFIRST THEN BEGIN
                  RegisteredWhseActivityHdr1.GET(RegisteredWhseActivityLine1."Activity Type",RegisteredWhseActivityLine1."No.");
                  CurrentInputLine := RegisteredWhseActivityHdr1."Whse. Activity No.";
                  IF TestLegal(PackingStation."Pack All Command") THEN
                    CreateShipComplete;
                END;
              END;
            END;
            //</TPZ2554>}
              IF WarehouseActivityHeader.GET(
                   WarehouseActivityHeader.Type::Pick,
                   COPYSTR(CurrentInputLine,1,MAXSTRLEN(WarehouseActivityHeader."No.")))
              THEN BEGIN
                WarehouseActivityLine.RESET;
                WarehouseActivityLine.SETRANGE("Activity Type",WarehouseActivityHeader.Type);
                WarehouseActivityLine.SETRANGE("No.",WarehouseActivityHeader."No.");
                IF WarehouseActivityLine.FIND('-') THEN BEGIN
                  WarehouseActivityLine.SETFILTER("Source No.",'<>%1',WarehouseActivityLine."Source No.");
                  IF WarehouseActivityLine.NEXT <> 0 THEN BEGIN
                    SetMessage(STRSUBSTNO(Text047,WarehouseActivityHeader.TABLECAPTION));
                    EXIT(FALSE);
                  END;
                  //TM BEG 062615
                  Priority := 0;
                  CurrentInputLine := WarehouseActivityLine."Source No.";
                  RunWAPCommand := TRUE;
                  //TM END 062615
                END;
              END ELSE BEGIN
                RegisteredWhseActivityHdr.RESET;
                RegisteredWhseActivityHdr.SETCURRENTKEY("Whse. Activity No.");
                RegisteredWhseActivityHdr.SETRANGE(Type,RegisteredWhseActivityHdr.Type::Pick);
                RegisteredWhseActivityHdr.SETRANGE(
                  "Whse. Activity No.",
                  COPYSTR(CurrentInputLine,1,MAXSTRLEN(RegisteredWhseActivityHdr."Whse. Activity No.")));
                IF RegisteredWhseActivityHdr.FIND('-') THEN BEGIN
                  RegisteredWhseActivityLine.RESET;
                  RegisteredWhseActivityLine.SETRANGE("Activity Type",RegisteredWhseActivityHdr.Type);
                  RegisteredWhseActivityLine.SETRANGE("No.",RegisteredWhseActivityHdr."No.");
                  IF RegisteredWhseActivityLine.FIND('-') THEN BEGIN
                    RegisteredWhseActivityLine.SETFILTER(
                      "Source No.",'<>%1',RegisteredWhseActivityLine."Source No.");
                    IF RegisteredWhseActivityLine.NEXT <> 0 THEN BEGIN
                      SetMessage(STRSUBSTNO(Text047,WarehouseActivityHeader.TABLECAPTION));
                    EXIT(FALSE);
                    END;

                    WarehouseActivityLine.TRANSFERFIELDS(RegisteredWhseActivityLine);
                  END;
                END;
              END;

              IF WarehouseActivityLine."Source No." <> '' THEN BEGIN
                CASE WarehouseActivityLine."Source Type" OF
                  DATABASE::"Sales Line":
                    BEGIN
                      SalesHeader.GET(
                        WarehouseActivityLine."Source Subtype",WarehouseActivityLine."Source No.");
                      PackingControl.TransferFromSalesHeader(SalesHeader);

                      //TM BEG 062615
                      IF RunWAPCommand THEN BEGIN
                        OpenOrder;
                        IF TestLegal(PackingStation."View Whse. Activity Lines Cmd.") THEN BEGIN
                          ViewWarehousePickLines;
                          //<TPZ1383>
                          RefreshPackFlag;
                          //</TPZ1383>
                        END;
                      END;
                      //TM END 062615

                      EXIT(TRUE);
                    END;
                  DATABASE::"Purchase Line":
                    BEGIN
                      PurchHeader.GET(
                        WarehouseActivityLine."Source Subtype",WarehouseActivityLine."Source No.");
                      PackingControl.TransferFromPurchHeader(PurchHeader);

                      //TM BEG 062615
                      IF RunWAPCommand THEN BEGIN
                        OpenOrder;
                        IF TestLegal(PackingStation."View Whse. Activity Lines Cmd.") THEN BEGIN
                          ViewWarehousePickLines;
                          //<TPZ1383>
                          RefreshPackFlag;
                          //</TPZ1383>
                        END;
                      END;
                      //TM END 062615

                      EXIT(TRUE);
                    END;
                  DATABASE::"Transfer Line":
                    BEGIN
                      TransferHeader.GET(WarehouseActivityLine."Source No.");
                      PackingControl.TransferFromTransferHeader(TransferHeader);

                      //TM BEG 062615
                      IF RunWAPCommand THEN BEGIN
                        OpenOrder;
                        IF TestLegal(PackingStation."View Whse. Activity Lines Cmd.") THEN BEGIN
                          ViewWarehousePickLines;
                          //<TPZ1383>
                          RefreshPackFlag;
                          //</TPZ1383>
                        END;
                      END;
                      //TM END 062615

                      EXIT(TRUE);
                    END;
                END;
              END;
            END;
         END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CreatePackage@3();
    BEGIN
      IF PackageMgt.CreatePackage(Package,PackingControl) THEN BEGIN
        FormatMessage;
      END ELSE
        SetMessage(PackingControl."Error Message");
    END;

    LOCAL PROCEDURE CreatePackageLine@4();
    BEGIN
      IF PackageMgt.CreatePackageLine(
           Package,PackingControl,
           PackingControl."Line Unit of Measure Code",PackingControl."Line Quantity",0)
      THEN
        GetLineQty
      ELSE
        SetMessage(PackingControl."Error Message");
    END;

    PROCEDURE EnterSerialLotNo@76() : Boolean;
    VAR
      EShipInput@1240030001 : Record 14000728;
      EShipEnterSerialNo@1240030002 : Page 14050102;
      EShipEnterLotNo@1240030003 : Page 14050103;
      EShipEnterWarrantyDate@1240030004 : Page 14050104;
      EShipEnterExpirationDate@1240030005 : Page 14050105;
    BEGIN
      IF (PackingControl."Input Serial Number" = '') AND
         PackingControl."Pack Serial Number" AND NOT PackingControl."Pack Serial Number Late"
      THEN BEGIN
        EShipInput.INIT;
        EShipInput.Type := PackingControl."Input Type";
        EShipInput."No." := PackingControl."Input No.";
        EShipInput."Variant Code" := PackingControl."Input Variant Code";
        EShipInput."Unit of Measure" := PackingControl."Input Unit of Measure Code";
        EShipInput.Description := PackingControl."Input Description";

        EShipInput."Serial No." := PackingControl."Input Serial Number";
        CLEAR(EShipEnterSerialNo);
        EShipEnterSerialNo.LOOKUPMODE(TRUE);
        EShipEnterSerialNo.SetEShipInput(EShipInput);
        IF EShipEnterSerialNo.RUNMODAL <> ACTION::LookupOK THEN BEGIN
          SetMessage(Text014);
          ClearInputFields;
          EXIT(FALSE);
        END ELSE BEGIN
          EShipEnterSerialNo.GetEShipInput(EShipInput);
          IF EShipInput."Serial No." = '' THEN BEGIN
            SetMessage(Text014);
            ClearInputFields;
            EXIT(FALSE);
          END;
          PackingControl."Input Serial Number" := EShipInput."Serial No.";
        END;

        IF COPYSTR(PackingControl."Input Serial Number",1,2) = '//' THEN BEGIN
          SetMessage(Text015);
          ClearInputFields;
          EXIT(FALSE);
        END;
      END;
      IF DuplicateSN THEN
        EXIT(FALSE);

      IF (PackingControl."Input Lot Number" = '') AND
         PackingControl."Pack Lot Number" AND NOT PackingControl."Pack Lot Number Late"
      THEN BEGIN
        EShipInput.INIT;
        EShipInput.Type := PackingControl."Input Type";
        EShipInput."No." := PackingControl."Input No.";
        EShipInput."Variant Code" := PackingControl."Input Variant Code";
        EShipInput."Unit of Measure" := PackingControl."Input Unit of Measure Code";
        EShipInput.Description := PackingControl."Input Description";

        EShipInput."Lot No." := PackingControl."Input Lot Number";
        CLEAR(EShipEnterLotNo);
        EShipEnterLotNo.LOOKUPMODE(TRUE);
        EShipEnterLotNo.SetEShipInput(EShipInput);
        IF EShipEnterLotNo.RUNMODAL <> ACTION::LookupOK THEN BEGIN
          SetMessage(Text017);
          ClearInputFields;
          EXIT(FALSE);
        END ELSE BEGIN
          EShipEnterLotNo.GetEShipInput(EShipInput);
          IF EShipInput."Lot No." = '' THEN BEGIN
            SetMessage(Text017);
            ClearInputFields;
            EXIT(FALSE);
          END;
          PackingControl."Input Lot Number" := EShipInput."Lot No.";
        END;

        IF COPYSTR(PackingControl."Input Lot Number",1,2) = '//' THEN BEGIN
          SetMessage(Text018);
          ClearInputFields;
          EXIT(FALSE);
        END;
      END;

      IF (PackingControl."Input Warranty Date" = 0D) AND
         PackingControl."Pack Warranty Date" AND NOT PackingControl."Pack Warranty Date Late"
      THEN BEGIN
        EShipInput.INIT;
        EShipInput.Type := PackingControl."Input Type";
        EShipInput."No." := PackingControl."Input No.";
        EShipInput."Variant Code" := PackingControl."Input Variant Code";
        EShipInput."Unit of Measure" := PackingControl."Input Unit of Measure Code";
        EShipInput.Description := PackingControl."Input Description";

        EShipInput."Warranty Date" := PackingControl."Input Warranty Date";
        CLEAR(EShipEnterWarrantyDate);
        EShipEnterWarrantyDate.LOOKUPMODE(TRUE);
        EShipEnterWarrantyDate.SetEShipInput(EShipInput);
        IF EShipEnterWarrantyDate.RUNMODAL <> ACTION::LookupOK THEN BEGIN
          SetMessage(Text021);
          ClearInputFields;
          EXIT(FALSE);
        END ELSE BEGIN
          EShipEnterWarrantyDate.GetEShipInput(EShipInput);
          IF EShipInput."Warranty Date" = 0D THEN BEGIN
            SetMessage(Text021);
            ClearInputFields;
            EXIT(FALSE);
          END;
          PackingControl."Input Warranty Date" := EShipInput."Warranty Date";
        END;

        IF PackingControl."Input Warranty Date" = 0D THEN BEGIN
          SetMessage(Text021);
          ClearInputFields;
          EXIT(FALSE);
        END;
      END;

      IF (PackingControl."Input Expiration Date" = 0D) AND
         PackingControl."Pack Expiration Date" AND NOT PackingControl."Pack Expiration Date Late"
      THEN BEGIN
        EShipInput.INIT;
        EShipInput.Type := PackingControl."Input Type";
        EShipInput."No." := PackingControl."Input No.";
        EShipInput."Variant Code" := PackingControl."Input Variant Code";
        EShipInput."Unit of Measure" := PackingControl."Input Unit of Measure Code";
        EShipInput.Description := PackingControl."Input Description";

        EShipInput."Expiration Date" := PackingControl."Input Expiration Date";
        CLEAR(EShipEnterExpirationDate);
        EShipEnterExpirationDate.LOOKUPMODE(TRUE);
        EShipEnterExpirationDate.SetEShipInput(EShipInput);
        IF EShipEnterExpirationDate.RUNMODAL <> ACTION::LookupOK THEN BEGIN
          SetMessage(Text023);
          ClearInputFields;
          EXIT(FALSE);
        END ELSE BEGIN
          EShipEnterExpirationDate.GetEShipInput(EShipInput);
          IF EShipInput."Expiration Date" = 0D THEN BEGIN
            SetMessage(Text023);
            ClearInputFields;
            EXIT(FALSE);
          END;
          PackingControl."Input Expiration Date" := EShipInput."Expiration Date";
        END;

        IF PackingControl."Input Expiration Date" = 0D THEN BEGIN
          SetMessage(Text023);
          ClearInputFields;
          EXIT(FALSE);
        END;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AddPackageToPackage@39();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackageMgt.AddPackageToPackage(Package,PackingControl,'') THEN
        GetLineQty
      ELSE
        SetMessage(PackingControl."Error Message");
    END;

    LOCAL PROCEDURE AddAllPackagesToPackage@45();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      PackageMgt.AddAllPackagesToPackage(Package,PackingControl);

      GetLineQty;
    END;

    LOCAL PROCEDURE AddMultiplePackagesToPackage@57();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackageMgt.AddMultiplePackagesToPackage(Package,PackingControl) THEN
        GetLineQty
      ELSE
        SetMessage(PackingControl."Error Message");
    END;

    LOCAL PROCEDURE AddSelectedPackagesToPackage@66();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      PackageMgt.AddSelectedPackagesToPackage(Package,PackingControl);
    END;

    LOCAL PROCEDURE ClosePackage@8(PrintLabel@1000000000 : Boolean;ScaleWeight@1000000001 : Decimal;ManualWeight@1000000002 : Decimal;ManualValue@1000000003 : Decimal);
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      PackageMgt.UpdateShippingAgent(PackingControl,BillOfLading,ShippingAgent);

      AutoCreatePackageIfNoDetails;

      IF PackageMgt.ClosePackage(Package,ShippingAgent,ScaleInterface,PackingControl,PrintLabel)
      THEN BEGIN
        FormatMessage;
      END ELSE
        SetMessage(PackingControl."Error Message");
    END;

    LOCAL PROCEDURE CopyLastPackage@42(PrintLabel@1000000000 : Boolean);
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackageOpenError THEN
        EXIT;

      IF PackageMgt.CopyLastPackage(Package,PackingControl,PrintLabel) THEN
        GetLineQty
      ELSE
        SetMessage(PackingControl."Error Message");
    END;

    LOCAL PROCEDURE CopyLastLabel@77();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackageOpenError THEN
        EXIT;

      IF NOT PackageMgt.CopyLastLabel(Package,PackingControl) THEN
        SetMessage(PackingControl."Error Message");
    END;

    LOCAL PROCEDURE CheckPackageOpen@24();
    BEGIN
      PackageMgt.CheckPackageOpen(Package,PackingControl);

      RefreshHeader;

      FormatMessage;
    END;

    LOCAL PROCEDURE OpenOrder@69() : Boolean;
    BEGIN
      IF PackingControl."Source Type" = DATABASE::"Sales Header" THEN
        IF SalesSetup."Ext. Doc. No. Mandatory" THEN
          IF PackingControl."External Document No." = '' THEN BEGIN
            SetMessage(STRSUBSTNO(Text024,PackingControl.FormatSource2));
            ClearAllInfo;
            EXIT(FALSE);
          END;

      IF NOT PackingControl.TestReleased2(FALSE) THEN BEGIN
        SetMessage(STRSUBSTNO(Text025,PackingControl.FormatSource2));
        PackingControl.ClearOrderInfo;
        EXIT(FALSE);
      END;

      IF PackingStation."Reset Order Qty. When Opened" THEN
        PackageMgt.ResetQtyToShip(PackingControl);

      PackingControl."Multi Document No." := PackingControl."Source ID";
      PackingControl."Multi Document Package" := FALSE;
      PackingControl."Order Open" := TRUE;

      IF PackingStation."Show Order Comments if Exists" THEN
        ViewOrderComments(TRUE);

      IF PackingStation."Show Warehouse Stat. on Open" THEN
        ViewWarehouseStatistics;

      IF PackingControl."Bill of Lading No." <> '' THEN
        BillOfLading.GET(PackingControl."Bill of Lading No.")
      ELSE
        CLEAR(BillOfLading);

      PackageMgt.UpdateShippingAgent(
        PackingControl,BillOfLading,ShippingAgent);

      IF PackingStation."Check Name Addr. on Open Order" THEN
        PackingControl.CheckNameAddress(ShippingAgent.Code);

      PackingControl."Total Package Count" := 0;

      PackageMgt.CreateSelectExportDoc(PackingControl,'',FALSE,FALSE);

      CheckPackageOpen;

      IF NOT PackingControl."Package Open" THEN
        PackageMgt.ShowShippingAgentClosedPackage(BillOfLading,Package,PackingControl);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CloseOrder@12(PrintOrder@1000000000 : Boolean;ForceClose@1000000001 : Boolean;FuturePacking@1240030000 : Boolean);
    VAR
      ShippingAgent@1000000002 : Record 291;
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackageOpenError THEN
        EXIT;
      //>>TPZ3011
      IF NoPackageError THEN
        EXIT;
      //<<TPZ3011
      PackageMgt.UpdateShippingAgent(PackingControl,BillOfLading,ShippingAgent);

      IF PackageMgt.CloseOrder(ShippingAgent,PackingControl,PrintOrder,ForceClose,FuturePacking)
      THEN BEGIN
        ClearAllInfo;

        IF PackingControl."Close When Close Order" THEN
          CurrFormClose := TRUE;
      END ELSE
        SetMessage(PackingControl."Error Message");
    END;

    PROCEDURE ListOrders@73();
    VAR
      SalesHeader@1240030000 : Record 36;
      PurchHeader@1240030001 : Record 38;
      TransferHeader@1240030003 : Record 5740;
      TempInputLine@1240030002 : Text[250];
    BEGIN
      IF (PackingControl."Source Type" = 0) AND NOT PackingControl."Order Open" THEN
        IF NOT ShippingSetup.SelectSourceType(
                 PackingControl."Source Type",PackingControl."Source Subtype")
        THEN
          EXIT;

      CASE PackingControl."Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader.SETRANGE("Document Type",PackingControl."Source Subtype");
            IF PackingControl."Order Open" THEN BEGIN
              SalesHeader."Document Type" := PackingControl."Source Subtype";
              SalesHeader."No." := PackingControl."Source ID";
              SalesHeader.FIND;

              PAGE.RUNMODAL(PAGE::"Sales List",SalesHeader);

              RefreshHeader;
            END ELSE BEGIN
              PackingControl."Source Type" := 0;
              PackingControl."Source Subtype" := 0;

              IF PAGE.RUNMODAL(PAGE::"Sales List",SalesHeader) = ACTION::LookupOK THEN BEGIN
                PackingControl."Source Type" := DATABASE::"Sales Header";
                PackingControl."Source Subtype" := SalesHeader."Document Type";
                PackingControl."Source ID" := SalesHeader."No.";
                TempInputLine := SalesHeader."No.";
                ParseInput(TempInputLine);
              END;
            END;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader.SETRANGE("Document Type",PackingControl."Source Subtype");
            IF PackingControl."Order Open" THEN BEGIN
              PurchHeader."Document Type" := PackingControl."Source Subtype";
              PurchHeader."No." := PackingControl."Source ID";
              PurchHeader.FIND;

              PAGE.RUNMODAL(PAGE::"Purchase List",PurchHeader);

              RefreshHeader;
            END ELSE BEGIN
              PackingControl."Source Type" := 0;
              PackingControl."Source Subtype" := 0;

              IF PAGE.RUNMODAL(PAGE::"Purchase List",PurchHeader) = ACTION::LookupOK THEN BEGIN
                PackingControl."Source Type" := DATABASE::"Purchase Header";
                PackingControl."Source Subtype" := PurchHeader."Document Type";
                PackingControl."Source ID" := PurchHeader."No.";
                TempInputLine := PurchHeader."No.";
                ParseInput(TempInputLine);
              END;
            END;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            IF PackingControl."Order Open" THEN BEGIN
              TransferHeader."No." := PackingControl."Source ID";
              TransferHeader.FIND;

              PAGE.RUNMODAL(PAGE::"Transfer Orders",TransferHeader);

              RefreshHeader;
            END ELSE BEGIN
              PackingControl."Source Type" := 0;
              PackingControl."Source Subtype" := 0;

              IF PAGE.RUNMODAL(PAGE::"Transfer Orders",TransferHeader) = ACTION::LookupOK THEN BEGIN
                PackingControl."Source Type" := DATABASE::"Transfer Header";
                PackingControl."Source Subtype" := 0;
                PackingControl."Source ID" := TransferHeader."No.";
                TempInputLine := TransferHeader."No.";
                ParseInput(TempInputLine);
              END;
            END;
          END;
        ELSE
          PackingControl.ErrorUnknownSourceType2;
      END;
    END;

    LOCAL PROCEDURE UpdateOrderValues@70();
    BEGIN
      PackingControl.CalculateOrderQtyToShip;
    END;

    PROCEDURE ListPackages@7();
    VAR
      Package2@1000000000 : Record 14000701;
    BEGIN
      Package2.RESET;
      IF PackingControl."Order Open" THEN BEGIN
        Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        Package2.SETRANGE("Source Type",PackingControl."Source Type");
        Package2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
        IF PackingControl."Multi Document Package" THEN
          Package2.SETFILTER("Source ID",PackingControl."Multi Document No.")
        ELSE
          Package2.SETRANGE("Source ID",PackingControl."Source ID");
      END;
      IF ShippingSetup."Location Packing" THEN
        Package2.SETRANGE("Location Code",PackingStation."Location Code");
      PAGE.RUNMODAL(PAGE::Packages,Package2);
      IF PackingControl."Package Open" THEN
        Package.GET(Package."No.");
    END;

    LOCAL PROCEDURE FormatMessage@14();
    BEGIN
      IF PackingControl."Order Open" THEN
        PackingControl."Order Message" := Text031
      ELSE
        PackingControl."Order Message" := Text032;
      IF PackingControl."Package Open" THEN
        PackingControl."Package Message" := Text031
      ELSE
        PackingControl."Package Message" := Text032;

      IF PackingControl.Prepack THEN
        PackingControl."Package Message" := PackingControl."Package Message" + Text033;

      PackingControl."Message Line" :=
        Text034 + PackingControl."Order Message" + '  ' + Text035 + PackingControl."Package Message";


      //TM 061515 UPG <TOP6584>
      IF (ShippingAgent."Shipper Type" = ShippingAgent."Shipper Type"::UPS) AND ((NOT PackingControl."Free Freight") OR
         (PackingControl."Shipping Payment Type" = PackingControl."Shipping Payment Type"::"Third Party")) AND
         PackingControl."Order Open" THEN
        PackingControl."Message Line" := 'Enter Dimensions' + ' ' + PackingControl."Message Line";
      //TM 061515 UPG </TOP6584>
    END;

    LOCAL PROCEDURE CreateShipComplete@17();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF NOT PackageMgt.CreateShipComplete(Package,PackingControl) THEN
        SetMessage(PackingControl."Error Message");

      ClearScreen;
      FormatMessage;
    END;

    LOCAL PROCEDURE PackRemaining@67();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF NOT PackageMgt.PackRemaining(Package,PackingControl) THEN
        SetMessage(PackingControl."Error Message");

      ClearScreen;
      FormatMessage;
    END;

    LOCAL PROCEDURE DeleteOpenPackage@19();
    BEGIN
      IF PackageClosedError THEN
        EXIT;

      PackageMgt.DeleteOpenPackage(Package,PackingControl);

      ClearScreen;
      FormatMessage;
    END;

    LOCAL PROCEDURE DeleteAllPackages@20();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      PackageMgt.DeleteAllPackages(PackingControl);

      ClearAllInfo;
    END;

    LOCAL PROCEDURE RateShopOrder@23();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      PackageMgt.RateShopOrder(PackingControl);
      RefreshHeader;
    END;

    LOCAL PROCEDURE RateShopPackage@31();
    BEGIN
      IF PackageClosedError THEN
        EXIT;

      Shipping.RateShopPackage(Package);
      Package.GET(Package."No.");
    END;

    PROCEDURE ViewPackage@25();
    VAR
      Package2@1000000000 : Record 14000701;
    BEGIN
      AutoCreatePackageIfNoDetails;

      IF PackageClosedError THEN
        EXIT;

      Package2.RESET;
      Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package2.SETRANGE("Source Type",PackingControl."Source Type");
      Package2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      IF PackingControl."Multi Document Package" THEN
        Package2.SETFILTER("Source ID",PackingControl."Multi Document No.")
      ELSE
        Package2.SETRANGE("Source ID",PackingControl."Source ID");
      Package2.SETRANGE("No.",Package."No.");
      IF ShippingSetup."Location Packing" THEN
        Package2.SETRANGE("Location Code",PackingStation."Location Code");
      PAGE.RUNMODAL(PAGE::Package,Package2);
      Package.GET(Package."No.");

      Package.ClearTotalValueFields;
      Package.TotalNetWeight;

      GetLineQty;
    END;

    LOCAL PROCEDURE GetLineQty@26();
    VAR
      PackageLine2@1000000000 : Record 14000702;
    BEGIN
      PackingControl.CalculateQtyToShip2;

      PackageLine2.RESET;
      PackageLine2.SETCURRENTKEY("Source Type","Source Subtype","Source ID","No.","Variant Code");
      PackageLine2.SETRANGE("Source Type",PackingControl."Source Type");
      PackageLine2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      IF PackingControl."Multi Document Package" THEN
        PackageLine2.SETFILTER("Source ID",PackingControl."Multi Document No.")
      ELSE
        PackageLine2.SETRANGE("Source ID",PackingControl."Source ID");
      PackageLine2.SETRANGE("No.",PackingControl."Input No.");
      PackageLine2.SETRANGE("Variant Code",PackingControl."Input Variant Code");
      IF ShippingSetup."Location Packing" THEN
        PackageLine2.SETRANGE("Location Code",PackingStation."Location Code");
      PackageLine2.CALCSUMS("Quantity (Base)");

      PackingControl."Packed Line Qty. (Base)" := PackageLine2."Quantity (Base)";
    END;

    LOCAL PROCEDURE ClearScreen@27();
    BEGIN
      PackingControl."Total Line Qty. (Base)" := 0;
      PackingControl."Packed Line Qty. (Base)" := 0;
      PackingControl."Message Line" := '';

      ClearInputFields;
    END;

    LOCAL PROCEDURE ClearInputFields@13();
    BEGIN
      PackingControl."Input Type" := PackingControl."Input Type"::" ";
      PackingControl."Input No." := '';
      PackingControl."Input Serial Number" := '';
      PackingControl."Pack Serial Number" := FALSE;
      PackingControl."Pack Serial Number Late" := FALSE;
      PackingControl."Input Lot Number" := '';
      PackingControl."Pack Lot Number" := FALSE;
      PackingControl."Pack Lot Number Late" := FALSE;
      PackingControl."Input Warranty Date" := 0D;
      PackingControl."Pack Warranty Date" := FALSE;
      PackingControl."Pack Warranty Date Late" := FALSE;
      PackingControl."Input Expiration Date" := 0D;
      PackingControl."Pack Expiration Date" := FALSE;
      PackingControl."Pack Expiration Date Late" := FALSE;
      PackingControl."Input Description" := '';
      PackingControl."Input Variant Code" := '';
      PackingControl."Input Unit of Measure Code" := '';
      PackingControl."Input Qty. Per Unit of Measure" := 1;
      PackingControl."Input Always Enter Quantity" := FALSE;
      PackingControl."Line Description" := '';
      PackingControl."Input Base Unit of Meas. Code" := '';
      PackingControl."Scanned No." := '';
      PackingControl."Required Shipping Agent Code" := '';
      PackingControl."Required E-Ship Agent Service" := '';
      PackingControl."Allow Other Ship. Agent/Serv." := FALSE;
    END;

    LOCAL PROCEDURE GetItemInputFields@16(Item@1000000000 : Record 27;VariantCode@1000000001 : Code[10];UnitOfMeasureCode@1000000002 : Code[10]);
    VAR
      ItemUnitOfMeasure@1000000003 : Record 5404;
      ItemVariant@1000000004 : Record 5401;
      EShipTrackingCode@1240030000 : Record 14000721;
    BEGIN
      PackingControl."Input Type" := PackingControl."Input Type"::Item;
      PackingControl."Input No." := Item."No.";
      EShipTrackingCode.GetEShipTrackingCodeItem(Item);
      PackingControl."Pack Serial Number" := EShipTrackingCode."Pack Serial Number";
      PackingControl."Pack Serial Number Late" := EShipTrackingCode."Pack Serial Number Late";
      PackingControl."Pack Lot Number" := EShipTrackingCode."Pack Lot Number";
      PackingControl."Pack Lot Number Late" := EShipTrackingCode."Pack Lot Number Late";
      PackingControl."Pack Warranty Date" := EShipTrackingCode."Pack Warranty Date";
      PackingControl."Pack Warranty Date Late" := EShipTrackingCode."Pack Warranty Date Late";
      PackingControl."Pack Expiration Date" := EShipTrackingCode."Pack Expiration Date";
      PackingControl."Pack Expiration Date Late" := EShipTrackingCode."Pack Expiration Date Late";
      PackingControl."Input Description" := Item.Description;
      PackingControl."Input Variant Code" := VariantCode;
      IF PackingControl."Input Variant Code" <> '' THEN BEGIN
        ItemVariant.GET(PackingControl."Input No.",PackingControl."Input Variant Code");
        PackingControl."Input Description" := ItemVariant.Description;
      END;
      PackingControl."Input Unit of Measure Code" := UnitOfMeasureCode;
      IF PackingControl."Input Unit of Measure Code" <> '' THEN BEGIN
        ItemUnitOfMeasure.GET(PackingControl."Input No.",PackingControl."Input Unit of Measure Code");
        PackingControl."Input Qty. Per Unit of Measure" := ItemUnitOfMeasure."Qty. per Unit of Measure";
      END;
      PackingControl."Input Always Enter Quantity" := Item."Always Enter Quantity";
      IF PackingControl."Input Unit of Measure Code" <> '' THEN
        PackingControl."Line Description" :=
          STRSUBSTNO(
            '%1 %2 (%4) %3',
            FORMAT(PackingControl."Input Type"),PackingControl."Input No.",
            PackingControl."Input Description",PackingControl."Input Unit of Measure Code")
      ELSE
        PackingControl."Line Description" :=
          STRSUBSTNO(
            '%1 %2 %3',
            FORMAT(PackingControl."Input Type"),PackingControl."Input No.",
            PackingControl."Input Description");
      PackingControl."Input Base Unit of Meas. Code" := Item."Base Unit of Measure";
    END;

    LOCAL PROCEDURE GetResourceInputFields@18(Resource@1000000000 : Record 156;UnitOfMeasureCode@1000000001 : Code[10]);
    VAR
      EShipTrackingCode@1240030000 : Record 14000721;
    BEGIN
      PackingControl."Input Type" := PackingControl."Input Type"::Resource;
      PackingControl."Input No." := Resource."No.";
      EShipTrackingCode.GetEShipTrackingCodeResource(Resource);
      PackingControl."Pack Serial Number" := EShipTrackingCode."Pack Serial Number";
      PackingControl."Pack Serial Number Late" := EShipTrackingCode."Pack Serial Number Late";
      PackingControl."Pack Lot Number" := EShipTrackingCode."Pack Lot Number";
      PackingControl."Pack Lot Number Late" := EShipTrackingCode."Pack Lot Number Late";
      PackingControl."Pack Warranty Date" := EShipTrackingCode."Pack Warranty Date";
      PackingControl."Pack Warranty Date Late" := EShipTrackingCode."Pack Warranty Date Late";
      PackingControl."Pack Expiration Date" := EShipTrackingCode."Pack Expiration Date";
      PackingControl."Pack Expiration Date Late" := EShipTrackingCode."Pack Expiration Date Late";
      PackingControl."Input Description" := Resource.Name;
      PackingControl."Input Variant Code" := '';
      PackingControl."Input Unit of Measure Code" := UnitOfMeasureCode;
      PackingControl."Input Qty. Per Unit of Measure" := 1;
      PackingControl."Input Always Enter Quantity" := Resource."Always Enter Quantity";
      PackingControl."Line Description" :=
        STRSUBSTNO(
          '%1 %2 %3',
          FORMAT(PackingControl."Input Type"),PackingControl."Input No.",
          PackingControl."Input Description");
      PackingControl."Input Base Unit of Meas. Code" := Resource."Base Unit of Measure";
    END;

    LOCAL PROCEDURE CODAmountOverride@52();
    BEGIN
      AutoCreatePackageIfNoDetails;

      IF PackageClosedError THEN
        EXIT;

      PackageMgt.CODAmountOverride(Package);
    END;

    LOCAL PROCEDURE WeightOverride@6();
    BEGIN
      AutoCreatePackageIfNoDetails;

      IF PackageClosedError THEN
        EXIT;

      PackageMgt.WeightOverride(Package);
    END;

    LOCAL PROCEDURE VolumeOverride@37();
    BEGIN
      AutoCreatePackageIfNoDetails;

      IF PackageClosedError THEN
        EXIT;

      PackageMgt.VolumeOverride(Package);
    END;

    LOCAL PROCEDURE ValueOverride@30();
    BEGIN
      AutoCreatePackageIfNoDetails;

      IF PackageClosedError THEN
        EXIT;

      PackageMgt.ValueOverride(Package);
    END;

    PROCEDURE ViewOrder@11();
    VAR
      Finished@1240030002 : Boolean;
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      REPEAT
        PackingControl.ViewSourceDocument2;

        Finished := PackingControl.TestAllDocumentsReleased;
        IF NOT Finished THEN
          Finished := CONFIRM(Text046,FALSE);
      UNTIL Finished;

      RefreshHeader;

      IF NOT PackingControl."Package Open" THEN
        PackageMgt.ShowShippingAgentClosedPackage(BillOfLading,Package,PackingControl);
    END;

    LOCAL PROCEDURE ViewOrderComments@46(OnlyIfExist@1240030000 : Boolean);
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      PackageMgt.ViewDocumentComments(PackingControl,OnlyIfExist);
    END;

    LOCAL PROCEDURE ShowPackageOptions@29();
    BEGIN
      AutoCreatePackageIfNoDetails;

      IF PackageClosedError THEN
        EXIT;

      Shipping.ShowPackageOptions(Package);
    END;

    LOCAL PROCEDURE ShowOptionPageOrder@21();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      Shipping.ShowOptPageShipDocument(PackingControl);
    END;

    LOCAL PROCEDURE ChangeTotalPackageCount@35();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF NOT PackageMgt.ChangeTotalPackageCount(Package,PackingControl) THEN
        SetMessage(PackingControl."Error Message");
    END;

    LOCAL PROCEDURE ClearAllInfo@33();
    BEGIN
      CLEAR(Package);
      PackingControl."Package Open" := FALSE;
      PackingControl."Last Package No." := 0;
      PackingControl.ClearOrderInfo;
      CLEAR(BillOfLading);
      PackingControl."Order Open" := FALSE;
      PackingControl."Message Line" := '';
      PackingControl."Display Value" := 0;
      ClearScreen;
      FormatMessage;

      IF ShippingSetup."Update Setup after Close Order" THEN
        UpdateSetup;
    END;

    LOCAL PROCEDURE ShowHelp@34();
    VAR
      BarcodeCommandsReport@1000000000 : Report 14000701;
    BEGIN
      BarcodeCommandsReport.SetRequestForm(PackingStation.Code);
      BarcodeCommandsReport.RUNMODAL;
    END;

    PROCEDURE ProcessLookup@1240030013();
    BEGIN
      IF PackingControl."Order Open" THEN BEGIN
        PackingStation.TESTFIELD("Missing Order Lines Command");

        MissingOrderLines;
      END ELSE BEGIN
        PackingStation.TESTFIELD("List Orders Command");

        ListOrders;
      END;
    END;

    PROCEDURE ShowCard@1240030014();
    BEGIN
      CASE TRUE OF
        PackingControl."Package Open":
          ViewPackage;
        PackingControl."Order Open":
          ViewOrder;
      END;
    END;

    LOCAL PROCEDURE FixAddress@36();
    BEGIN
      AutoCreatePackageIfNoDetails;

      IF PackageClosedError THEN
        EXIT;

      PackageMgt.FixAddress(Package);
    END;

    LOCAL PROCEDURE PrintAllLabels@38(PrintAllLabels@1240030000 : Boolean;PrintPackingList@1240030001 : Boolean);
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackageOpenError THEN
        EXIT;

      IF PackageMgt.PrintAllLabelsAndDocs(
           ShippingAgent,PackingControl,PrintAllLabels,PrintPackingList)
      THEN BEGIN
      END ELSE
        SetMessage(PackingControl."Error Message");
    END;

    LOCAL PROCEDURE PrintStdPackageLabel@43();
    BEGIN
      IF PackageClosedError THEN
        EXIT;

      PackageMgt.PrintStdPackageLabel(Package);

      FormatMessage;
    END;

    LOCAL PROCEDURE PrintUCC128Label@40();
    BEGIN
      IF PackageClosedError THEN
        EXIT;

      IF PackageMgt.PrintUCC128Label(Package,PackingControl) THEN BEGIN
        FormatMessage;
      END ELSE
        SetMessage(PackingControl."Error Message");
    END;

    LOCAL PROCEDURE PrintRFIDLabel@1240030004();
    BEGIN
      IF PackageClosedError THEN
        EXIT;

      IF PackageMgt.PrintRFIDLabel(Package,PackingControl) THEN BEGIN
        FormatMessage;
      END ELSE
        SetMessage(PackingControl."Error Message");
    END;

    LOCAL PROCEDURE TestLegal@44(Allowed@1000000000 : Boolean) : Boolean;
    BEGIN
      IF NOT Allowed THEN
        SetMessage(Text036);

      EXIT(Allowed);
    END;

    LOCAL PROCEDURE SetMessage@47(NewMessageLine@1000000000 : Text[250]);
    BEGIN
      PackingControl."Error Message" := NewMessageLine;
      IF PackingStation."Confirm on Errors" THEN
        MESSAGE(NewMessageLine);

      PackingControl."Message Line" := NewMessageLine;
    END;

    LOCAL PROCEDURE PackageOpenError@48() : Boolean;
    BEGIN
      IF PackingControl."Package Open" THEN BEGIN
        SetMessage(Text037);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE PackageClosedError@49() : Boolean;
    BEGIN
      IF NOT PackingControl."Package Open" THEN BEGIN
        SetMessage(Text038);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE OrderClosedError@51() : Boolean;
    BEGIN
      IF NOT PackingControl."Order Open" THEN BEGIN
        SetMessage(Text039);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE OrderOpenError@55() : Boolean;
    BEGIN
      IF PackingControl."Order Open" THEN BEGIN
        SetMessage(Text040);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CreateStandardPackages@9(PrintLabel@1000000000 : Boolean);
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      PackageMgt.CreateStandardPack(PackingControl,PrintLabel);

      GetLineQty;
    END;

    LOCAL PROCEDURE CreateExtraPackage@15();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackageOpenError THEN
        EXIT;

      IF NOT PackingControl."Package Open" THEN
        CreatePackage;

      ClearInputFields;
      PackingControl."Line Unit of Measure Code" := '';
      PackingControl."Line Quantity" := 0;

      IF PackageMgt.CreatePackageLine(Package,PackingControl,'',0,1) THEN
        GetLineQty
      ELSE
        SetMessage(PackingControl."Error Message");
    END;

    LOCAL PROCEDURE RefreshHeader@28();
    BEGIN
      IF PackingControl."Order Open" THEN BEGIN
        PackingControl.TransferFromSource2;

        IF PackingControl."Bill of Lading No." <> '' THEN
          BillOfLading.GET(PackingControl."Bill of Lading No.")
        ELSE
          CLEAR(BillOfLading);
      END;

      IF NOT PackingControl."Package Open" THEN
        PackageMgt.ShowShippingAgentClosedPackage(BillOfLading,Package,PackingControl);
    END;

    PROCEDURE UpdateScaleWeight@32();
    BEGIN
      IF PackingStation."Scale Interface Code" <> '' THEN BEGIN
        IF ScaleInterface."Scale Connection Type" =
          ScaleInterface."Scale Connection Type"::USB THEN BEGIN
            IF ScalesComm.GetUSBScaleWeight(ScaleInterface,PackingControl."Scale Weight",TRUE) THEN
              UpdateDisplayValue;
          END ELSE BEGIN
            IF ScalesComm.GetScaleWeight(ScaleInterface,PackingControl."Scale Weight",TRUE) THEN
              UpdateDisplayValue;
          END;
       END;
    END;

    PROCEDURE UpdateDisplayValue@41();
    BEGIN
      CASE PackingStation."Show What During Packing" OF
        PackingStation."Show What During Packing"::"Net Weight":
          PackingControl."Display Value" := Package.TotalNetWeight;
        PackingStation."Show What During Packing"::"Gross Weight":
          PackingControl."Display Value" := Package.TotalGrossWeight;
        PackingStation."Show What During Packing"::"Dimmed Weight":
          PackingControl."Display Value" := Package.TotalDimWeight;
        PackingStation."Show What During Packing"::Volume:
          PackingControl."Display Value" := Package.TotalVolume;
        PackingStation."Show What During Packing"::"Scale Weight":
          PackingControl."Display Value" := PackingControl."Scale Weight";
      END;

      CurrFormScaleWeightUpdate := TRUE;
    END;

    PROCEDURE MissingOrderLines@54();
    VAR
      Item@1240030000 : Record 27;
      Resource@1240030001 : Record 156;
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      ClearInputFields;

      IF PackageMgt.MissingOrderLines(PackingControl) THEN BEGIN
        CASE PackingControl."Input Type" OF
          PackingControl."Input Type"::Item:
            BEGIN
              Item.GET(PackingControl."Input No.");
              GetItemInputFields(
                Item,PackingControl."Input Variant Code",PackingControl."Input Unit of Measure Code");

              PackingControl.GetLineInfo;

              IF NOT EnterSerialLotNo THEN
                EXIT;

              IF NOT PackingControl."Package Open" THEN BEGIN
                CreatePackage;
                COMMIT;
              END;
              CreatePackageLine;

              UpdateOrderValues;
            END;
          PackingControl."Input Type"::Resource:
            BEGIN
              Resource.GET(PackingControl."Input No.");
              GetResourceInputFields(
                Resource,PackingControl."Input Unit of Measure Code");

              PackingControl.GetLineInfo;

              IF NOT EnterSerialLotNo THEN
                EXIT;

              IF NOT PackingControl."Package Open" THEN BEGIN
                CreatePackage;
                COMMIT;
              END;
              CreatePackageLine;

              UpdateOrderValues;
            END;
          ELSE
            ERROR(Text042,PackingControl."Input Type");
        END;
      END;
    END;

    LOCAL PROCEDURE CreateMiscPackage@56();
    BEGIN
      IF OrderOpenError THEN
        EXIT;

      PackageMgt.CreateMiscPackage;
    END;

    LOCAL PROCEDURE CreateManifest@58();
    BEGIN
      IF OrderOpenError THEN
        EXIT;

      PackageMgt.CreateManifest;
    END;

    LOCAL PROCEDURE MultiDocPacking@59(UseLookup@1240030000 : Boolean);
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF NOT PackageMgt.MultiDocPacking(SalesSetup,PackingControl,UseLookup) THEN
        SetMessage(PackingControl."Error Message");
    END;

    LOCAL PROCEDURE SetStandardOption@60(OptionCode@1000000000 : Code[20]);
    VAR
      StandardOptionSetup@1240030000 : Record 14000716;
      i@1240030001 : Integer;
      CommandToExecute@1240030002 : Text[250];
    BEGIN
      StandardOptionSetup.GET(OptionCode);

      CASE TRUE OF
        (NOT PackingControl."Order Open") OR
        (StandardOptionSetup."Print Report ID" <> 0):
          BEGIN
            IF NOT PackageMgt.PrintStandardSetupOptionReport(
                     PackingControl,Package,PackingControl,StandardOptionSetup)
            THEN
              SetMessage(PackingControl."Error Message");
          END;
        StandardOptionSetup."1st Command" <> '':
          BEGIN
            IF NOT PackingControl."Processing Multiple Commands" THEN BEGIN
              PackingControl."Error Message" := '';
              PackingControl."Processing Multiple Commands" := TRUE;

              FOR i := 1 TO 10 DO BEGIN
                CASE i OF
                  1:
                    CommandToExecute := StandardOptionSetup."1st Command";
                  2:
                    CommandToExecute := StandardOptionSetup."2nd Command";
                  3:
                    CommandToExecute := StandardOptionSetup."3rd Command";
                  4:
                    CommandToExecute := StandardOptionSetup."4th Command";
                  5:
                    CommandToExecute := StandardOptionSetup."5th Command";
                  6:
                    CommandToExecute := StandardOptionSetup."6th Command";
                  7:
                    CommandToExecute := StandardOptionSetup."7th Command";
                  8:
                    CommandToExecute := StandardOptionSetup."8th Command";
                  9:
                    CommandToExecute := StandardOptionSetup."9th Command";
                  10:
                    CommandToExecute := StandardOptionSetup."10th Command";
                END;

                IF (CommandToExecute <> '') AND (PackingControl."Error Message" = '') THEN BEGIN
                  CommandToExecute := UPPERCASE(CommandToExecute);
                  ParseInput(CommandToExecute);
                END;
              END;

              PackingControl."Processing Multiple Commands" := FALSE;
            END;
          END;
        ELSE
          BEGIN
            AutoCreatePackageIfNoDetails;

            IF PackageClosedError THEN
              EXIT;

            PackageMgt.SetStandardSetupOptionPage(Package,OptionCode);
          END;
      END;
    END;

    LOCAL PROCEDURE SetPrepack@61();
    BEGIN
      PackingControl.Prepack := NOT PackingControl.Prepack;

      IF PackingControl."Package Open" THEN BEGIN
        IF PackingControl.Prepack THEN BEGIN
          ShippingSetup.TESTFIELD("Prepack Shipping Agent Code");
          ShippingSetup.TESTFIELD("Prepack Shipping Agent Service");

          Package.GET(Package."No.");
          Package.TESTFIELD(Closed,FALSE);
          Package.VALIDATE("Shipping Agent Code",ShippingSetup."Prepack Shipping Agent Code");
          Package.VALIDATE("Shipping Agent Service",ShippingSetup."Prepack Shipping Agent Service");
          Package.MODIFY(TRUE);
        END ELSE BEGIN
          Package.GET(Package."No.");
          Package.TESTFIELD(Closed,FALSE);
          IF (PackingControl."Bill of Lading No." <> '') AND ShippingSetup."Use Shipping Agent from BOL"
          THEN BEGIN
            Package.VALIDATE("Shipping Agent Code",BillOfLading."Shipping Agent Code");
            Package.VALIDATE("Shipping Agent Service",BillOfLading."Shipping Agent Service");
          END ELSE BEGIN
            Package.VALIDATE("Shipping Agent Code",PackingControl."Shipping Agent Code");
            Package.VALIDATE("Shipping Agent Service",PackingControl."E-Ship Agent Service");
          END;
          Package.MODIFY(TRUE);
        END;
      END ELSE
        PackageMgt.ShowShippingAgentClosedPackage(BillOfLading,Package,PackingControl);

      FormatMessage;
    END;

    LOCAL PROCEDURE ResetPrepack@62();
    BEGIN
    END;

    LOCAL PROCEDURE ChangeShippingAgent@63(PrintLabel@1000000000 : Boolean);
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackageOpenError THEN
        EXIT;

      PackageMgt.ChangeShippingAgent(
        BillOfLading,PackingControl,PrintLabel);
    END;

    LOCAL PROCEDURE OpenPackage@64();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackageOpenError THEN
        EXIT;

      IF PackageMgt.OpenPackage(BillOfLading,Package,PackingControl) THEN BEGIN
        FormatMessage;
      END ELSE
        SetMessage(PackingControl."Error Message");
    END;

    LOCAL PROCEDURE CreateBillOfLading@65();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackageMgt.CreateBillOfLading(PackingControl) THEN BEGIN
        RefreshHeader;

        FormatMessage;
      END ELSE
        SetMessage(PackingControl."Error Message");
    END;

    LOCAL PROCEDURE ViewBillOfLading@5();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackageMgt.ViewBillOfLading(PackingControl) THEN BEGIN
        RefreshHeader;

        FormatMessage;
      END ELSE
        SetMessage(PackingControl."Error Message");
    END;

    PROCEDURE OpenWithOrder@68(SetOpenSourceType@1240030000 : Integer;"SetOpenSourcec Subtype"@1240030001 : Integer;SetOpenSourceID@1240030002 : Code[20];SetCloseWhenCloseOrder@1240030003 : Boolean);
    BEGIN
      PackingControl."Open Source Type" := SetOpenSourceType;
      PackingControl."Open Source Subtype" := "SetOpenSourcec Subtype";
      PackingControl."Open Source ID" := SetOpenSourceID;
      PackingControl."Close When Close Order" := SetCloseWhenCloseOrder;
    END;

    PROCEDURE ResetOrderQuantity@71();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      PackageMgt.ResetQtyToShip(PackingControl);
    END;

    PROCEDURE SetOrderQuantity@78();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      PackageMgt.SetQtyToShipToPacked(PackingControl);
    END;

    PROCEDURE ToggleAlwaysEnterQuantity@72();
    BEGIN
      PackingControl."Always Enter Quantity" := NOT PackingControl."Always Enter Quantity";
    END;

    PROCEDURE ShowItemResource@74();
    VAR
      Item@1240030000 : Record 27;
      resource@1240030001 : Record 156;
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackingControl."Input No." = '' THEN BEGIN
        SetMessage(Text043);
        EXIT;
      END;

      CASE PackingControl."Input Type" OF
        PackingControl."Input Type"::Item:
          BEGIN
            Item.GET(PackingControl."Input No.");

            PAGE.RUNMODAL(PAGE::"Item Card",Item);
          END;
        PackingControl."Input Type"::Resource:
          BEGIN
            resource.GET(PackingControl."Input No.");

            PAGE.RUNMODAL(PAGE::"Resource Card",resource);
          END;
        ELSE
          SetMessage(Text044);
      END;
    END;

    PROCEDURE OpenMainMenu@75();
    BEGIN
      PAGE.RUN(330);
    END;

    PROCEDURE ViewWarehouseActivityLines@79(InventoryPick@1240030000 : Boolean);
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackageMgt.ViewWarehouseActivityLines(PackingControl,InventoryPick,TRUE) THEN BEGIN
        RefreshHeader;

        FormatMessage;
      END ELSE
        SetMessage(PackingControl."Error Message");
    END;

    PROCEDURE ViewWarehouseShipmentLines@80();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackageMgt.ViewWarehouseShipmentLines(PackingControl,TRUE) THEN BEGIN
        RefreshHeader;

        FormatMessage;
      END ELSE
        SetMessage(PackingControl."Error Message");
    END;

    PROCEDURE ViewWarehouseStatistics@1240030010();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackageMgt.ViewWarehouseStatistics(PackingControl) THEN BEGIN
        RefreshHeader;

        FormatMessage;
      END ELSE
        SetMessage(PackingControl."Error Message");
    END;

    PROCEDURE OpenFastPack@81();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackageOpenError THEN
        EXIT;

      IF NOT PackageMgt.OpenFastPack(PackingControl) THEN
        SetMessage(PackingControl."Error Message")
      ELSE
        ClearAllInfo;
    END;

    PROCEDURE AutoCreatePackageIfNoDetails@83();
    BEGIN
      IF NOT PackingControl."Package Open" AND PackingStation."Auto Create Pack. When No Det." THEN BEGIN
        CreatePackage;
        COMMIT;
      END;
    END;

    PROCEDURE RenumberAllPackages@82(PrintLabel@1240030000 : Boolean;FedexMasterLabel@1240030001 : Boolean);
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackageOpenError THEN
        EXIT;

      IF PackingControl.Prepack THEN
        SetPrepack;

      IF NOT PackageMgt.RenumberAllPackages(
               BillOfLading,ShippingAgent,PackingControl,
               PrintLabel,FedexMasterLabel)
      THEN
        SetMessage(PackingControl."Error Message");
    END;

    PROCEDURE ScanSerialLot@84(ScanAll@1240030000 : Boolean);
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackageOpenError THEN
        EXIT;

      IF PackingControl.Prepack THEN
        SetPrepack;

      IF NOT PackageMgt.ScanSerialLot(
               PackingControl,ScanAll,PackingControl."Processing Multiple Commands")
      THEN
        SetMessage(PackingControl."Error Message");
    END;

    PROCEDURE PackingStatus@85();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      PackageMgt.PackageStatus(PackingControl);
    END;

    PROCEDURE EnterWarehousePackage@86();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackageOpenError THEN
        EXIT;

      IF NOT WhsePickAndPackingMgt.EnterTote(PackingControl) THEN BEGIN
        SetMessage(PackingControl."Error Message");
        EXIT;
      END;

      CreateWarehousePackage;
    END;

    PROCEDURE SelectWarehousePackage@87();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackageOpenError THEN
        EXIT;

      IF NOT WhsePickAndPackingMgt.SelectTote(PackingControl) THEN BEGIN
        SetMessage(PackingControl."Error Message");
        EXIT;
      END;

      CreateWarehousePackage;
    END;

    PROCEDURE CreateWarehousePackage@88();
    VAR
      Item@1240030000 : Record 27;
      Quantity@1240030001 : Decimal;
    BEGIN
      ClearInputFields;
      IF WhsePickAndPackingMgt.GetLine(PackingControl,Quantity,TRUE) THEN BEGIN
        IF NOT PackageMgt.CreatePackage(Package,PackingControl)
        THEN BEGIN
          SetMessage(PackingControl."Error Message");
          EXIT;
        END;

        Package."Tote No." := PackingControl."Tote No.";
        Package.MODIFY(TRUE);
        COMMIT;

        REPEAT
          IF Item.GET(PackingControl."Input No.") THEN
            GetItemInputFields(
              Item,PackingControl."Input Variant Code",
              PackingControl."Input Unit of Measure Code");

          IF NOT PackingControl.GetLineInfo THEN BEGIN
            SetMessage(Text008);

            ClearInputFields;
            UpdateOrderValues;

            EXIT;
          END;

          IF NOT PackageMgt.CreatePackageLine(
                   Package,PackingControl,
                   PackingControl."Line Unit of Measure Code",PackingControl."Line Quantity",
                   Quantity)
          THEN BEGIN
            SetMessage(PackingControl."Error Message");
            EXIT;
          END;

          ClearInputFields;
        UNTIL NOT WhsePickAndPackingMgt.GetLine(PackingControl,Quantity,FALSE);

        UpdateOrderValues;
        FormatMessage;
      END ELSE BEGIN
        SetMessage(
          STRSUBSTNO(
            Text045,PackingControl."Tote No."));
        EXIT;
      END;
    END;

    PROCEDURE SelectWavePickOrder@1240030017();
    VAR
      Bin@1240030002 : Record 7354;
      WarehouseActivityLine@1240030003 : Record 5767;
      WavePickBin@1240030004 : Code[20];
      TempInputLine@1240030001 : Text[250];
    BEGIN
      IF OrderOpenError THEN
        EXIT;

      Bin.RESET;
      IF ShippingSetup."Location Packing" THEN
        Bin.SETRANGE("Location Code",PackingStation."Location Code");
      Bin.SETRANGE(Empty,FALSE);
      WavePickBin := WhsePickAndPackingMgt.GetWavePickBin(Bin);
      IF WavePickBin = '' THEN BEGIN
        SetMessage(Text022);
        EXIT;
      END;

      WarehouseActivityLine.RESET;
      WarehouseActivityLine.SETRANGE("Activity Type",WarehouseActivityLine."Activity Type"::Pick);
      WarehouseActivityLine.SETRANGE("Action Type",WarehouseActivityLine."Action Type"::Take);
      IF ShippingSetup."Location Packing" THEN
        WarehouseActivityLine.SETRANGE("Location Code",PackingStation."Location Code")
      ELSE
        WarehouseActivityLine.SETRANGE("Location Code",Bin."Location Code");
      WarehouseActivityLine.SETRANGE("Bin Code",WavePickBin);
      WarehouseActivityLine.SETFILTER("Source Type",'<>0');
      WarehouseActivityLine.SETFILTER("Source No.",'<>%1','');
      IF NOT WarehouseActivityLine.FIND('-') THEN BEGIN
        SetMessage(Text026);
        EXIT;
      END;

      IF PAGE.RUNMODAL(0,WarehouseActivityLine) <> ACTION::LookupOK THEN BEGIN
        SetMessage(Text027);
        EXIT;
      END;

      CASE WarehouseActivityLine."Source Type" OF
        DATABASE::"Sales Line":
          BEGIN
            WarehouseActivityLine.TESTFIELD("Source Subtype",1);
            WarehouseActivityLine.TESTFIELD("Source No.");

            PackingControl."Source Type" := DATABASE::"Sales Header";
            PackingControl."Source Subtype" := WarehouseActivityLine."Source Subtype";
            PackingControl."Source ID" := WarehouseActivityLine."Source No.";
            TempInputLine := WarehouseActivityLine."Source No.";
            ParseInput(TempInputLine);
          END;
        DATABASE::"Purchase Line":
          BEGIN
            WarehouseActivityLine.TESTFIELD("Source Subtype",5);
            WarehouseActivityLine.TESTFIELD("Source No.");

            PackingControl."Source Type" := DATABASE::"Purchase Header";
            PackingControl."Source Subtype" := WarehouseActivityLine."Source Subtype";
            PackingControl."Source ID" := WarehouseActivityLine."Source No.";
            TempInputLine := WarehouseActivityLine."Source No.";
            ParseInput(TempInputLine);
          END;
        DATABASE::"Transfer Line":
          BEGIN
            WarehouseActivityLine.TESTFIELD("Source No.");

            PackingControl."Source Type" := DATABASE::"Transfer Header";
            PackingControl."Source Subtype" := 0;
            PackingControl."Source ID" := WarehouseActivityLine."Source No.";
            TempInputLine := WarehouseActivityLine."Source No.";
            ParseInput(TempInputLine);
          END;
        ELSE BEGIN
          SetMessage(
            STRSUBSTNO(
              Text028,
              WarehouseActivityLine."Source Type",WarehouseActivityLine."Source Subtype",
              WarehouseActivityLine."Source No."));
          EXIT;
        END;
      END;
    END;

    PROCEDURE ExportAllLabels@89(ShippingLabels@1240030000 : Boolean;ItemResourceLabels@1240030001 : Boolean);
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackageOpenError THEN
        EXIT;

      IF NOT PackageMgt.ExportAllLabels(
               BillOfLading,PackingControl,ShippingLabels,ItemResourceLabels)
      THEN
        SetMessage(PackingControl."Error Message");
    END;

    PROCEDURE PrintItemResourceLabel@90();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      PackageMgt.PrintItemResourceLabel(Package,PackingControl);
    END;

    PROCEDURE PrintBOLLabel@1240030002();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF NOT PackageMgt.PrintBillOfLadingLabel(BillOfLading,PackingControl) THEN
        SetMessage(PackingControl."Error Message");
    END;

    PROCEDURE DefaultOption@1240030003(DefaultOption@1240030000 : Integer);
    BEGIN
      CASE DefaultOption OF
        PackingStation."Default F3 Option"::"Create Package":
          BEGIN
            PackingStation.TESTFIELD("Close Package Command");
            ClosePackage(FALSE,0,0,0);
          END;
        PackingStation."Default F3 Option"::"Create Package Print":
          BEGIN
            PackingStation.TESTFIELD("Close Package Print Command");
            ClosePackage(TRUE,0,0,0);
          END;
        PackingStation."Default F3 Option"::"Create Standard Pack":
          BEGIN
            PackingStation.TESTFIELD("Create Std. Packages Cmd.");
            CreateStandardPackages(FALSE);
          END;
        PackingStation."Default F3 Option"::"Create Standard Pack Print":
          BEGIN
            PackingStation.TESTFIELD("Create Std. Packages Print Cmd");
            CreateStandardPackages(TRUE);
          END;
        PackingStation."Default F3 Option"::"Pack All":
          BEGIN
            PackingStation.TESTFIELD("Pack All Command");
            PackingStation.TESTFIELD("Close Package Command");

            CreateShipComplete;
            ClosePackage(FALSE,0,0,0);
          END;
        PackingStation."Default F3 Option"::"Pack All Print":
          BEGIN
            PackingStation.TESTFIELD("Pack All Command");
            PackingStation.TESTFIELD("Close Package Print Command");

            CreateShipComplete;
            ClosePackage(TRUE,0,0,0);
          END;
        PackingStation."Default F3 Option"::"Pack Remaining":
          BEGIN
            PackingStation.TESTFIELD("Pack Remaining Command");
            PackingStation.TESTFIELD("Close Package Command");

            PackRemaining;
            ClosePackage(FALSE,0,0,0);
          END;
        PackingStation."Default F3 Option"::"Pack Remaining Print":
          BEGIN
            PackingStation.TESTFIELD("Pack Remaining Command");
            PackingStation.TESTFIELD("Close Package Print Command");

            PackRemaining;
            ClosePackage(TRUE,0,0,0);
          END;
        PackingStation."Default F3 Option"::"Custom 1":
          BEGIN
            ERROR(Text053);
          END;
        PackingStation."Default F3 Option"::"Custom 2":
          BEGIN
            ERROR(Text053);
          END;
        PackingStation."Default F3 Option"::"Custom 3":
          BEGIN
            ERROR(Text053);
          END;
        ELSE
          ERROR(Text053);
      END;
    END;

    LOCAL PROCEDURE ExportDoc@1240031001();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackingControl."Total Order Qty. (Base)" = 0 THEN
        ERROR(Text050);

      PackingControl."Error Message" := '';

      IF PackageMgt.ExportDoc(PackingControl,TRUE) THEN BEGIN
        RefreshHeader;
        FormatMessage;
      END ELSE
        IF PackingControl."Error Message" <> '' THEN
          SetMessage(PackingControl."Error Message");
    END;

    LOCAL PROCEDURE ViewExportDoc@1240031000();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      PackingControl."Error Message" := '';

      PackageMgt.ViewExportDoc(PackingControl);
      RefreshHeader;
      FormatMessage;
    END;

    LOCAL PROCEDURE UpdateExportDocDetail@1240030012();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackingControl."Total Order Qty. (Base)" = 0 THEN
        ERROR(Text050);

      PackingControl."Error Message" := '';
      PackageMgt.UpdateExportDocDetail(PackingControl);
    END;

    PROCEDURE RegisterWarehousePick@1240030005();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF NOT PackageMgt.RegisterWarehousePick(PackingControl) THEN
        SetMessage(PackingControl."Error Message");
    END;

    PROCEDURE CreateLinesFromPostedReceive@1240030009(VAR CurrentInputLine@1240030002 : Text[250]) : Boolean;
    VAR
      Item@1240030001 : Record 27;
      PostedReceiveLine@1240030000 : Record 14000604;
      PackageLineTmp@1240030005 : TEMPORARY Record 14000702;
      FastPackLineTmp@1240030007 : TEMPORARY Record 14000711;
      PackingRule@1240030008 : Record 14000715;
      CreateLoop@1240030003 : Boolean;
      Finished@1240030004 : Boolean;
      LastLineNo@1240030006 : Integer;
    BEGIN
      CreateLoop := FALSE;
      Finished := FALSE;

      PackingRule.GetPackingRule(
        PackingControl."Ship-to Type",PackingControl."Ship-to No.",PackingControl."Ship-to Code");

      PostedReceiveLine.RESET;
      PostedReceiveLine.SETRANGE("Receive No.",PackingControl."Input No.");
      REPEAT
        IF PostedReceiveLine.FIND('-') THEN BEGIN
          IF CreateLoop THEN
            IF NOT PackingControl."Package Open" THEN BEGIN
              CreatePackage;
              COMMIT;
            END;

          REPEAT
            IF PostedReceiveLine.Type = PostedReceiveLine.Type::Receive THEN BEGIN
              SetMessage(STRSUBSTNO(Text042,PostedReceiveLine.Type));
              EXIT(FALSE);
            END;

            ClearInputFields;
            PackingControl."Scanned No." :=
              COPYSTR(CurrentInputLine,1,MAXSTRLEN(PackingControl."Scanned No."));
            PackingControl."Input Serial Number" := '';
            PackingControl."Input Lot Number" := '';
            PackingControl."Input Warranty Date" := 0D;
            PackingControl."Input Expiration Date" := 0D;
            PackingControl."Input Type" := PostedReceiveLine.Type;
            PackingControl."Input No." := PostedReceiveLine."No.";
            PackingControl."Input Variant Code" := PostedReceiveLine."Variant Code";
            PackingControl."Input Unit of Measure Code" := PostedReceiveLine."Unit of Measure Code";
            IF PostedReceiveLine.Type = PostedReceiveLine.Type::Item THEN
              IF Item.GET(PackingControl."Input No.") THEN
                GetItemInputFields(
                  Item,PackingControl."Input Variant Code",
                  PackingControl."Input Unit of Measure Code");

            IF CreateLoop AND ShippingSetup."Use Item Tracking Details" THEN BEGIN
              IF PackingControl."Pack Serial Number" AND NOT
                 PackingControl."Pack Serial Number Late"
              THEN
                PackingControl."Input Serial Number" := PostedReceiveLine."Serial No.";
              IF PackingControl."Pack Lot Number" AND NOT
                 PackingControl."Pack Lot Number Late"
              THEN
                PackingControl."Input Lot Number" := PostedReceiveLine."Lot No.";
              IF PackingControl."Pack Warranty Date" AND NOT
                 PackingControl."Pack Warranty Date Late"
              THEN
                PackingControl."Input Warranty Date" := PostedReceiveLine."Warranty Date";
              IF PackingControl."Pack Expiration Date" AND NOT
                 PackingControl."Pack Expiration Date Late"
              THEN
                PackingControl."Input Expiration Date" := PostedReceiveLine."Expiration Date";
            END;

            IF CreateLoop THEN BEGIN
              IF NOT PackageMgt.CreatePackageLine(
                       Package,PackingControl,PackingControl."Line Unit of Measure Code",
                       PackingControl."Line Quantity",PostedReceiveLine.Quantity)
              THEN BEGIN
                SetMessage(PackingControl."Error Message");

                ClearInputFields;
                UpdateOrderValues;
                EXIT(FALSE);
              END ELSE
                COMMIT;
            END ELSE BEGIN
              IF NOT CheckMultipleCreateLine(CurrentInputLine,PostedReceiveLine.Quantity) THEN
                EXIT(FALSE);

              IF PostedReceiveLine.Type > PostedReceiveLine.Type::" " THEN BEGIN
                PackageLineTmp.RESET;
                PackageLineTmp.SETRANGE(Type,PostedReceiveLine.Type);
                PackageLineTmp.SETRANGE("No.",PostedReceiveLine."No.");
                PackageLineTmp.SETRANGE("Variant Code",PostedReceiveLine."Variant Code");
                IF PackageLineTmp.FIND('-') THEN BEGIN
                  PackageLineTmp."Quantity (Base)" :=
                    PackageLineTmp."Quantity (Base)" + PostedReceiveLine."Quantity (Base)";
                  PackageLineTmp.MODIFY;
                END ELSE BEGIN
                  LastLineNo := LastLineNo + 1;
                  PackageLineTmp.INIT;
                  PackageLineTmp."Line No." := LastLineNo;
                  PackageLineTmp.Type := PostedReceiveLine.Type;
                  PackageLineTmp."No." := PostedReceiveLine."No.";
                  PackageLineTmp."Variant Code" := PostedReceiveLine."Variant Code";
                  PackageLineTmp."Quantity (Base)" := PostedReceiveLine."Quantity (Base)";
                  PackageLineTmp.INSERT;
                END;
              END;
            END;
          UNTIL PostedReceiveLine.NEXT = 0;
        END;

        IF NOT CreateLoop THEN BEGIN
          CreateLoop := TRUE;

          PackageLineTmp.RESET;
          IF PackageLineTmp.FIND('-') THEN
            REPEAT
              PackageMgt.UpdateFastPackLines(
                PackingControl,FastPackLineTmp,PackingRule,FALSE,FALSE,FALSE,
                PackageLineTmp.Type,PackageLineTmp."No.",PackageLineTmp."Variant Code");
              IF FastPackLineTmp."Remaining Qty. to Pack (Base)" < PackageLineTmp."Quantity (Base)"
              THEN BEGIN
                IF PackageLineTmp."Variant Code" <> '' THEN
                  SetMessage(
                    STRSUBSTNO(
                      Text054,PackageLineTmp.Type,
                      PackageLineTmp."No." + ' ' + PackageLineTmp."Variant Code"))
                ELSE
                  SetMessage(STRSUBSTNO(Text054,PackageLineTmp.Type,PackageLineTmp."No."));
                EXIT(FALSE);
              END;
            UNTIL PackageLineTmp.NEXT = 0;
        END ELSE
          Finished := TRUE;
      UNTIL Finished;

      ClearInputFields;
      UpdateOrderValues;
      EXIT(TRUE);
    END;

    PROCEDURE CreateLinesFromPostedPackage@1240030008(VAR CurrentInputLine@1240030002 : Text[250]) : Boolean;
    VAR
      Item@1240030001 : Record 27;
      PostedPackageLine@1240030000 : Record 14000705;
      PackageLineTmp@1240030007 : TEMPORARY Record 14000702;
      FastPackLineTmp@1240030006 : TEMPORARY Record 14000711;
      PackingRule@1240030008 : Record 14000715;
      CreateLoop@1240030005 : Boolean;
      Finished@1240030004 : Boolean;
      LastLineNo@1240030003 : Integer;
    BEGIN
      CreateLoop := FALSE;
      Finished := FALSE;

      PackingRule.GetPackingRule(
        PackingControl."Ship-to Type",PackingControl."Ship-to No.",PackingControl."Ship-to Code");

      PostedPackageLine.RESET;
      PostedPackageLine.SETRANGE("Package No.",PackingControl."Input No.");
      REPEAT
        IF PostedPackageLine.FIND('-') THEN BEGIN
          IF CreateLoop THEN
            IF NOT PackingControl."Package Open" THEN BEGIN
              CreatePackage;
              COMMIT;
            END;

          REPEAT
            IF (PostedPackageLine.Type = PostedPackageLine.Type::Package) OR
               (PostedPackageLine.Type = PostedPackageLine.Type::Resource)
            THEN BEGIN
              SetMessage(STRSUBSTNO(Text042,PostedPackageLine.Type));
              EXIT(FALSE);
            END;

            ClearInputFields;
            PackingControl."Scanned No." :=
              COPYSTR(CurrentInputLine,1,MAXSTRLEN(PackingControl."Scanned No."));
            PackingControl."Input Serial Number" := '';
            PackingControl."Input Lot Number" := '';
            PackingControl."Input Warranty Date" := 0D;
            PackingControl."Input Expiration Date" := 0D;
            PackingControl."Input Type" := PostedPackageLine.Type;
            PackingControl."Input No." := PostedPackageLine."No.";
            PackingControl."Input Variant Code" := PostedPackageLine."Variant Code";
            PackingControl."Input Unit of Measure Code" := PostedPackageLine."Unit of Measure Code";
            IF PostedPackageLine.Type = PostedPackageLine.Type::Item THEN
              IF Item.GET(PackingControl."Input No.") THEN
                GetItemInputFields(
                  Item,PackingControl."Input Variant Code",
                  PackingControl."Input Unit of Measure Code");

            IF CreateLoop AND ShippingSetup."Use Item Tracking Details" THEN BEGIN
              IF PackingControl."Pack Serial Number" AND NOT
                 PackingControl."Pack Serial Number Late"
              THEN
                PackingControl."Input Serial Number" := PostedPackageLine."Serial No.";
              IF PackingControl."Pack Lot Number" AND NOT
                 PackingControl."Pack Lot Number Late"
              THEN
                PackingControl."Input Lot Number" := PostedPackageLine."Lot No.";
              IF PackingControl."Pack Warranty Date" AND NOT
                 PackingControl."Pack Warranty Date Late"
              THEN
                PackingControl."Input Warranty Date" := PostedPackageLine."Warranty Date";
              IF PackingControl."Pack Expiration Date" AND NOT
                 PackingControl."Pack Expiration Date Late"
              THEN
                PackingControl."Input Expiration Date" := PostedPackageLine."Expiration Date";
            END;

            IF CreateLoop THEN BEGIN
              IF NOT PackageMgt.CreatePackageLine(
                       Package,PackingControl,PackingControl."Line Unit of Measure Code",
                       PackingControl."Line Quantity",PostedPackageLine.Quantity)
              THEN BEGIN
                SetMessage(PackingControl."Error Message");

                ClearInputFields;
                UpdateOrderValues;
                EXIT(FALSE);
              END ELSE
                COMMIT;
            END ELSE BEGIN
              IF NOT CheckMultipleCreateLine(CurrentInputLine,PostedPackageLine.Quantity) THEN
                EXIT(FALSE);

              IF PostedPackageLine.Type > PostedPackageLine.Type::" " THEN BEGIN
                PackageLineTmp.RESET;
                PackageLineTmp.SETRANGE(Type,PostedPackageLine.Type);
                PackageLineTmp.SETRANGE("No.",PostedPackageLine."No.");
                PackageLineTmp.SETRANGE("Variant Code",PostedPackageLine."Variant Code");
                IF PackageLineTmp.FIND('-') THEN BEGIN
                  PackageLineTmp."Quantity (Base)" :=
                    PackageLineTmp."Quantity (Base)" + PostedPackageLine."Quantity (Base)";
                  PackageLineTmp.MODIFY;
                END ELSE BEGIN
                  LastLineNo := LastLineNo + 1;
                  PackageLineTmp.INIT;
                  PackageLineTmp."Line No." := LastLineNo;
                  PackageLineTmp.Type := PostedPackageLine.Type;
                  PackageLineTmp."No." := PostedPackageLine."No.";
                  PackageLineTmp."Variant Code" := PostedPackageLine."Variant Code";
                  PackageLineTmp."Quantity (Base)" := PostedPackageLine."Quantity (Base)";
                  PackageLineTmp.INSERT;
                END;
              END;
            END;
          UNTIL PostedPackageLine.NEXT = 0;
        END;

        IF NOT CreateLoop THEN BEGIN
          CreateLoop := TRUE;

          PackageLineTmp.RESET;
          IF PackageLineTmp.FIND('-') THEN
            REPEAT
              PackageMgt.UpdateFastPackLines(
                PackingControl,FastPackLineTmp,PackingRule,FALSE,FALSE,FALSE,
                PackageLineTmp.Type,PackageLineTmp."No.",PackageLineTmp."Variant Code");
              IF FastPackLineTmp."Remaining Qty. to Pack (Base)" < PackageLineTmp."Quantity (Base)"
              THEN BEGIN
                IF PackageLineTmp."Variant Code" <> '' THEN
                  SetMessage(
                    STRSUBSTNO(
                      Text054,PackageLineTmp.Type,
                      PackageLineTmp."No." + ' ' + PackageLineTmp."Variant Code"))
                ELSE
                  SetMessage(STRSUBSTNO(Text054,PackageLineTmp.Type,PackageLineTmp."No."));
                EXIT(FALSE);
              END;
            UNTIL PackageLineTmp.NEXT = 0;
        END ELSE
          Finished := TRUE;
      UNTIL Finished;

      ClearInputFields;
      UpdateOrderValues;
      EXIT(TRUE);
    END;

    PROCEDURE CheckMultipleCreateLine@1240030001(VAR CurrentInputLine@1240030000 : Text[250];FixedQuantity@1240030001 : Decimal) : Boolean;
    BEGIN
      IF NOT PackingControl.GetLineInfo THEN BEGIN
        IF PackingControl."Input Variant Code" <> '' THEN
          SetMessage(
            STRSUBSTNO(
              Text008,
              STRSUBSTNO(
                '%1 %2 %3',PackingControl."Input Type",PackingControl."Input No.",
                PackingControl."Input Variant Code")))
        ELSE
          SetMessage(
            STRSUBSTNO(
              Text008,
              STRSUBSTNO(
                '%1 %2',PackingControl."Input Type",PackingControl."Input No.")));
                CurrentInputLine := '';

        ClearInputFields;
        UpdateOrderValues;
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE CreateFedExFreightBillOfLading@1240020000(VAR BillOfLading@1240030000 : Record 14000822);
    VAR
      FedExTransWebServices@1240020000 : Codeunit 14000787;
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackageOpenError THEN
        EXIT;

      IF PackingControl.Prepack THEN
        SetPrepack;

      BillOfLading.TESTFIELD("No.");
      FedExTransWebServices.CreateFedExBOL(BillOfLading);
    END;

    PROCEDURE SetFedExFreightPalletized@1240020001(BillOfLading@1240030000 : Record 14000822);
    VAR
      FedExTransWebServices@1240020000 : Codeunit 14000787;
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF PackageOpenError THEN
        EXIT;

      IF PackingControl.Prepack THEN
        SetPrepack;

      BillOfLading.TESTFIELD("No.");
      FedExTransWebServices.FedExFreightPalletized(BillOfLading."No.");
    END;

    PROCEDURE ViewWarehousePickLines@1100170000();
    BEGIN
      //TM BEG 061515
      IF OrderClosedError THEN
        EXIT;

      IF PackageMgt.ViewWarehousePickLines(PackingControl) THEN BEGIN
        RefreshHeader;

        FormatMessage;
      END ELSE
        SetMessage(PackingControl."Error Message");
      //TM END 061515
    END;

    PROCEDURE TestScale@1000000000();
    VAR
      ScaleComm@1000000001 : Codeunit 37031002;
      Weight@1000000000 : Decimal;
      ScaleInterface@1000000002 : Record 14000746;
    BEGIN
      //TM BEG 082715
      PackingStation.TESTFIELD("Scale Interface Code");
      ScaleInterface.GET(PackingStation."Scale Interface Code");
      IF ScaleInterface."Scale Connection Type" = ScaleInterface."Scale Connection Type"::USB THEN
        ScaleComm.GetUSBScaleWeight(ScaleInterface,Weight,FALSE)
      ELSE
        ScaleComm.GetScaleWeight(ScaleInterface,Weight,FALSE);

      MESSAGE('Received Weight: %1',Weight);
      //TM END 082715
    END;

    PROCEDURE RefreshPackFlag@1000000001();
    VAR
      SalesLine@1000000000 : Record 37;
    BEGIN
      //<TPZ1383>
      IF PackingControl."Source Type" <> DATABASE::"Sales Header" THEN
        EXIT;

      SalesLine.SETRANGE("Document Type", PackingControl."Source Subtype");
      IF PackingControl."Multi Document Package" THEN
        SalesLine.SETFILTER("Document No.", PackingControl."Multi Document No.")
      ELSE
        SalesLine.SETRANGE("Document No.", PackingControl."Source ID");

      SalesLine.SETRANGE(Type, SalesLine.Type::Item);
      SalesLine.SETFILTER("Outstanding Quantity", '>0');
      SalesLine.SETRANGE(Pack, FALSE);
      IF ShippingSetup."Location Packing" THEN
        SalesLine.SETRANGE("Location Code",PackingStation."Location Code");

      IF SalesLine.FINDSET THEN
      REPEAT
        //IF SalesLine.Pack = FALSE THEN BEGIN
          SalesLine.Pack := TRUE;
          SalesLine.MODIFY;
        //END;
      UNTIL SalesLine.NEXT = 0;
      //</TPZ1383>
    END;

    PROCEDURE CheckCustomerBlock@1000000002(DOCNO@1000000002 : Code[20];cusno@1000000003 : Code[20]);
    VAR
      Customer@1000000001 : Record 18;
    BEGIN
      //<TPZ1732>
      Customer.RESET;
      Customer.GET(cusno);
      IF Customer.Blocked = Customer.Blocked::Ship THEN
        ERROR('Order %1 cannot be packed because customer is Blocked Ship.',DOCNO);
      //</TPZ1732>
    END;

    PROCEDURE CheckSalesLineQuantity@1000000003(SourceType@1000000000 : Integer;SourceSubType@1000000001 : '0,1,2,3,4,5,6,7,8,9,10';SourceID@1000000002 : Code[20];PackageNo@1000000003 : Code[20]);
    VAR
      SalesHeader@1000000004 : Record 36;
      SalesLine@1000000005 : Record 37;
      Package@1000000007 : Record 14000701;
      PackageLine@1000000009 : Record 14000702;
      TotalSaleLineQty@1000000006 : Decimal;
      TotalPackageLineQty@1000000008 : Decimal;
    BEGIN
      //<TPZ1943>
      IF ((SourceType = 36) AND (SourceSubType = 1) AND (SourceID <> '') AND (PackageNo <>'')) THEN BEGIN
        SalesHeader.RESET;
        SalesHeader.GET(SalesHeader."Document Type"::Order,SourceID);
        IF SalesHeader."Shipping Advice" = SalesHeader."Shipping Advice"::Complete THEN BEGIN
          SalesLine.RESET;
          SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
          SalesLine.SETRANGE("Document No.",SalesHeader."No.");
          SalesLine.SETRANGE(Type,SalesLine.Type::Item);
          IF SalesLine.FINDSET THEN
            REPEAT
               TotalSaleLineQty := TotalSaleLineQty + SalesLine."Outstanding Quantity";
            UNTIL SalesLine.NEXT = 0;


          PackageLine.RESET;
          PackageLine.SETRANGE("Source Type",36);
          PackageLine.SETRANGE("Source Subtype",PackageLine."Source Subtype"::"1");
          PackageLine.SETRANGE(PackageLine."Source ID",SourceID);
          IF PackageLine.FINDSET THEN
            REPEAT
               TotalPackageLineQty := TotalPackageLineQty + PackageLine.Quantity;
            UNTIL PackageLine.NEXT = 0;

        IF TotalPackageLineQty <  TotalSaleLineQty THEN
          ERROR('Sales Order %1 must ship complete',SourceID);

        END;
      END;
      //<TPZ1943>
    END;

    PROCEDURE CheckSalesLineQuantityPack@1000000004(DOCNO@1000000001 : Text[250]);
    VAR
      SalesHeader@1000000004 : Record 36;
      SalesLine@1000000005 : Record 37;
      Package@1000000007 : Record 14000701;
      RegisteredPickLines@1000000009 : Record 5773;
      TotalSaleLineQty@1000000006 : Decimal;
      TotalRegisteredPickLineQty@1000000008 : Decimal;
      Page46EventPublishers@1000000002 : Codeunit 51805;
      QtyAvailQtyAvailToPick@1000000003 : Decimal;
      RegisteredWhseActivityLine@1000000000 : Record 5773;
      RegisteredWhseActivityHdr@1000000010 : Record 5772;
      SalesHeader1@1000000011 : Record 36;
    BEGIN
      //>>001 TPZ2988
      SalesHeader.RESET;
      IF NOT SalesHeader1.GET(SalesHeader1."Document Type"::Order,DOCNO) THEN BEGIN
        RegisteredWhseActivityHdr.SETRANGE(Type,RegisteredWhseActivityHdr.Type::Pick);
        RegisteredWhseActivityHdr.SETRANGE("Whse. Activity No.",DOCNO);
        IF RegisteredWhseActivityHdr.FINDFIRST THEN BEGIN
          RegisteredWhseActivityLine.SETRANGE("Action Type",RegisteredWhseActivityLine."Activity Type"::Pick);
          RegisteredWhseActivityLine.SETRANGE("No.",RegisteredWhseActivityHdr."No.");
          IF RegisteredWhseActivityLine.FINDFIRST THEN BEGIN
            IF RegisteredWhseActivityLine."Source No." <> '' THEN
              DOCNO := RegisteredWhseActivityLine."Source No.";
          END;
        END;
      END;

      IF SalesHeader.GET(SalesHeader."Document Type"::Order,DOCNO) THEN BEGIN
        IF SalesHeader."Shipping Advice" = SalesHeader."Shipping Advice"::Complete THEN BEGIN
          SalesLine.RESET;
          SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
          SalesLine.SETRANGE("Document No.",SalesHeader."No.");
          SalesLine.SETRANGE(Type,SalesLine.Type::Item);
          IF SalesLine.FINDSET THEN
                REPEAT
                 TotalSaleLineQty := TotalSaleLineQty + SalesLine."Outstanding Quantity";
              UNTIL SalesLine.NEXT = 0;

            RegisteredPickLines.RESET;
            RegisteredPickLines.SETRANGE("Source Type",37);
            RegisteredPickLines.SETRANGE("Source Subtype",RegisteredPickLines."Source Subtype"::"1");
            RegisteredPickLines.SETRANGE(RegisteredPickLines."Source No.",DOCNO);
            RegisteredPickLines.SETRANGE("Bin Code",'SHIPMENT');
            IF RegisteredPickLines.FINDSET THEN
              REPEAT
                 TotalRegisteredPickLineQty := TotalRegisteredPickLineQty + RegisteredPickLines.Quantity;
              UNTIL RegisteredPickLines.NEXT = 0;

          IF TotalRegisteredPickLineQty <  TotalSaleLineQty THEN
            ERROR('Sales Order %1 cannot be packed because customer %2 has Shipping Advice = Complete.',SalesHeader."No.", SalesHeader."Sell-to Customer No.");
        END;
      END;
      //<<001 TPZ2988
    END;

    LOCAL PROCEDURE NoPackageError@1000000005() : Boolean;
    VAR
      Package1@1000000000 : Record 14000701;
    BEGIN
      //>>TPZ3011
      Package1.RESET;
      Package1.SETRANGE("Source Type",PackingControl."Source Type");
      Package1.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      Package1.SETRANGE(Closed,TRUE);
      IF PackingControl."Multi Document Package" THEN
        Package1.SETFILTER("Source ID",PackingControl."Multi Document No.")
      ELSE
        Package1.SETRANGE("Source ID",PackingControl."Source ID");
      IF NOT Package1.FINDFIRST THEN BEGIN
        MESSAGE('There is no closed package for order %1',PackingControl."Source ID");
        EXIT(TRUE);
      END;
      EXIT(FALSE);
      //<<TPZ3011
    END;

    BEGIN
    {
      TM 061615 Added new customized command from NAV 3.6 //VWP
      TPZ1383 - Added new funciton RefreshPackFlag to update Pack field in Sales Line 12/28/15
      2017-06-28 TPZ1732 DKUMAR
        Prevent Blocked Ship Customer Orders from Pack
      2017-07-24 TPZ1943 DKUMAR
        shipping advice complete, Only Complete order can be closed
      001 TPZ2988 RPS 11/05/2020 - Marking orders COMPLETE in the shipping advice
    }
    END.
  }
}

