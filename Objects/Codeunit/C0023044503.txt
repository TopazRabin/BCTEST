OBJECT Codeunit 23044503 WHI Menu Mgmt.
{
  OBJECT-PROPERTIES
  {
    Date=12/16/20;
    Time=12:35:58 PM;
    Version List=WHI2.4.7684.0;
  }
  PROPERTIES
  {
    TableNo=23044511;
    OnRun=VAR
            liEventID@1000000002 : Integer;
            ltxtOutputText@1000000001 : BigText;
            losReturnMessage@1000000000 : OutStream;
          BEGIN
            liEventID := Rec.getEvent();
            executeEvent(liEventID, Rec, ltxtOutputText);
            "Extensibility Blob".CREATEOUTSTREAM( losReturnMessage );
            ltxtOutputText.WRITE(losReturnMessage);
            MODIFY();
          END;

  }
  CODE
  {
    VAR
      cuWHICommon@1000000001 : Codeunit 23044501;
      cuTranslationMgmt@1000000003 : Codeunit 23044526;
      cuActivityLogMgt@1000000004 : Codeunit 23044537;

    PROCEDURE executeEvent@1000000005(piEventID@1000000000 : Integer;VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000002 : BigText);
    BEGIN
      CASE piEventID OF
         80000: generateMenu(ptrecEventParams, pbsOutput);
      END;
    END;

    PROCEDURE generateMenu@1000000001(VAR ptrecEventParams@1000000009 : TEMPORARY Record 23044511;VAR pbsOutput@1000000008 : BigText);
    VAR
      ltrecMenu@100000000 : TEMPORARY Record 23044510;
      ldnOutput@100000001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lcodConfig@1000000002 : Code[20];
      lcodUsername@1000000003 : Code[20];
      liFormID@1000000004 : Integer;
      lcodRegion@1000000000 : Code[10];
      lcodOptionalWorkflow@100000002 : Code[20];
    BEGIN
      lcodConfig := ptrecEventParams.getValue('config_id');
      lcodUsername := COPYSTR( ptrecEventParams.getValue('user_name'), 1, MAXSTRLEN(lcodUsername) );
      liFormID := ptrecEventParams.getValueAsInt('form_id');
      lcodOptionalWorkflow := COPYSTR( ptrecEventParams.getValue('workflow'), 1, MAXSTRLEN(lcodOptionalWorkflow) );
      lcodRegion := ptrecEventParams.getValue('device_culture');

      GetApplicableMenus(ltrecMenu, lcodOptionalWorkflow, lcodConfig, lcodUsername);

      ldnOutput := ldnOutput.StringBuilder();
      BuildMenuDataSet(ltrecMenu, lcodRegion, ldnOutput);

      pbsOutput.ADDTEXT(ldnOutput.ToString());


      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE LookupConfig@1000000003(VAR pcodCurrentConfig@1000000000 : Code[20];VAR precMenuLines@1000000001 : Record 23044510);
    VAR
      lrecDeviceConfig@1000000002 : Record 23044504;
    BEGIN
      //
      //
      // Looks up a configuration for usage with menus.
      // Follows the pattern of LookupName in CU240
      //

      lrecDeviceConfig.RESET();
      lrecDeviceConfig.Code := precMenuLines.GETRANGEMAX( "Device Config ID" );
      IF ( PAGE.RUNMODAL(0, lrecDeviceConfig) = ACTION::LookupOK ) THEN BEGIN
        pcodCurrentConfig := lrecDeviceConfig.Code;
        precMenuLines.FILTERGROUP := 2;
        precMenuLines.SETRANGE("Device Config ID", pcodCurrentConfig );
        precMenuLines.FILTERGROUP := 0;
        IF precMenuLines.FIND('-') THEN;
      END;
    END;

    PROCEDURE SortMenus@1000000004(VAR precMenuLine@1000000000 : Record 23044510);
    VAR
      lrecMenu@1000000001 : Record 23044510;
      liWeight@1000000002 : Integer;
      liIndent@1000000003 : Integer;
    BEGIN
      //
      //
      // This just exists to help visually sort items, nothing else.
      //

      lrecMenu.RESET();
      lrecMenu.SETCURRENTKEY("Device Config ID", "Form ID", "Application Screen" );
      lrecMenu.COPYFILTERS( precMenuLine );

      lrecMenu.SETRANGE("Parent Node ID", 0 );
      // headers only
      liWeight := 0;
      liIndent := 0;
      IF ( lrecMenu.FIND('-') ) THEN BEGIN
        REPEAT
          liWeight += 1;
          lrecMenu."Sorting Weight" := liWeight;
          lrecMenu."Sorting Indent" := liIndent;
          lrecMenu.MODIFY(FALSE);
          SortChildMenus( lrecMenu, liWeight, liIndent );


        UNTIL( lrecMenu.NEXT() = 0 );
      END;
    END;

    PROCEDURE SortChildMenus@1000000007(VAR precMenuParent@1000000000 : Record 23044510;VAR piWeight@1000000004 : Integer;piIndent@1000000005 : Integer);
    VAR
      lrecMenu@1000000001 : Record 23044510;
    BEGIN
      //
      // Helper to SortMenus
      //
      piIndent += 1;
      lrecMenu.RESET();
      lrecMenu.COPYFILTERS( precMenuParent );
      lrecMenu.SETRANGE("Parent Node ID", precMenuParent."Node ID" );
      IF ( lrecMenu.FIND('-') ) THEN BEGIN
        REPEAT
          piWeight += 1;

          lrecMenu."Sorting Weight" := piWeight;
          lrecMenu."Sorting Indent" := piIndent;
          lrecMenu.MODIFY(FALSE);
          SortChildMenus( lrecMenu, piWeight, piIndent );
        UNTIL( lrecMenu.NEXT() = 0 );
      END;
    END;

    LOCAL PROCEDURE BuildMenuDataSet@100000001(VAR ptrecMenu@100000000 : TEMPORARY Record 23044510;pcodRegion@100000002 : Code[10];VAR pdnOutput@100000001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder");
    BEGIN
      pdnOutput.Append('<DATASET>');
      pdnOutput.Append('<TABLE id="menu">');
      GenerateMenuDataSetColumns(pdnOutput);
      pdnOutput.Append('<ROWS>');

      ptrecMenu.RESET;
      ptrecMenu.SETCURRENTKEY("Node ID");

      IF (ptrecMenu.FINDSET(FALSE)) THEN BEGIN
        REPEAT
          IF (ptrecMenu.Visible = ptrecMenu.Visible::Yes) THEN BEGIN
            GenerateMenuDataSetRow(ptrecMenu, pcodRegion, pdnOutput);
          END;
        UNTIL (ptrecMenu.NEXT() = 0);
      END;

      pdnOutput.Append('</ROWS>');
      pdnOutput.Append('</TABLE>');
      pdnOutput.Append('</DATASET>');
    END;

    LOCAL PROCEDURE GenerateMenuDataSetColumns@100000003(VAR pdnOutput@100000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder");
    VAR
      lrecMenu@100000001 : Record 23044510;
    BEGIN
      pdnOutput.Append('<COLS>');

      cuWHICommon.initVariantColumnIndex();
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu."Form ID",FALSE,0,'',lrecMenu.FIELDNAME("Form ID"));
      cuWHICommon.addDSColumnDN(pdnOutput,'I',lrecMenu."Node ID",FALSE,0,'',lrecMenu.FIELDNAME("Node ID"));
      cuWHICommon.addDSColumnDN(pdnOutput,'I',lrecMenu."Parent Node ID",FALSE,0,'',lrecMenu.FIELDNAME("Parent Node ID"));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu.Caption,FALSE,0,'',lrecMenu.FIELDNAME(Caption));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu.Shortcut,FALSE,0,'',lrecMenu.FIELDNAME(Shortcut));
      cuWHICommon.addDSColumnDN(pdnOutput,'I',lrecMenu."Require Line",FALSE,0,'',lrecMenu.FIELDNAME("Require Line"));
      cuWHICommon.addDSColumnDN(pdnOutput,'I',lrecMenu.Checkable,FALSE,0,'',lrecMenu.FIELDNAME(Checkable));
      cuWHICommon.addDSColumnDN(pdnOutput,'I',lrecMenu."Standard Action",FALSE,0,'',lrecMenu.FIELDNAME("Standard Action"));
      cuWHICommon.addDSColumnDN(pdnOutput,'I',lrecMenu."Refresh On Success",FALSE,0,'',lrecMenu.FIELDNAME("Refresh On Success"));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu.NavEventGenID,FALSE,0,'',lrecMenu.FIELDNAME(NavEventGenID));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu.WebService,FALSE,0,'',lrecMenu.FIELDNAME(WebService));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu."WebService Method",FALSE,0,'',lrecMenu.FIELDNAME("WebService Method"));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu."DLL Name",FALSE,0,'',lrecMenu.FIELDNAME("DLL Name"));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu."DLL Method",FALSE,0,'',lrecMenu.FIELDNAME("DLL Method"));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu."Text - Title",FALSE,0,'',lrecMenu.FIELDNAME("Text - Title"));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu."Text - Prompt",FALSE,0,'',lrecMenu.FIELDNAME("Text - Prompt"));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu."Text - Default",FALSE,0,'',lrecMenu.FIELDNAME("Text - Default"));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu."Text - Max Length",FALSE,0,'',lrecMenu.FIELDNAME("Text - Max Length"));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu."Qty - Title",FALSE,0,'',lrecMenu.FIELDNAME("Qty - Title"));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu."Qty - Prompt1",FALSE,0,'',lrecMenu.FIELDNAME("Qty - Prompt1"));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu."Qty - Prompt2",FALSE,0,'',lrecMenu.FIELDNAME("Qty - Prompt2"));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu."Qty - Prompt3",FALSE,0,'',lrecMenu.FIELDNAME("Qty - Prompt3"));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu."Qty - Default",FALSE,0,'',lrecMenu.FIELDNAME("Qty - Default"));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu."Qty - Min",FALSE,0,'',lrecMenu.FIELDNAME("Qty - Min"));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu."Qty - Max",FALSE,0,'',lrecMenu.FIELDNAME("Qty - Max"));
      cuWHICommon.addDSColumnDN(pdnOutput,'I',lrecMenu."Require Confirm",FALSE,0,'',lrecMenu.FIELDNAME("Require Confirm"));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu."Confirm Title",FALSE,0,'',lrecMenu.FIELDNAME("Confirm Title"));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu."Confirm Message",FALSE,0,'',lrecMenu.FIELDNAME("Confirm Message"));
      cuWHICommon.addDSColumnDN(pdnOutput,'I',lrecMenu.Disabled,FALSE,0,'',lrecMenu.FIELDNAME(Disabled));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu."Lookup Table",FALSE,0,'',lrecMenu.FIELDNAME("Lookup Table"));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu."Lookup Filter",FALSE,0,'',lrecMenu.FIELDNAME("Lookup Filter"));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu.Workflow,FALSE,0,'',lrecMenu.FIELDNAME(Workflow));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu."Image File Name",FALSE,0,'',lrecMenu.FIELDNAME("Image File Name"));
      cuWHICommon.addDSColumnDN(pdnOutput,'',lrecMenu."Icon Code",FALSE,0,'',lrecMenu.FIELDNAME("Icon Code"));
      pdnOutput.Append('</COLS>');
    END;

    LOCAL PROCEDURE GenerateMenuDataSetRow@100000004(VAR ptrecMenu@100000002 : TEMPORARY Record 23044510;pcodRegion@100000001 : Code[10];VAR pdnOutput@100000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder");
    VAR
      liOptionValue@100000003 : Integer;
    BEGIN
      pdnOutput.Append('<R>');
      pdnOutput.Append('<FIELDS>');
      cuWHICommon.initVariantColumnIndex();
      liOptionValue := ptrecMenu."Form ID";
      cuWHICommon.addDSFieldDN(pdnOutput,liOptionValue);
      cuWHICommon.addDSFieldDN(pdnOutput,ptrecMenu."Node ID");
      cuWHICommon.addDSFieldDN(pdnOutput,ptrecMenu."Parent Node ID");
      cuWHICommon.addDSFieldDN(pdnOutput, cuTranslationMgmt.GetTranslation( pcodRegion, ptrecMenu.Caption ) );
      cuWHICommon.addDSFieldDN(pdnOutput,ptrecMenu.Shortcut);

      IF ptrecMenu."Require Line" THEN
        cuWHICommon.addDSFieldDN(pdnOutput,1)
      ELSE
        cuWHICommon.addDSFieldDN(pdnOutput,0);

      IF ptrecMenu.Checkable THEN
        cuWHICommon.addDSFieldDN(pdnOutput,1)
      ELSE
        cuWHICommon.addDSFieldDN(pdnOutput,0);

      liOptionValue := ptrecMenu."Standard Action";
      cuWHICommon.addDSFieldDN(pdnOutput,liOptionValue);

      IF ptrecMenu."Refresh On Success" THEN
        cuWHICommon.addDSFieldDN(pdnOutput,1)
      ELSE
        cuWHICommon.addDSFieldDN(pdnOutput,0);

      cuWHICommon.addDSFieldDN(pdnOutput,ptrecMenu.NavEventGenID);
      cuWHICommon.addDSFieldDN(pdnOutput,ptrecMenu.WebService);
      cuWHICommon.addDSFieldDN(pdnOutput,ptrecMenu."WebService Method");
      cuWHICommon.addDSFieldDN(pdnOutput,ptrecMenu."DLL Name");
      cuWHICommon.addDSFieldDN(pdnOutput,ptrecMenu."DLL Method");
      cuWHICommon.addDSFieldDN(pdnOutput, cuTranslationMgmt.GetTranslation( pcodRegion, ptrecMenu."Text - Title" ) );
      cuWHICommon.addDSFieldDN(pdnOutput, cuTranslationMgmt.GetTranslation( pcodRegion, ptrecMenu."Text - Prompt" ) );
      cuWHICommon.addDSFieldDN(pdnOutput,ptrecMenu."Text - Default");
      cuWHICommon.addDSFieldDN(pdnOutput,ptrecMenu."Text - Max Length");
      cuWHICommon.addDSFieldDN(pdnOutput, cuTranslationMgmt.GetTranslation( pcodRegion, ptrecMenu."Qty - Title" ) );
      cuWHICommon.addDSFieldDN(pdnOutput, cuTranslationMgmt.GetTranslation( pcodRegion, ptrecMenu."Qty - Prompt1" ) );
      cuWHICommon.addDSFieldDN(pdnOutput, cuTranslationMgmt.GetTranslation( pcodRegion, ptrecMenu."Qty - Prompt2" ) );
      cuWHICommon.addDSFieldDN(pdnOutput, cuTranslationMgmt.GetTranslation( pcodRegion, ptrecMenu."Qty - Prompt3" ) );
      cuWHICommon.addDSFieldDN(pdnOutput,ptrecMenu."Qty - Default");
      cuWHICommon.addDSFieldDN(pdnOutput,ptrecMenu."Qty - Min");
      cuWHICommon.addDSFieldDN(pdnOutput,ptrecMenu."Qty - Max");

      IF ptrecMenu."Require Confirm" THEN
        cuWHICommon.addDSFieldDN(pdnOutput,1)
      ELSE
        cuWHICommon.addDSFieldDN(pdnOutput,0);

      cuWHICommon.addDSFieldDN(pdnOutput, cuTranslationMgmt.GetTranslation( pcodRegion, ptrecMenu."Confirm Title" ) );
      cuWHICommon.addDSFieldDN(pdnOutput, cuTranslationMgmt.GetTranslation( pcodRegion, ptrecMenu."Confirm Message" ) );

      IF ptrecMenu.Disabled THEN
        cuWHICommon.addDSFieldDN(pdnOutput,1)
      ELSE
        cuWHICommon.addDSFieldDN(pdnOutput,0);

      cuWHICommon.addDSFieldDN(pdnOutput,ptrecMenu."Lookup Table");
      cuWHICommon.addDSFieldDN(pdnOutput,ptrecMenu."Lookup Filter");
      liOptionValue := ptrecMenu.Workflow;
      cuWHICommon.addDSFieldDN(pdnOutput, liOptionValue );
      cuWHICommon.addDSFieldDN(pdnOutput,ptrecMenu."Image File Name");
      cuWHICommon.addDSFieldDN(pdnOutput,ptrecMenu."Icon Code");
      pdnOutput.Append('</FIELDS>');
      pdnOutput.Append('</R>');
    END;

    LOCAL PROCEDURE GetApplicableMenus@100000007(VAR ptrecMenu@100000000 : TEMPORARY Record 23044510;pcodApplicationCode@100000001 : Code[20];pcodConfigID@100000002 : Code[20];pcodUserName@100000003 : Code[50]);
    VAR
      lrecMenu@100000004 : Record 23044510;
    BEGIN

      IF pcodApplicationCode = '' THEN
        lrecMenu.SETRANGE("Form ID", lrecMenu."Form ID"::Main)
      ELSE BEGIN
        lrecMenu.SETRANGE("Form ID", lrecMenu."Form ID"::"Custom Application");
        lrecMenu.SETRANGE("Application Screen", pcodApplicationCode);
      END;

      // do the 'master' config
      lrecMenu.SETFILTER("Device Config ID", '%1','');
      IF( lrecMenu.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          ptrecMenu := lrecMenu;
          ptrecMenu.INSERT;
        UNTIL( lrecMenu.NEXT=0 );
      END;

      // try by specific user first
      lrecMenu.SETRANGE("Device Config ID",pcodUserName);
      IF( (lrecMenu.COUNT=0) OR (pcodUserName = '') ) THEN BEGIN
       // try by the specific config id
       lrecMenu.SETRANGE("Device Config ID",pcodConfigID);
      END;


      IF( lrecMenu.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          // check to see if it exists, if so override, else add
          ptrecMenu.RESET;
          ptrecMenu.SETRANGE("Node ID", lrecMenu."Node ID");

          IF( ptrecMenu.FINDFIRST ) THEN BEGIN
            ptrecMenu.DELETE;// temporary record, ok
          END;

          IF( lrecMenu.Caption <> '' ) THEN BEGIN
            ptrecMenu.INIT;
            ptrecMenu := lrecMenu;
            ptrecMenu.INSERT;
          END;
        UNTIL( lrecMenu.NEXT=0);
      END;
    END;

    PROCEDURE GenerateMenuDataSetForApplication@100000011(pcodApplicationCode@100000001 : Code[20];pcodRegion@100000002 : Code[10];pcodConfigID@100000003 : Code[20];pcodUserName@100000004 : Code[50];VAR pdnOutput@100000005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder");
    VAR
      ltrecMenu@100000000 : TEMPORARY Record 23044510;
    BEGIN
      GetApplicableMenus(ltrecMenu, pcodApplicationCode, pcodConfigID, pcodUserName);
      BuildMenuDataSet(ltrecMenu, pcodRegion, pdnOutput);
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
    }
    END.
  }
}

