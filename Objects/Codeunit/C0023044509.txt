OBJECT Codeunit 23044509 WHI Receiving Mgmt.
{
  OBJECT-PROPERTIES
  {
    Date=03/04/21;
    Time=[ 6:16:41 AM];
    Modified=Yes;
    Version List=WHI2.4.7684.0;
  }
  PROPERTIES
  {
    TableNo=23044511;
    OnRun=VAR
            liEventID@1000000002 : Integer;
            ltxtOutputText@1000000001 : BigText;
            losReturnMessage@1000000000 : OutStream;
          BEGIN
            codRegionCode := Rec.getValue('device_culture');

            liEventID := Rec.getEvent();
            ExecuteEvent(liEventID, Rec, ltxtOutputText);
            "Extensibility Blob".CREATEOUTSTREAM( losReturnMessage );
            ltxtOutputText.WRITE(losReturnMessage);
            MODIFY();
          END;

  }
  CODE
  {
    VAR
      cuCommonFuncs@1000000002 : Codeunit 23044501;
      cuResMgmt@1000000005 : Codeunit 23044514;
      cuDataManager@1000000006 : Codeunit 23044502;
      cuCustomizedFuncs@1000000007 : Codeunit 23044515;
      iEventID@1000000004 : Integer;
      cuPrintingMgmt@1000000003 : Codeunit 23044525;
      recWHISetup@1000000020 : Record 23044502;
      cuActivityLogMgt@1000000021 : Codeunit 23044537;
      cuCommonBase@1000000026 : Codeunit 23044519;
      cuLPCommon@1000000001 : Codeunit 23044541;
      cuLPMgmt@1000000017 : Codeunit 23044520;
      cuTranslationMgmt@1000000028 : Codeunit 23044526;
      cuDataSetTools@1000000008 : Codeunit 23044535;
      codRegionCode@1000000027 : Code[10];

    PROCEDURE ExecuteEvent@1000000005(piEventID@1000000000 : Integer;VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000002 : BigText);
    BEGIN
      recWHISetup.GET();
      iEventID := piEventID;
      CASE piEventID OF
        50001:  GetReceiptDocument(ptrecEventParams, pbsOutput);
        50002:  UpdateReceiptLine(ptrecEventParams, pbsOutput);
        50003:  updateVendorShipNumber(ptrecEventParams, pbsOutput);
        50004:  postWhseReceipt(ptrecEventParams, pbsOutput);
        50005:  GetPurchaseOrder(ptrecEventParams, pbsOutput);
        50006:  UpdatePurchaseLine(ptrecEventParams, pbsOutput);
        50007:  updatePOVendorShipNumber(ptrecEventParams, pbsOutput);
        50008:  postPurchaseOrder(ptrecEventParams, pbsOutput);
        50009:  updatePOVendorInvoiceNumber(ptrecEventParams, pbsOutput);
        50010:  getDocumentList(ptrecEventParams, pbsOutput);
        50011:  GetTextScanDocBarcode(ptrecEventParams,pbsOutput);
        50013:  getTransferOrder(ptrecEventParams, pbsOutput);
        50014:  updateTransferLine(ptrecEventParams, pbsOutput);
        50015:  postTransferOrder(ptrecEventParams, pbsOutput);
        50017:  cuPrintingMgmt.handlePrint( ptrecEventParams, pbsOutput);
        50018:  cuPrintingMgmt.handlePrint( ptrecEventParams, pbsOutput);
        50019:  cuPrintingMgmt.handlePrint( ptrecEventParams, pbsOutput);
        50020:  GetReceiptCrossRefLines(ptrecEventParams,pbsOutput);
        50021:  GetPurchaseCrossRefLines(ptrecEventParams,pbsOutput);
        50022:  GetTransferCrossRefLines(ptrecEventParams,pbsOutput);
        50023:  ChangePurchaseOrderBin(ptrecEventParams, pbsOutput);
        50024:  ChangeWhseReceiptBin(ptrecEventParams, pbsOutput);
        50040:  postPrintPurchaseOrder( ptrecEventParams, pbsOutput);
        50041:  postPrintTransferOrder( ptrecEventParams, pbsOutput);
        50042:  postPrintWhseReceipt(ptrecEventParams, pbsOutput);
        50050:  processPurchLPScan(ptrecEventParams, pbsOutput);
        50051:  processReceiptLPScan(ptrecEventParams, pbsOutput);
        50052:  processTransferLPScan(ptrecEventParams, pbsOutput);
        50053:  ChangeTransferOrderBin(ptrecEventParams, pbsOutput);
      END;
    END;

    PROCEDURE GetReceiptDocument@1000000013(VAR ptrecEventParams@1000000009 : TEMPORARY Record 23044511;VAR pbsOutput@1000000008 : BigText);
    VAR
      lrecWhseRcptHeader@1000000010 : Record 7316;
      lrecWhseRcptLine@1000000005 : Record 7317;
      lrecConfig@1000000014 : Record 23044504;
      lrrefHeader@1000000006 : RecordRef;
      lrrefLine@1000000000 : RecordRef;
      ldnOutput@1000000002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lcuDatasetTools@1000000004 : Codeunit 23044535;
      lcodReceiptNumber@1000000001 : Code[20];
      lbNeedsItemTrackingTable@1000000007 : Boolean;
    BEGIN
      //<FUNC>
      //  Returns a Warehouse Receipt document and lines.
      //  If the Receipt document does not exist it will be created
      //</FUNC>

      lcodReceiptNumber := ptrecEventParams.getValue('receipt_number');

      IF lcodReceiptNumber = '' THEN
        lcodReceiptNumber := AutoCreateWhseReceipt(ptrecEventParams.getValue('po_number'), ptrecEventParams.getValue('transfer_number'), ptrecEventParams.getValue('sales_number'));

      IF NOT lrecWhseRcptHeader.GET(lcodReceiptNumber) THEN
        ERROR(cuTranslationMgmt.getTranslatedString('ERR_CANNOT_GENERATE_RECEIPT', codRegionCode));

      assignWhseReceipt(lrecWhseRcptHeader, ptrecEventParams);


      ldnOutput := ldnOutput.StringBuilder();
      lbNeedsItemTrackingTable := ptrecEventParams.getNeedsItemTrackingTable();
      lrecWhseRcptLine.SETCURRENTKEY("No.","Sorting Sequence No.");
      lrecWhseRcptLine.SETRANGE("No.", lcodReceiptNumber);
      IF( lrecWhseRcptLine.FINDSET(FALSE) ) THEN;

      // prepare the recordrefs
      lrecWhseRcptHeader.SETRECFILTER();
      lrrefHeader.GETTABLE( lrecWhseRcptHeader );
      lrrefLine.GETTABLE( lrecWhseRcptLine );


      lcuDatasetTools.SetCalculateFields(iEventID,
                                        lrrefLine,
                                        lrecWhseRcptLine.FIELDNO("Qty. Outstanding"),
                                        lrecWhseRcptLine.FIELDNO(Quantity),
                                        lrecWhseRcptLine.FIELDNO("Qty. to Receive"),
                                        lrecWhseRcptLine.FIELDNO("Qty. Received")
                                        );

      lcuDatasetTools.SetPositiveFlag(TRUE);

      lcuDatasetTools.BuildHeaderLineDatasetEmbedRes(
        iEventID,
        lrrefHeader,
        lrrefLine,
        lbNeedsItemTrackingTable,
        TRUE,
        ldnOutput );

      pbsOutput.ADDTEXT( ldnOutput.ToString() );



      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Warehouse Receipt Header"));
      ptrecEventParams.setValue('Document No.', lcodReceiptNumber);
      ptrecEventParams.setValue('Source Document Type', FORMAT(lrecWhseRcptLine."Source Type"));
      ptrecEventParams.setValue('Source Document No.', lrecWhseRcptLine."Source No.");
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    LOCAL PROCEDURE UpdateReceiptLine@1000000015(VAR ptrecEventParams@1000000013 : TEMPORARY Record 23044511;VAR pbsOutput@1000000009 : BigText);
    VAR
      lrecWhseRcptLine@1000000001 : Record 7317;
      lrecConfig@1000000000 : Record 23044504;
      lrecLocation@1000000018 : Record 14;
      lrecBin@1000000008 : Record 7354;
      lrrefLine@1000000021 : RecordRef;
      lrecLPHeader@100000000 : Record 23044505;
      lcuDatasetTools@1000000017 : Codeunit 23044535;
      ldnOutput@1000000011 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      ldtExpirationDate@1000000019 : Date;
      lcodLocation@1000000003 : Code[10];
      lcodReceiptNumber@1000000002 : Code[20];
      lcodBinCode@1000000014 : Code[20];
      lsSerialNumber@1000000004 : Text;
      lsLotNumber@1000000015 : Text;
      lcodLicensePlateNo@1000000010 : Code[20];
      ldQtyToReceive@1000000006 : Decimal;
      ldChangeQty@1000000016 : Decimal;
      ldPreviousQuantity@1000000007 : Decimal;
      liLineNumber@1000000005 : Integer;
      lbDecrease@1000000012 : Boolean;
      liNumberOfLabels@1000000022 : Integer;
    BEGIN
      //<FUNC>
      // Updates the Warehouse Receipt line quantity to receive, item tracking and license plate assignments.
      //</FUNC>

      lcodLocation := ptrecEventParams.getValue('location');
      lcodReceiptNumber := ptrecEventParams.getDocumentNo();
      liLineNumber := ptrecEventParams.getLineNo();
      ldQtyToReceive := ptrecEventParams.getValueAsDecimal('qty_to_receive');
      lsSerialNumber := ptrecEventParams.getSerialNo();
      lsLotNumber := ptrecEventParams.getLotNo();
      lcodBinCode := ptrecEventParams.getValue('bin');
      ldtExpirationDate := cuCommonFuncs.getExpirationDate(ptrecEventParams);
      lcodLicensePlateNo := ptrecEventParams.getValue('lp_number');

      cuCommonFuncs.getDeviceConfig(lrecConfig,ptrecEventParams);

      lrecWhseRcptLine.GET(lcodReceiptNumber, liLineNumber);

      ldPreviousQuantity := lrecWhseRcptLine."Qty. to Receive";
      ldChangeQty := ldQtyToReceive - lrecWhseRcptLine."Qty. to Receive";

      lbDecrease := (ldQtyToReceive < lrecWhseRcptLine."Qty. to Receive");

      IF (lcodLicensePlateNo <> '') AND lbDecrease THEN BEGIN
        IF lrecLPHeader.GET(lcodLicensePlateNo) THEN BEGIN
          lrecLPHeader."Processing State" := lrecLPHeader."Processing State"::Removing;
          lrecLPHeader.MODIFY();
        END;
      END;


      lrecWhseRcptLine.VALIDATE("Qty. to Receive", ldQtyToReceive);
      lrecWhseRcptLine.MODIFY(TRUE);

      IF lrecConfig."Override Blank Bin - Receiving" AND (lrecWhseRcptLine."Bin Code" = '') THEN
        UpdateWhseReceiptBin(lrecWhseRcptLine, lcodBinCode);

      IF lrecConfig."Gen. Tracking Info On Rec." THEN
        GenerateLotSerialNumber(lrecWhseRcptLine."Item No.", lrecWhseRcptLine."Variant Code", lsSerialNumber, lsLotNumber);

      IF( (lsLotNumber <> '') OR (lsSerialNumber <> '') ) THEN BEGIN
        cuResMgmt.AddRemoveWhseRecTracking(lrecWhseRcptLine,lsSerialNumber,lsLotNumber,ldChangeQty, ldtExpirationDate,lrecWhseRcptLine."Unit of Measure Code");
        IF ldChangeQty > 0 THEN
          createLotSerialInfo(lrecWhseRcptLine."Item No.",lrecWhseRcptLine."Variant Code",lsLotNumber,lsSerialNumber);
      END;

      IF lcodLicensePlateNo <> '' THEN BEGIN
        AddWhseReceiptLineToLP(lrecWhseRcptLine, lcodLicensePlateNo, ldChangeQty, lsSerialNumber, lsLotNumber, ldtExpirationDate);

        IF lrecLPHeader.GET(lcodLicensePlateNo) THEN BEGIN
          lrecLPHeader."Processing State" := lrecLPHeader."Processing State"::" ";
          lrecLPHeader.MODIFY();
        END;
      END;

      IF( (lrecConfig."Print On Receipt Qty. Change") AND (ldChangeQty>0) ) THEN BEGIN
        liNumberOfLabels :=  ptrecEventParams.getValueAsInt('number_of_labels');
        PrintWhseReceiptItemLabel(ptrecEventParams, lrecWhseRcptLine,ldChangeQty, lsSerialNumber, lsLotNumber, ldtExpirationDate, liNumberOfLabels);
      END;



      lrecWhseRcptLine.SETRECFILTER();
      lrrefLine.GETTABLE( lrecWhseRcptLine );


      lcuDatasetTools.SetCalculateFields(50001,
                                        lrrefLine,
                                        lrecWhseRcptLine.FIELDNO("Qty. Outstanding"),
                                        lrecWhseRcptLine.FIELDNO(Quantity),
                                        lrecWhseRcptLine.FIELDNO("Qty. to Receive"),
                                        lrecWhseRcptLine.FIELDNO("Qty. Received")
                                        );

      ldnOutput := ldnOutput.StringBuilder();

      lcuDatasetTools.SetPositiveFlag(TRUE);

      lcuDatasetTools.BuildLineTableEmbedRes(50001, lrrefLine, TRUE, ldnOutput);
      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Warehouse Receipt Line"));
      ptrecEventParams.setValue('Document No.', lcodReceiptNumber);
      ptrecEventParams.setValue('Source Document Type', FORMAT(lrecWhseRcptLine."Source Type"));
      ptrecEventParams.setValue('Source Document No.', lrecWhseRcptLine."Source No.");
      ptrecEventParams.setValue('Source Document Line No.', FORMAT(lrecWhseRcptLine."Source Line No."));
      ptrecEventParams.setValue('Previous Quantity', FORMAT(ldPreviousQuantity));
      ptrecEventParams.setValue('New Quantity', FORMAT(ldQtyToReceive));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE updateVendorShipNumber@1000000019(VAR ptrecEventParams@1000000007 : TEMPORARY Record 23044511;VAR pbsOutput@1000000004 : BigText);
    VAR
      lcodLocation@1000000003 : Code[10];
      lcodReceiptNumber@1000000002 : Code[20];
      lcodVendorShipNumber@1000000001 : Code[35];
      lsErrorMessage@1000000005 : Text[250];
      lrecWhseRcptHeader@1000000006 : Record 7316;
    BEGIN
      // Updates the vendor shipment number on the receipt header.
      lcodLocation := ptrecEventParams.getValue('location');
      lcodReceiptNumber := ptrecEventParams.getValue('No.');
      lcodVendorShipNumber := ptrecEventParams.getValue('action_result');
      lrecWhseRcptHeader.GET(lcodReceiptNumber);
      lrecWhseRcptHeader.VALIDATE("Vendor Shipment No.", lcodVendorShipNumber);
      lrecWhseRcptHeader.MODIFY(TRUE);
      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);
    END;

    PROCEDURE postWhseReceipt@1000000000(VAR ptrecEventParams@1000000006 : TEMPORARY Record 23044511;VAR pbsOutput@1000000001 : BigText);
    VAR
      lrecWhseRcptHeader@1000000003 : Record 7316;
      lrecWhseRcptLine@1000000005 : Record 7317;
      lrecCrossDockOpp@1000000009 : Record 5768;
      lrecLocation@1000000008 : Record 14;
      lcuCrossDockMgt@1000000007 : Codeunit 5780;
      lcuPostWhseReceipt@1000000004 : Codeunit 5760;
      lcodReceiptNumber@1000000002 : Code[20];
      ltxtDetails@1000000000 : Text[250];
      lbManuallyPosted@1000000010 : Boolean;
    BEGIN
      // Attempts to post the Whse. Receipt
      lcodReceiptNumber := ptrecEventParams.getDocumentNo();
      lbManuallyPosted := ptrecEventParams.getValueAsBool('manuallyPosted');

      lrecWhseRcptHeader.GET(lcodReceiptNumber);

      lrecLocation.GET(lrecWhseRcptHeader."Location Code");
      IF( lrecLocation."Cross-Dock Bin Code" <> '' ) THEN BEGIN
        lcuCrossDockMgt.CalculateCrossDockLines(lrecCrossDockOpp,'',lrecWhseRcptHeader."No.",lrecWhseRcptHeader."Location Code");
      END;

      lrecWhseRcptLine.SETRANGE("No.",lcodReceiptNumber);

      IF NOT lbManuallyPosted THEN
        lrecWhseRcptLine.SETFILTER("Qty. to Receive",'>%1',0);

      IF( lrecWhseRcptLine.FINDSET(FALSE) ) THEN BEGIN
        lrecWhseRcptHeader.VALIDATE("Posting Date",TODAY);
        lrecWhseRcptHeader.MODIFY(TRUE);

        lcuPostWhseReceipt.SetHideValidationDialog(TRUE);
        lcuPostWhseReceipt.RUN(lrecWhseRcptLine);
      END;

      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);

      ltxtDetails := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_POST_RECEIPT', codRegionCode), lcodReceiptNumber);
      ptrecEventParams.setValue('details', ltxtDetails);
      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Warehouse Receipt Header"));
      ptrecEventParams.setValue('Document No.', lcodReceiptNumber);
      ptrecEventParams.setValue('Source Document Type', FORMAT(lrecWhseRcptLine."Source Type"));
      ptrecEventParams.setValue('Source Document No.', lrecWhseRcptLine."Source No.");
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    LOCAL PROCEDURE GetPurchaseOrder@1000000029(VAR ptrecEventParams@1000000005 : TEMPORARY Record 23044511;VAR pbsOutput@1000000004 : BigText);
    VAR
      lcodLocation@1000000014 : Code[10];
      lcodPurchaseOrderNumber@1000000013 : Code[20];
      lrecPurchaseHeader@1000000012 : Record 38;
      lrecPurchaseLine@1000000011 : Record 39;
      ldnOutput@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lrrefHeader@1000000008 : RecordRef;
      lrrefLine@1000000007 : RecordRef;
      lbNeedsItemTrackingTable@1000000006 : Boolean;
      lcuDataSetTools@1000000001 : Codeunit 23044535;
    BEGIN
      // Returns a Purchase Order document and lines.
      lcodLocation := ptrecEventParams.getValue('location');
      lcodPurchaseOrderNumber := ptrecEventParams.getDocumentNo();

      lrecPurchaseHeader.GET(lrecPurchaseHeader."Document Type"::Order, lcodPurchaseOrderNumber);

      assignPurchaseOrder(lrecPurchaseHeader, ptrecEventParams);

      ldnOutput := ldnOutput.StringBuilder();
      lbNeedsItemTrackingTable := ptrecEventParams.getNeedsItemTrackingTable();

      lrecPurchaseLine.SETRANGE("Document Type",lrecPurchaseLine."Document Type"::Order);
      lrecPurchaseLine.SETRANGE("Document No.",lcodPurchaseOrderNumber);
      lrecPurchaseLine.SETRANGE(Type,lrecPurchaseLine.Type::Item);
      lrecPurchaseLine.SETRANGE("Location Code", lcodLocation);
      lrecPurchaseLine.SETFILTER("Prod. Order No.",'=%1','');
      lrecPurchaseLine.SETFILTER("No.",'<>''''');

      IF( lrecPurchaseLine.FINDSET(FALSE) ) THEN;

      lrecPurchaseHeader.SETRECFILTER();
      lrrefHeader.GETTABLE( lrecPurchaseHeader );
      lrrefLine.GETTABLE( lrecPurchaseLine );

      lcuDataSetTools.SetCalculateFields(iEventID,
                                        lrrefLine,
                                        lrecPurchaseLine.FIELDNO("Outstanding Quantity"),
                                        lrecPurchaseLine.FIELDNO(Quantity),
                                        lrecPurchaseLine.FIELDNO("Qty. to Receive"),
                                        lrecPurchaseLine.FIELDNO("Quantity Received")
                                        );

      lcuDataSetTools.SetPositiveFlag(TRUE);

      lcuDataSetTools.BuildHeaderLineDatasetEmbedRes(iEventID, lrrefHeader, lrrefLine, lbNeedsItemTrackingTable, TRUE, ldnOutput );

      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Purchase Header"));
      ptrecEventParams.setValue('Document No.', lcodPurchaseOrderNumber);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    LOCAL PROCEDURE UpdatePurchaseLine@1000000030(VAR ptrecEventParams@1000000019 : TEMPORARY Record 23044511;VAR pbsOutput@1000000018 : BigText);
    VAR
      lrecLPHeader@100000001 : Record 23044505;
      lcodLocation@1000000006 : Code[10];
      lcodPurchaseOrderNumber@1000000005 : Code[20];
      ldQtyToReceive@1000000004 : Decimal;
      liLineNumber@1000000003 : Integer;
      lrecPurchaseLine@1000000002 : Record 39;
      lrecPurchaseHeader@1000000001 : Record 38;
      lcodBinCode@1000000008 : Code[20];
      lsLotNumber@1000000011 : Text;
      lsSerialNumber@1000000012 : Text;
      ldChange@1000000016 : Decimal;
      lbMultiSN@1000000007 : Boolean;
      liIndex@1000000009 : Integer;
      lrecCustomExtendedPurchaseLine@1000000000 : Record 39;
      ldtExpirationDate@1000000021 : Date;
      lrrefLine@1000000023 : RecordRef;
      ldnOutput@1000000013 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lcuDataSetTools@1000000010 : Codeunit 23044535;
      lrecConfig@1000000024 : Record 23044504;
      ldPreviousQuantity@1000000015 : Decimal;
      lcodLicensePlateNo@1000000020 : Code[20];
      liNumberOfLabels@1000000014 : Integer;
      loptSourceDocument@1000000025 : ' ,Purchase Order,Sales Order,Inbound Transfer,Outbound Transfer,Prod. Order,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick,Receipt,Shipment,Reclass,Purchase Return Order,Assembly,Invt. Movement';
      lbDecrease@100000000 : Boolean;
    BEGIN
      // Updates the Purchase Line quantity to receive and tracking information.
      lcodLocation := ptrecEventParams.getValue('location');
      lcodPurchaseOrderNumber := ptrecEventParams.getDocumentNo();
      liLineNumber := ptrecEventParams.getLineNo();
      ldQtyToReceive := ptrecEventParams.getValueAsDecimal('qty_to_receive');
      lcodBinCode := ptrecEventParams.getValue('bin');
      lsLotNumber := ptrecEventParams.getLotNo();
      lsSerialNumber := ptrecEventParams.getSerialNo();
      ldtExpirationDate := cuCommonFuncs.getExpirationDate(ptrecEventParams);
      lcodLicensePlateNo := ptrecEventParams.getValue('lp_number');

      cuCommonFuncs.getDeviceConfig(lrecConfig,ptrecEventParams);

      lrecPurchaseLine.GET(lrecPurchaseLine."Document Type"::Order, lcodPurchaseOrderNumber, liLineNumber);
      lrecPurchaseHeader.GET(lrecPurchaseHeader."Document Type"::Order, lcodPurchaseOrderNumber);

      ldChange := ldQtyToReceive - lrecPurchaseLine."Qty. to Receive";
      ldPreviousQuantity := lrecPurchaseLine."Qty. to Receive";

      lbDecrease := (ldQtyToReceive < lrecPurchaseLine."Qty. to Receive");

      IF (lcodLicensePlateNo <> '') AND lbDecrease THEN BEGIN
        IF lrecLPHeader.GET(lcodLicensePlateNo) THEN BEGIN
          lrecLPHeader."Processing State" := lrecLPHeader."Processing State"::Removing;
          lrecLPHeader.MODIFY();
        END;
      END;


      lrecPurchaseLine.VALIDATE("Qty. to Receive", ldQtyToReceive);

      // set the bin code
      IF( (lrecPurchaseLine."Bin Code" = '') AND (lcodBinCode <> '') AND (lrecConfig."Override Blank Bin - Receiving") ) THEN BEGIN
        lrecPurchaseLine.VALIDATE("Bin Code",lcodBinCode);
      END;

      IF ( cuCustomizedFuncs.OnUpdatePurchaseLine( iEventID, lrecPurchaseLine, ptrecEventParams, pbsOutput ) )  THEN BEGIN
        ptrecEventParams.getExtensibilityPurchaseLine( lrecCustomExtendedPurchaseLine);
        lrecPurchaseLine.GET( lrecPurchaseLine."Document Type", lrecPurchaseLine."Document No.", lrecPurchaseLine."Line No." );
        lrecPurchaseLine := lrecCustomExtendedPurchaseLine;
      END;

      lrecPurchaseLine.MODIFY(TRUE);

      IF (lsLotNumber <> '') OR (lsSerialNumber <> '') THEN BEGIN
        cuResMgmt.AddRemovePurchaseTracking(lrecPurchaseLine,
                                            lsSerialNumber,
                                            lsLotNumber,
                                            ldChange,
                                            lrecPurchaseLine."Unit of Measure Code",
                                            ldtExpirationDate);

        IF ldChange > 0 THEN
          createLotSerialInfo(lrecPurchaseLine."No.",lrecPurchaseLine."Variant Code",lsLotNumber,lsSerialNumber);
      END;

      IF (lcodLicensePlateNo <> '') THEN BEGIN
        loptSourceDocument := loptSourceDocument::"Purchase Order";
        cuLPCommon.addRemoveLicensePlateLine(loptSourceDocument,
                                           lrecPurchaseLine."Document No.",
                                           lrecPurchaseLine."Line No.",
                                           lcodLicensePlateNo,
                                           lrecPurchaseLine."No.",
                                           lrecPurchaseLine."Variant Code",
                                           lsLotNumber,
                                           lsSerialNumber,
                                           ldChange,
                                           lrecPurchaseLine."Unit of Measure Code",
                                           ldtExpirationDate,
                                           lrecPurchaseLine."Bin Code"
                                           );

        IF lrecLPHeader.GET(lcodLicensePlateNo) THEN BEGIN
          lrecLPHeader."Processing State" := lrecLPHeader."Processing State"::" ";
          lrecLPHeader.MODIFY();
        END;
      END;

      IF( (lrecConfig."Print On Receipt Qty. Change") AND (ldChange>0) ) THEN BEGIN
        liNumberOfLabels :=  ptrecEventParams.getValueAsInt('number_of_labels');
        PrintPurchaseOrderItemLabel(ptrecEventParams, lrecPurchaseLine,ldChange, lsSerialNumber, lsLotNumber, ldtExpirationDate, liNumberOfLabels);
      END;



      lrecPurchaseLine.SETRECFILTER();
      lrrefLine.GETTABLE( lrecPurchaseLine );

      lcuDataSetTools.SetCalculateFields(50005,
                                        lrrefLine,
                                        lrecPurchaseLine.FIELDNO("Outstanding Quantity"),
                                        lrecPurchaseLine.FIELDNO(Quantity),
                                        lrecPurchaseLine.FIELDNO("Qty. to Receive"),
                                        lrecPurchaseLine.FIELDNO("Quantity Received")
                                        );

      lcuDataSetTools.SetPositiveFlag(TRUE);

      ldnOutput := ldnOutput.StringBuilder();
      lcuDataSetTools.BuildLineTableEmbedRes(50005, lrrefLine, TRUE, ldnOutput);
      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Purchase Line"));
      ptrecEventParams.setValue('Document No.', lcodPurchaseOrderNumber);
      ptrecEventParams.setValue('Previous Quantity', FORMAT(ldPreviousQuantity));
      ptrecEventParams.setValue('New Quantity', FORMAT(ldQtyToReceive));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    LOCAL PROCEDURE updatePOVendorShipNumber@1000000031(VAR ptrecEventParams@1000000004 : TEMPORARY Record 23044511;VAR pbsOutput@1000000002 : BigText);
    VAR
      lcodLocation@1000000006 : Code[10];
      lcodPurchaseOrderNumber@1000000005 : Code[20];
      lrecPurchaseHeader@1000000001 : Record 38;
      lcodVendorShipNumber@1000000003 : Code[35];
    BEGIN
      // Updates the 'Vendor Shipment No.' on the purchase header.
      // If there are no errors a blank string will be returned,
      // otherwise the string will contain the error message.
      lcodLocation := ptrecEventParams.getValue('location');
      lcodPurchaseOrderNumber := ptrecEventParams.getDocumentNo();
      lcodVendorShipNumber := ptrecEventParams.getValue('action_result');
      lrecPurchaseHeader.SetHideValidationDialog(TRUE);
      lrecPurchaseHeader.GET(lrecPurchaseHeader."Document Type"::Order, lcodPurchaseOrderNumber);
      lrecPurchaseHeader.VALIDATE("Vendor Shipment No.", lcodVendorShipNumber);
      lrecPurchaseHeader.MODIFY(TRUE);

      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);
    END;

    PROCEDURE postPurchaseOrder@1000000003(VAR ptrecEventParams@1000000004 : TEMPORARY Record 23044511;VAR pbsOutput@1000000003 : BigText);
    VAR
      lrecPurchaseHeader@1000000001 : Record 38;
      lrecPurchaseLine@1000000006 : Record 39;
      lcodPurchaseOrderNumber@1000000002 : Code[20];
      ltxtDetails@1000000000 : Text[250];
      lbManuallyPosted@1000000005 : Boolean;
    BEGIN
      // Attempts to post the purchase order (receive)
      lcodPurchaseOrderNumber := ptrecEventParams.getDocumentNo();
      lbManuallyPosted := ptrecEventParams.getValueAsBool('manuallyPosted');

      lrecPurchaseHeader.SetHideValidationDialog(TRUE);
      lrecPurchaseHeader.GET(lrecPurchaseHeader."Document Type"::Order, lcodPurchaseOrderNumber);

      lrecPurchaseLine.SETRANGE("Document Type",lrecPurchaseHeader."Document Type");
      lrecPurchaseLine.SETRANGE("Document No.",lrecPurchaseHeader."No.");
      IF NOT lbManuallyPosted THEN
        lrecPurchaseLine.SETFILTER("Qty. to Receive",'>%1',0);

      IF lrecPurchaseLine.FINDSET(FALSE) THEN BEGIN
        lrecPurchaseHeader.VALIDATE("Posting Date",TODAY);
        lrecPurchaseHeader.MODIFY(TRUE);
        lrecPurchaseHeader.GET(lrecPurchaseHeader."Document Type"::Order, lcodPurchaseOrderNumber);
        lrecPurchaseHeader.Receive := TRUE;
        lrecPurchaseHeader.Invoice := FALSE;  // can be true if invoicing desired as well

        CODEUNIT.RUN(CODEUNIT::"Purch.-Post",lrecPurchaseHeader);
      END;

      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);

      ltxtDetails := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_POST_PURCHASE_ORDER', codRegionCode), lcodPurchaseOrderNumber);
      ptrecEventParams.setValue('details', ltxtDetails);
      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Purchase Header"));
      ptrecEventParams.setValue('Document No.', lcodPurchaseOrderNumber);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    LOCAL PROCEDURE updatePOVendorInvoiceNumber@1000000007(VAR ptrecEventParams@1000000004 : TEMPORARY Record 23044511;VAR pbsOutput@1000000002 : BigText);
    VAR
      lcodLocation@1000000006 : Code[10];
      lcodPurchaseOrderNumber@1000000005 : Code[20];
      lrecPurchaseHeader@1000000001 : Record 38;
      lcodVendorInvoiceNumber@1000000003 : Code[35];
    BEGIN
      // Updates the 'Vendor Invoice No.' on the purchase header.
      // If there are no errors a blank string will be returned,
      // otherwise the string will contain the error message.
      lcodLocation := ptrecEventParams.getValue('location');
      IF( lcodPurchaseOrderNumber = '' ) THEN
        lcodPurchaseOrderNumber := ptrecEventParams.getValue('No.');
      lcodVendorInvoiceNumber := ptrecEventParams.getValue('action_result');
      lrecPurchaseHeader.SetHideValidationDialog(TRUE);
      lrecPurchaseHeader.GET(lrecPurchaseHeader."Document Type"::Order, lcodPurchaseOrderNumber);
      lrecPurchaseHeader.VALIDATE("Vendor Invoice No.", lcodVendorInvoiceNumber);
      lrecPurchaseHeader.MODIFY(TRUE);
      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);
    END;

    LOCAL PROCEDURE getDocumentList@1000000016(VAR ptrecEventParams@1000000014 : TEMPORARY Record 23044511;VAR pbsOutput@1000000013 : BigText);
    VAR
      lcodUser@1000000006 : Code[50];
      lsFilter@1000000009 : Text[250];
      lrecConfig@1000000000 : Record 23044504;
      ltrecDocList@1000000011 : TEMPORARY Record 23044535;
      lcuDataSetTools@1000000015 : Codeunit 23044535;
      lrrefDocListRef@1000000016 : RecordRef;
      ldnOutput@1000000001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      liDocCounter@1000000023 : Integer;
      lcodOptionalItem@1000000007 : Code[20];
      lbOnlyAssignedDocs@1000000008 : Boolean;
      liMaxDocList@1000000010 : Integer;
    BEGIN
      //<FUNC>
      //  Description: Builds up a list of receiving documents for the handheld
      //  Called From: This codeunit (handheld)
      //  Side Effect: None
      //</FUNC>


      ldnOutput := ldnOutput.StringBuilder();
      lcodUser := ptrecEventParams.getValue('user_name');
      lsFilter := ptrecEventParams.getValue('filter');
      lcodOptionalItem := ptrecEventParams.getValue('item_number');

      IF( lsFilter <> '' ) THEN BEGIN
        lsFilter := '*' + lsFilter + '*';
      END;

      IF( lcodOptionalItem <> '' ) THEN
        lsFilter := '';

      cuCommonFuncs.getDeviceConfig( lrecConfig,ptrecEventParams );
      lbOnlyAssignedDocs := ( lcodUser<>'' ) AND ( NOT lrecConfig."Show All Documents");

      recWHISetup.GET;
      liMaxDocList := recWHISetup."Document Max List";
      IF liMaxDocList = 0 THEN
        liMaxDocList := 999999;

      searchWhseReceipts(
        ltrecDocList,
        liDocCounter,
        lrecConfig,
        lbOnlyAssignedDocs,
        lcodUser,
        lsFilter,
        liMaxDocList,
        lcodOptionalItem
        );

      searchPurchaseOrders(
          ltrecDocList,
          liDocCounter,
          lrecConfig,
          lbOnlyAssignedDocs,
          lcodUser,
          lsFilter,
          liMaxDocList,
          lcodOptionalItem
          );

      searchTransferOrders(
          ltrecDocList,
          liDocCounter,
          lrecConfig,
          lbOnlyAssignedDocs,
          lcodUser,
          lsFilter,
          liMaxDocList,
          lcodOptionalItem
          );


      ltrecDocList.RESET;
      lrrefDocListRef.GETTABLE( ltrecDocList  );
      IF ( lrrefDocListRef.FINDFIRST() ) THEN;

      lcuDataSetTools.BuildLinesOnlyDataset(
        iEventID,
        lrrefDocListRef,
        FALSE,
        ldnOutput);

      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE addDocumentToList@1000000037(VAR ptrecDocList@1000000002 : Record 23044535;VAR piLineCounter@1000000001 : Integer;pbUseSourceDocument@1000000000 : Boolean;pcodDocumentNo@1000000003 : Code[20];pcodSourceNo@1000000004 : Code[20];piSourceTable@1000000005 : Integer;pcodRefNumber@1000000006 : Code[50];pcodAssignedUser@1000000007 : Code[50];pdtDueDate@1000000008 : Date;pcodWhseDocNumber@1000000011 : Code[20];psCustomText1@1000000009 : Text[50];psBarcode@1000000010 : Text[100];PickTypePara@1000000014 : ' ,TO, SO';ShipmentMethodPara@1000000013 : Code[10];NumberofLinesofSOPara@1000000012 : Integer);
    BEGIN
      //<FUNC>
      //  Description: Wrapper routine for create a lookup list result
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      ptrecDocList.RESET;
      ptrecDocList.SETRANGE("Document No.",pcodDocumentNo);
      IF (pbUseSourceDocument) THEN
        ptrecDocList.SETRANGE("Source Document No.",pcodSourceNo);

      IF( NOT ptrecDocList.FINDFIRST ) THEN BEGIN
        ptrecDocList.INIT;
        piLineCounter += 1;
        ptrecDocList."Entry No." := piLineCounter;
        ptrecDocList."Source Table" := piSourceTable;
        ptrecDocList."Reference No." := pcodRefNumber;
        ptrecDocList."Document No." := pcodDocumentNo;
        IF( pbUseSourceDocument ) THEN
          ptrecDocList."No." := pcodSourceNo
        ELSE
          ptrecDocList."No." := pcodDocumentNo;

        ptrecDocList."Assigned User ID" := pcodAssignedUser;
        ptrecDocList."Due Date" := pdtDueDate;
        ptrecDocList."Whse. Document No." := pcodWhseDocNumber;
        ptrecDocList."Source Document No." := pcodSourceNo;
        ptrecDocList."Custom Text 1" := psCustomText1;
        ptrecDocList."Pick Type" := FORMAT(PickTypePara);  //PKS
        ptrecDocList."Shipping Method" := ShipmentMethodPara; //PKS
        ptrecDocList."Number of Lines" := NumberofLinesofSOPara; //PKS
        ptrecDocList.Barcode := psBarcode;
        ptrecDocList.INSERT;
      END;
    END;

    PROCEDURE canCreateReceipt@1000000014(piSourceType@1000000000 : Integer;piSourceSubType@1000000001 : Integer;pcodSourceNo@1000000002 : Code[20];piSourceLineNo@1000000005 : Integer;pdQtyBase@1000000003 : Decimal) : Boolean;
    VAR
      lrecWhseReceiptLine@1000000004 : Record 7317;
      ldTotalQtyBase@1000000006 : Decimal;
      ldTotalReceivedQtyBase@1000000007 : Decimal;
    BEGIN
      //<FUNC>
      //  Description: Determines if the document can still generate a whse. receipt
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      lrecWhseReceiptLine.SETRANGE("Source Type",piSourceType);
      lrecWhseReceiptLine.SETRANGE("Source Subtype",piSourceSubType);
      lrecWhseReceiptLine.SETRANGE("Source No.",pcodSourceNo);
      lrecWhseReceiptLine.SETRANGE("Source Line No.",piSourceLineNo);

      ldTotalQtyBase  := 0;
      ldTotalReceivedQtyBase := 0;
      IF (lrecWhseReceiptLine.FINDSET(FALSE)) THEN BEGIN
        REPEAT
          ldTotalQtyBase := ldTotalQtyBase + lrecWhseReceiptLine."Qty. (Base)";
          ldTotalReceivedQtyBase := ldTotalReceivedQtyBase + lrecWhseReceiptLine."Qty. Received (Base)";
        UNTIL (lrecWhseReceiptLine.NEXT = 0);
      END;

      EXIT( (ldTotalQtyBase - ldTotalReceivedQtyBase) < pdQtyBase );
    END;

    PROCEDURE searchWhseReceipts@1000000043(VAR ptrecDocList@1000000000 : Record 23044535;VAR piLineCounter@1000000001 : Integer;VAR precConfig@1000000002 : Record 23044504;pbOnlyAssignedDocs@1000000003 : Boolean;pcodUser@1000000004 : Code[50];ptxtFilter@1000000007 : Text;piMaxDocCount@1000000013 : Integer;pcodItemNumber@1000000010 : Text);
    VAR
      lrecWhseReceiptHeader@1000000005 : Record 7316;
      lrecWhseReceiptLine@1000000016 : Record 7317;
      lrecWhseRcptHeaderTemp@1000000006 : Record 7316;
      lrecWhseRcptLineTemp@1000000009 : Record 7317;
      lrecPurchHeader@1000000011 : Record 38;
      lbIncludeResult@1000000008 : Boolean;
      lsVendorName@1000000012 : Text[50];
    BEGIN
      //<FUNC>
      //  Description: Builds up a list of whse. receipts for the lookup list
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>


      lrecWhseReceiptHeader.SETRANGE("Location Code",precConfig."Location Code");
      IF( pbOnlyAssignedDocs ) THEN
        lrecWhseReceiptHeader.SETFILTER("Assigned User ID",'%1|%2','','*'+ pcodUser);

      IF( lrecWhseReceiptHeader.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          lbIncludeResult := (ptxtFilter = '');

          // check the receipt lines
          lrecWhseReceiptLine.RESET;
          lrecWhseReceiptLine.SETRANGE("No.",lrecWhseReceiptHeader."No.");
          lrecWhseReceiptLine.SETFILTER("Qty. Outstanding", '>0' );

          IF( pcodItemNumber <> '' ) THEN
            lrecWhseReceiptLine.SETRANGE("Item No.",pcodItemNumber);

          IF( lrecWhseReceiptLine.FINDSET(FALSE) ) THEN BEGIN
            REPEAT
              IF( ptxtFilter <> '' ) THEN BEGIN

                // check the order number
                lrecWhseRcptHeaderTemp.RESET;
                lrecWhseRcptHeaderTemp.SETFILTER("No.",ptxtFilter);
                IF lrecWhseRcptHeaderTemp.FINDSET(FALSE) THEN BEGIN
                  REPEAT
                    lbIncludeResult := lrecWhseRcptHeaderTemp."No." = lrecWhseReceiptHeader."No.";
                  UNTIL( (lrecWhseRcptHeaderTemp.NEXT=0) OR lbIncludeResult);
                END;

                // check the vendor shipment number
                IF( NOT lbIncludeResult ) THEN BEGIN
                  lrecWhseRcptHeaderTemp.RESET;
                  lrecWhseRcptHeaderTemp.SETRANGE("No.", lrecWhseReceiptHeader."No.");
                  lrecWhseRcptHeaderTemp.SETFILTER("Vendor Shipment No.",ptxtFilter);
                  lbIncludeResult := lrecWhseRcptHeaderTemp.FINDFIRST;
                END;

                // check the source number (whse. receipts only)
                IF( NOT lbIncludeResult ) THEN BEGIN
                  lrecWhseRcptHeaderTemp.RESET;
                  lrecWhseRcptLineTemp.RESET;
                  lrecWhseRcptLineTemp.SETRANGE("No.",lrecWhseReceiptHeader."No.");
                  lrecWhseRcptLineTemp.SETFILTER("Source No.", ptxtFilter);
                  lbIncludeResult := lrecWhseRcptLineTemp.FINDFIRST;
                END;
              END;

              IF( lbIncludeResult ) THEN BEGIN
                lsVendorName := '';
                IF lrecWhseReceiptLine."Source Document" = lrecWhseReceiptLine."Source Document"::"Purchase Order" THEN BEGIN
                  IF lrecPurchHeader.GET(lrecWhseReceiptLine."Source Subtype",lrecWhseReceiptLine."Source No.") THEN BEGIN
                    lsVendorName := lrecPurchHeader."Buy-from Vendor Name";
                  END;
                END;
                addDocumentToList(
                  ptrecDocList,
                  piLineCounter,
                  (precConfig."Use Source Doc. - Receiving" = precConfig."Use Source Doc. - Receiving"::Yes),  // use source document
                  lrecWhseReceiptLine."No.",                      // document no
                  lrecWhseReceiptLine."Source No.",               // source no
                  DATABASE::"Warehouse Receipt Header",           // source table
                  lrecWhseReceiptHeader."Vendor Shipment No.",    // reference no
                  lrecWhseReceiptHeader."Assigned User ID",       // assigned user
                  lrecWhseReceiptLine."Due Date",                 // due date
                  '',                                             // whse document #
                  lsVendorName,                                   // custom text 1
                  '%R%' + lrecWhseReceiptLine."No.",               // barcode
                  0,
                  '',
                  0
                );
              END;
            UNTIL((lrecWhseReceiptLine.NEXT=0) OR (piLineCounter >= piMaxDocCount));
          END;
        UNTIL((lrecWhseReceiptHeader.NEXT=0) OR (piLineCounter >= piMaxDocCount))
      END;
    END;

    PROCEDURE searchPurchaseOrders@1000000036(VAR ptrecDocList@1000000000 : Record 23044535;VAR piLineCounter@1000000001 : Integer;VAR precConfig@1000000002 : Record 23044504;pbOnlyAssignedDocs@1000000003 : Boolean;pcodUser@1000000004 : Code[50];ptxtFilter@1000000007 : Text;piMaxDocCount@1000000013 : Integer;pcodItemNumber@1000000010 : Text);
    VAR
      lrecPurchHeader@1000000005 : Record 38;
      lrecPurchLine@1000000012 : Record 39;
      lrecPurchHeaderTemp@1000000011 : Record 38;
      lrecLocation@1000000014 : Record 14;
      lbIncludeResult@1000000008 : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Builds up a list of purchase orders for the lookup list
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>


      lrecLocation.GET(precConfig."Location Code");

      lrecPurchHeader.SETRANGE("Completely Received",FALSE);
      lrecPurchHeader.SETRANGE("Document Type", lrecPurchHeader."Document Type"::Order);

      IF( pbOnlyAssignedDocs ) THEN
        lrecPurchHeader.SETFILTER("Assigned User ID",'%1|%2','','*'+ pcodUser);

      IF( precConfig."Only Show Released Receipts" = precConfig."Only Show Released Receipts"::Yes ) THEN
          lrecPurchHeader.SETRANGE(Status,lrecPurchHeader.Status::Released);

      IF( lrecPurchHeader.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          lbIncludeResult := (ptxtFilter = '');

          // check the purchase lines
          lrecPurchLine.RESET;
          lrecPurchLine.SETRANGE("Document Type",lrecPurchHeader."Document Type");
          lrecPurchLine.SETRANGE("Document No.",lrecPurchHeader."No.");
          lrecPurchLine.SETRANGE("Location Code",precConfig."Location Code");
          lrecPurchLine.SETRANGE("Completely Received",FALSE);
          lrecPurchLine.SETRANGE(Type,lrecPurchLine.Type::Item);
          lrecPurchLine.SETFILTER("No.",'<>%1','');
          lrecPurchLine.SETFILTER("Prod. Order No.",'=%1','');

          IF( pcodItemNumber <> '' ) THEN
            lrecPurchLine.SETRANGE("No.",pcodItemNumber);

          lrecPurchHeaderTemp.RESET;
          lrecPurchHeaderTemp.SETRANGE("Document Type",lrecPurchHeader."Document Type");

          IF( lrecPurchLine.FINDSET(FALSE) ) THEN BEGIN
            REPEAT
              IF( ptxtFilter <> '' ) THEN BEGIN
                // check the purchase order number
                lrecPurchHeaderTemp.SETFILTER("No.",ptxtFilter);
                IF lrecPurchHeaderTemp.FINDSET(FALSE) THEN BEGIN
                  REPEAT
                    lbIncludeResult := lrecPurchHeaderTemp."No." = lrecPurchHeader."No.";
                  UNTIL( (lrecPurchHeaderTemp.NEXT=0) OR lbIncludeResult);
                END;

                // check the vendor shipment number
                IF( NOT lbIncludeResult ) THEN BEGIN
                  lrecPurchHeaderTemp.RESET;
                  lrecPurchHeaderTemp.SETRANGE("No.", lrecPurchHeader."No.");
                  lrecPurchHeaderTemp.SETFILTER("Vendor Shipment No.",ptxtFilter);
                  lbIncludeResult := lrecPurchHeaderTemp.FINDFIRST;
                END;

                // check the source number (whse. receipts only)
              END;

              IF( lbIncludeResult AND lrecLocation."Require Receive" ) THEN BEGIN
                // make sure not already filled on a warehouse receipt
                lbIncludeResult := canCreateReceipt(
                  DATABASE::"Purchase Line",
                  lrecPurchLine."Document Type",
                  lrecPurchLine."Document No.",
                  lrecPurchLine."Line No.",
                  lrecPurchLine."Quantity (Base)" - lrecPurchLine."Qty. Received (Base)"
                );
              END;

              IF( lbIncludeResult ) THEN BEGIN
                addDocumentToList(
                  ptrecDocList,
                  piLineCounter,
                  FALSE,                                    // use source document
                  lrecPurchLine."Document No.",             // document no
                  '',                                       // source no
                  DATABASE::"Purchase Header",              // source table
                  lrecPurchHeader."Vendor Shipment No.",    // reference no
                  lrecPurchHeader."Assigned User ID",       // assigned user
                  lrecPurchHeader."Due Date",               // due date
                  '',                                       // whse document #
                  lrecPurchHeader."Buy-from Vendor Name",   // custom text 1
                  '%PO%' + lrecPurchLine."Document No."     // barcode
                  ,0,
                  '',
                  0
                );
              END;
            UNTIL((lrecPurchLine.NEXT=0) OR (piLineCounter >= piMaxDocCount));
          END;
        UNTIL((lrecPurchHeader.NEXT=0) OR (piLineCounter >= piMaxDocCount))
      END;
    END;

    PROCEDURE searchTransferOrders@1000000017(VAR ptrecDocList@1000000000 : Record 23044535;VAR piLineCounter@1000000001 : Integer;VAR precConfig@1000000002 : Record 23044504;pbOnlyAssignedDocs@1000000003 : Boolean;pcodUser@1000000004 : Code[50];ptxtFilter@1000000007 : Text;piMaxDocCount@1000000013 : Integer;pcodItemNumber@1000000010 : Text);
    VAR
      lrecTransferHeader@1000000005 : Record 5740;
      lrecTransferLine@1000000016 : Record 5741;
      lrecLocation@1000000014 : Record 14;
      lrecTransHeaderTemp@1000000011 : Record 5740;
      lbIncludeResult@1000000008 : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Builds up a list of transfer orders for the lookup list
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>


      lrecLocation.GET(precConfig."Location Code");
      lrecTransferHeader.SETRANGE("Transfer-to Code",precConfig."Location Code");
      lrecTransferHeader.SETRANGE("Completely Received",FALSE);
      lrecTransferHeader.SETRANGE(Status,lrecTransferHeader.Status::Released);

      IF( precConfig."Only Show Released Receipts" = precConfig."Only Show Released Receipts"::Yes ) THEN
          lrecTransferHeader.SETRANGE(Status,lrecTransferHeader.Status::Released);

      IF( pbOnlyAssignedDocs ) THEN
        lrecTransferHeader.SETFILTER("Assigned User ID",'%1|%2','','*'+ pcodUser);

      IF( lrecTransferHeader.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          lbIncludeResult := (ptxtFilter = '');

          // check the transfer lines
          lrecTransferLine.RESET;
          lrecTransferLine.SETRANGE("Document No.",lrecTransferHeader."No.");
          lrecTransferLine.SETRANGE("Completely Received",FALSE);
          lrecTransferLine.SETFILTER("Quantity Shipped",'>%1',0);

          IF( pcodItemNumber <> '' ) THEN
            lrecTransferLine.SETRANGE("Item No.",pcodItemNumber);

          lrecTransHeaderTemp.RESET;

          IF( lrecTransferLine.FINDSET(FALSE) ) THEN BEGIN
            REPEAT
              IF( ptxtFilter <> '' ) THEN BEGIN
                // check the purchase order number
                lrecTransHeaderTemp.SETFILTER("No.",ptxtFilter);
                IF lrecTransHeaderTemp.FINDSET(FALSE) THEN BEGIN
                  REPEAT
                    lbIncludeResult := lrecTransHeaderTemp."No." = lrecTransferHeader."No.";
                  UNTIL( (lrecTransHeaderTemp.NEXT=0) OR lbIncludeResult);
                END;

                // check the external document number
                IF( NOT lbIncludeResult ) THEN BEGIN
                  lrecTransHeaderTemp.RESET;
                  lrecTransHeaderTemp.SETRANGE("No.", lrecTransferHeader."No.");
                  lrecTransHeaderTemp.SETFILTER("External Document No.",ptxtFilter);
                  lbIncludeResult := lrecTransHeaderTemp.FINDFIRST;
                END;

                // check the source number (whse. receipts only)
              END;

              IF( lbIncludeResult AND lrecLocation."Require Receive" ) THEN BEGIN
                // make sure not already filled on a warehouse receipt
                lbIncludeResult := canCreateReceipt(
                  DATABASE::"Transfer Line",
                  1,
                  lrecTransferLine."Document No.",
                  lrecTransferLine."Line No.",
                  lrecTransferLine."Quantity (Base)" - lrecTransferLine."Qty. Received (Base)"
                );
              END;

              IF( lbIncludeResult ) THEN BEGIN
                addDocumentToList(
                  ptrecDocList,
                  piLineCounter,
                  FALSE,                                          // use source document
                  lrecTransferLine."Document No.",                // document no
                  '',                                             // source no
                  DATABASE::"Transfer Header",                    // source table
                  lrecTransferHeader."External Document No.",     // reference no
                  lrecTransferHeader."Assigned User ID",          // assigned user
                  lrecTransferHeader."Receipt Date",              // due date
                  '',                                             // whse document #
                  '',                                             // custom text 1
                  '%T%' + lrecTransferLine."Document No.",         // barcode
                  1,
                  lrecTransferHeader."Shipment Method Code",
                  NumberOfLine(lrecTransferHeader."No.")
                );
              END;
            UNTIL((lrecTransferLine.NEXT=0) OR (piLineCounter >= piMaxDocCount));
          END;
        UNTIL((lrecTransferHeader.NEXT=0) OR (piLineCounter >= piMaxDocCount))
      END;
    END;

    LOCAL PROCEDURE GetTextScanDocBarcode@1000000034(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecPurchaseHeader@1000000003 : Record 38;
      lrecTransferHeader@1000000004 : Record 5740;
      lrecWhseReceiptHeader@1000000005 : Record 7316;
      lsBarcodeText@1000000002 : Text;
    BEGIN
      //<FUNC>
      //  Determines what type of document (if any) was scanned
      //  on the lookup list.
      //  Returns the appropriate barcode instead that should be used.
      //<FUNC>

      lsBarcodeText := ptrecEventParams.getValue('barcode_text');
      IF lrecPurchaseHeader.GET(lrecPurchaseHeader."Document Type"::Order,lsBarcodeText) THEN BEGIN
        pbsOutput.ADDTEXT('<VALUE>%PO%' + lsBarcodeText + '</VALUE>');
      END ELSE IF lrecTransferHeader.GET(lsBarcodeText) THEN BEGIN
        pbsOutput.ADDTEXT('<VALUE>%T%' + lsBarcodeText + '</VALUE>');
      END ELSE IF lrecWhseReceiptHeader.GET(lsBarcodeText) THEN BEGIN
        pbsOutput.ADDTEXT('<VALUE>%WR%' + lsBarcodeText + '</VALUE>');
      END ELSE BEGIN
        pbsOutput.ADDTEXT('<VALUE></VALUE>');
      END;

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    LOCAL PROCEDURE getTransferOrder@1000000008(VAR ptrecEventParams@1000000005 : TEMPORARY Record 23044511;VAR pbsOutput@1000000004 : BigText);
    VAR
      lcodLocation@1000000014 : Code[10];
      lcodTransferOrderNumber@1000000013 : Code[20];
      lrecTransferHeader@1000000012 : Record 5740;
      lrecTransferLine@1000000011 : Record 5741;
      lrecLocation@1000000002 : Record 14;
      ldnOutput@1000000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lrrefHeader@1000000007 : RecordRef;
      lrrefLine@1000000006 : RecordRef;
      lbNeedsItemTrackingTable@1000000001 : Boolean;
      lcuDataSetTools@1000000000 : Codeunit 23044535;
    BEGIN
      // Returns a Transfer Order document and lines.
      lcodLocation := ptrecEventParams.getValue('location');
      lcodTransferOrderNumber := ptrecEventParams.getDocumentNo();


      lrecTransferHeader.GET(lcodTransferOrderNumber);

      assignTransferOrder(lrecTransferHeader, ptrecEventParams);

      IF lrecLocation.GET(lcodLocation) THEN ;
      cuCommonFuncs.checkLocation(lcodLocation, lrecTransferHeader."Transfer-to Code");

      ldnOutput := ldnOutput.StringBuilder();
      lbNeedsItemTrackingTable := ptrecEventParams.getNeedsItemTrackingTable();
      lrecTransferLine.SETRANGE("Document No.",lcodTransferOrderNumber);
      lrecTransferLine.SETFILTER("Item No.",'<>%1','');
      lrecTransferLine.SETRANGE("Transfer-from Code", lrecTransferHeader."Transfer-from Code");
      lrecTransferLine.SETRANGE("Transfer-to Code", lrecTransferHeader."Transfer-to Code");
      IF( lrecTransferLine.FINDSET(FALSE) ) THEN;

      // prepare the recordrefs
      lrecTransferHeader.SETRECFILTER();
      lrrefHeader.GETTABLE( lrecTransferHeader );
      lrrefLine.GETTABLE( lrecTransferLine );

      lcuDataSetTools.SetFormulaCalcEachRow(
        iEventID,
        lrrefLine,
          -1, //
        DATABASE::Item, // piLookupTable
        6500, // piLookupField  6500 is the item tracking code
        'WHERE (No.=FILTER(''[Item No.]''))' );

      lcuDataSetTools.SetCalculateFields(iEventID,
                                        lrrefLine,
                                        lrecTransferLine.FIELDNO("Outstanding Quantity"),
                                        lrecTransferLine.FIELDNO(Quantity),
                                        lrecTransferLine.FIELDNO("Qty. to Receive"),
                                        lrecTransferLine.FIELDNO("Quantity Received")
                                        );

      lcuDataSetTools.SetPositiveFlag(TRUE);

      lcuDataSetTools.BuildHeaderLineWithLocation(
        iEventID,
        lrrefHeader,
        lrrefLine,
        lbNeedsItemTrackingTable,
        TRUE,
        ldnOutput,
        lcodLocation );

      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Transfer Header"));
      ptrecEventParams.setValue('Document No.', lcodTransferOrderNumber);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    LOCAL PROCEDURE updateTransferLine@1000000010(VAR ptrecEventParams@1000000010 : TEMPORARY Record 23044511;VAR pbsOutput@1000000009 : BigText);
    VAR
      lrecConfig@1000000021 : Record 23044504;
      lrecLPHeader@100000000 : Record 23044505;
      lcodTransferOrderNumber@1000000005 : Code[20];
      ldQtyToReceive@1000000004 : Decimal;
      liLineNumber@1000000003 : Integer;
      lrecTransferLine@1000000002 : Record 5741;
      lrecTransferHeader@1000000001 : Record 5740;
      lcodBinCode@1000000008 : Code[20];
      lsLotNumber@1000000011 : Text;
      lsSerialNumber@1000000012 : Text;
      ltrecCommentLine@1000000014 : TEMPORARY Record 97;
      ldChange@1000000016 : Decimal;
      ldtExpirationDate@1000000000 : Date;
      lrrefLine@1000000018 : RecordRef;
      ldnOutput@1000000006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lcuDataSetTools@1000000007 : Codeunit 23044535;
      ldPreviousQuantity@1000000019 : Decimal;
      lcodLicensePlateNo@1000000020 : Code[20];
      loptSourceDocument@1000000022 : ' ,Purchase Order,Sales Order,Inbound Transfer,Outbound Transfer,Prod. Order,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick,Receipt,Shipment,Reclass,Purchase Return Order,Assembly,Invt. Movement';
      liNumberOfLabels@1000000023 : Integer;
      lbDecrease@100000001 : Boolean;
    BEGIN
      // Updates the Transfer Line quantity to receive and tracking
      // information.

      lcodTransferOrderNumber := ptrecEventParams.getDocumentNo();
      liLineNumber := ptrecEventParams.getLineNo();
      ldQtyToReceive := ptrecEventParams.getValueAsDecimal('qty_to_receive');
      lcodBinCode := ptrecEventParams.getValue('bin');
      lsLotNumber := ptrecEventParams.getLotNo();
      lsSerialNumber := ptrecEventParams.getSerialNo();
      ldtExpirationDate := cuCommonFuncs.getExpirationDate(ptrecEventParams);
      lcodLicensePlateNo := ptrecEventParams.getValue('lp_number');

      lrecTransferHeader.GET(lcodTransferOrderNumber);
      lrecTransferLine.GET(lcodTransferOrderNumber, liLineNumber);

      ldPreviousQuantity := lrecTransferLine."Qty. to Receive";

      ldChange := ldQtyToReceive - lrecTransferLine."Qty. to Receive";

      lbDecrease := (ldQtyToReceive < lrecTransferLine."Qty. to Receive");

      IF (lcodLicensePlateNo <> '') AND lbDecrease THEN BEGIN
        IF lrecLPHeader.GET(lcodLicensePlateNo) THEN BEGIN
          lrecLPHeader."Processing State" := lrecLPHeader."Processing State"::Removing;
          lrecLPHeader.MODIFY();
        END;
      END;


      lrecTransferLine.VALIDATE("Qty. to Receive", ldQtyToReceive);

      // set the bin code
      IF( (lrecTransferLine."Transfer-To Bin Code" = '') AND (lcodBinCode <> '') ) THEN BEGIN
        lrecTransferLine.VALIDATE("Transfer-To Bin Code",lcodBinCode);
      END;

      lrecTransferLine.MODIFY(TRUE);

      // add/remove the serial number
      IF( (lsLotNumber <> '') OR (lsSerialNumber <> '') ) THEN BEGIN
        cuResMgmt.AddRemoveTransferTracking(lrecTransferLine,lsSerialNumber,lsLotNumber,FALSE, ldChange, ldtExpirationDate);
        IF ldChange > 0 THEN
          createLotSerialInfo(lrecTransferLine."Item No.",lrecTransferLine."Variant Code",lsLotNumber,lsSerialNumber);
      END;

      // store this line in the list of changed lines
      ltrecCommentLine.SETRANGE("Line No.", lrecTransferLine."Line No.");
      IF( NOT ltrecCommentLine.FIND('-') ) THEN BEGIN
        ltrecCommentLine."Table Name" := ltrecCommentLine."Table Name"::Item;
        ltrecCommentLine."No." := lrecTransferLine."Item No.";
        ltrecCommentLine."Line No." := lrecTransferLine."Line No.";
        ltrecCommentLine.INSERT;
      END;


      IF (lcodLicensePlateNo <> '') THEN BEGIN
        loptSourceDocument := loptSourceDocument::"Inbound Transfer";

        cuLPCommon.addRemoveLicensePlateLine(loptSourceDocument,
                                           lrecTransferLine."Document No.",
                                           lrecTransferLine."Line No.",
                                           lcodLicensePlateNo,
                                           lrecTransferLine."Item No.",
                                           lrecTransferLine."Variant Code",
                                           lsLotNumber,
                                           lsSerialNumber,
                                           ldChange,
                                           lrecTransferLine."Unit of Measure Code",
                                           ldtExpirationDate,
                                           lrecTransferLine."Transfer-To Bin Code"
                                           );

        IF lrecLPHeader.GET(lcodLicensePlateNo) THEN BEGIN
          lrecLPHeader."Processing State" := lrecLPHeader."Processing State"::" ";
          lrecLPHeader.MODIFY();
        END;
      END;

      cuCommonFuncs.getDeviceConfig(lrecConfig,ptrecEventParams);
      IF( (lrecConfig."Print On Receipt Qty. Change") AND (ldChange>0) ) THEN BEGIN
        liNumberOfLabels :=  ptrecEventParams.getValueAsInt('number_of_labels');
        PrintTransferOrderItemLabel(ptrecEventParams, lrecTransferLine,ldChange, lsSerialNumber, lsLotNumber, ldtExpirationDate, liNumberOfLabels);
      END;


      // in theory there are modified lines (including the original)
      // loop through them and return that xml set to the device for further processing
      ltrecCommentLine.RESET;
      ltrecCommentLine.FINDSET(FALSE);

      lrecTransferLine.GET(lrecTransferHeader."No.",ltrecCommentLine."Line No.");
      lrecTransferLine.SETRECFILTER();
      lrrefLine.GETTABLE( lrecTransferLine );


      lcuDataSetTools.SetFormulaCalcEachRow(
        50013,
        lrrefLine,
          -1, //
        DATABASE::Item, // piLookupTable
        6500, // piLookupField
        'WHERE (No.=FILTER(''[Item No.]''))' ); //

      lcuDataSetTools.SetCalculateFields(50013,
                                        lrrefLine,
                                        lrecTransferLine.FIELDNO("Outstanding Quantity"),
                                        lrecTransferLine.FIELDNO(Quantity),
                                        lrecTransferLine.FIELDNO("Qty. to Receive"),
                                        lrecTransferLine.FIELDNO("Quantity Received")
                                        );

      ldnOutput := ldnOutput.StringBuilder();
      lcuDataSetTools.SetPositiveFlag(TRUE);
      lcuDataSetTools.BuildLineTableWithLocation(50013, lrrefLine, TRUE, ldnOutput, lrecTransferLine."Transfer-to Code");
      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Transfer Header"));
      ptrecEventParams.setValue('Document No.', lcodTransferOrderNumber);
      ptrecEventParams.setValue('Previous Quantity', FORMAT(ldPreviousQuantity));
      ptrecEventParams.setValue('New Quantity', FORMAT(ldQtyToReceive));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE postTransferOrder@1000000020(VAR ptrecEventParams@1000000005 : TEMPORARY Record 23044511;VAR pbsOutput@1000000004 : BigText);
    VAR
      lrecTransferHeader@1000000001 : Record 5740;
      lrecTransferLine@1000000009 : Record 5741;
      lrecReservationEntry@1000000007 : Record 337;
      lcodTransferOrderNumber@1000000002 : Code[20];
      lcuTransPost@1000000003 : Codeunit 5705;
      ltxtDetails@1000000000 : Text[250];
      lbManuallyPosted@1000000008 : Boolean;
    BEGIN
      // Attempts to post the transfer order (receive)
      lcodTransferOrderNumber := ptrecEventParams.getDocumentNo();
      lbManuallyPosted := ptrecEventParams.getValueAsBool('manuallyPosted');

      lrecTransferHeader.GET(lcodTransferOrderNumber);

      lrecTransferLine.SETRANGE("Document No.",lrecTransferHeader."No.");
      IF NOT lbManuallyPosted THEN
        lrecTransferLine.SETFILTER("Qty. to Receive",'>%1',0);

      IF lrecTransferLine.FINDSET(FALSE) THEN BEGIN
        lrecTransferHeader.VALIDATE("Posting Date",TODAY);
        lrecTransferHeader.MODIFY(TRUE);
        lcuTransPost.SetHideValidationDialog(TRUE);
        lcuTransPost.RUN(lrecTransferHeader);

        IF (lrecTransferLine.FINDSET(FALSE)) THEN BEGIN
          REPEAT
            lrecReservationEntry.SETRANGE(Positive,TRUE);
            lrecReservationEntry.SETRANGE("Item No.", lrecTransferLine."Item No.");
            lrecReservationEntry.SETRANGE("Location Code", lrecTransferLine."Transfer-to Code");
            lrecReservationEntry.SETRANGE("Source ID", lrecTransferLine."Document No.");
            lrecReservationEntry.SETRANGE("Source Prod. Order Line", lrecTransferLine."Line No.");
            IF (lrecReservationEntry.FINDFIRST) THEN BEGIN
              lrecReservationEntry.VALIDATE("Qty. to Handle (Base)", 0);
              lrecReservationEntry.VALIDATE("Qty. to Invoice (Base)", 0);
              lrecReservationEntry.MODIFY(TRUE);
            END;
          UNTIL (lrecTransferLine.NEXT = 0);
        END;
      END;

      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);

      ltxtDetails := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_POST_TRANSFER_ORDER', codRegionCode), lcodTransferOrderNumber);
      ptrecEventParams.setValue('details', ltxtDetails);
      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Transfer Line"));
      ptrecEventParams.setValue('Document No.', lcodTransferOrderNumber);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE processPurchLPScan@1000000038(VAR ptrecEventParams@1000000004 : TEMPORARY Record 23044511;VAR pbsOutput@1000000003 : BigText);
    VAR
      lrecPurchaseLine@1000000011 : Record 39;
      ltrecLPLine@1000000012 : TEMPORARY Record 23044506;
      ltrecLPHeader@1000000017 : TEMPORARY Record 23044505;
      lrecLPLineUsage@1000000006 : Record 23044507;
      lrecLPHeader@1000000005 : Record 23044505;
      ltrecCommentLine@1000000007 : TEMPORARY Record 97;
      ltxtDetails@1000000000 : Text[250];
      lcodLocation@1000000016 : Code[10];
      lcodPurchaseNumber@1000000015 : Code[20];
      lcodLicensePlateNumber@1000000014 : Code[20];
      lcodBinCode@1000000002 : Code[20];
      ldQtyToApply@1000000010 : Decimal;
      ldQtyOutstanding@1000000009 : Decimal;
      ldQtyApplied@1000000008 : Decimal;
      liLPAction@1000000013 : Integer;
      lbOverrideBlankBin@1000000001 : Boolean;
    BEGIN
      // Processes the license plate against the purchase order.
      lcodLocation := ptrecEventParams.getValue('location');
      lcodPurchaseNumber := ptrecEventParams.getDocumentNo();
      lcodLicensePlateNumber := ptrecEventParams.getValue('lp_number');
      liLPAction := ptrecEventParams.getValueAsInt('update_action');
      lcodBinCode := ptrecEventParams.getValue('bin');
      lbOverrideBlankBin := ptrecEventParams.getValueAsBool('override_blank_bin');

      // do not allow license plates for purchases that are intercompany
      cuLPCommon.verifyInterCompanyLP(lcodLicensePlateNumber,lcodPurchaseNumber);

      // modify/breakapart the license plate as required
      // the resulting temp record will either contain the license plate to use or just
      // a list of items.
      lcodLicensePlateNumber := cuLPMgmt.AdjustLicensePlate(ptrecEventParams, ltrecLPLine, ltrecLPHeader);


      cuLPCommon.updatePurchaseLinesCode(lcodLocation,lcodPurchaseNumber, lcodLicensePlateNumber
      , lcodBinCode
      , lbOverrideBlankBin
      , ltrecLPLine
      , ltrecLPHeader
      );

      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);

      ltxtDetails := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_ASSIGN_LP', codRegionCode), lcodLicensePlateNumber, lcodPurchaseNumber);
      ptrecEventParams.setValue('details', ltxtDetails);
      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Purchase Line"));
      ptrecEventParams.setValue('Document No.', lcodPurchaseNumber);

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE processReceiptLPScan@1000000035(VAR ptrecEventParams@1000000004 : TEMPORARY Record 23044511;VAR pbsOutput@1000000003 : BigText);
    VAR
      lrecLPHeader@1000000007 : Record 23044505;
      lrecWhseSourceRcptLine@1000000005 : Record 7317;
      lrecLPLineUsage@1000000002 : Record 23044507;
      ltrecLPLine@1000000008 : TEMPORARY Record 23044506;
      ltrecLPHeader@1000000013 : TEMPORARY Record 23044505;
      ltxtDetails@1000000000 : Text[250];
      lcodLicensePlateNumber@1000000011 : Code[20];
      lcodBinCode@1000000009 : Code[20];
      lcodReceiptNumber@1000000012 : Code[20];
      liLPAction@1000000010 : Integer;
      liSelectedLineNumber@1000000006 : Integer;
      lbOverrideBlankBin@1000000001 : Boolean;
    BEGIN
      // Updates the Warehouse Receipt Lines with the appropriate License Plate.
      // If quantities do not match resulting License Plate then an error will be thrown.

      lcodReceiptNumber := ptrecEventParams.getDocumentNo();
      lcodLicensePlateNumber := ptrecEventParams.getValue('lp_number');
      liLPAction := ptrecEventParams.getValueAsInt('update_action');
      lcodBinCode := ptrecEventParams.getValue('bin');
      //lcodBinCode := ptrecEventParams.getBin();
      liSelectedLineNumber := ptrecEventParams.getLineNo();
      lbOverrideBlankBin := ptrecEventParams.getValueAsBool('override_blank_bin');

      // find the appropriate line (used to limit selection if receipts are combined)
      IF( NOT lrecWhseSourceRcptLine.GET(lcodReceiptNumber,liSelectedLineNumber) ) THEN BEGIN
        lrecWhseSourceRcptLine.SETRANGE("No.",lcodReceiptNumber);
        lrecWhseSourceRcptLine.FINDFIRST;
      END;

      IF lcodBinCode = '' THEN
        lcodBinCode := lrecWhseSourceRcptLine."Bin Code";

      //
      // do not allow license plates for receipts that are either intercompany or transfers that were not part of the
      // outbound document
      //
      IF( (lrecWhseSourceRcptLine."Source Document" = lrecWhseSourceRcptLine."Source Document"::"Purchase Order" ) OR
          (lrecWhseSourceRcptLine."Source Document" = lrecWhseSourceRcptLine."Source Document"::"Inbound Transfer")
        ) THEN BEGIN

        // first ensure it's been shipped
        lrecLPHeader.GET(lcodLicensePlateNumber);


        // This check is not valid for purchase orders that are not from intercompany shipments
        // as there will not be a shipment.
        IF(lrecWhseSourceRcptLine."Source Document"::"Purchase Order" <>  lrecWhseSourceRcptLine."Source Document" ) THEN BEGIN
          lrecLPHeader.TESTFIELD(Status,lrecLPHeader.Status::Shipped);
          unlockLPOnTransferReceipt(lcodLicensePlateNumber, lrecWhseSourceRcptLine."Source No.");
        END;

        // if purchase order check the intercompany
        IF( lrecWhseSourceRcptLine."Source Document" = lrecWhseSourceRcptLine."Source Document"::"Purchase Order" ) THEN BEGIN
          cuLPCommon.verifyInterCompanyLP(lcodLicensePlateNumber,lrecWhseSourceRcptLine."Source No.");
        END;

        // if transfer order check the interlocation
        IF( lrecWhseSourceRcptLine."Source Document" = lrecWhseSourceRcptLine."Source Document"::"Inbound Transfer" ) THEN BEGIN
          lrecLPLineUsage.RESET;
          lrecLPLineUsage.SETRANGE("License Plate No.",lcodLicensePlateNumber);
          lrecLPLineUsage.SETRANGE("Source Document",lrecLPLineUsage."Source Document"::"Outbound Transfer");
          lrecLPLineUsage.SETRANGE("Source No.",lrecWhseSourceRcptLine."Source No.");
          lrecLPLineUsage.SETRANGE("Source Company Name",COMPANYNAME);
          lrecLPLineUsage.SETFILTER("Posting Date",'<>%1',0D);

          IF( NOT lrecLPLineUsage.FINDLAST ) THEN BEGIN
            ERROR(cuTranslationMgmt.getTranslatedString('ERR_LP_NOT_SHIPPED', codRegionCode),lcodLicensePlateNumber,lrecWhseSourceRcptLine."Source No.");
          END;
        END;
      END;


      // modify/breakapart the license plate as required
      // the resulting temp record will either contain the license plate to use or just
      // a list of items.

      lcodLicensePlateNumber := cuLPMgmt.AdjustLicensePlate(ptrecEventParams, ltrecLPLine, ltrecLPHeader);

      cuLPCommon.updateWhseReceiptLinesCode(
        lrecWhseSourceRcptLine."Location Code"
        ,lcodLicensePlateNumber
        ,lrecWhseSourceRcptLine
        ,lcodBinCode
        ,lbOverrideBlankBin
        ,ltrecLPLine
        ,ltrecLPHeader
      );

      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);

      ltxtDetails := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_ASSIGN_LP', codRegionCode), lcodLicensePlateNumber, lcodReceiptNumber);
      ptrecEventParams.setValue('details', ltxtDetails);
      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Warehouse Receipt Line"));
      ptrecEventParams.setValue('Document No.', lcodReceiptNumber);

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE processTransferLPScan@1000000027(VAR ptrecEventParams@1000000004 : TEMPORARY Record 23044511;VAR pbsOutput@1000000003 : BigText);
    VAR
      lrecLPHeader@1000000001 : Record 23044505;
      lrecTransferHeader@1000000005 : Record 5740;
      ltrecLPLine@1000000009 : TEMPORARY Record 23044506;
      ltrecLPHeader@1000000010 : TEMPORARY Record 23044505;
      ltxtDetails@1000000000 : Text[250];
      lcodTransferNumber@1000000020 : Code[20];
      lcodLicensePlateNumber@1000000019 : Code[20];
      lcodBinCode@1000000008 : Code[20];
      liLPAction@1000000018 : Integer;
      lbOverrideBlankBin@1000000007 : Boolean;
      lbOverrideQuantity@1000000006 : Boolean;
      lbCreatedWhenReceiving@1000000002 : Boolean;
    BEGIN
      lcodTransferNumber := ptrecEventParams.getDocumentNo();
      lcodLicensePlateNumber := ptrecEventParams.getValue('lp_number');
      //lcodLocation := ptrecEventParams.getValue('location');
      liLPAction := ptrecEventParams.getValueAsInt('update_action');
      lcodBinCode := ptrecEventParams.getValue('bin');
      lbOverrideBlankBin := ptrecEventParams.getValueAsBool('override_blank_bin');

      //cuCommonFuncs.debugEventParams(ptrecEventParams,FALSE);

      lrecTransferHeader.GET(lcodTransferNumber);

      unlockLPOnTransferReceipt(lcodLicensePlateNumber, lcodTransferNumber);


      // make sure if receiving that the license plate was shipped
      lbCreatedWhenReceiving := TRUE;
      lrecLPHeader.GET(lcodLicensePlateNumber);
      IF(lrecLPHeader."Source Document Type" = lrecLPHeader."Source Document Type"::"Outbound Transfer") THEN BEGIN
        cuLPCommon.verifyInterLocationLP(lcodLicensePlateNumber,lcodTransferNumber);
        lbCreatedWhenReceiving := FALSE;
      END;

      // modify/breakapart the license plate as required
      // the resulting temp record will either contain the license plate to use or just
      // a list of items.
      lcodLicensePlateNumber := cuLPMgmt.AdjustLicensePlate(ptrecEventParams, ltrecLPLine, ltrecLPHeader);
      IF (liLPAction = 5)  THEN BEGIN
        lbOverrideQuantity := TRUE;
      END
      ELSE BEGIN
        lbOverrideQuantity := FALSE;
      END;

      cuLPCommon.updateTransferLinesCode(
        lrecTransferHeader."Transfer-to Code",
        lcodTransferNumber,
        lcodLicensePlateNumber,
        FALSE
        ,lcodBinCode
        ,lbOverrideBlankBin
        ,ltrecLPLine
        ,lbOverrideQuantity,
        lbCreatedWhenReceiving
        ,ltrecLPHeader
      );

      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);

      ltxtDetails := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_ASSIGN_LP', codRegionCode), lcodLicensePlateNumber,lcodTransferNumber);
      ptrecEventParams.setValue('details', ltxtDetails);
      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Transfer Line"));
      ptrecEventParams.setValue('Document No.', lcodTransferNumber);

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE GenerateLotSerialNumber@1000000051(psItemNumber@1000000000 : Text;psVariantCode@1000000001 : Text;VAR psSerialNumberOut@1000000002 : Text;VAR psLotNumberOut@1000000003 : Text);
    BEGIN
      //<FUNC>
      // Generates a lot/serial number if required
      //</FUNC>

      IF psSerialNumberOut = '' THEN BEGIN
        IF getNeedsSerialInbound(psItemNumber) THEN
          psSerialNumberOut := cuDataManager.generateSerialNumber(psItemNumber,psVariantCode);
      END;

      IF psLotNumberOut = '' THEN BEGIN
        IF getNeedsLotInbound(psItemNumber) THEN
          psLotNumberOut := cuDataManager.generateLotNumber(psItemNumber,psVariantCode);
      END;
    END;

    PROCEDURE getNeedsLotInbound@1000000001(pcodItem@1000000000 : Text) pbNeedsLot : Boolean;
    VAR
      lrecItemTracking@1000000001 : Record 6502;
      lrecItem@1000000002 : Record 27;
    BEGIN
      //<FUNC>
      // Returns true if lot tracking is needed on any inbound document
      //</FUNC>
      pbNeedsLot := FALSE;

      IF ( lrecItem.GET( pcodItem) ) THEN BEGIN
        IF ( lrecItem."Item Tracking Code" <> '' ) THEN BEGIN
          IF ( lrecItemTracking.GET( lrecItem."Item Tracking Code" ) ) THEN BEGIN
            pbNeedsLot := lrecItemTracking."Lot Specific Tracking" OR
                lrecItemTracking."Lot Purchase Inbound Tracking" OR
                lrecItemTracking."Lot Pos. Adjmt. Inb. Tracking" OR
                lrecItemTracking."Lot Neg. Adjmt. Inb. Tracking" OR
                lrecItemTracking."Lot Transfer Tracking" OR
                lrecItemTracking."Lot Warehouse Tracking";

          END;
        END;
      END;

      EXIT( pbNeedsLot );
    END;

    PROCEDURE getNeedsSerialInbound@1000000011(pcodItem@1000000000 : Text) pbNeedsSerial : Boolean;
    VAR
      lrecItemTracking@1000000001 : Record 6502;
      lrecItem@1000000002 : Record 27;
    BEGIN
      //<FUNC>
      // Returns true if serial tracking is needed on any inbound document
      //</FUNC>
      pbNeedsSerial := FALSE;

      IF ( lrecItem.GET( pcodItem) ) THEN BEGIN
        IF ( lrecItem."Item Tracking Code" <> '' ) THEN BEGIN
          IF ( lrecItemTracking.GET( lrecItem."Item Tracking Code" ) ) THEN BEGIN
            pbNeedsSerial := lrecItemTracking."SN Specific Tracking" OR
                lrecItemTracking."SN Purchase Inbound Tracking" OR
                lrecItemTracking."SN Pos. Adjmt. Inb. Tracking" OR
                lrecItemTracking."SN Neg. Adjmt. Inb. Tracking" OR
                lrecItemTracking."SN Transfer Tracking" OR
                lrecItemTracking."SN Warehouse Tracking";

          END;
        END;
      END;

      EXIT( pbNeedsSerial );
    END;

    PROCEDURE postPrintPurchaseOrder@1000000004(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecConfig@1000000002 : Record 23044504;
    BEGIN
      cuCommonFuncs.getDeviceConfig(lrecConfig,ptrecEventParams);
      postPurchaseOrder(ptrecEventParams, pbsOutput);
      cuPrintingMgmt.handlePrint( ptrecEventParams, pbsOutput);
    END;

    PROCEDURE postPrintTransferOrder@1000000009(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecConfig@1000000002 : Record 23044504;
    BEGIN
      cuCommonFuncs.getDeviceConfig(lrecConfig,ptrecEventParams);
      postTransferOrder(ptrecEventParams, pbsOutput);
      cuPrintingMgmt.handlePrint( ptrecEventParams, pbsOutput);
    END;

    PROCEDURE postPrintWhseReceipt@1000000012(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecConfig@1000000002 : Record 23044504;
    BEGIN
      cuCommonFuncs.getDeviceConfig(lrecConfig,ptrecEventParams);
      postWhseReceipt(ptrecEventParams, pbsOutput);
      cuPrintingMgmt.handlePrint( ptrecEventParams, pbsOutput);
    END;

    PROCEDURE createLotSerialInfo@1000000024(psItemNumber@1000000000 : Text;psVariantCode@1000000001 : Text;psLotNumber@1000000002 : Text;psSerialNumber@1000000003 : Text);
    VAR
      lrecItem@1000000004 : Record 27;
      lrecItemTrackingCode@1000000005 : Record 6502;
    BEGIN
      //<FUNC>
      //  Description: Creates a Lot/Serial information record if required.
      //  Called From:
      //  Side Effect: None
      //</FUNC>


      IF lrecItem.GET(psItemNumber) THEN BEGIN
        IF lrecItemTrackingCode.GET(lrecItem."Item Tracking Code") THEN BEGIN
          IF (lrecItemTrackingCode."Lot Info. Inbound Must Exist") AND (psLotNumber<>'') THEN BEGIN
            cuDataManager.createLotInfo(psItemNumber,psVariantCode,psLotNumber);
          END;

          IF (lrecItemTrackingCode."SN Info. Inbound Must Exist") AND (psSerialNumber<>'') THEN BEGIN
            cuDataManager.createSerialInfo(psItemNumber,psVariantCode,psSerialNumber);
          END;
        END;
      END;
    END;

    PROCEDURE assignWhseReceipt@1000000021(VAR precWhseRcptHeader@1000000000 : Record 7316;VAR ptrecEventParams@1000000002 : TEMPORARY Record 23044511);
    VAR
      lrecConfig@1000000003 : Record 23044504;
      lcodUserName@1000000001 : Code[50];
    BEGIN
      //<FUNC>
      //  Description: Assigns the user to the warehouse receipt header if required.
      //  Side Effect: None
      //</FUNC>

      lcodUserName := cuCommonFuncs.getUserNameWithDomain(ptrecEventParams);

      IF( lcodUserName <> '' ) THEN BEGIN
        cuCommonFuncs.getDeviceConfig(lrecConfig,ptrecEventParams);

        IF (lrecConfig."Assign Document" = lrecConfig."Assign Document"::Always) OR
          ((lrecConfig."Assign Document" = lrecConfig."Assign Document"::Unassigned) AND (precWhseRcptHeader."Assigned User ID"='')) THEN BEGIN
          precWhseRcptHeader."Assigned User ID" := lcodUserName;
          precWhseRcptHeader."Assignment Date" := TODAY;
          precWhseRcptHeader."Assignment Time" := TIME;
          precWhseRcptHeader.MODIFY;
        END;
      END;
    END;

    PROCEDURE assignTransferOrder@1000000023(VAR precTransferHeader@1000000001 : Record 5740;VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511);
    VAR
      lrecConfig@1000000003 : Record 23044504;
      lcodUserName@1000000002 : Code[50];
    BEGIN
      //<FUNC>
      //  Description: Assigns the user to the transfer header if required.
      //  Side Effect: None
      //</FUNC>

      lcodUserName := cuCommonFuncs.getUserNameWithDomain(ptrecEventParams);

      IF( lcodUserName <> '' ) THEN BEGIN
        cuCommonFuncs.getDeviceConfig(lrecConfig,ptrecEventParams);
        IF (lrecConfig."Assign Document" = lrecConfig."Assign Document"::Always) OR
          ((lrecConfig."Assign Document" = lrecConfig."Assign Document"::Unassigned) AND (precTransferHeader."Assigned User ID"='')) THEN BEGIN

          precTransferHeader."Assigned User ID" := lcodUserName;
          precTransferHeader.MODIFY;
        END;
      END;
    END;

    PROCEDURE assignPurchaseOrder@1000000025(VAR precPurchaseHeader@1000000001 : Record 38;VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511);
    VAR
      lrecConfig@1000000003 : Record 23044504;
      lcodUserName@1000000002 : Code[50];
    BEGIN
      //<FUNC>
      //  Description: Assigns the user to the purchase header if required.
      //  Side Effect: None
      //</FUNC>


      lcodUserName := cuCommonFuncs.getUserNameWithDomain(ptrecEventParams);

      IF( lcodUserName <> '' ) THEN BEGIN
        cuCommonFuncs.getDeviceConfig(lrecConfig,ptrecEventParams);
        IF (lrecConfig."Assign Document" = lrecConfig."Assign Document"::Always) OR
          ((lrecConfig."Assign Document" = lrecConfig."Assign Document"::Unassigned) AND (precPurchaseHeader."Assigned User ID"='')) THEN BEGIN

          precPurchaseHeader."Assigned User ID" := lcodUserName;
          precPurchaseHeader.MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE unlockLPOnTransferReceipt@1000000039(pcodLPNumber@1000000000 : Code[20];pcodTransferNumber@1000000001 : Code[20]);
    VAR
      lrecLPHeader@1000000002 : Record 23044505;
      lrecTransferHeader@1000000003 : Record 5740;
    BEGIN
      //<FUNC>
      //  Description: unlocks the License plate that has been assigned to a transfer order so that it can be
      //               received
      //  Called From: processTransferLPScan
      //  Side Effect: temporarily unlocks the License plate
      //</FUNC>

      IF lrecLPHeader.GET(pcodLPNumber) THEN BEGIN
        IF (lrecLPHeader."Shipped Source No." = pcodTransferNumber) AND
          (lrecLPHeader.Locked) THEN BEGIN
          lrecLPHeader.VALIDATE(Locked, FALSE);
          lrecLPHeader.MODIFY;
        END;
      END;
    END;

    PROCEDURE GetReceiptCrossRefLines@1000000026(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecWhseRcptLine@1000000002 : Record 7317;
      ltrecItemCrossRef@1000000006 : TEMPORARY Record 5717;
      lrrefLines@1000000003 : RecordRef;
      ldnOutput@1000000007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lcodReceiptNumber@1000000004 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Returns a list of possible whse. receipt lines that could be cross referenced.
      //               If quantity to receive has been set the item is not included (presumably it's been scanned already)
      //</FUNC>

      lcodReceiptNumber := ptrecEventParams.getDocumentNo();
      lrecWhseRcptLine.SETRANGE("No.",lcodReceiptNumber);
      lrecWhseRcptLine.SETRANGE("Qty. to Receive",0);

      IF NOT lrecWhseRcptLine.FINDSET THEN
        ERROR(cuTranslationMgmt.getTranslatedString('ERR_NO_CROSS_REF_LINES', codRegionCode));

      REPEAT
        ltrecItemCrossRef."Item No." := lrecWhseRcptLine."Item No.";
        ltrecItemCrossRef."Variant Code" := lrecWhseRcptLine."Variant Code";
        ltrecItemCrossRef."Unit of Measure" := lrecWhseRcptLine."Unit of Measure Code";
        IF ltrecItemCrossRef.INSERT THEN ;
      UNTIL(lrecWhseRcptLine.NEXT=0);

      ltrecItemCrossRef.RESET;
      IF ltrecItemCrossRef.FINDSET(FALSE) THEN ;


      lrrefLines.GETTABLE(ltrecItemCrossRef);

      // create the dataset
      ldnOutput := ldnOutput.StringBuilder();
      cuDataSetTools.BuildLinesOnlyDataset(iEventID,lrrefLines,FALSE,ldnOutput);

      // send the result back
      pbsOutput.ADDTEXT(ldnOutput.ToString());

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Warehouse Receipt Header"));
      ptrecEventParams.setValue('Document No.', lcodReceiptNumber);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE GetPurchaseCrossRefLines@1000000028(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecPurchaseLine@1000000002 : Record 39;
      ltrecItemCrossRef@1000000006 : TEMPORARY Record 5717;
      lrrefLines@1000000005 : RecordRef;
      ldnOutput@1000000007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lcodPurchaseNumber@1000000003 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Returns a list of possible purchase lines that could be cross referenced.
      //               If quantity to receive has been set the item is not included (presumably it's been scanned already)
      //</FUNC>

      lcodPurchaseNumber := ptrecEventParams.getDocumentNo();
      lrecPurchaseLine.SETRANGE("Document Type",lrecPurchaseLine."Document Type"::Order);
      lrecPurchaseLine.SETRANGE("Document No.",lcodPurchaseNumber);
      lrecPurchaseLine.SETRANGE(Type,lrecPurchaseLine.Type::Item);
      lrecPurchaseLine.SETRANGE("Qty. to Receive",0);

      IF NOT lrecPurchaseLine.FINDSET THEN
        ERROR(STRSUBSTNO(cuTranslationMgmt.getTranslatedString('ERR_UNKNOWN_BARCODE', codRegionCode), ptrecEventParams.getValue('barcode.OriginalBarcode')));

      REPEAT
        ltrecItemCrossRef."Item No." := lrecPurchaseLine."No.";
        ltrecItemCrossRef."Variant Code" := lrecPurchaseLine."Variant Code";
        ltrecItemCrossRef."Unit of Measure" := lrecPurchaseLine."Unit of Measure Code";
        IF ltrecItemCrossRef.INSERT THEN ;
      UNTIL(lrecPurchaseLine.NEXT=0);

      ltrecItemCrossRef.RESET;
      IF ltrecItemCrossRef.FINDSET(FALSE) THEN ;


      lrrefLines.GETTABLE(ltrecItemCrossRef);

      // create the dataset
      ldnOutput := ldnOutput.StringBuilder();
      cuDataSetTools.BuildLinesOnlyDataset(iEventID,lrrefLines,FALSE,ldnOutput);

      // send the result back
      pbsOutput.ADDTEXT(ldnOutput.ToString());

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Purchase Header"));
      ptrecEventParams.setValue('Document No.', lcodPurchaseNumber);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE GetTransferCrossRefLines@1000000032(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecTransferLine@1000000006 : Record 5741;
      ltrecItemCrossRef@1000000005 : TEMPORARY Record 5717;
      lrrefLines@1000000004 : RecordRef;
      ldnOutput@1000000007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lcodTransferNumber@1000000002 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Returns a list of possible transfer lines that could be cross referenced.
      //               If quantity to receive has been set the item is not included (presumably it's been scanned already)
      //</FUNC>

      lcodTransferNumber := ptrecEventParams.getDocumentNo();
      lrecTransferLine.SETRANGE("Document No.",lcodTransferNumber);
      lrecTransferLine.SETRANGE("Qty. to Receive",0);

      IF NOT lrecTransferLine.FINDSET THEN
        ERROR(STRSUBSTNO(cuTranslationMgmt.getTranslatedString('ERR_UNKNOWN_BARCODE', codRegionCode), ptrecEventParams.getValue('barcode.OriginalBarcode')));

      REPEAT
        ltrecItemCrossRef."Item No." := lrecTransferLine."Item No.";
        ltrecItemCrossRef."Variant Code" := lrecTransferLine."Variant Code";
        ltrecItemCrossRef."Unit of Measure" := lrecTransferLine."Unit of Measure Code";
        IF ltrecItemCrossRef.INSERT THEN ;
      UNTIL(lrecTransferLine.NEXT=0);

      ltrecItemCrossRef.RESET;
      IF ltrecItemCrossRef.FINDSET(FALSE) THEN ;


      lrrefLines.GETTABLE(ltrecItemCrossRef);

      // create the dataset
      ldnOutput := ldnOutput.StringBuilder();
      cuDataSetTools.BuildLinesOnlyDataset(iEventID,lrrefLines,FALSE,ldnOutput);

      // send the result back
      pbsOutput.ADDTEXT(ldnOutput.ToString());

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Transfer Header"));
      ptrecEventParams.setValue('Document No.', lcodTransferNumber);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE AutoCreateWhseReceipt@1000000033(psPurchaseOrderNo@1000000000 : Text;psTransferOrderNo@1000000001 : Text;psSalesOrderNo@1000000002 : Text) : Text;
    VAR
      lsReceiptNumber@1000000003 : Text;
    BEGIN
      //<FUNC>
      //  Wrapper for generating a warehouse receipt.
      //</FUNC>

      IF( psPurchaseOrderNo <> '' ) THEN
        lsReceiptNumber := GetReceiptFromPurchaseOrder(psPurchaseOrderNo)
      ELSE IF( psTransferOrderNo <> '' ) THEN
        lsReceiptNumber := GetReceiptFromTransferOrder(psTransferOrderNo)
      ELSE IF( psSalesOrderNo <> '' ) THEN
        lsReceiptNumber := GetReceiptFromSalesOrder(psSalesOrderNo);

      EXIT(lsReceiptNumber);
    END;

    PROCEDURE GetReceiptFromPurchaseOrder@1000000006(pcodPurchaseOrderNumber@1000000000 : Code[20]) : Text;
    VAR
      lrecPurchaseHeader@1000000001 : Record 38;
      lrecWhseRequest@1000000002 : Record 5765;
      lrecWhseRcptHeader@1000000004 : Record 7316;
      lrecPurchLine@1000000009 : Record 39;
      lrecWhseRcptLine@1000000006 : Record 7317;
      lrptGetSourceDocuments@1000000003 : Report 5753;
      lsReceiptDocNumber@1000000005 : Text;
      lbCanCreateReceipt@1000000007 : Boolean;
    BEGIN
      //<FUNC>
      // Will generate a warehouse receipt based on the purchase order number supplied.
      // If a receipt has already been created that receipt number will be returned instead.
      //</FUNC>

      lsReceiptDocNumber := '';

      IF( lrecPurchaseHeader.GET(lrecPurchaseHeader."Document Type"::Order,pcodPurchaseOrderNumber) ) THEN BEGIN
        IF( lrecPurchaseHeader.Status = lrecPurchaseHeader.Status::Released ) THEN BEGIN
          lrecPurchLine.SETRANGE("Document Type",lrecPurchaseHeader."Document Type");
          lrecPurchLine.SETRANGE("Document No.",lrecPurchaseHeader."No.");
          lrecPurchLine.SETRANGE("Completely Received",FALSE);
          lrecPurchLine.SETRANGE(Type,lrecPurchLine.Type::Item);
          IF(lrecPurchLine.FINDSET(FALSE)) THEN BEGIN
            REPEAT
              lbCanCreateReceipt := canCreateReceipt(
                  DATABASE::"Purchase Line",
                  lrecPurchLine."Document Type",
                  lrecPurchLine."Document No.",
                  lrecPurchLine."Line No.",
                  lrecPurchLine."Quantity (Base)" - lrecPurchLine."Qty. Received (Base)");
            UNTIL( (lrecPurchLine.NEXT=0) OR lbCanCreateReceipt);
          END;

          IF( lbCanCreateReceipt ) THEN BEGIN
            lrecWhseRequest.SETRANGE(Type,lrecWhseRequest.Type::Inbound);
            lrecWhseRequest.SETRANGE("Source Type",DATABASE::"Purchase Line");
            lrecWhseRequest.SETRANGE("Source Subtype",lrecPurchaseHeader."Document Type");
            lrecWhseRequest.SETRANGE("Source No.",lrecPurchaseHeader."No.");
            lrecWhseRequest.SETRANGE("Document Status",lrecWhseRequest."Document Status"::Released);

            IF lrecWhseRequest.FIND('-') THEN BEGIN
              lrptGetSourceDocuments.USEREQUESTPAGE(FALSE);
              lrptGetSourceDocuments.SETTABLEVIEW(lrecWhseRequest);
              lrptGetSourceDocuments.SetDoNotFillQtytoHandle(TRUE);
              lrptGetSourceDocuments.RUNMODAL;
              lrptGetSourceDocuments.GetLastReceiptHeader(lrecWhseRcptHeader);

              lsReceiptDocNumber := lrecWhseRcptHeader."No.";
            END;
          END ELSE BEGIN
            lrecWhseRcptLine.SETRANGE("Source No.", pcodPurchaseOrderNumber);
            lrecWhseRcptLine.SETRANGE("Source Type", DATABASE::"Purchase Line");

            IF( lrecWhseRcptLine.FINDFIRST ) THEN BEGIN
              lsReceiptDocNumber := lrecWhseRcptLine."No.";
            END;
          END;
        END;
      END;

      EXIT( lsReceiptDocNumber );
    END;

    PROCEDURE GetReceiptFromSalesOrder@1000000018(pcodSalesOrderNumber@1000000000 : Code[20]) : Text;
    VAR
      lrecWhseRequest@1000000004 : Record 5765;
      lrecWhseRcptHeader@1000000003 : Record 7316;
      lrecSalesHeader@1000000005 : Record 36;
      lrecWhseRcptLine@1000000006 : Record 7317;
      lrptGetSourceDocuments@1000000002 : Report 5753;
      lsReceiptDocNumber@1000000001 : Text;
    BEGIN
      //<FUNC>
      // Will generate a warehouse receipt based on the sales order number supplied.
      // If a receipt has already been created that receipt number will be returned instead.
      //</FUNC>

      lsReceiptDocNumber := '';

      IF( lrecSalesHeader.GET(lrecSalesHeader."Document Type"::"Return Order",pcodSalesOrderNumber) ) THEN BEGIN
        IF( lrecSalesHeader.Status = lrecSalesHeader.Status::Released ) THEN BEGIN

          // not checking location as it's likely to be returned to a different location
          // first check to see if there is a receipt line for it
          lrecWhseRcptLine.SETRANGE("Source No.", pcodSalesOrderNumber);
          lrecWhseRcptLine.SETRANGE("Source Type", DATABASE::"Sales Line");
          IF( lrecWhseRcptLine.FIND('-') ) THEN BEGIN
            lsReceiptDocNumber := lrecWhseRcptLine."No.";
          END
          ELSE BEGIN
            lrecWhseRequest.SETRANGE(Type,lrecWhseRequest.Type::Inbound);
            lrecWhseRequest.SETRANGE("Source Type",DATABASE::"Sales Line");
            lrecWhseRequest.SETRANGE("Source Document",lrecWhseRequest."Source Document"::"Sales Return Order");
            lrecWhseRequest.SETRANGE("Source No.",lrecSalesHeader."No.");
            lrecWhseRequest.SETRANGE("Document Status",lrecWhseRequest."Document Status"::Released);

            IF lrecWhseRequest.FIND('-') THEN BEGIN
              lrptGetSourceDocuments.USEREQUESTPAGE(FALSE);
              lrptGetSourceDocuments.SETTABLEVIEW(lrecWhseRequest);
              lrptGetSourceDocuments.SetDoNotFillQtytoHandle(TRUE);
              lrptGetSourceDocuments.RUNMODAL;
              lrptGetSourceDocuments.GetLastReceiptHeader(lrecWhseRcptHeader);
              lsReceiptDocNumber := lrecWhseRcptHeader."No.";
            END;
          END;
        END;
      END;

      EXIT( lsReceiptDocNumber );
    END;

    PROCEDURE GetReceiptFromTransferOrder@1000000022(pcodTransferOrderNumber@1000000000 : Code[20]) : Text;
    VAR
      lrecWhseRequest@1000000004 : Record 5765;
      lrecWhseRcptHeader@1000000003 : Record 7316;
      lrecTransferHeader@1000000005 : Record 5740;
      lrecWhseRcptLine@1000000006 : Record 7317;
      lrptGetSourceDocuments@1000000002 : Report 5753;
      lsReceiptDocNumber@1000000001 : Text;
    BEGIN
      //<FUNC>
      // Will generate a warehouse receipt based on the transfer order number supplied.
      // If a receipt has already been created that receipt number will be returned instead.
      //</FUNC>

      lsReceiptDocNumber := '';

      IF( lrecTransferHeader.GET(pcodTransferOrderNumber) ) THEN BEGIN
        IF( lrecTransferHeader.Status = lrecTransferHeader.Status::Released ) THEN BEGIN
          // first check to see if there is a receipt line for it
          lrecWhseRcptLine.SETRANGE("Source No.", pcodTransferOrderNumber);
          lrecWhseRcptLine.SETRANGE("Source Type", DATABASE::"Transfer Line");
          IF( lrecWhseRcptLine.FIND('-') ) THEN BEGIN
            lsReceiptDocNumber := lrecWhseRcptLine."No.";
          END
          ELSE BEGIN
            lrecWhseRequest.SETRANGE(Type,lrecWhseRequest.Type::Inbound);
            lrecWhseRequest.SETRANGE("Source Type",DATABASE::"Transfer Line");
            lrecWhseRequest.SETRANGE("Source Subtype",1);
            lrecWhseRequest.SETRANGE("Source No.",lrecTransferHeader."No.");
            lrecWhseRequest.SETRANGE("Document Status",lrecWhseRequest."Document Status"::Released);

            IF lrecWhseRequest.FIND('-') THEN BEGIN
              lrptGetSourceDocuments.USEREQUESTPAGE(FALSE);
              lrptGetSourceDocuments.SETTABLEVIEW(lrecWhseRequest);
              lrptGetSourceDocuments.SetDoNotFillQtytoHandle(TRUE);
              lrptGetSourceDocuments.RUNMODAL;
              lrptGetSourceDocuments.GetLastReceiptHeader(lrecWhseRcptHeader);
              lsReceiptDocNumber := lrecWhseRcptHeader."No.";
            END;
          END;
        END;
      END;

      EXIT( lsReceiptDocNumber );
    END;

    PROCEDURE UpdateWhseReceiptBin@1000000048(VAR precWhseReceiptLine@1000000000 : Record 7317;psBinCode@1000000001 : Text);
    BEGIN
      //<FUNC>
      //  Updates the warehouse receipt line bin code
      //</FUNC>

      IF psBinCode = '' THEN
        EXIT;

      psBinCode := UPPERCASE(psBinCode);

      IF precWhseReceiptLine."Bin Code" = psBinCode THEN
        EXIT;

      precWhseReceiptLine."Zone Code" := '';
      precWhseReceiptLine.VALIDATE("Bin Code", psBinCode);
      precWhseReceiptLine.MODIFY(TRUE);
    END;

    PROCEDURE AddWhseReceiptLineToLP@1000000053(precWhseRcptLine@1000000001 : Record 7317;pcodLicensePlateNo@1000000006 : Code[20];pdChangeQty@1000000002 : Decimal;psSerialNumber@1000000003 : Text;psLotNumber@1000000004 : Text;pdtExpirationDate@1000000005 : Date);
    VAR
      lrecLPHeader@1000000000 : Record 23044505;
      lcuLPCommon@1000000007 : Codeunit 23044541;
    BEGIN
      //<FUNC>
      //  Wrapper function for creating an LP line for a warehouse receipt line
      //</FUNC>

      lcuLPCommon.addRemoveLicensePlateLine(lrecLPHeader."Source Document Type"::Receipt,
                                           precWhseRcptLine."No.",
                                           precWhseRcptLine."Line No.",
                                           pcodLicensePlateNo,
                                           precWhseRcptLine."Item No.",
                                           precWhseRcptLine."Variant Code",
                                           psLotNumber,
                                           psSerialNumber,
                                           pdChangeQty,
                                           precWhseRcptLine."Unit of Measure Code",
                                           pdtExpirationDate,
                                           precWhseRcptLine."Bin Code"
                                           );
    END;

    PROCEDURE PrintWhseReceiptItemLabel@1000000057(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511;precWhseRcptLine@1000000001 : Record 7317;pdChangeQty@1000000002 : Decimal;psSerialNumber@1000000003 : Text;psLotNumber@1000000004 : Text;pdtExpirationDate@1000000005 : Date;piNumLabels@1000000006 : Integer);
    VAR
      lcuPrintingMgmt@1000000007 : Codeunit 23044525;
      lbsOutputTemp@1000000008 : BigText;
    BEGIN
      //<FUNC>
      //  Wrapper function for printing a warehouse receipt item label
      //</FUNC>
      IF piNumLabels<1 THEN
        EXIT;

      ptrecEventParams.setValue('qty_changed',FORMAT(pdChangeQty));
      ptrecEventParams.setValue('label_include_qty',FORMAT(TRUE));
      ptrecEventParams.setValue('label_quantity', FORMAT(pdChangeQty));
      ptrecEventParams.setValue('label_uom', precWhseRcptLine."Unit of Measure Code");
      ptrecEventParams.setValue('label_numcopies',FORMAT(piNumLabels));
      ptrecEventParams.setValue('label_variant_code',precWhseRcptLine."Variant Code");
      ptrecEventParams.setValue('label_item_number',precWhseRcptLine."Item No.");
      ptrecEventParams.setValue('label_ledger_entry_number',FORMAT(0));
      ptrecEventParams.setValue('label_tracking_number', psLotNumber+psSerialNumber);
      ptrecEventParams.setValue('label_expiry_date', FORMAT(pdtExpirationDate));
      lcuPrintingMgmt.handlePrint( ptrecEventParams, lbsOutputTemp);
    END;

    PROCEDURE PrintPurchaseOrderItemLabel@100000001(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511;precPurchaseLine@1000000001 : Record 39;pdChangeQty@1000000002 : Decimal;psSerialNumber@1000000003 : Text;psLotNumber@1000000004 : Text;pdtExpirationDate@1000000005 : Date;piNumLabels@1000000006 : Integer);
    VAR
      lcuPrintingMgmt@1000000007 : Codeunit 23044525;
      lbsOutputTemp@1000000008 : BigText;
    BEGIN
      //<FUNC>
      //  Wrapper function for printing a purchase order item label
      //</FUNC>
      IF piNumLabels<1 THEN
        EXIT;

      ptrecEventParams.setValue('qty_changed',FORMAT(pdChangeQty));
      ptrecEventParams.setValue('label_include_qty',FORMAT(TRUE));
      ptrecEventParams.setValue('label_quantity', FORMAT(pdChangeQty));
      ptrecEventParams.setValue('label_uom', precPurchaseLine."Unit of Measure Code");
      ptrecEventParams.setValue('label_numcopies',FORMAT(piNumLabels));
      ptrecEventParams.setValue('label_variant_code',precPurchaseLine."Variant Code");
      ptrecEventParams.setValue('label_item_number',precPurchaseLine."No.");
      ptrecEventParams.setValue('label_ledger_entry_number',FORMAT(0));
      ptrecEventParams.setValue('label_tracking_number', psLotNumber+psSerialNumber);
      ptrecEventParams.setValue('label_expiry_date', FORMAT(pdtExpirationDate));
      lcuPrintingMgmt.handlePrint( ptrecEventParams, lbsOutputTemp);
    END;

    PROCEDURE PrintTransferOrderItemLabel@100000002(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511;precTransferLine@1000000001 : Record 5741;pdChangeQty@1000000002 : Decimal;psSerialNumber@1000000003 : Text;psLotNumber@1000000004 : Text;pdtExpirationDate@1000000005 : Date;piNumLabels@1000000006 : Integer);
    VAR
      lcuPrintingMgmt@1000000007 : Codeunit 23044525;
      lbsOutputTemp@1000000008 : BigText;
    BEGIN
      //<FUNC>
      //  Wrapper function for printing a transfer order item label
      //</FUNC>
      IF piNumLabels<1 THEN
        EXIT;

      ptrecEventParams.setValue('qty_changed',FORMAT(pdChangeQty));
      ptrecEventParams.setValue('label_include_qty',FORMAT(TRUE));
      ptrecEventParams.setValue('label_quantity', FORMAT(pdChangeQty));
      ptrecEventParams.setValue('label_uom', precTransferLine."Unit of Measure Code");
      ptrecEventParams.setValue('label_numcopies',FORMAT(piNumLabels));
      ptrecEventParams.setValue('label_variant_code',precTransferLine."Variant Code");
      ptrecEventParams.setValue('label_item_number',precTransferLine."Item No.");
      ptrecEventParams.setValue('label_ledger_entry_number',FORMAT(0));
      ptrecEventParams.setValue('label_tracking_number', psLotNumber+psSerialNumber);
      ptrecEventParams.setValue('label_expiry_date', FORMAT(pdtExpirationDate));
      lcuPrintingMgmt.handlePrint( ptrecEventParams, lbsOutputTemp);
    END;

    LOCAL PROCEDURE ChangePurchaseOrderBin@100000000(VAR ptrecEventParams@100000001 : TEMPORARY Record 23044511;VAR pbsOutput@100000000 : BigText);
    VAR
      lrecPurchaseLine@100000002 : Record 39;
      lrrefLine@100000003 : RecordRef;
      ldnOutput@100000008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lcodPurchaseOrderNumber@100000004 : Code[20];
      lcodNewBinCode@100000005 : Code[20];
      lcodPrevBinCode@100000006 : Code[20];
      liLineNumber@100000007 : Integer;
    BEGIN
      lcodPurchaseOrderNumber := COPYSTR(ptrecEventParams.getDocumentNo(), 1, MAXSTRLEN(lcodPurchaseOrderNumber));
      liLineNumber := ptrecEventParams.getLineNo();
      lcodNewBinCode := COPYSTR(ptrecEventParams.getValue('action_result'), 1, MAXSTRLEN(lcodNewBinCode));

      lrecPurchaseLine.GET(lrecPurchaseLine."Document Type"::Order, lcodPurchaseOrderNumber, liLineNumber);
      lcodPrevBinCode := lrecPurchaseLine."Bin Code";

      lrecPurchaseLine.VALIDATE("Bin Code", lcodNewBinCode);
      lrecPurchaseLine.MODIFY(TRUE);

      lrecPurchaseLine.SETRECFILTER();
      lrrefLine.GETTABLE( lrecPurchaseLine );

      cuDataSetTools.SetCalculateFields(50005,
                                        lrrefLine,
                                        lrecPurchaseLine.FIELDNO("Outstanding Quantity"),
                                        lrecPurchaseLine.FIELDNO(Quantity),
                                        lrecPurchaseLine.FIELDNO("Qty. to Receive"),
                                        lrecPurchaseLine.FIELDNO("Quantity Received")
                                        );

      cuDataSetTools.SetPositiveFlag(TRUE);

      ldnOutput := ldnOutput.StringBuilder();
      cuDataSetTools.BuildLineTableEmbedRes(50005, lrrefLine, TRUE, ldnOutput);
      pbsOutput.ADDTEXT( ldnOutput.ToString() );


      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Purchase Line"));
      ptrecEventParams.setValue('Document No.', lcodPurchaseOrderNumber);
      ptrecEventParams.setValue('Pervious Bin', lcodPrevBinCode);
      ptrecEventParams.setValue('New Bin', lcodNewBinCode);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    LOCAL PROCEDURE ChangeTransferOrderBin@1000000002(VAR ptrecEventParams@1000000010 : TEMPORARY Record 23044511;VAR pbsOutput@1000000009 : BigText);
    VAR
      lrecTransferLine@100000006 : Record 5741;
      lrrefLine@100000005 : RecordRef;
      ldnOutput@100000004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lcodTransferOrderNumber@100000003 : Code[20];
      lcodNewBinCode@100000002 : Code[20];
      lcodPrevBinCode@100000001 : Code[20];
      liLineNumber@100000000 : Integer;
    BEGIN
      lcodTransferOrderNumber := COPYSTR(ptrecEventParams.getDocumentNo(), 1, MAXSTRLEN(lcodTransferOrderNumber));
      liLineNumber := ptrecEventParams.getLineNo();
      lcodNewBinCode := COPYSTR(ptrecEventParams.getValue('action_result'), 1, MAXSTRLEN(lcodNewBinCode));

      lrecTransferLine.GET(lcodTransferOrderNumber, liLineNumber);
      lcodPrevBinCode := lrecTransferLine."Transfer-To Bin Code";

      lrecTransferLine.VALIDATE("Transfer-To Bin Code", lcodNewBinCode);
      lrecTransferLine.MODIFY(TRUE);

      lrecTransferLine.SETRECFILTER();
      lrrefLine.GETTABLE( lrecTransferLine );

      cuDataSetTools.SetFormulaCalcEachRow(
        50013,
        lrrefLine,
          -1, //
        DATABASE::Item, // piLookupTable
        6500, // piLookupField
        'WHERE (No.=FILTER(''[Item No.]''))' ); //

      cuDataSetTools.SetCalculateFields(50013,
                                        lrrefLine,
                                        lrecTransferLine.FIELDNO("Outstanding Quantity"),
                                        lrecTransferLine.FIELDNO(Quantity),
                                        lrecTransferLine.FIELDNO("Qty. to Receive"),
                                        lrecTransferLine.FIELDNO("Quantity Received")
                                        );

      ldnOutput := ldnOutput.StringBuilder();
      cuDataSetTools.SetPositiveFlag(TRUE);
      cuDataSetTools.BuildLineTableWithLocation(50013, lrrefLine, TRUE, ldnOutput, lrecTransferLine."Transfer-to Code");
      pbsOutput.ADDTEXT( ldnOutput.ToString() );



      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Transfer Line"));
      ptrecEventParams.setValue('Document No.', lcodTransferOrderNumber);
      ptrecEventParams.setValue('Pervious Bin', lcodPrevBinCode);
      ptrecEventParams.setValue('New Bin', lcodNewBinCode);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE ChangeWhseReceiptBin@100000003(VAR ptrecEventParams@100000008 : TEMPORARY Record 23044511;VAR pbsOutput@100000007 : BigText);
    VAR
      lrecWhseReceiptLine@100000006 : Record 7317;
      lrrefLine@100000005 : RecordRef;
      ldnOutput@100000004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lcodWhseReceiptNumber@100000003 : Code[20];
      lcodNewBinCode@100000002 : Code[20];
      lcodPrevBinCode@100000001 : Code[20];
      liLineNumber@100000000 : Integer;
    BEGIN
      lcodWhseReceiptNumber := COPYSTR(ptrecEventParams.getDocumentNo(), 1, MAXSTRLEN(lcodWhseReceiptNumber));
      liLineNumber := ptrecEventParams.getLineNo();
      lcodNewBinCode := COPYSTR(ptrecEventParams.getValue('action_result'), 1, MAXSTRLEN(lcodNewBinCode));

      lrecWhseReceiptLine.GET(lcodWhseReceiptNumber, liLineNumber);
      lcodPrevBinCode := lrecWhseReceiptLine."Bin Code";

      lrecWhseReceiptLine.VALIDATE("Bin Code", lcodNewBinCode);
      lrecWhseReceiptLine.MODIFY(TRUE);

      lrecWhseReceiptLine.SETRECFILTER();
      lrrefLine.GETTABLE( lrecWhseReceiptLine );

      cuDataSetTools.SetCalculateFields(50001,
                                        lrrefLine,
                                        lrecWhseReceiptLine.FIELDNO("Qty. Outstanding"),
                                        lrecWhseReceiptLine.FIELDNO(Quantity),
                                        lrecWhseReceiptLine.FIELDNO("Qty. to Receive"),
                                        lrecWhseReceiptLine.FIELDNO("Qty. Received")
                                        );


      cuDataSetTools.SetPositiveFlag(TRUE);

      ldnOutput := ldnOutput.StringBuilder();
      cuDataSetTools.BuildLineTableEmbedRes(50001, lrrefLine, TRUE, ldnOutput);
      pbsOutput.ADDTEXT( ldnOutput.ToString() );


      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Warehouse Receipt Line"));
      ptrecEventParams.setValue('Document No.', lcodWhseReceiptNumber);
      ptrecEventParams.setValue('Pervious Bin', lcodPrevBinCode);
      ptrecEventParams.setValue('New Bin', lcodNewBinCode);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    LOCAL PROCEDURE NumberOfLine@1000000040(NoPara@1000000000 : Code[20]) : Integer;
    VAR
      TransferLineLoc@1000000001 : Record 5741;
    BEGIN
      //PKS
      TransferLineLoc.SETRANGE("Document No.",NoPara);
      TransferLineLoc.SETFILTER("Item No.",'<>%1','');
      IF TransferLineLoc.FINDFIRST THEN
        EXIT(TransferLineLoc.COUNT);
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
    }
    END.
  }
}

