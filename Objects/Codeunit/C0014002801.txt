OBJECT Codeunit 14002801 RF Management
{
  OBJECT-PROPERTIES
  {
    Date=11/04/20;
    Time=[ 6:13:15 AM];
    Modified=Yes;
    Version List=RF1.50.14;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text003@1002 : TextConst 'ENU=Custom Code missing.';
      Text004@1240030000 : TextConst 'ENU=Too many decimals';
      Text005@1240020010 : TextConst 'ENU=Partly Counted';
      Text006@1240020009 : TextConst 'ENU=Fully Counted';
      Text007@1240020008 : TextConst 'ENU=Nothing Counted';
      Text008@1240020000 : TextConst 'ENU=Invalid Item No.';
      Text009@1240020001 : TextConst 'ENU=Invalid Quantity.';
      Text014@1240020015 : TextConst 'ENU=Invalid %1';
      Text015@1240020002 : TextConst 'ENU=Location not enabled to use license plating.';

    [External]
    PROCEDURE GetItem@100(InputValue@1000 : Text[250];RFEmployeeSetup@1001 : Record 14002802;VAR ItemNo@1002 : Code[20];VAR VariantCode@1003 : Code[20];VAR UnitOfMeasureCode@1004 : Code[20];VAR LotNo@1240040000 : Code[20];VAR SerialNo@1240040001 : Code[20]) : Boolean;
    VAR
      Item@1005 : Record 27;
      ItemCrossRef@1006 : Record 5717;
      ItemIdentifier@1007 : Record 7704;
      PalletBin@1240040002 : Record 14002877;
      i@1008 : Integer;
    BEGIN
      IF RFEmployeeSetup."Item No. Includes Ser. No." THEN
        InputValue := SplitInputIncludeSerNo(InputValue,RFEmployeeSetup,0,LotNo,SerialNo);

      FOR i := 1 TO 10 DO
        CASE TRUE OF
          i = RFEmployeeSetup."Item Priority":
            IF STRLEN(InputValue) <= MAXSTRLEN(Item."No.") THEN
              IF Item.GET(UPPERCASE(InputValue)) THEN BEGIN
                ItemNo := Item."No.";
                VariantCode := '';
                UnitOfMeasureCode := '';

                EXIT(TRUE);
              END;
          i = RFEmployeeSetup."Item Cross Reference Priority":
            IF STRLEN(InputValue) <= MAXSTRLEN(ItemCrossRef."Cross-Reference No.") THEN BEGIN
              ItemCrossRef.RESET;
              ItemCrossRef.SETCURRENTKEY("Cross-Reference Type","Cross-Reference No.");
              ItemCrossRef.SETRANGE(
                "Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::"Bar Code");
              ItemCrossRef.SETRANGE("Cross-Reference No.",UPPERCASE(InputValue));
              IF ItemCrossRef.FIND('-') THEN BEGIN
                ItemNo := ItemCrossRef."Item No.";
                VariantCode := ItemCrossRef."Variant Code";
                UnitOfMeasureCode := ItemCrossRef."Unit of Measure";

                EXIT(TRUE);
              END;
            END;
          i = RFEmployeeSetup."Item Identifier Priority":
            IF STRLEN(InputValue) <= MAXSTRLEN(ItemIdentifier.Code) THEN
              IF ItemIdentifier.GET(UPPERCASE(InputValue)) THEN BEGIN
                ItemNo := ItemIdentifier."Item No.";
                VariantCode := ItemIdentifier."Variant Code";
                UnitOfMeasureCode := ItemIdentifier."Unit of Measure Code";

                EXIT(TRUE);
              END;
          i = RFEmployeeSetup."Item Pallet No. Priority":
            IF STRLEN(InputValue) <= MAXSTRLEN(PalletBin."No.") THEN BEGIN
              PalletBin.RESET;
              PalletBin.SETCURRENTKEY("No.");
              PalletBin.SETRANGE("No.",InputValue);
              IF PalletBin.FIND('-') THEN
                IF PalletBin."Item No." <> '' THEN BEGIN
                  ItemNo := PalletBin."Item No.";
                  VariantCode := PalletBin."Variant Code";
                  UnitOfMeasureCode := PalletBin."Unit of Measure Code";
                  LotNo := PalletBin."Lot No.";
                  SerialNo := PalletBin."Serial No.";
                  EXIT(TRUE);
                END;
            END;
          i = RFEmployeeSetup."Item Custom Priority":
            BEGIN
              ERROR(Text003);
            END;
        END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE GetVariant@1240030003(InputValue@1240030001 : Text[250];RFEmployeeSetup@1240030000 : Record 14002802;ItemNo@1240030002 : Code[20];VAR VariantCode@1240030005 : Code[20]) : Boolean;
    VAR
      ItemVariant@1240030004 : Record 5401;
    BEGIN
      IF STRLEN(InputValue) > MAXSTRLEN(ItemVariant.Code) THEN
        EXIT(FALSE);

      IF InputValue <> '' THEN BEGIN
        ItemVariant.RESET;
        ItemVariant.SETRANGE("Item No.",ItemNo);
        ItemVariant.SETRANGE(Code,InputValue);
        IF NOT ItemVariant.FIND('-') THEN
          EXIT(FALSE);

        VariantCode := ItemVariant.Code;
        EXIT(TRUE);

      END ELSE
        EXIT(TRUE);
    END;

    [External]
    PROCEDURE GetUnitOfMeasure@1240030004(InputValue@1240030004 : Text[250];RFEmployeeSetup@1240030003 : Record 14002802;ItemNo@1240030002 : Code[20];VAR UnitOfMeasureCode@1240030000 : Code[20]) : Boolean;
    VAR
      ItemUnitofMeasure@1240030001 : Record 5404;
    BEGIN
      IF STRLEN(InputValue) > MAXSTRLEN(ItemUnitofMeasure.Code) THEN
        EXIT(FALSE);

      ItemUnitofMeasure.RESET;
      ItemUnitofMeasure.SETRANGE("Item No.",ItemNo);
      ItemUnitofMeasure.SETRANGE(Code,InputValue);
      IF NOT ItemUnitofMeasure.FIND('-') THEN
        EXIT(FALSE);

      UnitOfMeasureCode := ItemUnitofMeasure.Code;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE UpdateMiniformStructure@1240030000(VAR MiniformStructureEntry@1240030005 : Record 14002807);
    VAR
      MiniformHeader@1240030000 : Record 7700;
      MiniformHeader2@1240030003 : Record 7700;
      MiniformHeaderUsedTmp@1240030004 : TEMPORARY Record 7700;
      MiniformLine@1240030001 : Record 7701;
    BEGIN
      MiniformStructureEntry.RESET;
      MiniformStructureEntry.DELETEALL;

      MiniformHeaderUsedTmp.RESET;
      MiniformHeaderUsedTmp.DELETEALL;

      MiniformHeader.RESET;
      MiniformHeader.SETRANGE("Start Miniform",TRUE);
      IF MiniformHeader.FIND('-') THEN
        CalcStructureRecursive(
          MiniformHeader,MiniformHeaderUsedTmp,MiniformStructureEntry,'',
          MiniformStructureEntry."Link Type"::" ",0,FALSE);

      MiniformHeader.RESET;
      IF MiniformHeader.FIND('-') THEN
        REPEAT
          IF NOT MiniformHeaderUsedTmp.GET(MiniformHeader.Code) THEN BEGIN
            MiniformHeader2.RESET;
            MiniformHeader2.SETRANGE("Next Miniform",MiniformHeader.Code);
            IF NOT MiniformHeader2.FIND('-') THEN BEGIN
              MiniformHeader2.RESET;
              MiniformHeader2.SETRANGE("Local Menu Miniform Code",MiniformHeader.Code);
              IF NOT MiniformHeader2.FIND('-') THEN BEGIN
                MiniformLine.RESET;
                MiniformLine.SETRANGE("Call Miniform",MiniformHeader.Code);
                IF NOT MiniformLine.FIND('-') THEN
                  CalcStructureRecursive(
                    MiniformHeader,MiniformHeaderUsedTmp,MiniformStructureEntry,'',
                    MiniformStructureEntry."Link Type"::" ",0,TRUE);
              END;
            END;
          END;
        UNTIL MiniformHeader.NEXT = 0;
    END;

    [External]
    PROCEDURE GetBin@1240030002(InputValue@1240030002 : Text[250];RFEmployeeSetup@1240030001 : Record 14002802;LocationCode@1240040002 : Code[20];Take@1240040000 : Boolean;VAR BinCode@1240030000 : Code[20]) : Boolean;
    VAR
      Bin@1240030003 : Record 7354;
      PalletBin@1240040001 : Record 14002877;
      RFLocationSetup@1240020000 : Record 14099031;
      PalletBinContent@1240020001 : Record 14002963;
      i@1240030005 : Integer;
    BEGIN
      FOR i := 1 TO 10 DO
        CASE TRUE OF
          i = RFEmployeeSetup."Bin Priority":
            IF STRLEN(InputValue) <= MAXSTRLEN(Bin.Code) THEN BEGIN
              Bin.RESET;
              Bin.SETRANGE("Location Code",LocationCode);
              Bin.SETRANGE(Code,COPYSTR(InputValue,1,MAXSTRLEN(Bin.Code)));
              IF Bin.FIND('-') THEN BEGIN
                BinCode := Bin.Code;
                EXIT(TRUE);
              END;
            END;
          (i = RFEmployeeSetup."Pallet Bin in Take Priority") AND Take:
            BEGIN
              RFLocationSetup.GET(LocationCode);
              IF RFLocationSetup."Use License Plating" THEN BEGIN
                PalletBinContent.SETRANGE(Location,LocationCode);
                PalletBinContent.SETRANGE("Pallet No.",
                  COPYSTR(InputValue,1,MAXSTRLEN(PalletBinContent."Pallet No.")));
                IF PalletBinContent.FINDFIRST THEN BEGIN
                  BinCode := PalletBinContent.Bin;
                  EXIT(TRUE);
                END;
              END;

              IF STRLEN(InputValue) <= MAXSTRLEN(PalletBin."No.") THEN BEGIN
                PalletBin.RESET;
                PalletBin.SETCURRENTKEY("No.");
                PalletBin.SETRANGE("No.",COPYSTR(InputValue,1,MAXSTRLEN(PalletBin."No.")));
                IF PalletBin.FIND('-') THEN BEGIN
                  BinCode := PalletBin."Bin Code";
                  EXIT(TRUE);
                END;
              END;
            END;
          i = RFEmployeeSetup."Bin Custom Priority":
            BEGIN
              ERROR(Text003);
            END;
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CalcStructureRecursive@1240030001(MiniformHeader@1240030005 : Record 7700;VAR MiniformHeaderUsedTmp@1240030004 : TEMPORARY Record 7700;VAR MiniformStructureEntry@1240030001 : Record 14002807;PreviousForms@1240030007 : Text[250];Level@1240030000 : Integer;LinkType@1240030003 : Integer;ExtraForms@1240030008 : Boolean);
    VAR
      MiniformHeader2@1240030006 : Record 7700;
      MiniformLine@1240030002 : Record 7701;
    BEGIN
      MiniformStructureEntry."Entry No." := MiniformStructureEntry."Entry No." + 1;
      MiniformStructureEntry."Miniform Code" := MiniformHeader.Code;
      MiniformStructureEntry."Link Type" := LinkType;
      MiniformStructureEntry.Level := Level;
      MiniformStructureEntry."Extra Form" := ExtraForms;
      MiniformStructureEntry.INSERT;

      IF ExtraForms THEN
        IF MiniformHeaderUsedTmp.GET(MiniformHeader.Code) THEN
          EXIT;
      MiniformHeaderUsedTmp := MiniformHeader;
      IF NOT MiniformHeaderUsedTmp.INSERT THEN
        ;

      IF MiniformHeader."Start Miniform" AND (Level > 1) THEN
        EXIT;
      IF Level > 10 THEN
        EXIT;

      IF STRPOS(PreviousForms,'|' + MiniformHeader.Code + '|') > 0 THEN
        EXIT;
      PreviousForms := PreviousForms + '|' + MiniformHeader.Code + '|';

      IF MiniformHeader."Local Menu Miniform Code" <> '' THEN BEGIN
        MiniformHeader2.GET(MiniformHeader."Local Menu Miniform Code");

        CalcStructureRecursive(
          MiniformHeader2,MiniformHeaderUsedTmp,MiniformStructureEntry,PreviousForms,
          Level + 1,MiniformStructureEntry."Link Type"::"Local Menu",ExtraForms);
      END;

      IF MiniformHeader."Next Miniform" <> '' THEN BEGIN
        MiniformHeader2.GET(MiniformHeader."Next Miniform");

        CalcStructureRecursive(
          MiniformHeader2,MiniformHeaderUsedTmp,MiniformStructureEntry,PreviousForms,
          Level + 1,MiniformStructureEntry."Link Type"::Next,ExtraForms);
      END;

      MiniformLine.RESET;
      MiniformLine.SETRANGE("Miniform Code",MiniformHeader.Code);
      MiniformLine.SETFILTER("Call Miniform",'<>%1','');
      IF MiniformLine.FIND('-') THEN
        REPEAT
          MiniformHeader2.GET(MiniformLine."Call Miniform");

          CalcStructureRecursive(
            MiniformHeader2,MiniformHeaderUsedTmp,MiniformStructureEntry,PreviousForms,
            Level + 1,MiniformStructureEntry."Link Type"::Link,ExtraForms);
        UNTIL MiniformLine.NEXT = 0;
    END;

    [External]
    PROCEDURE GetQuantity@1240030005(InputValue@1240030002 : Text[250];RFEmployeeSetup@1240030001 : Record 14002802;VAR Quantity@1240030000 : Decimal) : Boolean;
    BEGIN
      IF EVALUATE(Quantity,InputValue) THEN
        IF Quantity - ROUND(Quantity,0.00001) <> 0 THEN
          ERROR(Text004)
        ELSE
          EXIT(TRUE);

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE GetInteger@1240020000(InputValue@1240020000 : Text[250];RFEmployeeSetup@1240020001 : Record 14002802;VAR Integer@1240020002 : Integer) : Boolean;
    BEGIN
      IF EVALUATE(Integer,InputValue) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE GetSerialNo@1240030006(InputValue@1240030002 : Text[250];RFEmployeeSetup@1240030001 : Record 14002802;VAR SerialNo@1240030000 : Code[20]) : Boolean;
    VAR
      LotNo2@1240040000 : Code[20];
      SerialNo2@1240040001 : Code[20];
    BEGIN
      IF RFEmployeeSetup."Item No. Includes Ser. No." THEN
        InputValue := SplitInputIncludeSerNo(InputValue,RFEmployeeSetup,1,LotNo2,SerialNo2);

      IF InputValue = '' THEN EXIT(FALSE);


      IF STRLEN(InputValue) > MAXSTRLEN(SerialNo) THEN
        EXIT(FALSE);

      SerialNo := InputValue;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE GetLotNo@1240030007(InputValue@1240030002 : Text[250];RFEmployeeSetup@1240030001 : Record 14002802;VAR LotNo@1240030000 : Code[20]) : Boolean;
    VAR
      PalletBin@1240040003 : Record 14002877;
      LotNo2@1240040001 : Code[20];
      SerialNo2@1240040000 : Code[20];
      i@1240040002 : Integer;
    BEGIN
      IF RFEmployeeSetup."Item No. Includes Ser. No." THEN
        InputValue := SplitInputIncludeSerNo(InputValue,RFEmployeeSetup,2,LotNo2,SerialNo2);

      IF InputValue = '' THEN EXIT(FALSE);

      FOR i := 1 TO 10 DO
        CASE TRUE OF
          i = RFEmployeeSetup."Lot No. Priority":
            IF STRLEN(InputValue) <= MAXSTRLEN(LotNo) THEN BEGIN
              LotNo := InputValue;
              EXIT(TRUE);
            END;
          i = RFEmployeeSetup."Lot Pallet No. Priority":
            IF STRLEN(InputValue) <= MAXSTRLEN(PalletBin."No.") THEN BEGIN
              PalletBin.RESET;
              PalletBin.SETCURRENTKEY("No.");
              PalletBin.SETRANGE("No.",InputValue);
              IF PalletBin.FIND('-') THEN
                IF (PalletBin."Item No." <> '') AND (PalletBin."Lot No." <> '') THEN BEGIN
                  LotNo := PalletBin."Lot No.";
                  EXIT(TRUE);
                END;
            END;
          i = RFEmployeeSetup."Lot Custom Priority":
            BEGIN
              ERROR(Text003);
            END;
        END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE SplitInputIncludeSerNo@1240030008(InputValue@1240030001 : Text[250];RFEmployeeSetup@1240030000 : Record 14002802;GetValue@1240030002 : 'Item,Serial No.,Lot No.';VAR LotNo@1240040000 : Code[20];VAR SerialNo@1240040001 : Code[20]) : Text[250];
    VAR
      Pos@1240030003 : Integer;
      i@1240040003 : Integer;
      InputPart@1240040002 : ARRAY [3] OF Text[250];
    BEGIN
      RFEmployeeSetup.TESTFIELD("Item No. Includes Ser. No.");
      IF RFEmployeeSetup."Item No. Delimiter" = '' THEN
        RFEmployeeSetup."Item No. Delimiter" := ' ';

      Pos := STRPOS(InputValue,RFEmployeeSetup."Item No. Delimiter");
      IF Pos = 0 THEN
        EXIT(InputValue);

      i := 1;
      REPEAT
        IF Pos > 1 THEN
          InputPart[i] := COPYSTR(InputValue,1,Pos - 1);

        IF Pos < STRLEN(InputValue) THEN BEGIN
          InputValue := COPYSTR(InputValue,Pos + 1);

          Pos := STRPOS(InputValue,RFEmployeeSetup."Item No. Delimiter");
        END ELSE
          InputValue := '';

        i := i + 1;
      UNTIL (InputValue = '') OR (Pos = 0) OR (i > 3);

      IF (InputValue <> '') AND (i <= 3) THEN
        InputPart[i] := InputValue;

      CASE RFEmployeeSetup."Item No. Delimiter Type" OF
        RFEmployeeSetup."Item No. Delimiter Type"::"Serial No.":
          SerialNo := InputPart[2];
        RFEmployeeSetup."Item No. Delimiter Type"::"Serial No.-Lot No.":
          BEGIN
            SerialNo := InputPart[2];
            LotNo := InputPart[3];
          END;
        RFEmployeeSetup."Item No. Delimiter Type"::"Lot No.":
          LotNo := InputPart[2];
        RFEmployeeSetup."Item No. Delimiter Type"::"Lot No.-Serial No.":
          BEGIN
            LotNo := InputPart[2];
            SerialNo := InputPart[3];
          END;
      END;

      CASE GetValue OF
        GetValue::Item:
          EXIT(InputPart[1]);
        GetValue::"Serial No.":
          EXIT(SerialNo);
        GetValue::"Lot No.":
          EXIT(LotNo);
      END;
    END;

    [External]
    PROCEDURE ScanItemInQtyToHandle@1240020024(RFEmployeeSetup@1240020000 : Record 14002802;InputValue@1240020001 : Text[250];SourceItemNo@1240020002 : Code[20];SourceUOM@1240020009 : Code[20];VAR StayInField@1240020003 : Boolean;VAR RemarkMessage@1240020004 : Text[250]) : Decimal;
    VAR
      ItemIdentifier@1240020005 : Record 7704;
      ItemUnitOfMeasure@1240020010 : Record 5404;
      ItemUnitOfMeasure2@1240020011 : Record 5404;
      LotNo@1240020006 : Code[20];
      SerialNo@1240020007 : Code[20];
      QtyToHandle@1240020008 : Decimal;
    BEGIN
      StayInField := FALSE;
      QtyToHandle := 0;
      IF RemarkMessage = '' THEN BEGIN
        IF GetItem(
            InputValue,RFEmployeeSetup,ItemIdentifier."Item No.",
            ItemIdentifier."Variant Code",ItemIdentifier."Unit of Measure Code",LotNo,SerialNo)
        THEN BEGIN
          IF SourceItemNo = ItemIdentifier."Item No." THEN BEGIN
            IF (ItemIdentifier."Unit of Measure Code" <> '') AND
               (ItemIdentifier."Unit of Measure Code" <> SourceUOM)
            THEN BEGIN
              IF RFEmployeeSetup."Scan in Qty per UOM Increments" THEN BEGIN
                IF ItemUnitOfMeasure.GET(ItemIdentifier."Item No.",ItemIdentifier."Unit of Measure Code") THEN;
                IF ItemUnitOfMeasure2.GET(SourceItemNo,SourceUOM) THEN;
                QtyToHandle :=
                  ItemUnitOfMeasure."Qty. per Unit of Measure" / ItemUnitOfMeasure2."Qty. per Unit of Measure";
                StayInField := TRUE;
              END ELSE BEGIN
                QtyToHandle := 1;
                StayInField := TRUE;
              END;
            END ELSE BEGIN
              QtyToHandle := 1;
              StayInField := TRUE;
            END;
          END ELSE BEGIN
            RemarkMessage := Text008;
            EXIT(QtyToHandle);
          END;
        END ELSE
          IF GetQuantity(InputValue,RFEmployeeSetup,QtyToHandle) THEN BEGIN
            StayInField := TRUE;
          END;
      END;

      EXIT(QtyToHandle);
    END;

    [External]
    PROCEDURE LaunchMainMenu@1240020026(WarehouseEmployee@1240020000 : Record 7301;DOMxmlin@1240020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      MiniformHeader@1240020001 : Record 7700;
    BEGIN
      IF WarehouseEmployee."ADCS Main Menu" <> '' THEN BEGIN
        IF NOT MiniformHeader.GET(WarehouseEmployee."ADCS Main Menu") THEN
          EXIT(FALSE);

        MiniformHeader.SaveXMLin(DOMxmlin);
        CODEUNIT.RUN(MiniformHeader."Handling Codeunit",MiniformHeader);
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    [External]
    PROCEDURE CheckBalanceQtyToHandle@19(VAR WhseActivLine2@1000 : Record 5767) : Boolean;
    VAR
      WhseActivLine@1004 : Record 5767;
      WhseActivLine3@1007 : Record 5767;
      TempWhseActivLine@1005 : TEMPORARY Record 5767;
      QtyToPick@1002 : Decimal;
      QtyToPutAway@1003 : Decimal;
      ErrorText@1001 : Text[250];
    BEGIN
      WhseActivLine.COPY(WhseActivLine2);
      WITH WhseActivLine DO BEGIN
        SETCURRENTKEY("Activity Type","No.","Item No.","Variant Code","Action Type");
        SETRANGE("Activity Type","Activity Type");
        SETRANGE("No.","No.");
        SETRANGE("Action Type");
        IF FINDSET THEN
          REPEAT
            IF NOT TempWhseActivLine.GET("Activity Type","No.","Line No.") THEN BEGIN
              WhseActivLine3.COPY(WhseActivLine);

              WhseActivLine3.SETRANGE("Item No.","Item No.");
              WhseActivLine3.SETRANGE("Variant Code","Variant Code");
              WhseActivLine3.SETRANGE("Serial No.","Serial No.");
              WhseActivLine3.SETRANGE("Lot No.","Lot No.");

              IF (WhseActivLine2."Action Type" = WhseActivLine2."Action Type"::Take) OR
                 (WhseActivLine2.GETFILTER("Action Type") = '')
              THEN BEGIN
                WhseActivLine3.SETRANGE("Action Type",WhseActivLine3."Action Type"::Take);
                IF WhseActivLine3.FINDSET THEN
                  REPEAT
                    QtyToPick := QtyToPick + WhseActivLine3."Qty. to Handle (Base)";
                    TempWhseActivLine := WhseActivLine3;
                    TempWhseActivLine.INSERT;
                  UNTIL WhseActivLine3.NEXT = 0;
              END;

              IF (WhseActivLine2."Action Type" = WhseActivLine2."Action Type"::Place) OR
                 (WhseActivLine2.GETFILTER("Action Type") = '')
              THEN BEGIN
                WhseActivLine3.SETRANGE("Action Type",WhseActivLine3."Action Type"::Place);
                IF WhseActivLine3.FINDSET THEN
                  REPEAT
                    QtyToPutAway := QtyToPutAway + WhseActivLine3."Qty. to Handle (Base)";
                    TempWhseActivLine := WhseActivLine3;
                    TempWhseActivLine.INSERT;
                  UNTIL WhseActivLine3.NEXT = 0;
              END;

              IF QtyToPick <> QtyToPutAway THEN
                EXIT(FALSE);

              QtyToPick := 0;
              QtyToPutAway := 0;
            END;
          UNTIL NEXT = 0;
      END;

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE DeleteHandledShipment@1240020032(SourceType@1240020000 : Integer;SourceSubtype@1240020001 : Integer;SourceNo@1240020002 : Code[20];LocationCode@1240020011 : Code[10]);
    VAR
      WarehouseShipmentHeader@1240020003 : Record 7320;
      WarehouseShipmentHeader2@1240020004 : Record 7320;
      WarehouseShipmentLine@1240020005 : Record 7321;
      WarehouseShipmentLine2@1240020006 : Record 7321;
      WarehouseActivityLine@1240020007 : Record 5767;
      WarehouseRequest@1240020008 : Record 5765;
      ItemTrackingMgt@1240020012 : Codeunit 6500;
      WhseShipmentRelease@1240020009 : Codeunit 7310;
      NoDelete@1240020010 : Boolean;
    BEGIN
      WarehouseRequest.RESET;
      WarehouseRequest.SETCURRENTKEY(Type,"Location Code","Source Type","Source Subtype","Source No.");
      WarehouseRequest.SETRANGE(Type,WarehouseRequest.Type::Outbound);
      WarehouseRequest.SETRANGE("Source Type",SourceType);
      WarehouseRequest.SETRANGE("Source Subtype",SourceSubtype);
      WarehouseRequest.SETRANGE("Source No.",SourceNo);
      WarehouseRequest.SETRANGE("Location Code",LocationCode);
      IF WarehouseRequest.FINDSET(FALSE) THEN BEGIN
        REPEAT
          WarehouseShipmentLine.RESET;
          WarehouseShipmentLine.SETCURRENTKEY(
            "No.","Source Type","Source Subtype","Source No.","Source Line No.");
          WarehouseShipmentLine.SETRANGE("Source Type",WarehouseRequest."Source Type");
          WarehouseShipmentLine.SETRANGE("Source Subtype",WarehouseRequest."Source Subtype");
          WarehouseShipmentLine.SETRANGE("Source No.",WarehouseRequest."Source No.");
          WarehouseShipmentLine.SETRANGE("Location Code",WarehouseRequest."Location Code");
          IF WarehouseShipmentLine.FINDSET(FALSE) THEN BEGIN
            NoDelete := FALSE;
            WarehouseActivityLine.RESET;
            WarehouseActivityLine.SETCURRENTKEY(
                "Activity Type","No.","Whse. Document Type","Whse. Document No.","Whse. Document Line No.");
            WarehouseActivityLine.SETRANGE(
                "Whse. Document Type",WarehouseActivityLine."Whse. Document Type"::Shipment);
            WarehouseActivityLine.SETRANGE(
                "Whse. Document No.",WarehouseShipmentLine."No.");
            IF NOT WarehouseActivityLine.FIND('-') THEN BEGIN
              REPEAT
                WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
                IF WarehouseShipmentHeader.Status = WarehouseShipmentHeader.Status::Released THEN
                  WhseShipmentRelease.Reopen(WarehouseShipmentHeader);

                WarehouseShipmentLine2.RESET;
                WarehouseShipmentLine2.SETRANGE("No.",WarehouseShipmentHeader."No.");
                WarehouseShipmentLine2.SETRANGE("Line No.",WarehouseShipmentLine."Line No.");
                WarehouseShipmentLine2.SETRANGE("Source No.",WarehouseShipmentLine."Source No.");
                WarehouseShipmentLine2.SETRANGE("Source Type",WarehouseShipmentLine."Source Type");
                WarehouseShipmentLine2.SETRANGE("Source Subtype",WarehouseShipmentLine."Source Subtype");
                WarehouseShipmentLine2.SETRANGE("Source Line No.",WarehouseShipmentLine."Source Line No.");
                WarehouseShipmentLine2.SETFILTER(WarehouseShipmentLine2."Qty. Picked (Base)",'<>%1',0);
                IF WarehouseShipmentLine2.FIND('-') THEN
                  IF (WarehouseShipmentLine2."Qty. Picked (Base)" <>
                      (WarehouseShipmentLine2."Qty. Shipped (Base)" +
                      WarehouseShipmentLine2."Qty. to Ship (Base)"))
                  THEN
                    NoDelete := TRUE;

                IF NOT NoDelete THEN BEGIN
                  WarehouseShipmentLine2.RESET;
                  WarehouseShipmentLine2.SETRANGE("No.",WarehouseShipmentHeader."No.");
                  WarehouseShipmentLine2.SETRANGE("Line No.",WarehouseShipmentLine."Line No.");
                  WarehouseShipmentLine2.SETRANGE("Source No.",WarehouseShipmentLine."Source No.");
                  WarehouseShipmentLine2.SETRANGE("Source Type",WarehouseShipmentLine."Source Type");
                  WarehouseShipmentLine2.SETRANGE("Source Subtype",WarehouseShipmentLine."Source Subtype");
                  WarehouseShipmentLine2.SETRANGE("Source Line No.",WarehouseShipmentLine."Source Line No.");
                  IF WarehouseShipmentLine2.FIND('-') THEN
                    REPEAT
                      ItemTrackingMgt.SetDeleteReservationEntries(TRUE);
                      ItemTrackingMgt.DeleteWhseItemTrkgLines(
                        DATABASE::"Warehouse Shipment Line",0,WarehouseShipmentLine2."No.",'',0,
                        WarehouseShipmentLine2."Line No.",WarehouseShipmentLine2."Location Code",TRUE);
                      WarehouseShipmentLine2.DELETE;
                    UNTIL WarehouseShipmentLine2.NEXT = 0;

                  WarehouseShipmentLine2.RESET;
                  WarehouseShipmentLine2.SETRANGE("No.",WarehouseShipmentHeader."No.");
                  IF WarehouseShipmentLine2.ISEMPTY THEN BEGIN
                    WarehouseShipmentHeader2.RESET;
                    IF WarehouseShipmentHeader2.GET(WarehouseShipmentHeader."No.") THEN
                      IF WarehouseShipmentHeader2.Status = WarehouseShipmentHeader2.Status::Open THEN BEGIN
                        WarehouseShipmentHeader2.DELETE;
                      END;
                  END;
                END;
              UNTIL WarehouseShipmentLine.NEXT = 0;
            END;
          END;
        UNTIL WarehouseRequest.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE CalcAvailQtyAgainstReserve@14002810(LocationCode@1240020008 : Code[10];ItemNo@1240020007 : Code[20];VariantCode@1240020006 : Code[10];UnitofMeasureCode@1240020005 : Code[10];SourceNo@1240020012 : Code[20];SourceSubType@1240020013 : Option;SourceType@1240020014 : Integer;SourceLineNo@1240020015 : Integer;SourceSubLineNo@1240020016 : Integer;QtyPerUnitofMeasure@1240020002 : Decimal;VAR TotalQtytoPick@1240020001 : Decimal;VAR TotalQtytoPickBase@1240020000 : Decimal);
    VAR
      RFSetup@14002811 : Record 14002801;
      OutboundWhseRequestFilter@1240020003 : Record 14002863;
      WarehouseStreamlineMgt@1240020011 : Codeunit 14002809;
      RFStatOutstandingQty@1240020004 : Decimal;
      RFStatQtyNotAvail@1240020009 : Decimal;
      RFStatInvReservedQty@1240020010 : Decimal;
    BEGIN
      IF SourceNo = '' THEN
        EXIT;

      RFSetup.GET;
      IF RFSetup."Enable OWR" AND RFSetup."Calculate Reserved Qty to Pick" THEN BEGIN
        RFStatOutstandingQty := TotalQtytoPickBase;
        RFStatInvReservedQty :=
          WarehouseStreamlineMgt.CalcLineReservedQtyonInvt2(
            SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo);
        TotalQtytoPickBase := WarehouseStreamlineMgt.CalcAvailQtyAgainstReserve(
          OutboundWhseRequestFilter,ItemNo,VariantCode,LocationCode,
          RFStatOutstandingQty,RFStatQtyNotAvail,RFStatInvReservedQty);
        TotalQtytoPick := ROUND(TotalQtytoPickBase / QtyPerUnitofMeasure,0.00001);
      END;
    END;

    [External]
    PROCEDURE CheckIfCreateOutboundWhseRequest@1240020108(LocationCode@1240020000 : Code[10]) : Boolean;
    VAR
      Location@1240020001 : Record 14;
      OWRLocationSetup@1240020002 : Record 14099030;
    BEGIN
      // Check if an outbound Warehouse Request record should be created when not using NAV warehousing
      IF Location.GET(LocationCode) THEN BEGIN
        IF Location."Require Pick" OR Location."Require Shipment" THEN
          EXIT(FALSE);

        OWRLocationSetup.RESET;
        IF OWRLocationSetup.GET(LocationCode) THEN
          EXIT(OWRLocationSetup."Create Outbound Whse. Requests");
      END;
    END;

    LOCAL PROCEDURE CreateSalesWhseRqst@1240020115(VAR SalesHeader@1240020000 : Record 36;VAR SalesLine@1240020001 : Record 37;WhseType@1240020002 : 'Inbound,Outbound');
    VAR
      Location@1240020003 : Record 14;
      RFSetup@1240020007 : Record 14002801;
      SalesLine2@1240020004 : Record 37;
      WhseRqst@1240020005 : Record 5765;
      WhseMgt@1240020006 : Codeunit 5775;
      OutboundWhseRequestMgt@1240020009 : Codeunit 14002863;
      AssemblyOrderNo@1240020008 : Code[20];
      EShipAgentService@1240020012 : Code[30];
      ShipForCode@1240020011 : Code[20];
      EDIOrder@1240020010 : Boolean;
    BEGIN
      IF WhseType = WhseType::Outbound THEN BEGIN
        SalesLine2.COPY(SalesLine);
        SalesLine2.SETRANGE("Location Code",SalesLine."Location Code");
        SalesLine2.SETRANGE("Unit of Measure Code",'');
        IF SalesLine2.FINDFIRST THEN
          SalesLine2.TESTFIELD("Unit of Measure Code");

        RFSetup.GetRFSetup;

        WhseRqst.Type := WhseType;
        WhseRqst."Source Type" := DATABASE::"Sales Line";
        WhseRqst."Source Subtype" := SalesHeader."Document Type";
        WhseRqst."Source No." := SalesHeader."No.";
        WhseRqst."Source Document" := WhseMgt.GetSourceDocument(WhseRqst."Source Type",WhseRqst."Source Subtype");
        WhseRqst."Shipment Method Code" := SalesHeader."Shipment Method Code";
        WhseRqst."Shipping Agent Code" := SalesHeader."Shipping Agent Code";
        WhseRqst."Shipping Advice" := SalesHeader."Shipping Advice";
        WhseRqst."Document Status" := SalesHeader.Status::Released;
        WhseRqst."Location Code" := SalesLine."Location Code";
        WhseRqst."Destination Type" := WhseRqst."Destination Type"::Customer;
        WhseRqst."Destination No." := SalesHeader."Sell-to Customer No.";
        WhseRqst."External Document No." := SalesHeader."External Document No.";
        IF WhseType = WhseType::Outbound THEN
          WhseRqst."Shipment Date" := SalesHeader."Shipment Date";
        SalesHeader.SETRANGE("Location Filter",SalesLine."Location Code");
        SalesHeader.CALCFIELDS("Completely Shipped");
        WhseRqst."Completely Handled" := SalesHeader."Completely Shipped";

        IF RFSetup."Copy EShip fields to OWR" THEN BEGIN
          GetEShipFieldsEvent(SalesHeader,EShipAgentService,ShipForCode,EDIOrder);
          WhseRqst."E-Ship Agent Service" := EShipAgentService;
          WhseRqst."Ship-for Code" := ShipForCode;
          WhseRqst."EDI Order" := EDIOrder;
        END;

        SetWhseRqstFields(SalesHeader,WhseRqst);

        IF RFSetup.GetFirstAssemblyOrderNo(WhseRqst,AssemblyOrderNo) THEN BEGIN
          WhseRqst."First Assembly Order No." := AssemblyOrderNo;
          WhseRqst."ATO Pick Required" := TRUE;
        END;

        OutboundWhseRequestMgt.UpdateWarehouseRequest(WhseRqst);

        IF NOT WhseRqst.INSERT THEN
          WhseRqst.MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreatePurchWhseRqst@1240020116(VAR PurchHeader@1240020000 : Record 38;VAR PurchLine@1240020001 : Record 39;WhseType@1240020002 : 'Inbound,Outbound');
    VAR
      Location@1240020006 : Record 14;
      PurchLine2@1240020005 : Record 39;
      WhseRqst@1240020004 : Record 5765;
      WhseMgt@1240020003 : Codeunit 5775;
      OutboundWhseRequestMgt@1240020007 : Codeunit 14002863;
    BEGIN
      IF WhseType = WhseType::Outbound THEN BEGIN
        PurchLine2.COPY(PurchLine);
        PurchLine2.SETRANGE("Location Code",PurchLine."Location Code");
        PurchLine2.SETRANGE("Unit of Measure Code",'');
        IF PurchLine2.FINDFIRST THEN
          PurchLine2.TESTFIELD("Unit of Measure Code");

        WhseRqst.Type := WhseType;
        WhseRqst."Source Type" := DATABASE::"Purchase Line";
        WhseRqst."Source Subtype" := PurchHeader."Document Type";
        WhseRqst."Source No." := PurchHeader."No.";
        WhseRqst."Source Document" := WhseMgt.GetSourceDocument(WhseRqst."Source Type",WhseRqst."Source Subtype");
        WhseRqst."Shipment Method Code" := PurchHeader."Shipment Method Code";
        WhseRqst."Document Status" := PurchHeader.Status::Released;
        WhseRqst."Location Code" := PurchLine."Location Code";
        WhseRqst."Destination Type" := WhseRqst."Destination Type"::Vendor;
        WhseRqst."Destination No." := PurchHeader."Buy-from Vendor No.";
        WhseRqst."External Document No." := PurchHeader."Vendor Shipment No.";
        IF WhseType = WhseType::Outbound THEN
          WhseRqst."Shipment Date" := PurchHeader."Expected Receipt Date";
        PurchHeader.SETRANGE("Location Filter",PurchLine."Location Code");
        PurchHeader.CALCFIELDS("Completely Received");
        WhseRqst."Completely Handled" := PurchHeader."Completely Received";

        OutboundWhseRequestMgt.UpdateWarehouseRequest(WhseRqst);

        IF NOT WhseRqst.INSERT THEN
          WhseRqst.MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreateTransWhseRqst@1240020117(VAR TransferHeader@1240020000 : Record 5740);
    VAR
      TransLine@1240020001 : Record 5741;
      WhseRqst@1240020002 : Record 5765;
      WhseMgt@1240020003 : Codeunit 5775;
      OutboundWhseRequestMgt@1240020004 : Codeunit 14002863;
    BEGIN
      TransLine.SETRANGE("Document No.",TransferHeader."No.");
      TransLine.SETRANGE("Unit of Measure Code",'');
      TransLine.SETFILTER("Item No.",'<>%1','');
      IF TransLine.FINDFIRST THEN
        TransLine.TESTFIELD("Unit of Measure Code");

      WhseRqst."Source Type" := DATABASE::"Transfer Line";
      WhseRqst."Source No." := TransferHeader."No.";
      WhseRqst."Document Status" := WhseRqst."Document Status"::Released;
      WhseRqst."Destination Type" := WhseRqst."Destination Type"::Location;
      WhseRqst."External Document No." := TransferHeader."External Document No.";

      TransferHeader.SETRANGE("Location Filter",TransferHeader."Transfer-from Code");
      TransferHeader.CALCFIELDS("Completely Shipped");

      WhseRqst.Type := WhseRqst.Type::Outbound;
      WhseRqst."Source Subtype" := 0;
      WhseRqst."Source Document" := WhseMgt.GetSourceDocument(WhseRqst."Source Type",WhseRqst."Source Subtype");
      WhseRqst."Location Code" := TransferHeader."Transfer-from Code";
      WhseRqst."Completely Handled" := TransferHeader."Completely Shipped";
      WhseRqst."Shipment Method Code" := TransferHeader."Shipment Method Code";
      WhseRqst."Shipping Agent Code" := TransferHeader."Shipping Agent Code";
      WhseRqst."Shipping Advice" := TransferHeader."Shipping Advice";
      WhseRqst."Shipment Date" := TransferHeader."Shipment Date";
      WhseRqst."Destination No." := TransferHeader."Transfer-to Code";

      OutboundWhseRequestMgt.UpdateWarehouseRequest(WhseRqst);

      IF NOT WhseRqst.INSERT THEN
        WhseRqst.MODIFY;

      WhseRqst.SETCURRENTKEY("Source Type","Source No.");
      WhseRqst.SETRANGE("Source Type",DATABASE::"Transfer Line");
      WhseRqst.SETRANGE("Source No.",TransferHeader."No.");
      WhseRqst.SETRANGE("Document Status",WhseRqst."Document Status"::Open);
      IF NOT WhseRqst.ISEMPTY THEN
        WhseRqst.DELETEALL(TRUE);
    END;

    [External]
    PROCEDURE PostWhseProcessing@1240020005(LocationCode@1240020005 : Code[10];SourceNo@1240020000 : Code[20];SourceType@1240020001 : Integer;SourceSubtype@1240020002 : Integer);
    VAR
      RFSetup@1240020003 : Record 14002801;
      OutboundWhseRequestMgt@1240020004 : Codeunit 14002863;
    BEGIN
      OnBeforePostWhseProcessing(LocationCode,SourceNo,SourceType,SourceSubtype);

      RFSetup.GetRFSetup;
      IF RFSetup."Enable OWR" THEN BEGIN
        IF RFSetup."Delete Shipment Lines Handled" THEN
          DeleteHandledShipment(SourceType,SourceSubtype,SourceNo,LocationCode);

        OutboundWhseRequestMgt.SetWhseCompletelyHandled(
          SourceType,SourceSubtype,SourceNo,LocationCode);
      END;

      OnAfterPostWhseProcessing(LocationCode,SourceNo,SourceType,SourceSubtype);
    END;

    [External]
    PROCEDURE SetWhseRqstFields@1240020127(VAR SalesHeader@1240020000 : Record 36;VAR WhseRqst@1240020001 : Record 5765);
    BEGIN
      WhseRqst."Ship-to Code" := SalesHeader."Ship-to Code";
      WhseRqst."Ship-to Country Code" := SalesHeader."Ship-to Country/Region Code";
    END;

    [External]
    PROCEDURE CheckIfUseLicensePlating@1240020014(LocationCode@1240020000 : Code[10]) : Boolean;
    VAR
      RFLocationSetup@1240020001 : Record 14099031;
    BEGIN
      IF RFLocationSetup.GET(LocationCode) THEN
        IF RFLocationSetup."Use License Plating" THEN
          EXIT(TRUE);

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE CheckIfUseFifoPickTakesLP@1240020045(LocationCode@1240020000 : Code[10]) : Boolean;
    VAR
      RFLocationSetup@1240020001 : Record 14099031;
    BEGIN
      IF RFLocationSetup.GET(LocationCode) THEN
        IF RFLocationSetup."Use License Plating" THEN
          EXIT(RFLocationSetup."Use FIFO Pick Takes (LP)");
    END;

    [External]
    PROCEDURE CheckIfUseFifoReplenTakesLP@1240020046(LocationCode@1240020000 : Code[10]) : Boolean;
    VAR
      RFLocationSetup@1240020001 : Record 14099031;
    BEGIN
      IF RFLocationSetup.GET(LocationCode) THEN
        IF RFLocationSetup."Use License Plating" THEN
          EXIT(RFLocationSetup."Use FIFO Replen Takes (LP)");
    END;

    [External]
    PROCEDURE CheckIfUseDynamicPallets@1240020016(LocationCode@1240020000 : Code[10]) : Boolean;
    VAR
      RFLocationSetup@1240020001 : Record 14099031;
    BEGIN
      IF RFLocationSetup.GET(LocationCode) THEN
        IF RFLocationSetup."Use Dynamic Pallets" THEN
          EXIT(TRUE);

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE "WhseJnlBatch-CountingStatus"@1240020027(WhseJnlBatch@1240020000 : Record 7310) : Text[30];
    VAR
      WhseJnlLine@1240020001 : Record 7311;
    BEGIN
      WITH WhseJnlBatch DO BEGIN
        WhseJnlLine.RESET;
        WhseJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
        WhseJnlLine.SETRANGE("Journal Batch Name",Name);
        WhseJnlLine.SETRANGE("Location Code","Location Code");
        WhseJnlLine.SETFILTER("Item No.",'<>%1','');
        WhseJnlLine.SETFILTER("Last Scan Date",'<>%1',0D);
        IF WhseJnlLine.FIND('-') THEN BEGIN
          WhseJnlLine.SETFILTER("Last Scan Date",'=%1',0D);
          IF WhseJnlLine.FIND('-') THEN
            EXIT(Text005)
          ELSE
            EXIT(Text006);
        END ELSE
          EXIT(Text007);
      END;
    END;

    [EventSubscriber(Table,14,OnAfterInsertEvent)]
    LOCAL PROCEDURE "Location-OnAfterInsertEvent"@1240020100(VAR Rec@1240020000 : Record 14;RunTrigger@1240020001 : Boolean);
    VAR
      OWRLocationSetup@1240020002 : Record 14099030;
      RFLocationSetup@1240020003 : Record 14099031;
    BEGIN
      //<T14> Location - OnAfterInsertEvent
      WITH Rec DO BEGIN
        OWRLocationSetup.RESET;
        IF NOT OWRLocationSetup.GET(Code) THEN BEGIN
          OWRLocationSetup.INIT;
          OWRLocationSetup.Code := Code;
          IF Name <> '' THEN
            OWRLocationSetup.Description := Name
          ELSE
            OWRLocationSetup.Description := Code + ' Location';
          OWRLocationSetup.INSERT(TRUE);
        END;

        RFLocationSetup.RESET;
        IF NOT RFLocationSetup.GET(Code) THEN BEGIN
          RFLocationSetup.INIT;
          RFLocationSetup.Code := Code;
          IF Name <> '' THEN
            RFLocationSetup.Description := Name
          ELSE
            RFLocationSetup.Description := Code + ' Location';
          RFLocationSetup.INSERT(TRUE);
        END;
      END;
    END;

    [EventSubscriber(Table,14,OnAfterDeleteEvent)]
    LOCAL PROCEDURE "Location-OnAfterDeleteEvent"@1240020101(VAR Rec@1240020000 : Record 14;RunTrigger@1240020001 : Boolean);
    VAR
      OWRLocationSetup@1240020002 : Record 14099030;
      RFLocationSetup@1240020003 : Record 14099031;
    BEGIN
      //<T14> Location - OnAfterDeleteEvent
      WITH Rec DO BEGIN
        OWRLocationSetup.RESET;
        IF OWRLocationSetup.GET(Code) THEN
          OWRLocationSetup.DELETE(TRUE);

        RFLocationSetup.RESET;
        IF RFLocationSetup.GET(Code) THEN
          RFLocationSetup.DELETE(TRUE);
      END;
    END;

    [EventSubscriber(Table,1808,OnRegisterAssistedSetup)]
    LOCAL PROCEDURE "AggregatedAssistedSetup-OnRegisterAssistedSetup"@1240020110(VAR TempAggregatedAssistedSetup@1240020000 : TEMPORARY Record 1808);
    VAR
      OWRAssistedSetup@1240020001 : Record 14099040;
      RFAssistedSetup@1240020002 : Record 14099041;
    BEGIN
      //<T1808> Aggregated Assisted Setup - OnRegisterAssistedSetup Event
      RFAssistedSetup.LoadDefaultAssistedSetup;
      WITH TempAggregatedAssistedSetup DO BEGIN
        IF RFAssistedSetup.GET(PAGE::"Assisted RF Setup Toolbox") THEN
          AddExtensionAssistedSetup(
            RFAssistedSetup."Page ID",RFAssistedSetup.Name,RFAssistedSetup.Visible,
            RFAssistedSetup."Record ID",RFAssistedSetup.Status,'');
      END;
      EXIT;

      // Standalone OWR Only:
      OWRAssistedSetup.LoadDefaultAssistedSetup;
      WITH TempAggregatedAssistedSetup DO BEGIN
        IF OWRAssistedSetup.GET(PAGE::"Assisted OWR Setup Wizard") THEN
          AddExtensionAssistedSetup(
            OWRAssistedSetup."Page ID",OWRAssistedSetup.Name,OWRAssistedSetup.Visible,
            OWRAssistedSetup."Record ID",OWRAssistedSetup.Status,'');

        IF OWRAssistedSetup.GET(PAGE::"Assisted OWR Emp. Setup Wizard") THEN
          AddExtensionAssistedSetup(
            OWRAssistedSetup."Page ID",OWRAssistedSetup.Name,OWRAssistedSetup.Visible,
            OWRAssistedSetup."Record ID",OWRAssistedSetup.Status,'');

        IF OWRAssistedSetup.GET(PAGE::"Assisted OWR Filter Setup Wiz.") THEN
          AddExtensionAssistedSetup(
            OWRAssistedSetup."Page ID",OWRAssistedSetup.Name,OWRAssistedSetup.Visible,
            OWRAssistedSetup."Record ID",OWRAssistedSetup.Status,'');

        IF OWRAssistedSetup.GET(PAGE::"Assisted OWR Replen Rule Wiz.") THEN
          AddExtensionAssistedSetup(
            OWRAssistedSetup."Page ID",OWRAssistedSetup.Name,OWRAssistedSetup.Visible,
            OWRAssistedSetup."Record ID",OWRAssistedSetup.Status,'');

        IF OWRAssistedSetup.GET(PAGE::"Assisted OWR Setup Toolbox") THEN
          AddExtensionAssistedSetup(
            OWRAssistedSetup."Page ID",OWRAssistedSetup.Name,OWRAssistedSetup.Visible,
            OWRAssistedSetup."Record ID",OWRAssistedSetup.Status,'');
      END;
    END;

    [EventSubscriber(Table,1808,OnUpdateAssistedSetupStatus)]
    LOCAL PROCEDURE "AggregatedAssistedSetup-OnUpdateAssistedSetupStatus"@1240020107(VAR TempAggregatedAssistedSetup@1240020000 : TEMPORARY Record 1808);
    VAR
      OWRAssistedSetup@1240020001 : Record 14099040;
      RFAssistedSetup@1240020002 : Record 14099041;
    BEGIN
      //<T1808> Aggregated Assisted Setup - OnUpdateAssistedSetupStatus Event
      RFAssistedSetup.RESET;
      IF RFAssistedSetup.FINDSET(FALSE) THEN
        REPEAT
          TempAggregatedAssistedSetup.SetStatus(TempAggregatedAssistedSetup,RFAssistedSetup."Page ID",RFAssistedSetup.Status);
        UNTIL RFAssistedSetup.NEXT = 0;
      EXIT;

      // Standalone OWR Only:
      OWRAssistedSetup.RESET;
      IF OWRAssistedSetup.FINDSET(FALSE) THEN
        REPEAT
          TempAggregatedAssistedSetup.SetStatus(TempAggregatedAssistedSetup,OWRAssistedSetup."Page ID",OWRAssistedSetup.Status);
        UNTIL OWRAssistedSetup.NEXT = 0;
    END;

    [EventSubscriber(Table,7310,OnAfterValidateEvent,"Ready to Register")]
    LOCAL PROCEDURE "WhseJnlBatch-ReadyToRegister-OnAfterValidate"@1240020031(VAR Rec@1240020000 : Record 7310;VAR xRec@1240020001 : Record 7310;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T7310-F72801> Warehouse Journal Batch - Ready to Register OnAfterValidateEvent
      WITH Rec DO BEGIN
        IF NOT "Ready to Register" THEN BEGIN
          "Ready at Date" := 0D;
          "Ready at Time" := 0T;
          "Ready by Warehouse Employee" := '';
        END;
      END;
    END;

    [EventSubscriber(Table,7311,OnAfterValidateEvent,"Bin Code")]
    LOCAL PROCEDURE "WhseJnlLine-BinCode-OnAfterValidate"@1240020007(VAR Rec@1240020000 : Record 7311;VAR xRec@1240020001 : Record 7311;CurrFieldNo@1240020002 : Integer);
    VAR
      Bin@1240020003 : Record 7354;
    BEGIN
      //<T7311-F15> Warehouse Journal Line - Bin Code OnAfterValidateEvent
      WITH Rec DO BEGIN
        IF ("Bin Code" <> '') AND ("Location Code" <> '') THEN
          IF Bin.GET("Location Code","Bin Code") THEN
            "Bin Sorting" := Bin."Bin Sorting";
      END;
    END;

    [EventSubscriber(Table,7311,OnBeforeValidateEvent,"Qty. (Phys. Inventory)")]
    LOCAL PROCEDURE "WhseJnlLine-QtyPhysInventory-OnBeforeValidate"@1240020002(VAR Rec@1240020000 : Record 7311;VAR xRec@1240020001 : Record 7311;CurrFieldNo@1240020002 : Integer);
    VAR
      RFSetup@1240020003 : Record 14002801;
      PhysicalInventoryUpdate@1240020004 : Codeunit 14002810;
    BEGIN
      //<T7311-F54> Warehouse Journal Line - Qty. (Phys. Inventory) OnBeforeValidateEvent
      WITH Rec DO BEGIN
        RFSetup.GET;
        IF RFSetup."Enable RF" THEN
          PhysicalInventoryUpdate.UpdateQtyCalculated(Rec);
      END;
    END;

    [EventSubscriber(Table,7311,OnAfterValidateEvent,"Original Qty. (Calculated)")]
    LOCAL PROCEDURE "WhseJnlLine-OriginalQtyCalculated-OnAfterValidate"@1240020010(VAR Rec@1240020000 : Record 7311;VAR xRec@1240020001 : Record 7311;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T7311-F72806> Warehouse Journal Line - Original Qty. (Calculated) OnAfterValidateEvent
      WITH Rec DO BEGIN
        VALIDATE("Qty. (Phys. Inventory)");
      END;
    END;

    [EventSubscriber(Table,7311,OnAfterValidateEvent,"Qty. (Phys. Inventory, Hide)")]
    LOCAL PROCEDURE "WhseJnlLine-QtyPhysInventoryHide-OnAfterValidate"@1240020011(VAR Rec@1240020000 : Record 7311;VAR xRec@1240020001 : Record 7311;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T7311-F72808> Warehouse Journal Line - Qty. (Phys. Inventory, Hide) OnAfterValidateEvent
      WITH Rec DO BEGIN
        VALIDATE("Qty. (Phys. Inventory)","Qty. (Phys. Inventory, Hide)");
      END;
    END;

    [EventSubscriber(Table,7311,OnAfterValidateEvent,"Pallet Code")]
    LOCAL PROCEDURE "WhseJnlLine-PalletCode-OnAfterValidate"@1240020015(VAR Rec@1240020000 : Record 7311;VAR xRec@1240020001 : Record 7311;CurrFieldNo@1240020002 : Integer);
    VAR
      PalletBinContent@1240020003 : Record 14002963;
      WhseJnlTemplate@1240020004 : Record 7309;
    BEGIN
      //<T7311-F14002803> Warehouse Journal Line - Pallet Code OnafterValidateEvent
      WITH Rec DO BEGIN
        IF ("Pallet Code" <> '') AND
           (xRec."Pallet Code" = '')
        THEN BEGIN
          PalletBinContent.SETRANGE(Location,Rec."Location Code");
          PalletBinContent.SETRANGE("Pallet No.","Pallet Code");
          IF PalletBinContent.FINDFIRST THEN
            VALIDATE("Bin Code",PalletBinContent.Bin);

            WhseJnlTemplate.GET("Journal Template Name");
            IF WhseJnlTemplate.Type = WhseJnlTemplate.Type::"Physical Inventory" THEN
              "Pallet Action" := "Pallet Action"::Physical;
            IF WhseJnlTemplate.Type = WhseJnlTemplate.Type::Item THEN
              "Pallet Action" := "Pallet Action"::Adjust;
        END ELSE
          "Pallet Action" := 0;
      END;
    END;

    [EventSubscriber(Table,7338,OnAfterValidateEvent,"Zone Code")]
    LOCAL PROCEDURE "BinCreationWkstLine-ZoneCode-OnAfterValidate"@1240020003(VAR Rec@1240020000 : Record 7338;VAR xRec@1240020001 : Record 7338;CurrFieldNo@1240020002 : Integer);
    VAR
      Zone@1240020004 : Record 7300;
    BEGIN
      //<T7338-F6> Bin Creation Worksheet Line - Zone Code OnAfterValidateEvent
      WITH Rec DO BEGIN
        IF Zone.GET("Location Code","Zone Code") THEN BEGIN
          "Wave Pick Bin" := Zone."Wave Pick Zone";
          "Bin Sorting" := Zone."Zone Sorting";
        END;
      END;
    END;

    [EventSubscriber(Table,7338,OnAfterValidateEvent,"Bin Code")]
    LOCAL PROCEDURE "BinCreationWkstLine-BinCode-OnAfterValidate"@1240020004(VAR Rec@1240020000 : Record 7338;VAR xRec@1240020001 : Record 7338;CurrFieldNo@1240020002 : Integer);
    VAR
      Bin@1240020003 : Record 7354;
      Zone@1240020004 : Record 7300;
    BEGIN
      //<T7338-F7> Bin Creation Worksheet Line - Bin Code OnAfterValidateEvent
      WITH Rec DO BEGIN
        IF NOT Bin.GET("Location Code","Bin Code") THEN BEGIN
          IF Zone.GET("Location Code","Zone Code") THEN BEGIN
            "Wave Pick Bin" := Zone."Wave Pick Zone";
            "Bin Sorting" := Bin."Bin Sorting";
          END;
        END;
      END;
    END;

    [EventSubscriber(Page,7326,OnAfterActionEvent,Action14002904)]
    LOCAL PROCEDURE "WhsePhysInvtJournal-CalcInvLP-OnAfterAction"@1240020008(VAR Rec@1240020000 : Record 7311);
    VAR
      RFLocationSetup@1240020001 : Record 14099031;
      BinContent@1240020002 : Record 7302;
      WhseCalcPalletInventory@1240020003 : Report 14002963;
    BEGIN
      //<P7326-Action14002904> Whse. Phys. Invt. Journal - Calculate Inventory License Plates
      WITH Rec DO BEGIN
        RFLocationSetup.GET("Location Code");
        IF RFLocationSetup."Use License Plating" THEN BEGIN
          BinContent.SETRANGE("Location Code","Location Code");
          WhseCalcPalletInventory.InitializeJournal("Journal Template Name","Journal Batch Name","Location Code");
          WhseCalcPalletInventory.SetWhseJnlLine(Rec);
          WhseCalcPalletInventory.SETTABLEVIEW(BinContent);
          WhseCalcPalletInventory.RUNMODAL;
          CLEAR(WhseCalcPalletInventory);
        END ELSE
          ERROR(Text015);
      END;
    END;

    [EventSubscriber(Page,7329,OnAfterActionEvent,Action14002807)]
    LOCAL PROCEDURE "WhseJnlBatchList-ResetReadyToRegister-Action"@1240020034(VAR Rec@1240020000 : Record 7310);
    VAR
      WarehouseJournalBatch@1240020001 : Record 7310;
    BEGIN
      //<P7329-Action14002807> Whse. Journal Batches List - Reset Ready to Register OnAfterActionEvent
      WITH Rec DO BEGIN
        TESTFIELD("Ready to Register");
        WarehouseJournalBatch := Rec;
        WarehouseJournalBatch."Ready to Register" := FALSE;
        WarehouseJournalBatch."Ready at Date" := 0D;
        WarehouseJournalBatch."Ready at Time" := 0T;
        WarehouseJournalBatch."Ready by Warehouse Employee" := '';
        WarehouseJournalBatch.MODIFY(TRUE);
      END;
    END;

    [EventSubscriber(Page,7372,OnBeforeActionEvent,Action25)]
    LOCAL PROCEDURE "BinCreationWkst-CreateBin-OnBeforeActionEvent"@1240020134(VAR Rec@1240020000 : Record 7338);
    VAR
      OWRSingleInstance@1240020001 : Codeunit 14002864;
    BEGIN
      //<P7372-Action25> Bin Creation Worksheet - Create Bin - OnBeforeActionEvent
      WITH Rec DO BEGIN
        OWRSingleInstance.SetBinCreationWkshLine(Rec);
      END;
    END;

    [EventSubscriber(Page,7372,OnAfterActionEvent,Action25)]
    LOCAL PROCEDURE "BinCreationWkst-CreateBin-OnAfterActionEvent"@1240020119(VAR Rec@1240020000 : Record 7338);
    VAR
      OWRSingleInstance@1240020001 : Codeunit 14002864;
    BEGIN
      //<P7372-Action25> Bin Creation Worksheet - Create Bin - OnAfterActionEvent
      OWRSingleInstance.ApplyBinCreationWkshLineWaveBin;
      OWRSingleInstance.ResetBinCreationWkshLine;
    END;

    [EventSubscriber(Page,7374,OnOpenPageEvent)]
    LOCAL PROCEDURE "BinContents-OnOpenPage"@1240020001(VAR Rec@1240020000 : Record 7302);
    BEGIN
      //<P7374> Bin Contents - OnOpenPageEvent
      WITH Rec DO BEGIN
        IF ISEMPTY THEN
          Rec.RESET;
      END;
    END;

    [EventSubscriber(Codeunit,80,OnAfterFinalizePosting)]
    LOCAL PROCEDURE "SalesPost-OnAfterFinalizePosting"@1240020035(VAR SalesHeader@1240020000 : Record 36;VAR SalesShipmentHeader@1240020001 : Record 110;VAR SalesInvoiceHeader@1240020002 : Record 112;VAR SalesCrMemoHeader@1240020003 : Record 114;VAR ReturnReceiptHeader@1240020004 : Record 6660;VAR GenJnlPostLine@1240020005 : Codeunit 12);
    VAR
      SalesShipmentLine@1240020008 : Record 111;
      SalesShipmentLine2@1240020006 : Record 111;
      SalesShipmentLineTmp@1240020007 : TEMPORARY Record 111;
      WarehouseRequest@1240020009 : Record 5765;
    BEGIN
      //<CU80> Sales-Post - OnAfterFinalizePostingEvent
      WarehouseRequest.RESET;
      WarehouseRequest.SETRANGE("Source No.",SalesHeader."No.");
      WarehouseRequest.SETRANGE("Source Type",DATABASE::"Sales Line");
      WarehouseRequest.SETRANGE("Source Subtype",SalesHeader."Document Type");
      WarehouseRequest.SETRANGE(Type,WarehouseRequest.Type::Outbound);
      IF WarehouseRequest.FINDSET(FALSE) THEN BEGIN
        REPEAT
          IF CheckIfCreateOutboundWhseRequest(WarehouseRequest."Location Code") THEN BEGIN
            SalesShipmentLine.RESET;
            SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHeader."No.");
            SalesShipmentLine.SETRANGE("Order No.",SalesShipmentHeader."Order No.");
            SalesShipmentLine.SETRANGE("Location Code",WarehouseRequest."Location Code");
            SalesShipmentLine.SETFILTER(Quantity,'<>0');
            IF SalesShipmentLine.FINDFIRST THEN BEGIN
              PostSalesShptWhseProcessing(SalesHeader,SalesShipmentHeader,WarehouseRequest."Location Code");
              PostWhseProcessing(
                WarehouseRequest."Location Code",WarehouseRequest."Source No.",
                WarehouseRequest."Source Type",WarehouseRequest."Source Subtype");
            END;
          END ELSE BEGIN
            PostWhseProcessing(
              WarehouseRequest."Location Code",WarehouseRequest."Source No.",
              WarehouseRequest."Source Type",WarehouseRequest."Source Subtype");
          END;
        UNTIL WarehouseRequest.NEXT = 0;
      END ELSE BEGIN
        SalesShipmentLine.RESET;
        SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHeader."No.");
        SalesShipmentLine.SETRANGE("Order No.",SalesShipmentHeader."Order No.");
        SalesShipmentLine.SETFILTER("Location Code",'<>%1',SalesShipmentHeader."Location Code");
        SalesShipmentLine.SETFILTER(Quantity,'<>0');
        IF SalesShipmentLine.FIND('-') THEN BEGIN // Sales Shipment Line is for multiple locations:
          SalesShipmentLine2.RESET;
          SalesShipmentLine2.SETRANGE("Document No.",SalesShipmentHeader."No.");
          SalesShipmentLine2.SETRANGE("Order No.",SalesShipmentHeader."Order No.");
          SalesShipmentLine2.SETFILTER(Quantity,'<>0');
          IF SalesShipmentLine2.FINDSET(FALSE) THEN BEGIN
            SalesShipmentLineTmp.RESET;
            SalesShipmentLineTmp.DELETEALL;
            REPEAT
              SalesShipmentLineTmp.RESET;
              SalesShipmentLineTmp.SETRANGE("Document No.",SalesShipmentLine2."Document No.");
              SalesShipmentLineTmp.SETRANGE("Order No.",SalesShipmentLine2."Order No.");
              SalesShipmentLineTmp.SETRANGE("Location Code",SalesShipmentLine2."Location Code");
              IF NOT SalesShipmentLineTmp.FIND('-') THEN BEGIN
                SalesShipmentLineTmp.INIT;
                SalesShipmentLineTmp := SalesShipmentLine2;
                SalesShipmentLineTmp.INSERT;
              END;
            UNTIL SalesShipmentLine2.NEXT = 0;

            SalesShipmentLineTmp.RESET;
            SalesShipmentLineTmp.SETRANGE("Document No.",SalesShipmentLine2."Document No.");
            SalesShipmentLineTmp.SETRANGE("Order No.",SalesShipmentLine2."Order No.");
            IF SalesShipmentLineTmp.FINDSET(FALSE) THEN
              REPEAT
                IF CheckIfCreateOutboundWhseRequest(SalesShipmentLineTmp."Location Code") THEN
                  PostSalesShptWhseProcessing(SalesHeader,SalesShipmentHeader,SalesShipmentLineTmp."Location Code");

                PostWhseProcessing(
                  SalesShipmentLineTmp."Location Code",SalesHeader."No.",
                  DATABASE::"Sales Line",SalesHeader."Document Type");
              UNTIL SalesShipmentLineTmp.NEXT = 0;

            SalesShipmentLineTmp.RESET;
            SalesShipmentLineTmp.DELETEALL;
          END;
        END ELSE BEGIN // Sales Shipment Line is for a single location:
          IF CheckIfCreateOutboundWhseRequest(SalesShipmentHeader."Location Code") THEN BEGIN
            SalesShipmentLine2.RESET;
            SalesShipmentLine2.SETRANGE("Document No.",SalesShipmentHeader."No.");
            SalesShipmentLine2.SETRANGE("Order No.",SalesShipmentHeader."Order No.");
            SalesShipmentLine2.SETRANGE("Location Code",SalesShipmentHeader."Location Code");
            SalesShipmentLine2.SETFILTER(Quantity,'<>0');
            IF SalesShipmentLine2.FINDFIRST THEN BEGIN
              PostSalesShptWhseProcessing(SalesHeader,SalesShipmentHeader,SalesShipmentHeader."Location Code");
              PostWhseProcessing(
                SalesShipmentHeader."Location Code",SalesHeader."No.",
                DATABASE::"Sales Line",SalesHeader."Document Type");
            END;
          END ELSE BEGIN
            PostWhseProcessing(
              SalesShipmentHeader."Location Code",SalesHeader."No.",
              DATABASE::"Sales Line",SalesHeader."Document Type");
          END;
        END;
      END;
    END;

    [EventSubscriber(Codeunit,90,OnAfterFinalizePosting)]
    LOCAL PROCEDURE "PurchPost-OnAfterFinalizePosting"@1240020036(VAR PurchHeader@1240020000 : Record 38;VAR PurchRcptHeader@1240020001 : Record 120;VAR PurchInvHeader@1240020002 : Record 122;VAR PurchCrMemoHdr@1240020003 : Record 124;VAR ReturnShptHeader@1240020004 : Record 6650;VAR GenJnlPostLine@1240020005 : Codeunit 12);
    VAR
      ReturnShptLine@1240020006 : Record 6651;
      ReturnShptLine2@1240020008 : Record 6651;
      ReturnShptLineTmp@1240020009 : TEMPORARY Record 6651;
      WarehouseRequest@1240020007 : Record 5765;
    BEGIN
      //<CU90> Purch.-Post - OnAfterFinalizePostingEvent
      WarehouseRequest.RESET;
      WarehouseRequest.SETRANGE("Source No.",PurchHeader."No.");
      WarehouseRequest.SETRANGE("Source Type",DATABASE::"Purchase Line");
      WarehouseRequest.SETRANGE("Source Subtype",PurchHeader."Document Type");
      WarehouseRequest.SETRANGE(Type,WarehouseRequest.Type::Outbound);
      IF WarehouseRequest.FINDSET(FALSE) THEN BEGIN
        REPEAT
          IF CheckIfCreateOutboundWhseRequest(WarehouseRequest."Location Code") THEN BEGIN
            ReturnShptLine.RESET;
            ReturnShptLine.SETRANGE("Document No.",ReturnShptHeader."No.");
            ReturnShptLine.SETRANGE("Return Order No.",ReturnShptHeader."Return Order No.");
            ReturnShptLine.SETRANGE("Location Code",WarehouseRequest."Location Code");
            ReturnShptLine.SETFILTER(Quantity,'<>0');
            IF ReturnShptLine.FINDFIRST THEN BEGIN
              PostPurchShptWhseProcessing(PurchHeader,ReturnShptHeader,WarehouseRequest."Location Code");
              PostWhseProcessing(
                WarehouseRequest."Location Code",WarehouseRequest."Source No.",
                WarehouseRequest."Source Type",WarehouseRequest."Source Subtype");
            END;
          END ELSE BEGIN
            PostWhseProcessing(
              WarehouseRequest."Location Code",WarehouseRequest."Source No.",
              WarehouseRequest."Source Type",WarehouseRequest."Source Subtype");
          END;
        UNTIL WarehouseRequest.NEXT = 0;
      END ELSE BEGIN
        ReturnShptLine.RESET;
        ReturnShptLine.SETRANGE("Document No.",ReturnShptHeader."No.");
        ReturnShptLine.SETRANGE("Return Order No.",ReturnShptHeader."Return Order No.");
        ReturnShptLine.SETFILTER("Location Code",'<>%1',ReturnShptHeader."Location Code");
        ReturnShptLine.SETFILTER(Quantity,'<>0');
        IF ReturnShptLine.FIND('-') THEN BEGIN // Return Shipment Line is for multiple locations:
          ReturnShptLine2.RESET;
          ReturnShptLine2.SETRANGE("Document No.",ReturnShptHeader."No.");
          ReturnShptLine2.SETRANGE("Return Order No.",ReturnShptHeader."Return Order No.");
          ReturnShptLine2.SETFILTER(Quantity,'<>0');
          IF ReturnShptLine2.FINDSET(FALSE) THEN BEGIN
            ReturnShptLineTmp.RESET;
            ReturnShptLineTmp.DELETEALL;
            REPEAT
              ReturnShptLineTmp.RESET;
              ReturnShptLineTmp.SETRANGE("Document No.",ReturnShptLine2."Document No.");
              ReturnShptLineTmp.SETRANGE("Return Order No.",ReturnShptLine2."Return Order No.");
              ReturnShptLineTmp.SETRANGE("Location Code",ReturnShptLine2."Location Code");
              IF NOT ReturnShptLineTmp.FIND('-') THEN BEGIN
                ReturnShptLineTmp.INIT;
                ReturnShptLineTmp := ReturnShptLine2;
                ReturnShptLineTmp.INSERT;
              END;
            UNTIL ReturnShptLine2.NEXT = 0;

            ReturnShptLineTmp.RESET;
            ReturnShptLineTmp.SETRANGE("Document No.",ReturnShptLine2."Document No.");
            ReturnShptLineTmp.SETRANGE("Return Order No.",ReturnShptLine2."Return Order No.");
            IF ReturnShptLineTmp.FINDSET(FALSE) THEN
              REPEAT
                IF CheckIfCreateOutboundWhseRequest(ReturnShptLineTmp."Location Code") THEN
                  PostPurchShptWhseProcessing(PurchHeader,ReturnShptHeader,ReturnShptLineTmp."Location Code");

                PostWhseProcessing(
                  ReturnShptLineTmp."Location Code",PurchHeader."No.",
                  DATABASE::"Purchase Line",PurchHeader."Document Type");
              UNTIL ReturnShptLineTmp.NEXT = 0;

            ReturnShptLineTmp.RESET;
            ReturnShptLineTmp.DELETEALL;
          END;
        END ELSE BEGIN // Return Shipment Line is for a single location:
          IF CheckIfCreateOutboundWhseRequest(ReturnShptHeader."Location Code") THEN BEGIN
            ReturnShptLine2.RESET;
            ReturnShptLine2.SETRANGE("Document No.",ReturnShptHeader."No.");
            ReturnShptLine2.SETRANGE("Return Order No.",ReturnShptHeader."Return Order No.");
            ReturnShptLine2.SETRANGE("Location Code",ReturnShptHeader."Location Code");
            ReturnShptLine2.SETFILTER(Quantity,'<>0');
            IF ReturnShptLine2.FINDFIRST THEN BEGIN
              PostPurchShptWhseProcessing(PurchHeader,ReturnShptHeader,ReturnShptHeader."Location Code");
              PostWhseProcessing(
                ReturnShptHeader."Location Code",PurchHeader."No.",
                DATABASE::"Purchase Line",PurchHeader."Document Type");
            END;
          END ELSE BEGIN
            PostWhseProcessing(
              ReturnShptHeader."Location Code",PurchHeader."No.",
              DATABASE::"Purchase Line",PurchHeader."Document Type");
          END;
        END;
      END;
    END;

    [EventSubscriber(Codeunit,5704,OnAfterTransferOrderPostShipment)]
    LOCAL PROCEDURE "TransOrderPostShip-OnAfterTransferOrderPostShipment"@1240020037(VAR TransferHeader@1240020000 : Record 5740);
    VAR
      TransferHeader2@1240020003 : Record 5740;
    BEGIN
      //<CU5704> TransferOrder-PostShipment - OnAfterTransferOrderPostShipmentEvent
      TransferHeader2.RESET;
      IF TransferHeader2.GET(TransferHeader."No.") THEN BEGIN
        IF CheckIfCreateOutboundWhseRequest(TransferHeader2."Transfer-from Code") THEN
          PostTransShptWhseProcessing(TransferHeader2,TransferHeader2."Transfer-from Code");

        PostWhseProcessing(
          TransferHeader2."Transfer-from Code",TransferHeader2."No.",
          DATABASE::"Transfer Line",0);
      END;
    END;

    [EventSubscriber(Codeunit,5771,OnBeforeCreateWhseRequest)]
    LOCAL PROCEDURE "WhseSalesRelease-OnBeforeCreateWhseRequest"@1240020028(VAR WhseRqst@1240020000 : Record 5765;SalesHeader@1240020001 : Record 36;SalesLine@1240020002 : Record 37);
    VAR
      RFSetup@1240020006 : Record 14002801;
      OutboundWhseRequestMgt@1240020004 : Codeunit 14002863;
      AssemblyOrderNo@1240020003 : Code[20];
      EShipAgentService@1240020007 : Code[30];
      ShipForCode@1240020008 : Code[20];
      EDIOrder@1240020009 : Boolean;
    BEGIN
      //<CU5771> Whse.-Sales Release - OnBeforeCreateWhseRequestEvent
      RFSetup.GetRFSetup;
      IF RFSetup."Enable OWR" THEN BEGIN
        IF RFSetup."Copy EShip fields to OWR" THEN BEGIN
          GetEShipFieldsEvent(SalesHeader,EShipAgentService,ShipForCode,EDIOrder);
          WhseRqst."E-Ship Agent Service" := EShipAgentService;
          WhseRqst."Ship-for Code" := ShipForCode;
          WhseRqst."EDI Order" := EDIOrder;
        END;

        SetWhseRqstFields(SalesHeader,WhseRqst);

        IF RFSetup.GetFirstAssemblyOrderNo(WhseRqst,AssemblyOrderNo) THEN BEGIN
          WhseRqst."First Assembly Order No." := AssemblyOrderNo;
          WhseRqst."ATO Pick Required" := TRUE;
        END;

        OutboundWhseRequestMgt.UpdateWarehouseRequest(WhseRqst);
      END;
    END;

    [EventSubscriber(Codeunit,5772,OnBeforeCreateWhseRequest)]
    LOCAL PROCEDURE "WhsePurchRelease-OnBeforeCreateWhseRequest"@1240020029(VAR WhseRqst@1240020000 : Record 5765;PurchHeader@1240020001 : Record 38;PurchLine@1240020002 : Record 39);
    VAR
      RFSetup@1240020004 : Record 14002801;
      OutboundWhseRequestMgt@1240020003 : Codeunit 14002863;
    BEGIN
      //<CU5772> Whse.-Purch. Release - OnBeforeCreateWhseRequestEvent
      RFSetup.GetRFSetup;
      IF RFSetup."Enable OWR" THEN
        OutboundWhseRequestMgt.UpdateWarehouseRequest(WhseRqst);
    END;

    [EventSubscriber(Codeunit,5773,OnBeforeCreateWhseRequest)]
    LOCAL PROCEDURE "WhseTransferRelease-OnBeforeCreateWhseRequest"@1240020030(VAR WarehouseRequest@1240020000 : Record 5765;TransferHeader@1240020001 : Record 5740);
    VAR
      RFSetup@1240020004 : Record 14002801;
      OutboundWhseRequestMgt@1240020002 : Codeunit 14002863;
    BEGIN
      //<CU5773> Whse.-Transfer Release - OnBeforeCreateWhseRequestEvent
      RFSetup.GetRFSetup;
      IF RFSetup."Enable OWR" THEN
        OutboundWhseRequestMgt.UpdateWarehouseRequest(WarehouseRequest);
    END;

    [EventSubscriber(Codeunit,414,OnAfterReleaseSalesDoc)]
    LOCAL PROCEDURE "ReleaseSalesDocument-OnAfterReleaseSalesDoc"@1240020111(VAR SalesHeader@1240020000 : Record 36;PreviewMode@1240020001 : Boolean;LinesWereModified@1240020002 : Boolean);
    VAR
      Location@1240020003 : Record 14;
      OWRLocationSetup@1240020004 : Record 14099030;
      WhseRqst@1240020005 : Record 5765;
      SalesLine@1240020006 : Record 37;
      First@1240020007 : Boolean;
      OldLocationCode@1240020008 : Code[10];
      WhseType@1240020009 : 'Inbound,Outbound';
      OldWhseType@1240020010 : 'Inbound,Outbound';
    BEGIN
      //<CU414> Release Sales Document - OnAfterReleaseSalesDoc Event
      WITH SalesHeader DO BEGIN
        CASE "Document Type" OF
          "Document Type"::Order:
            WhseRqst."Source Document" := WhseRqst."Source Document"::"Sales Order";
          ELSE
            EXIT;
        END;

        SalesLine.SETCURRENTKEY("Document Type","Document No.","Location Code");
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETRANGE(Type,SalesLine.Type::Item);
        SalesLine.SETRANGE("Drop Shipment",FALSE);
        SalesLine.SETRANGE("Job No.",'');
        IF SalesLine.FINDSET THEN BEGIN
          First := TRUE;
          REPEAT
            IF Location.GET(SalesLine."Location Code") THEN
              IF CheckIfCreateOutboundWhseRequest(Location.Code) THEN BEGIN
                WhseType := WhseType::Outbound;

                IF First OR (SalesLine."Location Code" <> OldLocationCode) OR (WhseType <> OldWhseType) THEN
                  CreateSalesWhseRqst(SalesHeader,SalesLine,WhseType);

                First := FALSE;
                OldLocationCode := SalesLine."Location Code";
                OldWhseType := WhseType;
              END;
          UNTIL SalesLine.NEXT = 0;
        END;

        WhseRqst.RESET;
        WhseRqst.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
        WhseRqst.SETRANGE(Type,WhseRqst.Type);
        WhseRqst.SETRANGE("Source Type",DATABASE::"Sales Line");
        WhseRqst.SETRANGE("Source Subtype","Document Type");
        WhseRqst.SETRANGE("Source No.","No.");
        WhseRqst.SETRANGE("Document Status",Status::Open);
        IF NOT WhseRqst.ISEMPTY THEN
          WhseRqst.DELETEALL(TRUE);
      END;
    END;

    [EventSubscriber(Codeunit,415,OnAfterReleasePurchaseDoc)]
    LOCAL PROCEDURE "ReleasePurchaseDocument-OnAfterReleasePurchaseDoc"@1240020112(VAR PurchaseHeader@1240020000 : Record 38;PreviewMode@1240020001 : Boolean;LinesWereModified@1240020002 : Boolean);
    VAR
      Location@1240020010 : Record 14;
      OWRLocationSetup@1240020009 : Record 14099030;
      WhseRqst@1240020008 : Record 5765;
      PurchLine@1240020007 : Record 39;
      First@1240020006 : Boolean;
      OldLocationCode@1240020005 : Code[10];
      WhseType@1240020004 : 'Inbound,Outbound';
      OldWhseType@1240020003 : 'Inbound,Outbound';
    BEGIN
      //<CU415> Release Purchase Document - OnAfterReleasePurchaseDoc Event
      WITH PurchaseHeader DO BEGIN
        CASE "Document Type" OF
          "Document Type"::"Return Order":
            WhseRqst."Source Document" := WhseRqst."Source Document"::"Purchase Return Order";
          ELSE
            EXIT;
        END;

        PurchLine.SETCURRENTKEY("Document Type","Document No.","Location Code");
        PurchLine.SETRANGE("Document Type","Document Type");
        PurchLine.SETRANGE("Document No.","No.");
        PurchLine.SETRANGE(Type,PurchLine.Type::Item);
        PurchLine.SETRANGE("Drop Shipment",FALSE);
        PurchLine.SETRANGE("Job No.",'');
        PurchLine.SETRANGE("Work Center No.",'');
        IF PurchLine.FIND('-') THEN BEGIN
          First := TRUE;
          REPEAT
            IF Location.GET(PurchLine."Location Code") THEN
              IF CheckIfCreateOutboundWhseRequest(Location.Code) THEN BEGIN
                WhseType := WhseType::Outbound;

                IF First OR (PurchLine."Location Code" <> OldLocationCode) OR (WhseType <> OldWhseType) THEN
                  CreatePurchWhseRqst(PurchaseHeader,PurchLine,WhseType);

                First := FALSE;
                OldLocationCode := PurchLine."Location Code";
                OldWhseType := WhseType;
              END;
          UNTIL PurchLine.NEXT = 0;
        END;

        WhseRqst.RESET;
        WhseRqst.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
        WhseRqst.SETRANGE(Type,WhseRqst.Type);
        WhseRqst.SETRANGE("Source Type",DATABASE::"Purchase Line");
        WhseRqst.SETRANGE("Source Subtype",PurchaseHeader."Document Type");
        WhseRqst.SETRANGE("Source No.",PurchaseHeader."No.");
        WhseRqst.SETRANGE("Document Status",WhseRqst."Document Status"::Open);
        IF NOT WhseRqst.ISEMPTY THEN
          WhseRqst.DELETEALL(TRUE);
      END;
    END;

    [EventSubscriber(Codeunit,5708,OnAfterReleaseTransferDoc)]
    LOCAL PROCEDURE "ReleaseTransferDocument-OnAfterReleaseTransferDoc"@1240020114(VAR TransferHeader@1240020000 : Record 5740);
    VAR
      Location@1240020001 : Record 14;
      OWRLocationSetup@1240020002 : Record 14099030;
    BEGIN
      //<CU5708> Release Transfer Document - OnAfterReleaseTransferDoc Event
      WITH TransferHeader DO BEGIN
        IF Location.GET(TransferHeader."Transfer-from Code") THEN
          IF CheckIfCreateOutboundWhseRequest(Location.Code) THEN
            CreateTransWhseRqst(TransferHeader);
      END;
    END;

    [EventSubscriber(Codeunit,14002863,OnBeforeDeletePick)]
    LOCAL PROCEDURE "OWRMgt-OnBeforeDeletePick"@1240020012(VAR WarehouseActivityLine2@1240020000 : Record 5767;VAR PickInProgress@1240020001 : Boolean);
    BEGIN
      //<CU14002863> Outbound Whse. Request Mgt. - OnBeforeDeletePick Event
      PickInProgress := FALSE;
      IF WarehouseActivityLine2."First Scan Date" <> 0D THEN
        PickInProgress := TRUE;
    END;

    [Integration]
    [External]
    PROCEDURE OnBeforePostWhseProcessing@1240020013(LocationCode@1240020003 : Code[10];SourceNo@1240020002 : Code[20];SourceType@1240020001 : Integer;SourceSubtype@1240020000 : Integer);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnAfterPostWhseProcessing@1240020009(LocationCode@1240020003 : Code[10];SourceNo@1240020002 : Code[20];SourceType@1240020001 : Integer;SourceSubtype@1240020000 : Integer);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE GetEShipFieldsEvent@1240020126(VAR SalesHeader@1240020003 : Record 36;VAR EShipAgentService@1240020002 : Code[30];VAR ShipForCode@1240020001 : Code[20];VAR EDIOrder@1240020000 : Boolean);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OpenFastPackEvent@1240020121(VAR WarehouseRequest@1240020000 : Record 5765);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE PostSalesShptWhseProcessing@1240020102(VAR SalesHeader@1240020002 : Record 36;VAR SalesShipmentHeader@1240020001 : Record 110;VAR LocationCode@1240020000 : Code[10]);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE PostPurchShptWhseProcessing@1240020118(VAR PurchHeader@1240020002 : Record 38;VAR ReturnShptHeader@1240020001 : Record 6650;VAR LocationCode@1240020000 : Code[10]);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE PostTransShptWhseProcessing@1240020125(VAR TransferHeader@1240020001 : Record 5740;VAR LocationCode@1240020000 : Code[10]);
    BEGIN
    END;

    PROCEDURE ACEOneActivated@1170000000(LocationCode@1240020000 : Code[10]) : Boolean;
    VAR
      Location@1240020001 : Record 14;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location."Use ACE One WMS");
    END;

    BEGIN
    END.
  }
}

