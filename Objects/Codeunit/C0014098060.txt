OBJECT Codeunit 14098060 AFP Chart
{
  OBJECT-PROPERTIES
  {
    Date=11/01/20;
    Time=12:00:00 PM;
    Version List=UBP3.03;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE GetInventoryValueData@1(VAR CurrBusinessChartBuffer@1000 : Record 485;CurrLocationFilter@1005 : Code[250]);
    VAR
      ForInvPer@1003 : Record 14000552;
      InventoryValue@1001 : Record 14097463;
      InvMgtSetup@1006 : Record 14000551;
      Days@1004 : Integer;
      i@1002 : Integer;
      StartDate@1007 : Date;
      Good@1240020000 : Decimal;
      Surplus@1240020001 : Decimal;
      Excess@1240020002 : Decimal;
      Month@1240020006 : Integer;
      Year@1240020005 : Integer;
      MonthTxt@1240020004 : Text[10];
      YearTxt@1240020003 : Text[10];
      PrevDate@1240020007 : Date;
    BEGIN
      CurrBusinessChartBuffer.Initialize;
      CurrBusinessChartBuffer.AddMeasure(
        'Good',1,CurrBusinessChartBuffer."Data Type"::Decimal,CurrBusinessChartBuffer."Chart Type"::StackedColumn);
      CurrBusinessChartBuffer.AddMeasure(
        'Surplus',2,CurrBusinessChartBuffer."Data Type"::Decimal,CurrBusinessChartBuffer."Chart Type"::StackedColumn);
      CurrBusinessChartBuffer.AddMeasure(
        'Excess',3,CurrBusinessChartBuffer."Data Type"::Decimal,CurrBusinessChartBuffer."Chart Type"::StackedColumn);

      CurrBusinessChartBuffer.SetXAxis(
        'Date',CurrBusinessChartBuffer."Data Type"::String);

      i := 0;

      InvMgtSetup.GET;

      StartDate := InvMgtSetup."Usage Start Date";

      // Show newer Usage Start or Calculated
      InventoryValue.RESET;
      InventoryValue.SETCURRENTKEY("Calculated Date");
      IF CurrLocationFilter <> '' THEN
        InventoryValue.SETFILTER("Location Code",CurrLocationFilter);
      IF InventoryValue.FINDFIRST THEN
        IF InventoryValue."Calculated Date" > StartDate THEN
          StartDate := CALCDATE('<-CM>', InventoryValue."Calculated Date");

      // Show Max 13 Months
      IF StartDate < CALCDATE('<-1Y>', WORKDATE) THEN
        StartDate := CALCDATE('<-1Y-CM>', WORKDATE);
      ForInvPer.RESET;
      ForInvPer.SETRANGE(Type,ForInvPer.Type::" ");
      ForInvPer.SETFILTER("Starting Date",'%1..',StartDate);
      IF ForInvPer.FINDSET THEN
        REPEAT
          IF (ForInvPer."Starting Date" <= WORKDATE) THEN BEGIN
            IF ForInvPer."Ending Date" > WORKDATE THEN
              InventoryValue.SETFILTER("Calculated Date",'%1..%2',ForInvPer."Starting Date", WORKDATE)
            ELSE
            InventoryValue.SETFILTER("Calculated Date",'%1..%2',ForInvPer."Starting Date",ForInvPer."Ending Date");
            Good := 0;
            Surplus := 0;
            Excess := 0;
            Days := 0;
            PrevDate := 0D;
            IF InventoryValue.FINDSET() THEN BEGIN
              REPEAT
                IF PrevDate <> InventoryValue."Calculated Date" THEN
                  Days += 1;
                Good := Good + InventoryValue."Good Cost";
                Surplus := Surplus + InventoryValue."Surplus Cost";
                Excess := Excess + InventoryValue."Excess Cost";
                PrevDate := InventoryValue."Calculated Date";
              UNTIL (InventoryValue.NEXT) = 0;
            END;
            Month := DATE2DMY(ForInvPer."Starting Date",2);
            IF Month < 10 THEN
             MonthTxt := '0' + FORMAT(Month)
            ELSE
             MonthTxt := FORMAT(Month);

            Year := DATE2DMY(ForInvPer."Starting Date",3);
            IF Year < 2000 THEN
             Year := Year + 2000;
            YearTxt := FORMAT(Year);
            CurrBusinessChartBuffer.AddColumn(MonthTxt + '/' + YearTxt);

            IF Days > 0 THEN BEGIN
              CurrBusinessChartBuffer.SetValue('Good',i,Good / Days);
              CurrBusinessChartBuffer.SetValue('Surplus',i,Surplus / Days);
              CurrBusinessChartBuffer.SetValue('Excess',i,Excess / Days);
            END ELSE BEGIN
              CurrBusinessChartBuffer.SetValue('Good', i, 0);
              CurrBusinessChartBuffer.SetValue('Surplus',i, 0);
              CurrBusinessChartBuffer.SetValue('Excess',i, 0);
            END;
            i := i + 1;
          END;
        UNTIL (ForInvPer."Starting Date" > WORKDATE) OR
              (ForInvPer.NEXT = 0);
    END;

    PROCEDURE GetForecastData@2(VAR CurrBusinessChartBuffer@1000 : Record 485;LocCode@1240020005 : Code[10];ItemNo@1240020006 : Code[50];VariantCode@1240020007 : Code[10]);
    VAR
      AdvForSetup@1006 : Record 14002651;
      Location@1004 : Record 14;
      ProcUnit@1002 : Record 14000555;
      Forecast@1001 : Codeunit 14000567;
      i@1007 : Integer;
      UBP@1003 : Codeunit 14000564;
      Text000@1005 : TextConst 'ENU=Location %1 not enabled for Forecasting';
      txtStatistical@1240020000 : TextConst 'ENU=Statistical';
      txtAdjustments@1240020001 : TextConst 'ENU=Adjustments';
      txtCollaborative@1240020002 : TextConst 'ENU=Collaborative';
      txtPriorYear@1240020003 : TextConst 'ENU=PriorYear';
      txtDate@1240020004 : TextConst 'ENU=Date';
    BEGIN
      IF NOT ProcUnit.GET(LocCode,ItemNo,VariantCode) THEN
        EXIT;

      CLEAR(Forecast);
      Location.GET(ProcUnit."Location Code");
      IF (NOT Location."Enable Adv. Forecasting") AND
         (NOT Location."Enable Cust. Forecasting") THEN
        ERROR(STRSUBSTNO(Text000,Location.Code));

      AdvForSetup.GET;

      Forecast.CalcPeriodStartingDates(Location, AdvForSetup."Periods to Forecast");
      Forecast.CalcForecast(ProcUnit, AdvForSetup."Periods to Forecast",'',TRUE,TRUE);
      Forecast.CalcForecastAdj(ProcUnit,AdvForSetup."Periods to Forecast");
      Forecast.CalcCustForecast(ProcUnit,AdvForSetup."Periods to Forecast");
      Forecast.CalcPriorYear(ProcUnit, AdvForSetup."Periods to Forecast");
      Forecast.LoadForCalcPeriods;

      CurrBusinessChartBuffer.Initialize;
      CurrBusinessChartBuffer.AddMeasure(
        txtStatistical,1,CurrBusinessChartBuffer."Data Type"::Decimal,CurrBusinessChartBuffer."Chart Type"::StackedColumn);
      CurrBusinessChartBuffer.AddMeasure(
        txtAdjustments,2,CurrBusinessChartBuffer."Data Type"::Decimal,CurrBusinessChartBuffer."Chart Type"::StackedColumn);
      CurrBusinessChartBuffer.AddMeasure(
        txtCollaborative,3,CurrBusinessChartBuffer."Data Type"::Decimal,CurrBusinessChartBuffer."Chart Type"::StackedColumn);
      CurrBusinessChartBuffer.AddMeasure(
        txtPriorYear,4,CurrBusinessChartBuffer."Data Type"::Decimal,CurrBusinessChartBuffer."Chart Type"::Line);

      CurrBusinessChartBuffer.SetXAxis(
        txtDate,CurrBusinessChartBuffer."Data Type"::String);

      i := 0;
      REPEAT
        CurrBusinessChartBuffer.AddColumn(
          FORMAT((Forecast.GetPeriodStartingDate(i + 1))));
        //CurrBusinessChartBuffer.AddColumn(
          //FORMAT(DATE2DMY(Forecast.GetPeriodStartingDate(i + 1),2)) + '/' +
          //COPYSTR(FORMAT(DATE2DMY(Forecast.GetPeriodStartingDate(i + 1),3)),3,2));
        CurrBusinessChartBuffer.SetValue(txtStatistical,i,Forecast.GetPeriodForecastUsage(i + 1));
        CurrBusinessChartBuffer.SetValue(txtAdjustments,i,Forecast.GetForecastAdj(i + 1));
        CurrBusinessChartBuffer.SetValue(txtCollaborative,i,Forecast.GetCustForecastUsage(i + 1));
        CurrBusinessChartBuffer.SetValue(txtPriorYear,i,Forecast.GetPriorYear(i + 1));
        i := i + 1;
      UNTIL i + 1 = AdvForSetup."Periods to Forecast";
    END;

    PROCEDURE GetSurplusInventoryData@3(VAR CurrBusinessChartBuffer@1003 : Record 485);
    VAR
      Location@1004 : Record 14;
      SurpInvValue@1001 : Record 14000584;
      i@1005 : Integer;
    BEGIN
      CurrBusinessChartBuffer.Initialize;
      CurrBusinessChartBuffer.AddMeasure(
        'Good',1,CurrBusinessChartBuffer."Data Type"::Decimal,CurrBusinessChartBuffer."Chart Type"::StackedColumn);
      CurrBusinessChartBuffer.AddMeasure(
        'Surplus',2,CurrBusinessChartBuffer."Data Type"::Decimal,CurrBusinessChartBuffer."Chart Type"::StackedColumn);
      CurrBusinessChartBuffer.AddMeasure(
        'Excess',3,CurrBusinessChartBuffer."Data Type"::Decimal,CurrBusinessChartBuffer."Chart Type"::StackedColumn);

      CurrBusinessChartBuffer.SetXAxis(
        'Value',CurrBusinessChartBuffer."Data Type"::String);

      i := 0;
      Location.RESET;
      Location.SETRANGE("Enable Adv. Forecasting",TRUE);
      IF Location.FINDSET THEN
        REPEAT
          SurpInvValue.RESET;
          SurpInvValue.SETRANGE("Location Code",Location.Code);

          SurpInvValue.CALCSUMS("Good Amount");
          CurrBusinessChartBuffer.AddColumn(Location.Code);
          CurrBusinessChartBuffer.SetValue('Good',i,SurpInvValue."Good Amount");

          SurpInvValue.CALCSUMS("Surplus Amount");
          CurrBusinessChartBuffer.SetValue('Surplus',i,SurpInvValue."Surplus Amount");

          SurpInvValue.CALCSUMS("Excess Amount");
          CurrBusinessChartBuffer.SetValue('Excess',i,SurpInvValue."Excess Amount");

          i := i + 1;
        UNTIL Location.NEXT = 0;
    END;

    PROCEDURE DrillDownInventoryValueData@1240020000(VAR CurrBusinessChartBuffer@1240020000 : Record 485;LocationFilter@1240020005 : Text[250]);
    VAR
      XDrillDownFilter@1240020004 : Text[1000];
      CurrVariant@1240020002 : Variant;
      InventoryValue@1240020003 : Record 14097463;
      Month@1240020006 : Integer;
      Year@1240020007 : Integer;
      MonthTxt@1240020009 : Text[10];
      YearTxt@1240020008 : Text[10];
      InvMgtSetup@1240020010 : Record 14000551;
    BEGIN
      CLEAR(CurrVariant);
      XDrillDownFilter := '';
      CurrBusinessChartBuffer.GetXValue(CurrBusinessChartBuffer."Drill-Down X Index", CurrVariant);
      IF NOT EVALUATE(XDrillDownFilter, CurrVariant) THEN
        EXIT;
      MonthTxt := COPYSTR(XDrillDownFilter, 1, 2);
      IF NOT EVALUATE(Month, MonthTxt) THEN;

      YearTxt := COPYSTR(XDrillDownFilter, 4, 4);
      IF EVALUATE(Year, YearTxt) THEN;

      InventoryValue.SETFILTER("Location Code", LocationFilter);
      IF (Month > 0) AND (Year > 0) THEN
        InventoryValue.SETRANGE("Calculated Date", DMY2DATE(1,Month,Year), CALCDATE('<+CM>', DMY2DATE(1,Month,Year)));
      PAGE.RUNMODAL(0, InventoryValue)
    END;

    PROCEDURE DrillDownSurplusInventoryData@1240020001(VAR CurrBusinessChartBuffer@1240020000 : Record 485);
    VAR
      XDrillDownFilter@1240020004 : Text[1000];
      CurrVariant@1240020002 : Variant;
      SurplusInventoryValue@1240020003 : Record 14000584;
    BEGIN
      CLEAR(CurrVariant);
      XDrillDownFilter := '';
      CurrBusinessChartBuffer.GetXValue(CurrBusinessChartBuffer."Drill-Down X Index", CurrVariant);
      IF NOT EVALUATE(XDrillDownFilter, CurrVariant) THEN
        EXIT;
      SurplusInventoryValue.SETFILTER("Location Code", XDrillDownFilter);
      PAGE.RUNMODAL(14000543, SurplusInventoryValue);
    END;

    BEGIN
    END.
  }
}

