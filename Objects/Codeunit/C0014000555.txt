OBJECT Codeunit 14000555 Day End Calculation
{
  OBJECT-PROPERTIES
  {
    Date=07/01/18;
    Time=12:00:00 PM;
    Version List=UBP2.99;
  }
  PROPERTIES
  {
    TableNo=14;
    OnRun=VAR
            Location2@14000500 : Record 14;
            RecordStockOut@1240020000 : Boolean;
            SkipCheckItemUsage@1240020001 : Boolean;
            CloseDayEnd@1240020002 : Boolean;
          BEGIN
            InvMgt.CreateLogEntry(Code,Text000,UBPLogEntryNo);
            COMMIT;

            Location2.GET(Rec.Code);

            InvMgtSetup.GET;

            InvtLocationPeriod.RESET;
            InvtLocationPeriod.SETCURRENTKEY("Location Code","Starting Date","Period End Closed");
            InvtLocationPeriod.SETRANGE("Location Code",Location2.Code);
            InvtLocationPeriod.SETFILTER("Starting Date",'%1..',InvMgtSetup."Usage Start Date");
            InvtLocationPeriod.SETRANGE("Period End Closed",FALSE);
            InvtLocationPeriod.SETRANGE("Day End Closed",FALSE);
            IF NOT InvtLocationPeriod.FIND('-') THEN BEGIN
              InvMgt.CloseLogEntry(UBPLogEntryNo,'');
              EXIT;
            END;

            IF GUIALLOWED THEN BEGIN
              Window.OPEN(
                Text000 + '\' +
                PADSTR(Text001,15) + '#1##################\' +
                PADSTR(Text002,15) + '#2##########\' +
                PADSTR(Text003,15) + '@3@@@@@@@@@@@@@@@@@@');
              Window.UPDATE(1,Location2.Code);
            END;

            ItemUsage.LOCKTABLE;
            IF ItemUsage.FINDLAST THEN
              NextEntryNo := ItemUsage."Entry No." + 1
            ELSE
              NextEntryNo := 1;

            REPEAT
              SkipCheckItemUsage := TRUE;
              CloseDayEnd := FALSE;
              RecordStockOut := InvMgtSetup."Day End Required";
              IF InvtLocationPeriod."Last Day End Date" = 0D THEN
                DayEndDate := InvtLocationPeriod."Starting Date"
              ELSE
                DayEndDate := CALCDATE('<+1D>',InvtLocationPeriod."Last Day End Date");

              IF DayEndDate > WORKDATE THEN
                DayEndDate := WORKDATE;
              IF DayEndDate < WORKDATE THEN
                CloseDayEnd := TRUE;

              // record stock out on current day
              IF (DayEndDate = WORKDATE) THEN BEGIN
                IF (InvMgtSetup."Current Day End Start Time" <= DT2TIME(CURRENTDATETIME)) AND (InvMgtSetup."Current Day End Start Time" <> 0T) THEN BEGIN
                  CloseDayEnd := TRUE;
                END ELSE BEGIN
                  IF RecordStockOut THEN
                    RecordStockOut := FALSE;
                  CloseDayEnd := FALSE;
              END;

              END;

              // checking the inventory should occur at least once during the period
              IF RecordStockOut OR (DayEndDate = InvtLocationPeriod."Ending Date") THEN
                SkipCheckItemUsage := FALSE;
              IF RecordStockOut THEN
                CloseDayEnd := TRUE;
              IF GUIALLOWED THEN
                Window.UPDATE(2,DayEndDate);

              IF NOT SkipCheckItemUsage THEN BEGIN
                ProcUnit.RESET;
                ProcUnit.SETRANGE("Location Code",Location2.Code);
                IF ProcUnit.FINDSET THEN BEGIN
                  ItemUsage.SETCURRENTKEY("Location Code","Item No.","Variant Code","Starting Date","Ending Date");
                  TotalCount := ProcUnit.COUNT;
                  ProcCount := 0;
                  REPEAT
                    // set first stocked date
                    IF ProcUnit."First Stocked Date" = 0D THEN BEGIN
                      ProcUnit."First Stocked Date" := UBP.GetFirstStockedDate(ProcUnit,'');
                      IF ProcUnit."First Stocked Date" <> 0D THEN
                        ProcUnit.MODIFY(FALSE);
                    END;
                    // check item usage exists
                    IF (ProcUnit."First Stocked Date" <> 0D) AND
                        (ProcUnit."First Stocked Date" <= InvtLocationPeriod."Ending Date") THEN BEGIN

                      ItemUsage.SETRANGE("Location Code",ProcUnit."Location Code");
                      ItemUsage.SETRANGE("Item No.",ProcUnit."Item No.");
                      ItemUsage.SETRANGE("Variant Code",ProcUnit."Variant Code");
                      ItemUsage.SETRANGE("Starting Date",InvtLocationPeriod."Starting Date");
                      IF NOT ItemUsage.FINDFIRST THEN BEGIN
                        ItemUsage.INIT;
                        ItemUsage."Entry No." := NextEntryNo;
                        NextEntryNo := NextEntryNo + 1;
                        ItemUsage."Location Code" := ProcUnit."Location Code";
                        ItemUsage."Item No." := ProcUnit."Item No.";
                        ItemUsage."Variant Code" := ProcUnit."Variant Code";
                        ItemUsage."Starting Date" := InvtLocationPeriod."Starting Date";
                        ItemUsage."Ending Date" := InvtLocationPeriod."Ending Date";
                        ItemUsage."Include Drop Ship Usage" := ProcUnit."Include Drop Ship Usage";
                        ItemUsage.Unit := 1;
                        ItemUsage.INSERT(TRUE);
                      END;

                      IF RecordStockOut AND (NOT ProcUnit."Nonstock Unit") THEN BEGIN
                      QtyExpLessOnOrder := UBP.StockOutDaysCalc(ProcUnit, DayEndDate);
                      IF QtyExpLessOnOrder <= 0 THEN BEGIN
                        ItemUsage."Total Stockout Days" := ItemUsage."Total Stockout Days" + 1;
                        IF ItemUsage."Date Last Out of Stock" = CALCDATE('<-1D>',DayEndDate) THEN
                          ItemUsage."Stockout Days" := ItemUsage."Stockout Days" + 1
                        ELSE
                          ItemUsage."Stockout Days" := 1;
                        ItemUsage."Date Last Out of Stock" := DayEndDate;
                        ItemUsage.MODIFY(FALSE);
                      END;
                    END;
                    END;
                    ProcCount := ProcCount + 1;
                    IF GUIALLOWED THEN
                      IF ProcCount MOD 50 = 0 THEN
                        Window.UPDATE(3,ROUND(10000 * ProcCount / TotalCount,1));
                  UNTIL ProcUnit.NEXT = 0;
                END;
              END;

              IF CloseDayEnd THEN BEGIN
                InvtLocationPeriod."Last Day End Date" := DayEndDate;
                IF (InvtLocationPeriod."Last Day End Date" >= InvtLocationPeriod."Ending Date") THEN BEGIN
                  InvtLocationPeriod."Day End Closed" := TRUE;
                  InvtLocationPeriod."Last Day End Date" := InvtLocationPeriod."Ending Date";
                END;
                InvtLocationPeriod.MODIFY(FALSE);

              Location2."Last Day-End Date" := DayEndDate;
              Location2.MODIFY(FALSE);
              END;

              IF InvtLocationPeriod."Day End Closed" THEN
                IF InvtLocationPeriod.NEXT = 0 THEN BEGIN
                  IF GUIALLOWED THEN
                    Window.CLOSE;
                  InvMgt.CloseLogEntry(UBPLogEntryNo,'');
                  EXIT;
                END;

              COMMIT;

            UNTIL DayEndDate >= WORKDATE;

            IF GUIALLOWED THEN
              Window.CLOSE;

            InvMgt.CloseLogEntry(UBPLogEntryNo,'');
            COMMIT;
          END;

  }
  CODE
  {
    VAR
      InvtLocationPeriod@14000500 : Record 14000553;
      Location@14000501 : Record 14;
      Location2@14000502 : Record 14;
      ProcUnit@14000503 : Record 14000555;
      InvMgtSetup@14000504 : Record 14000551;
      ItemUsage@14000505 : Record 14000557;
      Item@1000000000 : Record 27;
      InvMgt@1240030002 : Codeunit 14000553;
      UBP@1240030007 : Codeunit 14000564;
      Window@14000506 : Dialog;
      DayEndDate@14000507 : Date;
      NextEntryNo@14000508 : Integer;
      ProcCount@14000509 : Integer;
      TotalCount@14000510 : Integer;
      Text000@14000511 : TextConst 'ENU=Processing Day End';
      Text001@14000512 : TextConst 'ENU=Location';
      Text002@14000513 : TextConst 'ENU=Date';
      Text003@14000514 : TextConst 'ENU=Progress';
      UBPLogEntryNo@1240030006 : Integer;
      QtyExpLessOnOrder@1240020000 : Decimal;

    BEGIN
    END.
  }
}

