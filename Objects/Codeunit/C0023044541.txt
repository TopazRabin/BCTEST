OBJECT Codeunit 23044541 IWX License Plate Common
{
  OBJECT-PROPERTIES
  {
    Date=10/05/21;
    Time=[ 4:36:26 AM];
    Modified=Yes;
    Version List=IWX2.4.7684.0,3187,3299;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      cuCommonBase@1000000000 : Codeunit 23044519;
      tcChangeBinFromTo@1000000001 : TextConst 'ENU=Change bin %1 to %2 on %3;ESM=Cambio bin %1 a %2 en %3;FRC=Changement bin %1 %2 sur %3;ENC=Change bin %1 to %2 on %3';
      cuCreateResEntry@1000000002 : Codeunit 99000830;
      tcTotalCubageExceeded@1000000004 : TextConst 'ENU=The total cubage %1 exceeds the maximum cubage of %2 on license plate %3;ESM=El cubage total %1 excede el cubage m ximo de %2 en la placa de matr¡cula %3;FRC=Le cubage total %1 d‚passe le cubage maximum de %2 sur la palette %3;ENC=The total cubage %1 exceeds the maximum cubage of %2 on license plate %3';
      tcTotalWeightExceeded@1000000003 : TextConst 'ENU=The total weight %1 exceeds the maximum weight of %2 on license plate %3;ESM=El peso total %1 excede el peso m ximo de %2 en la placa de matr¡cula %3;FRC=The total weight %1 exceeds the maximum weight of %2 on license plate %3;ENC=The total weight %1 exceeds the maximum weight of %2 on license plate %3';
      tcFeatureNotSupported@1000000005 : TextConst 'ENU=This is not a supported feature of the product.;ESM=Esto no es una caracter¡stica compatible del producto.;FRC=Ce n''est pas une fonctionnalit‚ prise en charge du produit.;ENC=This is not a supported feature of the product.';
      tc004@1000000007 : TextConst 'ENU=Document No.: ''%1'', Line No.: %2 cannot change Bins while License Plate No.: %3 is assigned to it.;ESM=N§ de documento: ''%1'', N§ de l¡nea: %2 no puede cambiar compartimentos mientras se le asigna el n£mero de matr¡cula: %3.;FRC=No. de document: ''%1'', No. de ligne: %2 ne peut changer les bins lorsque le no. de palette: %3 lui est assign‚.;ENC=Document No.: ''%1'', Line No.: %2 cannot change Bins while License Plate No.: %3 is assigned to it.';
      tc005@1000000006 : TextConst 'ENU=Document No.: ''%1'', Line No.: %2 cannot change Locations while License Plate No.: %3 is assigned to it.;ESM=N§ de Documento: ''%1'', N§ de L¡nea: %2 no puede cambiar de lugar mientras se le asigna el n£mero de matr¡cula: %3.;FRC=No. de document: ''%1'', No. de ligne: %2 ne peut changer les emplacements lorsque le no. de palette: %3 lui est assign‚.;ENC=Document No.: ''%1'', Line No.: %2 cannot change Locations while License Plate No.: %3 is assigned to it.';
      tcLPMinQty@1000000009 : TextConst 'ENU=The minimum %1 allowed is %2 due to current License Plate assignments.;ESM=El %1 m¡nimo permitido es %2 debido a las asignaciones actuales de la matr¡cula.;FRC=Le %1 minimum autoris‚ est %2 en raison des affectations actuelles de la plaque d''immatriculation.;ENC=The minimum %1 allowed is %2 due to current License Plate assignments.';
      tcLPMaxQty@1000000008 : TextConst 'ENU=The maximum %1 allowed is %2 due to current License Plate assignments.;ESM=El %1 m ximo permitido es %2 debido a las asignaciones actuales de matr¡culas.;FRC=Le %1 maximum autoris‚ est %2 en raison des affectations actuelles de la plaque d''immatriculation.;ENC=The maximum %1 allowed is %2 due to current License Plate assignments.';
      tcSerialNumberAssigned@1000000010 : TextConst 'ENU=Serial Number %1 has been assigned via License Plate No. %2.;ESM=El N£mero de Serie %1 se ha asignado a trav‚s de la Placa N£mero %2.;FRC=Le num‚ro de s‚rie %1 a ‚t‚ attribu‚ via la plaque d''immatriculation n ø %2.;ENC=Serial Number %1 has been assigned via License Plate No. %2.';
      optSourceDocument@1000000011 : ' ,Purchase Order,Sales Order,Inbound Transfer,Outbound Transfer,Prod. Order,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick,Receipt,Shipment,Reclass,Purchase Return Order,Assembly,Invt. Movement';
      tcAddOrUpdateLPReclass@1000000012 : TextConst 'ENU=Add license plate lines, Apply based on selected journal lines;ESM=Agregar l¡neas de matr¡cula, Aplicar seg£n las l¡neas de diario seleccionadas;FRC=Ajouter des lignes de plaque d''immatriculation, Appliquer sur la base de lignes de journal s‚lectionn‚es;ENC=Add license plate lines, Apply based on selected journal lines';
      tcEitherClearQuantitOrSetBin@1000000013 : TextConst 'ENU=The bin cannot be set if there is already a quantity on the line.;ESM=La bandeja no se puede establecer si ya hay una cantidad en la l¡nea.;FRC=La bin ne peut ˆtre configur‚e s''il y a d‚j… une quantit‚ sur la ligne.;ENC=The bin cannot be set if there is already a quantity on the line.';
      cuResMgmt@1000000015 : Codeunit 23044514;
      tcCannotOutputToDifferentBin@1000000014 : TextConst 'ENU=You cannot output to a different bin than the license plate resides in.;ESM=No se puede emitir a un contenedor diferente del que reside la placa.;FRC=Vous ne pouvez sortir dans une bin diff‚rente que celle o— est la palette.;ENC=You cannot output to a different bin than the license plate resides in.';
      tcLPNotOnInterLocation@1000000016 : TextConst 'ENU=License Plate No.: %1 was not shipped for: %2.;ESM=N£mero de matr¡cula: %1 no se envi¢ para: %2.;FRC=Num‚ro d''immatriculation: %1 n''a pas ‚t‚ exp‚di‚ pour: %2.;ENC=License Plate No.: %1 was not shipped for: %2.';
      tcUnappliedQty@1000000017 : TextConst 'ENU=The License Plate Item: %1 with Quantity: %2 %4 could not be fully applied. %3 %5 are remaining.;ESM=El art¡culo de la matr¡cula: %1 con la cantidad: %2 %4 no se pudo aplicar completamente. %3 %5 permanecen.;FRC=La plaque min‚ralogique de l''objet: %1 avec Quantit‚: %2 pourrait ne pas ˆtre pleinement appliqu‚. %3 sont restants.;ENC=The License Plate Item: %1 with Quantity: %2 could not be fully applied. %3 are remaining.';
      tcSNNotAvailable@1000000018 : TextConst 'ENU=Serial Number %1 is not available.;ESM=El n£mero de serie %1 no est  disponible.;FRC=Le num‚ro de s‚rie %1 n''est pas disponible.;ENC=Serial Number %1 is not available.';
      tcOverrideQuantityWarning@1000000019 : TextConst 'ENU=The License Plate Item %1 quantity %2 is more than quantity %3 on transfer order line. Do you want to override quantity %4 with %5;ESM=El n£mero %1 de la matr¡cula es %2 m s que la cantidad %3 en la l¡nea de pedido de transferencia. ¨Desea anular la cantidad %4 con %5?;FRC=La quantit‚ de plaque d''immatriculation article %1 %2 est plus que la quantit‚ %3 sur la ligne de commande de transfert. Vous voulez substituer quantit‚ %4 avec %5;ENC=The License Plate Item %1 quantity %2 is more than quantity %3 on transfer order line. Do you want to override quantity %4 with %5';
      tcCreateNewTransferLine@1000000020 : TextConst 'ENU=The License Plate Item %1 does not exist in the transfer order %2. Do you want add this item to the transfer order;ESM=El elemento de matr¡cula %1 no existe en la orden de transferencia %2. ¨Quieres a¤adir este art¡culo a la orden de transferencia?;FRC=La plaque d''immatriculation article %1 n''existe pas dans l''ordre de transfert 2 %. Voulez-vous ajouter ce point ùÏ l''ordre de virement;ENC=The License Plate Item %1 does not exist in the transfer order %2. Do you want add this item to the transfer order';
      tcSalesReturnNotSupported@1000000021 : TextConst 'ENU=Sales Return Orders are not supported.;ESM=Ventas ¢rdenes de restituci¢n no son compatibles.;FRC=Ventes de retour Les commandes ne sont pas pris en charge.;ENC=Sales Return Orders are not supported.';
      tcUnknownActivity@1000000022 : TextConst 'ENU=Unknown activity type.;ESM=Desconocido Tipo de actividad.;FRC=Inconnu type d''activit‚.;ENC=Unknown activity type.';
      tcPostInvalidStatus@1000000024 : TextConst 'ENU=The document cannot be posted while License Plate No.: %1 is set to status: %2.;ESM=El documento no se puede contabilizar mientras el n£mero de matr¡cula: %1 se establece en estado: %2.;FRC=Le document ne peut pas ˆtre affich‚ alors que la plaque d''immatriculation: %1 est r‚gl‚ sur l''‚tat: %2.;ENC=The document cannot be posted while License Plate No.: %1 is set to status: %2.';
      tcUnsupportedWhseRcpt@1000000025 : TextConst 'ENU=Unsupported warehouse receipt.;ESM=Recibo de almacenamiento compatible.;FRC=Unsupported r‚c‚piss‚ d''entrep“t.;ENC=Unsupported warehouse receipt.';
      tcNoMatchWhseActivityLine@1000000026 : TextConst 'ENU=Can''t find warehouse activity line to match license plate %1, line no. %2.;ESM=No se puede encontrar la l¡nea de actividad de almac‚n para coincidir con la placa de licencia %1, l¡nea no. %2.;FRC=Impossible de trouver la ligne d''activit‚ de l''entrep“t pour correspondre … la plaque d''immatriculation %1, ligne no. %2.;ENC=Can''t find warehouse activity line to match license plate %1, line no. %2.';
      cuFunctionPerms@1000000027 : Codeunit 23044523;
      tcIncorrectToteAssignment@1000000023 : TextConst 'ENU=Tote: %1 can only be used for %2: %3, %4: %5;ESM=Tote: %1 solo se puede utilizar para %2: %3, %4: %5;FRC=L''emballage: %1 ne peut ˆtre utilis‚ que pour %2: %3, %4: %5;ENC=Tote: %1 can only be used for %2: %3, %4: %5';

    PROCEDURE changeBinOnLicensePlate@1000000080(pcodTemplateName@1000000004 : Code[20];pcodBatchName@1000000003 : Code[20];VAR precLicensePlateHeader@1000000000 : Record 23044505;pcodNewLocationCode@1000000002 : Code[20];pcodNewBinCode@1000000001 : Code[20]);
    VAR
      lrecLicensePlateLine@1000000005 : Record 23044506;
      lrecItemJournalLine@1000000006 : Record 83;
      lrecLPSetup@1000000007 : Record 23044523;
      lrecLocation@1000000008 : Record 14;
      lrecWhseJnlLine@1000000009 : Record 7311;
      ltrecWhseJnlLineData@1000000011 : TEMPORARY Record 7311;
      ltcDocNumber@1000000010 : TextConst 'ENU=LP BIN CHANGE;ESM=LP BIN CHANGE;FRC=LP BIN CHANGE;ENC=LP BIN CHANGE';
      liLineNo@1000000012 : Integer;
    BEGIN
      // This should be called by the "Bin Code" On validate trigger.
      // This will reclassify all items currently on the license plate
      // in the 'from' bin to the 'new' bin.
      // If the 'from' bin is blank, no reclassification occurs.
      // If the 'to' bin is blank, no reclassification occurs.

      lrecLPSetup.GET();

      IF ( ( precLicensePlateHeader."Bin Code" <> '' ) // Do not reclassify if it had no bin code before
          AND ( pcodNewBinCode <> '' )               // do not reclassify if the license plate is coming out of a bin.
          AND (
            (precLicensePlateHeader."Location Code" <> pcodNewLocationCode ) OR
            (precLicensePlateHeader."Bin Code" <> pcodNewBinCode) ) // do not reclassify if it's the same bin.
            ) AND
            (lrecLPSetup."LP Bin Change Behavior"::"Reclassify Items on the License Plate" = lrecLPSetup."LP Bin Change Behavior" )
          THEN BEGIN

        lrecLocation.GET(precLicensePlateHeader."Location Code");

        AddLPLinesToReclassJournal(
            precLicensePlateHeader."No.",
            lrecLocation."Directed Put-away and Pick",
            precLicensePlateHeader."Location Code",
            pcodNewLocationCode,
            precLicensePlateHeader."Bin Code",
            pcodNewBinCode,
            pcodTemplateName,
            pcodBatchName
            );

        PostChangeBinReclassLines(lrecLocation."Directed Put-away and Pick", pcodTemplateName, pcodBatchName);
      END; // if we had to reclassify from one bin to another bin.


      // Do not validate, because it is expected that this
      // function is called from within the validate of the
      // calling function.
      precLicensePlateHeader.GET(precLicensePlateHeader."No.");
      precLicensePlateHeader."Location Code" := pcodNewLocationCode; // DO NOT validate
      precLicensePlateHeader."Bin Code" := pcodNewBinCode; // DO NOT validate
      precLicensePlateHeader.MODIFY(TRUE); // must call with modify trigger

      precLicensePlateHeader.CALCFIELDS("Has License Plates");
      IF precLicensePlateHeader."Has License Plates" THEN
        UpdateEmbeddedLPBin(precLicensePlateHeader);
    END;

    PROCEDURE AddLPLinesToReclassJournal@1000000016(pcodLPNumber@1000000000 : Code[20];pbDirectedPickPut@1000000004 : Boolean;pcodLocationCode@1000000009 : Code[10];pcodNewLocationCode@1000000005 : Code[10];pcodFromBinCode@1000000008 : Code[20];pcodToBinCode@1000000007 : Code[20];pcodTemplateName@1000000006 : Code[20];pcodBatchName@1000000001 : Code[20]);
    VAR
      lrecLPHeader@1000000002 : Record 23044505;
      lrecLPLine@1000000003 : Record 23044506;
    BEGIN
      //<FUNC>
      //  Description: Loop through the LP lines and add to reclass journal.
      //               Recurse through embedded license plates
      //</FUNC>

      lrecLPHeader.GET(pcodLPNumber);
      lrecLPLine.SETRANGE("License Plate No.", pcodLPNumber );

      IF lrecLPLine.FINDSET(FALSE) THEN BEGIN
        REPEAT
          IF lrecLPLine.Type=lrecLPLine.Type::Item THEN BEGIN
            IF lrecLPLine.Quantity > 0 THEN BEGIN
              IF pbDirectedPickPut THEN BEGIN
                AddChangeBinReclassLineDirected(lrecLPLine, pcodLocationCode, pcodFromBinCode, pcodToBinCode, pcodTemplateName, pcodBatchName);
              END ELSE BEGIN
                AddChangeBinItemReclassLine(lrecLPLine, lrecLPHeader."Location Code", lrecLPHeader."Bin Code",pcodNewLocationCode, pcodToBinCode, pcodTemplateName, pcodBatchName );
      //          changeBinOnLPCreateJournalLine(
      //            pcodTemplateName,pcodBatchName,lrecLPLine,lrecLPHeader,pcodNewLocationCode,pcodToBinCode,
        //          COPYSTR( STRSUBSTNO( tcChangeBinFromTo,lrecLPHeader."Bin Code",pcodToBinCode,lrecLPHeader."No."  ), 1, 80),
          //        lrecLPLine."Unit of Measure Code"
            //    );
              END;
            END;
          END ELSE IF lrecLPLine.Type=lrecLPLine.Type::"License Plate" THEN BEGIN
            AddLPLinesToReclassJournal(lrecLPLine."No.", pbDirectedPickPut, pcodLocationCode, pcodNewLocationCode, pcodFromBinCode, pcodToBinCode, pcodTemplateName, pcodBatchName );
          END;
        UNTIL( lrecLPLine.NEXT() = 0 );
      END;
    END;

    PROCEDURE AddChangeBinReclassLineDirected@1000000022(precLPLine@1000000002 : Record 23044506;pcodLocationCode@1000000003 : Code[20];pcodFromBinCode@1000000004 : Code[20];pcodToBinCode@1000000005 : Code[20];pcodTemplateName@1000000009 : Code[20];pcodBatchName@1000000008 : Code[20]);
    VAR
      lrecWhseJnlLine@1000000006 : Record 7311;
      ltrecWhseJnlLineData@1000000000 : TEMPORARY Record 7311;
      ltcDocNumber@1000000007 : TextConst 'ENU=LP BIN CHANGE;ESM=LP BIN CHANGE;FRC=LP BIN CHANGE;ENC=LP BIN CHANGE';
      lbExistingLine@1000000001 : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Adds a whse. reclass journal line for directed pick locations
      //</FUNC>

      lrecWhseJnlLine.SETRANGE("Journal Template Name", cuCommonBase.getWhseTemplate(PAGE::"Whse. Reclassification Journal"));
      lrecWhseJnlLine.SETRANGE("Journal Batch Name",pcodBatchName);
      lrecWhseJnlLine.SETRANGE("Location Code",pcodLocationCode);
      lrecWhseJnlLine.SETRANGE("Item No.",precLPLine."No.");
      lrecWhseJnlLine.SETRANGE("Variant Code",precLPLine."Variant Code");
      lrecWhseJnlLine.SETRANGE("From Bin Code",pcodFromBinCode);
      lrecWhseJnlLine.SETRANGE("To Bin Code",pcodToBinCode);
      lrecWhseJnlLine.SETRANGE("Unit of Measure Code",precLPLine."Unit of Measure Code");
      lbExistingLine := lrecWhseJnlLine.FINDFIRST;
      IF lbExistingLine THEN BEGIN
        lrecWhseJnlLine.VALIDATE(Quantity,lrecWhseJnlLine.Quantity + precLPLine.Quantity);
        lrecWhseJnlLine.MODIFY;

        IF (precLPLine."Serial No."<>'') OR (precLPLine."Lot No." <> '') THEN BEGIN
          IF cuCommonBase.isWhseTracked(precLPLine."No.") THEN BEGIN
            cuResMgmt.AddRemoveWhseReclassTracking(lrecWhseJnlLine,precLPLine."Serial No.",precLPLine."Lot No.",precLPLine.Quantity,precLPLine."Expiration Date");
          END;
        END;

        EXIT;
      END;

      lrecWhseJnlLine.RESET;


      ltrecWhseJnlLineData."Line No." := 10000;
      ltrecWhseJnlLineData."Journal Batch Name" := pcodBatchName;
      ltrecWhseJnlLineData."Location Code" := pcodLocationCode;
      ltrecWhseJnlLineData."Item No." := precLPLine."No.";
      ltrecWhseJnlLineData."Variant Code" := precLPLine."Variant Code";
      ltrecWhseJnlLineData."From Bin Code" := pcodFromBinCode;
      ltrecWhseJnlLineData."To Bin Code" := pcodToBinCode;
      ltrecWhseJnlLineData."Unit of Measure Code" := precLPLine."Unit of Measure Code";
      ltrecWhseJnlLineData.Quantity := precLPLine.Quantity;
      ltrecWhseJnlLineData.INSERT;

      cuCommonBase.insertWhseReclassJournalLine(
                lrecWhseJnlLine,
                ltrecWhseJnlLineData,
                precLPLine."Serial No.",
                precLPLine."Lot No.",
                FALSE,
                '',
                ltcDocNumber,
                precLPLine."Expiration Date"
              );
    END;

    PROCEDURE AddChangeBinItemReclassLine@100000000(precLPLine@100000000 : Record 23044506;pcodFromLocationCode@100000001 : Code[10];pcodFromBinCode@100000002 : Code[20];pcodToLocationCode@100000003 : Code[10];pcodToBinCode@100000004 : Code[20];pcodTemplateName@100000005 : Code[10];pcodBatchName@100000006 : Code[10]);
    VAR
      lrecItemJnlLine@100000007 : Record 83;
      ltrecItemJnlLineData@100000008 : TEMPORARY Record 83;
    BEGIN
      lrecItemJnlLine.SETRANGE("Journal Template Name", cuCommonBase.getWhseTemplate(PAGE::"Whse. Reclassification Journal"));
      lrecItemJnlLine.SETRANGE("Journal Batch Name",pcodBatchName);
      lrecItemJnlLine.SETRANGE("Item No.",precLPLine."No.");
      lrecItemJnlLine.SETRANGE("Variant Code",precLPLine."Variant Code");
      lrecItemJnlLine.SETRANGE("Location Code",pcodFromLocationCode);
      lrecItemJnlLine.SETRANGE("Bin Code", pcodFromBinCode);
      lrecItemJnlLine.SETRANGE("New Location Code",pcodToLocationCode);
      lrecItemJnlLine.SETRANGE("New Bin Code",pcodToBinCode);
      lrecItemJnlLine.SETRANGE("Unit of Measure Code",precLPLine."Unit of Measure Code");

      IF lrecItemJnlLine.FINDFIRST() THEN BEGIN
        lrecItemJnlLine.VALIDATE(Quantity,lrecItemJnlLine.Quantity + precLPLine.Quantity);
        lrecItemJnlLine.MODIFY;

        IF (precLPLine."Serial No."<>'') OR (precLPLine."Lot No." <> '') THEN BEGIN
          cuResMgmt.AddRemoveReclassTracking(lrecItemJnlLine,precLPLine."Serial No.",precLPLine."Lot No.",precLPLine.Quantity,precLPLine."Unit of Measure Code",precLPLine."Expiration Date");
        END;

        EXIT;
      END;

      ltrecItemJnlLineData.RESET;
      ltrecItemJnlLineData."Line No." := 10000;
      ltrecItemJnlLineData."Journal Template Name" := pcodTemplateName;
      ltrecItemJnlLineData."Journal Batch Name" := pcodBatchName;
      ltrecItemJnlLineData."Item No." := precLPLine."No.";
      ltrecItemJnlLineData."Variant Code" := precLPLine."Variant Code";
      ltrecItemJnlLineData."Location Code" := pcodFromLocationCode;
      ltrecItemJnlLineData."New Location Code" := pcodToLocationCode;
      ltrecItemJnlLineData."Bin Code" := pcodFromBinCode;
      ltrecItemJnlLineData."New Bin Code" := pcodToBinCode;
      ltrecItemJnlLineData.Quantity := precLPLine.Quantity;
      //ltrecItemJnlLineData."Source Code" := pcodSourceCode;
      ltrecItemJnlLineData."Unit of Measure Code" := precLPLine."Unit of Measure Code";
      ltrecItemJnlLineData."LPM License Plate No." := precLPLine."License Plate No.";
      ltrecItemJnlLineData.Description := COPYSTR(STRSUBSTNO(tcChangeBinFromTo,pcodFromBinCode,pcodToBinCode,precLPLine."License Plate No."),1,MAXSTRLEN(lrecItemJnlLine.Description));
      ltrecItemJnlLineData.INSERT;

      cuCommonBase.insertReclassJournalLine(
                      lrecItemJnlLine,
                      ltrecItemJnlLineData,
                      precLPLine."Serial No.",
                      precLPLine."Lot No.",
                      FALSE,
                      FALSE, //
                      '',
                      precLPLine."Expiration Date"
                    );

      modifyWHICompatibilityFields(lrecItemJnlLine, '', '', precLPLine.Barcode, TRUE);
    END;

    PROCEDURE UpdateEmbeddedLPBin@1000000011(precLPHeader@1000000000 : Record 23044505);
    VAR
      lrecLPLines@1000000001 : Record 23044506;
      lrecEmbeddedLPHeader@1000000002 : Record 23044505;
    BEGIN
      //<FUNC>
      //  Description: Recurse through embedded license plates and update the location/bin.
      //               No validation performed as the top level license plate is handling that.
      //</FUNC>

      lrecLPLines.SETRANGE("License Plate No.",precLPHeader."No.");
      lrecLPLines.SETRANGE(Type,lrecLPLines.Type::"License Plate");
      lrecLPLines.SETFILTER("No.",'<>%1','');
      IF lrecLPLines.FINDSET(FALSE) THEN BEGIN
        REPEAT
          lrecEmbeddedLPHeader.GET(lrecLPLines."No.");

          lrecEmbeddedLPHeader."Location Code" := precLPHeader."Location Code";
          lrecEmbeddedLPHeader."Bin Code" := precLPHeader."Bin Code";
          lrecEmbeddedLPHeader.MODIFY(TRUE);

          lrecEmbeddedLPHeader.CALCFIELDS("Has License Plates");
          IF lrecEmbeddedLPHeader."Has License Plates" THEN
            UpdateEmbeddedLPBin(lrecEmbeddedLPHeader);
        UNTIL(lrecLPLines.NEXT=0);
      END;
    END;

    PROCEDURE PostChangeBinReclassLines@1000000051(pbDirectedPickPut@1000000000 : Boolean;pcodTemplateName@1000000002 : Code[20];pcodBatchName@1000000001 : Code[20]);
    VAR
      lrecItemJournalLine@1000000004 : Record 83;
      lrecWhseJnlLine@1000000003 : Record 7311;
    BEGIN
      //<FUNC>
      //  Description: Posts the reclass changes
      //</FUNC>

      IF pbDirectedPickPut THEN BEGIN
        lrecWhseJnlLine.RESET;
        lrecWhseJnlLine.SETRANGE("Journal Template Name", pcodTemplateName);
        lrecWhseJnlLine.SETRANGE("Journal Batch Name",pcodBatchName);
        lrecWhseJnlLine.SETFILTER("Item No.",'<>%1','');
        IF (lrecWhseJnlLine.FINDSET(FALSE)) THEN BEGIN
          CODEUNIT.RUN(CODEUNIT::"Whse. Jnl.-Register Batch",lrecWhseJnlLine);
        END;
      END ELSE BEGIN
        lrecItemJournalLine.RESET();
        lrecItemJournalLine.SETRANGE("Journal Template Name", pcodTemplateName);
        lrecItemJournalLine.SETRANGE("Journal Batch Name",pcodBatchName);
        IF (lrecItemJournalLine.FINDSET(FALSE)) THEN BEGIN
          CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post Batch", lrecItemJournalLine);
        END;
      END;
    END;

    PROCEDURE changeBinOnLPCreateJournalLine@1000000098(pcodTemplateName@1000000001 : Code[20];pcodBatchName@1000000002 : Code[20];precLicensePlateLine@1000000003 : Record 23044506;precLicensePlateHeader@1000000004 : Record 23044505;pcodNewLocationCode@1000000006 : Code[20];pcodNewBinCode@1000000005 : Code[20];ptxtDescription@1000000007 : Text[80];pcodUOM@1000000008 : Code[10]);
    VAR
      lrecItemJournalLine@1000000000 : Record 83;
      lrecItemJournalLineTemp@1000000009 : Record 83;
      lrrecItemJournalLine@1000000011 : RecordRef;
      lbExistingLine@1000000012 : Boolean;
    BEGIN
      // Moved from massive bin LP reclass.
      // This is only expected to be called from changeBinOnLicensePlate.

      // attempt to find an existing line
      lrecItemJournalLine.SETRANGE("Journal Template Name",pcodTemplateName);
      lrecItemJournalLine.SETRANGE("Journal Batch Name",pcodBatchName);
      lrecItemJournalLine.SETRANGE("Entry Type", lrecItemJournalLine."Entry Type"::Transfer);
      lrecItemJournalLine.SETRANGE("Location Code", precLicensePlateHeader."Location Code");
      lrecItemJournalLine.SETRANGE("Item No.",precLicensePlateLine."No.");
      lrecItemJournalLine.SETRANGE("Variant Code", precLicensePlateLine."Variant Code");
      lrecItemJournalLine.SETRANGE("Unit of Measure Code",pcodUOM);
      lrecItemJournalLine.SETRANGE("Bin Code",precLicensePlateHeader."Bin Code");
      lrecItemJournalLine.SETRANGE("New Location Code", pcodNewLocationCode);
      lrecItemJournalLine.SETRANGE("New Bin Code", pcodNewBinCode);
      lbExistingLine := lrecItemJournalLine.FINDFIRST;

      IF lbExistingLine THEN BEGIN
        lrecItemJournalLine.VALIDATE(Quantity,lrecItemJournalLine.Quantity + precLicensePlateLine.Quantity);
        lrecItemJournalLine.MODIFY;

        IF (precLicensePlateLine."Serial No."<>'') OR (precLicensePlateLine."Lot No."<>'') THEN BEGIN
          lrecItemJournalLine.Quantity := precLicensePlateLine.Quantity;
          changeBinOnLPCreateItemTrack(
            lrecItemJournalLine,
            precLicensePlateLine."Serial No.",
            precLicensePlateLine."Lot No.",
            precLicensePlateLine."Expiration Date"
          );
        END;
      END ELSE BEGIN
        CLEAR(lrecItemJournalLine);
        lrecItemJournalLine.INIT;
        lrecItemJournalLine.VALIDATE("Journal Template Name", pcodTemplateName);
        lrecItemJournalLine.VALIDATE("Journal Batch Name",pcodBatchName);
        lrecItemJournalLine.VALIDATE("Line No.", getNextJournalLineNumber( pcodTemplateName, pcodBatchName ) );
        lrecItemJournalLine."Entry Type" := lrecItemJournalLine."Entry Type"::Transfer;

        lrecItemJournalLineTemp.VALIDATE("Journal Template Name", pcodTemplateName);
        lrecItemJournalLineTemp.VALIDATE("Journal Batch Name",pcodBatchName);
        IF lrecItemJournalLineTemp.FINDLAST THEN
          lrecItemJournalLine."Document No." := lrecItemJournalLineTemp."Document No.";

        lrecItemJournalLine.SetUpNewLine(lrecItemJournalLine);

        IF (lrecItemJournalLine."Document No." = '') THEN BEGIN
          lrecItemJournalLine.VALIDATE("Document No.", precLicensePlateLine."License Plate No.");
        END;

        IF (lrecItemJournalLine."Posting Date" = 0D) THEN BEGIN
          lrecItemJournalLine.VALIDATE("Posting Date", WORKDATE );
        END;

        lrecItemJournalLine.VALIDATE("Item No.", precLicensePlateLine."No.");
        lrecItemJournalLine.VALIDATE("Variant Code", precLicensePlateLine."Variant Code");
        lrecItemJournalLine.VALIDATE("Location Code", precLicensePlateHeader."Location Code");
        lrecItemJournalLine.VALIDATE("Bin Code", precLicensePlateHeader."Bin Code");
        lrecItemJournalLine.VALIDATE(Quantity, precLicensePlateLine.Quantity);
        IF (pcodUOM <> '') THEN BEGIN
          lrecItemJournalLine.VALIDATE("Unit of Measure Code", pcodUOM);
        END;

        lrecItemJournalLine.VALIDATE("New Location Code", pcodNewLocationCode);
        lrecItemJournalLine.VALIDATE("New Bin Code", pcodNewBinCode);
        lrecItemJournalLine.VALIDATE("LPM License Plate No.", precLicensePlateLine."License Plate No.");


        lrecItemJournalLine.Description := COPYSTR( ptxtDescription, 1, MAXSTRLEN( lrecItemJournalLine.Description  ) );
        lrecItemJournalLine.INSERT(TRUE);

        modifyWHICompatibilityFields(lrecItemJournalLine, '', '', precLicensePlateLine.Barcode, TRUE);

        changeBinOnLPCreateItemTrack(
          lrecItemJournalLine,
          precLicensePlateLine."Serial No.",
          precLicensePlateLine."Lot No.",
          precLicensePlateLine."Expiration Date"
        );
      END;
    END;

    PROCEDURE changeBinOnLPCreateItemTrack@1000000097(VAR precItemJnlLine@1000000000 : Record 83;psSerialNumber@1000000002 : Text;psLotNumber@1000000003 : Text;pdtExpirationDate@1000000001 : Date);
    BEGIN
      // Support function for changeBinOnLicensePlate
      psLotNumber := UPPERCASE(psLotNumber);
      psSerialNumber := UPPERCASE(psSerialNumber);

      // Should only be used in that context.

      IF( (psSerialNumber = '') AND (psLotNumber = '') ) THEN
        EXIT;

      IF( pdtExpirationDate<>0D ) THEN BEGIN
        cuCreateResEntry.SetNewExpirationDate(pdtExpirationDate);
      END;

      //
      // Create the reservation
      //
      cuCreateResEntry.CreateReservEntryFor(
        DATABASE::"Item Journal Line",              // ForType (option)
        4,                                          // ForSubType (integer)
        precItemJnlLine."Journal Template Name",    // ForID (code)
        precItemJnlLine."Journal Batch Name",       // ForBatchName (code)
        0,                                          // ForProdOrderLine (integer)
        precItemJnlLine."Line No.",                 // ForRefNo (integer)
        precItemJnlLine."Qty. per Unit of Measure", // ForQtyPerUOM (integer)
        precItemJnlLine.Quantity * precItemJnlLine."Qty. per Unit of Measure", // Quantity (decimal)
        //0,                              // QuantityBase (decimal)      //
        precItemJnlLine.Quantity,                                      // Passed in quantity, replace 0
        psSerialNumber,                           // ForSerialNo (Code)
        psLotNumber                               // ForLotNo (Code)
      );

      cuCreateResEntry.SetNewSerialLotNo( psSerialNumber, psLotNumber );

      cuCreateResEntry.CreateEntry(
        precItemJnlLine."Item No.",         // ItemNo (code)
        precItemJnlLine."Variant Code",     // VariantCode (code)
        precItemJnlLine."Location Code",    // LocationCode (code)
        precItemJnlLine.Description,        // Description (text)
        TODAY,              // ExpectedReceiptDate (Date)
        0D,                 // ShipmentDate (Date)
        0,                  // TransferredFromEntryNo (integer)
        3                   // Status (0==Reservation,1==Tracking,2==Surplus,3==Prospect)
      );
    END;

    LOCAL PROCEDURE getNextJournalLineNumber@1000000099(pcodTemplateName@1000000002 : Code[20];pcodBatchName@1000000001 : Code[20]) liOutNextLineNumber : Integer;
    VAR
      lrecItemJournalLineTemp@1000000000 : Record 83;
    BEGIN
      liOutNextLineNumber := 10000;

      lrecItemJournalLineTemp.SETRANGE("Journal Template Name", pcodTemplateName);
      lrecItemJournalLineTemp.SETRANGE("Journal Batch Name", pcodBatchName);
      IF( lrecItemJournalLineTemp.FINDLAST ) THEN BEGIN
        liOutNextLineNumber := lrecItemJournalLineTemp."Line No." + 10000;
      END;

      EXIT(liOutNextLineNumber);
    END;

    PROCEDURE updateCharacteristics@1000000000(VAR precLPHeader@1000000002 : Record 23044505;VAR precLPLineBeingChanged@1000000007 : Record 23044506;pbDeleteLine@1000000008 : Boolean;pcodPDAConfigID@1000000013 : Code[20]);
    VAR
      lrecItem@1000000005 : Record 27;
      ldCurrentGrossWeight@1000000004 : Decimal;
      ldCurrentNetWeight@1000000003 : Decimal;
      ldItemCount@1000000000 : Decimal;
      lrecLPLine@1000000006 : Record 23044506;
      lrecLPHeader@1000000001 : Record 23044505;
      ldDimensionQtyPerUOM@1000000009 : Decimal;
      ldCubageQtyPerUOM@1000000010 : Decimal;
      lrecLPDimensionUOM@1000000011 : Record 23044525;
      ldBaseCubage@1000000012 : Decimal;
    BEGIN
      // Updates the License Plate Header weight.
      // is Called from LP Line table
      lrecLPLine.SETRANGE("License Plate No.", precLPHeader."No.");
      lrecLPLine.SETRANGE(Type, lrecLPLine.Type::Item);
      IF ( precLPLineBeingChanged."License Plate No." <> '' ) THEN BEGIN
        //
        // This parameter is optional.  If a blank lp line record is supplied
        // then the characteristics will be re-calculated based on everything
        // currently in the DB.
        // Otherwise, it will consider the pending transaction.
        //
        lrecLPLine.SETFILTER("Line No.", '<>%1',precLPLineBeingChanged."Line No.");
      END;

      // first, update the stats for everything except the active line.
      IF(lrecLPLine.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          //Need to get item card to calculate weight )
          IF ( lrecItem.GET(lrecLPLine."No.") ) THEN BEGIN
            ldCurrentGrossWeight := ldCurrentGrossWeight + (lrecLPLine.Quantity * lrecItem."Gross Weight");
            ldCurrentNetWeight := ldCurrentNetWeight + (lrecLPLine.Quantity * lrecItem."Net Weight");
            ldItemCount += lrecLPLine.Quantity;
          END;
        UNTIL lrecLPLine.NEXT = 0;
      END;

      // then, a special case for the active line.
      IF (NOT pbDeleteLine) THEN BEGIN          //if we are deleting a line, can't add it to header
        IF ( precLPLineBeingChanged."License Plate No." <> '' ) THEN BEGIN
          IF ( lrecItem.GET(precLPLineBeingChanged."No.") ) THEN BEGIN
            ldCurrentGrossWeight := ldCurrentGrossWeight + (precLPLineBeingChanged.Quantity * lrecItem."Gross Weight");
            ldCurrentNetWeight := ldCurrentNetWeight + (precLPLineBeingChanged.Quantity * lrecItem."Net Weight");
            ldItemCount += precLPLineBeingChanged.Quantity;
          END;
        END;
      END;

      precLPHeader.VALIDATE("Current Gross Weight", ldCurrentGrossWeight);
      precLPHeader.VALIDATE("Current Net Weight", ldCurrentNetWeight);
      precLPHeader.VALIDATE("Current Item Count",ldItemCount );

      IF ((precLPHeader."Dim. Unit of Measure" <> '') AND (precLPHeader."Cubage Unit of Measure" <> '')) THEN BEGIN
        IF (lrecLPDimensionUOM.GET(precLPHeader."Dim. Unit of Measure")) THEN BEGIN
          ldDimensionQtyPerUOM := lrecLPDimensionUOM."Qty. per Unit of Measure";
        END; // GET dimension uom

        lrecLPDimensionUOM.RESET();
        IF (lrecLPDimensionUOM.GET(precLPHeader."Cubage Unit of Measure")) THEN BEGIN
          ldCubageQtyPerUOM := lrecLPDimensionUOM."Qty. per Unit of Measure";
        END; // GET Cubage uom

        IF ( (ldDimensionQtyPerUOM > 0) AND (ldCubageQtyPerUOM > 0)) THEN BEGIN
          ldBaseCubage := (precLPHeader.Length * ldDimensionQtyPerUOM) * (precLPHeader.Width * ldDimensionQtyPerUOM)
            * (precLPHeader.Height * ldDimensionQtyPerUOM);
          precLPHeader.VALIDATE("Current Cubage", ldBaseCubage / ldCubageQtyPerUOM );
        END;
      END;

      IF( pcodPDAConfigID <> '' ) THEN
        precLPHeader."Last Modified by Device" := pcodPDAConfigID;

      precLPHeader.MODIFY(TRUE);
    END;

    PROCEDURE testLPCharacteristicsInGUI@1000000056(precLPHeader@1000000001 : Record 23044505);
    BEGIN
      // Checks the current lp characteristics against the configured maximum
      // on the license plate, and adds messages.
      // Called from lp line table
      IF (precLPHeader."Maximum Weight"<>0 ) AND ( precLPHeader."Current Gross Weight" > precLPHeader."Maximum Weight") THEN BEGIN
        MESSAGE(STRSUBSTNO(tcTotalWeightExceeded, precLPHeader."Current Gross Weight", precLPHeader."Maximum Weight",
          precLPHeader."No."));

      END;

      IF (precLPHeader."Maximum Cubage"<>0 ) AND (precLPHeader."Current Cubage" > precLPHeader."Maximum Cubage") THEN BEGIN
        MESSAGE(STRSUBSTNO(tcTotalCubageExceeded, precLPHeader."Current Cubage", precLPHeader."Maximum Cubage", precLPHeader."No."));
      END;
    END;

    PROCEDURE generateLPDescription@1000000028(VAR precLPHeader@1000000000 : Record 23044505;precLine@1000000006 : Record 23044506;pbIsDeleting@1000000007 : Boolean);
    VAR
      lbsDescription@1000000001 : BigText;
      lrecLPLine@1000000002 : Record 23044506;
      ltrecItemTemp@1000000003 : TEMPORARY Record 27;
      lrecItem@1000000004 : Record 27;
      lsDescription@1000000005 : Text[250];
    BEGIN
      // Generates the License Plate Description
      // go through the LP lines and grab the unique serialized items and their total quantities
      //
      lrecLPLine.SETRANGE("License Plate No.",precLPHeader."No.");
      lrecLPLine.SETFILTER("Line No.",'<>%1',precLine."Line No.");
      lrecLPLine.SETRANGE(Type,lrecLPLine.Type::Item);

      IF( lrecLPLine.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          IF( lrecItem.GET(lrecLPLine."No.") ) THEN BEGIN
              IF( NOT ltrecItemTemp.GET(lrecItem."No.") ) THEN BEGIN
                ltrecItemTemp := lrecItem;
                ltrecItemTemp."Unit Cost" := lrecLPLine.Quantity;
                ltrecItemTemp.INSERT;
              END
              ELSE  BEGIN
                ltrecItemTemp."Unit Cost" := ltrecItemTemp."Unit Cost" + lrecLPLine.Quantity;
                ltrecItemTemp.MODIFY;
              END;
          END;
        UNTIL( lrecLPLine.NEXT=0 );
      END;

      IF( NOT pbIsDeleting ) THEN BEGIN
        IF( lrecItem.GET(precLine."No.") ) THEN BEGIN
          IF( NOT ltrecItemTemp.GET(lrecItem."No.") ) THEN BEGIN
            ltrecItemTemp := lrecItem;
            ltrecItemTemp."Unit Cost" := precLine.Quantity;
            ltrecItemTemp.INSERT;
          END
          ELSE  BEGIN
            ltrecItemTemp."Unit Cost" := ltrecItemTemp."Unit Cost" + precLine.Quantity;
            ltrecItemTemp.MODIFY;
          END;
        END;
      END;

      //
      // create the description
      //(i.e. 121653-000002, 6; 104733-000001, 10; 106986-000001, etc)
      //
      IF( ltrecItemTemp.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          IF( lbsDescription.LENGTH > 0 ) THEN
            lbsDescription.ADDTEXT('; ');
          lbsDescription.ADDTEXT(STRSUBSTNO('%1, %2',ltrecItemTemp."No.",ltrecItemTemp."Unit Cost"));
        UNTIL( ltrecItemTemp.NEXT=0 );
      END;

      lbsDescription.GETSUBTEXT(lsDescription, 1, MAXSTRLEN( precLPHeader.Description ));

      precLPHeader.Description := lsDescription;
      IF (precLPHeader.MODIFY() ) THEN;
    END;

    PROCEDURE checkSourceLineItem@1000000015(pcodLicensePlateNumber@1000000001 : Code[20];piSourceLineNumber@1000000000 : Integer;pcodItemNumber@1000000002 : Text);
    VAR
      lrecLPHeader@1000000007 : Record 23044505;
      lrecPurchLine@1000000006 : Record 39;
      lrecTransLine@1000000005 : Record 5741;
      lrecSalesLine@1000000004 : Record 37;
      lrecProdOrderLine@1000000003 : Record 5406;
      ltcNotAnItem@1000000008 : TextConst 'ENC=The Source Line No.: %1 is not of Type: Item.';
      ltcNotSameItem@1000000009 : TextConst 'ENC=The Source Line No.: %1, Item No.: %2 does not match the License Plate Line Item No.: %3.';
      lrecActivityLine@1000000010 : Record 5767;
      lrecReceiptLine@1000000011 : Record 7317;
      lrecShipmentLine@1000000012 : Record 7321;
    BEGIN
      lrecLPHeader.GET(pcodLicensePlateNumber);

      CASE lrecLPHeader."Source Document Type" OF
        lrecLPHeader."Source Document Type"::"Purchase Order":
          BEGIN
            lrecPurchLine.GET(lrecPurchLine."Document Type"::Order, lrecLPHeader."Source Document No.",piSourceLineNumber);
            IF( lrecPurchLine.Type <> lrecPurchLine.Type::Item ) THEN
              ERROR(ltcNotAnItem, piSourceLineNumber);

            IF( lrecPurchLine."No." <> pcodItemNumber ) THEN
              ERROR(ltcNotSameItem, piSourceLineNumber,lrecPurchLine."No.",pcodItemNumber);
          END;
        lrecLPHeader."Source Document Type"::"Sales Order":
          BEGIN
            lrecSalesLine.GET(lrecSalesLine."Document Type"::Order,lrecLPHeader."Source Document No.",piSourceLineNumber);

            IF( lrecSalesLine.Type <> lrecSalesLine.Type::Item ) THEN
              ERROR(ltcNotAnItem, piSourceLineNumber);

            IF( lrecSalesLine."No." <> pcodItemNumber ) THEN
              ERROR(ltcNotSameItem, piSourceLineNumber,lrecSalesLine."No.",pcodItemNumber);
          END;
        lrecLPHeader."Source Document Type"::"Inbound Transfer"..lrecLPHeader."Source Document Type"::"Outbound Transfer":
          BEGIN
            lrecTransLine.GET(lrecLPHeader."Source Document No.",piSourceLineNumber);

            IF( lrecTransLine."Item No." <> pcodItemNumber ) THEN
              ERROR(ltcNotSameItem, piSourceLineNumber,lrecTransLine."Item No.",pcodItemNumber);
          END;
        lrecLPHeader."Source Document Type"::"Prod. Order":
          BEGIN
            ERROR(tcFeatureNotSupported);
          END;
        lrecLPHeader."Source Document Type"::"Put-away":
          BEGIN
            lrecActivityLine.GET(lrecActivityLine."Activity Type"::"Put-away",lrecLPHeader."Source Document No.",piSourceLineNumber);
            IF( lrecActivityLine."Item No." <> pcodItemNumber ) THEN
              ERROR(ltcNotSameItem, piSourceLineNumber,lrecActivityLine."Item No.",pcodItemNumber);
          END;
        lrecLPHeader."Source Document Type"::Pick:
          BEGIN
            lrecActivityLine.GET(lrecActivityLine."Activity Type"::Pick,lrecLPHeader."Source Document No.",piSourceLineNumber);
            IF( lrecActivityLine."Item No." <> pcodItemNumber ) THEN
              ERROR(ltcNotSameItem, piSourceLineNumber,lrecActivityLine."Item No.",pcodItemNumber);
          END;
        lrecLPHeader."Source Document Type"::Movement:
          BEGIN
            lrecActivityLine.GET(lrecActivityLine."Activity Type"::Movement,lrecLPHeader."Source Document No.",piSourceLineNumber);
            IF( lrecActivityLine."Item No." <> pcodItemNumber ) THEN
              ERROR(ltcNotSameItem, piSourceLineNumber,lrecActivityLine."Item No.",pcodItemNumber);
          END;
        lrecLPHeader."Source Document Type"::"Invt. Put-away":
          BEGIN
            lrecActivityLine.GET(lrecActivityLine."Activity Type"::"Invt. Put-away",lrecLPHeader."Source Document No.",piSourceLineNumber);
            IF( lrecActivityLine."Item No." <> pcodItemNumber ) THEN
              ERROR(ltcNotSameItem, piSourceLineNumber,lrecActivityLine."Item No.",pcodItemNumber);
          END;
        lrecLPHeader."Source Document Type"::"Invt. Pick":
          BEGIN
            lrecActivityLine.GET(lrecActivityLine."Activity Type"::"Invt. Pick",lrecLPHeader."Source Document No.",piSourceLineNumber);
            IF( lrecActivityLine."Item No." <> pcodItemNumber ) THEN
              ERROR(ltcNotSameItem, piSourceLineNumber,lrecActivityLine."Item No.",pcodItemNumber);
            END;
        lrecLPHeader."Source Document Type"::Receipt:
          BEGIN
            lrecReceiptLine.GET(lrecLPHeader."Source Document No.",piSourceLineNumber);
            IF( lrecReceiptLine."Item No." <> pcodItemNumber ) THEN
              ERROR(ltcNotSameItem, piSourceLineNumber,lrecReceiptLine."Item No.",pcodItemNumber);
          END;
        lrecLPHeader."Source Document Type"::Shipment:
          BEGIN
            lrecShipmentLine.GET(lrecLPHeader."Source Document No.",piSourceLineNumber);
            IF( lrecShipmentLine."Item No." <> pcodItemNumber ) THEN
              ERROR(ltcNotSameItem, piSourceLineNumber,lrecShipmentLine."Item No.",pcodItemNumber);
          END;
      END;
    END;

    PROCEDURE printLPLabel@1000000001(VAR precLPHeader@1000000001 : Record 23044505);
    VAR
      lrecReportSel@1000000000 : Record 23044508;
      lrecLPHeader@1000000002 : Record 23044505;
    BEGIN
      lrecLPHeader.COPY(precLPHeader);
      lrecLPHeader.SETRECFILTER();
      lrecReportSel.SETRANGE(Usage,lrecReportSel.Usage::"LP Label");
      IF( lrecReportSel.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          REPORT.RUNMODAL(lrecReportSel."Report ID",TRUE,FALSE,lrecLPHeader);
        UNTIL( lrecReportSel.NEXT=0 );
      END
    END;

    PROCEDURE updateLPFromTemplate@1000000101(VAR precLPHeader@1000000000 : Record 23044505;pcodTemplateCode@1000000001 : Code[20]);
    VAR
      lrecLPTemplate@1000000002 : Record 23044536;
    BEGIN
      IF( lrecLPTemplate.GET(pcodTemplateCode) ) THEN BEGIN
        precLPHeader.VALIDATE("Template Code", pcodTemplateCode);
        precLPHeader.VALIDATE(Length,lrecLPTemplate.Length);
        precLPHeader.VALIDATE(Height,lrecLPTemplate.Height);
        precLPHeader.VALIDATE(Width,lrecLPTemplate.Width);
        precLPHeader.VALIDATE("Dim. Unit of Measure",lrecLPTemplate."LP Dimensions Unit of Measure");
        precLPHeader.VALIDATE("Shipment Length",lrecLPTemplate."Shipment Length");
        precLPHeader.VALIDATE("Shipment Height",lrecLPTemplate."Shipment Height");
        precLPHeader.VALIDATE("Shipment Width",lrecLPTemplate."Shipment Width");
        precLPHeader.VALIDATE("Shpt. Dim. Unit of Measure",lrecLPTemplate."SP Dimensions Unit of Measure");
        precLPHeader.VALIDATE("Shipment Gross Weight",lrecLPTemplate."Shipment Gross Weight");
        precLPHeader.VALIDATE("Shipment Net Weight",lrecLPTemplate."Shipment Net Weight");
        precLPHeader.VALIDATE("Weight Unit of Measure",lrecLPTemplate."Weight Unit of Measure");
        precLPHeader.MODIFY(TRUE);
      END;
    END;

    PROCEDURE updateShipmentFromAssembly@1000000076(VAR precShipmentHeader@1000000000 : Record 7320);
    VAR
      lrecShipmentLine@1000000001 : Record 7321;
      ltrecLicensePlateLine@1000000002 : TEMPORARY Record 23044506;
      ldCalculatedQty@1000000003 : Decimal;
      lrecAssignedLPLine@1000000004 : Record 23044506;
      lrecLicensePlateUsage@1000000005 : Record 23044507;
    BEGIN
      //
      //
      lrecShipmentLine.SETRANGE("No.", precShipmentHeader."No.");
      IF (lrecShipmentLine.FINDSET(TRUE)) THEN BEGIN
        REPEAT
          lrecLicensePlateUsage.RESET;
          lrecLicensePlateUsage.SETRANGE("Source No.", precShipmentHeader."No.");
          IF (lrecLicensePlateUsage.FINDSET(FALSE)) THEN BEGIN
            REPEAT
              lrecAssignedLPLine.GET(lrecLicensePlateUsage."License Plate No.", lrecLicensePlateUsage."License Plate Line No.");
              ltrecLicensePlateLine.RESET;
              ltrecLicensePlateLine.INIT;
              ltrecLicensePlateLine := lrecAssignedLPLine;
              ltrecLicensePlateLine.INSERT;
            UNTIL (lrecLicensePlateUsage.NEXT = 0);
          END;

          IF (ltrecLicensePlateLine.FIND('-')) THEN BEGIN
            ldCalculatedQty := getPossibleAssemblyQuantity(lrecShipmentLine."Item No.", ltrecLicensePlateLine);
            lrecShipmentLine.VALIDATE("Qty. to Ship", lrecShipmentLine."Qty. to Ship" + ldCalculatedQty);
            lrecShipmentLine.MODIFY;
          END;

          ltrecLicensePlateLine.DELETEALL;
        UNTIL (lrecShipmentLine.NEXT = 0);
      END;
    END;

    PROCEDURE unassignReclassSpecificJnlLine@1000000104(VAR precItemJournalLine@1000000000 : Record 83;VAR precLicensePlateLine@1000000003 : Record 23044506);
    VAR
      lrecLPLineUsage@1000000001 : Record 23044507;
      lrecOriginalReclassLine@1000000002 : Record 83;
    BEGIN
      // This method will unassign a license to bin reclassification journal line
      // We need to check source line no
      // if source line no <> 0, mean the current line comes from the source line
      IF (precItemJournalLine."LPM Source Line No." <> 0) THEN BEGIN
         IF (lrecOriginalReclassLine.GET(precItemJournalLine."Journal Template Name", precItemJournalLine."Journal Batch Name",
           precItemJournalLine."LPM Source Line No."))
         THEN BEGIN
           // we need to increase "Quantity Required" on original line with current line
           setWHIQuantityRequired(lrecOriginalReclassLine,
             getWHIQuantityRequired(lrecOriginalReclassLine) + getWHIQuantityRequired(precItemJournalLine));
           lrecOriginalReclassLine.MODIFY(TRUE);
           removeLineUsage(precItemJournalLine);
           precItemJournalLine.DELETE(TRUE);
         END;
      END
      ELSE BEGIN
        precItemJournalLine.VALIDATE("LPM License Plate No.", '');
        setWHIQuantityRequired(precItemJournalLine, precItemJournalLine.Quantity - precLicensePlateLine.Quantity);
        precItemJournalLine."Lot No." := '';
        precItemJournalLine.VALIDATE(Quantity, precItemJournalLine.Quantity - precLicensePlateLine.Quantity);
        precItemJournalLine.MODIFY;
      END;
    END;

    PROCEDURE removeLineUsage@1000000079(precItemJournalLine@1000000000 : Record 83);
    VAR
      lrecLPLineUsage@1000000001 : Record 23044507;
    BEGIN
      // will delete license plate usage associated with item journal line
      lrecLPLineUsage.SETRANGE("License Plate No.", precItemJournalLine."LPM License Plate No.");
      lrecLPLineUsage.SETRANGE("Source No.", precItemJournalLine."Journal Batch Name");
      lrecLPLineUsage.SETRANGE("Source Line No.", precItemJournalLine."Line No.");
      IF( lrecLPLineUsage.FIND('-') ) THEN
        lrecLPLineUsage.DELETEALL;
    END;

    PROCEDURE checkDelete@1000000033(poptSourceDocument@1000000001 : ' ,Purchase Order,Sales Order,Inbound Transfer,Outbound Transfer,Prod. Order,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick,Receipt,Shipment,Reclass,Purchase Return Order,Assembly,Invt. Movement';pcodSourceNo@1000000000 : Code[20];piSourceLineNo@1000000002 : Integer);
    VAR
      ltcCannotDeleteSrc@1000000003 : TextConst 'ENC=Document No.: ''%1'', Line No.: %2 cannot be deleted while License Plate No.: %3 is assigned to it.';
      lrecLPLineUsage@1000000004 : Record 23044507;
    BEGIN
      // Checks to the see if the source document can be deleted.
      // If not an error is generated.
      lrecLPLineUsage.SETRANGE("Posting Date",0D);
      lrecLPLineUsage.SETRANGE("Source Document",poptSourceDocument);
      lrecLPLineUsage.SETRANGE("Source No.",pcodSourceNo);

      IF( piSourceLineNo > 0 ) THEN
        lrecLPLineUsage.SETRANGE("Source Line No.",piSourceLineNo);

      IF( lrecLPLineUsage.FINDFIRST ) THEN BEGIN
        ERROR(ltcCannotDeleteSrc, pcodSourceNo,lrecLPLineUsage."Source Line No.",lrecLPLineUsage."License Plate No.");
      END;
    END;

    PROCEDURE checkDeleteWhseReclassLine@1000000093(poptSourceDocument@1000000001 : ' ,Purchase Order,Sales Order,Inbound Transfer,Outbound Transfer,Prod. Order,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick,Receipt,Shipment,Reclass,Purchase Return Order,Assembly,Invt. Movement';pcodTemplateName@1000000009 : Code[10];pcodSourceNo@1000000000 : Code[20];piSourceLineNo@1000000002 : Integer);
    VAR
      ltcCannotDeleteSrc@1000000003 : TextConst 'ENC=Document No.: ''%1'', Line No.: %2 cannot be deleted while License Plate No.: %3 is assigned to it.';
      lrecLPLineUsage@1000000004 : Record 23044507;
      lrecWhseReclassLine@1000000006 : Record 7311;
      lrecLicensePlateHeader@1000000008 : Record 23044505;
      lrecWhseItemTrackingLine@1000000010 : Record 6550;
      lcodLicensePlateNumber@1000000005 : Code[20];
    BEGIN
      // Checks and delete warehouse reclass lines if exist.

      lrecLPLineUsage.SETRANGE("Posting Date",0D);
      lrecLPLineUsage.SETRANGE("Source Document", poptSourceDocument);
      lrecLPLineUsage.SETRANGE("Source No.", pcodSourceNo);
      IF( piSourceLineNo > 0 ) THEN BEGIN
        lrecLPLineUsage.SETRANGE("Source Line No.", piSourceLineNo);
      END;

      IF( lrecLPLineUsage.FINDFIRST ) THEN BEGIN
        lcodLicensePlateNumber := lrecLPLineUsage."License Plate No.";
      END;

      IF (lcodLicensePlateNumber <> '') THEN BEGIN
        lrecLicensePlateHeader.GET(lcodLicensePlateNumber);
        lrecLPLineUsage.RESET;
        lrecLPLineUsage.SETRANGE("Posting Date",0D);
        lrecLPLineUsage.SETRANGE("License Plate No.", lcodLicensePlateNumber);
        IF (lrecLPLineUsage.FINDSET(TRUE)) THEN BEGIN
          REPEAT
            lrecWhseReclassLine.RESET;
            IF lrecWhseReclassLine.GET(pcodTemplateName, pcodSourceNo, lrecLicensePlateHeader."Location Code", lrecLPLineUsage."Source Line No.") THEN BEGIN
              IF (cuCommonBase.isWhseTracked(lrecWhseReclassLine."Item No.") ) THEN BEGIN
                // delete the tracking entries
                lrecWhseItemTrackingLine.RESET;
                lrecWhseItemTrackingLine.SETRANGE("Location Code", lrecLicensePlateHeader."Location Code");
                lrecWhseItemTrackingLine.SETRANGE("Source Type", DATABASE::"Warehouse Journal Line");

                //These two lines are correct, NAV does the same way.
                lrecWhseItemTrackingLine.SETRANGE("Source ID", lrecWhseReclassLine."Journal Batch Name");
                lrecWhseItemTrackingLine.SETRANGE("Source Batch Name", lrecWhseReclassLine."Journal Template Name");

                lrecWhseItemTrackingLine.SETRANGE("Source Ref. No.", lrecWhseReclassLine."Line No.");
                IF (lrecWhseItemTrackingLine.FIND('-')) THEN BEGIN
                  lrecWhseItemTrackingLine.DELETEALL;
                END;
              END;
            END;
          UNTIL (lrecLPLineUsage.NEXT = 0);
          lrecLPLineUsage.DELETEALL;
        END;
      END;
    END;

    PROCEDURE checkSourceChangeBin@1000000053(poptSourceDocument@1000000002 : ' ,Purchase Order,Sales Order,Inbound Transfer,Outbound Transfer,Prod. Order,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick,Receipt,Shipment,Reclass,Purchase Return Order,Assembly,Invt. Movement';pcodSourceNo@1000000001 : Code[20];piSourceLineNo@1000000000 : Integer;pcodNewBinCode@1000000005 : Code[20]);
    VAR
      lrecLPLineUsage@1000000003 : Record 23044507;
      lrecLPHeader@1000000004 : Record 23044505;
    BEGIN
      // Verifies whether the source document Bin Code can be changed.
      // If the License Plate has a Bin Code set it cannot be changed.

      IF( cuFunctionPerms.isAllowed('Manage License Plates') ) THEN
        EXIT;

      lrecLPLineUsage.SETRANGE("Posting Date",0D);
      lrecLPLineUsage.SETRANGE("Source Document",poptSourceDocument);
      lrecLPLineUsage.SETRANGE("Source No.",pcodSourceNo);

      IF( piSourceLineNo > 0 ) THEN
        lrecLPLineUsage.SETRANGE("Source Line No.",piSourceLineNo);

      IF( lrecLPLineUsage.FINDFIRST ) THEN BEGIN
        lrecLPHeader.GET(lrecLPLineUsage."License Plate No.");
        IF( (lrecLPHeader."Bin Code" <> '') AND (pcodNewBinCode <> lrecLPHeader."Bin Code") ) THEN
          ERROR(tc004, pcodSourceNo,lrecLPLineUsage."Source Line No.",lrecLPLineUsage."License Plate No.");
      END;
    END;

    PROCEDURE checkSourceChangeLocation@1000000057(poptSourceDocument@1000000002 : ' ,Purchase Order,Sales Order,Inbound Transfer,Outbound Transfer,Prod. Order,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick,Receipt,Shipment,Reclass,Purchase Return Order,Assembly,Invt. Movement';pcodSourceNo@1000000001 : Code[20];piSourceLineNo@1000000000 : Integer;pcodNewLocationCode@1000000005 : Code[10]);
    VAR
      lrecLPLineUsage@1000000003 : Record 23044507;
      lrecLPHeader@1000000004 : Record 23044505;
    BEGIN
      // Verifies whether the source document Location Code can be changed.
      // If the License Plate has a Location Code set it cannot be changed.

      IF( cuFunctionPerms.isAllowed('Manage License Plates') ) THEN
        EXIT;

      lrecLPLineUsage.SETRANGE("Posting Date",0D);
      lrecLPLineUsage.SETRANGE("Source Document",poptSourceDocument);
      lrecLPLineUsage.SETRANGE("Source No.",pcodSourceNo);

      IF( piSourceLineNo > 0 ) THEN
        lrecLPLineUsage.SETRANGE("Source Line No.",piSourceLineNo);

      IF( lrecLPLineUsage.FINDFIRST ) THEN BEGIN
        lrecLPHeader.GET(lrecLPLineUsage."License Plate No.");
        IF( (lrecLPHeader."Location Code" <> '') AND (pcodNewLocationCode <> lrecLPHeader."Location Code") ) THEN
          ERROR(tc005, pcodSourceNo,lrecLPLineUsage."Source Line No.",lrecLPLineUsage."License Plate No.");
      END;
    END;

    PROCEDURE validateWhseActivityQtyChange@1000000027(precWhseActivityLine@1000000000 : Record 5767;psSerialNumber@1000000003 : Text);
    VAR
      lrecLineUsage@1000000002 : Record 23044507;
      lrecLPHeader@1000000004 : Record 23044505;
      ldLPQty@1000000001 : Decimal;
    BEGIN
      // Validates that the quantity to handle for the activity line
      // is not reduced below the quantity assigned by license plates.
      checkSerialNumberNotAssigned(psSerialNumber);

      ldLPQty := 0;

      lrecLineUsage.SETCURRENTKEY("Posting Date","Source No.","Source Line No.","Source Document");
      lrecLineUsage.SETFILTER("Posting Date",'%1',0D);
      lrecLineUsage.SETRANGE("Source No.", precWhseActivityLine."No.");
      lrecLineUsage.SETRANGE("Source Line No.",precWhseActivityLine."Line No.");
      IF( precWhseActivityLine."Activity Type" = precWhseActivityLine."Activity Type"::"Put-away" ) THEN
        lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::"Put-away")
      ELSE IF( precWhseActivityLine."Activity Type" = precWhseActivityLine."Activity Type"::Pick ) THEN
        lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::Pick)
      ELSE IF( precWhseActivityLine."Activity Type" = precWhseActivityLine."Activity Type"::Movement ) THEN
        lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::Movement)
      ELSE IF( precWhseActivityLine."Activity Type" = precWhseActivityLine."Activity Type"::"Invt. Put-away" ) THEN
        lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::"Invt. Put-away")
      ELSE
        lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::"Invt. Pick");

      IF( lrecLineUsage.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          lrecLPHeader.RESET;
          lrecLPHeader.GET(lrecLineUsage."License Plate No.");
          IF (lrecLPHeader."Processing State" = lrecLPHeader."Processing State"::" ") THEN BEGIN
            ldLPQty := ldLPQty + lrecLineUsage.Quantity;
          END;
        UNTIL( lrecLineUsage.NEXT=0 );
      END
      ELSE
        EXIT;

      IF(precWhseActivityLine."Qty. to Handle" < ldLPQty) THEN
        ERROR(tcLPMinQty,precWhseActivityLine.FIELDNAME("Qty. to Handle"),ldLPQty);
    END;

    PROCEDURE validateWhseReceiptQtyChange@1000000031(precWhseReceiptLine@1000000000 : Record 7317;psSerialNumber@1000000003 : Text);
    VAR
      lrecLineUsage@1000000001 : Record 23044507;
      lrecLPHeader@1000000004 : Record 23044505;
      ldLPQty@1000000002 : Decimal;
    BEGIN
      // Validates that the quantity to handle for the receipt line
      // is not reduced below the quantity assigned by license plates.
      checkSerialNumberNotAssigned(psSerialNumber);

      ldLPQty := 0;

      lrecLineUsage.SETCURRENTKEY("Posting Date","Source No.","Source Line No.","Source Document");
      lrecLineUsage.SETFILTER("Posting Date",'%1',0D);
      lrecLineUsage.SETRANGE("Source No.", precWhseReceiptLine."No.");
      lrecLineUsage.SETRANGE("Source Line No.",precWhseReceiptLine."Line No.");
      lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::Receipt);

      IF( lrecLineUsage.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          lrecLPHeader.RESET;
          lrecLPHeader.GET(lrecLineUsage."License Plate No.");
          IF (lrecLPHeader."Processing State" = lrecLPHeader."Processing State"::" ") THEN BEGIN
            ldLPQty := ldLPQty + lrecLineUsage.Quantity;
          END;
        UNTIL( lrecLineUsage.NEXT=0 );
      END
      ELSE
        EXIT;

      IF(precWhseReceiptLine."Qty. to Receive" < ldLPQty) THEN
        ERROR(tcLPMinQty,precWhseReceiptLine.FIELDNAME("Qty. to Receive"),ldLPQty);
    END;

    PROCEDURE validateWhseShipmentQtyChange@1000000052(precWhseShipmentLine@1000000000 : Record 7321;psSerialNumber@1000000003 : Text);
    VAR
      lrecLineUsage@1000000001 : Record 23044507;
      lrecLPHeader@1000000004 : Record 23044505;
      ldLPQty@1000000002 : Decimal;
    BEGIN
      // Validates that the quantity to handle for the shipment line
      // is not reduced below the quantity assigned by license plates.
      checkSerialNumberNotAssigned(psSerialNumber);

      ldLPQty := 0;

      lrecLineUsage.SETCURRENTKEY("Posting Date","Source No.","Source Line No.","Source Document");
      lrecLineUsage.SETFILTER("Posting Date",'%1',0D);
      lrecLineUsage.SETRANGE("Source No.", precWhseShipmentLine."No.");
      lrecLineUsage.SETRANGE("Source Line No.",precWhseShipmentLine."Line No.");
      lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::Shipment);

      IF( lrecLineUsage.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          lrecLPHeader.RESET;
          lrecLPHeader.GET(lrecLineUsage."License Plate No.");
          IF (lrecLPHeader."Processing State" = lrecLPHeader."Processing State"::" ") THEN BEGIN
            ldLPQty := ldLPQty + lrecLineUsage.Quantity;
          END;
        UNTIL( lrecLineUsage.NEXT=0 );
      END
      ELSE
        EXIT;

      IF( ldLPQty = 0 ) THEN
        EXIT;

      IF (precWhseShipmentLine."Qty. to Ship" < ldLPQty) THEN
        ERROR(tcLPMinQty,precWhseShipmentLine.FIELDNAME("Qty. to Ship"),ldLPQty);
    END;

    PROCEDURE validatePurchaseLineQtyChange@1000000035(precPurchaseLine@1000000000 : Record 39;psSerialNumber@1000000003 : Text);
    VAR
      lrecLineUsage@1000000001 : Record 23044507;
      lrecLPHeader@1000000004 : Record 23044505;
      ldLPQty@1000000002 : Decimal;
    BEGIN
      // Validates that the quantity to handle for the purchase line
      // is not reduced below the quantity assigned by license plates.
      checkSerialNumberNotAssigned(psSerialNumber);
      ldLPQty := 0;
      lrecLineUsage.SETCURRENTKEY("Posting Date","Source No.","Source Line No.","Source Document");
      lrecLineUsage.SETFILTER("Posting Date",'%1',0D);
      lrecLineUsage.SETRANGE("Source No.", precPurchaseLine."Document No.");
      lrecLineUsage.SETRANGE("Source Line No.",precPurchaseLine."Line No.");
      lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::"Purchase Order");

      IF( lrecLineUsage.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          lrecLPHeader.RESET;
          lrecLPHeader.GET(lrecLineUsage."License Plate No.");
          IF (lrecLPHeader."Processing State" = lrecLPHeader."Processing State"::" ") THEN BEGIN
            ldLPQty := ldLPQty + lrecLineUsage.Quantity;
          END;
        UNTIL( lrecLineUsage.NEXT=0 );
      END
      ELSE
        EXIT;

      IF (precPurchaseLine."Qty. to Receive" < ldLPQty) THEN
        ERROR(tcLPMinQty,precPurchaseLine.FIELDNAME("Qty. to Receive"),ldLPQty);
    END;

    PROCEDURE validateSalesLineQtyChange@1000000036(precSalesLine@1000000000 : Record 37;psSerialNumber@1000000003 : Text);
    VAR
      lrecLineUsage@1000000001 : Record 23044507;
      lrecLPHeader@1000000004 : Record 23044505;
      ldLPQty@1000000002 : Decimal;
    BEGIN
      // Validates that the quantity to handle for the sales line
      // is not reduced below the quantity assigned by license plates.

      IF ( isAssembleToOrder(precSalesLine) ) THEN
        EXIT; //<IW author="MM" date="02/15/2018" issue="TFS3804" />

      checkSerialNumberNotAssigned(psSerialNumber);
      ldLPQty := 0;
      lrecLineUsage.SETCURRENTKEY("Posting Date","Source No.","Source Line No.","Source Document");
      lrecLineUsage.SETFILTER("Posting Date",'%1',0D);
      lrecLineUsage.SETRANGE("Source No.", precSalesLine."Document No.");
      lrecLineUsage.SETRANGE("Source Line No.",precSalesLine."Line No.");
      lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::"Sales Order");
      IF( lrecLineUsage.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          //<IW author="Howie Zhao" date="09/09/16" issue="TFS2673" >
          lrecLPHeader.RESET;
          lrecLPHeader.GET(lrecLineUsage."License Plate No.");
          IF (lrecLPHeader."Processing State" = lrecLPHeader."Processing State"::" ") THEN BEGIN
            ldLPQty := ldLPQty + lrecLineUsage.Quantity;
          END;
        UNTIL( lrecLineUsage.NEXT=0 );
      END
      ELSE
        EXIT;

      IF( precSalesLine.Quantity >= 0 ) THEN BEGIN
        IF (precSalesLine."Qty. to Ship" < ldLPQty ) THEN
          ERROR(tcLPMinQty,precSalesLine.FIELDNAME("Qty. to Ship"),ldLPQty);
      END
      ELSE BEGIN
        IF( precSalesLine."Qty. to Ship" > ldLPQty ) THEN
          ERROR(tcLPMaxQty,precSalesLine.FIELDNAME("Qty. to Ship"),ldLPQty);
      END;
    END;

    PROCEDURE validateTransferLineQtyChange@1000000038(precTransferLine@1000000000 : Record 5741;psSerialNumber@1000000004 : Text;pbShipping@1000000003 : Boolean);
    VAR
      lrecLineUsage@1000000001 : Record 23044507;
      lrecLPHeader@1000000005 : Record 23044505;
      ldLPQty@1000000002 : Decimal;
    BEGIN
      // Validates that the quantity to handle for the transfer line
      // is not reduced below the quantity assigned by license plates.
      checkSerialNumberNotAssigned(psSerialNumber);
      ldLPQty := 0;

      lrecLineUsage.SETCURRENTKEY("Posting Date","Source No.","Source Line No.","Source Document");
      lrecLineUsage.SETFILTER("Posting Date",'%1',0D);
      lrecLineUsage.SETRANGE("Source No.", precTransferLine."Document No.");
      lrecLineUsage.SETRANGE("Source Line No.",precTransferLine."Line No.");

      IF( pbShipping ) THEN
        lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::"Outbound Transfer")
      ELSE
        lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::"Inbound Transfer");

      IF( lrecLineUsage.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          //<IW author="Howie Zhao" date="09/09/16" issue="TFS2673" >
          lrecLPHeader.RESET;
          lrecLPHeader.GET(lrecLineUsage."License Plate No.");
          IF (lrecLPHeader."Processing State" = lrecLPHeader."Processing State"::" ") THEN BEGIN
            ldLPQty := ldLPQty + lrecLineUsage.Quantity;
          END;
        UNTIL( lrecLineUsage.NEXT=0 );
      END
      ELSE
        EXIT;

      IF( pbShipping ) THEN BEGIN
        IF (precTransferLine."Qty. to Ship" < ldLPQty) THEN
          ERROR(tcLPMinQty,precTransferLine.FIELDNAME("Qty. to Ship"),ldLPQty);
      END
      ELSE BEGIN
        IF( precTransferLine."Qty. to Receive" < ldLPQty ) THEN
          ERROR(tcLPMinQty,precTransferLine.FIELDNAME("Qty. to Receive"),ldLPQty);
      END;
    END;

    PROCEDURE validateReclassLineQtyChange@1000000072(precItemJournalLine@1000000000 : Record 83);
    VAR
      lrecLineUsage@1000000001 : Record 23044507;
      lrecLPHeader@1000000003 : Record 23044505;
      ldLPQty@1000000002 : Decimal;
    BEGIN
      // Validates that the quantity to handle for the reclass line
      // is not reduced below the quantity assigned by license plates.
      ldLPQty := 0;

      lrecLineUsage.SETFILTER("Posting Date",'%1',0D);
      lrecLineUsage.SETRANGE("Source No.", precItemJournalLine."Journal Batch Name");
      lrecLineUsage.SETRANGE("Source Line No.",precItemJournalLine."Line No.");
      lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::Reclass);

      IF( lrecLineUsage.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          //<IW author="Howie Zhao" date="09/09/16" issue="TFS2673" >
          lrecLPHeader.RESET;
          lrecLPHeader.GET(lrecLineUsage."License Plate No.");
          IF (lrecLPHeader."Processing State" = lrecLPHeader."Processing State"::" ") THEN BEGIN
            ldLPQty := ldLPQty + lrecLineUsage.Quantity;
          END;
        UNTIL( lrecLineUsage.NEXT=0 );

        IF (precItemJournalLine.Quantity < ldLPQty) THEN
          ERROR(tcLPMinQty,precItemJournalLine.FIELDNAME(Quantity),ldLPQty);
      END
    END;

    PROCEDURE checkSerialNumberNotAssigned@1000000024(psSerialNumber@1000000000 : Text);
    VAR
      lrecLineUsage@1000000001 : Record 23044507;
      lrecLicensePlateLine@1000000002 : Record 23044506;
    BEGIN
      // Checks to see if the Serial Number is assigned to an active license plate
      // and if so will generate an error.  This routine should only be called
      // during a manual reduction in qty.
      psSerialNumber := UPPERCASE(psSerialNumber);

      IF( psSerialNumber = '' ) THEN
        EXIT;

      lrecLicensePlateLine.RESET();
      lrecLicensePlateLine.SETRANGE( "Serial No.", psSerialNumber );
      IF ( lrecLicensePlateLine.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          lrecLineUsage.RESET();
          lrecLineUsage.SETFILTER("Posting Date",'%1',0D);
          lrecLineUsage.SETRANGE("License Plate Line No.", lrecLicensePlateLine."Line No." );
          lrecLineUsage.SETRANGE("License Plate No.", lrecLicensePlateLine."License Plate No." );
          IF ( lrecLineUsage.FINDFIRST() ) THEN BEGIN
            ERROR(tcSerialNumberAssigned,psSerialNumber,lrecLineUsage."License Plate No.");
          END; // if we have a matching, unposted usage
        UNTIL( lrecLicensePlateLine.NEXT() = 0 );

      END; // if we have any matching license plate lines.
    END;

    PROCEDURE getBinSelection@1000000064(VAR ptrecLPBinSelect@1000000000 : TEMPORARY Record 23044513;VAR pcodLocationCode@1000000002 : Code[10];VAR pcodBinCode@1000000001 : Code[20];pbTakeMode@1000000007 : Boolean) : Boolean;
    VAR
      lpgChooseBin@1000000004 : Page 23044518;
      lbMoreThanOneBin@1000000003 : Boolean;
      lrecBin@1000000005 : Record 7354;
      lbProceed@1000000006 : Boolean;
    BEGIN
      // Shows the user a page asking them to choose the bin to
      // apply a license plate too.  If there is only one bin
      // the page will not be displayed.
      pcodLocationCode := '';
      pcodBinCode := '';

      lbMoreThanOneBin := lpgChooseBin.init(ptrecLPBinSelect, pbTakeMode);
      lbProceed := TRUE;

      IF( lbMoreThanOneBin ) THEN BEGIN
        lpgChooseBin.LOOKUPMODE(TRUE);
        IF( lpgChooseBin.RUNMODAL = ACTION::LookupOK ) THEN BEGIN
          lpgChooseBin.GETRECORD(lrecBin);
          pcodLocationCode := lrecBin."Location Code";
          pcodBinCode := lrecBin.Code;
        END
        ELSE
          lbProceed := FALSE;
      END
      ELSE BEGIN
        pcodLocationCode := ptrecLPBinSelect."Location Code";
        pcodBinCode := ptrecLPBinSelect."Bin Code";
      END;

      EXIT(lbProceed);
    END;

    PROCEDURE assignLP@1000000012(poptSourceDocument@1000000001 : ' ,Purchase Order,Sales Order,Inbound Transfer,Outbound Transfer,Prod. Order,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick,Receipt,Shipment,Reclass,Purchase Return Order,Assembly,Invt. Movement';pcodSourceNo@1000000000 : Code[20];pcodLocationCode@1000000017 : Code[10];pcodBinCode@1000000016 : Code[20];pbDualAssignment@1000000018 : Boolean;pcodLPNumber@1000000020 : Code[20]) pcodOutLicensePlateNo : Code[20];
    VAR
      lrecLPHeader@1000000002 : Record 23044505;
      lrecPurchLine@1000000023 : Record 39;
      lrecTransLine@1000000024 : Record 5741;
      lpgLPList@1000000003 : Page 23044512;
      ltrecLPLineTemp@1000000005 : TEMPORARY Record 23044506;
      ltrecLPHeaderTemp@1000000025 : TEMPORARY Record 23044505;
      lrecLPLine@1000000006 : Record 23044506;
      lrecPurchHeader@1000000004 : Record 38;
      lrecSalesHeader@1000000007 : Record 36;
      lrecTransHeader@1000000008 : Record 5740;
      liSelected@1000000009 : Integer;
      lrecWhseActivityHeader@1000000010 : Record 5766;
      lrecSrcActivityLine@1000000011 : Record 5767;
      lrecWhseShipmentHeader@1000000012 : Record 7320;
      lrecWhseShipLine@1000000013 : Record 7321;
      lrecWhseReceiptHeader@1000000014 : Record 7316;
      lrecWhseReceiptLine@1000000015 : Record 7317;
      ltcAlreadyDualAssigned@1000000019 : TextConst 'ENU=License Plate ''%1'' has already been applied.;FRC=Palette ''%1'' a d‚j… ‚t‚ appliqu‚.';
      lrecLPSetup@1000000021 : Record 23044523;
      lbOverrideQuantity@1000000022 : Boolean;
    BEGIN
      // Assigns a license plate to the requested document.
      IF( pcodLPNumber = '' ) THEN BEGIN
        lrecLPHeader.FILTERGROUP(2);

        IF( poptSourceDocument IN
              [poptSourceDocument::Receipt,poptSourceDocument::"Inbound Transfer",poptSourceDocument::"Purchase Order"] ) THEN BEGIN
          lrecLPHeader.SETFILTER(Status,'%1|%2',lrecLPHeader.Status::" ",lrecLPHeader.Status::Shipped);
        END
        ELSE BEGIN
          lrecLPHeader.SETRANGE(Status,lrecLPHeader.Status::" ");
        END;

        IF( pbDualAssignment ) THEN BEGIN
          // force the previous assignment
          lrecLPHeader.SETRANGE("Source Document Type",poptSourceDocument);  //<IW author="R.Trudeau" date="01/09/19" issue="TFS4338" />
          lrecLPHeader.SETRANGE("Source Document No.",pcodSourceNo);         //<IW author="R.Trudeau" date="01/09/19" issue="TFS4338" />
        END
        ELSE BEGIN
          lrecLPHeader.SETRANGE("Source Document Type",lrecLPHeader."Source Document Type"::" "); //<IW author="R.Trudeau" date="01/09/19" issue="TFS4338" />
        END;
        IF( poptSourceDocument <> poptSourceDocument::Reclass ) THEN BEGIN
          lrecLPHeader.SETFILTER("Location Code",'%1|%2','',pcodLocationCode);
          IF( NOT pbDualAssignment ) THEN BEGIN
            lrecLPHeader.SETFILTER("Bin Code",'%1|%2','',pcodBinCode);
          END;
        END
        ELSE BEGIN
          lrecLPHeader.SETFILTER("Location Code",'<>%1','');
        END;

        lrecLPHeader.FILTERGROUP(0);

        lpgLPList.SETTABLEVIEW(lrecLPHeader);
        lpgLPList.LOOKUPMODE(TRUE);

        IF( lpgLPList.RUNMODAL <> ACTION::LookupOK ) THEN BEGIN
          EXIT;
        END;

        lpgLPList.GETRECORD(lrecLPHeader);

        // make sure not already 'dual' assigned
        IF( pbDualAssignment ) THEN BEGIN
          lrecLPHeader.CALCFIELDS("Total Line Usage Qty.", "Item Quantity Count");
          IF( lrecLPHeader."Total Line Usage Qty." > lrecLPHeader."Item Quantity Count" ) THEN BEGIN
            ERROR(ltcAlreadyDualAssigned,lrecLPHeader."No.");
          END;
        END;
      END
      ELSE BEGIN
        lrecLPHeader.GET(pcodLPNumber);
      END;

      RemoveEmbeddedLPFromParent(lrecLPHeader); //<IW author="R.Trudeau" date="01/09/19" issue="TFS4338" />

      // At this point lrecLPHeader will be set, and represent the license
      // plate to assign to.
      // So, set the return value.
      pcodOutLicensePlateNo := lrecLPHeader."No.";


      GetEmbeddedLPLinesForAssignment(lrecLPHeader, ltrecLPLineTemp, ltrecLPHeaderTemp); //<IW author="R.Trudeau" date="01/09/19" issue="TFS4338" />


      lrecLPSetup.GET;
      IF (lrecLPSetup."Transfer Order Surplus" = lrecLPSetup."Transfer Order Surplus"::"Allow Update Document") THEN BEGIN
        lbOverrideQuantity := TRUE;
      END
      ELSE BEGIN
        lbOverrideQuantity := FALSE;
      END;

      // do the assignment now
      CASE poptSourceDocument OF
        poptSourceDocument::"Purchase Order":
          BEGIN
            lrecPurchHeader.GET(lrecPurchHeader."Document Type"::Order, pcodSourceNo);
            // ignore bins likely turned on, find first line and use that
            IF pcodBinCode = '' THEN BEGIN
              lrecPurchLine.SETRANGE("Document Type",lrecPurchHeader."Document Type");
              lrecPurchLine.SETRANGE("Document No.",lrecPurchHeader."No.");
              lrecPurchLine.SETRANGE(Type,lrecPurchLine.Type::Item);
              lrecPurchLine.SETFILTER("No.",'<>%1','');
              lrecPurchLine.SETRANGE("Location Code",pcodLocationCode);
              IF lrecPurchLine.FINDFIRST THEN
                pcodBinCode := lrecPurchLine."Bin Code";
            END;

            updatePurchaseLinesCode(
              lrecPurchHeader."Location Code"
              ,pcodSourceNo
              ,lrecLPHeader."No."
              ,pcodBinCode
              ,FALSE // Override Blank Bin //
              ,ltrecLPLineTemp
              ,ltrecLPHeaderTemp  //<IW author="R.Trudeau" date="01/09/19" issue="TFS4338" />
            );
          END;
        poptSourceDocument::"Sales Order":
          BEGIN
            lrecSalesHeader.GET(lrecSalesHeader."Document Type"::Order, pcodSourceNo);

            updateSalesLinesCode(
              pcodLocationCode
              ,lrecSalesHeader."No."
              ,lrecLPHeader."No."
              ,pcodBinCode
              ,FALSE  // Override Blank Bins //
              ,ltrecLPLineTemp
              ,ltrecLPHeaderTemp  //<IW author="R.Trudeau" date="01/09/19" issue="TFS4338" />
            );
          END;
        poptSourceDocument::"Inbound Transfer":
          BEGIN
            lrecTransHeader.GET(pcodSourceNo);

            // ignore bins likely turned on, find first line and use that
            IF pcodBinCode = '' THEN BEGIN
              lrecTransLine.SETRANGE("Document No.",lrecTransHeader."No.");
              lrecTransLine.SETFILTER("Item No.",'<>%1','');
              lrecTransLine.SETRANGE("Transfer-to Code",pcodLocationCode);
              IF lrecTransLine.FINDFIRST THEN
                pcodBinCode := lrecTransLine."Transfer-To Bin Code";
            END;

            updateTransferLinesCode(
              lrecTransHeader."Transfer-to Code"
              ,pcodSourceNo
              ,lrecLPHeader."No."
              ,FALSE
              ,pcodBinCode
              ,FALSE // Override Blank Bin //
              ,ltrecLPLineTemp
              ,lbOverrideQuantity
              ,FALSE //<IW author="h.z" date="03/09/16" issue="TFS2265" />
              ,ltrecLPHeaderTemp  //<IW author="R.Trudeau" date="01/09/19" issue="TFS4338" />
            );
          END;
        poptSourceDocument::"Outbound Transfer":
          BEGIN
            lrecTransHeader.GET(pcodSourceNo);
            updateTransferLinesCode(
              lrecTransHeader."Transfer-from Code"
              ,pcodSourceNo
              ,lrecLPHeader."No."
              ,TRUE
              ,pcodBinCode
              ,FALSE // Override Blank Bin //
              ,ltrecLPLineTemp
              ,lbOverrideQuantity
              ,FALSE  //<IW author="h.z" date="03/09/16" issue="TFS2265" />
              ,ltrecLPHeaderTemp  //<IW author="R.Trudeau" date="01/09/19" issue="TFS4338" />
            );
          END;
        poptSourceDocument::Pick:
          BEGIN
            lrecWhseActivityHeader.GET(lrecWhseActivityHeader.Type::Pick,pcodSourceNo);
            lrecSrcActivityLine.SETRANGE("Activity Type",lrecSrcActivityLine."Activity Type"::Pick);
            lrecSrcActivityLine.SETRANGE("No.",pcodSourceNo);

            lrecSrcActivityLine.SETRANGE("Bin Code",pcodBinCode);

            IF( pbDualAssignment ) THEN BEGIN
              lrecSrcActivityLine.SETRANGE("Action Type",lrecSrcActivityLine."Action Type"::Place)
            END ELSE BEGIN
              lrecSrcActivityLine.SETFILTER("Action Type",'%1|%2',lrecSrcActivityLine."Action Type"::" ",
                lrecSrcActivityLine."Action Type"::Take);
            END;

            IF( lrecSrcActivityLine.FINDFIRST ) THEN BEGIN
              updateWhseActivityLinesCode(
                  lrecWhseActivityHeader."Location Code",
                  lrecLPHeader."No.",
                  lrecSrcActivityLine,
                  lrecSrcActivityLine."Bin Code",
                  TRUE, // auto ship
                  FALSE, // auto take place //
                  ltrecLPLineTemp
                  ,ltrecLPHeaderTemp  //<IW author="R.Trudeau" date="01/09/19" issue="TFS4338" />
                  );
            END;
          END;

        poptSourceDocument::"Invt. Pick":
          BEGIN
            lrecWhseActivityHeader.GET(lrecWhseActivityHeader.Type::"Invt. Pick",pcodSourceNo);
            lrecSrcActivityLine.SETRANGE("Activity Type",lrecSrcActivityLine."Activity Type"::"Invt. Pick");
            lrecSrcActivityLine.SETRANGE("No.",pcodSourceNo);

            lrecSrcActivityLine.SETRANGE("Bin Code",pcodBinCode);
            lrecSrcActivityLine.SETFILTER("Action Type",'%1|%2',
              lrecSrcActivityLine."Action Type"::" ",
              lrecSrcActivityLine."Action Type"::Take);

            IF( lrecSrcActivityLine.FINDFIRST ) THEN BEGIN
              updateWhseActivityLinesCode(
                  lrecWhseActivityHeader."Location Code",
                  lrecLPHeader."No.",
                  lrecSrcActivityLine,
                  lrecSrcActivityLine."Bin Code",
                  FALSE, // auto ship
                  FALSE, // auto take place
                  ltrecLPLineTemp
                  ,ltrecLPHeaderTemp  //<IW author="R.Trudeau" date="01/09/19" issue="TFS4338" />
                  );
            END;
          END;

        poptSourceDocument::Movement:
          BEGIN
            lrecWhseActivityHeader.GET(lrecWhseActivityHeader.Type::Movement,pcodSourceNo);
            lrecSrcActivityLine.SETRANGE("Activity Type",lrecSrcActivityLine."Activity Type"::Movement);
            lrecSrcActivityLine.SETRANGE("No.",pcodSourceNo);
            lrecSrcActivityLine.SETRANGE("Bin Code",pcodBinCode);

            IF( pbDualAssignment ) THEN BEGIN
              lrecSrcActivityLine.SETRANGE("Action Type",lrecSrcActivityLine."Action Type"::Place)
            END ELSE BEGIN
              lrecSrcActivityLine.SETFILTER("Action Type",'%1|%2',
                            lrecSrcActivityLine."Action Type"::" ",
                lrecSrcActivityLine."Action Type"::Take);
            END;
            IF( lrecSrcActivityLine.FINDFIRST ) THEN BEGIN
              updateWhseActivityLinesCode(
                  lrecWhseActivityHeader."Location Code",
                  lrecLPHeader."No.",
                  lrecSrcActivityLine,
                  lrecSrcActivityLine."Bin Code",
                  FALSE, // auto ship
                  FALSE, // auto take place
                  ltrecLPLineTemp
                  ,ltrecLPHeaderTemp  //<IW author="R.Trudeau" date="01/09/19" issue="TFS4338" />
                  );
            END;
          END;
        poptSourceDocument::"Put-away":
          BEGIN
            lrecWhseActivityHeader.GET(lrecWhseActivityHeader.Type::"Put-away",pcodSourceNo);
            lrecSrcActivityLine.SETRANGE("Activity Type",lrecSrcActivityLine."Activity Type"::"Put-away");
            lrecSrcActivityLine.SETRANGE("No.",pcodSourceNo);

            lrecSrcActivityLine.SETRANGE("Bin Code",pcodBinCode);

            IF( pbDualAssignment ) THEN BEGIN
              lrecSrcActivityLine.SETRANGE("Action Type",lrecSrcActivityLine."Action Type"::Place)
            END ELSE BEGIN
              lrecSrcActivityLine.SETFILTER("Action Type",'%1|%2',
                lrecSrcActivityLine."Action Type"::" ",
                lrecSrcActivityLine."Action Type"::Take);
            END;

            IF( lrecSrcActivityLine.FINDFIRST ) THEN BEGIN
              updateWhseActivityLinesCode(
                  lrecWhseActivityHeader."Location Code",
                  lrecLPHeader."No.",
                  lrecSrcActivityLine,
                  lrecSrcActivityLine."Bin Code",
                  FALSE, // auto ship
                  FALSE, // auto take place
                  ltrecLPLineTemp
                  ,ltrecLPHeaderTemp  //<IW author="R.Trudeau" date="01/09/19" issue="TFS4338" />
                  );
            END;
          END;

        poptSourceDocument::"Invt. Put-away":
          BEGIN
            lrecWhseActivityHeader.GET(lrecWhseActivityHeader.Type::"Invt. Put-away",pcodSourceNo);
            lrecSrcActivityLine.SETRANGE("Activity Type",lrecSrcActivityLine."Activity Type"::"Invt. Put-away");
            lrecSrcActivityLine.SETRANGE("No.",pcodSourceNo);
            lrecSrcActivityLine.SETRANGE("Action Type",lrecSrcActivityLine."Action Type"::Place);

            lrecSrcActivityLine.SETRANGE("Bin Code",pcodBinCode);

            IF( lrecSrcActivityLine.FINDFIRST ) THEN BEGIN
              updateWhseActivityLinesCode(
                  lrecWhseActivityHeader."Location Code",
                  lrecLPHeader."No.",
                  lrecSrcActivityLine,
                  lrecSrcActivityLine."Bin Code",
                  FALSE, // auto ship
                  FALSE, // auto take place
                  ltrecLPLineTemp
                  ,ltrecLPHeaderTemp  //<IW author="R.Trudeau" date="01/09/19" issue="TFS4338" />
                  );
            END;
          END;

        poptSourceDocument::Shipment:
          BEGIN
            lrecWhseShipmentHeader.GET(pcodSourceNo);
            lrecWhseShipLine.SETRANGE("No.",pcodSourceNo);

            IF( lrecWhseShipLine.FINDFIRST ) THEN BEGIN
              updateWhseShipmentLinesCode(
                lrecWhseShipLine."Location Code"
                ,lrecLPHeader."No."
                ,lrecWhseShipLine
                ,pcodBinCode
                , FALSE // Override Blank bin //
                ,ltrecLPLineTemp
                ,ltrecLPHeaderTemp  //<IW author="R.Trudeau" date="01/09/19" issue="TFS4338" />
              );
            END;
          END;
        poptSourceDocument::Receipt:
          BEGIN
            lrecWhseReceiptHeader.GET(pcodSourceNo);
            lrecWhseReceiptLine.SETRANGE("No.",pcodSourceNo);

            IF( lrecWhseReceiptLine.FINDFIRST ) THEN BEGIN

              // ignore bins likely turned on, find first line and use that
              IF pcodBinCode = '' THEN
                pcodBinCode := lrecWhseReceiptLine."Bin Code";


              updateWhseReceiptLinesCode(
                lrecWhseReceiptLine."Location Code",
                lrecLPHeader."No.",
                lrecWhseReceiptLine
                ,pcodBinCode
                ,FALSE // Override Blank Bin //
                , ltrecLPLineTemp
                ,ltrecLPHeaderTemp  //<IW author="R.Trudeau" date="01/09/19" issue="TFS4338" />
              );
            END;
          END;


        poptSourceDocument::Reclass:
          BEGIN
            lrecLPHeader.TESTFIELD("Location Code");
            lrecLPHeader.TESTFIELD("Bin Code");

            updateReclassLinesCode(
              lrecLPHeader."No.",
              TRUE, // take
              pcodSourceNo, // batch number
              lrecLPHeader."Location Code",
              lrecLPHeader."Bin Code",
              '', // new location
              '', // new bin
              TRUE,  // force item tracking
              ltrecLPLineTemp,
              '', // USE DEFAULT template
              FALSE, // Adjust quantity, not quantity required
              0,  // No connection to another journal line required
              ''  // Source Code  //
              ,ltrecLPHeaderTemp  //<IW author="R.Trudeau" date="01/09/19" issue="TFS4338" />
              );
          END;
        poptSourceDocument::"Prod. Order":
          BEGIN
             // Not used for now, output assignment is not
             // recorded on the license plate usage table, instead
             // it is on the license plate field directly on the
             // item journal line.
             //
          END;
        poptSourceDocument::"Purchase Return Order":
          BEGIN
            lrecPurchHeader.GET(lrecPurchHeader."Document Type"::"Return Order", pcodSourceNo);
            updatePurchaseReturnLinesCode(lrecPurchHeader."Location Code",pcodSourceNo
              ,lrecLPHeader."No."
              ,pcodBinCode
              ,FALSE
              ,ltrecLPLineTemp
              ,ltrecLPHeaderTemp  //<IW author="R.Trudeau" date="01/09/19" issue="TFS4338" />
            );
          END;
          poptSourceDocument::"Invt. Movement":
          BEGIN

            lrecWhseActivityHeader.GET(lrecWhseActivityHeader.Type::"Invt. Movement", pcodSourceNo);
            lrecSrcActivityLine.SETRANGE("Activity Type", lrecSrcActivityLine."Activity Type"::"Invt. Movement");
            lrecSrcActivityLine.SETRANGE("No.", pcodSourceNo);
            lrecSrcActivityLine.SETRANGE("Bin Code", pcodBinCode);

            IF( pbDualAssignment ) THEN BEGIN
              lrecSrcActivityLine.SETRANGE("Action Type",lrecSrcActivityLine."Action Type"::Place)
            END ELSE BEGIN
              lrecSrcActivityLine.SETFILTER("Action Type",'%1|%2', lrecSrcActivityLine."Action Type"::" ", lrecSrcActivityLine."Action Type"::Take);
            END;
            IF( lrecSrcActivityLine.FINDFIRST ) THEN BEGIN
              updateWhseActivityLinesCode(
                  lrecWhseActivityHeader."Location Code",
                  lrecLPHeader."No.",
                  lrecSrcActivityLine,
                  lrecSrcActivityLine."Bin Code",
                  FALSE, // auto ship
                  FALSE, // auto take place
                  ltrecLPLineTemp
                  ,ltrecLPHeaderTemp
                  );
            END;
          END;
      END;

      // cannot be assigned and shipped
      IF( lrecLPHeader.GET(lrecLPHeader."No.") ) THEN BEGIN // refetch since may have changed
        IF( lrecLPHeader.Status = lrecLPHeader.Status::Shipped ) THEN BEGIN
          lrecLPHeader.Status := lrecLPHeader.Status::" ";
          lrecLPHeader.MODIFY;
        END;
      END;
    END;

    PROCEDURE assignToSalesOrder@1000000054(precSalesHeader@1000000000 : Record 36);
    VAR
      lrecSalesLine@1000000002 : Record 37;
      ltrecLPBinSelect@1000000001 : TEMPORARY Record 23044513;
      lcodBinCode@1000000005 : Code[20];
      lcodLocationCode@1000000008 : Code[10];
    BEGIN
      // Prompts the user to select bin (if required) and license plate.
      // Then assigns the license plate to the sales document based on that selection.
      lrecSalesLine.SETRANGE("Document Type",precSalesHeader."Document Type");
      lrecSalesLine.SETRANGE("Document No.",precSalesHeader."No.");
      lrecSalesLine.SETRANGE(Type,lrecSalesLine.Type::Item);
      lrecSalesLine.SETFILTER("No.",'<>%1','');

      IF( lrecSalesLine.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
           ltrecLPBinSelect.INIT;
           ltrecLPBinSelect."Line No." := lrecSalesLine."Line No.";
           ltrecLPBinSelect."Location Code" := lrecSalesLine."Location Code";
           ltrecLPBinSelect."Bin Code" := lrecSalesLine."Bin Code";
           ltrecLPBinSelect."Item No." := lrecSalesLine."No.";
           ltrecLPBinSelect."Variant Code" := lrecSalesLine."Variant Code";
           ltrecLPBinSelect.Description := lrecSalesLine.Description;
           ltrecLPBinSelect."Description 2" := lrecSalesLine."Description 2";
           ltrecLPBinSelect.Quantity := lrecSalesLine.Quantity;
           ltrecLPBinSelect.INSERT;

        UNTIL(lrecSalesLine.NEXT=0);
      END;

      IF( getBinSelection(ltrecLPBinSelect, lcodLocationCode,lcodBinCode, TRUE) ) THEN
        assignLP(optSourceDocument::"Sales Order", precSalesHeader."No.", lcodLocationCode, lcodBinCode,FALSE,'');
    END;

    PROCEDURE assignToTransferOrder@1000000058(precTransferHeader@1000000000 : Record 5740;pbOutbound@1000000003 : Boolean);
    VAR
      lrecTransferLine@1000000002 : Record 5741;
      ltrecLPBinSelect@1000000001 : TEMPORARY Record 23044513;
      lcodBinCode@1000000005 : Code[20];
      lcodLocationCode@1000000008 : Code[10];
      lrecLPSetup@1000000004 : Record 23044523;
      lrecLocationFrom@1000000006 : Record 14;
      lrecLocationTo@1000000007 : Record 14;
      lrecLPLine@1000000009 : Record 23044506;
      lrecLPHeader@1000000010 : Record 23044505;
      liCounter@1000000011 : Integer;
    BEGIN
      // Prompts the user to select bin (if required) and license plate.
      // Then assigns the license plate to the transfer document based on that selection.
      lrecLPSetup.GET();
      liCounter := 100;
      IF ( lrecLPSetup."Transfer Order Surplus" = lrecLPSetup."Transfer Order Surplus"::Prevent ) THEN BEGIN
        //
        // This is standard NAV, and typical behavior, where we ensure that the license plate
        // fits the need.
        //
        //
        // build up the temporary table of bins/lines
        //
        lrecTransferLine.SETRANGE("Document No.",precTransferHeader."No.");
        lrecTransferLine.SETFILTER("Item No.",'<>%1','');

        IF( lrecTransferLine.FINDSET(FALSE) ) THEN BEGIN
          REPEAT
             ltrecLPBinSelect.INIT;
             liCounter += 10000;
             ltrecLPBinSelect."Line No." := liCounter;

             IF( pbOutbound ) THEN BEGIN
               ltrecLPBinSelect."Location Code" := lrecTransferLine."Transfer-from Code";
               ltrecLPBinSelect."Bin Code" := lrecTransferLine."Transfer-from Bin Code";
             END
             ELSE BEGIN
               ltrecLPBinSelect."Location Code" := lrecTransferLine."Transfer-to Code";
               ltrecLPBinSelect."Bin Code" := lrecTransferLine."Transfer-from Bin Code";
             END;
             ltrecLPBinSelect."Item No." := lrecTransferLine."Item No.";
             ltrecLPBinSelect."Variant Code" := lrecTransferLine."Variant Code";
             ltrecLPBinSelect.Description := lrecTransferLine.Description;
             ltrecLPBinSelect."Description 2" := lrecTransferLine."Description 2";
             ltrecLPBinSelect.Quantity := lrecTransferLine.Quantity;
             ltrecLPBinSelect.INSERT;

          UNTIL(lrecTransferLine.NEXT=0);
        END;

        // get the location/bin code to assign to
        IF( getBinSelection(ltrecLPBinSelect, lcodLocationCode,lcodBinCode, pbOutbound) ) THEN BEGIN
          IF( pbOutbound ) THEN
            assignLP(optSourceDocument::"Outbound Transfer", precTransferHeader."No.", lcodLocationCode, lcodBinCode,FALSE,'')
          ELSE
            assignLP(optSourceDocument::"Inbound Transfer", precTransferHeader."No.", lcodLocationCode, lcodBinCode, FALSE,'');
        END;
      END ELSE BEGIN
        // At this point, the WHI Setup can only be "Transfer Order Surplus"::"Allow Update Document";
        //
        // This is the less typical behavior, and instead it will change the transfer source.
        // In this case, pretty much any open LP with the right location needs
        // to be considered.
        lrecLocationFrom.GET(precTransferHeader."Transfer-from Code");
        lrecLocationTo.GET(precTransferHeader."Transfer-to Code");

        IF ( lcodBinCode = '' ) THEN BEGIN
          // if we do not have a specific bin code to use from extensibility customizations
          lrecLPHeader.RESET();
          IF ( pbOutbound ) THEN BEGIN
            lrecLPHeader.SETRANGE( "Location Code", precTransferHeader."Transfer-from Code");
          END ELSE BEGIN
            lrecLPHeader.SETRANGE( "Location Code", precTransferHeader."Transfer-to Code");
          END;
          lrecLPHeader.SETRANGE( Locked, FALSE );
          lrecLPHeader.SETFILTER( "Bin Code", '<>''''');
          IF ( lrecLPHeader.FINDSET(FALSE) ) THEN BEGIN
            REPEAT // for each license plate found
              liCounter += 10000;
              lrecLPLine.RESET();
              lrecLPLine.SETRANGE("License Plate No.", lrecLPHeader."No." );
              lrecLPLine.SETRANGE(Type, lrecLPLine.Type::Item); //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
              IF ( lrecLPLine.FINDSET(FALSE) ) THEN BEGIN
                REPEAT
                  ltrecLPBinSelect.INIT;

                  liCounter += 10000;
                  ltrecLPBinSelect."Line No." := liCounter;

                  ltrecLPBinSelect."Location Code" := lrecLPHeader."Location Code";
                  ltrecLPBinSelect."Bin Code" := lrecLPHeader."Bin Code";
                  ltrecLPBinSelect."Item No." := lrecLPLine."No.";
                  ltrecLPBinSelect."Variant Code" := lrecLPLine."Variant Code";
                  ltrecLPBinSelect.Description := lrecLPLine.Description;
                  ltrecLPBinSelect."Description 2" := lrecLPLine."Description 2";
                  ltrecLPBinSelect.Quantity := lrecLPLine.Quantity;
                  ltrecLPBinSelect.INSERT;
                UNTIL ( lrecLPLine.NEXT() = 0 );
              END; // if we found any LP lines
            UNTIL ( lrecLPHeader.NEXT() = 0 );
          END; // if we found any lp headers
        END; // if we got a bin code from customizations.

        IF ( lcodBinCode = '' ) THEN BEGIN
          //
          // If there is no bin code from customizations, then ask for one.
          IF( getBinSelection(ltrecLPBinSelect, lcodLocationCode,lcodBinCode, pbOutbound) ) THEN BEGIN
            // the user successfully selected a bin.
          END ELSE BEGIN
            lcodBinCode := '';
          END;
        END ELSE BEGIN
          IF ( pbOutbound ) THEN BEGIN
            lcodLocationCode := precTransferHeader."Transfer-from Code";
          END ELSE BEGIN
            lcodLocationCode := precTransferHeader."Transfer-to Code";
          END;
        END;

        IF ( lcodBinCode <> '' ) THEN BEGIN
          // as long as we have a bin code.
          IF( pbOutbound ) THEN
            assignLP(optSourceDocument::"Outbound Transfer", precTransferHeader."No.", lcodLocationCode, lcodBinCode,FALSE,'')
          ELSE
            assignLP(optSourceDocument::"Inbound Transfer", precTransferHeader."No.", lcodLocationCode, lcodBinCode, FALSE,'');
        END;

      END;
    END;

    PROCEDURE assignToWhseShipment@1000000059(precWhseShipHeader@1000000000 : Record 7320);
    VAR
      lrecWhseShipLine@1000000002 : Record 7321;
      ltrecLPBinSelect@1000000001 : TEMPORARY Record 23044513;
      lcodBinCode@1000000005 : Code[20];
      lcodLocationCode@1000000008 : Code[10];
    BEGIN
      // Prompts the user to select bin (if required) and license plate.
      // Then assigns the license plate to the warehouse shipment document based on that selection.
      //
      // build up the temporary table of bins/lines
      // Note: In most cases this will always be one bin
      // in which case the form will never be shown but
      // it is possible to override the shipping bin
      //
      lrecWhseShipLine.SETRANGE("No.",precWhseShipHeader."No.");
      lrecWhseShipLine.SETFILTER("Item No.",'<>%1','');

      IF( lrecWhseShipLine.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
           ltrecLPBinSelect.INIT;
           ltrecLPBinSelect."Line No." := lrecWhseShipLine."Line No.";
           ltrecLPBinSelect."Location Code" := lrecWhseShipLine."Location Code";
           ltrecLPBinSelect."Bin Code" := lrecWhseShipLine."Bin Code";
           ltrecLPBinSelect."Item No." := lrecWhseShipLine."No.";
           ltrecLPBinSelect."Variant Code" := lrecWhseShipLine."Variant Code";
           ltrecLPBinSelect.Description := lrecWhseShipLine.Description;
           ltrecLPBinSelect."Description 2" := lrecWhseShipLine."Description 2";
           ltrecLPBinSelect.Quantity := lrecWhseShipLine.Quantity;
           ltrecLPBinSelect.INSERT;

        UNTIL(lrecWhseShipLine.NEXT=0);
      END;

      // get the location/bin code to assign to
      IF( getBinSelection(ltrecLPBinSelect, lcodLocationCode,lcodBinCode, TRUE) ) THEN
        assignLP(optSourceDocument::Shipment, precWhseShipHeader."No.", lcodLocationCode, lcodBinCode,FALSE,'');
    END;

    PROCEDURE assignToPurchaseOrder@1000000060(precPurchaseHeader@1000000000 : Record 38);
    VAR
      lrecPurchaseLine@1000000002 : Record 39;
      ltrecLPBinSelect@1000000001 : TEMPORARY Record 23044513;
      lcodBinCode@1000000005 : Code[20];
      lcodLocationCode@1000000008 : Code[10];
    BEGIN
      // Prompts the user to select bin (if required) and license plate.
      // Then assigns the license plate to the purchase document based on that selection.
      lrecPurchaseLine.SETRANGE("Document Type",precPurchaseHeader."Document Type");
      lrecPurchaseLine.SETRANGE("Document No.",precPurchaseHeader."No.");
      lrecPurchaseLine.SETRANGE(Type,lrecPurchaseLine.Type::Item);
      lrecPurchaseLine.SETFILTER("No.",'<>%1','');

      IF( lrecPurchaseLine.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
           ltrecLPBinSelect.INIT;
           ltrecLPBinSelect."Line No." := lrecPurchaseLine."Line No.";
           ltrecLPBinSelect."Location Code" := lrecPurchaseLine."Location Code";
           ltrecLPBinSelect."Bin Code" := lrecPurchaseLine."Bin Code";
           ltrecLPBinSelect."Item No." := lrecPurchaseLine."No.";
           ltrecLPBinSelect."Variant Code" := lrecPurchaseLine."Variant Code";
           ltrecLPBinSelect.Description := lrecPurchaseLine.Description;
           ltrecLPBinSelect."Description 2" := lrecPurchaseLine."Description 2";
           ltrecLPBinSelect.Quantity := lrecPurchaseLine.Quantity;
           ltrecLPBinSelect.INSERT;

        UNTIL(lrecPurchaseLine.NEXT=0);
      END;

      IF( getBinSelection(ltrecLPBinSelect, lcodLocationCode,lcodBinCode, FALSE) ) THEN
        assignLP(optSourceDocument::"Purchase Order", precPurchaseHeader."No.", lcodLocationCode, lcodBinCode,FALSE,'');
    END;

    PROCEDURE assignToWhseReceipt@1000000062(precWhseReceiptHeader@1000000000 : Record 7316);
    VAR
      lrecWhseReceiptLine@1000000002 : Record 7317;
      ltrecLPBinSelect@1000000001 : TEMPORARY Record 23044513;
      lcodBinCode@1000000005 : Code[20];
      lcodLocationCode@1000000008 : Code[10];
    BEGIN
      // Prompts the user to select bin (if required) and license plate.
      // Then assigns the license plate to the warehouse receipt document based on that selection.
      lrecWhseReceiptLine.SETRANGE("No.",precWhseReceiptHeader."No.");
      lrecWhseReceiptLine.SETFILTER("Item No.",'<>%1','');

      IF( lrecWhseReceiptLine.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
           ltrecLPBinSelect.INIT;
           ltrecLPBinSelect."Line No." := lrecWhseReceiptLine."Line No.";
           ltrecLPBinSelect."Location Code" := lrecWhseReceiptLine."Location Code";
           ltrecLPBinSelect."Bin Code" := lrecWhseReceiptLine."Bin Code";
           ltrecLPBinSelect."Item No." := lrecWhseReceiptLine."No.";
           ltrecLPBinSelect."Variant Code" := lrecWhseReceiptLine."Variant Code";
           ltrecLPBinSelect.Description := lrecWhseReceiptLine.Description;
           ltrecLPBinSelect."Description 2" := lrecWhseReceiptLine."Description 2";
           ltrecLPBinSelect.Quantity := lrecWhseReceiptLine.Quantity;
           ltrecLPBinSelect.INSERT;

        UNTIL(lrecWhseReceiptLine.NEXT=0);
      END;
      IF( getBinSelection(ltrecLPBinSelect, lcodLocationCode,lcodBinCode, FALSE) ) THEN
        assignLP(optSourceDocument::Receipt, precWhseReceiptHeader."No.", lcodLocationCode, lcodBinCode,FALSE,'');
    END;

    PROCEDURE assignToWhseActivity@1000000063(precWhseActivityHeader@1000000000 : Record 5766;pbTakeMode@1000000003 : Boolean);
    VAR
      lrecWhseActivityLine@1000000002 : Record 5767;
      lrecLPHeader@1000000006 : Record 23044505;
      ltrecLPBinSelect@1000000001 : TEMPORARY Record 23044513;
      lcodBinCode@1000000005 : Code[20];
      lcodLocationCode@1000000008 : Code[10];
      ltrecBin@1000000004 : TEMPORARY Record 7354;
      lbProceed@1000000007 : Boolean;
      lsBinFilterString@1000000009 : Text[1024];
      lpgTest@1000000011 : Page 23044520;
      lcodLPNumber@1000000010 : Code[20];
    BEGIN
      // Prompts the user to select bin (if required) and license plate.
      // Then assigns the license plate to the warehouse put-away document based on that selection.
      lrecWhseActivityLine.SETRANGE("No.",precWhseActivityHeader."No.");
      lrecWhseActivityLine.SETFILTER("Item No.",'<>%1','');
      lrecWhseActivityLine.SETFILTER("Qty. Outstanding",'>%1',0);
      IF( pbTakeMode AND (precWhseActivityHeader.Type <> precWhseActivityHeader.Type::"Invt. Put-away") )
      THEN BEGIN
        lrecWhseActivityLine.SETFILTER("Action Type",'%1|%2',lrecWhseActivityLine."Action Type"::" ",
          lrecWhseActivityLine."Action Type"::Take)
      END ELSE BEGIN
        lrecWhseActivityLine.SETRANGE("Action Type",lrecWhseActivityLine."Action Type"::Place);
      END;

      IF( lrecWhseActivityLine.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          IF( pbTakeMode ) THEN BEGIN
            IF( NOT ltrecBin.GET(lrecWhseActivityLine."Location Code",lrecWhseActivityLine."Bin Code") ) THEN BEGIN
              ltrecBin."Location Code" := lrecWhseActivityLine."Location Code";
              ltrecBin.Code := lrecWhseActivityLine."Bin Code";
              ltrecBin.INSERT;
            END;
          END
          ELSE BEGIN
            ltrecLPBinSelect.INIT;
            ltrecLPBinSelect."Line No." := lrecWhseActivityLine."Line No.";
            ltrecLPBinSelect."Location Code" := lrecWhseActivityLine."Location Code";
            ltrecLPBinSelect."Bin Code" := lrecWhseActivityLine."Bin Code";
            ltrecLPBinSelect."Item No." := lrecWhseActivityLine."Item No.";
            ltrecLPBinSelect."Variant Code" := lrecWhseActivityLine."Variant Code";
            ltrecLPBinSelect.Description := lrecWhseActivityLine.Description;
            ltrecLPBinSelect."Description 2" := lrecWhseActivityLine."Description 2";
            ltrecLPBinSelect.Quantity := lrecWhseActivityLine.Quantity;
            ltrecLPBinSelect.INSERT;
          END;
        UNTIL(lrecWhseActivityLine.NEXT=0);
      END;
      lcodLPNumber := '';
      lbProceed := FALSE;
      IF( pbTakeMode ) THEN BEGIN
        IF( ltrecBin.FINDSET(FALSE) ) THEN BEGIN
          lsBinFilterString := '';
          REPEAT
            IF( lsBinFilterString <> '' ) THEN
              lsBinFilterString := lsBinFilterString + '|';
            lsBinFilterString := lsBinFilterString + ltrecBin.Code;
          UNTIL(ltrecBin.NEXT=0);

          lrecLPHeader.FILTERGROUP(2);
          lrecLPHeader.SETFILTER("Location Code",'%1',precWhseActivityHeader."Location Code");
          lrecLPHeader.SETFILTER("Bin Code",lsBinFilterString);
          lrecLPHeader.SETRANGE(Status,lrecLPHeader.Status::" ");
          lrecLPHeader.SETRANGE("Source Document Type",lrecLPHeader."Source Document Type"::" ");
          lrecLPHeader.FILTERGROUP(0);

          lpgTest.SETTABLEVIEW(lrecLPHeader);
          lpgTest.LOOKUPMODE(TRUE);
          IF( lpgTest.RUNMODAL = ACTION::LookupOK ) THEN BEGIN
            lpgTest.GETRECORD(lrecLPHeader);
            lcodLocationCode := precWhseActivityHeader."Location Code";
            lcodBinCode := lrecLPHeader."Bin Code";
            lbProceed := TRUE;
            lcodLPNumber := lrecLPHeader."No.";
          END;
        END
        ELSE BEGIN
          lbProceed := TRUE;
          lcodLocationCode := precWhseActivityHeader."Location Code";
          lcodBinCode := '';
        END;
      END
      ELSE BEGIN
        lbProceed := getBinSelection(ltrecLPBinSelect, lcodLocationCode,lcodBinCode, pbTakeMode);
      END;

      // get the location/bin code to assign to
      IF( lbProceed ) THEN BEGIN
          CASE precWhseActivityHeader.Type OF
            precWhseActivityHeader.Type::"Put-away":
            BEGIN
              assignLP(optSourceDocument::"Put-away", precWhseActivityHeader."No.",
                lcodLocationCode, lcodBinCode,NOT pbTakeMode,lcodLPNumber);
            END;
            precWhseActivityHeader.Type::Pick:
            BEGIN
              assignLP(optSourceDocument::Pick, precWhseActivityHeader."No.", lcodLocationCode,
                lcodBinCode,NOT pbTakeMode,lcodLPNumber);
            END;
            precWhseActivityHeader.Type::Movement:
            BEGIN
              assignLP(optSourceDocument::Movement, precWhseActivityHeader."No.", lcodLocationCode,
                lcodBinCode,NOT pbTakeMode,lcodLPNumber);
            END;
            precWhseActivityHeader.Type::"Invt. Pick":
            BEGIN
              assignLP(optSourceDocument::"Invt. Pick", precWhseActivityHeader."No.",
                lcodLocationCode, lcodBinCode,NOT pbTakeMode,lcodLPNumber);
            END;
            precWhseActivityHeader.Type::"Invt. Put-away":
            BEGIN
              assignLP(optSourceDocument::"Invt. Put-away", precWhseActivityHeader."No.",
                lcodLocationCode, lcodBinCode,NOT pbTakeMode,lcodLPNumber);
            END;
            precWhseActivityHeader.Type::"Invt. Movement":
            BEGIN
              assignLP(optSourceDocument::"Invt. Movement", precWhseActivityHeader."No.", lcodLocationCode, lcodBinCode,NOT pbTakeMode,lcodLPNumber);
            END;
          END;
      END;
    END;

    PROCEDURE assignToReclassJournal@1000000071(pcodBatchName@1000000000 : Code[20];VAR precSpecificJournalLines@1000000003 : Record 83);
    VAR
      lrecPurchaseLine@1000000002 : Record 39;
      ltrecLPBinSelect@1000000001 : TEMPORARY Record 23044513;
      lcodBinCode@1000000005 : Code[20];
      lcodLocationCode@1000000008 : Code[10];
    BEGIN
      //  Assigns the License Plate to the reclass journal.
      //
      //  This is called from a menu action on the reclass journal page.
      //  This is *not* called from the the PDA
      //

      assignLP(optSourceDocument::Reclass, pcodBatchName, '', '', FALSE,'');
    END;

    PROCEDURE assignLPOutput@1000000077(VAR precItemJournalLine@1000000000 : Record 83);
    VAR
      ltrecLPBinSelect@1000000003 : TEMPORARY Record 23044513;
      lcodBinCode@1000000002 : Code[20];
      lcodLocationCode@1000000001 : Code[10];
      lcodLicensePlateNo@1000000004 : Code[20];
      lrecLPHeader@1000000005 : Record 23044505;
    BEGIN
      // Only used when assigning a license plate to an output journal line
      // in NAV, not on the PDA.
      REPEAT
         ltrecLPBinSelect.INIT;
         ltrecLPBinSelect."Line No." := precItemJournalLine."Line No.";
         ltrecLPBinSelect."Location Code" := precItemJournalLine."Location Code";
         ltrecLPBinSelect."Bin Code" := precItemJournalLine."Bin Code";
         ltrecLPBinSelect."Item No." := precItemJournalLine."Item No.";
         ltrecLPBinSelect."Variant Code" := precItemJournalLine."Variant Code";
         ltrecLPBinSelect.Description := precItemJournalLine.Description;
         ltrecLPBinSelect.Quantity := precItemJournalLine."Output Quantity";
         ltrecLPBinSelect.INSERT;

      UNTIL(precItemJournalLine.NEXT() =0);
      precItemJournalLine.NEXT( -1 *  precItemJournalLine.COUNT() );


      // get the location/bin code to assign to
      IF( getBinSelection(ltrecLPBinSelect, lcodLocationCode,lcodBinCode, TRUE) ) THEN
        lcodLicensePlateNo := assignLP(optSourceDocument::"Prod. Order", precItemJournalLine."Source No.", lcodLocationCode,
          lcodBinCode, FALSE, '');

      IF ( lcodLicensePlateNo <> '' ) THEN BEGIN

        REPEAT
          lrecLPHeader.GET( lcodLicensePlateNo ); // always refetch to support below behavior.
          IF ( ( lrecLPHeader."Bin Code" = '' ) AND ( lrecLPHeader."Location Code" = '' ) ) THEN BEGIN
            //
            // Change from Francois, March/25/2014.
            //        If the license plate bin is not yet set for the first license plate, then automatical
            //        set the bin code for the first time.
            // If any bin or location code is already set, then cause an error.
            lrecLPHeader."Location Code" := precItemJournalLine."Location Code";
            lrecLPHeader."Bin Code" := precItemJournalLine."Bin Code";
            lrecLPHeader.MODIFY(FALSE); // no triggers
          END ELSE IF ( ( lrecLPHeader."Bin Code" <> precItemJournalLine."Bin Code" )
            OR ( lrecLPHeader."Location Code" <> precItemJournalLine."Location Code" ) ) THEN
          BEGIN
            ERROR( tcCannotOutputToDifferentBin );
          END;

          precItemJournalLine.VALIDATE("LPM License Plate No.",  lcodLicensePlateNo );
          precItemJournalLine.MODIFY(TRUE);
        UNTIL( precItemJournalLine.NEXT() = 0 );
      END;
    END;

    PROCEDURE assignToPurchaseReturnOrder@1000000084(precPurchaseHeader@1000000000 : Record 38);
    VAR
      lrecPurchaseLine@1000000002 : Record 39;
      ltrecLPBinSelect@1000000001 : TEMPORARY Record 23044513;
      lcodBinCode@1000000005 : Code[20];
      lcodLocationCode@1000000008 : Code[10];
    BEGIN
      // Prompts the user to select bin (if required) and license plate.
      // Then assigns the license plate to the purchase return document based on that selection.
      lrecPurchaseLine.SETRANGE("Document Type",precPurchaseHeader."Document Type");
      lrecPurchaseLine.SETRANGE("Document No.",precPurchaseHeader."No.");
      lrecPurchaseLine.SETRANGE(Type,lrecPurchaseLine.Type::Item);
      lrecPurchaseLine.SETFILTER("No.",'<>%1','');

      IF( lrecPurchaseLine.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
           ltrecLPBinSelect.INIT;
           ltrecLPBinSelect."Line No." := lrecPurchaseLine."Line No.";
           ltrecLPBinSelect."Location Code" := lrecPurchaseLine."Location Code";
           ltrecLPBinSelect."Bin Code" := lrecPurchaseLine."Bin Code";
           ltrecLPBinSelect."Item No." := lrecPurchaseLine."No.";
           ltrecLPBinSelect."Variant Code" := lrecPurchaseLine."Variant Code";
           ltrecLPBinSelect.Description := lrecPurchaseLine.Description;
           ltrecLPBinSelect."Description 2" := lrecPurchaseLine."Description 2";
           ltrecLPBinSelect.Quantity := lrecPurchaseLine.Quantity;
           ltrecLPBinSelect.INSERT;

        UNTIL(lrecPurchaseLine.NEXT=0);
      END;

      IF( getBinSelection(ltrecLPBinSelect, lcodLocationCode,lcodBinCode, FALSE) ) THEN
        assignLP(optSourceDocument::"Purchase Return Order", precPurchaseHeader."No.", lcodLocationCode, lcodBinCode,FALSE,'');
    END;

    PROCEDURE updateWhseReceiptLinesCode@1000000075(pcodLocationCode@1000000013 : Code[10];pcodLicensePlateNumber@1000000011 : Code[20];precWhseSourceRcptLine@1000000008 : Record 7317;pcodBinCode@1000000009 : Code[20];pbOverrideBlankBin@1000000010 : Boolean;VAR ptrecLPLine@1000000007 : TEMPORARY Record 23044506;VAR ptrecLPHeader@1000000012 : TEMPORARY Record 23044505);
    VAR
      lrecLPSetup@1000000016 : Record 23044523;
      lrecLPHeader@1000000000 : Record 23044505;
      lrecLPLineUsage@1000000001 : Record 23044507;
      ldQtyToApplyWhseRcptUOM@1000000005 : Decimal;
      ldQtyOutstanding@1000000004 : Decimal;
      ldQtyApplied@1000000003 : Decimal;
      ltrecCommentLine@1000000002 : TEMPORARY Record 97;
      lrecWhseRcptLine@1000000006 : Record 7317;
      lrecItem@1000000015 : Record 27;
      lcodUOM@1000000014 : Code[10];
    BEGIN

      //
      // do not allow license plates for receipts that are either intercompany or transfers that were not part of the
      // outbound document
      //
      IF( pcodLicensePlateNumber <> '' ) THEN BEGIN
        IF( (precWhseSourceRcptLine."Source Document" = precWhseSourceRcptLine."Source Document"::"Purchase Order" ) OR
            (precWhseSourceRcptLine."Source Document" = precWhseSourceRcptLine."Source Document"::"Inbound Transfer")
          ) THEN BEGIN

          // first ensure it's been shipped
          // commented out for now
          lrecLPHeader.GET(pcodLicensePlateNumber);
          //lrecLPHeader.TESTFIELD(Status,lrecLPHeader.Status::Shipped);

          // if purchase order check the intercompany
          IF( precWhseSourceRcptLine."Source Document" = precWhseSourceRcptLine."Source Document"::"Purchase Order" ) THEN BEGIN
            verifyInterCompanyLP(pcodLicensePlateNumber,precWhseSourceRcptLine."Source No.");
          END;

          // if transfer order check the interlocation
          IF( precWhseSourceRcptLine."Source Document" = precWhseSourceRcptLine."Source Document"::"Inbound Transfer" ) THEN BEGIN
            lrecLPLineUsage.RESET;
            lrecLPLineUsage.SETRANGE("License Plate No.",pcodLicensePlateNumber);
            lrecLPLineUsage.SETRANGE("Source Document",lrecLPLineUsage."Source Document"::"Outbound Transfer");
            lrecLPLineUsage.SETRANGE("Source No.",precWhseSourceRcptLine."Source No.");
            lrecLPLineUsage.SETRANGE("Source Company Name",COMPANYNAME);
            lrecLPLineUsage.SETFILTER("Posting Date",'<>%1',0D);

            IF( NOT lrecLPLineUsage.FINDLAST ) THEN BEGIN
              ERROR(tcLPNotOnInterLocation,pcodLicensePlateNumber,precWhseSourceRcptLine."Source No.");
            END;
          END;
        END;
      END;

      setLPLocationAndBin(pcodLicensePlateNumber,pcodLocationCode,pcodBinCode);
      lrecLPSetup.GET();
      //
      // go through the items to be applied and match
      // them against the whse. receipt lines
      //
      IF( ptrecLPLine.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          // find the matching whse. receipt lines
          lrecWhseRcptLine.RESET;
          lrecWhseRcptLine.SETRANGE("No.",precWhseSourceRcptLine."No.");
          lrecWhseRcptLine.SETRANGE("Item No.",ptrecLPLine."No.");  //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
          lrecWhseRcptLine.SETRANGE("Variant Code",ptrecLPLine."Variant Code");
          lrecWhseRcptLine.SETRANGE("Source Document",precWhseSourceRcptLine."Source Document");
          lrecWhseRcptLine.SETRANGE("Source No.",precWhseSourceRcptLine."Source No.");
          lrecWhseRcptLine.SETFILTER("Qty. Outstanding", '>0');

          lrecWhseRcptLine.SETRANGE("Location Code",pcodLocationCode);


          IF( pbOverrideBlankBin ) THEN
            lrecWhseRcptLine.SETFILTER("Bin Code",'%1|%2',pcodBinCode,'')
          ELSE
            lrecWhseRcptLine.SETRANGE("Bin Code",pcodBinCode);


          IF( lrecWhseRcptLine.FIND('-') ) THEN BEGIN
            lrecItem.GET(ptrecLPLine."No."); //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
            lcodUOM := lrecWhseRcptLine."Unit of Measure Code";
            ldQtyToApplyWhseRcptUOM := cuCommonBase.ConvertUnitOfMeasure(lrecItem,
                                                                      ptrecLPLine.Quantity,
                                                                      ptrecLPLine."Unit of Measure Code",
                                                                      //lrecItem."Base Unit of Measure",  // from UOM
                                                                      lcodUOM);     // to UOM

            REPEAT
              IF ( lcodUOM <> lrecWhseRcptLine."Unit of Measure Code" ) THEN BEGIN
                // if the next sales line is in a different uom than the
                // previous sales line, then we must convert into that next unit of measure
                ldQtyToApplyWhseRcptUOM := cuCommonBase.ConvertUnitOfMeasure(lrecItem,
                                                                      ldQtyToApplyWhseRcptUOM,
                                                                      lcodUOM,  // from UOM
                                                                      lrecWhseRcptLine."Unit of Measure Code" );     // to UOM
                lcodUOM := lrecWhseRcptLine."Unit of Measure Code";
              END;

              ldQtyApplied := 0;
              ldQtyOutstanding := lrecWhseRcptLine.Quantity - (lrecWhseRcptLine."Qty. to Receive" + lrecWhseRcptLine."Qty. Received");

              // if there is remaining qty on this line to be used
              IF( (ldQtyOutstanding > 0) AND (ldQtyToApplyWhseRcptUOM > 0) ) THEN BEGIN
                IF (lrecLPSetup."LP Purchase Apply Behavior"=lrecLPSetup."LP Purchase Apply Behavior"::"Adjust Quantity To Apply")
                THEN BEGIN
                  // determine the amount to apply
                  IF( ldQtyOutstanding >= ldQtyToApplyWhseRcptUOM ) THEN BEGIN
                    ldQtyApplied := ldQtyToApplyWhseRcptUOM;
                  END ELSE BEGIN
                    ldQtyApplied := ldQtyOutstanding;
                  END;
                END ELSE IF ( lrecLPSetup."LP Purchase Apply Behavior" =
                                        lrecLPSetup."LP Purchase Apply Behavior"::"Attempt To Over Receive" )
                THEN BEGIN
                  // this scenario is to support an ability to over receive
                  // by adjusting the quantity to receive.
                  ldQtyApplied := ldQtyToApplyWhseRcptUOM;
                END;

                // update the line
                lrecWhseRcptLine.VALIDATE("Qty. to Receive", lrecWhseRcptLine."Qty. to Receive" + ldQtyApplied);

                IF( lrecWhseRcptLine."Bin Code" = '' ) THEN
                  lrecWhseRcptLine.VALIDATE("Bin Code",pcodBinCode);

                lrecWhseRcptLine.MODIFY(TRUE);
                ldQtyToApplyWhseRcptUOM := ldQtyToApplyWhseRcptUOM - ldQtyApplied;

                // add/remove the serial number
                IF( (ptrecLPLine."Lot No." <> '') OR (ptrecLPLine."Serial No." <> '') ) THEN BEGIN
                  cuResMgmt.AddRemoveWhseRecTracking(
                    lrecWhseRcptLine,
                    ptrecLPLine."Serial No.",
                    ptrecLPLine."Lot No.",
                    ldQtyApplied,
                    ptrecLPLine."Expiration Date", //0D, //<IW author="h.z" date="08/15/16" issue="TFS2673" />
                    lrecWhseRcptLine."Unit of Measure Code"
                    );
                END;

                //
                // assign to line usage table
                //
                IF( pcodLicensePlateNumber <> '' ) THEN BEGIN
                  CreateLPLineUsage(ptrecLPLine, ldQtyApplied,lrecLPLineUsage."Source Document"::Receipt,lrecWhseRcptLine."No.", lrecWhseRcptLine."Line No."); //<IW author="R.Trudeau" date="01/09/19" issue="TFS4388" />
                END;
              END;
            UNTIL(lrecWhseRcptLine.NEXT=0);

            // error out if there is quantity still unapplied
            IF( ldQtyToApplyWhseRcptUOM <> 0 ) THEN
              ERROR(tcUnappliedQty,
                ptrecLPLine."No.",  // 1   //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
                ptrecLPLine.Quantity,   // 2
                ldQtyToApplyWhseRcptUOM,  // 3
                ptrecLPLine."Unit of Measure Code",  // 4    //
                lrecWhseRcptLine."Unit of Measure Code"     // 5  //
                 );
          END;
        UNTIL(ptrecLPLine.NEXT=0);
      END;

      IF pcodLicensePlateNumber <> '' THEN
        SetLPSourceDocument(ptrecLPHeader,lrecLPLineUsage."Source Document"::Receipt,lrecWhseRcptLine."No.",pcodBinCode);
    END;

    PROCEDURE updateWhseShipmentLinesCode@1000000047(pcodLocationCode@1000000013 : Code[10];pcodLicensePlateNumber@1000000008 : Code[20];precWhseSourceShipLine@1000000019 : Record 7321;pcodBinCode@1000000006 : Code[20];pbOverrideBlankBin@1000000009 : Boolean;VAR ptrecLPLine@1000000007 : TEMPORARY Record 23044506;VAR ptrecLPHeader@1000000022 : TEMPORARY Record 23044505);
    VAR
      lrecWhseShipLine@1000000000 : Record 7321;
      ldQtyToApplyWhseShipmentUOM@1000000001 : Decimal;
      ldQtyApplied@1000000002 : Decimal;
      ldQtyOutstanding@1000000003 : Decimal;
      ltrecCommentLine@1000000004 : TEMPORARY Record 97;
      lrecLPLineUsage@1000000005 : Record 23044507;
      lrecWhseShipHeader@1000000010 : Record 7320;
      lcuReleaseWhseShptDoc@1000000011 : Codeunit 7310;
      lrecItem@1000000012 : Record 27;
      lcodUOM@1000000014 : Code[10];
      lbWhseSNRequired@1000000021 : Boolean;
      lbWhseLNRequired@1000000020 : Boolean;
      lrecLocation@1000000018 : Record 14;
      lbCreateReservations@1000000017 : Boolean;
      lcuItemTrackingMgt@1000000016 : Codeunit 6500;
      lbWhseTracked@1000000015 : Boolean;
    BEGIN

      setLPLocationAndBin(pcodLicensePlateNumber,pcodLocationCode,pcodBinCode);



      //
      // go through the items to be applied and match
      // them against the whse. shipment lines
      //
      IF( ptrecLPLine.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          // find the matching whse. receipt lines
          lrecWhseShipLine.RESET;
          lrecWhseShipLine.SETRANGE("No.",precWhseSourceShipLine."No.");
          lrecWhseShipLine.SETRANGE("Item No.",ptrecLPLine."No.");  //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
          lrecWhseShipLine.SETRANGE("Variant Code",ptrecLPLine."Variant Code");
          // warehouse shipment may be from different source document, multiple sales order
          //lrecWhseShipLine.SETRANGE("Source Document",precWhseSourceShipLine."Source Document");
          //lrecWhseShipLine.SETRANGE("Source No.",precWhseSourceShipLine."Source No.");
          lrecWhseShipLine.SETFILTER("Qty. Outstanding", '>0');

          lrecWhseShipLine.SETRANGE("Location Code",pcodLocationCode);
          IF( pbOverrideBlankBin ) THEN
            lrecWhseShipLine.SETFILTER("Bin Code",'%1|%2',pcodBinCode,'')
          ELSE
            lrecWhseShipLine.SETRANGE("Bin Code",pcodBinCode);

          IF( lrecWhseShipLine.FIND('-') ) THEN BEGIN
            lrecItem.GET(ptrecLPLine."No.");  //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
            lcodUOM := lrecWhseShipLine."Unit of Measure Code";
            ldQtyToApplyWhseShipmentUOM := cuCommonBase.ConvertUnitOfMeasure(lrecItem,
                                                                      ptrecLPLine.Quantity,
                                                                      ptrecLPLine."Unit of Measure Code",  // from UOM //<IW author="h.z" date="05/17/16" issue="TFS2594" />
                                                                      lcodUOM);     // to UOM
            REPEAT
              IF ( lcodUOM <> lrecWhseShipLine."Unit of Measure Code" ) THEN BEGIN
                // if the next sales line is in a different uom than the
                // previous sales line, then we must convert into that next unit of measure
                ldQtyToApplyWhseShipmentUOM := cuCommonBase.ConvertUnitOfMeasure(lrecItem,
                                                                      ldQtyToApplyWhseShipmentUOM,
                                                                      lcodUOM,  // from UOM
                                                                      lrecWhseShipLine."Unit of Measure Code" );     // to UOM
                lcodUOM := lrecWhseShipLine."Unit of Measure Code";
              END;

              ldQtyApplied := 0;
              ldQtyOutstanding := lrecWhseShipLine.Quantity - (lrecWhseShipLine."Qty. to Ship" + lrecWhseShipLine."Qty. Shipped");

              // if there is remaining qty on this line to be used
              IF( (ldQtyOutstanding > 0) AND (ldQtyToApplyWhseShipmentUOM > 0) ) THEN BEGIN

                // determine the amount to apply
                IF( ldQtyOutstanding >= ldQtyToApplyWhseShipmentUOM ) THEN
                  ldQtyApplied := ldQtyToApplyWhseShipmentUOM
                ELSE
                  ldQtyApplied := ldQtyOutstanding;

                // update the line
                lrecWhseShipLine.VALIDATE("Qty. to Ship", lrecWhseShipLine."Qty. to Ship" + ldQtyApplied);

                // don't set if not blank - then if the document is released we need to temporarily open it
                IF( (lrecWhseShipLine."Bin Code" = '') AND (pcodBinCode <> '') ) THEN BEGIN
                  lrecWhseShipHeader.GET(lrecWhseShipLine."No.");
                  IF( lrecWhseShipHeader.Status = lrecWhseShipHeader.Status::Released ) THEN BEGIN
                    lcuReleaseWhseShptDoc.Reopen(lrecWhseShipHeader);
                    lrecWhseShipLine.VALIDATE("Bin Code",pcodBinCode);
                    lcuReleaseWhseShptDoc.Release(lrecWhseShipHeader);
                  END
                  ELSE BEGIN
                    lrecWhseShipLine.VALIDATE("Bin Code",pcodBinCode);
                  END;
                END;

                lrecWhseShipLine.MODIFY(TRUE);
                ldQtyToApplyWhseShipmentUOM := ldQtyToApplyWhseShipmentUOM - ldQtyApplied;

                IF lrecLocation.GET(lrecWhseShipLine."Location Code") THEN ;
                lcuItemTrackingMgt.CheckWhseItemTrkgSetup(ptrecLPLine."No.",lbWhseSNRequired,lbWhseLNRequired,FALSE); //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
                lbWhseTracked := lbWhseSNRequired OR lbWhseLNRequired;
                lbCreateReservations := ((ptrecLPLine."Lot No." <> '') OR (ptrecLPLine."Serial No." <> ''))
                                        AND
                                        ((lrecLocation."Require Pick" AND NOT lbWhseTracked) OR (NOT lrecLocation."Require Pick"));



                // add/remove the lot or serial number
                IF(lbCreateReservations) THEN BEGIN
                  // make sure the serial number is available for use
                  IF( ptrecLPLine."Serial No." <> '' ) THEN
                  BEGIN
                    IF( cuCommonBase.getSNQtyAvailable(lrecWhseShipLine."Item No.", ptrecLPLine."Serial No.", pcodLocationCode) <= 0 )
                    THEN BEGIN
                      ERROR(tcSNNotAvailable,ptrecLPLine."Serial No.");
                    END;
                  END;

                  cuResMgmt.AddRemoveWhseShipTracking(
                                        lrecWhseShipLine,
                                        ptrecLPLine."Serial No.",
                                        ptrecLPLine."Lot No.",
                                        ldQtyApplied,
                                        lrecWhseShipLine."Unit of Measure Code",
                                        ptrecLPLine."Expiration Date"
                                        );
                END;

                // assign to line usage table
                //
                IF( pcodLicensePlateNumber <> '' ) THEN BEGIN
                  CreateLPLineUsage(ptrecLPLine, ldQtyApplied,lrecLPLineUsage."Source Document"::Shipment,lrecWhseShipLine."No.", lrecWhseShipLine."Line No."); //<IW author="R.Trudeau" date="01/09/19" issue="TFS4388" />
                END;
              END;
            UNTIL(lrecWhseShipLine.NEXT=0);

            // error out if there is quantity still unapplied
            IF( ldQtyToApplyWhseShipmentUOM <> 0 ) THEN
              ERROR(tcUnappliedQty,
              ptrecLPLine."No.", // 1   //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
              ptrecLPLine.Quantity, // 2
              ldQtyToApplyWhseShipmentUOM, // 3
              ptrecLPLine."Unit of Measure Code",  // from UOM //<IW author="h.z" date="05/17/16" issue="TFS2594" />  // 4    //
              lrecWhseShipLine."Unit of Measure Code"     // 5  //
              );
          END;
        UNTIL(ptrecLPLine.NEXT=0);
      END;

      IF pcodLicensePlateNumber <> '' THEN
        SetLPSourceDocument(ptrecLPHeader,lrecLPLineUsage."Source Document"::Shipment,lrecWhseShipLine."No.",'');
    END;

    PROCEDURE updatePurchaseLinesCode@1000000042(pcodLocationCode@1000000016 : Code[10];pcodPurchaseNumber@1000000015 : Code[20];pcodLicensePlateNumber@1000000001 : Code[20];pcodBinCode@1000000009 : Code[20];pbOverrideBlankBin@1000000010 : Boolean;VAR ptrecLPLine@1000000000 : TEMPORARY Record 23044506;VAR ptrecLPHeader@1000000014 : TEMPORARY Record 23044505);
    VAR
      lrecLPSetup@1000000013 : Record 23044523;
      lrecPurchaseLine@1000000008 : Record 39;
      lrecParentLPHeader@1000000011 : Record 23044505;
      ldQtyToApplyPurchaseUOM@1000000007 : Decimal;
      ldQtyOutstanding@1000000006 : Decimal;
      ldQtyApplied@1000000005 : Decimal;
      ltrecCommentLine@1000000004 : TEMPORARY Record 97;
      lrecLPLineUsage@1000000003 : Record 23044507;
      lrecLPHeader@1000000002 : Record 23044505;
      lrecItem@1000000012 : Record 27;
    BEGIN
      // Updates the PurchaseLines with the appropriate License Plate.
      // If quantities do not match resulting License Plate then an error will be thrown.

      // do not allow license plates for purchases that are intercompany
      IF( pcodLicensePlateNumber <> '' ) THEN BEGIN
        verifyInterCompanyLP(pcodLicensePlateNumber,pcodPurchaseNumber);
      END;

      setLPLocationAndBin(pcodLicensePlateNumber,pcodLocationCode,pcodBinCode);

      lrecLPSetup.GET();
      //
      // go through the items to be applied and match
      // them against the whse. receipt lines
      //

      IF( ptrecLPLine.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          // find the matching purchase lines
          lrecPurchaseLine.RESET;
          lrecPurchaseLine.SETRANGE("Document Type",lrecPurchaseLine."Document Type"::Order);
          lrecPurchaseLine.SETRANGE("Document No.",pcodPurchaseNumber);
          lrecPurchaseLine.SETRANGE(Type,lrecPurchaseLine.Type::Item);
          lrecPurchaseLine.SETRANGE("No.",ptrecLPLine."No.");  //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
          lrecPurchaseLine.SETRANGE("Variant Code",ptrecLPLine."Variant Code");
          lrecPurchaseLine.SETRANGE("Location Code",pcodLocationCode);

          IF( pbOverrideBlankBin ) THEN
            lrecPurchaseLine.SETFILTER("Bin Code",'%1|%2',pcodBinCode,'')
          ELSE
            lrecPurchaseLine.SETRANGE("Bin Code",pcodBinCode);

          IF( lrecPurchaseLine.FIND('-') ) THEN BEGIN
            // Convert to purchase uom quantity from License Plate line uom
            lrecItem.GET(ptrecLPLine."No.");  //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
            ldQtyToApplyPurchaseUOM := cuCommonBase.ConvertUnitOfMeasure(lrecItem,
                                                                         ptrecLPLine.Quantity,
                                                                         ptrecLPLine."Unit of Measure Code",  // from UOM //<IW author="h.z" date="05/16/16" issue="TFS2594" />
                                                                         lrecPurchaseLine."Unit of Measure Code");     // to UOM

            REPEAT
              ldQtyApplied := 0;
              ldQtyOutstanding := lrecPurchaseLine.Quantity - (lrecPurchaseLine."Qty. to Receive" +
                lrecPurchaseLine."Quantity Received");

              // if there is remaining qty on this line to be used
              IF( (ldQtyOutstanding > 0) AND (ldQtyToApplyPurchaseUOM > 0) ) THEN BEGIN
                IF (lrecLPSetup."LP Purchase Apply Behavior"=lrecLPSetup."LP Purchase Apply Behavior"::"Adjust Quantity To Apply")
                THEN BEGIN
                  // determine the amount to apply
                  IF( ldQtyOutstanding >= ldQtyToApplyPurchaseUOM ) THEN BEGIN
                    ldQtyApplied := ldQtyToApplyPurchaseUOM;
                  END ELSE BEGIN
                    ldQtyApplied := ldQtyOutstanding;
                  END;
                END ELSE IF ( lrecLPSetup."LP Purchase Apply Behavior" =
                   lrecLPSetup."LP Purchase Apply Behavior"::"Attempt To Over Receive" )
                THEN BEGIN
                  // this scenario is to support an ability to over receive
                  // by adjusting the quantity to receive.
                  ldQtyApplied := ldQtyToApplyPurchaseUOM;
                END;

                // update the line
                lrecPurchaseLine.VALIDATE("Qty. to Receive", lrecPurchaseLine."Qty. to Receive" + ldQtyApplied);

                IF( lrecPurchaseLine."Bin Code" = '' ) THEN
                  lrecPurchaseLine.VALIDATE("Bin Code",pcodBinCode);

                lrecPurchaseLine.MODIFY(TRUE);
                ldQtyToApplyPurchaseUOM := ldQtyToApplyPurchaseUOM - ldQtyApplied;

                IF( (ptrecLPLine."Lot No." <> '') OR (ptrecLPLine."Serial No." <> '') ) THEN BEGIN
                  cuResMgmt.AddRemovePurchaseTracking(
                    lrecPurchaseLine,
                    ptrecLPLine."Serial No.",
                    ptrecLPLine."Lot No.",
                    ldQtyApplied,
                    lrecPurchaseLine."Unit of Measure Code",//<IW author="h.z" date="05/17/16" issue="TFS2594" />
                    ptrecLPLine."Expiration Date") //0D, //<IW author="h.z" date="08/15/16" issue="TFS2673" />
                END;

                //
                // assign to line usage table
                //
                IF( pcodLicensePlateNumber <> '' ) THEN BEGIN
                  CreateLPLineUsage(ptrecLPLine, ldQtyApplied,lrecLPLineUsage."Source Document"::"Purchase Order",lrecPurchaseLine."Document No.", lrecPurchaseLine."Line No."); //<IW author="R.Trudeau" date="01/09/19" issue="TFS4388" />
                END;
              END;
            UNTIL(lrecPurchaseLine.NEXT=0);
          END;

          // error out if there is quantity still unapplied
          IF( ldQtyToApplyPurchaseUOM <> 0 ) THEN BEGIN
            ERROR(tcUnappliedQty, ptrecLPLine."No.", ptrecLPLine.Quantity,  //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
                                                    ldQtyToApplyPurchaseUOM,
                                                    ptrecLPLine."Unit of Measure Code",  //<IW author="h.z" date="05/17/16" issue="TFS2594" />
                                                    lrecPurchaseLine."Unit of Measure Code"
                                                    );
          END;
        UNTIL(ptrecLPLine.NEXT=0);

        IF pcodLicensePlateNumber <> '' THEN
          SetLPSourceDocument(ptrecLPHeader,lrecLPLineUsage."Source Document"::"Purchase Order",lrecPurchaseLine."Document No.",pcodBinCode);
      END;
    END;

    PROCEDURE updateTransferLinesCode@1000000061(pcodLocationCode@1000000000 : Code[10];pcodTransferNumber@1000000014 : Code[20];pcodLicensePlateNumber@1000000015 : Code[20];pbShipping@1000000016 : Boolean;pcodBinCode@1000000007 : Code[20];pbOverrideBlankBin@1000000008 : Boolean;VAR ptrecLPLine@1000000017 : TEMPORARY Record 23044506;pbOverrideQuantity@1000000009 : Boolean;pbCreatedWhenReceiving@1000000025 : Boolean;VAR ptrecLPHeader@1000000027 : TEMPORARY Record 23044505);
    VAR
      lrecTransferLine@1000000006 : Record 5741;
      ldQtyToApply@1000000005 : Decimal;
      ldQtyOutstanding@1000000004 : Decimal;
      ldQtyApplied@1000000003 : Decimal;
      lrecLPLineUsage@1000000002 : Record 23044507;
      lrecLPHeader@1000000001 : Record 23044505;
      ltrecCommentLine@1000000013 : TEMPORARY Record 97;
      ldQtyToShip@1000000010 : Decimal;
      lrecTransferOrder@1000000011 : Record 5740;
      lrecNewTransferLine@1000000012 : Record 5741;
      lrecItem@1000000018 : Record 27;
      liNextLineNumber@1000000019 : Integer;
      lcuReleaseTransferDoc@1000000020 : Codeunit 5708;
      lbCreateNewTransferLine@1000000021 : Boolean;
      lcuResMgmt@1000000024 : Codeunit 23044504;
      lcuResMgmt2@1000000022 : Codeunit 23044514;
      ldOriginalQtyToShip@1000000023 : Decimal;
      lcodUOM@1000000026 : Code[10];
    BEGIN
      // Updates the Transfer Lines with the appropriate License Plate.
      // If quantities do not match resulting License Plate then an error will be thrown.

      // make sure if receiving that the license plate was shipped
      IF( (NOT pbShipping) AND (pcodLicensePlateNumber <> '') ) THEN BEGIN
        IF (NOT pbCreatedWhenReceiving) THEN BEGIN
          verifyInterLocationLP(pcodLicensePlateNumber,pcodTransferNumber);
        END;
      END;

      setLPLocationAndBin(pcodLicensePlateNumber,pcodLocationCode,pcodBinCode);

      //
      // go through the items to be applied and match
      // them against the whse. receipt lines
      //
      IF( ptrecLPLine.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          ldQtyToApply := ptrecLPLine.Quantity;

          // find the matching transfer lines
          lrecTransferLine.RESET;
          lrecTransferLine.SETRANGE("Document No.",pcodTransferNumber);
          lrecTransferLine.SETRANGE("Item No.",ptrecLPLine."No.");  //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
          lrecTransferLine.SETRANGE("Variant Code",ptrecLPLine."Variant Code");
          IF( pbShipping ) THEN BEGIN
            lrecTransferLine.SETRANGE("Transfer-from Code",pcodLocationCode);

            IF( pbOverrideBlankBin ) THEN
              lrecTransferLine.SETFILTER("Transfer-from Bin Code", '%1|%2',pcodBinCode,'')
            ELSE
              lrecTransferLine.SETRANGE("Transfer-from Bin Code", pcodBinCode);
          END
          ELSE BEGIN
            // receiving
            lrecTransferLine.SETFILTER("Qty. in Transit",'<>0');
            lrecTransferLine.SETRANGE("Transfer-to Code",pcodLocationCode);

            IF( pbOverrideBlankBin ) THEN
              lrecTransferLine.SETFILTER("Transfer-To Bin Code", '%1|%2',pcodBinCode,'')
            ELSE
              lrecTransferLine.SETRANGE("Transfer-To Bin Code", pcodBinCode);
          END;

          IF ( lrecTransferLine.FIND('-') ) THEN BEGIN
            //<IW author="Howie Zhao" date="05/17/16" issue="TFS2594" >
            lrecItem.GET(ptrecLPLine."No.");
            lcodUOM := lrecTransferLine."Unit of Measure Code";
            ldQtyToApply := cuCommonBase.ConvertUnitOfMeasure(lrecItem,
                                                              ptrecLPLine.Quantity,
                                                              ptrecLPLine."Unit of Measure Code",
                                                              lcodUOM);     // to UOM
            REPEAT
              IF ( lcodUOM <> lrecTransferLine."Unit of Measure Code" ) THEN BEGIN
                // if the next transfer line is in a different uom than the
                // previous transfer line, then we must convert into that next unit of measure
                ldQtyToApply := cuCommonBase.ConvertUnitOfMeasure(lrecItem,
                                                                  ldQtyToApply,
                                                                  lcodUOM,  // from UOM
                                                                  lrecTransferLine."Unit of Measure Code" );     // to UOM
                lcodUOM := lrecTransferLine."Unit of Measure Code";
              END;

              ldQtyApplied := 0;

              IF (GUIALLOWED AND pbOverrideQuantity) THEN BEGIN
                IF (lrecTransferLine.Quantity < (ldQtyToApply+lrecTransferLine."Qty. to Ship")) THEN BEGIN
                  IF ( CONFIRM(STRSUBSTNO(tcOverrideQuantityWarning,
                               ptrecLPLine."No.",//<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
                               ptrecLPLine.Quantity, lrecTransferLine.Quantity,
                              lrecTransferLine.Quantity, (ldQtyToApply+lrecTransferLine."Qty. to Ship"))))  THEN BEGIN
                    pbOverrideQuantity := TRUE;
                  END
                  ELSE BEGIN
                    pbOverrideQuantity := FALSE;
                  END;
                END;
              END;
              IF (pbOverrideQuantity) THEN BEGIN
                // if license plate quantity is more than transfer line
                // then override with license plate quantity
                // Changed behavior to match.
                ldOriginalQtyToShip := lrecTransferLine."Qty. to Ship";
                ldQtyApplied := ldQtyToApply;
                IF ((ldQtyApplied+ldOriginalQtyToShip) > lrecTransferLine.Quantity ) THEN BEGIN
                  lrecTransferLine.VALIDATE(Quantity, (ldQtyApplied+ldOriginalQtyToShip));
                  lrecTransferLine.VALIDATE("Qty. to Ship",ldOriginalQtyToShip);
                END;
                ldQtyToShip := (ldQtyApplied+ldOriginalQtyToShip);
              END ELSE BEGIN
                IF( pbShipping ) THEN BEGIN
                  ldQtyOutstanding := lrecTransferLine.Quantity - (lrecTransferLine."Qty. to Ship" + lrecTransferLine."Quantity Shipped");
                END ELSE BEGIN
                  ldQtyOutstanding := lrecTransferLine.Quantity - (lrecTransferLine."Qty. to Receive" + lrecTransferLine."Quantity Received");
                END;

                // if there is remaining qty on this line to be used
                IF( (ldQtyOutstanding > 0) AND (ldQtyToApply > 0) ) THEN BEGIN

                  // determine the amount to apply
                  IF( ldQtyOutstanding >= ldQtyToApply ) THEN
                    ldQtyApplied := ldQtyToApply
                  ELSE
                    ldQtyApplied := ldQtyOutstanding;

                  ldQtyToShip:= lrecTransferLine."Qty. to Ship" + ldQtyApplied;
                END;
              END;
              // update the line
              IF( pbShipping ) THEN BEGIN
                lrecTransferLine.VALIDATE("Qty. to Ship", ldQtyToShip);
                IF( lrecTransferLine."Transfer-from Bin Code" = '' ) THEN
                  lrecTransferLine.VALIDATE("Transfer-from Bin Code",pcodBinCode);
              END ELSE BEGIN
                lrecTransferLine.VALIDATE("Qty. to Receive", lrecTransferLine."Qty. to Receive" + ldQtyApplied);
                IF( lrecTransferLine."Transfer-To Bin Code" = '' ) THEN
                  lrecTransferLine.VALIDATE("Transfer-To Bin Code",pcodBinCode);
              END;
              lrecTransferLine.MODIFY(TRUE);
              ldQtyToApply := ldQtyToApply - ldQtyApplied;

              // add/remove the serial number
              IF( (ptrecLPLine."Lot No." <> '') OR (ptrecLPLine."Serial No." <> '') ) THEN BEGIN
                IF( pbShipping AND (ptrecLPLine."Serial No." <> '')) THEN BEGIN
                  IF( cuCommonBase.getSNQtyAvailable(lrecTransferLine."Item No.", ptrecLPLine."Serial No.", pcodLocationCode) <= 0 )
                  THEN BEGIN
                    ERROR(tcSNNotAvailable,ptrecLPLine."Serial No.");
                  END;
                END;

                lcuResMgmt2.AddRemoveTransferTracking(
                lrecTransferLine,
                ptrecLPLine."Serial No.",
                ptrecLPLine."Lot No.",
                pbShipping,
                ldQtyApplied,
                ptrecLPLine."Expiration Date" //0D, //<IW author="h.z" date="08/15/16" issue="TFS2673" />
                );
              END;

              //
              // assign to line usage table
              //
              IF( pcodLicensePlateNumber <> '' ) THEN BEGIN
                IF pbShipping THEN
                  CreateLPLineUsage(ptrecLPLine, ldQtyApplied,lrecLPLineUsage."Source Document"::"Outbound Transfer",lrecTransferLine."Document No.", lrecTransferLine."Line No.")
                ELSE
                  CreateLPLineUsage(ptrecLPLine, ldQtyApplied,lrecLPLineUsage."Source Document"::"Inbound Transfer",lrecTransferLine."Document No.", lrecTransferLine."Line No.")
              END;
            UNTIL(lrecTransferLine.NEXT=0);



          END ELSE BEGIN
            // LP item is not in transfer order line
            // then prompt create a new transfer line
            lbCreateNewTransferLine := FALSE;
            IF (GUIALLOWED) THEN BEGIN
              IF (CONFIRM(STRSUBSTNO(tcCreateNewTransferLine, ptrecLPLine."No.", pcodTransferNumber))) THEN BEGIN //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
                lbCreateNewTransferLine := TRUE;
              END;
            END;

            IF ((NOT GUIALLOWED) OR lbCreateNewTransferLine) THEN BEGIN
              //
              // The NOT GUIALLOWED is to handle the Device scenario.  In that situation
              // there is no confirmation (or it could be handled by a Device customization),
              // however the default behavior is to add the line item.
              //
              CLEAR(lrecItem);
              lrecTransferOrder.GET(pcodTransferNumber);
              lcuReleaseTransferDoc.Reopen(lrecTransferOrder);
              lrecItem.GET(ptrecLPLine."No.");  //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
              CLEAR(lrecNewTransferLine);
              ldQtyApplied := ldQtyToApply;
              lrecNewTransferLine.INIT;
              lrecNewTransferLine.VALIDATE("Document No.", pcodTransferNumber);
              liNextLineNumber := getNextTransferLineNumber(pcodTransferNumber);
              lrecNewTransferLine.VALIDATE("Line No.", liNextLineNumber);
              // This is required to work with a partner modification
              // that demands the line to be inserted prior to other fields being
              // set.
              // Note: Insert used to be after validating Qty. to Receive.
              lrecNewTransferLine.INSERT(TRUE);
              lrecNewTransferLine.VALIDATE("Item No.", ptrecLPLine."No.");  //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
              lrecNewTransferLine.VALIDATE(Quantity, ldQtyApplied);
              lrecNewTransferLine.VALIDATE("Unit of Measure Code", ptrecLPLine."Unit of Measure Code");
              lrecNewTransferLine.VALIDATE("Transfer-from Bin Code", pcodBinCode);
              IF (pbShipping) THEN
                lrecNewTransferLine.VALIDATE("Qty. to Ship", ldQtyApplied)
              ELSE
                lrecNewTransferLine.VALIDATE("Qty. to Receive", ldQtyApplied);

              lrecNewTransferLine.MODIFY(TRUE);

              lcuReleaseTransferDoc.RUN(lrecTransferOrder);
              ldQtyToApply := ldQtyToApply - ldQtyApplied;

              // add/remove the serial number
              IF( (ptrecLPLine."Lot No." <> '') OR (ptrecLPLine."Serial No." <> '') ) THEN BEGIN
                IF( pbShipping AND (ptrecLPLine."Serial No." <> '')) THEN BEGIN
                  IF( cuCommonBase.getSNQtyAvailable(lrecTransferLine."Item No.", ptrecLPLine."Serial No.", pcodLocationCode) <= 0 )
                  THEN BEGIN
                    ERROR(tcSNNotAvailable,ptrecLPLine."Serial No.");
                  END;
                END;

                lcuResMgmt.AddRemoveTransferSerialNumber(
                  lrecNewTransferLine,
                  ptrecLPLine."Serial No.",
                  ptrecLPLine."Lot No.",
                  FALSE,
                  pbShipping,
                  FALSE,
                  ldQtyApplied
                  );
              END;

              //
              // assign to line usage table
              //
              IF( pcodLicensePlateNumber <> '' ) THEN BEGIN
                IF pbShipping THEN
                  CreateLPLineUsage(ptrecLPLine, ldQtyApplied,lrecLPLineUsage."Source Document"::"Outbound Transfer",lrecTransferLine."Document No.", lrecTransferLine."Line No.")
                ELSE
                  CreateLPLineUsage(ptrecLPLine, ldQtyApplied,lrecLPLineUsage."Source Document"::"Inbound Transfer",lrecTransferLine."Document No.", lrecTransferLine."Line No.")
              END; // if we have a license plate to assign.
            END; // if we are to create a new transfer line.
          END;

          // error out if there is quantity still unapplied
          IF( ldQtyToApply <> 0 ) THEN
            ERROR(tcUnappliedQty, ptrecLPLine."No.",  //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
                                  ptrecLPLine.Quantity,
                                  ldQtyToApply,
                                  ptrecLPLine."Unit of Measure Code",  //<IW author="h.z" date="05/17/16" issue="TFS2594" />
                                  lrecTransferLine."Unit of Measure Code");
        UNTIL(ptrecLPLine.NEXT=0);
      END;

      IF pcodLicensePlateNumber <> '' THEN BEGIN
        IF pbShipping THEN
          SetLPSourceDocument(ptrecLPHeader,lrecLPLineUsage."Source Document"::"Outbound Transfer",lrecTransferLine."Document No.",pcodBinCode)
        ELSE
          SetLPSourceDocument(ptrecLPHeader,lrecLPLineUsage."Source Document"::"Inbound Transfer",lrecTransferLine."Document No.",pcodBinCode);
      END;
    END;

    PROCEDURE updateSalesLinesCode@1000000055(pcodLocationCode@1000000000 : Code[10];pcodSalesNumber@1000000014 : Code[20];pcodLicensePlateNumber@1000000015 : Code[20];pcodBinCode@1000000016 : Code[20];pbOverrideBlankBin@1000000008 : Boolean;VAR ptrecLPLine@1000000017 : TEMPORARY Record 23044506;VAR ptrecLPHeader@1000000012 : TEMPORARY Record 23044505);
    VAR
      lrecSalesLine@1000000007 : Record 37;
      ldQtyOutstanding@1000000005 : Decimal;
      ldQtyApplied@1000000004 : Decimal;
      ltrecCommentLine@1000000003 : TEMPORARY Record 97;
      lrecLPLineUsage@1000000002 : Record 23044507;
      lrecLPHeader@1000000001 : Record 23044505;
      ldQtyToApplySalesUOM@1000000009 : Decimal;
      lrecItem@1000000010 : Record 27;
      lcodUOM@1000000006 : Code[10];
      lrecNotUsedWhseActivityLine@1000000011 : Record 5767;
    BEGIN
      // Updates the Sales Lines with the appropriate License Plate.
      // If quantities do not match resulting License Plate then an error will be thrown.
      // If it wasn't previously assigned, assign it now
      IF(  pcodLicensePlateNumber <> '' ) THEN BEGIN
        lrecLPHeader.GET(pcodLicensePlateNumber);

        IF( lrecLPHeader."Location Code" = '') THEN
          lrecLPHeader.VALIDATE("Location Code",pcodLocationCode);
        IF( lrecLPHeader."Bin Code" = '' ) THEN
          lrecLPHeader.VALIDATE("Bin Code",pcodBinCode);
        lrecLPHeader.MODIFY(TRUE);
      END;
      //
      // go through the items to be applied and match
      // them against the sales lines
      //
      IF( ptrecLPLine.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          // find the matching sales lines
          lrecSalesLine.RESET;
          lrecSalesLine.SETRANGE("Document Type",lrecSalesLine."Document Type"::Order);
          lrecSalesLine.SETRANGE("Document No.",pcodSalesNumber);
          lrecSalesLine.SETRANGE(Type,lrecSalesLine.Type::Item);
          lrecSalesLine.SETRANGE("No.",ptrecLPLine."No.");  //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
          lrecSalesLine.SETRANGE("Variant Code",ptrecLPLine."Variant Code");

          lrecSalesLine.SETFILTER("Outstanding Quantity", '>0' );

          lrecSalesLine.SETRANGE("Location Code",pcodLocationCode);
          IF( pbOverrideBlankBin ) THEN
            lrecSalesLine.SETFILTER("Bin Code",'%1|%2',pcodBinCode,'')
          ELSE
            lrecSalesLine.SETRANGE("Bin Code",pcodBinCode);

          IF( lrecSalesLine.FIND('-') ) THEN BEGIN
            // Convert to sales uom quantity and License Plate quantity always base uom
            lrecItem.GET(ptrecLPLine."No.");  //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
            lcodUOM := lrecSalesLine."Unit of Measure Code";
            ldQtyToApplySalesUOM := cuCommonBase.ConvertUnitOfMeasure(lrecItem,
                                                                      ptrecLPLine.Quantity,
                                                                      ptrecLPLine."Unit of Measure Code",  // from UOM //<IW author="h.z" date="05/17/16" issue="TFS2594" />
                                                                      lcodUOM );     // to UOM

            REPEAT
              IF ( lcodUOM <> lrecSalesLine."Unit of Measure Code" ) THEN BEGIN
                // if the next sales line is in a different uom than the
                // previous sales line, then we must convert into that next unit of measure
                ldQtyToApplySalesUOM := cuCommonBase.ConvertUnitOfMeasure(lrecItem,
                                                                      ldQtyToApplySalesUOM,
                                                                      lcodUOM,  // from UOM
                                                                      lrecSalesLine."Unit of Measure Code" );     // to UOM
                lcodUOM := lrecSalesLine."Unit of Measure Code";
              END;

              ldQtyApplied := 0;
              ldQtyOutstanding := lrecSalesLine.Quantity - (lrecSalesLine."Qty. to Ship" + lrecSalesLine."Quantity Shipped");

              // if there is remaining qty on this line to be used
              IF( (ldQtyOutstanding > 0) AND (ldQtyToApplySalesUOM > 0) ) THEN BEGIN
                // determine the amount to apply
                IF( ldQtyOutstanding >= ldQtyToApplySalesUOM ) THEN BEGIN
                  ldQtyApplied := ldQtyToApplySalesUOM;
                END ELSE BEGIN
                  ldQtyApplied := ldQtyOutstanding;
                END;

                // update the line
                lrecSalesLine.VALIDATE("Qty. to Ship", lrecSalesLine."Qty. to Ship" + ldQtyApplied);

                IF( lrecSalesLine."Bin Code" = '' ) THEN
                  lrecSalesLine.VALIDATE("Bin Code",pcodBinCode);

                lrecSalesLine.MODIFY(TRUE);
                ldQtyToApplySalesUOM := ldQtyToApplySalesUOM - ldQtyApplied;

                // add/remove the lot or serial number
                IF( (ptrecLPLine."Lot No." <> '') OR (ptrecLPLine."Serial No." <> '') ) THEN BEGIN
                  // make sure the serial number is available for use
                  IF( ptrecLPLine."Serial No." <> '' ) THEN BEGIN
                    IF( cuCommonBase.getSNQtyAvailable(lrecSalesLine."No.", ptrecLPLine."Serial No.", pcodLocationCode) <= 0 ) THEN
                      ERROR(tcSNNotAvailable,ptrecLPLine."Serial No.");
                  END;

                  cuResMgmt.AddRemoveSalesShipTracking(
                    lrecSalesLine,
                    ptrecLPLine."Serial No.",
                    ptrecLPLine."Lot No.",
                    ldQtyApplied, // this is in the sales uom
                    lrecSalesLine."Unit of Measure Code",
                    ptrecLPLine."Expiration Date",
                    lrecNotUsedWhseActivityLine  //<IW author="h.z" date="02/24/16" issue="TFS2292" />
                    );
                END;

                //
                // assign to line usage table
                //
                IF( pcodLicensePlateNumber <> '' ) THEN BEGIN
                  CreateLPLineUsage(ptrecLPLine, ldQtyApplied,lrecLPLineUsage."Source Document"::"Sales Order",lrecSalesLine."Document No.", lrecSalesLine."Line No."); //<IW author="R.Trudeau" date="01/09/19" issue="TFS4388" />
                END;
              END;
            UNTIL(lrecSalesLine.NEXT=0);
          END;

          // error out if there is quantity still unapplied
          IF( ldQtyToApplySalesUOM <> 0 ) THEN
            ERROR(tcUnappliedQty,
            ptrecLPLine."No.",   //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
            ptrecLPLine.Quantity, ldQtyToApplySalesUOM,
                                                                      ptrecLPLine."Unit of Measure Code",  //<IW author="h.z" date="05/17/16" issue="TFS2594" />
                                                                      lrecSalesLine."Unit of Measure Code"
            );
        UNTIL(ptrecLPLine.NEXT=0);
      END;

      IF pcodLicensePlateNumber <> '' THEN
        SetLPSourceDocument(ptrecLPHeader,lrecLPLineUsage."Source Document"::"Sales Order",lrecSalesLine."Document No.",'');
    END;

    PROCEDURE updateReturnSalesLinesCode@1000000049(pcodLocation@1000000000 : Code[10];pcodSalesNumber@1000000014 : Code[20];pcodLicensePlateNumber@1000000015 : Code[20];pcodBinCode@1000000016 : Code[20];VAR ptrecLPLine@1000000017 : TEMPORARY Record 23044506);
    VAR
      lrecSalesLine@1000000007 : Record 37;
      ltrecCommentLine@1000000003 : TEMPORARY Record 97;
      lrecLPLineUsage@1000000002 : Record 23044507;
      lrecLPHeader@1000000001 : Record 23044505;
    BEGIN
      // Processing License Plates for return sales orders.
      ERROR(tcSalesReturnNotSupported);
    END;

    PROCEDURE updateWhseActivityLinesCode@1000000068(pcodLocationCode@1000000000 : Code[10];pcodLicensePlateNumber@1000000013 : Code[20];precSrcActivityLine@1000000028 : Record 5767;pcodBinCode@1000000030 : Code[20];pbAutoShip@1000000001 : Boolean;pbAutoTakePlace@1000000002 : Boolean;VAR ptrecLPLine@1000000029 : TEMPORARY Record 23044506;VAR ptrecLPHeader@1000000016 : TEMPORARY Record 23044505);
    VAR
      lrecLPHeader@1000000015 : Record 23044505;
      lrecLPLineUsage@1000000014 : Record 23044507;
      lrecActivityLine@1000000012 : Record 5767;
      lrecItem@1000000011 : Record 27;
      lrecWhseActivityLine@1000000010 : Record 5767;
      ltrecCommentLine2@1000000009 : TEMPORARY Record 97;
      lcodAutoBinCode@1000000008 : Code[20];
      lbWhseTracked@1000000007 : Boolean;
      ldQtyRemainingToApplyLPUOM@1000000006 : Decimal;
      ldQtyAvailableToApplyLPUOM@1000000005 : Decimal;
      ldQtyToApplyLPUOM@1000000004 : Decimal;
      ldQtyToApplyWhseActivityUOM@1000000003 : Decimal;
      loptSourceDocumentType@1000000017 : Option;
    BEGIN
      // Updates the Warehouse Activity Lines with the appropriate License Plate.
      // If quantities do not match resulting License Plate then an error will be thrown.


      //<IW author="R.Trudeau" date="01/09/19" issue="TFS4388">
      IF( precSrcActivityLine."Activity Type" = precSrcActivityLine."Activity Type"::"Put-away" ) THEN
        loptSourceDocumentType := lrecLPLineUsage."Source Document"::"Put-away"
      ELSE IF( precSrcActivityLine."Activity Type" = precSrcActivityLine."Activity Type"::Pick ) THEN
        loptSourceDocumentType := lrecLPLineUsage."Source Document"::Pick
      ELSE IF( precSrcActivityLine."Activity Type" = precSrcActivityLine."Activity Type"::Movement ) THEN
        loptSourceDocumentType := lrecLPLineUsage."Source Document"::Movement
      ELSE IF( precSrcActivityLine."Activity Type" = precSrcActivityLine."Activity Type"::"Invt. Put-away" ) THEN
        loptSourceDocumentType := lrecLPLineUsage."Source Document"::"Invt. Put-away"
      ELSE IF( precSrcActivityLine."Activity Type" = precSrcActivityLine."Activity Type"::"Invt. Pick" ) THEN
        loptSourceDocumentType := lrecLPLineUsage."Source Document"::"Invt. Pick"
      ELSE IF( precSrcActivityLine."Activity Type" = precSrcActivityLine."Activity Type"::"Invt. Movement" ) THEN
        loptSourceDocumentType := lrecLPLineUsage."Source Document"::"Invt. Movement"
      ELSE
        ERROR(tcUnknownActivity);





      lcodAutoBinCode := '';
      IF( pcodLicensePlateNumber <> '')  THEN BEGIN
        IF pbAutoTakePlace THEN BEGIN
          lrecLPHeader.GET(pcodLicensePlateNumber);

          // if auto-taking use the bin specified on the LP
          IF( (lrecLPHeader."Bin Code" <> '') AND (precSrcActivityLine."Action Type" = precSrcActivityLine."Action Type"::Place) ) THEN
            lcodAutoBinCode := lrecLPHeader."Bin Code"
          ELSE
            lcodAutoBinCode := getAutoTakePlaceBinCode(precSrcActivityLine);

          // if placing but auto-take enabled we'll set to the take lines Bin
          IF( precSrcActivityLine."Action Type" = precSrcActivityLine."Action Type"::Place ) THEN
            setLPLocationAndBin(pcodLicensePlateNumber,pcodLocationCode,lcodAutoBinCode);
        END;

        // if taking - update the bin to the take scanned bin
        IF( precSrcActivityLine."Action Type" <> precSrcActivityLine."Action Type"::Place ) THEN
          setLPLocationAndBin(pcodLicensePlateNumber,pcodLocationCode,pcodBinCode);
      END;

      //
      // go through the items to be applied and match
      // them against the whse. receipt lines
      //
      IF( ptrecLPLine.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          ldQtyRemainingToApplyLPUOM := ptrecLPLine.Quantity;
          lrecItem.GET(ptrecLPLine."No.");  //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />

          // find the matching activity lines
          lrecActivityLine.RESET;
          lrecActivityLine.SETRANGE("Activity Type",precSrcActivityLine."Activity Type");
          lrecActivityLine.SETRANGE("No.",precSrcActivityLine."No.");
          lrecActivityLine.SETRANGE("Item No.",ptrecLPLine."No.");  //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
          lrecActivityLine.SETRANGE("Variant Code",ptrecLPLine."Variant Code");
          IF (pcodBinCode <> '') THEN
            lrecActivityLine.SETRANGE("Bin Code", pcodBinCode);
          lrecActivityLine.SETRANGE("Action Type",precSrcActivityLine."Action Type");
          lrecActivityLine.SETRANGE("Source Document",precSrcActivityLine."Source Document");
          lrecActivityLine.SETRANGE("Source No.",precSrcActivityLine."Source No.");
          lrecActivityLine.SETFILTER("Qty. Outstanding", '>0');

          //
          // if the items are whse. tracked we need to make sure the ln/sn defined on
          // the line matches the one in the license plate
          //
          lbWhseTracked := cuCommonBase.isWhseTracked(ptrecLPLine."No.");  //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
          IF lbWhseTracked THEN BEGIN
            lrecActivityLine.SETFILTER("Lot No.",'%1|%2','',ptrecLPLine."Lot No.");
            lrecActivityLine.SETFILTER("Serial No.",'%1|%2','',ptrecLPLine."Serial No.");
          END;

          IF( lrecActivityLine.FIND('-') ) THEN BEGIN
            REPEAT
              ldQtyAvailableToApplyLPUOM :=  cuCommonBase.ConvertUnitOfMeasure(
                                                lrecItem,
                                                (lrecActivityLine.Quantity - (lrecActivityLine."Qty. to Handle" + lrecActivityLine."Qty. Handled")),
                                                lrecActivityLine."Unit of Measure Code",
                                                ptrecLPLine."Unit of Measure Code");

              IF ldQtyAvailableToApplyLPUOM > 0 THEN BEGIN
                ldQtyToApplyLPUOM := 0;
                IF ldQtyAvailableToApplyLPUOM > ldQtyRemainingToApplyLPUOM THEN
                  ldQtyToApplyLPUOM := ldQtyRemainingToApplyLPUOM
                ELSE
                  ldQtyToApplyLPUOM := ldQtyAvailableToApplyLPUOM;
                ldQtyToApplyWhseActivityUOM := cuCommonBase.ConvertUnitOfMeasure(lrecItem,ldQtyToApplyLPUOM,ptrecLPLine."Unit of Measure Code",lrecActivityLine."Unit of Measure Code");
                lrecActivityLine.VALIDATE("Qty. to Handle", lrecActivityLine."Qty. to Handle" + ldQtyToApplyWhseActivityUOM);

                IF (lbWhseTracked) THEN BEGIN
                  lrecActivityLine.VALIDATE("Lot No.", ptrecLPLine."Lot No.");
                  lrecActivityLine.VALIDATE("Serial No.", ptrecLPLine."Serial No.");
                  lrecActivityLine.VALIDATE("Expiration Date", ptrecLPLine."Expiration Date");
                END;

                lrecActivityLine.MODIFY(TRUE);

                ldQtyRemainingToApplyLPUOM := ldQtyRemainingToApplyLPUOM - ldQtyToApplyLPUOM;

                IF( pcodLicensePlateNumber <> '' ) THEN BEGIN
                  CreateLPLineUsage(ptrecLPLine, ldQtyToApplyWhseActivityUOM,loptSourceDocumentType,lrecActivityLine."No.", lrecActivityLine."Line No."); //<IW author="R.Trudeau" date="01/09/19" issue="TFS4388" />
                END;

                // check it's inventory picks/put-away in this mehtod
                IF (((ptrecLPLine."Lot No." <> '') OR (ptrecLPLine."Serial No." <> '')) AND (NOT lbWhseTracked)) THEN BEGIN
                  cuResMgmt.AddRemoveInvtPickPutAwayTrack(lrecActivityLine, ptrecLPLine."Serial No.",ptrecLPLine."Lot No.", ldQtyToApplyWhseActivityUOM,ptrecLPLine."Expiration Date");
                END;

                IF( pbAutoShip) THEN BEGIN
                  IF ((lrecActivityLine."Whse. Document Type" = lrecActivityLine."Whse. Document Type"::Shipment) OR
                      (lrecActivityLine."Whse. Document Type" = lrecActivityLine."Whse. Document Type"::Assembly)) THEN BEGIN
                    cuCommonBase.processAutoShip(lrecActivityLine,ptrecLPLine."Serial No.",ptrecLPLine."Lot No.",FALSE,ldQtyToApplyWhseActivityUOM, ptrecLPLine."Expiration Date");
                  END;
                END;

                IF( pbAutoTakePlace ) THEN BEGIN
                  ltrecCommentLine2.DELETEALL;

                  cuCommonBase.processAutoTakePlace(lrecActivityLine,lcodAutoBinCode,ldQtyToApplyWhseActivityUOM,FALSE,lbWhseTracked,ltrecCommentLine2); //<IW author="R.Trudeau" date="02/13/19" issue="TFS4422" />

                  IF( pcodLicensePlateNumber <> '' ) THEN BEGIN
                    ltrecCommentLine2.RESET;
                    IF( ltrecCommentLine2.FINDSET(FALSE) ) THEN BEGIN
                      REPEAT
                        IF( lrecWhseActivityLine.GET(lrecActivityLine."Activity Type",lrecActivityLine."No.", ltrecCommentLine2."Line No.")) THEN BEGIN
                          CreateLPLineUsage(ptrecLPLine, ldQtyToApplyWhseActivityUOM,loptSourceDocumentType,lrecWhseActivityLine."No.", lrecWhseActivityLine."Line No."); //<IW author="R.Trudeau" date="01/09/19" issue="TFS4388" />
                        END;
                      UNTIL( ltrecCommentLine2.NEXT=0 );
                    END;
                  END;
                END;

                IF (lbWhseTracked) THEN BEGIN
                  IF ((lrecActivityLine.Quantity - (lrecActivityLine."Qty. Handled" + lrecActivityLine."Qty. to Handle")) > 0) THEN BEGIN
                    IF lrecActivityLine."Qty. to Handle" <> 0 THEN BEGIN
                      SplitLine(lrecActivityLine);
                      IF lrecActivityLine.FIND('-') THEN;
                    END;
                  END;
                END;


              END;
            UNTIL((lrecActivityLine.NEXT=0) OR (ldQtyRemainingToApplyLPUOM<=0));
          END ELSE BEGIN
            ERROR(tcNoMatchWhseActivityLine, ptrecLPLine."License Plate No.", ptrecLPLine."Line No.");
          END;

          // error out if there is quantity still unapplied
          IF( ldQtyRemainingToApplyLPUOM <> 0 ) THEN
            ERROR(tcUnappliedQty,
              ptrecLPLine."No.",  //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
              ptrecLPLine.Quantity, ldQtyRemainingToApplyLPUOM, ptrecLPLine."Unit of Measure Code", ptrecLPLine."Unit of Measure Code");
        UNTIL(ptrecLPLine.NEXT=0);
      END;

      IF pcodLicensePlateNumber <> '' THEN
        SetLPSourceDocument(ptrecLPHeader,loptSourceDocumentType,precSrcActivityLine."No.",'');
    END;

    PROCEDURE SplitLine@100000004(precWhseActivityLine@100000000 : Record 5767);
    VAR
      lrecWhseActivityLine@100000001 : Record 5767;
    BEGIN
      lrecWhseActivityLine.COPY(precWhseActivityLine);
      lrecWhseActivityLine.SplitLine(precWhseActivityLine);
      lrecWhseActivityLine.NEXT();
      lrecWhseActivityLine.VALIDATE("Qty. to Handle", 0);
      IF ((lrecWhseActivityLine."Activity Type" <> lrecWhseActivityLine."Activity Type"::"Put-away") AND
          (lrecWhseActivityLine."Activity Type" <> lrecWhseActivityLine."Activity Type"::"Invt. Put-away")) THEN BEGIN
        lrecWhseActivityLine.VALIDATE("Lot No.", '');
        lrecWhseActivityLine.VALIDATE("Serial No.", '');
        lrecWhseActivityLine.VALIDATE("Expiration Date", 0D);
      END;

      lrecWhseActivityLine.VALIDATE("Bin Code", precWhseActivityLine."Bin Code");
      lrecWhseActivityLine.MODIFY();
    END;

    PROCEDURE updateReclassLinesCode@1000000069(pcodLicensePlateNumber@1000000013 : Code[20];pbTakeMode@1000000001 : Boolean;pcodBatchName@1000000007 : Code[10];pcodLocationCode@1000000000 : Code[10];pcodBinCode@1000000030 : Code[20];pcodNewLocationCode@1000000010 : Code[10];pcodNewBinCode@1000000012 : Code[20];pbForceItemTracking@1000000004 : Boolean;VAR ptrecLPLine@1000000029 : TEMPORARY Record 23044506;pcodReclassTemplate@1000000008 : Code[10];pbAdjustQuantityRequired@1000000006 : Boolean;piSourceLineNo@1000000005 : Integer;pcodSourceCode@1000000011 : Code[10];VAR ptrecLPHeader@1000000017 : TEMPORARY Record 23044505);
    VAR
      ltrecItemJnlLineData@1000000014 : TEMPORARY Record 83;
      lrecItemJnlLine@1000000009 : Record 83;
      lrecLPLineUsage@1000000015 : Record 23044507;
      lcodTemplateName@1000000003 : Code[10];
      ltcLPCreateReclassDocNo@1000000016 : TextConst 'ENU=LP CREATED;ESM=LP CREATED;FRC=LP CREATED;ENC=LP CREATED';
      liLineNo@1000000002 : Integer;
    BEGIN
      // Updates (or inserts) the Reclass Lines with the appropriate License Plate.
      // If quantities do not match resulting License Plate then an error will be thrown.
      IF( pbTakeMode ) THEN BEGIN
        // update the location/bin on the license plate
        setLPLocationAndBin(pcodLicensePlateNumber,pcodLocationCode,pcodBinCode);

        IF( ptrecLPLine.FINDSET(FALSE) ) THEN BEGIN
          //
          //   If there are no specific LP lines to update.
          //
          //<IW author="Howie Zhao" date="5/10/17" issue="TFS3114" >
          ltrecItemJnlLineData.DELETEALL; // safety, local temp table
          liLineNo := 0;
          //<IW>
          REPEAT
            liLineNo := liLineNo + 10000;
            ltrecItemJnlLineData."Line No." := liLineNo;
            ltrecItemJnlLineData."Journal Template Name" := pcodReclassTemplate;
            ltrecItemJnlLineData."Journal Batch Name" := pcodBatchName;
            ltrecItemJnlLineData."Item No." := ptrecLPLine."No.";  //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
            ltrecItemJnlLineData."Variant Code" := ptrecLPLine."Variant Code";
            ltrecItemJnlLineData."Location Code" := pcodLocationCode;
            ltrecItemJnlLineData."New Location Code" := pcodNewLocationCode;
            ltrecItemJnlLineData."Bin Code" := pcodBinCode;
            ltrecItemJnlLineData."New Bin Code" := pcodNewBinCode;
            ltrecItemJnlLineData.Quantity := ptrecLPLine.Quantity;
            ltrecItemJnlLineData."Source Code" := pcodSourceCode;
            ltrecItemJnlLineData."LPM Source Line No." := piSourceLineNo;
            ltrecItemJnlLineData."WHI Document No." := '';
            ltrecItemJnlLineData."Unit of Measure Code" := ptrecLPLine."Unit of Measure Code";
            ltrecItemJnlLineData.INSERT;

            cuCommonBase.insertReclassJournalLine(
              lrecItemJnlLine,
              ltrecItemJnlLineData,
              ptrecLPLine."Serial No.",
              ptrecLPLine."Lot No.",
              pbForceItemTracking,
              pbAdjustQuantityRequired, //
              ltcLPCreateReclassDocNo,
              ptrecLPLine."Expiration Date" //<IW author="h.z" date="06/06/2017" issue="TFS3183" />
            );

            IF pbAdjustQuantityRequired THEN
              setWHIQuantityRequired(lrecItemJnlLine,ltrecItemJnlLineData.Quantity);

            IF pcodLicensePlateNumber <> '' THEN
              lrecItemJnlLine.VALIDATE("LPM License Plate No.", pcodLicensePlateNumber );

            IF piSourceLineNo <> 0 THEN
              lrecItemJnlLine.VALIDATE("LPM Source Line No.", piSourceLineNo);

            //
            // assign to line usage table
            //
            IF( pcodLicensePlateNumber <> '' ) THEN BEGIN
              CreateLPLineUsage(ptrecLPLine, ptrecLPLine.Quantity,lrecLPLineUsage."Source Document"::Reclass, pcodBatchName, lrecItemJnlLine."Line No."); //<IW author="R.Trudeau" date="01/09/19" issue="TFS4388" />
            END;
          UNTIL(ptrecLPLine.NEXT=0);
        END;

        IF pcodLicensePlateNumber <> '' THEN
          SetLPSourceDocument(ptrecLPHeader,lrecLPLineUsage."Source Document"::Reclass,pcodBatchName,'');
      END
      ELSE BEGIN
        // instead update the reclass lines new bin code
        // if there is an existing set of lp lines.
        //
        //
        lrecLPLineUsage.SETRANGE("License Plate No.",pcodLicensePlateNumber);
        lrecLPLineUsage.SETRANGE("Source Document",lrecLPLineUsage."Source Document"::Reclass);
        lrecLPLineUsage.SETRANGE("Source No.",pcodBatchName);
        lrecLPLineUsage.SETRANGE("Source Company Name",COMPANYNAME);
        lrecLPLineUsage.SETFILTER("Posting Date",'%1',0D);

        lcodTemplateName := cuCommonBase.getTemplate(PAGE::"Item Reclass. Journal");


        IF( lrecLPLineUsage.FINDSET(FALSE) ) THEN BEGIN
          lrecItemJnlLine.GET(lcodTemplateName,pcodBatchName,lrecLPLineUsage."Source Line No.");

          lrecItemJnlLine.VALIDATE("New Location Code",pcodNewLocationCode);
          lrecItemJnlLine.VALIDATE("New Bin Code",pcodNewBinCode);
          lrecItemJnlLine.MODIFY;
        END;
      END;
    END;

    PROCEDURE updatePurchaseReturnLinesCode@1000000100(pcodLocationCode@1000000016 : Code[10];pcodPurchaseNumber@1000000015 : Code[20];pcodLicensePlateNumber@1000000001 : Code[20];pcodBinCode@1000000009 : Code[20];pbOverrideBlankBin@1000000010 : Boolean;VAR ptrecLPLine@1000000000 : TEMPORARY Record 23044506;VAR ptrecLPHeader@1000000013 : TEMPORARY Record 23044505);
    VAR
      lrecPurchaseLine@1000000008 : Record 39;
      ldQtyToApplyPurchaseUOM@1000000007 : Decimal;
      ldQtyOutstanding@1000000006 : Decimal;
      ldQtyApplied@1000000005 : Decimal;
      ltrecCommentLine@1000000004 : TEMPORARY Record 97;
      lrecLPLineUsage@1000000003 : Record 23044507;
      lrecLPHeader@1000000002 : Record 23044505;
      lrecLPSetup@1000000011 : Record 23044523;
      lrecItem@1000000012 : Record 27;
    BEGIN
      // Updates the Purchase Return Lines with the appropriate License Plate.
      // If quantities do not match resulting License Plate then an error will be thrown.
      setLPLocationAndBin(pcodLicensePlateNumber,pcodLocationCode, pcodBinCode);
      lrecLPSetup.GET();
      //
      // go through the items to be applied and match
      // them against the whse. receipt lines
      //
      IF( ptrecLPLine.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          // find the matching purchase lines
          lrecPurchaseLine.RESET;
          lrecPurchaseLine.SETRANGE("Document Type",lrecPurchaseLine."Document Type"::"Return Order");
          lrecPurchaseLine.SETRANGE("Document No.",pcodPurchaseNumber);
          lrecPurchaseLine.SETRANGE(Type,lrecPurchaseLine.Type::Item);
          lrecPurchaseLine.SETRANGE("No.",ptrecLPLine."No.");  //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
          lrecPurchaseLine.SETRANGE("Variant Code",ptrecLPLine."Variant Code");


          lrecPurchaseLine.SETRANGE("Location Code",pcodLocationCode);
          IF( pbOverrideBlankBin ) THEN
            lrecPurchaseLine.SETFILTER("Bin Code",'%1|%2',pcodBinCode,'')
          ELSE
            lrecPurchaseLine.SETRANGE("Bin Code",pcodBinCode);

          IF( lrecPurchaseLine.FIND('-') ) THEN BEGIN
            // Convert to purchase uom quantity and License Plate quantity always base uom
            lrecItem.GET(ptrecLPLine."No.");  //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
            ldQtyToApplyPurchaseUOM := cuCommonBase.ConvertUnitOfMeasure(lrecItem,
                                                                         ptrecLPLine.Quantity,
                                                                         lrecItem."Base Unit of Measure",  // from UOM
                                                                         lrecPurchaseLine."Unit of Measure Code");     // to UOM

            REPEAT
              ldQtyApplied := 0;
              ldQtyOutstanding := lrecPurchaseLine.Quantity - (lrecPurchaseLine."Return Qty. to Ship" +
                lrecPurchaseLine."Return Qty. Shipped");

              IF( (ldQtyOutstanding > 0) AND (ldQtyToApplyPurchaseUOM > 0) ) AND
                (lrecLPSetup."LP Purchase Apply Behavior" = lrecLPSetup."LP Purchase Apply Behavior"::"Adjust Quantity To Apply")
              THEN BEGIN
                  // determine the amount to apply
                  IF( ldQtyOutstanding >= ldQtyToApplyPurchaseUOM ) THEN BEGIN
                     ldQtyApplied := ldQtyToApplyPurchaseUOM;
                  END ELSE BEGIN
                    ldQtyApplied := ldQtyOutstanding;
                  END;
                END ELSE IF (ldQtyToApplyPurchaseUOM > 0) AND
                (lrecLPSetup."LP Purchase Apply Behavior" = lrecLPSetup."LP Purchase Apply Behavior"::"Attempt To Over Receive" )
                THEN BEGIN
                  // this scenario is to support an ability to over receive
                  // by adjusting the quantity to receive.
                  ldQtyApplied := ldQtyToApplyPurchaseUOM;
                END;
              IF ldQtyApplied > 0 THEN BEGIN
                // update the line
                lrecPurchaseLine.VALIDATE("Return Qty. to Ship", lrecPurchaseLine."Return Qty. to Ship" + ldQtyApplied);

                IF( lrecPurchaseLine."Bin Code" = '' ) THEN
                  lrecPurchaseLine.VALIDATE("Bin Code",pcodBinCode);

                lrecPurchaseLine.MODIFY(TRUE);
                ldQtyToApplyPurchaseUOM := ldQtyToApplyPurchaseUOM - ldQtyApplied;

                IF( (ptrecLPLine."Lot No." <> '') OR (ptrecLPLine."Serial No." <> '') ) THEN BEGIN
                  cuResMgmt.AddRemovePurchaseReturnTrack(
                    lrecPurchaseLine,
                    ptrecLPLine."Serial No.",
                    ptrecLPLine."Lot No.",
                    ldQtyApplied, //<IW author="h.z" date="03/20/2019" issue="TFS4480" />
                    0D);
                END;

                //
                // assign to line usage table
                //
                IF( pcodLicensePlateNumber <> '' ) THEN BEGIN
                  CreateLPLineUsage(ptrecLPLine, ldQtyApplied,lrecLPLineUsage."Source Document"::"Purchase Return Order",lrecPurchaseLine."Document No.", lrecPurchaseLine."Line No."); //<IW author="R.Trudeau" date="01/09/19" issue="TFS4388" />
                END;
              END;
            UNTIL(lrecPurchaseLine.NEXT=0);
          END;

          // error out if there is quantity still unapplied
          IF( ldQtyToApplyPurchaseUOM <> 0 ) THEN
            ERROR(tcUnappliedQty,
                  ptrecLPLine."No.",   //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
                  ptrecLPLine.Quantity,
                  cuCommonBase.ConvertUnitOfMeasure(lrecItem,
                                                    ldQtyToApplyPurchaseUOM,
                                                    lrecPurchaseLine."Unit of Measure Code",  // to UOM
                                                    lrecItem."Base Unit of Measure"),     // from UOM
                                                    lrecItem."Base Unit of Measure",
                                                    lrecPurchaseLine."Unit of Measure Code"
                                                    );

        UNTIL(ptrecLPLine.NEXT=0);
      END;

      IF pcodLicensePlateNumber <> '' THEN
        SetLPSourceDocument(ptrecLPHeader,lrecLPLineUsage."Source Document"::"Purchase Return Order",lrecPurchaseLine."Document No.",'');
    END;

    PROCEDURE updateWhseReclassLinesCode@1000000103(pcodLicensePlateNumber@1000000013 : Code[20];pbTakeMode@1000000001 : Boolean;pcodBatchName@1000000007 : Code[10];pcodLocationCode@1000000000 : Code[10];pcodBinCode@1000000030 : Code[20];pcodNewLocationCode@1000000010 : Code[10];pcodNewBinCode@1000000012 : Code[20];pbForceItemTracking@1000000004 : Boolean;VAR ptrecLPLine@1000000029 : TEMPORARY Record 23044506;pcodUserName@1000000014 : Code[20];VAR ptrecLPHeader@1000000011 : TEMPORARY Record 23044505);
    VAR
      lrecLPLineUsage@1000000015 : Record 23044507;
      lrecWhseJnlLineOut@1000000006 : Record 7311;
      ltrecWhseJnlLineData@1000000002 : TEMPORARY Record 7311;
      lrecWhseJnlLine@1000000008 : Record 7311;
      lcodTemplateName@1000000003 : Code[10];
      ldQuantityBase@1000000016 : Decimal;
      ltcLPGenerated@1000000005 : TextConst 'ENU=LP GENERATED;ESM=LP GENERATED;FRC=LP GENERATED;ENC=LP GENERATED';
      liLineNo@1000000009 : Integer;
    BEGIN
      // Assign lp to warehouse reclass line

      lcodTemplateName := cuCommonBase.getWhseTemplate(PAGE::"Whse. Reclassification Journal");

      IF( pbTakeMode ) THEN BEGIN
        // update the location/bin on the license plate
        setLPLocationAndBin(pcodLicensePlateNumber, pcodLocationCode, pcodBinCode);

        IF( ptrecLPLine.FINDSET(FALSE) ) THEN BEGIN
          ltrecWhseJnlLineData.DELETEALL;   // safety, local temp table
          liLineNo := 0;
          REPEAT
            //<IW author="Howie Zhao" date="10/19/16" issue="TFS2699" >
            ldQuantityBase := ptrecLPLine.Quantity;
            IF (ptrecLPLine."Unit of Measure Code" <> '') THEN BEGIN
              ldQuantityBase := cuCommonBase.ConvertToBaseUomQuantity(ptrecLPLine."No.", ptrecLPLine.Quantity, ptrecLPLine."Unit of Measure Code");
            END;
            cuCommonBase.validateReclassMove(
                            pcodLocationCode,
                            ptrecLPLine."No.",  //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
                            ptrecLPLine."Variant Code",
                            ptrecLPLine."Lot No.",
                            ptrecLPLine."Serial No.",
                            pcodBinCode,
                            ldQuantityBase); //<IW author="h.z" date="10/19/16" issue="TFS2699" />
            liLineNo := liLineNo + 10000;
            ltrecWhseJnlLineData."Line No." := liLineNo;
            ltrecWhseJnlLineData."Journal Batch Name" := pcodBatchName;
            ltrecWhseJnlLineData."Location Code" := pcodLocationCode;
            ltrecWhseJnlLineData."Item No." := ptrecLPLine."No.";  //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
            ltrecWhseJnlLineData."Variant Code" := ptrecLPLine."Variant Code";
            ltrecWhseJnlLineData."From Bin Code" := pcodBinCode;
            ltrecWhseJnlLineData."To Bin Code" := pcodNewBinCode;
            ltrecWhseJnlLineData."Unit of Measure Code" := ptrecLPLine."Unit of Measure Code";
            ltrecWhseJnlLineData.Quantity := ptrecLPLine.Quantity;
            ltrecWhseJnlLineData."User ID" := pcodUserName;
            ltrecWhseJnlLineData.INSERT;

            cuCommonBase.insertWhseReclassJournalLine(
              lrecWhseJnlLineOut,
              ltrecWhseJnlLineData,
              ptrecLPLine."Serial No.",
              ptrecLPLine."Lot No.",
              FALSE,
              '',
              ltcLPGenerated,
              ptrecLPLine."Expiration Date"   //<IW author="h.z" date="6/07/17" issue="TFS3183" />
            );

            //
            // assign to line usage table
            //
            IF( pcodLicensePlateNumber <> '' ) THEN BEGIN
              CreateLPLineUsage(ptrecLPLine, ptrecLPLine.Quantity,lrecLPLineUsage."Source Document"::Reclass, pcodBatchName, lrecWhseJnlLineOut."Line No."); //<IW author="R.Trudeau" date="01/09/19" issue="TFS4388" />
            END;
          UNTIL (ptrecLPLine.NEXT = 0);
        END;

        IF pcodLicensePlateNumber <> '' THEN
          SetLPSourceDocument(ptrecLPHeader,lrecLPLineUsage."Source Document"::Reclass,pcodBatchName,'');
      END ELSE BEGIN
        lrecLPLineUsage.SETRANGE("License Plate No.", pcodLicensePlateNumber);
        lrecLPLineUsage.SETRANGE("Source Document", lrecLPLineUsage."Source Document"::Reclass);
        lrecLPLineUsage.SETRANGE("Source No.", pcodBatchName);
        lrecLPLineUsage.SETRANGE("Source Company Name", COMPANYNAME);
        lrecLPLineUsage.SETFILTER("Posting Date",'%1', 0D);

        IF( lrecLPLineUsage.FINDSET(FALSE) ) THEN BEGIN
          lrecWhseJnlLine.GET(lcodTemplateName,pcodBatchName,lrecLPLineUsage."Source Line No.");

          lrecWhseJnlLine.VALIDATE("To Bin Code",pcodNewBinCode);
          lrecWhseJnlLine.MODIFY;
        END;
      END;
    END;

    PROCEDURE pickLicensePlate@1000000086(poptSourceDocument@1000000001 : ' ,Purchase Order,Sales Order,Inbound Transfer,Outbound Transfer,Prod. Order,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick,Receipt,Shipment,Reclass,Purchase Return Order,Assembly,Invt. Movement';pcodSourceNo@1000000000 : Code[20];pcodLocationCode@1000000017 : Code[10];pcodBinCode@1000000016 : Code[20];pbDualAssignment@1000000018 : Boolean;pcodLPNumber@1000000020 : Code[20]) pcodOutLicensePlateNo : Code[20];
    VAR
      lrecLPHeader@1000000002 : Record 23044505;
      lpgLPList@1000000003 : Page 23044512;
      ltrecLPLineTemp@1000000005 : TEMPORARY Record 23044506;
      lrecLPLine@1000000006 : Record 23044506;
      lrecPurchHeader@1000000004 : Record 38;
      lrecSalesHeader@1000000007 : Record 36;
      lrecTransHeader@1000000008 : Record 5740;
      liSelected@1000000009 : Integer;
      lrecWhseActivityHeader@1000000010 : Record 5766;
      lrecSrcActivityLine@1000000011 : Record 5767;
      lrecWhseShipmentHeader@1000000012 : Record 7320;
      lrecWhseShipLine@1000000013 : Record 7321;
      lrecWhseReceiptHeader@1000000014 : Record 7316;
      lrecWhseReceiptLine@1000000015 : Record 7317;
      ltcAlreadyDualAssigned@1000000019 : TextConst 'ENU=License Plate ''%1'' has already been applied.;FRC=Palette ''%1'' a d‚j… ‚t‚ appliqu‚.';
    BEGIN
      // Pick a license plate and return license plate no.
      IF( pcodLPNumber = '' ) THEN BEGIN
        lrecLPHeader.FILTERGROUP(2);

        IF( poptSourceDocument IN
              [poptSourceDocument::Receipt,poptSourceDocument::"Inbound Transfer",poptSourceDocument::"Purchase Order"] ) THEN BEGIN
          lrecLPHeader.SETFILTER(Status,'%1|%2',lrecLPHeader.Status::" ",lrecLPHeader.Status::Shipped);
        END
        ELSE BEGIN
          lrecLPHeader.SETRANGE(Status,lrecLPHeader.Status::" ");
        END;

        IF( pbDualAssignment ) THEN BEGIN
          // force the previous assignment
          lrecLPHeader.SETRANGE("Source Document Type",poptSourceDocument);
          lrecLPHeader.SETRANGE("Source Document No.",pcodSourceNo);
        END
        ELSE BEGIN
          lrecLPHeader.SETRANGE("Source Document Type",lrecLPHeader."Source Document Type"::" ");
        END;
        IF( poptSourceDocument <> poptSourceDocument::Reclass ) THEN BEGIN
          lrecLPHeader.SETFILTER("Location Code",'%1|%2','',pcodLocationCode);
          IF( NOT pbDualAssignment ) THEN BEGIN
            lrecLPHeader.SETFILTER("Bin Code",'%1|%2','',pcodBinCode);
          END;
        END
        ELSE BEGIN
          lrecLPHeader.SETFILTER("Location Code",'<>%1','');
        END;

        lrecLPHeader.FILTERGROUP(0);

        lpgLPList.SETTABLEVIEW(lrecLPHeader);
        lpgLPList.LOOKUPMODE(TRUE);

        IF( lpgLPList.RUNMODAL <> ACTION::LookupOK ) THEN BEGIN
          EXIT;
        END;

        lpgLPList.GETRECORD(lrecLPHeader);

        // make sure not already 'dual' assigned
        IF( pbDualAssignment ) THEN BEGIN
          lrecLPHeader.CALCFIELDS("Total Line Usage Qty.", "Item Quantity Count");
          IF( lrecLPHeader."Total Line Usage Qty." > lrecLPHeader."Item Quantity Count" ) THEN BEGIN
            ERROR(ltcAlreadyDualAssigned,lrecLPHeader."No.");
          END;
        END;
      END
      ELSE BEGIN
        lrecLPHeader.GET(pcodLPNumber);
      END;
      //
      // At this point lrecLPHeader will be set, and represent the license
      // plate to assign to.
      // So, set the return value.
      pcodOutLicensePlateNo := lrecLPHeader."No.";

      // build up the temporary lines
      ltrecLPLineTemp.DELETEALL;
      lrecLPLine.SETRANGE("License Plate No.",lrecLPHeader."No.");
      IF( lrecLPLine.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          ltrecLPLineTemp := lrecLPLine;
          ltrecLPLineTemp.INSERT;
        UNTIL(lrecLPLine.NEXT=0);
      END;
    END;

    PROCEDURE verifyInterCompanyLP@1000000032(pcodLicensePlateNumber@1000000000 : Code[20];pcodPurchaseOrderNumber@1000000001 : Code[20]);
    VAR
      lrecPurchaseHeader@1000000002 : Record 38;
      lrecICPartner@1000000003 : Record 413;
      lrecLPLineUsage@1000000004 : Record 23044507;
    BEGIN
      // Checks to make sure the License Plate was shipped/sold on the correct purchase order.
      // Uses external document number to validate link between documents.
      lrecPurchaseHeader.GET(lrecPurchaseHeader."Document Type"::Order,pcodPurchaseOrderNumber);
      IF( cuCommonBase.isInterCompanyDocument(lrecPurchaseHeader."Buy-from IC Partner Code") ) THEN BEGIN
        lrecICPartner.GET(lrecPurchaseHeader."Buy-from IC Partner Code");

        // must find the license plate shipped from the other location
        lrecLPLineUsage.SETRANGE("License Plate No.",pcodLicensePlateNumber);
        lrecLPLineUsage.SETRANGE("Source Company Name",lrecICPartner."Inbox Details");
        lrecLPLineUsage.SETRANGE("Source Document",lrecLPLineUsage."Source Document"::"Sales Order");
        lrecLPLineUsage.SETRANGE("External Document No.",lrecPurchaseHeader."No.");
        lrecLPLineUsage.SETFILTER("Posting Date",'<>%1',0D);

        IF( NOT lrecLPLineUsage.FINDLAST ) THEN
          ERROR(tcLPNotOnInterLocation,pcodLicensePlateNumber,lrecPurchaseHeader."No.");
      END;
    END;

    PROCEDURE verifyInterLocationLP@1000000026(pcodLicensePlateNumber@1000000000 : Code[20];pcodTransferNumber@1000000001 : Code[20]);
    VAR
      lrecLPLineUsage@1000000002 : Record 23044507;
    BEGIN
      // Checks to make sure the License Plate was shipped for the receiving transfer order.
      lrecLPLineUsage.SETRANGE("License Plate No.", pcodLicensePlateNumber);
      lrecLPLineUsage.SETRANGE("Source Document",lrecLPLineUsage."Source Document"::"Outbound Transfer");
      lrecLPLineUsage.SETRANGE("Source No.",pcodTransferNumber);
      lrecLPLineUsage.SETFILTER("Posting Date",'<>%1',0D); // make sure posted

      IF( NOT lrecLPLineUsage.FINDLAST ) THEN
        ERROR(tcLPNotOnInterLocation,pcodLicensePlateNumber,pcodTransferNumber);
    END;

    PROCEDURE setLPLocationAndBin@1000000065(pcodLicensePlateNumber@1000000000 : Code[20];pcodLocationCode@1000000001 : Code[10];pcodBinCode@1000000002 : Code[20]);
    VAR
      lrecLPHeader@1000000003 : Record 23044505;
    BEGIN
      IF(  lrecLPHeader.GET(pcodLicensePlateNumber) ) THEN BEGIN
        lrecLPHeader."Location Code" := pcodLocationCode;
        IF( (pcodBinCode <> '') AND (lrecLPHeader."Bin Code"<>pcodBinCode) ) THEN
          lrecLPHeader."Bin Code" := pcodBinCode;
        lrecLPHeader.MODIFY;
      END;
    END;

    PROCEDURE getNextTransferLineNumber@1000000094(pcodTransferOrderNumber@1000000000 : Code[20]) : Integer;
    VAR
      lrecTransferLine@1000000001 : Record 5741;
      liNextLineNumber@1000000002 : Integer;
    BEGIN
      // return transfer line table next line no.
      liNextLineNumber := 10000;
      lrecTransferLine.SETRANGE("Document No.", pcodTransferOrderNumber);
      IF( lrecTransferLine.FINDLAST ) THEN BEGIN
          liNextLineNumber := lrecTransferLine."Line No." + 10000;
      END;
      EXIT(liNextLineNumber);
    END;

    PROCEDURE getAutoTakePlaceBinCode@1000000066(VAR precActivityLine@1000000000 : Record 5767) : Code[20];
    VAR
      lrecWhseActivityLine@1000000001 : Record 5767;
    BEGIN
      // Finds the first matching line on the take/place side and returns the bin code.
      lrecWhseActivityLine.SETRANGE("Activity Type", precActivityLine."Activity Type");
      lrecWhseActivityLine.SETRANGE("No.", precActivityLine."No.");
      lrecWhseActivityLine.SETRANGE("Whse. Document Type", precActivityLine."Whse. Document Type");
      lrecWhseActivityLine.SETRANGE("Whse. Document No.", precActivityLine."Whse. Document No.");
      lrecWhseActivityLine.SETRANGE("Whse. Document Line No.", precActivityLine."Whse. Document Line No.");
      lrecWhseActivityLine.SETFILTER("Qty. Outstanding",'>%1',0);

      IF( precActivityLine."Action Type" = precActivityLine."Action Type"::Take ) THEN BEGIN
        lrecWhseActivityLine.SETRANGE("Action Type", lrecWhseActivityLine."Action Type"::Place);
      END
      ELSE BEGIN
        lrecWhseActivityLine.SETRANGE("Action Type", lrecWhseActivityLine."Action Type"::Take);
      END;

      IF( lrecWhseActivityLine.FINDFIRST ) THEN
        EXIT(lrecWhseActivityLine."Bin Code")
      ELSE
        EXIT('');
    END;

    PROCEDURE updateLPOutputLine@1000000082(VAR precItemJournalLine@1000000011 : TEMPORARY Record 83);
    VAR
      lrecLPHeader@1000000009 : Record 23044505;
      lrecLPLine@1000000013 : Record 23044506;
      lrecCustomLPLine@1000000001 : Record 23044506;
      liNextLineNumber@1000000000 : Integer;
    BEGIN
      // Handles requests to update/add license plate lines and the appropriate usage.
      // if no license plate is required and no license plate assignment
      // do not modify license plate line
      IF (precItemJournalLine."LPM License Plate No." = '') THEN
          EXIT;

      lrecLPHeader.GET(precItemJournalLine."LPM License Plate No.");
      IF ( lrecLPHeader."Bin Code" = '' ) THEN BEGIN
        //
        // if the license plate bin code is blank on the
        // license plate header, then change it to the bin
        // on the output line.
        //
        lrecLPHeader."Location Code" := precItemJournalLine."Location Code";
        lrecLPHeader."Bin Code" := precItemJournalLine."Bin Code";
        lrecLPHeader.MODIFY(FALSE);
      END ELSE IF (
        (lrecLPHeader."Bin Code" <> '' ) AND
        ( lrecLPHeader."Bin Code" <> precItemJournalLine."Bin Code" ) )
      THEN BEGIN
        ERROR( tcCannotOutputToDifferentBin );
      END;

      lrecLPLine.SETRANGE("License Plate No.",lrecLPHeader."No.");
      lrecLPLine.SETRANGE(Type,lrecLPLine.Type::Item);
      lrecLPLine.SETRANGE("No.", precItemJournalLine."Item No.");
      lrecLPLine.SETRANGE("Variant Code",precItemJournalLine."Variant Code");
      lrecLPLine.SETRANGE("Lot No.",precItemJournalLine."Lot No.");
      lrecLPLine.SETRANGE("Serial No.",precItemJournalLine."Serial No.");

      IF( lrecLPLine.FINDFIRST ) THEN BEGIN
        // if there is a match
        lrecLPLine.Quantity := lrecLPLine.Quantity + precItemJournalLine."Output Quantity";

        liNextLineNumber := lrecLPLine."Line No.";
        lrecCustomLPLine := lrecLPLine;
        lrecLPLine.MODIFY;


        IF( lrecLPLine.Quantity <= 0 ) THEN BEGIN
          lrecLPLine.DELETE;
          // Need to update the description
          generateLPDescription(lrecLPHeader,lrecLPLine,TRUE);
        END ELSE BEGIN
          generateLPDescription(lrecLPHeader,lrecLPLine,FALSE);
        END;

      END
      ELSE BEGIN
        IF( precItemJournalLine."Output Quantity" > 0 ) THEN BEGIN
          //
          // get the next available license plate line number
          //
          liNextLineNumber := 10000;
          lrecLPLine.RESET;
          lrecLPLine.SETRANGE("License Plate No.",lrecLPHeader."No.");
          IF( lrecLPLine.FINDLAST ) THEN
            liNextLineNumber := lrecLPLine."Line No." + 10000;

          //
          // create the license plate line
          //
          CLEAR(lrecLPLine);
          lrecLPLine."License Plate No." := precItemJournalLine."LPM License Plate No.";
          lrecLPLine."Line No." := liNextLineNumber;
          lrecLPLine.Type := lrecLPLine.Type::Item;
          lrecLPLine."No." := precItemJournalLine."Item No.";
          lrecLPLine."Serial No." := precItemJournalLine."Serial No.";
          lrecLPLine."Lot No." := precItemJournalLine."Lot No.";
          lrecLPLine."Variant Code" := precItemJournalLine."Variant Code";
          lrecLPLine.Quantity := precItemJournalLine."Output Quantity";
          lrecCustomLPLine := lrecLPLine;

          lrecLPLine.INSERT;

          generateLPDescription(lrecLPHeader,lrecLPLine,FALSE);
        END;
      END;

      lrecLPHeader.MODIFY(TRUE);
    END;

    PROCEDURE postSalesLine@1000000023(precSalesLine@1000000000 : Record 37;pcodShipmentNo@1000000004 : Code[20]);
    VAR
      lrecLineUsage@1000000002 : Record 23044507;
      lrecLPHeader@1000000001 : Record 23044505;
      lrecSalesHeader@1000000003 : Record 36;
      lrecItem@1000000005 : Record 27;
      lrecLineUsageToUpdate@1000000009 : Record 23044507;
      ldCurrentTotalGrossWeight@1000000008 : Decimal;
      ldCurrentTotalNetWeight@1000000007 : Decimal;
      liItemCount@1000000006 : Integer;
    BEGIN
      // Marks the sales order license plate usage as posted and shipped.
      lrecLineUsage.SETCURRENTKEY("Posting Date","Source No.","Source Line No.","Source Document");

      //
      // find all the usage lines for the activity line
      //
      lrecLineUsage.SETFILTER("Posting Date",'%1',0D);
      lrecLineUsage.SETRANGE("Source No.", precSalesLine."Document No.");
      lrecLineUsage.SETRANGE("Source Line No.",precSalesLine."Line No.");
      lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::"Sales Order");

      lrecSalesHeader.GET(precSalesLine."Document Type",precSalesLine."Document No.");

      IF( lrecLineUsage.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          lrecLPHeader.GET(lrecLineUsage."License Plate No.");

          IF( (lrecLPHeader.Status = lrecLPHeader.Status::Quarantined) OR
              ((lrecLPHeader.Status = lrecLPHeader.Status::Unbuilt) AND
              ((precSalesLine.Quantity > 0) OR (NOT lrecLPHeader."Unbuild on Receipt")))
          ) THEN BEGIN
            ERROR(tcPostInvalidStatus,lrecLPHeader."No.",lrecLPHeader.Status);
          END;

          IF( lrecLPHeader.Status IN [lrecLPHeader.Status::Quarantined, lrecLPHeader.Status::Unbuilt] ) THEN BEGIN
            ERROR(tcPostInvalidStatus,lrecLPHeader."No.",lrecLPHeader.Status);
          END;

          // set the posting date to mark it posted
          // changing the posting date will change the order
          // of the records, so we'll use entry no of the current
          // record and update that instead.
          lrecLineUsageToUpdate.GET( lrecLineUsage."Entry No." ); // primary key
          lrecLineUsageToUpdate.VALIDATE("Posting Date",TODAY);
          lrecLineUsageToUpdate.VALIDATE("External Document No.",lrecSalesHeader."External Document No.");
          lrecLineUsageToUpdate.MODIFY(TRUE);

          // mark the LP header as shipped
          lrecLPHeader.GET(lrecLineUsage."License Plate No.");

          IF( precSalesLine.Quantity < 0 ) THEN BEGIN
            IF( lrecLPHeader."Unbuild on Receipt" ) THEN
              lrecLPHeader.Status := lrecLPHeader.Status::Unbuilt
            ELSE
              lrecLPHeader.Status := lrecLPHeader.Status::" ";

            lrecLPHeader."Shipped Company Name" := '';
            lrecLPHeader."Shipped Source Document" := lrecLPHeader."Shipped Source Document"::" ";
            lrecLPHeader."Shipped Source No." := '';
            lrecLPHeader."Shipment No." := '';
          END
          ELSE BEGIN
            lrecLPHeader.Status := lrecLPHeader.Status::Shipped;
            lrecLPHeader.VALIDATE("Shipped Company Name",COMPANYNAME);
            lrecLPHeader.VALIDATE("Shipped Source Document",lrecLPHeader."Shipped Source Document"::"Sales Order");
            lrecLPHeader.VALIDATE("Shipped Source No.",lrecLineUsage."Source No.");
            lrecLPHeader.VALIDATE("Shipment No.",pcodShipmentNo);

            lrecLPHeader."Location Code" := '';
            lrecLPHeader."Bin Code" := '';
          END;

          //
          // This works under the assumption that a pallet cannot be partially
          // shipped.  If a pallet must be partially shipped it should be split, becoming
          // two distinct pallets.
          //
          IF ( lrecLPHeader."Package Tracking Number" = '' ) THEN BEGIN
            lrecLPHeader.VALIDATE("Package Tracking Number",
                                  COPYSTR(lrecSalesHeader."Package Tracking No.", 1,
                                          MAXSTRLEN( lrecLPHeader."Package Tracking Number")));
          END;
          lrecLPHeader.VALIDATE("Shipment Net Weight", lrecLPHeader."Current Net Weight");
          IF ( lrecLPHeader."Shipment Gross Weight" = 0 ) THEN
            lrecLPHeader.VALIDATE("Shipment Gross Weight", lrecLPHeader."Current Gross Weight");
          lrecLPHeader.VALIDATE("Shipped Item Count", lrecLPHeader."Current Item Count");
          lrecLPHeader.VALIDATE("Shipment Date", TODAY);
          lrecLPHeader.VALIDATE("Shipped Transaction DateTime", CURRENTDATETIME);
          lrecLPHeader.VALIDATE("Shipment Cubage", lrecLPHeader."Current Cubage");
          lrecLPHeader."Source Document Type" := lrecLPHeader."Source Document"::" ";
          lrecLPHeader."Source Document No." := '';
          lrecLPHeader.Locked := FALSE;
                                                 // set it to false because if mutiple sale lines exist, modify may fail on and after
                                                 // second time
          lrecLPHeader.MODIFY(TRUE);

          IF (lrecLPHeader.Status = lrecLPHeader.Status::Shipped) THEN BEGIN
            lrecLPHeader.VALIDATE(Locked, TRUE);
            lrecLPHeader.MODIFY;
          END;
        UNTIL( lrecLineUsage.NEXT=0);
      END;
    END;

    PROCEDURE postTransferLine@1000000029(precTransferLine@1000000000 : Record 5741;pbOutbound@1000000003 : Boolean;pcodShipmentNo@1000000004 : Code[20]);
    VAR
      lrecLineUsage@1000000002 : Record 23044507;
      lrecLPHeader@1000000001 : Record 23044505;
      lrecLineUsageToUpdate@1000000005 : Record 23044507;
    BEGIN
      // Marks the transfer order license plate usage as posted and shipped/blank.
      lrecLineUsage.SETCURRENTKEY("Posting Date","Source No.","Source Line No.","Source Document");
      lrecLineUsage.SETFILTER("Posting Date",'%1',0D);
      lrecLineUsage.SETRANGE("Source No.", precTransferLine."Document No.");
      lrecLineUsage.SETRANGE("Source Line No.",precTransferLine."Line No.");

      IF( pbOutbound ) THEN
        lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::"Outbound Transfer")
      ELSE
        lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::"Inbound Transfer");

      // Changed to findset(false) to ensure a read-only key in the read
      // loop
      IF( lrecLineUsage.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          lrecLPHeader.GET(lrecLineUsage."License Plate No.");
          IF( (lrecLPHeader.Status = lrecLPHeader.Status::Quarantined) OR
              ((lrecLPHeader.Status = lrecLPHeader.Status::Unbuilt) AND (pbOutbound OR (NOT lrecLPHeader."Unbuild on Receipt")))
          ) THEN BEGIN
            ERROR(tcPostInvalidStatus,lrecLPHeader."No.",lrecLPHeader.Status);
          END;

          lrecLineUsageToUpdate.GET( lrecLineUsage."Entry No." ); // primary key
          lrecLineUsageToUpdate.VALIDATE("Posting Date",TODAY);
          lrecLineUsageToUpdate.MODIFY(TRUE);

          // mark the LP header as shipped or cleared
          lrecLPHeader.GET(lrecLineUsage."License Plate No.");

          IF( pbOutbound ) THEN BEGIN
            lrecLPHeader.Status := lrecLPHeader.Status::Shipped;

            lrecLPHeader.VALIDATE("Shipped Company Name",COMPANYNAME);
            lrecLPHeader.VALIDATE("Shipped Source Document",lrecLPHeader."Shipped Source Document"::"Outbound Transfer");
            lrecLPHeader.VALIDATE("Shipped Source No.",lrecLineUsage."Source No.");
            lrecLPHeader.VALIDATE("Shipment No.",pcodShipmentNo);

            lrecLPHeader."Location Code" := '';
            lrecLPHeader."Bin Code" := '';
          END
          ELSE BEGIN
            IF( lrecLPHeader."Unbuild on Receipt" ) THEN BEGIN
              lrecLPHeader.Status := lrecLPHeader.Status::Unbuilt;
              lrecLPHeader."Bin Code" := '';
            END
            ELSE
              lrecLPHeader.Status := lrecLPHeader.Status::" ";

            lrecLPHeader."Shipped Company Name" := '';
            lrecLPHeader."Shipped Source Document" := lrecLPHeader."Shipped Source Document"::" ";
            lrecLPHeader."Shipped Source No." := '';
            lrecLPHeader."Shipment No." := '';
          END;

          //
          // This works under the assumption that a pallet cannot be partially
          // shipped.  If a pallet must be partially shipped it should be split, becoming
          // two distinct pallets.
          //
          //<IW author="MM" date="02/25/2019" issue="TFS4442" />
          lrecLPHeader.VALIDATE("Shipment Net Weight", lrecLPHeader."Current Net Weight");
          IF ( lrecLPHeader."Shipment Gross Weight" = 0 ) THEN
            lrecLPHeader.VALIDATE("Shipment Gross Weight", lrecLPHeader."Current Gross Weight");
          lrecLPHeader.VALIDATE("Shipped Item Count", lrecLPHeader."Current Item Count");
          lrecLPHeader.VALIDATE("Shipment Date", TODAY);
          lrecLPHeader.VALIDATE("Shipped Transaction DateTime", CURRENTDATETIME);
          lrecLPHeader.VALIDATE("Shipment Cubage", lrecLPHeader."Current Cubage");
          lrecLPHeader."Source Document Type" := lrecLPHeader."Source Document"::" ";
          lrecLPHeader."Source Document No." := '';
          lrecLPHeader.Locked := FALSE;
                                                 // set it to false because if mutiple sale lines exist, modify may fail on and after
                                                 // second time
          lrecLPHeader.MODIFY(TRUE);

          IF (lrecLPHeader.Status = lrecLPHeader.Status::Shipped) THEN BEGIN
            lrecLPHeader.VALIDATE(Locked, TRUE);
            lrecLPHeader.MODIFY;
          END;
        UNTIL( lrecLineUsage.NEXT=0);
      END;
    END;

    PROCEDURE postPurchaseLine@1000000034(precPurchaseLine@1000000000 : Record 39);
    VAR
      lrecLineUsage@1000000002 : Record 23044507;
      lrecLPHeader@1000000001 : Record 23044505;
      lrecLineUsageToUpdate@1000000004 : Record 23044507;
      lrecPurchaseHeader@1000000005 : Record 38;
      liCount@1000000003 : Integer;
    BEGIN
      // Marks the purchase order license plate usage as posted and blank.
      lrecLineUsage.SETCURRENTKEY("Posting Date","Source No.","Source Line No.","Source Document");
      lrecLineUsage.SETFILTER("Posting Date",'%1',0D);
      lrecLineUsage.SETRANGE("Source No.", precPurchaseLine."Document No.");
      lrecLineUsage.SETRANGE("Source Line No.",precPurchaseLine."Line No.");
      //lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::"Purchase Order");
      lrecLineUsage.SETFILTER("Source Document", '%1|%2', lrecLineUsage."Source Document"::"Purchase Order", lrecLineUsage."Source Document"::"Purchase Return Order");
      IF( lrecLineUsage.FINDSET(FALSE) ) THEN BEGIN
        liCount := lrecLineUsage.COUNT;

        REPEAT
          lrecLPHeader.GET(lrecLineUsage."License Plate No.");
          IF( (lrecLPHeader.Status = lrecLPHeader.Status::Quarantined) OR
              ((lrecLPHeader.Status = lrecLPHeader.Status::Unbuilt) AND (NOT lrecLPHeader."Unbuild on Receipt"))
          ) THEN BEGIN
            ERROR(tcPostInvalidStatus,lrecLPHeader."No.",lrecLPHeader.Status);
          END;

          // set the posting date to mark it posted
          lrecLineUsageToUpdate.GET( lrecLineUsage."Entry No." ); // primary key
          lrecLineUsageToUpdate.VALIDATE("Posting Date",TODAY);
          lrecLineUsageToUpdate.MODIFY(TRUE);

          // mark the LP header as cleared
          lrecLPHeader.GET(lrecLineUsage."License Plate No.");

          IF( lrecLPHeader."Unbuild on Receipt" ) THEN BEGIN
            lrecLPHeader.Status := lrecLPHeader.Status::Unbuilt;
            lrecLPHeader."Bin Code" := '';
          END ELSE BEGIN
            lrecLPHeader.Status := lrecLPHeader.Status::" ";
          END;

          IF (lrecLineUsage."Source Document" = lrecLineUsage."Source Document"::"Purchase Order") THEN BEGIN
            lrecLPHeader."Shipped Company Name" := '';
            lrecLPHeader."Shipped Source Document" := lrecLPHeader."Shipped Source Document"::" ";
            lrecLPHeader."Shipped Source No." := '';
            lrecLPHeader."Shipment No." := '';
          END ELSE IF (lrecLineUsage."Source Document" = lrecLineUsage."Source Document"::"Purchase Return Order") THEN BEGIN
            lrecPurchaseHeader.GET(precPurchaseLine."Document Type", precPurchaseLine."Document No.");
            lrecLPHeader."Shipped Company Name" := COPYSTR(lrecPurchaseHeader."Buy-from Vendor Name", 1, MAXSTRLEN(lrecLPHeader."Shipped Company Name"));
            lrecLPHeader."Shipped Source Document" := lrecLPHeader."Shipped Source Document"::"Purchase Order";
            lrecLPHeader."Shipped Source No." := precPurchaseLine."Document No.";
            lrecLPHeader."Shipment No." := precPurchaseLine."Return Shipment No.";
          END;

          lrecLPHeader."Source Document Type" := lrecLPHeader."Source Document"::" ";
          lrecLPHeader."Source Document No." := '';


          lrecLPHeader.MODIFY(TRUE);
        UNTIL( lrecLineUsage.NEXT=0);
        liCount := lrecLineUsage.COUNT;

      END;
    END;

    PROCEDURE postShipmentLine@1000000021(precWhseShipmentLine@1000000000 : Record 7321);
    VAR
      lrecLineUsage@1000000002 : Record 23044507;
      lrecLPHeader@1000000001 : Record 23044505;
      lrecLineUsageToUpdate@1000000003 : Record 23044507;
      lrecAssembleOrderLink@1000000004 : Record 904;
      lrecLicensePlateLine@1000000006 : Record 23044506;
      lrecWhseSetup@1000000009 : Record 5769;
      lbLicensePlateOnAssembly@1000000005 : Boolean;
      lrecSalesHeader@1000000007 : Record 36;
      lrecShipmentHeader@1000000010 : Record 7320;
      lrecWhseShipLine@1000000008 : Record 7321;
      lrecLineUsageNew@1000000011 : Record 23044507;
    BEGIN
      lrecWhseShipLine.SETRANGE("No.",precWhseShipmentLine."No.");
      lrecWhseShipLine.SETFILTER("Qty. to Ship",'>0');
      IF lrecWhseShipLine.FINDSET(FALSE) THEN BEGIN
        REPEAT
          // Transfers the Shipment license plate information to the base document.
          lrecLineUsage.SETCURRENTKEY("Posting Date","Source No.","Source Line No.","Source Document");
          lrecLineUsage.SETFILTER("Posting Date",'%1',0D);
          lrecLineUsage.SETRANGE("Source No.", lrecWhseShipLine."No.");
          lrecLineUsage.SETRANGE("Source Line No.",lrecWhseShipLine."Line No.");
          lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::Shipment);

          IF( lrecLineUsage.FINDSET(FALSE) ) THEN BEGIN
            lrecWhseSetup.GET;
            lrecWhseSetup.TESTFIELD(lrecWhseSetup."Shipment Posting Policy",lrecWhseSetup."Shipment Posting Policy"::"Stop and show the first posting error");

            REPEAT
              lrecLPHeader.GET(lrecLineUsage."License Plate No.");

              IF( lrecLPHeader.Status IN [lrecLPHeader.Status::Quarantined, lrecLPHeader.Status::Unbuilt] ) THEN BEGIN
                ERROR(tcPostInvalidStatus,lrecLPHeader."No.",lrecLPHeader.Status);
              END;

              lrecLPHeader.VALIDATE("Shipped Company Name",COMPANYNAME);
              lrecLPHeader.VALIDATE("Shipped Source Document",lrecLPHeader."Shipped Source Document"::Shipment);
              lrecLPHeader.VALIDATE("Shipped Source No.", lrecWhseShipLine."No.");
      //        lrecLPHeader."Location Code" := ''; pankaj
      //        lrecLPHeader."Bin Code" := '';
              lrecLPHeader."Source Document Type" := lrecLPHeader."Source Document"::" ";
              lrecLPHeader."Source Document No." := '';
              lrecLPHeader.Status := lrecLPHeader.Status::Shipped;
              lrecLPHeader.VALIDATE("Shipment Date", TODAY);
              lrecLPHeader.VALIDATE("Shipped Transaction DateTime", CURRENTDATETIME);

              IF ( (lrecLPHeader."Package Tracking Number" = '') AND (lrecWhseShipLine."Source Document" = lrecWhseShipLine."Source Document"::"Sales Order") ) THEN BEGIN
                lrecSalesHeader.GET(lrecSalesHeader."Document Type"::Order, lrecWhseShipLine."Source No.");
                lrecLPHeader.VALIDATE("Package Tracking Number",
                                      COPYSTR(lrecSalesHeader."Package Tracking No.", 1,
                                              MAXSTRLEN(lrecLPHeader."Package Tracking Number")));
              END;

              lrecShipmentHeader.GET(lrecWhseShipLine."No.");
              lrecLPHeader.VALIDATE("Shipment No.", lrecShipmentHeader."Shipping No.");

              lrecLPHeader.MODIFY(TRUE);

              lbLicensePlateOnAssembly := FALSE;
              lrecLicensePlateLine.GET(lrecLineUsage."License Plate No.", lrecLineUsage."License Plate Line No.");
              IF (lrecWhseShipLine."Item No." <> lrecLicensePlateLine."No.") THEN BEGIN //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
                 lrecAssembleOrderLink.SETRANGE("Assembly Document Type", lrecAssembleOrderLink."Assembly Document Type"::Order);
                 lrecAssembleOrderLink.SETRANGE(Type, lrecAssembleOrderLink.Type::Sale);
                 lrecAssembleOrderLink.SETRANGE("Document Type", lrecAssembleOrderLink."Document Type"::Order);
                 lrecAssembleOrderLink.SETRANGE("Document No.", lrecWhseShipLine."Source No.");
                 IF (lrecAssembleOrderLink.FINDSET(FALSE)) THEN BEGIN
                   lbLicensePlateOnAssembly := TRUE;
                 END;
              END;

              // set the posting date to mark it posted
              // changing the posting date will change the order
              // of the records, so we'll use entry no of the current
              // record and update that instead.
              lrecLineUsageToUpdate.GET( lrecLineUsage."Entry No." ); // primary key
              lrecLineUsageToUpdate.VALIDATE("Posting Date",TODAY);
              lrecLineUsageToUpdate.MODIFY(TRUE);

              IF((lrecWhseShipLine."Source Document" = lrecWhseShipLine."Source Document"::"Sales Order") OR
                 (lrecWhseShipLine."Source Document" = lrecWhseShipLine."Source Document"::"Outbound Transfer")) THEN BEGIN
                CLEAR(lrecLineUsageNew);
                lrecLineUsageNew := lrecLineUsageToUpdate;
                lrecLineUsageNew."Entry No." := 0;
                //lrecLineUsageNew."Posting Date" := 0D;

                IF(lrecWhseShipLine."Source Document" = lrecWhseShipLine."Source Document"::"Sales Order") THEN
                  lrecLineUsageNew."Source Document" := lrecLineUsageNew."Source Document"::"Sales Order"
                ELSE IF(lrecWhseShipLine."Source Document" = lrecWhseShipLine."Source Document"::"Outbound Transfer") THEN
                  lrecLineUsageNew."Source Document" := lrecLineUsageNew."Source Document"::"Outbound Transfer";

                lrecLineUsageNew."Source No." := lrecWhseShipLine."Source No.";
                lrecLineUsageNew."Source Line No." := lrecWhseShipLine."Source Line No.";
                lrecLineUsageNew.INSERT(TRUE);
              END;
              UpdatePalletEntryStatus(lrecLineUsage."License Plate No."); //TPZ3299 Update status in Pallet Enrty
            UNTIL( lrecLineUsage.NEXT=0);
          END;
        UNTIL( lrecWhseShipLine.NEXT=0 );
      END;

      ClearTotes(precWhseShipmentLine);
    END;

    PROCEDURE PostWhseShipmentLine@100000001(VAR precWhseShipmentLine@100000011 : Record 7321);
    VAR
      lrecLPHeader@100000000 : Record 23044505;
      lrecLPLine@100000001 : Record 23044506;
      lrecLPLineUsage@100000002 : Record 23044507;
      lrecLPLineUsageToUpdate@100000003 : Record 23044507;
      lrecLPLineUsageNew@100000004 : Record 23044507;
      ltrecLPTotesTemp@100000005 : TEMPORARY Record 23044505;
      lrecWhseSetup@100000006 : Record 5769;
      lrecSalesHeader@100000007 : Record 36;
      lrecWhseShipmentHeader@100000008 : Record 7320;
      lrecAssembleOrderLink@100000009 : Record 904;
      lbLicensePlateOnAssembly@100000010 : Boolean;
    BEGIN
      lrecLPLineUsage.SETCURRENTKEY("Posting Date", "Source No.", "Source Line No.", "Source Document");
      lrecLPLineUsage.SETFILTER("Posting Date", '%1', 0D);
      lrecLPLineUsage.SETRANGE("Source No.", precWhseShipmentLine."No.");
      lrecLPLineUsage.SETRANGE("Source Line No.", precWhseShipmentLine."Line No.");
      lrecLPLineUsage.SETRANGE("Source Document", lrecLPLineUsage."Source Document"::Shipment);

      IF (lrecLPLineUsage.FINDSET(FALSE)) THEN BEGIN
        lrecWhseSetup.GET;
        lrecWhseSetup.TESTFIELD(lrecWhseSetup."Shipment Posting Policy", lrecWhseSetup."Shipment Posting Policy"::"Stop and show the first posting error");

        REPEAT
          lrecLPHeader.GET(lrecLPLineUsage."License Plate No.");

          IF (lrecLPHeader."Tote Whse. Document Type" = lrecLPHeader."Tote Whse. Document Type"::Shipment) AND
               (lrecLPHeader."Tote Whse. Document No." = precWhseShipmentLine."No.") THEN BEGIN
            ltrecLPTotesTemp := lrecLPHeader;
            IF ltrecLPTotesTemp.INSERT() THEN;
          END;

          IF (lrecLPHeader.Status IN [lrecLPHeader.Status::Quarantined, lrecLPHeader.Status::Unbuilt]) THEN BEGIN
            ERROR(tcPostInvalidStatus, lrecLPHeader."No.", lrecLPHeader.Status);
          END;

          lrecLPHeader.VALIDATE("Shipped Source Document", lrecLPHeader."Shipped Source Document"::Shipment);
          lrecLPHeader.VALIDATE("Shipped Source No.", precWhseShipmentLine."No.");
          lrecLPHeader."Location Code" := '';
          lrecLPHeader."Bin Code" := '';
      //    lrecLPHeader."Source Document" := lrecLPHeader."Source Document"::" ";
      //    lrecLPHeader."Source No." := '';
          lrecLPHeader."Source Document Type" := lrecLPHeader."Source Document Type"::" ";
          lrecLPHeader."Source Document No." := '';
          lrecLPHeader.Status := lrecLPHeader.Status::Shipped;
          lrecLPHeader.VALIDATE("Shipment Date", TODAY);
          lrecLPHeader.VALIDATE("Shipped Transaction DateTime", CURRENTDATETIME);

          IF ((lrecLPHeader."Package Tracking Number" = '') AND (precWhseShipmentLine."Source Document" = precWhseShipmentLine."Source Document"::"Sales Order")) THEN BEGIN
            lrecSalesHeader.GET(lrecSalesHeader."Document Type"::Order, precWhseShipmentLine."Source No.");
            lrecLPHeader.VALIDATE("Package Tracking Number", COPYSTR(lrecSalesHeader."Package Tracking No.", 1, MAXSTRLEN(lrecLPHeader."Package Tracking Number")));
          END;

          lrecWhseShipmentHeader.GET(precWhseShipmentLine."No.");
          lrecLPHeader.VALIDATE("Shipment No.", lrecWhseShipmentHeader."Shipping No.");
          lrecLPHeader.MODIFY(TRUE);

          lbLicensePlateOnAssembly := FALSE;
          lrecLPLine.GET(lrecLPLineUsage."License Plate No.", lrecLPLineUsage."License Plate Line No.");
          IF (precWhseShipmentLine."Item No." <> lrecLPLine."No.") THEN BEGIN
            lrecAssembleOrderLink.SETRANGE("Assembly Document Type", lrecAssembleOrderLink."Assembly Document Type"::Order);
            lrecAssembleOrderLink.SETRANGE(Type, lrecAssembleOrderLink.Type::Sale);
            lrecAssembleOrderLink.SETRANGE("Document Type", lrecAssembleOrderLink."Document Type"::Order);
            lrecAssembleOrderLink.SETRANGE("Document No.", precWhseShipmentLine."Source No.");
            IF (lrecAssembleOrderLink.FINDSET(FALSE)) THEN BEGIN
              lbLicensePlateOnAssembly := TRUE;
            END;
          END;

          lrecLPLineUsageToUpdate.GET(lrecLPLineUsage."Entry No.");
          lrecLPLineUsageToUpdate.VALIDATE("Posting Date", TODAY);
          lrecLPLineUsageToUpdate.MODIFY(TRUE);

          IF ((precWhseShipmentLine."Source Document" = precWhseShipmentLine."Source Document"::"Sales Order") OR
               (precWhseShipmentLine."Source Document" = precWhseShipmentLine."Source Document"::"Outbound Transfer")) THEN BEGIN
            CLEAR(lrecLPLineUsageNew);
            lrecLPLineUsageNew := lrecLPLineUsageToUpdate;
            lrecLPLineUsageNew."Entry No." := 0;
            //lrecLPLineUsageNew."Posting Date" := 0D;

            IF (precWhseShipmentLine."Source Document" = precWhseShipmentLine."Source Document"::"Sales Order") THEN
              lrecLPLineUsageNew."Source Document" := lrecLPLineUsageNew."Source Document"::"Sales Order"
            ELSE
              IF (precWhseShipmentLine."Source Document" = precWhseShipmentLine."Source Document"::"Outbound Transfer") THEN
                lrecLPLineUsageNew."Source Document" := lrecLPLineUsageNew."Source Document"::"Outbound Transfer";

            lrecLPLineUsageNew."Source No." := precWhseShipmentLine."Source No.";
            lrecLPLineUsageNew."Source Line No." := precWhseShipmentLine."Source Line No.";
            lrecLPLineUsageNew.INSERT(TRUE);
          END;
        UNTIL (lrecLPLineUsage.NEXT = 0);
      END;

      ltrecLPTotesTemp.RESET();
      IF ltrecLPTotesTemp.FINDSET(FALSE) THEN BEGIN
        REPEAT
          ClearTote(ltrecLPTotesTemp."No.");
        UNTIL (ltrecLPTotesTemp.NEXT() = 0);
      END;
    END;

    PROCEDURE postReceiptLine@1000000037(precWhseReceiptLine@1000000000 : Record 7317);
    VAR
      lrecLineUsage@1000000002 : Record 23044507;
      lrecLineUsageNew@1000000004 : Record 23044507;
      lrecLPHeader@1000000001 : Record 23044505;
      lrecLineUsageToUpdate@1000000003 : Record 23044507;
      lrecWhseSetup@1000000005 : Record 5769;
      lrecWhseRcptLine@1000000006 : Record 7317;
    BEGIN
      lrecWhseRcptLine.SETRANGE("No.",precWhseReceiptLine."No.");
      lrecWhseRcptLine.SETFILTER("Qty. to Receive",'>0');
      IF lrecWhseRcptLine.FINDSET(FALSE) THEN BEGIN
        REPEAT
          // Transfers the receipt license plate information to the base document.
          lrecLineUsage.SETCURRENTKEY("Posting Date","Source No.","Source Line No.","Source Document");
          lrecLineUsage.SETFILTER("Posting Date",'%1',0D);
          lrecLineUsage.SETRANGE("Source No.", lrecWhseRcptLine."No.");
          lrecLineUsage.SETRANGE("Source Line No.",lrecWhseRcptLine."Line No.");
          lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::Receipt);

          IF( lrecLineUsage.FINDSET(FALSE) ) THEN BEGIN
            //<IW author="R.Trudeau" date="05/29/17" issue="TFS2626">
            lrecWhseSetup.GET;
            lrecWhseSetup.TESTFIELD(lrecWhseSetup."Receipt Posting Policy",lrecWhseSetup."Receipt Posting Policy"::"Stop and show the first posting error");
            //</TFS>

            REPEAT
              lrecLPHeader.GET(lrecLineUsage."License Plate No.");
              IF( lrecLPHeader.Status IN [lrecLPHeader.Status::Quarantined, lrecLPHeader.Status::Unbuilt] ) THEN BEGIN
                ERROR(tcPostInvalidStatus,lrecLPHeader."No.",lrecLPHeader.Status);
              END;

              // set the posting date to mark it posted
              // changing the posting date will change the order
              // of the records, so we'll use entry no of the current
              // record and update that instead.
              lrecLineUsageToUpdate.GET( lrecLineUsage."Entry No." ); // primary key
              lrecLineUsageToUpdate.VALIDATE("Posting Date",TODAY);
              lrecLineUsageToUpdate.MODIFY(TRUE);

              //<IW author="R.Trudeau" date="09/13/17" issue="3497">
              IF( (lrecWhseRcptLine."Source Document" = lrecWhseRcptLine."Source Document"::"Purchase Order") OR
                 (lrecWhseRcptLine."Source Document" = lrecWhseRcptLine."Source Document"::"Inbound Transfer") ) THEN BEGIN

                CLEAR(lrecLineUsageNew);
                lrecLineUsageNew := lrecLineUsage;
                lrecLineUsageNew."Entry No." := 0;
                lrecLineUsageNew."Posting Date" := 0D;

                IF( lrecWhseRcptLine."Source Document" = lrecWhseRcptLine."Source Document"::"Purchase Order") THEN
                  lrecLineUsageNew."Source Document" := lrecLineUsageNew."Source Document"::"Purchase Order"
                ELSE IF( lrecWhseRcptLine."Source Document" = lrecWhseRcptLine."Source Document"::"Inbound Transfer") THEN
                  lrecLineUsageNew."Source Document" := lrecLineUsageNew."Source Document"::"Inbound Transfer";

                lrecLineUsageNew."Source No." := lrecWhseRcptLine."Source No.";
                lrecLineUsageNew."Source Line No." := lrecWhseRcptLine."Source Line No.";
                lrecLineUsageNew.INSERT(TRUE);
              END;

              lrecLPHeader."Source Document Type" := lrecLPHeader."Source Document"::" ";
              lrecLPHeader."Source Document No." := '';
              lrecLPHeader.MODIFY;

            UNTIL( lrecLineUsage.NEXT=0);
          END;
       UNTIL( lrecWhseRcptLine.NEXT=0 );
      END;
    END;

    PROCEDURE postReclassLine@1000000073(VAR precItemJnlLine@1000000000 : Record 83);
    VAR
      lrecLineUsage@1000000002 : Record 23044507;
      lrecLPHeader@1000000001 : Record 23044505;
    BEGIN
      // Updates the License Plate Bin on a reclass post.
      lrecLineUsage.SETCURRENTKEY("Posting Date","Source No.","Source Line No.","Source Document");
      lrecLineUsage.SETFILTER("Posting Date",'%1',0D);
      lrecLineUsage.SETRANGE("Source No.", precItemJnlLine."Journal Batch Name");
      //lrecLineUsage.SETRANGE("Source Line No.",precItemJnlLine."Line No.");
      lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::Reclass);

      IF( lrecLineUsage.FIND('-') ) THEN BEGIN
        REPEAT
          lrecLPHeader.GET(lrecLineUsage."License Plate No.");

          IF( (precItemJnlLine."New Location Code" <> '') AND (lrecLPHeader."Location Code" <> precItemJnlLine."New Location Code") )
          THEN BEGIN
            lrecLPHeader."Location Code" := precItemJnlLine."New Location Code";
          END;

          // note this may be blank
          IF( lrecLPHeader."Bin Code" <> precItemJnlLine."New Bin Code" ) THEN BEGIN
            lrecLPHeader."Bin Code" := precItemJnlLine."New Bin Code";
          END;

          lrecLPHeader."Source Document Type" := lrecLPHeader."Source Document"::" ";
          lrecLPHeader."Source Document No." := '';
          lrecLPHeader.MODIFY;
        UNTIL( lrecLineUsage.NEXT=0);
      END;

      lrecLineUsage.RESET;
      lrecLineUsage.SETFILTER("Posting Date",'%1',0D);
      lrecLineUsage.SETRANGE("Source No.", precItemJnlLine."Journal Batch Name");
      lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::Reclass);
      lrecLineUsage.MODIFYALL("Posting Date",TODAY,TRUE);
    END;

    PROCEDURE postWhseReclassLine@1000000096(VAR precWhseReclassLine@1000000000 : Record 7311);
    VAR
      lrecLPLineUsage@1000000002 : Record 23044507;
      lrecLicensePlateHeader@1000000003 : Record 23044505;
    BEGIN
      // Check usage when post warehouse reclass lines

      IF (NOT precWhseReclassLine.ISEMPTY) THEN BEGIN
          lrecLPLineUsage.RESET;
          lrecLPLineUsage.SETFILTER("Posting Date",'%1', 0D);
          lrecLPLineUsage.SETRANGE("Source Document", lrecLPLineUsage."Source Document"::Reclass);
          lrecLPLineUsage.SETRANGE("Source No.", precWhseReclassLine."Journal Batch Name");
          //lrecLPLineUsage.SETRANGE("Source Line No.", precWhseReclassLine."Line No.");
          IF( lrecLPLineUsage.FINDSET(TRUE) ) THEN BEGIN
            REPEAT
              lrecLicensePlateHeader.GET(lrecLPLineUsage."License Plate No.");
              lrecLicensePlateHeader."Bin Code" := precWhseReclassLine."To Bin Code";
              lrecLicensePlateHeader."Source Document Type" := lrecLicensePlateHeader."Source Document Type"::" ";
              lrecLicensePlateHeader."Source Document No." := '';
              lrecLicensePlateHeader.MODIFY(TRUE);
            UNTIL (lrecLPLineUsage.NEXT = 0);
          END;
      END;

      lrecLPLineUsage.RESET;
      lrecLPLineUsage.SETFILTER("Posting Date",'%1', 0D);
      lrecLPLineUsage.SETRANGE("Source Document", lrecLPLineUsage."Source Document"::Reclass);
      lrecLPLineUsage.SETRANGE("Source No.", precWhseReclassLine."Journal Batch Name");
      IF (lrecLPLineUsage.FIND('-')) THEN BEGIN
        lrecLPLineUsage.MODIFYALL("Posting Date", TODAY, TRUE);
      END;
    END;

    PROCEDURE registerActivityLine@1000000020(precWhseActivityLine@1000000000 : Record 5767);
    VAR
      lrecLPSetup@1000000014 : Record 23044523;
      lrecLineUsage@1000000002 : Record 23044507;
      lrecLPHeader@1000000001 : Record 23044505;
      lrecAssembleOrderLink@1000000006 : Record 904;
      lrecShipmentLine@1000000005 : Record 7321;
      lrecShipmentHeader@1000000016 : Record 7320;
      lrecAssemblyOrder@1000000004 : Record 900;
      ltrecLPHeader@1000000003 : TEMPORARY Record 23044505;
      lbPickForAssembly@1000000009 : Boolean;
      lbUpdateShipmentOnPick@1000000012 : Boolean;
    BEGIN
      // Transfers (if required) the license plate registration for a warehouse activity line.
      lrecLineUsage.SETCURRENTKEY("Posting Date","Source No.","Source Line No.","Source Document");
      lrecLineUsage.SETFILTER("Posting Date",'%1',0D);
      lrecLineUsage.SETRANGE("Source No.", precWhseActivityLine."No.");
      lrecLineUsage.SETRANGE("Source Line No.",precWhseActivityLine."Line No.");
      IF( precWhseActivityLine."Activity Type" = precWhseActivityLine."Activity Type"::"Put-away" ) THEN
        lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::"Put-away")
      ELSE IF( precWhseActivityLine."Activity Type" = precWhseActivityLine."Activity Type"::Pick ) THEN
        lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::Pick)
      ELSE IF( precWhseActivityLine."Activity Type" = precWhseActivityLine."Activity Type"::Movement ) THEN
        lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::Movement)
      ELSE IF( precWhseActivityLine."Activity Type" = precWhseActivityLine."Activity Type"::"Invt. Put-away" ) THEN
        lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::"Invt. Put-away")

      ELSE IF( precWhseActivityLine."Activity Type" = precWhseActivityLine."Activity Type"::"Invt. Movement" ) THEN
        lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::"Invt. Movement")

      ELSE
        lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::"Invt. Pick");

      lbUpdateShipmentOnPick := TRUE;
      IF NOT GUIALLOWED THEN BEGIN
        lrecLPSetup.GET;
        IF lrecLPSetup."Update Shipment on Pick" = lrecLPSetup."Update Shipment on Pick"::No THEN
          lbUpdateShipmentOnPick := FALSE;
      END;


      // Changed to findset(false) to ensure a read-only key in the read
      // loop
      IF( lrecLineUsage.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          lrecLPHeader.GET(lrecLineUsage."License Plate No.");

          ltrecLPHeader."No." := lrecLPHeader."No.";
          IF ltrecLPHeader.INSERT THEN ;

          IF( lrecLPHeader.Status IN [lrecLPHeader.Status::Quarantined, lrecLPHeader.Status::Unbuilt] ) THEN BEGIN
            ERROR(tcPostInvalidStatus,lrecLPHeader."No.",lrecLPHeader.Status);
          END;

          IF lrecLPHeader.Tote = lrecLPHeader.Tote::Yes THEN BEGIN
            lbUpdateShipmentOnPick := FALSE;

            IF (precWhseActivityLine."Whse. Document Type" = precWhseActivityLine."Whse. Document Type"::Shipment) THEN BEGIN
              lrecLPHeader."Tote Whse. Document Type" := lrecLPHeader."Tote Whse. Document Type"::Shipment;
              lrecLPHeader."Tote Whse. Document No." := precWhseActivityLine."Whse. Document No.";
            END;
          END;

          //<IW author="Howie Zhao" date="01/04/17" issue="TFS2739" >
          updateWhseActivityLineUsage(precWhseActivityLine, lrecLineUsage."Entry No.",lbUpdateShipmentOnPick);
          lbPickForAssembly := FALSE;
          lrecLPHeader."Bin Code" := '';
          IF( precWhseActivityLine."Action Type" = precWhseActivityLine."Action Type"::Place ) THEN BEGIN
            IF ((precWhseActivityLine."Source Document" = precWhseActivityLine."Source Document"::"Assembly Consumption") AND
                (precWhseActivityLine."Activity Type" = precWhseActivityLine."Activity Type"::Pick)) THEN BEGIN
              lrecAssemblyOrder.GET(lrecAssemblyOrder."Document Type"::Order, precWhseActivityLine."Source No.");
              lrecLPHeader."Bin Code" := lrecAssemblyOrder."Bin Code";


              IF (lrecAssembleOrderLink.GET(lrecAssembleOrderLink."Assembly Document Type"::Order, precWhseActivityLine."Source No.")) THEN BEGIN
                IF (lrecAssembleOrderLink.Type = lrecAssembleOrderLink.Type::Sale) THEN BEGIN
                  lrecShipmentLine.SETRANGE("Source Document", lrecShipmentLine."Source Document"::"Sales Order");
                  lrecShipmentLine.SETRANGE("Source No.", lrecAssembleOrderLink."Document No.");
                  lrecShipmentLine.SETRANGE("Item No.", lrecAssemblyOrder."Item No.");
                  IF( lrecShipmentLine.FINDSET(FALSE) AND lbUpdateShipmentOnPick ) THEN BEGIN  //<IW author="R.Trudeau" date="11/08/17" issue="TFS3616">
                    lrecLPHeader."Bin Code" := lrecShipmentLine."Bin Code";
                    lbPickForAssembly := TRUE;
                  END;
                END;
              END;
            END ELSE BEGIN
              // the read only key doesn't know
              // need to set the Bin
              // This assumes the 'place' lines will always post after the 'take'
              lrecLPHeader."Bin Code" := precWhseActivityLine."Bin Code";
            END;

          END;

          // Calculating the qty to ship for warehouse shipment, currently, only support the all components are in a license plate
          IF (lbPickForAssembly) THEN BEGIN
            IF ( lrecShipmentHeader.GET(lrecShipmentLine."No.") ) THEN
              updateShipmentFromAssembly(lrecShipmentHeader);
          END;



          lrecLPHeader.MODIFY;
        UNTIL( lrecLineUsage.NEXT=0);
      END;

      SetLPSourceDocFromLastUsage(ltrecLPHeader);
    END;

    PROCEDURE updateWhseActivityLineUsage@1000000013(precWhseActivityLine@1000000000 : Record 5767;piEntryNo@1000000001 : Integer;pbUpdateShipmentOnPick@1000000007 : Boolean);
    VAR
      lrecLineUsageToUpdate@1000000002 : Record 23044507;
      lrecLineUsageNew@1000000003 : Record 23044507;
      lrecAssembleOrderLink@1000000004 : Record 904;
      lrecShipmentLine@1000000005 : Record 7321;
      lrecAssemblyOrder@1000000008 : Record 900;
      lbAssembly@1000000006 : Boolean;
    BEGIN
      //
      // Update line usage when register warehouse activity
      //
      //

      // set the posting date to mark it posted
      // changing the posting date will change the order
      // of the records, so we'll use entry no of the current
      // record and update that instead.
      lrecLineUsageToUpdate.GET( piEntryNo ); // primary key
      lrecLineUsageToUpdate.VALIDATE("Posting Date",TODAY);
      lrecLineUsageToUpdate.MODIFY(TRUE);

      //
      // if it's for a shipment/prod. order create a correspondingly new line for the document
      //
      CLEAR(lrecLineUsageNew);
      lrecLineUsageNew := lrecLineUsageToUpdate;
      lrecLineUsageNew."Entry No." := 0;
      lrecLineUsageNew."Posting Date" := 0D;
      lbAssembly := FALSE;

      lbAssembly := precWhseActivityLine."Source Document" = precWhseActivityLine."Source Document"::"Assembly Consumption";

      IF (lbAssembly) THEN BEGIN
        // Handled Inventory Movement from assembly
        IF (precWhseActivityLine."Action Type" = precWhseActivityLine."Action Type"::Place) THEN BEGIN
          lrecLineUsageNew."Source Document" := lrecLineUsageNew."Source Document"::Assembly;
          lrecLineUsageNew."Source No." := precWhseActivityLine."Source No.";
          lrecLineUsageNew."Source Line No." := precWhseActivityLine."Source Line No.";
          lrecLineUsageNew.INSERT(TRUE);

          //<IW author="R.Trudeau" date="11/08/17" issue="TFS3616">
          IF ((precWhseActivityLine."Activity Type" = precWhseActivityLine."Activity Type"::Pick) AND pbUpdateShipmentOnPick) THEN BEGIN
            IF (lrecAssembleOrderLink.GET(lrecAssembleOrderLink."Assembly Document Type"::Order, precWhseActivityLine."Source No.")) THEN BEGIN
              IF (lrecAssembleOrderLink.Type = lrecAssembleOrderLink.Type::Sale) THEN BEGIN
                lrecAssemblyOrder.GET(lrecAssemblyOrder."Document Type"::Order, precWhseActivityLine."Source No.");
                lrecShipmentLine.SETRANGE("Source Document", lrecShipmentLine."Source Document"::"Sales Order");
                lrecShipmentLine.SETRANGE("Source No.", lrecAssembleOrderLink."Document No.");
                lrecShipmentLine.SETRANGE("Item No.", lrecAssemblyOrder."Item No.");
                IF (lrecShipmentLine.FINDSET(FALSE)) THEN BEGIN
                  lrecLineUsageNew."Source Document" := lrecLineUsageNew."Source Document"::Shipment;
                  lrecLineUsageNew."Source No." := lrecShipmentLine."No.";
                  lrecLineUsageNew."Source Line No." := lrecShipmentLine."Line No.";
                  lrecLineUsageNew.MODIFY(TRUE);
                END;
              END;
            END;

          END;
        END;
      END ELSE BEGIN
        IF (precWhseActivityLine."Whse. Document Type" = precWhseActivityLine."Whse. Document Type"::Shipment) THEN BEGIN
          //<IW author="R.Trudeau" date="11/08/17" issue="TFS3616" />
          IF ((precWhseActivityLine."Action Type" = precWhseActivityLine."Action Type"::Place) AND pbUpdateShipmentOnPick) THEN BEGIN
            lrecLineUsageNew."Source Document" := lrecLineUsageNew."Source Document"::Shipment;
            lrecLineUsageNew."Source No." := precWhseActivityLine."Whse. Document No.";
            lrecLineUsageNew."Source Line No." := precWhseActivityLine."Whse. Document Line No.";
            lrecLineUsageNew.INSERT(TRUE);
          END;
        END ELSE IF (precWhseActivityLine."Whse. Document Type" = precWhseActivityLine."Whse. Document Type"::Production) THEN BEGIN
          // ignore
        END;
      END;

      // if picking to a sales order create the appropriate line (will be posted shortly after)
      IF (precWhseActivityLine."Activity Type" = precWhseActivityLine."Activity Type"::"Invt. Pick") THEN BEGIN
        IF(precWhseActivityLine."Source Document" = precWhseActivityLine."Source Document"::"Sales Order") THEN BEGIN
          lrecLineUsageNew."Source Document" := lrecLineUsageNew."Source Document"::"Sales Order";
          lrecLineUsageNew."Source No." := precWhseActivityLine."Source No.";
          lrecLineUsageNew."Source Line No." := precWhseActivityLine."Source Line No.";
          lrecLineUsageNew.INSERT(TRUE);
        END;
      END;

      IF (precWhseActivityLine."Activity Type" = precWhseActivityLine."Activity Type"::"Invt. Movement") THEN BEGIN
        // Inventory Movement from Assembly is handled by above
        IF (precWhseActivityLine."Source Document" = precWhseActivityLine."Source Document"::"Prod. Consumption") THEN BEGIN
          lrecLineUsageNew."Source Document" := lrecLineUsageNew."Source Document"::"Prod. Order";
          lrecLineUsageNew."Source No." := precWhseActivityLine."Source No.";
          lrecLineUsageNew."Source Line No." := precWhseActivityLine."Source Line No.";
          lrecLineUsageNew.INSERT(TRUE);
        END;
      END;
    END;

    PROCEDURE consumeLicensePlate@1000000083(pcodLicensePlateNo@1000000000 : Code[20];pItemNo@1000000001 : Text;pVariantCode@1000000002 : Text;pQuantity@1000000003 : Decimal);
    VAR
      lrecLicensePlateLine@1000000004 : Record 23044506;
      ldNewQuantity@1000000005 : Decimal;
      lrecLicensePlateHeader@1000000006 : Record 23044505;
      lbFullyConsumed@1000000007 : Boolean;
    BEGIN
      // After post consumption, we need to update license plate line
      // If all line quantity is 0, then block header

      IF (pcodLicensePlateNo <> '') THEN BEGIN
        lrecLicensePlateLine.SETRANGE("License Plate No.", pcodLicensePlateNo);
        lrecLicensePlateLine.SETRANGE(Type, lrecLicensePlateLine.Type::Item); //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
        lrecLicensePlateLine.SETRANGE("No.", pItemNo);  //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
        lrecLicensePlateLine.SETRANGE("Variant Code", pVariantCode);
        IF (lrecLicensePlateLine.FIND('-')) THEN BEGIN
          ldNewQuantity := lrecLicensePlateLine.Quantity - pQuantity;

          IF (ldNewQuantity < 0) THEN
            ldNewQuantity := 0;

          lrecLicensePlateLine.VALIDATE(Quantity, ldNewQuantity);
          lrecLicensePlateLine.VALIDATE("Consumption Status", lrecLicensePlateLine."Consumption Status"::"Partially Consumed");

          IF (ldNewQuantity = 0) THEN
            lrecLicensePlateLine.VALIDATE("Consumption Status", lrecLicensePlateLine."Consumption Status"::"Fully Consumed");

          lrecLicensePlateLine.MODIFY(TRUE);
        END;

        lrecLicensePlateLine.RESET;
        lrecLicensePlateLine.SETRANGE("License Plate No.", pcodLicensePlateNo);
        IF (lrecLicensePlateLine.FIND('-')) THEN BEGIN
          lbFullyConsumed := TRUE;
          REPEAT
            IF (lrecLicensePlateLine.Quantity > 0) THEN
              lbFullyConsumed := FALSE;
          UNTIL(lrecLicensePlateLine.NEXT=0)
        END;
        IF (lbFullyConsumed) THEN BEGIN
          lrecLicensePlateHeader.GET(pcodLicensePlateNo);
          lrecLicensePlateHeader.VALIDATE(Locked, TRUE);
          lrecLicensePlateHeader.MODIFY;
        END;
      END;
    END;

    PROCEDURE addRemoveLicensePlateLine@1000000002(poptSourceDocument@1000000000 : ' ,Purchase Order,Sales Order,Inbound Transfer,Outbound Transfer,Prod. Order,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick,Receipt,Shipment,Reclass,Purchase Return Order,Assembly,Invt. Movement';pcodSourceNo@1000000016 : Code[20];piSourceLineNo@1000000001 : Integer;pcodLicensePlateNo@1000000002 : Code[20];ptxtItemNo@1000000003 : Text;ptxtVariantCode@1000000004 : Text;psLotNo@1000000005 : Text;psSerialNo@1000000006 : Text;pdQuantityToChange@1000000007 : Decimal;pcodUOM@1000000008 : Code[10];pdtExpirationDate@1000000015 : Date;pcodBinCode@1000000019 : Code[20]) : Integer;
    VAR
      lrecLicensePlateLine@1000000009 : Record 23044506;
      lrecItem@1000000010 : Record 27;
      ldCurrentQuantity@1000000011 : Decimal;
      lrecLicensePlateLineUsage@1000000012 : Record 23044507;
      ldNewQuantity@1000000013 : Decimal;
      liNextLineNumber@1000000014 : Integer;
      lrecLicensePlateheader@1000000017 : Record 23044505;
      liOriginalPermissionFlag@1000000018 : Integer;
    BEGIN
      // Use this method to add license plate line when dynamic build license plate
      IF pcodLicensePlateNo = '' THEN
        EXIT;

      psLotNo := UPPERCASE(psLotNo);
      psSerialNo := UPPERCASE(psSerialNo);


      //<IW author="Howie Zhao" date="5/30/17" issue="TFS3145" >
      lrecLicensePlateheader.GET(pcodLicensePlateNo);
      liOriginalPermissionFlag := lrecLicensePlateheader."Permission Required";
      lrecLicensePlateheader."Permission Required" := lrecLicensePlateheader."Permission Required"::No;

      IF( (pcodBinCode <> '') AND (lrecLicensePlateheader."Bin Code"='') ) THEN BEGIN
        lrecLicensePlateheader."Bin Code" := pcodBinCode;
      END;

      lrecLicensePlateheader."Source Document Type" := poptSourceDocument;
      lrecLicensePlateheader."Source Document No." := pcodSourceNo;

      lrecLicensePlateheader.MODIFY;

      lrecItem.GET(ptxtItemNo);
      lrecLicensePlateLine.RESET;
      lrecLicensePlateLine.SETRANGE("License Plate No.", pcodLicensePlateNo);
      IF(lrecLicensePlateLine.FINDLAST) THEN
        liNextLineNumber := lrecLicensePlateLine."Line No." + 10000
      ELSE
        liNextLineNumber := 10000;

      lrecLicensePlateLineUsage.RESET;
      lrecLicensePlateLineUsage.SETRANGE("License Plate No.", pcodLicensePlateNo);
      lrecLicensePlateLineUsage.SETRANGE("Source Document", poptSourceDocument);
      lrecLicensePlateLineUsage.SETRANGE("Source No.", pcodSourceNo);
      lrecLicensePlateLineUsage.SETRANGE("Source Line No.", piSourceLineNo);
      lrecLicensePlateLineUsage.SETRANGE("Serial No.",psSerialNo);
      lrecLicensePlateLineUsage.SETRANGE("Lot No.",psLotNo);

      IF (NOT lrecLicensePlateLineUsage.FINDSET(TRUE)) THEN BEGIN
        lrecLicensePlateLineUsage.RESET;
        lrecLicensePlateLineUsage.INIT;
        lrecLicensePlateLineUsage.VALIDATE("License Plate No.", pcodLicensePlateNo);
        lrecLicensePlateLineUsage."License Plate Line No." := liNextLineNumber;    // Do not validate
        lrecLicensePlateLineUsage.VALIDATE("Source Company Name", COMPANYNAME);
        lrecLicensePlateLineUsage.VALIDATE("Source Document", poptSourceDocument);
        lrecLicensePlateLineUsage.VALIDATE("Source No.", pcodSourceNo);
        lrecLicensePlateLineUsage."Source Line No." := piSourceLineNo;      // Do not validate
        lrecLicensePlateLineUsage.INSERT(TRUE);
      END;

      IF (NOT lrecLicensePlateLine.GET(pcodLicensePlateNo, lrecLicensePlateLineUsage."License Plate Line No.")) THEN BEGIN
        lrecLicensePlateLine.RESET;
        lrecLicensePlateLine.INIT;
        lrecLicensePlateLine.VALIDATE("License Plate No.", pcodLicensePlateNo);
        lrecLicensePlateLine.VALIDATE("Line No.", liNextLineNumber);
        lrecLicensePlateLine.VALIDATE(Type,lrecLicensePlateLine.Type::Item);
        lrecLicensePlateLine.VALIDATE("No.", ptxtItemNo);
        lrecLicensePlateLine.VALIDATE("Serial No.", psSerialNo);
        lrecLicensePlateLine.VALIDATE("Lot No.", psLotNo);
        lrecLicensePlateLine.VALIDATE("Variant Code", ptxtVariantCode);

        IF (pdtExpirationDate <> 0D) THEN BEGIN
          lrecLicensePlateLine.VALIDATE("Expiration Date", pdtExpirationDate);
        END;

        lrecLicensePlateLine.INSERT(TRUE);
      END;

      ldNewQuantity := lrecLicensePlateLine.Quantity + pdQuantityToChange;
      IF (ldNewQuantity <= 0) THEN BEGIN
        lrecLicensePlateLineUsage.DELETE(TRUE);
        lrecLicensePlateLine.DELETE(TRUE);
        EXIT;
      END;

      lrecLicensePlateLine.VALIDATE(Quantity, ldNewQuantity);
      IF (pcodUOM <> '') THEN BEGIN
        lrecLicensePlateLine.VALIDATE("Unit of Measure Code", pcodUOM);
      END ELSE BEGIN
        lrecLicensePlateLine.VALIDATE("Unit of Measure Code", lrecItem."Base Unit of Measure");
      END;
      lrecLicensePlateLine.MODIFY(TRUE);

      lrecLicensePlateLineUsage.VALIDATE(Quantity, ldNewQuantity);
      lrecLicensePlateLineUsage.MODIFY(TRUE);

      lrecLicensePlateheader.RESET();
      lrecLicensePlateheader.GET(pcodLicensePlateNo);
      lrecLicensePlateheader."Permission Required" := liOriginalPermissionFlag;
      lrecLicensePlateheader.MODIFY;

      EXIT(lrecLicensePlateLine."Line No.");
    END;

    PROCEDURE showLPAssignment@1000000039(poptSourceDocument@1000000003 : ' ,Purchase Order,Sales Order,Inbound Transfer,Outbound Transfer,Prod. Order,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick,Receipt,Shipment,Reclass,Purchase Return Order,Assembly,Invt. Movement';pcodSourceNo@1000000002 : Code[20]);
    VAR
      lrecLPHeader@1000000000 : Record 23044505;
      lpgLPList@1000000001 : Page 23044512;
    BEGIN
      // Show the list of assigned License Plates.
      lrecLPHeader.FILTERGROUP(2);

      IF( (poptSourceDocument = poptSourceDocument::"Outbound Transfer") OR
        (poptSourceDocument = poptSourceDocument::"Inbound Transfer") ) THEN
        lrecLPHeader.SETFILTER("Source Document Type",'%1|%2',poptSourceDocument::"Inbound Transfer",poptSourceDocument::"Outbound Transfer")
      ELSE
        lrecLPHeader.SETRANGE("Source Document Type",poptSourceDocument);
      lrecLPHeader.SETRANGE("Source Document No.",pcodSourceNo);
      lrecLPHeader.FILTERGROUP(0);

      lpgLPList.SETTABLEVIEW(lrecLPHeader);
      lpgLPList.LOOKUPMODE(TRUE);
      lpgLPList.RUNMODAL;
    END;

    PROCEDURE getPossibleAssemblyQuantity@1000000003(pcodSourceItemNo@1000000000 : Code[20];VAR precLicensePlateLines@1000000001 : Record 23044506) : Decimal;
    VAR
      lrecAssemblyBOM@1000000002 : Record 90;
      ldPossibleAssemblyQty@1000000003 : Decimal;
      ltrecAssemblyComponent@1000000004 : TEMPORARY Record 90;
      lbMissingComponent@1000000005 : Boolean;
      ltxtRecordView@1000000006 : Text[1024];
      ldComponentTotalQty@1000000007 : Decimal;
      lbFirstComponentToCalculate@1000000008 : Boolean;
      ldPossibleQty@1000000009 : Decimal;
    BEGIN
      // Calculate assembly quantity based on the license plate lines

      ldPossibleAssemblyQty := 0;
      lbMissingComponent := FALSE;
      ltxtRecordView := COPYSTR(precLicensePlateLines.GETVIEW(), 1, MAXSTRLEN(ltxtRecordView));
      lrecAssemblyBOM.SETRANGE("Parent Item No.", pcodSourceItemNo);
      IF (lrecAssemblyBOM.FINDSET(FALSE)) THEN BEGIN
        REPEAT
          ldComponentTotalQty := 0;
          precLicensePlateLines.SETVIEW(ltxtRecordView);
          precLicensePlateLines.SETRANGE(Type, precLicensePlateLines.Type::Item); //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />
          precLicensePlateLines.SETRANGE("No.", lrecAssemblyBOM."No."); //<IW author="R.Trudeau" date="01/08/19" issue="TFS4388" />

          // Quantity is a SumIndexField in the both existing keys
          precLicensePlateLines.CALCSUMS(Quantity);
          ldComponentTotalQty := precLicensePlateLines.Quantity;
          IF (ldComponentTotalQty = 0) THEN BEGIN
            lbMissingComponent := TRUE;
            ldPossibleAssemblyQty := 0;
          END ELSE BEGIN
            ltrecAssemblyComponent.RESET;
            ltrecAssemblyComponent.INIT;
            ltrecAssemblyComponent := lrecAssemblyBOM;
            ltrecAssemblyComponent."Quantity per" := ldComponentTotalQty;
            ltrecAssemblyComponent.INSERT;
          END;
        UNTIL ((lrecAssemblyBOM.NEXT = 0) OR lbMissingComponent);
      END;

      IF (NOT lbMissingComponent) THEN BEGIN
        lbFirstComponentToCalculate := TRUE;
        IF (ltrecAssemblyComponent.FIND('-')) THEN BEGIN
          REPEAT
            lrecAssemblyBOM.RESET;
            lrecAssemblyBOM.GET(ltrecAssemblyComponent."Parent Item No.", ltrecAssemblyComponent."Line No.");
            ldPossibleQty := ltrecAssemblyComponent."Quantity per" / lrecAssemblyBOM."Quantity per";
            IF (lbFirstComponentToCalculate) THEN BEGIN
              ldPossibleAssemblyQty := ldPossibleQty;
            END ELSE BEGIN
              IF (ldPossibleAssemblyQty > ldPossibleQty) THEN BEGIN
                ldPossibleAssemblyQty := ldPossibleQty;
              END;
            END;
          UNTIL (ltrecAssemblyComponent.NEXT = 0);
        END;
      END;

      EXIT(ldPossibleAssemblyQty);
    END;

    PROCEDURE modifyWHICompatibilityFields@1000000005(VAR precItemJournalLine@1000000000 : Record 83;pcodConsSerialNo@1000000001 : Code[20];pcodConsLotNo@1000000002 : Code[20];psBarcodeData@1000000003 : Text[250];pbWHIEntry@1000000009 : Boolean);
    VAR
      lrrefItemJournalLine@1000000004 : RecordRef;
      lfrefConsLotNo@1000000005 : FieldRef;
      lfrefConsSerialNo@1000000006 : FieldRef;
      lfrefBarcodeData@1000000007 : FieldRef;
      lfrefWHIEntry@1000000008 : FieldRef;
    BEGIN
      //<FUNC>
      //  Description: validates "WHI Barcode Data", "WHI Cons. Serial No.", and "WHI Cons. Lot No." if they exist
      //  Side Effect:
      //</FUNC>
      lrrefItemJournalLine.GETTABLE(precItemJournalLine);
      IF lrrefItemJournalLine.FIELDEXIST(23044502) THEN BEGIN  //WHI Barcode Data field
        lfrefBarcodeData := lrrefItemJournalLine.FIELD(23044502);
        lfrefBarcodeData.VALIDATE(psBarcodeData);
      END;

      IF lrrefItemJournalLine.FIELDEXIST(23044503) THEN BEGIN  //WHI Cons. Serial No. field
        lfrefConsSerialNo := lrrefItemJournalLine.FIELD(23044503);
        lfrefConsSerialNo.VALIDATE(pcodConsSerialNo);
      END;

      IF lrrefItemJournalLine.FIELDEXIST(23044504) THEN BEGIN  //WHI Cons. Lot No. field
        lfrefConsLotNo := lrrefItemJournalLine.FIELD(23044504);
        lfrefConsLotNo.VALIDATE(pcodConsLotNo);
      END;

      IF lrrefItemJournalLine.FIELDEXIST(23044507) THEN BEGIN  //WHI Entry Field
        lfrefWHIEntry := lrrefItemJournalLine.FIELD(23044507);
        lfrefWHIEntry.VALIDATE(pbWHIEntry);
      END;

      //if at least one of these fields exists then modify the record
      IF lrrefItemJournalLine.FIELDEXIST(23044502) OR
         lrrefItemJournalLine.FIELDEXIST(23044503) OR
         lrrefItemJournalLine.FIELDEXIST(23044504) OR
         lrrefItemJournalLine.FIELDEXIST(23044507) THEN BEGIN
           lrrefItemJournalLine.MODIFY;
      END;
    END;

    PROCEDURE setWHIQuantityRequired@1000000004(precItemJournalLine@1000000000 : Record 83;pdQuantityRequired@1000000003 : Decimal);
    VAR
      lrrefItemJournalLine@1000000002 : RecordRef;
      lfrefQuantityRequired@1000000001 : FieldRef;
    BEGIN
      //<FUNC>
      //  Description: IF the "WHI Quantity Required" field exists it will be set
      //  Side Effect:
      //</FUNC>

      lrrefItemJournalLine.GETTABLE(precItemJournalLine);
      IF lrrefItemJournalLine.FIELDEXIST(23044506) THEN BEGIN  //WHI Quantity Required
        lfrefQuantityRequired := lrrefItemJournalLine.FIELD(23044506);
        lfrefQuantityRequired.VALIDATE(pdQuantityRequired);
      END;
    END;

    PROCEDURE getWHIQuantityRequired@1000000006(precItemJournalLine@1000000000 : Record 83) : Decimal;
    VAR
      lrrefItemJournalLine@1000000002 : RecordRef;
      lfrefQuantityRequired@1000000001 : FieldRef;
      ldQuantity@1000000003 : Decimal;
    BEGIN
      //<FUNC>
      //  Description: IF the "WHI Quantity Required" field exists the value will be returned, otherwise the quantity
      //  Side Effect:
      //</FUNC>

      lrrefItemJournalLine.GETTABLE(precItemJournalLine);
      IF lrrefItemJournalLine.FIELDEXIST(23044506) THEN BEGIN  //WHI Quantity Required
        lfrefQuantityRequired := lrrefItemJournalLine.FIELD(23044506);
        ldQuantity := lfrefQuantityRequired.VALUE;
      END
      ELSE
        ldQuantity := precItemJournalLine.Quantity;

      EXIT(ldQuantity);
    END;

    PROCEDURE isAssembleToOrder@1000000007(precSalesLine@1000000000 : Record 37) : Boolean;
    VAR
      lrecAssembleToOrderLink@1000000001 : Record 904;
    BEGIN
      //<FUNC>
      //  Description: Checks if the sales line is an assemble to order item
      //  Called From: This codeunit (CU23044541)
      //  Side Effect: None
      //</FUNC>

      lrecAssembleToOrderLink.SETRANGE("Assembly Document Type", lrecAssembleToOrderLink."Assembly Document Type"::Order);
      lrecAssembleToOrderLink.SETRANGE(Type, lrecAssembleToOrderLink.Type::Sale);
      lrecAssembleToOrderLink.SETRANGE("Document No.", precSalesLine."Document No.");
      lrecAssembleToOrderLink.SETRANGE("Document Line No.", precSalesLine."Line No.");

      EXIT(lrecAssembleToOrderLink.FINDFIRST);
    END;

    PROCEDURE ValidateToteAssignment@1000000008(precLPLineUsage@1000000000 : Record 23044507);
    VAR
      lrecLPHeader@1000000001 : Record 23044505;
    BEGIN
      //<FUNC>
      //  Description: Ensures that the source assignment matches the tote assignment
      //</FUNC>

      lrecLPHeader.GET(precLPLineUsage."License Plate No.");
      IF lrecLPHeader.Tote = lrecLPHeader.Tote::No THEN
        EXIT;

      CASE(lrecLPHeader."Tote Whse. Document Type") OF
        lrecLPHeader."Tote Whse. Document Type"::Pick: ValidateTotePickAssignment(lrecLPHeader,precLPLineUsage);
      END;
    END;

    PROCEDURE ValidateTotePickAssignment@1000000014(precLPHeader@1000000000 : Record 23044505;precLPLineUsage@1000000001 : Record 23044507);
    BEGIN
      //<FUNC>
      //  Description: Ensures that the pick assignment matches the tote assignment
      //</FUNC>

      IF (precLPLineUsage."Source Document" <> precLPLineUsage."Source Document"::Pick) OR
         (precLPLineUsage."Source No." <> precLPHeader."Tote Whse. Document No.")
         THEN
           ERROR(tcIncorrectToteAssignment, precLPHeader."No.",precLPHeader."Tote Whse. Document Type",precLPHeader."Tote Whse. Document No.",precLPHeader."Tote Source Type",precLPHeader."Tote Source No.");
    END;

    PROCEDURE ClearTotes@1000000010(precWhseShipmentLine@1000000000 : Record 7321);
    VAR
      lrecLPHeader@1000000001 : Record 23044505;
      ltrecLPTotes@1000000004 : TEMPORARY Record 23044505;
    BEGIN
      //<FUNC>
      //  Description: Clears/Resets the totes
      //</FUNC>

      lrecLPHeader.SETRANGE("Tote Whse. Document Type", lrecLPHeader."Tote Whse. Document Type"::Shipment);
      lrecLPHeader.SETRANGE("Tote Whse. Document No.",precWhseShipmentLine."No.");

      IF lrecLPHeader.FINDSET(FALSE) THEN BEGIN
        REPEAT
          ltrecLPTotes := lrecLPHeader;
          IF(ltrecLPTotes.INSERT) THEN ;
        UNTIL(lrecLPHeader.NEXT=0);
      END;

      ltrecLPTotes.RESET;
      IF ltrecLPTotes.FINDSET(FALSE) THEN BEGIN
        REPEAT
          ClearTote(ltrecLPTotes."No.");
        UNTIL(ltrecLPTotes.NEXT=0);
      END;
    END;

    PROCEDURE ClearTote@1000000044(pcodLicensePlateNo@1000000000 : Code[20]);
    VAR
      lrecLPHeader@1000000003 : Record 23044505;
      lrecLPLine@1000000002 : Record 23044506;
      lrecLPLineUsage@1000000001 : Record 23044507;
    BEGIN
      //<FUNC>
      //  Description: Clears/Resets the tote
      //</FUNC>

      lrecLPHeader.GET(pcodLicensePlateNo);
      //CLEAR(lrecLPHeader);
      //lrecLPHeader."No." := ltrecLPTotes."No.";
      //lrecLPHeader."Location Code" := ltrecLPTotes."Location Code";
      //lrecLPHeader."Tote" := lrecLPHeader.Tote::Yes;

      lrecLPHeader.Description := '';
      lrecLPHeader."Bin Code" := '';
      lrecLPHeader."Tote Whse. Document Type" := lrecLPHeader."Tote Whse. Document Type"::" ";
      lrecLPHeader."Tote Whse. Document No." := '';
      lrecLPHeader."Tote Source Type" := lrecLPHeader."Tote Source Type"::" ";
      lrecLPHeader."Tote Source No." := '';
      lrecLPHeader."Current Net Weight" := 0;
      lrecLPHeader."Current Gross Weight" := 0;
      lrecLPHeader."Current Item Count" := 0;
      lrecLPHeader.MODIFY(FALSE);

      lrecLPLine.SETRANGE("License Plate No.",lrecLPHeader."No.");
      lrecLPLine.DELETEALL(FALSE);

      lrecLPLineUsage.SETRANGE("License Plate No.", lrecLPHeader."No.");
      lrecLPLineUsage.DELETEALL(FALSE);
    END;

    PROCEDURE RemoveEmbeddedLPFromParent@1000000009(precEmbeddedLPHeader@1000000000 : Record 23044505);
    VAR
      lrecParentLPLine@1000000001 : Record 23044506;
    BEGIN
      //<FUNC>
      //  Description: Removes the embedded LP from the parent LP
      //</FUNC>

      precEmbeddedLPHeader.CALCFIELDS("Parent License Plate No.");
      IF( precEmbeddedLPHeader."Parent License Plate No." <> '' ) THEN BEGIN
        lrecParentLPLine.SETRANGE("License Plate No.", precEmbeddedLPHeader."Parent License Plate No.");
        lrecParentLPLine.SETRANGE(Type,lrecParentLPLine.Type::"License Plate");
        lrecParentLPLine.SETRANGE("No.",precEmbeddedLPHeader."Parent License Plate No.");
        lrecParentLPLine.DELETEALL(TRUE);
      END;
    END;

    PROCEDURE GetEmbeddedLPLinesForAssignment@1000000018(precLicensePlateHeader@1000000000 : Record 23044505;VAR ptrecLPLineTemp@1000000001 : TEMPORARY Record 23044506;VAR ptrecLPHeaderTemp@1000000004 : TEMPORARY Record 23044505);
    VAR
      lrecLPLine@1000000002 : Record 23044506;
      lrecLPHeader@1000000003 : Record 23044505;
    BEGIN
      //<FUNC>
      //  Description: Builds up the temp record set with assignable lines.
      //               Will recurse through embedded License Plates.
      //</FUNC>



      ptrecLPHeaderTemp := precLicensePlateHeader;
      ptrecLPHeaderTemp.INSERT;

      lrecLPLine.SETRANGE("License Plate No.",precLicensePlateHeader."No.");
      lrecLPLine.SETFILTER("No.",'<>%1','');
      IF( lrecLPLine.FINDSET(FALSE) ) THEN BEGIN


        REPEAT
          IF lrecLPLine.Type = lrecLPLine.Type::Item THEN BEGIN
            ptrecLPLineTemp := lrecLPLine;
            ptrecLPLineTemp.INSERT;
          END ELSE BEGIN
            lrecLPHeader.GET(lrecLPLine."No.");
            GetEmbeddedLPLinesForAssignment(lrecLPHeader,ptrecLPLineTemp, ptrecLPHeaderTemp);
          END;
        UNTIL(lrecLPLine.NEXT=0);
      END;
    END;

    PROCEDURE CreateLPLineUsage@1000000025(ptrecLPLine@1000000000 : TEMPORARY Record 23044506;pdQtyApplied@1000000001 : Decimal;poptSourceDocumentType@1000000002 : Option;pcodSourceDocumentNo@1000000003 : Code[20];piSourceDocumentLineNo@1000000004 : Integer);
    VAR
      lrecLPLineUsage@1000000005 : Record 23044507;
      lrecParentLPLine@1000000006 : Record 23044506;
      lrecLPHeader@1000000008 : Record 23044505;
    BEGIN
      lrecLPLineUsage.VALIDATE("License Plate No.", ptrecLPLine."License Plate No.");
      lrecLPLineUsage.VALIDATE("License Plate Line No.", ptrecLPLine."Line No.");
      lrecLPLineUsage.Quantity := pdQtyApplied;
      lrecLPLineUsage.VALIDATE("Source Company Name", COMPANYNAME);
      lrecLPLineUsage.VALIDATE("Source Document", poptSourceDocumentType);
      lrecLPLineUsage.VALIDATE("Source No.", pcodSourceDocumentNo);
      lrecLPLineUsage."Source Line No." := piSourceDocumentLineNo;
      lrecLPLineUsage.INSERT(TRUE);

      // code below could be uncommented to add usage to parent LP lines
      //ptrecLPLine.CALCFIELDS("Parent License Plate No.", "Parent License Plate Line No.");
      //IF(ptrecLPLine."Parent License Plate No." <> '') THEN BEGIN
      //  lrecParentLPLine.GET(ptrecLPLine."Parent License Plate No.",ptrecLPLine."Parent License Plate Line No.");
      //  CreateLPLineUsage(lrecParentLPLine,pdQtyApplied,poptSourceDocumentType,pcodSourceDocumentNo,piSourceDocumentLineNo);
      //END;
    END;

    PROCEDURE SetLPSourceDocument@1000000019(VAR ptrecLPHeader@1000000002 : TEMPORARY Record 23044505;poptSourceDocumentType@1000000001 : Option;pcodSourceDocumentNo@1000000000 : Code[20];pcodBinCode@1000000003 : Code[20]);
    VAR
      lrecLPHeader@1000000004 : Record 23044505;
    BEGIN
      ptrecLPHeader.RESET;
      IF ptrecLPHeader.FINDSET(FALSE) THEN BEGIN
        REPEAT
          lrecLPHeader.GET(ptrecLPHeader."No.");
          lrecLPHeader."Source Document Type" := poptSourceDocumentType;
          lrecLPHeader."Source Document No." := pcodSourceDocumentNo;

          IF (pcodBinCode <> '') AND  (lrecLPHeader."Bin Code" = '') THEN BEGIN
            lrecLPHeader."Bin Code" := pcodBinCode;
          END;

          IF( lrecLPHeader.Status = lrecLPHeader.Status::Shipped ) THEN BEGIN
            lrecLPHeader.Status := lrecLPHeader.Status::" ";
            lrecLPHeader."Shipped Company Name" := '';
            lrecLPHeader."Shipped Source Document" := lrecLPHeader."Shipped Source Document"::" ";
            lrecLPHeader."Shipped Source No." := '';
            lrecLPHeader."Shipment No." := '';
          END;

          lrecLPHeader.MODIFY;
        UNTIL(ptrecLPHeader.NEXT=0);
      END;
    END;

    PROCEDURE SetLPSourceDocFromLastUsage@1000000043(VAR ptrecLPHeader@1000000002 : TEMPORARY Record 23044505);
    VAR
      lrecLPHeader@1000000004 : Record 23044505;
      lrecLPLineUsage@1000000000 : Record 23044507;
    BEGIN
      ptrecLPHeader.RESET;
      IF ptrecLPHeader.FINDSET(FALSE) THEN BEGIN
        REPEAT
          lrecLPHeader.GET(ptrecLPHeader."No.");
          lrecLPLineUsage.SETRANGE("License Plate No.",lrecLPHeader."No.");
          lrecLPLineUsage.SETRANGE("Posting Date",0D);
          IF lrecLPLineUsage.FINDLAST THEN BEGIN
            lrecLPHeader."Source Document Type" := lrecLPLineUsage."Source Document";
            lrecLPHeader."Source Document No." := lrecLPLineUsage."Source No.";
          END ELSE BEGIN
            lrecLPHeader."Source Document Type" := lrecLPHeader."Source Document Type"::" ";
            lrecLPHeader."Source Document No." := '';
          END;

          lrecLPHeader.MODIFY;
        UNTIL(ptrecLPHeader.NEXT=0);
      END;
    END;

    PROCEDURE RecurseUpdateLPHeaderStatus@1000000017(pcodLPNumber@1000000000 : Code[20];poptStatus@1000000002 : Option;pbIncludeCurrent@1000000004 : Boolean);
    VAR
      lrecLPHeader@1000000001 : Record 23044505;
      lrecLPLine@1000000003 : Record 23044506;
    BEGIN
      lrecLPHeader.GET(pcodLPNumber);

      IF pbIncludeCurrent THEN BEGIN
        lrecLPHeader.Status := poptStatus;
        lrecLPHeader.MODIFY;
      END;


      lrecLPHeader.CALCFIELDS("Has License Plates");
      IF lrecLPHeader."Has License Plates" THEN BEGIN
        lrecLPLine.SETRANGE("License Plate No.",lrecLPHeader."No.");
        lrecLPLine.SETRANGE(Type,lrecLPLine.Type::"License Plate");
        IF lrecLPLine.FINDSET(FALSE) THEN BEGIN
          REPEAT
            RecurseUpdateLPHeaderStatus(lrecLPLine."No.",poptStatus, TRUE);
          UNTIL(lrecLPLine.NEXT=0);
        END;
      END;
    END;

    PROCEDURE GetAssociatedLPs@1000000030(pcodLPNumber@1000000000 : Code[20];VAR ptrecLPHeader@1000000001 : TEMPORARY Record 23044505);
    VAR
      lrecLPHeader@1000000002 : Record 23044505;
    BEGIN
      //<FUNC>
      // Recurses up and down from the starting point finding all associated/embedded license plates
      //</FUNC>

      ptrecLPHeader.RESET;

      lrecLPHeader.GET(pcodLPNumber);
      lrecLPHeader.CALCFIELDS("Parent License Plate No.", "Has License Plates");

      IF lrecLPHeader."Parent License Plate No." <> '' THEN
        GetAssociatedParentLPs( pcodLPNumber, pcodLPNumber, ptrecLPHeader);

      IF lrecLPHeader."Has License Plates" THEN BEGIN
        GetAssociatedChildLPs(pcodLPNumber, ptrecLPHeader);
      END ELSE BEGIN
        ptrecLPHeader."No." := pcodLPNumber;
        ptrecLPHeader.INSERT;
      END
    END;

    PROCEDURE GetAssociatedParentLPs@1000000040(pcodLPNumber@1000000001 : Code[20];pcodChildLPNumber@1000000004 : Code[20];VAR ptrecLPHeader@1000000000 : TEMPORARY Record 23044505);
    VAR
      lrecLPHeader@1000000002 : Record 23044505;
      lrecLPLine@1000000003 : Record 23044506;
    BEGIN

      ptrecLPHeader."No." := pcodLPNumber;
      ptrecLPHeader.INSERT;

      lrecLPHeader.GET(pcodLPNumber);
      lrecLPHeader.CALCFIELDS("Parent License Plate No.", "Has License Plates");

      IF lrecLPHeader."Parent License Plate No." <> '' THEN BEGIN
        GetAssociatedParentLPs(lrecLPHeader."Parent License Plate No.",lrecLPHeader."No.",ptrecLPHeader);
      END;

      lrecLPLine.SETRANGE("License Plate No.",lrecLPHeader."No.");
      lrecLPLine.SETRANGE(Type,lrecLPLine.Type::"License Plate");
      lrecLPLine.SETFILTER("No.",'<>%1&<>%2',pcodChildLPNumber,'');
      IF lrecLPLine.FINDSET THEN BEGIN
        REPEAT
          GetAssociatedChildLPs(lrecLPLine."No.", ptrecLPHeader);
        UNTIL(lrecLPLine.NEXT=0);
      END;
    END;

    PROCEDURE GetAssociatedChildLPs@1000000041(pcodLPNumber@1000000001 : Code[20];VAR ptrecLPHeader@1000000000 : TEMPORARY Record 23044505);
    VAR
      lrecLPLine@1000000002 : Record 23044506;
    BEGIN
      ptrecLPHeader."No." := pcodLPNumber;
      ptrecLPHeader.INSERT;

      lrecLPLine.SETRANGE("License Plate No.",pcodLPNumber);
      lrecLPLine.SETRANGE(Type,lrecLPLine.Type::"License Plate");
      lrecLPLine.SETFILTER("No.",'<>%1','');
      IF lrecLPLine.FINDSET THEN BEGIN
        REPEAT
          GetAssociatedChildLPs(lrecLPLine."No.", ptrecLPHeader);
        UNTIL(lrecLPLine.NEXT=0);
      END;
    END;

    PROCEDURE OnInsertSalesShipmentHeader@100000002(precSalesShipHeader@100000000 : Record 110);
    VAR
      lrecWhseShipLine@100000003 : Record 7321;
      lrecSalesLine@100000002 : Record 37;
    BEGIN
      lrecWhseShipLine.SETRANGE("Source No.", precSalesShipHeader."Order No.");
      lrecWhseShipLine.SETRANGE("Source Type", DATABASE::"Sales Line");
      IF lrecWhseShipLine.FINDSET(FALSE) THEN BEGIN
        REPEAT
          PostWhseShipmentLine(lrecWhseShipLine);
        UNTIL (lrecWhseShipLine.NEXT() = 0);
      END ELSE BEGIN
        lrecSalesLine.SETRANGE("Document Type", lrecSalesLine."Document Type"::Order);
        lrecSalesLine.SETRANGE("Document No.", precSalesShipHeader."Order No.");
        IF lrecSalesLine.FINDSET(FALSE) THEN BEGIN
          REPEAT
            postSalesLine(lrecSalesLine, precSalesShipHeader."No.");
          UNTIL(lrecSalesLine.NEXT() = 0);
        END;
      END;
    END;

    PROCEDURE OnInsertTransferShipmentHeader@100000003(precTransferShipHeader@100000002 : Record 5744);
    VAR
      lrecWhseShipLine@100000001 : Record 7321;
      lrecTransferLine@100000000 : Record 5741;
    BEGIN
      lrecWhseShipLine.SETRANGE("Source No.", precTransferShipHeader."Transfer Order No.");
      lrecWhseShipLine.SETRANGE("Source Type", DATABASE::"Transfer Line");
      IF lrecWhseShipLine.FINDSET(FALSE) THEN BEGIN
        REPEAT
          PostWhseShipmentLine(lrecWhseShipLine);
        UNTIL (lrecWhseShipLine.NEXT() = 0);
      END ELSE BEGIN
        lrecTransferLine.SETRANGE("Document No.", precTransferShipHeader."Transfer Order No.");
        IF lrecTransferLine.FINDSET(FALSE) THEN BEGIN
          REPEAT
            postTransferLine(lrecTransferLine, TRUE, precTransferShipHeader."No.");
          UNTIL(lrecTransferLine.NEXT() = 0);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdatePalletEntryStatus@1000000045(LPPara@1000000000 : Code[20]);
    VAR
      PalletEntry@1000000001 : Record 50068;
    BEGIN
      //TPZ3299
      PalletEntry.SETRANGE("License Plate No.",LPPara);
      IF PalletEntry.FINDFIRST THEN
        PalletEntry.MODIFYALL(Status,PalletEntry.Status::Shipped);
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
      001 TPZ3299 PKS 10052021 Added function to update pallet entry status on shipment
    }
    END.
  }
}

