OBJECT Codeunit 23044519 IWX Common Base
{
  OBJECT-PROPERTIES
  {
    Date=11/20/20;
    Time=11:42:29 AM;
    Version List=IWX2.4.7684.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      cuResMgmt@1000000000 : Codeunit 23044514;
      cuNoSeriesMgmt@1000000001 : Codeunit 396;
      tc016@1000000003 : TextConst 'ENU=There is nothing available to move for Item No.: %1.;ESM=No hay nada disponible para moverse para el n£mero de art¡culo: %1.;FRC=Il n''y a rien … d‚placer pour le num‚ro d''article: %1.;ENC=There is nothing available to move for Item No.: %1.';
      tc017@1000000002 : TextConst 'ENU=The maximum quantity you can move in Bin %1 is %2.;ESM=La cantidad m xima que puede mover en Bin %1 es %2.;FRC=La quantit‚ maximale que vous pouvez d‚placer dans Bin %1 est %2.;ENC=The maximum quantity you can move in Bin %1 is %2.';
      tc021@1000000004 : TextConst 'ENU=The maximum quantity you can move in Location %1 is %2.;ESM=La cantidad m xima que puede mover en Ubicaci¢n %1 es %2.;FRC=La quantit‚ maximale que vous pouvez d‚placer dans l''emplacement %1 est %2.;ENC=The maximum quantity you can move in Location %1 is %2.';
      tcSSCCTooLongErr@100000000 : TextConst 'ENU=The SSCC will be too long when using [%1] as a reference for [%2].';

    PROCEDURE getTemplate@1000000006(piFormID@1000000000 : Integer) : Code[10];
    VAR
      lrecItemJnlTemplate@1000000001 : Record 82;
    BEGIN
      lrecItemJnlTemplate.SETRANGE("Page ID",piFormID);
      lrecItemJnlTemplate.SETRANGE(Recurring,FALSE);
      lrecItemJnlTemplate.FINDFIRST;
      EXIT(lrecItemJnlTemplate.Name);
    END;

    PROCEDURE getWhseTemplate@1000000068(piPageID@1000000000 : Integer) : Code[10];
    VAR
      lrecWhseJnlTemplate@1000000001 : Record 7309;
    BEGIN
      lrecWhseJnlTemplate.SETRANGE("Page ID",piPageID);
      lrecWhseJnlTemplate.FINDFIRST;
      EXIT(lrecWhseJnlTemplate.Name);
    END;

    PROCEDURE ConvertUnitOfMeasure@1000000040(precItem@1000000000 : Record 27;pdInput@1000000001 : Decimal;pcodFromUom@1000000015 : Code[20];pcodToUom@1000000016 : Code[20]) pdOutput : Decimal;
    VAR
      lrecItem@1000000006 : Record 27;
      lrecItemTracking@1000000003 : Record 6502;
      lrecItemUnitOfMeasure@1000000004 : Record 5404;
      ldConvertedValue@1000000005 : Decimal;
      lcuNAVUOM@1000000007 : Codeunit 5402;
      ldBaseQuantity@1000000014 : Decimal;
    BEGIN
      //
      // Convert from one unit of measure to another.  This is used to help
      // work with the new changes for alt/scanned/catch quantity work.
      //
      IF ( ( pcodFromUom = '' ) OR ( pcodToUom = '' ) OR ( pcodToUom = pcodFromUom ) ) THEN BEGIN
        pdOutput := pdInput;
      END ELSE BEGIN
        pdOutput  := lcuNAVUOM.GetQtyPerUnitOfMeasure(
          precItem,
          pcodFromUom) *
          pdInput / lcuNAVUOM.GetQtyPerUnitOfMeasure(precItem,pcodToUom);

      END;
    END;

    PROCEDURE ConvertUOMGeneric@1000000070(pdQuantity@1000000000 : Decimal;pdQtyPerUOMFrom@1000000001 : Decimal;pdQtyPerUOMTo@1000000002 : Decimal) : Decimal;
    BEGIN
      EXIT(pdQtyPerUOMFrom / pdQtyPerUOMTo * pdQuantity);
    END;

    PROCEDURE ConvertToBaseUomQuantity@1000000042(pcodItemNumber@1000000003 : Text;pdInput@1000000002 : Decimal;pcodFromUom@1000000001 : Code[20]) pdOutput : Decimal;
    VAR
      lrecItem@1000000000 : Record 27;
    BEGIN
      lrecItem.GET( pcodItemNumber );
      pdOutput := ConvertUnitOfMeasure( lrecItem, pdInput, pcodFromUom,  lrecItem."Base Unit of Measure" );
    END;

    PROCEDURE showSourceDocument@1000000063(psCompanyName@1000000008 : Text[30];poptSourceDocument@1000000009 : ' ,Purchase Order,Sales Order,Inbound Transfer,Outbound Transfer,Prod. Order,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick,Receipt,Shipment,Reclass,Purchase Return Order,Assembly,Invt. Movement';pcodSourceNo@1000000010 : Code[20]);
    VAR
      lrecPurchHeader@1000000001 : Record 38;
      lrecTransHeader@1000000002 : Record 5740;
      lrecSalesHeader@1000000003 : Record 36;
      lrecProdOrder@1000000004 : Record 5405;
      lrecWhseActivityHeader@1000000005 : Record 5766;
      lrecWhseReceipt@1000000006 : Record 7316;
      lrecWhseShipment@1000000007 : Record 7320;
    BEGIN
      // Opens the appropriate source document that the License Plate is currently on.
      CASE poptSourceDocument OF
        poptSourceDocument::"Purchase Order":
          BEGIN
            lrecPurchHeader.GET(lrecPurchHeader."Document Type"::Order, pcodSourceNo);
            PAGE.RUN(PAGE::"Purchase Order",lrecPurchHeader);
          END;
        poptSourceDocument::"Sales Order":
          BEGIN
            lrecSalesHeader.GET(lrecSalesHeader."Document Type"::Order,pcodSourceNo);
            PAGE.RUN(PAGE::"Sales Order",lrecSalesHeader);
          END;
        poptSourceDocument::"Inbound Transfer"..poptSourceDocument::"Outbound Transfer":
          BEGIN
            lrecTransHeader.GET(pcodSourceNo);
            PAGE.RUN(PAGE::"Transfer Order",lrecTransHeader);
          END;
        poptSourceDocument::"Prod. Order":
          BEGIN
            lrecProdOrder.GET(lrecProdOrder.Status::Released,pcodSourceNo);
            PAGE.RUN(PAGE::"Released Production Order",lrecProdOrder);
          END;
        poptSourceDocument::"Put-away":
          BEGIN
            lrecWhseActivityHeader.GET(lrecWhseActivityHeader.Type::"Put-away",pcodSourceNo);
            PAGE.RUN(PAGE::"Warehouse Put-away",lrecWhseActivityHeader);
          END;
        poptSourceDocument::Pick:
          BEGIN
            lrecWhseActivityHeader.GET(lrecWhseActivityHeader.Type::Pick,pcodSourceNo);
            PAGE.RUN(PAGE::"Warehouse Pick",lrecWhseActivityHeader);
          END;
        poptSourceDocument::Movement:
          BEGIN
            lrecWhseActivityHeader.GET(lrecWhseActivityHeader.Type::Movement,pcodSourceNo);
            PAGE.RUN(PAGE::"Warehouse Movement",lrecWhseActivityHeader);
          END;
        poptSourceDocument::"Invt. Put-away":
          BEGIN
            lrecWhseActivityHeader.GET(lrecWhseActivityHeader.Type::"Invt. Put-away",pcodSourceNo);
            PAGE.RUN(PAGE::"Inventory Put-away",lrecWhseActivityHeader);
          END;
        poptSourceDocument::"Invt. Pick":
          BEGIN
            lrecWhseActivityHeader.GET(lrecWhseActivityHeader.Type::"Invt. Pick",pcodSourceNo);
            PAGE.RUN(PAGE::"Inventory Pick",lrecWhseActivityHeader);
          END;
        poptSourceDocument::Receipt:
          BEGIN
            lrecWhseReceipt.GET(pcodSourceNo);
            PAGE.RUN(PAGE::"Warehouse Receipt",lrecWhseReceipt);
          END;
        poptSourceDocument::Shipment:
          BEGIN
            lrecWhseShipment.GET(pcodSourceNo);
            PAGE.RUN(PAGE::"Warehouse Shipment",lrecWhseShipment);
          END;
        poptSourceDocument::Reclass:
          BEGIN
          END;
        poptSourceDocument::"Invt. Movement":
          BEGIN
            lrecWhseActivityHeader.GET(lrecWhseActivityHeader.Type::"Invt. Movement", pcodSourceNo);
            PAGE.RUN(PAGE::"Inventory Movement",lrecWhseActivityHeader);
          END;
      END;
    END;

    PROCEDURE isWhseTracked@1000000013(pcodItemNumber@1000000002 : Text) : Boolean;
    VAR
      lrecItem@1000000001 : Record 27;
      lrecItemTracking@1000000000 : Record 6502;
    BEGIN
      // Returns true if the item is whse. tracked or not
      // (either serial or lot).
      lrecItem.GET(pcodItemNumber);
      IF( lrecItemTracking.GET(lrecItem."Item Tracking Code") ) THEN
        EXIT( lrecItemTracking."Lot Warehouse Tracking" OR lrecItemTracking."SN Warehouse Tracking" );

      EXIT(FALSE);
    END;

    PROCEDURE isWhseLotTracked@1000000005(psItemNumber@1000000000 : Text) : Boolean;
    VAR
      lrecItem@1000000002 : Record 27;
      lrecItemTracking@1000000001 : Record 6502;
    BEGIN
      //<FUNC>
      //  Description: Checks to see if the item is lot warehouse tracked.
      //</FUNC>

      lrecItem.GET(psItemNumber);
      IF( lrecItemTracking.GET(lrecItem."Item Tracking Code") ) THEN
        EXIT(lrecItemTracking."Lot Warehouse Tracking");

      EXIT(FALSE);
    END;

    PROCEDURE isWhseSerialTracked@1000000008(psItemNumber@1000000000 : Text) : Boolean;
    VAR
      lrecItem@1000000002 : Record 27;
      lrecItemTracking@1000000001 : Record 6502;
    BEGIN
      //<FUNC>
      //  Description: Checks to see if the item is serial warehouse tracked.
      //</FUNC>

      lrecItem.GET(psItemNumber);
      IF( lrecItemTracking.GET(lrecItem."Item Tracking Code") ) THEN
        EXIT(lrecItemTracking."SN Warehouse Tracking");

      EXIT(FALSE);
    END;

    PROCEDURE insertReclassJournalLine@1000000000(VAR precItemJnlLineOut@1000000004 : Record 83;VAR ptrecItemJnlLineData@1000000025 : TEMPORARY Record 83;psSerialNumber@1000000016 : Text;psLotNumber@1000000015 : Text;pbForceItemTracking@1000000017 : Boolean;pbAdjustQuantityRequired@1000000020 : Boolean;pcodDocNumber@1000000000 : Code[20];pdtExpirationDate@1000000005 : Date);
    VAR
      lrecItemJnlBatch@1000000008 : Record 233;
      lrecCustomItemJournalLine@1000000023 : Record 83;
      lcuNoSeriesMgmt@1000000003 : Codeunit 396;
      liNextLineNumber@1000000002 : Integer;
      lcodDocNumber@1000000001 : Code[20];
    BEGIN
      // Wrapper for creating reclass lines.
      // Abstracted this from the createReclassJournalLine functions.
      //  IF pcodReclassTemplate is blank it will assign automatically from the template
      //  for reclass journal.
      // If not explicit template, use the default

      psLotNumber := UPPERCASE(psLotNumber);
      psSerialNumber := UPPERCASE(psSerialNumber);


      IF ( ptrecItemJnlLineData."Journal Template Name" = '' )  THEN BEGIN
        ptrecItemJnlLineData."Journal Template Name" := getTemplate(PAGE::"Item Reclass. Journal");
      END;

      lrecItemJnlBatch.GET(ptrecItemJnlLineData."Journal Template Name",ptrecItemJnlLineData."Journal Batch Name");


      // get the next line number/document no. to use
      liNextLineNumber := 10000;
      lcodDocNumber := '';
      precItemJnlLineOut.LOCKTABLE;
      precItemJnlLineOut.RESET;
      precItemJnlLineOut.SETRANGE("Journal Template Name", ptrecItemJnlLineData."Journal Template Name");
      precItemJnlLineOut.SETRANGE("Journal Batch Name", ptrecItemJnlLineData."Journal Batch Name");
      IF( precItemJnlLineOut.FINDLAST ) THEN BEGIN
        liNextLineNumber := precItemJnlLineOut."Line No." + 10000;
        lcodDocNumber := precItemJnlLineOut."Document No.";
      END ELSE BEGIN
        IF( lrecItemJnlBatch."No. Series" <> '' ) THEN BEGIN
          lcodDocNumber := lcuNoSeriesMgmt.GetNextNo(lrecItemJnlBatch."No. Series", TODAY,FALSE);
        END ELSE BEGIN
          lcodDocNumber := pcodDocNumber;
        END;
      END;

      CLEAR(precItemJnlLineOut);
      precItemJnlLineOut.RESET;
      precItemJnlLineOut."Journal Template Name" := ptrecItemJnlLineData."Journal Template Name";
      precItemJnlLineOut."Journal Batch Name" := ptrecItemJnlLineData."Journal Batch Name";
      precItemJnlLineOut.VALIDATE("Line No.",liNextLineNumber);
      precItemJnlLineOut."Posting No. Series" := lrecItemJnlBatch."Posting No. Series";
      precItemJnlLineOut.VALIDATE("Posting Date",TODAY);
      precItemJnlLineOut."Entry Type" := precItemJnlLineOut."Entry Type"::Transfer;
      precItemJnlLineOut."Document No." := lcodDocNumber;
      precItemJnlLineOut.VALIDATE("Item No.", ptrecItemJnlLineData."Item No.");
      IF( ptrecItemJnlLineData."Variant Code" <> '' ) THEN
        precItemJnlLineOut.VALIDATE("Variant Code",ptrecItemJnlLineData."Variant Code");
      precItemJnlLineOut.VALIDATE("Location Code", ptrecItemJnlLineData."Location Code");
      precItemJnlLineOut.VALIDATE("New Location Code", ptrecItemJnlLineData."New Location Code");
      precItemJnlLineOut.VALIDATE("Bin Code",ptrecItemJnlLineData."Bin Code");
      precItemJnlLineOut.VALIDATE("New Bin Code", '');
      IF ( '' <> ptrecItemJnlLineData."New Bin Code" ) AND ( '' <> ptrecItemJnlLineData."New Location Code" ) THEN BEGIN
        // only if the new bin code is specified, AND there is a location
        // associated with it.  If there is no new location then assigning
        // a bin will fail.
        precItemJnlLineOut.VALIDATE("New Bin Code", ptrecItemJnlLineData."New Bin Code" );
      END;

      // If pick mode, then update the quantity required, not the quantity
      // This is used when the item reclass journal is pre-filled and
      // treated as a pick list.

      IF NOT pbAdjustQuantityRequired THEN BEGIN
        precItemJnlLineOut.VALIDATE(Quantity, ptrecItemJnlLineData.Quantity);
      END;

      IF (ptrecItemJnlLineData."Unit of Measure Code" <> '') THEN BEGIN
        precItemJnlLineOut.VALIDATE("Unit of Measure Code", ptrecItemJnlLineData."Unit of Measure Code");
      END;


      precItemJnlLineOut."LPM License Plate No." := ptrecItemJnlLineData."LPM License Plate No.";
      IF (ptrecItemJnlLineData.Description <> '') THEN
        precItemJnlLineOut.Description := ptrecItemJnlLineData.Description;


      precItemJnlLineOut.VALIDATE("Source Code", ptrecItemJnlLineData."Source Code");
      precItemJnlLineOut.INSERT;

      // add the item tracking if required
      IF( (psLotNumber <> '') OR (psSerialNumber <> '') OR pbForceItemTracking ) THEN BEGIN
        cuResMgmt.AddRemoveReclassTracking(precItemJnlLineOut, psSerialNumber, psLotNumber,ptrecItemJnlLineData.Quantity, precItemJnlLineOut."Unit of Measure Code", pdtExpirationDate);
      END;
    END;

    PROCEDURE insertWhseReclassJournalLine@1000000019(VAR precWhseJnlLineOut@1000000004 : Record 7311;VAR ptrecWhseJnlLineData@1000000024 : TEMPORARY Record 7311;psSerialNumber@1000000016 : Text;psLotNumber@1000000015 : Text;pbForceItemTracking@1000000017 : Boolean;pcodScannedDocument@1000000018 : Code[20];pcodDocNumber@1000000006 : Code[20];pdtExpirationDate@1000000007 : Date);
    VAR
      lrecWhseJnlBatch@1000000005 : Record 7310;
      lcodDocNumber@1000000003 : Code[20];
      lcodReclassTemplate@1000000002 : Code[10];
      lbWhseTracked@1000000001 : Boolean;
      liNextLineNumber@1000000000 : Integer;
    BEGIN
      //////////////////////////////////////////////
      //<Summary>
      // Wrapper for creating reclass lines.
      // Based on insertReclassJournalLine
      //</Summary>
      //<Author>R.Trudeau</Author>
      //<Date>20/02/2014</Date>
      //<Issue>TFS1129</Issue>
      //<Version>IW13.12</Version>
      //////////////////////////////////////////////


      psLotNumber := UPPERCASE(psLotNumber);
      psSerialNumber := UPPERCASE(psSerialNumber);


      lcodReclassTemplate := getWhseTemplate(PAGE::"Whse. Reclassification Journal");

      lbWhseTracked := isWhseTracked(ptrecWhseJnlLineData."Item No.");

      lrecWhseJnlBatch.GET(lcodReclassTemplate,ptrecWhseJnlLineData."Journal Batch Name",ptrecWhseJnlLineData."Location Code");

      // get the next line number/document no. to use
      liNextLineNumber := 10000;
      lcodDocNumber := '';
      precWhseJnlLineOut.LOCKTABLE;
      precWhseJnlLineOut.SETRANGE("Journal Template Name", lcodReclassTemplate);
      precWhseJnlLineOut.SETRANGE("Journal Batch Name", ptrecWhseJnlLineData."Journal Batch Name");
      precWhseJnlLineOut.SETRANGE("Location Code",ptrecWhseJnlLineData."Location Code");
      IF( precWhseJnlLineOut.FINDLAST ) THEN BEGIN
        liNextLineNumber := precWhseJnlLineOut."Line No." + 10000;
        lcodDocNumber := precWhseJnlLineOut."Whse. Document No.";
      END ELSE BEGIN
        IF( lrecWhseJnlBatch."No. Series" <> '' ) THEN BEGIN
          lcodDocNumber := cuNoSeriesMgmt.GetNextNo(lrecWhseJnlBatch."No. Series", TODAY,FALSE);
        END ELSE BEGIN
          lcodDocNumber := pcodDocNumber;
        END;
      END;


      // create the line
      CLEAR(precWhseJnlLineOut);
      precWhseJnlLineOut.RESET;
      precWhseJnlLineOut."Journal Template Name" := lcodReclassTemplate;
      precWhseJnlLineOut."Journal Batch Name" := ptrecWhseJnlLineData."Journal Batch Name";
      precWhseJnlLineOut."Location Code" := ptrecWhseJnlLineData."Location Code";
      precWhseJnlLineOut.VALIDATE("Line No.",liNextLineNumber);
      precWhseJnlLineOut."Registering No. Series" := lrecWhseJnlBatch."Registering No. Series";
      precWhseJnlLineOut.VALIDATE("Registering Date",TODAY);
      precWhseJnlLineOut."Entry Type" := precWhseJnlLineOut."Entry Type"::Movement;
      precWhseJnlLineOut."Whse. Document No." := lcodDocNumber;
      precWhseJnlLineOut.VALIDATE("Item No.", ptrecWhseJnlLineData."Item No.");
      IF( ptrecWhseJnlLineData."Variant Code" <> '' ) THEN
        precWhseJnlLineOut.VALIDATE("Variant Code",ptrecWhseJnlLineData."Variant Code");

      precWhseJnlLineOut.VALIDATE("From Bin Code",ptrecWhseJnlLineData."From Bin Code");

      IF ( '' <> ptrecWhseJnlLineData."To Bin Code" )   THEN BEGIN
        precWhseJnlLineOut.VALIDATE("To Bin Code", ptrecWhseJnlLineData."To Bin Code" );
      END
      ELSE BEGIN
        precWhseJnlLineOut.VALIDATE("To Bin Code", '');
      END;

      IF ( ptrecWhseJnlLineData."Unit of Measure Code" <> '' ) THEN BEGIN
        precWhseJnlLineOut.VALIDATE( "Unit of Measure Code", ptrecWhseJnlLineData."Unit of Measure Code" );
      END;

      precWhseJnlLineOut.VALIDATE(Quantity, ptrecWhseJnlLineData.Quantity);

      IF (ptrecWhseJnlLineData."User ID" <> '') THEN BEGIN
        precWhseJnlLineOut."User ID" := ptrecWhseJnlLineData."User ID";
      END ELSE BEGIN
        precWhseJnlLineOut."User ID" := USERID;
      END;


      precWhseJnlLineOut.INSERT;

      // add the item tracking if required
      IF( lbWhseTracked ) THEN BEGIN
        IF( (psLotNumber <> '') OR (psSerialNumber <> '') ) THEN BEGIN
          cuResMgmt.AddRemoveWhseReclassTracking(precWhseJnlLineOut,psSerialNumber,psLotNumber,ptrecWhseJnlLineData.Quantity, pdtExpirationDate);
        END;
      END;
    END;

    PROCEDURE processAutoShip@1000000057(precWhseActivityLine@1000000002 : Record 5767;psSerialNumber@1000000001 : Text;psLotNumber@1000000011 : Text;pbRemove@1000000006 : Boolean;pdChangeQty@1000000007 : Decimal;pdtExpirationDate@100000000 : Date);
    VAR
      lrecItem@1000000003 : Record 27;
      lrecShipLine@1000000004 : Record 7321;
      lrecTrackingCode@1000000009 : Record 6502;
      ltcAutoShipNoSupported@1000000010 : TextConst 'ENU=Transfer Line Auto-Ship not supported.;ESM=Transferir L¡nea de Auto-Env¡o no es compatible.;FRC=Transfert Ligne Auto-Ship pas pris en charge.;ENC=Transfer Line Auto-Ship not supported.';
      lrecAssemblyLine@1000000000 : Record 901;
    BEGIN
      // Function updates a warehouse shipment based on the supplied params.
      // This function is required when doing warehouse picks and the auto-ship option
      // is enabled.  Auto-ship allows picks to generate tracking information, etc. that
      // would otherwise need to be re-scanned on shipping.

      psLotNumber := UPPERCASE(psLotNumber);
      psSerialNumber := UPPERCASE(psSerialNumber);

      IF (precWhseActivityLine."Activity Type" <> precWhseActivityLine."Activity Type"::Pick) THEN
        EXIT;

      IF ((psSerialNumber = '') AND (psLotNumber = '')) THEN
        EXIT;

      lrecItem.GET(precWhseActivityLine."Item No.");
      IF (lrecItem."Item Tracking Code" <> '') THEN BEGIN
        IF (lrecTrackingCode.GET(lrecItem."Item Tracking Code")) THEN BEGIN
          IF ((lrecTrackingCode."Lot Warehouse Tracking") OR (lrecTrackingCode."SN Warehouse Tracking")) THEN BEGIN
            EXIT;   // if it's warehouse tracked, then do nothing and exit.
          END;
        END;
      END;

      IF (precWhseActivityLine."Whse. Document Type" = precWhseActivityLine."Whse. Document Type"::Shipment) THEN BEGIN
        IF (precWhseActivityLine."Source Document" = precWhseActivityLine."Source Document"::"Assembly Consumption") THEN BEGIN
          IF (lrecAssemblyLine.GET(lrecAssemblyLine."Document Type"::Order, precWhseActivityLine."Source No.", precWhseActivityLine."Source Line No.")) THEN BEGIN
            cuResMgmt.AddRemoveAssemblyTracking(lrecAssemblyLine, psSerialNumber, psLotNumber, pdChangeQty, precWhseActivityLine."Unit of Measure Code");
          END;
        END ELSE BEGIN
          IF (lrecShipLine.GET(precWhseActivityLine."Whse. Document No.",precWhseActivityLine."Whse. Document Line No.")) THEN BEGIN
            // if the item requires tracking info then add the information to the shipment
            cuResMgmt.AddRemoveWhseShipTracking(lrecShipLine, psSerialNumber, psLotNumber, pdChangeQty, precWhseActivityLine."Unit of Measure Code", pdtExpirationDate);
          END;
        END;

      // Pick was created from the assembly order
      END ELSE IF (precWhseActivityLine."Whse. Document Type" = precWhseActivityLine."Whse. Document Type"::Assembly) THEN BEGIN
        IF (lrecAssemblyLine.GET(lrecAssemblyLine."Document Type"::Order, precWhseActivityLine."Whse. Document No.", precWhseActivityLine."Whse. Document Line No.")) THEN BEGIN
          cuResMgmt.AddRemoveAssemblyTracking(lrecAssemblyLine, psSerialNumber, psLotNumber, pdChangeQty, precWhseActivityLine."Unit of Measure Code");
        END;
      END;
    END;

    PROCEDURE processAutoTakePlace@1000000062(precActivityLine@1000000001 : Record 5767;pcodBinCode@1000000006 : Code[20];pdQtyToHandle@1000000002 : Decimal;pbRemove@1000000000 : Boolean;pbAutoSplit@1000000007 : Boolean;VAR ptrecCommentLine@1000000004 : TEMPORARY Record 97);
    VAR
      lrecWhseActivityLine@1000000003 : Record 5767;
      ltcUnappliedQty@1000000005 : TextConst 'ENU=Unable to auto handle the %1 requests for: Item: %2, Bin: %3, Qty: %4 ( %5 were remaining )';
      lrecItem@1000000010 : Record 27;
      lrecTrackingCode@1000000011 : Record 6502;
      ldQtyToHandleBase@1000000013 : Decimal;
      lsActionType@1000000008 : Text[30];
      lbModifiedLine@1000000009 : Boolean;
      ldQtyAvailToApplyBase@1000000014 : Decimal;
      ldQtyToApplyBase@1000000012 : Decimal;
    BEGIN
      // Attempts to go through the warehouse activity lines and set the same
      // quantity to handle on the corresponding line(s) if the option to
      // auto-take or auto-place is set.  Can split the quantity among multiple
      // lines potentially.
      // E.g. User is picking and takes 5 of something from bin x.
      // Auto-place will try and find the appropriate 'place' line for that
      // 'take' line and set the quantity to handle to 5.

      ldQtyToHandleBase := pdQtyToHandle * precActivityLine."Qty. per Unit of Measure";

      //
      // set the filters to find the potentially affected lines
      //
      lrecWhseActivityLine.SETRANGE("Activity Type", precActivityLine."Activity Type");
      lrecWhseActivityLine.SETRANGE("No.", precActivityLine."No.");
      lrecWhseActivityLine.SETRANGE("Item No.", precActivityLine."Item No.");
      lrecWhseActivityLine.SETRANGE("Whse. Document Type", precActivityLine."Whse. Document Type");
      lrecWhseActivityLine.SETRANGE("Whse. Document No.", precActivityLine."Whse. Document No.");
      lrecWhseActivityLine.SETRANGE("Whse. Document Line No.", precActivityLine."Whse. Document Line No.");
      lrecWhseActivityLine.SETFILTER("Qty. Outstanding",'>%1',0);

      lrecWhseActivityLine.SETRANGE("Breakbulk No.", 0);

      IF( pcodBinCode <> '' ) THEN BEGIN
        lrecWhseActivityLine.SETRANGE("Bin Code", pcodBinCode);
      END;

      IF( pbRemove ) THEN BEGIN
        lrecWhseActivityLine.SETFILTER("Qty. to Handle", '>%1', 0);
      END;

      lrecItem.GET(precActivityLine."Item No.");

      IF (lrecItem."Item Tracking Code" <> '') THEN BEGIN
        lrecTrackingCode.GET(lrecItem."Item Tracking Code");
      END;

      IF( precActivityLine."Action Type" = precActivityLine."Action Type"::Take ) THEN BEGIN
        lrecWhseActivityLine.SETRANGE("Action Type", lrecWhseActivityLine."Action Type"::Place);
        lsActionType := STRSUBSTNO('%1',lrecWhseActivityLine."Action Type"::Place);

        IF( lrecTrackingCode."Lot Warehouse Tracking" )  AND( precActivityLine."Lot No." <> '' ) THEN BEGIN
          lrecWhseActivityLine.SETFILTER("Lot No.",'%1', precActivityLine."Lot No." );
        END;
        IF( lrecTrackingCode."SN Warehouse Tracking" )  AND( precActivityLine."Serial No." <> '' ) THEN BEGIN
          lrecWhseActivityLine.SETFILTER("Serial No.",'%1', precActivityLine."Serial No." );
        END;
      END
      ELSE BEGIN
        lrecWhseActivityLine.SETRANGE("Action Type", lrecWhseActivityLine."Action Type"::Take);
        lsActionType := STRSUBSTNO('%1',lrecWhseActivityLine."Action Type"::Take);

        IF( lrecTrackingCode."Lot Warehouse Tracking" )  AND( precActivityLine."Lot No." <> '' ) THEN BEGIN
          lrecWhseActivityLine.SETFILTER("Lot No.",'%1', precActivityLine."Lot No." );
        END;
        IF( lrecTrackingCode."SN Warehouse Tracking" )  AND( precActivityLine."Serial No." <> '' ) THEN BEGIN
          lrecWhseActivityLine.SETFILTER("Serial No.",'%1', precActivityLine."Serial No." );
        END;
      END;

      // check for exact matches
      IF( NOT lrecWhseActivityLine.FIND('-') ) THEN BEGIN
        lrecWhseActivityLine.SETRANGE("Lot No.");
        lrecWhseActivityLine.SETRANGE("Serial No.");
      END;

      // Try quantities match first
      lrecWhseActivityLine.SETRANGE(Quantity, precActivityLine.Quantity);

      applyAutoTakePlace(
        lrecWhseActivityLine,
        pbRemove,
        lrecTrackingCode."Lot Warehouse Tracking",
        precActivityLine."Lot No.",
        lrecTrackingCode."SN Warehouse Tracking",
        precActivityLine."Serial No.",
        pbAutoSplit,
        ldQtyToHandleBase,
        ptrecCommentLine,
        precActivityLine."Expiration Date"
      );

      // try without matching the lot/serial number but exact quantity
      IF (ldQtyToHandleBase > 0) THEN BEGIN
        lrecWhseActivityLine.SETRANGE("Lot No.");
        lrecWhseActivityLine.SETRANGE("Serial No.");

        applyAutoTakePlace(
                    lrecWhseActivityLine,
                    pbRemove,
                    lrecTrackingCode."Lot Warehouse Tracking",
                    precActivityLine."Lot No.",
                    lrecTrackingCode."SN Warehouse Tracking",
                    precActivityLine."Serial No.",
                    pbAutoSplit,
                    ldQtyToHandleBase,
                    ptrecCommentLine,
                    precActivityLine."Expiration Date"
                  );
      END;

      // try without quantity
      IF (ldQtyToHandleBase > 0) THEN BEGIN
        lrecWhseActivityLine.SETRANGE(Quantity);

        applyAutoTakePlace(
                    lrecWhseActivityLine,
                    pbRemove,
                    lrecTrackingCode."Lot Warehouse Tracking",
                    precActivityLine."Lot No.",
                    lrecTrackingCode."SN Warehouse Tracking",
                    precActivityLine."Serial No.",
                    pbAutoSplit,
                    ldQtyToHandleBase,
                    ptrecCommentLine,
                    precActivityLine."Expiration Date"
                  );
      END;




      IF( ldQtyToHandleBase <> 0 ) THEN BEGIN
        ERROR(ltcUnappliedQty,lsActionType,precActivityLine."Item No.",pcodBinCode, pdQtyToHandle, ldQtyToHandleBase );
      END;
    END;

    PROCEDURE applyAutoTakePlace@1000000016(VAR precWhseActivityLine@1000000000 : Record 5767;pbRemove@1000000002 : Boolean;pbLotWhseTracked@1000000006 : Boolean;psLotNumber@1000000008 : Text;pbSerialWhseTracked@1000000007 : Boolean;psSerialNumber@1000000009 : Text;pbAutoSplit@1000000011 : Boolean;VAR pdQtyToHandleBase@1000000003 : Decimal;VAR ptrecCommentLine@1000000010 : TEMPORARY Record 97;pdExpirationDate@1000000013 : Date);
    VAR
      lrecActivityLine@1000000012 : Record 5767;
      lbModifiedLine@1000000001 : Boolean;
      ldQtyToApplyBase@1000000004 : Decimal;
      ldQtyAvailToApplyBase@1000000005 : Decimal;
      lbIsPutAwayTakeLine@100000000 : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Applies the required quantity to handle to the filtered activity lines.
      //</FUNC>

      psLotNumber := UPPERCASE(psLotNumber);
      psSerialNumber := UPPERCASE(psSerialNumber);


      IF( precWhseActivityLine.FIND('-') ) THEN BEGIN
        REPEAT
          lbModifiedLine := FALSE;
          IF( pbRemove ) THEN BEGIN
            IF( precWhseActivityLine."Qty. to Handle" > 0 ) THEN BEGIN
              IF( precWhseActivityLine."Qty. to Handle (Base)" > pdQtyToHandleBase ) THEN
                ldQtyToApplyBase := pdQtyToHandleBase
              ELSE
                ldQtyToApplyBase := precWhseActivityLine."Qty. to Handle (Base)";

              precWhseActivityLine.VALIDATE("Qty. to Handle",precWhseActivityLine."Qty. to Handle" - (ldQtyToApplyBase/precWhseActivityLine."Qty. per Unit of Measure"));
              lbModifiedLine := TRUE;
            END;
          END ELSE BEGIN // adding
            IF( precWhseActivityLine."Qty. to Handle" < precWhseActivityLine."Qty. Outstanding" ) THEN BEGIN
              ldQtyAvailToApplyBase := precWhseActivityLine."Qty. Outstanding (Base)" - precWhseActivityLine."Qty. to Handle (Base)";

              IF( ldQtyAvailToApplyBase > pdQtyToHandleBase ) THEN
                ldQtyToApplyBase := pdQtyToHandleBase
              ELSE
                ldQtyToApplyBase := ldQtyAvailToApplyBase;

              precWhseActivityLine.VALIDATE("Qty. to Handle",precWhseActivityLine."Qty. to Handle" + (ldQtyToApplyBase/precWhseActivityLine."Qty. per Unit of Measure"));

              IF ((pbLotWhseTracked) AND (psLotNumber <> '')) THEN BEGIN

                precWhseActivityLine.VALIDATE("Lot No.", psLotNumber);
                precWhseActivityLine.VALIDATE("Expiration Date", pdExpirationDate);
              END;
              IF ((pbSerialWhseTracked ) AND (psSerialNumber <> '')) THEN BEGIN
                precWhseActivityLine.VALIDATE("Serial No.", psSerialNumber);
                precWhseActivityLine.VALIDATE("Expiration Date", pdExpirationDate);
              END;

              lbModifiedLine := TRUE;
            END;
          END;

          IF (lbModifiedLine) THEN BEGIN
            pdQtyToHandleBase := pdQtyToHandleBase - ldQtyToApplyBase;
            precWhseActivityLine.MODIFY(TRUE);

            // if this line hasn't already been modified indicate it as such now
            ptrecCommentLine.SETRANGE("Line No.", precWhseActivityLine."Line No.");
            IF( NOT ptrecCommentLine.FIND('-') ) THEN BEGIN
              ptrecCommentLine."Table Name" := ptrecCommentLine."Table Name"::Item;
              ptrecCommentLine."No." := precWhseActivityLine."Item No.";
              ptrecCommentLine."Line No." := precWhseActivityLine."Line No.";
              ptrecCommentLine.INSERT;
            END;

            lbIsPutAwayTakeLine := FALSE;
            IF ((precWhseActivityLine."Activity Type" = precWhseActivityLine."Activity Type"::"Put-away") AND
                (precWhseActivityLine."Action Type" = precWhseActivityLine."Action Type"::Take)) THEN
              lbIsPutAwayTakeLine := TRUE;

            IF( pbAutoSplit AND (pbSerialWhseTracked OR pbLotWhseTracked) AND (NOT lbIsPutAwayTakeLine)) THEN BEGIN
              IF((precWhseActivityLine.Quantity - (precWhseActivityLine."Qty. Handled" + precWhseActivityLine."Qty. to Handle")) >0) THEN BEGIN
                IF precWhseActivityLine."Qty. to Handle" <> 0 THEN BEGIN
                  lrecActivityLine := precWhseActivityLine;
                  lrecActivityLine.SplitLine(lrecActivityLine);
                  lrecActivityLine.NEXT;
                  lrecActivityLine.VALIDATE("Qty. to Handle", 0);
                  lrecActivityLine.VALIDATE("Lot No.",'');
                  lrecActivityLine.VALIDATE("Serial No.",'');
                  lrecActivityLine.VALIDATE("Expiration Date",0D);
                  lrecActivityLine.MODIFY;

                  ptrecCommentLine."Table Name" := ptrecCommentLine."Table Name"::Item;
                  ptrecCommentLine."No." := lrecActivityLine."Item No.";
                  ptrecCommentLine."Line No." := lrecActivityLine."Line No.";
                  ptrecCommentLine.INSERT;
                END;
              END;
            END;
          END;
        UNTIL((precWhseActivityLine.NEXT = 0) OR (pdQtyToHandleBase <= 0));
      END;
    END;

    PROCEDURE getSNQtyAvailable@1000000007(pcodItemNumber@1000000000 : Text;psSerialNumber@1000000001 : Text;pcodLocationCode@1000000002 : Code[10]) : Decimal;
    VAR
      ldQuantityAvailable@1000000005 : Decimal;
      lrecItemLedgerEntry@1000000004 : Record 32;
      lrecReservationEntry@1000000003 : Record 337;
    BEGIN
      // Determines the serial number availablility.
      psSerialNumber := UPPERCASE(psSerialNumber);
      ldQuantityAvailable := 0;

      lrecItemLedgerEntry.SETRANGE("Item No.", pcodItemNumber);
      lrecItemLedgerEntry.SETRANGE("Serial No.", psSerialNumber);
      lrecItemLedgerEntry.SETRANGE("Location Code", pcodLocationCode);
      lrecItemLedgerEntry.SETFILTER("Remaining Quantity",'>%1',0);

      IF( lrecItemLedgerEntry.FIND('-') ) THEN BEGIN
        REPEAT
          // do this just 'in-case' same serial numbers ever allowed twice
          ldQuantityAvailable := ldQuantityAvailable + 1;
        UNTIL(lrecItemLedgerEntry.NEXT=0);
      END;

      // next check reservation entries to see what might be used
      lrecReservationEntry.SETRANGE("Item No.", pcodItemNumber);
      lrecReservationEntry.SETRANGE("Serial No.", psSerialNumber);
      lrecReservationEntry.SETRANGE("Location Code", pcodLocationCode);

      IF( lrecReservationEntry.FIND('-') ) THEN BEGIN
        REPEAT
          ldQuantityAvailable := ldQuantityAvailable + lrecReservationEntry.Quantity;
        UNTIL(lrecReservationEntry.NEXT=0)
      END;

      EXIT(ldQuantityAvailable);
    END;

    PROCEDURE isInterCompanyDocument@1000000004(pcodICPartnerCode@1000000001 : Code[20]) : Boolean;
    VAR
      lrecICPartner@1000000000 : Record 413;
      pbInterCompany@1000000002 : Boolean;
    BEGIN
      // Returns true if the document is intercompany related.
      pbInterCompany := FALSE;

      IF( lrecICPartner.GET(pcodICPartnerCode) ) THEN BEGIN
        IF( lrecICPartner."Inbox Type" = lrecICPartner."Inbox Type"::Database ) THEN BEGIN
          pbInterCompany := TRUE;
        END;
      END;

      EXIT(pbInterCompany);
    END;

    PROCEDURE validateReclassMove@1000000017(pcodLocation@1000000000 : Code[10];pcodItemNumber@1000000001 : Text;pcodVariantCode@1000000002 : Text;psLotNumber@1000000003 : Text;psSerialNumber@1000000004 : Text;pcodBinCode@1000000005 : Code[20];pdQtyToMove@1000000006 : Decimal) : Decimal;
    VAR
      lrecBinContent@1000000007 : Record 7302;
      ldMaxQuantity@1000000008 : Decimal;
      lrecLocation@1000000009 : Record 14;
      lrecItem@1000000010 : Record 27;
    BEGIN
      psLotNumber := UPPERCASE(psLotNumber);
      psSerialNumber := UPPERCASE(psSerialNumber);


      lrecBinContent.SETRANGE("Location Code",pcodLocation);
      lrecBinContent.SETRANGE("Item No.",pcodItemNumber);
      lrecBinContent.SETRANGE("Variant Code",pcodVariantCode);

      IF( isWhseTracked(pcodItemNumber) ) THEN BEGIN
        IF( psLotNumber <> '' ) THEN
          lrecBinContent.SETRANGE("Lot No. Filter",psLotNumber);
        IF( psSerialNumber <> '' ) THEN
          lrecBinContent.SETRANGE("Serial No. Filter",psSerialNumber);
      END;

      lrecBinContent.SETRANGE("Bin Code", pcodBinCode);
      ldMaxQuantity := 0;

      lrecLocation.GET( pcodLocation );
      IF ( '' <> pcodBinCode ) THEN BEGIN
        lrecBinContent.SETAUTOCALCFIELDS("Quantity (Base)");
        IF( lrecBinContent.FINDSET(FALSE) ) THEN BEGIN
          REPEAT
            ldMaxQuantity := ldMaxQuantity + lrecBinContent."Quantity (Base)";
          UNTIL(lrecBinContent.NEXT=0);
          // this situation is for "Over move"
          IF ( FALSE ) THEN
            IF( pdQtyToMove > ldMaxQuantity ) THEN
              ERROR(tc017,pcodBinCode,ldMaxQuantity);
        END ELSE BEGIN
          // if there is no inventory at all.
          ERROR(tc016, pcodItemNumber);
        END;
      END ELSE BEGIN
        // new situation, to handle item reclassifications without bins.
        // in this was we'll use the inventory
        lrecItem.GET(pcodItemNumber);
        lrecItem.SETRANGE("No.", pcodItemNumber );
        lrecItem.SETRANGE("Variant Filter", pcodVariantCode );
        lrecItem.SETRANGE("Location Filter", pcodLocation );
        lrecItem.CALCFIELDS(Inventory);
        ldMaxQuantity := lrecItem.Inventory;
        IF( pdQtyToMove > ldMaxQuantity ) THEN
          ERROR(tc021, pcodLocation, ldMaxQuantity);

      END;
      EXIT(ldMaxQuantity);
    END;

    PROCEDURE isInvtPickLocation@1000000001(pcodLocationCode@1000000000 : Code[10]) : Boolean;
    VAR
      lrecLocation@1000000001 : Record 14;
    BEGIN
      //<FUNC>
      //  Description: Determines if the location is using inventory picks.
      //  Called From: Table "Sales Line" (ID:37)
      //  Side Effect: None
      //</FUNC>

      IF(lrecLocation.GET(pcodLocationCode)) THEN BEGIN
        EXIT(lrecLocation."Require Pick" AND (NOT lrecLocation."Require Shipment"));
      END;
      EXIT(FALSE);
    END;

    PROCEDURE isInvtPutLocation@1000000002(pcodLocationCode@1000000000 : Code[10]) : Boolean;
    VAR
      lrecLocation@1000000001 : Record 14;
    BEGIN
      //<FUNC>
      //  Description: Determines if the location is using inventory put-aways.
      //  Called From: Table "Purchase Line" (ID:39)
      //  Side Effect: None
      //</FUNC>

      IF(lrecLocation.GET(pcodLocationCode)) THEN BEGIN
        EXIT(lrecLocation."Require Put-away" AND (NOT lrecLocation."Require Receive"));
      END;
      EXIT(FALSE);
    END;

    PROCEDURE EncryptKey@100000001(psKey@100000000 : Text) : Text;
    VAR
      lsEncText@100000003 : Text;
      liLength@100000001 : Integer;
      liIndex@100000002 : Integer;
      liCount@100000004 : Integer;
      cChar@100000005 : Char;
    BEGIN
      //<FUNC>
      // Encrypts the key with the standard format
      //</FUNC>

      liLength := STRLEN(psKey);
      FOR liIndex:=1 TO liLength DO BEGIN
        cChar := psKey[liIndex];

        IF liCount < 5 THEN
          cChar := cChar + 1
        ELSE
          cChar := cChar - 1;

        lsEncText += FORMAT(cChar);

        liCount += 1;

        IF liCount = 10 THEN
          liCount := 0;
      END;

      EXIT(lsEncText);
    END;

    PROCEDURE GenerateSSCC@100000000(pcodGS1CompanyPrefix@100000000 : Code[10];pcodGS1ExtensionDigit@100000001 : Code[1];pcodSerialReference@100000002 : Code[16]) rcodSSCC : Code[18];
    VAR
      lcodSerialNumber@100000003 : Code[9];
      lcodReference@100000004 : Code[16];
      ltWeightString@100000005 : Text;
      liSerialNumberMaxLength@100000006 : Integer;
      liLeftPadCount@100000007 : Integer;
    BEGIN
      //<FUNC>
      // Generates a standard compliant SSCC from the given input
      //</FUNC>

      // GS1 Spec: https://www.gs1-128.info/sscc-18/
      // pcodGS1ExtensionDigit: value 0-9 to allow overflow of serial. SSCC should be valid for 1 year.
      // pcodGS1CompanyPrefix: 7-10 digits
      // pcodSerialNumber: 6-9 digits
      // lcodSerialNumber: Code[9]; // 6-9 digits
      // lcodReference: Code[16]; // The combined length of the GS1 Company Prefix and the Serial Number is always 16 digits.

      ltWeightString := '31313131313131313'; // https://www.gs1us.org/tools/check-digit-calculator

      // remove any leading or trailing whitespace
      pcodGS1CompanyPrefix := DELCHR(pcodGS1CompanyPrefix, '<>');
      pcodGS1ExtensionDigit := DELCHR(pcodGS1ExtensionDigit, '<>');

      // ensure that gs1 company prefix is seven digit, otherwise left pad with zeros.
      liLeftPadCount := 7 - STRLEN(pcodGS1CompanyPrefix);
      IF (liLeftPadCount > 0) THEN
        pcodGS1CompanyPrefix := PADSTR('', liLeftPadCount, '0') + pcodGS1CompanyPrefix;

      // determines how long the serial number can be in the range of 6 to 9 inclusive.
      // this is required because the company prefix and serial number have a three digit overlap
      liSerialNumberMaxLength := MAXSTRLEN(lcodReference) - STRLEN(pcodGS1CompanyPrefix);
      // Remove any non-digit character from the LP Header No.
      lcodSerialNumber := ''; // This suppresses overflow warning.
      lcodSerialNumber += DELCHR(pcodSerialReference, '=', DELCHR(pcodSerialReference, '=', '0123456789'));
      IF (STRLEN(lcodSerialNumber) > liSerialNumberMaxLength) THEN
          ERROR(tcSSCCTooLongErr, lcodSerialNumber, pcodSerialReference);
      // add leading 0s to serial number up to liSerialNumberMaxLength characters
      lcodSerialNumber := PADSTR('', liSerialNumberMaxLength - STRLEN(lcodSerialNumber), '0') + lcodSerialNumber;

      lcodReference := '';
      lcodReference += pcodGS1CompanyPrefix + lcodSerialNumber;
      // build up SSCC without check digit
      rcodSSCC := pcodGS1ExtensionDigit + lcodReference;
      // calculate and add check digit
      rcodSSCC += FORMAT(STRCHECKSUM(rcodSSCC, ltWeightString, 10));
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
    }
    END.
  }
}

