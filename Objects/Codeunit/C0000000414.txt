OBJECT Codeunit 414 Release Sales Document
{
  OBJECT-PROPERTIES
  {
    Date=03/31/21;
    Time=12:00:00 PM;
    Modified=Yes;
    Version List=NAVW111.00.00.44345,NAVNA11.00.00.44345;
  }
  PROPERTIES
  {
    TableNo=36;
    Permissions=TableData 36=rm;
    OnRun=VAR
            Codeunit414EventSubscriber@1000000000 : Codeunit 51946;
            SalesLine@1000000001 : Record 37;
          BEGIN

            SalesHeader.COPY(Rec);
            //Code(SalesHeader);
            Code;

            Rec := SalesHeader;
          END;

  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=There is nothing to release for the document of type %1 with the number %2.;ESM=No hay nada que lanzar para el documento de tipo %1 con el n�mero %2.;FRC=Il n''y a rien � lib�rer pour le document de type %1 portant le num�ro %2.;ENC=There is nothing to release for the document of type %1 with the number %2.';
      SalesSetup@1002 : Record 311;
      InvtSetup@1000 : Record 313;
      SalesHeader@1008 : Record 36;
      WhseSalesRelease@1004 : Codeunit 5771;
      Text002@1005 : TextConst 'ENU=This document can only be released when the approval process is complete.;ESM=Este documento s�lo se puede lanzar una vez completado el proceso de aprobaci�n.;FRC=Ce document ne peut �tre lanc� qu''� la fin du processus d''approbation.;ENC=This document can only be released when the approval process is complete.';
      Text003@1003 : TextConst 'ENU=The approval process must be canceled or completed to reopen this document.;ESM=El proceso de aprobaci�n se debe cancelar o completar para volver a abrir este documento.;FRC=On doit annuler ou terminer le processus d''approbation avant de rouvrir ce document.;ENC=The approval process must be cancelled or completed to reopen this document.';
      Text005@1006 : TextConst 'ENU=There are unpaid prepayment invoices that are related to the document of type %1 with the number %2.;ESM=Hay facturas anticipo sin pagar relacionadas con el documento de tipo %1 con el n�mero %2.;FRC=Il existe des factures de paiement anticip� impay�es li�es au document de type %1 portant le num�ro %2.;ENC=There are unpaid prepayment invoices that are related to the document of type %1 with the number %2.';
      UnpostedPrepaymentAmountsErr@1007 : TextConst '@@@="%1 - Document Type; %2 - Document No.";ENU=There are unposted prepayment amounts on the document of type %1 with the number %2.;ESM=Hay importes de anticipo sin registrar en el documento de tipo %1 con el n�mero %2.;FRC=Il existe des montants paiement anticip� non report�s sur le document de type %1 portant le num�ro %2.;ENC=There are unposted prepayment amounts on the document of type %1 with the number %2.';
      PreviewMode@1009 : Boolean;
      SkipCheckReleaseRestrictions@1010 : Boolean;
      EMailMgt@14000701 : Codeunit 14000903;
      NameAndAddressMgt@14000801 : Codeunit 14000709;
      RunFromEship@14000702 : Boolean;
      RunFromEDI@14000353 : Boolean;
      Text14000351@1000000013 : TextConst 'ENU=A P.O. change cancellation request has been received for this order.';
      Text51004@1000000012 : TextConst 'ENU=%1 %2 was already used on Sales Order No. %3 for %4 %5.';
      Text51005@1000000011 : TextConst 'ENU=%1 %2 was already used on Posted Sales Shipment No. %3 for %4 %5.';
      Text51006@1000000010 : TextConst 'ENU=%1 %2 was already used on Posted Sales Invoice No. %3 for %4 %5.';
      Text51095@1000000009 : TextConst 'ENU=Payment Term %1 cannot be combined with %2.';
      Text51096@1000000008 : TextConst 'ENU=doesn''t match %1 ''%2''';
      Text51007@1000000007 : TextConst 'ENU=The %1:%2 on %3:%4 is not in the Order Multiple,setup for the %5:%6, It must be rounded up to %7.';
      "***ABCSI Globals***"@1000000006 : Integer;
      ArchiveManagement@1000000005 : Codeunit 5063;
      CreateWhseShpt@1000000004 : Boolean;
      WhseRqst@1000000003 : Record 5765;
      SalesReturnEmail@1000000002 : Report 51009;
      GLSetup@1000000001 : Record 98;
      ItemRec@1000000000 : Record 27;
      Text14000551@14000554 : TextConst 'ENU=Requested Shipment Date can not be blank for any sales line.';
      Location@1000000015 : Record 14;
      SalesSplitOrder@1000000014 : Codeunit 51409;
      Table37EventSubscribers@1000000016 : Codeunit 50077;
      Codeunit414EventPublisher@1000000017 : Codeunit 51945;
      TextRNDERROR@1000000018 : TextConst 'ENU=Quantity must be round of %1 for line no. %2, Item no. %3';

    LOCAL PROCEDURE Code@10() LinesWereModified : Boolean;
    VAR
      Text14000551@1000000008 : TextConst 'ENU=Requested Shipment Date can not be blank for any sales line.';
      TextQAError@1000000007 : TextConst 'ENU=You Must add a comment line for a Quality Reason Code Document %1 Line No. %2';
      TextApplError@1000000006 : TextConst 'ENU="Document %1 Line No. %2 is not assigned to a related Document - you must delete the line and use the Get Posted Document Lines  Function "';
      PaymentTerms@1000000041 : Record 3;
      SalesLine@1006 : Record 37;
      PrepaymentMgt@1003 : Codeunit 441;
      Division@1000000037 : Record 51001;
      NotOnlyDropShipment@1002 : Boolean;
      PostingDate@1001 : Date;
      PrintPostedDocuments@1000 : Boolean;
      GetSourceDocOutbound@1000000033 : Codeunit 5752;
      InvMgtSetup@1000000032 : Record 14000551;
      SalesLineCheck@1000000031 : Record 37;
      EmailListEntry@1000000030 : Record 14000908;
      EMailSetup@1000000029 : Record 14000905;
      Salesperson@1000000028 : Record 13;
      EMailListEntryTmp@1000000027 : TEMPORARY Record 14000908;
      SalesOrderEMail@1000000026 : Report 14000901;
      SalesCommentLine@1000000025 : Record 44;
      tmpSalesLine@1000000024 : Record 37;
      RetrunReason@1000000017 : Record 6635;
      Cust@1000000015 : Record 18;
      ShippingAgents@1000000014 : Record 291;
      tmpLocation@1000000013 : Record 14;
      CalendarMgmt@1000000012 : Codeunit 7600;
      ApprovalsMgmt@1000000005 : Codeunit 1535;
      ApprovalEntry@1000000004 : Record 454;
      ApprovalManagement@1000000001 : Codeunit 1535;
      ApprovedOnly@1000000000 : Boolean;
      Text001@1000000002 : TextConst 'ENU=%1 %2 requires further approval.\\Approval request entries have been created.;ESM=El documento de %1 %2 requiere una aprobaci�n superior.\\Se han creado movs. solic. aprobaci�n.;FRC=%1 %2 n�cessite une approbation suppl�mentaire.\\Des �critures de demande d''approbation ont �t� cr��es.;ENC=%1 %2 requires further approval.\\Approval request entries have been created.';
      UBPEvents@1240020000 : Codeunit 14000599;
      WarehouseRequest@1000000003 : Record 5765;
      LocationBackup@1000000009 : Record 14;
    BEGIN
      WITH SalesHeader DO BEGIN
        IF Status = Status::Released THEN
          EXIT;

        // >> EDI //3073 code commented
        //IF NOT ReleaseEDIOrder(SalesHeader) THEN
        //  EXIT;
        // << EDI

        OnBeforeReleaseSalesDoc(SalesHeader,PreviewMode);
        IF NOT (PreviewMode OR SkipCheckReleaseRestrictions) THEN
          CheckSalesReleaseRestrictions;

        IF "Document Type" = "Document Type"::Quote THEN
          IF CheckCustomerCreated(TRUE) THEN
            GET("Document Type"::Quote,"No.")
          ELSE
            EXIT;

        TESTFIELD("Sell-to Customer No.");
        //<TPZ2829> Event Conversion
        {
        //<TPZ1666>
        Cust.GET("Sell-to Customer No.");
        Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE);
        //<TPZ1666>
        }
        //<TPZ2829> Event Conversion
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETFILTER(Type,'>0');
        SalesLine.SETFILTER(Quantity,'<>0');
        IF NOT SalesLine.FIND('-') THEN
          ERROR(Text001,"Document Type","No.");
        InvtSetup.GET;
        IF InvtSetup."Location Mandatory" THEN BEGIN
          SalesLine.SETRANGE(Type,SalesLine.Type::Item);
          IF SalesLine.FINDSET THEN
            REPEAT
              IF NOT SalesLine.IsServiceItem THEN
                SalesLine.TESTFIELD("Location Code");
            UNTIL SalesLine.NEXT = 0;
          SalesLine.SETFILTER(Type,'>0');
        END;
      //<TPZ2829> Event Conversion
      {
      //<TPZ118>  <TPZ1692>
      tmpSalesLine.RESET();
      tmpSalesLine.SETRANGE("Document Type","Document Type"::"Return Order");
      tmpSalesLine.SETRANGE("Document No.","No.");
      tmpSalesLine.SETRANGE(Type,SalesLine.Type::Item);
      tmpSalesLine.SETFILTER(Quantity,'<>0');
      IF tmpSalesLine.FIND('-') THEN
        REPEAT
          RetrunReason.GET(tmpSalesLine."Return Reason Code");
          IF RetrunReason.Type=RetrunReason.Type::Quality THEN
             tmpSalesLine.TESTFIELD("QA Sub Reason Code");

       UNTIL tmpSalesLine.NEXT=0;
      //</TPZ118>
      //</TPZ1692>

      //<TPZ1636>
      tmpSalesLine.RESET();
      tmpSalesLine.SETRANGE("Document Type","Document Type"::"Return Order");
      tmpSalesLine.SETRANGE("Document No.","No.");
      tmpSalesLine.SETRANGE(Type,SalesLine.Type::Item);
      tmpSalesLine.SETRANGE("Appl.-from Item Entry",0);
      tmpSalesLine.SETFILTER(Quantity,'<>0');
      IF tmpSalesLine.FIND('-') THEN BEGIN
        REPEAT
          RetrunReason.GET(tmpSalesLine."Return Reason Code");
          IF (RetrunReason.Type<>RetrunReason.Type::"Annual Return") THEN
             ERROR(TextApplError,SalesLine."Document No.",tmpSalesLine."Line No.");
        UNTIL tmpSalesLine.NEXT=0;
      END;
      //</TPZ1636>


      //<TPZ1454>
      IF ("Shipping Payment Type" = "Shipping Payment Type"::"Third Party") AND ("Document Type" = "Document Type"::Order)  THEN
        TESTFIELD("Third Party Ship. Account No.");
      //<TPZ1454>
      }
      //<TPZ2829> Event Conversion
        SalesLine.SETRANGE("Drop Shipment",FALSE);
        NotOnlyDropShipment := SalesLine.FINDFIRST;
      //<TPZ2829> Event Conversion
      {
      // <TPZ930>
      ValidateSalesLines(SalesHeader);
      // </TPZ930>
      }
      //<TPZ2829> Event Conversion
        SalesLine.RESET;

        // UBP >>
        //UBPEvents.Codeunit414_OnBeforeReleaseSalesDoc(SalesHeader); //HOTFIX RPS
        // UBP <<

        SalesSetup.GET;
        IF SalesSetup."Calc. Inv. Discount" THEN BEGIN
          PostingDate := "Posting Date";
          PrintPostedDocuments := "Print Posted Documents";
          CODEUNIT.RUN(CODEUNIT::"Sales-Calc. Discount",SalesLine);
          LinesWereModified := TRUE;
          GET("Document Type","No.");
          "Print Posted Documents" := PrintPostedDocuments;
          IF PostingDate <> "Posting Date" THEN
            VALIDATE("Posting Date",PostingDate);
        END;
      //<TPZ2829> Event Conversion
      {
      //<TPZ1530>
       IF NOT RunFromEship  THEN BEGIN
        tmpLocation.GET("Location Code");
        IF ("Document Type" = "Document Type"::Order) AND (tmpLocation."Shipping Location") AND (("Shipment Date")<WORKDATE) THEN BEGIN //TPZ1894 EB
            "Shipment Date" := WORKDATE;
            MODIFY();
        END;
      END;
      //</TPZ1530>
      //<TPZ1953>
       //IF ("Delivery Date"<=WORKDATE) AND ("Delivery Date"<>0D)  THEN BEGIN //<TPZ2257>
           tmpLocation.GET("Location Code");
           ShippingAgents.GET("Shipping Agent Code");
           IF ("Document Type" = "Document Type"::Order) AND (tmpLocation."Shipping Location") AND (ShippingAgents.Type=ShippingAgents.Type::"Local") THEN BEGIN  //EB  TMW
              "Delivery Date":=CalendarMgmt.CalcDateBOC('+1WD',"Shipment Date",0,'1','', 0, '', '', FALSE);
               MODIFY;
            END;
       //END;
      //</TPZ1953>

      // <TPZ573>
      IF SalesSetup."Calc. Free Freight" THEN
        CODEUNIT.RUN(CODEUNIT::"Sales-Calc. Free Freight",SalesHeader);
      // </TPZ573>


      //TOP090 KT ABCSI 01072015

      IF SalesSetup."Ext. Doc. No. Mandatory" AND
         (("Document Type" = "Document Type"::Order) OR ("Document Type" = "Document Type"::"Return Order")) //<TPZ1929)
      THEN
        TESTFIELD("External Document No.");
      //TOP090 KT ABCSI 01072015

      //<TPZ1576>
      IF ("Document Type" = "Document Type"::Quote) AND ("Shortcut Dimension 5 Code"='L') THEN
          TESTFIELD("Job Name");
      //</TPZ1576>

      // <TPZ426>

      IF SalesSetup."Validate Ext. Doc. No. Format" AND
         ("Document Type" = "Document Type"::Order)
      THEN
        ValidateExtDocNoFormat(SalesHeader);

      // <TPZ1118>
      IF Cust.GET("Sell-to Customer No.") AND
         Cust."Ship-to Code Mandatory" AND
         (("Document Type" = "Document Type"::Order) OR
          ("Document Type" = "Document Type"::Invoice))
      // <TPZ1118>
      THEN BEGIN    //<TPZ1424
        TESTFIELD("Ship-to Code");
        TESTFIELD("Ship-to Name");
        TESTFIELD("Ship-to Address");

        //<TPZ1424>
        IF ("Shortcut Dimension 5 Code" <> 'I') AND
          (("Ship-to Country/Region Code" = 'US') OR
          ("Ship-to Country/Region Code"  = ''))
        THEN BEGIN
          TESTFIELD("Ship-to City");
          TESTFIELD("Ship-to County");
          TESTFIELD("Ship-to Post Code");
        END;
      END;
      // </TPZ426>

      //<TPZ1424>
      IF (("Document Type" = "Document Type"::Order) OR
          ("Document Type" = "Document Type"::Invoice))
      THEN BEGIN
        TESTFIELD("Shipping Agent Code");
      END;
      //</TPZ1424>

      // <TPZ159>
      IF SalesSetup."Dupl. Whse. Rel. No. Warning" AND
         ("Document Type" = "Document Type"::Order)
      THEN
        ValidateWhseReleaseNo(SalesHeader);
      // </TPZ159>

      // <TPZ1145>
      IF Division.GET("Shortcut Dimension 5 Code") THEN BEGIN
        IF Division."OSR Code Mandatory" THEN
          TESTFIELD("Salesperson Code");

        IF Division."Mfr. Rep. Code Mandatory" THEN
          TESTFIELD("Mfr. Rep. Code");
      END;
      // </TPZ1145>


      // <TPZ844>
      IF SalesSetup."One Location per Order" AND
         ("Document Type" = "Document Type"::Order)
      THEN
        ValidateOneLocation(SalesHeader);
      // </TPZ844>


      //2016-03-14 TPZ1256 EBAGIM
      IF "Document Type" IN ["Document Type"::"Credit Memo","Document Type"::Invoice,"Document Type"::"Return Order"] THEN
          ValidateOneDivision(SalesHeader);

      //2016-03-14 TPZ1256 EBAGIM

      //<TPZ2782>
        IF ("Document Type" = "Document Type"::Order) AND (Status = Status::Open) THEN BEGIN
          LocationBackup.RESET;
          IF LocationBackup.GET("Location Code") AND (LocationBackup."Backup Location Code" <> '') THEN
          SalesSplitOrder.CreateSplitOrder(SalesHeader);
        END;
      ///<TPZ2782>

      // <TPZ884>
      IF PaymentTerms.GET("Payment Terms Code") AND
         PaymentTerms."Do Not Allow Blind Shipment" AND
         "Blind Shipment"
      THEN
        ERROR(Text51095,PaymentTerms.Code,FIELDCAPTION("Blind Shipment"));

      IF PaymentTerms.GET("Payment Terms Code") AND
         PaymentTerms."Do Not Allow Double Bl. Shpt." AND
         "Double Blind Shipment"
      THEN
        ERROR(Text51095,PaymentTerms.Code,FIELDCAPTION("Double Blind Shipment"));
      // </TPZ884>
      }
      //<TPZ2829> Event Conversion
      Codeunit414EventPublisher.CU414_OnRun(SalesHeader,RunFromEship);//<TPZ2829> Event Conversion

        IF PrepaymentMgt.TestSalesPrepayment(SalesHeader) AND ("Document Type" = "Document Type"::Order) THEN BEGIN
          Status := Status::"Pending Prepayment";
          MODIFY(TRUE);
          EXIT;
        END;
        Status := Status::Released;

        LinesWereModified := LinesWereModified OR CalcAndUpdateVATOnLines(SalesHeader,SalesLine);

        ReleaseATOs(SalesHeader);
        OnAfterReleaseATOs(SalesHeader,SalesLine);

        // >> Shipping
        //IF SalesSetup."Enable Shipping" AND NOT RunFromEship THEN //3073 code commented
        //  NameAndAddressMgt.CheckNameAddressSalesHeader(SalesHeader,"Shipping Agent Code"); //3073 code commented
        // << Shipping

        MODIFY(TRUE);

        IF NotOnlyDropShipment THEN
          IF "Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"] THEN
            WhseSalesRelease.Release(SalesHeader);


      //<TPZ2829> Event Conversion
      {
      //TOP170 KT ABCSI Sales Order Updates 04012015
      SalesSetup.GET;
      IF SalesSetup."Archive Quotes and Orders" THEN
        ArchiveManagement.ArchSalesDocumentNoConfirm(SalesHeader);
      //TOP170 KT ABCSI Sales Order Updates 04012015


      //TOP150 - KT ABCSI Sales Order Margin Review 04032015 Start

      IF (NOT RunFromEship) AND (CreateWhseShpt) THEN BEGIN
          IF ("Document Type" IN ["Document Type"::Order]) THEN BEGIN
            WhseRqst.SETRANGE(Type,WhseRqst.Type::Outbound);
            WhseRqst.SETRANGE("Source Type",DATABASE::"Sales Line");
            WhseRqst.SETRANGE("Source Subtype","Document Type");
            WhseRqst.SETRANGE("Source No.","No.");
            WhseRqst.SETRANGE("Document Status",WhseRqst."Document Status"::Released);
            IF (NOT WhseRqst.ISEMPTY) AND (NOT CheckifWhseShptExists(SalesHeader)) THEN
              GetSourceDocOutbound.CreateFromSalesOrder(SalesHeader);
          END;
      END;
      //TOP150 - KT ABCSI Sales Order Margin Review 04032015 End
      }
      //<TPZ2829> Event Conversion
        // >> Shipping
        //IF SalesSetup."Enable E-Mail" AND NOT RunFromEship THEN
         // EMailMgt.SendSalesConfirmation(SalesHeader,FALSE,FALSE);
       // IF  NOT RunFromEship THEN
         // EMailMgt.SendSalesConfirmation(SalesHeader,FALSE,FALSE);

      // << Shipping

      //<TPZ2829> Event Conversion
      {
      //<TPZ1576>
      CALCFIELDS(Amount);
      IF ("Document Type" = "Document Type"::Quote) AND ("Shortcut Dimension 5 Code"='L') AND ("E-Mail Confirmation Handled"=FALSE) THEN
        IF Salesperson.GET("RSM Code") AND (Salesperson."Send Quote Confirmation") AND (Amount>=SalesSetup."Min Quote Ntf Amount") THEN BEGIN
            EmailListEntry.INIT();
            EmailListEntry."Table ID":=36;
            EmailListEntry.Type:="Document Type";
            EmailListEntry.Code:= "No.";
            EmailListEntry."Entry No.":=100000;

            EmailListEntry."E-Mail":=Salesperson."E-Mail";
            EmailListEntry."Sales Quote Conf. E-Mail":=EmailListEntry."Sales Quote Conf. E-Mail"::"To";
            EmailListEntry.INSERT();
            SalesOrderEMail.InitializeRequest("Document Type","No.",FALSE);
            SalesOrderEMail.USEREQUESTPAGE(FALSE);
            SalesOrderEMail.RUNMODAL;

          END;
      //</TPZ1576>

      //<TPZ118>

      IF ("Document Type" = "Document Type"::"Return Order") AND ("E-Mail Confirmation Handled"=FALSE)  THEN BEGIN
            tmpSalesLine.RESET();
            tmpSalesLine.SETRANGE("Document Type","Document Type"::"Return Order");
            tmpSalesLine.SETRANGE("Document No.","No.");
            tmpSalesLine.SETRANGE(Type,tmpSalesLine.Type::Item);
            tmpSalesLine.SETFILTER(Quantity,'<>0');
            IF tmpSalesLine.FIND('-') THEN BEGIN
               RetrunReason.GET(tmpSalesLine."Return Reason Code");
               IF RetrunReason.Type=RetrunReason.Type::Quality THEN BEGIN
                    EmailListEntry.INIT();
                    EmailListEntry."Entry No.":=100000;
                    EmailListEntry."Table ID":=36;
                    EmailListEntry.Type:="Document Type";
                    EmailListEntry.Code:= "No.";
                    EMailSetup.GET(' ');
                    EmailListEntry."E-Mail":=EMailSetup."Qualty Return Conf. E-Mail";
                    EmailListEntry."Sales Ret. Order Conf. E-Mail":=EmailListEntry."Sales Ret. Order Conf. E-Mail"::"To";
                    EmailListEntry.INSERT();
                    SalesReturnEmail.InitializeRequest("Document Type","No.",FALSE);

                    SalesReturnEmail.USEREQUESTPAGE(FALSE);
                    SalesReturnEmail.RUNMODAL;

                END;

            END;
          END;
      //</TPZ118>
      }
      //<TPZ2829> Event Conversion
      // >> EDI //3073 code commented
      //IF "EDI Order" AND "EDI Cancellation Request" AND NOT RunFromEship THEN
      //  ERROR(Text14000351);
      // << EDI
      //<TPZ2829> Event Conversion
      {
      //TMEI BEG 070215 - WMS Mod
      UpdateOutboundWhseRequest(SalesHeader);
      //TMEI END 070215

      //<TPZ1942>
      CheckSalesLineQtyRounding(SalesHeader);
      //</TPZ1942>
      //<TPZ2673>
      WarehouseRequest.RESET;
      WarehouseRequest.SETRANGE("Source Type",37);
      WarehouseRequest.SETRANGE("Source Document",WarehouseRequest."Source Document"::"Sales Order");
      WarehouseRequest.SETRANGE("Source No.",SalesHeader."No.");
      //WarehouseRequest.SETRANGE("Activity Status",WarehouseRequest."Activity Status"::" ");//EB
      IF WarehouseRequest.FINDFIRST THEN
        IF SalesHeader."Document Type"=SalesHeader."Document Type"::Order THEN BEGIN
          IF Location.GET(SalesHeader."Location Code") THEN BEGIN
            IF Location."Auto Pick" THEN BEGIN
              CreateJobQueueforAutoPick(SalesHeader);
              //<TPZ2701>
              IF PickEmailExists THEN
                CreateJobQueueForSendingPick(SalesHeader);
              //</TPZ2701>
            END;
          END;
        END;
      //</TPZ2673>
      }
      //<TPZ2829> Event Conversion

       Codeunit414EventPublisher.CU414_OnRun_1(SalesHeader,RunFromEship,CreateWhseShpt);//<TPZ2829> Event Conversion


        OnAfterReleaseSalesDoc(SalesHeader,PreviewMode,LinesWereModified);

      END;
    END;

    [External]
    PROCEDURE Reopen@1(VAR SalesHeader@1000 : Record 36);
    BEGIN
      OnBeforeReopenSalesDoc(SalesHeader);

      WITH SalesHeader DO BEGIN
        IF Status = Status::Open THEN
          EXIT;
        Status := Status::Open;

        IF "Document Type" <> "Document Type"::Order THEN
          ReopenATOs(SalesHeader);

        MODIFY(TRUE);
        IF "Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"] THEN
          WhseSalesRelease.Reopen(SalesHeader);
      END;

      OnAfterReopenSalesDoc(SalesHeader);
    END;

    [External]
    PROCEDURE PerformManualRelease@2(VAR SalesHeader@1002 : Record 36);
    VAR
      PrepaymentMgt@1001 : Codeunit 441;
      ApprovalsMgmt@1000000000 : Codeunit 1535;
    BEGIN
      IF PrepaymentMgt.TestSalesPrepayment(SalesHeader) THEN
        ERROR(UnpostedPrepaymentAmountsErr,SalesHeader."Document Type",SalesHeader."No.");

      PerformManualCheckAndRelease(SalesHeader);
    END;

    PROCEDURE PerformManualCheckAndRelease@13(VAR SalesHeader@1002 : Record 36);
    VAR
      PrepaymentMgt@1001 : Codeunit 441;
      ApprovalsMgmt@1000 : Codeunit 1535;
      ApprovalEntry@1000000007 : Record 454;
      Division@1000000006 : Record 51001;
      ApprovalManagement@1000000005 : Codeunit 1535;
      ApprovedOnly@1000000004 : Boolean;
      SalesLine@1000000003 : Record 37;
      tmpLocation@1000000002 : Record 14;
      CalendarMgmt@1000000001 : Codeunit 7600;
      ShippingAgents@1000000000 : Record 291;
      Cust@1000000008 : Record 18;
      PaymentTerms@1000000009 : Record 3;
      SalesLine1@1000000011 : Record 37;
      ItemTypeCheck@1000000010 : Record 27;
      Rec_SalesLine@1000000013 : Record 37;
      Item@1000000012 : Record 27;
    BEGIN
      WITH SalesHeader DO BEGIN
        IF ("Document Type" = "Document Type"::Order) AND PrepaymentMgt.TestSalesPayment(SalesHeader) THEN BEGIN
          IF Status <> Status::"Pending Prepayment" THEN BEGIN
            Status := Status::"Pending Prepayment";
            MODIFY;
            COMMIT;
          END;
          ERROR(STRSUBSTNO(Text005,"Document Type","No."));
        END;
      //<TPZ2829> Event Conversion
      {
      //<TPZ2247>
      Cust.GET("Sell-to Customer No.");
      Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE);
      }
      //<TPZ2829> Event Conversion
        IF ApprovalsMgmt.IsSalesApprovalsWorkflowEnabled(SalesHeader) AND (SalesHeader.Status = SalesHeader.Status::Open) THEN
          ERROR(Text002);
      //<TPZ2829> Event Conversion
      {
      //</TPZ2247>
      //TOP010E KT ABCSI Additional Stock Status 07282015
      IF ("Document Type" = "Document Type"::Quote) AND ("Lock Price") THEN BEGIN
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        IF SalesLine.FINDSET THEN REPEAT
          IF SalesLine."Actual Unit Price" <> 0 THEN
           // SalesLine.UpdateLastSalesPrice(SalesLine);
            Table37EventSubscribers.Tb37_UpdateLastSalesPrice(SalesLine);
        UNTIL SalesLine.NEXT = 0;
      END;
      //TOP010E KT ABCSI Additional Stock Status 07282015

      //<TPZ2482>
      IF ("Document Type" = "Document Type"::Order) THEN BEGIN
          SalesLine1.SETRANGE("Document Type","Document Type");
          SalesLine1.SETRANGE("Document No.","No.");
          IF SalesLine1.FINDSET THEN REPEAT
            ItemTypeCheck.RESET;
            IF ItemTypeCheck.GET(SalesLine1."No.") THEN BEGIN
              IF ItemTypeCheck.Type = ItemTypeCheck.Type :: Service THEN BEGIN
                SalesLine1.VALIDATE("Qty. to Ship",SalesLine1.Quantity);
                SalesLine1.MODIFY(TRUE);
              END;
            END;
          UNTIL SalesLine1.NEXT = 0;
        END;
      //</TPZ2482>
      //<TPZ1530>
      tmpLocation.GET("Location Code");
      IF ("Document Type" = "Document Type"::Order) AND (tmpLocation."Shipping Location") AND (("Shipment Date")<WORKDATE) THEN BEGIN //TPZ1894 EB
          "Shipment Date" := WORKDATE;
          MODIFY();
      END;
      //</TPZ1530>
      //<TPZ1927>  <TPZ1970>
      ShippingAgents.GET("Shipping Agent Code");
        IF ("Document Type" = "Document Type"::Order) AND (tmpLocation."Shipping Location") AND (ShippingAgents.Type=ShippingAgents.Type::"Local") THEN BEGIN  //EB  TMW
          "Delivery Date":=CalendarMgmt.CalcDateBOC('+1WD',"Shipment Date",0,'1','', 0, '', '', FALSE);
            MODIFY;
        END;

      //</TPZ1927> </TPZ1970>
      }

        //>>TPZ2893
        {
         Rec_SalesLine.RESET;
         Rec_SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
         Rec_SalesLine.SETRANGE("Document No.",SalesHeader."No.");
         IF Rec_SalesLine.FINDSET THEN REPEAT
           IF   ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND
             (Rec_SalesLine.Type = Rec_SalesLine.Type::Item) AND
             (Rec_SalesLine.Quantity <> 0) AND
             Item.GET(Rec_SalesLine."No.") AND
             (Item."Sales Order Multiple" <> 0) AND
             (Rec_SalesLine."Outstanding Quantity" <> 0)
           AND (NOT Item."Override Sales Order Multiple")  //TPZ2899
          THEN BEGIN
            IF Rec_SalesLine.Quantity MOD Item."Sales Order Multiple" <> 0 THEN BEGIN
              ERROR(TextRNDERROR,Item."Sales Order Multiple",Rec_SalesLine."Line No.",Item."No.");
            END;
          END;
         UNTIL Rec_SalesLine.NEXT = 0;
         }
        //<<TPZ2893

      //<TPZ2829> Event Conversion
       Codeunit414EventPublisher.CU414_PerformManualCheckAndRelease(SalesHeader);  //<TPZ2829> Event Conversion

      IF ApprovalManagement.CheckApprSalesDocument(SalesHeader) THEN BEGIN//2013 method
      //<TPZ2829> Event Conversion
      {
          //TOP090 KT ABCSI - Customer PO Mandatory 06042015
          SalesSetup.GET;
          IF SalesSetup."Ext. Doc. No. Mandatory" AND
             (("Document Type" = "Document Type"::Order) OR ("Document Type" = "Document Type"::"Return Order")) //<VSO1929)
          THEN
            TESTFIELD("External Document No.");
          //TOP090 KT ABCSI - Customer PO Mandatory 06042015

          // <TPZ426>
          IF SalesSetup."Validate Ext. Doc. No. Format" AND
            ("Document Type" = "Document Type"::Order)
          THEN
            ValidateExtDocNoFormat(SalesHeader);

          // <TPZ1118>
          IF Cust.GET("Sell-to Customer No.") AND
             Cust."Ship-to Code Mandatory" AND
             (("Document Type" = "Document Type"::Order) OR
              ("Document Type" = "Document Type"::Invoice))
          // <TPZ1118>
          THEN BEGIN    //<TPZ1424
            TESTFIELD("Ship-to Code");
            TESTFIELD("Ship-to Name");
            TESTFIELD("Ship-to Address");

            //<TPZ1424>
         IF ("Shortcut Dimension 5 Code" <> 'I') AND
            (("Ship-to Country/Region Code" = 'US') OR
            ("Ship-to Country/Region Code"  = ''))
          THEN BEGIN
              TESTFIELD("Ship-to City");
              TESTFIELD("Ship-to County");
              TESTFIELD("Ship-to Post Code");
            END;
          END;
          // </TPZ426>

          //<TPZ1424>
          IF (("Document Type" = "Document Type"::Order) OR
              ("Document Type" = "Document Type"::Invoice))
          THEN BEGIN
            TESTFIELD("Shipping Agent Code");
          END;
          //</TPZ1424>

          // <TPZ159>
          IF SalesSetup."Dupl. Whse. Rel. No. Warning" AND
            ("Document Type" = "Document Type"::Order)
          THEN
            ValidateWhseReleaseNo(SalesHeader);
          // </TPZ159>

          // <TPZ1145>
          IF Division.GET("Shortcut Dimension 5 Code") THEN BEGIN
            IF Division."OSR Code Mandatory" THEN
              TESTFIELD("Salesperson Code");

            IF Division."Mfr. Rep. Code Mandatory" THEN
              TESTFIELD("Mfr. Rep. Code");
          END;
          // </TPZ1145>

          // <TPZ844>
          IF SalesSetup."One Location per Order" THEN
            ValidateOneLocation(SalesHeader);
          // </TPZ844>

          // <TPZ884>
          IF PaymentTerms.GET("Payment Terms Code") AND
             PaymentTerms."Do Not Allow Blind Shipment" AND
             "Blind Shipment"
          THEN
            ERROR(Text51095,PaymentTerms.Code,FIELDCAPTION("Blind Shipment"));

          IF PaymentTerms.GET("Payment Terms Code") AND
             PaymentTerms."Do Not Allow Double Bl. Shpt." AND
             "Double Blind Shipment"
          THEN
            ERROR(Text51095,PaymentTerms.Code,FIELDCAPTION("Double Blind Shipment"));
          // </TPZ884>

          // <TPZ930>
          ValidateSalesLines(SalesHeader);
          // </TPZ930>

          //<TPZ1942>
          //CheckSalesLineQtyRounding(SalesHeader);
          //</TPZ1942>
      }
      //<TPZ2829> Event Conversion
      Codeunit414EventPublisher.CU414_PerformManualCheckAndRelease_1(SalesHeader); //<TPZ2829> Event Conversion

          CASE Status OF
            Status::"Pending Approval":
              ERROR(Text002);
            Status::Released,Status::"Pending Prepayment":
              CODEUNIT.RUN(CODEUNIT::"Release Sales Document",SalesHeader);
            Status::Open:
              BEGIN
                ApprovedOnly := TRUE;
                ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
                ApprovalEntry.SETRANGE("Table ID",DATABASE::"Sales Header");
                ApprovalEntry.SETRANGE("Document Type","Document Type");
                ApprovalEntry.SETRANGE("Document No.","No.");
                ApprovalEntry.SETFILTER(Status,'<>%1&<>%2',ApprovalEntry.Status::Rejected,ApprovalEntry.Status::Canceled);
                IF ApprovalEntry.FINDSET THEN BEGIN
                  REPEAT
                    IF ApprovalEntry.Status <> ApprovalEntry.Status::Approved THEN
                      ApprovedOnly := FALSE;
                  UNTIL NOT ApprovedOnly OR (ApprovalEntry.NEXT = 0);

                  //IF ApprovedOnly AND TestApprovalLimit(SalesHeader) THEN  TOP150 - KT ABCSI Sales Order Margin Review 04032015 Commented out
                  IF ApprovedOnly AND TestMarginAppLimit(SalesHeader) THEN
                    CODEUNIT.RUN(CODEUNIT::"Release Sales Document",SalesHeader)
                  ELSE BEGIN
                    ApprovalManagement.SetWhseShipment(CreateWhseShpt);
                    IF ApprovalManagement.SendSalesApprovalRequest(SalesHeader) THEN; //TOP150 - KT ABCSI Sales Order Margin Review 04032015
                    //ERROR(Text002);  TOP150 - KT ABCSI Sales Order Margin Review 04032015 Commented out
                  END;
                END ELSE BEGIN
                  ApprovalManagement.SetWhseShipment(CreateWhseShpt);
                  IF ApprovalManagement.SendSalesApprovalRequest(SalesHeader) THEN;  //TOP150 - KT ABCSI Sales Order Margin Review 04032015 Commented out
                  //ERROR(Text002);  TOP150 - KT ABCSI Sales Order Margin Review 04032015 Commented out
                END;
              END;
          END;
        END ELSE
          CODEUNIT.RUN(CODEUNIT::"Release Sales Document",SalesHeader);
      END;
    END;

    [External]
    PROCEDURE PerformManualReopen@3(VAR SalesHeader@1002 : Record 36);
    VAR
      ApprovalManagement@1000000000 : Codeunit 1535;
    BEGIN
      WITH SalesHeader DO BEGIN
        IF ApprovalManagement.CheckApprSalesDocument(SalesHeader) THEN BEGIN
          CASE Status OF
            Status::"Pending Approval":
      BEGIN
                //TOP150 - KT ABCSI Sales Order Margin Review 04072015 Start
                //ERROR(Text003);
                IF ApprovalManagement.CancelSalesApprovalRequest(SalesHeader,FALSE,TRUE) THEN;
                //TOP150 - KT ABCSI Sales Order Margin Review 04072015 End
              END;
            Status::Open,Status::Released,Status::"Pending Prepayment":
              Reopen(SalesHeader);
          END;
        END ELSE
          Reopen(SalesHeader);
      END;
      //<TPZ2829> Event Conversion
      {
      ClearWhseReleaseNo(SalesHeader);//<TPZ2464>
      }
      //<TPZ2829> Event Conversion
      Codeunit414EventPublisher.CU414_PerformManualReopen(SalesHeader); //<TPZ2829> Event Conversion
    END;

    LOCAL PROCEDURE ReleaseATOs@5(SalesHeader@1000 : Record 36);
    VAR
      SalesLine@1001 : Record 37;
      AsmHeader@1002 : Record 900;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      IF SalesLine.FINDSET THEN
        REPEAT
          IF SalesLine.AsmToOrderExists(AsmHeader) THEN
            CODEUNIT.RUN(CODEUNIT::"Release Assembly Document",AsmHeader);
        UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ReopenATOs@6(SalesHeader@1000 : Record 36);
    VAR
      SalesLine@1001 : Record 37;
      AsmHeader@1002 : Record 900;
      ReleaseAssemblyDocument@1003 : Codeunit 903;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      IF SalesLine.FINDSET THEN
        REPEAT
          IF SalesLine.AsmToOrderExists(AsmHeader) THEN
            ReleaseAssemblyDocument.Reopen(AsmHeader);
        UNTIL SalesLine.NEXT = 0;
    END;

    [External]
    PROCEDURE ReleaseSalesHeader@11(VAR SalesHdr@1000 : Record 36;Preview@1001 : Boolean) LinesWereModified : Boolean;
    BEGIN
      PreviewMode := Preview;
      SalesHeader.COPY(SalesHdr);
      //LinesWereModified :=  Code(SalesHdr);//EB 2017 TPZ2829 Commented
      LinesWereModified :=  Code;
      SalesHdr := SalesHeader;
    END;

    PROCEDURE SetSkipCheckReleaseRestrictions@21();
    BEGIN
      SkipCheckReleaseRestrictions := TRUE;
    END;

    PROCEDURE CalcAndUpdateVATOnLines@14(VAR SalesHeader@1003 : Record 36;VAR SalesLine@1002 : Record 37) LinesWereModified : Boolean;
    VAR
      TempVATAmountLine0@1001 : TEMPORARY Record 290;
      TempVATAmountLine1@1000 : TEMPORARY Record 290;
    BEGIN
      SalesLine.SetSalesHeader(SalesHeader);
      IF SalesHeader."Tax Area Code" = '' THEN BEGIN  // VAT
        SalesLine.CalcVATAmountLines(0,SalesHeader,SalesLine,TempVATAmountLine0);
        SalesLine.CalcVATAmountLines(1,SalesHeader,SalesLine,TempVATAmountLine1);
        LinesWereModified :=
          SalesLine.UpdateVATOnLines(0,SalesHeader,SalesLine,TempVATAmountLine0) OR
          SalesLine.UpdateVATOnLines(1,SalesHeader,SalesLine,TempVATAmountLine1);
      END ELSE BEGIN
        SalesLine.CalcSalesTaxLines(SalesHeader,SalesLine);
        LinesWereModified := TRUE;
      END;
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnBeforeReleaseSalesDoc@7(VAR SalesHeader@1000 : Record 36;PreviewMode@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAfterReleaseSalesDoc@4(VAR SalesHeader@1000 : Record 36;PreviewMode@1001 : Boolean;LinesWereModified@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnBeforeReopenSalesDoc@8(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAfterReopenSalesDoc@9(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAfterReleaseATOs@12(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37);
    BEGIN
    END;

    PROCEDURE SetRunFromEShip@14000701();
    BEGIN
      RunFromEship := TRUE;
    END;

    PROCEDURE ReleaseEDIOrder@14000351(SalesHeader@1240020000 : Record 36) ReleaseOrder : Boolean;
    VAR
      Text14000351@1240020002 : TextConst 'ENU=A cancellation request has been received for %1 %2.';
      Text14000352@1240020001 : TextConst 'ENU=Sales document cannot be released because EDI pricing discrepancies exist.';
      EDIRecDocHdr@1240020003 : Record 14002358;
    BEGIN
      // >> EDI
      ReleaseOrder := FALSE;
      WITH SalesHeader DO BEGIN
        IF "EDI Order" AND "EDI Cancellation Request" AND NOT RunFromEship THEN
          ERROR(Text14000351,"Document Type","No.");

        CALCFIELDS("Pricing Discrepancy");
        IF "EDI Order" AND "Pricing Discrepancy" AND NOT RunFromEship THEN BEGIN
          IF EDIRecDocHdr.GET("EDI Internal Doc. No.") THEN
            IF EDIRecDocHdr."Price Discrepancy Check Req." THEN BEGIN
             IF NOT RunFromEDI THEN
               IF GUIALLOWED THEN
                 MESSAGE(Text14000352);
              ReleaseOrder := FALSE;
              EXIT(ReleaseOrder);
            END;
        END;
      END;
      ReleaseOrder := TRUE;
      EXIT(ReleaseOrder);
      // << EDI
    END;

    PROCEDURE SetRunFromEDI@14000352(ProcessingByEDI@1240020000 : Boolean);
    BEGIN
      RunFromEDI := ProcessingByEDI;
    END;

    PROCEDURE "***ABCSI Functions***"@1000000000();
    BEGIN
    END;

    PROCEDURE TestMarginAppLimit@1000000001(SalesHeader@1000000000 : Record 36) : Boolean;
    VAR
      Item@1000000009 : Record 27;
      UserSetup@1000000006 : Record 91;
      AppMarginLCY@1000000004 : Decimal;
      AppMarginPct@1000000003 : Decimal;
      CustDivision@1000000002 : Record 50007;
      MinMarginPct@1000000001 : Decimal;
      SalesLine@1000000007 : Record 37;
      LineAppRequired@1000000008 : Boolean;
      AppManagement@1000000005 : Codeunit 1535;
    BEGIN
      //TOP150 - KT ABCSI Sales Order Margin Review 04032015
      AppManagement.CalcSalesDocMargin(SalesHeader,AppMarginPct,AppMarginLCY);
      IF CustDivision.GET(SalesHeader."Bill-to Customer No.",SalesHeader."Shortcut Dimension 5 Code") THEN
        MinMarginPct := CustDivision."Margin Approval %"
      ELSE
        MinMarginPct := 0;

      UserSetup.GET(USERID);
      IF UserSetup."Sales Margin % Approver" THEN
        EXIT(TRUE);

      IF (AppMarginPct < MinMarginPct) OR (MinMarginPct = 0) THEN
        EXIT(FALSE);
        //ERROR(Text002);

      SalesSetup.GET;
      SalesSetup.TESTFIELD("Sales Line Max. Margin %");
      SalesSetup.TESTFIELD("Sales Line Min. Margin %"); //TOP230 KT ABCSI CRP 2 Fixes 05012015
      LineAppRequired := FALSE;
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETFILTER("No.",'<>%1','');
      SalesLine.SETFILTER(Quantity,'<>%1',0);
      SalesLine.SETFILTER(Sample,'<>%1',TRUE);
      SalesLine.SETFILTER(Promo,'<>%1',TRUE);//<TPZ2368>
      IF SalesLine.FINDSET THEN REPEAT
        Item.GET(SalesLine."No.");
        IF ((SalesLine."Actual Unit Price" < Item."Unit Cost" + ((Item."Unit Cost" * SalesSetup."Sales Line Min. Margin %")/100))) OR //TOP230 KT ABCSI CRP 2 Fixes 05012015
           ((SalesLine."Actual Unit Price") > (Item."Unit Cost" + ((Item."Unit Cost" * SalesSetup."Sales Line Max. Margin %")/100))) THEN
          LineAppRequired := TRUE;
      UNTIL SalesLine.NEXT = 0;

      IF LineAppRequired THEN
        EXIT(FALSE);


      EXIT(TRUE);
      //TOP150 - KT ABCSI Sales Order Margin Review 04032015
    END;

    PROCEDURE SetWhseShipment@1000000002(newCreateWhseShpt@1000000000 : Boolean);
    BEGIN
      CreateWhseShpt := newCreateWhseShpt;
    END;

    BEGIN
    {
      /WarehouseRequest.SETRANGE("Activity Status",WarehouseRequest."Activity Status"::" ")
      TOP090 KT ABCSI 01072015
       - Added test for External Document No. for Document Type = Order

      TOP170 KT ABCSI Sales Order Updates 04012015
        - Added code to archive the sales document

      TOP150 - KT ABCSI Sales Order Margin Review 04032015
        - Created new functions TestMarginAppLimit(), SetWhseShipment()
        - Code written under OnRun trigger, PerformManualRelease and PerformManualOpen functions
        - Added new functions TestMarginAppLimit() and SetWhseShipment()

      TOP230 KT ABCSI CRP 2 Fixes 05012015
        - Added code in TestMarginAppLimit function for sales line margin

      TOP090 KT ABCSI - Customer PO Mandatory 06042015
        - Added code to TESTFIELD External Document No. in PerformManualRelease function

      TOP010E KT ABCSI Additional Stock Status 07282015
        - Added code to update Last Unit Price in PerformManualRelease functiongl

      2015-06-01 TPZ573 VCHERNYA
        Free Freight Calculation has been added
      2015-06-22 TPZ426 VCHERNYA
        Customer PO No. (Ext. Doc. No.) and Ship-to Code validations have been added
      2015-07-13 TPZ844 VCHERNYA
        One Location per Order validation has been added
      2015-08-21 TPZ159 VCHERNYA
        Duplicate Warehouse Release No. validation has been added
      2015-10-13 TPZ930 TAKHMETO
        ValidateSalesLines function has been added
      2015-11-01 TPZ1118 TAKHMETO
        OnRun and PerformManualRelease functions has been modified
      2015-12-11 TPZ884 TAKHMETO
        Verification of Payment Terms for Blind and Double Blind Shipments has been added
      2016-03-14 EBAGIM TPZ1256
        One Division Per Credit/Invoice Validation
      2016-03-25 EBAGIM TPZ1454
        Validation of third Party Ship. Account No."
      2016-03-31 TPZ1145 TAKHMETO
        Verification of Mfr. Rep Code and OSR Code has been added
      2016-04-04 SDESAI TPZ1424
        Shipping Agent Mandatory on Sales Header
          - The user must populate Shipping Agent on ALL Sales Documents.
            For documents with no physical shipment associated, user must populate
            it with a place holder such as "N/A".
          - Sales Orders / Invoices with Division Code = "I" (International) are excluded for
            Ship-to City, Ship-to State and Ship-to Zip Code to accomodate Corina's request.
      2016-04-22 TPZ1530 EBAGIM
        Update shipment Date on release
      2016-07-22 TPZ1576 EBAGIM
        Added Job Name Validation and Email Quote
      2016-08-11 TPZ118 EBAGIM
        Add Comment Validation for retrun Documents
      2016-09-25 TPZ1666 EBAGIM
        Check Blocked Customers on release
      2016-12-01 TPZ1692 EBAGIM
        Add Sub QA Validation
      2016-12-01 TPZ1636 EBAGIM
        Check that item line for return is Appl.-from Item Entry

      2016-12-17 TPZ1568 EBAGIM
        Added the abilty to assign a non inventory Location to a line - diffrent than header Location
      2017-01-04 TPZ1765 EBAGIM
        Validate the Description Field on sales orders
      2017-05-25 TPZ1894 EBAGIM
        Update shipment date to reflect todays date  - only if the current shipment date is in the past
      2017-06-30 TPZ1929 EBAGIM
        Validate PO Mandatory on retrun orders
      2017-07-12 TPZ1942 SDESAI
        Check Qty. Rounding Up
      2017-07-11 TPZ1927 EBAGIM
        Calculate delivery date
      2017-07-11 TPZ1953 EBAGIM
        Calculate delivery date on Auto release (packing) - For back orders
      2017-07-11 TPZ1970 EBAGIM
        Calculate delivery date on Auto release (packing)  - For all Local orders  Change was un-done(7/20/2017)
      2018-03-26 TPZ2247 EBAGIM
        Prevent Blocked accounts allow release order to approval
      2018-03-26 TPZ2257 EBAGIM
        Fixed issues with Delivery date update for older orders released from credit
      2018-07031 TPZ2368 UCHOUHAN
        Added code for Promo
      2018-12-14 TPZ2464 UCHOUHAN
        Added code for Clear Warehouse release no in Mfg Rep location
      2019-07-12 TPZ2482 UCHOUHAN
        Changes for OverWrap Sevice Item.
      2019-09-25 TPZ2648 RTIWARI
        Added code for allowing multiple location incase of Return
      2019-11-08 TPZ2673 RTIWARI
        Added code for creating Picks automatically via Job Queue
      2019-11-08 TPZ2701 RTIWARI
        Added code to generate Job Queue for Sending Picks through Email automatically
      2019-11-13 TPZ2716 RTIWARI
        Code modified to allow Multiple location in case of Return for Non Inventory Location
      2020-05-13 TPZ2782 UCHOUHAN
        Create new functionality to create split orders while releasing sales order.
      001 TPZ2893 GKG 07272020 - Code added for 'Validate Sales order Multiple on release for handling EDI orders'
    }
    END.
  }
}

