OBJECT Codeunit 11123324 SC - Change Management
{
  OBJECT-PROPERTIES
  {
    Date=04/18/17;
    Time=[ 1:00:00 PM];
    Version List=SCW19.2.0;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SetupRead@11123303 : Boolean;
      IntegrationActivated@11123302 : Boolean;
      Text11123302@11123309 : TextConst 'ENU=You cannot delete %1 because there are one or more items that include this product group.';
      Text11123306@11123310 : TextConst 'ENU=You cannot delete %1 because there are one or more items that include this item category.';
      Text11123307@11123304 : TextConst 'ENU=The %1 %2 is a temporary document created by \Sana Commerce and cannot be processed or edited.';
      IsGuestCustomerGlobal@11123305 : Boolean;
      ChangeLogSetupRead@11123306 : Boolean;
      ChangeLogActivated@11123307 : Boolean;

    PROCEDURE GetTableTriggerMask@11123302(TableNumber@11123302 : Integer) : Integer;
    BEGIN
      IF COMPANYNAME = '' THEN
        EXIT(0);

      IF IsHandledRecord(TableNumber) THEN
        EXIT(15);
    END;

    PROCEDURE GetDatabaseTableTriggerSetup@11123305(TableNumber@11123306 : Integer;VAR Insert@11123305 : Boolean;VAR Modify@11123304 : Boolean;VAR Delete@11123303 : Boolean;VAR Rename@11123302 : Boolean);
    BEGIN
      IF COMPANYNAME = '' THEN
        EXIT;

      IF IsHandledRecord(TableNumber) THEN BEGIN
        Insert := TRUE;
        Modify := TRUE;
        Delete := TRUE;
        Rename := TRUE;
      END;
    END;

    PROCEDURE IsHandledRecord@11123304(TableNumber@11123302 : Integer) : Boolean;
    BEGIN
      IF TableNumber IN
         [DATABASE::Item,
          DATABASE::"Item Variant",
          DATABASE::Customer,
          DATABASE::Contact,
          DATABASE::"Salesperson/Purchaser",
          DATABASE::"Sales Price",
          DATABASE::"Sales Line Discount",
          DATABASE::"Customer Template",
          DATABASE::Currency,
          DATABASE::"VAT Posting Setup",
          DATABASE::"General Ledger Setup",
          DATABASE::"Item Unit of Measure",
          DATABASE::"Unit of Measure",
          DATABASE::"Item Cross Reference",
          DATABASE::"Item Translation",
          DATABASE::"Item Substitution",
          DATABASE::"Extended Text Header",
          DATABASE::"Extended Text Line",
          DATABASE::"Sales Header",
          DATABASE::"Sales Line",
          DATABASE::"Item Category",
          DATABASE::"Product Group",
          DATABASE::"Record Link",
          DATABASE::"SC - Data Validation Header",
          DATABASE::"SC - Operation",
          DATABASE::"SC - Webshop"
         ]
      THEN
        EXIT(TRUE)
      ELSE
        IF IsLocalazedHandledRecord(TableNumber) OR
           IsAddonHandledRecord(TableNumber) OR
           IsCustomHandledRecord(TableNumber)
        THEN
          EXIT(TRUE);
    END;

    LOCAL PROCEDURE IsLocalazedHandledRecord@11123332(TableNumber@11123302 : Integer) : Boolean;
    BEGIN
      IF TableNumber IN
        [
         90,       // BOM Component
         99000771, // Production BOM Header
         99000772  // Production BOM Line
        ]
      THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE IsAddonHandledRecord@11123317(TableNumber@11123302 : Integer) : Boolean;
    BEGIN
      IF TableNumber IN
        [
         11006116, // PF Item Status
         11006110, // PF Item Vert Component
         11006111, // PF Item Horz Component
         11006227, // PF PfsSalesperson Determination
         10001404  // LS Item Status Link
        ]
      THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE IsCustomHandledRecord@11123324(TableNumber@11123302 : Integer) : Boolean;
    BEGIN
      // This function should be implemented, if it is required to handle an extra table in scope of customization.
    END;

    PROCEDURE OnInsertModifyDeleteRename@11123303(VAR RecRef@11123302 : RecordRef;Action@11123303 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      IF RecRef.ISTEMPORARY THEN
        EXIT;

      CASE RecRef.NUMBER OF
        DATABASE::Item                          : ItemIMD(RecRef,Action);
        DATABASE::"Item Variant"                : ItemVariantIMD(RecRef,Action);
        DATABASE::Customer                      : CustomerIMD(RecRef,Action);
        DATABASE::Contact                       : ContactIMD(RecRef,Action);
        DATABASE::"Salesperson/Purchaser"       : SalespersonIMD(RecRef,Action);
        DATABASE::"Sales Price"                 : SalesPriceIMD(RecRef,Action);
        DATABASE::"Sales Line Discount"         : SalesLineDiscountIMD(RecRef,Action);
        DATABASE::"Customer Template"           : CustomerTemplateIMD(RecRef,Action);
        DATABASE::Currency                      : CurrencyIMD(RecRef,Action);
        DATABASE::"VAT Posting Setup"           : VATSetupIMD(RecRef,Action);
        DATABASE::"General Ledger Setup"        : GLSetupIMD(RecRef,Action);
        DATABASE::"Item Unit of Measure"        : ItemUnitOfMeasureIMD(RecRef,Action);
        DATABASE::"Unit of Measure"             : UnitOfMeasureIMD(RecRef,Action);
        DATABASE::"Item Cross Reference"        : ItemCrossRefIMD(RecRef,Action);
        DATABASE::"Item Translation"            : ItemTranslationIMD(RecRef,Action);
        DATABASE::"Item Substitution"           : ItemSubstitutionIMD(RecRef,Action);
        DATABASE::"Extended Text Header"        : ExtTextHeaderIMD(RecRef,Action);
        DATABASE::"Extended Text Line"          : ExtTextLineIMD(RecRef,Action);
        DATABASE::"Sales Header"                : SalesHeaderIMD(RecRef,Action);
        DATABASE::"Sales Line"                  : SalesLineIMD(RecRef,Action);
        DATABASE::"Item Category"               : ItemCategoryIMD(RecRef,Action);
        DATABASE::"Product Group"               : ProductGroupIMD(RecRef,Action);
        DATABASE::"Record Link"                 : RecordLinkIMD(RecRef,Action);
        DATABASE::"SC - Operation"              : OperationIMD(RecRef,Action);
        DATABASE::"SC - Webshop"                : WebshopIMD(RecRef,Action);
        DATABASE::"SC - Data Validation Header" : DataValidHeaderIMD(RecRef,Action);
        ELSE BEGIN
          IF IsLocalazedHandledRecord(RecRef.NUMBER) THEN
            LocalizedTableIMD(RecRef,Action);
          IF IsAddonHandledRecord(RecRef.NUMBER) THEN
            AddonTableIMD(RecRef,Action);
          IF IsCustomHandledRecord(RecRef.NUMBER) THEN
            CustomTableIMD(RecRef,Action);
        END;
      END;
    END;

    LOCAL PROCEDURE ItemIMD@11123307(VAR RecRef@11123302 : RecordRef;Action@11123305 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      UpdateCache(RecRef,Action);
      HandleRecordInfo(RecRef,Action);
      RunActionEvent(RecRef,Action);
    END;

    LOCAL PROCEDURE ItemVariantIMD@11123309(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      UpdateCache(RecRef,Action);
      HandleRecordInfo(RecRef,Action);
    END;

    LOCAL PROCEDURE CustomerIMD@11123306(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      UpdateCache(RecRef,Action);
      HandleRecordInfo(RecRef,Action);
      RunActionEvent(RecRef,Action);

      SalespersonByCustomerIMD(RecRef,Action);
    END;

    LOCAL PROCEDURE ContactIMD@11123308(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      UpdateCache(RecRef,Action);
      HandleRecordInfo(RecRef,Action);
    END;

    LOCAL PROCEDURE SalespersonIMD@11123322(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      HandleRecordInfo(RecRef,Action);
    END;

    LOCAL PROCEDURE SalespersonByCustomerIMD@11123339(RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    VAR
      RecRef2@11123308 : RecordRef;
      FieldRef@11123304 : FieldRef;
      Salesperson@11123305 : Record 13;
      xRecCustomer@11123306 : Record 18;
    BEGIN
      FieldRef := RecRef.FIELD(29); // "Salesperson Code"
      IF Salesperson.GET(FieldRef.VALUE) THEN BEGIN
        RecRef2.GETTABLE(Salesperson);
        HandleRecordInfo(RecRef2,Action);
      END ELSE BEGIN
        FieldRef := RecRef.FIELD(1); // Customer."No."
        IF xRecCustomer.GET(FieldRef.VALUE) THEN
          IF Salesperson.GET(xRecCustomer."Salesperson Code") THEN BEGIN
            RecRef2.GETTABLE(Salesperson);
            HandleRecordInfo(RecRef2,Action);
          END;
      END;

      PfsSalespersonByCustomerIMD(RecRef,Action);
    END;

    LOCAL PROCEDURE PfsSalespersonByCustomerIMD@11123340(RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    VAR
      RecRef2@11123309 : RecordRef;
      FieldRef@11123304 : FieldRef;
      Salesperson@11123305 : Record 13;
      xRecCustomer@11123308 : Record 18;
      CustomerGroup@11123307 : Code[10];
    BEGIN
      // NOT IMPLEMENTED IN CURRENT VERSION
    END;

    LOCAL PROCEDURE PfsSalespersonDeterminationIMD@11123344(RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    VAR
      RecRef2@11123307 : RecordRef;
      FieldRef@11123306 : FieldRef;
      Salesperson@11123305 : Record 13;
      StartingDate@11123315 : Date;
      CustomerGroup@11123308 : Code[10];
      Collection@11123310 : Code[10];
      Brand@11123311 : Code[10];
      ItemCategoryCode@11123312 : Code[10];
      ProductGroupCode@11123313 : Code[10];
      SalespersonCode@11123316 : Code[10];
    BEGIN
      // NOT IMPLEMENTED IN CURRENT VERSION
    END;

    LOCAL PROCEDURE SalesPriceIMD@11123325(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      HandleRecordInfo(RecRef,Action);
    END;

    LOCAL PROCEDURE SalesLineDiscountIMD@11123318(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      // HandleRecordInfo(RecRef,Action); // Not processed by default. Reserved for possible extension.
    END;

    LOCAL PROCEDURE CustomerTemplateIMD@11123310(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      UpdateCache(RecRef,Action);
    END;

    LOCAL PROCEDURE CurrencyIMD@11123311(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      UpdateCache(RecRef,Action);
    END;

    LOCAL PROCEDURE VATSetupIMD@11123312(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      UpdateCache(RecRef,Action);
    END;

    LOCAL PROCEDURE GLSetupIMD@11123313(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      UpdateCache(RecRef,Action);
    END;

    LOCAL PROCEDURE DataValidHeaderIMD@11123314(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      UpdateCache(RecRef,Action);
    END;

    LOCAL PROCEDURE ItemUnitOfMeasureIMD@11123316(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      UpdateCache(RecRef,Action);
      HandleRecordInfo(RecRef,Action);
    END;

    LOCAL PROCEDURE UnitOfMeasureIMD@11123320(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      UpdateCache(RecRef,Action);
      HandleRecordInfo(RecRef,Action);
    END;

    LOCAL PROCEDURE ItemCrossRefIMD@11123315(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      HandleRecordInfo(RecRef,Action);
    END;

    LOCAL PROCEDURE ItemTranslationIMD@11123323(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      HandleRecordInfo(RecRef,Action);
    END;

    LOCAL PROCEDURE ItemSubstitutionIMD@11123326(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      HandleRecordInfo(RecRef,Action);
    END;

    LOCAL PROCEDURE ExtTextHeaderIMD@11123328(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      HandleRecordInfo(RecRef,Action);
    END;

    LOCAL PROCEDURE ExtTextLineIMD@11123329(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      HandleRecordInfo(RecRef,Action);
    END;

    LOCAL PROCEDURE ProductGroupIMD@11123349(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      RunActionEvent(RecRef,Action);
    END;

    LOCAL PROCEDURE BOMComponentIMD@11123365(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      HandleRecordInfo(RecRef,Action);
      RunActionEvent(RecRef,Action);
    END;

    LOCAL PROCEDURE RecordLinkIMD@11123331(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    VAR
      RecRef2@11123306 : RecordRef;
      FieldRef@11123304 : FieldRef;
      RecordId@11123305 : RecordID;
    BEGIN
      FieldRef := RecRef.FIELD(2); //Record ID
      RecordId := FieldRef.VALUE;
      RecRef2.GET(RecordId);
      IF RecRef2.NUMBER IN [DATABASE::Item,DATABASE::"Item Variant"] THEN BEGIN
        Action := Action::Modify;
        OnInsertModifyDeleteRename(RecRef2,Action);
      END;
    END;

    LOCAL PROCEDURE ItemCategoryIMD@11123358(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      RunActionEvent(RecRef,Action);
    END;

    LOCAL PROCEDURE SalesHeaderIMD@11123347(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      RunActionEvent(RecRef,Action);
    END;

    LOCAL PROCEDURE SalesLineIMD@11123348(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      RunActionEvent(RecRef,Action);
    END;

    LOCAL PROCEDURE OperationIMD@11123319(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      UpdateCache(RecRef,Action);
    END;

    LOCAL PROCEDURE WebshopIMD@11123321(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      UpdateCache(RecRef,Action);
    END;

    LOCAL PROCEDURE LocalizedTableIMD@11123390(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      UpdateCache(RecRef,Action);
      CASE RecRef.NUMBER OF
        90 :       //"BOM Component"
          BOMComponentIMD(RecRef,Action);
        99000771 : // Production BOM Header
          ProdBOMHeaderIMD(RecRef,Action);
        99000772 : // Production BOM Line
          ProdBOMLineIMD(RecRef,Action);
      END;
    END;

    LOCAL PROCEDURE AddonTableIMD@11123391(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    VAR
      TempParams@11123306 : TEMPORARY Record 11123310;
      Context@11123304 : Codeunit 11123305;
      Dispatcher@11123305 : Codeunit 11123306;
    BEGIN
      CASE RecRef.NUMBER OF
        11006227 : PfsSalespersonDeterminationIMD(RecRef,Action);
        ELSE BEGIN
          UpdateCache(RecRef,Action);
          HandleRecordInfo(RecRef,Action);

          TempParams.InitializeEmptyParams;

          IF Context.PfsAddonIsUsed THEN BEGIN
            Context.SetHandledRecRef(RecRef);
            Context.SetAction(Action);
            Dispatcher.DispatchInternal('PFItemStatusIMD',TempParams);
          END;

          IF Context.LsAddonIsUsed THEN BEGIN
            Context.SetHandledRecRef(RecRef);
            Context.SetAction(Action);
            Dispatcher.DispatchInternal('LSItemStatusLinkIMD',TempParams);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CustomTableIMD@11123392(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      // This function should be implemented, if it is required to handle an extra table in scope of customization.
    END;

    LOCAL PROCEDURE UpdateCache@11123393(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    VAR
      CacheMgt@11123304 : Codeunit 11123323;
    BEGIN
      CASE Action OF
        Action::Insert,Action::Modify : CacheMgt.SetRec(RecRef);
        Action::Delete,Action::Rename : CacheMgt.RemoveRec(RecRef);
      END;
    END;

    PROCEDURE HandleRecordInfo@11123394(VAR RecRef@11123302 : RecordRef;Action@11123303 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      CASE Action OF
        Action::Insert,Action::Modify : InsertRecordInfo(RecRef,Action);
        Action::Delete,Action::Rename : DeleteRecordInfo(RecRef,Action);
      END;
    END;

    LOCAL PROCEDURE DefineItemNo@11123327(RecRef@11123302 : RecordRef) : Code[20];
    VAR
      FieldRef@11123305 : FieldRef;
      ItemNo@11123303 : Code[20];
    BEGIN
      CASE RecRef.NUMBER OF
        DATABASE::Item,
        DATABASE::"Sales Price",
        DATABASE::"Sales Line Discount",
        DATABASE::"Item Unit of Measure",
        DATABASE::"Item Cross Reference",
        DATABASE::"Item Translation",
        DATABASE::"Item Substitution",
        11006110,  // PF Item Vert Component
        11006111 : // PF Item Horz Component
          BEGIN
            FieldRef := RecRef.FIELD(1); // Item No. or No.
            ItemNo := FORMAT(FieldRef);
          END;
        DATABASE::"Item Variant",
        DATABASE::"Extended Text Header",
        DATABASE::"Extended Text Line",
        11006173 : // PF Translation
          BEGIN
            FieldRef := RecRef.FIELD(2); // No.
            ItemNo := FORMAT(FieldRef);
          END;
      END;
      EXIT(ItemNo);
    END;

    LOCAL PROCEDURE UpdateItemVariantInfo@11123330(RecAction@11123302 : Record 11123327;UpdateDateTimeOnly@11123306 : Boolean);
    VAR
      Item@11123303 : Record 27;
      ItemVariant@11123308 : Record 5401;
      ProductInfo@11123307 : Record 11123317;
      Params@11123305 : TEMPORARY Record 11123310;
      CatalogHelper@11123304 : Codeunit 11123318;
      RecRef@11123309 : RecordRef;
    BEGIN
      IF NOT Item.GET(RecAction."Item No.") THEN
        EXIT;

      IF RecAction."Date/Time" <= Item."Last Date/Time Modified" THEN
        EXIT;

      Item."Last Date/Time Modified" := RecAction."Date/Time";
      Item.MODIFY;

      IF UpdateDateTimeOnly THEN BEGIN
        IF ProductInfo.GET(Item."No.") THEN BEGIN
          ProductInfo."Last Date/Time Modified" := RecAction."Date/Time";
          ProductInfo.MODIFY;
        END;
      END ELSE BEGIN
        Params.InitializeEmptyParams;
        CASE RecAction."Table ID" OF
          DATABASE::Item :
            BEGIN
              CatalogHelper.RefreshProductInfo(Item,RecAction.Action,FALSE,Params);
            END;
          DATABASE::"Item Variant" :
            BEGIN
              RecRef.OPEN(RecAction."Table ID");
              IF RecRef.GET(RecAction."Primary Key") THEN BEGIN
                RecRef.SETTABLE(ItemVariant);
                CatalogHelper.RefreshVariantInfo(ItemVariant,RecAction.Action,FALSE,Params);
              END;
              RecRef.CLOSE;
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE ProdBOMHeaderIMD@11123381(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    VAR
      Item@11123305 : Record 27;
      ProdBOMHeader@11123304 : Record 99000771;
      TempParams@11123307 : TEMPORARY Record 11123310;
      CatalogHelper@11123306 : Codeunit 11123318;
      CommonFunct@11123311 : Codeunit 11123309;
      Context@11123314 : Codeunit 11123305;
      ItemRef@11123313 : RecordRef;
      RecRef2@11123308 : RecordRef;
      ItemFieldRef@11123315 : FieldRef;
      KitBOMNo@11123312 : Code[20];
      ItemAction@11123310 : 'Read,Insert,Modify,Delete,Rename';
      KitBOMFieldNo@11123316 : Integer;
    BEGIN
      IF NOT Context.IsNorthAmericaLocalization THEN
        EXIT;

      IF NOT Context.SupportsKitBOM THEN
        EXIT;

      IF Action IN [Action::Modify,Action::Rename] THEN BEGIN
        RecRef2 := RecRef.DUPLICATE;
        RecRef2.SETTABLE(ProdBOMHeader);
        TempParams.INIT;

        KitBOMNo := ProdBOMHeader."No.";
        ItemRef.OPEN(DATABASE::Item);
        KitBOMFieldNo := CommonFunct.GetFieldNoByName(DATABASE::Item,'Kit BOM No.');
        IF ItemRef.FIELDEXIST(KitBOMFieldNo) THEN BEGIN
          ItemFieldRef := ItemRef.FIELD(KitBOMFieldNo);
          ItemFieldRef.SETRANGE(KitBOMNo);
        END;

        IF ItemRef.FINDSET THEN
          REPEAT
            Item.SETVIEW(ItemRef.GETVIEW(FALSE));
            CatalogHelper.RefreshProductInfo(Item,Action,FALSE,TempParams);
            ItemAction := ItemAction::Modify;
            OnInsertModifyDeleteRename(ItemRef,ItemAction);
          UNTIL ItemRef.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ProdBOMLineIMD@11123382(VAR RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    VAR
      ProdBOMLine@11123304 : Record 99000772;
      Item@11123307 : Record 27;
      TempParams@11123306 : TEMPORARY Record 11123310;
      CatalogHelper@11123305 : Codeunit 11123318;
      Context@11123311 : Codeunit 11123305;
      CommonFunct@11123315 : Codeunit 11123309;
      RecRef2@11123308 : RecordRef;
      ItemRef@11123314 : RecordRef;
      ItemFieldRef@11123313 : FieldRef;
      KitBOMNo@11123312 : Code[20];
      KitBOMFieldNo@11123309 : Integer;
      ItemAction@11123310 : 'Read,Insert,Modify,Delete,Rename';
    BEGIN
      IF NOT Context.IsNorthAmericaLocalization THEN
        EXIT;

      IF NOT Context.SupportsKitBOM THEN
        EXIT;

      RecRef2 := RecRef.DUPLICATE;
      RecRef2.SETTABLE(ProdBOMLine);
      TempParams.INIT;

      KitBOMNo := ProdBOMLine."Production BOM No.";
      ItemRef.OPEN(DATABASE::Item);
      KitBOMFieldNo := CommonFunct.GetFieldNoByName(DATABASE::Item,'Kit BOM No.');
      IF ItemRef.FIELDEXIST(KitBOMFieldNo) THEN BEGIN
        ItemFieldRef := ItemRef.FIELD(KitBOMFieldNo);
        ItemFieldRef.SETRANGE(KitBOMNo);
      END;

      IF ItemRef.FINDSET THEN
        REPEAT
          Item.SETVIEW(ItemRef.GETVIEW(FALSE));
          ItemRef.SETTABLE(Item);
          CatalogHelper.RefreshProductInfo(Item,Action,FALSE,TempParams);
          ItemAction := ItemAction::Modify;
          OnInsertModifyDeleteRename(ItemRef,ItemAction);
        UNTIL ItemRef.NEXT = 0;
    END;

    PROCEDURE ChangeLogEnabled@11123400() : Boolean;
    VAR
      ChangeLogSetup@11123302 : Record 402;
    BEGIN
      IF COMPANYNAME = '' THEN
        EXIT(FALSE);

      IF NOT ChangeLogSetupRead THEN BEGIN
        ChangeLogSetupRead := TRUE;
        IF ChangeLogSetup.GET THEN
          ChangeLogActivated := ChangeLogSetup."Change Log Activated";
      END;
      EXIT(ChangeLogActivated);
    END;

    PROCEDURE StandardIntegrationEnabled@11123399() : Boolean;
    VAR
      MarketingSetup@11123302 : Record 5079;
      RecRef@11123303 : RecordRef;
      Fieldref@11123304 : FieldRef;
    BEGIN
      IF COMPANYNAME = '' THEN
        EXIT(FALSE);

      IF NOT SetupRead THEN BEGIN
        SetupRead := TRUE;
        IF MarketingSetup.GET THEN BEGIN
          RecRef.GETTABLE(MarketingSetup);
          IF RecRef.FIELDEXIST(68) THEN BEGIN  // "Enable Connector"
            Fieldref := RecRef.FIELD(68);
            IntegrationActivated := Fieldref.VALUE;
          END;
        END;
      END;
      EXIT(IntegrationActivated);
    END;

    LOCAL PROCEDURE InsertRecordInfo@11123334(RecRef@11123312 : RecordRef;Action@11123303 : 'Read,Insert,Modify,Delete,Rename');
    VAR
      Item@11123315 : Record 27;
      ItemVariant@11123314 : Record 5401;
      xRecItem@11123313 : Record 27;
      RecInfo@11123311 : Record 11123331;
      TempParams@11123310 : TEMPORARY Record 11123310;
      RecRef2@11123309 : RecordRef;
      CatalogHelper@11123308 : Codeunit 11123318;
      RecID@11123307 : RecordID;
      CodeID@11123306 : Code[20];
      TableID@11123305 : Integer;
      InsertNewRecAction@11123304 : Boolean;
      ModifyRequired@11123302 : Boolean;
    BEGIN
      CodeID := DefineCodeID(RecRef);
      IF CodeID = '' THEN
        EXIT;

      RecID := RecRef.RECORDID;
      TableID := RecRef.NUMBER;

      IF ItemRelatedTable(TableID) THEN BEGIN
        TableID := DATABASE::Item;

        IF RecRef.NUMBER = DATABASE::Item  THEN BEGIN
          RecRef2 := RecRef.DUPLICATE;
          RecRef2.SETTABLE(Item);
          CatalogHelper.RefreshProductInfo(Item,Action,FALSE,TempParams);
          IF NOT Item."Visible in Webshop" THEN
            IF xRecItem.GET(CodeID) THEN
              IF NOT xRecItem."Visible in Webshop" THEN
                EXIT;
          RecRef2.CLOSE;
        END;

        IF RecRef.NUMBER = DATABASE::"Item Variant" THEN BEGIN
          RecRef2 := RecRef.DUPLICATE;
          RecRef2.SETTABLE(ItemVariant);
          CatalogHelper.RefreshVariantInfo(ItemVariant,Action,FALSE,TempParams);
          RecRef2.CLOSE;
        END;

        IF RecRef.NUMBER <> DATABASE::Item THEN
          IF Item.GET(CodeID) THEN
            IF NOT Item."Visible in Webshop" THEN
              EXIT;

        RecInfo.RESET;
        RecInfo.SETCURRENTKEY("Table ID","Code ID");
        RecInfo.SETRANGE("Table ID",TableID);
        RecInfo.SETRANGE("Code ID",CodeID);
        InsertNewRecAction := NOT RecInfo.FINDFIRST;
        ModifyRequired := RecInfo."Last Date/Time Modified" <> ROUNDDATETIME(CURRENTDATETIME,60000,'<');
        IF NOT InsertNewRecAction THEN
          IF ModifyRequired THEN BEGIN
          RecInfo."Table ID" := DATABASE::Item;
          RecInfo."Modified Key" := RecID;
          RecInfo."Last Date/Time Modified" := ROUNDDATETIME(CURRENTDATETIME,60000,'<');
          RecInfo."Code ID" := CodeID;
          RecInfo.MODIFY;
        END;
      END ELSE BEGIN
        RecInfo.RESET;
        RecInfo.SETCURRENTKEY("Table ID","Code ID");
        RecInfo.SETRANGE("Table ID",TableID);
        RecInfo.SETRANGE("Code ID",CodeID);
        InsertNewRecAction := NOT RecInfo.FINDFIRST;
        ModifyRequired := RecInfo."Last Date/Time Modified" <> ROUNDDATETIME(CURRENTDATETIME,60000,'<');
        IF NOT InsertNewRecAction THEN
          IF ModifyRequired THEN BEGIN
          RecInfo."Table ID" := TableID;
          RecInfo."Modified Key" := RecID;
          RecInfo."Last Date/Time Modified" := ROUNDDATETIME(CURRENTDATETIME,60000,'<');
          RecInfo."Code ID" := CodeID;
          RecInfo.MODIFY;
        END;
      END;

      IF InsertNewRecAction THEN BEGIN
        RecInfo.INIT;
        RecInfo.ID := CREATEGUID;
        RecInfo."Table ID" := TableID;
        RecInfo."Modified Key" := RecID;
        RecInfo."Last Date/Time Modified" := ROUNDDATETIME(CURRENTDATETIME,60000,'<');
        RecInfo."Code ID" := CodeID;
        RecInfo.INSERT;
      END;
    END;

    LOCAL PROCEDURE DeleteRecordInfo@11123338(RecRef@11123302 : RecordRef;Action@11123303 : 'Read,Insert,Modify,Delete,Rename');
    VAR
      RecInfo@11123306 : Record 11123331;
      CodeID@11123309 : Code[20];
      TableID@11123310 : Integer;
    BEGIN
      TableID := RecRef.NUMBER;
      CASE TableID OF
        DATABASE::Item,
        DATABASE::Customer,
        DATABASE::Contact ,
        DATABASE::"Salesperson/Purchaser" :
          BEGIN
            CodeID := DefineCodeID(RecRef);
      IF CodeID = '' THEN
        EXIT;

      RecInfo.SETRANGE("Table ID",TableID);
      RecInfo.SETRANGE("Code ID",CodeID);
      IF RecInfo.FINDFIRST THEN
        RecInfo.DELETE;
      END;
      END;
    END;

    LOCAL PROCEDURE DefineCodeID@11123335(RecRef@11123302 : RecordRef) : Code[20];
    VAR
      FieldRef@11123305 : FieldRef;
      CodeNo@11123303 : Code[20];
    BEGIN
      CASE RecRef.NUMBER OF
        DATABASE::Item,
        DATABASE::"Sales Price",
        DATABASE::"Sales Line Discount",
        DATABASE::"Item Unit of Measure",
        DATABASE::"Item Cross Reference",
        DATABASE::"Item Translation",
        DATABASE::"Item Substitution",
        DATABASE::"Salesperson/Purchaser",
        DATABASE::Customer,
        DATABASE::Contact ,
        90,        // BOM Component
        11006110,  // PF Item Vert Component
        11006111 : // PF Item Horz Component
          BEGIN
            FieldRef := RecRef.FIELD(1); // Item No.; No.; Code;Parent Item No.
            CodeNo := FORMAT(FieldRef);
          END;
        DATABASE::"Item Variant",
        DATABASE::"Extended Text Header",
        DATABASE::"Extended Text Line" :
          BEGIN
            FieldRef := RecRef.FIELD(2); // No.
            CodeNo := FORMAT(FieldRef);
          END;
      END;
      EXIT(CodeNo);
    END;

    PROCEDURE ItemRelatedTable@11123337(TableNumber@11123303 : Integer) : Boolean;
    BEGIN
      IF TableNumber IN
         [DATABASE::Item,
          DATABASE::"Sales Price",
          DATABASE::"Sales Line Discount",
          DATABASE::"Item Unit of Measure",
          DATABASE::"Item Cross Reference",
          DATABASE::"Item Translation",
          DATABASE::"Item Substitution",
          DATABASE::"Item Variant",
          DATABASE::"Extended Text Header",
          DATABASE::"Extended Text Line",
          DATABASE::"Record Link",
          90,       // BOM Component
          11006110, // PF Item Vert Component
          11006111 // PF Item Horz Component
         ]
      THEN
        EXIT(TRUE);
    END;

    PROCEDURE RunActionEvent@11123350(RecRef@11123303 : RecordRef;Action@11123302 : 'Read,Insert,Modify,Delete,Rename');
    BEGIN
      CASE Action OF
        Action::Insert              : OnAfterInsertEvent(RecRef);
        Action::Modify              : OnAfterModifyEvent(RecRef);
        Action::Rename              : OnAfterRenameEvent(RecRef);
        Action::Delete              : OnAfterDeleteEvent(RecRef);
      END;
    END;

    PROCEDURE OnAfterInsertEvent@11123351(RecRef@11123302 : RecordRef);
    BEGIN
      CASE RecRef.NUMBER OF
        DATABASE::Item              : OnAfterInsertItem(RecRef);
        DATABASE::"Sales Header"    : OnAfterInsertSalesHeader(RecRef);
        DATABASE::"Sales Line"      : OnAfterInsertSalesLine(RecRef);
      END;
    END;

    PROCEDURE OnAfterModifyEvent@11123359(RecRef@11123302 : RecordRef);
    BEGIN
      CASE RecRef.NUMBER OF
        DATABASE::Item              : OnAfterModifyItem(RecRef);
        DATABASE::"Sales Header"    : OnAfterModifySalesHeader(RecRef);
        DATABASE::"Sales Line"      : OnAfterModifySalesLine(RecRef);
        90 : // BOM Component
          OnAfterModifyBOMComponent(RecRef);
      END;
    END;

    PROCEDURE OnAfterRenameEvent@11123360(RecRef@11123302 : RecordRef);
    BEGIN
      CASE RecRef.NUMBER OF
        DATABASE::Item              : OnAfterRenameItem(RecRef);
        DATABASE::"Sales Header"    : OnAfterRenameSalesHeader(RecRef);
        DATABASE::"Sales Line"      : OnAfterRenameSalesLine(RecRef);
      END;
    END;

    PROCEDURE OnAfterDeleteEvent@11123346(RecRef@11123302 : RecordRef);
    BEGIN
      CASE RecRef.NUMBER OF
        DATABASE::Item              : OnAfterDeleteItem(RecRef);
        DATABASE::Customer          : OnAfterDeleteCustomer(RecRef);
        DATABASE::"Sales Header"    : OnAfterDeleteSalesHeader(RecRef);
        DATABASE::"Sales Line"      : OnAfterDeleteSalesLine(RecRef);
        DATABASE::"Product Group"   : OnAfterDeleteProductGroup(RecRef);
        DATABASE::"Item Category"   : OnAfterDeleteItemCategory(RecRef);
      END;
    END;

    PROCEDURE OnAfterInsertItem@11123354(RecRef@11123305 : RecordRef);
    BEGIN
      // For future implementation.
    END;

    PROCEDURE OnAfterModifyItem@11123361(RecRef@11123305 : RecordRef);
    BEGIN
      // For future implementation.
    END;

    PROCEDURE OnAfterRenameItem@11123362(RecRef@11123305 : RecordRef);
    BEGIN
      // For future implementation.
    END;

    PROCEDURE OnAfterDeleteItem@11123352(RecRef@11123305 : RecordRef);
    BEGIN
      DeleteItemRelatedData(RecRef);
    END;

    PROCEDURE OnAfterDeleteCustomer@11123367(RecRef@11123305 : RecordRef);
    BEGIN
      DeleteCustomerRelatedData(RecRef);
    END;

    PROCEDURE OnAfterDeleteSalesHeader@11123343(RecRef@11123305 : RecordRef);
    BEGIN
      RenameSalesDocumentRelatedData(RecRef);
    END;

    PROCEDURE OnAfterDeleteSalesLine@11123342(RecRef@11123305 : RecordRef);
    BEGIN
      // For future implementation.
    END;

    PROCEDURE OnAfterDeleteItemCategory@11123363(RecRef@11123305 : RecordRef);
    BEGIN
      DeleteItemCategoryRelatedData(RecRef);
    END;

    PROCEDURE OnAfterDeleteProductGroup@11123355(RecRef@11123305 : RecordRef);
    BEGIN
      DeleteProductGroupRelatedData(RecRef);
    END;

    PROCEDURE OnAfterModifyBOMComponent@11123333(RecRef@11123302 : RecordRef);
    BEGIN
      ModifyBOMCompRelatedData(RecRef);
    END;

    PROCEDURE DeleteItemRelatedData@11123353(RecRef@11123302 : RecordRef);
    VAR
      RecRef2@11123304 : RecordRef;
      TempItem@11123305 : TEMPORARY Record 27;
      CustAssort@11123303 : Record 11123326;
    BEGIN
      RecRef2 := RecRef.DUPLICATE;
      RecRef2.SETTABLE(TempItem);
      RecRef2.CLOSE;

      CustAssort.SETRANGE(Type,CustAssort.Type::Item);
      CustAssort.SETRANGE(Code,TempItem."No.");
      IF NOT CustAssort.ISEMPTY THEN
        CustAssort.DELETEALL;
    END;

    PROCEDURE DeleteCustomerRelatedData@11123368(RecRef@11123302 : RecordRef);
    VAR
      RecRef2@11123304 : RecordRef;
      TempCustomer@11123305 : TEMPORARY Record 18;
      CustAssort@11123303 : Record 11123326;
    BEGIN
      RecRef2 := RecRef.DUPLICATE;
      RecRef2.SETTABLE(TempCustomer);
      RecRef2.CLOSE;

      CustAssort.SETRANGE("Sales Type",CustAssort."Sales Type"::Customer);
      CustAssort.SETRANGE("Sales Code",TempCustomer."No.");
      IF NOT CustAssort.ISEMPTY THEN
        CustAssort.DELETEALL;
    END;

    PROCEDURE DeleteSalesHeaderRelatedData@11123341(SalesHeader@11123307 : Record 36);
    VAR
      SalesDocHeader@11123303 : Record 11123323;
      SalesHeaderBlob@11123302 : Record 11123324;
    BEGIN
      IF SalesDocHeader.GET(SalesHeader."No.",SalesHeader."Document Type") THEN
        SalesDocHeader.DELETE(TRUE);

      IF SalesHeaderBlob.GET(SalesHeader."Document Type",SalesHeader."No.") THEN
        SalesHeaderBlob.DELETE(TRUE);
    END;

    PROCEDURE DeleteSalesLineRelatedData@11123345(SalesLine@11123305 : Record 37);
    VAR
      SalesDocLine@11123302 : Record 11123325;
    BEGIN
      IF SalesDocLine.GET(SalesLine."Document No.",SalesLine."Document Type",SalesLine."Line No.") THEN
        SalesDocLine.DELETE(TRUE);
    END;

    PROCEDURE DeleteProductGroupRelatedData@11123356(RecRef@11123305 : RecordRef);
    VAR
      RecRef2@11123304 : RecordRef;
      TempProdGroup@11123306 : TEMPORARY Record 5723;
      Item@11123303 : Record 27;
      CustAssort@11123307 : Record 11123326;
    BEGIN
      RecRef2 := RecRef.DUPLICATE;
      RecRef2.SETTABLE(TempProdGroup);
      RecRef2.CLOSE;

      IF TempProdGroup.Code = '' THEN
        EXIT;

      Item.RESET;
      Item.SETRANGE("Item Category Code",TempProdGroup."Item Category Code");
      Item.SETRANGE("Product Group Code",TempProdGroup.Code);
      IF NOT Item.ISEMPTY THEN
        ERROR(Text11123302,TempProdGroup.Code);

      CustAssort.SETRANGE(Type,CustAssort.Type::"Product Group");
      CustAssort.SETRANGE(Code,TempProdGroup.Code);
      CustAssort.SETRANGE("Item Category Code (Internal)",TempProdGroup."Item Category Code");
      IF NOT CustAssort.ISEMPTY THEN
        CustAssort.DELETEALL(TRUE);
    END;

    PROCEDURE DeleteItemCategoryRelatedData@11123357(RecRef@11123305 : RecordRef);
    VAR
      RecRef2@11123304 : RecordRef;
      Item@11123306 : Record 27;
      TempItemCategory@11123303 : TEMPORARY Record 5722;
      CustAssort@11123307 : Record 11123326;
    BEGIN
      RecRef2 := RecRef.DUPLICATE;
      RecRef2.SETTABLE(TempItemCategory);
      RecRef2.CLOSE;

      Item.RESET;
      Item.SETRANGE("Item Category Code",TempItemCategory.Code);
      IF NOT Item.ISEMPTY THEN
        ERROR(Text11123306,TempItemCategory.Code);

      CustAssort.SETRANGE(Type,CustAssort.Type::"Item Category");
      CustAssort.SETRANGE(Code,TempItemCategory.Code);
      IF NOT CustAssort.ISEMPTY THEN
        CustAssort.DELETEALL(TRUE);
    END;

    PROCEDURE RenameSalesDocumentRelatedData@11123366(RecRef@11123306 : RecordRef);
    VAR
      RecRef2@11123305 : RecordRef;
      TempSalesHeader@11123304 : TEMPORARY Record 36;
      NewSalesHeader@11123307 : Record 36;
      SalesDocHeader@11123303 : Record 11123323;
      SalesDocLine@11123309 : Record 11123325;
      SalesDocLine2@11123311 : Record 11123325;
      SalesHeaderBlob@11123302 : Record 11123324;
    BEGIN
      RecRef2 := RecRef.DUPLICATE;
      RecRef2.SETTABLE(TempSalesHeader);
      RecRef2.CLOSE;

      IF ISNULLGUID(TempSalesHeader."Unique Webshop Document Id") THEN
        EXIT;

      IF TempSalesHeader."Document Type" <> TempSalesHeader."Document Type"::Quote THEN
        EXIT;

      WITH NewSalesHeader DO BEGIN
        SETRANGE("Document Type","Document Type"::Order);
        SETRANGE("Unique Webshop Document Id",TempSalesHeader."Unique Webshop Document Id");
        IF NOT FINDFIRST THEN
          EXIT;
      END;

      IF SalesDocHeader.GET(TempSalesHeader."No.",TempSalesHeader."Document Type") THEN BEGIN
        WITH SalesDocLine DO BEGIN
          SETRANGE("Document No.",SalesDocHeader."Document No.");
          SETRANGE("Document Type",SalesDocHeader."Document Type");
          IF FINDSET THEN
            REPEAT
              IF SalesDocLine2.GET("Document No.","Document Type","Line No.") THEN
                SalesDocLine2.RENAME(NewSalesHeader."No.",NewSalesHeader."Document Type",SalesDocLine2."Line No.");
            UNTIL NEXT = 0;
        END;

        SalesDocHeader.RENAME(NewSalesHeader."No.",NewSalesHeader."Document Type");
        IF TempSalesHeader."Document Type" <> NewSalesHeader."Document Type" THEN BEGIN
          SalesDocHeader."Origin. Document No." := TempSalesHeader."No.";
          SalesDocHeader."Origin. Document Type" := TempSalesHeader."Document Type";
          SalesDocHeader.MODIFY(TRUE);
        END;
      END;

      IF SalesHeaderBlob.GET(TempSalesHeader."Document Type",TempSalesHeader."No.") THEN
        SalesHeaderBlob.RENAME(NewSalesHeader."Document Type",NewSalesHeader."No.");
    END;

    PROCEDURE ModifyBOMCompRelatedData@11123336(RecRef@11123302 : RecordRef);
    VAR
      RecRef2@11123304 : RecordRef;
      BOMComponent@11123303 : Record 90;
      xBOMComponent@11123305 : Record 90;
      Visible@11123306 : Boolean;
    BEGIN
      // ------------------------------------------------------------------------------------------
      // The code is commented because this functionality doesn't support current version of NAV
      // ------------------------------------------------------------------------------------------
      // RecRef2 := RecRef.DUPLICATE;
      // RecRef2.SETTABLE(BOMComponent);
      // RecRef2.CLOSE;

      // IF BOMComponent.PfsSubline THEN
      //   EXIT;

      // IF NOT xBOMComponent.GET(BOMComponent."Parent Item No.",BOMComponent."Line No.") THEN
      //   EXIT;

      // IF BOMComponent."Visible in Webshop" = xBOMComponent."Visible in Webshop" THEN
      //   EXIT;

      // Visible := BOMComponent."Visible in Webshop";

      // BOMComponent.RESET;
      // BOMComponent.SETRANGE("Parent Item No.",xBOMComponent."Parent Item No.");
      // BOMComponent.SETRANGE("No.",xBOMComponent."No.");
      // BOMComponent.SETRANGE(PfsSubline,TRUE);
      // BOMComponent.MODIFYALL("Visible in Webshop",Visible);
      // ------------------------------------------------------------------------------------------
    END;

    PROCEDURE OnAfterInsertSalesHeader@11123370(RecRef@11123302 : RecordRef);
    BEGIN
      PreventIMDBasketDoc(RecRef);
    END;

    PROCEDURE OnAfterInsertSalesLine@11123371(RecRef@11123302 : RecordRef);
    BEGIN
      PreventIMDBasketDoc(RecRef);
    END;

    PROCEDURE OnAfterModifySalesHeader@11123374(RecRef@11123302 : RecordRef);
    BEGIN
      PreventIMDBasketDoc(RecRef);
    END;

    PROCEDURE OnAfterModifySalesLine@11123373(RecRef@11123302 : RecordRef);
    BEGIN
      PreventIMDBasketDoc(RecRef);
    END;

    PROCEDURE OnAfterRenameSalesHeader@11123376(RecRef@11123302 : RecordRef);
    BEGIN
      PreventIMDBasketDoc(RecRef);
    END;

    PROCEDURE OnAfterRenameSalesLine@11123375(RecRef@11123302 : RecordRef);
    BEGIN
      PreventIMDBasketDoc(RecRef);
    END;

    PROCEDURE PreventIMDBasketDoc@11123364(RecRef@11123302 : RecordRef);
    VAR
      RecRef2@11123304 : RecordRef;
      TempSalesHeader@11123303 : TEMPORARY Record 36;
      TempSalesLine@11123305 : TEMPORARY Record 37;
      SalesHeader@11123306 : Record 36;
    BEGIN
      // ---------------------------------------------------------------------------------------------------------
      // Not to be implemented in core product. This feature should be provided as (easily implementable)
      // code to partners on demand because of touchpoints with standard business logic.
      // ---------------------------------------------------------------------------------------------------------

      EXIT; // Comment the code and restart Web Service if You want to prevent Insert\Modify\Rename persisted basket documents.

      // ---------------------------------------------------------------------------------------------------------

      CASE RecRef.NUMBER OF
        DATABASE::"Sales Header" :
          BEGIN
            RecRef2 := RecRef.DUPLICATE;
            RecRef2.SETTABLE(TempSalesHeader);
            RecRef2.CLOSE;
            WITH TempSalesHeader DO BEGIN
              IF "Webshop Document State" = "Webshop Document State"::Basket THEN
                IF GUIALLOWED THEN
                  ERROR(Text11123307,"Document Type","No.");
            END;
          END;
        DATABASE::"Sales Line" :
          BEGIN
            RecRef2 := RecRef.DUPLICATE;
            RecRef2.SETTABLE(TempSalesLine);
            RecRef2.CLOSE;
            WITH SalesHeader DO BEGIN
              GET(TempSalesLine."Document Type",TempSalesLine."Document No.");
              IF "Webshop Document State" = "Webshop Document State"::Basket THEN
                IF GUIALLOWED THEN
                  ERROR(Text11123307,"Document Type","No.");
            END;
          END;
      END;
    END;

    PROCEDURE GetApplicationVersion@11123372(VAR AppVersion@11123302 : Text[80]);
    BEGIN
      AppVersion += ',' + GetSanaVersion;
    END;

    PROCEDURE GetSanaVersion@11123383() : Text[20];
    VAR
      Setup@11123302 : Record 11123305;
    BEGIN
      IF NOT Setup.GET THEN BEGIN
        Setup.INIT;
        Setup.INSERT;
      END;
      EXIT(Setup."Sana Version");
    END;

    PROCEDURE UpdateSanaOrderImportInfo@11123379(DocumentType@11123302 : Integer;DocumentNo@11123303 : Code[20]);
    VAR
      SanaAppMgt@11123304 : Codeunit 11123388;
      TableRef@11123305 : RecordRef;
      FieldRefDocumentType@11123306 : FieldRef;
      FieldRefOrderNo@11123307 : FieldRef;
      FieldRefModifiedDate@11123308 : FieldRef;
    BEGIN
      IF SanaAppMgt.SanaCommerceEnabled THEN
        IF SanaAppMgt.CheckTableExists(11123314) THEN BEGIN
          TableRef.OPEN(11123314);
          FieldRefDocumentType := TableRef.FIELD(1);
          FieldRefOrderNo := TableRef.FIELD(2);
          FieldRefDocumentType.SETRANGE(DocumentType);
          FieldRefOrderNo.SETRANGE(DocumentNo);
          IF TableRef.FINDFIRST THEN BEGIN
            FieldRefModifiedDate := TableRef.FIELD(6);
            FieldRefModifiedDate.VALUE(CURRENTDATETIME);
            TableRef.MODIFY;
          END;
          TableRef.CLOSE;
        END;
    END;

    PROCEDURE VerifyLastDateTimeModified@11123377(VAR Item@11123304 : Record 27);
    VAR
      RecRef@11123302 : RecordRef;
      CatalogHelper@11123303 : Codeunit 11123318;
    BEGIN
      RecRef.GETTABLE(Item);
      Item."Last Date/Time Modified" := CatalogHelper.GetLastDateTimeModify(RecRef);
    END;

    PROCEDURE OnBeforeCustomerInsert@11123369(VAR Customer@11123302 : Record 18);
    VAR
      CustomerFunc@11123303 : Codeunit 11123313;
    BEGIN
      IF IsGuestCustomer THEN
        CustomerFunc.ApplySanaGuestNos(Customer);
    END;

    PROCEDURE SetGuestCustomer@11123378(NewValue@11123302 : Boolean);
    BEGIN
      IsGuestCustomerGlobal := NewValue;
    END;

    PROCEDURE IsGuestCustomer@11123380() : Boolean;
    BEGIN
      EXIT(IsGuestCustomerGlobal);
    END;

    BEGIN
    END.
  }
}

