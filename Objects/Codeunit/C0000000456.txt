OBJECT Codeunit 456 Job Queue Management
{
  OBJECT-PROPERTIES
  {
    Date=11/22/17;
    Time=12:00:00 PM;
    Version List=NAVW111.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [External]
    PROCEDURE CreateJobQueueEntry@35(VAR JobQueueEntry@1005 : Record 472);
    VAR
      EarliestStartDateTime@1006 : DateTime;
      ReportOutputType@1004 : Option;
      ObjectTypeToRun@1003 : Option;
      ObjectIdToRun@1001 : Integer;
      NoOfMinutesBetweenRuns@1002 : Integer;
      RecurringJob@1000 : Boolean;
    BEGIN
      NoOfMinutesBetweenRuns := JobQueueEntry."No. of Minutes between Runs";
      EarliestStartDateTime := JobQueueEntry."Earliest Start Date/Time";
      ReportOutputType := JobQueueEntry."Report Output Type";
      ObjectTypeToRun := JobQueueEntry."Object Type to Run";
      ObjectIdToRun := JobQueueEntry."Object ID to Run";

      WITH JobQueueEntry DO BEGIN
        SETRANGE("Object Type to Run",ObjectTypeToRun);
        SETRANGE("Object ID to Run",ObjectIdToRun);
        IF NoOfMinutesBetweenRuns <> 0 THEN
          RecurringJob := TRUE
        ELSE
          RecurringJob := FALSE;
        SETRANGE("Recurring Job",RecurringJob);
        IF NOT ISEMPTY THEN
          EXIT;

        INIT;
        VALIDATE("Object Type to Run",ObjectTypeToRun);
        VALIDATE("Object ID to Run",ObjectIdToRun);
        "Earliest Start Date/Time" := CURRENTDATETIME;
        IF NoOfMinutesBetweenRuns <> 0 THEN BEGIN
          VALIDATE("Run on Mondays",TRUE);
          VALIDATE("Run on Tuesdays",TRUE);
          VALIDATE("Run on Wednesdays",TRUE);
          VALIDATE("Run on Thursdays",TRUE);
          VALIDATE("Run on Fridays",TRUE);
          VALIDATE("Run on Saturdays",TRUE);
          VALIDATE("Run on Sundays",TRUE);
          VALIDATE("Recurring Job",RecurringJob);
          "No. of Minutes between Runs" := NoOfMinutesBetweenRuns;
        END;
        "Maximum No. of Attempts to Run" := 3;
        Priority := 1000;
        "Notify On Success" := TRUE;
        Status := Status::"On Hold";
        "Earliest Start Date/Time" := EarliestStartDateTime;
        "Report Output Type" := ReportOutputType;
        INSERT(TRUE);
      END;
    END;

    [External]
    PROCEDURE DeleteJobQueueEntries@22(ObjectTypeToDelete@1002 : Option;ObjectIdToDelete@1001 : Integer);
    VAR
      JobQueueEntry@1000 : Record 472;
    BEGIN
      WITH JobQueueEntry DO BEGIN
        SETRANGE("Object Type to Run",ObjectTypeToDelete);
        SETRANGE("Object ID to Run",ObjectIdToDelete);
        IF FINDSET THEN
          REPEAT
            IF Status = Status::"In Process" THEN BEGIN
              // Non-recurring jobs will be auto-deleted after execution has completed.
              "Recurring Job" := FALSE;
              MODIFY;
            END ELSE
              DELETE;
          UNTIL NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE StartInactiveJobQueueEntries@1(ObjectTypeToStart@1002 : Option;ObjectIdToStart@1001 : Integer);
    VAR
      JobQueueEntry@1000 : Record 472;
    BEGIN
      WITH JobQueueEntry DO BEGIN
        SETRANGE("Object Type to Run",ObjectTypeToStart);
        SETRANGE("Object ID to Run",ObjectIdToStart);
        SETRANGE(Status,Status::"On Hold");
        IF FINDSET THEN
          REPEAT
            SetStatus(Status::Ready);
          UNTIL NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE SetJobQueueEntriesOnHold@5(ObjectTypeToSetOnHold@1002 : Option;ObjectIdToSetOnHold@1001 : Integer);
    VAR
      JobQueueEntry@1000 : Record 472;
    BEGIN
      WITH JobQueueEntry DO BEGIN
        SETRANGE("Object Type to Run",ObjectTypeToSetOnHold);
        SETRANGE("Object ID to Run",ObjectIdToSetOnHold);
        IF FINDSET THEN
          REPEAT
            SetStatus(Status::"On Hold");
          UNTIL NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE SetStatusToOnHoldIfInstanceInactiveFor@8(PeriodType@1005 : 'Day,Week,Month,Quarter,Year,Accounting Period';NoOfPeriods@1004 : Integer;ObjectTypeToSetOnHold@1001 : Option;ObjectIdToSetOnHold@1000 : Integer) : Boolean;
    BEGIN
      IF NOT UserLogonExistsWithinPeriod(PeriodType,NoOfPeriods) THEN BEGIN
        SetJobQueueEntriesOnHold(ObjectTypeToSetOnHold,ObjectIdToSetOnHold);
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE UserLogonExistsWithinPeriod@2(PeriodType@1000 : 'Day,Week,Month,Quarter,Year,Accounting Period';NoOfPeriods@1002 : Integer) : Boolean;
    VAR
      SessionEvent@1003 : Record 2000000111;
      PeriodFormManagement@1004 : Codeunit 359;
      FromEventDateTime@1005 : DateTime;
    BEGIN
      FromEventDateTime := CREATEDATETIME(PeriodFormManagement.MoveDateByPeriod(TODAY,PeriodType,-NoOfPeriods),TIME);
      SessionEvent.SETRANGE("Event Datetime",FromEventDateTime,CURRENTDATETIME);
      SessionEvent.SETRANGE("Event Type",SessionEvent."Event Type"::Logon);
      // Filter out sessions of type Web Service, Client Service, NAS, Background and Management Client
      SessionEvent.SETFILTER("Client Type",'<%1|>%2',
        SessionEvent."Client Type"::"Web Service",SessionEvent."Client Type"::"Management Client");
      SessionEvent.SETRANGE("Database Name",GetDatabase);
      EXIT(NOT SessionEvent.ISEMPTY);
    END;

    LOCAL PROCEDURE GetDatabase@3() : Text[250];
    VAR
      ActiveSession@1001 : Record 2000000110;
    BEGIN
      ActiveSession.GET(SERVICEINSTANCEID,SESSIONID);
      EXIT(ActiveSession."Database Name");
    END;

    BEGIN
    END.
  }
}

