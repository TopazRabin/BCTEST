OBJECT Codeunit 51971 Codeunit7312EventSubscriber
{
  OBJECT-PROPERTIES
  {
    Date=11/03/21;
    Time=[ 5:05:41 AM];
    Modified=Yes;
    Version List=NAVEVENT,3147,3197,3287,3404;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      WhseItemTrkgExists@1000000000 : Boolean;
      Location@1000000001 : Record 14;
      TempWALShip@1000000002 : TEMPORARY Record 5767;

    [EventSubscriber(Codeunit,51970,CU7312_OnBinContentExists)]
    LOCAL PROCEDURE CU7312_BinContentExists@1000000005(VAR Sender@1000000000 : Codeunit 51970;VAR BinContent@1000000001 : Record 7302);
    BEGIN
      BinContent.ASCENDING(TRUE);
    END;

    [EventSubscriber(Codeunit,51970,CU7312_OnCreateWhseDocument)]
    LOCAL PROCEDURE CU7312_CreateWhseDocument@1000000000(VAR Sender@1000000000 : Codeunit 51970;VAR TempWAL@1000000001 : TEMPORARY Record 5767;SourceType@1000000002 : Integer;MaxNoOfLines@1000000003 : Integer;TempWhseActivLine@1000000004 : TEMPORARY Record 5767;VAR WhseActivHeader@1000000005 : Record 5766;SourceSubType@1000000006 : Option;SourceNo@1000000007 : Code[20];WhseDocType@1000000008 : 'Put-away,Pick,Movement';AssignedID@1000000009 : Code[50];SortPick@1000000010 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking,Action Type';BreakbulkFilter@1000000011 : Boolean);
    BEGIN
      BinRankingFix(TempWAL,SourceType,MaxNoOfLines,TempWhseActivLine,WhseActivHeader,SourceSubType,SourceNo,WhseDocType,
            AssignedID,SortPick,BreakbulkFilter);
    END;

    [EventSubscriber(Codeunit,51970,CU7312_OnAfterCreateWhseActivHeader)]
    LOCAL PROCEDURE CU7312_CreateWhseActivHeader@1000000009(VAR Sender@1000000000 : Codeunit 51970;VAR WhseActivHeader@1000000001 : Record 5766;SourceType@1000000002 : Integer;SourceSubType@1000000003 : Option;SourceNo@1000000004 : Code[20]);
    BEGIN
      WhseActivHeader."Source Type" := SourceType;
      WhseActivHeader."Source Subtype" := SourceSubType;
      WhseActivHeader."Source No." := SourceNo;
      CASE SourceType OF
        DATABASE::"Purchase Line" : WhseActivHeader."Source Document" := WhseActivHeader."Source Document"::"Purchase Return Order";
        DATABASE::"Transfer Line": WhseActivHeader."Source Document" := WhseActivHeader."Source Document"::"Outbound Transfer";
        DATABASE::"Sales Line" : WhseActivHeader."Source Document" := WhseActivHeader."Source Document"::"Sales Order";
        DATABASE::"Assembly Line" : WhseActivHeader."Source Document" := WhseActivHeader."Source Document"::"Assembly Consumption";
      END;
      //WhseActivHeader.MODIFY(TRUE);
    END;

    [EventSubscriber(Codeunit,51970,CU7312_OnCreateWhseDocLine)]
    LOCAL PROCEDURE CU7312_CreateWhseDocLine@1000000011(VAR Sender@1000000000 : Codeunit 51970;VAR DoNotFillQtytoHandle@1000000001 : Boolean;Location@1000000002 : Record 14);
    BEGIN
      IF DoNotFillQtytoHandle = FALSE THEN BEGIN
        IF Location."Enable DMS" THEN
          DoNotFillQtytoHandle := TRUE;
      END;
    END;

    LOCAL PROCEDURE SearchForBinRankedHighest@1000000015("ItemNo."@1000000003 : Code[20];OrderQty@1000000004 : Decimal;LocationCode@1000000005 : Code[10]) : Code[20];
    VAR
      "Bin Contents"@1000000002 : Record 7302;
      LocationLocal@1000000000 : Record 14;
      BinType@1000000001 : Record 7303;
    BEGIN
      //>>RS1.00
      IF LocationLocal.GET(LocationCode) THEN BEGIN
        "Bin Contents".RESET;
        "Bin Contents".SETCURRENTKEY("Location Code","Item No.","Variant Code","Unit of Measure Code","Bin Ranking");
        "Bin Contents".SETRANGE("Location Code", LocationCode);
        "Bin Contents".SETRANGE("Item No.", "ItemNo.");
        "Bin Contents".SETFILTER("Bin Type Code", 'PICKPUT|PICK');
        "Bin Contents".SETFILTER("Bin Ranking", '>%1', LocationLocal."Bulk Pick Ranking (>=)");
        "Bin Contents".SETFILTER  ("Block Movement", '%1|%2', "Bin Contents"."Block Movement"::Inbound, "Bin Contents"."Block Movement"::" ");
        IF "Bin Contents".FINDSET THEN BEGIN
        REPEAT
          "Bin Contents".CALCFIELDS(Quantity,"Pick Qty.");
          IF (("Bin Contents".Quantity - "Bin Contents"."Pick Qty.") >= OrderQty) THEN
            EXIT("Bin Contents"."Bin Code");

        UNTIL "Bin Contents".NEXT=0;
        END;
      END;

      EXIT('');
      //<<RS1.00
    END;

    LOCAL PROCEDURE CheckBinTypeCode@1000000013(BinTypeCode@1000000001 : Code[10]) : Boolean;
    VAR
      BinType@1000000000 : Record 7303;
    BEGIN
      //>>RS1.00
      IF BinType.GET(BinTypeCode) THEN BEGIN
        IF BinType.Pick OR BinType."Put Away" THEN
           EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END ELSE
        EXIT(FALSE);
      //<<RS1.00
    END;

    LOCAL PROCEDURE ReturnBinRanking@1000000002(LocationCode@1000000002 : Code[10];BinCode@1000000000 : Code[20]) : Integer;
    VAR
      BinLocal@1000000001 : Record 7354;
    BEGIN
      //>>RS1.00
      WITH BinLocal DO BEGIN
        IF GET(LocationCode, BinCode) THEN
          EXIT("Bin Ranking")
        ELSE
          EXIT(0);
      END;
      //<<RS1.00
    END;

    LOCAL PROCEDURE SearchForBinRankedHighestThatHASQty@1000000003("ItemNo."@1000000003 : Code[20];OrderQty@1000000004 : Decimal;LocationCode@1000000005 : Code[10];ExcludeBins@1000000006 : Text[250];UseBinRankingFilter@1000000007 : Boolean) : Code[20];
    VAR
      "Bin Contents"@1000000002 : Record 7302;
      LocationLocal@1000000000 : Record 14;
      BinType@1000000001 : Record 7303;
      QtyToPick@1000000008 : Decimal;
      AvailableQtyBase@1000000009 : Decimal;
      ItemLocal@1000000010 : Record 27;
    BEGIN
      //>>RS1.00
      IF LocationLocal.GET(LocationCode) THEN BEGIN
        "Bin Contents".RESET;
        "Bin Contents".SETCURRENTKEY("Location Code","Item No.","Variant Code","Unit of Measure Code","Bin Ranking");
        "Bin Contents".SETRANGE("Location Code", LocationCode);
        "Bin Contents".SETRANGE("Item No.", "ItemNo.");
        "Bin Contents".SETFILTER("Bin Type Code", 'PICKPUT|PICK');
        "Bin Contents".SETFILTER  ("Block Movement", '%1|%2', "Bin Contents"."Block Movement"::Inbound, "Bin Contents"."Block Movement"::" ");

        IF UseBinRankingFilter THEN  //Based on this flag either we search with or with out Bin Ranking.
          "Bin Contents".SETFILTER("Bin Ranking", '>=%1', LocationLocal."Bulk Pick Ranking (>=)");

        IF ExcludeBins <> '' THEN
           "Bin Contents".SETFILTER("Bin Code", ExcludeBins);

        IF "Bin Contents".FINDSET THEN BEGIN
        REPEAT
          "Bin Contents".CALCFIELDS(Quantity,"Pick Qty.");
          QtyToPick := "Bin Contents".CalcQtyAvailToTakeUOM();

          IF QtyToPick > 0 THEN
            EXIT("Bin Contents"."Bin Code");

        UNTIL "Bin Contents".NEXT=0;
        END;
      END;

      EXIT('');
      //<<RS1.00
    END;

    LOCAL PROCEDURE ReturnBinRankingQtytoHandle@1000000004("ItemNo."@1000000005 : Code[20];LocationCode@1000000002 : Code[10];BinCode@1000000000 : Code[20];OrderQty@1000000003 : Decimal) : Decimal;
    VAR
      BinLocal@1000000001 : Record 7354;
      BinContentLocal@1000000004 : Record 7302;
      QtyToPick@1000000007 : Decimal;
      AvailableQtyBase@1000000006 : Decimal;
      LocationLocal@1000000009 : Record 14;
      ItemLocal@1000000008 : Record 27;
    BEGIN
      //>>RS1.00
      WITH BinContentLocal DO BEGIN
        SETRANGE("Location Code", LocationCode);
        SETRANGE("Bin Code", BinCode);
        SETRANGE("Item No.", "ItemNo.");
        IF FINDFIRST THEN BEGIN
          CALCFIELDS(Quantity);
          QtyToPick := BinContentLocal.CalcQtyAvailToTakeUOM();
          IF (QtyToPick-OrderQty >=0) THEN
            EXIT(OrderQty)
          ELSE
            EXIT(QtyToPick);
        END;
      END;
      //<<RS1.00
    END;

    LOCAL PROCEDURE AddNewRecToTempWhseActivLine@1000000010(VAR TempWAL@1000000000 : TEMPORARY Record 5767;NewBinCode@1000000001 : Code[20];VAR OldBinCode@1000000006 : Code[20];NewQty@1000000002 : Decimal;VAR ToLineNo@1000000004 : Integer);
    VAR
      NewLineNo@1000000003 : Integer;
      TempWALCopy@1000000005 : TEMPORARY Record 5767;
      CurrentLineNo@1000000007 : Integer;
      FoundMe@1000000008 : Boolean;
      LineNoToFix@1000000009 : Integer;
      bModified@1000000010 : Boolean;
      iTotDup@1000000011 : Integer;
    BEGIN
      //>>RS1.00
      {
      TempWALCopy.COPY(TempWAL); //Store the current record
      CurrentLineNo:=TempWAL."Line No."; //LIne I'm currently on
      bModified:=FALSE;

      IF OldBinCode <> '' THEN BEGIN
        //Since we are going to remapp the Old Bin with the New Bin we need to delete all references to the NewBin.
        TempWhseActivLineDUP.RESET;
        TempWhseActivLineDUP.SETRANGE("Location Code", TempWAL."Location Code");
        TempWhseActivLineDUP.SETRANGE("Item No.",TempWAL."Item No." );
        TempWhseActivLineDUP.SETRANGE("Bin Code", NewBinCode);
        iTotDup:=TempWhseActivLineDUP.COUNT;
        IF TempWhseActivLineDUP.FINDFIRST THEN BEGIN
          //Record Exists, need to zero out the original one.
           LineNoToFix:=TempWhseActivLineDUP."Line No.";
          TempWAL.SETRANGE("Line No.",TempWhseActivLineDUP."Line No.");
          IF TempWAL.FINDSET THEN BEGIN
             //IF (TempWAL."Item No."= TempWhseActivLineDUP."Item No.") AND (TempWAL."Bin Code"=TempWhseActivLineDUP."Bin Code") THEN BEGIN
              //TempWAL.VALIDATE(Quantity, 0);
              IF (iTotDup >1) OR (OldBinCode <> NewBinCode) THEN
                TempWAL.DELETE;
             //END;
          END;
          //Go back to the records we have.
          TempWAL.SETRANGE("Line No.",CurrentLineNo);
          TempWAL.FINDFIRST;
          TempWAL.SETRANGE("Line No.");
        END;

        // Now Update the Current Bin with the New Bin
        TempWAL."Bin Code":=NewBinCode;
        TempWAL."Bin Ranking"  := ReturnBinRanking(TempWAL."Location Code",NewBinCode);
        TempWAL.VALIDATE(Quantity, NewQty);
        TempWAL.MODIFY;
        OldBinCode:=''; //Blanked out after its updated.

      END ELSE BEGIN
      //Does the New bin also already exists? Check for it.
        TempWhseActivLineDUP.RESET;
        TempWhseActivLineDUP.SETRANGE("Location Code", TempWAL."Location Code");
        TempWhseActivLineDUP.SETRANGE("Item No.",TempWAL."Item No." );
        TempWhseActivLineDUP.SETRANGE("Bin Code", NewBinCode);
        IF TempWhseActivLineDUP.FINDFIRST THEN BEGIN
          //we need to modify the existing record in TempWal
          //Store the last Line No. for TempWal since we need to come back to it.
          IF TempWAL.FIND('-') THEN BEGIN
          REPEAT
            IF (TempWAL."Item No."= TempWhseActivLineDUP."Item No.") AND (TempWAL."Bin Code"=TempWhseActivLineDUP."Bin Code") THEN BEGIN
              TempWAL."Bin Code":=NewBinCode;
              TempWAL."Bin Ranking"  := ReturnBinRanking(TempWAL."Location Code",NewBinCode);
              TempWAL.VALIDATE(Quantity, NewQty);
              TempWAL.MODIFY;
              bModified:=TRUE;
            END;
          UNTIL TempWAL.NEXT=0;
          END;

          IF NOT bModified THEN BEGIN
           // Since we didn't find it in TempWal then we need to insert as a new record anyways
            ToLineNo:=ToLineNo+10;
          TempWAL."Line No.":= ToLineNo;
          TempWAL."Bin Code":=NewBinCode;
          TempWAL."Bin Ranking"  := ReturnBinRanking(TempWAL."Location Code",NewBinCode);
          TempWAL.VALIDATE(Quantity, NewQty);
          TempWAL.INSERT;
          END;
        END ELSE BEGIN

            ToLineNo:=ToLineNo+10;
            TempWAL."Line No.":= ToLineNo;
            TempWAL."Bin Code":=NewBinCode;
            TempWAL."Bin Ranking"  := ReturnBinRanking(TempWAL."Location Code",NewBinCode);
            TempWAL.VALIDATE(Quantity, NewQty);
            TempWAL.INSERT;
        END;
      END;
      }//Not used
      //<<RS1.00
    END;

    LOCAL PROCEDURE ReturnTransferLineQty@1000000012(TransferOrderNo@1000000000 : Code[20];TransferOrderLineNo@1000000001 : Integer) : Decimal;
    VAR
      TransferLine@1000000003 : Record 5741;
    BEGIN
      //>>RS1.00
      IF TransferLine.GET(TransferOrderNo, TransferOrderLineNo) THEN
        EXIT(TransferLine.Quantity)
      ELSE
        EXIT(0);
      //<<RS1.00
    END;

    LOCAL PROCEDURE CheckBinContMeetRankingCriteria@1000000006("ItemNo."@1000000006 : Code[20];LocationCode@1000000004 : Code[10]) : Boolean;
    VAR
      BinContentLocal@1000000001 : Record 7302;
      LocationLocal@1000000003 : Record 14;
    BEGIN
      //>>RS1.00
      //IF LocationLocal.GET(LocationCode) THEN BEGIN  //TPZ3197 PKS
      IF LocationLocal.GET(LocationCode) AND LocationLocal."Enable Bin Ranking for Picks" THEN BEGIN //TPZ3197 PKS
        //-->TPZ3404
        EXIT(TRUE);
        {
        BinContentLocal.RESET;
        BinContentLocal.SETCURRENTKEY("Location Code","Item No.","Variant Code","Unit of Measure Code","Bin Ranking");
        BinContentLocal.SETRANGE("Location Code", LocationCode);
        BinContentLocal.SETRANGE("Item No.", "ItemNo.");
        BinContentLocal.SETFILTER("Bin Type Code", 'PICKPUT|PICK');
        BinContentLocal.SETFILTER  ("Block Movement", '%1|%2', BinContentLocal."Block Movement"::Inbound, BinContentLocal."Block Movement"::" ");
        //Based on this flag either we search with or with out Bin Ranking.
        BinContentLocal.SETFILTER("Bin Ranking", '>=%1', LocationLocal."Bulk Pick Ranking (>=)");
        IF BinContentLocal.FINDFIRST THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
        }
        //<--TPZ3404
      END ELSE
        EXIT(FALSE);
      //<<RS1.00
    END;

    LOCAL PROCEDURE BinRankingFix@1000000008(VAR TempWAL@1000000000 : TEMPORARY Record 5767;SourceType@1000000021 : Integer;MaxNoOfLines@1000000022 : Integer;TempWhseActivLine@1000000023 : TEMPORARY Record 5767;VAR WhseActivHeader@1000000024 : Record 5766;SourceSubType@1000000025 : Option;SourceNo@1000000026 : Code[20];WhseDocType@1000000027 : 'Put-away,Pick,Movement';AssignedID@1000000028 : Code[50];SortPick@1000000029 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking,Action Type';BreakbulkFilter@1000000030 : Boolean);
    VAR
      TempWALCopy@1000000001 : TEMPORARY Record 5767;
      WhseActivLine@1000000002 : Record 5767;
      WhseActiveHeader@1000000019 : Record 5766;
      LineNo@1000000012 : Integer;
      NewBinCode@1000000011 : Code[20];
      OldBinCode@1000000010 : Code[20];
      WHSetup@1000000009 : Record 5769;
      RemainingQty@1000000008 : Decimal;
      StartingQty@1000000018 : Decimal;
      NewQty@1000000007 : Decimal;
      RunBalNewQty@1000000020 : Decimal;
      FromLineNo@1000000006 : Integer;
      ToLineNo@1000000005 : Integer;
      ExcludeBin@1000000004 : Text[250];
      i@1000000003 : Integer;
      TempPickDocNo@1000000013 : Code[20];
      TotNoOfPickDocs@1000000014 : Integer;
      TotalQtyOnAllShipments@1000000016 : Integer;
      NoOfLinesPerPick@1000000015 : Integer;
      PickHeaderNo@1000000017 : Code[20];
      PS@1000000032 : Integer;
      ItemNo@1000000031 : Code[20];
    BEGIN
      IF CheckBinContMeetRankingCriteria(TempWAL."Item No.",TempWAL."Location Code") THEN BEGIN
        //-->3197
        WHSetup.GET();
        IF WHSetup."Buld Pick Ranking Source Doc." <> SourceType THEN //3197
          EXIT;
       //<--3197
      //Loop through the newly created Templines and invoke the Bin Ranking replace feature
      //First Copy all the data into the TempCopy table then loop through that.
        WhseActivLine.RESET;
        WhseActivLine.SETCURRENTKEY("Item No.","Location Code","Activity Type","Bin Type Code","Unit of Measure Code","Variant Code","Breakbulk No.","Action Type","Lot No.","Serial No.","Assemble to Order");//new 3197
        WhseActivLine.SETRANGE("Whse. Document No.",TempWAL."Whse. Document No.");
        //WhseActivLine.SETFILTER("Bin Code", '<>SHIPMENT');
        IF WhseActivLine.FINDSET THEN BEGIN
        REPEAT
          IF WhseActivLine."Bin Code" <> 'SHIPMENT' THEN BEGIN
            IF ItemNo <> WhseActivLine."Item No." THEN BEGIN //3197
              TempWALCopy.INIT;
              TempWALCopy.TRANSFERFIELDS(WhseActivLine);
              TempWALCopy.INSERT;
            END; //3197
            ItemNo := WhseActivLine."Item No.";
            TotalQtyOnAllShipments += WhseActivLine.Quantity;
            IF WhseActivLine."No." <> TempPickDocNo THEN BEGIN
              TotNoOfPickDocs += 1;
              IF TempPickDocNo <> '' THEN//3197
                ItemNo := '';//3197
              TempPickDocNo:=WhseActivLine."No.";
            END;

          //-->3197 Pankaj
          END ELSE BEGIN
            TempWALShip.INIT;
            TempWALShip.TRANSFERFIELDS(WhseActivLine);
            TempWALShip.INSERT;
          END;
          //<--3197 Pankaj
          WhseActivLine.DELETE;
        UNTIL WhseActivLine.NEXT =0;
        END;
        //-->3197
        {
        RemainingQty:= ReturnTransferLineQty(TempWAL."Source No.",TempWAL."Source Line No.");
        StartingQty:=RemainingQty;
        }//<--3197
        NoOfLinesPerPick:=1;
        TempWALCopy.RESET;
        IF TempWALCopy.FINDFIRST THEN BEGIN
          //-->3197
          PS := TempWALCopy.COUNT;
          REPEAT
            RemainingQty:= ReturnTransferLineQty(TempWALCopy."Source No.",TempWALCopy."Source Line No.");
            StartingQty:=RemainingQty;
            NoOfLinesPerPick:=1;
            //<--3197
            //Loop thru temp table
            PickHeaderNo:= TempWALCopy."No.";
            FromLineNo:=TempWALCopy."Line No.";
            ToLineNo:=FromLineNo;
            ExcludeBin:='';
            RunBalNewQty:=0;
            IF WHSetup.GET() THEN BEGIN
              IF WHSetup."Buld Pick Ranking Source Doc." = SourceType THEN BEGIN   //5741 - Outbound Transfer where its only looking at Transfer Orders.
                OldBinCode:=TempWALCopy."Bin Code";
                //Now Loop through and consume the remaining quantity down to 0 and insert records into TempWhseActiveLine
                WHILE RemainingQty>0 DO  BEGIN
                  //Find the next Highest BIN
                  NewBinCode := SearchForBinRankedHighestThatHASQty(TempWALCopy."Item No.",RemainingQty,TempWALCopy."Location Code",ExcludeBin, TRUE);
                  IF NewBinCode = '' THEN //Since we did not get a hit, now search without Bin Ranking Filter to get the first occurrance.
                    NewBinCode := SearchForBinRankedHighestThatHASQty(TempWALCopy."Item No.",RemainingQty,TempWALCopy."Location Code",ExcludeBin, FALSE);
                  IF NewBinCode <> '' THEN BEGIN
                    NewQty:= ReturnBinRankingQtytoHandle(TempWALCopy."Item No.",TempWALCopy."Location Code",NewBinCode,RemainingQty);
                    RunBalNewQty += NewQty;
                    IF (MaxNoOfLines > 0) AND (NoOfLinesPerPick > MaxNoOfLines) THEN BEGIN
                    //Create a New Header and REset the NoofLinesPerPick to 1
                      NoOfLinesPerPick:=1;
                      RunBalNewQty:=0;
                      CreateWhseActivHeader2(TempWhseActivLine."Location Code",PickHeaderNo,WhseActivHeader,SourceType,SourceSubType,SourceNo,
                                              WhseDocType,AssignedID,SortPick,BreakbulkFilter);
                    END;
                    //-->3197
                    {AddNewRecToTempWhseActivLine2(WhseActivLine,PickHeaderNo,NewBinCode,OldBinCode,NewQty,ToLineNo);
                    AddSHIPMENTLineWhseActivLine2(WhseActivLine,PickHeaderNo); //Add Shipment Line 990000
                    }

                    AddNewRecToTempWhseActivLine2(WhseActivLine,PickHeaderNo,NewBinCode,OldBinCode,NewQty,ToLineNo,TempWALCopy);
                    AddSHIPMENTLineWhseActivLine2(WhseActivLine,PickHeaderNo,TempWALCopy."Item No.",ToLineNo); //Add Shipment Line 990000
                    //<--3197 Add Shipment Line 990000
                    IF ExcludeBin = '' THEN
                      ExcludeBin:= '<>' + NewBinCode
                    ELSE
                      ExcludeBin:=ExcludeBin + '&<>' + NewBinCode;
                  END;
                  i+=1; //Count the number or overall Lines accross Whse Shipment
                  RemainingQty:= RemainingQty - NewQty;
                  NoOfLinesPerPick +=1;
                  IF i>20 THEN //Stop the loop cycle and exit since you don't want a runaway loop
                    RemainingQty:=0;
                END; //Do Loop
              END;
            END;
          UNTIL TempWALCopy.NEXT=0; //3197
        END;

        //Now Loop through all the headers and if lines don't exist then delete the header
        WhseActiveHeader.RESET;
        WhseActiveHeader.SETRANGE("Source No.",TempWAL."Source No.");
        IF WhseActiveHeader.FINDSET THEN BEGIN
        REPEAT
          WhseActivLine.RESET;
          WhseActivLine.SETRANGE("Activity Type", WhseActiveHeader.Type);
          WhseActivLine.SETRANGE("No.",WhseActiveHeader."No.");
          IF NOT WhseActivLine.FINDSET THEN
            WhseActiveHeader.DELETE;
        UNTIL WhseActiveHeader.NEXT=0;
        END;
      END;
    END;

    LOCAL PROCEDURE AddNewRecToTempWhseActivLine2@1000000014(VAR TempWAL@1000000000 : Record 5767;PickHeaderNo@1000000013 : Code[20];NewBinCode@1000000001 : Code[20];VAR OldBinCode@1000000006 : Code[20];NewQty@1000000002 : Decimal;VAR ToLineNo@1000000004 : Integer;TempWALNew@1000000016 : TEMPORARY Record 5767);
    VAR
      NewLineNo@1000000003 : Integer;
      TempWALCopy@1000000005 : TEMPORARY Record 5767;
      TempWAL2@1000000012 : Record 5767;
      CurrentLineNo@1000000007 : Integer;
      FoundMe@1000000008 : Boolean;
      LineNoToFix@1000000009 : Integer;
      bModified@1000000010 : Boolean;
      iTotDup@1000000011 : Integer;
      Bin@1000000014 : Record 7354;
      LocationLoc@1000000015 : Record 14;
    BEGIN
      //>>RS1.00
      //TempWALCopy.COPY(TempWAL); //Store the current record
      //Now add the new Bin
      TempWAL.RESET;
      TempWAL.SETRANGE("No.", PickHeaderNo);
      TempWAL.SETRANGE("Location Code", TempWAL."Location Code");
      TempWAL.SETRANGE("Item No.",TempWALNew."Item No." ); //3197
      TempWAL.SETRANGE("Bin Code", NewBinCode);
      IF TempWAL.FINDFIRST THEN BEGIN
        //If you found it already check the quantity and update it
        TempWAL."Bin Ranking"  := ReturnBinRanking(TempWAL."Location Code",NewBinCode);
        TempWAL.VALIDATE(Quantity, NewQty);
        TempWAL."Qty. to Handle (Base)" := 0;  //3197
        TempWAL."Qty. to Handle" := 0;  //3197
        TempWAL.MODIFY;
      END ELSE BEGIN
       //IF it does not exist then insert a new record

        ToLineNo := ToLineNo+10;
        TempWAL2.TRANSFERFIELDS(TempWALNew);
        TempWAL2."No." := PickHeaderNo;
        TempWAL2."Line No.":= ToLineNo;
        TempWAL2."Bin Code":=NewBinCode;
        //-->3197 Pankaj
        IF Bin.GET(TempWAL."Location Code",NewBinCode) THEN
        IF LocationLoc.GET(TempWAL."Location Code") AND LocationLoc."Directed Put-away and Pick" THEN BEGIN
          TempWAL2."Bin Ranking" := Bin."Bin Ranking";
          TempWAL2."Bin Sorting" := Bin."Bin Sorting";
          TempWAL2."Bin Type Code" := Bin."Bin Type Code";
          TempWAL2."Zone Code" := Bin."Zone Code";
        END;
        //<--Pankaj
        TempWAL2."Bin Ranking"  := ReturnBinRanking(TempWAL."Location Code",NewBinCode);
        TempWAL2.VALIDATE(Quantity, NewQty);
        TempWAL2."Qty. to Handle (Base)" := 0;//3197
        TempWAL2."Qty. to Handle" := 0;//3197
        TempWAL2.INSERT;
      END;
      //<<RS1.00
    END;

    LOCAL PROCEDURE AddSHIPMENTLineWhseActivLine2@1000000024(VAR TempWAL@1000000000 : Record 5767;PickHeaderNo@1000000013 : Code[20];ItemNo@1000000014 : Code[20];VAR ToLineNo@1000000015 : Integer);
    VAR
      NewLineNo@1000000003 : Integer;
      TempWALCopy@1000000005 : TEMPORARY Record 5767;
      TempWAL2@1000000012 : Record 5767;
      CurrentLineNo@1000000007 : Integer;
      FoundMe@1000000008 : Boolean;
      LineNoToFix@1000000009 : Integer;
      bModified@1000000010 : Boolean;
      iTotDup@1000000011 : Integer;
      NewQty@1000000001 : Decimal;
      Bin@1000000004 : Record 7354;
      LocationLoc@1000000002 : Record 14;
    BEGIN
      //Loop Through and addup all the quantities
      TempWAL.RESET;
      TempWAL.SETRANGE("No.", PickHeaderNo);
      TempWAL.SETRANGE("Location Code", TempWAL."Location Code");
      TempWAL.SETRANGE("Item No.",ItemNo );
      TempWAL.SETFILTER("Bin Code", '<>SHIPMENT');
      IF TempWAL.FINDSET THEN BEGIN
      REPEAT
        NewQty += TempWAL.Quantity;
      UNTIL TempWAL.NEXT=0;
      END;
      //>>RS1.00
      TempWAL.RESET;
      TempWAL.SETRANGE("No.", PickHeaderNo);
      TempWAL.SETRANGE("Location Code", TempWAL."Location Code");
      TempWAL.SETRANGE("Item No.",ItemNo );
      TempWAL.SETRANGE("Bin Code", 'SHIPMENT');
      IF TempWAL.FINDFIRST THEN BEGIN
        //If you found it already check the quantity and update it
        TempWAL."Bin Ranking"  := ReturnBinRanking(TempWAL."Location Code",'SHIPMENT');
        TempWAL.VALIDATE(Quantity, NewQty);
        TempWAL."Qty. to Handle (Base)" := 0;//3197
        TempWAL."Qty. to Handle" := 0;//3197
        TempWAL.MODIFY;
      END ELSE BEGIN
       //IF it does not exist then insert a new record
        TempWALShip.RESET;
        TempWALShip.SETRANGE("Item No.",ItemNo); //3197
        TempWALShip.FINDFIRST;//3197
        TempWAL2.TRANSFERFIELDS(TempWALShip);//3197
        TempWAL2."No." := PickHeaderNo;
        ToLineNo += 10;
        TempWAL2."Line No.":= ToLineNo;//3197
        TempWAL2."Bin Code":='SHIPMENT';
        //-->3197
        IF Bin.GET(TempWAL."Location Code",TempWAL2."Bin Code") THEN
        IF LocationLoc.GET(TempWAL."Location Code") AND LocationLoc."Directed Put-away and Pick" THEN BEGIN
          TempWAL2."Bin Ranking" := Bin."Bin Ranking";
          TempWAL2."Bin Sorting" := Bin."Bin Sorting";
          TempWAL2."Bin Type Code" := Bin."Bin Type Code";
          TempWAL2."Zone Code" := Bin."Zone Code";
        END;
        //<--3197
        TempWAL2."Bin Ranking"  := ReturnBinRanking(TempWAL."Location Code",'SHIPMENT');
        TempWAL2.VALIDATE(Quantity, NewQty);
        TempWAL2."Qty. to Handle (Base)" := 0;//3197
        TempWAL2."Qty. to Handle" := 0;//3197
        TempWAL2.INSERT;
      END;
      //<<RS1.00
    END;

    LOCAL PROCEDURE CreateWhseActivHeader2@1000000019(LocationCode@1005 : Code[10];VAR PickHeaderNo@1000000000 : Code[20];VAR WhseActivHeader@1000000001 : Record 5766;SourceType@1000000002 : Integer;SourceSubType@1000000003 : Option;SourceNo@1000000004 : Code[20];WhseDocType@1000000005 : 'Put-away,Pick,Movement';AssignedID@1000000006 : Code[50];SortPick@1000000007 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking,Action Type';BreakbulkFilter@1000000008 : Boolean);
    BEGIN
      WhseActivHeader.INIT;
      WhseActivHeader."No." := '';
      //TM BEG 062515
      WhseActivHeader."Source Type" := SourceType;
      WhseActivHeader."Source Subtype" := SourceSubType;
      WhseActivHeader."Source No." := SourceNo;
      CASE SourceType OF
        DATABASE::"Purchase Line" : WhseActivHeader."Source Document" := WhseActivHeader."Source Document"::"Purchase Return Order";
        DATABASE::"Transfer Line": WhseActivHeader."Source Document" := WhseActivHeader."Source Document"::"Outbound Transfer";
        DATABASE::"Sales Line" : WhseActivHeader."Source Document" := WhseActivHeader."Source Document"::"Sales Order";
        DATABASE::"Assembly Line" : WhseActivHeader."Source Document" := WhseActivHeader."Source Document"::"Assembly Consumption";
      END;
      //TM END 062515
      IF WhseDocType = WhseDocType::Movement THEN
        WhseActivHeader.Type := WhseActivHeader.Type::Movement
      ELSE
        WhseActivHeader.Type := WhseActivHeader.Type::Pick;

      WhseActivHeader."Location Code" := LocationCode;
      IF AssignedID <> '' THEN
        WhseActivHeader.VALIDATE("Assigned User ID",AssignedID);
      WhseActivHeader."Sorting Method" := SortPick;
      WhseActivHeader."Breakbulk Filter" := BreakbulkFilter;
      WhseActivHeader.INSERT(TRUE);
      PickHeaderNo:=WhseActivHeader."No.";
    END;

    [EventSubscriber(Codeunit,51970,CU7312_FindBWPickBinComplete)]
    PROCEDURE FindBWPickBinPS@1000000007(VAR Sender@1000000000 : Codeunit 51970;LocationCode@1000000001 : Code[10];ItemNo@1000000002 : Code[20];VariantCode@1000000003 : Code[10];ToBinCode@1000000004 : Code[20];UnitofMeasureCode@1000000005 : Code[10];QtyPerUnitofMeasure@1000000006 : Decimal;DefaultBin@1000000007 : Boolean;CrossDockBin@1000000008 : Boolean;VAR TotalQtyToPick@1000000009 : Decimal;VAR TotalQtyToPickBase@1000000010 : Decimal;VAR TempWhseItemTrackingLine@1000000011 : TEMPORARY Record 6550;WhseSetupLocation@1000000013 : Record 14);
    VAR
      FromBinContent@1002 : Record 7302;
      QtyAvailableBase@1015 : Decimal;
      QtyToPickBase@1001 : Decimal;
      QtytoPick@1009 : Decimal;
      BinCodeFilterText@1003 : Text[250];
      Location@1000000012 : Record 14;
    BEGIN
      {// Basic warehousing
      WITH FromBinContent DO BEGIN
        IF CrossDockBin THEN BEGIN
          SETCURRENTKEY("Location Code","Item No.","Variant Code","Cross-Dock Bin","Qty. per Unit of Measure","Bin Ranking");
          ASCENDING(FALSE);
        END ELSE
          SETCURRENTKEY(Default,"Location Code","Item No.","Variant Code","Bin Code");

        SETRANGE(Default,DefaultBin);
        SETRANGE("Cross-Dock Bin",CrossDockBin);
        SETRANGE("Location Code",LocationCode);
        // >> RF
        //IF PickFromZoneFilter <> '' THEN
          //SETFILTER("Zone Code",PickFromZoneFilter);
        //IF PickFromBinFilter <> '' THEN
          //SETFILTER("Bin Code",PickFromBinFilter);
        // << RF
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Variant Code",VariantCode);
        GetLocation(LocationCode);
        IF Location."Require Pick" AND (Location."Shipment Bin Code" <> '') THEN
          AddToFilterText(BinCodeFilterText,'&','<>',Location."Shipment Bin Code");
        IF Location."Require Put-away" AND (Location."Receipt Bin Code" <> '') THEN
          AddToFilterText(BinCodeFilterText,'&','<>',Location."Receipt Bin Code");
        IF ToBinCode <> '' THEN
          AddToFilterText(BinCodeFilterText,'&','<>',ToBinCode);
        IF BinCodeFilterText <> '' THEN
          SETFILTER("Bin Code",BinCodeFilterText);
        //IF WhseItemTrkgExists THEN BEGIN   //ps
          SETRANGE("Lot No. Filter",TempWhseItemTrackingLine."Lot No.");
          SETRANGE("Serial No. Filter",TempWhseItemTrackingLine."Serial No.");
        //END;
        IF FIND('-') THEN
          REPEAT
            QtyAvailableBase :=
              CalcQtyAvailToPick(0) -
              CalcPickQtyAssigned(LocationCode,ItemNo,VariantCode,'',"Bin Code",TempWhseItemTrackingLine);

            IF QtyAvailableBase >= TotalQtyToPickBase THEN BEGIN
                // >> RF
                // IF SNRequired THEN
                {IF SNRequired OR //ps
                   ItemTrackingMgt.RFSNWhseItemTracking(
                     ItemNo,WhseDocType + 1,WhseShptLine."Source Type")
                THEN}
                // << RF
                QtyAvailableBase := 1;

              UpdateQuantitiesToPick(
                QtyAvailableBase,
                QtyPerUnitofMeasure,QtytoPick,QtyToPickBase,
                QtyPerUnitofMeasure,QtytoPick,QtyToPickBase,
                TotalQtyToPick,TotalQtyToPickBase);

              CreateTempActivityLine(
                LocationCode,"Bin Code",UnitofMeasureCode,QtyPerUnitofMeasure,QtytoPick,QtyToPickBase,1,0);
              CreateTempActivityLine(
                LocationCode,ToBinCode,UnitofMeasureCode,QtyPerUnitofMeasure,QtytoPick,QtyToPickBase,2,0);
            END;
          UNTIL (NEXT = 0) OR (TotalQtyToPickBase = 0);
        IF TotalQtyToPickBase = 0 THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END;
      }
    END;

    [EventSubscriber(Codeunit,51970,CU7312_BinContentExistsComplete)]
    PROCEDURE BinContentExistsPS@1000000001(VAR Sender@1000000001 : Codeunit 51970;VAR BinContent@1000000004 : Record 7302;ItemNo@1000000005 : Code[20];LocationCode@1000000006 : Code[10];UOMCode@1000000007 : Code[10];VariantCode@1000000008 : Code[10];CrossDock@1000000009 : Boolean;LNRequired@1000000010 : Boolean;SNRequired@1000000011 : Boolean;TotalQtyPick@1000000012 : Decimal;WhseSource@1000000013 : 'Pick Worksheet,Shipment,Movement Worksheet,Internal Pick,Production,Assembly';Bin@1000000014 : Record 7354;WhseItemTrkgExistsPara@1000000015 : Boolean;TempWhseItemTrackingLine@1000000016 : Record 6550;TempWhseActivLine@1000000017 : Record 5767;PickFromZoneFilter@1000000018 : Code[250];PickFromBinFilter@1000000019 : Code[250]);
    VAR
      Codeunit7312EventPublisher@1000000000 : Codeunit 51970;
      LocationLoc@1000000003 : Record 14;
      ToAvaQtytoPick@1000000002 : Decimal;
      BinContent1@1000000020 : Record 7302;
      BinFoundLoc@1000000021 : Boolean;
    BEGIN
      //TPZ3147
      IF LocationLoc.GET(LocationCode) AND LocationLoc."Pick Complete Quantity" THEN
      WITH BinContent1 DO BEGIN
        // >> RF
        IF UseFIFO(LocationCode) THEN
          SETCURRENTKEY(
            "Location Code","Item No.","Variant Code","Cross-Dock Bin",
            "Qty. per Unit of Measure","License Plate Ranking")
        ELSE
        // << RF (missing indention)
        SETCURRENTKEY("Location Code","Item No.","Variant Code","Cross-Dock Bin","Qty. per Unit of Measure","Bin Ranking");
        SETRANGE("Location Code",LocationCode);

        // >> RF
        IF PickFromZoneFilter <> '' THEN
          SETFILTER("Zone Code",PickFromZoneFilter);
        IF PickFromBinFilter <> '' THEN
          SETFILTER("Bin Code",PickFromBinFilter);
        // << RF

        SETRANGE("Item No.",ItemNo);
        SETAUTOCALCFIELDS(Quantity);
        SETFILTER(Quantity,'>=%1',TotalQtyPick);
        SETRANGE("Variant Code",VariantCode);
        //SETRANGE("Cross-Dock Bin",CrossDock);
        SETRANGE("Unit of Measure Code",UOMCode);
        SETFILTER("Bin Type Code",'%1|%2','PICK','PICKPUT');
        IF WhseSource = WhseSource::"Movement Worksheet" THEN
          SETFILTER("Bin Ranking",'<%1',Bin."Bin Ranking");
        IF WhseItemTrkgExistsPara THEN BEGIN
          IF LNRequired THEN
            SETRANGE("Lot No. Filter",TempWhseItemTrackingLine."Lot No.")
          ELSE
            SETFILTER("Lot No. Filter",'%1|%2',TempWhseItemTrackingLine."Lot No.",'');
          IF SNRequired THEN
            SETRANGE("Serial No. Filter",TempWhseItemTrackingLine."Serial No.")
          ELSE
            SETFILTER("Serial No. Filter",'%1|%2',TempWhseItemTrackingLine."Serial No.",'');
        END;
        Codeunit7312EventPublisher.CU7312_OnBinContentExists(BinContent1);
        WhseItemTrkgExists := WhseItemTrkgExistsPara;
        BinFoundLoc := FALSE; //05272021
        IF FINDFIRST THEN
          REPEAT
            CalcBinAvailQtyToPick(ToAvaQtytoPick,BinContent1,TempWhseActivLine);
            //IF (ToAvaQtytoPick >= TotalQtyPick) THEN
            IF (ToAvaQtytoPick >= TotalQtyPick) AND NOT BinFoundLoc THEN BEGIN  //05272021 new code NOT BinFoundLoc
              BinContent.SETRANGE("Bin Code","Bin Code");
              BinFoundLoc := TRUE;   //05272021
            END;
          UNTIL NEXT = 0;
        //SETRANGE("Bin Code");
      END;
    END;

    PROCEDURE UseFIFO@1240020001(LocationCode@1240020000 : Code[10]) : Boolean;
    VAR
      Location@1240020001 : Record 14;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location."Use FIFO Pick Takes (LP)");
    END;

    LOCAL PROCEDURE CalcBinAvailQtyToPick@5(VAR QtyToPickBase@1001 : Decimal;VAR BinContent@1002 : Record 7302;VAR TempWhseActivLine@1000 : Record 5767);
    VAR
      AvailableQtyBase@1004 : Decimal;
      Location@1000000000 : Record 14;
    BEGIN
      WITH TempWhseActivLine DO BEGIN
        RESET;
        SETCURRENTKEY(
          "Item No.","Bin Code","Location Code","Action Type",
          "Variant Code","Unit of Measure Code","Breakbulk No.");
        SETRANGE("Item No.",BinContent."Item No.");
        SETRANGE("Bin Code",BinContent."Bin Code");
        SETRANGE("Location Code",BinContent."Location Code");
        SETRANGE("Unit of Measure Code",BinContent."Unit of Measure Code");
        SETRANGE("Variant Code",BinContent."Variant Code");
        {
        IF WhseItemTrkgExists THEN BEGIN
          IF LNRequired THEN
            SETRANGE("Lot No.",TempWhseItemTrackingLine."Lot No.")
          ELSE
            SETFILTER("Lot No.",'%1|%2',TempWhseItemTrackingLine."Lot No.",'');
          IF SNRequired THEN
            SETRANGE("Serial No.",TempWhseItemTrackingLine."Serial No.")
          ELSE
            SETFILTER("Serial No.",'%1|%2',TempWhseItemTrackingLine."Serial No.",'');
        END;
        }
        IF Location.GET AND Location."Allow Breakbulk" THEN BEGIN
          SETRANGE("Action Type","Action Type"::Place);
          SETFILTER("Breakbulk No.",'<>0');
          CALCSUMS("Qty. (Base)");
          AvailableQtyBase := "Qty. (Base)";
        END;

        SETRANGE("Action Type","Action Type"::Take);
        SETRANGE("Breakbulk No.",0);
        CALCSUMS("Qty. (Base)");
      END;

      QtyToPickBase := BinContent.CalcQtyAvailToPick(AvailableQtyBase - TempWhseActivLine."Qty. (Base)");
    END;

    LOCAL PROCEDURE AddToFilterText@53(VAR TextVar@1000 : Text[250];Separator@1001 : Code[1];Comparator@1002 : Code[2];Addendum@1003 : Code[20]);
    BEGIN
      IF TextVar = '' THEN
        TextVar := Comparator + Addendum
      ELSE
        TextVar += Separator + Comparator + Addendum;
    END;

    LOCAL PROCEDURE GetLocation@3(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
       { Location := WhseSetupLocation
      ELSE
        IF Location.Code <> LocationCode THEN
          }
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE CalcPickQtyAssigned@40(LocationCode@1000 : Code[10];ItemNo@1001 : Code[20];VariantCode@1002 : Code[10];UOMCode@1004 : Code[10];BinCode@1005 : Code[20];VAR TempWhseItemTrackingLine@1006 : TEMPORARY Record 6550) PickQtyAssigned : Decimal;
    VAR
      WhseActivLine2@1003 : Record 5767;
    BEGIN
      {WhseActivLine2.COPY(TempWhseActivLine);
      WITH TempWhseActivLine DO BEGIN
        RESET;
        SETCURRENTKEY(
          "Item No.","Bin Code","Location Code","Action Type","Variant Code",
          "Unit of Measure Code","Breakbulk No.","Activity Type","Lot No.","Serial No.");
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Location Code",LocationCode);
        IF Location."Bin Mandatory" THEN BEGIN
          SETRANGE("Action Type","Action Type"::Take);
          IF BinCode <> '' THEN
            SETRANGE("Bin Code",BinCode)
          ELSE
            SETFILTER("Bin Code",'<>%1','');
        END ELSE BEGIN
          SETRANGE("Action Type","Action Type"::" ");
          SETRANGE("Bin Code",'');
        END;
        SETRANGE("Variant Code",VariantCode);
        IF UOMCode <> '' THEN
          SETRANGE("Unit of Measure Code",UOMCode);
        SETRANGE("Activity Type","Activity Type");
        SETRANGE("Breakbulk No.",0);
        IF WhseItemTrkgExists THEN BEGIN
          IF TempWhseItemTrackingLine."Lot No." <> '' THEN
            SETRANGE("Lot No.",TempWhseItemTrackingLine."Lot No.");
          IF TempWhseItemTrackingLine."Serial No." <> '' THEN
            SETRANGE("Serial No.",TempWhseItemTrackingLine."Serial No.");
        END;
        CALCSUMS("Qty. Outstanding (Base)");
        PickQtyAssigned := "Qty. Outstanding (Base)";
      END;
      TempWhseActivLine.COPY(WhseActivLine2);
      EXIT(PickQtyAssigned);
      }
    END;

    LOCAL PROCEDURE CalcQtyAssignedToPick@73(ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];VariantCode@1003 : Code[10];BinCode@1008 : Code[20];LotNo@1004 : Code[20];LNRequired@1005 : Boolean;SerialNo@1006 : Code[20];SNRequired@1007 : Boolean) : Decimal;
    VAR
      WhseActivLine@1000 : Record 5767;
    BEGIN
      {WITH WhseActivLine DO BEGIN
        RESET;
        SETCURRENTKEY(
          "Item No.","Location Code","Activity Type","Bin Type Code",
          "Unit of Measure Code","Variant Code","Breakbulk No.","Action Type");

        SETRANGE("Item No.",ItemNo);
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Activity Type","Activity Type"::Pick);
        SETRANGE("Variant Code",VariantCode);
        SETRANGE("Breakbulk No.",0);
        SETFILTER("Action Type",'%1|%2',"Action Type"::" ","Action Type"::Take);
        SETFILTER("Bin Code",BinCode);
        IF LotNo <> '' THEN
          IF LNRequired THEN
            SETRANGE("Lot No.",LotNo)
          ELSE
            SETFILTER("Lot No.",'%1|%2',LotNo,'');
        IF SerialNo <> '' THEN
          IF SNRequired THEN
            SETRANGE("Serial No.",SerialNo)
          ELSE
            SETFILTER("Serial No.",'%1|%2',SerialNo,'');
        CALCSUMS("Qty. Outstanding (Base)");

        EXIT("Qty. Outstanding (Base)" + CalcBreakbulkOutstdQty(WhseActivLine,LNRequired,SNRequired));
      END;
      }
    END;

    [EventSubscriber(Codeunit,51970,CU7312_CreateTempActivityLineUpdateUOMSpecialAttr)]
    LOCAL PROCEDURE CU7312_CreateTempActivityLineUpdateUOMSpecialAttr@1000000016(VAR Sender@1000000000 : Codeunit 51970;VAR TempWarehouseActLine@1000000001 : Record 5767);
    VAR
      ItemAttributeValueMappingLoc@1000000002 : Record 7505;
      ItemAttributeValueLoc@1000000003 : Record 7501;
    BEGIN
      IF TempWarehouseActLine."Item No." <> '' THEN BEGIN
        TempWarehouseActLine."UOM Special" := TempWarehouseActLine."Unit of Measure Code";
        CLEAR(ItemAttributeValueMappingLoc);
        ItemAttributeValueMappingLoc.SETRANGE("Table ID",DATABASE::Item);
        ItemAttributeValueMappingLoc.SETRANGE("No.",TempWarehouseActLine."Item No.");
        ItemAttributeValueMappingLoc.SETRANGE("Item Attribute ID",1061);
        IF ItemAttributeValueMappingLoc.FINDFIRST THEN
          IF ItemAttributeValueLoc.GET(ItemAttributeValueMappingLoc."Item Attribute ID",ItemAttributeValueMappingLoc."Item Attribute Value ID") THEN
            TempWarehouseActLine."UOM Special" := ItemAttributeValueLoc.Value;
      END;
    END;

    BEGIN
    {
      001 TPZ3147 PKS 05032021 Added code to pass bin ranking and select qty. from one bin
      002 TPZ3197 PKS 06102021 Changed bin ranking to work per location.
      003 TPZ3287 PKS 07232021 Added event publisher to update item attribute to activity line
      004 TPZ3404 PKS 11032021 Added code to not check bin content.
    }
    END.
  }
}

