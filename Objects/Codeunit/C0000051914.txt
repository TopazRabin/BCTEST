OBJECT Codeunit 51914 Codeunit6500EventSubscriber
{
  OBJECT-PROPERTIES
  {
    Date=07/01/20;
    Time=12:00:00 AM;
    Modified=Yes;
    Version List=NAVEVENT;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text004@1000000000 : TextConst 'ENU=is not within your range of allowed posting dates;ESM=no est  dentro del periodo de fechas de registro permitidas;FRC=n''appartient pas … la plage de dates de comptabilisation autoris‚e;ENC=is not within your range of allowed posting dates';

    PROCEDURE CallPostedItemTrackingForm@1000000000(Type@1005 : Integer;Subtype@1004 : Integer;ID@1003 : Code[20];BatchName@1002 : Code[10];ProdOrderLine@1001 : Integer;RefNo@1000 : Integer) : Boolean;
    VAR
      TempItemLedgEntry@1007 : TEMPORARY Record 32;
      ItemTrackingManagement@1000000000 : Codeunit 6500;
    BEGIN
      // Used when calling Item Tracking from Posted Shipments/Receipts:

      RetrieveILEFromShptRcpt(TempItemLedgEntry,Type,Subtype,ID,BatchName,ProdOrderLine,RefNo);
      IF NOT TempItemLedgEntry.ISEMPTY THEN BEGIN
        PAGE.RUNMODAL(PAGE::"Posted Item Tracking Lines",TempItemLedgEntry);
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE RetrieveILEFromShptRcpt@61(VAR TempItemLedgEntry@1010 : TEMPORARY Record 32;Type@1009 : Integer;Subtype@1008 : Integer;ID@1007 : Code[20];BatchName@1006 : Code[10];ProdOrderLine@1005 : Integer;RefNo@1004 : Integer);
    VAR
      ItemEntryRelation@1003 : Record 6507;
      ItemLedgEntry@1002 : Record 32;
      SignFactor@1000 : Integer;
    BEGIN
      // retrieves a data set of Item Ledger Entries (Posted Shipments/Receipts)

      ItemEntryRelation.SETCURRENTKEY("Source ID","Source Type");
      ItemEntryRelation.SETRANGE("Source Type",Type);
      ItemEntryRelation.SETRANGE("Source Subtype",Subtype);
      ItemEntryRelation.SETRANGE("Source ID",ID);
      ItemEntryRelation.SETRANGE("Source Batch Name",BatchName);
      ItemEntryRelation.SETRANGE("Source Prod. Order Line",ProdOrderLine);
      ItemEntryRelation.SETRANGE("Source Ref. No.",RefNo);
      IF ItemEntryRelation.FINDSET THEN BEGIN
        SignFactor := TableSignFactor(Type);
        REPEAT
          ItemLedgEntry.GET(ItemEntryRelation."Item Entry No.");
          TempItemLedgEntry := ItemLedgEntry;
          AddTempRecordToSet(TempItemLedgEntry,SignFactor);
        UNTIL ItemEntryRelation.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE TableSignFactor@1000000001(TableNo@1000 : Integer) : Integer;
    BEGIN
      IF TableNo IN [
                     DATABASE::"Sales Line",
                     DATABASE::"Sales Shipment Line",
                     DATABASE::"Sales Invoice Line",
                     DATABASE::"Purch. Cr. Memo Line",
                     DATABASE::"Prod. Order Component",
                     DATABASE::"Transfer Shipment Line",
                     DATABASE::"Return Shipment Line",
                     DATABASE::"Planning Component",
                     DATABASE::"Posted Assembly Line",
                     DATABASE::"Service Line",
                     DATABASE::"Service Shipment Line",
                     DATABASE::"Service Invoice Line"]
      THEN
        EXIT(-1);

      EXIT(1);
    END;

    LOCAL PROCEDURE AddTempRecordToSet@1000000002(VAR TempItemLedgEntry@1000 : TEMPORARY Record 32;SignFactor@1002 : Integer);
    VAR
      TempItemLedgEntry2@1001 : TEMPORARY Record 32;
    BEGIN
      IF SignFactor <> 1 THEN BEGIN
        TempItemLedgEntry.Quantity *= SignFactor;
        TempItemLedgEntry."Remaining Quantity" *= SignFactor;
        TempItemLedgEntry."Invoiced Quantity" *= SignFactor;
      END;
      RetrieveAppliedExpirationDate(TempItemLedgEntry);
      TempItemLedgEntry2 := TempItemLedgEntry;
      TempItemLedgEntry.RESET;
      TempItemLedgEntry.SETRANGE("Serial No.",TempItemLedgEntry2."Serial No.");
      TempItemLedgEntry.SETRANGE("Lot No.",TempItemLedgEntry2."Lot No.");
      TempItemLedgEntry.SETRANGE("Warranty Date",TempItemLedgEntry2."Warranty Date");
      TempItemLedgEntry.SETRANGE("Expiration Date",TempItemLedgEntry2."Expiration Date");
      IF TempItemLedgEntry.FINDFIRST THEN BEGIN
        TempItemLedgEntry.Quantity += TempItemLedgEntry2.Quantity;
        TempItemLedgEntry."Remaining Quantity" += TempItemLedgEntry2."Remaining Quantity";
        TempItemLedgEntry."Invoiced Quantity" += TempItemLedgEntry2."Invoiced Quantity";
        TempItemLedgEntry.MODIFY;
      END ELSE
        TempItemLedgEntry.INSERT;

      TempItemLedgEntry.RESET;
    END;

    PROCEDURE CallItemTrackingEntryForm@1000000003(SourceType@1001 : ' ,Customer,Vendor,Item';SourceNo@1002 : Code[20];ItemNo@1005 : Code[20];VariantCode@1009 : Code[20];SerialNo@1007 : Code[20];LotNo@1008 : Code[20];LocationCode@1010 : Code[10]);
    VAR
      ItemLedgEntry@1003 : Record 32;
      TempItemLedgEntry@1000 : TEMPORARY Record 32;
      Item@1006 : Record 27;
      Window@1004 : Dialog;
    BEGIN
      // Used when calling Item Tracking from Item, Stockkeeping Unit, Customer, Vendor and information card:
      Window.OPEN(Text004);

      IF SourceNo <> '' THEN BEGIN
        ItemLedgEntry.SETCURRENTKEY("Source Type","Source No.","Item No.","Variant Code");
        ItemLedgEntry.SETRANGE("Source No.",SourceNo);
        ItemLedgEntry.SETRANGE("Source Type",SourceType);
      END ELSE
        ItemLedgEntry.SETCURRENTKEY("Item No.",Open,"Variant Code");

      IF LocationCode <> '' THEN
        ItemLedgEntry.SETRANGE("Location Code",LocationCode);

      IF ItemNo <> '' THEN BEGIN
        Item.GET(ItemNo);
        Item.TESTFIELD("Item Tracking Code");
        ItemLedgEntry.SETRANGE("Item No.",ItemNo);
      END;
      IF SourceType = 0 THEN
        ItemLedgEntry.SETRANGE("Variant Code",VariantCode);
      IF SerialNo <> '' THEN
        ItemLedgEntry.SETRANGE("Serial No.",SerialNo);
      IF LotNo <> '' THEN
        ItemLedgEntry.SETRANGE("Lot No.",LotNo);

      IF ItemLedgEntry.FINDSET THEN
        REPEAT
          IF (ItemLedgEntry."Serial No." <> '') OR (ItemLedgEntry."Lot No." <> '') THEN BEGIN
            TempItemLedgEntry := ItemLedgEntry;
            TempItemLedgEntry.INSERT;
          END
        UNTIL ItemLedgEntry.NEXT = 0;
      Window.CLOSE;
      PAGE.RUNMODAL(PAGE::"Item Tracking Entries",TempItemLedgEntry);
    END;

    PROCEDURE RetrieveAppliedExpirationDate@77(VAR TempItemLedgEntry@1000 : TEMPORARY Record 32);
    VAR
      ItemLedgEntry@1002 : Record 32;
      ItemApplnEntry@1001 : Record 339;
    BEGIN
      WITH TempItemLedgEntry DO BEGIN
        IF Positive THEN
          EXIT;

        ItemApplnEntry.RESET;
        ItemApplnEntry.SETCURRENTKEY("Outbound Item Entry No.","Item Ledger Entry No.","Cost Application");
        ItemApplnEntry.SETRANGE("Outbound Item Entry No.","Entry No.");
        ItemApplnEntry.SETRANGE("Item Ledger Entry No.","Entry No.");
        IF ItemApplnEntry.FINDFIRST THEN BEGIN
          ItemLedgEntry.GET(ItemApplnEntry."Inbound Item Entry No.");
          "Expiration Date" := ItemLedgEntry."Expiration Date";
        END;
      END;
    END;

    BEGIN
    END.
  }
}

