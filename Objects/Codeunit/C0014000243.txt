OBJECT Codeunit 14000243 EShip CU & Rpt Subscr. Funcs
{
  OBJECT-PROPERTIES
  {
    Date=05/26/21;
    Time=[ 3:31:26 PM];
    Modified=Yes;
    Version List=SE0.62;
  }
  PROPERTIES
  {
    Permissions=TableData 6507=i,
                TableData 6550=r,
                TableData 7322=im,
                TableData 7323=i,
                TableData 5769=m,
                TableData 7310=imd,
                TableData 7340=i,
                TableData 7341=i,
                TableData 7342=i,
                TableData 7343=i;
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [EventSubscriber(Codeunit,414,OnAfterReleaseATOs)]
    LOCAL PROCEDURE "ReleaseSalesDocument-CheckNameAddrSalesHeader"@1240020000(VAR SalesHeader@1240020000 : Record 36;VAR SalesLine@1240020002 : Record 37);
    VAR
      SalesSetup@1240020007 : Record 311;
      ShippingAgent@1240020003 : Record 291;
      NameAndAddressMgt@1240020001 : Codeunit 14000709;
      EShipSetGlobalVariable@1240020006 : Codeunit 14000246;
      RunFromEShip@1240020005 : Boolean;
    BEGIN
      // <C414> Subscriber function to codeunit 414 OnAfterReleaseATOs
      SalesSetup.GET;
      RunFromEShip := EShipSetGlobalVariable."ReleaseSalesDoc-RunFromEShipStatus";
      IF SalesSetup."Enable Shipping" AND NOT RunFromEShip THEN
        NameAndAddressMgt.CheckNameAddressSalesHeader(SalesHeader,SalesHeader."Shipping Agent Code");
    END;

    [EventSubscriber(Codeunit,414,OnAfterReleaseSalesDoc)]
    LOCAL PROCEDURE "ReleaseSalesDocument-SendSalesConfirmation"@1240020001(VAR SalesHeader@1240020001 : Record 36;PreviewMode@1240020002 : Boolean;LinesWereModified@1240020003 : Boolean);
    VAR
      SalesSetup@1240020004 : Record 311;
      EMailMgt@1240020000 : Codeunit 14000903;
      EShipSetGlobalVariable@1240020005 : Codeunit 14000246;
      RunFromEShip@1240020006 : Boolean;
    BEGIN
      // <C414> Subscriber function to codeunit 414 OnAfterReleaseSalesDoc
      SalesSetup.GET;
      RunFromEShip := EShipSetGlobalVariable."ReleaseSalesDoc-RunFromEShipStatus";
      //IF SalesSetup."Enable E-Mail" AND NOT RunFromEShip THEN
        //EMailMgt.SendSalesConfirmation(SalesHeader,FALSE,FALSE);
        IF NOT RunFromEShip THEN
         EMailMgt.SendSalesConfirmation(SalesHeader,FALSE,FALSE);
    END;

    [EventSubscriber(Codeunit,415,OnBeforeReleasePurchaseDoc)]
    LOCAL PROCEDURE "ReleasePurchDocument-CheckNameAddrPurchHeader"@1240020002(VAR PurchaseHeader@1240020000 : Record 38;PreviewMode@1240020001 : Boolean);
    VAR
      PurchSetup@1240020002 : Record 312;
      NameAndAddressMgt@1240020004 : Codeunit 14000709;
      EShipSetGlobalVariable@1240020005 : Codeunit 14000246;
      ReleasePurchDocRunFromEship@1240020003 : Boolean;
    BEGIN
      // <C415> Subscriber function to codeunit 415
      ReleasePurchDocRunFromEship := EShipSetGlobalVariable."ReleasePurchaseDoc-RunFromEShipStatus";
      PurchSetup.GET;
      IF PurchSetup."Enable Shipping" AND NOT ReleasePurchDocRunFromEship THEN
        NameAndAddressMgt.CheckNameAddressPurchaseHeader(PurchaseHeader,PurchaseHeader."E-Ship Agent Code");
    END;

    [EventSubscriber(Codeunit,415,OnAfterReleasePurchaseDoc)]
    LOCAL PROCEDURE "ReleasePurchDocument-SendPurchConfirmation"@1240020003(VAR PurchaseHeader@1240020000 : Record 38;PreviewMode@1240020001 : Boolean;LinesWereModified@1240020002 : Boolean);
    VAR
      PurchSetup@1240020003 : Record 312;
      EmailMgt@1240020004 : Codeunit 14000903;
      EShipSetGlobalVariable@1240020005 : Codeunit 14000246;
      ReleasePurchDocRunFromEship@1240020006 : Boolean;
    BEGIN
      // <C415> Subscriber function to codeunit 415
      ReleasePurchDocRunFromEship := EShipSetGlobalVariable."ReleasePurchaseDoc-RunFromEShipStatus";
      PurchSetup.GET;
      IF PurchSetup."Enable E-Mail" AND NOT ReleasePurchDocRunFromEship THEN
        EmailMgt.SendPurchaseConfirmation(PurchaseHeader,FALSE,FALSE);
    END;

    [EventSubscriber(Codeunit,5708,OnBeforeReleaseTransferDoc)]
    LOCAL PROCEDURE "ReleaseTransferDocument-CheckNameAddrTransHeader"@1240020008(VAR TransferHeader@1240020001 : Record 5740);
    VAR
      InvtSetup@1240020000 : Record 313;
      NameAndAddressMgt@1240020004 : Codeunit 14000709;
      EShipSetGlobalVariable@1240020005 : Codeunit 14000246;
      RunFromEship@1240020002 : Boolean;
    BEGIN
      // <C5708> Subscriber function to codeunit 5708
      RunFromEship := EShipSetGlobalVariable."ReleaseTransferDoc-RunFromEShipStatus";
      InvtSetup.GET;
      IF InvtSetup."Enable Shipping" AND NOT RunFromEship THEN
        NameAndAddressMgt.CheckNameAddressTransferHeader(TransferHeader,TransferHeader."Shipping Agent Code");
    END;

    [EventSubscriber(Codeunit,5763,EShipCopyWhseShipLineFilters)]
    LOCAL PROCEDURE "WhsePostShipment-CopyWhseShipLineFilters"@1240020009(VAR ToWhseShptLine@1240020000 : Record 7321;VAR FromWhseShptLine@1240020001 : Record 7321);
    BEGIN
      // Subscriber function to codeunit 5763
      ToWhseShptLine.COPYFILTERS(FromWhseShptLine);
    END;

    [EventSubscriber(Codeunit,5763,EShipSetModifyLine)]
    LOCAL PROCEDURE "WhsePostShipment-SetModifyLine"@1240020015(VAR ModifyLine@1240020000 : Boolean;SalesHeader@1240020001 : Record 36;SalesLine@1240020002 : Record 37);
    VAR
      EShipValidation@1240020003 : Codeunit 14000240;
    BEGIN
      // <C5763> Subscriber function to codeunit 5763
      ModifyLine :=
        ((SalesHeader."Shipping Advice" <> SalesHeader."Shipping Advice"::Complete) OR
         (SalesLine.Type = SalesLine.Type::Item)) AND
        ((SalesLine."Qty. to Ship" <> 0) OR
         (SalesLine."Return Qty. to Receive" <> 0) OR
         (SalesLine."Qty. to Invoice" <> 0)) AND
         NOT EShipValidation."SalesLine-AllowInWarehousePosting"(SalesLine);
    END;

    [EventSubscriber(Codeunit,7324,OnAfterSalesLineModify)]
    LOCAL PROCEDURE "WhseActivityPost-OnAfterSalesLineModify"@1240020004(VAR SalesLine@1240020000 : Record 37);
    VAR
      PackageLine@1240020001 : Record 14000702;
      EShipValidation@1240020003 : Codeunit 14000240;
      PackedQuantity@1240020004 : Decimal;
      SalesLine2@1240020005 : Record 37;
      RemainingPackedQuantity@1240020006 : Decimal;
      LineUpdated@1240020007 : Boolean;
      NoOfLines@1240020008 : Integer;
    BEGIN
      // <C7324> Subscribes to OnAfterSalesLineModify in Codeunit 7324 Whse.-Activity-Post
      IF EShipValidation."SalesLine-AllowInWarehousePosting"(SalesLine) THEN BEGIN
        IF (SalesLine.Pack) AND
           (SalesLine.Type = SalesLine.Type::Resource)
        THEN BEGIN
          NoOfLines := 0;
          SalesLine2.RESET;
          SalesLine2.SETRANGE("Document Type",SalesLine."Document Type");
          SalesLine2.SETRANGE("Document No.",SalesLine."Document No.");
          SalesLine2.SETRANGE(Type,SalesLine.Type);
          SalesLine2.SETRANGE("No.",SalesLine."No.");
          SalesLine2.SETFILTER("Outstanding Quantity",'<>%1',0);
          SalesLine2.FINDFIRST;
          NoOfLines := SalesLine2.COUNT;
          PackedQuantity := 0;
          PackageLine.RESET;
          PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          PackageLine.SETRANGE("Source Type",DATABASE::"Sales Header");
          PackageLine.SETRANGE("Source Subtype",SalesLine."Document Type");
          PackageLine.SETRANGE("Source ID",SalesLine."Document No.");
          PackageLine.SETRANGE("No.",SalesLine."No.");
          IF PackageLine.FIND('-') THEN
            REPEAT
              PackedQuantity := PackedQuantity + PackageLine.Quantity;
            UNTIL PackageLine.NEXT = 0;
          IF NoOfLines = 1 THEN BEGIN
            IF SalesLine."Document Type" = SalesLine."Document Type"::Order THEN
              SalesLine.VALIDATE("Qty. to Ship",PackedQuantity);
            SalesLine.VALIDATE("Qty. to Invoice",PackedQuantity);
            SalesLine.MODIFY;
          END ELSE BEGIN
            SalesLine2.RESET;
            SalesLine2.SETRANGE("Document Type",SalesLine."Document Type");
            SalesLine2.SETRANGE("Document No.",SalesLine."Document No.");
            SalesLine2.SETRANGE(Type,SalesLine.Type);
            SalesLine2.SETRANGE("No.",SalesLine."No.");
            SalesLine2.SETFILTER("Outstanding Quantity",'<>%1',0);
            SalesLine2.FINDFIRST;
            RemainingPackedQuantity := PackedQuantity;
            LineUpdated := FALSE;
            REPEAT
              IF SalesLine."Line No." = SalesLine2."Line No." THEN BEGIN
                CASE TRUE OF
                  RemainingPackedQuantity = SalesLine."Outstanding Quantity",
                  RemainingPackedQuantity < SalesLine."Outstanding Quantity":
                    BEGIN
                      IF SalesLine."Document Type" = SalesLine."Document Type"::Order THEN
                        SalesLine.VALIDATE("Qty. to Ship",RemainingPackedQuantity);
                      SalesLine.VALIDATE("Qty. to Invoice",RemainingPackedQuantity);
                      SalesLine.MODIFY;
                      LineUpdated := TRUE;
                    END;
                  RemainingPackedQuantity > SalesLine."Outstanding Quantity":
                    BEGIN
                      IF SalesLine."Document Type" = SalesLine."Document Type"::Order THEN
                        SalesLine.VALIDATE("Qty. to Ship",SalesLine."Outstanding Quantity");
                      SalesLine.VALIDATE("Qty. to Invoice",SalesLine."Outstanding Quantity");
                      SalesLine.MODIFY;
                      LineUpdated := TRUE;
                    END;
                END;
              END;
              IF LineUpdated THEN
                EXIT
              ELSE
                RemainingPackedQuantity := RemainingPackedQuantity - SalesLine2."Outstanding Quantity";
            UNTIL SalesLine2.NEXT = 0;
          END;
        END ELSE BEGIN
          IF SalesLine."Document Type" = SalesLine."Document Type"::Order THEN
            SalesLine.VALIDATE("Qty. to Ship",SalesLine."Outstanding Quantity");
          SalesLine.VALIDATE("Qty. to Invoice",SalesLine."Outstanding Quantity");
          SalesLine.MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE "CombineShipments-SetEShipFields"@14000701(VAR CurrentSalesInvHeader@14000900 : Record 36;ByTradePartner@1240020000 : Boolean;VAR SalesShipmentHeader@1240020001 : Record 110);
    VAR
      EDISetup@1240020002 : Record 14002367;
      SalesShipmentHeader2@1240020005 : Record 110;
      EDIRecDocHdr@1240020006 : Record 14002358;
      EDIRecordAssocDocument@1240020008 : Codeunit 14002380;
      RecRef@1240020007 : RecordRef;
      OverrideExternalDocNo@1240020003 : Boolean;
      OverrideInternalDocNo@1240020004 : Boolean;
    BEGIN
      // <R295> Global function moved from Report 295 - Combine Shipments

      OverrideExternalDocNo := FALSE;
      OverrideInternalDocNo := FALSE;
      WITH CurrentSalesInvHeader DO BEGIN
        IF ByTradePartner THEN BEGIN
          IF NOT EDISetup.READPERMISSION THEN
            EXIT;
          VALIDATE("External Document No.",SalesShipmentHeader."External Document No.");
          VALIDATE(
            "Invoice for Bill of Lading No.",SalesShipmentHeader."Bill of Lading No.");

          IF SalesShipmentHeader."EDI Order" THEN BEGIN
            "EDI Internal Doc. No." := SalesShipmentHeader."EDI Internal Doc. No.";
            VALIDATE("EDI Trade Partner",SalesShipmentHeader."EDI Trade Partner");
            SalesShipmentHeader2.COPYFILTERS(SalesShipmentHeader);
            IF SalesShipmentHeader2.FIND('-') THEN BEGIN
              "EDI Order" := TRUE;
              "EDI Invoice" := TRUE;
              "EDI Sell-to Code" := SalesShipmentHeader2."EDI Sell-to Code";
              "EDI Ship-to Code" := SalesShipmentHeader2."EDI Ship-to Code";
              IF SalesShipmentHeader2."Ship-to Code" <> '' THEN
                VALIDATE("Ship-to Code",SalesShipmentHeader2."Ship-to Code");
              VALIDATE("Shipping Agent Code",SalesShipmentHeader2."Shipping Agent Code");
              VALIDATE("E-Ship Agent Service",SalesShipmentHeader2."E-Ship Agent Service");
              REPEAT
                IF "EDI Trade Partner" <> SalesShipmentHeader2."EDI Trade Partner" THEN BEGIN
                  "EDI Order" := FALSE;
                  "EDI Internal Doc. No." := '';
                  "EDI Invoice" := FALSE;
                END;
                IF "Ship-to Code" <> SalesShipmentHeader."Ship-to Code" THEN BEGIN
                  CLEAR("Ship-to Code");
                  "EDI Ship-to Code" := '';
                END;
                IF OverrideExternalDocNo = FALSE THEN
                  IF "External Document No." <> SalesShipmentHeader2."External Document No." THEN
                    OverrideExternalDocNo := TRUE;
                IF EDIRecDocHdr.GET(SalesShipmentHeader2."EDI Internal Doc. No.") THEN BEGIN
                  RecRef.OPEN(110);
                  IF RecRef.FIND('-') THEN BEGIN
                    RecRef.GETTABLE(SalesShipmentHeader2);
                    EDIRecordAssocDocument.RecordAssocPostedDoc(
                      EDIRecDocHdr,RecRef,TRUE,"EDI Internal Doc. No.",'810');
                  END;
                  RecRef.CLOSE;
                END;
                IF ("Shipping Agent Code" <> SalesShipmentHeader2."Shipping Agent Code") AND
                   ("E-Ship Agent Service" <> SalesShipmentHeader2."E-Ship Agent Service")
                THEN BEGIN
                  "Shipping Agent Code" := '';
                  "E-Ship Agent Service" := '';
                END;
                IF "EDI Internal Doc. No." <> SalesShipmentHeader2."EDI Internal Doc. No." THEN
                  IF OverrideInternalDocNo = FALSE THEN BEGIN
                    EDISetup.LOCKTABLE;
                    EDISetup.GET;
                    EDISetup."Last Internal Doc. No." := INCSTR(EDISetup."Last Internal Doc. No.");
                    "EDI Internal Doc. No." := EDISetup."Last Internal Doc. No.";
                    EDISetup.MODIFY;
                    OverrideInternalDocNo := TRUE;
                  END;
              UNTIL (SalesShipmentHeader2.NEXT = 0) OR ("EDI Invoice" = FALSE);
            END;
            IF OverrideExternalDocNo THEN
              VALIDATE("External Document No.",('COMBINED' +' ' + FORMAT("Posting Date")));
          END;
        END ELSE BEGIN
          IF SalesShipmentHeader.GETFILTER("Ship-to Code") <> '' THEN
            VALIDATE("Ship-to Code",SalesShipmentHeader.GETFILTER("Ship-to Code"));
          VALIDATE("External Document No.",SalesShipmentHeader.GETFILTER("External Document No."));
          VALIDATE(
            "Invoice for Bill of Lading No.",SalesShipmentHeader.GETFILTER("Bill of Lading No."));

          IF NOT EDISetup.READPERMISSION THEN
            EXIT;
          IF SalesShipmentHeader."EDI Order" THEN BEGIN
            SalesShipmentHeader2.COPYFILTERS(SalesShipmentHeader);
            IF SalesShipmentHeader2.FIND('-') THEN BEGIN
              "EDI Order" := TRUE;
              "EDI Internal Doc. No." := SalesShipmentHeader2."EDI Internal Doc. No.";
              "EDI Trade Partner" := SalesShipmentHeader2."EDI Trade Partner";
              "EDI Sell-to Code" := SalesShipmentHeader2."EDI Sell-to Code";
              "EDI Ship-to Code" := SalesShipmentHeader2."EDI Ship-to Code";
              "EDI Invoice" := TRUE;
              VALIDATE("Shipping Agent Code",SalesShipmentHeader2."Shipping Agent Code");
              VALIDATE("E-Ship Agent Service",SalesShipmentHeader2."E-Ship Agent Service");
              REPEAT
                IF "EDI Internal Doc. No." <> SalesShipmentHeader2."EDI Internal Doc. No." THEN BEGIN
                  "EDI Order" := FALSE;
                  "EDI Internal Doc. No." := '';
                  "EDI Invoice" := FALSE;
                END;
                IF ("Shipping Agent Code" <> SalesShipmentHeader2."Shipping Agent Code") AND
                   ("E-Ship Agent Service" <> SalesShipmentHeader2."E-Ship Agent Service")
                THEN BEGIN
                  "Shipping Agent Code" := '';
                  "E-Ship Agent Service" := '';
                END;
              UNTIL SalesShipmentHeader2.NEXT = 0;
            END;
          END;
        END;
      END;
    END;

    [EventSubscriber(Codeunit,86,OnBeforeInsertSalesOrderHeader)]
    LOCAL PROCEDURE "SalesQuoteToOrder-MoveEMailList"@1240020013(VAR SalesOrderHeader@1240020000 : Record 36;SalesQuoteHeader@1240020001 : Record 36);
    VAR
      SalesSetup@1240020002 : Record 311;
      EMailMgt@1240020003 : Codeunit 14000903;
    BEGIN
      // <C86> Subscriber function to Codeunit 86
      SalesSetup.GET;
      IF SalesSetup."Enable E-Mail" THEN
        EMailMgt.MoveEMailListSalesHeader(SalesQuoteHeader,SalesOrderHeader);
    END;

    [EventSubscriber(Codeunit,87,OnBeforeInsertSalesOrderHeader)]
    LOCAL PROCEDURE "BlanketSalesOrder-MoveEMailList"@1240020014(VAR SalesOrderHeader@1240020000 : Record 36;BlanketOrderSalesHeader@1240020001 : Record 36);
    VAR
      SalesSetup@1240020003 : Record 311;
      EMailMgt@1240020002 : Codeunit 14000903;
    BEGIN
      // <C87> Subscriber function to Codeunit 87
      SalesSetup.GET;
      IF SalesSetup."Enable E-Mail" THEN
        EMailMgt.MoveEMailListSalesHeader(BlanketOrderSalesHeader,SalesOrderHeader);
    END;

    [EventSubscriber(Codeunit,391,OnBeforeSalesShptHeaderModify)]
    LOCAL PROCEDURE "ShipmentHeaderEdit-OnBeforeSalesShptHeaderModify"@1240020017(VAR SalesShptHeader@1240020000 : Record 110;FromSalesShptHeader@1240020001 : Record 110);
    BEGIN
      // <C391> Subscriber function to Codeunit 391 OnBeforeSalesShiptHeaderModify Integration Event
      WITH FromSalesShptHeader DO BEGIN
        SalesShptHeader."E-Mail Shipment Notice Handled" := "E-Mail Shipment Notice Handled";
        SalesShptHeader."Shipment Invoice No." := "Shipment Invoice No.";
      END;
    END;

    [EventSubscriber(Codeunit,90,LAXOnBeforeFinalizePosting)]
    LOCAL PROCEDURE "PurchPost-LAXOnBeforeFinalizePosting"@1240020037(VAR Rec@1240020000 : Record 38;VAR PurchHeader@1240020001 : Record 38;VAR PurchRcptHeader@1240020002 : Record 120;VAR PurchInvHeader@1240020003 : Record 122;VAR PurchCrMemoHeader@1240020004 : Record 124;VAR ReturnShptHeader@1240020005 : Record 6650;EverythingInvoiced@1240020006 : Boolean);
    VAR
      PurchSetup@1240020009 : Record 312;
      Receiving@1240020008 : Codeunit 14000601;
      Shipping@1240020007 : Codeunit 14000701;
    BEGIN
      // <C90> Subscribes to LAXOnBeforeFinalizePosting in Codeunit 90 Purch.-Post
      PurchSetup.GET;
      WITH Rec DO BEGIN
        IF PurchSetup."Enable Receive" AND
           (PurchSetup."E-Receive Locking Optimization" =
            PurchSetup."E-Receive Locking Optimization"::Receiving)
        THEN BEGIN
          Receiving.CheckPurchHeader(PurchHeader);

          IF Receive THEN
            IF ("Document Type" = "Document Type"::Order) OR
               (("Document Type" = "Document Type"::Invoice) AND PurchSetup."Receipt on Invoice")
            THEN
              Receiving.PostReceivePurchHeader(PurchHeader,PurchRcptHeader);
        END;
        IF PurchSetup."Enable Shipping" THEN
          Shipping.BlankBillOFLadingNoPurchHeader(PurchHeader,EverythingInvoiced);
      END;
    END;

    [EventSubscriber(Codeunit,90,OnBeforePurchRcptHeaderInsert)]
    LOCAL PROCEDURE "PurchPost-OnBeforePurchRcptHeaderInsert"@1240020038(VAR PurchRcptHeader@1240020000 : Record 120;VAR PurchaseHeader@1240020001 : Record 38);
    VAR
      PurchSetup@1240020002 : Record 312;
      Receiving@1240020003 : Codeunit 14000601;
    BEGIN
      // <C90> Subscribes to OnBeforePurchRcptHeaderInsert in Codeunit 90 Purch.-Post
      PurchSetup.GET;
      IF PurchSetup."Enable Receive" AND
         (PurchSetup."E-Receive Locking Optimization" =
          PurchSetup."E-Receive Locking Optimization"::Base)
      THEN
        Receiving.CheckPurchHeader(PurchaseHeader);
    END;

    [EventSubscriber(Codeunit,90,OnBeforeReturnShptHeaderInsert)]
    LOCAL PROCEDURE "PurchPost-OnBeforePurchReturnShptHeaderInsert"@1240020035(VAR ReturnShptHeader@1240020000 : Record 6650;VAR PurchHeader@1240020001 : Record 38);
    VAR
      PurchSetup@1240020002 : Record 312;
      Shipping@1240020003 : Codeunit 14000701;
    BEGIN
      // <C90> Subscribes to OnBeforePurchReturnShptHeaderInsert in Codeunit 90 Purch.-Post
      PurchSetup.GET;
      IF PurchHeader.Receive AND PurchSetup."Enable Shipping" THEN
        Shipping.CheckPurchHeader(PurchHeader);
    END;

    [EventSubscriber(Codeunit,90,OnBeforePurchCrMemoHeaderInsert)]
    LOCAL PROCEDURE "PurchPost-OnBeforePurchCrMemoHeaderInsert"@1240020031(VAR PurchCrMemoHdr@1240020000 : Record 124;VAR PurchHeader@1240020001 : Record 38);
    VAR
      PurchSetup@1240020002 : Record 312;
      Shipping@1240020003 : Codeunit 14000701;
    BEGIN
      // <C90> Subscribes to OnBeforePurchCrMemoHeaderInsert in Codeunit 90 Purch.-Post
      PurchSetup.GET;
      IF PurchHeader.Receive AND PurchSetup."Enable Shipping" THEN
        Shipping.CheckPurchHeader(PurchHeader);
    END;

    [EventSubscriber(Codeunit,90,OnBeforePurchInvHeaderInsert)]
    LOCAL PROCEDURE "PurchPost-OnBeforePurchInvoiceHeaderInsert"@1240020028(VAR PurchInvHeader@1240020000 : Record 122;VAR PurchHeader@1240020001 : Record 38);
    VAR
      PurchSetup@1240020002 : Record 312;
      Receiving@1240020003 : Codeunit 14000601;
    BEGIN
      // <C90> Subscribes to OnBeforePurchInvoiceHeaderInsert in Codeunit 90 Purch.-Post
      PurchSetup.GET;
      IF PurchSetup."Enable Receive" AND
         (PurchSetup."E-Receive Locking Optimization" =
          PurchSetup."E-Receive Locking Optimization"::Base)
      THEN
        Receiving.CheckPurchHeader(PurchHeader);
    END;

    [EventSubscriber(Codeunit,90,LAXOnAfterInsertPostedHeaders)]
    LOCAL PROCEDURE "PurchPost-LAXOnAfterInsertPostedHeaders"@1240020033(VAR PurchHeader@1240020001 : Record 38;VAR PurchRcptHeader@1240020006 : Record 120;VAR PurchInvHeader@1240020005 : Record 122;VAR PurchCrMemoHeader@1240020004 : Record 124;VAR ReturnShptHeader@1240020003 : Record 6650);
    VAR
      PurchSetup@1240020002 : Record 312;
      shipping@1240020000 : Codeunit 14000701;
    BEGIN
      // <C90> Subscribes to LAXOnAfterInsertPostedHeaders in Codeunit 90 Purch.-Post
      PurchSetup.GET;
      WITH PurchHeader DO BEGIN
        IF ("Document Type" IN ["Document Type"::"Credit Memo"]) AND
          PurchSetup."Enable Shipping"
        THEN
          shipping.PostPackagePurchCrMemo(PurchHeader,PurchCrMemoHeader);
      END;
    END;

    [EventSubscriber(Codeunit,90,OnAfterFinalizePosting)]
    LOCAL PROCEDURE "PurchPost-OnAfterFinalizePosting"@1240020023(VAR PurchHeader@1240020000 : Record 38;VAR PurchRcptHeader@1240020001 : Record 120;VAR PurchInvHeader@1240020002 : Record 122;VAR PurchCrMemoHdr@1240020003 : Record 124;VAR ReturnShptHeader@1240020004 : Record 6650;VAR GenJnlPostLine@1240020005 : Codeunit 12);
    VAR
      PurchSetup@1240020006 : Record 312;
      EMailMgt@1240020007 : Codeunit 14000903;
      Shipping@1240020008 : Codeunit 14000701;
      EShipValidation@1240020009 : Codeunit 14000240;
      EShipSetGlobalVariable@1240020010 : Codeunit 14000246;
    BEGIN
      // <C90> Subscribes to OnAfterFinalizePosting in Codeunit 90 Purch.-Post
      PurchSetup.GET;
      WITH PurchHeader DO BEGIN
        IF ("Document Type" IN ["Document Type"::"Credit Memo"]) AND
          PurchSetup."Enable Shipping"
        THEN
          Shipping.PostPackagePurchCrMemo(PurchHeader,PurchCrMemoHdr);
      END;

      EShipValidation."PurchaseHeader-DeleteShippingAgentOptionPage"(PurchHeader);
      WITH PurchHeader DO BEGIN
        IF Ship AND PurchSetup."Enable Shipping" THEN
          CASE "Document Type" OF
            "Document Type"::"Credit Memo":
              Shipping.CreateBOLPostPurchCrMemo(PurchCrMemoHdr);
            "Document Type"::"Return Order":
              Shipping.CreateBOLPostPurchReturnOrder(ReturnShptHeader);
          END;

        IF Receive AND PurchSetup."Enable E-Mail" THEN
          EMailMgt.SendPurchaseReceiptNotice(PurchRcptHeader,FALSE,FALSE);

        IF Invoice AND PurchSetup."Enable E-Mail" THEN
          EMailMgt.SendPurchaseInvoiceNotice(PurchInvHeader,FALSE,FALSE);
      END;
    END;

    [EventSubscriber(Codeunit,90,OnAfterPurchRcptHeaderInsert)]
    LOCAL PROCEDURE "PurchPost-OnAfterPurchRcptHeaderInsert"@1240020018(VAR PurchRcptHeader@1240020000 : Record 120;VAR PurchaseHeader@1240020001 : Record 38);
    VAR
      PurchSetup@1240020002 : Record 312;
      Receiving@1240020003 : Codeunit 14000601;
    BEGIN
      // <C90> Subscribes to OnAfterPurchRcptHeaderInsert in Codeunit 90 Purch.-Post
      PurchSetup.GET;
      WITH PurchaseHeader DO BEGIN
        IF ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
          PurchSetup."Enable Receive" AND
          (PurchSetup."E-Receive Locking Optimization" =
          PurchSetup."E-Receive Locking Optimization"::Base)
        THEN
          Receiving.PostReceivePurchHeader(PurchaseHeader,PurchRcptHeader);
      END;
    END;

    [EventSubscriber(Codeunit,90,OnAfterReturnShptHeaderInsert)]
    LOCAL PROCEDURE "PurchPost-OnAfterReturnShptHeaderInsert"@1240020019(VAR ReturnShptHeader@1240020000 : Record 6650;VAR PurchHeader@1240020001 : Record 38);
    VAR
      PurchSetup@1240020002 : Record 312;
      Shipping@1240020003 : Codeunit 14000701;
    BEGIN
      // <C90> Subscribes to OnAfterReturnShptHeaderInsert in Codeunit 90 Purch.-Post
      PurchSetup.GET;
      WITH PurchHeader DO BEGIN
        IF ("Document Type" IN ["Document Type"::"Return Order"]) AND
           PurchSetup."Enable Shipping"
        THEN
          Shipping.PostPackagePurchReturnOrder(PurchHeader,ReturnShptHeader);
      END;
    END;

    [EventSubscriber(Codeunit,90,OnAfterPurchCrMemoHeaderInsert)]
    LOCAL PROCEDURE "PurchPost-OnAfterPurchCrMemoHeaderInsert"@1240020027(VAR PurchCrMemoHdr@1240020000 : Record 124;VAR PurchHeader@1240020001 : Record 38);
    VAR
      PurchSetup@1240020003 : Record 312;
      Shipping@1240020002 : Codeunit 14000701;
    BEGIN
      // <C90> Subscribes to OnAfterPurchCrMemoHeaderInsert in Codeunit 90 Purch.-Post
      PurchSetup.GET;
      WITH PurchHeader DO BEGIN
        IF ("Document Type" IN ["Document Type"::"Credit Memo"]) AND
          PurchSetup."Enable Shipping"
        THEN
          Shipping.PostPackagePurchCrMemo(PurchHeader,PurchCrMemoHdr);
      END;
    END;

    [EventSubscriber(Codeunit,6620,OnAfterCopySalesDocument)]
    LOCAL PROCEDURE "CopyDocumentMgt-CopySalesDoc"@1240020005(FromDocumentType@1240020000 : Option;FromDocumentNo@1240020001 : Code[20];VAR ToSalesHeader@1240020002 : Record 36);
    BEGIN
      // <CU6620> Subscriber function to Codeunit 6620 OnAfterCopySalesDocument
      IF ToSalesHeader.ISTEMPORARY THEN
        EXIT;
      ToSalesHeader."Invoice for Bill of Lading No." := '';
      ToSalesHeader."Invoice for Shipment No." := '';
      ToSalesHeader."Shipment Invoice Override" := FALSE;
      ToSalesHeader."E-Mail Confirmation Handled" := FALSE;
      ToSalesHeader.MODIFY;
    END;

    BEGIN
    END.
  }
}

