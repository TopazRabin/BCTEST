OBJECT Codeunit 23044557 WHI Upgrade-Install Management
{
  OBJECT-PROPERTIES
  {
    Date=02/13/20;
    Time=[ 8:58:26 AM];
    Version List=WHI2.4.7684.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN

            GetCurrentVersion();

            ClearSoftwareBlobs();

            sBaseDownloadURL := GetConfigurationPath(recWHISetup.GetExpectedVersion);

            IF NOT bShowDialog THEN BEGIN
              Window.OPEN(tcInstall_Dialog_Placeholder);
              Window.UPDATE(1,tcInstall_Msg_Pending);

              IF bSkipInstallBaseConfiguration THEN
                Window.UPDATE(2,tcInstall_Msg_Skipped)
              ELSE
                Window.UPDATE(2,tcInstall_Msg_Pending);

              IF bSkipInstallTranslations THEN
                Window.UPDATE(3,tcInstall_Msg_Skipped)
              ELSE
                Window.UPDATE(3,tcInstall_Msg_Pending);

              IF bSkipInstallIcons THEN
                Window.UPDATE(4,tcInstall_Msg_Skipped)
              ELSE
                Window.UPDATE(4,tcInstall_Msg_Pending);

              IF bSkipInstallApplicationXML THEN
                Window.UPDATE(5,tcInstall_Msg_Skipped)
              ELSE
                Window.UPDATE(5,tcInstall_Msg_Pending);

              IF bSkipInstallSoftware THEN
                Window.UPDATE(6,tcInstall_Msg_Skipped)
              ELSE
                Window.UPDATE(6,tcInstall_Msg_Pending);
            END;

            IF sCurrentVersion = '' THEN BEGIN
              IF NOT bShowDialog THEN
                Window.UPDATE(1,recWHISetup.GetExpectedVersion);
            END ELSE BEGIN
              IF NOT bInstallOptionsSet THEN BEGIN
                bSkipInstallBaseConfiguration := TRUE;
              END;

              // these calls cascade though one by one
              // if the installed version is already higher the function will be skipped
              UpgradeToVersion2_0_0();
              UpgradeToVersion2_0_1();
            END;


            // will be skipped on 'updates' by default but can be re-applied if needed
            ApplyBaseConfigurationRapidStart();

            //
            // these actions will always occur regardless of version
            //
            UpdateTranslations();
            UpdateIcons();
            UpdateApplicationXML();
            UpdateHandheldSoftware();
            SetInstalledVersion();


            IF NOT bShowDialog THEN BEGIN
              Window.CLOSE();
              MESSAGE(tcInstall_Msg_Complete);
            END;
          END;

  }
  CODE
  {
    VAR
      recWHISetup@1000000002 : Record 23044502;
      cuAutoSetup@1000000013 : Codeunit 23044590;
      Window@1000000008 : Dialog;
      sCurrentVersion@1000000001 : Text;
      sBaseDownloadURL@1000000003 : Text;
      bShowDialog@1000000000 : Boolean;
      tcInstall_Dialog_Placeholder@1000000004 : TextConst 'ENU=Installing Version: #1##########\Packages: #2##########\Translations: #3##########\Icons: #4##########\Applications: #5##########\Device Software: #6##########;ENC=Import Package: #1##########\Icons: #2##########\Application XML: #3##########\Device Software: #4##########';
      tcInstall_Msg_Pending@1000000007 : TextConst 'ENU=Pending;ESM=Pendiente;FRC=En Attendant;ENC=Pending';
      tcInstall_Msg_Skipped@100000005 : TextConst 'ENU=Skipped';
      tcInstall_Msg_Task_Complete@1000000006 : TextConst 'ENU=Complete!;ESM=Terminar!;FRC=Parachever!;ENC=Complete!';
      tcInstall_Msg_InProgress@1000000005 : TextConst 'ENU=In Progress...';
      tcInstall_Msg_Complete@1000000009 : TextConst 'ENU=Installation Complete!;ESM=Instalaci¢n Completa!;FRC=Installation Compläte!;ENC=Installation Complete!';
      tcDefaultConfigurationPath@1000000011 : TextConst 'ENU=http://10.50.0.109:8081/WHIDev/Releases';
      bSkipInstallBaseConfiguration@100000004 : Boolean;
      bSkipInstallTranslations@100000003 : Boolean;
      bSkipInstallApplicationXML@100000002 : Boolean;
      bSkipInstallIcons@100000001 : Boolean;
      bSkipInstallSoftware@100000000 : Boolean;
      bInstallOptionsSet@100000006 : Boolean;

    PROCEDURE SetInstallOptions@100000001(pbShowDialog@100000000 : Boolean;pbSkipInstallBaseConfiguration@100000001 : Boolean;pbSkipInstallTranslations@100000002 : Boolean;pbSkipInstallApplicationXML@100000003 : Boolean;pbSkipInstallIcons@100000004 : Boolean;pbSkipInstallSoftware@100000005 : Boolean);
    BEGIN
      bShowDialog := pbShowDialog;
      bSkipInstallBaseConfiguration := pbSkipInstallBaseConfiguration;
      bSkipInstallTranslations := pbSkipInstallTranslations;
      bSkipInstallIcons := pbSkipInstallIcons;
      bSkipInstallApplicationXML := pbSkipInstallApplicationXML;
      bSkipInstallSoftware := pbSkipInstallSoftware;
      bInstallOptionsSet := TRUE;
    END;

    PROCEDURE GetCurrentVersion@1000000005();
    BEGIN
      //<FUNC>
      //  Determine the currently installed version.
      //  Blank if not installed.
      //  Defaults to 1.8.6 if pre-2.0.0
      //</FUNC>

      IF NOT recWHISetup.GET THEN BEGIN
        recWHISetup.INIT;
        recWHISetup.INSERT(TRUE);
      END;

      sCurrentVersion := recWHISetup."Installed Version";
      IF sCurrentVersion = '' THEN BEGIN
        IF NOT IsNewInstallation() THEN
          sCurrentVersion := '1.8.6';
      END;
    END;

    PROCEDURE GetConfigurationPath@1000000015(psVersion@1000000001 : Text) : Text;
    VAR
      lsConfigurationPath@1000000000 : Text;
    BEGIN
      lsConfigurationPath := recWHISetup."Configuration Path";
      IF lsConfigurationPath = '' THEN
        lsConfigurationPath := tcDefaultConfigurationPath;

      lsConfigurationPath := lsConfigurationPath + '/' + psVersion;

      EXIT(lsConfigurationPath);
    END;

    LOCAL PROCEDURE IsNewInstallation@1000000003() : Boolean;
    VAR
      lrecColumns@1000000000 : Record 23044512;
    BEGIN
      //<FUNC>
      //  Wrapper to determine if previously installed or not.
      //  Note: Not using "Installed Version" as did not exist prior to 2.0.0
      //</FUNC>
      EXIT(lrecColumns.FINDSET(FALSE));
    END;

    LOCAL PROCEDURE UpgradeToVersion2_0_0@1000000001();
    BEGIN
      //<FUNC>
      // Upgrades an 'existing' installation to 2.0.0 from 1.8
      //</FUNC>

      IF sCurrentVersion >= '2.0.0.0' THEN
        EXIT;

      // too many changes to try and 'merge' in.
      //ProcessNewInstall();
    END;

    LOCAL PROCEDURE UpgradeToVersion2_0_1@1000000002();
    BEGIN
      // placeholder for example/thinking

      IF sCurrentVersion >= '2.0.1.0' THEN
        EXIT;

      // do stuff
      IF NOT bShowDialog THEN
        Window.UPDATE(1,'2.0.1');
    END;

    LOCAL PROCEDURE ApplyBaseConfigurationRapidStart@100000003();
    BEGIN
      IF bSkipInstallBaseConfiguration THEN
        EXIT;

      IF NOT bShowDialog THEN
        Window.UPDATE(2,tcInstall_Msg_InProgress);

      cuAutoSetup.ApplyRapidStartFiles(sBaseDownloadURL, 'iwx_setup.rapidstart');
      cuAutoSetup.ApplyRapidStartFiles(sBaseDownloadURL, 'whi_setup.rapidstart');

      recWHISetup."Item Inquiry Application" := 'ITEM_INQ_DOC';
      recWHISetup."Bin Inquiry Application" := 'BIN_INQ_DOC';
      recWHISetup."Default Date Format" := 'M/d/yy,yyMMdd,MM/dd/yy,dd/MM/yyyy,yyyy-MM-dd';
      recWHISetup.MODIFY;


      IF NOT bShowDialog THEN
        Window.UPDATE(2,tcInstall_Msg_Task_Complete);
    END;

    LOCAL PROCEDURE UpdateTranslations@1000000014();
    BEGIN
      //<FUNC>
      //  Import the translations rapidstart.
      //</FUNC>

      IF bSkipInstallTranslations THEN
        EXIT;

      IF NOT bShowDialog THEN
        Window.UPDATE(3,tcInstall_Msg_InProgress);

      cuAutoSetup.ApplyRapidStartFiles(sBaseDownloadURL, 'whi_translations.rapidstart');

      IF NOT bShowDialog THEN
        Window.UPDATE(3,tcInstall_Msg_Task_Complete);
    END;

    LOCAL PROCEDURE UpdateIcons@1000000006();
    BEGIN
      //<FUNC>
      //  For each tagged 'WHI' icon download the latest version from the web.
      //  Other icon details are assumed to have been set/created prior to this.
      //</FUNC>

      IF bSkipInstallIcons THEN
        EXIT;

      IF NOT bShowDialog THEN
        Window.UPDATE(4,tcInstall_Msg_InProgress);

      cuAutoSetup.ImportIcons(sBaseDownloadURL, recWHISetup.GetExpectedVersion,TRUE);

      IF NOT bShowDialog THEN
        Window.UPDATE(4,tcInstall_Msg_Task_Complete);
    END;

    LOCAL PROCEDURE UpdateApplicationXML@1000000000();
    BEGIN
      //<FUNC>
      //  For each tagged 'WHI' application download the latest version from the web.
      //  Other application details are assumed to have been set/created prior to this.
      //</FUNC>

      IF bSkipInstallApplicationXML THEN
        EXIT;

      IF NOT bShowDialog THEN
        Window.UPDATE(5,tcInstall_Msg_InProgress);

      cuAutoSetup.ImportApplicationXMLFiles(sBaseDownloadURL, recWHISetup.GetExpectedVersion, TRUE);

      IF NOT bShowDialog THEN
        Window.UPDATE(5,tcInstall_Msg_Task_Complete);
    END;

    LOCAL PROCEDURE UpdateHandheldSoftware@1000000007();
    BEGIN
      //<FUNC>
      //  Update the .cab and .apk files
      //</FUNC>

      IF bSkipInstallSoftware THEN
        EXIT;

      IF NOT bShowDialog THEN
        Window.UPDATE(6,tcInstall_Msg_InProgress);

      cuAutoSetup.ImportDeviceSoftware(sBaseDownloadURL,recWHISetup.GetExpectedVersion);

      IF NOT bShowDialog THEN
        Window.UPDATE(6,tcInstall_Msg_Task_Complete);
    END;

    LOCAL PROCEDURE SetInstalledVersion@1000000010();
    BEGIN
      //<FUNC>
      //  Update the .cab and .apk files
      //</FUNC>

      recWHISetup.GET;
      recWHISetup."Installed Version" := recWHISetup.GetExpectedVersion;
      recWHISetup.MODIFY;
    END;

    LOCAL PROCEDURE ClearSoftwareBlobs@1000000004();
    BEGIN
      recWHISetup.GET;
      recWHISetup.CALCFIELDS("Android APK","Windows CAB");
      CLEAR(recWHISetup."Android APK");
      CLEAR(recWHISetup."Windows CAB");
      recWHISetup.MODIFY;
    END;

    PROCEDURE DoInstall@1000000011();
    VAR
      lbKeepGoing@1000000000 : Boolean;
    BEGIN
      IF NOT ImportRapidStart() THEN
        EXIT;

      ImportIcons();

      ImportApplicationXML();

      //ImportDeviceSoftware();
    END;

    PROCEDURE ImportRapidStart@1000000008() : Boolean;
    VAR
      lbKeepGoing@1000000000 : Boolean;
    BEGIN
      //<FUNC>
      // Will import the rapidstart data
      // 2017 and lower will just inform the user to do so
      //</FUNC>

      IF CONFIRM('The RapidStart configuration packages must be manually imported before continuing.\Do you wish to continue?') THEN
        lbKeepGoing := TRUE;


      EXIT(lbKeepGoing);
    END;

    PROCEDURE ImportIcons@1000000012();
    BEGIN
    END;

    PROCEDURE ImportApplicationXML@1000000013();
    BEGIN
    END;

    BEGIN
    END.
  }
}

