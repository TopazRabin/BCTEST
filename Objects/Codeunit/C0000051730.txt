OBJECT Codeunit 51730 Page291EventSubscriber
{
  OBJECT-PROPERTIES
  {
    Date=02/17/21;
    Time=[ 4:25:56 AM];
    Modified=Yes;
    Version List=NAVEVENT;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000000000 : TextConst 'ENU=The Sales Line %1 has different location code than Sales Header %2. Do you want to proceed?';

    [EventSubscriber(Codeunit,51731,PG291_OnAfterGetRecord)]
    LOCAL PROCEDURE PG291_OnAfterGetRecorder_BasedonPublisher@1000000008(VAR Sender@1000000000 : Codeunit 51731;RequisitionLine@1000000001 : Record 246;VAR StyleTxt@1000000002 : Text;VAR Item@1000000004 : Record 27);
    VAR
      DefaultDimension@1000000003 : Record 352;
    BEGIN
      //>>TPZ2858
      IF Item.GET(RequisitionLine."No.") THEN;
      SetStyleABC(RequisitionLine,StyleTxt);
      DefaultDimension.RESET;
      IF DefaultDimension.GET(27,RequisitionLine."No.",'PRODLIFECYCLE')THEN
        IF DefaultDimension."Dimension Value Code" = 'INTRO' THEN
          StyleTxt := 'favorable'
      //<<TPZ2858
    END;

    LOCAL PROCEDURE SetStyleABC@1000000019(RequisitionLine@1000000002 : Record 246;VAR StyleTxtABC@1000000001 : Text);
    VAR
      ItemABC@1000000000 : Record 27;
    BEGIN
      //>>TPZ2858
      StyleTxtABC := '';
      ItemABC.RESET;
      IF ItemABC.GET(RequisitionLine."No.") THEN
        CASE ItemABC."ABC Code" OF
          'LS' : StyleTxtABC := 'favorable';
          'N'  : StyleTxtABC := 'Standard';
          'A'  : StyleTxtABC := 'Standard';
          'B'  : StyleTxtABC := 'Standard';
          'C'  : StyleTxtABC := 'Standard';
          'MD' : StyleTxtABC := 'Standard';
          'SO' : StyleTxtABC := 'Standard';
          'CL' : StyleTxtABC := 'Attention';
          'DI' : StyleTxtABC := 'Ambiguous';
          'OB' : StyleTxtABC := 'Strongaccent';
        END;
      //<<TPZ2858
    END;

    [EventSubscriber(Codeunit,414,OnBeforeReleaseSalesDoc)]
    LOCAL PROCEDURE CU414_ValidateSalesLineForUniqueLocation@1000000000(VAR SalesHeader@1000000000 : Record 36;PreviewMode@1000000001 : Boolean);
    VAR
      SalesLineLoc@1000000002 : Record 37;
    BEGIN
      //TPZ2875
      IF NOT GUIALLOWED THEN
        EXIT;
      IF SalesHeader."Document Type" IN[SalesHeader."Document Type"::"Return Order",SalesHeader."Document Type"::"Credit Memo"] THEN BEGIN
        SalesLineLoc.RESET;
        SalesLineLoc.SETRANGE("Document Type",SalesHeader."Document Type");
        SalesLineLoc.SETRANGE("Document No.",SalesHeader."No.");
        SalesLineLoc.SETRANGE(Type,SalesLineLoc.Type::Item);
        SalesLineLoc.SETFILTER("Location Code",'<>%1',SalesHeader."Location Code");
        IF SalesLineLoc.FINDFIRST THEN
          IF NOT CONFIRM(Text001,TRUE,SalesLineLoc."Line No.",SalesHeader."Location Code") THEN
            ERROR('');
      END;
    END;

    [EventSubscriber(Page,291,OnAfterGetRecordPublisher)]
    PROCEDURE PG291_OnAfterGetCurrRecord@1000000010(VAR Sender@1000000000 : Page 291;VAR Rec@1000000001 : Record 246;VAR AltUOMQtyOnPOCurrLoc@1000000005 : Decimal;VAR AltUOMQtyOnSOCurrLoc@1000000004 : Decimal;VAR AltUOMQtyAvailCurrLoc@1000000003 : Decimal;VAR StyleTxt@1000000002 : Text);
    VAR
      Item@1000000019 : Record 27;
      UOMMgt@1000000020 : Codeunit 5402;
    BEGIN
      // <TPZ135>
      WITH Rec DO BEGIN
        {
        CALCFIELDS("Inventory (All Loc.)","Qty. on SO (All Loc.)");
        QtyAvailAllLoc := "Inventory (All Loc.)" - "Qty. on SO (All Loc.)";

        CALCFIELDS("Inventory (Curr. Loc.)","Qty. on SO (Curr. Loc.)");
        QtyAvailCurrLoc := "Inventory (Curr. Loc.)" - "Qty. on SO (Curr. Loc.)";

        CALCFIELDS("Qty. on AO (All Loc.)","Qty. on AC (All Loc.)","Qty. in Trnst. (Btw. All Loc.)");
        CALCFIELDS("Qty. on AO (Curr. Loc.)","Qty. on AC (Curr. Loc.)","Qty. in Trnst. (to Curr. Loc.)");

        IF (Type = Type::Item) AND
           (Item.GET("No.")) AND
           ("Qty. per Alt. UOM" <> 0)
        THEN BEGIN
          AltUOMInventoryAllLoc := ROUND(UOMMgt.CalcQtyFromBase("Inventory (All Loc.)","Qty. per Alt. UOM"),0.1);
          AltUOMQtyOnPOAllLoc := ROUND(UOMMgt.CalcQtyFromBase("Qty. on PO (All Loc.)","Qty. per Alt. UOM"),0.1);
          AltUOMQtyOnSOAllLoc := ROUND(UOMMgt.CalcQtyFromBase("Qty. on SO (All Loc.)","Qty. per Alt. UOM"),0.1);
          AltUOMQtyOnAOAllLoc := ROUND(UOMMgt.CalcQtyFromBase("Qty. on AO (All Loc.)","Qty. per Alt. UOM"),0.1);
          AltUOMQtyOnACAllLoc := ROUND(UOMMgt.CalcQtyFromBase("Qty. on AC (All Loc.)","Qty. per Alt. UOM"),0.1);
          AltUOMQtyInTrnstBtwAllLoc := ROUND(UOMMgt.CalcQtyFromBase("Qty. in Trnst. (Btw. All Loc.)","Qty. per Alt. UOM"),0.1);
          AltUOMQtyAvailAllLoc := ROUND(UOMMgt.CalcQtyFromBase(QtyAvailAllLoc,"Qty. per Alt. UOM"),0.1);

          AltUOMInventoryCurrLoc := ROUND(UOMMgt.CalcQtyFromBase("Inventory (Curr. Loc.)","Qty. per Alt. UOM"),0.1);
          AltUOMQtyOnPOCurrLoc := ROUND(UOMMgt.CalcQtyFromBase("Qty. on PO (Curr. Loc.)","Qty. per Alt. UOM"),0.1);
          AltUOMQtyOnSOCurrLoc := ROUND(UOMMgt.CalcQtyFromBase("Qty. on SO (Curr. Loc.)","Qty. per Alt. UOM"),0.1);
          AltUOMQtyOnAOCurrLoc := ROUND(UOMMgt.CalcQtyFromBase("Qty. on AO (Curr. Loc.)","Qty. per Alt. UOM"),0.1);
          AltUOMQtyOnACCurrLoc := ROUND(UOMMgt.CalcQtyFromBase("Qty. on AC (Curr. Loc.)","Qty. per Alt. UOM"),0.1);
          AltUOMQtyInTrnstToCurrLoc := ROUND(UOMMgt.CalcQtyFromBase("Qty. in Trnst. (to Curr. Loc.)","Qty. per Alt. UOM"),0.1);
          AltUOMQtyAvailCurrLoc := ROUND(UOMMgt.CalcQtyFromBase(QtyAvailCurrLoc,"Qty. per Alt. UOM"),0.1);
        END ELSE BEGIN
          AltUOMInventoryAllLoc := 0;
          AltUOMQtyOnPOAllLoc := 0;
          AltUOMQtyOnSOAllLoc := 0;
          AltUOMQtyOnAOAllLoc := 0;
          AltUOMQtyOnACAllLoc := 0;
          AltUOMQtyInTrnstBtwAllLoc := 0;
          AltUOMQtyAvailAllLoc := 0;

          AltUOMInventoryCurrLoc := 0;
          AltUOMQtyOnPOCurrLoc := 0;
          AltUOMQtyOnSOCurrLoc := 0;
          AltUOMQtyOnAOCurrLoc := 0;
          AltUOMQtyOnACCurrLoc := 0;
          AltUOMQtyInTrnstToCurrLoc := 0;
          AltUOMQtyAvailCurrLoc := 0;
      END;

        IF "Avg. Usage Qty. (W/ Z. Prds.)" <> "Avg. Usage Qty. (W/O Z. Prds.)" THEN
          StyleTxt := 'Attention'
        ELSE
          StyleTxt := 'Standard'
        // </TPZ135>
        }
        // <TPZ135>
        CALCFIELDS("Qty. on PO (Curr. Loc.)","Qty. on SO (Curr. Loc.)","Inventory (All Loc.)","Qty. on SO (All Loc.)");
        CALCFIELDS("Inventory (All Loc.)","Qty. on SO (All Loc.)");
        CALCFIELDS("Inventory (Curr. Loc.)","Qty. on SO (Curr. Loc.)");
        CALCFIELDS("Qty. on AO (All Loc.)","Qty. on AC (All Loc.)","Qty. in Trnst. (Btw. All Loc.)");
        CALCFIELDS("Qty. on AO (Curr. Loc.)","Qty. on AC (Curr. Loc.)","Qty. in Trnst. (to Curr. Loc.)");
        IF (Type = Type::Item) AND
           (Item.GET("No.")) AND
           ("Qty. per Alt. UOM" <> 0)
        THEN BEGIN

          AltUOMQtyOnPOCurrLoc := ROUND(UOMMgt.CalcQtyFromBase("Qty. on PO (Curr. Loc.)","Qty. per Alt. UOM"),0.1);
          AltUOMQtyOnSOCurrLoc := ROUND(UOMMgt.CalcQtyFromBase("Qty. on SO (Curr. Loc.)","Qty. per Alt. UOM"),0.1);
          AltUOMQtyAvailCurrLoc := ROUND(UOMMgt.CalcQtyFromBase("Inventory (Curr. Loc.)" - "Qty. on SO (Curr. Loc.)","Qty. per Alt. UOM"),0.1);
        END ELSE BEGIN
          AltUOMQtyOnPOCurrLoc := 0;
          AltUOMQtyOnSOCurrLoc := 0;
          AltUOMQtyAvailCurrLoc :=0;
        END;

        IF "Avg. Usage Qty. (W/ Z. Prds.)" <> "Avg. Usage Qty. (W/O Z. Prds.)" THEN
          StyleTxt := 'Attention'
        ELSE
          StyleTxt := 'Standard';
        // </TPZ135>
      END;
    END;

    [EventSubscriber(Page,291,OnAfterActionEvent,Statistics)]
    PROCEDURE PG291_Statistics_OnAction@1000000009(VAR Rec@1000000000 : Record 246);
    VAR
      ReqWkshBatch@1000000001 : Record 245;
    BEGIN
      // <TPZ1315>
      IF ReqWkshBatch.GET(Rec."Worksheet Template Name",Rec."Journal Batch Name") THEN
        PAGE.RUNMODAL(PAGE::"Req. Worksheet Statistics",ReqWkshBatch);
      // </TPZ135>
    END;

    [EventSubscriber(Page,291,OnAfterActionEvent,CalculateVendor)]
    PROCEDURE PG291_CalculateVendor_OnAction@1000000002(VAR Rec@1000000000 : Record 246);
    VAR
      Vend@1000000002 : Record 23;
      ReqWkshBatch@1000000001 : Record 245;
      CalculateVendor@1000000004 : Report 51430;
    BEGIN
      // <TPZ135>
      WITH Rec DO BEGIN
        CalculateVendor.SetTemplAndWorksheet("Worksheet Template Name","Journal Batch Name");
        IF ReqWkshBatch.GET("Worksheet Template Name","Journal Batch Name") THEN BEGIN
          IF ReqWkshBatch."Vendor No." <> '' THEN
            Vend.SETRANGE("No.",ReqWkshBatch."Vendor No.");
          IF ReqWkshBatch."Location Filter" <> '' THEN
            CalculateVendor.SetLocation(ReqWkshBatch."Location Filter");
          IF ReqWkshBatch."Division Code" <> '' THEN
            CalculateVendor.SetDivision(ReqWkshBatch."Division Code");
          IF ReqWkshBatch."Incl. Only Primary Vendor SKUs" THEN
            CalculateVendor.SetInclOnlyPrimaryVendorSKUs(TRUE);
          IF ReqWkshBatch."Incl. Transfers into Avg. Usg." THEN
            CalculateVendor.SetInclTransfersIntoAvgUsage(TRUE);
        END;
        CalculateVendor.SETTABLEVIEW(Vend);
        CalculateVendor.RUNMODAL;
        CLEAR(CalculateVendor);
        // </TPZ135>
      END;
    END;

    [EventSubscriber(Page,291,OnAfterActionEvent,CalculateLocation)]
    PROCEDURE PG291_CalculateLocation_OnAction@1000000003(VAR Rec@1000000000 : Record 246);
    VAR
      CalculateLocation@1000000001 : Report 51431;
      ReqWkshBatch@1000000002 : Record 245;
      Loc@1000000003 : Record 14;
    BEGIN
      // <TPZ135>
      WITH Rec DO BEGIN
        CalculateLocation.SetTemplAndWorksheet("Worksheet Template Name","Journal Batch Name");
        IF ReqWkshBatch.GET("Worksheet Template Name","Journal Batch Name") THEN BEGIN
          IF ReqWkshBatch."Location Filter" <> '' THEN
            Loc.SETFILTER(Code,ReqWkshBatch."Location Filter");
          IF ReqWkshBatch."Division Code" <> '' THEN
            CalculateLocation.SetDivision(ReqWkshBatch."Division Code");
          IF ReqWkshBatch."Incl. Transfers into Avg. Usg." THEN
            CalculateLocation.SetInclTransfersIntoAvgUsage(TRUE);
        END;
        CalculateLocation.SETTABLEVIEW(Loc);
        CalculateLocation.RUNMODAL;
        CLEAR(CalculateLocation);
        // </TPZ135>
      END;
    END;

    [EventSubscriber(Page,291,OnAfterActionEvent,InventoryHistoryDetails)]
    PROCEDURE PG291_InventoryHistoryDetails_OnAction@1000000004(VAR Rec@1000000000 : Record 246);
    VAR
      Location@1000000004 : Record 14;
      ReqWkshBatch@1000000003 : Record 245;
      URL@1000000002 : Text[1000];
      HttpUtility@1000000001 : DotNet "'System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
    BEGIN
      //TPZ2830
      WITH Rec DO BEGIN
        TESTFIELD(Type,Type::Item);

        URL := 'http://nyvsvnavsql5/reportserver?/User%20Reports%20-%20Product/Inventory%20History%20Details&rs:Command=Render&ItemNo='+
          //<TPZ1583>
          HttpUtility.UrlEncode("No.");
          //</TPZ1583>

        IF ReqWkshBatch.GET("Worksheet Template Name","Journal Batch Name") AND
           (ReqWkshBatch."Invt. History Loc. Filter" <> '')
        THEN BEGIN
          Location.RESET;
          Location.SETFILTER(Code,ReqWkshBatch."Invt. History Loc. Filter");
          IF Location.FINDSET THEN
            REPEAT
              URL := URL + '&LocationCode=' + Location.Code;
            UNTIL Location.NEXT = 0;
        END;

        HYPERLINK(URL);
        // </TPZ135>
      END;
    END;

    [EventSubscriber(Page,291,OnAfterActionEvent,InvHistDetailsNoVirtualSales)]
    PROCEDURE PG291_InvHistDetailsNoVirtualSales_OnAction@1000000005(VAR Rec@1000000000 : Record 246);
    VAR
      URL@1000000004 : Text[1000];
      Location@1000000003 : Record 14;
      ReqWkshBatch@1000000002 : Record 245;
      HttpUtility@1000000001 : DotNet "'System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
    BEGIN
      //TPZ2830
      WITH Rec DO BEGIN
      // <TPZ1426>
      TESTFIELD(Type,Type::Item);

      URL :=
        'http://nyvsvnavsql5/reportserver?/User%20Reports%20-%20Product/Inventory%20History%20Details%20No%20Virtual%20Sales&rs:Command=Render&ItemNo=' +
        //<TPZ1583>
        HttpUtility.UrlEncode("No.");
        //</TPZ1583>

      IF ReqWkshBatch.GET("Worksheet Template Name","Journal Batch Name") AND
         (ReqWkshBatch."Invt. History Loc. Filter" <> '')
      THEN BEGIN
        Location.RESET;
        Location.SETFILTER(Code,ReqWkshBatch."Invt. History Loc. Filter");
        IF Location.FINDSET THEN
          REPEAT
            URL := URL + '&LocationCode=' + Location.Code;
          UNTIL Location.NEXT = 0;
      END;

      HYPERLINK(URL);
      // </TPZ1426>
      END;
    END;

    [EventSubscriber(Page,291,OnAfterActionEvent,AltUOMInventoryHistoryDetails)]
    PROCEDURE PG291_AltUOMInventoryHistoryDetails_OnAction@1000000006(VAR Rec@1000000000 : Record 246);
    VAR
      Location@1000000004 : Record 14;
      ReqWkshBatch@1000000003 : Record 245;
      URL@1000000002 : Text[1000];
      HttpUtility@1000000001 : DotNet "'System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
    BEGIN
      //TPZ2830
      WITH Rec DO BEGIN
          // <TPZ135>
        TESTFIELD(Type,Type::Item);

        URL :=
          'http://nyvsvnavsql5/reportserver?/User%20Reports%20-%20Product/Inventory%20History%20Details&rs:Command=Render&ItemNo=' +
          //<TPZ1583>
          HttpUtility.UrlEncode("No.");
          //</TPZ1583>

        IF ReqWkshBatch.GET("Worksheet Template Name","Journal Batch Name") AND
           (ReqWkshBatch."Invt. History Loc. Filter" <> '')
        THEN BEGIN
          Location.RESET;
          Location.SETFILTER(Code,ReqWkshBatch."Invt. History Loc. Filter");
          IF Location.FINDSET THEN
            REPEAT
              URL := URL + '&LocationCode=' + Location.Code;
            UNTIL Location.NEXT = 0;
        END;

        URL :=
          URL +
          '&DisplayQtysInAltPurchUOM=True';

        HYPERLINK(URL);
        // </TPZ135>
      END;
    END;

    [EventSubscriber(Page,291,OnAfterActionEvent,InvHistDetailsNoVirtualSalesAltUOM)]
    PROCEDURE PG291_AltUOMInvHistDetailsNoVirtualSales_OnAction@1000000007(VAR Rec@1000000000 : Record 246);
    VAR
      URL@1000000004 : Text[1000];
      Location@1000000003 : Record 14;
      ReqWkshBatch@1000000002 : Record 245;
      HttpUtility@1000000001 : DotNet "'System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
    BEGIN
      //TPZ2830
      WITH Rec DO BEGIN
        // <TPZ1426>
        TESTFIELD(Type,Type::Item);

        URL :=
          'http://nyvsvnavsql5/reportserver?/User%20Reports%20-%20Product/Inventory%20History%20Details%20No%20Virtual%20Sales&rs:Command=Render&ItemNo=' +
          //<TPZ1583>
          HttpUtility.UrlEncode("No.");
          //</TPZ1583>

        IF ReqWkshBatch.GET("Worksheet Template Name","Journal Batch Name") AND
           (ReqWkshBatch."Invt. History Loc. Filter" <> '')
        THEN BEGIN
          Location.RESET;
          Location.SETFILTER(Code,ReqWkshBatch."Invt. History Loc. Filter");
          IF Location.FINDSET THEN
            REPEAT
              URL := URL + '&LocationCode=' + Location.Code;
            UNTIL Location.NEXT = 0;
        END;

        URL :=
          URL +
          '&DisplayQtysInAltPurchUOM=True';


        HYPERLINK(URL);
        // </TPZ1426>
      END;
    END;

    [EventSubscriber(Page,291,OnBeforeActionEvent,CarryOutActionMessage)]
    LOCAL PROCEDURE PG291_CarryOutActionMessage_OnAction@1000000001(VAR Rec@1000000000 : Record 246);
    BEGIN
      Rec.SETCURRENTKEY("Location Code");  //TPZ2830
      Rec.SETFILTER(Quantity,'>%1',0);  //TPZ2830
    END;

    BEGIN
    {
      2020-05-11  TPZ2830  PSHUKLA  New Object | Need merge
      TPZ2858 06022020 RSAH Using ABC before the item is actually blocked
    }
    END.
  }
}

