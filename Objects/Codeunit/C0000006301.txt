OBJECT Codeunit 6301 Power BI Service Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=03/02/20;
    Time=12:00:00 PM;
    Version List=NAVW111.00.00.41203;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AzureAdMgt@1007 : Codeunit 6300;
      PowerBiApiResourceUrlTxt@1003 : TextConst '@@@={Locked};ENU=https://analysis.windows.net/powerbi/api;ESM=https://analysis.windows.net/powerbi/api;FRC=https://analysis.windows.net/powerbi/api;ENC=https://analysis.windows.net/powerbi/api';
      JObject@1005 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      DotNetString@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      PowerBiApiResourceUrlPPETxt@1008 : TextConst '@@@={Locked};ENU=https://analysis.windows-int.net/powerbi/api;ESM=https://analysis.windows-int.net/powerbi/api;FRC=https://analysis.windows-int.net/powerbi/api;ENC=https://analysis.windows-int.net/powerbi/api';
      ReportsUrlTxt@1011 : TextConst '@@@={Locked};ENU=https://api.powerbi.com/beta/myorg/reports;ESM=https://api.powerbi.com/beta/myorg/reports;FRC=https://api.powerbi.com/beta/myorg/reports;ENC=https://api.powerbi.com/beta/myorg/reports';
      ReportsUrlPPETxt@1010 : TextConst '@@@={Locked};ENU=https://biazure-int-edog-redirect.analysis-df.windows.net/beta/myorg/reports;ESM=https://biazure-int-edog-redirect.analysis-df.windows.net/beta/myorg/reports;FRC=https://biazure-int-edog-redirect.analysis-df.windows.net/beta/myorg/reports;ENC=https://biazure-int-edog-redirect.analysis-df.windows.net/beta/myorg/reports';
      GenericErr@1002 : TextConst 'ENU=An error occurred while trying to get reports from the Power BI service. Please try again or contact your system administrator if the error persists.;ESM=Se ha producido un error al intentar obtener informes del servicio de Power BI. Vuelva a intentarlo o p¢ngase en contacto con el administrador del sistema si el error persiste.;FRC=Une erreur s''est produite lors de la tentative d''obtention des rapports Ö partir du service Power BI. RÇessayez ou contactez votre administrateur systäme si l''erreur persiste.;ENC=An error occurred while trying to get reports from the Power BI service. Please try again or contact your system administrator if the error persists.';
      PowerBiResourceNameTxt@1001 : TextConst 'ENU=Power BI Services;ESM=Servicios de Power BI;FRC=Services Power BI;ENC=Power BI Services';
      ReportPageSizeTxt@1004 : TextConst '@@@={Locked};ENU=16:9;ESM=16:9;FRC=16:9;ENC=16:9';
      PowerBIurlErr@1009 : TextConst '@@@={Locked};ENU=https://powerbi.microsoft.com;ESM=https://powerbi.microsoft.com;FRC=https://powerbi.microsoft.com;ENC=https://powerbi.microsoft.com';
      UnauthorizedErr@1012 : TextConst 'ENU=You do not have a Power BI account. You can get a Power BI account at the following location.;ESM=No tiene una cuenta de Power BI. Puede obtener una en la siguiente ubicaci¢n.;FRC=Vous n''avez pas de compte Power BI. Vous pouvez obtenir un compte Power BI Ö l''emplacement suivant.;ENC=You do not have a Power BI account. You can get a Power BI account at the following location.';
      NavAppSourceUrlTxt@1014 : TextConst '@@@={Locked};ENU="https://go.microsoft.com/fwlink/?linkid=862351";ESM="https://go.microsoft.com/fwlink/?linkid=862351";FRC="https://go.microsoft.com/fwlink/?linkid=862351";ENC="https://go.microsoft.com/fwlink/?linkid=862351"';
      Dyn365AppSourceUrlTxt@1015 : TextConst '@@@={Locked};ENU="https://go.microsoft.com/fwlink/?linkid=862352";ESM="https://go.microsoft.com/fwlink/?linkid=862352";FRC="https://go.microsoft.com/fwlink/?linkid=862352";ENC="https://go.microsoft.com/fwlink/?linkid=862352"';
      PowerBIMyOrgUrlTxt@1016 : TextConst '@@@={Locked};ENU="https://go.microsoft.com/fwlink/?linkid=862353";ESM="https://go.microsoft.com/fwlink/?linkid=862353";FRC="https://go.microsoft.com/fwlink/?linkid=862353";ENC="https://go.microsoft.com/fwlink/?linkid=862353"';

    [Internal]
    PROCEDURE GetReports@6(VAR TempPowerBIReportBuffer@1000 : TEMPORARY Record 6302;VAR ExceptionMessage@1018 : Text;VAR ExceptionDetails@1014 : Text;Context@1010 : Text[30]);
    VAR
      PowerBIReportConfiguration@1008 : Record 6301;
      DotNetExceptionHandler@1077 : Codeunit 1291;
      WebRequestHelper@1006 : Codeunit 1299;
      JObj@1017 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      ObjectEnumerator@1016 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      Current@1015 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.KeyValuePair`2";
      JArray@1013 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      ArrayEnumerator@1012 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      JToken@1011 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
      HttpWebResponse@1004 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      WebException@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebException";
      HttpStatusCode@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      Exception@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Exception";
      Url@1020 : Text;
      Key@1009 : Text;
      ResponseText@1001 : Text;
    BEGIN
      // Gets a list of reports from the user's Power BI account and loads them into the given buffer.
      // Reports are marked as Enabled if they've previously been selected for the given context (page ID).
      IF NOT TempPowerBIReportBuffer.ISEMPTY THEN
        EXIT;

      IF IsPPE THEN
        Url := ReportsUrlPPETxt
      ELSE
        Url := ReportsUrlTxt;

      IF NOT WebRequestHelper.GetResponseText(
           'GET',Url,AzureAdMgt.GetAccessToken(GetPowerBiResourceUrl,GetPowerBiResourceName,FALSE),ResponseText)
      THEN BEGIN
        Exception := GETLASTERROROBJECT;
        ExceptionMessage := Exception.Message;
        ExceptionDetails := Exception.ToString;

        DotNetExceptionHandler.Collect;
        IF DotNetExceptionHandler.CastToType(WebException,GETDOTNETTYPE(WebException)) THEN BEGIN
          HttpWebResponse := WebException.Response;
          HttpStatusCode := HttpWebResponse.StatusCode;

          IF HttpWebResponse.StatusCode = 401 THEN
            ERROR(UnauthorizedErr);
        END ELSE
          ERROR(GenericErr);
      END;

      JObj := JObject.Parse(ResponseText); // TODO: check versions

      ObjectEnumerator := JObj.GetEnumerator;

      WHILE ObjectEnumerator.MoveNext DO BEGIN
        Current := ObjectEnumerator.Current;
        Key := Current.Key;

        IF Key = 'value' THEN BEGIN
          JArray := Current.Value;
          ArrayEnumerator := JArray.GetEnumerator;

          WHILE ArrayEnumerator.MoveNext DO BEGIN
            JObj := ArrayEnumerator.Current;
            TempPowerBIReportBuffer.INIT;

            // report GUID identifier
            JToken := JObj.SelectToken('id');
            EVALUATE(TempPowerBIReportBuffer.ReportID,JToken.ToString);

            // report name
            JToken := JObj.SelectToken('name');
            TempPowerBIReportBuffer.ReportName := JToken.ToString;

            // report embedding url
            JToken := JObj.SelectToken('embedUrl');
            IF STRLEN(JToken.ToString) <= MAXSTRLEN(TempPowerBIReportBuffer.EmbedUrl) THEN
              TempPowerBIReportBuffer.EmbedUrl := JToken.ToString
            ELSE
              TempPowerBIReportBuffer.EmbedUrl := ShortenPowerBIUrl(JToken.ToString);

            // report enabled
            TempPowerBIReportBuffer.Enabled := PowerBIReportConfiguration.GET(USERSECURITYID,TempPowerBIReportBuffer.ReportID,Context);

            TempPowerBIReportBuffer.INSERT;
          END;
        END
      END;
    END;

    [Internal]
    PROCEDURE IsUserReadyForPowerBI@4() : Boolean;
    BEGIN
      IF NOT AzureAdMgt.IsAzureADAppSetupDone THEN
        EXIT(FALSE);

      EXIT(NOT DotNetString.IsNullOrWhiteSpace(AzureAdMgt.GetAccessToken(GetPowerBiResourceUrl,GetPowerBiResourceName,FALSE)));
    END;

    [External]
    PROCEDURE GetPowerBiResourceUrl@3() : Text;
    BEGIN
      IF IsPPE THEN
        EXIT(PowerBiApiResourceUrlPPETxt);

      EXIT(PowerBiApiResourceUrlTxt);
    END;

    [External]
    PROCEDURE GetPowerBiResourceName@5() : Text;
    BEGIN
      EXIT(PowerBiResourceNameTxt);
    END;

    [External]
    PROCEDURE GetGenericError@2() : Text;
    BEGIN
      EXIT(GenericErr);
    END;

    LOCAL PROCEDURE IsPPE@1() : Boolean;
    VAR
      EnvironmentMgt@1000 : Codeunit 9005;
    BEGIN
      EXIT(EnvironmentMgt.IsPPE);
    END;

    [External]
    PROCEDURE GetReportPageSize@7() : Text;
    BEGIN
      EXIT(ReportPageSizeTxt);
    END;

    [External]
    PROCEDURE GetUnauthorizedErrorText@8() : Text;
    BEGIN
      EXIT(UnauthorizedErr);
    END;

    [External]
    PROCEDURE GetPowerBIUrl@9() : Text;
    BEGIN
      EXIT(PowerBIurlErr);
    END;

    [External]
    PROCEDURE GetContentPacksServicesUrl@14() : Text;
    VAR
      AzureADMgt@1000 : Codeunit 6300;
    BEGIN
      // Gets the URL for AppSource's list of content packs, like Power BI's Services button, filtered to Dynamics reports.
      IF AzureADMgt.IsSaaS THEN
        EXIT(Dyn365AppSourceUrlTxt);

      EXIT(NavAppSourceUrlTxt);
    END;

    [External]
    PROCEDURE GetContentPacksMyOrganizationUrl@15() : Text;
    BEGIN
      // Gets the URL for Power BI's embedded AppSource page listing reports shared by the user's organization.
      EXIT(PowerBIMyOrgUrlTxt);
    END;

    PROCEDURE LogException@10(VAR ExceptionMessage@1000 : Text;VAR ExceptionDetails@1001 : Text);
    VAR
      AzureADAppSetup@1004 : Record 6300;
      ActivityLog@1003 : Record 710;
      Company@1002 : Record 2000000006;
    BEGIN
      IF ExceptionMessage <> '' THEN BEGIN
        IF NOT AzureADAppSetup.ISEMPTY THEN BEGIN
          AzureADAppSetup.FINDFIRST;
          ActivityLog.LogActivityForUser(
            AzureADAppSetup.RECORDID,ActivityLog.Status::Failed,'Power BI Non-SaaS',ExceptionMessage,ExceptionDetails,USERID);
        END ELSE BEGIN
          Company.GET(COMPANYNAME); // Dummy record to attach to activity log
          ActivityLog.LogActivityForUser(
            Company.RECORDID,ActivityLog.Status::Failed,'Power BI SaaS',ExceptionMessage,ExceptionDetails,USERID);
        END;
        ExceptionMessage := '';
        ExceptionDetails := '';
      END;
    END;

    PROCEDURE ShortenPowerBIUrl@33(FullUrl@1000 : Text) : Text[250];
    VAR
      UrlWithoutQueryString@1002 : Text;
      QueryString@1003 : Text;
      UrlToUse@1004 : Text;
    BEGIN
      // IMPORTANT NOTE: This function will be removed in an upcoming update, do not use it in custom code.
      // As of 02 Mar 2020, the config query parameter is not needed and causes the resulting URL to be too long
      // and the experience to break. As a temporary fix, we are stripping it from the URL. The long term fix is
      // available in later versions of Business Central.

      SplitBaseUrlAndQuery(FullUrl,UrlWithoutQueryString,QueryString);

      IF QueryString = '' THEN
        EXIT(COPYSTR(UrlWithoutQueryString,1,250)); // We do our best

      QueryString := RemoveConfigQueryParameter(QueryString);

      IF QueryString <> '' THEN
        UrlToUse := UrlWithoutQueryString + '?' + QueryString
      ELSE
        UrlToUse := UrlWithoutQueryString;

      EXIT(COPYSTR(UrlToUse,1,250));
    END;

    LOCAL PROCEDURE SplitBaseUrlAndQuery@39(FullUrl@1002 : Text;VAR BaseUrl@1001 : Text;VAR QueryString@1000 : Text);
    VAR
      FirstQuestionMarkPosition@1003 : Integer;
    BEGIN
      FirstQuestionMarkPosition := STRPOS(FullUrl,'?');
      IF FirstQuestionMarkPosition = 0 THEN BEGIN
        BaseUrl := FullUrl;
        QueryString := '';
        EXIT;
      END;

      BaseUrl := COPYSTR(FullUrl,1,FirstQuestionMarkPosition - 1);
      QueryString := COPYSTR(FullUrl,FirstQuestionMarkPosition + 1); // This does not include the '?'
    END;

    LOCAL PROCEDURE RemoveConfigQueryParameter@56(QueryString@1000 : Text) : Text;
    VAR
      QueryStringAfterConfig@1004 : Text;
      ConfigPosition@1002 : Integer;
      NextAmpersandPosition@1003 : Integer;
    BEGIN
      QueryString := '&' + QueryString;

      ConfigPosition := STRPOS(LOWERCASE(QueryString),'&config=');
      IF ConfigPosition = 0 THEN
        EXIT(DELCHR(QueryString,'<','&'));

      QueryStringAfterConfig := COPYSTR(QueryString,ConfigPosition + STRLEN('&config='));

      IF STRPOS(QueryStringAfterConfig,'&') > 0 THEN
        NextAmpersandPosition := ConfigPosition + STRLEN('&config=') + STRPOS(QueryStringAfterConfig,'&') - 1
      ELSE
        NextAmpersandPosition := STRLEN(QueryString) + 1;

      QueryString := COPYSTR(QueryString,1,ConfigPosition - 1) + COPYSTR(QueryString,NextAmpersandPosition);
      EXIT(DELCHR(QueryString,'<','&'));
    END;

    BEGIN
    {
      // Manages access to the Power BI service API's (aka powerbi.com)
    }
    END.
  }
}

