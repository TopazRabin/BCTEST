OBJECT Codeunit 23044602 DSHIP Package Rate Management
{
  OBJECT-PROPERTIES
  {
    Date=10/20/21;
    Time=[ 4:57:43 AM];
    Modified=Yes;
    Version List=DSHIP2.2.3,001,3229,3265,3268,3353,3299,3333,3187;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      recDShipSetup@1000000004 : Record 23044600;
      tcUnknownDoc@1000000001 : TextConst 'ENU=Unknown source document for packaging.;ESM=Documento de origen desconocido de embalaje.;FRC=Document de source inconnu pour l''empaquetage.;ENC=Unknown source document for packaging.';
      cuPackMgmt@1000000002 : Codeunit 23044601;
      tcConfirmUnpacked@1000000003 : TextConst 'ENU=There are unpacked lines.\Are you sure you want to continue?;ESM=¨Existen l¡neas. \Are unpacked seguro de que desea continuar?;FRC=Il y a des lignes. \Are unpacked voulez-vous s–r de vouloir continuer?;ENC=There are unpacked lines.\Are you sure you want to continue?';
      cuCommonBase@1000000006 : Codeunit 23044519;
      tcMissingDShipRatePrice@1000000005 : TextConst 'ENU=Missing dynamic Ship Rate Price table configuration.;ESM=Configuraci¢n de la tabla precio de tipo Dynamic Ship falta.;FRC=Configuration de Prix du Taux Dynamic Ship table manquant (e).;ENC=Missing dynamic Ship Rate Price table configuration.';
      tcUnknownShipAgent@1000000008 : TextConst 'ENU=The carrier account could not be found in NAV.\Please ensure an account for %1 with ID "%2" is configured.;ESM=No se pudo encontrar la cuenta de soporte de NAV. \Please asegurarse de una cuenta de la est  configurada %1 con el Id. "%2".;FRC=Impossible de trouver le compte carrier dans NAV. \Please assurez-vous un compte pour %1 portant le CODE ®%2¯ est configur‚.;ENC=The carrier account could not be found in NAV.\Please ensure an account for %1 with ID "%2" is configured.';
      tcAgentServiceError@1000000010 : TextConst 'ENU=The selected shipping agent %1 and/or service %2 are not configured for use.;ESM=El transportista seleccionado %1 y/o %2 servicio no se configur¢ para su uso.;FRC=L''agent de livraison s‚lectionn‚es %1 et/ou service %2 sont pas configur‚ pour les utiliser.;ENC=The selected shipping agent %1 and/or service %2 are not configured for use.';
      cuRateSingleton@1000000012 : Codeunit 23044608;
      tcMissingOrderID@1000000007 : TextConst 'ENU=The Freight Integrator did not assign an Order ID.;ESM=La gesti¢n de flete Integrator no ha asignado un identificador de pedido.;FRC=Le Integrator Fret n'' avez pas affecter un code de la Commande.;ENC=The Freight Integrator did not assign an Order ID.';
      tcMissingFreightIntShipAgent@1000000009 : TextConst 'ENU=There are no enabled Freight Integration Providers for Shipping Agent %1.;ESM=No hay ning£n habilitados proveedores de integraci¢n de flete transportista %1.;FRC=Il n'' y a aucune Fournisseurs Int‚gration Fret est activ‚ pour l''Agent de Livraison%1.;ENC=There are no enabled Freight Integration Providers for Shipping Agent %1.';
      tcMissingFreightInt@1000000013 : TextConst 'ENU=There are no enabled Freight Integration Providers.;ESM=No hay ning£n habilitados flete por proveedores de integraci¢n.;FRC=Il n'' y a aucune Fournisseurs de l''Int‚gration de Fret est activ‚.;ENC=There are no enabled Freight Integration Providers.';
      PalletDetailVar@1000000015 : Boolean;
      LicensePlateNo@1000000014 : Code[20];
      MOPSalesOrderNo@1000000011 : Code[20];
      SalesHeader@1000000016 : Record 36;
      IsNonTBDorder@1000000000 : Boolean;

    PROCEDURE getShippingLabel@1000000079(ptrecOrderBuffer@1000000000 : TEMPORARY Record 23044601);
    VAR
      lrecrRecRef@1000000002 : RecordRef;
      lrecLPHeader@1000000003 : Record 23044505;
      ltrecRateBuffer@1000000005 : TEMPORARY Record 23044603;
      ltrecSelectedRate@1000000009 : TEMPORARY Record 23044603;
      ltrecShipMessages@1000000004 : TEMPORARY Record 23044604;
      ltrecDShipEmailDetailsBuffer@1000000011 : TEMPORARY Record 23044615;
      ltrecAPIParam@1000000013 : TEMPORARY Record 23044623;
      lcuDShipEmailMngmt@1000000010 : Codeunit 23044606;
      lsOrderID@1000000001 : Text;
      lasFromAddress@1000000007 : ARRAY [12] OF Text[100];
      lasToAddress@1000000006 : ARRAY [12] OF Text[100];
      lbSelectedRate@1000000008 : Boolean;
      liTempSessionID@1000000012 : Integer;
    BEGIN
      cuRateSingleton.clearAll;

      recDShipSetup.GET;
      IF ( callGetLabelExtension(recDShipSetup."Shipment Extension Codeunit", '', ptrecOrderBuffer."Document Type", ptrecOrderBuffer."Document No.") ) THEN
        EXIT;

      setPrereqs(ptrecOrderBuffer, lrecLPHeader, lrecrRecRef, lasFromAddress, lasToAddress);

      checkUnpacked(lrecrRecRef);

      lsOrderID := getRateData(lrecrRecRef, lasFromAddress, lasToAddress);

      IF ( lsOrderID = '' ) THEN
        ERROR(tcMissingOrderID);

      lbSelectedRate := getSelectedRateData(lasFromAddress, lasToAddress, ptrecOrderBuffer."Document Type", ptrecOrderBuffer."Document No.");

      IF ( NOT lbSelectedRate ) THEN BEGIN
        cuRateSingleton.clearAll;
        EXIT;
      END;

      getShipmentLabels(lrecrRecRef, ptrecOrderBuffer."Document Type", ptrecOrderBuffer."Document No.", ltrecAPIParam);
      lbSelectedRate := handleSelectedRate(ptrecOrderBuffer);
      // IF a custom rate worksheet is integrated
      // this flow WILL continue and needs to be handled accordingly.
      IF ( lbSelectedRate ) THEN BEGIN
        setShipmentLabels(lrecrRecRef, ltrecAPIParam);
      END;
      cuRateSingleton.clearAll; // rate related is set, clear singleton
      IF ( NOT lbSelectedRate ) THEN BEGIN
        EXIT;
      END;
      COMMIT; // so printing succeeds

      //<TPZ2723>
      //To Print Label in CASE TBD in SO and UPS selected in Rate List Page
      IF ltrecAPIParam."Object ID" <> '' THEN
          lsOrderID := ltrecAPIParam."Object ID";
      //</TPZ2723>

      // this must be processed by external processes separately
      IF ( GUIALLOWED ) THEN BEGIN
        printInternalPkgReport(lsOrderID);
        printShipmentLabels(lsOrderID); //new code below from new version need to verify PKS
        //cuPackMgmt.printInternalPackageLabel(lrecLPHeader, 0);
        //printShipmentLabelsByOrder(ptrecOrderBuffer."Document Type", ptrecOrderBuffer."Document No.");
        printCommercialInvoice(ptrecOrderBuffer."Document Type", ptrecOrderBuffer."Document No.");
      END;

      //apify
      IF ( checkReturnLabelRequired(ptrecOrderBuffer."Document Type", ptrecOrderBuffer."Document No.") ) THEN BEGIN
        IF ( getReturnLabel(ptrecOrderBuffer."Document Type", ptrecOrderBuffer."Document No.") ) THEN
          IF ( recDShipSetup."Carrier Label Print Behaviour" <> recDShipSetup."Carrier Label Print Behaviour"::Manual ) THEN
            printReturnLabel(lrecLPHeader, FALSE);
      END;

      //  Check if tracking email is to be sent after label creation
      IF ( recDShipSetup."Tracking E-mail Trigger" = recDShipSetup."Tracking E-mail Trigger"::"Label Creation" ) THEN BEGIN
        IF ( NOT callSendEmailExtension(recDShipSetup."Shipment Extension Codeunit", ptrecOrderBuffer."Document Type", ptrecOrderBuffer."Document No.") ) THEN BEGIN
          lcuDShipEmailMngmt.initEmailBuffer(lrecrRecRef, ltrecDShipEmailDetailsBuffer);
          STARTSESSION(liTempSessionID, CODEUNIT::"DSHIP E-mail Management", COMPANYNAME, ltrecDShipEmailDetailsBuffer);
        END;
      END; // if send email at "label creation"

      callCompletedRateShopExtension(recDShipSetup."Shipment Extension Codeunit", '', ptrecOrderBuffer."Document Type", ptrecOrderBuffer."Document No.");
    END;

    PROCEDURE setPrereqs@1000000081(ptrecOrderBuffer@1000000000 : TEMPORARY Record 23044601;VAR precLPHeader@1000000001 : Record 23044505;VAR precrRecRef@1000000006 : RecordRef;VAR pasFromAddress@1000000008 : ARRAY [12] OF Text[100];VAR pasToAddress@1000000007 : ARRAY [12] OF Text[100]);
    VAR
      lrecWhseShipHeader@1000000005 : Record 7320;
      lrecSalesHeader@1000000004 : Record 36;
      lrecTransferHeader@1000000003 : Record 5740;
      lrecMiscShipment@1000000002 : Record 23044621;
      lsTaxType@1000000011 : Text;
      lsTaxID@1000000010 : Text;
      lsPhoneNo@1000000009 : Text;
      DSHIPSetup@1000000012 : Record 23044600;
    BEGIN
      //<FUNC>
      //  Description:
      //  Called From:
      //  Side Effect:
      //</FUNC>

      precLPHeader.SETFILTER("No.", cuPackMgmt.CreateLPNoFilterWithDShipDocType(ptrecOrderBuffer."Document Type", ptrecOrderBuffer."Document No."));
      precLPHeader."Source No." := ptrecOrderBuffer."Document No.";

      CASE ptrecOrderBuffer."Document Type" OF
        ptrecOrderBuffer."Document Type"::"Warehouse Shipment":
          BEGIN
            lrecWhseShipHeader.GET(ptrecOrderBuffer."Document No.");
            precrRecRef.GETTABLE(lrecWhseShipHeader);
            precLPHeader."Source Document" := precLPHeader."Source Document"::Shipment;
            getShipFromAddress(lrecWhseShipHeader."Location Code", pasFromAddress);
            setShipToAddressForWhseShip(lrecWhseShipHeader, TRUE, pasToAddress);
          END;
        ptrecOrderBuffer."Document Type"::"Sales Order":
          BEGIN
            lrecSalesHeader.GET(ptrecOrderBuffer."Document Subtype", ptrecOrderBuffer."Document No.");
            precrRecRef.GETTABLE(lrecSalesHeader);
            precLPHeader."Source Document" := precLPHeader."Source Document"::"Sales Order";
            getShipFromAddress(lrecSalesHeader."Location Code", pasFromAddress);
            setShipToAddressForSalesOrder(lrecSalesHeader, TRUE, pasToAddress);
          END;
        ptrecOrderBuffer."Document Type"::"Outbound Transfer":
          BEGIN
            lrecTransferHeader.GET(ptrecOrderBuffer."Document No.");
            precrRecRef.GETTABLE(lrecTransferHeader);
            precLPHeader."Source Document" := precLPHeader."Source Document"::"Outbound Transfer";
            getShipFromAddress(lrecTransferHeader."Transfer-from Code", pasFromAddress);
            getShipToAddressFromTransferHeader(lrecTransferHeader, TRUE, pasToAddress);
          END;
        ptrecOrderBuffer."Document Type"::"Misc. Shipment":
          BEGIN
            lrecMiscShipment.GET(ptrecOrderBuffer."Document No.");
            precrRecRef.GETTABLE(lrecMiscShipment);
            precLPHeader."Source Document" := precLPHeader."Source Document"::"Misc. Shipment";
            getShipFromAddress(lrecMiscShipment."Location Code", pasFromAddress);
            getShipToAddressFromMiscShipment(lrecMiscShipment, TRUE, pasToAddress);
          END;
      END;

      recDShipSetup.GET;
      //>>002 TPZ3206
      IF pasToAddress[8] = '' THEN BEGIN
        DSHIPSetup.GET;
        pasToAddress[8] := DSHIPSetup."Default Shipment PhoneNumber";
      END;
      //<<002 TPZ3206
      lsPhoneNo := pasToAddress[8];
      IF ( callShipToPhoneNoExtension(recDShipSetup."Shipment Extension Codeunit", ptrecOrderBuffer."Document Type", ptrecOrderBuffer."Document No.", lsPhoneNo) ) THEN
        IF ( lsPhoneNo <> '' ) THEN
          pasToAddress[8] := lsPhoneNo;

      IF ( callShipFromTaxIDExtension(recDShipSetup."Shipment Extension Codeunit", ptrecOrderBuffer."Document Type", ptrecOrderBuffer."Document No.", lsTaxType, lsTaxID) ) THEN BEGIN
        IF ( LOWERCASE(lsTaxType) = 'f' ) THEN BEGIN
          pasFromAddress[11] := lsTaxID;
        END ELSE IF ( LOWERCASE(lsTaxType) = 's' ) THEN BEGIN
          pasFromAddress[12] := lsTaxID;
        END;
      END;

      IF ( callShipToTaxIDExtension(recDShipSetup."Shipment Extension Codeunit", ptrecOrderBuffer."Document Type", ptrecOrderBuffer."Document No.", lsTaxType, lsTaxID) ) THEN BEGIN
        IF ( LOWERCASE(lsTaxType) = 'f' ) THEN BEGIN
          pasToAddress[11] := lsTaxID;
        END ELSE IF ( LOWERCASE(lsTaxType) = 's' ) THEN BEGIN
          pasToAddress[12] := lsTaxID;
        END;
      END;
    END;

    PROCEDURE getRateData@1000000015(VAR precrRecRef@1000000000 : RecordRef;VAR pasFromAddress@1000000004 : ARRAY [12] OF Text[100];VAR pasToAddress@1000000003 : ARRAY [12] OF Text[100]) : Text[100];
    VAR
      lrecWhseShipHeader@1000000002 : Record 7320;
      lrecSalesHeader@1000000007 : Record 36;
      lrecTransferHeader@1000000008 : Record 5740;
      lrecMiscShipment@1000000009 : Record 23044621;
      ltrecPackOrderBuffer@1000000011 : TEMPORARY Record 23044601;
      ltrecAPIParam@1000000001 : TEMPORARY Record 23044623;
      loptDocType@1000000010 : Option;
      lsOrderID@1000000006 : Text[100];
      lcodDocNo@1000000012 : Code[20];
      liAPICodeunit@1000000005 : Integer;
    BEGIN
      //<FUNC>
      //  Description:
      //  Called From:
      //  Side Effect:
      //</FUNC>

      CASE precrRecRef.NUMBER OF
        DATABASE::"Warehouse Shipment Header":
          BEGIN
            loptDocType := ltrecPackOrderBuffer."Document Type"::"Warehouse Shipment";
            lcodDocNo := FORMAT(precrRecRef.FIELD(1));
          END;
        DATABASE::"Transfer Header":
          BEGIN
            loptDocType := ltrecPackOrderBuffer."Document Type"::"Outbound Transfer";
            lcodDocNo := FORMAT(precrRecRef.FIELD(1));
          END;
        DATABASE::"Sales Header":
          BEGIN
            loptDocType := ltrecPackOrderBuffer."Document Type"::"Sales Order";
            lcodDocNo := FORMAT(precrRecRef.FIELD(3));
          END;
        DATABASE::"DSHIP Miscellaneous Shipment":
          BEGIN
            loptDocType := ltrecPackOrderBuffer."Document Type"::"Misc. Shipment";
            lcodDocNo := FORMAT(precrRecRef.FIELD(1));
          END;
        ELSE ERROR(tcUnknownDoc);
      END;

      buildAPIParam(ltrecAPIParam, ltrecAPIParam.Action::GetRates, loptDocType, lcodDocNo);
      callFreightIntegration(ltrecAPIParam);
      EXIT(ltrecAPIParam."Object ID");
    END;

    PROCEDURE checkUnpacked@1000000010(precrRecRef@1000000001 : RecordRef);
    VAR
      ltrecPackLineBuffer@1000000000 : TEMPORARY Record 23044602;
    BEGIN
      //<FUNC>
      //  Description: Asks for confirmation if there are unpacked lines on the shipment
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      IF ( NOT GUIALLOWED ) THEN EXIT;

      IF ( precrRecRef.NUMBER = DATABASE::"DSHIP Miscellaneous Shipment" ) THEN EXIT;

      recDShipSetup.GET;
      IF ( recDShipSetup."Warn On Unpacked Lines" = recDShipSetup."Warn On Unpacked Lines"::Never ) THEN EXIT;

      cuPackMgmt.getPackageData(precrRecRef, ltrecPackLineBuffer);
      ltrecPackLineBuffer.SETFILTER("License Plate No.", '%1', '');
      IF ( ltrecPackLineBuffer.FINDFIRST ) THEN BEGIN
        IF ( NOT CONFIRM(tcConfirmUnpacked) ) THEN
          ERROR('');
      END;
    END;

    PROCEDURE getCarrierID@1000000011(pcodShippingAgent@1000000000 : Code[20];pcodLocation@1000000002 : Code[20];pcodFreightIntegrator@1000000004 : Code[20]) : Text;
    VAR
      lrecDShipCarrier@1000000001 : Record 23044607;
      lrecDShipCarrierAccount@1000000003 : Record 23044612;
    BEGIN
      //<FUNC>
      //  Description: Returns the carrier's account ID
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      lrecDShipCarrier.SETRANGE(Code, pcodShippingAgent);
      lrecDShipCarrier.SETRANGE(lrecDShipCarrier."Freight Integ. Provider Code", pcodFreightIntegrator);
      lrecDShipCarrierAccount.SETRANGE(Code, pcodShippingAgent);
      lrecDShipCarrierAccount.SETRANGE("Location Code", pcodLocation);
      lrecDShipCarrierAccount.SETRANGE("Freight Integ. Provider Code", pcodFreightIntegrator);

      IF ( lrecDShipCarrierAccount.FINDFIRST ) THEN BEGIN
        EXIT(lrecDShipCarrierAccount."Account ID");
      END ELSE IF ( lrecDShipCarrier.FINDFIRST ) THEN BEGIN
        EXIT(lrecDShipCarrier."Account ID");
      END;

      EXIT('');
    END;

    PROCEDURE getCarrierService@1000000013(pcodShippingAgent@1000000000 : Code[20];pcodShippingAgentService@1000000001 : Code[20]) : Text;
    VAR
      lrecCarrierService@1000000002 : Record 23044611;
    BEGIN
      //<FUNC>
      //  Description: Returns the carrier service name based on the nav shipping agent and service
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      lrecCarrierService.SETRANGE("Shipping Agent Code", pcodShippingAgent);
      lrecCarrierService.SETRANGE("Shipping Agent Service Code", pcodShippingAgentService);
      IF ( lrecCarrierService.FINDFIRST ) THEN
        EXIT(lrecCarrierService."Service Name");

      EXIT('');
    END;

    PROCEDURE getCarrierIDStringByFreightInt@1000000057(pcodLocation@1000000000 : Code[20];pcodFreightIntegrator@1000000004 : Code[20]) : Text;
    VAR
      lrecDSCarrier@1000000001 : Record 23044607;
      lsCarriers@1000000002 : Text;
      lsTemp@1000000003 : Text;
      EShipAgentService@1000000005 : Record 14000708;
    BEGIN
      //<FUNC>
      //  Description: Concatenates a comma separated string of the carrier IDs by Freight Integrator
      //               Location specific carrier accounts take precedence
      //  Called From: Codeunit DSHIP EasyPost Rate Mgmt. (CU23044609)
      //  Side Effect: None
      //</FUNC>

      lsCarriers := '';

      IF ( pcodFreightIntegrator <> '' ) THEN BEGIN
        lrecDSCarrier.SETRANGE("Freight Integ. Provider Code", pcodFreightIntegrator);
        IF ( lrecDSCarrier.FINDSET(FALSE) ) THEN BEGIN
          REPEAT
            lsTemp := getCarrierID(lrecDSCarrier.Code, pcodLocation, pcodFreightIntegrator);
            IF ( lsTemp <> '' ) THEN BEGIN
              lsCarriers += lsTemp + ',';
            END; //if lsTemp <> ''
          UNTIL lrecDSCarrier.NEXT = 0;
        END; //if lrecDSCarrier.FINDSET
      END; // if pcodfreightint <> ''

      EXIT(lsCarriers);
    END;

    PROCEDURE getCarrierIDAndServiceByShipOptions@1000000109(VAR precShipOptions@1000000002 : Record 23044616;VAR psCarrierID@1000000003 : Text;VAR psCarrierService@1000000004 : Text;pcodFreightInt@1000000000 : Code[20]);
    VAR
      ltrecOrderBuffer@1000000005 : TEMPORARY Record 23044601;
      lrecSalesHeader@1000000006 : Record 36;
      lrecTransferHeader@1000000007 : Record 5740;
      lrecWhseShipHeader@1000000008 : Record 7320;
      lcodShippingAgent@1000000010 : Code[20];
      lcodShippingService@1000000009 : Code[20];
      lcodLocation@1000000011 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Returns the ship agent and service from the order
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      lcodShippingAgent := precShipOptions."Shipping Agent Code";
      lcodShippingService := precShipOptions."Shipping Agent Service Code";

      CASE precShipOptions."Document Type" OF
        precShipOptions."Document Type"::"Sales Order":
          BEGIN
            IF ( NOT lrecSalesHeader.GET(precShipOptions."Document Subtype", precShipOptions."Document No.") ) THEN EXIT;
            lcodLocation := lrecSalesHeader."Location Code";
          END;
        precShipOptions."Document Type"::"Outbound Transfer":
          BEGIN
            IF ( NOT lrecTransferHeader.GET(precShipOptions."Document No.") ) THEN EXIT;
            lcodLocation := lrecTransferHeader."Transfer-from Code";
          END;
        precShipOptions."Document Type"::"Warehouse Shipment":
          BEGIN
            IF ( NOT lrecWhseShipHeader.GET(precShipOptions."Document No.") ) THEN EXIT;
            lcodLocation := lrecWhseShipHeader."Location Code";
          END;
      END;

      IF ( lcodShippingAgent = '' ) THEN BEGIN
        psCarrierID := getCarrierIDStringByFreightInt(lcodLocation, pcodFreightInt);
      END ELSE BEGIN
        psCarrierID := getCarrierID(lcodShippingAgent, lcodLocation, pcodFreightInt);
        psCarrierService := getCarrierService(lcodShippingAgent, lcodShippingService);
      END;
    END;

    PROCEDURE getShipAgentAndServiceByCarrierIDAndService@1000000117(psCarrierID@1000000000 : Text;psCarrierService@1000000001 : Text;VAR pcodShipAgent@1000000005 : Code[20];VAR pcodShipAgentService@1000000006 : Code[20]);
    VAR
      lrecShippingAgentService@1000000002 : Record 5790;
    BEGIN
      //<FUNC>
      //  Description: Get Ship Agent and Ship Agent Serevice from carrier id and service name
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: Errors if not found
      //</FUNC>

      pcodShipAgent := getShipAgentByCarrierID(psCarrierID, FALSE);
      pcodShipAgentService := getShipAgentServiceByName(pcodShipAgent, psCarrierService);
      IF ( pcodShipAgentService = '' ) THEN BEGIN
        pcodShipAgent := getShipAgentByCarrierID(psCarrierID, TRUE);
        pcodShipAgentService := getShipAgentServiceByName(pcodShipAgent, psCarrierService);
      END;
    END;

    PROCEDURE getShipAgentAndServiceByOrderNo@1000000121(poptDocType@1000000003 : Option;pcodDocNo@1000000002 : Code[20];VAR pcodShipAgent@1000000001 : Code[20];VAR pcodShipAgentService@1000000000 : Code[20]);
    VAR
      ltrecAPIParam@1000000004 : TEMPORARY Record 23044623;
      lrecMiscShipment@1000000005 : Record 23044621;
      lrecTransferHeader@1000000006 : Record 5740;
      lrecSalesHeader@1000000007 : Record 36;
      lrecWhseShipHeader@1000000008 : Record 7320;
      SalesHeader@1000000010 : Record 36;
      DSHIPPackageListManagement@1000000009 : Codeunit 23044600;
    BEGIN
      //<FUNC>
      //  Description: Returns the ship agent and service based on order
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      CASE poptDocType OF
        ltrecAPIParam."Document Type"::"Misc. Shipment":
          BEGIN
            lrecMiscShipment.GET(pcodDocNo);
            pcodShipAgent := lrecMiscShipment."Shipping Agent Code";
            pcodShipAgentService := lrecMiscShipment."Shipping Agent Service Code";
          END;
        ltrecAPIParam."Document Type"::"Outbound Transfer":
          BEGIN
            lrecTransferHeader.GET(pcodDocNo);
            pcodShipAgent := lrecTransferHeader."Shipping Agent Code";
            pcodShipAgentService := lrecTransferHeader."Shipping Agent Service Code";
          END;
        ltrecAPIParam."Document Type"::"Sales Order":
          BEGIN
            lrecSalesHeader.GET(lrecSalesHeader."Document Type"::Order, pcodDocNo);
            pcodShipAgent := lrecSalesHeader."Shipping Agent Code";
            pcodShipAgentService := lrecSalesHeader."Shipping Agent Service Code";
          END;
        ltrecAPIParam."Document Type"::"Sales Order":
          BEGIN
            lrecSalesHeader.GET(lrecSalesHeader."Document Type"::Quote, pcodDocNo);
            pcodShipAgent := lrecSalesHeader."Shipping Agent Code";
            pcodShipAgentService := lrecSalesHeader."Shipping Agent Service Code";
          END;
        ltrecAPIParam."Document Type"::"Warehouse Shipment":
          BEGIN
            lrecWhseShipHeader.GET(pcodDocNo);
            pcodShipAgent := lrecWhseShipHeader."Shipping Agent Code";
            pcodShipAgentService := lrecWhseShipHeader."Shipping Agent Service Code";
            //<vaseem>
            IF SalesHeader.GET(SalesHeader."Document Type"::Order,DSHIPPackageListManagement.GetSONumber(lrecWhseShipHeader,pcodDocNo)) THEN BEGIN //TPZ3257 Added pcodDocNo parameter
              pcodShipAgent := SalesHeader."Shipping Agent Code";
              pcodShipAgentService := SalesHeader."Shipping Agent Service Code";
            END;
            //</vaseem>
            //-->Pankaj
            IF lrecTransferHeader.GET(DSHIPPackageListManagement.GetSONumber(lrecWhseShipHeader,pcodDocNo)) THEN BEGIN  //TPZ3257 Added pcodDocNo parameter
              pcodShipAgent := lrecTransferHeader."Shipping Agent Code";
              pcodShipAgentService := lrecTransferHeader."Shipping Agent Service Code";
            END;
            //<--TPZ3229
          END;
      END;
    END;

    PROCEDURE getShipAgentByCarrierID@1000000031(psCarrier@1000000000 : Text;pbFindLast@1000000004 : Boolean) : Code[20];
    VAR
      lrecDShipCarrier@1000000001 : Record 23044607;
      lrecDShipCarrierAcc@1000000002 : Record 23044612;
      lcodAccID@1000000003 : Code[10];
    BEGIN
      //<FUNC>
      //  Description:
      //  Called From:
      //  Side Effect:
      //</FUNC>

      lrecDShipCarrier.SETRANGE("Account ID", psCarrier);
      lrecDShipCarrierAcc.SETRANGE("Account ID", psCarrier);

      IF ( pbFindLast ) THEN BEGIN
        IF ( lrecDShipCarrier.FINDLAST ) THEN BEGIN
          lcodAccID := lrecDShipCarrier.Code;
        END ELSE IF ( lrecDShipCarrierAcc.FINDLAST ) THEN BEGIN
          lcodAccID := lrecDShipCarrierAcc.Code;
        END;
      END ELSE BEGIN
        IF ( lrecDShipCarrier.FINDFIRST ) THEN BEGIN
          lcodAccID := lrecDShipCarrier.Code;
        END ELSE IF ( lrecDShipCarrierAcc.FINDFIRST ) THEN BEGIN
          lcodAccID := lrecDShipCarrierAcc.Code;
        END;
      END;

      EXIT(lcodAccID);
    END;

    PROCEDURE getShipAgentServiceByName@1000000033(pcodShipmentAgentCode@1000000001 : Code[20];psCarrierService@1000000000 : Text) : Code[20];
    VAR
      lrecCarrierService@1000000002 : Record 23044611;
    BEGIN
      //<FUNC>
      //  Description:
      //  Called From:
      //  Side Effect:
      //</FUNC>

      lrecCarrierService.SETRANGE("Shipping Agent Code", pcodShipmentAgentCode);
      lrecCarrierService.SETRANGE("Service Name", psCarrierService);
      IF ( lrecCarrierService.FINDFIRST ) THEN
        EXIT(lrecCarrierService."Shipping Agent Service Code");

      EXIT('');
    END;

    PROCEDURE checkShipAgent@1000000113(psCarrierID@1000000000 : Text;psCarrierService@1000000001 : Text);
    VAR
      lrecShippingAgentService@1000000002 : Record 5790;
      lcodShipAgent@1000000004 : Code[20];
      lcodShipAgentService@1000000003 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Checks to see if agent and service are in base tables
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: Errors if not found
      //</FUNC>

      getShipAgentAndServiceByCarrierIDAndService(psCarrierID, psCarrierService, lcodShipAgent, lcodShipAgentService);

      IF ( NOT lrecShippingAgentService.GET(lcodShipAgent, lcodShipAgentService) ) THEN
        ERROR(tcAgentServiceError, lcodShipAgent, psCarrierService);
    END;

    PROCEDURE getShipAddressesByDocument@1000000089(poptDocType@1000000000 : Option;pcodDocNo@1000000003 : Code[20];VAR pasFromAddress@1000000001 : ARRAY [12] OF Text[100];VAR pasToAddress@1000000002 : ARRAY [12] OF Text[100]);
    VAR
      ltrecOrderBuffer@1000000004 : TEMPORARY Record 23044601;
      lrecSalesHeader@1000000005 : Record 36;
      lrecTransferHeader@1000000006 : Record 5740;
      lrecWhseShipHeader@1000000007 : Record 7320;
      lrecMiscShipment@1000000009 : Record 23044621;
      lcodLocation@1000000008 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Returns the ship from and to address based on the ship options
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      CASE poptDocType OF
        ltrecOrderBuffer."Document Type"::"Sales Order":
          BEGIN
            IF (NOT lrecSalesHeader.GET(lrecSalesHeader."Document Type"::Order, pcodDocNo)) THEN EXIT;
            lcodLocation := lrecSalesHeader."Location Code";
            setShipToAddressForSalesOrder(lrecSalesHeader, TRUE, pasToAddress);
          END;
        ltrecOrderBuffer."Document Type"::"Outbound Transfer":
          BEGIN
            IF (NOT lrecTransferHeader.GET(pcodDocNo)) THEN EXIT;
            lcodLocation := lrecTransferHeader."Transfer-from Code";
            getShipToAddressFromTransferHeader(lrecTransferHeader, TRUE, pasToAddress);
          END;
        ltrecOrderBuffer."Document Type"::"Warehouse Shipment":
          BEGIN
            IF (NOT lrecWhseShipHeader.GET(pcodDocNo)) THEN EXIT;
            lcodLocation := lrecWhseShipHeader."Location Code";
            setShipToAddressForWhseShip(lrecWhseShipHeader, TRUE, pasToAddress);
          END;
        ltrecOrderBuffer."Document Type"::"Misc. Shipment":
          BEGIN
            IF (NOT lrecMiscShipment.GET(pcodDocNo)) THEN EXIT;
            lcodLocation := lrecMiscShipment."Location Code";
            getShipToAddressFromMiscShipment(lrecMiscShipment, TRUE, pasToAddress);
          END;
      END;

      getShipFromAddress(lcodLocation, pasFromAddress);
    END;

    PROCEDURE getShipFromAddress@1000000002(pcodLocationCode@1000000000 : Code[10];VAR pasFromAddress@1000000001 : ARRAY [12] OF Text[100]);
    VAR
      ltrecOrderBuffer@1000000004 : TEMPORARY Record 23044601;
      lrecLocation@1000000002 : Record 14;
      lcodCountry@1000000003 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Gets the Ship From address based on a location.
      //               Populates the result in the return array.  See code for specific index mapping.
      //  Called From: This codeunit and codeunit 23044603
      //  Side Effect: None
      //</FUNC>

      recDShipSetup.GET;

      lrecLocation.GET(pcodLocationCode);
      lrecLocation.TESTFIELD(Name);
      lrecLocation.TESTFIELD(Address);
      lrecLocation.TESTFIELD(City);
      //lrecLocation.TESTFIELD(County);
      lcodCountry := lrecLocation."Country/Region Code";
      IF ( lcodCountry <> '' ) THEN
        lrecLocation.TESTFIELD("Country/Region Code")
      ELSE BEGIN
        lcodCountry := recDShipSetup."Ship-To Country/Region Code";
      END;
      lrecLocation.TESTFIELD("Post Code");
      lrecLocation.TESTFIELD("Phone No.");

      pasFromAddress[1] := COPYSTR(lrecLocation.Name, 1, 30);
      pasFromAddress[2] := lrecLocation.Address;
      pasFromAddress[3] := lrecLocation."Address 2";
      pasFromAddress[4] := lrecLocation.City;
      pasFromAddress[5] := lrecLocation.County;
      pasFromAddress[6] := lcodCountry;
      pasFromAddress[7] := lrecLocation."Post Code";
      pasFromAddress[8] := lrecLocation."Phone No.";
      pasFromAddress[9] := lrecLocation."E-Mail";
      pasFromAddress[10] := lrecLocation.Contact;
    END;

    PROCEDURE getShipToAddressFromShipToCode@1000000004(pcodCustomerNo@1000000001 : Code[20];pcodShipToCode@1000000002 : Code[10];pbForceValues@1000000004 : Boolean;VAR pasToAddress@1000000000 : ARRAY [12] OF Text[100]);
    VAR
      lrecShipToAddress@1000000003 : Record 222;
      lcodCountry@1000000005 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Gets the Ship To address based on Ship To Address record.
      //               Populates the result in the return array.  See code for specific index mapping.
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      lrecShipToAddress.GET(pcodCustomerNo, pcodShipToCode);
      IF ( pbForceValues ) THEN BEGIN
        lrecShipToAddress.TESTFIELD(Name);
        lrecShipToAddress.TESTFIELD(Address);
        lrecShipToAddress.TESTFIELD(City);
        //lrecShipToAddress.TESTFIELD(County);
        lcodCountry := lrecShipToAddress."Country/Region Code";
        IF ( lcodCountry <> '' ) THEN
          lrecShipToAddress.TESTFIELD("Country/Region Code")
        ELSE BEGIN
          recDShipSetup.GET;
          lcodCountry := recDShipSetup."Ship-To Country/Region Code";
        END;
        lrecShipToAddress.TESTFIELD("Post Code");
        lrecShipToAddress.TESTFIELD("Phone No.");
      END ELSE BEGIN
        lcodCountry := lrecShipToAddress."Country/Region Code";
        IF ( lcodCountry = '' ) THEN BEGIN
          recDShipSetup.GET;
          lcodCountry := recDShipSetup."Ship-To Country/Region Code";
        END;
      END;

      pasToAddress[1] := COPYSTR(lrecShipToAddress.Name, 1, 30);
      pasToAddress[2] := lrecShipToAddress.Address;
      pasToAddress[3] := lrecShipToAddress."Address 2";
      pasToAddress[4] := lrecShipToAddress.City;
      pasToAddress[5] := lrecShipToAddress.County;
      pasToAddress[6] := lcodCountry;
      pasToAddress[7] := lrecShipToAddress."Post Code";
      pasToAddress[8] := lrecShipToAddress."Phone No.";
      pasToAddress[9] := lrecShipToAddress."E-Mail";
      pasToAddress[10] := lrecShipToAddress.Contact;
    END;

    PROCEDURE getShipToAddressFromSalesHeader@1000000008(precSalesHeader@1000000001 : Record 36;pbForceValues@1000000003 : Boolean;VAR pasToAddress@1000000000 : ARRAY [12] OF Text[100]);
    VAR
      lrecCustomer@1000000002 : Record 18;
      lcodCountry@1000000004 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Populates the array with sales order ship-to address
      //  Called From: This codeunit
      //               Codeunit DSHIP Package List Management (ID: 23044600)
      //               Codeunit 23044603
      //  Side Effect: None
      //</FUNC>

      //<TPZ2721> //blocked to always pick ship to address from sales order
      // IF ( precSalesHeader."Ship-to Code" <> '' ) THEN BEGIN
      //  getShipToAddressFromShipToCode(precSalesHeader."Sell-to Customer No.", precSalesHeader."Ship-to Code", pbForceValues, pasToAddress);
      // END ELSE BEGIN
      //</TPZ2721>
        IF ( lrecCustomer.GET(precSalesHeader."Sell-to Customer No.") ) THEN BEGIN
          IF ( pbForceValues ) THEN BEGIN
            precSalesHeader.TESTFIELD("Ship-to Name");
            precSalesHeader.TESTFIELD("Ship-to Address");
            precSalesHeader.TESTFIELD("Ship-to City");
            //precSalesHeader.TESTFIELD("Ship-to County");
            lcodCountry := precSalesHeader."Ship-to Country/Region Code";
            IF ( lcodCountry = '' ) THEN BEGIN
              recDShipSetup.GET;
              lcodCountry := recDShipSetup."Ship-To Country/Region Code";
            END ELSE
              precSalesHeader.TESTFIELD("Ship-to Country/Region Code");
            precSalesHeader.TESTFIELD("Ship-to Post Code");
            lrecCustomer.TESTFIELD("Phone No.");
          END ELSE BEGIN
            lcodCountry := precSalesHeader."Ship-to Country/Region Code";
            IF ( lcodCountry = '' ) THEN BEGIN
              recDShipSetup.GET;
              lcodCountry := recDShipSetup."Ship-To Country/Region Code";
            END;
          END;

          pasToAddress[1] := COPYSTR(precSalesHeader."Ship-to Name", 1, 30);
          pasToAddress[2] := precSalesHeader."Ship-to Address";
          pasToAddress[3] := precSalesHeader."Ship-to Address 2";
          pasToAddress[4] := precSalesHeader."Ship-to City";
          pasToAddress[5] := precSalesHeader."Ship-to County";
          pasToAddress[6] := precSalesHeader."Ship-to Country/Region Code";
          pasToAddress[7] := precSalesHeader."Ship-to Post Code";
          //pasToAddress[8] := lrecCustomer."Phone No."; //TPZ2721
          pasToAddress[8] := precSalesHeader."Ship-to Phone No.";//TPZ2721
          pasToAddress[9] := lrecCustomer."E-Mail";
          pasToAddress[10] := precSalesHeader."Ship-to Contact";
        END;
      //END;//<TPZ2721>
    END;

    PROCEDURE getShipToAddressFromTransferHeader@1000000005(precTransferHeader@1000000001 : Record 5740;pbForceValues@1000000003 : Boolean;VAR pasToAddress@1000000000 : ARRAY [12] OF Text[100]);
    VAR
      lrecLocation@1000000002 : Record 14;
      lcodCountry@1000000004 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Populates the array with transfer order ship-to address
      //  Called From: This codeunit, Codeunit DSHIP Package List Management (ID: 23044600), and codeunit 23044603
      //  Side Effect: None
      //</FUNC>

      IF ( lrecLocation.GET(precTransferHeader."Transfer-to Code") ) THEN ;

      pasToAddress[1] := COPYSTR(precTransferHeader."Transfer-to Name", 1, 30);
      pasToAddress[2] := precTransferHeader."Transfer-to Address";
      pasToAddress[3] := precTransferHeader."Transfer-to Address 2";
      pasToAddress[4] := precTransferHeader."Transfer-to City";
      pasToAddress[5] := precTransferHeader."Transfer-to County";
      lcodCountry := precTransferHeader."Trsf.-to Country/Region Code";
      IF ( lcodCountry = '' ) THEN BEGIN
        recDShipSetup.GET;
        lcodCountry := recDShipSetup."Ship-To Country/Region Code";
      END;
      pasToAddress[6] := lcodCountry;
      pasToAddress[7] := precTransferHeader."Transfer-to Post Code";
      pasToAddress[8] := lrecLocation."Phone No.";
      pasToAddress[9] := lrecLocation."E-Mail";
      pasToAddress[10] := precTransferHeader."Transfer-from Contact";
    END;

    PROCEDURE getShipToAddressFromPurchaseHeader@1000000059(precPurchaseHeader@1000000001 : Record 38;pbForceValues@1000000003 : Boolean;VAR pasToAddress@1000000000 : ARRAY [12] OF Text[100]);
    VAR
      lrecVendor@1000000002 : Record 23;
      lcodCountry@1000000004 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Populates the array with purchase return order ship-to address
      //  Called From: This codeunit (CU23044602)
      //               Codeunit DSHIP Package List Management (CU23044600)
      //               Codeunit DSHIP Package Customs Mgmt (CU23044603)
      //  Side Effect: None
      //</FUNC>

      IF ( lrecVendor.GET(precPurchaseHeader."Buy-from Vendor No.") ) THEN ;

      pasToAddress[1] := COPYSTR(precPurchaseHeader."Ship-to Name", 1, 30);
      pasToAddress[2] := precPurchaseHeader."Ship-to Address";
      pasToAddress[3] := precPurchaseHeader."Ship-to Address 2";
      pasToAddress[4] := precPurchaseHeader."Ship-to City";
      pasToAddress[5] := precPurchaseHeader."Ship-to County";
      lcodCountry := precPurchaseHeader."Ship-to Country/Region Code";
      IF ( lcodCountry = '' ) THEN BEGIN
        recDShipSetup.GET;
        lcodCountry := recDShipSetup."Ship-To Country/Region Code";
      END;
      pasToAddress[6] := lcodCountry;
      pasToAddress[7] := precPurchaseHeader."Ship-to Post Code";
      pasToAddress[8] := lrecVendor."Phone No.";
      pasToAddress[9] := lrecVendor."E-Mail";
      pasToAddress[10] := precPurchaseHeader."Ship-to Contact";
    END;

    PROCEDURE getShipToAddressFromServiceHeader@1000000091(precServiceHeader@1000000001 : Record 5900;pbForceValues@1000000003 : Boolean;VAR pasToAddress@1000000000 : ARRAY [12] OF Text[100]);
    VAR
      lrecCustomer@1000000002 : Record 18;
      lcodCountry@1000000004 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Populates the array with service order ship-to address
      //  Called From: This codeunit (CU23044602)
      //               Codeunit DSHIP Package List Management (CU23044600)
      //               Codeunit DSHIP Package Customs Mgmt (CU23044603)
      //  Side Effect: None
      //</FUNC>

      IF ( lrecCustomer.GET(precServiceHeader."Customer No.") ) THEN ;

      pasToAddress[1] := COPYSTR(precServiceHeader."Ship-to Name", 1, 30);
      pasToAddress[2] := precServiceHeader."Ship-to Address";
      pasToAddress[3] := precServiceHeader."Ship-to Address 2";
      pasToAddress[4] := precServiceHeader."Ship-to City";
      pasToAddress[5] := precServiceHeader."Ship-to County";
      lcodCountry := precServiceHeader."Ship-to Country/Region Code";
      IF ( lcodCountry = '' ) THEN BEGIN
        recDShipSetup.GET;
        lcodCountry := recDShipSetup."Ship-To Country/Region Code";
      END;
      pasToAddress[6] := lcodCountry;
      pasToAddress[7] := precServiceHeader."Ship-to Post Code";
      pasToAddress[8] := precServiceHeader."Ship-to Phone";
      pasToAddress[9] := precServiceHeader."Ship-to E-Mail";
      pasToAddress[10] := precServiceHeader."Ship-to Contact";
    END;

    PROCEDURE getShipToAddressFromMiscShipment@1000000060(precMiscShipment@1000000001 : Record 23044621;pbForceValues@1000000003 : Boolean;VAR pasToAddress@1000000000 : ARRAY [12] OF Text[100]);
    VAR
      lcodCountry@1000000004 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Populates the array with the misc shipment ship-to address
      //  Called From: This codeunit (CU23044602)
      //               Codeunit DSHIP Package List Management (CU23044600)
      //               Codeunit DSHIP Package Customs Mgmt (CU23044603)
      //  Side Effect: None
      //</FUNC>

      pasToAddress[1] := COPYSTR(precMiscShipment.Company, 1, 30);
      pasToAddress[2] := precMiscShipment.Address;
      pasToAddress[3] := precMiscShipment."Address 2";
      pasToAddress[4] := precMiscShipment.City;
      pasToAddress[5] := precMiscShipment.County;
      lcodCountry := precMiscShipment."Country/Region Code";
      IF ( lcodCountry = '' ) THEN BEGIN
        recDShipSetup.GET;
        lcodCountry := recDShipSetup."Ship-To Country/Region Code";
      END;
      pasToAddress[6] := lcodCountry;
      pasToAddress[7] := precMiscShipment."Post Code";
      pasToAddress[8] := precMiscShipment."Phone No.";
      pasToAddress[9] := precMiscShipment."E-Mail";
      pasToAddress[10] := precMiscShipment.Name;
    END;

    PROCEDURE setShipToAddressForSalesOrder@1000000071(precSalesHeader@1000000000 : Record 36;pbForceValues@1000000002 : Boolean;VAR pasToAddress@1000000001 : ARRAY [12] OF Text[100]);
    VAR
      lrecPackageBuffer@1000000003 : Record 23044601;
      lcodShipToCode@1000000004 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Sets the ship to for a sales order
      //  Called From: This codeunit
      //               Codeunit DSHIP Package List Management (ID: 23044600)
      //               Codeunit 23044603
      //  Side Effect: None
      //</FUNC>

      recDShipSetup.GET;
      IF ( callShipToExtension(recDShipSetup."Shipment Extension Codeunit", '' , lrecPackageBuffer."Document Type"::"Sales Order", precSalesHeader."No.", lcodShipToCode) ) THEN
        getShipToAddressFromShipToCode(precSalesHeader."Sell-to Customer No.", lcodShipToCode, pbForceValues, pasToAddress)
      ELSE
        getShipToAddressFromSalesHeader(precSalesHeader, pbForceValues, pasToAddress);
    END;

    PROCEDURE setShipToAddressForWhseShip@1000000072(precWhseShipHeader@1000000004 : Record 7320;pbForceValues@1000000003 : Boolean;VAR pasToAddress@1000000002 : ARRAY [12] OF Text[100]);
    VAR
      lrecPackageBuffer@1000000001 : Record 23044601;
      lrecSalesHeader@1000000005 : Record 36;
      lrecWhseShipLine@1000000006 : Record 7321;
      lrecTransferHeader@1000000007 : Record 5740;
      lrecPurchaseHeader@1000000008 : Record 38;
      lrecServiceHeader@1000000009 : Record 5900;
      ltrecWhseShipLine@1000000012 : TEMPORARY Record 7321;
      lbWhseShipLineFound@1000000011 : Boolean;
      lcodShipToCode@1000000000 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Sets the ship to for a warehouse shipment
      //  Called From: This codeunit
      //               Codeunit DSHIP Package List Management (ID: 23044600)
      //               Codeunit 23044603
      //  Side Effect: None
      //</FUNC>

      lrecWhseShipLine.SETRANGE("No.", precWhseShipHeader."No.");
      IF (lrecWhseShipLine.FINDSET(FALSE)) THEN BEGIN
        REPEAT
          // Use temp to avoid queries to db
          ltrecWhseShipLine.COPY(lrecWhseShipLine, FALSE);
          ltrecWhseShipLine.INSERT(FALSE);
        UNTIL(lrecWhseShipLine.NEXT() = 0);
      END;

      // line must still require handling
      ltrecWhseShipLine.SETFILTER("Qty. Outstanding", '>0');

      // look only for picked line
      ltrecWhseShipLine.SETFILTER("Qty. Picked", '>0');
      lbWhseShipLineFound := ltrecWhseShipLine.FINDFIRST();
      IF ( NOT lbWhseShipLineFound ) THEN BEGIN
        // location may have picks turned off
        // look only for ready to ship line
        ltrecWhseShipLine.SETRANGE("Qty. Picked");
        ltrecWhseShipLine.SETFILTER("Qty. to Ship", '>0');
        lbWhseShipLineFound := ltrecWhseShipLine.FINDFIRST();
        IF ( NOT lbWhseShipLineFound ) THEN BEGIN
          // qty to ship may be blank
          // look only for outstanding line
          ltrecWhseShipLine.SETRANGE("Qty. to Ship");
          lbWhseShipLineFound := ltrecWhseShipLine.FINDFIRST();
          IF ( NOT lbWhseShipLineFound ) THEN BEGIN
            // attempt to find any line
            ltrecWhseShipLine.SETRANGE("Qty. Outstanding");
            lbWhseShipLineFound := ltrecWhseShipLine.FINDFIRST();
          END;
        END;
      END;

      CASE ltrecWhseShipLine."Source Document" OF
        ltrecWhseShipLine."Source Document"::"Sales Order":
          BEGIN
            IF lrecSalesHeader.GET(ltrecWhseShipLine."Source Subtype", ltrecWhseShipLine."Source No.") THEN; //vaseem
            recDShipSetup.GET;
            IF ( callShipToExtension(recDShipSetup."Shipment Extension Codeunit", '' , lrecPackageBuffer."Document Type"::"Warehouse Shipment", precWhseShipHeader."No.", lcodShipToCode) ) THEN
              getShipToAddressFromShipToCode(lrecSalesHeader."Sell-to Customer No.", lcodShipToCode, pbForceValues, pasToAddress)
            ELSE
              getShipToAddressFromSalesHeader(lrecSalesHeader, pbForceValues, pasToAddress);
          END;
        ltrecWhseShipLine."Source Document"::"Outbound Transfer":
          BEGIN
            lrecTransferHeader.GET(ltrecWhseShipLine."Source No.");
            getShipToAddressFromTransferHeader(lrecTransferHeader, TRUE, pasToAddress);
          END;
        ltrecWhseShipLine."Source Document"::"Purchase Return Order":
          BEGIN
            lrecPurchaseHeader.GET(ltrecWhseShipLine."Source Subtype", ltrecWhseShipLine."Source No.");
            getShipToAddressFromPurchaseHeader(lrecPurchaseHeader, TRUE, pasToAddress);
          END;
        ltrecWhseShipLine."Source Document"::"Service Order":
          BEGIN
            lrecServiceHeader.GET(ltrecWhseShipLine."Source Subtype", ltrecWhseShipLine."Source No.");
            getShipToAddressFromServiceHeader(lrecServiceHeader, TRUE, pasToAddress);
          END;
      END; //case
    END;

    PROCEDURE getShipToAddressFromSalesShipmentHeader@1000000105(precSalesShipmentHeader@1000000001 : Record 110;pbForceValues@1000000003 : Boolean;VAR pasToAddress@1000000000 : ARRAY [12] OF Text[100]);
    VAR
      lrecCustomer@1000000002 : Record 18;
      lcodCountry@1000000004 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Populates the array with sales shipment ship-to address
      //  Called From: Report 23044606
      //  Side Effect: None
      //</FUNC>

      IF ( precSalesShipmentHeader."Ship-to Code" <> '' ) THEN BEGIN
        getShipToAddressFromShipToCode(precSalesShipmentHeader."Sell-to Customer No.", precSalesShipmentHeader."Ship-to Code", pbForceValues, pasToAddress);
      END ELSE BEGIN
        IF ( lrecCustomer.GET(precSalesShipmentHeader."Sell-to Customer No.") ) THEN BEGIN
          IF ( pbForceValues ) THEN BEGIN
            precSalesShipmentHeader.TESTFIELD("Ship-to Name");
            precSalesShipmentHeader.TESTFIELD("Ship-to Address");
            precSalesShipmentHeader.TESTFIELD("Ship-to City");
            //precSalesHeader.TESTFIELD("Ship-to County");
            lcodCountry := precSalesShipmentHeader."Ship-to Country/Region Code";
            IF ( lcodCountry = '' ) THEN BEGIN
              recDShipSetup.GET;
              lcodCountry := recDShipSetup."Ship-To Country/Region Code";
            END ELSE
              precSalesShipmentHeader.TESTFIELD("Ship-to Country/Region Code");
            precSalesShipmentHeader.TESTFIELD("Ship-to Post Code");
            lrecCustomer.TESTFIELD("Phone No.");
          END ELSE BEGIN
            lcodCountry := precSalesShipmentHeader."Ship-to Country/Region Code";
            IF ( lcodCountry = '' ) THEN BEGIN
              recDShipSetup.GET;
              lcodCountry := recDShipSetup."Ship-To Country/Region Code";
            END;
          END;

          pasToAddress[1] := COPYSTR(precSalesShipmentHeader."Ship-to Name", 1, 30);
          pasToAddress[2] := precSalesShipmentHeader."Ship-to Address";
          pasToAddress[3] := precSalesShipmentHeader."Ship-to Address 2";
          pasToAddress[4] := precSalesShipmentHeader."Ship-to City";
          pasToAddress[5] := precSalesShipmentHeader."Ship-to County";
          pasToAddress[6] := precSalesShipmentHeader."Ship-to Country/Region Code";
          pasToAddress[7] := precSalesShipmentHeader."Ship-to Post Code";
          pasToAddress[8] := lrecCustomer."Phone No.";
          pasToAddress[9] := lrecCustomer."E-Mail";
          pasToAddress[10] := precSalesShipmentHeader."Ship-to Contact";
        END;
      END;
    END;

    PROCEDURE getShipToAddressFromServiceShipmentHeader@1000000108(precServiceShipmentHeader@1000000001 : Record 5990;pbForceValues@1000000003 : Boolean;VAR pasToAddress@1000000000 : ARRAY [12] OF Text[100]);
    VAR
      lrecCustomer@1000000002 : Record 18;
      lcodCountry@1000000004 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Populates the array with service shipment ship-to address
      //  Called From: Report 23044606
      //  Side Effect: None
      //</FUNC>

      IF ( lrecCustomer.GET(precServiceShipmentHeader."Customer No.") ) THEN ;

      pasToAddress[1] := COPYSTR(precServiceShipmentHeader."Ship-to Name", 1, 30);
      pasToAddress[2] := precServiceShipmentHeader."Ship-to Address";
      pasToAddress[3] := precServiceShipmentHeader."Ship-to Address 2";
      pasToAddress[4] := precServiceShipmentHeader."Ship-to City";
      pasToAddress[5] := precServiceShipmentHeader."Ship-to County";
      lcodCountry := precServiceShipmentHeader."Ship-to Country/Region Code";
      IF ( lcodCountry = '' ) THEN BEGIN
        recDShipSetup.GET;
        lcodCountry := recDShipSetup."Ship-To Country/Region Code";
      END;
      pasToAddress[6] := lcodCountry;
      pasToAddress[7] := precServiceShipmentHeader."Ship-to Post Code";
      pasToAddress[8] := precServiceShipmentHeader."Ship-to Phone";
      pasToAddress[9] := precServiceShipmentHeader."Ship-to E-Mail";
      pasToAddress[10] := precServiceShipmentHeader."Ship-to Contact";
    END;

    PROCEDURE getShipToAddressFromTransferShipmentHeader@1000000111(precTransferShipmentHeader@1000000001 : Record 5744;pbForceValues@1000000003 : Boolean;VAR pasToAddress@1000000000 : ARRAY [12] OF Text[100]);
    VAR
      lrecLocation@1000000002 : Record 14;
      lcodCountry@1000000004 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Populates the array with transfer shipment ship-to address
      //  Called From: Report 23044606
      //  Side Effect: None
      //</FUNC>

      IF ( lrecLocation.GET(precTransferShipmentHeader."Transfer-to Code") ) THEN ;

      pasToAddress[1] := COPYSTR(precTransferShipmentHeader."Transfer-to Name", 1, 30);
      pasToAddress[2] := precTransferShipmentHeader."Transfer-to Address";
      pasToAddress[3] := precTransferShipmentHeader."Transfer-to Address 2";
      pasToAddress[4] := precTransferShipmentHeader."Transfer-to City";
      pasToAddress[5] := precTransferShipmentHeader."Transfer-to County";
      lcodCountry := precTransferShipmentHeader."Trsf.-to Country/Region Code";
      IF ( lcodCountry = '' ) THEN BEGIN
        recDShipSetup.GET;
        lcodCountry := recDShipSetup."Ship-To Country/Region Code";
      END;
      pasToAddress[6] := lcodCountry;
      pasToAddress[7] := precTransferShipmentHeader."Transfer-to Post Code";
      pasToAddress[8] := lrecLocation."Phone No.";
      pasToAddress[9] := lrecLocation."E-Mail";
      pasToAddress[10] := precTransferShipmentHeader."Transfer-from Contact";
    END;

    PROCEDURE getShipToAddressFromReturnShipmentHeader@1000000114(precReturnShipmentHeader@1000000001 : Record 6650;pbForceValues@1000000003 : Boolean;VAR pasToAddress@1000000000 : ARRAY [12] OF Text[100]);
    VAR
      lrecVendor@1000000002 : Record 23;
      lcodCountry@1000000004 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Populates the array with return shipment ship-to address
      //  Called From: Report 23044606
      //  Side Effect: None
      //</FUNC>

      IF ( lrecVendor.GET(precReturnShipmentHeader."Buy-from Vendor No.") ) THEN ;

      pasToAddress[1] := COPYSTR(precReturnShipmentHeader."Ship-to Name", 1, 30);
      pasToAddress[2] := precReturnShipmentHeader."Ship-to Address";
      pasToAddress[3] := precReturnShipmentHeader."Ship-to Address 2";
      pasToAddress[4] := precReturnShipmentHeader."Ship-to City";
      pasToAddress[5] := precReturnShipmentHeader."Ship-to County";
      lcodCountry := precReturnShipmentHeader."Ship-to Country/Region Code";
      IF ( lcodCountry = '' ) THEN BEGIN
        recDShipSetup.GET;
        lcodCountry := recDShipSetup."Ship-To Country/Region Code";
      END;
      pasToAddress[6] := lcodCountry;
      pasToAddress[7] := precReturnShipmentHeader."Ship-to Post Code";
      pasToAddress[8] := lrecVendor."Phone No.";
      pasToAddress[9] := lrecVendor."E-Mail";
      pasToAddress[10] := precReturnShipmentHeader."Ship-to Contact";
    END;

    PROCEDURE setShipToAddressForPostedWhseShip@1000000095(precPostedWhseShipHeader@1000000004 : Record 7322;pbForceValues@1000000003 : Boolean;VAR pasToAddress@1000000002 : ARRAY [12] OF Text[100]);
    VAR
      lrecPackageBuffer@1000000001 : Record 23044601;
      lrecPostedWhseShipLine@1000000005 : Record 7323;
      lrecSalesShipmentHeader@1000000006 : Record 110;
      lrecServiceShipmentHeader@1000000008 : Record 5990;
      lrecTransferShipmentHeader@1000000007 : Record 5744;
      lrecReturnShipmentHeader@1000000009 : Record 6650;
      lcodShipToCode@1000000000 : Code[20];
      lsPhoneNumber@1000000010 : Text;
    BEGIN
      //<FUNC>
      //  Description: Sets the ship to for a posted warehouse shipment
      //  Called From: Report 23044606
      //  Side Effect: None
      //</FUNC>

      lrecPostedWhseShipLine.SETRANGE("No.", precPostedWhseShipHeader."No.");
      lrecPostedWhseShipLine.FINDFIRST;

      CASE lrecPostedWhseShipLine."Posted Source Document" OF
        lrecPostedWhseShipLine."Posted Source Document"::"Posted Shipment":
          BEGIN
            CASE lrecPostedWhseShipLine."Source Document" OF
              lrecPostedWhseShipLine."Source Document"::"Sales Order":
                BEGIN
                  IF ( lrecSalesShipmentHeader.GET(lrecPostedWhseShipLine."Posted Source No.") ) THEN BEGIN
                     getShipToAddressFromSalesShipmentHeader(lrecSalesShipmentHeader, pbForceValues, pasToAddress);
                  END;
                END;
              lrecPostedWhseShipLine."Source Document"::"Service Order":
                BEGIN
                  IF ( lrecServiceShipmentHeader.GET(lrecPostedWhseShipLine."Posted Source No.") ) THEN BEGIN
                     getShipToAddressFromServiceShipmentHeader(lrecServiceShipmentHeader, TRUE, pasToAddress);
                  END;
                END;
            END;
          END;
        lrecPostedWhseShipLine."Posted Source Document"::"Posted Transfer Shipment":
          BEGIN
            IF ( lrecTransferShipmentHeader.GET(lrecPostedWhseShipLine."Posted Source No.") ) THEN BEGIN
               getShipToAddressFromTransferShipmentHeader(lrecTransferShipmentHeader, TRUE, pasToAddress);
            END
          END;
        lrecPostedWhseShipLine."Posted Source Document"::"Posted Return Shipment":
          BEGIN
            IF ( lrecReturnShipmentHeader.GET(lrecPostedWhseShipLine."Posted Source No.") ) THEN BEGIN
               getShipToAddressFromReturnShipmentHeader(lrecReturnShipmentHeader, TRUE, pasToAddress);
            END
          END;
      END;
    END;

    PROCEDURE setShipmentDimensions@1000000058(precLPHeader@1000000001 : Record 23044505;VAR pdnDictShipment@1000000008 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2");
    VAR
      lrecUOMFrom@1000000007 : Record 23044525;
      lrecUOMTo@1000000006 : Record 23044525;
      ldWeight@1000000005 : Decimal;
      ldLength@1000000004 : Decimal;
      ldWidth@1000000003 : Decimal;
      ldHeight@1000000002 : Decimal;
      ldnDictParcel@1000000000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";
      lsPredefinedPackage@1000000009 : Text;
      PalletEntryLoc@1000100010 : Record 50068;
    BEGIN

      recDShipSetup.GET;
      //-->TPZ3299 Skip LP dimension validation
      PalletEntryLoc.RESET;
      PalletEntryLoc.SETRANGE("License Plate No.",precLPHeader."No.");
      IF PalletEntryLoc.FINDFIRST AND AllowedAPICallLoc(precLPHeader."Location Code") THEN BEGIN
        REPEAT
          PalletEntryLoc.TESTFIELD(Weight);
          PalletEntryLoc.TESTFIELD("Weight Unit of Measure");
          recDShipSetup.TESTFIELD("Package Weight UOM Code");
          createDictStrObj(ldnDictParcel);

          // convert the dimensions
          lrecUOMTo.GET(recDShipSetup."Package Dimension UOM Code");
          lrecUOMFrom.GET(recDShipSetup."Package Dimension UOM Code"); //precLPHeader."Shpt. Dim. Unit of Measure"); made same

          //ldLength := 0;//cuCommonBase.ConvertUOMGeneric(precLPHeader."Shipment Length", lrecUOMFrom."Qty. per Unit of Measure", lrecUOMTo."Qty. per Unit of Measure");
          //ldWidth := 0; //cuCommonBase.ConvertUOMGeneric(precLPHeader."Shipment Width", lrecUOMFrom."Qty. per Unit of Measure", lrecUOMTo."Qty. per Unit of Measure");
          //ldHeight := 0;//cuCommonBase.ConvertUOMGeneric(precLPHeader."Shipment Height", lrecUOMFrom."Qty. per Unit of Measure", lrecUOMTo."Qty. per Unit of Measure");

      //    ldnDictParcel.Add('length', ldLength);
      //    ldnDictParcel.Add('width', ldWidth);
      //    ldnDictParcel.Add('height', ldHeight);
          // convert the weight
          lrecUOMTo.GET(recDShipSetup."Package Weight UOM Code");
          lrecUOMFrom.GET(PalletEntryLoc."Weight Unit of Measure");
          ldWeight := cuCommonBase.ConvertUOMGeneric(PalletEntryLoc.Weight, lrecUOMFrom."Qty. per Unit of Measure", lrecUOMTo."Qty. per Unit of Measure");
        UNTIL PalletEntryLoc.NEXT = 0;
      END ELSE BEGIN
      //<--TPZ3299
      precLPHeader.TESTFIELD("Shipment Gross Weight");
      precLPHeader.TESTFIELD("Weight Unit of Measure");
      recDShipSetup.TESTFIELD("Package Weight UOM Code");

      lsPredefinedPackage := getPredefinedPackage(precLPHeader);

      createDictStrObj(ldnDictParcel);

      IF ( lsPredefinedPackage = '' ) THEN BEGIN
        precLPHeader.TESTFIELD("Shipment Length");
        precLPHeader.TESTFIELD("Shipment Width");
        precLPHeader.TESTFIELD("Shipment Height");

        // convert the dimensions
        lrecUOMTo.GET(recDShipSetup."Package Dimension UOM Code");
        lrecUOMFrom.GET(precLPHeader."Shpt. Dim. Unit of Measure");

        ldLength := cuCommonBase.ConvertUOMGeneric(precLPHeader."Shipment Length", lrecUOMFrom."Qty. per Unit of Measure", lrecUOMTo."Qty. per Unit of Measure");
        ldWidth := cuCommonBase.ConvertUOMGeneric(precLPHeader."Shipment Width", lrecUOMFrom."Qty. per Unit of Measure", lrecUOMTo."Qty. per Unit of Measure");
        ldHeight := cuCommonBase.ConvertUOMGeneric(precLPHeader."Shipment Height", lrecUOMFrom."Qty. per Unit of Measure", lrecUOMTo."Qty. per Unit of Measure");

        ldnDictParcel.Add('length', ldLength);
        ldnDictParcel.Add('width', ldWidth);
        ldnDictParcel.Add('height', ldHeight);
      END ELSE BEGIN
        ldnDictParcel.Add('predefined_package', lsPredefinedPackage);
      END;

      // convert the weight
      lrecUOMTo.GET(recDShipSetup."Package Weight UOM Code");
      lrecUOMFrom.GET(precLPHeader."Weight Unit of Measure");
      ldWeight := cuCommonBase.ConvertUOMGeneric(precLPHeader."Shipment Gross Weight", lrecUOMFrom."Qty. per Unit of Measure", lrecUOMTo."Qty. per Unit of Measure");
      END; //TPZ3299
      ldnDictParcel.Add('weight', ldWeight);
      pdnDictShipment.Add('parcel', ldnDictParcel);
    END;

    PROCEDURE setShipmentAddresses@1000000019(pasFromAddress@1000000001 : ARRAY [12] OF Text[100];pasToAddress@1000000000 : ARRAY [12] OF Text[100];VAR pdnFromAddress@1000000003 : DotNet "'EasyPost.Net35, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.EasyPost.Address";VAR pdnToAddress@1000000002 : DotNet "'EasyPost.Net35, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.EasyPost.Address");
    BEGIN
      //<FUNC>
      //  Description: Sets the shipping addresses for the order
      //  Called From: DSHIP Rate Quote Mngmt (CU23044605)
      //  Side Effect: None
      //</FUNC>

      // still used in quoting

      pdnFromAddress.company := pasFromAddress[1];
      pdnFromAddress.street1 := pasFromAddress[2];
      pdnFromAddress.street2 := pasFromAddress[3];
      pdnFromAddress.city := pasFromAddress[4];
      pdnFromAddress.state := pasFromAddress[5];
      pdnFromAddress.country := pasFromAddress[6];
      pdnFromAddress.zip := pasFromAddress[7];
      pdnFromAddress.phone := pasFromAddress[8];
      pdnFromAddress.email := pasFromAddress[9];
      pdnFromAddress.name := pasFromAddress[10];

      pdnToAddress.company := pasToAddress[1];
      pdnToAddress.street1 := pasToAddress[2];
      pdnToAddress.street2 := pasToAddress[3];
      pdnToAddress.city := pasToAddress[4];
      pdnToAddress.state := pasToAddress[5];
      pdnToAddress.country := pasToAddress[6];
      pdnToAddress.zip := pasToAddress[7];
      pdnToAddress.phone := pasToAddress[8];
      pdnToAddress.email := pasToAddress[9];
      //pdnToAddress.name := pasToAddress[10];
    END;

    PROCEDURE setShipmentAddressesOptions@1000000044(poptDocType@1000000008 : Option;pcodDocNo@1000000007 : Code[20];pasFromAddress@1000000001 : ARRAY [12] OF Text[100];pasToAddress@1000000000 : ARRAY [12] OF Text[100];VAR pdnFromAddress@1000000003 : DotNet "'EasyPost.Net35, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.EasyPost.Address";VAR pdnToAddress@1000000002 : DotNet "'EasyPost.Net35, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.EasyPost.Address";VAR pdnReturnAddress@1000000004 : DotNet "'EasyPost.Net35, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.EasyPost.Address");
    VAR
      lrecShipOptions@1000000006 : Record 23044616;
      ldnDictionary@1000000005 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";
    BEGIN
      //<FUNC>
      //  Description: Sets the shipping addresses for the order
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      // CreateAndVerify
      // Can be used for address verification purposes

      // create from address
      createDictStrObj(ldnDictionary);
      ldnDictionary.Add('company', pasFromAddress[1]);
      ldnDictionary.Add('street1', pasFromAddress[2]);
      ldnDictionary.Add('street2', pasFromAddress[3]);
      ldnDictionary.Add('city', pasFromAddress[4]);
      ldnDictionary.Add('state', pasFromAddress[5]);
      ldnDictionary.Add('country', pasFromAddress[6]);
      ldnDictionary.Add('zip', pasFromAddress[7]);
      ldnDictionary.Add('phone', pasFromAddress[8]);
      ldnDictionary.Add('email', pasFromAddress[9]);
      ldnDictionary.Add('name', pasFromAddress[10]);
      IF ( pasFromAddress[11] <> '' ) THEN BEGIN
        ldnDictionary.Add('federal_tax_id', pasFromAddress[11]);
      END ELSE IF ( pasFromAddress[12] <> '' ) THEN BEGIN
        ldnDictionary.Add('state_tax_id', pasFromAddress[12]);
      END;
      pdnFromAddress := pdnFromAddress.Create(ldnDictionary);

      // create to address
      createDictStrObj(ldnDictionary);
      ldnDictionary.Add('company', pasToAddress[1]);
      ldnDictionary.Add('street1', pasToAddress[2]);
      ldnDictionary.Add('street2', pasToAddress[3]);
      ldnDictionary.Add('city', pasToAddress[4]);
      ldnDictionary.Add('state', pasToAddress[5]);
      ldnDictionary.Add('country', pasToAddress[6]);
      ldnDictionary.Add('zip', pasToAddress[7]);
      ldnDictionary.Add('phone', pasToAddress[8]);
      ldnDictionary.Add('email', pasToAddress[9]);
      ldnDictionary.Add('name', pasToAddress[10]);
      IF ( pasToAddress[11] <> '' ) THEN BEGIN
        ldnDictionary.Add('federal_tax_id', pasToAddress[11]);
      END ELSE IF ( pasToAddress[12] <> '' ) THEN BEGIN
        ldnDictionary.Add('state_tax_id', pasToAddress[12]);
      END;

      IF ( lrecShipOptions.GET(poptDocType, pcodDocNo) ) THEN BEGIN
        // set residential status on to address
        CASE lrecShipOptions."Residential Delivery" OF
          lrecShipOptions."Residential Delivery"::Yes:
            ldnDictionary.Add('residential', TRUE);
          lrecShipOptions."Residential Delivery"::No:
            ldnDictionary.Add('residential', FALSE);
        END;
        pdnToAddress := pdnToAddress.Create(ldnDictionary);

        IF ( lrecShipOptions."Shipment Type" <> lrecShipOptions."Shipment Type"::Regular ) THEN BEGIN
          createDictStrObj(ldnDictionary);
          ldnDictionary.Add('company', lrecShipOptions.Company);
          ldnDictionary.Add('street1', lrecShipOptions.Address);
          ldnDictionary.Add('street2', lrecShipOptions."Address 2");
          ldnDictionary.Add('city', lrecShipOptions.City);
          ldnDictionary.Add('state', lrecShipOptions.County);
          ldnDictionary.Add('country', lrecShipOptions."Country/Region Code");
          ldnDictionary.Add('zip', lrecShipOptions."Post Code");
          ldnDictionary.Add('phone', lrecShipOptions."Phone No.");
          pdnReturnAddress := pdnReturnAddress.Create(ldnDictionary);
        END;
      END ELSE BEGIN
        // if the ship options entries doesn't exist, ensure we still create the to address
        // respecting the residential delivery default
        recDShipSetup.GET();
        CASE recDShipSetup."Residential Delivery Default" OF
          recDShipSetup."Residential Delivery Default"::Yes:
            ldnDictionary.Add('residential', TRUE);
          recDShipSetup."Residential Delivery Default"::No:
            ldnDictionary.Add('residential', FALSE);
        END;
        pdnToAddress := pdnToAddress.Create(ldnDictionary);
      END;
    END;

    PROCEDURE setPackageOptions@1000000061(precLPHeader@1000000001 : Record 23044505;VAR pdnDictShipment@1000000004 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2");
    VAR
      lrecPackageOptions@1000000002 : Record 23044608;
      ldnDictOptions@1000000000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";
      ldnDictPayment@1000000005 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";
      WarehouseShipmentHeader@1000000003 : Record 7320;
      WarehouseShipmentLine@1000000006 : Record 7321;
    BEGIN
      //<FUNC>
      //  Description: Sets specific package options for each package.
      //               Package options must be built up ahead of time in the "DynamicShip Shipment Option" table
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      IF ( NOT lrecPackageOptions.GET(precLPHeader."No.") ) THEN
        EXIT;

      createDictStrObj(ldnDictOptions);

       IF ( isStdLabelAllowed(precLPHeader) ) THEN
         ldnDictOptions.Add('label_size', '4x6');

      IF ( lrecPackageOptions."FedEx Ground Collect" = lrecPackageOptions."FedEx Ground Collect"::Collect ) THEN BEGIN
        createDictStrObj(ldnDictPayment);
        ldnDictPayment.Add('type', 'COLLECT');
        ldnDictOptions.Add('payment', ldnDictPayment);
      END;

      IF ( lrecPackageOptions."Additional Handling" = lrecPackageOptions."Additional Handling"::Yes ) THEN BEGIN
        ldnDictOptions.Add('additional_handling', TRUE);
        ldnDictOptions.Add('handling_instructions', lrecPackageOptions."Handling Instructions");
      END ELSE IF ( lrecPackageOptions."Additional Handling" = lrecPackageOptions."Additional Handling"::No ) THEN
        ldnDictOptions.Add('additional_handling', FALSE);

      IF ( lrecPackageOptions."Address Validation Level" <> '' ) THEN
        ldnDictOptions.Add('address_validation_level', lrecPackageOptions."Address Validation Level");

      IF ( lrecPackageOptions.Alcohol = lrecPackageOptions.Alcohol::Yes ) THEN
        ldnDictOptions.Add('alcohol', TRUE)
      ELSE IF ( lrecPackageOptions.Alcohol = lrecPackageOptions.Alcohol::No ) THEN
        ldnDictOptions.Add('alcohol', FALSE);

      IF ( lrecPackageOptions."Bill Receiver Account No." <> '' ) THEN BEGIN
        ldnDictOptions.Add('bill_receiver_account', lrecPackageOptions."Bill Receiver Account No.");
        ldnDictOptions.Add('bill_receiver_postal_code', lrecPackageOptions."Bill Receiver Post Code");
      END;

      IF ( lrecPackageOptions."Bill Third Party Account No." <> '' ) THEN BEGIN
        ldnDictOptions.Add('bill_third_party_account', lrecPackageOptions."Bill Third Party Account No.");
        ldnDictOptions.Add('bill_third_party_country',  lrecPackageOptions."Bill Third Party Country Code");
        ldnDictOptions.Add('bill_third_party_postal_code', lrecPackageOptions."Bill Third Party Post Code");
      END;

      IF ( lrecPackageOptions."By Drone" = lrecPackageOptions."By Drone"::Yes ) THEN
        ldnDictOptions.Add('by_drone', TRUE)
      ELSE IF ( lrecPackageOptions."By Drone" = lrecPackageOptions."By Drone"::No ) THEN
        ldnDictOptions.Add('by_drone', FALSE);

      IF ( lrecPackageOptions."Carbon Neutral" = lrecPackageOptions."Carbon Neutral"::Yes ) THEN
        ldnDictOptions.Add('carbon_neutral', TRUE)
      ELSE IF ( lrecPackageOptions."Carbon Neutral" = lrecPackageOptions."Carbon Neutral"::No ) THEN
        ldnDictOptions.Add('carbon_neutral', FALSE);

      IF ( lrecPackageOptions."COD Amount" <> 0 ) THEN BEGIN
        ldnDictOptions.Add('cod_amount', FORMAT(lrecPackageOptions."COD Amount", 0, 1));
        ldnDictOptions.Add('cod_method', FORMAT(lrecPackageOptions."COD Method"));
        ldnDictOptions.Add('currency', FORMAT(lrecPackageOptions."Currency Code"));
      END;

      IF ( lrecPackageOptions.Incoterm <> lrecPackageOptions.Incoterm::"Not Set" ) THEN
        ldnDictOptions.Add('incoterm', getOptionString(lrecPackageOptions,
                                                       lrecPackageOptions.FIELDNO(Incoterm),
                                                       lrecPackageOptions.Incoterm));

      IF ( lrecPackageOptions."Delivery Confirmation" <> lrecPackageOptions."Delivery Confirmation"::None ) THEN
        ldnDictOptions.Add('delivery_confirmation', FORMAT(lrecPackageOptions."Delivery Confirmation"));

      IF ( lrecPackageOptions."Dry Ice" = lrecPackageOptions."Dry Ice"::Yes ) THEN
        ldnDictOptions.Add('dry_ice', TRUE)
      ELSE IF ( lrecPackageOptions."Dry Ice" = lrecPackageOptions."Dry Ice"::No ) THEN
        ldnDictOptions.Add('dry_ice', FALSE);

      IF ( lrecPackageOptions."Dry Ice Medical" <> lrecPackageOptions."Dry Ice Medical"::None ) THEN
        ldnDictOptions.Add('dry_ice_medical', FORMAT(lrecPackageOptions."Dry Ice Medical"));
      IF ( lrecPackageOptions."Dry Ice Weight" <> 0 ) THEN
        ldnDictOptions.Add('dry_ice_weight', FORMAT(lrecPackageOptions."Dry Ice Weight"));
      IF ( lrecPackageOptions."Freight Charge" <> 0 ) THEN
        ldnDictOptions.Add('freight_charge', FORMAT(lrecPackageOptions."Freight Charge"));

      IF ( lrecPackageOptions.Hazmat <> lrecPackageOptions.Hazmat::None) THEN
        ldnDictOptions.Add('hazmat', FORMAT(lrecPackageOptions.Hazmat));

      IF ( lrecPackageOptions."Hold For Pickup" = lrecPackageOptions."Hold For Pickup"::Yes ) THEN
        ldnDictOptions.Add('hold_for_pickup', TRUE)
      ELSE IF ( lrecPackageOptions."Hold For Pickup" = lrecPackageOptions."Hold For Pickup"::No ) THEN
        ldnDictOptions.Add('hold_for_pickup', FALSE);

      IF ( lrecPackageOptions."Invoice No." <> '') THEN
        ldnDictOptions.Add('invoice_number', lrecPackageOptions."Invoice No.");

      IF ( lrecPackageOptions."Label Date" <> 0DT ) THEN
        ldnDictOptions.Add('label_date', lrecPackageOptions."Label Date");

      //  IF ( lrecPackageOptions."Label Format" <> lrecPackageOptions."Label Format"::" " ) THEN
      //    ldnDictOptions.Add('label_format', FORMAT(lrecPackageOptions."Label Format"));
      IF ( lrecPackageOptions.Machinable <> lrecPackageOptions.Machinable::"Not Set" ) THEN
        ldnDictOptions.Add('machinable', FORMAT(lrecPackageOptions.Machinable));

      //>>005 TPZ3231
      WarehouseShipmentLine.SETRANGE("No.",precLPHeader."Source No.");
      IF WarehouseShipmentLine.FINDFIRST THEN
        lrecPackageOptions."Print Custom 1" := WarehouseShipmentLine."Source No.";
      //<<005 TPZ3231

      IF ( lrecPackageOptions."Print Custom 1" <> '' ) THEN BEGIN
        ldnDictOptions.Add('print_custom_1', lrecPackageOptions."Print Custom 1");

        IF ( lrecPackageOptions."Print Custom 1 Barcode" = lrecPackageOptions."Print Custom 1 Barcode"::Yes ) THEN
          ldnDictOptions.Add('print_custom_1_barcode', TRUE)
        ELSE IF ( lrecPackageOptions."Print Custom 1 Barcode" = lrecPackageOptions."Print Custom 1 Barcode"::No ) THEN
          ldnDictOptions.Add('print_custom_1_barcode', FALSE);

        IF ( lrecPackageOptions."Print Custom 1 Code" <> lrecPackageOptions."Print Custom 1 Code"::"Reference 1" ) THEN
          ldnDictOptions.Add('print_custom_1_code', getOptionString(lrecPackageOptions,
                                                    lrecPackageOptions.FIELDNO("Print Custom 1 Code"),
                                                    lrecPackageOptions."Print Custom 1 Code"));
      END;

      IF ( lrecPackageOptions."Print Custom 2" <> '' ) THEN BEGIN
        ldnDictOptions.Add('print_custom_2', lrecPackageOptions."Print Custom 2");

        IF ( lrecPackageOptions."Print Custom 2 Barcode" = lrecPackageOptions."Print Custom 2 Barcode"::Yes ) THEN
          ldnDictOptions.Add('print_custom_2_barcode', TRUE)
        ELSE IF ( lrecPackageOptions."Print Custom 2 Barcode" = lrecPackageOptions."Print Custom 2 Barcode"::No ) THEN
          ldnDictOptions.Add('print_custom_2_barcode', FALSE);

        IF ( lrecPackageOptions."Print Custom 2 Code" <> lrecPackageOptions."Print Custom 2 Code"::"Reference 2" ) THEN
          ldnDictOptions.Add('print_custom_2_code', getOptionString(lrecPackageOptions,
                                                    lrecPackageOptions.FIELDNO("Print Custom 2 Code"),
                                                    lrecPackageOptions."Print Custom 2 Code"));
      END;

      IF ( lrecPackageOptions."Print Custom 3" <> '' ) THEN BEGIN
        ldnDictOptions.Add('print_custom_3', lrecPackageOptions."Print Custom 3");

        IF ( lrecPackageOptions."Print Custom 3 Barcode" = lrecPackageOptions."Print Custom 3 Barcode"::Yes ) THEN
          ldnDictOptions.Add('print_custom_3_barcode', TRUE)
        ELSE IF ( lrecPackageOptions."Print Custom 3 Barcode" = lrecPackageOptions."Print Custom 3 Barcode"::No ) THEN
          ldnDictOptions.Add('print_custom_3_barcode', FALSE);

        IF ( lrecPackageOptions."Print Custom 3 Code" <> lrecPackageOptions."Print Custom 3 Code"::"Reference 3" ) THEN
          ldnDictOptions.Add('print_custom_3_code', getOptionString(lrecPackageOptions,
                                                    lrecPackageOptions.FIELDNO("Print Custom 3 Code"),
                                                    lrecPackageOptions."Print Custom 3 Code"));
      END;

      IF ( lrecPackageOptions."Saturday Delivery" = lrecPackageOptions."Saturday Delivery"::Yes ) THEN
        ldnDictOptions.Add('saturday_delivery', TRUE)
      ELSE IF ( lrecPackageOptions."Saturday Delivery" = lrecPackageOptions."Saturday Delivery"::No ) THEN
        ldnDictOptions.Add('saturday_delivery', FALSE);

      IF ( lrecPackageOptions."Smartpost Hub" <> '' ) THEN
        ldnDictOptions.Add('smartpost_hub', lrecPackageOptions."Smartpost Hub");
      IF ( lrecPackageOptions."Smartpost Manifest ID" <> '') THEN
        ldnDictOptions.Add('smartpost_manifest', lrecPackageOptions."Smartpost Manifest ID");

      IF ( lrecPackageOptions."Special Rates Eligibility" <> lrecPackageOptions."Special Rates Eligibility"::None ) THEN
        ldnDictOptions.Add('special_rates_eligibility', FORMAT(lrecPackageOptions."Special Rates Eligibility"));

      pdnDictShipment.Add('options', ldnDictOptions);
    END;

    PROCEDURE setCustomsInfo@1000000062(precLPHeader@1000000001 : Record 23044505;VAR pdnDictShipment@1000000008 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2");
    VAR
      lrecUser@1000000005 : Record 2000000120;
      lrecCustomsHeader@1000000002 : Record 23044605;
      lrecCustomsLine@1000000003 : Record 23044606;
      ltrecGroupedLines@1000000004 : TEMPORARY Record 23044506;
      ldnDictCustomsInfo@1000000000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";
      ldnListCustomsItems@1000000010 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      lsCustomsSigner@1000000006 : Text;
      loptDocType@1000000007 : Option;
    BEGIN
      //<FUNC>
      //  Description: Creates customs information for the package.
      //               Customs information must exist in "DynamicShip Customs Line" and "DynamicShip Customs Header" tables.
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      // if for some reason customs no. wasn't set on the lp header
      IF (NOT lrecCustomsHeader.GET(precLPHeader."Customs No.")) THEN BEGIN
        cuPackMgmt.getDShipDocTypeFromLPSrcType(precLPHeader."Source Document", loptDocType);
        lrecCustomsHeader.SETRANGE("Document Type", loptDocType);
      //   CASE precLPHeader."Source Document" OF
      //     precLPHeader."Source Document"::Shipment: lrecCustomsHeader.SETRANGE("Document Type", lrecCustomsHeader."Document Type"::"Warehouse Shipment");
      //     precLPHeader."Source Document"::"Outbound Transfer": lrecCustomsHeader.SETRANGE("Document Type", lrecCustomsHeader."Document Type"::"Outbound Transfer");
      //     precLPHeader."Source Document"::"Sales Order": lrecCustomsHeader.SETRANGE("Document Type", lrecCustomsHeader."Document Type"::"Sales Order");
      //   END;
        lrecCustomsHeader.SETRANGE("Document No.", precLPHeader."Source No.");
        IF (lrecCustomsHeader.FINDLAST()) THEN ;
      END;

      IF (lrecCustomsHeader."No." <> '') THEN BEGIN
        setCustomsHeader(lrecCustomsHeader, ldnDictCustomsInfo);

        createListOfDict(ldnListCustomsItems);

        groupLPLinesByItem(precLPHeader, ltrecGroupedLines);
        ltrecGroupedLines.RESET;

        IF ( ltrecGroupedLines.FINDSET(FALSE) ) THEN BEGIN
          REPEAT
            IF (lrecCustomsLine.GET(lrecCustomsHeader."No.", ltrecGroupedLines."Item No.", ltrecGroupedLines."Variant Code")) THEN
              setCustomsLine(precLPHeader, lrecCustomsLine, ltrecGroupedLines, ldnListCustomsItems);
          UNTIL(ltrecGroupedLines.NEXT=0);
        END;
        ldnDictCustomsInfo.Add('customs_items', ldnListCustomsItems);
        pdnDictShipment.Add('customs_info', ldnDictCustomsInfo);
      END;
    END;

    PROCEDURE groupLPLinesByItem@1000000034(precLPHeader@1000000000 : Record 23044505;VAR ptrecGroupedLPLines@1000000001 : TEMPORARY Record 23044506);
    VAR
      lrecLPLine@1000000002 : Record 23044506;
    BEGIN
      //<FUNC>
      //  Description: Groups the lp lines by item/variant
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      ptrecGroupedLPLines.RESET;

      lrecLPLine.SETRANGE("License Plate No.", precLPHeader."No.");
      IF ( lrecLPLine.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          ptrecGroupedLPLines.SETRANGE("Item No.", lrecLPLine."Item No.");
          ptrecGroupedLPLines.SETRANGE("Variant Code", lrecLPLine."Variant Code");
          IF ( NOT ptrecGroupedLPLines.FINDFIRST ) THEN BEGIN
            ptrecGroupedLPLines.INIT;
            ptrecGroupedLPLines."License Plate No." := lrecLPLine."License Plate No.";
            ptrecGroupedLPLines."Line No." := lrecLPLine."Line No.";
            ptrecGroupedLPLines."Item No." := lrecLPLine."Item No.";
            ptrecGroupedLPLines."Variant Code" := lrecLPLine."Variant Code";
            ptrecGroupedLPLines."Unit of Measure Code" := lrecLPLine."Unit of Measure Code";  // assume all same
            ptrecGroupedLPLines.INSERT;
          END;

          ptrecGroupedLPLines.Quantity := ptrecGroupedLPLines.Quantity + lrecLPLine.Quantity;
          ptrecGroupedLPLines.MODIFY;
        UNTIL(lrecLPLine.NEXT=0);
      END;
    END;

    PROCEDURE setCustomsHeader@1000000096(precCustomsHeader@1000000001 : Record 23044605;VAR pdnDictCustomsInfo@1000000000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2");
    VAR
      lrecUser@1000000002 : Record 2000000120;
      lsCustomsSigner@1000000003 : Text;
    BEGIN
      //<FUNC>
      //  Description: Sets the customs header info on the dotnet object
      //  Called From: This codeunit (CU23044602)
      //               DSHIP EasyPost Rate Mgmt (CU23044609)
      //  Side Effect: pdnDictCustomsInfo will be cleared
      //</FUNC>

      createDictStrObj(pdnDictCustomsInfo);

      pdnDictCustomsInfo.Add('contents_explanation', precCustomsHeader."Content Explanation");
      //  Added calls to language independent getOptionString
      pdnDictCustomsInfo.Add('contents_type',
                              getOptionString(precCustomsHeader,
                                              precCustomsHeader.FIELDNO("Content Type"),
                                              precCustomsHeader."Content Type"));
      pdnDictCustomsInfo.Add('created_at', CURRENTDATETIME);
      pdnDictCustomsInfo.Add('customs_certify',
                              getOptionString(precCustomsHeader,
                                              precCustomsHeader.FIELDNO("Customs Certified"),
                                              precCustomsHeader."Customs Certified"));
      lrecUser.SETRANGE("User Name", precCustomsHeader."Customs Signer");
      IF ( lrecUser.FINDFIRST ) THEN
        lsCustomsSigner := lrecUser."Full Name";
      IF ( lsCustomsSigner = '' ) THEN
        lsCustomsSigner := precCustomsHeader."Customs Signer";
      pdnDictCustomsInfo.Add('customs_signer', lsCustomsSigner); //'Myname lastname'
      pdnDictCustomsInfo.Add('eel_pfc', precCustomsHeader."EEL PFC"); //'NOEEI 30.37(a)'
      pdnDictCustomsInfo.Add('non_delivery_option',
                              getOptionString(precCustomsHeader,
                                              precCustomsHeader.FIELDNO("Non Delivery Option"),
                                              precCustomsHeader."Non Delivery Option"));
      pdnDictCustomsInfo.Add('restriction_comments', precCustomsHeader."Restriction Comments");
      pdnDictCustomsInfo.Add('restriction_type',
                              getOptionString(precCustomsHeader,
                                              precCustomsHeader.FIELDNO("Restriction Type"),
                                              precCustomsHeader."Restriction Type"));
      pdnDictCustomsInfo.Add('updated_at', CURRENTDATETIME);
    END;

    PROCEDURE setCustomsLine@1000000098(precLPHeader@1000000003 : Record 23044505;precCustomsLine@1000000002 : Record 23044606;ptrecGroupedLines@1000000001 : TEMPORARY Record 23044506;VAR pdnListCustomsItems@1000000000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1");
    VAR
      ldnDictCustomsItem@1000000004 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";
    BEGIN
      //<FUNC>
      //  Description: Sets the customs line info on the dotnet object
      //  Called From: This codeunit (CU23044602)
      //               DSHIP EasyPost Rate Mgmt (CU23044609)
      //  Side Effect:
      //</FUNC>

      IF (ISNULL(pdnListCustomsItems)) THEN
        createListOfDict(pdnListCustomsItems);

      ldnDictCustomsItem := ldnDictCustomsItem.Dictionary();
      createDictStrObj(ldnDictCustomsItem);
      ldnDictCustomsItem.Add('created_at', CURRENTDATETIME);
      ldnDictCustomsItem.Add('currency', precCustomsLine."Currency Code");    // default us dollar
      IF ( precCustomsLine.Description = '' ) THEN
        ldnDictCustomsItem.Add('description', precLPHeader.Description)
      ELSE
        ldnDictCustomsItem.Add('description', precCustomsLine.Description);
      ldnDictCustomsItem.Add('hs_tariff_number', DELCHR(precCustomsLine."HS Tariff No.", '=', DELCHR(precCustomsLine."HS Tariff No.", '=', '1234567890')));
      ldnDictCustomsItem.Add('origin_country', precCustomsLine."Origin Country/Region Code");
      ldnDictCustomsItem.Add('quantity', ROUND(ptrecGroupedLines.Quantity, 1, '='));   // integer
      ldnDictCustomsItem.Add('code', ptrecGroupedLines."Item No."); // allows identification later on
      ldnDictCustomsItem.Add('updated_at', CURRENTDATETIME);
      ldnDictCustomsItem.Add('value', ROUND((precCustomsLine."Value Per Item Qty." * ptrecGroupedLines.Quantity), 0.01));
      ldnDictCustomsItem.Add('weight', ROUND((precCustomsLine."Weight Per Item Qty." * ptrecGroupedLines.Quantity), 0.01));
      pdnListCustomsItems.Add(ldnDictCustomsItem);
    END;

    PROCEDURE getShipmentLabels@1000000000(VAR precrRecRef@1000000022 : RecordRef;poptDocType@1000000032 : Option;pcodDocNo@1000000031 : Code[20];VAR ptrecAPIParam@1000000002 : TEMPORARY Record 23044623);
    VAR
      ltcHasLabel@1000000010 : TextConst 'ENU=Package: %1 already has a shipment label.\Do you want to replace it?;ESM=Paquete: %1 tiene ya un env¡o etiqueta. \Do reemplazarla?;FRC=Package: %1 d‚j… a une livraison‚tiquette \Do vous remplacer?;ENC=Package: %1 already has a shipment label.\Do you want to replace it?';
      ltrecSelectedRate@1000000000 : TEMPORARY Record 23044603;
      liAPICodeunit@1000000004 : Integer;
    BEGIN
      //<FUNC>
      //  Description:
      //  Called From:
      //  Side Effect:
      //</FUNC>

      cuRateSingleton.getSelectedRate(ltrecSelectedRate);

      // no rate was selected, break out of process
      IF ( ltrecSelectedRate."Carrier Account ID" = '' ) THEN
        EXIT;

      // allows for rollback on bad service selection
      IF ltrecSelectedRate."Carrier Account ID" <> 'externalcarrier' THEN //TPZ2723
      checkShipAgent(ltrecSelectedRate."Carrier Account ID",
                     ltrecSelectedRate.Service);

      ptrecAPIParam."Object ID" := ltrecSelectedRate."Order ID";
      buildAPIParam(ptrecAPIParam, ptrecAPIParam.Action::GetLabels, poptDocType, pcodDocNo);
      callFreightIntegration(ptrecAPIParam);
    END;

    PROCEDURE setShipmentLabels@1000000094(VAR precrRecRef@1000000000 : RecordRef;VAR ptrecAPIParam@1000000001 : TEMPORARY Record 23044623);
    VAR
      lrecLPHeader@1000000005 : Record 23044505;
      lrecLabelData@1000000006 : Record 23044622;
      ltrecSelectedRate@1000000002 : TEMPORARY Record 23044603;
      lcodShipAgent@1000000007 : Code[20];
      lcodShipAgentService@1000000008 : Code[20];
      ldLabelCost@1000000003 : Decimal;
      liDeliveryDays@1000000004 : Integer;
    BEGIN
      //<FUNC>
      //  Description: Stores labels from api param to real data
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: Also calls setShipmentDetails
      //</FUNC>

      cuRateSingleton.getSelectedRate(ltrecSelectedRate);
      ldLabelCost := ltrecSelectedRate."Rate Cost";
      liDeliveryDays := ltrecSelectedRate."Delivery Days";

      getShipAgentAndServiceByCarrierIDAndService(ltrecSelectedRate."Carrier Account ID",
                                                  ltrecSelectedRate.Service,
                                                  lcodShipAgent,
                                                  lcodShipAgentService);

      storeLabelData(ptrecAPIParam, lrecLabelData."Label Type"::Shipping, ldLabelCost);
      //<TPZ2723>
      IF ltrecSelectedRate."Carrier Account ID"='externalcarrier' THEN BEGIN
        lcodShipAgent := ltrecSelectedRate."Carrier Name";
        lcodShipAgentService := ltrecSelectedRate.Service;
      END;
        //</TPZ2723>
      setShipmentDetails(precrRecRef,
                         ptrecAPIParam,
                         lcodShipAgent,//ptrecAPIParam."Shipping Agent Code",
                         lcodShipAgentService,//ptrecAPIParam."Shipping Agent Service Code",
                         liDeliveryDays);
    END;

    PROCEDURE printShipmentLabels@1000000070(psOrderID@1000000000 : Text);
    BEGIN

      recDShipSetup.GET;
      IF ( recDShipSetup."Carrier Label Print Behaviour" = recDShipSetup."Carrier Label Print Behaviour"::Automatic ) THEN
        printCarrierLabelByOrder(psOrderID, FALSE)
      ELSE IF ( recDShipSetup."Carrier Label Print Behaviour" = recDShipSetup."Carrier Label Print Behaviour"::"Automatic with prompt" ) THEN
        printCarrierLabelByOrder(psOrderID, TRUE);
    END;

    LOCAL PROCEDURE printShipmentLabelsByOrder@100000004(poptDocType@100000000 : Option;pcodDocNo@100000001 : Code[50]);
    VAR
      lrecLPHeader@100000002 : Record 23044505;
      loptLPSourceDoc@100000003 : Option;
    BEGIN
      //<FUNC author="M.Matthiesen" date="06/19/2019" issue="TFS4569">
      //  Description: Prints shipping label from order info
      //  Called From: This Codeunit (CU23044602)
      //  Side Effect: None.
      //</FUNC>

      lrecLPHeader.SETRANGE("No.", cuPackMgmt.CreateLPNoFilterFirstWithDShipDocType(poptDocType, pcodDocNo));
      IF (lrecLPHeader.FINDFIRST()) THEN
        printShipmentLabels(lrecLPHeader."Package Order ID");
    END;

    PROCEDURE printCarrierLabel@1000000003(VAR precLPHeader@1000000000 : Record 23044505;pbShowRequestPage@1000000002 : Boolean);
    VAR
      ltcNoLabel@1000000003 : TextConst 'ENU=Package: %1 does not have a carrier label.;ESM=Paquete: %1 no dispone de una etiqueta de soporte.;FRC=Package: %1 ne dispose d''une ‚tiquette de carrier.;ENC=Package: %1 does not have a carrier label.';
      lrecLabelData@1000000001 : Record 23044622;
    BEGIN
      //<FUNC>
      //  Description:
      //  Called From:
      //  Side Effect:
      //</FUNC>

      //recDShipSetup.GET;
      //REPORT.RUNMODAL(recDShipSetup."Carrier Label Report ID", pbShowRequestPage, FALSE, precLPHeader);
      printLabelData(precLPHeader, pbShowRequestPage, lrecLabelData."Label Type"::Shipping);
    END;

    PROCEDURE printCarrierLabelByOrder@1000000007(psOrderID@1000000000 : Text;pbShowRequestPage@1000000002 : Boolean);
    VAR
      lrecLPHeader@1000000001 : Record 23044505;
      lrecLabelData@1000000003 : Record 23044622;
    BEGIN
      //<FUNC>
      //  Description:
      //  Called From:
      //  Side Effect:
      //</FUNC>

      lrecLPHeader.SETRANGE("Package Order ID", psOrderID);
      IF lrecLPHeader.FINDFIRST THEN //vaseem
        printCarrierLabel(lrecLPHeader, pbShowRequestPage);
    END;

    PROCEDURE setShipmentDetails@1000000099(precrRecRef@1000000005 : RecordRef;VAR ptrecAPIParam@100000000 : TEMPORARY Record 23044623;pcodShipAgent@1000000004 : Code[50];pcodShipAgentService@1000000003 : Code[50];piDeliveryDays@1000000001 : Integer);
    BEGIN
      //<FUNC author="M.Matthiesen" date="06/29/2018" issue="TFS3651">
      //  Description:
      //  Called From:
      //  Side Effect:
      //</FUNC>

      IF (ptrecAPIParam.FINDSET(FALSE)) THEN BEGIN
        setShipAgent(precrRecRef,
                      pcodShipAgent,
                      pcodShipAgentService,
                     ptrecAPIParam."Package Tracking No.",
                      piDeliveryDays);
        REPEAT
          setShipAgentSalesLines(precrRecRef,
                                 pcodShipAgent,
                                 pcodShipAgentService,
                                 ptrecAPIParam."Package Tracking No.",
                                 piDeliveryDays,
                                 ptrecAPIParam."License Plate No.");
        UNTIL (ptrecAPIParam.NEXT() = 0);
      END;
    END;

    PROCEDURE setShipAgent@1000000021(precrRecRef@1000000002 : RecordRef;pcodShipAgent@1000000001 : Code[20];pcodShipAgentService@1000000000 : Code[20];psTrackingNo@1000000007 : Text[30];piDeliveryDays@1000000006 : Integer);
    VAR
      lrecWhseShipHeader@1000000005 : Record 7320;
      lrecTransferHeader@1000000004 : Record 5740;
      lrecSalesHeader@1000000003 : Record 36;
      lrecMiscShipment@1000000008 : Record 23044621;
    BEGIN
      //<FUNC>
      //  Description: Updates the shipping agent/service for the order
      //  Called From:
      //  Side Effect: None
      //</FUNC>

      CASE precrRecRef.NUMBER OF
        DATABASE::"Warehouse Shipment Header":
          BEGIN
            precrRecRef.SETTABLE(lrecWhseShipHeader);
            setShipAgentWhseShip(lrecWhseShipHeader, pcodShipAgent, pcodShipAgentService, psTrackingNo, piDeliveryDays);
          END;
        DATABASE::"Transfer Header":
          BEGIN
            precrRecRef.SETTABLE(lrecTransferHeader);
            setShipAgentTransOrder(lrecTransferHeader, pcodShipAgent, pcodShipAgentService, piDeliveryDays);
          END;
        DATABASE::"Sales Header":
          BEGIN
            precrRecRef.SETTABLE(lrecSalesHeader);
            setShipAgentSalesOrder(lrecSalesHeader, pcodShipAgent, pcodShipAgentService, psTrackingNo, piDeliveryDays);
          END;
        DATABASE::"DSHIP Miscellaneous Shipment":
          BEGIN
            precrRecRef.SETTABLE(lrecMiscShipment);
            setShipAgentMiscShipment(lrecMiscShipment, pcodShipAgent, pcodShipAgentService, psTrackingNo);
          END;
      END;
    END;

    PROCEDURE setShipAgentWhseShip@1000000027(VAR precWhseShipHeader@1000000002 : Record 7320;pcodShipAgent@1000000001 : Code[20];pcodShipAgentService@1000000000 : Code[20];psTrackingNo@1000000006 : Text[30];piDeliveryDays@1000000005 : Integer);
    VAR
      lrecWhseShipLine@1000000003 : Record 7321;
      lrecSalesHeader@1000000004 : Record 36;
      lrecTransferHeader@1000000007 : Record 5740;
    BEGIN
      //<FUNC>
      //  Description: Updates the shipping agent/service for the warehouse shipment
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      // reget in case it was modified in extension events
      precWhseShipHeader.GET(precWhseShipHeader."No.");
      //precWhseShipHeader."Shipping Agent Code" := pcodShipAgent; //vaseem
      //precWhseShipHeader."Shipping Agent Service Code" := pcodShipAgentService; //vaseem
      precWhseShipHeader.MODIFY;

      lrecWhseShipLine.SETRANGE("No.", precWhseShipHeader."No.");
      IF ( lrecWhseShipLine.FINDFIRST ) THEN BEGIN
        CASE lrecWhseShipLine."Source Document" OF
          lrecWhseShipLine."Source Document"::"Sales Order":
            BEGIN
              lrecSalesHeader.GET(lrecWhseShipLine."Source Subtype", lrecWhseShipLine."Source No.");
              setShipAgentSalesOrder(lrecSalesHeader, pcodShipAgent, pcodShipAgentService, psTrackingNo, piDeliveryDays);
            END;
          lrecWhseShipLine."Source Document"::"Outbound Transfer":
            BEGIN
              lrecTransferHeader.GET(lrecWhseShipLine."Source No.");
              //setShipAgentTransOrder(lrecTransferHeader, pcodShipAgent, pcodShipAgent, piDeliveryDays); //TPZ3265
              setShipAgentTransOrder(lrecTransferHeader, pcodShipAgent, pcodShipAgentService, piDeliveryDays); //TPZ3265
            END;
        END;
      END; // if lrecwhseshipline.findfirst
    END;

    PROCEDURE setShipAgentSalesOrder@1000000028(precSalesHeader@1000000002 : Record 36;pcodShipAgent@1000000001 : Code[20];pcodShipAgentService@1000000000 : Code[20];psTrackingNo@1000000003 : Text[30];piDeliveryDays@1000000004 : Integer);
    VAR
      lrecSalesLine@1000000005 : Record 37;
      lcuReleaseSalesDoc@1000000006 : Codeunit 414;
      ldfDeliveryDays@1000000009 : DateFormula;
      DSHIPCarrierService@1000000007 : Record 23044611;
    BEGIN
      //<FUNC>
      //  Description: Updates the shipping agent/service for the sales order
      //  Called From: This codeunit (23044602)
      //  Side Effect: None
      //</FUNC>

      precSalesHeader.GET(precSalesHeader."Document Type", precSalesHeader."No.");
      IF (piDeliveryDays > 0) THEN BEGIN
        EVALUATE(ldfDeliveryDays,'<' + FORMAT(piDeliveryDays) + 'D>');
        precSalesHeader."Shipping Time" := ldfDeliveryDays;
      END;
      precSalesHeader."Shipping Agent Code" := pcodShipAgent;
      precSalesHeader."Shipping Agent Service Code" := pcodShipAgentService;
      precSalesHeader."Package Tracking No." := psTrackingNo;
      //<TPZ2723>
      DSHIPCarrierService.RESET;
      DSHIPCarrierService.SETRANGE("Shipping Agent Code",pcodShipAgent);
      DSHIPCarrierService.SETRANGE("Shipping Agent Service Code",pcodShipAgentService);
      IF DSHIPCarrierService.FINDFIRST THEN
        precSalesHeader."E-Ship Agent Service" := DSHIPCarrierService."E-Ship Agent Service";
      //</TPZ2723>
      precSalesHeader.MODIFY;
    END;

    PROCEDURE setShipAgentTransOrder@1000000029(precTransferHeader@1000000002 : Record 5740;pcodShipAgent@1000000001 : Code[20];pcodShipAgentService@1000000000 : Code[20];piDeliveryDays@1000000004 : Integer);
    VAR
      lcuReleaseTransferDoc@1000000003 : Codeunit 5708;
      ldfDeliveryDays@1000000005 : DateFormula;
      lrecTransferLine@1000000008 : Record 5741;
      DSHIPCarrierService@1000000006 : Record 23044611;
    BEGIN
      //<FUNC>
      //  Description: Updates the shipping agent/service for the transfer order
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      precTransferHeader.GET(precTransferHeader."No.");
      //  store re-used values
      EVALUATE(ldfDeliveryDays,'<' + FORMAT(piDeliveryDays) + 'D>');
      //  set values on header
      precTransferHeader."Shipping Agent Code" := pcodShipAgent;
      precTransferHeader."Shipping Agent Service Code" := pcodShipAgentService;
      precTransferHeader."Shipping Time" := ldfDeliveryDays;
      //-->TPZ3265
      DSHIPCarrierService.RESET;
      DSHIPCarrierService.SETRANGE("Shipping Agent Code",pcodShipAgent);
      DSHIPCarrierService.SETRANGE("Shipping Agent Service Code",pcodShipAgentService);
      IF DSHIPCarrierService.FINDFIRST THEN
        precTransferHeader."E-Ship Agent Service" := DSHIPCarrierService."E-Ship Agent Service";
      //<--TPZ3265
      //  iterate through lines and set values
      lrecTransferLine.SETRANGE("Document No.", precTransferHeader."No.");
      IF ( lrecTransferLine.FINDSET ) THEN BEGIN
        REPEAT
          lrecTransferLine."Shipping Agent Code" := pcodShipAgent;
          lrecTransferLine."Shipping Agent Service Code" := pcodShipAgentService;
          lrecTransferLine."Shipping Time" := ldfDeliveryDays;
          // instead of today, try and use the calendar
          // also, next available business day (including today) as fallback
          lrecTransferLine."Shipment Date" := WORKDATE;
          lrecTransferLine.MODIFY;
        UNTIL lrecTransferLine.NEXT = 0;
      END;

      precTransferHeader.MODIFY;
    END;

    PROCEDURE setShipAgentMiscShipment@1000000078(VAR precMiscShipment@1000000003 : Record 23044621;pcodShipAgent@1000000002 : Code[20];pcodShipAgentService@1000000001 : Code[20];psTrackingNo@1000000000 : Text[30]);
    BEGIN
      //<FUNC>
      //  Description: Updates the shipping agent, service, and tracking for the Misc Shipment
      //  Called From: This codeunit (23044602)
      //  Side Effect: None
      //</FUNC>

      // shipping cost was added elsewhere, so record expired
      precMiscShipment.GET(precMiscShipment."No.");
      precMiscShipment."Shipping Agent Code" := pcodShipAgent;
      precMiscShipment."Shipping Agent Service Code" := pcodShipAgentService;
      precMiscShipment."Package Tracking No." := psTrackingNo;
      precMiscShipment.MODIFY;
    END;

    PROCEDURE setShipAgentSalesLines@1000000046(precrRecRef@1000000002 : RecordRef;pcodShipAgent@1000000001 : Code[20];pcodShipAgentService@1000000000 : Code[20];psTrackingNo@1000000010 : Text[30];piDeliveryDays@1000000004 : Integer;pcodLPNo@1000000003 : Code[20]);
    VAR
      lrecLPLineUsage@1000000011 : Record 23044507;
      lrecSalesHeader@1000000014 : Record 36;
      lrecSalesLine@1000000005 : Record 37;
      lrecWhseShipHeader@1000000018 : Record 7320;
      lrecWhseShipLine@1000000017 : Record 7321;
      lcuReleaseSalesDoc@1000000006 : Codeunit 414;
      ldfDeliveryDays@1000000009 : DateFormula;
      liFirstSalesLineNo@1000000012 : Integer;
      liLastSalesLineNo@1000000013 : Integer;
      lsDescTracking@1000000015 : Text;
      lsSalesLineFilter@1000000019 : Text;
      liLastLineNo@1000000020 : Integer;
    BEGIN
      //<FUNC>
      //  Description: Updates the shipping agent/service/tracking for the Sales Line
      //  Called From: This codeunit (23044602)
      //  Side Effect: None
      //</FUNC>

      lrecLPLineUsage.SETRANGE("License Plate No.", pcodLPNo);

      CASE precrRecRef.NUMBER OF
        DATABASE::"Warehouse Shipment Header":
          BEGIN
            precrRecRef.SETTABLE(lrecWhseShipHeader);
            lrecWhseShipLine.SETRANGE("No.", lrecWhseShipHeader."No.");
            lrecWhseShipLine.FINDFIRST;
            IF ( lrecWhseShipLine."Source Document" <> lrecWhseShipLine."Source Document"::"Sales Order" ) THEN
              EXIT;
            lrecSalesHeader.GET(lrecWhseShipLine."Source Subtype", lrecWhseShipLine."Source No.");
            lrecLPLineUsage.SETRANGE("Source Document", lrecLPLineUsage."Source Document"::Shipment);
            lrecLPLineUsage.SETRANGE("Source No.", lrecWhseShipHeader."No.");
            IF ( lrecLPLineUsage.FINDSET(FALSE) ) THEN
              REPEAT
                IF ( liLastLineNo <> lrecLPLineUsage."Source Line No." ) THEN BEGIN
                  liLastLineNo := lrecLPLineUsage."Source Line No.";
                  lrecWhseShipLine.GET(lrecWhseShipHeader."No.", lrecLPLineUsage."Source Line No.");
                  lsSalesLineFilter += FORMAT(lrecWhseShipLine."Source Line No.") + '|';
                END;
              UNTIL(lrecLPLineUsage.NEXT=0);
          END;
        DATABASE::"Sales Header":
          BEGIN
            precrRecRef.SETTABLE(lrecSalesHeader);
            lrecLPLineUsage.SETRANGE("Source Document", lrecLPLineUsage."Source Document"::"Sales Order");
            lrecLPLineUsage.SETRANGE("Source No.", lrecSalesHeader."No.");
            IF ( lrecLPLineUsage.FINDSET(FALSE) ) THEN
              REPEAT
                IF ( liLastLineNo <> lrecLPLineUsage."Source Line No." ) THEN BEGIN
                  liLastLineNo := lrecLPLineUsage."Source Line No.";
                  lsSalesLineFilter += FORMAT(lrecLPLineUsage."Source Line No.") + '|';
                END;
              UNTIL(lrecLPLineUsage.NEXT=0);
          END;
        ELSE BEGIN
          EXIT;
        END;
      END;

      //  store re-used values
      //  angle brackets ensure language independence
      EVALUATE(ldfDeliveryDays, '<' + FORMAT(piDeliveryDays) + 'D>');

      lrecSalesLine.SETRANGE("Document No.", lrecSalesHeader."No.");
      IF ( lsSalesLineFilter <> '' ) THEN
        lsSalesLineFilter := COPYSTR(lsSalesLineFilter, 1, STRLEN(lsSalesLineFilter) - 1);
      lrecSalesLine.SETFILTER("Line No.", lsSalesLineFilter);
      //lrecSalesLine.SETRANGE("Line No.", liFirstSalesLineNo, liLastSalesLineNo);
      IF ( lrecSalesLine.FINDSET(TRUE) ) THEN BEGIN
        REPEAT
          lrecSalesLine."Shipping Agent Code" := pcodShipAgent;
          lrecSalesLine."Shipping Agent Service Code" := pcodShipAgentService;
          lrecSalesLine."Shipping Time" := ldfDeliveryDays;
          lrecSalesLine."Planned Delivery Date" :=
              CALCDATE(lrecSalesHeader."Outbound Whse. Handling Time",
                CALCDATE(lrecSalesLine."Shipping Time", WORKDATE));
          lrecSalesLine."Package Tracking No." := psTrackingNo;
          lrecSalesLine.MODIFY;
        UNTIL lrecSalesLine.NEXT = 0;
      END; // if find sales line

      lrecSalesLine.SETRANGE("Line No.");

      CASE recDShipSetup."Freight Billing Type" OF
        recDShipSetup."Freight Billing Type"::"G/L":
        lrecSalesLine.SETRANGE(Type, lrecSalesLine.Type::"G/L Account");
        recDShipSetup."Freight Billing Type"::Resource:
        lrecSalesLine.SETRANGE(Type, lrecSalesLine.Type::Resource);
        recDShipSetup."Freight Billing Type"::None:
          EXIT;
      END;

      lrecSalesLine.SETRANGE("No.", recDShipSetup."Freight Billing No.");
      IF ( lrecSalesLine.FINDLAST ) THEN BEGIN
        IF ( STRLEN(psTrackingNo) > 5 ) THEN
          lsDescTracking := ' ' + COPYSTR(psTrackingNo, STRLEN(psTrackingNo) - 4, 5);
        lsDescTracking := getFreightLineDesc + lsDescTracking;
        lrecSalesLine.Description := COPYSTR(lsDescTracking, 1, MAXSTRLEN(lrecSalesLine.Description));
        lrecSalesLine."Package Tracking No." := psTrackingNo;
        lrecSalesLine.MODIFY;
      END; // if lrecsalesline.findlast
    END;

    PROCEDURE getTotalInsuranceAmount@1000000056(psOrderID@1000000000 : Text;VAR pdnDictInsurance@1000000004 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2");
    VAR
      lrecLPHeader@1000000003 : Record 23044505;
      ldTotalInsuranceAmount@1000000002 : Decimal;
    BEGIN
      //<FUNC>
      //  Description: Sets insurance amount per LP for the order
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      lrecLPHeader.SETRANGE("Package Order ID", psOrderID);

      IF ( lrecLPHeader.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          pdnDictInsurance.Add(lrecLPHeader."No.", lrecLPHeader."Insurance Amount");
        UNTIL(lrecLPHeader.NEXT=0);
      END;
    END;

    PROCEDURE getTotalInsuranceAmountByOrder@1000000088(poptDocType@1000000000 : Option;pcodDocNo@1000000001 : Code[20];VAR pdnDictInsurance@1000000004 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2");
    VAR
      lrecLPHeader@1000000003 : Record 23044505;
      ldTotalInsuranceAmount@1000000002 : Decimal;
      loptSourceType@1000000005 : Option;
    BEGIN
      //<FUNC>
      //  Description: Sets insurance amount per LP for the order
      //  Called From: Codeunit DSHIP EasyPost Rate Mgmt. (CU23044609)
      //  Side Effect: None
      //</FUNC>

      lrecLPHeader.SETFILTER("No.", cuPackMgmt.CreateLPNoFilterWithDShipDocType(poptDocType, pcodDocNo));
      IF ( lrecLPHeader.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          pdnDictInsurance.Add(lrecLPHeader."No.", lrecLPHeader."Insurance Amount");
        UNTIL(lrecLPHeader.NEXT=0);
      END;
    END;

    LOCAL PROCEDURE buildExtensionParam@1000000037(poptAction@1000000003 : Option;pcodLicensePlateNo@1000000002 : Code[20];poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[20];pdSelectedRate@1000000005 : Decimal;psScanValue@1000000006 : Text;pcodItemNo@1000000007 : Code[20];pcodShipToCode@1000000008 : Code[20];VAR ptrecParam@1000000004 : TEMPORARY Record 23044609);
    BEGIN
      //<FUNC>
      //  Description: Builds up an event paramater for passing to the shipment extension codeunit
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      ptrecParam.Action := poptAction;
      ptrecParam."License Plate No." := pcodLicensePlateNo;
      ptrecParam."Document Type" := poptDocType;
      ptrecParam."Document No." := pcodDocNo;
      ptrecParam.Rate := pdSelectedRate;
      ptrecParam."Scan Value" := psScanValue;
      ptrecParam."Item No." := pcodItemNo;
      ptrecParam."Ship-To Code" := pcodShipToCode;
      ptrecParam.INSERT;
    END;

    PROCEDURE callPreBuildCustomsExtension@1000000018(piExtensionCodeunit@1000000000 : Integer;poptDocType@1000000002 : Option;pcodDocNo@1000000001 : Code[20]) : Boolean;
    VAR
      ltrecParam@1000000003 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the shipment extension codeunit before the customs header/lines are created
      //  Called From: Codeunit DSHIP Package Customs Mgmt. (CU23044603)
      //  Side Effect: None
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      buildExtensionParam(ltrecParam.Action::"Pre Build Customs", '',
                          poptDocType, pcodDocNo, 0, '', '', '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);

      IF ( ltrecParam.Handled = ltrecParam.Handled::No ) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE callPostBuildCustomsExtension@1000000022(piExtensionCodeunit@1000000000 : Integer;poptDocType@1000000002 : Option;pcodDocNo@1000000001 : Code[20]);
    VAR
      ltrecParam@1000000003 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the shipment extension codeunit after the customs header/lines are created
      //  Called From: Codeunit DSHIP Package Customs Mgmt. (CU23044603)
      //  Side Effect: None
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      buildExtensionParam(ltrecParam.Action::"Post Build Customs", '',
                          poptDocType, pcodDocNo, 0, '', '', '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);
    END;

    PROCEDURE callCustomsExtension@1000000025(piExtensionCodeunit@1000000000 : Integer;poptDocType@1000000002 : Option;pcodDocNo@1000000001 : Code[20]);
    VAR
      ltrecParam@1000000003 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the shipment extension codeunit for setting the Customs information
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      buildExtensionParam(ltrecParam.Action::Customs, '',
                          poptDocType, pcodDocNo, 0, '', '', '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);
    END;

    PROCEDURE callInsuranceExtension@1000000026(piExtensionCodeunit@1000000002 : Integer;pcodLicensePlateNo@1000000003 : Code[20];poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[20]);
    VAR
      ltrecParam@1000000004 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the shipment extension codeunit for setting the Insurance amounts
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      buildExtensionParam(ltrecParam.Action::Insurance, pcodLicensePlateNo,
                          poptDocType, pcodDocNo, 0, '', '', '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);
    END;

    PROCEDURE callPkgOptionsExtension@1000000030(piExtensionCodeunit@1000000003 : Integer;pcodLicensePlateNo@1000000002 : Code[20];poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[20]);
    VAR
      ltrecParam@1000000004 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the shipment extension codeunit for setting the Package Options
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      buildExtensionParam(ltrecParam.Action::"Package Options", pcodLicensePlateNo,
                          poptDocType, pcodDocNo, 0, '', '', '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);
    END;

    PROCEDURE callShipOptionsExtension@1000000051(piExtensionCodeunit@1000000002 : Integer;poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[20]);
    VAR
      ltrecParam@1000000003 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the shipment extension codeunit for setting Shipment Options
      //  Called From: This codeunit (CU(23044602)
      //  Side Effect: None
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      buildExtensionParam(ltrecParam.Action::"Shipment Options", '',
                          poptDocType, pcodDocNo, 0, '', '', '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);
    END;

    PROCEDURE callSelectedRateExtension@1000000045(piExtensionCodeunit@1000000003 : Integer;pcodLicensePlateNo@1000000002 : Code[20];poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[20];pdSelectedRate@1000000005 : Decimal) : Boolean;
    VAR
      ltrecParam@1000000004 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the rate extension codeunit for handling selected rate
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      buildExtensionParam(ltrecParam.Action::"Selected Rate", pcodLicensePlateNo,
                          poptDocType, pcodDocNo, pdSelectedRate, '', '', '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);

      IF ( ltrecParam.Handled = ltrecParam.Handled::No ) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE callGetLabelExtension@1000000053(piExtensionCodeunit@1000000003 : Integer;pcodLicensePlateNo@1000000002 : Code[20];poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[20]) : Boolean;
    VAR
      ltrecParam@1000000004 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the rate extension codeunit before getting rates
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      buildExtensionParam(ltrecParam.Action::"Get Label", pcodLicensePlateNo,
                          poptDocType, pcodDocNo, 0, '', '', '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);

      IF ( ltrecParam.Handled = ltrecParam.Handled::No ) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE callCompletedRateShopExtension@1000000064(piExtensionCodeunit@1000000005 : Integer;pcodLicensePlateNo@1000000004 : Code[20];poptDocType@1000000003 : Option;pcodDocNo@1000000002 : Code[20]);
    VAR
      ltrecParam@1000000001 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the extension codeunit when the ship to address is read
      //  Called From: Page DSHIP Package Worksheet (P23044602)
      //  Side Effect: None
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      buildExtensionParam(ltrecParam.Action::"Completed Rate Shop", pcodLicensePlateNo,
                          poptDocType, pcodDocNo, 0, '', '', '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);
    END;

    PROCEDURE callPostExtension@1000000049(piExtensionCodeunit@1000000003 : Integer;pcodLicensePlateNo@1000000002 : Code[20];poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[20]) : Boolean;
    VAR
      ltrecParam@1000000004 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the post extension codeunit before posting order
      //  Called From: CodeUnit DSHIP Package List Management (CU23044600)
      //  Side Effect: None
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      buildExtensionParam(ltrecParam.Action::Post, pcodLicensePlateNo,
                          poptDocType, pcodDocNo, 0, '', '', '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);

      IF ( ltrecParam.Handled = ltrecParam.Handled::No ) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE callScanExtension@1000000023(piExtensionCodeunit@1000000003 : Integer;pcodLicensePlateNo@1000000002 : Code[20];poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[20];psScanValue@1000000005 : Text;pcodItemNo@1000000006 : Code[20]) : Boolean;
    VAR
      ltrecParam@1000000004 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the scan extension codeunit after a value is scanned / entered
      //  Called From: Page DSHIP Package Worksheet (P23044602)
      //  Side Effect: None
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      buildExtensionParam(ltrecParam.Action::Scan, pcodLicensePlateNo,
                          poptDocType, pcodDocNo, 0, psScanValue, pcodItemNo, '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);

      IF ( ltrecParam.Handled = ltrecParam.Handled::No ) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE callShipToExtension@1000000054(piExtensionCodeunit@1000000005 : Integer;pcodLicensePlateNo@1000000004 : Code[20];poptDocType@1000000003 : Option;pcodDocNo@1000000002 : Code[20];VAR pcodShipToCode@1000000000 : Code[20]) : Boolean;
    VAR
      ltrecParam@1000000001 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the extension codeunit when the ship to address is read
      //  Called From: Page DSHIP Package Worksheet (P23044602)
      //  Side Effect: None
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      buildExtensionParam(ltrecParam.Action::"Ship-To Address", pcodLicensePlateNo,
                          poptDocType, pcodDocNo, 0, '', '', pcodShipToCode, ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);
      pcodShipToCode := ltrecParam."Ship-To Code";

      IF ( ltrecParam.Handled = ltrecParam.Handled::No ) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE callGetWeightExtension@1000000012(piExtensionCodeunit@1000000003 : Integer;pcodLicensePlateNo@1000000002 : Code[20];poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[20]) : Boolean;
    VAR
      ltrecParam@1000000004 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the extensions cu on the getweight command
      //  Called From: Page DSHIP Package Worksheet (P23044602)
      //  Side Effect: None
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      buildExtensionParam(ltrecParam.Action::"Get Weight", pcodLicensePlateNo,
                          poptDocType, pcodDocNo, 0, '', '', '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);

      IF ( ltrecParam.Handled = ltrecParam.Handled::No ) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE callPostBuildPkgOptsExtension@1000000017(piExtensionCodeunit@1000000003 : Integer;pcodLicensePlateNo@1000000002 : Code[20];poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[20]);
    VAR
      ltrecParam@1000000004 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the extensions cu post build of package options
      //  Called From: Codeunit DSHIP Package Management (CU23044601)
      //  Side Effect: None
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      buildExtensionParam(ltrecParam.Action::"Post Build Package Options", pcodLicensePlateNo,
                          poptDocType, pcodDocNo, 0, '', '', '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);
    END;

    PROCEDURE callPostBuildShipOptsExtension@1000000024(piExtensionCodeunit@1000000003 : Integer;poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[20]);
    VAR
      ltrecParam@1000000004 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the extensions cu post build of shipment options
      //  Called From: Page DSHIP Package Worksheet (P23044602)
      //  Side Effect: None
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      buildExtensionParam(ltrecParam.Action::"Post Build Shipment Options", '',
                          poptDocType, pcodDocNo, 0, '', '', '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);
    END;

    PROCEDURE callShipToPhoneNoExtension@1000000055(piExtensionCodeunit@1000000003 : Integer;poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[20];VAR psPhoneNo@1000000005 : Text) : Boolean;
    VAR
      ltrecParam@1000000004 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the extension codeunit after the ship to phone number is retrieved
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      buildExtensionParam(ltrecParam.Action::"Ship To Phone No", '',
                          poptDocType, pcodDocNo, 0, psPhoneNo, '', '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);
      psPhoneNo := ltrecParam."Scan Value";

      IF ( ltrecParam.Handled = ltrecParam.Handled::No ) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE callShipFromTaxIDExtension@1000000043(piExtensionCodeunit@1000000003 : Integer;poptDocType@1000000006 : Option;pcodDocNo@1000000002 : Code[20];VAR psTaxType@1000000005 : Text;VAR psTaxID@1000000001 : Text) : Boolean;
    VAR
      ltrecParam@1000000004 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the extension codeunit to add the tax ID
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      buildExtensionParam(ltrecParam.Action::"Ship From Tax ID", '',
                          poptDocType, pcodDocNo, 0, psTaxID, psTaxType, '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);
      psTaxType := ltrecParam."Item No.";
      psTaxID := ltrecParam."Scan Value";

      IF ( ltrecParam.Handled = ltrecParam.Handled::No ) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE callShipToTaxIDExtension@1000000050(piExtensionCodeunit@1000000003 : Integer;poptDocType@1000000006 : Option;pcodDocNo@1000000002 : Code[20];VAR psTaxType@1000000005 : Text;VAR psTaxID@1000000001 : Text) : Boolean;
    VAR
      ltrecParam@1000000004 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the extension codeunit to add the tax ID
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      buildExtensionParam(ltrecParam.Action::"Ship To Tax ID", '',
                          poptDocType, pcodDocNo, 0, psTaxID, psTaxType, '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);
      psTaxType := ltrecParam."Item No.";
      psTaxID := ltrecParam."Scan Value";

      IF ( ltrecParam.Handled = ltrecParam.Handled::No ) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE callPrintCommInvExtension@1000000082(piExtensionCodeunit@1000000003 : Integer;pcodLPHeader@1000000002 : Code[20]) : Boolean;
    VAR
      ltrecParam@1000000004 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the extension codeunit before printing the commercial invoice
      //  Called From: CODEUNIT DSHIP Package Management (CU23044601)
      //  Side Effect:
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      buildExtensionParam(ltrecParam.Action::"Print Commercial Invoice", pcodLPHeader,
                          0, '', 0, '', '', '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);

      IF ( ltrecParam.Handled = ltrecParam.Handled::No ) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE callPrintIntPkgLabelExtension@1000000069(piExtensionCodeunit@1000000003 : Integer;poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[20]) : Boolean;
    VAR
      ltrecParam@1000000004 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the extension codeunit before printing the internal package label
      //  Called From: CODEUNIT DSHIP Package Management (CU23044601)
      //  Side Effect:
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      buildExtensionParam(ltrecParam.Action::"Print Internal Pkg Label", '',
                          poptDocType, pcodDocNo, 0, '', '', '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);

      IF ( ltrecParam.Handled = ltrecParam.Handled::No ) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE callOrderOpenedExtension@1000000084(piExtensionCodeunit@1000000000 : Integer;poptDocType@1000000002 : Option;pcodDocNo@1000000001 : Code[20]);
    VAR
      ltrecParam@1000000003 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the shipment extension codeunit after the order is opened.
      //  Called From: Page DSHIP Package Worksheet (P23044602)
      //  Side Effect: None
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      buildExtensionParam(ltrecParam.Action::"Order Opened", '',
                          poptDocType, pcodDocNo, 0, '', '', '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);
    END;

    PROCEDURE callTrackingEmailExtension@1000000086(piExtensionCodeunit@1000000005 : Integer;poptDocType@1000000003 : Option;pcodDocNo@1000000002 : Code[50];VAR psEmail@1000000000 : Text) : Boolean;
    VAR
      ltrecParam@1000000001 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the extension codeunit when the e-mail buffer is created
      //  Called From: Codeunit DSHIP E-mail Management (CU23044606)
      //  Side Effect: None
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      buildExtensionParam(ltrecParam.Action::"Tracking E-mail Address", '',
                          poptDocType, pcodDocNo, 0, psEmail, '', '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);
      psEmail := ltrecParam."Scan Value";

      IF ( ltrecParam.Handled = ltrecParam.Handled::No ) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE callSendEmailExtension@1000000087(piExtensionCodeunit@1000000000 : Integer;poptDocType@1000000002 : Option;pcodDocNo@1000000001 : Code[20]) : Boolean;
    VAR
      ltrecParam@1000000003 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the shipment extension codeunit when a tracking email should be sent
      //  Called From: This Codeunit (CU23044602)
      //               Codeunit DSHIP Package Management (CU23044600)
      //  Side Effect: None
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      buildExtensionParam(ltrecParam.Action::"Send E-mail", '',
                          poptDocType, pcodDocNo, 0, '', '', '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);

      IF ( ltrecParam.Handled = ltrecParam.Handled::No ) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE callRateCostExtension@1000000106(piExtensionCodeunit@1000000003 : Integer;poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[50];VAR pdRateCost@1000000005 : Decimal;VAR pdRateDiscount@1000000002 : Decimal) : Boolean;
    VAR
      ltrecParam@1000000004 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the rate extension codeunit for handling rate cost
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      ltrecParam."Rate Line Discount" := pdRateDiscount;
      buildExtensionParam(ltrecParam.Action::"Rate Cost", '',
                          poptDocType, pcodDocNo, pdRateCost, '', '', '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);
      pdRateDiscount := ltrecParam."Rate Line Discount";
      pdRateCost := ltrecParam.Rate;

      IF (ltrecParam.Handled = ltrecParam.Handled::No) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE callRatePriceExtension@1000000110(piExtensionCodeunit@1000000003 : Integer;poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[50];VAR pdRateCost@1000000005 : Decimal;VAR pdRateDiscount@1000000002 : Decimal);
    VAR
      ltrecParam@1000000004 : TEMPORARY Record 23044609;
    BEGIN
      //<FUNC>
      //  Description: Calls the rate extension codeunit for handling rate price
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      IF ( piExtensionCodeunit = 0 ) THEN
        EXIT;

      ltrecParam."Rate Line Discount" := pdRateDiscount;
      buildExtensionParam(ltrecParam.Action::"Rate Price", '',
                          poptDocType, pcodDocNo, pdRateCost, '', '', '', ltrecParam);
      CODEUNIT.RUN(piExtensionCodeunit, ltrecParam);
      pdRateDiscount := ltrecParam."Rate Line Discount";
      pdRateCost := ltrecParam.Rate;
    END;

    PROCEDURE buildAPIParam@1000000020(VAR ptrecParam@1000000002 : TEMPORARY Record 23044623;poptAction@1000000003 : Option;poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[20]);
    BEGIN
      //<FUNC>
      //  Description:
      //  Called From:
      //  Side Effect:
      //</FUNC>

      ptrecParam.Action := poptAction;
      ptrecParam."Document Type" := poptDocType;
      ptrecParam."Document No." := pcodDocNo;
      IF LicensePlateNo <> '' THEN //TPZ3299
        ptrecParam."License Plate No." := LicensePlateNo; //TPZ3299
      ptrecParam.INSERT(FALSE);
    END;

    PROCEDURE addRateToOrder@1000000042(ptrecOrderBuffer@1000000010 : TEMPORARY Record 23044601;ptrecSelectedRate@1000000000 : TEMPORARY Record 23044603);
    VAR
      lrecShipmentOptions@1000000003 : Record 23044616;
      lrecPackageOptions@1000000007 : Record 23044608;
      lrecWhseShipHeader@1000000004 : Record 7320;
      lrecSalesHeader@1000000009 : Record 36;
      lrecLPHeader@100000000 : Record 23044505;
      ltrecCommentLine@1000000006 : TEMPORARY Record 97;
      lcodLocationCode@1000000005 : Code[20];
      ldAmountToAdd@1000000012 : Decimal;
      ldDiscountPercentage@1000000002 : Decimal;
      lbSkipIWRateHandling@1000000001 : Boolean;
      loptSalesDocType@1000000008 : Option;
      lWarehouseShipmentLine@1000000011 : Record 7321;
      lSalesHeader@1000000013 : Record 36;
    BEGIN
      //<FUNC>
      //  Description: Update sales/shipments/outbound transfer based on the selected rate
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      recDShipSetup.GET;
      IF (callSelectedRateExtension(recDShipSetup."Shipment Extension Codeunit", '', ptrecOrderBuffer."Document Type", ptrecOrderBuffer."Document No.", ptrecSelectedRate."Rate Cost")) THEN
        EXIT;

      //>>001 TPZ3174
      lWarehouseShipmentLine.SETRANGE("No.",ptrecOrderBuffer."Document No.");
      IF lWarehouseShipmentLine.FINDLAST THEN BEGIN
        IF lSalesHeader.GET(lSalesHeader."Document Type"::Order,lWarehouseShipmentLine."Source No.") THEN
          IF lSalesHeader."Shipping Payment Type" = lSalesHeader."Shipping Payment Type"::"Third Party" THEN
            EXIT;
      END
      //<<001 TPZ3174
      //-->PKS TPZ3353
      ELSE IF lSalesHeader.GET(lSalesHeader."Document Type"::Order,ptrecOrderBuffer."Document No.") THEN
        IF lSalesHeader."Shipping Payment Type" = lSalesHeader."Shipping Payment Type"::"Third Party" THEN
          EXIT;
      //<--TPZ3353
      IF (lrecShipmentOptions.GET(ptrecOrderBuffer."Document Type", ptrecOrderBuffer."Document No.")) THEN BEGIN
        IF (lrecShipmentOptions."Add Freight Line" <> lrecShipmentOptions."Add Freight Line"::Automatic) THEN
          EXIT;
      END;
      IF (recDShipSetup."Skip Freight on Alt. Billing" = recDShipSetup."Skip Freight on Alt. Billing"::Yes) AND
          (ptrecSelectedRate."Order ID" <> '')
      THEN BEGIN
        lrecLPHeader.SETRANGE("Source No.", ptrecOrderBuffer."Document No.");
        // leveraging later var
        cuPackMgmt.getLPSrcTypeFromDShipDocType(ptrecOrderBuffer."Document Type", loptSalesDocType);
        lrecLPHeader.SETRANGE("Source Document", loptSalesDocType);
        IF (lrecLPHeader.FINDFIRST()) THEN BEGIN
        // Only care about first since that's what carriers respect
          IF (lrecPackageOptions.GET(lrecLPHeader."No.") AND
              ((lrecPackageOptions."Bill Receiver Account No." <> '') OR
                (lrecPackageOptions."Bill Third Party Account No." <> '') OR
               (lrecPackageOptions."FedEx Ground Collect" = lrecPackageOptions."FedEx Ground Collect"::Collect)))
            THEN
              EXIT;
        END;
      END;

      ldAmountToAdd := getSplitRateForSourceDoc(ptrecOrderBuffer, ptrecSelectedRate, ltrecCommentLine, ldDiscountPercentage);

      IF (ptrecOrderBuffer."Document Type" = ptrecOrderBuffer."Document Type"::"Misc. Shipment") THEN BEGIN
        addRateToMiscShipment(ptrecOrderBuffer."Document No.", ldAmountToAdd);
      END ELSE IF (ltrecCommentLine.FINDSET(FALSE) AND (ldAmountToAdd > 0)) THEN BEGIN
        REPEAT
          IF (ptrecOrderBuffer."Document Type" IN [ptrecOrderBuffer."Document Type"::"Warehouse Shipment", ptrecOrderBuffer."Document Type"::"Sales Order"]) THEN BEGIN
            loptSalesDocType := ptrecOrderBuffer."Document Subtype";
            IF (ptrecOrderBuffer."Document Type" = ptrecOrderBuffer."Document Type"::"Warehouse Shipment") THEN BEGIN
              lrecWhseShipHeader.GET(ptrecOrderBuffer."Document No.");
              lcodLocationCode := lrecWhseShipHeader."Location Code";
              loptSalesDocType := lrecSalesHeader."Document Type"::Order;
            END
            //-->TPZ3353
            ELSE IF (ptrecOrderBuffer."Document Type" = ptrecOrderBuffer."Document Type"::"Sales Order") THEN BEGIN
              IF lrecSalesHeader.GET(lrecSalesHeader."Document Type"::Order,ptrecOrderBuffer."Document No.") THEN;
              lcodLocationCode := lrecSalesHeader."Location Code";
              loptSalesDocType := lrecSalesHeader."Document Type"::Order;
            END;
            //<--TPZ3353
            addRateToSalesOrder(ltrecCommentLine."No.", loptSalesDocType, ldAmountToAdd, ptrecSelectedRate."Rate Cost", ldDiscountPercentage, lcodLocationCode);
          END;
        UNTIL(ltrecCommentLine.NEXT() = 0);
      END;
    END;

    PROCEDURE getSplitRateForSourceDoc@1000000036(ptrecOrderBuffer@1000000000 : TEMPORARY Record 23044601;ptrecSelectedRate@1000000001 : TEMPORARY Record 23044603;VAR ptrecCommentLine@1000000006 : TEMPORARY Record 97;VAR pdDiscountPercentage@1000000002 : Decimal) : Decimal;
    VAR
      lrecDShipRatePrice@1000000008 : Record 23044610;
      lrecWhseShipmentLine@1000000005 : Record 7321;
      ldRateToReturn@1000000003 : Decimal;
      liTotalSourceDocument@1000000004 : Integer;
      lbNoSplit@1000000007 : Boolean;
      lbGetRatePriceRecord@1000000009 : Boolean;
      lbHandledFreightPrice@1000000010 : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Calculate rate for source document
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      ldRateToReturn := ptrecSelectedRate."Rate Cost";
      recDShipSetup.GET();

      lbHandledFreightPrice := callRateCostExtension(recDShipSetup."Shipment Extension Codeunit",
                                                     ptrecOrderBuffer."Document Type",
                                                     ptrecOrderBuffer."Document No.",
                                                     ldRateToReturn, pdDiscountPercentage);

      CASE ptrecOrderBuffer."Document Type" OF
        ptrecOrderBuffer."Document Type"::"Misc. Shipment",
        ptrecOrderBuffer."Document Type"::"Outbound Transfer":
          EXIT(ldRateToReturn);
      END;
      IF (ptrecOrderBuffer."Document Type" = ptrecOrderBuffer."Document Type"::"Warehouse Shipment") THEN BEGIN
        lrecWhseShipmentLine.SETRANGE("No.", ptrecOrderBuffer."Document No.");
        lrecWhseShipmentLine.FINDFIRST;
        IF (lrecWhseShipmentLine."Source Document" <> lrecWhseShipmentLine."Source Document"::"Sales Order") THEN
          EXIT(ldRateToReturn);
      END;

      IF (NOT lbHandledFreightPrice) THEN BEGIN
        lbGetRatePriceRecord := getDynamicShipRatePriceRecord(ptrecOrderBuffer, lrecDShipRatePrice, ptrecSelectedRate);
        IF ((recDShipSetup."Freight Billing Type" <> recDShipSetup."Freight Billing Type"::None) AND NOT lbGetRatePriceRecord) THEN BEGIN
          EXIT(0);
        END;

        IF (lbGetRatePriceRecord) THEN BEGIN
          CASE lrecDShipRatePrice."Rate Handling" OF
            lrecDShipRatePrice."Rate Handling"::"Don't Add Freight Charge":
              EXIT(0);
            lrecDShipRatePrice."Rate Handling"::"Add Fixed Price":
              ldRateToReturn := lrecDShipRatePrice."Fixed Price";
            lrecDShipRatePrice."Rate Handling"::"Add Markup Percentage":
              ldRateToReturn := ldRateToReturn * (lrecDShipRatePrice."Markup %" / 100 + 1);
            lrecDShipRatePrice."Rate Handling"::"Add Markup Amount":
              ldRateToReturn := ldRateToReturn + lrecDShipRatePrice."Markup Amount";
          END;// case
        pdDiscountPercentage := lrecDShipRatePrice."Line Discount Percentage";
        END; //if get rate price
      END; //if skip freight price

      IF (ptrecOrderBuffer."Document Type" = ptrecOrderBuffer."Document Type"::"Warehouse Shipment") THEN BEGIN
        lrecWhseShipmentLine.SETRANGE("No.", ptrecOrderBuffer."Document No.");
        IF (lrecWhseShipmentLine.FINDSET(FALSE)) THEN BEGIN
          liTotalSourceDocument := 0;
          lbNoSplit := FALSE;
          REPEAT
            IF (NOT lbNoSplit) THEN BEGIN
              // store this line in the list
              ptrecCommentLine.RESET;
              ptrecCommentLine.SETRANGE("No.", lrecWhseShipmentLine."Source No.");
              // In order to handle same source no and different source document
              ptrecCommentLine.SETRANGE(Comment, FORMAT(lrecWhseShipmentLine."Source Document"));
              IF ( NOT ptrecCommentLine.FIND('-') ) THEN BEGIN
                ptrecCommentLine.RESET;
                ptrecCommentLine.INIT;
                ptrecCommentLine."Table Name" := ptrecCommentLine."Table Name"::Item;
                ptrecCommentLine."No." := lrecWhseShipmentLine."Source No.";
                ptrecCommentLine."Line No." := lrecWhseShipmentLine."Line No.";
                ptrecCommentLine.Comment := FORMAT(lrecWhseShipmentLine."Source Document");
                ptrecCommentLine.INSERT;
                liTotalSourceDocument += 1;
              END; //if
            END; //if
            lbNoSplit := recDShipSetup."Split Freight Cost" = recDShipSetup."Split Freight Cost"::No;
          UNTIL ((lrecWhseShipmentLine.NEXT() = 0) OR lbNoSplit);

          ldRateToReturn := ldRateToReturn / liTotalSourceDocument;
        END;
      END ELSE IF (ptrecOrderBuffer."Document Type" = ptrecOrderBuffer."Document Type"::"Sales Order") THEN BEGIN
        ptrecCommentLine.INIT;
        ptrecCommentLine."Table Name" := ptrecCommentLine."Table Name"::Item;
        ptrecCommentLine."No." := ptrecOrderBuffer."Document No.";
        ptrecCommentLine."Line No." := 10000;   // Doesn't matter, just need a number
        ptrecCommentLine.Comment := FORMAT(ptrecOrderBuffer."Document Type");
        ptrecCommentLine.INSERT;
      END;

      IF (lrecDShipRatePrice."Rounding Precision" > 0) THEN
        ldRateToReturn := ROUND(ldRateToReturn, lrecDShipRatePrice."Rounding Precision")
      ELSE
        ldRateToReturn := ROUND(ldRateToReturn, 0.01);  // Default

      callRatePriceExtension(recDShipSetup."Shipment Extension Codeunit",
                             ptrecOrderBuffer."Document Type",
                             ptrecOrderBuffer."Document No.",
                             ldRateToReturn, pdDiscountPercentage);

      EXIT(ldRateToReturn);
    END;

    PROCEDURE addRateToSalesOrder@1000000066(pcodDocumentNo@1000000004 : Code[20];poptDocumentType@1000000002 : Option;pdRate@1000000005 : Decimal;pdCost@1000000012 : Decimal;pdDiscountPercentage@1000000014 : Decimal;pcodLocationCode@1000000017 : Code[20]);
    VAR
      lrecFreightQuote@1000000008 : Record 23044625;
      lrecSalesHeader@1000000001 : Record 36;
      lrecSalesLine@1000000000 : Record 37;
      lrecResource@1000000003 : Record 156;
      lrecGLAccount@1000000006 : Record 15;
      lrecVATPostingSetup@1000000016 : Record 325;
      lbNewLine@1000000007 : Boolean;
      lbUpdatePrice@1000000009 : Boolean;
      liNextLineNo@1000000015 : Integer;
      loptVATCalc@1000000018 : Option;
      SalesLineFreight@1000000010 : Record 37;
      SalesLineLoc@1000000011 : Record 37;
      IWXLicensePlateLineUsage@1000000013 : Record 23044507;
      IWXLicensePlateHeader@1000000019 : Record 23044505;
      WhseShipLineLoc@1000000020 : Record 7321;
    BEGIN
      //<FUNC>
      //  Description: Add resource or G/L to the sales order
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>
      //-->TPZ3353
      IF pcodDocumentNo <> MOPSalesOrderNo THEN
        pcodDocumentNo := MOPSalesOrderNo;
      //<--TPZ3553
      //>>PKS
      DeleteFreightLine(pcodDocumentNo,pcodLocationCode);
      //<<PKS
      recDShipSetup.GET;
      IF ( recDShipSetup."Freight Billing Type" <> recDShipSetup."Freight Billing Type"::None) THEN BEGIN
        lrecSalesHeader.GET(poptDocumentType, pcodDocumentNo);
        IF ( pcodLocationCode = '' ) THEN
          pcodLocationCode := lrecSalesHeader."Location Code";
        lrecSalesLine.SETRANGE("Document No.", pcodDocumentNo);
        lrecSalesLine.FINDLAST;
        SalesLineLoc := lrecSalesLine; //PKS
        loptVATCalc := lrecSalesLine."VAT Calculation Type";
        liNextLineNo := lrecSalesLine."Line No." + 10000;
        CASE recDShipSetup."Freight Billing Behaviour" OF
          recDShipSetup."Freight Billing Behaviour"::Update:
            BEGIN
              lrecSalesLine.SETRANGE(Type, recDShipSetup."Freight Billing Type");
              lrecSalesLine.SETRANGE("No.", recDShipSetup."Freight Billing No.");
              lrecSalesLine.SETRANGE("Location Code", pcodLocationCode);
              lrecSalesLine.SETRANGE("Qty. to Ship", 1);
              lrecSalesLine.SETFILTER("Unit Price",'>0');//vaseem
              IF (lrecSalesLine.FINDLAST()) THEN
                lbNewLine := FALSE
              ELSE
                lbNewLine := TRUE;
            END;
          recDShipSetup."Freight Billing Behaviour"::"Create New":
            BEGIN
              lbNewLine := TRUE;
            END;
        END; // case freight billing
        IF ( lbNewLine ) THEN BEGIN
          lrecSalesLine.RESET;
          lrecSalesLine.INIT;
          lrecSalesLine."Document Type" := poptDocumentType;
          lrecSalesLine."Document No." := pcodDocumentNo;
          lrecSalesLine."Line No." := liNextLineNo;
          lrecSalesLine."Sell-to Customer No." := SalesLineLoc."Sell-to Customer No."; //PKS
          lrecSalesLine."Shipment Date" := SalesLineLoc."Shipment Date"; //PKS
        END; // if lbNewLine

        IF ( recDShipSetup."Freight Billing No." <> '') THEN BEGIN
          IF ( recDShipSetup."Freight Billing Type" = recDShipSetup."Freight Billing Type"::"G/L") THEN BEGIN
            lrecGLAccount.GET(recDShipSetup."Freight Billing No.");
            lrecSalesLine.Type := lrecSalesLine.Type::"G/L Account";
            lrecSalesLine.Description := lrecGLAccount.Name;
            lrecSalesLine."Tax Group Code" := lrecGLAccount."Tax Group Code";
            lrecSalesLine."VAT Bus. Posting Group" := lrecGLAccount."VAT Bus. Posting Group";
            lrecSalesLine."VAT Prod. Posting Group" := lrecGLAccount."VAT Prod. Posting Group";
            lrecSalesLine."Gen. Bus. Posting Group" := lrecSalesHeader."Gen. Bus. Posting Group";
            lrecSalesLine."Gen. Prod. Posting Group" := lrecGLAccount."Gen. Prod. Posting Group";
          END ELSE IF ( recDShipSetup."Freight Billing Type" = recDShipSetup."Freight Billing Type"::Resource ) THEN BEGIN
            lrecResource.GET(recDShipSetup."Freight Billing No.");
            lrecSalesLine.Type := lrecSalesLine.Type::Resource;
            lrecSalesLine.Description := lrecResource.Name;
            lrecSalesLine."Tax Group Code" := lrecResource."Tax Group Code";
            lrecSalesLine."VAT Prod. Posting Group" := lrecResource."VAT Prod. Posting Group";
            lrecSalesLine."Gen. Bus. Posting Group" := lrecSalesHeader."Gen. Bus. Posting Group";
            lrecSalesLine."Gen. Prod. Posting Group" := lrecResource."Gen. Prod. Posting Group";
            lrecSalesLine."Unit of Measure Code" := lrecResource."Base Unit of Measure";
          END;
        END; // if recDShipSetup."Rate Cost Handling Type" <> ::" "

        lrecVATPostingSetup.SETRANGE("VAT Bus. Posting Group", lrecSalesLine."VAT Bus. Posting Group");
        lrecVATPostingSetup.SETRANGE("VAT Prod. Posting Group", lrecSalesLine."VAT Prod. Posting Group");
        IF ( lrecVATPostingSetup.FINDFIRST ) THEN
          lrecSalesLine."VAT Calculation Type" := lrecVATPostingSetup."VAT Calculation Type"
        ELSE
          lrecSalesLine."VAT Calculation Type" := loptVATCalc;

        lrecSalesLine."No." := recDShipSetup."Freight Billing No.";
        lrecSalesLine."Location Code" := pcodLocationCode;
      //   lrecSalesLine."Package Tracking No." := lrecSalesHeader."Package Tracking No.";
        lrecSalesLine."Package Tracking No." := 'N/A';
        IF ( NOT lbNewLine ) THEN BEGIN
          IF ( lrecFreightQuote.GET(lrecSalesLine."Document Type", lrecSalesLine."Document No.", lrecSalesLine."Line No.") ) THEN BEGIN
            CASE recDShipSetup."Freight Quote Update Behaviour" OF
              recDShipSetup."Freight Quote Update Behaviour"::Always:
                BEGIN
                  lbUpdatePrice := TRUE;
                END;
              recDShipSetup."Freight Quote Update Behaviour"::"If Higher":
                BEGIN
                  lbUpdatePrice := pdRate > lrecSalesLine."Unit Price";
                END;
              recDShipSetup."Freight Quote Update Behaviour"::"If Lower":
                BEGIN
                  lbUpdatePrice := pdRate < lrecSalesLine."Unit Price";
                END;
            END; // case quote update behaviour
            IF ( lrecFreightQuote.DELETE ) THEN ;
          END ELSE // if freight quote exists
            lbUpdatePrice := TRUE;
        END ELSE
          lbUpdatePrice := TRUE;

        IF ( lbUpdatePrice ) THEN
          lrecSalesLine."System-Created Entry" := TRUE;
        lrecSalesLine."Quantity (Base)" := 1;
        lrecSalesLine.Quantity := 1;
        lrecSalesLine."Qty. to Ship (Base)" := 1;
        lrecSalesLine."Qty. to Ship" := 1;
        lrecSalesLine."Qty. to Invoice (Base)" := 1;
        lrecSalesLine."Qty. to Invoice" := 1;
        lrecSalesLine.VALIDATE("Unit Price",pdRate);
        lrecSalesLine."Unit Cost" := pdCost;
        lrecSalesLine."Unit Cost (LCY)" := pdCost;

        lrecSalesLine."Dimension Set ID" := lrecSalesHeader."Dimension Set ID";
        lrecSalesLine."Tax Liable" := lrecSalesHeader."Tax Liable";
        lrecSalesLine."Tax Area Code" := lrecSalesHeader."Tax Area Code";
        lrecSalesLine."Prepayment Tax Liable" := lrecSalesHeader."Tax Liable";
        lrecSalesLine."Prepayment Tax Area Code" := lrecSalesHeader."Tax Area Code";
        lrecSalesLine."Shipping Charge" := TRUE;//PKS


        IF ( lbNewLine ) THEN BEGIN
          lrecSalesLine.INSERT;
        END ELSE BEGIN
          lrecSalesLine.MODIFY;
        END; //if lbNewLine

        //lrecSalesLine.VALIDATE("Line Discount %", pdDiscountPercentage);
        lrecSalesLine.InitOutstanding;
        lrecSalesLine."System-Created Entry" := FALSE;
        lrecSalesLine.MODIFY;

        lrecSalesHeader.GET(poptDocumentType, pcodDocumentNo);
        //<vaseem>
         IF lrecSalesHeader."Free Freight" AND lbNewLine THEN BEGIN
           liNextLineNo += 10000;
           SalesLineFreight.INIT;
           SalesLineFreight := lrecSalesLine;
           SalesLineFreight."Line No." := liNextLineNo;
           SalesLineFreight."System-Created Entry" := TRUE;
           SalesLineFreight.VALIDATE("Unit Price", -pdRate);
           {
           SalesLineFreight."Unit Cost" := -pdCost;
           SalesLineFreight."Unit Cost (LCY)" := -pdCost;
           }
           SalesLineFreight."Unit Cost" := 0;
           SalesLineFreight."Unit Cost (LCY)" := 0;
           SalesLineFreight."Shipping Charge" := TRUE; //- PKS Code commented not required
           SalesLineFreight.INSERT;
        END;
        //-->TPZ3333
        WhseShipLineLoc.RESET;
        WhseShipLineLoc.SETCURRENTKEY("No.","Source Document","Source No.");
        WhseShipLineLoc.SETRANGE("Source No.",pcodDocumentNo);
        IF WhseShipLineLoc.FINDSET THEN BEGIN
          IWXLicensePlateLineUsage.RESET;
          IWXLicensePlateLineUsage.SETRANGE("Source Document",IWXLicensePlateLineUsage."Source Document"::Shipment);
          IWXLicensePlateLineUsage.SETRANGE("Source No.",WhseShipLineLoc."No.");
          //IWXLicensePlateLineUsage.SETRANGE("Source Line No.",WhseShipLineLoc."Line No.");
          IWXLicensePlateLineUsage.SETRANGE("Posting Date",0D);
          IF IWXLicensePlateLineUsage.FINDSET THEN
            REPEAT
              IF IWXLicensePlateHeader.GET(IWXLicensePlateLineUsage."License Plate No.") THEN BEGIN
                IWXLicensePlateHeader."Freight Cost" := pdCost;
                IWXLicensePlateHeader.MODIFY;
              END;
            UNTIL IWXLicensePlateLineUsage.NEXT = 0;
        END;
        //<--TPZ3333
        updateSalesOrderTotals(lrecSalesHeader);
      END; // if "rate cost handling type" <> ''
    END;

    PROCEDURE addRateToMiscShipment@1000000074(pcodDocumentNo@1000000001 : Code[20];pdRate@1000000000 : Decimal);
    VAR
      lrecMiscShipment@1000000002 : Record 23044621;
    BEGIN
      //<FUNC>
      //  Description: Add rate price to misc ship document
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      lrecMiscShipment.GET(pcodDocumentNo);
      lrecMiscShipment."Shipping Cost" := pdRate;
      lrecMiscShipment.MODIFY;
    END;

    PROCEDURE getSelectedRateData@1000000041(VAR pasFromAddress@1000000002 : ARRAY [12] OF Text[100];VAR pasToAddress@1000000001 : ARRAY [12] OF Text[100];poptDocType@1000000009 : Option;pcodDocNo@1000000010 : Code[20]) : Boolean;
    VAR
      ltrecSelectedRate@1000000004 : TEMPORARY Record 23044603;
      ltrecRateBuffer@1000000003 : TEMPORARY Record 23044603;
      ltrecShipMessages@1000000000 : TEMPORARY Record 23044604;
      ltrecAPIParam@1000000011 : TEMPORARY Record 23044623;
      lpgRateWorksheet@1000000005 : Page 23044603;
      ldCheapestRate@1000000007 : Decimal;
      lbShowRateSelectionPage@1000000006 : Boolean;
      lbSelectedRate@1000000008 : Boolean;
      liAPICodeunit@1000000012 : Integer;
      ltcRateError@1000000013 : TextConst 'ENU=rate_error;ESM=rate_error;FRC=rate_error;ENC=rate_error';
      lsError@1000000014 : Text;
      DSHIPCarrier@1000000015 : Record 23044607;
    BEGIN
      //<FUNC>
      //  Description: Get a selected rate data
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      recDShipSetup.GET;
      lbShowRateSelectionPage := TRUE;
      lbSelectedRate := FALSE;

      cuRateSingleton.getRateBuffer(ltrecRateBuffer);
      cuRateSingleton.getShipMessages(ltrecShipMessages);
      cuRateSingleton.clearSelectedRate;

      CASE recDShipSetup."Freight Auto Selection" OF
        recDShipSetup."Freight Auto Selection"::None:
          BEGIN
            lbShowRateSelectionPage := TRUE;
          END;
        recDShipSetup."Freight Auto Selection"::Single:
          BEGIN
            lbShowRateSelectionPage := FALSE;
            IF ( ltrecRateBuffer.COUNT <> 1 ) THEN BEGIN
              lbShowRateSelectionPage := TRUE;
            END ELSE IF ( ltrecShipMessages.FINDSET ) THEN
              REPEAT
                lbShowRateSelectionPage := ltrecShipMessages.Type = ltcRateError;
              UNTIL( (lbShowRateSelectionPage) OR (ltrecShipMessages.NEXT=0) );

            IF ( NOT lbShowRateSelectionPage ) THEN BEGIN
              ltrecSelectedRate.COPY(ltrecRateBuffer);
              lbSelectedRate := TRUE;
            END ELSE
              lsError := ltrecShipMessages.Message;
          END;
        recDShipSetup."Freight Auto Selection"::Cheapest:
          BEGIN
            lbShowRateSelectionPage := FALSE;
            IF ( ltrecRateBuffer.COUNT < 1 ) THEN BEGIN
              lbShowRateSelectionPage := TRUE;
            END ELSE BEGIN
              IF ( ltrecRateBuffer.FINDSET(FALSE) ) THEN BEGIN
                ldCheapestRate := ltrecRateBuffer."Rate Cost";
                ltrecSelectedRate.COPY(ltrecRateBuffer);
                ltrecSelectedRate.INSERT;
                REPEAT
                  IF ( ldCheapestRate > ltrecRateBuffer."Rate Cost" ) THEN BEGIN
                    ldCheapestRate := ltrecRateBuffer."Rate Cost";
                    ltrecSelectedRate.RESET;
                    ltrecSelectedRate.DELETEALL;
                    ltrecSelectedRate.COPY(ltrecRateBuffer);
                    ltrecSelectedRate.INSERT;
                  END;
                UNTIL (ltrecRateBuffer.NEXT = 0);
                lbSelectedRate := TRUE;
              END;
            END;
          END;
      END;



      IF ( lbShowRateSelectionPage ) THEN BEGIN
        COMMIT;

        buildAPIParam(ltrecAPIParam, ltrecAPIParam.Action::ShowRates, poptDocType, pcodDocNo);
        IF ( callFreightIntegration(ltrecAPIParam) ) THEN BEGIN
          EXIT(TRUE); // the next call in the chain, handleSelectedRate, verifies that one was selected
        END;

        IF ( NOT GUIALLOWED ) THEN BEGIN
          IF ( lsError <> '' ) THEN
            ERROR('The carrier generated an error: %1', lsError)
          ELSE IF ( ltrecRateBuffer.COUNT = 0 ) THEN
            ERROR('The selected service is not available for this shipment.')
          ELSE
            ERROR('The rate could not be automatically selected.');
        END ELSE IF ( (ltrecRateBuffer.COUNT = 0) AND (ltrecShipMessages.COUNT = 0) ) THEN BEGIN
          ERROR('No valid services were returned for this shipment.');
        END;
      //>> 3187
        CLEAR(IsNonTBDorder);
        IF AllowedAPICall(ltrecAPIParam."Document No.") THEN BEGIN
          IF SalesHeader.GET(SalesHeader."Document Type"::Order,MOPSalesOrderNo) THEN BEGIN
            DSHIPCarrier.SETRANGE(Code,SalesHeader."Shipping Agent Code");
            IF (DSHIPCarrier.FINDFIRST) AND (DSHIPCarrier."Freight Integ. Provider Code" = 'EXTERNAL') THEN BEGIN
              IF (SalesHeader."Shipping Agent Code"<>'TBD') THEN BEGIN
                ltrecRateBuffer.SETRANGE("Carrier Name",SalesHeader."Shipping Agent Code");
                IF ltrecRateBuffer.FINDFIRST THEN BEGIN
                  ltrecSelectedRate := ltrecRateBuffer;
                  lbSelectedRate := TRUE;
                  IsNonTBDorder := TRUE;
                END;
              END;
            END;
          END;
        END;

        IF NOT IsNonTBDorder THEN BEGIN //<<3187
          lpgRateWorksheet.initPage(pasFromAddress, pasToAddress, ltrecShipMessages, ltrecRateBuffer);
          IF ( lpgRateWorksheet.RUNMODAL = ACTION::OK ) THEN BEGIN
            lpgRateWorksheet.GETRECORD(ltrecSelectedRate);
            lbSelectedRate := TRUE;
          END; // if runmodal = ok
        END;//3187
      END; // if show rate page

      IF ( lbSelectedRate ) THEN
        cuRateSingleton.setSelectedRate(ltrecSelectedRate);

      EXIT(lbSelectedRate);
    END;

    PROCEDURE handleSelectedRate@1000000083(ptrecOrderBuffer@1000000001 : TEMPORARY Record 23044601) : Boolean;
    VAR
      ltrecSelectedRate@1000000002 : TEMPORARY Record 23044603;
    BEGIN
      //<FUNC>
      //  Description:
      //  Called From:
      //  Side Effect:
      //</FUNC>

      cuRateSingleton.getSelectedRate(ltrecSelectedRate);

      IF ( ltrecSelectedRate.ID = '' ) THEN
        EXIT(FALSE);

      addRateToOrder(ptrecOrderBuffer, ltrecSelectedRate);

      EXIT(TRUE);
    END;

    PROCEDURE getDynamicShipRatePriceRecord@1000000065(ptrecOrderBuffer@1000000002 : TEMPORARY Record 23044601;VAR precDShipRatePrice@1000000004 : Record 23044610;ptrecSelectedRate@1000000005 : TEMPORARY Record 23044603) : Boolean;
    VAR
      lrecCustomer@1000000001 : Record 18;
      lrecSalesHeader@1000000000 : Record 36;
      lrecWhseShipmentLine@1000000003 : Record 7321;
      lrecShippingAgent@1000000007 : Record 291;
      lrecDShipCarrier@1000000009 : Record 23044607;
      lrecDShipCarrierAccount@1000000008 : Record 23044612;
      lcodShipAgentCode@1000000006 : Code[10];
      lbFoundRecord@1000000010 : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Get a dynamic ship rate price record
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      IF (ptrecOrderBuffer."Document Type" = ptrecOrderBuffer."Document Type"::"Warehouse Shipment") THEN BEGIN
        lrecWhseShipmentLine.SETRANGE("No.", ptrecOrderBuffer."Document No.");
        lrecWhseShipmentLine.FINDFIRST;
        lrecSalesHeader.GET(lrecSalesHeader."Document Type"::Order, lrecWhseShipmentLine."Source No.");
      END ELSE IF (ptrecOrderBuffer."Document Type" = ptrecOrderBuffer."Document Type"::"Sales Order") THEN BEGIN
        lrecSalesHeader.GET(ptrecOrderBuffer."Document Subtype", ptrecOrderBuffer."Document No.");
        //lrecSalesHeader.GET(lrecSalesHeader."Document Type"::Order, ptrecOrderBuffer."Document No.");
      END;

      updateSalesOrderTotals(lrecSalesHeader);

      lbFoundRecord := FALSE;

      lrecDShipCarrier.SETRANGE("Account ID", ptrecSelectedRate."Carrier Account ID");
      lrecDShipCarrierAccount.SETRANGE("Account ID", ptrecSelectedRate."Carrier Account ID");
      IF (lrecDShipCarrierAccount.FINDFIRST()) THEN BEGIN
        lcodShipAgentCode := lrecDShipCarrierAccount.Code;
      END ELSE
      IF (lrecDShipCarrier.FINDFIRST()) THEN BEGIN
        lcodShipAgentCode := lrecDShipCarrier.Code;
      END; // if carrieraccount.findfirst

      IF (lcodShipAgentCode = '') THEN
        ERROR(tcUnknownShipAgent,
              ptrecSelectedRate."Carrier Name",
              ptrecSelectedRate."Carrier Account ID");

      lrecCustomer.GET(lrecSalesHeader."Sell-to Customer No.");

      lbFoundRecord := getSpecificSalesTypeRate(precDShipRatePrice, lcodShipAgentCode, ptrecSelectedRate, precDShipRatePrice."Sales Type"::Customer, lrecCustomer."No.", lrecSalesHeader.Amount);

      IF (NOT lbFoundRecord) THEN BEGIN
        lbFoundRecord := getSpecificSalesTypeRate(precDShipRatePrice, lcodShipAgentCode, ptrecSelectedRate, precDShipRatePrice."Sales Type"::"Customer Price Group", lrecCustomer."Customer Price Group", lrecSalesHeader.Amount);
      END;

      IF ( NOT lbFoundRecord ) THEN BEGIN
        lbFoundRecord := getSpecificSalesTypeRate(precDShipRatePrice, lcodShipAgentCode, ptrecSelectedRate, precDShipRatePrice."Sales Type"::Campaign, lrecSalesHeader."Campaign No.", lrecSalesHeader.Amount);
      END;

      IF ( NOT lbFoundRecord ) THEN BEGIN
        lbFoundRecord := getSpecificSalesTypeRate(precDShipRatePrice, lcodShipAgentCode, ptrecSelectedRate, precDShipRatePrice."Sales Type"::"All Customers", '', lrecSalesHeader.Amount);
      END;

      EXIT(lbFoundRecord);
    END;

    PROCEDURE getSpecificSalesTypeRate@1000000032(VAR precDShipRatePrice@1000000000 : Record 23044610;pcodCarrier@1000000002 : Code[10];precSelectedRate@1000000003 : TEMPORARY Record 23044603;poptSalesType@1000000005 : ' ,Customer,Customer Price Group,All Customers,Campaign';pcodSalesCode@1000000006 : Code[20];pdOrderTotal@1000000001 : Decimal) : Boolean;
    VAR
      lbFoundRecord@1000000004 : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Get a dynamic ship rate price record for specific customer
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      precDShipRatePrice.SETFILTER("Sales Type", '%1|%2', poptSalesType, precDShipRatePrice."Sales Type"::Choose);
      precDShipRatePrice.SETRANGE("Sales Code", pcodSalesCode);
      precDShipRatePrice.SETRANGE("Shipping Agent Code", pcodCarrier);
      precDShipRatePrice.SETRANGE("Service Name", precSelectedRate.Service);
      precDShipRatePrice.SETFILTER("Maximum Rate", '>=%1|0', precSelectedRate."Rate Cost");
      precDShipRatePrice.SETCURRENTKEY("Minimum Order Total", "Entry No.");
      precDShipRatePrice.ASCENDING(FALSE);

      // max rate
      IF ( precDShipRatePrice.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          IF ( pdOrderTotal >= precDShipRatePrice."Minimum Order Total" ) THEN BEGIN
            EXIT(TRUE);
          END;
        UNTIL(precDShipRatePrice.NEXT=0);
      END;
      precDShipRatePrice.SETRANGE("Maximum Rate");

      // specific service
      IF ( precDShipRatePrice.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          IF ( pdOrderTotal >= precDShipRatePrice."Minimum Order Total" ) THEN BEGIN
            EXIT(TRUE);
          END;
        UNTIL(precDShipRatePrice.NEXT=0);
      END;
      precDShipRatePrice.SETRANGE("Service Name", '');

      // specific carrier
      IF ( precDShipRatePrice.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          IF ( pdOrderTotal >= precDShipRatePrice."Minimum Order Total" ) THEN BEGIN
            EXIT(TRUE);
          END;
        UNTIL(precDShipRatePrice.NEXT=0);
      END;
      precDShipRatePrice.SETRANGE("Shipping Agent Code", '');

      // no specifics
      IF ( precDShipRatePrice.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          IF ( pdOrderTotal >= precDShipRatePrice."Minimum Order Total" ) THEN BEGIN
            EXIT(TRUE);
          END;
        UNTIL(precDShipRatePrice.NEXT=0);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE updateSalesOrderTotals@1000000039(VAR precSalesHeader@1000000000 : Record 36);
    VAR
      lrecSalesLine@1000000001 : Record 37;
      lrecTempVATAmountLine0@1000000003 : TEMPORARY Record 290;
      lrecTempVATAmountLine1@1000000002 : TEMPORARY Record 290;
      lcuReleaseSalesDocument@1000000004 : Codeunit 414;
    BEGIN
      {// 2018+::varRemoveBegin
      lrecTempVATAmountLine0
      lrecTempVATAmountLine1
      }// 2018+::varRemoveEnd
      {// 2017-::varRemoveBegin
      lcuReleaseSalesDocument
      }// 2017-::varRemoveEnd
      //<FUNC>
      //  Description: From CU414, updates sales order totals (Amount & inc VAT)
      //  Called From: This codeunit(23044602)
      //  Side Effect: Whatever the effect of updating the totals is
      //</FUNC>

      {// 2018+::begin
      IF (lcuReleaseSalesDocument.CalcAndUpdateVATOnLines(precSalesHeader, lrecSalesLine)) THEN
        precSalesHeader.CALCFIELDS(Amount, "Amount Including VAT");
      }// 2018+::end
      {// 2017-::begin
      lrecSalesLine.SetSalesHeader(precSalesHeader);
      IF ( precSalesHeader."Tax Area Code" = '' ) THEN BEGIN  // VAT
        lrecSalesLine.CalcVATAmountLines(0, precSalesHeader, lrecSalesLine, lrecTempVATAmountLine0);
        lrecSalesLine.CalcVATAmountLines(1, precSalesHeader, lrecSalesLine, lrecTempVATAmountLine1);
        lrecSalesLine.UpdateVATOnLines(0, precSalesHeader, lrecSalesLine, lrecTempVATAmountLine0);
        lrecSalesLine.UpdateVATOnLines(1, precSalesHeader, lrecSalesLine, lrecTempVATAmountLine1);
      END ELSE
        // this function does not exist in all localizations
        lrecSalesLine.CalcSalesTaxLines(precSalesHeader, lrecSalesLine);

      precSalesHeader.CALCFIELDS(Amount, "Amount Including VAT");
      }// 2017-::end
    END;

    PROCEDURE createDictStrObj@1000000048(VAR pdnDictionary@1000000000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2");
    VAR
      ldnType@1000000005 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      ldnActivator@1000000004 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Activator";
      ldnArray@1000000003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      ldnString@1000000002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      ldnObject@1000000001 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";
    BEGIN
      //<FUNC>
      //  Description: Creates a dictionary<str, obj> as required for EasyPost calls
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: Dictionary will be cleared.
      //</FUNC>

      ldnArray := ldnArray.CreateInstance(GETDOTNETTYPE(ldnType), 2);
      ldnArray.SetValue(GETDOTNETTYPE(ldnString), 0);
      ldnArray.SetValue(GETDOTNETTYPE(ldnObject), 1);
      ldnType := GETDOTNETTYPE(pdnDictionary);
      ldnType := ldnType.MakeGenericType(ldnArray);
      pdnDictionary := ldnActivator.CreateInstance(ldnType);
    END;

    PROCEDURE createDictStrDec@1000000052(VAR pdnDictionary@1000000000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2");
    VAR
      ldnType@1000000005 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      ldnActivator@1000000004 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Activator";
      ldnArray@1000000003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      ldnString@1000000002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      ldDecimal@1000000006 : Decimal;
    BEGIN
      //<FUNC>
      //  Description: Creates a dictionary<str, dec> as required for insurance
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: Dictionary will be cleared.
      //</FUNC>

      ldnArray := ldnArray.CreateInstance(GETDOTNETTYPE(ldnType), 2);
      ldnArray.SetValue(GETDOTNETTYPE(ldnString), 0);
      ldnArray.SetValue(GETDOTNETTYPE(ldDecimal), 1);
      ldnType := GETDOTNETTYPE(pdnDictionary);
      ldnType := ldnType.MakeGenericType(ldnArray);
      pdnDictionary := ldnActivator.CreateInstance(ldnType);
    END;

    PROCEDURE createListOfDict@1000000040(VAR pdnList@1000000000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1");
    VAR
      ldnTypeDict@1000000009 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      ldnArrayDict@1000000003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      ldnTypeList@1000000004 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      ldnArrayList@1000000002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      ldnActivator@1000000006 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Activator";
      ldnDictionary@1000000001 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";
      ldnString@1000000008 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      ldnObject@1000000007 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";
    BEGIN
      //<FUNC>
      //  Description: Creates a list of dict<str, obj>
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: List will be cleared
      //</FUNC>

      ldnArrayDict := ldnArrayDict.CreateInstance(GETDOTNETTYPE(ldnTypeDict), 2);
      ldnArrayDict.SetValue(GETDOTNETTYPE(ldnString), 0);
      ldnArrayDict.SetValue(GETDOTNETTYPE(ldnObject), 1);
      ldnTypeDict := GETDOTNETTYPE(ldnDictionary);
      ldnTypeDict := ldnTypeDict.MakeGenericType(ldnArrayDict);

      ldnArrayList := ldnArrayList.CreateInstance(GETDOTNETTYPE(ldnTypeList), 1);
      ldnArrayList.SetValue(ldnTypeDict, 0);
      ldnTypeList := GETDOTNETTYPE(pdnList);
      ldnTypeList := ldnTypeList.MakeGenericType(ldnArrayList);
      pdnList := ldnActivator.CreateInstance(ldnTypeList);
    END;

    PROCEDURE createListOfStr@1000000001(VAR pdnList@1000000005 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1");
    VAR
      ldnType@1000000004 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      ldnActivator@1000000003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Activator";
      ldnArray@1000000002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      ldnString@1000000001 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
    BEGIN
      //<FUNC>
      //  Description: Create a list of str
      //  Called From: Codeunit DSHIP EasyPost Rate Mgmt. (CU23044609)
      //  Side Effect: List will be cleared.
      //</FUNC>

      ldnArray := ldnArray.CreateInstance(GETDOTNETTYPE(ldnType), 1);
      ldnArray.SetValue(GETDOTNETTYPE(ldnString), 0);
      ldnType := GETDOTNETTYPE(pdnList);
      ldnType := ldnType.MakeGenericType(ldnArray);
      pdnList := ldnActivator.CreateInstance(ldnType);
    END;

    PROCEDURE getOptionString@1000000047(pvarTable@1000000000 : Variant;piFieldNo@1000000001 : Integer;poptOption@1000000002 : Option) OptionString : Text;
    VAR
      lrecrRecRef@1000000003 : RecordRef;
      lfrFieldRef@1000000004 : FieldRef;
      lsOptStr@1000000005 : Text;
      lsResult@1000000008 : Text;
      li@1000000006 : Integer;
      liSeparate@1000000007 : Integer;
    BEGIN
      //<FUNC>
      //  Description: Returns the OptionString value to bypass translations
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      IF ( pvarTable.ISRECORD ) THEN BEGIN
        lrecrRecRef.GETTABLE(pvarTable);
        lfrFieldRef := lrecrRecRef.FIELD(piFieldNo);
        lsOptStr := lfrFieldRef.OPTIONSTRING;
        lrecrRecRef.CLOSE;

        FOR li := 0 TO poptOption DO BEGIN
          liSeparate := STRPOS(lsOptStr, ',');
          IF ( liSeparate <> 0 ) THEN BEGIN
            OptionString := COPYSTR(lsOptStr, 1, liSeparate - 1);
            lsOptStr := COPYSTR(lsOptStr, liSeparate + 1, STRLEN(lsOptStr));
          END ELSE
            OptionString := lsOptStr;
        END;
      END ELSE BEGIN
        ERROR('This function only accepts Records in the variant');
      END;
    END;

    PROCEDURE printCODReturnLabel@1000000063(VAR precLPHeader@1000000000 : Record 23044505;pbShowRequestPage@1000000001 : Boolean);
    VAR
      lrecLabelData@1000000002 : Record 23044622;
    BEGIN
      //<FUNC>
      //  Description: Print the COD Return label
      //  Called From: PAGE DSHIP Package Worksheet (P23044602)
      //  Side Effect: None
      //</FUNC>

      printLabelData(precLPHeader, pbShowRequestPage, lrecLabelData."Label Type"::COD);
    END;

    PROCEDURE printLabelData@1000000073(VAR precLPHeader@1000000001 : Record 23044505;pbShowRequestPage@1000000000 : Boolean;poptLabelType@1000000002 : Option);
    VAR
      lrecLabelData@1000000004 : Record 23044622;
      lcuScaleMgmt@1000000006 : Codeunit 23044610;
    BEGIN
      //<FUNC>
      //  Description: Prints the appropriate label with an LP No. filter
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      recDShipSetup.GET;

      // additional labels belong to shipping labels
      IF ( poptLabelType = lrecLabelData."Label Type"::Additional ) THEN
        poptLabelType := lrecLabelData."Label Type"::Shipping;
      lcuScaleMgmt.setLabelType(poptLabelType);
      REPORT.RUN(recDShipSetup."Carrier Label Report ID", pbShowRequestPage, FALSE, precLPHeader);
    END;

    PROCEDURE getLabelData@1000000097(VAR precLabelData@1000000000 : Record 23044622;poptLabelType@1000000004 : Option;poptLabelFormat@1000000003 : Option;pcodLPNo@1000000002 : Code[20];pbResetData@1000000001 : Boolean);
    BEGIN
      //<FUNC>
      //  Description: Get the label data record
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: Creates record if not found
      //</FUNC>

      CLEAR(precLabelData);
      precLabelData.RESET;
      precLabelData.SETRANGE("Label Type", poptLabelType);
      precLabelData.SETRANGE("Label Format", poptLabelFormat);
      precLabelData.SETRANGE("License Plate No.", pcodLPNo);

      IF ( NOT precLabelData.FINDFIRST ) THEN BEGIN
        precLabelData.INIT;
        precLabelData."Label Type" := poptLabelType;
        precLabelData."Label Format" := poptLabelFormat;
        precLabelData."License Plate No." := pcodLPNo;
        precLabelData.INSERT;
      END ELSE IF ( pbResetData ) THEN BEGIN
        CLEAR(precLabelData.Label);
        precLabelData.Cost := 0;
        precLabelData."Print Result" := '';
        precLabelData."Label URL" := '';
        precLabelData.MODIFY(TRUE);
      END;
    END;

    PROCEDURE setLabelData@1000000068(poptLabelType@1000000001 : Option;poptLabelFormat@1000000005 : Option;pcodLPNo@1000000006 : Code[20];psLabelURL@1000000000 : Text;pdLabelCost@1000000009 : Decimal);
    VAR
      lrecLabelData@1000000007 : Record 23044622;
      ltrecTempBlob@1000000010 : TEMPORARY Record 99008535;
    BEGIN
      //<FUNC>
      //  Description: Stores or updates the label in the label data table
      //  Called From: Thise codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      recDShipSetup.GET;

      CASE poptLabelFormat OF
        lrecLabelData."Label Format"::PNG:
          BEGIN

            CASE poptLabelType OF
              lrecLabelData."Label Type"::COD:
                BEGIN
                  IF ( psLabelURL = '' ) THEN EXIT;
                  getLabelData(lrecLabelData, poptLabelType, poptLabelFormat, pcodLPNo, TRUE);
                  lrecLabelData."Label URL" := psLabelURL;
                END; // cod type
              lrecLabelData."Label Type"::Return:
                BEGIN
                  IF ( psLabelURL = '' ) THEN EXIT;
                  getLabelData(lrecLabelData, poptLabelType, poptLabelFormat, pcodLPNo, TRUE);
                  lrecLabelData.Cost := pdLabelCost;
                END; // return type
            END;

            writeImageToBlob(ltrecTempBlob, psLabelURL);
            lrecLabelData.Label := ltrecTempBlob.Blob;
            lrecLabelData.MODIFY;

          END; //png format
        lrecLabelData."Label Format"::ZPL:
          BEGIN
            getLabelData(lrecLabelData, poptLabelType, poptLabelFormat, pcodLPNo, TRUE);
            // if the carrier sends all labels in one - we don't split ZPL
            IF ( psLabelURL = '' ) THEN BEGIN
              lrecLabelData.DELETE;
              EXIT;
            END;
            lrecLabelData.Cost := pdLabelCost;
            writeDataToBlob(ltrecTempBlob, psLabelURL);
            lrecLabelData.Label := ltrecTempBlob.Blob;
            lrecLabelData.MODIFY;
          END; // zpl format
      END; // case label format
    END;

    LOCAL PROCEDURE sendZPLLabel@1000000076(VAR precLabelData@1000000000 : Record 23044622) : Boolean;
    VAR
      ldnDynamicShip@1000000003 : DotNet "'DynamicShip.ShippingIntegration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DynamicShip.ShippingIntegration.DynamicShipping";
      ldnEnvironment@1000000008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Environment" RUNONCLIENT;
      lisInStream@1000000002 : InStream;
      lbtZPLData@1000000004 : BigText;
      lsTemp@1000000007 : Text;
      lsPrinter@1000000005 : Text;
      lsPrintResult@1000000001 : Text;
    BEGIN
      //<FUNC>
      //  Description: Prints the ZPL label
      //               Returns FALSE if the print fails
      //  Called From: Thise codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      precLabelData.Label.CREATEINSTREAM(lisInStream);

      WHILE( NOT lisInStream.EOS ) DO BEGIN
        lisInStream.READTEXT(lsTemp);
        lbtZPLData.ADDTEXT(lsTemp);
      END;

      recDShipSetup.GET;
      ldnDynamicShip := ldnDynamicShip.DynamicShipping();

      // need to get printer from printer selections
      lsPrinter := getPrinterName(recDShipSetup."Carrier Label Report ID");

      IF ( lsPrinter = '' ) THEN
        EXIT(FALSE);

      // check if printer contains machine information
      // if it doesn't, then it's local, so we add the machine name
      // printer must be shared for raw to work
      IF ( STRPOS(lsPrinter, '\\') = 0 ) THEN BEGIN
        lsPrinter := '\\' + ldnEnvironment.MachineName + '\' + lsPrinter;
      END;

      lsPrintResult := ldnDynamicShip.SendZPLToPrinter(lsPrinter, lbtZPLData, FORMAT(precLabelData."Entry No."));


      IF ( lsPrintResult <> '' ) THEN BEGIN
        precLabelData."Print Result" := COPYSTR(lsPrintResult, 1, MAXSTRLEN(precLabelData."Print Result"));
        precLabelData.MODIFY;
        EXIT(FALSE);
      END;

      precLabelData."Print Result" := 'Success';
      precLabelData.MODIFY;
      COMMIT;

      EXIT(TRUE);
    END;

    PROCEDURE printZPLLabel@1000000077(poptLabelType@1000000001 : Option;pcodLPNo@1000000000 : Code[20]) : Boolean;
    VAR
      lrecLabelData@1000000002 : Record 23044622;
    BEGIN
      //<FUNC>
      //  Description: Prints a ZPL label from T23044622
      //               Returns FALSE if not found OR failed
      //  Called From: Thise codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      CASE poptLabelType OF
        lrecLabelData."Label Type"::Shipping:
          lrecLabelData.SETRANGE("Label Type", lrecLabelData."Label Type"::Shipping);
        lrecLabelData."Label Type"::Return:
          lrecLabelData.SETRANGE("Label Type", lrecLabelData."Label Type"::Return);
        lrecLabelData."Label Type"::COD:
          lrecLabelData.SETRANGE("Label Type", lrecLabelData."Label Type"::COD);
      END;
      lrecLabelData.SETRANGE("License Plate No.", pcodLPNo);
      lrecLabelData.SETRANGE("Label Format", lrecLabelData."Label Format"::ZPL);

      IF ( NOT lrecLabelData.FINDFIRST ) THEN
        EXIT(FALSE);
      IF ( NOT lrecLabelData.Label.HASVALUE ) THEN
        EXIT(FALSE);

      lrecLabelData.CALCFIELDS(Label);

      EXIT(sendZPLLabel(lrecLabelData));
    END;

    PROCEDURE getPrinterName@1000000085(piReportID@1000000000 : Integer) : Text;
    VAR
      lrecPrinterSelection@1000000001 : Record 78;
    BEGIN
      //<FUNC>
      //  Description: Returns the full printer name
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      lrecPrinterSelection.SETRANGE("User ID", USERID);
      lrecPrinterSelection.SETRANGE("Report ID", piReportID);
      IF ( lrecPrinterSelection.FINDFIRST ) THEN
        EXIT(lrecPrinterSelection."Printer Name");

      lrecPrinterSelection.SETRANGE("User ID");
      IF ( lrecPrinterSelection.FINDFIRST ) THEN
        EXIT(lrecPrinterSelection."Printer Name");
    END;

    PROCEDURE checkReturnLabelRequired@1000000090(poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[20]) : Boolean;
    VAR
      lrecShipOptions@1000000002 : Record 23044616;
    BEGIN
      //<FUNC>
      //  Description:
      //  Called From:
      //  Side Effect:
      //</FUNC>

      IF ( NOT lrecShipOptions.GET(poptDocType, pcodDocNo) ) THEN
        EXIT;

      IF ( lrecShipOptions."Generate Return Label" = lrecShipOptions."Generate Return Label"::No ) THEN
        EXIT;

      EXIT(TRUE);
    END;

    PROCEDURE getReturnLabel@1000000075(poptDocType@1000000003 : Option;pcodDocNo@1000000002 : Code[20]) : Boolean;
    VAR
      lrecShipOptions@1000000004 : Record 23044616;
      lrecLabelData@1000000012 : Record 23044622;
      ltrecRateBuffer@1000000015 : TEMPORARY Record 23044603;
      ltrecShipMessages@1000000014 : TEMPORARY Record 23044604;
      ltrecSelectedRate@1000000016 : TEMPORARY Record 23044603;
      ltrecAPIParam@1000000019 : TEMPORARY Record 23044623;
      ldnDynamicShip@1000000001 : DotNet "'DynamicShip.ShippingIntegration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DynamicShip.ShippingIntegration.DynamicShipping";
      ldnOrder@1000000007 : DotNet "'EasyPost.Net35, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.EasyPost.Order";
      ldnShipment@1000000009 : DotNet "'EasyPost.Net35, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.EasyPost.Shipment";
      lsCarrierID@1000000005 : Text;
      lsCarrierService@1000000006 : Text;
      lasFromAddress@1000000018 : ARRAY [12] OF Text[100];
      lasToAddress@1000000017 : ARRAY [12] OF Text[100];
      ldRate@1000000013 : Decimal;
      liShipCount@1000000008 : Integer;
      liAPICodeunit@1000000020 : Integer;
      lbRateSelected@1000000000 : Boolean;
      lcodShipAgent@1000000010 : Code[20];
      lcodShipAgentService@1000000011 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Gets the return label
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      // safety clear
      cuRateSingleton.clearAll;

      buildAPIParam(ltrecAPIParam, ltrecAPIParam.Action::GetReturnRates, poptDocType, pcodDocNo);
      callFreightIntegration(ltrecAPIParam);

      getShipAddressesByDocument(poptDocType, pcodDocNo, lasFromAddress, lasToAddress);

      IF ( getSelectedRateData(lasToAddress, lasFromAddress, poptDocType, pcodDocNo) ) THEN BEGIN
        cuRateSingleton.getSelectedRate(ltrecSelectedRate);
        lbRateSelected := ltrecSelectedRate.ID <> '';
      END;

      IF ( lbRateSelected ) THEN BEGIN
        buildAPIParam(ltrecAPIParam, ltrecAPIParam.Action::GetReturnLabel, poptDocType, pcodDocNo);
        callFreightIntegration(ltrecAPIParam);

        cuRateSingleton.getSelectedRate(ltrecSelectedRate);
        storeLabelData(ltrecAPIParam, lrecLabelData."Label Type"::Return, ltrecSelectedRate."Rate Cost");
        getShipAgentAndServiceByCarrierIDAndService(ltrecSelectedRate."Carrier Account ID",
                                                    ltrecSelectedRate.Service,
                                                    lcodShipAgent,
                                                    lcodShipAgentService);
        lrecShipOptions.GET(poptDocType, pcodDocNo);
        lrecShipOptions."Shipping Agent Code" := lcodShipAgent;
        lrecShipOptions."Shipping Agent Service Code" := lcodShipAgentService;
        lrecShipOptions.MODIFY(FALSE);

      END; // if lbRateSelected

      cuRateSingleton.clearAll;

      EXIT(lbRateSelected);
    END;

    PROCEDURE printReturnLabel@1000000132(VAR precLPHeader@1000000000 : Record 23044505;lbPrintCall@1000000002 : Boolean);
    VAR
      lrecLabelData@1000000003 : Record 23044622;
      lbShowRequestPage@1000000001 : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Prints the return label
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      lbShowRequestPage := lbPrintCall;
      IF ( NOT lbPrintCall ) THEN BEGIN
        recDShipSetup.GET;
        CASE recDShipSetup."Carrier Label Print Behaviour" OF
          recDShipSetup."Carrier Label Print Behaviour"::Automatic:
            lbShowRequestPage := FALSE;
          recDShipSetup."Carrier Label Print Behaviour"::Manual,
          recDShipSetup."Carrier Label Print Behaviour"::"Automatic with prompt":
          BEGIN
            lbShowRequestPage := TRUE;
            // because of a write transaction, we must commit
            COMMIT;
          END;
        END;
      END;

      printLabelData(precLPHeader, lbShowRequestPage, lrecLabelData."Label Type"::Return);
    END;

    PROCEDURE writeTextToBlob@1000000006(VAR ptrecTempBlob@1000000001 : TEMPORARY Record 99008535;psText@1000000000 : Text);
    VAR
      losOutStream@1000000003 : OutStream;
      lsData@1000000002 : Text;
    BEGIN
      //<FUNC>
      //  Description: Write text to temp blob
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      ptrecTempBlob.Blob.CREATEOUTSTREAM(losOutStream);
      losOutStream.WRITETEXT(psText);
    END;

    PROCEDURE writeDataToBlob@1000000093(VAR ptrecTempBlob@1000000000 : TEMPORARY Record 99008535;psURL@1000000001 : Text);
    VAR
      ldnDynamicShip@1000000008 : DotNet "'DynamicShip.ShippingIntegration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DynamicShip.ShippingIntegration.DynamicShipping";
      losOutStream@1000000002 : OutStream;
      lsData@1000000009 : Text;
    BEGIN
      //<FUNC>
      //  Description: Write data to temp blob
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      ldnDynamicShip := ldnDynamicShip.DynamicShipping();
      lsData := ldnDynamicShip.DownloadRawLabel(psURL);
      writeTextToBlob(ptrecTempBlob, lsData);
    END;

    PROCEDURE writeImageToBlob@1000000101(VAR ptrecTempBlob@1000000001 : TEMPORARY Record 99008535;psURL@1000000000 : Text);
    VAR
      ldnDynamicShip@1000000004 : DotNet "'DynamicShip.ShippingIntegration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DynamicShip.ShippingIntegration.DynamicShipping";
      ldnlabelsList@1000000008 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      ldnBytes@1000000007 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      ldnSBEncoded@1000000006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      ldnConvert@1000000005 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      ldnMemStream@1000000002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      losOutStream@1000000003 : OutStream;
    BEGIN
      //<FUNC>
      //  Description: Downloads image from URL and writes to blob
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      ldnSBEncoded := ldnSBEncoded.StringBuilder();
      ldnDynamicShip := ldnDynamicShip.DynamicShipping();
      ldnlabelsList := ldnDynamicShip.DownloadLabelsForShipment(psURL, 1);
      ldnSBEncoded.Append(ldnlabelsList.Item(0));
      ldnBytes := ldnConvert.FromBase64String(ldnSBEncoded.ToString());
      ldnMemStream := ldnMemStream.MemoryStream(ldnBytes);
      ptrecTempBlob.Blob.CREATEOUTSTREAM(losOutStream);
      ldnMemStream.WriteTo(losOutStream);
    END;

    LOCAL PROCEDURE storeLabelData@1000000009(VAR ptrecAPIParam@1000000000 : TEMPORARY Record 23044623;poptLabelType@1000000001 : Option;pdLabelCost@1000000004 : Decimal);
    VAR
      lrecLPHeader@1000000002 : Record 23044505;
      lrecLabelData@1000000003 : Record 23044622;
      lrecPackOptions@1000000005 : Record 23044608;
      lrecShipOptions@1000000006 : Record 23044616;
      loptDocType@1000000007 : Option;
    BEGIN
      //<FUNC>
      //  Description: Stores the information found in the API Param
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      ptrecAPIParam.RESET;
      ptrecAPIParam.SETAUTOCALCFIELDS("Package Carrier Label PNG", "Package Carrier Label RAW");
      IF ( ptrecAPIParam.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          IF ( poptLabelType = lrecLabelData."Label Type"::Shipping ) THEN BEGIN
            lrecLPHeader.SETAUTOCALCFIELDS("Source Document", "Source No.");
            lrecLPHeader.GET(ptrecAPIParam."License Plate No.");
            lrecLPHeader.VALIDATE("Package Carrier Label");
            lrecLPHeader."Package Order ID" := ptrecAPIParam."Object ID";
            lrecLPHeader."Package Tracking Number" := ptrecAPIParam."Package Tracking No.";
            lrecLPHeader."Package Tracker ID" := ptrecAPIParam."Package Tracker ID";
            lrecLPHeader."Shipment Tracking URL" := ptrecAPIParam."Object URL";
            lrecLPHeader."Shipment Tracking Number" := ptrecAPIParam."Shipment Tracking Number";
            lrecLPHeader.MODIFY(TRUE);

            IF ( lrecPackOptions.GET(lrecLPHeader."No.") ) THEN BEGIN
              lrecPackOptions."Package Order ID" := ptrecAPIParam."Object ID";
              lrecPackOptions.MODIFY(TRUE);
            END;
          END; // if label type::shipping

          getLabelData(lrecLabelData,
                       poptLabelType,
                       lrecLabelData."Label Format"::PNG,
                       ptrecAPIParam."License Plate No.",
                       TRUE);
          lrecLabelData.Cost := pdLabelCost;
          lrecLabelData."Label URL" := ptrecAPIParam."Package Carrier Label URL";
          lrecLabelData."Package Tracking No." := ptrecAPIParam."Package Tracking No.";

          IF ( ptrecAPIParam."Package Carrier Label PNG".HASVALUE ) THEN BEGIN
            lrecLabelData.Label := ptrecAPIParam."Package Carrier Label PNG";
            // only shipping label stored directly on lp header
            IF ( poptLabelType = lrecLabelData."Label Type"::Shipping ) THEN BEGIN
              lrecLPHeader."Package Carrier Label" := ptrecAPIParam."Package Carrier Label PNG";
              lrecLPHeader.MODIFY(TRUE);
            END;
          END;
          lrecLabelData.MODIFY(TRUE);

          recDShipSetup.GET;
          CASE recDShipSetup."Carrier Label Print Type" OF
            recDShipSetup."Carrier Label Print Type"::ZPL:
              BEGIN
                getLabelData(lrecLabelData,
                             poptLabelType,
                             lrecLabelData."Label Format"::ZPL,
                             ptrecAPIParam."License Plate No.",
                             TRUE);
                IF ( ptrecAPIParam."Package Carrier Label RAW".HASVALUE ) THEN BEGIN
                  lrecLabelData.Label := ptrecAPIParam."Package Carrier Label RAW";
                  lrecLabelData.Cost := pdLabelCost;
                  lrecLabelData."Package Tracking No." := ptrecAPIParam."Package Tracking No.";
                  lrecLabelData.MODIFY(TRUE);
                END; // if raw label
              END; // zpl
          END; // case label print type
        UNTIL(ptrecAPIParam.NEXT=0);

        IF ( lrecLPHeader."Source No." <> '' ) THEN BEGIN
          cuPackMgmt.getDShipDocTypeFromLPSrcType(lrecLPHeader."Source Document", loptDocType);
          IF ( lrecShipOptions.GET(loptDocType, lrecLPHeader."Source No.") ) THEN BEGIN
            lrecShipOptions."Order ID" := ptrecAPIParam."Object ID";
            lrecShipOptions.MODIFY(TRUE);
          END; // if lrecshipoptions
        END; // if lreclpheader
      END; // if ptrecapiparam.findset
    END;

    PROCEDURE callFreightIntegration@1000000092(VAR ptrecAPIParam@1000000005 : Record 23044623) : Boolean;
    VAR
      lrecFreightInt@1000000004 : Record 23044624;
      lrecShipOptions@1000000002 : Record 23044616;
      ltrecSelectedRate@1000000003 : TEMPORARY Record 23044603;
      lcodShipAgent@1000000000 : Code[20];
      lcodShipAgentService@1000000001 : Code[20];
      DSHIPCarrier@1000000006 : Record 23044607;
      ExternalCarrier@1000000007 : Boolean;
      UserSetupLoc@1000000008 : Record 91;
    BEGIN
      //<FUNC>
      //  Description: Iterates the Freight Integration Provider table to necessary APIs
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      lrecFreightInt.SETCURRENTKEY("Execution Order", Enabled);
      lrecFreightInt.SETRANGE(Enabled, lrecFreightInt.Enabled::Yes);

      CASE ptrecAPIParam.Action OF
        ptrecAPIParam.Action::GetRates,
        ptrecAPIParam.Action::GetQuotes:
          BEGIN
            getShipAgentAndServiceByOrderNo(ptrecAPIParam."Document Type", ptrecAPIParam."Document No.",
                                            lcodShipAgent, lcodShipAgentService);
          END;
        ptrecAPIParam.Action::GetLabels:
          BEGIN
            cuRateSingleton.getSelectedRate(ltrecSelectedRate);
            getShipAgentAndServiceByCarrierIDAndService(ltrecSelectedRate."Carrier Account ID",
                                                        ltrecSelectedRate.Service, lcodShipAgent,
                                                        lcodShipAgentService);
            //<TPZ2723>
            IF ltrecSelectedRate."Carrier Account ID" = 'externalcarrier' THEN
              lcodShipAgent := ltrecSelectedRate."Carrier Name";
            //</TPZ2723>
          END;
        ptrecAPIParam.Action::ShowRates:
          BEGIN
            IF ( lrecFreightInt.FINDFIRST ) THEN
              CODEUNIT.RUN(lrecFreightInt."API CodeUnit", ptrecAPIParam);
            EXIT(ptrecAPIParam.Handled = ptrecAPIParam.Handled::Yes);
          END;
        ptrecAPIParam.Action::GetReturnRates,
        ptrecAPIParam.Action::GetReturnLabel:
          BEGIN
            IF ( lrecShipOptions.GET(ptrecAPIParam."Document Type", ptrecAPIParam."Document No.") ) THEN BEGIN
              lcodShipAgent := lrecShipOptions."Shipping Agent Code";
              lcodShipAgentService := lrecShipOptions."Shipping Agent Service Code";
            END;
          END;
        ptrecAPIParam.Action::CreateManifest,
        ptrecAPIParam.Action::GetManifest:
          BEGIN
            lcodShipAgent := getShipAgentFromManifest(ptrecAPIParam."Document No.");
          END;
        ELSE
          ERROR('Unknown API Action');
      END;
      //<TPZ2723>
      DSHIPCarrier.RESET;
      DSHIPCarrier.SETRANGE(Code,lcodShipAgent);
      DSHIPCarrier.SETRANGE("Freight Integ. Provider Code",'EXTERNAL');
      IF DSHIPCarrier.FINDFIRST THEN
        ExternalCarrier := TRUE
      ELSE ExternalCarrier := FALSE;
      //</TPZ2723>
      //IF ( lcodShipAgent <> '' ) THEN //Blocked <TPZ2723>
      IF ( lcodShipAgent <> '' ) AND (NOT ExternalCarrier) THEN//<TPZ2723>
        lrecFreightInt.SETFILTER(Code, createFreightIntProvFilter(lcodShipAgent));
      IF ptrecAPIParam.Action = ptrecAPIParam.Action::GetLabels THEN //Pankaj this line is not in new version
        IF ( lcodShipAgent <> '' ) THEN
          lrecFreightInt.SETFILTER(Code, createFreightIntProvFilter(lcodShipAgent));

       // //-->TPZ3299
      IF AllowedAPICall(ptrecAPIParam."Document No.") THEN
        IF PalletDetailVar THEN
          lrecFreightInt.SETFILTER(Code, '<>%1','EASYPOST')
         ELSE
           lrecFreightInt.SETFILTER(Code, '=%1','EASYPOST');
       // //<--TPZ3299

      IF ( lrecFreightInt.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          CODEUNIT.RUN(lrecFreightInt."API CodeUnit", ptrecAPIParam);
        UNTIL(lrecFreightInt.NEXT=0);
      END ELSE BEGIN
        IF ( lcodShipAgent <> '' ) THEN
          ERROR(tcMissingFreightIntShipAgent, lcodShipAgent)
        ELSE
          ERROR(tcMissingFreightInt);
      END;
    END;

    LOCAL PROCEDURE createFreightIntProvFilter@1000000014(pcodShipAgent@1000000000 : Code[20]) psAPIFilter : Text;
    VAR
      lrecDShipCarrier@1000000003 : Record 23044607;
      lrecDShipCarrierAccount@1000000002 : Record 23044612;
      ltrecItem@1000000001 : TEMPORARY Record 27;
    BEGIN
      //<FUNC>
      //  Description: Creates afilter of APIs to use
      //  Called From:
      //  Side Effect:
      //</FUNC>

      IF ( pcodShipAgent <> '' ) THEN BEGIN
        // build filter for lrecfreightint
        lrecDShipCarrier.SETRANGE(Code, pcodShipAgent);
        lrecDShipCarrierAccount.SETRANGE(Code, pcodShipAgent);

        IF ( lrecDShipCarrier.FINDSET(FALSE) ) THEN
          REPEAT
            ltrecItem."No." := lrecDShipCarrier."Freight Integ. Provider Code";
            IF ( ltrecItem.INSERT(FALSE) ) THEN ;
          UNTIL(lrecDShipCarrier.NEXT=0);

        IF ( lrecDShipCarrierAccount.FINDSET(FALSE) ) THEN
          REPEAT
            ltrecItem."No." := lrecDShipCarrierAccount."Freight Integ. Provider Code";
            IF ( ltrecItem.INSERT(FALSE) ) THEN ;
          UNTIL(lrecDShipCarrierAccount.NEXT=0);

        IF ( ltrecItem.FINDSET(FALSE) ) THEN BEGIN
          psAPIFilter := ltrecItem."No.";
          WHILE ( ltrecItem.NEXT<>0 ) DO
            psAPIFilter += '|' + ltrecItem."No.";
        END;
      END; // if pcodshipagent <> ''
    END;

    LOCAL PROCEDURE isStdLabelAllowed@1000000016(precLPHeader@1000000000 : Record 23044505) : Boolean;
    VAR
      loptDocType@1000000001 : Option;
      lcodShipAgent@1000000002 : Code[20];
      lcodShipAgentService@1000000003 : Code[20];
      lsServiceName@1000000004 : Text;
    BEGIN
      //<FUNC>
      //  Description: Checks if the label can be 4x6
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      IF ( (precLPHeader."Source Document" = precLPHeader."Source Document"::" ") OR
           (precLPHeader."Source No." = '') ) THEN
        precLPHeader.CALCFIELDS("Source Document", "Source No.");

      cuPackMgmt.getDShipDocTypeFromLPSrcType(precLPHeader."Source Document", loptDocType);
      getShipAgentAndServiceByOrderNo(loptDocType, precLPHeader."Source No.", lcodShipAgent, lcodShipAgentService);
      lsServiceName := LOWERCASE(getCarrierService(lcodShipAgent, lcodShipAgentService));

      // Canada Post Priority Worldwide Services do not allow 4x6 labels
      IF ( STRPOS(lsServiceName, 'priorityworldwide') > 0 ) THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE printInternalPkgReport@1000000035(psOrderID@1000000000 : Text);
    VAR
      lrecLPHeader@1000000001 : Record 23044505;
      lrecWhseShipLine@1000000002 : Record 7321;
      lrecSalesHeader@1000000003 : Record 36;
      lrecCustomerOptions@1000000005 : Record 23044614;
      lcodSalesOrderNo@1000000004 : Code[20];
    BEGIN
      //<FUNC>
      //  Description:
      //  Called From:
      //  Side Effect:
      //</FUNC>

      lrecLPHeader.SETAUTOCALCFIELDS("Source Document", "Source No.");
      lrecLPHeader.SETRANGE("Package Order ID", psOrderID);
      IF ( NOT lrecLPHeader.FINDSET(FALSE) ) THEN
        EXIT;
      cuPackMgmt.printInternalPackageLabel(lrecLPHeader, 0);
    END;

    LOCAL PROCEDURE printCommercialInvoice@1000000067(poptDocType@1000000000 : Option;pcodDocNo@1000000001 : Code[20]);
    VAR
      cuCustomsMgmt@1000000002 : Codeunit 23044603;
      lbShowRequestPage@1000000003 : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Prints the commercial invoice
      //  Called From: This codeunit (CU23044602)
      //  Side Effect:
      //</FUNC>

      recDShipSetup.GET;
      IF ( recDShipSetup."Commercial Inv Print Behaviour" = recDShipSetup."Commercial Inv Print Behaviour"::Manual ) THEN
        EXIT;

      IF ( recDShipSetup."Commercial Inv Print On" = recDShipSetup."Commercial Inv Print On"::International ) THEN
        IF ( NOT cuCustomsMgmt.checkInternationalPackageByOrder(poptDocType, pcodDocNo) ) THEN
          EXIT;

      CASE recDShipSetup."Commercial Inv Print Behaviour" OF
        recDShipSetup."Commercial Inv Print Behaviour"::Automatic:
          lbShowRequestPage := FALSE;
        recDShipSetup."Commercial Inv Print Behaviour"::"Automatic with prompt":
          lbShowRequestPage := TRUE;
      END;

      cuPackMgmt.printCommercialInvoice(poptDocType, pcodDocNo, lbShowRequestPage);
    END;

    LOCAL PROCEDURE getFreightLineDesc@1000000080() rsAccountDesc : Text;
    VAR
      lrecGLAccount@1000000001 : Record 15;
      lrecResource@1000000000 : Record 156;
    BEGIN

      recDShipSetup.GET;
      CASE recDShipSetup."Freight Billing Type" OF
        recDShipSetup."Freight Billing Type"::"G/L":
          BEGIN
            IF ( lrecGLAccount.GET(recDShipSetup."Freight Billing No.") ) THEN
              rsAccountDesc := lrecGLAccount.Name;
          END;
        recDShipSetup."Freight Billing Type"::Resource:
          BEGIN
            IF ( lrecResource.GET(recDShipSetup."Freight Billing No.") ) THEN
              rsAccountDesc := lrecResource.Name;
          END;
      END;
    END;

    LOCAL PROCEDURE getPredefinedPackage@1000000038(precLPHeader@1000000000 : Record 23044505) : Text;
    VAR
      lrecPredefinedPackage@1000000001 : Record 23044626;
      lcodShipAgent@1000000002 : Code[20];
      lcodShipAgentService@1000000003 : Code[20];
      loptDocType@1000000004 : Option;
    BEGIN
      //<FUNC>
      //  Description: Returns the predefined package string value, blank if none is found
      //  Called From: This Codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      IF ( precLPHeader."Template Code" = '' ) THEN
        EXIT('');

      IF ( precLPHeader."Source No." = '' ) THEN
        precLPHeader.CALCFIELDS("Source No.", "Source Document");

      IF ( (precLPHeader."Source No." = '') OR (precLPHeader."Source Document" = precLPHeader."Source Document"::" ") ) THEN
        EXIT;

      cuPackMgmt.getDShipDocTypeFromLPSrcType(precLPHeader."Source Document", loptDocType);

      getShipAgentAndServiceByOrderNo(loptDocType, precLPHeader."Source No.", lcodShipAgent, lcodShipAgentService);

      lrecPredefinedPackage.SETRANGE("Shipping Agent Code", lcodShipAgent);
      lrecPredefinedPackage.SETRANGE("Shipping Agent Service Code", lcodShipAgentService);
      lrecPredefinedPackage.SETRANGE("License Plate Template Code", precLPHeader."Template Code");
      IF ( NOT lrecPredefinedPackage.FINDFIRST ) THEN BEGIN
        lrecPredefinedPackage.SETFILTER("Shipping Agent Service Code", '%1', '');
        IF ( lrecPredefinedPackage.FINDFIRST ) THEN ;
      END;

      EXIT(lrecPredefinedPackage."Predefined Package");
    END;

    LOCAL PROCEDURE getShipAgentFromManifest@1000000102(pcodDocNo@1000000002 : Code[20]) rcodShipAgent : Code[50];
    VAR
      lrecManifestHeader@1000000009 : Record 23044618;
    BEGIN
      //<FUNC>
      //  Description: Returns the ship agent and service based on posted order
      //  Called From: This codeunit (CU23044602)
      //  Side Effect: None
      //</FUNC>

      IF (lrecManifestHeader.GET(pcodDocNo)) THEN BEGIN
        rcodShipAgent := lrecManifestHeader."Shipping Agent Code";
      END; //if
    END;

    LOCAL PROCEDURE DeleteFreightLine@1000000100(DocumentNo@1000000000 : Code[20];LocCode@1000000003 : Code[10]);
    VAR
      recDShipSetup@1000000001 : Record 23044600;
      SalesLineFreight@1000000002 : Record 37;
    BEGIN
      recDShipSetup.GET;
      SalesLineFreight.RESET;
      SalesLineFreight.SETRANGE("Document No.",DocumentNo);
      SalesLineFreight.SETRANGE(Type, recDShipSetup."Freight Billing Type");
      SalesLineFreight.SETRANGE("No.", recDShipSetup."Freight Billing No.");
      SalesLineFreight.SETRANGE("Location Code", LocCode);
      SalesLineFreight.SETRANGE("Qty. to Ship", 1);
      //SalesLineFreight.SETFILTER("Unit Price",'<0');
      IF SalesLineFreight.FINDFIRST THEN
        SalesLineFreight.DELETEALL;
    END;

    LOCAL PROCEDURE UnishipQuoteRequest@1000000103(poptDocType@1000000021 : Option;pcodDocNo@1000000020 : Code[20]);
    VAR
      OutStrm@1000000001 : OutStream;
      TempBlob@1000000000 : Record 99008535;
      XMLDocQ@1000000008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLNodeRef@1000000007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeListRef@1000000006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NodeCountRef@1000000005 : Integer;
      XMLNodeValue@1000000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      QuoteResponseValues@1000000003 : ARRAY [6] OF Text;
      UnishipperQuoteResponse@1000000002 : Page 51117;
      HttpWebRequestMgtQuote@1000000009 : Codeunit 1297;
      RequestText@1000000010 : Text;
      ResponseInStrm@1000000011 : InStream;
      IWXLicensePlateHeader@1000000012 : Record 23044505;
      QuoteRequest@1000000013 : XMLport 50088;
      Instrm@1000000014 : InStream;
      Streamreader@1000000015 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader";
      DSHIPFreightIntegProvider@1000000016 : Record 23044624;
      HttpStatusCode@1000000017 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeaders@1000000018 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      XMLDOMManagement@1000000019 : Codeunit 6224;
    BEGIN
      //Quote request;
      CLEAR(OutStrm);
      CLEAR(TempBlob);
      CLEAR(HttpWebRequestMgtQuote);
      CLEAR(RequestText);
      CLEAR(ResponseInStrm);
      DSHIPFreightIntegProvider.SETRANGE(Code,'EXTERNAL');
      DSHIPFreightIntegProvider.FINDFIRST;
      IWXLicensePlateHeader.CALCFIELDS("Source No.");
      IWXLicensePlateHeader.SETRANGE("Source No.",pcodDocNo);
      //QuoteRequest.GetSourceDocument(SourceNo,'(909044313,3840,0)'); //temp vah
      QuoteRequest.SETTABLEVIEW(IWXLicensePlateHeader);
      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStrm);
      QuoteRequest.SETDESTINATION(OutStrm);
      QuoteRequest.EXPORT;
      TempBlob.Blob.CREATEINSTREAM(Instrm);
      Streamreader := Streamreader.StreamReader(Instrm);
      RequestText := Streamreader.ReadToEnd;
      RequestText := COPYSTR(RequestText,57,STRLEN(RequestText)-56);
      HttpWebRequestMgtQuote.Initialize(DSHIPFreightIntegProvider."API URL");
      HttpWebRequestMgtQuote.DisableUI();
      HttpWebRequestMgtQuote.SetMethod('POST');
      MESSAGE('Request\ %1',RequestText);
      HttpWebRequestMgtQuote.AddBodyAsText(RequestText);
      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(ResponseInStrm);
      IF HttpWebRequestMgtQuote.GetResponse(ResponseInStrm,HttpStatusCode,ResponseHeaders) THEN BEGIN
          //ResponseInStrm.READ(ResponseText);
          //MESSAGE('Response\%1',ResponseText);
          CLEAR(XMLDocQ);
          XMLDocQ := XMLDocQ.XmlDocument();
          XMLDOMManagement.LoadXMLDocumentFromInStream(ResponseInStrm,XMLDocQ);

          XMLNodeListRef := XMLDocQ.SelectNodes('//ReferenceNumber');
          {XMLNodeRef := XMLDocq.SelectSingleNode('//ReferenceNumbers');
          XMLNodeListRef := XMLNodeRef.ChildNodes;
          NodeCountRef := XMLNodeListRef.Count;
          FOR i := 0 TO (NodeCountRef - 1) DO BEGIN
            XMLNodeValue := XMLNodeListRef.ItemOf(i).SelectSingleNode('ReferenceNumber');
            MESSAGE(XMLNodeValue.InnerText);
            QuoteResponseValues[i+1] := XMLNodeValue.InnerText;
          END;}
          FOREACH XMLNodeValue IN XMLNodeListRef DO BEGIN
            NodeCountRef += 1;
            QuoteResponseValues[NodeCountRef] := XMLNodeValue.InnerText;
            //MESSAGE(XMLNodeValue.InnerText);
          END;

          UnishipperQuoteResponse.SetValues(QuoteResponseValues[1],QuoteResponseValues[2],QuoteResponseValues[3],QuoteResponseValues[4],QuoteResponseValues[5]);
          UnishipperQuoteResponse.RUNMODAL;
      END;
    END;

    PROCEDURE PrintTOPackingList@1000000104(DocumentType@1000000000 : 'Sales Order,Sales Return Order,Purchase Order,Purchase Return Order,Outbound Transfer,Service Order,Warehouse Shipment,Misc. Shipment';DocumentNo@1000000001 : Code[20]);
    VAR
      WarehouseShipmentLine@1000000002 : Record 7321;
      TransferHeader@1000000003 : Record 5740;
    BEGIN
      //>>3268
      WarehouseShipmentLine.RESET;
      WarehouseShipmentLine.SETRANGE("No.",DocumentNo);
      WarehouseShipmentLine.SETFILTER("Source No.",'<>%1','');
      IF WarehouseShipmentLine.FINDFIRST THEN BEGIN
        TransferHeader.RESET;
        TransferHeader.SETRANGE("No.",WarehouseShipmentLine."Source No.");
        IF TransferHeader.FINDFIRST THEN
         //TransferHeader.GET(WarehouseShipmentLine."Source No.") THEN
         REPORT.RUNMODAL(REPORT::"Transfer Order - New",FALSE,TRUE,TransferHeader);
      END ELSE BEGIN
        TransferHeader.RESET;
        TransferHeader.SETRANGE("No.",DocumentNo);
        IF TransferHeader.FINDFIRST THEN
         //TransferHeader.GET(WarehouseShipmentLine."Source No.") THEN
         REPORT.RUNMODAL(REPORT::"Transfer Order - New",FALSE,TRUE,TransferHeader);
      END;

      //<<3268
    END;

    PROCEDURE PalletDetailExist@1000000107(PalletExistPara@1000000000 : Boolean;LicensePlateNoPara@1000000001 : Code[20];MOPSalesOrderNoPara@1000000002 : Code[20]);
    BEGIN
      PalletDetailVar := PalletExistPara; //TPZ3299
      LicensePlateNo := LicensePlateNoPara;
      MOPSalesOrderNo := MOPSalesOrderNoPara; //3353
    END;

    LOCAL PROCEDURE AllowedAPICall@1000000116(DocNoPara@1000000001 : Code[20]) : Boolean;
    VAR
      FreightIntLoc@1000000000 : Record 23044624;
      WarehouseShipmentHeader@1000000002 : Record 7320;
      UserSetupLoc@1000000003 : Record 91;
      TransHdr@1000000004 : Record 5740;
    BEGIN
      //TPZ3299/3187
      IF UserSetupLoc.GET(USERID)  AND UserSetupLoc."DSHIP API Integration" THEN BEGIN
        IF WarehouseShipmentHeader.GET(DocNoPara) THEN BEGIN
          FreightIntLoc.RESET;
          FreightIntLoc.SETRANGE("Location Code",WarehouseShipmentHeader."Location Code");
          FreightIntLoc.SETRANGE("Enable API",TRUE);
          IF FreightIntLoc.FINDFIRST THEN
            EXIT(TRUE);
        END ELSE IF TransHdr.GET(DocNoPara) THEN BEGIN
          FreightIntLoc.RESET;
          FreightIntLoc.SETRANGE("Location Code",TransHdr."Transfer-from Code");
          FreightIntLoc.SETRANGE("Enable API",TRUE);
          IF FreightIntLoc.FINDFIRST THEN
            EXIT(TRUE);
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE AllowedAPICallLoc@1000000112(LocationPara@1000000001 : Code[10]) : Boolean;
    VAR
      FreightIntLoc@1000000000 : Record 23044624;
      WarehouseShipmentHeader@1000000002 : Record 7320;
      UserSetupLoc@1000000003 : Record 91;
    BEGIN
      //TPZ3299/3187
      IF UserSetupLoc.GET(USERID)  AND UserSetupLoc."DSHIP API Integration" THEN BEGIN
        FreightIntLoc.RESET;
        FreightIntLoc.SETRANGE("Location Code",LocationPara);
        FreightIntLoc.SETRANGE("Enable API",TRUE);
        IF FreightIntLoc.FINDFIRST THEN
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reservested.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************

      2019-26-11 VAHAMAD TPZ2721
        Code modified in getShipToAddressFromSalesHeader to always populate Ship-to address from Sales Order
      2019-12-18 VAHAMAD TPZ2723
       Custom Code added in functions getShippingLabel,getShipmentLabels,setShipmentLabels,setShipAgentSalesOrder,callFreightIntegration
      001 TPZ3174 RPS 05102021 - DHIP Bug Fixes and Code changes
      002 TPZ3206 RPS 06072021 - UPS Packing | Contact phoneNumber error  - Added "Default Shipment PhoneNumber"
      003 TPZ3229 PKS 06152021 Added code to fetch freight and print label for TO.
      004 TPZ3265 PKS 07072021 Added code to flow e-ship agent service
      005 TPZ3231 RPS 07142021 - Missing Sales Order # on Label
      006 TPZ3268 VAH 08102021 Added function PrintTOPackingList
      007 TPZ3353 PKS 09152021 Added code to add g/l lines in so which is packed
      008 TPZ3333 PKS 10082021 Added code to flow freight cost to LP
    }
    END.
  }
}

