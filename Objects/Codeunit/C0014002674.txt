OBJECT Codeunit 14002674 Create AFP Prod. Plan (Yes/No)
{
  OBJECT-PROPERTIES
  {
    Date=03/01/20;
    Time=12:00:00 PM;
    Version List=UBP3.02;
  }
  PROPERTIES
  {
    OnRun=VAR
            InvMgt@1000 : Codeunit 14000553;
            LocText001@1001 : TextConst 'ENU=Create Production Plan %1';
            LogEntryNo@1002 : Integer;
          BEGIN
            IF OverrideExecutionModeProd AND OverrideExecutionModeAssy THEN BEGIN
              OverrideExecutionModeAssy := FALSE;
              OverrideExecutionModeProd := FALSE;
            END;

            Location.RESET;

            // Sets filters for locations based on area of the system using it
            CopyGlobalLocationFilters;

            Location.SETRANGE("Enable AFP Production", TRUE);
            // OverrideExecutionModeAssy is running from assembly forecast page
            AdvForcSetup.GET;
            IF (NOT Location.ISEMPTY) AND (NOT OverrideExecutionModeAssy) THEN
              CheckValidProductionBOM;
            Location.SETRANGE("Enable AFP Production");

            Location.SETRANGE("Enable Assembly Forecast", TRUE);
            // OverrideExecutionModeProd is running from Production planning page
            IF (NOT Location.ISEMPTY) AND (NOT OverrideExecutionModeProd) THEN
              CheckValidAssemblyBOM;
            Location.SETRANGE("Enable Assembly Forecast");

            Location.SETCURRENTKEY("Location Planning Sequence");
            IF Location.FINDSET THEN
              REPEAT
                IF Location."Enable AFP Production" OR Location."Enable Assembly Forecast" THEN BEGIN
                  CASE TRUE OF
                    OverrideExecutionModeProd:  InvMgt.CreateLogEntry(Location.Code,STRSUBSTNO(Text005,Location.Code),LogEntryNo);
                    OverrideExecutionModeAssy:  InvMgt.CreateLogEntry(Location.Code,STRSUBSTNO(Text006,Location.Code),LogEntryNo);
                    ELSE
                      InvMgt.CreateLogEntry(Location.Code,STRSUBSTNO(Text007,Location.Code),LogEntryNo);
                  END;
                  COMMIT;

                  CLEAR(CreateAFPProdPlan);
                  IF OverrideExecutionModeAssy THEN
                    CreateAFPProdPlan.SetOverrideExecutionModeAssy;

                  IF OverrideExecutionModeProd THEN
                    CreateAFPProdPlan.SetOverrideExecutionModeProd;

                  CreateAFPProdPlan.ByLocation(Location,FALSE);
                  COMMIT;

                  InvMgt.CloseLogEntry(LogEntryNo,'');
                  COMMIT;
                END;
              UNTIL Location.NEXT = 0;
          END;

  }
  CODE
  {
    VAR
      Location@1240030000 : Record 14;
      LocationFiltesRec@1240020004 : Record 14;
      CreateAFPProdPlan@1240030001 : Codeunit 14002675;
      Text000@1240030002 : TextConst 'ENU=Do you wish to create a Production Plan for the selected locations?';
      Text001@1240030003 : TextConst 'ENU=Do you wish to create a Production Plan for all locations set to Auto Plan?';
      Text002@1240030004 : TextConst 'ENU=This could take some time.  Are you sure?';
      Text003@1240030005 : TextConst 'ENU=Do you wish to create a Production Plan for the selected location?';
      Text004@1240020000 : TextConst 'ENU=%1 Items set for Production Bypass, %2 Proc. Units Set Manually to Bypass';
      Text005@1000 : TextConst 'ENU=Create Production Plan %1';
      AdvForcSetup@1240020009 : Record 14002651;
      AlertEntryNo@1240020001 : Integer;
      OverrideExecutionModeProd@1240020003 : Boolean;
      OverrideExecutionModeAssy@1240020002 : Boolean;
      Text006@1240020005 : TextConst 'ENU=Create Assembly Forecast %1';
      Text007@1240020006 : TextConst 'ENU=Create Assy Forecast and Prod Plan %1';
      TextProduction@1240020007 : TextConst 'ENU=PRODUCTION';
      TextAssembly@1240020008 : TextConst 'ENU=ASSEMBLY';

    PROCEDURE CheckProductionBOM@1240020002(VAR Item@1240020000 : Record 27;VAR LowLevelCode@1240020003 : Integer) Err : Boolean;
    VAR
      ProdBOMHeader@1240020001 : Record 99000771;
      BOMdoesNotExist@1000 : TextConst 'ENU=%1  BOM does not exist';
      BOMisNotCertified@1001 : TextConst 'ENU=%1  BOM is not certified';
      BOMVersionisNotCertified@1240020012 : TextConst 'ENU=A certified BOM version for BOM %1  on %2 was not found.';
      BOMisEmpty@1240020002 : TextConst 'ENU=%1 BOM is Empty';
      BOMexceedsLevel@1240020006 : TextConst 'ENU=%1 BOM exceeds max level.';
      BOMComponent@1240020004 : Record 99000772;
      CalcLowLevel@1240020005 : Codeunit 99000793;
      ErrMsg@1240020007 : Text[250];
      ProcUnit@1240020008 : Record 14000555;
      ProdBOMVersion@1240020009 : Record 99000779;
      ProdStart@1240020010 : Date;
      ProdEnd@1240020011 : Date;
    BEGIN
      Err := FALSE;
      IF Item."Production BOM No."<> '' THEN BEGIN
        IF NOT ProdBOMHeader.GET(Item."Production BOM No.") THEN BEGIN
          ErrMsg := STRSUBSTNO(BOMdoesNotExist, Item."Production BOM No.");
          ProcUnit.SETRANGE("Item No.", Item."No.");
          ProcUnit.SETRANGE("Replenishment Source Type", ProcUnit."Replenishment Source Type"::Production);
          IF ProcUnit.FINDSET THEN BEGIN
            REPEAT
              WriteReplPathAlert(ProcUnit."Location Code",Item."No.",ProcUnit."Variant Code",ErrMsg, TextProduction);
            UNTIL ProcUnit.NEXT = 0;
          END;
          Err := TRUE;
          EXIT(Err);
        END;

        // version code >>
        CalcBOMDates(Item, ProdStart, ProdEnd);
        ProdBOMVersion.SETCURRENTKEY("Production BOM No.","Starting Date");
        ProdBOMVersion.SETRANGE("Production BOM No.", ProdBOMHeader."No.");
        ProdBOMVersion.SETRANGE(Status,ProdBOMVersion.Status::Certified);
        ProdBOMVersion.SETRANGE("Starting Date", 0D, ProdStart);
        IF NOT ProdBOMVersion.ISEMPTY THEN BEGIN
          IF NOT ProdBOMVersion.FINDLAST THEN BEGIN
            ErrMsg := STRSUBSTNO(BOMVersionisNotCertified, Item."Production BOM No.", ProdStart);
            ProcUnit.SETRANGE("Item No.", Item."No.");
            ProcUnit.SETRANGE("Replenishment Source Type", ProcUnit."Replenishment Source Type"::Production);
            IF ProcUnit.FINDSET THEN BEGIN
              REPEAT
                WriteReplPathAlert(ProcUnit."Location Code",Item."No.",ProcUnit."Variant Code",ErrMsg, TextProduction);
              UNTIL ProcUnit.NEXT = 0;
            END;
            Err := TRUE;
          END;
          IF NOT Err THEN BEGIN
            ProdBOMVersion.SETFILTER("Starting Date",'%1|..%2',0D, ProdEnd);
            IF NOT ProdBOMVersion.FINDLAST THEN BEGIN
              ErrMsg := STRSUBSTNO(BOMVersionisNotCertified, Item."Production BOM No.", ProdEnd);
              ProcUnit.SETRANGE("Item No.", Item."No.");
              ProcUnit.SETRANGE("Replenishment Source Type", ProcUnit."Replenishment Source Type"::Production);
              IF ProcUnit.FINDSET THEN BEGIN
                REPEAT
                  WriteReplPathAlert(ProcUnit."Location Code",Item."No.",ProcUnit."Variant Code",ErrMsg, TextProduction);
                UNTIL ProcUnit.NEXT = 0;
              END;
              Err := TRUE;
            END;
          END;
        // version code <<
        END ELSE BEGIN
          // not using versions
        IF (ProdBOMHeader.Status <> ProdBOMHeader.Status::Certified) THEN BEGIN
          ErrMsg := STRSUBSTNO(BOMisNotCertified, Item."Production BOM No.");
          ProcUnit.SETRANGE("Item No.", Item."No.");
          ProcUnit.SETRANGE("Replenishment Source Type", ProcUnit."Replenishment Source Type"::Production);
          IF ProcUnit.FINDSET THEN BEGIN
            REPEAT
              WriteReplPathAlert(ProcUnit."Location Code",Item."No.",ProcUnit."Variant Code",ErrMsg, TextProduction);
            UNTIL ProcUnit.NEXT = 0;
          END;
          Err := TRUE;
          END;
        END;

        CLEAR(CalcLowLevel);
        COMMIT;
        IF NOT CalcLowLevel.RUN(Item) THEN BEGIN
          ErrMsg := STRSUBSTNO(BOMexceedsLevel, Item."Production BOM No.");
          ProcUnit.SETRANGE("Item No.", Item."No.");
          ProcUnit.SETRANGE("Replenishment Source Type", ProcUnit."Replenishment Source Type"::Production);
          IF ProcUnit.FINDSET THEN BEGIN
            REPEAT
              WriteReplPathAlert(ProcUnit."Location Code",Item."No.",ProcUnit."Variant Code",ErrMsg, TextProduction);
            UNTIL ProcUnit.NEXT = 0;
          END;
          Err := TRUE;
        END ELSE BEGIN
          LowLevelCode := Item."Low-Level Code";
        END;
        EXIT(Err);
      END;
    END;

    PROCEDURE CheckRouting@1240020003(VAR Item@1240020000 : Record 27) Err : Boolean;
    VAR
      RtngHeader@1240020001 : Record 99000763;
      RoutingdoesNotExist@1001 : TextConst 'ENU=%1 Routing does not exist';
      RoutingisNotCertified@1000 : TextConst 'ENU=%1 Routing is not certified';
      ErrMsg@1240020002 : Text[250];
    BEGIN
      IF Item."Routing No." = '' THEN
        EXIT;

      IF NOT RtngHeader.GET(Item."Routing No.") THEN BEGIN
        ErrMsg := STRSUBSTNO( RoutingdoesNotExist, Item."Routing No.");
        WriteReplPathAlert('',Item."No.",'',ErrMsg , TextProduction);
        Err := TRUE;
      END;

      IF (RtngHeader.Status <> RtngHeader.Status::Certified) THEN BEGIN
        ErrMsg := STRSUBSTNO(RoutingisNotCertified, Item."Routing No.");
        WriteReplPathAlert('',Item."No.",'',ErrMsg, TextProduction);
        Err := TRUE;
      END;
    END;

    PROCEDURE DeleteReplPathAlert@1240020009(LocCode@1240020003 : Code[10];ItemNo@1240020002 : Code[50];VariantCode@1240020001 : Code[10];AlertType@1240020004 : Code[20]);
    VAR
      ReplPathAlert@1240020000 : Record 14097464;
    BEGIN
      IF LocCode <> '' THEN
      ReplPathAlert.SETFILTER("Location Code", '%1|%2', LocCode,'');
      ReplPathAlert.SETFILTER("Item No.", '%1|%2', ItemNo, '');
      ReplPathAlert.SETFILTER("Variant Code", '%1|%2', VariantCode, '');
      ReplPathAlert.SETRANGE("Alert Type", AlertType);
      ReplPathAlert.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE WriteReplPathAlert@1240020007(LocCode@1240020001 : Code[10];ItemNo@1240020002 : Code[50];VariantCode@1240020003 : Code[10];ErrorMessage@1240020004 : Text[250];AlertType@1240020000 : Code[20]);
    VAR
      ReplPathAlert@1240020005 : Record 14097464;
    BEGIN
      IF AlertEntryNo = 0 THEN BEGIN
        ReplPathAlert.LOCKTABLE;
        IF ReplPathAlert.FINDLAST THEN
          AlertEntryNo := ReplPathAlert."Entry No." + 1
        ELSE
          AlertEntryNo := 1;
      END ELSE
        AlertEntryNo := AlertEntryNo + 1;
      ReplPathAlert.INIT;
      ReplPathAlert."Entry No." := AlertEntryNo;
      ReplPathAlert."Location Code" := LocCode;
      ReplPathAlert."Item No." := ItemNo;
      ReplPathAlert."Variant Code" := VariantCode;
      ReplPathAlert."Alert Description" := ErrorMessage;
      ReplPathAlert."Alert Date" := TODAY;
      ReplPathAlert."Alert Type" := AlertType;
      ReplPathAlert.INSERT;
    END;

    PROCEDURE CheckValidProductionBOM@1240020004();
    VAR
      Item@1240030000 : Record 27;
      ProcUnit@1240030003 : Record 14000555;
      ProgWindow@1240030002 : Dialog;
      Text001@1240030004 : TextConst 'ENU=Check Production BOM';
      Text002@1240030005 : TextConst 'ENU=Item';
      SetBypass@1240020002 : Boolean;
      LowLevelCode@1240020003 : Integer;
      InvMgt@1240020001 : Codeunit 14000553;
      LogEntryNo@1240020000 : Integer;
      ManualBypassCount@1000 : Integer;
      ModifyRec@1240020005 : Boolean;
      Query_PUCMissingBOM@1240020004 : Query 14000552;
      ErrorBypassCount@1240020006 : Integer;
      BOMisMissing@1240020007 : TextConst 'ENU=%1 Production BOM is missing or not set.';
    BEGIN
      IF GUIALLOWED THEN BEGIN
        ProgWindow.OPEN(
          Text001 + '\' +
          Text002 + '  #1##################');
        ProgWindow.UPDATE(1,'Reset Production Bypass');
      END;

      ProcUnit.SETCURRENTKEY("Item No.","Replenishment Source Type","Replenishment Source Code","Variant Code","Location Code");
      ProcUnit.SETRANGE("Replenishment Source Type",ProcUnit."Replenishment Source Type"::Production);
      ProcUnit.SETRANGE("Bypass Production Plan",TRUE);
      ProcUnit.MODIFYALL("Bypass Production Plan",FALSE);
      COMMIT;

      ProcUnit.SETRANGE("Bypass Production Plan");

      Item.SETCURRENTKEY("Production BOM No.");
      Item.SETFILTER("Production BOM No.", '<>%1', '');
      IF Item.FINDSET THEN BEGIN
        REPEAT
          DeleteReplPathAlert('',Item."No.",'',TextProduction);
          ProcUnit.SETRANGE("Item No.", Item."No.");
          IF NOT ProcUnit.ISEMPTY THEN BEGIN
          IF GUIALLOWED THEN
            ProgWindow.UPDATE(1,Item."No.");

          SetBypass := FALSE;
          LowLevelCode := 0;

          IF CheckProductionBOM(Item,LowLevelCode) THEN
            SetBypass := TRUE;

          IF CheckRouting(Item) THEN
            SetBypass := TRUE;
          IF Item.Blocked THEN
            SetBypass := TRUE;

          IF SetBypass THEN BEGIN
            ProcUnit.MODIFYALL("Bypass Production Plan", TRUE, FALSE);
            ErrorBypassCount += 1;
          END;

          ProcUnit.MODIFYALL("Low-Level Code", LowLevelCode, FALSE);
          END;
        UNTIL Item.NEXT = 0;
      END;
      COMMIT;

      // Query to check items without a bom but marked as procurement unit replenishment of production.
      ProcUnit.RESET;
      ProcUnit.SETRANGE("Replenishment Source Type",ProcUnit."Replenishment Source Type"::Production);
      CLEAR(Query_PUCMissingBOM);
      IF Query_PUCMissingBOM.OPEN THEN BEGIN
        WHILE Query_PUCMissingBOM.READ DO BEGIN
          ProcUnit.SETRANGE("Item No.", Query_PUCMissingBOM.No);
          IF ProcUnit.FINDSET THEN BEGIN
          ProcUnit.MODIFYALL("Bypass Production Plan", TRUE, FALSE);
          ErrorBypassCount += 1;
            REPEAT
              WriteReplPathAlert(ProcUnit."Location Code",ProcUnit."Item No.",ProcUnit."Variant Code",STRSUBSTNO(BOMisMissing, ProcUnit."Item No."),  TextProduction);
            UNTIL ProcUnit.NEXT = 0;
          END;
        END;
      END;

      ProcUnit.RESET;
      ProcUnit.SETCURRENTKEY("Item No.","Replenishment Source Type","Replenishment Source Code","Variant Code","Location Code");
      ProcUnit.SETRANGE("Replenishment Source Type",ProcUnit."Replenishment Source Type"::Production);
      ProcUnit.SETRANGE("Manual Bypass Replenishment", TRUE);
      ProcUnit.SETRANGE("Bypass Production Plan", FALSE);
      IF ProcUnit.FINDSET THEN BEGIN
        REPEAT
          ProcUnit."Bypass Production Plan" := ProcUnit."Manual Bypass Replenishment";
          ProcUnit.MODIFY(FALSE);
        UNTIL ProcUnit.NEXT = 0;
      END;

      ProcUnit.SETRANGE("Bypass Production Plan");
      ManualBypassCount := ProcUnit.COUNT;
      ProcUnit.SETRANGE("Manual Bypass Replenishment");
      ProcUnit.SETRANGE("Bypass Production Plan", TRUE);
      IF NOT ProcUnit.ISEMPTY THEN BEGIN
        InvMgt.CreateLogEntry('',STRSUBSTNO(Text004,ErrorBypassCount, ManualBypassCount),LogEntryNo);
        InvMgt.CloseLogEntry(LogEntryNo,'')
      END;

      IF GUIALLOWED THEN
        ProgWindow.CLOSE;
    END;

    PROCEDURE CheckValidAssemblyBOM@1240020006();
    VAR
      Item@1240030000 : Record 27;
      LocProcUnit@1240030003 : Record 14000555;
      Query_PUCMissingAssyBOM@1240020007 : Query 14000555;
      ProgWindow@1240030002 : Dialog;
      Text001@1240030004 : TextConst 'ENU=Check Assembly BOM';
      Text002@1240030005 : TextConst 'ENU=Item';
      SetBypass@1240020002 : Boolean;
      LowLevelCode@1240020003 : Integer;
      InvMgt@1240020001 : Codeunit 14000553;
      LogEntryNo@1240020000 : Integer;
      ManualBypassCount@1000 : Integer;
      ModifyRec@1240020005 : Boolean;
      BypassBOMInfo@1240020004 : TextConst 'ENU=%1 Assembly BOMs Bypassed %2 Marked Manual';
      ErrorBypassCount@1240020006 : Integer;
      BOMisMissing@1240020008 : TextConst 'ENU=%1 Assembly BOM is Missing';
    BEGIN
      IF GUIALLOWED THEN BEGIN
        ProgWindow.OPEN(
          Text001 + '\' +
          Text002 + '  #1##################');
        ProgWindow.UPDATE(1,'Reset Assembly Bypass');
      END;

      LocProcUnit.SETCURRENTKEY("Item No.","Replenishment Source Type","Replenishment Source Code","Variant Code","Location Code");
      LocProcUnit.SETRANGE("Replenishment Source Type",LocProcUnit."Replenishment Source Type"::Assembly);
      LocProcUnit.SETRANGE("Bypass Production Plan",TRUE);
      LocProcUnit.MODIFYALL("Bypass Production Plan",FALSE);
      COMMIT;

      LocProcUnit.SETRANGE("Bypass Production Plan");

      Item.SETCURRENTKEY("Production BOM No.");
      Item.CALCFIELDS("Assembly BOM");
      Item.SETRANGE("Assembly BOM", TRUE);
      IF Item.FINDSET THEN BEGIN
        REPEAT
          DeleteReplPathAlert('',Item."No.",'',TextAssembly);
          LocProcUnit.SETRANGE("Item No.", Item."No.");
          IF NOT LocProcUnit.ISEMPTY THEN BEGIN
          IF GUIALLOWED THEN
            ProgWindow.UPDATE(1,Item."No.");


          SetBypass := FALSE;
          LowLevelCode := 0;

          IF CheckAssemblyBOM(Item,LowLevelCode) THEN
            SetBypass := TRUE;

          IF Item.Blocked THEN
            SetBypass := TRUE;

          IF SetBypass THEN BEGIN
              LocProcUnit.MODIFYALL("Bypass Production Plan", TRUE, FALSE);
            ErrorBypassCount += 1;
          END;

           LocProcUnit.MODIFYALL("Low-Level Code", LowLevelCode, FALSE);
          END;

        UNTIL Item.NEXT = 0;
      END;
      COMMIT;
      // Query to check items without a bom but marked as procurement unit replenishment of assembly.
      LocProcUnit.RESET;
      LocProcUnit.SETRANGE("Replenishment Source Type",LocProcUnit."Replenishment Source Type"::Assembly);
      CLEAR(Query_PUCMissingAssyBOM);
      Query_PUCMissingAssyBOM.SETRANGE(Assembly_BOM, FALSE);
      IF Query_PUCMissingAssyBOM.OPEN THEN BEGIN
        WHILE Query_PUCMissingAssyBOM.READ DO BEGIN
          LocProcUnit.SETRANGE("Item No.", Query_PUCMissingAssyBOM.No);
          IF LocProcUnit.FINDSET THEN BEGIN
            LocProcUnit.MODIFYALL("Bypass Production Plan", TRUE, FALSE);
            ErrorBypassCount += 1;
            REPEAT
              WriteReplPathAlert(LocProcUnit."Location Code",LocProcUnit."Item No.",LocProcUnit."Variant Code",STRSUBSTNO(BOMisMissing, LocProcUnit."Item No."), TextAssembly);
            UNTIL LocProcUnit.NEXT = 0;
          END;
        END;
      END;

      LocProcUnit.RESET;
      LocProcUnit.SETCURRENTKEY("Item No.","Replenishment Source Type","Replenishment Source Code","Variant Code","Location Code");
      LocProcUnit.SETRANGE("Replenishment Source Type",LocProcUnit."Replenishment Source Type"::Assembly);
      LocProcUnit.SETRANGE("Manual Bypass Replenishment", TRUE);
      LocProcUnit.SETRANGE("Bypass Production Plan", FALSE);
      IF LocProcUnit.FINDSET THEN BEGIN
        REPEAT
          LocProcUnit."Bypass Production Plan" := LocProcUnit."Manual Bypass Replenishment";
          LocProcUnit.MODIFY(FALSE);
        UNTIL LocProcUnit.NEXT = 0;
      END;

      LocProcUnit.SETRANGE("Bypass Production Plan");
      ManualBypassCount := LocProcUnit.COUNT;
      LocProcUnit.SETRANGE("Manual Bypass Replenishment");
      LocProcUnit.SETRANGE("Bypass Production Plan", TRUE);
      IF NOT LocProcUnit.ISEMPTY THEN BEGIN
        InvMgt.CreateLogEntry('',STRSUBSTNO(BypassBOMInfo,ErrorBypassCount, ManualBypassCount),LogEntryNo);
        InvMgt.CloseLogEntry(LogEntryNo,'')
      END;

      IF GUIALLOWED THEN
        ProgWindow.CLOSE;
    END;

    PROCEDURE CheckAssemblyBOM@1240020008(VAR Item@1240020000 : Record 27;VAR LowLevelCode@1240020003 : Integer) Err : Boolean;
    VAR
      BOMisEmpty@1240020002 : TextConst 'ENU=%1 Assembly BOM is Empty';
      BOMexceedsLevel@1240020006 : TextConst 'ENU=%1 Assembly BOM exceeds max level.';
      BOMComponent@1240020001 : Record 90;
      CalcLowLevel@1240020005 : Codeunit 99000793;
      ProcUnit@1240020009 : Record 14000555;
      ErrMsg@1240020007 : Text[250];
      BOMComponentBlank@1240020004 : TextConst 'ENU=%1 Assembly BOM Component''s No. is missing.';
      BOMComponentQtyPer@1240020008 : TextConst 'ENU=%1 Assembly BOM Component %2 Qty. Per is missing.';
    BEGIN
      Err := FALSE;

      BOMComponent.SETRANGE("Parent Item No.",Item."No.");
      BOMComponent.SETRANGE(Type,BOMComponent.Type::Item);
      BOMComponent.SETFILTER("No.",'<>%1','');
      BOMComponent.SETFILTER("Quantity per",'<>%1',0);
      IF BOMComponent.ISEMPTY THEN BEGIN
        ErrMsg := STRSUBSTNO(BOMisEmpty, Item."No.");
        ProcUnit.SETRANGE("Item No.", Item."No.");
        ProcUnit.SETRANGE("Replenishment Source Type", ProcUnit."Replenishment Source Type"::Assembly);
        IF ProcUnit.FINDSET THEN BEGIN
          REPEAT
            WriteReplPathAlert(ProcUnit."Location Code",Item."No.",ProcUnit."Variant Code",ErrMsg, TextAssembly);
          UNTIL ProcUnit.NEXT = 0;
        END;
        Err := TRUE;
      END;

      BOMComponent.SETRANGE("No.");
      BOMComponent.SETRANGE("Quantity per");
      IF BOMComponent.FINDSET THEN BEGIN
        REPEAT

          IF BOMComponent."No." = '' THEN BEGIN
            ErrMsg := STRSUBSTNO(BOMComponentBlank, Item."No.", BOMComponent."No.");
            ProcUnit.SETRANGE("Item No.", Item."No.");
            ProcUnit.SETRANGE("Replenishment Source Type", ProcUnit."Replenishment Source Type"::Assembly);
            IF ProcUnit.FINDSET THEN BEGIN
              REPEAT
                WriteReplPathAlert(ProcUnit."Location Code",Item."No.",ProcUnit."Variant Code",ErrMsg, TextAssembly);
              UNTIL ProcUnit.NEXT = 0;
            END;
            Err := TRUE;
          END;

          IF BOMComponent."Quantity per" = 0 THEN BEGIN
            ErrMsg := STRSUBSTNO(BOMComponentQtyPer, Item."No.", BOMComponent."No.");
            ProcUnit.SETRANGE("Item No.", Item."No.");
            ProcUnit.SETRANGE("Replenishment Source Type", ProcUnit."Replenishment Source Type"::Assembly);
            IF ProcUnit.FINDSET THEN BEGIN
              REPEAT
                WriteReplPathAlert(ProcUnit."Location Code",Item."No.",ProcUnit."Variant Code",ErrMsg, TextAssembly);
              UNTIL ProcUnit.NEXT = 0;
            END;
            Err := TRUE;
          END;
        UNTIL BOMComponent.NEXT = 0;
      END;

      CLEAR(CalcLowLevel);
      COMMIT;
      IF NOT CalcLowLevel.RUN(Item) THEN BEGIN
        ErrMsg := STRSUBSTNO(BOMexceedsLevel, Item."No.");
        ProcUnit.SETRANGE("Item No.", Item."No.");
        ProcUnit.SETRANGE("Replenishment Source Type", ProcUnit."Replenishment Source Type"::Assembly);
        IF ProcUnit.FINDSET THEN BEGIN
          REPEAT
            WriteReplPathAlert(ProcUnit."Location Code",Item."No.",ProcUnit."Variant Code",ErrMsg, TextAssembly);
          UNTIL ProcUnit.NEXT = 0;
        END;
        Err := TRUE;
      END ELSE BEGIN
        LowLevelCode := Item."Low-Level Code";
      END;
      EXIT(Err);
    END;

    PROCEDURE SetOverrideExecutionModeProd@1240020017();
    BEGIN
      OverrideExecutionModeProd := TRUE;
    END;

    PROCEDURE SetOverrideExecutionModeAssy@1240020016();
    BEGIN
      OverrideExecutionModeAssy := TRUE;
    END;

    PROCEDURE CopyGlobalLocationFilters@1240020000();
    BEGIN
      Location.COPYFILTERS(LocationFiltesRec);
    END;

    PROCEDURE SetGlobalLocationFilters@1240020001(VAR InLocationFilterRec@1240020000 : Record 14);
    BEGIN
      LocationFiltesRec.COPYFILTERS(InLocationFilterRec);
      // Period End Page for the user selection - Ran Manually
      // Location.SETRANGE("Select Period End Processing",USERID)

      // Produciton Plan/Assembly Plan Page - Ran Manually
      // Location.SETFILTER(Code,CurrLocationFilter);

      // Automatic run (Overnight) or ran from the object designer
      // Location.SETRANGE("Auto Process Prod. Plan",TRUE);
    END;

    LOCAL PROCEDURE CalcBOMDates@1240020005(VAR CurrItem@1240020000 : Record 27;VAR CurrStartDate@1240020001 : Date;VAR CurrEndDate@1240020002 : Date);
    VAR
      StartDate@1240020004 : Date;
      EndDate@1240020005 : Date;
      LastProdOrderDate@1240020003 : Date;
    BEGIN
      // check workdate through max lead time horizon
      StartDate := WORKDATE;
      IF AdvForcSetup."Max. LTH Days" = 0 THEN
        AdvForcSetup."Max. LTH Days" := 365;
      EndDate := StartDate + AdvForcSetup."Max. LTH Days";
      LastProdOrderDate := GetLastProdOrderDate(CurrItem);
      IF LastProdOrderDate < StartDate THEN
        LastProdOrderDate := 0D;
      IF LastProdOrderDate <> 0D THEN BEGIN
        EndDate :=  CALCDATE(STRSUBSTNO('<+%1D>', AdvForcSetup."Max. LTH Days"),StartDate);
      END;
      CurrStartDate := StartDate;
      CurrEndDate := EndDate;
    END;

    PROCEDURE GetLastProdOrderDate@1240020047(VAR CurrItem@1240020002 : Record 27) LastProdOrderDate : Date;
    VAR
      ProdOrderLine2@1240020001 : Record 5406;
    BEGIN
      LastProdOrderDate := 0D;
      ProdOrderLine2.SETCURRENTKEY("Item No.","Variant Code","Location Code",Status,"Due Date");
      ProdOrderLine2.SETRANGE("Item No.",CurrItem."No.");
      ProdOrderLine2.SETRANGE(Status, ProdOrderLine2.Status::Planned, ProdOrderLine2.Status::Released);
      IF ProdOrderLine2.FINDSET THEN BEGIN
        REPEAT
          IF ProdOrderLine2."Due Date" > LastProdOrderDate THEN
            LastProdOrderDate := ProdOrderLine2."Due Date";
        UNTIL ProdOrderLine2.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

