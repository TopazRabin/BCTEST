OBJECT Codeunit 14002416 Create E.D.I. Inventory Advice
{
  OBJECT-PROPERTIES
  {
    Date=02/25/19;
    Time=12:00:00 PM;
    Version List=SE0.61,TPZ2682,TPZ2785;
  }
  PROPERTIES
  {
    TableNo=27;
    OnRun=BEGIN
            GetItems;
          END;

  }
  CODE
  {
    VAR
      EDITemplate@1240030000 : Record 14002350;
      InventoryAdviceHdr@1240030004 : Record 14002413;
      InventoryAdviceLine@1240030019 : Record 14002414;
      EDITradePartner@1240030005 : Record 14002360;
      EDIDocument@1240030008 : Record 14002353;
      ItemCrossReference@1240030001 : Record 5717;
      EDISetup@1240030020 : Record 14002367;
      Item@1240030014 : Record 27;
      Item2@1240020007 : Record 27;
      Text001@1240030003 : TextConst 'ENU=Inventory Advice %1 not exported.';
      ItemTrackingCode@1240020005 : Record 6502;
      ItemLedgerEntry@1240020006 : Record 32;
      Location@1240020011 : Record 14;
      EDITradePtnrItem@1240020015 : Record 14002364;
      TmpQuoteHeader@1240020017 : TEMPORARY Record 36;
      TmpQuoteLine@1240020016 : TEMPORARY Record 37;
      SalesPrice@1240020020 : TEMPORARY Record 7002;
      TmpItem@1240020008 : TEMPORARY Record 27;
      TmpEDITradePtnrItem@1240020009 : TEMPORARY Record 14002364;
      Customer@1240020025 : Record 18;
      SalesPriceCalcMgt@1240020021 : Codeunit 7000;
      DocumentNo@1240030021 : Code[10];
      i@1240030024 : Integer;
      LineNo@1240030049 : Integer;
      ReceiptDate@1240030050 : Date;
      EarliestReceiptDate@1240020004 : Date;
      ExpectedDate@1240020013 : Date;
      AvailableQty@1240030041 : Decimal;
      ReceiptQty@1240030048 : Decimal;
      LocationReceiptQty@1240020003 : Decimal;
      LocationQty@1240020002 : Decimal;
      ExpectedReceiptQty@1240020012 : Decimal;
      InventoryAdvice@1240020018 : Boolean;
      PriceCatalog@1240020019 : Boolean;
      CatalogAdditionEntry@1240020010 : Boolean;
      CatalogDeletionEntry@1240020022 : Boolean;
      ExceptionCatalogType@1240020023 : ' ,Add,Delete';
      CatalogNo@1240020024 : Code[10];
      AutoFilterICRTypeNo@1240020027 : ' ,Customer,Blank';
      IncludeCrossRefTypeNo@1240020026 : ' ,Customer,Blank';
      AdviceNo@1240020028 : Code[10];
      "0DF"@1240020000 : DateFormula;

    PROCEDURE GetItems@1240020005() : Boolean;
    VAR
      ItemCrossReference@1240020000 : Record 5717;
    BEGIN
      TmpItem.RESET;
      TmpItem.DELETEALL;

      TmpEDITradePtnrItem.RESET;
      TmpEDITradePtnrItem.DELETEALL;

      EDITradePartner.GET(EDIDocument."Trade Partner No.");
      EDITemplate.GET(EDIDocument."EDI Template Code");

      IF InventoryAdviceHdr.Type = InventoryAdviceHdr.Type::"Price Catalog" THEN
        PriceCatalog := TRUE
      ELSE
        PriceCatalog := FALSE;

      IF EDIDocument."Auto. Create Item Filter" =
         EDIDocument."Auto. Create Item Filter"::"EDI Item Cross Reference"
      THEN BEGIN
        IF InventoryAdviceHdr.Type = InventoryAdviceHdr.Type::"Price Catalog" THEN BEGIN
          CatalogAdditionEntry := FALSE;
          CatalogDeletionEntry := FALSE;
          IF (ExceptionCatalogType = ExceptionCatalogType::Add) OR
             (ExceptionCatalogType = ExceptionCatalogType::Delete)
          THEN BEGIN
            IF (ExceptionCatalogType = ExceptionCatalogType::Add) THEN
              CatalogAdditionEntry := TRUE
            ELSE
              CatalogDeletionEntry := TRUE;
          END;

          EDITradePtnrItem.RESET;
          EDITradePtnrItem.SETRANGE("Trade Partner No.",EDITradePartner."No.");
          EDITradePtnrItem.SETFILTER("Partner Item No.",'<>%1','');
          EDITradePtnrItem.SETRANGE(Discontinue,FALSE);
          IF CatalogAdditionEntry THEN
            EDITradePtnrItem.SETRANGE("Update Price Catalog",EDITradePtnrItem."Update Price Catalog"::Add);
          IF CatalogDeletionEntry THEN
            EDITradePtnrItem.SETRANGE("Update Price Catalog",EDITradePtnrItem."Update Price Catalog"::Delete);
          IF EDITradePtnrItem.FIND('-') THEN BEGIN
            InventoryAdviceHdr.GET(InventoryAdviceHdr."No.",InventoryAdviceHdr.Type::"Price Catalog");
            CatalogNo := InventoryAdviceHdr."No.";
            REPEAT
              IF Item2.GET(EDITradePtnrItem."Navision Item No.") THEN
                IF (EDIDocument."Exclude Blocked Item" AND Item2.Blocked = FALSE) OR
                   (EDIDocument."Exclude Blocked Item" = FALSE)
                THEN BEGIN
                  TmpEDITradePtnrItem.RESET;
                  TmpEDITradePtnrItem.SETRANGE("Trade Partner No.",EDITradePtnrItem."Trade Partner No.");
                  TmpEDITradePtnrItem.SETRANGE("Partner Item No.",EDITradePtnrItem."Partner Item No.");
                  TmpEDITradePtnrItem.SETRANGE("Partner Variant Code",EDITradePtnrItem."Partner Variant Code");
                  IF NOT TmpEDITradePtnrItem.FIND('-') THEN BEGIN
                    TmpEDITradePtnrItem.COPY(EDITradePtnrItem);
                    TmpEDITradePtnrItem.INSERT;
                  END;
                  IF Item.GETFILTER("Location Filter") = '' THEN BEGIN
                    IF EDIDocument."Location Override" <> '' THEN
                     Item.SETFILTER("Location Filter",EDIDocument."Location Override")
                    ELSE
                      Item.SETFILTER("Location Filter",InventoryAdviceHdr."Location Code");
                  END;
                  Item2.COPYFILTERS(Item);

                  InventoryAdviceHdr.GET(CatalogNo,InventoryAdviceHdr.Type::"Price Catalog");
                  InsertItem(
                    Item2,EDIDocument,InventoryAdviceHdr."No.",ExpectedDate,AvailableQty,
                    ExpectedReceiptQty,EDITradePtnrItem."Navision Variant Code");
                END;
            UNTIL EDITradePtnrItem.NEXT = 0;
          END;

          IF CatalogAdditionEntry THEN
            InventoryAdviceHdr."Transaction Purpose Code" :=
              InventoryAdviceHdr."Transaction Purpose Code"::Add;
          IF CatalogDeletionEntry THEN
            InventoryAdviceHdr."Transaction Purpose Code" :=
              InventoryAdviceHdr."Transaction Purpose Code"::Delete;

          IF (EDIDocument."Auto. Create Item Filter" =
             EDIDocument."Auto. Create Item Filter"::"EDI Item Cross Reference") AND
             ((CatalogAdditionEntry = TRUE) OR (CatalogDeletionEntry = TRUE))
          THEN BEGIN
            TmpEDITradePtnrItem.RESET;
            TmpEDITradePtnrItem.SETRANGE("Trade Partner No.",EDITradePartner."No.");
            IF CatalogAdditionEntry THEN
              TmpEDITradePtnrItem.SETRANGE("Update Price Catalog",EDITradePtnrItem."Update Price Catalog"::Add);
            IF CatalogDeletionEntry THEN
              TmpEDITradePtnrItem.SETRANGE("Update Price Catalog",EDITradePtnrItem."Update Price Catalog"::Delete);
            IF TmpEDITradePtnrItem.FIND('-') THEN BEGIN
              REPEAT
                IF EDITradePtnrItem.GET(
                  TmpEDITradePtnrItem."Trade Partner No.",TmpEDITradePtnrItem."Partner Item No.",
                  TmpEDITradePtnrItem."Partner Variant Code")
                THEN BEGIN
                  EDITradePtnrItem.VALIDATE("Update Price Catalog",EDITradePtnrItem."Update Price Catalog"::" ");
                  EDITradePtnrItem."Exception Price Catalog No." := InventoryAdviceHdr."No.";
                  IF CatalogAdditionEntry THEN
                     EDITradePtnrItem."Exception Price Catalog Type" :=
                      EDITradePtnrItem."Update Price Catalog"::Add;
                  IF CatalogDeletionEntry THEN BEGIN
                    EDITradePtnrItem."Exception Price Catalog Type" :=
                      EDITradePtnrItem."Update Price Catalog"::Delete;
                    EDITradePtnrItem.Discontinue := TRUE;
                  END;
                  EDITradePtnrItem.MODIFY;
                END;
              UNTIL TmpEDITradePtnrItem.NEXT = 0;

             TmpItem.RESET;
             TmpItem.DELETEALL;

             TmpEDITradePtnrItem.RESET;
             TmpEDITradePtnrItem.DELETEALL;
            END;
          END;
          IF EDITemplate."Auto. Release Price Catalog" THEN
            ReleaseInventoryAdvice(InventoryAdviceHdr)
        END ELSE BEGIN
          EDITradePtnrItem.RESET;
          EDITradePtnrItem.SETRANGE("Trade Partner No.",EDITradePartner."No.");
          EDITradePtnrItem.SETFILTER("Partner Item No.",'<>%1','');
          EDITradePtnrItem.SETRANGE(Discontinue,FALSE);
          IF EDITradePtnrItem.FIND('-') THEN
            InventoryAdviceHdr.GET(InventoryAdviceHdr."No.",InventoryAdviceHdr.Type::"  ");
            AdviceNo := InventoryAdviceHdr."No.";
            REPEAT
              TmpEDITradePtnrItem.RESET;
              TmpEDITradePtnrItem.SETRANGE("Trade Partner No.",EDITradePtnrItem."Trade Partner No.");
              TmpEDITradePtnrItem.SETRANGE("Partner Item No.",EDITradePtnrItem."Partner Item No.");
              TmpEDITradePtnrItem.SETRANGE("Partner Variant Code",EDITradePtnrItem."Partner Variant Code");
              IF NOT TmpEDITradePtnrItem.FIND('-') THEN BEGIN
                TmpEDITradePtnrItem.COPY(EDITradePtnrItem);
                TmpEDITradePtnrItem.INSERT;
              END;
              IF Item2.GET(EDITradePtnrItem."Navision Item No.") THEN BEGIN
                IF (EDIDocument."Exclude Blocked Item" AND Item2.Blocked = FALSE) OR
                   (EDIDocument."Exclude Blocked Item" = FALSE)
                THEN BEGIN
                  IF Item.GETFILTER("Location Filter") = '' THEN BEGIN
                    IF EDIDocument."Location Override" <> '' THEN
                     Item.SETFILTER("Location Filter",EDIDocument."Location Override")
                    ELSE
                      Item.SETFILTER("Location Filter",InventoryAdviceHdr."Location Code")
                  END;
                  Item2.COPYFILTERS(Item);

                  InventoryAdviceHdr.GET(AdviceNo,InventoryAdviceHdr.Type::"  ");
                  InsertItem(
                    Item2,EDIDocument,InventoryAdviceHdr."No.",ExpectedDate,AvailableQty,
                    ExpectedReceiptQty,EDITradePtnrItem."Navision Variant Code");
                END;
              END;
            UNTIL EDITradePtnrItem.NEXT = 0;
            IF EDITemplate."Auto. Release Inventory Advice" THEN
              ReleaseInventoryAdvice(InventoryAdviceHdr);
        END;
      END ELSE BEGIN
        TmpItem.RESET;
        TmpItem.DELETEALL;
        CASE EDIDocument."Auto. Create Item Filter" OF
          EDIDocument."Auto. Create Item Filter"::"Cross-Reference Type No. (Customer)":
            BEGIN
              AutoFilterICRTypeNo := AutoFilterICRTypeNo::Customer;
              CLEAR(ItemCrossReference);
              WITH ItemCrossReference DO BEGIN
                RESET;
                SETFILTER("Cross-Reference Type",'<> %1',"Cross-Reference Type"::Vendor);
                SETRANGE("Cross-Reference Type No.",Customer."No.");
                SETFILTER("Variant Code",Item."Variant Filter");
                SETRANGE("Discontinue Bar Code",FALSE);
                IF FIND('-') THEN BEGIN
                  IF PriceCatalog THEN
                    InventoryAdviceHdr.GET(InventoryAdviceHdr."No.",InventoryAdviceHdr.Type::"Price Catalog")
                  ELSE
                    InventoryAdviceHdr.GET(InventoryAdviceHdr."No.",InventoryAdviceHdr.Type::"  ");
                  CatalogNo := InventoryAdviceHdr."No.";
                  REPEAT
                    Item2.GET("Item No.");
                    IF (EDIDocument."Exclude Blocked Item" AND Item2.Blocked = FALSE) OR
                       (EDIDocument."Exclude Blocked Item" = FALSE)
                    THEN BEGIN
                      TmpItem.RESET;
                      TmpItem.SETRANGE("No.",Item2."No.");
                      IF NOT TmpItem.FIND('-') THEN BEGIN
                        TmpItem."No." := Item2."No.";
                        TmpItem.INSERT;
                        IF Item.GETFILTER("Location Filter") = '' THEN BEGIN
                          IF EDIDocument."Location Override" <> '' THEN
                            Item.SETFILTER("Location Filter",EDIDocument."Location Override")
                          ELSE
                            Item.SETFILTER("Location Filter",InventoryAdviceHdr."Location Code");
                         END;
                         Item2.COPYFILTERS(Item);

                         ICRLookupItem(
                           Item2,EDIDocument,InventoryAdviceHdr."No.",AutoFilterICRTypeNo,ExpectedDate,
                           AvailableQty,ExpectedReceiptQty);
                      END;
                    END;
                  UNTIL NEXT = 0;
                  IF PriceCatalog THEN BEGIN
                    IF EDITemplate."Auto. Release Price Catalog" THEN
                      ReleaseInventoryAdvice(InventoryAdviceHdr);
                  END ELSE
                   IF EDITemplate."Auto. Release Inventory Advice" THEN
                     ReleaseInventoryAdvice(InventoryAdviceHdr);
                END;
              END;
            END;
          EDIDocument."Auto. Create Item Filter"::"Cross-Reference Type No. (Blank)":
            BEGIN
              AutoFilterICRTypeNo := AutoFilterICRTypeNo::Blank;
              CLEAR(ItemCrossReference);
              WITH ItemCrossReference DO BEGIN
                RESET;
                SETFILTER("Cross-Reference Type",'<> %1',"Cross-Reference Type"::Vendor);
                SETRANGE("Cross-Reference Type No.",'');
                SETFILTER("Variant Code",Item."Variant Filter");
                SETRANGE("Discontinue Bar Code",FALSE);
                IF FIND('-') THEN BEGIN
                  IF PriceCatalog THEN
                    InventoryAdviceHdr.GET(InventoryAdviceHdr."No.",InventoryAdviceHdr.Type::"Price Catalog")
                  ELSE
                    InventoryAdviceHdr.GET(InventoryAdviceHdr."No.",InventoryAdviceHdr.Type::"  ");
                  CatalogNo := InventoryAdviceHdr."No.";
                  REPEAT
                    Item2.GET(ItemCrossReference."Item No.");
                    IF (EDIDocument."Exclude Blocked Item" AND Item2.Blocked = FALSE) OR
                       (EDIDocument."Exclude Blocked Item" = FALSE)
                    THEN BEGIN
                      TmpItem.RESET;
                      TmpItem.SETRANGE("No.",Item2."No.");
                      IF NOT TmpItem.FIND('-') THEN BEGIN
                        TmpItem."No." := Item2."No.";
                        TmpItem.INSERT;
                        IF Item.GETFILTER("Location Filter") = '' THEN BEGIN
                          IF EDIDocument."Location Override" <> '' THEN
                            Item.SETFILTER("Location Filter",EDIDocument."Location Override")
                          ELSE
                            Item.SETFILTER("Location Filter",InventoryAdviceHdr."Location Code");
                        END;
                        Item2.COPYFILTERS(Item);

                        ICRLookupItem(
                          Item2,EDIDocument,InventoryAdviceHdr."No.",AutoFilterICRTypeNo,ExpectedDate,
                          AvailableQty,ExpectedReceiptQty);
                      END;
                    END;
                  UNTIL NEXT = 0;
                  IF PriceCatalog THEN BEGIN
                    IF EDITemplate."Auto. Release Price Catalog" THEN
                      ReleaseInventoryAdvice(InventoryAdviceHdr);
                  END ELSE
                    IF EDITemplate."Auto. Release Inventory Advice" THEN
                      ReleaseInventoryAdvice(InventoryAdviceHdr);
                END;
              END;
            END;
          ELSE
            CASE IncludeCrossRefTypeNo OF
              IncludeCrossRefTypeNo::" ":
                BEGIN
                  IF PriceCatalog THEN
                    InventoryAdviceHdr.GET(InventoryAdviceHdr."No.",InventoryAdviceHdr.Type::"Price Catalog")
                  ELSE
                    InventoryAdviceHdr.GET(InventoryAdviceHdr."No.",InventoryAdviceHdr.Type::"  ");
                  CatalogNo := InventoryAdviceHdr."No.";
                  IF (EDIDocument."Exclude Blocked Item" AND Item.Blocked = FALSE) OR
                     (EDIDocument."Exclude Blocked Item" = FALSE)
                  THEN BEGIN
                    IF Item.GETFILTER("Location Filter") = '' THEN BEGIN
                      IF EDIDocument."Location Override" <> '' THEN
                        Item.SETFILTER("Location Filter",EDIDocument."Location Override")
                      ELSE
                        Item.SETFILTER("Location Filter",InventoryAdviceHdr."Location Code")
                    END;

                    InsertItem(
                      Item,EDIDocument,InventoryAdviceHdr."No.",ExpectedDate,AvailableQty,
                      ExpectedReceiptQty,'');
                  END;
                END;
              IncludeCrossRefTypeNo::Customer:
                BEGIN
                  AutoFilterICRTypeNo := AutoFilterICRTypeNo::Customer;
                  WITH ItemCrossReference DO BEGIN
                    RESET;
                    SETFILTER("Cross-Reference Type",'<> %1',"Cross-Reference Type"::Vendor);
                    SETRANGE("Cross-Reference Type No.",Customer."No.");
                    SETFILTER("Variant Code",Item."Variant Filter");
                    SETRANGE("Discontinue Bar Code",FALSE);
                    IF FIND('-') THEN BEGIN
                      IF PriceCatalog THEN
                        InventoryAdviceHdr.GET(
                          InventoryAdviceHdr."No.",InventoryAdviceHdr.Type::"Price Catalog")
                       ELSE
                         InventoryAdviceHdr.GET(InventoryAdviceHdr."No.",InventoryAdviceHdr.Type::"  ");
                      CatalogNo := InventoryAdviceHdr."No.";
                      REPEAT
                        Item2.GET(ItemCrossReference."Item No.");
                        IF (EDIDocument."Exclude Blocked Item" AND Item2.Blocked = FALSE) OR
                           (EDIDocument."Exclude Blocked Item" = FALSE)
                        THEN BEGIN
                          TmpItem.RESET;
                          TmpItem.SETRANGE("No.",Item2."No.");
                          IF NOT TmpItem.FIND('-') THEN BEGIN
                            TmpItem."No." := Item2."No.";
                            TmpItem.INSERT;
                            IF Item.GETFILTER("Location Filter") = '' THEN BEGIN
                              IF EDIDocument."Location Override" <> '' THEN
                                Item.SETFILTER("Location Filter",EDIDocument."Location Override")
                              ELSE
                                Item.SETFILTER("Location Filter",InventoryAdviceHdr."Location Code");
                            END;
                            Item2.COPYFILTERS(Item);

                            ICRLookupItem(
                              Item2,EDIDocument,InventoryAdviceHdr."No.",AutoFilterICRTypeNo,
                              ExpectedDate,AvailableQty,ExpectedReceiptQty);
                          END;
                        END;
                      UNTIL NEXT = 0;
                    END;
                  END;
                END;
              IncludeCrossRefTypeNo::Blank:
                BEGIN
                  AutoFilterICRTypeNo := AutoFilterICRTypeNo::Blank;
                  WITH ItemCrossReference DO BEGIN
                    RESET;
                    SETFILTER("Cross-Reference Type",'<> %1',"Cross-Reference Type"::Vendor);
                    SETRANGE("Cross-Reference Type No.",'');
                    SETFILTER("Variant Code",Item."Variant Filter");
                    SETRANGE("Discontinue Bar Code",FALSE);
                    IF FIND('-') THEN BEGIN
                      IF PriceCatalog THEN
                        InventoryAdviceHdr.GET(
                          InventoryAdviceHdr."No.",InventoryAdviceHdr.Type::"Price Catalog")
                      ELSE
                        InventoryAdviceHdr.GET(
                          InventoryAdviceHdr."No.",InventoryAdviceHdr.Type::"  ");
                      CatalogNo := InventoryAdviceHdr."No.";
                      REPEAT
                        Item2.GET(ItemCrossReference."Item No.");
                        IF (EDIDocument."Exclude Blocked Item" AND Item2.Blocked = FALSE) OR
                           (EDIDocument."Exclude Blocked Item" = FALSE)
                        THEN BEGIN
                          TmpItem.RESET;
                          TmpItem.SETRANGE("No.",Item2."No.");
                          IF NOT TmpItem.FIND('-') THEN BEGIN
                            TmpItem."No." := Item2."No.";
                            TmpItem.INSERT;
                            IF Item.GETFILTER("Location Filter") = '' THEN BEGIN
                              IF EDIDocument."Location Override" <> '' THEN
                                Item.SETFILTER("Location Filter",EDIDocument."Location Override")
                              ELSE
                                Item.SETFILTER("Location Filter",InventoryAdviceHdr."Location Code");
                            END;
                            Item2.COPYFILTERS(Item);

                            ICRLookupItem(
                              Item2,EDIDocument,InventoryAdviceHdr."No.",AutoFilterICRTypeNo,
                              ExpectedDate,AvailableQty,ExpectedReceiptQty);
                          END;
                        END;
                      UNTIL NEXT = 0;
                    END;
                  END;
                END;
            END;
        END;
      END;

      COMMIT;
    END;

    PROCEDURE InsertItem@1240030000(VAR CurrentItem@1240030000 : Record 27;VAR EDIDocument@1240020009 : Record 14002353;DocumentNo@1240030001 : Code[10];ExpectedDate@1240020010 : Date;AvailableQty@1240020011 : Decimal;ExpectedReceiptQty@1240020013 : Decimal;VariantCode@1240020008 : Code[10]) : Boolean;
    VAR
      InventoryAdviceHdr@1240020016 : Record 14002413;
      PurchaseLine@1240020004 : Record 39;
      TradePartnerUnitOfMeasure@1240020020 : Record 14002365;
      TradePartnerItem@1240020021 : Record 14002364;
      LocationQty@1240020002 : Decimal;
      LocationReceiptQty@1240020003 : Decimal;
      AllocatedQty@1240020000 : Decimal;
      UnAssignedQuantity@1240020007 : Decimal;
      EarliestReceiptDate@1240020005 : Date;
      ItemTrackingFound@1240020001 : Boolean;
      Finished@1240020006 : Boolean;
      QtyByLocation@1240020012 : Boolean;
      ReceiptQtyByLocation@1240020014 : Boolean;
      LastUOM@1240020019 : Code[10];
      WhseCreatePick@1000000001 : Codeunit 5778;
      ItemDiv@1000000000 : Record 27;
    BEGIN
      InventoryAdvice := FALSE;
      CASE EDIDocument."Navision Document" OF
        'E_INVADV':
          BEGIN
            InventoryAdviceHdr.GET(DocumentNo,InventoryAdviceHdr.Type::"  ");
            InventoryAdvice := TRUE;
          END;
        'E_PRICAT':
          BEGIN
            InventoryAdviceHdr.GET(DocumentNo,InventoryAdviceHdr.Type::"Price Catalog");
            PriceCatalog := TRUE;
          END;
        END;

      CurrentItem.CALCFIELDS(
        Inventory,"Qty. on Sales Order","Qty. on Purch. Order","Qty. on Service Order",
        "Qty. on Component Lines","Qty. on Asm. Component");

      LocationQty := 0;
      AllocatedQty := 0;
      LocationReceiptQty := 0;
      LineNo := 0;
      EarliestReceiptDate := 0D;
      QtyByLocation := FALSE;
      ReceiptQtyByLocation := FALSE;
      LastUOM := '';
      VariantCode := '';

      IF EDIDocument."Auto. Create Item Filter" =
        EDIDocument."Auto. Create Item Filter"::"EDI Item Cross Reference"
      THEN BEGIN
        TradePartnerItem.RESET;
        TradePartnerItem.SETRANGE("Trade Partner No.",InventoryAdviceHdr."Trade Partner No.");
        TradePartnerItem.SETRANGE("Navision Item No.",CurrentItem."No.");
        TradePartnerItem.SETRANGE(Discontinue,FALSE);
        IF NOT TradePartnerItem.FIND('-') THEN
          CLEAR(TradePartnerItem);
        VariantCode := TradePartnerItem."Navision Variant Code";

        TradePartnerUnitOfMeasure.INIT;
        TradePartnerUnitOfMeasure.RESET;
        TradePartnerUnitOfMeasure.SETCURRENTKEY("Trade Partner No.","EDI Unit of Measure");
        TradePartnerUnitOfMeasure.SETRANGE(
          "Trade Partner No.",InventoryAdviceHdr."Trade Partner No.");
        TradePartnerUnitOfMeasure.SETRANGE("Navision Item No.",CurrentItem."No.");
        TradePartnerUnitOfMeasure.SETRANGE("Navision Variant Code",VariantCode);
        IF NOT TradePartnerUnitOfMeasure.FIND('-') THEN BEGIN
          TradePartnerUnitOfMeasure.SETRANGE("Navision Item No.",'');
          TradePartnerUnitOfMeasure.SETFILTER("Navision Variant Code",'=%1','');
          IF TradePartnerUnitOfMeasure.FIND('-') THEN
            LastUOM := TradePartnerUnitOfMeasure."Navision Unit of Measure";
        END ELSE
          LastUOM := TradePartnerUnitOfMeasure."Navision Unit of Measure";
      END;

      TmpQuoteHeader.SetEDITemp(TRUE);
      TmpQuoteHeader.SetHideValidationDialog(TRUE); //<TPZ2682>
      TmpQuoteHeader."Document Type" := TmpQuoteHeader."Document Type"::Quote;
      TmpQuoteHeader."No." := InventoryAdviceHdr."No.";
      TmpQuoteHeader."Order Date" := TODAY;
      TmpQuoteHeader."Posting Date" := TODAY;
      TmpQuoteHeader."Document Date" := TODAY;
      TmpQuoteHeader.VALIDATE("Sell-to Customer No.",InventoryAdviceHdr."Sell-to Customer No.");

      //<TPZ2682>
      ItemDiv.RESET;
      IF ItemDiv.GET(CurrentItem."No.") THEN
      TmpQuoteHeader.VALIDATE("Shortcut Dimension 5 Code",ItemDiv."Shortcut Dimension 5 Code");
      //</TPZ2682>

      IF InventoryAdviceHdr."Location Code" <> '' THEN
        TmpQuoteHeader.VALIDATE("Location Code",InventoryAdviceHdr."Location Code");

      TmpQuoteLine.SetEDITemp(TRUE);
      TmpQuoteLine.SetHideValidationDialog(TRUE);//<TPZ2682>
      TmpQuoteLine."Document Type" := TmpQuoteHeader."Document Type";
      TmpQuoteLine."Document No." := TmpQuoteHeader."No.";
      TmpQuoteLine."Line No." := 10000;
      TmpQuoteLine.SetSalesHeader(TmpQuoteHeader);
      TmpQuoteLine."Sell-to Customer No." := TmpQuoteHeader."Sell-to Customer No.";
      TmpQuoteLine.VALIDATE("Shortcut Dimension 5 Code",TmpQuoteHeader."Shortcut Dimension 5 Code");//<TPZ2682>
      TmpQuoteLine.VALIDATE(Type,TmpQuoteLine.Type::Item);
      TmpQuoteLine.VALIDATE("No.",CurrentItem."No.");
      TmpQuoteLine.VALIDATE("Tax Liable",FALSE);
      IF EDIDocument."Auto. Create Item Filter" =
        EDIDocument."Auto. Create Item Filter"::"EDI Item Cross Reference"
      THEN
        TmpQuoteLine.VALIDATE("Variant Code",TradePartnerItem."Navision Variant Code");
      IF InventoryAdviceHdr."Location Code" <> '' THEN
        TmpQuoteLine.VALIDATE("Location Code",TmpQuoteHeader."Location Code");
      TmpQuoteLine.VALIDATE(Quantity,1);
      IF LastUOM = '' THEN
        TmpQuoteLine.VALIDATE("Unit of Measure Code",CurrentItem."Sales Unit of Measure")
      ELSE
        TmpQuoteLine.VALIDATE("Unit of Measure Code",LastUOM);
      TmpQuoteHeader.SetEDITemp(FALSE);
      TmpQuoteLine.SetEDITemp(FALSE);

      GetSalesPrice;

      IF InventoryAdvice THEN BEGIN
        IF EDIDocument."Available Quantity by Location" THEN BEGIN
          QtyByLocation := TRUE;
          IF (EDIDocument."Quantity on Sales Order" = FALSE) AND
             (EDIDocument."Quantity on Component Lines" = FALSE)  AND
             (EDIDocument."Quantity on Asm. Component" = FALSE) AND
             (EDIDocument."Quantity on Service Order" = FALSE)
          THEN
            LocationQty := CurrentItem.Inventory
          ELSE BEGIN
            IF EDIDocument."Quantity on Sales Order" THEN
              AllocatedQty := AllocatedQty + CurrentItem."Qty. on Sales Order";
            IF EDIDocument."Quantity on Component Lines" THEN
              AllocatedQty := AllocatedQty + CurrentItem."Qty. on Component Lines";
            IF EDIDocument."Quantity on Asm. Component" THEN
              AllocatedQty := AllocatedQty + CurrentItem."Qty. on Asm. Component";
            IF EDIDocument."Quantity on Service Order" THEN
              AllocatedQty := AllocatedQty + CurrentItem."Qty. on Service Order";
            LocationQty := CurrentItem.Inventory - AllocatedQty;
          END;
          IF (EDIDocument."Available Quantity %" <> 0) AND (LocationQty > 0) THEN
            LocationQty :=
              ROUND(LocationQty * (EDIDocument."Available Quantity %" / 100),1,'=');
        END;

        IF EDIDocument."Receipt Quantity by Location" THEN BEGIN
          ReceiptQtyByLocation := TRUE;
          LocationReceiptQty := CurrentItem."Qty. on Purch. Order";
          IF EDIDocument."Receipt Quantity %" <> 0 THEN
            LocationReceiptQty :=
              ROUND(LocationReceiptQty * (EDIDocument."Receipt Quantity %" / 100),1,'=');
            PurchaseLine.RESET;
            PurchaseLine.SETCURRENTKEY(
              Type,"No.","Variant Code","Drop Shipment","Location Code","Document Type",
              "Expected Receipt Date");
            PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
            PurchaseLine.SETRANGE("No.",CurrentItem."No.");
            PurchaseLine.SETFILTER("Variant Code",CurrentItem."Variant Filter");
            PurchaseLine.SETFILTER("Location Code",CurrentItem."Location Filter");
            PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
            IF EDIDocument."Expected Receipt Date Formula" <> "0DF" THEN
              PurchaseLine.SETFILTER(
                "Expected Receipt Date",'>=%1',CALCDATE(EDIDocument."Expected Receipt Date Formula",TODAY));
            IF PurchaseLine.FIND('-') THEN
              EarliestReceiptDate := PurchaseLine."Expected Receipt Date";
            IF EDIDocument."Expected Receipt Date Formula" <> "0DF" THEN BEGIN
              LocationReceiptQty := 0;
              IF EarliestReceiptDate = 0D THEN
                LocationReceiptQty := 0
              ELSE BEGIN
                PurchaseLine.RESET;
                PurchaseLine.SETCURRENTKEY(
                  Type,"No.","Variant Code","Drop Shipment","Location Code","Document Type",
                  "Expected Receipt Date");
                PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
                PurchaseLine.SETRANGE("No.",CurrentItem."No.");
                PurchaseLine.SETFILTER("Variant Code",CurrentItem."Variant Filter");
                PurchaseLine.SETFILTER("Location Code",CurrentItem."Location Filter");
                PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
                PurchaseLine.SETFILTER(
                  "Expected Receipt Date",'>=%1',CALCDATE(EDIDocument."Expected Receipt Date Formula",TODAY));
                IF PurchaseLine.FIND('-') THEN
                  REPEAT
                    LocationReceiptQty := LocationReceiptQty + PurchaseLine.Quantity;
                  UNTIL PurchaseLine.NEXT = 0;
                IF EDIDocument."Receipt Quantity %" <> 0 THEN
                  LocationReceiptQty :=
                    ROUND(LocationReceiptQty * (EDIDocument."Receipt Quantity %" / 100),1,'=');
              END;
            END;
        END;

        Finished := TRUE;
        UnAssignedQuantity := 0;
        ItemTrackingFound := FALSE;
        IF (CurrentItem."Item Tracking Code" <> '') AND (EDIDocument."Item Tracking Required") THEN
          IF ItemTrackingCode.GET(CurrentItem."Item Tracking Code") THEN BEGIN
            ItemLedgerEntry.SETCURRENTKEY(
              "Item No.",Open,"Variant Code",Positive,"Location Code",
              "Posting Date","Expiration Date","Lot No.","Serial No.");
            ItemLedgerEntry.SETRANGE("Item No.",CurrentItem."No.");
            ItemLedgerEntry.SETRANGE("Variant Code",CurrentItem."Variant Filter");
            ItemLedgerEntry.SETRANGE(Open,TRUE);
            ItemLedgerEntry.SETRANGE(Positive,TRUE);
            IF ItemLedgerEntry.FIND('-') THEN BEGIN
              IF EDIDocument."Available Quantity by Location" THEN
                UnAssignedQuantity := LocationQty
              ELSE
                UnAssignedQuantity := AvailableQty;
              InventoryAdviceLine.RESET;
              InventoryAdviceLine.SETRANGE("Inventory Advice No.",DocumentNo);
              IF InventoryAdviceLine.FIND('+') THEN
                LineNo := InventoryAdviceLine."Line No." + 10000
              ELSE
                LineNo := 10000;
              InventoryAdviceLine.INIT;
              InventoryAdviceLine.RESET;
              InventoryAdviceLine."Line No." := LineNo;
              InventoryAdviceLine."Inventory Advice No." := DocumentNo;
              InventoryAdviceLine.VALIDATE("No.",CurrentItem."No.");
              InventoryAdviceLine.Type := InventoryAdviceLine.Type::"  ";
              REPEAT
                ItemTrackingFound := TRUE;
                InventoryAdviceLine.RESET;
                InventoryAdviceLine.SETRANGE("Inventory Advice No.",DocumentNo);
                IF InventoryAdviceLine.FIND('+') THEN
                  LineNo := InventoryAdviceLine."Line No." + 10000
                ELSE
                  LineNo := 10000;
                InventoryAdviceLine.INIT;
                InventoryAdviceLine.RESET;
                InventoryAdviceLine."Line No." := LineNo;
                InventoryAdviceLine."Inventory Advice No." := DocumentNo;
                InventoryAdviceLine.VALIDATE("No.",CurrentItem."No.");
                InventoryAdviceLine.VALIDATE("Variant Code",TmpQuoteLine."Variant Code");
                InventoryAdviceLine.Type := InventoryAdviceHdr.Type;
                IF (EDIDocument."Export Zero at or Below Value" <> 0) THEN
                  IF UnAssignedQuantity <= EDIDocument."Export Zero at or Below Value" THEN
                    UnAssignedQuantity := 0;
                IF UnAssignedQuantity <> 0 THEN BEGIN
                  IF ItemLedgerEntry."Remaining Quantity" < UnAssignedQuantity THEN BEGIN
                    UnAssignedQuantity := UnAssignedQuantity - ItemLedgerEntry."Remaining Quantity";
                    Finished := FALSE;
                    InventoryAdviceLine.VALIDATE(
                      "Quantity Available for Sale",ItemLedgerEntry."Remaining Quantity");
                  END ELSE BEGIN
                    InventoryAdviceLine.VALIDATE("Quantity Available for Sale",UnAssignedQuantity);
                    UnAssignedQuantity := 0;
                    Finished := TRUE;
                  END;
                  IF LocationReceiptQty <> 0 THEN BEGIN
                    InventoryAdviceLine.VALIDATE("Expected Receipt Quantity",LocationReceiptQty);
                    IF EarliestReceiptDate <> 0D THEN
                      InventoryAdviceLine."Expected Availability Date" := EarliestReceiptDate;
                  END ELSE BEGIN
                    IF ExpectedReceiptQty <> 0 THEN
                      InventoryAdviceLine.VALIDATE("Expected Receipt Quantity",ExpectedReceiptQty);
                    IF ExpectedDate <> 0D THEN
                      InventoryAdviceLine."Expected Availability Date" := ExpectedDate;
                  END;
                  InventoryAdviceLine.VALIDATE("Lot No.",ItemLedgerEntry."Lot No.");
                  InventoryAdviceLine.VALIDATE("Serial No.",ItemLedgerEntry."Serial No.");
                  InventoryAdviceLine."Expiration Date" := ItemLedgerEntry."Expiration Date";
                  InventoryAdviceLine."Unit Price" := TmpQuoteLine."Line Amount";
                  IF LastUOM = '' THEN
                    InventoryAdviceLine.VALIDATE(
                      "Unit of Measure Code",CurrentItem."Sales Unit of Measure")
                  ELSE
                    InventoryAdviceLine.VALIDATE("Unit of Measure Code",LastUOM);
                  InventoryAdviceLine."EDI Unit of Measure" :=
                    TradePartnerUnitOfMeasure."EDI Unit of Measure";
                  InventoryAdviceLine."EDI Trade Partner Item" := TradePartnerItem."Partner Item No.";
                  InventoryAdviceLine."EDI Variant Code" := TradePartnerItem."Partner Variant Code";
                  InventoryAdviceLine.INSERT;
                END ELSE BEGIN
                  Finished := TRUE;
                  ItemTrackingFound := FALSE;
                END;
              UNTIL (ItemLedgerEntry.NEXT = 0) OR (Finished);
            END;
          END;

        IF NOT ItemTrackingFound THEN BEGIN
          InventoryAdviceLine.RESET;
          InventoryAdviceLine.SETRANGE("Inventory Advice No.",DocumentNo);
          IF InventoryAdviceLine.FIND('+') THEN
            LineNo := InventoryAdviceLine."Line No." + 10000
          ELSE
            LineNo := 10000;
          InventoryAdviceLine.INIT;
          InventoryAdviceLine.RESET;
          InventoryAdviceLine."Line No." := LineNo;
          InventoryAdviceLine."Inventory Advice No." := DocumentNo;
          InventoryAdviceLine.VALIDATE("No.",CurrentItem."No.");
          IF TmpQuoteLine."Variant Code" <> '' THEN
            InventoryAdviceLine.VALIDATE("Variant Code",TmpQuoteLine."Variant Code");
          InventoryAdviceLine.Type := InventoryAdviceHdr.Type;
          IF (EDIDocument."Export Zero at or Below Value" <> 0) THEN BEGIN
            IF LocationQty <= EDIDocument."Export Zero at or Below Value" THEN
              LocationQty := 0;
            IF AvailableQty <= EDIDocument."Export Zero at or Below Value" THEN
              AvailableQty := 0;
          END;
          IF QtyByLocation THEN BEGIN
            IF LocationQty >= 0 THEN
              InventoryAdviceLine.VALIDATE("Quantity Available for Sale",LocationQty)
            ELSE
              IF AvailableQty <> 0 THEN
                InventoryAdviceLine.VALIDATE("Quantity Available for Sale",AvailableQty);
          END ELSE
            IF AvailableQty <> 0 THEN
              InventoryAdviceLine.VALIDATE("Quantity Available for Sale",AvailableQty);

          InventoryAdviceLine."Quantity Available for Sale" := WhseCreatePick.QtyAvailtoPick(InventoryAdviceLine."No.",'1'); //<TPZ2682>
          InventoryAdviceLine."Quantity Available for Sale" := InventoryAdviceLine."Quantity Available for Sale" * 0.9; //<TPZ2682>

          IF ReceiptQtyByLocation THEN BEGIN
            IF LocationReceiptQty <> 0 THEN BEGIN
              InventoryAdviceLine.VALIDATE("Expected Receipt Quantity",LocationReceiptQty);
              IF EarliestReceiptDate <> 0D THEN
                InventoryAdviceLine."Expected Availability Date" := EarliestReceiptDate;
            END;
          END ELSE BEGIN
            IF ExpectedReceiptQty <> 0 THEN
              InventoryAdviceLine.VALIDATE("Expected Receipt Quantity",ExpectedReceiptQty);
            IF ExpectedDate <> 0D THEN
              InventoryAdviceLine."Expected Availability Date" := ExpectedDate;
          END;
          InventoryAdviceLine."Unit Price" := TmpQuoteLine."Line Amount";
          IF LastUOM = '' THEN
            InventoryAdviceLine.VALIDATE("Unit of Measure Code",CurrentItem."Sales Unit of Measure")
          ELSE
            InventoryAdviceLine.VALIDATE("Unit of Measure Code",LastUOM);
          InventoryAdviceLine."EDI Unit of Measure" := TradePartnerUnitOfMeasure."EDI Unit of Measure";
          InventoryAdviceLine."EDI Trade Partner Item" := TradePartnerItem."Partner Item No.";
          InventoryAdviceLine."EDI Variant Code" := TradePartnerItem."Partner Variant Code";
          InventoryAdviceLine.INSERT;
        END;
      END ELSE BEGIN
        // Price Catalog Lines
        InventoryAdviceLine.RESET;
        InventoryAdviceLine.SETRANGE("Inventory Advice No.",DocumentNo);
        IF InventoryAdviceLine.FIND('+') THEN
          LineNo := InventoryAdviceLine."Line No." + 10000
        ELSE
          LineNo := 10000;

        InventoryAdviceLine.INIT;
        InventoryAdviceLine.RESET;
        InventoryAdviceLine.Type := InventoryAdviceHdr.Type;
        InventoryAdviceLine."Line No." := LineNo;
        InventoryAdviceLine."Inventory Advice No." := DocumentNo;
        InventoryAdviceLine.VALIDATE("No.",CurrentItem."No.");
        IF TmpQuoteLine."Variant Code" <> '' THEN
          InventoryAdviceLine.VALIDATE("Variant Code",TmpQuoteLine."Variant Code");
        InventoryAdviceLine."Unit Price" := TmpQuoteLine."Line Amount";
          IF LastUOM = '' THEN
            InventoryAdviceLine.VALIDATE("Unit of Measure Code",CurrentItem."Sales Unit of Measure")
          ELSE
            InventoryAdviceLine.VALIDATE("Unit of Measure Code",LastUOM);
          InventoryAdviceLine."EDI Unit of Measure" := TradePartnerUnitOfMeasure."EDI Unit of Measure";
          InventoryAdviceLine."EDI Trade Partner Item" := TradePartnerItem."Partner Item No.";
          InventoryAdviceLine."EDI Variant Code" := TradePartnerItem."Partner Variant Code";
          IF SalesPrice."Starting Date" = 0D THEN
            InventoryAdviceLine."Start Date" := TODAY;
          InventoryAdviceLine."End Date" := SalesPrice."Ending Date";
          InventoryAdviceLine.INSERT;
      END;
      ItemTrackingFound := FALSE;
      LastUOM := '';

      EXIT(TRUE);
    END;

    PROCEDURE ICRLookupItem@1240020000(VAR CurrentItem@1240020006 : Record 27;VAR EDIDocument@1240020007 : Record 14002353;InventoryAdviceNo@1240030000 : Code[10];CrossRefTypeNo@1240030001 : ' ,Customer,Blank';ExpectedDate@1240020008 : Date;AvailableQty@1240020011 : Decimal;ExpectedReceiptQty@1240020012 : Decimal) : Boolean;
    VAR
      PurchaseLine@1240020004 : Record 39;
      InventoryAdviceHdr@1240020019 : Record 14002413;
      LocationQty@1240020001 : Decimal;
      LocationReceiptQty@1240020003 : Decimal;
      AllocatedQty@1240020000 : Decimal;
      UnAssignedQuantity@1240020014 : Decimal;
      EarliestReceiptDate@1240020005 : Date;
      QtyByLocation@1240020009 : Boolean;
      ReceiptQtyByLocation@1240020010 : Boolean;
      ItemTrackingFound@1240020015 : Boolean;
      Finished@1240020013 : Boolean;
    BEGIN
      CASE EDIDocument."Navision Document" OF
        'E_INVADV':
          BEGIN
            InventoryAdviceHdr.GET(InventoryAdviceNo,InventoryAdviceHdr.Type::"  ");
            InventoryAdvice := TRUE;
          END;
        'E_PRICAT':
          BEGIN
            InventoryAdviceHdr.GET(InventoryAdviceNo,InventoryAdviceHdr.Type::"Price Catalog");
            PriceCatalog := TRUE;
          END;
        END;

      CurrentItem.CALCFIELDS(
        Inventory,"Qty. on Sales Order","Qty. on Purch. Order","Qty. on Service Order",
        "Qty. on Component Lines","Qty. on Asm. Component");

      LocationQty := 0;
      AllocatedQty := 0;
      LocationReceiptQty := 0;
      LineNo := 0;
      EarliestReceiptDate := 0D;
      QtyByLocation := FALSE;
      ReceiptQtyByLocation := FALSE;

      WITH ItemCrossReference DO BEGIN
        RESET;
        SETFILTER("Cross-Reference Type",'<> %1',"Cross-Reference Type"::Vendor);
        SETFILTER("Item No.",CurrentItem."No.");
        SETRANGE("Discontinue Bar Code",FALSE);
        IF CrossRefTypeNo = CrossRefTypeNo::Customer THEN
          SETRANGE("Cross-Reference Type No.",InventoryAdviceHdr."Sell-to Customer No.")
        ELSE
          SETRANGE("Cross-Reference Type No.",'');
        IF FIND('-') THEN
          REPEAT
            IF "Variant Code" <> '' THEN BEGIN
              CurrentItem.SETRANGE("Variant Filter","Variant Code");
              CurrentItem.CALCFIELDS(
                Inventory,"Qty. on Sales Order","Qty. on Purch. Order","Qty. on Service Order",
                "Qty. on Component Lines","Qty. on Asm. Component");
            END;
            TmpQuoteHeader.SetEDITemp(TRUE);
            TmpQuoteHeader."Document Type" := TmpQuoteHeader."Document Type"::Quote;
            TmpQuoteHeader."No." := InventoryAdviceHdr."No.";
            TmpQuoteHeader."Order Date" := WORKDATE;
            TmpQuoteHeader."Posting Date" := WORKDATE;
            TmpQuoteHeader."Document Date" := WORKDATE;
            TmpQuoteHeader.VALIDATE(
              "Sell-to Customer No.",InventoryAdviceHdr."Sell-to Customer No.");
            IF InventoryAdviceHdr."Location Code" <> '' THEN
              TmpQuoteHeader.VALIDATE("Location Code",InventoryAdviceHdr."Location Code");
            TmpQuoteLine.SetEDITemp(TRUE);
            TmpQuoteLine."Document Type" := TmpQuoteHeader."Document Type";
            TmpQuoteLine."Document No." := TmpQuoteHeader."No.";
            TmpQuoteLine.SetSalesHeader(TmpQuoteHeader);
            TmpQuoteLine."Sell-to Customer No." := TmpQuoteHeader."Sell-to Customer No.";
            TmpQuoteLine.VALIDATE(Type,TmpQuoteLine.Type::Item);
            TmpQuoteLine.VALIDATE("No.",CurrentItem."No.");
            TmpQuoteLine.VALIDATE("Tax Liable",FALSE);
            TmpQuoteLine.VALIDATE("Variant Code",CurrentItem."Variant Filter");
            IF InventoryAdviceHdr."Location Code" <> '' THEN
              TmpQuoteLine.VALIDATE("Location Code",TmpQuoteHeader."Location Code");
            IF ItemCrossReference."Unit of Measure" <> '' THEN
              TmpQuoteLine.VALIDATE("Unit of Measure Code",ItemCrossReference."Unit of Measure");
            TmpQuoteLine.VALIDATE(Quantity,1);
            TmpQuoteHeader.SetEDITemp(FALSE);
            TmpQuoteLine.SetEDITemp(FALSE);

            IF InventoryAdvice THEN BEGIN
              IF EDIDocument."Available Quantity by Location" THEN BEGIN
                QtyByLocation := TRUE;
               IF (EDIDocument."Quantity on Sales Order" = FALSE) AND
                   (EDIDocument."Quantity on Component Lines" = FALSE)  AND
                   (EDIDocument."Quantity on Asm. Component" = FALSE) AND
                   (EDIDocument."Quantity on Service Order" = FALSE)
                THEN
                  LocationQty := CurrentItem.Inventory
                ELSE BEGIN
                  IF EDIDocument."Quantity on Sales Order" THEN
                    AllocatedQty := AllocatedQty + CurrentItem."Qty. on Sales Order";
                  IF EDIDocument."Quantity on Component Lines" THEN
                    AllocatedQty := AllocatedQty + CurrentItem."Qty. on Component Lines";
                  IF EDIDocument."Quantity on Asm. Component" THEN
                    AllocatedQty := AllocatedQty + CurrentItem."Qty. on Asm. Component";
                  IF EDIDocument."Quantity on Service Order" THEN
                    AllocatedQty := AllocatedQty + CurrentItem."Qty. on Service Order";
                  LocationQty := CurrentItem.Inventory - AllocatedQty;
                END;
                IF (EDIDocument."Available Quantity %" <> 0) AND (LocationQty > 0) THEN
                  LocationQty :=
                    ROUND(LocationQty * (EDIDocument."Available Quantity %" / 100),1,'=');
              END;

              IF EDIDocument."Receipt Quantity by Location" THEN BEGIN
                ReceiptQtyByLocation := TRUE;
                LocationReceiptQty := CurrentItem."Qty. on Purch. Order";
                IF EDIDocument."Receipt Quantity %" <> 0 THEN
                  LocationReceiptQty :=
                    ROUND(LocationReceiptQty * (EDIDocument."Receipt Quantity %" / 100),1,'=');

                PurchaseLine.RESET;
                PurchaseLine.SETCURRENTKEY(
                  Type,"No.","Variant Code","Drop Shipment","Location Code","Document Type",
                  "Expected Receipt Date");
                PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
                PurchaseLine.SETRANGE("No.",CurrentItem."No.");
                PurchaseLine.SETFILTER("Variant Code",CurrentItem."Variant Filter");
                PurchaseLine.SETFILTER("Location Code",CurrentItem."Location Filter");
                PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
                IF EDIDocument."Expected Receipt Date Formula" <> "0DF" THEN
                  PurchaseLine.SETFILTER(
                    "Expected Receipt Date",'>=%1',CALCDATE(EDIDocument."Expected Receipt Date Formula",TODAY));
                IF PurchaseLine.FIND('-') THEN
                  EarliestReceiptDate := PurchaseLine."Expected Receipt Date";
                IF EDIDocument."Expected Receipt Date Formula" <> "0DF" THEN BEGIN
                  LocationReceiptQty := 0;
                  IF EarliestReceiptDate = 0D THEN
                    LocationReceiptQty := 0
                  ELSE BEGIN
                    PurchaseLine.RESET;
                    PurchaseLine.SETCURRENTKEY(
                      Type,"No.","Variant Code","Drop Shipment","Location Code","Document Type",
                      "Expected Receipt Date");
                    PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
                    PurchaseLine.SETRANGE("No.",CurrentItem."No.");
                    PurchaseLine.SETFILTER("Variant Code",CurrentItem."Variant Filter");
                    PurchaseLine.SETFILTER("Location Code",CurrentItem."Location Filter");
                    PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
                    PurchaseLine.SETFILTER(
                      "Expected Receipt Date",'>=%1',CALCDATE(EDIDocument."Expected Receipt Date Formula",TODAY));
                    IF PurchaseLine.FIND('-') THEN
                      REPEAT
                        LocationReceiptQty := LocationReceiptQty + PurchaseLine.Quantity;
                      UNTIL PurchaseLine.NEXT = 0;
                    IF EDIDocument."Receipt Quantity %" <> 0 THEN
                      LocationReceiptQty :=
                        ROUND(LocationReceiptQty * (EDIDocument."Receipt Quantity %" / 100),1,'=');
                  END;
                END;
              END;

              Finished := TRUE;
              UnAssignedQuantity := 0;
              ItemTrackingFound := FALSE;
              IF (CurrentItem."Item Tracking Code" <> '') AND
                 (EDIDocument."Item Tracking Required")
              THEN
                IF ItemTrackingCode.GET(CurrentItem."Item Tracking Code") THEN BEGIN
                  ItemLedgerEntry.SETCURRENTKEY(
                    "Item No.",Open,"Variant Code",Positive,"Location Code",
                    "Posting Date","Expiration Date","Lot No.","Serial No.");
                  ItemLedgerEntry.SETRANGE("Item No.",CurrentItem."No.");
                  ItemLedgerEntry.SETRANGE("Variant Code",CurrentItem."Variant Filter");
                  ItemLedgerEntry.SETRANGE(Open,TRUE);
                  ItemLedgerEntry.SETRANGE(Positive,TRUE);
                  IF ItemLedgerEntry.FIND('-') THEN BEGIN
                    IF EDIDocument."Available Quantity by Location" THEN
                      UnAssignedQuantity := LocationQty
                    ELSE
                      UnAssignedQuantity := AvailableQty;
                    REPEAT
                      ItemTrackingFound := TRUE;
                      InventoryAdviceLine.RESET;
                      InventoryAdviceLine.SETRANGE("Inventory Advice No.",InventoryAdviceNo);
                      InventoryAdviceLine.SETRANGE(Type,InventoryAdviceHdr.Type);
                      IF InventoryAdviceLine.FIND('+') THEN
                        LineNo := InventoryAdviceLine."Line No." + 10000
                      ELSE
                        LineNo := 10000;

                      InventoryAdviceLine.INIT;
                      InventoryAdviceLine."Line No." := LineNo;
                      InventoryAdviceLine."Inventory Advice No." := InventoryAdviceNo;
                      InventoryAdviceLine.Type := InventoryAdviceHdr.Type;
                      InventoryAdviceLine.VALIDATE("No.",CurrentItem."No.");

                      IF (EDIDocument."Export Zero at or Below Value" <> 0) THEN
                        IF UnAssignedQuantity <= EDIDocument."Export Zero at or Below Value" THEN
                          UnAssignedQuantity := 0;
                      IF UnAssignedQuantity <> 0 THEN BEGIN
                        IF ItemLedgerEntry."Remaining Quantity" < UnAssignedQuantity THEN BEGIN
                          UnAssignedQuantity :=
                            UnAssignedQuantity - ItemLedgerEntry."Remaining Quantity";
                        Finished := FALSE;
                        InventoryAdviceLine.VALIDATE(
                          "Quantity Available for Sale",ItemLedgerEntry."Remaining Quantity");
                        END ELSE BEGIN
                          InventoryAdviceLine.VALIDATE(
                            "Quantity Available for Sale",UnAssignedQuantity);
                          UnAssignedQuantity := 0;
                          Finished := TRUE;
                        END;

                        IF LocationReceiptQty <> 0 THEN BEGIN
                          InventoryAdviceLine.VALIDATE(
                            "Expected Receipt Quantity",LocationReceiptQty);
                          IF EarliestReceiptDate <> 0D THEN
                            InventoryAdviceLine."Expected Availability Date" := EarliestReceiptDate;
                        END ELSE BEGIN
                          IF ExpectedReceiptQty <> 0 THEN
                            InventoryAdviceLine.VALIDATE(
                              "Expected Receipt Quantity",ExpectedReceiptQty);
                          IF ExpectedDate <> 0D THEN
                            InventoryAdviceLine."Expected Availability Date" := ExpectedDate;
                        END;
                        InventoryAdviceLine.VALIDATE("Serial No.",ItemLedgerEntry."Serial No.");
                        InventoryAdviceLine.VALIDATE("Lot No.",ItemLedgerEntry."Lot No.");
                        InventoryAdviceLine."Expiration Date" := ItemLedgerEntry."Expiration Date";
                        InventoryAdviceLine."Unit Price" := TmpQuoteLine."Line Amount";
                        InventoryAdviceLine.INSERT;
                        IF ItemCrossReference."Variant Code" <> '' THEN
                          InventoryAdviceLine.VALIDATE(
                            "Variant Code",ItemCrossReference."Variant Code");
                        IF ItemCrossReference."Unit of Measure" <> '' THEN
                          InventoryAdviceLine."Unit of Measure Code" :=
                            ItemCrossReference."Unit of Measure";
                        InventoryAdviceLine."Unit of Measure (Cross Ref.)":=
                          ItemCrossReference."Unit of Measure";
                        InventoryAdviceLine."Cross-Reference Type" :=
                          ItemCrossReference."Cross-Reference Type";
                        InventoryAdviceLine."Cross-Reference Type No." :=
                          ItemCrossReference."Cross-Reference Type No.";
                        InventoryAdviceLine."Cross-Reference No." :=
                          ItemCrossReference."Cross-Reference No.";
                        InventoryAdviceLine.Discontinued := ItemCrossReference."Discontinue Bar Code";
                        IF ItemCrossReference.Description <> '' THEN
                          InventoryAdviceLine.Description := ItemCrossReference.Description
                        ELSE
                          InventoryAdviceLine.Description := Item.Description;
                        InventoryAdviceLine.MODIFY;
                      END ELSE BEGIN
                        Finished := TRUE;
                        ItemTrackingFound := FALSE;
                      END;
                    UNTIL (ItemLedgerEntry.NEXT = 0) OR (Finished);
                  END;
                END;

              IF NOT ItemTrackingFound THEN BEGIN
                InventoryAdviceLine.RESET;
                InventoryAdviceLine.SETRANGE("Inventory Advice No.",InventoryAdviceNo);
                InventoryAdviceLine.SETRANGE(Type,InventoryAdviceHdr.Type);
                IF InventoryAdviceLine.FIND('+') THEN
                  LineNo := InventoryAdviceLine."Line No." + 10000
                ELSE
                  LineNo := 10000;

                InventoryAdviceLine.INIT;
                InventoryAdviceLine.RESET;
                InventoryAdviceLine."Line No." := LineNo;
                InventoryAdviceLine."Inventory Advice No." := InventoryAdviceNo;
                InventoryAdviceLine.Type := InventoryAdviceHdr.Type;
                InventoryAdviceLine.VALIDATE("No.",CurrentItem."No.");
                IF (EDIDocument."Export Zero at or Below Value" <> 0) THEN BEGIN
                  IF LocationQty <= EDIDocument."Export Zero at or Below Value" THEN
                    LocationQty := 0;
                  IF AvailableQty <= EDIDocument."Export Zero at or Below Value" THEN
                    AvailableQty := 0;
                END;
                IF QtyByLocation THEN BEGIN
                  IF LocationQty >= 0 THEN
                    InventoryAdviceLine.VALIDATE("Quantity Available for Sale",LocationQty)
                  ELSE
                    IF AvailableQty <> 0 THEN
                      InventoryAdviceLine.VALIDATE("Quantity Available for Sale",AvailableQty);
                END ELSE
                  IF AvailableQty <> 0 THEN
                    InventoryAdviceLine.VALIDATE("Quantity Available for Sale",AvailableQty);
                IF ReceiptQtyByLocation THEN BEGIN
                  IF LocationReceiptQty <> 0 THEN BEGIN
                    InventoryAdviceLine.VALIDATE("Expected Receipt Quantity",LocationReceiptQty);
                    IF EarliestReceiptDate <> 0D THEN
                      InventoryAdviceLine."Expected Availability Date" := EarliestReceiptDate;
                  END;
                END ELSE BEGIN
                  IF ExpectedReceiptQty <> 0 THEN
                    InventoryAdviceLine.VALIDATE("Expected Receipt Quantity",ExpectedReceiptQty);
                  IF ExpectedDate <> 0D THEN
                    InventoryAdviceLine."Expected Availability Date" := ExpectedDate;
                END;
                InventoryAdviceLine."Unit Price" := TmpQuoteLine."Line Amount";
                IF ItemCrossReference."Variant Code" <> '' THEN
                  InventoryAdviceLine.VALIDATE("Variant Code",ItemCrossReference."Variant Code");
                  IF ItemCrossReference."Unit of Measure" <> '' THEN
                    InventoryAdviceLine."Unit of Measure Code" := ItemCrossReference."Unit of Measure";
                  InventoryAdviceLine."Unit of Measure (Cross Ref.)":= ItemCrossReference."Unit of Measure";
                  InventoryAdviceLine."Cross-Reference Type" := ItemCrossReference."Cross-Reference Type";
                  InventoryAdviceLine."Cross-Reference Type No." := ItemCrossReference."Cross-Reference Type No.";
                  InventoryAdviceLine."Cross-Reference No." := ItemCrossReference."Cross-Reference No.";
                  InventoryAdviceLine.Discontinued := ItemCrossReference."Discontinue Bar Code";
                  IF ItemCrossReference.Description <> '' THEN
                    InventoryAdviceLine.Description := ItemCrossReference.Description
                  ELSE
                    InventoryAdviceLine.Description := Item.Description;
                  InventoryAdviceLine.INSERT;
              END;
            END ELSE BEGIN
              // Price Catalog Lines
              InventoryAdviceLine.RESET;
              InventoryAdviceLine.SETRANGE("Inventory Advice No.",InventoryAdviceNo);
              InventoryAdviceLine.SETRANGE(Type,InventoryAdviceHdr.Type);
              IF InventoryAdviceLine.FIND('+') THEN
                LineNo := InventoryAdviceLine."Line No." + 10000
              ELSE
                LineNo := 10000;

              InventoryAdviceLine.INIT;
              InventoryAdviceLine.RESET;
              InventoryAdviceLine."Line No." := LineNo;
              InventoryAdviceLine."Inventory Advice No." := InventoryAdviceNo;
              InventoryAdviceLine.Type := InventoryAdviceHdr.Type;
              InventoryAdviceLine.VALIDATE("No.",CurrentItem."No.");
              InventoryAdviceLine."Unit Price" := TmpQuoteLine."Line Amount";
              IF ItemCrossReference."Variant Code" <> '' THEN
                InventoryAdviceLine.VALIDATE("Variant Code",ItemCrossReference."Variant Code");
                IF ItemCrossReference."Unit of Measure" <> '' THEN
                  InventoryAdviceLine."Unit of Measure Code" := ItemCrossReference."Unit of Measure";
                InventoryAdviceLine."Unit of Measure (Cross Ref.)":= ItemCrossReference."Unit of Measure";
                InventoryAdviceLine."Cross-Reference Type" := ItemCrossReference."Cross-Reference Type";
                InventoryAdviceLine."Cross-Reference Type No." := ItemCrossReference."Cross-Reference Type No.";
                InventoryAdviceLine."Cross-Reference No." := ItemCrossReference."Cross-Reference No.";
                InventoryAdviceLine.Discontinued := ItemCrossReference."Discontinue Bar Code";
                IF ItemCrossReference.Description <> '' THEN
                  InventoryAdviceLine.Description := ItemCrossReference.Description
                ELSE
                  InventoryAdviceLine.Description := Item.Description;
                IF SalesPrice."Starting Date"= 0D THEN
                  InventoryAdviceLine."Start Date" := TODAY;
                InventoryAdviceLine."End Date" := SalesPrice."Ending Date";
                InventoryAdviceLine.INSERT;
            END;
          UNTIL ItemCrossReference.NEXT = 0;
      END;

      ItemTrackingFound := FALSE;

      EXIT(TRUE);
    END;

    PROCEDURE GetSalesPrice@1240020001();
    BEGIN
      SalesPrice.INIT;
      WITH TmpQuoteLine DO
        IF (Type = Type::Item) AND Item.GET("No.") THEN BEGIN
          SalesPriceCalcMgt.FindSalesPrice(
            SalesPrice,"Bill-to Customer No.",TmpQuoteHeader."Bill-to Contact No.",
            "Customer Price Group",'',"No.","Variant Code","Unit of Measure Code",
            TmpQuoteHeader."Currency Code",TmpQuoteHeader."Order Date",TRUE);
          SalesPrice.COPY(SalesPrice);
        END;
    END;

    PROCEDURE CreateInvtAdvice@1240020004(Customer@1240020003 : Record 18;EDITradePartner@1240020001 : Record 14002360;EDIDocument@1240020002 : Record 14002353) DocNo : Code[20];
    VAR
      DocType@1240020000 : '  ,Location,Adjustment,Price Catalog';
      ReuseAdvice@1240020004 : Boolean;
    BEGIN
      EDISetup.GET;
      EDISetup.TESTFIELD("Inventory Advice Nos.");

      ReuseAdvice := FALSE;
      IF EDIDocument."Reuse Existing InventoryAdvice" THEN BEGIN
        InventoryAdviceHdr.RESET;
        InventoryAdviceHdr.SETCURRENTKEY("Trade Partner No.","EDI Internal Doc. No.");
        InventoryAdviceHdr.SETRANGE("Trade Partner No.",EDITradePartner."No.");
        InventoryAdviceHdr.SETRANGE("Sell-to Customer No.",Customer."No.");
        InventoryAdviceHdr.SETRANGE(Type,InventoryAdviceHdr.Type::"  ");
        InventoryAdviceHdr.SETRANGE(Posted,FALSE);
        IF InventoryAdviceHdr.FIND('+') THEN BEGIN
          InventoryAdviceHdr.TESTFIELD(Released,FALSE);
          ReuseAdvice := TRUE;
          DocNo := InventoryAdviceHdr."No.";
          ClearAdviceLines(InventoryAdviceHdr);
        END ELSE
          ReuseAdvice := FALSE;
      END ELSE
        ReuseAdvice := FALSE;
      IF ReuseAdvice = FALSE THEN
        DocNo := InventoryAdviceHdr.CreateInventoryDocHdr(DocType);
      IF InventoryAdviceHdr.GET(DocNo,DocType) THEN BEGIN
        IF ReuseAdvice THEN BEGIN
          InventoryAdviceHdr.VALIDATE("Document Date",TODAY);
          InventoryAdviceHdr.MODIFY;
        END ELSE BEGIN
          InventoryAdviceHdr.VALIDATE("Sell-to Customer No.",Customer."No.");
          InventoryAdviceHdr.VALIDATE("Trade Partner No.",EDITradePartner."No.");
          InventoryAdviceHdr.VALIDATE("Location Code",'1');//<TPZ2682>
          InventoryAdviceHdr.MODIFY;
        END;
        InventoryAdviceHdr.SetAdviceStatus(InventoryAdviceHdr,EDIDocument);
        InventoryAdviceHdr.MODIFY;
      END;

      EXIT(DocNo);
    END;

    PROCEDURE CreatePriceCatalog@1240020003(Customer@1240020002 : Record 18;EDITradePartner@1240020006 : Record 14002360;EDIDocument@1240020007 : Record 14002353;CatalogAdditionEntry@1240020003 : Boolean;CatalogDeletionEntry@1240020004 : Boolean) DocumentNo : Code[10];
    VAR
      InventoryAdviceHdr@1240020005 : Record 14002413;
      CatalogSequence@1240020000 : Code[20];
      DocType@1240020001 : '  ,Location,Adjustment,Price Catalog';
      ReuseAdvice@1240020008 : Boolean;
    BEGIN
      EDISetup.GET;
      EDISetup.TESTFIELD("Price Catalog Nos.");

      ReuseAdvice := FALSE;
      IF EDIDocument."Reuse Existing InventoryAdvice" THEN BEGIN
        InventoryAdviceHdr.RESET;
        InventoryAdviceHdr.SETCURRENTKEY("Trade Partner No.","EDI Internal Doc. No.");
        InventoryAdviceHdr.SETRANGE("Trade Partner No.",EDITradePartner."No.");
        InventoryAdviceHdr.SETRANGE("Sell-to Customer No.",Customer."No.");
        InventoryAdviceHdr.SETRANGE(Type,InventoryAdviceHdr.Type::"Price Catalog");
        InventoryAdviceHdr.SETRANGE(Posted,FALSE);
        IF InventoryAdviceHdr.FIND('+') THEN BEGIN
          InventoryAdviceHdr.TESTFIELD(Released,FALSE);
          ReuseAdvice := TRUE;
          DocumentNo := InventoryAdviceHdr."No.";
          ClearAdviceLines(InventoryAdviceHdr);
        END ELSE
          ReuseAdvice := FALSE;
      END ELSE
        ReuseAdvice := FALSE;
      IF ReuseAdvice = FALSE THEN
        DocumentNo := InventoryAdviceHdr.CreateInventoryDocHdr(DocType::"Price Catalog");
      IF InventoryAdviceHdr.GET(DocumentNo,DocType::"Price Catalog") THEN BEGIN
        IF ReuseAdvice THEN BEGIN
          InventoryAdviceHdr.VALIDATE("Document Date",TODAY);
          InventoryAdviceHdr.MODIFY;
        END ELSE BEGIN
          InventoryAdviceHdr.VALIDATE("Sell-to Customer No.",Customer."No.");
          InventoryAdviceHdr.VALIDATE("Trade Partner No.",EDITradePartner."No.");
          InventoryAdviceHdr.MODIFY;
        END;
        GetCatalogSequence(InventoryAdviceHdr,EDIDocument);
        IF CatalogAdditionEntry THEN
          InventoryAdviceHdr."Transaction Purpose Code" :=
            InventoryAdviceHdr."Transaction Purpose Code"::Add;
        IF CatalogDeletionEntry THEN
          InventoryAdviceHdr."Transaction Purpose Code" :=
            InventoryAdviceHdr."Transaction Purpose Code"::Delete;
         InventoryAdviceHdr.MODIFY;
      END;

      EXIT(DocumentNo);
    END;

    PROCEDURE GetCatalogSequence@1240020002(VAR CurrInventoryAdviceHdr@1240020002 : Record 14002413;EDIDocument@1240020003 : Record 14002353) CatVersionNo : Code[15];
    VAR
      CurrEDIDocument@1240020004 : Record 14002353;
      CatalogSequence@1240020001 : Code[15];
    BEGIN
      IF EDIDocument."Price Catalog Version No." <> '' THEN
        WITH EDIDocument DO BEGIN
          CurrInventoryAdviceHdr.GET(CurrInventoryAdviceHdr."No.",CurrInventoryAdviceHdr.Type);

          CurrEDIDocument.GET("Trade Partner No.","Navision Document","EDI Document No.",Version,Type);
          CurrEDIDocument.LOCKTABLE;
          CatalogSequence := INCSTR(CurrEDIDocument."Price Catalog Version No.");
          CurrEDIDocument."Price Catalog Version No." := CatalogSequence;
          CurrEDIDocument.MODIFY;

          CurrInventoryAdviceHdr."Catalog Version No." := CatalogSequence;
          CurrInventoryAdviceHdr.MODIFY;
          COMMIT;
        END;
    END;

    PROCEDURE GetValuesPriceCatalog@1240020008(VAR CurrentItem@1240020005 : Record 27;VAR CurrEDIDocument@1240020004 : Record 14002353;CurrCustomer@1240020006 : Record 18;CurrInventoryAdviceHdr@1240020003 : Record 14002413;CurrExpectedDate@1240020002 : Date;CurrAvailableQty@1240020001 : Decimal;CurrExpectedReceiptQty@1240020000 : Decimal;CurrExceptionCatalogType@1240020007 : ' ,Add,Delete');
    BEGIN
      WITH CurrEDIDocument DO
        EDIDocument.GET("Trade Partner No.","Navision Document","EDI Document No.",Version,Type);
      Item.GET(CurrentItem."No.");
      Customer.GET(CurrCustomer."No.");
      ExpectedDate := CurrExpectedDate;
      AvailableQty := CurrAvailableQty;
      ExpectedReceiptQty := CurrExpectedReceiptQty;
      InventoryAdviceHdr.GET(CurrInventoryAdviceHdr."No.",CurrInventoryAdviceHdr.Type::"Price Catalog");
      ExceptionCatalogType := CurrExceptionCatalogType;
    END;

    PROCEDURE GetValuesInventoryAdvice@1240020006(VAR CurrentItem@1240020005 : Record 27;VAR CurrEDIDocument@1240020004 : Record 14002353;CurrCustomer@1240020006 : Record 18;CurrInventoryAdviceHdr@1240020003 : Record 14002413;CurrExpectedDate@1240020002 : Date;CurrAvailableQty@1240020001 : Decimal;CurrExpectedReceiptQty@1240020000 : Decimal);
    BEGIN
      WITH CurrEDIDocument DO
        EDIDocument.GET("Trade Partner No.","Navision Document","EDI Document No.",Version,Type);
      Item.GET(CurrentItem."No.");
      Customer.GET(CurrCustomer."No.");
      ExpectedDate := CurrExpectedDate;
      AvailableQty := CurrAvailableQty;
      ExpectedReceiptQty := CurrExpectedReceiptQty;
      InventoryAdviceHdr.GET(CurrInventoryAdviceHdr."No.",CurrInventoryAdviceHdr.Type::"  ");
    END;

    PROCEDURE ReleaseInventoryAdvice@1(VAR CurrentInventoryAdvice@1240030000 : Record 14002413);
    VAR
      InventoryAdviceLine@1240020000 : Record 14002414;
      Text001@1240020001 : TextConst 'ENU=Nothing to release on %1 %2.';
    BEGIN
      CurrentInventoryAdvice.GET(CurrentInventoryAdvice."No.",CurrentInventoryAdvice.Type);

      InventoryAdviceLine.RESET;
      InventoryAdviceLine.SETRANGE(Type,CurrentInventoryAdvice.Type);
      InventoryAdviceLine.SETRANGE("Inventory Advice No.",CurrentInventoryAdvice."No.");
      IF NOT InventoryAdviceLine.FIND('-') THEN
        ERROR(Text001,CurrentInventoryAdvice.Type,CurrentInventoryAdvice."No.");

      WITH CurrentInventoryAdvice DO BEGIN
        TESTFIELD(Released,FALSE);
        TESTFIELD("Trade Partner No.");
        TESTFIELD("Document Date");
        Released := TRUE;
        MODIFY;
      END;
    END;

    PROCEDURE ReopenInventoryAdvice@1240030002(VAR CurrentInventoryAdvice@1240030000 : Record 14002413);
    BEGIN
      WITH CurrentInventoryAdvice DO BEGIN
        TESTFIELD(Released,TRUE);
        Released := FALSE;
        IF Posted THEN
          Posted := FALSE;
        MODIFY;
      END;
    END;

    PROCEDURE ClearAdviceLines@1240030005(LocInventoryAdviceHdr@1240020001 : Record 14002413);
    BEGIN
      InventoryAdviceLine.RESET;
      InventoryAdviceLine.SETRANGE("Inventory Advice No.",LocInventoryAdviceHdr."No.");
      InventoryAdviceLine.SETRANGE(Type,LocInventoryAdviceHdr.Type);
      IF InventoryAdviceLine.FIND('-') THEN
        InventoryAdviceLine.DELETEALL;
    END;

    BEGIN
    {
      TPZEDI - Update standard codes to handle Item Blocked option field.
      2019-11-08 TPZ2682 UCHOUHAN
        Added code for wayfair Inventory advice.
      TPZ2785 05112020 GGUPTA Remove Item blocking Topaz Customization
    }
    END.
  }
}

