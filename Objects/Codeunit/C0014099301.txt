OBJECT Codeunit 14099301 E.D.I. XML Document Import
{
  OBJECT-PROPERTIES
  {
    Date=07/13/20;
    Time=12:00:00 PM;
    Version List=SE0.62;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EDISetup@1240030000 : Record 14002367;
      EDITemplate@1240030001 : Record 14002350;
      EDITradePartner@1240030002 : Record 14002360;
      EDIDocument@1240030003 : Record 14002353;
      EDISegment@1240030004 : Record 14002354;
      EDIElement@1240030005 : Record 14002355;
      EDIConditional@1240030006 : Record 14002363;
      EDIRecDocHdrTmp@1240020032 : TEMPORARY Record 14002358;
      EDIRecDocHdr@1240030007 : Record 14002358;
      EDIRecDocFields@1240030008 : Record 14002359;
      EDIRecDocFields4@1240030009 : Record 14002359;
      EDIConditionalSequence@1240020015 : Record 14000374;
      EDIRecDocHdr2@1240020024 : Record 14002358;
      EDIRecDocFields5@1240020029 : Record 14002359;
      CreateEDIAlert@1240020012 : Codeunit 14000375;
      EDIEvaluateXRefSeparately@1240020023 : Codeunit 14050305;
      XmlReader@1240020010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlReader";
      XmlReaderSettings@1240020009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlReaderSettings";
      XmlUrlResolver@1240020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlUrlResolver";
      XmlDtdProcessing@1240020007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.DtdProcessing";
      XmlNodeType@1240020006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeType";
      NetCredentialCache@1240020005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.CredentialCache";
      EntryNo@1240020004 : Integer;
      XMLNode@1240020035 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      EDIFile@1240030015 : File;
      FileName@1240020038 : Text[250];
      CurrentElementName@1240020033 : Text[250];
      ProgressWindow@1240030016 : Dialog;
      ArchiveEDIFileName@1240030017 : Text[250];
      BeginPoss@1240030018 : Integer;
      ConditionalFound@1240030024 : Boolean;
      CurrSegment@1240030026 : Code[15];
      CurrXMLSegment@1240020047 : Text[250];
      CurrTradePtnr@1240030027 : Text[20];
      CurrLineNo@1240030028 : Integer;
      CurrDecimalString@1240030029 : Text[60];
      DocumentCount@1240030030 : Integer;
      DocumentNo@1240030033 : Code[10];
      EDIDocumentNo@1240030034 : Code[30];
      EDIFileName@1240030035 : Text[250];
      EvalString@1240030041 : Text[250];
      FirstSegment@1240030043 : Text[15];
      FirstXMLSegment@1240020045 : Text[250];
      FirstTotalSegment@1240030044 : Code[15];
      FirstTotalXMLSegment@1240020046 : Text[250];
      FunctionalID@1240030045 : Code[2];
      GroupControlNo@1240030049 : Text[30];
      InputFileFound@1240030078 : Boolean;
      InterchangeControlNo@1240030082 : Text[30];
      Imported@1240030050 : Integer;
      InsertPoss@1240030052 : Integer;
      InsertPos@1240030053 : Integer;
      InsertLen@1240030054 : Integer;
      i@1240030056 : Integer;
      LineSegmentArray@1240030059 : ARRAY [300] OF Text[250];
      LineSegment@1240030060 : Boolean;
      NewEDIFileName@1240030061 : Text[250];
      NewSegment@1240030062 : Boolean;
      ProcessingLines@1240030063 : Boolean;
      SegmentGroup@1240030071 : Integer;
      si@1240030072 : Integer;
      StoreSegID@1240030074 : Boolean;
      StoreSegComplete@1240030075 : Boolean;
      TranSetControlNo@1240030083 : Text[30];
      TranSetID@1240030079 : Code[3];
      Text001@1001 : TextConst 'ENU=EDI Document %1 for Trading Partner %2 has a mapping error.';
      Text002@1002 : TextConst 'ENU=EDI Template not found for %1 %2 %3';
      Text003@1003 : TextConst 'ENU=Importing EDI transactions.....\';
      Text004@1004 : TextConst 'ENU=Trading Partner   #1#################\';
      Text005@1005 : TextConst 'ENU=Internal Doc No.  #2########\';
      Text006@1006 : TextConst 'ENU=Document Count    #3########\';
      Text007@1007 : TextConst 'ENU=Current Segment   #4###############################################';
      Text008@1008 : TextConst 'ENU=Error renaming file from %1 to %2';
      Text009@1009 : TextConst 'ENU=Interface file name not found for Trading Partner %1 - Document %2 - Version %3 - Type %4.';
      Text011@1011 : TextConst 'ENU=Node %1 with node list path %2 for Trade Partner %3  EDI Document No. %4 Navision Document %5 not found.';
      Text013@1013 : TextConst 'ENU=The E.D.I. Element definition for XML Segment %1 processing sequence %2  can not be found.';
      Text014@1014 : TextConst 'ENU=Field length below min of %1.';
      Text016@1016 : TextConst 'ENU=Trading Partner %1 not found.';
      TestDecimalValue@1240030084 : Decimal;
      TestTextFormat@1240030085 : Text[30];
      DecimalSymbol@1240030086 : Text[1];
      ReverseCond@1240030088 : Boolean;
      ReverseCondGroup@1240030089 : Integer;
      FirstDetailSegment@1240030012 : Code[15];
      FirstDetailXMLSegment@1240020049 : Text[250];
      EvaluateCurrSegment@1240030014 : Boolean;
      CurrXMLSegment2@1240020048 : Code[250];
      InsertRecDocHdr@1240030013 : Boolean;
      NegativeValue@1240020011 : Boolean;
      WrapText@1240020013 : Boolean;
      WrapTextComplete@1240020014 : Boolean;
      SegmentSequence@1240020017 : Integer;
      OriginalFieldTextValue@1240020022 : Text[250];
      InternalDocNo@1240020025 : Code[20];
      FieldTextValue@1240020026 : Text[250];
      FieldDateValue@1240020027 : Date;
      FieldTimeValue@1240020028 : Time;
      OK@1240020031 : Boolean;
      AttributeName@1240020039 : Text[250];
      XMLNodeValue@1240020040 : ARRAY [10] OF Text[1024];
      HeaderInserted@1240020042 : Boolean;
      NodeList@1240020043 : Text[250];
      x@1240020053 : Integer;
      Text018@1240020000 : TextConst 'ENU=The node value definition for node %1 processing sequence %2 attribute name %3 can not be found.';
      Text019@1240020054 : TextConst 'ENU=Receive Document could not be created for file %1 for Trade Partner %2  Navision Document %3 EDI Document No. %4 .\Verify mapping and file format.';
      TransactionDateText@1240020021 : Code[20];
      TransactionTimeText@1240020020 : Code[20];
      TransactionDate@1240020019 : Date;
      TransactionTime@1240020018 : Time;
      NewDocument@1240020001 : Boolean;
      NodePath@1240020002 : Text[250];
      DocumentElement@1240020030 : Text[250];
      DocsInFile@1240020003 : Integer;
      InterfaceFileName@1240020037 : Text[250];
      DataErrorExist@1240020041 : Boolean;
      MyLocalDT@1240020044 : Text[30];
      PreviousSegment@1240020016 : Code[15];

    PROCEDURE ImportXMLFile@4(CurrentEDIDocument@1240030000 : Record 14002353;DocNo@1240030001 : Code[10];FileInfo@1240020000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileInfo") : Boolean;
    VAR
      FileNameLength@1240020001 : Integer;
    BEGIN
      CurrentEDIDocument.CALCFIELDS("Element Mapping Error","Conditional Mapping Error");
      IF CurrentEDIDocument."Element Mapping Error" OR CurrentEDIDocument."Conditional Mapping Error" THEN
        ERROR(
          Text001,
          CurrentEDIDocument."Navision Document",CurrentEDIDocument."Trade Partner No.");

      CurrTradePtnr := CurrentEDIDocument."Trade Partner No.";

      EDISetup.LOCKTABLE;
      EDISetup.GET;
      IF NOT EDITemplate.GET(CurrentEDIDocument."EDI Template Code") THEN
        ERROR(
          Text002,
            CurrentEDIDocument."Trade Partner No.",CurrentEDIDocument."Navision Document",
            CurrentEDIDocument."EDI Document No.");

      EDIDocumentNo := CurrentEDIDocument."EDI Document No.";
      DocumentNo := DocNo;

      TestDecimalValue := 5 / 3;
      TestTextFormat := FORMAT(TestDecimalValue,4,1);
      DecimalSymbol := COPYSTR(TestTextFormat,2,1);

      EDIRecDocHdrTmp.RESET;
      EDIRecDocHdrTmp.DELETEALL;

      IF GUIALLOWED THEN
        ProgressWindow.OPEN(
          Text003 +
          Text004 +
          Text005 +
          Text006 +
          Text007);
      IF NOT LoadXMLFile(CurrentEDIDocument,FileInfo) THEN BEGIN
        IF GUIALLOWED THEN
          ProgressWindow.CLOSE;
        EXIT;
      END;

      IF GUIALLOWED THEN
        ProgressWindow.CLOSE;

      ValidateReferenceFields;
      SetReceiveDocReferenceFields;

      InterfaceFileName := EDIFileName;
      IF EDISetup."Rename Import File" THEN BEGIN
        EDISetup."Import Rename Sequence No." := INCSTR(EDISetup."Import Rename Sequence No.");
        NewEDIFileName := EDIFileName;
        IF STRPOS(EDIFileName,'.') = 0 THEN BEGIN
          FileNameLength := STRLEN(EDIFileName) + 1;
          NewEDIFileName := INSSTR(
            NewEDIFileName,'-' + EDISetup."Import Rename Sequence No." + '.edi',FileNameLength);
        END ELSE
          NewEDIFileName := INSSTR(
            NewEDIFileName,'-' + EDISetup."Import Rename Sequence No.",STRPOS(EDIFileName,'.'));
        EDIRecDocHdr."Interface File Name" := NewEDIFileName;
        IF NOT RENAME(EDIFileName,NewEDIFileName) THEN
          ERROR(Text008,EDIFileName,NewEDIFileName);
      END ELSE
        NewEDIFileName := EDIFileName;
      EDISetup.MODIFY;
      COMMIT;

      InsertPos := 0;
      ArchiveEDIFileName := NewEDIFileName;
      WHILE STRPOS(COPYSTR(ArchiveEDIFileName,InsertPos + 1),'\') > 0 DO
        InsertPos := InsertPos + STRPOS(COPYSTR(ArchiveEDIFileName,InsertPos + 1),'\');
      ArchiveEDIFileName := INSSTR(NewEDIFileName,'\Archive',InsertPos);
      InterfaceFileName := ArchiveEDIFileName;

      EDIRecDocHdrTmp.RESET;
      IF EDIRecDocHdrTmp.FIND('-') THEN
        REPEAT
          EDIRecDocHdr.GET(EDIRecDocHdrTmp."Internal Doc. No.");
          EDIRecDocHdr."Interface File Name" := InterfaceFileName;
          GetControlNo;
          FormatTransactionDateTime;
          EDIRecDocHdr.MODIFY;

          IF ReverseCond THEN
            EvaluateReverseConditional;

          DataErrorExist := FALSE;
          InternalDocNo := EDIRecDocHdr."Internal Doc. No.";
          IF (EDISetup."Eval. XRef at Doc. Import") AND
             (EDIRecDocHdr."Navision Document" <>'I_SLSGEN') AND
             (EDITradePartner."Disable Eval XRef at DocImport" = FALSE)
          THEN BEGIN
            IF EDISetup."Enable General Cross Ref." THEN BEGIN
              IF NOT EDITradePartner."Disable General Cross Ref." THEN BEGIN
                EDIRecDocHdr."Data Error" := TRUE;
                EDIRecDocHdr.MODIFY;
                COMMIT;

                EDIEvaluateXRefSeparately.SetProcessID(1);
                IF NOT EDIEvaluateXRefSeparately.RUN(EDIRecDocHdr) THEN BEGIN
                  EDIRecDocHdr2.GET(EDIRecDocHdr."Internal Doc. No.");
                  EDIRecDocHdr2."Error Message Text" := COPYSTR(GETLASTERRORTEXT,1,250);
                END ELSE BEGIN
                  EDIRecDocHdr2.GET(EDIRecDocHdr."Internal Doc. No.");
                  EDIRecDocHdr2."Gen. XRef Processed On Import" := TRUE;
                  EDIRecDocHdr2."Data Error" := FALSE;
                END;
                EDIRecDocHdr2.MODIFY;
                COMMIT;
              END;
              DataErrorExist := EDIRecDocHdr2."Data Error";
            END;
            IF (EDISetup."Pre-evaluate Std. Cross Ref.") AND
               ((EDIRecDocHdr."Navision Document" = 'I_SLSORD') OR
                (EDIRecDocHdr."Navision Document" = 'I_SLSQUO') OR
                (EDIRecDocHdr."Navision Document" = 'I_SLSINV')) AND
               (NOT EDITradePartner."Disable Pre-evaluation")
            THEN BEGIN
              EDIRecDocHdr.GET(InternalDocNo);
              EDIRecDocHdr."Data Error" := TRUE;
              EDIRecDocHdr.MODIFY;
              COMMIT;

              EDIEvaluateXRefSeparately.SetProcessID(2);
              IF NOT EDIEvaluateXRefSeparately.RUN(EDIRecDocHdr) THEN BEGIN
                EDIRecDocHdr2.GET(EDIRecDocHdr."Internal Doc. No.");
                EDIRecDocHdr2."Error Message Text" := COPYSTR(GETLASTERRORTEXT,1,250);
              END ELSE BEGIN
                EDIRecDocHdr2.GET(EDIRecDocHdr."Internal Doc. No.");
                EDIRecDocHdr2."Std. XRef Processed On Import" := TRUE;
                IF DataErrorExist = FALSE THEN
                  EDIRecDocHdr2."Data Error" := FALSE;
              END;
              EDIRecDocHdr2.MODIFY;
              COMMIT;
            END;
          END;
          IF (EDIRecDocHdr."Navision Document" = 'I_SLSGEN') AND
             (EDIDocument."Generic Document Received")
          THEN BEGIN
            CLEAR(CreateEDIAlert);
            CreateEDIAlert.CreateAlertGenericDoc(EDIRecDocHdr."Internal Doc. No.",1);
          END;
        UNTIL EDIRecDocHdrTmp.NEXT = 0
      ELSE
        ERROR(
          Text019,EDIFileName,CurrentEDIDocument."Trade Partner No.",
          CurrentEDIDocument."Navision Document",CurrentEDIDocument."EDI Document No.");

      IF COPY(NewEDIFileName,ArchiveEDIFileName) THEN ;
      IF ERASE(NewEDIFileName) THEN ;

      COMMIT;

      CASE DocumentNo OF
        'I_FUNCTACK':
          EDIRecDocHdr.ProcessReceiveDocument(FALSE);
        'I_SLSORD','I_SLSQUO','I_SLSINV':
          IF EDITemplate."Create Sls. Order on Rec." THEN
            EDIRecDocHdr.CreateSalesOrdersAll(DocumentNo);
        'U_PURWSA', 'U_PURORD','I_PURINV':
          IF EDITemplate."Update Purch. Order on Rec." THEN
          EDIRecDocHdr.PurchaseOrderUpdateAll(DocumentNo);
        'I_SLSCRM':
          IF EDITemplate."Create Sls. Cr. Memo on Rec." THEN
            EDIRecDocHdr.CreateSalesOrdersAll(DocumentNo);
        'I_SLSCUS':
          IF EDITemplate."Update Org. Relation on Rec." THEN
            EDIRecDocHdr.OrgRelationshipUpdateAll(DocumentNo);
        'I_SLSASN','I_SLSWSA':
          IF EDITemplate."Auto. Process 3PL Ship Notice" THEN
            EDIRecDocHdr.ProcessWarehouseShipNoticeAll(DocumentNo);
        'I_INVRPT','I_INVADJ':
          IF EDITemplate."Create Location Invt. Advice" THEN
            EDIRecDocHdr.ProcessInventoryAdviceAll(DocumentNo);
        'I_PURDOC':
          IF EDITemplate."Create Purch. Document on Rec." THEN
            EDIRecDocHdr.CreatePurchDocsAll(DocumentNo);
        'I_FGTINV':
          IF EDITemplate."Create Purch. Document on Rec." THEN
            EDIRecDocHdr.CreateFreightInvoiceAll(DocumentNo);
        'I_TFRORD':
          IF EDITemplate."Create Transfer Order on Rec." THEN
            EDIRecDocHdr.CreateTransferOrderAll(DocumentNo);
        'U_ROUTEREQ':
          IF EDITemplate."Update Routing Req. on Rec." THEN
            EDIRecDocHdr.RoutingReqUpdateAll(DocumentNo);
        'U_SLSORD','U_SLSWSA':
          IF EDITemplate."Update Sls. Order on Rec." THEN
            EDIRecDocHdr.SalesOrderUpdateAll(DocumentNo);
        'U_TFRORD':
          IF EDITemplate."Update Transfer On Receipt" THEN
            EDIRecDocHdr.TransferOrderUpdateAll(DocumentNo);
        'I_PMTADV':
          IF EDITemplate."Create Pmt. Advice On Receipt" THEN
            EDIRecDocHdr.CreatePaymentAdviceAll(DocumentNo);
      END;

      EDIConditionalSequence.RESET;
      EDIConditionalSequence.DELETEALL;

      EDIRecDocHdrTmp.RESET;
      EDIRecDocHdrTmp.DELETEALL;

      EXIT(TRUE);
    END;

    PROCEDURE LoadXMLFile@1240020003(CurrentEDIDocument@1240020001 : Record 14002353;FileInfo@1240020008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileInfo") InputFileFound : Boolean;
    VAR
      EndPosition@1240020002 : Integer;
      FileNameEndPos@1240020003 : Integer;
      InterfaceFileLen@1240020007 : Integer;
      InterfaceFilePath@1240020006 : Text[250];
      DirectoryFileName@1240020005 : Text[250];
      InterfaceFileName@1240020004 : Text[250];
    BEGIN
      EDIFileName := CurrentEDIDocument."Interface File";
      IF EDIFileName = '' THEN
        ERROR(
          Text009,
          CurrentEDIDocument."Trade Partner No.",CurrentEDIDocument."Navision Document",
          CurrentEDIDocument.Version,CurrentEDIDocument.Type);

      IF (EDITemplate."Interface File Type" = EDITemplate."Interface File Type"::None) THEN BEGIN
        InputFileFound := FALSE;
        EndPosition := 0;
        WHILE STRPOS(COPYSTR(EDIFileName,EndPosition + 1),'\') > 0 DO
          EndPosition := EndPosition + STRPOS(COPYSTR(EDIFileName,EndPosition + 1),'\');
        InterfaceFilePath := COPYSTR(EDIFileName,1,EndPosition - 1);
        FileNameEndPos := STRPOS(EDIFileName,'*');
        IF FileNameEndPos = 0 THEN BEGIN
          OK := EXISTS(EDIFileName);
          IF OK THEN
            GenerateStructureFromPath(EDIFileName,CurrentEDIDocument);
          InputFileFound := OK;
        END ELSE BEGIN
          InterfaceFileLen := EDITemplate."File Name Length";
          DirectoryFileName := FORMAT(FileInfo.Name);
          DirectoryFileName :=
            UPPERCASE(
              COPYSTR(
                DirectoryFileName,
                EDITemplate."File Name Begin Position",
                EDITemplate."File Name Length"));
          InterfaceFileName :=
            UPPERCASE(
              COPYSTR(
                EDIFileName,(EndPosition + 1),InterfaceFileLen));
          IF DirectoryFileName = InterfaceFileName THEN BEGIN
            EDIFileName := FORMAT(FileInfo.Directory) + '\' + FORMAT(FileInfo.Name);
            OK := EXISTS(EDIFileName);
            IF OK THEN
              GenerateStructureFromPath(EDIFileName,CurrentEDIDocument);
            InputFileFound := OK;
          END;
        END;
      END ELSE BEGIN
        OK := EXISTS(EDIFileName);
        IF OK THEN
          GenerateStructureFromPath(EDIFileName,CurrentEDIDocument);
        InputFileFound := OK;
      END;

      EXIT(InputFileFound);
    END;

    PROCEDURE EvalSegment@1240020004(EvaluateSegmentGroup@1240020000 : Boolean);
    BEGIN
      LoadCurrSegment;
      IF EvaluateSegmentGroup THEN
        CheckForLineSegmentGroup;
      IF HeaderInserted THEN
        EXIT;
      IF (InsertRecDocHdr) AND
         (CurrXMLSegment = FirstXMLSegment) AND
         (HeaderInserted = FALSE)
      THEN
        CreateRecDocHdr;
    END;

    PROCEDURE CreateRecDocHdr@1240020011();
    BEGIN
      CurrXMLSegment := DELCHR(CurrXMLSegment,'>',' ');
      IF (CurrXMLSegment = FirstXMLSegment) OR (NewDocument) THEN BEGIN
        EDISetup."Last Internal Doc. No." := INCSTR(EDISetup."Last Internal Doc. No.");
        EDISetup.MODIFY;
        COMMIT;
        IF GUIALLOWED THEN
          ProgressWindow.UPDATE(2,EDISetup."Last Internal Doc. No.");
        DocumentCount := DocumentCount + 1;
        IF GUIALLOWED THEN
          ProgressWindow.UPDATE(3,DocumentCount);

        EDIRecDocHdr.INIT;
        EDIRecDocHdr."Company Name" := EDITradePartner."Company Name";
        EDIRecDocHdr."Trade Partner No." := EDITradePartner."No.";
        EDIRecDocHdr."Navision Document" := EDIDocument."Navision Document";
        EDIRecDocHdr."EDI Document No." := EDIDocument."EDI Document No.";
        EDIRecDocHdr."EDI Version" := EDIDocument.Version;
        EDIRecDocHdr."Internal Doc. No." := EDISetup."Last Internal Doc. No.";
        EDIRecDocHdr."EDI Template Code" := EDITemplate.Code;
        EDIRecDocHdr."Customer No." := '';
        EDIRecDocHdr."Date Received" := TODAY;
        EDIRecDocHdr."Time Received" := TIME;
        EDIRecDocHdr."Functional Identifier" := FunctionalID;
        EDIRecDocHdr."Group Control No." := GroupControlNo;
        EDIRecDocHdr."Transaction Set Control No." := TranSetControlNo;
        EDIRecDocHdr."Transaction Set Identifier" := TranSetID;
        EDIRecDocHdr."Interchange Control No." := InterchangeControlNo;
        EDIRecDocHdr."Funct. Ack. Required" := EDIDocument."Funct. Ack. Required";
        EDIRecDocHdr."Shipment Release" := EDIDocument."Shipment Release";
        EDIRecDocHdr."Enable Bulk Draw Down" := EDIDocument."Enable Bulk Draw Down";
        EDIRecDocHdr."Enable Forecast Release" := EDIDocument."Enable Forecast and Release";
        EDIRecDocHdr."Enable PO Change" := EDIDocument."Enable PO Change";
        EDIRecDocHdr."Whse. Ship. Order Required" := EDIDocument."Warehouse Ship Order Required";
        EDIRecDocHdr."Same Day Ship Time" := EDIDocument."Same Day Ship Time";
        IF EDIDocument."Same Day Ship Time" <> 0T THEN
          EDIRecDocHdr."Use Same Day Ship Time" := TRUE
        ELSE
          EDIRecDocHdr."Use Same Day Ship Time" := FALSE;
        IF EDIDocument."Enable PO Change" AND NOT EDIDocument."Enable Forecast and Release" THEN
          EDIRecDocHdr."Evaluate PO Change" := TRUE;
        EDIRecDocHdr."PO Change Generates Change Ack" := EDITemplate."PO Change Generates Change Ack";
        EDIRecDocHdr."Process Receive Doc. Job Ready" := TRUE;
        EDIRecDocHdr."Price Discrepancy Check Req." :=
        EDITemplate."Price Discrepancy Rel. Block";
        IF EDITemplate."Price Discrepancy Rel. Block" THEN
          EDIRecDocHdr."Price Discrepancy Rel. Block" := TRUE;
        EDIRecDocHdr."XML Document" := TRUE;
        EDIRecDocHdr.INSERT;
        Imported := Imported + 1;
        CurrLineNo := 0;
        HeaderInserted := TRUE;
        NewDocument := FALSE;

        EDIRecDocHdrTmp.COPY(EDIRecDocHdr);
        EDIRecDocHdrTmp.INSERT;
      END;
    END;

    PROCEDURE LoadCurrSegment@15();
    BEGIN
      CurrXMLSegment := CurrentElementName;
      CurrSegment := EDISegment.Segment;
    END;

    PROCEDURE MapElement@1240020006();
    BEGIN
      EDIElement.RESET;
      EDIElement.SETRANGE("Trade Partner No.",CurrTradePtnr);
      EDIElement.SETRANGE("Navision Document",EDIDocument."Navision Document");
      EDIElement.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
      EDIElement.SETRANGE(Version,EDIDocument.Version);
      EDIElement.SETRANGE(Type,EDIDocument.Type);
      EDIElement.SETRANGE(Segment,CurrSegment);
      IF AttributeName = '' THEN BEGIN
        EDIElement.SETRANGE(Attribute,FALSE);
        EDIElement.SETRANGE("Node Text",TRUE)
      END ELSE BEGIN
        EDIElement.SETRANGE("Attribute Name",AttributeName);
        EDIElement.SETRANGE(Attribute,TRUE);
        EDIElement.SETRANGE("Node Text",FALSE);
      END;
      BeginPoss := 1;
      x := 1;
      IF NOT EDIElement.FIND('-') THEN BEGIN
        IF AttributeName = '' THEN
          ERROR(Text013,CurrXMLSegment,EDISegment."Processing Sequence")
        ELSE
          ERROR(Text018,CurrXMLSegment,EDISegment."Processing Sequence",AttributeName);
      END;

      NewSegment := TRUE;
      IF NewSegment THEN BEGIN
        ReverseCondGroup := ReverseCondGroup + 1;
        IF CurrSegment <> PreviousSegment THEN
          SegmentSequence := 0;
        SegmentSequence := SegmentSequence + 1
      END;
      WrapTextComplete := TRUE;
      REPEAT
        EDIRecDocFields.INIT;
        EDIRecDocFields."New Segment" := NewSegment;
        NewSegment := FALSE;
        EDIRecDocFields."Trade Partner No." := CurrTradePtnr;
        EDIRecDocFields."Navision Document" := EDIRecDocHdr."Navision Document";
        EDIRecDocFields."EDI Document No." := EDIDocument."EDI Document No.";
        EDIRecDocFields."EDI Version" := EDIDocument.Version;
        EDIRecDocFields."Internal Doc. No." := EDISetup."Last Internal Doc. No.";
        EDIRecDocFields.Segment := CurrSegment;
        EDIRecDocFields."XML Segment" := CurrXMLSegment;
        EDIRecDocFields."Segment Line" := EDIElement."Processing Sequence";
        EDIRecDocFields.Element := EDIElement.Element;
        CurrLineNo := CurrLineNo + 1;
        EDIRecDocFields."Line No." := CurrLineNo;
        EDIRecDocFields."Field Name" := EDIElement."Field Name";
        EDIRecDocFields."Nav Field No." := EDIElement."NAV Field No.";
        EDIRecDocFields."Field Type" := EDIElement."NAV Data Type";
        EDIRecDocFields."Field Description" := '';
        EDIRecDocFields."EDI Description" := '';
        EDIRecDocFields."NAV Table No." := EDIElement."NAV Table No.";
        EDIRecDocFields.Trigger := EDIElement.Trigger;
        EDIRecDocFields.Viewable := EDIElement.Viewable;
        EDIRecDocFields."Item Description" := EDIElement."Item Description";
        EDIRecDocFields.Type := EDIElement.Type;
        EDIRecDocFields."Processing Sequence" := EDIElement."Processing Sequence";
        EDIRecDocFields.Print := EDIElement.Print;
        EDIRecDocFields.Column := EDIElement.Column;
        EDIRecDocFields."Columns Per Line" := EDIElement."Columns Per Line";
        EDIRecDocFields."New Line" := EDIElement."New Line";
        EDIRecDocFields."Data Type" := EDIElement."Data Type";
        EDIRecDocFields."Copy String Position" := EDIElement."Copy String Position";
        EDIRecDocFields."Copy String Length" := EDIElement."Copy String Length";
        EDIRecDocFields."Append to Field Contents" := EDIElement."Append to Field Contents";
        EDIRecDocFields."Insert into Field Contents" := EDIElement."Insert into Field Contents";
        EDIRecDocFields."Insert Position" := EDIElement."Insert Position";
        EDIRecDocFields."Reverse Sign" := EDIElement."Reverse Sign";
        EDIRecDocFields."Reverse Cond. Group" := ReverseCondGroup;
        EDIRecDocFields."Forecast Date Formula" := EDIElement."Forecast Date Formula";
        EDIRecDocFields."Wrap Text" := EDIElement."Wrap Text";
        EDIRecDocFields."Line Type" := EDIElement."Line Type";
        EDIRecDocFields."Separator Type" := EDIElement."Separator Type";
        EDIRecDocFields."Segment Sequence" := SegmentSequence;
        EDIRecDocFields."Validation Type" := EDIElement."Validation Type";
        EDIRecDocFields."Substitution Value" := EDIElement."Substitution Value";
        EDIRecDocFields.Multiplier := EDIElement.Multiplier;
        EDIRecDocFields."XML Document" := TRUE;
        EDIRecDocFields."Attribute Name" := AttributeName;
        EDIRecDocFields."Cross Reference ID Type" := EDIElement."Cross Reference ID Type";
        EDIRecDocFields."Disable General Cross Ref." := EDIElement."Disable General Cross Ref.";
        IF EDIElement."Wrap Text" THEN
          WrapText := TRUE
        ELSE
          WrapText := FALSE;
        IF WrapText THEN BEGIN
          IF BeginPoss + EDIElement.Length <= 1024 THEN BEGIN
            EDIRecDocFields."Field Text Value" := COPYSTR(
            XMLNodeValue[x],BeginPoss,EDIElement.Length);
            IF COPYSTR(XMLNodeValue[x],(EDIElement.Length + BeginPoss)) = '' THEN BEGIN
              WrapTextComplete := TRUE;
              WrapText := FALSE;
            END ELSE
              WrapTextComplete := FALSE;
            BeginPoss := BeginPoss + EDIElement.Length;
            IF BeginPoss = 1025 THEN BEGIN
              BeginPoss := 1;
              x := x + 1;
            END;
          END ELSE BEGIN
            EDIRecDocFields."Field Text Value" := COPYSTR(XMLNodeValue[x],BeginPoss,1024);
            InsertPoss := 1025 - BeginPoss;
            InsertLen := EDIElement.Length - InsertPoss;
            x := x + 1;
            BeginPoss := 1;
            EDIRecDocFields."Field Text Value" := INSSTR(EDIRecDocFields."Field Text Value",
            COPYSTR(XMLNodeValue[x],BeginPoss,InsertLen),InsertPoss + 1);
            IF COPYSTR(XMLNodeValue[x],(InsertPoss + 1)) = '' THEN BEGIN
              WrapTextComplete := TRUE;
              WrapText := FALSE;
            END ELSE
              WrapTextComplete := FALSE;
          END;
        END ELSE
          EDIRecDocFields."Field Text Value" := COPYSTR(XMLNodeValue[1],1,EDIElement.Length);

        // Test required length
        EvalString := DELCHR(EDIRecDocFields."Field Text Value",'>',' ');
        EDIRecDocFields."Field Text Value" := DELCHR(EDIRecDocFields."Field Text Value",'>',' ');
        InvalidCharacterCheck(EDIRecDocFields);
        IF (EDIElement."Minimum Length" <> 0) AND
           (STRLEN(EvalString) < EDIElement."Minimum Length")
        THEN BEGIN
          EDIRecDocFields."Error Description" := STRSUBSTNO(Text014,EDIElement."Minimum Length");
          EDIRecDocHdr.GET(EDIRecDocHdr."Internal Doc. No.");
          EDIRecDocHdr."Data Error" := TRUE;
          EDIRecDocHdr.MODIFY;
        END;
        EDIElement.CALCFIELDS(Conditional);

        // Substitution Value
        IF (EDIRecDocFields."Substitution Value" <> '') AND
           (EDIElement.Conditional = FALSE)
        THEN BEGIN
          EDIRecDocFields."Received EDI Value" := EDIRecDocFields."Field Text Value";
          IF UPPERCASE(EDIRecDocFields."Substitution Value") = 'NULL' THEN
            EDIRecDocFields."Field Text Value" := ''
          ELSE
            EDIRecDocFields."Field Text Value" := EDIRecDocFields."Substitution Value";
          EDIRecDocFields.Substitution := TRUE;
        END;
        IF (EDIDocument."Delete Leading Blank Spaces") THEN
          EDIRecDocFields."Field Text Value" := DELCHR(EDIRecDocFields."Field Text Value",'<',' ');

        // format fields
        FormatFields;

        EDIRecDocFields."Segment Group" := SegmentGroup;
        OriginalFieldTextValue := EDIRecDocFields."Field Text Value";
        EDIElement.CALCFIELDS(EDIElement.Conditional);
        IF EDIElement.Conditional THEN BEGIN
          EDIConditional.RESET;
          EDIConditional.SETRANGE("Trade Partner No.",EDIElement."Trade Partner No.");
          EDIConditional.SETRANGE("Navision Document",EDIElement."Navision Document");
          EDIConditional.SETRANGE("EDI Document No.",EDIElement."EDI Document No.");
          EDIConditional.SETRANGE(Version,EDIElement.Version);
          EDIConditional.SETRANGE(Type,EDIElement.Type);
          EDIConditional.SETRANGE(Segment,EDIElement.Segment);
          EDIConditional.SETRANGE(Element,EDIElement.Element);
          ConditionalFound := FALSE;
          IF EDIConditional.FIND('-') THEN
            REPEAT
              EDIRecDocFields.Substitution := FALSE;
              EDIRecDocFields."Received EDI Value" := '';
              EDIRecDocFields."Substitution Value" := '';
              ConditionalFound := FALSE;
              IF (EDIConditional."Cond. Segment" = '') AND
                 (EDIConditional."Cond. Element" = '') AND
                 (EDIConditional."Cond. Value" = '') OR
                 (EDIConditional."Reverse Conditional")
              THEN BEGIN
                ConditionalFound := TRUE;
                EDIRecDocFields."Cross Reference ID Type" := EDIConditional."Cross Reference ID Type";
                IF EDIConditional."Use Conditional Sequence" THEN
                  EvaluateConditionalSequence;
                IF ConditionalFound THEN BEGIN
                  IF EDIConditional."Substitution Value" <> '' THEN BEGIN
                    EDIRecDocFields."Received EDI Value" := OriginalFieldTextValue;
                    IF UPPERCASE(EDIConditional."Substitution Value") = 'NULL' THEN
                      EDIRecDocFields."Field Text Value" := ''
                    ELSE
                      EDIRecDocFields."Field Text Value" := EDIConditional."Substitution Value";
                    EDIRecDocFields.Substitution := TRUE;
                    FormatFields;
                  END ELSE
                    IF EDIRecDocFields.Substitution = TRUE THEN BEGIN
                      EDIRecDocFields.Substitution := FALSE;
                      EDIRecDocFields."Field Text Value" := OriginalFieldTextValue;
                      EDIRecDocFields."Received EDI Value" := '';
                    END;
                  EDIRecDocFields."NAV Table No." := EDIConditional."NAV Table No.";
                  EDIRecDocFields."Nav Field No." := EDIConditional."Nav Field No.";
                  EDIRecDocFields."Field Name" := EDIConditional."Field Name";
                  EDIRecDocFields.Trigger := EDIConditional.Trigger;
                  EDIRecDocFields.Print := EDIConditional.Print;
                  EDIRecDocFields.Column := EDIConditional.Column;
                  EDIRecDocFields."Columns Per Line" := EDIConditional."Columns Per Line";
                  EDIRecDocFields."New Line" := EDIConditional."New Line";
                  EDIRecDocFields."Copy String Position" := EDIConditional."Copy String Position";
                  EDIRecDocFields."Copy String Length" := EDIConditional."Copy String Length";
                  EDIRecDocFields."Append to Field Contents" :=
                    EDIConditional."Append to Field Contents";
                  EDIRecDocFields."Insert into Field Contents" :=
                    EDIConditional."Insert into Field Contents";
                  EDIRecDocFields."Insert Position" := EDIConditional."Insert Position";
                  EDIRecDocFields.Viewable := EDIElement.Viewable;
                  CurrLineNo := CurrLineNo + 1;
                  EDIRecDocFields."Line No." := CurrLineNo;
                  EDIRecDocFields."Reverse Conditional" := EDIConditional."Reverse Conditional";
                  EDIRecDocFields."Reverse Cond. Group" := ReverseCondGroup;
                  EDIRecDocFields."Forecast Date Formula" := EDIConditional."Forecast Date Formula";
                  EDIRecDocFields."Wrap Text" := EDIConditional."Wrap Text";
                  EDIRecDocFields."No Segment" := EDIConditional."Cond. Segment Not Present";
                  EDIRecDocFields."Line Type" := EDIConditional."Line Type";
                  EDIRecDocFields."Cond. Detail Segment" := EDIConditional."Cond. Detail Segment";
                  EDIRecDocFields."Cond. Non-Detail Segment" :=
                  EDIConditional."Cond. Non-Detail Segment";
                  EDIRecDocFields."Reverse Sign" := EDIConditional."Reverse Sign";
                  EDIRecDocFields."Separator Type" := EDIConditional."Separator Type";
                  EDIRecDocFields."Use Conditional Sequence" :=
                  EDIConditional."Use Conditional Sequence";
                  EDIRecDocFields."Segment Sequence" := SegmentSequence;
                  EDIRecDocFields."Validation Type" := EDIConditional."Validation Type";
                  EDIRecDocFields."Substitution Value" := EDIConditional."Substitution Value";
                  EDIRecDocFields.Multiplier := EDIConditional.Multiplier;
                  EDIRecDocFields."Cross Reference ID Type" := EDIConditional."Cross Reference ID Type";
                  EDIRecDocFields."Conditional Operator" := EDIConditional."Conditional Operator";
                  EDIRecDocFields."Disable General Cross Ref." := EDIConditional."Disable General Cross Ref.";
                  EDIRecDocFields.INSERT;
                  IF EDIConditional."Reverse Conditional" THEN BEGIN
                    ReverseCond := TRUE;
                    EDIRecDocFields."Reverse Cond. Value-1" := EDIConditional."Cond. Value";
                    EDIRecDocFields."Reverse Cond. Value-2" := EDIConditional."Cond. Value-2";
                    EDIRecDocFields.MODIFY;
                  END;
                END;
              END ELSE BEGIN
                ConditionalFound := FALSE;
                EDIRecDocFields4.RESET;
                EDIRecDocFields4.SETRANGE("Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
                EDIRecDocFields4.SETRANGE(Segment,EDIConditional."Cond. Segment");
                EDIRecDocFields4.SETRANGE(Element,EDIConditional."Cond. Element");
                ConditionalFound := FALSE;
                IF EDIRecDocFields4.FIND('+') THEN BEGIN
                  EDIRecDocFields.Substitution := FALSE;
                  EDIRecDocFields."Received EDI Value" := '';
                  EDIRecDocFields."Substitution Value" := '';
                  IF EDIRecDocFields4.Substitution = TRUE THEN BEGIN
                    CASE EDIConditional."Conditional Operator" OF
                      EDIConditional."Conditional Operator"::" ":
                        IF EDIConditional."Cond. Value" = UPPERCASE(EDIRecDocFields4."Received EDI Value") THEN
                          ConditionalFound := TRUE;
                      EDIConditional."Conditional Operator"::"<>":
                        IF EDIConditional."Cond. Value" <> UPPERCASE(EDIRecDocFields4."Received EDI Value") THEN
                          ConditionalFound := TRUE;
                    END;
                  END ELSE BEGIN
                    CASE EDIConditional."Conditional Operator" OF
                      EDIConditional."Conditional Operator"::" ":
                        IF EDIConditional."Cond. Value" =
                          UPPERCASE(EDIRecDocFields4."Field Text Value")
                        THEN
                          ConditionalFound := TRUE;
                      EDIConditional."Conditional Operator"::"<>":
                        IF EDIConditional."Cond. Value" <>
                          UPPERCASE(EDIRecDocFields4."Field Text Value")
                        THEN
                          ConditionalFound := TRUE;
                    END;
                  END;
                  IF ConditionalFound THEN BEGIN
                    IF (EDIConditional."Cond. Segment-2" <> '') THEN BEGIN
                      EDIRecDocFields4.SETRANGE(Segment,EDIConditional."Cond. Segment-2");
                      EDIRecDocFields4.SETRANGE(Element,EDIConditional."Cond. Element-2");
                      ConditionalFound := FALSE;
                      IF EDIRecDocFields4.FIND('+') THEN BEGIN
                        IF EDIRecDocFields4.Substitution = TRUE THEN BEGIN
                          CASE EDIConditional."Conditional Operator-2" OF
                            EDIConditional."Conditional Operator-2"::" ":
                              IF EDIConditional."Cond. Value-2" =
                                UPPERCASE(EDIRecDocFields4."Received EDI Value")
                              THEN
                                ConditionalFound := TRUE;
                            EDIConditional."Conditional Operator-2"::"<>":
                              IF EDIConditional."Cond. Value-2" <>
                                UPPERCASE(EDIRecDocFields4."Received EDI Value")
                              THEN
                                ConditionalFound := TRUE;
                          END;
                        END ELSE BEGIN
                          CASE EDIConditional."Conditional Operator-2" OF
                            EDIConditional."Conditional Operator-2"::" ":
                              IF EDIConditional."Cond. Value-2" =
                                UPPERCASE(EDIRecDocFields4."Field Text Value")
                              THEN
                                ConditionalFound := TRUE;
                            EDIConditional."Conditional Operator-2"::"<>":
                              IF EDIConditional."Cond. Value-2" <>
                                UPPERCASE(EDIRecDocFields4."Field Text Value")
                              THEN
                                ConditionalFound := TRUE;
                          END;
                        END;
                        IF EDIConditional."Cond. Detail Segment" THEN BEGIN
                          ConditionalFound := FALSE;
                          IF EDIRecDocFields4."Segment Group" <> 0 THEN
                            ConditionalFound := TRUE;
                        END;
                        IF EDIConditional."Cond. Non-Detail Segment" THEN BEGIN
                          ConditionalFound := FALSE;
                          IF EDIRecDocFields4."Segment Group" = 0 THEN
                            ConditionalFound := TRUE;
                         END;
                      END;
                    END ELSE BEGIN
                      IF EDIConditional."Cond. Detail Segment" THEN BEGIN
                        ConditionalFound := FALSE;
                        IF EDIRecDocFields4."Segment Group" <> 0 THEN
                           ConditionalFound := TRUE;
                      END;
                      IF EDIConditional."Cond. Non-Detail Segment" THEN BEGIN
                        ConditionalFound := FALSE;
                        IF EDIRecDocFields4."Segment Group" = 0 THEN
                          ConditionalFound := TRUE;
                      END;
                    END;
                  END;
                END ELSE BEGIN
                  EDIRecDocFields.Substitution := FALSE;
                  EDIRecDocFields."Received EDI Value" := '';
                  EDIRecDocFields."Substitution Value" := '';
                  EDIRecDocFields4.RESET;
                  EDIRecDocFields4.SETRANGE("Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
                  EDIRecDocFields4.SETRANGE(Segment,EDIConditional."Cond. Segment");
                  IF NOT EDIRecDocFields4.FIND('+') THEN
                    IF EDIConditional."Cond. Segment Not Present" THEN
                      ConditionalFound := TRUE;
                END;
                IF EDIConditional."Use Conditional Sequence" AND ConditionalFound THEN BEGIN
                  EDIRecDocFields.Substitution := FALSE;
                  EDIRecDocFields."Received EDI Value" := '';
                  EDIRecDocFields."Substitution Value" := '';
                  EvaluateConditionalSequence;
                END;
                IF ConditionalFound THEN BEGIN
                  IF EDIConditional."Substitution Value" <> '' THEN BEGIN
                    EDIRecDocFields."Received EDI Value" := OriginalFieldTextValue;
                    IF UPPERCASE(EDIConditional."Substitution Value") = 'NULL' THEN
                      EDIRecDocFields."Field Text Value" := ''
                    ELSE
                      EDIRecDocFields."Field Text Value" := EDIConditional."Substitution Value";
                    EDIRecDocFields.Substitution := TRUE;
                    FormatFields;
                 END ELSE BEGIN
                    EDIRecDocFields.Substitution := FALSE;
                    EDIRecDocFields."Field Text Value" := OriginalFieldTextValue;
                    EDIRecDocFields."Received EDI Value" := '';
                  END;
                  EDIRecDocFields."NAV Table No." := EDIConditional."NAV Table No.";
                  EDIRecDocFields."Nav Field No." := EDIConditional."Nav Field No.";
                  EDIRecDocFields."Field Name" := EDIConditional."Field Name";
                  EDIRecDocFields.Trigger := EDIConditional.Trigger;
                  EDIRecDocFields.Print := EDIConditional.Print;
                  EDIRecDocFields.Column := EDIConditional.Column;
                  EDIRecDocFields."Columns Per Line" := EDIConditional."Columns Per Line";
                  EDIRecDocFields."New Line" := EDIConditional."New Line";
                  EDIRecDocFields."Copy String Position" := EDIConditional."Copy String Position";
                  EDIRecDocFields."Copy String Length" := EDIConditional."Copy String Length";
                  EDIRecDocFields."Append to Field Contents" :=
                  EDIConditional."Append to Field Contents";
                  EDIRecDocFields."Insert into Field Contents" :=
                  EDIConditional."Insert into Field Contents";
                  EDIRecDocFields."Insert Position" := EDIConditional."Insert Position";
                  EDIRecDocFields.Viewable := EDIElement.Viewable;
                  CurrLineNo := CurrLineNo + 1;
                  EDIRecDocFields."Line No." := CurrLineNo;
                  EDIRecDocFields."Reverse Conditional" := EDIConditional."Reverse Conditional";
                  EDIRecDocFields."Reverse Cond. Group" := ReverseCondGroup;
                  EDIRecDocFields."Forecast Date Formula" := EDIConditional."Forecast Date Formula";
                  EDIRecDocFields."Wrap Text" := EDIConditional."Wrap Text";
                  EDIRecDocFields."Line Type" := EDIConditional."Line Type";
                  EDIRecDocFields."Cond. Detail Segment" := EDIConditional."Cond. Detail Segment";
                  EDIRecDocFields."Cond. Non-Detail Segment" :=
                  EDIConditional."Cond. Non-Detail Segment";
                  EDIRecDocFields."Reverse Sign" := EDIConditional."Reverse Sign";
                  EDIRecDocFields."Use Conditional Sequence" :=
                    EDIConditional."Use Conditional Sequence";
                  EDIRecDocFields."Segment Sequence" := SegmentSequence;
                 EDIRecDocFields."Separator Type" := EDIConditional."Separator Type";
                 EDIRecDocFields."Validation Type" := EDIConditional."Validation Type";
                 EDIRecDocFields."Substitution Value" := EDIConditional."Substitution Value";
                 EDIRecDocFields.Multiplier := EDIConditional.Multiplier;
                 EDIRecDocFields."Cross Reference ID Type" := EDIConditional."Cross Reference ID Type";
                 EDIRecDocFields."Conditional Operator" := EDIConditional."Conditional Operator";
                 EDIRecDocFields."Disable General Cross Ref." := EDIConditional."Disable General Cross Ref.";
                 EDIRecDocFields.INSERT;
                END;
              END;
            UNTIL (EDIConditional.NEXT = 0);
          OriginalFieldTextValue := '';
        END ELSE BEGIN
          IF WrapText THEN
            EDIRecDocFields.INSERT
          ELSE
            EDIRecDocFields.INSERT;
        END;
        IF NOT WrapTextComplete THEN
          EDIElement.NEXT(-1);
      UNTIL WrapTextComplete = TRUE;
    END;

    PROCEDURE LoadTradePtnr@5();
    BEGIN
      IF NOT EDITradePartner.GET(CurrTradePtnr) THEN
        ERROR(Text016,CurrTradePtnr);
      IF GUIALLOWED THEN
        ProgressWindow.UPDATE(1,EDITradePartner."No.");
    END;

    PROCEDURE FormatFields@1240020000();
    VAR
      FieldTextValue2@1240020003 : Text[250];
      Month@1240020000 : Text[2];
      Day@1240020001 : Text[2];
      Year@1240020002 : Text[4];
      Position@1240020004 : Integer;
    BEGIN
      CASE EDIElement."Data Type" OF
        EDIElement."Data Type"::"Dec Implied":
          BEGIN
            EDIRecDocFields."Field Text Value" := DELCHR(EDIRecDocFields."Field Text Value",'>',' ');
            IF EDIRecDocFields."Field Text Value" = '' THEN
              CurrDecimalString := '0.0'
            ELSE BEGIN
              CurrDecimalString := EDIRecDocFields."Field Text Value";
              IF STRPOS(CurrDecimalString,'-') <> 0 THEN BEGIN
                NegativeValue := TRUE;
                CurrDecimalString := COPYSTR(CurrDecimalString,2);
              END ELSE
                NegativeValue := FALSE;
              WHILE STRLEN(CurrDecimalString) < EDIElement.Decimals DO
                CurrDecimalString := INSSTR(CurrDecimalString,'0',1);
              CurrDecimalString := INSSTR(
                CurrDecimalString,DecimalSymbol,
                (STRLEN(CurrDecimalString) - EDIElement.Decimals) + 1);
            END;
            IF NegativeValue THEN
              CurrDecimalString := '-' + CurrDecimalString;
            EVALUATE(EDIRecDocFields."Field Dec. Value",CurrDecimalString);
          END;
        EDIElement."Data Type"::"Dec Explicit":
          BEGIN
            EDIRecDocFields."Field Text Value" := DELCHR(EDIRecDocFields."Field Text Value",'>',' ');
            IF EDIRecDocFields."Field Text Value" = '' THEN
              CurrDecimalString := '0.0'
            ELSE
              CurrDecimalString := EDIRecDocFields."Field Text Value";
            IF DecimalSymbol = ',' THEN
              CurrDecimalString := CONVERTSTR(CurrDecimalString,'.',DecimalSymbol)
            ELSE
              CurrDecimalString := CONVERTSTR(CurrDecimalString,',',DecimalSymbol);
            EVALUATE(EDIRecDocFields."Field Dec. Value",CurrDecimalString);
          END;
        EDIElement."Data Type"::Integer:
          BEGIN
            EDIRecDocFields."Field Text Value" := DELCHR(EDIRecDocFields."Field Text Value",'>',' ');
            IF EDIRecDocFields."Field Text Value" = '' THEN
              CurrDecimalString := '0'
            ELSE
              CurrDecimalString := EDIRecDocFields."Field Text Value";
            IF EDIRecDocFields."Reverse Sign" THEN
              CurrDecimalString := '-' + CurrDecimalString;
            EVALUATE (EDIRecDocFields."Field Integer Value",CurrDecimalString);
          END;
        EDIElement."Data Type"::"Date YYMMDD":
          IF EDIRecDocFields."Field Text Value" = '' THEN
            EDIRecDocFields."Field Date Value" := 0D
          ELSE BEGIN
            FieldTextValue := EDIRecDocFields."Field Text Value";
            FieldTextValue := DELCHR(FieldTextValue,'=','/');
            FieldTextValue := DELCHR(FieldTextValue,'=','-');
            CASE EDISetup."Local Date Format" OF
              EDISetup."Local Date Format"::"MM/DD/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,3,2) +
                  COPYSTR(FieldTextValue,5,2) +
                  COPYSTR(FieldTextValue,1,2));
              EDISetup."Local Date Format"::"DD/MM/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,5,2) +
                  COPYSTR(FieldTextValue,3,2) +
                  COPYSTR(FieldTextValue,1,2));
              EDISetup."Local Date Format"::"YY/MM/DD":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",FieldTextValue);
            END;
          END;
        EDIElement."Data Type"::"Date YYYYMMDD",
        EDIElement."Data Type"::"Date XML DateTime",
        EDIElement."Data Type"::"Date UTC":
          IF EDIRecDocFields."Field Text Value" = '' THEN
            EDIRecDocFields."Field Date Value" := 0D
          ELSE BEGIN
            IF ((EDIElement."Data Type" = EDIElement."Data Type"::"Date XML DateTime") OR
                (EDIElement."Data Type" = EDIElement."Data Type"::"Date UTC")) AND
               (EDIElement."Time Zone" = EDIElement."Time Zone"::Offset)
            THEN BEGIN
              UTCString2LocalDT(EDIRecDocFields."Field Text Value");
              FieldTextValue := MyLocalDT;
            END ELSE
              FieldTextValue := EDIRecDocFields."Field Text Value";
            FieldTextValue := DELCHR(FieldTextValue,'=','/');
            FieldTextValue := DELCHR(FieldTextValue,'=','-');
            FieldTextValue := DELCHR(FieldTextValue,'=','T');
            FieldTextValue := DELCHR(FieldTextValue,'=',':');
            CASE EDISetup."Local Date Format" OF
              EDISetup."Local Date Format"::"MM/DD/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,5,4) +
                  COPYSTR(FieldTextValue,1,4));
              EDISetup."Local Date Format"::"DD/MM/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,7,2) +
                  COPYSTR(FieldTextValue,5,2) +
                  COPYSTR(FieldTextValue,1,4));
              EDISetup."Local Date Format"::"YY/MM/DD":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,3,2) +
                  COPYSTR(FieldTextValue,5,2) +
                  COPYSTR(FieldTextValue,7,2));
            END;
          END;
        EDIElement."Data Type"::"Date DDMMYY":
          IF EDIRecDocFields."Field Text Value" = '' THEN
            EDIRecDocFields."Field Date Value" := 0D
          ELSE BEGIN
            FieldTextValue := EDIRecDocFields."Field Text Value";
            FieldTextValue := DELCHR(FieldTextValue,'=','/');
            FieldTextValue := DELCHR(FieldTextValue,'=','-');
            CASE EDISetup."Local Date Format" OF
              EDISetup."Local Date Format"::"MM/DD/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,3,2) +
                  COPYSTR(FieldTextValue,1,2) +
                  COPYSTR(FieldTextValue,5,2));
              EDISetup."Local Date Format"::"DD/MM/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",FieldTextValue);
              EDISetup."Local Date Format"::"YY/MM/DD":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,5,2) +
                  COPYSTR(FieldTextValue,3,2) +
                  COPYSTR(FieldTextValue,1,2));
            END;
          END;
        EDIElement."Data Type"::"Date DDMMYYYY":
          IF EDIRecDocFields."Field Text Value" = '' THEN
            EDIRecDocFields."Field Date Value" := 0D
          ELSE BEGIN
            FieldTextValue := EDIRecDocFields."Field Text Value";
            FieldTextValue := DELCHR(FieldTextValue,'=','/');
            FieldTextValue := DELCHR(FieldTextValue,'=','-');
            CASE EDISetup."Local Date Format" OF
              EDISetup."Local Date Format"::"MM/DD/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,3,2) +
                  COPYSTR(FieldTextValue,1,2) +
                  COPYSTR(FieldTextValue,5,4));
              EDISetup."Local Date Format"::"DD/MM/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",FieldTextValue);
              EDISetup."Local Date Format"::"YY/MM/DD":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(EDIRecDocFields."Field Text Value",7,2) +
                  COPYSTR(EDIRecDocFields."Field Text Value",3,2) +
                  COPYSTR(EDIRecDocFields."Field Text Value",1,2));
            END;
          END;
        EDIElement."Data Type"::"Date YYYYDDMM":
          IF EDIRecDocFields."Field Text Value" = '' THEN
            EDIRecDocFields."Field Date Value" := 0D
          ELSE BEGIN
            FieldTextValue := EDIRecDocFields."Field Text Value";
            FieldTextValue := DELCHR(FieldTextValue,'=','/');
            FieldTextValue := DELCHR(FieldTextValue,'=','-');
            CASE EDISetup."Local Date Format" OF
              EDISetup."Local Date Format"::"MM/DD/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,7,2) +
                  COPYSTR(FieldTextValue,5,2) +
                  COPYSTR(FieldTextValue,1,4));
              EDISetup."Local Date Format"::"MM/DD/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,5,2) +
                  COPYSTR(FieldTextValue,7,2) +
                  COPYSTR(FieldTextValue,1,4));
              EDISetup."Local Date Format"::"YY/MM/DD":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,3,2) +
                  COPYSTR(FieldTextValue,7,2) +
                  COPYSTR(FieldTextValue,5,2));
            END;
          END;
        EDIElement."Data Type"::"Date MMDDYY":
          IF EDIRecDocFields."Field Text Value" = '' THEN
            EDIRecDocFields."Field Date Value" := 0D
          ELSE BEGIN
            FieldTextValue := EDIRecDocFields."Field Text Value";
            FieldTextValue := DELCHR(FieldTextValue,'=','/');
            CASE EDISetup."Local Date Format" OF
              EDISetup."Local Date Format"::"MM/DD/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",FieldTextValue);
              EDISetup."Local Date Format"::"DD/MM/YYYY":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,3,2) +
                  COPYSTR(FieldTextValue,1,2) +
                  COPYSTR(FieldTextValue,5,2));
              EDISetup."Local Date Format"::"YY/MM/DD":
                EVALUATE(
                  EDIRecDocFields."Field Date Value",
                  COPYSTR(FieldTextValue,5,2) +
                  COPYSTR(FieldTextValue,1,2) +
                  COPYSTR(FieldTextValue,3,2));
            END;
          END;
        EDIElement."Data Type"::"Date MMDDYYYY":
          IF EDIRecDocFields."Field Text Value" = '' THEN
            EDIRecDocFields."Field Date Value" := 0D
          ELSE BEGIN
            FieldTextValue := EDIRecDocFields."Field Text Value";
            FieldTextValue := DELCHR(FieldTextValue,'=','-');
            FieldTextValue2 := FieldTextValue;
            Position := STRPOS(FieldTextValue2,'/');
            CASE EDISetup."Local Date Format" OF
              EDISetup."Local Date Format"::"MM/DD/YYYY":
                BEGIN
                  IF (Position = 0) OR
                     ((Position <> 0) AND
                      (STRLEN(FieldTextValue) = 10))
                  THEN BEGIN
                    IF Position <> 0 THEN
                      FieldTextValue := DELCHR(FieldTextValue,'=','/');
                    EVALUATE(
                      EDIRecDocFields."Field Date Value",FieldTextValue)
                  END ELSE BEGIN
                    Month := COPYSTR(FieldTextValue2,1,Position - 1);
                    FieldTextValue2 := COPYSTR(FieldTextValue2,Position + 1);
                    Position := STRPOS(FieldTextValue2,'/');
                    Day := COPYSTR(FieldTextValue2,1,Position - 1);
                    FieldTextValue2 := COPYSTR(FieldTextValue2,(Position + 1),4);
                    Year := FieldTextValue2;
                    EVALUATE(
                      EDIRecDocFields."Field Date Value",Month + '/' + Day + '/' + Year);
                  END;
                END;
              EDISetup."Local Date Format"::"DD/MM/YYYY":
                BEGIN
                  IF (Position = 0) OR
                     ((Position <> 0) AND
                      (STRLEN(FieldTextValue) = 10))
                  THEN BEGIN
                    IF Position <> 0 THEN
                      FieldTextValue := DELCHR(FieldTextValue,'=','/');
                    EVALUATE(
                      EDIRecDocFields."Field Date Value",
                      COPYSTR(FieldTextValue,3,2) +
                      COPYSTR(FieldTextValue,1,2) +
                      COPYSTR(FieldTextValue,5,4))
                  END ELSE BEGIN
                    Month := COPYSTR(FieldTextValue2,1,Position - 1);
                    FieldTextValue2 := COPYSTR(FieldTextValue2,Position + 1);
                    Position := STRPOS(FieldTextValue2,'/');
                    Day := COPYSTR(FieldTextValue2,1,Position - 1);
                    FieldTextValue2 := COPYSTR(FieldTextValue2,(Position + 1),4);
                    Year := FieldTextValue2;
                    EVALUATE(
                      EDIRecDocFields."Field Date Value",Day + '/' + Month + '/' + Year);
                  END;
                END;
              EDISetup."Local Date Format"::"YY/MM/DD":
                BEGIN
                  IF (Position = 0) OR
                     ((Position <> 0) AND
                      (STRLEN(FieldTextValue) = 10))
                  THEN BEGIN
                    IF Position <> 0 THEN
                      FieldTextValue := DELCHR(FieldTextValue,'=','/');
                    EVALUATE(
                      EDIRecDocFields."Field Date Value",
                      COPYSTR(FieldTextValue,5,4) +
                      COPYSTR(FieldTextValue,1,2) +
                      COPYSTR(FieldTextValue,3,2));
                  END ELSE BEGIN
                    Month := COPYSTR(FieldTextValue2,1,Position - 1);
                    FieldTextValue2 := COPYSTR(FieldTextValue2,Position + 1);
                    Position := STRPOS(FieldTextValue2,'/');
                    Day := COPYSTR(FieldTextValue2,1,Position - 1);
                    FieldTextValue2 := COPYSTR(FieldTextValue2,(Position + 1),4);
                    Year := FieldTextValue2;
                    EVALUATE(
                      EDIRecDocFields."Field Date Value",Year + '/' + Month + '/' + Day);
                  END;
                END;
            END;
          END;
        EDIElement."Data Type"::"Time HHMM":
          IF EDIRecDocFields."Field Text Value" = '' THEN
            EDIRecDocFields."Field Time Value" := 0T
          ELSE BEGIN
            FieldTextValue := EDIRecDocFields."Field Text Value";
            EVALUATE(
              EDIRecDocFields."Field Time Value",FieldTextValue);
          END;
        EDIElement."Data Type"::"DateTime YYYYMMDDHHMM",
        EDIElement."Data Type"::"DateTime XML":
          IF EDIRecDocFields."Field Text Value" = '' THEN
            EDIRecDocFields."Field DateTime Value" := 0DT
          ELSE BEGIN
            IF (EDIElement."Data Type" = EDIElement."Data Type"::"DateTime XML") AND
               (EDIElement."Time Zone" = EDIElement."Time Zone"::Offset)
            THEN BEGIN
              UTCString2LocalDT(EDIRecDocFields."Field Text Value");
              FieldTextValue := MyLocalDT;
            END ELSE
              FieldTextValue := EDIRecDocFields."Field Text Value";
            FieldTextValue := EDIRecDocFields."Field Text Value";
            FieldTextValue := DELCHR(FieldTextValue,'=','/');
            FieldTextValue := DELCHR(FieldTextValue,'=','-');
            FieldTextValue := DELCHR(FieldTextValue,'=','T');
            FieldTextValue := DELCHR(FieldTextValue,'=',':');
            CASE EDISetup."Local Date Format" OF
              EDISetup."Local Date Format"::"MM/DD/YYYY":
                BEGIN
                  EVALUATE(
                    FieldDateValue,
                    COPYSTR(FieldTextValue,5,4) +
                    COPYSTR(FieldTextValue,1,4));
                  EVALUATE(
                    FieldTimeValue,
                    COPYSTR(FieldTextValue,9,4));
                  EDIRecDocFields."Field DateTime Value" :=
                    CREATEDATETIME(FieldDateValue,FieldTimeValue);
                END;
              EDISetup."Local Date Format"::"DD/MM/YYYY":
                BEGIN
                  EVALUATE(
                    FieldDateValue,
                    COPYSTR(FieldTextValue,7,2) +
                    COPYSTR(FieldTextValue,5,2) +
                    COPYSTR(FieldTextValue,1,4));
                  IF EDITemplate."File Format" = EDITemplate."File Format"::XML THEN
                    EVALUATE(FieldTimeValue,COPYSTR(FieldTextValue,10,8))
                  ELSE
                    EVALUATE(
                      FieldTimeValue,
                      COPYSTR(FieldTextValue,9,4));
                  EDIRecDocFields."Field DateTime Value" :=
                    CREATEDATETIME(FieldDateValue,FieldTimeValue);
                END;
              EDISetup."Local Date Format"::"YY/MM/DD":
                BEGIN
                  EVALUATE(
                    FieldDateValue,
                    COPYSTR(FieldTextValue,3,2) +
                    COPYSTR(FieldTextValue,5,2) +
                    COPYSTR(FieldTextValue,7,4));
                  IF EDITemplate."File Format" = EDITemplate."File Format"::XML THEN
                    EVALUATE(FieldTimeValue,COPYSTR(FieldTextValue,10,8))
                  ELSE
                    EVALUATE(
                      FieldTimeValue,
                      COPYSTR(FieldTextValue,9,4));
                  EDIRecDocFields."Field DateTime Value" :=
                    CREATEDATETIME(FieldDateValue,FieldTimeValue);
                END;
            END;
          END;
      END;
    END;

    PROCEDURE EvaluateReverseConditional@1240030000();
    VAR
      CurrentEDIRecDocFields@1240030002 : Record 14002359;
      ReverseConditional@1240030001 : Record 14002359;
      ReverseConditionalFound@1240030000 : Boolean;
    BEGIN
      ReverseConditional.RESET;
      ReverseConditional.SETCURRENTKEY("Internal Doc. No.","Reverse Conditional");
      ReverseConditional.SETRANGE("Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
      ReverseConditional.SETRANGE("Reverse Conditional",TRUE);
      IF ReverseConditional.FIND('-') THEN BEGIN
        REPEAT
          ReverseConditionalFound := FALSE;
          EDIConditional.RESET;
          EDIConditional.SETRANGE("Trade Partner No.",ReverseConditional."Trade Partner No.");
          EDIConditional.SETRANGE("Navision Document",ReverseConditional."Navision Document");
          EDIConditional.SETRANGE("EDI Document No.",ReverseConditional."EDI Document No.");
          EDIConditional.SETRANGE(Version,ReverseConditional."EDI Version");
          EDIConditional.SETRANGE(Type,ReverseConditional.Type);
          EDIConditional.SETRANGE(Segment,ReverseConditional.Segment);
          EDIConditional.SETRANGE(Element,ReverseConditional.Element);
          EDIConditional.SETRANGE("Field Name",ReverseConditional."Field Name");
          EDIConditional.SETRANGE("Cond. Value",ReverseConditional."Reverse Cond. Value-1");
          EDIConditional.SETRANGE("Cond. Value-2",ReverseConditional."Reverse Cond. Value-2");
          EDIConditional.SETRANGE("Reverse Conditional",TRUE);
          IF EDIConditional.FIND('-') THEN
            REPEAT
              IF EDIConditional."Cond. Segment Not Present" = FALSE THEN BEGIN
                CurrentEDIRecDocFields.RESET;
                CurrentEDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
                CurrentEDIRecDocFields.SETRANGE(Segment,EDIConditional."Cond. Segment");
                CurrentEDIRecDocFields.SETRANGE(Element,EDIConditional."Cond. Element");
                IF CurrentEDIRecDocFields.FIND('-') THEN BEGIN
                  IF ReverseConditional.Segment = EDIConditional."Cond. Segment" THEN
                    CurrentEDIRecDocFields.SETRANGE(
                      "Reverse Cond. Group",ReverseConditional."Reverse Cond. Group")
                  ELSE
                    CurrentEDIRecDocFields.SETFILTER(
                      "Reverse Cond. Group",'>%1',ReverseConditional."Reverse Cond. Group");
                  IF CurrentEDIRecDocFields.FIND('-') THEN BEGIN
                    IF CurrentEDIRecDocFields."Received EDI Value" <> '' THEN BEGIN
                      CASE EDIConditional."Conditional Operator" OF
                        EDIConditional."Conditional Operator"::" ":
                          IF EDIConditional."Cond. Value" =
                            CurrentEDIRecDocFields."Received EDI Value"
                          THEN
                            ReverseConditionalFound := TRUE;
                        EDIConditional."Conditional Operator"::"<>":
                          IF EDIConditional."Cond. Value" <>
                            CurrentEDIRecDocFields."Received EDI Value"
                          THEN
                            ReverseConditionalFound := TRUE;
                      END;
                    END ELSE
                      IF EDIConditional."Cond. Value" =  CurrentEDIRecDocFields."Field Text Value" THEN
                        ReverseConditionalFound := TRUE;
                    END;
                    IF (ReverseConditionalFound) AND (EDIConditional."Cond. Segment-2" <> '') THEN BEGIN
                      ReverseConditionalFound := FALSE;
                      CurrentEDIRecDocFields.RESET;
                      CurrentEDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
                      CurrentEDIRecDocFields.SETRANGE(Segment,EDIConditional."Cond. Segment-2");
                      CurrentEDIRecDocFields.SETRANGE(Element,EDIConditional."Cond. Element-2");
                      IF ReverseConditional.Segment = EDIConditional."Cond. Segment-2" THEN
                        CurrentEDIRecDocFields.SETRANGE(
                          "Reverse Cond. Group",ReverseConditional."Reverse Cond. Group")
                      ELSE
                        CurrentEDIRecDocFields.SETFILTER(
                          "Reverse Cond. Group",'>%1',ReverseConditional."Reverse Cond. Group");
                      IF CurrentEDIRecDocFields.FIND('-') THEN BEGIN
                        IF CurrentEDIRecDocFields."Received EDI Value" <> '' THEN BEGIN
                          CASE EDIConditional."Conditional Operator-2" OF
                            EDIConditional."Conditional Operator-2"::" ":
                              IF EDIConditional."Cond. Value-2" =
                                UPPERCASE(CurrentEDIRecDocFields."Received EDI Value")
                              THEN
                                ReverseConditionalFound := TRUE;
                            EDIConditional."Conditional Operator-2"::"<>":
                              IF EDIConditional."Cond. Value-2" <>
                                UPPERCASE(CurrentEDIRecDocFields."Received EDI Value")
                              THEN
                                ReverseConditionalFound := TRUE;
                          END;
                        END ELSE
                          CASE EDIConditional."Conditional Operator-2" OF
                            EDIConditional."Conditional Operator-2"::" ":
                              IF EDIConditional."Cond. Value-2" =  CurrentEDIRecDocFields."Field Text Value" THEN
                                ReverseConditionalFound := TRUE;
                            EDIConditional."Conditional Operator-2"::"<>":
                              IF EDIConditional."Cond. Value-2" <>  CurrentEDIRecDocFields."Field Text Value" THEN
                                ReverseConditionalFound := TRUE;
                          END;
                        IF EDIConditional."Cond. Detail Segment" THEN BEGIN
                          ReverseConditionalFound := FALSE;
                          IF CurrentEDIRecDocFields."Segment Group" <> 0 THEN
                            ReverseConditionalFound := TRUE;
                        END;
                        IF EDIConditional."Cond. Non-Detail Segment" THEN BEGIN
                          ReverseConditionalFound := FALSE;
                          IF CurrentEDIRecDocFields."Segment Group" = 0 THEN
                            ReverseConditionalFound := TRUE;
                        END;
                      END;
                    END;
                  IF NOT ReverseConditionalFound THEN
                    ReverseConditional.DELETE;
                END;
              END ELSE BEGIN
                CurrentEDIRecDocFields.RESET;
                CurrentEDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
                CurrentEDIRecDocFields.SETRANGE(Segment,EDIConditional."Cond. Segment");
                IF CurrentEDIRecDocFields.FIND('-') THEN
                  IF ReverseConditional."Segment Group" > 0 THEN BEGIN
                    CurrentEDIRecDocFields.SETRANGE("Segment Group",ReverseConditional."Segment Group");
                    IF NOT CurrentEDIRecDocFields.FIND('-') THEN
                      ReverseConditionalFound := TRUE;
                  END ELSE BEGIN
                    CurrentEDIRecDocFields.SETFILTER(
                      "Reverse Cond. Group",'>%1',ReverseConditional."Reverse Cond. Group");
                    IF NOT CurrentEDIRecDocFields.FIND('-') THEN
                      ReverseConditionalFound := TRUE;
                  END
                ELSE
                  IF EDIConditional."Cond. Segment Not Present" THEN
                    ReverseConditionalFound := TRUE;
                IF NOT ReverseConditionalFound THEN
                  ReverseConditional.DELETE;
              END;
            UNTIL EDIConditional.NEXT = 0;
        UNTIL ReverseConditional.NEXT = 0;
      END;

      ReverseCond := FALSE;
    END;

    PROCEDURE EvaluateConditionalSequence@1240020001();
    BEGIN
      ConditionalFound := FALSE;
      EDIConditionalSequence.RESET;
      EDIConditionalSequence.SETRANGE("Trade Partner No.",EDIConditional."Trade Partner No.");
      EDIConditionalSequence.SETRANGE("EDI Document No.",EDIConditional."EDI Document No.");
      EDIConditionalSequence.SETRANGE(Version,EDIConditional.Version);
      EDIConditionalSequence.SETRANGE(Type,EDIConditional.Type);
      EDIConditionalSequence.SETRANGE(Segment,EDIConditional.Segment);
      EDIConditionalSequence.SETRANGE(Element,EDIConditional.Element);
      EDIConditionalSequence.SETRANGE("Cond. Segment",EDIConditional."Cond. Segment");
      EDIConditionalSequence.SETRANGE("Cond. Element",EDIConditional."Cond. Element");
      EDIConditionalSequence.SETRANGE("Cond. Value",EDIConditional."Cond. Value");
      EDIConditionalSequence.SETRANGE("Cond. Element-2",EDIConditional."Cond. Element-2");
      EDIConditionalSequence.SETRANGE("Cond. Value-2",EDIConditional."Cond. Value-2");
      EDIConditionalSequence.SETRANGE("Cond. Segment-2",EDIConditional."Cond. Segment-2");
      EDIConditionalSequence.SETRANGE(
        "Cond. Segment Not Present",EDIConditional."Cond. Segment Not Present");
      EDIConditionalSequence.SETRANGE("Cond. Detail Segment",EDIConditional."Cond. Detail Segment");
      EDIConditionalSequence.SETRANGE(
        "Cond. Non-Detail Segment",EDIConditional."Cond. Non-Detail Segment");
      EDIConditionalSequence.SETRANGE("Processing Sequence",EDIConditional."Processing Sequence");
      EDIConditionalSequence.SETRANGE("Cond. Sequence",EDIConditional."Cond. Sequence");
      EDIConditionalSequence.SETRANGE("Segment Group",EDIRecDocFields4."Segment Group");
      IF NOT EDIConditionalSequence.FIND('-') THEN BEGIN
        IF EDIRecDocFields."Segment Sequence" = EDIConditional."Cond. Sequence" THEN BEGIN
          EDIConditionalSequence.INIT;
          EDIConditionalSequence.RESET;
          EDIConditionalSequence."Trade Partner No." := EDIConditional."Trade Partner No.";
          EDIConditionalSequence."EDI Document No." := EDIConditional."EDI Document No.";
          EDIConditionalSequence.Version := EDIConditional.Version;
          EDIConditionalSequence.Type := EDIConditional.Type;
          EDIConditionalSequence."Processing Sequence" := EDIConditional."Processing Sequence";
          EDIConditionalSequence.Segment := EDIConditional.Segment;
          EDIConditionalSequence.Element := EDIConditional.Element;
          EDIConditionalSequence."Cond. Segment" := EDIConditional."Cond. Segment";
          EDIConditionalSequence."Cond. Element" := EDIConditional."Cond. Element";
          EDIConditionalSequence."Cond. Value" := EDIConditional."Cond. Value";
          EDIConditionalSequence."Cond. Sequence" := EDIConditional."Cond. Sequence";
          EDIConditionalSequence."Cond. Element-2" := EDIConditional."Cond. Element-2";
          EDIConditionalSequence."Cond. Value-2" := EDIConditional."Cond. Value-2";
          EDIConditionalSequence."Cond. Segment-2" := EDIConditional."Cond. Segment-2";
          EDIConditionalSequence."Segment Group" := EDIRecDocFields4."Segment Group";
          EDIConditionalSequence.INSERT;
          ConditionalFound := TRUE;
        END ELSE
          ConditionalFound := FALSE;
      END;
    END;

    PROCEDURE CheckForLineSegmentGroup@1240020005();
    BEGIN
      si := 0;
      IF FirstTotalXMLSegment = CurrentElementName THEN
        ProcessingLines := FALSE;
      IF NOT ProcessingLines THEN
        LineSegment := FALSE;
      REPEAT
        si := si + 1;
        IF EvaluateCurrSegment THEN BEGIN
          CurrXMLSegment2 := CurrXMLSegment;
          IF DELCHR(CurrXMLSegment2,'>',' ') = FirstDetailXMLSegment THEN BEGIN
            CurrXMLSegment := CurrXMLSegment2;
            CurrXMLSegment := DELCHR(CurrXMLSegment,'>',' ');
          END;
        END;
        IF LineSegmentArray[si] = CurrentElementName THEN BEGIN
          IF si = 1 THEN BEGIN
            ProcessingLines := TRUE;
            SegmentGroup := SegmentGroup + 1;
          END;
          LineSegment := TRUE;
        END;
      UNTIL (LineSegmentArray[si] = '') OR (LineSegment);
      IF (NOT LineSegment) OR (NOT ProcessingLines) THEN
        SegmentGroup := 0;
    END;

    PROCEDURE GetControlNo@19();
    VAR
      EDIRecDocField@1240020000 : Record 14002359;
    BEGIN
      EDIRecDocField.RESET;
      EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"E.D.I. Receive Document Hdr.");
      IF EDIRecDocField.FIND('-') THEN BEGIN
        CASE EDIRecDocField."Nav Field No."OF
          EDIRecDocHdr.FIELDNO("Group Control No."):
            EDIRecDocHdr."Group Control No." := EDIRecDocField."Field Text Value";
          EDIRecDocHdr.FIELDNO("Interchange Control No."):
            EDIRecDocHdr."Interchange Control No." := EDIRecDocField."Field Text Value";
          EDIRecDocHdr.FIELDNO("Transaction Set Control No."):
           EDIRecDocHdr."Transaction Set Control No." := EDIRecDocField."Field Text Value";
          EDIRecDocHdr.FIELDNO("Transaction Date"):
            EDIRecDocHdr."Transaction Date" := EDIRecDocField."Field Date Value";
          EDIRecDocHdr.FIELDNO("Transaction Date"):
            EDIRecDocHdr."Transaction Time" := EDIRecDocField."Field Time Value";
        END;
        EDIRecDocHdr.MODIFY;
      END;
    END;

    PROCEDURE FormatTransactionDateTime@1240021000();
    VAR
      EDIRecDocField@1240020000 : Record 14002359;
    BEGIN
      EDIRecDocField.RESET;
      EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
      EDIRecDocField.SETRANGE("XML Segment",'cXML');
      EDIRecDocField.SETRANGE("Attribute Name",'timestamp');
      IF EDIRecDocField.FIND('-') THEN BEGIN
         TransactionDateText := COPYSTR(EDIRecDocField."Field Text Value",1,10);
         TransactionDateText := DELCHR(TransactionDateText,'=','-');
         TransactionTimeText := COPYSTR(EDIRecDocField."Field Text Value",12,8);
      END ELSE
        EXIT;

      EDISetup.GET;
      IF TransactionTimeText <> '' THEN
        EVALUATE(TransactionTime,TransactionTimeText);

      IF TransactionDateText = '' THEN
        TransactionDate := 0D
      ELSE
        CASE STRLEN(TransactionDateText) OF
          6:
            CASE EDISetup."Local Date Format" OF
              EDISetup."Local Date Format"::"MM/DD/YYYY":
                IF EVALUATE(
                  TransactionDate,
                  COPYSTR(TransactionDateText,3,4) +
                  COPYSTR(TransactionDateText,1,2)) THEN;
              EDISetup."Local Date Format"::"DD/MM/YYYY":
                IF EVALUATE(
                  TransactionDate,
                  COPYSTR(TransactionDateText,5,2) +
                  COPYSTR(TransactionDateText,3,2) +
                  COPYSTR(TransactionDateText,1,2)) THEN;
              EDISetup."Local Date Format"::"YY/MM/DD":
                IF EVALUATE(
                  TransactionDate,TransactionDateText) THEN;
            END;
          8:
            CASE EDISetup."Local Date Format" OF
              EDISetup."Local Date Format"::"MM/DD/YYYY":
                IF EVALUATE(
                  TransactionDate,
                  COPYSTR(TransactionDateText,5,4) +
                  COPYSTR(TransactionDateText,1,4)) THEN;
              EDISetup."Local Date Format"::"DD/MM/YYYY":
                IF EVALUATE(
                  TransactionDate,
                  COPYSTR(TransactionDateText,7,2) +
                  COPYSTR(TransactionDateText,5,2) +
                  COPYSTR(TransactionDateText,1,4)) THEN;
              EDISetup."Local Date Format"::"YY/MM/DD":
                IF EVALUATE(
                  TransactionDate,
                  COPYSTR(TransactionDateText,3,2) +
                  COPYSTR(TransactionDateText,5,2) +
                  COPYSTR(TransactionDateText,7,2)) THEN;
            END;
        END;

        EDIRecDocHdr."Transaction Date"  := TransactionDate;
        EDIRecDocHdr."Transaction Time" := TransactionTime;
    END;

    PROCEDURE GenerateStructureFromPath@1(Path@1000 : Text;CurrentEDIDocument@1240020000 : Record 14002353);
    BEGIN
      LoadTradePtnr;
      EDIDocument := CurrentEDIDocument;
      DocumentElement := EDIDocument."EDI Document No. Node List";
      DocsInFile := 0;

      EDISegment.RESET;
      EDISegment.SETRANGE("Trade Partner No.",CurrentEDIDocument."Trade Partner No.");
      EDISegment.SETRANGE("Navision Document",CurrentEDIDocument."Navision Document");
      EDISegment.SETRANGE("EDI Document No.",CurrentEDIDocument."EDI Document No.");
      EDISegment.SETRANGE(Version,CurrentEDIDocument.Version);
      EDISegment.SETRANGE("Repeat Segment",TRUE);
      IF EDISegment.FIND('-') THEN
        DocumentElement := EDISegment."Node List Path";

      EDISegment.RESET;
      EDISegment.SETRANGE("Trade Partner No.",CurrentEDIDocument."Trade Partner No.");
      EDISegment.SETRANGE("Navision Document",CurrentEDIDocument."Navision Document");
      EDISegment.SETRANGE("EDI Document No.",CurrentEDIDocument."EDI Document No.");
      EDISegment.SETRANGE(Version,CurrentEDIDocument.Version);
      EDISegment.FIND('-');
      EDISegment.TESTFIELD(Segment);
      FirstSegment := EDISegment.Segment;
      FirstXMLSegment := EDISegment."Node Name";

      i := 0;
      REPEAT
        IF EDISegment."Segment Type" = EDISegment."Segment Type"::Command THEN
          CASE EDISegment."Node Name" OF
            'LINE BEGIN':
              BEGIN;
                StoreSegID := TRUE;
                CLEAR(LineSegmentArray);
                EDISegment.NEXT;
                FirstDetailSegment := EDISegment.Segment;
                FirstDetailXMLSegment := EDISegment."Node Name";
                IF (STRLEN(FirstDetailXMLSegment) > 0) THEN
                  EvaluateCurrSegment := TRUE
                ELSE
                 EvaluateCurrSegment := FALSE;
              END;
            'LINE END':
              BEGIN;
                StoreSegID := FALSE;
                StoreSegComplete := TRUE;
                IF EDISegment.NEXT <> 0 THEN BEGIN
                  FirstTotalSegment := EDISegment.Segment;
                  FirstTotalXMLSegment := EDISegment."Node Name";
                END ELSE BEGIN
                  FirstTotalSegment := '';
                  FirstTotalXMLSegment := '';
                END;
              END;
          END;
        IF StoreSegID THEN BEGIN
          i := i + 1;
          LineSegmentArray[i] := EDISegment."Node Name";
        END;
      UNTIL (EDISegment.NEXT = 0) OR (StoreSegComplete);

      EDIConditionalSequence.RESET;
      EDIConditionalSequence.DELETEALL;

      InitializeXMLReaderSettings;
      CreateXMLReaderFromPath(Path);
      ParseXML(EDIDocument);
      XmlReader.Close;
    END;

    LOCAL PROCEDURE CreateXMLReaderFromPath@1240020014(Path@1000 : Text);
    BEGIN
      XmlReader := XmlReader.Create(Path,XmlReaderSettings);
    END;

    LOCAL PROCEDURE InitializeXMLReaderSettings@1240020013();
    BEGIN
      XmlUrlResolver := XmlUrlResolver.XmlUrlResolver;
      XmlUrlResolver.Credentials := NetCredentialCache.DefaultNetworkCredentials;

      XmlReaderSettings := XmlReaderSettings.XmlReaderSettings;
      XmlReaderSettings.DtdProcessing := XmlDtdProcessing.Ignore;
      XmlReaderSettings.XmlResolver := XmlUrlResolver;
    END;

    LOCAL PROCEDURE ParseXML@14(VAR EDIDocument@1001 : Record 14002353);
    VAR
      XMLStructure@1240020000 : TEMPORARY Record 14099300;
      ParentXMLStructure@1000 : TEMPORARY Record 14099300;
    BEGIN
      XMLStructure.RESET;
      XMLStructure.DELETEALL;
      ParentXMLStructure.RESET;
      ParentXMLStructure.DELETEALL;

      EntryNo := 0;

      // Parse the file and display each of the nodes.
      WHILE XmlReader.Read DO BEGIN
        XmlNodeType := XmlReader.NodeType;
        IF XmlNodeType.Equals(XmlNodeType.Element) THEN BEGIN
          ProcessXmlNodeElement(ParentXMLStructure,XMLStructure);

        END ELSE
          IF XmlNodeType.Equals(XmlNodeType.EndElement) THEN BEGIN
            IF ParentXMLStructure.Depth <> 0 THEN BEGIN
              XMLStructure.GET(
                ParentXMLStructure."Trade Partner",ParentXMLStructure."Navision Document",ParentXMLStructure."EDI Document No.",
                ParentXMLStructure.Version,ParentXMLStructure."Document Type",ParentXMLStructure."Parent Entry No.");
              ParentXMLStructure := XMLStructure;
            END
          END ELSE
            IF XmlNodeType.Equals(XmlNodeType.Text) THEN BEGIN
              IF XMLStructure.Value = '' THEN BEGIN
                XMLStructure.VALIDATE(Value,COPYSTR(XmlReader.Value,1,MAXSTRLEN(XMLStructure.Value)));
                XMLStructure.VALIDATE("Data Type",GetType(XMLStructure.Value));
                XMLStructure.MODIFY;
                CLEAR(XMLNodeValue);
              END;
              AttributeName := '';
              XMLNodeValue[1] := COPYSTR(XmlReader.Value,1,1024);
              XMLNodeValue[2] := COPYSTR(XmlReader.Value,1025,1024);
              XMLNodeValue[3] := COPYSTR(XmlReader.Value,1049,1024);
              XMLNodeValue[4] := COPYSTR(XmlReader.Value,2073,1024);
              XMLNodeValue[5] := COPYSTR(XmlReader.Value,3097,1024);
              IF HeaderInserted THEN
                MapElement;
            END ELSE
              IF XmlNodeType.Equals(XmlNodeType.Text) OR
                 XmlNodeType.Equals(XmlNodeType.XmlDeclaration) OR
                 XmlNodeType.Equals(XmlNodeType.ProcessingInstruction) OR
                 XmlNodeType.Equals(XmlNodeType.Comment)
              THEN
                ;
      END;
    END;

    LOCAL PROCEDURE ProcessXmlNodeElement@8(VAR ParentXMLStructure@1000 : TEMPORARY Record 14099300;VAR XMLStructure@1003 : TEMPORARY Record 14099300);
    VAR
      IsEmptyElement@1002 : Boolean;
    BEGIN
      NewSegment := TRUE;
      XMLStructure := ParentXMLStructure;
      XMLStructure."Is Parent" := TRUE;
      IF XMLStructure.MODIFY THEN;
      InsertElement(ParentXMLStructure,XMLStructure);
      ParentXMLStructure := XMLStructure;

      IsEmptyElement := XmlReader.IsEmptyElement;

      IF XmlReader.HasAttributes THEN BEGIN
        XMLStructure."Has Attributes" := TRUE;
        XMLStructure.MODIFY;
        IF XmlReader.MoveToFirstAttribute THEN
          REPEAT
            InsertAttribute(ParentXMLStructure,XMLStructure);

          UNTIL NOT XmlReader.MoveToNextAttribute;
      END;
      IF IsEmptyElement THEN BEGIN
        XMLStructure.GET(
          ParentXMLStructure."Trade Partner",ParentXMLStructure."Navision Document",ParentXMLStructure."EDI Document No.",
          ParentXMLStructure.Version,ParentXMLStructure."Document Type",ParentXMLStructure."Parent Entry No.");
        ParentXMLStructure := XMLStructure;
      END;
    END;

    LOCAL PROCEDURE InsertElement@17(ParentXMLStructure@1001 : Record 14099300;VAR XMLStructure@1002 : Record 14099300) : Boolean;
    BEGIN
      AttributeName := '';
      CurrentElementName := XmlReader.Name;

      WITH XMLStructure DO BEGIN
        RESET;
        SETRANGE("Parent Entry No.",ParentXMLStructure."Entry No.");
        SETRANGE("Trade Partner",ParentXMLStructure."Trade Partner");
        SETRANGE("Navision Document",ParentXMLStructure."Navision Document");
        SETRANGE("EDI Document No.",ParentXMLStructure."EDI Document No.");
        SETRANGE(Version,ParentXMLStructure.Version);
        SETRANGE("Document Type",ParentXMLStructure."Document Type");
        SETRANGE(Type,Type::Element);
        SETRANGE(Name,XmlReader.Name);
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          EntryNo += 1;
          "Entry No." := EntryNo;
          Type := Type::Element;
          Name := XmlReader.Name;
          "Trade Partner" := EDIDocument."Trade Partner No.";
          "Navision Document" := EDIDocument."Navision Document";
          "EDI Document No." := EDIDocument."EDI Document No.";
          Version:= EDIDocument.Version;
          "Document Type" := EDIDocument.Type;

          Path := STRSUBSTNO('%1/%2',ParentXMLStructure.Path,XmlReader.Name);
          "Node Name" := XmlReader.Name;
          Depth := XmlReader.Depth;
          "Parent Entry No." := ParentXMLStructure."Entry No.";
          INSERT(TRUE);
          GetSegment("Node Name",Path);
          EXIT(TRUE);
        END ELSE BEGIN
          GetSegment("Node Name",Path);
        END;
      END;
    END;

    LOCAL PROCEDURE InsertAttribute@18(ParentXMLStructure@1000 : TEMPORARY Record 14099300;VAR XMLStructure@1001 : TEMPORARY Record 14099300) : Boolean;
    BEGIN
      WITH XMLStructure DO BEGIN
        RESET;
        SETRANGE("Parent Entry No.",ParentXMLStructure."Entry No.");
        SETRANGE("Trade Partner",ParentXMLStructure."Trade Partner");
        SETRANGE("Navision Document",ParentXMLStructure."Navision Document");
        SETRANGE("EDI Document No.",ParentXMLStructure."EDI Document No.");
        SETRANGE(Version,ParentXMLStructure.Version);
        SETRANGE("Document Type",ParentXMLStructure."Document Type");
        SETRANGE(Type,Type::Attribute);
        SETRANGE(Name,XmlReader.Name);
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          EntryNo += 1;
          "Entry No." := EntryNo;
          Type := Type::Attribute;
          Name := XmlReader.Name;
          VALIDATE(Value,COPYSTR(XmlReader.Value,1,MAXSTRLEN(Value)));
          "Data Type" := GetType(Value);
          "Trade Partner" := EDIDocument."Trade Partner No.";
          "Navision Document" := EDIDocument."Navision Document";
          "EDI Document No." := EDIDocument."EDI Document No.";
          Version:= EDIDocument.Version;
          "Document Type" := EDIDocument.Type;

          Path := STRSUBSTNO('%1/@%2',ParentXMLStructure.Path,XmlReader.Name);
          "Node Name" := XmlReader.Name;
          Depth := XmlReader.Depth;
          "Parent Entry No." := ParentXMLStructure."Entry No.";
          INSERT(TRUE);

          CLEAR(XMLNodeValue);
          AttributeName := '';
          AttributeName := Name;
          XMLNodeValue[1] := COPYSTR(XmlReader.Value,1,1024);
          XMLNodeValue[2] := COPYSTR(XmlReader.Value,1025,1024);
          XMLNodeValue[3] := COPYSTR(XmlReader.Value,1049,1024);
          XMLNodeValue[4] := COPYSTR(XmlReader.Value,2073,1024);
          XMLNodeValue[5] := COPYSTR(XmlReader.Value,3097,1024);
          IF HeaderInserted THEN BEGIN
            EvalSegment(FALSE);
            MapElement;
          END;
          EXIT(TRUE);
        END ELSE BEGIN
          CLEAR(XMLNodeValue);
          AttributeName := '';
          AttributeName := XmlReader.Name;
          XMLNodeValue[1] := COPYSTR(XmlReader.Value,1,1024);
          XMLNodeValue[2] := COPYSTR(XmlReader.Value,1025,1024);
          XMLNodeValue[3] := COPYSTR(XmlReader.Value,1049,1024);
          XMLNodeValue[4] := COPYSTR(XmlReader.Value,2073,1024);
          XMLNodeValue[5] := COPYSTR(XmlReader.Value,3097,1024);
          IF HeaderInserted THEN BEGIN
            EvalSegment(FALSE);
            MapElement;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetType@2(Value@1000 : Text) : Integer;
    VAR
      DummyXMLStructure@1001 : Record 14099300;
      Decimal@1003 : Decimal;
    BEGIN
      IF Value = '' THEN
        EXIT(DummyXMLStructure."Data Type"::Text);

      IF EVALUATE(Decimal,Value) THEN
        EXIT(DummyXMLStructure."Data Type"::Decimal);

      EXIT(DummyXMLStructure."Data Type"::Text)
    END;

    PROCEDURE GetSegment@1240020012(EDINode@1240020002 : Text[250];NodePath@1240020008 : Text[250]);
    BEGIN
      PreviousSegment := CurrSegment;
      EDISegment.RESET;
      EDISegment.SETRANGE("Trade Partner No.",EDIDocument."Trade Partner No.");
      EDISegment.SETRANGE("Navision Document",EDIDocument."Navision Document");
      EDISegment.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
      EDISegment.SETRANGE(Version,EDIDocument.Version);
      EDISegment.SETRANGE("Node Name",EDINode);
      EDISegment.SETRANGE("Segment Type",EDISegment."Segment Type"::Segment);
      EDISegment.SETRANGE("Node List Path",NodePath);
      IF EDISegment.FIND('-') THEN BEGIN
        IF CurrentElementName = FirstXMLSegment THEN BEGIN
          IF EDISegment."Node Name" = CurrentElementName THEN
            IF HeaderInserted = FALSE THEN
              InsertRecDocHdr := TRUE;
        END ELSE BEGIN
          IF (DocumentElement <> '') AND
             (NodePath = DocumentElement)
          THEN BEGIN
            DocsInFile := DocsInFile + 1;
            IF DocsInFile > 1 THEN BEGIN
              NewDocument := TRUE;
              SegmentGroup := 0;
              ProcessingLines := FALSE;
              HeaderInserted := FALSE;
              ReverseCondGroup := 0;
              CreateRecDocHdr;
            END;
          END;
        END;
        EvalSegment(TRUE);
      END ELSE
        ERROR(
          Text011,
          EDINode,NodePath,EDITradePartner."No.",EDIDocument."EDI Document No.",EDIDocument."Navision Document");
    END;

    LOCAL PROCEDURE InvalidCharacterCheck@1240020002(VAR EDIRecDocFld@1240020000 : Record 14002359);
    VAR
      EDIInvalidCharacter@1240020001 : Record 14002389;
      EDIXMLMgmt@1240020003 : Codeunit 14099302;
      CleanString@1240020002 : Text[250];
    BEGIN
      IF (EDIRecDocFld."Field Type" <> EDIRecDocFields."Field Type"::Text) AND
         (EDIRecDocFld."Field Type" <> EDIRecDocFields."Field Type"::Code)
      THEN
        EXIT;
      EDIInvalidCharacter.RESET;
      EDIInvalidCharacter.SETRANGE("Trade Partner No.",EDIRecDocFld."Trade Partner No.");
      IF EDIInvalidCharacter.FIND('-') THEN BEGIN
        CleanString := '';
        CleanString := EDIXMLMgmt.CheckCleanString(EDIRecDocFld."Field Text Value",TRUE,EDIDocument);
        EDIRecDocFld."Field Text Value" := CleanString;
      END;
    END;

    PROCEDURE LocalDT2UTC@39(LocalDT@1000 : DateTime) UTC : DateTime;
    BEGIN
      IF LocalDT <> 0DT THEN
        UTC := ParseUTCString(FORMAT(LocalDT,0,9))
      ELSE
        UTC := 0DT;
    END;

    LOCAL PROCEDURE UTC2LocalDT@43(UTC@1000 : DateTime) LocalDT : DateTime;
    VAR
      UTCDifference@1019 : Duration;
    BEGIN
      IF UTC <> 0DT THEN BEGIN
        UTCDifference := UTC - LocalDT2UTC(UTC);
        LocalDT := UTC + UTCDifference;
      END ELSE
        LocalDT := 0DT;
      MyLocalDT := FORMAT(LocalDT,0,'<Year4,4>-<Month,2>-<Day,2><Hours24,2>:<Minutes,2>:<Seconds,2>');
    END;

    PROCEDURE UTCString2LocalDT@45(UTCString@1000 : Text) ResultDT : DateTime;
    VAR
      UTC@1018 : DateTime;
    BEGIN
      UTC := ParseUTCString(UTCString);
      ResultDT := UTC2LocalDT(UTC);
    END;

    LOCAL PROCEDURE ParseUTCString@41(UTCString@1000 : Text) ResultDT : DateTime;
    VAR
      Time@1004 : Time;
      Year@1005 : Integer;
      Month@1006 : Integer;
      Day@1007 : Integer;
      Hour@1008 : Integer;
      Minute@1003 : Integer;
      Sec@1002 : Integer;
      Millisec@1001 : Integer;
      PosDot@1009 : Integer;
      PosZ@1010 : Integer;
    BEGIN
      IF UTCString = '' THEN
        EXIT(0DT);
      EVALUATE(Year,COPYSTR(UTCString,1,4));
      EVALUATE(Month,COPYSTR(UTCString,6,2));
      EVALUATE(Day,COPYSTR(UTCString,9,2));
      EVALUATE(Hour,COPYSTR(UTCString,12,2));
      EVALUATE(Minute,COPYSTR(UTCString,15,2));
      EVALUATE(Sec,COPYSTR(UTCString,18,2));
      PosDot := STRPOS(UTCString,'.');
      PosZ := STRPOS(UTCString,'Z');
      IF PosDot > 0 THEN
        EVALUATE(Millisec,COPYSTR(UTCString,PosDot + 1,PosZ - PosDot - 1));
      EVALUATE(Time,STRSUBSTNO('%1:%2:%3.%4',Hour,Minute,Sec,Millisec));
      ResultDT := CREATEDATETIME(DMY2DATE(Day,Month,Year),Time);
    END;

    LOCAL PROCEDURE ValidateReferenceFields@1240021002();
    VAR
      EDIRecDocField@1240020000 : Record 14002359;
      cXMLDoc@1240020001 : Boolean;
    BEGIN
      EDIRecDocField.RESET;
      EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
      EDIRecDocField.SETRANGE("XML Segment",'cXML');
      IF EDIRecDocField.FIND('-') THEN
        cXMLDoc := TRUE
      ELSE
        cXMLDoc := FALSE;

      EDIRecDocField.RESET;
      EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
      EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"E.D.I. Receive Document Hdr.");
      EDIRecDocField.SETRANGE("Nav Field No.");
      IF EDIRecDocField.FIND('-') THEN BEGIN
        REPEAT
          CASE EDIRecDocField."Nav Field No." OF
            EDIRecDocHdr.FIELDNO("Reference ID"):
              EDIRecDocHdr."Reference ID" := EDIRecDocField."Field Text Value";
            EDIRecDocHdr.FIELDNO("Reference Type"):
              EDIRecDocHdr."Reference Type" := EDIRecDocField."Field Text Value";
            EDIRecDocHdr.FIELDNO("cXML Payload ID"):
              EDIRecDocHdr."cXML Payload ID" := EDIRecDocField."Field Text Value";
            EDIRecDocHdr.FIELDNO("Response ID"):
             EDIRecDocHdr."Response ID" := EDIRecDocField."Field Text Value";
          END;
        UNTIL EDIRecDocField.NEXT = 0;
      END;
      IF cXMLDoc THEN BEGIN
        EDIRecDocField.RESET;
        EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
        EDIRecDocField.SETRANGE("XML Segment",'cXML');
        EDIRecDocField.SETRANGE("Attribute Name",'payloadID');
        IF EDIRecDocField.FIND('-') THEN
          EDIRecDocHdr."cXML Payload ID" := EDIRecDocField."Field Text Value";
      END;
      EDIRecDocHdr."Response DTD URL" := EDIDocument."Doctype DTD URL";
      EDIRecDocHdr.MODIFY;
    END;

    PROCEDURE SetReceiveDocReferenceFields@1240020007();
    VAR
      EDIRecDocField@1240020001 : Record 14002359;
      EDILocalization@1240020002 : Codeunit 14002390;
      CustomerNo@1240020007 : Code[1024];
      CustomerReferenceNo@1240020006 : Text;
      VendorNo@1240020005 : Code[1024];
      VendorOrderNo@1240020004 : Text;
      VendorInvoiceNo@1240020003 : Text;
      VendorShipmentNo@1240020000 : Text;
    BEGIN
      EDIRecDocField.RESET;
      EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
      EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"E.D.I. Receive Document Hdr.");
      IF EDIRecDocField.FIND('-') THEN BEGIN
        CustomerReferenceNo := '';
        CustomerNo := '';
        VendorNo := '';
        VendorOrderNo := '';
        VendorInvoiceNo := '';
        VendorShipmentNo := '';
        REPEAT
          CASE EDIRecDocField."Nav Field No." OF
            EDIRecDocHdr.FIELDNO("Customer Reference No."):
              CustomerReferenceNo :=
                EDILocalization.LoadTextFields(CustomerReferenceNo,EDIRecDocField);
            EDIRecDocHdr.FIELDNO("Customer No."):
              CustomerNo :=
                EDILocalization.LoadTextFields(CustomerNo,EDIRecDocField);
            EDIRecDocHdr.FIELDNO("Vendor No."):
              VendorNo :=
                EDILocalization.LoadTextFields(VendorNo,EDIRecDocField);
            EDIRecDocHdr.FIELDNO("Vendor Order No."):
              VendorOrderNo :=
                EDILocalization.LoadTextFields(VendorOrderNo,EDIRecDocField);
            EDIRecDocHdr.FIELDNO("Vendor Invoice No."):
              VendorInvoiceNo :=
                EDILocalization.LoadTextFields(VendorInvoiceNo,EDIRecDocField);
            EDIRecDocHdr.FIELDNO("Vendor Shipment No."):
              VendorShipmentNo :=
                EDILocalization.LoadTextFields(VendorShipmentNo,EDIRecDocField);
          END;
        UNTIL EDIRecDocField.NEXT = 0;
        EDIRecDocHdr."Customer Reference No." :=
          COPYSTR(CustomerReferenceNo,1,MAXSTRLEN(EDIRecDocHdr."Customer Reference No."));
        EDIRecDocHdr."Customer No." := COPYSTR(CustomerNo,1,MAXSTRLEN(EDIRecDocHdr."Customer No."));
        EDIRecDocHdr."Vendor No." := COPYSTR(VendorNo,1,MAXSTRLEN(EDIRecDocHdr."Vendor No."));
        EDIRecDocHdr."Vendor Invoice No." :=
          COPYSTR(VendorInvoiceNo,1,MAXSTRLEN(EDIRecDocHdr."Vendor Invoice No."));
        EDIRecDocHdr."Vendor Shipment No." :=
          COPYSTR(VendorShipmentNo,1,MAXSTRLEN(EDIRecDocHdr."Vendor Shipment No."));
        EDIRecDocHdr.MODIFY;
      END;
    END;

    EVENT XmlReaderSettings@1240020009::ValidationEventHandler@28(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.Schema.ValidationEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

