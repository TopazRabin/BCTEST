OBJECT Codeunit 8810 Customer Layout - Statement
{
  OBJECT-PROPERTIES
  {
    Date=09/21/19;
    Time=12:00:00 PM;
    Version List=NAVW111.00.00.36462;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      StatementFileNameTxt@1002 : TextConst '@@@=Shortened form of ''Customer Statement'';ENU=Statement;ESM=Estado de cuenta;FRC=Relev‚;ENC=Statement';
      StatementReportNotFoundErr@1000 : TextConst 'ENU=No customer statement report has been set up.;ESM=No se ha configurado ning£n informe de estado de cuenta del cliente.;FRC=Aucun rapport de relev‚ client n''a ‚t‚ configur‚.;ENC=No customer statement report has been set up.';
      RunCustomerStatementsTxt@1005 : TextConst 'ENU=Run Customer Statements from Job Queue.;ESM=Ejecutar estados de cuenta del cliente desde la cola de proyecto.;FRC=Ex‚cutez des relev‚s client … partir de la file d''attente des tƒches.;ENC=Run Customer Statements from Job Queue.';
      DuplicateJobQueueRecordErr@1004 : TextConst 'ENU=Customer statements are already scheduled to run in the job queue.;ESM=Los estados de cuenta del cliente ya est n programados para ejecutarse en la cola de proyecto.;FRC=Des relev‚s client sont d‚j… programm‚s dans la file d''attente des travaux.;ENC=Customer statements are already scheduled to run in the job queue.';
      ConfirmRunRepInBackgroundQst@1003 : TextConst 'ENU=Do you want to set the job queue entry up to run immediately?;ESM=¨Desea establecer el movimiento de la cola de proyectos para que se ejecute inmediatamente?;FRC=Voulez-vous configurer l''‚criture de la file d''attente des tƒches pour qu''elle s''ex‚cute imm‚diatement?;ENC=Do you want to set the job queue entry up to run immediately?';

    PROCEDURE RunReport@2();
    VAR
      Customer@1001 : Record 18;
      ReportSelections@1003 : Record 77;
      CustomLayoutReporting@1002 : Codeunit 8800;
      RecRef@1000 : RecordRef;
    BEGIN
      RecRef.OPEN(DATABASE::Customer);
      CustomLayoutReporting.SetOutputFileBaseName(StatementFileNameTxt);
      CustomLayoutReporting.ProcessReportForData(
        ReportSelections.Usage::"C.Statement",RecRef,Customer.FIELDNAME("No."),DATABASE::Customer,Customer.FIELDNAME("No."),TRUE);
    END;

    PROCEDURE RunReportWithParameters@6(Parameters@1004 : Text);
    VAR
      Customer@1001 : Record 18;
      ReportSelections@1003 : Record 77;
      CustomLayoutReporting@1002 : Codeunit 8800;
      RecRef@1000 : RecordRef;
    BEGIN
      RecRef.OPEN(DATABASE::Customer);
      CustomLayoutReporting.SetOutputFileBaseName(StatementFileNameTxt);
      CustomLayoutReporting.SetPredefinedRequestParameters(Parameters);
      CustomLayoutReporting.ProcessReportForData(
        ReportSelections.Usage::"C.Statement",RecRef,Customer.FIELDNAME("No."),DATABASE::Customer,Customer.FIELDNAME("No."),TRUE);
    END;

    PROCEDURE RunReportWithoutRequestPage@5();
    VAR
      Customer@1001 : Record 18;
      ReportSelections@1003 : Record 77;
      CustomLayoutReporting@1002 : Codeunit 8800;
      RecRef@1000 : RecordRef;
    BEGIN
      RecRef.OPEN(DATABASE::Customer);
      CustomLayoutReporting.SetOutputFileBaseName(StatementFileNameTxt);
      CustomLayoutReporting.SetIgnoreRequestParameters(TRUE);
      CustomLayoutReporting.ProcessReportForData(
        ReportSelections.Usage::"C.Statement",RecRef,Customer.FIELDNAME("No."),DATABASE::Customer,Customer.FIELDNAME("No."),TRUE);
    END;

    PROCEDURE EnqueueReport@1105();
    VAR
      JobQueueEntry@1110 : Record 472;
      LocalReportSelections@1120 : Record 77;
      CustomLayoutReporting@1001 : Codeunit 8800;
      RequestParameters@1130 : Text;
      RunImmediately@1140 : Boolean;
      LocalRepId@1000 : Integer;
    BEGIN
      LocalReportSelections.SETRANGE(Usage,LocalReportSelections.Usage::"C.Statement");
      IF NOT LocalReportSelections.FINDFIRST THEN
        ERROR(StatementReportNotFoundErr);

      LocalRepId := LocalReportSelections."Report ID";
      RequestParameters := CustomLayoutReporting.RunRequestPage(LocalRepId);
      IF RequestParameters = '' THEN
        EXIT;

      RunImmediately := CONFIRM(ConfirmRunRepInBackgroundQst);
      CheckReportRunningInBackground;
      WITH JobQueueEntry DO BEGIN
        INIT;
        Scheduled := FALSE;
        Status := Status::"On Hold";
        Description := RunCustomerStatementsTxt;
        "Object ID to Run" := CODEUNIT::"Customer Statement via Queue";
        "Object Type to Run" := "Object Type to Run"::Codeunit;
        INSERT(TRUE); // it is required due to MODIFY called inside SetReportParameters
        SetXmlContent(RequestParameters);
        IF RunImmediately THEN
          SetStatus(Status::Ready);
      END;
    END;

    PROCEDURE CheckReportRunningInBackground@1();
    VAR
      JobQueueEntry@1000 : Record 472;
    BEGIN
      SetJobQueueEntryFilter(JobQueueEntry);
      IF JobQueueEntry.FINDFIRST THEN
        IF JobQueueEntry.DoesExistLocked THEN
          ERROR(DuplicateJobQueueRecordErr);
    END;

    LOCAL PROCEDURE SetJobQueueEntryFilter@3(VAR JobQueueEntry@1000 : Record 472);
    BEGIN
      JobQueueEntry.SETRANGE("Object ID to Run",CODEUNIT::"Customer Statement via Queue");
      JobQueueEntry.SETRANGE("Object Type to Run",JobQueueEntry."Object Type to Run"::Codeunit);
      JobQueueEntry.SETRANGE("User ID",USERID);
    END;

    BEGIN
    END.
  }
}

