OBJECT Codeunit 14000591 Item Ranking
{
  OBJECT-PROPERTIES
  {
    Date=07/01/18;
    Time=12:00:00 PM;
    Version List=UBP2.99;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            CalcAllLocations;
          END;

  }
  CODE
  {
    VAR
      InvMgtSetup@1240030010 : Record 14000551;
      AdvForSetup@1240020006 : Record 14002651;
      ItemClass@1240030001 : Record 14000554;
      ItemRanking@1240030016 : Record 14002656;
      ItemUsage@1240030002 : Record 14000557;
      Location@1240030000 : Record 14;
      Text001@1240030003 : TextConst 'ENU=Dead Stock Item Class can not be found.';
      LocInvPeriod@1240030021 : Record 14000553;
      ProcUnit@1240030022 : Record 14000555;
      InvMgt@1240030024 : Codeunit 14000553;
      ProgWindow@1240030004 : Dialog;
      Text002@1240030005 : TextConst 'ENU=Processing COGS Ranking';
      Text003@1240030006 : TextConst 'ENU=Location';
      AccumHits@1240030019 : Integer;
      AccumPercent@1240030018 : Decimal;
      CountLessDeadStock@1240030011 : Integer;
      CountToProcess@1240030013 : Integer;
      First@1240030012 : Boolean;
      LogEntryNo@1240030026 : Integer;
      TotalHits@1240030017 : Integer;
      WindowCount@1240030007 : Integer;
      WindowProcCount@1240030009 : Integer;
      WindowTotalCount@1240030008 : Integer;
      Text004@1240030014 : TextConst 'ENU=Progress';
      Text005@1240030015 : TextConst 'ENU=Processing Sales Hit Ranking';
      ZeroMovementCode@1240030020 : Code[10];
      Text006@1240030023 : TextConst 'ENU=Updating Procurement Units';
      Text007@1240030025 : TextConst 'ENU=Item Ranking';
      AnnualizedCOGS@1240020000 : Decimal;
      COGSArray@1240020001 : ARRAY [50] OF Decimal;
      i@1240020002 : Integer;
      AccumulatedCOGS@1240020003 : Decimal;
      TotalCount@1240020004 : Integer;
      AccumulatedCount@1240020005 : Integer;

    PROCEDURE CalcAllLocations@1240030001();
    BEGIN
      InvMgtSetup.GET;

      Location.RESET;
      Location.SETRANGE("Enable Adv. Forecasting",TRUE);
      IF Location.FINDSET THEN
        REPEAT
          InvMgt.CreateLogEntry(Location.Code,Text007,LogEntryNo);
          COMMIT;

          IF GUIALLOWED THEN BEGIN
            ProgWindow.OPEN(
              '#1#############################\' +
              PADSTR(Text003,12) + '#2########\' +
              PADSTR(Text004,12) + '@3@@@@@@@@@@@@@@@@@@');
            ProgWindow.UPDATE(1,Text002);
            ProgWindow.UPDATE(2,Location.Code);
          END;
          LocInvPeriod.RESET;
          LocInvPeriod.SETRANGE("Location Code", Location.Code);
          LocInvPeriod.SETRANGE("Period End Closed",TRUE);
          IF NOT LocInvPeriod.FINDLAST THEN
            EXIT;
          CASE InvMgtSetup."Item Class Ranking Type" OF
            InvMgtSetup."Item Class Ranking Type"::"Percent of Items":
              CalcPctOfItemsRanking(Location);
            InvMgtSetup."Item Class Ranking Type"::"Percent of COGS":
              CalcCOGSRanking(Location);
          END;
          COMMIT;
          IF GUIALLOWED THEN
            ProgWindow.UPDATE(1,Text005);
          CalcSalesHitRanking(Location);
          COMMIT;
          IF GUIALLOWED THEN
            ProgWindow.UPDATE(1,Text006);
          UpdateProcUnits(Location);

          IF GUIALLOWED THEN
            ProgWindow.CLOSE;

          InvMgt.CloseLogEntry(LogEntryNo,'');
          COMMIT;
        UNTIL Location.NEXT = 0;
    END;

    PROCEDURE CalcPctOfItemsRanking@1240020002(CurrLocation@1240020000 : Record 14);
    BEGIN

      ItemClass.SETRANGE("Dead Stock Class",TRUE);
      IF NOT ItemClass.FINDFIRST THEN
        ERROR(Text001);

      ItemUsage.RESET;
      ItemUsage.SETCURRENTKEY("Location Code","Starting Date","Annualized COGS");
      ItemUsage.SETRANGE("Location Code",CurrLocation.Code);
      ItemUsage.SETRANGE("Starting Date",LocInvPeriod."Starting Date");
      ItemUsage.SETFILTER("Annualized COGS",'<=%1',InvMgtSetup."Min. Dead Stock");
      WindowTotalCount := ItemUsage.COUNT;
      IF ItemUsage.FINDSET THEN
        REPEAT
          ItemUsage."Item Class Ranking" := ItemClass.Ranking;
          ItemUsage.MODIFY;
          WindowProcCount := WindowProcCount + 1;
          IF GUIALLOWED THEN
            IF WindowProcCount MOD 50 = 0 THEN
              ProgWindow.UPDATE(3,ROUND(10000 * WindowProcCount / WindowTotalCount,1));
        UNTIL ItemUsage.NEXT = 0;
      IF GUIALLOWED THEN
        ProgWindow.UPDATE(3,10000);

      ItemUsage.RESET;
      ItemUsage.SETCURRENTKEY("Location Code","Starting Date","Annualized COGS");
      ItemUsage.SETRANGE("Location Code",CurrLocation.Code);
      ItemUsage.SETRANGE("Starting Date",LocInvPeriod."Starting Date");
      ItemUsage.SETFILTER("Annualized COGS",'>%1',InvMgtSetup."Min. Dead Stock");
      IF ItemUsage.FINDSET THEN BEGIN
        CountLessDeadStock := ItemUsage.COUNT;
        WindowTotalCount := CountLessDeadStock;
        WindowProcCount := 0;
        First := TRUE;
        ItemClass.RESET;
        ItemClass.ASCENDING(FALSE);
        ItemClass.SETRANGE("Dead Stock Class",FALSE);
        IF ItemClass.FIND('-') THEN
          REPEAT
            CountToProcess :=
              ROUND(CountLessDeadStock * (ItemClass."Percentage of Items" / 100),1.0);
            IF First THEN BEGIN
              ItemUsage."Item Class Ranking" := ItemClass.Ranking;
              ItemUsage.MODIFY;
              First := FALSE;
            END;
            REPEAT
              IF ItemUsage.NEXT <> 0 THEN BEGIN
                ItemUsage."Item Class Ranking" := ItemClass.Ranking;
                ItemUsage.MODIFY;
              END;
              CountToProcess := CountToProcess - 1;
              WindowProcCount := WindowProcCount + 1;
              IF GUIALLOWED THEN
                IF WindowProcCount MOD 50 = 0 THEN
                  ProgWindow.UPDATE(3,ROUND(10000 * (WindowProcCount / WindowTotalCount),1));
            UNTIL CountToProcess < 1;
            IF ItemClass.Ranking = 1 THEN BEGIN
              REPEAT
                ItemUsage."Item Class Ranking" := ItemClass.Ranking;
                ItemUsage.MODIFY;
              UNTIL ItemUsage.NEXT = 0;
            END;
          UNTIL ItemClass.NEXT = 0;
      END;
    END;

    PROCEDURE CalcCOGSRanking@1240020000(CurrLocation@1240020000 : Record 14);
    BEGIN

      ItemClass.SETRANGE("Dead Stock Class",TRUE);
      IF NOT ItemClass.FIND('-') THEN
        ERROR(Text001);

      ItemUsage.RESET;
      ItemUsage.SETCURRENTKEY("Location Code","Starting Date","Annualized COGS");
      ItemUsage.SETRANGE("Location Code",CurrLocation.Code);
      ItemUsage.SETRANGE("Starting Date",LocInvPeriod."Starting Date");
      ItemUsage.CALCSUMS("Annualized COGS");
      AnnualizedCOGS := ItemUsage."Annualized COGS";
      CLEAR(COGSArray);
      i := 1;
      ItemClass.RESET;
      IF ItemClass.FINDSET THEN
        REPEAT
          COGSArray[i] := AnnualizedCOGS * (ItemClass."Percentage of COGS" / 100);
          IF i > 1 THEN
            COGSArray[i] := COGSArray[i] + COGSArray[i - 1];
          i := i + 1;
        UNTIL ItemClass.NEXT = 0;

      AccumulatedCOGS := 0;
      i := 1;
      ItemUsage.RESET;
      ItemUsage.SETCURRENTKEY("Location Code","Starting Date","Annualized COGS");
      ItemUsage.SETRANGE("Location Code",CurrLocation.Code);
      ItemUsage.SETRANGE("Starting Date",LocInvPeriod."Starting Date");
      ItemUsage.ASCENDING(FALSE);
      TotalCount := ItemUsage.COUNT;
      AccumulatedCount := 0;
      IF ItemUsage.FINDSET THEN
        REPEAT
          AccumulatedCount := AccumulatedCount + 1;
          AccumulatedCOGS := AccumulatedCOGS + ItemUsage."Annualized COGS";
          IF (AccumulatedCOGS <= COGSArray[i]) OR
             (COGSArray[i + 1] = 0)
          THEN
            ItemUsage."Item Class Ranking" := i
          ELSE BEGIN
            i := i + 1;
            ItemUsage."Item Class Ranking" := i;
          END;
          ItemUsage.MODIFY;
          IF GUIALLOWED THEN
            IF AccumulatedCount MOD 10 = 0 THEN
              ProgWindow.UPDATE(3,ROUND(10000 * (AccumulatedCount / TotalCount),1));
        UNTIL ItemUsage.NEXT = 0;
    END;

    PROCEDURE CalcSalesHitRanking@1240020003(CurrLocation@1240020000 : Record 14);
    BEGIN
      ItemRanking.RESET;
      ItemRanking.SETRANGE(ItemRanking.Percent,0);
      IF ItemRanking.FIND('-') THEN BEGIN
        ZeroMovementCode := ItemRanking.Code;
        ItemUsage.RESET;
        ItemUsage.SETCURRENTKEY("Location Code","Starting Date","Annual Usage Hits");
        ItemUsage.SETRANGE("Location Code",CurrLocation.Code);
        ItemUsage.SETRANGE("Starting Date",LocInvPeriod."Starting Date");
        ItemUsage.CALCSUMS("Annual Usage Hits");
        TotalHits := ItemUsage."Annual Usage Hits";
        AccumHits := 0;
        ItemRanking.RESET;
        ItemRanking.FIND('-');
        AccumPercent := ItemRanking.Percent;
        ItemUsage.RESET;
        ItemUsage.SETCURRENTKEY("Location Code","Starting Date","Annual Usage Hits");
        ItemUsage.SETRANGE("Location Code",CurrLocation.Code);
        ItemUsage.SETRANGE("Starting Date",LocInvPeriod."Starting Date");
        ItemUsage.ASCENDING(FALSE);
        WindowTotalCount := ItemUsage.COUNT;
        WindowProcCount := 0;
        IF ItemUsage.FIND('-') THEN
          REPEAT
            AccumHits := AccumHits + ItemUsage."Annual Usage Hits";
            IF (TotalHits <> 0) THEN BEGIN
              IF (AccumHits / TotalHits) * 100 <= AccumPercent THEN
                ItemUsage."Ranking Code" := ItemRanking.Code
              ELSE BEGIN
                ItemRanking.NEXT;
                AccumPercent := AccumPercent + ItemRanking.Percent;
                ItemUsage."Ranking Code" := ItemRanking.Code;
              END;
            END;
            IF ItemUsage."Annual Usage Hits" = 0 THEN
              ItemUsage."Ranking Code" := ZeroMovementCode;
            ItemUsage.MODIFY;
            WindowProcCount := WindowProcCount + 1;
            IF GUIALLOWED THEN
              IF WindowProcCount MOD 50 = 0 THEN
                ProgWindow.UPDATE(3,ROUND(10000 * (WindowProcCount / WindowTotalCount),1));
          UNTIL ItemUsage.NEXT = 0;
          ItemUsage.RESET;
      END;
    END;

    PROCEDURE UpdateProcUnits@1240020001(CurrLocation@1240020000 : Record 14);
    VAR
      UpdProcUnitFromItemUsage@1240020002 : Query 14000553;
    BEGIN
      // bottom class
      ItemClass.RESET;
      ItemClass.FINDLAST;

      // bottom rank
      ItemRanking.RESET;
      ItemRanking.FINDLAST;

      ProcUnit.SETRANGE("Location Code",CurrLocation.Code);
        WindowTotalCount := ProcUnit.COUNT;
      ProcUnit.MODIFYALL("Item Class Ranking", ItemClass.Ranking, FALSE);
      ProcUnit.MODIFYALL("Item Class Description", ItemClass.Description, FALSE);
      ProcUnit.MODIFYALL("Ranking Code", ItemRanking.Code, FALSE);
      ProcUnit.MODIFYALL("Periods With Sales", 0, FALSE);
      ProcUnit.MODIFYALL("Usage Formula Status", 0, FALSE);
      CLEAR(UpdProcUnitFromItemUsage);
      UpdProcUnitFromItemUsage.SETRANGE(Location_Code, CurrLocation.Code);
      UpdProcUnitFromItemUsage.SETRANGE(Starting_Date, LocInvPeriod."Starting Date");
      IF UpdProcUnitFromItemUsage.OPEN THEN BEGIN
        WHILE UpdProcUnitFromItemUsage.READ DO BEGIN
          IF ProcUnit.GET(UpdProcUnitFromItemUsage.Location_Code, UpdProcUnitFromItemUsage.Item_No, UpdProcUnitFromItemUsage.Variant_Code) THEN BEGIN
            ProcUnit."Item Class Ranking" := UpdProcUnitFromItemUsage.Item_Class_Ranking;
            ProcUnit."Item Class Description" := UpdProcUnitFromItemUsage.Item_Class_Description;
            ProcUnit."Ranking Code" := UpdProcUnitFromItemUsage.Ranking_Code;
            ProcUnit."Periods With Sales" := UpdProcUnitFromItemUsage.Periods_With_Sales;
            ProcUnit."Usage Formula Status" := UpdProcUnitFromItemUsage.Status;
            IF (ProcUnit."Usage Formula Status" = ProcUnit."Usage Formula Status"::Reoccuring) OR
                (ProcUnit."Usage Formula Status" = ProcUnit."Usage Formula Status"::Sporadic) OR
                (ProcUnit."Usage Formula Status" = ProcUnit."Usage Formula Status"::Seasonal) THEN BEGIN
              IF ProcUnit."Sporadic Rule" = AdvForSetup."New Proc. Unit Sporadic Rule" THEN
                ProcUnit."Sporadic Rule" := '';
            END;

            ProcUnit.MODIFY(FALSE);

          WindowProcCount := WindowProcCount + 1;
          IF GUIALLOWED THEN
              IF (WindowTotalCount <> 0) AND
                 (WindowProcCount MOD 50 = 0)
            THEN
              ProgWindow.UPDATE(3,ROUND(10000 * (WindowProcCount / WindowTotalCount),1));
          END;
        END;
      END;
    END;

    BEGIN
    END.
  }
}

