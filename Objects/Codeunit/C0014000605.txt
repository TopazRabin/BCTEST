OBJECT Codeunit 14000605 Receive Line Scanning Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=06/28/17;
    Time=12:00:00 PM;
    Version List=SE0.60.09.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Receive@1240030022 : Record 14000601;
      ReceiveSetup@1240030021 : Record 14000607;
      ReceiveStation@1240030020 : Record 14000608;
      ScaleInterface@1240030019 : Record 14000746;
      ShippingAgent@1240030018 : Record 291;
      ReceiveControl@1240030017 : Record 14000611;
      CurrFormReceiveLine@1240030000 : Record 14000602;
      ReceiveMgt@1240030015 : Codeunit 14000602;
      ScalesComm@1240030014 : Codeunit 37031002;
      InputLine@1240030011 : Text[250];
      Text001@1240030065 : TextConst 'ENU=%1 do not exists.';
      Text002@1240030064 : TextConst 'ENU=Type //HELP to see all options, use F6 for lookup';
      Text003@1240030063 : TextConst 'ENU=" (Location: "';
      Text004@1240030062 : TextConst 'ENU=%1 is not released or do not exist any longer.';
      Text005@1240030061 : TextConst 'ENU=Unknown command %1.';
      Text006@1240030060 : TextConst 'ENU=Order not selected.';
      Text007@1240030059 : TextConst 'ENU=%1 not found on orders.';
      Text008@1240030058 : TextConst 'ENU=Order not found.';
      Text009@1240030057 : TextConst 'ENU=Item not found';
      Text010@1240030056 : TextConst 'ENU=%1 not found on order';
      Text011@1240030055 : TextConst 'ENU=%1 must be 0, requires code for Custom.';
      Text012@1240030054 : TextConst 'ENU=Do you want to create an Item Cross Reference for %1?';
      Text013@1240030053 : TextConst 'ENU=Duplicate Serial Number on %1 Receive %2 is received but not ordered.';
      Text015@1240030051 : TextConst 'ENU=Required Serial No. not entered.';
      Text017@1240030049 : TextConst 'ENU=Required Lot No. not entered.';
      Text020@1240030046 : TextConst 'ENU=Required Warranty Date not entered.';
      Text022@1240030044 : TextConst 'ENU=Required Expiration Date not entered.';
      Text023@1240030043 : TextConst 'ENU=%1 is not released.';
      Text030@1240030042 : TextConst 'ENU=Open';
      Text031@1240030041 : TextConst 'ENU=Closed';
      Text032@1240030040 : TextConst 'ENU="Order: "';
      Text033@1240030039 : TextConst 'ENU="Receive: "';
      Text034@1240030038 : TextConst 'ENU=Command Not Allowed';
      Text035@1240030037 : TextConst 'ENU=Receive Still Open';
      Text036@1240030036 : TextConst 'ENU=No Open Receive';
      Text037@1240030035 : TextConst 'ENU=No Order Open';
      Text038@1240030034 : TextConst 'ENU=Order Open';
      Text040@1240030032 : TextConst 'ENU=Type %1 not handled.';
      Text041@1240030031 : TextConst 'ENU=No Item or Resource currently selected.';
      Text042@1240030030 : TextConst 'ENU=Only Item and Resource can be shown.';
      Text043@1240030029 : TextConst 'ENU=No. cannot be blank.';
      Text044@1240030028 : TextConst 'ENU=Type must be item.';
      Text045@1240030027 : TextConst 'ENU=Document is not released, Continue?';
      Text046@1240030026 : TextConst 'ENU="%1 %2 is not unique. "';
      Text047@1240030025 : TextConst 'ENU=Unknown command %1 translated from %2.';
      CurrFormClose@1240030066 : Boolean;
      CurrFormScaleWeightUpdate@1240030067 : Boolean;
      Text050@1240030001 : TextConst 'ENU=Quantity of %1 %2 is not sufficient.';
      Text051@1240030002 : TextConst 'ENU=Custom Code missing.';

    PROCEDURE SetValues@1240030005(CurrentReceiveControl@1240030000 : Record 14000611;CurrentReceiveSetup@1240030004 : Record 14000607;CurrentReceiveStation@1240030003 : Record 14000608;CurrentReceive@1240030001 : Record 14000601;CurrentCurrFormReceiveLine@1240030002 : Record 14000602);
    BEGIN
      ReceiveControl := CurrentReceiveControl;
      ReceiveSetup := CurrentReceiveSetup;
      ReceiveStation := CurrentReceiveStation;
      Receive := CurrentReceive;
      CurrFormReceiveLine := CurrentCurrFormReceiveLine;

      CurrFormClose := FALSE;
      CurrFormScaleWeightUpdate := FALSE;
    END;

    PROCEDURE GetValues@1240030006(VAR NewReceiveControl@1240030003 : Record 14000611;VAR NewReceiveSetup@1240030002 : Record 14000607;VAR NewReceiveStation@1240030001 : Record 14000608;VAR NewReceive@1240030000 : Record 14000601;VAR NewCurrFormClose@1240030005 : Boolean;VAR NewCurrFormScaleWeightUpdate@1240030004 : Boolean);
    BEGIN
      NewReceiveControl := ReceiveControl;
      NewReceiveSetup := ReceiveSetup;
      NewReceiveStation := ReceiveStation;
      NewReceive := Receive;

      NewCurrFormClose := NewCurrFormClose;
      NewCurrFormScaleWeightUpdate := NewCurrFormScaleWeightUpdate;
    END;

    PROCEDURE OnOpenFormCode@1240030003();
    BEGIN
      ReceiveSetup.GET;
      ReceiveStation.GetReceiveStation;
      ReceiveMgt.Initialize(ReceiveStation,ReceiveSetup);

      IF ReceiveStation."Scale Inferface Code" <> '' THEN
        ScaleInterface.GET(ReceiveStation."Scale Inferface Code");
      IF (ReceiveStation."Scale Update Interval (second)" <> 0) AND
         (ReceiveStation."Show What During Receive" =
          ReceiveStation."Show What During Receive"::"Scale Weight")
      THEN
        UpdateScaleWeight;
      ReceiveControl.INIT;
      ReceiveControl."Display Caption" := FORMAT(ReceiveStation."Show What During Receive");

      IF (ReceiveControl."Open Source Type" <> 0) AND (ReceiveControl."Open Source ID" <> '') THEN BEGIN
        ReceiveControl."Source Type" := ReceiveControl."Open Source Type";
        ReceiveControl."Source Subtype" := ReceiveControl."Open Source Subtype";
        ReceiveControl."Source ID" := ReceiveControl."Open Source ID";
        IF NOT GetHeader(ReceiveControl."Open Source ID") THEN
          ERROR(
            Text001,
            ReceiveControl.FormatSource(
              ReceiveControl."Open Source Type",ReceiveControl."Open Source Subtype",ReceiveControl."Open Source ID"));

        IF NOT OpenOrder THEN
          IF ReceiveStation."Confirm on Errors" THEN
            CurrFormClose := TRUE
          ELSE
            ERROR(ReceiveControl."Message Line");

        FormatMessage;

        UpdateOrderValues;
      END ELSE
        ReceiveControl."Message Line" := Text002;

      IF ReceiveSetup."Location Receiving" THEN
        ReceiveControl."Message Line" :=
          ReceiveControl."Message Line" + Text003 + ReceiveStation."Location Code" + ')';
    END;

    PROCEDURE UpdateSetup@1240030010();
    BEGIN
      ReceiveSetup.GET;
      CLEAR(ReceiveStation);
      ReceiveStation.GetReceiveStation;
      CLEAR(ReceiveMgt);
      ReceiveMgt.Initialize(ReceiveStation,ReceiveSetup);

      IF ReceiveStation."Scale Inferface Code" <> '' THEN
        ScaleInterface.GET(ReceiveStation."Scale Inferface Code");

      ReceiveControl.INIT;
      ReceiveControl."Display Caption" := FORMAT(ReceiveStation."Show What During Receive");
    END;

    PROCEDURE ParseInput@1(VAR CurrentInputLine@1240030000 : Text[250]);
    VAR
      PurchLine@1240030003 : Record 39;
      CommandTranslation@1240030005 : Record 14000614;
      TempInputLine@1240030001 : Text[250];
      ProcessItemInput@1240030002 : Boolean;
      CommandInputLine@1240030004 : Text[250];
    BEGIN
      IF ReceiveControl."Receive Open" THEN BEGIN
        IF Receive.GET(Receive."No.") THEN
          ReceiveControl."Receive Open" := NOT Receive.Closed
        ELSE
          ReceiveControl."Receive Open" := FALSE;

        IF NOT ReceiveControl."Receive Open" THEN BEGIN
          Receive.ClearTotalValueFields;
          Receive.TotalNetWeight;
        END;
      END;

      IF ReceiveControl."Order Open" THEN
        IF NOT ReceiveControl.TestReleased2(FALSE) THEN BEGIN
          SetMessage(
            STRSUBSTNO(
              Text004,ReceiveControl.FormatSource2));

          ReceiveControl.ClearOrderInfo;

          EXIT;
      END;

      CommandInputLine := UPPERCASE(CurrentInputLine);
      IF STRLEN(CurrentInputLine) > 2 THEN
        IF (COPYSTR(UPPERCASE(CurrentInputLine),1,2) = '//') AND
           (COPYSTR(UPPERCASE(CurrentInputLine),1,3) <> '//X')
        THEN BEGIN
          CommandTranslation.RESET;
          CommandTranslation.SETRANGE("Language ID",GLOBALLANGUAGE);
          CommandTranslation.SETRANGE(
            "Command Code",
            COPYSTR(UPPERCASE(CurrentInputLine),1,MAXSTRLEN(CommandTranslation."Command Code")));
          IF CommandTranslation.FIND('-') THEN BEGIN
            CommandTranslation.TESTFIELD("Replace Command Code");
            CommandInputLine := CommandTranslation."Replace Command Code";
          END;
        END;

      CASE COPYSTR(CommandInputLine,1,40) OF
        '//CPO','//CO':
          IF TestLegal(ReceiveStation."Close Order Command") THEN
            CloseOrder(FALSE,FALSE);
        '//CPOP','//COP':
          IF TestLegal(ReceiveStation."Close Order Print Command") THEN
            CloseOrder(TRUE,FALSE);
        '//CPOF','//COF':
          IF TestLegal(ReceiveStation."Close Order Force Command") THEN
            CloseOrder(FALSE,TRUE);
        '//CPOPF','//COPF','//CPOFP','//COFP':
          IF TestLegal(ReceiveStation."Close Order Print Force Cmd.") THEN
            CloseOrder(TRUE,TRUE);
         //<TPZ1626>
         '//CPW':
         IF TestLegal(ReceiveStation."Close Order Print Force Cmd.") THEN
            CloseOrderAndPutAway(TRUE,TRUE);
         //</TPZ1626>
        '//LPO','//LO':
          IF TestLegal(ReceiveStation."List Orders Command") THEN
            ListOrders;
          '//RPOQ','//ROQ':
          IF TestLegal(ReceiveStation."Reset Order Quantity Command") THEN
            ResetOrderQuantity;
        '//ACSR':
          IF TestLegal(ReceiveStation."Auto Create Sales Return Cmd.") THEN
            AutoCreateDocument(DATABASE::"Sales Header",5);
        '//ACPO':
          IF TestLegal(ReceiveStation."Auto Create Purchase Order Cmd") THEN
          AutoCreateDocument(DATABASE::"Purchase Header",1);
        '//VI':
          IF TestLegal(ReceiveStation."View Item Command") THEN
            ShowItemResource;
        '//CPP','//CCP','//CRP':
          IF TestLegal(ReceiveStation."Close Receive Print Command") THEN
            CloseReceive(TRUE,0,0,0);
        '//CP','//CC','//CR':
          IF TestLegal(ReceiveStation."Close Receive Command") THEN
            CloseReceive(FALSE,0,0,0);
        '//CLP','//CLC','//CLR':
          IF TestLegal(ReceiveStation."Copy Last Receive Command") THEN
            CopyLastReceive(FALSE);
        '//CLPP','//CLCP','//CLRP':
          IF TestLegal(ReceiveStation."Copy Last Receive Print Cmd.") THEN
            CopyLastReceive(TRUE);
        '//LP','//LC','//LR':
          ListReceives;
        '//VP','//VC','//VR':
          ViewReceive;
        '//OP','//OC','//OR':
          IF TestLegal(ReceiveStation."Open Receive Command") THEN
            OpenReceive;
        '//AP','//AC','//AR':
          IF TestLegal(ReceiveStation."Add Receive Command") THEN
            AddReceiveToReceive;
        '//AMP','//AMC','//AMR':
          IF TestLegal(ReceiveStation."Add Multiple Receives Command") THEN
            AddMultipleReceivesToReceive;
        '//ASP','//ASC','//ASR':
          IF TestLegal(ReceiveStation."Add Selected Receives Command") THEN
            AddSelectedReceivesToReceive;
        '//AAP','//AAC','//AAR':
          IF TestLegal(ReceiveStation."Add All Receives Command") THEN
            AddAllReceivesToReceive;
        '//PA','//RA':
          IF TestLegal(ReceiveStation."Receive All Command") THEN
            CreateShipComplete;
        '//PR','//RR':
          IF TestLegal(ReceiveStation."Receive Remaining Command") THEN
            ReceiveRemaining;
        '//RP':
           IF TestLegal(ReceiveStation."Receive Package Command") THEN
             ReceivePackage;
        '//VPO','//VO':
          IF TestLegal(ReceiveStation."View Order Command") THEN
            ViewOrder;
        '//VPOC','//VOC':
          IF TestLegal(ReceiveStation."View Order Comments Command") THEN
            ViewOrderComments(FALSE);
        '//VIA':
          ViewItemAction;
        '//VAIA':
          IF TestLegal(ReceiveStation."View All Item Actions Command") THEN
            ViewAllItemActions;
        '//SRB':
          IF TestLegal(ReceiveStation."Select Receive Bin Command") THEN
            SelectReceiveBin;
        '//SPB':
          IF TestLegal(ReceiveStation."Select Put-away Bin Command") THEN
            SelectPutawayBin;
        '//VWRL','//VWSL':
          IF TestLegal(ReceiveStation."View Whse. Receipt Lines Cmd.") THEN
            ViewWhseReceiptLines;
        '//DOP','//DOC','//DOR':
          DeleteOpenReceive;
        '//DAP','//DAC','//DAR':
          IF TestLegal(ReceiveStation."Delete All Receives Command") THEN
            DeleteAllReceives;
        '//TPC','//TCC','//TRC':
          IF TestLegal(ReceiveStation."Total Receive Count Command") THEN
            ChangeTotalReceiveCount;
        '//SMSN','//SMSLN','//SMLN','//SMS','//SMSL','//SML':
          IF TestLegal(ReceiveStation."Scan Missing Serial Lot Cmd.") THEN
            ScanSerialLot(FALSE);
        '//SASN','//SASLN','//SALN','//SAS','//SASL','//SAL':
          IF TestLegal(ReceiveStation."Scan Missing Serial Lot Cmd.") THEN
            ScanSerialLot(TRUE);
        '//PSPL','//PSRL':
          IF TestLegal(ReceiveStation."Print Std. Receive Labels Cmd.") THEN
            PrintStdReceiveLabel;
        '//PIL':
          IF TestLegal(ReceiveStation."Print Std. Receive Labels Cmd.") THEN
            PrintReceiveLineLabel;
        '//MPOL','//MOL':
          IF TestLegal(ReceiveStation."Missing Order Lines Command") THEN
            MissingOrderLines;
        '//OPW','//OPWEIGHT','//ORW','//ORWEIGHT':
          IF TestLegal(ReceiveStation."Override Receive Weight Cmd.") THEN
            WeightOverride;
        '//OPVOL','//OPVOLUME','//ORVOL','//ORVOLUME':
          IF TestLegal(ReceiveStation."Override Receive Volume Cmd.") THEN
            VolumeOverride;
        '//CLEAR','//CAI':
          ClearAllInfo;
        '//TAEQ':
          IF TestLegal(ReceiveStation."Toggle Always Enter Qty. Cmd.") THEN
            ToggleAlwaysEnterQuantity;
        '//MD','//MOP','//MPOP','//MOR','//MROR':
          IF TestLegal(ReceiveStation."Multi Document Command") THEN
            MultiDocReceive(FALSE);
        '//MDL','//MOPL','//MPOPL','//MORL','//MRORL':
          IF TestLegal(ReceiveStation."Multi Document Lookup Cmd") THEN
            MultiDocReceive(TRUE);
        '//ZERO','//Z':
          IF TestLegal(ReceiveStation."Zero Scale Command") THEN
            ReceiveMgt.ZeroScale(ScaleInterface);
        '//HELP':
          ShowHelp;
        '//MM':
          IF TestLegal(ReceiveStation."Main Menu Command") THEN
            OpenMainMenu;
        '//RS','//PS':
          ReceivingStatus;
        ELSE BEGIN
          IF COPYSTR(CommandInputLine,1,3) = '//X' THEN BEGIN
            IF TestLegal(ReceiveStation."Xtra Option Command") THEN
              SetStandardOption(COPYSTR(CommandInputLine,4,20));

            EXIT;
          END;

          IF COPYSTR(CommandInputLine,1,2) = '//' THEN BEGIN
            IF CommandInputLine <> CurrentInputLine THEN
              SetMessage(STRSUBSTNO(Text047,CommandInputLine,CurrentInputLine))
            ELSE
              SetMessage(STRSUBSTNO(Text005,CommandInputLine));
            EXIT;
          END;

          ProcessItemInput := ReceiveControl."Order Open";
          IF NOT ReceiveControl."Order Open" THEN BEGIN
            IF GetHeader(CurrentInputLine) THEN BEGIN
              IF NOT OpenOrder THEN
                EXIT;

              FormatMessage;
            END ELSE BEGIN
              IF ParseItemInput(CurrentInputLine,FALSE) THEN BEGIN
                PurchLine.RESET;
                PurchLine.SETCURRENTKEY("Document Type",Type,"No.");
                PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
                PurchLine.SETRANGE(Type,ReceiveControl."Input Type");
                PurchLine.SETRANGE("No.",ReceiveControl."Input No.");
                IF ReceiveSetup."Location Receiving" THEN
                  PurchLine.SETRANGE("Location Code",ReceiveStation."Location Code");
                PurchLine.SETRANGE("Over Receive",FALSE);
                IF PurchLine.FIND('-') THEN BEGIN
                  IF PAGE.RUNMODAL(0,PurchLine) = ACTION::LookupOK THEN BEGIN
                    ProcessItemInput := TRUE;
                    TempInputLine := PurchLine."Document No.";
                    ReceiveControl."Source Type" := DATABASE::"Purchase Header";
                    ReceiveControl."Source Subtype" := PurchLine."Document Type"::Order;
                    ReceiveControl."Source ID" := PurchLine."Document No.";
                    IF GetHeader(TempInputLine) THEN
                      IF NOT OpenOrder THEN BEGIN
                        ReceiveControl.ClearOrderInfo;

                        EXIT;
                      END;
                  END ELSE BEGIN
                    SetMessage(Text006);

                    ClearAllInfo;
                  END;
                END ELSE BEGIN
                  IF ReceiveControl."Input Variant Code" <> '' THEN
                    SetMessage(
                      STRSUBSTNO(
                        Text007,
                        STRSUBSTNO(
                          '%1 %2 %3',ReceiveControl."Input Type",ReceiveControl."Input No.",
                          ReceiveControl."Input Variant Code")))
                  ELSE
                    SetMessage(
                      STRSUBSTNO(
                        Text007,
                        STRSUBSTNO('%1 %2',ReceiveControl."Input Type",ReceiveControl."Input No.")));

                  ClearAllInfo;
                END;
              END ELSE BEGIN
                SetMessage(Text008);

                ClearAllInfo;
              END;
            END;
          END;

          IF ProcessItemInput THEN BEGIN
            IF NOT ParseItemInput(CurrentInputLine,FALSE) THEN BEGIN
              SetMessage(Text009);
              CurrentInputLine := '';

              ClearInputFields;
              EXIT;
            END;

            CASE ReceiveControl."Input Type" OF
              ReceiveControl."Input Type"::"Receive Details":
                IF NOT CreateLinesFromPostedReceive(CurrentInputLine) THEN
                  EXIT;
              ReceiveControl."Input Type"::"Package Details":
                IF NOT CreateLinesFromPostedPackage(CurrentInputLine) THEN
                  EXIT;
              ELSE BEGIN
                IF NOT ReceiveControl.GetLineInfo THEN BEGIN
                  IF ReceiveControl."Input Variant Code" <> '' THEN
                    SetMessage(
                      STRSUBSTNO(
                        Text010,
                        STRSUBSTNO(
                          '%1 %2 %3',ReceiveControl."Input Type",ReceiveControl."Input No.",
                          ReceiveControl."Input Variant Code")))
                  ELSE
                    SetMessage(
                      STRSUBSTNO(
                        Text010,
                        STRSUBSTNO('%1 %2',ReceiveControl."Input Type",ReceiveControl."Input No.")));
                  CurrentInputLine := '';

                  ClearInputFields;
                  EXIT;
                END;

                IF NOT EnterSerialLotNo THEN
                  EXIT;

                IF NOT TestForRequiredAction THEN
                  EXIT;

                IF NOT ReceiveControl."Receive Open" THEN BEGIN
                  CreateReceive;
                  COMMIT;
                END;
                CreateReceiveLine;
              END;
            END;
          END;
        END;
      END;

      IF ReceiveControl."Order Open" THEN
        UpdateOrderValues
      ELSE
        IF ReceiveControl."Close When Close Order" THEN
          CurrFormClose := TRUE
        ELSE
          ReceiveControl.ClearOrderInfo;
    END;

    LOCAL PROCEDURE ParseItemInput@10(CurrentInputLine@1240030000 : Text[250];OnlyFindItem@1240030013 : Boolean) : Boolean;
    VAR
      Item@1240030001 : Record 27;
      BarcodeConversion@1240030002 : Record 14000733;
      SerialLotNumberConversion@1240030003 : Record 14000731;
      ItemVariant@1240030004 : Record 5401;
      ItemUnitOfMeasure@1240030005 : Record 5404;
      UnitOfMeasure@1240030006 : Record 204;
      EShipTrackingCode@1240030007 : Record 14000721;
      ItemCrossReference@1240030011 : Record 5717;
      PostedReceive@1240030014 : Record 14000603;
      PostedPackage@1240030015 : Record 14000704;
      Pos@1240030009 : Integer;
      Priority@1240030010 : Integer;
      TempText@1240030012 : Text[250];
    BEGIN
      ClearInputFields;
      ReceiveControl."Scanned No." := COPYSTR(CurrentInputLine,1,MAXSTRLEN(ReceiveControl."Scanned No."));
      ReceiveControl."Input Serial Number" := '';
      ReceiveControl."Input Lot Number" := '';
      ReceiveControl."Input Warranty Date" := 0D;
      ReceiveControl."Input Expiration Date" := 0D;

      IF ReceiveSetup."Item No. Includes Ser. No." THEN BEGIN
        Pos := STRPOS(CurrentInputLine,ReceiveSetup."Item No. Delimiter");
        IF (Pos <= 1) OR (STRLEN(CurrentInputLine) = Pos) THEN
          ReceiveControl."Input No." := COPYSTR(CurrentInputLine,1,20)
        ELSE BEGIN
          ReceiveControl."Input No." := COPYSTR(CurrentInputLine,1,Pos - 1);
          TempText := COPYSTR(CurrentInputLine,Pos + 1);
          CASE ReceiveSetup."Item No. Delimiter Type" OF
            ReceiveSetup."Item No. Delimiter Type"::"Serial No.":
              ReceiveControl."Input Serial Number" :=
                COPYSTR(TempText,1,MAXSTRLEN(ReceiveControl."Input Serial Number"));
            ReceiveSetup."Item No. Delimiter Type"::"Lot No.":
              ReceiveControl."Input Lot Number" :=
                COPYSTR(TempText,1,MAXSTRLEN(ReceiveControl."Input Lot Number"));
            ReceiveSetup."Item No. Delimiter Type"::"Serial No.-Lot No.":
              BEGIN
                Pos := STRPOS(TempText,ReceiveSetup."Item No. Delimiter");
                IF Pos > 0 THEN BEGIN
                  ReceiveControl."Input Serial Number" :=
                    COPYSTR(
                      COPYSTR(TempText,1,Pos - 1),1,MAXSTRLEN(ReceiveControl."Input Serial Number"));
                  IF Pos < STRLEN(TempText) THEN
                    ReceiveControl."Input Lot Number" :=
                      COPYSTR(
                        COPYSTR(TempText,Pos + 1),1,MAXSTRLEN(ReceiveControl."Input Lot Number"));
                END ELSE
                  ReceiveControl."Input Serial Number" :=
                    COPYSTR(TempText,1,MAXSTRLEN(ReceiveControl."Input Serial Number"));
              END;
            ReceiveSetup."Item No. Delimiter Type"::"Lot No.-Serial No.":
              BEGIN
                Pos := STRPOS(TempText,ReceiveSetup."Item No. Delimiter");
                IF Pos > 0 THEN BEGIN
                  ReceiveControl."Input Lot Number" :=
                    COPYSTR(
                      COPYSTR(TempText,1,Pos - 1),1,MAXSTRLEN(ReceiveControl."Input Lot Number"));
                  IF Pos < STRLEN(TempText) THEN
                    ReceiveControl."Input Serial Number" :=
                      COPYSTR(
                        COPYSTR(TempText,Pos + 1),1,MAXSTRLEN(ReceiveControl."Input Serial Number"));
                END ELSE
                  ReceiveControl."Input Lot Number" :=
                    COPYSTR(TempText,1,MAXSTRLEN(ReceiveControl."Input Lot Number"));
              END;
          END;
        END;
      END ELSE
        ReceiveControl."Input No." := COPYSTR(CurrentInputLine,1,20);

      FOR Priority := 1 TO 10 DO
        CASE TRUE OF
          ReceiveControl."Input Type" <> ReceiveControl."Input Type"::" ":
            ;
          ReceiveSetup."Item Priority" = Priority:
            IF Item.GET(ReceiveControl."Input No.") THEN
              GetItemInputFields(Item,'','');
          ReceiveSetup."Barcode Conversion Priority" = Priority:
            IF BarcodeConversion.GET(ReceiveControl."Input No.") THEN BEGIN
              CASE BarcodeConversion.Type OF
                BarcodeConversion.Type::Item:
                  IF Item.GET(BarcodeConversion."Item No.") THEN
                    GetItemInputFields(
                      Item,BarcodeConversion."Variant Code",BarcodeConversion."Unit of Measure Code")
                  ELSE
                    EXIT(FALSE);
                ELSE
                  EXIT(FALSE);
              END;
            END ELSE BEGIN
            END;
          ReceiveSetup."Item Cross Reference Priority" = Priority:
            BEGIN
              ItemCrossReference.RESET;
              ItemCrossReference.SETCURRENTKEY(
                "Cross-Reference No.","Cross-Reference Type","Cross-Reference Type No.",
                ItemCrossReference."Discontinue Bar Code");
              ItemCrossReference.SETRANGE(
                "Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::"Bar Code");
              ItemCrossReference.SETRANGE("Cross-Reference No.",ReceiveControl."Input No.");
              ItemCrossReference.SETRANGE("Discontinue Bar Code",FALSE);
              IF ItemCrossReference.FIND('-') THEN BEGIN
                IF ReceiveSetup."Require Unique Identifier" THEN
                  IF ItemCrossReference.NEXT <> 0 THEN BEGIN
                    MESSAGE(Text046,ItemCrossReference.TABLECAPTION,ReceiveControl."Input No.");
                    EXIT(FALSE);
                  END;

                ReceiveControl."Input Type" := ReceiveControl."Input Type"::Item;
                ReceiveControl."Input No." := ItemCrossReference."Item No.";
                ReceiveControl."Input Variant Code" := ItemCrossReference."Variant Code";
                ReceiveControl."Input Unit of Measure Code" := ItemCrossReference."Unit of Measure";
                IF Item.GET(ReceiveControl."Input No.") THEN
                  GetItemInputFields(
                    Item,ReceiveControl."Input Variant Code",
                    ReceiveControl."Input Unit of Measure Code");
              END;
            END;
          ReceiveSetup."Common Item No. Priority" = Priority:
            BEGIN
              Item.RESET;
              Item.SETCURRENTKEY("Common Item No.");
              Item.SETRANGE(
                "Common Item No.",
                COPYSTR(ReceiveControl."Input No.",1,MAXSTRLEN(Item."Common Item No.")));
              IF Item.FIND('-') THEN BEGIN
                IF ReceiveSetup."Require Unique Identifier" THEN
                  IF Item.NEXT <> 0 THEN BEGIN
                    MESSAGE(Text046,Item.FIELDCAPTION("Common Item No."),ReceiveControl."Input No.");
                    EXIT(FALSE);
                  END;

                GetItemInputFields(Item,'','');
              END;
            END;
          ReceiveSetup."Vendor Item No. Priority" = Priority:
            BEGIN
              Item.RESET;
              Item.SETCURRENTKEY("Vendor Item No.");
              Item.SETFILTER(
                "Vendor Item No.",
                '@' + COPYSTR(ReceiveControl."Input No.",1,MAXSTRLEN(Item."Vendor Item No.")));
              IF Item.FIND('-') THEN BEGIN
                IF ReceiveSetup."Require Unique Identifier" THEN
                  IF Item.NEXT <> 0 THEN BEGIN
                    MESSAGE(Text046,Item.FIELDCAPTION("Vendor Item No."),ReceiveControl."Input No.");
                    EXIT(FALSE);
                  END;

                GetItemInputFields(Item,'','');
              END;
            END;
          ReceiveSetup."Item UPC/EAN Number Priority" = Priority:
            BEGIN
              Item.RESET;
              Item.SETCURRENTKEY("Item UPC/EAN Number");
              Item.SETFILTER(
                "Item UPC/EAN Number",
                '@' + COPYSTR(ReceiveControl."Input No.",1,MAXSTRLEN(Item."Item UPC/EAN Number")));
              IF Item.FIND('-') THEN BEGIN
                IF ReceiveSetup."Require Unique Identifier" THEN
                  IF Item.NEXT <> 0 THEN BEGIN
                    MESSAGE(Text046,Item.FIELDCAPTION("Item UPC/EAN Number"),ReceiveControl."Input No.");
                    EXIT(FALSE);
                  END;

                GetItemInputFields(Item,'','');
              END;
            END;
          ReceiveSetup."Std. Pack UPC/EAN No. Priority" = Priority:
            BEGIN
              ItemUnitOfMeasure.RESET;
              ItemUnitOfMeasure.SETCURRENTKEY("Std. Pack UPC/EAN Number");
              ItemUnitOfMeasure.SETFILTER(
                "Std. Pack UPC/EAN Number",'@' +
                COPYSTR(
                  ReceiveControl."Input No.",1,
                  MAXSTRLEN(ItemUnitOfMeasure."Std. Pack UPC/EAN Number")));
              IF ItemUnitOfMeasure.FIND('-') THEN BEGIN
                IF ReceiveSetup."Require Unique Identifier" THEN
                  IF ItemUnitOfMeasure.NEXT <> 0 THEN BEGIN
                    MESSAGE(
                      Text046,ItemUnitOfMeasure.FIELDCAPTION("Std. Pack UPC/EAN Number"),
                      ReceiveControl."Input No.");
                    EXIT(FALSE);
                  END;

                Item.GET(ItemUnitOfMeasure."Item No.");
                GetItemInputFields(Item,'',ItemUnitOfMeasure.Code);
              END;
            END;
          ReceiveSetup."Receive No. Details Priority" = Priority:
            BEGIN
              PostedReceive.RESET;
              PostedReceive.SETRANGE(
                "No.",COPYSTR(ReceiveControl."Input No.",1,MAXSTRLEN(PostedReceive."No.")));
              PostedReceive.SETRANGE("Original Receive No.",'');
              IF PostedReceive.FIND('-') THEN BEGIN
                ReceiveControl."Input Type" := ReceiveControl."Input Type"::"Receive Details";
                ReceiveControl."Input No." := PostedReceive."No.";
              END;
            END;
          ReceiveSetup."Rec. Ext. Track. Det. Priority" = Priority:
            BEGIN
              PostedReceive.RESET;
              PostedReceive.SETCURRENTKEY("External Tracking No.");
              PostedReceive.SETFILTER("External Tracking No.",'@' + ReceiveControl."Input No.");
              PostedReceive.SETRANGE("Original Receive No.",'');
              IF PostedReceive.FIND('-') THEN BEGIN
                IF ReceiveSetup."Require Unique Identifier" THEN
                  IF PostedReceive.NEXT <> 0 THEN BEGIN
                    MESSAGE(
                      Text046,
                      PostedReceive.TABLECAPTION + ' ' +
                      PostedReceive.FIELDCAPTION("External Tracking No."),
                      ReceiveControl."Input No.");
                    EXIT(FALSE);
                  END;

                ReceiveControl."Input Type" := ReceiveControl."Input Type"::"Receive Details";
                ReceiveControl."Input No." := PostedReceive."No.";
              END;
            END;
          ReceiveSetup."Receive UCC No. Det. Priority" = Priority:
            BEGIN
              PostedReceive.RESET;
              PostedReceive.SETCURRENTKEY("UCC No.");
              PostedReceive.SETFILTER("UCC No.",'@' + ReceiveControl."Input No.");
              PostedReceive.SETRANGE("Original Receive No.",'');
              IF PostedReceive.FIND('-') THEN BEGIN
                IF ReceiveSetup."Require Unique Identifier" THEN
                  IF PostedReceive.NEXT <> 0 THEN BEGIN
                    MESSAGE(
                      Text046,
                      PostedReceive.TABLECAPTION + ' ' + PostedReceive.FIELDCAPTION("UCC No."),
                      ReceiveControl."Input No.");
                    EXIT(FALSE);
                  END;

                ReceiveControl."Input Type" := ReceiveControl."Input Type"::"Receive Details";
                ReceiveControl."Input No." := PostedReceive."No.";
              END;
            END;
          ReceiveSetup."Package No. Details Priority" = Priority:
            BEGIN
              PostedPackage.RESET;
              PostedPackage.SETRANGE(
                "No.",COPYSTR(ReceiveControl."Input No.",1,MAXSTRLEN(PostedPackage."No.")));
              PostedPackage.SETRANGE("Original Package No.",'');
              IF PostedPackage.FIND('-') THEN BEGIN
                ReceiveControl."Input Type" := ReceiveControl."Input Type"::"Package Details";
                ReceiveControl."Input No." := PostedPackage."No.";
              END;
            END;
          ReceiveSetup."Pack. Ext. Track. Det Priority" = Priority:
            BEGIN
              PostedPackage.RESET;
              PostedPackage.SETCURRENTKEY("External Tracking No.");
              PostedPackage.SETFILTER("External Tracking No.",'@' + ReceiveControl."Input No.");
              PostedPackage.SETRANGE("Original Package No.",'');
              IF PostedPackage.FIND('-') THEN BEGIN
                IF ReceiveSetup."Require Unique Identifier" THEN
                  IF PostedPackage.NEXT <> 0 THEN BEGIN
                    MESSAGE(
                      Text046,
                      PostedPackage.TABLECAPTION + ' ' +
                      PostedPackage.FIELDCAPTION("External Tracking No."),
                      ReceiveControl."Input No.");
                    EXIT(FALSE);
                  END;

                ReceiveControl."Input Type" := ReceiveControl."Input Type"::"Package Details";
                ReceiveControl."Input No." := PostedPackage."No.";
              END;
            END;
          ReceiveSetup."Package UCC No. Det. Priority" = Priority:
            BEGIN
              PostedPackage.RESET;
              PostedPackage.SETCURRENTKEY("UCC No.");
              PostedPackage.SETFILTER("UCC No.",'@' + ReceiveControl."Input No.");
              PostedPackage.SETRANGE("Original Package No.",'');
              IF PostedPackage.FIND('-') THEN BEGIN
                IF ReceiveSetup."Require Unique Identifier" THEN
                  IF PostedPackage.NEXT <> 0 THEN BEGIN
                    MESSAGE(
                      Text046,
                      PostedPackage.TABLECAPTION + ' ' + PostedPackage.FIELDCAPTION("UCC No."),
                      ReceiveControl."Input No.");
                    EXIT(FALSE);
                  END;

                ReceiveControl."Input Type" := ReceiveControl."Input Type"::"Package Details";
                ReceiveControl."Input No." := PostedPackage."No.";
              END;
            END;
          ReceiveSetup."Custom Priority" = Priority:
            BEGIN
              MESSAGE(
                Text011,
                ReceiveSetup.FIELDNAME("Custom Priority"));
              EXIT(FALSE);

              // Add code here for Custom format
            END;
        END;

      IF ReceiveControl."Input Type" = ReceiveControl."Input Type"::" " THEN BEGIN
        IF ReceiveStation."Create Barcode Conversion" THEN BEGIN
          BarcodeConversion."Bar Code" := ReceiveControl."Input No.";
          BarcodeConversion.INIT;
          IF PAGE.RUNMODAL(0,Item) = ACTION::LookupOK THEN BEGIN
            CLEAR(ItemVariant);
            ItemVariant.SETRANGE("Item No.",Item."No.");
            IF ItemVariant.FIND('-') THEN
              IF ItemVariant.NEXT <> 0 THEN
                IF NOT (PAGE.RUNMODAL(0,ItemVariant) = ACTION::LookupOK) THEN
                  EXIT(FALSE);

            CLEAR(ItemUnitOfMeasure);
            ItemUnitOfMeasure.SETRANGE("Item No.",Item."No.");
            IF ItemUnitOfMeasure.FIND('-') THEN
              IF ItemUnitOfMeasure.NEXT <> 0 THEN
                IF NOT (PAGE.RUNMODAL(0,ItemUnitOfMeasure) = ACTION::LookupOK) THEN
                  EXIT(FALSE);

            CLEAR(BarcodeConversion);
            BarcodeConversion."Bar Code" := COPYSTR(CurrentInputLine,1,20);
            BarcodeConversion.Type := BarcodeConversion.Type::Item;
            BarcodeConversion."Item No." := Item."No.";
            BarcodeConversion."Variant Code" := ItemVariant.Code;
            BarcodeConversion."Unit of Measure Code" := ItemUnitOfMeasure.Code;
            BarcodeConversion.INSERT(TRUE);
            COMMIT;

            GetItemInputFields(
              Item,BarcodeConversion."Variant Code",BarcodeConversion."Unit of Measure Code");
          END ELSE
            EXIT(FALSE);
        END;

        IF ReceiveStation."Create Item Cross Reference" AND
           (ReceiveControl."Input Type" = ReceiveControl."Input Type"::" ")
        THEN BEGIN
          IF CONFIRM(Text012,FALSE,ReceiveControl."Input No.") THEN
            IF PAGE.RUNMODAL(0,Item) = ACTION::LookupOK THEN BEGIN
              CLEAR(ItemVariant);
              ItemVariant.SETRANGE("Item No.",Item."No.");
              IF ItemVariant.FIND('-') THEN
                IF ItemVariant.NEXT <> 0 THEN
                  IF NOT (PAGE.RUNMODAL(0,ItemVariant) = ACTION::LookupOK) THEN
                    EXIT(FALSE);

              CLEAR(ItemUnitOfMeasure);
              ItemUnitOfMeasure.SETRANGE("Item No.",Item."No.");
              IF ItemUnitOfMeasure.FIND('-') THEN
                IF ItemUnitOfMeasure.NEXT <> 0 THEN
                  IF NOT (PAGE.RUNMODAL(0,ItemUnitOfMeasure) = ACTION::LookupOK) THEN
                    EXIT(FALSE);

              CLEAR(ItemCrossReference);
              ItemCrossReference."Item No." := Item."No.";
              ItemCrossReference."Variant Code" := ItemVariant.Code;
              ItemCrossReference."Unit of Measure" := ItemUnitOfMeasure.Code;
              ItemCrossReference."Cross-Reference Type" :=
                ItemCrossReference."Cross-Reference Type"::"Bar Code";
              ItemCrossReference."Cross-Reference No." := COPYSTR(CurrentInputLine,1,20);
              ItemCrossReference.INSERT(TRUE);
              COMMIT;

              ItemCrossReference.RESET;
              ItemCrossReference.SETCURRENTKEY(
                "Cross-Reference No.","Cross-Reference Type","Cross-Reference Type No.",
                ItemCrossReference."Discontinue Bar Code");
              ItemCrossReference.SETRANGE(
                "Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::"Bar Code");
              ItemCrossReference.SETRANGE("Cross-Reference No.",ReceiveControl."Input No.");
              ItemCrossReference.SETRANGE("Discontinue Bar Code",FALSE);
              IF ItemCrossReference.FIND('-') THEN BEGIN
                ReceiveControl."Input Type" := ReceiveControl."Input Type"::Item;
                ReceiveControl."Input No." := ItemCrossReference."Item No.";
                ReceiveControl."Input Variant Code" := ItemCrossReference."Variant Code";
                ReceiveControl."Input Unit of Measure Code" := ItemCrossReference."Unit of Measure";
                IF Item.GET(ReceiveControl."Input No.") THEN
                  GetItemInputFields(
                    Item,ReceiveControl."Input Variant Code",
                    ReceiveControl."Input Unit of Measure Code");
              END ELSE
                EXIT(FALSE);
            END ELSE
              EXIT(FALSE);
        END;

        IF ReceiveControl."Input Type" = ReceiveControl."Input Type"::" " THEN
          EXIT(FALSE);
      END;

      IF (ReceiveControl."Input Serial Number" <> '') AND NOT OnlyFindItem THEN
        IF Item."E-Ship Tracking Code" <> '' THEN BEGIN
          EShipTrackingCode.GetEShipTrackingCodeItem(Item);
          IF EShipTrackingCode."Serial/Lot No. Conversion Code" <> '' THEN BEGIN
            SerialLotNumberConversion.GET(EShipTrackingCode."Serial/Lot No. Conversion Code");
            ReceiveControl."Input Serial Number" :=
              SerialLotNumberConversion.ConvertString(ReceiveControl."Input Serial Number");
          END;
        END;

      IF (ReceiveControl."Input Lot Number" <> '') AND NOT OnlyFindItem THEN
        IF Item."E-Ship Tracking Code" <> '' THEN BEGIN
          EShipTrackingCode.GetEShipTrackingCodeItem(Item);
          IF EShipTrackingCode."Serial/Lot No. Conversion Code" <> '' THEN BEGIN
            SerialLotNumberConversion.GET(EShipTrackingCode."Serial/Lot No. Conversion Code");
            ReceiveControl."Input Lot Number" :=
              SerialLotNumberConversion.ConvertString(ReceiveControl."Input Lot Number");
          END;
        END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE DuplicateSN@22() : Boolean;
    VAR
      ReceiveLine2@1240030000 : Record 14000602;
    BEGIN
      IF ReceiveControl."Input Serial Number" = '' THEN
        EXIT(FALSE);
      ReceiveLine2.RESET;
      ReceiveLine2.SETCURRENTKEY("No.","Serial No.");
      ReceiveLine2.SETRANGE("No.",ReceiveControl."Input No.");
      ReceiveLine2.SETRANGE("Serial No.",ReceiveControl."Input Serial Number");
      IF ReceiveLine2.FIND('-') THEN BEGIN
        SetMessage(
          STRSUBSTNO(
            Text013,
            ReceiveControl.FormatSource(
              ReceiveLine2."Source Type",ReceiveLine2."Source Subtype",ReceiveLine2."Source ID"),
            ReceiveLine2."Receive No."));
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetHeader@2(VAR CurrentInputLine@1240030001 : Text[250]) Resp@1240030000 : Boolean;
    VAR
      SalesHeader@1240030002 : Record 36;
      PurchHeader@1240030003 : Record 38;
      TransferHeader@1240030020 : Record 5740;
      Priority@1240030004 : Integer;
    BEGIN
      IF COPYSTR(CurrentInputLine,1,20) = '' THEN
        EXIT(FALSE);

      IF ReceiveControl."Source Type" <> 0 THEN BEGIN
        CASE ReceiveControl."Source Type" OF
          DATABASE::"Sales Header":
            IF SalesHeader.GET(ReceiveControl."Source Subtype",ReceiveControl."Source ID") THEN BEGIN
              ReceiveControl.TransferFromSalesHeader(SalesHeader);
              EXIT(TRUE);
            END;
          DATABASE::"Purchase Header":
            IF PurchHeader.GET(ReceiveControl."Source Subtype",ReceiveControl."Source ID") THEN BEGIN
              ReceiveControl.TransferFromPurchHeader(PurchHeader);
              EXIT(TRUE);
            END;
          DATABASE::"Transfer Header":
            IF TransferHeader.GET(ReceiveControl."Source ID") THEN BEGIN
              ReceiveControl.TransferFromTransferHeader(TransferHeader);
              EXIT(TRUE);
            END;
          ELSE
            ReceiveControl.ErrorUnknownSourceType2;
        END;
      END;

      FOR Priority := 1 TO 10 DO
        CASE TRUE OF
          ReceiveSetup."Sales Credit Memo Priority" = Priority:
            IF SalesHeader.GET(
                 SalesHeader."Document Type"::"Credit Memo",
                 COPYSTR(CurrentInputLine,1,MAXSTRLEN(SalesHeader."No.")))
            THEN BEGIN
              ReceiveControl.TransferFromSalesHeader(SalesHeader);
              EXIT(TRUE);
            END;
          ReceiveSetup."Sales Return Order Priority" = Priority:
            IF SalesHeader.GET(
                 SalesHeader."Document Type"::"Return Order",
                 COPYSTR(CurrentInputLine,1,MAXSTRLEN(SalesHeader."No.")))
            THEN BEGIN
              ReceiveControl.TransferFromSalesHeader(SalesHeader);
              EXIT(TRUE);
            END;
          ReceiveSetup."Purchase Order Priority" = Priority:
            IF PurchHeader.GET(
                 PurchHeader."Document Type"::Order,
                 COPYSTR(CurrentInputLine,1,MAXSTRLEN(PurchHeader."No.")))
            THEN BEGIN
              ReceiveControl.TransferFromPurchHeader(PurchHeader);
              EXIT(TRUE);
            END;
          ReceiveSetup."Purchase Invoice Priority" = Priority:
            IF PurchHeader.GET(
                 PurchHeader."Document Type"::Invoice,
                 COPYSTR(CurrentInputLine,1,MAXSTRLEN(PurchHeader."No.")))
            THEN BEGIN
              ReceiveControl.TransferFromPurchHeader(PurchHeader);
              EXIT(TRUE);
            END;
          ReceiveSetup."Transfer Order Priority" = Priority:
            IF TransferHeader.GET(COPYSTR(CurrentInputLine,1,MAXSTRLEN(TransferHeader."No."))) THEN BEGIN
              ReceiveControl.TransferFromTransferHeader(TransferHeader);
              EXIT(TRUE);
            END;
         END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CreateReceive@3();
    BEGIN
      IF ReceiveMgt.CreateReceive(Receive,ReceiveControl) THEN BEGIN
        FormatMessage;
      END ELSE
        SetMessage(ReceiveControl."Error Message");
    END;

    LOCAL PROCEDURE CreateReceiveLine@4() : Boolean;
    BEGIN
      IF ReceiveMgt.CreateReceiveLine(
           Receive,ReceiveControl,
           ReceiveControl."Line Unit of Measure Code",ReceiveControl."Line Quantity",0)
      THEN
        GetLineQty
      ELSE
        SetMessage(ReceiveControl."Error Message");
    END;

    LOCAL PROCEDURE EnterSerialLotNo@9() : Boolean;
    VAR
      Item@1240030001 : Record 27;
      ReceiveInput@1240030004 : Record 14000615;
      EReceiveEnterSerialNo@1240030003 : Page 14050054;
      EReceiveEnterLotNo@1240030005 : Page 14050055;
      EReceiveEnterWarrantyDate@1240030006 : Page 14050056;
      EReceiveEnterExpDate@1240030007 : Page 14050057;
      NoSeriesMgt@1240030002 : Codeunit 396;
    BEGIN
      IF (ReceiveControl."Input Serial Number" = '') AND ReceiveControl."Receive Serial Number"
      THEN BEGIN
        CASE TRUE OF
          ReceiveControl."Auto Create Serial No." AND
          (ReceiveControl."Input Type" = ReceiveControl."Input Type"::Item):
            BEGIN
              Item.GET(ReceiveControl."Input No.");
              Item.TESTFIELD("Serial Nos.");
              ReceiveControl."Input Serial Number" := NoSeriesMgt.GetNextNo(Item."Serial Nos.",0D,TRUE);
              COMMIT;
            END;
          NOT ReceiveControl."Receive Serial Number Late":
            BEGIN
              ReceiveInput.INIT;
              ReceiveInput.Type := ReceiveControl."Input Type";
              ReceiveInput."No." := ReceiveControl."Input No.";
              ReceiveInput."Variant Code" := ReceiveControl."Input Variant Code";
              ReceiveInput."Unit of Measure" := ReceiveControl."Input Unit of Measure Code";
              ReceiveInput.Description := ReceiveControl."Input Description";

              ReceiveInput."Serial No." := ReceiveControl."Input Serial Number";
              CLEAR(EReceiveEnterSerialNo);
              EReceiveEnterSerialNo.LOOKUPMODE(TRUE);
              EReceiveEnterSerialNo.SetReceiveInput(ReceiveInput);
              IF EReceiveEnterSerialNo.RUNMODAL <> ACTION::LookupOK THEN BEGIN
                SetMessage(Text015);
                ClearInputFields;
                EXIT(FALSE);
              END ELSE BEGIN
              EReceiveEnterSerialNo.GetReceiveInput(ReceiveInput);
              IF ReceiveInput."Serial No." = '' THEN BEGIN
                SetMessage(Text015);
                ClearInputFields;
                EXIT(FALSE);
              END;
              ReceiveControl."Input Serial Number" := ReceiveInput."Serial No.";
            END;
        END;
      END;
      END;
      IF DuplicateSN THEN
        EXIT(FALSE);

      IF (ReceiveControl."Input Lot Number" = '') AND ReceiveControl."Receive Lot Number" THEN BEGIN
        CASE TRUE OF
          ReceiveControl."Auto Create Lot No." AND
          (ReceiveControl."Input Type" = ReceiveControl."Input Type"::Item):
            BEGIN
              Item.GET(ReceiveControl."Input No.");
              Item.TESTFIELD("Lot Nos.");
              ReceiveControl."Input Lot Number" := NoSeriesMgt.GetNextNo(Item."Lot Nos.",0D,TRUE);
              COMMIT;
            END;
          NOT ReceiveControl."Receive Lot Number Late":
            BEGIN
              ReceiveInput.INIT;
              ReceiveInput.Type := ReceiveControl."Input Type";
              ReceiveInput."No." := ReceiveControl."Input No.";
              ReceiveInput."Variant Code" := ReceiveControl."Input Variant Code";
              ReceiveInput."Unit of Measure" := ReceiveControl."Input Unit of Measure Code";
              ReceiveInput.Description := ReceiveControl."Input Description";

              ReceiveInput."Lot No." := ReceiveControl."Input Lot Number";
              CLEAR(EReceiveEnterLotNo);
              EReceiveEnterLotNo.LOOKUPMODE(TRUE);
              EReceiveEnterLotNo.SetReceiveInput(ReceiveInput);
              IF EReceiveEnterLotNo.RUNMODAL <> ACTION::LookupOK THEN BEGIN
                SetMessage(Text017);
                ClearInputFields;
                EXIT(FALSE);
              END ELSE BEGIN
              EReceiveEnterLotNo.GetReceiveInput(ReceiveInput);
              IF ReceiveInput."Lot No." = '' THEN BEGIN
                SetMessage(Text017);
                ClearInputFields;
                EXIT(FALSE);
              END;
              ReceiveControl."Input Lot Number" := ReceiveInput."Lot No.";
            END;
        END;
      END;
      END;

      IF (ReceiveControl."Input Warranty Date" = 0D) AND
         ReceiveControl."Receive Warranty Date" AND NOT ReceiveControl."Receive Warranty Date Late"
      THEN BEGIN
        ReceiveInput.INIT;
        ReceiveInput.Type := ReceiveControl."Input Type";
        ReceiveInput."No." := ReceiveControl."Input No.";
        ReceiveInput."Variant Code" := ReceiveControl."Input Variant Code";
        ReceiveInput."Unit of Measure" := ReceiveControl."Input Unit of Measure Code";
        ReceiveInput.Description := ReceiveControl."Input Description";

        ReceiveInput."Warranty Date" := ReceiveControl."Input Warranty Date";
        CLEAR(EReceiveEnterWarrantyDate);
        EReceiveEnterWarrantyDate.LOOKUPMODE(TRUE);
        EReceiveEnterWarrantyDate.SetReceiveInput(ReceiveInput);
        IF EReceiveEnterWarrantyDate.RUNMODAL <> ACTION::LookupOK THEN BEGIN
          SetMessage(Text020);
          ClearInputFields;
          EXIT(FALSE);
        END ELSE BEGIN
        EReceiveEnterWarrantyDate.GetReceiveInput(ReceiveInput);
        IF ReceiveInput."Warranty Date" = 0D THEN BEGIN
          SetMessage(Text020);
          ClearInputFields;
          EXIT(FALSE);
        END;
        ReceiveControl."Input Warranty Date" := ReceiveInput."Warranty Date";
      END;

        IF ReceiveControl."Input Warranty Date" = 0D THEN BEGIN
          SetMessage(Text020);
          ClearInputFields;
          EXIT(FALSE);
        END;
      END;

      IF (ReceiveControl."Input Expiration Date" = 0D) AND
         ReceiveControl."Receive Expiration Date" AND NOT ReceiveControl."Receive Expiration Date Late"
      THEN BEGIN
        ReceiveInput.INIT;
        ReceiveInput.Type := ReceiveControl."Input Type";
        ReceiveInput."No." := ReceiveControl."Input No.";
        ReceiveInput."Variant Code" := ReceiveControl."Input Variant Code";
        ReceiveInput."Unit of Measure" := ReceiveControl."Input Unit of Measure Code";
        ReceiveInput.Description := ReceiveControl."Input Description";

        ReceiveInput."Expiration Date" := ReceiveControl."Input Expiration Date";
        CLEAR(EReceiveEnterExpDate);
        EReceiveEnterExpDate.LOOKUPMODE(TRUE);
        EReceiveEnterExpDate.SetReceiveInput(ReceiveInput);
        IF EReceiveEnterExpDate.RUNMODAL <> ACTION::LookupOK THEN BEGIN
          SetMessage(Text022);
          ClearInputFields;
          EXIT(FALSE);
        END ELSE BEGIN
        EReceiveEnterExpDate.GetReceiveInput(ReceiveInput);
        IF ReceiveInput."Expiration Date" = 0D THEN BEGIN
          SetMessage(Text022);
          ClearInputFields;
          EXIT(FALSE);
        END;
        ReceiveControl."Input Expiration Date" := ReceiveInput."Expiration Date";
      END;

        IF ReceiveControl."Input Expiration Date" = 0D THEN BEGIN
          SetMessage(Text022);
          ClearInputFields;
          EXIT(FALSE);
        END;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE TestForRequiredAction@21() : Boolean;
    VAR
      ReceiveRule@1240030000 : Record 14000612;
      Item@1240030001 : Record 27;
    BEGIN
      IF (ReceiveControl."Input Type" <> ReceiveControl."Input Type"::Item) OR
         (ReceiveControl."Input No." = '') OR
         NOT ReceiveStation."Correct Actions Early"
      THEN
        EXIT(TRUE);

      IF NOT Item.GET(ReceiveControl."Input No.") THEN
        EXIT(FALSE);
      ReceiveRule.GetReceiveRule(ReceiveControl."Input No.");
      IF ReceiveRule.ActionRequired(Item) THEN BEGIN
        Item.FILTERGROUP(2);
        Item.SETRECFILTER;
        Item.FILTERGROUP(0);
        IF PAGE.RUNMODAL(PAGE::"Verify Item Card",Item) <> ACTION::LookupOK THEN
          EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AddReceiveToReceive@39();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF ReceiveMgt.AddReceiveToReceive(Receive,ReceiveControl,'') THEN
        GetLineQty
      ELSE
        SetMessage(ReceiveControl."Error Message");
    END;

    LOCAL PROCEDURE AddAllReceivesToReceive@45();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      ReceiveMgt.AddAllReceivesToReceive(Receive,ReceiveControl);

      GetLineQty;
    END;

    LOCAL PROCEDURE AddMultipleReceivesToReceive@57();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF ReceiveMgt.AddMultipleReceivesToReceive(Receive,ReceiveControl) THEN
        GetLineQty
      ELSE
        SetMessage(ReceiveControl."Error Message");
    END;

    LOCAL PROCEDURE AddSelectedReceivesToReceive@66();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      ReceiveMgt.AddSelectedReceivesToReceive(Receive,ReceiveControl);
    END;

    LOCAL PROCEDURE CloseReceive@8(PrintLabel@1240030000 : Boolean;ScaleWeight@1240030001 : Decimal;ManualWeight@1240030002 : Decimal;ManualValue@1240030003 : Decimal);
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      CLEAR(ShippingAgent);

      IF ReceiveMgt.CloseReceive(
           Receive,ShippingAgent,ScaleInterface,ReceiveControl,PrintLabel)
      THEN BEGIN
        FormatMessage;
      END ELSE
        SetMessage(ReceiveControl."Error Message");
    END;

    LOCAL PROCEDURE CopyLastReceive@42(PrintLabel@1240030000 : Boolean);
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF ReceiveOpenError THEN
        EXIT;

      IF ReceiveMgt.CopyLastReceive(Receive,ReceiveControl,PrintLabel) THEN
        GetLineQty
      ELSE
        SetMessage(ReceiveControl."Error Message");
    END;

    LOCAL PROCEDURE CheckReceiveOpen@24();
    BEGIN
      ReceiveMgt.CheckReceiveOpen(Receive,ReceiveControl);

      RefreshHeader;

      FormatMessage;
    END;

    LOCAL PROCEDURE OpenOrder@69() : Boolean;
    BEGIN
      IF NOT ReceiveControl.TestReleased2(FALSE) THEN BEGIN
        SetMessage(STRSUBSTNO(Text023,ReceiveControl.FormatSource2));
        ReceiveControl.ClearOrderInfo;
        EXIT(FALSE);
      END;

      ReceiveSetup.GET;
      ReceiveStation.GetReceiveStation;
      ReceiveMgt.Initialize(ReceiveStation,ReceiveSetup);

      ReceiveControl."Multi Document No." := ReceiveControl."Source ID";
      ReceiveControl."Multi Document Receive" := FALSE;
      ReceiveControl."Order Open" := TRUE;

      IF ReceiveStation."Show Order Comments if Exists" THEN
        ViewOrderComments(TRUE);

      IF ReceiveStation."Select Receive Bin" THEN
        ReceiveMgt.SelectReceiveBin(ReceiveControl);

      IF ReceiveStation."Select Put-away Bin" THEN
        ReceiveMgt.SelectPutawayBin(ReceiveControl);

      CLEAR(ShippingAgent);

      ReceiveControl."Total Receive Count" := 0;
      CheckReceiveOpen;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CloseOrder@12(PrintOrder@1240030000 : Boolean;ForceClose@1240030001 : Boolean);
    VAR
      ShippingAgent@1240030002 : Record 291;
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF ReceiveOpenError THEN
        EXIT;

      CLEAR(ShippingAgent);

      IF ReceiveMgt.CloseOrder(
           ShippingAgent,ReceiveControl,PrintOrder,ForceClose)
      THEN BEGIN
        ClearAllInfo;

        IF ReceiveControl."Close When Close Order" THEN
          CurrFormClose := TRUE;
      END ELSE
        SetMessage(ReceiveControl."Error Message");
    END;

    PROCEDURE ListOrders@73();
    VAR
      SalesHeader@1240030000 : Record 36;
      PurchHeader@1240030001 : Record 38;
      TransferHeader@1240030003 : Record 5740;
      TempInputLine@1240030002 : Text[250];
    BEGIN
      IF (ReceiveControl."Source Type" = 0) AND NOT ReceiveControl."Order Open" THEN
        IF NOT ReceiveSetup.SelectSourceType(
                 ReceiveControl."Source Type",ReceiveControl."Source Subtype")
        THEN
          EXIT;

      CASE ReceiveControl."Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader.SETRANGE("Document Type",ReceiveControl."Source Subtype");
            IF ReceiveControl."Order Open" THEN BEGIN
              SalesHeader."Document Type" := ReceiveControl."Source Subtype";
              SalesHeader."No." := ReceiveControl."Source ID";
              SalesHeader.FIND;

              PAGE.RUNMODAL(PAGE::"Sales List",SalesHeader);

              RefreshHeader;
            END ELSE BEGIN
              ReceiveControl."Source Type" := 0;
              ReceiveControl."Source Subtype" := 0;

              IF PAGE.RUNMODAL(PAGE::"Sales List",SalesHeader) = ACTION::LookupOK THEN BEGIN
                ReceiveControl."Source Type" := DATABASE::"Sales Header";
                ReceiveControl."Source Subtype" := SalesHeader."Document Type";
                ReceiveControl."Source ID" := SalesHeader."No.";
                TempInputLine := SalesHeader."No.";
                ParseInput(TempInputLine);
              END;
            END;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader.SETRANGE("Document Type",ReceiveControl."Source Subtype");
            IF ReceiveControl."Order Open" THEN BEGIN
              PurchHeader."Document Type" := ReceiveControl."Source Subtype";
              PurchHeader."No." := ReceiveControl."Source ID";
              PurchHeader.FIND;

              PAGE.RUNMODAL(PAGE::"Purchase List",PurchHeader);

              RefreshHeader;
            END ELSE BEGIN
              ReceiveControl."Source Type" := 0;
              ReceiveControl."Source Subtype" := 0;

              IF PAGE.RUNMODAL(PAGE::"Purchase List",PurchHeader) = ACTION::LookupOK THEN BEGIN
                ReceiveControl."Source Type" := DATABASE::"Purchase Header";
                ReceiveControl."Source Subtype" := PurchHeader."Document Type";
                ReceiveControl."Source ID" := PurchHeader."No.";
                TempInputLine := PurchHeader."No.";
                ParseInput(TempInputLine);
              END;
            END;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            IF ReceiveControl."Order Open" THEN BEGIN
              TransferHeader."No." := ReceiveControl."Source ID";
              TransferHeader.FIND;

              PAGE.RUNMODAL(PAGE::"Transfer Orders",TransferHeader);

              RefreshHeader;
            END ELSE BEGIN
              ReceiveControl."Source Type" := 0;
              ReceiveControl."Source Subtype" := 0;

              IF PAGE.RUNMODAL(PAGE::"Transfer Orders",TransferHeader) = ACTION::LookupOK THEN BEGIN
                ReceiveControl."Source Type" := DATABASE::"Transfer Header";
                ReceiveControl."Source Subtype" := 0;
                ReceiveControl."Source ID" := TransferHeader."No.";
                TempInputLine := TransferHeader."No.";
                ParseInput(TempInputLine);
              END;
            END;
          END;
        ELSE
          ReceiveControl.ErrorUnknownSourceType2;
      END;
    END;

    PROCEDURE UpdateOrderValues@70();
    BEGIN
      ReceiveControl.CalculateOrderQtyToReceive;
    END;

    LOCAL PROCEDURE ListReceives@7();
    VAR
      Receive2@1240030000 : Record 14000601;
    BEGIN
      Receive2.RESET;

      IF ReceiveControl."Order Open" THEN BEGIN
        Receive2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        Receive2.SETRANGE("Source Type",ReceiveControl."Source Type");
        Receive2.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
        IF ReceiveControl."Multi Document Receive" THEN
          Receive2.SETFILTER("Source ID",ReceiveControl."Multi Document No.")
        ELSE
          Receive2.SETRANGE("Source ID",ReceiveControl."Source ID");
      END;
      IF ReceiveSetup."Location Receiving" THEN
        Receive2.SETRANGE("Location Code",ReceiveStation."Location Code");
      PAGE.RUNMODAL(PAGE::Receives,Receive2);
      IF ReceiveControl."Receive Open" THEN
        Receive.GET(Receive."No.");
    END;

    LOCAL PROCEDURE FormatMessage@14();
    BEGIN
      IF ReceiveControl."Order Open" THEN
        ReceiveControl."Order Message" := Text030
      ELSE
        ReceiveControl."Order Message" := Text031;
      IF ReceiveControl."Receive Open" THEN
        ReceiveControl."Receive Message" := Text030
      ELSE
        ReceiveControl."Receive Message" := Text031;

      ReceiveControl."Message Line" :=
        Text032 + ReceiveControl."Order Message" + '  ' + Text033 + ReceiveControl."Receive Message";
    END;

    LOCAL PROCEDURE CreateShipComplete@17();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF NOT ReceiveMgt.CreateShipComplete(Receive,ReceiveControl) THEN
        SetMessage(ReceiveControl."Error Message");

      ClearScreen;
      FormatMessage;
    END;

    LOCAL PROCEDURE ReceiveRemaining@67();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF NOT ReceiveMgt.ReceiveRemaining(Receive,ReceiveControl) THEN
        SetMessage(ReceiveControl."Error Message");

      ClearScreen;
      FormatMessage;
    END;

    LOCAL PROCEDURE DeleteOpenReceive@19();
    BEGIN
      IF ReceiveClosedError THEN
        EXIT;

      ReceiveMgt.DeleteOpenReceive(Receive,ReceiveControl);

      ClearScreen;
      FormatMessage;
    END;

    LOCAL PROCEDURE DeleteAllReceives@20();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      ReceiveMgt.DeleteAllReceives(ReceiveControl);

      ClearAllInfo;
    END;

    PROCEDURE ViewReceive@25();
    VAR
      Receive2@1240030000 : Record 14000601;
    BEGIN
      IF ReceiveClosedError THEN
        EXIT;

      Receive2.RESET;
      Receive2.RESET;
      Receive2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Receive2.SETRANGE("Source Type",ReceiveControl."Source Type");
      Receive2.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
      IF ReceiveControl."Multi Document Receive" THEN
        Receive2.SETFILTER("Source ID",ReceiveControl."Multi Document No.")
      ELSE
        Receive2.SETRANGE("Source ID",ReceiveControl."Source ID");
      Receive2.SETRANGE("No.",Receive."No.");
      IF ReceiveSetup."Location Receiving" THEN
        Receive2.SETRANGE("Location Code",ReceiveStation."Location Code");
      PAGE.RUNMODAL(PAGE::Receive,Receive2);
      Receive.GET(Receive."No.");

      Receive.ClearTotalValueFields;
      Receive.TotalNetWeight;

      GetLineQty;
    END;

    LOCAL PROCEDURE GetLineQty@26();
    VAR
      ReceiveLine2@1240030000 : Record 14000602;
    BEGIN
      ReceiveControl.CalculateQtyToReceive2;

      ReceiveLine2.RESET;
      ReceiveLine2.SETCURRENTKEY("Source Type","Source Subtype","Source ID","No.","Variant Code");
      ReceiveLine2.SETRANGE("Source Type",ReceiveControl."Source Type");
      ReceiveLine2.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
      IF ReceiveControl."Multi Document Receive" THEN
        ReceiveLine2.SETFILTER("Source ID",ReceiveControl."Multi Document No.")
      ELSE
        ReceiveLine2.SETRANGE("Source ID",ReceiveControl."Source ID");
      ReceiveLine2.SETRANGE("No.",ReceiveControl."Input No.");
      ReceiveLine2.SETRANGE("Variant Code",ReceiveControl."Input Variant Code");
      IF ReceiveSetup."Location Receiving" THEN
        ReceiveLine2.SETRANGE("Location Code",ReceiveStation."Location Code");
      ReceiveLine2.CALCSUMS("Quantity (Base)");

      ReceiveControl."Received Line Qty. (Base)" := ReceiveLine2."Quantity (Base)";
    END;

    LOCAL PROCEDURE ClearScreen@27();
    BEGIN
      ReceiveControl."Total Line Qty. (Base)" := 0;
      ReceiveControl."Received Line Qty. (Base)" := 0;
      ReceiveControl."Message Line" := '';

      ClearInputFields;
    END;

    LOCAL PROCEDURE ClearInputFields@13();
    BEGIN
      ReceiveControl."Input Type" := ReceiveControl."Input Type"::" ";
      ReceiveControl."Input No." := '';
      ReceiveControl."Input Serial Number" := '';
      ReceiveControl."Receive Serial Number" := FALSE;
      ReceiveControl."Receive Serial Number Late" := FALSE;
      ReceiveControl."Input Lot Number" := '';
      ReceiveControl."Receive Lot Number" := FALSE;
      ReceiveControl."Receive Lot Number Late" := FALSE;
      ReceiveControl."Input Warranty Date" := 0D;
      ReceiveControl."Receive Warranty Date" := FALSE;
      ReceiveControl."Receive Warranty Date Late" := FALSE;
      ReceiveControl."Input Expiration Date" := 0D;
      ReceiveControl."Receive Expiration Date" := FALSE;
      ReceiveControl."Receive Expiration Date Late" := FALSE;
      ReceiveControl."Input Description" := '';
      ReceiveControl."Input Variant Code" := '';
      ReceiveControl."Input Unit of Measure Code" := '';
      ReceiveControl."Input Qty. Per Unit of Measure" := 1;
      ReceiveControl."Input Always Enter Quantity" := FALSE;
      ReceiveControl."Line Description" := '';
      ReceiveControl."Input Base Unit of Meas. Code" := '';
      ReceiveControl."Scanned No." := '';
      ReceiveControl."Show Serial No. Info. Card" := FALSE;
      ReceiveControl."Show Lot No. Info. Card" := FALSE;
      ReceiveControl."Auto Create Serial No." := FALSE;
      ReceiveControl."Auto Create Lot No." := FALSE;
    END;

    LOCAL PROCEDURE GetItemInputFields@16(Item@1240030000 : Record 27;VariantCode@1240030001 : Code[10];UnitOfMeasureCode@1240030002 : Code[10]);
    VAR
      ItemUnitOfMeasure@1240030003 : Record 5404;
      ItemVariant@1240030004 : Record 5401;
      EShipTrackingCode@1240030005 : Record 14000721;
    BEGIN
      ReceiveControl."Input Type" := ReceiveControl."Input Type"::Item;
      ReceiveControl."Input No." := Item."No.";
      EShipTrackingCode.GetEShipTrackingCodeItem(Item);
      ReceiveControl."Receive Serial Number" := EShipTrackingCode."Receive Serial Number";
      ReceiveControl."Receive Serial Number Late" := EShipTrackingCode."Receive Serial Number Late";
      ReceiveControl."Receive Lot Number" := EShipTrackingCode."Receive Lot Number";
      ReceiveControl."Receive Lot Number Late" := EShipTrackingCode."Receive Lot Number Late";
      ReceiveControl."Receive Warranty Date" := EShipTrackingCode."Receive Warranty Date";
      ReceiveControl."Receive Warranty Date Late" := EShipTrackingCode."Receive Warranty Date Late";
      ReceiveControl."Receive Expiration Date" := EShipTrackingCode."Receive Expiration Date";
      ReceiveControl."Receive Expiration Date Late" := EShipTrackingCode."Receive Expiration Date Late";
      ReceiveControl."Input Description" := Item.Description;
      ReceiveControl."Input Variant Code" := VariantCode;
      IF ReceiveControl."Input Variant Code" <> '' THEN BEGIN
        ItemVariant.GET(ReceiveControl."Input No.",ReceiveControl."Input Variant Code");
        ReceiveControl."Input Description" := ItemVariant.Description;
      END;
      ReceiveControl."Input Unit of Measure Code" := UnitOfMeasureCode;
      IF ReceiveControl."Input Unit of Measure Code" <> '' THEN BEGIN
        ItemUnitOfMeasure.GET(ReceiveControl."Input No.",ReceiveControl."Input Unit of Measure Code");
        ReceiveControl."Input Qty. Per Unit of Measure" := ItemUnitOfMeasure."Qty. per Unit of Measure";
      END;
      ReceiveControl."Input Always Enter Quantity" := Item."Always Enter Quantity";
      IF ReceiveControl."Input Unit of Measure Code" <> '' THEN
        ReceiveControl."Line Description" :=
          STRSUBSTNO(
            '%1 %2 (%4) %3',
            FORMAT(ReceiveControl."Input Type"),ReceiveControl."Input No.",
            ReceiveControl."Input Description",ReceiveControl."Input Unit of Measure Code")
      ELSE
        ReceiveControl."Line Description" :=
          STRSUBSTNO(
            '%1 %2 %3',
            FORMAT(ReceiveControl."Input Type"),ReceiveControl."Input No.",
            ReceiveControl."Input Description");
      ReceiveControl."Input Base Unit of Meas. Code" := Item."Base Unit of Measure";
      ReceiveControl."Show Serial No. Info. Card" := EShipTrackingCode."Show Serial No. Info. Card";
      ReceiveControl."Show Lot No. Info. Card" := EShipTrackingCode."Show Lot No. Info. Card";
      ReceiveControl."Auto Create Serial No." := EShipTrackingCode."Auto Create Serial No.";
      ReceiveControl."Auto Create Lot No." := EShipTrackingCode."Auto Create Lot No.";
    END;

    LOCAL PROCEDURE WeightOverride@6();
    BEGIN
      IF ReceiveClosedError THEN
        EXIT;

      ReceiveMgt.WeightOverride(Receive);
    END;

    LOCAL PROCEDURE VolumeOverride@37();
    BEGIN
      IF ReceiveClosedError THEN
        EXIT;

      ReceiveMgt.VolumeOverride(Receive);
    END;

    PROCEDURE ViewOrder@11();
    VAR
      Finished@1240030000 : Boolean;
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      REPEAT
        ReceiveControl.ViewSourceDocument2;

        Finished := ReceiveControl.TestAllDocumentsReleased;
        IF NOT Finished THEN
          Finished := CONFIRM(Text045,FALSE);
      UNTIL Finished;

      RefreshHeader;
    END;

    LOCAL PROCEDURE ViewOrderComments@46(OnlyIfExist@1240030000 : Boolean);
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      ReceiveMgt.ViewDocumentComments(ReceiveControl,OnlyIfExist);
    END;

    LOCAL PROCEDURE ChangeTotalReceiveCount@35();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF ReceiveMgt.ChangeTotalReceiveCount(Receive,ReceiveControl) THEN BEGIN
      END ELSE
        SetMessage(ReceiveControl."Error Message");
    END;

    LOCAL PROCEDURE ClearAllInfo@33();
    BEGIN
      CLEAR(Receive);
      ReceiveControl."Receive Open" := FALSE;
      ReceiveControl."Last Receive No." := 0;
      ReceiveControl.ClearOrderInfo;
      ReceiveControl."Order Open" := FALSE;
      ReceiveControl."Message Line" := '';
      ClearScreen;
      FormatMessage;

      IF ReceiveSetup."Update Setup after Close Order" THEN
        UpdateSetup;
    END;

    LOCAL PROCEDURE ShowHelp@34();
    VAR
      BarcodeCommandsReport@1240030000 : Report 14000601;
    BEGIN
      BarcodeCommandsReport.SetRequestForm(ReceiveStation.Code);
      BarcodeCommandsReport.RUNMODAL;
    END;

    PROCEDURE ProcessLookup@1240030013();
    BEGIN
      IF ReceiveControl."Order Open" THEN BEGIN
        ReceiveStation.TESTFIELD("Missing Order Lines Command");

        MissingOrderLines;
      END ELSE BEGIN
        ReceiveStation.TESTFIELD("List Orders Command");

        ListOrders;
      END;
    END;

    PROCEDURE ShowCard@1240030011();
    BEGIN
      CASE TRUE OF
        ReceiveControl."Receive Open":
          ViewReceive;
        ReceiveControl."Order Open":
          ViewOrder;
      END;
    END;

    LOCAL PROCEDURE PrintStdReceiveLabel@43();
    BEGIN
      IF ReceiveClosedError THEN
        EXIT;

      ReceiveMgt.PrintStdReceiveLabel(Receive);

      FormatMessage;
    END;

    LOCAL PROCEDURE TestLegal@44(Allowed@1240030000 : Boolean) : Boolean;
    BEGIN
      IF NOT Allowed THEN
        SetMessage(Text034);

      EXIT(Allowed);
    END;

    LOCAL PROCEDURE SetMessage@47(NewMessageLine@1240030000 : Text[250]);
    BEGIN
      ReceiveControl."Error Message" := NewMessageLine;

      IF ReceiveStation."Confirm on Errors" THEN
        MESSAGE(NewMessageLine);

      ReceiveControl."Message Line" := NewMessageLine;
    END;

    LOCAL PROCEDURE ReceiveOpenError@48() : Boolean;
    BEGIN
      IF ReceiveControl."Receive Open" THEN BEGIN
        SetMessage(Text035);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ReceiveClosedError@49() : Boolean;
    BEGIN
      IF NOT ReceiveControl."Receive Open" THEN BEGIN
        SetMessage(Text036);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE OrderClosedError@51() : Boolean;
    BEGIN
      IF NOT ReceiveControl."Order Open" THEN BEGIN
        SetMessage(Text037);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE OrderOpenError@55() : Boolean;
    BEGIN
      IF ReceiveControl."Order Open" THEN BEGIN
        SetMessage(Text038);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE RefreshHeader@28();
    BEGIN
      IF ReceiveControl."Order Open" THEN
        ReceiveControl.TransferFromSource2;
    END;

    PROCEDURE UpdateScaleWeight@32();
    BEGIN
      IF ReceiveStation."Scale Inferface Code" <> '' THEN
        IF ScalesComm.GetScaleWeight(ScaleInterface,ReceiveControl."Scale Weight",TRUE) THEN
          UpdateDisplayValue;
    END;

    PROCEDURE UpdateDisplayValue@41();
    BEGIN
      CASE ReceiveStation."Show What During Receive" OF
        ReceiveStation."Show What During Receive"::"Net Weight":
          ReceiveControl."Display Value" := Receive.TotalNetWeight;
        ReceiveStation."Show What During Receive"::"Gross Weight":
          ReceiveControl."Display Value" := Receive.TotalGrossWeight;
        ReceiveStation."Show What During Receive"::"Dimmed Weight":
          ReceiveControl."Display Value" := Receive.TotalDimWeight;
        ReceiveStation."Show What During Receive"::Volume:
          ReceiveControl."Display Value" := Receive.TotalVolume;
        ReceiveStation."Show What During Receive"::"Scale Weight":
          ReceiveControl."Display Value" := ReceiveControl."Scale Weight";
      END;

      CurrFormScaleWeightUpdate := TRUE;
    END;

    PROCEDURE MissingOrderLines@54();
    VAR
      Item@1240030000 : Record 27;
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      ClearInputFields;

      IF ReceiveMgt.MissingOrderLines(ReceiveControl) THEN BEGIN
        CASE ReceiveControl."Input Type" OF
          ReceiveControl."Input Type"::Item:
            BEGIN
              Item.GET(ReceiveControl."Input No.");
              GetItemInputFields(
                Item,ReceiveControl."Input Variant Code",ReceiveControl."Input Unit of Measure Code");

              ReceiveControl.GetLineInfo;

              IF NOT EnterSerialLotNo THEN
                EXIT;

              IF NOT TestForRequiredAction THEN
                EXIT;

              IF NOT ReceiveControl."Receive Open" THEN BEGIN
                CreateReceive;
                COMMIT;
              END;
              CreateReceiveLine;

              InputLine := '';
              UpdateOrderValues;
            END;
          ELSE
            ERROR(Text040,ReceiveControl."Input Type");
        END;
      END;
    END;

    LOCAL PROCEDURE MultiDocReceive@59(UseLookup@1240030000 : Boolean);
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF ReceiveMgt.MultiDocReceive(ReceiveControl,UseLookup) THEN BEGIN
      END ELSE
        SetMessage(ReceiveControl."Error Message");
    END;

    LOCAL PROCEDURE SetStandardOption@60(OptionCode@1240030000 : Code[20]);
    VAR
      ReceiveStandardOptionSetup@1240030001 : Record 14000610;
      i@1240030002 : Integer;
      CommandToExecute@1240030003 : Text[250];
    BEGIN
      ReceiveStandardOptionSetup.GET(OptionCode);

      IF OrderClosedError THEN
        EXIT;

      CASE TRUE OF
        (NOT ReceiveControl."Order Open") OR
        (ReceiveStandardOptionSetup."Print Report ID" <> 0):
          BEGIN
            IF NOT ReceiveMgt.PrintStandardSetupOptionReport(
                     Receive,ReceiveControl,ReceiveStandardOptionSetup)
            THEN
              SetMessage(ReceiveControl."Error Message");
          END;
        ReceiveStandardOptionSetup."1st Command" <> '':
          BEGIN
            IF NOT ReceiveControl."Processing Multiple Commands" THEN BEGIN
              ReceiveControl."Processing Multiple Commands" := TRUE;

              FOR i := 1 TO 10 DO BEGIN
                CASE i OF
                  1:
                    CommandToExecute := ReceiveStandardOptionSetup."1st Command";
                  2:
                    CommandToExecute := ReceiveStandardOptionSetup."2nd Command";
                  3:
                    CommandToExecute := ReceiveStandardOptionSetup."3rd Command";
                  4:
                    CommandToExecute := ReceiveStandardOptionSetup."4th Command";
                  5:
                    CommandToExecute := ReceiveStandardOptionSetup."5th Command";
                  6:
                    CommandToExecute := ReceiveStandardOptionSetup."6th Command";
                  7:
                    CommandToExecute := ReceiveStandardOptionSetup."7th Command";
                  8:
                    CommandToExecute := ReceiveStandardOptionSetup."8th Command";
                  9:
                    CommandToExecute := ReceiveStandardOptionSetup."9th Command";
                  10:
                    CommandToExecute := ReceiveStandardOptionSetup."10th Command";
                END;

                IF (CommandToExecute <> '') AND (ReceiveControl."Error Message" = '') THEN BEGIN
                  CommandToExecute := UPPERCASE(CommandToExecute);
                  ParseInput(CommandToExecute);
                END;
              END;

              ReceiveControl."Processing Multiple Commands" := FALSE;
            END;
          END;
        ELSE
          BEGIN
            IF ReceiveClosedError THEN
              EXIT;

            ReceiveMgt.SetStandardSetupOptionPage(Receive,OptionCode);
          END;
      END;
    END;

    LOCAL PROCEDURE OpenReceive@64();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF ReceiveOpenError THEN
        EXIT;

      IF ReceiveMgt.OpenReceive(Receive,ReceiveControl) THEN BEGIN
        FormatMessage;
      END ELSE
        SetMessage(ReceiveControl."Error Message");
    END;

    LOCAL PROCEDURE ResetOrderQuantity@71();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      ReceiveMgt.ResetQtyToReceive(ReceiveControl);
    END;

    LOCAL PROCEDURE ToggleAlwaysEnterQuantity@72();
    BEGIN
      ReceiveControl."Always Enter Quantity" := NOT ReceiveControl."Always Enter Quantity";
    END;

    LOCAL PROCEDURE ShowItemResource@74();
    VAR
      Item@1240030000 : Record 27;
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF ReceiveControl."Input No." = '' THEN BEGIN
        SetMessage(Text041);
        EXIT;
      END;

      CASE ReceiveControl."Input Type" OF
        ReceiveControl."Input Type"::Item:
          BEGIN
            Item.GET(ReceiveControl."Input No.");

            PAGE.RUNMODAL(PAGE::"Item Card",Item);
          END;
        ELSE
          SetMessage(Text042);
      END;
    END;

    LOCAL PROCEDURE OpenMainMenu@75();
    BEGIN
      PAGE.RUN(330);
    END;

    PROCEDURE PrintReceiveLineLabel@23();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF ReceiveClosedError THEN
        EXIT;

      IF CurrFormReceiveLine."No." = '' THEN BEGIN
        SetMessage(Text043);
        EXIT;
      END;

      ReceiveMgt.PrintItemLabel(CurrFormReceiveLine);
    END;

    PROCEDURE ViewItemAction@18();
    VAR
      Item@1240030001 : Record 27;
      ReceiveRule@1240030002 : Record 14000612;
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF ReceiveClosedError THEN
        EXIT;

      IF CurrFormReceiveLine.Type <> CurrFormReceiveLine.Type::Item THEN BEGIN
        SetMessage(Text044);
        EXIT;
      END;

      IF CurrFormReceiveLine."No." = '' THEN BEGIN
        SetMessage(Text043);
        EXIT;
      END;

      Item."No." := CurrFormReceiveLine."No.";
      Item.FILTERGROUP(2);
      Item.SETRECFILTER;
      Item.FILTERGROUP(0);
      IF PAGE.RUNMODAL(PAGE::"Verify Item Card",Item) = ACTION::LookupOK THEN
        ;

      IF CurrFormReceiveLine.FIND THEN BEGIN
        Item.GET(CurrFormReceiveLine."No.");
        ReceiveRule.GetReceiveRule(CurrFormReceiveLine."No.");
        CurrFormReceiveLine."Action Required" := ReceiveRule.ActionRequired(Item);
        CurrFormReceiveLine.MODIFY;

        UpdateOrderValues;
      END;
    END;

    LOCAL PROCEDURE ViewAllItemActions@1240030001();
    VAR
      Item@1240030001 : Record 27;
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF ReceiveOpenError THEN
        EXIT;

      IF NOT ReceiveMgt.ViewAllItemActions(ReceiveControl) THEN
        SetMessage(ReceiveControl."Error Message");

      UpdateOrderValues;
    END;

    LOCAL PROCEDURE ViewWhseReceiptLines@15();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF ReceiveMgt.ViewWarehouseReceiptLines(ReceiveControl) THEN BEGIN
        RefreshHeader;

        FormatMessage;
      END ELSE
        SetMessage(ReceiveControl."Error Message");
    END;

    PROCEDURE ScanSerialLot@84(ScanAll@1240030000 : Boolean);
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF ReceiveOpenError THEN
        EXIT;

      IF NOT ReceiveMgt.ScanSerialLot(
               ReceiveControl,ScanAll,ReceiveControl."Processing Multiple Commands")
      THEN
        SetMessage(ReceiveControl."Error Message");
    END;

    LOCAL PROCEDURE ReceivingStatus@29();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      ReceiveMgt.ReceiveStatus(ReceiveControl);
    END;

    PROCEDURE DefaultOption@1240030012(DefaultOption@1240030000 : Integer);
    BEGIN
      CASE DefaultOption OF
        ReceiveStation."Default F3 Option"::"Create Receive":
          BEGIN
            ReceiveStation.TESTFIELD("Close Receive Command");
            CloseReceive(FALSE,0,0,0);
          END;
        ReceiveStation."Default F3 Option"::"Create Receive Print":
          BEGIN
            ReceiveStation.TESTFIELD("Close Receive Print Command");
            CloseReceive(TRUE,0,0,0);
          END;
        ReceiveStation."Default F3 Option"::"Receive All":
          BEGIN
            ReceiveStation.TESTFIELD("Receive All Command");
            ReceiveStation.TESTFIELD("Close Receive Command");

            CreateShipComplete;
            CloseReceive(FALSE,0,0,0);
          END;
        ReceiveStation."Default F3 Option"::"Receive All Print":
          BEGIN
            ReceiveStation.TESTFIELD("Receive All Command");
            ReceiveStation.TESTFIELD("Close Receive Print Command");

            CreateShipComplete;
            CloseReceive(TRUE,0,0,0);
          END;
        ReceiveStation."Default F3 Option"::"Receive Remaining":
          BEGIN
            ReceiveStation.TESTFIELD("Receive Remaining Command");
            ReceiveStation.TESTFIELD("Close Receive Command");

            ReceiveRemaining;
            CloseReceive(FALSE,0,0,0);
          END;
        ReceiveStation."Default F3 Option"::"Receive Remaining Print":
          BEGIN
            ReceiveStation.TESTFIELD("Receive Remaining Command");
            ReceiveStation.TESTFIELD("Close Receive Print Command");

            ReceiveRemaining;
            CloseReceive(TRUE,0,0,0);
          END;
        ReceiveStation."Default F3 Option"::"Custom 1":
          BEGIN
            ERROR(Text051);
          END;
        ReceiveStation."Default F3 Option"::"Custom 2":
          BEGIN
            ERROR(Text051);
          END;
        ReceiveStation."Default F3 Option"::"Custom 3":
          BEGIN
            ERROR(Text051);
          END;
        ELSE
          ERROR(Text051);
      END;
    END;

    LOCAL PROCEDURE ReceivePackage@1240030000();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF ReceiveMgt.ReceivePackage(Receive,ReceiveControl,'') THEN BEGIN
        FormatMessage;
      END ELSE
        SetMessage(ReceiveControl."Error Message");
    END;

    LOCAL PROCEDURE SelectReceiveBin@1240030002();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF NOT ReceiveMgt.SelectReceiveBin(ReceiveControl) THEN BEGIN
        SetMessage(ReceiveControl."Error Message");
        EXIT;
      END;
    END;

    LOCAL PROCEDURE SelectPutawayBin@1240030009();
    BEGIN
      IF OrderClosedError THEN
        EXIT;

      IF NOT ReceiveMgt.SelectPutawayBin(ReceiveControl) THEN BEGIN
        SetMessage(ReceiveControl."Error Message");
        EXIT;
      END;
    END;

    PROCEDURE CreateLinesFromPostedReceive@1240030008(VAR CurrentInputLine@1240030002 : Text[250]) : Boolean;
    VAR
      Item@1240030001 : Record 27;
      PostedReceiveLine@1240030000 : Record 14000604;
      ReceiveLineTmp@1240030005 : TEMPORARY Record 14000602;
      FastReceiveLineTmp@1240030007 : TEMPORARY Record 14000609;
      CreateLoop@1240030003 : Boolean;
      Finished@1240030004 : Boolean;
      LastLineNo@1240030006 : Integer;
    BEGIN
      CreateLoop := FALSE;
      Finished := FALSE;

      PostedReceiveLine.RESET;
      PostedReceiveLine.SETRANGE("Receive No.",ReceiveControl."Input No.");
      REPEAT
        IF PostedReceiveLine.FIND('-') THEN BEGIN
          IF CreateLoop THEN
            IF NOT ReceiveControl."Receive Open" THEN BEGIN
              CreateReceive;
              COMMIT;
            END;

          REPEAT
            IF PostedReceiveLine.Type = PostedReceiveLine.Type::Receive THEN BEGIN
              SetMessage(STRSUBSTNO(Text040,PostedReceiveLine.Type));
              EXIT(FALSE);
            END;

            ClearInputFields;
            ReceiveControl."Scanned No." :=
              COPYSTR(CurrentInputLine,1,MAXSTRLEN(ReceiveControl."Scanned No."));
            ReceiveControl."Input Serial Number" := '';
            ReceiveControl."Input Lot Number" := '';
            ReceiveControl."Input Warranty Date" := 0D;
            ReceiveControl."Input Expiration Date" := 0D;
            ReceiveControl."Input Type" := PostedReceiveLine.Type;
            ReceiveControl."Input No." := PostedReceiveLine."No.";
            ReceiveControl."Input Variant Code" := PostedReceiveLine."Variant Code";
            ReceiveControl."Input Unit of Measure Code" := PostedReceiveLine."Unit of Measure Code";
            IF PostedReceiveLine.Type = PostedReceiveLine.Type::Item THEN
              IF Item.GET(ReceiveControl."Input No.") THEN
                GetItemInputFields(
                  Item,ReceiveControl."Input Variant Code",
                  ReceiveControl."Input Unit of Measure Code");

            IF CreateLoop AND ReceiveSetup."Use Item Tracking Details" THEN BEGIN
              IF ReceiveControl."Receive Serial Number" AND NOT
                 ReceiveControl."Receive Serial Number Late"
              THEN
                ReceiveControl."Input Serial Number" := PostedReceiveLine."Serial No.";
              IF ReceiveControl."Receive Lot Number" AND NOT
                 ReceiveControl."Receive Lot Number Late"
              THEN
                ReceiveControl."Input Lot Number" := PostedReceiveLine."Lot No.";
              IF ReceiveControl."Receive Warranty Date" AND NOT
                 ReceiveControl."Receive Warranty Date Late"
              THEN
                ReceiveControl."Input Warranty Date" := PostedReceiveLine."Warranty Date";
              IF ReceiveControl."Receive Expiration Date" AND NOT
                 ReceiveControl."Receive Expiration Date Late"
              THEN
                ReceiveControl."Input Expiration Date" := PostedReceiveLine."Expiration Date";
            END;

            IF CreateLoop THEN BEGIN
              IF NOT ReceiveMgt.CreateReceiveLine(
                       Receive,ReceiveControl,ReceiveControl."Line Unit of Measure Code",
                       ReceiveControl."Line Quantity",PostedReceiveLine.Quantity)
              THEN BEGIN
                SetMessage(ReceiveControl."Error Message");

                ClearInputFields;
                UpdateOrderValues;
                EXIT(FALSE);
              END ELSE
                COMMIT;
            END ELSE BEGIN
              IF NOT CheckMultipleCreateLine(CurrentInputLine,PostedReceiveLine.Quantity) THEN
                EXIT(FALSE);

              IF PostedReceiveLine.Type > PostedReceiveLine.Type::" " THEN BEGIN
                ReceiveLineTmp.RESET;
                ReceiveLineTmp.SETRANGE(Type,PostedReceiveLine.Type);
                ReceiveLineTmp.SETRANGE("No.",PostedReceiveLine."No.");
                ReceiveLineTmp.SETRANGE("Variant Code",PostedReceiveLine."Variant Code");
                IF ReceiveLineTmp.FIND('-') THEN BEGIN
                  ReceiveLineTmp."Quantity (Base)" :=
                    ReceiveLineTmp."Quantity (Base)" + PostedReceiveLine."Quantity (Base)";
                  ReceiveLineTmp.MODIFY;
                END ELSE BEGIN
                  LastLineNo := LastLineNo + 1;
                  ReceiveLineTmp.INIT;
                  ReceiveLineTmp."Line No." := LastLineNo;
                  ReceiveLineTmp.Type := PostedReceiveLine.Type;
                  ReceiveLineTmp."No." := PostedReceiveLine."No.";
                  ReceiveLineTmp."Variant Code" := PostedReceiveLine."Variant Code";
                  ReceiveLineTmp."Quantity (Base)" := PostedReceiveLine."Quantity (Base)";
                  ReceiveLineTmp.INSERT;
                END;
              END;
            END;
          UNTIL PostedReceiveLine.NEXT = 0;
        END;

        IF NOT CreateLoop THEN BEGIN
          CreateLoop := TRUE;

          ReceiveLineTmp.RESET;
          IF ReceiveLineTmp.FIND('-') THEN
            REPEAT
              ReceiveMgt.UpdateFastReceiveLines(
                ReceiveControl,FastReceiveLineTmp,FALSE,FALSE,FALSE,
                ReceiveLineTmp.Type,ReceiveLineTmp."No.",ReceiveLineTmp."Variant Code");
              IF FastReceiveLineTmp."Rem. Qty. to Receive (Base)" < ReceiveLineTmp."Quantity (Base)"
              THEN BEGIN
                IF ReceiveLineTmp."Variant Code" <> '' THEN
                  SetMessage(
                    STRSUBSTNO(
                      Text050,ReceiveLineTmp.Type,
                      ReceiveLineTmp."No." + ' ' + ReceiveLineTmp."Variant Code"))
                ELSE
                  SetMessage(STRSUBSTNO(Text050,ReceiveLineTmp.Type,ReceiveLineTmp."No."));
                EXIT(FALSE);
              END;
            UNTIL ReceiveLineTmp.NEXT = 0;
        END ELSE
          Finished := TRUE;
      UNTIL Finished;

      ClearInputFields;
      UpdateOrderValues;
      EXIT(TRUE);
    END;

    PROCEDURE CreateLinesFromPostedPackage@1240030004(VAR CurrentInputLine@1240030002 : Text[250]) : Boolean;
    VAR
      Item@1240030001 : Record 27;
      PostedPackageLine@1240030000 : Record 14000705;
      ReceiveLineTmp@1240030007 : TEMPORARY Record 14000602;
      FastReceiveLineTmp@1240030006 : TEMPORARY Record 14000609;
      CreateLoop@1240030005 : Boolean;
      Finished@1240030004 : Boolean;
      LastLineNo@1240030003 : Integer;
    BEGIN
      CreateLoop := FALSE;
      Finished := FALSE;

      PostedPackageLine.RESET;
      PostedPackageLine.SETRANGE("Package No.",ReceiveControl."Input No.");
      REPEAT
        IF PostedPackageLine.FIND('-') THEN BEGIN
          IF CreateLoop THEN
            IF NOT ReceiveControl."Receive Open" THEN BEGIN
              CreateReceive;
              COMMIT;
            END;

          REPEAT
            IF (PostedPackageLine.Type = PostedPackageLine.Type::Package) OR
               (PostedPackageLine.Type = PostedPackageLine.Type::Resource)
            THEN BEGIN
              SetMessage(STRSUBSTNO(Text040,PostedPackageLine.Type));
              EXIT(FALSE);
            END;

            ClearInputFields;
            ReceiveControl."Scanned No." :=
              COPYSTR(CurrentInputLine,1,MAXSTRLEN(ReceiveControl."Scanned No."));
            ReceiveControl."Input Serial Number" := '';
            ReceiveControl."Input Lot Number" := '';
            ReceiveControl."Input Warranty Date" := 0D;
            ReceiveControl."Input Expiration Date" := 0D;
            ReceiveControl."Input Type" := PostedPackageLine.Type;
            ReceiveControl."Input No." := PostedPackageLine."No.";
            ReceiveControl."Input Variant Code" := PostedPackageLine."Variant Code";
            ReceiveControl."Input Unit of Measure Code" := PostedPackageLine."Unit of Measure Code";
            IF PostedPackageLine.Type = PostedPackageLine.Type::Item THEN
              IF Item.GET(ReceiveControl."Input No.") THEN
                GetItemInputFields(
                  Item,ReceiveControl."Input Variant Code",
                  ReceiveControl."Input Unit of Measure Code");

            IF CreateLoop AND ReceiveSetup."Use Item Tracking Details" THEN BEGIN
              IF ReceiveControl."Receive Serial Number" AND NOT
                 ReceiveControl."Receive Serial Number Late"
              THEN
                ReceiveControl."Input Serial Number" := PostedPackageLine."Serial No.";
              IF ReceiveControl."Receive Lot Number" AND NOT
                 ReceiveControl."Receive Lot Number Late"
              THEN
                ReceiveControl."Input Lot Number" := PostedPackageLine."Lot No.";
              IF ReceiveControl."Receive Warranty Date" AND NOT
                 ReceiveControl."Receive Warranty Date Late"
              THEN
                ReceiveControl."Input Warranty Date" := PostedPackageLine."Warranty Date";
              IF ReceiveControl."Receive Expiration Date" AND NOT
                 ReceiveControl."Receive Expiration Date Late"
              THEN
                ReceiveControl."Input Expiration Date" := PostedPackageLine."Expiration Date";
            END;

            IF CreateLoop THEN BEGIN
              IF NOT ReceiveMgt.CreateReceiveLine(
                       Receive,ReceiveControl,ReceiveControl."Line Unit of Measure Code",
                       ReceiveControl."Line Quantity",PostedPackageLine.Quantity)
              THEN BEGIN
                SetMessage(ReceiveControl."Error Message");

                ClearInputFields;
                UpdateOrderValues;
                EXIT(FALSE);
              END ELSE
                COMMIT;
            END ELSE BEGIN
              IF NOT CheckMultipleCreateLine(CurrentInputLine,PostedPackageLine.Quantity) THEN
                EXIT(FALSE);

              IF PostedPackageLine.Type > PostedPackageLine.Type::" " THEN BEGIN
                ReceiveLineTmp.RESET;
                ReceiveLineTmp.SETRANGE(Type,PostedPackageLine.Type);
                ReceiveLineTmp.SETRANGE("No.",PostedPackageLine."No.");
                ReceiveLineTmp.SETRANGE("Variant Code",PostedPackageLine."Variant Code");
                IF ReceiveLineTmp.FIND('-') THEN BEGIN
                  ReceiveLineTmp."Quantity (Base)" :=
                    ReceiveLineTmp."Quantity (Base)" + PostedPackageLine."Quantity (Base)";
                  ReceiveLineTmp.MODIFY;
                END ELSE BEGIN
                  LastLineNo := LastLineNo + 1;
                  ReceiveLineTmp.INIT;
                  ReceiveLineTmp."Line No." := LastLineNo;
                  ReceiveLineTmp.Type := PostedPackageLine.Type;
                  ReceiveLineTmp."No." := PostedPackageLine."No.";
                  ReceiveLineTmp."Variant Code" := PostedPackageLine."Variant Code";
                  ReceiveLineTmp."Quantity (Base)" := PostedPackageLine."Quantity (Base)";
                  ReceiveLineTmp.INSERT;
                END;
              END;
            END;
          UNTIL PostedPackageLine.NEXT = 0;
        END;

        IF NOT CreateLoop THEN BEGIN
          CreateLoop := TRUE;

          ReceiveLineTmp.RESET;
          IF ReceiveLineTmp.FIND('-') THEN
            REPEAT
              ReceiveMgt.UpdateFastReceiveLines(
                ReceiveControl,FastReceiveLineTmp,FALSE,FALSE,FALSE,
                ReceiveLineTmp.Type,ReceiveLineTmp."No.",ReceiveLineTmp."Variant Code");
              IF FastReceiveLineTmp."Rem. Qty. to Receive (Base)" < ReceiveLineTmp."Quantity (Base)"
              THEN BEGIN
                IF ReceiveLineTmp."Variant Code" <> '' THEN
                  SetMessage(
                    STRSUBSTNO(
                      Text050,ReceiveLineTmp.Type,
                      ReceiveLineTmp."No." + ' ' + ReceiveLineTmp."Variant Code"))
                ELSE
                  SetMessage(STRSUBSTNO(Text050,ReceiveLineTmp.Type,ReceiveLineTmp."No."));
                EXIT(FALSE);
              END;
            UNTIL ReceiveLineTmp.NEXT = 0;
        END ELSE
          Finished := TRUE;
      UNTIL Finished;

      ClearInputFields;
      UpdateOrderValues;
      EXIT(TRUE);
    END;

    PROCEDURE CheckMultipleCreateLine@1240030007(VAR CurrentInputLine@1240030000 : Text[250];FixedQuantity@1240030001 : Decimal) : Boolean;
    BEGIN
      IF NOT ReceiveControl.GetLineInfo THEN BEGIN
        IF ReceiveControl."Input Variant Code" <> '' THEN
          SetMessage(
            STRSUBSTNO(
              Text010,
              STRSUBSTNO(
                '%1 %2 %3',ReceiveControl."Input Type",ReceiveControl."Input No.",
                ReceiveControl."Input Variant Code")))
        ELSE
          SetMessage(
            STRSUBSTNO(
              Text010,
              STRSUBSTNO(
                '%1 %2',ReceiveControl."Input Type",ReceiveControl."Input No.")));
                CurrentInputLine := '';

        ClearInputFields;
        UpdateOrderValues;
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE AutoCreateDocument@1240030014(SourceType@1240030001 : Integer;SourceSubtype@1240030000 : Integer);
    VAR
      NewSourceID@1240030002 : Code[20];
      TempInputLine@1240030003 : Text[250];
    BEGIN
      IF OrderOpenError THEN
        EXIT;

      IF NOT ReceiveMgt.AutoCreateDocument(ReceiveControl,SourceType,SourceSubtype,NewSourceID)
      THEN BEGIN
        SetMessage(ReceiveControl."Error Message");
        EXIT;
      END;

      TempInputLine := NewSourceID;
      ReceiveControl."Source Type" := SourceType;
      ReceiveControl."Source Subtype" := SourceSubtype;
      ReceiveControl."Source ID" := NewSourceID;
      IF GetHeader(TempInputLine) THEN
        IF NOT OpenOrder THEN
          ReceiveControl.ClearOrderInfo;
    END;

    PROCEDURE CloseOrderAndPutAway@1000000000(PrintOrder@1000000001 : Boolean;ForceClose@1000000000 : Boolean);
    BEGIN
      //TPZ1626
      PrintOrder := FALSE;
      //Close Receive
      IF TestLegal(ReceiveStation."Close Receive Command") THEN
          CloseReceive(FALSE,0,0,0);

      //set to post receipt, create & print put-away.
      ReceiveMgt.SetForceCreatePrintPutAway(TRUE);

      IF OrderClosedError THEN
        EXIT;

      IF ReceiveOpenError THEN
        EXIT;

      CLEAR(ShippingAgent);

      IF ReceiveMgt.CloseOrder(
           ShippingAgent,ReceiveControl,PrintOrder,ForceClose) = FALSE THEN
        SetMessage(ReceiveControl."Error Message");

      ReceiveMgt.SetForceCreatePrintPutAway(FALSE);
      //TPZ1626
    END;

    BEGIN
    {
      TPZ1626 - 2016-08-10 TMEI
        Add new command //COPW Close Order Create Put-away
    }
    END.
  }
}

