OBJECT Codeunit 14002400 E.D.I. Sales Order Status Send
{
  OBJECT-PROPERTIES
  {
    Date=07/13/20;
    Time=12:00:00 PM;
    Version List=SE0.62;
  }
  PROPERTIES
  {
    TableNo=14002400;
    Permissions=TableData 36=rimd;
    OnRun=VAR
            EDIRecDocHdr@1240020000 : Record 14002358;
          BEGIN
            EDIRecDocHdr.GET(Rec."Internal Doc. No.");
            CreateOrderStatus(EDIRecDocHdr,Rec."Export Version",Rec);
          END;

  }
  CODE
  {
    VAR
      EDIRecDocHdr@1240030000 : Record 14002358;
      EDITemplate@1240030001 : Record 14002350;
      EDITradePartner@1240030002 : Record 14002360;
      EDIDocument@1240030003 : Record 14002353;
      EDISegment@1240030004 : Record 14002354;
      EDISendDocHdr@1240030005 : Record 14002369;
      EDIElement@1240030006 : Record 14002355;
      EDIElementArray@1240030007 : ARRAY [100] OF TEMPORARY Record 14002355;
      EDIRecDocFields@1240030008 : Record 14002359;
      EDIOrderStatusHdr@1240030009 : Record 14002400;
      EDIOrderStatusLine@1240030010 : Record 14002401;
      BilltoCustomer@1240030011 : Record 18;
      CompanyInformation@1240030012 : Record 79;
      Item@1240030013 : Record 27;
      ItemUnitOfMeasure@1240030014 : Record 5404;
      PaymentTerms@1240030015 : Record 3;
      SalesInvoiceHeader@1240030016 : Record 112;
      SalesInvoiceLine@1240030017 : Record 113;
      SalesHeader@1240030018 : Record 36;
      SalesLine@1240030019 : Record 37;
      SalespersonPurchaser@1240030020 : Record 13;
      SelltoCustomer@1240030021 : Record 18;
      ShipmentMethod@1240030022 : Record 10;
      ShiptoAddress@1240030023 : Record 222;
      ShippingAgent@1240030024 : Record 291;
      SalesCommentLine@1240020003 : Record 44;
      EDITradePtnrItem@1240020005 : Record 14002364;
      EDICustCrossRef@1240020006 : Record 14002362;
      EDISetup@1240020023 : Record 14002367;
      ItemCrossReference@1240020019 : Record 5717;
      EDISegment2@1240020029 : Record 14002354;
      EDIReceiveDocHdrInfo@1240020031 : Record 14002371;
      EDIReceiveDocLineInfo@1240020030 : Record 14002372;
      Location@1240020037 : Record 14;
      ShiptoCountry@1240020043 : Record 9;
      BilltoCountry@1240020042 : Record 9;
      SelltoCountry@1240020041 : Record 9;
      ShipfromCountry@1240020040 : Record 9;
      EDIDiscount@1240020139 : Record 14002382;
      EDILineDiscount@1240020144 : Record 14002383;
      EDIFormat@1240030025 : Codeunit 14002351;
      EDISend@1240030027 : Codeunit 14002356;
      EDIPackageMapIntegration@1240030057 : Codeunit 14002378;
      EDIGetReverseCrossRef@1240020007 : Codeunit 14000373;
      CreateEDIAlert@1240020022 : Codeunit 14000375;
      EDIRecordAssocDoc@1240020024 : Codeunit 14002380;
      EDILoadDBFields@1240020032 : Codeunit 14002392;
      EDILoadEDIOutFields@1240020036 : Codeunit 14000381;
      TimeVariable@1240020033 : Time;
      DateTimeVariable@1240020034 : DateTime;
      RecRef@1240020035 : RecordRef;
      DispWindow@1240030028 : Dialog;
      i@1240030029 : Integer;
      BooleanVariable@1240030030 : Boolean;
      BypassSegment@1240030031 : Boolean;
      DataFound@1240030032 : Boolean;
      DateVariable@1240030033 : Date;
      DecimalVariable@1240030034 : Decimal;
      DocumentNo@1240030039 : Code[10];
      ExportVersion@1240030040 : Integer;
      GrossShipWeight@1240030041 : Decimal;
      HLCount@1240030042 : Integer;
      HLCountArray@1240030043 : ARRAY [5] OF Integer;
      IntegerVariable@1240030044 : Integer;
      LineNumber@1240030045 : Integer;
      NetShipWeight@1240030046 : Decimal;
      NewSegment@1240030048 : Boolean;
      OutErrorArray@1240030049 : ARRAY [100] OF Boolean;
      OutFldArray@1240030050 : ARRAY [100] OF Text[250];
      OutLenArray@1240030051 : ARRAY [100] OF Integer;
      OutputOff@1240030052 : Boolean;
      ProcessingLines@1240030053 : Boolean;
      TotalUnits@1240030054 : Decimal;
      TotalSegments@1240030055 : Integer;
      Text001@1001 : TextConst 'ENU=You can not delete this sales line or order until EDI Order Status has been sent.';
      Text002@1002 : TextConst 'ENU=You can not delete this sales line or order if EDI Order Status has not been sent.';
      Text003@1003 : TextConst 'ENU=An active EDI Document %1 was not found for Trading Partner %2.';
      Text004@1004 : TextConst 'ENU=EDI Document %1 for Trading Partner %2 has a mapping error.';
      Text005@1005 : TextConst 'ENU=Exporting Sales Order Status\';
      Text006@1006 : TextConst 'ENU=Sales Order #1##################\';
      Text007@1007 : TextConst 'ENU=Sales Item  #2##################';
      Text008@1008 : TextConst 'ENU=Unable to find EDI segment definition for Trading Partner %1.';
      Text009@1009 : TextConst 'ENU=No Item Segments Found';
      Text011@1240030056 : TextConst 'ENU=Unable to find EDI segment definition for Trading Partner %1.';
      Text012@1240030058 : TextConst 'ENU=EDI Status Code %1 not found for Trading Partner %2.';
      Text014@1240030060 : TextConst 'ENU=Error sending Order Status.';
      LoopFinished@1240020002 : Boolean;
      RepeatCount@1240020001 : Integer;
      LoopCnt@1240020000 : Integer;
      RecordNo@1240020028 : Integer;
      InternalDocNo@1240020004 : Code[10];
      ReverseCrossReference@1240020012 : Boolean;
      ReverseCrossRefArray@1240020011 : ARRAY [100] OF Text[40];
      ReverseCrossRefValue@1240020010 : Text[40];
      BypassSegment2@1240020009 : Boolean;
      OutError2@1240020008 : Boolean;
      Text015@1240020016 : TextConst 'ENU=Sales Order not found for Internal Doc. No. %1.';
      Text016@1240020015 : TextConst 'ENU=Order Status exist for Receive Document  %1.';
      Text017@1240020014 : TextConst 'ENU=Order Status created.';
      Text018@1240020013 : TextConst 'ENU=Navision Document %1 does not exist for Trade Partner %2.';
      Text019@1240020018 : TextConst 'ENU=Order Change Status created.';
      Text020@1240020017 : TextConst 'ENU=Order Change Status exist for Receive Document  %1.';
      Text023@1240020025 : TextConst 'ENU=Advance P.O. Acknowledgement Status created.';
      Text024@1240020026 : TextConst 'ENU=Advance P.O. Acknowledgement Status exist for Receive Document  %1.';
      Text025@1240020027 : TextConst 'ENU=EDI Status Code is required for all %1 documents with Internal Document No. %2.';
      BypassCount@1240020020 : Integer;
      DetailSegmentCount@1240020021 : Integer;
      XMLDoc@1240020047 : Boolean;
      Text026@1240020038 : TextConst 'ENU=Unable to find EDI Segment Elements for the following: %1 - %2 - %3 - %4';
      AutoRelease@1240020039 : Boolean;

    PROCEDURE CheckSalesLineDelete@1(SalesHeader@1240030000 : Record 36;SalesLine@1240030001 : Record 37);
    VAR
      EDIOrderStatusHeader@1240030002 : Record 14002400;
      EDIRecDocHdr@1240030003 : Record 14002358;
    BEGIN
      IF (SalesHeader."Document Type" <> SalesHeader."Document Type"::Order) OR
         (EDIRecDocHdr."Navision Document" IN ['E_SLSPOC','E_ADVPOA'])
      THEN
        EXIT;
      EDIRecDocHdr.RESET;
      EDIRecDocHdr.SETRANGE("Internal Doc. No.",SalesHeader."EDI Internal Doc. No.");
      IF EDIRecDocHdr.FIND('-') THEN BEGIN
        IF EDIRecDocHdr."Sales Order Status Req." THEN BEGIN
          IF SalesLine."EDI Status Pending" OR
            (SalesLine.Quantity <> 0)
          THEN BEGIN
            EDIOrderStatusHeader.RESET;
            EDIOrderStatusHeader.SETCURRENTKEY(
              "Internal Doc. No.","Source Doc. Type","Source Doc. No.",Exported);
            EDIOrderStatusHeader.SETRANGE("Internal Doc. No.",SalesHeader."EDI Internal Doc. No.");
            EDIOrderStatusHeader.SETRANGE("Source Doc. Type",EDIOrderStatusHeader."Source Doc. Type"::Order);
            EDIOrderStatusHeader.SETRANGE("Source Doc. No.",SalesHeader."No.");
            EDIOrderStatusHeader.SETRANGE(Exported,TRUE);
            EDIOrderStatusHeader.SETRANGE("Document Type",EDIOrderStatusHeader."Document Type"::" ");
            IF NOT EDIOrderStatusHeader.FIND('-') THEN
              ERROR(
                Text001);
          END;
          EDIOrderStatusHeader.RESET;
          EDIOrderStatusHeader.SETCURRENTKEY(
            "Internal Doc. No.","Source Doc. Type","Source Doc. No.",Exported);
          EDIOrderStatusHeader.SETRANGE("Internal Doc. No.",SalesHeader."EDI Internal Doc. No.");
          EDIOrderStatusHeader.SETRANGE("Source Doc. Type",EDIOrderStatusHeader."Source Doc. Type"::Order);
          EDIOrderStatusHeader.SETRANGE("Source Doc. No.",SalesHeader."No.");
          EDIOrderStatusHeader.SETRANGE(Exported,FALSE);
          EDIOrderStatusHeader.SETRANGE("Document Type",EDIOrderStatusHeader."Document Type"::" ");
          IF EDIOrderStatusHeader.FIND('-') THEN
            ERROR(
              Text002);
        END;
      END;
    END;

    PROCEDURE CreateOrderStatusEntries@3(CurrentEDIRecDocHdr@1240030000 : Record 14002358);
    BEGIN
      EDIRecDocHdr.COPY(CurrentEDIRecDocHdr);
      IF (EDIRecDocHdr."Process Receive Doc. Job Ready") AND
         (EDIRecDocHdr."Order Status Created" = FALSE)
      THEN BEGIN
        EDIRecDocHdr."Document Processed" := FALSE;
        EDIRecDocHdr."Data Error" := TRUE;
        EDIRecDocHdr.MODIFY;
        COMMIT;
      END;
      EDITradePartner.GET(EDIRecDocHdr."Trade Partner No.");

      SalesHeader.RESET;
      SalesHeader.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
      SalesHeader.SETRANGE("EDI Order",TRUE);
      SalesHeader.SETRANGE("EDI Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
      IF SalesHeader.FIND('-') THEN
        REPEAT
          SalesLine.RESET;
          SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
          SalesLine.SETRANGE("Document No.",SalesHeader."No.");
          SalesLine.SETRANGE("EDI Status Pending",TRUE);
          IF SalesLine.FIND('-') THEN BEGIN
            EDIOrderStatusHdr.RESET;
            EDIOrderStatusHdr.SETRANGE("Trade Partner Code",EDIRecDocHdr."Trade Partner No.");
            EDIOrderStatusHdr.SETRANGE("Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
            IF ExportVersion = 0 THEN
              IF EDIOrderStatusHdr.FIND('+') THEN
                ExportVersion := EDIOrderStatusHdr."Export Version" + 1
              ELSE
                ExportVersion := 1;
            EDIOrderStatusHdr."Trade Partner Code" := EDITradePartner."No.";
            EDIOrderStatusHdr."Internal Doc. No." := EDIRecDocHdr."Internal Doc. No.";
            EDIOrderStatusHdr."Export Version" := ExportVersion;
            EDIOrderStatusHdr."Source Doc. Type" := SalesHeader."Document Type";
            EDIOrderStatusHdr."Source Doc. No." := SalesHeader."No.";
            EDIOrderStatusHdr.Exported := FALSE;
            EDIOrderStatusHdr."Document Type" := EDIOrderStatusHdr."Document Type"::" ";
            EDIOrderStatusHdr."Expected Date" := SalesHeader."EDI Expected Delivery Date";
            EDIOrderStatusHdr.INSERT;
            REPEAT
              EDIOrderStatusLine."Internal Doc. No." := EDIOrderStatusHdr."Internal Doc. No.";
              EDIOrderStatusLine."Export Version" := EDIOrderStatusHdr."Export Version";
              EDIOrderStatusLine."Source Doc. Type" := EDIOrderStatusHdr."Source Doc. Type";
              EDIOrderStatusLine."Source Doc. No." := EDIOrderStatusHdr."Source Doc. No.";
              EDIOrderStatusLine."Line No." := SalesLine."Line No.";
              EDIOrderStatusLine.Type := SalesLine.Type;
              EDIOrderStatusLine."No." := SalesLine."No.";
              EDIOrderStatusLine.Description := SalesLine.Description;
              EDIOrderStatusLine."Original Order Qty." := SalesLine."EDI Original Qty.";
              EDIOrderStatusLine."Order Quantity" := SalesLine.Quantity;
              EDIOrderStatusLine."Quantity To Ship" := SalesLine."Qty. to Ship";
              EDIOrderStatusLine."EDI Segment Group" := SalesLine."EDI Segment Group";
              EDIOrderStatusLine."EDI Code" := SalesLine."EDI Code";
              EDIOrderStatusLine."EDI Line Status" := SalesLine."EDI Line Status";
              EDIOrderStatusLine."Document Type" := EDIOrderStatusHdr."Document Type";
              EDIOrderStatusLine."Unit Price" := SalesLine."Unit Price";
              EDIOrderStatusLine."EDI Unit Price" := SalesLine."EDI Unit Price";
              SetPriceDiscrepancy(EDIOrderStatusLine,SalesLine);
              EDIOrderStatusLine."EDI Item Cross Ref." := SalesLine."EDI Item Cross Ref.";
              EDIOrderStatusLine."EDI Unit of Measure" := SalesLine."EDI Unit of Measure";
              EDIOrderStatusLine."EDI Variant Code" := SalesLine."EDI Variant Code";
              EDIOrderStatusLine."Variant Code" := SalesLine."Variant Code";
              EDIOrderStatusLine."Unit of Measure Code" := SalesLine."Unit of Measure Code";
              EDIOrderStatusLine.INSERT;
              SalesLine."EDI Status Pending" := FALSE;
              SalesLine.MODIFY;
            UNTIL SalesLine.NEXT = 0;
          END;
        UNTIL (SalesHeader.NEXT = 0);

      EDIRecDocHdr."Document Processed" := TRUE;
      EDIRecDocHdr."Data Error" := FALSE;
      EDIRecDocHdr."Order Status Created" := TRUE;
      EDIRecDocHdr."Order Status Created Time" := TIME;
      EDIRecDocHdr."Order Status Created Date" := TODAY;
      EDIRecDocHdr.MODIFY;

      COMMIT;
    END;

    PROCEDURE CreateOrderStatus@18(VAR CurrentEDIRecDocHdr@1240030001 : Record 14002358;ExportVersion@1240030002 : Integer;CurrOrderStatusHdr@1240020000 : Record 14002400) ErrCode@1240030000 : Boolean;
    VAR
      OrderStatusEntry@1240020002 : Record 14002407;
      EDIStatusCode@1240020003 : Record 14002406;
      EDIXMLManagement@1240020005 : Codeunit 14099302;
      NavisionDocument@1240020001 : Code[10];
      LineNo@1240020004 : Integer;
    BEGIN
      EDIRecDocHdr.COPY(CurrentEDIRecDocHdr);
      EDITradePartner.GET(EDIRecDocHdr."Trade Partner No.");

      WITH CurrOrderStatusHdr DO BEGIN
        CASE "Document Type" OF
          "Document Type"::" ":
            NavisionDocument := 'E_SLSSTA';
          "Document Type"::"Order Change Status":
            NavisionDocument := 'E_SLSPOC';
          "Document Type"::"Advance P.O. Ack.":
            NavisionDocument := 'E_ADVPOA';
        END;
      END;

      EDIDocument.SETRANGE("Trade Partner No.",EDIRecDocHdr."Trade Partner No.");
      EDIDocument.SETFILTER(Status,'%1|%2',EDIDocument.Status::Test,EDIDocument.Status::Production);
      EDIDocument.SETRANGE(EDIDocument."Navision Document",NavisionDocument);
      IF NOT EDIDocument.FIND('-') THEN
        ERROR(
          Text003,
          NavisionDocument,EDITradePartner."No.");
      XMLDoc := EDIDocument."XML Document";

      IF EDIDocument."Packaged Map" THEN BEGIN
        IF EDIPackageMapIntegration.EDISalesOrderStatusSend(EDIRecDocHdr,ExportVersion) THEN
        // IF EDISlsOrderStatSendPM.CreateOrderStatus(EDIRecDocHdr,ExportVersion) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END;

      EDIDocument.CALCFIELDS("Element Mapping Error","Conditional Mapping Error");
      IF EDIDocument."Element Mapping Error" OR EDIDocument."Conditional Mapping Error" THEN
        ERROR(
          Text004,
          EDIDocument."Navision Document",EDIDocument."Trade Partner No.");

      EDIOrderStatusHdr.RESET;
      EDIOrderStatusHdr.SETRANGE("Trade Partner Code",EDIRecDocHdr."Trade Partner No.");
      EDIOrderStatusHdr.SETRANGE("Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
      EDIOrderStatusHdr.SETRANGE("Export Version",ExportVersion);
      EDIOrderStatusHdr.SETRANGE("Document Type",CurrOrderStatusHdr."Document Type");
      IF EDIDocument."Status Document by Source Doc." THEN BEGIN
        EDIOrderStatusHdr.SETRANGE("Source Doc. Type",CurrOrderStatusHdr."Source Doc. Type");
        EDIOrderStatusHdr.SETRANGE("Source Doc. No.",CurrOrderStatusHdr."Source Doc. No.");
      END;
      IF EDIOrderStatusHdr.FIND('-') THEN BEGIN
        IF GUIALLOWED THEN
          DispWindow.OPEN(
            Text005 +
            Text006 +
            Text007);
        REPEAT
          EDIOrderStatusHdr.TESTFIELD(Released);

          EDISendDocHdr."Internal Doc No." := EDIOrderStatusHdr."Internal Doc. No.";
          EDISendDocHdr."Document No." := EDIOrderStatusHdr."Source Doc. No.";
          EDISendDocHdr."Navision Document" := EDIDocument."Navision Document";
          EDISend.CreateSendHdr(EDITradePartner,EDIDocument,EDISendDocHdr);

          ReadHdrAssocTables;
          InternalDocNo := SalesHeader."EDI Internal Doc. No.";
          IF (EDIOrderStatusHdr."Document Type" =
              EDIOrderStatusHdr."Document Type"::"Order Change Status") AND
             (EDIOrderStatusHdr."Buyer Initiated Change")
          THEN
            InternalDocNo := EDIOrderStatusHdr."Internal Doc. No.";
          HLCount := 0;
          TotalSegments := 0;
          CLEAR(HLCountArray);
          CreateHdrSegments;
          IF NOT EDIOrderStatusHdr."Send Hdr. Status Only" THEN BEGIN
            LineNumber := 0;
            EDIOrderStatusLine.RESET;
            EDIOrderStatusLine.SETRANGE("Internal Doc. No.",EDIOrderStatusHdr."Internal Doc. No.");
            EDIOrderStatusLine.SETRANGE("Export Version",EDIOrderStatusHdr."Export Version");
            EDIOrderStatusLine.SETRANGE("Source Doc. Type",EDIOrderStatusHdr."Source Doc. Type");
            EDIOrderStatusLine.SETRANGE("Source Doc. No.",EDIOrderStatusHdr."Source Doc. No.");
            EDIOrderStatusLine.SETRANGE("Document Type",EDIOrderStatusHdr."Document Type");
            EDIOrderStatusLine.FIND('-');
            REPEAT
              IF (EDIOrderStatusHdr."Document Type" =
                  EDIOrderStatusHdr."Document Type"::"Order Change Status") AND
                 ((EDIOrderStatusHdr."P.O. Change Processed") OR (EDIOrderStatusHdr."Cancel Released Order Update"))
              THEN BEGIN
                SalesLine.RESET;
                SalesLine.SETRANGE("Document Type",EDIOrderStatusHdr."Assoc. Source Doc. Type");
                SalesLine.SETRANGE("Document No.",EDIOrderStatusHdr."Assoc. Source Doc. No.");
                SalesLine.SETRANGE(Type,EDIOrderStatusLine.Type);
                SalesLine.SETRANGE("No.",EDIOrderStatusLine."No.");
                SalesLine.SETRANGE("EDI Segment Group",EDIOrderStatusLine."EDI Segment Group");
                IF NOT SalesLine.FIND('-') THEN BEGIN
                  IF NOT SalesLine.GET(
                         EDIOrderStatusHdr."Assoc. Source Doc. Type",EDIOrderStatusHdr."Assoc. Source Doc. No.",
                         EDIOrderStatusLine."Line No.")
                  THEN
                    CLEAR(SalesLine)
                  ELSE BEGIN
                    SalesLine.CALCFIELDS("Reserved Quantity");
                    IF NavisionDocument <> 'E_SLSSTA' THEN
                      IF SalesLine."EDI Status Pending" THEN BEGIN
                        SalesLine."EDI Status Pending" := FALSE;
                        SalesLine.MODIFY;
                      END;
                  END;
                END ELSE BEGIN
                  SalesLine.CALCFIELDS("Reserved Quantity");
                  IF NavisionDocument <> 'E_SLSSTA' THEN
                    IF SalesLine."EDI Status Pending" THEN BEGIN
                      SalesLine."EDI Status Pending" := FALSE;
                      SalesLine.MODIFY;
                    END;
                END;
              END ELSE BEGIN
                SalesLine.RESET;
                SalesLine.SETRANGE("Document Type",EDIOrderStatusHdr."Source Doc. Type");
                SalesLine.SETRANGE("Document No.",EDIOrderStatusHdr."Source Doc. No.");
                SalesLine.SETRANGE(Type,EDIOrderStatusLine.Type);
                SalesLine.SETRANGE("No.",EDIOrderStatusLine."No.");
                SalesLine.SETRANGE("EDI Segment Group",EDIOrderStatusLine."EDI Segment Group");
                IF NOT SalesLine.FIND('-') THEN BEGIN
                  IF NOT SalesLine.GET(
                         EDIOrderStatusHdr."Source Doc. Type",EDIOrderStatusHdr."Source Doc. No.",
                         EDIOrderStatusLine."Line No.")
                  THEN
                    CLEAR(SalesLine)
                  ELSE BEGIN
                    SalesLine.CALCFIELDS("Reserved Quantity");
                    IF NavisionDocument <> 'E_SLSSTA' THEN
                      IF SalesLine."EDI Status Pending" THEN BEGIN
                        SalesLine."EDI Status Pending" := FALSE;
                        SalesLine.MODIFY;
                      END;
                  END;
                END ELSE BEGIN
                  SalesLine.CALCFIELDS("Reserved Quantity");
                  IF NavisionDocument <> 'E_SLSSTA' THEN
                    IF SalesLine."EDI Status Pending" THEN BEGIN
                      SalesLine."EDI Status Pending" := FALSE;
                      SalesLine.MODIFY;
                    END;
                END;
              END;
              IF GUIALLOWED THEN
                DispWindow.UPDATE(2,EDIOrderStatusLine."No.");
              ReadLineAssocTables;
              CreateLineSegments;
            UNTIL EDIOrderStatusLine.NEXT = 0;
          END;

          CreateSummarySegments;

          EDISetup.GET;
          IF EDISetup."Send Document Error" THEN BEGIN
            EDISendDocHdr.CALCFIELDS("Data Error");
            IF EDISendDocHdr."Data Error" THEN BEGIN
              CLEAR(CreateEDIAlert);
              CreateEDIAlert.CreateAlertSendDocError(EDISendDocHdr."No.",1,FALSE);
            END;
          END;

          EDIRecDocHdr."Sales Order Status Sent Date" := TODAY;
          EDIRecDocHdr."Sales Order Status Sent Time" := TIME;
          EDIRecDocHdr.MODIFY;
          EDIOrderStatusHdr.Exported := TRUE;
          EDIOrderStatusHdr."Date Exported" := TODAY;
          EDIOrderStatusHdr."Time Exported" := TIME;
          EDIOrderStatusHdr."Exported By" := USERID;
          EDIOrderStatusHdr."Send Hdr. Status Only" := FALSE;
          EDIOrderStatusHdr.MODIFY;

          IF EDIOrderStatusHdr."EDI Status Code" = '' THEN
            ERROR(Text025,EDIOrderStatusHdr."Document Type",EDIOrderStatusHdr."Internal Doc. No.");
          EDIStatusCode.RESET;
          EDIStatusCode.SETRANGE("Trade Partner No.",EDIOrderStatusHdr."Trade Partner Code");
          EDIStatusCode.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
          EDIStatusCode.SETRANGE(Type,EDIStatusCode.Type::Status);
          EDIStatusCode.SETRANGE(Code,EDIOrderStatusHdr."EDI Status Code");
          EDIStatusCode.SETRANGE(Header,TRUE);
          IF NOT EDIStatusCode.FIND('-') THEN
            ERROR(
              Text012,EDIOrderStatusHdr."EDI Status Code",EDIOrderStatusHdr."Trade Partner Code");
          IF EDIStatusCode."Expected Date Required" THEN
            EDIOrderStatusHdr.TESTFIELD(EDIOrderStatusHdr."Expected Date");

          OrderStatusEntry.RESET;
          OrderStatusEntry.SETRANGE("Trade Partner No.",EDIOrderStatusHdr."Trade Partner Code");
          OrderStatusEntry.SETRANGE("EDI Internal Doc. No.",EDIOrderStatusHdr."Internal Doc. No.");
          OrderStatusEntry.SETRANGE("Export Version",EDIOrderStatusHdr."Export Version");
          IF OrderStatusEntry.FIND('+') THEN
            LineNo := OrderStatusEntry."Line No."
          ELSE
            LineNo := 0;
          LineNo := LineNo + 10000;
          OrderStatusEntry.INIT;
          OrderStatusEntry."Trade Partner No." := EDIOrderStatusHdr."Trade Partner Code";
          OrderStatusEntry."EDI Internal Doc. No." := EDIOrderStatusHdr."Internal Doc. No.";
          OrderStatusEntry."Export Version" := EDIOrderStatusHdr."Export Version";
          OrderStatusEntry."Line No." := LineNo;
          OrderStatusEntry.Sequence := EDIStatusCode.Sequence;
          OrderStatusEntry.Code := EDIStatusCode.Code;
          OrderStatusEntry.Description := EDIStatusCode.Description;
          OrderStatusEntry."Document Type" := EDIOrderStatusHdr."Document Type";
          OrderStatusEntry."EDI Document No." := EDIOrderStatusHdr."EDI Document No.";
          IF EDIOrderStatusHdr."Buyer Initiated Change" THEN
            OrderStatusEntry."Source Doc. No." := EDIOrderStatusHdr."Assoc. Source Doc. No."
          ELSE
            OrderStatusEntry."Source Doc. No." := EDIOrderStatusHdr."Source Doc. No.";
          OrderStatusEntry."Source Doc. Type" := EDIOrderStatusHdr."Source Doc. Type";
          OrderStatusEntry."Document Type" := EDIOrderStatusHdr."Document Type";
          OrderStatusEntry."Date Created" := TODAY;
          OrderStatusEntry."Time Created" := TIME;
          OrderStatusEntry.UserID := USERID;
          OrderStatusEntry.INSERT;

          CASE NavisionDocument OF
            'E_ADVPOA':
              BEGIN
                IF SalesHeader.GET(
                  EDIOrderStatusHdr."Source Doc. Type",EDIOrderStatusHdr."Source Doc. No.")
                THEN BEGIN
                  SalesHeader."EDI Ack. Generated" := TRUE;
                  SalesHeader."EDI Ack. Gen. Date" := TODAY;
                  SalesHeader.MODIFY;
                END;
              END;
          END;
        UNTIL EDIOrderStatusHdr.NEXT = 0;

        IF XMLDoc THEN
          EDIXMLManagement.ResponseIDSubstitution(EDISendDocHdr);

        IF GUIALLOWED THEN
          DispWindow.CLOSE;

        EXIT(TRUE);
       END ELSE
         EXIT(FALSE);
    END;

    PROCEDURE CreateHdrSegments@5();
    VAR
      NodeOnly@1240020000 : Boolean;
      CreateNode@1240020001 : Boolean;
      BypassHLCountIncrement@1240021100 : Boolean;
    BEGIN
      SalesHeader.CALCFIELDS(Amount,"Amount Including VAT");

      ProcessingLines := FALSE;
      EDISegment.RESET;
      EDISegment.SETRANGE("Trade Partner No.",EDIDocument."Trade Partner No.");
      EDISegment.SETRANGE("Navision Document",EDIDocument."Navision Document");
      EDISegment.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
      EDISegment.SETRANGE(Version,EDIDocument.Version);
      IF NOT EDISegment.FIND('-') THEN
        ERROR(Text008,EDIDocument."Trade Partner No.");

      REPEAT
        CLEAR(OutFldArray);
        CLEAR(OutLenArray);
        CLEAR(OutErrorArray);
        NodeOnly := FALSE;
        CreateNode := TRUE;
        EDIElement.RESET;
        EDIElement.SETRANGE("Trade Partner No.",EDISegment."Trade Partner No.");
        EDIElement.SETRANGE("Navision Document",EDISegment."Navision Document");
        EDIElement.SETRANGE("EDI Document No.",EDISegment."EDI Document No.");
        EDIElement.SETRANGE(Version,EDISegment.Version);
        EDIElement.SETRANGE(Segment,EDISegment.Segment);
        EDIElement.SETRANGE(Type,EDIElement.Type::Export);
        IF NOT EDIElement.FIND('-') THEN BEGIN
          IF XMLDoc THEN BEGIN
            EDISegment.CALCFIELDS("Has Attributes","Node Text");
            IF EDISegment."Node Text" OR EDISegment."Has Attributes" THEN
              ERROR(
                Text026,
                  EDISegment."Trade Partner No.",EDISegment."Navision Document",
                  EDISegment.Version,EDISegment."Node Name")
             ELSE
               NodeOnly := TRUE;
          END ELSE
            ERROR(
              Text026,
                EDISegment."Trade Partner No.",EDISegment."Navision Document",
                EDISegment.Version,EDISegment.Segment);
        END ELSE
          IF XMLDoc AND EDIElement."Node Text" THEN
            CreateNode := FALSE;
        IF (XMLDoc = FALSE) OR (XMLDoc AND NodeOnly = FALSE) THEN BEGIN
          i := 1;
          LoopCnt := 1;
          TotalSegments := TotalSegments + 1;
          BypassHLCountIncrement := FALSE;
          REPEAT
            ReverseCrossRefArray[i] := '';
            ReverseCrossReference := EDIElement."Reverse Cross Reference";
            IF ((EDIElement."Fixed Value" <> '') AND (XMLDoc = FALSE)) OR
               ((EDIElement."XML Fixed Value" <> '') AND (XMLDoc))
            THEN BEGIN
              IF XMLDoc THEN
                OutFldArray[i] := EDIElement."XML Fixed Value"
              ELSE
                OutFldArray[i] := EDIElement."Fixed Value";
            END ELSE
              CASE EDIElement.Origin OF
                EDIElement.Origin::Navision:
                  BEGIN
                    LoadDBFields;
                    IF ReverseCrossReference THEN BEGIN
                      CLEAR(EDIGetReverseCrossRef);
                      ReverseCrossRefArray[i] :=
                        EDIGetReverseCrossRef.GetReverseCrossRef(
                          EDIElement,EDISendDocHdr,OutFldArray[i]);
                        EDIGetReverseCrossRef.FormatOutput(
                          EDISendDocHdr,EDIElement,OutError2,ReverseCrossRefArray,BypassSegment2,i);
                    END;
                  END;
                EDIElement.Origin::"EDI In":
                  LoadEDIInFields;
                EDIElement.Origin::"EDI Out":
                  LoadEDIOutFields;
              END;
              OutLenArray[i] := EDIElement.Length;
              EDIFormat.FormatOutput(
                EDITemplate,EDIElement,OutFldArray,OutErrorArray,i,BypassSegment,
                BooleanVariable,DateVariable,DecimalVariable,IntegerVariable,TimeVariable,
                DateTimeVariable);
                IF ReverseCrossReference THEN
                  OutErrorArray[i] := OutError2;
              EDIElementArray[i].COPY(EDIElement);
              IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN
                CASE TRUE OF
                  STRPOS(EDIElement."Field Name",'HL') <> 0:
                    BypassHLCountIncrement := TRUE;
                END;
              i := i + 1;
            UNTIL EDIElement.NEXT = 0;
          END;
          NewSegment := TRUE;
          i := 1;
          IF ReverseCrossReference THEN
            BypassSegment := BypassSegment2;
              CASE EDIElement.Origin OF
                EDIElement.Origin::Navision:
                  BEGIN
                    IF (LoopCnt = 1) AND (EDISegment."Repeat Segment") THEN BEGIN
                      RepeatSegment;
                      LoopCnt := LoopCnt + 1;
                    END;
                  END;
              END;
          IF (NOT BypassSegment) AND (NOT OutputOff) THEN BEGIN
            IF XMLDoc AND CreateNode THEN BEGIN
              EDISend.CreateSendLine(
                EDISendDocHdr,EDIElementArray[i],OutFldArray[i],OutLenArray[i],OutErrorArray[i],
                NewSegment,ReverseCrossRefValue,EDIDocument,TRUE,EDISegment);
              NewSegment := FALSE;
            END;
            IF (XMLDoc = FALSE) OR (XMLDoc AND NodeOnly = FALSE) THEN
              REPEAT
                ReverseCrossRefValue := ReverseCrossRefArray[i];
                EDISend.CreateSendLine(
                  EDISendDocHdr,EDIElementArray[i],OutFldArray[i],OutLenArray[i],OutErrorArray[i],
                  NewSegment,ReverseCrossRefValue,EDIDocument,FALSE,EDISegment);
                NewSegment := FALSE;
                i := i + 1;
              UNTIL OutLenArray[i] = 0;
          END ELSE BEGIN
            TotalSegments := TotalSegments - 1;
            HLCount := HLCount - 1;
          END;
         IF (EDISegment."Repeat Segment") THEN
          CASE TRUE OF
            LoopFinished = FALSE:
              BEGIN
                GetNextRecord;
                EDISegment.NEXT(-1);
              END;
            LoopFinished = TRUE:
              ResetAssocRecord(RecordNo);
          END;
        BypassHLCountIncrement := FALSE;
      UNTIL (EDISegment.NEXT = 0) OR
            ((EDISegment.Segment = 'HL ITEM BEGIN') OR (EDISegment."Node Name" = 'HL ITEM BEGIN'));
    END;

    PROCEDURE CreateLineSegments@14();
    VAR
      NodeOnly@1240020000 : Boolean;
      CreateNode@1240020001 : Boolean;
      BypassHLCountIncrement@1240020200 : Boolean;
    BEGIN
      ProcessingLines := TRUE;
      DetailSegmentCount := 0;
      BypassCount := 0;

      EDISegment.RESET;
      EDISegment.SETRANGE("Trade Partner No.",EDIDocument."Trade Partner No.");
      EDISegment.SETRANGE("Navision Document",EDIDocument."Navision Document");
      EDISegment.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
      EDISegment.SETRANGE(Version,EDIDocument.Version);
      IF EDISegment.FIND('-') THEN
          REPEAT
          UNTIL (EDISegment.NEXT = 0) OR
                ((EDISegment.Segment = 'HL ITEM BEGIN') OR (EDISegment."Node Name" = 'HL ITEM BEGIN'));

      IF EDISegment.NEXT = 0 THEN
        ERROR(Text009);

      REPEAT
        IF (SalesLine."EDI Line Type" = SalesLine."EDI Line Type"::Change) AND
           (SalesLine."EDI Line Status" = SalesLine."EDI Line Status"::New)
        THEN
          GetAssocInternalDocNo(SalesHeader);
        CLEAR(OutFldArray);
        CLEAR(OutLenArray);
        CLEAR(OutErrorArray);
        NodeOnly := FALSE;
        CreateNode := TRUE;
        EDIElement.SETRANGE("Trade Partner No.",EDISegment."Trade Partner No.");
        EDIElement.SETRANGE("Navision Document",EDISegment."Navision Document");
        EDIElement.SETRANGE("EDI Document No.",EDISegment."EDI Document No.");
        EDIElement.SETRANGE(Version,EDISegment.Version);
        EDIElement.SETRANGE(Segment,EDISegment.Segment);
        IF NOT EDIElement.FIND('-') THEN BEGIN
          IF XMLDoc THEN BEGIN
            EDISegment.CALCFIELDS("Has Attributes","Node Text");
            IF EDISegment."Node Text" OR EDISegment."Has Attributes" THEN
              ERROR(
                Text026,
                  EDISegment."Trade Partner No.",EDISegment."Navision Document",
                  EDISegment.Version,EDISegment."Node Name")
            ELSE
              NodeOnly := TRUE;
          END ELSE
            ERROR(
              Text026,
                EDISegment."Trade Partner No.",EDISegment."Navision Document",
                EDISegment.Version,EDISegment.Segment);
        END ELSE
          IF XMLDoc AND EDIElement."Node Text" THEN
            CreateNode := FALSE;
        IF (XMLDoc = FALSE) OR (XMLDoc AND NodeOnly = FALSE) THEN BEGIN
          i := 1;
          LoopCnt := 1;
          TotalSegments := TotalSegments + 1;
          BypassHLCountIncrement := FALSE;
          REPEAT
            ReverseCrossRefArray[i] := '';
            ReverseCrossReference := EDIElement."Reverse Cross Reference";
            IF ((EDIElement."Fixed Value" <> '') AND (XMLDoc = FALSE)) OR
               ((EDIElement."XML Fixed Value" <> '') AND (XMLDoc))
            THEN BEGIN
              IF XMLDoc THEN
                OutFldArray[i] := EDIElement."XML Fixed Value"
              ELSE
                OutFldArray[i] := EDIElement."Fixed Value";
            END ELSE
              CASE EDIElement.Origin OF
                EDIElement.Origin::Navision:
                  BEGIN
                    LoadDBFields;
                    IF ReverseCrossReference THEN BEGIN
                      CLEAR(EDIGetReverseCrossRef);
                      ReverseCrossRefArray[i] :=
                        EDIGetReverseCrossRef.GetReverseCrossRef(
                          EDIElement,EDISendDocHdr,OutFldArray[i]);
                        EDIGetReverseCrossRef.FormatOutput(
                          EDISendDocHdr,EDIElement,OutError2,ReverseCrossRefArray,BypassSegment2,i);
                    END;
                    IF (LoopCnt = 1) AND (EDISegment."Repeat Segment") THEN BEGIN
                      RepeatSegment;
                      LoopCnt := LoopCnt + 1;
                    END;
                  END;
                EDIElement.Origin::"EDI In":
                  LoadEDIInFields;
                EDIElement.Origin::"EDI Out":
                  LoadEDIOutFields;
              END;
            OutLenArray[i] := EDIElement.Length;
            EDIFormat.FormatOutput(
              EDITemplate,EDIElement,OutFldArray,OutErrorArray,i,BypassSegment,
              BooleanVariable,DateVariable,DecimalVariable,IntegerVariable,TimeVariable,
              DateTimeVariable);
              IF ReverseCrossReference THEN
                OutErrorArray[i] := OutError2;
            EDIElementArray[i].COPY(EDIElement);
            IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN
              CASE TRUE OF
                STRPOS(EDIElement."Field Name",'HL') <> 0:
                    BypassHLCountIncrement := TRUE
              END;
            i := i + 1;
          UNTIL EDIElement.NEXT = 0;
        END;
        NewSegment := TRUE;
        i := 1;
        IF ReverseCrossReference THEN
          BypassSegment := BypassSegment2;
        IF (NOT BypassSegment) AND (NOT OutputOff) THEN BEGIN
          IF XMLDoc AND CreateNode THEN BEGIN
            EDISend.CreateSendLine(
              EDISendDocHdr,EDIElementArray[i],OutFldArray[i],OutLenArray[i],OutErrorArray[i],
                NewSegment,ReverseCrossRefValue,EDIDocument,TRUE,EDISegment);
                NewSegment := FALSE;
          END;
          IF (XMLDoc = FALSE) OR (XMLDoc AND NodeOnly = FALSE) THEN
            REPEAT
              ReverseCrossRefValue := ReverseCrossRefArray[i];
              EDISend.CreateSendLine(
                EDISendDocHdr,EDIElementArray[i],OutFldArray[i],OutLenArray[i],OutErrorArray[i],
                NewSegment,ReverseCrossRefValue,EDIDocument,FALSE,EDISegment);
              NewSegment := FALSE;
              i := i + 1;
            UNTIL OutLenArray[i] = 0;
        END ELSE BEGIN
          TotalSegments := TotalSegments - 1;
          IF BypassHLCountIncrement THEN
            HLCount := HLCount - 1;
        END;
        IF (EDISegment."Repeat Segment") THEN
          CASE TRUE OF
            LoopFinished = FALSE:
              BEGIN
                GetNextRecord;
                EDISegment.NEXT(-1);
              END;
            LoopFinished = TRUE:
              ResetAssocRecord(RecordNo);
          END;
        DetailSegmentCount := DetailSegmentCount + 1;
        IF BypassSegment THEN
          BypassCount := BypassCount + 1;
         EDISegment2.COPY(EDISegment);
         IF (EDISegment2.NEXT = 0) OR
            ((EDISegment2.Segment = 'HL END') OR (EDISegment2."Node Name" = 'HL END'))
         THEN BEGIN
           IF BypassCount = DetailSegmentCount THEN
             LineNumber := LineNumber - 1;
         END;
        BypassHLCountIncrement := FALSE;
      UNTIL (EDISegment.NEXT = 0) OR
            ((EDISegment.Segment = 'HL END') OR (EDISegment."Node Name" = 'HL END'));
    END;

    PROCEDURE CreateSummarySegments@15();
    VAR
      NodeOnly@1240020000 : Boolean;
      CreateNode@1240020001 : Boolean;
      BypassHLCountIncrement@1240020400 : Boolean;
    BEGIN
      SalesHeader.CALCFIELDS(Amount,"Amount Including VAT");

      CLEAR(EDIFormat);
      EDISegment.RESET;
      EDISegment.SETRANGE("Trade Partner No.",EDIDocument."Trade Partner No.");
      EDISegment.SETRANGE("Navision Document",EDIDocument."Navision Document");
      EDISegment.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
      EDISegment.SETRANGE(Version,EDIDocument.Version);
      IF NOT EDISegment.FIND('-') THEN
        ERROR(Text011,EDIDocument."Trade Partner No.");
      REPEAT
      UNTIL (EDISegment.NEXT = 0) OR
            ((EDISegment.Segment = 'HL END') OR (EDISegment."Node Name" = 'HL END'));

      IF EDISegment.NEXT = 0 THEN
        EXIT;

      REPEAT
        CLEAR(OutFldArray);
        CLEAR(OutLenArray);
        CLEAR(OutErrorArray);
        NodeOnly := FALSE;
        CreateNode := TRUE;
        EDIElement.SETRANGE("Trade Partner No.",EDISegment."Trade Partner No.");
        EDIElement.SETRANGE("Navision Document",EDISegment."Navision Document");
        EDIElement.SETRANGE("EDI Document No.",EDISegment."EDI Document No.");
        EDIElement.SETRANGE(Version,EDISegment.Version);
        EDIElement.SETRANGE(Segment,EDISegment.Segment);
        IF NOT EDIElement.FIND('-') THEN BEGIN
          IF XMLDoc THEN BEGIN
            EDISegment.CALCFIELDS("Has Attributes","Node Text");
            IF EDISegment."Node Text" OR EDISegment."Has Attributes" THEN
              ERROR(
                Text026,
                  EDISegment."Trade Partner No.",EDISegment."Navision Document",
                  EDISegment.Version,EDISegment."Node Name")
            ELSE
              NodeOnly := TRUE;
          END ELSE
            ERROR(
              Text026,
                EDISegment."Trade Partner No.",EDISegment."Navision Document",
                EDISegment.Version,EDISegment.Segment);
        END ELSE
          IF XMLDoc AND EDIElement."Node Text" THEN
            CreateNode := FALSE;
        IF (XMLDoc = FALSE) OR (XMLDoc AND NodeOnly = FALSE) THEN BEGIN
          i := 1;
          LoopCnt := 1;
          TotalSegments := TotalSegments + 1;
          BypassHLCountIncrement := FALSE;
          REPEAT
            ReverseCrossRefArray[i] := '';
            ReverseCrossReference := EDIElement."Reverse Cross Reference";
            IF ((EDIElement."Fixed Value" <> '') AND (XMLDoc = FALSE)) OR
               ((EDIElement."XML Fixed Value" <> '') AND (XMLDoc))
            THEN BEGIN
              IF XMLDoc THEN
                OutFldArray[i] := EDIElement."XML Fixed Value"
              ELSE
                OutFldArray[i] := EDIElement."Fixed Value";
            END ELSE
              CASE EDIElement.Origin OF
                EDIElement.Origin::Navision:
                  BEGIN
                    LoadDBFields;
                    IF ReverseCrossReference THEN BEGIN
                      CLEAR(EDIGetReverseCrossRef);
                      ReverseCrossRefArray[i] :=
                        EDIGetReverseCrossRef.GetReverseCrossRef(
                          EDIElement,EDISendDocHdr,OutFldArray[i]);
                        EDIGetReverseCrossRef.FormatOutput(
                          EDISendDocHdr,EDIElement,OutError2,ReverseCrossRefArray,BypassSegment2,i);
                    END;
                    IF (LoopCnt = 1) AND (EDISegment."Repeat Segment") THEN BEGIN
                      RepeatSegment;
                      LoopCnt := LoopCnt + 1;
                    END;
                  END;
                EDIElement.Origin::"EDI In":
                  LoadEDIInFields;
                EDIElement.Origin::"EDI Out":
                  LoadEDIOutFields;
              END;
            OutLenArray[i] := EDIElement.Length;
            EDIFormat.FormatOutput(
              EDITemplate,EDIElement,OutFldArray,OutErrorArray,i,BypassSegment,
              BooleanVariable,DateVariable,DecimalVariable,IntegerVariable,TimeVariable,DateTimeVariable);
              IF ReverseCrossReference THEN
                OutErrorArray[i] := OutError2;
            EDIElementArray[i].COPY(EDIElement);
            IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN
              CASE TRUE OF
                STRPOS(EDIElement."Field Name",'HL') <> 0:
                  BypassHLCountIncrement := TRUE;
              END;
            i := i + 1;
          UNTIL EDIElement.NEXT = 0;
        END;
        NewSegment := TRUE;
        i := 1;
        IF ReverseCrossReference THEN
          BypassSegment := BypassSegment2;
        IF (NOT BypassSegment) AND (NOT OutputOff) THEN BEGIN
          IF XMLDoc AND CreateNode THEN BEGIN
            EDISend.CreateSendLine(
              EDISendDocHdr,EDIElementArray[i],OutFldArray[i],OutLenArray[i],OutErrorArray[i],
                NewSegment,ReverseCrossRefValue,EDIDocument,TRUE,EDISegment);
                NewSegment := FALSE;
          END;
          IF (XMLDoc = FALSE) OR (XMLDoc AND NodeOnly = FALSE) THEN
            REPEAT
              ReverseCrossRefValue := ReverseCrossRefArray[i];
              EDISend.CreateSendLine(
                EDISendDocHdr,EDIElementArray[i],OutFldArray[i],OutLenArray[i],OutErrorArray[i],
                NewSegment,ReverseCrossRefValue,EDIDocument,FALSE,EDISegment);
              NewSegment := FALSE;
              i := i + 1;
            UNTIL OutLenArray[i] = 0;
            TotalSegments := TotalSegments - 1;
          END ELSE BEGIN
            IF BypassHLCountIncrement THEN
              HLCount := HLCount - 1;
          END;
          IF (EDISegment."Repeat Segment") THEN
          CASE TRUE OF
            LoopFinished = FALSE:
              BEGIN
                GetNextRecord;
                EDISegment.NEXT(-1);
              END;
            LoopFinished = TRUE:
              ResetAssocRecord(RecordNo);
          END;
        BypassHLCountIncrement := FALSE;
      UNTIL EDISegment.NEXT = 0;
    END;

    PROCEDURE LoadEDIInFields@20();
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;

      OutFldArray[i] := '';
      DataFound := FALSE;

      EDIRecDocFields.RESET;
      EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","Field Name");
      EDIRecDocFields.SETRANGE("Internal Doc. No.",InternalDocNo);
      EDIRecDocFields.SETRANGE("Field Name",EDIElement."Field Name");
      IF ProcessingLines THEN
        EDIRecDocFields.SETRANGE("Segment Group",EDIOrderStatusLine."EDI Segment Group")
      ELSE
        EDIRecDocFields.SETRANGE("Segment Group",0);
      IF EDIRecDocFields.FIND('-') THEN
        REPEAT
          IF EDIRecDocFields."Field Text Value"[1] <> ' ' THEN BEGIN
            DataFound := TRUE;
            CASE EDIElement."Data Type" OF
              EDIElement."Data Type"::Text:
                OutFldArray[i] := EDIRecDocFields."Field Text Value";
              EDIElement."Data Type"::"Dec Implied":
                DecimalVariable := EDIRecDocFields."Field Dec. Value";
              EDIElement."Data Type"::"Dec Explicit":
                DecimalVariable := EDIRecDocFields."Field Dec. Value";
              EDIElement."Data Type"::Integer:
                IntegerVariable := EDIRecDocFields."Field Integer Value";
              EDIElement."Data Type"::"Date YYMMDD":
                DateVariable := EDIRecDocFields."Field Date Value";
              EDIElement."Data Type"::"Date YYYYMMDD":
                DateVariable := EDIRecDocFields."Field Date Value";
            END;
          END;
        UNTIL (EDIRecDocFields.NEXT = 0) OR (DataFound);
    END;

    PROCEDURE LoadEDIOutFields@16();
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;

      IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN BEGIN
        CASE EDIElement."Field Name" OF
          ELSE BEGIN
            LoadEDIOutVariable;
            LoadEDIOutRecordRef;
            EDILoadEDIOutFields.OrderStatusSendEDIOut(
              EDIElement,OutFldArray,DecimalVariable,IntegerVariable,DateVariable,
              BooleanVariable,TimeVariable,DateTimeVariable,i,HLCount);
          END;
        END;
      END;
    END;

    PROCEDURE UpdateLineTotals@28();
    BEGIN
      LineNumber := LineNumber + 1;

      TotalUnits := TotalUnits + EDIOrderStatusLine."Quantity To Ship";

      NetShipWeight := NetShipWeight + (SalesLine."Net Weight" * SalesLine.Quantity);
      GrossShipWeight := GrossShipWeight + (SalesLine."Gross Weight" * SalesLine.Quantity);
    END;

    PROCEDURE LoadDBFields@23();
    BEGIN
      CASE EDIElement."NAV Table No." OF
        3:
          BEGIN
            RecRef.OPEN(3);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(PaymentTerms);
          END;
        10:
          BEGIN
            RecRef.OPEN(10);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShipmentMethod);
          END;
        14:
          BEGIN
            RecRef.OPEN(14);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(Location);
          END;
        27:
          BEGIN
            RecRef.OPEN(27);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(Item);
          END;
        36:
          BEGIN
            RecRef.OPEN(36);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesHeader);
          END;
        37:
          BEGIN
            RecRef.OPEN(37);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesLine);
          END;
        44:
          BEGIN
            RecRef.OPEN(44);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesCommentLine);
          END;
        79:
          BEGIN
            RecRef.OPEN(79);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(CompanyInformation);
          END;
        112:
          BEGIN
            RecRef.OPEN(112);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesInvoiceHeader);
          END;
        113:
          BEGIN
            RecRef.OPEN(113);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesInvoiceLine);
          END;
        222:
          BEGIN
            RecRef.OPEN(222);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShiptoAddress);
          END;
        291:
          BEGIN
            RecRef.OPEN(291);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShippingAgent);
          END;
        5404:
          BEGIN
            RecRef.OPEN(5404);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ItemUnitOfMeasure);
          END;
        5717:
          BEGIN
            RecRef.OPEN(5717);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ItemCrossReference);
          END;
        10018:
          BEGIN
            RecRef.OPEN(18);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SelltoCustomer);
          END;
        10019:
          BEGIN
            RecRef.OPEN(18);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(BilltoCustomer);
          END;
          19009:
          BEGIN
            RecRef.OPEN(9);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SelltoCountry);
          END;
        19010:
          BEGIN
            RecRef.OPEN(9);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(BilltoCountry);
          END;
        19011:
          BEGIN
            RecRef.OPEN(9);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShiptoCountry);
          END;
        19012:
          BEGIN
            RecRef.OPEN(9);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShipfromCountry);
          END;
        14002350:
          BEGIN
            RecRef.OPEN(14002350);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDITemplate);
          END;
        14002353:
          BEGIN
            RecRef.OPEN(14002353);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDIDocument);
          END;
        14002354:
          BEGIN
            RecRef.OPEN(14002354);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDISegment);
          END;
        14002360:
          BEGIN
            RecRef.OPEN(14002360);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDITradePartner);
          END;
        14002362:
          BEGIN
            RecRef.OPEN(14002362);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDICustCrossRef);
          END;
        14002364:
          BEGIN
            RecRef.OPEN(14002364);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDITradePtnrItem);
          END;
        14002369:
          BEGIN
            RecRef.OPEN(14002369);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDISendDocHdr);
          END;
        14002371:
          BEGIN
            RecRef.OPEN(14002371);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDIReceiveDocHdrInfo);
          END;
        14002372:
          BEGIN
            RecRef.OPEN(14002372);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDIReceiveDocLineInfo);
          END;
        14002382:
          BEGIN
            RecRef.OPEN(14002382);
            IF RecRef.FIND('-') THEN
             RecRef.GETTABLE(EDIDiscount);
          END;
        14002383:
          BEGIN
            RecRef.OPEN(14002383);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDILineDiscount);
          END;
        14002400:
          BEGIN
            RecRef.OPEN(14002400);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDIOrderStatusHdr);
          END;
        14002401:
          BEGIN
            RecRef.OPEN(14002401);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDIOrderStatusLine);
          END;
        ELSE
          EXIT;
      END;
      EDILoadDBFields.LoadDBFields(
        EDIElement,OutFldArray,DecimalVariable,IntegerVariable,DateVariable,
        BooleanVariable,TimeVariable,DateTimeVariable,i,RecRef);
      RecRef.CLOSE;
    END;

    PROCEDURE ReadHdrAssocTables@26();
    BEGIN
      // Get supporting data from other tables
      EDITemplate.GET(EDIDocument."EDI Template Code");

      CompanyInformation.GET;

      CLEAR(PaymentTerms);
      IF SalesHeader."Payment Terms Code" <> '' THEN
        PaymentTerms.GET(SalesHeader."Payment Terms Code");

      IF NOT SelltoCustomer.GET(SalesHeader."Sell-to Customer No.") THEN
        CLEAR(SelltoCustomer);

      IF NOT BilltoCustomer.GET(SalesHeader."Bill-to Customer No.") THEN
        CLEAR(BilltoCustomer);

      CLEAR(ShiptoAddress);
      IF SalesHeader."Ship-to Code" <> '' THEN
        ShiptoAddress.GET(SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code");

      CLEAR(SalespersonPurchaser);
      IF SalesHeader."Salesperson Code" <> '' THEN BEGIN
        SalespersonPurchaser.SETRANGE(Code,SalesHeader."Salesperson Code");
        SalespersonPurchaser.FIND('-');
      END;

      CLEAR(ShipmentMethod);
      IF SalesHeader."Shipment Method Code" <> '' THEN
        ShipmentMethod.GET(SalesHeader."Shipment Method Code");

      CLEAR(ShippingAgent);
      IF SalesHeader."Shipping Agent Code" <> '' THEN
        ShippingAgent.GET(SalesHeader."Shipping Agent Code");

      EDICustCrossRef.RESET;
      EDICustCrossRef.SETRANGE("Trade Partner No.",EDITradePartner."No.");
      EDICustCrossRef.SETRANGE("Navision Sell To Code",SalesHeader."Sell-to Customer No.");
      EDICustCrossRef.SETRANGE("Navision Ship To Code",SalesHeader."Ship-to Code");
      IF NOT EDICustCrossRef.FIND('-') THEN
        CLEAR(EDICustCrossRef);

      SalesCommentLine.RESET;
      SalesCommentLine.SETRANGE(
        "Document Type",SalesCommentLine."Document Type"::Order);
      SalesCommentLine.SETRANGE("No.",SalesHeader."No.");
      IF NOT SalesCommentLine.FIND('-') THEN
        CLEAR(SalesCommentLine);

      IF (EDIOrderStatusHdr."Document Type" =
          EDIOrderStatusHdr."Document Type"::"Order Change Status") AND
         (EDIOrderStatusHdr."Buyer Initiated Change")
      THEN BEGIN
        SalesHeader.RESET;
        SalesHeader.SETRANGE("Document Type",EDIOrderStatusHdr."Assoc. Source Doc. Type");
        SalesHeader.SETRANGE("No.",EDIOrderStatusHdr."Assoc. Source Doc. No.");
        IF SalesHeader.FIND('-') THEN
          IF GUIALLOWED THEN
            DispWindow.UPDATE(1,SalesHeader."No.")
        ELSE
          CLEAR(SalesHeader);
      END ELSE
        SalesHeader.RESET;
        SalesHeader.SETRANGE("Document Type",EDIOrderStatusHdr."Source Doc. Type");
        SalesHeader.SETRANGE("No.",EDIOrderStatusHdr."Source Doc. No.");
        IF NOT SalesHeader.FIND('-') THEN
          CLEAR(SalesHeader)
        ELSE
          IF GUIALLOWED THEN
            DispWindow.UPDATE(1,SalesHeader."No.");

      EDIReceiveDocHdrInfo.RESET;
      EDIReceiveDocHdrInfo.SETCURRENTKEY("Document No.");
      EDIReceiveDocHdrInfo.SETRANGE("Document No.",SalesHeader."No.");
      EDIReceiveDocHdrInfo.SETRANGE("Internal Doc. No.",SalesHeader."EDI Internal Doc. No.");
      IF NOT EDIReceiveDocHdrInfo.FIND('-') THEN
        CLEAR(EDIReceiveDocHdrInfo);

      CLEAR(Location);
      IF SalesHeader."Location Code" <> '' THEN
        Location.GET(SalesHeader."Location Code");

      IF SalesHeader."Sell-to Country/Region Code" <> '' THEN
        IF NOT SelltoCountry.GET(SalesHeader."Sell-to Country/Region Code") THEN
          CLEAR(SelltoCountry);

      IF SalesHeader."Bill-to Country/Region Code" <> '' THEN
        IF NOT BilltoCountry.GET(SalesHeader."Bill-to Country/Region Code") THEN
          CLEAR(BilltoCountry);

      IF SalesHeader."Ship-to Country/Region Code" <> '' THEN
        IF NOT ShiptoCountry.GET(SalesHeader."Ship-to Country/Region Code") THEN
          CLEAR(ShiptoCountry);

      IF Location."Country/Region Code" <> '' THEN
        IF NOT ShipfromCountry.GET(Location."Country/Region Code") THEN
          CLEAR(ShipfromCountry);

      EDIDiscount.RESET;
      EDIDiscount.SETRANGE("Internal Doc. No.",SalesHeader."EDI Internal Doc. No.");
      IF NOT EDIDiscount.FIND('-') THEN
        CLEAR(EDIDiscount);

      //
      // Add associated tables.
      //
    END;

    PROCEDURE ReadLineAssocTables@27();
    BEGIN
      UpdateLineTotals;

      // Get Line supporting data from other tables.
      IF SalesLine.Type = SalesLine.Type::Item THEN BEGIN
        IF NOT Item.GET(SalesLine."No.") THEN
          CLEAR(Item);
        IF NOT ItemUnitOfMeasure.GET(SalesLine."No.",SalesLine."Unit of Measure Code") THEN
          CLEAR(ItemUnitOfMeasure);
      END;


      ItemCrossReference.RESET;
      ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
      ItemCrossReference.SETFILTER(
        "Cross-Reference Type",'<>%1',ItemCrossReference."Cross-Reference Type"::Vendor);
      ItemCrossReference.SETRANGE("Cross-Reference Type No.",SalesHeader."Sell-to Customer No.");
      ItemCrossReference.SETRANGE("Item No.",EDIOrderStatusLine."No.");
      ItemCrossReference.SETRANGE("Variant Code",SalesLine."Variant Code");
      IF NOT ItemCrossReference.FIND('-') THEN BEGIN
        ItemCrossReference.SETRANGE("Cross-Reference Type No.",'');
        IF NOT ItemCrossReference.FIND('-') THEN
          CLEAR(ItemCrossReference);
      END;

      EDITradePtnrItem.RESET;
      EDITradePtnrItem.SETRANGE("Trade Partner No.",SalesHeader."EDI Trade Partner");
      EDITradePtnrItem.SETRANGE("Navision Item No.",SalesLine."No.");
      EDITradePtnrItem.SETRANGE("Navision Variant Code",SalesLine."Variant Code");
      IF NOT EDITradePtnrItem.FIND('-') THEN
        EDITradePtnrItem.SETRANGE("Navision Variant Code");
      IF NOT EDITradePtnrItem.FIND('-') THEN
        CLEAR(EDITradePtnrItem);

      EDIReceiveDocLineInfo.RESET;
      EDIReceiveDocLineInfo.SETCURRENTKEY("Document No.","Line No.");
      EDIReceiveDocLineInfo.SETRANGE("Document No.",SalesHeader."No.");
      EDIReceiveDocLineInfo.SETRANGE("Internal Doc. No.",SalesHeader."EDI Internal Doc. No.");
      EDIReceiveDocLineInfo.SETRANGE("Line No.",SalesLine."Line No.");
      IF NOT EDIReceiveDocLineInfo.FIND('-') THEN
        CLEAR(EDIReceiveDocLineInfo);

      EDILineDiscount.RESET;
      EDILineDiscount.SETCURRENTKEY("Internal Doc. No.","Segment Group",Code);
      EDILineDiscount.SETRANGE("Internal Doc. No.",SalesHeader."EDI Internal Doc. No.");
      EDILineDiscount.SETRANGE("Segment Group",SalesLine."EDI Segment Group");
      EDILineDiscount.SETRANGE("Document No.",SalesHeader."No.");
      EDILineDiscount.SETRANGE("Document Line No.",SalesLine."Line No.");
      IF NOT EDILineDiscount.FIND('-') THEN
        CLEAR(EDILineDiscount);


      //
      // Add associated tables.
      //
    END;

    PROCEDURE CreateOrderStatusLine@4(SalesLine@1240030000 : Record 37;SalesHeader@1240030001 : Record 36;OrderQuantity@1240030002 : Decimal;QuantityToShip@1240030003 : Decimal);
    VAR
      EDIOrdStatHdr@1240030004 : Record 14002400;
      EDIOrdStatLine@1240030005 : Record 14002401;
      VersionNo@1240030006 : Integer;
    BEGIN
      EDIOrdStatHdr.RESET;
      EDIOrdStatHdr.SETRANGE("Trade Partner Code",SalesHeader."EDI Trade Partner");
      EDIOrdStatHdr.SETRANGE("Internal Doc. No.",SalesHeader."EDI Internal Doc. No.");
      EDIOrdStatHdr.SETRANGE("Document Type",EDIOrdStatHdr."Document Type"::" ");
      IF NOT EDIOrdStatHdr.FIND('+') THEN
        VersionNo := 1
      ELSE
        IF EDIOrdStatHdr.Exported THEN
          VersionNo := EDIOrdStatHdr."Export Version" + 1
        ELSE
          VersionNo := EDIOrdStatHdr."Export Version";

      EDIOrdStatHdr.RESET;
      IF NOT EDIOrdStatHdr.GET(
        SalesHeader."EDI Trade Partner",SalesHeader."EDI Internal Doc. No.",VersionNo,
        EDIOrdStatHdr."Source Doc. Type"::Order,SalesHeader."No.",EDIOrdStatHdr."Document Type"::" ")
      THEN BEGIN
        EDIOrdStatHdr.INIT;
        EDIOrdStatHdr."Trade Partner Code" := SalesHeader."EDI Trade Partner";
        EDIOrdStatHdr."Internal Doc. No." := SalesHeader."EDI Internal Doc. No.";
        EDIOrdStatHdr."Export Version" := VersionNo;
        EDIOrdStatHdr."Source Doc. Type" := EDIOrdStatHdr."Source Doc. Type"::Order;
        EDIOrdStatHdr."Source Doc. No." := SalesHeader."No.";
        EDIOrdStatHdr."Document Type" := EDIOrdStatHdr."Document Type"::" ";
        EDIOrderStatusHdr."Expected Date" := SalesHeader."EDI Expected Delivery Date";
        EDIOrdStatHdr.INSERT;
      END;

      EDIOrdStatLine.RESET;
      EDIOrdStatLine.SETRANGE("Internal Doc. No.",EDIOrdStatHdr."Internal Doc. No.");
      EDIOrdStatLine.SETRANGE("Export Version",EDIOrdStatHdr."Export Version");
      EDIOrdStatLine.SETRANGE("Source Doc. Type",EDIOrdStatHdr."Source Doc. Type");
      EDIOrdStatLine.SETRANGE("Source Doc. No.",EDIOrdStatHdr."Source Doc. No.");
      EDIOrdStatLine.SETRANGE("Line No.",SalesLine."Line No.");
      EDIOrdStatLine.SETRANGE("Document Type",EDIOrdStatHdr."Document Type");
      IF NOT EDIOrdStatLine.FIND('-') THEN BEGIN
        EDIOrdStatLine."Internal Doc. No." := EDIOrdStatHdr."Internal Doc. No.";
        EDIOrdStatLine."Export Version" := EDIOrdStatHdr."Export Version";
        EDIOrdStatLine."Source Doc. Type" := EDIOrdStatHdr."Source Doc. Type";
        EDIOrdStatLine."Source Doc. No." := EDIOrdStatHdr."Source Doc. No.";
        EDIOrdStatLine."Line No." := SalesLine."Line No.";
        EDIOrdStatLine.Type := SalesLine.Type;
        EDIOrdStatLine."No." := SalesLine."No.";
        EDIOrdStatLine.Description := SalesLine.Description;
        EDIOrdStatLine."EDI Segment Group" := SalesLine."EDI Segment Group";
        EDIOrdStatLine."Trade Partner Code" := EDIOrdStatHdr."Trade Partner Code";
        EDIOrdStatLine."Document Type" := EDIOrdStatHdr."Document Type";
        EDIOrdStatLine.INSERT;
      END;

      EDIOrdStatLine."Original Order Qty." := SalesLine."EDI Original Qty.";
      EDIOrdStatLine."Order Quantity" := OrderQuantity;
      EDIOrdStatLine."Quantity To Ship" := QuantityToShip;
      EDIOrdStatLine.MODIFY;
    END;

    PROCEDURE AutoCreOrderStatDoc@1240030000(CurrEDIRecDocHdr@1240030000 : Record 14002358;NavisionDocument@1240020008 : Code[10]);
    VAR
      OrderStatusCreated@1240020000 : Boolean;
      EDIStatusCode@1240020007 : Record 14002406;
      HeaderStatusCode@1240020006 : Code[10];
      LineStatuscode@1240020005 : Code[10];
      HeaderReasonCode@1240020004 : Code[10];
      LineReasonCode@1240020003 : Code[10];
      EDIDocumentNo@1240020002 : Code[30];
      HeaderStatusSendOnly@1240020009 : Boolean;
    BEGIN
      HeaderStatusSendOnly := FALSE;
      XMLDoc := CurrEDIRecDocHdr."XML Document";

      EDIRecDocHdr.COPY(CurrEDIRecDocHdr);
      EDITradePartner.GET(EDIRecDocHdr."Trade Partner No.");

      EDIDocument.RESET;
      EDIDocument.SETRANGE("Trade Partner No.",EDITradePartner."No.");
      EDIDocument.SETRANGE("Navision Document",NavisionDocument);
      IF NOT XMLDoc THEN
        EDIDocument.SETRANGE(Version,EDIRecDocHdr."EDI Version");
      EDIDocument.SETRANGE(Type,EDIDocument.Type::Export);
      IF NOT EDIDocument.FIND('-') THEN
        ERROR(
          Text018,
          NavisionDocument,EDITradePartner."No.");
      EDIDocumentNo := EDIDocument."EDI Document No.";

      EDITemplate.GET(EDIRecDocHdr."EDI Template Code");
      AutoRelease := EDITemplate."Auto. Release Order Status";

      OrderStatusCreated := FALSE;

      EDIStatusCode.RESET;
      EDIStatusCode.SETRANGE("Trade Partner No.",EDITradePartner."No.");
      EDIStatusCode.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
      EDIStatusCode.SETRANGE(Default,TRUE);
      IF EDIStatusCode.FIND('-') THEN
        REPEAT
          IF (EDIStatusCode.Type = EDIStatusCode.Type::Status) AND (EDIStatusCode.Header = TRUE) THEN BEGIN
            HeaderStatusCode := EDIStatusCode.Code;
            HeaderStatusSendOnly := EDIStatusCode."Header Status Send Only";
          END;
          IF (EDIStatusCode.Type = EDIStatusCode.Type::Status) AND (EDIStatusCode.Line = TRUE) THEN
            LineStatuscode := EDIStatusCode.Code;
          IF (EDIStatusCode.Type = EDIStatusCode.Type::Reason) AND (EDIStatusCode.Header = TRUE) THEN
            HeaderReasonCode := EDIStatusCode.Code;
          IF (EDIStatusCode.Type = EDIStatusCode.Type::Reason) AND (EDIStatusCode.Line = TRUE) THEN
            LineReasonCode := EDIStatusCode.Code;
        UNTIL EDIStatusCode.NEXT = 0;

        EDIOrderStatusHdr.INIT;

        CASE NavisionDocument OF
          'E_SLSSTA':
            BEGIN
              EDIOrderStatusHdr."Document Type" := EDIOrderStatusHdr."Document Type"::" ";
              IF (EDIRecDocHdr."Process Receive Doc. Job Ready") AND
                 (EDIRecDocHdr."Order Status Created" = FALSE)
              THEN BEGIN
                EDIRecDocHdr."Document Processed" := FALSE;
                EDIRecDocHdr."Data Error" := TRUE;
                EDIRecDocHdr.MODIFY;
                COMMIT;
              END;
            END;
          'E_SLSPOC':
            BEGIN
              EDIOrderStatusHdr."Document Type" := EDIOrderStatusHdr."Document Type"::"Order Change Status";
              IF (EDIRecDocHdr."Process Receive Doc. Job Ready") AND
                 (EDIRecDocHdr."Order Change Status Created" = FALSE)
              THEN BEGIN
                EDIRecDocHdr."Document Processed" := FALSE;
                EDIRecDocHdr."Data Error" := TRUE;
                EDIRecDocHdr.MODIFY;
                COMMIT;
              END;
            END;
          'E_ADVPOA':
            BEGIN
              EDIOrderStatusHdr."Document Type" := EDIOrderStatusHdr."Document Type"::"Advance P.O. Ack.";
              IF (EDIRecDocHdr."Process Receive Doc. Job Ready") AND
                 (EDIRecDocHdr."Advance P.O. Ack. Created" = FALSE)
              THEN BEGIN
                EDIRecDocHdr."Document Processed" := FALSE;
                EDIRecDocHdr."Data Error" := TRUE;
                EDIRecDocHdr.MODIFY;
                COMMIT;
              END;
            END;
        END;
      SalesHeader.RESET;
      SalesHeader.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
      SalesHeader.SETRANGE("EDI Order",TRUE);
      SalesHeader.SETRANGE("EDI Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
      IF SalesHeader.FIND('-') THEN BEGIN
        REPEAT
          IF NOT EDIOrderStatusHdr.GET(
            EDIRecDocHdr."Trade Partner No.",EDIRecDocHdr."Internal Doc. No.",1,
            SalesHeader."Document Type",SalesHeader."No.",EDIOrderStatusHdr."Document Type")
          THEN BEGIN
            EDIOrderStatusHdr."Trade Partner Code" := SalesHeader."EDI Trade Partner";
            EDIOrderStatusHdr."Internal Doc. No." := SalesHeader."EDI Internal Doc. No.";
            EDIOrderStatusHdr."Export Version" := 1;
            IF (NavisionDocument = 'E_SLSPOC') AND
              (EDITemplate."PO Change Generates Change Ack")
            THEN BEGIN
              EDIOrderStatusHdr."Assoc. Source Doc. Type" := SalesHeader."Document Type";
              EDIOrderStatusHdr."Assoc. Source Doc. No." := SalesHeader."No.";
              EDIOrderStatusHdr."Buyer Initiated Change" := TRUE;
            END;
            EDIOrderStatusHdr."Source Doc. Type" := SalesHeader."Document Type";
            EDIOrderStatusHdr."Source Doc. No." := SalesHeader."No.";
            IF HeaderStatusCode <> '' THEN
              EDIOrderStatusHdr."EDI Status Code" := HeaderStatusCode;
            IF HeaderReasonCode <> '' THEN
              EDIOrderStatusHdr."EDI Reason Code" := HeaderReasonCode;
            EDIOrderStatusHdr."EDI Released" := SalesHeader."EDI Released";
            EDIOrderStatusHdr."Send Hdr. Status Only" := HeaderStatusSendOnly;
            EDIOrderStatusHdr."EDI Document No." := EDIDocument."EDI Document No.";
            EDIOrderStatusHdr."Expected Date" := SalesHeader."EDI Expected Delivery Date";
            EDIOrderStatusHdr.Exported := FALSE;
            EDIOrderStatusHdr."Date Exported" := 0D;
            EDIOrderStatusHdr."Time Exported" := 0T;
            EDIOrderStatusHdr."Exported By" := '';
            EDIOrderStatusHdr.INSERT;
            OrderStatusCreated := TRUE;
            SalesLine.RESET;
            SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
            SalesLine.SETRANGE("Document No.",SalesHeader."No.");
            IF SalesLine.FIND('-') THEN
              REPEAT
                EDIOrderStatusLine."Internal Doc. No." := EDIOrderStatusHdr."Internal Doc. No.";
                EDIOrderStatusLine."Export Version" := EDIOrderStatusHdr."Export Version";
                EDIOrderStatusLine."Source Doc. Type" := EDIOrderStatusHdr."Source Doc. Type";
                EDIOrderStatusLine."Source Doc. No." := EDIOrderStatusHdr."Source Doc. No.";
                EDIOrderStatusLine."Line No." := SalesLine."Line No.";
                EDIOrderStatusLine.Type := SalesLine.Type;
                EDIOrderStatusLine."No." := SalesLine."No.";
                EDIOrderStatusLine.Description := SalesLine.Description;
                EDIOrderStatusLine."Original Order Qty." := SalesLine."EDI Original Qty.";
                EDIOrderStatusLine."Order Quantity" := SalesLine.Quantity;
                EDIOrderStatusLine."Quantity To Ship" := SalesLine."Qty. to Ship";
                EDIOrderStatusLine."EDI Segment Group" := SalesLine."EDI Segment Group";
                EDIOrderStatusLine."Trade Partner Code" := EDIOrderStatusHdr."Trade Partner Code";
                EDIOrderStatusLine."Document Type" := EDIOrderStatusHdr."Document Type";
                EDIOrderStatusLine."EDI Document No." := EDIOrderStatusHdr."EDI Document No.";
                EDIOrderStatusLine."Prev. Order Qty." := SalesLine.Quantity;
                EDIOrderStatusLine."Unit Price" := SalesLine."Unit Price";
                EDIOrderStatusLine."EDI Unit Price" := SalesLine."EDI Unit Price";
                SetPriceDiscrepancy(EDIOrderStatusLine,SalesLine);
                EDIOrderStatusLine."EDI Item Cross Ref." := SalesLine."EDI Item Cross Ref.";
                EDIOrderStatusLine."EDI Unit of Measure" := SalesLine."EDI Unit of Measure";
                EDIOrderStatusLine."EDI Variant Code" := SalesLine."EDI Variant Code";
                EDIOrderStatusLine."Variant Code" := SalesLine."Variant Code";
                EDIOrderStatusLine."Unit of Measure Code" := SalesLine."Unit of Measure Code";
                IF (NavisionDocument = 'E_SLSPOC') AND
                   (EDITemplate."PO Change Generates Change Ack")
                THEN BEGIN
                  EDIOrderStatusLine."EDI Code" := SalesLine."EDI Code";
                  EDIOrderStatusLine."EDI Line Status" := SalesLine."EDI Line Status";
                END;
                IF LineStatuscode <> '' THEN
                  EDIOrderStatusLine."EDI Status Code" := LineStatuscode;
                IF LineReasonCode <> '' THEN
                  EDIOrderStatusLine."EDI Reason Code" := LineReasonCode;
                EDIOrderStatusLine.INSERT;
                IF SalesLine."EDI Status Pending" THEN BEGIN
                  SalesLine."EDI Status Pending" := FALSE;
                  SalesLine.MODIFY;
                END;
              UNTIL SalesLine.NEXT = 0;
          END;
        UNTIL (SalesHeader.NEXT = 0);
      END ELSE
        ERROR(Text015,EDIRecDocHdr."Internal Doc. No.");

      IF AutoRelease THEN
        ReleaseDoc(EDIOrderStatusHdr);

      IF EDIRecDocHdr."Manual Process" THEN
        CASE NavisionDocument OF
          'E_SLSSTA':
             BEGIN
               IF OrderStatusCreated THEN
                 MESSAGE(Text017)
               ELSE
                 MESSAGE(Text016,EDIRecDocHdr."Internal Doc. No.")
             END;
          'E_SLSPOC':
             BEGIN
               IF OrderStatusCreated THEN
                 MESSAGE(Text019)
               ELSE
                 MESSAGE(Text020,EDIRecDocHdr."Internal Doc. No.")
             END;
          'E_ADVPOA':
             BEGIN
               IF OrderStatusCreated THEN
                 MESSAGE(Text023)
               ELSE
                 MESSAGE(Text024,EDIRecDocHdr."Internal Doc. No.")
             END;
        END;

      CASE NavisionDocument OF
        'E_SLSSTA':
           BEGIN
             EDIRecDocHdr."Order Status Created" := TRUE;
             EDIRecDocHdr."Order Status Created Time" := TIME;
             EDIRecDocHdr."Order Status Created Date" := TODAY;
           END;
        'E_SLSPOC':
           BEGIN
             EDIRecDocHdr."Order Change Status Created" := TRUE;
             EDIRecDocHdr."Order Change Stat Created Time" := TIME;
             EDIRecDocHdr."Order Change Stat Created Date" := TODAY;
           END;
        'E_ADVPOA':
           BEGIN
             EDIRecDocHdr."Advance P.O. Ack. Created" := TRUE;
             EDIRecDocHdr."Advance P.O. Ack. Created Time" := TIME;
             EDIRecDocHdr."Advance P.O. Ack. Created Date" := TODAY;
           END;
      END;
      EDIRecDocHdr."Document Processed" := TRUE;
      EDIRecDocHdr."Data Error" := FALSE;
      EDIRecDocHdr.MODIFY;

      IF EDIRecDocHdr."PO Change Generates Change Ack" THEN
        EDIRecordAssocDoc.RecordAssocDoc(EDIRecDocHdr,SalesHeader,TRUE);
    END;

    PROCEDURE SendOrderStatus@1240030001(VAR CurrOrderStatusHdr@1240030000 : Record 14002400) ErrCode : Boolean;
    VAR
      OrderStatusHdr2@1240020001 : Record 14002400;
      EDIRecDocHdr@1240020000 : Record 14002358;
      NavisionDocument@1240020002 : Code[10];
      Document@1240020003 : Text[30];
    BEGIN
      EDIRecDocHdr.GET(CurrOrderStatusHdr."Internal Doc. No.");
      XMLDoc := EDIRecDocHdr."XML Document";

      WITH CurrOrderStatusHdr DO BEGIN
        CASE "Document Type" OF
          "Document Type"::" ":
            BEGIN
              NavisionDocument := 'E_SLSSTA';
              Document := 'Order Status';
            END;
          "Document Type"::"Order Change Status":
            BEGIN
              NavisionDocument := 'E_SLSPOC';
              Document := 'Order Change Status';
           END;
          "Document Type"::"Advance P.O. Ack.":
            BEGIN
              NavisionDocument := 'E_ADVPOA';
              Document := 'Advance P.O. Acknowledgement';
            END;
        END;
        EDIDocument.RESET;
        EDIDocument.SETRANGE("Trade Partner No.","Trade Partner Code");
        EDIDocument.SETRANGE("Navision Document",NavisionDocument);
        IF NOT XMLDoc THEN
          EDIDocument.SETRANGE(Version,EDIRecDocHdr."EDI Version");
        EDIDocument.SETRANGE(Type,EDIDocument.Type::Export);
        IF NOT EDIDocument.FIND('-') THEN
          ERROR(
            Text018,NavisionDocument,"Trade Partner Code");

        OrderStatusHdr2.RESET;
        OrderStatusHdr2.SETRANGE("Internal Doc. No.","Internal Doc. No.");
        OrderStatusHdr2.SETRANGE("Document Type","Document Type");
        IF EDIDocument."Status Document by Source Doc." THEN BEGIN
          OrderStatusHdr2.SETRANGE("Source Doc. Type","Source Doc. Type");
          OrderStatusHdr2.SETRANGE("Source Doc. No.","Source Doc. No.");
        END;
        IF OrderStatusHdr2.FIND('-') THEN
          IF NOT CreateOrderStatus(EDIRecDocHdr,"Export Version",CurrOrderStatusHdr) THEN BEGIN
            IF GUIALLOWED THEN
              MESSAGE(Text014);
            EXIT(TRUE);
          END;
      END;
    END;

    PROCEDURE RepeatSegment@1240030005() : Boolean;
    VAR
      SalesCommentLine2@1240020000 : Record 44;
      EDIDiscount2@1240020001 : Record 14002382;
      EDILineDiscount2@1240020002 : Record 14002383;
      LastRecord@1240030002 : Boolean;
    BEGIN
      LoopFinished := TRUE;
      LastRecord := FALSE;
      RecordNo := 0;

      CASE EDIElement.Origin OF
        EDIElement.Origin::"EDI Out":
          BEGIN
          END;
        EDIElement.Origin::Navision:
          CASE EDIElement."NAV Table No." OF
            DATABASE::"Sales Comment Line":
              BEGIN
                RecordNo := 1;
                IF SalesCommentLine."No." = '' THEN
                  LastRecord := TRUE
                ELSE BEGIN
                  SalesCommentLine2.COPY(SalesCommentLine);
                  IF EDISegment.Maximum <> 0 THEN BEGIN
                    IF NOT BypassSegment THEN
                      RepeatCount := RepeatCount + 1;
                    IF (SalesCommentLine2.NEXT = 0) OR (RepeatCount = EDISegment.Maximum) THEN
                      LastRecord := TRUE
                    ELSE
                      LoopFinished := FALSE;
                  END ELSE BEGIN
                    IF SalesCommentLine2.NEXT = 0 THEN
                      LastRecord := TRUE
                    ELSE
                      LoopFinished := FALSE;
                  END;
                END;
              END;
            DATABASE::"E.D.I. Discount":
              BEGIN
                RecordNo := 2;
                IF EDIDiscount."Line No." = 0 THEN
                  LastRecord := TRUE
                ELSE BEGIN
                  EDIDiscount2.COPY(EDIDiscount);
                  IF EDISegment.Maximum <> 0 THEN BEGIN
                    IF NOT BypassSegment THEN
                      RepeatCount := RepeatCount + 1;
                    IF (EDIDiscount2.NEXT = 0) OR (RepeatCount = EDISegment.Maximum) THEN
                      LastRecord := TRUE
                    ELSE
                      LoopFinished := FALSE;
                  END ELSE BEGIN
                    IF EDIDiscount2.NEXT = 0 THEN
                      LastRecord := TRUE
                    ELSE
                      LoopFinished := FALSE;
                  END;
                END;
              END;
            DATABASE::"E.D.I. Line Discount":
              BEGIN
                RecordNo := 3;
                IF EDILineDiscount."Line No." = 0 THEN
                  LastRecord := TRUE
                ELSE BEGIN
                  EDILineDiscount2.COPY(EDILineDiscount);
                  IF EDISegment.Maximum <> 0 THEN BEGIN
                    IF NOT BypassSegment THEN
                      RepeatCount := RepeatCount + 1;
                      IF (EDILineDiscount2.NEXT = 0) OR (RepeatCount = EDISegment.Maximum) THEN
                      LastRecord := TRUE
                    ELSE
                      LoopFinished := FALSE;
                  END ELSE BEGIN
                    IF EDILineDiscount2.NEXT = 0 THEN
                      LastRecord := TRUE
                    ELSE
                      LoopFinished := FALSE;
                  END;
                END;
              END;
          END;
      END;

      IF LastRecord THEN BEGIN
        LoopFinished := TRUE;
        RecordNo := 0;
        RepeatCount := 0;
      END;
    END;

    PROCEDURE GetNextRecord@1240020002();
    BEGIN
      CASE RecordNo OF
        1:
          SalesCommentLine.NEXT;
        2:
          EDIDiscount.NEXT;
        3:
          EDILineDiscount.NEXT;


          // Add additional tables here

      END;
    END;

    PROCEDURE GetAssocInternalDocNo@1240020004(SalesHdr@1240030001 : Record 36);
    VAR
      EDIChangedDocument@1240030000 : Record 14002373;
      CurrEDIRecDocField@1240030002 : Record 14002359;
      Found@1240030003 : Boolean;
      RecordCount@1240030004 : Integer;
    BEGIN
      Found := FALSE;

      EDIChangedDocument.RESET;
      EDIChangedDocument.SETRANGE("Assoc. Internal Doc. No.",SalesHdr."EDI Internal Doc. No.");
      IF EDIChangedDocument.FIND('-') THEN BEGIN
        RecordCount := EDIChangedDocument.COUNT;
        IF RecordCount = 1 THEN
          InternalDocNo := EDIChangedDocument."Internal Doc. No."
        ELSE
          REPEAT
            CurrEDIRecDocField.RESET;
            CurrEDIRecDocField.SETCURRENTKEY("Internal Doc. No.","Segment Group");
            CurrEDIRecDocField.SETRANGE("Internal Doc. No.",EDIChangedDocument."Internal Doc. No.");
            CurrEDIRecDocField.SETRANGE("Segment Group",SalesLine."EDI Segment Group");
            CurrEDIRecDocField.SETRANGE("New Item",TRUE);
            IF CurrEDIRecDocField.FIND('-') THEN
              CASE CurrEDIRecDocField."Nav Field No." OF
               SalesLine.FIELDNO("EDI Item Cross Ref."):
                  BEGIN
                    IF SalesLine."EDI Item Cross Ref." =
                      CurrEDIRecDocField."Field Text Value" THEN BEGIN
                        InternalDocNo := CurrEDIRecDocField."Internal Doc. No.";
                        Found := TRUE;
                      END;
                  END;
                SalesLine.FIELDNO("Cross-Reference No."):
                  BEGIN
                    IF SalesLine."Cross-Reference No." =
                      CurrEDIRecDocField."Field Text Value" THEN BEGIN
                        InternalDocNo := CurrEDIRecDocField."Internal Doc. No.";
                        Found := TRUE;
                     END;
                  END;
                SalesLine.FIELDNO("No."):
                  BEGIN
                    IF SalesLine."No." =
                      CurrEDIRecDocField."Field Text Value" THEN BEGIN
                        InternalDocNo := CurrEDIRecDocField."Internal Doc. No.";
                        Found := TRUE;
                      END;
                  END;
              END;
          UNTIL (EDIChangedDocument.NEXT = 0) OR (Found = TRUE);
      END;
    END;

    PROCEDURE ReleaseDoc@1240020000(CurrentOrderStatus@1240020000 : Record 14002400);
    VAR
      InternalDocNo@1240020002 : Code[10];
    BEGIN
      IF AutoRelease THEN BEGIN
        InternalDocNo := CurrentOrderStatus."Internal Doc. No.";
      CurrentOrderStatus.RESET;
      CurrentOrderStatus.SETRANGE("Internal Doc. No.",InternalDocNo);
      IF CurrentOrderStatus.FIND('-') THEN
        REPEAT
          WITH CurrentOrderStatus DO BEGIN
            IF NOT Released THEN BEGIN
              TESTFIELD("EDI Status Code");
              TESTFIELD("Trade Partner Code");
              Released := TRUE;
              MODIFY;
            END;
          END;
        UNTIL CurrentOrderStatus.NEXT = 0;
      END ELSE BEGIN
        WITH CurrentOrderStatus DO BEGIN
          IF NOT Released THEN BEGIN
            TESTFIELD("EDI Status Code");
            TESTFIELD("Trade Partner Code");
            Released := TRUE;
            MODIFY;
          END;
        END;
      END;
    END;

    PROCEDURE ReopenDoc@1240020001(CurrentOrderStatus@1240020000 : Record 14002400);
    BEGIN
      CurrentOrderStatus.GET(
        CurrentOrderStatus."Trade Partner Code",CurrentOrderStatus."Internal Doc. No.",
        CurrentOrderStatus."Export Version",CurrentOrderStatus."Source Doc. Type",
        CurrentOrderStatus."Source Doc. No.",CurrentOrderStatus."Document Type");

      WITH CurrentOrderStatus DO BEGIN
        TESTFIELD(Released,TRUE);
        Released := FALSE;
        MODIFY;
      END;
    END;

    PROCEDURE LoadEDIOutRecordRef@1240020008();
    BEGIN
      RecRef.OPEN(3);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(PaymentTerms);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(10);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(ShipmentMethod);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(13);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SalespersonPurchaser);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(18);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SelltoCustomer);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'Sell-to Customer');
        RecRef.GETTABLE(BilltoCustomer);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'Bill-to Customer');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(27);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(Item);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(36);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SalesHeader);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(37);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SalesLine);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(44);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SalesCommentLine);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(79);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(CompanyInformation);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(222);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(ShiptoAddress);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(291);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(ShippingAgent);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(5404);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(ItemUnitOfMeasure);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(5717);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(ItemCrossReference);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002350);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDITemplate);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002353);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDIDocument);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002359);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDISendDocHdr);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002360);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDITradePartner);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002362);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDICustCrossRef);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002364);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDITradePtnrItem);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002371);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDIReceiveDocHdrInfo);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002372);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDIReceiveDocLineInfo);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002400);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDIOrderStatusHdr);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002401);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDIOrderStatusLine);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;
    END;

    PROCEDURE LoadEDIOutVariable@1240020003();
    BEGIN
      EDILoadEDIOutFields.SetOrderStatusSendVariable(
        LineNumber,TotalUnits,NetShipWeight,GrossShipWeight,TotalSegments);
    END;

    PROCEDURE SetPriceDiscrepancy@1240020005(VAR EDIOrderStatusLine@1240020001 : Record 14002401;SalesLine@1240020002 : Record 37);
    VAR
      DiscountUnitPrice@1240020000 : Decimal;
    BEGIN
      IF EDIOrderStatusLine."EDI Unit Price" <> 0 THEN BEGIN
        CASE TRUE OF
          SalesLine."Line Discount %" = 0:
            BEGIN
              CASE TRUE OF
                EDIOrderStatusLine."Unit Price" <> EDIOrderStatusLine."EDI Unit Price":
                  EDIOrderStatusLine."Pricing Discrepancy" := TRUE;
                EDIOrderStatusLine."Unit Price" = EDIOrderStatusLine."EDI Unit Price":
                  EDIOrderStatusLine."Pricing Discrepancy" := FALSE;
              END;
             END;
          ELSE BEGIN
            DiscountUnitPrice :=
              EDIOrderStatusLine."Unit Price" -
                (EDIOrderStatusLine."Unit Price" * (SalesLine."Line Discount %" / 100));
            DiscountUnitPrice := ROUND(DiscountUnitPrice,0.01);
            IF DiscountUnitPrice <> EDIOrderStatusLine."EDI Unit Price" THEN
              EDIOrderStatusLine."Pricing Discrepancy" := TRUE
            ELSE
              EDIOrderStatusLine."Pricing Discrepancy" := FALSE;
          END;
        END;
      END;
    END;

    PROCEDURE ResetAssocRecord@1240020011(CurrRecordNo@1240020000 : Integer);
    BEGIN
      CASE RecordNo OF
        1:
          BEGIN
            SalesCommentLine.RESET;
            SalesCommentLine.SETRANGE("Document Type",SalesCommentLine."Document Type"::Order);
            SalesCommentLine.SETRANGE("No.",SalesHeader."No.");
            IF NOT SalesCommentLine.FIND('-') THEN
              CLEAR(SalesCommentLine);
          END;
        2:
          BEGIN
            EDIDiscount.RESET;
            EDIDiscount.SETRANGE("Internal Doc. No.",SalesHeader."EDI Internal Doc. No.");
            IF NOT EDIDiscount.FIND('-') THEN
              CLEAR(EDIDiscount);
          END;
        3:
          BEGIN
            EDILineDiscount.RESET;
            EDILineDiscount.SETCURRENTKEY("Internal Doc. No.","Segment Group",Code);
            EDILineDiscount.SETRANGE("Internal Doc. No.",SalesHeader."EDI Internal Doc. No.");
            EDILineDiscount.SETRANGE("Segment Group",SalesLine."EDI Segment Group");
            EDILineDiscount.SETRANGE("Document No.",SalesHeader."No.");
            IF NOT EDILineDiscount.FIND('-') THEN
              CLEAR(EDILineDiscount);
          END;
      END;
    END;

    BEGIN
    END.
  }
}

