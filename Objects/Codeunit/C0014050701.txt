OBJECT Codeunit 14050701 Process E.D.I. WhseShipNotice
{
  OBJECT-PROPERTIES
  {
    Date=02/25/19;
    Time=12:00:00 PM;
    Version List=SE0.61;
  }
  PROPERTIES
  {
    TableNo=14002358;
    OnRun=VAR
            SalesOrderNo@1240030000 : Code[20];
          BEGIN
            IF ("Navision Document" <> 'I_SLSASN') AND
               ("Navision Document" <> 'I_SLSWSA')
            THEN
              ERROR(Text001,"Navision Document");

            IF "Company Name" <> COMPANYNAME THEN
              ERROR(
                Text002,
                "Internal Doc. No.","Company Name",COMPANYNAME);

            EDIRecDocHdr2.GET("Internal Doc. No.");

            IF "ASN Processed" THEN
              ERROR(Text003,EDIRecDocHdr2."ASN Process Date",EDIRecDocHdr2."ASN Process Time");

            EDITradePartner.GET("Trade Partner No.");
            EDITemplate.GET(EDIRecDocHdr2."EDI Template Code");
            EDISetup.GET;

            BillOfLadingTmp.RESET;
            BillOfLadingTmp.DELETEALL;

            DespatchAdvice := FALSE;
            WHSEShipAdvice := FALSE;

            EDIRecDocField.RESET;
            EDIRecDocField.SETRANGE("Internal Doc. No.","Internal Doc. No.");
            EDIRecDocField.SETRANGE(Segment,'LX');
            IF EDIRecDocField.FIND('-') THEN BEGIN
              WHSEShipAdvice := TRUE;
              EDIRecDocField.RESET;
              EDIRecDocField.SETRANGE("Internal Doc. No.","Internal Doc. No.");
              EDIRecDocField.SETRANGE(Segment,'W06');
              IF EDIRecDocField.FIND('-') THEN
                REPEAT
                  CASE EDIRecDocField.Element OF
                    '01':
                      TranSetPurposeCode := EDIRecDocField."Field Text Value";
                    '04':
                      WarehouseShipmentID := EDIRecDocField."Field Text Value";
                  END;
                UNTIL (EDIRecDocField.NEXT = 0) OR (EDIRecDocField."New Segment");

              EDIRecDocField.RESET;
              EDIRecDocField.SETRANGE("Internal Doc. No.","Internal Doc. No.");
              EDIRecDocField.SETRANGE(Segment,'G62');
              IF EDIRecDocField.FIND('-') THEN
                REPEAT
                  CASE EDIRecDocField.Element OF
                    '01':
                      IF (EDIRecDocField."Field Text Value" = '11') THEN
                        ReferenceQualifier := EDIRecDocField."Field Text Value";
                    '02':
                      BEGIN
                        CASE ReferenceQualifier OF
                          '11':
                             PickupDate := EDIRecDocField."Field Date Value";
                        END;
                      END;
                  END;
                UNTIL (EDIRecDocField.NEXT = 0) OR (EDIRecDocField."New Segment");
            END;

            IF "Navision Document" = 'I_SLSWSA' THEN
              WHSEShipAdvice := TRUE;

            EDIRecDocField.RESET;
            EDIRecDocField.SETRANGE("Internal Doc. No.","Internal Doc. No.");
            EDIRecDocField.SETRANGE(Segment,'CPS');
            IF EDIRecDocField.FIND('-') THEN BEGIN
              DespatchAdvice := TRUE;
              EDIRecDocField.RESET;
              EDIRecDocField.SETRANGE("Internal Doc. No.","Internal Doc. No.");
              EDIRecDocField.SETRANGE(Segment,'BGM');
              IF EDIRecDocField.FIND('-') THEN
                REPEAT
                  CASE EDIRecDocField.Element OF
                    '02':
                      WarehouseShipmentID := EDIRecDocField."Field Text Value";
                    '03':
                      TranSetPurposeCode := EDIRecDocField."Field Text Value";
                  END;
                UNTIL (EDIRecDocField.NEXT = 0) OR (EDIRecDocField."New Segment");

              EDIRecDocField.RESET;
              EDIRecDocField.SETRANGE("Internal Doc. No.","Internal Doc. No.");
              EDIRecDocField.SETRANGE(Segment,'DTM');
              IF EDIRecDocField.FIND('-') THEN
                REPEAT
                  CASE EDIRecDocField.Element OF
                    '01':
                      IF (EDIRecDocField."Field Text Value" = '11') THEN
                        ReferenceQualifier := EDIRecDocField."Field Text Value";
                    '02':
                      BEGIN
                        CASE ReferenceQualifier OF
                          '11':
                             PickupDate := EDIRecDocField."Field Date Value";
                        END;
                      END;
                  END;
                UNTIL (EDIRecDocField.NEXT = 0) OR (EDIRecDocField."New Segment");
            END;

            IF (NOT DespatchAdvice) AND (NOT WHSEShipAdvice) THEN BEGIN
              EDIRecDocField.RESET;
              EDIRecDocField.SETRANGE("Internal Doc. No.","Internal Doc. No.");
              EDIRecDocField.SETRANGE(Segment,'BSN');
              IF EDIRecDocField.FIND('-') THEN
                REPEAT
                  CASE EDIRecDocField.Element OF
                    '01':
                      TranSetPurposeCode := EDIRecDocField."Field Text Value";
                    '02':
                      WarehouseShipmentID := EDIRecDocField."Field Text Value";
                    '03':
                      PickupDate := EDIRecDocField."Field Date Value";
                  END;
                UNTIL (EDIRecDocField.NEXT = 0) OR (EDIRecDocField."New Segment");
            END;

            EDIRecDocField.RESET;
            EDIRecDocField.SETRANGE("Internal Doc. No.","Internal Doc. No.");
            EDIRecDocField.SETFILTER(Segment,'%1|%2','REF','RFF');
            IF EDIRecDocField.FIND('-') THEN
              REPEAT
                CASE EDIRecDocField.Element OF
                  '01':
                    IF (EDIRecDocField."Field Text Value" = 'BM') OR
                       (EDIRecDocField."Field Text Value" = 'MB')
                    THEN
                      ReferenceQualifier := EDIRecDocField."Field Text Value";
                  '02':
                    BEGIN
                      CASE ReferenceQualifier OF
                        'BM':
                           WarehouseBOLNo := EDIRecDocField."Field Text Value";
                        'MB':
                          WarehouseMasterBOLNo := EDIRecDocField."Field Text Value";
                      END;
                    END;
                END;
              UNTIL (EDIRecDocField.NEXT = 0) OR (EDIRecDocField."New Segment");

            EDIRecDocField.RESET;
            EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
            EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
            EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading");
            EDIRecDocField.SETRANGE("Nav Field No.",BillOfLading.FIELDNO("EDI 3PL Bill of Lading No."));
            IF EDIRecDocField.FIND('-') THEN
              WarehouseBOLNo := EDIRecDocField."Field Text Value";

            EDIRecDocField.RESET;
            EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
            EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
            EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading");
            EDIRecDocField.SETRANGE("Nav Field No.",BillOfLading.FIELDNO("3PL Master Bill of Lading No."));
            IF EDIRecDocField.FIND('-') THEN
              WarehouseMasterBOLNo := EDIRecDocField."Field Text Value";

            EDIRecDocField.RESET;
            EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
            EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
            EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading");
            EDIRecDocField.SETRANGE("Nav Field No.",BillOfLading.FIELDNO("EDI 3PL Shipment ID"));
            IF EDIRecDocField.FIND('-') THEN
              WarehouseShipmentID := EDIRecDocField."Field Text Value";

            IF TranSetPurposeCode = '' THEN
              TranSetPurposeCode := '00';

            EDIRecDocHdr2."ASN Transaction Type Code" := TranSetPurposeCode;
            EDIRecDocHdr2."Warehouse Shipment ID" := WarehouseShipmentID;
            EDIRecDocHdr2."Warehouse Bill of Lading No." := WarehouseBOLNo;
            EDIRecDocHdr2.MODIFY;

            i := 1;
            ErrorCount := 0;
            OrderCount := 0;
            CLEAR(SalesOrderArray);

            EDIRecDocField.RESET;
            EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
            EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
            EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading Summary Line");
            EDIRecDocField.SETRANGE("Nav Field No.",BillofLadingSummaryLine.FIELDNO("Source ID"));
            IF EDIRecDocField.FIND('-') THEN BEGIN
              REPEAT
                OrderCount := OrderCount + 1;
                SalesOrderArray[i] := EDIRecDocField."Field Text Value";
                IF NOT SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderArray[i]) THEN BEGIN
                  ErrorCount := ErrorCount + 1;
                  IF ErrorCount = 1 THEN
                    SalesOrderNo := SalesOrderArray[i];
                END;
                IF SalesHeader."EDI Internal Doc. No." = '' THEN BEGIN
                  EDISetup.LOCKTABLE;
                  EDISetup.GET;
                  EDISetup."Last Internal Doc. No." := INCSTR(EDISetup."Last Internal Doc. No.");
                  SalesHeader."EDI Internal Doc. No." := EDISetup."Last Internal Doc. No.";
                  EDISetup.MODIFY;
                END;
                i := i + 1;
              UNTIL EDIRecDocField.NEXT = 0;
              IF ErrorCount = 1 THEN
                ERROR(Text018,SalesOrderNo)
              ELSE
                IF ErrorCount > 1 THEN
                  ERROR(Text025,OrderCount,ErrorCount);
            END ELSE
              ERROR(Text015);

            EDIDocument.GET(
              EDIRecDocHdr2."Trade Partner No.",EDIRecDocHdr2."Navision Document",
              EDIRecDocHdr2."EDI Document No.",EDIRecDocHdr2."EDI Version",
              EDIDocument.Type::Import);
            LoopExist := RepeatSegmentMappingCheck;

            NonEDIOrder := GetBOLRequirement;
            EvaluatePackageID;

            IF GUIALLOWED THEN BEGIN
              DispWindow.OPEN(
                Text006 + '\' +
                PADSTR(Text007,25,' ') + '#1###########################\' +
                PADSTR(Text008,25,' ') + '#2###########################\' +
                PADSTR(Text009,25,' ') + '#3###########################\' +
                PADSTR(Text010,25,' ') + '#4###########################\' +
                PADSTR(Text011,25,' ') + '#5###########################\' +
                PADSTR(Text012,25,' ') + '#6###########################');
              DispWindow.UPDATE(1,"Trade Partner No.");
              DispWindow.UPDATE(2,"Internal Doc. No.");
            END;

            ShippingAgentCode := '';
            ShippingAgentService := '';
            MapGenCrossRef := FALSE;

            IF (EDISetup."Enable General Cross Ref.") THEN BEGIN
              IF (EDITradePartner."Disable General Cross Ref.") THEN
                EvaluateGenCrossRef := FALSE
              ELSE BEGIN
                MapGenCrossRef := TRUE;
                IF (EDISetup."Eval. XRef at Doc. Import") THEN BEGIN
                  IF EDIRecDocHdr2."Gen. XRef Processed On Import" = FALSE THEN
                    EvaluateGenCrossRef := TRUE
                END ELSE
                  EvaluateGenCrossRef := TRUE;
                IF EvaluateGenCrossRef THEN BEGIN
                  CLEAR(EvaluateCrossReference);
                  EvaluateCrossReference.AssignNAVCrossReference(EDIRecDocHdr2);
                END;
              END;
            END ELSE BEGIN
              EvaluateGenCrossRef := FALSE;
              EDIRecDocField.RESET;
              EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
              EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
              EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading");
              EDIRecDocField.SETRANGE("Nav Field No.",BillOfLading.FIELDNO("Shipping Agent Code"));
              IF EDIRecDocField.FIND('-') THEN BEGIN
                IF EDIRecDocField."Field Text Value" <> '' THEN
                  ShippingAgentCode := EDIRecDocField."Field Text Value"
                ELSE
                  ERROR(Text058);
              END;
              EDIRecDocField.RESET;
              EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
              EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
              EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading");
              EDIRecDocField.SETRANGE("Nav Field No.",BillOfLading.FIELDNO("Shipping Agent Service"));
              IF EDIRecDocField.FIND('-') THEN BEGIN
                IF EDIRecDocField."Field Text Value" <> '' THEN
                  ShippingAgentService := EDIRecDocField."Field Text Value"
                ELSE
                  ERROR(Text059);
                END;
            END;

            IF EvaluateGenCrossRef THEN BEGIN
              EDIRecDocHdr2.CALCFIELDS("General Cross Reference Error");
              IF EDIRecDocHdr2."General Cross Reference Error" THEN
                ERROR(Text004);
            END;
            IF MapGenCrossRef THEN
              GetShippingAgent;

            IF NOT WHSEShipAdvice THEN BEGIN
              EDIRecDocField.RESET;
              EDIRecDocField.SETRANGE("Internal Doc. No.","Internal Doc. No.");
              EDIRecDocField.FIND('-');
              SegmentGroup := 0;
              SubSegmentGroup := 0;
              REPEAT
                IF (EDIRecDocField."New Segment") AND
                   ((EDIRecDocField.Segment = 'HL') OR
                    (EDIRecDocField.Segment = 'CPS'))
                THEN
                  SegmentGroup := SegmentGroup + 1;
                EDIRecDocField."Segment Group" := SegmentGroup;
                IF DespatchAdvice THEN BEGIN
                  IF (EDIRecDocField."New Segment") AND
                     (EDIRecDocField.Segment = 'LIN')
                  THEN
                    SubSegmentGroup := SubSegmentGroup + 1;
                    EDIRecDocField."Sub Segment Group" := SubSegmentGroup;
                END;
                EDIRecDocField.MODIFY;
              UNTIL EDIRecDocField.NEXT = 0;
            END;

            IF WHSEShipAdvice THEN BEGIN
              EDIRecDocField.RESET;
              EDIRecDocField.SETRANGE("Internal Doc. No.","Internal Doc. No.");
              EDIRecDocField.FIND('-');
              SubSegmentGroup := 0;
              REPEAT
                IF (EDIRecDocField."New Segment") AND (EDIRecDocField.Segment = 'W12') THEN
                  SubSegmentGroup := SubSegmentGroup + 1;
                EDIRecDocField."Sub Segment Group" := SubSegmentGroup;
                EDIRecDocField.MODIFY;
              UNTIL EDIRecDocField.NEXT = 0;
            END;

            IF DespatchAdvice OR WHSEShipAdvice THEN
              GetShipmentPackage
            ELSE
              GetASNSummaryType;

            IF GUIALLOWED THEN
              DispWindow.CLOSE;

            IF NonEDIOrder THEN
              NonEDIOrderPostShipment
            ELSE
              CreateBOL(EDIRecDocHdr2);

            CreateEDIAlert.UpdateAlertStatus(EDIRecDocHdr2);

            EDIRecDocHdr2."ASN Processed" := TRUE;
            EDIRecDocHdr2."ASN Process Date" := TODAY;
            EDIRecDocHdr2."ASN Process Time" := TIME;
            EDIRecDocHdr2."Data Error" := FALSE;
            EDIRecDocHdr2."ASN Error" := FALSE;
            EDIRecDocHdr2."NAV BOL No." := NAVBillofLadingNo;
            EDIRecDocHdr2."Document Processed" := TRUE;
            EDIRecDocHdr2.MODIFY;
          END;

  }
  CODE
  {
    VAR
      Text001@1240030016 : TextConst 'ENU=EDI Navision Document %1 does not match this function.';
      Text002@1240030015 : TextConst 'ENU=The receive document %1 is for company %2. You are currently in company %3.';
      Text003@1240030014 : TextConst 'ENU=ASN was processed on %1 at %2.';
      Text004@1240030065 : TextConst 'ENU=Shipping Agent cross reference not found. \ Review EDI General Cross Reference.';
      Text005@1240030066 : TextConst 'ENU=HL Level Code sent in the HL segment, element 03 must be mapped to Bill of Lading Summary Line Type field';
      Text006@1240030013 : TextConst 'ENU=Creating Warehouse Shipment Packages....';
      Text007@1240030012 : TextConst 'ENU="Trading Partner      "';
      Text008@1240030011 : TextConst 'ENU="Internal Doc No.    "';
      Text009@1240030010 : TextConst 'ENU="Order No.              "';
      Text010@1240030009 : TextConst 'ENU="Package No.         "';
      Text011@1240030008 : TextConst 'ENU="Item No.              "';
      Text012@1240030007 : TextConst 'ENU="Quantity             "';
      Text015@1240030004 : TextConst 'ENU=Sales Order No. not found.  The Sales Order No. must be mapped to Bill of Lading Summary Line Source No. field.';
      Text016@1240030003 : TextConst 'ENU=Package detail segments not found for sales order no. %1.';
      Text017@1240030002 : TextConst 'ENU=%1 ASN Summary Type is not supported.';
      Text018@1240030001 : TextConst 'ENU=Sales Order %1 not found.';
      Text019@1240030000 : TextConst 'ENU=Item %1 in package with HL line no. of %2 not found on order %3.';
      BillOfLading@1240030029 : Record 14000822;
      BOLSumLineTmp@1240030036 : TEMPORARY Record 14000825;
      BOLSumLineTmp2@1240030035 : TEMPORARY Record 14000825;
      BOLSumLineTmp3@1240030102 : TEMPORARY Record 14000825;
      BillofLadingSummaryLine@1240030034 : Record 14000825;
      EDITemplate@1240030063 : Record 14002350;
      EDITradePartner@1240030061 : Record 14002360;
      EDIRecDocHdr2@1240030059 : Record 14002358;
      EDIRecDocField@1240030058 : Record 14002359;
      EDIRecDocField2@1240020003 : Record 14002359;
      EDIRecDocField3@1240020004 : Record 14002359;
      EDIRecDocField4@1240020018 : Record 14002359;
      EDISetup@1240030064 : Record 14002367;
      Package@1240030041 : Record 14000701;
      PackageLine@1240030040 : Record 14000702;
      PostedPackage@1240030055 : Record 14000704;
      SalesHeader@1240030048 : Record 36;
      SalesLine@1240030098 : Record 37;
      EDIDocument@1240020007 : Record 14002353;
      ItemCrossReference@1240020011 : Record 5717;
      ShippingSetup@1240020020 : Record 14000707;
      PackingStation@1240020022 : Record 14000709;
      PackingRule@1240020023 : Record 14000715;
      BillOfLadingTmp@1240020036 : TEMPORARY Record 14000822;
      EvaluateCrossReference@1240030023 : Codeunit 14000380;
      Shipping@1240030039 : Codeunit 14000701;
      ReleaseSalesDocument@1240030038 : Codeunit 414;
      EDIRecordAssocDocument@1240030069 : Codeunit 14002380;
      CreateEDIAlert@1240020025 : Codeunit 14000375;
      BOLMgt@1240030107 : Codeunit 14000821;
      DispWindow@1240020001 : Dialog;
      PackageFound@1240030079 : Boolean;
      PostedPackageFound@1240030086 : Boolean;
      DuplicateUCCNo@1240030080 : Boolean;
      ReferenceQualifier@1240030030 : Code[2];
      WarehouseMasterBOLNo@1240030070 : Code[30];
      WarehouseBOLNo@1240030037 : Code[30];
      PackageParentID@1240030046 : Code[12];
      SummaryLineType@1240030033 : Code[1];
      TranSetPurposeCode@1240030025 : Code[2];
      WarehouseShipmentID@1240030024 : Code[30];
      ShippingAgentCode@1240030020 : Code[10];
      ShippingAgentService@1240030019 : Code[20];
      ASNSummaryType@1240030021 : Code[5];
      UCCNoArray@1240030078 : ARRAY [5000] OF Code[20];
      InnerPackageNoArray@1240030105 : ARRAY [5000] OF Code[20];
      PackageUCCNo@1240030103 : Code[30];
      PackageTrackingNo@1240030104 : Text[30];
      ASNTypeCode@1240030095 : Code[20];
      NAVBillofLadingNo@1240030032 : Code[20];
      BOLSumLineNo@1240030031 : Integer;
      SegmentGroup@1240030053 : Integer;
      i@1240030027 : Integer;
      j@1240030042 : Integer;
      m@1240030100 : Integer;
      p@1240030106 : Integer;
      QtyToShip@1240030099 : Decimal;
      PackageParentArray@1240030026 : ARRAY [5000] OF Decimal;
      TareParentArray@1240030096 : ARRAY [5000] OF Decimal;
      InnerPackageArray@1240030094 : ARRAY [5000] OF Decimal;
      TareParentLevel@1240030101 : Decimal;
      PrevSegmentGroup@1240030050 : Integer;
      OrderCount@1240030075 : Integer;
      ErrorCount@1240030074 : Integer;
      CrossReferenceNo@1240030017 : Text[20];
      SalesOrderArray@1240030043 : ARRAY [5000] OF Text[30];
      ShipPaymentType@1240030018 : 'Prepaid,Third Party,Freight Collect,Consignee';
      Text020@1240030022 : TextConst 'ENU=ASN segment with HL Line No. %1, HL Parent Line No. of %2 does not match expected Line No. of %3 Parent Line No. %4 for a %5 Summary Type.\Do you want to continue?  If process completes package-item integrity may not be accurate.';
      HLParentNo@1240030097 : ARRAY [5000] OF Integer;
      HLLineNo@1240030044 : Integer;
      Text021@1240030049 : TextConst 'ENU="Hierarchical Level No. Sequence mismatch has been found. "';
      LineNo@1240030054 : Decimal;
      ParentLineNo@1240030051 : Decimal;
      Text022@1240030067 : TextConst 'ENU=HL Purchase Order level not found.';
      Text023@1240030068 : TextConst 'ENU=HL Item level segment not found for HL Package segment with line no. of %1.';
      Text024@1240030089 : TextConst 'ENU=One or more posted packages associated to Sales Orders(s) in the %1 ASN have identical UCC Nos.\Do you want to continue?';
      Text025@1240030071 : TextConst 'ENU=ASN contains %1 orders, %2 orders were not found. \ ASN not processed.';
      Text026@1240030072 : TextConst 'ENU=Package(s) exist for a sales order(s) in the %1 ASN.\';
      Text027@1240030085 : TextConst 'ENU=Cancellation ASN received.\';
      Text028@1240030083 : TextConst 'ENU=One or more of these package(s) have Package ID(s) identical to current ASN Package ID(s).\Do you want to continue?\Existing package(s) and Bill of Lading will be deleted.';
      Text029@1240030084 : TextConst 'ENU=Do you want to continue?\ Existing package(s) and Bill of Lading will be deleted.';
      Text030@1240030082 : TextConst 'ENU=ASN processing cancelled.';
      Text031@1240030073 : TextConst 'ENU=Cancellation ASN received for posted sales orders packed sales orders.';
      Text033@1240030087 : TextConst 'ENU=Deleting Sales Order Packages.....';
      Text034@1240030077 : TextConst 'ENU="Sales Order No.   "';
      Text035@1240030076 : TextConst 'ENU="Package No.    "';
      Text036@1240030088 : TextConst 'ENU=One or more Package ID No.(s) that do not meet Package ID length requirement of %1 have been found. \Do you want to continue ASN processing?';
      Text038@1240030047 : TextConst 'ENU=Package(s) with identical Package ID Nos. Continue and delete packages and associated BOL?';
      Text039@1240030091 : TextConst 'ENU=Bill of Lading %1 and associated packages deleted.';
      Text040@1240030092 : TextConst 'ENU=Sales order(s) with posted packages with identical UCC No.(s) as packages in the Cancellation ASN found.';
      Text041@1240030093 : TextConst 'ENU=Packages found but Package ID Nos. do not match Package ID Nos. sent in Cancellation ASN.\Do you want to delete packages and asscociated Bill of Lading.?';
      Text042@1240030028 : TextConst 'ENU=Package detail segments not found for Tare with Parent Line No. %1.';
      Text044@1240030060 : TextConst 'ENU=Posted packages found for Sales Order %1.  The order does not have a remaing Qty. To Ship.\ASN processing cancelled.';
      EvaluateGenCrossRef@1240030005 : Boolean;
      PickupDate@1240030006 : Date;
      DespatchAdvice@1240020000 : Boolean;
      Text046@1240020005 : TextConst 'ENU=Sales Order No. not found in Receive Document %1.';
      Text047@1240020002 : TextConst 'ENU=Item(s) not found.  Item No. must be mapped to Bill of Lading Summary Line No. field.';
      Text048@1240020006 : TextConst 'ENU=Package information not found.';
      Batch@1240020009 : Boolean;
      WHSEShipAdvice@1240020010 : Boolean;
      LotNo@1240020012 : Code[20];
      SerialNo@1240020014 : Code[20];
      ExpirationDate@1240020013 : Date;
      WarrantyDate@1240020015 : Date;
      LastUOMCode@1240020017 : Code[10];
      Text052@1240020016 : TextConst 'ENU=Item %1 in EDI Receive Document Field with segment group %2 is not a valid item no. Item No. must be mapped to BOL Summary Line No. field.';
      SubSegmentGroup@1240020019 : Integer;
      AddToOpenBOL@1240020021 : Boolean;
      Text054@1240020024 : TextConst 'ENU=Item %1 in package with HL line no. of %2  has a quantity of zero. Item quantity must be mapped to the BOL Summary Line Package Line Quantity field.';
      Text055@1240020028 : TextConst 'ENU=Auto. Post Sales Order on the E.D.I. template must be enabled to use Distribute shipping charge with Add to Open BOL enabled.';
      Text057@1240020027 : TextConst 'ENU=Shipping charges not distributed. Bill of Lading Shipping Agent must not be blank.';
      Text058@1240020029 : TextConst 'ENU=Mapped Shipping Agent Code value must not be blank.';
      Text059@1240020030 : TextConst 'ENU=Mapped Shipping Agent Service value must not be blank.';
      TriggerFound@1240020031 : Boolean;
      AllowShipChargeDistribution@1240020008 : Boolean;
      Process@1240020026 : ' ,Distribute Shipping Charge,Post Sales Order,Send ASN';
      CancelASNSend@1240020032 : Boolean;
      CancelInvoiceSend@1240020033 : Boolean;
      MapGenCrossRef@1240020034 : Boolean;
      BOLByPackage@1240020035 : Boolean;
      AutoReleaseSummary@1240020037 : Boolean;
      AdvanceShipNotice@1240020038 : Boolean;
      LastOverrideWeight@1240020039 : Decimal;
      LastOverrideVolume@1240020040 : Decimal;
      NonEDIOrder@1240020041 : Boolean;
      LoopExist@1240020042 : Boolean;

    PROCEDURE GetASNSummaryType@1240030000();
    VAR
      EDIRecDocHdr@1240030000 : Record 14002358;
      HLLevelID@1000000000 : Code[1];
      ASNSummaryFound@1000000003 : Boolean;
      AssocInternalDocNo@1240030002 : Code[20];
    BEGIN
      HLLevelID := '';
      ASNSummaryFound := FALSE;
      AdvanceShipNotice := FALSE;

      EDIRecDocField.RESET;
      EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading Summary Line");
      EDIRecDocField.SETRANGE("Nav Field No.",BillofLadingSummaryLine.FIELDNO(Type));
      IF EDIRecDocField.FIND('-') THEN
        REPEAT
          HLLevelID := EDIRecDocField."Field Text Value";
          IF ASNSummaryType <> '' THEN
            IF STRPOS(ASNSummaryType,HLLevelID) <> 0 THEN
              ASNSummaryFound := TRUE;
          IF NOT ASNSummaryFound THEN
            ASNSummaryType := ASNSummaryType + HLLevelID ;
        UNTIL (EDIRecDocField.NEXT = 0) OR (ASNSummaryFound = TRUE)
      ELSE
        ERROR(Text005,EDIRecDocHdr2."Internal Doc. No.");

      IF CheckHLSequence THEN BEGIN
        EDIRecDocHdr2."HL Sequence Error" := TRUE;
        IF GUIALLOWED THEN
          IF NOT CONFIRM(
            Text021 +
            STRSUBSTNO(Text020,LineNo,ParentLineNo,HLLineNo,HLParentNo[HLLineNo],ASNSummaryType))
          THEN
            ERROR(Text030);
      END ELSE
        EDIRecDocHdr2."HL Sequence Error" := FALSE;
      EDIRecDocHdr2.MODIFY;

      IF ASNSummaryType IN ['SOPI','SOTPI'] THEN BEGIN
        SegmentGroup := 0;
        BOLSumLineNo := 0;
        PrevSegmentGroup := 0;

        BOLSumLineTmp.RESET;
        BOLSumLineTmp.DELETEALL;
        BOLSumLineTmp2.RESET;
        BOLSumLineTmp2.DELETEALL;
        BOLSumLineTmp3.RESET;
        BOLSumLineTmp3.DELETEALL;


        BOLSumLineTmp.INIT;
        BOLSumLineTmp2.INIT;
        BOLSumLineTmp3.INIT;

        EDIRecDocField.RESET;
        EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
        EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
        EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading Summary Line");
        EDIRecDocField.SETRANGE("Nav Field No.",BillofLadingSummaryLine.FIELDNO(Type));
        IF EDIRecDocField.FIND('-') THEN
          REPEAT
            SummaryLineType := EDIRecDocField."Field Text Value";
            CASE SummaryLineType OF
              'S':
                BEGIN
                  BOLSumLineTmp.Type := BillofLadingSummaryLine.Type::"Bill of Lading";
                  SegmentGroup := EDIRecDocField."Segment Group";
                  InsertBOLSumLine(SegmentGroup);
                END;
              'O':
                BEGIN
                  BOLSumLineTmp.Type := BillofLadingSummaryLine.Type::"Purchase Order";
                  SegmentGroup := EDIRecDocField."Segment Group";
                  InsertBOLSumLine(SegmentGroup);
                END;
              'T':
                BEGIN
                  BOLSumLineTmp.Type := BillofLadingSummaryLine.Type::Tare;
                  SegmentGroup := EDIRecDocField."Segment Group";
                  InsertBOLSumLine(SegmentGroup);
                END;
              'P':
                BEGIN
                  BOLSumLineTmp.Type := BillofLadingSummaryLine.Type::Package;
                  SegmentGroup := EDIRecDocField."Segment Group";
                  InsertBOLSumLine(SegmentGroup);
                END;
              'I':
                BEGIN
                  BOLSumLineTmp.Type := BillofLadingSummaryLine.Type::Item;
                  SegmentGroup := EDIRecDocField."Segment Group";
                  InsertBOLSumLine(SegmentGroup);
                END;
            END;
          UNTIL EDIRecDocField.NEXT = 0
        ELSE
          ERROR(Text005,EDIRecDocHdr2."Internal Doc. No.");

        // Group packages by hierarchical level parent code
        CLEAR(SalesOrderArray);
        CLEAR(PackageParentArray);
        CLEAR(TareParentArray);
        CLEAR(InnerPackageArray);
        TareParentLevel := 0;
        CASE ASNSummaryType OF
          'SOPI':
            BEGIN
              AdvanceShipNotice := TRUE;
              i := 1;
              BOLSumLineTmp.RESET;
              BOLSumLineTmp.SETRANGE("Bill of Lading No.",WarehouseBOLNo);
              BOLSumLineTmp.SETRANGE("Parent Line No.",1);
              IF BOLSumLineTmp.FIND('-') THEN
                REPEAT
                  SalesOrderArray[i] := BOLSumLineTmp."Source ID";
                  IF NOT SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderArray[i]) THEN
                    ERROR(Text018,SalesOrderArray[i]);
                  PackageParentArray[i] := BOLSumLineTmp."Line No.";
                  i := i + 1;
                UNTIL BOLSumLineTmp.NEXT = 0
              ELSE
                ERROR(Text022);
              // Get packages associated to order
              i := 1;
              REPEAT
                SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderArray[i]);
                IF SalesHeader."EDI Internal Doc. No." = '' THEN BEGIN
                  EDISetup.LOCKTABLE;
                  EDISetup."Last Internal Doc. No." := INCSTR(EDISetup."Last Internal Doc. No.");
                  SalesHeader."EDI Internal Doc. No." := EDISetup."Last Internal Doc. No.";
                  SalesHeader.MODIFY;
                  EDISetup.MODIFY;
                END;
                IF GUIALLOWED THEN
                  DispWindow.UPDATE(3,SalesHeader."No.");
                BOLSumLineTmp.RESET;
                BOLSumLineTmp.SETRANGE("Bill of Lading No.",WarehouseBOLNo);
                BOLSumLineTmp.SETRANGE("Parent Line No.",PackageParentArray[i]);
                IF NOT BOLSumLineTmp.FIND('-') THEN
                  ERROR(Text016,SalesOrderArray[i]);
                IF EDITemplate."Set Qty. to Ship Pre Post Pkg." THEN
                  UpdateQtyToShip;
                CreatePackage(PackageParentArray[i]);
                IF SalesHeader.Status = SalesHeader.Status::Open THEN
                  ReleaseSalesDocument.RUN(SalesHeader);
                i := i + 1;
                AssocInternalDocNo :=
                  EDIRecordAssocDocument.RecordAssocDoc(EDIRecDocHdr2,SalesHeader,TRUE);
                IF EDIRecDocHdr.GET(AssocInternalDocNo)THEN BEGIN
                  EDIRecDocHdr."ASN Processed" := TRUE;
                  EDIRecDocHdr."ASN Process Date" := TODAY;
                  EDIRecDocHdr."ASN Process Time" := TIME;
                  EDIRecDocHdr."Document Processed" := TRUE;
                  EDIRecDocHdr.MODIFY;
                END;
              UNTIL SalesOrderArray[i] = '';
            END;
          'SOTPI':
            BEGIN
              AdvanceShipNotice := TRUE;
              i := 1;
              m := 1;
              BOLSumLineTmp.RESET;
              BOLSumLineTmp.SETRANGE("Bill of Lading No.",WarehouseBOLNo);
              BOLSumLineTmp.SETRANGE("Parent Line No.",1);
              IF BOLSumLineTmp.FIND('-') THEN
                REPEAT
                  SalesOrderArray[i] := BOLSumLineTmp."Source ID";
                  IF NOT SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderArray[i]) THEN
                    ERROR(Text018,SalesOrderArray[i]);
                  TareParentArray[m] := BOLSumLineTmp."Line No.";
                  i := i + 1;
                  m := m + 1;
                UNTIL BOLSumLineTmp.NEXT = 0
              ELSE
                ERROR(Text022);

              // Get packages associated to tare(s)
              i := 1;
              REPEAT
                m := 1;
                SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderArray[i]);
                IF SalesHeader."EDI Internal Doc. No." = '' THEN BEGIN
                  EDISetup.LOCKTABLE;
                  EDISetup."Last Internal Doc. No." := INCSTR(EDISetup."Last Internal Doc. No.");
                  SalesHeader."EDI Internal Doc. No." := EDISetup."Last Internal Doc. No.";
                  SalesHeader.MODIFY;
                  EDISetup.MODIFY;
                END;
                IF GUIALLOWED THEN
                  DispWindow.UPDATE(3,SalesHeader."No.");
                BOLSumLineTmp.RESET;
                BOLSumLineTmp.SETRANGE("Bill of Lading No.",WarehouseBOLNo);
                BOLSumLineTmp.SETRANGE("Parent Line No.",TareParentArray[m]);
                IF NOT BOLSumLineTmp.FIND('-') THEN
                  ERROR(Text042,TareParentArray[i]);
                REPEAT
                  IF EDITemplate."Set Qty. to Ship Pre Post Pkg." THEN
                    UpdateQtyToShip;
                  InnerPackageArray[m] := BOLSumLineTmp."Line No.";
                  CreatePackage(InnerPackageArray[m]);
                  m := m + 1;
                UNTIL BOLSumLineTmp.NEXT = 0;
                IF SalesHeader.Status = SalesHeader.Status::Open THEN
                  ReleaseSalesDocument.RUN(SalesHeader);
                i := i + 1;
                AssocInternalDocNo :=
                  EDIRecordAssocDocument.RecordAssocDoc(EDIRecDocHdr2,SalesHeader,TRUE);
                IF EDIRecDocHdr.GET(AssocInternalDocNo)THEN BEGIN
                  EDIRecDocHdr."ASN Processed" := TRUE;
                  EDIRecDocHdr."ASN Process Date" := TODAY;
                  EDIRecDocHdr."ASN Process Time" := TIME;
                  EDIRecDocHdr."Document Processed" := TRUE;
                  EDIRecDocHdr.MODIFY;
                END;
              UNTIL SalesOrderArray[i] = '';
            END;
        END
      END ELSE
        ERROR(Text017,ASNSummaryType);
    END;

    PROCEDURE InsertBOLSumLine@1240030004(CurrSegmentGroup@1000000000 : Integer);
    VAR
      CurrEDIRecDocField@1000000001 : Record 14002359;
      No@1000000004 : Code[20];
    BEGIN
      No := '';
      PackageUCCNo := '';
      PackageTrackingNo := '';
      LastUOMCode := '';
      LastOverrideWeight := 0;
      LastOverrideVolume := 0;

      CurrEDIRecDocField.RESET;
      CurrEDIRecDocField.SETCURRENTKEY(
        "Internal Doc. No.","Segment Group","NAV Table No.","Nav Field No.");
      CurrEDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      CurrEDIRecDocField.SETRANGE("Segment Group",CurrSegmentGroup);
      CurrEDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading Summary Line");
      IF CurrEDIRecDocField.FIND('-') THEN
        REPEAT
          CASE CurrEDIRecDocField."Nav Field No." OF
            BillofLadingSummaryLine.FIELDNO("Line No."):
              BOLSumLineTmp."Line No." := CurrEDIRecDocField."Field Dec. Value";
            BillofLadingSummaryLine.FIELDNO("Parent Line No."):
              BOLSumLineTmp."Parent Line No." := CurrEDIRecDocField."Field Dec. Value";
            BillofLadingSummaryLine.FIELDNO("UCC No."):
              PackageUCCNo := CurrEDIRecDocField."Field Text Value";
            BillofLadingSummaryLine.FIELDNO("No."):
              No := CurrEDIRecDocField."Field Text Value";
            BillofLadingSummaryLine.FIELDNO("Package Line Quantity"):
              BOLSumLineTmp."Package Line Quantity" := CurrEDIRecDocField."Field Dec. Value";
            BillofLadingSummaryLine.FIELDNO("Source ID"):
              BOLSumLineTmp."Source ID" := CurrEDIRecDocField."Field Text Value";
            BillofLadingSummaryLine.FIELDNO("External Document No."):
              BOLSumLineTmp."External Document No." := CurrEDIRecDocField."Field Text Value";
            BillofLadingSummaryLine.FIELDNO("External Tracking No."):
              PackageTrackingNo := CurrEDIRecDocField."Field Text Value";
            BillofLadingSummaryLine.FIELDNO("Package Line Unit of Measure"):
              LastUOMCode := CurrEDIRecDocField."Field Text Value";
            BillofLadingSummaryLine.FIELDNO(Weight):
              LastOverrideWeight := CurrEDIRecDocField."Field Dec. Value";
            BillofLadingSummaryLine.FIELDNO(Volume):
              LastOverrideVolume := CurrEDIRecDocField."Field Dec. Value";
          END;
        UNTIL CurrEDIRecDocField.NEXT = 0;

      BOLSumLineTmp."Bill of Lading No." := WarehouseBOLNo;
      BOLSumLineTmp."Bill of Lading Type" := BOLSumLineTmp."Bill of Lading Type"::"ASN (EDI)";
      BOLSumLineTmp."No." := No;
      BOLSumLineTmp."UCC No." := PackageUCCNo;
      BOLSumLineTmp."External Tracking No." := PackageTrackingNo;
      BOLSumLineTmp."Package Line Unit of Measure" := LastUOMCode;
      BOLSumLineTmp.Weight := LastOverrideWeight;
      BOLSumLineTmp.Volume := LastOverrideVolume;
      BOLSumLineTmp.INSERT;

      BOLSumLineTmp2.COPY(BOLSumLineTmp);
      BOLSumLineTmp2.INSERT;
      BOLSumLineTmp3.COPY(BOLSumLineTmp);
      BOLSumLineTmp3.INSERT;
    END;

    PROCEDURE CreatePackage@1240030001(PackageParentID@1240030005 : Decimal);
    VAR
      ItemNo@1000000009 : Code[20];
      Text001@1000000010 : TextConst 'ENU=Item %1 not found on sales order %2.';
      ItemVariant@1240030006 : Code[20];
      ItemParentLineNo@1240030010 : Decimal;
      ItemQty@1000000012 : Decimal;
      k@1240030002 : Integer;
      PackageLineNo@1000000015 : Integer;
      TotalPackageCount@1000000001 : Integer;
      PackageNo@1000000008 : Integer;
      PackResource@1240020000 : Boolean;
    BEGIN
      j := 1;
      p := 1;

      PackageNo := 0;
      PackageUCCNo := '';
      PackageTrackingNo := '';
      TotalPackageCount := 0;
      CLEAR(InnerPackageNoArray);

      Package.LOCKTABLE;
      PackageLine.LOCKTABLE;

      CASE ASNSummaryType OF
        'SOPI':
          BEGIN
            BOLSumLineTmp.RESET;
            BOLSumLineTmp.SETCURRENTKEY("Bill of Lading No.","Bill of Lading Type","Parent Line No.");
            BOLSumLineTmp.SETRANGE("Bill of Lading No.",WarehouseBOLNo);
            BOLSumLineTmp.SETRANGE(
              "Bill of Lading Type",BOLSumLineTmp."Bill of Lading Type"::"ASN (EDI)");
            BOLSumLineTmp.SETRANGE("Parent Line No.",PackageParentArray[i]);
            IF BOLSumLineTmp.FIND('-') THEN
              REPEAT
                TotalPackageCount := TotalPackageCount + 1;
              UNTIL BOLSumLineTmp.NEXT = 0;

            // Create packages for each order level in the ASN
            BOLSumLineTmp.RESET;
            BOLSumLineTmp.SETCURRENTKEY("Bill of Lading No.","Bill of Lading Type","Parent Line No.");
            BOLSumLineTmp.SETRANGE("Bill of Lading No.",WarehouseBOLNo);
            BOLSumLineTmp.SETRANGE(
              "Bill of Lading Type",BOLSumLineTmp."Bill of Lading Type"::"ASN (EDI)");
            BOLSumLineTmp.SETRANGE("Parent Line No.",PackageParentArray[i]);
            IF BOLSumLineTmp.FIND('-') THEN
              REPEAT
                ItemParentLineNo := BOLSumLineTmp."Line No.";
                PackageUCCNo := BOLSumLineTmp."UCC No.";
                PackageTrackingNo := BOLSumLineTmp."External Tracking No.";
                Package.RESET;
                Package.INIT;
                Package.VALIDATE(Package."No.",'');
                Package.INSERT(TRUE);
                Package."Ship-to Type" := Package."Ship-to Type"::Customer;
                Package.VALIDATE("Ship-to No.",SalesHeader."Sell-to Customer No.");
                Package.VALIDATE("Ship-to Code",SalesHeader."Ship-to Code");
                Package."Source Type" := 36;
                Package."Source Subtype" := 1;
                Package."Source ID" := SalesHeader."No.";
                Package.VALIDATE("Location Code",SalesHeader."Location Code");
                IF MapGenCrossRef THEN BEGIN
                  Package.VALIDATE("Shipping Agent Code",ShippingAgentCode);
                  Package.VALIDATE("Shipping Agent Service",ShippingAgentService);
                END ELSE BEGIN
                  IF (ShippingAgentCode <> '') AND (ShippingAgentCode <> '') THEN BEGIN
                    Package.VALIDATE("Shipping Agent Code",ShippingAgentCode);
                    Package.VALIDATE("Shipping Agent Service",ShippingAgentService);
                  END ELSE BEGIN
                    Package.VALIDATE("Shipping Agent Code",SalesHeader."Shipping Agent Code");
                    Package.VALIDATE("Shipping Agent Service",SalesHeader."E-Ship Agent Service");
                  END;
                END;
                Package.VALIDATE("UCC No.",PackageUCCNo);
                Package.VALIDATE("External Tracking No.",PackageTrackingNo);
                Package."Package No." := PackageNo + 1;
                Package."Total Packages" := TotalPackageCount;
                Package."Packing Date" := TODAY;
                Package."Pickup Date" := PickupDate;
                Package."External Document No." := SalesHeader."External Document No.";
                Package."Override Weight" := BOLSumLineTmp.Weight;
                Package."Override Volume" := BOLSumLineTmp.Volume;
                MapPackageHdrFields(EDIRecDocField."Segment Group");
                Package.MODIFY(TRUE);

                k := 1;
                BOLSumLineTmp2.RESET;
                BOLSumLineTmp2.SETCURRENTKEY("Bill of Lading No.","Bill of Lading Type","Parent Line No.");
                BOLSumLineTmp2.SETRANGE("Bill of Lading No.",WarehouseBOLNo);
                BOLSumLineTmp2.SETRANGE(
                  "Bill of Lading Type",BOLSumLineTmp."Bill of Lading Type"::"ASN (EDI)");
                BOLSumLineTmp2.SETRANGE("Parent Line No.",ItemParentLineNo);
                IF BOLSumLineTmp2.FIND('-') THEN
                  REPEAT
                    EDIRecDocField2.RESET;
                    EDIRecDocField2.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
                    EDIRecDocField2.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
                    EDIRecDocField2.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading Summary Line");
                    EDIRecDocField2.SETRANGE(
                      "Nav Field No.",BillofLadingSummaryLine.FIELDNO("Line No."));
                    EDIRecDocField2.SETRANGE("Field Dec. Value",BOLSumLineTmp2."Line No.");
                    IF EDIRecDocField2.FIND('-') THEN
                      SegmentGroup := EDIRecDocField2."Segment Group";

                    EDIRecDocField2.RESET;
                    EDIRecDocField2.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
                    EDIRecDocField2.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
                    EDIRecDocField2.SETRANGE("NAV Table No.",DATABASE::"Package Line");
                    EDIRecDocField2.SETRANGE("Nav Field No.");
                    EDIRecDocField2.SETRANGE("Segment Group",SegmentGroup);
                    IF EDIRecDocField2.FIND('-') THEN BEGIN
                      LotNo := '';
                      SerialNo := '';
                      WarrantyDate := 0D;
                      ExpirationDate := 0D;
                      REPEAT
                        CASE EDIRecDocField2."Nav Field No." OF
                          PackageLine.FIELDNO("Serial No."):
                            BEGIN
                              SerialNo := EDIRecDocField2."Field Text Value";
                            END;
                          PackageLine.FIELDNO("Lot No."):
                            BEGIN
                              LotNo := EDIRecDocField2."Field Text Value";
                            END;
                          PackageLine.FIELDNO("Warranty Date"):
                            BEGIN
                              WarrantyDate := EDIRecDocField2."Field Date Value";
                            END;
                         PackageLine.FIELDNO("Expiration Date"):
                           BEGIN
                             ExpirationDate := EDIRecDocField2."Field Date Value";
                           END;
                        END;
                      UNTIL EDIRecDocField2.NEXT = 0;
                    END;
                    ItemNo := '';
                    ItemNo := BOLSumLineTmp2."No.";
                    ItemQty := BOLSumLineTmp2."Package Line Quantity";
                    LastUOMCode := BOLSumLineTmp2."Package Line Unit of Measure";
                    IF (ItemNo = '') THEN
                      ERROR(Text019,ItemNo,ItemParentLineNo,SalesHeader."No.");
                    IF ItemQty = 0 THEN
                      ERROR(Text054,ItemNo,ItemParentLineNo);
                    PackResource := FALSE;
                    SalesLine.RESET;
                    SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
                    SalesLine.SETRANGE(Type,SalesLine.Type::Item);
                    SalesLine.SETRANGE("Document No.",SalesHeader."No.");
                    SalesLine.SETRANGE("No.",ItemNo);
                    IF NOT SalesLine.FIND('-') THEN BEGIN
                      SalesLine.RESET;
                      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
                      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
                      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
                      CLEAR(ItemCrossReference);
                      WITH ItemCrossReference DO BEGIN
                        RESET;
                        SETCURRENTKEY(
                          "Cross-Reference No.","Cross-Reference Type","Cross-Reference Type No.",
                          "Discontinue Bar Code");
                        SETFILTER("Cross-Reference Type",'<>%1',"Cross-Reference Type"::Vendor);
                        SETRANGE("Discontinue Bar Code",FALSE);
                        SETFILTER("Cross-Reference Type No.",'%1|%2',SalesHeader."Sell-to Customer No.",'');
                        SETRANGE("Cross-Reference No.",ItemNo);
                        IF LastUOMCode <> '' THEN
                          SETRANGE("Unit of Measure",LastUOMCode);
                        IF NOT FIND('-') THEN
                          SETRANGE("Cross-Reference Type No.",'');
                        SalesLine.SETRANGE("No.","Item No.");
                        IF NOT SalesLine.FIND('-') THEN BEGIN
                          SalesLine.RESET;
                          SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
                          SalesLine.SETRANGE(Type,SalesLine.Type::Resource);
                          SalesLine.SETRANGE("Document No.",SalesHeader."No.");
                          SalesLine.SETRANGE("No.",ItemNo);
                          IF SalesLine.FIND('-') THEN
                            PackResource := TRUE
                          ELSE
                            ERROR(Text001,ItemNo,SalesHeader."No.")
                        END ELSE BEGIN
                          ItemNo := SalesLine."No.";
                          CrossReferenceNo := ItemCrossReference."Cross-Reference No.";
                        END;
                      END;
                    END;

                    ItemVariant := SalesLine."Variant Code";
                    IF GUIALLOWED THEN BEGIN
                      DispWindow.UPDATE(5,ItemNo);
                      DispWindow.UPDATE(6,ItemQty);
                      DispWindow.UPDATE(4,Package."No.");
                    END;

                    // Get Package Line No
                    PackageLine.SETRANGE("Package No.",Package."No.");
                    IF PackageLine.FIND('+') THEN
                      PackageLineNo := PackageLine."Line No." + 10000
                    ELSE
                      PackageLineNo := 10000;
                    PackageLine.INIT;
                    CLEAR(PackageLine);
                    PackageLine."Package No." := Package."No.";
                    PackageLine."Line No." := PackageLineNo;
                    PackageLine.INSERT(TRUE);
                    IF PackResource THEN
                      PackageLine.VALIDATE(Type,PackageLine.Type::Resource)
                    ELSE
                      PackageLine.VALIDATE(Type,PackageLine.Type::Item);
                    PackageLine.VALIDATE("No.",ItemNo);
                    PackageLine.VALIDATE("Variant Code",ItemVariant);
                    PackageLine.VALIDATE(Quantity,ItemQty);
                    IF (CrossReferenceNo <> '') AND (LastUOMCode <> '') THEN
                      PackageLine.VALIDATE("Unit of Measure Code",LastUOMCode)
                    ELSE
                      PackageLine.VALIDATE("Unit of Measure Code",SalesLine."Unit of Measure Code");
                    PackageLine.VALIDATE("Lot No.",LotNo);
                    PackageLine.VALIDATE("Serial No.",SerialNo);
                    PackageLine.VALIDATE("Expiration Date",ExpirationDate);
                    PackageLine.VALIDATE("Warranty Date",WarrantyDate);
                    PackageLine.MODIFY(TRUE);
                    k := k + 1;
                    LotNo := '';
                    SerialNo := '';
                    WarrantyDate := 0D;
                    ExpirationDate := 0D;
                  UNTIL BOLSumLineTmp2.NEXT = 0
                ELSE
                  ERROR(Text023,ItemParentLineNo);
                CLEAR(Shipping);
                Shipping.ClosePackage(Package,FALSE);
                PackageNo := PackageNo + 1;
                j := j + 1;
              UNTIL BOLSumLineTmp.NEXT = 0;
          END;
        'SOTPI':
          BEGIN
            // Create packages for each order/tare level in the ASN
            BOLSumLineTmp3.RESET;
            BOLSumLineTmp3.SETCURRENTKEY("Bill of Lading No.","Bill of Lading Type","Parent Line No.");
            BOLSumLineTmp3.SETRANGE("Bill of Lading No.",WarehouseBOLNo);
            BOLSumLineTmp3.SETRANGE(
              "Bill of Lading Type",BOLSumLineTmp."Bill of Lading Type"::"ASN (EDI)");
            BOLSumLineTmp3.SETRANGE("Parent Line No.",InnerPackageArray[m]);
            IF BOLSumLineTmp3.FIND('-') THEN
              REPEAT
                ItemParentLineNo := BOLSumLineTmp3."Line No.";
                PackageUCCNo := BOLSumLineTmp3."UCC No.";
                PackageTrackingNo := BOLSumLineTmp3."External Tracking No.";
                Package.RESET;
                Package.INIT;
                Package.VALIDATE(Package."No.",'');
                Package.INSERT(TRUE);
                Package."Ship-to Type" := Package."Ship-to Type"::Customer;
                Package.VALIDATE("Ship-to No.",SalesHeader."Sell-to Customer No.");
                Package.VALIDATE("Ship-to Code",SalesHeader."Ship-to Code");
                Package."Source Type" := 36;
                Package."Source Subtype" := 1;
                Package."Source ID" := SalesHeader."No.";
                Package.VALIDATE("Location Code",SalesHeader."Location Code");
                IF MapGenCrossRef THEN BEGIN
                  Package.VALIDATE("Shipping Agent Code",ShippingAgentCode);
                  Package.VALIDATE("Shipping Agent Service",ShippingAgentService);
                END ELSE BEGIN
                  IF (ShippingAgentCode <> '') AND (ShippingAgentCode <> '') THEN BEGIN
                    Package.VALIDATE("Shipping Agent Code",ShippingAgentCode);
                    Package.VALIDATE("Shipping Agent Service",ShippingAgentService);
                  END ELSE BEGIN
                    Package.VALIDATE("Shipping Agent Code",SalesHeader."Shipping Agent Code");
                    Package.VALIDATE("Shipping Agent Service",SalesHeader."E-Ship Agent Service");
                  END;
                END;
                Package.VALIDATE("UCC No.",PackageUCCNo);
                Package.VALIDATE("External Tracking No.",PackageTrackingNo);
                Package."Package No." := 1;
                Package."Total Packages" := 1;
                Package."Exist in Other Package" := TRUE;
                MapPackageHdrFields(EDIRecDocField."Segment Group");
                Package.MODIFY(TRUE);
                InnerPackageNoArray[p] := Package."No.";
                p := p + 1;
                k := 1;
                BOLSumLineTmp2.RESET;
                BOLSumLineTmp2.SETCURRENTKEY("Bill of Lading No.","Bill of Lading Type","Parent Line No.");
                BOLSumLineTmp2.SETRANGE("Bill of Lading No.",WarehouseBOLNo);
                BOLSumLineTmp2.SETRANGE(
                  "Bill of Lading Type",BOLSumLineTmp."Bill of Lading Type"::"ASN (EDI)");
                BOLSumLineTmp2.SETRANGE("Parent Line No.",ItemParentLineNo);
                IF BOLSumLineTmp2.FIND('-') THEN
                  REPEAT
                    EDIRecDocField2.RESET;
                    EDIRecDocField2.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
                    EDIRecDocField2.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
                    EDIRecDocField2.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading Summary Line");
                    EDIRecDocField2.SETRANGE(
                      "Nav Field No.",BillofLadingSummaryLine.FIELDNO("Parent Line No."));
                    EDIRecDocField2.SETRANGE("Field Dec. Value",ItemParentLineNo);
                    IF EDIRecDocField2.FIND('-') THEN
                      SegmentGroup := EDIRecDocField2."Segment Group";

                    EDIRecDocField2.RESET;
                    EDIRecDocField2.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
                    EDIRecDocField2.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
                    EDIRecDocField2.SETRANGE("NAV Table No.",DATABASE::"Package Line");
                    EDIRecDocField2.SETRANGE("Nav Field No.");
                    EDIRecDocField2.SETRANGE("Segment Group",SegmentGroup);
                    IF EDIRecDocField2.FIND('-') THEN BEGIN
                      LotNo := '';
                      SerialNo := '';
                      WarrantyDate := 0D;
                      ExpirationDate := 0D;
                      REPEAT
                        CASE EDIRecDocField2."Nav Field No." OF
                          PackageLine.FIELDNO("Serial No."):
                            BEGIN
                              SerialNo := EDIRecDocField2."Field Text Value";
                            END;
                          PackageLine.FIELDNO("Lot No."):
                            BEGIN
                              LotNo := EDIRecDocField2."Field Text Value";
                            END;
                          PackageLine.FIELDNO("Warranty Date"):
                            BEGIN
                              WarrantyDate := EDIRecDocField2."Field Date Value";
                            END;
                         PackageLine.FIELDNO("Expiration Date"):
                           BEGIN
                             ExpirationDate := EDIRecDocField2."Field Date Value";
                           END;
                        END;
                      UNTIL EDIRecDocField2.NEXT = 0;
                    END;
                    ItemNo := '';
                    ItemNo := BOLSumLineTmp2."No.";
                    ItemQty := BOLSumLineTmp2."Package Line Quantity";
                    LastUOMCode := BOLSumLineTmp2."Package Line Unit of Measure";
                    IF (ItemNo = '') THEN
                      ERROR(Text019,ItemParentLineNo,SalesHeader."No.");
                    IF ItemQty = 0 THEN
                      ERROR(Text054,ItemNo,ItemParentLineNo);
                    PackResource := FALSE;
                    SalesLine.RESET;
                    SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
                    SalesLine.SETRANGE(Type,SalesLine.Type::Item);
                    SalesLine.SETRANGE("Document No.",SalesHeader."No.");
                    SalesLine.SETRANGE("No.",ItemNo);
                    IF NOT SalesLine.FIND('-') THEN BEGIN
                      SalesLine.RESET;
                      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
                      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
                      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
                      CLEAR(ItemCrossReference);
                      WITH ItemCrossReference DO BEGIN
                        RESET;
                        SETCURRENTKEY(
                          "Cross-Reference No.","Cross-Reference Type","Cross-Reference Type No.",
                          "Discontinue Bar Code");
                        SETFILTER("Cross-Reference Type",'<>%1',"Cross-Reference Type"::Vendor);
                        SETRANGE("Discontinue Bar Code",FALSE);
                        SETFILTER("Cross-Reference Type No.",'%1|%2',SalesHeader."Sell-to Customer No.",'');
                        SETRANGE("Cross-Reference No.",ItemNo);
                        IF LastUOMCode <> '' THEN
                          SETRANGE("Unit of Measure",LastUOMCode);
                        IF NOT FIND('-') THEN
                          SETRANGE("Cross-Reference Type No.",'');
                        SalesLine.SETRANGE("No.","Item No.");
                        IF NOT SalesLine.FIND('-') THEN BEGIN
                          SalesLine.RESET;
                          SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
                          SalesLine.SETRANGE(Type,SalesLine.Type::Resource);
                          SalesLine.SETRANGE("Document No.",SalesHeader."No.");
                          SalesLine.SETRANGE("No.",ItemNo);
                          IF SalesLine.FIND('-') THEN
                            PackResource := TRUE
                          ELSE
                            ERROR(Text001,ItemNo,SalesHeader."No.")
                        END ELSE BEGIN
                          ItemNo := SalesLine."No.";
                          CrossReferenceNo := ItemCrossReference."Cross-Reference No.";
                        END;
                      END;
                    END;
                    ItemVariant := SalesLine."Variant Code";
                    IF GUIALLOWED THEN BEGIN
                      DispWindow.UPDATE(4,Package."No.");
                      DispWindow.UPDATE(5,ItemNo);
                      DispWindow.UPDATE(6,ItemQty);
                    END;
                    // Get Package Line No
                    PackageLine.SETRANGE("Package No.",Package."No.");
                    IF PackageLine.FIND('+') THEN
                      PackageLineNo := PackageLine."Line No." + 10000
                    ELSE
                      PackageLineNo := 10000;
                    PackageLine.INIT;
                    PackageLine."Package No." := Package."No.";
                    PackageLine."Line No." := PackageLineNo;
                    PackageLine.INSERT(TRUE);
                    IF PackResource THEN
                      PackageLine.VALIDATE(Type,PackageLine.Type::Resource)
                    ELSE
                      PackageLine.VALIDATE(Type,PackageLine.Type::Item);
                    PackageLine.VALIDATE("No.",ItemNo);
                    PackageLine.VALIDATE("Variant Code",ItemVariant);
                    PackageLine.VALIDATE(Quantity,ItemQty);
                    IF (CrossReferenceNo <> '') AND (LastUOMCode <> '') THEN
                      PackageLine.VALIDATE("Unit of Measure Code",LastUOMCode)
                    ELSE
                      PackageLine.VALIDATE("Unit of Measure Code",SalesLine."Unit of Measure Code");
                    PackageLine.VALIDATE("Lot No.",LotNo);
                    PackageLine.VALIDATE("Serial No.",SerialNo);
                    PackageLine.VALIDATE("Expiration Date",ExpirationDate);
                    PackageLine.VALIDATE("Warranty Date",WarrantyDate);
                    PackageLine.MODIFY(TRUE);
                    k := k + 1;
                    LotNo := '';
                    SerialNo := '';
                    WarrantyDate := 0D;
                    ExpirationDate := 0D;
                  UNTIL BOLSumLineTmp2.NEXT = 0
                ELSE
                  ERROR(Text023,ItemParentLineNo);
                CLEAR(Shipping);
                Shipping.ClosePackage(Package,FALSE);
                PackageNo := PackageNo + 1;
                j := j + 1;
              UNTIL BOLSumLineTmp3.NEXT = 0;

            // Create Tare Level Package
            p := 1;
            CreateTarePackage;
          END;
      END;
      COMMIT;
    END;

    PROCEDURE CreateTarePackage@45();
    VAR
      CurrEDIRecDocField@1240030001 : Record 14002359;
      Package2@1000000005 : Record 14000701;
      Package3@1000000012 : Record 14000701;
      PackageLine@1000000006 : Record 14000702;
      PackageLine2@1000000007 : Record 14000702;
      TareUCCNo@1240030002 : Code[20];
      Text001@1240030003 : TextConst 'ENU=Tare UCC No. not found for a Tare Level with parent line no. of %1.';
    BEGIN
      SegmentGroup := 0;
      TareUCCNo := '';

      CurrEDIRecDocField.RESET;
      CurrEDIRecDocField.SETCURRENTKEY(
        "Internal Doc. No.","Segment Group","NAV Table No.","Nav Field No.");
      CurrEDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      CurrEDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading Summary Line");
      CurrEDIRecDocField.SETRANGE("Nav Field No.",BillofLadingSummaryLine.FIELDNO("Line No."));
      CurrEDIRecDocField.SETRANGE("Field Dec. Value",InnerPackageArray[m]);
      IF CurrEDIRecDocField.FIND('-') THEN
        SegmentGroup := CurrEDIRecDocField."Segment Group";

      CurrEDIRecDocField.RESET;
      CurrEDIRecDocField.SETCURRENTKEY(
        "Internal Doc. No.","Segment Group","NAV Table No.","Nav Field No.");
      CurrEDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      CurrEDIRecDocField.SETRANGE("Segment Group",SegmentGroup);
      CurrEDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading Summary Line");
      CurrEDIRecDocField.SETRANGE("Nav Field No.",BillofLadingSummaryLine.FIELDNO("UCC No."));
      IF CurrEDIRecDocField.FIND('-') THEN
        TareUCCNo := CurrEDIRecDocField."Field Text Value"
      ELSE
        ERROR(Text001,TareParentArray[m]);

      Package2.RESET;
      Package2.INIT;
      Package2.TRANSFERFIELDS(Package);
      Package2.VALIDATE("No.",'');
      Package2.Closed := FALSE;
      Package2.INSERT(TRUE);
      Package2."UCC No." := TareUCCNo;
      Package2."Shipping Agent Code" := Package."Shipping Agent Code";
      Package2."Shipping Agent Service" := Package."Shipping Agent Service";
      Package2.MODIFY(TRUE);
      WHILE InnerPackageNoArray[p] <> '' DO BEGIN
        Package3.GET(InnerPackageNoArray[p]);
        PackageLine2.RESET;
        PackageLine2.SETRANGE("Package No.",Package2."No.");
        IF PackageLine2.FIND('+') THEN
          PackageLine2."Line No." := PackageLine2."Line No." + 10000
        ELSE
          PackageLine2."Line No." := 10000;
        PackageLine2."Package No." := Package2."No.";
        PackageLine.INIT;
        PackageLine2."Source Type" := Package2."Source Type";
        PackageLine2."Source Subtype" := Package2."Source Subtype";
        PackageLine2."Source ID" := Package2."Source ID";
        PackageLine2.INSERT(TRUE);
        PackageLine2.VALIDATE(Type,PackageLine2.Type::Package);
        PackageLine2.VALIDATE("No.",Package3."No.");
        PackageLine2.VALIDATE(Quantity,1);
        PackageLine2.MODIFY(TRUE);
        p := p + 1;
      END;

      CLEAR(Shipping);
      Shipping.ClosePackage(Package2,FALSE);
    END;

    PROCEDURE MapPackageHdrFields@1240020006(SegmentGroup@1240020001 : Integer);
    VAR
      EDIRecDocField@1240020000 : Record 14002359;
    BEGIN
      EDIRecDocField.RESET;
      EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::Package);
      EDIRecDocField.SETRANGE("Segment Group",SegmentGroup);
      IF EDIRecDocField.FIND('-') THEN
        REPEAT
          CASE EDIRecDocField."Nav Field No." OF
            Package.FIELDNO(Description):
              Package.Description := EDIRecDocField."Field Text Value";
            Package.FIELDNO("Override Weight"):
              Package."Override Weight" := EDIRecDocField."Field Dec. Value";
            Package.FIELDNO("Net Weight"):
              Package."Net Weight" := EDIRecDocField."Field Dec. Value";
            Package.FIELDNO("Gross Weight"):
              Package."Gross Weight" := EDIRecDocField."Field Dec. Value";
            Package.FIELDNO("Pickup Date"):
              Package."Pickup Date" := EDIRecDocField."Field Date Value";
            Package.FIELDNO("Expected Delivery Date"):
              Package."Expected Delivery Date" := EDIRecDocField."Field Date Value";
            Package.FIELDNO("Shipping Charge"):
              Package."Shipping Charge" := EDIRecDocField."Field Dec. Value";
            Package.FIELDNO(Cubage):
              Package.Cubage := EDIRecDocField."Field Dec. Value";
            Package.FIELDNO(Volume):
              Package.Volume := EDIRecDocField."Field Dec. Value";
            Package.FIELDNO("Override Volume"):
              Package."Override Volume" := EDIRecDocField."Field Dec. Value";
            Package.FIELDNO(Length):
              Package.Length := EDIRecDocField."Field Dec. Value";
            Package.FIELDNO(Width):
              Package.Width := EDIRecDocField."Field Dec. Value";
            Package.FIELDNO(Height):
              Package.Height := EDIRecDocField."Field Dec. Value";
            Package.FIELDNO("Override Length"):
              Package."Override Length" := EDIRecDocField."Field Dec. Value";
            Package.FIELDNO("Override Width"):
              Package."Override Width" := EDIRecDocField."Field Dec. Value";
            Package.FIELDNO("Override Height"):
              Package."Override Height" := EDIRecDocField."Field Dec. Value";

            //
            // Add Custom Package Header fields here
            //

          END;
        UNTIL EDIRecDocField.NEXT = 0;
    END;

    PROCEDURE CreateBOL@1240030003(CurrEDIRecDocHdr@1240030000 : Record 14002358);
    VAR
      SalesHdr@1000000001 : Record 36;
      BillofLadingWorksheetMgt@1000000002 : Codeunit 14000822;
      k@1000000003 : Integer;
      Text001@1000000011 : TextConst 'ENU=Creating Bill of Lading(s)......';
      Text002@1000000010 : TextConst 'ENU="Trading Partner      "';
      Text003@1000000009 : TextConst 'ENU="Internal Doc No.   "';
      Text004@1000000008 : TextConst 'ENU="Whse. ASN ID       "';
      Text005@1000000007 : TextConst 'ENU="Order No.             "';
      Text006@1000000006 : TextConst 'ENU="Ship-To                 "';
      BillOfLadingLine@1240020005 : Record 14000823;
      CloseOrderAction@1240020001 : Boolean;
      CreateBillOfLading@1240020006 : Boolean;
      DispWindow@1240020000 : Dialog;
      Text007@1240020003 : TextConst 'ENU=%1 %2 ships from multiple locations, Must be added on the Bill of Lading.';
      Text008@1240020004 : TextConst 'ENU=%1 %2 is already on Bill of Lading %3.';
      Text009@1240020002 : TextConst 'ENU=Packing Station %1 does not have Sales Order Close Action set.';
    BEGIN
      CloseOrderAction := FALSE;
      AddToOpenBOL := FALSE;
      ShippingSetup.GET;
      PackingStation.GetPackingStation;
      IF PackingStation."Sales Order Close Action" <>
        PackingStation."Sales Order Close Action"::" "
      THEN
        CloseOrderAction := TRUE;

      k := 1;

      IF NOT SalesHdr.GET(SalesHdr."Document Type"::Order,SalesOrderArray[1]) THEN
        ERROR(Text018,SalesOrderArray[1]);

      IF GUIALLOWED THEN BEGIN
        DispWindow.OPEN(
          Text001 + '\' +
          PADSTR(Text002,25,' ') + '#1###########################\' +
          PADSTR(Text003,25,' ') + '#2###########################\' +
          PADSTR(Text004,25,' ') + '#3###########################\' +
          PADSTR(Text005,25,' ') + '#4###########################\' +
          PADSTR(Text006,25,' ') + '#5###########################\');
        DispWindow.UPDATE(1,EDITradePartner."No.");
        DispWindow.UPDATE(2,EDIRecDocHdr2."Internal Doc. No.");
        DispWindow.UPDATE(3,WarehouseShipmentID);
      END;

      BOLByPackage := FALSE;
      IF PackingRule.GetPackingRule(
        BillOfLading."Ship-to Type"::Customer,SalesHdr."Sell-to Customer No.",SalesHdr."Ship-to Code")
      THEN BEGIN
        IF PackingRule."Auto Bill of Lading by Package" THEN BEGIN
          AutoBOLByPackage(CurrEDIRecDocHdr);
          EXIT;
        END;
        AddToOpenBOL := PackingRule."Add to Open Bill of Lading";
        AutoReleaseSummary := PackingRule."Auto Release Summary";
      END;

      IF AddToOpenBOL THEN BEGIN
        BillOfLadingLine.RESET;
        BillOfLadingLine.SETCURRENTKEY(Type,"No.");
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
        BillOfLadingLine.SETRANGE("No.",SalesHdr."No.");
        BillOfLadingLine.SETRANGE("Source Type",DATABASE::"Sales Header");
        BillOfLadingLine.SETRANGE("Source Subtype",SalesHdr."Document Type");
        BillOfLadingLine.SETRANGE("Source ID",SalesHdr."No.");
        BillOfLadingLine.SETRANGE(Closed,FALSE);
        IF ShippingSetup."Location Packing" THEN BEGIN
          SalesLine.RESET;
          SalesLine.SETRANGE("Document Type",SalesHdr."Document Type");
          SalesLine.SETRANGE("Document No.",SalesHdr."No.");
          SalesLine.SETFILTER("Location Code",'<>%1',SalesHdr."Location Code");
          IF SalesLine.FIND('-') THEN
            ERROR(
              Text007,
              SalesHdr."Document Type",SalesHdr."No.");

          BillOfLadingLine.SETRANGE("Location Code",SalesHdr."Location Code");
        END;
        IF BillOfLadingLine.FIND('-') THEN
          ERROR(
            Text008,
            SalesHdr."Document Type",SalesHdr."No.",BillOfLadingLine."Bill of Lading No.");

          BillOfLading.RESET;
          BillOfLading.SETCURRENTKEY("EDI 3PL Shipment ID","EDI 3PL Bill of Lading No.");
          BillOfLading.SETRANGE("EDI 3PL Shipment ID",WarehouseShipmentID);
          BillOfLading.SETRANGE("EDI 3PL Bill of Lading No.",WarehouseBOLNo);
          BillOfLading.SETRANGE(Released,FALSE);
          BillOfLading.SETRANGE("Ship-to Type",BillOfLading."Ship-to Type"::Customer);
          BillOfLading.SETRANGE("Ship-to No.",SalesHdr."Sell-to Customer No.");
          IF ShippingAgentCode <> '' THEN
            BillOfLading.SETRANGE("Shipping Agent Code",ShippingAgentCode)
          ELSE
            BillOfLading.SETRANGE("Shipping Agent Code",SalesHdr."Shipping Agent Code");
          IF ShippingAgentService <> '' THEN
            BillOfLading.SETRANGE("Shipping Agent Service",ShippingAgentService)
          ELSE
            BillOfLading.SETRANGE("Shipping Agent Service",SalesHdr."E-Ship Agent Service");
          IF ShippingSetup."Location Packing" THEN
            BillOfLading.SETRANGE("Location Code",SalesHdr."Location Code");
          IF SalesHdr."Ship-to Code" <> '' THEN
            BillOfLading.SETRANGE("Ship-to Code",SalesHdr."Ship-to Code");
          IF BillOfLading.FIND('-') THEN BEGIN
            CreateBillOfLading := FALSE;
          END ELSE
            CreateBillOfLading := TRUE;

        IF CreateBillOfLading THEN BEGIN
          WITH BillOfLading DO BEGIN
            INIT;
            "No." := '';
            INSERT(TRUE);

            Description := STRSUBSTNO('%1 %2',SalesHdr."Document Type",SalesHdr."No.");
            "Ship-to Type" := "Ship-to Type"::Customer;
            VALIDATE("Ship-to No.",SalesHdr."Sell-to Customer No.");
            VALIDATE("Ship-to Code",SalesHdr."Ship-to Code");
            VALIDATE("Location Code",SalesHdr."Location Code");
            "Ship-to Name" := SalesHdr."Ship-to Name";
            "Ship-to Name 2" := SalesHdr."Ship-to Name 2";
            "Ship-to Address" := SalesHdr."Ship-to Address";
            "Ship-to Address 2" := SalesHdr."Ship-to Address 2";
            "Ship-to City" := SalesHdr."Ship-to City";
            "Ship-to Contact" := SalesHdr."Ship-to Contact";
            "Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(SalesHdr."Ship-to Post Code");
            "Ship-to State" := SalesHdr."Ship-to County";
            "Ship-to Country Code" := SalesHdr."Ship-to Country/Region Code";
            ShippingSetup.AdjustZIPStateCityCode(
              "Ship-to ZIP Code","Ship-to State","Ship-to City","Ship-to Country Code");
            IF MapGenCrossRef THEN BEGIN
              VALIDATE("Shipping Agent Code",ShippingAgentCode);
              VALIDATE("Shipping Agent Service",ShippingAgentService);
            END ELSE BEGIN
              IF (ShippingAgentCode <> '') AND (ShippingAgentCode <> '') THEN BEGIN
                VALIDATE("Shipping Agent Code",ShippingAgentCode);
                VALIDATE("Shipping Agent Service",ShippingAgentService);
              END ELSE BEGIN
                VALIDATE("Shipping Agent Code",SalesHdr."Shipping Agent Code");
                VALIDATE("Shipping Agent Service",SalesHdr."E-Ship Agent Service");
              END;
            END;
            VALIDATE("Shipping Payment Type",SalesHdr."Shipping Payment Type");
            VALIDATE("Third Party Ship. Account No.",SalesHdr."Third Party Ship. Account No.");
            VALIDATE("Shipping Insurance",SalesHdr."Shipping Insurance");
            "Residential Delivery" := SalesHdr."Residential Delivery";
            "Free Freight" := SalesHdr."Free Freight";
            "No Free Freight Lines on Order" := SalesHdr."No Free Freight Lines on Order";
            "EDI 3PL Bill of Lading" := TRUE;
            "EDI 3PL Shipment ID" := WarehouseShipmentID;
            "EDI 3PL Bill of Lading No." := WarehouseBOLNo;
            MapBOLHdrFields;
            MODIFY;
          END;
        END;
        AllowShipChargeDistribution := FALSE;
        IF (EDITemplate."Auto. Process 3PL Ship Notice") AND (EDITemplate."Auto. Post Shipment") THEN BEGIN
          AllowShipChargeDistribution := TRUE;
          GetNextShippingCharge;
        END;
        REPEAT
          SalesHdr.GET(SalesHdr."Document Type"::Order,SalesOrderArray[k]);
          BillofLadingWorksheetMgt.AddSalesHeader(
            BillOfLading,SalesHdr,PackingStation,ShippingSetup,FALSE);
          k := k + 1;
        UNTIL SalesOrderArray[k] = '';
      END ELSE BEGIN
        BillOfLading.INIT;
        BillOfLading."No." := '';
        BillOfLading.INSERT(TRUE);
        SalesHdr.GET(SalesHdr."Document Type"::Order,SalesOrderArray[1]);
        BillOfLading.VALIDATE("Ship-to No.",SalesHdr."Sell-to Customer No.");
        BillOfLading.VALIDATE("Ship-to Type",BillOfLading."Ship-to Type"::Customer);
        BillOfLading.VALIDATE("Ship-to Code",SalesHdr."Ship-to Code");
        BillOfLading."Ship-to Name" := SalesHdr."Ship-to Name";
        BillOfLading."Ship-to Name 2" := SalesHdr."Ship-to Name 2";
        BillOfLading."Ship-to Address" := SalesHdr."Ship-to Address";
        BillOfLading."Ship-to Address 2" := SalesHdr."Ship-to Address 2";
        BillOfLading."Ship-to City" := SalesHdr."Ship-to City";
        BillOfLading."Ship-to Contact" := SalesHdr."Ship-to Contact";
        BillOfLading."Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(SalesHdr."Ship-to Post Code");
        BillOfLading."Ship-to State" := SalesHdr."Ship-to County";
        BillOfLading."Ship-to Country Code" := SalesHdr."Ship-to Country/Region Code";
        IF MapGenCrossRef THEN BEGIN
          BillOfLading.VALIDATE("Shipping Agent Code",ShippingAgentCode);
          BillOfLading.VALIDATE("Shipping Agent Service",ShippingAgentService);
        END ELSE BEGIN
          IF (ShippingAgentCode <> '') AND (ShippingAgentCode <> '') THEN BEGIN
            BillOfLading.VALIDATE("Shipping Agent Code",ShippingAgentCode);
            BillOfLading.VALIDATE("Shipping Agent Service",ShippingAgentService);
          END ELSE BEGIN
            BillOfLading.VALIDATE("Shipping Agent Code",SalesHdr."Shipping Agent Code");
            BillOfLading.VALIDATE("Shipping Agent Service",SalesHdr."E-Ship Agent Service");
          END;
        END;
        BillOfLading."EDI 3PL Bill of Lading" := TRUE;
        BillOfLading."EDI 3PL Shipment ID" := WarehouseShipmentID;
        BillOfLading."EDI 3PL Bill of Lading No." := WarehouseBOLNo;
        MapBOLHdrFields;
        BillOfLading.MODIFY;
        REPEAT
          SalesHdr.GET(SalesHdr."Document Type"::Order,SalesOrderArray[k]);
          BillofLadingWorksheetMgt.AddSalesHeader(
            BillOfLading,SalesHdr,PackingStation,ShippingSetup,FALSE);
          k := k + 1;
        UNTIL SalesOrderArray[k] = '';
      END;

      NAVBillofLadingNo := BillOfLading."No.";

      IF EDITemplate."Update Sales Order From ASN" THEN
        UpdateSalesOrders(BillOfLading);

      COMMIT;

      IF ((EDITemplate."Auto. Process 3PL Ship Notice") AND
          (NOT EDITemplate."Distribute Shipping Charge"))
      THEN BEGIN
        IF (EDITemplate."Auto. Post Shipment") THEN
          IF CloseOrderAction THEN BEGIN
            PostShipment;
            IF PackingRule."Combine Shipment Invoice Req." THEN
              IF AdvanceShipNotice THEN
                CombineShipmentInvoices(BillOfLading);
            IF (AdvanceShipNotice AND EDITemplate."Auto. Release Whse.BOL") OR
               (AutoReleaseSummary)  OR
               ((EDITemplate."Auto. Release Whse.BOL") AND (NOT AddToOpenBOL))
            THEN BEGIN
              BOLMgt.CloseBillOfLading(BillOfLading,0);
              BOLMgt.CloseBOLSummary(BillOfLading);
              IF EDITemplate."Send Advance Ship Notice" THEN
                SendASN;
            END;
            IF (EDITemplate."Send EDI Invoice") THEN
              SendEDIInvoice;
          END ELSE
            ERROR(Text009,PackingStation.Code);
      END;

      IF ((EDITemplate."Auto. Process 3PL Ship Notice") AND
          (EDITemplate."Distribute Shipping Charge"))
      THEN BEGIN
        DistributeShippingCharge(BillOfLading);
        IF (EDITemplate."Auto. Post Shipment") THEN
          IF CloseOrderAction THEN BEGIN
            PostShipment;
            IF PackingRule."Combine Shipment Invoice Req." THEN
              IF AdvanceShipNotice THEN
                CombineShipmentInvoices(BillOfLading);
            IF (AutoReleaseSummary) OR
               ((EDITemplate."Auto. Release Whse.BOL") AND (NOT AddToOpenBOL))
            THEN BEGIN
              CLEAR(BillOfLading);
              BillOfLading.GET(NAVBillofLadingNo);
              BOLMgt.CloseBillOfLading(BillOfLading,0);
              BOLMgt.CloseBOLSummary(BillOfLading);
              IF EDITemplate."Send Advance Ship Notice" THEN
                SendASN;
            END;
            IF (EDITemplate."Send EDI Invoice") THEN
              SendEDIInvoice;
          END ELSE
            ERROR(Text009,PackingStation.Code);
      END;

      IF GUIALLOWED THEN
        DispWindow.CLOSE;
    END;

    PROCEDURE AutoBOLByPackage@1240020009(EDIRecDocHdr2@1240020009 : Record 14002358);
    VAR
      SalesHdr@1240020003 : Record 36;
      Package@1240020019 : Record 14000701;
      PackageTmp@1240020010 : TEMPORARY Record 14000701;
      PackingControl@1240020002 : Record 14000717;
      ShippingAgent@1240020001 : Record 291;
      PackageMgt@1240020000 : Codeunit 14000702;
      BOLMgt@1240020021 : Codeunit 14000821;
      PrintOrder@1240020007 : Boolean;
      k@1240020008 : Integer;
      SourceSubType@1240020006 : Integer;
      SourceType@1240020005 : Integer;
      BOLWasReleased@1240020020 : Boolean;
      Dispwindow@1240020004 : Dialog;
      Text001@1240020016 : TextConst 'ENU=Creating Bill of Lading(s)......';
      Text002@1240020015 : TextConst 'ENU="Trading Partner      "';
      Text003@1240020014 : TextConst 'ENU="Internal Doc No.   "';
      Text004@1240020013 : TextConst 'ENU="Whse. ASN ID       "';
      Text005@1240020012 : TextConst 'ENU="Order No.             "';
      Text006@1240020011 : TextConst 'ENU="Ship-To                 "';
      Text007@1240020018 : TextConst 'ENU=No Packages Found';
      Text008@1240020017 : TextConst 'ENU=Error Closing Document';
    BEGIN
      BOLByPackage := TRUE;
      IF NOT SalesHdr.GET(SalesHdr."Document Type"::Order,SalesOrderArray[1]) THEN
        ERROR(Text018,SalesOrderArray[1]);

      IF GUIALLOWED THEN BEGIN
        Dispwindow.OPEN(
          Text001 + '\' +
          PADSTR(Text002,25,' ') + '#1###########################\' +
          PADSTR(Text003,25,' ') + '#2###########################\' +
          PADSTR(Text004,25,' ') + '#3###########################\' +
          PADSTR(Text005,25,' ') + '#4###########################\' +
          PADSTR(Text006,25,' ') + '#5###########################\');
        Dispwindow.UPDATE(1,EDITradePartner."No.");
        Dispwindow.UPDATE(2,EDIRecDocHdr2."Internal Doc. No.");
        Dispwindow.UPDATE(3,WarehouseShipmentID);
      END;

      PackingStation.TESTFIELD("Sales Order Close Action");
      k := 1;
      REPEAT
        SalesHdr.GET(SalesHdr."Document Type"::Order,SalesOrderArray[k]);
        Dispwindow.UPDATE(4,SalesHdr."No.");
        Dispwindow.UPDATE(5,SalesHdr."Ship-to Code");
        SourceType := 36;
        SourceSubType := 1;

        PackageTmp.RESET;
        PackageTmp.DELETEALL;
        BillOfLadingTmp.RESET;
        BillOfLadingTmp.DELETEALL;

        Package.RESET;
        Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        Package.SETRANGE("Source Type",SourceType);
        Package.SETRANGE("Source Subtype",SourceSubType);
        Package.SETRANGE("Source ID",SalesHdr."No.");
        IF Package.FIND('-') THEN BEGIN
          REPEAT
            PackageTmp.COPY(Package);
            PackageTmp.INSERT;
          UNTIL Package.NEXT = 0;

          IF EDITemplate."Update Sales Order From ASN" THEN
            BOLByPackageUpdateSalesOrder(SalesHdr);

          CLEAR(PackingControl);
          CLEAR(PackageMgt);
          PackageMgt.Initialize(PackingStation,ShippingSetup);
          IF ShippingAgentCode = '' THEN
            ShippingAgent.GET(SalesHdr."Shipping Agent Code")
          ELSE
            ShippingAgent.GET(ShippingAgentCode);
          PrintOrder := FALSE;
          PackingControl.TransferFromSource(SourceType,SourceSubType,SalesHeader."No.");
          IF PackingStation."Reset Order Qty. When Opened" THEN
            PackageMgt.ResetQtyToShip(PackingControl);
          IF NOT PackageMgt.CloseOrder(ShippingAgent,PackingControl,PrintOrder,FALSE,FALSE) THEN BEGIN
            IF NOT PackageMgt.CloseOrder(ShippingAgent,PackingControl,PrintOrder,TRUE,FALSE) THEN
              ERROR(Text008);
          END;
          PackageTmp.RESET;
          IF PackageTmp.FIND('-') THEN
            REPEAT
              BillOfLading.GET(PackageTmp."No.");
              BillOfLadingTmp.COPY(BillOfLading);
              BillOfLadingTmp.INSERT;
              BOLWasReleased := BillOfLading.Released;
              IF BillOfLading."Summary Released" THEN
                BOLMgt.OpenBOLSummary(BillOfLading);
              IF BillOfLading.Released THEN
                BOLMgt.OpenBillOfLading(BillOfLading);
              BillOfLading."EDI 3PL Bill of Lading" := TRUE;
              BillOfLading."EDI 3PL Shipment ID" := WarehouseShipmentID;
              BillOfLading."EDI 3PL Bill of Lading No." := WarehouseBOLNo;
              IF MapGenCrossRef THEN BEGIN
                BillOfLading.VALIDATE("Shipping Agent Code",ShippingAgentCode);
                BillOfLading.VALIDATE("Shipping Agent Service",ShippingAgentService);
              END ELSE BEGIN
                IF (ShippingAgentCode <> '') AND (ShippingAgentCode <> '') THEN BEGIN
                  BillOfLading.VALIDATE("Shipping Agent Code",ShippingAgentCode);
                  BillOfLading.VALIDATE("Shipping Agent Service",ShippingAgentService);
                END ELSE BEGIN
                  BillOfLading.VALIDATE("Shipping Agent Code",SalesHdr."Shipping Agent Code");
                  BillOfLading.VALIDATE("Shipping Agent Service",SalesHdr."E-Ship Agent Service");
                END;
              END;
              MapBOLHdrFields;
              BillOfLading.MODIFY;
              IF BOLWasReleased THEN BEGIN
                BOLMgt.CloseBillOfLading(BillOfLading,0);
                BOLMgt.CloseBOLSummary(BillOfLading);
              END;
              NAVBillofLadingNo := BillOfLading."No.";

              IF EDITemplate."Send Advance Ship Notice" THEN
                SendASN;
              IF (EDITemplate."Send EDI Invoice") THEN
                SendEDIInvoice;
            UNTIL PackageTmp.NEXT = 0;
            PackageTmp.RESET;
            PackageTmp.DELETEALL;
            COMMIT;
        END ELSE
          ERROR(Text007);
        k := k + 1;
      UNTIL SalesOrderArray[k] = '';



      IF GUIALLOWED THEN
        Dispwindow.CLOSE;
    END;

    PROCEDURE MapBOLHdrFields@1240030005();
    BEGIN
      EDIRecDocField.RESET;
      EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading");
      IF EDIRecDocField.FIND('-') THEN
        REPEAT
          CASE EDIRecDocField."Nav Field No." OF
            BillOfLading.FIELDNO("Custom Value 1"):
              BillOfLading."Custom Value 1" := EDIRecDocField."Field Text Value";
            BillOfLading.FIELDNO("Custom Value 2"):
              BillOfLading."Custom Value 2" := EDIRecDocField."Field Text Value";
            BillOfLading.FIELDNO("Custom Value 3"):
              BillOfLading."Custom Value 3" := EDIRecDocField."Field Text Value";
            BillOfLading.FIELDNO("Custom Value 4"):
              BillOfLading."Custom Value 4" := EDIRecDocField."Field Text Value";
            BillOfLading.FIELDNO("Custom Value 5"):
              BillOfLading."Custom Value 5" := EDIRecDocField."Field Text Value";
            BillOfLading.FIELDNO("Override Weight"):
              BillOfLading."Override Weight" := EDIRecDocField."Field Dec. Value";
            BillOfLading.FIELDNO("Override Volume"):
              BillOfLading."Override Volume" := EDIRecDocField."Field Dec. Value";
            BillOfLading.FIELDNO("External Tracking No."):
              BillOfLading."External Tracking No." := EDIRecDocField."Field Text Value";
            BillOfLading.FIELDNO("Shipping Payment Type"):
              BEGIN
                IF EDIRecDocField."General EDI Cross Reference" THEN
                  EVALUATE(BillOfLading."Shipping Payment Type",FORMAT(ShipPaymentType))
                ELSE
                  EVALUATE(BillOfLading."Shipping Payment Type",EDIRecDocField."Field Text Value");
              END;
            BillOfLading.FIELDNO("Shipping Charge"):
              BillOfLading."Shipping Charge" := EDIRecDocField."Field Dec. Value";
            BillOfLading.FIELDNO("VICS Bill of Lading No."):
              BillOfLading."VICS Bill of Lading No." := EDIRecDocField."Field Text Value";
            BillOfLading.FIELDNO(Description):
              BillOfLading.Description := EDIRecDocField."Field Text Value";
            BillOfLading.FIELDNO("Third Party Ship. Account No."):
              BillOfLading."Third Party Ship. Account No." := EDIRecDocField."Field Text Value";
            BillOfLading.FIELDNO("Packing Date"):
              BillOfLading."Packing Date" := EDIRecDocField."Field Date Value";
            BillOfLading.FIELDNO("Pickup Date"):
              BillOfLading."Pickup Date" := EDIRecDocField."Field Date Value";
            BillOfLading.FIELDNO("Expected Delivery Date"):
              BillOfLading."Expected Delivery Date" := EDIRecDocField."Field Date Value";
            BillOfLading.FIELDNO("EDI 3PL Shipment ID"):
              BillOfLading."EDI 3PL Shipment ID" := EDIRecDocField."Field Text Value";
            BillOfLading.FIELDNO("EDI 3PL Bill of Lading No."):
              BillOfLading."EDI 3PL Bill of Lading No." := EDIRecDocField."Field Text Value";
            BillOfLading.FIELDNO("Ship-to Name"):
              BillOfLading."Ship-to Name" := EDIRecDocField."Field Text Value";
            BillOfLading.FIELDNO("Ship-to Name 2"):
              BillOfLading."Ship-to Name 2" := EDIRecDocField."Field Text Value";
            BillOfLading.FIELDNO("Ship-to Address"):
              BillOfLading."Ship-to Address" := EDIRecDocField."Field Text Value";
            BillOfLading.FIELDNO("Ship-to Address 2"):
              BillOfLading."Ship-to Address 2" := EDIRecDocField."Field Text Value";
            BillOfLading.FIELDNO("Ship-to City"):
              BillOfLading."Ship-to City" := EDIRecDocField."Field Text Value";
            BillOfLading.FIELDNO("Ship-to State"):
              BillOfLading."Ship-to State" := EDIRecDocField."Field Text Value";
            BillOfLading.FIELDNO("Ship-to ZIP Code"):
              BillOfLading."Ship-to ZIP Code" := EDIRecDocField."Field Text Value";


            //
            // Add Custom Bill of Lading Header fields here
            //

          END;
        UNTIL EDIRecDocField.NEXT = 0;
      BillOfLading.MODIFY;
    END;

    PROCEDURE GetShippingAgent@1240030014();
    BEGIN
      IF NonEDIOrder THEN BEGIN
        EDIRecDocField.RESET;
        EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
        EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
        EDIRecDocField.SETRANGE(EDIRecDocField."NAV Table No.",DATABASE::"Sales Header");
        EDIRecDocField.SETRANGE(EDIRecDocField."General EDI Cross Reference",TRUE);
        IF EDIRecDocField.FIND('-') THEN
          REPEAT
            CASE EDIRecDocField."Nav Field No." OF
              SalesHeader.FIELDNO(SalesHeader."Shipping Agent Code"):
               ShippingAgentCode := EDIRecDocField."NAV Cross Ref. Value-1";
             SalesHeader.FIELDNO(SalesHeader."E-Ship Agent Service"):
                ShippingAgentService := EDIRecDocField."NAV Cross Ref. Value-2";
              SalesHeader.FIELDNO(SalesHeader."Shipping Payment Type"):
                EVALUATE(ShipPaymentType,EDIRecDocField."NAV Cross Ref. Value-1");
            END;
          UNTIL EDIRecDocField.NEXT = 0;
        EXIT;
      END;
      EDIRecDocField.RESET;
      EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocField.SETRANGE(EDIRecDocField."NAV Table No.",DATABASE::"Bill of Lading");
      EDIRecDocField.SETRANGE(EDIRecDocField."General EDI Cross Reference",TRUE);
      IF EDIRecDocField.FIND('-') THEN
        REPEAT
          CASE EDIRecDocField."Nav Field No." OF
            BillOfLading.FIELDNO(BillOfLading."Shipping Agent Code"):
              ShippingAgentCode := EDIRecDocField."NAV Cross Ref. Value-1";
            BillOfLading.FIELDNO(BillOfLading."Shipping Agent Service"):
              ShippingAgentService := EDIRecDocField."NAV Cross Ref. Value-2";
            BillOfLading.FIELDNO(BillOfLading."Shipping Payment Type"):
              EVALUATE(ShipPaymentType,EDIRecDocField."NAV Cross Ref. Value-1");
          END;
        UNTIL EDIRecDocField.NEXT = 0;
    END;

    PROCEDURE CheckHLSequence@1240030010() HLSequenceError : Boolean;
    VAR
      OrderLevel@1240030005 : Decimal;
      TareLevel@1240030006 : Decimal;
      PackLevel@1240030007 : Decimal;
      ItemLevel@1240030008 : Decimal;
      HLTypeID@1240030000 : Code[1];
      HLTypeFound@1240030001 : Boolean;
      TareFound@1240030002 : Boolean;
    BEGIN
      LineNo := 0;
      ParentLineNo := 0;
      HLLineNo := 0;
      CLEAR(HLParentNo);

      EDIRecDocField.RESET;
      EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocField.SETFILTER(Segment,'HL');
      IF EDIRecDocField.FIND('-') THEN
        REPEAT
          CASE EDIRecDocField.Element OF
            '01':
              LineNo := EDIRecDocField."Field Dec. Value";
            '02':
              ParentLineNo := EDIRecDocField."Field Dec. Value";
            '03':
              BEGIN
                HLTypeID := EDIRecDocField."Field Text Value";
                HLTypeFound := TRUE;
              END;
          END;
          IF HLTypeFound THEN BEGIN
            CASE HLTypeID OF
              'S':
                BEGIN
                  HLLineNo := HLLineNo + 1;
                  IF (LineNo <>  HLLineNo) OR (ParentLineNo <>  0) THEN
                    EXIT(TRUE);
                END;
              'O':
                BEGIN
                  OrderLevel := 2;
                  HLLineNo := HLLineNo + 1;
                  IF HLLineNo <> OrderLevel THEN
                    OrderLevel := HLLineNo;
                  IF (LineNo <>  HLLineNo) OR (ParentLineNo <> 1) THEN
                    EXIT(TRUE);
                END;
              'T':
                BEGIN
                  TareFound := TRUE;
                  TareLevel := 3;
                  HLLineNo := HLLineNo + 1;
                  IF HLLineNo <> TareLevel THEN
                    TareLevel := HLLineNo;
                  HLParentNo[HLLineNo] := OrderLevel;
                  IF (LineNo <>  HLLineNo) OR (ParentLineNo <> HLParentNo[HLLineNo]) THEN
                    EXIT(TRUE);
                END;
              'P':
                BEGIN
                  PackLevel := 4;
                  HLLineNo := HLLineNo + 1;
                  IF HLLineNo <> PackLevel THEN
                    PackLevel := HLLineNo;
                  IF TareFound THEN
                    HLParentNo[HLLineNo] := TareLevel
                  ELSE
                    HLParentNo[HLLineNo] := OrderLevel;
                  IF (LineNo <>  HLLineNo) OR (ParentLineNo <> HLParentNo[HLLineNo]) THEN
                    EXIT(TRUE);
                END;
              'I':
                BEGIN
                  ItemLevel := 4;
                  HLLineNo := HLLineNo + 1;
                  IF HLLineNo <> ItemLevel THEN
                    ItemLevel := HLLineNo;
                  HLParentNo[HLLineNo] := PackLevel;
                  IF (LineNo <>  HLLineNo) OR (ParentLineNo <> HLParentNo[HLLineNo]) THEN
                    EXIT(TRUE);
                END;
            END;
            HLTypeFound := FALSE;
          END;
        UNTIL EDIRecDocField.NEXT = 0;
    END;

    PROCEDURE DeleteSalesOrderPackage@1240030008();
    VAR
      Text001@1240030001 : TextConst 'ENU=More than one Bill of Lading with Warehouse Shipment ID %1 Warehouse BOL No. %2 found. \ Deletion of packages and Bill of Lading cancelled.';
      BillOfLadingLine@1240020000 : Record 14000823;
      PackingRule@1240020001 : Record 14000715;
    BEGIN
      i := 1;
      AddToOpenBOL := FALSE;
      ShippingSetup.GET;
      PackingStation.GetPackingStation;

      IF GUIALLOWED THEN
        DispWindow.OPEN(
          Text033 + '\' +
          PADSTR(Text034,25,' ') + '#1###########################\' +
          PADSTR(Text035,25,' ') + '#2###########################\');

      IF NonEDIOrder THEN BEGIN
        WHILE SalesOrderArray[i] <> '' DO BEGIN
          SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderArray[i]);
          IF GUIALLOWED THEN
            DispWindow.UPDATE(1,SalesOrderArray[i]);
          Package.RESET;
          Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID","Location Code");
          Package.SETRANGE("Source Type",36);
          Package.SETRANGE("Source Subtype",1);
          Package.SETRANGE("Source ID",SalesOrderArray[i]);
          IF Package.FIND('-') THEN BEGIN
            IF GUIALLOWED THEN
              DispWindow.UPDATE(2,Package."No.");
            Package.MODIFYALL(Closed,FALSE);
            Package.DELETEALL(TRUE);
          END;
          i := i + 1;
        END;
        EXIT;
      END;

      BillOfLading.RESET;
      BillOfLading.SETCURRENTKEY("EDI 3PL Shipment ID");
      BillOfLading.SETRANGE("EDI 3PL Shipment ID",WarehouseShipmentID);
      BillOfLading.SETRANGE("EDI 3PL Bill of Lading No.",WarehouseBOLNo);
      BillOfLading.SETRANGE(Posted,FALSE);
      IF BillOfLading.FIND('-') THEN BEGIN
        NAVBillofLadingNo := BillOfLading."No.";
        IF BillOfLading.COUNT > 1 THEN
          ERROR(Text001,WarehouseShipmentID,WarehouseBOLNo);
      END;

      IF PackingRule.GetPackingRule(
        BillOfLading."Ship-to Type"::Customer,BillOfLading."Ship-to No.",BillOfLading."Ship-to Code")
      THEN
        AddToOpenBOL := PackingRule."Add to Open Bill of Lading";

      WHILE SalesOrderArray[i] <> '' DO BEGIN
        SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderArray[i]);
        IF GUIALLOWED THEN
          DispWindow.UPDATE(1,SalesOrderArray[i]);
        Package.RESET;
        Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID","Location Code");
        Package.SETRANGE("Source Type",36);
        Package.SETRANGE("Source Subtype",1);
        Package.SETRANGE("Source ID",SalesOrderArray[i]);
        IF Package.FIND('-') THEN BEGIN
          IF GUIALLOWED THEN
            DispWindow.UPDATE(2,Package."No.");
          Package.MODIFYALL(Closed,FALSE);
          Package.DELETEALL(TRUE);
        END;
        BillOfLadingLine.RESET;
        BillOfLadingLine.SETCURRENTKEY(
          "Bill of Lading No.","Source Type","Source Subtype","Source ID",Type);
        BillOfLadingLine.SETRANGE("Bill of Lading No.",BillOfLading."No.");
        BillOfLadingLine.SETRANGE("Source Type",DATABASE::"Sales Header");
        BillOfLadingLine.SETRANGE("Source Subtype",1);
        BillOfLadingLine.SETRANGE("Source ID",SalesOrderArray[i]);
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
        BillOfLadingLine.SETRANGE(Closed,FALSE);
        IF BillOfLadingLine.FIND('-') THEN
          BillOfLadingLine.DELETE(TRUE);
        i := i + 1;
      END;

      BillOfLadingLine.RESET;
      BillOfLadingLine.SETRANGE("Bill of Lading No.",BillOfLading."No.");
      IF NOT BillOfLadingLine.FIND('-') THEN BEGIN
        IF NAVBillofLadingNo <> '' THEN BEGIN
          IF BillOfLading."Summary Released" THEN
            BOLMgt.OpenBOLSummary(BillOfLading);
          IF BillOfLading.Released THEN
            BOLMgt.OpenBillOfLading(BillOfLading);
          BillOfLading.DELETE(TRUE);
        END;
      END;

      IF GUIALLOWED THEN
        DispWindow.CLOSE;
    END;

    PROCEDURE PostShipment@1240030002();
    VAR
      BillofLadingLine@1240030000 : Record 14000823;
      PackingStation@1240030001 : Record 14000709;
      ShippingSetup@1240030002 : Record 14000707;
      ShippingAgent@1240030003 : Record 291;
      PackingControl@1240030004 : Record 14000717;
      SalesHeader@1240020001 : Record 36;
      PackageMgt@1240030005 : Codeunit 14000702;
      Text001@1240030008 : TextConst 'ENU=No Packages Found';
      Text003@1240030006 : TextConst 'ENU=Error Closing Document';
      ReleaseSalesDocument@1240020000 : Codeunit 414;
      EShipSetGlobalVariable@1240020004 : Codeunit 14000246;
      PrintOrder@1240020002 : Boolean;
      ExitProcess@1240020003 : Boolean;
    BEGIN
      CancelASNSend := FALSE;
      CancelInvoiceSend := FALSE;
      ExitProcess := GetBOLTradePartner(Process::"Post Sales Order");
      IF ExitProcess THEN BEGIN
        CancelASNSend := TRUE;
        CancelInvoiceSend := TRUE;
        EXIT;
      END;

      EDIRecDocHdr2."Posting Error" := TRUE;
      EDIRecDocHdr2."Posting Error Date" := TODAY;
      EDIRecDocHdr2."Document(s) Posted" := FALSE;
      COMMIT;

      PackingStation.GetPackingStation;
      ShippingSetup.GET;

      BillofLadingLine.RESET;
      BillofLadingLine.SETRANGE("Bill of Lading No.",BillOfLading."No.");
      BillofLadingLine.SETRANGE(Type,BillofLadingLine.Type::Order);
      IF BillofLadingLine.FIND('-') THEN
      REPEAT
        IF BillOfLading."No." <> BillofLadingLine."Bill of Lading No." THEN BEGIN
          BillOfLading.GET(BillofLadingLine."Bill of Lading No.");
          BillOfLading.TESTFIELD("Shipping Agent Code");
          ShippingAgent.GET(BillOfLading."Shipping Agent Code");
        END;

        IF EDITemplate."Posting Date is BOL PickupDate" THEN BEGIN
          IF BillOfLading."Pickup Date" <> 0D THEN BEGIN
            SalesHeader.GET(SalesHeader."Document Type"::Order,BillofLadingLine."No.");
            IF SalesHeader."Posting Date" <> BillOfLading."Pickup Date" THEN BEGIN
              IF SalesHeader.Status = SalesHeader.Status::Released THEN BEGIN
                EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
                EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(TRUE);
                ReleaseSalesDocument.Reopen(SalesHeader);
                EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
                SalesHeader.FIND;
                SalesHeader.VALIDATE("Posting Date",BillOfLading."Pickup Date");
                SalesHeader.MODIFY(TRUE);
                EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
                EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(TRUE);
                ReleaseSalesDocument.RUN(SalesHeader);
                EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
                SalesHeader.FIND;
              END ELSE BEGIN
                SalesHeader.VALIDATE("Posting Date",BillOfLading."Pickup Date");
                SalesHeader.MODIFY(TRUE);
              END;
            END;
          END;
        END;

        Package.RESET;
        Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        Package.SETRANGE("Source Type",BillofLadingLine."Source Type");
        Package.SETRANGE("Source Subtype",BillofLadingLine."Source Subtype");
        Package.SETRANGE("Source ID",BillofLadingLine."Source ID");
        IF Package.FIND('-') THEN BEGIN
          CLEAR(PackingControl);
          CLEAR(PackageMgt);
          PackageMgt.Initialize(PackingStation,ShippingSetup);

          PrintOrder := FALSE;
          PackingControl.TransferFromSource(
            BillofLadingLine."Source Type",BillofLadingLine."Source Subtype",BillofLadingLine."Source ID");
          IF PackingStation."Reset Order Qty. When Opened" THEN
            PackageMgt.ResetQtyToShip(PackingControl);
          IF NOT PackageMgt.CloseOrder(ShippingAgent,PackingControl,PrintOrder,FALSE,FALSE) THEN BEGIN
            IF NOT PackageMgt.CloseOrder(ShippingAgent,PackingControl,PrintOrder,TRUE,FALSE) THEN
              ERROR(Text003);
          END;
        END ELSE
          ERROR(Text001);
      UNTIL BillofLadingLine.NEXT = 0;

      EDIRecDocHdr2."Posting Error" := FALSE;
      EDIRecDocHdr2."Posting Error Date" := 0D;
      EDIRecDocHdr2."Posted Date" := TODAY;
      EDIRecDocHdr2."Posted Time" := TIME;
      EDIRecDocHdr2."Document(s) Posted" := TRUE;
      COMMIT;
    END;

    PROCEDURE UpdateSalesOrders@2(CurrBillOfLading@1240030000 : Record 14000822);
    VAR
      BillOfLadingLine@1240030002 : Record 14000823;
      SalesHdr@1240030003 : Record 36;
      OpenOrder@1240030004 : Boolean;
      Text001@1240030009 : TextConst 'ENU=Update Sales Order(s)......';
      Text002@1240030008 : TextConst 'ENU="Trade Partner No.      "';
      Text003@1240030007 : TextConst 'ENU="Bill of Lading No.    "';
      Text004@1240030006 : TextConst 'ENU="Order No.       "';
      Text005@1240030005 : TextConst 'ENU="External Document No.    "';
      DispWindow@1240020000 : Dialog;
    BEGIN
      IF GUIALLOWED THEN
        DispWindow.OPEN(
          Text001 + '\' +
          PADSTR(Text002,25,' ') + '#1###########################\' +
          PADSTR(Text003,25,' ') + '#2###########################\' +
          PADSTR(Text004,25,' ') + '#3###########################\' +
          PADSTR(Text005,25,' ') + '#4###########################\');

      WITH CurrBillOfLading DO BEGIN
        BillOfLadingLine.RESET;
        BillOfLadingLine.SETRANGE("Bill of Lading No.","No.");
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
        IF BillOfLadingLine.FIND('-') THEN
          REPEAT
            IF GUIALLOWED THEN BEGIN
              DispWindow.UPDATE(1,EDITradePartner."No.");
              DispWindow.UPDATE(2,BillOfLadingLine."Bill of Lading No.");
            END;

            SalesHdr.GET(SalesHdr."Document Type"::Order,BillOfLadingLine."No.");
            IF SalesHdr.Status = SalesHdr.Status::Released THEN BEGIN
              OpenOrder := TRUE;
              ReleaseSalesDocument.Reopen(SalesHdr);
            END ELSE
              OpenOrder := FALSE;
            IF GUIALLOWED THEN BEGIN
              DispWindow.UPDATE(3,SalesHdr."No.");
              DispWindow.UPDATE(4,SalesHdr."External Document No.");
            END;
            IF (SalesHdr."Shipping Agent Code" <> CurrBillOfLading."Shipping Agent Code") OR
               (SalesHdr."E-Ship Agent Service" <> CurrBillOfLading."Shipping Agent Service")
            THEN BEGIN
              SalesHdr.VALIDATE("Shipping Agent Code",CurrBillOfLading."Shipping Agent Code");
              SalesHdr.VALIDATE("E-Ship Agent Service",CurrBillOfLading."Shipping Agent Service");
            END;
            SalesHdr.VALIDATE("Shipment Date",CurrBillOfLading."Pickup Date");

            //
            // Add additional fields here
            //

            SalesHdr.MODIFY;
            IF OpenOrder THEN BEGIN
              ReleaseSalesDocument.RUN(SalesHdr);
              OpenOrder := FALSE;
            END;
          UNTIL BillOfLadingLine.NEXT = 0;
      END;

      IF GUIALLOWED THEN
        DispWindow.CLOSE;
    END;

    PROCEDURE BOLByPackageUpdateSalesOrder@1240020013(CurrSalesHdr@1240030000 : Record 36);
    VAR
      SalesHdr@1240030003 : Record 36;
      EDIRecDocField@1240020001 : Record 14002359;
      BillOfLading@1240020002 : Record 14000822;
      OpenOrder@1240030004 : Boolean;
      Text001@1240030009 : TextConst 'ENU=Update Sales Order(s)......';
      Text002@1240030008 : TextConst 'ENU="Trade Partner No.      "';
      Text003@1240030007 : TextConst 'ENU="Bill of Lading No.    "';
      Text004@1240030006 : TextConst 'ENU="Order No.       "';
      Text005@1240030005 : TextConst 'ENU="External Document No.    "';
      DispWindow@1240020000 : Dialog;
    BEGIN
      IF GUIALLOWED THEN
        DispWindow.OPEN(
          Text001 + '\' +
          PADSTR(Text002,25,' ') + '#1###########################\' +
          PADSTR(Text003,25,' ') + '#2###########################\' +
          PADSTR(Text004,25,' ') + '#3###########################\' +
          PADSTR(Text005,25,' ') + '#4###########################\');

      SalesHdr.GET(CurrSalesHdr."Document Type",CurrSalesHdr."No.");
      IF SalesHdr.Status = SalesHdr.Status::Released THEN BEGIN
        OpenOrder := TRUE;
        ReleaseSalesDocument.Reopen(SalesHdr);
      END ELSE
        OpenOrder := FALSE;
      IF GUIALLOWED THEN BEGIN
        DispWindow.UPDATE(3,SalesHdr."No.");
        DispWindow.UPDATE(4,SalesHdr."External Document No.");
      END;
      IF (ShippingAgentCode <> '') AND (ShippingAgentService <> '') THEN BEGIN
        IF SalesHdr."Shipping Agent Code" <> ShippingAgentCode THEN
          SalesHdr.VALIDATE("Shipping Agent Code",ShippingAgentCode);
        IF SalesHdr."E-Ship Agent Service" <> ShippingAgentService THEN
          SalesHdr.VALIDATE("E-Ship Agent Service",ShippingAgentService);
      END;

      IF EDITemplate."Posting Date is BOL PickupDate" THEN BEGIN
        EDIRecDocField.RESET;
        EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
        EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
        EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading");
        EDIRecDocField.SETRANGE("Nav Field No.",BillOfLading.FIELDNO("Pickup Date"));
        EDIRecDocField.SETFILTER("Field Date Value",'<>%1',0D);
        IF EDIRecDocField.FIND('-') THEN
          SalesHdr.VALIDATE("Shipment Date",EDIRecDocField."Field Date Value")
        ELSE BEGIN
          IF PickupDate <> 0D THEN
            SalesHdr.VALIDATE("Shipment Date",PickupDate);
        END;
      END;

        //
        // Add additional fields here
        //

      SalesHdr.MODIFY;
      IF OpenOrder THEN BEGIN
        ReleaseSalesDocument.RUN(SalesHdr);
        OpenOrder := FALSE;
      END;

      IF GUIALLOWED THEN
        DispWindow.CLOSE;
    END;

    PROCEDURE GetShipmentPackage@1240020002();
    VAR
      EDIRecDocHdr@1240030000 : Record 14002358;
      ItemNo@1240020003 : Code[20];
      ItemVariant@1240020006 : Code[20];
      PackageUCCNo@1000000000 : Code[30];
      PackageTrackingNo@1240020005 : Code[30];
      AssocInternalDocNo@1240030002 : Code[20];
      PackageNo@1240020000 : Integer;
      TotalPackageCount@1240020002 : Integer;
      PackageLineNo@1240020007 : Integer;
      ItemQty@1240020004 : Decimal;
      ShipmentLevelFound@1240020001 : Boolean;
      Text001@1240020008 : TextConst 'ENU=%1 not found on sales order %2.';
      RenumberPackages@1240020010 : Boolean;
      PackResource@1240020012 : Boolean;
    BEGIN
      CLEAR(SalesOrderArray);
      ShipmentLevelFound := FALSE;
      SegmentGroup := 0;
      PackageNo := 0;
      TotalPackageCount := 0;
      RenumberPackages := FALSE;
      TriggerFound := FALSE;

      i:= 1;

      EDIRecDocField.RESET;
      EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading Summary Line");
      EDIRecDocField.SETRANGE("Nav Field No.",BillofLadingSummaryLine.FIELDNO("Source ID"));
      IF EDIRecDocField.FIND('-') THEN
        REPEAT
          SalesOrderArray[i] := EDIRecDocField."Field Text Value";
          IF NOT SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderArray[i]) THEN
            ERROR(Text018,SalesOrderArray[i]);
          i := i + 1;
        UNTIL EDIRecDocField.NEXT = 0
      ELSE
        ERROR(Text046,EDIRecDocHdr2."Internal Doc. No.");

      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderArray[1]);
      IF SalesHeader."EDI Internal Doc. No." = '' THEN BEGIN
        EDISetup.LOCKTABLE;
        EDISetup."Last Internal Doc. No." := INCSTR(EDISetup."Last Internal Doc. No.");
        SalesHeader."EDI Internal Doc. No." := EDISetup."Last Internal Doc. No.";
        SalesHeader.MODIFY;
        EDISetup.MODIFY;
      END;
      IF GUIALLOWED THEN
        DispWindow.UPDATE(3,SalesHeader."No.");

      IF DespatchAdvice THEN BEGIN
        EDIRecDocField.RESET;
        EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
        EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
        EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading Summary Line");
        EDIRecDocField.SETRANGE("Nav Field No.",BillofLadingSummaryLine.FIELDNO("Parent Line No."));
        EDIRecDocField.SETRANGE("Field Dec. Value",1);
        IF EDIRecDocField.FIND('-') THEN
          REPEAT
            TotalPackageCount := TotalPackageCount + 1;
          UNTIL EDIRecDocField.NEXT = 0;
      END;

      IF WHSEShipAdvice THEN BEGIN
        EDIRecDocField.RESET;
        EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
        EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
        EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading Summary Line");
        EDIRecDocField.SETRANGE("Nav Field No.");
        EDIRecDocField.SETRANGE(Trigger,TRUE);
        IF EDIRecDocField.FIND('-') THEN BEGIN
          TriggerFound := TRUE;
          REPEAT
            TotalPackageCount := TotalPackageCount + 1;
          UNTIL EDIRecDocField.NEXT = 0;
        END ELSE BEGIN
          EDIRecDocField.RESET;
          EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
          EDIRecDocField.SETRANGE(Segment,'LX');
          EDIRecDocField.SETRANGE("New Segment",TRUE);
          IF EDIRecDocField.FIND('-') THEN BEGIN
            REPEAT
              TotalPackageCount := TotalPackageCount + 1;
            UNTIL EDIRecDocField.NEXT = 0;
          END;
        END;
      END;

      CASE TRUE OF
        DespatchAdvice:
          BEGIN
            EDIRecDocField.RESET;
            EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
            EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
            EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading Summary Line");
            EDIRecDocField.SETRANGE("Nav Field No.",BillofLadingSummaryLine.FIELDNO("Parent Line No."));
            EDIRecDocField.SETRANGE("Field Dec. Value",1);
          END;
        WHSEShipAdvice:
          BEGIN
            IF TriggerFound THEN BEGIN
              EDIRecDocField.RESET;
              EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
              EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
              EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading Summary Line");
              EDIRecDocField.SETRANGE("Nav Field No.");
              EDIRecDocField.SETRANGE(Trigger,TRUE);
            END ELSE BEGIN
              EDIRecDocField.RESET;
              EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
              EDIRecDocField.SETRANGE(Segment,'LX');
              EDIRecDocField.SETRANGE("New Segment",TRUE);
            END;
          END;
      END;
      IF EDIRecDocField.FIND('-') THEN
        REPEAT
          SegmentGroup := EDIRecDocField."Segment Group";
          IF LoopExist = FALSE THEN
            CreateShipAdvicePackage(TotalPackageCount,RenumberPackages,PackageNo);

          ItemNo := '';
          LastUOMCode := '';
          ItemQty := 0;
          LotNo := '';
          SerialNo := '';
          WarrantyDate := 0D;
          ExpirationDate := 0D;

          EDIRecDocField2.RESET;
          EDIRecDocField2.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
          EDIRecDocField2.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
          EDIRecDocField2.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading Summary Line");
          EDIRecDocField2.SETRANGE("Nav Field No.",14);
          EDIRecDocField2.SETRANGE("Segment Group",SegmentGroup);
          IF EDIRecDocField2.FIND('-') THEN
            REPEAT
              ItemNo :=  EDIRecDocField2."Field Text Value";
              EDIRecDocField3.RESET;
              EDIRecDocField3.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
              EDIRecDocField3.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
              EDIRecDocField3.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading Summary Line");
              EDIRecDocField3.SETRANGE(
                "Nav Field No.",BillofLadingSummaryLine.FIELDNO("Package Line Quantity"));
              EDIRecDocField3.SETRANGE("Sub Segment Group",EDIRecDocField2."Sub Segment Group");
              IF EDIRecDocField3.FIND('-') THEN
                ItemQty :=  EDIRecDocField3."Field Dec. Value";

              EDIRecDocField3.RESET;
              EDIRecDocField3.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
              EDIRecDocField3.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
              EDIRecDocField3.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading Summary Line");
              EDIRecDocField3.SETRANGE(
                "Nav Field No.",BillofLadingSummaryLine.FIELDNO("Package Line Unit of Measure"));
              EDIRecDocField3.SETRANGE("Sub Segment Group",EDIRecDocField2."Sub Segment Group");
              IF EDIRecDocField3.FIND('-') THEN
                LastUOMCode :=  EDIRecDocField3."Field Text Value";
              IF ItemNo = '' THEN
                ERROR(Text052,ItemNo,SegmentGroup);
              IF ItemQty <> 0 THEN BEGIN
                SalesLine.RESET;
                SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
                SalesLine.SETRANGE(Type,SalesLine.Type::Item);
                SalesLine.SETRANGE("Document No.",SalesHeader."No.");
                SalesLine.SETRANGE("No.",ItemNo);
                IF NOT SalesLine.FIND('-') THEN BEGIN
                  SalesLine.RESET;
                  SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
                  SalesLine.SETRANGE(Type,SalesLine.Type::Item);
                  SalesLine.SETRANGE("Document No.",SalesHeader."No.");
                    CLEAR(ItemCrossReference);
                    WITH ItemCrossReference DO BEGIN
                      RESET;
                      SETCURRENTKEY(
                        "Cross-Reference No.","Cross-Reference Type","Cross-Reference Type No.",
                        "Discontinue Bar Code");
                      SETFILTER("Cross-Reference Type",'<>%1',"Cross-Reference Type"::Vendor);
                      SETRANGE("Discontinue Bar Code",FALSE);
                      SETFILTER("Cross-Reference Type No.",'%1|%2',SalesHeader."Sell-to Customer No.",'');
                      SETRANGE("Cross-Reference No.",ItemNo);
                      IF LastUOMCode <> '' THEN
                        SETRANGE("Unit of Measure",LastUOMCode);
                      IF NOT FIND('-') THEN
                        SETRANGE("Cross-Reference Type No.",'');
                      SalesLine.SETRANGE("No.","Item No.");
                      IF NOT SalesLine.FIND('-') THEN BEGIN
                        SalesLine.RESET;
                        SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
                        SalesLine.SETRANGE(Type,SalesLine.Type::Resource);
                        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
                        SalesLine.SETRANGE("No.",ItemNo);
                        IF SalesLine.FIND('-') THEN
                          PackResource := TRUE
                        ELSE
                          ERROR(Text001,ItemNo,SalesHeader."No.");
                      END ELSE BEGIN
                        ItemNo := SalesLine."No.";
                        CrossReferenceNo := ItemCrossReference."Cross-Reference No.";
                      END;
                    END;
                END;

                ItemVariant := SalesLine."Variant Code";
                IF GUIALLOWED THEN BEGIN
                  DispWindow.UPDATE(5,ItemNo);
                  DispWindow.UPDATE(6,ItemQty);
                  DispWindow.UPDATE(4,Package."No.");
                END;

                IF LoopExist THEN
                  PackageByItemTrackingLoop(ItemNo,ItemVariant,ItemQty,RenumberPackages)
                ELSE
                  CreateShipAdvicePackageLine(ItemNo,ItemVariant,ItemQty,RenumberPackages);

                ItemNo := '';
                ItemQty := 0;
                LotNo := '';
                SerialNo := '';
                WarrantyDate := 0D;
                ExpirationDate := 0D;
              END;
            UNTIL EDIRecDocField2.NEXT = 0
          ELSE ERROR(Text047);
            CLEAR(Shipping);
            Shipping.ClosePackage(Package,FALSE);
        UNTIL EDIRecDocField.NEXT = 0
      ELSE
        ERROR(Text048);

      IF RenumberPackages THEN BEGIN
        Package.RESET;
        Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID","Location Code");
        Package.SETRANGE("Source Type",36);
        Package.SETRANGE("Source Subtype",1);
        Package.SETRANGE("Source ID",SalesHeader."No.");
        IF Package.FIND('-') THEN BEGIN
          TotalPackageCount := Package.COUNT;
            REPEAT
              IF Package.Closed THEN
                Shipping.OpenPackage(Package);
              Package."Total Packages" := TotalPackageCount;
              Package.MODIFY;
              Shipping.ClosePackage(Package,FALSE);
            UNTIL Package.NEXT = 0;
        END;
        RenumberPackages := FALSE;
      END;

      IF SalesHeader.Status = SalesHeader.Status::Released THEN
        ReleaseSalesDocument.Reopen(SalesHeader);
      IF EDITemplate."Set Qty. to Ship Pre Post Pkg." THEN
        UpdateQtyToShip;

      IF SalesHeader.Status = SalesHeader.Status::Open THEN
        ReleaseSalesDocument.RUN(SalesHeader);

      AssocInternalDocNo :=
        EDIRecordAssocDocument.RecordAssocDoc(EDIRecDocHdr2,SalesHeader,TRUE);
        IF EDIRecDocHdr.GET(AssocInternalDocNo)THEN BEGIN
          EDIRecDocHdr."ASN Processed" := TRUE;
          EDIRecDocHdr."ASN Process Date" := TODAY;
          EDIRecDocHdr."ASN Process Time" := TIME;
          EDIRecDocHdr."Document Processed" := TRUE;
          EDIRecDocHdr.MODIFY;
        END;
    END;

    PROCEDURE EvaluatePackageID@1240020000();
    VAR
      LengthCheckError@1240020000 : Boolean;
      BypassReuseCheck@1240020001 : Boolean;
      PackageIDLength@1240020002 : Integer;
    BEGIN
      IF EDIRecDocHdr2."Manual Process" THEN
        Batch := FALSE
      ELSE
        Batch := TRUE;

      IF EDIDocument."Bypass Package ID Reuse Check" THEN
        BypassReuseCheck := TRUE
      ELSE
        BypassReuseCheck := FALSE;

      LengthCheckError := FALSE;

      i := 1;
      j := 1;
      PackageFound := FALSE;
      PostedPackageFound := FALSE;
      DuplicateUCCNo := FALSE;
      CLEAR(UCCNoArray[j]);

      IF EDIDocument."Package ID Length Override" = 0 THEN
        PackageIDLength := 20
      ELSE
        PackageIDLength := EDIDocument."Package ID Length Override";

      EDIRecDocField.RESET;
      EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading Summary Line");
      EDIRecDocField.SETRANGE("Nav Field No.",BillofLadingSummaryLine.FIELDNO("UCC No."));
      IF EDIRecDocField.FIND('-') THEN
        REPEAT
          IF (NOT EDIDocument."Bypass Package ID Length Check") AND (LengthCheckError = FALSE) THEN BEGIN
            IF STRLEN(EDIRecDocField."Field Text Value") <> PackageIDLength THEN
              IF GUIALLOWED AND NOT Batch THEN BEGIN
                LengthCheckError := TRUE;
               IF NOT CONFIRM(
                  STRSUBSTNO(Text036,PackageIDLength))
                THEN
                  ERROR(Text030)
              END ELSE
                ERROR(Text030);
          END;
            UCCNoArray[j] := EDIRecDocField."Field Text Value";
            j := j + 1;
        UNTIL (EDIRecDocField.NEXT = 0) OR (LengthCheckError = TRUE);

      REPEAT
        SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderArray[i]);
        Package.RESET;
        Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID","Location Code");
        Package.SETRANGE("Source Type",36);
        Package.SETRANGE("Source Subtype",1);
        Package.SETRANGE("Source ID",SalesOrderArray[i]);
        IF Package.FIND('-') THEN BEGIN
          PackageFound := TRUE;
          REPEAT
            j := 1;
            WHILE (UCCNoArray[j] <> '') AND (DuplicateUCCNo = FALSE) DO BEGIN
              IF Package."UCC No." = UCCNoArray[j] THEN
                DuplicateUCCNo := TRUE;
              j := j + 1;
            END;
          UNTIL (Package.NEXT = 0) OR (DuplicateUCCNo = TRUE);
        END ELSE BEGIN
          PostedPackage.RESET;
          PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          PostedPackage.SETRANGE("Source Type",36);
          PostedPackage.SETRANGE("Source Subtype",1);
          PostedPackage.SETRANGE("Source ID",SalesOrderArray[i]);
          IF PostedPackage.FIND('-') THEN BEGIN
            PostedPackageFound := TRUE;
            REPEAT
              j := 1;
              WHILE (UCCNoArray[j] <> '') AND (DuplicateUCCNo = FALSE) DO BEGIN
                IF PostedPackage."UCC No." = UCCNoArray[j] THEN
                  DuplicateUCCNo := TRUE;
                  j := j + 1;
              END;
            UNTIL (PostedPackage.NEXT = 0) OR (DuplicateUCCNo = TRUE);
            QtyToShip := 0;
            SalesLine.RESET;
            SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
            SalesLine.SETRANGE("Document No.",SalesHeader."No.");
            IF SalesLine.FIND('-') THEN
              REPEAT
                QtyToShip := QtyToShip + SalesLine."Outstanding Quantity";
              UNTIL SalesLine.NEXT = 0;
            IF QtyToShip = 0 THEN
              ERROR(Text044,SalesHeader."No.");
          END;
        END;
        i := i + 1;
      UNTIL (SalesOrderArray[i] = '') OR (PackageFound = TRUE) OR (PostedPackageFound = TRUE);

      CASE EDIRecDocHdr2."ASN Transaction Type Code" OF
        '01','1':
          BEGIN
            IF (PackageFound = TRUE) AND
               (DuplicateUCCNo = TRUE AND BypassReuseCheck = FALSE)
            THEN BEGIN
              IF GUIALLOWED AND NOT Batch THEN BEGIN
                IF NOT CONFIRM(Text027 + Text038) THEN
                  ERROR(Text030)
                ELSE BEGIN
                  DeleteSalesOrderPackage;
                  EDIRecDocHdr2."ASN Error" := FALSE;
                  EDIRecDocHdr2."Data Error" := FALSE;
                  EDIRecDocHdr2.MODIFY;
                  MESSAGE(Text039,NAVBillofLadingNo);
                END;
              END ELSE
                ERROR(Text030);
            END;
            IF (PackageFound = TRUE) AND (DuplicateUCCNo = FALSE) THEN
              IF GUIALLOWED AND NOT Batch THEN BEGIN
                IF NOT CONFIRM(Text027 + Text041) THEN
                  ERROR(Text030)
                ELSE BEGIN
                  DeleteSalesOrderPackage;
                  EDIRecDocHdr2."ASN Error" := FALSE;
                  EDIRecDocHdr2."Data Error" := FALSE;
                  EDIRecDocHdr2.MODIFY;
                  MESSAGE(Text038,NAVBillofLadingNo);
                END;
              END ELSE
                ERROR(Text030);
            IF (PackageFound = FALSE) THEN
              ERROR(
                Text027 +
                Text040);
            IF (PostedPackageFound = TRUE) AND (DuplicateUCCNo = TRUE) THEN
              ERROR(Text031);
          END;
        ELSE BEGIN
          IF (EDIRecDocHdr2."ASN Transaction Type Code" = '05') OR
             (EDIRecDocHdr2."ASN Transaction Type Code" = '5') OR
             (EDIRecDocHdr2."ASN Transaction Type Code" = 'R')
          THEN
            ASNTypeCode := 'REPLACEMENT';
          IF (EDIRecDocHdr2."ASN Transaction Type Code" = '07') OR
             (EDIRecDocHdr2."ASN Transaction Type Code" = '7')
          THEN
            ASNTypeCode := 'DUPLICATE';
          IF (PackageFound = TRUE)  THEN BEGIN
            IF (DuplicateUCCNo = TRUE) AND (BypassReuseCheck = FALSE) THEN BEGIN
              IF GUIALLOWED AND NOT Batch THEN BEGIN
                IF NOT CONFIRM(STRSUBSTNO(Text026,ASNTypeCode) + Text028) THEN
                  ERROR(Text030)
                ELSE
                  DeleteSalesOrderPackage;
              END ELSE
                ERROR(Text030);
            END ELSE BEGIN
              IF GUIALLOWED AND NOT Batch THEN BEGIN
                IF NOT CONFIRM(
                  STRSUBSTNO(Text026,ASNTypeCode) + Text029)
                THEN
                  ERROR(Text030)
                ELSE
                  DeleteSalesOrderPackage;
              END ELSE
                ERROR(Text030);
            END;
          END;
          IF (PostedPackageFound = TRUE) AND
             ((DuplicateUCCNo = TRUE) AND (BypassReuseCheck = FALSE))
          THEN BEGIN
            IF GUIALLOWED AND NOT Batch THEN BEGIN
              IF NOT CONFIRM(
                STRSUBSTNO(Text024,ASNTypeCode))
              THEN
                ERROR(Text030)
            END ELSE
              ERROR(Text030);
          END;
        END;
      END;
    END;

    PROCEDURE UpdateQtyToShip@1240020001();
    VAR
      SalesLine@1240020000 : Record 37;
      SalesLine2@1240020009 : Record 37;
      Package@1240020001 : Record 14000701;
      PackageLine@1240020002 : Record 14000702;
      ItemTmp@1240020004 : TEMPORARY Record 27;
      EDITradePartner@1240020010 : Record 14002360;
      EDICustCrossRef@1240020006 : Record 14002362;
      DuplicateItemArray@1240020008 : ARRAY [50] OF Code[20];
      SalesLineQtytoShip@1240020003 : Decimal;
      DuplicateItemExist@1240020005 : Boolean;
      i@1240020007 : Integer;
    BEGIN
      IF EDITemplate."Auto. Post Shipment" THEN BEGIN
        EDITradePartner.RESET;
        EDITradePartner.SETCURRENTKEY("Customer No.");
        EDITradePartner.SETRANGE("Customer No.",SalesHeader."Sell-to Customer No.");
        IF NOT EDITradePartner.FIND('-') THEN BEGIN
          EDICustCrossRef.RESET;
          EDICustCrossRef.SETCURRENTKEY("Navision Sell To Code");
          EDICustCrossRef.SETRANGE("Navision Sell To Code",SalesHeader."Sell-to Customer No.");
          EDICustCrossRef.SETRANGE("Navision Ship To Code",SalesHeader."Ship-to Code");
          IF EDICustCrossRef.FIND('-') THEN
            IF EDITradePartner.GET(EDICustCrossRef."Trade Partner No.") THEN BEGIN
              IF EDITradePartner."Disable 3PL Post Sales Order" = FALSE THEN
                EXIT;
            END ELSE
              EXIT;
        END ELSE
          IF EDITradePartner."Disable 3PL Post Sales Order" = FALSE THEN
            EXIT;
      END;


      // Assumes item exist on Sales Line only once.

      i := 1;
      ItemTmp.RESET;
      ItemTmp.DELETEALL;

      SalesLineQtytoShip := 0;
      DuplicateItemExist := FALSE;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      IF SalesLine.FIND('-') THEN BEGIN
        REPEAT
          SalesLine2.RESET;
          SalesLine2.SETRANGE("Document Type",SalesHeader."Document Type");
          SalesLine2.SETRANGE("Document No.",SalesHeader."No.");
          SalesLine2.SETRANGE(Type,SalesLine.Type::Item);
          SalesLine2.SETRANGE("No.",SalesLine."No.");
          SalesLine2.SETRANGE("Variant Code",SalesLine."Variant Code");
          IF SalesLine2.FIND('-') THEN BEGIN
            ItemTmp.RESET;
            ItemTmp.SETRANGE("No.",SalesLine."No.");
            IF ItemTmp.FIND('-') THEN BEGIN
              DuplicateItemExist := TRUE;
              DuplicateItemArray[i] := SalesLine."No.";
              i := i + 1;
            END ELSE BEGIN
              ItemTmp.RESET;
              ItemTmp."No." := SalesLine."No.";
              ItemTmp.INSERT;
            END;
          END;
        UNTIL (SalesLine.NEXT = 0);
        IF DuplicateItemExist THEN
          EXIT;
      END;

      SalesLine.LOCKTABLE;
      SalesHeader.LOCKTABLE;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      IF SalesLine.FIND('-') THEN
        REPEAT
          SalesLine.VALIDATE("Qty. to Ship",0);
          SalesLine.MODIFY;
        UNTIL SalesLine.NEXT = 0;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      IF SalesLine.FIND('-') THEN
        REPEAT
          Package.RESET;
          Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID","Location Code");
          Package.SETRANGE("Source Type",DATABASE::"Sales Header");
          Package.SETRANGE("Source Subtype",1);
          Package.SETRANGE("Source ID",SalesHeader."No.");
          IF Package.FIND('-') THEN
            REPEAT
              PackageLine.RESET;
              PackageLine.SETRANGE("Package No.",Package."No.");
              PackageLine.SETRANGE("Source Type",DATABASE::"Sales Header");
              PackageLine.SETRANGE("Source Subtype",1);
              PackageLine.SETRANGE("Source ID",SalesHeader."No.");
              PackageLine.SETRANGE(Type,PackageLine.Type::Item);
              PackageLine.SETRANGE("No.",SalesLine."No.");
              PackageLine.SETRANGE("Variant Code",SalesLine."Variant Code");
              PackageLine.SETRANGE("Location Code",SalesHeader."Location Code");
              PackageLine.SETRANGE("Unit of Measure Code",SalesLine."Unit of Measure Code");
              IF PackageLine.FIND('-') THEN BEGIN
                SalesLineQtytoShip := 0;
                REPEAT
                  SalesLineQtytoShip := SalesLineQtytoShip + PackageLine."Quantity (Base)";
                UNTIL PackageLine.NEXT = 0;
              END;
            UNTIL Package.NEXT = 0;
          SalesLine.VALIDATE("Qty. to Ship",SalesLineQtytoShip);
          SalesLine.MODIFY;
          SalesLineQtytoShip := 0;
        UNTIL SalesLine.NEXT = 0;

      COMMIT;
    END;

    PROCEDURE SendASN@1240020003();
    VAR
      EDISendDocHdr@1240020001 : Record 14002369;
      EDIDocument2@1240020003 : Record 14002353;
      EDIASNSend@1240020000 : Codeunit 14002358;
      EDISend@1240020002 : Codeunit 14002356;
      Text001@1240020004 : TextConst 'ENU=ASN cannot be created. \Customer %1 is not set up as an EDI Trading Partner.';
      ExitProcess@1240020005 : Boolean;
    BEGIN
      IF BillOfLading."EDI ASN" THEN BEGIN
        IF CancelASNSend THEN
          EXIT;
        Process := Process::"Send ASN";
        ExitProcess := GetBOLTradePartner(Process);
        IF ExitProcess THEN
          EXIT;

        EDIASNSend.ExportASN(BillOfLading,'E_SLSASN',FALSE);

        EDISendDocHdr.RESET;
        EDISendDocHdr.SETCURRENTKEY("Navision Document","Document No.","Sent Date");
        EDISendDocHdr.SETRANGE("Document No.",BillOfLading."No.");
        EDISendDocHdr.SETRANGE("Navision Document",'E_SLSASN');
        IF EDISendDocHdr.FIND('-') THEN BEGIN
          EDIDocument2.RESET;
          EDIDocument2.SETRANGE("Trade Partner No.",EDISendDocHdr."Trade Partner No.");
          EDIDocument2.SETRANGE("Navision Document",'E_SLSASN');
          EDIDocument2.SETRANGE(Type,EDIDocument2.Type::Export);
          EDIDocument2.SETFILTER(Status,'%1|%2',EDIDocument2.Status::Test,EDIDocument2.Status::Production);
          IF EDIDocument2.FIND('-') THEN
            EDISend.ExportDoc(EDIDocument2,EDISendDocHdr,TRUE);
        END;
      END;
    END;

    PROCEDURE SendEDIInvoice@1240020004();
    VAR
      SalesInvoiceHdr@1240020001 : Record 112;
      EDISendDocHdr@1240020002 : Record 14002369;
      EDIDocument2@1240020004 : Record 14002353;
      SalesShipmentHdr@1240020010 : Record 110;
      EDISend@1240020003 : Codeunit 14002356;
      InternalDocNo@1240020000 : Code[10];
      Text001@1240020009 : TextConst 'ENU=EDI Invoice cannot be created. \Customer %1 is not set up as an EDI Trading Partner.';
      InvoiceFound@1240020011 : Boolean;
    BEGIN
      PackingStation.GetPackingStation;
      IF PackingStation."Sales Order Close Action" <>
        PackingStation."Sales Order Close Action"::"Ship and Invoice"
      THEN
        EXIT;
      IF CancelInvoiceSend THEN
        EXIT;

      IF BOLByPackage THEN BEGIN
        BillOfLadingTmp.RESET;
        IF BillOfLadingTmp.FIND('-') THEN
          REPEAT
            PostedPackage.GET(BillOfLadingTmp."No.");
            SalesShipmentHdr.GET(PostedPackage."Posted Source ID");
            IF SalesShipmentHdr."Shipment Invoice No." <> '' THEN BEGIN
              SalesInvoiceHdr.GET(SalesShipmentHdr."Shipment Invoice No.");
              InternalDocNo := SalesInvoiceHdr."EDI Internal Doc. No.";
              IF (SalesInvoiceHdr."EDI Invoice") AND (SalesInvoiceHdr."EDI Invoice Generated" = FALSE) THEN BEGIN
                InvoiceFound := TRUE;
                CreateEDIInvoice(SalesInvoiceHdr);
              END;
            END;
          UNTIL BillOfLadingTmp.NEXT = 0;
      END ELSE BEGIN
        SalesInvoiceHdr.RESET;
        SalesInvoiceHdr.SETCURRENTKEY("Invoice for Bill of Lading No.");
        SalesInvoiceHdr.SETRANGE("Invoice for Bill of Lading No.",BillOfLading."No.");
        IF SalesInvoiceHdr.FIND('-') THEN BEGIN
          InternalDocNo := SalesInvoiceHdr."EDI Internal Doc. No.";
          REPEAT
            InvoiceFound := TRUE;
            IF (SalesInvoiceHdr."EDI Invoice") AND (SalesInvoiceHdr."EDI Invoice Generated" = FALSE) THEN
              CreateEDIInvoice(SalesInvoiceHdr);
          UNTIL SalesInvoiceHdr.NEXT = 0;
        END;
      END;
      IF InvoiceFound THEN BEGIN
        EDISendDocHdr.RESET;
        EDISendDocHdr.SETCURRENTKEY("Internal Doc No.","Navision Document","Document No.",Version);
        EDISendDocHdr.SETRANGE("Internal Doc No.",InternalDocNo);
        EDISendDocHdr.SETRANGE("Navision Document",'E_SLSINV');
        EDISendDocHdr.SETRANGE("Sent Date",0D);
        IF EDISendDocHdr.FIND('-') THEN BEGIN
          EDIDocument2.RESET;
          EDIDocument2.SETRANGE("Trade Partner No.",EDISendDocHdr."Trade Partner No.");
          EDIDocument2.SETRANGE("Navision Document",'E_SLSINV');
          EDIDocument2.SETRANGE(Type,EDIDocument2.Type::Export);
          EDIDocument2.SETFILTER(Status,'%1|%2',EDIDocument2.Status::Test,EDIDocument2.Status::Production);
          IF EDIDocument2.FIND('-') THEN
            EDISend.ExportDoc(EDIDocument2,EDISendDocHdr,TRUE);
        END;
      END;
    END;

    PROCEDURE CreateEDIInvoice@1240020010(SalesInvoiceHdr@1240020000 : Record 112);
    VAR
      EDICustCrossRef@1240020002 : Record 14002362;
      EDITradePartner@1240020004 : Record 14002360;
      EDISalesInvoiceSend@1240020003 : Codeunit 14002360;
      TradePtnrFound@1240020001 : Boolean;
      Text001@1240020005 : TextConst 'ENU=Trade Partner not found for Customer %1.';
    BEGIN
      TradePtnrFound := FALSE;
      EDITradePartner.RESET;
      EDITradePartner.SETCURRENTKEY("Customer No.");
      EDITradePartner.SETRANGE("Customer No.",SalesInvoiceHdr."Bill-to Customer No.");
      IF EDITradePartner.FIND('-') THEN
        TradePtnrFound := TRUE
      ELSE BEGIN
        EDICustCrossRef.RESET;
        EDICustCrossRef.SETCURRENTKEY("Navision Sell To Code");
        EDICustCrossRef.SETRANGE(
         "Navision Sell To Code",SalesInvoiceHdr."Sell-to Customer No.");
        EDICustCrossRef.SETRANGE("Navision Ship To Code",SalesInvoiceHdr."Ship-to Code");
        IF EDICustCrossRef.FIND('-') THEN BEGIN
          EDITradePartner.GET(EDICustCrossRef."Trade Partner No.");
          TradePtnrFound := TRUE;
        END;
      END;
      IF NOT TradePtnrFound THEN
        ERROR(Text001,SalesInvoiceHdr."Sell-to Customer No.");
      IF EDITradePartner."Disable 3PL Send EDI Invoice" THEN
        EXIT;
      EDISalesInvoiceSend.ExportSalesInvoice(SalesInvoiceHdr);
    END;

    PROCEDURE DistributeShippingCharge@1240020005(CurrentBillOfLading@1000000000 : Record 14000822);
    VAR
      BillOfLadingLine@1000000001 : Record 14000823;
      SalesHeader@1000000002 : Record 36;
      SalesHeaderTmp@1000000003 : TEMPORARY Record 36;
      SalesLine@1000000004 : Record 37;
      RateShopHeader@1000000005 : Record 14000741;
      RateShopLine@1000000006 : Record 14000742;
      ShippingSetup@1000000007 : Record 14000707;
      ShippingAgent@1000000012 : Record 291;
      ReleaseSalesDocument@1240030001 : Codeunit 414;
      EShipSetGlobalVariable@1240020001 : Codeunit 14000246;
      TotalToDistribute@1000000008 : Decimal;
      TotalDistributed@1000000009 : Decimal;
      ShippingChargeDistributed@1000000010 : Decimal;
      ShippingCostDistributed@1000000011 : Decimal;
      ReleaseSalesOrder@1240030000 : Boolean;
      Text001@1240020000 : TextConst 'ENU=There are no sales orders to distribute the shipping charge on.';
      Text002@1240020002 : TextConst 'ENU=Posted Documents already exist on Bill of Lading.\Shipping charge must be distributed manually.';
      Text004@1240020003 : TextConst 'ENU=Based on the distribute cost method set in Shipping Setup, sales orders have no remaining amount to distribute.';
      ExitProcess@1240020005 : Boolean;
    BEGIN
      Process := Process::"Distribute Shipping Charge";
      ExitProcess := GetBOLTradePartner(Process);
      IF ExitProcess THEN
        EXIT;

      IF AddToOpenBOL THEN BEGIN
        IF AllowShipChargeDistribution = FALSE THEN
          ERROR(Text055);
      END;
      IF CurrentBillOfLading."Shipping Charge" = 0 THEN
        EXIT;
      IF CurrentBillOfLading."Shipping Agent Code" = '' THEN
        ERROR(Text057);

      IF EDIRecDocHdr2."Manual Process" THEN
        Batch := FALSE
      ELSE
        Batch := TRUE;

      WITH CurrentBillOfLading DO BEGIN
        ShippingSetup.GET;
        ShippingSetup.TESTFIELD("Distribute Cost");

        ShippingAgent.GET("Shipping Agent Code");

        BillOfLadingLine.RESET;
        BillOfLadingLine.SETRANGE("Bill of Lading No.","No.");
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
        BillOfLadingLine.SETFILTER("No.",'<>%1','');
        IF NOT BillOfLadingLine.FIND('-') THEN
          ERROR(Text001);

        IF AddToOpenBOL = FALSE THEN BEGIN
          BillOfLadingLine.RESET;
          BillOfLadingLine.SETRANGE("Bill of Lading No.","No.");
          BillOfLadingLine.SETFILTER(Type,'<>%1',BillOfLadingLine.Type::Order);
          BillOfLadingLine.SETFILTER("No.",'<>%1','');
          IF BillOfLadingLine.FIND('-') THEN
            ERROR(Text002);
        END;
        SalesHeaderTmp.DELETEALL;
        TotalToDistribute := 0;
        BillOfLadingLine.RESET;
        BillOfLadingLine.SETRANGE("Bill of Lading No.","No.");
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
        BillOfLadingLine.SETFILTER("No.",'<>%1','');
        IF BillOfLadingLine.FIND('-') THEN
          REPEAT
            SalesHeader.GET(SalesHeader."Document Type"::Order,BillOfLadingLine."No.");
            SalesHeaderTmp := SalesHeader;

            CLEAR(RateShopHeader);
            RateShopHeader.TransferFromSalesHeader(SalesHeader);
            IF RateShopHeader."Override Value" <> 0 THEN
              CASE ShippingSetup."Distribute Cost" OF
                ShippingSetup."Distribute Cost"::Equal:
                  SalesHeaderTmp."VAT Base Discount %" := 1;
                ShippingSetup."Distribute Cost"::"by Weight":
                  SalesHeaderTmp."VAT Base Discount %" := RateShopHeader."Override Weight";
                ShippingSetup."Distribute Cost"::"by Value":
                  SalesHeaderTmp."VAT Base Discount %" := RateShopHeader."Override Value";
                ShippingSetup."Distribute Cost"::"by Volume":
                  SalesHeaderTmp."VAT Base Discount %" := RateShopHeader."Override Volume";
              END
            ELSE
              SalesHeaderTmp."VAT Base Discount %" := 0;

            SalesHeaderTmp.INSERT;

            TotalToDistribute := TotalToDistribute + SalesHeaderTmp."VAT Base Discount %";
          UNTIL BillOfLadingLine.NEXT = 0;

        IF TotalToDistribute = 0 THEN BEGIN
          ERROR(Text004);
        END;

        TotalDistributed := 0;
        ShippingChargeDistributed := 0;
        ShippingCostDistributed := 0;
        SalesHeaderTmp.FIND('-');
        REPEAT
          RateShopLine."Shipping Agent Code" := "Shipping Agent Code";
          RateShopLine."Shipping Agent Service" := "Shipping Agent Service";
          RateShopLine."World Wide Service" := "World Wide Service";

          IF TotalDistributed + SalesHeaderTmp."VAT Base Discount %" < TotalToDistribute THEN BEGIN
            RateShopLine."Shipping Charge" :=
              ROUND("Shipping Charge" * (SalesHeaderTmp."VAT Base Discount %" / TotalToDistribute));
            RateShopLine."Shipping Cost" :=
              ROUND("Shipping Cost" * (SalesHeaderTmp."VAT Base Discount %" / TotalToDistribute));
          END ELSE BEGIN
            RateShopLine."Shipping Charge" := "Shipping Charge" - ShippingChargeDistributed;
            RateShopLine."Shipping Cost" := "Shipping Cost" - ShippingCostDistributed;
          END;

          "Cost On Documents" := TRUE;
          MODIFY;

          SalesLine.LOCKTABLE;
          SalesHeader.LOCKTABLE;
          SalesHeader.GET(SalesHeaderTmp."Document Type",SalesHeaderTmp."No.");

          IF SalesHeader.Status = SalesHeader.Status::Released THEN BEGIN
            EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
            EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(TRUE);
            ReleaseSalesDocument.Reopen(SalesHeader);
            EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);

            ReleaseSalesOrder := TRUE;
          END ELSE
            ReleaseSalesOrder := FALSE;

          SalesLine.RESET;
          SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
          SalesLine.SETRANGE("Document No.",SalesHeader."No.");
          SalesLine.SETRANGE("Shipping Charge",TRUE);
          SalesLine.SETRANGE("Quantity Shipped",0);
          SalesLine.SETFILTER("Outstanding Quantity",'>%1',0);
          SalesLine.SETRANGE("Shipping Charge BOL No.","No.");
          SalesLine.DELETEALL(TRUE);

          IF "Free Freight" OR SalesHeader."Free Freight" THEN BEGIN
            IF NOT SalesHeader."No Free Freight Lines on Order" THEN
              Shipping.WriteShipChargeSalesHeader(
                SalesHeader,ShippingAgent,RateShopLine."Shipping Charge",RateShopLine."Shipping Cost",
                0,RateShopLine."Shipping Cost",FALSE,"No.");
          END ELSE
            Shipping.WriteShipChargeSalesHeader(
              SalesHeader,ShippingAgent,RateShopLine."Shipping Charge",RateShopLine."Shipping Cost",
              RateShopLine."Shipping Charge",RateShopLine."Shipping Cost",FALSE,"No.");

          IF ReleaseSalesOrder THEN BEGIN
            EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
            EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(TRUE);
            ReleaseSalesDocument.RUN(SalesHeader);
            EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
          END;

          TotalDistributed := TotalDistributed + SalesHeaderTmp."VAT Base Discount %";
          ShippingChargeDistributed := ShippingChargeDistributed + RateShopLine."Shipping Charge";
          ShippingCostDistributed := ShippingCostDistributed + RateShopLine."Shipping Cost";
        UNTIL SalesHeaderTmp.NEXT = 0;
      END;

      COMMIT;
    END;

    PROCEDURE GetNextShippingCharge@1240020007();
    BEGIN
      EDIRecDocField.RESET;
      EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading");
      EDIRecDocField.SETRANGE("Nav Field No.",BillOfLading.FIELDNO("Shipping Charge"));
      IF EDIRecDocField.FIND('-') THEN BEGIN
        BillOfLading."Shipping Charge" := EDIRecDocField."Field Dec. Value";
        BillOfLading.MODIFY;
      END;
    END;

    PROCEDURE GetBOLTradePartner@1240020008(Process@1240020000 : ' ,Distribute Shipping Charge,Post Sales Order,Send ASN') ExitProcess : Boolean;
    VAR
      EDITradePartner@1240020003 : Record 14002360;
      EDICustCrossRef@1240020002 : Record 14002362;
      Customer@1240020004 : Record 18;
      TradePtnrFound@1240020001 : Boolean;
    BEGIN
      TradePtnrFound := FALSE;
      EDITradePartner.RESET;
      EDITradePartner.SETCURRENTKEY("Customer No.");
      EDITradePartner.SETRANGE("Customer No.",BillOfLading."Ship-to No.");
      IF EDITradePartner.FIND('-') THEN
        TradePtnrFound := TRUE
      ELSE BEGIN
        EDICustCrossRef.RESET;
        EDICustCrossRef.SETCURRENTKEY("Navision Sell To Code");
        EDICustCrossRef.SETRANGE("Navision Sell To Code",BillOfLading."Ship-to No.");
        EDICustCrossRef.SETRANGE("Navision Ship To Code",BillOfLading."Ship-to Code");
        IF EDICustCrossRef.FIND('-') THEN BEGIN
          EDITradePartner.GET(EDICustCrossRef."Trade Partner No.");
          TradePtnrFound := TRUE;
        END;
      END;
      IF TradePtnrFound THEN BEGIN
        CASE Process OF
          Process::"Distribute Shipping Charge":
            EXIT(EDITradePartner."Disable 3PL Dist. Ship Charge");
          Process::"Post Sales Order":
            EXIT(EDITradePartner."Disable 3PL Post Sales Order");
          Process::"Send ASN":
            EXIT(EDITradePartner."Disable 3PL Send ASN");
        END;
      END ELSE BEGIN
        IF Process <> Process::"Send ASN" THEN BEGIN
          IF Customer.GET(BillOfLading."Ship-to No.") THEN
            CASE Process OF
              Process::"Distribute Shipping Charge":
                EXIT(Customer."Disable 3PL Dist. Ship Charge");
              Process::"Post Sales Order":
                EXIT(Customer."Disable 3PL Post Sales Order");
            END
          ELSE
            EXIT(FALSE);
        END ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE CombineShipmentInvoices@1240020011(BillofLading@1240020000 : Record 14000822);
    VAR
      SalesShipmentHeader@1240020002 : Record 110;
      CombineShipments@1240020001 : Report 295;
    BEGIN
      SalesShipmentHeader.RESET;
      SalesShipmentHeader.SETRANGE("Bill of Lading No.",BillofLading."No.");
      IF BillofLading."Ship-to Code" <> '' THEN
        SalesShipmentHeader.SETRANGE("Ship-to Code",BillofLading."Ship-to Code");

      CLEAR(CombineShipments);
      CombineShipments.InitializeRequest(WORKDATE,WORKDATE,TRUE,TRUE,FALSE,FALSE);
      CombineShipments.SetHideDialog(TRUE);
      CombineShipments.USEREQUESTPAGE(FALSE);
      CombineShipments.SETTABLEVIEW(SalesShipmentHeader);
      CombineShipments.RUN;
    END;

    PROCEDURE GetBOLRequirement@1240020012() : Boolean;
    VAR
      SalesHeader@1240020000 : Record 36;
      PackingRule@1240020001 : Record 14000715;
    BEGIN
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderArray[1]);
      PackingRule.GetPackingRule(
        Package."Ship-to Type"::Customer,SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code");
      IF (PackingRule."ASN Summary Type" = PackingRule."ASN Summary Type"::" ") AND
         (PackingRule."Auto Bill of Lading When Ship" = FALSE) AND
         (PackingRule."Add to Open Bill of Lading" = FALSE)
      THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE NonEDIOrderPostShipment@1240020017();
    VAR
      PackingStation@1240020000 : Record 14000709;
      ShippingSetup@1240020005 : Record 14000707;
      PackingControl@1240020006 : Record 14000717;
      ShippingAgent@1240020009 : Record 291;
      PackingRule@1240020010 : Record 14000715;
      PackageMgt@1240020007 : Codeunit 14000702;
      CloseOrderAction@1240020001 : Boolean;
      PrintOrder@1240020008 : Boolean;
      i@1240020002 : Integer;
      Text001@1240020004 : TextConst 'ENU=No Packages Found';
      Text003@1240020003 : TextConst 'ENU=Error Closing Document';
    BEGIN
      ShippingSetup.GET;
      PackingStation.GetPackingStation;
      IF PackingStation."Sales Order Close Action" <>
        PackingStation."Sales Order Close Action"::" "
      THEN
        CloseOrderAction := TRUE;

      IF EDITemplate."Update Sales Order From ASN" THEN
        NonEDIOrderUpdateSalesOrder;

      i := 1;
      IF EDITemplate."Auto. Process 3PL Ship Notice" THEN BEGIN
        IF (EDITemplate."Auto. Post Shipment") THEN
          IF CloseOrderAction THEN BEGIN
            WHILE SalesOrderArray[i] <> '' DO BEGIN
              SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderArray[i]);
              Package.RESET;
              Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
              Package.SETRANGE("Source Type",36);
              Package.SETRANGE("Source Subtype",1);
              Package.SETRANGE("Source ID",SalesHeader."No.");
              IF Package.FIND('-') THEN BEGIN
                CLEAR(PackingControl);
                CLEAR(PackageMgt);
                PackageMgt.Initialize(PackingStation,ShippingSetup);

                PrintOrder := FALSE;
                PackingControl.TransferFromSource(
                  Package."Source Type",Package."Source Subtype",Package."Source ID");
                IF PackingStation."Reset Order Qty. When Opened" THEN
                  PackageMgt.ResetQtyToShip(PackingControl);
                IF NOT PackageMgt.CloseOrder(ShippingAgent,PackingControl,PrintOrder,FALSE,FALSE) THEN BEGIN
                  IF NOT PackageMgt.CloseOrder(ShippingAgent,PackingControl,PrintOrder,TRUE,FALSE) THEN
                    ERROR(Text003);
                END;
                PackingRule.GetPackingRule(
                  Package."Ship-to Type"::Customer,SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code");
              END ELSE
                ERROR(Text001);
              i := i + 1;
            END;
          END ELSE
            ERROR(Text009,PackingStation.Code);
      END;
      EDIRecDocHdr2."Posting Error" := FALSE;
      EDIRecDocHdr2."Posting Error Date" := 0D;
      EDIRecDocHdr2."Posted Date" := TODAY;
      EDIRecDocHdr2."Posted Time" := TIME;
      EDIRecDocHdr2."Document(s) Posted" := TRUE;
      COMMIT;
    END;

    PROCEDURE NonEDIOrderUpdateSalesOrder@1240020015();
    VAR
      SalesHdr@1240020000 : Record 36;
      ShippingAgent@1240020002 : Record 291;
      EShipAgentService@1240020003 : Record 14000708;
      EShipSetGlobalVariable@1240020009 : Codeunit 14000246;
      NewShippingAgent@1240020004 : Code[10];
      NewShippingAgentService@1240020005 : Code[30];
      i@1240020001 : Integer;
      OpenOrder@1240020006 : Boolean;
      Text001@1240020011 : TextConst 'ENU=Update Sales Order(s)......';
      Text002@1240020010 : TextConst 'ENU="Trade Partner No.      "';
      Text003@1240020008 : TextConst 'ENU="Order No.       "';
      Text004@1240020007 : TextConst 'ENU="External Document No.    "';
    BEGIN
      IF GUIALLOWED THEN
        DispWindow.OPEN(
          Text001 + '\' +
          PADSTR(Text002,25,' ') + '#1###########################\' +
          PADSTR(Text003,25,' ') + '#2###########################\' +
          PADSTR(Text004,25,' ') + '#3###########################\');

      IF (ShippingAgentCode = '') AND (ShippingAgentService = '') THEN
        EXIT;

      i := 1;
      WHILE SalesOrderArray[i] <> '' DO BEGIN
        SalesHdr.GET(SalesHeader."Document Type"::Order,SalesOrderArray[i]);
        IF GUIALLOWED THEN BEGIN
          DispWindow.UPDATE(1,EDITradePartner."No.");
          DispWindow.UPDATE(2,SalesHeader."No.");
          DispWindow.UPDATE(3,SalesHdr."External Document No.");
        END;

        IF SalesHdr.Status = SalesHdr.Status::Released THEN BEGIN
          OpenOrder := TRUE;
          EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
          EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(TRUE);
          ReleaseSalesDocument.Reopen(SalesHdr);
          EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
        END ELSE
          OpenOrder := FALSE;
        IF (ShippingAgentCode = '') THEN
          NewShippingAgent := SalesHdr."Shipping Agent Code"
        ELSE BEGIN
          ShippingAgent.GET(ShippingAgentCode);
          NewShippingAgent := ShippingAgentCode;
        END;
        IF ShippingAgentService = '' THEN
          NewShippingAgent := SalesHeader."E-Ship Agent Service"
        ELSE BEGIN
          EShipAgentService.GET(NewShippingAgent,ShippingAgentService);
          NewShippingAgentService := ShippingAgentService
        END;
        IF SalesHdr."Shipping Agent Code" <> NewShippingAgent THEN
          SalesHdr.VALIDATE("Shipping Agent Code",NewShippingAgent);
        IF SalesHdr."E-Ship Agent Service" <> NewShippingAgentService THEN
          SalesHdr.VALIDATE("E-Ship Agent Service",NewShippingAgentService);

        //
        // Add additional fields here
        //

        SalesHdr.MODIFY;
        IF OpenOrder THEN BEGIN
          EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
          EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(TRUE);
          ReleaseSalesDocument.RUN(SalesHdr);
          EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
          OpenOrder := FALSE;
        END;
        i := i + 1;
      END;
      IF GUIALLOWED THEN
        DispWindow.CLOSE;
    END;

    PROCEDURE CreateShipAdvicePackage@1240020018(TotalPackageCount@1240020004 : Integer;VAR RenumberPackages@1240020001 : Boolean;VAR PackageNo@1240020002 : Integer);
    VAR
      AddtoExistingPackage@1240020000 : Boolean;
    BEGIN
      EDIRecDocField2.RESET;
      EDIRecDocField2.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocField2.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocField2.SETRANGE("NAV Table No.",DATABASE::"Bill of Lading Summary Line");
      EDIRecDocField2.SETRANGE("Nav Field No.");
      EDIRecDocField2.SETRANGE("Segment Group",EDIRecDocField."Segment Group");
      IF EDIRecDocField2.FIND('-') THEN
        REPEAT
          CASE EDIRecDocField2."Nav Field No." OF
            BillofLadingSummaryLine.FIELDNO("UCC No."):
              BEGIN
                PackageUCCNo := '';
                PackageUCCNo := EDIRecDocField2."Field Text Value";
              END;
            BillofLadingSummaryLine.FIELDNO("External Tracking No."):
              BEGIN
                PackageTrackingNo := '';
                PackageTrackingNo := EDIRecDocField2."Field Text Value";
              END;
          END;
        UNTIL EDIRecDocField2.NEXT = 0;

      AddtoExistingPackage := FALSE;
      IF PackageUCCNo <> '' THEN BEGIN
        Package.RESET;
        Package.SETCURRENTKEY("UCC No.");
        Package.SETRANGE("UCC No.",PackageUCCNo);
        Package.SETRANGE("Source Type",36);
        Package.SETRANGE("Source Subtype",1);
        Package.SETRANGE("Source ID",SalesHeader."No.");
        IF Package.FIND('-') THEN BEGIN
          AddtoExistingPackage := TRUE;
          IF NOT RenumberPackages THEN
            RenumberPackages := TRUE;
        END;
      END;
      IF PackageTrackingNo <> '' THEN BEGIN
        Package.RESET;
        Package.SETCURRENTKEY("External Tracking No.");
        Package.SETRANGE("External Tracking No.",PackageTrackingNo);
        Package.SETRANGE("UCC No.",PackageUCCNo);
        Package.SETRANGE("Source Type",36);
        Package.SETRANGE("Source Subtype",1);
        Package.SETRANGE("Source ID",SalesHeader."No.");
        IF Package.FIND('-') THEN BEGIN
          AddtoExistingPackage := TRUE;
          IF NOT RenumberPackages THEN
            RenumberPackages := TRUE;
        END;
      END;

      IF NOT AddtoExistingPackage THEN BEGIN
        PackageNo := PackageNo + 1;
        Package.RESET;
        Package.INIT;
        Package.VALIDATE(Package."No.",'');
        Package.INSERT(TRUE);
        Package."Ship-to Type" := Package."Ship-to Type"::Customer;
        Package.VALIDATE("Ship-to No.",SalesHeader."Sell-to Customer No.");
        Package.VALIDATE("Ship-to Code",SalesHeader."Ship-to Code");
        Package."Source Type" := 36;
        Package."Source Subtype" := 1;
        Package."Source ID" := SalesHeader."No.";
        Package.VALIDATE("Location Code",SalesHeader."Location Code");
        IF MapGenCrossRef THEN BEGIN
          Package.VALIDATE("Shipping Agent Code",ShippingAgentCode);
          Package.VALIDATE("Shipping Agent Service",ShippingAgentService);
        END ELSE BEGIN
          IF (ShippingAgentCode <> '') AND (ShippingAgentCode <> '') THEN BEGIN
            Package.VALIDATE("Shipping Agent Code",ShippingAgentCode);
            Package.VALIDATE("Shipping Agent Service",ShippingAgentService);
          END ELSE BEGIN
            Package.VALIDATE("Shipping Agent Code",SalesHeader."Shipping Agent Code");
            Package.VALIDATE("Shipping Agent Service",SalesHeader."E-Ship Agent Service");
          END;
        END;
        Package.VALIDATE("UCC No.",PackageUCCNo);
        Package.VALIDATE("External Tracking No.",PackageTrackingNo);
        Package."Package No." := PackageNo;
        Package."Total Packages" := TotalPackageCount;
        Package."Packing Date" := TODAY;
        Package."Pickup Date" := PickupDate;
        Package."External Document No." := SalesHeader."External Document No.";
        MapPackageHdrFields(EDIRecDocField."Segment Group");
        Package.MODIFY(TRUE);
      END;
    END;

    PROCEDURE CreateShipAdvicePackageLine@1240020022(ItemNo@1240020003 : Code[20];ItemVariant@1240020004 : Code[10];ItemQty@1240020006 : Decimal;VAR RenumberPackages@1240020007 : Boolean);
    VAR
      AddtoExistingPackage@1240020000 : Boolean;
      PackageLineNo@1240020001 : Integer;
      PackResource@1240020002 : Boolean;
      CumulativeQty@1240020005 : Decimal;
    BEGIN
      EDIRecDocField4.RESET;
      EDIRecDocField4.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocField4.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocField4.SETRANGE("NAV Table No.",DATABASE::"Package Line");
      EDIRecDocField4.SETRANGE("Nav Field No.");
      EDIRecDocField4.SETRANGE("Segment Group",EDIRecDocField."Segment Group");
      EDIRecDocField4.SETRANGE("Sub Segment Group",EDIRecDocField2."Sub Segment Group");
      IF EDIRecDocField4.FIND('-') THEN
        REPEAT
          CASE EDIRecDocField4."Nav Field No." OF
            PackageLine.FIELDNO("Serial No."):
              SerialNo := EDIRecDocField4."Field Text Value";
            PackageLine.FIELDNO("Lot No."):
              LotNo := EDIRecDocField4."Field Text Value";
            PackageLine.FIELDNO("Warranty Date"):
              WarrantyDate := EDIRecDocField4."Field Date Value";
            PackageLine.FIELDNO("Expiration Date"):
              ExpirationDate := EDIRecDocField4."Field Date Value";
          END;
        UNTIL EDIRecDocField4.NEXT = 0;

      IF AddtoExistingPackage THEN
        IF Package.Closed THEN
          Shipping.OpenPackage(Package);
      PackageLine.RESET;
      PackageLine.SETRANGE("Package No.",Package."No.");
      IF PackageLine.FIND('+') THEN
        PackageLineNo := PackageLine."Line No." + 10000
      ELSE
        PackageLineNo := 10000;
      PackageLine.INIT;
      CLEAR(PackageLine);
      PackageLine.RESET;
      IF PackResource THEN
        PackageLine.SETRANGE(Type,PackageLine.Type::Resource)
      ELSE
        PackageLine.SETRANGE(Type,PackageLine.Type::Item);
      PackageLine.SETRANGE("Package No.",Package."No.");
      PackageLine.SETRANGE("No.",ItemNo);
      PackageLine.SETRANGE("Variant Code",ItemVariant);
      IF (CrossReferenceNo <> '') AND (LastUOMCode <> '') THEN
        PackageLine.SETRANGE("Unit of Measure Code",LastUOMCode)
      ELSE
        PackageLine.SETRANGE("Unit of Measure Code",SalesLine."Unit of Measure Code");
      PackageLine.SETRANGE("Lot No.",LotNo);
      PackageLine.SETRANGE("Serial No.",SerialNo);
      IF PackageLine.FIND('-') THEN BEGIN
        CumulativeQty := 0;
        CumulativeQty := PackageLine.Quantity + ItemQty;
        PackageLine.VALIDATE(Quantity,CumulativeQty);
        PackageLine.MODIFY(TRUE);
      END ELSE BEGIN
        CLEAR(PackageLine);
        PackageLine."Package No." := Package."No.";
        PackageLine."Line No." := PackageLineNo;
        PackageLine.INSERT(TRUE);
        IF PackResource THEN
          PackageLine.VALIDATE(Type,PackageLine.Type::Resource)
        ELSE
          PackageLine.VALIDATE(Type,PackageLine.Type::Item);
        PackageLine.VALIDATE("No.",ItemNo);
        PackageLine.VALIDATE("Variant Code",ItemVariant);
        PackageLine.VALIDATE(Quantity,ItemQty);
        IF (CrossReferenceNo <> '') AND (LastUOMCode <> '') THEN
          PackageLine.VALIDATE("Unit of Measure Code",LastUOMCode)
        ELSE
          PackageLine.VALIDATE("Unit of Measure Code",SalesLine."Unit of Measure Code");
        PackageLine.VALIDATE("Lot No.",LotNo);
        PackageLine.VALIDATE("Serial No.",SerialNo);
        PackageLine.VALIDATE("Expiration Date",ExpirationDate);
        PackageLine.VALIDATE("Warranty Date",WarrantyDate);
        PackageLine.MODIFY(TRUE);
      END;
    END;

    PROCEDURE RepeatSegmentMappingCheck@1240020019() : Boolean;
    VAR
      EDISegment@1240020000 : Record 14002354;
      EDIRecDocField@1240020001 : Record 14002359;
    BEGIN
      EDISegment.RESET;
      EDISegment.SETRANGE("Trade Partner No.",EDIDocument."Trade Partner No.");
      EDISegment.SETRANGE("Navision Document",EDIDocument."Navision Document");
      EDISegment.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
      EDISegment.SETRANGE(Version,EDIDocument.Version);
      EDISegment.SETRANGE("Repeat Segment",TRUE);
      IF EDISegment.FIND('-') THEN BEGIN
        EDIRecDocField.RESET;
        EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
        EDIRecDocField.SETRANGE(Segment,EDISegment.Segment);
        EDIRecDocField.SETFILTER("Segment Group",'>%1',0);
        EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"Package Line");
        EDIRecDocField.SETRANGE("Nav Field No.",PackageLine.FIELDNO("Serial No."));
        IF EDIRecDocField.FIND('-') THEN
          EXIT(TRUE)
        ELSE BEGIN
          EDIRecDocField.SETRANGE("Nav Field No.");
          EDIRecDocField.SETRANGE("Nav Field No.",PackageLine.FIELDNO("Lot No."));
          IF EDIRecDocField.FIND('=') THEN
            EXIT(TRUE)
          ELSE
            EXIT(FALSE);
        END;
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE PackageByItemTrackingLoop@1240020014(ItemNo@1240020003 : Code[20];ItemVariant@1240020004 : Code[20];ItemQty@1240020007 : Decimal;VAR RenumberPackages@1240020005 : Boolean);
    VAR
      Package2@1240020010 : Record 14000701;
      PackageLineNo@1240020000 : Integer;
      CumulativeQty@1240020006 : Decimal;
      PackageNo@1240020008 : Integer;
      TotalPackageCount@1240020009 : Integer;
      PackResource@1240020002 : Boolean;
      AddtoExistingPackage@1240020001 : Boolean;
    BEGIN
      EDIRecDocField4.RESET;
      EDIRecDocField4.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocField4.SETRANGE("Segment Group",EDIRecDocField."Segment Group");
      EDIRecDocField4.SETRANGE("Sub Segment Group",EDIRecDocField2."Sub Segment Group");
      IF EDIRecDocField4.FIND('-') THEN BEGIN
        REPEAT
          AddtoExistingPackage := FALSE;
          CASE EDIRecDocField4."NAV Table No." OF
            DATABASE::Package:
              CASE EDIRecDocField4."Nav Field No." OF
                Package.FIELDNO("UCC No."):
                  PackageUCCNo := EDIRecDocField4."Field Text Value";
                Package.FIELDNO("External Tracking No."):
                  PackageTrackingNo := EDIRecDocField4."Field Text Value";
              END;
            DATABASE::"Package Line":
              CASE EDIRecDocField4."Nav Field No." OF
                PackageLine.FIELDNO("Serial No."):
                 SerialNo := EDIRecDocField4."Field Text Value";
                PackageLine.FIELDNO("Lot No."):
                  LotNo := EDIRecDocField4."Field Text Value";
                PackageLine.FIELDNO("Warranty Date"):
                  WarrantyDate := EDIRecDocField4."Field Date Value";
                PackageLine.FIELDNO("Expiration Date"):
                  ExpirationDate := EDIRecDocField4."Field Date Value";
              END;
          END;
          IF EDIRecDocField4. Trigger THEN BEGIN
            IF PackageUCCNo <> '' THEN BEGIN
              Package2.RESET;
              Package2.SETCURRENTKEY("UCC No.");
              Package2.SETRANGE("UCC No.",PackageUCCNo);
              Package2.SETRANGE("Source Type",36);
              Package2.SETRANGE("Source Subtype",1);
              Package2.SETRANGE("Source ID",SalesHeader."No.");
              IF Package2.FIND('-') THEN BEGIN
                Package.GET(Package2."No.");
                AddtoExistingPackage := TRUE;
                IF NOT RenumberPackages THEN
                  RenumberPackages := TRUE;
              END;
            END;
            IF PackageTrackingNo <> '' THEN BEGIN
              Package2.RESET;
              Package2.SETCURRENTKEY("External Tracking No.");
              Package2.SETRANGE("External Tracking No.",PackageTrackingNo);
              Package2.SETRANGE("UCC No.",PackageUCCNo);
              Package2.SETRANGE("Source Type",36);
              Package2.SETRANGE("Source Subtype",1);
              Package2.SETRANGE("Source ID",SalesHeader."No.");
              IF Package2.FIND('-') THEN BEGIN
                Package.GET(Package2."No.");
                AddtoExistingPackage := TRUE;
                IF NOT RenumberPackages THEN
                  RenumberPackages := TRUE;
              END;
            END;

            IF NOT AddtoExistingPackage THEN BEGIN
              PackageNo := PackageNo + 1;
              Package.RESET;
              Package.INIT;
              Package.VALIDATE(Package."No.",'');
              Package.INSERT(TRUE);
              Package."Ship-to Type" := Package."Ship-to Type"::Customer;
              Package.VALIDATE("Ship-to No.",SalesHeader."Sell-to Customer No.");
              Package.VALIDATE("Ship-to Code",SalesHeader."Ship-to Code");
              Package."Source Type" := 36;
              Package."Source Subtype" := 1;
              Package."Source ID" := SalesHeader."No.";
              Package.VALIDATE("Location Code",SalesHeader."Location Code");
              IF MapGenCrossRef THEN BEGIN
                Package.VALIDATE("Shipping Agent Code",ShippingAgentCode);
                Package.VALIDATE("Shipping Agent Service",ShippingAgentService);
              END ELSE BEGIN
                IF (ShippingAgentCode <> '') AND (ShippingAgentCode <> '') THEN BEGIN
                  Package.VALIDATE("Shipping Agent Code",ShippingAgentCode);
                  Package.VALIDATE("Shipping Agent Service",ShippingAgentService);
                END ELSE BEGIN
                  Package.VALIDATE("Shipping Agent Code",SalesHeader."Shipping Agent Code");
                  Package.VALIDATE("Shipping Agent Service",SalesHeader."E-Ship Agent Service");
                END;
              END;
              Package.VALIDATE("UCC No.",PackageUCCNo);
              Package.VALIDATE("External Tracking No.",PackageTrackingNo);
              Package."Package No." := PackageNo;
              Package."Total Packages" := TotalPackageCount;
              Package."Packing Date" := TODAY;
              Package."Pickup Date" := PickupDate;
              Package."External Document No." := SalesHeader."External Document No.";
              MapPackageHdrFields(EDIRecDocField."Segment Group");
              Package.MODIFY(TRUE);
            END;

            IF AddtoExistingPackage THEN
              IF Package.Closed THEN
                Shipping.OpenPackage(Package);
            PackageLine.RESET;
            PackageLine.SETRANGE("Package No.",Package."No.");
            IF PackageLine.FIND('+') THEN
               PackageLineNo := PackageLine."Line No." + 10000
            ELSE
              PackageLineNo := 10000;
            PackageLine.INIT;
            CLEAR(PackageLine);
            PackageLine.RESET;
            IF PackResource THEN
              PackageLine.SETRANGE(Type,PackageLine.Type::Resource)
            ELSE
              PackageLine.SETRANGE(Type,PackageLine.Type::Item);
            PackageLine.SETRANGE("Package No.",Package."No.");
            PackageLine.SETRANGE("No.",ItemNo);
            PackageLine.SETRANGE("Variant Code",ItemVariant);
            IF (CrossReferenceNo <> '') AND (LastUOMCode <> '') THEN
              PackageLine.SETRANGE("Unit of Measure Code",LastUOMCode)
            ELSE
              PackageLine.SETRANGE("Unit of Measure Code",SalesLine."Unit of Measure Code");
            PackageLine.SETRANGE("Lot No.",LotNo);
            PackageLine.SETRANGE("Serial No.",SerialNo);
            IF PackageLine.FIND('-') THEN BEGIN
              CumulativeQty := 0;
              CumulativeQty := PackageLine.Quantity + ItemQty;
              PackageLine.VALIDATE(Quantity,CumulativeQty);
              PackageLine.MODIFY(TRUE);
            END ELSE BEGIN
              CLEAR(PackageLine);
              PackageLine."Package No." := Package."No.";
              PackageLine."Line No." := PackageLineNo;
              PackageLine.INSERT(TRUE);
              IF PackResource THEN
                PackageLine.VALIDATE(Type,PackageLine.Type::Resource)
              ELSE
                PackageLine.VALIDATE(Type,PackageLine.Type::Item);
              PackageLine.VALIDATE("No.",ItemNo);
              PackageLine.VALIDATE("Variant Code",ItemVariant);
              IF SerialNo <> '' THEN
                PackageLine.VALIDATE(Quantity,1)
              ELSE
                PackageLine.VALIDATE(Quantity,ItemQty);
              IF (CrossReferenceNo <> '') AND (LastUOMCode <> '') THEN
                PackageLine.VALIDATE("Unit of Measure Code",LastUOMCode)
              ELSE
                PackageLine.VALIDATE("Unit of Measure Code",SalesLine."Unit of Measure Code");
              PackageLine.VALIDATE("Lot No.",LotNo);
              PackageLine.VALIDATE("Serial No.",SerialNo);
              PackageLine.VALIDATE("Expiration Date",ExpirationDate);
              PackageLine.VALIDATE("Warranty Date",WarrantyDate);
              PackageLine.MODIFY(TRUE);
            END;
            SerialNo := '';
            WarrantyDate := 0D;
          END;
        UNTIL EDIRecDocField4.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

