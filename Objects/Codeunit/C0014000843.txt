OBJECT Codeunit 14000843 Label Substitute
{
  OBJECT-PROPERTIES
  {
    Date=06/15/21;
    Time=[ 6:16:13 AM];
    Modified=Yes;
    Version List=SE0.60.12.01,001,TPZ3198,002;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Field@1240020000 : Record 2000000041;
      FieldValue@1240020001 : ARRAY [21] OF Codeunit 14000844;
      PostedDoc@1240020002 : Boolean;
      Text001@1001 : TextConst 'ENU=No';

    PROCEDURE CountryRegion_9@9(CountryRegion@1240020000 : Record 9;RecordNo@1240020001 : Integer);
    BEGIN
      // Country/Region
      FieldValue[RecordNo + 1].CountryRegion_9(CountryRegion);
    END;

    PROCEDURE Location_14@14(Location@1240020000 : Record 14;RecordNo@1240020001 : Integer);
    BEGIN
      // Location
      FieldValue[RecordNo + 1].Location_14(Location);
    END;

    PROCEDURE Customer_18@18(Customer@1240020000 : Record 18;RecordNo@1240020001 : Integer);
    BEGIN
      // Customer
      FieldValue[RecordNo + 1].Customer_18(Customer);
    END;

    PROCEDURE Vendor_23@23(Vendor@1240020000 : Record 23;RecordNo@1240020001 : Integer);
    BEGIN
      // Vendor
      FieldValue[RecordNo + 1].Vendor_23(Vendor);
    END;

    PROCEDURE Item_27@27(Item@1240020000 : Record 27;RecordNo@1240020001 : Integer);
    BEGIN
      // Item
      FieldValue[RecordNo + 1].Item_27(Item);
    END;

    PROCEDURE SalesHeader_36@36(SalesHeader@1240020000 : Record 36;RecordNo@1240020001 : Integer);
    BEGIN
      // Sales Header
      FieldValue[RecordNo + 1].SalesHeader_36(SalesHeader);
    END;

    PROCEDURE SalesLine_37@37(SalesLine@1240020000 : Record 37;RecordNo@1240020001 : Integer);
    BEGIN
      // Sales Line
      FieldValue[RecordNo + 1].SalesLine_37(SalesLine);
    END;

    PROCEDURE PurchaseHeader_38@38(PurchaseHeader@1240020000 : Record 38;RecordNo@1240020001 : Integer);
    BEGIN
      // Purchase Header
      FieldValue[RecordNo + 1].PurchaseHeader_38(PurchaseHeader);
    END;

    PROCEDURE PurchaseLine_39@39(PurchaseLine@1240020000 : Record 39;RecordNo@1240020001 : Integer);
    BEGIN
      // Purchase Line
      FieldValue[RecordNo + 1].PurchaseLine_39(PurchaseLine);
    END;

    PROCEDURE CompanyInformation_79@79(CompanyInformation@1240020000 : Record 79;RecordNo@1240020001 : Integer);
    BEGIN
      // Company Information
      FieldValue[RecordNo + 1].CompanyInformation_79(CompanyInformation);
    END;

    PROCEDURE SalesShipmentHeader_110@1000000000(SalesShipmentHeader@1000000000 : Record 110;RecordNo@1240020001 : Integer);
    BEGIN
      // Sales Shipment Header
      FieldValue[RecordNo + 1].SalesShipmentHeader_110(SalesShipmentHeader); //TPZ3171
    END;

    PROCEDURE Resource_156@156(Resource@1240020000 : Record 156;RecordNo@1240020001 : Integer);
    BEGIN
      // Resource
      FieldValue[RecordNo + 1].Resource_156(Resource);
    END;

    PROCEDURE ShiptoAddress_222@222(ShiptoAddress@1240020000 : Record 222;RecordNo@1240020001 : Integer);
    BEGIN
      // Ship-to Address
      FieldValue[RecordNo + 1].ShiptoAddress_222(ShiptoAddress);
    END;

    PROCEDURE OrderAddress_224@224(OrderAddress@1240020000 : Record 224;RecordNo@1240020001 : Integer);
    BEGIN
      // Order Address
      FieldValue[RecordNo + 1].OrderAddress_224(OrderAddress);
    END;

    PROCEDURE ShippingAgent_291@291(ShippingAgent@1240020000 : Record 291;RecordNo@1240020001 : Integer);
    BEGIN
      // Shipping Agent
      FieldValue[RecordNo + 1].ShippingAgent_291(ShippingAgent);
    END;

    PROCEDURE ItemVariant_5401@5401(ItemVariant@1240020000 : Record 5401;RecordNo@1240020001 : Integer);
    BEGIN
      // Item Variant
      FieldValue[RecordNo + 1].ItemVariant_5401(ItemVariant);
    END;

    PROCEDURE ItemUnitofMeasure_5404@5404(ItemUnitofMeasure@1240020000 : Record 5404;RecordNo@1240020001 : Integer);
    BEGIN
      // Item Unit of Measure
      FieldValue[RecordNo + 1].ItemUnitofMeasure_5404(ItemUnitofMeasure);
    END;

    PROCEDURE TransferHeader_5740@5740(TransferHeader@1000000000 : Record 5740;RecordNo@1000000001 : Integer);
    BEGIN
      // Transfer Header
      FieldValue[RecordNo + 1].TransferHeader_5740(TransferHeader);
    END;

    PROCEDURE TransferShipmentHeader_5744@1170000000(TransferShipmentHeader@1170000000 : Record 5744;RecordNo@1000000001 : Integer);
    BEGIN
      // posted Transfer Shipment
      FieldValue[RecordNo + 1].TransferShipmentHeader_5744(TransferShipmentHeader);//TPZ3198
    END;

    PROCEDURE SerialNoInformation_6504@6504(SerialNoInformation@1240020000 : Record 6504;RecordNo@1240020001 : Integer);
    BEGIN
      // Serial No. Information
      FieldValue[RecordNo + 1].SerialNoInformation_6504(SerialNoInformation);
    END;

    PROCEDURE LotNoInformation_6505@6505(LotNoInformation@1240020000 : Record 6505;RecordNo@1240020001 : Integer);
    BEGIN
      // Lot No. Information
      FieldValue[RecordNo + 1].LotNoInformation_6505(LotNoInformation);
    END;

    PROCEDURE Bin_7354@7354(Bin@1240020000 : Record 7354;RecordNo@1240020001 : Integer);
    BEGIN
      // Bin
      FieldValue[RecordNo + 1].Bin_7354(Bin);
    END;

    PROCEDURE Receive_14000601@3800601(Receive@1240020000 : Record 14000601;RecordNo@1240020001 : Integer);
    BEGIN
      // Receive
      FieldValue[RecordNo + 1].Receive_14000601(Receive);
    END;

    PROCEDURE ReceiveLine_14000602@3800602(ReceiveLine@1240020000 : Record 14000602;RecordNo@1240020001 : Integer);
    BEGIN
      // Receive Line
      FieldValue[RecordNo + 1].ReceiveLine_14000602(ReceiveLine);
    END;

    PROCEDURE ReceiveCommentLine_14000606@3800606(ReceiveCommentLine@1240020000 : Record 14000606;RecordNo@1240020001 : Integer);
    BEGIN
      // Receive Comment Line
      FieldValue[RecordNo + 1].ReceiveCommentLine_14000606(ReceiveCommentLine);
    END;

    PROCEDURE ReceiveStation_14000608@3800608(ReceiveStation@1240020000 : Record 14000608;RecordNo@1240020001 : Integer);
    BEGIN
      // Receive Station
      FieldValue[RecordNo + 1].ReceiveStation_14000608(ReceiveStation);
    END;

    PROCEDURE ReceiveRule_14000612@3800612(ReceiveRule@1240020000 : Record 14000612;RecordNo@1240020001 : Integer);
    BEGIN
      // Receive Rule
      FieldValue[RecordNo + 1].ReceiveRule_14000612(ReceiveRule);
    END;

    PROCEDURE Package_14000701@3800701(Package@1240020000 : Record 14000701;RecordNo@1240020001 : Integer);
    BEGIN
      // Package
      FieldValue[RecordNo + 1].Package_14000701(Package);
    END;

    PROCEDURE PackageLine_14000702@3800702(PackageLine@1240020000 : Record 14000702;RecordNo@1240020001 : Integer);
    BEGIN
      // Package Line
      FieldValue[RecordNo + 1].PackageLine_14000702(PackageLine);
    END;

    PROCEDURE ShippingCommentLine_14000706@3800706(ShippingCommentLine@1240020000 : Record 14000706;RecordNo@1240020001 : Integer);
    BEGIN
      // Shipping Comment Line
      FieldValue[RecordNo + 1].ShippingCommentLine_14000706(ShippingCommentLine);
    END;

    PROCEDURE EShipAgentService_14000708@3800708(EShipAgentService@1240020000 : Record 14000708;RecordNo@1240020001 : Integer);
    BEGIN
      // E-Ship Agent Service
      FieldValue[RecordNo + 1].EShipAgentService_14000708(EShipAgentService);
    END;

    PROCEDURE PackingStation_14000709@3800709(PackingStation@1240020000 : Record 14000709;RecordNo@1240020001 : Integer);
    BEGIN
      // Packing Station
      FieldValue[RecordNo + 1].PackingStation_14000709(PackingStation);
    END;

    PROCEDURE PackingRule_14000715@3800715(PackingRule@1240020000 : Record 14000715;RecordNo@1240020001 : Integer);
    BEGIN
      // Packing Rule
      FieldValue[RecordNo + 1].PackingRule_14000715(PackingRule);
    END;

    PROCEDURE BillofLading_14000822@3800822(BillofLading@1240020000 : Record 14000822;RecordNo@1240020001 : Integer);
    BEGIN
      // Bill of Lading
      FieldValue[RecordNo + 1].BillofLading_14000822(BillofLading);
    END;

    PROCEDURE BillofLadingLine_14000823@3800823(BillofLadingLine@1240020000 : Record 14000823;RecordNo@1240020001 : Integer);
    BEGIN
      // Bill of Lading Line
      FieldValue[RecordNo + 1].BillofLadingLine_14000823(BillofLadingLine);
    END;

    PROCEDURE BillofLadingInfoLine_14000827@3800827(BillofLadingInfoLine@1240020000 : Record 14000827;RecordNo@1240020001 : Integer);
    BEGIN
      // Bill of Lading Info. Line
      FieldValue[RecordNo + 1].BillofLadingInfoLine_14000827(BillofLadingInfoLine);
    END;

    PROCEDURE LabelHeader_14000841@3800841(LabelHeader@1240020000 : Record 14000841;RecordNo@1240020001 : Integer);
    BEGIN
      // Label Header
      FieldValue[RecordNo + 1].LabelHeader_14000841(LabelHeader);
    END;

    PROCEDURE LabelLine_14000842@3800842(LabelLine@1240020000 : Record 14000842;RecordNo@1240020001 : Integer);
    BEGIN
      // Label Line
      FieldValue[RecordNo + 1].LabelLine_14000842(LabelLine);
    END;

    PROCEDURE PackageSummaryLine_14000964@3800964(PackageSummaryLine@1240020000 : Record 14000964;RecordNo@1240020001 : Integer);
    BEGIN
      // Package Summary Line
      FieldValue[RecordNo + 1].PackageSummaryLine_14000964(PackageSummaryLine);
    END;

    PROCEDURE EDIReceiveDocHdrInfo_14002371@3802371(EDIReceiveDocHdrInfo@1240020000 : Record 14002371;RecordNo@1240020001 : Integer);
    BEGIN
      // E.D.I. Receive Doc. Hdr. Info.
      FieldValue[RecordNo + 1].EDIReceiveDocHdrInfo_14002371(EDIReceiveDocHdrInfo);
    END;

    PROCEDURE EDIReceiveDocLineInfo_14002372@3802372(EDIReceiveDocLineInfo@1240020000 : Record 14002372;RecordNo@1240020001 : Integer);
    BEGIN
      // E.D.I. Receive Doc. Line Info.
      FieldValue[RecordNo + 1].EDIReceiveDocLineInfo_14002372(EDIReceiveDocLineInfo);
    END;

    PROCEDURE SubstituteLine@111122(NewLine@1240020000 : Record 14000842) : Text[1000];
    VAR
      ExtendedDataLine@1240030001 : Record 14000962;
      TempText@1240030002 : Text[1000];
    BEGIN
      IF NewLine."Extended Data Code" <> '' THEN BEGIN
        TempText := '';

        ExtendedDataLine.RESET;
        ExtendedDataLine.SETRANGE("Extended Data Code",NewLine."Extended Data Code");
        IF ExtendedDataLine.FIND('-') THEN
          REPEAT
            TempText :=
              TempText +
              SubstituteElements(
                ExtendedDataLine.Text,1,ExtendedDataLine."Extended Data Code",
                ExtendedDataLine."Line No.",FALSE);
          UNTIL ExtendedDataLine.NEXT = 0;

        EXIT(TempText);
      END ELSE
        EXIT(
          SubstituteElements(
            NewLine.Text,0,NewLine."Label Code",NewLine."Line No.",
            NewLine."Skip If All Elements Blank"));
    END;

    LOCAL PROCEDURE SubstituteElements@111123(OriginalText@1240020000 : Text[1000];HeaderType@1240030009 : Integer;HeaderCode@1240020001 : Code[10];LineNo@1240020002 : Integer;SkipIfAllElementsBlank@1240020003 : Boolean) : Text[1000];
    VAR
      Element@1240020004 : Record 14000844;
      VirtualField@1240020005 : Codeunit 14000841;
      TextArray@1240020006 : ARRAY [10] OF Text[1000];
      DecimalValue@1240020007 : Decimal;
      IntegerValue@1240020008 : Integer;
    BEGIN
      CLEAR(TextArray);
      CLEAR(Element);

      Element.RESET;
      Element.SETRANGE(Type,HeaderType);
      Element.SETRANGE("Label Code",HeaderCode);
      Element.SETRANGE("Line No.",LineNo);
      Element.SETRANGE("Element No.",1,10);
      IF Element.FIND('-') THEN
        REPEAT
          // Find Value for Element
          IF Element."Virtual Field" <> Element."Virtual Field"::" " THEN BEGIN
            TextArray[Element."Element No."] := VirtualField.GetVirtualField(Element);

            IF Element."Skip Line If Element Blank" THEN
              IF (TextArray[Element."Element No."] = '') OR
                 ((Element."Field Type" IN
                   [Element."Field Type"::Boolean,Element."Field Type"::Integer,
                    Element."Field Type"::Decimal]) AND
                  (TextArray[Element."Element No."] = '0')) OR
                 ((Element."Field Type" = Element."Field Type"::Boolean) AND
                  (TextArray[Element."Element No."] = Text001))
              THEN
                EXIT('');

            IF Element."Skip Line If Element Not Blank" THEN
              CASE Element."Field Type" OF
                Element."Field Type"::Boolean:
                  IF (TextArray[Element."Element No."] <> '0') AND
                     (TextArray[Element."Element No."] <> Text001)
                  THEN
                    EXIT('');
                Element."Field Type"::Integer,Element."Field Type"::Decimal:
                  IF TextArray[Element."Element No."] <> '0' THEN
                    EXIT('');
                ELSE
                  IF TextArray[Element."Element No."] <> '' THEN
                    EXIT('');
              END;
          END ELSE BEGIN
            TextArray[Element."Element No."] :=
              FieldValue[Element."Record No." + 1].GetField(
                Element."Table ID",Element."Field ID",
                Element."Format Length",Element."Format Number",Element."Format String",PostedDoc);

            IF Element."Skip Line If Element Blank" THEN
              IF (TextArray[Element."Element No."] = '') OR
                 ((Element."Field Type" IN
                   [Element."Field Type"::Boolean,Element."Field Type"::Integer,
                    Element."Field Type"::Decimal]) AND
                  (TextArray[Element."Element No."] = '0')) OR
                 ((Element."Field Type" = Element."Field Type"::Boolean) AND
                  (TextArray[Element."Element No."] = Text001))
              THEN
                EXIT('');
            IF Element."Skip Line If Element Not Blank" THEN
              CASE Element."Field Type" OF
                Element."Field Type"::Boolean:
                  IF (TextArray[Element."Element No."] <> '0') AND
                     (TextArray[Element."Element No."] <> Text001)
                  THEN
                    EXIT('');
                Element."Field Type"::Integer,Element."Field Type"::Decimal:
                  IF TextArray[Element."Element No."] <> '0' THEN
                    EXIT('');
                ELSE
                  IF TextArray[Element."Element No."] <> '' THEN
                    EXIT('');
              END;
          END;

          IF Element."Pre Substitution" THEN
            TextArray[Element."Element No."] :=
              STRSUBSTNO(
                TextArray[Element."Element No."],
                TextArray[1],TextArray[2],TextArray[3],TextArray[4],TextArray[5],
                TextArray[6],TextArray[7],TextArray[8],TextArray[9]);

        IF Element."Cut-out Position" > 0 THEN
          IF Element."Cut-out Position" > STRLEN(TextArray[Element."Element No."]) THEN
            TextArray[Element."Element No."] := ''
          ELSE
            IF Element."Cut-out Length" <> 0 THEN
              TextArray[Element."Element No."] :=
                COPYSTR(
                  TextArray[Element."Element No."],Element."Cut-out Position",Element."Cut-out Length")
            ELSE
              TextArray[Element."Element No."] :=
                COPYSTR(TextArray[Element."Element No."],Element."Cut-out Position");
        UNTIL Element.NEXT = 0;

      // Substitute Values
      IF (TextArray[1] = '') AND (TextArray[2] = '') AND (TextArray[3] = '') AND
         (TextArray[4] = '') AND (TextArray[5] = '') AND (TextArray[6] = '') AND
         (TextArray[7] = '') AND (TextArray[8] = '') AND (TextArray[9] = '') AND
         (TextArray[10] = '') AND SkipIfAllElementsBlank
      THEN
        EXIT('')
      ELSE
        CASE TRUE OF
          Element."Element No." = 10:
            EXIT(
              STRSUBSTNO(
                OriginalText,
                TextArray[1],TextArray[2],TextArray[3],TextArray[4],TextArray[5],
                TextArray[6],TextArray[7],TextArray[8],TextArray[9],TextArray[10]));
          Element."Element No." = 9:
            EXIT(
              STRSUBSTNO(
                OriginalText,
                TextArray[1],TextArray[2],TextArray[3],TextArray[4],TextArray[5],
                TextArray[6],TextArray[7],TextArray[8],TextArray[9]));
          Element."Element No." = 8:
            EXIT(
              STRSUBSTNO(
                OriginalText,
                TextArray[1],TextArray[2],TextArray[3],TextArray[4],TextArray[5],
                TextArray[6],TextArray[7],TextArray[8]));
          Element."Element No." = 7:
            EXIT(
              STRSUBSTNO(
                OriginalText,
                TextArray[1],TextArray[2],TextArray[3],TextArray[4],TextArray[5],
                TextArray[6],TextArray[7]));
          Element."Element No." = 6:
            EXIT(
              STRSUBSTNO(
                OriginalText,
                TextArray[1],TextArray[2],TextArray[3],TextArray[4],TextArray[5],
                TextArray[6]));
          Element."Element No." = 5:
            EXIT(
              STRSUBSTNO(
                OriginalText,
                TextArray[1],TextArray[2],TextArray[3],TextArray[4],TextArray[5]));
          Element."Element No." = 4:
            EXIT(
              STRSUBSTNO(OriginalText,TextArray[1],TextArray[2],TextArray[3],TextArray[4]));
          Element."Element No." = 3:
            EXIT(STRSUBSTNO(OriginalText,TextArray[1],TextArray[2],TextArray[3]));
          Element."Element No." = 2:
            EXIT(STRSUBSTNO(OriginalText,TextArray[1],TextArray[2]));
          Element."Element No." = 1:
            EXIT(STRSUBSTNO(OriginalText,TextArray[1]));
          ELSE
            EXIT(OriginalText);
      END;
    END;

    PROCEDURE GetMaxRecordNo@111125() : Integer;
    BEGIN
      EXIT(20);
    END;

    PROCEDURE SetPosted@111126(Posted@111127 : Boolean);
    BEGIN
      PostedDoc := Posted
    END;

    BEGIN
    {
      001 TPZ3171 GKG 05212021 Printing address labels after SO is posted
      002 TPZ3198 GKG 06152021 Printing address labels after TO is posted
    }
    END.
  }
}

