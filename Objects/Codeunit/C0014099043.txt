OBJECT Codeunit 14099043 OWR Setup Codeunit
{
  OBJECT-PROPERTIES
  {
    Date=08/21/18;
    Time=12:00:00 PM;
    Version List=RF1.50.13;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ConfirmSetOWREmpAll@1240020000 : TextConst 'ENU=Add the OWR DEFAULT OWR Employee Setup Code to all Warehouse Employees?';
      ConfirmPickRequest@1240020012 : TextConst 'ENU=Do you wish to enable the Pick Request functionality for %1? If not, then you can always manually enable it at a later time from OWR Location Setup.';
      ConfirmSetOWREmpCodeDefault@1240020013 : TextConst 'ENU=Do you wish to set the %1 Code as the default configuration? This would apply to all Warehouse Employees who do not have a specified OWR Employee Code defined, and NAV users who do not have a Warehouse Employee code.';
      ConfirmAssignOWREmpCode@1240020016 : TextConst 'ENU=Do you wish to assign %1 Code to specific Warehouse Employees? If yes, select each Warehouse Employee record on the next screen, and then click Close.';
      DefaultNoSeriesSet@1240020011 : TextConst 'ENU=The default Outbound Warehouse Request No. Series have been setup.';
      DefaultWorksheetsSet@1240020006 : TextConst 'ENU=The default Outbound Warehouse Request Warehouse Worksheets have been setup.';
      DefaultOWRActionsSet@1240020005 : TextConst 'ENU=The default Outbound Warehouse Request Action Codes have been setup.';
      DefaultOWRLocationsSet@1240020004 : TextConst 'ENU=The Outbound Warehouse Request Location Setup codes have been setup.';
      DefaultOWRRolesSet@1240020003 : TextConst 'ENU=The default Outbound Warehouse Request Roles and Permission Sets have been setup.';
      MessageDefaultOWRCodeSet@1240020014 : TextConst 'ENU=A default OWR Employee Code has been set.';
      MessageAssignOWREmpCodeSet@1240020017 : TextConst 'ENU=The OWR Employee Code has been set.';
      ResetOWRSetupMessage@1240020007 : TextConst 'ENU=OWR setup has been reset.';
      ResetOWRBaseSetupMessage@1240020008 : TextConst 'ENU=OWR base system setup has been reset.';
      ResetOWRApplicationMessage@1240020009 : TextConst 'ENU=OWR processing, registering, and archive related tables have been reset.';
      ResetOWRPermissionsMessage@1240020010 : TextConst 'ENU=OWR user permissions and permission sets have been reset.';
      ResetAllOWRSetupMessage@1240020002 : TextConst 'ENU=All OWR related system setup, tables, and permissions have been reset.';
      TestOverride@1240020001 : Boolean;

    [External]
    PROCEDURE InitiateOWRSetup@1240020012();
    VAR
      Location@1240020000 : Record 14;
      RFSetup@1240020001 : Record 14002801;
      WhseActGroupNoSeriesCode@1240020002 : Code[20];
      DefaultOWRReplenWhseWkst@1240020003 : Code[10];
      DefaultMovementTemplate@1240020004 : Code[10];
    BEGIN
      IF NOT RFSetup.GET THEN BEGIN
        RFSetup.INIT;
        RFSetup."Enable OWR" := TRUE;
        IF NOT RFSetup.INSERT THEN RFSetup.MODIFY;
      END;

      CheckForTestOverride;

      CreateNoSeries(RFSetup,WhseActGroupNoSeriesCode,FALSE);
      RFSetup."Whse. Activity Group Nos." := WhseActGroupNoSeriesCode;
      RFSetup.MODIFY;

      CreateWorksheets(DefaultOWRReplenWhseWkst,DefaultMovementTemplate,FALSE);
      IF DefaultOWRReplenWhseWkst <> '' THEN
        RFSetup."Replen Worksheet Name" := DefaultOWRReplenWhseWkst;
      RFSetup."Movement Worksheet Template" := DefaultMovementTemplate;
      RFSetup.MODIFY;

      CreateOutboundActions(FALSE);
      CreateOWRLocationSetupRecords(FALSE);
      CreateDefaultEmployeeSetup;
    END;

    [External]
    PROCEDURE CreateNoSeries@1240020011(VAR RFSetup@1240020003 : Record 14002801;VAR WhseActGroupNoSeriesCode@1240020001 : Code[20];TriggerMessage@1240020002 : Boolean);
    VAR
      NoSeries@1240030000 : Record 308;
      NoSeriesLine@1240030001 : Record 309;
      Location@1240030002 : Record 14;
      WhseWorksheetTemplate@1060000 : Record 7328;
      ItemJournalTemplate@1060001 : Record 82;
      WhseJnlBatch@1240020000 : Record 7310;
    BEGIN
      CheckForTestOverride;

      IF NOT NoSeries.GET('WHSEACTGRP') THEN BEGIN
        NoSeries.INIT;
        NoSeries.VALIDATE(Code,'WHSEACTGRP');
        NoSeries.VALIDATE(Description,'Default Warehouse Activity Group No. Series');
        NoSeries.VALIDATE("Default Nos.",TRUE);
        NoSeries.INSERT(TRUE);

        NoSeriesLine.INIT;
        NoSeriesLine.VALIDATE("Series Code",NoSeries.Code);
        NoSeriesLine.VALIDATE("Line No.",10000);
        NoSeriesLine.VALIDATE("Starting No.",'WAG0000001');
        NoSeriesLine.VALIDATE("Ending No.",'WAG9999999');
        NoSeriesLine.INSERT(TRUE);

        WhseActGroupNoSeriesCode := NoSeries.Code;
      END ELSE BEGIN
        WhseActGroupNoSeriesCode := NoSeries.Code;
      END;

      IF NOT NoSeries.GET('OWRPICKRQST') THEN BEGIN
        NoSeries.INIT;
        NoSeries.VALIDATE(Code,'OWRPICKRQST');
        NoSeries.VALIDATE(Description,'Default Pick Request No. Series');
        NoSeries.VALIDATE("Default Nos.",TRUE);
        NoSeries.INSERT(TRUE);

        NoSeriesLine.INIT;
        NoSeriesLine.VALIDATE("Series Code",NoSeries.Code);
        NoSeriesLine.VALIDATE("Line No.",10000);
        NoSeriesLine.VALIDATE("Starting No.",'PR00000001');
        NoSeriesLine.VALIDATE("Ending No.",'PR99999999');
        NoSeriesLine.INSERT(TRUE);
      END;

      RFSetup."Availabilty Bin Order" := RFSetup."Availabilty Bin Order"::"Pick - Other - Receive";
      RFSetup."Delete Shipment Lines Handled" := TRUE;
      RFSetup."Auto Delete Warehouse Shipment" := TRUE;
      RFSetup.MODIFY;

      IF TriggerMessage THEN
        MESSAGE(DefaultNoSeriesSet);
    END;

    [External]
    PROCEDURE CreateWorksheets@1240020009(VAR DefaultOWRReplenWhseWkst@1240020002 : Code[10];VAR DefaultMovementTemplate@1240020004 : Code[10];TriggerMessage@1240020003 : Boolean);
    VAR
      Location@1240020001 : Record 14;
      WhseWorksheetTemplate@1240030000 : Record 7328;
      WhseWorksheetName@14097700 : Record 7327;
      WhseWorksheetName2@1240020000 : Record 7327;
    BEGIN
      CheckForTestOverride;

      Location.RESET;
      Location.SETRANGE("Directed Put-away and Pick",TRUE);
      IF Location.FIND('-') THEN
        REPEAT
          WhseWorksheetTemplate.RESET;
          WhseWorksheetTemplate.SETRANGE(Type,WhseWorksheetTemplate.Type::Movement);
          WhseWorksheetTemplate.FIND('-');

          DefaultOWRReplenWhseWkst := 'OWR-REPLEN';

          IF WhseWorksheetTemplate.Type = WhseWorksheetTemplate.Type::Movement THEN
            IF NOT WhseWorksheetName.GET(WhseWorksheetTemplate.Name,DefaultOWRReplenWhseWkst,Location.Code) THEN BEGIN
              WhseWorksheetName.INIT;
              WhseWorksheetName.VALIDATE("Worksheet Template Name",WhseWorksheetTemplate.Name);
              WhseWorksheetName.VALIDATE(Name,DefaultOWRReplenWhseWkst);
              WhseWorksheetName.VALIDATE("Location Code",Location.Code);
              WhseWorksheetName.VALIDATE(Description,'OWR Worksheet');
              WhseWorksheetName.INSERT(TRUE);
            END;

          DefaultMovementTemplate := WhseWorksheetTemplate.Name;
        UNTIL Location.NEXT = 0;

      IF TriggerMessage THEN
        MESSAGE(DefaultWorksheetsSet);
    END;

    [External]
    PROCEDURE CreateOutboundActions@1240020013(TriggerMessage@1240020000 : Boolean);
    VAR
      OutboundWhseRequestAction@1240040000 : Record 14002864;
    BEGIN
      CheckForTestOverride;

      IF NOT OutboundWhseRequestAction.GET('MOVE') THEN BEGIN
        OutboundWhseRequestAction.INIT;
        OutboundWhseRequestAction.Code := 'MOVE';
        OutboundWhseRequestAction.Description := 'Move Created';
        OutboundWhseRequestAction.INSERT(TRUE);
      END;

      IF NOT OutboundWhseRequestAction.GET('WAITRECEIV') THEN BEGIN
        OutboundWhseRequestAction.INIT;
        OutboundWhseRequestAction.Code := 'WAITRECEIV';
        OutboundWhseRequestAction.Description := 'Waiting for Receive';
        OutboundWhseRequestAction.INSERT(TRUE);
      END;

      IF NOT OutboundWhseRequestAction.GET('OUTSTAND') THEN BEGIN
        OutboundWhseRequestAction.INIT;
        OutboundWhseRequestAction.Code := 'OUTSTAND';
        OutboundWhseRequestAction.Description := 'Outstanding Quantity';
        OutboundWhseRequestAction."Outstanding Quantity" := TRUE;
        OutboundWhseRequestAction.INSERT(TRUE);
      END;

      IF NOT OutboundWhseRequestAction.GET('AVAIL') THEN BEGIN
        OutboundWhseRequestAction.INIT;
        OutboundWhseRequestAction.Code := 'AVAIL';
        OutboundWhseRequestAction.Description := 'Available Quantity';
        OutboundWhseRequestAction."Available Quantity" := TRUE;
        OutboundWhseRequestAction.INSERT(TRUE);
      END;

      IF NOT OutboundWhseRequestAction.GET('TOTALAVAIL') THEN BEGIN
        OutboundWhseRequestAction.INIT;
        OutboundWhseRequestAction.Code := 'TOTALAVAIL';
        OutboundWhseRequestAction.Description := 'Total Available Quantity';
        OutboundWhseRequestAction."Total Available Quantity" := TRUE;
        OutboundWhseRequestAction.INSERT(TRUE);
      END;

      IF NOT OutboundWhseRequestAction.GET('ALLAVAIL') THEN BEGIN
        OutboundWhseRequestAction.INIT;
        OutboundWhseRequestAction.Code := 'ALLAVAIL';
        OutboundWhseRequestAction.Description := 'All Available Quantity';
        OutboundWhseRequestAction."All Available Quantity" := TRUE;
        OutboundWhseRequestAction.INSERT(TRUE);
      END;

      IF NOT OutboundWhseRequestAction.GET('MOVEREQ') THEN BEGIN
        OutboundWhseRequestAction.INIT;
        OutboundWhseRequestAction.Code := 'MOVEREQ';
        OutboundWhseRequestAction.Description := 'Total > Available Quantity';
        OutboundWhseRequestAction."Total > Available Quantity" := TRUE;
        OutboundWhseRequestAction.INSERT(TRUE);
      END;

      IF NOT OutboundWhseRequestAction.GET('RESERVED') THEN BEGIN
        OutboundWhseRequestAction.INIT;
        OutboundWhseRequestAction.Code := 'RESERVED';
        OutboundWhseRequestAction.Description := 'Reserved Items on Order';
        OutboundWhseRequestAction."Reserved Inventory" := TRUE;
        OutboundWhseRequestAction.INSERT(TRUE);
      END;

      IF NOT OutboundWhseRequestAction.GET('NEW') THEN BEGIN
        OutboundWhseRequestAction.INIT;
        OutboundWhseRequestAction.Code := 'NEW';
        OutboundWhseRequestAction.Description := 'New Orders';
        OutboundWhseRequestAction."New Orders" := TRUE;
        OutboundWhseRequestAction.INSERT(TRUE);
      END;

      IF NOT OutboundWhseRequestAction.GET('BACKORDER') THEN BEGIN
        OutboundWhseRequestAction.INIT;
        OutboundWhseRequestAction.Code := 'BACKORDER';
        OutboundWhseRequestAction.Description := 'Back Order';
        OutboundWhseRequestAction."Back Orders" := TRUE;
        OutboundWhseRequestAction.INSERT(TRUE);
      END;

      IF NOT OutboundWhseRequestAction.GET('ATO ORDERS') THEN BEGIN
        OutboundWhseRequestAction.INIT;
        OutboundWhseRequestAction.Code := 'ATO ORDERS';
        OutboundWhseRequestAction.Description := 'ATO Orders';
        OutboundWhseRequestAction."ATO Orders" := TRUE;
        OutboundWhseRequestAction.INSERT(TRUE);
      END;

      IF TriggerMessage THEN
        MESSAGE(DefaultOWRActionsSet);
    END;

    [External]
    PROCEDURE CreateOWRLocationSetupRecords@1240020006(TriggerMessage@1240020002 : Boolean);
    VAR
      Location@1240020000 : Record 14;
      OWRLocationSetup@1240020001 : Record 14099030;
      Confirmed@1240020003 : Boolean;
    BEGIN
      CheckForTestOverride;

      Location.RESET;
      Location.SETRANGE("Use As In-Transit",FALSE);
      IF Location.FINDSET(FALSE) THEN
        REPEAT
          OWRLocationSetup.RESET;
          IF NOT OWRLocationSetup.GET(Location.Code) THEN BEGIN
            OWRLocationSetup.INIT;
            OWRLocationSetup.Code := Location.Code;
            OWRLocationSetup.Description := Location.Name;
            OWRLocationSetup.INSERT;
            IF (NOT Location."Require Pick") AND (NOT Location."Require Shipment") THEN BEGIN
              Confirmed := FALSE;
              IF TestOverride THEN
                Confirmed := TRUE
              ELSE
                Confirmed := CONFIRM(STRSUBSTNO(ConfirmPickRequest,Location.Code),FALSE);

              IF Confirmed THEN
                IF OWRLocationSetup.GET(Location.Code) THEN BEGIN
                  OWRLocationSetup."Create Outbound Whse. Requests" := TRUE;
                  OWRLocationSetup."Use Pick Requests" := TRUE;
                  OWRLocationSetup."Pick Request No. Series" := 'OWRPICKRQST';
                  OWRLocationSetup.VALIDATE("Pick Request Report ID",REPORT::"OWR Pick Request Line Report");
                  OWRLocationSetup.MODIFY;
                END;
            END;
          END;
        UNTIL Location.NEXT = 0;

      IF TriggerMessage THEN
        MESSAGE(DefaultOWRLocationsSet);
    END;

    [External]
    PROCEDURE CreateDefaultEmployeeSetup@14097703();
    VAR
      RFSetup@1240020001 : Record 14002801;
      RFEmployeeSetup@14097700 : Record 14002802;
      Location@1240030000 : Record 14;
      WarehouseEmployee@1240030001 : Record 7301;
      WarehouseEmployee2@1240030002 : Record 7301;
      WhseEmpSelectionList@1240020003 : Page 14099045;
      RFEmpCode@1240020000 : Code[50];
      WhseEmpAssignComplete@1240020002 : Boolean;
      Confirmed@1240020004 : Boolean;
    BEGIN
      CheckForTestOverride;

      RFEmpCode := 'OWR DEFAULT';

      RFEmployeeSetup.INIT;
      RFEmployeeSetup.VALIDATE(Code,RFEmpCode);
      RFEmployeeSetup.VALIDATE(RFEmployeeSetup."Outbound Whse. Request Type",
         RFEmployeeSetup."Outbound Whse. Request Type"::Advanced);

      IF NOT RFEmployeeSetup.INSERT(TRUE) THEN RFEmployeeSetup.MODIFY(TRUE);

      Confirmed := FALSE;
      IF TestOverride THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(STRSUBSTNO(ConfirmSetOWREmpCodeDefault,RFEmpCode),FALSE);

      IF Confirmed THEN BEGIN
        CLEAR(RFSetup);
        IF RFSetup.GET THEN BEGIN
          RFSetup."Default OWR Emp. Setup Code" := RFEmpCode;
          RFSetup.MODIFY;
        END;
        MESSAGE(MessageDefaultOWRCodeSet);
      END;

      Confirmed := FALSE;
      IF TestOverride THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(ConfirmSetOWREmpAll,FALSE);

      WhseEmpAssignComplete := FALSE;
      IF Confirmed THEN BEGIN
        WarehouseEmployee.RESET;
        IF WarehouseEmployee.FIND('-') THEN
          REPEAT
            IF WarehouseEmployee."RF Employee Setup Code" = '' THEN BEGIN
              WarehouseEmployee2 := WarehouseEmployee;
              WarehouseEmployee2."RF Employee Setup Code" := RFEmployeeSetup.Code;
              WarehouseEmployee2.MODIFY(TRUE);
            END;
          UNTIL WarehouseEmployee.NEXT = 0;

        WhseEmpAssignComplete := TRUE;
      END;

      IF NOT WhseEmpAssignComplete THEN
        IF CONFIRM(STRSUBSTNO(ConfirmAssignOWREmpCode,RFEmpCode),FALSE) THEN BEGIN
          WhseEmpSelectionList.Initialize(RFEmpCode);
          WhseEmpSelectionList.RUN;
        END;
    END;

    [External]
    PROCEDURE CreateOWRRoles@1240020001(TriggerMessage@1240020007 : Boolean);
    VAR
      UserRole@1240020006 : Record 2000000004;
      User@1240020005 : Record 2000000120;
      Permission@1240020004 : Record 2000000005;
      AllObj@1240020003 : Record 2000000038;
      WindowsAccessControl@1240020002 : Record 2000000053;
      MemberOf@1240020001 : Record 2000000053;
      TableType@1240020000 : ' ,Setup,Work,Post,Limited';
      Confirmed@1240020008 : Boolean;
    BEGIN
      CheckForTestOverride;

      UserRole."Role ID" := 'OWR-ALL';
      UserRole.Name := 'Required for all users';
      IF NOT UserRole.INSERT THEN ;
      AllObj.RESET;
      AllObj.SETRANGE("Object Type",AllObj."Object Type"::TableData);
      AllObj.SETFILTER("Object ID",'14002500..14002600|14002801..14002999|14099001..14099050|14097681..14097800');
      IF AllObj.FIND('-') THEN
        REPEAT
          Permission."Role ID" := UserRole."Role ID";
          Permission."Object Type" := AllObj."Object Type";
          Permission."Object ID" := AllObj."Object ID";

          CASE GetOWRTableType(AllObj."Object ID") OF
            TableType::Setup,TableType::Work,TableType::Post:
              BEGIN
                Permission."Read Permission" := Permission."Read Permission"::Yes;
                Permission."Insert Permission" := Permission."Insert Permission"::" ";
                Permission."Modify Permission" := Permission."Modify Permission"::" ";
                Permission."Delete Permission" := Permission."Delete Permission"::" ";
                Permission."Execute Permission" := Permission."Execute Permission"::" ";
                IF NOT Permission.INSERT THEN ;
              END;
          END;
        UNTIL AllObj.NEXT = 0;

      UserRole."Role ID" := 'OWR-SUPER';
      UserRole.Name := 'Super user OWR';
      IF NOT UserRole.INSERT THEN ;
      AllObj.RESET;
      AllObj.SETRANGE("Object Type",AllObj."Object Type"::TableData);
      AllObj.SETFILTER("Object ID",'14002500..14002600|14002801..14002999|14099001..14099050|14097681..14097800');
      IF AllObj.FIND('-') THEN
        REPEAT
          Permission."Role ID" := UserRole."Role ID";
          Permission."Object Type" := AllObj."Object Type";
          Permission."Object ID" := AllObj."Object ID";

          CASE GetOWRTableType(AllObj."Object ID") OF
            TableType::Setup,TableType::Work,TableType::Post:
              BEGIN
                Permission."Read Permission" := Permission."Read Permission"::Yes;
                Permission."Insert Permission" := Permission."Insert Permission"::Yes;
                Permission."Modify Permission" := Permission."Modify Permission"::Yes;
                Permission."Delete Permission" := Permission."Delete Permission"::Yes;
                Permission."Execute Permission" := Permission."Execute Permission"::Yes;
                IF NOT Permission.INSERT THEN ;
              END;
          END;
        UNTIL AllObj.NEXT = 0;

      UserRole."Role ID" := 'OWR-WORK';
      UserRole.Name := 'Required for using OWR';
      IF NOT UserRole.INSERT THEN ;
      AllObj.RESET;
      AllObj.SETRANGE("Object Type",AllObj."Object Type"::TableData);
      AllObj.SETFILTER("Object ID",'14002500..14002600|14002801..14002999|14099001..14099050|14097681..14097800');
      IF AllObj.FIND('-') THEN
        REPEAT
          Permission."Role ID" := UserRole."Role ID";
          Permission."Object Type" := AllObj."Object Type";
          Permission."Object ID" := AllObj."Object ID";

          CASE GetOWRTableType(AllObj."Object ID") OF
            TableType::Work:
              BEGIN
                Permission."Read Permission" := Permission."Read Permission"::Yes;
                Permission."Insert Permission" := Permission."Insert Permission"::Yes;
                Permission."Modify Permission" := Permission."Modify Permission"::Yes;
                Permission."Delete Permission" := Permission."Delete Permission"::Yes;
                Permission."Execute Permission" := Permission."Execute Permission"::Yes;
                IF NOT Permission.INSERT THEN ;
              END;
            TableType::Post:
              BEGIN
                Permission."Read Permission" := Permission."Read Permission"::Yes;
                Permission."Insert Permission" := Permission."Insert Permission"::Yes;
                Permission."Modify Permission" := Permission."Modify Permission"::" ";
                Permission."Delete Permission" := Permission."Delete Permission"::" ";
                Permission."Execute Permission" := Permission."Execute Permission"::" ";
                IF NOT Permission.INSERT THEN ;
              END;
          END;
        UNTIL AllObj.NEXT = 0;

      COMMIT;

      Confirmed := FALSE;
      IF TestOverride THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM('Add OWR-ALL to all users?',FALSE);

      IF Confirmed THEN BEGIN
        UserRole.GET('OWR-ALL');
        IF User.FIND('-') THEN
          REPEAT
            IF NOT MemberOf.GET(User."User Security ID",'SUPER','') THEN BEGIN
              MemberOf.INIT;
              MemberOf."User Security ID" := User."User Security ID";
              MemberOf."Role ID" := UserRole."Role ID";
              MemberOf."User Name" := User."User Name";
              MemberOf."Role Name" := UserRole.Name;
              IF NOT MemberOf.INSERT THEN ;
            END;
          UNTIL User.NEXT = 0;
      END;

      IF TriggerMessage THEN
        MESSAGE(DefaultOWRRolesSet);
    END;

    PROCEDURE GetOWRTableType@1240020005(TableID@1240030000 : Integer) : Integer;
    VAR
      Object@1240030001 : Record 2000000001;
      TableType@1240020000 : ' ,Setup,Work,Post,Limited';
    BEGIN
      IF NOT Object.GET(Object.Type::Table,'',TableID) THEN
        EXIT(0);

      CASE TableID OF
        DATABASE::"RF Setup":
          EXIT(TableType::Setup);
        DATABASE::"RF Employee Setup":
          EXIT(TableType::Setup);
        DATABASE::"RF Statistics Entry":
          EXIT(TableType::Work);
        DATABASE::"RF Bin Content":
          EXIT(TableType::Work);
        DATABASE::"Whse. Activity Group Header":
          EXIT(TableType::Work);
        DATABASE::"Whse. Activity Group Line":
          EXIT(TableType::Work);
        DATABASE::"Outbound Whse. Request Filter":
          EXIT(TableType::Setup);
        DATABASE::"Outbound Whse. Request Action":
          EXIT(TableType::Setup);
        DATABASE::"Outb. Whse. Req. Action Entry":
          EXIT(TableType::Work);
        DATABASE::"Wave Pick Warehouse Request":
          EXIT(TableType::Work);
        DATABASE::"Reg. Wave Pick Whse. Request":
          EXIT(TableType::Post);
        DATABASE::"Lot Expiration by Bin Buffer":
          EXIT(TableType::Post);
        DATABASE::"Replenishment Rule":
          EXIT(TableType::Work);
        DATABASE::"Pick Request Header":
          EXIT(TableType::Work);
        DATABASE::"Pick Request Line":
          EXIT(TableType::Work);
        DATABASE::"Reg. Pick Request Header":
          EXIT(TableType::Post);
        DATABASE::"Reg. Pick Request Line":
          EXIT(TableType::Post);
        DATABASE::"Archive Pick Request Header":
          EXIT(TableType::Post);
        DATABASE::"Archive Pick Request Line":
          EXIT(TableType::Post);
        DATABASE::"OWR Location Setup":
          EXIT(TableType::Setup);
        DATABASE::"OWR Assisted Setup":
          EXIT(TableType::Setup);
        DATABASE::"OWR Menus":
          EXIT(TableType::Work);
        ELSE
          EXIT(0);
      END;
    END;

    [External]
    PROCEDURE ResetAllOWRSetup@1240020010(TriggerMessage@1240020000 : Boolean);
    BEGIN
      CheckForTestOverride;
      IF TestOverride THEN
        EXIT;

      ResetOWRBaseRelatedSetup(FALSE);
      ResetOWRApplicationData(FALSE);
      ResetOWRSetup(FALSE);
      ResetOWRPermissions(FALSE);

      IF TriggerMessage THEN
        MESSAGE(ResetAllOWRSetupMessage);
    END;

    [External]
    PROCEDURE ResetOWRSetup@1240020000(TriggerMessage@1240020010 : Boolean);
    VAR
      Location@1240020009 : Record 14;
      RFSetup@1240020000 : Record 14002801;
      RFEmployeeSetup@1240020001 : Record 14002802;
      OWRAction@1240020002 : Record 14002864;
      OWRLocationSetup@1240020003 : Record 14099030;
      OWRFilter@1240020004 : Record 14002863;
      ReplenishmentRule@1240020005 : Record 14002867;
      NoSeries@1240020006 : Record 308;
      WhseWorksheetTemplate@1240020007 : Record 7328;
      WhseWorksheetName@1240020008 : Record 7327;
    BEGIN
      CheckForTestOverride;
      IF TestOverride THEN
        EXIT;

      OWRAction.DELETEALL(TRUE);
      OWRFilter.DELETEALL(TRUE);
      ReplenishmentRule.DELETEALL(TRUE);
      RFEmployeeSetup.DELETEALL(TRUE);

      OWRLocationSetup.RESET;
      IF OWRLocationSetup.FINDSET(FALSE) THEN
        REPEAT
          IF NoSeries.GET(OWRLocationSetup."Pick Request No. Series") THEN
            NoSeries.DELETE(TRUE);
        UNTIL OWRLocationSetup.NEXT = 0;

      OWRLocationSetup.RESET;
      OWRLocationSetup.DELETEALL(TRUE);

      IF RFSetup.GET('') THEN BEGIN
        IF RFSetup."Whse. Activity Group Nos." <> '' THEN
          IF NoSeries.GET(RFSetup."Whse. Activity Group Nos.") THEN
            NoSeries.DELETE(TRUE);

        IF RFSetup."Replen Worksheet Name" <> '' THEN BEGIN
          Location.RESET;
          Location.SETRANGE("Directed Put-away and Pick",TRUE);
          IF Location.FINDSET(FALSE) THEN
            REPEAT
              WhseWorksheetTemplate.RESET;
              WhseWorksheetTemplate.SETRANGE(Type,WhseWorksheetTemplate.Type::Movement);
              IF WhseWorksheetTemplate.FIND('-') THEN
                IF WhseWorksheetName.GET(WhseWorksheetTemplate.Name,RFSetup."Replen Worksheet Name",Location.Code) THEN
                  WhseWorksheetName.DELETE(TRUE);
            UNTIL Location.NEXT = 0;
        END;
      END;

      RFSetup.DELETEALL(TRUE);

      IF TriggerMessage THEN
        MESSAGE(ResetOWRSetupMessage);
    END;

    [External]
    PROCEDURE ResetOWRBaseRelatedSetup@1240020002(TriggerMessage@1240020000 : Boolean);
    VAR
      ReplenishmentRule@1240020004 : Record 14002867;
      RFSetup@1240020015 : Record 14002801;
      RFEmployeeSetup@1240020006 : Record 14002802;
      BinContent@1240020003 : Record 7302;
      Bin@1240020002 : Record 7354;
      BinTemplate@1240020011 : Record 7335;
      BinCreationWkstLine@1240020012 : Record 7338;
      Zone@1240020001 : Record 7300;
      WhseEmployee@1240020005 : Record 7301;
      OWRLocationSetup@1240020014 : Record 14099030;
      Location@1240020010 : Record 14;
      NoSeries@1240020009 : Record 308;
      WhseRqst@1240020013 : Record 5765;
      WhseWorksheetTemplate@1240020008 : Record 7328;
      WhseWorksheetName@1240020007 : Record 7327;
    BEGIN
      CheckForTestOverride;
      IF TestOverride THEN
        EXIT;

      OWRLocationSetup.RESET;
      IF OWRLocationSetup.FINDSET(FALSE) THEN
        REPEAT
          IF NoSeries.GET(OWRLocationSetup."Pick Request No. Series") THEN
            NoSeries.DELETE(TRUE);
        UNTIL OWRLocationSetup.NEXT = 0;

      IF RFSetup.GET('') THEN BEGIN
        IF RFSetup."Whse. Activity Group Nos." <> '' THEN
          IF NoSeries.GET(RFSetup."Whse. Activity Group Nos.") THEN
            NoSeries.DELETE(TRUE);

        IF RFSetup."Replen Worksheet Name" <> '' THEN BEGIN
          Location.RESET;
          Location.SETRANGE("Directed Put-away and Pick",TRUE);
          IF Location.FINDSET(FALSE) THEN
            REPEAT
              WhseWorksheetTemplate.RESET;
              WhseWorksheetTemplate.SETRANGE(Type,WhseWorksheetTemplate.Type::Movement);
              IF WhseWorksheetTemplate.FIND('-') THEN
                IF WhseWorksheetName.GET(WhseWorksheetTemplate.Name,RFSetup."Replen Worksheet Name",Location.Code) THEN
                  WhseWorksheetName.DELETE(TRUE);
            UNTIL Location.NEXT = 0;
        END;
      END;

      RFEmployeeSetup.RESET;
      IF RFEmployeeSetup.FINDSET(FALSE) THEN
        REPEAT
          WhseEmployee.RESET;
          WhseEmployee.SETRANGE("RF Employee Setup Code",RFEmployeeSetup.Code);
          IF WhseEmployee.FINDSET(FALSE) THEN
            WhseEmployee.MODIFYALL("RF Employee Setup Code",'');
        UNTIL RFEmployeeSetup.NEXT = 0;

      ReplenishmentRule.RESET;
      IF ReplenishmentRule.FINDSET(FALSE) THEN
        REPEAT
          BinContent.RESET;
          BinContent.SETRANGE("Replenishment Rule",ReplenishmentRule."Replenishment Rule");
          IF BinContent.FINDSET(FALSE) THEN
            BinContent.MODIFYALL("Replenishment Rule",'');

          Bin.RESET;
          Bin.SETRANGE("Default Replenishment Rule",ReplenishmentRule."Replenishment Rule");
          IF Bin.FINDSET(FALSE) THEN
            Bin.MODIFYALL("Default Replenishment Rule",'');

          Zone.RESET;
          Zone.SETRANGE("Default Replenishment Rule",ReplenishmentRule."Replenishment Rule");
          IF Zone.FINDSET(FALSE) THEN
            Zone.MODIFYALL("Default Replenishment Rule",'');
        UNTIL ReplenishmentRule.NEXT = 0;

      BinTemplate.RESET;
      BinTemplate.SETRANGE("Wave Pick Bin",TRUE);
      IF BinTemplate.FINDSET(FALSE) THEN
        BinTemplate.MODIFYALL("Wave Pick Bin",FALSE);

      BinCreationWkstLine.RESET;
      BinCreationWkstLine.SETRANGE("Wave Pick Bin",TRUE);
      IF BinCreationWkstLine.FINDSET(FALSE) THEN
        BinCreationWkstLine.MODIFYALL("Wave Pick Bin",FALSE);

      Bin.RESET;
      Bin.SETRANGE("Wave Pick Bin",TRUE);
      IF Bin.FINDSET(FALSE) THEN
        Bin.MODIFYALL("Wave Pick Bin",FALSE);

      Zone.RESET;
      Zone.SETRANGE("Wave Pick Zone",TRUE);
      IF Zone.FINDSET(FALSE) THEN
        Zone.MODIFYALL("Wave Pick Zone",FALSE);

      WhseRqst.RESET;
      IF WhseRqst.FINDSET(FALSE) THEN
        REPEAT
          WhseRqst."Whse. Completely Handled" := FALSE;
          WhseRqst."Lines Shipped" := FALSE;
          WhseRqst."Wave Pick Bin Code" := '';
          WhseRqst."Picking Priority" := 0;
          WhseRqst."E-Ship Agent Service" := '';
          WhseRqst."EDI Order" := FALSE;
          WhseRqst."Ship-to Code" := '';
          WhseRqst."Ship-to Country Code" := '';
          WhseRqst."First Assembly Order No." := '';
          WhseRqst."Ship-for Code" := '';
          WhseRqst."ATO Pick Required" := FALSE;
          WhseRqst.MODIFY(TRUE);
        UNTIL WhseRqst.NEXT = 0;

      IF TriggerMessage THEN
        MESSAGE(ResetOWRBaseSetupMessage);
    END;

    [External]
    PROCEDURE ResetOWRApplicationData@1240020004(TriggerMessage@1240020000 : Boolean);
    VAR
      RFStatisticsEntry@1240020001 : Record 14002804;
      RFBinContent@1240020002 : Record 14002805;
      WhseActGroupHeader@1240020003 : Record 14002861;
      OWRActionEntry@1240020005 : Record 14002864;
      LotExpBinBuffer@1240020006 : Record 14002866;
      WavePickWhseRqst@1240020007 : Record 14002961;
      RegWavePickWhseRqst@1240020008 : Record 14002962;
      PickRqstHeader@1240020009 : Record 14099020;
      RegPickRqstHeader@1240020010 : Record 14099022;
      ArchPickRqstHeader@1240020011 : Record 14099024;
    BEGIN
      CheckForTestOverride;
      IF TestOverride THEN
        EXIT;

      RFStatisticsEntry.DELETEALL(TRUE);
      RFBinContent.DELETEALL(TRUE);
      WhseActGroupHeader.DELETEALL(TRUE);
      OWRActionEntry.DELETEALL(TRUE);
      LotExpBinBuffer.DELETEALL(TRUE);
      WavePickWhseRqst.DELETEALL(TRUE);
      RegWavePickWhseRqst.DELETEALL(TRUE);
      PickRqstHeader.DELETEALL(TRUE);
      RegPickRqstHeader.DELETEALL(TRUE);
      ArchPickRqstHeader.DELETEALL(TRUE);

      IF TriggerMessage THEN
        MESSAGE(ResetOWRApplicationMessage);
    END;

    [External]
    PROCEDURE ResetOWRPermissions@1240020007(TriggerMessage@1240020000 : Boolean);
    VAR
      PermissionSet@1240020007 : Record 2000000004;
      User@1240020006 : Record 2000000120;
      Permission@1240020005 : Record 2000000005;
      Permission2@1240020001 : Record 2000000005;
      AccessControl@1240020002 : Record 2000000053;
    BEGIN
      CheckForTestOverride;
      IF TestOverride THEN
        EXIT;

      IF PermissionSet.GET('OWR-ALL') THEN BEGIN
        IF User.FINDSET(FALSE) THEN
          REPEAT
            AccessControl.RESET;
            AccessControl.SETRANGE("User Security ID",User."User Security ID");
            AccessControl.SETRANGE("Role ID",PermissionSet."Role ID");
            IF AccessControl.FINDSET(FALSE) THEN
              AccessControl.DELETE(TRUE);
          UNTIL User.NEXT = 0;

        Permission.RESET;
        Permission.SETRANGE("Role ID",PermissionSet."Role ID");
        IF Permission.FINDSET(FALSE) THEN
          REPEAT
            Permission2.RESET;
            IF Permission2.GET(Permission."Role ID",Permission."Object Type",Permission."Object ID") THEN
              Permission2.DELETE(TRUE);
          UNTIL Permission.NEXT = 0;

        Permission.RESET;
        Permission.SETRANGE("Role ID",PermissionSet."Role ID");
        IF Permission.ISEMPTY THEN
          PermissionSet.DELETE(TRUE);
      END;

      IF PermissionSet.GET('OWR-SUPER') THEN BEGIN
        IF User.FIND('-') THEN
          REPEAT
            AccessControl.RESET;
            AccessControl.SETRANGE("User Security ID",User."User Security ID");
            AccessControl.SETRANGE("Role ID",PermissionSet."Role ID");
            IF AccessControl.FINDSET(FALSE) THEN
              AccessControl.DELETE(TRUE);
          UNTIL User.NEXT = 0;

        Permission.RESET;
        Permission.SETRANGE("Role ID",PermissionSet."Role ID");
        IF Permission.FINDSET(FALSE) THEN
          REPEAT
            Permission2.RESET;
            IF Permission2.GET(Permission."Role ID",Permission."Object Type",Permission."Object ID") THEN
              Permission2.DELETE(TRUE);
          UNTIL Permission.NEXT = 0;

        Permission.RESET;
        Permission.SETRANGE("Role ID",PermissionSet."Role ID");
        IF Permission.ISEMPTY THEN
          PermissionSet.DELETE(TRUE);
      END;

      IF PermissionSet.GET('OWR-WORK') THEN BEGIN
        IF User.FIND('-') THEN
          REPEAT
            AccessControl.RESET;
            AccessControl.SETRANGE("User Security ID",User."User Security ID");
            AccessControl.SETRANGE("Role ID",PermissionSet."Role ID");
            IF AccessControl.FINDSET(FALSE) THEN
              AccessControl.DELETE(TRUE);
          UNTIL User.NEXT = 0;

        Permission.RESET;
        Permission.SETRANGE("Role ID",PermissionSet."Role ID");
        IF Permission.FINDSET(FALSE) THEN
          REPEAT
            Permission2.RESET;
            IF Permission2.GET(Permission."Role ID",Permission."Object Type",Permission."Object ID") THEN
              Permission2.DELETE(TRUE);
          UNTIL Permission.NEXT = 0;

        Permission.RESET;
        Permission.SETRANGE("Role ID",PermissionSet."Role ID");
        IF Permission.ISEMPTY THEN
          PermissionSet.DELETE(TRUE);
      END;

      IF TriggerMessage THEN
        MESSAGE(ResetOWRPermissionsMessage);
    END;

    LOCAL PROCEDURE CheckForTestOverride@1240020014();
    VAR
      OWRSingleInstance@1240020000 : Codeunit 14002864;
    BEGIN
      TestOverride := OWRSingleInstance.GetTestCodeunitOverride;
    END;

    BEGIN
    END.
  }
}

