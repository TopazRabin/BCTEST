OBJECT Codeunit 14002365 E.D.I. Create Sales Order
{
  OBJECT-PROPERTIES
  {
    Date=07/30/21;
    Time=[ 6:17:28 AM];
    Modified=Yes;
    Version List=SE0.60.14.02,004;
  }
  PROPERTIES
  {
    TableNo=14002358;
    OnRun=VAR
            QuoteHeader@124002000 : Record 36;
            OrderStatusHdr@1240020002 : Record 14002400;
            MapComments@1240020004 : Codeunit 14002397;
            LastEDISellTo@1240020000 : Code[250];
            LastEDIOverrideShipTo@1240020001 : Code[250];
            LSCommentLines@1000000000 : Record 44;
            TrackingNumberFound@1000000002 : Boolean;
            TrackingNoIndicatorPos@1000000001 : Integer;
          BEGIN
            // Create Order Headers - A different one for each Ship-to
            IF ("Navision Document" <> 'I_SLSORD') AND
               ("Navision Document" <> 'I_SLSQUO') AND
               ("Navision Document" <> 'I_SLSINV') AND
               ("Navision Document" <> 'I_SLSCRM')
            THEN
              ERROR(Text001,"Navision Document");

            EDITemplate.GET("EDI Template Code");
            SalesSetup.GET;
            IF SalesSetup."Enable Shipping" THEN
              ShippingSetup.GET;
            EDIRecDocHdr2.GET("Internal Doc. No.");
            EDIRecDocHdr2."Document Processed" := TRUE;
            IF EDIRecDocHdr2."Company Name" <> COMPANYNAME THEN
              ERROR(
                Text002,
                EDIRecDocHdr2."Internal Doc. No.",EDIRecDocHdr2."Company Name",COMPANYNAME);

            EDIDocument.GET(
              "Trade Partner No.","Navision Document","EDI Document No.","EDI Version",EDIDocument.Type::Import);
            EnablePOChange := EDIDocument."Enable PO Change";
            EDITradePartner.GET(EDIRecDocHdr2."Trade Partner No.");
            GetDocumentType;

            IF "Sales Doc. Created" THEN BEGIN
              IF GUIALLOWED THEN BEGIN
                IF NOT CONFIRM(
                  Text003 +
                  Text004)
                THEN
                  ERROR(Text005)
                ELSE BEGIN
                  ClearStatusFields;
                  IF ((EnablePOChange) AND (EDIRecDocHdr2."Enable Bulk Draw Down" = FALSE)) AND
                      (EDIRecDocHdr2."Navision Document" = 'I_SLSORD') AND
                      (EDIRecDocHdr2."EDI Document No." IN ['850','860','ORDERS','875','876','ORDCHG'])
                  THEN BEGIN
                    QuoteHeader.RESET;
                    QuoteHeader.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
                    QuoteHeader.SETRANGE("EDI Order",TRUE);
                    QuoteHeader.SETRANGE("EDI Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
                    QuoteHeader.SETRANGE("Document Type",QuoteHeader."Document Type"::Quote);
                    IF QuoteHeader.FIND('-') THEN
                      REPEAT
                        IF EDITemplate."PO Change Generates Change Ack" THEN BEGIN
                          OrderStatusHdr.RESET;
                          OrderStatusHdr.SETRANGE("Trade Partner Code",QuoteHeader."EDI Trade Partner");
                          OrderStatusHdr.SETRANGE("Source Doc. Type",QuoteHeader."Document Type");
                          OrderStatusHdr.SETRANGE("Source Doc. No.",QuoteHeader."No.");
                          OrderStatusHdr.SETRANGE("Document Type",OrderStatusHdr."Document Type"::"Order Change Status");
                          OrderStatusHdr.SETRANGE("Buyer Initiated Change",TRUE);
                          IF OrderStatusHdr.FIND('-') THEN
                            OrderStatusHdr.DELETE(TRUE);
                        END;
                        QuoteHeader.DELETE(TRUE);
                      UNTIL QuoteHeader.NEXT = 0;
                  END;
                  EDIRecDocFields.RESET;
                  EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
                  EDIRecDocFields.MODIFYALL("Calculated Date",0D);
                END;
              END ELSE BEGIN
                IF (EDIRecDocHdr."Data Error") AND (EDIRecDocHdr."Sales Invoice Posting Error") THEN BEGIN
                  PostingErrorReprocess := TRUE;
                  PostSalesDocument(PostingDocumentType::Invoice);
                  COMMIT;
                  EXIT;
                END ELSE
                  ERROR(Text005);
              END;
            END;

            EDIRecDocFields.RESET;
            EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
            EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
            EDIRecDocFields.SETRANGE("NAV Table No.",DATABASE::"E.D.I. Receive Document Hdr.");
            EDIRecDocFields.SETRANGE("Nav Field No.",EDIRecDocHdr2.FIELDNO("Special Order"));
            IF EDIRecDocFields.FIND('-') THEN BEGIN
              IF EDIRecDocFields."Field Text Value" = 'TRUE' THEN
                EDIRecDocHdr2."Special Order" := TRUE
              ELSE
                EDIRecDocHdr2."Special Order" := FALSE;
              EDIRecDocHdr2.MODIFY;
            END;
            //TPZEDI
            IsStkRepLocation := FALSE;
            StkRepLocationRec.RESET;
            StkRepLocationRec.SETRANGE("EDI Trading Partner ID",EDITradePartner."No.");
            IF StkRepLocationRec.FINDFIRST THEN BEGIN
              IsStkRepLocation := TRUE;
              StkRepEDITradingPartnerNo := EDITradePartner."No.";
            END;
            //TPZEDI

            EDISetup.GET;

            ForecastRelease := EDIDocument."Enable Forecast and Release";
            ShipToStoreOverride := EDIDocument."Ship-to Store Override";
            IF ShipToStoreOverride THEN BEGIN
              EDIRecDocFields.RESET;
              EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
              EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
              EDIRecDocFields.SETRANGE("NAV Table No.",DATABASE::"Sales Header");
              EDIRecDocFields.SETRANGE("Nav Field No.",SalesHeader.FIELDNO("Ship-to Code"));
              EDIRecDocFields.SETFILTER("Segment Group",'>%1',0);
              IF NOT EDIRecDocFields.FIND('-') THEN
                ShipToStoreOverride := FALSE;
            END;

            EvaluateStdCrossRef := FALSE;
            EvaluateGenCrossRef := FALSE;
            MapGenCrossRef := FALSE;

            IF (EDISetup."Enable General Cross Ref.") THEN BEGIN
              IF (EDITradePartner."Disable General Cross Ref.") THEN
                EvaluateGenCrossRef := FALSE
              ELSE BEGIN
                MapGenCrossRef := TRUE;
                IF (EDISetup."Eval. XRef at Doc. Import") THEN BEGIN
                  IF EDIRecDocHdr2."Gen. XRef Processed On Import" = FALSE THEN
                    EvaluateGenCrossRef := TRUE
                END ELSE
                  EvaluateGenCrossRef := TRUE;
                IF EvaluateGenCrossRef THEN BEGIN
                  CLEAR(EvaluateCrossReference);
                  EvaluateCrossReference.AssignNAVCrossReference(EDIRecDocHdr2);
                END;
              END;
            END ELSE
              EvaluateGenCrossRef := FALSE;

            IF (EDISetup."Pre-evaluate Std. Cross Ref.") THEN BEGIN
              //TPZEDI -
              { original codes
              IF (EDITradePartner."Disable Pre-evaluation") OR
                 (EDIRecDocHdr2."Disable Pre-evaluation")
              THEN
                EvaluateStdCrossRef := FALSE
              ELSE
                EvaluateStdCrossRef := TRUE;
              IF EvaluateStdCrossRef = FALSE THEN BEGIN
                IF (EDISetup."Eval. XRef at Doc. Import") AND
                   (EDITradePartner."Disable Eval XRef at DocImport" = FALSE)
                THEN BEGIN
                  IF EDIRecDocHdr2."Std. XRef Processed On Import" = FALSE THEN
                    EvaluateStdCrossRef := TRUE;
                END ELSE
                  EvaluateStdCrossRef := TRUE;
              END;

              IF EvaluateStdCrossRef THEN BEGIN
                CLEAR(EvaluateCrossReference);
                EvaluateCrossReference.EvaluateCustomerCrossReference(EDIRecDocHdr2);
                EvaluateCrossReference.EvaluateItemCrossReference(EDIRecDocHdr2,DATABASE::"Sales Line");
              END;
              }
              IF (EDITradePartner."Disable Pre-evaluation") OR
                 (EDIRecDocHdr2."Disable Pre-evaluation")
              THEN
                EvaluateStdCrossRef := FALSE
              ELSE BEGIN
                IF EDISetup."Eval. XRef at Doc. Import" THEN BEGIN
                  IF EDIRecDocHdr2."Std. XRef Processed On Import" = FALSE THEN
                    EvaluateStdCrossRef := TRUE;
                END ELSE
                  EvaluateStdCrossRef := TRUE;
                IF EvaluateStdCrossRef THEN BEGIN
                  CLEAR(EvaluateCrossReference);
                  EvaluateCrossReference.EvaluateCustomerCrossReference(EDIRecDocHdr2);
                  EvaluateCrossReference.EvaluateItemCrossReference(EDIRecDocHdr2,DATABASE::"Sales Line");
                END;
              END;
              //TPZEDI
            END ELSE
              EvaluateStdCrossRef := FALSE;

            CrossReferenceError := FALSE;
            IF EvaluateStdCrossRef THEN
              IF ((EDIRecDocHdr2."Customer Cross Ref. Error") OR
                  (EDIRecDocHdr2."Item Cross Ref. Error") OR
                  (EDIRecDocHdr2."UOM Cross Ref. Error")) AND
                  (NOT EDIRecDocHdr2."Disable Pre-evaluation")
              THEN
                CrossReferenceError := TRUE;
            IF EvaluateGenCrossRef THEN BEGIN
              EDIRecDocHdr2.CALCFIELDS("General Cross Reference Error");
              IF EDIRecDocHdr2."General Cross Reference Error" THEN
                CrossReferenceError := TRUE;
            END;
            IF CrossReferenceError THEN
              ERROR(Text039);

            IF GUIALLOWED THEN BEGIN
              ProgressWindow.OPEN(
                Text006 +
                Text007 +
                Text008 +
                Text009 +
                Text010 +
                Text011 +
                Text012 +
                Text013);
              ProgressWindow.UPDATE(1,"Trade Partner No.");
              ProgressWindow.UPDATE(3,"Internal Doc. No.");
              ProgressWindow.UPDATE(4,"Customer No.");
            END;

            EDIRecDocFields.RESET;
            EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","Field Name");
            EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
            IF EDIRecDocFields.FIND('-') THEN
              EDIRecDocFields.MODIFYALL("SLN Group",0);

            EDIShipforCode := '';
            ShipForCode := '';
            MultiLocation := FALSE;
            EDIDiscountFound := FALSE;
            EDILineDiscountFound := FALSE;
            BypassOverrideShipToCode := FALSE;

            GetSLNSegment;

            EDIRecDocFields.RESET;
            EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","Field Name");
            EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
            EDIRecDocFields.SETFILTER(Segment,'%1','SDQ');
            EDIRecDocFields.SETFILTER("Field Name",'%1|%2','SDQ SHIP TO','SDQ SELL TO');
            IF EDIRecDocFields.FIND('-') THEN
              SDQFound := TRUE
            ELSE BEGIN
              EDIRecDocFields.RESET;
              EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","Field Name");
              EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
              EDIRecDocFields.SETFILTER(Segment,'<>%1','SDQ');
              EDIRecDocFields.SETRANGE("Field Name",'SDQ SHIP TO');
              IF EDIRecDocFields.FIND('-') THEN BEGIN
                SDQFound := TRUE;
                MultiLocation := TRUE;
              END;
            END;
            IF SDQFound THEN BEGIN
              FirstSDQShipTo := COPYSTR(EDIRecDocFields."Field Text Value",1,20);
              IF EDITradePartner."Customer No." <> '' THEN
                LastEDISellToCode := EDITradePartner."Customer No."
              ELSE BEGIN
                EDIRecDocFields.RESET;
                EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
                EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
                EDIRecDocFields.SETRANGE("NAV Table No.",36);
                EDIRecDocFields.SETRANGE("Nav Field No.",SalesHeader.FIELDNO("Sell-to Customer No."));
                IF EDIRecDocFields.FIND('-') THEN BEGIN
                  REPEAT
                    LastEDISellTo := EDILocalization.LoadTextFields(LastEDISellTo,EDIRecDocFields);
                  UNTIL EDIRecDocFields.NEXT = 0;
                  LastEDISellToCode := COPYSTR(LastEDISellTo,1,20);

                  EDICustCrossRef.RESET;
                  EDICustCrossRef.SETRANGE("Trade Partner No.",EDIRecDocFields."Trade Partner No.");
                  EDICustCrossRef.SETRANGE("EDI Sell To Code",LastEDISellToCode);
                  EDICustCrossRef.SETRANGE("EDI Ship To Code",FirstSDQShipTo);
                  EDICustCrossRef.FIND('-');
                END;
              END;
              EDIRecDocFields.RESET;
              EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
              EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
              EDIRecDocFields.SETRANGE("NAV Table No.",36);
              EDIRecDocFields.SETRANGE("Nav Field No.",SalesHeader.FIELDNO("Ship-to Code"));
              IF EDIRecDocFields.FIND('-') THEN BEGIN
                REPEAT
                  LastEDIOverrideShipTo :=
                    EDILocalization.LoadTextFields(LastEDIOverrideShipTo,EDIRecDocFields);
                UNTIL EDIRecDocFields.NEXT = 0;
                OverrideEDIShipToCode := COPYSTR(LastEDIOverrideShipTo,1,20);
                EDICustCrossRef.RESET;
                EDICustCrossRef.SETRANGE("Trade Partner No.",EDIRecDocFields."Trade Partner No.");
                EDICustCrossRef.SETRANGE("EDI Sell To Code",LastEDISellToCode);
                EDICustCrossRef.SETRANGE("EDI Ship To Code",OverrideEDIShipToCode);
                EDICustCrossRef.FIND('-');
                IF EDICustCrossRef.COUNT > 1 THEN BEGIN
                  EDICustCrossRef3.COPY(EDICustCrossRef);
                  EDICustCrossRef3.SETFILTER("Effective Date",'<>%1',0D);
                  IF EDICustCrossRef3.FIND('-') THEN BEGIN
                    EDICustCrossRef.SETCURRENTKEY("Effective Date");
                    IsAscending := EDICustCrossRef.ASCENDING;
                    EDICustCrossRef.SETFILTER("Effective Date",'<=%1',TODAY);
                    EDICustCrossRef.FIND('+');
                  END;
                END;
                OverrideShipToCode := EDICustCrossRef."Navision Ship To Code";
              END ELSE BEGIN
                OverrideShipToCode := '';
                OverrideEDIShipToCode := '';
              END;
            END ELSE
              SDQFound := FALSE;

            EDIRecDocFields.RESET;
            EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","Field Name");
            EDIRecDocFields.SETRANGE("Internal Doc. No.","Internal Doc. No.");
            EDIRecDocFields.SETRANGE("Field Name",'SDQ SELL TO');
            IF EDIRecDocFields.FIND('-') THEN BEGIN
              MultipleSellTo := TRUE;
              CLEAR(EDISDQCodeArray);
              CLEAR(SDQCodeArray);
              CLEAR(OverrideEDISDQShipForCodeArray);
              CLEAR(OverrideSDQShipForCodeArray);
              BuildSellToArray(EDIRecDocHdr2);
            END ELSE
              MultipleSellTo := FALSE;

            QuoteReq := FALSE;

            IF EnablePOChange THEN BEGIN
              CASE EDITemplate."Interface File Type" OF
                EDITemplate."Interface File Type"::"X12 Delimited",
                EDITemplate."Interface File Type"::"EDIFACT Delimited":
                  BEGIN
                    EDIRecDocFields.RESET;
                    EDIRecDocFields.SETRANGE("Internal Doc. No.","Internal Doc. No.");
                    IF EDIRecDocFields.FIND('-') THEN
                      REPEAT
                        CASE EDITemplate."Interface File Type" OF
                          EDITemplate."Interface File Type"::"X12 Delimited":
                            BEGIN
                              CASE EDIRecDocFields.Element OF
                               '01':
                                 IF EDIRecDocFields."Field Text Value" <> '' THEN
                                   TranSetPurposeCode := EDIRecDocFields."Field Text Value"
                                 ELSE
                                   TranSetPurposeCode := EDIDocument."PO Change Code when Blank";
                              '02':
                                IF STRLEN(EDIRecDocFields."Field Text Value") < 3 THEN
                                  DocumentTypeCode := EDIRecDocFields."Field Text Value";
                              END;
                            END;
                          EDITemplate."Interface File Type"::"EDIFACT Delimited":
                            BEGIN
                              CASE EDIRecDocFields.Element OF
                                '03','1225':
                                  IF (EDIDocument."EDI Document No." = 'DELJIT') OR
                                     (EDIDocument."EDI Document No." = 'ORDERS') OR
                                     (EDIDocument."EDI Document No." = 'DELFOR') OR
                                     (EDIDocument."EDI Document No." = 'ORDCHG')
                                  THEN BEGIN
                                    IF EDIRecDocFields."Field Text Value" <> '' THEN
                                      TranSetPurposeCode := EDIRecDocFields."Field Text Value"
                                    ELSE
                                      TranSetPurposeCode := EDIDocument."PO Change Code when Blank";
                                 END;
                              END;
                            END;
                        END;
                      UNTIL (EDIRecDocFields.NEXT = 0) OR
                            (EDIRecDocFields."New Segment");
                  END;
                ELSE BEGIN
                  EDIRecDocFields.RESET;
                  EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
                  EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
                  EDIRecDocFields.SETRANGE("NAV Table No.",DATABASE::"E.D.I. Receive Document Hdr.");
                  EDIRecDocFields.SETRANGE("Nav Field No.",EDIRecDocHdr2.FIELDNO("PO Change Purpose Code"));
                  IF EDIRecDocFields.FIND('-') THEN
                    TranSetPurposeCode := EDIRecDocFields."Field Text Value"
                END;
              END;
              IF (TranSetPurposeCode = '') AND (EDIDocument."PO Change Code when Blank" <> '') THEN
                TranSetPurposeCode := EDIDocument."PO Change Code when Blank";
              IF EDIDocument."Process Change as Replacement" THEN
                IF TranSetPurposeCode IN ['4','04','UPDATE'] THEN
                  TranSetPurposeCode := '05';
              IF TranSetPurposeCode = '' THEN
                ERROR(Text038,EDIDocument."EDI Document No.");
              EDIRecDocHdr2."PO Change Purpose Code" := TranSetPurposeCode;
              IF (EDIRecDocHdr2."EDI Document No." = '840') OR
                 (EDIRecDocHdr2."EDI Document No." = 'REQOTE') OR
                 (EDIRecDocHdr2."EDI Document No." = 'QUOTEREQUEST')
              THEN
                QuoteReq := TRUE;
            END;

            EDIRecDocFields.RESET;
            EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
            EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
            EDIRecDocFields.SETRANGE("NAV Table No.",DATABASE::"E.D.I. Receive Document Hdr.");
            EDIRecDocFields.SETRANGE("Nav Field No.",EDIRecDocHdr2.FIELDNO(Original));
            IF EDIRecDocFields.FIND('-') THEN BEGIN
              IF EDIRecDocFields."Field Text Value" = 'TRUE' THEN
                EDIRecDocHdr2.Original := TRUE
              ELSE
                EDIRecDocHdr2.Original := FALSE;
            END ELSE
              IF (EDIDocument."XML Document") AND (TranSetPurposeCode = '') THEN
                EDIRecDocHdr2.Original := TRUE;

            SalesHeader.RESET;
            SalesHeader.SETRANGE("EDI Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
            IF SalesHeader.FIND('-') THEN
              REPEAT
                SalesCommentLine.RESET;
                SalesCommentLine.SETRANGE("Document Type",SalesHeader."Document Type");
                SalesCommentLine.SETRANGE("No.",SalesHeader."No.");
                SalesCommentLine.DELETEALL;
              UNTIL SalesHeader.NEXT = 0;

            EDIDiscount.RESET;
            EDIDiscount.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
            EDIDiscount.DELETEALL;

            EDIDiscountFound := FALSE;
            EDIRecDocFields.RESET;
            EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
            EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
            EDIRecDocFields.SETRANGE("NAV Table No.",DATABASE::"E.D.I. Discount");
            IF EDIRecDocFields.FIND('-') THEN BEGIN
              EDIDiscountFound := TRUE;
              CreateDiscountEntry;
            END ELSE
              EDIDiscountFound := FALSE;

            EDIRecDocFields.RESET;
            EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
            EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
            EDIRecDocFields.SETRANGE("NAV Table No.",DATABASE::"E.D.I. Line Discount");
            IF EDIRecDocFields.FIND('-') THEN
              EDILineDiscountFound := TRUE
            ELSE
              EDILineDiscountFound := FALSE;

            EDIRecDocFields.RESET;
            EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
            EDIRecDocFields.SETRANGE(
              EDIRecDocFields."Internal Doc. No.","Internal Doc. No.");
            EDIRecDocFields.SETRANGE(EDIRecDocFields."NAV Table No.",36);
            IF EDIRecDocFields.FIND('-') THEN BEGIN
              // Locking to prevent Deadlocking
              EDIRecDocHdr.LOCKTABLE;
              EDIRecDocFields.LOCKTABLE;
              IF SalesSetup."Enable Shipping" THEN
                IF ShippingSetup."Enable Bill of Lading" THEN
                  UCC128Sequence.LOCKTABLE;
              NoSeriesLine.LOCKTABLE;
              SalesLine.LOCKTABLE;
              SalesHeader.LOCKTABLE;

              EDIRecDocHdrInfo.RESET;
              EDIRecDocHdrInfo.SETRANGE("Internal Doc. No.","Internal Doc. No.");
              IF EDIRecDocHdrInfo.FIND('-') THEN
                EDIRecDocHdrInfo.DELETEALL;
              EDIRecDocLineInfo.RESET;
              EDIRecDocLineInfo.SETRANGE("Internal Doc. No.","Internal Doc. No.");
              IF EDIRecDocLineInfo.FIND('-') THEN
                EDIRecDocLineInfo.DELETEALL;

              SalesHeader.INIT;
              CLEAR(SalesHeader);
              SalesHeader.SetRunFromEDI(TRUE); //TPZEDI
              SalesHeader.SetHideValidationDialog(TRUE); //TPZEDI
              SalesHeader.SetWHBilling(IsStkRepLocation); //TPZEDI
              //SalesHeader.SetEDITemp(TRUE);

              IF EDIRecDocHdr2."Enable Bulk Draw Down" THEN
                SalesHeader."Document Type" := SalesHeader."Document Type"::Quote
              ELSE BEGIN
                CASE EDIRecDocFields."Navision Document" OF
                  'I_SLSQUO':
                    SalesHeader."Document Type" := SalesHeader."Document Type"::Quote;
                  'I_SLSINV':
                    SalesHeader."Document Type" := SalesHeader."Document Type"::Invoice;
                  'I_SLSCRM':
                    SalesHeader."Document Type" := SalesHeader."Document Type"::"Credit Memo";
                  ELSE BEGIN
                    CASE EDIRecDocFields."EDI Document No." OF
                      '810','880','INVOIC':
                        SalesHeader."Document Type" := SalesHeader."Document Type"::Invoice;
                      '812','CREADV':
                        SalesHeader."Document Type" := SalesHeader."Document Type"::"Credit Memo";
                      '830','DELFOR','GMDELFOR','862','DELJIT','GMDELJIT','840','REQOTE','QUOTEREQUEST':
                        BEGIN
                          SalesHeader."Document Type" := SalesHeader."Document Type"::Quote;
                          CASE "EDI Document No." OF
                            '840','REQOTE','QUOTEREQUEST':
                              IF EDIDocument."Response to Quote Required" THEN
                                SalesHeader."EDI Response to Request Req." := TRUE;
                          END;
                        END;
                      '850','860','ORDERS','875','876','ORDCHG','940','DESADV','ORDERREQUEST':
                        IF EnablePOChange THEN BEGIN
                          IF (TranSetPurposeCode = '00') OR
                             (TranSetPurposeCode = '9') OR
                             (TranSetPurposeCode = 'N') OR
                             (TranSetPurposeCode = 'NEW')
                          THEN
                            SalesHeader."Document Type" := SalesHeader."Document Type"::Order
                          ELSE
                            SalesHeader."Document Type" := SalesHeader."Document Type"::Quote;
                        END ELSE
                          SalesHeader."Document Type" := SalesHeader."Document Type"::Order;
                      '180':
                        SalesHeader."Document Type" := SalesHeader."Document Type"::"Return Order";
                    END;
                    IF DocumentType <> DocumentType::" " THEN
                      CASE DocumentType OF
                        DocumentType::Order,DocumentType::"P.O. Change":
                          IF EnablePOChange THEN BEGIN
                            IF (TranSetPurposeCode = '00') OR
                               (TranSetPurposeCode = '9') OR
                               (TranSetPurposeCode = 'N') OR
                               (TranSetPurposeCode = 'NEW')
                            THEN
                              SalesHeader."Document Type" := SalesHeader."Document Type"::Order
                            ELSE
                              SalesHeader."Document Type" := SalesHeader."Document Type"::Quote;
                          END ELSE
                            SalesHeader."Document Type" := SalesHeader."Document Type"::Order;
                        DocumentType::Invoice:
                          SalesHeader."Document Type" := SalesHeader."Document Type"::Invoice;
                        DocumentType::"Cr. Memo":
                          SalesHeader."Document Type" := SalesHeader."Document Type"::"Credit Memo";
                        DocumentType::"Return Order":
                          SalesHeader."Document Type" := SalesHeader."Document Type"::"Return Order";
                        DocumentType::Quote:
                          SalesHeader."Document Type" := SalesHeader."Document Type"::Quote;
                      END
                  END;
                END;
              END;
              SalesHeader.INSERT(TRUE);
              SalesHeader.SetRunFromEDI(TRUE);
              IF GUIALLOWED THEN
                ProgressWindow.UPDATE(5,SalesHeader."Ship-to Code");
              SalesHeader."EDI Trade Partner" := "Trade Partner No.";
              EDITradePartner.GET("Trade Partner No.");
              IF NOT MultipleSellTo THEN
                ValidateSellToCode("Internal Doc. No.")
              ELSE
                SalesHeader.VALIDATE("Sell-to Customer No.",SDQCodeArray[1]);

              CheckForValidationType;

              IF GUIALLOWED THEN
                ProgressWindow.UPDATE(4,SalesHeader."Sell-to Customer No.");
              //<TPZ2682>
              IF "Trade Partner No." = 'WAYFAIR' THEN
                SalesHeader."Ship-to Code" := 'DS';
              //</TPZ2682>
              EDIRecDocHdr2."Customer No." := SalesHeader."Sell-to Customer No.";
              EDIRecDocHdr2."CSR Code" := SalesHeader."CSR Code"; //TPZEDI
              EDIRecDocHdr2."Sales Order No." := SalesHeader."No."; //TPZEDI
              EDIRecDocHdr2."Ship-to Code" := SalesHeader."Ship-to Code"; //TPZEDI
              IF (EDITradePartner."ISA My Trade Ptnr. No." <> '') THEN BEGIN //<TPZ2561>
                //<TPZ1940>
                IF EDIRecDocHdr2."Shortcut Dimension 5 Code" <> '' THEN
                  SalesHeader.VALIDATE("Shortcut Dimension 5 Code",EDIRecDocHdr2."Shortcut Dimension 5 Code");
                IF EDIRecDocHdr2."Trade Partner No." = 'WAYFAIR' THEN //UTK
                  SalesHeader.VALIDATE("Shortcut Dimension 5 Code",'L');
                //UTK
                IF EDIRecDocHdr2."Trade Partner No." = 'BORDERSTATES' THEN BEGIN
                   EDIRecDocFieldsDIV.RESET;
                  EDIRecDocFieldsDIV.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
                  EDIRecDocFieldsDIV.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
                  EDIRecDocFieldsDIV.SETRANGE("NAV Table No.",37);
                  EDIRecDocFieldsDIV.SETRANGE("Nav Field No.", SalesLine.FIELDNO(SalesLine."No."));
                  IF EDIRecDocFieldsDIV.FINDFIRST THEN
                    IF ItemDiv.GET(EDIRecDocFieldsDIV."Field Text Value") THEN
                      IF ItemDiv."Shortcut Dimension 5 Code" <>'' THEN
                        SalesHeader.VALIDATE("Shortcut Dimension 5 Code", ItemDiv."Shortcut Dimension 5 Code");
                 END;
                //UTK
                //</TPZ1940>
              END ELSE BEGIN //<TPZ2561>
                EDIRecDocFieldsDIV.RESET;
                EDIRecDocFieldsDIV.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
                EDIRecDocFieldsDIV.SETRANGE("Internal Doc. No.",InternalDocNo);
                EDIRecDocFieldsDIV.SETRANGE("NAV Table No.",37);
                EDIRecDocFieldsDIV.SETRANGE("Nav Field No.", SalesLine.FIELDNO(SalesLine."No."));
                IF EDIRecDocFieldsDIV.FINDFIRST THEN
                  IF ItemDiv.GET(EDIRecDocFieldsDIV."Field Text Value") THEN
                    IF ItemDiv."Shortcut Dimension 5 Code" <>'' THEN
                      SalesHeader.VALIDATE("Shortcut Dimension 5 Code", ItemDiv."Shortcut Dimension 5 Code");
              END;//</TPZ2561>
              EDIRecDocHdr2.MODIFY;

              IF (NOT MultipleSellTo) AND (NOT SDQFound) THEN BEGIN
                ValidateShipToCode("Internal Doc. No.");
                OverrideShipToCode := SalesHeader."EDI Ship-to Code";
              END;
              IF GUIALLOWED THEN
                ProgressWindow.UPDATE(5,SalesHeader."Ship-to Code");
              LastShipToCode := SalesHeader."Ship-to Code";
              IF Customer.GET(SalesHeader."Sell-to Customer No.") THEN BEGIN //
                //IF Customer."EDI Invoice" = Customer."EDI Invoice"::Never THEN BEGIN
                IF Customer."EDI Invoice" IN [Customer."EDI Invoice"::Never,Customer."EDI Invoice"::"Rec. Doc. Control"] THEN BEGIN //TPZEDI
                  SalesHeader."EDI Order" := TRUE;
                  SalesHeader."EDI Invoice" := FALSE;
                END ELSE BEGIN
                  SalesHeader."EDI Order" := TRUE;
                  SalesHeader."EDI Invoice" := TRUE;
                END;
              END;
              SalesHeader."Shipment Release" := "Shipment Release";
              SalesHeader."EDI Internal Doc. No." := "Internal Doc. No.";
              SalesHeader."Order Status Required" := EDITradePartner."Order Status Required";
              SalesHeader.VALIDATE(SalesHeader."Order Date",WORKDATE);
             // LStemp
             // SalesHeader.VALIDATE(SalesHeader."Document Date",WORKDATE);
              IF GUIALLOWED THEN
                ProgressWindow.UPDATE(2,SalesHeader."External Document No.");
              IF NOT MultipleSellTo THEN
                BuildShipToArray(Rec);
              i := 1;
              IF SDQCodeArray[1] = '' THEN BEGIN
                SetCustomerLocation(SalesHeader);
                MapSalesHdrFields;
                //<TPZ2306>
                IF Customer.GET(SalesHeader."Sell-to Customer No.") THEN BEGIN //
                  CustDivRec.GET(Customer."No.",SalesHeader."Shortcut Dimension 5 Code");
                  SalesHeader.VALIDATE("Mfr. Rep. Code",CustDivRec."Mfr. Rep. Code");
                END;
                //</TPZ2306>
                IF ThirdPartyAccount <> '' THEN
                  SalesHeader."Third Party Ship. Account No." := ThirdPartyAccount;
                IF GUIALLOWED THEN
                  ProgressWindow.UPDATE(5,SDQCodeArray[i]);
                SalesHeader.MODIFY;
                IF GUIALLOWED THEN
                  ProgressWindow.UPDATE(5,SalesHeader."Ship-to Code");
                IF SalesSetup."Enable Shipping" THEN
                  IF ShippingSetup."Enable Bill of Lading" THEN
                    BuildCustomerPO;
                OrderNoArray[1] := SalesHeader."No.";
              END ELSE BEGIN
                i := 1;
                REPEAT
                  IF MultipleSellTo THEN
                    BuildSalesHeader
                  ELSE BEGIN
                    IF i <> 1 THEN BEGIN
                      SalesHeader2.INIT;
                      CLEAR(SalesHeader2);
                      SalesHeader2."Document Type" := SalesHeader."Document Type";
                      SalesHeader2.INSERT(TRUE);
                      IF GUIALLOWED THEN
                        ProgressWindow.UPDATE(5,SalesHeader2."Ship-to Code");
                      SalesHeader2."EDI Trade Partner" := SalesHeader."EDI Trade Partner";
                      SalesHeader2."EDI Order" := SalesHeader."EDI Order";
                      SalesHeader2."EDI Internal Doc. No." := SalesHeader."EDI Internal Doc. No.";
                      SalesHeader2."Order Status Required" := SalesHeader."Order Status Required";
                      SalesHeader2.VALIDATE("Order Date",WORKDATE);
                      SalesHeader2.VALIDATE("Document Date",WORKDATE);
                      IF NOT SDQFound THEN BEGIN
                        SalesHeader2.VALIDATE("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
                        SalesHeader2.VALIDATE("Ship-to Code",SalesHeader."Ship-to Code");
                      END ELSE BEGIN
                        SalesHeader2.VALIDATE("Sell-to Customer No.",SDQSellToCodeArray[i]);
                        SalesHeader2.VALIDATE("Ship-to Code",SDQCodeArray[i]);
                      END;
                      SalesHeader2."External Sell-to No." := SalesHeader."External Sell-to No.";
                      SalesHeader2."External Ship-to No." := SalesHeader."External Ship-to No.";
                      SalesHeader2."EDI Ship-to Code" := SalesHeader."EDI Ship-to Code";
                      SalesHeader2."EDI Sell-to Code" := SalesHeader."EDI Sell-to Code";
                      SalesHeader2."EDI Ship-for Code" := SalesHeader."EDI Ship-for Code";
                      IF Customer."EDI Invoice" = Customer."EDI Invoice"::Never THEN BEGIN
                        SalesHeader2."EDI Order" := TRUE;
                        SalesHeader2."EDI Invoice" := FALSE;
                      END ELSE BEGIN
                        SalesHeader2."EDI Order" := TRUE;
                        SalesHeader2."EDI Invoice" := TRUE;
                      END;
                      SalesHeader.COPY(SalesHeader2);
                    END;
                    IF GUIALLOWED THEN
                      ProgressWindow.UPDATE(5,SDQCodeArray[i]);
                    IF (OverrideShipToCode <> '') AND (BypassOverrideShipToCode = FALSE) THEN BEGIN
                      SalesHeader.VALIDATE("Ship-to Code",OverrideShipToCode);
                      SalesHeader."EDI Ship-to Code" := OverrideEDIShipToCode;
                      SalesHeader."EDI Ship-for Code" := EDISDQCodeArray[i];
                      SalesHeader."Ship-for Code" := SDQCodeArray[i];
                      SalesHeader."External Ship-to No." := OverrideEDIShipToCode;
                      SalesHeader."External Ship-for No." := EDISDQCodeArray[i];
                    END ELSE BEGIN
                      EDICustCrossRef.RESET;
                      EDICustCrossRef.SETRANGE("Trade Partner No.",EDITradePartner."No.");
                      IF SalesHeader."External Sell-to No." <> '' THEN
                        EDICustCrossRef.SETRANGE("EDI Sell To Code",SalesHeader."External Sell-to No.");
                      EDICustCrossRef.SETRANGE("EDI Ship To Code",EDISDQCodeArray[i]);
                      IF ShipToStoreOverride THEN BEGIN
                        IF ShipToStoreOverrideArray[i] = '' THEN
                          EDICustCrossRef.SETFILTER("Default Dist. Center",'<>%1','')
                        ELSE
                          EDICustCrossRef.SETFILTER("Default Dist. Center",'=%1','');
                      END;
                      EDICustCrossRef.FIND('-');
                      IF EDICustCrossRef.COUNT > 1 THEN BEGIN
                        EDICustCrossRef3.COPY(EDICustCrossRef);
                        EDICustCrossRef3.SETFILTER("Effective Date",'<>%1',0D);
                        IF EDICustCrossRef3.FIND('-') THEN BEGIN
                          EDICustCrossRef.SETCURRENTKEY("Effective Date");
                          IsAscending := EDICustCrossRef.ASCENDING;
                          EDICustCrossRef.SETFILTER("Effective Date",'<=%1',TODAY);
                          EDICustCrossRef.FIND('+');
                        END;
                      END;
                      IF EDICustCrossRef."Default Dist. Center" <> '' THEN BEGIN
                        EDICustCrossRef.RESET;
                        EDICustCrossRef.SETRANGE("Trade Partner No.",EDITradePartner."No.");
                        EDICustCrossRef.SETRANGE("EDI Sell To Code",SalesHeader."External Sell-to No.");
                        EDICustCrossRef.SETRANGE("EDI Ship To Code",EDICustCrossRef."Default Dist. Center");
                        EDICustCrossRef.SETRANGE("Ship-to Type",EDICustCrossRef."Ship-to Type"::"Dist. Center");
                        EDICustCrossRef.FIND('-');
                        IF EDICustCrossRef.COUNT > 1 THEN BEGIN
                          EDICustCrossRef3.COPY(EDICustCrossRef);
                          EDICustCrossRef3.SETFILTER("Effective Date",'<>%1',0D);
                          IF EDICustCrossRef3.FIND('-') THEN BEGIN
                            EDICustCrossRef.SETCURRENTKEY("Effective Date");
                            IsAscending := EDICustCrossRef.ASCENDING;
                            EDICustCrossRef.SETFILTER("Effective Date",'<=%1',TODAY);
                            EDICustCrossRef.FIND('+');
                          END;
                        END;
                        SalesHeader.VALIDATE("Ship-to Code",EDICustCrossRef."Navision Ship To Code");
                        SalesHeader."EDI Ship-to Code" := EDICustCrossRef."EDI Ship To Code";
                        SalesHeader."EDI Ship-for Code" := EDISDQCodeArray[i];
                        SalesHeader."Ship-for Code" := SDQCodeArray[i];
                        SalesHeader."External Ship-to No." := EDICustCrossRef."EDI Ship To Code";
                        SalesHeader."External Ship-for No." := EDISDQCodeArray[i];
                      END ELSE BEGIN
                        IF (OverrideShipToCode = '') AND (BypassOverrideShipToCode = TRUE) THEN
                          SalesHeader.VALIDATE("Sell-to Customer No.",EDICustCrossRef."Navision Sell To Code");
                        SalesHeader.VALIDATE("Ship-to Code",SDQCodeArray[i]);
                        IF OverrideEDISDQShipForCodeArray[i] <> '' THEN BEGIN
                          SalesHeader."EDI Ship-for Code" := OverrideEDISDQShipForCodeArray[i];
                          SalesHeader."External Ship-for No." := OverrideEDISDQShipForCodeArray[i];
                          SalesHeader."Ship-for Code" := OverrideSDQShipForCodeArray[i];
                        END ELSE BEGIN
                          SalesHeader."EDI Ship-for Code" := EDISDQCodeArray[i];
                          SalesHeader."Ship-for Code" := SDQCodeArray[i];
                          SalesHeader."External Ship-for No." := EDISDQCodeArray[i];
                        END;
                        SalesHeader."EDI Ship-to Code" := EDISDQCodeArray[i];
                        SalesHeader."External Ship-to No." := EDISDQCodeArray[i];
                        IF Customer."EDI Invoice" = Customer."EDI Invoice"::Never THEN BEGIN
                          SalesHeader."EDI Order" := TRUE;
                          SalesHeader."EDI Invoice" := FALSE;
                        END ELSE BEGIN
                          SalesHeader."EDI Order" := TRUE;
                          SalesHeader."EDI Invoice" := TRUE;
                        END;
                      END;
                    END;
                    IF GUIALLOWED THEN
                      IF TestMode THEN
                        MESSAGE(Text014,SalesHeader."No.",SalesHeader."Sell-to Customer No.");
                  END;
                  SetCustomerLocation(SalesHeader);
                  MapSalesHdrFields;
                  IF ThirdPartyAccount <> '' THEN
                    SalesHeader."Third Party Ship. Account No." := ThirdPartyAccount;
                  SalesHeader.MODIFY;
                  IF GUIALLOWED THEN
                    ProgressWindow.UPDATE(5,SalesHeader."Ship-to Code");
                  IF SalesSetup."Enable Shipping" THEN
                    IF ShippingSetup."Enable Bill of Lading" THEN
                      BuildCustomerPO;
                  IF GUIALLOWED THEN
                    IF TestMode THEN
                      MESSAGE(Text015,SalesHeader."Ship-to Code");
                  OrderNoArray[i] := SalesHeader."No.";
                  i := i + 1;
                UNTIL SDQCodeArray[i] = '';
              END;
            END ELSE
              ERROR(Text016);

            // Create Order Lines and attach them to the appropriate Order based
            // on Ship-to.
            EDIRecDocFields.RESET;
            EDIRecDocFields.SETRANGE("Internal Doc. No.","Internal Doc. No.");
            LastShipToCode := '';
            LastSellToCode := '';
            LastItemNo := '';
            LastCrossRefNo := '';
            LastItemCrossRefNo := '';
            LastUOM := '';
            LastEDIUOM := '';
            LastQty := 0;
            LastUnitPrice := 0;
            LastEDIUnitPrice := 0;
            LastReleaseNo := '';
            LastShipReqDate := 0D;
            LastKanbanNo := '';
            LastCumulativeQty := 0;
            LastForecastBeginDate := 0D;
            LastForecastEndDate := 0D;
            LastEDICode := '';
            LastShipmentDate := 0D;
            LastEDIID := '';
            ResourceNo := '';
            GLAccountNo := '';
            BeginLineNo := 0;
            EndLineNo := 0;
            Multiplier := 1;
            MultiplierFound := FALSE;
            PrevDiscountGroup := 0;
            LastReqDeliveryDate := 0D;
            CLEAR(LastShipReqDateFormula);
            InternalDocNo := "Internal Doc. No.";
            BlankSDQShipTo := FALSE;
            LastEDITime := 0T;
            LastEDIDateTime := 0DT;
            LastVariantCode := '';
            EvaluateEDITime := FALSE;
            PrevSegmentGroup := 0;
            CLEAR(LastOrderDateFormula);
            CLEAR(LastDocumentDateFormula);

            IF EDIRecDocFields.FIND('-') THEN
              REPEAT
                IF NOT MultipleSellTo THEN BEGIN
                  IF (EDIRecDocFields."Field Name" = 'SDQ SHIP TO') THEN BEGIN
                    IF (COPYSTR(EDIRecDocFields."Field Text Value",1,1) <> ' ') AND
                       (COPYSTR(EDIRecDocFields."Field Text Value",1,1) <> '')
                    THEN BEGIN
                      IF GUIALLOWED THEN
                        IF TestMode THEN
                          MESSAGE(Text017,EDIRecDocFields."Field Text Value");
                       LastShipToCode := EDIRecDocFields."Field Text Value";
                       BlankSDQShipTo := FALSE;
                    END ELSE
                      BlankSDQShipTo := TRUE;
                  END;
                  IF (EDIRecDocFields."Field Name" = 'SDQ STORE NO') AND
                     (COPYSTR(EDIRecDocFields."Field Text Value",1,1) <> ' ') AND
                     (COPYSTR(EDIRecDocFields."Field Text Value",1,1) <> '') THEN BEGIN
                     IF GUIALLOWED THEN
                       IF TestMode THEN
                         MESSAGE(Text017,EDIRecDocFields."Field Text Value");
                    LastShipToCode := EDIRecDocFields."Field Text Value";
                  END;
                END ELSE
                  IF (EDIRecDocFields."Field Name" = 'SDQ SELL TO') AND
                     (COPYSTR(EDIRecDocFields."Field Text Value",1,1) <> ' ') AND
                     (COPYSTR(EDIRecDocFields."Field Text Value",1,1) <> '') THEN BEGIN
                     IF GUIALLOWED THEN
                       IF TestMode THEN
                         MESSAGE(Text017,EDIRecDocFields."Field Text Value");
                    LastSellToCode := EDIRecDocFields."Field Text Value";
                  END;

                IF EDIRecDocFields."NAV Table No." = 37 THEN BEGIN
                  IF (EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine."No.")) AND
                     (EDIRecDocFields."Line Type" = EDIRecDocFields."Line Type"::" ")
                  THEN BEGIN
                      LastItemNo := EDILocalization.LoadTextFields(LastItemNo,EDIRecDocFields);
                      LastCrossRefNo := '';
                      LastItemCrossRefNo := '';
                      ResourceNo := '';
                      GLAccountNo := '';
                      LastVariantCode := '';
                  END;
                  IF (EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine."No.")) AND
                     (EDIRecDocFields."Line Type" <> EDIRecDocFields."Line Type"::" ")
                  THEN BEGIN
                    CASE EDIRecDocFields."Line Type" OF
                      EDIRecDocFields."Line Type"::"G/L Account":
                        BEGIN
                          GLAccountNo := EDIRecDocFields."NAV Cross Ref. Value-1";
                          IF GLAccountNo = '' THEN
                            GLAccountNo := EDIRecDocFields."Field Text Value";
                        END;
                      EDIRecDocFields."Line Type"::Resource:
                        BEGIN
                          ResourceNo := EDIRecDocFields."NAV Cross Ref. Value-1";
                          IF ResourceNo = '' THEN
                            ResourceNo := EDIRecDocFields."Field Text Value";
                        END;
                    END;
                    LastCrossRefNo := '';
                    LastItemNo := '';
                    LastItemCrossRefNo := '';
                    LastVariantCode := '';
                  END;

                  IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine."EDI Item Cross Ref.") THEN BEGIN
                    LastCrossRefNo := EDILocalization.LoadTextFields(LastCrossRefNo,EDIRecDocFields);
                    LastItemNo := '';
                    LastItemCrossRefNo := '';
                    GLAccountNo := '';
                    ResourceNo := '';
                  END;
                  IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine."EDI Unit Price") THEN BEGIN
                    IF EDIRecDocFields.Multiplier THEN
                      LastEDIUnitPrice := LastEDIUnitPrice * EDIRecDocFields."Field Dec. Value"
                    ELSE
                      LastEDIUnitPrice := EDIRecDocFields."Field Dec. Value";
                  END;
                  IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine."Cross-Reference No.") THEN BEGIN
                    LastItemCrossRefNo := EDILocalization.LoadTextFields(LastItemCrossRefNo,EDIRecDocFields);
                    LastCrossRefNo := '';
                    LastItemNo := '';
                    GLAccountNo := '';
                    ResourceNo := '';
                    LastVariantCode := '';
                  END;
                  IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine."EDI Unit of Measure") THEN BEGIN
                    LastEDIUOM := EDILocalization.LoadTextFields(LastEDIUOM,EDIRecDocFields);
                    LastUOM := '';
                  END;
                  IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine."Unit of Measure") THEN
                    LastUOM := EDIRecDocFields."Field Text Value";
                  IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine."Unit Price") THEN BEGIN
                    IF EDIRecDocFields.Multiplier THEN
                      LastUnitPrice := LastUnitPrice * EDIRecDocFields."Field Dec. Value"
                    ELSE
                      LastUnitPrice := EDIRecDocFields."Field Dec. Value";
                  END;
                  IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine.Quantity) THEN BEGIN
                    IF (ForecastRelease) OR (BlankSDQShipTo = FALSE) THEN
                      IF (EDIRecDocFields."Field Integer Value" = 0) AND
                         (EDIRecDocFields."Field Dec. Value" = 0)
                      THEN
                        LastQty := 0;
                    IF EDIRecDocFields."Field Integer Value" <> 0 THEN BEGIN
                      LastQty := EDIRecDocFields."Field Integer Value";
                      IF EDIRecDocFields."Reverse Sign" THEN
                        LastQty := LastQty * -1;
                    END;
                    IF EDIRecDocFields."Field Dec. Value" <> 0 THEN BEGIN
                      LastQty := EDIRecDocFields."Field Dec. Value";
                      IF EDIRecDocFields."Reverse Sign" THEN
                        LastQty := LastQty * -1;
                    END;
                    IF EDIRecDocFields.Multiplier THEN BEGIN
                      MultiplierFound := TRUE;
                      Multiplier := LastQty;
                    END;
                  END;
                  IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine."EDI Release No.") THEN
                    LastReleaseNo := EDILocalization.LoadTextFields(LastReleaseNo,EDIRecDocFields);
                  IF EDIRecDocFields."Nav Field No." =
                    SalesLine.FIELDNO(SalesLine."EDI Ship Req. Date")
                  THEN BEGIN
                    LastShipReqDate := EDIRecDocFields."Field Date Value";
                    IF LastShipReqDate <> 0D THEN BEGIN
                      LastShipReqDate :=
                        CALCDATE(EDIRecDocFields."Forecast Date Formula",LastShipReqDate);
                      EDIRecDocFields."Calculated Date" := LastShipReqDate;
                    END;
                  END;
                  IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine."EDI Kanban No.") THEN
                    LastKanbanNo := EDILocalization.LoadTextFields(LastKanbanNo,EDIRecDocFields);
                  IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine."EDI Cumulative Quantity") THEN
                    LastCumulativeQty := EDIRecDocFields."Field Dec. Value";
                  IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO("EDI Forecast Begin Date") THEN
                    LastForecastBeginDate := EDIRecDocFields."Field Date Value";
                  IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO("EDI Forecast End Date") THEN
                    LastForecastEndDate := EDIRecDocFields."Field Date Value";
                  IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO("EDI Code") THEN
                    LastEDICode := EDILocalization.LoadTextFields(LastEDICode,EDIRecDocFields);
                  IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO("Shipment Date") THEN BEGIN
                    LastShipmentDate := EDIRecDocFields."Field Date Value";
                    IF LastShipmentDate <> 0D THEN BEGIN
                      LastShipmentDate :=
                        CALCDATE(EDIRecDocFields."Forecast Date Formula",LastShipmentDate);
                      EDIRecDocFields."Calculated Date" := LastShipmentDate;
                    END;
                  END;
                  IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO("Requested Delivery Date") THEN BEGIN
                    LastReqDeliveryDate := EDIRecDocFields."Field Date Value";
                    IF LastReqDeliveryDate <> 0D THEN BEGIN
                      LastReqDeliveryDate :=
                        CALCDATE(EDIRecDocFields."Forecast Date Formula",LastReqDeliveryDate);
                      EDIRecDocFields."Calculated Date" := LastReqDeliveryDate;
                    END;
                  END;
                  IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine."EDI ID") THEN
                    LastEDIID := EDILocalization.LoadTextFields(LastEDIID,EDIRecDocFields);
                  IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine."EDI Variant Code") THEN
                    LastVariantCode := EDILocalization.LoadTextFields(LastVariantCode,EDIRecDocFields);
                  IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO("EDI Time") THEN
                    LastEDITime := EDIRecDocFields."Field Time Value";
                  IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO("EDI DateTime") THEN BEGIN
                    LastEDIDateTime := EDIRecDocFields."Field DateTime Value";
                    EvaluateEDITime := TRUE;
                  END;
                END;

                IF BeginLineNo = 0 THEN
                  BeginLineNo := EDIRecDocFields."Line No.";
                IF EDIRecDocFields.Trigger = TRUE THEN BEGIN
                  IF (EDIRecDocFields."NAV Table No." <> DATABASE::"Sales Comment Line") AND
                     (EDIRecDocFields."NAV Table No." <> 10044)
                  THEN BEGIN
                    IF ((SDQFound = TRUE) AND
                        (EDIRecDocFields.Segment = 'SDQ') AND
                        (MultiLocation = FALSE) AND
                        (SLNFound = FALSE)) OR
                       ((SDQFound = TRUE) AND
                        (EDIRecDocFields.Segment <> 'SDQ') AND
                        (MultiLocation = TRUE) AND
                        (SLNFound = FALSE)) OR
                       ((SDQFound = TRUE) AND
                        (SLNFound = TRUE) AND
                        (EDIRecDocFields.Segment = 'SDQ')) OR
                       ((MultipleSellTo = TRUE) AND (EDIRecDocFields.Segment = 'SDQ')) OR
                       (SDQFound = FALSE)
                    THEN BEGIN
                      EndLineNo := EDIRecDocFields."Line No.";
                      IF ((SDQFound = TRUE) AND
                        (SLNFound = TRUE) AND
                        (EDIRecDocFields.Segment = 'SDQ'))
                      THEN
                        MapSLNFields(EDIRecDocFields."Segment Group",LastQty)
                      ELSE
                        CreLine;
                      IF EDIDocument."Enable PO Change" THEN BEGIN
                        IF EDIDocument."Enable Forecast and Release" = FALSE THEN
                          IF PrevSegmentGroup <> 0 THEN
                            IF PrevSegmentGroup <> EDIRecDocFields."Segment Group" THEN
                              LastEDICode := '';
                      END;
                      BeginLineNo := 0;
                      EndLineNo := 0;
                      LastShipReqDate := 0D;
                    END;
                  END;
                END;
                //<TPZ1941>
                IF EDIRecDocFields."Field Name" = 'Base of Unit Price' THEN
                  LastBaseUnitPriceType := EDIRecDocFields."Field Text Value";
                //</TPZ1941>
              UNTIL EDIRecDocFields.NEXT = 0;

            SalesHeader.RESET;
            SalesHeader.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
            SalesHeader.SETRANGE("EDI Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
            IF SalesHeader.FIND('-') THEN BEGIN
              SalesHeader.MODIFYALL("EDI Transaction Date",EDIRecDocHdr2."Transaction Date");
              SalesHeader.MODIFYALL("EDI Transaction Time",EDIRecDocHdr2."Transaction Time");
            END;

            CASE EDIRecDocHdr2."Navision Document" OF
              'I_SLSINV':
                BEGIN
                  EDIRecDocHdr2."Sales Invoice Created" := TRUE;
                  EDIRecDocHdr2."Sales Invoice Created Date" := TODAY;
                  EDIRecDocHdr2."Sales Invoice Created Time" := TIME;
                END;
              'I_SLSCRM':
                BEGIN
                  EDIRecDocHdr2."Sales Cr. Memo Created" := TRUE;
                  EDIRecDocHdr2."Sales Cr. Memo Created Date" := TODAY;
                  EDIRecDocHdr2."Sales Cr. Memo Created Time" := TIME;
                END;
              ELSE BEGIN
                CASE EDIRecDocHdr2."EDI Document No." OF
                  '850','ORDERS','875','ORDERREQUEST':
                    BEGIN
                      EDIRecDocHdr2."Sales Order Created" := TRUE;
                      EDIRecDocHdr2."Sales Order Created Date" := TODAY;
                      EDIRecDocHdr2."Sales Order Created Time" := TIME;
                    END;
                  '810','880','INVOIC','INVOICEDETAILREQUEST':
                    BEGIN
                      EDIRecDocHdr2."Sales Invoice Created" := TRUE;
                      EDIRecDocHdr2."Sales Invoice Created Date" := TODAY;
                      EDIRecDocHdr2."Sales Invoice Created Time" := TIME;
                    END;
                  '812','CREADV':
                    BEGIN
                      EDIRecDocHdr2."Sales Cr. Memo Created" := TRUE;
                      EDIRecDocHdr2."Sales Cr. Memo Created Date" := TODAY;
                      EDIRecDocHdr2."Sales Cr. Memo Created Time" := TIME;
                    END;
                  '940','DESADV':
                    BEGIN
                      EDIRecDocHdr2."Warehouse Ship Order Created" := TRUE;
                      EDIRecDocHdr2."Whse. Ship Order Created Date" := TODAY;
                      EDIRecDocHdr2."Whse. Ship Order Created Time" := TIME;
                    END;
                  '180':
                    BEGIN
                      EDIRecDocHdr2."Sales Return Order Created" := TRUE;
                      EDIRecDocHdr2."Sls. Return Order Created Date" := TODAY;
                      EDIRecDocHdr2."Sls. Return Order Created Time" := TIME;
                    END;
                  '840','REQOTE':
                    BEGIN
                      EDIRecDocHdr2."Sales Quote Created" := TRUE;
                      EDIRecDocHdr2."Sales Quote Created Date" := TODAY;
                      EDIRecDocHdr2."Sales Quote Created Time" := TIME;
                    END;
                END;
                IF DocumentType <> DocumentType::" " THEN
                  CASE DocumentType OF
                    DocumentType::Order:
                      BEGIN
                        EDIRecDocHdr2."Sales Order Created" := TRUE;
                        EDIRecDocHdr2."Sales Order Created Date" := TODAY;
                        EDIRecDocHdr2."Sales Order Created Time" := TIME;
                        EDIRecDocHdr2."Customer Reference No." := SalesHeader."External Document No.";
                      END;
                    DocumentType::Invoice:
                      BEGIN
                        EDIRecDocHdr2."Sales Invoice Created" := TRUE;
                        EDIRecDocHdr2."Sales Invoice Created Date" := TODAY;
                        EDIRecDocHdr2."Sales Invoice Created Time" := TIME;
                        EDIRecDocHdr2."Customer Reference No." := SalesHeader."External Document No.";
                     END;
                    DocumentType::"Cr. Memo":
                      BEGIN
                        EDIRecDocHdr2."Sales Cr. Memo Created" := TRUE;
                        EDIRecDocHdr2."Sales Cr. Memo Created Date" := TODAY;
                        EDIRecDocHdr2."Sales Cr. Memo Created Time" := TIME;
                        EDIRecDocHdr2."Customer Reference No." := SalesHeader."External Document No.";
                      END;
                    DocumentType::"Return Order":
                      BEGIN
                        EDIRecDocHdr2."Sales Return Order Created" := TRUE;
                        EDIRecDocHdr2."Sls. Return Order Created Date" := TODAY;
                        EDIRecDocHdr2."Sls. Return Order Created Time" := TIME;
                        EDIRecDocHdr2."Customer Reference No." := SalesHeader."External Document No.";
                      END;
                    DocumentType::Quote:
                      BEGIN
                        EDIRecDocHdr2."Sales Quote Created" := TRUE;
                        EDIRecDocHdr2."Sales Quote Created Date" := TODAY;
                        EDIRecDocHdr2."Sales Quote Created Time" := TIME;
                        EDIRecDocHdr2."Customer Reference No." := SalesHeader."External Document No.";
                      END;
                  DocumentType::"Warehouse Ship Order":
                    BEGIN
                      EDIRecDocHdr2."Warehouse Ship Order Created" := TRUE;
                      EDIRecDocHdr2."Whse. Ship Order Created Date" := TODAY;
                      EDIRecDocHdr2."Whse. Ship Order Created Time" := TIME;
                    END;
                  END
              END;
            END;

            EDIRecDocHdr2."Sales Doc. Created" := TRUE;
            EDIRecDocHdr2."Sales Doc. Created Date" := TODAY;
            EDIRecDocHdr2."Sales Doc. Created Time" := TIME;
            EDIRecDocHdr2."Customer Reference No." := SalesHeader."External Document No.";
            EDIRecDocHdr2."Data Error" := FALSE;
            EDIRecDocHdr2."Sales Order Status Req." := EDITradePartner."Order Status Required";
            EDIRecDocHdr2."Enable PO Change" := EnablePOChange;
            EDIRecDocHdr2."Cancel Released Order Update" := EDIDocument."Do Not Update Released Order";
            IF SLNFound THEN BEGIN
              EDIRecDocHdr2."Subline Item Detail Used" := TRUE;
              EDIRecDocHdr2."Subline Segment" := SLNSegmentID;
            END ELSE BEGIN
              EDIRecDocHdr2."Subline Item Detail Used" := FALSE;
              EDIRecDocHdr2."Subline Segment" := '';
            END;
            EDIRecDocHdr2."Document Processed" := TRUE;
            IF EvaluateEDITime THEN
              EDIRecDocHdr2."Evaluate EDI Time" := TRUE;
            EDIRecDocHdr2."Document Type" := DocumentType;
            EDIRecDocHdr2.MODIFY;

            IF ((EnablePOChange) AND
                (EDIRecDocHdr2."EDI Document No." = '860') OR
                (EDIRecDocHdr2."EDI Document No." = 'ORDCHG') OR
                (EDIRecDocHdr2."EDI Document No." = '876') OR
                (EDIRecDocHdr2."EDI Document No." = '875'))
            THEN
              SetPOChangeQuantity;

            CreateEDIAlert.UpdateAlertStatus(EDIRecDocHdr2);

            IF ((EDITemplate."Create Order Stat on P.O. Rec.") OR
                (EDITemplate."Create Order Change Status") OR
                (EDITemplate."Create Adv. PO Ack. on Receipt")) AND
               (EDIDocument."Enable Bulk Draw Down" = FALSE)
            THEN BEGIN
              IF (EDITemplate."File Format" = EDITemplate."File Format"::XML) AND
                 (EDITemplate."Interface File Type" <> EDITemplate."Interface File Type"::cXML)
              THEN BEGIN
                 IF EDIRecDocHdr2.Original AND OrderDoc THEN BEGIN
                  IF EDITemplate."Create Order Stat on P.O. Rec." THEN
                    EDISalesOrderStatSend.AutoCreOrderStatDoc(EDIRecDocHdr2,'E_SLSSTA');
                  IF EDITemplate."Create Order Change Status" THEN
                    EDISalesOrderStatSend.AutoCreOrderStatDoc(EDIRecDocHdr2,'E_SLSPOC');
                  IF EDITemplate."Create Adv. PO Ack. on Receipt" THEN
                    EDISalesOrderStatSend.AutoCreOrderStatDoc(EDIRecDocHdr2,'E_ADVPOA');
                END;
              END ELSE
                IF ("EDI Document No." = '850') OR
                   ("EDI Document No." = '875') OR
                   ("EDI Document No." = 'ORDERS') OR
                   ("EDI Document No." = 'ORDERREQUEST') OR
                   (OrderDoc)
                THEN
                  CASE "EDI Document No." OF
                   '850':
                      BEGIN
                        EDIRecDocFields.RESET;
                        EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.",Segment,"Line No.");
                        EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
                        EDIRecDocFields.SETRANGE(Segment,'BEG');
                        EDIRecDocFields.SETRANGE(Element,'01');
                        IF EDIRecDocFields.FIND('-') THEN
                          IF EDIRecDocFields."Field Text Value" = '00' THEN BEGIN
                            IF EDITemplate."Create Order Stat on P.O. Rec." THEN
                              EDISalesOrderStatSend.AutoCreOrderStatDoc(EDIRecDocHdr2,'E_SLSSTA');
                            IF EDITemplate."Create Order Change Status" THEN
                              EDISalesOrderStatSend.AutoCreOrderStatDoc(EDIRecDocHdr2,'E_SLSPOC');
                            IF EDITemplate."Create Adv. PO Ack. on Receipt" THEN
                              EDISalesOrderStatSend.AutoCreOrderStatDoc(EDIRecDocHdr2,'E_ADVPOA');
                          END;
                      END;
                    '875':
                      BEGIN
                        EDIRecDocFields.RESET;
                        EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.",Segment,"Line No.");
                        EDIRecDocFields.SETRANGE("Internal Doc. No.","Internal Doc. No.");
                        EDIRecDocFields.SETRANGE(Segment,'G50');
                        EDIRecDocFields.SETFILTER(Element,'01');
                        IF EDIRecDocFields.FIND('-') THEN
                          IF EDIRecDocFields."Field Text Value" = 'N' THEN BEGIN
                            IF EDITemplate."Create Order Stat on P.O. Rec." THEN
                              EDISalesOrderStatSend.AutoCreOrderStatDoc(EDIRecDocHdr2,'E_SLSSTA');
                            IF EDITemplate."Create Order Change Status" THEN
                             EDISalesOrderStatSend.AutoCreOrderStatDoc(EDIRecDocHdr2,'E_SLSPOC');
                            IF EDITemplate."Create Adv. PO Ack. on Receipt" THEN
                              EDISalesOrderStatSend.AutoCreOrderStatDoc(EDIRecDocHdr2,'E_ADVPOA');
                          END;
                      END;
                    'ORDERS':
                      BEGIN
                        EDIRecDocFields.RESET;
                        EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.",Segment,"Line No.");
                        EDIRecDocFields.SETRANGE("Internal Doc. No.","Internal Doc. No.");
                        EDIRecDocFields.SETRANGE(Segment,'BGM');
                        EDIRecDocFields.SETFILTER(Element,'%1|%2','03','1225');
                        IF EDIRecDocFields.FIND('-') THEN
                          IF EDIRecDocFields."Field Text Value" = '9' THEN BEGIN
                            IF EDITemplate."Create Order Stat on P.O. Rec." THEN
                              EDISalesOrderStatSend.AutoCreOrderStatDoc(EDIRecDocHdr2,'E_SLSSTA');
                            IF EDITemplate."Create Order Change Status" THEN
                              EDISalesOrderStatSend.AutoCreOrderStatDoc(EDIRecDocHdr2,'E_SLSPOC');
                            IF EDITemplate."Create Adv. PO Ack. on Receipt" THEN
                              EDISalesOrderStatSend.AutoCreOrderStatDoc(EDIRecDocHdr2,'E_ADVPOA');
                          END;
                      END;
                    'ORDERREQUEST':
                      BEGIN
                        EDIRecDocFields.RESET;
                        EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
                        EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
                        EDIRecDocFields.SETRANGE("NAV Table No.",DATABASE::"E.D.I. Receive Document Hdr.");
                        EDIRecDocFields.SETRANGE("Nav Field No.",EDIRecDocHdr2.FIELDNO("PO Change Purpose Code"));
                        IF EDIRecDocFields.FIND('-') THEN
                          IF EDIRecDocFields."Field Text Value" = 'new' THEN BEGIN
                            IF EDITemplate."Create Order Stat on P.O. Rec." THEN
                              EDISalesOrderStatSend.AutoCreOrderStatDoc(EDIRecDocHdr2,'E_SLSSTA');
                            IF EDITemplate."Create Order Change Status" THEN
                              EDISalesOrderStatSend.AutoCreOrderStatDoc(EDIRecDocHdr2,'E_SLSPOC');
                            IF EDITemplate."Create Adv. PO Ack. on Receipt" THEN
                              EDISalesOrderStatSend.AutoCreOrderStatDoc(EDIRecDocHdr2,'E_ADVPOA');
                          END;
                      END;
                    ELSE
                      IF (OrderDoc) AND (EDIRecDocHdr2."PO Change Purpose Code" = '00') THEN BEGIN
                        IF EDITemplate."Create Order Stat on P.O. Rec." THEN
                          EDISalesOrderStatSend.AutoCreOrderStatDoc(EDIRecDocHdr2,'E_SLSSTA');
                        IF EDITemplate."Create Order Change Status" THEN
                          EDISalesOrderStatSend.AutoCreOrderStatDoc(EDIRecDocHdr2,'E_SLSPOC');
                        IF EDITemplate."Create Adv. PO Ack. on Receipt" THEN
                          EDISalesOrderStatSend.AutoCreOrderStatDoc(EDIRecDocHdr2,'E_ADVPOA');
                      END;
                  END
            END;
            //<TPZEDI>
            //Create Freight Line
            EDIRecDocFields.RESET;
            EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.",Segment,"Line No.");
            EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
            EDIRecDocFields.SETRANGE(Segment,'SAC');
            EDIRecDocFields.SETRANGE("Field Name", 'FreightChargeMFRRep');
            EDIRecDocFields.SETFILTER(EDIRecDocFields."Field Text Value", '<>%1', '');
            IF EDIRecDocFields.FIND('-') THEN BEGIN
              //<TPZ2314>
              IF EDITradePartner."No." = 'CKDORMAN' THEN
                InsertFreightLine1 (EDIRecDocFields."Field Dec. Value",SalesHeader)
              ELSE
                InsertFreightLine (EDIRecDocFields."Field Dec. Value",SalesHeader);
            END;
            //</TPZ2314>
            //</TPZEDI>
            EDIRecDocFields.RESET;
            EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
            EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
            EDIRecDocFields.SETRANGE("NAV Table No.",DATABASE::"Sales Comment Line");
            EDIRecDocFields.SETRANGE("Nav Field No.",SalesCommentLine.FIELDNO(Comment));
            EDIRecDocFields.SETRANGE("Segment Group",0);
            IF EDIRecDocFields.FIND('-') THEN
              MapComments.MapSalesCommentLine(
                EDIRecDocHdr2,SalesHeader,SalesLine,TRUE,EDIRecDocFields,TRUE);

            //<TPZ2294>
            TradePartner.RESET;
            IF TradePartner.GET(EDIRecDocHdr2."Trade Partner No.") THEN BEGIN
              IF TradePartner."Skip Segment Group Zero" THEN BEGIN
                EDIRecDocFields.RESET;
                EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
                EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
                EDIRecDocFields.SETFILTER("NAV Table No.",'%1|%2',DATABASE::"Sales Comment Line",10044);
                EDIRecDocFields.SETRANGE("Nav Field No.",SalesCommentLine.FIELDNO(Comment));
                EDIRecDocFields.SETRANGE("Segment Group",EDIRecDocFields."Segment Group");
                IF EDIRecDocFields.FIND('-') THEN
                  EDIMapComments.MapSalesCommentLine1(
                    EDIRecDocHdr2,SalesHeader,SalesLine,TRUE,EDIRecDocFields,TRUE)
              END;
            END;
            //</TPZ2294>
            // >> LS003
            IF (EDIRecDocHdr2."Trade Partner No." = 'TO') OR
               (EDIRecDocHdr2."Trade Partner No." = 'EA') OR
               (EDIRecDocHdr2."Trade Partner No." = 'GA') OR
               (EDIRecDocHdr2."Trade Partner No." = 'CA') OR //<TPZ2977>
               (EDIRecDocHdr2."Trade Partner No." = 'CASEY_ILLINOIS') OR //<TPZ3131>
               (EDIRecDocHdr2."Trade Partner No." = 'KOPINTIZ') OR //<TPZ3120>
               (EDIRecDocHdr2."Trade Partner No." = 'EFL') OR //<TPZ3120>
               (EDIRecDocHdr2."Trade Partner No." = 'HE') OR
               (EDIRecDocHdr2."Trade Partner No." = 'DA') THEN BEGIN
                SalesHeader.RESET;
                 SalesHeader.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
                 SalesHeader.SETRANGE("EDI Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
                 IF SalesHeader.FIND('-') THEN
                  IF SalesHeader."Shipping Agent Code" = 'UPS' THEN BEGIN
                      TrackingNumberFound := FALSE;
                      LSCommentLines.RESET;
                      LSCommentLines.SETRANGE("Document Type", SalesHeader."Document Type");
                      LSCommentLines.SETRANGE("No.", SalesHeader."No.");
                      IF LSCommentLines.FIND('-') THEN
                        REPEAT
                         IF COPYSTR(LSCommentLines.Comment,1,2) = '1Z' THEN BEGIN
                            SalesHeader."Package Tracking No." :=  LSCommentLines.Comment;
                            SalesHeader.MODIFY;
                            TrackingNumberFound := TRUE;
                            //-->TPZ3190
                         END ELSE IF (STRPOS(LSCommentLines.Comment,'-') > 0) THEN BEGIN
                           IF COPYSTR(LSCommentLines.Comment,(STRPOS(LSCommentLines.Comment,'-')+1),2) = '1Z' THEN BEGIN
                              SalesHeader."Package Tracking No." :=  COPYSTR(LSCommentLines.Comment,(STRPOS(LSCommentLines.Comment,'-')+1),STRLEN(LSCommentLines.Comment));
                              SalesHeader.MODIFY;
                              TrackingNumberFound := TRUE;
                           END;
                           //<--TPZ3190

                         END;
                        UNTIL (LSCommentLines.NEXT = 0) OR TrackingNumberFound;
                  END ELSE BEGIN
                      TrackingNumberFound := FALSE;
                      LSCommentLines.RESET;
                      LSCommentLines.SETRANGE("Document Type", SalesHeader."Document Type");
                      LSCommentLines.SETRANGE("No.", SalesHeader."No.");
                      IF LSCommentLines.FIND('-') THEN BEGIN
                         REPEAT
                           TrackingNoIndicatorPos := STRPOS(LSCommentLines.Comment,'#');
                           IF (TrackingNoIndicatorPos <> 0) AND (SalesHeader."Package Tracking No." = '') THEN BEGIN
                              SalesHeader.VALIDATE(
                              "Package Tracking No.",
                              Trim(COPYSTR(LSCommentLines.Comment,TrackingNoIndicatorPos + 1,MAXSTRLEN(SalesHeader."Package Tracking No."))));
                              SalesHeader.MODIFY;
                              TrackingNumberFound := TRUE;
                           END;
                         UNTIL (LSCommentLines.NEXT = 0) OR TrackingNumberFound;
                       END;
                  END;
            END;
            // << LS003


            IF (EDIRecDocHdr2."Enable PO Change") AND
               (EDITemplate."PO Change Generates Change Ack") AND
               (EDIRecDocHdr2."PO Change Purpose Code" <> '00') AND
               (EDIRecDocHdr2."PO Change Purpose Code" <> '9') AND
               (EDIRecDocHdr2."PO Change Purpose Code" <> 'N') AND
               (EDIRecDocHdr2."PO Change Purpose Code" <> 'NEW')
            THEN BEGIN
              EDIRecDocFields.RESET;
              EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.",Segment,"Line No.");
              EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
              IF EDIRecDocFields.FIND('-') THEN
                EDISalesOrderStatSend.AutoCreOrderStatDoc(EDIRecDocHdr2,'E_SLSPOC');
            END;


            IF ((EDITemplate."Auto. EDI Release Sales Order") OR
                (EDIDocument."Warehouse Ship Order Required")) AND
               (SalesHeader."Document Type" = SalesHeader."Document Type"::Order)
            THEN BEGIN
              SalesHeader.RESET;
              SalesHeader.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
              SalesHeader.SETRANGE("EDI Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
              IF SalesHeader.FIND('-') THEN
                REPEAT
                  SalesHeader."EDI Released" := TRUE;
                  SalesHeader.MODIFY;
                UNTIL SalesHeader.NEXT = 0;
            END;

            IF EDITemplate."Auto. Release Shipment" AND
              (SalesHeader."Document Type" = SalesHeader."Document Type"::Order) THEN BEGIN
              SalesHeader.RESET;
              SalesHeader.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
              SalesHeader.SETRANGE("EDI Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
              IF SalesHeader.FIND('-') THEN
                REPEAT
                  SalesHeader."Shipment Release" := TRUE;
                  SalesHeader.MODIFY;
                UNTIL SalesHeader.NEXT = 0;
            END;

            COMMIT;

            IF EDIRecDocHdr2."Enable Bulk Draw Down" THEN BEGIN
              IF BulkDrawDown.EvaluateQuotes(EDIRecDocHdr2) THEN
                COMMIT;
            END ELSE BEGIN
              CASE EDIRecDocHdr2."EDI Document No." OF
                '830','DELFOR':
                  IF ForecastRelease THEN BEGIN
                    IF (EDIDocument."Forecast Process Action" = EDIDocument."Forecast Process Action"::" ") OR
                       (EDIDocument."Forecast Process Action" =
                         EDIDocument."Forecast Process Action"::"Process On Receipt")
                    THEN
                      IF ForecastAndRelease.UpdateForecast(EDIRecDocHdr2) THEN
                        COMMIT;
                  END;
                '850','860','875','876','ORDERS','ORDCHG','ORDERREQUEST':
                  CASE TranSetPurposeCode OF
                    '06','6','22','23','29':
                      ERROR(Text037,TranSetPurposeCode);
                    '07','7':
                      ERROR(Text049,TranSetPurposeCode,EDIRecDocHdr2."Customer Reference No.");
                    '01','02','03','04','05','1','2','3','4','5','17','20','21','36','R','DELETE','UPDATE':
                      BEGIN
                        IF EDIDocument."PO Change Process Option" =
                          EDIDocument."PO Change Process Option"::"Process On Receipt"
                        THEN
                          IF SalesDocumentChange.EvaluateChange(EDIRecDocHdr2,EDIDocument) THEN
                        COMMIT;
                      END;
                  END;
                '862','DELJIT':
                  CASE TranSetPurposeCode OF
                    '00','9':
                      BEGIN
                        IF (EDIDocument."Release Process Action" = EDIDocument."Release Process Action"::" ") OR
                           (EDIDocument."Release Process Action" =
                             EDIDocument."Release Process Action"::"Process On Receipt")
                        THEN BEGIN
                          IF ForecastAndRelease.EvaluateQuotes(EDIRecDocHdr2) THEN
                            COMMIT;
                          IF EvaluateEDITime THEN
                            IF ForecastAndRelease.EvaluateEDITime(EDIRecDocHdr2,EDIDocument) THEN
                              COMMIT;
                        END;
                      END;
                    '01','02','03','06','6':
                       ERROR(Text037,TranSetPurposeCode);
                    '04','05','4','5':
                      BEGIN
                        IF (EDIDocument."Release Process Action" = EDIDocument."Release Process Action"::" ") OR
                           (EDIDocument."Release Process Action" =
                             EDIDocument."Release Process Action"::"Process On Receipt")
                        THEN BEGIN
                          IF ForecastAndRelease.EvaluateQuotes(EDIRecDocHdr2) THEN
                            COMMIT;
                          IF EvaluateEDITime THEN
                            IF ForecastAndRelease.EvaluateEDITime(EDIRecDocHdr2,EDIDocument) THEN
                              COMMIT;
                        END;
                      END;
                  END;
                '840','REQOTE':
                  BEGIN
                    IF EnablePOChange THEN
                      CASE TranSetPurposeCode OF
                        '00','9':
                          BEGIN
                          END;
                        '01','1','04','4','05','5':
                          BEGIN
                            SalesHeader."EDI Quote Change Request" := TRUE;
                            SalesHeader.MODIFY;
                            IF EDIDocument."PO Change Process Option" =
                              EDIDocument."PO Change Process Option"::"Process On Receipt"
                            THEN BEGIN
                              SalesDocumentChange.SetProcessType(QuoteReq);
                              IF SalesDocumentChange.EvaluateChange(EDIRecDocHdr2,EDIDocument) THEN
                                COMMIT;
                            END;
                          END;
                        ELSE
                          IF (TranSetPurposeCode <> '00') OR (TranSetPurposeCode <> '9') THEN
                            ERROR(Text037,TranSetPurposeCode);
                    END;
                  END;
                ELSE BEGIN
                  CASE TranSetPurposeCode OF
                    '06','6','22','23','29':
                      ERROR(Text037,TranSetPurposeCode);
                    '07','7':
                      ERROR(Text049,TranSetPurposeCode,EDIRecDocHdr2."Customer Reference No.");
                    '01','02','03','04','05','1','2','3','4','5','17','20','21','36','R','DELETE','UPDATE':
                      BEGIN
                        IF EDIDocument."PO Change Process Option" =
                          EDIDocument."PO Change Process Option"::"Process On Receipt"
                        THEN
                          IF SalesDocumentChange.EvaluateChange(EDIRecDocHdr2,EDIDocument) THEN
                        COMMIT;
                      END;
                  END;
                END;
              END;
            END;

            IF EDITemplate."Auto. Release Sales Order" AND
              (SalesHeader."Document Type" = SalesHeader."Document Type"::Order)
            THEN BEGIN
              SalesHeader.RESET;
              SalesHeader.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
              SalesHeader.SETRANGE("EDI Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
              IF SalesHeader.FIND('-') THEN
                REPEAT
                  ReleaseDocument;
                UNTIL SalesHeader.NEXT = 0;
            END;

            IF EDITemplate."Auto. Release Return Order" AND
              (SalesHeader."Document Type" = SalesHeader."Document Type"::"Return Order")
            THEN BEGIN
              SalesHeader.RESET;
              SalesHeader.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
              SalesHeader.SETRANGE("EDI Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
              IF SalesHeader.FIND('-') THEN
                REPEAT
                  ReleaseDocument;
                UNTIL SalesHeader.NEXT = 0;
            END;

            IF EDITemplate."Auto. Release Sales Cr. Memo" AND
              (SalesHeader."Document Type" = SalesHeader."Document Type"::"Credit Memo")
            THEN BEGIN
              SalesHeader.RESET;
              SalesHeader.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
              SalesHeader.SETRANGE("EDI Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
              IF SalesHeader.FIND('-') THEN
                REPEAT
                  ReleaseDocument;
                UNTIL SalesHeader.NEXT = 0;
            END;

            IF EDITemplate."Auto. Release Sales Invoice" AND
              (SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice)
            THEN BEGIN
              SalesHeader.RESET;
              SalesHeader.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
              SalesHeader.SETRANGE("EDI Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
              IF SalesHeader.FIND('-') THEN
                REPEAT
                  ReleaseDocument;
                UNTIL SalesHeader.NEXT = 0;
            END;
            //<TPZ2301>
            IF (SalesHeader."Shortcut Dimension 5 Code" <> 'L') THEN //AND  (SalesHeader."Shortcut Dimension 5 Code" <> 'P') THEN //utkarsh
              IF NOT CustNONEDI THEN
                PopulateCustEDITPInfo(SalesHeader); //TPZEDI
            //</TPZ2301>
            PostDocument := FALSE;
            IF EDITemplate."Auto. Post Sales Invoice" AND
              (SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice)
            THEN BEGIN
              EDIRecDocHdr2.GET(EDIRecDocHdr2."Internal Doc. No.");
              PostDocument := TRUE;
              EDIRecDocHdr2."Data Error" := TRUE;
              EDIRecDocHdr2."Sales Invoice Posting Error" := TRUE;
              EDIRecDocHdr2."Document Processed" := FALSE;
              EDIRecDocHdr2.MODIFY;
            END;

            IF EDITemplate."Auto. Release Sales Quote" AND
              (SalesHeader."Document Type" = SalesHeader."Document Type"::Quote)
            THEN BEGIN
              SalesHeader.RESET;
              SalesHeader.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
              SalesHeader.SETRANGE("EDI Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
              IF SalesHeader.FIND('-') THEN
                REPEAT
                  ReleaseDocument;
                UNTIL SalesHeader.NEXT = 0;
            END;

            COMMIT;

            IF EDIRecDocHdr2."Whse. Ship. Order Required" THEN BEGIN
              EDIRecDocHdr2.GET(EDIRecDocHdr2."Internal Doc. No.");
              IF NOT CreateWhseShipOrder(EDIRecDocHdr2) THEN
                EDIRecDocHdr2."Whse. Ship Advice Send Error" := TRUE
              ELSE
                EDIRecDocHdr2."Whse. Ship Advice Send Error" := FALSE;
              EDIRecDocHdr2.MODIFY;
            END;

            IF PostDocument THEN BEGIN
              SalesHeader.RESET;
              SalesHeader.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
              SalesHeader.SETRANGE("EDI Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
              IF SalesHeader.FIND('-') THEN
                REPEAT
                  IF SalesHeader.Status = SalesHeader.Status::Open THEN
                    ReleaseDocument;
                  PostSalesDocument(PostingDocumentType::Invoice);
                UNTIL SalesHeader.NEXT = 0;
            END;

            IF GUIALLOWED THEN
              ProgressWindow.CLOSE;


            SalesHeader.SetRunFromEDI(FALSE);
          END;

  }
  CODE
  {
    VAR
      Customer@1240030000 : Record 18;
      UCC128Sequence@1240030001 : Record 14000821;
      EDITemplate@1240030002 : Record 14002350;
      EDITradePartner@1240030003 : Record 14002360;
      EDIRecDocHdr@1240030004 : Record 14002358;
      EDIRecDocHdr2@1240030005 : Record 14002358;
      EDIRecDocField@1240020001 : Record 14002359;
      EDIRecDocFields@1240030006 : Record 14002359;
      EDIRecDocFields2@1240030007 : Record 14002359;
      EDIRecDocFields3@1240030008 : Record 14002359;
      EDIRecDocFields4@1240020023 : Record 14002359;
      EDICustCrossRef@1240030009 : Record 14002362;
      EDICustCrossRef2@1240030010 : Record 14002362;
      ItemUnitOfMeasure@1240030011 : Record 5404;
      NoSeriesLine@1240030012 : Record 309;
      SalesHeader@1240030013 : Record 36;
      SalesHeader2@1240030014 : Record 36;
      SalesLine@1240030015 : Record 37;
      SalesSetup@1240030016 : Record 311;
      ShippingSetup@1240030017 : Record 14000707;
      TradePartnerUnitofMeasure@1240030018 : Record 14002365;
      TradePartnerItem@1240030019 : Record 14002364;
      EDIRecDocHdrInfo@1240030065 : Record 14002371;
      EDIRecDocLineInfo@1240030067 : Record 14002372;
      EDIDocument@1240030071 : Record 14002353;
      EDISetup@1240030084 : Record 14002367;
      SalesCommentLine@1240020004 : Record 44;
      EDIDiscount@1240020011 : Record 14002382;
      EDILineDiscount@1240020013 : Record 14002383;
      SalesHdr@1240020022 : Record 36;
      Item@1240020025 : Record 27;
      ItemCrossReference@1240020026 : Record 5717;
      EDICustCrossRef3@1240020059 : Record 14002362;
      BulkDrawDown@1240030063 : Codeunit 14002406;
      ForecastAndRelease@1240030070 : Codeunit 14002407;
      SalesDocumentChange@1240030074 : Codeunit 14002408;
      EDISalesOrderStatSend@1240030080 : Codeunit 14002400;
      EvaluateCrossReference@1240030082 : Codeunit 14000380;
      CreateEDIAlert@1240020003 : Codeunit 14000375;
      EDILocalization@1240020029 : Codeunit 14002390;
      EDIMapComments@1240020052 : Codeunit 14002397;
      ProgressWindow@1240030021 : Dialog;
      i@1240030022 : Integer;
      j@1240030023 : Integer;
      BeginLineNo@1240030024 : Integer;
      EDISDQCodeArray@1240030025 : ARRAY [5000] OF Code[20];
      EndLineNo@1240030026 : Integer;
      InternalDocNo@1240030027 : Code[10];
      OrderNoArray@1240030028 : ARRAY [5000] OF Code[20];
      LastEDISellToCode@1240030029 : Code[20];
      LastSellToCode@1240030030 : Code[20];
      LastShipToCode@1240030031 : Code[20];
      LastItemNo@1240030032 : Code[20];
      LastCrossRefNo@1240030033 : Code[40];
      LastItemCrossRefNo@1240030034 : Code[20];
      LastUOM@1240030035 : Text[10];
      LastEDIUOM@1240030036 : Code[10];
      LastQty@1240030037 : Decimal;
      LastUnitPrice@1240030038 : Decimal;
      LastEDIUnitPrice@1240030039 : Decimal;
      LastReqDeliveryDate@1240020002 : Date;
      MultipleSellTo@1240030040 : Boolean;
      MultiplierQty@1240030041 : Decimal;
      NavBaseQty@1240030042 : Decimal;
      OrderBaseQty@1240030043 : Decimal;
      OverrideShipToCode@1240030044 : Code[20];
      OverrideEDIShipToCode@1240030045 : Code[20];
      PrevItemNo@1240030046 : Code[20];
      SDQCodeArray@1240030047 : ARRAY [5000] OF Code[20];
      SellToCodeToInsert@1240030048 : Code[20];
      ShipToCodeToInsert@1240030049 : Code[20];
      SalesLineNo@1240030050 : Integer;
      SDQFound@1240030051 : Boolean;
      TestMode@1240030052 : Boolean;
      TotalSalesLines@1240030053 : Integer;
      TotalLineElements@1240030054 : Integer;
      LastReleaseNo@1240030056 : Code[20];
      LastShipReqDate@1240030057 : Date;
      LastKanbanNo@1240030058 : Code[10];
      EDIShipforCode@1240030059 : Code[20];
      ShipForCode@1240030060 : Code[20];
      Text001@1001 : TextConst 'ENU=EDI Navision Document %1 does not match this function.';
      Text002@1002 : TextConst 'ENU=The receive document %1 is for company %2. You are currently in company %3.';
      Text003@1003 : TextConst 'ENU=Sales Document has already been created.\';
      Text004@1004 : TextConst 'ENU=Do you wish to re-create it?';
      Text005@1005 : TextConst 'ENU=Sales Document not created.';
      Text006@1006 : TextConst 'ENU=Creating Sales Documents......\';
      Text007@1007 : TextConst 'ENU=Trading Partner      #1##################\';
      Text008@1008 : TextConst 'ENU=Purchase Order No.   #2##################\';
      Text009@1009 : TextConst 'ENU=Internal Doc No.     #3########\';
      Text010@1010 : TextConst 'ENU=Customer No.         #4##################\';
      Text011@1011 : TextConst 'ENU=Ship-To No.          #5##################\';
      Text012@1012 : TextConst 'ENU=Item No.             #6##################\';
      Text013@1013 : TextConst 'ENU=Creating Lines       @7@@@@@@@@@@@@@@@@@@';
      Text014@1014 : TextConst 'ENU=Sales Document insert %1 %2';
      Text015@1015 : TextConst 'ENU=Insert Sales Document %1';
      Text016@1016 : TextConst 'ENU=There are no fields mapped to the Sales Document.';
      Text017@1017 : TextConst 'ENU=Last ship to code on SDQ line %1';
      Text018@1018 : TextConst 'ENU=Looking for ship to code -%1- -%2- -%3-';
      Text019@1019 : TextConst 'ENU=Found ship to code Order No %1';
      Text020@1020 : TextConst 'ENU=Trade Partner Item Number %1 variant code %2 could not be found for trading partner %3.';
      Text021@1021 : TextConst 'ENU=Navision Unit of Measure %1 can not be found for item %2.';
      Text022@1022 : TextConst 'ENU=Order Unit of Measure %1 can not be found for item %2.';
      Text023@1023 : TextConst 'ENU=Sales line Item No. is blank for Trading Partner %1 Internal Doc. No. %2';
      Text028@1028 : TextConst 'ENU=Insert Sales Document %1 %2 %3';
      FirstSDQShipTo@1240030061 : Code[20];
      SDQSellToCodeArray@1240030062 : ARRAY [5000] OF Code[20];
      WriteInfoRec@1240030066 : Boolean;
      HeaderEntryNo@1240030068 : Integer;
      LineEntryNo@1240030069 : Integer;
      Text033@1033 : TextConst 'ENU=Distribution center %1 not found for store %2.';
      Text034@1034 : TextConst 'ENU=EDI Ship-to Code %1 not found for %2 %3.';
      Text035@1035 : TextConst 'ENU=EDI Ship For Code %1 not found for EDI Sell To Code %2.';
      Text036@1036 : TextConst 'ENU=Insert Ship to code %1 %2 %3';
      TranSetPurposeCode@1240030072 : Code[20];
      DocumentTypeCode@1240030073 : Code[30];
      Text037@1240030075 : TextConst 'ENU=Transaction Set Purpose Code %1 not currently supported.';
      ResourceNo@1240020008 : Code[20];
      GLAccountNo@1240020009 : Code[20];
      LastCumulativeQty@1240030076 : Decimal;
      LastForecastBeginDate@1240030077 : Date;
      LastForecastEndDate@1240030078 : Date;
      LastEDICode@1240030079 : Code[20];
      Text038@1240030081 : TextConst 'ENU=The %1 document does not have a Transaction Set Purpose Code.  Enter code on Document Card.';
      Text039@1000000000 : TextConst 'ENU=EDI Cross references are not setup. \Check Receive Document Details tab to complete cross reference setup.';
      Text040@1000000001 : TextConst 'ENU="Trade Partner %1 EDI Customer Cross Reference not found for EDI Sell to Code %2 EDI Ship to Code %3'';"';
      EDIShipToCode@1240030085 : Code[20];
      ShiptoFound@1240030087 : Boolean;
      EvaluateStdCrossRef@1240030086 : Boolean;
      EvaluateGenCrossRef@1240030083 : Boolean;
      CrossReferenceError@1240030088 : Boolean;
      Text041@1240030089 : TextConst 'ENU=EDI Customer Cross Reference not found for EDI Sell to Code %1 EDI Ship to Code %2.';
      MultiLocation@1240030020 : Boolean;
      EDIDiscountFound@1240020010 : Boolean;
      EDILineDiscountFound@1240020016 : Boolean;
      Version@1240020005 : Integer;
      LastShipmentDate@1240030090 : Date;
      ForecastRelease@1240020000 : Boolean;
      Text042@1240020006 : TextConst 'ENU=EDI Trade Partner UOM cross reference not found for Item No. %1, EDI Unit of Measure %2.';
      Text043@1240020012 : TextConst 'ENU=NAV Cust. Invoice Discount code %1 not found';
      Text044@1240020015 : TextConst 'ENU=NAV Invoice Discount code must be set on Trade Partner %1 %2  EDI Document card.';
      ShipToStoreOverrideArray@1240020014 : ARRAY [5000] OF Code[20];
      ShipToStoreOverride@1240020007 : Boolean;
      BypassOverrideShipToCode@1240020017 : Boolean;
      DiscountUnitPrice@1240020018 : Decimal;
      LastShipReqDateFormula@1240020019 : DateFormula;
      Text045@1240020028 : TextConst 'ENU=Duplicate P.O. No. for Document Date range %1 to %2  has been found for P.O. No.%3 on Sales Order %4 .\';
      Text046@1240020024 : TextConst 'ENU=Duplicate PO No.: Cust. Ledger Entry for Invoice %1 with P.O. No. %2 found.\';
      Text047@1240020020 : TextConst 'ENU=Do you want to create the sales order(s)?';
      PrevDiscountGroup@1240020030 : Integer;
      EnablePOChange@1240020031 : Boolean;
      BlankSDQShipTo@1240020032 : Boolean;
      SLNFound@1240020033 : Boolean;
      LastEDITime@1240020035 : Time;
      LastEDIDateTime@1240020036 : DateTime;
      PostDocument@1240020037 : Boolean;
      PostingErrorReprocess@1240020038 : Boolean;
      Text048@1240020039 : TextConst 'ENU=Sales Invoice with Internal Doc. No. %1 for Trade Partner %2 not found.';
      PostingDocumentType@1240020040 : 'Invoice,Credit Memo';
      SLNGroup@1240020027 : Integer;
      LastEDIID@1240020034 : Code[20];
      PrevEDIShipForCode@1240020043 : Code[20];
      Multiplier@1240020048 : Integer;
      MultiplierFound@1240020049 : Boolean;
      SLNSegmentID@1240020021 : Code[15];
      LastVariantCode@1240020041 : Code[40];
      OverrideEDISDQShipForCodeArray@1240020053 : ARRAY [5000] OF Code[20];
      OverrideSDQShipForCodeArray@1240020054 : ARRAY [5000] OF Code[20];
      Text049@1240020042 : TextConst 'ENU=This transaction was sent with transaction set purpose code %1 and is a duplicate of a previously generated transaction for P.O. %2.\Note: Make Order from the sales quote can be used to create a sales order when needed.';
      MapGenCrossRef@1240020044 : Boolean;
      EvaluateEDITime@1240020045 : Boolean;
      QuoteReq@1240020046 : Boolean;
      ThirdPartyAccount@1240020047 : Code[20];
      PrevSegmentGroup@1240020050 : Integer;
      LastOrderDateFormula@1240020055 : DateFormula;
      LastDocumentDateFormula@1240020056 : DateFormula;
      Text050@1240020057 : TextConst 'ENU=EDI Payment Terms discrepancy for customer %1. NAV payment terms is %2, EDI payment terms is %3.\';
      DateFormulaText@1240020051 : Code[10];
      IsAscending@1240020058 : Boolean;
      OrderDoc@1240020060 : Boolean;
      DocumentType@1240020061 : ' ,Order,Invoice,Cr. Memo,Return Order,P.O. Change,Quote,Warehouse Ship Order';
      StkRepLocationRec@1000000011 : Record 14;
      CustEDITradingPartnerNo@1000000009 : Code[20];
      StkRepEDITradingPartnerNo@1000000008 : Code[20];
      ShippingAgentRec@1000000007 : Record 291;
      StkRepShipAgentXRef@1000000006 : Record 50042;
      SCACCodeRec@1000000005 : Record 50016;
      CustDivRec@1000000004 : Record 50007;
      LastBaseUnitPriceType@1000000003 : Text;
      IsStkRepLocation@1000000002 : Boolean;
      EDISellToCustNo@1000000010 : Code[20];
      CustNONEDI@1000000012 : Boolean;
      EDISellToCustNoLogic@1000000013 : Boolean;
      TradePartner@1000000014 : Record 14002360;
      EDIRecDocFieldsDIV@1000000016 : Record 14002359;
      ItemDiv@1000000015 : Record 27;

    PROCEDURE CreLine@9();
    VAR
      DocumentTotals@1240020000 : Codeunit 57;
      TotalSalesLine@1240020001 : Record 37;
      VATAmount@1240020002 : Decimal;
    BEGIN
      IF ((LastQty = 0) AND (SDQFound) AND (BlankSDQShipTo)) AND
         (NOT ForecastRelease) OR
         ((LastQty = 0) AND MultipleSellTo)
      THEN
        BEGIN
          BeginLineNo := 0;
          EndLineNo := 0;
          EXIT;
        END;
      IF SDQCodeArray[1] = '' THEN
        i := 1
      ELSE BEGIN
        i := 0;
        IF NOT MultipleSellTo THEN BEGIN
          REPEAT
            i := i + 1;
            IF GUIALLOWED THEN
              IF TestMode THEN
                MESSAGE(
                  Text018,LastShipToCode,SDQCodeArray[i],EDISDQCodeArray[i],i);
          UNTIL (LastShipToCode = EDISDQCodeArray[i]) OR (LastShipToCode = OverrideEDISDQShipForCodeArray[i]);
        END ELSE
          REPEAT
            i := i + 1;
            IF GUIALLOWED THEN
              IF TestMode THEN
                MESSAGE(
                  Text018,LastShipToCode,SDQCodeArray[i],EDISDQCodeArray[i],i);
          UNTIL (LastSellToCode = EDISDQCodeArray[i]);
      END;
      IF GUIALLOWED THEN
        IF TestMode THEN
          MESSAGE(Text019,OrderNoArray[i]);

      SalesHeader.GET(SalesHeader."Document Type",OrderNoArray[i]);

      IF GUIALLOWED THEN
        ProgressWindow.UPDATE(5,SalesHeader."Ship-to Code");
      SalesLine.SETRANGE(SalesLine."Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE(SalesLine."Document No.",SalesHeader."No.");
      IF SalesLine.FIND('+') THEN
        SalesLineNo := SalesLine."Line No." + 10000
      ELSE
        SalesLineNo := 10000;
      SalesLine.INIT;
      SalesLine.SetRunFromEDI(TRUE);
      SalesLine."Document Type" := SalesHeader."Document Type";
      SalesLine."Document No." := SalesHeader."No.";
      SalesLine."Line No." := SalesLineNo;
      SalesLine."Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
      SalesLine.INSERT(TRUE);
      //TPZEDI
      IF SalesHeader."Bill-to Customer No." <> '' THEN
        SalesLine."Bill-to Customer No." := SalesHeader."Bill-to Customer No."
      ELSE
        SalesLine."Bill-to Customer No." := SalesLine."Sell-to Customer No.";
       //TPZEDI

      IF (ResourceNo <> '') OR (GLAccountNo <> '') THEN BEGIN
        MultiplierQty := 1;
        IF ResourceNo <> '' THEN BEGIN
          SalesLine.Type := SalesLine.Type::Resource;
          SalesLine.VALIDATE("No.",ResourceNo);
        END;
        IF GLAccountNo <> '' THEN BEGIN
          SalesLine.Type := SalesLine.Type::"G/L Account";
          SalesLine.VALIDATE("No.",GLAccountNo);
        END;
        IF LastQty = 0 THEN
          SalesLine.VALIDATE(Quantity,1)
        ELSE
          SalesLine.VALIDATE(Quantity,LastQty);
        IF LastUnitPrice <> 0 THEN
          SalesLine.VALIDATE("Unit Price",LastUnitPrice);
        LastUnitPrice := 0
      END ELSE BEGIN
        SalesLine.Type := SalesLine.Type::Item;
        IF (LastCrossRefNo <> '') OR (LastItemCrossRefNo <> '') THEN BEGIN
          IF LastItemCrossRefNo <> '' THEN
            SalesLine.VALIDATE(SalesLine."Cross-Reference No.",LastItemCrossRefNo);
          IF LastCrossRefNo <> '' THEN BEGIN
            TradePartnerItem.RESET;
            TradePartnerItem.SETCURRENTKEY("Trade Partner No.","Partner Item No.");
            TradePartnerItem.SETRANGE("Trade Partner No.",EDIRecDocHdr2."Trade Partner No.");
            TradePartnerItem.SETRANGE("Partner Item No.",LastCrossRefNo);
            TradePartnerItem.SETRANGE("Partner Variant Code",LastVariantCode);
            IF NOT TradePartnerItem.FIND('-') THEN
              ERROR(
                Text020,
                LastCrossRefNo,LastVariantCode,EDIRecDocHdr2."Trade Partner No.");
            SalesLine.VALIDATE("No.",TradePartnerItem."Navision Item No.");
            IF LastVariantCode <> '' THEN BEGIN
              SalesLine.VALIDATE("Variant Code",TradePartnerItem."Navision Variant Code");
              SalesLine."EDI Variant Code" := LastVariantCode;
            END;
            SalesLine."EDI Item Cross Ref." := LastCrossRefNo;
          END;
        END ELSE
          IF LastItemNo <> '' THEN
            SalesLine.VALIDATE(SalesLine."No.",LastItemNo); //TPZEDITMP

        MultiplierQty := 1;
        IF LastEDIUOM <> '' THEN BEGIN
          TradePartnerUnitofMeasure.RESET;
          TradePartnerUnitofMeasure.SETCURRENTKEY("Trade Partner No.","EDI Unit of Measure");
          TradePartnerUnitofMeasure.SETRANGE("Trade Partner No.",EDIRecDocFields."Trade Partner No.");
          TradePartnerUnitofMeasure.SETRANGE("EDI Unit of Measure",LastEDIUOM);
          TradePartnerUnitofMeasure.SETRANGE("Navision Item No.",SalesLine."No.");
          TradePartnerUnitofMeasure.SETRANGE("Navision Variant Code",SalesLine."Variant Code");
          IF NOT TradePartnerUnitofMeasure.FIND('-') THEN
            TradePartnerUnitofMeasure.SETRANGE("Navision Item No.",'');
            TradePartnerUnitofMeasure.SETRANGE("Navision Variant Code",'');
          IF TradePartnerUnitofMeasure.FIND('-') THEN BEGIN
            IF NOT ItemUnitOfMeasure.GET(
                     SalesLine."No.",TradePartnerUnitofMeasure."Navision Unit of Measure")
            THEN
              ERROR(
                Text021,
                TradePartnerUnitofMeasure."Navision Unit of Measure",
                SalesLine."No.")
            ELSE
              NavBaseQty := ItemUnitOfMeasure."Qty. per Unit of Measure";
            IF NOT ItemUnitOfMeasure.GET(SalesLine."No.",TradePartnerUnitofMeasure."Order Unit of Measure") THEN
              ERROR(
                Text022,
                TradePartnerUnitofMeasure."Order Unit of Measure",
                SalesLine."No.")
            ELSE
              OrderBaseQty := ItemUnitOfMeasure."Qty. per Unit of Measure";
            MultiplierQty := OrderBaseQty / NavBaseQty;
            LastQty := LastQty / MultiplierQty;
            IF MultiplierFound THEN
              LastQty := LastQty * Multiplier;
            SalesLine.VALIDATE(SalesLine."Unit of Measure Code",TradePartnerUnitofMeasure."Order Unit of Measure");
            SalesLine."EDI Unit of Measure" := LastEDIUOM;
          END ELSE
            ERROR(Text042,SalesLine."No.",LastEDIUOM);
        END;

        IF (LastItemCrossRefNo <> '') AND (SalesLine."Cross-Reference No." = '') THEN
          SalesLine."Cross-Reference No." := LastItemCrossRefNo;
        SalesLine."EDI Original Qty." := LastQty;
        SalesLine."EDI Release No." := LastReleaseNo;
        SalesLine."EDI Kanban No." := LastKanbanNo;
        SalesLine."EDI Cumulative Quantity" := LastCumulativeQty;
        SalesLine."EDI Forecast Begin Date" := LastForecastBeginDate;
        SalesLine."EDI Forecast End Date" := LastForecastEndDate;
        SalesLine."EDI Code" := LastEDICode;
        SalesLine.VALIDATE(SalesLine.Quantity,LastQty);
        SalesLine."EDI ID" := LastEDIID;
        SalesLine.VALIDATE("EDI DateTime",LastEDIDateTime);
        IF (ForecastRelease) AND (LastEDIDateTime <> 0DT) THEN BEGIN
          LastShipReqDate := DT2DATE(LastEDIDateTime);
          LastEDITime := DT2TIME(LastEDIDateTime);
        END;
        SalesLine.VALIDATE("EDI Time",LastEDITime);
        IF LastUnitPrice <> 0 THEN
          SalesLine.VALIDATE("Unit Price",LastUnitPrice * MultiplierQty);
       END;
       SalesLine."EDI Segment Group" := EDIRecDocFields."Segment Group";

      IF ForecastRelease THEN
        CASE EDIRecDocHdr2."EDI Document No." OF
          '830','DELFOR':
            BEGIN
              IF EDIDocument."Create Release from Forecast" THEN
                SalesLine."EDI Line Type" := SalesLine."EDI Line Type"::"Forecast & Release"
              ELSE
                SalesLine."EDI Line Type" := SalesLine."EDI Line Type"::Forecast;
              IF SalesLine."EDI Release No." = '' THEN
                SalesLine."EDI Release No." := SalesHeader."External Document No.";
              CASE EDIDocument."Forecast Period" OF
                EDIDocument."Forecast Period"::Weekly:
                  IF LastForecastEndDate = 0D THEN BEGIN
                    IF LastForecastBeginDate <> 0D THEN
                      SalesLine."EDI Forecast End Date" := CALCDATE('+6D',LastForecastBeginDate);
                  END;
                EDIDocument."Forecast Period"::Monthly:
                  IF LastForecastEndDate = 0D THEN BEGIN
                    IF LastForecastBeginDate <> 0D THEN
                      SalesLine."EDI Forecast End Date" := CALCDATE('+1M-1D',LastForecastBeginDate);
                  END;
                ELSE
                  IF LastForecastEndDate = 0D THEN BEGIN
                    IF LastForecastBeginDate <> 0D THEN
                      SalesLine."EDI Forecast End Date" :=
                        CALCDATE(EDIRecDocFields."Forecast Date Formula",LastForecastBeginDate);
                  END;
              END;
              SalesLine.VALIDATE("Shipment Date",LastShipReqDate);
            END;
          '862','DELJIT':
            BEGIN
              SalesLine."EDI Line Type" := SalesLine."EDI Line Type"::Release;
              SalesLine.VALIDATE("Shipment Date",LastShipReqDate);
              IF SalesLine."EDI Release No." = '' THEN
                SalesLine."EDI Release No." := SalesHeader."External Document No.";
            END;
        END;

      IF EnablePOChange THEN
        IF EDIRecDocHdr2."EDI Document No." IN ['840','850','860','875','876','ORDERS','ORDCHG','REQOTE','ORDERREQUEST'] THEN
          SalesLine."EDI Line Type" := SalesLine."EDI Line Type"::Change;

      SalesLine.MODIFY;
      TotalSalesLines := TotalSalesLines + 1;
      IF GUIALLOWED THEN BEGIN
        IF TotalSalesLines MOD 10 = 0 THEN
          IF TotalLineElements <> 0 THEN BEGIN
            IF GUIALLOWED THEN
              ProgressWindow.UPDATE(7,ROUND(10000 * (TotalSalesLines / TotalLineElements),1));
          END;
      END;
      IF PrevItemNo <> SalesLine."No." THEN BEGIN
        PrevItemNo := SalesLine."No.";
        IF GUIALLOWED THEN
          ProgressWindow.UPDATE(6,PrevItemNo);
      END;
      EDIRecDocFields."Document No." := SalesLine."Document No.";
      EDIRecDocFields."Document Line No." := SalesLine."Line No.";
      EDIRecDocFields.MODIFY;

      EDIRecDocFields2.RESET;
      EDIRecDocFields2.SETCURRENTKEY("Internal Doc. No.","Segment Group");
      EDIRecDocFields2.SETRANGE("Internal Doc. No.",InternalDocNo);
      EDIRecDocFields2.SETRANGE("Segment Group",EDIRecDocFields."Segment Group");
      EDIRecDocFields2.SETFILTER(Segment,'<>%1','SDQ');
      IF EDIRecDocFields2.FIND('-') THEN BEGIN
        CLEAR(EDIRecDocLineInfo);
        REPEAT
          MapSalesLineFields;
        UNTIL EDIRecDocFields2.NEXT = 0;
      END;

      EDIRecDocFields2.RESET;
      EDIRecDocFields2.SETCURRENTKEY("Internal Doc. No.","Segment Group");
      EDIRecDocFields2.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocFields2.SETRANGE("Segment Group",EDIRecDocFields."Segment Group");
      EDIRecDocFields2.SETRANGE(Segment,SLNSegmentID);
      IF EDIRecDocFields2.FIND('-') THEN BEGIN
        SLNGroup := 0;
        REPEAT
          IF (EDIRecDocFields2."New Segment") AND
             (EDIRecDocFields2.Segment = SLNSegmentID)
          THEN
            SLNGroup := SLNGroup + 1;
          EDIRecDocFields2."SLN Group" := SLNGroup;
          EDIRecDocFields2.MODIFY;
        UNTIL EDIRecDocFields2.NEXT = 0;
        IF EDIRecDocFields.Segment = SLNSegmentID THEN BEGIN
          EDIRecDocFields.GET(EDIRecDocFields."Internal Doc. No.",EDIRecDocFields."Line No.");
          EDIRecDocFields2.RESET;
          EDIRecDocFields2.SETCURRENTKEY("Internal Doc. No.","Segment Group");
          EDIRecDocFields2.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
          EDIRecDocFields2.SETRANGE("Segment Group",EDIRecDocFields."Segment Group");
          EDIRecDocFields2.SETRANGE(Segment,SLNSegmentID);
          EDIRecDocFields2.SETRANGE("SLN Group",EDIRecDocFields."SLN Group");
          IF EDIRecDocFields2.FIND('-') THEN
            REPEAT
              EDIRecDocFields2."SLN Document Line No." := SalesLine."Line No.";
              IF MultiplierFound THEN BEGIN
                IF (EDIRecDocFields2."NAV Table No." = DATABASE::"Sales Line") AND
                   (EDIRecDocFields2."Nav Field No." = SalesLine.FIELDNO(Quantity))
                THEN
                  EDIRecDocFields2."Extended Quantity" := LastQty;
              END;
              EDIRecDocFields2.MODIFY;
            UNTIL EDIRecDocFields2.NEXT = 0;
        END;
      END;

      IF WriteInfoRec THEN BEGIN
        LineEntryNo := LineEntryNo + 1;
        EDIRecDocLineInfo."Entry No." := LineEntryNo;
        EDIRecDocLineInfo.INSERT;
        WriteInfoRec := FALSE;
      END;

      SalesLine."EDI Ship Req. Date" := LastShipReqDate;
      IF LastShipmentDate <> 0D THEN
        SalesLine.VALIDATE("Shipment Date",LastShipmentDate);
      IF LastReqDeliveryDate <> 0D THEN
        SalesLine.VALIDATE("Requested Delivery Date",LastReqDeliveryDate);
      IF LastEDIUnitPrice <> 0 THEN BEGIN
        SalesLine.VALIDATE(SalesLine."EDI Unit Price",LastEDIUnitPrice);
        CASE TRUE OF
          SalesLine."Line Discount %" = 0:
            BEGIN
              CASE TRUE OF
                SalesLine."Unit Price" <> SalesLine."EDI Unit Price":
                  SalesLine."EDI Price Discrepancy" := TRUE;
                SalesLine."Unit Price" = SalesLine."EDI Unit Price":
                  SalesLine."EDI Price Discrepancy" := FALSE;
              END;
            END;
          ELSE BEGIN
            DiscountUnitPrice :=
              SalesLine."Unit Price" - (SalesLine."Unit Price" * (SalesLine."Line Discount %" / 100));
            DiscountUnitPrice := ROUND(DiscountUnitPrice,0.01);
            IF DiscountUnitPrice <> SalesLine."EDI Unit Price" THEN
              SalesLine."EDI Price Discrepancy" := TRUE;
          END;
        END;
      END;
      SalesLine.VALIDATE("Location Code", SalesHeader."Location Code");//TPZEDI
      IF SalesHeader."Topaz WH Billing" THEN BEGIN
        //SalesLine."Qty. to Ship" := SalesLine.Quantity; //TPZEDI
       // SalesLine."Qty. to Invoice" := SalesLine.Quantity; //TPZEDI
      END;
      SalesLine.MODIFY;
      SalesLine.CALCFIELDS("Reserved Qty. (Base)");
      IF (SalesLine."Outstanding Qty. (Base)" > SalesLine."Reserved Qty. (Base)") THEN
        IF (SalesLine.Reserve = SalesLine.Reserve::Always) THEN
          SalesLine.AutoReserve;//dinesh

      IF SalesLine."No." = '' THEN
        ERROR(
          Text023,
          EDIRecDocHdr."Trade Partner No.",EDIRecDocHdr."Internal Doc. No.");
      SalesLine.MODIFY;
      BeginLineNo := 0;
      EndLineNo := 0;
      LastForecastBeginDate := 0D;
      LastForecastEndDate := 0D;
      IF EDIDocument."Single Date Release" = FALSE THEN
        LastShipReqDate := 0D;
      LastShipmentDate := 0D;
      LastReqDeliveryDate := 0D;
      LastEDITime := 0T;
      LastEDIDateTime := 0DT;
      CLEAR(LastShipReqDateFormula);
      IF EDIDocument."Enable PO Change" = FALSE THEN BEGIN
        IF EDIDocument."Enable Forecast and Release" = FALSE THEN BEGIN
          LastEDICode := '';
          LastReleaseNo := '';
        END;
      END;
      LastQty := 0;
      PrevSegmentGroup := EDIRecDocFields."Segment Group";

      EDIRecDocFields2.RESET;
      EDIRecDocFields2.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocFields2.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocFields2.SETRANGE("NAV Table No.",10044);
      EDIRecDocFields2.SETRANGE("Nav Field No.",SalesCommentLine.FIELDNO(Comment));
      EDIRecDocFields2.SETRANGE("Segment Group",EDIRecDocFields."Segment Group");
      IF EDIRecDocFields2.FIND('-') THEN
        EDIMapComments.MapSalesCommentLine(
          EDIRecDocHdr2,SalesHeader,SalesLine,TRUE,EDIRecDocFields2,FALSE);

      IF DocumentTotals.SalesCheckNumberOfLinesLimit(SalesHeader) THEN
        DocumentTotals.SalesRedistributeInvoiceDiscountAmounts(SalesLine,VATAmount,TotalSalesLine);

      SalesLine.SetRunFromEDI(FALSE);
    END;

    PROCEDURE ValidateSellToCode@11(InternalDocNo@1240030000 : Code[20]);
    VAR
      LastEDISellTo@1240020001 : Code[250];
      LastEDIShipTo@1240020000 : Code[250];
      CrossReferenceFound@1240020002 : Boolean;
    BEGIN
      EDIShipToCode := '';
      LastEDIShipTo := '';
      LastEDISellTo := '';
      ShiptoFound := FALSE;
      // >> LS005
      EDISellToCustNoLogic := FALSE;
      // << LS005

      EDIRecDocFields2.RESET;
      EDIRecDocFields2.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocFields2.SETRANGE("Internal Doc. No.",InternalDocNo);

      EDIRecDocFields2.SETRANGE("NAV Table No.",36);
      EDIRecDocFields2.SETRANGE("Nav Field No.",SalesHeader.FIELDNO(SalesHeader."Ship-to Code"));
      IF EDIRecDocFields2.FIND('-') THEN BEGIN
        ShiptoFound := TRUE;
        REPEAT
          LastEDIShipTo := EDILocalization.LoadTextFields(LastEDIShipTo,EDIRecDocFields2);
        UNTIL EDIRecDocFields2.NEXT = 0;
        EDIShipToCode := COPYSTR(LastEDIShipTo,1,20);
      END;

      CrossReferenceFound := FALSE;
      EDIRecDocFields2.RESET;
      EDIRecDocFields2.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocFields2.SETRANGE("Internal Doc. No.",InternalDocNo);
      EDIRecDocFields2.SETRANGE("NAV Table No.",36);
      EDIRecDocFields2.SETRANGE("Nav Field No.",SalesHeader.FIELDNO(SalesHeader."Sell-to Customer No."));
      IF EDIRecDocFields2.FIND('-') THEN BEGIN
        REPEAT
          LastEDISellTo := EDILocalization.LoadTextFields(LastEDISellTo,EDIRecDocFields2);
        UNTIL EDIRecDocFields2.NEXT = 0;
        EDICustCrossRef.RESET;
        EDICustCrossRef.SETRANGE("Trade Partner No.",EDITradePartner."No.");
        EDICustCrossRef.SETRANGE("EDI Sell To Code",COPYSTR(LastEDISellTo,1,20));
        IF ShiptoFound THEN
          EDICustCrossRef.SETRANGE("EDI Ship To Code",EDIShipToCode);
        IF EDICustCrossRef.FIND('-') THEN BEGIN
          IF EDICustCrossRef.COUNT > 1 THEN BEGIN
            EDICustCrossRef3.COPY(EDICustCrossRef);
            EDICustCrossRef3.SETFILTER("Effective Date",'<>%1',0D);
            IF EDICustCrossRef3.FIND('-') THEN BEGIN
              EDICustCrossRef.SETCURRENTKEY("Effective Date");
              IsAscending := EDICustCrossRef.ASCENDING;
              EDICustCrossRef.SETFILTER("Effective Date",'<=%1',TODAY);
              IF EDICustCrossRef.FIND('+') THEN
                CrossReferenceFound := TRUE
              ELSE
                CrossReferenceFound := FALSE;
            END ELSE
              CrossReferenceFound := TRUE;
          END ELSE
            CrossReferenceFound := TRUE;
        END ELSE
          CrossReferenceFound := FALSE;
        IF CrossReferenceFound THEN BEGIN
          SalesHeader.VALIDATE("Sell-to Customer No.",EDICustCrossRef."Navision Sell To Code");
          SalesHeader."External Sell-to No." := COPYSTR(LastEDISellTo,1,20);
          SalesHeader."EDI Sell-to Code" := COPYSTR(LastEDISellTo,1,20);
          IF EDICustCrossRef."EDI Ship To Code" <> '' THEN BEGIN
            SalesHeader."External Ship-to No." := '';
            SalesHeader."External Ship-for No." := '';
            SalesHeader."EDI Ship-to Code" := '';
            SalesHeader."EDI Ship-for Code" := '';
            EXIT;
          END;
          IF EDICustCrossRef."Navision Ship To Code" <> '' THEN BEGIN
            CASE EDICustCrossRef."Ship-to Type" OF
              EDICustCrossRef."Ship-to Type"::Store:
                BEGIN
                  SalesHeader.VALIDATE(
                    SalesHeader."Ship-to Code",EDICustCrossRef."Navision Ship To Code");
                  SalesHeader."External Ship-to No." := EDICustCrossRef."EDI Ship To Code";
                  SalesHeader."EDI Ship-to Code" := EDICustCrossRef."EDI Ship To Code";
                  SalesHeader."External Ship-for No." := EDICustCrossRef."EDI Ship To Code";
                  SalesHeader."Ship-for Code" := EDICustCrossRef."Navision Ship To Code";
                  SalesHeader."EDI Ship-for Code" := EDICustCrossRef."EDI Ship To Code";
                END;
              EDICustCrossRef."Ship-to Type"::"Dist. Center":
                BEGIN
                  SalesHeader.VALIDATE(
                    SalesHeader."Ship-to Code",EDICustCrossRef."Navision Ship To Code");
                  SalesHeader."External Ship-to No." := EDICustCrossRef."EDI Ship To Code";
                  SalesHeader."EDI Ship-to Code" := EDICustCrossRef."EDI Ship To Code";
                  SalesHeader."External Ship-for No." := EDICustCrossRef."EDI Ship To Code";
                  SalesHeader."EDI Ship-for Code" := EDICustCrossRef."EDI Ship To Code";
                  SalesHeader."Ship-for Code" := EDICustCrossRef."Navision Ship To Code";
                END;
            END;
          END;
        //<TPZEDI>
        //ORIGINAL CODES
        //END ELSE
        //  ERROR(Text041,COPYSTR(LastEDISellTo,1,20),EDIShipToCode);;
        //ORIGINAL CODES
        END ELSE BEGIN
          EDISellToCustNo := COPYSTR(EDIRecDocFields2."Field Text Value",1,20);
      // >> LS005
          EDISellToCustNoLogic := TRUE;
      // << LS005
          IF Customer.GET(EDISellToCustNo) THEN BEGIN
            SalesHeader."Sell-to Customer No." := Customer."No.";
            SalesHeader."External Sell-to No." := Customer."No."; //SSDTMP
            SalesHeader.SetRunFromEDI(TRUE);

            IF Customer."Bill-to Customer No." <> '' THEN
              SalesHeader.VALIDATE("Bill-to Customer No.",Customer."Bill-to Customer No.")
            ELSE
              SalesHeader.VALIDATE("Bill-to Customer No.", SalesHeader."Sell-to Customer No.");

            IF ShiptoFound THEN
              SalesHeader."Ship-to Code" := EDIShipToCode;
            CustNONEDI := FALSE;
            IF NOT (Customer."EDI Invoice" IN[Customer."EDI Invoice"::Always]) AND
                    (Customer."EDI Trade Partner" = '')
            THEN BEGIN
              CustNONEDI := TRUE;
              SalesHeader."Sell-to Customer No." := EDISellToCustNo;
              SalesHeader.VALIDATE("External Sell-to No.",EDISellToCustNo);
              SalesHeader."Ship-to Code" := EDIShipToCode;
              SalesHeader."EDI Invoice" := FALSE;
            END ELSE
              CustEDITradingPartnerNo := Customer."EDI Trade Partner";
          END ELSE
            ERROR(Text041,COPYSTR(LastEDISellTo,1,20),EDIShipToCode);
        END;
        //</TPZEDI>

        //<TPZEDI>
        EDIRecDocFields2.RESET;
        EDIRecDocFields2.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
        EDIRecDocFields2.SETRANGE("Internal Doc. No.",InternalDocNo);
        EDIRecDocFields2.SETRANGE("NAV Table No.",36);
        IF  (EDITradePartner."ISA My Trade Ptnr. No." <> '')THEN //<TPZ2561>
        EDIRecDocFields2.SETRANGE("Nav Field No.", SalesHeader.FIELDNO(SalesHeader."Shortcut Dimension 5 Code"));
        IF EDIRecDocFields2.FINDFIRST THEN BEGIN
          SalesHeader.SetWHBilling(IsStkRepLocation);
          //<TPZ2561>
          IF  (EDITradePartner."ISA My Trade Ptnr. No." = '') THEN BEGIN
            EDIRecDocFieldsDIV.RESET;
            EDIRecDocFieldsDIV.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
            EDIRecDocFieldsDIV.SETRANGE("Internal Doc. No.",InternalDocNo);
            EDIRecDocFieldsDIV.SETRANGE("NAV Table No.",37);
            EDIRecDocFieldsDIV.SETRANGE("Nav Field No.", SalesLine.FIELDNO(SalesLine."No."));
            IF EDIRecDocFieldsDIV.FINDLAST THEN
              IF ItemDiv.GET(EDIRecDocFieldsDIV."Field Text Value") THEN
                IF ItemDiv."Shortcut Dimension 5 Code" <>'' THEN
                  SalesHeader.VALIDATE("Shortcut Dimension 5 Code", ItemDiv."Shortcut Dimension 5 Code");
          END ELSE BEGIN //</TPZ2561>
            SalesHeader.VALIDATE("Shortcut Dimension 5 Code", COPYSTR(EDIRecDocFields2."Field Text Value", 1,1));
          END;//</TPZ2561>
        // >> LS001
          IF Customer.GET(SalesHeader."Sell-to Customer No.") THEN BEGIN
        // << LS001
          CustDivRec.GET(Customer."No.",SalesHeader."Shortcut Dimension 5 Code");
          SalesHeader.VALIDATE("Mfr. Rep. Code",CustDivRec."Mfr. Rep. Code");
          //<TPZ2059>
          CustDivRec.CALCFIELDS("RSM Code");
          //</TPZ2059>
          SalesHeader.VALIDATE("RSM Code",CustDivRec."RSM Code");
          SalesHeader.VALIDATE("CSR Code",CustDivRec."CSR Code");
        // >> LS001
          END;
        // << LS001
        END;
        //</TPZEDI>
      END ELSE BEGIN
        CrossReferenceFound := FALSE;
        IF (EDITradePartner."Customer No." = '') AND
           (NOT SDQFound) AND
           (NOT MultipleSellTo)
        THEN BEGIN
          EDIRecDocFields2.SETRANGE("Nav Field No.",SalesHeader.FIELDNO(SalesHeader."Ship-to Code"));
          IF EDIRecDocFields2.FIND('-') THEN BEGIN
            REPEAT
              LastEDIShipTo := EDILocalization.LoadTextFields(LastEDIShipTo,EDIRecDocFields2);
            UNTIL EDIRecDocFields2.NEXT = 0;
            EDICustCrossRef.SETCURRENTKEY("EDI Ship To Code");
            EDICustCrossRef.SETRANGE("EDI Ship To Code",COPYSTR(LastEDIShipTo,1,20));
            EDICustCrossRef.SETRANGE("Trade Partner No.",EDITradePartner."No.");
            IF EDICustCrossRef.FIND('-') THEN BEGIN
              IF EDICustCrossRef.COUNT > 1 THEN BEGIN
                EDICustCrossRef3.COPY(EDICustCrossRef);
                EDICustCrossRef3.SETFILTER("Effective Date",'<>%1',0D);
                IF EDICustCrossRef3.FIND('-') THEN BEGIN
                  EDICustCrossRef.SETCURRENTKEY("Effective Date");
                  IsAscending := EDICustCrossRef.ASCENDING;
                  EDICustCrossRef.SETFILTER("Effective Date",'<=%1',TODAY);
                  IF EDICustCrossRef.FIND('+') THEN
                    CrossReferenceFound := TRUE
                  ELSE
                    CrossReferenceFound := FALSE;
                END ELSE
                  CrossReferenceFound := TRUE;
              END ELSE
                CrossReferenceFound := TRUE;
            END ELSE
              CrossReferenceFound := FALSE;
            IF CrossReferenceFound THEN BEGIN
              SalesHeader.VALIDATE("Sell-to Customer No.",EDICustCrossRef."Navision Sell To Code");
              SalesHeader."External Sell-to No." := EDICustCrossRef."EDI Sell To Code";
              SalesHeader."External Ship-to No." := '';
              SalesHeader."External Ship-for No." := '';
              SalesHeader."EDI Sell-to Code" := EDICustCrossRef."EDI Sell To Code";
              //SalesHeader."EDI Ship-to Code" := ''; //TPZ1947
              SalesHeader."EDI Ship-for Code" := '';
            END;
          END;
        END ELSE BEGIN
          IF SDQFound THEN BEGIN
            EDICustCrossRef.RESET;
            EDICustCrossRef.SETCURRENTKEY("EDI Ship To Code");
            EDICustCrossRef.SETRANGE("EDI Ship To Code",FirstSDQShipTo);
            EDICustCrossRef.SETRANGE("Trade Partner No.",EDITradePartner."No.");
            EDICustCrossRef.SETRANGE("EDI Sell To Code", LastEDISellToCode);
            EDICustCrossRef.FIND('-');
            IF EDICustCrossRef.COUNT > 1 THEN BEGIN
              EDICustCrossRef3.COPY(EDICustCrossRef);
              EDICustCrossRef3.SETFILTER("Effective Date",'<>%1',0D);
              IF EDICustCrossRef3.FIND('-') THEN BEGIN
                EDICustCrossRef.SETCURRENTKEY("Effective Date");
                IsAscending := EDICustCrossRef.ASCENDING;
                EDICustCrossRef.SETFILTER("Effective Date",'<=%1',TODAY);
                EDICustCrossRef.FIND('+');
              END;
            END;
            SalesHeader.VALIDATE("Sell-to Customer No.",EDICustCrossRef."Navision Sell To Code");
            SalesHeader."External Sell-to No." := EDICustCrossRef."EDI Sell To Code";
            SalesHeader."External Ship-to No." := '';
            SalesHeader."External Ship-for No." := '';
            SalesHeader."EDI Sell-to Code" := EDICustCrossRef."EDI Sell To Code";
            SalesHeader."EDI Ship-to Code" := '';
            SalesHeader."EDI Ship-for Code" := '';
          END ELSE BEGIN
            SalesHeader.VALIDATE("Sell-to Customer No.",EDITradePartner."Customer No.");
            SalesHeader."External Sell-to No." := EDITradePartner."Customer No.";
            SalesHeader."External Ship-to No." := '';
            SalesHeader."External Ship-for No." := '';
            SalesHeader."EDI Sell-to Code" := EDITradePartner."Customer No.";
            SalesHeader."EDI Ship-to Code" := '';
            SalesHeader."EDI Ship-for Code" := '';
          END;
        END;
      END;
    END;

    PROCEDURE ValidateShipToCode@16(InternalDocNo@1240030000 : Code[20]) : Code[20];
    VAR
      LastEDIShipTo@1240020000 : Code[250];
      LastEDIShipFor@1240020001 : Code[250];
      CrossReferenceFound@1240020002 : Boolean;
    BEGIN
      //<TPZ1947>
      // >> LS005
      //IF (EDISellToCustNo = '') OR IsStkRepLocation THEN
      IF ((EDISellToCustNo = '') AND (EDISellToCustNoLogic)) OR IsStkRepLocation THEN
      // << LS005
        EXIT;
      //</TPZ1947>

      EDIRecDocFields2.RESET;
      EDIRecDocFields2.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocFields2.SETRANGE("Internal Doc. No.",InternalDocNo);
      EDIRecDocFields2.SETRANGE("NAV Table No.",36);
      EDIRecDocFields2.SETRANGE("Nav Field No.",SalesHeader.FIELDNO(SalesHeader."Ship-to Code"));
      IF EDIRecDocFields2.FIND('-') THEN BEGIN
        REPEAT
          LastEDIShipTo := EDILocalization.LoadTextFields(LastEDIShipTo,EDIRecDocFields2);
        UNTIL EDIRecDocFields2.NEXT = 0;
        CrossReferenceFound := FALSE;
        EDICustCrossRef.RESET;
        EDICustCrossRef.SETRANGE("Trade Partner No.",EDITradePartner."No.");
        EDICustCrossRef.SETRANGE("EDI Sell To Code",SalesHeader."External Sell-to No.");
        EDICustCrossRef.SETRANGE("EDI Ship To Code",COPYSTR(LastEDIShipTo,1,20));
        IF EDICustCrossRef.FIND('-') THEN BEGIN
          IF EDICustCrossRef.COUNT > 1 THEN BEGIN
            EDICustCrossRef3.COPY(EDICustCrossRef);
            EDICustCrossRef3.SETFILTER("Effective Date",'<>%1',0D);
            IF EDICustCrossRef3.FIND('-') THEN BEGIN
              EDICustCrossRef.SETCURRENTKEY("Effective Date");
              IsAscending := EDICustCrossRef.ASCENDING;
              EDICustCrossRef.SETFILTER("Effective Date",'<=%1',TODAY);
              IF EDICustCrossRef.FIND('+') THEN
                CrossReferenceFound := TRUE
              ELSE
                CrossReferenceFound := FALSE;
            END ELSE
              CrossReferenceFound := TRUE;
          END ELSE
            CrossReferenceFound := TRUE;
        END ELSE
          CrossReferenceFound := FALSE;
        IF CrossReferenceFound THEN BEGIN
          IF EDICustCrossRef."Default Dist. Center" <> '' THEN BEGIN
            CrossReferenceFound := FALSE;
            EDICustCrossRef2.RESET;
            EDICustCrossRef2.SETRANGE("Trade Partner No.",EDITradePartner."No.");
            EDICustCrossRef2.SETRANGE("EDI Sell To Code",SalesHeader."External Sell-to No.");
            EDICustCrossRef2.SETRANGE("EDI Ship To Code",EDICustCrossRef."Default Dist. Center");
            IF EDICustCrossRef2.FIND('-') THEN BEGIN
              IF EDICustCrossRef2.COUNT > 1 THEN BEGIN
                EDICustCrossRef3.COPY(EDICustCrossRef2);
                EDICustCrossRef3.SETFILTER("Effective Date",'<>%1',0D);
                IF EDICustCrossRef3.FIND('-') THEN BEGIN
                  EDICustCrossRef2.SETCURRENTKEY("Effective Date");
                  IsAscending := EDICustCrossRef2.ASCENDING;
                  EDICustCrossRef2.SETFILTER("Effective Date",'<=%1',TODAY);
                  IF EDICustCrossRef2.FIND('+') THEN
                    CrossReferenceFound := TRUE
                  ELSE
                    CrossReferenceFound := FALSE;
                END ELSE
                  CrossReferenceFound := TRUE;
              END ELSE
                CrossReferenceFound := TRUE;
            END ELSE
              CrossReferenceFound := FALSE;
            IF CrossReferenceFound THEN BEGIN
              SalesHeader.VALIDATE(
                SalesHeader."Ship-to Code",EDICustCrossRef2."Navision Ship To Code");
              SalesHeader."External Ship-to No." := EDICustCrossRef2."EDI Ship To Code";
              SalesHeader."EDI Ship-to Code" := EDICustCrossRef2."EDI Ship To Code";
              SalesHeader."External Ship-for No." := EDICustCrossRef."EDI Ship To Code";
              SalesHeader."EDI Ship-for Code" := EDICustCrossRef."EDI Ship To Code";
              SalesHeader."Ship-for Code" := EDICustCrossRef."Navision Ship To Code";
            END ELSE
              ERROR(
                Text033,
                EDICustCrossRef."Default Dist. Center",
                EDICustCrossRef."EDI Ship To Code");
          END ELSE BEGIN
            SalesHeader.VALIDATE(
              SalesHeader."Ship-to Code",EDICustCrossRef."Navision Ship To Code");
            SalesHeader."External Ship-to No." := EDICustCrossRef."EDI Ship To Code";
            SalesHeader."EDI Ship-to Code" := EDICustCrossRef."EDI Ship To Code";
            SalesHeader."External Ship-for No." := EDICustCrossRef."EDI Ship To Code";
            SalesHeader."EDI Ship-for Code" := EDICustCrossRef."EDI Ship To Code";
            SalesHeader."Ship-for Code" := EDICustCrossRef."Navision Ship To Code";
          END;
        END ELSE
          ERROR(Text034,
            COPYSTR(EDIRecDocFields2."Field Text Value",1,20),
            EDITradePartner."No.",
            SalesHeader."Sell-to Customer No.");
      END;

      EDIRecDocFields.RESET;
      EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocFields.SETRANGE("NAV Table No.",36);
      EDIRecDocFields.SETRANGE("Nav Field No.",SalesHeader.FIELDNO("Ship-for Code"));
      IF EDIRecDocFields.FIND('-') THEN BEGIN
        REPEAT
          LastEDIShipFor := EDILocalization.LoadTextFields(LastEDIShipFor,EDIRecDocFields);
        UNTIL EDIRecDocFields.NEXT = 0;
        EDIShipforCode := COPYSTR(LastEDIShipFor,1,20);
        CrossReferenceFound := FALSE;
        EDICustCrossRef.RESET;
        EDICustCrossRef.SETRANGE("Trade Partner No.",EDIRecDocFields."Trade Partner No.");
        EDICustCrossRef.SETRANGE("EDI Sell To Code",SalesHeader."EDI Sell-to Code");
        EDICustCrossRef.SETRANGE("EDI Ship To Code",EDIShipforCode);
        IF EDICustCrossRef.FIND('-') THEN BEGIN
          IF EDICustCrossRef.COUNT > 1 THEN BEGIN
            EDICustCrossRef3.COPY(EDICustCrossRef);
            EDICustCrossRef3.SETFILTER("Effective Date",'<>%1',0D);
            IF EDICustCrossRef3.FIND('-') THEN BEGIN
              EDICustCrossRef.SETCURRENTKEY("Effective Date");
              IsAscending := EDICustCrossRef.ASCENDING;
              EDICustCrossRef.SETFILTER("Effective Date",'<=%1',TODAY);
              IF EDICustCrossRef.FIND('+') THEN
                CrossReferenceFound := TRUE
              ELSE
                CrossReferenceFound := FALSE;
            END ELSE
              CrossReferenceFound := TRUE;
          END ELSE
            CrossReferenceFound := TRUE;
        END ELSE
          CrossReferenceFound := FALSE;
        IF CrossReferenceFound THEN BEGIN
          EDIShipforCode := EDICustCrossRef."EDI Ship To Code";
          ShipForCode := EDICustCrossRef."Navision Ship To Code";
        END ELSE
          ERROR(
            Text035,
            EDIShipforCode,EDICustCrossRef."EDI Sell To Code");
        SalesHeader."Ship-for Code" := ShipForCode;
        SalesHeader."External Ship-for No." := EDIShipforCode;
        SalesHeader."EDI Ship-for Code" := EDIShipforCode;
      END;
    END;

    PROCEDURE BuildShipToArray@7(CurrentEDIRecDocHdr@1240030000 : Record 14002358);
    BEGIN
      i := 1;
      CLEAR(SDQCodeArray);
      CLEAR(EDISDQCodeArray);
      CLEAR(OrderNoArray);
      CLEAR(SDQSellToCodeArray);
      CLEAR(ShipToStoreOverrideArray);
      EDIRecDocFields2.RESET;
      EDIRecDocFields2.SETRANGE("Internal Doc. No.",CurrentEDIRecDocHdr."Internal Doc. No.");
      EDIRecDocFields2.SETFILTER("Field Name",'SDQ*');
      IF EDIRecDocFields2.FIND('-') THEN
        REPEAT
          IF (COPYSTR(EDIRecDocFields2."Field Name",1,11) = 'SDQ SHIP TO') OR
            (COPYSTR(EDIRecDocFields2."Field Name",1,12) = 'SDQ STORE NO') THEN
              InsertShipToCode(COPYSTR(EDIRecDocFields2."Field Text Value",1,20));
        UNTIL EDIRecDocFields2.NEXT = 0;
    END;

    PROCEDURE InsertShipToCode@10(SDQCode@1240030000 : Code[20]);
    VAR
      ShipToStoreOverrideFound@1240020000 : Boolean;
      OverrideEDISDQShipForCode@1240020001 : Code[20];
      OverrideSDQShipForCode@1240020002 : Code[20];
      CrossReferenceFound@1240020003 : Boolean;
    BEGIN
      IF (SDQCode = '') OR
        (SDQCode = ' ') THEN
        EXIT;

      OverrideEDISDQShipForCode := '';
      IF ShipToStoreOverride THEN BEGIN
        ShipToStoreOverrideFound := FALSE;
        EDIRecDocField.RESET;
        EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
        EDIRecDocField.SETRANGE("Segment Group",EDIRecDocFields2."Segment Group");
        EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"Sales Header");
        EDIRecDocField.SETRANGE("Nav Field No.",SalesHeader.FIELDNO("Ship-to Code"));
        IF EDIRecDocField.FIND('-') THEN BEGIN
          IF SDQCode <> COPYSTR(EDIRecDocField."Field Text Value",1,20) THEN
            OverrideEDISDQShipForCode := SDQCode;
          SDQCode :=  (COPYSTR(EDIRecDocField."Field Text Value",1,20));
          BypassOverrideShipToCode := TRUE;
          ShipToStoreOverrideFound := TRUE;
        END;
      END;
      TotalLineElements := TotalLineElements + 1;
      CrossReferenceFound := FALSE;
      EDICustCrossRef.RESET;
      EDICustCrossRef.SETRANGE("Trade Partner No.",EDIRecDocFields2."Trade Partner No.");
      IF LastEDISellToCode <> '' THEN
        EDICustCrossRef.SETRANGE("EDI Sell To Code",LastEDISellToCode);
      EDICustCrossRef.SETRANGE("EDI Ship To Code",SDQCode);
      IF EDICustCrossRef.FIND('-') THEN BEGIN
        IF EDICustCrossRef.COUNT > 1 THEN BEGIN
          EDICustCrossRef3.COPY(EDICustCrossRef);
          EDICustCrossRef3.SETFILTER("Effective Date",'<>%1',0D);
          IF EDICustCrossRef3.FIND('-') THEN BEGIN
            EDICustCrossRef.SETCURRENTKEY("Effective Date");
            IsAscending := EDICustCrossRef.ASCENDING;
            EDICustCrossRef.SETFILTER("Effective Date",'<=%1',TODAY);
            IF EDICustCrossRef.FIND('+') THEN
              CrossReferenceFound := TRUE
            ELSE
              CrossReferenceFound := FALSE;
          END ELSE
            CrossReferenceFound := TRUE;
        END ELSE
          CrossReferenceFound := TRUE;
      END ELSE
        CrossReferenceFound := FALSE;
      IF CrossReferenceFound THEN BEGIN
        SellToCodeToInsert := EDICustCrossRef."Navision Sell To Code";
        ShipToCodeToInsert := EDICustCrossRef."Navision Ship To Code";
      END ELSE
        ERROR(Text040,EDITradePartner."No.",LastEDISellToCode,SDQCode);
      IF OverrideEDISDQShipForCode <> '' THEN BEGIN
       CrossReferenceFound := FALSE;
       EDICustCrossRef.SETRANGE("EDI Ship To Code");
       EDICustCrossRef.SETRANGE("EDI Ship To Code",OverrideEDISDQShipForCode);
       IF EDICustCrossRef.FIND('-') THEN BEGIN
         IF EDICustCrossRef.COUNT > 1 THEN BEGIN
           EDICustCrossRef3.COPY(EDICustCrossRef);
           EDICustCrossRef3.SETFILTER("Effective Date",'<>%1',0D);
           IF EDICustCrossRef3.FIND('-') THEN BEGIN
             EDICustCrossRef.SETCURRENTKEY("Effective Date");
             IsAscending := EDICustCrossRef.ASCENDING;
             EDICustCrossRef.SETFILTER("Effective Date",'<=%1',TODAY);
             IF EDICustCrossRef.FIND('+') THEN
               CrossReferenceFound := TRUE
             ELSE
               CrossReferenceFound := FALSE;
          END ELSE
            CrossReferenceFound := TRUE;
         END ELSE
           CrossReferenceFound := TRUE;
       END ELSE
         CrossReferenceFound := FALSE;
       IF CrossReferenceFound THEN
         OverrideSDQShipForCode := EDICustCrossRef."Navision Ship To Code"
        ELSE
         ERROR(Text040,EDITradePartner."No.",LastEDISellToCode,OverrideEDISDQShipForCode);
      END;

      j := 1;
      REPEAT
        IF OverrideEDISDQShipForCode = '' THEN
          IF EDISDQCodeArray[j] = SDQCode THEN
            EXIT;
        IF SDQCodeArray[j] = '' THEN BEGIN
          SDQCodeArray[j] := ShipToCodeToInsert;
          EDISDQCodeArray[j] := SDQCode;
          SDQSellToCodeArray[j] := SellToCodeToInsert;
          IF ShipToStoreOverride THEN BEGIN
            IF ShipToStoreOverrideFound THEN BEGIN
              ShipToStoreOverrideArray[j] := ShipToCodeToInsert;
              IF OverrideEDISDQShipForCode <> '' THEN BEGIN
                OverrideEDISDQShipForCodeArray[j] := OverrideEDISDQShipForCode;
                OverrideSDQShipForCodeArray[j] := OverrideSDQShipForCode
              END;
            END ELSE
              ShipToStoreOverrideArray[j] := '';
          END;
          IF GUIALLOWED THEN BEGIN
            ProgressWindow.UPDATE(5,SDQCodeArray[j]);
            IF TestMode THEN
              MESSAGE(
                Text036,SDQCodeArray[j],EDISDQCodeArray[j],j);
          END;
          EXIT;
        END;
        j := j + 1;
      UNTIL j = 5000;
    END;

    PROCEDURE BuildSellToArray@3(VAR CurrentEDIRecDocHdr@1240030000 : Record 14002358);
    BEGIN
      i := 1;
      CLEAR(SDQCodeArray);
      CLEAR(EDISDQCodeArray);
      CLEAR(OrderNoArray);
      EDIRecDocFields2.RESET;
      EDIRecDocFields2.SETCURRENTKEY("Internal Doc. No.","Field Name");
      EDIRecDocFields2.SETRANGE("Internal Doc. No.",CurrentEDIRecDocHdr."Internal Doc. No.");
      EDIRecDocFields2.SETRANGE("Field Name",'SDQ SELL TO');
      IF EDIRecDocFields2.FIND('-') THEN
        REPEAT
          InsertSellToCode(COPYSTR(EDIRecDocFields2."Field Text Value",1,20));
        UNTIL EDIRecDocFields2.NEXT = 0;
    END;

    PROCEDURE InsertSellToCode@1(SDQCode@1240030000 : Code[20]);
    VAR
      CrossReferenceFound@1240020000 : Boolean;
    BEGIN
      IF (SDQCode = '') OR
        (SDQCode = ' ') THEN
        EXIT;
      TotalLineElements := TotalLineElements + 1;
      CrossReferenceFound := FALSE;
      EDICustCrossRef.RESET;
      EDICustCrossRef.SETRANGE("Trade Partner No.",EDIRecDocFields2."Trade Partner No.");
      EDICustCrossRef.SETRANGE("EDI Sell To Code",SDQCode);
      IF EDICustCrossRef.FIND('-') THEN BEGIN
        IF EDICustCrossRef.COUNT > 1 THEN BEGIN
          EDICustCrossRef3.COPY(EDICustCrossRef);
          EDICustCrossRef3.SETFILTER("Effective Date",'<>%1',0D);
          IF EDICustCrossRef3.FIND('-') THEN BEGIN
            EDICustCrossRef.SETCURRENTKEY("Effective Date");
            IsAscending := EDICustCrossRef.ASCENDING;
            EDICustCrossRef.SETFILTER("Effective Date",'<=%1',TODAY);
            IF EDICustCrossRef.FIND('+') THEN
              CrossReferenceFound := TRUE
            ELSE
              CrossReferenceFound := FALSE;
          END ELSE
            CrossReferenceFound := TRUE;
        END ELSE
          CrossReferenceFound := TRUE
      END ELSE
        CrossReferenceFound := FALSE;
      IF CrossReferenceFound THEN
        SellToCodeToInsert := EDICustCrossRef."Navision Sell To Code"
      ELSE
        SellToCodeToInsert := SDQCode;
      j := 1;
      REPEAT
        IF EDISDQCodeArray[j] = SDQCode THEN
          EXIT;
        IF SDQCodeArray[j] = '' THEN BEGIN
          SDQCodeArray[j] := SellToCodeToInsert;
          EDISDQCodeArray[j] := SDQCode;
          EXIT;
        END;
        j := j + 1;
      UNTIL j = 5000;
    END;

    PROCEDURE BuildSalesHeader@4();
    VAR
      EDIRecDocFields@1240020000 : Record 14002359;
    BEGIN
      // For Multiple SDQ Sell-To only
      SalesHeader.INIT;
      IF (EDIRecDocFields."EDI Document No." = '830') OR
         (EDIRecDocFields."EDI Document No." = 'DELFOR') OR
         (EDIRecDocFields."EDI Document No." = 'DELJIT') THEN
        SalesHeader."Document Type" := SalesHeader."Document Type"::Quote
      ELSE
        SalesHeader."Document Type" := SalesHeader."Document Type"::Order;
      SalesHeader."No." := '';
      SalesHeader.INSERT(TRUE);
      SalesHeader.SetRunFromEDI(TRUE);
      IF GUIALLOWED THEN
        ProgressWindow.UPDATE(5,SalesHeader."Ship-to Code");
      EDITradePartner.GET(EDIRecDocHdr2."Trade Partner No.");
      IF GUIALLOWED THEN
        ProgressWindow.UPDATE(5,SDQCodeArray[i]);
      SalesHeader.VALIDATE("Sell-to Customer No.",SDQCodeArray[i]);
      IF GUIALLOWED THEN
        ProgressWindow.UPDATE(4,SalesHeader."Sell-to Customer No.");
      EDIRecDocHdr2."Customer No." := SalesHeader."Sell-to Customer No.";
      EDIRecDocHdr2.MODIFY;
      IF GUIALLOWED THEN
        ProgressWindow.UPDATE(5,SalesHeader."Ship-to Code");
      LastShipToCode := SalesHeader."Ship-to Code";
      Customer.GET(SalesHeader."Sell-to Customer No.");
      IF Customer."EDI Invoice" = Customer."EDI Invoice"::Never THEN BEGIN
        SalesHeader."EDI Order" := TRUE;
        SalesHeader."EDI Invoice" := FALSE;
      END ELSE BEGIN
        SalesHeader."EDI Order" := TRUE;
        SalesHeader."EDI Invoice" := TRUE;
      END;
      SalesHeader."Shipment Release" := EDIRecDocHdr2."Shipment Release";
      SalesHeader."EDI Internal Doc. No." := EDIRecDocHdr2."Internal Doc. No.";
      SalesHeader."Order Status Required" := EDITradePartner."Order Status Required";
      SalesHeader.VALIDATE(SalesHeader."Order Date",WORKDATE);
      SalesHeader.VALIDATE(SalesHeader."Document Date",WORKDATE);
      SalesHeader."EDI Trade Partner" := EDITradePartner."No.";
      SalesHeader."External Sell-to No." := EDISDQCodeArray[i];
      SalesHeader."EDI Sell-to Code" := EDISDQCodeArray[i];
      MapSalesHdrFields;
      IF ThirdPartyAccount <> '' THEN
        SalesHeader."Third Party Ship. Account No." := ThirdPartyAccount;
      IF SalesHeader."Currency Code" <> '' THEN
        SalesHeader.VALIDATE(SalesHeader."Currency Code");
      IF SalesHeader."Payment Terms Code" <> '' THEN
        SalesHeader.VALIDATE(SalesHeader."Payment Terms Code");
      IF GUIALLOWED THEN BEGIN
        IF TestMode THEN
          MESSAGE(
           Text028,SalesHeader."No.",
           SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code");
      END;
      SalesHeader.MODIFY;
      IF GUIALLOWED THEN
        ProgressWindow.UPDATE(5,SalesHeader."Ship-to Code");
      IF SalesSetup."Enable Shipping" THEN
        IF ShippingSetup."Enable Bill of Lading" THEN
          BuildCustomerPO;
      IF GUIALLOWED THEN
        ProgressWindow.UPDATE(2,SalesHeader."Your Reference");

      EDIRecDocFields.RESET;
      EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocFields.SETRANGE("NAV Table No.",DATABASE::"Sales Comment Line");
      EDIRecDocFields.SETRANGE("Nav Field No.",SalesCommentLine.FIELDNO(Comment));
      EDIRecDocFields.SETRANGE("Segment Group",0);
      IF EDIRecDocFields.FIND('-') THEN
        EDIMapComments.MapSalesCommentLine(
          EDIRecDocHdr2,SalesHeader,SalesLine,TRUE,EDIRecDocFields,TRUE);
    END;

    PROCEDURE SetCustomerLocation@2(VAR CurrentSalesHdr@1240030000 : Record 36);
    VAR
      Customer@1240030001 : Record 18;
      ShipToAddress@1240030002 : Record 222;
    BEGIN
      //BEG TPZEDI
      IF IsStkRepLocation THEN BEGIN
        CurrentSalesHdr.VALIDATE("Location Code",StkRepLocationRec.Code);
        EXIT;
      END;
      //END TPZEDI

      IF CurrentSalesHdr."Ship-to Code" <> '' THEN BEGIN
        ShipToAddress.GET(CurrentSalesHdr."Sell-to Customer No.",CurrentSalesHdr."Ship-to Code");
        IF ShipToAddress."Location Code" <> '' THEN BEGIN
          CurrentSalesHdr."Location Code" := ShipToAddress."Location Code";
          EXIT;
        END;
      END;
      IF CurrentSalesHdr."Sell-to Customer No." <> '' THEN BEGIN
        Customer.GET(CurrentSalesHdr."Sell-to Customer No.");
        IF Customer."Location Code" <> '' THEN
          CurrentSalesHdr."Location Code" := Customer."Location Code";
      END;
    END;

    PROCEDURE BuildCustomerPO@5();
    BEGIN
      IF SalesHeader."External Document No." = '' THEN
        EXIT;
      IF NOT UCC128Sequence.GET(
        SalesHeader."EDI Trade Partner",SalesHeader."External Document No.") THEN BEGIN
        UCC128Sequence.INIT;
        UCC128Sequence."EDI Trading Partner No." := SalesHeader."EDI Trade Partner";
        UCC128Sequence."External Document No." := SalesHeader."External Document No.";
        UCC128Sequence."EDI Internal Doc. No." := EDIRecDocHdr2."Internal Doc. No.";
        UCC128Sequence.INSERT(TRUE);
      END ELSE
        UCC128Sequence."EDI Internal Doc. No." := EDIRecDocHdr2."Internal Doc. No.";

      EDIRecDocFields3.RESET;
      EDIRecDocFields3.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocFields3.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocFields3.SETRANGE("NAV Table No.",14000821);
      IF EDIRecDocFields3.FIND('-') THEN
        REPEAT
          CASE EDIRecDocFields3."Nav Field No." OF
            UCC128Sequence.FIELDNO("First UCC 128 Sequence No."):
              UCC128Sequence."First UCC 128 Sequence No." := EDIRecDocFields3."Field Integer Value";
          END;
        UNTIL EDIRecDocFields3.NEXT = 0;

      UCC128Sequence.MODIFY(TRUE);
    END;

    PROCEDURE MapSalesHdrFields@6();
    VAR
      ShiptoAddress@1000000000 : Record 222;
    BEGIN
      EDIRecDocFields.RESET;
      EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocFields.SETRANGE(EDIRecDocFields."NAV Table No.",36);
      IF EDIRecDocFields.FIND('-') THEN BEGIN
        SalesHeader.SetRunFromEDI(TRUE);
        REPEAT
          CASE EDIRecDocFields."Nav Field No." OF
            SalesHeader.FIELDNO(SalesHeader."Order Date"):
              IF EDIRecDocFields."Field Date Value" <> 0D THEN
                SalesHeader."Order Date" :=
                  CALCDATE(EDIRecDocFields."Forecast Date Formula",EDIRecDocFields."Field Date Value");
            SalesHeader.FIELDNO(SalesHeader."Posting Date"):
              IF EDIRecDocFields."Field Date Value" <> 0D THEN
                SalesHeader."Posting Date" :=
                  CALCDATE(EDIRecDocFields."Forecast Date Formula",EDIRecDocFields."Field Date Value");
            SalesHeader.FIELDNO(SalesHeader."Shipment Date"):
              IF EDIRecDocFields."Field Date Value" <> 0D THEN
                SalesHeader."Shipment Date" :=
                  CALCDATE(EDIRecDocFields."Forecast Date Formula",EDIRecDocFields."Field Date Value");
            SalesHeader.FIELDNO(SalesHeader."Document Date"):
              IF EDIRecDocFields."Field Date Value" <> 0D THEN
                SalesHeader."Document Date" :=
                  CALCDATE(EDIRecDocFields."Forecast Date Formula",EDIRecDocFields."Field Date Value");
            SalesHeader.FIELDNO(SalesHeader."Shipment Method Code"):
              IF EDIRecDocFields."General EDI Cross Reference" = FALSE THEN
                EDILocalization.LoadTextFields(SalesHeader."Shipment Method Code",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Payment Terms Code"):
              IF EDIRecDocFields."General EDI Cross Reference" = FALSE THEN
                EDILocalization.LoadTextFields(SalesHeader."Payment Terms Code",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Shipping Agent Code"):
              IF EDIRecDocFields."General EDI Cross Reference" = FALSE THEN
                EDILocalization.LoadTextFields(SalesHeader."Shipping Agent Code",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Shipping Agent Service Code"):
              IF EDIRecDocFields."General EDI Cross Reference" = FALSE THEN
                EDILocalization.LoadTextFields(SalesHeader."Shipping Agent Service Code",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."E-Ship Agent Service"):
              IF EDIRecDocFields."General EDI Cross Reference" = FALSE THEN
                EDILocalization.LoadTextFields(SalesHeader."E-Ship Agent Service",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Shipping Payment Type"):
              IF EDIRecDocFields."General EDI Cross Reference" = FALSE THEN BEGIN
                EVALUATE(SalesHeader."Shipping Payment Type",EDIRecDocFields."Field Text Value");
              END;
            SalesHeader.FIELDNO(SalesHeader."Shipping Advice"):
              IF EDIRecDocFields."General EDI Cross Reference" = FALSE THEN
                EVALUATE(SalesHeader."Shipping Advice",EDIRecDocFields."Field Text Value");
            SalesHeader.FIELDNO(SalesHeader."Your Reference"):
              SalesHeader."Your Reference" :=
                EDILocalization.LoadTextFields(SalesHeader."Your Reference",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Bill-to Name"):
              SalesHeader."Bill-to Name" :=
                EDILocalization.LoadTextFields(SalesHeader."Bill-to Name",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Bill-to Address"):
              SalesHeader."Bill-to Address" :=
                EDILocalization.LoadTextFields(SalesHeader."Bill-to Address",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Bill-to Address 2"):
              SalesHeader."Bill-to Address 2":=
                EDILocalization.LoadTextFields(SalesHeader."Bill-to Address 2",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Bill-to City"):
              SalesHeader."Bill-to City" :=
                EDILocalization.LoadTextFields(SalesHeader."Bill-to City",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Bill-to County"):
              SalesHeader."Bill-to County" :=
                EDILocalization.LoadTextFields(SalesHeader."Bill-to County",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Bill-to Post Code"):
              SalesHeader."Bill-to Post Code" :=
                EDILocalization.LoadTextFields(SalesHeader."Bill-to Post Code",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Bill-to Country/Region Code"):
             IF EDIRecDocFields."General EDI Cross Reference" = FALSE THEN
               SalesHeader."Bill-to Country/Region Code" :=
                 EDILocalization.LoadTextFields(SalesHeader."Bill-to Country/Region Code",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Sell-to Customer Name"):
              SalesHeader."Sell-to Customer Name" :=
                EDILocalization.LoadTextFields(SalesHeader."Sell-to Customer Name",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Sell-to Customer Name 2"):
              SalesHeader."Sell-to Customer Name 2" :=
                EDILocalization.LoadTextFields(SalesHeader."Sell-to Customer Name 2",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Sell-to Contact"):
              SalesHeader."Sell-to Contact" :=
                EDILocalization.LoadTextFields(SalesHeader."Sell-to Contact",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Sell-to Address"):
              SalesHeader."Sell-to Address" :=
                EDILocalization.LoadTextFields(SalesHeader."Sell-to Address",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Sell-to Address 2"):
              SalesHeader."Sell-to Address 2" :=
                EDILocalization.LoadTextFields(SalesHeader."Sell-to Address 2",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Sell-to City"):
              SalesHeader."Sell-to City" :=
                EDILocalization.LoadTextFields(SalesHeader."Sell-to City",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Sell-to Post Code"):
              SalesHeader."Sell-to Post Code" :=
                EDILocalization.LoadTextFields(SalesHeader."Sell-to Post Code",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Sell-to County"):
              SalesHeader."Sell-to County" :=
                EDILocalization.LoadTextFields(SalesHeader."Sell-to County",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Sell-to Country/Region Code"):
              IF EDIRecDocFields."General EDI Cross Reference" = FALSE THEN
                SalesHeader."Sell-to Country/Region Code" :=
                 EDILocalization.LoadTextFields(SalesHeader."Sell-to Country/Region Code",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Ship-to Name"):
              SalesHeader."Ship-to Name" :=
                EDILocalization.LoadTextFields(SalesHeader."Ship-to Name",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Ship-to Name 2"):
              SalesHeader."Ship-to Name 2" :=
                EDILocalization.LoadTextFields(SalesHeader."Ship-to Name 2",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Ship-to Contact"):
              SalesHeader."Ship-to Contact" :=
                EDILocalization.LoadTextFields(SalesHeader."Ship-to Contact",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Ship-to Address"):
              SalesHeader."Ship-to Address" :=
                EDILocalization.LoadTextFields(SalesHeader."Ship-to Address",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Ship-to Address 2"):
              SalesHeader."Ship-to Address 2" :=
                EDILocalization.LoadTextFields(SalesHeader."Ship-to Address 2",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Ship-to City"):
              SalesHeader."Ship-to City" :=
                EDILocalization.LoadTextFields(SalesHeader."Ship-to City",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Ship-to County"):
              SalesHeader."Ship-to County" :=
                EDILocalization.LoadTextFields(SalesHeader."Ship-to County",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Ship-to Post Code"):
              SalesHeader."Ship-to Post Code" :=
                EDILocalization.LoadTextFields(SalesHeader."Ship-to Post Code",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Ship-to Country/Region Code"):
              IF EDIRecDocFields."General EDI Cross Reference" = FALSE THEN
                SalesHeader."Ship-to Country/Region Code" :=
                  EDILocalization.LoadTextFields(SalesHeader."Ship-to Country/Region Code",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Your Reference"):
              SalesHeader."Your Reference" :=
                EDILocalization.LoadTextFields(SalesHeader."Your Reference",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."External Document No."):
              SalesHeader."External Document No." :=
                EDILocalization.LoadTextFields(SalesHeader."External Document No.",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."EDI Expected Delivery Date"):
              IF EDIRecDocFields."Field Date Value" <> 0D THEN
                SalesHeader."EDI Expected Delivery Date" :=
                  CALCDATE(EDIRecDocFields."Forecast Date Formula",EDIRecDocFields."Field Date Value");
            SalesHeader.FIELDNO(SalesHeader."EDI Cancel After Date"):
              IF EDIRecDocFields."Field Date Value" <> 0D THEN
                SalesHeader."EDI Cancel After Date" :=
                  CALCDATE(EDIRecDocFields."Forecast Date Formula",EDIRecDocFields."Field Date Value");
            SalesHeader.FIELDNO(SalesHeader."Promised Delivery Date"):
              IF EDIRecDocFields."Field Date Value" <> 0D THEN
                SalesHeader."Promised Delivery Date" :=
                  CALCDATE(EDIRecDocFields."Forecast Date Formula",EDIRecDocFields."Field Date Value");
            SalesHeader.FIELDNO(SalesHeader."Requested Delivery Date"):
              IF EDIRecDocFields."Field Date Value" <> 0D THEN
                SalesHeader."Requested Delivery Date" :=
                  CALCDATE(EDIRecDocFields."Forecast Date Formula",EDIRecDocFields."Field Date Value");
            SalesHeader.FIELDNO(SalesHeader."Invoice Disc. Code"):
              SalesHeader."Invoice Disc. Code" :=
                EDILocalization.LoadTextFields(SalesHeader."Invoice Disc. Code",EDIRecDocFields);
            SalesHeader.FIELDNO(SalesHeader."Currency Code"):
              SalesHeader.VALIDATE(
                "Currency Code",
                EDILocalization.LoadTextFields(SalesHeader."Currency Code",EDIRecDocFields));
            SalesHeader.FIELDNO("Third Party Ship. Account No."):
             BEGIN
                SalesHeader."Third Party Ship. Account No." :=
                  EDILocalization.LoadTextFields(SalesHeader."Third Party Ship. Account No.",EDIRecDocFields);
                ThirdPartyAccount := SalesHeader."Third Party Ship. Account No.";
              END;
            SalesHeader.FIELDNO(SalesHeader."EDI Cancellation Date"):
            SalesHeader."EDI Cancellation Date" := EDIRecDocFields."Field Date Value";
            //TPZEDI
            SalesHeader.FIELDNO(SalesHeader."Shortcut Dimension 5 Code"):
              BEGIN
                IF  (EDITradePartner."ISA My Trade Ptnr. No." <> '') THEN BEGIN //<TPZ2561>
                 IF EDITradePartner."No." <> 'BORDERSTATES' THEN //UTK
                  SalesHeader.VALIDATE("Shortcut Dimension 5 Code",EDIRecDocFields."Field Text Value");
                END ELSE BEGIN //<TPZ2561>
                  EDIRecDocFieldsDIV.RESET;
                  EDIRecDocFieldsDIV.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
                  EDIRecDocFieldsDIV.SETRANGE("Internal Doc. No.",InternalDocNo);
                  EDIRecDocFieldsDIV.SETRANGE("NAV Table No.",37);
                  EDIRecDocFieldsDIV.SETRANGE("Nav Field No.", SalesLine.FIELDNO(SalesLine."No."));
                  IF EDIRecDocFieldsDIV.FINDFIRST THEN
                   IF ItemDiv.GET(EDIRecDocFieldsDIV."Field Text Value") THEN
                     IF ItemDiv."Shortcut Dimension 5 Code" <>'' THEN
                        SalesHeader.VALIDATE("Shortcut Dimension 5 Code", ItemDiv."Shortcut Dimension 5 Code");
                END; //</TPZ2561>
                //<TPZ1940>
                IF (EDIRecDocHdr2."Shortcut Dimension 5 Code" <> SalesHeader."Shortcut Dimension 5 Code") THEN
                  EDIRecDocHdr2."Shortcut Dimension 5 Code" := SalesHeader."Shortcut Dimension 5 Code";
                //</TPZ1940>
              END;
            SalesHeader.FIELDNO(SalesHeader."Warehouse Release No."):
              SalesHeader.VALIDATE("Warehouse Release No.",EDIRecDocFields."Field Text Value");
            SalesHeader.FIELDNO(SalesHeader."Mfr. Rep. Code"):
              SalesHeader.VALIDATE("Mfr. Rep. Code",EDIRecDocFields."Field Text Value");
            SalesHeader.FIELDNO(SalesHeader."Warehouse Release No."):
              SalesHeader.VALIDATE(SalesHeader."Warehouse Release No.",EDIRecDocFields."Field Text Value");
            SalesHeader.FIELDNO(SalesHeader."Package Tracking No."):
              SalesHeader.VALIDATE(SalesHeader."Package Tracking No.",EDIRecDocFields."Field Text Value");

            //TPZEDI
            //IF EDIRecDocFields."Field Date Value" <> 0D THEN
            //SalesHeader."EDI Cancellation Date" :=                                                      dinesh block
             // CALCDATE(EDIRecDocFields."Forecast Date Formula",EDIRecDocFields."Field Date Value");
            SalesHeader.FIELDNO(SalesHeader."Campaign No."):
            IF EDIRecDocFields."General EDI Cross Reference" = FALSE THEN
              SalesHeader."Campaign No." :=
                EDILocalization.LoadTextFields(SalesHeader."Campaign No.",EDIRecDocFields);



            //
            // Add Custom Sales Header fields here
            //
          END;
          IF EDIRecDocFields."Field Date Value" <> 0D THEN BEGIN
            DateFormulaText := '';
            DateFormulaText := FORMAT(EDIRecDocFields."Forecast Date Formula");
            IF DateFormulaText <> '' THEN
              EDIRecDocFields."Calculated Date" :=
                CALCDATE(EDIRecDocFields."Forecast Date Formula",EDIRecDocFields."Field Date Value");
            EDIRecDocFields.MODIFY;
            DateFormulaText := '';
          END;
        UNTIL EDIRecDocFields.NEXT = 0;
      END;
      //TPZEDI - dinesh
      IF SalesHeader."Mfr. Rep. Code" = '' THEN BEGIN
        EDIRecDocFields.RESET;
        EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
        EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
        EDIRecDocFields.SETRANGE(EDIRecDocFields."Field Name",'MFR. Rep. Code');
        IF EDIRecDocFields.FIND('-') THEN BEGIN
          SalesHeader.SetRunFromEDI(TRUE);
          SalesHeader.VALIDATE("Mfr. Rep. Code",EDIRecDocFields."Field Text Value");
        END;
      END;
      //TPZEDI - dinesh

      //<TPZEDI>
      EDIRecDocFields.RESET;
      EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocFields.SETRANGE(EDIRecDocFields."NAV Table No.",291);
      IF EDIRecDocFields.FIND('-') THEN BEGIN
        SalesHeader.SetRunFromEDI(TRUE);
        REPEAT
          CASE EDIRecDocFields."Nav Field No." OF
           ShippingAgentRec.FIELDNO(ShippingAgentRec."SCAC Code"):
             BEGIN
               ShippingAgentRec.RESET;
               ShippingAgentRec.SETRANGE(ShippingAgentRec."SCAC Code",EDIRecDocFields."Field Text Value");
               IF ShippingAgentRec.FINDFIRST THEN BEGIN
                 SalesHeader.VALIDATE("Shipping Agent Code",ShippingAgentRec.Code);
               END ELSE BEGIN
                 IF StkRepShipAgentXRef.GET(SalesHeader."Location Code",
                                            EDIRecDocFields."Field Text Value")
                 THEN BEGIN
                   SalesHeader.VALIDATE("Shipping Agent Code",StkRepShipAgentXRef."Shipping Agent Code");
                   SalesHeader.VALIDATE("E-Ship Agent Service",StkRepShipAgentXRef."E-Ship Agent Service");
                   IF SCACCodeRec.GET(EDIRecDocFields."Field Text Value") THEN BEGIN
                     IF ShippingAgentRec.GET(StkRepShipAgentXRef."Shipping Agent Code") THEN BEGIN
                       ShippingAgentRec."SCAC Code" := SCACCodeRec."SCAC Code";
                     END ELSE IF ShippingAgentRec.GET(SCACCodeRec."SCAC Code") THEN BEGIN
                       ShippingAgentRec."SCAC Code" := SCACCodeRec."SCAC Code";
                     END ELSE BEGIN
                       ShippingAgentRec.INIT;
                       ShippingAgentRec.VALIDATE(Code,SCACCodeRec."SCAC Code");
                       ShippingAgentRec.VALIDATE("SCAC Code",SCACCodeRec."SCAC Code");
                       ShippingAgentRec.Name := SCACCodeRec."Shipping Agent Name";
                     END;
                     IF NOT ShippingAgentRec.INSERT THEN
                      IF ShippingAgentRec.MODIFY THEN;
                   END;
                 END;
               END;
             END;
          END;
        UNTIL(EDIRecDocFields.NEXT=0);
      END;
      //</TPZEDI>

      EDIRecDocFields.SETRANGE(EDIRecDocFields."NAV Table No.",14002371);
      IF EDIRecDocFields.FIND('-') THEN BEGIN
        CLEAR(EDIRecDocHdrInfo);
        EDIRecDocHdrInfo."Internal Doc. No." := SalesHeader."EDI Internal Doc. No.";
        EDIRecDocHdrInfo."Document No." := SalesHeader."No.";
        REPEAT
          CASE EDIRecDocFields."Nav Field No." OF
            EDIRecDocHdrInfo.FIELDNO(EDIRecDocHdrInfo."Text Field 1"):
              EDIRecDocHdrInfo."Text Field 1" :=
                EDILocalization.LoadTextFields(EDIRecDocHdrInfo."Text Field 1",EDIRecDocFields);
            EDIRecDocHdrInfo.FIELDNO("Text Field 2"):
              EDIRecDocHdrInfo."Text Field 2" :=
                EDILocalization.LoadTextFields(EDIRecDocHdrInfo."Text Field 2",EDIRecDocFields);
            EDIRecDocHdrInfo.FIELDNO("Text Field 3"):
              EDIRecDocHdrInfo."Text Field 3" :=
                EDILocalization.LoadTextFields(EDIRecDocHdrInfo."Text Field 3",EDIRecDocFields);
            EDIRecDocHdrInfo.FIELDNO("Text Field 4"):
              EDIRecDocHdrInfo."Text Field 4" :=
                EDILocalization.LoadTextFields(EDIRecDocHdrInfo."Text Field 4",EDIRecDocFields);
            EDIRecDocHdrInfo.FIELDNO("Text Field 5"):
              EDIRecDocHdrInfo."Text Field 5" :=
                EDILocalization.LoadTextFields(EDIRecDocHdrInfo."Text Field 5",EDIRecDocFields);
            EDIRecDocHdrInfo.FIELDNO("Text Field 6"):
              EDIRecDocHdrInfo."Text Field 6" :=
                EDILocalization.LoadTextFields(EDIRecDocHdrInfo."Text Field 6",EDIRecDocFields);
            EDIRecDocHdrInfo.FIELDNO("Text Field 7"):
              EDIRecDocHdrInfo."Text Field 7" :=
                EDILocalization.LoadTextFields(EDIRecDocHdrInfo."Text Field 7",EDIRecDocFields);
            EDIRecDocHdrInfo.FIELDNO("Text Field 8"):
              EDIRecDocHdrInfo."Text Field 8" :=
                EDILocalization.LoadTextFields(EDIRecDocHdrInfo."Text Field 8",EDIRecDocFields);
            EDIRecDocHdrInfo.FIELDNO("Text Field 9"):
              EDIRecDocHdrInfo."Text Field 9" :=
                EDILocalization.LoadTextFields(EDIRecDocHdrInfo."Text Field 9",EDIRecDocFields);
            EDIRecDocHdrInfo.FIELDNO("Text Field 10"):
              EDIRecDocHdrInfo."Text Field 10" :=
                EDILocalization.LoadTextFields(EDIRecDocHdrInfo."Text Field 10",EDIRecDocFields);
            EDIRecDocHdrInfo.FIELDNO("Date Field 1"):
              IF EDIRecDocField."Field Date Value" <> 0D THEN
                EDIRecDocHdrInfo."Date Field 1" :=
                  CALCDATE(EDIRecDocFields."Forecast Date Formula",EDIRecDocFields."Field Date Value");
            EDIRecDocHdrInfo.FIELDNO("Date Field 2"):
              IF EDIRecDocFields."Field Date Value" <> 0D THEN
              EDIRecDocHdrInfo."Date Field 2" :=
                CALCDATE(EDIRecDocFields."Forecast Date Formula",EDIRecDocFields."Field Date Value");
            EDIRecDocHdrInfo.FIELDNO("Date Field 3"):
              IF EDIRecDocFields."Field Date Value" <> 0D THEN
                EDIRecDocHdrInfo."Date Field 3" :=
                  CALCDATE(EDIRecDocFields."Forecast Date Formula",EDIRecDocFields."Field Date Value");
            EDIRecDocHdrInfo.FIELDNO("Date Field 4"):
              IF EDIRecDocFields."Field Date Value" <> 0D THEN
                EDIRecDocHdrInfo."Date Field 4" :=
                  CALCDATE(EDIRecDocFields."Forecast Date Formula",EDIRecDocFields."Field Date Value");
            EDIRecDocHdrInfo.FIELDNO("Date Field 5"):
              IF EDIRecDocFields."Field Date Value" <> 0D THEN
                EDIRecDocHdrInfo."Date Field 5" :=
                  CALCDATE(EDIRecDocFields."Forecast Date Formula",EDIRecDocFields."Field Date Value");
            EDIRecDocHdrInfo.FIELDNO("Decimal Field 1"):
              EDIRecDocHdrInfo."Decimal Field 1" := EDIRecDocFields."Field Dec. Value";
            EDIRecDocHdrInfo.FIELDNO("Decimal Field 2"):
              EDIRecDocHdrInfo."Decimal Field 2" := EDIRecDocFields."Field Dec. Value";
            EDIRecDocHdrInfo.FIELDNO("Decimal Field 3"):
              EDIRecDocHdrInfo."Decimal Field 3" := EDIRecDocFields."Field Dec. Value";
            EDIRecDocHdrInfo.FIELDNO("Decimal Field 4"):
              EDIRecDocHdrInfo."Decimal Field 4" := EDIRecDocFields."Field Dec. Value";
            EDIRecDocHdrInfo.FIELDNO("Decimal Field 5"):
              EDIRecDocHdrInfo."Decimal Field 5" := EDIRecDocFields."Field Dec. Value";
          END;
          IF EDIRecDocFields."Field Date Value" <> 0D THEN BEGIN
            DateFormulaText := '';
            DateFormulaText := FORMAT(EDIRecDocFields."Forecast Date Formula");
            IF DateFormulaText <> '' THEN
              EDIRecDocFields."Calculated Date" :=
                CALCDATE(EDIRecDocFields."Forecast Date Formula",EDIRecDocFields."Field Date Value");
            DateFormulaText := '';
            EDIRecDocFields.MODIFY;
          END;
        UNTIL EDIRecDocFields.NEXT = 0;
        HeaderEntryNo := HeaderEntryNo + 1;
        EDIRecDocHdrInfo."Entry No." := HeaderEntryNo;
        EDIRecDocHdrInfo.INSERT;
      END;

      IF MapGenCrossRef THEN
        MapGeneralEDICrossRef(TRUE);

      IF EDIDiscountFound THEN
        CalculatePercent(TRUE);

      // >> LS004
      IF EDITradePartner."No." = 'DA' THEN
         SalesHeader."Location Code" := '2';

      IF EDITradePartner."No." = 'HE' THEN
         SalesHeader."Location Code" := '5';

      IF EDITradePartner."No." = 'GA' THEN
         SalesHeader."Location Code" := '13';

      IF EDITradePartner."No." = 'TO' THEN
         SalesHeader."Location Code" := '17';

      IF EDITradePartner."No." = 'TP' THEN
         SalesHeader."Location Code" := '9';

      //<TPZ2977>
      {IF EDITradePartner."No." = 'CA' THEN BEGIN
         //SalesHeader."Location Code" := '27';//UTK
        IF SalesHeader."Ship-to Code" <> '' THEN BEGIN
         ShiptoAddress.GET(SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code");
         IF ShiptoAddress."Location Code" <> '' THEN
          SalesHeader."Location Code" := ShiptoAddress."Location Code";
        END;
      END;}
      //</TPZ2977>

      // << LS004
    END;

    PROCEDURE MapSalesLineFields@8();
    VAR
      Table37EventSubscribers@1170000000 : Codeunit 50077;
    BEGIN
      SalesLine.SetRunFromEDI(TRUE);

      CASE EDIRecDocFields2."NAV Table No." OF
        37:
          CASE EDIRecDocFields2."Nav Field No." OF
            SalesLine.FIELDNO(SalesLine."Line Discount Amount"):
              SalesLine.VALIDATE(SalesLine."Line Discount Amount",(EDIRecDocFields2."Field Dec. Value"));
            SalesLine.FIELDNO(SalesLine."Line Discount %"):
              SalesLine.VALIDATE(SalesLine."Line Discount %",(EDIRecDocFields2."Field Dec. Value"));
            SalesLine.FIELDNO(SalesLine."Return Reason Code"):
              IF EDIRecDocFields."General EDI Cross Reference" = FALSE THEN
                EDILocalization.LoadTextFields(SalesLine."Return Reason Code",EDIRecDocFields);
            SalesLine.FIELDNO(SalesLine.Description):
              SalesLine.VALIDATE(
                SalesLine.Description,
                EDILocalization.LoadTextFields(SalesLine.Description,EDIRecDocFields2));

            //<TPZEDI>
            SalesLine.FIELDNO(SalesLine."Qty. to Ship"):
              BEGIN
                SalesLine."Qty. to Ship" := EDIRecDocFields2."Field Dec. Value";
                SalesLine."Qty. to Ship (Base)" := SalesLine."Qty. to Ship";
                SalesLine."Qty. to Invoice" := SalesLine."Qty. to Ship";
                SalesLine."Qty. to Invoice (Base)" := SalesLine."Qty. to Ship"
              END;
            SalesLine.FIELDNO(SalesLine."EDI Unit Price"):
              BEGIN
                IF SalesHeader."Topaz WH Billing" THEN BEGIN
                  CASE EDITradePartner."No." OF
                    'CKDORMAN':
                      BEGIN
                        SalesLine.VALIDATE("Actual Unit Price", ROUND( ((EDIRecDocFields2."Field Dec. Value") / 10000),0.0001));
                      END;
                    'DAVENPORT':
                      BEGIN
                        //<TPZ1941>
                        IF LastBaseUnitPriceType = 'HP' THEN
                          SalesLine.VALIDATE("Actual Unit Price", (EDIRecDocFields2."Field Dec. Value"/100))
                        ELSE IF LastBaseUnitPriceType = 'UM' THEN
                           SalesLine.VALIDATE("Actual Unit Price", (EDIRecDocFields2."Field Dec. Value"));
                        //</TPZ1941>
                      END;
                    'ELECTASSOC':
                      BEGIN
                        SalesLine.VALIDATE("Actual Unit Price", (EDIRecDocFields2."Field Dec. Value"/100));
                      END;
                  END;
                END ELSE BEGIN
       // >> LS003
      //           IF EDITradePartner."No." = 'HOUSEHASSON' THEN
      //              SalesLine.VALIDATE("Actual Unit Price", (EDIRecDocFields2."Field Dec. Value"))
      //            ELSE
      //              SalesLine.VALIDATE("Actual Unit Price", (EDIRecDocFields2."Field Dec. Value"/100));  //TPZ1994
                  //IF EDITradePartner."No." = 'HOUSEHASSON' THEN BEGIN
                  //IF EDITradePartner."No." IN ['HOUSEHASSON','USESI'] THEN BEGIN //TPZ3212
                  IF EDITradePartner."No." IN ['HOUSEHASSON','USESI','ANIXTER'] THEN BEGIN //TPZ3298
                    SalesLine.VALIDATE("Actual Unit Price", (EDIRecDocFields2."Field Dec. Value"));
                  END ELSE IF EDITradePartner."No." = 'TO' THEN BEGIN
                     IF (SalesLine."EDI Unit of Measure" = 'AC') OR (SalesLine."EDI Unit of Measure" = 'C') THEN
                        SalesLine.VALIDATE("Actual Unit Price", (EDIRecDocFields2."Field Dec. Value"))
                     ELSE
                        SalesLine.VALIDATE("Actual Unit Price", (EDIRecDocFields2."Field Dec. Value"/100));
                  END ELSE BEGIN;
                  IF (EDITradePartner."No." = 'EA') OR  (EDITradePartner."No." = 'DA') OR  (EDITradePartner."No." = 'GA') THEN BEGIN //<TPZ2977>
                    IF SalesLine."EDI Unit of Measure" = 'CM' THEN
                        SalesLine.VALIDATE("Actual Unit Price", (EDIRecDocFields2."Field Dec. Value"))
                     ELSE
                        SalesLine.VALIDATE("Actual Unit Price", (EDIRecDocFields2."Field Dec. Value"/100));
                  END ELSE IF (EDITradePartner."No." = 'CA') OR  (EDITradePartner."No." = 'CASEY_ILLINOIS') THEN BEGIN//<TPZ2977> //<TPZ3131>
                      SalesLine.VALIDATE("Actual Unit Price", (EDIRecDocFields2."Field Dec. Value"/100));//<TPZ2977
                 // END ELSE IF (EDITradePartner."No." = 'KOPINTIZ') THEN BEGIN//TPZ3120>
                   //   SalesLine.VALIDATE("Actual Unit Price", (EDIRecDocFields2."Field Dec. Value"));//<TPZ3120>
                  END ELSE
                    IF (SalesLine."Shortcut Dimension 5 Code" = 'E') OR (SalesLine."Shortcut Dimension 5 Code" = 'P') THEN //<TPZ2344> //<TPZ2561>
                     SalesLine.VALIDATE("Actual Unit Price", (EDIRecDocFields2."Field Dec. Value"/100))  //TPZ1994
                    ELSE
                     SalesLine.VALIDATE("Actual Unit Price", (EDIRecDocFields2."Field Dec. Value"));  //</TPZ2344>
                END;
      // << LS003
                END;
                //SalesLine."Unit Price Color":= SalesLine.SetStyle;
                SalesLine."Unit Price Color" := Table37EventSubscribers.Tb37_SetStyle(SalesLine); //<TPZ2829 Event Conversion
              END;
              //</TPZEDI>


            //
            // Add Custom Sales Line fields here
      // >> LS002
              SalesLine.FIELDNO(SalesLine.Description):
                SalesLine.VALIDATE(SalesLine.Description,(EDIRecDocFields2."Field Text Value"));
              SalesLine.FIELDNO(SalesLine."External Document Line No."):
                SalesLine.VALIDATE(SalesLine."External Document Line No.",(EDIRecDocFields2."Field Text Value"));
      // << LS002

            //
          END;
        14002372:
          BEGIN
            WriteInfoRec := TRUE;
            EDIRecDocLineInfo."Internal Doc. No." := EDIRecDocFields."Internal Doc. No.";
            EDIRecDocLineInfo."Document No." := SalesLine."Document No.";
            EDIRecDocLineInfo."Line No." := SalesLine."Line No.";

            CASE EDIRecDocFields2."Nav Field No." OF
              EDIRecDocLineInfo.FIELDNO("Text Field 1"):
                EDIRecDocLineInfo."Text Field 1" :=
                  EDILocalization.LoadTextFields(EDIRecDocLineInfo."Text Field 1",EDIRecDocFields2);
              EDIRecDocLineInfo.FIELDNO("Text Field 2"):
                EDIRecDocLineInfo."Text Field 2" :=
                  EDILocalization.LoadTextFields(EDIRecDocLineInfo."Text Field 2",EDIRecDocFields2);
              EDIRecDocLineInfo.FIELDNO("Text Field 3"):
                EDIRecDocLineInfo."Text Field 3" :=
                  EDILocalization.LoadTextFields(EDIRecDocLineInfo."Text Field 3",EDIRecDocFields2);
              EDIRecDocLineInfo.FIELDNO("Text Field 4"):
                EDIRecDocLineInfo."Text Field 4" :=
                  EDILocalization.LoadTextFields(EDIRecDocLineInfo."Text Field 4",EDIRecDocFields2);
              EDIRecDocLineInfo.FIELDNO("Text Field 5"):
                EDIRecDocLineInfo."Text Field 5" :=
                  EDILocalization.LoadTextFields(EDIRecDocLineInfo."Text Field 5",EDIRecDocFields2);
              EDIRecDocLineInfo.FIELDNO("Text Field 6"):
                EDIRecDocLineInfo."Text Field 6" :=
                  EDILocalization.LoadTextFields(EDIRecDocLineInfo."Text Field 6",EDIRecDocFields2);
              EDIRecDocLineInfo.FIELDNO("Text Field 7"):
                EDIRecDocLineInfo."Text Field 7" :=
                  EDILocalization.LoadTextFields(EDIRecDocLineInfo."Text Field 7",EDIRecDocFields2);
              EDIRecDocLineInfo.FIELDNO("Text Field 8"):
                EDIRecDocLineInfo."Text Field 8" :=
                  EDILocalization.LoadTextFields(EDIRecDocLineInfo."Text Field 8",EDIRecDocFields2);
              EDIRecDocLineInfo.FIELDNO("Text Field 9"):
                EDIRecDocLineInfo."Text Field 9" :=
                  EDILocalization.LoadTextFields(EDIRecDocLineInfo."Text Field 9",EDIRecDocFields2);
              EDIRecDocLineInfo.FIELDNO("Text Field 10"):
                EDIRecDocLineInfo."Text Field 10" :=
                  EDILocalization.LoadTextFields(EDIRecDocLineInfo."Text Field 10",EDIRecDocFields2);
              EDIRecDocLineInfo.FIELDNO("Date Field 1"):
                IF EDIRecDocFields2."Field Date Value" <> 0D THEN
                  EDIRecDocLineInfo."Date Field 1" :=
                    CALCDATE(EDIRecDocFields2."Forecast Date Formula",EDIRecDocFields2."Field Date Value");
              EDIRecDocLineInfo.FIELDNO("Date Field 2"):
                IF EDIRecDocFields2."Field Date Value" <> 0D THEN
                  EDIRecDocLineInfo."Date Field 2" :=
                    CALCDATE(EDIRecDocFields2."Forecast Date Formula",EDIRecDocFields2."Field Date Value");
              EDIRecDocLineInfo.FIELDNO("Date Field 3"):
                IF EDIRecDocFields2."Field Date Value" <> 0D THEN
                  EDIRecDocLineInfo."Date Field 3" :=
                    CALCDATE(EDIRecDocFields2."Forecast Date Formula",EDIRecDocFields2."Field Date Value");
              EDIRecDocLineInfo.FIELDNO("Date Field 4"):
                IF EDIRecDocFields2."Field Date Value" <> 0D THEN
                  EDIRecDocLineInfo."Date Field 4" :=
                    CALCDATE(EDIRecDocFields2."Forecast Date Formula",EDIRecDocFields2."Field Date Value");
              EDIRecDocLineInfo.FIELDNO("Date Field 5"):
                IF EDIRecDocFields2."Field Date Value" <> 0D THEN
                  EDIRecDocLineInfo."Date Field 5" :=
                    CALCDATE(EDIRecDocFields2."Forecast Date Formula",EDIRecDocFields2."Field Date Value");
              EDIRecDocLineInfo.FIELDNO("Decimal Field 1"):
                EDIRecDocLineInfo."Decimal Field 1" := EDIRecDocFields2."Field Dec. Value";
              EDIRecDocLineInfo.FIELDNO("Decimal Field 2"):
                EDIRecDocLineInfo."Decimal Field 2" := EDIRecDocFields2."Field Dec. Value";
              EDIRecDocLineInfo.FIELDNO("Decimal Field 3"):
                EDIRecDocLineInfo."Decimal Field 3" := EDIRecDocFields2."Field Dec. Value";
              EDIRecDocLineInfo.FIELDNO("Decimal Field 4"):
                EDIRecDocLineInfo."Decimal Field 4" := EDIRecDocFields2."Field Dec. Value";
              EDIRecDocLineInfo.FIELDNO("Decimal Field 5"):
                EDIRecDocLineInfo."Decimal Field 5" := EDIRecDocFields2."Field Dec. Value";
          END;
        END;
      END;

      EDIRecDocFields2."Document No." := SalesLine."Document No.";
      EDIRecDocFields2."Document Line No." := SalesLine."Line No.";
      IF EDIRecDocFields2."Field Date Value" <> 0D THEN BEGIN
        DateFormulaText := '';
        DateFormulaText := FORMAT(EDIRecDocFields2."Forecast Date Formula");
        IF DateFormulaText <> '' THEN
          EDIRecDocFields2."Calculated Date" :=
            CALCDATE(EDIRecDocFields2."Forecast Date Formula",EDIRecDocFields2."Field Date Value");
        DateFormulaText := '';
      END;
      EDIRecDocFields2.MODIFY;

      IF MapGenCrossRef THEN
        MapGeneralEDICrossRef(FALSE);

      IF EDILineDiscountFound THEN
        CalculatePercent(FALSE);
    END;

    PROCEDURE MapGeneralEDICrossRef@1240030004(Header@1240020001 : Boolean);
    VAR
      ShipPaymentType@1240030000 : 'Prepaid,Third Party,Freight Collect,Consignee';
      ShippingAdvice@1240020000 : 'Partial,Complete';
      AppliesToDocType@1240020002 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
    BEGIN
      IF Header THEN BEGIN
        EDIRecDocFields.RESET;
        EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
        EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
        EDIRecDocFields.SETRANGE(EDIRecDocFields."NAV Table No.",DATABASE::"Sales Header");
        EDIRecDocFields.SETRANGE(EDIRecDocFields."General EDI Cross Reference",TRUE);
        IF EDIRecDocFields.FIND('-') THEN BEGIN
          SalesHeader.SetRunFromEDI(TRUE);
          REPEAT
            CASE EDIRecDocFields."Nav Field No." OF
              SalesHeader.FIELDNO(SalesHeader."Shipping Agent Code"):
                SalesHeader.VALIDATE("Shipping Agent Code",EDIRecDocFields."NAV Cross Ref. Value-1");
              SalesHeader.FIELDNO("E-Ship Agent Service"):
                SalesHeader.VALIDATE(
                  "E-Ship Agent Service",EDIRecDocFields."NAV Cross Ref. Value-2");
              SalesHeader.FIELDNO("Payment Terms Code"):
                SalesHeader.VALIDATE("Payment Terms Code",EDIRecDocFields."NAV Cross Ref. Value-1");
              SalesHeader.FIELDNO("Shipment Method Code"):
                SalesHeader.VALIDATE("Shipment Method Code",EDIRecDocFields."NAV Cross Ref. Value-1");
              SalesHeader.FIELDNO("Shipping Payment Type"):
                BEGIN
                  EVALUATE(ShipPaymentType,EDIRecDocFields."NAV Cross Ref. Value-1");
                  SalesHeader.VALIDATE("Shipping Payment Type",ShipPaymentType);
                END;
              SalesHeader.FIELDNO("Shipping Advice"):
                BEGIN
                  EVALUATE(ShippingAdvice,EDIRecDocFields."NAV Cross Ref. Value-1");
                  SalesHeader.VALIDATE("Shipping Advice",ShippingAdvice);
                END;
              SalesHeader.FIELDNO("Reason Code"):
                SalesHeader.VALIDATE("Reason Code",EDIRecDocFields."NAV Cross Ref. Value-1");
              SalesHeader.FIELDNO("Applies-to Doc. Type"):
                BEGIN
                  EVALUATE(AppliesToDocType,EDIRecDocFields."NAV Cross Ref. Value-1");
                  SalesHeader.VALIDATE("Applies-to Doc. Type",AppliesToDocType);
                END;
              SalesHeader.FIELDNO("Shipping Agent Service Code"):
                SalesHeader.VALIDATE(
                  "Shipping Agent Service Code",EDIRecDocFields."NAV Cross Ref. Value-2");
              SalesHeader.FIELDNO("Campaign No."):
                SalesHeader.VALIDATE("Campaign No.",EDIRecDocFields."NAV Cross Ref. Value-1");
              SalesHeader.FIELDNO("Bill-to Country/Region Code"):
                SalesHeader.VALIDATE("Bill-to Country/Region Code",
                  EDIRecDocFields."NAV Cross Ref. Value-1");
              SalesHeader.FIELDNO("Sell-to Country/Region Code"):
                SalesHeader.VALIDATE("Sell-to Country/Region Code",
                  EDIRecDocFields."NAV Cross Ref. Value-1");
              SalesHeader.FIELDNO("Ship-to Country/Region Code"):
                SalesHeader.VALIDATE("Ship-to Country/Region Code",
                  EDIRecDocFields."NAV Cross Ref. Value-1");
              SalesHeader.FIELDNO("Location Code"):
                SalesHeader.VALIDATE("Location Code",EDIRecDocFields."NAV Cross Ref. Value-1");
            END;
          UNTIL EDIRecDocFields.NEXT = 0;
        END;
      END ELSE BEGIN
        EDIRecDocField.RESET;
        EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
        EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
        EDIRecDocField.SETRANGE(EDIRecDocField."NAV Table No.",DATABASE::"Sales Line");
        EDIRecDocField.SETRANGE(EDIRecDocField."General EDI Cross Reference",TRUE);
        EDIRecDocField.SETRANGE("Segment Group",EDIRecDocFields."Segment Group");
        IF EDIRecDocField.FIND('-') THEN BEGIN
          SalesLine.SetRunFromEDI(TRUE);
          REPEAT
            CASE EDIRecDocField."Nav Field No." OF
              SalesLine.FIELDNO("Return Reason Code"):
                SalesLine.VALIDATE("Return Reason Code",EDIRecDocField."NAV Cross Ref. Value-1");
            END;
          UNTIL EDIRecDocField.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CreateDiscountEntry@1240030001();
    VAR
      EDIRecDocFld@1240020003 : Record 14002359;
      EDIRecDocFld2@1240020004 : Record 14002359;
      SegmentID@1240020002 : Code[15];
      DiscountCode@1240030000 : Code[10];
      DiscountType@1240030003 : Code[2];
      DiscountIndicator@1240030004 : Code[1];
      DiscountAmount@1240030001 : Decimal;
      DiscountPercent@1240030002 : Decimal;
      DiscountDescription@1240020005 : Text[80];
      LineNo@1240020000 : Integer;
      GLAccount@1240020001 : Code[20];
    BEGIN
      DiscountAmount := 0;
      DiscountPercent := 0;
      LineNo := 0;
      SegmentID := '';
      GLAccount := '';
      DiscountCode := '';
      DiscountType := '';
      DiscountIndicator :='';
      DiscountDescription := '';

      EDIRecDocFld.RESET;
      EDIRecDocFld.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocFld.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocFld.SETRANGE("Segment Group",0);
      EDIRecDocFld.SETRANGE("NAV Table No.",DATABASE::"E.D.I. Discount");
      EDIRecDocFld.SETRANGE("Nav Field No.",EDIDiscount.FIELDNO(Code));
      IF EDIRecDocFld.FIND('-') THEN BEGIN
        SegmentID := EDIRecDocFld.Segment;
        EDIRecDocFld.RESET;
        EDIRecDocFld.SETCURRENTKEY("Internal Doc. No.",Segment,"Line No.");
        EDIRecDocFld.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
        EDIRecDocFld.SETRANGE("Segment Group",0);
        EDIRecDocFld.SETRANGE(Segment,SegmentID);
        EDIRecDocFld.SETRANGE("New Segment",TRUE);
        IF EDIRecDocFld.FIND('-') THEN
          REPEAT
            SegmentID := EDIRecDocFld.Segment;
            EDIRecDocFld2.RESET;
            EDIRecDocFld2.SETCURRENTKEY("Internal Doc. No.",Segment,"Line No.");
            EDIRecDocFld2.SETRANGE("Internal Doc. No.",EDIRecDocFld."Internal Doc. No.");
            EDIRecDocFld2.SETRANGE(Segment,SegmentID);
            EDIRecDocFld2.SETFILTER("Line No.",'>%1',EDIRecDocFld."Line No.");
            IF EDIRecDocFld2.FIND('-') THEN BEGIN
              REPEAT
                CASE EDIRecDocFld2."NAV Table No." OF
                  DATABASE::"E.D.I. Discount":
                    CASE EDIRecDocFld2."Nav Field No." OF
                      EDIDiscount.FIELDNO(Code):
                        DiscountCode := EDIRecDocFld2."Field Text Value";
                      EDIDiscount.FIELDNO(Amount):
                       DiscountAmount := EDIRecDocFld2."Field Dec. Value";
                      EDIDiscount.FIELDNO(Percent):
                        DiscountPercent := EDIRecDocFld2."Field Dec. Value";
                      EDIDiscount.FIELDNO(Type):
                        DiscountType := EDIRecDocFld2."Field Text Value";
                      EDIDiscount.FIELDNO(Indicator):
                        DiscountIndicator := EDIRecDocFld2."Field Text Value";
                      EDIDiscount.FIELDNO(Description):
                        DiscountDescription := EDIRecDocFld2."Field Text Value";
                    END;
                END;
              UNTIL (EDIRecDocFld2.NEXT = 0) OR (EDIRecDocFld2."New Segment" = TRUE);
              IF DiscountCode <> '' THEN BEGIN
                EDIDiscount.RESET;
                EDIDiscount.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
                IF EDIDiscount.FIND('+') THEN
                  LineNo := EDIDiscount."Line No." + 1
                ELSE
                  LineNo := 1;

                EDIDiscount.INIT;
                EDIDiscount."Internal Doc. No." := EDIRecDocHdr2."Internal Doc. No.";
                EDIDiscount.Code := DiscountCode;
                EDIDiscount."Line No." := LineNo;
                EDIDiscount.INSERT;
                EDIDiscount.Amount := DiscountAmount;
                EDIDiscount.Percent := DiscountPercent;
                EDIDiscount.Indicator := DiscountIndicator;
                EDIDiscount.Type := DiscountType;
                EDIDiscount.Segment := SegmentID;
                EDIDiscount.Description := DiscountDescription;
                EDIDiscount.MODIFY;
              END;
              DiscountAmount := 0;
              DiscountPercent := 0;
              SegmentID := '';
              GLAccount := '';
              DiscountCode := '';
              DiscountType := '';
              DiscountIndicator := '';
              DiscountDescription := '';
            END;
          UNTIL EDIRecDocFld.NEXT = 0;
      END;
    END;

    PROCEDURE CalculatePercent@1240030002(Header@1240020001 : Boolean);
    VAR
      CustInvoiceDisc@1240020000 : Record 19;
      CustInvoiceDisc2@1240020003 : Record 19;
      EDIRecDocField@1240020002 : Record 14002359;
      EDIRecDocField2@1240020007 : Record 14002359;
      EDIIncrementSequence@1240020004 : Codeunit 14002384;
      TotalDiscountAmt@1240030001 : Decimal;
      TotalDiscountPercent@1240030000 : Decimal;
      NAVDiscountCode@1240020005 : Code[20];
      ApplyToStoreCode@1240020008 : Code[20];
      RecordFound@1240020006 : Boolean;
    BEGIN
      TotalDiscountAmt := 0;
      TotalDiscountPercent := 0;
      NAVDiscountCode := '';
      ApplyToStoreCode := '';

      IF Header THEN BEGIN
        EDIDiscount.RESET;
        EDIDiscount.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
        IF EDIDiscount.FIND('-') THEN BEGIN
          REPEAT
            TotalDiscountPercent := TotalDiscountPercent + EDIDiscount.Percent;
            TotalDiscountAmt := TotalDiscountAmt + EDIDiscount.Amount;
          UNTIL EDIDiscount.NEXT = 0;
          CustInvoiceDisc.RESET;
          IF EDIDocument."NAV Invoice Discount Code" <> '' THEN BEGIN
            CustInvoiceDisc.SETRANGE(Code,EDIDocument."NAV Invoice Discount Code");
            IF NOT CustInvoiceDisc.FIND('-') THEN
              ERROR(Text043,EDIDocument."NAV Invoice Discount Code");
            IF TotalDiscountPercent <> 0 THEN BEGIN
              IF (TotalDiscountPercent <> CustInvoiceDisc."Discount %") THEN BEGIN
                NAVDiscountCode :=  ''''+ EDIDocument."NAV Invoice Discount Code" + '*' +'''';
                CustInvoiceDisc2.RESET;
                CustInvoiceDisc2.SETFILTER(Code,NAVDiscountCode);
                IF CustInvoiceDisc2.FIND('-') THEN
                  REPEAT
                    IF CustInvoiceDisc2."Discount %" = TotalDiscountPercent THEN BEGIN
                      RecordFound := TRUE;
                      CustInvoiceDisc := CustInvoiceDisc2;
                    END;
                  UNTIL (CustInvoiceDisc2.NEXT = 0) OR (RecordFound = TRUE);
                IF NOT RecordFound THEN
                  EDIIncrementSequence.IncrementInvoiceDiscSequence(
                           EDIDocument,CustInvoiceDisc,TotalDiscountPercent);
              END;
              SalesHeader."Invoice Disc. Code" := CustInvoiceDisc.Code;
            END;
          END ELSE
            ERROR(Text044,EDITradePartner."No.",EDIDocument."EDI Document No.");
        END;
      END ELSE BEGIN
        EDIRecDocField2.RESET;
        EDIRecDocField2.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
        EDIRecDocField2.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
        EDIRecDocField2.SETRANGE("NAV Table No.",DATABASE::"E.D.I. Line Discount");
        EDIRecDocField2.SETRANGE("Nav Field No.",EDILineDiscount.FIELDNO("EDI Store No."));
        EDIRecDocField2.SETRANGE("Segment Group",EDIRecDocFields2."Segment Group");
        IF EDIRecDocField2.FIND('-') THEN
          ApplyToStoreCode := EDIRecDocField2."Field Text Value";

        EDILineDiscount.RESET;
        EDILineDiscount.SETCURRENTKEY("Internal Doc. No.","Segment Group",Code);
        EDILineDiscount.SETRANGE("Internal Doc. No.",InternalDocNo);
        EDILineDiscount.SETRANGE("Segment Group",EDIRecDocFields2."Segment Group");
        EDILineDiscount.SETRANGE("Document Type",EDILineDiscount."Document Type"::Order);
        EDILineDiscount.SETRANGE("Document No.",SalesHeader."No.");
        EDILineDiscount.SETRANGE("EDI Store No.",'');
        IF EDILineDiscount.FIND('-') THEN
          REPEAT
            TotalDiscountPercent := TotalDiscountPercent + EDILineDiscount.Percent;
            TotalDiscountAmt := TotalDiscountAmt + EDILineDiscount.Amount;
          UNTIL EDILineDiscount.NEXT = 0;

          IF TotalDiscountPercent <> 0 THEN
            SalesLine.VALIDATE("Line Discount %",TotalDiscountPercent)
          ELSE
            IF TotalDiscountAmt <> 0 THEN
              SalesLine.VALIDATE("Line Discount Amount",TotalDiscountAmt);
          SalesLine.MODIFY;
          CreateEDILineDiscountEntry(ApplyToStoreCode);

        TotalDiscountPercent := 0;
        TotalDiscountAmt := 0;

        EDILineDiscount.RESET;
        EDILineDiscount.SETCURRENTKEY("Internal Doc. No.","Segment Group",Code);
        EDILineDiscount.SETRANGE("Internal Doc. No.",InternalDocNo);
        EDILineDiscount.SETRANGE("Segment Group",EDIRecDocFields2."Segment Group");
        EDILineDiscount.SETRANGE("Document Type",EDILineDiscount."Document Type"::Order);
        EDILineDiscount.SETRANGE("Document No.",SalesHeader."No.");
        EDILineDiscount.SETFILTER("EDI Store No.",'<>%1','');
        IF EDILineDiscount.FIND('-') THEN
          IF EDILineDiscount."EDI Store No." = SalesHeader."EDI Ship-for Code" THEN
            REPEAT
              TotalDiscountPercent := TotalDiscountPercent + EDILineDiscount.Percent;
              TotalDiscountAmt := TotalDiscountAmt + EDILineDiscount.Amount;
            UNTIL EDILineDiscount.NEXT = 0;

          IF TotalDiscountPercent <> 0 THEN
            SalesLine.VALIDATE("Line Discount %",TotalDiscountPercent)
          ELSE
            IF TotalDiscountAmt <> 0 THEN
              SalesLine.VALIDATE("Line Discount Amount",TotalDiscountAmt);
          SalesLine.MODIFY;
          CreateEDILineDiscountEntry(ApplyToStoreCode);
      END;
      ApplyToStoreCode := ''
    END;

    PROCEDURE CreateEDILineDiscountEntry@1240020002(ApplyToStoreCode@1240020001 : Code[20]);
    VAR
      EDIRecDocFld@1240020003 : Record 14002359;
      EDIRecDocFld2@1240020004 : Record 14002359;
      EDIRecDocFld3@1240020006 : Record 14002359;
      SegmentID@1240020002 : Code[15];
      DiscountCode@1240030000 : Code[10];
      DiscountType@1240030003 : Code[2];
      DiscountIndicator@1240030004 : Code[1];
      DiscountAmount@1240030001 : Decimal;
      DiscountPercent@1240030002 : Decimal;
      SegmentGroup@1240030005 : Integer;
      DiscountDescription@1240020005 : Text[80];
      LineNo@1240020000 : Integer;
      GLAccount@1240020007 : Code[20];
    BEGIN
      SegmentGroup := 0;
      DiscountAmount := 0;
      DiscountPercent := 0;
      LineNo := 0;
      GLAccount := '';
      DiscountCode := '';
      DiscountType := '';
      SegmentID := '';
      DiscountIndicator :='';
      DiscountDescription := '';

      EDIRecDocFld.RESET;
      EDIRecDocFld.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocFld.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocFld.SETRANGE("Segment Group",EDIRecDocFields2."Segment Group");
      EDIRecDocFld.SETRANGE("NAV Table No.",DATABASE::"E.D.I. Line Discount");
      IF EDIRecDocFld.FIND('-') THEN BEGIN
        SegmentID := EDIRecDocFld.Segment;
        EDIRecDocFld2.RESET;
        EDIRecDocFld2.SETCURRENTKEY("Internal Doc. No.",Segment,"Line No.");
        EDIRecDocFld2.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
        EDIRecDocFld2.SETRANGE(Segment,SegmentID);
        EDIRecDocFld2.SETRANGE("Segment Group",EDIRecDocFld."Segment Group");
        EDIRecDocFld2.SETRANGE("New Segment",TRUE);
        IF EDIRecDocFld2.FIND('-') THEN
          REPEAT
            EDIRecDocFld3.RESET;
            EDIRecDocFld3.SETCURRENTKEY("Internal Doc. No.",Segment,"Line No.");
            EDIRecDocFld3.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
            EDIRecDocFld3.SETRANGE(Segment,SegmentID);
            EDIRecDocFld3.SETRANGE("Segment Group",EDIRecDocFld2."Segment Group");
            EDIRecDocFld3.SETFILTER("Line No.",'>%1',EDIRecDocFld2."Line No.");
            IF EDIRecDocFld3.FIND('-') THEN BEGIN
              REPEAT
                CASE EDIRecDocFld3."NAV Table No." OF
                  DATABASE::"E.D.I. Line Discount":
                    CASE EDIRecDocFld3."Nav Field No." OF
                      EDILineDiscount.FIELDNO(Code):
                        BEGIN
                          DiscountCode := EDIRecDocFld3."Field Text Value";
                          SegmentGroup := EDIRecDocFld3."Segment Group";
                        END;
                      EDILineDiscount.FIELDNO(Amount):
                       DiscountAmount := EDIRecDocFld3."Field Dec. Value";
                      EDILineDiscount.FIELDNO(Percent):
                        DiscountPercent := EDIRecDocFld3."Field Dec. Value";
                      EDILineDiscount.FIELDNO(Type):
                        DiscountType := EDIRecDocFld3."Field Text Value";
                      EDILineDiscount.FIELDNO(Indicator):
                        DiscountIndicator := EDIRecDocFld3."Field Text Value";
                      EDILineDiscount.FIELDNO(Description):
                        DiscountDescription := EDIRecDocFld3."Field Text Value";
                    END;
                END;
              UNTIL (EDIRecDocFld3.NEXT = 0) OR (EDIRecDocFld3."New Segment" = TRUE);
              IF ((DiscountCode <> '') AND (ApplyToStoreCode = '') AND (PrevDiscountGroup <> SegmentGroup)) OR
                 ((DiscountCode <> '') AND (ApplyToStoreCode = '') AND ((PrevDiscountGroup = SegmentGroup) AND
                  (SalesHeader."EDI Ship-for Code" <> PrevEDIShipForCode))) OR
                 ((DiscountCode <> '') AND
                  (ApplyToStoreCode <> '') AND (ApplyToStoreCode = SalesHeader."EDI Ship-for Code") AND
                  (SalesHeader."EDI Ship-for Code" <> PrevEDIShipForCode))
              THEN BEGIN
                EDILineDiscount.RESET;
                EDILineDiscount.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
                EDILineDiscount.SETRANGE("Document No.",SalesLine."Document No.");
                EDILineDiscount.SETRANGE("Document Line No.",SalesLine."Line No.");
                EDILineDiscount.SETRANGE("Document Type",SalesLine."Document Type");
                IF EDILineDiscount.FIND('+') THEN
                  LineNo := EDILineDiscount."Line No." + 1
                ELSE
                  LineNo := 1;

                EDILineDiscount.INIT;
                EDILineDiscount."Internal Doc. No." := EDIRecDocHdr2."Internal Doc. No.";
                EDILineDiscount.VALIDATE("Document Type",SalesLine."Document Type");
                EDILineDiscount."Document No." := SalesLine."Document No.";
                EDILineDiscount."Document Line No." := SalesLine."Line No.";
                EDILineDiscount.Code := DiscountCode;
                EDILineDiscount."Line No." := LineNo;
                EDILineDiscount.INSERT;
                EDILineDiscount.Amount := DiscountAmount;
                EDILineDiscount.Percent := DiscountPercent;
                EDILineDiscount.Indicator := DiscountIndicator;
                EDILineDiscount.Type := DiscountType;
                EDILineDiscount.Segment := SegmentID;
                EDILineDiscount."Segment Group" := SegmentGroup;
                EDILineDiscount.Description := DiscountDescription;
                EDILineDiscount."EDI Store No." := ApplyToStoreCode;
                EDILineDiscount.VALIDATE("Item No.",SalesLine."No.");
                EDILineDiscount.MODIFY;
              END;
              SegmentGroup := 0;
              DiscountAmount := 0;
              DiscountPercent := 0;
              DiscountCode := '';
              DiscountType := '';
              GLAccount := '';
              DiscountIndicator :='';
              DiscountDescription := '';
            END;
          UNTIL EDIRecDocFld2.NEXT = 0;
          PrevDiscountGroup := EDIRecDocFields2."Segment Group";
          PrevEDIShipForCode := SalesHeader."EDI Ship-for Code";
      END;
    END;

    PROCEDURE CreateWhseShipOrder@1240020001(EDIRecDocHdr@1240020001 : Record 14002358) Processed : Boolean;
    VAR
      EDIDocument2@1240020002 : Record 14002353;
      EDISendDocHdr@1240020009 : Record 14002369;
      EDISendDocHdrTmp@1240020006 : TEMPORARY Record 14002369;
      EDITradePartner@1240020005 : Record 14002360;
      Location@1240020003 : Record 14;
      LocationTmp@1240020000 : TEMPORARY Record 14;
      EDISalesOrderSend@1240020007 : Codeunit 14002359;
      EDISend@1240020008 : Codeunit 14002356;
      SendError@1240020004 : Boolean;
    BEGIN
      SendError := FALSE;

      LocationTmp.RESET;
      LocationTmp.DELETEALL;

      SalesHeader.RESET;
      SalesHeader.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
      SalesHeader.SETRANGE("EDI Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      SalesHeader.SETRANGE("EDI Released",TRUE);
      IF SalesHeader.FIND('-') THEN BEGIN
        REPEAT
          IF NOT Location.GET(SalesHeader."Location Code") THEN
            SendError := TRUE;
          IF NOT EDITradePartner.GET(Location."EDI Trading Partner ID") THEN
            SendError := TRUE;
        UNTIL (SalesHeader.NEXT = 0) OR (SendError);
      END;

      IF SendError THEN
        EXIT(FALSE);

      SalesHeader.RESET;
      SalesHeader.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
      SalesHeader.SETRANGE("EDI Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      SalesHeader.SETRANGE("EDI Released",TRUE);
      IF SalesHeader.FIND('-') THEN BEGIN
        REPEAT
          IF Location.GET(SalesHeader."Location Code") THEN BEGIN
            LocationTmp.RESET;
            LocationTmp.SETRANGE(Code,SalesHeader."Location Code");
            IF NOT LocationTmp.FIND('-') THEN BEGIN
              LocationTmp.TRANSFERFIELDS(Location);
              LocationTmp.INSERT;
            END;
            CLEAR(EDISalesOrderSend);
            EDISalesOrderSend.CreateWHSEShipOrder(SalesHeader);
          END;
        UNTIL SalesHeader.NEXT = 0;
        EDIRecDocHdr2.GET(EDIRecDocHdr2."Internal Doc. No.");
        EDIRecDocHdr2."Whse. Ship. Order Generated" := TRUE;
        EDIRecDocHdr2."Generated Date" := TODAY;
        EDIRecDocHdr2."Generated Time" := TIME;
        EDIRecDocHdr2.MODIFY;
        COMMIT;
        LocationTmp.RESET;
        IF LocationTmp.FIND('-') THEN
          REPEAT
            EDISendDocHdrTmp.RESET;
            EDISendDocHdrTmp.DELETEALL;
            SalesHeader.RESET;
            SalesHeader.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
            SalesHeader.SETRANGE("EDI Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
            SalesHeader.SETRANGE("Location Code",LocationTmp.Code);
            SalesHeader.SETRANGE("EDI Released",TRUE);
              IF SalesHeader.FIND('-') THEN
                REPEAT
                  EDISendDocHdr.RESET;
                  EDISendDocHdr.SETRANGE("Internal Doc No.",EDIRecDocHdr2."Internal Doc. No.");
                  EDISendDocHdr.SETRANGE("Navision Document",'E_SLSWSA');
                  EDISendDocHdr.SETRANGE("Sent Date",0D);
                  EDISendDocHdr.SETRANGE("Document No.",SalesHeader."No.");
                  IF EDISendDocHdr.FIND('-') THEN BEGIN
                    EDISendDocHdrTmp.RESET;
                    EDISendDocHdrTmp.TRANSFERFIELDS(EDISendDocHdr);
                    EDISendDocHdrTmp.INSERT;
                  END;
                UNTIL SalesHeader.NEXT = 0;
            EDIDocument2.RESET;
            EDIDocument2.SETRANGE("Trade Partner No.",LocationTmp."EDI Trading Partner ID");
            EDIDocument2.SETRANGE("Navision Document",'E_SLSWSA');
            EDIDocument2.SETRANGE(Type,EDIDocument2.Type::Export);
            EDIDocument2.SETFILTER(
              Status,'%1|%2',EDIDocument2.Status::Test,EDIDocument2.Status::Production);
            IF EDIDocument2.FIND('-') THEN BEGIN
              EDISendDocHdrTmp.RESET;
              EDISendDocHdrTmp.SETRANGE("Internal Doc No.",EDIRecDocHdr2."Internal Doc. No.");
              EDISendDocHdrTmp.SETRANGE("Navision Document",'E_SLSWSA');
              EDISendDocHdrTmp.SETRANGE("Sent Date",0D);
              IF EDISendDocHdrTmp.FIND('-') THEN
                IF NOT EDISend.ExportDoc(EDIDocument2,EDISendDocHdrTmp,TRUE) THEN
                  SendError := TRUE;
            END;
          UNTIL LocationTmp.NEXT = 0;
        END;

      IF SendError THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE DuplicatePOCheck@1240020003(EDIRecDocFields@1240020004 : Record 14002359);
    VAR
      SalesHeader1@1240020000 : Record 36;
      CustLedgEntry@1240020001 : Record 21;
      DupPODate@1240020002 : Date;
      ConfirmMsg@1240020003 : Text[250];
    BEGIN
      DupPODate := CALCDATE(EDIRecDocFields."Forecast Date Formula",WORKDATE);
      //MESSAGE('%1..%2', EDIRecDocFields."Forecast Date Formula", DupPODate);

      SalesHeader1.RESET;
      SalesHeader1.SETCURRENTKEY("Sell-to Customer No.","External Document No.");
      SalesHeader1.SETRANGE("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
      SalesHeader1.SETRANGE("External Document No.",EDIRecDocFields."Field Text Value");
      SalesHeader1.SETRANGE("Document Type",SalesHeader1."Document Type"::Order);
      SalesHeader1.SETFILTER("Document Date",'%1..',DupPODate);
      IF SalesHeader1.FIND('-') THEN BEGIN
        IF EDIRecDocHdr2."Manual Process" THEN BEGIN
         ConfirmMsg := Text045;
         ConfirmMsg := STRSUBSTNO(
           ConfirmMsg,
           FORMAT(DupPODate),WORKDATE,SalesHeader1."External Document No.",SalesHeader1."No.");
          IF GUIALLOWED THEN BEGIN
            IF NOT CONFIRM(
              ConfirmMsg +
              Text047)
            THEN
              ERROR(Text005);
          END ELSE
            ERROR(Text005);
        END ELSE
          ERROR(Text045,DupPODate,WORKDATE,SalesHeader1."External Document No.",SalesHeader1."No.");
      END ELSE BEGIN
        CustLedgEntry.RESET;
        CustLedgEntry.SETCURRENTKEY("External Document No.","Customer No.","Document Type");
        CustLedgEntry.SETRANGE("External Document No.",EDIRecDocFields."Field Text Value");
        CustLedgEntry.SETRANGE("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
        CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::Invoice);
        CustLedgEntry.SETFILTER("Document Date",'%1..',DupPODate);
        IF CustLedgEntry.FIND('-') THEN
          IF EDIRecDocHdr2."Manual Process" THEN BEGIN
            ConfirmMsg := Text046;
            ConfirmMsg := STRSUBSTNO(
              ConfirmMsg,
              CustLedgEntry."Document No.",CustLedgEntry."External Document No.");
            IF GUIALLOWED THEN BEGIN
              IF NOT CONFIRM(
                ConfirmMsg +
                Text047)
              THEN
                ERROR(Text005);
            END ELSE
              ERROR(Text005);
          END ELSE
            ERROR(
              Text046,CustLedgEntry."Document No.",CustLedgEntry."External Document No.");
      END;
    END;

    PROCEDURE GetSLNSegment@1240020004();
    VAR
      EDISegment@1240020000 : Record 14002354;
      Finished@1240020002 : Boolean;
      ProcessingSubLine@1240020003 : Boolean;
    BEGIN
      SLNFound := FALSE;

      EDIRecDocFields.RESET;
      EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","Field Name");
      EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocFields.SETFILTER(Segment,'%1','SLN');
      IF EDIRecDocFields.FIND('-') THEN
      REPEAT
        IF (EDIRecDocFields.Trigger = TRUE) AND
           ((EDIRecDocFields."NAV Table No." <> DATABASE::"Sales Comment Line") AND
            (EDIRecDocFields."NAV Table No." <> 10044))
        THEN BEGIN
          SLNFound := TRUE;
          SLNSegmentID := 'SLN'
        END;
      UNTIL (EDIRecDocFields.NEXT = 0) OR (SLNFound = TRUE);
      IF SLNFound = FALSE THEN BEGIN
        Finished := FALSE;
        EDISegment.SETRANGE("Trade Partner No.",EDIDocument."Trade Partner No.");
        EDISegment.SETRANGE("Navision Document",EDIDocument."Navision Document");
        EDISegment.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
        EDISegment.SETRANGE(Version,EDIDocument.Version);
        EDISegment.SETRANGE(Type,EDIDocument.Type);
        IF EDISegment.FIND('-') THEN BEGIN
          REPEAT
            CASE EDISegment."Segment Type" OF
              EDISegment."Segment Type"::Command:
                BEGIN
                  IF EDISegment.Segment = 'SUB LINE BEGIN' THEN
                    ProcessingSubLine := TRUE;
                  IF EDISegment.Segment = 'SUB LINE END' THEN
                    Finished := TRUE;
                END;
              EDISegment."Segment Type"::Segment:
                BEGIN
                  IF ProcessingSubLine THEN BEGIN
                    EDIRecDocFields.RESET;
                    EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","Field Name");
                    EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
                    EDIRecDocFields.SETRANGE(Segment,EDISegment.Segment);
                    IF EDIRecDocFields.FIND('-') THEN
                      REPEAT
                        IF (EDIRecDocFields.Trigger = TRUE) AND
                           ((EDIRecDocFields."NAV Table No." <> DATABASE::"Sales Comment Line") AND
                            (EDIRecDocFields."NAV Table No." <> 10044))
                        THEN BEGIN
                          SLNFound := TRUE;
                          SLNSegmentID := EDISegment.Segment;
                        END;
                      UNTIL (EDIRecDocFields.NEXT = 0) OR (SLNFound = TRUE);
                  END;
                END;
            END;
          UNTIL (EDISegment.NEXT= 0) OR (Finished);
        END;
      END;
      IF SLNFound THEN BEGIN
        EDIRecDocFields2.RESET;
        EDIRecDocFields2.SETCURRENTKEY("Internal Doc. No.","Segment Group");
        EDIRecDocFields2.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
        EDIRecDocFields2.SETRANGE("Segment Group",EDIRecDocFields."Segment Group");
        EDIRecDocFields2.SETRANGE(Segment,SLNSegmentID);
        IF EDIRecDocFields2.FIND('-') THEN BEGIN
          SLNGroup := 0;
          REPEAT
            IF (EDIRecDocFields2."New Segment") AND
               (EDIRecDocFields2.Segment = SLNSegmentID)
            THEN
              SLNGroup := SLNGroup + 1;
            EDIRecDocFields2."SLN Group" := SLNGroup;
            EDIRecDocFields2.MODIFY;
          UNTIL EDIRecDocFields2.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE PostSalesDocument@1240020005(Type@1240020000 : 'Invoice,Credit Memo');
    BEGIN
      CASE Type OF
        Type::Invoice:
          BEGIN
            IF PostingErrorReprocess THEN
              GetSalesHeader;
            SalesHeader.Invoice := TRUE;
            SalesHeader.MODIFY;
            CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
            EDIRecDocHdr2.GET(EDIRecDocHdr2."Internal Doc. No.");
            EDIRecDocHdr2."Sales Invoice Posting Error" := FALSE;
            EDIRecDocHdr2."Sales Invoice Posted" := TRUE;
            EDIRecDocHdr2."Sales Invoice Posted Date" := TODAY;
            EDIRecDocHdr2."Sales Invoice Posted Time" := TIME;
            EDIRecDocHdr2."Document Processed" := TRUE;
            EDIRecDocHdr2."Data Error" := FALSE;
            EDIRecDocHdr2.MODIFY;
          END;
      END;
    END;

    PROCEDURE GetSalesHeader@1240020006();
    BEGIN
      SalesHeader.RESET;
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Invoice);
      SalesHeader.SETRANGE("EDI Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
      IF NOT SalesHeader.FIND('-') THEN
        ERROR(Text048,EDIRecDocHdr."Internal Doc. No.",EDIRecDocHdr."Trade Partner No.");
    END;

    PROCEDURE SetPOChangeQuantity@1240020009() Quantity : Decimal;
    VAR
      QuoteHeader@1240020000 : Record 36;
      QuoteLine@1240020004 : Record 37;
      EDIRecDocField@1240030002 : Record 14002359;
      EDIRecDocField2@1240020001 : Record 14002359;
      QtyOrdered@1240030003 : Decimal;
      NewQty@1240030004 : Decimal;
      QtyDifference@1240030005 : Decimal;
      OriginalQty@1240020002 : Boolean;
      ChangeQty@1240020003 : Boolean;
      QtyFound@1240020005 : Boolean;
    BEGIN
      NewQty := 0;
      QtyOrdered := 0;
      QtyDifference := 0;

      EDIRecDocField.RESET;
      EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocField.SETFILTER("Segment Group",'>%1',0);
      EDIRecDocField.SETRANGE(Multiplier,TRUE);
      IF EDIRecDocField.FIND('-') THEN
        MultiplierFound := TRUE
      ELSE
        MultiplierFound := FALSE;

      QuoteHeader.RESET;
      QuoteHeader.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
      QuoteHeader.SETRANGE("EDI Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      IF QuoteHeader.FIND('-') THEN
        REPEAT
          QuoteLine.RESET;
          QuoteLine.SETRANGE("Document Type",QuoteHeader."Document Type");
          QuoteLine.SETRANGE("Document No.",QuoteHeader."No.");
          IF QuoteLine.FIND('-') THEN
            REPEAT
              EDIRecDocField.RESET;
              EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
              EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
              EDIRecDocField.SETRANGE("NAV Table No.",DATABASE::"Sales Line");
              EDIRecDocField.SETRANGE("Segment Group",QuoteLine."EDI Segment Group");
              IF EDIRecDocHdr2."Subline Item Detail Used" THEN
                EDIRecDocField.SETRANGE("SLN Document Line No.",QuoteLine."Line No.");
              IF EDIRecDocField.FIND('-') THEN
                REPEAT
                  LastQty := 0;
                  QtyFound := FALSE;
                  CASE EDIRecDocField."Nav Field No." OF
                    QuoteLine.FIELDNO(Quantity):
                      BEGIN
                        QtyFound := TRUE;
                        IF EDIRecDocField."Field Integer Value" <> 0 THEN
                          LastQty := EDIRecDocField."Field Integer Value";
                        IF EDIRecDocField."Field Dec. Value" <> 0 THEN
                          LastQty := EDIRecDocField."Field Dec. Value";
                        IF MultiplierFound THEN
                          LastQty := EDIRecDocField."Extended Quantity"
                      END;
                  END;
                UNTIL EDIRecDocField.NEXT = 0;

              EDIRecDocField.RESET;
              EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","Segment Group");
              EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
              EDIRecDocField.SETRANGE("Segment Group",QuoteLine."EDI Segment Group");
              EDIRecDocField.SETRANGE(Segment,'QTY');
              EDIRecDocField.SETRANGE("New Segment",TRUE);
              IF EDIRecDocField.FIND('-') THEN BEGIN
                REPEAT
                  EDIRecDocField2.RESET;
                  EDIRecDocField2.SETCURRENTKEY("Internal Doc. No.","Segment Group");
                  EDIRecDocField2.SETRANGE("Internal Doc. No.",EDIRecDocField."Internal Doc. No.");
                  EDIRecDocField2.SETRANGE("Segment Group",EDIRecDocField."Segment Group");
                  EDIRecDocField2.SETRANGE(Segment,EDIRecDocField.Segment);
                  EDIRecDocField2.SETRANGE("Line No.",EDIRecDocField."Line No.");
                  IF EDIRecDocField2.FIND('-') THEN
                    REPEAT
                      CASE EDIRecDocField2.Element OF
                        '01':
                          BEGIN
                            CASE EDIRecDocField2."Field Text Value" OF
                             '38':
                               BEGIN
                                 OriginalQty := TRUE;
                                 ChangeQty := FALSE;
                               END;
                             '69','QV':
                               BEGIN
                                 OriginalQty := FALSE;
                                 ChangeQty := TRUE;
                               END;
                            END;
                           END;
                        '02':
                          BEGIN
                            IF OriginalQty THEN BEGIN
                              IF (EDIRecDocField2."Field Integer Value" = 0) AND
                                 (EDIRecDocField2."Field Integer Value" = 0)
                              THEN
                                IF EDIRecDocField2."Field Text Value" = '' THEN
                                  QtyOrdered := 0
                                ELSE
                                  EVALUATE(QtyOrdered,EDIRecDocField2."Field Text Value")
                              ELSE BEGIN
                                IF EDIRecDocField2."Field Integer Value" <> 0 THEN
                                  QtyOrdered := EDIRecDocField2."Field Integer Value";
                                IF EDIRecDocField2."Field Dec. Value" <> 0 THEN
                                  QtyOrdered := EDIRecDocField2."Field Dec. Value";
                              END;
                            END;
                            IF ChangeQty THEN BEGIN
                              IF (EDIRecDocField2."Field Integer Value" = 0) AND
                                 (EDIRecDocField2."Field Integer Value" = 0)
                              THEN
                                IF EDIRecDocField2."Field Text Value" = '' THEN
                                  QtyDifference := 0
                                ELSE
                                  EVALUATE(QtyDifference,EDIRecDocField2."Field Text Value")
                              ELSE BEGIN
                                IF EDIRecDocField2."Field Integer Value" <> 0 THEN
                                  QtyDifference := EDIRecDocField2."Field Integer Value";
                                IF EDIRecDocField2."Field Dec. Value" <> 0 THEN
                                  QtyDifference := EDIRecDocField2."Field Dec. Value";
                              END;
                            END;
                            ChangeQty := FALSE;
                            OriginalQty := FALSE;
                          END;
                      END;
                    UNTIL (EDIRecDocField2.NEXT = 0) OR (EDIRecDocField2."New Segment");
                UNTIL EDIRecDocField.NEXT = 0;
              END ELSE BEGIN
                EDIRecDocField.RESET;
                EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","Segment Group");
                EDIRecDocField.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
                EDIRecDocField.SETRANGE("Segment Group",QuoteLine."EDI Segment Group");
                EDIRecDocField.SETRANGE(Segment,'POC');
                IF EDIRecDocField.FIND('-') THEN
                  REPEAT
                    CASE EDIRecDocField.Element OF
                      '03':
                        BEGIN
                          IF (EDIRecDocField."Field Integer Value" = 0) AND
                             (EDIRecDocField."Field Integer Value" = 0)
                          THEN
                            IF EDIRecDocField."Field Text Value" = '' THEN
                              QtyOrdered := 0
                            ELSE
                              EVALUATE(QtyOrdered,EDIRecDocField."Field Text Value")
                          ELSE BEGIN
                            IF EDIRecDocField."Field Integer Value" <> 0 THEN
                              QtyOrdered := EDIRecDocField."Field Integer Value";
                            IF EDIRecDocField."Field Dec. Value" <> 0 THEN
                              QtyOrdered := EDIRecDocField."Field Dec. Value";
                          END;
                        END;
                      '04':
                        BEGIN
                          IF (EDIRecDocField."Field Integer Value" = 0) AND
                             (EDIRecDocField."Field Integer Value" = 0)
                          THEN
                            IF EDIRecDocField."Field Text Value" = '' THEN
                              QtyDifference := 0
                            ELSE
                              EVALUATE(QtyDifference,EDIRecDocField."Field Text Value")
                          ELSE BEGIN
                            IF EDIRecDocField."Field Integer Value" <> 0 THEN
                              QtyDifference := EDIRecDocField."Field Integer Value";
                            IF EDIRecDocField."Field Dec. Value" <> 0 THEN
                              QtyDifference := EDIRecDocField."Field Dec. Value";
                          END;
                        END;
                    END;
                  UNTIL (EDIRecDocField.NEXT = 0) OR (EDIRecDocField."New Segment");
              END;

              CASE QuoteLine."EDI Code" OF
                'QD':
                  BEGIN
                    IF SDQFound = FALSE THEN BEGIN
                      NewQty := QtyOrdered - QtyDifference;
                      QuoteLine.VALIDATE(Quantity,NewQty);
                    END;
                    QuoteLine.MODIFY;
                  END;
                'QI':
                  BEGIN
                    IF SDQFound = FALSE THEN BEGIN
                      NewQty := QtyOrdered + QtyDifference;
                      QuoteLine.VALIDATE(Quantity,NewQty);
                    END;
                    QuoteLine.MODIFY;
                  END;
                'DI','2':
                  BEGIN
                    NewQty := 0;
                    QuoteLine.VALIDATE(Quantity,NewQty);
                    QuoteLine.MODIFY;
                  END;
                ELSE
                  IF QtyFound THEN
                    QuoteLine.VALIDATE(Quantity,LastQty);
              END;
            UNTIL QuoteLine.NEXT = 0;
        UNTIL QuoteHeader.NEXT = 0;
    END;

    PROCEDURE MapSLNFields@1240021007(SegmentGroup@1240020001 : Integer;CurrentLastQty@1240020003 : Decimal);
    VAR
      EDIRecDocFields@1240020000 : Record 14002359;
      SLNQuantity@1240020002 : Decimal;
    BEGIN
      SLNQuantity := 0;

      EDIRecDocFields.RESET;
      EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","Segment Group");
      EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocFields.SETRANGE("Segment Group",SegmentGroup);
      EDIRecDocFields.SETRANGE(Segment,SLNSegmentID);
      IF EDIRecDocFields.FIND('-') THEN
        REPEAT
          IF EDIRecDocFields."NAV Table No." = 37 THEN BEGIN
            IF (EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine."No.")) AND
               (EDIRecDocFields."Line Type" = EDIRecDocFields."Line Type"::" ")
            THEN BEGIN
                LastItemNo := EDILocalization.LoadTextFields(LastItemNo,EDIRecDocFields);
                LastCrossRefNo := '';
                LastItemCrossRefNo := '';
                ResourceNo := '';
                GLAccountNo := '';
                LastVariantCode := '';
            END;
            IF (EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine."No.")) AND
               (EDIRecDocFields."Line Type" <> EDIRecDocFields."Line Type"::" ")
            THEN BEGIN
              CASE EDIRecDocFields."Line Type" OF
                EDIRecDocFields."Line Type"::"G/L Account":
                  BEGIN
                    GLAccountNo := EDIRecDocFields."NAV Cross Ref. Value-1";
                    IF GLAccountNo = '' THEN
                      GLAccountNo := EDIRecDocFields."Field Text Value";
                  END;
                EDIRecDocFields."Line Type"::Resource:
                  BEGIN
                    ResourceNo := EDIRecDocFields."NAV Cross Ref. Value-1";
                    IF ResourceNo = '' THEN
                      ResourceNo := EDIRecDocFields."Field Text Value";
                  END;
              END;
              LastCrossRefNo := '';
              LastItemNo := '';
              LastItemCrossRefNo := '';
              LastVariantCode := '';
            END;

            IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine."EDI Item Cross Ref.") THEN BEGIN
              LastCrossRefNo := EDILocalization.LoadTextFields(LastCrossRefNo,EDIRecDocFields);
              LastItemNo := '';
              LastItemCrossRefNo := '';
              GLAccountNo := '';
              ResourceNo := '';
            END;
            IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine."EDI Unit Price") THEN BEGIN
              IF EDIRecDocFields.Multiplier THEN
                LastEDIUnitPrice := LastEDIUnitPrice * EDIRecDocFields."Field Dec. Value"
              ELSE
                LastEDIUnitPrice := EDIRecDocFields."Field Dec. Value";
            END;
            IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine."Cross-Reference No.") THEN BEGIN
              LastItemCrossRefNo := EDILocalization.LoadTextFields(LastItemCrossRefNo,EDIRecDocFields);
              LastCrossRefNo := '';
              LastItemNo := '';
              GLAccountNo := '';
              ResourceNo := '';
              LastVariantCode := '';
            END;
            IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine."EDI Unit of Measure") THEN BEGIN
              LastEDIUOM := EDILocalization.LoadTextFields(LastEDIUOM,EDIRecDocFields);
              LastUOM := '';
            END;
            IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine."Unit of Measure") THEN
              LastUOM := EDIRecDocFields."Field Text Value";
            IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine."Unit Price") THEN BEGIN
              IF EDIRecDocFields.Multiplier THEN
                LastUnitPrice := LastUnitPrice * EDIRecDocFields."Field Dec. Value"
              ELSE
                LastUnitPrice := EDIRecDocFields."Field Dec. Value";
            END;
            IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine.Quantity) THEN BEGIN
              IF (ForecastRelease) OR (BlankSDQShipTo = FALSE) THEN
                IF (EDIRecDocFields."Field Integer Value" = 0) AND
                   (EDIRecDocFields."Field Dec. Value" = 0)
                THEN
                  SLNQuantity := 0;
              IF EDIRecDocFields."Field Integer Value" <> 0 THEN BEGIN
                SLNQuantity := EDIRecDocFields."Field Integer Value";
                IF EDIRecDocFields."Reverse Sign" THEN
                  SLNQuantity := SLNQuantity * -1;
              END;
              IF EDIRecDocFields."Field Dec. Value" <> 0 THEN BEGIN
                SLNQuantity := EDIRecDocFields."Field Dec. Value";
                IF EDIRecDocFields."Reverse Sign" THEN
                  SLNQuantity := SLNQuantity * -1;
              END;
              IF EDIRecDocFields.Multiplier THEN BEGIN
                MultiplierFound := TRUE;
                Multiplier := SLNQuantity;
              END;
            END;
            IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO("EDI Code") THEN
              LastEDICode := EDIRecDocFields."Field Text Value";
            IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO("Shipment Date") THEN
              LastShipmentDate := EDIRecDocFields."Field Date Value";
            IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO("Requested Delivery Date") THEN
              LastReqDeliveryDate := EDIRecDocFields."Field Date Value";
            IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine."EDI ID") THEN
              LastEDIID := EDIRecDocFields."Field Text Value";
            IF EDIRecDocFields."Nav Field No." = SalesLine.FIELDNO(SalesLine."EDI Variant Code") THEN
              LastVariantCode := EDIRecDocFields."Field Text Value";
          END;
          IF (EDIRecDocFields.Trigger = TRUE) AND
             ((EDIRecDocFields."NAV Table No." <> DATABASE::"Sales Comment Line") AND
              (EDIRecDocFields."NAV Table No." <> 10044))
          THEN BEGIN
            LastQty := CurrentLastQty;
            CreLine;
            SLNQuantity := 0;
          END;
        UNTIL EDIRecDocFields.NEXT = 0;
    END;

    PROCEDURE CheckForValidationType@1240020007();
    BEGIN
      IF (ForecastRelease = FALSE) AND (EDIDocument."Enable Bulk Draw Down" = FALSE) THEN BEGIN
        EDIRecDocFields4.RESET;
        EDIRecDocFields4.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
        EDIRecDocFields4.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
        EDIRecDocFields4.SETRANGE("NAV Table No.",DATABASE::"Sales Header");
        EDIRecDocFields4.SETRANGE("Nav Field No.",SalesHeader.FIELDNO("External Document No."));
        EDIRecDocFields4.SETRANGE("Validation Type",EDIRecDocFields."Validation Type"::"Purchase Order No.");
        IF EDIRecDocFields4.FIND('-') THEN
          DuplicatePOCheck(EDIRecDocFields4);
      END;

      EDIRecDocFields4.RESET;
      EDIRecDocFields4.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocFields4.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocFields4.SETRANGE("NAV Table No.",DATABASE::"Sales Header");
      EDIRecDocFields4.SETRANGE("Nav Field No.",SalesHeader.FIELDNO("Payment Terms Code"));
      EDIRecDocFields4.SETRANGE("Validation Type",EDIRecDocFields."Validation Type"::"Payment Terms");
      IF EDIRecDocFields4.FIND('-') THEN
        IF EDIRecDocFields4."General EDI Cross Reference" THEN
          PaymentTermsCheck(EDIRecDocFields4,EDIRecDocFields4."NAV Cross Ref. Value-1")
        ELSE
          PaymentTermsCheck(EDIRecDocFields4,EDIRecDocFields4."Field Text Value");
    END;

    PROCEDURE PaymentTermsCheck@1240020011(EDIRecDocFields@1240020004 : Record 14002359;PaymentTermsCode@1240020005 : Code[80]);
    VAR
      ConfirmMsg@1240020003 : Text[250];
    BEGIN
      IF SalesHeader."Payment Terms Code" = '' THEN
        EXIT;
      IF SalesHeader."Payment Terms Code" = PaymentTermsCode THEN
        EXIT;
      IF EDIRecDocHdr2."Manual Process" THEN BEGIN
        ConfirmMsg := Text050;
        ConfirmMsg := STRSUBSTNO(
          ConfirmMsg,
          SalesHeader."Sell-to Customer No.",SalesHeader."Payment Terms Code",PaymentTermsCode);
        IF GUIALLOWED THEN BEGIN
          IF NOT CONFIRM(
            ConfirmMsg +
            Text047)
          THEN
            ERROR(Text005);
        END ELSE
          ERROR(Text005);
      END ELSE
        ERROR(
          Text050,
          SalesHeader."Sell-to Customer No.",SalesHeader."Payment Terms Code",PaymentTermsCode);
    END;

    PROCEDURE ReleaseDocument@1240020012();
    VAR
      ReleaseSalesDocument@1240020000 : Codeunit 414;
    BEGIN
      CLEAR(ReleaseSalesDocument);
      ReleaseSalesDocument.SetRunFromEDI(TRUE);
      ReleaseSalesDocument.RUN(SalesHeader);
      ReleaseSalesDocument.SetRunFromEDI(FALSE);
    END;

    PROCEDURE ClearStatusFields@1240020008();
    BEGIN
      EDIRecDocHdr2."Sales Order Created" := FALSE;
      EDIRecDocHdr2."Sales Order Created Date" := 0D;
      EDIRecDocHdr2."Sales Order Created Time" := 0T;

      EDIRecDocHdr2."Sales Invoice Created" := FALSE;
      EDIRecDocHdr2."Sales Invoice Created Date" := 0D;
      EDIRecDocHdr2."Sales Invoice Created Time" := 0T;

      EDIRecDocHdr2."Sales Cr. Memo Created" := FALSE;
      EDIRecDocHdr2."Sales Cr. Memo Created Date" := 0D;
      EDIRecDocHdr2."Sales Cr. Memo Created Time" := 0T;

      EDIRecDocHdr2."Sales Return Order Created" := FALSE;
      EDIRecDocHdr2."Sls. Return Order Created Date" := 0D;
      EDIRecDocHdr2."Sls. Return Order Created Time" := 0T;

      EDIRecDocHdr2."Sales Quote Created" := FALSE;
      EDIRecDocHdr2."Sales Quote Created Date" := 0D;
      EDIRecDocHdr2."Sales Quote Created Time" := 0T;

      EDIRecDocHdr2."Warehouse Ship Order Created" := FALSE;
      EDIRecDocHdr2."Whse. Ship Order Created Date" := 0D;
      EDIRecDocHdr2."Whse. Ship Order Created Time" := 0T;
      EDIRecDocHdr2.MODIFY;
    END;

    LOCAL PROCEDURE GetDocumentType@1240020000();
    BEGIN
      EDIRecDocFields.RESET;
      EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","NAV Table No.","Nav Field No.");
      EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
      EDIRecDocFields.SETRANGE("NAV Table No.",DATABASE::"E.D.I. Receive Document Hdr.");
      EDIRecDocFields.SETRANGE("Nav Field No.",EDIRecDocHdr2.FIELDNO("Document Type"));
      IF EDIRecDocFields.FIND('-') THEN BEGIN
        CASE EDIRecDocFields."Data Type" OF
          EDIRecDocFields."Data Type"::Integer:
             CASE EDIRecDocFields."Field Integer Value" OF
              1:
                EDIRecDocHdr2."Document Type" := EDIRecDocHdr2."Document Type"::Order;
              2:
                EDIRecDocHdr2."Document Type" := EDIRecDocHdr2."Document Type"::Invoice;
              3:
                EDIRecDocHdr2."Document Type" := EDIRecDocHdr2."Document Type"::"Cr. Memo";
              4:
                EDIRecDocHdr2."Document Type" := EDIRecDocHdr2."Document Type"::"Return Order";
              5:
                EDIRecDocHdr2."Document Type" := EDIRecDocHdr2."Document Type"::"P.O. Change";
              6:
                EDIRecDocHdr2."Document Type" := EDIRecDocHdr2."Document Type"::Quote;
              7:
                EDIRecDocHdr2."Document Type" := EDIRecDocHdr2."Document Type"::"Warehouse Ship Order";
            END;
          EDIRecDocFields."Data Type"::Text:
            CASE UPPERCASE(EDIRecDocFields."Field Text Value") OF
              'ORDER':
                EDIRecDocHdr2."Document Type" := EDIRecDocHdr2."Document Type"::Order;
              'INVOICE':
                EDIRecDocHdr2."Document Type" := EDIRecDocHdr2."Document Type"::Invoice;
              'CR. MEMO':
                EDIRecDocHdr2."Document Type" := EDIRecDocHdr2."Document Type"::"Cr. Memo";
              'RETURN ORDER':
                EDIRecDocHdr2."Document Type" := EDIRecDocHdr2."Document Type"::"Return Order";
              'P.O. CHANGE':
                EDIRecDocHdr2."Document Type" := EDIRecDocHdr2."Document Type"::"P.O. Change";
              'QUOTE':
                EDIRecDocHdr2."Document Type" := EDIRecDocHdr2."Document Type"::Quote;
              'WAREHOUSE SHIP ORDER':
                EDIRecDocHdr2."Document Type" := EDIRecDocHdr2."Document Type"::"Warehouse Ship Order";
            END;
        END;
        EDIRecDocHdr2.MODIFY;
      END;
      DocumentType := EDIRecDocHdr2."Document Type";
      IF DocumentType = DocumentType::" " THEN
        DocumentType := EDIDocument."Document Type";
      IF DocumentType = DocumentType::Order THEN
        OrderDoc := TRUE
      ELSE
        OrderDoc := FALSE;
    END;

    PROCEDURE InsertFreightLine@1000000002(pFreightAmt@1000000000 : Decimal;VAR pSalesHeader@1000000001 : Record 36);
    VAR
      LocalSalesLine@1000000002 : Record 37;
      LastLineNum@1000000003 : Integer;
      LocalSalesLine2@1000000004 : Record 37;
      "LocalSales&RecSetup"@1000000005 : Record 311;
    BEGIN
      IF pFreightAmt = 0 THEN BEGIN
        IF GUIALLOWED THEN
          MESSAGE('Freight Amount is zero !');
        EXIT;
      END;

      WITH pSalesHeader DO BEGIN
        LocalSalesLine.RESET;
        LocalSalesLine.SETRANGE(LocalSalesLine."Document Type",pSalesHeader."Document Type");
        LocalSalesLine.SETRANGE(LocalSalesLine."Document No.",pSalesHeader."No.");
        IF LocalSalesLine.FIND('+') THEN
          LastLineNum := LocalSalesLine."Line No."
        ELSE
          EXIT;

        "LocalSales&RecSetup".GET;
        LocalSalesLine2.INIT;
        LocalSalesLine2.COPY(LocalSalesLine);
        LocalSalesLine2.VALIDATE("Document Type",pSalesHeader."Document Type");
        LocalSalesLine2.VALIDATE("Document No.",pSalesHeader."No.");
        LocalSalesLine2."Line No." := LastLineNum + 10000;
        LocalSalesLine2.VALIDATE(Type, LocalSalesLine.Type::"G/L Account");
        //LocalSalesLine2.VALIDATE("No.","LocalSales&RecSetup"."G/L Freight Account No.");
        LocalSalesLine2.VALIDATE(Quantity, 1);
        LocalSalesLine2.VALIDATE("Qty. to Ship",LocalSalesLine2.Quantity);
        LocalSalesLine2.VALIDATE("Actual Unit Price",pFreightAmt);
        LocalSalesLine2.INSERT(TRUE);
      END;
    END;

    PROCEDURE Trim@1000000003(String@1000000000 : Text[250]) : Text[250];
    BEGIN
      // >> LS003
      EXIT(DELCHR(String,'<>',' '));
      // << LS003
    END;

    PROCEDURE PopulateCustEDITPInfo@1000000000(VAR pSalesHeader@1000000002 : Record 36);
    VAR
      localEDICustCrossRefRec@1000000001 : Record 14002362;
      localCustRec@1000000000 : Record 18;
    BEGIN
      IF CustNONEDI THEN
        EXIT;

      localCustRec.GET(pSalesHeader."Sell-to Customer No.");

      pSalesHeader.GET(pSalesHeader."Document Type", pSalesHeader."No.");

      IF localCustRec."EDI Trade Partner" <> '' THEN BEGIN
        CustEDITradingPartnerNo := localCustRec."EDI Trade Partner";
        pSalesHeader."EDI Trade Partner" := CustEDITradingPartnerNo;
      END ELSE
        EXIT;

      WITH localEDICustCrossRefRec DO BEGIN
        RESET;
        SETRANGE("Trade Partner No.",CustEDITradingPartnerNo);
        SETRANGE("Navision Sell To Code",SalesHeader."Sell-to Customer No.");
        SETRANGE("Navision Ship To Code",SalesHeader."Ship-to Code");
        IF NOT FINDFIRST THEN BEGIN
          SETRANGE("Navision Ship To Code");
          FINDFIRST;
        END;
        pSalesHeader."EDI Sell-to Code" := "EDI Sell To Code";
        pSalesHeader."EDI Ship-to Code" := "EDI Ship To Code";

        IF pSalesHeader."EDI Sell-to Code" = '' THEN BEGIN
          pSalesHeader."External Sell-to No." := '';
          pSalesHeader."EDI Ship-to Code" := '';
          pSalesHeader."EDI Ship-for Code" := '';
        END;

        pSalesHeader."EDI Order" := TRUE;
        pSalesHeader."EDI Invoice" := TRUE;
        pSalesHeader.MODIFY;
      END;
    END;

    PROCEDURE InsertFreightLine1@1000000001(pFreightAmt@1000000000 : Decimal;VAR pSalesHeader@1000000001 : Record 36);
    VAR
      LocalSalesLine@1000000002 : Record 37;
      LastLineNum@1000000003 : Integer;
      LocalSalesLine2@1000000004 : Record 37;
      "LocalSales&RecSetup"@1000000005 : Record 311;
    BEGIN
      //<TPZ2314>
      IF pFreightAmt = 0 THEN BEGIN
        IF GUIALLOWED THEN
          MESSAGE('Freight Amount is zero !');
        EXIT;
      END;

      WITH pSalesHeader DO BEGIN
        LocalSalesLine.RESET;
        LocalSalesLine.SETRANGE(LocalSalesLine."Document Type",pSalesHeader."Document Type");
        LocalSalesLine.SETRANGE(LocalSalesLine."Document No.",pSalesHeader."No.");
        IF LocalSalesLine.FIND('+') THEN
          LastLineNum := LocalSalesLine."Line No."
        ELSE
          EXIT;

        "LocalSales&RecSetup".GET;
        LocalSalesLine2.INIT;
        LocalSalesLine2.COPY(LocalSalesLine);
        LocalSalesLine2.VALIDATE("Document Type",pSalesHeader."Document Type");
        LocalSalesLine2.VALIDATE("Document No.",pSalesHeader."No.");
        LocalSalesLine2."Line No." := LastLineNum + 10000;
        LocalSalesLine2.VALIDATE(Type, LocalSalesLine.Type::"G/L Account");
        LocalSalesLine2.VALIDATE("No.","LocalSales&RecSetup"."Fright GL Code");
        LocalSalesLine2.VALIDATE(Quantity, 1);
        LocalSalesLine2.VALIDATE("Qty. to Ship",LocalSalesLine2.Quantity);
        LocalSalesLine2.VALIDATE("Actual Unit Price",pFreightAmt);
        LocalSalesLine2.INSERT(TRUE);
      END;
      //</TPZ2314>
    END;

    BEGIN
    {
      20161101 TPZEDI- Warehouse Billing SDESAI
        - Warehouse Billing related functionality added
      20170709 TPZ1941 - Base Unit Price Type enhancement
      20170714 TPZ1940 - EDI Division Code determination based on GS ID
      20170719 TPZ1947 - EDI Cust. Cross Ref. changes
      20170828 TPZ1994 - EDI Pricing - validate Actual Unit Price for EDI compliant customers.
      20171027 TPZ2059 - RSM Code validation change.
      LS001 JH 112917 - add logic to read customer rec so Division logic works
      LS002 JH 120117 - add sales line description and Customer PO Line No. fields
      LS003 JH 12/1/17 - add logic for changing price based on UOM for fixed file TPs, Tracking Number on sales header. Added TP HE on 2/5/18.
      LS004 JH 1/10/18 - add logic to default location based on trade partner for fixed file TPs
      LS005 JH 3/6/18 - fix logic from previous mod so EDI Ship-to and EDI Ship-for are set correctly.
      2018-05-07 TPZ2306 DKUMAR
        Mfr. Rep Code Validate
      2018-05-08 TPZ2314 DKUMAR
        Ckdorman Fright Line
      2018-05-11 TPZ2294 DKUMAR
        Call Comment Line
      2018-07-09 TPZ2344 UCHOUHAN
        Added code to update unit price according to Division code.
      2019-05-01 UCHOUHAN TPZ2561
        Added new Code for Updated Division and added condition for Division 'P' in Unit Price Updation.
      2019-11-07 UCHOUHAN TPZ2682
        Added code for Wayfair.
      2020-11-06 UCHOUHAN TPZ2977
        Added code for Casey Trade Partner.
      001 TPZ3131 UTK 03242021 Added code for Casey_Illinois.
      002 TPZ3190 GKG 05212021 Added code to flow package tracking no.
      003 TPZ3212 GKG 06082021 code added to flow mornach order per each price
      004 TPZ3298 GKG 07302021 code added to flow Anixter order per each price
    }
    END.
  }
}

