OBJECT Codeunit 14000761 UPS Transaction
{
  OBJECT-PROPERTIES
  {
    Date=06/28/17;
    Time=12:00:00 PM;
    Version List=SE0.55.13;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ShippingAgent@1000000000 : Record 291;
      PackingStation@1000000001 : Record 14000709;
      CarrierPackingStation@1240030002 : Record 14000729;
      ShippingSetup@1000000002 : Record 14000707;
      ShippingAgentAccount@1000000003 : Record 14000770;
      ShippingAgentService@1000000004 : Record 14000708;
      Shipping@1000000005 : Codeunit 14000701;
      NameAndAddressMgt@1240031001 : Codeunit 14000709;
      ShippingSetupRetrieved@1000000006 : Boolean;
      ZebraHPM@1240030000 : Text[30];
      Text001@1001 : TextConst 'ENU=You cannot close this package because there are open packages for this international shipment.';
      Text002@1002 : TextConst 'ENU=Shipping Rates are not set for agent: %1 service: %2 zone: %3 max weight: %4';
      Text003@1003 : TextConst 'ENU=Please choose the ship notification type.';
      Text004@1004 : TextConst 'ENU=The current version of the manifest only supports the call tag type standard.';
      Text005@1005 : TextConst 'ENU=The current version of the manifest does not support alternate call tag return.';
      Text007@1007 : TextConst 'ENU=The current version of the manifest does not support adult signature confirmation.';
      Text008@1008 : TextConst 'ENU=The current version of the manifest does not support multi-piece structure for';
      Text009@1009 : TextConst 'ENU=hundred weight shipments.';
      Text010@1010 : TextConst 'ENU=Your Manifest version: %1 no longer supports Call Tag Type Standard.';
      Text011@1011 : TextConst 'ENU=COD Control No. must be filled in for this package.';
      Text012@1012 : TextConst 'ENU=Packaging Type: %1 is not supported in version %2 of UPS HMU.';
      Text013@1013 : TextConst 'ENU=Dimensions are missing in the %1.';
      Text014@1014 : TextConst 'ENU=The %1 must be a 7 digit number. Change the %2.';
      Text015@1015 : TextConst 'ENU=Package exceed maximum size.';
      Text016@1016 : TextConst 'ENU=You cannot open this package because it is the first package of a multi-package shipment';
      Text017@1017 : TextConst 'ENU=You must open the last package of this international shipment first.';
      Text018@1018 : TextConst 'ENU=Call Tag Request: %1 will be sent to UPS with tonight`s manifest.';
      Text019@1019 : TextConst 'ENU=UPS Label';
      Text020@1020 : TextConst 'ENU=UPS Return Label';
      Text021@1021 : TextConst 'ENU=must be seven digits.';
      Text022@1022 : TextConst 'ENU=must be two digits.';
      Text023@1023 : TextConst 'ENU=Book No. %1, Page No. %2';
      Text024@1024 : TextConst 'ENU=UPS Driver Label %1';
      Text025@1025 : TextConst 'ENU=UPS Manifest %1';
      Text026@1026 : TextConst 'ENU=%1 file(s) for manifest %2 has been created in %3. Please upload the file(s) to UPS.';
      Text027@1027 : TextConst 'ENU=UPS Book No. and Page No. must be reset manually.';
      Text028@1028 : TextConst 'ENU=%1 formatted is %2 with %3 decimals.';
      Text029@1029 : TextConst 'ENU=There are no shipping zones for agent: %1 service: %2 from state: %3 to country: %4';
      Text030@1030 : TextConst 'ENU=There are no shipping zones for agent: %1 service: %2 from code: %3 to code: %4';
      Text031@1031 : TextConst 'ENU=There are overlapping shipping codes';
      Text032@1032 : TextConst 'ENU=Hundred Weight Rate for %1 service not found.';
      Text035@1035 : TextConst 'ENU=Packages for domestic UPS shipments cannot be greater than 150 lbs.  This package weighs %1.';
      Text036@1240030001 : TextConst 'ENU=%1 %2 invalid for %3.';
      Text038@1037 : TextConst 'ENU=%1 invalid for %2 blank';
      Text039@1038 : TextConst 'ENU=%1 invalid for %2 %3';
      Text040@1039 : TextConst 'ENU=%1 not valid for %2 %3';
      Text041@1000000007 : TextConst 'ENU=Unknown %1 %2';

    PROCEDURE GetShippingCharge@8(VAR CurrentPackage@1000000000 : Record 14000701;UpdateWeightAndValues@1000000001 : Boolean);
    VAR
      UPSOptionPage@1000000002 : Record 14000761;
      UPSShippingZoneChart@1000000003 : Record 14000763;
      UPSShippingRateChart@1000000004 : Record 14000764;
      UPSShippingZone@1000000005 : Record 14000766;
      Package2@1240030000 : Record 14000701;
      TotalWeight@1240030001 : Decimal;
      ModifyUPSOptionPage@1240030002 : Boolean;
      UPSAccessorialCharge@1240030003 : Record 14000767;
    BEGIN
      WITH CurrentPackage DO BEGIN
        GetShippingAgent("Shipping Agent Code");
        IF ShippingAgent."Disable Rate Calculation" THEN
          EXIT;

        GetShippingSetup;
        GetPackingStation;
        TESTFIELD("Shipping Agent Account No.");
        GetShippingAgentAccount("Shipping Agent Account No.");
        GetShippingAgentService("Shipping Agent Code","Shipping Agent Service","World Wide Service");
        UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.",0,0);

        IF UpdateWeightAndValues THEN BEGIN
          ClearTotalValueFields;
          "Calculation Weight" := GetWeight;

          GetCalculationFields(1,'>');

          GetCalculationWeightRate(
            UPSOptionPage,ShippingAgentService,"Calculation Weight","Calculation Weight (LBS)",
            "Dimensional Weight",ModifyUPSOptionPage,"Use Dim Weight","World Wide Service",
            "UPS Canadian Service","UPS Puerto Rico Service",TRUE,
            "Calculation Length","Calculation Width","Calculation Height");
        END;

        IF UPSOptionPage."UPS Packaging Type" <> UPSOptionPage."UPS Packaging Type"::"UPS Letter" THEN
          TESTFIELD("Calculation Weight (LBS)");

        PackingStation.TESTFIELD("Ship-from ZIP Code");
        IF "Ship-to Country Code" = '' THEN
          TESTFIELD("Ship-to ZIP Code")
        ELSE
          TESTFIELD("Ship-to Country Code");

        GetShippingZoneChart(
          UPSShippingZoneChart,ShippingAgentService,FixZIPCode(PackingStation."Ship-from ZIP Code"),
          PackingStation."Ship-from State",FixZIPCode("Ship-to ZIP Code"),"Ship-to Country Code",TRUE);
        UPSShippingZone.GET(ShippingAgentService."Service Indicator",UPSShippingZoneChart.Zone);

        IF (NOT "UPS Hundred Weight") AND
           (NOT (("World Wide Service" OR "UPS Canadian Service") AND ("Package No." < "Total Packages")))
        THEN BEGIN
          TotalWeight := 0;
          IF ("World Wide Service" OR "UPS Canadian Service") AND
             ("Package No." = "Total Packages") AND
             ("Total Packages" > 1) AND
             (NOT Miscellaneous)
          THEN BEGIN
            Package2.RESET;
            Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
            Package2.SETRANGE("Source Type","Source Type");
            Package2.SETRANGE("Source Subtype","Source Subtype");
            IF "Multi Document Package" THEN
              Package2.SETFILTER("Source ID","Multi Document No.")
            ELSE
              Package2.SETRANGE("Source ID","Source ID");
            Package2.SETFILTER("No.",'<>%1',"No.");
            Package2.SETRANGE(Closed,FALSE);
            IF Package2.FIND('-') THEN
              ERROR(
                Text001);
            Package2.RESET;
            Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
            Package2.SETRANGE("Source Type","Source Type");
            Package2.SETRANGE("Source Subtype","Source Subtype");
            IF "Multi Document Package" THEN
              Package2.SETFILTER("Source ID","Multi Document No.")
            ELSE
              Package2.SETRANGE("Source ID","Source ID");
            Package2.SETFILTER("No.",'<>%1',"No.");
            Package2.FIND('-');
            REPEAT
              TotalWeight := TotalWeight + ROUND(Package2."Calculation Weight (LBS)",1,'>');
            UNTIL Package2.NEXT = 0;
            TotalWeight := TotalWeight + ROUND("Calculation Weight (LBS)",1,'>');
          END ELSE
            TotalWeight := ROUND("Calculation Weight (LBS)",1,'>');

          IF UPSOptionPage."UPS Packaging Type" = UPSOptionPage."UPS Packaging Type"::"UPS Letter" THEN
            IF NOT UPSAccessorialCharge.GET(UPSAccessorialCharge.Type::UPS,'VERSION') THEN BEGIN
              IF "Calculation Weight (LBS)" <= 1 THEN
                TotalWeight := 0;
            END ELSE
              IF "Calculation Weight (LBS)" <= 0.5 THEN
                TotalWeight := 0
              ELSE
                IF "Service Indicator" IN ['04','07','54'] THEN
                  CASE TotalWeight OF
                    1:
                      TotalWeight := 81000;  // 1 lb PAK rate
                    2:
                      TotalWeight := 82000;  // 2 lb PAK rate
                  END;

          IF ((UPSOptionPage."UPS Packaging Type" = UPSOptionPage."UPS Packaging Type"::"UPS 10kg Box") AND
              (TotalWeight <= 22))
          THEN
            TotalWeight := 10000;

          IF ((UPSOptionPage."UPS Packaging Type" = UPSOptionPage."UPS Packaging Type"::"UPS 25kg Box") AND
              (TotalWeight <= 55))
          THEN
            TotalWeight := 25000;

          UPSShippingRateChart.RESET;
          UPSShippingRateChart.SETRANGE("Service Indicator",ShippingAgentService."Service Indicator");
          UPSShippingRateChart.SETRANGE(Zone,UPSShippingZoneChart.Zone);
          UPSShippingRateChart.SETFILTER("Max. Weight",'>=%1',TotalWeight);
          IF ShippingAgentService."UPS Residential Serv. Avail." AND
             "Residential Delivery"
          THEN
            UPSShippingRateChart.SETRANGE(Residential,TRUE)
          ELSE
            UPSShippingRateChart.SETRANGE(Residential,FALSE);
          IF NOT UPSShippingRateChart.FIND('-') THEN
            ERROR(
              Text002,
              "Shipping Agent Code","Shipping Agent Service",
              UPSShippingZoneChart.Zone,TotalWeight);

          IF NOT UPSShippingRateChart."Rate per Pound" OR (TotalWeight = 0) THEN
            "Base Charge" := UPSShippingRateChart.Amount
          ELSE
            "Base Charge" := ROUND(UPSShippingRateChart.Amount * TotalWeight,0.01,'>');
          IF "Base Charge" < UPSShippingRateChart."Minimum Amount" THEN
            "Base Charge" := UPSShippingRateChart."Minimum Amount";
          "UPS Zone" := UPSShippingZoneChart.Zone;
          "Accessorial Charge" :=
            GetAccessorialCharge(
              UPSOptionPage,ShippingAgentService,UPSShippingZoneChart."To Country Code",
              FixZIPCode("Ship-to ZIP Code"),"Ship-to City",UPSShippingZoneChart.EAS,
              TotalWeight,COD,"Calculation Insured Value","Residential Delivery",
              "Insurance Charge","Base Charge");
          Surcharge := GetSurcharge(ShippingAgentAccount,ShippingAgentService,"Base Charge");
          "Shipping Cost" := "Base Charge" + "Accessorial Charge" + Surcharge;

          IF UPSOptionPage."Extended Area Surcharge" <> UPSShippingZoneChart.EAS THEN BEGIN
            UPSOptionPage."Extended Area Surcharge" := UPSShippingZoneChart.EAS;
            UPSOptionPage.MODIFY;
          END;

          IF NOT Closed THEN BEGIN
            Markup :=
              Shipping.GetMarkup(
                ShippingAgentService,"Shipping Cost","Ship-to Type","Ship-to No.","Ship-to Code");
            IF "Override Shipping Charge" <> 0 THEN
              "Shipping Charge" := "Override Shipping Charge"
            ELSE
              "Shipping Charge" := "Shipping Cost" + Markup + "Additional Shipping Charge";
          END;
          TestAndTransferToThridParty(CurrentPackage,UPSOptionPage,ShippingAgentService);
        END ELSE BEGIN
          "Shipping Cost" := 0;
          IF NOT Closed THEN BEGIN
            Markup := 0;
            "Shipping Charge" := 0;
          END;
          "Base Charge" := 0;
          "UPS Zone" := UPSShippingZoneChart.Zone;
          TestAndTransferToThridParty(CurrentPackage,UPSOptionPage,ShippingAgentService);
        END;
      END;
    END;

    LOCAL PROCEDURE GetRateShopShippingCharge@15(RateShopHeader@1000000000 : Record 14000741;CurrentShippingAgentService@1000000001 : Record 14000708;CurrentUPSOptionPage@1000000002 : Record 14000761;CurrentUPSShippingZoneChart@1000000003 : Record 14000763;ZoneCode@1000000004 : Code[10];HundredWeight@1000000005 : Boolean;VAR UPSShippingRateChart@1000000006 : Decimal;VAR AccessorialChargeAmount@1000000007 : Decimal;VAR BaseAmount@1000000008 : Decimal;VAR SurchargeAmount@1000000009 : Decimal;VAR MarkupAmount@1000000010 : Decimal) : Boolean;
    VAR
      ShippingRate@1000000011 : Record 14000764;
      UPSHundredWeightService@1000000012 : Record 14000765;
      UPSShippingZone@1000000013 : Record 14000766;
      InsuranceCharge@1000000014 : Decimal;
      SaturdayDeliveryCharge@1240030001 : Decimal;
      SaturdayPickupCharge@1240030002 : Decimal;
      CWTResidentialSurcharge@1240030003 : Decimal;
      CWTDASurcharge@1240030004 : Decimal;
      DASurcharge@1240030005 : Decimal;
      LargePackageFee@1240030006 : Decimal;
      LargePackageSurcharge@1240030007 : Decimal;
      UPSAccessorialCharge@1240030000 : Record 14000767;
    BEGIN
      WITH RateShopHeader DO BEGIN
        GetShippingSetup;
        CLEAR(PackingStation);
        IF "Rate Shop Packing Station Code" <> '' THEN
          PackingStation.GET("Rate Shop Packing Station Code")
        ELSE
          GetPackingStation;
        CarrierPackingStation.GetPackingStation(PackingStation);
        CarrierPackingStation.TESTFIELD("UPS Shipping Agent Account No.");
        GetShippingAgentAccount(CarrierPackingStation."UPS Shipping Agent Account No.");

        IF (CurrentUPSOptionPage."UPS Packaging Type" =
            CurrentUPSOptionPage."UPS Packaging Type"::"UPS Letter")
        THEN
          IF NOT UPSAccessorialCharge.GET(UPSAccessorialCharge.Type::UPS,'VERSION') THEN BEGIN
            IF "Calculation Weight (LBS)" <= 1 THEN
              "Calculation Weight (LBS)" := 0;
          END ELSE
            IF "Calculation Weight (LBS)" <= 0.5 THEN
              "Calculation Weight (LBS)" := 0
            ELSE
              IF CurrentShippingAgentService."Service Indicator" IN ['04','07','54'] THEN
                CASE "Calculation Weight (LBS)" OF
                  1:
                    "Calculation Weight (LBS)" := 81000;  // 1 lb PAK rate
                  2:
                    "Calculation Weight (LBS)" := 82000;  // 2 lb PAK rate
                END;

          IF ((CurrentUPSOptionPage."UPS Packaging Type" =
               CurrentUPSOptionPage."UPS Packaging Type"::"UPS 10kg Box") AND
              ("Calculation Weight (LBS)" <= 22))
          THEN
            "Calculation Weight (LBS)" := 10000;

          IF ((CurrentUPSOptionPage."UPS Packaging Type" =
               CurrentUPSOptionPage."UPS Packaging Type"::"UPS 25kg Box") AND
              ("Calculation Weight (LBS)" <= 55))
          THEN
            "Calculation Weight (LBS)" := 25000;

        IF NOT HundredWeight THEN BEGIN
          ShippingRate.RESET;
          ShippingRate.SETRANGE("Service Indicator",CurrentShippingAgentService."Service Indicator");
          ShippingRate.SETRANGE(Zone,ZoneCode);
          ShippingRate.SETFILTER("Max. Weight",'>=%1',"Calculation Weight (LBS)");
          IF CurrentShippingAgentService."UPS Residential Serv. Avail." AND "Residential Delivery" THEN
            ShippingRate.SETRANGE(Residential,TRUE)
          ELSE
            ShippingRate.SETRANGE(Residential,FALSE);
          IF NOT ShippingRate.FIND('-') THEN
            EXIT(FALSE);
          IF NOT ShippingRate."Rate per Pound" OR ("Calculation Weight (LBS)" = 0) THEN
            BaseAmount := ShippingRate.Amount
          ELSE
            BaseAmount := ROUND(ShippingRate.Amount * "Calculation Weight (LBS)",0.01,'>');
          IF BaseAmount < ShippingRate."Minimum Amount" THEN
            BaseAmount := ShippingRate."Minimum Amount";
        END ELSE BEGIN
          IF NOT UPSShippingZone.GET(CurrentShippingAgentService."Service Indicator",ZoneCode) THEN
            EXIT(FALSE);

          IF (CurrentUPSOptionPage."Call Tag Type" = CurrentUPSOptionPage."Call Tag Type"::None) AND
             CurrentShippingAgentService."UPS Hundred Weight Available" AND
             ShippingAgentAccount."Hundred Weight Rate Shopping" AND
             (UPSShippingZone."Minimum Hundred Weight" > 0) AND
             ("Calculation Weight (LBS)" >= UPSShippingZone."Minimum Hundred Weight")
          THEN BEGIN
            IF NOT GetHundredWeight(
                UPSHundredWeightService,CurrentShippingAgentService,ShippingAgentAccount,
                ZoneCode,"Calculation Weight (LBS)","Residential Delivery","No. of Packages",FALSE)
            THEN
              EXIT(FALSE);

            "Calculation Weight (LBS)" := "Calculation Weight (LBS)" / "No. of Packages";

            IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::KGS THEN
              "Calculation Weight" :=
                ROUND(
                  ShippingSetup.PoundToKilo("Calculation Weight (LBS)" / "No. of Packages"),0.1,'>')
            ELSE
              "Calculation Weight" := "Calculation Weight (LBS)";

            GetHWAccessorials(
              CurrentUPSOptionPage."Saturday Delivery",CurrentUPSOptionPage."Saturday Pickup",
              "Residential Delivery","No. of Packages","Ship-to ZIP Code",
              CurrentShippingAgentService."Service Indicator",SaturdayDeliveryCharge,
              SaturdayPickupCharge,CWTResidentialSurcharge,CWTDASurcharge,DASurcharge,LargePackageFee);

            LargePackageSurcharge := 0;
            IF CurrentUPSOptionPage."Large Package" THEN
              LargePackageSurcharge := LargePackageFee;
          END ELSE
            EXIT(FALSE);
        END;
        AccessorialChargeAmount :=
          GetAccessorialCharge(
            CurrentUPSOptionPage,CurrentShippingAgentService,
            CurrentUPSShippingZoneChart."To Country Code",FixZIPCode("Ship-to ZIP Code"),
            "Ship-to City",CurrentUPSShippingZoneChart.EAS,"Calculation Weight (LBS)",COD,
            "Calculation Insured Value","Residential Delivery",InsuranceCharge,BaseAmount);

        IF HundredWeight THEN BEGIN
          BaseAmount :=
            ("Calculation Weight (LBS)" * UPSHundredWeightService."Rate per Pound") +
            LargePackageSurcharge + CWTDASurcharge;
          AccessorialChargeAmount :=
            AccessorialChargeAmount + CWTResidentialSurcharge + SaturdayPickupCharge -
            SaturdayDeliveryCharge;
        END;

        SurchargeAmount := GetSurcharge(ShippingAgentAccount,CurrentShippingAgentService,BaseAmount);

        MarkupAmount :=
          Shipping.GetMarkup(
            CurrentShippingAgentService,BaseAmount + AccessorialChargeAmount + SurchargeAmount,
            0,"Sell-to Customer No.","Ship-to Code");
        UPSShippingRateChart := BaseAmount + AccessorialChargeAmount + SurchargeAmount;

        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CheckPackage@12(VAR CurrentPackage@1000000000 : Record 14000701);
    VAR
      UPSOptionPage@1000000001 : Record 14000761;
      PackageLine@1000000002 : Record 14000702;
    BEGIN
      WITH CurrentPackage DO BEGIN
        IF "Manual Shipment" THEN
          EXIT;
        GetShippingSetup;
        GetPackingStation;
        GetShippingAgent("Shipping Agent Code");
        GetShippingAgentService("Shipping Agent Code","Shipping Agent Service","World Wide Service");
        GetShippingAgentAccount("Shipping Agent Account No.");

        UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.",0,0);

        IF ("Service Indicator" = '11') AND
           "World Wide Service"
        THEN
          ERROR(
            Text036,"Shipping Agent Service",FIELDCAPTION("World Wide Service"),
            ShippingSetup."UPS Version");

        IF "World Wide Service" THEN
          TESTFIELD(CurrentPackage.Description);

        IF UPSOptionPage."Ship Notification" THEN BEGIN
          CASE UPSOptionPage."Ship Notification Type" OF
            UPSOptionPage."Ship Notification Type"::None:
              ERROR(Text003);
            UPSOptionPage."Ship Notification Type"::Email:
              UPSOptionPage.TESTFIELD("Ship Notification Email");
            UPSOptionPage."Ship Notification Type"::Fax:
              BEGIN
                IF (UPSOptionPage."Ship Notification Fax No." = '') AND
                   ("Ship-to Fax No." = '')
                THEN
                  UPSOptionPage.TESTFIELD("Ship Notification Fax No.");
                IF (UPSOptionPage."Ship Notification Attn Name" = '') AND
                   ("Ship-to Contact" = '')
                THEN
                  UPSOptionPage.TESTFIELD("Ship Notification Attn Name");
                IF (UPSOptionPage."Ship Notification Phone" = '') AND
                   ("Ship-to Phone No." = '')
                THEN
                  UPSOptionPage.TESTFIELD("Ship Notification Phone");
              END;
          END;
        END;

        IF "Service Indicator" = '15' THEN BEGIN // NEXT DAY AIR EARLY A.M.
          TESTFIELD("Ship-to Contact");
          TESTFIELD("Ship-to Phone No.");
        END;

        IF UPSOptionPage."Later Delivery Time" THEN
          UPSOptionPage.TESTFIELD("Delivery Time Override");
        IF UPSOptionPage."Delivery Notification" THEN
          UPSOptionPage.TESTFIELD("Delivery Notification Email");
        IF UPSOptionPage."Exception Notification" THEN
          UPSOptionPage.TESTFIELD("Exception Notification Email");
        IF UPSOptionPage."Verbal Confirm. of Delivery" THEN BEGIN
          UPSOptionPage.TESTFIELD("Ship Notification Attn Name");
          UPSOptionPage.TESTFIELD("Ship Notification Phone");
        END;
        IF ShippingAgentAccount."Manifest Version" <=
           ShippingAgentAccount."Manifest Version"::"2.00"
        THEN BEGIN
          IF UPSOptionPage."Call Tag Type" > UPSOptionPage."Call Tag Type"::Standard THEN
            ERROR(Text004);
          IF UPSOptionPage."Alternate Call Tag Return" THEN
            ERROR(Text005);
          IF UPSOptionPage."Delivery Confirmation Type" =
             UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
          THEN
            ERROR(Text007);
          IF UPSOptionPage."Hundred Wgt. Keep Mult. Value" THEN
            ERROR(
              Text008 +
              Text009);
        END ELSE BEGIN
          IF UPSOptionPage."Call Tag Type" > UPSOptionPage."Call Tag Type"::Standard THEN
            TESTFIELD(Description)
          ELSE
            IF UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::Standard THEN
              ERROR(
                Text010,
                ShippingAgentAccount."Manifest Version");
          IF UPSOptionPage."Alternate Call Tag Return" THEN BEGIN
            IF UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::None THEN
              ERROR(
                Text036,UPSOptionPage.FIELDCAPTION("Call Tag Type"),FORMAT(UPSOptionPage."Call Tag Type"),
                UPSOptionPage.FIELDCAPTION("Alternate Call Tag Return"));
            UPSOptionPage.TESTFIELD("Return Address");
          END;
        END;

        IF ("World Wide Service" OR "UPS Canadian Service" OR "UPS Puerto Rico Service") THEN BEGIN
          IF UPSOptionPage."Shipper Pays Declared Value" AND
             (UPSOptionPage."International Billing" = UPSOptionPage."International Billing"::" ")
          THEN
            ERROR(
              Text038,UPSOptionPage.FIELDCAPTION("Shipper Pays Declared Value"),
              UPSOptionPage.FIELDCAPTION("International Billing"),
              FORMAT(UPSOptionPage."International Billing"::Prepaid));

          IF UPSOptionPage."Shipper Pays Declared Value" AND
             (UPSOptionPage."International Billing" IN
              [UPSOptionPage."International Billing"::Prepaid,
               UPSOptionPage."International Billing"::"Free On Board",
               UPSOptionPage."International Billing"::"Cost Freight",
               UPSOptionPage."International Billing"::"Delivery Duty Paid",
               UPSOptionPage."International Billing"::"Shipping Duty Tax"])
          THEN
            ERROR(
              Text039,UPSOptionPage.FIELDCAPTION("Shipper Pays Declared Value"),
              UPSOptionPage.FIELDCAPTION("International Billing"),UPSOptionPage."International Billing");
        END ELSE
          IF UPSOptionPage."Shipper Pays Declared Value" AND
             ("Shipping Payment Type" = "Shipping Payment Type"::Prepaid)
          THEN
            ERROR(
              Text039,UPSOptionPage.FIELDCAPTION("Shipper Pays Declared Value"),
              FIELDCAPTION("Shipping Payment Type"),"Shipping Payment Type");

        IF (UPSOptionPage."Call Tag Type" > UPSOptionPage."Call Tag Type"::None) AND
           UPSOptionPage."Shipper Pays Declared Value"
        THEN
          ERROR(
            Text040,UPSOptionPage.FIELDCAPTION("Shipper Pays Declared Value"),
            UPSOptionPage.FIELDCAPTION("Call Tag Type"),UPSOptionPage."Call Tag Type");

        IF ("Shipping Payment Type" <> "Shipping Payment Type"::Prepaid) OR
           (UPSOptionPage."International Billing" =
            UPSOptionPage."International Billing"::FreightCollect)
        THEN BEGIN
          IF "Shipping Payment Type" <> "Shipping Payment Type"::Consignee THEN
            TESTFIELD("Third Party Ship. Account No.");
          IF "Shipping Payment Type" = "Shipping Payment Type"::"Third Party" THEN BEGIN
            UPSOptionPage.TESTFIELD("Third Party Name");
            UPSOptionPage.TESTFIELD("Third Party Address");
            UPSOptionPage.TESTFIELD("Third Party City");
            UPSOptionPage.TESTFIELD("Third Party ZIP Code");
          END;
        END;

        IF (UPSOptionPage."International Billing" =
            UPSOptionPage."International Billing"::"Third Party")
        THEN BEGIN
            TESTFIELD("Third Party Ship. Account No.");
            UPSOptionPage.TESTFIELD("Third Party Name");
            UPSOptionPage.TESTFIELD("Third Party Address");
            UPSOptionPage.TESTFIELD("Third Party City");
            UPSOptionPage.TESTFIELD("Third Party ZIP Code");
        END;

        GetCalculationFields(1,'>');

        IF UPSOptionPage."UPS Packaging Type" <> UPSOptionPage."UPS Packaging Type"::"UPS Letter" THEN
          TESTFIELD("Calculation Weight (LBS)");

        IF COD THEN BEGIN
          TESTFIELD("COD Amount");
          IF (UPSOptionPage."COD Control No." = '') AND Miscellaneous THEN
            ERROR(Text011);
        END;

        IF (ShippingAgentAccount."Manifest Version" >=
            ShippingAgentAccount."Manifest Version"::"7.00") AND
           (UPSOptionPage."Call Tag Type" > UPSOptionPage."Call Tag Type"::Standard)
        THEN
          TESTFIELD(Description);

        IF "World Wide Service" OR "UPS Canadian Service" OR "UPS Puerto Rico Service" THEN BEGIN
          IF "Ship-to Phone No." = '' THEN
            "Ship-to Phone No." := FixPhoneNo(PackingStation."Phone No. to use If Blank",FALSE);
          TESTFIELD("Ship-to Phone No.");

          IF (UPSOptionPage."Export Declaration" = UPSOptionPage."Export Declaration"::Included) OR
             (UPSOptionPage."Export Declaration" = UPSOptionPage."Export Declaration"::"UPS Prepare")
          THEN BEGIN
            PackingStation.TESTFIELD("Export License No.");
            PackingStation.TESTFIELD("Export License Expiration Date");
            IF ShippingAgentAccount."Manifest Version" >=
               ShippingAgentAccount."Manifest Version"::"7.00"
            THEN BEGIN
              PackageLine.RESET;
              PackageLine.SETRANGE("Package No.","No.");
              IF PackageLine.FIND('-') THEN
                REPEAT
                  PackageLine.TESTFIELD("Schedule B code");
                  PackageLine.TESTFIELD("Schedule B Unit of Measure 1");
                  IF PackageLine."Schedule B Unit of Measure 1" <> 'X' THEN
                    PackageLine.TESTFIELD("Schedule B Quantity 1");
                UNTIL PackageLine.NEXT = 0;
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetPackagingType@11(CurrentPackage@1000000000 : Record 14000701) : Code[2];
    VAR
      UPSOptionPage@1000000001 : Record 14000761;
      ErrorExists@1000000002 : Boolean;
    BEGIN
      WITH CurrentPackage DO BEGIN
        UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.",0,0);
        GetShippingAgentAccount("Shipping Agent Account No.");
        ErrorExists := FALSE;
        CASE UPSOptionPage."UPS Packaging Type" OF
          UPSOptionPage."UPS Packaging Type"::Unknown:
            EXIT('00');
          UPSOptionPage."UPS Packaging Type"::"UPS Letter":
            EXIT('01');
          UPSOptionPage."UPS Packaging Type"::Package:
            EXIT('02');
          UPSOptionPage."UPS Packaging Type"::"UPS Express Tube":
            EXIT('03');
          UPSOptionPage."UPS Packaging Type"::"UPS Express Pak":
            EXIT('04');
          UPSOptionPage."UPS Packaging Type"::None:
            BEGIN
              IF ShippingAgentAccount."Manifest Version" >=
                 ShippingAgentAccount."Manifest Version"::"5.05"
              THEN
                ErrorExists := TRUE
              ELSE
                EXIT('05');
            END;
          UPSOptionPage."UPS Packaging Type"::Bag:
            BEGIN
              IF ShippingAgentAccount."Manifest Version" >=
                 ShippingAgentAccount."Manifest Version"::"5.05"
              THEN
                ErrorExists := TRUE
              ELSE
                EXIT('07');
            END;
          UPSOptionPage."UPS Packaging Type"::Barrel:
            BEGIN
              IF ShippingAgentAccount."Manifest Version" >=
                 ShippingAgentAccount."Manifest Version"::"5.05"
              THEN
                ErrorExists := TRUE
              ELSE
                EXIT('08');
            END;
          UPSOptionPage."UPS Packaging Type"::Bolt:
            BEGIN
              IF ShippingAgentAccount."Manifest Version" >=
                 ShippingAgentAccount."Manifest Version"::"5.05"
              THEN
                ErrorExists := TRUE
              ELSE
                EXIT('09');
            END;
          UPSOptionPage."UPS Packaging Type"::Bundle:
            BEGIN
              IF ShippingAgentAccount."Manifest Version" >=
                 ShippingAgentAccount."Manifest Version"::"5.05"
              THEN
                ErrorExists := TRUE
              ELSE
                EXIT('10');
            END;
          UPSOptionPage."UPS Packaging Type"::Can:
            BEGIN
              IF ShippingAgentAccount."Manifest Version" >=
                 ShippingAgentAccount."Manifest Version"::"5.05"
              THEN
                ErrorExists := TRUE
              ELSE
                EXIT('11');
            END;
          UPSOptionPage."UPS Packaging Type"::Canister:
            BEGIN
              IF ShippingAgentAccount."Manifest Version" >=
                 ShippingAgentAccount."Manifest Version"::"5.05"
              THEN
                ErrorExists := TRUE
              ELSE
                EXIT('12');
            END;
          UPSOptionPage."UPS Packaging Type"::Coffin:
            BEGIN
              IF ShippingAgentAccount."Manifest Version" >=
                 ShippingAgentAccount."Manifest Version"::"5.05"
              THEN
                ErrorExists := TRUE
              ELSE
                EXIT('13');
            END;
          UPSOptionPage."UPS Packaging Type"::Crate:
            BEGIN
              IF ShippingAgentAccount."Manifest Version" >=
                 ShippingAgentAccount."Manifest Version"::"5.05"
              THEN
                ErrorExists := TRUE
              ELSE
                EXIT('14');
            END;
          UPSOptionPage."UPS Packaging Type"::Cylinder:
            BEGIN
              IF ShippingAgentAccount."Manifest Version" >=
                 ShippingAgentAccount."Manifest Version"::"5.05"
              THEN
                ErrorExists := TRUE
              ELSE
                EXIT('15');
            END;
          UPSOptionPage."UPS Packaging Type"::Drum:
            BEGIN
              IF ShippingAgentAccount."Manifest Version" >=
                 ShippingAgentAccount."Manifest Version"::"5.05"
              THEN
                ErrorExists := TRUE
              ELSE
                EXIT('16');
            END;
          UPSOptionPage."UPS Packaging Type"::Palletized:
            BEGIN
              IF ShippingAgentAccount."Manifest Version" >=
                 ShippingAgentAccount."Manifest Version"::"5.05"
              THEN
                ErrorExists := TRUE
              ELSE
                EXIT('18');
            END;
          UPSOptionPage."UPS Packaging Type"::Spool:
            BEGIN
              IF ShippingAgentAccount."Manifest Version" >=
                 ShippingAgentAccount."Manifest Version"::"5.05"
              THEN
                ErrorExists := TRUE
              ELSE
                EXIT('19');
            END;
          UPSOptionPage."UPS Packaging Type"::Roll:
            BEGIN
              IF ShippingAgentAccount."Manifest Version" >=
                 ShippingAgentAccount."Manifest Version"::"5.05"
              THEN
                ErrorExists := TRUE
              ELSE
                EXIT('20');
            END;
          UPSOptionPage."UPS Packaging Type"::"UPS Express Box Small":
            EXIT('21');
          UPSOptionPage."UPS Packaging Type"::Envelope:
            BEGIN
              IF ShippingAgentAccount."Manifest Version" >=
                 ShippingAgentAccount."Manifest Version"::"5.05"
              THEN
                ErrorExists := TRUE
              ELSE
                EXIT('22');
            END;
          UPSOptionPage."UPS Packaging Type"::"Jumbo Box":
            BEGIN
              IF ShippingAgentAccount."Manifest Version" >=
                 ShippingAgentAccount."Manifest Version"::"5.05"
              THEN
                ErrorExists := TRUE
              ELSE
                EXIT('23');
            END;
          UPSOptionPage."UPS Packaging Type"::"UPS 25kg Box":
            BEGIN
              IF ShippingAgentAccount."Manifest Version" =
                 ShippingAgentAccount."Manifest Version"::"2.00"
              THEN
                ErrorExists := TRUE
              ELSE
                EXIT('24');
            END;
          UPSOptionPage."UPS Packaging Type"::"UPS 10kg Box":
            BEGIN
              IF ShippingAgentAccount."Manifest Version" =
                 ShippingAgentAccount."Manifest Version"::"2.00"
              THEN
                ErrorExists := TRUE
              ELSE
                EXIT('25');
            END;
          UPSOptionPage."UPS Packaging Type"::"UPS Express Box Medium":
            EXIT('21');
          UPSOptionPage."UPS Packaging Type"::"UPS Express Box Large":
            EXIT('21');
          ELSE
            EXIT('00');
        END;
        IF ErrorExists THEN
          ERROR(
            Text012,
            UPSOptionPage."UPS Packaging Type",ShippingAgentAccount."Manifest Version");
      END;
    END;

    PROCEDURE RateShop@16(RateShopHeader@1000000000 : Record 14000741;VAR RateShopLine@1000000001 : Record 14000742;CurrentShippingAgentService@1000000002 : Record 14000708);
    VAR
      UPSShippingZoneChart@1000000004 : Record 14000763;
      UPSShippingZone@1000000005 : Record 14000766;
      UPSOptionPage@1000000006 : Record 14000761;
      RateShopLineCOD@1000000008 : Record 14000742;
      InsureThroughShippingAgent@1240030000 : Boolean;
      ModifyUPSOptionPage@1240030002 : Boolean;
      WorldWideService@1240030003 : Boolean;
      UPSCanadianService@1240030004 : Boolean;
      UPSPuertoRicoService@1240030005 : Boolean;
      ShipmentWeightRounded@1240030001 : Decimal;
      ShipmentWeight@1240030006 : Decimal;
    BEGIN
      WITH RateShopHeader DO BEGIN
        GetShippingSetup;
        CLEAR(PackingStation);
        IF "Rate Shop Packing Station Code" <> '' THEN
          PackingStation.GET("Rate Shop Packing Station Code")
        ELSE
          GetPackingStation;
        CarrierPackingStation.GetPackingStation(PackingStation);
        CarrierPackingStation.TESTFIELD("UPS Shipping Agent Account No.");
        GetShippingAgentAccount(CarrierPackingStation."UPS Shipping Agent Account No.");
        GetShippingAgent(CurrentShippingAgentService."Shipping Agent Code");

        IF "No. of Packages" < 1 THEN
          "No. of Packages" := 1;

        IF NOT UPSOptionPage.GET(UPSOptionPage.Type::"Rate Shop",RateShopHeader."No.",0,0) THEN
          IF NOT UPSOptionPage.GET(UPSOptionPage.Type::Package,RateShopHeader."Package No.",0,0) THEN
            IF NOT UPSOptionPage.GET(
                     UPSOptionPage.Type::Document,RateShopHeader."Source ID",
                     RateShopHeader."Source Type",RateShopHeader."Source Subtype")
            THEN
              IF NOT UPSOptionPage.GET(
                       UPSOptionPage.Type::"Bill of Lading",RateShopHeader."Bill of Lading No.",0,0)
              THEN BEGIN
                UPSOptionPage.RESET;
                UPSOptionPage.SETCURRENTKEY(
                  Type,"Shipping Agent Code","Shipping Agent Service","World Wide Service");
                UPSOptionPage.SETRANGE(Type,UPSOptionPage.Type::Setup);
                UPSOptionPage.SETRANGE(
                  "Shipping Agent Code",CurrentShippingAgentService."Shipping Agent Code");
                UPSOptionPage.SETRANGE("Shipping Agent Service",CurrentShippingAgentService.Code);
                UPSOptionPage.SETRANGE(
                  "World Wide Service",CurrentShippingAgentService."World Wide Service");
                IF NOT UPSOptionPage.FIND('-') THEN
                  UPSOptionPage.INIT;
              END;

        ShipmentWeight := GetWeight;
        IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::KGS THEN BEGIN
          ShipmentWeightRounded := ROUND(ShippingSetup.KiloToPound(ShipmentWeight),0.1,'>');
          "Calculation Weight (LBS)" :=
            ROUND(ShippingSetup.KiloToPound(ShipmentWeight / "No. of Packages"),0.1,'>');
          "Calculation Weight" := ROUND(ShipmentWeight / "No. of Packages",0.1,'>');
        END ELSE BEGIN
          ShipmentWeightRounded := ShipmentWeight;
          "Calculation Weight" := ROUND(ShipmentWeight / "No. of Packages",0.1,'>');
          "Calculation Weight (LBS)" := "Calculation Weight";
        END;

        IF CurrentShippingAgentService."Shipping Agent Code" <> '' THEN BEGIN
          WorldWideService :=
            CurrentShippingAgentService.InternationalShipment(ShippingAgent,"Ship-to Country Code");
          UPSCanadianService :=
            CurrentShippingAgentService.UPSCanadianShipment(ShippingAgent,"Ship-to Country Code");
          UPSPuertoRicoService :=
            CurrentShippingAgentService.UPSPuertoRicoShipment(ShippingAgent,"Ship-to Country Code");
        END;

        IF NOT GetCalculationWeightRate(
                 UPSOptionPage,CurrentShippingAgentService,"Calculation Weight",
                 "Calculation Weight (LBS)","Dimensional Weight",ModifyUPSOptionPage,"Use Dim Weight",
                 WorldWideService,UPSCanadianService,UPSPuertoRicoService,FALSE,
                 GetLength,GetWidth,GetHeight)
        THEN
          EXIT;

        IF "No. of Packages" > 1 THEN
          IF (CurrentShippingAgentService."Service Indicator" = '11') AND
             ("Calculation Weight (LBS)" / "No. of Packages" < 15)
          THEN BEGIN
            "Calculation Weight (LBS)" := 15;
            IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::LBS THEN
              "Calculation Weight" := "Calculation Weight (LBS)"
            ELSE
              "Calculation Weight" := ROUND(ShippingSetup.PoundToKilo("Calculation Weight (LBS)"),0.1,'>');
          END;

        IF UPSOptionPage."UPS Packaging Type" <> UPSOptionPage."UPS Packaging Type"::"UPS Letter" THEN
          TESTFIELD("Calculation Weight (LBS)");
        "Calculation Value" := GetValue / "No. of Packages";
        TESTFIELD("Calculation Value");

        CASE "Shipping Insurance" OF
          "Shipping Insurance"::" ":
            IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
              InsureThroughShippingAgent := ShippingAgentAccount."Insure Through Carrier"
            ELSE
              InsureThroughShippingAgent := ShippingAgentAccount."Insured Third Party/Collect";
          "Shipping Insurance"::Never:
            InsureThroughShippingAgent := FALSE;
          "Shipping Insurance"::Always:
            InsureThroughShippingAgent := TRUE;
        END;
        "Calculation Insured Value" := GetInsuredValue(InsureThroughShippingAgent) / "No. of Packages";

        "Calculation Volume" := GetVolume / "No. of Packages";
        // Add Handling for Rate Shop for Dimensions
        IF ShippingAgentAccount."COD Rule" <>
           ShippingAgentAccount."COD Rule"::"All on Last Package"
        THEN
          "COD Amount" := "COD Amount" / "No. of Packages";

        PackingStation.TESTFIELD("Ship-from ZIP Code");
        IF "Ship-to Country Code" = '' THEN
          TESTFIELD("Ship-to ZIP Code")
        ELSE
          TESTFIELD("Ship-to Country Code");

        IF GetShippingZoneChart(
             UPSShippingZoneChart,CurrentShippingAgentService,
             FixZIPCode(PackingStation."Ship-from ZIP Code"),PackingStation."Ship-from State",
             FixZIPCode("Ship-to ZIP Code"),"Ship-to Country Code",FALSE)
        THEN BEGIN
          UPSShippingZone.GET(CurrentShippingAgentService."Service Indicator",UPSShippingZoneChart.Zone);
          RateShopLine.INIT;
          IF GetRateShopShippingCharge(
               RateShopHeader,CurrentShippingAgentService,UPSOptionPage,UPSShippingZoneChart,
               UPSShippingZoneChart.Zone,FALSE,RateShopLine."Shipping Cost",
               RateShopLine."Accessorial Charge",RateShopLine."Base Charge",
               RateShopLine.Surcharge,RateShopLine.Markup)
          THEN BEGIN
            RateShopLine."Rate Shop No." := "No.";
            RateShopLine."Shipping Agent Code" := CurrentShippingAgentService."Shipping Agent Code";
            RateShopLine."World Wide Service" := CurrentShippingAgentService."World Wide Service";
            RateShopLine."Shipping Agent Service" := CurrentShippingAgentService.Code;
            RateShopLine."Insure Through Shipping Agent" := InsureThroughShippingAgent;
            RateShopLine.Sorting := CurrentShippingAgentService."Rateshop Sorting";
            RateShopLine."Service Description" := CurrentShippingAgentService.Description;
            RateShopLine.Zone := UPSShippingZoneChart.Zone;
            RateShopLine."Shipping Charge" :=
              RateShopLine."Shipping Cost" + RateShopLine.Markup + "Additional Shipping Charge";
            RateShopLine."Hundred Weight Rate" := FALSE;
            TestAndTransferToThridPartyRS(
              RateShopHeader,RateShopLine,UPSOptionPage,CurrentShippingAgentService);

            IF "No. of Packages" > 1 THEN BEGIN
              IF RateShopHeader.COD AND
                 (ShippingAgentAccount."COD Rule" =
                  ShippingAgentAccount."COD Rule"::"All on Last Package")
              THEN BEGIN
                RateShopLineCOD := RateShopLine;
                RateShopHeader.COD := FALSE;

                GetRateShopShippingCharge(
                  RateShopHeader,CurrentShippingAgentService,UPSOptionPage,UPSShippingZoneChart,
                  UPSShippingZoneChart.Zone,FALSE,RateShopLine."Shipping Cost",
                  RateShopLine."Accessorial Charge",RateShopLine."Base Charge",
                  RateShopLine.Surcharge,RateShopLine.Markup);
                RateShopLine."Shipping Charge" :=
                  RateShopLine."Shipping Cost" + RateShopLine.Markup + "Additional Shipping Charge";
                TestAndTransferToThridPartyRS(
                  RateShopHeader,RateShopLine,UPSOptionPage,CurrentShippingAgentService);

                RateShopLine.MultiplyCharges("No. of Packages" - 1);
                RateShopLine.AddCharges(RateShopLineCOD);

                RateShopHeader.COD := TRUE;
              END ELSE
                RateShopLine.MultiplyCharges("No. of Packages");
            END;

            IF "Value (Price)" <> 0 THEN
              RateShopLine."Order Amount" := "Value (Price)"
            ELSE
              RateShopLine."Order Amount" := "Override Value";
            RateShopLine."Total Amount" :=
              RateShopLine."Order Amount" + RateShopLine."Shipping Charge";
            RateShopLine."Service Description" := CurrentShippingAgentService.Description;
            RateShopLine.INSERT;
          END;
          UPSShippingZone.CALCFIELDS("FF Hundred Weight Available");
          IF UPSShippingZone."FF Hundred Weight Available" AND
             ((ShipmentWeightRounded >= UPSShippingZone."Minimum Hundred Weight") OR
              "Show Below Hundred Weight")
          THEN BEGIN
            RateShopLine.INIT;
            "Calculation Weight (LBS)" := ShipmentWeightRounded;
            IF GetRateShopShippingCharge(
                 RateShopHeader,CurrentShippingAgentService,UPSOptionPage,UPSShippingZoneChart,
                 UPSShippingZoneChart.Zone,TRUE,RateShopLine."Shipping Cost",
                 RateShopLine."Accessorial Charge",RateShopLine."Base Charge",
                 RateShopLine.Surcharge,RateShopLine.Markup)
            THEN BEGIN
              RateShopLine."Rate Shop No." := "No.";
              RateShopLine."Shipping Agent Code" := CurrentShippingAgentService."Shipping Agent Code";
              RateShopLine."World Wide Service" := CurrentShippingAgentService."World Wide Service";
              RateShopLine."Shipping Agent Service" := CurrentShippingAgentService.Code;
              RateShopLine.Sorting := CurrentShippingAgentService."Rateshop Sorting";
              RateShopLine."Service Description" := CurrentShippingAgentService.Description;
              RateShopLine.Zone := UPSShippingZoneChart.Zone;
              RateShopLine."Insure Through Shipping Agent" := InsureThroughShippingAgent;
              RateShopLine."Shipping Charge" :=
                RateShopLine."Shipping Cost" + RateShopLine.Markup + "Additional Shipping Charge";
              RateShopLine."Hundred Weight Rate" := TRUE;
              TestAndTransferToThridPartyRS(
                RateShopHeader,RateShopLine,UPSOptionPage,CurrentShippingAgentService);

              IF "No. of Packages" > 1 THEN BEGIN
                IF RateShopHeader.COD AND
                   (ShippingAgentAccount."COD Rule" =
                    ShippingAgentAccount."COD Rule"::"All on Last Package")
                THEN BEGIN
                  RateShopLineCOD := RateShopLine;
                  RateShopHeader.COD := FALSE;

                  GetRateShopShippingCharge(
                    RateShopHeader,CurrentShippingAgentService,UPSOptionPage,UPSShippingZoneChart,
                    UPSShippingZoneChart.Zone,FALSE,RateShopLine."Shipping Cost",
                    RateShopLine."Accessorial Charge",RateShopLine."Base Charge",
                    RateShopLine.Surcharge,RateShopLine.Markup);
                  RateShopLine."Shipping Charge" :=
                    RateShopLine."Shipping Cost" + RateShopLine.Markup + "Additional Shipping Charge";
                  TestAndTransferToThridPartyRS(
                    RateShopHeader,RateShopLine,UPSOptionPage,CurrentShippingAgentService);

                  RateShopLine.MultiplyCharges("No. of Packages" - 1);
                  RateShopLine.AddCharges(RateShopLineCOD);

                  RateShopHeader.COD := TRUE;
                END ELSE
                  RateShopLine.MultiplyCharges("No. of Packages");
              END;

              IF "Value (Price)" <> 0 THEN
                RateShopLine."Order Amount" := "Value (Price)"
              ELSE
                RateShopLine."Order Amount" := "Override Value";
              RateShopLine."Total Amount" :=
                RateShopLine."Order Amount" + RateShopLine."Shipping Charge";
              RateShopLine."Service Description" := CurrentShippingAgentService.Description;
              RateShopLine.INSERT;
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetUPSTracking@17(VAR CurrentPackage@1000000000 : Record 14000701);
    VAR
      UPSOptionPage@1000000001 : Record 14000761;
      ShippingNumbering@1240030000 : Record 14000725;
      NoSeriesMgt@1000000002 : Codeunit 396;
      xNo@1000000003 : Integer;
      UPSAccount@1000000004 : Text[6];
      UPSNoCalc@1000000005 : Text[30];
      UPSRemainder@1000000006 : Integer;
      UPSResult@1000000007 : Integer;
      UPSCheckDigit@1000000008 : Integer;
      UPSMultiple@1000000009 : Integer;
      UPSOddNumbers@1000000010 : Integer;
      UPSEvenNumbers@1000000011 : Integer;
    BEGIN
      WITH CurrentPackage DO BEGIN
        GetShippingSetup;
        UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.",0,0);
        IF ShippingNumbering.GET(
             DATABASE::"Shipping Setup",ShippingSetup."Primary Key",
             ShippingSetup.FIELDNO("Last UPS Transaction No."))
        THEN BEGIN
          ShippingNumbering.GetNextNumber;
          "UPS Transaction ID" := ShippingNumbering."Last No. Used";
        END ELSE BEGIN
          ShippingSetup.TESTFIELD("UPS Transaction Nos.");
          "UPS Transaction ID" := NoSeriesMgt.GetNextNo(ShippingSetup."UPS Transaction Nos.",WORKDATE,TRUE);
        END;

        IF STRLEN("UPS Transaction ID") <> 7 THEN
          ERROR(
            Text014,
            FIELDNAME("UPS Transaction ID"),ShippingSetup.FIELDNAME("UPS Transaction Nos."));

        GetPackingStation;
        TESTFIELD("Shipping Agent Account No.");
        GetShippingAgentAccount("Shipping Agent Account No.");
        GetShippingAgentService("Shipping Agent Code","Shipping Agent Service","World Wide Service");

        IF (ShippingAgentService."UPS Service Override Account" <> '') AND
           ("Shipping Agent Account No." = '')
        THEN
          UPSAccount := ShippingAgentService."UPS Service Override Account"
        ELSE
          IF "Shipping Agent Account No." = '' THEN
            UPSAccount := ShippingAgentAccount."Account No."
          ELSE
            UPSAccount := "Shipping Agent Account No.";

        "External Tracking No." :=
          '1Z' + UPSAccount + GetServiceIndicator(CurrentPackage,UPSOptionPage) + "UPS Transaction ID";
        UPSNoCalc := COPYSTR("External Tracking No.",3,15);
        UPSNoCalc := CONVERTSTR(UPSNoCalc,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','23456789012345678901234567');
        UPSOddNumbers := 0;
        EVALUATE(xNo,COPYSTR(UPSNoCalc,1,1));
        UPSOddNumbers := UPSOddNumbers + xNo;
        EVALUATE(xNo,COPYSTR(UPSNoCalc,3,1));
        UPSOddNumbers := UPSOddNumbers + xNo;
        EVALUATE(xNo,COPYSTR(UPSNoCalc,5,1));
        UPSOddNumbers := UPSOddNumbers + xNo;
        EVALUATE(xNo,COPYSTR(UPSNoCalc,7,1));
        UPSOddNumbers := UPSOddNumbers + xNo;
        EVALUATE(xNo,COPYSTR(UPSNoCalc,9,1));
        UPSOddNumbers := UPSOddNumbers + xNo;
        EVALUATE(xNo,COPYSTR(UPSNoCalc,11,1));
        UPSOddNumbers := UPSOddNumbers + xNo;
        EVALUATE(xNo,COPYSTR(UPSNoCalc,13,1));
        UPSOddNumbers := UPSOddNumbers + xNo;
        EVALUATE(xNo,COPYSTR(UPSNoCalc,15,1));
        UPSOddNumbers := UPSOddNumbers + xNo;

        UPSEvenNumbers := 0;
        EVALUATE(xNo,COPYSTR(UPSNoCalc,2,1));
        UPSEvenNumbers := UPSEvenNumbers + xNo;
        EVALUATE(xNo,COPYSTR(UPSNoCalc,4,1));
        UPSEvenNumbers := UPSEvenNumbers + xNo;
        EVALUATE(xNo,COPYSTR(UPSNoCalc,6,1));
        UPSEvenNumbers := UPSEvenNumbers + xNo;
        EVALUATE(xNo,COPYSTR(UPSNoCalc,8,1));
        UPSEvenNumbers := UPSEvenNumbers + xNo;
        EVALUATE(xNo,COPYSTR(UPSNoCalc,10,1));
        UPSEvenNumbers := UPSEvenNumbers + xNo;
        EVALUATE(xNo,COPYSTR(UPSNoCalc,12,1));
        UPSEvenNumbers := UPSEvenNumbers + xNo;
        EVALUATE(xNo,COPYSTR(UPSNoCalc,14,1));
        UPSEvenNumbers := UPSEvenNumbers + xNo;
        UPSEvenNumbers := UPSEvenNumbers * 2;
        UPSResult := UPSOddNumbers + UPSEvenNumbers;
        UPSRemainder := UPSResult MOD 10;
        UPSRemainder := 10 - UPSRemainder;
        UPSMultiple := UPSResult + UPSRemainder;
        UPSCheckDigit := UPSMultiple - UPSResult;
        IF UPSCheckDigit = 10 THEN
          UPSCheckDigit := 0;
        "External Tracking No." := "External Tracking No." + FORMAT(UPSCheckDigit);
      END;
    END;

    PROCEDURE ClosePackage@18(VAR CurrentPackage@1240030000 : Record 14000701;VAR MultiDocPackageTmp@1240030001 : Record 14000701;CurrentShippingAgent@1240030002 : Record 291;PrintLabel@1240030003 : Boolean);
    VAR
      Package2@1000000002 : Record 14000701;
      UPSOptionPage@1000000003 : Record 14000761;
      MultiDocPackageMgt@1240030004 : Codeunit 14000703;
      ModifyUPSOptionPage@1240030012 : Boolean;
    BEGIN
      WITH CurrentPackage DO BEGIN
        TESTFIELD(Closed,FALSE);

        IF "Manual Shipment" THEN BEGIN
          IF CurrentShippingAgent."Enter Ext. Track. No. on Close" THEN
            Shipping.EnterExternalTrackingNo(CurrentPackage,FALSE);

          "Closed by Packing Station Code" := PackingStation.Code;
          ClearTotalValueFields;
          VALIDATE("Calculation Weight",GetWeight);
          GetCalculationFields(1,'>');
          "Packing Date" := WORKDATE;
          "Packing Time" := TIME;
          "Packed By" := USERID;
          "Shipping Cost" := 0;
          Markup := 0;
          IF "Override Shipping Charge" <> 0 THEN
            "Shipping Charge" := "Override Shipping Charge"
          ELSE
            "Shipping Charge" := "Shipping Cost" + Markup + "Additional Shipping Charge";
          Closed := TRUE;
          MODIFY;
          COMMIT;

          IF "Multi Document Package" THEN BEGIN
            GetShippingSetup;
            GetPackingStation;
            MultiDocPackageMgt.SplitMultiDocPackage(
              CurrentPackage,MultiDocPackageTmp,PackingStation,ShippingSetup);
            COMMIT;
          END;

          EXIT;
        END;

        GetShippingSetup;
        GetPackingStation;
        GetShippingAgent("Shipping Agent Code");
        TESTFIELD("Shipping Agent Account No.");
        GetShippingAgentAccount("Shipping Agent Account No.");
        GetShippingAgentService("Shipping Agent Code","Shipping Agent Service","World Wide Service");
        UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.",0,0);
        IF TestForHazMat(CurrentPackage) THEN BEGIN
          UPSOptionPage."Dangerous Goods" := TRUE;
          UPSOptionPage."Accessorial Record Required" := TRUE;
          ModifyUPSOptionPage := TRUE;
        END;

        CheckName(
          ShippingAgent,0,"Ship-to Name","Ship-to Name 2","Ship-to Contact",
          FIELDCAPTION("Ship-to Name"),FIELDCAPTION("Ship-to Name 2"),FIELDCAPTION("Ship-to Contact"));
        CheckAddress(
          ShippingAgent,0,"Ship-to Address","Ship-to Address 2","Ship-to City",
          "Ship-to ZIP Code","Ship-to State","Ship-to Country Code",
          FIELDCAPTION("Ship-to Address"),FIELDCAPTION("Ship-to Address 2"),
          FIELDCAPTION("Ship-to City"),FIELDCAPTION("Ship-to ZIP Code"),
          FIELDCAPTION("Ship-to State"),FIELDCAPTION("Ship-to Country Code"));

        IF "Blind Shipment" OR "Double Blind Shipment" THEN BEGIN
          CheckName(
            ShippingAgent,0,"Blind Ship-from Name","Blind Ship-from Name 2","Blind Ship-from Contact",
            FIELDCAPTION("Blind Ship-from Name"),FIELDCAPTION("Blind Ship-from Name 2"),
            FIELDCAPTION("Blind Ship-from Contact"));
          CheckAddress(
            ShippingAgent,0,"Blind Ship-from Address","Blind Ship-from Address 2","Blind Ship-from City",
            "Blind Ship-from ZIP Code","Blind Ship-from State","Blind Ship-from Country Code",
            FIELDCAPTION("Blind Ship-from Address"),FIELDCAPTION("Blind Ship-from Address 2"),
            FIELDCAPTION("Blind Ship-from City"),FIELDCAPTION("Blind Ship-from ZIP Code"),
            FIELDCAPTION("Blind Ship-from State"),FIELDCAPTION("Blind Ship-from Country Code"));
        END;

        IF UPSOptionPage."HW Accessorial Fee Diff." <> 0 THEN BEGIN
          UPSOptionPage."HW Accessorial Fee Diff." := 0;
          ModifyUPSOptionPage := TRUE;
        END;

        ClearTotalValueFields;
        "Calculation Weight" := GetWeight;
        "Oversize Actual Weight" := "Calculation Weight";
        GetCalculationFields(1,'>');

        GetCalculationWeightRate(
          UPSOptionPage,ShippingAgentService,"Calculation Weight","Calculation Weight (LBS)",
          "Dimensional Weight",ModifyUPSOptionPage,"Use Dim Weight","World Wide Service",
          "UPS Canadian Service","UPS Puerto Rico Service",TRUE,
          "Calculation Length","Calculation Width","Calculation Height");

        IF "Oversize Actual Weight" = "Calculation Weight" THEN
          "Oversize Actual Weight" := 0;

        IF ModifyUPSOptionPage THEN
          UPSOptionPage.MODIFY;

        CheckPackage(CurrentPackage);

        "Closed by Packing Station Code" := PackingStation.Code;

        "UPS Hundred Weight" := FALSE;
        GetUPSTracking(CurrentPackage);

        GetShippingCharge(CurrentPackage,FALSE);
        UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.",0,0);

        IF COD AND "Add Shipping Charge to COD Amt" THEN
          "COD Amount" := "COD Amount" + "Shipping Charge";

        IF ("Package No." > 1) AND (NOT Miscellaneous) THEN BEGIN
          Package2.RESET;
          Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          Package2.SETRANGE("Source Type","Source Type");
          Package2.SETRANGE("Source Subtype","Source Subtype");
          IF "Multi Document Package" THEN
            Package2.SETFILTER("Source ID","Multi Document No.")
          ELSE
            Package2.SETRANGE("Source ID","Source ID");
          Package2.SETRANGE("Package No.",1);
          Package2.SETRANGE("Total Packages","Total Packages");
          IF Package2.FIND('-') THEN BEGIN
            Package2.TESTFIELD("External Tracking No.");
            "First Package No." := Package2."No.";
          END ELSE BEGIN
            "Package No." := 1;
            "Total Packages" := 1;
            "First Package No." := '';
          END;
        END ELSE
          IF ("Package No." = 1) AND ("Total Packages" > 1) AND NOT Miscellaneous THEN
            "First Package No." := "No.";

        "Packing Date" := WORKDATE;
        "Packing Time" := TIME;
        "Packed By" := USERID;
        Closed := TRUE;
        MODIFY;

        IF "Total Packages" > 1 THEN BEGIN
          Package2.GET("First Package No.");
          UPSOptionPage."Waybill No." := GetShipmentNo(Package2."External Tracking No.");
        END ELSE
          IF ShippingAgentService."UPS Puerto Rico Service" THEN
            UPSOptionPage."Waybill No." := COPYSTR("External Tracking No.",1,11)
          ELSE
            UPSOptionPage."Waybill No." := GetShipmentNo("External Tracking No.");
        UPSOptionPage.MODIFY;

        COMMIT;

        IF "Multi Document Package" THEN BEGIN
          GetShippingSetup;
          GetPackingStation;
          MultiDocPackageMgt.SplitMultiDocPackage(
            CurrentPackage,MultiDocPackageTmp,PackingStation,ShippingSetup);
          COMMIT;
        END;

        IF PrintLabel THEN
          PrintPackageLabel(CurrentPackage);
      END;
    END;

    PROCEDURE OpenPackage@19(VAR CurrentPackage@1000000000 : Record 14000701);
    VAR
      Package@1000000001 : Record 14000701;
      UPSManifest@1000000002 : Record 14000768;
      UPSManifestPart2@1000000003 : Record 14000771;
    BEGIN
      WITH CurrentPackage DO BEGIN
        TESTFIELD(Closed);
        TESTFIELD("Manifest No.",'');
        TESTFIELD("Pickup Date",0D);
        GetShippingAgentAccount("Shipping Agent Account No.");

        IF (("First Package No." = '') OR
            ("First Package No." = "No.")) AND
           NOT "Manual Shipment"
        THEN BEGIN
          Package.RESET;
          Package.SETCURRENTKEY("First Package No.");
          Package.SETRANGE("First Package No.","No.");
          Package.SETFILTER("No.",'<>%1',"No.");
          IF Package.FIND('-') THEN
            ERROR(
              Text016);
        END;
        IF (NOT "Manual Shipment") AND
           (NOT Miscellaneous) AND
           (("World Wide Service" OR "UPS Canadian Service") AND ("Total Packages" > 1)) AND
           ("Package No." <> "Total Packages")
        THEN BEGIN
          Package.RESET;
          Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          Package.SETRANGE("Source Type","Source Type");
          Package.SETRANGE("Source Subtype","Source Subtype");
          IF "Multi Document Package" THEN
            Package.SETFILTER("Source ID","Multi Document No.")
          ELSE
            Package.SETRANGE("Source ID","Source ID");
          Package.SETRANGE("Package No.","Total Packages");
          IF Package.FIND('-') AND Package.Closed THEN
            ERROR(
              Text017);
        END;

        "First Package No." := '';
        IF "Manual Shipment" THEN BEGIN
          Closed := FALSE;
          MODIFY;
          COMMIT;

          EXIT;
        END;

        IF "UPS Manifest Entry No." <> 0 THEN BEGIN
          IF ShippingAgentAccount."Manifest Version" >=
             ShippingAgentAccount."Manifest Version"::"7.00"
          THEN BEGIN
            UPSManifest.RESET;
            UPSManifest.SETCURRENTKEY("Package No.");
            UPSManifest.SETRANGE("Package No.","No.");
            IF UPSManifest.FIND('-') THEN
              REPEAT
                IF UPSManifestPart2.GET(UPSManifest."Entry No.") THEN
                  UPSManifestPart2.DELETE;
              UNTIL UPSManifest.NEXT = 0;
          END;

          UPSManifest.RESET;
          UPSManifest.SETCURRENTKEY("Package No.");
          UPSManifest.SETRANGE("Package No.","No.");
          UPSManifest.DELETEALL;

          "UPS Manifest Entry No." := 0;
        END;

        IF COD AND "Add Shipping Charge to COD Amt" THEN
          "COD Amount" := "COD Amount" - "Shipping Charge";

        "External Tracking No." := '';
        Closed := FALSE;
        MODIFY;
        COMMIT;
      END;
    END;

    PROCEDURE ReOpenPostedPackage@44(VAR CurrentPostedPackage@1000000000 : Record 14000704);
    VAR
      PostedPackage@1000000001 : Record 14000704;
      UPSManifest@1000000002 : Record 14000768;
    BEGIN
      WITH CurrentPostedPackage DO BEGIN
        TESTFIELD(Closed);
        TESTFIELD("Manifest No.",'');
        TESTFIELD("Pickup Date",0D);

        IF ("First Package No." = '') OR ("First Package No." = "No.") THEN BEGIN
          PostedPackage.RESET;
          PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Posted Source ID");
          PostedPackage.SETRANGE("Source Type","Source Type");
          PostedPackage.SETRANGE("Source Subtype","Source Subtype");
          PostedPackage.SETRANGE("Posted Source ID","Posted Source ID");
          PostedPackage.SETRANGE("First Package No.","No.");
          PostedPackage.SETFILTER("No.",'<>%1',"No.");
          IF PostedPackage.FIND('-') THEN
            ERROR(
              Text016);
        END;
        "First Package No." := '';
        IF "Manual Shipment" THEN BEGIN
          Closed := FALSE;
          MODIFY;
          COMMIT;

          EXIT;
        END;

        IF "UPS Manifest Entry No." <> 0 THEN BEGIN
          UPSManifest.RESET;
          UPSManifest.SETCURRENTKEY("Package No.");
          UPSManifest.SETRANGE("Package No.","No.");
          UPSManifest.DELETEALL;

          "UPS Manifest Entry No." := 0;
        END;

        IF COD AND "Add Shipping Charge to COD Amt" THEN
          "COD Amount" := "COD Amount" - "Shipping Charge";

        "External Tracking No." := '';
        Closed := FALSE;
        MODIFY;
        COMMIT;
      END;
    END;

    LOCAL PROCEDURE GetAccessorialCharge@20(CurrentUPSOptionPage@1240030001 : Record 14000761;CurrentShippingAGentService@1240030002 : Record 14000708;CountryCode@1240030003 : Code[2];ZIPCode@1240030004 : Code[20];CityName@1240030005 : Code[50];VAR EAS@1240030006 : Boolean;CalculationWeight@1240030007 : Decimal;COD@1240030008 : Boolean;InsuredValue@1240030009 : Decimal;ResidentialDelivery@1240030020 : Boolean;VAR InsuranceCharge@1240030010 : Decimal;VAR BaseCharge@1240030013 : Decimal) AccessorialChargeAmount@1240030000 : Decimal;
    VAR
      UPSAccessorialCharge@1240030011 : Record 14000767;
      TempCharge@1240030012 : Decimal;
    BEGIN
      WITH CurrentUPSOptionPage DO BEGIN
        CASE TRUE OF
          CurrentShippingAGentService."World Wide Service":
            ZIPCode := DELCHR(ZIPCode,'=',' ');
          CurrentShippingAGentService."UPS Canadian Service":
            BEGIN
              ZIPCode := DELCHR(ZIPCode,'=',' ');
              IF CountryCode = '' THEN
                CountryCode := 'CA';
            END;
          ELSE
            IF STRLEN(ZIPCode) > 5 THEN
              ZIPCode := COPYSTR(ZIPCode,1,5);
        END;

        AccessorialChargeAmount := 0;
        UPSAccessorialCharge.RESET;
        IF "Additional Handling Required" THEN BEGIN
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::AH);
          IF UPSAccessorialCharge.FIND('+') THEN
            AccessorialChargeAmount := AccessorialChargeAmount + UPSAccessorialCharge.Fee;
        END;

        IF NOT CurrentShippingAGentService."World Wide Service" THEN BEGIN
          IF ResidentialDelivery THEN
            UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::DASR)
          ELSE
            UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::DAS);
          UPSAccessorialCharge.SETRANGE("From Zip Code",ZIPCode);
          IF UPSAccessorialCharge.FIND('+') THEN
            BaseCharge := BaseCharge + UPSAccessorialCharge.Fee;
          UPSAccessorialCharge.SETRANGE("From Zip Code");
        END;

        IF (CurrentShippingAGentService."World Wide Service" OR
            (CurrentShippingAGentService."UPS Canadian Service" AND
             (CurrentShippingAGentService."Service Indicator" <> '11'))) AND EAS
        THEN BEGIN
          UPSAccessorialCharge.RESET;
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::EAS);
          IF ZIPCode <> '' THEN BEGIN
            UPSAccessorialCharge.SETCURRENTKEY(Type,"Country Code","From Zip Code","To Zip Code");
            UPSAccessorialCharge.SETRANGE("Country Code",CountryCode);
            UPSAccessorialCharge.SETFILTER("From Zip Code",'<=%1',ZIPCode);
            UPSAccessorialCharge.SETFILTER("To Zip Code",'>=%1',ZIPCode);
          END ELSE BEGIN
            UPSAccessorialCharge.SETCURRENTKEY(Type,"Country Code","City Name");
            UPSAccessorialCharge.SETRANGE("Country Code",CountryCode);
            UPSAccessorialCharge.SETRANGE("City Name",UPPERCASE(CityName));
          END;

          IF UPSAccessorialCharge.FIND('+') THEN BEGIN
            TempCharge := CalculationWeight * UPSAccessorialCharge.Fee;
            IF TempCharge < UPSAccessorialCharge."Minimum Charge" THEN
              TempCharge := UPSAccessorialCharge."Minimum Charge";
            BaseCharge := BaseCharge + TempCharge;
          END ELSE
            EAS := FALSE;

          UPSAccessorialCharge.RESET;
        END;

        IF "Call Tag Type" <> "Call Tag Type"::None THEN BEGIN
          CASE "Call Tag Type" OF
            "Call Tag Type"::"Print Return Label Only":
              IF NOT ShippingAgentAccount."UPS Prints Return Label" THEN
                UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::PRL)
              ELSE
                UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::PMRL);
            "Call Tag Type"::"1 attempt":
              UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::CT1);
            "Call Tag Type"::"3 attempt":
              UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::CT3);
            ELSE
              UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::CT);
          END;
          IF UPSAccessorialCharge.FIND('+') THEN
            BaseCharge := BaseCharge + UPSAccessorialCharge.Fee;
        END;

        IF COD THEN BEGIN
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::COD);
          IF UPSAccessorialCharge.FIND('+') THEN
            AccessorialChargeAmount := AccessorialChargeAmount + UPSAccessorialCharge.Fee;
        END;
        IF "Delivery Confirmation Type" <> "Delivery Confirmation Type"::None THEN BEGIN
          CASE "Delivery Confirmation Type" OF
            "Delivery Confirmation Type"::"Signature Date":
              UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::DCRSR);
            "Delivery Confirmation Type"::"Adult Signature":
               UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::DCRASR);
            ELSE
              UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::DCR);
          END;
          IF UPSAccessorialCharge.FIND('+') THEN
            AccessorialChargeAmount := AccessorialChargeAmount + UPSAccessorialCharge.Fee;
        END;

        IF "Dangerous Goods" OR "Dry Ice" THEN BEGIN
          IF CurrentShippingAGentService."Transport Method Type" =
            CurrentShippingAGentService."Transport Method Type"::Air
          THEN
            UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::HAZA)
          ELSE
            UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::HAZG);
          IF UPSAccessorialCharge.FIND('+') THEN
            AccessorialChargeAmount := AccessorialChargeAmount + UPSAccessorialCharge.Fee;
        END;

        InsuranceCharge := 0;
        IF InsuredValue > 100 THEN BEGIN
          InsuranceCharge := 0;
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::INS);
          IF UPSAccessorialCharge.FIND('+') THEN BEGIN
            InsuranceCharge :=
              (ROUND(InsuredValue / 100,1,'>') * UPSAccessorialCharge.Fee);
            IF InsuranceCharge < UPSAccessorialCharge."Minimum Charge" THEN
                InsuranceCharge := UPSAccessorialCharge."Minimum Charge";
          END;
          IF NOT CurrentUPSOptionPage."Shipper Pays Declared Value" THEN
            AccessorialChargeAmount := AccessorialChargeAmount + InsuranceCharge;
        END;

        IF "Saturday Delivery" OR "Saturday Pickup" THEN BEGIN
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::SC);
          IF UPSAccessorialCharge.FIND('+') THEN
            BaseCharge := BaseCharge + UPSAccessorialCharge.Fee;
        END;
        IF "Ship Notification" THEN BEGIN
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::SN);
          IF UPSAccessorialCharge.FIND('+') THEN
            AccessorialChargeAmount := AccessorialChargeAmount + UPSAccessorialCharge.Fee;
        END;
        IF "Verbal Confirm. of Delivery" THEN BEGIN
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::VCD);
          IF UPSAccessorialCharge.FIND('+') THEN
            AccessorialChargeAmount := AccessorialChargeAmount + UPSAccessorialCharge.Fee;
        END;
        IF "Large Package" THEN BEGIN
          IF CurrentShippingAGentService."Service Indicator" IN ['03','11'] THEN BEGIN
            UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::LPS);
            IF UPSAccessorialCharge.FIND('-') THEN
              BaseCharge := BaseCharge + UPSAccessorialCharge.Fee;
          END ELSE
            IF NOT CurrentShippingAGentService."World Wide Service" THEN BEGIN
               UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::LAP);
               IF UPSAccessorialCharge.FIND('-') THEN
                 BaseCharge := BaseCharge + UPSAccessorialCharge.Fee;
            END;
        END;

        IF (CountryCode = 'CA') AND ResidentialDelivery THEN BEGIN
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::CARES);
          IF UPSAccessorialCharge.FIND('-') THEN
            BaseCharge := BaseCharge + UPSAccessorialCharge.Fee;
        END;
      END;
    END;

    PROCEDURE PrintPackageLabel@24(VAR CurrentPackage@1000000000 : Record 14000701);
    BEGIN
      WITH CurrentPackage DO BEGIN
        TESTFIELD(Closed);

        IF "Manual Shipment" THEN
          EXIT;

        DirectPrintLabel(CurrentPackage);
      END;
    END;

    PROCEDURE PrintCODLabel@36(CurrentPackage@1000000000 : Record 14000701);
    VAR
      Package@1000000001 : Record 14000701;
    BEGIN
      WITH CurrentPackage DO BEGIN
        TESTFIELD("Shipping Agent Account No.");

        GetShippingAgentAccount("Shipping Agent Account No.");
        IF ShippingAgentAccount."COD Tags Report ID" <> 0 THEN
          REPORT.RUN(ShippingAgentAccount."COD Tags Report ID",FALSE,FALSE,CurrentPackage);
      END;
    END;

    PROCEDURE GetSurcharge@9(CurrentShippingAgentAccount@1240030001 : Record 14000770;CurrentShippingAgentService@1240030002 : Record 14000708;ShippingCharge@1240030003 : Decimal) ChargeAmount@1240030000 : Decimal;
    BEGIN
      IF (CurrentShippingAgentService."Service Indicator" = '03') OR
        (CurrentShippingAgentService."Service Indicator" = '11')
      THEN BEGIN
        CASE CurrentShippingAgentAccount."Surcharge Type" OF
          CurrentShippingAgentAccount."Surcharge Type"::Amount:
            ChargeAmount := CurrentShippingAgentAccount."Ground Fuel Surcharge";
          CurrentShippingAgentAccount."Surcharge Type"::Percent:
            ChargeAmount :=
              ROUND(ShippingCharge * CurrentShippingAgentAccount."Ground Fuel Surcharge" / 100,0.01);
        END;
      END ELSE BEGIN
        CASE CurrentShippingAgentAccount."Surcharge Type" OF
          CurrentShippingAgentAccount."Surcharge Type"::Amount:
            ChargeAmount := CurrentShippingAgentAccount."Air Fuel Surcharge";
          CurrentShippingAgentAccount."Surcharge Type"::Percent:
            ChargeAmount :=
              ROUND(ShippingCharge * CurrentShippingAgentAccount."Air Fuel Surcharge" / 100,0.01)
        END;
      END;
    END;

    LOCAL PROCEDURE FixPhoneNo@35(OriginalPhone@1000000001 : Text[30];WorldWide@1000000003 : Boolean) ReturnPhone@1000000000 : Text[30];
    VAR
      PhoneNoText@1000000002 : Text[30];
    BEGIN
      IF STRLEN(OriginalPhone) <> 0 THEN BEGIN
        PhoneNoText := OriginalPhone;
        PhoneNoText := DELCHR(PhoneNoText,'=','-');
        PhoneNoText := DELCHR(PhoneNoText,'=','+');
        PhoneNoText := DELCHR(PhoneNoText,'=','/');
        PhoneNoText := DELCHR(PhoneNoText,'=',' ');
        PhoneNoText := DELCHR(PhoneNoText,'=','(');
        PhoneNoText := DELCHR(PhoneNoText,'=',')');
        IF NOT WorldWide THEN BEGIN
          IF STRLEN(PhoneNoText) = 11 THEN
            ReturnPhone := PhoneNoText + '    '
          ELSE IF STRLEN(PhoneNoText) = 10 THEN
            ReturnPhone := '1' + PhoneNoText + '    '
          ELSE
            ReturnPhone := '';
        END ELSE
          ReturnPhone := PhoneNoText;
      END ELSE
        ReturnPhone := '';
    END;

    LOCAL PROCEDURE FixZIPCode@45(ZIPCodeText@1000000000 : Text[30]) : Text[9];
    BEGIN
      EXIT(COPYSTR(DELCHR(ZIPCodeText,'=',' -'),1,9));
    END;

    LOCAL PROCEDURE FixState@21(StateText@1000000000 : Text[30]) : Text[2];
    BEGIN
      EXIT(COPYSTR(LeftString(StateText),1,2));
    END;

    LOCAL PROCEDURE DirectPrintLabel@37(VAR CurrentPackage@1000000000 : Record 14000701);
    VAR
      UPSOptionPage@1000000002 : Record 14000761;
    BEGIN
      WITH CurrentPackage DO BEGIN
        TESTFIELD(Closed);

        IF "Manual Shipment" THEN
          EXIT;

        UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.",0,0);
        GetShippingAgentAccount("Shipping Agent Account No.");

        CASE UPSOptionPage."Call Tag Type" OF
          UPSOptionPage."Call Tag Type"::None:
            DirectPrintLabelDetails(CurrentPackage,UPSOptionPage,FALSE);
          UPSOptionPage."Call Tag Type"::Standard:
            BEGIN
              DirectPrintLabelDetails(CurrentPackage,UPSOptionPage,FALSE);
              DirectPrintLabelDetails(CurrentPackage,UPSOptionPage,TRUE);
            END;
          UPSOptionPage."Call Tag Type"::"1 attempt",
          UPSOptionPage."Call Tag Type"::"3 attempt":
            MESSAGE(
              Text018,
              UPSOptionPage."Call Tag Type");
          UPSOptionPage."Call Tag Type"::"Print Return Label Only":
            IF NOT ShippingAgentAccount."UPS Prints Return Label" THEN
              DirectPrintLabelDetails(CurrentPackage,UPSOptionPage,TRUE)
            ELSE
              MESSAGE(
                Text018,
                UPSOptionPage."Call Tag Type");
        END;
      END;
    END;

    PROCEDURE RePrintPostedPackageLabel@39(VAR CurrentPostedPackage@1000000000 : Record 14000704);
    VAR
      UPSOptionPage@1000000001 : Record 14000761;
      UPSPostedOptionPage@1000000002 : Record 14000762;
      PostedPackage@1000000003 : Record 14000704;
      Package@1000000004 : Record 14000701;
    BEGIN
      WITH CurrentPostedPackage DO BEGIN
        TESTFIELD(Closed);

        IF "Manual Shipment" THEN
          EXIT;

        UPSPostedOptionPage.GET("No.");
        GetShippingAgentAccount("Shipping Agent Account No.");

        IF "Total Packages" > 1 THEN BEGIN
          TESTFIELD("First Package No.");
          PostedPackage.GET("First Package No.");
          PostedPackage.RESET;
          PostedPackage.SETCURRENTKEY("First Package No.");
          PostedPackage.SETRANGE("First Package No.","No.");
          PostedPackage.CALCSUMS("Calculation Weight (LBS)");
        END;

        // Transfer to temporary record for printing
        Package.TRANSFERFIELDS(CurrentPostedPackage);
        UPSOptionPage.TRANSFERFIELDS(UPSPostedOptionPage);

        CASE UPSOptionPage."Call Tag Type" OF
          UPSOptionPage."Call Tag Type"::None:
            DirectPrintLabelDetails(Package,UPSOptionPage,FALSE);
          UPSOptionPage."Call Tag Type"::Standard:
            BEGIN
              DirectPrintLabelDetails(Package,UPSOptionPage,FALSE);
              DirectPrintLabelDetails(Package,UPSOptionPage,TRUE);
            END;
          UPSOptionPage."Call Tag Type"::"1 attempt",
          UPSOptionPage."Call Tag Type"::"3 attempt":
            MESSAGE(
              Text018,
              UPSOptionPage."Call Tag Type");
          UPSOptionPage."Call Tag Type"::"Print Return Label Only":
            IF NOT ShippingAgentAccount."UPS Prints Return Label" THEN
              DirectPrintLabelDetails(Package,UPSOptionPage,TRUE)
            ELSE
              MESSAGE(
                Text018,
                UPSOptionPage."Call Tag Type");
        END;
      END;
    END;

    LOCAL PROCEDURE DirectPrintLabelDetails@3(CurrentPackage@1000000000 : Record 14000701;CurrentUPSOptionPage@1000000001 : Record 14000761;CallTagLabel@1000000039 : Boolean);
    VAR
      Country@1000000002 : Record 9;
      CompanyInfo@1000000003 : Record 79;
      FromLine@1000000004 : ARRAY [7] OF Text[60];
      ToLine@1000000005 : ARRAY [7] OF Text[60];
      AddressBlock@1000000006 : ARRAY [7] OF Text[100];
      ZIPBarCode@1000000007 : Text[100];
      RoutingCode@1000000008 : Code[15];
      MaxiCode@1000000009 : Text[250];
      ShippingServiceCode@1000000010 : Text[100];
      BarCodeReadable@1000000011 : Text[100];
      ServiceIconText@1000000012 : Text[30];
      AdditionalRouting@1000000013 : ARRAY [7] OF Text[100];
      DimWeight@1000000014 : Decimal;
      ClassCode@1000000015 : Text[3];
      ISOCountryCode@1000000016 : Text[6];
      UPSCountryCode@1000000017 : Code[2];
      ZIPCode@1000000018 : Text[20];
      ZIPCode2@1000000019 : Text[20];
      Plus4@1000000020 : Text[4];
      JulDayShip@1000000021 : Integer;
      EOT@1000000022 : Char;
      GS@1000000023 : Char;
      RS@1000000024 : Char;
      CR@1000000025 : Char;
      LF@1000000026 : Char;
      tEOT@1000000027 : Text[2];
      tGS@1000000028 : Text[2];
      tRS@1000000029 : Text[2];
      tCR@1000000030 : Text[2];
      tLF@1000000031 : Text[2];
      TrackingNo@1000000032 : Text[30];
      tJulDayShip@1000000033 : Text[10];
      LinePosition@1000000034 : Integer;
      Billed@1000000035 : ARRAY [3] OF Text[30];
      ShipmentID@1000000036 : Code[20];
      i@1000000038 : Integer;
      ShipToCity@1000000040 : Text[30];
      ShipToState@1000000041 : Text[30];
      ItemLabelInfo@1240030000 : ARRAY [10,8] OF Text[50];
      ActualWeight@1240030001 : Integer;
      Packageweight@1240030002 : Text[30];
      FromCountryText@1240030003 : Text[30];
    BEGIN
      WITH CurrentPackage DO BEGIN
        GetShippingSetup;
        GetPackingStation;
        CarrierPackingStation.GetPackingStation(PackingStation);
        GetShippingAgent("Shipping Agent Code");
        TESTFIELD("Shipping Agent Account No.");
        GetShippingAgentAccount("Shipping Agent Account No.");
        GetShippingAgentService("Shipping Agent Code","Shipping Agent Service","World Wide Service");

        JulDayShip := "Packing Date" - DMY2DATE(1,1,DATE2DMY("Packing Date",3)) + 1;
        tJulDayShip := STRSUBSTNO('%1',JulDayShip);

        IF STRLEN(tJulDayShip) = 1 THEN
          tJulDayShip := '00' + tJulDayShip
        ELSE IF STRLEN(tJulDayShip) = 2 THEN
          tJulDayShip := '0' + tJulDayShip;

        IF NOT Miscellaneous THEN
          ShipmentID := "Source ID"
        ELSE
          ShipmentID := "No.";

        IF CallTagLabel THEN BEGIN
          IF "Ship-to Country Code" = '' THEN
            FromCountryText := 'UNITED STATES'
          ELSE BEGIN
            Country.GET("Ship-to Country Code");
            FromCountryText := Country.Name;
          END;
        END ELSE
          FromCountryText := 'UNITED STATES';

        IF CallTagLabel THEN BEGIN
          IF CurrentUPSOptionPage."Alternate Call Tag Return" THEN BEGIN
            ZIPCode := FixZIPCode(CurrentUPSOptionPage."Return ZIP Code");
            ShipToCity := CurrentUPSOptionPage."Return City";
            ShipToState := CurrentUPSOptionPage."Return State";
            IF CurrentUPSOptionPage."Return Country Code" = '' THEN BEGIN
              ISOCountryCode := '840';
              UPSCountryCode := 'US';
            END ELSE BEGIN
              Country.GET(CurrentUPSOptionPage."Return Country Code");
              Country.TESTFIELD(UPS);
              Country.TESTFIELD("ISO 3 digit Country Code");
              Country.TESTFIELD("ISO 2 char Country Code");
              ISOCountryCode := Country."ISO 3 digit Country Code";
              UPSCountryCode := Country."ISO 2 char Country Code";
            END;
          END ELSE BEGIN
            ZIPCode := FixZIPCode(PackingStation."Ship-from ZIP Code");
            ShipToCity := PackingStation."Ship-from City";
            ShipToState := PackingStation."Ship-from State";
            IF PackingStation."Ship-from Country Code" = '' THEN BEGIN
              ISOCountryCode := '840';
              UPSCountryCode := 'US';
            END ELSE BEGIN
              Country.GET(PackingStation."Ship-from Country Code");
              Country.TESTFIELD(UPS);
              Country.TESTFIELD("ISO 3 digit Country Code");
              Country.TESTFIELD("ISO 2 char Country Code");
              ISOCountryCode := Country."ISO 3 digit Country Code";
              UPSCountryCode := Country."ISO 2 char Country Code";
            END;
          END;
        END ELSE BEGIN
          ZIPCode := FixZIPCode("Ship-to ZIP Code");
          ShipToCity := "Ship-to City";
          ShipToState := "Ship-to State";
          IF "Ship-to Country Code" = '' THEN BEGIN
            ISOCountryCode := '840';
            UPSCountryCode := 'US';
          END ELSE BEGIN
            Country.GET("Ship-to Country Code");
            Country.TESTFIELD(UPS);
            Country.TESTFIELD("ISO 3 digit Country Code");
            Country.TESTFIELD("ISO 2 char Country Code");
            ISOCountryCode := Country."ISO 3 digit Country Code";
            UPSCountryCode := Country."ISO 2 char Country Code";
          END;
        END;

        IF STRLEN(ZIPCode) > 9 THEN BEGIN
          LinePosition := STRPOS(ZIPCode,'-');
          IF LinePosition <> 0 THEN
            ZIPCode :=
              FixZIPCode(COPYSTR(ZIPCode,1,5) + COPYSTR(ZIPCode,LinePosition + 1,4));
        END;

        IF NOT "World Wide Service" THEN
          ZIPCode2 := COPYSTR(ZIPCode,1,5)
        ELSE
          ZIPCode2 := ZIPCode;

        IF STRLEN(ZIPCode) = 9 THEN
          Plus4 := COPYSTR(ZIPCode,6,4)
        ELSE
          Plus4 := '';
        TrackingNo := '1Z' + COPYSTR("External Tracking No.",STRLEN("External Tracking No.") - 7,8);

        RoutingCode := GetUPSRoutingCode(UPSCountryCode,ZIPCode2);
        ClassCode := ServiceConvertToNo(GetServiceIndicator(CurrentPackage,CurrentUPSOptionPage));

        CLEAR(FromLine);
        i := 1;
        CASE TRUE OF
          "Blind Shipment" OR "Double Blind Shipment":
            BEGIN
              SetArrayField(FromLine,i,FALSE,CleanString("Blind Ship-from Contact"));
              SetArrayField(FromLine,i,TRUE,CleanString("Blind Ship-from Name"));
              SetArrayField(FromLine,i,TRUE,"Blind Ship-from Phone No.");
              SetArrayField(FromLine,i,TRUE,CleanString("Blind Ship-from Address"));
              SetArrayField(FromLine,i,FALSE,CleanString("Blind Ship-from Address 2"));
              SetArrayField(
                FromLine,i,TRUE,
                CreateZipString(
                  "Blind Ship-from City","Blind Ship-from State",FixZIPCode("Blind Ship-from ZIP Code")));
              IF "Blind Ship-from Country Code" = '' THEN BEGIN
                FromCountryText := 'UNITED STATES';
                Country."ISO 2 char Country Code" := 'US';
              END ELSE BEGIN
                Country.GET("Blind Ship-from Country Code");
                Country.TESTFIELD(UPS);
                Country.TESTFIELD("ISO 3 digit Country Code");
                Country.TESTFIELD("ISO 2 char Country Code");
                FromCountryText := Country.Name;
              END;
            END;
          COD:
            BEGIN
              CompanyInfo.GET;
              PackingStation.TESTFIELD("Ship-from Phone No.");
              SetArrayField(FromLine,i,FALSE,CleanString(PackingStation."Ship-from Contact"));
              SetArrayField(FromLine,i,TRUE,CleanString(CompanyInfo.Name));
              SetArrayField(FromLine,i,TRUE,CleanString(PackingStation."Ship-from Phone No."));
              SetArrayField(FromLine,i,TRUE,CleanString(CompanyInfo."COD Address 1"));
              SetArrayField(FromLine,i,FALSE,CleanString(CompanyInfo."COD Address 2"));
              SetArrayField(
                FromLine,i,TRUE,
                CreateZipString(
                  CompanyInfo."COD City",CompanyInfo."COD State",FixZIPCode(CompanyInfo."COD Zip Code")));
            END;
          CallTagLabel:
            BEGIN
              IF NOT "World Wide Service" AND NOT ShippingAgentService."UPS Canadian Service" THEN BEGIN
                SetArrayField(FromLine,i,FALSE,CleanString("Ship-to Contact"));
                SetArrayField(FromLine,i,TRUE,CleanString("Ship-to Name"));
                SetArrayField(FromLine,i,TRUE,FixPhoneNo("Ship-to Phone No.","World Wide Service"));
                SetArrayField(FromLine,i,TRUE,CleanString("Ship-to Address"));
                SetArrayField(FromLine,i,FALSE,CleanString("Ship-to Address 2"));
                SetArrayField(
                  FromLine,i,TRUE,
                  CreateZipString(
                    "Ship-to City","Ship-to State",FixZIPCode("Ship-to ZIP Code")));
              END ELSE BEGIN
                SetArrayField(FromLine,i,FALSE,CleanString("Ship-to Contact"));
                SetArrayField(FromLine,i,TRUE,CleanString("Ship-to Name"));
                SetArrayField(FromLine,i,TRUE,FixPhoneNo("Ship-to Phone No.","World Wide Service"));
                SetArrayField(FromLine,i,TRUE,CleanString("Ship-to Address"));
                SetArrayField(FromLine,i,FALSE,CleanString("Ship-to Address 2"));
                IF ShippingAgentService."UPS Canadian Service" THEN
                  SetArrayField(
                    FromLine,i,TRUE,
                    CleanString("Ship-to City") + ' ' + CleanString("Ship-to State") + ' ' +
                    FixZIPCode("Ship-to ZIP Code"))
                ELSE
                  SetArrayField(
                    FromLine,i,TRUE,FixZIPCode("Ship-to ZIP Code") + ' ' + CleanString("Ship-to City"));
              END;
            END;
          ELSE
            BEGIN
              PackingStation.TESTFIELD("Ship-from Phone No.");
              SetArrayField(FromLine,i,FALSE,CleanString(PackingStation."Ship-from Contact"));
              SetArrayField(FromLine,i,TRUE,CleanString(PackingStation."Ship-from Company"));
              SetArrayField(FromLine,i,TRUE,CleanString(PackingStation."Ship-from Phone No."));
              SetArrayField(FromLine,i,TRUE,CleanString(PackingStation."Ship-from Address"));
              SetArrayField(FromLine,i,FALSE,CleanString(PackingStation."Ship-from Address2"));
              SetArrayField(
                FromLine,i,TRUE,
                CreateZipString(
                  PackingStation."Ship-from City",PackingStation."Ship-from State",
                  FixZIPCode(PackingStation."Ship-from ZIP Code")));
            END;
        END;
        IF "World Wide Service" OR "UPS Canadian Service" OR "UPS Puerto Rico Service" THEN
          SetArrayField(FromLine,i,TRUE,CleanString(FromCountryText));

        CLEAR(ToLine);
        i := 1;
        IF (NOT "World Wide Service") AND
           (NOT "UPS Canadian Service") AND
           (NOT "UPS Puerto Rico Service")
        THEN BEGIN
          IF NOT CallTagLabel THEN BEGIN
            SetArrayField(ToLine,i,FALSE,CleanString("Ship-to Contact"));
            SetArrayField(ToLine,i,FALSE,FixPhoneNo("Ship-to Phone No.","World Wide Service"));
            SetArrayField(ToLine,i,TRUE,CleanString("Ship-to Name"));
            SetArrayField(ToLine,i,TRUE,CleanString("Ship-to Address"));
            IF "Ship-to Address 2" <> '' THEN
              SetArrayField(ToLine,i,FALSE,CleanString("Ship-to Address 2"));
            SetArrayField(
              ToLine,i,TRUE,
              CreateZipString("Ship-to City","Ship-to State",FixZIPCode("Ship-to ZIP Code")));
          END ELSE BEGIN
            IF NOT CurrentUPSOptionPage."Alternate Call Tag Return" THEN BEGIN
              SetArrayField(ToLine,i,FALSE,CleanString(PackingStation."Ship-from Contact"));
              SetArrayField(ToLine,i,FALSE,CleanString(PackingStation."Ship-from Phone No."));
              SetArrayField(ToLine,i,TRUE,CleanString(PackingStation."Ship-from Company"));
              SetArrayField(ToLine,i,TRUE,CleanString(PackingStation."Ship-from Address"));
              IF PackingStation."Ship-from Address2" <> '' THEN
                SetArrayField(ToLine,i,FALSE,CleanString(PackingStation."Ship-from Address2"));
              SetArrayField(
                  ToLine,i,TRUE,
                  CreateZipString(
                    PackingStation."Ship-from City",PackingStation."Ship-from State",
                    FixZIPCode(PackingStation."Ship-from ZIP Code")));
            END ELSE BEGIN
              SetArrayField(ToLine,i,FALSE,CleanString(CurrentUPSOptionPage."Return Contact"));
              SetArrayField(ToLine,i,FALSE,CleanString(PackingStation."Ship-from Phone No."));
              SetArrayField(ToLine,i,TRUE,CleanString(CurrentUPSOptionPage."Return Company Name"));
              SetArrayField(ToLine,i,TRUE,CleanString(CurrentUPSOptionPage."Return Address"));
              IF CurrentUPSOptionPage."Return Address 2" <> '' THEN
                SetArrayField(ToLine,i,FALSE,CleanString(CurrentUPSOptionPage."Return Address 2"));
              SetArrayField(
                  ToLine,i,TRUE,
                  CreateZipString(
                    CurrentUPSOptionPage."Return City",CurrentUPSOptionPage."Return State",
                    FixZIPCode(CurrentUPSOptionPage."Return ZIP Code")));
            END;
          END;
          CLEAR(AddressBlock);
          i := 1;
          IF CurrentUPSOptionPage."UPS Packaging Type" <>
             CurrentUPSOptionPage."UPS Packaging Type"::"UPS Letter"
          THEN BEGIN
            IF "Oversize Actual Weight" > 0 THEN
              IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::KGS THEN
                ActualWeight := ROUND(ShippingSetup.KiloToPound("Oversize Actual Weight"),1,'>')
              ELSE
                ActualWeight := ROUND("Oversize Actual Weight",1,'>')
            ELSE
              ActualWeight := ROUND("Calculation Weight (LBS)",1,'>');

            IF (CurrentUPSOptionPage."UPS Packaging Type" =
                CurrentUPSOptionPage."UPS Packaging Type"::"UPS 10kg Box") AND
               (ActualWeight < 24)
            THEN
              SetArrayField(AddressBlock,i,TRUE,'10 KG BOX')
            ELSE
              IF (CurrentUPSOptionPage."UPS Packaging Type" =
                  CurrentUPSOptionPage."UPS Packaging Type"::"UPS 25kg Box") AND
                 (ActualWeight < 57)
              THEN
                SetArrayField(AddressBlock,i,TRUE,'25 KG BOX')
              ELSE
                SetArrayField(AddressBlock,i,TRUE,Integer2Text(ActualWeight) + ' LBS');
          END ELSE
            SetArrayField(
              AddressBlock,i,TRUE,
              Decimal2Text(ROUND("Calculation Weight (LBS)",0.1,'>'),1) + ' LBS LTR');

          SetArrayField(
            AddressBlock,i,TRUE,
            Integer2Text("Package No.") + ' OF ' + Integer2Text("Total Packages"));

          IF NOT COD THEN BEGIN
            IF CallTagLabel THEN
              IF CurrentUPSOptionPage."Call Tag Type" =
                CurrentUPSOptionPage."Call Tag Type"::"Print Return Label Only"
            THEN
              SetArrayField(AddressBlock,i,TRUE,'RS');

            IF "Use Dim Weight" THEN BEGIN
              IF ShippingAgentAccount."Automatic Dimensional Weight" THEN BEGIN
                DimWeight := "Calculation Weight (LBS)";
              END ELSE BEGIN
                DimWeight := TotalDimWeight;
                IF "Override Weight" > 0 THEN
                  DimWeight := "Override Weight";
              END;
              SetArrayField(AddressBlock,i,TRUE,'DWT: ' + Decimal2Text(DimWeight,0) + ' LBS');
            END;

            IF CurrentUPSOptionPage."Large Package" THEN
              SetArrayField(AddressBlock,i,TRUE,'LP');

            IF CurrentUPSOptionPage."Additional Handling Required" THEN
              SetArrayField(AddressBlock,i,TRUE,'AH');
          END ELSE
            SetArrayField(AddressBlock,i,TRUE,'COD');

          ZIPBarCode := '420' + COPYSTR(ZIPCode,1,5) + Plus4;

          CLEAR(AdditionalRouting);
          i := 1;
          CASE "Shipping Payment Type" OF
            "Shipping Payment Type"::"Third Party":
              SetArrayField(AdditionalRouting,i,TRUE,'BILLING: 3RD PARTY ');
            "Shipping Payment Type"::"Freight Collect":
              SetArrayField(AdditionalRouting,i,TRUE,'BILLING: F/C BILL RECEIVER');
            "Shipping Payment Type"::Consignee:
              IF CurrentUPSOptionPage."Receiver Location ID" <> '' THEN
                SetArrayField(
                  AdditionalRouting,i,TRUE,
                  'BILLING: CONSIGNEE ' + CurrentUPSOptionPage."Receiver Location ID")
              ELSE
                SetArrayField(AdditionalRouting,i,TRUE,'BILLING: CONSIGNEE');
            ELSE
              SetArrayField(AdditionalRouting,i,TRUE,'BILLING: P/P');
          END;
          IF COD THEN
            IF "COD Cashiers Check" THEN
              SetArrayField(
                AdditionalRouting,i,TRUE,
                'COD CASHIERS CK/MO ONLY $' +
                COPYSTR('               ',1,14 - STRLEN(Decimal2Text("COD Amount",2))) +
                Decimal2Text("COD Amount",2))
            ELSE
              SetArrayField(
                AdditionalRouting,i,TRUE,'COD: $' +
                COPYSTR('               ',1,14 - STRLEN(Decimal2Text("COD Amount",2))) +
                Decimal2Text("COD Amount",2));

          CASE CurrentUPSOptionPage."Delivery Confirmation Type" OF
            CurrentUPSOptionPage."Delivery Confirmation Type"::"Signature Date":
              SetArrayField(AdditionalRouting,i,TRUE,'SIGNATURE REQUIRED');
            CurrentUPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
              SetArrayField(AdditionalRouting,i,TRUE,'ADULT SIGNATURE REQUIRED - MIN 21')
          END;
          IF CurrentUPSOptionPage."Dangerous Goods" THEN BEGIN
            SetArrayField(AdditionalRouting,i,TRUE,'HAZARDOUS MATERIAL');
          END;
          IF CurrentUPSOptionPage."Call Tag Type" =
            CurrentUPSOptionPage."Call Tag Type"::"Print Return Label Only"
          THEN
            SetArrayField(AdditionalRouting,i,TRUE,'RETURN SERVICE');
          IF NOT Miscellaneous THEN BEGIN
            IF AdditionalRouting[4] = '' THEN
              IF "Multi Document Package" THEN
                AdditionalRouting[4] := 'SO #:' + COPYSTR("Multi Document No.",1,35)
              ELSE
                AdditionalRouting[4] := 'SO #:' + "Source ID";
            AdditionalRouting[5] := 'PO #:' + "External Document No.";
          END ELSE
            AdditionalRouting[5] := 'PO #:' + "No.";
        END ELSE BEGIN
          TESTFIELD(Description);
          IF NOT CallTagLabel THEN BEGIN
            SetArrayField(ToLine,i,FALSE,CleanString("Ship-to Contact"));
            SetArrayField(ToLine,i,TRUE,CleanString("Ship-to Name"));
            SetArrayField(ToLine,i,TRUE,FixPhoneNo("Ship-to Phone No.","World Wide Service"));
            SetArrayField(ToLine,i,TRUE,CleanString("Ship-to Address"));
            SetArrayField(ToLine,i,FALSE,CleanString("Ship-to Address 2"));
            IF "UPS Canadian Service" OR "UPS Puerto Rico Service" THEN
              SetArrayField(
                ToLine,i,TRUE,
                CleanString("Ship-to City") + ' ' + CleanString("Ship-to State") + ' ' +
                FixZIPCode("Ship-to ZIP Code"))
            ELSE
              SetArrayField(
                ToLine,i,TRUE,CleanString("Ship-to City") + ' ' + FixZIPCode("Ship-to ZIP Code"));
            SetArrayField(ToLine,i,TRUE,CleanString(Country.Name));
          END ELSE BEGIN
            IF NOT CurrentUPSOptionPage."Alternate Call Tag Return" THEN BEGIN
              SetArrayField(ToLine,i,FALSE,CleanString(PackingStation."Ship-from Contact"));
              SetArrayField(ToLine,i,TRUE,CleanString(PackingStation."Ship-from Company"));
              SetArrayField(ToLine,i,TRUE,CleanString(PackingStation."Ship-from Phone No."));
              SetArrayField(ToLine,i,TRUE,CleanString(PackingStation."Ship-from Address"));
              SetArrayField(ToLine,i,FALSE,CleanString(PackingStation."Ship-from Address2"));
              SetArrayField(
                  ToLine,i,TRUE,
                  CreateZipString(
                    PackingStation."Ship-from City",PackingStation."Ship-from State",
                    FixZIPCode(PackingStation."Ship-from ZIP Code")));
            END ELSE BEGIN
              SetArrayField(ToLine,i,FALSE,CleanString(CurrentUPSOptionPage."Return Contact"));
              SetArrayField(ToLine,i,TRUE,CleanString(CurrentUPSOptionPage."Return Company Name"));
              SetArrayField(ToLine,i,TRUE,CleanString(PackingStation."Ship-from Phone No."));
              SetArrayField(ToLine,i,TRUE,CleanString(CurrentUPSOptionPage."Return Address"));
              SetArrayField(ToLine,i,FALSE,CleanString(CurrentUPSOptionPage."Return Address 2"));
              SetArrayField(
                  ToLine,i,TRUE,
                  CreateZipString(
                    CurrentUPSOptionPage."Return City",CurrentUPSOptionPage."Return State",
                    FixZIPCode(CurrentUPSOptionPage."Return ZIP Code")));
            END;

            IF UPSCountryCode = 'US' THEN
              SetArrayField(ToLine,i,TRUE,'UNITED STATES')
            ELSE
              SetArrayField(ToLine,i,TRUE,CleanString(Country.Name));
          END;
          CLEAR(AddressBlock);
          i := 1;
          IF CurrentUPSOptionPage."UPS Packaging Type" <>
             CurrentUPSOptionPage."UPS Packaging Type"::"UPS Letter"
          THEN BEGIN
            IF "Oversize Actual Weight" > 0 THEN
              IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::KGS THEN
                ActualWeight := ROUND(ShippingSetup.KiloToPound("Oversize Actual Weight"),1,'>')
              ELSE
                ActualWeight := ROUND("Oversize Actual Weight",1,'>')
            ELSE
              ActualWeight := ROUND("Calculation Weight (LBS)",1,'>');

            IF (CurrentUPSOptionPage."UPS Packaging Type" =
                CurrentUPSOptionPage."UPS Packaging Type"::"UPS 10kg Box") AND
               (ActualWeight < 24)
            THEN
              SetArrayField(AddressBlock,i,TRUE,'10 KG BOX')
            ELSE
              IF (CurrentUPSOptionPage."UPS Packaging Type" =
                  CurrentUPSOptionPage."UPS Packaging Type"::"UPS 25kg Box") AND
                 (ActualWeight < 57)
              THEN
                SetArrayField(AddressBlock,i,TRUE,'25 KG BOX')
              ELSE
                SetArrayField(AddressBlock,i,TRUE,Integer2Text(ActualWeight) + ' LBS');
          END ELSE
            SetArrayField(
              AddressBlock,i,TRUE,
              Decimal2Text(ROUND("Calculation Weight (LBS)",0.1,'>'),1) + ' LBS LTR');

          SetArrayField(
            AddressBlock,i,TRUE,
            Integer2Text("Package No.") + ' OF ' + Integer2Text("Total Packages"));

          IF (NOT COD) OR "World Wide Service" OR "UPS Canadian Service" THEN BEGIN
            SetArrayField(AddressBlock,i,TRUE,'SHP#: ' + CurrentUPSOptionPage."Waybill No.");
            SetArrayField(
              AddressBlock,i,TRUE,'SHP WT: ' +
              Decimal2Text(ROUND("Calculation Weight (LBS)",1,'>'),0) + ' LBS');

            IF "Use Dim Weight" THEN BEGIN
              IF ShippingAgentAccount."Automatic Dimensional Weight" THEN BEGIN
                DimWeight := "Calculation Weight (LBS)";
              END ELSE BEGIN
                DimWeight := TotalDimWeight;
                IF "Override Weight" > 0 THEN
                  DimWeight := "Override Weight";
              END;
              SetArrayField(AddressBlock,i,TRUE,'SHP DWT: ' + Decimal2Text(DimWeight,0) + ' LBS');
            END;
            SetArrayField(
              AddressBlock,i,TRUE,
              'DATE: ' + STRSUBSTNO('%1 ',DATE2DMY("Packing Date",1)) +
              UPPERCASE(COPYSTR(FORMAT("Packing Date",0,'<Month Text>'),1,3) + ' ' +
              FORMAT("Packing Date",0,'<Year4>')));
          END ELSE
            SetArrayField(AddressBlock,i,TRUE,'COD');

          IF ZIPCode <> '' THEN
            ZIPBarCode := '421' + ISOCountryCode + ZIPCode;

          CLEAR(AdditionalRouting);
          i := 1;
      //    IF CurrentUPSOptionPage."International Billing" >
      //       CurrentUPSOptionPage."International Billing"::Prepaid
      //    THEN
      //      CurrentUPSOptionPage.TESTFIELD("Third Party Account No.");
          CASE CurrentUPSOptionPage."International Billing" OF
            CurrentUPSOptionPage."International Billing"::"Third Party":
              Billed[1] := 'P/P T/P ' + "Third Party Ship. Account No." + ' ' + UPSCountryCode;
            CurrentUPSOptionPage."International Billing"::"Free On Board":
              Billed[1] := 'FOB ' + "Third Party Ship. Account No.";
            CurrentUPSOptionPage."International Billing"::FreightCollect:
              BEGIN
                TESTFIELD("Third Party Ship. Account No.");
                Billed[1] := 'F/C BILL RECEIVER ' + "Third Party Ship. Account No.";
              END;
            CurrentUPSOptionPage."International Billing"::"Cost Freight":
              Billed[1] := 'C/F ' + "Third Party Ship. Account No.";
            CurrentUPSOptionPage."International Billing"::"Delivery Duty Paid":
              Billed[1] := 'SDV ' + "Third Party Ship. Account No.";
            CurrentUPSOptionPage."International Billing"::"Shipping Duty Tax":
              Billed[1] := 'F/D ' + "Third Party Ship. Account No.";
            ELSE
              Billed[1] := 'P/P';
          END;

          IF CurrentUPSOptionPage."Call Tag Type" =
            CurrentUPSOptionPage."Call Tag Type"::"Print Return Label Only"
          THEN BEGIN
            CASE CurrentUPSOptionPage."International Routing" OF
              CurrentUPSOptionPage."International Routing"::"Nondutiable Document":
                Billed[2] := 'DOC-RS';
              CurrentUPSOptionPage."International Routing"::Dutiable,
              CurrentUPSOptionPage."International Routing"::" ":
                Billed[2] := 'INV-RS';
              ELSE
                Billed[2] := 'RS';
            END;
          END ELSE
            CASE CurrentUPSOptionPage."International Routing" OF
              CurrentUPSOptionPage."International Routing"::"Nondutiable Document":
                Billed[2] := 'EDI-DOC';
              CurrentUPSOptionPage."International Routing"::Dutiable,
              CurrentUPSOptionPage."International Routing"::" ":
                Billed[2] := 'INV';
            END;

          IF CurrentUPSOptionPage."Need Power of Attorney" THEN
            Billed[3] := 'POA';

          IF CurrentUPSOptionPage."Export Declaration" =
             CurrentUPSOptionPage."Export Declaration"::"UPS Prepare"
          THEN BEGIN
            IF Billed[3] = '' THEN
              Billed[3] := 'SED'
            ELSE
              Billed[3] := Billed[3] + '/SED';
          END;

          IF CurrentUPSOptionPage."Need Certificate of Origin" THEN BEGIN
            IF Billed[3] = '' THEN
              Billed[3] := 'CO'
            ELSE
              Billed[3] := Billed[3] + '/CO';
          END;

          SetArrayField(AdditionalRouting,i,TRUE,'BILLING: ' + Billed[1]);
          SetArrayField(AdditionalRouting,i,TRUE,'DESC: ' + COPYSTR(Description,1,30));
          SetArrayField(AdditionalRouting,i,TRUE,Billed[2]);
          IF Billed[3] <> '' THEN
            SetArrayField(AdditionalRouting,i,TRUE,Billed[3]);
          IF "AES ITN No." <> '' THEN BEGIN
            CompanyInfo.GET;
            AdditionalRouting[5] := 'EIN: ' + CompanyInfo."VAT Registration No.";
            AdditionalRouting[6] := 'AES Number: ' + "AES ITN No.";
            IF COD AND "UPS Puerto Rico Service" THEN
              IF "COD Cashiers Check" THEN
                AdditionalRouting[7] := 'COD CASHIERS CK/MO ONLY $ ' + Decimal2Text("COD Amount",2)
              ELSE
                AdditionalRouting[7] := 'COD: $ ' + Decimal2Text("COD Amount",2);
          END ELSE BEGIN
            IF NOT Miscellaneous THEN
              AdditionalRouting[5] := 'PO #:' + "Source ID"
            ELSE
              AdditionalRouting[5] := 'PO #:' + "No.";
            IF COD AND "UPS Puerto Rico Service" THEN
              IF "COD Cashiers Check" THEN
                AdditionalRouting[6] := 'COD CASHIERS CK/MO ONLY $ ' + Decimal2Text("COD Amount",2)
              ELSE
                AdditionalRouting[6] := 'COD: $ ' + Decimal2Text("COD Amount",2)
            ELSE
              IF CurrentUPSOptionPage."Call Tag Type" =
                 CurrentUPSOptionPage."Call Tag Type"::"Print Return Label Only"
              THEN
                AdditionalRouting[6] := 'RETURN SERVICE';
          END;
        END;

        EOT := 4;
        GS := 29;
        RS := 30;
        CR := 13;
        LF := 10;
        tEOT[1] := EOT;
        tGS[1] := GS;
        tRS[1] := RS;
        tCR[1] := CR;
        tLF[1] := LF;

        CASE "Service Indicator" OF
          '01':
            ShippingServiceCode := 'UPS NEXT DAY AIR';
          '02':
            ShippingServiceCode := 'UPS 2ND DAY AIR';
          '03':
            ShippingServiceCode := 'UPS GROUND';
          '04':
            ShippingServiceCode := 'UPS SAVER';
          '07':
            ShippingServiceCode := 'UPS EXPRESS';
          '08':
            ShippingServiceCode := 'UPS EXPEDITED';
          '11':
            ShippingServiceCode := 'UPS STANDARD';
          '12':
            ShippingServiceCode := 'UPS 3 DAY SELECT';
          '13':
            ShippingServiceCode := 'UPS NEXT DAY AIR SAVER';
          '15':
            ShippingServiceCode := 'UPS EARLY A.M.';
          '54':
            ShippingServiceCode := 'UPS EXPRESS PLUS';
          '59':
            ShippingServiceCode := 'UPS 2ND DAY AIR A.M.';
          ELSE
            ERROR(Text041,FIELDCAPTION("Service Indicator"),"Service Indicator");
        END;

        BarCodeReadable :=
          'TRACKING #: ' +
          COPYSTR("External Tracking No.",1,2) + ' ' + COPYSTR("External Tracking No.",3,3) + ' ' +
          COPYSTR("External Tracking No.",6,3) + ' ' + COPYSTR("External Tracking No.",9,2) + ' ' +
          COPYSTR("External Tracking No.",11,4) + ' ' + COPYSTR("External Tracking No.",15,4);

        CASE COPYSTR("External Tracking No.",9,2) OF
          '01','25','24','A2','59','AC','66','D3','D4','85','92','96','84','28','09':
            ServiceIconText := '1';
          '32','A9','15','A0','54','G1','G5','AK','AL','AM','V1','V0','TY':
            ServiceIconText := '1+';
          '33','AA','41','A1','34','G4','G8','WW','WY','WT':
            ServiceIconText := '1+S';
          '44','47','58','A3','60','AD','69','D6','D7','Y0','Y1','Y2','Y6','Y7','Y8','Y9':
            ServiceIconText := '1 S';
          '13','30','29','A4','62','AE','86','93','97':
            ServiceIconText := '1P';
          '04','D9','DA':
            ServiceIconText := '1 P';
          'PW','PY','T0','T1','T2','T6','Y3','Y5','Y4':
            ServiceIconText := '2 S';
          '07','18','19','A5','65','AF':
            ServiceIconText := '2A';
          '02','36','35','A6','70','AG','67','DG','DH','88','94','98','87','52','11':
            ServiceIconText := '2';
          '12','40','39','A7','71','AH','89','50','16':
            ServiceIconText := '3';
          '03','43','42','A8','72','AJ','68','DK','DL','91','95','99','90','26','78':
            ServiceIconText := '';
        END;

        Shipping.GetItemLabelInfo(CurrentPackage,ItemLabelInfo);

        IF (CurrentUPSOptionPage."UPS Packaging Type" =
            CurrentUPSOptionPage."UPS Packaging Type"::"UPS Letter") AND
           ("Calculation Weight (LBS)" <= 0.5)
        THEN
          ActualWeight := 0;

        IF ActualWeight = 0 THEN
          Packageweight := ''
        ELSE
          Packageweight := STRSUBSTNO('%1',ActualWeight);

        CarrierPackingStation.TESTFIELD("UPS Label Printer Type");
        CASE CarrierPackingStation."UPS Label Printer Type" OF
          CarrierPackingStation."UPS Label Printer Type"::"Eltron Orion":
            BEGIN
              MaxiCode :=
                '[)>' + tRS + '01' + tGS + '96' +
                COPYSTR(ZIPCode,1,5) + tGS +
                ISOCountryCode + tGS +
                ClassCode + tGS +
                TrackingNo + tGS + 'UPSN' + tGS +
                "Shipping Agent Account No." + tGS + tJulDayShip + tGS + CleanStringMaxicode(ShipmentID) +
                tGS + STRSUBSTNO('%1/%2',"Package No.","Total Packages") + tGS +
                Packageweight + tGS + 'N' + tGS +
                tGS + CleanStringMaxicode(ShipToCity) + tGS +
                CleanStringMaxicode(ShipToState) + tRS + tEOT;
              IF STRLEN(MaxiCode) < 84 THEN
                MaxiCode := PADSTR(MaxiCode,84,'!');
              IF NOT "World Wide Service" AND
                 NOT "UPS Canadian Service" AND
                 NOT "UPS Puerto Rico Service"
              THEN BEGIN
                IF ActualWeight > 70 THEN
                  MaxiCode := 'H';
                DirectPrintOrionDomesticLabel(
                  CurrentPackage,FromLine,ToLine,AddressBlock,ZIPBarCode,RoutingCode,MaxiCode,
                  ShippingServiceCode,BarCodeReadable,ServiceIconText,AdditionalRouting,ItemLabelInfo,
                  CallTagLabel);
                IF CurrentUPSOptionPage."Call Tag Type" =
                  CurrentUPSOptionPage."Call Tag Type"::"Print Return Label Only"
                THEN
                  IF NOT ShippingAgentAccount."UPS Prints Return Label" THEN
                    PrintReturnLabelOrion(
                      CurrentPackage,ToLine,AddressBlock,AdditionalRouting,ShippingServiceCode,
                      BarCodeReadable);
              END ELSE BEGIN
                DirectPrintOrionIntLabel(
                  CurrentPackage,FromLine,ToLine,AddressBlock,ZIPBarCode,RoutingCode,MaxiCode,
                 ShippingServiceCode,BarCodeReadable,ServiceIconText,AdditionalRouting,ItemLabelInfo);
              END;
            END;
          CarrierPackingStation."UPS Label Printer Type"::Zebra:
            BEGIN
              IF Plus4 = '' THEN
                ZebraHPM := ClassCode + ISOCountryCode + COPYSTR(ZIPCode,1,5) + '0000'
              ELSE
                ZebraHPM := ClassCode + ISOCountryCode + COPYSTR(ZIPCode,1,5) + Plus4;
              MaxiCode :=
                '[)>_1E01_1D96' +
                TrackingNo + '_1DUPSN_1D' +
                "Shipping Agent Account No." + '_1D' + tJulDayShip + '_1D' + CleanStringMaxicode(ShipmentID) +
                '_1D' + STRSUBSTNO('%1/%2',"Package No.","Total Packages") + '_1D' +
                Packageweight + '_1D' + 'N' + '_1D' +
                '_1D' + CleanStringMaxicode(ShipToCity) + '_1D' +
                CleanStringMaxicode(ShipToState) + '_1E_04';
              IF STRLEN(MaxiCode) < 84 THEN
                MaxiCode := PADSTR(MaxiCode,84,'!');
              IF NOT "World Wide Service" AND
                 NOT "UPS Canadian Service" AND
                 NOT "UPS Puerto Rico Service"
              THEN BEGIN
                IF ActualWeight > 70 THEN
                  MaxiCode := 'H';
                DirectPrintZebraDomesticLabel(
                  CurrentPackage,FromLine,ToLine,AddressBlock,ZIPBarCode,RoutingCode,MaxiCode,
                  ShippingServiceCode,BarCodeReadable,ServiceIconText,AdditionalRouting,ItemLabelInfo,
                  CallTagLabel);
                IF CurrentUPSOptionPage."Call Tag Type" =
                  CurrentUPSOptionPage."Call Tag Type"::"Print Return Label Only"
                THEN
                  IF NOT ShippingAgentAccount."UPS Prints Return Label" THEN
                    PrintReturnLabelZebra(
                      CurrentPackage,ToLine,AddressBlock,AdditionalRouting,ShippingServiceCode,
                      BarCodeReadable);
              END ELSE BEGIN
                DirectPrintZebraIntLabel(
                  CurrentPackage,FromLine,ToLine,AddressBlock,ZIPBarCode,RoutingCode,MaxiCode,
                 ShippingServiceCode,BarCodeReadable,ServiceIconText,AdditionalRouting,ItemLabelInfo);
              END;
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE DirectPrintOrionDomesticLabel@57(CurrentPackage@1240030000 : Record 14000701;FromLine@1240030001 : ARRAY [7] OF Text[100];ToLine@1240030002 : ARRAY [7] OF Text[100];AddressBlock@1240030003 : ARRAY [7] OF Text[100];ZIPBarCode@1240030004 : Text[100];RoutingCode@1240030005 : Code[15];MaxiCode@1240030006 : Text[250];ShippingServiceCode@1240030007 : Text[100];BarCodeReadable@1240030008 : Text[100];ServiceIconText@1240030009 : Text[30];AdditionalRouting@1240030010 : ARRAY [7] OF Text[100];ItemLabelInfo@1240030011 : ARRAY [10,8] OF Text[50];CallTag@1240030012 : Boolean);
    VAR
      LabelFileName@1000000011 : Text[250];
      LabelFile@1000000012 : File;
      Quote@1000000013 : Text[3];
    BEGIN
      WITH CurrentPackage DO BEGIN
        GetShippingSetup;
        GetPackingStation;
        CarrierPackingStation.GetPackingStation(PackingStation);
        GetShippingAgent("Shipping Agent Code");
        TESTFIELD("Shipping Agent Account No.");
        GetShippingAgentAccount("Shipping Agent Account No.");
        GetShippingAgentService("Shipping Agent Code","Shipping Agent Service","World Wide Service");

        CarrierPackingStation.TESTFIELD("UPS Buffer File");
        LabelFileName := PackingStation.CalcLabelFileName(CarrierPackingStation."UPS Buffer File");
        IF EXISTS(LabelFileName) THEN
          ERASE(LabelFileName);
        LabelFile.TEXTMODE(TRUE);
        LabelFile.CREATE(LabelFileName);

        Quote := '"';

        CarrierPackingStation.TESTFIELD("UPS Eltron Label Media Type");
        IF CarrierPackingStation."UPS Eltron Label Media Type" =
           CarrierPackingStation."UPS Eltron Label Media Type"::"4X6 with Doc Tab"
        THEN BEGIN
          LabelFile.WRITE('JF');
          LabelFile.WRITE('Q1380,24');
          LabelFile.WRITE('R5,0');
          LabelFile.WRITE('q800');
          IF CarrierPackingStation."UPS Print From" =
             CarrierPackingStation."UPS Print From"::Top
          THEN
            LabelFile.WRITE('ZB')
          ELSE
            LabelFile.WRITE('ZT');
        END ELSE BEGIN
          LabelFile.WRITE('.');
          LabelFile.WRITE('Q1250,24');
          LabelFile.WRITE('q800');
          IF CarrierPackingStation."UPS Print From" =
             CarrierPackingStation."UPS Print From"::Top
          THEN
            LabelFile.WRITE('ZB')
          ELSE
            LabelFile.WRITE('ZT');
        END;
        LabelFile.WRITE('N');

        LabelFile.WRITE('A20,0,0,3,1,1,N,' + Quote + FromLine[1] + Quote);
        LabelFile.WRITE('A20,25,0,3,1,1,N,' + Quote + FromLine[2] + Quote);
        LabelFile.WRITE('A20,50,0,3,1,1,N,' + Quote + FromLine[3] + Quote);
        LabelFile.WRITE('A20,75,0,3,1,1,N,' + Quote + FromLine[4] + Quote);
        IF FromLine[5] <> '' THEN BEGIN
          LabelFile.WRITE('A20,100,0,3,1,1,N,' + Quote + FromLine[5] + Quote);
          IF FromLine[6] <> '' THEN
            LabelFile.WRITE('A20,125,0,3,1,1,N,' + Quote + FromLine[6] + Quote);
        END;

        LabelFile.WRITE('A300,0,0,3,2,2,N,' + Quote + AddressBlock[1] + Quote);
        LabelFile.WRITE('A625,0,0,3,1,2,N,' + Quote + AddressBlock[2] + Quote);

        IF NOT COD AND NOT CallTag THEN BEGIN
          IF AddressBlock[3] <> '' THEN
            LabelFile.WRITE('A500,50,0,3,1,1,N,' + Quote + AddressBlock[3] + Quote);
          IF AddressBlock[4] <> '' THEN
            LabelFile.WRITE('A500,75,0,3,1,1,N,' + Quote + AddressBlock[4] + Quote);
          IF AddressBlock[5] <> '' THEN
            LabelFile.WRITE('A500,100,0,3,1,1,N,' + Quote + AddressBlock[5] + Quote)
        END ELSE
          LabelFile.WRITE('A500,50,0,4,4,4,N,' + Quote + AddressBlock[3] + Quote);

        LabelFile.WRITE('A20,150,0,4,1,2,N,' + Quote + 'SHIP' + Quote);
        LabelFile.WRITE('A20,200,0,4,1,2,N,' + Quote + 'TO:' + Quote);
        LabelFile.WRITE('A100,150,0,3,1,2,N,' + Quote + ToLine[1] + Quote);
        LabelFile.WRITE('A100,190,0,3,1,2,N,' + Quote + ToLine[2] + Quote);
        IF ToLine[4] <> '' THEN BEGIN
          LabelFile.WRITE('A100,230,0,3,1,2,N,' + Quote + ToLine[3] + Quote);
          IF ToLine[5] <> '' THEN BEGIN
            LabelFile.WRITE('A100,270,0,3,1,2,N,' + Quote + ToLine[4] + Quote);
            IF ToLine[6] <> '' THEN BEGIN
              LabelFile.WRITE('A100,310,0,3,1,2,N,' + Quote + ToLine[5] + Quote);
              LabelFile.WRITE('A100,350,0,3,2,2,N,' + Quote + ToLine[6] + Quote);
            END ELSE
              LabelFile.WRITE('A100,310,0,3,2,2,N,' + Quote + ToLine[5] + Quote);
          END ELSE
            LabelFile.WRITE('A100,270,0,3,2,2,N,' + Quote + ToLine[4] + Quote);
        END ELSE
          LabelFile.WRITE('A100,230,0,3,2,2,N,' + Quote + ToLine[3] + Quote);

        LabelFile.WRITE('LO0,390,800,5');
        IF MaxiCode = 'H' THEN
          LabelFile.WRITE('A100,470,0,4,5,5,N,' + Quote + MaxiCode + Quote)
        ELSE
          LabelFile.WRITE('b20,400,M,' + Quote + MaxiCode + Quote);
        LabelFile.WRITE('LO250,390,5,240');
        LabelFile.WRITE('A285,410,0,3,3,3,N,' + Quote + RoutingCode + Quote);
        LabelFile.WRITE('B305,490,0,1,4,12,100,N,' + Quote + ZIPBarCode + Quote);

        LabelFile.WRITE('LO0,620,800,10');
        IF STRLEN(ShippingServiceCode) > 18 THEN BEGIN
          IF STRLEN(ShippingServiceCode) > 21 THEN
            LabelFile.WRITE('A20,640,0,3,2,2,N,' + Quote + ShippingServiceCode + Quote)
          ELSE
            LabelFile.WRITE('A20,640,0,3,2,2,N,' + Quote + ShippingServiceCode + Quote);
        END ELSE
          LabelFile.WRITE('A20,640,0,4,2,2,N,' + Quote + ShippingServiceCode + Quote);

        LabelFile.WRITE('A20,700,0,4,1,1,N,' + Quote + BarCodeReadable + Quote);
        IF STRLEN(ServiceIconText) >= 3 THEN
          LabelFile.WRITE('A600,640,0,4,4,5,N,' + Quote + ServiceIconText + Quote)
        ELSE
          IF STRLEN(ServiceIconText) > 0 THEN
            LabelFile.WRITE('A650,640,0,4,4,5,N,' + Quote + ServiceIconText + Quote)
          ELSE
            LabelFile.WRITE('LO680,630,120,130');

        LabelFile.WRITE('LO0,760,800,5');
        IF WideBarCode("External Tracking No.") THEN
          LabelFile.WRITE('B100,780,0,1,3,9,200,N,' + Quote + "External Tracking No." + Quote)
        ELSE
          LabelFile.WRITE('B75,780,0,1,4,12,200,N,' + Quote + "External Tracking No." + Quote);
        LabelFile.WRITE('LO0,1000,800,10');

        LabelFile.WRITE('A20,1020,0,3,1,1,N,' + Quote + AdditionalRouting[1] + Quote);
        IF AdditionalRouting[2] <> '' THEN
          LabelFile.WRITE('A20,1045,0,3,1,1,N,' + Quote + AdditionalRouting[2] + Quote);
        IF AdditionalRouting[3] <> '' THEN
          LabelFile.WRITE('A20,1070,0,3,1,1,N,' + Quote + AdditionalRouting[3] + Quote);
        IF AdditionalRouting[4] <> '' THEN
          LabelFile.WRITE('A20,1095,0,3,1,1,N,' + Quote + AdditionalRouting[4] + Quote);
        IF AdditionalRouting[5] <> '' THEN
          LabelFile.WRITE('A20,1120,0,3,1,1,N,' + Quote + AdditionalRouting[5] + Quote);
        ShippingSetup.TESTFIELD("UPS Routing Version");
        LabelFile.WRITE(
          'A400,1190,0,2,1,1,N,' + (Quote + 'NAV 3.15 ELTRON ' +
          ShippingSetup."UPS Routing Version" + Quote));
        IF CarrierPackingStation."UPS Add Item Info. on Label" THEN
          Shipping.DirectPrintOrionLabelInfo(LabelFile,ItemLabelInfo);

        LabelFile.WRITE('P1');
        LabelFile.WRITE('.');
        LabelFile.CLOSE;

        IF NOT EXISTS(LabelFileName) THEN
          REPEAT
          UNTIL EXISTS(LabelFileName);
        InsertLabelFile(
          LabelFileName,Text019,11,
          CarrierPackingStation."UPS Label Printer Port",PackingStation.Code,
          NOT PackingStation."No Label Printer",PackingStation."Do Not Import Label File");
        PackingStation.PrintLabelFile(
          LabelFileName,CarrierPackingStation."UPS Label Printer Port",
          PackingStation."No Label Printer",PackingStation."Auto Delete Label Buffer File");
      END;
    END;

    LOCAL PROCEDURE DirectPrintOrionIntLabel@23(CurrentPackage@1240030000 : Record 14000701;FromLine@1240030001 : ARRAY [7] OF Text[100];ToLine@1240030002 : ARRAY [7] OF Text[100];AddressBlock@1240030003 : ARRAY [7] OF Text[100];ZIPBarCode@1240030004 : Text[100];RoutingCode@1240030005 : Code[15];MaxiCode@1240030006 : Text[250];ShippingServiceCode@1240030007 : Text[100];BarCodeReadable@1240030008 : Text[100];ServiceIconText@1240030009 : Text[30];AdditionalRouting@1240030010 : ARRAY [7] OF Text[100];ItemLabelInfo@1240030011 : ARRAY [10,8] OF Text[50]);
    VAR
      LabelFileName@1000000011 : Text[250];
      LabelFile@1000000012 : File;
      Quote@1000000013 : Text[3];
    BEGIN
      WITH CurrentPackage DO BEGIN
        GetShippingSetup;
        GetPackingStation;
        CarrierPackingStation.GetPackingStation(PackingStation);
        GetShippingAgent("Shipping Agent Code");
        TESTFIELD("Shipping Agent Account No.");
        GetShippingAgentAccount("Shipping Agent Account No.");
        GetShippingAgentService("Shipping Agent Code","Shipping Agent Service","World Wide Service");

        CarrierPackingStation.TESTFIELD("UPS Buffer File");
        LabelFileName := PackingStation.CalcLabelFileName(CarrierPackingStation."UPS Buffer File");
        IF EXISTS(LabelFileName) THEN
          ERASE(LabelFileName);
        LabelFile.TEXTMODE(TRUE);
        LabelFile.CREATE(LabelFileName);

        Quote := '"';

        CarrierPackingStation.TESTFIELD("UPS Eltron Label Media Type");
        IF CarrierPackingStation."UPS Eltron Label Media Type" =
           CarrierPackingStation."UPS Eltron Label Media Type"::"4X6 with Doc Tab"
        THEN BEGIN
          LabelFile.WRITE('JF');
          LabelFile.WRITE('Q1380,24');
          LabelFile.WRITE('R5,0');
          LabelFile.WRITE('q800');
          IF CarrierPackingStation."UPS Print From" =
             CarrierPackingStation."UPS Print From"::Top
          THEN
            LabelFile.WRITE('ZB')
          ELSE
            LabelFile.WRITE('ZT');
        END ELSE BEGIN
          LabelFile.WRITE('.');
          LabelFile.WRITE('Q1250,24');
          LabelFile.WRITE('q800');
          IF CarrierPackingStation."UPS Print From" =
             CarrierPackingStation."UPS Print From"::Top
          THEN
            LabelFile.WRITE('ZB')
          ELSE
            LabelFile.WRITE('ZT');
        END;
        LabelFile.WRITE('N');

        LabelFile.WRITE('A20,0,0,3,1,1,N,' + Quote + FromLine[1] + Quote);
        LabelFile.WRITE('A20,25,0,3,1,1,N,' + Quote + FromLine[2] + Quote);
        LabelFile.WRITE('A20,50,0,3,1,1,N,' + Quote + FromLine[3] + Quote);
        LabelFile.WRITE('A20,75,0,3,1,1,N,' + Quote + FromLine[4] + Quote);
        IF FromLine[5] <> '' THEN BEGIN
          LabelFile.WRITE('A20,100,0,3,1,1,N,' + Quote + FromLine[5] + Quote);
          IF FromLine[6] <> '' THEN BEGIN
            LabelFile.WRITE('A20,125,0,3,1,1,N,' + Quote + FromLine[6] + Quote);
            IF FromLine[7] <> '' THEN
              LabelFile.WRITE('A20,150,0,3,1,1,N,' + Quote + FromLine[7] + Quote);
          END;
        END;

        LabelFile.WRITE('A300,0,0,3,2,2,N,' + Quote + AddressBlock[1] + Quote);
        LabelFile.WRITE('A625,0,0,3,1,2,N,' + Quote + AddressBlock[2] + Quote);

        IF NOT COD THEN BEGIN
          LabelFile.WRITE('A500,50,0,3,1,1,N,' + Quote + AddressBlock[3] + Quote);
          LabelFile.WRITE('A500,75,0,3,1,1,N,' + Quote + AddressBlock[4] + Quote);

          IF AddressBlock[5] <> ''THEN
            LabelFile.WRITE('A500,100,0,3,1,1,N,' + Quote + AddressBlock[5] + Quote);
          IF AddressBlock[6] <> ''THEN
            LabelFile.WRITE('A500,125,0,3,1,1,N,' + Quote + AddressBlock[6] + Quote);
        END ELSE
          LabelFile.WRITE('A500,50,0,4,4,4,N,' + Quote + AddressBlock[3] + Quote);

        LabelFile.WRITE('A20,180,0,4,1,2,N,' + Quote + 'SHIP' + Quote);
        LabelFile.WRITE('A20,230,0,4,1,2,N,' + Quote + 'TO:' + Quote);
        LabelFile.WRITE('A100,180,0,3,1,2,N,' + Quote + ToLine[1] + Quote);
        LabelFile.WRITE('A100,220,0,3,1,2,N,' + Quote + ToLine[2] + Quote);
        LabelFile.WRITE('A100,260,0,3,1,2,N,' + Quote + ToLine[3] + Quote);
        IF ToLine[6] <> '' THEN BEGIN
          LabelFile.WRITE('A100,300,0,3,1,2,N,' + Quote + ToLine[4] + Quote);
          IF ToLine[7] <> '' THEN BEGIN
            LabelFile.WRITE('A100,340,0,3,1,2,N,' + Quote + ToLine[5] + Quote);
            LabelFile.WRITE('A100,380,0,3,1,2,N,' + Quote + ToLine[6] + Quote);
            LabelFile.WRITE('A100,420,0,3,2,2,N,' + Quote + ToLine[7] + Quote);
          END ELSE BEGIN
            LabelFile.WRITE('A100,340,0,3,1,2,N,' + Quote + ToLine[5] + Quote);
            LabelFile.WRITE('A100,380,0,3,2,2,N,' + Quote + ToLine[6] + Quote);
          END;
        END ELSE BEGIN
          LabelFile.WRITE('A100,300,0,3,1,2,N,' + Quote + ToLine[4] + Quote);
          LabelFile.WRITE('A100,340,0,3,2,2,N,' + Quote + ToLine[5] + Quote);
        END;

        LabelFile.WRITE('LO0,460,800,5');
        LabelFile.WRITE('b20,470,M,' + Quote + MaxiCode + Quote);
        LabelFile.WRITE('LO250,460,5,240');
        LabelFile.WRITE('A285,480,0,3,3,3,N,' + Quote + RoutingCode + Quote);
        LabelFile.WRITE('B305,560,0,1,3,9,100,N,' + Quote + ZIPBarCode + Quote);

        LabelFile.WRITE('LO0,690,800,10');

        IF STRLEN(ShippingServiceCode) > 19 THEN BEGIN
          IF STRLEN(ShippingServiceCode) > 21 THEN
            LabelFile.WRITE('A20,710,0,3,2,2,N,' + Quote + ShippingServiceCode + Quote)
          ELSE
            LabelFile.WRITE('A20,710,0,3,2,2,N,' + Quote + ShippingServiceCode + Quote);
        END ELSE
          LabelFile.WRITE('A20,710,0,4,2,2,N,' + Quote + ShippingServiceCode + Quote);

        LabelFile.WRITE('A20,780,0,4,1,1,N,' + Quote + BarCodeReadable + Quote);
        IF STRLEN(ServiceIconText) >= 3 THEN
          LabelFile.WRITE('A600,710,0,4,4,5,N,' + Quote + ServiceIconText + Quote)
        ELSE
          IF STRLEN(ServiceIconText) > 0 THEN
            LabelFile.WRITE('A650,710,0,4,4,5,N,' + Quote + ServiceIconText + Quote)
          ELSE
            LabelFile.WRITE('LO680,700,120,130');

        LabelFile.WRITE('LO0,830,800,5');
        IF WideBarCode("External Tracking No.") THEN
          LabelFile.WRITE('B100,850,0,1,3,9,200,N,' + Quote + "External Tracking No." + Quote)
        ELSE
          LabelFile.WRITE('B75,850,0,1,4,12,200,N,' + Quote + "External Tracking No." + Quote);
        LabelFile.WRITE('LO0,1070,800,10');

        LabelFile.WRITE('A20,1090,0,3,1,1,N,' + Quote + AdditionalRouting[1] + Quote);
        LabelFile.WRITE('A20,1115,0,3,1,1,N,' + Quote + AdditionalRouting[2] + Quote);
        LabelFile.WRITE('A550,1090,0,4,2,2,N,' + Quote + AdditionalRouting[3] + Quote);
        IF AdditionalRouting[4] <> '' THEN
          LabelFile.WRITE('A550,1140,0,3,1,1,N,' + Quote + AdditionalRouting[4] + Quote);
        LabelFile.WRITE('A20,1165,0,3,1,1,N,' + Quote + AdditionalRouting[5] + Quote);
        IF AdditionalRouting[6] <> '' THEN
          LabelFile.WRITE('A20,1140,0,3,1,1,N,' + Quote + AdditionalRouting[6] + Quote);
        IF AdditionalRouting[7] <> '' THEN
          LabelFile.WRITE('A550,1160,0,3,1,1,N,' + Quote + AdditionalRouting[7] + Quote);

        ShippingSetup.TESTFIELD("UPS Routing Version");
        LabelFile.WRITE(
          'A400,1190,0,2,1,1,N,' +
          (Quote + 'NAV 3.15 ELTRON ' + ShippingSetup."UPS Routing Version" + Quote));
        IF CarrierPackingStation."UPS Add Item Info. on Label" THEN
          Shipping.DirectPrintOrionLabelInfo(LabelFile,ItemLabelInfo);

        LabelFile.WRITE('P1');
        LabelFile.WRITE('.');
        LabelFile.CLOSE;

        IF NOT EXISTS(LabelFileName) THEN
          REPEAT
          UNTIL EXISTS(LabelFileName);
        InsertLabelFile(
          LabelFileName,Text019,11,
          CarrierPackingStation."UPS Label Printer Port",PackingStation.Code,
          NOT PackingStation."No Label Printer",PackingStation."Do Not Import Label File");
        PackingStation.PrintLabelFile(
          LabelFileName,CarrierPackingStation."UPS Label Printer Port",
          PackingStation."No Label Printer",PackingStation."Auto Delete Label Buffer File");
      END;
    END;

    PROCEDURE PrintReturnLabelOrion@27(CurrentPackage@1240030000 : Record 14000701;ToLine@1240030001 : ARRAY [7] OF Text[100];AddressBlock@1240030002 : ARRAY [7] OF Text[100];AdditionalRouting@1240030003 : ARRAY [7] OF Text[100];ShippingServiceCode@1240030004 : Text[100];TrackingNo@1240030005 : Text[100]);
    VAR
      LabelFileName@1240030006 : Text[250];
      LabelFile@1240030007 : File;
      Quote@1240030008 : Text[3];
    BEGIN
      CarrierPackingStation.TESTFIELD("UPS Buffer File");
      LabelFileName := PackingStation.CalcLabelFileName(CarrierPackingStation."UPS Buffer File");
      IF EXISTS(LabelFileName) THEN
        ERASE(LabelFileName);
        LabelFile.TEXTMODE(TRUE);
        LabelFile.CREATE(LabelFileName);
      Quote := '"';
      IF CarrierPackingStation."UPS Eltron Label Media Type" =
         CarrierPackingStation."UPS Eltron Label Media Type"::"4X6 with Doc Tab"
      THEN BEGIN
        LabelFile.WRITE('JF');
        LabelFile.WRITE('Q1380,24');
        LabelFile.WRITE('R5,0');
        LabelFile.WRITE('q800');
        IF CarrierPackingStation."UPS Print From" =
           CarrierPackingStation."UPS Print From"::Top
        THEN
          LabelFile.WRITE('ZB')
        ELSE
          LabelFile.WRITE('ZT');
      END ELSE BEGIN
        LabelFile.WRITE('.');
        LabelFile.WRITE('Q1250,24');
        LabelFile.WRITE('q800');
        IF CarrierPackingStation."UPS Print From" =
           CarrierPackingStation."UPS Print From"::Top
        THEN
          LabelFile.WRITE('ZB')
        ELSE
          LabelFile.WRITE('ZT');
      END;
      LabelFile.WRITE('N');

      LabelFile.WRITE('A10,20,0,2,2,2,N,' + Quote + FORMAT(CurrentPackage."Package No.") + ' OF ' +
        FORMAT(CurrentPackage."Total Packages") + Quote);
      LabelFile.WRITE('A290,10,0,4,1,1,N,' + Quote + 'RETURN SERVICE' + Quote);
      LabelFile.WRITE('A275,40,0,4,1,1,N,' + Quote + 'CUSTOMER RECEIPT' + Quote);
      LabelFile.WRITE('A10,125,0,3,1,1,N,' + Quote + 'SHIP TO:' + Quote);

      LabelFile.WRITE('A10,150,0,3,1,1,N,' + Quote + ToLine[1] + Quote);
      LabelFile.WRITE('A10,175,0,3,1,1,N,' + Quote + ToLine[2] + Quote);
      LabelFile.WRITE('A10,200,0,3,1,1,N,' + Quote + ToLine[3] + Quote);
      LabelFile.WRITE('A10,225,0,3,1,1,N,' + Quote + ToLine[4] + Quote);
      IF ToLine[5] <> '' THEN BEGIN
        LabelFile.WRITE('A10,250,0,3,1,1,N,,' + Quote + ToLine[5] + Quote);
        IF ToLine[6] <> '' THEN
          LabelFile.WRITE('A10,275,0,3,1,1,N,,' + Quote + ToLine[6] + Quote);
      END;

      LabelFile.WRITE('LO500,100,230,3');
      LabelFile.WRITE('LO500,100,3,90');
      LabelFile.WRITE('LO500,140,230,3');
      LabelFile.WRITE('LO730,100,3,93');
      LabelFile.WRITE('LO500,190,230,3');
      LabelFile.WRITE('A520,115,0,2,1,1,N,"DATE OF SHIPMENT"');
      LabelFile.WRITE('A550,220,0,2,1,1,N,"CUSTOMER SERVICE"');
      LabelFile.WRITE('A550,245,0,2,1,1,N,"1-800-PICK-UPS"');
      LabelFile.WRITE('LO0,295,790,3');
      LabelFile.WRITE(
        'A10,330,0,3,1,1,N,"PACKAGE CONTENTS : ' + CurrentPackage.Description + Quote);
      LabelFile.WRITE('LO0,370,790,3');
      LabelFile.WRITE('A10,400,0,3,1,1,N,' + Quote + AdditionalRouting[5] + Quote);
      LabelFile.WRITE('A10,425,0,3,1,1,N,' + Quote + AdditionalRouting[6] + Quote);
      LabelFile.WRITE('LO0,457,790,3');
      LabelFile.WRITE(
        'A10,717,0,3,1,1,N,"Important Notice to Anyone Handling Over Goods to UPS"');
      LabelFile.WRITE(
        'A5,790,0,1,1,1,N,"This document is a receipt only and you are named on the attached"');
      LabelFile.WRITE(
        'A5,810,0,1,1,1,N,"label/document exclusively for indentification purposes.  The contract of"');
      LabelFile.WRITE(
        'A5,830,0,1,1,1,N,"carriage is between UPS and its customer.  There is no contract between you"');
      LabelFile.WRITE(
        'A5,850,0,1,1,1,N,"and UPS.  By handing over the goods to UPS, you agree that UPS collects the"');
      LabelFile.WRITE(
        'A5,870,0,1,1,1,N,"goods on behalf of its customer and accepts no liability whatsoever to you"');
      LabelFile.WRITE(
        'A5,890,0,1,1,1,N,"or anyone other than its customer for any loss or delay of or damage to the"');
      LabelFile.WRITE(
        'A5,955,0,3,1,1,N,"This receipt is to retained by the customer"');
      LabelFile.WRITE('A5,980,0,3,1,1,N,"returning the merchandise."');
      LabelFile.WRITE('LO0,1005,790,3');
      LabelFile.WRITE('A10,1025,0,3,1,1,N,' + Quote + ShippingServiceCode + Quote);
      LabelFile.WRITE('A300,1025,0,3,1,1,N,' + Quote + TrackingNo + Quote);
      LabelFile.WRITE('P1');
      LabelFile.WRITE('.');
      LabelFile.CLOSE;

      IF NOT EXISTS(LabelFileName) THEN
        REPEAT
        UNTIL EXISTS(LabelFileName);
      CurrentPackage.InsertLabelFile(
        LabelFileName,Text020,11,
        CarrierPackingStation."UPS Label Printer Port",PackingStation.Code,
        NOT PackingStation."No Label Printer",PackingStation."Do Not Import Label File");
      PackingStation.PrintLabelFile(
        LabelFileName,CarrierPackingStation."UPS Label Printer Port",
        PackingStation."No Label Printer",PackingStation."Auto Delete Label Buffer File");
    END;

    LOCAL PROCEDURE DirectPrintZebraDomesticLabel@33(CurrentPackage@1240030000 : Record 14000701;FromLine@1240030001 : ARRAY [7] OF Text[100];ToLine@1240030002 : ARRAY [7] OF Text[100];AddressBlock@1240030003 : ARRAY [7] OF Text[100];ZIPBarCode@1240030004 : Text[100];RoutingCode@1240030005 : Code[15];MaxiCode@1240030006 : Text[250];ShippingServiceCode@1240030007 : Text[100];BarCodeReadable@1240030008 : Text[100];ServiceIconText@1240030009 : Text[30];AdditionalRouting@1240030010 : ARRAY [7] OF Text[100];ItemLabelInfo@1240030011 : ARRAY [10,8] OF Text[50];CallTag@1240030012 : Boolean);
    VAR
      LabelFileName@1000000011 : Text[250];
      LabelFile@1000000012 : File;
    BEGIN
      WITH CurrentPackage DO BEGIN
        GetShippingSetup;
        GetPackingStation;
        CarrierPackingStation.GetPackingStation(PackingStation);
        GetShippingAgent("Shipping Agent Code");
        TESTFIELD("Shipping Agent Account No.");
        GetShippingAgentAccount("Shipping Agent Account No.");
        GetShippingAgentService("Shipping Agent Code","Shipping Agent Service","World Wide Service");

        CarrierPackingStation.TESTFIELD("UPS Buffer File");
        LabelFileName := PackingStation.CalcLabelFileName(CarrierPackingStation."UPS Buffer File");
        IF EXISTS(LabelFileName) THEN
          ERASE(LabelFileName);
        LabelFile.TEXTMODE(TRUE);
        LabelFile.CREATE(LabelFileName);
        LabelFile.WRITE('^XA');
        CarrierPackingStation.TESTFIELD("UPS Eltron Label Media Type");
        IF CarrierPackingStation."UPS Eltron Label Media Type" =
           CarrierPackingStation."UPS Eltron Label Media Type"::"4X6 with Doc Tab"
        THEN
          LabelFile.WRITE('^LL1380')
        ELSE
          LabelFile.WRITE('^LL1250');
        IF CarrierPackingStation."UPS Print From" =
           CarrierPackingStation."UPS Print From"::Bottom
        THEN
          LabelFile.WRITE('^POI')
        ELSE
          LabelFile.WRITE('^PON');

        LabelFile.WRITE('^FO20,10^A0,25,25^FD' + FromLine[1] + '^FS');
        LabelFile.WRITE('^FO20,35^A0,25,25^FD' + FromLine[2] + '^FS');
        LabelFile.WRITE('^FO20,60^A0,25,25^FD' + FromLine[3] + '^FS');
        LabelFile.WRITE('^FO20,85^A0,25,25^FD' + FromLine[4] + '^FS');
        IF FromLine[5] <> '' THEN BEGIN
          LabelFile.WRITE('^FO20,110^A0,25,25^FD' + FromLine[5] + '^FS');
          IF FromLine[6] <> '' THEN
            LabelFile.WRITE('^FO20,135^A0,25,25^FD' + FromLine[6] + '^FS');
        END;

        LabelFile.WRITE('^FO375,10^A0,45,45^FD' + AddressBlock[1] + '^FS');
        LabelFile.WRITE('^FO625,10^A0,35,35^FD' + AddressBlock[2] + '^FS');

        IF NOT COD AND NOT CallTag THEN BEGIN
          IF AddressBlock[3] <> '' THEN
            LabelFile.WRITE('^FO500,60^A0,25,25^FD' + AddressBlock[3] + '^FS');
          IF AddressBlock[4] <> '' THEN
            LabelFile.WRITE('^FO500,85^A0,25,25^FD' + AddressBlock[4] + '^FS');
          IF AddressBlock[5] <> '' THEN
            LabelFile.WRITE('^FO500,110^A0,25,25^FD' + AddressBlock[5] + '^FS')
        END ELSE
          LabelFile.WRITE('^FO500,60^A0,85,85^FD' + AddressBlock[3] + '^FS');

        LabelFile.WRITE('^FO20,160^A0,40,40^FDSHIP^FS');
        LabelFile.WRITE('^FO20,210^A0,40,40^FDTO:^FS');
        LabelFile.WRITE('^FO120,160^A0,35,35^FD' + ToLine[1] + '^FS');
        LabelFile.WRITE('^FO120,200^A0,35,35^FD' + ToLine[2] + '^FS');
        IF ToLine[4] <> '' THEN BEGIN
          LabelFile.WRITE('^FO120,240^A0,35,35^FD' + ToLine[3] + '^FS');
          IF ToLine[5] <> '' THEN BEGIN
            LabelFile.WRITE('^FO120,280^A0,35,35^FD' + ToLine[4] + '^FS');
            IF ToLine[6] <> '' THEN BEGIN
              LabelFile.WRITE('^FO120,320^A0,35,35^FD' + ToLine[5] + '^FS');
              LabelFile.WRITE('^FO120,360^A0,45,45^FD' + ToLine[6] + '^FS');
            END ELSE
              LabelFile.WRITE('^FO120,320^A0,45,45^FD' + ToLine[5] + '^FS');
          END ELSE
            LabelFile.WRITE('^FO120,280^A0,45,45^FD' + ToLine[4] + '^FS');
        END ELSE
          LabelFile.WRITE('^FO120,240^A0,45,45^FD' + ToLine[3] + '^FS');

        LabelFile.WRITE('^FO0,400^GB800,0,3^FS');
        IF MaxiCode = 'H' THEN
          LabelFile.WRITE('^FO70,440^A0,200,200^FD' + MaxiCode + '^FS')
        ELSE
          LabelFile.WRITE('^FO20,420^BD2^FH^FD' + ZebraHPM + MaxiCode + '^FS');

        LabelFile.WRITE('^FO240,400^GB0,240,5^FS');
        LabelFile.WRITE('^FO285,420^A0,85,85^FD' + RoutingCode + '^FS');
        LabelFile.WRITE('^FO300,500^BY4,3,100^BCN,100,N,N,N,A^FD' + ZIPBarCode + '^FS');

        LabelFile.WRITE('^FO0,640^GB800,0,10^FS');
        IF STRLEN(ShippingServiceCode) > 21 THEN
          LabelFile.WRITE('^FO20,660^A0,45,45^FD' + ShippingServiceCode + '^FS')
        ELSE
          LabelFile.WRITE('^FO20,660^A0,60,60^FD' + ShippingServiceCode + '^FS');

        LabelFile.WRITE('^FO20,740^A0,30,30^FD' + BarCodeReadable + '^FS');
        IF STRLEN(ServiceIconText) >= 3 THEN
          LabelFile.WRITE('^FO600,660^A0,115,115^FD' + ServiceIconText + '^FS')
        ELSE
          IF STRLEN(ServiceIconText) > 0 THEN
            LabelFile.WRITE('^FO650,660^A0,115,115^FD' + ServiceIconText + '^FS')
          ELSE
            LabelFile.WRITE('^FO680,650^GB120,120,100^FS');

        LabelFile.WRITE('^FO0,770^GB800,0,5^FS');
        IF WideBarCode("External Tracking No.") THEN
          LabelFile.WRITE('^FO50,790^BY4,3,200^BCN,200,N,N,N,A^FD' + "External Tracking No." + '^FS')
        ELSE
          LabelFile.WRITE('^FO75,790^BY4,3,200^BCN,200,N,N,N,A^FD' + "External Tracking No." + '^FS');
        LabelFile.WRITE('^FO0,1010^GB800,0,10^FS');

        LabelFile.WRITE('^FO20,1030^A0,30,30^FD' + AdditionalRouting[1] + '^FS');
        IF AdditionalRouting[2] <> '' THEN
          LabelFile.WRITE('^FO20,1055^A0,30,30^FD' + AdditionalRouting[2] + '^FS');
        IF AdditionalRouting[3] <> '' THEN
          LabelFile.WRITE('^FO20,1080^A0,30,30^FD' + AdditionalRouting[3] + '^FS');
        IF AdditionalRouting[4] <> '' THEN
          LabelFile.WRITE('^FO20,1105^A0,30,30^FD' + AdditionalRouting[4] + '^FS');
        IF AdditionalRouting[5] <> '' THEN
          LabelFile.WRITE('^FO20,1130^A0,30,30^FD' + AdditionalRouting[5] + '^FS');

        ShippingSetup.TESTFIELD("UPS Routing Version");
        LabelFile.WRITE('^FO400,1190^A0,20,20^FDSE0.19 ZEB105SE ' + ShippingSetup."UPS Routing Version" + '^FS');
        IF CarrierPackingStation."UPS Add Item Info. on Label" THEN
          Shipping.DirectPrintZebraLabelInfo(LabelFile,ItemLabelInfo);

        LabelFile.WRITE('^XZ');
        LabelFile.CLOSE;

        IF NOT EXISTS(LabelFileName) THEN
          REPEAT
          UNTIL EXISTS(LabelFileName);
        InsertLabelFile(
          LabelFileName,Text019,11,
          CarrierPackingStation."UPS Label Printer Port",PackingStation.Code,
          NOT PackingStation."No Label Printer",PackingStation."Do Not Import Label File");
        PackingStation.PrintLabelFile(
          LabelFileName,CarrierPackingStation."UPS Label Printer Port",
          PackingStation."No Label Printer",PackingStation."Auto Delete Label Buffer File");
      END;
    END;

    LOCAL PROCEDURE DirectPrintZebraIntLabel@26(CurrentPackage@1240030000 : Record 14000701;FromLine@1240030001 : ARRAY [7] OF Text[100];ToLine@1240030002 : ARRAY [7] OF Text[100];AddressBlock@1240030003 : ARRAY [7] OF Text[100];ZIPBarCode@1240030004 : Text[100];RoutingCode@1240030005 : Code[15];MaxiCode@1240030006 : Text[250];ShippingServiceCode@1240030007 : Text[100];BarCodeReadable@1240030008 : Text[100];ServiceIconText@1240030009 : Text[30];AdditionalRouting@1240030010 : ARRAY [7] OF Text[100];ItemLabelInfo@1240030011 : ARRAY [10,8] OF Text[50]);
    VAR
      LabelFileName@1000000011 : Text[250];
      LabelFile@1000000012 : File;
    BEGIN
      WITH CurrentPackage DO BEGIN
        GetShippingSetup;
        GetPackingStation;
        CarrierPackingStation.GetPackingStation(PackingStation);
        GetShippingAgent("Shipping Agent Code");
        TESTFIELD("Shipping Agent Account No.");
        GetShippingAgentAccount("Shipping Agent Account No.");
        GetShippingAgentService("Shipping Agent Code","Shipping Agent Service","World Wide Service");

        CarrierPackingStation.TESTFIELD("UPS Buffer File");
        LabelFileName := PackingStation.CalcLabelFileName(CarrierPackingStation."UPS Buffer File");
        IF EXISTS(LabelFileName) THEN
          ERASE(LabelFileName);
        LabelFile.TEXTMODE(TRUE);
        LabelFile.CREATE(LabelFileName);

        LabelFile.WRITE('^XA');
        CarrierPackingStation.TESTFIELD("UPS Eltron Label Media Type");
        IF CarrierPackingStation."UPS Eltron Label Media Type" =
           CarrierPackingStation."UPS Eltron Label Media Type"::"4X6 with Doc Tab"
        THEN
          LabelFile.WRITE('^LL1380')
        ELSE
          LabelFile.WRITE('^LL1250');
        IF CarrierPackingStation."UPS Print From" =
           CarrierPackingStation."UPS Print From"::Bottom
        THEN
          LabelFile.WRITE('^POI')
        ELSE
          LabelFile.WRITE('^PON');

        LabelFile.WRITE('^FO20,10^A0,25,25^FD' + FromLine[1] + '^FS');
        LabelFile.WRITE('^FO20,35^A0,25,25^FD' + FromLine[2] + '^FS');
        LabelFile.WRITE('^FO20,60^A0,25,25^FD' + FromLine[3] + '^FS');
        LabelFile.WRITE('^FO20,85^A0,25,25^FD' + FromLine[4] + '^FS');
        IF FromLine[5] <> '' THEN BEGIN
          LabelFile.WRITE('^FO20,110^A0,25,25^FD' + FromLine[5] + '^FS');
          IF FromLine[6] <> '' THEN
            LabelFile.WRITE('^FO20,135^A0,25,25^FD' + FromLine[6] + '^FS');
            IF FromLine[7] <> '' THEN
              LabelFile.WRITE('^FO20,160^A0,25,25^FD' + FromLine[7] + '^FS');
        END;

        LabelFile.WRITE('^FO375,10^A0,45,45^FD' + AddressBlock[1] + '^FS');
        LabelFile.WRITE('^FO625,10^A0,35,35^FD' + AddressBlock[2] + '^FS');

        IF NOT COD THEN BEGIN
          LabelFile.WRITE('^FO500,60^A0,25,25^FD' + AddressBlock[3] + '^FS');
          LabelFile.WRITE('^FO500,85^A0,25,25^FD' + AddressBlock[4] + '^FS');

          IF AddressBlock[5] <> ''THEN
            LabelFile.WRITE('^FO500,110^A0,25,25^FD' + AddressBlock[5] + '^FS');
          IF AddressBlock[6] <> ''THEN
            LabelFile.WRITE('^FO500,135^A0,25,25^FD' + AddressBlock[6] + '^FS');
        END ELSE
          LabelFile.WRITE('^FO500,60^A0,85,85^FD' + AddressBlock[3] + '^FS');

        LabelFile.WRITE('^FO20,190^A0,40,40^FDSHIP^FS');
        LabelFile.WRITE('^FO20,240^A0,40,40^FDTO:^FS');
        LabelFile.WRITE('^FO100,190^A0,35,35^FD' + ToLine[1] + '^FS');
        LabelFile.WRITE('^FO100,230^A0,35,35^FD' + ToLine[2] + '^FS');
        LabelFile.WRITE('^FO100,270^A0,35,35^FD' + ToLine[3] + '^FS');
        IF ToLine[6] <> '' THEN BEGIN
          LabelFile.WRITE('^FO100,310^A0,35,35^FD' + ToLine[4] + '^FS');
          IF ToLine[7] <> '' THEN BEGIN
            LabelFile.WRITE('^FO100,350^A0,35,35^FD' + ToLine[5] + '^FS');
            LabelFile.WRITE('^FO100,390^A0,35,35^FD' + ToLine[6] + '^FS');
            LabelFile.WRITE('^FO100,430^A0,45,45^FD' + ToLine[7] + '^FS');
          END ELSE BEGIN
            LabelFile.WRITE('^FO100,350^A0,35,35^FD' + ToLine[5] + '^FS');
            LabelFile.WRITE('^FO100,390^A0,45,45^FD' + ToLine[6] + '^FS');
          END;
        END ELSE BEGIN
          LabelFile.WRITE('^FO100,310^A0,35,35^FD' + ToLine[4] + '^FS');
          LabelFile.WRITE('^FO100,350^A0,45,45^FD' + ToLine[5] + '^FS');
        END;

        LabelFile.WRITE('^FO0,470^GB800,0,3^FS');
        LabelFile.WRITE('^FO20,490^BD3^FH^FD' + ZebraHPM + MaxiCode + '^FS');
        LabelFile.WRITE('^FO240,470^GB0,240,5^FS');

        LabelFile.WRITE('^FO285,490^A0,85,85^FD' + RoutingCode + '^FS');
        LabelFile.WRITE('^FO300,570^BY3,3,100^BCN,100,N,N,N,A^FD'+ ZIPBarCode + '^FS');

        LabelFile.WRITE('^FO0,710^GB800,0,10^FS');

        IF STRLEN(ShippingServiceCode) > 21 THEN
          LabelFile.WRITE('^FO20,730^A0,45,45^FD' + ShippingServiceCode + '^FS')
        ELSE
          LabelFile.WRITE('^FO20,730^A0,60,60^FD' + ShippingServiceCode + '^FS');

        LabelFile.WRITE('^FO20,810^A0,30,30^FD' + BarCodeReadable + '^FS');
        IF STRLEN(ServiceIconText) >= 3 THEN
          LabelFile.WRITE('^FO600,730^A0,115,115^FD' + ServiceIconText + '^FS')
        ELSE
          IF STRLEN(ServiceIconText) > 0 THEN
            LabelFile.WRITE('^FO650,730^A0,115,115^FD' + ServiceIconText + '^FS')
          ELSE
            LabelFile.WRITE('^FO680,720^GB120,120,100^FS');

        LabelFile.WRITE('^FO0,840^GB800,0,5^FS');
        IF WideBarCode("External Tracking No.") THEN
          LabelFile.WRITE('^FO50,860^BY4,3,200^BCN,200,N,N,N,A^FD' + "External Tracking No." + '^FS')
        ELSE
          LabelFile.WRITE('^FO75,860^BY4,3,200^BCN,200,N,N,N,A^FD' + "External Tracking No." + '^FS');
        LabelFile.WRITE('^FO0,1080^GB800,0,10^FS');

        LabelFile.WRITE('^FO20,1100^A0,30,30^FD' + AdditionalRouting[1] + '^FS');
        LabelFile.WRITE('^FO20,1125^A0,30,30^FD' + AdditionalRouting[2] + '^FS');
        LabelFile.WRITE('^FO550,1100^A0,60,60^FD' + AdditionalRouting[3] + '^FS');
        IF AdditionalRouting[4] <> '' THEN
          LabelFile.WRITE('^FO550,1150^A0,30,30^FD' + AdditionalRouting[4] + '^FS');
        LabelFile.WRITE('^FO20,1175^A0,30,30^FD' + AdditionalRouting[5] + '^FS');
        IF AdditionalRouting[6] <> '' THEN
          LabelFile.WRITE('^FO20,1150^A0,30,30^FD' + AdditionalRouting[6] + '^FS');

        ShippingSetup.TESTFIELD("UPS Routing Version");
        LabelFile.WRITE('^FO400,1190^A0,20,20^FDSE0.19 ZEB105SE ' + ShippingSetup."UPS Routing Version" + '^FS');

        IF CarrierPackingStation."UPS Add Item Info. on Label" THEN
          Shipping.DirectPrintZebraLabelInfo(LabelFile,ItemLabelInfo);

        LabelFile.WRITE('^XZ');
        LabelFile.CLOSE;

        IF NOT EXISTS(LabelFileName) THEN
          REPEAT
          UNTIL EXISTS(LabelFileName);
        InsertLabelFile(
          LabelFileName,Text019,11,
          CarrierPackingStation."UPS Label Printer Port",PackingStation.Code,
          NOT PackingStation."No Label Printer",PackingStation."Do Not Import Label File");
        PackingStation.PrintLabelFile(
          LabelFileName,CarrierPackingStation."UPS Label Printer Port",
          PackingStation."No Label Printer",PackingStation."Auto Delete Label Buffer File");
      END;
    END;

    PROCEDURE PrintReturnLabelZebra@32(CurrentPackage@1240030000 : Record 14000701;ToLine@1240030001 : ARRAY [7] OF Text[100];AddressBlock@1240030002 : ARRAY [7] OF Text[100];AdditionalRouting@1240030003 : ARRAY [7] OF Text[100];ShippingServiceCode@1240030004 : Text[100];TrackingNo@1240030005 : Text[100]);
    VAR
      LabelFileName@1240030006 : Text[250];
      LabelFile@1240030007 : File;
    BEGIN
      CarrierPackingStation.TESTFIELD("UPS Buffer File");
      LabelFileName := PackingStation.CalcLabelFileName(CarrierPackingStation."UPS Buffer File");
      IF EXISTS(LabelFileName) THEN
        ERASE(LabelFileName);
      LabelFile.TEXTMODE(TRUE);
      LabelFile.CREATE(LabelFileName);

      LabelFile.WRITE('^XA');
      CarrierPackingStation.TESTFIELD("UPS Eltron Label Media Type");
      IF CarrierPackingStation."UPS Eltron Label Media Type" =
         CarrierPackingStation."UPS Eltron Label Media Type"::"4X6 with Doc Tab"
      THEN
        LabelFile.WRITE('^LL1380')
      ELSE
        LabelFile.WRITE('^LL1250');
      IF CarrierPackingStation."UPS Print From" =
         CarrierPackingStation."UPS Print From"::Bottom
      THEN
        LabelFile.WRITE('^POI')
      ELSE
        LabelFile.WRITE('^PON');

      LabelFile.WRITE(
        '^FO10,20^FWN^A0,N,40,40^FD' + FORMAT(CurrentPackage."Package No.") +
        ' OF ' + FORMAT(CurrentPackage."Total Packages") + '^FS');
      LabelFile.WRITE('^FO290,10^FWN^A0,N,34,34^FDRETURN SERVICE^FS');
      LabelFile.WRITE('^FO275,40^FWN^A0,N,34,34^FDCUSTOMER RECEIPT^FS');
      LabelFile.WRITE('^FO10,125^FWN^A0,N,29,29^FDSHIP TO:^FS');

      LabelFile.WRITE('^FO10,150^FWN^A0,N,29,29^FD' + ToLine[1] + '^FS');
      LabelFile.WRITE('^FO10,175^FWN^A0,N,29,29^FD' + ToLine[2] + '^FS');
      LabelFile.WRITE('^FO10,200^FWN^A0,N,29,29^FD' + ToLine[3] + '^FS');
      LabelFile.WRITE('^FO10,225^FWN^A0,N,29,29^FD' + ToLine[4] + '^FS');
      IF ToLine[5] <> '' THEN BEGIN
        LabelFile.WRITE('^FO10,250^FWN^A0,N,29,29,FD' + ToLine[5] + '^FS');
        IF ToLine[6] <> '' THEN
          LabelFile.WRITE('^FO20,135^A0,25,25^FD' + ToLine[6] + '^FS');
      END;

      LabelFile.WRITE('^FO500,100^GB230,3,3^FS');
      LabelFile.WRITE('^FO500,100^GB3,90,3^FS');
      LabelFile.WRITE('^FO500,140^GB230,3,3^FS');
      LabelFile.WRITE('^FO730,100^GB3,93,3^FS');
      LabelFile.WRITE('^FO500,190^GB230,3,3^FS');
      LabelFile.WRITE('^FO520,115^FWN^A0,N,20,20^FDDATE OF SHIPMENT^FS');
      LabelFile.WRITE('^FO550,220^FWN^A0,N,20,20^FDCUSTOMER SERVICE^FS');
      LabelFile.WRITE('^FO550,245^FWN^A0,N,20,20^FD1-800-PICK-UPS^FS');
      LabelFile.WRITE('^FO0,295^GB790,3,3^FS');
      LabelFile.WRITE(
        '^FO10,330^FWN^A0,N,29,29^FDPACKAGE CONTENTS : ' + CurrentPackage.Description + '^FS');
      LabelFile.WRITE('^FO0,370^GB790,3,3^FS');
      LabelFile.WRITE('^FO10,400^FWN^A0,N,29,29^FD' + AdditionalRouting[5] + '^FS');
      LabelFile.WRITE('^FO10,425^FWN^A0,N,29,29^FD' + AdditionalRouting[6] + '^FS');
      LabelFile.WRITE('^FO0,457^GB790,3,3^FS');
      LabelFile.WRITE(
        '^FO10,717^FWN^A0,N,29,29^FDImportant Notice to Anyone Handling Over Goods to UPS^FS');
      LabelFile.WRITE(
        '^FO5,790^FWN^A0,N,20,60^FDThis document is a receipt only and you are named on the attached^FS');
      LabelFile.WRITE(
        '^FO5,810^FWN^A0,N,20,60^FDlabel/document exclusively for indentification purposes.  The ' +
        'contract of^FS');
      LabelFile.WRITE(
        '^FO5,830^FWN^A0,N,20,60^FDcarriage is between UPS and its customer.  There is no contract ' +
        'between you^FS');
      LabelFile.WRITE(
        '^FO5,850^FWN^A0,N,20,60^FDand UPS.  By handing over the goods to UPS, you agree that UPS ' +
        'collects the^FS');
      LabelFile.WRITE(
        '^FO5,870^FWN^A0,N,20,60^FDgoods on behalf of its customer and accepts no liability whatsoever ' +
        'to you^FS');
      LabelFile.WRITE(
        '^FO5,890^FWN^A0,N,20,60^FDor anyone other than its customer for any loss or delay of or ' +
        'damage to the^FS');
      LabelFile.WRITE('^FO5,955^FWN^A0,N,29,29^FDThis receipt is to retained by the customer^FS');
      LabelFile.WRITE('^FO5,980^FWN^A0,N,29,29^FDreturning the merchandise.^FS');
      LabelFile.WRITE('^FO0,1005^GB790,3,3^FS');
      LabelFile.WRITE('^FO10,1025^FWN^A0,N,29,29^FD' + ShippingServiceCode + '^FS');
      LabelFile.WRITE('^FO300,1025^FWN^A0,N,29,29^FD' + TrackingNo + '^FS');
      LabelFile.WRITE('^PQ1,0,0,Y');
      LabelFile.WRITE('^XZ');
        LabelFile.CLOSE;

      IF NOT EXISTS(LabelFileName) THEN
        REPEAT
        UNTIL EXISTS(LabelFileName);
      CurrentPackage.InsertLabelFile(
        LabelFileName,Text020,11,
        CarrierPackingStation."UPS Label Printer Port",PackingStation.Code,
        NOT PackingStation."No Label Printer",PackingStation."Do Not Import Label File");
      PackingStation.PrintLabelFile(
        LabelFileName,CarrierPackingStation."UPS Label Printer Port",
        PackingStation."No Label Printer",PackingStation."Auto Delete Label Buffer File");
    END;

    PROCEDURE PrintPickupLabel@54(PickupCode@1000000000 : Code[15];PickupDate@1000000001 : Date;LastAccountNo@1000000002 : Code[30];ShippingInfo@1000000003 : Text[30];DomesticPackageCount@1000000004 : Integer;IntPackageCount@1000000005 : Decimal;MidPackCount@1000000006 : Decimal;BigPackCount@1000000007 : Decimal;CODPackCount@1000000008 : Decimal;NextDayAirPackages@1000000009 : Integer;SecondDayAirPackages@1000000010 : Integer;ThirdDayAirPackages@1000000011 : Integer) : Text[250];
    VAR
      AddressLine@1000000012 : ARRAY [7] OF Text[60];
      i@1000000013 : Integer;
    BEGIN
      GetPackingStation;
      CarrierPackingStation.GetPackingStation(PackingStation);

      CLEAR(AddressLine);
      i := 1;
      SetArrayField(AddressLine,i,FALSE,CleanString(PackingStation."Ship-from Contact"));
      SetArrayField(AddressLine,i,TRUE,CleanString(PackingStation."Ship-from Company"));
      SetArrayField(AddressLine,i,FALSE,CleanString(PackingStation."Ship-from Address2"));
      SetArrayField(AddressLine,i,TRUE,CleanString(PackingStation."Ship-from Address"));
      SetArrayField(
        AddressLine,i,TRUE,
        CreateZipString(
          PackingStation."Ship-from City",PackingStation."Ship-from State",
          FixZIPCode(PackingStation."Ship-from ZIP Code")));

      CASE CarrierPackingStation."UPS Label Printer Type" OF
        CarrierPackingStation."UPS Label Printer Type"::"Eltron Orion":
          EXIT(
            PrintPickupLabelOrion(
              PickupCode,PickupDate,LastAccountNo,AddressLine,ShippingInfo,
              DomesticPackageCount,IntPackageCount,MidPackCount,BigPackCount,CODPackCount,
              NextDayAirPackages,SecondDayAirPackages,ThirdDayAirPackages));
        CarrierPackingStation."UPS Label Printer Type"::Zebra:
          EXIT(
            PrintPickupLabelZebra(
              PickupCode,PickupDate,LastAccountNo,AddressLine,ShippingInfo,
              DomesticPackageCount,IntPackageCount,MidPackCount,BigPackCount,CODPackCount,
              NextDayAirPackages,SecondDayAirPackages,ThirdDayAirPackages));
      END;
    END;

    LOCAL PROCEDURE PrintPickupLabelOrion@62(PickupCode@1000000000 : Code[15];PickupDate@1000000001 : Date;LastAccountNo@1000000002 : Code[30];AddressLine@1000000003 : ARRAY [7] OF Text[60];ShippingInfo@1000000004 : Text[30];DomesticPackageCount@1000000005 : Integer;IntPackageCount@1000000006 : Decimal;MidPackCount@1000000007 : Decimal;BigPackCount@1000000008 : Decimal;CODPackCount@1000000009 : Decimal;NextDayAirPackages@1000000010 : Integer;SecondDayAirPackages@1000000011 : Integer;ThirdDayAirPackages@1000000012 : Integer) : Text[250];
    VAR
      LabelFile@1000000013 : File;
      CheckDigit@1000000015 : Integer;
      TotalCount@1000000016 : Decimal;
      LabelFileName@1240030000 : Text[250];
    BEGIN
      GetPackingStation;
      CarrierPackingStation.GetPackingStation(PackingStation);
      CarrierPackingStation.TESTFIELD("UPS Buffer File");
      LabelFileName := PackingStation.CalcLabelFileName(CarrierPackingStation."UPS Buffer File");
      IF EXISTS(LabelFileName) THEN
        ERASE(LabelFileName);
      LabelFile.TEXTMODE(TRUE);
      LabelFile.CREATE(LabelFileName);
      IF CarrierPackingStation."UPS Eltron Label Media Type" =
         CarrierPackingStation."UPS Eltron Label Media Type"::"4X6 with Doc Tab"
      THEN BEGIN
        LabelFile.WRITE('JF');
        LabelFile.WRITE('Q1380,24');
        LabelFile.WRITE('R5,0');
        LabelFile.WRITE('q800');
          IF CarrierPackingStation."UPS Print From" =
             CarrierPackingStation."UPS Print From"::Top
          THEN
            LabelFile.WRITE('ZB')
          ELSE
            LabelFile.WRITE('ZT');
      END ELSE BEGIN
        LabelFile.WRITE('.');
        LabelFile.WRITE('Q1250,24');
        LabelFile.WRITE('q800');
          IF CarrierPackingStation."UPS Print From" =
             CarrierPackingStation."UPS Print From"::Top
          THEN
            LabelFile.WRITE('ZB')
          ELSE
            LabelFile.WRITE('ZT');
      END;
      LabelFile.WRITE('N');

      LabelFile.WRITE('A20,0,0,3,1,2,N,"PICKUP SUMMARY BAR CODE REPORT"');
      LabelFile.WRITE(
        'A20,40,0,3,1,2,N,"SHIP DATE: ' +
        UPPERCASE(
          COPYSTR(
            FORMAT(PickupDate,0,'<Month Text>'),1,3) + ' ' +
            FORMAT(PickupDate,0,'<Day>,<Year4>')) + '"');
      LabelFile.WRITE('A20,80,0,3,1,2,N,"SHIPPING RECORD: ' + PickupCode + '"');
      LabelFile.WRITE(
        'A20,120,0,3,1,2,N,"ACCOUNT NUMBER: ' + COPYSTR(LastAccountNo,1,3) + ' - ' +
        COPYSTR(LastAccountNo,4,3) + '"');
      LabelFile.WRITE('A20,160,0,3,1,2,N,"CUSTOMER"');
      LabelFile.WRITE('A60,200,0,3,1,2,N,"' + AddressLine[1] + '"');
      LabelFile.WRITE('A60,240,0,3,1,2,N,"' + AddressLine[2] + '"');
      LabelFile.WRITE('A60,280,0,3,1,2,N,"' + AddressLine[3] + '"');
      IF AddressLine[4] <> '' THEN
        LabelFile.WRITE('A60,320,0,3,1,2,N,"' + AddressLine[4] + '"');
      IF AddressLine[5] <> '' THEN
        LabelFile.WRITE('A60,360,0,3,1,2,N,"' + AddressLine[5] + '"');

      LabelFile.WRITE('LO0,400,800,20');
      CheckDigit := GetCheckDigit(ShippingInfo);
      LabelFile.WRITE(
        'A200,430,0,3,1,2,N,"91 ' + COPYSTR(ShippingInfo,1,3) + ' ' + COPYSTR(ShippingInfo,4,3) + ' ' +
        COPYSTR(ShippingInfo,7,4) + ' ' + COPYSTR(ShippingInfo,11,5) + ' ' +
        COPYSTR(ShippingInfo,16,5) + STRSUBSTNO(' %1',CheckDigit) + '"');
      LabelFile.WRITE('B150,470,0,1,3,6,200,N,"91' + ShippingInfo + STRSUBSTNO('%1',CheckDigit) + '"');
      LabelFile.WRITE('LO0,690,800,20');
      LabelFile.WRITE('A20,720,0,3,2,2,N,"DRIVER SUMMARY"');
      TotalCount := IntPackageCount + DomesticPackageCount;
      LabelFile.WRITE(
        'A20,760,0,3,1,2,N,"TOTAL NUMBER OF PACKAGES = ' +
        FORMAT(TotalCount,0,'<Integer Thousand>') + '"');
      LabelFile.WRITE(
        'A20,800,0,3,1,1,N,"PKGS W/ DECLARED VALUE $1,000 - $4,999 = ' +
        FORMAT(MidPackCount,0,'<Integer Thousand>') + '"');
      LabelFile.WRITE(
        'A20,825,0,3,1,1,N,"PKGS W/ DECLARED VALUE OVER $4.999 = ' +
        FORMAT(BigPackCount,0,'<Integer Thousand>') + '"');
      TotalCount := NextDayAirPackages;
      LabelFile.WRITE('A20,875,0,3,1,2,N,"1DA ' + FORMAT(TotalCount,0,'<Integer Thousand>') + '"');
      LabelFile.WRITE(
        'A400,875,0,3,1,2,N,"INT`L ' + FORMAT(IntPackageCount,0,'<Integer Thousand>') + '"');
      TotalCount := SecondDayAirPackages;
      LabelFile.WRITE('A20,915,0,3,1,2,N,"2DA ' + FORMAT(TotalCount,0,'<Integer Thousand>') + '"');
      LabelFile.WRITE('A400,915,0,3,1,2,N,"CODS ' + FORMAT(CODPackCount,0,'<Integer Thousand>') + '"');
      TotalCount := ThirdDayAirPackages;
      LabelFile.WRITE('A20,955,0,3,1,2,N,"3DS ' + FORMAT(TotalCount,0,'<Integer Thousand>') + '"');
      LabelFile.WRITE('A20,1000,0,3,1,1,N,"SHIPMENTS SUBJECT TO TERMS OF AGREEMENT OF FILE"');
      LabelFile.WRITE('LO0,1030,800,5');
      LabelFile.WRITE('A20,1080,0,3,1,2,N,"Received By:"');
      LabelFile.WRITE('LO190,1110,600,5');

      LabelFile.WRITE('A20,1140,0,3,1,2,N,"Pickup Time:"');
      LabelFile.WRITE('LO190,1170,325,5');
      LabelFile.WRITE('A550,1140,0,3,1,2,N,"Pkgs:"');
      LabelFile.WRITE('LO620,1170,200,5');

      LabelFile.WRITE('P1');
      LabelFile.WRITE('.');
      LabelFile.CLOSE;

      PackingStation.PrintLabelFile(
        LabelFileName,CarrierPackingStation."UPS Label Printer Port",
        PackingStation."No Label Printer",FALSE);

      EXIT(LabelFileName);
    END;

    LOCAL PROCEDURE PrintPickupLabelZebra@63(PickupCode@1000000000 : Code[15];PickupDate@1000000001 : Date;LastAccountNo@1000000002 : Code[30];AddressLine@1000000003 : ARRAY [7] OF Text[60];ShippingInfo@1000000004 : Text[30];DomesticPackageCount@1000000005 : Integer;IntPackageCount@1000000006 : Decimal;MidPackCount@1000000007 : Decimal;BigPackCount@1000000008 : Decimal;CODPackCount@1000000009 : Decimal;NextDayAirPackages@1000000010 : Integer;SecondDayAirPackages@1000000011 : Integer;ThirdDayAirPackages@1000000012 : Integer) : Text[250];
    VAR
      LabelFile@1000000013 : File;
      CheckDigit@1000000015 : Integer;
      TotalCount@1000000016 : Decimal;
      LabelFileName@1240030000 : Text[250];
    BEGIN
      GetPackingStation;
      CarrierPackingStation.GetPackingStation(PackingStation);
      CarrierPackingStation.TESTFIELD("UPS Buffer File");
      LabelFileName := PackingStation.CalcLabelFileName(CarrierPackingStation."UPS Buffer File");
      IF EXISTS(LabelFileName) THEN
        ERASE(LabelFileName);
      LabelFile.TEXTMODE(TRUE);
      LabelFile.CREATE(LabelFileName);
      // For Zebra
      LabelFile.WRITE('^XA');
      IF CarrierPackingStation."UPS Eltron Label Media Type" =
         CarrierPackingStation."UPS Eltron Label Media Type"::"4X6 with Doc Tab"
      THEN
        LabelFile.WRITE('^LL1380')
      ELSE
        LabelFile.WRITE('^LL1250');
      IF CarrierPackingStation."UPS Print From" =
         CarrierPackingStation."UPS Print From"::Bottom
      THEN
        LabelFile.WRITE('^POI')
      ELSE
        LabelFile.WRITE('^PON');

      LabelFile.WRITE('^FO20,10^A0,35,35^FDPICKUP SUMMARY BAR CODE REPORT^FS');
      LabelFile.WRITE(
        '^FO20,50^A0,35,35^FDSHIP DATE: ' + UPPERCASE(COPYSTR(FORMAT(WORKDATE,0,'<Month Text>'),1,3) +
        ' ' + FORMAT(WORKDATE,0,'<Day>,<Year4>')) + '^FS');
      LabelFile.WRITE('^FO20,90^A0,35,35^FDSHIPPING RECORD: ' + PickupCode + '^FS');
      LabelFile.WRITE(
        '^FO20,130^A0,35,35^FDACCOUNT NUMBER: ' + COPYSTR(LastAccountNo,1,3) + ' - ' +
        COPYSTR(LastAccountNo,4,3) + '^FS');
      LabelFile.WRITE('^FO20,170^A0,35,35^FDCUSTOMER^FS');
      LabelFile.WRITE('^FO60,210^A0,35,35^FD' + AddressLine[1] + '^FS');
      LabelFile.WRITE('^FO60,250^A0,35,35^FD' + AddressLine[2] + '^FS');
      LabelFile.WRITE('^FO60,290^A0,35,35^FD' + AddressLine[3] + '^FS');
      IF AddressLine[4] <> '' THEN
        LabelFile.WRITE('^FO60,330^A0,35,35^FD' + AddressLine[4] + '^FS');
      IF AddressLine[5] <> '' THEN
        LabelFile.WRITE('^FO60,370^A0,35,35^FD' + AddressLine[5] + '^FS');

      LabelFile.WRITE('^FO0,410^GB800,0,20^FS');
      CheckDigit := GetCheckDigit(ShippingInfo);
      LabelFile.WRITE(
        '^FO150,440^A0,35,35^FD91 ' + COPYSTR(ShippingInfo,1,3) + ' ' + COPYSTR(ShippingInfo,4,3) + ' ' +
        COPYSTR(ShippingInfo,7,4) + ' ' + COPYSTR(ShippingInfo,11,5) + ' ' +
        COPYSTR(ShippingInfo,16,5) + STRSUBSTNO(' %1',CheckDigit) + '^FS');
      LabelFile.WRITE(
        '^FO100,480^BY4,3,200^BCN,200,N,N,N,A^FD91' + ShippingInfo + STRSUBSTNO('%1',CheckDigit) + '^FS');
      LabelFile.WRITE('^FO0,700^GB800,0,20^FS');
      LabelFile.WRITE('^FO20,730^A0,45,45^FDDRIVER SUMMARY^FS');
      TotalCount := IntPackageCount + DomesticPackageCount;
      LabelFile.WRITE(
        '^FO20,770^A0,35,35^FDTOTAL NUMBER OF PACKAGES = ' +
        FORMAT(TotalCount,0,'<Integer Thousand>') + '^FS');
      LabelFile.WRITE(
        '^FO20,810^A0,30,30^FDPKGS W/ DECLARED VALUE $1,000 - $5,000 = ' +
        FORMAT(MidPackCount,0,'<Integer Thousand>') + '^FS');
      LabelFile.WRITE(
        '^FO20,835^A0,30,30^FDPKGS W/ DECLARED VALUE OVER $5,000 = ' +
        FORMAT(BigPackCount,0,'<Integer Thousand>') + '^FS');
      TotalCount := NextDayAirPackages;
      LabelFile.WRITE('^FO20,885^A0,35,35^FD1DA ' + FORMAT(TotalCount,0,'<Integer Thousand>') + '^FS');
      LabelFile.WRITE(
        '^FO400,885^A0,35,35^FDINT`L ' + FORMAT(IntPackageCount,0,'<Integer Thousand>') + '^FS');
      TotalCount := SecondDayAirPackages;
      LabelFile.WRITE('^FO20,925^A0,35,35^FD2DA ' + FORMAT(TotalCount,0,'<Integer Thousand>') + '^FS');
      LabelFile.WRITE(
        '^FO400,925^A0,35,35^FDCODS ' + FORMAT(CODPackCount,0,'<Integer Thousand>') + '^FS');
      TotalCount :=ThirdDayAirPackages;
      LabelFile.WRITE('^FO20,965^A0,35,35^FD3DS ' + FORMAT(TotalCount,0,'<Integer Thousand>') + '^FS');
      LabelFile.WRITE('^FO20,1010^A0,30,30^FDSHIPMENTS SUBJECT TO TERMS OF AGREEMENT OF FILE^FS');
      LabelFile.WRITE('^FO0,1040^GB800,0,5^FS');
      LabelFile.WRITE('^FO20,1090^A0,35,35^FDReceived By:^FS');
      LabelFile.WRITE('^FO200,1120^GB550,0,5^FS');

      LabelFile.WRITE('^FO20,1150^A0,35,35^FDPickup Time:^FS');
      LabelFile.WRITE('^FO200,1180^GB320,0,5^FS');
      LabelFile.WRITE('^FO550,1150^A0,35,35^FDPkgs:^FS');
      LabelFile.WRITE('^FO630,1180^GB150,0,5^FS');

      LabelFile.WRITE('^XZ');
      LabelFile.CLOSE;

      PackingStation.PrintLabelFile(
        LabelFileName,CarrierPackingStation."UPS Label Printer Port",
        PackingStation."No Label Printer",FALSE);

      EXIT(LabelFileName);
    END;

    LOCAL PROCEDURE GetCheckDigit@64(ShippingInfo@1000000001 : Text[30]) UPSCheckDigit@1000000000 : Integer;
    VAR
      UPSOddNumbers@1000000002 : Integer;
      UPSEvenNumbers@1000000003 : Integer;
      xNo@1000000004 : Integer;
      UPSRemainder@1000000005 : Integer;
      UPSResult@1000000006 : Integer;
      UPSMultiple@1000000007 : Integer;
      UPSNoCalc@1000000008 : Text[30];
    BEGIN
      UPSNoCalc := ShippingInfo;
      UPSNoCalc := CONVERTSTR(UPSNoCalc,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','23456789012345678901234567');
      UPSOddNumbers := 0;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,1,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,3,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,5,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,7,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,9,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,11,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,13,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,15,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,17,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,19,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      UPSEvenNumbers := 0;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,2,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,4,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,6,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,8,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,10,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,12,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,14,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,16,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,18,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,20,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      UPSEvenNumbers := UPSEvenNumbers * 2;
      UPSResult := UPSOddNumbers + UPSEvenNumbers;
      UPSRemainder := UPSResult MOD 10;
      UPSRemainder := 10 - UPSRemainder;
      UPSMultiple := UPSResult + UPSRemainder;
      UPSCheckDigit := UPSMultiple - UPSResult;
      IF UPSCheckDigit = 10 THEN
        UPSCheckDigit := 0;
    END;

    LOCAL PROCEDURE SetArrayField@25(VAR TextArray@1000000000 : ARRAY [7] OF Text[60];VAR ArrayIndex@1000000001 : Integer;AlwaysAdd@1000000002 : Boolean;TextValue@1000000003 : Text[60]);
    BEGIN
      TextArray[ArrayIndex] := TextValue;
      IF AlwaysAdd THEN
        ArrayIndex := ArrayIndex + 1
      ELSE
        IF TextValue <> '' THEN
          ArrayIndex := ArrayIndex + 1;
    END;

    LOCAL PROCEDURE CleanString@38(TextString@1000000001 : Text[250]) OutText@1000000000 : Text[250];
    VAR
      TempText@1000000002 : Text[250];
    BEGIN
      TempText := UPPERCASE(TextString);
      TempText := DELCHR(TempText,'=','\"^.,-:;()');
      OutText := TempText;
    END;

    LOCAL PROCEDURE CleanStringMaxicode@10(TextString@1240030001 : Text[250]) OutText@1240030000 : Text[250];
    VAR
      TempText@1240030002 : Text[250];
    BEGIN
      TempText := UPPERCASE(TextString);
      TempText := DELCHR(TempText,'=','-_+=\|[]}{".,#$@%^&*+!~`:;/?><');
      OutText := TempText;
    END;

    LOCAL PROCEDURE CreateZipString@13(CityText@1000000000 : Text[30];StateText@1000000001 : Text[30];ZIPText@1000000002 : Text[30]) : Text[250];
    BEGIN
      EXIT(
        COPYSTR(CleanString(CityText),1,11) + ' ' + CleanString(StateText) + '  ' + ZIPText);
    END;

    LOCAL PROCEDURE GetServiceIndicator@40(CurrentPackage@1000000001 : Record 14000701;UPSOptionPage@1000000002 : Record 14000761) Indicator@1000000000 : Code[2];
    BEGIN
      WITH CurrentPackage DO BEGIN
        GetShippingAgentService("Shipping Agent Code","Shipping Agent Service","World Wide Service");

        Indicator := ShippingAgentService."Service Indicator";
        CASE ShippingAgentService."Service Indicator" OF
          '01': // Next Day Air
            BEGIN
              IF NOT COD THEN BEGIN
                IF NOT UPSOptionPage."Saturday Delivery" THEN BEGIN
                  CASE UPSOptionPage."Delivery Confirmation Type" OF
                    UPSOptionPage."Delivery Confirmation Type"::"Name Date":
                      Indicator := '25';
                    UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                      Indicator := '24';
                    UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                      Indicator := 'A2';
                  END;

                  CASE UPSOptionPage."Call Tag Type" OF
                    UPSOptionPage."Call Tag Type"::"1 attempt":
                      Indicator := '09';
                    UPSOptionPage."Call Tag Type"::"3 attempt":
                      Indicator := '28';
                    UPSOptionPage."Call Tag Type"::"Print Return Label Only":
                      Indicator := '84';
                  END;
                END ELSE BEGIN
                  // Saturday Delivery
                  CASE UPSOptionPage."Delivery Confirmation Type" OF
                    UPSOptionPage."Delivery Confirmation Type"::None:
                      Indicator := '44';
                    UPSOptionPage."Delivery Confirmation Type"::"Name Date":
                      Indicator := '47';
                    UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                      Indicator := '58';
                    UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                      Indicator := 'A3';
                  END;

                  CASE UPSOptionPage."Call Tag Type" OF
                    UPSOptionPage."Call Tag Type"::"1 attempt":
                      Indicator := 'Y1';
                    UPSOptionPage."Call Tag Type"::"3 attempt":
                      Indicator := 'Y2';
                    UPSOptionPage."Call Tag Type"::"Print Return Label Only":
                      Indicator := 'Y0';
                  END;
                END;
              END ELSE BEGIN
              // COD
                IF NOT UPSOptionPage."Saturday Delivery" THEN BEGIN
                  IF UPSOptionPage."Delivery Confirmation Type" =
                     UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                  THEN
                    Indicator := 'AC'
                  ELSE
                    IF UPSOptionPage."Tagless COD" THEN
                      Indicator := '59';
                END ELSE BEGIN
                  IF UPSOptionPage."Delivery Confirmation Type" =
                     UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                  THEN
                    Indicator := 'AD'
                  ELSE
                    IF UPSOptionPage."Tagless COD" THEN
                      Indicator := '60';
                END;
              END;
            END;

          '15': // Next Day Air Early A.M.
            BEGIN
              IF NOT COD THEN BEGIN
                IF UPSOptionPage."Saturday Delivery" THEN BEGIN
                  IF UPSOptionPage."Delivery Confirmation Type" =
                     UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                  THEN
                    Indicator := 'A1'
                  ELSE
                    CASE UPSOptionPage."Call Tag Type" OF
                      UPSOptionPage."Call Tag Type"::"1 attempt":
                        Indicator := 'WW';
                      UPSOptionPage."Call Tag Type"::"3 attempt":
                        Indicator := 'WY';
                      UPSOptionPage."Call Tag Type"::"Print Return Label Only":
                        Indicator := 'WT';
                      UPSOptionPage."Call Tag Type"::None:
                        Indicator := '41';
                  END;
                END ELSE
                  IF UPSOptionPage."Delivery Confirmation Type" =
                     UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                  THEN
                    Indicator := 'A0'
                  ELSE
                    CASE UPSOptionPage."Call Tag Type" OF
                      UPSOptionPage."Call Tag Type"::"1 attempt":
                        Indicator := 'TY';
                      UPSOptionPage."Call Tag Type"::"3 attempt":
                        Indicator := 'V0';
                      UPSOptionPage."Call Tag Type"::"Print Return Label Only":
                        Indicator := 'V1';
                    END;
              END ELSE BEGIN
                IF UPSOptionPage."Saturday Delivery" THEN BEGIN
                  IF UPSOptionPage."Delivery Confirmation Type" =
                     UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                  THEN
                    Indicator := 'AA'
                  ELSE
                    IF UPSOptionPage."Tagless COD" THEN
                      Indicator := '33';
                END ELSE
                  IF UPSOptionPage."Delivery Confirmation Type" =
                     UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                  THEN
                    Indicator := 'A9'
                  ELSE
                    IF UPSOptionPage."Tagless COD" THEN
                      Indicator := '32';
              END;
              // If Air Service Document
              // Indicator := '21';
            END;

          '13': // Next Day Air Saver
            BEGIN
              IF NOT COD THEN BEGIN
                CASE UPSOptionPage."Delivery Confirmation Type" OF
                  UPSOptionPage."Delivery Confirmation Type"::"Name Date":
                    Indicator := '30';
                  UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                    Indicator := '29';
                  UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                    Indicator := 'A4';
                END;
              END ELSE BEGIN
                IF UPSOptionPage."Delivery Confirmation Type" =
                   UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                THEN
                  Indicator := 'AE'
                ELSE
                  IF UPSOptionPage."Tagless COD" THEN
                    Indicator := '62';
              END;
              // If Air Service Document
              // Indicator := '23';
            END;

          '02': // 2nd Day Air
            BEGIN
              IF NOT COD THEN BEGIN
                IF NOT UPSOptionPage."Saturday Delivery" THEN BEGIN
                  CASE UPSOptionPage."Delivery Confirmation Type" OF
                    UPSOptionPage."Delivery Confirmation Type"::"Name Date":
                      Indicator := '36';
                    UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                      Indicator := '35';
                    UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                      Indicator := 'A6';
                  END;

                  CASE UPSOptionPage."Call Tag Type" OF
                    UPSOptionPage."Call Tag Type"::"1 attempt":
                      Indicator := '11';
                    UPSOptionPage."Call Tag Type"::"3 attempt":
                      Indicator := '52';
                    UPSOptionPage."Call Tag Type"::"Print Return Label Only":
                      Indicator := '87';
                  END;
                END ELSE BEGIN
                  // Saturday Delivery
                  CASE UPSOptionPage."Delivery Confirmation Type" OF
                    UPSOptionPage."Delivery Confirmation Type"::None:
                      Indicator := 'PW';
                    UPSOptionPage."Delivery Confirmation Type"::"Name Date":
                      Indicator := 'PY';
                    UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                      Indicator := 'T0';
                    UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                      Indicator := 'T1';
                  END;

                  CASE UPSOptionPage."Call Tag Type" OF
                    UPSOptionPage."Call Tag Type"::"1 attempt":
                      Indicator := 'Y4';
                    UPSOptionPage."Call Tag Type"::"3 attempt":
                      Indicator := 'Y5';
                    UPSOptionPage."Call Tag Type"::"Print Return Label Only":
                      Indicator := 'Y3';
                  END;
                END;
              END ELSE BEGIN
              // COD
                IF NOT UPSOptionPage."Saturday Delivery" THEN BEGIN
                  IF UPSOptionPage."Delivery Confirmation Type" =
                     UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                  THEN
                    Indicator := 'AG'
                  ELSE
                    IF UPSOptionPage."Tagless COD" THEN
                      Indicator := '70';
                END ELSE BEGIN
                  IF UPSOptionPage."Delivery Confirmation Type" =
                     UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                  THEN
                    Indicator := 'T6'
                  ELSE
                    IF UPSOptionPage."Tagless COD" THEN
                      Indicator := 'T2';
                END;
              END;
            END;

          '04':  // UPS Saver
            BEGIN
              CASE UPSOptionPage."Call Tag Type" OF
                UPSOptionPage."Call Tag Type"::None:
                  CASE UPSOptionPage."Delivery Confirmation Type" OF
                    UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                      Indicator := 'D9';
                    UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                      Indicator := 'DA';
                  END;
                UPSOptionPage."Call Tag Type"::"1 attempt":
                  Indicator := '97';
                UPSOptionPage."Call Tag Type"::"3 attempt":
                  Indicator := '93';
                UPSOptionPage."Call Tag Type"::"Print Return Label Only":
                  Indicator := '86';
              END;
            END;

          '59': // 2nd Day Air A.M.
            BEGIN
              Indicator := '07';
              IF NOT COD THEN BEGIN
                CASE UPSOptionPage."Delivery Confirmation Type" OF
                  UPSOptionPage."Delivery Confirmation Type"::"Name Date":
                    Indicator := '18';
                  UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                    Indicator := '19';
                  UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                    Indicator := 'A5';
                END;
              END ELSE BEGIN
                IF UPSOptionPage."Delivery Confirmation Type" =
                   UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                THEN
                  Indicator := 'AF'
                ELSE
                  IF UPSOptionPage."Tagless COD" THEN
                    Indicator := '65';
              END;
              // If Air Service Document
              // Indicator := '31';
            END;

          '12': // 3 Day Select
            BEGIN
              IF NOT COD THEN BEGIN
                CASE UPSOptionPage."Delivery Confirmation Type" OF
                  UPSOptionPage."Delivery Confirmation Type"::"Name Date":
                    Indicator := '40';
                  UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                    Indicator := '39';
                  UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                    Indicator := 'A7';
                END;

                CASE UPSOptionPage."Call Tag Type" OF
                  UPSOptionPage."Call Tag Type"::"1 attempt":
                    Indicator := '16';
                  UPSOptionPage."Call Tag Type"::"3 attempt":
                    Indicator := '50';
                  UPSOptionPage."Call Tag Type"::"Print Return Label Only":
                    Indicator := '89';
                END;
              END ELSE BEGIN
                IF UPSOptionPage."Delivery Confirmation Type" =
                  UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                THEN
                  Indicator := 'AH'
                ELSE
                  IF UPSOptionPage."Tagless COD" THEN
                    Indicator := '71';
              END;
            END;

          '03': // Ground
            BEGIN
              IF NOT COD THEN BEGIN
                CASE UPSOptionPage."Delivery Confirmation Type" OF
                  UPSOptionPage."Delivery Confirmation Type"::"Name Date":
                    Indicator := '43';
                  UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                    Indicator := '42';
                  UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                    Indicator := 'A8';
                END;

                CASE UPSOptionPage."Call Tag Type" OF
                  UPSOptionPage."Call Tag Type"::Standard:
                    Indicator := '51';
                  UPSOptionPage."Call Tag Type"::"1 attempt":
                    Indicator := '78';
                  UPSOptionPage."Call Tag Type"::"3 attempt":
                    Indicator := '26';
                  UPSOptionPage."Call Tag Type"::"Print Return Label Only":
                    Indicator := '90';
                END;
              END ELSE BEGIN
              // COD
                IF UPSOptionPage."Delivery Confirmation Type" =
                   UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                THEN
                  Indicator := 'AJ'
                ELSE
                  IF UPSOptionPage."Tagless COD" THEN
                    Indicator := '72';
              END;
            END;
          '11': // Standard
            BEGIN
              Indicator := '68';
              CASE UPSOptionPage."Call Tag Type" OF
                UPSOptionPage."Call Tag Type"::"1 attempt":
                  Indicator := '99';
                UPSOptionPage."Call Tag Type"::"3 attempt":
                  Indicator := '95';
                UPSOptionPage."Call Tag Type"::"Print Return Label Only":
                  Indicator := '91';
              END;
              IF COD THEN
                Indicator := '79'
              ELSE
                CASE UPSOptionPage."Delivery Confirmation Type" OF
                  UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                    Indicator := 'DK';
                  UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                    Indicator := 'DL';
                END;
            END;
          '08': // Expedited
            BEGIN
              Indicator := '67';
              CASE UPSOptionPage."Call Tag Type" OF
                UPSOptionPage."Call Tag Type"::"1 attempt":
                  Indicator := '98';
                UPSOptionPage."Call Tag Type"::"3 attempt":
                  Indicator := '94';
                UPSOptionPage."Call Tag Type"::"Print Return Label Only":
                  Indicator := '88';
              END;
              IF COD THEN
                Indicator := '00'
              ELSE
                CASE UPSOptionPage."Delivery Confirmation Type" OF
                  UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                    Indicator := 'DG';
                  UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                    Indicator := 'DH';
                END;
            END;
          '54': // Express Plus
            BEGIN
              CASE UPSOptionPage."Call Tag Type" OF
                UPSOptionPage."Call Tag Type"::"1 attempt":
                  Indicator := 'AM';
                UPSOptionPage."Call Tag Type"::"3 attempt":
                  Indicator := 'AL';
                UPSOptionPage."Call Tag Type"::"Print Return Label Only":
                  Indicator := 'AK';
              END;
              IF UPSOptionPage."Saturday Delivery" THEN BEGIN
                CASE UPSOptionPage."Delivery Confirmation Type" OF
                  UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                    Indicator := 'G4';
                  UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                    Indicator := 'G8';
                  UPSOptionPage."Delivery Confirmation Type"::None:
                    Indicator := '34';
                END;
              END ELSE
                CASE UPSOptionPage."Delivery Confirmation Type" OF
                  UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                    Indicator := 'G1';
                  UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                    Indicator := 'G5';
                END;
            END;

          '07': // Express
            BEGIN
              Indicator := '66';
              CASE UPSOptionPage."Call Tag Type" OF
                UPSOptionPage."Call Tag Type"::"1 attempt":
                  Indicator := '96';
                UPSOptionPage."Call Tag Type"::"3 attempt":
                  Indicator := '92';
                UPSOptionPage."Call Tag Type"::"Print Return Label Only":
                  Indicator := '85';
              END;
              IF UPSOptionPage."Saturday Delivery" THEN BEGIN
                Indicator := '69';
                CASE UPSOptionPage."Delivery Confirmation Type" OF
                  UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                    Indicator := 'D6';
                  UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                    Indicator := 'D7';
                END;

                CASE UPSOptionPage."Call Tag Type" OF
                  UPSOptionPage."Call Tag Type"::"1 attempt":
                    Indicator := 'Y7';
                  UPSOptionPage."Call Tag Type"::"3 attempt":
                    Indicator := 'Y8';
                  UPSOptionPage."Call Tag Type"::"Print Return Label Only":
                    IF UPSOptionPage."Proactive Response" THEN
                      Indicator := 'Y9'
                    ELSE
                      Indicator := 'Y6';
                END;
              END ELSE
                CASE UPSOptionPage."Delivery Confirmation Type" OF
                  UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                    Indicator := 'D3';
                  UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                    Indicator := 'D4';
                END;
            END;
          '21': // Economy
            Indicator := '08';
        END;
      END;
    END;

    PROCEDURE GetShipmentNo@41(TrackingNo@1240030001 : Text[30]) ShipmentNo@1240030000 : Text[30];
    VAR
      TempText@1240030002 : Text[30];
      decShipmentNo@1240030003 : Decimal;
      Pos1@1240030004 : Integer;
      Pos2@1240030005 : Integer;
      Pos3@1240030006 : Integer;
      Pos4@1240030007 : Integer;
      Pos5@1240030008 : Integer;
    BEGIN
      TempText := COPYSTR(TrackingNo,11,7);
      ShipmentNo := COPYSTR(TrackingNo,3,6);
      EVALUATE(decShipmentNo,TempText);
      Pos1 := decShipmentNo DIV POWER(26,4);
      Pos2 := (decShipmentNo - (Pos1 * POWER(26,4))) DIV POWER(26,3);
      Pos3 := (decShipmentNo - (Pos1 * POWER(26,4)) - (Pos2 * POWER(26,3))) DIV POWER(26,2);
      Pos4 :=
        (decShipmentNo - (Pos1 * POWER(26,4)) - (Pos2 * POWER(26,3)) - (Pos3 * POWER(26,2))) DIV 26;
      Pos5 :=
        (decShipmentNo - (Pos1 * POWER(26,4)) - (Pos2 * POWER(26,3)) - (Pos3 * POWER(26,2)) -
        (Pos4 * 26));
      ShipmentNo :=
        COPYSTR(ShipmentNo,1,4) + ' ' + COPYSTR(ShipmentNo,5,2) + Base26Convert(Pos1) +
        Base26Convert(Pos2) + ' ' + Base26Convert(Pos3) + Base26Convert(Pos4) + Base26Convert(Pos5);
    END;

    LOCAL PROCEDURE Base26Convert@42(OriginaInteger@1000000001 : Integer) Base26@1000000000 : Text[1];
    BEGIN
      CASE OriginaInteger OF
        0:
          Base26 := '3';
        1:
          Base26 := '4';
        2:
          Base26 := '7';
        3:
          Base26 := '8';
        4:
          Base26 := '9';
        5:
          Base26 := 'B';
        6:
          Base26 := 'C';
        7:
          Base26 := 'D';
        8:
          Base26 := 'F';
        9:
          Base26 := 'G';
        10:
          Base26 := 'H';
        11:
          Base26 := 'J';
        12:
          Base26 := 'K';
        13:
          Base26 := 'L';
        14:
          Base26 := 'M';
        15:
          Base26 := 'N';
        16:
          Base26 := 'P';
        17:
          Base26 := 'Q';
        18:
          Base26 := 'R';
        19:
          Base26 := 'S';
        20:
          Base26 := 'T';
        21:
          Base26 := 'V';
        22:
          Base26 := 'W';
        23:
          Base26 := 'X';
        24:
          Base26 := 'Y';
        25:
          Base26 := 'Z';
      END;
    END;

    PROCEDURE CreateManifest@43(CurrentShippingAgentAccount@1000000000 : Record 14000770);
    VAR
      ManifestHeader@1000000001 : Record 14000712;
    BEGIN
      WITH CurrentShippingAgentAccount DO BEGIN
        ShippingAgent.RESET;
        ShippingAgent.SETRANGE("Shipper Type",ShippingAgent."Shipper Type"::UPS);
        ShippingAgent.FIND('-');

        CLEAR(ManifestHeader);
        ManifestHeader.INSERT(TRUE);
        ManifestHeader."Shipping Agent Code" := ShippingAgent.Code;
        ManifestHeader."Shipping Agent Account" := "Account No.";
        ManifestHeader.MODIFY(TRUE);

        ManifestHeader.GetSuggestedLines;

        COMMIT;

        PAGE.RUNMODAL(PAGE::Manifest,ManifestHeader);
      END;
    END;

    PROCEDURE CloseManifest@53(CurrentManifestHeader@1000000000 : Record 14000712);
    VAR
      ManifestHeader@1000000001 : Record 14000712;
      ManifestLine@1000000002 : Record 14000713;
      UPSManifest@1000000003 : Record 14000768;
      UPSShippingAgentAccountTmp@1000000004 : TEMPORARY Record 14000770;
      Package@1000000009 : Record 14000701;
      PostedPackage@1000000010 : Record 14000704;
      ManifestMgt@1000000011 : Codeunit 14000762;
      TempInteger@1000000005 : Integer;
      FilesToUpload@1000000006 : Integer;
      TempText@1000000007 : Text[30];
      FileName@1000000008 : Text[250];
      EntryNo@1000000012 : Integer;
    BEGIN
      WITH CurrentManifestHeader DO BEGIN
        TESTFIELD(Posted);
        TESTFIELD("UPS Processing Required");

        GetPackingStation;
        CarrierPackingStation.GetPackingStation(PackingStation);

        UPSShippingAgentAccountTmp.DELETEALL;

        ManifestLine.RESET;
        ManifestLine.SETRANGE("Manifest No.","No.");
        ManifestLine.SETRANGE(Type,ManifestLine.Type::"UPS Summary");
        ManifestLine.DELETEALL;

        ManifestMgt.GroupShipmentsForUPSManifest(CurrentManifestHeader);
        ManifestLine.SETRANGE(
          Type,ManifestLine.Type::Package,ManifestLine.Type::"Miscellaneous Package");
        IF ManifestLine.FIND('-') THEN BEGIN
          REPEAT
            IF ManifestLine."Posted / Closed" THEN BEGIN
              PostedPackage.GET(ManifestLine."No.");
              Package.TRANSFERFIELDS(PostedPackage);
              EntryNo := ManifestMgt.BuildUPSManifest(Package,TRUE,ManifestLine);
              PostedPackage.TRANSFERFIELDS(Package);
              PostedPackage."UPS Manifest Entry No." := EntryNo;
              PostedPackage.MODIFY;
            END ELSE BEGIN
              IF Package.GET(ManifestLine."No.") THEN BEGIN
                Package."UPS Manifest Entry No." := ManifestMgt.BuildUPSManifest(Package,FALSE,ManifestLine);
                Package.MODIFY;
              END ELSE BEGIN
                PostedPackage.GET(ManifestLine."No.");
                Package.TRANSFERFIELDS(PostedPackage);
                PostedPackage."UPS Manifest Entry No." := ManifestMgt.BuildUPSManifest(Package,TRUE,ManifestLine);
                PostedPackage.MODIFY;
              END;
            END;
          UNTIL ManifestLine.NEXT = 0;
          ManifestLine.FIND('-');
          REPEAT
            UPSManifest.RESET;
            UPSManifest.SETCURRENTKEY("Package No.");
            UPSManifest.SETRANGE("Package No.",ManifestLine."No.");
            IF UPSManifest.FIND('-') THEN
              REPEAT
                IF NOT UPSShippingAgentAccountTmp.GET(UPSManifest."Shipper Account Number") THEN BEGIN
                  GetShippingAgentAccount(UPSManifest."Shipper Account Number");
                  ShippingAgentAccount.TESTFIELD("Manifest Version");
                  ShippingAgentAccount.TESTFIELD("Book No.");
                  ShippingAgentAccount.TESTFIELD("Page No.");
                  IF STRLEN(ShippingAgentAccount."Book No.") <> 7 THEN
                    ShippingAgentAccount.FIELDERROR("Book No.",Text021);
                  IF STRLEN(ShippingAgentAccount."Page No.") <> 2 THEN
                    ShippingAgentAccount.FIELDERROR("Page No.",Text022);

                  UPSShippingAgentAccountTmp := ShippingAgentAccount;
                  UPSShippingAgentAccountTmp."Page No." :=
                    INCSTR(UPSShippingAgentAccountTmp."Page No.");
                  IF STRLEN(UPSShippingAgentAccountTmp."Page No.") < 2 THEN
                    UPSShippingAgentAccountTmp."Page No." :=
                      '0' + UPSShippingAgentAccountTmp."Page No.";
                  EVALUATE(TempInteger,UPSShippingAgentAccountTmp."Page No.");
                  IF TempInteger > 99 THEN BEGIN
                    UPSShippingAgentAccountTmp.TESTFIELD("Alternative Book No.");
                    IF STRLEN(UPSShippingAgentAccountTmp."Alternative Book No.") <> 7 THEN
                      UPSShippingAgentAccountTmp.FIELDERROR(
                        "Alternative Book No.",Text021);

                    TempText := UPSShippingAgentAccountTmp."Book No.";
                    UPSShippingAgentAccountTmp."Book No." :=
                      UPSShippingAgentAccountTmp."Alternative Book No.";
                    UPSShippingAgentAccountTmp."Alternative Book No." := TempText;
                    UPSShippingAgentAccountTmp."Page No." := '01';
                  END;
                  UPSShippingAgentAccountTmp."First Manifest Entry No." := UPSManifest."Entry No.";
                  UPSShippingAgentAccountTmp.INSERT;
                END;

                // Prevent uploading Old Entries Again.
                UPSManifest.TESTFIELD("Manifest Upload Date",0D);

                UPSManifest."Manifest No." := "No.";
                UPSManifest."Pickup Date" := Date2Text("Pickup Date");
                UPSManifest."Book Number" := UPSShippingAgentAccountTmp."Book No.";
                UPSManifest."Page Number" := UPSShippingAgentAccountTmp."Page No.";

                // PM Code to modify additional fields.
                UPSManifest.MODIFY;
              UNTIL UPSManifest.NEXT = 0;
          UNTIL ManifestLine.NEXT = 0;

          FilesToUpload := 0;
          IF UPSShippingAgentAccountTmp.FIND('-') THEN BEGIN
            ManifestLine.RESET;
            ManifestLine.SETRANGE("Manifest No.","No.");
            IF NOT ManifestLine.FIND('+') THEN
              ManifestLine."Manifest No." := "No.";

            REPEAT
              ShippingAgentAccount := UPSShippingAgentAccountTmp;
              ShippingAgentAccount.MODIFY;

              ManifestLine.INIT;
              ManifestLine."Line No." := ManifestLine."Line No." + 10000;
              ManifestLine.Type := ManifestLine.Type::"UPS Summary";
              ManifestLine.Description :=
                STRSUBSTNO(
                  Text023,
                  UPSShippingAgentAccountTmp."Book No.",UPSShippingAgentAccountTmp."Page No.");
              ManifestLine."Shipping Agent Account No." := UPSShippingAgentAccountTmp."Account No.";
              ManifestLine."UPS Book No." := UPSShippingAgentAccountTmp."Book No.";
              ManifestLine."UPS Page No." := UPSShippingAgentAccountTmp."Page No.";
              EVALUATE(
                TempInteger,
                UPSShippingAgentAccountTmp."Book No." +
                UPSShippingAgentAccountTmp."Page No.");
              TempInteger := TempInteger MOD 7;
              ManifestLine."UPS Pickup No." :=
                UPSShippingAgentAccountTmp."Book No." +
                UPSShippingAgentAccountTmp."Page No." +
                FORMAT(TempInteger);
              ManifestLine."Total Shipments" := GetTotalShipments(ManifestLine);
              ManifestLine.SummarizeAccount(UPSShippingAgentAccountTmp."Account No.");

              TempText := '00000' + DELCHR(FORMAT(ManifestLine."Domestic Packages"),'=',',.');
              TempText := COPYSTR(TempText,STRLEN(TempText) - 4,5);
              ManifestLine."UPS Shipping Info" :=
                UPSShippingAgentAccountTmp."Account No." +
                UPSShippingAgentAccountTmp."Book No." +
                UPSShippingAgentAccountTmp."Page No." +
                TempText;

              FileName :=
                PrintPickupLabel(
                  ManifestLine."UPS Pickup No.",CurrentManifestHeader."Pickup Date",
                  UPSShippingAgentAccountTmp."Account No.",ManifestLine."UPS Shipping Info",
                  ManifestLine."Domestic Packages",ManifestLine."International Packages",
                  ManifestLine."Value 1000 to 5000 Packages",ManifestLine."Value Above 5000 Packages",
                  ManifestLine."COD Packages",ManifestLine."Next Day Packages",
                  ManifestLine."Second Day Packages",ManifestLine."Third Day Packages");
              ManifestLine."UPS Pickup File No." :=
                InsertLabelFile(
                  FileName,
                  STRSUBSTNO(Text024,UPSShippingAgentAccountTmp."Account No."),
                  11,CarrierPackingStation."UPS Label Printer Port",PackingStation.Code,
                  NOT PackingStation."No Label Printer",PackingStation."Do Not Import Label File");

              IF PackingStation."Auto Delete Label Buffer File" THEN
                ERASE(FileName);

              ManifestHeader.RESET;
              ManifestHeader.SETRANGE("No.","No.");
              ManifestHeader.SETRANGE(
                "Shipping Agent Account",UPSShippingAgentAccountTmp."Account No.");
              IF UPSShippingAgentAccountTmp."Manifest Version" >
                 UPSShippingAgentAccountTmp."Manifest Version"::"7.00"
              THEN
                CODEUNIT.RUN(CODEUNIT::"UPS Manifest Export",ManifestLine)
              ELSE
      //          DATAPORT.RUNMODAL(DATAPORT::"414000761",FALSE,ManifestHeader);
              UPSManifest.GET(UPSShippingAgentAccountTmp."First Manifest Entry No.");
              ManifestLine."UPS Manifest Filename" := UPSManifest."Text File Name";
              ManifestLine."UPS Manifest File No." :=
                InsertLabelFile(
                  UPSManifest."Text File Name",
                  STRSUBSTNO(Text025,UPSShippingAgentAccountTmp."Account No."),
                  11,'',PackingStation.Code,FALSE,FALSE);

              ManifestLine.INSERT;

              FilesToUpload := FilesToUpload + 1;
            UNTIL UPSShippingAgentAccountTmp.NEXT = 0;
          END;

          IF (FilesToUpload <> 0) AND NOT ShippingAgentAccount."Hide Browser Posting Manifest" THEN BEGIN
            OpenManifestWebSite(ShippingAgentAccount);

            MESSAGE(
              Text026,
              FilesToUpload,"No.",CarrierPackingStation."UPS Manifest Upload Directory");
          END;
        END;

        LOCKTABLE;
        FIND;
        "UPS Processing Required" := FALSE;
        MODIFY;
        COMMIT;
      END;
    END;

    PROCEDURE OpenManifest@65(CurrentManifestHeader@1000000000 : Record 14000712);
    VAR
      ManifestLine@1000000001 : Record 14000713;
      UPSManifest@1000000002 : Record 14000768;
    BEGIN
      WITH CurrentManifestHeader DO BEGIN
        TESTFIELD(Posted,FALSE);
        TESTFIELD("UPS Processing Required");

        ManifestLine.RESET;
        ManifestLine.SETRANGE("Manifest No.","No.");
        ManifestLine.SETRANGE(Type,ManifestLine.Type::"UPS Summary");
        ManifestLine.DELETEALL;

        ManifestLine.SETRANGE(
          Type,ManifestLine.Type::Package,ManifestLine.Type::"Miscellaneous Package");
        IF ManifestLine.FIND('-') THEN
          REPEAT
            UPSManifest.RESET;
            UPSManifest.SETCURRENTKEY("Package No.");
            UPSManifest.SETRANGE("Package No.",ManifestLine."No.");
            IF UPSManifest.FIND('-') THEN
              REPEAT
                UPSManifest."Manifest No." := '';
                UPSManifest."Pickup Date" := '';
                UPSManifest."Book Number" := '';
                UPSManifest."Page Number" := '';

                // Code to modify additional fields.

                UPSManifest.MODIFY;
              UNTIL UPSManifest.NEXT = 0;
          UNTIL ManifestLine.NEXT = 0;

        LOCKTABLE;
        FIND;
        "UPS Processing Required" := FALSE;
        MODIFY;
        COMMIT;

        MESSAGE(Text027);
      END;
    END;

    PROCEDURE OpenManifestWebSite@67(CurrentShippingAgentAccount@1000000000 : Record 14000770);
    BEGIN
      CurrentShippingAgentAccount.TESTFIELD("Manifest Version");

      HYPERLINK('https://www.pld.ups.com/hmu');
    END;

    LOCAL PROCEDURE LeftString@46(TextString@1000000001 : Text[250]) OutText@1000000000 : Text[250];
    BEGIN
      IF STRLEN(TextString) > 0 THEN
        OutText := DELCHR(TextString,'<',' ')
      ELSE
        OutText := '';
    END;

    LOCAL PROCEDURE GetUPSRoutingCode@47(CountryCode@1000000001 : Code[10];ZIPCode@1000000002 : Code[20]) RoutingCode@1000000000 : Code[15];
    VAR
      UPSRouting@1000000003 : Record 14000769;
    BEGIN
      UPSRouting.RESET;
      UPSRouting.SETRANGE("Country Code",CountryCode);
      UPSRouting.SETFILTER("Min Zip Code",'<=%1',ZIPCode);
      UPSRouting.SETFILTER("Max Zip Code",'>=%1',ZIPCode);
      IF UPSRouting.FIND('+') THEN
        RoutingCode := UPSRouting."Routing Code"
      ELSE
        RoutingCode := '';
    END;

    LOCAL PROCEDURE ServiceConvertToNo@48(OriginalServiceCode@1000000001 : Code[2]) ServiceCodeOut@1000000000 : Code[3];
    VAR
      ServiceVal@1000000002 : Integer;
      No1@1000000003 : Integer;
      No2@1000000004 : Integer;
      Converted@1000000005 : Boolean;
    BEGIN
      Converted := FALSE;

      IF EVALUATE(ServiceVal,OriginalServiceCode) THEN BEGIN
        IF ServiceVal < 100 THEN BEGIN
          ServiceCodeOut := OriginalServiceCode;
          Converted := TRUE;
        END;
      END;

      IF NOT Converted THEN BEGIN
        CASE OriginalServiceCode[1] OF
          '0': No1 := 0;
          '1': No1 := 32;
          '2': No1 := 64;
          '3': No1 := 96;
          '4': No1 := 128;
          '5': No1 := 160;
          '6': No1 := 192;
          '7': No1 := 224;
          '8': No1 := 256;
          '9': No1 := 288;
          'A': No1 := 320;  // No B
          'C': No1 := 352;
          'D': No1 := 384;
          'E': No1 := 416;
          'F': No1 := 448;
          'G': No1 := 480;
          'H': No1 := 512;  // No I
          'J': No1 := 544;
          'K': No1 := 576;
          'L': No1 := 608;
          'M': No1 := 640;
          'N': No1 := 672;  // No O
          'P': No1 := 704;
          'Q': No1 := 736;
          'R': No1 := 768;
          'S': No1 := 800;
          'T': No1 := 832;  // No U
          'V': No1 := 864;
          'W': No1 := 896;
          'X': No1 := 928;
          'Y': No1 := 960;
          'Z': No1 := 992;
        END;

        CASE OriginalServiceCode[2] OF
          '0': No2 := 0;
          '1': No2 := 1;
          '2': No2 := 2;
          '3': No2 := 3;
          '4': No2 := 4;
          '5': No2 := 5;
          '6': No2 := 6;
          '7': No2 := 7;
          '8': No2 := 8;
          '9': No2 := 9;
          'A': No2 := 10;  // No B
          'C': No2 := 11;
          'D': No2 := 12;
          'E': No2 := 13;
          'F': No2 := 14;
          'G': No2 := 15;
          'H': No2 := 16;  // No I
          'J': No2 := 17;
          'K': No2 := 18;
          'L': No2 := 19;
          'M': No2 := 20;
          'N': No2 := 21;  // No O
          'P': No2 := 22;
          'Q': No2 := 23;
          'R': No2 := 24;
          'S': No2 := 25;
          'T': No2 := 26;  // No U
          'V': No2 := 27;
          'W': No2 := 28;
          'X': No2 := 29;
          'Y': No2 := 30;
          'Z': No2 := 31;
        END;
        ServiceCodeOut := STRSUBSTNO('%1',No1 + No2);
      END;

      IF STRLEN(ServiceCodeOut) < 3 THEN BEGIN
        REPEAT
          ServiceCodeOut := '0' + ServiceCodeOut;
        UNTIL STRLEN(ServiceCodeOut) >= 3;
      END;
    END;

    LOCAL PROCEDURE ServiceConvertToAlpha@49(ReturnServiceCode@1000000001 : Code[3]) ServiceCodeOut@1000000000 : Code[2];
    VAR
      ServiceNo@1000000002 : Integer;
      No1@1000000003 : Integer;
      No2@1000000004 : Integer;
      TempCode@1000000005 : Code[10];
    BEGIN
      EVALUATE(ServiceNo,ReturnServiceCode);

      IF ServiceNo < 100 THEN BEGIN
        IF ServiceNo < 10 THEN
          ServiceCodeOut := STRSUBSTNO('0%1',ServiceNo)
        ELSE
          ServiceCodeOut := STRSUBSTNO('%1',ServiceNo);
        EXIT;
      END;

      No1 := ServiceNo DIV 32;
      No2 := ServiceNo MOD 32;
      No1 := No1 * 32;

      CASE No1 OF
        0: TempCode := '0';
        32: TempCode := '1';
        64: TempCode := '2';
        96: TempCode := '3';
        128: TempCode := '4';
        160: TempCode := '5';
        192: TempCode := '6';
        224: TempCode := '7';
        256: TempCode := '8';
        288: TempCode := '9';
        320: TempCode := 'A'; // No B
        352: TempCode := 'C';
        384: TempCode := 'D';
        416: TempCode := 'E';
        448: TempCode := 'F';
        480: TempCode := 'G';
        512: TempCode := 'H';  // No I
        544: TempCode := 'J';
        576: TempCode := 'K';
        608: TempCode := 'L';
        640: TempCode := 'M';
        672: TempCode := 'N';  // No O
        704: TempCode := 'P';
        736: TempCode := 'Q';
        768: TempCode := 'R';
        800: TempCode := 'S';
        832: TempCode := 'T';  // No U
        864: TempCode := 'V';
        896: TempCode := 'W';
        928: TempCode := 'X';
        960: TempCode := 'Y';
        992: TempCode := 'Z';
      END;
      ServiceCodeOut := TempCode;
      CASE No2 OF
        0: TempCode := '0';
        1: TempCode := '1';
        2: TempCode := '2';
        3: TempCode := '3';
        4: TempCode := '4';
        5: TempCode := '5';
        6: TempCode := '6';
        7: TempCode := '7';
        8: TempCode := '8';
        9: TempCode := '9';
        10: TempCode := 'A';  // No B
        11: TempCode := 'C';
        12: TempCode := 'D';
        13: TempCode := 'E';
        14: TempCode := 'F';
        15: TempCode := 'G';
        16: TempCode := 'H';  // No I
        17: TempCode := 'J';
        18: TempCode := 'K';
        19: TempCode := 'L';
        20: TempCode := 'M';
        21: TempCode := 'N';  // No O
        22: TempCode := 'P';
        23: TempCode := 'Q';
        24: TempCode := 'R';
        25: TempCode := 'S';
        26: TempCode := 'T';  // No U
        27: TempCode := 'V';
        28: TempCode := 'W';
        29: TempCode := 'X';
        30: TempCode := 'Y';
        31: TempCode := 'Z';
      END;
      ServiceCodeOut := ServiceCodeOut + TempCode;
    END;

    LOCAL PROCEDURE GetPackingStation@51();
    BEGIN
      IF PackingStation.Code = '' THEN
        PackingStation.GetPackingStation;
    END;

    LOCAL PROCEDURE GetShippingSetup@50();
    BEGIN
      IF NOT ShippingSetupRetrieved THEN BEGIN
        ShippingSetup.GET;
        ShippingSetupRetrieved := TRUE;
      END;
    END;

    LOCAL PROCEDURE GetShippingAgent@30(ShippingAgentCode@1000000000 : Code[10]);
    BEGIN
      IF (ShippingAgent.Code <> ShippingAgentCode) OR
         (ShippingAgentCode = '')
      THEN
        ShippingAgent.GET(ShippingAgentCode);
    END;

    LOCAL PROCEDURE GetShippingAgentService@14(ShippingAgentCode@1000000000 : Code[10];ShippingAgentServiceCode@1000000001 : Code[30];WorldWideService@1000000002 : Boolean);
    BEGIN
      IF (ShippingAgentService.Code <> ShippingAgentCode) OR
         (ShippingAgentService."World Wide Service" <> WorldWideService) OR
         (ShippingAgentService.Code <> ShippingAgentServiceCode) OR
         (ShippingAgentServiceCode = '')
      THEN
        ShippingAgentService.GET(ShippingAgentCode,ShippingAgentServiceCode,WorldWideService);
    END;

    LOCAL PROCEDURE GetShippingAgentAccount@22(ShippingAgentAccountNo@1000000000 : Code[10]);
    BEGIN
      IF (ShippingAgentAccount."Account No." <> ShippingAgentAccountNo) OR
         (ShippingAgentAccountNo = '')
      THEN
        ShippingAgentAccount.GET(ShippingAgentAccountNo);
    END;

    LOCAL PROCEDURE Date2Text@28(InDate@1000000000 : Date) : Text[30];
    BEGIN
      EXIT(
        DELCHR(
          FORMAT(
            10000 * DATE2DMY(InDate,3) + 100 * DATE2DMY(InDate,2) + DATE2DMY(InDate,1)),'=',',.'));
    END;

    LOCAL PROCEDURE Decimal2Text@5(CalcDecimal@1000000000 : Decimal;DecimalToShow@1000000001 : Integer) : Text[30];
    VAR
      TempText@1000000002 : Text[30];
      ThousandChar@1000000003 : Text[1];
    BEGIN
      ThousandChar := COPYSTR(FORMAT(1000.1),2,1);
      TempText := FORMAT(CalcDecimal);
      TempText := DELCHR(TempText,'=',ThousandChar);
      TempText := CONVERTSTR(TempText,',','.');

      IF DecimalToShow <> 0 THEN BEGIN
        IF STRPOS(TempText,'.') = 0 THEN
          TempText := TempText + '.000000'
        ELSE
          TempText := TempText + '00000';
        TempText := COPYSTR(TempText,1,STRPOS(TempText,'.') + DecimalToShow);

        IF (STRLEN(TempText) - STRPOS(TempText,'.') <> DecimalToShow) OR (STRPOS(TempText,'.') = 0) THEN
          ERROR(Text028,CalcDecimal,TempText,DecimalToShow);
      END;

      EXIT(TempText);
    END;

    LOCAL PROCEDURE Integer2Text@4(CalcInteger@1000000000 : Integer) : Text[30];
    VAR
      TempText@1000000001 : Text[30];
      ThousandChar@1000000002 : Text[1];
    BEGIN
      ThousandChar := COPYSTR(FORMAT(1000.1),2,1);
      TempText := FORMAT(CalcInteger);
      TempText := DELCHR(TempText,'=',ThousandChar);
      TempText := CONVERTSTR(TempText,',','.');
      EXIT(TempText);
    END;

    LOCAL PROCEDURE Decimal2Integer@56(DecimalNumber@1000000001 : Decimal) IntegerNumber@1000000000 : Integer;
    BEGIN
      IntegerNumber := ROUND(DecimalNumber,0.01,'>') * 100;
    END;

    LOCAL PROCEDURE GetShippingZoneChart@2(VAR ShippingZone@1240030000 : Record 14000763;CurrentShippingAgentService@1240030001 : Record 14000708;FromZIPCode@1240030002 : Code[20];FromState@1240030003 : Code[30];ToZIPCode@1240030004 : Code[20];ToCountryCode@1240030005 : Code[10];GiveError@1240030006 : Boolean) : Boolean;
    BEGIN
      WITH CurrentShippingAgentService DO BEGIN
        TESTFIELD("Service Indicator");

        IF STRLEN(FromZIPCode) > 5 THEN
         FromZIPCode := COPYSTR(FromZIPCode,1,5);

        IF (STRLEN(ToZIPCode) > 5) AND
           (NOT "World Wide Service") AND
           (NOT "UPS Canadian Service")
        THEN
          ToZIPCode := COPYSTR(ToZIPCode,1,5)
        ELSE
          IF "UPS Canadian Service" THEN
            ToZIPCode := COPYSTR(ToZIPCode,1,3);

        ShippingZone.RESET;
        IF NOT "World Wide Service" THEN
          ShippingZone.SETCURRENTKEY(
            "Service Indicator","From Min. Code","From Max. Code","To Min. Code","To Max. Code")
        ELSE
          ShippingZone.SETCURRENTKEY(
            "Service Indicator","From Min. Code","From Max. Code","To Country Code");
        ShippingZone.SETRANGE("Service Indicator","Service Indicator");
        ShippingZone.SETFILTER("From Min. Code",'<=%1',FromZIPCode);
        ShippingZone.SETFILTER("From Max. Code",'>=%1',FromZIPCode);
        IF NOT "World Wide Service" THEN BEGIN
          ShippingZone.SETFILTER("To Min. Code",'<=%1',ToZIPCode);
          ShippingZone.SETFILTER("To Max. Code",'>=%1',ToZIPCode);
        END ELSE
          ShippingZone.SETRANGE("To Country Code",GetUPSCountryCode(ToCountryCode));
        IF NOT ShippingZone.FIND('-') THEN BEGIN
          IF "World Wide Service" THEN BEGIN
            ShippingZone.SETRANGE("From Min. Code",'');
            ShippingZone.SETRANGE("From Max. Code",'');
            ShippingZone.SETRANGE("From State",FromState);
            IF NOT ShippingZone.FIND('-') THEN BEGIN
              IF GiveError THEN
                ERROR(
                  Text029,
                  "Shipping Agent Code",Code,FromState,GetUPSCountryCode(ToCountryCode))
              ELSE
                EXIT(FALSE);
            END;
      //
          END ELSE
            IF NOT ShippingZone.FIND('-') THEN BEGIN
              IF GiveError THEN
                ERROR(
                  Text030,
                  "Shipping Agent Code",Code,
                  FromZIPCode,ToZIPCode)
              ELSE
                EXIT(FALSE);
            END;
        END;
        IF ShippingZone.NEXT <> 0 THEN
          IF GiveError THEN
            ERROR(Text031)
          ELSE
            EXIT(FALSE);

        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetHundredWeight@29(VAR HundredWeightService@1000000000 : Record 14000765;CurrentShippingAgentService@1000000001 : Record 14000708;CurrentShippingAgentAccount@1000000002 : Record 14000770;ZoneCode@1000000003 : Code[10];TotalWeight@1000000004 : Decimal;ResidentialDelivery@1000000005 : Boolean;NoOfPackages@1240030000 : Integer;GiveError@1000000006 : Boolean) : Boolean;
    VAR
      ShippingZone@1240030003 : Record 14000766;
      TotalWeightCalc@1240030002 : Decimal;
    BEGIN
      WITH CurrentShippingAgentService DO BEGIN
        TESTFIELD("Service Indicator");
        IF NOT CurrentShippingAgentService."UPS Hundred Weight Available" THEN
          IF GiveError THEN
            ERROR(Text032,Code)
          ELSE
            EXIT(FALSE);

        ShippingZone.GET(CurrentShippingAgentService."Service Indicator",ZoneCode);
        IF TotalWeight < ShippingZone."Minimum Hundred Weight" THEN
          TotalWeightCalc := ShippingZone."Minimum Hundred Weight"
        ELSE
          TotalWeightCalc := TotalWeight;

        HundredWeightService.RESET;
        HundredWeightService.SETRANGE("Service Indicator","Service Indicator");
        HundredWeightService.SETRANGE(Zone,ZoneCode);
        HundredWeightService.SETRANGE(Tier,CurrentShippingAgentAccount."Hundred Weight Tier");
        IF NOT HundredWeightService.FIND('-') THEN
          IF GiveError THEN
            ERROR(Text032,Code)
          ELSE
            EXIT(FALSE);

        IF TotalWeightCalc / NoOfPackages < HundredWeightService."Min Wgt. Per Package" THEN
          TotalWeightCalc := HundredWeightService."Min Wgt. Per Package" * NoOfPackages;

        IF TotalWeightCalc < 500 THEN
          HundredWeightService.SETFILTER("Minimum Weight",'100..200')
        ELSE
          IF TotalWeightCalc < 1000 THEN
            HundredWeightService.SETRANGE("Minimum Weight",500)
          ELSE
            HundredWeightService.SETRANGE("Minimum Weight",1000);
        IF "UPS Residential Serv. Avail." AND ResidentialDelivery THEN
          HundredWeightService.SETRANGE(Residential,TRUE)
        ELSE
          HundredWeightService.SETRANGE(Residential,FALSE);
        IF NOT HundredWeightService.FIND('+') THEN BEGIN
          IF GiveError THEN
            ERROR(Text032,Code)
          ELSE
            EXIT(FALSE);
        END ELSE BEGIN
          IF (HundredWeightService."Min. Tier Charge" > 0) AND
             (ROUND((TotalWeightCalc * HundredWeightService."Rate per Pound")) <
              HundredWeightService."Min. Tier Charge")
          THEN
            HundredWeightService."Rate per Pound" :=
            HundredWeightService."Min. Tier Charge" / TotalWeight
          ELSE
            HundredWeightService."Rate per Pound" :=
              (TotalWeightCalc * HundredWeightService."Rate per Pound") / TotalWeight;
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE GetUPSCountryCode@31(CountryCode@1000000000 : Code[10]) : Code[10];
    VAR
      Country@1000000001 : Record 9;
    BEGIN
      IF CountryCode <> '' THEN BEGIN
        Country.GET(CountryCode);
        Country.TESTFIELD(UPS);
        Country.TESTFIELD("ISO 2 char Country Code");
        EXIT(Country."ISO 2 char Country Code");
      END ELSE
        EXIT('US');
    END;

    LOCAL PROCEDURE TestAndTransferToThridParty@60(VAR CurrentPackage@1240030000 : Record 14000701;UPSOptionPage@1240030001 : Record 14000761;CurrentShippingAgentService@1240030002 : Record 14000708);
    BEGIN
      WITH CurrentPackage DO BEGIN
        IF "World Wide Service" OR "UPS Canadian Service" OR "UPS Puerto Rico Service" THEN BEGIN
          IF UPSOptionPage."International Billing" IN
             [UPSOptionPage."International Billing"::"Third Party",
              UPSOptionPage."International Billing"::FreightCollect]
          THEN BEGIN
            TransferToThirdPartyCost(CurrentShippingAgentService."Markup on Zero Shipping Cost");
            IF UPSOptionPage."Shipper Pays Declared Value" THEN BEGIN
              "Shipping Cost" := "Insurance Charge";
              "Accessorial Charge" := "Insurance Charge";
              "Third Party Accessorial Charge" := "Third Party Accessorial Charge" - "Insurance Charge";
            END;
          END ELSE
              ClearThirdPartyCost;
        END ELSE
          IF "Shipping Payment Type" <> "Shipping Payment Type"::Prepaid THEN BEGIN
            TransferToThirdPartyCost(CurrentShippingAgentService."Markup on Zero Shipping Cost");
            IF UPSOptionPage."Shipper Pays Declared Value" THEN BEGIN
              "Shipping Cost" := "Insurance Charge";
              "Accessorial Charge" := "Insurance Charge";
            END;
          END ELSE
            ClearThirdPartyCost;
      END;
    END;

    LOCAL PROCEDURE TestAndTransferToThridPartyRS@61(CurrentRateShopHeader@1000000000 : Record 14000741;VAR CurrentRateShopLine@1000000001 : Record 14000742;UPSOptionPage@1000000002 : Record 14000761;CurrentShippingAgentService@1000000003 : Record 14000708);
    BEGIN
      WITH CurrentRateShopLine DO BEGIN
        IF CurrentRateShopHeader."Shipping Payment Type" <>
           CurrentRateShopHeader."Shipping Payment Type"::Prepaid
        THEN
          TransferToThirdPartyCost(
            CurrentRateShopHeader,CurrentShippingAgentService."Markup on Zero Shipping Cost")
        ELSE
          ClearThirdPartyCost;
      END;
    END;

    PROCEDURE WideBarCode@66(ExternalTrackingNo@1000000000 : Code[20]) : Boolean;
    VAR
      i@1000000001 : Integer;
    BEGIN
      FOR i := 1 TO STRLEN(ExternalTrackingNo) DO
        IF STRPOS('ABCDEFGHIJKLMNOPQRSTUVWWXY',COPYSTR(ExternalTrackingNo,i,1)) > 0 THEN
          EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE GetDimensionalWeight@34(ShippingAgentService@1240030001 : Record 14000708;Height@1240030002 : Decimal;Width@1240030003 : Decimal;Length@1240030004 : Decimal) DimensionalWeight@1240030000 : Decimal;
    VAR
      CubicDim@1240030005 : Decimal;
    BEGIN
      GetShippingSetup;

      Height := ROUND(Height,1);
      Width := ROUND(Width,1);
      Length := ROUND(Length,1);
      CubicDim := Height * Width * Length;

      IF ShippingAgentService."World Wide Service" OR ShippingAgentService."UPS Canadian Service"
      THEN BEGIN
        IF (ShippingSetup."Default Size Units" = ShippingSetup."Default Size Units"::"IN") THEN BEGIN
          IF (ShippingAgentService."Service Indicator" <> '11') OR
             (CubicDim >= 5184)
          THEN
            DimensionalWeight := ROUND(CubicDim / 166,1,'>');
        END ELSE
          IF (ShippingAgentService."Service Indicator" <> '11') OR
             (CubicDim >= 84951)
          THEN
            DimensionalWeight := ROUND(ShippingSetup.KiloToPound(CubicDim / 6000),1);
      END ELSE BEGIN
        IF ShippingSetup."Default Size Units" = ShippingSetup."Default Size Units"::"IN" THEN BEGIN
          IF (ShippingAgentService."Service Indicator" <> '03') OR
             (CubicDim >= 5184)
          THEN
            DimensionalWeight := ROUND(CubicDim / 194,1,'>');
        END ELSE
          IF CubicDim >= 84951 THEN
            DimensionalWeight := ROUND(ShippingSetup.KiloToPound(ROUND(CubicDim / 7012.05,1)),0.01)
      END;

      IF (ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::LBS) AND
         (ShippingSetup."Default Size Units" = ShippingSetup."Default Size Units"::CM)
      THEN
        DimensionalWeight := ROUND(ShippingSetup.KiloToPound(DimensionalWeight),0.01);

      IF (ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::KGS) AND
         (ShippingSetup."Default Size Units" = ShippingSetup."Default Size Units"::"IN")
      THEN
        DimensionalWeight := ROUND(ShippingSetup.PoundToKilo(DimensionalWeight),0.01);
    END;

    PROCEDURE GetTotalShipments@1(Rec@1240030001 : Record 14000713) TotalShipments@1240030000 : Integer;
    VAR
      UPSManifest@1240030002 : Record 14000768;
    BEGIN
      WITH Rec DO BEGIN
        UPSManifest.RESET;
        UPSManifest.SETCURRENTKEY("Manifest No.","Shipper Account Number","Record Type");
        UPSManifest.SETRANGE("Manifest No.","Manifest No.");
        UPSManifest.SETRANGE("Shipper Account Number","Shipping Agent Account No.");
        UPSManifest.SETRANGE("Record Type",'0100');
        UPSManifest.SETRANGE("First Package",TRUE);
        TotalShipments := 0;
        IF UPSManifest.FIND('-') THEN
          REPEAT
            TotalShipments := TotalShipments + 1;
          UNTIL UPSManifest.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE TestForHazMat@6(CurrentPackage@1240030000 : Record 14000701) : Boolean;
    VAR
      Package@1240030001 : Record 14000701;
      PackageLine@1240030002 : Record 14000702;
      UPSHazMat@1240030003 : Record 14000773;
    BEGIN
      WITH CurrentPackage DO BEGIN
        PackageLine.RESET;
        PackageLine.SETRANGE("Package No.","No.");
        IF PackageLine.FIND('-') THEN
          REPEAT
            IF PackageLine.Type <> PackageLine.Type::Package THEN BEGIN
              UPSHazMat.RESET;
              UPSHazMat.SETRANGE(Type,PackageLine.Type);
              UPSHazMat.SETRANGE("No.",PackageLine."No.");
              IF UPSHazMat.FIND('-') THEN
                EXIT(TRUE);
            END ELSE BEGIN
              Package.GET(PackageLine."No.");
              EXIT(TestForHazMat(Package));
            END;
          UNTIL PackageLine.NEXT = 0
        ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE GetCalculationWeightRate@52(VAR UPSOptionPage@1240030000 : Record 14000761;CurrentShippingAgentService@1240030001 : Record 14000708;VAR CalculationWeight@1240030002 : Decimal;VAR CalculationWeightLBS@1240030003 : Decimal;VAR DimensionalWeight@1240030004 : Decimal;VAR ModifyUPSOptionPage@1240030005 : Boolean;VAR UseDimWeight@1240030006 : Boolean;WorldWideService@1240030007 : Boolean;UPSCanadianService@1240030008 : Boolean;UPSPuertoRicoService@1240030009 : Boolean;GiveError@1240030010 : Boolean;CurrentLength@1240030014 : Decimal;CurrentWidth@1240030015 : Decimal;CurrentHeight@1240030016 : Decimal) : Boolean;
    VAR
      TotalDimension@1240030011 : Integer;
      Precision@1240030012 : Decimal;
      SecondLongestDim@1240030013 : Integer;
      Package@1240030017 : Record 14000701;
      UPSAccessorialCharge@1240030018 : Record 14000767;
    BEGIN
      IF ShippingAgentAccount."Manifest Version" >= ShippingAgentAccount."Manifest Version"::"7.00" THEN
        Precision := 0.1
      ELSE
        Precision := 1;

      IF (UPSOptionPage."UPS Packaging Type" = UPSOptionPage."UPS Packaging Type"::"UPS Letter") AND
         (CalculationWeight = 0)
      THEN
        CalculationWeight := 0.1;

      IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::KGS THEN BEGIN
        CalculationWeightLBS := ROUND(ShippingSetup.KiloToPound(CalculationWeight),Precision,'>');
        CalculationWeight := ROUND(CalculationWeight,Precision,'>');
      END ELSE BEGIN
        CalculationWeight := ROUND(CalculationWeight,Precision,'>');
        CalculationWeightLBS := CalculationWeight;
      END;

      IF NOT WorldWideService AND NOT UPSCanadianService AND NOT UPSPuertoRicoService AND
         (CalculationWeightLBS > 150) THEN
        IF GiveError THEN
          ERROR(
            Text035,
            CalculationWeightLBS)
        ELSE
          EXIT(FALSE);

      IF (CurrentHeight <> 0) THEN BEGIN
        CASE TRUE OF
          (CurrentHeight >= CurrentWidth) AND (CurrentHeight >= CurrentLength):
            BEGIN
              TotalDimension := CurrentHeight + 2 * CurrentWidth + 2 * CurrentLength;
              IF CurrentWidth > CurrentLength THEN
                SecondLongestDim := CurrentWidth
              ELSE
                SecondLongestDim := CurrentLength;
            END;

          (CurrentWidth >= CurrentHeight) AND (CurrentWidth >= CurrentLength):
            BEGIN
              TotalDimension := 2 * CurrentHeight + CurrentWidth + 2 * CurrentLength;
              IF CurrentHeight > CurrentLength THEN
                SecondLongestDim := CurrentHeight
              ELSE
                SecondLongestDim := CurrentLength;
            END;

          ELSE
            BEGIN
              TotalDimension := 2 * CurrentHeight + 2 * CurrentWidth + CurrentLength;
              IF CurrentHeight > CurrentWidth THEN
                SecondLongestDim := CurrentHeight
              ELSE
                SecondLongestDim := CurrentWidth;
            END;
        END;

        IF TotalDimension > 165 THEN
          IF GiveError THEN
            ERROR(Text015)
          ELSE
            EXIT(FALSE);

        IF NOT UPSOptionPage."Large Package" AND
           (TotalDimension > 130)
        THEN BEGIN
          IF UPSAccessorialCharge.GET(UPSAccessorialCharge.Type::UPS,'VERSION') THEN BEGIN
            IF NOT WorldWideService THEN
              UPSOptionPage."Large Package" := TRUE;
          END ELSE
            IF (NOT WorldWideService AND
                NOT UPSCanadianService) OR
               (CurrentShippingAgentService."Service Indicator" = '11')
            THEN
              UPSOptionPage."Large Package" := TRUE;

          IF UPSOptionPage."Large Package" THEN
            ModifyUPSOptionPage := TRUE;
        END;

        IF (NOT UPSOptionPage."Large Package") AND
           ((CurrentLength > 60) OR (CurrentWidth > 60) OR (CurrentHeight > 60) OR
            (CalculationWeightLBS > 70) OR
            (SecondLongestDim > 30))
        THEN BEGIN
          UPSOptionPage."Additional Handling Required" := TRUE;
          ModifyUPSOptionPage := TRUE;
        END;
      END;

      IF UPSOptionPage."Large Package" AND
         (CalculationWeightLBS < 90)
      THEN BEGIN
        CalculationWeightLBS := 90;
        IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::LBS THEN
          CalculationWeight := 90
        ELSE
          CalculationWeight := ROUND(ShippingSetup.PoundToKilo(CalculationWeightLBS),Precision,'>');
      END;

      UPSOptionPage.TESTFIELD("Oversized Package",FALSE);
      UPSOptionPage.TESTFIELD("Oversized Package 2",FALSE);
      UPSOptionPage.TESTFIELD("Oversized Package 3",FALSE);

      IF ShippingAgentAccount."Automatic Dimensional Weight" THEN BEGIN
        IF (CurrentHeight = 0) AND (CurrentWidth = 0) AND (CurrentLength = 0) THEN BEGIN
          DimensionalWeight := 0;
          UseDimWeight := FALSE;
        END ELSE BEGIN
          IF (CurrentHeight = 0) OR (CurrentWidth = 0) OR (CurrentLength = 0) THEN
            IF GiveError THEN
              ERROR(Text013,UPSOptionPage.TABLENAME)
            ELSE
              EXIT(FALSE);

          DimensionalWeight :=
            GetDimensionalWeight(CurrentShippingAgentService,CurrentHeight,CurrentWidth,CurrentLength);

          UseDimWeight := CalculationWeight < DimensionalWeight;
        END;
      END;

      IF UseDimWeight THEN BEGIN
        CalculationWeight := ROUND(DimensionalWeight,Precision,'>');
        IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::LBS THEN
          CalculationWeightLBS := CalculationWeight
        ELSE
          CalculationWeightLBS :=
            ROUND(ShippingSetup.KiloToPound(DimensionalWeight),Precision,'>');
      END;

      IF (CurrentShippingAgentService."Service Indicator" = '11') AND
         (UPSOptionPage.Type = UPSOptionPage.Type::Package) AND
         Package.GET(UPSOptionPage."Source ID")
      THEN BEGIN
        Package.GET(UPSOptionPage."Source ID");
        IF (Package."Total Packages" > 1) AND
           (CalculationWeightLBS < 15)
        THEN BEGIN
          CalculationWeightLBS := 15;
          IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::LBS THEN
            CalculationWeight := CalculationWeightLBS
          ELSE
            CalculationWeight := ROUND(ShippingSetup.PoundToKilo(CalculationWeightLBS),0.1,'>');
        END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE TrackPackage@1240030001(CurrentPackage@1240030000 : Record 14000701);
    VAR
      Country@1240030010 : Record 9;
    BEGIN
      WITH CurrentPackage DO BEGIN
        ShippingAgent.GET("Shipping Agent Code");

        Country.INIT;
        IF "Ship-to Country Code" <> '' THEN
          Country.GET("Ship-to Country Code");

        HYPERLINK(
          STRSUBSTNO(
            ShippingAgent."Internet Address","External Tracking No.",Country.Code,
            "Pickup Date",ShippingAgent."Account No."));
      END;
    END;

    PROCEDURE GetHWAccessorials@1240030002(SaturdayDelivery@1240030007 : Boolean;SaturdayPickup@1240030011 : Boolean;ResidentialDelivery@1240030012 : Boolean;NoOfPackages@1240030009 : Integer;ShipToZip@1240030008 : Code[10];ServiceIndicator@1240030010 : Code[10];VAR SaturdayDeliveryCharge@1240030005 : Decimal;VAR SaturdayPickupCharge@1240030004 : Decimal;VAR CWTResidentialSurcharge@1240030001 : Decimal;VAR CWTDASurcharge@1240030002 : Decimal;VAR DASurcharge@1240030000 : Decimal;VAR LargePackageFee@1240030006 : Decimal);
    VAR
      UPSAccessorialCharge@1240030003 : Record 14000767;
    BEGIN
      SaturdayDeliveryCharge := 0;
      SaturdayPickupCharge := 0;

      UPSAccessorialCharge.RESET;
      IF SaturdayDelivery OR SaturdayPickup THEN BEGIN
        UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::SC);
        IF NOT UPSAccessorialCharge.FIND('-') THEN
          UPSAccessorialCharge.Fee := 0;
      END;

      IF SaturdayDelivery AND
         (ServiceIndicator = '01')
      THEN
        SaturdayDeliveryCharge := UPSAccessorialCharge.Fee;

      IF SaturdayPickup THEN BEGIN
        // remove pickup charge and add per package charge based on one charge per hw shipment
        SaturdayPickupCharge :=
          ROUND(UPSAccessorialCharge.Fee / NoOfPackages) - UPSAccessorialCharge.Fee;
      END;

      CWTResidentialSurcharge := 0;
      CWTDASurcharge := 0;
      DASurcharge := 0;

      IF ResidentialDelivery THEN BEGIN
        UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::HRS);

        IF UPSAccessorialCharge.FIND('-') THEN
          CWTResidentialSurcharge :=  ROUND(UPSAccessorialCharge.Fee / NoOfPackages);
        UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::DASR);
        UPSAccessorialCharge.SETRANGE("From Zip Code",ShipToZip);

        IF UPSAccessorialCharge.FIND('-') THEN BEGIN
          DASurcharge :=  UPSAccessorialCharge.Fee;
          UPSAccessorialCharge.SETRANGE("From Zip Code");
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::CWTDAS);

          IF UPSAccessorialCharge.FIND('-') THEN
            CWTDASurcharge := ROUND(UPSAccessorialCharge.Fee / NoOfPackages);
        END;

        UPSAccessorialCharge.SETRANGE("From Zip Code");
      END ELSE BEGIN
        UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::DAS);
        UPSAccessorialCharge.SETRANGE("From Zip Code",ShipToZip);

        IF UPSAccessorialCharge.FIND('-') THEN BEGIN
          DASurcharge :=  UPSAccessorialCharge.Fee;
          UPSAccessorialCharge.SETRANGE("From Zip Code");
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::CWTDAS);
          IF UPSAccessorialCharge.FIND('-') THEN
            CWTDASurcharge := ROUND(UPSAccessorialCharge.Fee / NoOfPackages);
        END;

        UPSAccessorialCharge.SETRANGE("From Zip Code");
      END;

      IF ServiceIndicator = '03' THEN
        UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::LPS)
      ELSE
        UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::LAP);

      IF UPSAccessorialCharge.FIND('-') THEN
        LargePackageFee := UPSAccessorialCharge.Fee
      ELSE
        LargePackageFee := 0;
    END;

    PROCEDURE CheckName@1240030019(ShippingAgent@1240030010 : Record 291;FromType@1240030003 : 'Package,Document,Master Data';VAR Name@1240030001 : Text[100];VAR Name2@1240030002 : Text[100];VAR Contact@1240030005 : Text[100];NameCaption@1240030009 : Text[100];Name2Caption@1240030008 : Text[100];ContactCaption@1240030000 : Text[100]);
    VAR
      LongNameType@1240030004 : Integer;
    BEGIN
      LongNameType := NameAndAddressMgt.GetLongNameType(ShippingAgent,FromType);

      NameAndAddressMgt.CheckCorrectTextLen(Name,LongNameType,35,NameCaption);
      NameAndAddressMgt.CheckCorrectTextLen(Name2,LongNameType,35,Name2Caption);
      NameAndAddressMgt.CheckCorrectTextLen(Contact,LongNameType,35,ContactCaption);
    END;

    PROCEDURE CheckAddress@1240030000(ShippingAgent@1240030010 : Record 291;FromType@1240030014 : 'Package,Document,Master Data';VAR Address@1240030012 : Text[100];VAR Address2@1240030011 : Text[100];VAR City@1240030009 : Text[100];VAR PostCode@1240030008 : Code[100];VAR State@1240030007 : Text[100];VAR Country@1240030006 : Code[100];AddressCaption@1240030005 : Text[100];Address2Caption@1240030004 : Text[100];CityCaption@1240030003 : Text[100];PostCodeCaption@1240030002 : Text[100];StateCaption@1240030001 : Text[100];CountryCaption@1240030000 : Text[100]);
    VAR
      TempText@1240030013 : Text[100];
      LongAddressType@1240030015 : Integer;
    BEGIN
      LongAddressType := NameAndAddressMgt.GetLongAddressType(ShippingAgent,FromType);

      NameAndAddressMgt.CheckCorrectTextLen(Address,LongAddressType,35,AddressCaption);
      NameAndAddressMgt.CheckCorrectTextLen(Address2,LongAddressType,35,Address2Caption);
      NameAndAddressMgt.CheckCorrectTextLen(City,LongAddressType,35,CityCaption);
      TempText := PostCode;
      NameAndAddressMgt.CheckCorrectTextLen(TempText,LongAddressType,10,PostCodeCaption);
      PostCode := TempText;
      NameAndAddressMgt.CheckCorrectTextLen(State,LongAddressType,2,StateCaption);
    END;

    BEGIN
    END.
  }
}

