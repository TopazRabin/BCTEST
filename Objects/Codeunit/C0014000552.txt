OBJECT Codeunit 14000552 Usage Ledger Create
{
  OBJECT-PROPERTIES
  {
    Date=11/01/20;
    Time=12:00:00 PM;
    Version List=UBP3.03;
  }
  PROPERTIES
  {
    OnRun=VAR
            Location@1000 : Record 14;
          BEGIN
            Location.RESET;
            Location.SETRANGE("Enable Adv. Forecasting",TRUE);
            IF Location.FINDSET THEN
              REPEAT
                IF Location."Enable Adv. Forecasting" OR
                   Location."Enable Cust. Forecasting" OR
                   Location."Enable Moving Average" THEN BEGIN
                  UsageCreate(Location.Code);
                  COMMIT;
                END;
              UNTIL Location.NEXT = 0;
          END;

  }
  CODE
  {
    VAR
      Text000@14000512 : TextConst 'ENU=Creating Usage Entries';
      Text001@14000513 : TextConst 'ENU=Location';
      Text002@14000514 : TextConst 'ENU=Progress';
      Text003@1240030012 : TextConst 'ENU=Check For New Procurement Units';
      Text004@1240030013 : TextConst 'ENU=Location';
      Text005@1240030014 : TextConst 'ENU=Progress Qty. on Hand';
      Text006@1240030018 : TextConst 'ENU=Neg. Adj. Converted to Sale';
      Text007@1240030023 : TextConst 'ENU=Consumption Converted to Sale';
      Text008@1001 : TextConst 'ENU=Demand Date Adjustment';
      Text009@1002 : TextConst 'ENU=Removing Demand Date Adjustments';
      ItemLedgEntry@1240020000 : Record 32;
      InvMgtSetup@1033 : Record 14000551;
      UsageLedEnt@1008 : Record 14000556;
      ProcUnit@1030 : Record 14000555;
      ProcUnitTmp@1029 : TEMPORARY Record 14000555;
      LocInvPeriod@1018 : Record 14000553;
      InvMgt@1017 : Codeunit 14000553;
      Window@1015 : Dialog;
      ForecastCust@1012 : Boolean;
      LastEntryNo@1005 : Integer;
      TotalCount@1011 : Integer;
      ProcCount@1010 : Integer;
      UBPLogEntryNo@1007 : Integer;
      ItemCount@1006 : Integer;
      LastDateClosed@1004 : Date;
      ItemUsageEntryNo@1000 : Integer;
      ilecounter@1016 : Integer;
      HasSetup@1009 : Boolean;
      ServiceIsActive@1003 : Boolean;

    LOCAL PROCEDURE UsageCreate@15(CurrLocCode@1000 : Code[10]);
    VAR
      ILEFilter@1002 : Text[250];
      Location@1001 : Record 14;
      FirstEntryNo@1003 : Integer;
      GlobalUsageRedirect@1240020000 : Codeunit 14000573;
    BEGIN
      Location.GET(CurrLocCode);

      GetInvMgtSetup;
      InvMgtSetup.TESTFIELD("Usage Start Date");

      LocInvPeriod.RESET;
      LocInvPeriod.SETRANGE("Location Code",Location.Code);
      LocInvPeriod.SETRANGE("Period End Closed",TRUE);
      IF LocInvPeriod.FINDLAST THEN
        LastDateClosed := LocInvPeriod."Ending Date"
      ELSE
        LastDateClosed := 0D;

      // Check Redirect sequence
      GlobalUsageRedirect.CheckRedirectSequence;
      COMMIT;

      // Demand Date Adjustment
      AdjustForUnshippedLines(Location.Code);
      COMMIT;

      // Is Collaborative Active
      ForecastCust := IsCustCollaborativeActive;
      ServiceIsActive := Location."Include Service Usage";

      // Start Usage create
      InvMgt.CreateLogEntry(Location.Code,Text000,UBPLogEntryNo);

      ItemLedgEntry.RESET;
      FirstEntryNo := FindFirstEntry(Location.Code);
      IF FirstEntryNo = 0 THEN BEGIN
        InvMgt.CloseLogEntry(UBPLogEntryNo,'');
        EXIT;
      END;

      ItemLedgEntry.RESET;
      ItemLedgEntry.SETRANGE("Location Code",Location.Code);
      ItemLedgEntry.SETFILTER("Entry No.",'%1..',FirstEntryNo);
      IF InvMgtSetup."Roll Up Via Repl. Path" THEN
        ILEFilter := FORMAT(ItemLedgEntry."Entry Type"::Sale)
      ELSE
        ILEFilter := FORMAT(ItemLedgEntry."Entry Type"::Sale) + '|' + FORMAT(ItemLedgEntry."Entry Type"::Transfer);
      IF InvMgtSetup."Consider Neg. Adj. as Usage" THEN
        ILEFilter := ILEFilter + '|' + FORMAT(ItemLedgEntry."Entry Type"::"Negative Adjmt.");
      IF InvMgtSetup."Consider Comp. Cons. as Usage" THEN BEGIN
        ILEFilter := ILEFilter + '|' + FORMAT(ItemLedgEntry."Entry Type"::Consumption);
        ILEFilter := ILEFilter + '|' + FORMAT(ItemLedgEntry."Entry Type"::"Assembly Consumption");
      END;
      ItemLedgEntry.SETFILTER("Entry Type",ILEFilter);
      ItemLedgEntry.SETFILTER("Item No.",'<>%1','');
      ItemLedgEntry.SETRANGE(Correction, FALSE);

      TotalCount := ItemLedgEntry.COUNT;
      IF TotalCount > 0 THEN BEGIN

      IF GUIALLOWED THEN BEGIN
        Window.OPEN(
          Text000 + '\' +
          PADSTR(Text001,10) + '#1##################\' +
          PADSTR(Text002,10) + '@2@@@@@@@@@@@@@@@@@@');
        Window.UPDATE(1,Location.Code);
      END;

      UsageLedgerCreate;


      IF GUIALLOWED THEN
        Window.CLOSE;
      END;
      UsageLedgerCreateIncludeInSales(CurrLocCode);
      CreateProcUnitsFromTemp;

      InvMgt.CloseLogEntry(UBPLogEntryNo,'');
    END;

    LOCAL PROCEDURE FindFirstEntry@17(VAR CurrLocationCode@1001 : Code[10]) EntryNo : Integer;
    BEGIN
      UsageLedEnt.RESET;
      UsageLedEnt.SETRANGE("Original Location Code", CurrLocationCode);
      IF UsageLedEnt.FINDLAST THEN
        EntryNo := UsageLedEnt."Entry No." + 1
      ELSE BEGIN
        ItemLedgEntry.SETRANGE("Location Code", CurrLocationCode);
        ItemLedgEntry.SETFILTER("Posting Date",'%1..',InvMgtSetup."Usage Start Date");
        IF NOT ItemLedgEntry.FINDFIRST THEN
          EntryNo := 0
        ELSE
          EntryNo := ItemLedgEntry."Entry No.";
      END;
    END;

    LOCAL PROCEDURE CreateProcUnit@1240030000(CurrLocation@1240030000 : Code[10];CurrItem@1240030001 : Code[50];CurrVariant@1240030002 : Code[10]);
    BEGIN
      IF ProcUnitTmp.GET(CurrLocation,CurrItem,CurrVariant) THEN BEGIN
        ProcUnit.COPY(ProcUnitTmp);
        EXIT;
      END;
      ProcUnitTmp.INIT;
      ProcUnitTmp."Location Code" := CurrLocation;
      ProcUnitTmp."Item No." := CurrItem;
      ProcUnitTmp."Variant Code" := CurrVariant;
      ProcUnitTmp.Review := TRUE;
      ProcUnitTmp."Date Created" := TODAY;
      ProcUnitTmp."User ID" := USERID;
      ProcUnitTmp.SetAutoInsert;
      ProcUnitTmp.SetTemp;
      IF (InvMgtSetup."Summarize Variant Detail" = InvMgtSetup."Summarize Variant Detail"::Always) AND
         (ProcUnitTmp."Variant Code" = '') THEN
        ProcUnitTmp.VALIDATE("Summarize Variant Detail",TRUE);
      ProcUnitTmp.INSERT(TRUE);

      IF InvMgtSetup."Summarize Variant Detail" = InvMgtSetup."Summarize Variant Detail"::Always THEN
        IF ProcUnitTmp."Variant Code" <> '' THEN BEGIN
          IF NOT ProcUnit.GET(ProcUnitTmp."Location Code",ProcUnitTmp."Item No.",'') THEN BEGIN
            ProcUnitTmp."Variant Code" := '';
            ProcUnitTmp.VALIDATE("Summarize Variant Detail",TRUE);
            ProcUnitTmp.SetAutoInsert;
            ProcUnitTmp.SetTemp;
            IF ProcUnitTmp.INSERT(TRUE) THEN;
          END;
        END;
    END;

    LOCAL PROCEDURE CheckClosedPeriod@1240030005(LocationCode@1240030001 : Code[10];UsageDate@1240030002 : Date);
    VAR
      LocInvPer@1240030000 : Record 14000553;
    BEGIN
      IF (LocInvPer."Location Code" = LocationCode) AND
         (LocInvPer."Starting Date" <= UsageDate) AND
         (LocInvPer."Ending Date" >= UsageDate) THEN
        EXIT;
      LocInvPer.RESET;
      LocInvPer.SETCURRENTKEY("Location Code","Starting Date","Ending Date");
      LocInvPer.SETRANGE("Location Code",LocationCode);
      LocInvPer.SETFILTER("Starting Date",'<=%1',UsageDate);
      LocInvPer.SETFILTER("Ending Date",'>=%1',UsageDate);
      IF LocInvPer.FINDFIRST THEN
        IF LocInvPer."Period End Closed" AND (NOT LocInvPer."Adj. After Close") THEN BEGIN
          LocInvPer."Adj. After Close" := TRUE;
          LocInvPer.MODIFY;
      END;
    END;

    LOCAL PROCEDURE CheckProcUnit@1240030002(LocationCode@1240030002 : Code[10];ItemNo@1240030000 : Code[50];VariantNo@1240030001 : Code[10]);
    BEGIN
      IF ProcUnit.GET(LocationCode,ItemNo,VariantNo) THEN
        EXIT;
      IF ProcUnitTmp.GET(LocationCode,ItemNo,VariantNo) THEN BEGIN
        ProcUnit.COPY(ProcUnitTmp);
        EXIT;
      END;
      ProcUnitTmp.INIT;
      ProcUnitTmp."Location Code" := LocationCode;
      ProcUnitTmp."Item No." := ItemNo;
      ProcUnitTmp."Variant Code" := VariantNo;
      ProcUnitTmp.SETFILTER("Location Filter",LocationCode);
      ProcUnitTmp.CALCFIELDS(Inventory);
      IF ProcUnitTmp.Inventory <> 0 THEN BEGIN
        ProcUnitTmp.SetTemp;
        ProcUnitTmp.SetAutoInsert;
        ProcUnitTmp.INSERT;
        ProcUnit.COPY(ProcUnitTmp);
      END;
    END;

    LOCAL PROCEDURE AdjustForUnshippedLines@1240030003(CurrLocationCode@1240030004 : Code[10]);
    VAR
      LocInvPeriod@1240030005 : Record 14000553;
      LocProcUnit@1240030012 : Record 14000555;
      LocUsageLedgerEntry@1240030000 : Record 14000556;
      LocUsageLedgerEntry2@1240020000 : Record 14000556;
      SalesHdr@1240030006 : Record 36;
      SalesLine@1240030001 : Record 37;
      LocDispWindow@1240030007 : Dialog;
      DatesToCheck@1240030002 : Integer;
      LocEntryNo@1240030003 : Integer;
      LocText001@1240030008 : TextConst 'ENU=Demand Date Adjust';
      LocText002@1240030009 : TextConst 'ENU=Location';
      LocText003@1240030010 : TextConst 'ENU=Order No.';
      LocText004@1240030011 : TextConst 'ENU=Item No.';
      GlobalUsageRedirect@1000 : Codeunit 14000573;
      ForecastCustItem@1001 : Record 14002602;
      UBP@1240020001 : Codeunit 14000564;
    BEGIN
      IF InvMgtSetup."Usage Date to Use" = InvMgtSetup."Usage Date to Use"::"Demand Date" THEN BEGIN
        InvMgt.CreateLogEntry(CurrLocationCode,Text008,UBPLogEntryNo);

        LocInvPeriod.RESET;
        LocInvPeriod.SETFILTER("Ending Date",'<%1',WORKDATE);
        LocInvPeriod.SETRANGE(LocInvPeriod."Location Code",CurrLocationCode);
        IF NOT LocInvPeriod.FIND('+') THEN
          EXIT;

        IF GUIALLOWED THEN BEGIN
          LocDispWindow.OPEN(
            LocText001 + '\' +
            PADSTR(LocText002,10) + '#1########\' +
            PADSTR(LocText003,10) + '#2##################\' +
            PADSTR(LocText004,10) + '#3##################');
          LocDispWindow.UPDATE(1,CurrLocationCode);
        END;

        LocUsageLedgerEntry.RESET;
        LocUsageLedgerEntry.SETCURRENTKEY("Demand Adjustment");
        LocUsageLedgerEntry.SETRANGE("Demand Adjustment",TRUE);
        LocUsageLedgerEntry.SETRANGE("Location Code",CurrLocationCode);
        LocUsageLedgerEntry.DELETEALL;

        LocUsageLedgerEntry.RESET;
        LocEntryNo := -500000000;
        IF LocUsageLedgerEntry.FIND('-') THEN
          IF LocUsageLedgerEntry."Entry No." < -499999999 THEN
            LocEntryNo := LocUsageLedgerEntry."Entry No.";

        IF InvMgtSetup."Requested Delivery Date Req." THEN
          DatesToCheck := 1
        ELSE
          DatesToCheck := 2;

        SalesLine.RESET;
        SalesLine.SETCURRENTKEY(
          "Document Type","Document No.","Location Code");
        SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
        SalesLine.SETRANGE("Location Code",CurrLocationCode);
        SalesLine.SETRANGE(Type,SalesLine.Type::Item);
        SalesLine.SETFILTER("No.", '<>%1', '');
        SalesLine.SETFILTER("Outstanding Qty. (Base)",'<>%1',0);
        SalesLine.SETRANGE("Exclude from Usage",FALSE);
        CASE DatesToCheck OF
          1:
            SalesLine.SETFILTER(
              "Demand Date",'..%1',LocInvPeriod."Ending Date");
          2:
            BEGIN
              SalesLine.SETRANGE("Demand Date",0D);
              SalesLine.SETFILTER(
                "Planned Shipment Date",'..%1',LocInvPeriod."Ending Date");
            END;
        END;
        IF SalesLine.FIND('-') THEN BEGIN
          REPEAT
            IF GUIALLOWED THEN BEGIN
              LocDispWindow.UPDATE(2,SalesLine."Document No.");
              LocDispWindow.UPDATE(3,SalesLine."No.");
            END;
            SalesHdr.GET(SalesLine."Document Type",SalesLine."Document No.");
               LocUsageLedgerEntry.INIT;
            LocEntryNo := LocEntryNo - 1;
            LocUsageLedgerEntry."Entry No." := LocEntryNo;
            LocUsageLedgerEntry."Location Code" := SalesLine."Location Code";
            LocUsageLedgerEntry."Original Location Code" := SalesLine."Location Code";
            LocUsageLedgerEntry."Item No." := SalesLine."No.";
            LocUsageLedgerEntry."Original Item No." := SalesLine."No.";
            LocUsageLedgerEntry."Variant Code" := SalesLine."Variant Code";
            LocUsageLedgerEntry."Original Variant Code" := SalesLine."Variant Code";
            LocUsageLedgerEntry."Entry Type" := LocUsageLedgerEntry."Entry Type"::Sale;
            CASE DatesToCheck OF
              1:
                LocUsageLedgerEntry."Usage Date" := SalesLine."Demand Date";
              2:
                LocUsageLedgerEntry."Usage Date" := SalesLine."Planned Shipment Date";
            END;
            CASE InvMgtSetup."Track Customer Usage By" OF
              InvMgtSetup."Track Customer Usage By"::"Sell-To":
                BEGIN
                  LocUsageLedgerEntry."Source No." := SalesLine."Sell-to Customer No.";
                  LocUsageLedgerEntry."Original Source No." := SalesLine."Sell-to Customer No.";
                  LocUsageLedgerEntry."Original Ship-To code" := SalesHdr."Ship-to Code";
                  LocUsageLedgerEntry."Ship-To Code" := SalesHdr."Ship-to Code";
                END;
              InvMgtSetup."Track Customer Usage By"::"Bill-To":
                BEGIN
                  LocUsageLedgerEntry."Source No." := SalesHdr."Bill-to Customer No.";
                  LocUsageLedgerEntry."Original Source No." := SalesHdr."Bill-to Customer No.";
                END;
            END;
            LocUsageLedgerEntry."Document No." := SalesLine."Document No.";
            LocUsageLedgerEntry.Quantity := - SalesLine."Outstanding Qty. (Base)";
            LocUsageLedgerEntry."Document Date" := SalesHdr."Document Date";
            LocUsageLedgerEntry."External Document No." := SalesHdr."External Document No.";
            IF ForecastCustItem.GET(
              LocUsageLedgerEntry."Source No.",LocUsageLedgerEntry."Location Code",
              LocUsageLedgerEntry."Item No.",LocUsageLedgerEntry."Variant Code")
            THEN
              IF ForecastCustItem."Forecast Type" = ForecastCustItem."Forecast Type"::Total THEN
                LocUsageLedgerEntry."Forecast Customer" := TRUE;
            LocUsageLedgerEntry."Usage Hit" := 1;
            LocUsageLedgerEntry."Document Line No." := SalesLine."Line No.";

            GlobalUsageRedirect.ProcessRedirectSequence(LocUsageLedgerEntry);

            LocUsageLedgerEntry."Demand Adjustment" := TRUE;
            IF LocUsageLedgerEntry."Usage Date" <> 0D THEN BEGIN
              LocUsageLedgerEntry.INSERT;
              IF (NOT InvMgtSetup."Bypass Demand Adj. Reforecast") AND
                 (LastDateClosed <> 0D) THEN
                IF LocUsageLedgerEntry."Usage Date" <= LastDateClosed THEN BEGIN
                  IF LocProcUnit.GET(
                    LocUsageLedgerEntry."Location Code",LocUsageLedgerEntry."Item No.",
                    LocUsageLedgerEntry."Variant Code")
                  THEN BEGIN
                    IF (LocProcUnit."Change Reforecast Required" = FALSE) OR (LocProcUnit."Reforecast Item" = FALSE) THEN BEGIN
                      LocProcUnit."Change Reforecast Required" := TRUE;
                      IF (LocProcUnit."Replenishment Source Type" = LocProcUnit."Replenishment Source Type"::Location) OR
                          UBP.SpokesExist(LocProcUnit) THEN
                        LocProcUnit."Reforecast Item" := TRUE;
                      LocProcUnit.MODIFY;
                    END;
                  END;
                END;
            END;
          UNTIL SalesLine.NEXT = 0;
        END;
        IF GUIALLOWED THEN
          LocDispWindow.CLOSE;
        InvMgt.CloseLogEntry(UBPLogEntryNo,'');
      END ELSE BEGIN
        LocUsageLedgerEntry.RESET;
        LocUsageLedgerEntry.SETCURRENTKEY("Demand Adjustment");
        LocUsageLedgerEntry.SETRANGE("Demand Adjustment",TRUE);
        IF NOT LocUsageLedgerEntry.ISEMPTY THEN BEGIN

          InvMgt.CreateLogEntry(CurrLocationCode,Text009,UBPLogEntryNo);

          IF LocUsageLedgerEntry.FIND('-') THEN BEGIN
            REPEAT
              LocUsageLedgerEntry2.GET(LocUsageLedgerEntry."Entry No.");
              LocUsageLedgerEntry2.DELETE(TRUE);
              IF (LocProcUnit."Location Code" <> LocUsageLedgerEntry."Location Code") OR
                (LocProcUnit."Item No." <> LocUsageLedgerEntry."Item No.") OR
                (LocProcUnit."Variant Code" <> LocUsageLedgerEntry."Variant Code") THEN BEGIN
                IF LocProcUnit.GET(LocUsageLedgerEntry."Location Code", LocUsageLedgerEntry."Item No.",
                  LocUsageLedgerEntry."Variant Code") THEN;
              END;
              IF (LocProcUnit."Item No." <> '') AND
                ((LocProcUnit."Reforecast Item" = FALSE) OR (LocProcUnit."Change Reforecast Required" = FALSE))
                THEN BEGIN
                  LocProcUnit."Change Reforecast Required" := TRUE;
                  IF (LocProcUnit."Replenishment Source Type" = LocProcUnit."Replenishment Source Type"::Location) OR
                    UBP.SpokesExist(LocProcUnit) THEN
                    LocProcUnit."Reforecast Item" := TRUE;
                  LocProcUnit.MODIFY(FALSE);
              END;
            UNTIL LocUsageLedgerEntry.NEXT = 0;
          END;

          InvMgt.CloseLogEntry(UBPLogEntryNo,'');
        END;
      END;
    END;

    LOCAL PROCEDURE CreateItemUsageRecord@1(VAR CurrProcUnit@1240030000 : Record 14000555;UsageDate@1003 : Date);
    VAR
      ItemUsage@1240030002 : Record 14000557;
      FirstTranDate@1000 : Date;
      UBP@1001 : Codeunit 14000564;
      LocInvPeriod@1002 : Record 14000553;
      StartDate@1004 : Date;
      EndDate@1005 : Date;
    BEGIN
      IF (UsageDate < InvMgtSetup."Usage Start Date") THEN
        EXIT;

      ItemUsage.SETCURRENTKEY("Location Code","Item No.","Variant Code","Starting Date","Ending Date");

      IF UsageDate <> 0D THEN BEGIN
        LocInvPeriod.SETFILTER("Starting Date",'..%1',UsageDate);
        LocInvPeriod.SETRANGE("Location Code",CurrProcUnit."Location Code");
        IF LocInvPeriod.FINDLAST THEN BEGIN
          StartDate := LocInvPeriod."Starting Date";

          LocInvPeriod.SETFILTER("Starting Date", '..%1', WORKDATE);
          IF LocInvPeriod.FINDLAST THEN
            EndDate := LocInvPeriod."Ending Date";

          LocInvPeriod.SETFILTER("Starting Date", '%1..', StartDate);
          LocInvPeriod.SETFILTER("Ending Date", '..%1', EndDate);
          IF LocInvPeriod.FINDSET THEN BEGIN
            REPEAT
              ItemUsage.SETFILTER("Location Code",CurrProcUnit."Location Code");
              ItemUsage.SETRANGE("Item No.",CurrProcUnit."Item No.");
              ItemUsage.SETRANGE("Variant Code",CurrProcUnit."Variant Code");
              ItemUsage.SETRANGE("Ending Date",LocInvPeriod."Ending Date");
              ItemUsage.SETFILTER("Source No.",'=%1','');
              IF ItemUsage.ISEMPTY THEN BEGIN
                ItemUsage.INIT;
                ItemUsage."Entry No." := GetNextItemUsageEntryNo;
                ItemUsageEntryNo := ItemUsageEntryNo + 1;
                ItemUsage."Location Code" := CurrProcUnit."Location Code";
                ItemUsage."Item No." := CurrProcUnit."Item No.";
                ItemUsage."Variant Code" := CurrProcUnit."Variant Code";
                ItemUsage."Starting Date" := LocInvPeriod."Starting Date";
                ItemUsage."Ending Date" := LocInvPeriod."Ending Date";
                ItemUsage."Include Drop Ship Usage" := CurrProcUnit."Include Drop Ship Usage";
                ItemUsage.Unit := 1;
                ItemUsage.INSERT;
              END;
            UNTIL LocInvPeriod.NEXT = 0;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetNextItemUsageEntryNo@3() : Integer;
    VAR
      LocItemUsage@1000 : Record 14000557;
    BEGIN
      IF ItemUsageEntryNo = 0 THEN BEGIN
        LocItemUsage.LOCKTABLE;
        IF LocItemUsage.FINDLAST THEN
          ItemUsageEntryNo := LocItemUsage."Entry No."
      END;
      ItemUsageEntryNo := ItemUsageEntryNo + 1;
      EXIT(ItemUsageEntryNo);
    END;

    LOCAL PROCEDURE IsCustCollaborativeActive@2() : Boolean;
    VAR
      ForecastCustItem@1000 : Record 14002602;
    BEGIN
      IF NOT ForecastCustItem.ISEMPTY THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetBillToCustNo@16(SellToCustNo@1002 : Code[20]) BillToCustNo : Code[20];
    VAR
      BillToCustomer@1001 : Record 18;
      SellToCustomer@1000 : Record 18;
    BEGIN
      BillToCustNo := SellToCustNo;
      IF SellToCustomer.GET(SellToCustNo) THEN
        IF SellToCustomer."Bill-to Customer No." <> '' THEN
          IF BillToCustomer.GET(SellToCustomer."Bill-to Customer No.") THEN
            UsageLedEnt."Source No." := BillToCustomer."No.";
    END;

    LOCAL PROCEDURE UpdateProcUnit@11(LocationCode@1001 : Code[10];ItemNo@1002 : Code[50];VariantCode@1003 : Code[10];UsageDate@1000 : Date);
    VAR
      LocProcUnit@1005 : Record 14000555;
      ModifyProcUnit@1004 : Boolean;
      UBP@1240020000 : Codeunit 14000564;
    BEGIN
      IF LocProcUnit.GET(LocationCode,ItemNo,VariantCode) THEN BEGIN
        // Reforecast Proc Unit if entry is for closed period
        IF LastDateClosed <> 0D THEN BEGIN
          IF UsageLedEnt."Usage Date" <= LastDateClosed THEN BEGIN
            IF (LocProcUnit."Change Reforecast Required" = FALSE) OR (LocProcUnit."Reforecast Item" = FALSE) THEN BEGIN
              LocProcUnit."Change Reforecast Required" := TRUE;
              IF (LocProcUnit."Replenishment Source Type" = LocProcUnit."Replenishment Source Type"::Location) OR
                UBP.SpokesExist(LocProcUnit) THEN
                LocProcUnit."Reforecast Item" := TRUE;
              ModifyProcUnit := TRUE;
            END;
          END;
        END;

        IF (UsageDate < LocProcUnit."First Stocked Date") AND
          (UsageDate <> 0D) AND
          (UsageDate >= InvMgtSetup."Usage Start Date") AND
          (UsageLedEnt."Exclude from Usage" = FALSE) THEN BEGIN
          LocProcUnit."First Stocked Date" := UsageDate;
          ModifyProcUnit := TRUE;
        END;

        IF ModifyProcUnit THEN
          LocProcUnit.MODIFY(FALSE);
      END;
    END;

    LOCAL PROCEDURE UsageLedgerCreate@10();
    VAR
      Item@1000 : Record 27;
      FirstEntryNo@1001 : Integer;
      ULE@1240020000 : Record 14000556;
    BEGIN
      // initialize service
      IF NOT IsServiceActive(ItemLedgEntry) THEN BEGIN
        ServiceIsActive := FALSE;
      END;

      IF ItemLedgEntry.FINDSET THEN BEGIN
        FirstEntryNo := ItemLedgEntry."Entry No.";
        REPEAT
          // early version of NAV substitutions
          IF ItemLedgEntry."Originally Ordered No." <> '' THEN BEGIN
            ItemLedgEntry."Item No." := ItemLedgEntry."Originally Ordered No.";
            ItemLedgEntry."Variant Code" := ItemLedgEntry."Originally Ordered Var. Code";
          END;

          IF NOT ULE.GET(ItemLedgEntry."Entry No.") THEN BEGIN
          IF Item.GET(ItemLedgEntry."Item No.") THEN BEGIN
            InitializeULEfromILE;
            CASE ItemLedgEntry."Entry Type" OF
              ItemLedgEntry."Entry Type"::Transfer:
              BEGIN
                  InsertTransferUsage;
              END;
              ItemLedgEntry."Entry Type"::Sale:
              BEGIN
                InsertSalesUsage;
              END;
              ItemLedgEntry."Entry Type"::"Negative Adjmt.":
              BEGIN
                InsertNegAdjUsage;
              END;
              ItemLedgEntry."Entry Type"::Consumption,ItemLedgEntry."Entry Type"::"Assembly Consumption":
              BEGIN
                InsertConsumptionUsage;
              END;
            END;

            // create item usage records
            CreateItemUsageRecord(ProcUnitTmp,UsageLedEnt."Usage Date");

            // set reforecast, first stock dates
            UpdateProcUnit(UsageLedEnt."Location Code",UsageLedEnt."Item No.",
              UsageLedEnt."Variant Code",UsageLedEnt."Usage Date");

            ProcCount := ItemLedgEntry."Entry No." - FirstEntryNo;
            IF GUIALLOWED THEN
              IF ProcCount MOD 50 = 0 THEN
                Window.UPDATE(2,ROUND(10000 * (ProcCount / TotalCount),1));
          END;
          END;
        UNTIL ItemLedgEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UsageLedgerCreateIncludeInSales@1240020000(CurrLocCode@1240020000 : Code[10]);
    VAR
      Item@1000 : Record 27;
      ILEFilter@1240020001 : Text[250];
      IncludeAsSalesQuery@1240020002 : Query 14000556;
    BEGIN
      // look for consumption entries or negative adjustments to include as usage
      // only if those entries would normally be excluded and only when they've been "Included in sales usage"
      // feature to include any outbound entry as usage as long it has not already been included
      IF InvMgtSetup."Consider Neg. Adj. as Usage" THEN
        ILEFilter := FORMAT(ItemLedgEntry."Entry Type"::"Negative Adjmt.");
      IF NOT InvMgtSetup."Consider Comp. Cons. as Usage" THEN BEGIN
        IF ILEFilter = '' THEN
          ILEFilter := FORMAT(ItemLedgEntry."Entry Type"::Consumption)
        ELSE
          ILEFilter := ILEFilter + '|' + FORMAT(ItemLedgEntry."Entry Type"::Consumption);
        ILEFilter := ILEFilter + '|' + FORMAT(ItemLedgEntry."Entry Type"::"Assembly Consumption");
      END;
      IF ILEFilter = '' THEN
        EXIT;
      CLEAR(IncludeAsSalesQuery);
      IncludeAsSalesQuery.SETFILTER(Posting_Date, '%1..', InvMgtSetup."Usage Start Date");
      IncludeAsSalesQuery.SETFILTER(Entry_Type, ILEFilter);
      IncludeAsSalesQuery.SETRANGE(Location_Code, CurrLocCode);
      IncludeAsSalesQuery.SETRANGE(ULE_EntryNo, 0); // filter to only entry numbers that are not already in ULE
      IF IncludeAsSalesQuery.OPEN THEN BEGIN
        WHILE (IncludeAsSalesQuery.READ) DO BEGIN
          ItemLedgEntry.GET(IncludeAsSalesQuery.Entry_No);
          // early version of NAV substitutions
          IF ItemLedgEntry."Originally Ordered No." <> '' THEN BEGIN
            ItemLedgEntry."Item No." := ItemLedgEntry."Originally Ordered No.";
            ItemLedgEntry."Variant Code" := ItemLedgEntry."Originally Ordered Var. Code";
          END;
          IF Item.GET(ItemLedgEntry."Item No.") THEN BEGIN
            InitializeULEfromILE;
            CASE ItemLedgEntry."Entry Type" OF
              ItemLedgEntry."Entry Type"::Transfer:
              BEGIN
                InsertTransferUsage;
              END;
              ItemLedgEntry."Entry Type"::Sale:
              BEGIN
                InsertSalesUsage;
              END;
              ItemLedgEntry."Entry Type"::"Negative Adjmt.":
              BEGIN
                InsertNegAdjUsage;
              END;
              ItemLedgEntry."Entry Type"::Consumption,ItemLedgEntry."Entry Type"::"Assembly Consumption":
              BEGIN
                InsertConsumptionUsage;
              END;
            END;
            // create item usage records
            CreateItemUsageRecord(ProcUnitTmp,UsageLedEnt."Usage Date");
            // set reforecast, first stock dates
            UpdateProcUnit(UsageLedEnt."Location Code",UsageLedEnt."Item No.",
              UsageLedEnt."Variant Code",UsageLedEnt."Usage Date");
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CreateProcUnitsFromTemp@6();
    VAR
      UBP@1000 : Codeunit 14000564;
      CreateProcUnit@1240020000 : Codeunit 14000575;
    BEGIN
      ProcUnitTmp.RESET;
      IF ProcUnitTmp.FINDSET THEN
        REPEAT
          IF NOT ProcUnit.GET(ProcUnitTmp."Location Code", ProcUnitTmp."Item No.", ProcUnitTmp."Variant Code") THEN BEGIN
            ProcUnit.INIT;
            ProcUnit.COPY(ProcUnitTmp);
            ProcUnit.SetAutoInsert;
            ProcUnit."First Stocked Date" := UBP.GetFirstStockedDate(ProcUnit, '');
            ProcUnit.INSERT(TRUE);
            CreateProcUnit.CheckReplPath(ProcUnit);
          END;
        UNTIL ProcUnitTmp.NEXT = 0;
    END;

    LOCAL PROCEDURE InitializeULEfromILE@29();
    VAR
      GlobalUsageRedirect@1000 : Codeunit 14000573;
    BEGIN
      UsageLedEnt.INIT;
      UsageLedEnt."Entry No." := ItemLedgEntry."Entry No.";
      UsageLedEnt."Location Code" := ItemLedgEntry."Location Code";
      UsageLedEnt."Original Location Code" := ItemLedgEntry."Location Code";
      UsageLedEnt."Item No." := ItemLedgEntry."Item No.";
      UsageLedEnt."Original Item No." := ItemLedgEntry."Item No.";
      UsageLedEnt."Variant Code" := ItemLedgEntry."Variant Code";
      UsageLedEnt."Original Variant Code" := ItemLedgEntry."Variant Code";
      UsageLedEnt."Source No." := ItemLedgEntry."Source No.";
      UsageLedEnt."Original Source No." := ItemLedgEntry."Source No.";
      UsageLedEnt."Ship-To Code" := ItemLedgEntry."Ship-to Code";
      UsageLedEnt."Original Ship-To code" := ItemLedgEntry."Ship-to Code";

      GlobalUsageRedirect.ProcessRedirectSequence(UsageLedEnt);

      CreateProcUnit(UsageLedEnt."Location Code",UsageLedEnt."Item No.",UsageLedEnt."Variant Code");
      IF InvMgtSetup."Summarize Variant Detail" = InvMgtSetup."Summarize Variant Detail"::Always THEN BEGIN
        IF UsageLedEnt."Variant Code" <> '' THEN
          IF NOT ProcUnit.GET(UsageLedEnt."Location Code",UsageLedEnt."Item No.",'') THEN
            IF NOT ProcUnitTmp.GET(UsageLedEnt."Location Code",UsageLedEnt."Item No.",'') THEN
              CreateProcUnit(UsageLedEnt."Location Code",UsageLedEnt."Item No.",'');
      END;
      UsageLedEnt."Entry Type" := ItemLedgEntry."Entry Type";
      UsageLedEnt."Source Type" := ItemLedgEntry."Source Type";
      UsageLedEnt."Document No." := ItemLedgEntry."Document No.";
      UsageLedEnt.Quantity := ItemLedgEntry.Quantity;
      UsageLedEnt."Drop Shipment" := ItemLedgEntry."Drop Shipment";
      UsageLedEnt."Transaction Type" := ItemLedgEntry."Transaction Type";
      UsageLedEnt."Document Date" := ItemLedgEntry."Document Date";
      UsageLedEnt."External Document No." := ItemLedgEntry."External Document No.";
      UsageLedEnt.Nonstock := ItemLedgEntry.Nonstock;
      UsageLedEnt."Original Source No." := ItemLedgEntry."Source No.";
      UsageLedEnt."Posting Date" := ItemLedgEntry."Posting Date";
      UsageLedEnt."Originally Ordered No." := ItemLedgEntry."Originally Ordered No.";
      UsageLedEnt."Originally Ordered Var. Code" := ItemLedgEntry."Originally Ordered Var. Code";
      UsageLedEnt."Out-of-Stock Substitution" := ItemLedgEntry."Out-of-Stock Substitution";
      UsageLedEnt."Exclude from Usage" := ItemLedgEntry."Exclude from Usage";
    END;

    LOCAL PROCEDURE InsertTransferUsage@4();
    VAR
      TransShptHdr@1005 : Record 5744;
      TransShptLine@1001 : Record 5745;
      TransShptLine2@1000 : Record 5745;
    BEGIN
      TransShptLine.SETRANGE("Item Shpt. Entry No.",ItemLedgEntry."Entry No.");
      IF NOT TransShptLine.FIND('-') THEN BEGIN
        IF TransShptHdr.GET(ItemLedgEntry."Document No.") THEN BEGIN
          TransShptLine.INIT;
          TransShptLine."Document No." := TransShptHdr."No.";
          TransShptLine."Transfer-from Code" := TransShptHdr."Transfer-from Code";
          TransShptLine."Transfer-to Code" := TransShptHdr."Transfer-to Code";
          TransShptLine."Item No." :=  ItemLedgEntry."Item No.";
          TransShptLine."Variant Code" := ItemLedgEntry."Variant Code";
        END ELSE
          TransShptLine.INIT;
      END;
      IF TransShptLine."Posted at Date" = 0D THEN BEGIN
        TransShptLine."Posted at Date" := ItemLedgEntry."Posting Date";
        TransShptLine."Shipment Date" := ItemLedgEntry."Posting Date";
        TransShptLine."Posted at Date" := ItemLedgEntry."Posting Date";
      END;
      CASE InvMgtSetup."Usage Date to Use" OF
        InvMgtSetup."Usage Date to Use"::"Posted at Date":
          BEGIN
            UsageLedEnt."Usage Date" := TransShptLine."Posted at Date";
            UsageLedEnt."Posted at Date" := TransShptLine."Posted at Date";
          END;
        InvMgtSetup."Usage Date to Use"::"Posting Date":
          UsageLedEnt."Usage Date" := ItemLedgEntry."Posting Date";
        InvMgtSetup."Usage Date to Use"::"Shipment Date":
          UsageLedEnt."Usage Date" := TransShptLine."Shipment Date";
        InvMgtSetup."Usage Date to Use"::"Demand Date":
          UsageLedEnt."Usage Date" := TransShptLine."Posted at Date";
      END;
      IF ItemLedgEntry.Quantity < 0 THEN BEGIN
        UsageLedEnt."Transfer Out" := TRUE;
        IF TransShptLine."Transfer-to Code" <> '' THEN BEGIN
          IF ProcUnit.GET(
            TransShptLine."Transfer-to Code",TransShptLine."Item No.",TransShptLine."Variant Code") THEN
            IF (ProcUnit."Replenishment Source Type" = ProcUnit."Replenishment Source Type"::Location) AND
                (ProcUnit."Replenishment Source Code" = TransShptLine."Transfer-from Code") THEN
              UsageLedEnt."Replenishment Path Transfer" := TRUE;
        END;
        TransShptLine2.SETRANGE("Transfer Order No.",TransShptLine."Transfer Order No.");
        TransShptLine2.SETRANGE("Line No.");
        IF TransShptLine2.FIND('-') THEN BEGIN
          IF TransShptLine2."Posted at Date" = TransShptLine."Posted at Date" THEN BEGIN
            UsageLedEnt."First Shipment" := TRUE;
          END;
        END;
        IF UsageLedEnt."Replenishment Path Transfer" AND
            UsageLedEnt."First Shipment" THEN
          UsageLedEnt."Usage Hit" := 1;
        IF TransShptLine."Exclude From Usage" THEN
          UsageLedEnt."Exclude from Usage" := TRUE;
        UsageLedEnt.INSERT;
        CheckClosedPeriod(UsageLedEnt."Location Code",UsageLedEnt."Usage Date");
      END;
    END;

    LOCAL PROCEDURE InsertNegAdjUsage@5();
    BEGIN
      IF ItemLedgEntry."Include in Sales Usage" THEN BEGIN
        UsageLedEnt."Entry Type" := UsageLedEnt."Entry Type"::Sale;
        UsageLedEnt.Description := Text006;
        UsageLedEnt."Usage Date" := ItemLedgEntry."Posting Date";
        UsageLedEnt."Posting Date" := ItemLedgEntry."Posting Date";
        UsageLedEnt."Posted at Date" := ItemLedgEntry."Posting Date";
        UsageLedEnt."First Shipment" := TRUE;
        UsageLedEnt."Usage Hit" := 1;
        UsageLedEnt.INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertConsumptionUsage@8();
    BEGIN
      IF NOT ItemLedgEntry.Positive THEN BEGIN
        UsageLedEnt."Entry Type" := UsageLedEnt."Entry Type"::Sale;
        UsageLedEnt.Description := Text007;
        UsageLedEnt."Usage Date" := ItemLedgEntry."Posting Date";
        UsageLedEnt."Posting Date" := ItemLedgEntry."Posting Date";
        UsageLedEnt."Posted at Date" := ItemLedgEntry."Posting Date";
        UsageLedEnt."First Shipment" := TRUE;
        UsageLedEnt."Usage Hit" := 1;
        UsageLedEnt.INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertSalesUsage@9();
    VAR
      ForecastCustItem@1002 : Record 14002602;
      DimensionSetEntry@1000000000 : Record 480;
    BEGIN
      // if item ledger entry posting date is greater than usage start date do not include in usage
      IF (ItemLedgEntry."Document Type" IN [ItemLedgEntry."Document Type"::"Service Shipment",
        ItemLedgEntry."Document Type"::"Service Shipment", ItemLedgEntry."Document Type"::"Service Credit Memo"]) AND
        (NOT ServiceIsActive) THEN
        EXIT;

      IF (ItemLedgEntry."Posting Date" >= InvMgtSetup."Usage Start Date") THEN BEGIN
        IF InvMgtSetup."Track Customer Usage By" = InvMgtSetup."Track Customer Usage By"::"Bill-To" THEN
          UsageLedEnt."Source No." := GetBillToCustNo(UsageLedEnt."Source No.");

        UsageLedEnt."Ship-To Code" := ItemLedgEntry."Ship-to Code";
        //UsageLedEnt."Sales Order No." := ItemLedgEntry."Orig Document No.";
        //UsageLedEnt."Sales Order Line No." := ItemLedgEntry."Orig Document Line No.";
        //UsageLedEnt."Orig. Order Qty. (Base)" := ItemLedgEntry."Orig. Order Qty. (Base)";

        UsageLedEnt."First Shipment" := ItemLedgEntry."First Shipment";
        UsageLedEnt."Usage Hit" := ItemLedgEntry."Usage Hit";
        IF (UsageLedEnt."Drop Shipment") AND (NOT ItemLedgEntry.Positive) THEN BEGIN
          CheckProcUnit(UsageLedEnt."Location Code", UsageLedEnt."Item No.", UsageLedEnt."Variant Code");
          IF (ProcUnit."Include Drop Ship Usage") AND (UsageLedEnt."First Shipment") AND (NOT UsageLedEnt."Exclude from Usage") THEN
            UsageLedEnt."Usage Hit" := 1
          ELSE
            UsageLedEnt."Usage Hit" := 0;
        END;

        // check usage hit against item tracking
        IF ((ItemLedgEntry."Lot No." <> '') OR (ItemLedgEntry."Serial No." <> '')) AND (UsageLedEnt."Usage Hit" >= 0) THEN BEGIN
          IF NOT IsUsageHitForItemTracking(ItemLedgEntry) THEN
            UsageLedEnt."Usage Hit" := 0;
        END;

        IF ItemLedgEntry."Posted at Date" = 0D THEN
          ItemLedgEntry."Posted at Date" := ItemLedgEntry."Posting Date"
        ELSE
          UsageLedEnt."Posted at Date" := ItemLedgEntry."Posted at Date";

        CASE InvMgtSetup."Usage Date to Use" OF
          InvMgtSetup."Usage Date to Use"::"Posted at Date":
              UsageLedEnt."Usage Date" := ItemLedgEntry."Posted at Date";
          InvMgtSetup."Usage Date to Use"::"Posting Date":
            UsageLedEnt."Usage Date" := ItemLedgEntry."Posting Date";
          InvMgtSetup."Usage Date to Use"::"Shipment Date":
            UsageLedEnt."Usage Date" := ItemLedgEntry."Shipment Date";
          InvMgtSetup."Usage Date to Use"::"Demand Date":
            BEGIN
              UsageLedEnt."Usage Date" := ItemLedgEntry."Requested Delivery Date";
              IF UsageLedEnt."Usage Date" = 0D THEN
                UsageLedEnt."Usage Date" := ItemLedgEntry."Shipment Date";
              IF UsageLedEnt."Usage Date" = 0D THEN
                UsageLedEnt."Usage Date" := ItemLedgEntry."Posting Date";
            END;
        END;

        IF UsageLedEnt."Usage Date" = 0D THEN
          UsageLedEnt."Usage Date" := ItemLedgEntry."Posting Date";

        UsageLedEnt."Posting Date" := ItemLedgEntry."Posting Date";
        UsageLedEnt."Requested Delivery Date" := ItemLedgEntry."Requested Delivery Date";
        UsageLedEnt."Shipment Date" := ItemLedgEntry."Shipment Date";

        // Set Collaborative
        IF ForecastCust AND
            (NOT UsageLedEnt."Exclude from Usage") AND
            (UsageLedEnt."Entry Type" = UsageLedEnt."Entry Type"::Sale)
        THEN
          IF ForecastCustItem.GET(UsageLedEnt."Source No.",UsageLedEnt."Location Code",
            UsageLedEnt."Item No.",UsageLedEnt."Variant Code")
          THEN
            IF ForecastCustItem."Forecast Type" = ForecastCustItem."Forecast Type"::Total THEN
              UsageLedEnt."Forecast Customer" := TRUE;
         // LA006 >> - VAH 11/30/2020
            IF DimensionSetEntry.GET(ItemLedgEntry."Dimension Set ID",'Division') THEN
               UsageLedEnt."Shortcut Dimension 5 Code" := DimensionSetEntry."Dimension Value Code";
          // LA006 << - VAH 11/30/2020
        UsageLedEnt.INSERT(TRUE);
      END;
      //CheckClosedPeriod(UsageLedEnt."Location Code",UsageLedEnt."Usage Date");
    END;

    LOCAL PROCEDURE IsServiceActive@13(VAR CurrItemLedgEntry@1000 : Record 32) : Boolean;
    VAR
      ItemLedgEntry2@1001 : Record 32;
    BEGIN
      IF (NOT ServiceIsActive) THEN
        EXIT(FALSE);

      ItemLedgEntry2.COPYFILTERS(CurrItemLedgEntry);
      ItemLedgEntry2.SETFILTER("Document Type", '%1|%2|%3', ItemLedgEntry."Document Type"::"Service Shipment",
        ItemLedgEntry."Document Type"::"Service Shipment", ItemLedgEntry."Document Type"::"Service Credit Memo");
      IF ItemLedgEntry2.ISEMPTY THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetInvMgtSetup@28();
    BEGIN
      IF NOT HasSetup THEN BEGIN
        InvMgtSetup.GET;
        HasSetup := TRUE;
      END;
    END;

    PROCEDURE IsUsageHitForItemTracking@1240020001(VAR CurrItemLedgEntry@1000 : Record 32) : Boolean;
    VAR
      LocItemLedgEntry@1001 : Record 32;
    BEGIN
      // first entry for the serial/lot tracked document line then its a hit
      LocItemLedgEntry.SETRANGE("Entry Type", CurrItemLedgEntry."Entry Type");
      LocItemLedgEntry.SETRANGE("Document Type", CurrItemLedgEntry."Document Type");
      LocItemLedgEntry.SETRANGE("Document No.", CurrItemLedgEntry."Document No.");
      LocItemLedgEntry.SETRANGE("Document Line No.",  CurrItemLedgEntry."Document Line No.");
      LocItemLedgEntry.SETRANGE("Posting Date", CurrItemLedgEntry."Posting Date");
      LocItemLedgEntry.SETRANGE(Correction, FALSE);
      IF LocItemLedgEntry.FINDFIRST THEN
        IF LocItemLedgEntry."Entry No." = CurrItemLedgEntry."Entry No." THEN
          EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    BEGIN
    {
      001 LA006 VAH 12012020 | Added Code in InserSalesUsage
    }
    END.
  }
}

