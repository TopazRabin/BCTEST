OBJECT Codeunit 23044531 WMDM Compatibility 2009
{
  OBJECT-PROPERTIES
  {
    Date=05/04/17;
    Time=[ 9:47:38 AM];
    Version List=WMDM1.8.1702 *** NAV 2009 or earlier only ***;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      tcImportFrom@1000000000 : TextConst 'ENU=Import From File';
      tcExportTo@1000000001 : TextConst 'ENU=Export To File';
      tc001@1000000002 : TextConst 'ENU=Bin content query mode is not supported in NAV 2009, because queries are not supported.;ESM=El modo de consulta de contenido bin no es compatible con NAV 2009 , porque las consultas no son compatibles.;FRC=Le mode contenu de la requ값e Bin est pas pris en charge NAV 2009 , car les requ값es ne sont pas prises en charge.;ENC=Bin content query mode is not supported in NAV 2009, because queries are not supported.';
      tc002@1000000003 : TextConst 'ENU=Bin content query With Lot and Bin mode is not supported in NAV 2009, because queries are not supported.;ESM=Consulta de contenido con la porci묥 bin bin y el modo no es compatible con NAV 2009 , porque las consultas no son compatibles.;FRC=Bin contenu requ값e Avec Lot et le mode Bin est pas pris en charge NAV 2009 , car les requ값es ne sont pas prises en charge.;ENC=Bin content query With Lot and Bin mode is not supported in NAV 2009, because queries are not supported.';
      tcBinModeNotSupported@1000000005 : TextConst 'ENU=This bin contents mode is not supported in NAV 2009.;ESM=Este modo de contenido de la papelera no es compatible con NAV 2009.;FRC=Ce mode de contenu de la cellule ne soit pas pris en charge dans NAV 2009.;ENC=This bin contents mode is not supported in NAV 2009.';
      tcMinBuildImageResize@1000000004 : TextConst 'ENU=1.5.1506.1617';

    PROCEDURE BinContentsQuery@1000000001(pcodLocation@1000000000 : Code[10];pcodBin@1000000001 : Code[20];VAR pbsOutput@1000000002 : BigText);
    BEGIN
      ERROR(tc001);
    END;

    PROCEDURE FindUserName@1000000000(ptxtUserName@1000000001 : Text[100]) : Text[100];
    VAR
      liUsedForAutomationNoRemove@1000000000 : Integer;
    BEGIN
      //////////////////////////////////////////////
      //<Summary>
      // Return user name from user table on NAV 2013
      //</Summary>
      //<Author>H.Zhao</Author>
      //<Date>13/02/2015</Date>
      //<Issue>TFS1635</Issue>
      //<Version>DMS1.5</Version>
      //////////////////////////////////////////////
      {// 2009::varbegin
      lrecUser@1000000000 : Record 2000000002;
      ltxtUserName@1000000002 : Text[100];
      }// 2009::varend

      {{// 2009::begin
      lrecUser.RESET();
      lrecUser.SETFILTER("Name", '%1', '*'+ptxtUserName ); //<IW author="h.z" date="03/17/16" issue="TFS2436" />
      IF ( lrecUser.FINDFIRST() ) THEN BEGIN
        ltxtUserName := COPYSTR( lrecUser.Name, 1, MAXSTRLEN(ltxtUserName) );
      END;

      EXIT(ltxtUserName);
      }}// 2009::end
    END;

    PROCEDURE PromptAndUploadFile@1000000002(ptxtFilterString@1000000000 : Text[50]) ptxtServerFile : Text[200];
    VAR
      liUsedForAutomationNoRemove@1000000002 : Integer;
    BEGIN

      {// 2009::varbegin
      lcuCommonDlg@1000000001 : Codeunit 412;
      ltxtFileName@1000000002 : Text[1024];
      linStream@1000000004 : InStream;
      lserverFile@1000000005 : File;
      }// 2009::varend

      //
      // Prompts the user for a file, and puts it on the server
      // Returns blank if the user cancelled or the file is not available.
      // Returns the service tier server path if it was successfull.
      //
      {{// 2009::begin

      ptxtServerFile := '';
      IF ( ISSERVICETIER ) THEN BEGIN
        lserverFile.CreateTempFile();
        ptxtServerFile  := lserverFile.Name;
        lserverFile.Close();
        IF ( NOT UPLOAD(
          tcImportFrom, // DialogTitle,
          '', // FromFolder,
          ptxtFilterString, // FromFilter
          ltxtFileName, // FromFile
          ptxtServerFile ) ) THEN
        BEGIN
          ptxtServerFile := '';
        END;
      END ELSE BEGIN
        // classic.
        ltxtFileName := lcuCommonDlg.OpenFile(
          tcImportFrom,
          '', // DefaultFileName,
          5, // 5 == xml  DefaultFileType,
          ptxtFilterString,
          0 );  // 0 === open Action

        ptxtServerFile := ltxtFileName;
      END;

      } }//2009::end
    END;

    PROCEDURE PromptAndDownloadFile@1000000006(ptxtFilterString@1000000000 : Text[50];ptxtServerFile@1000000001 : Text[250];VAR ptxtClientName@1000000003 : Text[250]);
    VAR
      liUsedForAutomationNoRemove@1000000002 : Integer;
    BEGIN

      {// 2009::varbegin
      lcuCommonDlg@1000001001 : Codeunit 412;
      }// 2009::varend


      //
      // Prompts the user for a file destination, then downloads it
      //
      {{//2009::begin
      IF ( ISSERVICETIER ) THEN BEGIN
        DOWNLOAD(
          ptxtServerFile,
          tcExportTo,
          '', // ToFolder,
          ptxtFilterString, // ToFilter,
          ptxtClientName ) // ToFile)
      END ELSE BEGIN
        // classic.
        ptxtClientName := lcuCommonDlg.OpenFile(
          tcExportTo,
          '', // DefaultFileName,
          5, // 5 == xml  DefaultFileType,
          ptxtFilterString,
          0 );  // 0 === open Action
        FILE.COPY( ptxtServerFile, ptxtClientName );
      END;

      }}//2009::end
    END;

    PROCEDURE PromptAndImportIntoBlob@1000000003(ptxtFilterString@1000000000 : Text[50];VAR posBlob@1000000001 : OutStream) pbWorked : Boolean;
    VAR
      ltxtServerFile@1000000002 : Text[1024];
    BEGIN
      //
      // Prompts the user for a file, loads it onto the server, then imports it
      // into the specified stream.
      pbWorked := FALSE;

      ltxtServerFile := PromptAndUploadFile( ptxtFilterString );
      IF ( ltxtServerFile <> '' ) THEN BEGIN
        pbWorked := ImportServerFileIntoBlob( ltxtServerFile, posBlob );
      END;
    END;

    PROCEDURE ImportServerFileIntoBlob@1000000004(ptxtServerFileName@1000000000 : Text[250];VAR posBlob@1000000001 : OutStream) pbWorked : Boolean;
    VAR
      ldnStreamWriter@1000000002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamWriter";
      ldnTextEncoder@1000000003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      ldnFile@1000000004 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      lrecTempBlob@1000000005 : Record 99008535;
      lisBlob@1000000006 : InStream;
      lcodExtensionName@1000000008 : Code[10];
      liFileNameLen@1000000007 : Integer;
      ldnBytes@1000000010 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      ldnConvert@1000000009 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
    BEGIN
      //
      // Imports the specified server file path into the specified stream, with UTF 8 encoding.
      pbWorked := FALSE;

      IF ( ISSERVICETIER ) THEN BEGIN
        // rtc
        liFileNameLen := STRLEN(ptxtServerFileName);
        lcodExtensionName := COPYSTR(ptxtServerFileName, liFileNameLen - 4 + 1, 4);
        ldnStreamWriter := ldnStreamWriter.StreamWriter(posBlob, ldnTextEncoder.UTF8);
        IF (LOWERCASE(lcodExtensionName) <> '.cab') THEN BEGIN
          ldnStreamWriter.Write( ldnFile.ReadAllText( ptxtServerFileName ) );
        END ELSE BEGIN
          // we insert bytes for .cab files, same with picture
          ldnBytes := ldnFile.ReadAllBytes(ptxtServerFileName);
          ldnStreamWriter.Write(ldnConvert.ToBase64String(ldnBytes));
        END;

        ldnStreamWriter.Flush();
        pbWorked := TRUE;
      END ELSE BEGIN
        // classic
        lrecTempBlob.Blob.IMPORT( ptxtServerFileName, FALSE );
        lrecTempBlob.Blob.CREATEINSTREAM( lisBlob );
        COPYSTREAM( posBlob,lisBlob );
      END;
    END;

    PROCEDURE PromptExportBlobToFile@1000000005(ptxtFilterString@1000000000 : Text[50];ptxtFileExtension@1000000001 : Text[10];VAR pisBlob@1000000002 : InStream) pbWorked : Boolean;
    VAR
      losOutStream@1000000003 : OutStream;
      lrecTempBlob@1000000004 : Record 99008535;
      ltxtFileName@1000000005 : Text[1024];
    BEGIN

      IF ( ptxtFileExtension = '' ) THEN ptxtFileExtension := 'xml';
      ltxtFileName :=  'Export.'+ptxtFileExtension;

      IF ( ISSERVICETIER ) THEN BEGIN
        // rtc
        DOWNLOADFROMSTREAM(
          pisBlob,
          tcExportTo,
          '',
          ptxtFilterString,
          ltxtFileName );

      END ELSE BEGIN
        // classic
        lrecTempBlob.Blob.CREATEOUTSTREAM( losOutStream );
        COPYSTREAM( losOutStream, pisBlob );
        lrecTempBlob.Blob.EXPORT( ltxtFileName , TRUE );
      END;
    END;

    PROCEDURE PrintUsingRecord@1240060000(piReportID@1240060000 : Integer;pbShowRequest@1240060001 : Boolean;pbUseSystem@1240060002 : Boolean;pvarRecordRef@1240060003 : Variant) rbDidSomething : Boolean;
    VAR
      lrecRef@1240060004 : RecordRef;
      lrecSalesLine@1240060005 : Record 37;
      lrecItem@1240060006 : Record 27;
      lrecItemJournalLine@1240060007 : Record 83;
      lrecWhseJournalLine@1240060008 : Record 7311;
      lrecItemLedgerEntry@1240060009 : Record 32;
      lrecProdOrderLine@1240060010 : Record 5406;
      lrecLicensePlateHeader@1240060011 : Record 23044505;
      lrecLicensePlateLine@1240060012 : Record 23044506;
      lrecCountSheetLine@1240060013 : Record 23044301;
      lrecCountSheetCfg@1240060014 : Record 23044300;
      lrecInventoryCountHeader@1240060015 : Record 23044304;
      lrecTransferLine@1240060016 : Record 5741;
      lrecPurchaseLine@1240060017 : Record 39;
      lrecWhseActivityLine@1240060018 : Record 5767;
      lrecWhseReceiptLine@1240060019 : Record 7317;
      lrecWhseShipmentLine@1240060020 : Record 7321;
      lrecSalesHeader@1240060021 : Record 36;
      lrecTransferHeader@1240060022 : Record 5740;
      lrecPurchaseHeader@1240060023 : Record 38;
      lrecWhseActivityHeader@1240060024 : Record 5766;
      lrecWhseReceiptHeader@1240060025 : Record 7316;
      lrecWhseShipmentHeader@1240060026 : Record 7320;
    BEGIN
      //piReportIDInteger
      //NopbShowRequestBoolean
      //NopbUseSystemBoolean
      //NopvarRecordRefVariant
      lrecRef := pvarRecordRef;
      rbDidSomething := FALSE;
      CASE lrecRef.NUMBER OF
        // special cases for item, item journal,
        DATABASE::Item:
          BEGIN
            lrecRef.SETTABLE( lrecItem );
            REPORT.RUN( piReportID, pbShowRequest, pbUseSystem, lrecItem );
            rbDidSomething := TRUE;
          END;
        DATABASE::"Item Journal Line":
          BEGIN
            lrecRef.SETTABLE( lrecItemJournalLine );
            REPORT.RUN( piReportID, pbShowRequest, pbUseSystem, lrecItemJournalLine );
            rbDidSomething := TRUE;
          END;
        DATABASE::"Warehouse Journal Line":
          BEGIN
            lrecRef.SETTABLE( lrecWhseJournalLine );
            REPORT.RUN( piReportID, pbShowRequest, pbUseSystem, lrecWhseJournalLine );
            rbDidSomething := TRUE;
          END;

        DATABASE::"Item Ledger Entry":
          BEGIN
            lrecRef.SETTABLE( lrecItemLedgerEntry );
            REPORT.RUN( piReportID, pbShowRequest, pbUseSystem, lrecItemLedgerEntry );
            rbDidSomething := TRUE;
          END;

        DATABASE::"Prod. Order Line":
          BEGIN
            lrecRef.SETTABLE( lrecProdOrderLine );
            REPORT.RUN( piReportID, pbShowRequest, pbUseSystem, lrecProdOrderLine );
            rbDidSomething := TRUE;
          END;

        DATABASE::"IWX License Plate Header":
          BEGIN
            lrecRef.SETTABLE( lrecLicensePlateHeader );
            REPORT.RUN( piReportID, pbShowRequest, pbUseSystem, lrecLicensePlateHeader );
            rbDidSomething := TRUE;
          END;

        DATABASE::"IWX License Plate Line":
          BEGIN
            lrecRef.SETTABLE( lrecLicensePlateLine );
            REPORT.RUN( piReportID, pbShowRequest, pbUseSystem, lrecLicensePlateLine );
            rbDidSomething := TRUE;
          END;

        DATABASE::"IWX Count Sheet Line":
          BEGIN
            lrecRef.SETTABLE( lrecCountSheetLine );
            REPORT.RUN( piReportID, pbShowRequest, pbUseSystem, lrecCountSheetLine );
            rbDidSomething := TRUE;
          END;

        DATABASE::"IWX Count Sheet Configuration":
          BEGIN
            lrecRef.SETTABLE( lrecCountSheetCfg );
            REPORT.RUN( piReportID, pbShowRequest, pbUseSystem, lrecCountSheetCfg );
            rbDidSomething := TRUE;
          END;
        DATABASE::"IWX Inventory Count Header":
          BEGIN
            lrecRef.SETTABLE( lrecInventoryCountHeader );
            REPORT.RUN( piReportID, pbShowRequest, pbUseSystem, lrecInventoryCountHeader );
            rbDidSomething := TRUE;
          END;

        // document line cases
        DATABASE::"Sales Line":
          BEGIN
            lrecRef.SETTABLE( lrecSalesLine );
            REPORT.RUN( piReportID, pbShowRequest, pbUseSystem, lrecSalesLine );
            rbDidSomething := TRUE;
          END;
        DATABASE::"Transfer Line":
          BEGIN
            lrecRef.SETTABLE( lrecTransferLine );
            REPORT.RUN( piReportID, pbShowRequest, pbUseSystem, lrecTransferLine );
            rbDidSomething := TRUE;
          END;
        DATABASE::"Purchase Line":
          BEGIN
            lrecRef.SETTABLE( lrecPurchaseLine );
            REPORT.RUN( piReportID, pbShowRequest, pbUseSystem, lrecPurchaseLine );
            rbDidSomething := TRUE;
          END;
        DATABASE::"Warehouse Activity Line":
          BEGIN
            lrecRef.SETTABLE( lrecWhseActivityLine );
            REPORT.RUN( piReportID, pbShowRequest, pbUseSystem, lrecWhseActivityLine );
            rbDidSomething := TRUE;
          END;
        DATABASE::"Warehouse Receipt Line":
          BEGIN
            lrecRef.SETTABLE( lrecWhseReceiptLine );
            REPORT.RUN( piReportID, pbShowRequest, pbUseSystem, lrecWhseReceiptLine );
            rbDidSomething := TRUE;
          END;
        DATABASE::"Warehouse Shipment Line":
          BEGIN
            lrecRef.SETTABLE( lrecWhseShipmentLine );
            REPORT.RUN( piReportID, pbShowRequest, pbUseSystem, lrecWhseShipmentLine );
            rbDidSomething := TRUE;
          END;

        // document header cases
        DATABASE::"Sales Header":
          BEGIN
            lrecRef.SETTABLE( lrecSalesHeader );
            REPORT.RUN( piReportID, pbShowRequest, pbUseSystem, lrecSalesHeader );
            rbDidSomething := TRUE;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            lrecRef.SETTABLE( lrecTransferHeader );
            REPORT.RUN( piReportID, pbShowRequest, pbUseSystem, lrecTransferHeader );
            rbDidSomething := TRUE;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            lrecRef.SETTABLE( lrecPurchaseHeader );
            REPORT.RUN( piReportID, pbShowRequest, pbUseSystem, lrecPurchaseHeader );
            rbDidSomething := TRUE;
          END;
        DATABASE::"Warehouse Activity Header":
          BEGIN
            lrecRef.SETTABLE( lrecWhseActivityHeader );
            REPORT.RUN( piReportID, pbShowRequest, pbUseSystem, lrecWhseActivityHeader );
            rbDidSomething := TRUE;
          END;
        DATABASE::"Warehouse Receipt Header":
          BEGIN
            lrecRef.SETTABLE( lrecWhseReceiptHeader );
            REPORT.RUN( piReportID, pbShowRequest, pbUseSystem, lrecWhseReceiptHeader );
            rbDidSomething := TRUE;
          END;
        DATABASE::"Warehouse Shipment Header":
          BEGIN
            lrecRef.SETTABLE( lrecWhseShipmentHeader );
            REPORT.RUN( piReportID, pbShowRequest, pbUseSystem, lrecWhseShipmentHeader );
            rbDidSomething := TRUE;
          END;

      END; // end case
    END;

    PROCEDURE BinContentsQueryWithBinAndLot@1000000007(pcodLocation@1000000007 : Code[10];VAR pcodZoneCode@1000000006 : Code[10];VAR pcodBin@1000000005 : Code[20];pcodItem@1000000004 : Text;pcodVariantCode@1000000003 : Text;VAR pcodUOM@1000000002 : Code[10];pcodLotNo@1000000001 : Code[20];VAR pdQuantity@1000000000 : Decimal);
    BEGIN
      ERROR(tc002); //<IW author="h.z" date="06/08/16" issue="TFS2342" />
    END;

    PROCEDURE getItemPicture@1000000009(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511;VAR pbsOutput@1000000020 : BigText);
    VAR
      lcodLocation@1000000012 : Code[10];
      lcodItemNumber@1000000007 : Text;
      lcodVariantCode@1000000006 : Text;
      lcodLotNumber@1000000004 : Code[20];
      lcodSerialNumber@1000000003 : Code[20];
      lrecItem@1000000005 : Record 27;
      lrrefWriter@1000000013 : RecordRef;
      ldnMemStream@1000000009 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      ldnBytes@1000000008 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      ldnConvert@1000000002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      lisPictureStream@1000000001 : InStream;
      ldImageWidth@1000000010 : Decimal;
      ldImageHeight@1000000011 : Decimal;
      ldtOriginalImage@1000000014 : DotNet "'System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Image";
      ldtResizedBitmap@1000000015 : DotNet "'System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Bitmap";
      ldtResizedMemStream@1000000016 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      ldtImageFormat@1000000017 : DotNet "'System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Imaging.ImageFormat";
      liResizedImageWidth@1000000018 : Integer;
      liResizedImageHeight@1000000019 : Integer;
      ldResizeRatio@1000000021 : Decimal;
      ldRatioWidth@1000000022 : Decimal;
      ldRatioHeight@1000000023 : Decimal;
    BEGIN
      // Retrieve item picture
      // based on input item number

      {{//2009::begin
      lcodItemNumber := ptrecEventParams.getValue('item_number');
      ldImageWidth := ptrecEventParams.getValueAsInt('screen_width');
      ldImageHeight := ptrecEventParams.getValueAsInt('screen_height');

      pbsOutput.ADDTEXT('<PICTURE value="');
      lrecItem.GET(lcodItemNumber);

      // make sure there is a picture
      lrecItem.CALCFIELDS(lrecItem.Picture);
      IF (lrecItem.Picture.HASVALUE) THEN BEGIN
        // get a stream from the blob to copy into a .net memorystream
        lrecItem.Picture.CREATEINSTREAM( lisPictureStream );
        ldnMemStream := ldnMemStream.MemoryStream();
        COPYSTREAM( ldnMemStream, lisPictureStream );

        ldResizeRatio := 1;
        IF ((ldImageWidth > 0) AND
            (ldImageHeight > 0) AND
            (ptrecEventParams.getIsAtLeastBuild(tcMinBuildImageResize))) THEN BEGIN

          ldtOriginalImage := ldtOriginalImage.FromStream(ldnMemStream);
          ldRatioWidth := ldImageWidth / ldtOriginalImage.Width();
          ldRatioHeight := ldImageHeight / ldtOriginalImage.Height();
          IF ( ldRatioWidth >= ldRatioHeight) THEN BEGIN
            ldResizeRatio := ldRatioHeight;
          END ELSE BEGIN
            ldResizeRatio := ldRatioWidth;
          END;
        END;

        IF (ldResizeRatio < 1) THEN BEGIN // we want to make image smaller
          liResizedImageWidth := (ldtOriginalImage.Width() * ldResizeRatio) DIV 1;
          liResizedImageHeight := (ldtOriginalImage.Height() * ldResizeRatio) DIV 1;

          ldtResizedBitmap := ldtResizedBitmap.Bitmap(ldtOriginalImage, liResizedImageWidth, liResizedImageHeight);
          ldtImageFormat := ldtImageFormat.Png();  // convert to png format
          ldtResizedMemStream := ldtResizedMemStream.MemoryStream();
          ldtResizedBitmap.Save(ldtResizedMemStream, ldtImageFormat);
          ldnBytes := ldtResizedMemStream.GetBuffer();
        END ELSE BEGIN
          // Back compatibility
          // Now that we've got a memory stream, grab it's bytes
          // and convert to a base64string
          ldnBytes := ldnMemStream.GetBuffer();
        END;
        pbsOutput.ADDTEXT( ldnConvert.ToBase64String( ldnBytes ) );
      END;
      pbsOutput.ADDTEXT('" />');
      }}//2009::end
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************

      This codeunit is only intended to work in NAV 2009 and earlier installs.
      If you are compiling this on NAV 2013 and newer, and it fails, remove it and use the WMDM Compatibility 2013
      installs instead.
    }
    END.
  }
}

