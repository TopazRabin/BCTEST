OBJECT Codeunit 2200 Azure Key Vault Management
{
  OBJECT-PROPERTIES
  {
    Date=11/22/17;
    Time=12:00:00 PM;
    Version List=NAVW111.00;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NavAzureKeyVaultClient@1000 : DotNet "'Microsoft.Dynamics.Nav.AzureKeyVaultClient, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.AzureKeyVaultClient.MachineLearningCredentialsHelper";
      AzureKeyVaultSecretProvider@1001 : DotNet "'Microsoft.Dynamics.Nav.Ncl, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Runtime.Encryption.IAzureKeyVaultSecretProvider";

      ApplicationSecretsTxt@1002 : TextConst
        '@@@={Locked}',
        'ENU=ml-forecast,qbo-consumerkey,qbo-consumersecret,amcname,amcpassword,YodleeCobrandName,YodleeCobrandPassword,YodleeServiceUri,YodleeFastlinkUrl,ExchangeAuthMethod,NpsApiUrl,NpsCacheLifeTime,NpsTimeBetweenRequests,webhooksadapteruri,webhooksadapterclientid,webhooksadapterclientsecret,webhooksadapterresourceuri,webhooksadapterauthority,c2graphclientid,c2graphsecret,c2graphresource,c2graphauthority,xeroimportapp-key,xeroimportapp-secret,qbo-businesscenter-consumerkey,qbo-businesscenter-consumersecret,walletpaymentrequesturl,qbo-datamigration-consumerkey,qbo-datamigration-consumersecret,govtalk-vendorid,MSWalletAADAppID,MSWalletAADAppKey,MSWalletAADIdentityService',
        'ESM=ml-forecast,qbo-consumerkey,qbo-consumersecret,amcname,amcpassword,YodleeCobrandName,YodleeCobrandPassword,YodleeServiceUri,YodleeFastlinkUrl,ExchangeAuthMethod,NpsApiUrl,NpsCacheLifeTime,NpsTimeBetweenRequests,webhooksadapteruri,webhooksadapterclientid,webhooksadapterclientsecret,webhooksadapterresourceuri,webhooksadapterauthority,c2graphclientid,c2graphsecret,c2graphresource,c2graphauthority,xeroimportapp-key,xeroimportapp-secret,qbo-businesscenter-consumerkey,qbo-businesscenter-consumersecret,walletpaymentrequesturl,qbo-datamigration-consumerkey,qbo-datamigration-consumersecret,govtalk-vendorid,MSWalletAADAppID,MSWalletAADAppKey,MSWalletAADIdentityService',
        'FRC=ml-forecast,qbo-consumerkey,qbo-consumersecret,amcname,amcpassword,YodleeCobrandName,YodleeCobrandPassword,YodleeServiceUri,YodleeFastlinkUrl,ExchangeAuthMethod,NpsApiUrl,NpsCacheLifeTime,NpsTimeBetweenRequests,webhooksadapteruri,webhooksadapterclientid,webhooksadapterclientsecret,webhooksadapterresourceuri,webhooksadapterauthority,c2graphclientid,c2graphsecret,c2graphresource,c2graphauthority,xeroimportapp-key,xeroimportapp-secret,qbo-businesscenter-consumerkey,qbo-businesscenter-consumersecret,walletpaymentrequesturl,qbo-datamigration-consumerkey,qbo-datamigration-consumersecret,govtalk-vendorid,MSWalletAADAppID,MSWalletAADAppKey,MSWalletAADIdentityService',
        'ENC=ml-forecast,qbo-consumerkey,qbo-consumersecret,amcname,amcpassword,YodleeCobrandName,YodleeCobrandPassword,YodleeServiceUri,YodleeFastlinkUrl,ExchangeAuthMethod,NpsApiUrl,NpsCacheLifeTime,NpsTimeBetweenRequests,webhooksadapteruri,webhooksadapterclientid,webhooksadapterclientsecret,webhooksadapterresourceuri,webhooksadapterauthority,c2graphclientid,c2graphsecret,c2graphresource,c2graphauthority,xeroimportapp-key,xeroimportapp-secret,qbo-businesscenter-consumerkey,qbo-businesscenter-consumersecret,walletpaymentrequesturl,qbo-datamigration-consumerkey,qbo-datamigration-consumersecret,govtalk-vendorid,MSWalletAADAppID,MSWalletAADAppKey,MSWalletAADIdentityService';
      ImageAnalysisSecretTxt@1008 : TextConst '@@@={Locked};ENU=cognitive-vision-params;ESM=cognitive-vision-params;FRC=cognitive-vision-params;ENC=cognitive-vision-params';
      SecretNotFoundErr@1003 : TextConst '@@@="%1 = Secret Name. %2 = Available secrets.";ENU=%1 is not an application secret. Choose one of the following secrets: %2;ESM=%1 no es un secreto de aplicaci¢n. Elija uno de los secretos siguientes: %2;FRC=%1 n''est pas un secret d''application. S‚lectionnez l''un des secrets suivantsÿ: %2;ENC=%1 is not an application secret. Choose one of the following secrets: %2';
      AzureMLApiUriTxt@1005 : TextConst '@@@={Locked};ENU=AzureMLApiUri;ESM=AzureMLApiUri;FRC=AzureMLApiUri;ENC=AzureMLApiUri';
      AzureMLApiKeyTxt@1006 : TextConst '@@@={Locked};ENU=AzureMLApiKey;ESM=AzureMLApiKey;FRC=AzureMLApiKey;ENC=AzureMLApiKey';
      AzureMLLimitTxt@1007 : TextConst '@@@={Locked};ENU=AzureMLLimit;ESM=AzureMLLimit;FRC=AzureMLLimit;ENC=AzureMLLimit';
      MissingImageAnalysisSecretErr@1011 : TextConst 'ENU=There is a missing configuration value on our end. Try again later.;ESM=Le falta un valor de configuraci¢n. Vuelva a intentarlo m s tarde.;FRC=Il manque une valeur de configuration de notre c“t‚. R‚essayez plus tard.;ENC=There is a missing configuration value on our end. Try again later.';
      CachedSecretsDictionary@1010 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";

    [TryFunction]
    [Internal]
    PROCEDURE GetMachineLearningCredentials@2(VAR ApiUri@1000 : Text[250];VAR ApiKey@1001 : Text[200];VAR Limit@1002 : Decimal);
    VAR
      ResultArray@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      LimitAsText@1004 : Text;
    BEGIN
      IF KeyValuePairInBuffer(AzureMLApiUriTxt,ApiUri) AND
         KeyValuePairInBuffer(AzureMLApiKeyTxt,ApiKey) AND
         KeyValuePairInBuffer(AzureMLLimitTxt,LimitAsText)
      THEN BEGIN
        EVALUATE(Limit,LimitAsText);
        EXIT;
      END;

      NavAzureKeyVaultClient := NavAzureKeyVaultClient.MachineLearningCredentialsHelper;
      NavAzureKeyVaultClient.SetAzureKeyVaultProvider(AzureKeyVaultSecretProvider);
      ResultArray := NavAzureKeyVaultClient.GetMLCredentials;
      ApiKey := FORMAT(ResultArray.GetValue(0));
      ApiUri := FORMAT(ResultArray.GetValue(1));
      IF NOT ISNULL(ResultArray.GetValue(2)) THEN
        EVALUATE(Limit,FORMAT(ResultArray.GetValue(2)));

      StoreKeyValuePairInBuffer(AzureMLApiUriTxt,ApiUri);
      StoreKeyValuePairInBuffer(AzureMLApiKeyTxt,ApiKey);
      StoreKeyValuePairInBuffer(AzureMLLimitTxt,FORMAT(Limit));
    END;

    [TryFunction]
    PROCEDURE GetImageAnalysisCredentials@8(VAR ApiKey@1000 : Text;VAR ApiUri@1001 : Text;VAR LimitType@1006 : 'Year,Month,Day,Hour';VAR LimitValue@1002 : Integer);
    VAR
      JSONManagement@1005 : Codeunit 5459;
      ImageAnalysisParameter@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      ImageAnalysisParametersText@1003 : Text;
      LimitTypeTxt@1008 : Text;
      LimitValueTxt@1007 : Text;
    BEGIN
      GetAzureKeyVaultSecret(ImageAnalysisParametersText,ImageAnalysisSecretTxt);
      JSONManagement.InitializeCollection(ImageAnalysisParametersText);
      IF JSONManagement.GetCollectionCount = 0 THEN
        EXIT;
      JSONManagement.GetJObjectFromCollectionByIndex(
        ImageAnalysisParameter,
        GetTenantBasedIdInRange(JSONManagement.GetCollectionCount) - 1);
      JSONManagement.GetStringPropertyValueFromJObjectByName(ImageAnalysisParameter,'key',ApiKey);
      JSONManagement.GetStringPropertyValueFromJObjectByName(ImageAnalysisParameter,'endpoint',ApiUri);

      JSONManagement.GetStringPropertyValueFromJObjectByName(ImageAnalysisParameter,'limittype',LimitTypeTxt);
      IF LimitTypeTxt = '' THEN
        ERROR(MissingImageAnalysisSecretErr);

      CASE LimitTypeTxt OF
        'Year':
          LimitType := LimitType::Year;
        'Month':
          LimitType := LimitType::Month;
        'Day':
          LimitType := LimitType::Day;
        'Hour':
          LimitType := LimitType::Hour;
      END;

      // EVALUATE(LimitType,LimitTypeTxt); // Bug 215359

      JSONManagement.GetStringPropertyValueFromJObjectByName(ImageAnalysisParameter,'limitvalue',LimitValueTxt);
      IF LimitValueTxt = '' THEN
        ERROR(MissingImageAnalysisSecretErr);
      EVALUATE(LimitValue,LimitValueTxt);
    END;

    [TryFunction]
    [Internal]
    PROCEDURE GetAzureKeyVaultSecret@1(VAR Secret@1001 : Text;SecretName@1000 : Text);
    VAR
      TypeHelper@1002 : Codeunit 10;
    BEGIN
      IF TypeHelper.GetOptionNo(SecretName,GetAllowedSecrets) = -1 THEN
        ERROR(STRSUBSTNO(SecretNotFoundErr,SecretName,GetAllowedSecrets));

      IF KeyValuePairInBuffer(SecretName,Secret) THEN
        EXIT;

      NavAzureKeyVaultClient := NavAzureKeyVaultClient.MachineLearningCredentialsHelper;
      NavAzureKeyVaultClient.SetAzureKeyVaultProvider(AzureKeyVaultSecretProvider);
      Secret := NavAzureKeyVaultClient.GetAzureKeyVaultSecret(SecretName);

      StoreKeyValuePairInBuffer(SecretName,Secret);
    END;

    [Internal]
    PROCEDURE SetAzureKeyVaultSecretProvider@5(NewAzureKeyVaultSecretProvider@1000 : DotNet "'Microsoft.Dynamics.Nav.Ncl, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Runtime.Encryption.IAzureKeyVaultSecretProvider");
    BEGIN
      ClearBufferAndDotNetKeyvaultObjects;
      AzureKeyVaultSecretProvider := NewAzureKeyVaultSecretProvider;
    END;

    [Internal]
    PROCEDURE IsEnable@3() : Boolean;
    BEGIN
      NavAzureKeyVaultClient := NavAzureKeyVaultClient.MachineLearningCredentialsHelper;
      EXIT(NavAzureKeyVaultClient.Enable);
    END;

    LOCAL PROCEDURE KeyValuePairInBuffer@6(Key@1001 : Text;VAR Value@1000 : Text) : Boolean;
    VAR
      ValueFound@1002 : Boolean;
      ValueToReturn@1003 : Text;
    BEGIN
      InitBuffer;

      ValueFound := CachedSecretsDictionary.TryGetValue(Key,ValueToReturn);
      Value := ValueToReturn;
      EXIT(ValueFound);
    END;

    LOCAL PROCEDURE StoreKeyValuePairInBuffer@7(Key@1001 : Text;Value@1000 : Text);
    BEGIN
      InitBuffer;

      CachedSecretsDictionary.Add(Key,Value);
    END;

    LOCAL PROCEDURE ClearBufferAndDotNetKeyvaultObjects@4();
    BEGIN
      CLEAR(NavAzureKeyVaultClient);
      CLEAR(AzureKeyVaultSecretProvider);

      InitBuffer;

      CachedSecretsDictionary.Clear;
    END;

    LOCAL PROCEDURE GetTenantBasedIdInRange@17(MaxNumber@1000 : Integer) : Integer;
    VAR
      TenantIdString@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
    BEGIN
      TenantIdString := TENANTID;
      RANDOMIZE(TenantIdString.GetHashCode);
      EXIT(RANDOM(MaxNumber));
    END;

    LOCAL PROCEDURE GetAllowedSecrets@9() : Text;
    BEGIN
      EXIT(ApplicationSecretsTxt + ',' + ImageAnalysisSecretTxt);
    END;

    LOCAL PROCEDURE InitBuffer@16();
    BEGIN
      IF ISNULL(CachedSecretsDictionary) THEN
        CachedSecretsDictionary := CachedSecretsDictionary.Dictionary;
    END;

    BEGIN
    END.
  }
}

