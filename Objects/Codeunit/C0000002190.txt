OBJECT Codeunit 2190 O365 Sales Web Service
{
  OBJECT-PROPERTIES
  {
    Date=11/22/17;
    Time=12:00:00 PM;
    Version List=NAVW111.00;
  }
  PROPERTIES
  {
    Permissions=TableData 2190=rimd;
    OnRun=BEGIN
            SendKPI;
          END;

  }
  CODE
  {
    VAR
      ActivityRolesTxt@1005 : TextConst '@@@={Locked};ENU=BusinessSignals-Internal.Read,BusinessSignals-Internal.ReadWrite;ESM=BusinessSignals-Internal.Read,BusinessSignals-Internal.ReadWrite;FRC=BusinessSignals-Internal.Read,BusinessSignals-Internal.ReadWrite;ENC=BusinessSignals-Internal.Read,BusinessSignals-Internal.ReadWrite';
      S2SConnectionStrTemplateTxt@1004 : TextConst '@@@={Locked};ENU="{ENTITYLISTENDPOINT}=https://%1;{EXORESOURCEURI}=https://outlook.office365.com;{EXORESOURCEROLE}=%2";ESM="{ENTITYLISTENDPOINT}=https://%1;{EXORESOURCEURI}=https://outlook.office365.com;{EXORESOURCEROLE}=%2";FRC="{ENTITYLISTENDPOINT}=https://%1;{EXORESOURCEURI}=https://outlook.office365.com;{EXORESOURCEROLE}=%2";ENC="{ENTITYLISTENDPOINT}=https://%1;{EXORESOURCEURI}=https://outlook.office365.com;{EXORESOURCEROLE}=%2"';
      UserConnectionStrTemplateTxt@1035 : TextConst '@@@={Locked};ENU="{ENTITYLISTENDPOINT}=https://%1";ESM="{ENTITYLISTENDPOINT}=https://%1";FRC="{ENTITYLISTENDPOINT}=https://%1";ENC="{ENTITYLISTENDPOINT}=https://%1"';
      KpiObjectTxt@1001 : TextConst '@@@={Locked};ENU={"summary":{"@odata.type":"#Microsoft.Griffin.SmallBusiness.SbGraph.Core.InvoiceOverviewKpiV1","monthlySalesTotalAmount":%1,"yearlySalesTotalAmount":%2,"outstandingSalesTotalAmount":%3,"overdueSalesTotalAmount":%4,"currencyCode":"%5"}};ESM={"summary":{"@odata.type":"#Microsoft.Griffin.SmallBusiness.SbGraph.Core.InvoiceOverviewKpiV1","monthlySalesTotalAmount":%1,"yearlySalesTotalAmount":%2,"outstandingSalesTotalAmount":%3,"overdueSalesTotalAmount":%4,"currencyCode":"%5"}};FRC={"summary":{"@odata.type":"#Microsoft.Griffin.SmallBusiness.SbGraph.Core.InvoiceOverviewKpiV1","monthlySalesTotalAmount":%1,"yearlySalesTotalAmount":%2,"outstandingSalesTotalAmount":%3,"overdueSalesTotalAmount":%4,"currencyCode":"%5"}};ENC={"summary":{"@odata.type":"#Microsoft.Griffin.SmallBusiness.SbGraph.Core.InvoiceOverviewKpiV1","monthlySalesTotalAmount":%1,"yearlySalesTotalAmount":%2,"outstandingSalesTotalAmount":%3,"overdueSalesTotalAmount":%4,"currencyCode":"%5"}}';

      InvoiceCreatedObjectTxt@1020 : TextConst
        '@@@={Locked}',
        'ENU={"customerFirstName":"%1","customerLastName":"%2","customerEmailAddress":"%3","companyName":"%4","amount":%5,"currencyCode":"%6","description":"%7","externalInvoiceId":"%8","sentDateTime":"%9","dueDateTime":"%10","employeeName":"%11","state":"%12"}',
        'ESM={"customerFirstName":"%1","customerLastName":"%2","customerEmailAddress":"%3","companyName":"%4","amount":%5,"currencyCode":"%6","description":"%7","externalInvoiceId":"%8","sentDateTime":"%9","dueDateTime":"%10","employeeName":"%11","state":"%12"}',
        'FRC={"customerFirstName":"%1","customerLastName":"%2","customerEmailAddress":"%3","companyName":"%4","amount":%5,"currencyCode":"%6","description":"%7","externalInvoiceId":"%8","sentDateTime":"%9","dueDateTime":"%10","employeeName":"%11","state":"%12"}',
        'ENC={"customerFirstName":"%1","customerLastName":"%2","customerEmailAddress":"%3","companyName":"%4","amount":%5,"currencyCode":"%6","description":"%7","externalInvoiceId":"%8","sentDateTime":"%9","dueDateTime":"%10","employeeName":"%11","state":"%12"}';

      InvoicePaidObjectTxt@1021 : TextConst
        '@@@={Locked}',
        'ENU={"customerFirstName":"%1","customerLastName":"%2","customerEmailAddress":"%3","companyName":"%4","amount":%5,"currencyCode":"%6","description":"%7","externalInvoiceId":"%8","sentDateTime":"%9","dueDateTime":"%10","employeeName":"%11","state":"%12"}',
        'ESM={"customerFirstName":"%1","customerLastName":"%2","customerEmailAddress":"%3","companyName":"%4","amount":%5,"currencyCode":"%6","description":"%7","externalInvoiceId":"%8","sentDateTime":"%9","dueDateTime":"%10","employeeName":"%11","state":"%12"}',
        'FRC={"customerFirstName":"%1","customerLastName":"%2","customerEmailAddress":"%3","companyName":"%4","amount":%5,"currencyCode":"%6","description":"%7","externalInvoiceId":"%8","sentDateTime":"%9","dueDateTime":"%10","employeeName":"%11","state":"%12"}',
        'ENC={"customerFirstName":"%1","customerLastName":"%2","customerEmailAddress":"%3","companyName":"%4","amount":%5,"currencyCode":"%6","description":"%7","externalInvoiceId":"%8","sentDateTime":"%9","dueDateTime":"%10","employeeName":"%11","state":"%12"}';
      InvoiceDraftObjectTxt@1022 : TextConst '@@@={Locked};ENU={"totalDrafts":%1};ESM={"totalDrafts":%1};FRC={"totalDrafts":%1};ENC={"totalDrafts":%1}';

      InvoiceOverdueObjectTxt@1023 : TextConst
        '@@@={Locked}',
        'ENU={"customerFirstName":"%1","customerLastName":"%2","customerEmailAddress":"%3","companyName":"%4","amount":%5,"currencyCode":"%6","description":"%7","externalInvoiceId":"%8","sentDateTime":"%9","dueDateTime":"%10","employeeName":"%11","state":"%12"}',
        'ESM={"customerFirstName":"%1","customerLastName":"%2","customerEmailAddress":"%3","companyName":"%4","amount":%5,"currencyCode":"%6","description":"%7","externalInvoiceId":"%8","sentDateTime":"%9","dueDateTime":"%10","employeeName":"%11","state":"%12"}',
        'FRC={"customerFirstName":"%1","customerLastName":"%2","customerEmailAddress":"%3","companyName":"%4","amount":%5,"currencyCode":"%6","description":"%7","externalInvoiceId":"%8","sentDateTime":"%9","dueDateTime":"%10","employeeName":"%11","state":"%12"}',
        'ENC={"customerFirstName":"%1","customerLastName":"%2","customerEmailAddress":"%3","companyName":"%4","amount":%5,"currencyCode":"%6","description":"%7","externalInvoiceId":"%8","sentDateTime":"%9","dueDateTime":"%10","employeeName":"%11","state":"%12"}';
      EstimateExpiryObjectTxt@1032 : TextConst '@@@={Locked};ENU={"totalExpiringEstimates":%1};ESM={"totalExpiringEstimates":%1};FRC={"totalExpiringEstimates":%1};ENC={"totalExpiringEstimates":%1}';

      EstimateCreatedObjectTxt@1034 : TextConst
        '@@@={Locked}',
        'ENU={"customerFirstName":"%1","customerLastName":"%2","customerEmailAddress":"%3","companyName":"%4","amount":%5,"currencyCode":"%6","description":"%7","externalInvoiceId":"%8","sentDateTime":"%9","dueDateTime":"%10","employeeName":"%11","state":"%12"}',
        'ESM={"customerFirstName":"%1","customerLastName":"%2","customerEmailAddress":"%3","companyName":"%4","amount":%5,"currencyCode":"%6","description":"%7","externalInvoiceId":"%8","sentDateTime":"%9","dueDateTime":"%10","employeeName":"%11","state":"%12"}',
        'FRC={"customerFirstName":"%1","customerLastName":"%2","customerEmailAddress":"%3","companyName":"%4","amount":%5,"currencyCode":"%6","description":"%7","externalInvoiceId":"%8","sentDateTime":"%9","dueDateTime":"%10","employeeName":"%11","state":"%12"}',
        'ENC={"customerFirstName":"%1","customerLastName":"%2","customerEmailAddress":"%3","companyName":"%4","amount":%5,"currencyCode":"%6","description":"%7","externalInvoiceId":"%8","sentDateTime":"%9","dueDateTime":"%10","employeeName":"%11","state":"%12"}';

      EstimateAcceptedObjectTxt@1033 : TextConst
        '@@@={Locked}',
        'ENU={"customerFirstName":"%1","customerLastName":"%2","customerEmailAddress":"%3","companyName":"%4","amount":%5,"currencyCode":"%6","description":"%7","externalInvoiceId":"%8","sentDateTime":"%9","dueDateTime":"%10","employeeName":"%11","state":"%12"}',
        'ESM={"customerFirstName":"%1","customerLastName":"%2","customerEmailAddress":"%3","companyName":"%4","amount":%5,"currencyCode":"%6","description":"%7","externalInvoiceId":"%8","sentDateTime":"%9","dueDateTime":"%10","employeeName":"%11","state":"%12"}',
        'FRC={"customerFirstName":"%1","customerLastName":"%2","customerEmailAddress":"%3","companyName":"%4","amount":%5,"currencyCode":"%6","description":"%7","externalInvoiceId":"%8","sentDateTime":"%9","dueDateTime":"%10","employeeName":"%11","state":"%12"}',
        'ENC={"customerFirstName":"%1","customerLastName":"%2","customerEmailAddress":"%3","companyName":"%4","amount":%5,"currencyCode":"%6","description":"%7","externalInvoiceId":"%8","sentDateTime":"%9","dueDateTime":"%10","employeeName":"%11","state":"%12"}';
      InactivityObjectTxt@1024 : TextConst '@@@={Locked};ENU={"duration":%1};ESM={"duration":%1};FRC={"duration":%1};ENC={"duration":%1}';
      ActivityKindTxt@1026 : TextConst '@@@={Locked};ENU=Activity;ESM=Activity;FRC=Activity;ENC=Activity';
      KpiKindTxt@1027 : TextConst '@@@={Locked};ENU=Kpi;ESM=Kpi;FRC=Kpi;ENC=Kpi';
      InvoiceDescTxt@1025 : TextConst '@@@="%1 = The Invoice number";ENU=Invoice %1;ESM=Factura %1;FRC=Facture %1;ENC=Invoice %1';
      EstimateDescTxt@1031 : TextConst '@@@="%1 = the estimate number";ENU=Estimate %1;ESM=Estimaci¢n %1;FRC=Estimation %1;ENC=Estimate %1';
      MissingEndpointErr@1000 : TextConst 'ENU=No Graph endpoint has been specified.;ESM=No se ha especificado extremo Graph.;FRC=Aucun point de terminaison Graph n''a ‚t‚ sp‚cifi‚.;ENC=No Graph endpoint has been specified.';
      UpdateKpiTypeTxt@1006 : TextConst '@@@={Locked};ENU=InvoiceOverviewKPI;ESM=InvoiceOverviewKPI;FRC=InvoiceOverviewKPI;ENC=InvoiceOverviewKPI';
      InvoiceCreatedTypeTxt@1015 : TextConst '@@@={Locked};ENU=InvoiceSent;ESM=InvoiceSent;FRC=InvoiceSent;ENC=InvoiceSent';
      InvoicePaidTypeTxt@1016 : TextConst '@@@={Locked};ENU=InvoicePaid;ESM=InvoicePaid;FRC=InvoicePaid;ENC=InvoicePaid';
      InvoiceDraftTypeTxt@1017 : TextConst '@@@={Locked};ENU=NewInvoice;ESM=NewInvoice;FRC=NewInvoice;ENC=NewInvoice';
      InvoiceOverdueTypeTxt@1018 : TextConst '@@@={Locked};ENU=InvoiceOverdue;ESM=InvoiceOverdue;FRC=InvoiceOverdue;ENC=InvoiceOverdue';
      InvoiceInactivityTypeTxt@1019 : TextConst '@@@={Locked};ENU=InvoiceInactivity;ESM=InvoiceInactivity;FRC=InvoiceInactivity;ENC=InvoiceInactivity';
      InvoiceEmailFailedTypeTxt@1036 : TextConst '@@@={Locked};ENU=InvoiceEmailFailed;ESM=InvoiceEmailFailed;FRC=InvoiceEmailFailed;ENC=InvoiceEmailFailed';
      EstimateSentTypeTxt@1007 : TextConst '@@@={Locked};ENU=EstimateSent;ESM=EstimateSent;FRC=EstimateSent;ENC=EstimateSent';
      EstimateAcceptedTypeTxt@1008 : TextConst '@@@={Locked};ENU=EstimateAccepted;ESM=EstimateAccepted;FRC=EstimateAccepted;ENC=EstimateAccepted';
      EstimateExpiryTypeTxt@1009 : TextConst '@@@={Locked};ENU=EstimateExpiry;ESM=EstimateExpiry;FRC=EstimateExpiry;ENC=EstimateExpiry';
      EstimateEmailFailedTypeTxt@1037 : TextConst '@@@={Locked};ENU=EstimateEmailFailed;ESM=EstimateEmailFailed;FRC=EstimateEmailFailed;ENC=EstimateEmailFailed';
      C2GraphStatusTxt@1002 : TextConst 'ENU=Update C2Graph;ESM=Actualizar C2Graph;FRC=Mettre … jour C2Graph;ENC=Update C2Graph';
      InvoicePaidTxt@1010 : TextConst 'ENU=Invoice Paid;ESM=Factura pagada;FRC=Facture pay‚e;ENC=Invoice Paid';
      InvoiceCreatedTxt@1011 : TextConst 'ENU=Invoice Created;ESM=Factura creada;FRC=Facture cr‚‚e;ENC=Invoice Created';
      InvoiceDraftTxt@1012 : TextConst 'ENU=Invoice Draft;ESM=Borrador de factura;FRC=Facture provisoire;ENC=Invoice Draft';
      InvoiceOverdueTxt@1013 : TextConst 'ENU=Invoice Overdue;ESM=Factura vencida;FRC=Facture ‚chue;ENC=Invoice Overdue';
      InvoiceInactivityTxt@1014 : TextConst 'ENU=Invoice Inactivity;ESM=Inactividad de facturaci¢n;FRC=Inactivit‚ de facture;ENC=Invoice Inactivity';
      InvoiceEmailFailedTxt@1038 : TextConst '@@@={Locked};ENU=Invoice Email Failed;ESM=Invoice Email Failed;FRC=Invoice Email Failed;ENC=Invoice Email Failed';
      EstimateSentTxt@1028 : TextConst 'ENU=Estimate Sent;ESM=Estimaci¢n enviada;FRC=Estimation envoy‚e;ENC=Estimate Sent';
      EstimateAcceptedTxt@1029 : TextConst 'ENU=Estimate Accepted;ESM=Estimaci¢n aceptada;FRC=Estimation accept‚e;ENC=Estimate Accepted';
      EstimateExpiryTxt@1030 : TextConst 'ENU=Estimate Expiry;ESM=Expiraci¢n de estimaci¢n;FRC=Expiration de l''estim.;ENC=Estimate Expiry';
      EstimateEmailFailedTxt@1039 : TextConst '@@@={Locked};ENU=Estimate Email Failed;ESM=Estimate Email Failed;FRC=Estimate Email Failed;ENC=Estimate Email Failed';
      C2GraphUpdateActionTxt@1003 : TextConst 'ENU=Update KPIs;ESM=Actualizar KPI;FRC=Mettre … jour les KPI;ENC=Update KPIs';

    PROCEDURE SendInvoiceInactivityEvent@15();
    VAR
      ActivityLog@1000 : Record 710;
      O365SalesGraph@1001 : Record 2190;
      OutStr@1002 : OutStream;
      ConnectionId@1003 : Text;
    BEGIN
      ConnectionId := FORMAT(CREATEGUID);
      IF NOT HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId) THEN
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,
          GetConnectionString);

      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,TRUE);

      O365SalesGraph.Initialize;
      O365SalesGraph.Type := InvoiceInactivityTypeTxt;
      O365SalesGraph.Kind := ActivityKindTxt;
      O365SalesGraph.SetEmployeeIdToCurrentUser;
      O365SalesGraph.Details.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      GetInactivityDetails(OutStr);

      ActivityLog.LogActivity(O365SalesGraph,ActivityLog.Status::Success,InvoiceInactivityTxt,'','');
      IF O365SalesGraph.INSERT(TRUE) THEN;

      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId);
    END;

    PROCEDURE SendInvoiceOverdueEvent@14(InvoiceNo@1000 : Code[20]);
    VAR
      SalesInvoiceHeader@1004 : Record 112;
      ActivityLog@1003 : Record 710;
      O365SalesGraph@1001 : Record 2190;
      OutStr@1002 : OutStream;
      ContactGraphId@1005 : Text[250];
      ConnectionId@1006 : Text;
    BEGIN
      IF NOT SalesInvoiceHeader.GET(InvoiceNo) THEN
        EXIT;

      IF ISNULLGUID(SalesInvoiceHeader.Id) THEN
        EXIT;

      IF SalesInvoiceHeader."Due Date" > TODAY THEN
        EXIT;

      ContactGraphId := GetGraphIdForContactFromInvoice(SalesInvoiceHeader);

      ConnectionId := FORMAT(CREATEGUID);
      IF NOT HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId) THEN
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,
          GetConnectionString);

      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,TRUE);

      O365SalesGraph.Initialize;
      O365SalesGraph.Type := InvoiceOverdueTypeTxt;
      O365SalesGraph.Kind := ActivityKindTxt;
      O365SalesGraph.SetEmployeeIdToCurrentUser;
      O365SalesGraph.InvoiceId := FORMAT(SalesInvoiceHeader.Id);
      O365SalesGraph.Details.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      O365SalesGraph.ContactId := ContactGraphId;
      IF NOT GetOverdueDetails(InvoiceNo,OutStr) THEN
        EXIT;

      ActivityLog.LogActivity(O365SalesGraph,ActivityLog.Status::Success,InvoiceOverdueTxt,InvoiceNo,'');
      IF O365SalesGraph.INSERT(TRUE) THEN;

      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId);
    END;

    PROCEDURE SendInvoiceDraftEvent@13();
    VAR
      ActivityLog@1000 : Record 710;
      O365SalesGraph@1001 : Record 2190;
      OutStr@1002 : OutStream;
      ConnectionId@1003 : Text;
    BEGIN
      ConnectionId := FORMAT(CREATEGUID);
      IF NOT HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId) THEN
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,
          GetConnectionString);

      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,TRUE);

      O365SalesGraph.Initialize;
      O365SalesGraph.Type := InvoiceDraftTypeTxt;
      O365SalesGraph.Kind := ActivityKindTxt;
      O365SalesGraph.SetEmployeeIdToCurrentUser;
      O365SalesGraph.Details.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      IF NOT GetDraftDetails(OutStr) THEN
        EXIT;

      ActivityLog.LogActivity(O365SalesGraph,ActivityLog.Status::Success,InvoiceDraftTxt,'','');
      IF O365SalesGraph.INSERT(TRUE) THEN;

      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId);
    END;

    PROCEDURE SendInvoiceCreatedEvent@9(InvoiceNo@1000 : Code[20]);
    VAR
      ActivityLog@1003 : Record 710;
      O365SalesGraph@1001 : Record 2190;
      OutStr@1002 : OutStream;
      ContactGraphId@1005 : Text[250];
      ConnectionId@1006 : Text;
      SalesInvoiceHeaderId@1004 : Text[60];
    BEGIN
      IF NOT GetIdsIfValidInvoice(InvoiceNo,ContactGraphId,ConnectionId,SalesInvoiceHeaderId) THEN
        EXIT;

      IF NOT HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId) THEN
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,
          GetConnectionString);

      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,TRUE);

      O365SalesGraph.Initialize;
      O365SalesGraph.Type := InvoiceCreatedTypeTxt;
      O365SalesGraph.Kind := ActivityKindTxt;
      O365SalesGraph.SetEmployeeIdToCurrentUser;
      O365SalesGraph.InvoiceId := SalesInvoiceHeaderId;
      O365SalesGraph.ContactId := ContactGraphId;
      O365SalesGraph.Details.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      GetInvoiceDetails(InvoiceNo,OutStr,'Created');

      ActivityLog.LogActivity(O365SalesGraph,ActivityLog.Status::Success,InvoiceCreatedTxt,InvoiceNo,'');
      IF O365SalesGraph.INSERT(TRUE) THEN;

      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId);
    END;

    PROCEDURE SendInvoicePaidEvent@11(InvoiceNo@1000 : Code[20]);
    VAR
      ActivityLog@1001 : Record 710;
      O365SalesGraph@1002 : Record 2190;
      OutStr@1003 : OutStream;
      ContactGraphId@1005 : Text[250];
      ConnectionId@1006 : Text;
      SalesInvoiceHeaderId@1004 : Text[60];
    BEGIN
      IF NOT GetIdsIfValidInvoice(InvoiceNo,ContactGraphId,ConnectionId,SalesInvoiceHeaderId) THEN
        EXIT;

      IF NOT HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId) THEN
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,
          GetConnectionString);

      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,TRUE);

      O365SalesGraph.Initialize;
      O365SalesGraph.Type := InvoicePaidTypeTxt;
      O365SalesGraph.Kind := ActivityKindTxt;
      O365SalesGraph.SetEmployeeIdToCurrentUser;
      O365SalesGraph.InvoiceId := SalesInvoiceHeaderId;
      O365SalesGraph.ContactId := ContactGraphId;
      O365SalesGraph.Details.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      IF NOT GetPaidInvoiceDetails(InvoiceNo,OutStr) THEN
        EXIT;

      ActivityLog.LogActivity(O365SalesGraph,ActivityLog.Status::Success,InvoicePaidTxt,InvoiceNo,'');
      IF O365SalesGraph.INSERT(TRUE) THEN;

      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId);
    END;

    PROCEDURE SendInvoiceEmailFailedEvent@30(InvoiceNo@1000 : Code[20]);
    VAR
      ActivityLog@1003 : Record 710;
      O365SalesGraph@1001 : Record 2190;
      OutStr@1002 : OutStream;
      ContactGraphId@1005 : Text[250];
      ConnectionId@1006 : Text;
      SalesInvoiceHeaderId@1004 : Text[60];
    BEGIN
      IF NOT GetIdsIfValidInvoice(InvoiceNo,ContactGraphId,ConnectionId,SalesInvoiceHeaderId) THEN
        EXIT;

      IF NOT HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId) THEN
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,
          GetConnectionString);

      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,TRUE);

      O365SalesGraph.Initialize;
      O365SalesGraph.Type := InvoiceEmailFailedTypeTxt;
      O365SalesGraph.Kind := ActivityKindTxt;
      O365SalesGraph.SetEmployeeIdToCurrentUser;
      O365SalesGraph.InvoiceId := SalesInvoiceHeaderId;
      O365SalesGraph.ContactId := ContactGraphId;
      O365SalesGraph.Details.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      GetInvoiceDetails(InvoiceNo,OutStr,'EmailFailed');

      ActivityLog.LogActivity(O365SalesGraph,ActivityLog.Status::Success,InvoiceEmailFailedTxt,InvoiceNo,'');
      IF O365SalesGraph.INSERT(TRUE) THEN;

      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId);
    END;

    PROCEDURE SendEstimateSentEvent@7(EstimateNo@1000 : Code[20]);
    VAR
      ActivityLog@1003 : Record 710;
      O365SalesGraph@1001 : Record 2190;
      OutStr@1002 : OutStream;
      ContactGraphId@1005 : Text[250];
      ConnectionId@1006 : Text;
      SalesHeaderId@1004 : Text[60];
    BEGIN
      IF NOT GetIdsIfValidEstimate(EstimateNo,ContactGraphId,ConnectionId,SalesHeaderId) THEN
        EXIT;

      IF NOT HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId) THEN
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,
          GetConnectionString);

      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,TRUE);

      O365SalesGraph.Initialize;
      O365SalesGraph.Type := EstimateSentTypeTxt;
      O365SalesGraph.Kind := ActivityKindTxt;
      O365SalesGraph.SetEmployeeIdToCurrentUser;
      O365SalesGraph.InvoiceId := SalesHeaderId;
      O365SalesGraph.ContactId := ContactGraphId;
      O365SalesGraph.Details.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      GetEstimateDetails(EstimateNo,OutStr,'Sent');

      ActivityLog.LogActivity(O365SalesGraph,ActivityLog.Status::Success,EstimateSentTxt,EstimateNo,'');
      IF O365SalesGraph.INSERT(TRUE) THEN;

      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId);
    END;

    PROCEDURE SendEstimateAcceptedEvent@10(EstimateNo@1000 : Code[20]);
    VAR
      ActivityLog@1001 : Record 710;
      O365SalesGraph@1002 : Record 2190;
      OutStr@1003 : OutStream;
      ContactGraphId@1005 : Text[250];
      ConnectionId@1006 : Text;
      SalesHeaderId@1004 : Text[60];
    BEGIN
      IF NOT GetIdsIfValidEstimate(EstimateNo,ContactGraphId,ConnectionId,SalesHeaderId) THEN
        EXIT;

      IF NOT HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId) THEN
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,
          GetConnectionString);

      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,TRUE);

      O365SalesGraph.Initialize;
      O365SalesGraph.Type := EstimateAcceptedTypeTxt;
      O365SalesGraph.Kind := ActivityKindTxt;
      O365SalesGraph.SetEmployeeIdToCurrentUser;
      O365SalesGraph.InvoiceId := SalesHeaderId;
      O365SalesGraph.ContactId := ContactGraphId;
      O365SalesGraph.Details.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      IF NOT GetAcceptedEstimateDetails(EstimateNo,OutStr) THEN
        EXIT;

      ActivityLog.LogActivity(O365SalesGraph,ActivityLog.Status::Success,EstimateAcceptedTxt,EstimateNo,'');
      IF O365SalesGraph.INSERT(TRUE) THEN;

      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId);
    END;

    PROCEDURE SendEstimateExpiryEvent@12();
    VAR
      ActivityLog@1000 : Record 710;
      O365SalesGraph@1001 : Record 2190;
      OutStr@1002 : OutStream;
      ConnectionId@1003 : Text;
    BEGIN
      ConnectionId := FORMAT(CREATEGUID);
      IF NOT HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId) THEN
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,
          GetConnectionString);

      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,TRUE);

      O365SalesGraph.Initialize;
      O365SalesGraph.Type := EstimateExpiryTypeTxt;
      O365SalesGraph.Kind := ActivityKindTxt;
      O365SalesGraph.SetEmployeeIdToCurrentUser;
      O365SalesGraph.Details.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      IF NOT GetExpiringEstimateDetails(OutStr) THEN
        EXIT;

      ActivityLog.LogActivity(O365SalesGraph,ActivityLog.Status::Success,EstimateExpiryTxt,'','');
      IF O365SalesGraph.INSERT(TRUE) THEN;

      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId);
    END;

    PROCEDURE SendEstimateEmailFailedEvent@27(EstimateNo@1000 : Code[20]);
    VAR
      ActivityLog@1003 : Record 710;
      O365SalesGraph@1001 : Record 2190;
      OutStr@1002 : OutStream;
      ContactGraphId@1005 : Text[250];
      ConnectionId@1006 : Text;
      SalesHeaderId@1004 : Text[60];
    BEGIN
      IF NOT GetIdsIfValidEstimate(EstimateNo,ContactGraphId,ConnectionId,SalesHeaderId) THEN
        EXIT;

      IF NOT HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId) THEN
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,
          GetConnectionString);

      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,TRUE);

      O365SalesGraph.Initialize;
      O365SalesGraph.Type := EstimateEmailFailedTypeTxt;
      O365SalesGraph.Kind := ActivityKindTxt;
      O365SalesGraph.SetEmployeeIdToCurrentUser;
      O365SalesGraph.InvoiceId := SalesHeaderId;
      O365SalesGraph.ContactId := ContactGraphId;
      O365SalesGraph.Details.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      GetEstimateDetails(EstimateNo,OutStr,'EmailFailed');

      ActivityLog.LogActivity(O365SalesGraph,ActivityLog.Status::Success,EstimateEmailFailedTxt,EstimateNo,'');
      IF O365SalesGraph.INSERT(TRUE) THEN;

      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId);
    END;

    PROCEDURE SendKPI@5();
    VAR
      O365SalesGraph@1000 : Record 2190;
      ActivityLog@1002 : Record 710;
      OutStr@1001 : OutStream;
      ConnectionId@1003 : Text;
    BEGIN
      ConnectionId := FORMAT(CREATEGUID);
      IF NOT HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId) THEN
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,
          GetConnectionString);

      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,TRUE);

      O365SalesGraph.Initialize;
      O365SalesGraph.Type := UpdateKpiTypeTxt;
      O365SalesGraph.Kind := KpiKindTxt;
      O365SalesGraph.Details.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      GetKpiDetails(OutStr);

      ActivityLog.LogActivity(O365SalesGraph,ActivityLog.Status::Success,C2GraphStatusTxt,C2GraphUpdateActionTxt,'');
      IF O365SalesGraph.INSERT(TRUE) THEN;

      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId);
    END;

    LOCAL PROCEDURE GetKpiDetails@8(VAR Details@1000 : OutStream);
    VAR
      GLSetup@1002 : Record 98;
      JSONManagement@1001 : Codeunit 5459;
    BEGIN
      IF GLSetup.GET THEN;

      JSONManagement.InitializeObject(
        STRSUBSTNO(
          KpiObjectTxt,
          FORMAT(InvoicedThisMonth,0,9),
          FORMAT(InvoicedYearToDate,0,9),
          FORMAT(OutstandingAmount,0,9),
          FORMAT(OverdueAmount,0,9),
          GLSetup."Local Currency Symbol"));
      Details.WRITE(JSONManagement.WriteObjectToString);
    END;

    LOCAL PROCEDURE GetInactivityDetails@21(VAR Details@1000 : OutStream);
    VAR
      O365C2GraphEventSettings@1002 : Record 2162;
      JSONManagement@1001 : Codeunit 5459;
    BEGIN
      IF NOT O365C2GraphEventSettings.GET THEN
        O365C2GraphEventSettings.INSERT(TRUE);

      JSONManagement.InitializeObject(
        STRSUBSTNO(
          InactivityObjectTxt,
          FORMAT(O365C2GraphEventSettings."Inv. Inactivity Duration (Day)",0,9)));
      Details.WRITE(JSONManagement.WriteObjectToString);
    END;

    LOCAL PROCEDURE GetOverdueDetails@22(DocNo@1000 : Code[20];VAR Details@1001 : OutStream) : Boolean;
    VAR
      SalesInvoiceHeader@1003 : Record 112;
      Customer@1004 : Record 18;
      Contact@1006 : Record 5050;
      Currency@1005 : Record 4;
      User@1007 : Record 2000000120;
      JSONManagement@1002 : Codeunit 5459;
      ContactFirstName@1008 : Text;
    BEGIN
      SalesInvoiceHeader.GET(DocNo);
      SalesInvoiceHeader.CALCFIELDS("Remaining Amount","Amount Including VAT");

      IF SalesInvoiceHeader."Remaining Amount" <= 0 THEN
        EXIT(FALSE);

      IF Customer.GET(SalesInvoiceHeader."Sell-to Customer No.") THEN
        IF Contact.GET(Customer."Primary Contact No.") THEN;

      IF User.GET(USERSECURITYID) THEN;

      IF (Contact."First Name" = '') AND (Contact.Surname = '') THEN
        ContactFirstName := Customer.Name
      ELSE
        ContactFirstName := Contact."First Name";

      JSONManagement.InitializeObject(STRSUBSTNO(
          InvoiceOverdueObjectTxt,
          ContactFirstName,
          Contact.Surname,
          Customer."E-Mail",
          Customer.Name,
          FORMAT(SalesInvoiceHeader."Amount Including VAT",0,9),
          Currency.ResolveGLCurrencySymbol(SalesInvoiceHeader."Currency Code"),
          STRSUBSTNO(InvoiceDescTxt,SalesInvoiceHeader."No."),
          SalesInvoiceHeader."No.",
          FORMAT(CREATEDATETIME(SalesInvoiceHeader."Posting Date",0T),0,9),
          FORMAT(CREATEDATETIME(SalesInvoiceHeader."Due Date",0T),0,9),
          User."Full Name",
          'Overdue'));
      Details.WRITE(JSONManagement.WriteObjectToString);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetDraftDetails@23(VAR Details@1000 : OutStream) : Boolean;
    VAR
      SalesHeader@1002 : Record 36;
      JSONManagement@1001 : Codeunit 5459;
    BEGIN
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Invoice);
      IF SalesHeader.ISEMPTY THEN
        EXIT(FALSE);

      JSONManagement.InitializeObject(STRSUBSTNO(InvoiceDraftObjectTxt,FORMAT(SalesHeader.COUNT,0,9)));
      Details.WRITE(JSONManagement.WriteObjectToString);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetInvoiceDetails@24(DocNo@1000 : Code[20];VAR Details@1001 : OutStream;InvoiceState@1009 : Text);
    VAR
      SalesInvoiceHeader@1003 : Record 112;
      Customer@1004 : Record 18;
      Contact@1006 : Record 5050;
      User@1007 : Record 2000000120;
      Currency@1005 : Record 4;
      JSONManagement@1002 : Codeunit 5459;
      ContactFirstName@1008 : Text;
    BEGIN
      SalesInvoiceHeader.GET(DocNo);
      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");

      IF Customer.GET(SalesInvoiceHeader."Sell-to Customer No.") THEN
        IF Contact.GET(Customer."Primary Contact No.") THEN;

      IF User.GET(USERSECURITYID) THEN;

      IF (Contact."First Name" = '') AND (Contact.Surname = '') THEN
        ContactFirstName := Customer.Name
      ELSE
        ContactFirstName := Contact."First Name";

      JSONManagement.InitializeObject(STRSUBSTNO(
          InvoiceCreatedObjectTxt,
          ContactFirstName,
          Contact.Surname,
          Customer."E-Mail",
          Customer.Name,
          FORMAT(SalesInvoiceHeader."Amount Including VAT",0,9),
          Currency.ResolveGLCurrencySymbol(SalesInvoiceHeader."Currency Code"),
          STRSUBSTNO(InvoiceDescTxt,SalesInvoiceHeader."No."),
          SalesInvoiceHeader."No.",
          FORMAT(CREATEDATETIME(SalesInvoiceHeader."Posting Date",0T),0,9),
          FORMAT(CREATEDATETIME(SalesInvoiceHeader."Due Date",0T),0,9),
          User."Full Name",
          InvoiceState));
      Details.WRITE(JSONManagement.WriteObjectToString);
    END;

    LOCAL PROCEDURE GetPaidInvoiceDetails@25(DocNo@1000 : Code[20];Details@1001 : OutStream) : Boolean;
    VAR
      SalesInvoiceHeader@1003 : Record 112;
      Customer@1004 : Record 18;
      Contact@1007 : Record 5050;
      User@1006 : Record 2000000120;
      Currency@1005 : Record 4;
      JSONManagement@1002 : Codeunit 5459;
      ContactFirstName@1008 : Text;
    BEGIN
      SalesInvoiceHeader.GET(DocNo);
      SalesInvoiceHeader.CALCFIELDS("Remaining Amount","Amount Including VAT");

      IF SalesInvoiceHeader."Remaining Amount" > 0 THEN
        EXIT(FALSE);

      IF Customer.GET(SalesInvoiceHeader."Sell-to Customer No.") THEN
        IF Contact.GET(Customer."Primary Contact No.") THEN;

      IF User.GET(USERSECURITYID) THEN;

      IF (Contact."First Name" = '') AND (Contact.Surname = '') THEN
        ContactFirstName := Customer.Name
      ELSE
        ContactFirstName := Contact."First Name";

      JSONManagement.InitializeObject(STRSUBSTNO(
          InvoicePaidObjectTxt,
          ContactFirstName,
          Contact.Surname,
          Customer."E-Mail",
          Customer.Name,
          FORMAT(SalesInvoiceHeader."Amount Including VAT",0,9),
          Currency.ResolveGLCurrencySymbol(SalesInvoiceHeader."Currency Code"),
          STRSUBSTNO(InvoiceDescTxt,SalesInvoiceHeader."No."),
          SalesInvoiceHeader."No.",
          FORMAT(CREATEDATETIME(SalesInvoiceHeader."Posting Date",0T),0,9),
          FORMAT(CREATEDATETIME(SalesInvoiceHeader."Due Date",0T),0,9),
          User."Full Name",
          'Paid'));
      Details.WRITE(JSONManagement.WriteObjectToString);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetEstimateDetails@16(DocNo@1000 : Code[20];VAR Details@1001 : OutStream;EstimateState@1009 : Text);
    VAR
      SalesHeader@1003 : Record 36;
      Customer@1004 : Record 18;
      Contact@1006 : Record 5050;
      User@1007 : Record 2000000120;
      Currency@1005 : Record 4;
      JSONManagement@1002 : Codeunit 5459;
      ContactFirstName@1008 : Text;
    BEGIN
      SalesHeader.GET(SalesHeader."Document Type"::Quote,DocNo);
      SalesHeader.CALCFIELDS("Amount Including VAT");

      IF User.GET(USERSECURITYID) THEN;

      IF Customer.GET(SalesHeader."Sell-to Customer No.") THEN
        IF Contact.GET(Customer."Primary Contact No.") THEN;

      IF (Contact."First Name" = '') AND (Contact.Surname = '') THEN
        ContactFirstName := Customer.Name
      ELSE
        ContactFirstName := Contact."First Name";

      JSONManagement.InitializeObject(STRSUBSTNO(
          EstimateCreatedObjectTxt,
          ContactFirstName,
          Contact.Surname,
          Customer."E-Mail",
          Customer.Name,
          FORMAT(SalesHeader."Amount Including VAT",0,9),
          Currency.ResolveGLCurrencySymbol(SalesHeader."Currency Code"),
          STRSUBSTNO(EstimateDescTxt,SalesHeader."No."),
          SalesHeader."No.",
          FORMAT(SalesHeader."Quote Sent to Customer",0,9),
          FORMAT(CREATEDATETIME(SalesHeader."Quote Valid Until Date",0T),0,9),
          User."Full Name",
          EstimateState));
      Details.WRITE(JSONManagement.WriteObjectToString);
    END;

    LOCAL PROCEDURE GetAcceptedEstimateDetails@18(DocNo@1000 : Code[20];Details@1001 : OutStream) : Boolean;
    VAR
      SalesHeader@1003 : Record 36;
      Customer@1004 : Record 18;
      Contact@1007 : Record 5050;
      User@1006 : Record 2000000120;
      Currency@1005 : Record 4;
      JSONManagement@1002 : Codeunit 5459;
      ContactFirstName@1008 : Text;
    BEGIN
      SalesHeader.GET(SalesHeader."Document Type"::Quote,DocNo);
      SalesHeader.CALCFIELDS("Amount Including VAT");

      IF Customer.GET(SalesHeader."Sell-to Customer No.") THEN
        IF Contact.GET(Customer."Primary Contact No.") THEN;

      IF User.GET(USERSECURITYID) THEN;

      IF (Contact."First Name" = '') AND (Contact.Surname = '') THEN
        ContactFirstName := Customer.Name
      ELSE
        ContactFirstName := Contact."First Name";

      JSONManagement.InitializeObject(STRSUBSTNO(
          EstimateAcceptedObjectTxt,
          ContactFirstName,
          Contact.Surname,
          Customer."E-Mail",
          Customer.Name,
          FORMAT(SalesHeader."Amount Including VAT",0,9),
          Currency.ResolveGLCurrencySymbol(SalesHeader."Currency Code"),
          STRSUBSTNO(EstimateDescTxt,SalesHeader."No."),
          SalesHeader."No.",
          FORMAT(SalesHeader."Quote Sent to Customer",0,9),
          FORMAT(CREATEDATETIME(SalesHeader."Quote Valid Until Date",0T),0,9),
          User."Full Name",
          'Accepted'));
      Details.WRITE(JSONManagement.WriteObjectToString);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetExpiringEstimateDetails@19(VAR Details@1000 : OutStream) : Boolean;
    VAR
      SalesHeader@1002 : Record 36;
      JSONManagement@1001 : Codeunit 5459;
    BEGIN
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Quote);
      SalesHeader.SETRANGE("Quote Valid Until Date",TODAY,CALCDATE('<1W>',TODAY));
      SalesHeader.SETRANGE("Quote Accepted",FALSE);
      IF SalesHeader.ISEMPTY THEN
        EXIT(FALSE);

      JSONManagement.InitializeObject(STRSUBSTNO(EstimateExpiryObjectTxt,FORMAT(SalesHeader.COUNT,0,9)));
      Details.WRITE(JSONManagement.WriteObjectToString);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE OutstandingAmount@1() : Decimal;
    VAR
      O365SalesCue@1000 : Record 9069;
      DummyText@1001 : Text;
    BEGIN
      O365SalesCue.OnOpenActivitiesPage(DummyText);
      O365SalesCue.CALCFIELDS("Sales Invoices Outstanding");
      EXIT(O365SalesCue."Sales Invoices Outstanding");
    END;

    LOCAL PROCEDURE OverdueAmount@2() : Decimal;
    VAR
      O365SalesCue@1001 : Record 9069;
      DummyText@1000 : Text;
    BEGIN
      O365SalesCue.OnOpenActivitiesPage(DummyText);
      O365SalesCue.CALCFIELDS("Sales Invoices Overdue");
      EXIT(O365SalesCue."Sales Invoices Overdue");
    END;

    LOCAL PROCEDURE InvoicedYearToDate@3() : Decimal;
    VAR
      O365SalesCue@1001 : Record 9069;
      DummyText@1000 : Text;
    BEGIN
      O365SalesCue.OnOpenActivitiesPage(DummyText);
      O365SalesCue.CALCFIELDS("Invoiced YTD");
      EXIT(O365SalesCue."Invoiced YTD");
    END;

    LOCAL PROCEDURE InvoicedThisMonth@4() : Decimal;
    VAR
      O365SalesCue@1001 : Record 9069;
      DummyText@1000 : Text;
    BEGIN
      O365SalesCue.OnOpenActivitiesPage(DummyText);
      O365SalesCue.CALCFIELDS("Invoiced CM");
      EXIT(O365SalesCue."Invoiced CM");
    END;

    LOCAL PROCEDURE GetConnectionString@28() : Text;
    VAR
      GraphConnectionSetup@1000 : Codeunit 5456;
    BEGIN
      IF GraphConnectionSetup.IsS2SAuthenticationEnabled THEN
        EXIT(STRSUBSTNO(S2SConnectionStrTemplateTxt,GetGraphUrl,ActivityRolesTxt));

      EXIT(STRSUBSTNO(UserConnectionStrTemplateTxt,GetGraphUrl));
    END;

    LOCAL PROCEDURE GetGraphUrl@6() : Text;
    VAR
      O365SalesInitialSetup@1005 : Record 2110;
    BEGIN
      IF O365SalesInitialSetup.GET THEN
        EXIT(O365SalesInitialSetup."C2Graph Endpoint");

      ERROR(MissingEndpointErr);
    END;

    LOCAL PROCEDURE GetGraphIdForContactFromInvoice@17(SalesInvoiceHeader@1000 : Record 112) : Text[250];
    VAR
      Customer@1001 : Record 18;
      Contact@1002 : Record 5050;
      GraphIntegrationRecord@1003 : Record 5451;
      ContactBusinessRelation@1005 : Record 5054;
      GraphContactId@1004 : Text[250];
    BEGIN
      Customer.GET(SalesInvoiceHeader."Sell-to Customer No.");

      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Customer);
      ContactBusinessRelation.SETRANGE("No.",Customer."No.");
      IF ContactBusinessRelation.FINDFIRST THEN
        IF Contact.GET(ContactBusinessRelation."Contact No.") THEN
          IF GraphIntegrationRecord.FindIDFromRecordID(Contact.RECORDID,GraphContactId) THEN
            EXIT(GraphContactId);

      EXIT('');
    END;

    LOCAL PROCEDURE GetGraphIdForContactFromSalesDoc@20(SalesHeader@1000 : Record 36) : Text[250];
    VAR
      Customer@1001 : Record 18;
      Contact@1002 : Record 5050;
      GraphIntegrationRecord@1003 : Record 5451;
      ContactBusinessRelation@1005 : Record 5054;
      GraphContactId@1004 : Text[250];
    BEGIN
      Customer.GET(SalesHeader."Sell-to Customer No.");

      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Customer);
      ContactBusinessRelation.SETRANGE("No.",Customer."No.");
      IF ContactBusinessRelation.FINDFIRST THEN
        IF Contact.GET(ContactBusinessRelation."Contact No.") THEN
          IF GraphIntegrationRecord.FindIDFromRecordID(Contact.RECORDID,GraphContactId) THEN
            EXIT(GraphContactId);

      EXIT('');
    END;

    LOCAL PROCEDURE GetIdsIfValidInvoice@26(InvoiceNo@1003 : Code[20];VAR ContactGraphId@1002 : Text[250];VAR ConnectionId@1001 : Text;VAR SalesInvoiceHeaderId@1000 : Text[60]) : Boolean;
    VAR
      SalesInvoiceHeader@1004 : Record 112;
    BEGIN
      IF NOT SalesInvoiceHeader.GET(InvoiceNo) THEN
        EXIT(FALSE);

      IF ISNULLGUID(SalesInvoiceHeader.Id) THEN
        EXIT(FALSE);

      ContactGraphId := GetGraphIdForContactFromInvoice(SalesInvoiceHeader);
      ConnectionId := FORMAT(CREATEGUID);
      SalesInvoiceHeaderId := FORMAT(SalesInvoiceHeader.Id);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetIdsIfValidEstimate@29(EstimateNo@1000 : Code[20];VAR ContactGraphId@1002 : Text[250];VAR ConnectionId@1003 : Text;VAR SalesHeaderId@1001 : Text[60]) : Boolean;
    VAR
      SalesHeader@1004 : Record 36;
    BEGIN
      IF NOT SalesHeader.GET(SalesHeader."Document Type"::Quote,EstimateNo) THEN
        EXIT(FALSE);

      IF ISNULLGUID(SalesHeader.Id) THEN
        EXIT(FALSE);

      ContactGraphId := GetGraphIdForContactFromSalesDoc(SalesHeader);
      ConnectionId := FORMAT(CREATEGUID);
      SalesHeaderId := FORMAT(SalesHeader.Id);

      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

