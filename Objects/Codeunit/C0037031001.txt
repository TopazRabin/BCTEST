OBJECT Codeunit 37031001 Dot NET Automation Management
{
  OBJECT-PROPERTIES
  {
    Date=08/18/17;
    Time=12:00:00 PM;
    Version List=SE0.60.15;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Printing@1240030002 : Automation "{B90BCC50-4D99-4A6B-9C6F-3BFB7C76D818} 1.0:{DFED1980-A087-46D3-0004-4C414E48414D}:Unknown Automation Server.Unknown Class";
      Scale@1240030003 : Automation "{B90BCC50-4D99-4A6B-9C6F-3BFB7C76D818} 1.0:{DFED1980-A087-46D3-0003-4C414E48414D}:Unknown Automation Server.Unknown Class";
      USBScale@1240020003 : Automation "{FA3F0847-DACB-41B9-AE8C-68E57D76B05C} 1.0:{1877C105-05F8-44F1-9441-4558DFB8AADE}:Unknown Automation Server.Unknown Class";
      PrintingImage@1240030004 : Automation "{B90BCC50-4D99-4A6B-9C6F-3BFB7C76D818} 1.0:{DFED1980-A087-46D3-0002-4C414E48414D}:Unknown Automation Server.Unknown Class";
      PrintingPrinter@1240020001 : Automation "{B90BCC50-4D99-4A6B-9C6F-3BFB7C76D818} 1.0:{DFED1980-A087-46D3-0002-4C414E48414D}:Unknown Automation Server.Unknown Class";
      PrintingCreated@1240030000 : Boolean;
      ScaleCreated@1240030001 : Boolean;
      Text001@1001 : TextConst 'ENU=Printing Label to %1';
      Text002@1002 : TextConst 'ENU=Communicating with Scale %1';
      PrintingImageCreated@1240030005 : Boolean;
      Text003@1240020000 : TextConst 'ENU=Enter the Label Printer in Carrier Packing Station or Packing Station.';
      PrintingPrinterCreated@1240020002 : Boolean;
      USBScaleCreated@1240020004 : Boolean;
      Text004@1240020005 : TextConst 'ENU=Registering USB Scale';
      Text014@1240020011 : TextConst 'ENU=Install the "Dot NET Automation Print and Scale" external component on this computer. Or contact your Lanham Partner.';
      Text015@1240020010 : TextConst 'ENU=There are multiple printers with same printer name, %1. Please contact your Lanham Partner.';
      Text016@1240020009 : TextConst 'ENU=Unable to access the ''Windows Script Host Object Model''.WshNetwork object. Please contact your Lanham Partner.';
      Text017@1240020008 : TextConst 'ENU=Label printer, %1, is not found. Make sure the printer is installed and check the printer name. Or contact your Lanham Partner.';
      Text018@1240020007 : TextConst 'ENU=Label Printer cannot be %1 when %2 %3 is set to %4.';
      Text019@1240020006 : TextConst 'ENU=Change the Label Printer, %1,that is setup in Carrier Packing Station or Packing Station to a printer name. This label is an image.';
      PrintLocation@1240020012 : Code[10];

    LOCAL PROCEDURE TestPringtingCreated@1240030000();
    BEGIN
      IF PrintingCreated THEN
        EXIT;

      PrintingCreated := TRUE;
      IF NOT(CREATE(Printing,FALSE,TRUE)) THEN
        ERROR(Text014);
    END;

    LOCAL PROCEDURE TestScaleCreated@1240030001();
    BEGIN
      IF ScaleCreated THEN
        EXIT;

      ScaleCreated := TRUE;
      IF NOT(CREATE(Scale,FALSE,TRUE)) THEN
        ERROR(Text014);
    END;

    PROCEDURE TestUSBScaleCreated@1240020001();
    BEGIN
      IF USBScaleCreated THEN
        EXIT;

      USBScaleCreated := TRUE;
      CREATE(USBScale,FALSE,TRUE);
    END;

    PROCEDURE TestPrintingImageCreated@1240030003();
    BEGIN
      IF PrintingImageCreated THEN
        EXIT;

      PrintingImageCreated := TRUE;
      IF NOT(CREATE(PrintingImage,FALSE,TRUE)) THEN
        ERROR(Text014);
    END;

    PROCEDURE TestPrintingPrinterCreated@1240020000();
    BEGIN
      IF PrintingPrinterCreated THEN
        EXIT;

      PrintingPrinterCreated := TRUE;
      IF NOT(CREATE(PrintingPrinter,FALSE,TRUE)) THEN
        ERROR(Text014);
    END;

    PROCEDURE PrintLabel@1240030006(FileName@1240030000 : Text[1000];PrinterPort@1240030001 : Code[100];PrintFrom@1240020011 : 'PACKING,RECEIVE');
    VAR
      PackingStation@1240020007 : Record 14000709;
      TempFile@1240030002 : File;
      NVOutStream@1240020002 : OutStream;
      NVInStream@1240020001 : InStream;
      Window@1240030006 : Dialog;
      TempText@1240030003 : Text[250];
      ClientFile@1240020003 : Text[1024];
      Pos@1240030004 : Integer;
      ReadChar@1240030005 : Char;
      IsPort@1240020000 : Boolean;
    BEGIN
      IF GUIALLOWED THEN
        Window.OPEN(STRSUBSTNO(Text001,PrinterPort));

      PrintLocation := FORMAT(PrintFrom);

      IsPort := CheckIfPort(PrinterPort);

      IF IsPort THEN BEGIN
        TestPringtingCreated;
        Printing.ClearLabel;
      END ELSE BEGIN
        TestPrintingPrinterCreated;
        PrintingPrinter.ClearLabel;
      END;

      IF IsPort THEN BEGIN
        TempFile.WRITEMODE(FALSE);
        TempFile.TEXTMODE(FALSE);
        TempFile.OPEN(FileName);
        REPEAT
          Pos := Pos + 1;
          TempFile.READ(ReadChar);
          TempText := TempText + ' ';
          TempText[Pos] := ReadChar;

          IF Pos = MAXSTRLEN(TempText) THEN BEGIN
              Printing.AddToLabel(TempText);
            TempText := '';
            Pos := 0;
          END;
        UNTIL TempFile.POS = TempFile.LEN;
        TempFile.CLOSE;
      END;

      IF Pos > 0 THEN
        IF IsPort THEN
          Printing.AddToLabel(TempText);

      // XXX Hardcoded printer name
      // Printing.PrintLabel('Generic / Text Only');
      // Printing.PrintLabel('ESHIP');
      IF IsPort THEN
        Printing.PrintLabel(PrinterPort)
      ELSE BEGIN
        //copy from server to client
        IF ISSERVICETIER THEN BEGIN
          TempFile.OPEN(FileName);
          TempFile.CREATEINSTREAM(NVInStream);
          DOWNLOADFROMSTREAM(NVInStream,'','<TEMP>','',ClientFile);
          PrintingPrinter.PrintLabelFile(GetPrinterName(PrinterPort),ClientFile);
          TempFile.CLOSE;
        END ELSE
          PrintingPrinter.PrintLabelFile(GetPrinterName(PrinterPort),FileName);
      END;

      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    PROCEDURE ZeroScale@1240030005(ScaleInterface@1240030000 : Record 14000746) : Text[250];
    VAR
      Window@1240030001 : Dialog;
    BEGIN
      IF GUIALLOWED THEN
        Window.OPEN(STRSUBSTNO(Text002,ScaleInterface.Code));

      TestScaleCreated;

      EXIT(
        Scale.GetWeight(
          STRSUBSTNO('COM%1',ScaleInterface."Scale Comm. Port"),
          STRSUBSTNO(
            '%1 %2 %3 %4',
            ScaleInterface."Scale Baud Rate",ScaleInterface."Scale Parity",
            ScaleInterface."Scale Data Bits",ScaleInterface."Scale Stop Bits"),
          ScaleInterface."Scale Zero Scale String"));

      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    PROCEDURE GetScaleWeight@1240030009(ScaleInterface@1240030000 : Record 14000746) : Text[250];
    VAR
      Window@1240030001 : Dialog;
    BEGIN
      IF GUIALLOWED THEN
        Window.OPEN(STRSUBSTNO(Text002,ScaleInterface.Code));

      TestScaleCreated;

      EXIT(
        Scale.GetWeight(
          STRSUBSTNO('COM%1',ScaleInterface."Scale Comm. Port"),
          STRSUBSTNO(
            '%1 %2 %3 %4',
            ScaleInterface."Scale Baud Rate",ScaleInterface."Scale Parity",
            ScaleInterface."Scale Data Bits",ScaleInterface."Scale Stop Bits"),
          ScaleInterface."Scale Weigh String"));

      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    PROCEDURE RegisterUSBScale@1240020003(ScaleInterface@1240020000 : Record 14000746) : Text[250];
    VAR
      Window@1240020001 : Dialog;
    BEGIN
      IF GUIALLOWED THEN
        Window.OPEN(STRSUBSTNO(Text004,ScaleInterface.Code));

      TestUSBScaleCreated;

      EXIT(
        USBScale.USBScales(
          '/REG',
          ScaleInterface."Vendor ID (Hex)",
          ScaleInterface."Product ID (Hex)",
          SERIALNUMBER,
          COMPANYNAME,
          USERID,
          '','','',''));

      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    PROCEDURE GetUSBScaleWeight@1240020002(ScaleInterface@1240020000 : Record 14000746) : Text[250];
    VAR
      Window@1240020001 : Dialog;
    BEGIN
      IF GUIALLOWED THEN
        Window.OPEN(STRSUBSTNO(Text002,ScaleInterface.Code));

      TestUSBScaleCreated;

      EXIT(
        USBScale.USBScales(
          '/GWT',
          ScaleInterface."Vendor ID (Hex)",
          ScaleInterface."Product ID (Hex)",
          SERIALNUMBER,
          COMPANYNAME,
          USERID,
          '','','',''));

      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    PROCEDURE PrintImage@1240030002(Filename@1240030000 : Text[250];Printername@1240030001 : Text[250]);
    VAR
      Window@1240030002 : Dialog;
      TempFile@1240020000 : File;
      NVInStream@1240020001 : InStream;
      ClientFile@1240020002 : Text[1024];
    BEGIN
      IF NOT CheckIfPort(Printername) THEN BEGIN
        IF GUIALLOWED THEN
          Window.OPEN(STRSUBSTNO(Text001,Printername));

        TestPrintingImageCreated;

        IF ISSERVICETIER THEN BEGIN
          TempFile.OPEN(Filename);
          TempFile.CREATEINSTREAM(NVInStream);
          DOWNLOADFROMSTREAM(NVInStream,'','<TEMP>','',ClientFile);
          TempFile.CLOSE;
          Filename := ClientFile;
        END;
        PrintingImage.PrintImage(Filename,GetPrinterName(Printername));

        IF GUIALLOWED THEN
          Window.CLOSE;
      END ELSE
        ERROR(Text019,Printername);
    END;

    PROCEDURE GetPrinterName@1240020101(PrinterPort@1240020000 : Code[100]) : Code[100];
    VAR
      WSHNetwork@1240020001 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{093FF999-1EA0-4079-9525-9614C3504B74}:'Windows Script Host Object Model'.WshNetwork";
      i@1240020002 : Integer;
      Found@1240020003 : Integer;
      PrinterName@1240020004 : Text[100];
      PrinterFound@1240020005 : Text[100];
    BEGIN
      CLEAR(WSHNetwork);

      IF NOT CREATE(WSHNetwork,FALSE,TRUE) THEN
        ERROR(Text016)
      ELSE BEGIN
        i := 1;  //Odd # items are printer unc names
        Found := 0;
        IF WSHNetwork.EnumPrinterConnections.Count > 0 THEN BEGIN
          REPEAT
            PrinterName := WSHNetwork.EnumPrinterConnections.Item(i);
            IF STRPOS(UPPERCASE(PrinterName),
               UPPERCASE(PrinterPort)) > 0 THEN BEGIN
               Found += 1;
               PrinterFound := PrinterName
            END;
            i += 2;
          UNTIL i > WSHNetwork.EnumPrinterConnections.Count
        END;
      END;

      IF Found = 0 THEN
        MESSAGE(Text017,PrinterPort)
      ELSE IF Found = 1 THEN
        EXIT(PrinterFound)
      ELSE IF Found > 1 THEN
        ERROR(Text015,PrinterPort);
    END;

    PROCEDURE CheckIfPort@1240020102(PrinterPort@1240020001 : Code[100]) : Boolean;
    VAR
      PackingStation@1240020000 : Record 14000709;
      ReceiveStation@1240020002 : Record 14000608;
      PrintFrom@1240020003 : Option;
    BEGIN
      IF PrinterPort = '' THEN
        ERROR(Text003);

      IF PrintLocation = 'PACKING' THEN BEGIN
        PackingStation.GetPackingStation;
        PackingStation.TESTFIELD(Code);

        CASE PackingStation."Label Printing" OF
          PackingStation."Label Printing"::Ports:BEGIN
            IF STRPOS(UPPERCASE(PrinterPort), 'LPT') = 0 THEN
              ERROR(Text018,PrinterPort,PackingStation.TABLENAME + '-' + PackingStation.Code,
                PackingStation.FIELDCAPTION("Label Printing"),PackingStation."Label Printing");
            EXIT(TRUE);
          END;

          PackingStation."Label Printing"::"Printer Name": BEGIN
            IF STRPOS(UPPERCASE(PrinterPort), 'LPT') > 0 THEN
              ERROR(Text018,PrinterPort,PackingStation.TABLENAME + '-' + PackingStation.Code,
                PackingStation.FIELDCAPTION("Label Printing"),PackingStation."Label Printing");
            EXIT(FALSE);
          END;
        END;
      END;

      IF PrintLocation = 'RECEIVE' THEN BEGIN
        ReceiveStation.GetReceiveStation;
        ReceiveStation.TESTFIELD(Code);

        CASE ReceiveStation."Label Printing" OF
          ReceiveStation."Label Printing"::Ports:BEGIN
            IF STRPOS(UPPERCASE(PrinterPort), 'LPT') = 0 THEN
              ERROR(Text018,PrinterPort,ReceiveStation.TABLENAME + '-' + ReceiveStation.Code,
                ReceiveStation.FIELDCAPTION("Label Printing"),ReceiveStation."Label Printing");
            EXIT(TRUE);
          END;

          ReceiveStation."Label Printing"::"Printer Name": BEGIN
            IF STRPOS(UPPERCASE(PrinterPort), 'LPT') > 0 THEN
              ERROR(Text018,PrinterPort,ReceiveStation.TABLENAME + '-' + ReceiveStation.Code,
                ReceiveStation.FIELDCAPTION("Label Printing"),ReceiveStation."Label Printing");
            EXIT(FALSE);
          END;
        END;
      END;
    END;

    PROCEDURE CheckInstallNoError@1240020004() : Boolean;
    BEGIN
      CLEAR(PrintingPrinter);

      IF NOT CREATE(PrintingPrinter,FALSE,TRUE) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

