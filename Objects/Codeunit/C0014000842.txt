OBJECT Codeunit 14000842 Generate Label Field Value
{
  OBJECT-PROPERTIES
  {
    Date=06/28/17;
    Time=12:00:00 PM;
    Version List=SE0.60.12.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            CreateLabelObjects;
          END;

  }
  CODE
  {
    VAR
      Object@1000000000 : Record 2000000001;
      Object2@1000000001 : Record 2000000001;
      Field@1000000002 : Record 2000000041;
      LabelMappingTable@1000000003 : Record 14000843;
      EMailMappingTable@1000000004 : Record 14000904;
      ExportFile@1000000005 : File;
      LegalObjectName@1000000006 : Text[30];
      NewObjectDate@1000000007 : Date;
      NewObjectTime@1000000008 : Time;
      CreateEMail@1000000009 : Boolean;
      CreateLabel@1000000010 : Boolean;
      Text001@1240030000 : TextConst 'ENU=Please import and compile the file %1';
      Text002@1240030001 : TextConst 'ENU="Not a supported Field "';
      Text003@1240030002 : TextConst 'ENU="Table "';
      Text004@1240030003 : TextConst 'ENU=" is not loaded."';
      Text005@1240030004 : TextConst 'ENU="Not a supported Table "';
      Text006@1240030005 : TextConst 'ENU=No';

    PROCEDURE CreateEMailObjects@10();
    VAR
      EMailSetup@1000000000 : Record 14000905;
      EMailSetup2@1000000001 : Record 14000905;
    BEGIN
      EMailSetup.GET;
      EMailSetup.TESTFIELD("Object File Name");
      ExportFile.WRITEMODE(TRUE);
      ExportFile.TEXTMODE(TRUE);
      ExportFile.CREATE(EMailSetup."Object File Name");

      Object.RESET;
      Object.SETRANGE(Type,1);
      Object.SETRANGE(ID,1,1999999999);
      // Object.SETFILTER(ID,'..9999|1000000..');

      NewObjectDate := TODAY;
      NewObjectTime := TIME;
      Object2.GET(Object2.Type::Codeunit,'',CODEUNIT::"Generate E-Mail Field Value");
      CreateEMail := TRUE;

      IF EMailSetup."Max Record No." <= 0 THEN BEGIN
        EMailSetup2.INIT;
        EMailSetup."Max Record No." := EMailSetup2."Max Record No.";
      END;
      WriteSubstitute(EMailSetup."Max Record No." + 1);

      WriteFieldValue;

      MESSAGE(Text001,EMailSetup."Object File Name");
    END;

    PROCEDURE CreateLabelObjects@11();
    VAR
      ShippingSetup@1000000000 : Record 14000707;
      ShippingSetup2@1000000001 : Record 14000707;
    BEGIN
      ShippingSetup.GET;
      ShippingSetup.TESTFIELD("Object File Name");
      ExportFile.WRITEMODE(TRUE);
      ExportFile.TEXTMODE(TRUE);
      ExportFile.CREATE(ShippingSetup."Object File Name");

      Object.RESET;
      Object.SETRANGE(Type,1);
      Object.SETRANGE(ID,1,1999999999);
      // Object.SETFILTER(ID,'..9999|1000000..');

      NewObjectDate := TODAY;
      NewObjectTime := TIME;
      Object2.GET(Object2.Type::Codeunit,'',CODEUNIT::"Generate Label Field Value");
      CreateLabel:= TRUE;

      IF ShippingSetup."Max Record No." <= 0 THEN BEGIN
        ShippingSetup2.INIT;
        ShippingSetup."Max Record No." := ShippingSetup2."Max Record No.";
      END;
      WriteSubstitute(ShippingSetup."Max Record No." + 1);

      WriteFieldValue;

      MESSAGE(Text001,ShippingSetup."Object File Name");
    END;

    LOCAL PROCEDURE WriteFieldValue@4();
    BEGIN
      CASE TRUE OF
        CreateEMail:
          WriteLine('OBJECT Codeunit 14000904 E-Mail Get Field Value');
        CreateLabel:
          WriteLine('OBJECT Codeunit 14000844 Label Get Field Value');
      END;
      WriteLine('{');
      WriteLine('  OBJECT-PROPERTIES');
      WriteLine('  {');
      WriteLine('    Date=' + FORMAT(NewObjectDate,8,1) + ';');
      WriteLine('    Time=[' + FORMAT(NewObjectTime,0,1) + '];');
      WriteLine('    Modified=Yes;');
      WriteLine('    Version List=' + Object2."Version List" + ';');
      WriteLine('  }');
      WriteLine('  PROPERTIES');
      WriteLine('  {');
      WriteLine('    OnRun=BEGIN');
      WriteLine('          END;');
      WriteLine('');
      WriteLine('  }');
      WriteLine('  CODE');
      WriteLine('  {');
      WriteLine('    VAR');
      CASE TRUE OF
        CreateEMail:
          BEGIN
            IF EMailMappingTable.FIND('-') THEN
              REPEAT
                WriteFieldValueVariables(EMailMappingTable."Table No.");
              UNTIL EMailMappingTable.NEXT = 0;
            WriteLine('      FormatValue : Codeunit 14000906;');
          END;
        CreateLabel:
          BEGIN
            IF LabelMappingTable.FIND('-') THEN
              REPEAT
                WriteFieldValueVariables(LabelMappingTable."Table No.");
              UNTIL LabelMappingTable.NEXT = 0;
            WriteLine('      FormatValue : Codeunit 14000845;');
          END;
      END;
      WriteLine('      Field : Record 2000000041;');
      WriteLine('      TempDate : Date;');
      WriteLine('      TempTime : Time;');
      WriteLine('      TempDateFormula : DateFormula;');
      WriteLine('      TempText : Text[1000];');
      WriteLine('      TempCode : Code[250];');
      WriteLine('      TempDecimal : Decimal;');
      WriteLine('      TempInteger : Integer;');
      WriteLine('      TempBoolean : Boolean;');
      WriteLine('      FieldType : Text[100];');
      WriteLine('      FieldValue : Text[1000];');
      WriteLine('      TableRef : RecordRef;');
      WriteLine('      FldRef : FieldRef;');
      WriteLine('      Text001@1001 : TextConst ''ENU="' + Text002 + '"'';');
      WriteLine('      Text002@1002 : TextConst ''ENU="' + Text003 + '"'';');
      WriteLine('      Text003@1003 : TextConst ''ENU="' + Text004 + '"'';');
      WriteLine('      Text004@1004 : TextConst ''ENU="' + Text005 + '"'';');
      WriteLine('');

      CASE TRUE OF
        CreateEMail:
          IF EMailMappingTable.FIND('-') THEN
            REPEAT
              WriteFieldValueProcedure(EMailMappingTable."Table No.");
            UNTIL EMailMappingTable.NEXT = 0;
        CreateLabel:
          IF LabelMappingTable.FIND('-') THEN
            REPEAT
              WriteFieldValueProcedure(LabelMappingTable."Table No.");
            UNTIL LabelMappingTable.NEXT = 0;
      END;
      WriteLine(
        '    PROCEDURE GetField@111100(TableID : Integer;FieldID : Integer;' +
        'FormatLength : Integer;FormatNumber : Integer;FormatString : Text[1000];PostedDoc : Boolean) ReturnText : Text[1000];');
      WriteLine('    VAR');
      WriteLine('      PurchReceiptHdr : Record 120;');
      WriteLine('      PurchReceiptLine : Record 121;');
      WriteLine('      SalesShipmentHdr : Record 110;');
      WriteLine('      SalesShipmentLine : Record 111;');
      WriteLine('      PostedPackage : Record 14000704;');
      WriteLine('      PostedPackageLine : Record 14000705;');
      WriteLine('      PostedReceive : Record 14000603;');
      WriteLine('      PostedReceiveLine : Record 14000604;');
      WriteLine('      Code : Integer;');
      WriteLine('      TempTableID : Integer;');
      WriteLine('      NotInPosted : Boolean;');
      WriteLine('    BEGIN');
      WriteLine('      CLEAR(TempDate);');
      WriteLine('      CLEAR(TempTime);');
      WriteLine('      CLEAR(TempDateFormula);');
      WriteLine('      CLEAR(TempText);');
      WriteLine('      CLEAR(TempCode);');
      WriteLine('      CLEAR(TempDecimal);');
      WriteLine('      CLEAR(TempInteger);');
      WriteLine('      CLEAR(TempBoolean);');
      WriteLine('');
      WriteLine('      IF TableID = 0 THEN');
      WriteLine('        EXIT('''');');
      WriteLine('');
      WriteLine('      CASE TableID OF');
      CASE TRUE OF
        CreateEMail:
          IF EMailMappingTable.FIND('-') THEN
            REPEAT
              WriteFieldValueCase(EMailMappingTable."Table No.");
            UNTIL EMailMappingTable.NEXT = 0;
        CreateLabel:
          IF LabelMappingTable.FIND('-') THEN
            REPEAT
              WriteFieldValueCase(LabelMappingTable."Table No.");
            UNTIL LabelMappingTable.NEXT = 0;
      END;
      WriteLine('        ELSE');
      WriteLine('          ERROR(Text004 + FORMAT(TableID));');
      WriteLine('      END;');
      WriteLine('');
      WriteLine('      IF PostedDoc THEN');
      WriteLine('        CASE TableID OF');
      WriteLine('            36: // Sales Header');
      WriteLine('              BEGIN');
      WriteLine('                SalesShipmentHdr.RESET;');
      WriteLine('                SalesShipmentHdr.SETRANGE("No.",Tab36."No.");');
      WriteLine('                IF SalesShipmentHdr.FIND(''-'') THEN BEGIN');
      WriteLine('                  TableRef.CLOSE;');
      WriteLine('                  TempTableID := 110;');
      WriteLine('                  TableRef.OPEN(110);');
      WriteLine('                  IF TableRef.FIND(''-'') THEN');
      WriteLine('                    TableRef.GETTABLE(SalesShipmentHdr);');
      WriteLine('                END ELSE');
      WriteLine('                  TempTableID := TableID;');
      WriteLine('              END;');
      WriteLine('             37: // Sales Line');
      WriteLine('              BEGIN');
      WriteLine('                SalesShipmentLine.RESET;');
      WriteLine('                SalesShipmentLine.SETRANGE("No.",Tab37."Document No.");');
      WriteLine('                SalesShipmentLine.SETRANGE("Line No.",Tab37."Line No.");');
      WriteLine('                IF SalesShipmentLine.FIND(''-'') THEN BEGIN');
      WriteLine('                  TableRef.CLOSE;');
      WriteLine('                  TempTableID := 111;');
      WriteLine('                  TableRef.OPEN(111);');
      WriteLine('                  IF TableRef.FIND(''-'') THEN');
      WriteLine('                    TableRef.GETTABLE(SalesShipmentLine);');
      WriteLine('                END ELSE');
      WriteLine('                  TempTableID := TableID;');
      WriteLine('              END;');
      WriteLine('            38: // Purchase Header');
      WriteLine('              BEGIN');
      WriteLine('                PurchReceiptHdr.RESET;');
      WriteLine('                PurchReceiptHdr.SETRANGE("No.",Tab38."No.");');
      WriteLine('                IF PurchReceiptHdr.FIND(''-'') THEN BEGIN');
      WriteLine('                  TableRef.CLOSE;');
      WriteLine('                  TempTableID := 120;');
      WriteLine('                  TableRef.OPEN(120);');
      WriteLine('                  IF TableRef.FIND(''-'') THEN');
      WriteLine('                    TableRef.GETTABLE(PurchReceiptHdr);');
      WriteLine('                END ELSE');
      WriteLine('                  TempTableID := TableID;');
      WriteLine('              END;');
      WriteLine('             39: // Purchase Line');
      WriteLine('              BEGIN');
      WriteLine('                PurchReceiptLine.RESET;');
      WriteLine('                PurchReceiptLine.SETRANGE("No.",Tab39."Document No.");');
      WriteLine('                PurchReceiptLine.SETRANGE("Line No.",Tab39."Line No.");');
      WriteLine('                IF PurchReceiptLine.FIND(''-'') THEN BEGIN');
      WriteLine('                  TableRef.CLOSE;');
      WriteLine('                  TempTableID := 121;');
      WriteLine('                  TableRef.OPEN(121);');
      WriteLine('                  IF TableRef.FIND(''-'') THEN');
      WriteLine('                    TableRef.GETTABLE(PurchReceiptLine);');
      WriteLine('                END ELSE');
      WriteLine('                  TempTableID := TableID;');
      WriteLine('              END;');
      WriteLine('          14000601: // Receive');
      WriteLine('            BEGIN');
      WriteLine('              PostedReceive.RESET;');
      WriteLine('              PostedReceive.SETRANGE("No.",Tab14000601."No.");');
      WriteLine('              IF PostedReceive.FIND(''-'') THEN BEGIN');
      WriteLine('                TableRef.CLOSE;');
      WriteLine('                TempTableID := 14000603;');
      WriteLine('                TableRef.OPEN(14000603);');
      WriteLine('                IF TableRef.FIND(''-'') THEN');
      WriteLine('                  TableRef.GETTABLE(PostedReceive);');
      WriteLine('              END ELSE');
      WriteLine('                TempTableID := TableID;');
      WriteLine('            END;');
      WriteLine('          14000602: // Receive Line');
      WriteLine('            BEGIN');
      WriteLine('              PostedReceiveLine.RESET;');
      WriteLine('              PostedReceiveLine.SETRANGE("Receive No.",Tab14000602."Receive No.");');
      WriteLine('              PostedReceiveLine.SETRANGE("Line No.",Tab14000602."Line No.");');
      WriteLine('              IF PostedReceiveLine.FIND(''-'') THEN BEGIN');
      WriteLine('                TableRef.CLOSE;');
      WriteLine('                TempTableID := 14000604;');
      WriteLine('                TableRef.OPEN(14000604);');
      WriteLine('                IF TableRef.FIND(''-'') THEN');
      WriteLine('                  TableRef.GETTABLE(PostedReceiveLine);');
      WriteLine('              END ELSE');
      WriteLine('                TempTableID := TableID');
      WriteLine('            END;');
      WriteLine('          14000701: // Package');
      WriteLine('            BEGIN');
      WriteLine('              PostedPackage.RESET;');
      WriteLine('              PostedPackage.SETRANGE("No.",Tab14000701."No.");');
      WriteLine('              IF PostedPackage.FIND(''-'') THEN BEGIN');
      WriteLine('                TableRef.CLOSE;');
      WriteLine('                TempTableID := 14000704;');
      WriteLine('                TableRef.OPEN(14000704);');
      WriteLine('                IF TableRef.FIND(''-'') THEN');
      WriteLine('                  TableRef.GETTABLE(PostedPackage);');
      WriteLine('              END ELSE');
      WriteLine('                TempTableID := TableID;');
      WriteLine('            END;');
      WriteLine('          14000702: // Package Line');
      WriteLine('            BEGIN');
      WriteLine('              PostedPackageLine.RESET;');
      WriteLine('              PostedPackageLine.SETRANGE("Package No.",Tab14000702."Package No.");');
      WriteLine('              PostedPackageLine.SETRANGE("Line No.",Tab14000702."Line No.");');
      WriteLine('              IF PostedPackageLine.FIND(''-'') THEN BEGIN');
      WriteLine('                TableRef.CLOSE;');
      WriteLine('                TempTableID := 14000705;');
      WriteLine('                TableRef.OPEN(14000705);');
      WriteLine('                IF TableRef.FIND(''-'') THEN');
      WriteLine('                  TableRef.GETTABLE(PostedPackageLine);');
      WriteLine('              END ELSE');
      WriteLine('                TempTableID := TableID');
      WriteLine('            END;');
      WriteLine('          ELSE TempTableID := TableID');
      WriteLine('        END');
      WriteLine('      ELSE');
      WriteLine('        TempTableID := TableID;');
      WriteLine('');
      WriteLine('      FieldValue := '''';');
      WriteLine('      NotInPosted := FALSE;');
      WriteLine('      CLEAR(Field);');
      WriteLine('      Field.SETRANGE(TableNo,TempTableID);');
      WriteLine('      Field.SETRANGE("No.",FieldID);');
      WriteLine('      IF Field.FIND(''-'') THEN BEGIN');
      WriteLine('        IF Field.Class = Field.Class::FlowField THEN BEGIN');
      WriteLine('          FldRef := TableRef.FIELD(Field."No.");');
      WriteLine('          FldRef.CALCFIELD;');
      WriteLine('        END;');
      WriteLine('');
      WriteLine('        FieldType := FORMAT(Field.Type);');
      WriteLine('        FieldValue := FORMAT(TableRef.FIELD(Field."No."));');
      WriteLine('        CASE UPPERCASE(FieldType) OF');
      WriteLine('          ''BOOLEAN'':');
      WriteLine('            EVALUATE(TempBoolean,FieldValue);');
      WriteLine('          ''CODE'':');
      WriteLine('            TempCode := FieldValue;');
      WriteLine('          ''TEXT'',''OPTION'':');
      WriteLine('            TempText := FORMAT(FieldValue);');
      WriteLine('          ''DATE'':');
      WriteLine('            EVALUATE(TempDate,FieldValue);');
      WriteLine('          ''DATEFORMULA'':');
      WriteLine('            EVALUATE(TempDateFormula,FieldValue);');
      WriteLine('          ''DECIMAL'':');
      WriteLine('            EVALUATE(TempDecimal,FieldValue);');
      WriteLine('          ''INTEGER'':');
      WriteLine('            EVALUATE(TempInteger,FieldValue);');
      WriteLine('          ''TIME'':');
      WriteLine('            EVALUATE(TempTime,FieldValue);');
      WriteLine('        END;');
      WriteLine('      END ELSE');
      WriteLine('        NotInPosted := TRUE;');
      WriteLine('      TableRef.CLOSE;');
      WriteLine('');
      WriteLine('      IF FieldID = 0 THEN BEGIN');
      WriteLine('        TempInteger := 1;');
      WriteLine('        Field.INIT;');
      WriteLine('        Field.Type := Field.Type::Integer;');
      WriteLine('      END ELSE BEGIN');
      WriteLine('        IF NotInPosted THEN BEGIN');
      WriteLine('          Field.GET(TableID,FieldID);');
      WriteLine('          CASE UPPERCASE(FieldType) OF');
      WriteLine('            ''BOOLEAN'':');
      WriteLine('              TempBoolean := FALSE;');
      WriteLine('            ''CODE'':');
      WriteLine('              TempCode := '''';');
      WriteLine('            ''TEXT'',''OPTION'':');
      WriteLine('              TempText := '''';');
      WriteLine('            ''DATE'':');
      WriteLine('              TempDate := 0D;');
      WriteLine('            ''DATEFORMULA'':');
      WriteLine('              EVALUATE(TempDateFormula,FieldValue);');
      WriteLine('            ''DECIMAL'':');
      WriteLine('              TempDecimal := 0;');
      WriteLine('            ''INTEGER'':');
      WriteLine('              TempInteger := 0;');
      WriteLine('            ''TIME'':');
      WriteLine('              TempTime := 0T;');
      WriteLine('          END;');
      WriteLine('        END ELSE');
      WriteLine('          Field.GET(TempTableID,FieldID);');
      WriteLine('      END;');
      WriteLine('      CASE Field.Type OF');
      WriteLine('        Field.Type::Text:');
      WriteLine('          EXIT(FormatValue.FormatText(TempText,FormatLength,FormatNumber,FormatString));');
      WriteLine('        Field.Type::Code:');
      WriteLine('          EXIT(FormatValue.FormatCode(TempCode,FormatLength,FormatNumber,FormatString));');
      WriteLine('        Field.Type::Date:');
      WriteLine('          EXIT(FormatValue.FormatDate(TempDate,FormatLength,FormatNumber,FormatString));');
      WriteLine('        Field.Type::Time:');
      WriteLine('          EXIT(FormatValue.FormatTime(TempTime,FormatLength,FormatNumber,FormatString));');
      WriteLine('        Field.Type::DateFormula:');
      WriteLine('          EXIT(FormatValue.FormatDateFormula(TempDateFormula,FormatLength,FormatNumber,FormatString));');
      WriteLine('        Field.Type::Decimal:');
      WriteLine('          EXIT(FormatValue.FormatDecimal(TempDecimal,FormatLength,FormatNumber,FormatString));');
      WriteLine('        Field.Type::Integer:');
      WriteLine('          EXIT(FormatValue.FormatInteger(TempInteger,FormatLength,FormatNumber,FormatString));');
      WriteLine('        Field.Type::Boolean:');
      WriteLine('          EXIT(FormatValue.FormatBoolean(TempBoolean,FormatLength,FormatNumber,FormatString));');
      WriteLine('        Field.Type::Option:');
      WriteLine('          EXIT(FormatValue.FormatOption(TempText,FormatLength,FormatNumber,FormatString));');
      WriteLine('        ELSE');
      WriteLine('          EXIT('''');');
      WriteLine('      END;');
      WriteLine('    END;');
      WriteLine('');
      WriteLine('    PROCEDURE GetText@111101() : Text[1000];');
      WriteLine('    BEGIN');
      WriteLine('      EXIT(TempText);');
      WriteLine('    END;');
      WriteLine('');
      WriteLine('    PROCEDURE GetCode@111102() : Code[250];');
      WriteLine('    BEGIN');
      WriteLine('      EXIT(TempCode);');
      WriteLine('    END;');
      WriteLine('');
      WriteLine('    PROCEDURE GetDate@111103() : Date;');
      WriteLine('    BEGIN');
      WriteLine('      EXIT(TempDate);');
      WriteLine('    END;');
      WriteLine('');
      WriteLine('    PROCEDURE GetTime@111104() : Time;');
      WriteLine('    BEGIN');
      WriteLine('      EXIT(TempTime);');
      WriteLine('    END;');
      WriteLine('');
      WriteLine('    PROCEDURE GetDateFormula@111105() : Code[250];');
      WriteLine('    BEGIN');
      WriteLine('      EXIT(TempCode);');
      WriteLine('    END;');
      WriteLine('');
      WriteLine('    PROCEDURE GetDecimal@111106() : Decimal;');
      WriteLine('    BEGIN');
      WriteLine('      EXIT(TempDecimal);');
      WriteLine('    END;');
      WriteLine('');
      WriteLine('    PROCEDURE GetInteger@111107() : Integer;');
      WriteLine('    BEGIN');
      WriteLine('      EXIT(TempInteger);');
      WriteLine('    END;');
      WriteLine('');
      WriteLine('    PROCEDURE GetBoolean@111108() : Boolean;');
      WriteLine('    BEGIN');
      WriteLine('      EXIT(TempBoolean);');
      WriteLine('    END;');
      WriteLine('');
      WriteLine('    PROCEDURE GetOption@111109() : Integer;');
      WriteLine('    BEGIN');
      WriteLine('      EXIT(TempInteger);');
      WriteLine('    END;');
      WriteLine('');
      WriteLine('    BEGIN');
      WriteLine('    END.');
      WriteLine('  }');
      WriteLine('}');
      WriteLine('');
    END;

    LOCAL PROCEDURE WriteSubstitute@5(ArrayDimension@1000000000 : Integer);
    BEGIN
      CASE TRUE OF
        CreateEMail:
          WriteLine('OBJECT Codeunit 14000901 E-Mail Substitute');
        CreateLabel:
          WriteLine('OBJECT Codeunit 14000843 Label Substitute');
      END;
      WriteLine('{');
      WriteLine('  OBJECT-PROPERTIES');
      WriteLine('  {');
      WriteLine('    Date=' + FORMAT(NewObjectDate,8,1) + ';');
      WriteLine('    Time=[' + FORMAT(NewObjectTime,0,1) + '];');
      WriteLine('    Modified=Yes;');
      WriteLine('    Version List=' + Object2."Version List" + ';');
      WriteLine('  }');
      WriteLine('  PROPERTIES');
      WriteLine('  {');
      WriteLine('    OnRun=BEGIN');
      WriteLine('          END;');
      WriteLine('');
      WriteLine('  }');
      WriteLine('  CODE');
      WriteLine('  {');
      WriteLine('    VAR');
      CASE TRUE OF
        CreateEMail:
          WriteLine('      TotalFieldTmp : TEMPORARY Record 14000906;');
      END;
      WriteLine('      Field : Record 2000000041;');
      CASE TRUE OF
        CreateEMail:
          WriteLine(STRSUBSTNO('      FieldValue : ARRAY [%1] OF Codeunit 14000904;',ArrayDimension));
        CreateLabel:
          WriteLine(STRSUBSTNO('      FieldValue : ARRAY [%1] OF Codeunit 14000844;',ArrayDimension));
      END;
      WriteLine('      PostedDoc : Boolean;');
      WriteLine('      Text001@1001 : TextConst ''ENU="' + Text006 + '"'';');
      WriteLine('');

      CASE TRUE OF
        CreateEMail:
          IF EMailMappingTable.FIND('-') THEN
            REPEAT
              WriteSubstitutionProcedure(EMailMappingTable."Table No.");
            UNTIL EMailMappingTable.NEXT = 0;
        CreateLabel:
          IF LabelMappingTable.FIND('-') THEN
            REPEAT
              WriteSubstitutionProcedure(LabelMappingTable."Table No.");
            UNTIL LabelMappingTable.NEXT = 0;
      END;
      CASE TRUE OF
        CreateEMail:
          BEGIN
            WriteLine(
              '    PROCEDURE SubstituteHeader@111121(NewHeader : Record 14000901) : Text[1000];');
            WriteLine('    BEGIN');
            WriteLine(
              '      EXIT(SubstituteElements(NewHeader."Subject Text",' +
              'NewHeader.Code,0,FALSE));');
            WriteLine('    END;');
            WriteLine('');
          END;
      END;
      CASE TRUE OF
        CreateEMail:
          BEGIN
            WriteLine('    PROCEDURE SubstituteLine@111122(NewLine : Record 14000902) : Text[1000];');
            WriteLine('    BEGIN');
            WriteLine('      EXIT(');
            WriteLine('        SubstituteElements(');
            WriteLine('          NewLine.Text,NewLine."E-Mail Code",NewLine."Line No.",');
            WriteLine('          NewLine."Skip If All Elements Blank"));');
            WriteLine('    END;');
            WriteLine('');
          END;
        CreateLabel:
          BEGIN
            WriteLine('    PROCEDURE SubstituteLine@111122(NewLine : Record 14000842) : Text[1000];');
            WriteLine('    VAR');
            WriteLine('      ExtendedDataLine@1240030001 : Record 14000962;');
            WriteLine('      TempText@1240030002 : Text[1000];');
            WriteLine('    BEGIN');
            WriteLine('      IF NewLine."Extended Data Code" <> '''' THEN BEGIN');
            WriteLine('        TempText := '''';');
            WriteLine('');
            WriteLine('        ExtendedDataLine.RESET;');
            WriteLine('        ExtendedDataLine.SETRANGE("Extended Data Code",NewLine."Extended Data Code");');
            WriteLine('        IF ExtendedDataLine.FIND(''-'') THEN');
            WriteLine('          REPEAT');
            WriteLine('            TempText :=');
            WriteLine('              TempText +');
            WriteLine('              SubstituteElements(');
            WriteLine('                ExtendedDataLine.Text,1,ExtendedDataLine."Extended Data Code",');
            WriteLine('                ExtendedDataLine."Line No.",FALSE);');
            WriteLine('          UNTIL ExtendedDataLine.NEXT = 0;');
            WriteLine('');
            WriteLine('        EXIT(TempText);');
            WriteLine('      END ELSE');
            WriteLine('        EXIT(');
            WriteLine('          SubstituteElements(');
            WriteLine('            NewLine.Text,0,NewLine."Label Code",NewLine."Line No.",');
            WriteLine('            NewLine."Skip If All Elements Blank"));');
            WriteLine('    END;');
            WriteLine('');
          END;
      END;
      CASE TRUE OF
        CreateEMail:
          BEGIN
            WriteLine(
              '    PROCEDURE SubstituteAttachment@111124(' +
              'NewAttachment : Record 14000909) : Text[1000];');
            WriteLine('    BEGIN');
            WriteLine('      EXIT(SubstituteElements(');
            WriteLine('        NewAttachment."Attachment Name",NewAttachment."E-Mail Code",');
            WriteLine('        -NewAttachment."Line No.",FALSE));');
            WriteLine('    END;');
            WriteLine('');
          END;
      END;
      CASE TRUE OF
        CreateEMail:
          BEGIN
            WriteLine(
              '    LOCAL PROCEDURE SubstituteElements@111123(OriginalText : Text[1000];' +
              'HeaderCode : Code[10];LineNo : Integer;SkipIfAllElementsBlank : Boolean) : Text[1000];');
          END;
        CreateLabel:
          BEGIN
            WriteLine(
              '    LOCAL PROCEDURE SubstituteElements@111123(OriginalText : Text[1000];' +
              'HeaderType@1240030009 : Integer;HeaderCode : Code[10];LineNo : Integer;' +
              'SkipIfAllElementsBlank : Boolean) : Text[1000];');
          END;
      END;
      WriteLine('    VAR');
      CASE TRUE OF
        CreateEMail:
          BEGIN
            WriteLine('      Element : Record 14000903;');
            WriteLine('      VirtualField : Codeunit 14000903;');
            WriteLine('      FormatValue : Codeunit 14000906;');
          END;
        CreateLabel:
          BEGIN
            WriteLine('      Element : Record 14000844;');
            WriteLine('      VirtualField : Codeunit 14000841;');
          END;
      END;
      WriteLine('      TextArray : ARRAY [10] OF Text[1000];');
      WriteLine('      DecimalValue : Decimal;');
      WriteLine('      IntegerValue : Integer;');
      WriteLine('    BEGIN');
      WriteLine('      CLEAR(TextArray);');
      WriteLine('      CLEAR(Element);');
      WriteLine('');
      WriteLine('      Element.RESET;');
      CASE TRUE OF
        CreateEMail:
          WriteLine('      Element.SETRANGE("E-Mail Code",HeaderCode);');
        CreateLabel:
          BEGIN
            WriteLine('      Element.SETRANGE(Type,HeaderType);');
            WriteLine('      Element.SETRANGE("Label Code",HeaderCode);');
          END;
      END;
      WriteLine('      Element.SETRANGE("Line No.",LineNo);');
      WriteLine('      Element.SETRANGE("Element No.",1,10);');
      WriteLine('      IF Element.FIND(''-'') THEN');
      WriteLine('        REPEAT');
      WriteLine('          // Find Value for Element');
      WriteLine(
        '          IF Element."Virtual Field" <> Element."Virtual Field"::" " THEN BEGIN');
      WriteLine(
        '            TextArray[Element."Element No."] := VirtualField.GetVirtualField(Element);');
      WriteLine('');
      WriteLine('            IF Element."Skip Line If Element Blank" THEN');
      WriteLine('              IF (TextArray[Element."Element No."] = '''') OR');
      WriteLine('                 ((Element."Field Type" IN');
      WriteLine('                   [Element."Field Type"::Boolean,Element."Field Type"::Integer,');
      WriteLine('                    Element."Field Type"::Decimal]) AND');
      WriteLine('                  (TextArray[Element."Element No."] = ''0'')) OR');
      WriteLine('                 ((Element."Field Type" = Element."Field Type"::Boolean) AND');
      WriteLine('                  (TextArray[Element."Element No."] = Text001))');
      WriteLine('              THEN');
      WriteLine('                EXIT('''');');
      WriteLine('');
      WriteLine('            IF Element."Skip Line If Element Not Blank" THEN');
      WriteLine('              CASE Element."Field Type" OF');
      WriteLine('                Element."Field Type"::Boolean:');
      WriteLine('                  IF (TextArray[Element."Element No."] <> ''0'') AND');
      WriteLine('                     (TextArray[Element."Element No."] <> Text001)');
      WriteLine('                  THEN');
      WriteLine('                    EXIT('''');');
      WriteLine('                Element."Field Type"::Integer,Element."Field Type"::Decimal:');
      WriteLine('                  IF TextArray[Element."Element No."] <> ''0'' THEN');
      WriteLine('                    EXIT('''');');
      WriteLine('                ELSE');
      WriteLine('                  IF TextArray[Element."Element No."] <> '''' THEN');
      WriteLine('                    EXIT('''');');
      WriteLine('              END;');
      WriteLine('          END ELSE BEGIN');
      WriteLine('            TextArray[Element."Element No."] :=');
      WriteLine('              FieldValue[Element."Record No." + 1].GetField(');
      WriteLine('                Element."Table ID",Element."Field ID",');
      WriteLine(
        '                Element."Format Length",Element."Format Number",' +
        'Element."Format String",PostedDoc);');
      WriteLine('');
      IF CreateEMail THEN BEGIN
        WriteLine('            // Handle Totals for Decimal and Integer fields');
        WriteLine('            IF (Element."Field Type" = Element."Field Type"::Decimal) OR');
        WriteLine('               (Element."Field Type" = Element."Field Type"::Integer)');
        WriteLine('            THEN BEGIN');
        WriteLine('              // Create Total for Element');
        WriteLine('              IF Element."Create Total" THEN BEGIN');
        WriteLine('                TotalFieldTmp.INIT;');
        WriteLine('                TotalFieldTmp."Table ID" := Element."Table ID";');
        WriteLine('                TotalFieldTmp."Field ID" := Element."Field ID";');
        WriteLine(
          '                IF Element."Field Type" = Element."Field Type"::Decimal THEN BEGIN');
        WriteLine('                  TotalFieldTmp."Decimal Field" := TRUE;');
        WriteLine('                  DecimalValue := FieldValue[Element."Record No." + 1].GetDecimal;');
        WriteLine('                  TotalFieldTmp."Decimal Value" := DecimalValue;');
        WriteLine('                END ELSE BEGIN');
        WriteLine('                  TotalFieldTmp."Decimal Field" := FALSE;');
        WriteLine('                  IntegerValue := FieldValue[Element."Record No." + 1].GetInteger;');
        WriteLine('                  TotalFieldTmp."Integer Value" := IntegerValue;');
        WriteLine('                END;');
        WriteLine('');
        WriteLine('                IF NOT TotalFieldTmp.INSERT THEN BEGIN');
        WriteLine('                  TotalFieldTmp.FIND;');
        WriteLine('                  IF TotalFieldTmp."Decimal Field" THEN');
        WriteLine('                    TotalFieldTmp."Decimal Value" :=');
        WriteLine('                      TotalFieldTmp."Decimal Value" + DecimalValue');
        WriteLine('                  ELSE');
        WriteLine('                    TotalFieldTmp."Integer Value" :=');
        WriteLine('                      TotalFieldTmp."Integer Value" + IntegerValue;');
        WriteLine('                  TotalFieldTmp.MODIFY;');
        WriteLine('                END;');
        WriteLine('              END;');
        WriteLine('');
        WriteLine('              // Clear the Total Field');
        WriteLine('              IF Element."Clear Total" THEN BEGIN');
        WriteLine('                TotalFieldTmp.INIT;');
        WriteLine('                TotalFieldTmp."Table ID" := Element."Table ID";');
        WriteLine('                TotalFieldTmp."Field ID" := Element."Field ID";');
        WriteLine('                IF NOT TotalFieldTmp.DELETE THEN ;');
        WriteLine('              END;');
        WriteLine('');
        WriteLine('              // Show the total field');
        WriteLine('              IF Element."Show Total" THEN BEGIN');
        WriteLine(
          '                IF NOT TotalFieldTmp.GET(Element."Table ID",' +
          'Element."Field ID") THEN BEGIN');
        WriteLine('                  TotalFieldTmp.INIT;');
        WriteLine(
          '                  IF Element."Field Type" = Element."Field Type"::Decimal THEN');
        WriteLine('                    TotalFieldTmp."Decimal Field" := TRUE;');
        WriteLine('                END;');
        WriteLine('');
        WriteLine('                IF TotalFieldTmp."Decimal Field" THEN');
        WriteLine('                  TextArray[Element."Element No."] :=');
        WriteLine('                    FormatValue.FormatDecimal(');
        WriteLine('                      TotalFieldTmp."Decimal Value",');
        WriteLine('                      Element."Format Length",Element."Format Number",');
        WriteLine('                      Element."Format String")');
        WriteLine('                ELSE');
        WriteLine('                  TextArray[Element."Element No."] :=');
        WriteLine('                    FormatValue.FormatInteger(');
        WriteLine('                      TotalFieldTmp."Integer Value",');
        WriteLine('                      Element."Format Length",Element."Format Number",');
        WriteLine('                      Element."Format String");');
        WriteLine('              END;');
        WriteLine('            END;');
        WriteLine('');
      END;
      WriteLine('            IF Element."Skip Line If Element Blank" THEN');
      WriteLine('              IF (TextArray[Element."Element No."] = '''') OR');
      WriteLine('                 ((Element."Field Type" IN');
      WriteLine('                   [Element."Field Type"::Boolean,Element."Field Type"::Integer,');
      WriteLine('                    Element."Field Type"::Decimal]) AND');
      WriteLine('                  (TextArray[Element."Element No."] = ''0'')) OR');
      WriteLine('                 ((Element."Field Type" = Element."Field Type"::Boolean) AND');
      WriteLine('                  (TextArray[Element."Element No."] = Text001))');
      WriteLine('              THEN');
      WriteLine('                EXIT('''');');
      WriteLine('            IF Element."Skip Line If Element Not Blank" THEN');
      WriteLine('              CASE Element."Field Type" OF');
      WriteLine('                Element."Field Type"::Boolean:');
      WriteLine('                  IF (TextArray[Element."Element No."] <> ''0'') AND');
      WriteLine('                     (TextArray[Element."Element No."] <> Text001)');
      WriteLine('                  THEN');
      WriteLine('                    EXIT('''');');
      WriteLine('                Element."Field Type"::Integer,Element."Field Type"::Decimal:');
      WriteLine('                  IF TextArray[Element."Element No."] <> ''0'' THEN');
      WriteLine('                    EXIT('''');');
      WriteLine('                ELSE');
      WriteLine('                  IF TextArray[Element."Element No."] <> '''' THEN');
      WriteLine('                    EXIT('''');');
      WriteLine('              END;');
      WriteLine('          END;');
      WriteLine('');
      WriteLine('          IF Element."Pre Substitution" THEN');
      WriteLine('            TextArray[Element."Element No."] :=');
      WriteLine('              STRSUBSTNO(');
      WriteLine('                TextArray[Element."Element No."],');
      WriteLine('                TextArray[1],TextArray[2],TextArray[3],TextArray[4],TextArray[5],');
      WriteLine('                TextArray[6],TextArray[7],TextArray[8],TextArray[9]);');
      WriteLine('');
      IF CreateLabel THEN BEGIN
        WriteLine('        if Element."Cut-out Position" > 0 then');
        WriteLine('          if Element."Cut-out Position" > strlen(TextArray[Element."Element No."]) then');
        WriteLine('            TextArray[Element."Element No."] := ''''');
        WriteLine('          else');
        WriteLine('            if Element."Cut-out Length" <> 0 then');
        WriteLine('              TextArray[Element."Element No."] :=');
        WriteLine('                copystr(');
        WriteLine('                  TextArray[Element."Element No."],Element."Cut-out Position",Element."Cut-out Length")');
        WriteLine('            else');
        WriteLine('              TextArray[Element."Element No."] :=');
        WriteLine('                copystr(TextArray[Element."Element No."],Element."Cut-out Position");');
      END;
      WriteLine('        UNTIL Element.NEXT = 0;');
      WriteLine('');
      WriteLine('      // Substitute Values');
      WriteLine('      IF (TextArray[1] = '''') AND (TextArray[2] = '''') AND (TextArray[3] = '''') AND');
      WriteLine('         (TextArray[4] = '''') AND (TextArray[5] = '''') AND (TextArray[6] = '''') AND');
      WriteLine('         (TextArray[7] = '''') AND (TextArray[8] = '''') AND (TextArray[9] = '''') AND');
      WriteLine('         (TextArray[10] = '''') AND SkipIfAllElementsBlank');
      WriteLine('      THEN');
      WriteLine('        EXIT('''')');
      WriteLine('      ELSE');
      WriteLine('        CASE TRUE OF');
      WriteLine('          Element."Element No." = 10:');
      WriteLine('            EXIT(');
      WriteLine('              STRSUBSTNO(');
      WriteLine('                OriginalText,');
      WriteLine('                TextArray[1],TextArray[2],TextArray[3],TextArray[4],TextArray[5],');
      WriteLine('                TextArray[6],TextArray[7],TextArray[8],TextArray[9],TextArray[10]));');
      WriteLine('          Element."Element No." = 9:');
      WriteLine('            EXIT(');
      WriteLine('              STRSUBSTNO(');
      WriteLine('                OriginalText,');
      WriteLine('                TextArray[1],TextArray[2],TextArray[3],TextArray[4],TextArray[5],');
      WriteLine('                TextArray[6],TextArray[7],TextArray[8],TextArray[9]));');
      WriteLine('          Element."Element No." = 8:');
      WriteLine('            EXIT(');
      WriteLine('              STRSUBSTNO(');
      WriteLine('                OriginalText,');
      WriteLine('                TextArray[1],TextArray[2],TextArray[3],TextArray[4],TextArray[5],');
      WriteLine('                TextArray[6],TextArray[7],TextArray[8]));');
      WriteLine('          Element."Element No." = 7:');
      WriteLine('            EXIT(');
      WriteLine('              STRSUBSTNO(');
      WriteLine('                OriginalText,');
      WriteLine('                TextArray[1],TextArray[2],TextArray[3],TextArray[4],TextArray[5],');
      WriteLine('                TextArray[6],TextArray[7]));');
      WriteLine('          Element."Element No." = 6:');
      WriteLine('            EXIT(');
      WriteLine('              STRSUBSTNO(');
      WriteLine('                OriginalText,');
      WriteLine('                TextArray[1],TextArray[2],TextArray[3],TextArray[4],TextArray[5],');
      WriteLine('                TextArray[6]));');
      WriteLine('          Element."Element No." = 5:');
      WriteLine('            EXIT(');
      WriteLine('              STRSUBSTNO(');
      WriteLine('                OriginalText,');
      WriteLine('                TextArray[1],TextArray[2],TextArray[3],TextArray[4],TextArray[5]));');
      WriteLine('          Element."Element No." = 4:');
      WriteLine('            EXIT(');
      WriteLine('              STRSUBSTNO(OriginalText,TextArray[1],TextArray[2],TextArray[3],TextArray[4]));');
      WriteLine('          Element."Element No." = 3:');
      WriteLine('            EXIT(STRSUBSTNO(OriginalText,TextArray[1],TextArray[2],TextArray[3]));');
      WriteLine('          Element."Element No." = 2:');
      WriteLine('            EXIT(STRSUBSTNO(OriginalText,TextArray[1],TextArray[2]));');
      WriteLine('          Element."Element No." = 1:');
      WriteLine('            EXIT(STRSUBSTNO(OriginalText,TextArray[1]));');
      WriteLine('          ELSE');
      WriteLine('            EXIT(OriginalText);');
      WriteLine('      END;');
      WriteLine('    END;');
      WriteLine('');
      WriteLine('    PROCEDURE GetMaxRecordNo@111125() : Integer;');
      WriteLine('    BEGIN');
      WriteLine(STRSUBSTNO('      EXIT(%1);',ArrayDimension - 1));
      WriteLine('    END;');
      WriteLine('');
      WriteLine('    PROCEDURE SetPosted@111126(Posted@111127 : Boolean);');
      WriteLine('    BEGIN');
      WriteLine('      PostedDoc := Posted');
      WriteLine('    END;');
      WriteLine('    BEGIN');
      WriteLine('    END.');
      WriteLine('  }');
      WriteLine('}');
    END;

    LOCAL PROCEDURE WriteLine@1(TextLine@1000000000 : Text[250]);
    VAR
      ObjectNo@1000000001 : Text[30];
      FieldNo@1000000002 : Text[30];
    BEGIN
      // %1 Object ID
      // %2 Field ID
      // %3 Field Name
      // %4 Set Function Name
      // %5 Object Name
      // %6 Legal Object Name used as Variable
      // %7 The Function Number for the Procedure
      //      (There exist a limit of the size of this number around 10.000.000)
      //      (The limit will not give a compile error, but the function will not be usable in other code)

      ObjectNo := DELCHR(FORMAT(Object.ID),'=',',.');
      FieldNo := DELCHR(FORMAT(Field."No."),'=',',.');
      ExportFile.WRITE(
        STRSUBSTNO(
          TextLine,ObjectNo,FieldNo,Field.FieldName,
          COPYSTR(LegalObjectName,1,29 - STRLEN(ObjectNo)) + '_' + ObjectNo,
          Object.Name,LegalObjectName,DELCHR(FORMAT(Object.ID MOD 10200000),'=',',.')));
    END;

    LOCAL PROCEDURE GetTypePart@2() : Text[250];
    BEGIN
      CASE Field.Type OF
        Field.Type::Date:
          EXIT('TempDate := Tab%1."%3"');
        Field.Type::Time:
          EXIT('TempTime := Tab%1."%3"');
        Field.Type::Text:
          EXIT('TempText := Tab%1."%3"');
        Field.Type::Code:
          EXIT('TempCode := Tab%1."%3"');
        Field.Type::Decimal:
          EXIT('TempDecimal := Tab%1."%3"');
        Field.Type::Integer:
          EXIT('TempInteger := Tab%1."%3"');
        Field.Type::Option:
          EXIT('TempInteger := Tab%1."%3"');
        Field.Type::DateFormula:
          EXIT('TempDateFormula := Tab%1."%3"');
        Field.Type::Boolean:
          EXIT('TempBoolean := Tab%1."%3"');
      END;
    END;

    LOCAL PROCEDURE CreateLegalObjectName@3();
    BEGIN
      LegalObjectName := DELCHR(Object.Name,'=',' ,.;:''"!@#$%^&*()+[]{}\|/?<>`~-=');
      IF STRPOS('ABCDEFGHIJKLMONPQRSTUVWXYZ',UPPERCASE(COPYSTR(LegalObjectName,1,1))) = 0 THEN
        LegalObjectName := COPYSTR('Z' + LegalObjectName,1,30);
    END;

    LOCAL PROCEDURE WriteSubstitutionProcedure@9(ObjectNo@1000000000 : Integer);
    BEGIN
      Object.GET(Object.Type::Table,'',ObjectNo);

      CreateLegalObjectName;

      WriteLine('    PROCEDURE %4@%7(%6 : Record %1;RecordNo : Integer);');
      WriteLine('    BEGIN');
      WriteLine('      // %5');
      WriteLine('      FieldValue[RecordNo + 1].%4(%6);');
      WriteLine('    END;');
      WriteLine('');
    END;

    LOCAL PROCEDURE WriteFieldValueVariables@7(ObjectNo@1000000000 : Integer);
    BEGIN
      Object.GET(Object.Type::Table,'',ObjectNo);

      CreateLegalObjectName;

      WriteLine('      Tab%1 : Record %1;');
      WriteLine('      Tab%1Loaded : Boolean;');
    END;

    LOCAL PROCEDURE WriteFieldValueProcedure@6(ObjectNo@1000000000 : Integer);
    BEGIN
      Object.GET(Object.Type::Table,'',ObjectNo);

      CreateLegalObjectName;

      WriteLine('    PROCEDURE %4@%7(%6 : Record %1);');
      WriteLine('    BEGIN');
      WriteLine('      // %5');
      WriteLine('      Tab%1 := %6;');
      WriteLine('      Tab%1Loaded := TRUE;');
      WriteLine('    END;');
      WriteLine('');
    END;

    LOCAL PROCEDURE WriteFieldValueCase@8(ObjectNo@1000000000 : Integer);
    BEGIN
      Object.GET(Object.Type::Table,'',ObjectNo);

      CreateLegalObjectName;

      WriteLine('        %1: // %5');
      WriteLine('          BEGIN');
      WriteLine('            IF NOT Tab%1Loaded THEN');
      WriteLine(
        '              ERROR(Text002 + format(%1) + '' '' + Tab%1.TABLECAPTION' + ' + Text003);');
      WriteLine('            TableRef.OPEN(%1);');
      WriteLine('            IF TableRef.FIND(''-'') THEN');
      WriteLine('              TableRef.GETTABLE(Tab%1);');
      WriteLine('          END;');
    END;

    BEGIN
    END.
  }
}

