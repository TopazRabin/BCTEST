OBJECT Codeunit 14123656 ES SQL Profiler Management
{
  OBJECT-PROPERTIES
  {
    Date=09/16/16;
    Time=12:00:00 PM;
    Version List=ES1.41.12;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text003@1003 : TextConst 'ENU=Importing SQL Profiler Events\@1@@@@@@@@@@@@@@@@@@';
      Text004@1004 : TextConst 'ENU=Updating Recording Permissions.';
      Text005@1005 : TextConst 'ENU="%1 Events imported. "';
      Text006@1006 : TextConst 'ENU=%1 records inserted and %2 modified.';
      Text008@1008 : TextConst 'ENU=Stop import of SQL Profiler Trace?';
      Text009@1240520002 : TextConst 'ENU=%1 already contains permission, continue adding permissions?';
      Text010@1240520001 : TextConst 'ENU=Nothing changed.';
      Text101@1000 : TextConst 'ENU=Uploading file.';

    PROCEDURE ImportTrace@1240520000(ESRecording@1240520029 : Record 14123651;AskToAppendToRecording@1240520028 : Boolean;SelectTraceClient@1240520018 : Boolean;ShowStatus@1240520012 : Boolean) : Integer;
    VAR
      ESSecuritySetup@1240520008 : Record 14123521;
      ESRecordingPerm@1240520027 : Record 14123652;
      ESTraceEvent@1240520001 : Record 14123657;
      ESTraceClient@1240520016 : Record 14123659;
      ESTraceClientTmp@1240520017 : TEMPORARY Record 14123659;
      ESSQLObjectName@1240520025 : Record 14123658;
      ESSQLObjectNameTmp@1240520026 : TEMPORARY Record 14123658;
      ESLoginSetup@1240520009 : Record 14123540;
      FileMgt@1000 : Codeunit 419;
      Window@1240520007 : Dialog;
      Window2@1002 : Dialog;
      TraceFile@1240520000 : File;
      ReadChar@1240520002 : Char;
      ReadChar2@1240520024 : Char;
      LastChar@1240520014 : Char;
      TempText@1240520003 : Text[1024];
      ImportText@1240520004 : ARRAY [20] OF Text[1024];
      ImportTempText@1240520019 : Text[1024];
      ServerFileName@1001 : Text[250];
      LinePos@1240520005 : Integer;
      Pos@1240520006 : Integer;
      Section@1240520015 : Integer;
      InsertedEvents@1240520010 : Integer;
      InsertedRecords@1240520022 : Integer;
      ModifiedRecords@1240520021 : Integer;
      EntriesAccepted@1240520020 : Boolean;
      StartCheckUNICode@1240520013 : Boolean;
      UniCodeDetected@1240520023 : Boolean;
    BEGIN
      ESRecording.TESTFIELD(Code);
      ESRecording.TESTFIELD("SQL Profiler Trace File Name");

      ESSecuritySetup.GET;

      IF NOT ESLoginSetup.GET(USERID) THEN
        ESLoginSetup.INIT;

      ESRecordingPerm.RESET;
      ESRecordingPerm.SETRANGE("Recording Code",ESRecording.Code);
      IF ESRecordingPerm.FIND('-') AND AskToAppendToRecording THEN
        IF NOT CONFIRM(Text009,FALSE,ESRecording.Code) THEN
          ERROR(Text010);

      IF GUIALLOWED THEN
        Window.OPEN(Text003);

      TraceFile.WRITEMODE(FALSE);
      TraceFile.TEXTMODE(FALSE);
      IF NOT TraceFile.OPEN(ESRecording."SQL Profiler Trace File Name") THEN BEGIN
        IF GUIALLOWED THEN
          Window2.OPEN(Text101);
        ServerFileName := FileMgt.UploadFileSilent(ESRecording."SQL Profiler Trace File Name");
        IF GUIALLOWED THEN
          Window2.CLOSE;

        IF NOT TraceFile.OPEN(ServerFileName) THEN
          TraceFile.OPEN(ESRecording."SQL Profiler Trace File Name");
      END;

      DeleteTraceEvent(ESRecording.Code);

      IF ESSQLObjectName.FIND('-') THEN
        REPEAT
          ESSQLObjectNameTmp := ESSQLObjectName;
          ESSQLObjectNameTmp.INSERT;
        UNTIL ESSQLObjectName.NEXT = 0;
      ESSQLObjectNameTmp.RESET;
      ESSQLObjectNameTmp.SETCURRENTKEY("SQL Object Name");

      StartCheckUNICode := TRUE;
      WHILE TraceFile.POS < TraceFile.LEN DO BEGIN
        TraceFile.READ(ReadChar);

        IF StartCheckUNICode THEN BEGIN
          IF ReadChar = 255 THEN BEGIN
            TraceFile.READ(ReadChar);
            IF ReadChar = 254 THEN BEGIN
              UniCodeDetected := TRUE;
              TraceFile.READ(ReadChar);
            END ELSE BEGIN
              TraceFile.SEEK(TraceFile.POS - 1);
              ReadChar := 255;
            END;
          END;

          StartCheckUNICode := FALSE;
        END;

        IF UniCodeDetected THEN BEGIN
          TraceFile.READ(ReadChar2);

          CASE ReadChar2 OF
            0:
              ;
            ELSE
              ReadChar := 32;
          END;
        END;

        CASE TRUE OF
          ReadChar IN [0,10]:
            ;
          (ReadChar = 13) AND (LastChar = '>'):
            BEGIN
              IF (LinePos > 0) AND ((LinePos - 1) DIV 1000 + 1 <= ARRAYLEN(ImportText))
              THEN BEGIN
                ImportText[(LinePos - 1) DIV 1000 + 1] := ImportTempText;
                ImportTempText := '';
              END;

              IF ImportText[1] <> '' THEN BEGIN
                IF COPYSTR(ImportText[1],1,15) = '    <Event id="' THEN BEGIN
                  IF GUIALLOWED THEN
                    Window.UPDATE(1,ROUND(10000 * (TraceFile.POS / TraceFile.LEN),1));

                  ESTraceEvent.INIT;
                  ESTraceEvent."Recording Code" := ESRecording.Code;
                  ESTraceEvent."Entry No." := ESTraceEvent."Entry No." + 1;
                  TempText := COPYSTR(ImportText[1],16);
                  Pos := STRPOS(TempText,'"');
                  IF Pos > 1 THEN BEGIN
                    IF EVALUATE(ESTraceEvent.ID,COPYSTR(TempText,1,Pos - 1)) THEN BEGIN
                      TempText := DELCHR(COPYSTR(TempText,Pos + 1),'<',' ');
                      IF COPYSTR(TempText,1,6) = 'name="' THEN BEGIN
                        TempText := COPYSTR(TempText,7);
                        Pos := STRPOS(TempText,'"');
                        IF Pos > 1 THEN
                          ESTraceEvent.Name :=
                            COPYSTR(COPYSTR(TempText,1,Pos - 1),1,MAXSTRLEN(ESTraceEvent.Name));
                      END;
                    END;
                  END;
                END;

                IF ESTraceEvent.ID <> 0 THEN BEGIN
                  IF COPYSTR(ImportText[1],1,37) = '      <Column id="1" name="TextData">' THEN BEGIN
                    TempText := COPYSTR(ImportText[1],38);
                    CleanEndColumn(TempText);
                    ESTraceEvent.TextData := COPYSTR(TempText,1,MAXSTRLEN(ESTraceEvent.TextData));
                    ESTraceEvent."TextData Length" := LinePos;
                    ESTraceEvent."TextData Start" := COPYSTR(TempText,1,250);
                    IF LinePos > 1000 * (ARRAYLEN(ImportText) - 1) THEN
                      LinePos := 1000 * (ARRAYLEN(ImportText) - 1);

                    FOR Section := 1 TO LinePos DIV 100 DO BEGIN
                      Section := Section;
                      TempText :=
                        COPYSTR(
                          ImportText[(Section - 1) DIV 10 + 1] +
                          COPYSTR(ImportText[(Section - 1) DIV 10 + 2],1,250),
                          (100 * (Section - 1))  MOD 1000 + 1,400);

                      Pos := STRPOS(COPYSTR(TempText,1,120),' FROM ');
                      IF STRPOS(COPYSTR(TempText,1,120),' FROM ') > 0 THEN BEGIN
                        ESTraceEvent."TextData From Statement" :=
                          COPYSTR(TempText,Pos + 6,MAXSTRLEN(ESTraceEvent."TextData From Statement"));
                        Section := LinePos DIV 100;
                      END;
                    END;
                  END;

                  UpdateTraceValues(ESTraceEvent,ImportText[1]);

                  IF ImportText[1] = '    </Event>' THEN BEGIN
                    ESTraceEvent.UpdateDetails(ESSQLObjectNameTmp);
                    ESTraceEvent.INSERT;

                    IF ESTraceEvent.ApplicationName <> '' THEN
                      IF NOT ESTraceClientTmp.GET(
                               ESRecording.Code,ESTraceEvent.SPID,ESTraceEvent."Company Name")
                      THEN BEGIN
                        ESTraceClientTmp.INIT;
                        ESTraceClientTmp."Recording Code" := ESRecording.Code;
                        ESTraceClientTmp.SPID := ESTraceEvent.SPID;
                        ESTraceClientTmp."Company Name" := ESTraceEvent."Company Name";
                        ESTraceClientTmp.LoginName := ESTraceEvent.LoginName;
                        ESTraceClientTmp.ApplicationName := ESTraceEvent.ApplicationName;
                        ESTraceClientTmp.ClientProcessID := ESTraceEvent.ClientProcessID;
                        ESTraceClientTmp.HostName := ESTraceEvent.HostName;
                        ESTraceClientTmp.DatabaseName := ESTraceEvent.DatabaseName;
                        ESTraceClientTmp.INSERT;
                      END;

                    InsertedEvents := InsertedEvents + 1;
                  END;
                END;
              END;

              CLEAR(ImportText);
              CLEAR(ImportTempText);
              LinePos := 0;
            END;
          ELSE BEGIN
            IF ReadChar = 13 THEN
              ReadChar := 32;
            LastChar := ReadChar;

            LinePos := LinePos + 1;
            IF (LinePos MOD 1000 = 1) AND (LinePos > 1) AND
               ((LinePos - 1) DIV 1000 <= ARRAYLEN(ImportText))
            THEN BEGIN
              ImportText[(LinePos - 1) DIV 1000] := ImportTempText;
              ImportTempText := '';
            END;

            IF LinePos <= 1000 * ARRAYLEN(ImportText) THEN
              ImportTempText[(LinePos - 1) MOD 1000 + 1] := ReadChar;
          END;
        END;
      END;

      TraceFile.CLOSE;
      IF ServerFileName <> '' THEN
        ERASE(ServerFileName);

      ESSQLObjectNameTmp.RESET;
      IF ESSQLObjectNameTmp.FIND('-') THEN
        REPEAT
          IF NOT ESSQLObjectName.GET(ESSQLObjectNameTmp."SQL Object Name") THEN BEGIN
            ESSQLObjectName := ESSQLObjectNameTmp;
            ESSQLObjectName.INSERT;
          END;
        UNTIL ESSQLObjectNameTmp.NEXT = 0;

      IF ESTraceClientTmp.FIND('-') THEN
        REPEAT
          ESTraceClient := ESTraceClientTmp;
          ESTraceClient."Include in Rec. Permissions" := TRUE;
          ESTraceClient.INSERT;
        UNTIL ESTraceClientTmp.NEXT = 0;

      IF SelectTraceClient AND NOT ESLoginSetup."No SQL Details on Import Rec." THEN BEGIN
        COMMIT;

        IF GUIALLOWED THEN
          Window.CLOSE;

        ESTraceClient.RESET;
        ESTraceClient.SETCURRENTKEY("Recording Code",DatabaseName,SPID);
        ESTraceClient.SETRANGE("Recording Code",ESRecording.Code);
        REPEAT
          EntriesAccepted := PAGE.RUNMODAL(0,ESTraceClient) = ACTION::LookupOK;

          IF NOT EntriesAccepted THEN
            IF CONFIRM(Text008,FALSE) THEN BEGIN
              IF NOT ESSecuritySetup."Keep Imported SQL Trace Data" THEN
                DeleteTraceEvent(ESRecording.Code);

              EXIT;
            END;
        UNTIL EntriesAccepted;

        IF GUIALLOWED THEN
          Window.OPEN(Text004);
      END;

      ESTraceClient.RESET;
      ESTraceClient.SETRANGE("Recording Code",ESRecording.Code);
      ESTraceClient.SETRANGE("Include in Rec. Permissions",TRUE);
      UpdateRecPermFromSQLTrace(
        ESTraceClient,ESRecording.Code,InsertedRecords,ModifiedRecords,
        NOT ESSecuritySetup."Remove Specific Table Perm.",FALSE);

      IF NOT ESSecuritySetup."Keep Imported SQL Trace Data" THEN
        DeleteTraceEvent(ESRecording.Code);

      IF GUIALLOWED THEN
        Window.CLOSE;

      IF ShowStatus THEN
        MESSAGE(
          STRSUBSTNO(Text005,InsertedEvents) +
          STRSUBSTNO(Text006,InsertedRecords,ModifiedRecords));

      EXIT(InsertedEvents);
    END;

    LOCAL PROCEDURE UpdateTraceValues@1240520004(VAR ESTraceEvent@1240520002 : Record 14123657;ImportText@1240520001 : Text[1024]);
    BEGIN
      IF STRLEN(ImportText) < 20 THEN
        EXIT;

      CASE COPYSTR(ImportText,19,2) OF
        '6"':
          IF COPYSTR(ImportText,1,39) = '      <Column id="6" name="NTUserName">' THEN BEGIN
            ImportText := COPYSTR(ImportText,40);
            CleanEndColumn(ImportText);
            ESTraceEvent.NTUserName := COPYSTR(ImportText,1,MAXSTRLEN(ESTraceEvent.NTUserName));
          END;
        '8"':
          IF COPYSTR(ImportText,1,37) = '      <Column id="8" name="HostName">'
          THEN BEGIN
            ImportText := COPYSTR(ImportText,38);
            CleanEndColumn(ImportText);
            ESTraceEvent.HostName := COPYSTR(ImportText,1,MAXSTRLEN(ESTraceEvent.HostName));
          END;
        '9"':
          IF COPYSTR(ImportText,1,44) = '      <Column id="9" name="ClientProcessID">' THEN BEGIN
            ImportText := COPYSTR(ImportText,45);
            CleanEndColumn(ImportText);
            IF EVALUATE(ESTraceEvent.ClientProcessID,ImportText) THEN
              ;
          END;
        '10':
          IF COPYSTR(ImportText,1,45) = '      <Column id="10" name="ApplicationName">'
          THEN BEGIN
            ImportText := COPYSTR(ImportText,46);
            CleanEndColumn(ImportText);
            ESTraceEvent.ApplicationName :=
              COPYSTR(ImportText,1,MAXSTRLEN(ESTraceEvent.ApplicationName));
          END;
        '11':
          IF COPYSTR(ImportText,1,39) = '      <Column id="11" name="LoginName">' THEN BEGIN
            ImportText := COPYSTR(ImportText,40);
            CleanEndColumn(ImportText);
            ESTraceEvent.LoginName := COPYSTR(ImportText,1,MAXSTRLEN(ESTraceEvent.LoginName));
          END;
        '12':
          IF COPYSTR(ImportText,1,34) = '      <Column id="12" name="SPID">' THEN BEGIN
            ImportText := COPYSTR(ImportText,35);
            CleanEndColumn(ImportText);
            IF EVALUATE(ESTraceEvent.SPID,ImportText) THEN
              ;
          END;
        '13':
          IF COPYSTR(ImportText,1,38) = '      <Column id="13" name="Duration">' THEN BEGIN
            ImportText := COPYSTR(ImportText,39);
            CleanEndColumn(ImportText);
            IF EVALUATE(ESTraceEvent.Duration,ImportText) THEN
              ;
          END;
        '16':
          IF COPYSTR(ImportText,1,35) = '      <Column id="16" name="Reads">' THEN BEGIN
            ImportText := COPYSTR(ImportText,36);
            CleanEndColumn(ImportText);
            IF EVALUATE(ESTraceEvent.Reads,ImportText) THEN
              ;
          END;
        '17':
          IF COPYSTR(ImportText,1,36) = '      <Column id="17" name="Writes">' THEN BEGIN
            ImportText := COPYSTR(ImportText,37);
            CleanEndColumn(ImportText);
            IF EVALUATE(ESTraceEvent.Writes,ImportText) THEN
              ;
          END;
        '35':
          IF COPYSTR(ImportText,1,42) = '      <Column id="35" name="DatabaseName">'
          THEN BEGIN
            ImportText := COPYSTR(ImportText,43);
            CleanEndColumn(ImportText);
            ESTraceEvent.DatabaseName :=
              COPYSTR(ImportText,1,MAXSTRLEN(ESTraceEvent.DatabaseName));
          END;
        '48':
          IF COPYSTR(ImportText,1,39) = '      <Column id="48" name="RowCounts">' THEN BEGIN
            ImportText := COPYSTR(ImportText,40);
            CleanEndColumn(ImportText);
            IF EVALUATE(ESTraceEvent.RowCounts,ImportText) THEN
              ;
          END;
      END;
    END;

    PROCEDURE UpdateRecPermFromSQLTrace@1240520003(VAR ESTraceClient@1240520008 : Record 14123659;RecordingCode@1240520000 : Code[30];VAR InsertedRecords@1240520007 : Integer;VAR ModifiedRecords@1240520006 : Integer;CountTables@1240520009 : Boolean;ShowStatus@1240520001 : Boolean) : Integer;
    VAR
      ESTraceEvent@1240520004 : Record 14123657;
      ESRecordingPermTmp@1240520003 : TEMPORARY Record 14123652;
      NewRecord@1240520005 : Boolean;
    BEGIN
      ESTraceEvent.RESET;
      ESTraceEvent.SETRANGE("Recording Code",RecordingCode);
      ESTraceEvent.SETFILTER("Object ID",'<>0');
      IF ESTraceEvent.FIND('-') THEN
        REPEAT
          ESTraceClient.SETRANGE("Recording Code",ESTraceEvent."Recording Code");
          ESTraceClient.SETRANGE(SPID,ESTraceEvent.SPID);
          ESTraceClient.SETRANGE("Company Name",ESTraceEvent."Company Name");
          IF ESTraceClient.FIND('-') THEN BEGIN
            IF NOT ESRecordingPermTmp.GET(
                     RecordingCode,ESTraceEvent."Object Type",ESTraceEvent."Object ID")
            THEN BEGIN
              NewRecord := TRUE;

              ESRecordingPermTmp.INIT;
              ESRecordingPermTmp."Recording Code" := RecordingCode;
              ESRecordingPermTmp."Object Type" := ESTraceEvent."Object Type";
              ESRecordingPermTmp."Object ID" := ESTraceEvent."Object ID";
              ESRecordingPermTmp.Origin := ESRecordingPermTmp.Origin::Recorded;
            END ELSE
              NewRecord := FALSE;

            ESRecordingPermTmp."Read Required" :=
              ESRecordingPermTmp."Read Required" OR ESTraceEvent."Read Required";
            ESRecordingPermTmp."Insert Required" :=
              ESRecordingPermTmp."Insert Required" OR ESTraceEvent."Insert Required";
            ESRecordingPermTmp."Modify Required" :=
              ESRecordingPermTmp."Modify Required" OR ESTraceEvent."Modify Required";
            ESRecordingPermTmp."Delete Required" :=
              ESRecordingPermTmp."Delete Required" OR ESTraceEvent."Delete Required";
            ESRecordingPermTmp."Execute Required" :=
              ESRecordingPermTmp."Execute Required" OR ESTraceEvent."Execute Required";
            ESRecordingPermTmp."Calculate Flowfield Required" :=
              ESRecordingPermTmp."Calculate Flowfield Required" OR
              ESTraceEvent."Calculate Flowfield Required";
            IF NewRecord THEN
              ESRecordingPermTmp.INSERT
            ELSE
              ESRecordingPermTmp.MODIFY;
          END;
        UNTIL ESTraceEvent.NEXT = 0;

      MergeRecPerm(
        RecordingCode,ESRecordingPermTmp,InsertedRecords,ModifiedRecords,
        CountTables,ShowStatus);

      EXIT(InsertedRecords);
    END;

    PROCEDURE MergeRecPerm@1000000000(RecordingCode@1000000001 : Code[30];VAR ESRecordingPermTmp@1000000000 : TEMPORARY Record 14123652;VAR InsertedRecords@1240520007 : Integer;VAR ModifiedRecords@1240520006 : Integer;CountTables@1240520009 : Boolean;ShowStatus@1240520001 : Boolean) : Integer;
    VAR
      ESRecordingPerm@1240520002 : Record 14123652;
    BEGIN
      IF ESRecordingPermTmp.FIND('-') THEN
        REPEAT
          IF ESRecordingPerm.GET(
               ESRecordingPermTmp."Recording Code",ESRecordingPermTmp."Object Type",
               ESRecordingPermTmp."Object ID")
          THEN BEGIN
            ESRecordingPerm."Read Required" :=
              ESRecordingPerm."Read Required" OR ESRecordingPermTmp."Read Required";
            ESRecordingPerm."Insert Required" :=
              ESRecordingPerm."Insert Required" OR ESRecordingPermTmp."Insert Required";
            ESRecordingPerm."Modify Required" :=
              ESRecordingPerm."Modify Required" OR ESRecordingPermTmp."Modify Required";
            ESRecordingPerm."Delete Required" :=
              ESRecordingPerm."Delete Required" OR ESRecordingPermTmp."Delete Required";
            ESRecordingPerm."Execute Required" :=
              ESRecordingPerm."Execute Required" OR ESRecordingPermTmp."Execute Required";
            ESRecordingPerm."Calculate Flowfield Required" :=
              ESRecordingPerm."Calculate Flowfield Required" OR
              ESRecordingPermTmp."Calculate Flowfield Required";
            ESRecordingPerm.MODIFY;

            IF (ESRecordingPerm."Object Type" <> ESRecordingPerm."Object Type"::Table) OR
               CountTables
            THEN
              ModifiedRecords := ModifiedRecords + 1;
          END ELSE BEGIN
            ESRecordingPerm := ESRecordingPermTmp;
            ESRecordingPerm.INSERT;

            IF (ESRecordingPerm."Object Type" <> ESRecordingPerm."Object Type"::Table) OR
               CountTables
            THEN
              InsertedRecords := InsertedRecords + 1;
          END;
        UNTIL ESRecordingPermTmp.NEXT = 0;

      IF ShowStatus THEN
        MESSAGE(Text006,InsertedRecords,ModifiedRecords);

      EXIT(InsertedRecords);
    END;

    LOCAL PROCEDURE CleanEndColumn@1240520001(VAR TempText@1240520000 : Text[1024]);
    BEGIN
      IF STRLEN(TempText) > 8 THEN
        IF COPYSTR(TempText,STRLEN(TempText) - 8) = '</Column>' THEN
          TempText := COPYSTR(TempText,1,STRLEN(TempText) - 9);
    END;

    PROCEDURE DeleteTraceEvent@1240520002(RecordingCode@1240520002 : Code[30]);
    VAR
      ESTraceEvent@1240520001 : Record 14123657;
      ESTraceClient@1240520000 : Record 14123659;
    BEGIN
      ESTraceEvent.RESET;
      ESTraceEvent.SETRANGE("Recording Code",RecordingCode);
      ESTraceEvent.DELETEALL;

      ESTraceClient.RESET;
      ESTraceClient.SETRANGE("Recording Code",RecordingCode);
      ESTraceClient.DELETEALL;
    END;

    BEGIN
    END.
  }
}

