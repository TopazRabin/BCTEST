OBJECT Codeunit 14002864 OWR Single Instance
{
  OBJECT-PROPERTIES
  {
    Date=08/21/18;
    Time=12:00:00 PM;
    Version List=RF1.50.13;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      OWRFilterTmp@1240020000 : TEMPORARY Record 14002863;
      MultiStatEntryGlobalTmp@1240020006 : TEMPORARY Record 14002804;
      MultiStatEntryPrepTmp@1240020007 : TEMPORARY Record 14002804;
      BinCreationWkshLineTmp@1240020008 : TEMPORARY Record 7338;
      RFDuringPosting@1240020001 : Boolean;
      PerZone@1240020002 : Boolean;
      MultiOrder@1240020005 : Boolean;
      TestOverride@1240020009 : Boolean;
      PickFromZoneFilter@1240020003 : Code[250];
      PickFromBinFilter@1240020004 : Code[250];

    [External]
    PROCEDURE SetRFDuringPosting@1240020001();
    BEGIN
      RFDuringPosting := TRUE;
    END;

    [External]
    PROCEDURE GetRFDuringPosting@1240020002() : Boolean;
    BEGIN
      EXIT(RFDuringPosting);
    END;

    [External]
    PROCEDURE ResetRFDuringPosting@1240020003();
    BEGIN
      RFDuringPosting := FALSE;
    END;

    [External]
    PROCEDURE SetOWRFilter@1240020004(NewOWRFilter@1240020000 : Record 14002863);
    BEGIN
      OWRFilterTmp.RESET;
      OWRFilterTmp.DELETEALL;

      OWRFilterTmp.INIT;
      OWRFilterTmp := NewOWRFilter;
      OWRFilterTmp.INSERT;
    END;

    [External]
    PROCEDURE GetOWRFilter@1240020005(VAR OWRFilter@1240020000 : Record 14002863);
    BEGIN
      OWRFilter.RESET;
      OWRFilter := OWRFilterTmp;
    END;

    [External]
    PROCEDURE SetPickFromFilter@1240020006(NewPickFromZoneFilter@1240020000 : Code[250];NewPickFromBinFilter@1240020001 : Code[250]);
    BEGIN
      CLEAR(PickFromZoneFilter);
      CLEAR(PickFromBinFilter);
      PickFromZoneFilter := NewPickFromZoneFilter;
      PickFromBinFilter := NewPickFromBinFilter;
    END;

    [External]
    PROCEDURE GetPickFromFilter@1240020007(VAR GetPickFromZoneFilter@1240020000 : Code[250];VAR GetPickFromBinFilter@1240020001 : Code[250]);
    BEGIN
      GetPickFromZoneFilter := PickFromZoneFilter;
      GetPickFromBinFilter := PickFromBinFilter;
    END;

    [External]
    PROCEDURE SetPerZone@1240020008();
    BEGIN
      PerZone := TRUE;
    END;

    [External]
    PROCEDURE GetPerZone@1240020009() : Boolean;
    BEGIN
      EXIT(PerZone);
    END;

    [External]
    PROCEDURE ResetOWRProcessing@1240020024();
    BEGIN
      OWRFilterTmp.RESET;
      OWRFilterTmp.DELETEALL;

      CLEAR(PickFromZoneFilter);
      CLEAR(PickFromBinFilter);
      CLEAR(PerZone);

      ResetMultiOrder;
    END;

    [External]
    PROCEDURE SetBinCreationWkshLine@1240020015(VAR BinCreationWkshLine@1240020000 : Record 7338);
    VAR
      BinCreationWkshLine2@1240020001 : Record 7338;
    BEGIN
      BinCreationWkshLineTmp.RESET;
      BinCreationWkshLineTmp.DELETEALL;

      BinCreationWkshLine2.RESET;
      BinCreationWkshLine2.SETRANGE("Worksheet Template Name",BinCreationWkshLine."Worksheet Template Name");
      BinCreationWkshLine2.SETRANGE(Name,BinCreationWkshLine.Name);
      BinCreationWkshLine2.SETRANGE("Location Code",BinCreationWkshLine."Location Code");
      IF BinCreationWkshLine2.FINDSET(FALSE) THEN BEGIN
        REPEAT
          IF BinCreationWkshLine2."Wave Pick Bin" THEN BEGIN
            BinCreationWkshLineTmp.INIT;
            BinCreationWkshLineTmp := BinCreationWkshLine2;
            BinCreationWkshLineTmp.INSERT;
          END;
        UNTIL BinCreationWkshLine2.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE ApplyBinCreationWkshLineWaveBin@1240020016();
    VAR
      Bin@1240020000 : Record 7354;
    BEGIN
      BinCreationWkshLineTmp.RESET;
      BinCreationWkshLineTmp.SETRANGE("Wave Pick Bin",TRUE);
      IF BinCreationWkshLineTmp.FIND('-') THEN
        REPEAT
          IF Bin.GET(BinCreationWkshLineTmp."Location Code",BinCreationWkshLineTmp."Bin Code") THEN BEGIN
            Bin."Wave Pick Bin" := BinCreationWkshLineTmp."Wave Pick Bin";
            Bin.MODIFY;
          END;
        UNTIL BinCreationWkshLineTmp.NEXT = 0;
    END;

    [External]
    PROCEDURE ResetBinCreationWkshLine@1240020017();
    BEGIN
      BinCreationWkshLineTmp.RESET;
      BinCreationWkshLineTmp.DELETEALL;
    END;

    [External]
    PROCEDURE SetMultiOrder@1240020000();
    BEGIN
      MultiOrder := TRUE;
    END;

    [External]
    PROCEDURE GetMultiOrder@1240020010() : Boolean;
    BEGIN
      EXIT(MultiOrder);
    END;

    [External]
    PROCEDURE ResetMultiOrder@1240020011();
    BEGIN
      MultiOrder := FALSE;

      MultiStatEntryPrepTmp.RESET;
      MultiStatEntryPrepTmp.DELETEALL;

      MultiStatEntryGlobalTmp.RESET;
      MultiStatEntryGlobalTmp.DELETEALL;
    END;

    [External]
    PROCEDURE PrepMultiOrderQtyApplied@1240020014(RFStatEntryTmp@1240020000 : TEMPORARY Record 14002804);
    BEGIN
      IF NOT GetMultiOrder THEN
        EXIT;

      MultiStatEntryPrepTmp.RESET;
      MultiStatEntryPrepTmp.SETCURRENTKEY("Item No.","Variant Code","Unit of Measure Code");
      MultiStatEntryPrepTmp.SETRANGE("Item No.",RFStatEntryTmp."Item No.");
      MultiStatEntryPrepTmp.SETRANGE("Variant Code",RFStatEntryTmp."Variant Code");
      MultiStatEntryPrepTmp.SETRANGE("Unit of Measure Code",RFStatEntryTmp."Unit of Measure Code");
      IF NOT MultiStatEntryPrepTmp.FIND('-') THEN BEGIN
        MultiStatEntryPrepTmp."Entry No." := RFStatEntryTmp."Entry No.";
        MultiStatEntryPrepTmp."Item No." := RFStatEntryTmp."Item No.";
        MultiStatEntryPrepTmp."Variant Code" := RFStatEntryTmp."Variant Code";
        MultiStatEntryPrepTmp."Unit of Measure Code" := RFStatEntryTmp."Unit of Measure Code";
        MultiStatEntryPrepTmp."Available Qty. (Base)" := RFStatEntryTmp."Available Qty. (Base)";
        MultiStatEntryPrepTmp.INSERT;
      END ELSE BEGIN
        MultiStatEntryPrepTmp."Available Qty. (Base)" += RFStatEntryTmp."Available Qty. (Base)";
        MultiStatEntryPrepTmp.MODIFY;
      END;
    END;

    [External]
    PROCEDURE SetMultiOrderQtyApplied@1240020013(ApplyQuantity@1240020000 : Boolean);
    BEGIN
      IF NOT GetMultiOrder THEN
        EXIT;

      IF ApplyQuantity THEN BEGIN
        MultiStatEntryPrepTmp.RESET;
        IF MultiStatEntryPrepTmp.FIND('-') THEN BEGIN
          REPEAT
            MultiStatEntryGlobalTmp.RESET;
            MultiStatEntryGlobalTmp.SETCURRENTKEY("Item No.","Variant Code","Unit of Measure Code");
            MultiStatEntryGlobalTmp.SETRANGE("Item No.",MultiStatEntryPrepTmp."Item No.");
            MultiStatEntryGlobalTmp.SETRANGE("Variant Code",MultiStatEntryPrepTmp."Variant Code");
            MultiStatEntryGlobalTmp.SETRANGE("Unit of Measure Code",MultiStatEntryPrepTmp."Unit of Measure Code");
            IF NOT MultiStatEntryGlobalTmp.FIND('-') THEN BEGIN
              MultiStatEntryGlobalTmp."Entry No." := MultiStatEntryPrepTmp."Entry No.";
              MultiStatEntryGlobalTmp."Item No." := MultiStatEntryPrepTmp."Item No.";
              MultiStatEntryGlobalTmp."Variant Code" := MultiStatEntryPrepTmp."Variant Code";
              MultiStatEntryGlobalTmp."Unit of Measure Code" := MultiStatEntryPrepTmp."Unit of Measure Code";
              MultiStatEntryGlobalTmp."Available Qty. (Base)" := MultiStatEntryPrepTmp."Available Qty. (Base)";
              MultiStatEntryGlobalTmp.INSERT;
            END ELSE BEGIN
              MultiStatEntryGlobalTmp."Available Qty. (Base)" += MultiStatEntryPrepTmp."Available Qty. (Base)";
              MultiStatEntryGlobalTmp.MODIFY;
            END;
            MultiStatEntryPrepTmp.DELETE;
          UNTIL MultiStatEntryPrepTmp.NEXT = 0;
        END;
      END ELSE BEGIN
        MultiStatEntryPrepTmp.RESET;
        MultiStatEntryPrepTmp.DELETEALL;
      END;
    END;

    [External]
    PROCEDURE GetMultiOrderQtyApplied@1240020012(RFStatEntryTmp@1240020000 : TEMPORARY Record 14002804;LocationCode@1240020003 : Code[10];PendAvailQtyBase@1240020004 : Decimal) : Decimal;
    VAR
      BinContent@1240020001 : Record 7302;
      Location@1240020005 : Record 14;
      RFSetup@1240020006 : Record 14002801;
      WarehouseStreamlineMgt@1240020009 : Codeunit 14002809;
      PickAvailQtyBase@1240020002 : Decimal;
      RemainingQtyAvailBase@1240020008 : Decimal;
      BinTypeFilter@1240020007 : Text[250];
    BEGIN
      IF NOT GetMultiOrder THEN
        EXIT(PendAvailQtyBase);

      CLEAR(PickAvailQtyBase);
      Location.GET(LocationCode);
      IF Location."Bin Mandatory" THEN BEGIN
        IF Location."Directed Put-away and Pick" THEN BEGIN
          RFSetup.GetRFSetup;
          RFSetup.CalculateBinTypeFilters;
          BinTypeFilter := RFSetup.GetPickBinTypeFilter;
        END ELSE
          BinTypeFilter := '';

        BinContent.RESET;
        BinContent.SETCURRENTKEY("Location Code","Bin Code","Item No.","Variant Code","Unit of Measure Code");
        BinContent.SETRANGE("Item No.",RFStatEntryTmp."Item No.");
        BinContent.SETRANGE("Location Code",LocationCode);
        BinContent.SETRANGE("Variant Code",RFStatEntryTmp."Variant Code");
        BinContent.SETFILTER("Bin Type Code",BinTypeFilter);
        IF BinContent.FIND('-') THEN
          REPEAT
            PickAvailQtyBase := PickAvailQtyBase + (BinContent.CalcQtyAvailToPick(0));
          UNTIL BinContent.NEXT = 0;
      END ELSE
        PickAvailQtyBase := WarehouseStreamlineMgt.CalcLocationInvBalance(
          LocationCode,RFStatEntryTmp."Item No.",RFStatEntryTmp."Variant Code");

      // Subtract the pending pick quantities already applied to other acceptable orders in the group
      CLEAR(RemainingQtyAvailBase);
      MultiStatEntryGlobalTmp.RESET;
      MultiStatEntryGlobalTmp.SETCURRENTKEY("Item No.","Variant Code","Unit of Measure Code");
      MultiStatEntryGlobalTmp.SETRANGE("Item No.",RFStatEntryTmp."Item No.");
      MultiStatEntryGlobalTmp.SETRANGE("Variant Code",RFStatEntryTmp."Variant Code");
      MultiStatEntryGlobalTmp.SETRANGE("Unit of Measure Code",RFStatEntryTmp."Unit of Measure Code");
      IF MultiStatEntryGlobalTmp.FIND('-') THEN
        RemainingQtyAvailBase := PickAvailQtyBase - MultiStatEntryGlobalTmp."Available Qty. (Base)"
      ELSE
        RemainingQtyAvailBase := PickAvailQtyBase;

      IF RemainingQtyAvailBase > PendAvailQtyBase THEN
        EXIT(PendAvailQtyBase)
      ELSE
        EXIT(RemainingQtyAvailBase);
    END;

    [External]
    PROCEDURE GetMultiOrderAvailQtyApplied@1240020019(ItemNo@1240020000 : Code[20];VariantCode@1240020001 : Code[10];UnitOfMeasureCode@1240020003 : Code[10]) : Decimal;
    VAR
      QtyAppliedAvailBase@1240020002 : Decimal;
    BEGIN
      CLEAR(QtyAppliedAvailBase);
      MultiStatEntryGlobalTmp.RESET;
      MultiStatEntryGlobalTmp.SETCURRENTKEY("Item No.","Variant Code","Unit of Measure Code");
      MultiStatEntryGlobalTmp.SETRANGE("Item No.",ItemNo);
      MultiStatEntryGlobalTmp.SETRANGE("Variant Code",VariantCode);
      IF UnitOfMeasureCode <> '' THEN
        MultiStatEntryGlobalTmp.SETRANGE("Unit of Measure Code",UnitOfMeasureCode);
      IF MultiStatEntryGlobalTmp.FIND('-') THEN
        REPEAT
          QtyAppliedAvailBase := QtyAppliedAvailBase + MultiStatEntryGlobalTmp."Available Qty. (Base)";
        UNTIL MultiStatEntryGlobalTmp.NEXT = 0;

      EXIT(QtyAppliedAvailBase);
    END;

    [External]
    PROCEDURE ResetPrepMultiOrderQtyApplied@1240020023();
    BEGIN
      MultiStatEntryPrepTmp.RESET;
      MultiStatEntryPrepTmp.DELETEALL;
    END;

    [External]
    PROCEDURE CreateWavePickInternalPickLines@1240020018(VAR WhseInternalPickHeader@1240020000 : Record 7333;VAR WhseInternalPickLine@1240020001 : Record 7334);
    VAR
      ItemUOM@1240020002 : Record 5404;
    BEGIN
      WhseInternalPickLine."No." := WhseInternalPickHeader."No.";
      WhseInternalPickLine."Line No." := 0;
      MultiStatEntryGlobalTmp.RESET;
      IF MultiStatEntryGlobalTmp.FIND('-') THEN
        REPEAT
          IF MultiStatEntryGlobalTmp."Available Qty. (Base)" > 0 THEN BEGIN
            WhseInternalPickLine."Line No." := WhseInternalPickLine."Line No." + 10000;
            WhseInternalPickLine.INIT;
            WhseInternalPickLine.VALIDATE("Item No.",MultiStatEntryGlobalTmp."Item No.");
            IF MultiStatEntryGlobalTmp."Variant Code" <> '' THEN
              WhseInternalPickLine.VALIDATE("Variant Code",MultiStatEntryGlobalTmp."Variant Code");
            IF WhseInternalPickLine."Unit of Measure Code" <>
               MultiStatEntryGlobalTmp."Unit of Measure Code"
            THEN
              WhseInternalPickLine.VALIDATE(
                "Unit of Measure Code",MultiStatEntryGlobalTmp."Unit of Measure Code");
            ItemUOM.GET(MultiStatEntryGlobalTmp."Item No.",MultiStatEntryGlobalTmp."Unit of Measure Code");
            WhseInternalPickLine.VALIDATE(
              Quantity,ROUND(MultiStatEntryGlobalTmp."Available Qty. (Base)" / ItemUOM."Qty. per Unit of Measure",0.00001));
            WhseInternalPickLine.INSERT(TRUE);
          END;
        UNTIL MultiStatEntryGlobalTmp.NEXT = 0;
    END;

    [External]
    PROCEDURE SetTestCodeunitOverride@1240020020();
    BEGIN
      TestOverride := TRUE;
    END;

    [External]
    PROCEDURE GetTestCodeunitOverride@1240020021() : Boolean;
    BEGIN
      EXIT(TestOverride);
    END;

    [External]
    PROCEDURE ResetTestCodeunitOverride@1240020022();
    BEGIN
      CLEAR(TestOverride);
    END;

    BEGIN
    END.
  }
}

