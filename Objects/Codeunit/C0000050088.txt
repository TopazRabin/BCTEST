OBJECT Codeunit 50088 Functions
{
  OBJECT-PROPERTIES
  {
    Date=11/04/20;
    Time=[ 6:08:19 AM];
    Modified=Yes;
    Version List=TPZ000.00.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000000000 : TextConst 'ENU=Processing...@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';
      Text002@1000000001 : TextConst 'ENU=Modified objects:\ %1.';

    PROCEDURE UpdateVersionList@1000000002();
    VAR
      li_Total@1000000006 : Integer;
      li_Current@1000000005 : Integer;
      li_Modified@1000000004 : Integer;
      lt_NewVersionList@1000000003 : Text;
      lt_BaseVersionListPart@1000000007 : Text;
      lt_ModVersionListPart@1000000008 : Text;
      ldlg_Win@1000000002 : Dialog;
      lr_Object@1000000001 : Record 2000000001;
      lr_Object2@1000000000 : Record 50020;
    BEGIN
      //function compares two different Version list strings: standard Object table (lr_Object) and external object table (lr_Object2)
      //here external object table is under the number 50020, you can change it to any
      //data should be copied into external object table before proceed

      //function takes "base part" of version list from the current object, cut all the rest and
      //concatenate with the "mod part" of external version list

      //"base part" = everything starts from the begining to the last NAV* substring
      //"mod part" = everything starts after last NAV* substring to the end

      lr_Object.SETRANGE(Type, 1, 9);
      //lr_Object.SETRANGE(ID, 27);

      ldlg_Win.OPEN(Text001);
      li_Total := lr_Object.COUNT;
      IF lr_Object.FINDSET THEN REPEAT
        IF lr_Object2.GET(lr_Object.Type, lr_Object."Company Name", lr_Object.ID) THEN BEGIN
          //AND (lr_Object."Version List" <> lr_Object2."Version List") THEN BEGIN

          lt_BaseVersionListPart := GetObjectVersionListPart(lr_Object."Version List", 0 );
          //lt_ModVersionListPart := GetObjectVersionListPart(lr_Object2."Version List", 1);

          IF (lt_BaseVersionListPart <> '')AND(lt_ModVersionListPart <> '')
            THEN lt_NewVersionList :=  lt_BaseVersionListPart + ',' + lt_ModVersionListPart
            ELSE lt_NewVersionList :=   lt_BaseVersionListPart + lt_ModVersionListPart;

          IF STRLEN(lt_NewVersionList) > 248
            THEN lt_NewVersionList := COPYSTR(lt_NewVersionList, 1, 248);

          lr_Object."Version List" := lt_NewVersionList;
          lr_Object.MODIFY(FALSE);
          li_Modified += 1;
        END;

        li_Current += 1;
        ldlg_Win.UPDATE(1, ROUND(li_Current/li_Total*10000, 1));
      UNTIL lr_Object.NEXT = 0;

      ldlg_Win.CLOSE;

      MESSAGE(STRSUBSTNO(Text002, li_Modified));
    END;

    LOCAL PROCEDURE GetObjectVersionListPart@1000000000(pt_VersionList@1000000000 : Text[248];po_WhichPart@1000000001 : 'Base,Mods') : Text[248];
    VAR
      i@1000000003 : Integer;
      li_CommaPos@1000000002 : Integer;
      lo_NAVflags@1000000004 : ' ,v,a,n';
    BEGIN
      FOR i := STRLEN(pt_VersionList) DOWNTO 1 DO BEGIN
        IF pt_VersionList[i] = ','
          THEN li_CommaPos := i;

        CASE lo_NAVflags OF
          lo_NAVflags::" ":BEGIN
            IF pt_VersionList[i] = 'V'
              THEN lo_NAVflags := lo_NAVflags::v;
          END;
          lo_NAVflags::v:BEGIN
            IF pt_VersionList[i] = 'A'
              THEN lo_NAVflags := lo_NAVflags::a;
          END;
          lo_NAVflags::a:BEGIN
            IF pt_VersionList[i] = 'N'
              THEN lo_NAVflags := lo_NAVflags::n;
          END;
        END;

        IF lo_NAVflags = lo_NAVflags::n
          THEN BREAK;
      END;

      IF li_CommaPos <> 0 THEN BEGIN
        CASE po_WhichPart OF
          po_WhichPart::Base:EXIT(COPYSTR(pt_VersionList, 1, li_CommaPos - 1));
          po_WhichPart::Mods:EXIT(COPYSTR(pt_VersionList, li_CommaPos + 1, STRLEN(pt_VersionList)));
        END;
      END ELSE EXIT(pt_VersionList);
    END;

    BEGIN
    {
      kvb created 10/13/17
    }
    END.
  }
}

