OBJECT Codeunit 14000711 Shipper Type Management
{
  OBJECT-PROPERTIES
  {
    Date=12/28/17;
    Time=12:00:00 PM;
    Version List=SE0.60.18;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      UPSOptionPage@1240030012 : Record 14000761;
      UPSPostedOptionPage@1240030034 : Record 14000762;
      FedExOptionPage@1240030011 : Record 14000781;
      FedExOptionPageExt@1240020000 : Record 14000793;
      FedExPostedOptionPage@1240030035 : Record 14000782;
      FedExPostedOptionPageExt@1240020001 : Record 14000794;
      LTLOptionPage@1240030010 : Record 14000801;
      GenericOptionPage@1240030009 : Record 14000861;
      USPSOptionPage@1240030008 : Record 14000881;
      USPostalOptionPage@1240030024 : Record 14050501;
      RatingOptionPage@1240030025 : Record 14050451;
      UPSShippingAgentAccount@1240030006 : Record 14000770;
      UPSlinkShippingAgentAccount@1240030005 : Record 14050005;
      FedExShippingAgentAccount@1240030004 : Record 14000788;
      LTLShippingAgentAccount@1240030003 : Record 14000803;
      GenericShippingAgentAccount@1240030002 : Record 14000863;
      USPSShippingAgentAccount@1240030001 : Record 14000883;
      Package@1240030032 : Record 14000701;
      PostedPackage@1240030033 : Record 14000704;
      USPostalShippingAgentAccount@1240030027 : Record 14050503;
      RatingShippingAgentAccount@1240030028 : Record 14050453;
      UPSTransaction@1240030018 : Codeunit 14000764;
      FedExTransaction@1240030017 : Codeunit 14000783;
      LTLTransaction@1240030016 : Codeunit 14000801;
      GenericTransaction@1240030015 : Codeunit 14000861;
      USPSTransaction@1240030014 : Codeunit 14000881;
      Text001@1240030019 : TextConst 'ENU=Option page does not exist for this %1';
      Text002@1240030020 : TextConst 'ENU=Setup not possible for this %1';
      Text003@1240030021 : TextConst 'ENU=%1, continue reopen?';
      Text004@1240030022 : TextConst 'ENU=Not available for %1 %2';
      USPostalTransaction@1240030030 : Codeunit 14050501;
      RatingTransaction@1240030031 : Codeunit 14050451;
      Text005@1001 : TextConst 'ENU=Wrong Table ID %1.';
      Text006@1002 : TextConst 'ENU=,UPS,FEDEX,LTL,,Airborne,DHL,USPostal,,,Generic,Extended';
      Text007@1003 : TextConst 'ENU=Invalid Shipper Type.';
      Text009@1240030037 : TextConst 'ENU=Closed %1 exists for %2 %3 %4 %5';

    PROCEDURE LookupAccountNo@1240030024(ShippingAgent@1240030000 : Record 291;ShippingSetup@1240030001 : Record 14000707) : Code[20];
    BEGIN
      CASE ShippingAgent."Shipper Type" OF
        ShippingAgent."Shipper Type"::UPS:
          BEGIN
            IF ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::HMU THEN BEGIN
              IF PAGE.RUNMODAL(0,UPSShippingAgentAccount) = ACTION::LookupOK THEN
                EXIT(UPSShippingAgentAccount."Account No.");
            END ELSE BEGIN
              IF PAGE.RUNMODAL(0,UPSlinkShippingAgentAccount) = ACTION::LookupOK THEN
                EXIT(UPSlinkShippingAgentAccount."Account No.");
            END;
          END;
        ShippingAgent."Shipper Type"::FEDEX:
          IF PAGE.RUNMODAL(0,FedExShippingAgentAccount) = ACTION::LookupOK THEN
            EXIT(FedExShippingAgentAccount."Account No.");
        ShippingAgent."Shipper Type"::LTL:
          BEGIN
            LTLShippingAgentAccount.SETRANGE("Shipping Agent Code",ShippingAgent.Code);
            IF PAGE.RUNMODAL(0,LTLShippingAgentAccount) = ACTION::LookupOK THEN
              EXIT(LTLShippingAgentAccount."Account No.");
          END;
        ShippingAgent."Shipper Type"::Generic:
          IF PAGE.RUNMODAL(0,GenericShippingAgentAccount) = ACTION::LookupOK THEN
            EXIT(GenericShippingAgentAccount."Account No.");
        ShippingAgent."Shipper Type"::"4":
          IF PAGE.RUNMODAL(0,USPSShippingAgentAccount) = ACTION::LookupOK THEN
            EXIT(USPSShippingAgentAccount."Account No.");
        ShippingAgent."Shipper Type"::USPostal:
          IF PAGE.RUNMODAL(0,USPostalShippingAgentAccount) = ACTION::LookupOK THEN
            EXIT(USPostalShippingAgentAccount."Account No.");
        ShippingAgent."Shipper Type"::"8":
          IF PAGE.RUNMODAL(0,RatingShippingAgentAccount) = ACTION::LookupOK THEN
            EXIT(RatingShippingAgentAccount."Account No.");
      END;
    END;

    PROCEDURE GetAccountNo@1240030026(PackingStation@1240030001 : Record 14000709;ShippingAgent@1240030002 : Record 291) : Code[20];
    VAR
      CarrierPackingStation@1240030000 : Record 14000729;
    BEGIN
      CarrierPackingStation.GetPackingStation(PackingStation);
      CASE ShippingAgent."Shipper Type" OF
        ShippingAgent."Shipper Type"::UPS:
          BEGIN
            CarrierPackingStation.TESTFIELD("UPS Shipping Agent Account No.");
            EXIT(CarrierPackingStation."UPS Shipping Agent Account No.");
          END;
        ShippingAgent."Shipper Type"::FEDEX:
          BEGIN
            CarrierPackingStation.TESTFIELD("FedEx Shipping Agent Acc. No.");
            EXIT(CarrierPackingStation."FedEx Shipping Agent Acc. No.");
          END;
        ShippingAgent."Shipper Type"::LTL:
          BEGIN
            ShippingAgent.TESTFIELD("LTL Shipping Agent Account No.");
            EXIT(ShippingAgent."LTL Shipping Agent Account No.");
          END;
        ShippingAgent."Shipper Type"::Generic:
          BEGIN
            CarrierPackingStation.TESTFIELD("Generic Shipping Agent Acc. No");
            EXIT(CarrierPackingStation."Generic Shipping Agent Acc. No");
          END;
        ShippingAgent."Shipper Type"::"4":
          BEGIN
            CarrierPackingStation.TESTFIELD("USPS Shipping Agent Acc. No");
            EXIT(CarrierPackingStation."USPS Shipping Agent Acc. No");
          END;
        ShippingAgent."Shipper Type"::"5":
          BEGIN
            CarrierPackingStation.TESTFIELD("Airborne Shipping Agent Acc No");
            EXIT(CarrierPackingStation."Airborne Shipping Agent Acc No");
          END;
        ShippingAgent."Shipper Type"::"6":
          BEGIN
            CarrierPackingStation.TESTFIELD("DHL Shipping Agent Acc. No");
            EXIT(CarrierPackingStation."DHL Shipping Agent Acc. No");
          END;
        ShippingAgent."Shipper Type"::USPostal:
          BEGIN
            CarrierPackingStation.TESTFIELD("USPostal Shipping Agent Acc No");
            EXIT(CarrierPackingStation."USPostal Shipping Agent Acc No");
          END;
        ShippingAgent."Shipper Type"::"8":
          BEGIN
            CarrierPackingStation.TESTFIELD("Rating Shipping Agent Acc. No");
            EXIT(CarrierPackingStation."Rating Shipping Agent Acc. No");
          END;
        ELSE
          EXIT('');
      END;
    END;

    PROCEDURE DeleteOptionPage@1240030033(ShippingAgent@1240030000 : Record 291;Type@1240030004 : Integer;SourceID@1240030003 : Code[20];SourceType@1240030002 : Integer;SourceSubtype@1240030001 : Integer;SecondSourceID@1240030005 : Code[20]);
    BEGIN
      CASE ShippingAgent."Shipper Type" OF
        ShippingAgent."Shipper Type"::UPS:
          BEGIN
            UPSOptionPage.GET(Type,SourceID,SourceType,SourceSubtype,SecondSourceID);
            UPSOptionPage.DELETE;
          END;
        ShippingAgent."Shipper Type"::FEDEX:
          BEGIN
            FedExOptionPage.GET(Type,SourceID,SourceType,SourceSubtype,SecondSourceID);
            FedExOptionPage.DELETE;
            FedExOptionPageExt.GET(Type,SourceID,SourceType,SourceSubtype,SecondSourceID);
            FedExOptionPageExt.DELETE;
          END;
        ShippingAgent."Shipper Type"::LTL:
          BEGIN
            LTLOptionPage.GET(Type,SourceID,SourceType,SourceSubtype,SecondSourceID);
            LTLOptionPage.DELETE;
          END;
        ShippingAgent."Shipper Type"::Generic:
          BEGIN
            GenericOptionPage.GET(Type,SourceID,SourceType,SourceSubtype,SecondSourceID);
            GenericOptionPage.DELETE;
          END;
        ShippingAgent."Shipper Type"::"4":
          BEGIN
            USPSOptionPage.GET(Type,SourceID,SourceType,SourceSubtype,SecondSourceID);
            USPSOptionPage.DELETE;
          END;
        ShippingAgent."Shipper Type"::USPostal:
          BEGIN
            USPostalOptionPage.GET(Type,SourceID,SourceType,SourceSubtype,SecondSourceID);
            USPostalOptionPage.DELETE;
          END;
        ShippingAgent."Shipper Type"::"8":
          BEGIN
            RatingOptionPage.GET(Type,SourceID,SourceType,SourceSubtype,SecondSourceID);
            RatingOptionPage.DELETE;
          END;
        // >> ECS
        ShippingAgent."Shipper Type"::Extended:
          ECDeleteOptionPage(Type, SourceID, SourceType, SourceSubtype, SecondSourceID);
        // << ECS
      END;
    END;

    PROCEDURE DeleteOptionPages@1240030030(Type@1240030000 : Integer;SourceID@1240030001 : Code[20];SourceType@1240030002 : Integer;SourceSubtype@1240030003 : Integer;SecondSourceID@1240030004 : Code[20]);
    BEGIN
      UPSOptionPage.RESET;
      UPSOptionPage.SETRANGE(Type,Type);
      UPSOptionPage.SETRANGE("Source ID",SourceID);
      UPSOptionPage.SETRANGE("Source Type",SourceType);
      UPSOptionPage.SETRANGE("Source Subtype",SourceSubtype);
      UPSOptionPage.SETRANGE("Second Source ID",SecondSourceID);
      IF UPSOptionPage.FIND('-') THEN
        UPSOptionPage.DELETEALL;

      FedExOptionPage.RESET;
      FedExOptionPage.SETRANGE(Type,Type);
      FedExOptionPage.SETRANGE("Source ID",SourceID);
      FedExOptionPage.SETRANGE("Source Type",SourceType);
      FedExOptionPage.SETRANGE("Source Subtype",SourceSubtype);
      FedExOptionPage.SETRANGE("Second Source ID",SecondSourceID);
      IF FedExOptionPage.FIND('-') THEN
        FedExOptionPage.DELETEALL;

      FedExOptionPageExt.RESET;
      FedExOptionPageExt.SETRANGE(Type,Type);
      FedExOptionPageExt.SETRANGE("Source ID",SourceID);
      FedExOptionPageExt.SETRANGE("Source Type",SourceType);
      FedExOptionPageExt.SETRANGE("Source Subtype",SourceSubtype);
      FedExOptionPageExt.SETRANGE("Second Source ID",SecondSourceID);
      IF FedExOptionPageExt.FIND('-') THEN
        FedExOptionPageExt.DELETEALL;

      LTLOptionPage.RESET;
      LTLOptionPage.SETRANGE(Type,Type);
      LTLOptionPage.SETRANGE("Source ID",SourceID);
      LTLOptionPage.SETRANGE("Source Type",SourceType);
      LTLOptionPage.SETRANGE("Source Subtype",SourceSubtype);
      LTLOptionPage.SETRANGE("Second Source ID",SecondSourceID);
      IF LTLOptionPage.FIND('-') THEN
        LTLOptionPage.DELETEALL;

      GenericOptionPage.RESET;
      GenericOptionPage.SETRANGE(Type,Type);
      GenericOptionPage.SETRANGE("Source ID",SourceID);
      GenericOptionPage.SETRANGE("Source Type",SourceType);
      GenericOptionPage.SETRANGE("Source Subtype",SourceSubtype);
      GenericOptionPage.SETRANGE("Second Source ID",SecondSourceID);
      IF GenericOptionPage.FIND('-') THEN
        GenericOptionPage.DELETEALL;

      USPSOptionPage.RESET;
      USPSOptionPage.SETRANGE(Type,Type);
      USPSOptionPage.SETRANGE("Source ID",SourceID);
      USPSOptionPage.SETRANGE("Source Type",SourceType);
      USPSOptionPage.SETRANGE("Source Subtype",SourceSubtype);
      USPSOptionPage.SETRANGE("Second Source ID",SecondSourceID);
      IF USPSOptionPage.FIND('-') THEN
        USPSOptionPage.DELETEALL;

      USPostalOptionPage.RESET;
      USPostalOptionPage.SETRANGE(Type,Type);
      USPostalOptionPage.SETRANGE("Source ID",SourceID);
      USPostalOptionPage.SETRANGE("Source Type",SourceType);
      USPostalOptionPage.SETRANGE("Source Subtype",SourceSubtype);
      USPostalOptionPage.SETRANGE("Second Source ID",SecondSourceID);
      IF USPostalOptionPage.FIND('-') THEN
        USPostalOptionPage.DELETEALL;

      RatingOptionPage.RESET;
      RatingOptionPage.SETRANGE(Type,Type);
      RatingOptionPage.SETRANGE("Source ID",SourceID);
      RatingOptionPage.SETRANGE("Source Type",SourceType);
      RatingOptionPage.SETRANGE("Source Subtype",SourceSubtype);
      RatingOptionPage.SETRANGE("Second Source ID",SecondSourceID);
      IF RatingOptionPage.FIND('-') THEN
        RatingOptionPage.DELETEALL;

      ECDeleteOptionPages(Type, SourceID, SourceType, SourceSubtype, SecondSourceID);  // >> ECS <<
    END;

    PROCEDURE PackageGetShipAgentAccountNo@1240030000(VAR CurrentPackage@1240030000 : Record 14000701;PackingStation@1240030001 : Record 14000709;ShippingAgent@1240030002 : Record 291);
    BEGIN
      CurrentPackage.VALIDATE(
        "Shipping Agent Account No.",GetAccountNo(PackingStation,ShippingAgent));
    END;

    PROCEDURE PackageValidateAccountNo@1240030001(VAR CurrentPackage@1240030000 : Record 14000701;PackingStation@1240030002 : Record 14000709;ShippingAgent@1240030001 : Record 291;ShippingSetup@1240030003 : Record 14000707;PackingControl@1240030011 : Record 14000717);
    VAR
      CarrierPackingStation@1240030004 : Record 14000729;
    BEGIN
      WITH CurrentPackage DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            BEGIN
              IF ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::HMU THEN BEGIN
                UPSShippingAgentAccount.GET("Shipping Agent Account No.");
                "COD Cashiers Check" :=
                  UPSShippingAgentAccount."COD Guaranteed Funds Only" OR
                  PackingControl."COD Cashiers Check";
                "Add Shipping Charge to COD Amt" :=
                  UPSShippingAgentAccount."Add Shipping Charge to COD Amt";
                "Insure Through Shipping Agent" :=
                  CalcInsureThroughShippingAgent(
                    UPSShippingAgentAccount."Insure Through Carrier",
                    UPSShippingAgentAccount."Insured Third Party/Collect");
              END ELSE BEGIN
                UPSlinkShippingAgentAccount.GET("Shipping Agent Account No.");
                "COD Cashiers Check" :=
                  UPSlinkShippingAgentAccount."COD Guaranteed Funds Only" OR
                  PackingControl."COD Cashiers Check";
                "Add Shipping Charge to COD Amt" :=
                  UPSlinkShippingAgentAccount."Add Shipping Charge to COD Amt";
                "Insure Through Shipping Agent" :=
                  CalcInsureThroughShippingAgent(
                    UPSlinkShippingAgentAccount."Insure Through Carrier",
                    UPSlinkShippingAgentAccount."Insured Third Party/Collect");
              END;
            END;
          ShippingAgent."Shipper Type"::FEDEX:
            BEGIN
              FedExShippingAgentAccount.GET("Shipping Agent Account No.");
              "COD Cashiers Check" :=
                FedExShippingAgentAccount."COD Guaranteed Funds Only" OR
                PackingControl."COD Cashiers Check";
              "Add Shipping Charge to COD Amt" :=
                FedExShippingAgentAccount."Add Shipping Charge to COD Amt";
              "Insure Through Shipping Agent" :=
                CalcInsureThroughShippingAgent(
                  FedExShippingAgentAccount."Insure Through Carrier",
                  FedExShippingAgentAccount."Insured Third Party/Collect");
            END;
          ShippingAgent."Shipper Type"::LTL:
            BEGIN
              "Shipping Agent Account No." := ShippingAgent."LTL Shipping Agent Account No.";
              LTLShippingAgentAccount.GET("Shipping Agent Account No.");
              LTLShippingAgentAccount.TESTFIELD("Shipping Agent Code","Shipping Agent Code");
              "COD Cashiers Check" :=
                LTLShippingAgentAccount."COD Guaranteed Funds Only" OR
                PackingControl."COD Cashiers Check";
              "Add Shipping Charge to COD Amt" :=
                LTLShippingAgentAccount."Add Shipping Charge to COD Amt";
              "Insure Through Shipping Agent" :=
                CalcInsureThroughShippingAgent(
                  LTLShippingAgentAccount."Insure Through Carrier",
                  LTLShippingAgentAccount."Insured Third Party/Collect");
            END;
          ShippingAgent."Shipper Type"::Generic:
            BEGIN
              GenericShippingAgentAccount.GET("Shipping Agent Account No.");
              "COD Cashiers Check" :=
                GenericShippingAgentAccount."COD Guaranteed Funds Only" OR
                PackingControl."COD Cashiers Check";
              "Add Shipping Charge to COD Amt" :=
                GenericShippingAgentAccount."Add Shipping Charge to COD Amt";
              "Insure Through Shipping Agent" :=
                CalcInsureThroughShippingAgent(
                  GenericShippingAgentAccount."Insure Through Carrier",
                  GenericShippingAgentAccount."Insured Third Party/Collect");
            END;
          ShippingAgent."Shipper Type"::"4":
            BEGIN
              USPSShippingAgentAccount.GET("Shipping Agent Account No.");
              "COD Cashiers Check" :=
                USPSShippingAgentAccount."COD Guaranteed Funds Only" OR
                PackingControl."COD Cashiers Check";
              "Add Shipping Charge to COD Amt" :=
                USPSShippingAgentAccount."Add Shipping Charge to COD Amt";
              "Insure Through Shipping Agent" :=
                CalcInsureThroughShippingAgent(
                  USPSShippingAgentAccount."Insure Through Carrier",
                  USPSShippingAgentAccount."Insured Third Party/Collect");
            END;
          ShippingAgent."Shipper Type"::USPostal:
            BEGIN
              USPostalShippingAgentAccount.GET("Shipping Agent Account No.");
              "COD Cashiers Check" :=
                USPostalShippingAgentAccount."COD Guaranteed Funds Only" OR
                PackingControl."COD Cashiers Check";
              "Add Shipping Charge to COD Amt" :=
                USPostalShippingAgentAccount."Add Shipping Charge to COD Amt";
              "Insure Through Shipping Agent" :=
                CalcInsureThroughShippingAgent(
                  USPostalShippingAgentAccount."Insure Through Carrier",
                  USPostalShippingAgentAccount."Insured Third Party/Collect");
            END;
          ShippingAgent."Shipper Type"::"8":
            BEGIN
              RatingShippingAgentAccount.GET("Shipping Agent Account No.");
              "COD Cashiers Check" :=
                RatingShippingAgentAccount."COD Guaranteed Funds Only" OR
                PackingControl."COD Cashiers Check";
              "Add Shipping Charge to COD Amt" :=
                RatingShippingAgentAccount."Add Shipping Charge to COD Amt";
              "Insure Through Shipping Agent" :=
                CalcInsureThroughShippingAgent(
                  RatingShippingAgentAccount."Insure Through Carrier",
                  RatingShippingAgentAccount."Insured Third Party/Collect");
            END;
          ELSE BEGIN
            "COD Cashiers Check" :=
              ShippingSetup."COD Guaranteed Funds Only" OR PackingControl."COD Cashiers Check";
            "Add Shipping Charge to COD Amt" :=
              ShippingSetup."Add Shipping Charge to COD Amt";
            "Insure Through Shipping Agent" :=
              CalcInsureThroughShippingAgent(
                ShippingSetup."Insure Through Carrier",ShippingSetup."Insured Third Party/Collect");
          END;
        END;
      END;
    END;

    PROCEDURE PackageLookupAccountNo@1240030002(VAR CurrentPackage@1240030004 : Record 14000701;ShippingAgent@1240030000 : Record 291;ShippingSetup@1240030001 : Record 14000707);
    VAR
      AccountNo@1240030002 : Code[20];
    BEGIN
      AccountNo := LookupAccountNo(ShippingAgent,ShippingSetup);
      IF AccountNo <> '' THEN
        CurrentPackage.VALIDATE("Shipping Agent Account No.",AccountNo);
    END;

    PROCEDURE PackageValidateCOD@1240030003(VAR CurrentPackage@1240030002 : Record 14000701;PackingStation@1240030003 : Record 14000709;ShippingAgent@1240030001 : Record 291;ShippingSetup@1240030000 : Record 14000707);
    VAR
      CarrierPackingStation@1240030004 : Record 14000729;
    BEGIN
      WITH CurrentPackage DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            BEGIN
              TESTFIELD("Shipping Agent Account No.");
              IF ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::HMU THEN BEGIN
                UPSShippingAgentAccount.GET("Shipping Agent Account No.");
                "COD Cashiers Check" := UPSShippingAgentAccount."COD Guaranteed Funds Only";
                "Add Shipping Charge to COD Amt" :=
                  UPSShippingAgentAccount."Add Shipping Charge to COD Amt";
              END ELSE BEGIN
                UPSlinkShippingAgentAccount.GET("Shipping Agent Account No.");
                "COD Cashiers Check" := UPSlinkShippingAgentAccount."COD Guaranteed Funds Only";
                "Add Shipping Charge to COD Amt" :=
                  UPSlinkShippingAgentAccount."Add Shipping Charge to COD Amt";
              END;
            END;
          ShippingAgent."Shipper Type"::FEDEX:
            BEGIN
              TESTFIELD("Shipping Agent Account No.");
              FedExShippingAgentAccount.GET("Shipping Agent Account No.");
              "COD Cashiers Check" := FedExShippingAgentAccount."COD Guaranteed Funds Only";
              "Add Shipping Charge to COD Amt" :=
                FedExShippingAgentAccount."Add Shipping Charge to COD Amt";
            END;
          ShippingAgent."Shipper Type"::LTL:
            BEGIN
              TESTFIELD("Shipping Agent Account No.");
              LTLShippingAgentAccount.GET("Shipping Agent Account No.");
              "COD Cashiers Check" := LTLShippingAgentAccount."COD Guaranteed Funds Only";
              "Add Shipping Charge to COD Amt" :=
                LTLShippingAgentAccount."Add Shipping Charge to COD Amt";
            END;
          ShippingAgent."Shipper Type"::Generic:
            BEGIN
              TESTFIELD("Shipping Agent Account No.");
              GenericShippingAgentAccount.GET("Shipping Agent Account No.");
              "COD Cashiers Check" := GenericShippingAgentAccount."COD Guaranteed Funds Only";
              "Add Shipping Charge to COD Amt" :=
                GenericShippingAgentAccount."Add Shipping Charge to COD Amt";
            END;
          ShippingAgent."Shipper Type"::"4":
            BEGIN
              TESTFIELD("Shipping Agent Account No.");
              USPSShippingAgentAccount.GET("Shipping Agent Account No.");
              "COD Cashiers Check" := USPSShippingAgentAccount."COD Guaranteed Funds Only";
              "Add Shipping Charge to COD Amt" :=
                USPSShippingAgentAccount."Add Shipping Charge to COD Amt";
            END;
          ShippingAgent."Shipper Type"::USPostal:
            BEGIN
              TESTFIELD("Shipping Agent Account No.");
              USPostalShippingAgentAccount.GET("Shipping Agent Account No.");
              "COD Cashiers Check" := USPostalShippingAgentAccount."COD Guaranteed Funds Only";
              "Add Shipping Charge to COD Amt" :=
                USPostalShippingAgentAccount."Add Shipping Charge to COD Amt";
            END;
          ShippingAgent."Shipper Type"::"8":
            BEGIN
              TESTFIELD("Shipping Agent Account No.");
              RatingShippingAgentAccount.GET("Shipping Agent Account No.");
              "COD Cashiers Check" := RatingShippingAgentAccount."COD Guaranteed Funds Only";
              "Add Shipping Charge to COD Amt" :=
                RatingShippingAgentAccount."Add Shipping Charge to COD Amt";
            END;
          ELSE BEGIN
            "COD Cashiers Check" := ShippingSetup."COD Guaranteed Funds Only";
            "Add Shipping Charge to COD Amt" := ShippingSetup."Add Shipping Charge to COD Amt";
          END;
        END;
      END;
    END;

    PROCEDURE PackageInsertOptionPage@6(VAR CurrentPackage@1240030002 : Record 14000701;ShipperType@1000000000 : Integer);
    VAR
      ShippingAgent@1240030000 : Record 291;
    BEGIN
      WITH CurrentPackage DO BEGIN
        CASE ShipperType OF
          ShippingAgent."Shipper Type"::UPS:
            BEGIN
              CLEAR(UPSOptionPage);
              UPSOptionPage.SetPackage(CurrentPackage);
              IF UPSOptionPage.INSERT(TRUE) THEN ;
              IF UPSTransaction.PackageInsertOptionPage(CurrentPackage,UPSOptionPage) THEN
                UPSOptionPage.MODIFY;
            END;
          ShippingAgent."Shipper Type"::FEDEX:
            BEGIN
              CLEAR(FedExOptionPage);
              FedExOptionPage.SetPackage(CurrentPackage);
              IF FedExOptionPage.INSERT(TRUE) THEN ;
              CLEAR(FedExOptionPageExt);
              FedExOptionPageExt.SetPackage(CurrentPackage);
              IF FedExOptionPageExt.INSERT(TRUE) THEN ;
            END;
          ShippingAgent."Shipper Type"::LTL:
            BEGIN
              CLEAR(LTLOptionPage);
              LTLOptionPage.SetPackage(CurrentPackage);
              IF LTLOptionPage.INSERT(TRUE) THEN ;
            END;
          ShippingAgent."Shipper Type"::Generic:
            BEGIN
              CLEAR(GenericOptionPage);
              GenericOptionPage.SetPackage(CurrentPackage);
              IF GenericOptionPage.INSERT(TRUE) THEN ;
            END;
          ShippingAgent."Shipper Type"::"4":
            BEGIN
              CLEAR(USPSOptionPage);
              USPSOptionPage.SetPackage(CurrentPackage);
              IF USPSOptionPage.INSERT(TRUE) THEN ;
            END;
          ShippingAgent."Shipper Type"::USPostal:
            BEGIN
              CLEAR(USPostalOptionPage);
              USPostalOptionPage.SetPackage(CurrentPackage);
              IF USPostalOptionPage.INSERT(TRUE) THEN ;
            END;
          ShippingAgent."Shipper Type"::"8":
            BEGIN
              CLEAR(RatingOptionPage);
              RatingOptionPage.SetPackage(CurrentPackage);
              IF RatingOptionPage.INSERT(TRUE) THEN ;
            END;
          // >> ECS
          ShippingAgent."Shipper Type"::Extended:
            ECPackageInsertOptionPage(CurrentPackage);
          // << ECS
        END;
      END;
    END;

    PROCEDURE PackageDeleteOptionPage@8(VAR CurrentPackage@1240030000 : Record 14000701;ShipperType@1000000000 : Integer);
    VAR
      ShippingAgent@1240030001 : Record 291;
    BEGIN
      WITH CurrentPackage DO BEGIN
        CASE ShipperType OF
          ShippingAgent."Shipper Type"::UPS:
            BEGIN
              IF UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.",0,0,'') THEN
                UPSOptionPage.DELETE(TRUE);
            END;
          ShippingAgent."Shipper Type"::FEDEX:
            BEGIN
              IF FedExOptionPage.GET(FedExOptionPage.Type::Package,"No.",0,0,'') THEN
                FedExOptionPage.DELETE(TRUE);
              IF FedExOptionPageExt.GET(FedExOptionPageExt.Type::Package,"No.",0,0,'') THEN
                FedExOptionPageExt.DELETE(TRUE);
            END;
          ShippingAgent."Shipper Type"::LTL:
            BEGIN
              IF LTLOptionPage.GET(LTLOptionPage.Type::Package,"No.",0,0,'') THEN
                LTLOptionPage.DELETE(TRUE);
            END;
          ShippingAgent."Shipper Type"::Generic:
            BEGIN
              IF GenericOptionPage.GET(GenericOptionPage.Type::Package,"No.",0,0,'') THEN
                GenericOptionPage.DELETE(TRUE);
            END;
          ShippingAgent."Shipper Type"::"4":
            BEGIN
              IF USPSOptionPage.GET(USPSOptionPage.Type::Package,"No.",0,0,'') THEN
                USPSOptionPage.DELETE(TRUE);
            END;
          ShippingAgent."Shipper Type"::USPostal:
            BEGIN
              IF USPostalOptionPage.GET(USPostalOptionPage.Type::Package,"No.",0,0,'') THEN
                USPostalOptionPage.DELETE(TRUE);
            END;
          ShippingAgent."Shipper Type"::"8":
            BEGIN
              IF RatingOptionPage.GET(RatingOptionPage.Type::Package,"No.",0,0,'') THEN
                RatingOptionPage.DELETE(TRUE);
            END;
          // >> ECS
          ShippingAgent."Shipper Type"::Extended:
            ECPackageDeleteOptionPage(CurrentPackage);
          // << ECS
        END;
      END;
    END;

    PROCEDURE PackageCopyOptionPage@1240030004(VAR CurrentPackage@1240030000 : Record 14000701;Package@1240030002 : Record 14000701;ShippingAgent@1240030001 : Record 291);
    BEGIN
      WITH CurrentPackage DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            BEGIN
              UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.",0,0,'');
              UPSOptionPage."Source ID" := Package."No.";
              IF NOT UPSOptionPage.INSERT THEN BEGIN
                UPSOptionPage.ResetInitialValues;
                UPSOptionPage.MODIFY;
              END;
            END;
          ShippingAgent."Shipper Type"::FEDEX:
            BEGIN
              FedExOptionPage.GET(FedExOptionPage.Type::Package,"No.",0,0,'');
              FedExOptionPage."Source ID" := Package."No.";
              IF NOT FedExOptionPage.INSERT THEN
                FedExOptionPage.MODIFY;
              FedExOptionPageExt.GET(FedExOptionPageExt.Type::Package,"No.",0,0,'');
              FedExOptionPageExt."Source ID" := Package."No.";
              IF NOT FedExOptionPageExt.INSERT THEN
                FedExOptionPageExt.MODIFY;
            END;
          ShippingAgent."Shipper Type"::LTL:
            BEGIN
              LTLOptionPage.GET(LTLOptionPage.Type::Package,"No.",0,0,'');
              LTLOptionPage."Source ID" := Package."No.";
              IF NOT LTLOptionPage.INSERT THEN
                LTLOptionPage.MODIFY;
            END;
          ShippingAgent."Shipper Type"::Generic:
            BEGIN
              GenericOptionPage.GET(GenericOptionPage.Type::Package,"No.",0,0,'');
              GenericOptionPage."Source ID" := Package."No.";
              IF NOT GenericOptionPage.INSERT THEN
                GenericOptionPage.MODIFY;
            END;
          ShippingAgent."Shipper Type"::"4":
            BEGIN
              USPSOptionPage.GET(USPSOptionPage.Type::Package,"No.",0,0,'');
              USPSOptionPage."Source ID" := Package."No.";
              IF NOT USPSOptionPage.INSERT THEN
                USPSOptionPage.MODIFY;
            END;
          ShippingAgent."Shipper Type"::USPostal:
            BEGIN
              USPostalOptionPage.GET(USPostalOptionPage.Type::Package,"No.",0,0,'');
              USPostalOptionPage."Source ID" := Package."No.";
              IF NOT USPostalOptionPage.INSERT THEN
                USPostalOptionPage.MODIFY;
            END;
          ShippingAgent."Shipper Type"::"8":
            BEGIN
              RatingOptionPage.GET(RatingOptionPage.Type::Package,"No.",0,0,'');
              RatingOptionPage."Source ID" := Package."No.";
              IF NOT RatingOptionPage.INSERT THEN
                RatingOptionPage.MODIFY;
            END;
          // >> ECS
          ShippingAgent."Shipper Type"::Extended:
            ECCopyPackageOptionPage(CurrentPackage, Package);
          // << ECS
        END;
      END;
    END;

    PROCEDURE PackageSetStdSetupOptionPage@40(VAR CurrentPackage@1240030002 : Record 14000701;ShippingAgent@1240030000 : Record 291;OptionPageNo@1000000000 : Code[20]);
    VAR
      UPSOptionPage2@1000000001 : Record 14000761;
      FedExOptionPage2@1000000002 : Record 14000781;
      FedExOptionPageExt2@1240020000 : Record 14000793;
      LTLOptionPage2@1000000003 : Record 14000801;
      GenericOptionPage2@1000000004 : Record 14000861;
      USPSOptionPage2@1000000005 : Record 14000881;
      USPostalOptionPage2@1240030003 : Record 14050501;
      RatingOptionPage2@1240030004 : Record 14050451;
    BEGIN
      WITH CurrentPackage DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            IF UPSOptionPage2.GET(UPSOptionPage.Type::"Standard Option",OptionPageNo,0,0,'')
            THEN BEGIN
              UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.",0,0,'');
              UPSOptionPage.MergeOptionPage(UPSOptionPage2);
              UPSOptionPage.MODIFY(TRUE);
            END;
          ShippingAgent."Shipper Type"::FEDEX:
            BEGIN
              IF FedExOptionPage2.GET(FedExOptionPage.Type::"Standard Option",OptionPageNo,0,0,'')
              THEN BEGIN
                FedExOptionPage.GET(FedExOptionPage.Type::Package,"No.",0,0,'');
                FedExOptionPage.MergeOptionPage(FedExOptionPage2);
                FedExOptionPage.MODIFY(TRUE);
              END;
              IF FedExOptionPageExt2.GET(FedExOptionPageExt.Type::"Standard Option",OptionPageNo,0,0,'')
              THEN BEGIN
                FedExOptionPageExt.GET(FedExOptionPageExt.Type::Package,"No.",0,0,'');
                FedExOptionPageExt.MergeOptionPageExt(FedExOptionPageExt2);
                FedExOptionPageExt.MODIFY(TRUE);
              END;
            END;
          ShippingAgent."Shipper Type"::LTL:
            IF LTLOptionPage2.GET(LTLOptionPage.Type::"Standard Option",OptionPageNo,0,0,'')
            THEN BEGIN
              LTLOptionPage.GET(LTLOptionPage.Type::Package,"No.",0,0,'');
              LTLOptionPage.MergeOptionPage(LTLOptionPage2);
              LTLOptionPage.MODIFY(TRUE);
            END;
          ShippingAgent."Shipper Type"::Generic:
            IF GenericOptionPage2.GET(GenericOptionPage.Type::"Standard Option",OptionPageNo,0,0,'')
            THEN BEGIN
              GenericOptionPage.GET(GenericOptionPage.Type::Package,"No.",0,0,'');
              GenericOptionPage.MergeOptionPage(GenericOptionPage2);
              GenericOptionPage.MODIFY(TRUE);
            END;
          ShippingAgent."Shipper Type"::"4":
            IF USPSOptionPage2.GET(USPSOptionPage.Type::"Standard Option",OptionPageNo,0,0,'')
            THEN BEGIN
              USPSOptionPage.GET(USPSOptionPage.Type::Package,"No.",0,0,'');
              USPSOptionPage.MergeOptionPage(USPSOptionPage2);
              USPSOptionPage.MODIFY(TRUE);
            END;
          ShippingAgent."Shipper Type"::USPostal:
            IF USPostalOptionPage2.GET(USPostalOptionPage.Type::"Standard Option",OptionPageNo,0,0,'')
            THEN BEGIN
              USPostalOptionPage.GET(USPostalOptionPage.Type::Package,"No.",0,0,'');
              USPostalOptionPage.MergeOptionPage(USPostalOptionPage2);
              USPostalOptionPage.MODIFY(TRUE);
            END;
          ShippingAgent."Shipper Type"::"8":
            IF RatingOptionPage2.GET(RatingOptionPage.Type::"Standard Option",OptionPageNo,0,0,'')
            THEN BEGIN
              RatingOptionPage.GET(RatingOptionPage.Type::Package,"No.",0,0,'');
              RatingOptionPage.MergeOptionPage(RatingOptionPage2);
              RatingOptionPage.MODIFY(TRUE);
            END;
          // >> ECS
          ShippingAgent."Shipper Type"::Extended:
            ECPackageSetStdSetupOptionPage(CurrentPackage, OptionPageNo);
          // << ECS
        END;
      END;
    END;

    PROCEDURE PackageValidateCODCashCheck@1240030005(VAR CurrentPackage@1240030001 : Record 14000701;ShippingAgent@1240030000 : Record 291);
    BEGIN
      WITH CurrentPackage DO BEGIN
        IF (NOT "COD Cashiers Check") AND
           (ShippingAgent."Shipper Type" = ShippingAgent."Shipper Type"::UPS)
        THEN BEGIN
          UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.",0,0,'');
          UPSOptionPage."COD Accept Check" := FALSE;
          UPSOptionPage.MODIFY;
        END;
      END;
    END;

    PROCEDURE PackageLineUpdateOptionPage@1240030006(VAR CurrentPackageLine@1240030000 : Record 14000702;Package@1240030003 : Record 14000701;ShippingAgent@1240030001 : Record 291);
    VAR
      UPSOptionPage2@1240030012 : Record 14000761;
      FedExOptionPage2@1240030010 : Record 14000781;
      FedExOptionPageExt2@1240020000 : Record 14000793;
      LTLOptionPage2@1240030008 : Record 14000801;
      GenericOptionPage2@1240030006 : Record 14000861;
      USPSOptionPage2@1240030004 : Record 14000881;
      USPostalOptionPage2@1240030007 : Record 14050501;
      RatingOptionPage2@1240030005 : Record 14050451;
    BEGIN
      WITH CurrentPackageLine DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            IF UPSOptionPage.GET(Type + 2,"No.",0,0) THEN BEGIN
              UPSOptionPage2.GET(UPSOptionPage2.Type::Package,Package."No.",0,0,'');
              UPSOptionPage2.MergeOptionPage(UPSOptionPage);
              UPSOptionPage2.MODIFY(TRUE);
            END;
          ShippingAgent."Shipper Type"::FEDEX:
            BEGIN
              IF FedExOptionPage.GET(Type + 2,"No.",0,0) THEN BEGIN
                FedExOptionPage2.GET(FedExOptionPage2.Type::Package,Package."No.",0,0,'');
                FedExOptionPage2.MergeOptionPage(FedExOptionPage);
                FedExOptionPage2.MODIFY(TRUE);
              END;
              IF FedExOptionPageExt.GET(Type + 2,"No.",0,0) THEN BEGIN
                FedExOptionPageExt2.GET(FedExOptionPageExt2.Type::Package,Package."No.",0,0,'');
                FedExOptionPageExt2.MergeOptionPageExt(FedExOptionPageExt);
                FedExOptionPageExt2.MODIFY(TRUE);
              END;
            END;
          ShippingAgent."Shipper Type"::LTL:
            IF LTLOptionPage.GET(Type + 2,"No.",0,0) THEN BEGIN
              LTLOptionPage2.GET(LTLOptionPage2.Type::Package,Package."No.",0,0,'');
              LTLOptionPage2.MergeOptionPage(LTLOptionPage);
              LTLOptionPage2.MODIFY(TRUE);
            END;
          ShippingAgent."Shipper Type"::Generic:
            IF GenericOptionPage.GET(Type + 2,"No.",0,0) THEN BEGIN
              GenericOptionPage2.GET(GenericOptionPage2.Type::Package,Package."No.",0,0,'');
              GenericOptionPage2.MergeOptionPage(GenericOptionPage);
              GenericOptionPage2.MODIFY(TRUE);
            END;
          ShippingAgent."Shipper Type"::"4":
            IF USPSOptionPage.GET(Type + 2,"No.",0,0) THEN BEGIN
              USPSOptionPage2.GET(USPSOptionPage2.Type::Package,Package."No.",0,0,'');
              USPSOptionPage2.MergeOptionPage(USPSOptionPage);
              USPSOptionPage2.MODIFY(TRUE);
            END;
          ShippingAgent."Shipper Type"::USPostal:
            IF USPostalOptionPage.GET(Type + 2,"No.",0,0) THEN BEGIN
              USPostalOptionPage2.GET(USPostalOptionPage2.Type::Package,Package."No.",0,0,'');
              USPostalOptionPage2.MergeOptionPage(USPostalOptionPage);
              USPostalOptionPage2.MODIFY(TRUE);
            END;
          ShippingAgent."Shipper Type"::"8":
            IF RatingOptionPage.GET(Type + 2,"No.",0,0) THEN BEGIN
              RatingOptionPage2.GET(RatingOptionPage2.Type::Package,Package."No.",0,0,'');
              RatingOptionPage2.MergeOptionPage(RatingOptionPage);
              RatingOptionPage2.MODIFY(TRUE);
            END;
          // >> ECS
          ShippingAgent."Shipper Type"::Extended:
            ECPackageLineUpdateOptionPage(CurrentPackageLine, Package);
          // << ECS
        END;
      END;
    END;

    PROCEDURE PackageLineUpdateHazMatOption@1240020000(VAR CurrentPackageLine@1240030000 : Record 14000702;Package@1240030003 : Record 14000701;ShippingAgent@1240030001 : Record 291);
    VAR
      UPSOptionPage2@1240030012 : Record 14000761;
      FedExOptionPage2@1240030010 : Record 14000781;
      FedExOptionPageExt2@1240020000 : Record 14000793;
      LTLOptionPage2@1240030008 : Record 14000801;
      GenericOptionPage2@1240030006 : Record 14000861;
      USPSOptionPage2@1240030004 : Record 14000881;
      USPostalOptionPage2@1240030007 : Record 14050501;
      RatingOptionPage2@1240030005 : Record 14050451;
    BEGIN
      WITH CurrentPackageLine DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            IF UPSOptionPage.GET(Type + 2,"No.",0,0) THEN BEGIN
              UPSOptionPage2.GET(UPSOptionPage2.Type::Package,Package."No.",0,0,'');
              UPSOptionPage2.MODIFY(TRUE);
            END;
          ShippingAgent."Shipper Type"::FEDEX:
            IF FedExOptionPage.GET(FedExOptionPage.Type::Package,Package."No.",0,0,'') THEN BEGIN
              FedExOptionPage2.GET(FedExOptionPage2.Type::Package,Package."No.",0,0,'');
              FedExOptionPageExt2.GET(FedExOptionPage2.Type::Package,Package."No.",0,0,'');
              FedExOptionPage2.PackageHazMatInformation(
                FedExOptionPage2,FedExOptionPageExt2,CurrentPackageLine);
              FedExOptionPage2.MODIFY(TRUE);
            END;
          ShippingAgent."Shipper Type"::LTL:
            IF LTLOptionPage.GET(Type + 2,"No.",0,0) THEN BEGIN
              LTLOptionPage2.GET(LTLOptionPage2.Type::Package,Package."No.",0,0,'');
              LTLOptionPage2.MODIFY(TRUE);
            END;
          ShippingAgent."Shipper Type"::Generic:
            IF GenericOptionPage.GET(Type + 2,"No.",0,0) THEN BEGIN
              GenericOptionPage2.GET(GenericOptionPage2.Type::Package,Package."No.",0,0,'');
              GenericOptionPage2.MODIFY(TRUE);
            END;
          ShippingAgent."Shipper Type"::"4":
            IF USPSOptionPage.GET(Type + 2,"No.",0,0) THEN BEGIN
              USPSOptionPage2.GET(USPSOptionPage2.Type::Package,Package."No.",0,0,'');
              USPSOptionPage2.MODIFY(TRUE);
            END;
          ShippingAgent."Shipper Type"::USPostal:
            IF USPostalOptionPage.GET(Type + 2,"No.",0,0) THEN BEGIN
              USPostalOptionPage2.GET(USPostalOptionPage2.Type::Package,Package."No.",0,0,'');
              USPostalOptionPage2.MODIFY(TRUE);
            END;
          ShippingAgent."Shipper Type"::"8":
            IF RatingOptionPage.GET(Type + 2,"No.",0,0) THEN BEGIN
              RatingOptionPage2.GET(RatingOptionPage2.Type::Package,Package."No.",0,0,'');
              RatingOptionPage2.MODIFY(TRUE);
            END;
        END;
      END;
    END;

    PROCEDURE PackingStationGetCODRule@3(PackingStation@1240030008 : Record 14000709;ShippingAgent@1240030000 : Record 291;ShippingSetup@1240030009 : Record 14000707) : Integer;
    VAR
      CarrierPackingStation@1240030010 : Record 14000729;
      UPSShippingAgentAccount@1240030001 : Record 14000770;
      UPSlinkShippingAgentAccount@1240030007 : Record 14050005;
      FedExShippingAgentAccount@1240030002 : Record 14000788;
      LTLShippingAgentAccount@1240030003 : Record 14000803;
      GenericShippingAgentAccount@1240030004 : Record 14000863;
      USPSShippingAgentAccount@1240030005 : Record 14000883;
    BEGIN
      CarrierPackingStation.GetPackingStation(PackingStation);

      CASE ShippingAgent."Shipper Type" OF
        ShippingAgent."Shipper Type"::UPS:
          BEGIN
            CarrierPackingStation.TESTFIELD("UPS Shipping Agent Account No.");
            IF ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::HMU THEN BEGIN
              UPSShippingAgentAccount.GET(CarrierPackingStation."UPS Shipping Agent Account No.");
              EXIT(UPSShippingAgentAccount."COD Rule");
            END ELSE BEGIN
              UPSlinkShippingAgentAccount.GET(CarrierPackingStation."UPS Shipping Agent Account No.");
              EXIT(UPSlinkShippingAgentAccount."COD Rule");
            END;
          END;
        ShippingAgent."Shipper Type"::FEDEX:
          BEGIN
            CarrierPackingStation.TESTFIELD("FedEx Shipping Agent Acc. No.");
            FedExShippingAgentAccount.GET(CarrierPackingStation."FedEx Shipping Agent Acc. No.");
            EXIT(FedExShippingAgentAccount."COD Rule");
          END;
        ShippingAgent."Shipper Type"::LTL:
          BEGIN
            ShippingAgent.TESTFIELD("LTL Shipping Agent Account No.");
            LTLShippingAgentAccount.GET(ShippingAgent."LTL Shipping Agent Account No.");
            EXIT(LTLShippingAgentAccount."COD Rule");
          END;
        ShippingAgent."Shipper Type"::Generic:
          BEGIN
            CarrierPackingStation.TESTFIELD("Generic Shipping Agent Acc. No");
            GenericShippingAgentAccount.GET(CarrierPackingStation."Generic Shipping Agent Acc. No");
            EXIT(GenericShippingAgentAccount."COD Rule");
          END;
        ShippingAgent."Shipper Type"::"4":
          BEGIN
            CarrierPackingStation.TESTFIELD("USPS Shipping Agent Acc. No");
            USPSShippingAgentAccount.GET(CarrierPackingStation."USPS Shipping Agent Acc. No");
            EXIT(USPSShippingAgentAccount."COD Rule");
          END;
        ShippingAgent."Shipper Type"::USPostal:
          BEGIN
            CarrierPackingStation.TESTFIELD("USPostal Shipping Agent Acc No");
            USPostalShippingAgentAccount.GET(CarrierPackingStation."USPostal Shipping Agent Acc No");
            EXIT(USPostalShippingAgentAccount."COD Rule");
          END;
        ShippingAgent."Shipper Type"::"8":
          BEGIN
            CarrierPackingStation.TESTFIELD("Rating Shipping Agent Acc. No");
            RatingShippingAgentAccount.GET(CarrierPackingStation."Rating Shipping Agent Acc. No");
            EXIT(RatingShippingAgentAccount."COD Rule");
          END;
        ELSE BEGIN
          EXIT(ShippingSetup."COD Rule");
        END;
      END;
    END;

    PROCEDURE PackStationGetAlwaysConfCODAmt@4(PackingStation@1240030008 : Record 14000709;ShippingAgent@1240030000 : Record 291;ShippingSetup@1240030009 : Record 14000707) : Boolean;
    VAR
      CarrierPackingStation@1240030010 : Record 14000729;
      UPSShippingAgentAccount@1240030001 : Record 14000770;
      UPSlinkShippingAgentAccount@1240030007 : Record 14050005;
      FedExShippingAgentAccount@1240030002 : Record 14000788;
      LTLShippingAgentAccount@1240030003 : Record 14000803;
      GenericShippingAgentAccount@1240030004 : Record 14000863;
      USPSShippingAgentAccount@1240030005 : Record 14000883;
      AlwaysConfirmCOD@1240020000 : Boolean;
    BEGIN
      CarrierPackingStation.GetPackingStation(PackingStation);

      CASE ShippingAgent."Shipper Type" OF
        ShippingAgent."Shipper Type"::UPS:
          BEGIN
            CarrierPackingStation.TESTFIELD("UPS Shipping Agent Account No.");
            IF ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::HMU THEN BEGIN
              UPSShippingAgentAccount.GET(CarrierPackingStation."UPS Shipping Agent Account No.");
              EXIT(UPSShippingAgentAccount."Always Confirm COD Amount");
            END ELSE BEGIN
              UPSlinkShippingAgentAccount.GET(CarrierPackingStation."UPS Shipping Agent Account No.");
              EXIT(UPSlinkShippingAgentAccount."Always Confirm COD Amount");
            END;
          END;
        ShippingAgent."Shipper Type"::FEDEX:
          BEGIN
            CarrierPackingStation.TESTFIELD("FedEx Shipping Agent Acc. No.");
            FedExShippingAgentAccount.GET(CarrierPackingStation."FedEx Shipping Agent Acc. No.");
            EXIT(FedExShippingAgentAccount."Always Confirm COD Amount");
          END;
        ShippingAgent."Shipper Type"::LTL:
          BEGIN
            ShippingAgent.TESTFIELD("LTL Shipping Agent Account No.");
            LTLShippingAgentAccount.GET(ShippingAgent."LTL Shipping Agent Account No.");
            EXIT(LTLShippingAgentAccount."Always Confirm COD Amount");
          END;
        ShippingAgent."Shipper Type"::Generic:
          BEGIN
            CarrierPackingStation.TESTFIELD("Generic Shipping Agent Acc. No");
            GenericShippingAgentAccount.GET(CarrierPackingStation."Generic Shipping Agent Acc. No");
            EXIT(GenericShippingAgentAccount."Always Confirm COD Amount");
          END;
        ShippingAgent."Shipper Type"::"4":
          BEGIN
            CarrierPackingStation.TESTFIELD("USPS Shipping Agent Acc. No");
            USPSShippingAgentAccount.GET(CarrierPackingStation."USPS Shipping Agent Acc. No");
            EXIT(USPSShippingAgentAccount."Always Confirm COD Amount");
          END;
        ShippingAgent."Shipper Type"::USPostal:
          BEGIN
            CarrierPackingStation.TESTFIELD("USPostal Shipping Agent Acc No");
            USPostalShippingAgentAccount.GET(CarrierPackingStation."USPostal Shipping Agent Acc No");
            EXIT(USPostalShippingAgentAccount."Always Confirm COD Amount");
          END;
        ShippingAgent."Shipper Type"::"8":
          BEGIN
            CarrierPackingStation.TESTFIELD("Rating Shipping Agent Acc. No");
            RatingShippingAgentAccount.GET(CarrierPackingStation."Rating Shipping Agent Acc. No");
            EXIT(RatingShippingAgentAccount."Always Confirm COD Amount");
          END;
        // >> ECS
        ShippingAgent."Shipper Type"::Extended:
          BEGIN
            ECGetAlwaysConfirmCOD(ShippingAgent, CarrierPackingStation, AlwaysConfirmCOD);
            EXIT(AlwaysConfirmCOD);
          END;
        // << ECS
        ELSE BEGIN
          EXIT(ShippingSetup."Always Confirm COD Amount");
        END;
      END;
    END;

    PROCEDURE ManifestHeaderValidateAcctNo@1240030007(VAR CurrentManifestHeader@1240030000 : Record 14000712;ShippingAgent@1240030001 : Record 291;ShippingSetup@1240030002 : Record 14000707);
    VAR
      UPSShippingAgentAccount@1240030009 : Record 14000770;
      UPSlinkShippingAgentAccount@1240030008 : Record 14050005;
      FedExShippingAgentAccount@1240030007 : Record 14000788;
      LTLShippingAgentAccount@1240030006 : Record 14000803;
      GenericShippingAgentAccount@1240030005 : Record 14000863;
      USPSShippingAgentAccount@1240030004 : Record 14000883;
    BEGIN
      WITH CurrentManifestHeader DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            BEGIN
              IF ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::HMU THEN
                UPSShippingAgentAccount.GET("Shipping Agent Account")
              ELSE
                UPSlinkShippingAgentAccount.GET("Shipping Agent Account");
            END;
          ShippingAgent."Shipper Type"::FEDEX:
            FedExShippingAgentAccount.GET("Shipping Agent Account");
          ShippingAgent."Shipper Type"::LTL:
            LTLShippingAgentAccount.GET("Shipping Agent Account");
          ShippingAgent."Shipper Type"::"4":
            USPSShippingAgentAccount.GET("Shipping Agent Account");
          ShippingAgent."Shipper Type"::Generic:
            GenericShippingAgentAccount.GET("Shipping Agent Account");
          ShippingAgent."Shipper Type"::USPostal:
            USPostalShippingAgentAccount.GET("Shipping Agent Account");
          ShippingAgent."Shipper Type"::"8":
            RatingShippingAgentAccount.GET("Shipping Agent Account");
        END;
      END;
    END;

    PROCEDURE ManifestHeaderLookupAccountNo@1240030008(VAR CurrentManifestHeader@1240030002 : Record 14000712;ShippingAgent@1240030001 : Record 291;ShippingSetup@1240030000 : Record 14000707);
    VAR
      AccountNo@1240030003 : Code[20];
    BEGIN
      AccountNo := LookupAccountNo(ShippingAgent,ShippingSetup);
      IF AccountNo <> '' THEN
        CurrentManifestHeader.VALIDATE("Shipping Agent Account",AccountNo);
    END;

    PROCEDURE ShippingAccountTestAccountNo@1240030009(VAR CurrentShippingAccount@1240030000 : Record 14000714;ShippingAgent@1240030001 : Record 291;ShippingSetup@1240030002 : Record 14000707;AccountNo@1240030003 : Code[20]);
    BEGIN
      CASE ShippingAgent."Shipper Type" OF
        ShippingAgent."Shipper Type"::UPS:
          BEGIN
            IF ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::HMU THEN
              UPSShippingAgentAccount.TestAccountNo(AccountNo)
            ELSE
              UPSlinkShippingAgentAccount.TestAccountNo(AccountNo);
          END;
        ShippingAgent."Shipper Type"::FEDEX:
          FedExShippingAgentAccount.TestAccountNo(AccountNo);
      END;
    END;

    PROCEDURE ShipBillReconHdrValidateAcctNo@1240030010(VAR CurrentShippingBillReconHeader@1240030000 : Record 14000751;ShippingAgent@1240030001 : Record 291;ShippingSetup@1240030002 : Record 14000707);
    BEGIN
      WITH CurrentShippingBillReconHeader DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            BEGIN
              IF ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::HMU THEN
                UPSShippingAgentAccount.GET("Shipping Agent Account No.")
              ELSE
                UPSlinkShippingAgentAccount.GET("Shipping Agent Account No.");
            END;
          ShippingAgent."Shipper Type"::FEDEX:
            FedExShippingAgentAccount.GET("Shipping Agent Account No.");
          ShippingAgent."Shipper Type"::LTL:
            LTLShippingAgentAccount.GET("Shipping Agent Account No.");
          ShippingAgent."Shipper Type"::"4":
            USPSShippingAgentAccount.GET("Shipping Agent Account No.");
          ShippingAgent."Shipper Type"::Generic:
            GenericShippingAgentAccount.GET("Shipping Agent Account No.");
          ShippingAgent."Shipper Type"::USPostal:
            USPostalShippingAgentAccount.GET("Shipping Agent Account No.");
          ShippingAgent."Shipper Type"::"8":
            RatingShippingAgentAccount.GET("Shipping Agent Account No.");
        END;
      END;
    END;

    PROCEDURE ShipBillReconHdrLookupAcctNo@1240030011(VAR CurrentShippingBillReconHeader@1240030002 : Record 14000751;ShippingAgent@1240030001 : Record 291;ShippingSetup@1240030000 : Record 14000707);
    VAR
      AccountNo@1240030003 : Code[20];
    BEGIN
      AccountNo := LookupAccountNo(ShippingAgent,ShippingSetup);
      IF AccountNo <> '' THEN
        CurrentShippingBillReconHeader.VALIDATE("Shipping Agent Account No.",AccountNo);
    END;

    PROCEDURE ShipBillReconHdrLookupVendorNo@1240030012(VAR CurrentShippingBillReconHeader@1240030002 : Record 14000751;ShippingAgent@1240030001 : Record 291;ShippingSetup@1240030000 : Record 14000707;VAR VendorNo@1240030003 : Code[20];VAR AccountNo@1240030004 : Code[20]);
    BEGIN
      WITH CurrentShippingBillReconHeader DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            BEGIN
              IF ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::HMU THEN BEGIN
                UPSShippingAgentAccount.GET("Shipping Agent Account No.");
                UPSShippingAgentAccount.TESTFIELD("Vendor No.");
                UPSShippingAgentAccount.TESTFIELD("Shipping Bill Account No.");
                VendorNo := UPSShippingAgentAccount."Vendor No.";
                AccountNo := UPSShippingAgentAccount."Shipping Bill Account No.";
              END ELSE BEGIN
                UPSlinkShippingAgentAccount.GET("Shipping Agent Account No.");
                UPSlinkShippingAgentAccount.TESTFIELD("Vendor No.");
                UPSlinkShippingAgentAccount.TESTFIELD("Shipping Bill Account No.");
                VendorNo := UPSlinkShippingAgentAccount."Vendor No.";
                AccountNo := UPSlinkShippingAgentAccount."Shipping Bill Account No.";
              END;
            END;
          ShippingAgent."Shipper Type"::FEDEX:
            BEGIN
              FedExShippingAgentAccount.GET("Shipping Agent Account No.");
              FedExShippingAgentAccount.TESTFIELD("Vendor No.");
              FedExShippingAgentAccount.TESTFIELD("Shipping Bill Account No.");
              VendorNo := FedExShippingAgentAccount."Vendor No.";
              AccountNo := FedExShippingAgentAccount."Shipping Bill Account No.";
            END;
          ShippingAgent."Shipper Type"::LTL:
            BEGIN
              LTLShippingAgentAccount.GET("Shipping Agent Account No.");
              LTLShippingAgentAccount.TESTFIELD("Vendor No.");
              LTLShippingAgentAccount.TESTFIELD("Shipping Bill Account No.");
              VendorNo := LTLShippingAgentAccount."Vendor No.";
              AccountNo := LTLShippingAgentAccount."Shipping Bill Account No.";
            END;
          ShippingAgent."Shipper Type"::"4":
            BEGIN
              USPSShippingAgentAccount.GET("Shipping Agent Account No.");
              USPSShippingAgentAccount.TESTFIELD("Vendor No.");
              USPSShippingAgentAccount.TESTFIELD("Shipping Bill Account No.");
              VendorNo := USPSShippingAgentAccount."Vendor No.";
              AccountNo := USPSShippingAgentAccount."Shipping Bill Account No.";
            END;
          ShippingAgent."Shipper Type"::Generic:
            BEGIN
              GenericShippingAgentAccount.GET("Shipping Agent Account No.");
              GenericShippingAgentAccount.TESTFIELD("Vendor No.");
              GenericShippingAgentAccount.TESTFIELD("Shipping Bill Account No.");
              VendorNo := GenericShippingAgentAccount."Vendor No.";
              AccountNo := GenericShippingAgentAccount."Shipping Bill Account No.";
            END;
          ShippingAgent."Shipper Type"::USPostal:
            BEGIN
              USPostalShippingAgentAccount.GET("Shipping Agent Account No.");
              USPostalShippingAgentAccount.TESTFIELD("Vendor No.");
              USPostalShippingAgentAccount.TESTFIELD("Shipping Bill Account No.");
              VendorNo := USPostalShippingAgentAccount."Vendor No.";
              AccountNo := USPostalShippingAgentAccount."Shipping Bill Account No.";
            END;
          ShippingAgent."Shipper Type"::"8":
            BEGIN
              RatingShippingAgentAccount.GET("Shipping Agent Account No.");
              RatingShippingAgentAccount.TESTFIELD("Vendor No.");
              RatingShippingAgentAccount.TESTFIELD("Shipping Bill Account No.");
              VendorNo := RatingShippingAgentAccount."Vendor No.";
              AccountNo := RatingShippingAgentAccount."Shipping Bill Account No.";
            END;
        END;
      END;
    END;

    PROCEDURE PostShipBillRecHdrLookupAcctNo@1240030013(VAR CurrentPostedShipBillRecHeader@1240030002 : Record 14000753;ShippingAgent@1240030001 : Record 291;ShippingSetup@1240030000 : Record 14000707);
    BEGIN
      LookupAccountNo(ShippingAgent,ShippingSetup);
    END;

    PROCEDURE BillOfLadingValidateShipAgent@1240030014(VAR CurrentBillOfLading@1240030000 : Record 14000822;PackingStation@1240030003 : Record 14000709;ShippingAgent@1240030001 : Record 291);
    BEGIN
      CurrentBillOfLading.VALIDATE(
        "Shipping Agent Account No.",GetAccountNo(PackingStation,ShippingAgent));
    END;

    PROCEDURE BillOfLadingValidateAcctNo@1240030015(VAR CurrentBillOfLading@1240030002 : Record 14000822;ShippingAgent@1240030000 : Record 291;ShippingSetup@1240030003 : Record 14000707);
    BEGIN
      WITH CurrentBillOfLading DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            BEGIN
              IF ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::HMU THEN BEGIN
                UPSShippingAgentAccount.GET("Shipping Agent Account No.");
                "COD Cashiers Check" := UPSShippingAgentAccount."COD Guaranteed Funds Only";
                "Add Shipping Charge to COD Amt" :=
                  UPSShippingAgentAccount."Add Shipping Charge to COD Amt";
                "Insure Through Shipping Agent" :=
                  CalcInsureThroughShippingAgent(
                    CurrentBillOfLading,
                    UPSShippingAgentAccount."Insure Through Carrier",
                    UPSShippingAgentAccount."Insured Third Party/Collect");
              END ELSE BEGIN
                UPSlinkShippingAgentAccount.GET("Shipping Agent Account No.");
                "COD Cashiers Check" := UPSlinkShippingAgentAccount."COD Guaranteed Funds Only";
                "Add Shipping Charge to COD Amt" :=
                  UPSlinkShippingAgentAccount."Add Shipping Charge to COD Amt";
                "Insure Through Shipping Agent" :=
                  CalcInsureThroughShippingAgent(
                    CurrentBillOfLading,
                    UPSlinkShippingAgentAccount."Insure Through Carrier",
                    UPSlinkShippingAgentAccount."Insured Third Party/Collect");
              END;
            END;
          ShippingAgent."Shipper Type"::FEDEX:
            BEGIN
              FedExShippingAgentAccount.GET("Shipping Agent Account No.");
              "COD Cashiers Check" := FedExShippingAgentAccount."COD Guaranteed Funds Only";
              "Add Shipping Charge to COD Amt" :=
                FedExShippingAgentAccount."Add Shipping Charge to COD Amt";
              "Insure Through Shipping Agent" :=
                CalcInsureThroughShippingAgent(
                  CurrentBillOfLading,
                  FedExShippingAgentAccount."Insure Through Carrier",
                  FedExShippingAgentAccount."Insured Third Party/Collect");
            END;
          ShippingAgent."Shipper Type"::LTL:
            BEGIN
              "Shipping Agent Account No." := ShippingAgent."LTL Shipping Agent Account No.";
              LTLShippingAgentAccount.GET("Shipping Agent Account No.");
              LTLShippingAgentAccount.TESTFIELD("Shipping Agent Code","Shipping Agent Code");
              "COD Cashiers Check" := LTLShippingAgentAccount."COD Guaranteed Funds Only";
              "Add Shipping Charge to COD Amt" :=
                LTLShippingAgentAccount."Add Shipping Charge to COD Amt";
              "Insure Through Shipping Agent" :=
                CalcInsureThroughShippingAgent(
                  CurrentBillOfLading,
                  LTLShippingAgentAccount."Insure Through Carrier",
                  LTLShippingAgentAccount."Insured Third Party/Collect");
            END;
          ShippingAgent."Shipper Type"::Generic:
            BEGIN
              GenericShippingAgentAccount.GET("Shipping Agent Account No.");
              "COD Cashiers Check" := GenericShippingAgentAccount."COD Guaranteed Funds Only";
              "Add Shipping Charge to COD Amt" :=
                GenericShippingAgentAccount."Add Shipping Charge to COD Amt";
              "Insure Through Shipping Agent" :=
                CalcInsureThroughShippingAgent(
                  CurrentBillOfLading,
                  GenericShippingAgentAccount."Insure Through Carrier",
                  GenericShippingAgentAccount."Insured Third Party/Collect");
            END;
          ShippingAgent."Shipper Type"::"4":
            BEGIN
              USPSShippingAgentAccount.GET("Shipping Agent Account No.");
              "COD Cashiers Check" := USPSShippingAgentAccount."COD Guaranteed Funds Only";
              "Add Shipping Charge to COD Amt" :=
                USPSShippingAgentAccount."Add Shipping Charge to COD Amt";
              "Insure Through Shipping Agent" :=
                CalcInsureThroughShippingAgent(
                  CurrentBillOfLading,
                  USPSShippingAgentAccount."Insure Through Carrier",
                  USPSShippingAgentAccount."Insured Third Party/Collect");
            END;
          ShippingAgent."Shipper Type"::USPostal:
            BEGIN
              USPostalShippingAgentAccount.GET("Shipping Agent Account No.");
              "COD Cashiers Check" := USPostalShippingAgentAccount."COD Guaranteed Funds Only";
              "Add Shipping Charge to COD Amt" :=
                USPostalShippingAgentAccount."Add Shipping Charge to COD Amt";
              "Insure Through Shipping Agent" :=
                CalcInsureThroughShippingAgent(
                  CurrentBillOfLading,
                  USPostalShippingAgentAccount."Insure Through Carrier",
                  USPostalShippingAgentAccount."Insured Third Party/Collect");
            END;
          ShippingAgent."Shipper Type"::"8":
            BEGIN
              RatingShippingAgentAccount.GET("Shipping Agent Account No.");
              "COD Cashiers Check" := RatingShippingAgentAccount."COD Guaranteed Funds Only";
              "Add Shipping Charge to COD Amt" :=
                RatingShippingAgentAccount."Add Shipping Charge to COD Amt";
              "Insure Through Shipping Agent" :=
                CalcInsureThroughShippingAgent(
                  CurrentBillOfLading,
                  RatingShippingAgentAccount."Insure Through Carrier",
                  RatingShippingAgentAccount."Insured Third Party/Collect");
            END;
          ELSE BEGIN
            "COD Cashiers Check" := ShippingSetup."COD Guaranteed Funds Only";
            "Add Shipping Charge to COD Amt" := ShippingSetup."Add Shipping Charge to COD Amt";
            "Insure Through Shipping Agent" :=
              CalcInsureThroughShippingAgent(
                CurrentBillOfLading,
                ShippingSetup."Insure Through Carrier",ShippingSetup."Insured Third Party/Collect");
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CalcInsureThroughShippingAgent@44(VAR CurrentBillOfLading@1240030002 : Record 14000822;InsuredStandard@1240030000 : Boolean;InsuredThridParty@1240030001 : Boolean) : Boolean;
    BEGIN
      WITH CurrentBillOfLading DO BEGIN
        CASE "Shipping Insurance" OF
          "Shipping Insurance"::" ":
            IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
              EXIT(InsuredStandard)
            ELSE
              EXIT(InsuredThridParty);
          "Shipping Insurance"::Never:
            EXIT(FALSE);
          "Shipping Insurance"::Always:
            EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE BillOfLadingLookupAcctNo@1240030016(VAR CurrentBillOfLading@1240030002 : Record 14000822;ShippingAgent@1240030001 : Record 291;ShippingSetup@1240030000 : Record 14000707);
    VAR
      AccountNo@1240030003 : Code[20];
    BEGIN
      AccountNo := LookupAccountNo(ShippingAgent,ShippingSetup);
      IF AccountNo <> '' THEN
        CurrentBillOfLading.VALIDATE("Shipping Agent Account No.",AccountNo);
    END;

    PROCEDURE BillOfLadingValidateCODPayment@1240030017(VAR CurrentBillOfLading@1240030002 : Record 14000822;PackingStation@1240030003 : Record 14000709;ShippingAgent@1240030001 : Record 291;ShippingSetup@1240030000 : Record 14000707);
    VAR
      CarrierPackingStation@1240030004 : Record 14000729;
    BEGIN
      WITH CurrentBillOfLading DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            BEGIN
              TESTFIELD("Shipping Agent Account No.");
              IF ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::HMU THEN BEGIN
                UPSShippingAgentAccount.GET("Shipping Agent Account No.");
                "COD Cashiers Check" := UPSShippingAgentAccount."COD Guaranteed Funds Only";
                "Add Shipping Charge to COD Amt" :=
                  UPSShippingAgentAccount."Add Shipping Charge to COD Amt";
              END ELSE BEGIN
                UPSlinkShippingAgentAccount.GET("Shipping Agent Account No.");
                "COD Cashiers Check" := UPSlinkShippingAgentAccount."COD Guaranteed Funds Only";
                "Add Shipping Charge to COD Amt" :=
                  UPSlinkShippingAgentAccount."Add Shipping Charge to COD Amt";
              END;
            END;
          ShippingAgent."Shipper Type"::FEDEX:
            BEGIN
              TESTFIELD("Shipping Agent Account No.");
              FedExShippingAgentAccount.GET("Shipping Agent Account No.");
              "COD Cashiers Check" := FedExShippingAgentAccount."COD Guaranteed Funds Only";
              "Add Shipping Charge to COD Amt" :=
                FedExShippingAgentAccount."Add Shipping Charge to COD Amt";
            END;
          ShippingAgent."Shipper Type"::LTL:
            BEGIN
              TESTFIELD("Shipping Agent Account No.");
              LTLShippingAgentAccount.GET("Shipping Agent Account No.");
              "COD Cashiers Check" := LTLShippingAgentAccount."COD Guaranteed Funds Only";
              "Add Shipping Charge to COD Amt" :=
                LTLShippingAgentAccount."Add Shipping Charge to COD Amt";
            END;
          ShippingAgent."Shipper Type"::Generic:
            BEGIN
              TESTFIELD("Shipping Agent Account No.");
              GenericShippingAgentAccount.GET("Shipping Agent Account No.");
              "COD Cashiers Check" := GenericShippingAgentAccount."COD Guaranteed Funds Only";
              "Add Shipping Charge to COD Amt" :=
                GenericShippingAgentAccount."Add Shipping Charge to COD Amt";
            END;
          ShippingAgent."Shipper Type"::"4":
            BEGIN
              TESTFIELD("Shipping Agent Account No.");
              USPSShippingAgentAccount.GET("Shipping Agent Account No.");
              "COD Cashiers Check" := USPSShippingAgentAccount."COD Guaranteed Funds Only";
              "Add Shipping Charge to COD Amt" :=
                USPSShippingAgentAccount."Add Shipping Charge to COD Amt";
            END;
          ShippingAgent."Shipper Type"::USPostal:
            BEGIN
              TESTFIELD("Shipping Agent Account No.");
              USPostalShippingAgentAccount.GET("Shipping Agent Account No.");
              "COD Cashiers Check" := USPostalShippingAgentAccount."COD Guaranteed Funds Only";
              "Add Shipping Charge to COD Amt" :=
                USPostalShippingAgentAccount."Add Shipping Charge to COD Amt";
            END;
          ShippingAgent."Shipper Type"::"8":
            BEGIN
              TESTFIELD("Shipping Agent Account No.");
              RatingShippingAgentAccount.GET("Shipping Agent Account No.");
              "COD Cashiers Check" := RatingShippingAgentAccount."COD Guaranteed Funds Only";
              "Add Shipping Charge to COD Amt" :=
                RatingShippingAgentAccount."Add Shipping Charge to COD Amt";
            END;
          ELSE BEGIN
            "COD Cashiers Check" := ShippingSetup."COD Guaranteed Funds Only";
            "Add Shipping Charge to COD Amt" := ShippingSetup."Add Shipping Charge to COD Amt";
          END;
        END;
      END;
    END;

    PROCEDURE BillOfLadingDelShipAgntOptPage@7(VAR CurrentBillOfLading@1240030000 : Record 14000822);
    BEGIN
      DeleteOptionPages(UPSOptionPage.Type::"Bill of Lading",CurrentBillOfLading."No.",0,0,'');
    END;

    PROCEDURE PostCarrierOptionPage@20(CurrentPackage@1000000000 : Record 14000701;ShippingAgent@1240030000 : Record 291);
    VAR
      UPSPostedOptionPage@1240030006 : Record 14000762;
      FedExPostedOptionPage@1240030005 : Record 14000782;
      FedExPostedOptionPageExt@1240020000 : Record 14000794;
      LTLPostedOptionPage@1240030004 : Record 14000802;
      GenericPostedOptionPage@1240030003 : Record 14000862;
      USPSPostedOptionPage@1240030002 : Record 14000882;
      USPostalPostedOptionPage@1240030008 : Record 14050502;
      RatingPostedOptionPage@1240030007 : Record 14050452;
    BEGIN
      WITH CurrentPackage DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            BEGIN
              IF UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.",0,0,'') THEN BEGIN
                UPSOptionPage.DELETE;
                UPSPostedOptionPage.TRANSFERFIELDS(UPSOptionPage);
                UPSPostedOptionPage.INSERT(TRUE);
              END;
            END;
          ShippingAgent."Shipper Type"::FEDEX:
            BEGIN
              IF FedExOptionPage.GET(FedExOptionPage.Type::Package,"No.",0,0,'') THEN BEGIN
                FedExOptionPage.DELETE;
                FedExPostedOptionPage.TRANSFERFIELDS(FedExOptionPage);
                FedExPostedOptionPage.INSERT(TRUE);
              END;
              IF FedExOptionPageExt.GET(FedExOptionPageExt.Type::Package,"No.",0,0,'') THEN BEGIN
                FedExOptionPageExt.DELETE;
                FedExPostedOptionPageExt.TRANSFERFIELDS(FedExOptionPageExt);
                FedExPostedOptionPageExt.INSERT;
              END;
            END;
          ShippingAgent."Shipper Type"::LTL:
            BEGIN
              IF LTLOptionPage.GET(LTLOptionPage.Type::Package,"No.",0,0,'') THEN BEGIN
                LTLOptionPage.DELETE;
                LTLPostedOptionPage.TRANSFERFIELDS(LTLOptionPage);
                LTLPostedOptionPage.INSERT;
              END;
            END;
          ShippingAgent."Shipper Type"::Generic:
            BEGIN
              IF GenericOptionPage.GET(GenericOptionPage.Type::Package,"No.",0,0,'') THEN BEGIN
                GenericOptionPage.DELETE;
                GenericPostedOptionPage.TRANSFERFIELDS(GenericOptionPage);
                GenericPostedOptionPage.INSERT;
              END;
            END;
          ShippingAgent."Shipper Type"::"4":
            BEGIN
              IF USPSOptionPage.GET(USPSOptionPage.Type::Package,"No.",0,0,'') THEN BEGIN
                USPSOptionPage.DELETE;
                USPSPostedOptionPage.TRANSFERFIELDS(USPSOptionPage);
                USPSPostedOptionPage.INSERT;
              END;
            END;
          ShippingAgent."Shipper Type"::USPostal:
            BEGIN
              IF USPostalOptionPage.GET(USPostalOptionPage.Type::Package,"No.",0,0,'') THEN BEGIN
                USPostalOptionPage.DELETE;
                USPostalPostedOptionPage.TRANSFERFIELDS(USPostalOptionPage);
                USPostalPostedOptionPage.INSERT;
              END;
            END;
          ShippingAgent."Shipper Type"::"8":
            BEGIN
              IF RatingOptionPage.GET(RatingOptionPage.Type::Package,"No.",0,0,'') THEN BEGIN
                RatingOptionPage.DELETE;
                RatingPostedOptionPage.TRANSFERFIELDS(RatingOptionPage);
                RatingPostedOptionPage.INSERT;
              END;
            END;
          // >> ECS
          ShippingAgent."Shipper Type"::Extended:
            ECPostCarrierOptionPage(CurrentPackage);
          // << ECS
        END;
      END;
    END;

    PROCEDURE GetShippingCharge@2(VAR CurrentPackage@1000000000 : Record 14000701;ShippingAgent@1240030000 : Record 291);
    BEGIN
      WITH CurrentPackage DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            UPSTransaction.GetShippingCharge(CurrentPackage,TRUE);
          ShippingAgent."Shipper Type"::FEDEX:
            FedExTransaction.GetShippingCharge(CurrentPackage,FALSE);
          ShippingAgent."Shipper Type"::LTL:
            LTLTransaction.GetShippingCharge(CurrentPackage,FALSE);
          ShippingAgent."Shipper Type"::Generic:
            GenericTransaction.GetShippingCharge(CurrentPackage,FALSE);
          ShippingAgent."Shipper Type"::"4":
            USPSTransaction.GetShippingCharge(CurrentPackage,FALSE);
          ShippingAgent."Shipper Type"::USPostal:
            USPostalTransaction.GetShippingCharge(CurrentPackage,FALSE);
          ShippingAgent."Shipper Type"::"8":
            RatingTransaction.GetShippingCharge(CurrentPackage,FALSE);
          // >> ECS
          ShippingAgent."Shipper Type"::Extended:
            ECGetShippingCharge(CurrentPackage);
          // << ECS
        END;
      END;
    END;

    PROCEDURE RateShop@16(VAR RateShopHeader@1240030003 : Record 14000741;VAR RateShopLine@1240030002 : Record 14000742;ShippingAgent@1240030001 : Record 291;ShippingAgentService@1240030000 : Record 14000708);
    BEGIN
      CASE ShippingAgent."Shipper Type" OF
        ShippingAgent."Shipper Type"::UPS:
          UPSTransaction.RateShop(RateShopHeader,RateShopLine,ShippingAgentService);
        ShippingAgent."Shipper Type"::FEDEX:
          FedExTransaction.RateShop(RateShopHeader,RateShopLine,ShippingAgentService);
        ShippingAgent."Shipper Type"::LTL:
          LTLTransaction.RateShop(RateShopHeader,RateShopLine,ShippingAgentService);
        ShippingAgent."Shipper Type"::Generic:
          GenericTransaction.RateShop(RateShopHeader,RateShopLine,ShippingAgentService);
        ShippingAgent."Shipper Type"::"4":
          USPSTransaction.RateShop(RateShopHeader,RateShopLine,ShippingAgentService);
        ShippingAgent."Shipper Type"::USPostal:
          USPostalTransaction.RateShop(RateShopHeader,RateShopLine,ShippingAgentService);
        ShippingAgent."Shipper Type"::"8":
          RatingTransaction.RateShop(RateShopHeader,RateShopLine,ShippingAgentService);
      END;
    END;

    PROCEDURE ClosePackage@18(VAR CurrentPackage@1240030000 : Record 14000701;VAR MultiDocPackageTmp@1240030002 : TEMPORARY Record 14000701;ShippingAgent@1240030003 : Record 291;PrintLabel@1240030001 : Boolean);
    BEGIN
      WITH CurrentPackage DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            UPSTransaction.ClosePackage(CurrentPackage,MultiDocPackageTmp,ShippingAgent,PrintLabel);
          ShippingAgent."Shipper Type"::FEDEX:
            FedExTransaction.ClosePackage(CurrentPackage,MultiDocPackageTmp,ShippingAgent,PrintLabel);
          ShippingAgent."Shipper Type"::LTL:
            LTLTransaction.ClosePackage(CurrentPackage,MultiDocPackageTmp,ShippingAgent,PrintLabel);
          ShippingAgent."Shipper Type"::Generic:
            GenericTransaction.ClosePackage(CurrentPackage,MultiDocPackageTmp,ShippingAgent,PrintLabel);
          ShippingAgent."Shipper Type"::"4":
            USPSTransaction.ClosePackage(CurrentPackage,MultiDocPackageTmp,ShippingAgent,PrintLabel);
          ShippingAgent."Shipper Type"::USPostal:
            USPostalTransaction.ClosePackage(CurrentPackage,MultiDocPackageTmp,ShippingAgent,PrintLabel);
          ShippingAgent."Shipper Type"::"8":
            RatingTransaction.ClosePackage(CurrentPackage,MultiDocPackageTmp,ShippingAgent,PrintLabel);
          // >> ECS
          ShippingAgent."Shipper Type"::Extended:
            ECClosePackage(CurrentPackage,MultiDocPackageTmp,PrintLabel);
          // << ECS
        END;
      END;
    END;

    PROCEDURE OpenPackage@19(VAR CurrentPackage@1000000000 : Record 14000701;ShippingAgent@1240030000 : Record 291);
    BEGIN
      WITH CurrentPackage DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            UPSTransaction.OpenPackage(CurrentPackage);
          ShippingAgent."Shipper Type"::FEDEX:
            FedExTransaction.OpenPackage(CurrentPackage);
          ShippingAgent."Shipper Type"::LTL:
            LTLTransaction.OpenPackage(CurrentPackage);
          ShippingAgent."Shipper Type"::Generic:
            GenericTransaction.OpenPackage(CurrentPackage);
          ShippingAgent."Shipper Type"::"4":
            USPSTransaction.OpenPackage(CurrentPackage);
          ShippingAgent."Shipper Type"::USPostal:
            USPostalTransaction.OpenPackage(CurrentPackage);
          ShippingAgent."Shipper Type"::"8":
            RatingTransaction.OpenPackage(CurrentPackage);
          // >> ECS
          ShippingAgent."Shipper Type"::Extended:
            ECOpenPackage(CurrentPackage);
          // << ECS
        END;
      END;
    END;

    PROCEDURE ReOpenPostedPackage@38(VAR CurrentPostedPackage@1000000000 : Record 14000704;ShippingAgent@1240030000 : Record 291);
    BEGIN
      WITH CurrentPostedPackage DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            UPSTransaction.ReOpenPostedPackage(CurrentPostedPackage);
          ShippingAgent."Shipper Type"::FEDEX:
            FedExTransaction.ReOpenPostedPackage(CurrentPostedPackage);
          ShippingAgent."Shipper Type"::LTL:
            LTLTransaction.ReOpenPostedPackage(CurrentPostedPackage);
          ShippingAgent."Shipper Type"::Generic:
            GenericTransaction.ReOpenPostedPackage(CurrentPostedPackage);
          ShippingAgent."Shipper Type"::"4":
            USPSTransaction.ReOpenPostedPackage(CurrentPostedPackage);
          ShippingAgent."Shipper Type"::USPostal:
            USPostalTransaction.ReOpenPostedPackage(CurrentPostedPackage);
          ShippingAgent."Shipper Type"::"8":
            RatingTransaction.ReOpenPostedPackage(CurrentPostedPackage);
          // >> ECS
          ShippingAgent."Shipper Type"::Extended:
            ECReopenPostedPackage(CurrentPostedPackage);
          // << ECS
        END;
      END;
    END;

    PROCEDURE PrintShippingLabel@22(VAR CurrentPackage@1000000000 : Record 14000701;ShippingAgent@1240030000 : Record 291);
    BEGIN
      WITH CurrentPackage DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            UPSTransaction.PrintPackageLabel(CurrentPackage);
          ShippingAgent."Shipper Type"::FEDEX:
            FedExTransaction.PrintPackageLabel(CurrentPackage);
          ShippingAgent."Shipper Type"::LTL:
            LTLTransaction.PrintPackageLabel(CurrentPackage);
          ShippingAgent."Shipper Type"::Generic:
            GenericTransaction.PrintPackageLabel(CurrentPackage);
          ShippingAgent."Shipper Type"::"4":
            USPSTransaction.PrintPackageLabel(CurrentPackage);
          ShippingAgent."Shipper Type"::USPostal:
            USPostalTransaction.PrintPackageLabel(CurrentPackage,TRUE);
          ShippingAgent."Shipper Type"::"8":
            RatingTransaction.PrintPackageLabel(CurrentPackage);
          // >> ECS
          ShippingAgent."Shipper Type"::Extended:
            ECPrintShippingLabel(CurrentPackage);
          // << ECS
        END;
      END;
    END;

    PROCEDURE RePrintShippingLabel@23(VAR CurrentPostedPackage@1000000000 : Record 14000704;ShippingAgent@1240030000 : Record 291);
    BEGIN
      WITH CurrentPostedPackage DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            UPSTransaction.RePrintPostedPackageLabel(CurrentPostedPackage);
          ShippingAgent."Shipper Type"::FEDEX:
            FedExTransaction.RePrintPostedPackageLabel(CurrentPostedPackage);
          ShippingAgent."Shipper Type"::LTL:
            LTLTransaction.RePrintPostedPackageLabel(CurrentPostedPackage);
          ShippingAgent."Shipper Type"::Generic:
            GenericTransaction.RePrintPostedPackageLabel(CurrentPostedPackage);
          ShippingAgent."Shipper Type"::"4":
            USPSTransaction.RePrintPostedPackageLabel(CurrentPostedPackage);
          ShippingAgent."Shipper Type"::USPostal:
            USPostalTransaction.RePrintPostedPackageLabel(CurrentPostedPackage);
          ShippingAgent."Shipper Type"::"8":
            RatingTransaction.RePrintPostedPackageLabel(CurrentPostedPackage);
        END;
      END;
    END;

    PROCEDURE PrintCODLabels@36(VAR CurrentPackage@1240030001 : Record 14000701;ShippingAgent@1240030000 : Record 291);
    BEGIN
      CASE ShippingAgent."Shipper Type" OF
        ShippingAgent."Shipper Type"::UPS:
          UPSTransaction.PrintCODLabel(CurrentPackage);
      END;
    END;

    PROCEDURE ShowPackageOptions@1240030023(CurrentPackage@1000000000 : Record 14000701;ShippingAgent@1240030000 : Record 291);
    BEGIN
      WITH CurrentPackage DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            BEGIN
              //<TPZ1407>
              //IF "Multi Document Package" THEN
              IF ("Multi Document Package") AND ("Original Package No." <> '') THEN
              //</TPZ1407>
                UPSOptionPage.GET(UPSOptionPage.Type::Package,"Original Package No.",
                0,0,'')
              ELSE
                UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.",0,0,'');
              UPSOptionPage.SETRECFILTER;
              PAGE.RUNMODAL(PAGE::"UPS Option Page Card",UPSOptionPage);
            END;
          ShippingAgent."Shipper Type"::FEDEX:
            BEGIN
              FedExOptionPage.GET(FedExOptionPage.Type::Package,"No.",0,0,'');
              FedExOptionPage.SETRECFILTER;
              PAGE.RUNMODAL(PAGE::"FedEx Option Page Card",FedExOptionPage);
            END;
          ShippingAgent."Shipper Type"::LTL:
            BEGIN
              LTLOptionPage.GET(LTLOptionPage.Type::Package,"No.",0,0,'');
              LTLOptionPage.SETRECFILTER;
              PAGE.RUNMODAL(PAGE::"LTL Option Page Card",LTLOptionPage);
            END;
          ShippingAgent."Shipper Type"::Generic:
            BEGIN
              GenericOptionPage.GET(GenericOptionPage.Type::Package,"No.",0,0,'');
              GenericOptionPage.SETRECFILTER;
              PAGE.RUNMODAL(PAGE::"Generic Option Page Card",GenericOptionPage);
            END;
          ShippingAgent."Shipper Type"::"4":
            BEGIN
              USPSOptionPage.GET(USPSOptionPage.Type::Package,"No.",0,0,'');
              USPSOptionPage.SETRECFILTER;
              PAGE.RUNMODAL(PAGE::"USPS Option Page Card",USPSOptionPage);
            END;
          ShippingAgent."Shipper Type"::USPostal:
            BEGIN
              USPostalOptionPage.GET(USPostalOptionPage.Type::Package,"No.",0,0,'');
              USPostalOptionPage.SETRECFILTER;
              PAGE.RUNMODAL(PAGE::"USPostal Option Page Card",USPostalOptionPage);
            END;
          ShippingAgent."Shipper Type"::"8":
            BEGIN
              RatingOptionPage.GET(RatingOptionPage.Type::Package,"No.",0,0,'');
              RatingOptionPage.SETRECFILTER;
              PAGE.RUNMODAL(PAGE::"Rating Option Page Card",RatingOptionPage);
            END;
          // >> ECS
          ShippingAgent."Shipper Type"::Extended:
            ECShowPackageOptions(CurrentPackage, ShippingAgent);
          // << ECS
          ELSE
            ERROR(Text001,ShippingAgent.TABLENAME);
        END;
      END;
    END;

    PROCEDURE ShowOptPageShipAgentService@9(CurrentShippingAgentService@1000000000 : Record 14000708;ShippingAgent@1240030000 : Record 291;ShippingSetup@1240030001 : Record 14000707);
    VAR
      NoSeriesMgt@1000000005 : Codeunit 396;
    BEGIN
      WITH CurrentShippingAgentService DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            BEGIN
              UPSOptionPage.RESET;
              UPSOptionPage.SETCURRENTKEY(
                Type,"Shipping Agent Code","Shipping Agent Service","World Wide Service");
              UPSOptionPage.SETRANGE(Type,UPSOptionPage.Type::Setup);
              UPSOptionPage.SETRANGE("Shipping Agent Code","Shipping Agent Code");
              UPSOptionPage.SETRANGE("Shipping Agent Service",Code);
              UPSOptionPage.SETRANGE("World Wide Service","World Wide Service");
              IF NOT UPSOptionPage.FIND('-') THEN BEGIN
                ShippingSetup.TESTFIELD("Shipping Agent Serv. Setup Nos");
                UPSOptionPage.INIT;
                UPSOptionPage.Type := UPSOptionPage.Type::Setup;
                UPSOptionPage."Source ID" :=
                  NoSeriesMgt.GetNextNo(ShippingSetup."Shipping Agent Serv. Setup Nos",WORKDATE,TRUE);
                UPSOptionPage."Source Type" := 0;
                UPSOptionPage."Source Subtype" := 0;
                UPSOptionPage."Shipping Agent Code" := "Shipping Agent Code";
                UPSOptionPage."Shipping Agent Service" := Code;
                UPSOptionPage."World Wide Service" := "World Wide Service";
                UPSOptionPage.INSERT(TRUE);
                COMMIT;
              END;
              UPSOptionPage.RESET;
              UPSOptionPage.FILTERGROUP(2);
              UPSOptionPage.SETRANGE(Type,UPSOptionPage.Type::Setup);
              UPSOptionPage.SETRANGE("Source ID",UPSOptionPage."Source ID");
              UPSOptionPage.FILTERGROUP(0);
              PAGE.RUNMODAL(PAGE::"UPS Option Page Card",UPSOptionPage);
            END;
          ShippingAgent."Shipper Type"::FEDEX:
            BEGIN
              FedExOptionPage.RESET;
              FedExOptionPage.SETCURRENTKEY(
                Type,"Shipping Agent Code","Shipping Agent Service","World Wide Service");
              FedExOptionPage.SETRANGE(Type,FedExOptionPage.Type::Setup);
              FedExOptionPage.SETRANGE("Shipping Agent Code","Shipping Agent Code");
              FedExOptionPage.SETRANGE("Shipping Agent Service",Code);
              FedExOptionPage.SETRANGE("World Wide Service","World Wide Service");
              IF NOT FedExOptionPage.FIND('-') THEN BEGIN
                ShippingSetup.TESTFIELD("Shipping Agent Serv. Setup Nos");
                FedExOptionPage.INIT;
                FedExOptionPage.Type := FedExOptionPage.Type::Setup;
                FedExOptionPage."Source ID" :=
                  NoSeriesMgt.GetNextNo(ShippingSetup."Shipping Agent Serv. Setup Nos",WORKDATE,TRUE);
                FedExOptionPage."Source Type" := 0;
                FedExOptionPage."Source Subtype" := 0;
                FedExOptionPage."Shipping Agent Code" := "Shipping Agent Code";
                FedExOptionPage."Shipping Agent Service" := Code;
                FedExOptionPage."World Wide Service" := "World Wide Service";
                FedExOptionPage.INSERT(TRUE);
                COMMIT;
              END;
              FedExOptionPageExt.RESET;
              FedExOptionPageExt.SETCURRENTKEY(
                Type,"Shipping Agent Code","Shipping Agent Service","World Wide Service");
              FedExOptionPageExt.SETRANGE(Type,FedExOptionPageExt.Type::Setup);
              FedExOptionPageExt.SETRANGE("Shipping Agent Code","Shipping Agent Code");
              FedExOptionPageExt.SETRANGE("Shipping Agent Service",Code);
              FedExOptionPageExt.SETRANGE("World Wide Service","World Wide Service");
              IF NOT FedExOptionPageExt.FIND('-') THEN BEGIN
                FedExOptionPageExt.INIT;
                FedExOptionPageExt.Type := FedExOptionPageExt.Type::Setup;
                FedExOptionPageExt."Source ID" := FedExOptionPage."Source ID";
                FedExOptionPageExt."Source Type" := 0;
                FedExOptionPageExt."Source Subtype" := 0;
                FedExOptionPageExt."Shipping Agent Code" := "Shipping Agent Code";
                FedExOptionPageExt."Shipping Agent Service" := Code;
                FedExOptionPageExt."World Wide Service" := "World Wide Service";
                FedExOptionPageExt.INSERT(TRUE);
                COMMIT;
              END;
              FedExOptionPage.RESET;
              FedExOptionPage.FILTERGROUP(2);
              FedExOptionPage.SETRANGE(Type,FedExOptionPage.Type::Setup);
              FedExOptionPage.SETRANGE("Source ID",FedExOptionPage."Source ID");
              FedExOptionPage.FILTERGROUP(0);
              PAGE.RUNMODAL(PAGE::"FedEx Option Page Card",FedExOptionPage);
            END;
          ShippingAgent."Shipper Type"::LTL:
            BEGIN
              LTLOptionPage.RESET;
              LTLOptionPage.SETCURRENTKEY(
                Type,"Shipping Agent Code","Shipping Agent Service","World Wide Service");
              LTLOptionPage.SETRANGE(Type,LTLOptionPage.Type::Setup);
              LTLOptionPage.SETRANGE("Shipping Agent Code","Shipping Agent Code");
              LTLOptionPage.SETRANGE("Shipping Agent Service",Code);
              LTLOptionPage.SETRANGE("World Wide Service","World Wide Service");
              IF NOT LTLOptionPage.FIND('-') THEN BEGIN
                ShippingSetup.TESTFIELD("Shipping Agent Serv. Setup Nos");
                LTLOptionPage.INIT;
                LTLOptionPage.Type := LTLOptionPage.Type::Setup;
                LTLOptionPage."Source ID" :=
                  NoSeriesMgt.GetNextNo(ShippingSetup."Shipping Agent Serv. Setup Nos",WORKDATE,TRUE);
                LTLOptionPage."Source Type" := 0;
                LTLOptionPage."Source Subtype" := 0;
                LTLOptionPage."Shipping Agent Code" := "Shipping Agent Code";
                LTLOptionPage."Shipping Agent Service" := Code;
                LTLOptionPage."World Wide Service" := "World Wide Service";
                LTLOptionPage.INSERT(TRUE);
                COMMIT;
              END;
              LTLOptionPage.RESET;
              LTLOptionPage.FILTERGROUP(2);
              LTLOptionPage.SETRANGE(Type,LTLOptionPage.Type::Setup);
              LTLOptionPage.SETRANGE("Source ID",LTLOptionPage."Source ID");
              LTLOptionPage.FILTERGROUP(0);
              PAGE.RUNMODAL(PAGE::"LTL Option Page Card",LTLOptionPage);
            END;
          ShippingAgent."Shipper Type"::Generic:
            BEGIN
              GenericOptionPage.RESET;
              GenericOptionPage.SETCURRENTKEY(
                Type,"Shipping Agent Code","Shipping Agent Service","World Wide Service");
              GenericOptionPage.SETRANGE(Type,GenericOptionPage.Type::Setup);
              GenericOptionPage.SETRANGE("Shipping Agent Code","Shipping Agent Code");
              GenericOptionPage.SETRANGE("Shipping Agent Service",Code);
              GenericOptionPage.SETRANGE("World Wide Service","World Wide Service");
              IF NOT GenericOptionPage.FIND('-') THEN BEGIN
                ShippingSetup.TESTFIELD("Shipping Agent Serv. Setup Nos");
                GenericOptionPage.INIT;
                GenericOptionPage.Type := GenericOptionPage.Type::Setup;
                GenericOptionPage."Source ID" :=
                  NoSeriesMgt.GetNextNo(ShippingSetup."Shipping Agent Serv. Setup Nos",WORKDATE,TRUE);
                GenericOptionPage."Source Type" := 0;
                GenericOptionPage."Source Subtype" := 0;
                GenericOptionPage."Shipping Agent Code" := "Shipping Agent Code";
                GenericOptionPage."Shipping Agent Service" := Code;
                GenericOptionPage."World Wide Service" := "World Wide Service";
                GenericOptionPage.INSERT(TRUE);
                COMMIT;
              END;
              GenericOptionPage.RESET;
              GenericOptionPage.FILTERGROUP(2);
              GenericOptionPage.SETRANGE(Type,GenericOptionPage.Type::Setup);
              GenericOptionPage.SETRANGE("Source ID",GenericOptionPage."Source ID");
              GenericOptionPage.FILTERGROUP(0);
              PAGE.RUNMODAL(PAGE::"Generic Option Page Card",GenericOptionPage);
            END;
          ShippingAgent."Shipper Type"::"4":
            BEGIN
              USPSOptionPage.RESET;
              USPSOptionPage.SETCURRENTKEY(
                Type,"Shipping Agent Code","Shipping Agent Service","World Wide Service");
              USPSOptionPage.SETRANGE(Type,USPSOptionPage.Type::Setup);
              USPSOptionPage.SETRANGE("Shipping Agent Code","Shipping Agent Code");
              USPSOptionPage.SETRANGE("Shipping Agent Service",Code);
              USPSOptionPage.SETRANGE("World Wide Service","World Wide Service");
              IF NOT USPSOptionPage.FIND('-') THEN BEGIN
                ShippingSetup.TESTFIELD("Shipping Agent Serv. Setup Nos");
                USPSOptionPage.INIT;
                USPSOptionPage.Type := USPSOptionPage.Type::Setup;
                USPSOptionPage."Source ID" :=
                  NoSeriesMgt.GetNextNo(ShippingSetup."Shipping Agent Serv. Setup Nos",WORKDATE,TRUE);
                USPSOptionPage."Source Type" := 0;
                USPSOptionPage."Source Subtype" := 0;
                USPSOptionPage."Shipping Agent Code" := "Shipping Agent Code";
                USPSOptionPage."Shipping Agent Service" := Code;
                USPSOptionPage."World Wide Service" := "World Wide Service";
                USPSOptionPage.INSERT(TRUE);
                COMMIT;
              END;
              USPSOptionPage.RESET;
              USPSOptionPage.FILTERGROUP(2);
              USPSOptionPage.SETRANGE(Type,USPSOptionPage.Type::Setup);
              USPSOptionPage.SETRANGE("Source ID",USPSOptionPage."Source ID");
              USPSOptionPage.FILTERGROUP(0);
              PAGE.RUNMODAL(PAGE::"USPS Option Page Card",USPSOptionPage);
            END;
          ShippingAgent."Shipper Type"::USPostal:
            BEGIN
              USPostalOptionPage.RESET;
              USPostalOptionPage.SETCURRENTKEY(
                Type,"Shipping Agent Code","Shipping Agent Service","World Wide Service");
              USPostalOptionPage.SETRANGE(Type,USPostalOptionPage.Type::Setup);
              USPostalOptionPage.SETRANGE("Shipping Agent Code","Shipping Agent Code");
              USPostalOptionPage.SETRANGE("Shipping Agent Service",Code);
              USPostalOptionPage.SETRANGE("World Wide Service","World Wide Service");
              IF NOT USPostalOptionPage.FIND('-') THEN BEGIN
                ShippingSetup.TESTFIELD("Shipping Agent Serv. Setup Nos");
                USPostalOptionPage.INIT;
                USPostalOptionPage.Type := USPostalOptionPage.Type::Setup;
                USPostalOptionPage."Source ID" :=
                  NoSeriesMgt.GetNextNo(ShippingSetup."Shipping Agent Serv. Setup Nos",WORKDATE,TRUE);
                USPostalOptionPage."Source Type" := 0;
                USPostalOptionPage."Source Subtype" := 0;
                USPostalOptionPage."Shipping Agent Code" := "Shipping Agent Code";
                USPostalOptionPage."Shipping Agent Service" := Code;
                USPostalOptionPage."World Wide Service" := "World Wide Service";
                USPostalOptionPage.INSERT(TRUE);
                COMMIT;
              END;
              USPostalOptionPage.RESET;
              USPostalOptionPage.FILTERGROUP(2);
              USPostalOptionPage.SETRANGE(Type,USPostalOptionPage.Type::Setup);
              USPostalOptionPage.SETRANGE("Source ID",USPostalOptionPage."Source ID");
              USPostalOptionPage.FILTERGROUP(0);
              PAGE.RUNMODAL(PAGE::"USPostal Option Page Card",USPostalOptionPage);
            END;
          ShippingAgent."Shipper Type"::"8":
            BEGIN
              RatingOptionPage.RESET;
              RatingOptionPage.SETCURRENTKEY(
                Type,"Shipping Agent Code","Shipping Agent Service","World Wide Service");
              RatingOptionPage.SETRANGE(Type,RatingOptionPage.Type::Setup);
              RatingOptionPage.SETRANGE("Shipping Agent Code","Shipping Agent Code");
              RatingOptionPage.SETRANGE("Shipping Agent Service",Code);
              RatingOptionPage.SETRANGE("World Wide Service","World Wide Service");
              IF NOT RatingOptionPage.FIND('-') THEN BEGIN
                ShippingSetup.TESTFIELD("Shipping Agent Serv. Setup Nos");
                RatingOptionPage.INIT;
                RatingOptionPage.Type := RatingOptionPage.Type::Setup;
                RatingOptionPage."Source ID" :=
                  NoSeriesMgt.GetNextNo(ShippingSetup."Shipping Agent Serv. Setup Nos",WORKDATE,TRUE);
                RatingOptionPage."Source Type" := 0;
                RatingOptionPage."Source Subtype" := 0;
                RatingOptionPage."Shipping Agent Code" := "Shipping Agent Code";
                RatingOptionPage."Shipping Agent Service" := Code;
                RatingOptionPage."World Wide Service" := "World Wide Service";
                RatingOptionPage.INSERT(TRUE);
                COMMIT;
              END;
              RatingOptionPage.RESET;
              RatingOptionPage.FILTERGROUP(2);
              RatingOptionPage.SETRANGE(Type,RatingOptionPage.Type::Setup);
              RatingOptionPage.SETRANGE("Source ID",RatingOptionPage."Source ID");
              RatingOptionPage.FILTERGROUP(0);
              PAGE.RUNMODAL(PAGE::"Rating Option Page Card",RatingOptionPage);
            END;
          // >> ECS
          ShippingAgent."Shipper Type"::Extended:
            ECShowOptPageShipAgentService(CurrentShippingAgentService);
          // << ECS
          ELSE
            ERROR(Text002,ShippingAgent.TABLENAME);
        END;
      END;
    END;

    PROCEDURE ShowOptPageShippingAgent@48(ShippingAgent@1000000000 : Record 291;ShippingAgentService@1000000001 : Code[30];WorldWideService@1000000002 : Boolean;ReferenceType@1000000003 : Integer;ReferenceSourceID@1000000004 : Code[20];ReferenceSourceType@1240030000 : Integer;ReferenceSourceSubtype@1240030001 : Integer;ReferenceSecondSourceID@1240030002 : Code[20];MasterDataTableID@1240030005 : Integer;MasterDataSourceID@1240030003 : Code[20];MasterDataSecondSourceID@1240030004 : Code[20]);
    VAR
      UPSOptionPage2@1240030014 : Record 14000761;
      FedExOptionPage2@1240030013 : Record 14000781;
      FedExOptionPageExt2@1240020000 : Record 14000793;
      LTLOptionPage2@1240030012 : Record 14000801;
      GenericOptionPage2@1240030011 : Record 14000861;
      USPSOptionPage2@1240030010 : Record 14000881;
      USPostalOptionPage2@1240030007 : Record 14050501;
      RatingOptionPage2@1240030006 : Record 14050451;
    BEGIN
      CASE ShippingAgent."Shipper Type" OF
        ShippingAgent."Shipper Type"::UPS:
          BEGIN
            IF NOT UPSOptionPage.GET(
                     ReferenceType,ReferenceSourceID,ReferenceSourceType,ReferenceSourceSubtype,
                     ReferenceSecondSourceID)
            THEN BEGIN
              UPSOptionPage.RESET;
              UPSOptionPage.SETCURRENTKEY(
                Type,"Shipping Agent Code","Shipping Agent Service","World Wide Service");
              UPSOptionPage.SETRANGE(Type,UPSOptionPage.Type::Setup);
              UPSOptionPage.SETRANGE("Shipping Agent Code",ShippingAgent.Code);
              UPSOptionPage.SETRANGE("Shipping Agent Service",ShippingAgentService);
              UPSOptionPage.SETRANGE("World Wide Service",WorldWideService);
              IF NOT UPSOptionPage.FIND('-') THEN
                UPSOptionPage.INIT;
              UPSOptionPage.Type := ReferenceType;
              UPSOptionPage."Source ID" := ReferenceSourceID;
              UPSOptionPage."Source Type" := ReferenceSourceType;
              UPSOptionPage."Source Subtype" := ReferenceSourceSubtype;
              UPSOptionPage."Second Source ID" := ReferenceSecondSourceID;
              UPSOptionPage."Shipping Agent Code" := ShippingAgent.Code;
              UPSOptionPage."Shipping Agent Service" := ShippingAgentService;
              UPSOptionPage."World Wide Service" := WorldWideService;

              IF MasterDataTableID <> 0 THEN
                IF UPSOptionPage2.GET(
                     UPSOptionPage2.Type::"Master Data",MasterDataSourceID,MasterDataTableID,0,
                     MasterDataSecondSourceID)
                THEN
                  UPSOptionPage.MergeOptionPage(UPSOptionPage2);

              UPSOptionPage.INSERT(TRUE);
              COMMIT;
            END;
            UPSOptionPage.RESET;
            UPSOptionPage.SETRECFILTER;
            PAGE.RUNMODAL(PAGE::"UPS Option Page Card",UPSOptionPage);
          END;
        ShippingAgent."Shipper Type"::FEDEX:
          BEGIN
            IF NOT FedExOptionPage.GET(
                     ReferenceType,ReferenceSourceID,ReferenceSourceType,ReferenceSourceSubtype,
                     ReferenceSecondSourceID)
            THEN BEGIN
              FedExOptionPage.RESET;
              FedExOptionPage.SETCURRENTKEY(
                Type,"Shipping Agent Code","Shipping Agent Service","World Wide Service");
              FedExOptionPage.SETRANGE(Type,FedExOptionPage.Type::Setup);
              FedExOptionPage.SETRANGE("Shipping Agent Code",ShippingAgent.Code);
              FedExOptionPage.SETRANGE("Shipping Agent Service",ShippingAgentService);
              FedExOptionPage.SETRANGE("World Wide Service",WorldWideService);
              IF NOT FedExOptionPage.FIND('-') THEN
                FedExOptionPage.INIT;
              FedExOptionPage.Type := ReferenceType;
              FedExOptionPage."Source ID" := ReferenceSourceID;
              FedExOptionPage."Source Type" := ReferenceSourceType;
              FedExOptionPage."Source Subtype" := ReferenceSourceSubtype;
              FedExOptionPage."Second Source ID" := ReferenceSecondSourceID;
              FedExOptionPage."Shipping Agent Code" := ShippingAgent.Code;
              FedExOptionPage."Shipping Agent Service" := ShippingAgentService;
              FedExOptionPage."World Wide Service" := WorldWideService;

              IF MasterDataTableID <> 0 THEN
                IF FedExOptionPage2.GET(
                     FedExOptionPage2.Type::"Master Data",MasterDataSourceID,MasterDataTableID,0,
                     MasterDataSecondSourceID)
                THEN
                  FedExOptionPage.MergeOptionPage(FedExOptionPage2);

              FedExOptionPage.INSERT(TRUE);
              FedExOptionPageExt.RESET;
              FedExOptionPageExt.SETCURRENTKEY(
                Type,"Shipping Agent Code","Shipping Agent Service","World Wide Service");
              FedExOptionPageExt.SETRANGE(Type,FedExOptionPageExt.Type::Setup);
              FedExOptionPageExt.SETRANGE("Shipping Agent Code",ShippingAgent.Code);
              FedExOptionPageExt.SETRANGE("Shipping Agent Service",ShippingAgentService);
              FedExOptionPageExt.SETRANGE("World Wide Service",WorldWideService);
              IF NOT FedExOptionPageExt.FIND('-') THEN
                FedExOptionPageExt.INIT;
              FedExOptionPageExt.Type := ReferenceType;
              FedExOptionPageExt."Source ID" := ReferenceSourceID;
              FedExOptionPageExt."Source Type" := ReferenceSourceType;
              FedExOptionPageExt."Source Subtype" := ReferenceSourceSubtype;
              FedExOptionPageExt."Second Source ID" := ReferenceSecondSourceID;
              FedExOptionPageExt."Shipping Agent Code" := ShippingAgent.Code;
              FedExOptionPageExt."Shipping Agent Service" := ShippingAgentService;
              FedExOptionPageExt."World Wide Service" := WorldWideService;
              IF MasterDataTableID <> 0 THEN
                IF FedExOptionPageExt2.GET(
                     FedExOptionPageExt2.Type::"Master Data",MasterDataSourceID,
                       MasterDataTableID,0,MasterDataSecondSourceID)
                THEN
                  FedExOptionPageExt.MergeOptionPageExt(FedExOptionPageExt2);
              FedExOptionPageExt.INSERT(TRUE);
              COMMIT;
            END;
            FedExOptionPage.RESET;
            FedExOptionPage.SETRECFILTER;
            PAGE.RUNMODAL(PAGE::"FedEx Option Page Card",FedExOptionPage);
          END;
        ShippingAgent."Shipper Type"::LTL:
          BEGIN
            IF NOT LTLOptionPage.GET(
                     ReferenceType,ReferenceSourceID,ReferenceSourceType,ReferenceSourceSubtype,
                     ReferenceSecondSourceID)
            THEN BEGIN
              LTLOptionPage.RESET;
              LTLOptionPage.SETCURRENTKEY(
                Type,"Shipping Agent Code","Shipping Agent Service","World Wide Service");
              LTLOptionPage.SETRANGE(Type,LTLOptionPage.Type::Setup);
              LTLOptionPage.SETRANGE("Shipping Agent Code",ShippingAgent.Code);
              LTLOptionPage.SETRANGE("Shipping Agent Service",ShippingAgentService);
              LTLOptionPage.SETRANGE("World Wide Service",WorldWideService);
              IF NOT LTLOptionPage.FIND('-') THEN
                LTLOptionPage.INIT;
              LTLOptionPage.Type := ReferenceType;
              LTLOptionPage."Source ID" := ReferenceSourceID;
              LTLOptionPage."Source Type" := ReferenceSourceType;
              LTLOptionPage."Source Subtype" := ReferenceSourceSubtype;
              LTLOptionPage."Second Source ID" := ReferenceSecondSourceID;
              LTLOptionPage."Shipping Agent Code" := ShippingAgent.Code;
              LTLOptionPage."Shipping Agent Service" := ShippingAgentService;
              LTLOptionPage."World Wide Service" := WorldWideService;

              IF MasterDataTableID <> 0 THEN
                IF LTLOptionPage2.GET(
                     LTLOptionPage2.Type::"Master Data",MasterDataSourceID,MasterDataTableID,0,
                     MasterDataSecondSourceID)
                THEN
                  LTLOptionPage.MergeOptionPage(LTLOptionPage2);

              LTLOptionPage.INSERT(TRUE);
              COMMIT;
            END;
            LTLOptionPage.RESET;
            LTLOptionPage.SETRECFILTER;
            PAGE.RUNMODAL(PAGE::"LTL Option Page Card",LTLOptionPage);
          END;
        ShippingAgent."Shipper Type"::Generic:
          BEGIN
            IF NOT GenericOptionPage.GET(
                     ReferenceType,ReferenceSourceID,ReferenceSourceType,ReferenceSourceSubtype,
                     ReferenceSecondSourceID)
            THEN BEGIN
              GenericOptionPage.RESET;
              GenericOptionPage.SETCURRENTKEY(
                Type,"Shipping Agent Code","Shipping Agent Service","World Wide Service");
              GenericOptionPage.SETRANGE(Type,GenericOptionPage.Type::Setup);
              GenericOptionPage.SETRANGE("Shipping Agent Code",ShippingAgent.Code);
              GenericOptionPage.SETRANGE("Shipping Agent Service",ShippingAgentService);
              GenericOptionPage.SETRANGE("World Wide Service",WorldWideService);
              IF NOT GenericOptionPage.FIND('-') THEN
                GenericOptionPage.INIT;
              GenericOptionPage.Type := ReferenceType;
              GenericOptionPage."Source ID" := ReferenceSourceID;
              GenericOptionPage."Source Type" := ReferenceSourceType;
              GenericOptionPage."Source Subtype" := ReferenceSourceSubtype;
              GenericOptionPage."Second Source ID" := ReferenceSecondSourceID;
              GenericOptionPage."Shipping Agent Code" := ShippingAgent.Code;
              GenericOptionPage."Shipping Agent Service" := ShippingAgentService;
              GenericOptionPage."World Wide Service" := WorldWideService;

              IF MasterDataTableID <> 0 THEN
                IF GenericOptionPage2.GET(
                     GenericOptionPage2.Type::"Master Data",MasterDataSourceID,MasterDataTableID,0,
                     MasterDataSecondSourceID)
                THEN
                  GenericOptionPage.MergeOptionPage(GenericOptionPage2);

              GenericOptionPage.INSERT(TRUE);
              COMMIT;
            END;
            GenericOptionPage.RESET;
            GenericOptionPage.SETRECFILTER;
            PAGE.RUNMODAL(PAGE::"Generic Option Page Card",GenericOptionPage);
          END;
        ShippingAgent."Shipper Type"::"4":
          BEGIN
            IF NOT USPSOptionPage.GET(
                     ReferenceType,ReferenceSourceID,ReferenceSourceType,ReferenceSourceSubtype,
                     ReferenceSecondSourceID)
            THEN BEGIN
              USPSOptionPage.RESET;
              USPSOptionPage.SETCURRENTKEY(
                Type,"Shipping Agent Code","Shipping Agent Service","World Wide Service");
              USPSOptionPage.SETRANGE(Type,USPSOptionPage.Type::Setup);
              USPSOptionPage.SETRANGE("Shipping Agent Code",ShippingAgent.Code);
              USPSOptionPage.SETRANGE("Shipping Agent Service",ShippingAgentService);
              USPSOptionPage.SETRANGE("World Wide Service",WorldWideService);
              IF NOT USPSOptionPage.FIND('-') THEN
                USPSOptionPage.INIT;
              USPSOptionPage.Type := ReferenceType;
              USPSOptionPage."Source ID" := ReferenceSourceID;
              USPSOptionPage."Source Type" := ReferenceSourceType;
              USPSOptionPage."Source Subtype" := ReferenceSourceSubtype;
              USPSOptionPage."Second Source ID" := ReferenceSecondSourceID;
              USPSOptionPage."Shipping Agent Code" := ShippingAgent.Code;
              USPSOptionPage."Shipping Agent Service" := ShippingAgentService;
              USPSOptionPage."World Wide Service" := WorldWideService;

              IF MasterDataTableID <> 0 THEN
                IF USPSOptionPage2.GET(
                     USPSOptionPage2.Type::"Master Data",MasterDataSourceID,MasterDataTableID,0,
                     MasterDataSecondSourceID)
                THEN
                  USPSOptionPage.MergeOptionPage(USPSOptionPage2);

              USPSOptionPage.INSERT(TRUE);
              COMMIT;
            END;
            USPSOptionPage.RESET;
            USPSOptionPage.SETRECFILTER;
            PAGE.RUNMODAL(PAGE::"USPS Option Page Card",USPSOptionPage);
          END;
        ShippingAgent."Shipper Type"::USPostal:
          BEGIN
            IF NOT USPostalOptionPage.GET(
                     ReferenceType,ReferenceSourceID,ReferenceSourceType,ReferenceSourceSubtype,
                     ReferenceSecondSourceID)
            THEN BEGIN
              USPostalOptionPage.RESET;
              USPostalOptionPage.SETCURRENTKEY(
                Type,"Shipping Agent Code","Shipping Agent Service","World Wide Service");
              USPostalOptionPage.SETRANGE(Type,USPostalOptionPage.Type::Setup);
              USPostalOptionPage.SETRANGE("Shipping Agent Code",ShippingAgent.Code);
              USPostalOptionPage.SETRANGE("Shipping Agent Service",ShippingAgentService);
              USPostalOptionPage.SETRANGE("World Wide Service",WorldWideService);
              IF NOT USPostalOptionPage.FIND('-') THEN
                USPostalOptionPage.INIT;
              USPostalOptionPage.Type := ReferenceType;
              USPostalOptionPage."Source ID" := ReferenceSourceID;
              USPostalOptionPage."Source Type" := ReferenceSourceType;
              USPostalOptionPage."Source Subtype" := ReferenceSourceSubtype;
              USPostalOptionPage."Second Source ID" := ReferenceSecondSourceID;
              USPostalOptionPage."Shipping Agent Code" := ShippingAgent.Code;
              USPostalOptionPage."Shipping Agent Service" := ShippingAgentService;
              USPostalOptionPage."World Wide Service" := WorldWideService;

              IF MasterDataTableID <> 0 THEN
                IF USPostalOptionPage2.GET(
                     USPostalOptionPage2.Type::"Master Data",MasterDataSourceID,MasterDataTableID,0,
                     MasterDataSecondSourceID)
                THEN
                  USPostalOptionPage.MergeOptionPage(USPostalOptionPage2);

              USPostalOptionPage.INSERT(TRUE);
              COMMIT;
            END;
            USPostalOptionPage.RESET;
            USPostalOptionPage.SETRECFILTER;
            PAGE.RUNMODAL(PAGE::"USPostal Option Page Card",USPostalOptionPage);
          END;
        ShippingAgent."Shipper Type"::"8":
          BEGIN
            IF NOT RatingOptionPage.GET(
                     ReferenceType,ReferenceSourceID,ReferenceSourceType,ReferenceSourceSubtype,
                     ReferenceSecondSourceID)
            THEN BEGIN
              RatingOptionPage.RESET;
              RatingOptionPage.SETCURRENTKEY(
                Type,"Shipping Agent Code","Shipping Agent Service","World Wide Service");
              RatingOptionPage.SETRANGE(Type,RatingOptionPage.Type::Setup);
              RatingOptionPage.SETRANGE("Shipping Agent Code",ShippingAgent.Code);
              RatingOptionPage.SETRANGE("Shipping Agent Service",ShippingAgentService);
              RatingOptionPage.SETRANGE("World Wide Service",WorldWideService);
              IF NOT RatingOptionPage.FIND('-') THEN
                RatingOptionPage.INIT;
              RatingOptionPage.Type := ReferenceType;
              RatingOptionPage."Source ID" := ReferenceSourceID;
              RatingOptionPage."Source Type" := ReferenceSourceType;
              RatingOptionPage."Source Subtype" := ReferenceSourceSubtype;
              RatingOptionPage."Second Source ID" := ReferenceSecondSourceID;
              RatingOptionPage."Shipping Agent Code" := ShippingAgent.Code;
              RatingOptionPage."Shipping Agent Service" := ShippingAgentService;
              RatingOptionPage."World Wide Service" := WorldWideService;

              IF MasterDataTableID <> 0 THEN
                IF RatingOptionPage2.GET(
                     RatingOptionPage2.Type::"Master Data",MasterDataSourceID,MasterDataTableID,0,
                     MasterDataSecondSourceID)
                THEN
                  RatingOptionPage.MergeOptionPage(RatingOptionPage2);

              RatingOptionPage.INSERT(TRUE);
              COMMIT;
            END;
            RatingOptionPage.RESET;
            RatingOptionPage.SETRECFILTER;
            PAGE.RUNMODAL(PAGE::"Rating Option Page Card",RatingOptionPage);
          END;
        // >> ECS
        ShippingAgent."Shipper Type"::Extended:
          ECShowOptPageShippingAgent(ShippingAgent, ShippingAgentService, WorldWideService, ReferenceType, ReferenceSourceID, ReferenceSourceType,
                                     ReferenceSourceSubtype, ReferenceSecondSourceID, MasterDataTableID, MasterDataSourceID, MasterDataSecondSourceID);
        // << ECS
        ELSE
          ERROR(Text002,ShippingAgent.TABLENAME);
      END;
    END;

    PROCEDURE ShowOptPageItemResource@1240030034(TableID@1240030000 : Integer;SourceID@1240030001 : Code[20]);
    VAR
      ShippingAgent@1240030003 : Record 291;
      Selection@1240030002 : Integer;
    BEGIN
      IF NOT (TableID IN [27,156]) THEN
        ERROR(Text005,TableID);

      Selection := STRMENU(Text006);
      IF Selection = 0 THEN
        EXIT;

      Selection := Selection - 1;

      CASE Selection OF
        ShippingAgent."Shipper Type"::UPS:
          BEGIN
            UPSOptionPage.RESET;
            CASE TableID OF
              DATABASE::Item:
                UPSOptionPage.SETRANGE(Type,UPSOptionPage.Type::Item);
              DATABASE::Resource:
                UPSOptionPage.SETRANGE(Type,UPSOptionPage.Type::Resource);
            END;
            UPSOptionPage.SETRANGE("Source ID",SourceID);
            UPSOptionPage.SETRANGE("Source Type",0);
            UPSOptionPage.SETRANGE("Source Subtype",0);
            PAGE.RUNMODAL(PAGE::"UPS Item/Resource Option Page",UPSOptionPage);
          END;
        ShippingAgent."Shipper Type"::FEDEX:
          BEGIN
            FedExOptionPage.RESET;
            CASE TableID OF
              DATABASE::Item:
                FedExOptionPage.SETRANGE(Type,FedExOptionPage.Type::Item);
              DATABASE::Resource:
                FedExOptionPage.SETRANGE(Type,FedExOptionPage.Type::Resource);
            END;
            FedExOptionPage.SETRANGE("Source ID",SourceID);
            FedExOptionPage.SETRANGE("Source Type",0);
            FedExOptionPage.SETRANGE("Source Subtype",0);
            PAGE.RUNMODAL(PAGE::"FedEx Item/Res. Option Page",FedExOptionPage);
          END;
        ShippingAgent."Shipper Type"::LTL:
          BEGIN
            LTLOptionPage.RESET;
            CASE TableID OF
              DATABASE::Item:
                LTLOptionPage.SETRANGE(Type,LTLOptionPage.Type::Item);
              DATABASE::Resource:
                LTLOptionPage.SETRANGE(Type,LTLOptionPage.Type::Resource);
            END;
            LTLOptionPage.SETRANGE("Source ID",SourceID);
            LTLOptionPage.SETRANGE("Source Type",0);
            LTLOptionPage.SETRANGE("Source Subtype",0);
            PAGE.RUNMODAL(PAGE::"LTL Item/Resource Option Page",LTLOptionPage);
          END;
        ShippingAgent."Shipper Type"::Generic:
          BEGIN
            GenericOptionPage.RESET;
            CASE TableID OF
              DATABASE::Item:
                GenericOptionPage.SETRANGE(Type,GenericOptionPage.Type::Item);
              DATABASE::Resource:
                GenericOptionPage.SETRANGE(Type,GenericOptionPage.Type::Resource);
            END;
            GenericOptionPage.SETRANGE("Source ID",SourceID);
            GenericOptionPage.SETRANGE("Source Type",0);
            GenericOptionPage.SETRANGE("Source Subtype",0);
            PAGE.RUNMODAL(PAGE::"Generic Item/Res. Option Page",GenericOptionPage);
          END;
        ShippingAgent."Shipper Type"::USPostal:
          BEGIN
            USPostalOptionPage.RESET;
            CASE TableID OF
              DATABASE::Item:
                USPostalOptionPage.SETRANGE(Type,USPostalOptionPage.Type::Item);
              DATABASE::Resource:
                USPostalOptionPage.SETRANGE(Type,USPostalOptionPage.Type::Resource);
            END;
            USPostalOptionPage.SETRANGE("Source ID",SourceID);
            USPostalOptionPage.SETRANGE("Source Type",0);
            USPostalOptionPage.SETRANGE("Source Subtype",0);
            PAGE.RUNMODAL(PAGE::"USPostal Item/Res. Option Page",USPostalOptionPage);
          END;
        ShippingAgent."Shipper Type"::"8":
          BEGIN
            RatingOptionPage.RESET;
            CASE TableID OF
              DATABASE::Item:
                RatingOptionPage.SETRANGE(Type,RatingOptionPage.Type::Item);
              DATABASE::Resource:
                RatingOptionPage.SETRANGE(Type,RatingOptionPage.Type::Resource);
            END;
            RatingOptionPage.SETRANGE("Source ID",SourceID);
            RatingOptionPage.SETRANGE("Source Type",0);
            RatingOptionPage.SETRANGE("Source Subtype",0);
            PAGE.RUNMODAL(PAGE::"Rating Item/Res. Option Page",RatingOptionPage);
          END;
        // >> ECS
        ShippingAgent."Shipper Type"::Extended:
          ECShowOptPageItemResource(TableID, SourceID);
        // << ECS
        ELSE
          ERROR(Text007);
      END;
    END;

    PROCEDURE ShowPostedPackageOptions@15(CurrentPostedPackage@1000000000 : Record 14000704;ShippingAgent@1240030000 : Record 291);
    VAR
      UPSPostedOptionPage@1240030006 : Record 14000762;
      FedExPostedOptionPage@1240030005 : Record 14000782;
      LTLPostedOptionPage@1240030004 : Record 14000802;
      GenericPostedOptionPage@1240030003 : Record 14000862;
      USPSPostedOptionPage@1240030002 : Record 14000882;
      USPostalPostedOptionPage@1240030008 : Record 14050502;
      RatingPostedOptionPage@1240030007 : Record 14050452;
    BEGIN
      WITH CurrentPostedPackage DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            BEGIN
              UPSPostedOptionPage.GET("No.");
              UPSPostedOptionPage.SETRECFILTER;
              PAGE.RUNMODAL(PAGE::"UPS Posted Option Page Card",UPSPostedOptionPage);
            END;
          ShippingAgent."Shipper Type"::FEDEX:
            BEGIN
              FedExPostedOptionPage.GET("No.");
              FedExPostedOptionPage.SETRECFILTER;
              PAGE.RUNMODAL(PAGE::"FedEx Posted Option Page Card",FedExPostedOptionPage);
            END;
          ShippingAgent."Shipper Type"::LTL:
            BEGIN
              LTLPostedOptionPage.GET("No.");
              LTLPostedOptionPage.SETRECFILTER;
              PAGE.RUNMODAL(PAGE::"LTL Posted Option Page Card",LTLPostedOptionPage);
            END;
          ShippingAgent."Shipper Type"::Generic:
            BEGIN
              GenericPostedOptionPage.GET("No.");
              GenericPostedOptionPage.SETRECFILTER;
              PAGE.RUNMODAL(PAGE::"Generic Posted Opt. Page Card",GenericPostedOptionPage);
            END;
          ShippingAgent."Shipper Type"::"4":
            BEGIN
              USPSPostedOptionPage.GET("No.");
              USPSPostedOptionPage.SETRECFILTER;
              PAGE.RUNMODAL(PAGE::"USPS Posted Option Page Card",USPSPostedOptionPage);
            END;
          ShippingAgent."Shipper Type"::USPostal:
            BEGIN
              USPostalPostedOptionPage.GET("No.");
              USPostalPostedOptionPage.SETRECFILTER;
              PAGE.RUNMODAL(PAGE::"USPostal Posted Opt. Page Card",USPostalPostedOptionPage);
            END;
          ShippingAgent."Shipper Type"::"8":
            BEGIN
              RatingPostedOptionPage.GET("No.");
              RatingPostedOptionPage.SETRECFILTER;
              PAGE.RUNMODAL(PAGE::"Rating Posted Option Page Card",RatingPostedOptionPage);
            END;
          // >> ECS
          ShippingAgent."Shipper Type"::Extended:
            ECShowPostedPackageOptions(CurrentPostedPackage);
          // << ECS
          ELSE
            ERROR(Text002,ShippingAgent.TABLENAME);
        END;
      END;
    END;

    PROCEDURE DeleteDocumentOptionPages@1240030022(SourceID@1240030001 : Code[20];SourceType@1240030002 : Integer;SourceSubtype@1240030003 : Integer);
    BEGIN
      DeleteOptionPages(UPSOptionPage.Type::Document,SourceID,SourceType,SourceSubtype,'');
    END;

    PROCEDURE DeleteMasterDataOptionPages@1240030036(TableID@1240030004 : Integer;SourceID@1240030001 : Code[20];SecondSourceID@1240030000 : Code[20]);
    BEGIN
      DeleteOptionPages(UPSOptionPage.Type::"Master Data",SourceID,TableID,0,SecondSourceID);
    END;

    PROCEDURE ShowOptPageMasterData@1240030035(TableID@1240030000 : Integer;SourceID@1240030001 : Code[20];SecondSourceID@1240030004 : Code[20]);
    VAR
      ShippingAgent@1240030003 : Record 291;
      Selection@1240030002 : Integer;
    BEGIN
      IF NOT (TableID IN [14,18,23]) THEN
        ERROR(Text005,TableID);

      Selection := STRMENU(Text006);
      IF Selection = 0 THEN
        EXIT;

      Selection := Selection - 1;

      ShippingAgent.RESET;
      ShippingAgent.SETRANGE("Shipper Type",Selection);
      ShippingAgent.FIND('-');

      ShowOptPageShippingAgent(ShippingAgent,'',FALSE,8,SourceID,TableID,0,SecondSourceID,0,'','');
    END;

    PROCEDURE CloseManifestCarriers@32(CurrentManifestHeader@1000000000 : Record 14000712);
    BEGIN
      WITH CurrentManifestHeader DO BEGIN
        IF "UPS Processing Required" THEN
          UPSTransaction.CloseManifest(CurrentManifestHeader);
        IF "FedEx Processing Required" THEN
          FedExTransaction.CloseManifest(CurrentManifestHeader);
        IF "LTL Processing Required" THEN
          LTLTransaction.CloseManifest(CurrentManifestHeader);
        IF "Generic Processing Required" THEN
          GenericTransaction.CloseManifest(CurrentManifestHeader);
        IF "USPS Processing Required" THEN
          USPSTransaction.CloseManifest(CurrentManifestHeader);
        IF "USPostal Processing Required" THEN
          USPostalTransaction.CloseManifest(CurrentManifestHeader);
        IF "Rating Processing Required" THEN
          RatingTransaction.CloseManifest(CurrentManifestHeader);
      END;
    END;

    PROCEDURE OpenManifest@31(VAR CurrentManifestHeader@1000000000 : Record 14000712);
    BEGIN
      WITH CurrentManifestHeader DO BEGIN
        IF "UPS Processing Required" THEN
          IF NOT CONFIRM(Text003,FALSE,FIELDNAME("UPS Processing Required")) THEN
            EXIT;
        IF "FedEx Processing Required" THEN
          IF NOT CONFIRM(Text003,FALSE,FIELDNAME("FedEx Processing Required")) THEN
            EXIT;
        IF "LTL Processing Required" THEN
          IF NOT CONFIRM(Text003,FALSE,FIELDNAME("LTL Processing Required")) THEN
            EXIT;
        IF "Generic Processing Required" THEN
          IF NOT CONFIRM(Text003,FALSE,FIELDNAME("Generic Processing Required")) THEN
            EXIT;
        IF "USPS Processing Required" THEN
          IF NOT CONFIRM(Text003,FALSE,FIELDNAME("USPS Processing Required")) THEN
            EXIT;
        IF "Airborne Processing Required" THEN
          IF NOT CONFIRM(Text003,FALSE,FIELDNAME("Airborne Processing Required")) THEN
            EXIT;
        IF "DHL Processing Required" THEN
          IF NOT CONFIRM(Text003,FALSE,FIELDNAME("DHL Processing Required")) THEN
            EXIT;
        IF "USPostal Processing Required" THEN
          IF NOT CONFIRM(Text003,FALSE,FIELDNAME("USPostal Processing Required")) THEN
            EXIT;
        IF "Rating Processing Required" THEN
          IF NOT CONFIRM(Text003,FALSE,FIELDNAME("Rating Processing Required")) THEN
            EXIT;
      END;
    END;

    PROCEDURE OpenManifestCarriers@34(VAR CurrentManifestHeader@1000000000 : Record 14000712);
    BEGIN
      WITH CurrentManifestHeader DO BEGIN
        IF "UPS Processing Required" THEN
          UPSTransaction.OpenManifest(CurrentManifestHeader);
        IF "FedEx Processing Required" THEN
          FedExTransaction.OpenManifest(CurrentManifestHeader);
        IF "LTL Processing Required" THEN
          LTLTransaction.OpenManifest(CurrentManifestHeader);
        IF "Generic Processing Required" THEN
          GenericTransaction.OpenManifest(CurrentManifestHeader);
        IF "USPS Processing Required" THEN
          USPSTransaction.OpenManifest(CurrentManifestHeader);
        IF "USPostal Processing Required" THEN
          USPostalTransaction.OpenManifest(CurrentManifestHeader);
        IF "Rating Processing Required" THEN
          RatingTransaction.OpenManifest(CurrentManifestHeader);
      END;
    END;

    PROCEDURE SetCarrierProcessing@35(VAR CurrentManifestHeader@1000000000 : Record 14000712;ShippingAgent@1240030000 : Record 291);
    BEGIN
      WITH CurrentManifestHeader DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            "UPS Processing Required" := TRUE;
          ShippingAgent."Shipper Type"::FEDEX:
            "FedEx Processing Required" := TRUE;
          ShippingAgent."Shipper Type"::LTL:
            "LTL Processing Required" := TRUE;
          ShippingAgent."Shipper Type"::Generic:
            "Generic Processing Required" := TRUE;
          ShippingAgent."Shipper Type"::"4":
            "USPS Processing Required" := TRUE;
          ShippingAgent."Shipper Type"::"5":
            "Airborne Processing Required" := TRUE;
          ShippingAgent."Shipper Type"::"6":
            "DHL Processing Required" := TRUE;
          ShippingAgent."Shipper Type"::USPostal:
            "USPostal Processing Required" := TRUE;
          ShippingAgent."Shipper Type"::"8":
            "Rating Processing Required" := TRUE;
        END;
      END;
    END;

    PROCEDURE ShowStandardSetupOptionPage@41(ShipperType@1000000000 : Integer;NewOptionPageNo@1000000001 : Code[20]);
    VAR
      ShippingAgent@1240030000 : Record 291;
    BEGIN
      CASE ShipperType OF
        ShippingAgent."Shipper Type"::UPS:
          BEGIN
            IF NOT UPSOptionPage.GET(UPSOptionPage.Type::"Standard Option",NewOptionPageNo,0,0,'')
            THEN BEGIN
              UPSOptionPage.Type := UPSOptionPage.Type::"Standard Option";
              UPSOptionPage."Source ID" := NewOptionPageNo;
              UPSOptionPage."Source Type" := 0;
              UPSOptionPage."Source Subtype" := 0;
              UPSOptionPage.INIT;
              UPSOptionPage.INSERT;
            END;

            UPSOptionPage.RESET;
            UPSOptionPage.SETRECFILTER;
            PAGE.RUN(PAGE::"UPS Option Page Card",UPSOptionPage);
          END;
        ShippingAgent."Shipper Type"::FEDEX:
          BEGIN
            IF NOT FedExOptionPage.GET(FedExOptionPage.Type::"Standard Option",NewOptionPageNo,0,0,'')
            THEN BEGIN
              FedExOptionPage.Type := FedExOptionPage.Type::"Standard Option";
              FedExOptionPage."Source ID" := NewOptionPageNo;
              FedExOptionPage."Source Type" := 0;
              FedExOptionPage."Source Subtype" := 0;
              FedExOptionPage.INIT;
              FedExOptionPage.INSERT;
            END;

            FedExOptionPage.RESET;
            FedExOptionPage.SETRECFILTER;
            PAGE.RUN(PAGE::"FedEx Option Page Card",FedExOptionPage);
          END;
        ShippingAgent."Shipper Type"::LTL:
          BEGIN
            IF NOT LTLOptionPage.GET(LTLOptionPage.Type::"Standard Option",NewOptionPageNo,0,0,'')
            THEN BEGIN
              LTLOptionPage.Type := LTLOptionPage.Type::"Standard Option";
              LTLOptionPage."Source ID" := NewOptionPageNo;
              LTLOptionPage."Source Type" := 0;
              LTLOptionPage."Source Subtype" := 0;
              LTLOptionPage.INIT;
              LTLOptionPage.INSERT;
            END;

            LTLOptionPage.RESET;
            LTLOptionPage.SETRECFILTER;
            PAGE.RUN(PAGE::"LTL Option Page Card",LTLOptionPage);
          END;
        ShippingAgent."Shipper Type"::Generic:
          BEGIN
            IF NOT GenericOptionPage.GET(GenericOptionPage.Type::"Standard Option",NewOptionPageNo,0,0,'')
            THEN BEGIN
              GenericOptionPage.Type := GenericOptionPage.Type::"Standard Option";
              GenericOptionPage."Source ID" := NewOptionPageNo;
              GenericOptionPage."Source Type" := 0;
              GenericOptionPage."Source Subtype" := 0;
              GenericOptionPage.INIT;
              GenericOptionPage.INSERT;
            END;

            GenericOptionPage.RESET;
            GenericOptionPage.SETRECFILTER;
            PAGE.RUN(PAGE::"Generic Option Page Card",GenericOptionPage);
          END;
        ShippingAgent."Shipper Type"::"4":
          BEGIN
            IF NOT USPSOptionPage.GET(USPSOptionPage.Type::"Standard Option",NewOptionPageNo,0,0,'')
            THEN BEGIN
              USPSOptionPage.Type := USPSOptionPage.Type::"Standard Option";
              USPSOptionPage."Source ID" := NewOptionPageNo;
              USPSOptionPage."Source Type" := 0;
              USPSOptionPage."Source Subtype" := 0;
              USPSOptionPage.INIT;
              USPSOptionPage.INSERT;
            END;

            USPSOptionPage.RESET;
            USPSOptionPage.SETRECFILTER;
            PAGE.RUN(PAGE::"USPS Option Page Card",USPSOptionPage);
          END;
        ShippingAgent."Shipper Type"::USPostal:
          BEGIN
            IF NOT USPostalOptionPage.GET(USPostalOptionPage.Type::"Standard Option",NewOptionPageNo,0,0,'')
            THEN BEGIN
              USPostalOptionPage.Type := USPostalOptionPage.Type::"Standard Option";
              USPostalOptionPage."Source ID" := NewOptionPageNo;
              USPostalOptionPage."Source Type" := 0;
              USPostalOptionPage."Source Subtype" := 0;
              USPostalOptionPage.INIT;
              USPostalOptionPage.INSERT;
            END;

            USPostalOptionPage.RESET;
            USPostalOptionPage.SETRECFILTER;
            PAGE.RUN(PAGE::"USPostal Option Page Card",USPostalOptionPage);
          END;
        ShippingAgent."Shipper Type"::"8":
          BEGIN
            IF NOT RatingOptionPage.GET(RatingOptionPage.Type::"Standard Option",NewOptionPageNo,0,0,'')
            THEN BEGIN
              RatingOptionPage.Type := RatingOptionPage.Type::"Standard Option";
              RatingOptionPage."Source ID" := NewOptionPageNo;
              RatingOptionPage."Source Type" := 0;
              RatingOptionPage."Source Subtype" := 0;
              RatingOptionPage.INIT;
              RatingOptionPage.INSERT;
            END;

            RatingOptionPage.RESET;
            RatingOptionPage.SETRECFILTER;
            PAGE.RUN(PAGE::"Rating Option Page Card",RatingOptionPage);
          END;
        // >> ECS
        ShippingAgent."Shipper Type"::Extended:
          ECShowStandardSetupOptionPage(ShipperType, NewOptionPageNo);
        // << ECS
      END;
    END;

    PROCEDURE VoidManifestLine@1240030021(VAR CurrentManifestLine@1240030000 : Record 14000713;ShippingAgent@1240030001 : Record 291);
    BEGIN
      CASE ShippingAgent."Shipper Type" OF
        ShippingAgent."Shipper Type"::UPS:
          UPSTransaction.VoidManifestLine(CurrentManifestLine);
        ELSE
          ERROR(Text004,ShippingAgent.FIELDCAPTION("Shipper Type"),ShippingAgent."Shipper Type");
      END;
    END;

    PROCEDURE Cod14000702CreateManifest@1240030020(PackingStation@1240030000 : Record 14000709;ShippingAgent@1240030001 : Record 291);
    VAR
      CarrierPackingStation@1240030002 : Record 14000729;
    BEGIN
      CarrierPackingStation.GetPackingStation(PackingStation);

      CASE ShippingAgent."Shipper Type" OF
        ShippingAgent."Shipper Type"::UPS:
          IF CarrierPackingStation."UPS Shipping Agent Account No." <> '' THEN
            UPSTransaction.CreateManifest(CarrierPackingStation."UPS Shipping Agent Account No.");
        ShippingAgent."Shipper Type"::FEDEX:
          IF CarrierPackingStation."FedEx Shipping Agent Acc. No." <> '' THEN BEGIN
            FedExShippingAgentAccount.GET(CarrierPackingStation."FedEx Shipping Agent Acc. No.");

            FedExTransaction.CreateManifest(FedExShippingAgentAccount);
          END;
        ShippingAgent."Shipper Type"::LTL:
          IF ShippingAgent."LTL Shipping Agent Account No." <> '' THEN BEGIN
            LTLShippingAgentAccount.GET(ShippingAgent."LTL Shipping Agent Account No.");

            LTLTransaction.CreateManifest(LTLShippingAgentAccount);
          END;
        ShippingAgent."Shipper Type"::Generic:
          IF CarrierPackingStation."Generic Shipping Agent Acc. No" <> '' THEN BEGIN
            GenericShippingAgentAccount.GET(CarrierPackingStation."Generic Shipping Agent Acc. No");

            GenericTransaction.CreateManifest(GenericShippingAgentAccount);
          END;
        ShippingAgent."Shipper Type"::"4":
          IF CarrierPackingStation."USPS Shipping Agent Acc. No" <> '' THEN BEGIN
            USPSShippingAgentAccount.GET(CarrierPackingStation."USPS Shipping Agent Acc. No");

            USPSTransaction.CreateManifest(USPSShippingAgentAccount);
          END;
        ShippingAgent."Shipper Type"::USPostal:
          IF CarrierPackingStation."USPostal Shipping Agent Acc No" <> '' THEN BEGIN
            USPostalShippingAgentAccount.GET(CarrierPackingStation."USPostal Shipping Agent Acc No");

            USPostalTransaction.CreateManifest(USPostalShippingAgentAccount);
          END;
        ShippingAgent."Shipper Type"::"8":
          IF CarrierPackingStation."Rating Shipping Agent Acc. No" <> '' THEN BEGIN
            RatingShippingAgentAccount.GET(CarrierPackingStation."Rating Shipping Agent Acc. No");

            RatingTransaction.CreateManifest(RatingShippingAgentAccount);
          END;
      END;
    END;

    PROCEDURE Cod14000703CopyOptionPage@1240030019(CurrentPackage@1000000000 : Record 14000701;ShippingAgent@1240030000 : Record 291;NewPackageNo@1000000001 : Code[20]);
    BEGIN
      WITH CurrentPackage DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            BEGIN
              UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.",0,0,'');
              UPSOptionPage."Source ID" := NewPackageNo;
              UPSOptionPage.INSERT;
            END;
          ShippingAgent."Shipper Type"::FEDEX:
            BEGIN
              FedExOptionPage.GET(FedExOptionPage.Type::Package,"No.",0,0,'');
              FedExOptionPage."Source ID" := NewPackageNo;
              FedExOptionPage.INSERT;
              FedExOptionPageExt.GET(FedExOptionPageExt.Type::Package,"No.",0,0,'');
              FedExOptionPageExt."Source ID" := NewPackageNo;
              FedExOptionPageExt.INSERT;
            END;
          ShippingAgent."Shipper Type"::LTL:
            BEGIN
              LTLOptionPage.GET(LTLOptionPage.Type::Package,"No.",0,0,'');
              LTLOptionPage."Source ID" := NewPackageNo;
              LTLOptionPage.INSERT;
            END;
          ShippingAgent."Shipper Type"::Generic:
            BEGIN
              GenericOptionPage.GET(GenericOptionPage.Type::Package,"No.",0,0,'');
              GenericOptionPage."Source ID" := NewPackageNo;
              GenericOptionPage.INSERT;
            END;
          ShippingAgent."Shipper Type"::"4":
            BEGIN
              USPSOptionPage.GET(USPSOptionPage.Type::Package,"No.",0,0,'');
              USPSOptionPage."Source ID" := NewPackageNo;
              USPSOptionPage.INSERT;
            END;
          ShippingAgent."Shipper Type"::USPostal:
            BEGIN
              USPostalOptionPage.GET(USPostalOptionPage.Type::Package,"No.",0,0,'');
              USPostalOptionPage."Source ID" := NewPackageNo;
              USPostalOptionPage.INSERT;
            END;
          ShippingAgent."Shipper Type"::"8":
            BEGIN
              RatingOptionPage.GET(RatingOptionPage.Type::Package,"No.",0,0,'');
              RatingOptionPage."Source ID" := NewPackageNo;
              RatingOptionPage.INSERT;
            END;
        END;
      END;
    END;

    PROCEDURE Cod14000703DeleteOptionPage@1240030018(CurrentPackage@1000000000 : Record 14000701;ShippingAgent@1240030000 : Record 291);
    BEGIN
      DeleteOptionPage(ShippingAgent,UPSOptionPage.Type::Package,CurrentPackage."No.",0,0,'');
    END;

    PROCEDURE GetMasterWaybillNo@1240030025(PackageNo@1240030003 : Code[20]) : Text[30];
    VAR
      ShippingAgent@1240030000 : Record 291;
    BEGIN
      Package.GET(PackageNo);
      IF NOT ShippingAgent.GET(Package."Shipping Agent Code") THEN
        EXIT(Package."External Tracking No.")
      ELSE
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            BEGIN
              UPSOptionPage.GET(UPSOptionPage.Type::Package,Package."No.",0,0,'');
              EXIT(UPSOptionPage."Waybill No.");
            END;
          ShippingAgent."Shipper Type"::FEDEX:
            BEGIN
              FedExOptionPage.GET(FedExOptionPage.Type::Package,Package."No.",0,0,'');
              IF FedExOptionPage."Master Tracking No." <> '' THEN
                EXIT(FedExOptionPage."Master Tracking No.")
              ELSE
                EXIT(Package."External Tracking No.");
            END;
        END;
    END;

    PROCEDURE GetPostedMasterWaybillNo@1240030028(PackageNo@1240030003 : Code[20]) : Text[30];
    VAR
      ShippingAgent@1240030000 : Record 291;
    BEGIN
      PostedPackage.GET(PackageNo);
      IF NOT ShippingAgent.GET(PostedPackage."Shipping Agent Code") THEN
        EXIT(PostedPackage."External Tracking No.")
      ELSE
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            BEGIN
              UPSPostedOptionPage.GET(PostedPackage."No.");
              EXIT(UPSPostedOptionPage."Waybill No.");
            END;
          ShippingAgent."Shipper Type"::FEDEX:
            BEGIN
              FedExPostedOptionPage.GET(PostedPackage."No.");
              IF FedExPostedOptionPage."Master Tracking No." <> '' THEN
                EXIT(FedExPostedOptionPage."Master Tracking No.")
              ELSE
                EXIT(PostedPackage."External Tracking No.");
            END;
          ELSE
            EXIT(PostedPackage."External Tracking No.");
        END;
    END;

    PROCEDURE CarrierDimensionsRequired@1240030101(CurrentPackage@1240020000 : Record 14000701;ShippingAgent@1240020001 : Record 291) : Boolean;
    BEGIN
      WITH CurrentPackage DO BEGIN
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            BEGIN
              IF UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.",0,0,'') THEN BEGIN
                IF UPSOptionPage."UPS Packaging Type" = UPSOptionPage."UPS Packaging Type"::"UPS Letter" THEN
                  EXIT(FALSE)
                ELSE
                  EXIT(TRUE);
              END;
            END;
          ELSE
            EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE UpdateExportDocSoldTo@1240030027(VAR ExportDoc@1240030000 : Record 14000981;PackageNo@1240030001 : Code[20]) : Boolean;
    VAR
      ShippingAgent@1240030002 : Record 291;
    BEGIN
      Package.GET(PackageNo);
      IF NOT ShippingAgent.GET(Package."Shipping Agent Code") THEN
        EXIT(FALSE)
      ELSE
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            BEGIN
              UPSOptionPage.GET(UPSOptionPage.Type::Package,Package."No.",0,0,'');
              IF UPSOptionPage."Importer Name" <> '' THEN BEGIN
                ExportDoc."Alt. Sold-to" := TRUE;
                ExportDoc."Sold-to Name" := UPSOptionPage."Importer Name";
                ExportDoc."Sold-to Address" := UPSOptionPage."Importer Address";
                ExportDoc."Sold-to Address 2" := UPSOptionPage."Impoter Address 2";
                ExportDoc."Sold-to City" := UPSOptionPage."Importer City";
                ExportDoc."Sold-to State" := UPSOptionPage."Importer State";
                ExportDoc."Sold-to ZIP Code" := UPSOptionPage."Importer ZIP Code";
                ExportDoc.VALIDATE("Sold-to Country Code",UPSOptionPage."Importer Country Code");
                ExportDoc."Sold-to Contact" := UPSOptionPage."Importer Contact";
                ExportDoc."Sold-to Phone No." := UPSOptionPage."Importer Phone No.";
                ExportDoc."Sold-to VAT Registration No." := UPSOptionPage."Importer Tax ID";
                EXIT(TRUE);
              END ELSE
                ExportDoc."Alt. Sold-to" := FALSE;
                ExportDoc."Sold-to Name" := '';
                ExportDoc."Sold-to Address" := '';
                ExportDoc."Sold-to Address 2" := '';
                ExportDoc."Sold-to City" := '';
                ExportDoc."Sold-to State" := '';
                ExportDoc."Sold-to ZIP Code" := '';
                ExportDoc."Sold-to Country Code":= '';
                ExportDoc."Sold-to Contact" := '';
                ExportDoc."Sold-to Phone No." := '';
                ExportDoc."Sold-to VAT Registration No." := '';
                EXIT(TRUE);
            END;
          ELSE
            EXIT(FALSE);
      END;
    END;

    PROCEDURE TrackPackage@1240030032(Package@1240030000 : Record 14000701);
    VAR
      ShippingAgent@1240030001 : Record 291;
    BEGIN
      WITH Package DO BEGIN
        ShippingAgent.GET("Shipping Agent Code");

        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            UPSTransaction.TrackPackage(Package);
          ShippingAgent."Shipper Type"::FEDEX:
            FedExTransaction.TrackPackage(Package);
          ShippingAgent."Shipper Type"::LTL:
            LTLTransaction.TrackPackage(Package);
          ShippingAgent."Shipper Type"::Generic:
            GenericTransaction.TrackPackage(Package);
          ShippingAgent."Shipper Type"::"4":
            USPSTransaction.TrackPackage(Package);
          ShippingAgent."Shipper Type"::USPostal:
            USPostalTransaction.TrackPackage(Package);
          ShippingAgent."Shipper Type"::"8":
            RatingTransaction.TrackPackage(Package);
          // >> ECS
          ShippingAgent."Shipper Type"::Extended:
            ECTrackPackage(Package);
          // << ECS
         //<TPZ1155>
         ELSE
           LTLTransaction.TrackPackage(Package);
         //</TPZ1155>
        END;
      END;
    END;

    PROCEDURE TrackPostedPackage@1240030031(PostedPackage@1240030000 : Record 14000704);
    VAR
      Package@1240030001 : Record 14000701;
    BEGIN
      Package.TRANSFERFIELDS(PostedPackage);
      TrackPackage(Package);
    END;

    PROCEDURE CheckManifest@1240030100(CurrentManifestHeader@1240020000 : Record 14000712) : Boolean;
    BEGIN
      WITH CurrentManifestHeader DO BEGIN
        IF "Shipping Agent Code" = '' THEN
          EXIT(TRUE)
        ELSE
          CASE "Shipping Agent Code" OF
            'UPS':
              EXIT(UPSTransaction.CheckManifest(CurrentManifestHeader));
            ELSE
              EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE UpdateExportDocPostedSoldTo@1240030029(VAR ExportDoc@1240030000 : Record 14000981;PackageNo@1240030001 : Code[20]) : Boolean;
    VAR
      ShippingAgent@1240030002 : Record 291;
    BEGIN
      PostedPackage.GET(PackageNo);
      IF NOT ShippingAgent.GET(PostedPackage."Shipping Agent Code") THEN
        EXIT(FALSE)
      ELSE
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            BEGIN
              UPSPostedOptionPage.GET(PostedPackage."No.");
              IF UPSPostedOptionPage."Importer Name" <> '' THEN BEGIN
                ExportDoc."Sold-to Name" := UPSPostedOptionPage."Importer Name";
                ExportDoc."Sold-to Address" := UPSPostedOptionPage."Importer Address";
                ExportDoc."Sold-to Address 2" := UPSPostedOptionPage."Impoter Address 2";
                ExportDoc."Sold-to City" := UPSPostedOptionPage."Importer City";
                ExportDoc."Sold-to State" := UPSPostedOptionPage."Importer State";
                ExportDoc."Sold-to ZIP Code" := UPSPostedOptionPage."Importer ZIP Code";
                ExportDoc.VALIDATE("Sold-to Country Code",UPSPostedOptionPage."Importer Country Code");
                ExportDoc."Sold-to Contact" := UPSPostedOptionPage."Importer Contact";
                ExportDoc."Sold-to Phone No." := UPSPostedOptionPage."Importer Phone No.";
                ExportDoc."Sold-to VAT Registration No." := UPSPostedOptionPage."Importer Tax ID";
                ExportDoc."Alt. Sold-to" := TRUE;
                EXIT(TRUE);
              END ELSE
                IF ExportDoc."Sold-to Name" <> '' THEN BEGIN
                  ExportDoc."Sold-to Name" := '';
                  ExportDoc."Sold-to Address" := '';
                  ExportDoc."Sold-to Address 2" := '';
                  ExportDoc."Sold-to City" := '';
                  ExportDoc."Sold-to State" := '';
                  ExportDoc."Sold-to ZIP Code" := '';
                  ExportDoc."Sold-to Country Code":= '';
                  ExportDoc."Sold-to Contact" := '';
                  ExportDoc."Sold-to Phone No." := '';
                  ExportDoc."Sold-to VAT Registration No." := '';
                  ExportDoc."Alt. Sold-to" := FALSE;
                  EXIT(TRUE);
                END ELSE
                  EXIT(FALSE);
            END;
          ELSE
            EXIT(FALSE);
      END;
    END;

    PROCEDURE ExportDocRequired@1240031035(CurrentPackage@1240030005 : Record 14000701;ShippingAgent@1240030001 : Record 291;ShippingSetup@1240030002 : Record 14000707) : Boolean;
    VAR
      Country@1240030003 : Record 9;
      CurrentPackageNo@1240030000 : Code[20];
    BEGIN
      IF ShippingSetup."Disable Export Documentation" OR
         ShippingAgent."Disable Export Documentation"
      THEN
        EXIT(FALSE);

       IF CurrentPackage."Intra Canadian Service" THEN
         EXIT(FALSE);
       IF ShippingAgent."FedEx Canadian Shipping Agent" THEN
         IF Country.GET(CurrentPackage."Ship-to Country Code") THEN
           IF Country."ISO 2 char Country Code" <> 'CA' THEN
             EXIT(TRUE);
      IF Country.GET(CurrentPackage."Ship-to Country Code") THEN
        IF Country."ISO 2 char Country Code" <> 'US' THEN
          EXIT(TRUE);

      IF CurrentPackage."Multi Document Package" AND
         (CurrentPackage."Original Package No." <> '')
      THEN
        CurrentPackageNo := CurrentPackage."Original Package No."
      ELSE
        CurrentPackageNo := CurrentPackage."No.";

      CASE ShippingAgent."Shipper Type" OF
        ShippingAgent."Shipper Type"::USPostal:
          BEGIN
            IF USPostalOptionPage.GET(0,CurrentPackageNo,0,0,'') THEN
              IF USPostalOptionPage."APO/FPO" THEN
                EXIT(TRUE);
          END;
      END;
    END;

    PROCEDURE DeleteExportSourceDoc@1240030037(ExportSourceDoc@1240030000 : Record 14000982);
    VAR
      ExportDoc@1240030002 : Record 14000981;
      ShippingAgent@1240030001 : Record 291;
    BEGIN
      ExportDoc.GET(ExportSourceDoc."Export Document No.");
      IF NOT ShippingAgent.GET(ExportDoc."Shipping Agent Code") THEN
        EXIT
      ELSE
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            BEGIN
              IF ExportSourceDoc.ClosedPackagesExist OR
                 ExportSourceDoc.ClosedMiscPackagesExist
              THEN
                ERROR(
                  Text009,Package.TABLECAPTION,ExportDoc.TABLECAPTION,ExportDoc."No.",
                  ExportSourceDoc.TABLECAPTION,ExportSourceDoc."Source ID");

              IF ExportSourceDoc.PostedPackagesExist OR
                 ExportSourceDoc.PostedMiscPackagesExist
              THEN
                ERROR(
                  Text009,PostedPackage.TABLECAPTION,ExportDoc.TABLECAPTION,ExportDoc."No.",
                  ExportSourceDoc.TABLECAPTION,ExportSourceDoc."Source ID");
              UPSTransaction.DeleteExportSourceDoc(ExportSourceDoc);
            END;
          ShippingAgent."Shipper Type"::FEDEX:
            BEGIN
              IF ExportSourceDoc.ClosedPackagesExist OR
                 ExportSourceDoc.ClosedMiscPackagesExist
              THEN
                ERROR(
                  Text009,Package.TABLECAPTION,ExportDoc.TABLECAPTION,ExportDoc."No.",
                  ExportSourceDoc.TABLECAPTION,ExportSourceDoc."Source ID");

              IF ExportSourceDoc.PostedPackagesExist OR
                 ExportSourceDoc.PostedMiscPackagesExist
              THEN
                ERROR(
                  Text009,PostedPackage.TABLECAPTION,ExportDoc.TABLECAPTION,ExportDoc."No.",
                  ExportSourceDoc.TABLECAPTION,ExportSourceDoc."Source ID");
            END;
          ELSE
            EXIT;
        END;
    END;

    PROCEDURE DeleteExportDoc@1240030038(ExportDocNo@1240030000 : Code[20]);
    VAR
      ExportDoc@1240030003 : Record 14000981;
      ShippingAgent@1240030001 : Record 291;
    BEGIN
      ExportDoc.GET(ExportDocNo);
      IF NOT ShippingAgent.GET(ExportDoc."Shipping Agent Code") THEN
        EXIT
      ELSE
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            BEGIN
              IF ExportDoc.ClosedPackagesExist THEN
                ERROR(
                  Text009,Package.TABLECAPTION,ExportDoc.TABLECAPTION,ExportDoc."No.");
              IF ExportDoc.PostedPackagesExist THEN
                ERROR(
                  Text009,PostedPackage.TABLECAPTION,ExportDoc.TABLECAPTION,ExportDoc."No.");
              UPSTransaction.DeleteExportDoc(ExportDocNo);
            END;
          ShippingAgent."Shipper Type"::FEDEX:
            BEGIN
              IF ExportDoc.ClosedPackagesExist THEN
                ERROR(
                  Text009,Package.TABLECAPTION,ExportDoc.TABLECAPTION,ExportDoc."No.");
              IF ExportDoc.PostedPackagesExist THEN
                ERROR(
                  Text009,PostedPackage.TABLECAPTION,ExportDoc.TABLECAPTION,ExportDoc."No.");
            END;
          ELSE
            EXIT;
        END;
    END;

    PROCEDURE PrintExportDocs@1240030039(ExportDocNo@1240030000 : Code[20]) : Boolean;
    VAR
      ExportDoc@1240030002 : Record 14000981;
      ShippingAgent@1240030003 : Record 291;
    BEGIN
      ExportDoc.GET(ExportDocNo);
      IF NOT ShippingAgent.GET(ExportDoc."Shipping Agent Code") THEN
        EXIT(TRUE)
      ELSE
        CASE ShippingAgent."Shipper Type" OF
          ShippingAgent."Shipper Type"::UPS:
            EXIT(UPSTransaction.PrintExportDocsOnCloseOrder(ExportDocNo));
          ELSE
            EXIT(TRUE);
        END;
    END;

    [Business]
    LOCAL PROCEDURE ECGetShippingCharge@1240020001(CurrentPackage@1240020000 : Record 14000701);
    BEGIN
    END;

    [Business]
    LOCAL PROCEDURE ECClosePackage@1240020002(VAR Package@1240020000 : Record 14000701;VAR MultiDocPackageTmp@1240020001 : TEMPORARY Record 14000701;PrintLabel@1240020002 : Boolean);
    BEGIN
    END;

    [Business]
    LOCAL PROCEDURE ECOpenPackage@1240020011(VAR CurrentPackage@1240020000 : Record 14000701);
    BEGIN
    END;

    [Business]
    LOCAL PROCEDURE ECTrackPackage@1240020003(VAR Package@1240020000 : Record 14000701);
    BEGIN
    END;

    [Business]
    LOCAL PROCEDURE ECShowOptPageShipAgentService@1240020004(CurrentShippingAgentService@1240020000 : Record 14000708);
    BEGIN
    END;

    [Business]
    LOCAL PROCEDURE ECShowOptPageItemResource@1240020005(TableID@1240020000 : Integer;SourceID@1240020001 : Code[20]);
    BEGIN
    END;

    [Business]
    LOCAL PROCEDURE ECShowPackageOptions@1240020006(CurrentPackage@1240020000 : Record 14000701;ShippingAgent@1240020001 : Record 291);
    BEGIN
    END;

    [Business]
    LOCAL PROCEDURE ECPackageInsertOptionPage@1240020007(VAR CurrentPackage@1240020000 : Record 14000701);
    BEGIN
    END;

    [Business]
    LOCAL PROCEDURE ECPackageDeleteOptionPage@1240020008(CurrentPackage@1240020000 : Record 14000701);
    BEGIN
    END;

    [Business]
    LOCAL PROCEDURE ECShowOptPageShippingAgent@1240020009(ShippingAgent@1240020010 : Record 291;ShippingAgentService@1240020009 : Code[30];WorldWideService@1240020008 : Boolean;ReferenceType@1240020007 : Integer;ReferenceSourceID@1240020006 : Code[20];ReferenceSourceType@1240020005 : Integer;ReferenceSourceSubtype@1240020004 : Integer;ReferenceSecondSourceID@1240020003 : Code[20];MasterDataTableID@1240020002 : Integer;MasterDataSourceID@1240020001 : Code[20];MasterDataSecondSourceID@1240020000 : Code[20]);
    BEGIN
    END;

    [Business]
    LOCAL PROCEDURE ECGetAlwaysConfirmCOD@1240020010(ShippingAgent@1240020000 : Record 291;CarrierPackingStation@1240020001 : Record 14000729;VAR AlwaysConfirmCOD@1240020002 : Boolean);
    BEGIN
    END;

    [Business]
    LOCAL PROCEDURE ECDeleteOptionPages@1240020012(Type@1240020004 : Integer;SourceID@1240020003 : Code[20];SourceType@1240020002 : Integer;SourceSubtype@1240020001 : Integer;SecondSourceID@1240020000 : Code[20]);
    BEGIN
    END;

    [Business]
    LOCAL PROCEDURE ECDeleteOptionPage@1240020013(Type@1240020004 : Integer;SourceID@1240020003 : Code[20];SourceType@1240020002 : Integer;SourceSubtype@1240020001 : Integer;SecondSourceID@1240020000 : Code[20]);
    BEGIN
    END;

    [Business]
    LOCAL PROCEDURE ECCopyPackageOptionPage@1240020014(CurrentPackage@1240020000 : Record 14000701;Package@1240020001 : Record 14000701);
    BEGIN
    END;

    [Business]
    LOCAL PROCEDURE ECPackageSetStdSetupOptionPage@1240020015(VAR CurrentPackage@1240020000 : Record 14000701;OptionPageNo@1240020001 : Code[20]);
    BEGIN
    END;

    [Business]
    LOCAL PROCEDURE ECPackageLineUpdateOptionPage@1240020016(VAR CurrentPackageLine@1240020001 : Record 14000702;Package@1240020000 : Record 14000701);
    BEGIN
    END;

    [Business]
    LOCAL PROCEDURE ECPostCarrierOptionPage@1240020017(CurrentPackage@1240020000 : Record 14000701);
    BEGIN
    END;

    [Business]
    LOCAL PROCEDURE ECReopenPostedPackage@1240020018(VAR CurrentPostedPackage@1240020000 : Record 14000704);
    BEGIN
    END;

    [Business]
    LOCAL PROCEDURE ECShowPostedPackageOptions@1240020019(CurrentPostedPackage@1240020000 : Record 14000704);
    BEGIN
    END;

    [Business]
    LOCAL PROCEDURE ECShowStandardSetupOptionPage@1240020020(ShipperType@1240020001 : Integer;NewOptionPageNo@1240020000 : Code[20]);
    BEGIN
    END;

    [Business]
    LOCAL PROCEDURE ECPrintShippingLabel@1240020021(CurrentPackage@1240020000 : Record 14000701);
    BEGIN
    END;

    BEGIN
    END.
  }
}

