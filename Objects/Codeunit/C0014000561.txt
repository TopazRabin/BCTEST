OBJECT Codeunit 14000561 Create Purchase Order
{
  OBJECT-PROPERTIES
  {
    Date=03/01/20;
    Time=12:00:00 PM;
    Version List=UBP3.02;
  }
  PROPERTIES
  {
    TableNo=14000565;
    OnRun=VAR
            InvMgmtSetup@1240030003 : Record 14000551;
            Location@1001 : Record 14;
            PurchHeader@14000500 : Record 38;
            SugOrderHeader@14000501 : Record 14000565;
            SugOrderLine@14000502 : Record 14000566;
            PostSugOrderHeader@14000503 : Record 14000567;
            PostSugOrderLine@14000504 : Record 14000568;
            TempLocation@14000505 : TEMPORARY Record 14;
            TempVendor@1240030000 : TEMPORARY Record 23;
            TransferHeader@1240030001 : Record 5740;
            TransferLine@1240030002 : Record 5741;
            VendorBuyingCalendar@1000 : Record 14000563;
            Window@14000506 : Dialog;
            Text000@14000507 : TextConst 'ENU=Creating Purchase Order\';
            Text001@14000508 : TextConst 'ENU=Vendor';
            Text002@14000509 : TextConst 'ENU=Creating Purchase Lines';
            WindowTotalCount@14000510 : Integer;
            WindowProcCount@14000511 : Integer;
            Text003@1240030004 : TextConst 'ENU=Suggested Order is below Vendor Target(s).  Do you wish to continue?';
            Text004@1240030005 : TextConst 'ENU=%1 Lines have not been reviewed.  Do you wish to Continue?';
          BEGIN
            InvMgmtSetup.GET;
            SugOrderHeader.COPY(Rec);

            IF InvMgmtSetup."Check Lines Reviewed" THEN BEGIN
              SugOrderLine.SETRANGE("Buy-from Vendor No.",SugOrderHeader."Buy-from Vendor No.");
              SugOrderLine.SETRANGE("Document No.",SugOrderHeader."No.");
              SugOrderLine.SETRANGE(Type, SugOrderLine.Type::Item);
              SugOrderLine.SETFILTER("Quantity Less Transfer",'<>%1',0);
              SugOrderLine.SETFILTER("No.",'<>%','');
              SugOrderLine.SETRANGE("Line Reviewed", FALSE);
              IF NOT SugOrderLine.ISEMPTY THEN
                IF NOT CONFIRM(STRSUBSTNO(Text004, SugOrderLine.COUNT),FALSE) THEN
                  EXIT;
            END;

            IF InvMgmtSetup."Below Vendor Target Warning" THEN
              IF NOT SugOrderHeader.PurchTargetsMet THEN
                IF NOT CONFIRM(Text003) THEN
                  EXIT;

            IF InvMgmtSetup."Variant Required Warning" THEN
              CheckVariantItems(SugOrderHeader);

            SugOrderLine.SETRANGE("Buy-from Vendor No.",SugOrderHeader."Buy-from Vendor No.");
            SugOrderLine.SETRANGE("Document No.",SugOrderHeader."No.");
            SugOrderLine.SETFILTER("Quantity Less Transfer",'<>%1',0);
            SugOrderLine.SETFILTER("No.",'<>%','');
            IF SugOrderLine.ISEMPTY THEN
              EXIT;
            SugOrderLine.SETRANGE("Quantity Less Transfer");
            SugOrderLine.SETRANGE("No.");
            OnCheckSuggestedOrderBeforePurchHeaderCreate(Rec, SugOrderLine);

            IF GUIALLOWED THEN BEGIN
            Window.OPEN(
              Text000 +
              PADSTR(Text001,30) + '#1##################\' +
              PADSTR(Text002,30) + '@2@@@@@@@@@@@@@@@@@@');
            Window.UPDATE(1,SugOrderHeader."Buy-from Vendor No.");
            END;

            SugOrderLine.RESET;
            SugOrderLine.SETRANGE("Buy-from Vendor No.",SugOrderHeader."Buy-from Vendor No.");
            SugOrderLine.SETRANGE("Document No.",SugOrderHeader."No.");
            SugOrderLine.SETFILTER("Quantity Less Transfer",'<>%1',0);
            SugOrderLine.SETFILTER("No.",'<>%','');
            IF SugOrderLine.FINDSET THEN BEGIN
              TempVendor.DELETEALL();
              REPEAT
                SugOrderLine.CALCFIELDS("Qty. Transferred (Base)");
                IF (SugOrderLine.Quantity - SugOrderLine."Qty. Transferred (Base)") > 0 THEN BEGIN
                  IF NOT TempVendor.GET(SugOrderLine."Override Vendor No.") THEN BEGIN
                    TempVendor.INIT;
                    TempVendor."No." := SugOrderLine."Override Vendor No.";
                    TempVendor.INSERT(FALSE);
                  END;
                END;
              UNTIL SugOrderLine.NEXT = 0;
            END;

            SugOrderHeader.GetPostingNo;

            IF TempVendor.FINDSET THEN
              REPEAT
                IF (SugOrderHeader."Location Code" <> '') THEN BEGIN
                  CreateHeader(SugOrderHeader,SugOrderHeader."Location Code",PurchHeader,TempVendor);
                  SugOrderLine.RESET;
                  SugOrderLine.SETRANGE("Buy-from Vendor No.",SugOrderHeader."Buy-from Vendor No.");
                  SugOrderLine.SETRANGE("Document No.",SugOrderHeader."No.");
                  SugOrderLine.SETRANGE("Override Vendor No.",TempVendor."No.");
                  SugOrderLine.SETFILTER("Quantity Less Transfer",'<>%1',0);
                  SugOrderLine.SETFILTER("No.",'<>%','');

                  WindowTotalCount := SugOrderLine.COUNT * 2;
                  WindowProcCount := 0;
                  IF SugOrderLine.FIND('-') THEN
                    REPEAT
                      SugOrderLine.CALCFIELDS("Qty. Transferred (Base)");
                      IF (SugOrderLine.Quantity - SugOrderLine."Qty. Transferred (Base)") > 0 THEN
                        CreateLine(PurchHeader,SugOrderLine,SugOrderHeader,FALSE);
                      WindowProcCount := WindowProcCount + 1;
                      IF GUIALLOWED THEN BEGIN
                      IF WindowProcCount MOD 10 = 0 THEN
                        Window.UPDATE(2,ROUND(10000 * (WindowProcCount / WindowTotalCount),1));
                      END;
                    UNTIL SugOrderLine.NEXT = 0;
                    OnAfterCreatePurchaseOrder(SugOrderHeader, PurchHeader);
                  IF SugOrderLine.FIND('-') THEN BEGIN
                    REPEAT
                      SugOrderLine.CALCFIELDS("Qty. Transferred (Base)");
                      IF (SugOrderHeader."Location Code" <> SugOrderLine."Location Code") AND
                         ((SugOrderLine.Quantity - SugOrderLine."Qty. Transferred (Base)") > 0) THEN BEGIN
                        IF TransferHeader."Transfer-to Code" <> SugOrderLine."Location Code" THEN
                          CreateTransferHeader(SugOrderHeader,SugOrderLine,TransferHeader,InvMgmtSetup);
                        CreateTransferLine(SugOrderHeader,SugOrderLine,TransferHeader);
                      END;
                    UNTIL SugOrderLine.NEXT = 0;
                    OnAfterCreateTransferOrder(SugOrderHeader, TransferHeader);
                  END;
                END ELSE BEGIN
                  SugOrderLine.RESET;
                  SugOrderLine.SETRANGE("Buy-from Vendor No.",SugOrderHeader."Buy-from Vendor No.");
                  SugOrderLine.SETRANGE("Document No.",SugOrderHeader."No.");
                  SugOrderLine.SETFILTER("Quantity Less Transfer",'<>%1',0);
                  SugOrderLine.SETFILTER("No.",'<>%','');
                  SugOrderLine.SETRANGE("Override Vendor No.",TempVendor."No.");
                  WindowTotalCount := 0;
                  IF SugOrderLine.FIND('-') THEN BEGIN
                    TempLocation.DELETEALL;
                    REPEAT
                      IF NOT TempLocation.GET(SugOrderLine."Location Code") THEN BEGIN
                        TempLocation.Code := SugOrderLine."Location Code";
                        TempLocation.INSERT;
                      END;
                      WindowTotalCount := WindowTotalCount + 1;
                    UNTIL SugOrderLine.NEXT = 0;
                  END;
                  WindowTotalCount := WindowTotalCount * 2;
                  IF TempLocation.FIND('-') THEN
                    REPEAT
                      SugOrderLine.SETRANGE("Location Code",TempLocation.Code);
                      IF SugOrderLine.FIND('-') THEN BEGIN
                        CreateHeader(SugOrderHeader,TempLocation.Code,PurchHeader,TempVendor);
                        REPEAT
                          SugOrderLine.CALCFIELDS("Qty. Transferred (Base)");
                          IF (SugOrderLine.Quantity - SugOrderLine."Qty. Transferred (Base)") > 0 THEN
                            CreateLine(PurchHeader,SugOrderLine,SugOrderHeader,FALSE);
                          WindowProcCount := WindowProcCount + 1;
                          IF GUIALLOWED THEN BEGIN
                          IF WindowProcCount MOD 10 = 0 THEN
                            Window.UPDATE(2,ROUND(10000 * (WindowProcCount / WindowTotalCount),1));
                          END;
                        UNTIL SugOrderLine.NEXT = 0;
                        OnAfterCreatePurchaseOrder(SugOrderHeader, PurchHeader);
                      END;
                    UNTIL TempLocation.NEXT = 0;
                END;
              UNTIL TempVendor.NEXT = 0;

            PostSugOrder(SugOrderHeader);

            IF GUIALLOWED THEN
            Window.CLOSE;
          END;

  }
  CODE
  {
    VAR
      UBP@1240020000 : Codeunit 14000564;

    LOCAL PROCEDURE CreateHeader@5(VAR SugOrderHeader@14000500 : Record 14000565;Location@14000501 : Code[10];VAR PurchHeader@14000502 : Record 38;CurrVendor@1240030000 : Record 23);
    VAR
      PurchHeader2@14000503 : Record 38;
    BEGIN
      PurchHeader2.INIT;
      PurchHeader2."Document Type" := PurchHeader2."Document Type"::Order;
      PurchHeader2."No." := '';
      PurchHeader2.INSERT(TRUE);
      IF CurrVendor."No." = '' THEN
        PurchHeader2.VALIDATE("Buy-from Vendor No.",SugOrderHeader."Buy-from Vendor No.")
      ELSE
        PurchHeader2.VALIDATE("Buy-from Vendor No.",CurrVendor."No.");
      PurchHeader2.VALIDATE("Location Code",Location);
      PurchHeader2."Created from Suggested Order" := TRUE;
      PurchHeader2."Creation Date" := WORKDATE;
      PurchHeader2."Created By" := USERID;
      PurchHeader2."Suggested Order No." := SugOrderHeader."Posting No.";
      PurchHeader2."Requested Receipt Date" := SugOrderHeader."Requested Receipt Date";
      PurchHeader2."Purchaser Code" := SugOrderHeader."Purchaser Code";
      PurchHeader2.MODIFY(TRUE);
      OnAfterCreatePurchaseOrderHeader(SugOrderHeader,PurchHeader2);
      PurchHeader.COPY(PurchHeader2);
    END;

    LOCAL PROCEDURE CreateLine@6(PurchHeader@14000500 : Record 38;SugOrderLine@14000501 : Record 14000566;SugOrderHeader2@14000502 : Record 14000565;FromContLoad@1240030007 : Boolean);
    VAR
      CalcLine@14000503 : Record 14000569;
      ExtTextHeader@1240030003 : Record 279;
      ExtTextLine@1240030002 : Record 280;
      Item@1240030000 : Record 27;
      PostedCalcLine@14000504 : Record 14000570;
      PurchLine@14000505 : Record 39;
      PurchLine2@1240030005 : Record 39;
      ExtText@1240030001 : Boolean;
      NextLineNo@1240030004 : Integer;
      PurchQty@1000 : Decimal;
      DistIntegration@1240020000 : Codeunit 5702;
    BEGIN
      IF (SugOrderLine.Quantity - SugOrderLine."Qty. Transferred (Base)") > 0 THEN BEGIN
        PurchLine."Document Type" := PurchHeader."Document Type";
        PurchLine."Document No." := PurchHeader."No.";
        PurchLine."Line No." := SugOrderLine."Line No.";
        PurchLine."Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
        PurchLine.VALIDATE(Type,SugOrderLine.Type);
        PurchLine.VALIDATE("No.",SugOrderLine."No.");
        PurchLine.VALIDATE("Variant Code",SugOrderLine."Variant Code");
        PurchLine.VALIDATE("Unit of Measure Code",SugOrderLine."Unit of Measure Code");
        IF FromContLoad THEN
          PurchLine.VALIDATE(Quantity,SugOrderLine.Quantity)
        ELSE BEGIN
          SugOrderLine.CALCFIELDS("Qty. Transferred (Base)");
          PurchQty := SugOrderLine.Quantity - SugOrderLine."Qty. Transferred (Base)";
          PurchLine.VALIDATE(Quantity,PurchQty);
        END;
        PurchLine.VALIDATE("Planned Receipt Date", SugOrderLine."Expected Receipt Date");
        DistIntegration.EnterPurchaseItemCrossRef(PurchLine);
        PurchLine.INSERT(TRUE);
        OnAfterCreatePurchaseOrderItemLine(SugOrderHeader2, SugOrderLine, PurchHeader, PurchLine);
        IF PurchLine.Type = PurchLine.Type::Item THEN BEGIN
          Item.GET(SugOrderLine."No.");
          IF Item."Automatic Ext. Texts" THEN BEGIN
            ExtText := TRUE;
            ExtTextHeader.SETCURRENTKEY("Table Name","No.","Language Code","All Language Codes","Starting Date","Ending Date");
            ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::Item);
            ExtTextHeader.SETRANGE("No.",PurchLine."No.");
            ExtTextHeader.SETRANGE("Purchase Order",TRUE);
            ExtTextHeader.SETRANGE("Starting Date",0D,WORKDATE);
            ExtTextHeader.SETFILTER("Ending Date",'%1..|%2',WORKDATE,0D);
            IF PurchHeader."Language Code" = '' THEN BEGIN
              ExtTextHeader.SETRANGE("Language Code",'');
              IF NOT ExtTextHeader.FIND('+') THEN
                ExtText := FALSE;
            END ELSE BEGIN
              ExtTextHeader.SETRANGE("Language Code",PurchHeader."Language Code");
              IF NOT ExtTextHeader.FIND('+') THEN BEGIN
                ExtTextHeader.SETRANGE("All Language Codes",TRUE);
                ExtTextHeader.SETRANGE("Language Code",'');
                IF NOT ExtTextHeader.FIND('+') THEN
                  ExtText := FALSE;
              END;
            END;
            IF ExtText THEN BEGIN
              NextLineNo := PurchLine."Line No.";
              ExtTextLine.SETRANGE("Table Name",ExtTextHeader."Table Name");
              ExtTextLine.SETRANGE("No.",ExtTextHeader."No.");
              ExtTextLine.SETRANGE("Language Code",ExtTextHeader."Language Code");
              ExtTextLine.SETRANGE("Text No.",ExtTextHeader."Text No.");
              IF ExtTextLine.FIND('-') THEN
                REPEAT
                  PurchLine2.INIT;
                  PurchLine2."Document Type" := PurchLine."Document Type";
                  PurchLine2."Document No." := PurchLine."Document No.";
                  NextLineNo := NextLineNo + 10000;
                  PurchLine2."Line No." := NextLineNo;
                  PurchLine2.Description := ExtTextLine.Text;
                  PurchLine2.INSERT;
                UNTIL ExtTextLine.NEXT = 0;
            END;
          END;
        END;
      END;

      CalcLine.SETRANGE("Location Code",SugOrderLine."Location Code");
      CalcLine.SETRANGE("Item No.",SugOrderLine."No.");
      IF SugOrderLine."Summarize Variant Detail" THEN
        CalcLine.SETFILTER("Variant Code",'=%1','')
      ELSE
        CalcLine.SETRANGE("Variant Code",SugOrderLine."Variant Code");
      IF CalcLine.FIND('-') THEN
        REPEAT
          PostedCalcLine.TRANSFERFIELDS(CalcLine);
          IF SugOrderLine."Summarize Variant Detail" THEN
            PostedCalcLine."Variant Code" := SugOrderLine."Variant Code";
          PostedCalcLine."Suggested Order No." := SugOrderHeader2."Posting No.";
          PostedCalcLine."Suggested Order Line No." := SugOrderLine."Line No.";
          IF SugOrderLine.Quantity > 0 THEN BEGIN
            PostedCalcLine."Purchase Order No." := PurchLine."Document No.";
            PostedCalcLine."Purchase Order Line No." := PurchLine."Line No.";
          END ELSE BEGIN
            PostedCalcLine."Purchase Order No." := '';
            PostedCalcLine."Purchase Order Line No." := 0;
          END;
          IF PostedCalcLine.INSERT THEN;
        UNTIL CalcLine.NEXT = 0;
    END;

    PROCEDURE CreateTransferHeader@1240030000(VAR CurrSugOrderHeader@1240030000 : Record 14000565;VAR CurrSugOrderLine@1240030001 : Record 14000566;VAR CurrTransferHeader@1240030004 : Record 5740;CurrInvMgtSetup@1240030002 : Record 14000551);
    VAR
      TransferHeader@1240030003 : Record 5740;
    BEGIN
      TransferHeader."No." := '';
      TransferHeader.INSERT(TRUE);
      TransferHeader.VALIDATE("Transfer-from Code",CurrSugOrderHeader."Location Code");
      TransferHeader.VALIDATE("Transfer-to Code",CurrSugOrderLine."Location Code");
      TransferHeader.VALIDATE("In-Transit Code",CurrInvMgtSetup."In-Transit Code");
      TransferHeader."Created from Suggested Order" := TRUE;
      TransferHeader."Creation Date" := WORKDATE;
      TransferHeader."Created By" := USERID;
      TransferHeader."Suggested Order No." := CurrSugOrderHeader."Posting No.";
      TransferHeader.MODIFY(TRUE);
      OnAfterCreateTransferOrderHeader(CurrSugOrderHeader, TransferHeader);
      CurrTransferHeader.COPY(TransferHeader);
    END;

    PROCEDURE CreateTransferLine@1240030001(VAR CurrSugOrderHeader@1240020000 : Record 14000565;VAR CurrSugOrderLine@1240030001 : Record 14000566;VAR CurrTransferHeader@1240030002 : Record 5740);
    VAR
      TransferLine@1240030004 : Record 5741;
    BEGIN
      TransferLine."Document No." := CurrTransferHeader."No.";
      TransferLine."Line No." := CurrSugOrderLine."Line No.";
      TransferLine.INSERT;
      TransferLine.VALIDATE("Item No.",CurrSugOrderLine."No.");
      TransferLine.VALIDATE("Unit of Measure Code",CurrSugOrderLine."Unit of Measure Code");
      TransferLine.VALIDATE(Quantity,CurrSugOrderLine.Quantity - CurrSugOrderLine."Qty. Transferred (Base)");
      TransferLine.VALIDATE("Shipment Date",CurrSugOrderLine."Expected Receipt Date");
      TransferLine.MODIFY;
      OnAfterCreateTransferOrderLine(CurrSugOrderHeader, CurrSugOrderLine, CurrTransferHeader, TransferLine);
    END;

    PROCEDURE PostSugOrder@1240030005(VAR CurrSugOrderHeader@1240030000 : Record 14000565);
    VAR
      Location@1240030006 : Record 14;
      PostSugOrderHeader@1240030001 : Record 14000567;
      PostSugOrderLine@1240030002 : Record 14000568;
      SugOrderHeader@1240030004 : Record 14000565;
      SugOrderLine@1240030005 : Record 14000566;
      VendorBuyingCalendar@1240030003 : Record 14000563;
      SurplusInvValue@1240030007 : Record 14000584;
      PurchaseHeader@1240020000 : Record 38;
      TransferHeader@1240020001 : Record 5740;
      InvMgtSetup@1240020004 : Record 14000551;
      ReleasePurchaseDocument@1240020002 : Codeunit 415;
      ReleaseTransferDocument@1240020003 : Codeunit 5708;
      CalcLine@1240020006 : Record 14000569;
      PostedCalcLine@1240020005 : Record 14000570;
    BEGIN
      OnBeforePostSuggestedOrder(CurrSugOrderHeader);
      // For AV
      InvMgtSetup.GET;
      IF InvMgtSetup."Enable AV Interface" THEN BEGIN
        PurchaseHeader.SETRANGE("Suggested Order No.",CurrSugOrderHeader."Posting No.");
        IF PurchaseHeader.FIND('-') THEN
          REPEAT
            CLEAR(ReleasePurchaseDocument);
            ReleasePurchaseDocument.RUN(PurchaseHeader);
          UNTIL PurchaseHeader.NEXT = 0;

        TransferHeader.SETRANGE("Suggested Order No.",CurrSugOrderHeader."Posting No.");
        IF TransferHeader.FIND('-') THEN
          REPEAT
            CLEAR(ReleaseTransferDocument);
            ReleaseTransferDocument.RUN(TransferHeader);
          UNTIL TransferHeader.NEXT = 0;
      END;

      SugOrderHeader.GET(CurrSugOrderHeader."Buy-from Vendor No.",CurrSugOrderHeader."No.");

      PostSugOrderHeader.TRANSFERFIELDS(SugOrderHeader,TRUE);
      PostSugOrderHeader."No." := CurrSugOrderHeader."Posting No.";
      PostSugOrderHeader."Posted Date" := WORKDATE;
      PostSugOrderHeader."Created By" := USERID;
      PostSugOrderHeader.INSERT;

      SugOrderLine.RESET;
      SugOrderLine.SETRANGE("Buy-from Vendor No.",SugOrderHeader."Buy-from Vendor No.");
      SugOrderLine.SETRANGE("Document No.",SugOrderHeader."No.");
      IF SugOrderLine.FIND('-') THEN
        REPEAT
          PostSugOrderLine.TRANSFERFIELDS(SugOrderLine,TRUE);
          SugOrderLine.CALCFIELDS("Qty. Transferred (Base)");
          PostSugOrderLine."Qty. Transferred" := SugOrderLine."Qty. Transferred (Base)";
          PostSugOrderLine."Document No." := PostSugOrderHeader."No.";
          PostSugOrderLine.INSERT;

          IF SugOrderLine.Quantity <= 0 THEN BEGIN
            CalcLine.SETRANGE("Location Code",SugOrderLine."Location Code");
            CalcLine.SETRANGE("Item No.",SugOrderLine."No.");
            IF SugOrderLine."Summarize Variant Detail" THEN
              CalcLine.SETFILTER("Variant Code",'=%1','')
            ELSE
              CalcLine.SETRANGE("Variant Code",SugOrderLine."Variant Code");
            IF CalcLine.FIND('-') THEN
              REPEAT
                PostedCalcLine.TRANSFERFIELDS(CalcLine);
                IF SugOrderLine."Summarize Variant Detail" THEN
                  PostedCalcLine."Variant Code" := SugOrderLine."Variant Code";
                PostedCalcLine."Suggested Order No." := PostSugOrderHeader."No.";
                PostedCalcLine."Suggested Order Line No." := SugOrderLine."Line No.";
                PostedCalcLine."Purchase Order No." := '';
                PostedCalcLine."Purchase Order Line No." := 0;
                IF PostedCalcLine.INSERT THEN;
              UNTIL CalcLine.NEXT = 0;
          END;
        UNTIL SugOrderLine.NEXT = 0;

      SurplusInvValue.SETCURRENTKEY("Buy-from Vendor No.","Suggested Order No.");
      SurplusInvValue.SETRANGE("Buy-from Vendor No.",SugOrderHeader."Buy-from Vendor No.");
      SurplusInvValue.SETRANGE("Suggested Order No.",SugOrderHeader."No.");
      IF SurplusInvValue.FIND('-') THEN
        REPEAT
          SurplusInvValue."Quantity To Transfer" := 0;
          SurplusInvValue."Quantity Transferred" := 0;
          SurplusInvValue."Transfer To Location Code" := '';
          SurplusInvValue."Buy-from Vendor No." := '';
          SurplusInvValue."Suggested Order No." := '';
          SurplusInvValue."Suggested Order Line No." := 0;
          SurplusInvValue.MODIFY;
        UNTIL SurplusInvValue.NEXT = 0;

      IF SugOrderHeader."Procurement Group Code" = '' THEN BEGIN
        IF UBP.GetVendBuyingCalendarFromSuggOrdHeader(SugOrderHeader, VendorBuyingCalendar) THEN BEGIN
        VendorBuyingCalendar."Last Review Date" := WORKDATE;
        VendorBuyingCalendar."Next Review Date" :=
            CALCDATE(STRSUBSTNO('<+%1D>',VendorBuyingCalendar."Review Cycle (Days)"), VendorBuyingCalendar."Last Review Date");
        VendorBuyingCalendar.MODIFY(FALSE);
        END;
      END ELSE BEGIN
        VendorBuyingCalendar.RESET;
        VendorBuyingCalendar.SETRANGE("Vendor No.",SugOrderHeader."Buy-from Vendor No.");
        VendorBuyingCalendar.SETRANGE("Procurement Group Code",SugOrderHeader."No.");
        IF VendorBuyingCalendar.FIND('-') THEN
          REPEAT
            VendorBuyingCalendar."Last Review Date" := WORKDATE;
            VendorBuyingCalendar."Next Review Date" :=
              CALCDATE(STRSUBSTNO('<+%1D>',VendorBuyingCalendar."Review Cycle (Days)"),VendorBuyingCalendar."Last Review Date");
            VendorBuyingCalendar.MODIFY(FALSE);
          UNTIL VendorBuyingCalendar.NEXT = 0;
      END;

      SugOrderHeader.DELETE(TRUE);
    END;

    PROCEDURE CheckVariantItems@1240030003(VAR CurrSugOrderHeader@1240030000 : Record 14000565);
    VAR
      ProcUnit@1240030002 : Record 14000555;
      SugOrderLine@1240030001 : Record 14000566;
      Text001@1240030003 : TextConst 'ENU=Item %1 has variants.  You must choose a variant to order.';
    BEGIN
      SugOrderLine.SETRANGE("Buy-from Vendor No.",CurrSugOrderHeader."Buy-from Vendor No.");
      SugOrderLine.SETRANGE("Document No.",CurrSugOrderHeader."No.");
      SugOrderLine.SETFILTER("No.",'<>%','');
      SugOrderLine.SETFILTER("Variant Code",'=%1','');
      SugOrderLine.SETFILTER(Quantity, '>%1', 0);
      IF SugOrderLine.FINDSET THEN BEGIN
        REPEAT
          ProcUnit.SETRANGE("Location Code",SugOrderLine."Location Code");
          ProcUnit.SETRANGE("Item No.",SugOrderLine."No.");
          ProcUnit.SETFILTER("Variant Code",'<>%1','');
          IF NOT ProcUnit.ISEMPTY THEN
            ERROR(Text001,SugOrderLine."No.");
        UNTIL SugOrderLine.NEXT = 0;
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnCheckSuggestedOrderBeforePurchHeaderCreate@1240020003(VAR CurrSugOrderHeader@1240020000 : Record 14000565;VAR CurrSugOrderLine@1240020001 : Record 14000566);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreatePurchaseOrderHeader@1240020007(VAR CurrSugOrderHeader@1240020001 : Record 14000565;VAR CurrPurchOrderHeader@1240020000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreatePurchaseOrderItemLine@1240020009(VAR CurrSugOrderHeader@1240020001 : Record 14000565;VAR CurrSugOrderLine@1240020002 : Record 14000566;VAR CurrPurchOrderHeader@1240020000 : Record 38;VAR CurrPurchOrderLine@1240020003 : Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostSuggestedOrder@1240020002(VAR CurrSugOrderHeader@1240020000 : Record 14000565);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostSuggestedOrder@1240020000(VAR CurrSugOrderHeader@1240020000 : Record 14000565;VAR CurrPostedSugOrderHeader@1240020001 : Record 14000567);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreatePurchaseOrder@1240020001(VAR CurrSugOrderHeader@1240020002 : Record 14000565;VAR CurrPurchOrderHeader@1240020000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateTransferOrder@1240020012(VAR CurrSugOrderHeader@1240020002 : Record 14000565;VAR CurrTransferOrderHeader@1240020000 : Record 5740);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateTransferOrderHeader@1240020015(VAR CurrSugOrderHeader@1240020003 : Record 14000565;VAR CurrTransferOrderHeader@1240020002 : Record 5740);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateTransferOrderLine@1240020014(VAR CurrSugOrderHeader@1240020001 : Record 14000565;VAR CurrSugOrderLine@1240020002 : Record 14000566;VAR CurrTransferOrderHeader@1240020004 : Record 5740;VAR CurrTransferOrderLine@1240020000 : Record 5741);
    BEGIN
    END;

    BEGIN
    END.
  }
}

