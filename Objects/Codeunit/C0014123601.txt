OBJECT Codeunit 14123601 ES Read Source Code
{
  OBJECT-PROPERTIES
  {
    Date=12/14/18;
    Time=12:00:00 PM;
    Version List=ES1.41.56;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=Updating Relations from Source Code\';
      Text002@1002 : TextConst 'ENU=Process #1################################################\';
      Text003@1003 : TextConst 'ENU=Object  #2################################################\';
      Text004@1004 : TextConst 'ENU=Reading Source Code';
      Text005@1005 : TextConst 'ENU=%1 lines of Source Code have been processed in %2 seconds with %3 inserted Relations.';
      Text006@1006 : TextConst 'ENU=Wrong Object Type %1.';
      Text007@1007 : TextConst 'ENU=Line %1 is not complete.';
      Text008@1008 : TextConst 'ENU=Wrong Line %1.';
      ESObjectInfoSortTmp@1240520008 : TEMPORARY Record 14123603;
      Text009@1009 : TextConst 'ENU=File Name must be entered.';
      Text010@1010 : TextConst 'ENU=Object Name %1 and %2 do not match in %3 %4.';
      Text011@1240520009 : TextConst 'ENU=%1 lines of Source Code have been processed in %2 seconds with %3 Relations and %4 Variables inserted.';
      Text012@1011 : TextConst 'ENU=Variables cannot be inserted for this type.';
      Text013@1012 : TextConst 'ENU=Duplicate Control Line %1 %2 (%3 %4 Control %5)';
      ESObjectInfoSortSearchTmp@1240520001 : TEMPORARY Record 14123603;
      Text102@1000 : TextConst 'ENU=Uploading file.';

    PROCEDURE UpdateFromSourceCode@1240520008(SourceCodeFileName@1240520008 : Code[250];TestMode@1240520032 : Boolean;UpdateType@1240520033 : 'Standard,Live,Security,Standard (Live),Security (Initial)';CreateVariables@1240520038 : Boolean;CreateControls@1240520040 : Boolean;ShowStatus@1240520027 : Boolean);
    VAR
      AllObjWithCaption@1240520015 : Record 2000000058;
      CurrField@1240520019 : Record 2000000041;
      ESRelation@1240520020 : Record 14123601;
      ESVariable@1240520037 : Record 14123605;
      ESAnalyzerStatus@1240520036 : Record 14123604;
      ESSecuritySetup@1240520001 : Record 14123521;
      ESFLADSSetup@1240520002 : Record 14123801;
      FileMgt@1000 : Codeunit 419;
      Window@1240520021 : Dialog;
      SourceCodeFile@1240520009 : File;
      TempText@1240520010 : Text[1000];
      ServerFileName@1001 : Text[1000];
      ReadChar@1240520011 : Char;
      CurrentPos@1240520012 : Integer;
      NextUpdatePos@1240520025 : Integer;
      SourceCodeFileLen@1240520026 : Integer;
      LineNo@1240520022 : Integer;
      InsertedRelations@1240520031 : Integer;
      InsertedVariables@1240520039 : Integer;
      LastUpdateObjectID@1240520013 : Integer;
      CharPos@1240520029 : Integer;
      LineNotComplete@1240520035 : Boolean;
      StartTime@1240520028 : Time;
    BEGIN
      IF SourceCodeFileName = '' THEN
        ERROR(Text009);

      IF GUIALLOWED THEN
        IF UpdateType IN [UpdateType::Standard,UpdateType::Live,UpdateType::"Standard (Live)"] THEN
          Window.OPEN(
            ESSecuritySetup.ExtendProgressText(Text001) +
            Text002 + Text003 + '        @3@@@@@@@@@@@@@@@@@@@@@@@@@@@@')
        ELSE
          Window.OPEN(
            ESFLADSSetup.ExtendProgressText(Text001) +
            Text002 + Text003 + '        @3@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      StartTime := TIME;

      IF GUIALLOWED THEN
        Window.UPDATE(1,Text004);
      SourceCodeFile.WRITEMODE(FALSE);
      SourceCodeFile.TEXTMODE(FALSE);
      IF NOT SourceCodeFile.OPEN(SourceCodeFileName) THEN BEGIN
        IF GUIALLOWED THEN
          Window.UPDATE(1,Text102);
        ServerFileName := FileMgt.UploadFileSilent(SourceCodeFileName);
        IF GUIALLOWED THEN
          Window.UPDATE(1,Text004);

        IF NOT SourceCodeFile.OPEN(ServerFileName) THEN
          SourceCodeFile.OPEN(SourceCodeFileName);
      END;

      InitializeSearchTable(UpdateType);

      SourceCodeFileLen := SourceCodeFile.LEN;
      WHILE CurrentPos < SourceCodeFileLen DO BEGIN
        CurrentPos := CurrentPos + 1;

        SourceCodeFile.READ(ReadChar);
        CASE ReadChar OF
          13:
            BEGIN
              IF CurrentPos > NextUpdatePos THEN BEGIN
                IF GUIALLOWED THEN
                  Window.UPDATE(3,ROUND(10000 * (CurrentPos / SourceCodeFileLen),1));
                NextUpdatePos := CurrentPos + ROUND(SourceCodeFileLen / 500,1);
              END;

              LineNo := LineNo + 1;

              ProcessLine(
                AllObjWithCaption,CurrField,ESRelation,ESVariable,ESAnalyzerStatus,
                InsertedRelations,InsertedVariables,TempText,LineNotComplete,CurrentPos,LineNo,
                TestMode,UpdateType,CreateVariables,CreateControls);

              IF AllObjWithCaption."Object ID" <> LastUpdateObjectID THEN BEGIN
                IF AllObjWithCaption."Object ID" <> 0 THEN
                  IF GUIALLOWED THEN
                    Window.UPDATE(
                      2,
                      STRSUBSTNO(
                        '%1 %2 %3',
                        AllObjWithCaption."Object Type",AllObjWithCaption."Object ID",
                        AllObjWithCaption."Object Name"));

                LastUpdateObjectID := AllObjWithCaption."Object ID";
              END;

              LineNotComplete := FALSE;
              CharPos := 0;
              TempText := '';
            END;
          10:
            ;
          ELSE BEGIN
            CharPos := CharPos + 1;
            IF CharPos <= 1000 THEN
              TempText[CharPos] := ReadChar
            ELSE
              LineNotComplete := TRUE;
          END;
        END;
      END;

      SourceCodeFile.CLOSE;
      IF ServerFileName <> '' THEN
        ERASE(ServerFileName);

      IF GUIALLOWED THEN
        Window.CLOSE;

      IF CreateVariables THEN
        TempText :=
          STRSUBSTNO(
            Text011,
            LineNo,ROUND((TIME - StartTime) / 1000,1),InsertedRelations,InsertedVariables)
      ELSE
        TempText :=
          STRSUBSTNO(
            Text005,
            LineNo,ROUND((TIME - StartTime) / 1000,1),InsertedRelations);

      IF ShowStatus THEN
        MESSAGE(TempText);

      IF UpdateType IN [UpdateType::Standard,UpdateType::Live,UpdateType::"Standard (Live)"] THEN
        ESSecuritySetup.Comment(1,TempText);
    END;

    PROCEDURE UpdateFromSourceCodeLines@1240520027(VAR ESSourceCodeLine@1240520008 : Record 14123815;VAR CurrentAllObjWithCaption@1240520027 : Record 2000000058;TestMode@1240520032 : Boolean;UpdateType@1240520033 : 'Standard,Live,Security,Standard (Live),Security (Initial)';CreateVariables@1240520038 : Boolean;CreateControls@1240520040 : Boolean;ObjectStartLine@1240520009 : Integer);
    VAR
      AllObjWithCaption@1240520011 : Record 2000000058;
      CurrField@1240520019 : Record 2000000041;
      ESRelation@1240520020 : Record 14123601;
      ESVariable@1240520037 : Record 14123605;
      ESAnalyzerStatus@1240520036 : Record 14123604;
      LastESSourceCodeLine@1000000000 : Record 14123815;
      TempText@1240520010 : Text[1000];
      InsertedRelations@1240520031 : Integer;
      InsertedVariables@1240520039 : Integer;
    BEGIN
      IF NOT ESObjectInfoSortTmp.FIND('-') THEN
        InitializeSearchTable(UpdateType);

      IF ESSourceCodeLine.FIND('-') THEN
        REPEAT
          TempText :=
            ESSourceCodeLine."Text 1-250" + ESSourceCodeLine."Text 251-500" +
            ESSourceCodeLine."Text 501-750" + ESSourceCodeLine."Text 751-1000";

          ProcessLine(
            AllObjWithCaption,CurrField,ESRelation,ESVariable,ESAnalyzerStatus,
            InsertedRelations,InsertedVariables,TempText,ESSourceCodeLine."Line Not Complete",
            ESSourceCodeLine."Line No.",ObjectStartLine + ESSourceCodeLine."Line No." - 1,
            TestMode,UpdateType,CreateVariables,CreateControls);

          IF (ESAnalyzerStatus."Control ID" <> 0) OR (ESAnalyzerStatus."Second Control ID" <> 0)
          THEN BEGIN
            IF ESAnalyzerStatus."Second Control ID" <> 0 THEN
              ESSourceCodeLine."Control ID" := ESAnalyzerStatus."Second Control ID"
            ELSE
              ESSourceCodeLine."Control ID" := ESAnalyzerStatus."Control ID";
            ESSourceCodeLine."In Code" := ESAnalyzerStatus."In Code";
            IF LastESSourceCodeLine."Control ID" <> ESSourceCodeLine."Control ID" THEN
              ESSourceCodeLine."First Line in Control" := TRUE;
            ESSourceCodeLine.MODIFY;
          END;

          IF ESSourceCodeLine."Line No." > 1 THEN BEGIN
            IF (LastESSourceCodeLine."Control ID" <> 0) AND
               (LastESSourceCodeLine."Control ID" <> ESSourceCodeLine."Control ID")
            THEN BEGIN
              ESSourceCodeLine := LastESSourceCodeLine;
              ESSourceCodeLine."Last Line in Control" := TRUE;
              ESSourceCodeLine.MODIFY;
              ESSourceCodeLine.NEXT;
            END;
          END ELSE
            CurrentAllObjWithCaption := AllObjWithCaption;

          LastESSourceCodeLine := ESSourceCodeLine;
        UNTIL ESSourceCodeLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ProcessLine@1240520011(VAR AllObjWithCaption@1240520011 : Record 2000000058;VAR CurrField@1240520016 : Record 2000000041;VAR ESRelation@1240520021 : Record 14123601;VAR ESVariable@1240520013 : Record 14123605;VAR ESAnalyzerStatus@1240520029 : Record 14123604;VAR InsertedRelations@1240520026 : Integer;VAR InsertedVariables@1240520019 : Integer;TextLine@1240520010 : Text[1000];LineNotComplete@1240520008 : Boolean;CurrentPos@1240520027 : Integer;LineNo@1240520024 : Integer;TestMode@1240520009 : Boolean;UpdateType@1240520020 : 'Standard,Live,Security';CreateVariables@1240520014 : Boolean;CreateControls@1240520022 : Boolean);
    VAR
      ESFLADSTableField@1240520001 : Record 14123820;
      TempText@1240520015 : Text[1000];
      TempText2@1240520017 : Text[1000];
      Pos@1240520018 : Integer;
      StrLenTextLine@1240520012 : Integer;
    BEGIN
      IF TextLine = '' THEN BEGIN
        IF ESAnalyzerStatus."In VAR" AND
           (ESAnalyzerStatus."Reference Type" = ESAnalyzerStatus."Reference Type"::"Global Variable")
        THEN BEGIN
          ESAnalyzerStatus."In VAR" := FALSE;
          ESAnalyzerStatus."VAR Indentation" := 0;
          ESAnalyzerStatus."Reference Name" := '';
          ESAnalyzerStatus."Reference ID" := 0;
          ESAnalyzerStatus."Reference Type" := ESAnalyzerStatus."Reference Type"::" ";
        END;

        EXIT;
      END;

      IF TextLine = '}' THEN BEGIN
        CLEAR(AllObjWithCaption);
        CLEAR(ESRelation);
        CLEAR(CurrField);
        CLEAR(ESAnalyzerStatus);

        EXIT;
      END;

      IF ESAnalyzerStatus."In RDLData" THEN
        EXIT;

      StrLenTextLine := STRLEN(TextLine);

      IF CreateVariables THEN BEGIN
        IF ESAnalyzerStatus."In VAR" THEN BEGIN
          IF StrLenTextLine <= ESAnalyzerStatus."VAR Indentation" THEN BEGIN
            ESAnalyzerStatus."In VAR" := FALSE;
            ESAnalyzerStatus."VAR Indentation" := 0;
          END ELSE
            IF COPYSTR(TextLine,ESAnalyzerStatus."VAR Indentation",1) <> ' ' THEN BEGIN
              ESAnalyzerStatus."In VAR" := FALSE;
              ESAnalyzerStatus."VAR Indentation" := 0;
            END;

          IF ESAnalyzerStatus."In VAR" THEN BEGIN
            TempText := COPYSTR(TextLine,ESAnalyzerStatus."VAR Indentation" + 2);
            IF COPYSTR(TempText,STRLEN(TempText),1) = ';' THEN
              TempText := COPYSTR(TempText,1,STRLEN(TempText) - 1);

            IF NOT UpdateVariable(
                     AllObjWithCaption,CurrField,ESVariable,ESAnalyzerStatus,TempText,
                     CurrentPos,LineNo,UpdateType,FALSE,FALSE)
            THEN
              InsertVariable(ESVariable,UpdateType,TRUE);
            InsertedVariables := InsertedVariables + 1;
          END ELSE BEGIN
            ESAnalyzerStatus."Reference Name" := '';
            ESAnalyzerStatus."Reference ID" := 0;
            ESAnalyzerStatus."Reference Type" := ESAnalyzerStatus."Reference Type"::" ";

            EXIT;
          END;
        END;
      END;

      IF COPYSTR(TextLine,1,7) = 'OBJECT ' THEN BEGIN
        TempText := COPYSTR(TextLine,8);
        Pos := STRPOS(TempText,' ');
        TempText2 := COPYSTR(TempText,1,Pos - 1);
        CASE UPPERCASE(TempText2) OF
          'TABLE','[TABLE':
            AllObjWithCaption."Object Type" := AllObjWithCaption."Object Type"::Table;
          'FORM','[FORM':
            AllObjWithCaption."Object Type" := AllObjWithCaption."Object Type"::"2";
          'REPORT','[REPORT':
            AllObjWithCaption."Object Type" := AllObjWithCaption."Object Type"::Report;
          'DATAPORT','[DATAPORT':
            AllObjWithCaption."Object Type" := AllObjWithCaption."Object Type"::"4";
          'CODEUNIT','[CODEUNIT':
            AllObjWithCaption."Object Type" := AllObjWithCaption."Object Type"::Codeunit;
          'XMLPORT','[XMLPORT':
            AllObjWithCaption."Object Type" := AllObjWithCaption."Object Type"::XMLport;
          'MENUSUITE','[MENUSUITE':
            AllObjWithCaption."Object Type" := AllObjWithCaption."Object Type"::MenuSuite;
          'PAGE','[PAGE':
            AllObjWithCaption."Object Type" := AllObjWithCaption."Object Type"::Page;
          'QUERY','[QUERY':
            AllObjWithCaption."Object Type" := AllObjWithCaption."Object Type"::Query;
          ELSE
            ERROR(Text006,TempText2);
        END;

        TempText := COPYSTR(TempText,Pos + 1);
          Pos := STRPOS(TempText,' ');
        TempText2 := COPYSTR(TempText,1,Pos - 1);
        EVALUATE(AllObjWithCaption."Object ID",TempText2);

        TempText := COPYSTR(TempText,Pos + 1);
        IF COPYSTR(TempText,1,1) = '"' THEN
          TempText := COPYSTR(TempText,2,STRLEN(TempText) - 2);
        IF COPYSTR(TextLine,1,8) = 'OBJECT [' THEN
          TempText := COPYSTR(TempText,1,STRLEN(TempText) - 1);
        AllObjWithCaption."Object Name" :=
          COPYSTR(TempText,1,MAXSTRLEN(AllObjWithCaption."Object Name"));

        TestObjectInfoExist(AllObjWithCaption,UpdateType,TestMode);

        DeleteRelations(AllObjWithCaption,UpdateType);

        DeleteVariables(AllObjWithCaption,UpdateType);

        DeleteTableFields(AllObjWithCaption,UpdateType);

        ESRelation.INIT;
        ESRelation."Object Type" := AllObjWithCaption."Object Type";
        ESRelation."Object ID" := AllObjWithCaption."Object ID";
        ESRelation."Entry No." := 0;

        ESVariable.INIT;
        ESVariable."Object Type" := AllObjWithCaption."Object Type";
        ESVariable."Object ID" := AllObjWithCaption."Object ID";
        ESVariable."Entry No." := 0;

        CLEAR(CurrField);
        CLEAR(ESAnalyzerStatus);

        IF TestMode THEN
          COMMIT;

        EXIT;
      END;

      IF CreateControls AND (StrLenTextLine > 0) THEN
        ProcessFLADSControl(AllObjWithCaption,ESAnalyzerStatus,TextLine,LineNo,StrLenTextLine);

      IF StrLenTextLine > 0 THEN
        IF NOT ESAnalyzerStatus."FLADS Change Found" THEN
          IF STRPOS(TextLine,'ESACC_') > 0 THEN BEGIN
            ESAnalyzerStatus."FLADS Change Found" := TRUE;

            ESRelation.INIT;
            ESRelation.Type := ESRelation.Type::"FLADS Change";
            TempText := COPYSTR(TextLine,STRPOS(TextLine,'ESACC_'));
            IF COPYSTR(TempText,STRLEN(TempText),1) IN [';','}'] THEN
              TempText := DELCHR(COPYSTR(TempText,1,STRLEN(TempText) - 1),'>',' ');
            ESRelation."Source Code" :=
              COPYSTR(TempText,1,MAXSTRLEN(ESRelation."Source Code"));
            InsertRelation(ESRelation,CurrentPos,LineNo,InsertedRelations,UpdateType);
          END;

      IF ESAnalyzerStatus."In CalcFormula" THEN BEGIN
        ESAnalyzerStatus."In CalcFormula" := NOT EndOfStatement(TextLine,LineNotComplete);
        EXIT;
      END;

      IF AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Table THEN
        IF TextLine = '  FIELDS' THEN
          ESAnalyzerStatus."In Fields" := TRUE;

      IF (AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Table) AND
         ESAnalyzerStatus."In Fields"
      THEN
        IF TextLine = '  }' THEN BEGIN
          CLEAR(CurrField);
          ESAnalyzerStatus."In Fields" := FALSE;
        END;

      IF (AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Table) AND
         ESAnalyzerStatus."In Fields"
      THEN
        IF COPYSTR(TextLine,1,5) = '    {' THEN BEGIN
          CurrField.TableNo := AllObjWithCaption."Object ID";
          TempText := COPYSTR(TextLine,6);
          Pos := STRPOS(TempText,';');
          TempText2 := DELCHR(COPYSTR(TempText,1,Pos - 1),'<>',' ');
          EVALUATE(CurrField."No.",TempText2);
          TempText := COPYSTR(TempText,Pos + 1);
          Pos := STRPOS(TempText,';');
          TempText := COPYSTR(TempText,Pos + 1);
          IF COPYSTR(TempText,1,1) = '"' THEN BEGIN
            TempText := COPYSTR(TempText,2);
            Pos := STRPOS(TempText,'"');
          END ELSE
            Pos := STRPOS(TempText,';');
          TempText2 := DELCHR(COPYSTR(TempText,1,Pos - 1),'<>',' ');
          IF COPYSTR(TempText2,1,1) = '[' THEN
            TempText2 := DELCHR(COPYSTR(TempText2,2,STRLEN(TempText2) - 2),'<>',' ');
          CurrField.FieldName := TempText2;

          IF UpdateType = UpdateType::Security THEN BEGIN
            ESFLADSTableField.INIT;
            ESFLADSTableField."Table No." := CurrField.TableNo;
            ESFLADSTableField."Field No." := CurrField."No.";
            ESFLADSTableField.INSERT;
          END;
        END;

      IF (((AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Table) AND
           ESAnalyzerStatus."In Fields") OR
          (AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Report)) AND
         (StrLenTextLine >= 66)
      THEN
        IF (STRPOS(TextLine,'TableRelation=') = 52) OR ESAnalyzerStatus."In Table Relation" THEN BEGIN
          TempText := COPYSTR(TextLine,66);
          ESRelation.INIT;
          ESRelation."Field ID" := CurrField."No.";
          ESRelation."Field Name" := CurrField.FieldName;
          IF FindTableRelation(
               ESRelation,ESAnalyzerStatus."In Levels",TempText,UpdateType,TestMode)
          THEN
            InsertRelation(ESRelation,CurrentPos,LineNo,InsertedRelations,UpdateType);

          ESAnalyzerStatus."In Table Relation" := NOT EndOfStatement(TextLine,LineNotComplete);
          EXIT;
        END;

      IF AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::"2" THEN
        IF (STRPOS(TextLine,'TableRelation=') = 50) OR ESAnalyzerStatus."In Table Relation" THEN BEGIN
          TempText := COPYSTR(TextLine,64);
          ESRelation.INIT;
          ESRelation."Field ID" := CurrField."No.";
          ESRelation."Field Name" := CurrField.FieldName;
          IF FindTableRelation(
               ESRelation,ESAnalyzerStatus."In Levels",TempText,UpdateType,TestMode)
          THEN
            InsertRelation(ESRelation,CurrentPos,LineNo,InsertedRelations,UpdateType);

          ESAnalyzerStatus."In Table Relation" := NOT EndOfStatement(TextLine,LineNotComplete);
          EXIT;
        END;

      IF AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Page THEN
        IF (STRPOS(TextLine,'TableRelation=') = 17) OR ESAnalyzerStatus."In Table Relation" THEN BEGIN
          TempText := COPYSTR(TextLine,31);
          ESRelation.INIT;
          ESRelation."Field ID" := CurrField."No.";
          ESRelation."Field Name" := CurrField.FieldName;
          IF FindTableRelation(
               ESRelation,ESAnalyzerStatus."In Levels",TempText,UpdateType,TestMode)
          THEN
            InsertRelation(ESRelation,CurrentPos,LineNo,InsertedRelations,UpdateType);

          ESAnalyzerStatus."In Table Relation" := NOT EndOfStatement(TextLine,LineNotComplete);
          EXIT;
        END;

      IF (AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Table) AND
         ESAnalyzerStatus."In Fields"
      THEN
        IF STRPOS(TextLine,'FieldClass=FlowField') = 52 THEN BEGIN
          CurrField.Class := CurrField.Class::FlowField;

          EXIT;
        END;

      IF (AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Table) AND
         ESAnalyzerStatus."In Fields" AND (CurrField.Class = CurrField.Class::FlowField)
      THEN
        IF STRPOS(TextLine,'CalcFormula=') = 52 THEN BEGIN
          TempText := COPYSTR(TextLine,64);
          ESRelation.INIT;
          ESRelation."Field ID" := CurrField."No.";
          ESRelation."Field Name" := CurrField.FieldName;
          FindFlowFieldTable(ESRelation,TempText,UpdateType,TestMode);
          InsertRelation(ESRelation,CurrentPos,LineNo,InsertedRelations,UpdateType);

          EXIT;
        END;

      IF (AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Table) AND
         ESAnalyzerStatus."In Fields"
      THEN
        IF STRPOS(TextLine,'Editable=') = 52 THEN BEGIN
          TempText := COPYSTR(TextLine,52);
          ESRelation.INIT;
          ESRelation."Field ID" := CurrField."No.";
          ESRelation."Field Name" := CurrField.FieldName;
          ESRelation.Type := ESRelation.Type::Editable;
          IF COPYSTR(TempText,STRLEN(TempText),1) IN [';','}'] THEN
            TempText := DELCHR(COPYSTR(TempText,1,STRLEN(TempText) - 1),'>',' ');
          ESRelation."Source Code" :=
            COPYSTR(TempText,1,MAXSTRLEN(ESRelation."Source Code"));
          InsertRelation(ESRelation,CurrentPos,LineNo,InsertedRelations,UpdateType);

          EXIT;
        END;

      IF AllObjWithCaption."Object Type" IN
         [AllObjWithCaption."Object Type"::"2",AllObjWithCaption."Object Type"::Page]
      THEN
        IF STRPOS(TextLine,'Editable=') = 5 THEN BEGIN
          TempText := COPYSTR(TextLine,5);
          ESRelation.INIT;
          ESRelation.Type := ESRelation.Type::Editable;
          IF COPYSTR(TempText,STRLEN(TempText),1) IN [';','}'] THEN
            TempText := DELCHR(COPYSTR(TempText,1,STRLEN(TempText) - 1),'>',' ');
          ESRelation."Source Code" :=
            COPYSTR(TempText,1,MAXSTRLEN(ESRelation."Source Code"));
          InsertRelation(ESRelation,CurrentPos,LineNo,InsertedRelations,UpdateType);

          EXIT;
        END;

      IF (AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Table) AND
         ESAnalyzerStatus."In Fields"
      THEN
        IF STRPOS(TextLine,'OnLookup=') = 52 THEN BEGIN
          TempText := COPYSTR(TextLine,52);
          ESRelation.INIT;
          ESRelation."Field ID" := CurrField."No.";
          ESRelation."Field Name" := CurrField.FieldName;
          ESRelation.Type := ESRelation.Type::OnLookup;
          IF COPYSTR(TempText,STRLEN(TempText),1) IN [';','}'] THEN
            TempText := DELCHR(COPYSTR(TempText,1,STRLEN(TempText) - 1),'>',' ');
          ESRelation."Source Code" :=
            COPYSTR(TempText,1,MAXSTRLEN(ESRelation."Source Code"));
          InsertRelation(ESRelation,CurrentPos,LineNo,InsertedRelations,UpdateType);

          EXIT;
        END;

      IF (AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Table) AND
         NOT ESAnalyzerStatus."In Fields"
      THEN
        IF STRPOS(TextLine,'DataPerCompany=') = 5 THEN BEGIN
          TempText := COPYSTR(TextLine,5);
          ESRelation.INIT;
          ESRelation.Type := ESRelation.Type::"Data Per Company";
          ESRelation."Source Code" :=
            COPYSTR(TempText,1,MAXSTRLEN(ESRelation."Source Code"));
          InsertRelation(ESRelation,CurrentPos,LineNo,InsertedRelations,UpdateType);

          EXIT;
        END;

      IF (AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::"2") OR
         (AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Page)
      THEN
        IF STRPOS(TextLine,'SourceTable=Table') = 5 THEN BEGIN
          TempText := COPYSTR(TextLine,22);
          ESRelation.INIT;
          ESRelation.Type := ESRelation.Type::"Source Table";
          ESRelation."Source Code" :=
            COPYSTR(TempText,1,MAXSTRLEN(ESRelation."Source Code"));
          IF COPYSTR(TempText,STRLEN(TempText),1) IN [';','}'] THEN
            TempText := DELCHR(COPYSTR(TempText,1,STRLEN(TempText) - 1),'>',' ');
          EVALUATE(ESRelation."Relation Object ID",TempText);
          InsertRelation(ESRelation,CurrentPos,LineNo,InsertedRelations,UpdateType);

          EXIT;
        END;

      IF (AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Report) OR
         (AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::"4")
      THEN
        IF STRPOS(TextLine,'DataItemTable=Table') IN [9,16] THEN BEGIN
          TempText := COPYSTR(TextLine,STRPOS(TextLine,'DataItemTable=Table') + 19);
          ESRelation.INIT;
          ESRelation.Type := ESRelation.Type::"Data Item";
          ESRelation."Source Code" :=
            COPYSTR(TempText,1,MAXSTRLEN(ESRelation."Source Code"));
          IF COPYSTR(TempText,STRLEN(TempText),1) IN [';','}'] THEN
            TempText := DELCHR(COPYSTR(TempText,1,STRLEN(TempText) - 1),'>',' ');
          EVALUATE(ESRelation."Relation Object ID",TempText);
          InsertRelation(ESRelation,CurrentPos,LineNo,InsertedRelations,UpdateType);

          EXIT;
        END;

      IF AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Report THEN
        IF TextLine = '  RDLDATA' THEN
          ESAnalyzerStatus."In RDLData" := TRUE;

      IF AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Codeunit THEN
        IF STRPOS(TextLine,'TableNo=') = 5 THEN BEGIN
          TempText := COPYSTR(TextLine,13);
          ESRelation.INIT;
          ESRelation.Type := ESRelation.Type::"Source Table";
          ESRelation."Source Code" :=
            COPYSTR(TempText,1,MAXSTRLEN(ESRelation."Source Code"));
          IF COPYSTR(TempText,STRLEN(TempText),1) IN [';','}'] THEN
            TempText := DELCHR(COPYSTR(TempText,1,STRLEN(TempText) - 1),'>',' ');
          EVALUATE(ESRelation."Relation Object ID",TempText);
          InsertRelation(ESRelation,CurrentPos,LineNo,InsertedRelations,UpdateType);

          EXIT;
        END;

      IF (STRPOS(TextLine,'Permissions=') = 5) OR ESAnalyzerStatus."In Permissions" THEN BEGIN
        TempText := COPYSTR(TextLine,17);
        ESRelation.Type := ESRelation.Type::Permission;
        ESRelation."Source Code" :=
          COPYSTR(TempText,1,MAXSTRLEN(ESRelation."Source Code"));

        IF COPYSTR(TempText,STRLEN(TempText),1) IN [',',';','}'] THEN
          TempText := DELCHR(COPYSTR(TempText,1,STRLEN(TempText) - 1),'>',' ');
        IF COPYSTR(TempText,1,10) = 'TableData ' THEN BEGIN
          TempText := COPYSTR(TempText,11);
          Pos := STRPOS(TempText,'=');
          TempText2 := COPYSTR(TempText,1,Pos - 1);
          EVALUATE(ESRelation."Relation Object ID",TempText2);
        END;
        InsertRelation(ESRelation,CurrentPos,LineNo,InsertedRelations,UpdateType);

        ESAnalyzerStatus."In Permissions" := NOT EndOfStatement(TextLine,LineNotComplete);

        EXIT;
      END;

      IF AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Page THEN
        IF STRPOS(TextLine,'PagePartID=') = 17 THEN BEGIN
          TempText := COPYSTR(TextLine,28);
          ESRelation.INIT;
          ESRelation.Type := ESRelation.Type::PagePartID;
          IF COPYSTR(TempText,STRLEN(TempText),1) IN [';','}'] THEN
            TempText := DELCHR(COPYSTR(TempText,1,STRLEN(TempText) - 1),'>',' ');
          ESRelation."Relation Object Type" := ESRelation."Relation Object Type"::Page;
          ESRelation."Source Code" :=
            COPYSTR(TempText,1,MAXSTRLEN(ESRelation."Source Code"));
          IF NOT EVALUATE(ESRelation."Relation Object ID",COPYSTR(ESRelation."Source Code",5)) THEN
            ESRelation."Parser Error" := TRUE;
          InsertRelation(ESRelation,CurrentPos,LineNo,InsertedRelations,UpdateType);

          EXIT;
        END;

      IF AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::"2" THEN
        IF STRPOS(TextLine,'RunObject=') IN [50,54] THEN BEGIN
          TempText := COPYSTR(TextLine,STRPOS(TextLine,'RunObject=') + 10);
          ESRelation.INIT;
          ESRelation.Type := ESRelation.Type::MenuItem;
          IF COPYSTR(TempText,STRLEN(TempText),1) IN [';','}'] THEN
            TempText := DELCHR(COPYSTR(TempText,1,STRLEN(TempText) - 1),'>',' ');
          IF NOT UpdateRelationType(ESRelation,TempText) THEN
            ESRelation."Parser Error" := TRUE;
          InsertRelation(ESRelation,CurrentPos,LineNo,InsertedRelations,UpdateType);

          EXIT;
        END;

      IF AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Page THEN
        IF STRPOS(TextLine,'RunObject=') = 23 THEN BEGIN
          TempText := COPYSTR(TextLine,33);
          ESRelation.INIT;
          ESRelation.Type := ESRelation.Type::MenuItem;
          IF COPYSTR(TempText,STRLEN(TempText),1) IN [';','}'] THEN
            TempText := DELCHR(COPYSTR(TempText,1,STRLEN(TempText) - 1),'>',' ');
          IF NOT UpdateRelationType(ESRelation,TempText) THEN
            ESRelation."Parser Error" := TRUE;
          InsertRelation(ESRelation,CurrentPos,LineNo,InsertedRelations,UpdateType);

          EXIT;
        END;

      IF AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::MenuSuite THEN
        IF STRPOS(TextLine,'RunObjectType=') = 65 THEN BEGIN
          TempText := COPYSTR(TextLine,79);
          IF COPYSTR(TempText,STRLEN(TempText),1) IN [';','}'] THEN
            TempText := DELCHR(COPYSTR(TempText,1,STRLEN(TempText) - 1),'>',' ');
          ESAnalyzerStatus."Last RunObjectType" := TempText;

          EXIT;
        END;

      IF AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::MenuSuite THEN
        IF STRPOS(TextLine,'RunObjectID=') = 65 THEN BEGIN
          TempText := COPYSTR(TextLine,77);
          ESRelation.INIT;
          ESRelation.Type := ESRelation.Type::MenuItem;
          IF COPYSTR(TempText,STRLEN(TempText),1) IN [';','}'] THEN
            TempText := DELCHR(COPYSTR(TempText,1,STRLEN(TempText) - 1),'>',' ');
          IF NOT UpdateRelationType(ESRelation,ESAnalyzerStatus."Last RunObjectType" + ' ' + TempText)
          THEN
            ESRelation."Parser Error" := TRUE;
          InsertRelation(ESRelation,CurrentPos,LineNo,InsertedRelations,UpdateType);

          EXIT;
        END;

      IF CreateVariables THEN BEGIN
        IF TextLine = '    BEGIN' THEN BEGIN
          ESAnalyzerStatus."Reference Name" := '';
          ESAnalyzerStatus."Reference ID" := 0;
          ESAnalyzerStatus."Reference Type" := ESAnalyzerStatus."Reference Type"::" ";

          EXIT;
        END;

        IF TextLine = '    VAR' THEN BEGIN
          ESAnalyzerStatus."In VAR" := TRUE;
          ESAnalyzerStatus."VAR Indentation" := 5;
          IF ESAnalyzerStatus."Reference Type" = ESAnalyzerStatus."Reference Type"::" " THEN BEGIN
            ESAnalyzerStatus."Reference Type" := ESAnalyzerStatus."Reference Type"::"Global Variable";
            ESAnalyzerStatus."Reference Name" := '';
            ESAnalyzerStatus."Reference ID" := 0;
          END;

          EXIT;
        END;

        IF NOT LineNotComplete THEN
          IF StrLenTextLine > 15 THEN
            IF COPYSTR(TextLine,StrLenTextLine - 3) = '=VAR' THEN BEGIN
              ESAnalyzerStatus."In VAR" := TRUE;
              ESAnalyzerStatus."VAR Indentation" := StrLenTextLine - 2;
              ESAnalyzerStatus."Reference Type" := ESAnalyzerStatus."Reference Type"::"Local Variable";
              ESAnalyzerStatus."Reference Name" := '';
              ESAnalyzerStatus."Reference ID" := 0;

              EXIT;
            END;

        IF StrLenTextLine > 20 THEN BEGIN
          IF COPYSTR(TextLine,1,14) = '    PROCEDURE ' THEN BEGIN
            TempText := COPYSTR(TextLine,15);
            ESAnalyzerStatus."Reference Type" := ESAnalyzerStatus."Reference Type"::"Procedure";
          END ELSE
            IF COPYSTR(TextLine,1,20) = '    LOCAL PROCEDURE ' THEN BEGIN
              TempText := COPYSTR(TextLine,21);
              ESAnalyzerStatus."Reference Type" := ESAnalyzerStatus."Reference Type"::"Local Procedure";
            END ELSE
              IF COPYSTR(TextLine,1,10) = '    EVENT ' THEN BEGIN
                TempText := COPYSTR(TextLine,11);
                ESAnalyzerStatus."Reference Type" := ESAnalyzerStatus."Reference Type"::"Event";
              END ELSE
                TempText := '';

          IF TempText <> '' THEN BEGIN
            IF COPYSTR(TempText,1,1) = '"' THEN BEGIN
              Pos := STRPOS(COPYSTR(TempText,2),'"@');
              IF Pos > 0 THEN
                Pos := Pos + 1;
              IF (Pos = 0) OR ((STRPOS(TempText,'"(') < Pos) AND (STRPOS(TempText,'"(') > 1)) THEN
                Pos := STRPOS(TempText,'"(');
              ESAnalyzerStatus."Reference Name" :=
                COPYSTR(
                  COPYSTR(TempText,2,Pos - 2),1,MAXSTRLEN(ESAnalyzerStatus."Reference Name"));
              TempText := COPYSTR(TempText,Pos + 2);
            END ELSE BEGIN
              Pos := STRPOS(TempText,'@');
              IF (Pos = 0) OR ((STRPOS(TempText,'(') < Pos) AND (STRPOS(TempText,'(') > 0)) THEN
                Pos := STRPOS(TempText,'(');
              ESAnalyzerStatus."Reference Name" :=
                COPYSTR(
                  COPYSTR(TempText,1,Pos - 1),1,MAXSTRLEN(ESAnalyzerStatus."Reference Name"));
              TempText := COPYSTR(TempText,Pos + 1);
            END;

            IF ESAnalyzerStatus."Reference Type" = ESAnalyzerStatus."Reference Type"::"Event" THEN
              Pos := STRPOS(TempText,'::')
            ELSE
              Pos := STRPOS(TempText,'(');

            IF Pos > 0 THEN BEGIN
              TempText2 := COPYSTR(TempText,1,Pos - 1);
              EVALUATE(ESAnalyzerStatus."Reference ID",TempText2);
            END;

            IF ESAnalyzerStatus."Reference Type" IN
               [ESAnalyzerStatus."Reference Type"::"Procedure",
                ESAnalyzerStatus."Reference Type"::"Local Procedure"]
            THEN BEGIN
              IF Pos > 0 THEN
                TempText := COPYSTR(TempText,Pos + 1);

              IF STRPOS(TempText,')') > 0 THEN BEGIN
                Pos := STRLEN(TempText);
                WHILE COPYSTR(TempText,Pos,1) <> ')' DO
                  Pos := Pos - 1;
                IF Pos < STRLEN(TempText) THEN BEGIN
                  TempText2 := COPYSTR(TempText,Pos + 1);
                  TempText := COPYSTR(TempText,1,Pos - 1);
                  IF TempText2 <> ';' THEN BEGIN
                    TempText2 := COPYSTR(TempText2,1,STRLEN(TempText2) - 1);
                    IF NOT UpdateVariable(
                             AllObjWithCaption,CurrField,ESVariable,ESAnalyzerStatus,TempText2,
                             CurrentPos,LineNo,UpdateType,TRUE,TRUE)
                    THEN
                      InsertVariable(ESVariable,UpdateType,TRUE);
                    InsertedVariables := InsertedVariables + 1;
                  END;
                END;
              END;

              IF TempText <> '' THEN
                REPEAT
                  Pos := STRPOS(TempText,';');
                  IF Pos <> 0 THEN BEGIN
                    TempText2 := COPYSTR(TempText,1,Pos - 1);
                    TempText := COPYSTR(TempText,Pos + 1);
                  END ELSE BEGIN
                    TempText2 := TempText;
                    TempText := '';
                  END;

                  IF NOT UpdateVariable(
                           AllObjWithCaption,CurrField,ESVariable,ESAnalyzerStatus,TempText2,
                           CurrentPos,LineNo,UpdateType,TRUE,FALSE)
                  THEN
                    InsertVariable(ESVariable,UpdateType,TRUE);
                  InsertedVariables := InsertedVariables + 1;
                UNTIL TempText = '';
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE InsertRelation@1240520014(VAR ESRelation@1240520020 : Record 14123601;CurrentPos@1240520011 : Integer;LineNo@1240520010 : Integer;VAR InsertedRelations@1240520009 : Integer;UpdateType@1240520015 : 'Standard,Live,Security,Standard (Live),Security (Initial)');
    VAR
      ESRelation2@1240520008 : Record 14123601;
      ESLiveRelation@1240520013 : Record 14123602;
      ESLiveRelation2@1240520014 : Record 14123602;
      ESFLADSRelation@1240520012 : Record 14123810;
    BEGIN
      ESRelation."Entry No." := ESRelation."Entry No." + 1;
      ESRelation."File Position" := CurrentPos;
      ESRelation."Source Code Line No." := LineNo;
      IF ESRelation.Type = ESRelation.Type::"Parser Error" THEN
        ESRelation."Parser Error" := TRUE;
      CASE UpdateType OF
        UpdateType::Live:
          BEGIN
            ESLiveRelation.TRANSFERFIELDS(ESRelation,TRUE);
            ESLiveRelation.INSERT(TRUE);

            InsertedRelations := InsertedRelations + 1;

            IF ESLiveRelation."Object Type" = ESLiveRelation."Object Type"::Table THEN BEGIN
              ESLiveRelation2 := ESLiveRelation;
              ESLiveRelation2."Object Type" := ESLiveRelation2."Object Type"::TableData;
              ESLiveRelation2.INSERT(TRUE);

              InsertedRelations := InsertedRelations + 1;
            END;
          END;
        UpdateType::Security,
        UpdateType::"Security (Initial)":
          BEGIN
            IF ((UpdateType = UpdateType::Security) AND
                (ESRelation.Type IN
                 [ESRelation.Type::"Source Table",ESRelation.Type::"Data Item",
                  ESRelation.Type::PagePartID,ESRelation.Type::Editable,
                  ESRelation.Type::"FLADS Change",ESRelation.Type::OnLookup])) OR
               ((UpdateType = UpdateType::"Security (Initial)") AND
                (ESRelation.Type IN
                 [ESRelation.Type::"Source Table",ESRelation.Type::"Data Item",
                  ESRelation.Type::"FLADS Change"]))
            THEN BEGIN
              ESFLADSRelation.TRANSFERFIELDS(ESRelation,TRUE);
              IF (ESFLADSRelation."Relation Object ID" <> 0) AND
                 (ESFLADSRelation."Relation Object Type" =
                  ESFLADSRelation."Relation Object Type"::TableData)
              THEN
                ESFLADSRelation."Relation Object Type" :=
                  ESFLADSRelation."Relation Object Type"::Table;
              ESFLADSRelation.INSERT(TRUE);

              InsertedRelations := InsertedRelations + 1;
            END;
          END;
        ELSE BEGIN
          ESRelation.INSERT(TRUE);

          InsertedRelations := InsertedRelations + 1;

          IF ESRelation."Object Type" = ESRelation."Object Type"::Table THEN BEGIN
            ESRelation2 := ESRelation;
            ESRelation2."Object Type" := ESRelation2."Object Type"::TableData;
            ESRelation2.INSERT(TRUE);

            InsertedRelations := InsertedRelations + 1;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE EndOfStatement@1240520015(TextLine@1240520008 : Text[1000];LineNotComplete@1240520009 : Boolean) : Boolean;
    BEGIN
      IF LineNotComplete THEN
        ERROR(Text007,TextLine);

      IF STRLEN(TextLine) = 0 THEN
        EXIT(FALSE);

      EXIT(COPYSTR(TextLine,STRLEN(TextLine),1) IN [';','}']);
    END;

    LOCAL PROCEDURE FindTableRelation@1240520009(VAR ESRelation@1240520008 : Record 14123601;VAR InLevels@1240520014 : Boolean;TextLine@1240520009 : Text[1000];UpdateType@1240520017 : 'Standard,Live,Security,Standard (Live),Security (Initial)';TestMode@1240520016 : Boolean) : Boolean;
    VAR
      ESObjectInfo@1240520012 : Record 14123509;
      TempText@1240520010 : Text[1000];
      Pos@1240520011 : Integer;
      Level@1240520013 : Integer;
    BEGIN
      TempText := TextLine;
      IF COPYSTR(TempText,1,1) = ' ' THEN BEGIN
        WHILE COPYSTR(TempText,1,1) = ' ' DO
          TempText := COPYSTR(TempText,2);

        IF STRLEN(TempText) = 0 THEN
          EXIT(FALSE);

        IF NOT InLevels THEN
          IF NOT (COPYSTR(TextLine,1,5) = 'ELSE ') THEN
            EXIT(FALSE);
      END;

      IF InLevels THEN BEGIN
        Level := 0;
        WHILE (Level >= 0) AND (STRLEN(TempText) > 0) DO BEGIN
          IF COPYSTR(TempText,1,1) = '(' THEN
            Level := Level + 1;
          IF COPYSTR(TempText,1,1) = ')' THEN
            Level := Level - 1;
          TempText := COPYSTR(TempText,2);
        END;

        IF STRLEN(TempText) > 0 THEN
          InLevels := FALSE
        ELSE
          EXIT(FALSE);

        TempText := COPYSTR(TempText,2);
      END;

      ESRelation.Type := ESRelation.Type::"Table Relation";
      ESRelation."Source Code" :=
        COPYSTR(TempText,1,MAXSTRLEN(ESRelation."Source Code"));

      IF (COPYSTR(TempText,1,4) = 'IF (') OR (COPYSTR(TempText,1,9) = 'ELSE IF (') THEN BEGIN
        Level := 0;
        WHILE (Level >= 0) AND (STRLEN(TempText) > 0) DO BEGIN
          IF COPYSTR(TempText,1,1) = '(' THEN
            Level := Level + 1;
          IF COPYSTR(TempText,1,1) = ')' THEN BEGIN
            Level := Level - 1;
            IF Level = 0 THEN
              Level := Level - 1;
          END;
          TempText := COPYSTR(TempText,2);
        END;

        IF STRLEN(TempText) = 0 THEN BEGIN
          InLevels := TRUE;
          EXIT(FALSE);
        END;

        TempText := COPYSTR(TempText,2);
      END;

      IF COPYSTR(TempText,1,5) = 'ELSE ' THEN
        TempText := COPYSTR(TempText,6);

      IF COPYSTR(TempText,1,1) = '"' THEN BEGIN
        TempText := COPYSTR(TempText,2);
        Pos := STRPOS(TempText,'"');
        TempText := COPYSTR(TempText,1,Pos - 1);
      END ELSE BEGIN
        Pos := STRPOS(TempText,' WHERE (');
        IF Pos = 0 THEN
          Pos := STRPOS(TempText,' ELSE IF (');
        IF Pos > 0 THEN
          TempText := COPYSTR(TempText,1,Pos - 1);

        Pos := STRPOS(TempText,'.');
        IF Pos = 0 THEN BEGIN
          IF COPYSTR(TempText,STRLEN(TempText),1) IN [';','}'] THEN
            TempText := DELCHR(COPYSTR(TempText,1,STRLEN(TempText) - 1),'>',' ');
        END ELSE
          TempText := COPYSTR(TempText,1,Pos - 1);
        TempText := DELCHR(TempText,'<>',' ');
      END;

      ESRelation."Relation Object ID" := FindTableID(TempText,TextLine,UpdateType,TestMode);
      ESRelation."Parser Error" := ESRelation."Relation Object ID" = 0;

      IF UpdateType = UpdateType::Standard THEN BEGIN
        ESObjectInfo.RESET;
        ESObjectInfo.SETCURRENTKEY("Object Type","Object Name");
        ESObjectInfo.SETRANGE("Object Type",ESObjectInfo."Object Type"::Table);
        ESObjectInfo.SETRANGE("Object Name",TempText);
        IF NOT ESObjectInfo.FIND('-') THEN BEGIN
          IF TestMode THEN
            MESSAGE(Text008,TextLine);
          EXIT(FALSE);
        END;
        ESRelation."Relation Object ID" := ESObjectInfo."Object ID";
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FindFlowFieldTable@1240520012(VAR ESRelation@1240520008 : Record 14123601;TextLine@1240520009 : Text[1000];UpdateType@1240520016 : 'Standard,Live,Security,Standard (Live),Security (Initial)';TestMode@1240520015 : Boolean);
    VAR
      ESObjectInfo@1240520012 : Record 14123509;
      TempText@1240520010 : Text[1000];
      Pos@1240520011 : Integer;
      Pos2@1240520013 : Integer;
    BEGIN
      ESRelation.Type := ESRelation.Type::Flowfield;
      ESRelation."Source Code" :=
        COPYSTR(TextLine,1,MAXSTRLEN(ESRelation."Source Code"));

      TempText := TextLine;
      Pos := STRPOS(TempText,'(');
      TempText := COPYSTR(TempText,Pos + 1);
      IF COPYSTR(TempText,1,1) = '"' THEN BEGIN
        TempText := COPYSTR(TempText,2);
        Pos := STRPOS(TempText,'"');
        TempText := COPYSTR(TempText,1,Pos - 1);
      END ELSE BEGIN
        Pos := STRPOS(TempText,' ');
        Pos2 := STRPOS(TempText,'.');
        IF Pos > 0 THEN BEGIN
          IF (Pos > Pos2) AND (Pos2 > 0) THEN
            Pos := Pos2;
        END ELSE
          Pos := Pos2;

        IF Pos > 0 THEN
          TempText := COPYSTR(TempText,1,Pos - 1);
        IF COPYSTR(TempText,STRLEN(TempText),1) IN [';','}'] THEN
          TempText := DELCHR(COPYSTR(TempText,1,STRLEN(TempText) - 1),'>',' ');
      END;

      ESRelation."Relation Object ID" := FindTableID(TempText,TextLine,UpdateType,TestMode);

      IF UpdateType = UpdateType::Standard THEN BEGIN
        ESObjectInfo.RESET;
        ESObjectInfo.SETCURRENTKEY("Object Type","Object Name");
        ESObjectInfo.SETRANGE("Object Type",ESObjectInfo."Object Type"::Table);
        ESObjectInfo.SETRANGE("Object Name",TempText);
        IF NOT ESObjectInfo.FIND('-') THEN BEGIN
          IF TestMode THEN
            MESSAGE(Text008,TextLine);
        END ELSE
          ESRelation."Relation Object ID" := ESObjectInfo."Object ID";
      END;

      ESRelation."Parser Error" := ESRelation."Relation Object ID" = 0;
    END;

    LOCAL PROCEDURE FindTableID@1240520010(TableName@1240520008 : Text[250];TextLine@1240520009 : Text[1000];UpdateType@1240520014 : 'Standard,Live,Security,Standard (Live),Security (Initial)';TestMode@1240520013 : Boolean) : Integer;
    VAR
      AllObjWithCaption@1240520011 : Record 2000000058;
      ESObjectInfo@1240520012 : Record 14123509;
    BEGIN
      ESObjectInfoSortTmp.SETRANGE("Object Type",ESObjectInfoSortTmp."Object Type"::Table);
      ESObjectInfoSortTmp.SETRANGE("Object Name",TableName);
      IF ESObjectInfoSortTmp.FIND('-') THEN
        EXIT(ESObjectInfoSortTmp."Object ID");

      CASE UpdateType OF
        UpdateType::Live,
        UpdateType::Security,
        UpdateType::"Standard (Live)",
        UpdateType::"Security (Initial)":
          BEGIN
            ESObjectInfoSortSearchTmp.SETRANGE("Object Type",AllObjWithCaption."Object Type"::Table);
            ESObjectInfoSortSearchTmp.SETRANGE("Object Name",TableName);
            IF NOT ESObjectInfoSortSearchTmp.FIND('-') THEN BEGIN
              AllObjWithCaption.RESET;
              AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::Table);
              AllObjWithCaption.SETRANGE("Object Name",TableName);
              IF NOT AllObjWithCaption.FIND('-') THEN BEGIN
                IF TestMode THEN
                  MESSAGE(Text008,TextLine);
                EXIT(0);
              END;

              ESObjectInfoSortSearchTmp."Object Type" := AllObjWithCaption."Object Type";
              ESObjectInfoSortSearchTmp."Object ID" := AllObjWithCaption."Object ID";
              ESObjectInfoSortSearchTmp."Object Name" := AllObjWithCaption."Object Name";
              ESObjectInfoSortSearchTmp.INSERT;
            END ELSE
              AllObjWithCaption.GET(
                ESObjectInfoSortSearchTmp."Object Type",ESObjectInfoSortSearchTmp."Object ID");

            ESObjectInfoSortTmp."Object Type" := AllObjWithCaption."Object Type";
            ESObjectInfoSortTmp."Object ID" := AllObjWithCaption."Object ID";
            ESObjectInfoSortTmp."Object Name" := AllObjWithCaption."Object Name";
            ESObjectInfoSortTmp.INSERT;

            EXIT(AllObjWithCaption."Object ID");
          END;
        ELSE BEGIN
          ESObjectInfo.RESET;
          ESObjectInfo.SETCURRENTKEY("Object Type","Object Name");
          ESObjectInfo.SETRANGE("Object Type",ESObjectInfo."Object Type"::Table);
          ESObjectInfo.SETRANGE("Object Name",TableName);
          IF NOT ESObjectInfo.FIND('-') THEN BEGIN
            IF TestMode THEN
              MESSAGE(Text008,TextLine);
            EXIT(0);
          END;

          ESObjectInfoSortTmp."Object Type" := ESObjectInfo."Object Type";
          ESObjectInfoSortTmp."Object ID" := ESObjectInfo."Object ID";
          ESObjectInfoSortTmp."Object Name" := ESObjectInfo."Object Name";
          ESObjectInfoSortTmp.INSERT;

          EXIT(ESObjectInfo."Object ID");
        END;
      END;
    END;

    LOCAL PROCEDURE TestObjectInfoExist@1240520013(AllObjWithCaption@1240520009 : Record 2000000058;UpdateType@1240520013 : 'Standard,Live,Security,Standard (Live),Security (Initial)';TestMode@1240520010 : Boolean) : Boolean;
    VAR
      AllObjWithCaption2@1240520012 : Record 2000000058;
      ESObjectInfo2@1240520011 : Record 14123509;
    BEGIN
      IF NOT ESObjectInfoSortTmp.GET(AllObjWithCaption."Object Type",AllObjWithCaption."Object ID") THEN BEGIN
        IF UpdateType <> UpdateType::Standard THEN BEGIN
          ESObjectInfoSortTmp."Object Type" := AllObjWithCaption."Object Type";
          ESObjectInfoSortTmp."Object ID" := AllObjWithCaption."Object ID";

          IF AllObjWithCaption2.GET(AllObjWithCaption."Object Type",AllObjWithCaption."Object ID") THEN BEGIN
            ESObjectInfoSortTmp."Object Name" := AllObjWithCaption2."Object Name";
            ESObjectInfoSortTmp."Parser Error" := FALSE;

            IF (AllObjWithCaption2."Object Name" <> AllObjWithCaption."Object Name") AND TestMode THEN
              MESSAGE(
                Text010,
                AllObjWithCaption2."Object Name",AllObjWithCaption."Object Name",
                AllObjWithCaption."Object Type",AllObjWithCaption."Object ID");
          END ELSE BEGIN
            IF TestMode THEN
              AllObjWithCaption2.GET(AllObjWithCaption."Object Type",AllObjWithCaption."Object ID");

            ESObjectInfoSortTmp."Object Name" := AllObjWithCaption."Object Name";
            ESObjectInfoSortTmp."Parser Error" := TRUE;
          END;

          ESObjectInfoSortTmp.INSERT;
        END ELSE BEGIN
          ESObjectInfoSortTmp."Object Type" := AllObjWithCaption."Object Type";
          ESObjectInfoSortTmp."Object ID" := AllObjWithCaption."Object ID";

          IF ESObjectInfo2.GET(AllObjWithCaption."Object Type",AllObjWithCaption."Object ID") THEN BEGIN
            ESObjectInfoSortTmp."Object Name" := ESObjectInfo2."Object Name";
            ESObjectInfoSortTmp."Parser Error" := FALSE;

            IF (ESObjectInfo2."Object Name" <> AllObjWithCaption."Object Name") AND TestMode THEN
              MESSAGE(
                Text010,
                ESObjectInfo2."Object Name",AllObjWithCaption."Object Name",
                AllObjWithCaption."Object Type",AllObjWithCaption."Object ID");
          END ELSE BEGIN
            IF TestMode THEN
              ESObjectInfo2.GET(AllObjWithCaption."Object Type",AllObjWithCaption."Object ID");

            ESObjectInfoSortTmp."Object Name" := AllObjWithCaption."Object Name";
            ESObjectInfoSortTmp."Parser Error" := TRUE;
          END;

          ESObjectInfoSortTmp.INSERT;
        END;
      END ELSE
        IF (ESObjectInfoSortTmp."Object Name" <> AllObjWithCaption."Object Name") AND TestMode THEN
          MESSAGE(
            Text010,
            ESObjectInfoSortTmp."Object Name",AllObjWithCaption."Object Name",
            AllObjWithCaption."Object Type",AllObjWithCaption."Object ID");
    END;

    LOCAL PROCEDURE DeleteRelations@1240520016(AllObjWithCaption@1240520009 : Record 2000000058;UpdateType@1240520012 : 'Standard,Live,Security,Standard (Live),Security (Initial)');
    VAR
      ESLiveRelation@1240520011 : Record 14123602;
      ESRelation@1240520010 : Record 14123601;
      ESFLADSRelation@1240520008 : Record 14123810;
      ESFLADSControl@1240520013 : Record 14123814;
    BEGIN
      CASE UpdateType OF
        UpdateType::Live:
          BEGIN
            ESLiveRelation.RESET;
            IF AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Table THEN
              ESLiveRelation.SETRANGE(
                "Object Type",AllObjWithCaption."Object Type"::TableData,AllObjWithCaption."Object Type")
            ELSE
              ESLiveRelation.SETRANGE("Object Type",AllObjWithCaption."Object Type");
            ESLiveRelation.SETRANGE("Object ID",AllObjWithCaption."Object ID");
            ESLiveRelation.SETFILTER("Entry No.",'>0');
            ESLiveRelation.DELETEALL;
          END;
        UpdateType::Security,
        UpdateType::"Security (Initial)":
          BEGIN
            ESFLADSRelation.RESET;
            ESFLADSRelation.SETRANGE("Object Type",AllObjWithCaption."Object Type");
            ESFLADSRelation.SETRANGE("Object ID",AllObjWithCaption."Object ID");
            ESFLADSRelation.DELETEALL;

            ESFLADSControl.RESET;
            ESFLADSControl.SETRANGE("Object Type",AllObjWithCaption."Object Type");
            ESFLADSControl.SETRANGE("Object ID",AllObjWithCaption."Object ID");
            ESFLADSControl.DELETEALL;
          END;
        ELSE BEGIN
          ESRelation.RESET;
          IF AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Table THEN
            ESRelation.SETRANGE(
              "Object Type",AllObjWithCaption."Object Type"::TableData,AllObjWithCaption."Object Type")
          ELSE
            ESRelation.SETRANGE("Object Type",AllObjWithCaption."Object Type");
          ESRelation.SETRANGE("Object ID",AllObjWithCaption."Object ID");
          ESRelation.SETFILTER("Entry No.",'>0');
          ESRelation.DELETEALL;
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateVariable@1240520017(VAR AllObjWithCaption@1240520014 : Record 2000000058;VAR CurrField@1240520013 : Record 2000000041;VAR ESVariable@1240520011 : Record 14123605;VAR ESAnalyzerStatus@1240520010 : Record 14123604;TextLine@1240520008 : Text[1000];CurrentPos@1240520017 : Integer;LineNo@1240520016 : Integer;UpdateType@1240520021 : 'Standard,Live,Security,Standard (Live),Security (Initial)';VariableIsAParameter@1240520020 : Boolean;IsReturnValue@1240520019 : Boolean) : Boolean;
    VAR
      TempText@1240520015 : Text[1000];
      TempText2@1240520009 : Text[1000];
      pos@1240520012 : Integer;
    BEGIN
      ESVariable.INIT;
      ESVariable."Entry No." := ESVariable."Entry No." + 1;
      ESVariable."Field ID" := CurrField."No.";
      ESVariable."Source Code" := COPYSTR(TextLine,1,MAXSTRLEN(ESVariable."Source Code"));
      ESVariable."File Position" := CurrentPos;
      ESVariable."Source Code Line No." := LineNo;
      ESVariable."Reference Type" := ESAnalyzerStatus."Reference Type";
      IF ESAnalyzerStatus."Reference Name" <> '' THEN
        ESVariable."Reference Name" := ESAnalyzerStatus."Reference Name"
      ELSE
        ESVariable."Reference Name" := CurrField.FieldName;
      ESVariable."Reference ID" := ESAnalyzerStatus."Reference ID";
      ESVariable."Variable is a Parameter" := VariableIsAParameter;
      ESVariable."Return Value" := IsReturnValue;

      TempText := DELCHR(TextLine,'<>',' ');

      IF IsReturnValue THEN BEGIN
        pos := STRPOS(TempText,' : ');
        IF pos > 1 THEN BEGIN
          TempText2 := COPYSTR(TempText,1,pos - 1);
          TempText := COPYSTR(TempText,pos + 1);

          pos := STRPOS(TempText2,'@');
          IF pos > 0 THEN BEGIN
            EVALUATE(ESVariable."Variable ID",COPYSTR(TempText2,pos + 1));
            ESVariable."Variable Name" :=
              COPYSTR(COPYSTR(TempText2,1,pos - 1),1,MAXSTRLEN(ESVariable."Variable Name"));
          END ELSE
            ESVariable."Variable Name" := COPYSTR(TempText2,1,MAXSTRLEN(ESVariable."Variable Name"));
        END;
      END;

      IF COPYSTR(TempText,1,1) <> ':' THEN BEGIN
        IF COPYSTR(TempText,1,4) = 'VAR ' THEN BEGIN
          ESVariable."Variable by Reference" := TRUE;
          TempText := COPYSTR(TempText,5);
        END;

        IF COPYSTR(TempText,1,1) = '"' THEN BEGIN
          pos := STRPOS(TempText,'"@');
          IF pos = 0 THEN
            EXIT(FALSE);
          IF pos <= 2 THEN
            IF STRLEN(TempText) > 3 THEN
              pos := STRPOS(COPYSTR(TempText,3),'"@') + 2;
          IF pos <= 2 THEN
            EXIT(FALSE);
          ESVariable."Variable Name" :=
            COPYSTR(COPYSTR(TempText,2,pos - 2),1,MAXSTRLEN(ESVariable."Variable Name"));
          TempText := COPYSTR(TempText,pos + 2);
        END ELSE BEGIN
          pos := STRPOS(TempText,'@');
          IF pos = 0 THEN
            EXIT(FALSE);
          ESVariable."Variable Name" :=
            COPYSTR(COPYSTR(TempText,1,pos - 1),1,MAXSTRLEN(ESVariable."Variable Name"));
          TempText := COPYSTR(TempText,pos + 1);
        END;

        pos := STRPOS(TempText,' : ');
        IF pos = 0 THEN
          EXIT(FALSE);
        TempText2 := COPYSTR(TempText,1,pos - 1);
        IF NOT EVALUATE(ESVariable."Variable ID",TempText2) THEN
          EXIT(FALSE);

        TempText := COPYSTR(TempText,pos + 3);
      END ELSE
        TempText := COPYSTR(TempText,3);

      IF COPYSTR(TempText,1,7) = 'ARRAY [' THEN BEGIN
        pos := STRPOS(TempText,'] OF ');
        IF pos = 0 THEN
          EXIT(FALSE);
        ESVariable."Variable Array Dimension" :=
          COPYSTR(COPYSTR(TempText,8,pos - 8),1,MAXSTRLEN(ESVariable."Variable Array Dimension"));
        TempText := COPYSTR(TempText,pos + 5);
      END;

      IF COPYSTR(TempText,1,10) = 'TEMPORARY ' THEN BEGIN
        ESVariable."Variable is Temporary" := TRUE;
        TempText := COPYSTR(TempText,11);
      END;

      IF COPYSTR(TempText,1,1) <> '''' THEN BEGIN
        pos := STRPOS(TempText,' ');
        IF pos > 0 THEN BEGIN
          ESVariable."Variable Type" :=
            COPYSTR(COPYSTR(TempText,1,pos - 1),1,MAXSTRLEN(ESVariable."Variable Type"));
          TempText := COPYSTR(TempText,pos + 1)
        END ELSE BEGIN
          ESVariable."Variable Type" := COPYSTR(TempText,1,MAXSTRLEN(ESVariable."Variable Type"));
          TempText := '';
        END;
      END ELSE
        ESVariable."Variable Type" := 'OptionString';

      CASE ESVariable."Variable Type" OF
        'Record':
          ESVariable."Variable Object Type" := ESVariable."Variable Object Type"::Table;
        'Form':
          ESVariable."Variable Object Type" := ESVariable."Variable Object Type"::"2";
        'Report':
          ESVariable."Variable Object Type" := ESVariable."Variable Object Type"::Report;
        'Dataport':
          ESVariable."Variable Object Type" := ESVariable."Variable Object Type"::"4";
        'Codeunit':
          ESVariable."Variable Object Type" := ESVariable."Variable Object Type"::Codeunit;
        'XMLPort':
          ESVariable."Variable Object Type" := ESVariable."Variable Object Type"::XMLport;
        'Page':
          ESVariable."Variable Object Type" := ESVariable."Variable Object Type"::Page;
        'Query':
          ESVariable."Variable Object Type" := ESVariable."Variable Object Type"::Query;
      END;

      IF ESVariable."Variable Object Type" <> ESVariable."Variable Object Type"::" " THEN BEGIN
        IF NOT EVALUATE(ESVariable."Variable Object ID",TempText) THEN
          EXIT(FALSE);

        IF ESVariable."Variable Object Type" =ESVariable."Variable Object Type"::Table THEN
          ESVariable."Table ID" := ESVariable."Variable Object ID";
      END;

      InsertVariable(ESVariable,UpdateType,FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE InsertVariable@1240520022(VAR ESVariable@1240520013 : Record 14123605;UpdateType@1240520011 : 'Standard,Live,Security,Standard (Live),Security (Initial)';ParserError@1240520010 : Boolean);
    VAR
      ESLiveVariable@1240520009 : Record 14123606;
    BEGIN
      ESVariable."Parser Error" := ParserError;

      CASE UpdateType OF
        UpdateType::Live:
          BEGIN
            ESLiveVariable.TRANSFERFIELDS(ESVariable);
            ESLiveVariable.INSERT(TRUE);
          END;
        UpdateType::Security,
        UpdateType::"Security (Initial)":
          ERROR(Text012);
        ELSE
          ESVariable.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE DeleteVariables@1240520018(AllObjWithCaption@1240520009 : Record 2000000058;UpdateType@1240520012 : 'Standard,Live,Security,Standard (Live),Security (Initial)');
    VAR
      ESLiveVariable@1240520011 : Record 14123606;
      ESVariable@1240520010 : Record 14123605;
    BEGIN
      CASE UpdateType OF
        UpdateType::Live:
          BEGIN
            ESLiveVariable.RESET;
            IF AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Table THEN
              ESLiveVariable.SETRANGE(
                "Object Type",AllObjWithCaption."Object Type"::TableData,AllObjWithCaption."Object Type")
            ELSE
              ESLiveVariable.SETRANGE("Object Type",AllObjWithCaption."Object Type");
            ESLiveVariable.SETRANGE("Object ID",AllObjWithCaption."Object ID");
            ESLiveVariable.SETFILTER("Entry No.",'>0');
            ESLiveVariable.DELETEALL;
          END;
        UpdateType::Security,
        UpdateType::"Security (Initial)":
          ;
        ELSE BEGIN
          ESVariable.RESET;
          IF AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Table THEN
            ESVariable.SETRANGE(
              "Object Type",AllObjWithCaption."Object Type"::TableData,AllObjWithCaption."Object Type")
          ELSE
            ESVariable.SETRANGE("Object Type",AllObjWithCaption."Object Type");
          ESVariable.SETRANGE("Object ID",AllObjWithCaption."Object ID");
          ESVariable.SETFILTER("Entry No.",'>0');
          ESVariable.DELETEALL;
        END;
      END;
    END;

    PROCEDURE DeleteTableFields@1240520001(AllObjWithCaption@1240520002 : Record 2000000058;UpdateType@1240520001 : 'Standard,Live,Security,Standard (Live),Security (Initial)');
    VAR
      ESFLADSTableField@1240520003 : Record 14123820;
    BEGIN
      IF (UpdateType = UpdateType::Security) AND
         (AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Table)
      THEN BEGIN
        ESFLADSTableField.RESET;
        ESFLADSTableField.SETRANGE("Table No.",AllObjWithCaption."Object ID");
        ESFLADSTableField.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE UpdateRelationType@1240520019(VAR ESRelation@1240520011 : Record 14123601;TextLine@1240520008 : Text[1000]) : Boolean;
    VAR
      TempText@1240520015 : Text[1000];
      TempText2@1240520009 : Text[1000];
      pos@1240520012 : Integer;
    BEGIN
      TempText := DELCHR(TextLine,'<>',' ');

      ESRelation."Source Code" := COPYSTR(TempText,1,MAXSTRLEN(ESRelation."Source Code"));

      pos := STRPOS(TempText,' ');
      IF pos > 0 THEN BEGIN
        TempText2 := COPYSTR(TempText,1,pos - 1);
        TempText := COPYSTR(TempText,pos + 1)
      END ELSE
        EXIT(FALSE);

      CASE TempText2 OF
        'Record':
          ESRelation."Relation Object Type" := ESRelation."Relation Object Type"::Table;
        'Form':
          ESRelation."Relation Object Type" := ESRelation."Relation Object Type"::"2";
        'Report':
          ESRelation."Relation Object Type" := ESRelation."Relation Object Type"::Report;
        'Dataport':
          ESRelation."Relation Object Type" := ESRelation."Relation Object Type"::"4";
        'Codeunit':
          ESRelation."Relation Object Type" := ESRelation."Relation Object Type"::Codeunit;
        'XMLPort',
        'XMLport':
          ESRelation."Relation Object Type" := ESRelation."Relation Object Type"::XMLport;
        'Page':
          ESRelation."Relation Object Type" := ESRelation."Relation Object Type"::Page;
        'Query':
          ESRelation."Relation Object Type" := ESRelation."Relation Object Type"::Query;
        ELSE
          EXIT(FALSE);
      END;

      IF ESRelation."Relation Object Type" <> ESRelation."Relation Object Type"::TableData THEN
        IF NOT EVALUATE(ESRelation."Relation Object ID",TempText) THEN
          EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE InitializeSearchTable@1240520023(UpdateType@1240520002 : 'Standard,Live,Security,Standard (Live),Security (Initial)');
    VAR
      AllObj@1240520008 : Record 2000000038;
    BEGIN
      ESObjectInfoSortTmp.RESET;
      ESObjectInfoSortTmp.DELETEALL;
      ESObjectInfoSortTmp.RESET;
      ESObjectInfoSortTmp.SETCURRENTKEY("Object Type","Object Name");

      AllObj.RESET;
      AllObj.SETRANGE("Object Type",AllObj."Object Type"::Table);
      AllObj.SETFILTER("Object ID",'>2000000001');
      IF AllObj.FIND('-') THEN
        REPEAT
          ESObjectInfoSortTmp."Object Type" := ESObjectInfoSortTmp."Object Type"::Table;
          ESObjectInfoSortTmp."Object ID" := AllObj."Object ID";
          ESObjectInfoSortTmp."Object Name" := AllObj."Object Name";
          IF NOT ESObjectInfoSortTmp.INSERT THEN
            ;
        UNTIL AllObj.NEXT = 0;

      ESObjectInfoSortSearchTmp.RESET;
      ESObjectInfoSortSearchTmp.SETCURRENTKEY("Object Type","Object Name");
      IF UpdateType IN
         [UpdateType::Live,UpdateType::Security,UpdateType::"Standard (Live)",
          UpdateType::"Security (Initial)"]
      THEN BEGIN
        AllObj.RESET;
        IF AllObj.FIND('-') THEN
          REPEAT
            ESObjectInfoSortSearchTmp."Object Type" := AllObj."Object Type";
            ESObjectInfoSortSearchTmp."Object ID" := AllObj."Object ID";
            ESObjectInfoSortSearchTmp."Object Name" := AllObj."Object Name";
            IF NOT ESObjectInfoSortSearchTmp.INSERT THEN
              ;
          UNTIL AllObj.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ProcessFLADSControl@1240520021(AllObjWithCaption@1240520022 : Record 2000000058;VAR ESAnalyzerStatus@1240520018 : Record 14123604;TextLine@1240520015 : Text[1000];LineNo@1240520012 : Integer;StrLenTextLine@1240520008 : Integer);
    VAR
      TempText@1240520011 : Text[1000];
      Pos@1240520009 : Integer;
    BEGIN
      CASE AllObjWithCaption."Object Type" OF
        AllObjWithCaption."Object Type"::"2":
          BEGIN
            IF ESAnalyzerStatus."In Properties" THEN BEGIN
              IF COPYSTR(TextLine,1,21) = '    SourceTable=Table' THEN BEGIN
                TempText := COPYSTR(TextLine,22,STRLEN(TextLine) - 22);
                EVALUATE(ESAnalyzerStatus."Source Table ID",TempText);
              END;
            END ELSE
              IF TextLine = '  PROPERTIES' THEN
                ESAnalyzerStatus."In Properties" := TRUE;

            IF ESAnalyzerStatus."In Controls" THEN BEGIN
              IF COPYSTR(TextLine,1,6) = '    { ' THEN BEGIN
                TempText := COPYSTR(TextLine,7);
                Pos := STRPOS(TempText,';');
                EVALUATE(ESAnalyzerStatus."Control ID",DELCHR(COPYSTR(TempText,1,Pos - 1),'<>'));
                TempText := COPYSTR(TempText,Pos + 1);
                Pos := STRPOS(TempText,';');
                ESAnalyzerStatus."Control Type Text" :=
                  COPYSTR(
                    DELCHR(COPYSTR(TempText,1,Pos - 1),'>'),
                    1,MAXSTRLEN(ESAnalyzerStatus."Control Type Text"));

                InitFLADSControlInfo(ESAnalyzerStatus);
              END;

              IF StrLenTextLine >= 50 THEN
                TempText := COPYSTR(TextLine,50)
              ELSE
                TempText := '';
              IF TempText <> '' THEN BEGIN
                ProcessTestForCode(ESAnalyzerStatus,TempText,TextLine);

                IF NOT ESAnalyzerStatus."Menu Items" THEN BEGIN
                  IF COPYSTR(TempText,1,5) = 'Name=' THEN BEGIN
                    ESAnalyzerStatus."Control Name" :=
                      COPYSTR(
                        COPYSTR(TempText,6,STRLEN(TempText) - 6),
                        1,MAXSTRLEN(ESAnalyzerStatus."Control Name"));
                    ESAnalyzerStatus."Control Name Blank" := ESAnalyzerStatus."Control Name" = '';
                  END;

                  IF COPYSTR(TempText,1,14) = 'ParentControl=' THEN BEGIN
                    TempText := DELCHR(COPYSTR(TempText,15,STRLEN(TempText) - 15),'>');
                    EVALUATE(ESAnalyzerStatus."Parent Control ID",TempText);
                  END;

                  IF COPYSTR(TempText,1,8) = 'Visible=' THEN
                    ESAnalyzerStatus."Visible Code" :=
                      COPYSTR(
                        COPYSTR(TempText,9,STRLEN(TempText) - 9),
                        1,MAXSTRLEN(ESAnalyzerStatus."Visible Code"));

                  IF COPYSTR(TempText,1,9) = 'Editable=' THEN
                    ESAnalyzerStatus."Editable Code" :=
                      COPYSTR(
                        COPYSTR(TempText,10,STRLEN(TempText) - 10),
                        1,MAXSTRLEN(ESAnalyzerStatus."Editable Code"));

                  IF COPYSTR(TempText,1,11) = 'SourceExpr=' THEN BEGIN
                    ESAnalyzerStatus."SourceExpr Code" :=
                      COPYSTR(
                        DELCHR(COPYSTR(TempText,12,STRLEN(TempText) - 12),'>'),
                        1,MAXSTRLEN(ESAnalyzerStatus."SourceExpr Code"));

                    IF STRLEN(ESAnalyzerStatus."SourceExpr Code") > 3 THEN
                      IF COPYSTR(ESAnalyzerStatus."SourceExpr Code",1,1) = '"' THEN
                        ESAnalyzerStatus."SourceExpr Code" :=
                          COPYSTR(
                            COPYSTR(
                              ESAnalyzerStatus."SourceExpr Code",2,
                              STRLEN(ESAnalyzerStatus."SourceExpr Code") - 2),
                            1,MAXSTRLEN(ESAnalyzerStatus."SourceExpr Code"));
                  END;

                  IF TempText = 'Menu=MENUITEMS' THEN
                    ESAnalyzerStatus."Menu Items" := TRUE;

                  IF (COPYSTR(TextLine,StrLenTextLine,1) = '}') AND NOT ESAnalyzerStatus."In Code" THEN
                    InsertFLADSControl(AllObjWithCaption,ESAnalyzerStatus,TextLine,LineNo);
                END ELSE BEGIN
                  IF COPYSTR(TempText,1,7) = '  { ID=' THEN BEGIN
                    TempText := DELCHR(COPYSTR(TempText,8,STRLEN(TempText) - 8),'>');
                    EVALUATE(ESAnalyzerStatus."Second Control ID",TempText);

                    ESAnalyzerStatus."Menu Level" := 0;
                    ESAnalyzerStatus."Menu Visible Code" := '';
                    ESAnalyzerStatus."Second Control Type Text" := '';
                    ESAnalyzerStatus."RunObject Code" := '';
                  END;

                  IF COPYSTR(TempText,1,14) = '    MenuLevel=' THEN BEGIN
                    TempText := DELCHR(COPYSTR(TempText,15,STRLEN(TempText) - 15),'>');
                    EVALUATE(ESAnalyzerStatus."Menu Level",TempText);
                  END;

                  IF COPYSTR(TempText,1,17) = '    MenuItemType=' THEN
                    ESAnalyzerStatus."Second Control Type Text" :=
                      COPYSTR(
                        DELCHR(COPYSTR(TempText,18,STRLEN(TempText) - 18),'>'),
                        1,MAXSTRLEN(ESAnalyzerStatus."Second Control Type Text"));

                  IF COPYSTR(TempText,1,12) = '    Visible=' THEN
                    ESAnalyzerStatus."Menu Visible Code" :=
                      COPYSTR(
                        DELCHR(COPYSTR(TempText,13,STRLEN(TempText) - 13),'>'),
                        1,MAXSTRLEN(ESAnalyzerStatus."Menu Visible Code"));

                  IF COPYSTR(TempText,1,13) = '    RunObject=' THEN
                    ESAnalyzerStatus."RunObject Code" :=
                      COPYSTR(
                        DELCHR(COPYSTR(TempText,14,STRLEN(TempText) - 14),'>'),
                        1,MAXSTRLEN(ESAnalyzerStatus."RunObject Code"));

                  IF TextLine = '                                                 }' THEN
                    ESAnalyzerStatus."Menu Items" := FALSE
                  ELSE
                    IF (COPYSTR(TextLine,StrLenTextLine,1) = '}') AND NOT ESAnalyzerStatus."In Code" THEN
                      InsertFLADSControl(AllObjWithCaption,ESAnalyzerStatus,TextLine,LineNo);
                END;
              END;

              IF TextLine = '  }' THEN BEGIN
                ESAnalyzerStatus."In Controls" := FALSE;
                ESAnalyzerStatus."Control ID" := 0;
              END;
            END ELSE
              IF TextLine = '  CONTROLS' THEN
                ESAnalyzerStatus."In Controls" := TRUE;
          END;
        AllObjWithCaption."Object Type"::Page:
          BEGIN
            IF ESAnalyzerStatus."In Properties" THEN BEGIN
              IF ESAnalyzerStatus."Menu Items" THEN BEGIN
                IF StrLenTextLine >= 5 THEN BEGIN
                  TempText := COPYSTR(TextLine,5);

                  ProcessTestForCode(ESAnalyzerStatus,TempText,TextLine);

                  ProcessPageActions(ESAnalyzerStatus,TempText);
                END;

                IF TextLine = '    }' THEN
                  ESAnalyzerStatus."Menu Items" := FALSE
                ELSE
                  IF (COPYSTR(TextLine,StrLenTextLine,1) = '}') AND NOT ESAnalyzerStatus."In Code" THEN
                    InsertFLADSControl(AllObjWithCaption,ESAnalyzerStatus,TextLine,LineNo);
              END ELSE BEGIN
                IF COPYSTR(TextLine,1,21) = '    SourceTable=Table' THEN BEGIN
                  TempText := COPYSTR(TextLine,22,STRLEN(TextLine) - 22);
                  EVALUATE(ESAnalyzerStatus."Source Table ID",TempText);
                END;

                IF COPYSTR(TextLine,1,13) = '    PageType=' THEN
                  ESAnalyzerStatus."PageType Code" := COPYSTR(TextLine,14,STRLEN(TextLine) - 14);

                IF COPYSTR(TextLine,1,22) = '    ActionList=ACTIONS' THEN
                  ESAnalyzerStatus."Menu Items" := TRUE;
              END;

              IF TextLine = '  }' THEN
                ESAnalyzerStatus."In Properties" := FALSE;
            END ELSE
              IF TextLine = '  PROPERTIES' THEN
                ESAnalyzerStatus."In Properties" := TRUE;

            IF ESAnalyzerStatus."In Controls" THEN BEGIN
              IF COPYSTR(TextLine,1,6) = '    { ' THEN BEGIN
                TempText := COPYSTR(TextLine,7);
                Pos := STRPOS(TempText,';');
                EVALUATE(ESAnalyzerStatus."Control ID",DELCHR(COPYSTR(TempText,1,Pos - 1),'<>'));
                TempText := COPYSTR(TempText,Pos + 1);
                Pos := STRPOS(TempText,';');
                IF DELCHR(COPYSTR(TempText,1,Pos - 1),'>') <> '' THEN
                  EVALUATE(ESAnalyzerStatus."Control Level",DELCHR(COPYSTR(TempText,1,Pos - 1),'>'))
                ELSE
                  ESAnalyzerStatus."Control Level" := 0;
                TempText := COPYSTR(TempText,Pos + 1);
                Pos := STRPOS(TempText,';');
                IF Pos = 0 THEN
                  Pos := STRPOS(TempText,'}');
                ESAnalyzerStatus."Control Type Text" := DELCHR(COPYSTR(TempText,1,Pos - 1),'>');

                InitFLADSControlInfo(ESAnalyzerStatus);
              END;

              IF StrLenTextLine >= 17 THEN
                TempText := COPYSTR(TextLine,17)
              ELSE
                TempText := '';
              IF TempText <> '' THEN BEGIN
                ProcessTestForCode(ESAnalyzerStatus,TempText,TextLine);

                IF NOT ESAnalyzerStatus."Menu Items" THEN BEGIN
                  IF COPYSTR(TempText,1,5) = 'Name=' THEN BEGIN
                    ESAnalyzerStatus."Control Name" := COPYSTR(TempText,6,STRLEN(TempText) - 6);
                    ESAnalyzerStatus."Control Name Blank" := ESAnalyzerStatus."Control Name" = '';
                   END;

                  IF COPYSTR(TempText,1,8) = 'Visible=' THEN
                    ESAnalyzerStatus."Visible Code" :=
                      COPYSTR(
                        COPYSTR(TempText,9,STRLEN(TempText) - 9),
                        1,MAXSTRLEN(ESAnalyzerStatus."Visible Code"));

                  IF COPYSTR(TempText,1,9) = 'Editable=' THEN
                    ESAnalyzerStatus."Editable Code" :=
                      COPYSTR(
                        COPYSTR(TempText,10,STRLEN(TempText) - 10),
                        1,MAXSTRLEN(ESAnalyzerStatus."Editable Code"));

                  IF COPYSTR(TempText,1,10) = 'HideValue=' THEN
                    ESAnalyzerStatus."HideValue Code" :=
                      COPYSTR(
                        COPYSTR(TempText,11,STRLEN(TempText) - 11),
                        1,MAXSTRLEN(ESAnalyzerStatus."HideValue Code"));

                  IF COPYSTR(TempText,1,11) = 'SourceExpr=' THEN BEGIN
                    ESAnalyzerStatus."SourceExpr Code" :=
                      COPYSTR(
                        DELCHR(COPYSTR(TempText,12,STRLEN(TempText) - 12),'>'),
                        1,MAXSTRLEN(ESAnalyzerStatus."SourceExpr Code"));

                    IF STRLEN(ESAnalyzerStatus."SourceExpr Code") > 3 THEN
                      IF COPYSTR(ESAnalyzerStatus."SourceExpr Code",1,1) = '"' THEN
                        ESAnalyzerStatus."SourceExpr Code" :=
                          COPYSTR(
                            COPYSTR(
                              ESAnalyzerStatus."SourceExpr Code",2,
                              STRLEN(ESAnalyzerStatus."SourceExpr Code") - 2),
                            1,MAXSTRLEN(ESAnalyzerStatus."SourceExpr Code"));
                  END;

                  IF TempText = 'ActionList=ACTIONS' THEN
                    ESAnalyzerStatus."Menu Items" := TRUE;

                  IF (COPYSTR(TextLine,StrLenTextLine,1) = '}') AND NOT ESAnalyzerStatus."In Code" THEN
                    InsertFLADSControl(AllObjWithCaption,ESAnalyzerStatus,TextLine,LineNo);
                END ELSE BEGIN
                  ProcessPageActions(ESAnalyzerStatus,TempText);

                  IF TextLine = '                }' THEN
                    ESAnalyzerStatus."Menu Items" := FALSE
                  ELSE
                    IF (COPYSTR(TextLine,StrLenTextLine,1) = '}') AND NOT ESAnalyzerStatus."In Code" THEN
                      InsertFLADSControl(AllObjWithCaption,ESAnalyzerStatus,TextLine,LineNo);
                END;
              END;

              IF TextLine = '  }' THEN BEGIN
                ESAnalyzerStatus."In Controls" := FALSE;
                ESAnalyzerStatus."Control ID" := 0;
              END;
            END ELSE
              IF TextLine = '  CONTROLS' THEN
                ESAnalyzerStatus."In Controls" := TRUE;
          END;
      END;
    END;

    LOCAL PROCEDURE ProcessTestForCode@1240520026(VAR ESAnalyzerStatus@1240520009 : Record 14123604;VAR TempText@1240520008 : Text[1000];TextLine@1240520010 : Text[1000]);
    BEGIN
      IF STRLEN(TempText) > 6 THEN BEGIN
        IF NOT ESAnalyzerStatus."In Code" THEN BEGIN
          IF COPYSTR(TempText,STRLEN(TempText) - 5) = '=BEGIN' THEN BEGIN
            ESAnalyzerStatus."In Code BEGIN Position" := STRPOS(TextLine,'=BEGIN');
            ESAnalyzerStatus."In Code" := TRUE;
          END;

          IF COPYSTR(TempText,STRLEN(TempText) - 3) = '=VAR' THEN BEGIN
            ESAnalyzerStatus."In Code BEGIN Position" := STRPOS(TextLine,'=VAR');
            ESAnalyzerStatus."In Code" := TRUE;
          END;
        END ELSE BEGIN
          IF TextLine = PADSTR('',ESAnalyzerStatus."In Code BEGIN Position") + 'END;' THEN
            ESAnalyzerStatus."In Code" := FALSE;
        END;
      END;
    END;

    LOCAL PROCEDURE ProcessPageActions@1240520024(VAR ESAnalyzerStatus@1240520008 : Record 14123604;VAR TempText@1240520011 : Text[1000]);
    VAR
      Pos@1240520009 : Integer;
    BEGIN
      IF COPYSTR(TempText,1,4) = '  { ' THEN BEGIN
        TempText := COPYSTR(TempText,5);
        Pos := STRPOS(TempText,';');
        EVALUATE(ESAnalyzerStatus."Second Control ID",DELCHR(COPYSTR(TempText,1,Pos - 1),'>'));

        TempText := COPYSTR(TempText,Pos + 1);
        Pos := STRPOS(TempText,';');
        IF NOT EVALUATE(ESAnalyzerStatus."Menu Level",DELCHR(COPYSTR(TempText,1,Pos - 1),'>')) THEN
          ESAnalyzerStatus."Menu Level" := 0;

        TempText := COPYSTR(TempText,Pos + 1);
        Pos := STRPOS(TempText,';');
        IF Pos = 0 THEN
          Pos := STRPOS(TempText,'}');
        ESAnalyzerStatus."Second Control Type Text" := DELCHR(COPYSTR(TempText,1,Pos - 1),'>');

        ESAnalyzerStatus."Menu Visible Code" := '';
        ESAnalyzerStatus."RunObject Code" := '';
        ESAnalyzerStatus."Enabled Code" := '';
      END;

      IF COPYSTR(TempText,1,26) = '                  Visible=' THEN
        ESAnalyzerStatus."Menu Visible Code" :=
          COPYSTR(
            DELCHR(COPYSTR(TempText,27,STRLEN(TempText) - 27),'>'),
            1,MAXSTRLEN(ESAnalyzerStatus."Menu Visible Code"));

      IF COPYSTR(TempText,1,26) = '                  Enabled=' THEN
        ESAnalyzerStatus."Enabled Code" :=
          COPYSTR(
            DELCHR(COPYSTR(TempText,27,STRLEN(TempText) - 27),'>'),
            1,MAXSTRLEN(ESAnalyzerStatus."Enabled Code"));

      IF COPYSTR(TempText,1,28) = '                  RunObject=' THEN
        ESAnalyzerStatus."RunObject Code" :=
          COPYSTR(
            DELCHR(COPYSTR(TempText,29,STRLEN(TempText) - 29),'>'),
            1,MAXSTRLEN(ESAnalyzerStatus."RunObject Code"));
    END;

    LOCAL PROCEDURE InitFLADSControlInfo@1240520025(VAR ESAnalyzerStatus@1240520008 : Record 14123604);
    BEGIN
      ESAnalyzerStatus."Second Control ID" := 0;
      ESAnalyzerStatus."Parent Control ID" := 0;
      ESAnalyzerStatus."Visible Code" := '';
      ESAnalyzerStatus."Editable Code" := '';
      ESAnalyzerStatus."HideValue Code" := '';
      ESAnalyzerStatus."Control Name" := '';
      ESAnalyzerStatus."SourceExpr Code" := '';
      ESAnalyzerStatus."Menu Level" := 0;
      ESAnalyzerStatus."Menu Visible Code" := '';
      ESAnalyzerStatus."RunObject Code" := '';
      ESAnalyzerStatus."In Code" := FALSE;
      ESAnalyzerStatus."In Code BEGIN Position" := 0;
      ESAnalyzerStatus."Second Control Type Text" := '';
      ESAnalyzerStatus."Enabled Code" := '';
      ESAnalyzerStatus."Control Name Blank" := FALSE;
    END;

    LOCAL PROCEDURE InsertFLADSControl@1240520020(AllObjWithCaption@1240520010 : Record 2000000058;VAR ESAnalyzerStatus@1240520008 : Record 14123604;TextLine@1240520012 : Text[1000];LineNo@1240520013 : Integer);
    VAR
      ESFLADSControl@1240520009 : Record 14123814;
      Field@1240520011 : Record 2000000041;
    BEGIN
      ESAnalyzerStatus."Control Number in Code" := ESAnalyzerStatus."Control Number in Code" + 1;

      ESFLADSControl.INIT;
      ESFLADSControl."Object Type" := AllObjWithCaption."Object Type";
      ESFLADSControl."Object ID" := AllObjWithCaption."Object ID";
      ESFLADSControl.Index := 1;
      ESFLADSControl."Source Table No." := ESAnalyzerStatus."Source Table ID";
      ESFLADSControl."Control Number in Code" := ESAnalyzerStatus."Control Number in Code";

      IF ESAnalyzerStatus."Menu Items" THEN BEGIN
        ESFLADSControl."Control ID" := ESAnalyzerStatus."Second Control ID";
        ESFLADSControl.Level := ESAnalyzerStatus."Menu Level";
        ESFLADSControl."Visible Code" := ESAnalyzerStatus."Menu Visible Code";
        ESFLADSControl."Parent Control ID" := ESAnalyzerStatus."Control ID";
        ESFLADSControl."Control Type Text" := ESAnalyzerStatus."Second Control Type Text";
        ESFLADSControl."PageType Code" := ESAnalyzerStatus."PageType Code";
        ESFLADSControl."RunObject Code" := ESAnalyzerStatus."RunObject Code";
        ESFLADSControl."Enabled Code" := ESAnalyzerStatus."Enabled Code";
      END ELSE BEGIN
        ESFLADSControl."Control ID" := ESAnalyzerStatus."Control ID";
        ESFLADSControl."Visible Code" := ESAnalyzerStatus."Visible Code";
        ESFLADSControl."Editable Code" := ESAnalyzerStatus."Editable Code";
        ESFLADSControl."HideValue Code" := ESAnalyzerStatus."HideValue Code";
        ESFLADSControl."Control Name" := ESAnalyzerStatus."Control Name";
        ESFLADSControl."SourceExpr Code" := ESAnalyzerStatus."SourceExpr Code";
        ESFLADSControl."Control Type Text" := ESAnalyzerStatus."Control Type Text";
        ESFLADSControl."Parent Control ID" := ESAnalyzerStatus."Parent Control ID";
        ESFLADSControl."PageType Code" := ESAnalyzerStatus."PageType Code";
        ESFLADSControl.Level := ESAnalyzerStatus."Control Level";
        ESFLADSControl."Control Name Blank" := ESAnalyzerStatus."Control Name Blank";

        IF (ESFLADSControl."Source Table No." <> 0) AND
           (ESFLADSControl."SourceExpr Code" <> '') AND
           (STRLEN(ESFLADSControl."SourceExpr Code") <= 30)
        THEN BEGIN
          Field.RESET;
          Field.SETRANGE(TableNo,ESFLADSControl."Source Table No.");
          Field.SETRANGE(FieldName,ESFLADSControl."SourceExpr Code");
          IF Field.FIND('-') THEN BEGIN
            ESFLADSControl."Field ID" := Field."No.";
            ESFLADSControl."Field Class" := Field.Class;
          END;
        END;
      END;

      ESFLADSControl.UpdateValues;

      IF NOT ESFLADSControl.INSERT THEN BEGIN
        MESSAGE(
          Text013,LineNo,TextLine,ESFLADSControl."Object Type",ESFLADSControl."Object ID",
          ESFLADSControl."Control ID");

        REPEAT
          ESFLADSControl.Index := ESFLADSControl.Index + 1;

          ESFLADSControl.UpdateValues;
        UNTIL ESFLADSControl.INSERT;
      END;
    END;

    BEGIN
    END.
  }
}

