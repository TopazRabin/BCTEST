OBJECT Codeunit 11123308 SC - XML Wrapper (dotNET)
{
  OBJECT-PROPERTIES
  {
    Date=04/18/17;
    Time=[ 1:00:00 PM];
    Version List=SCW19.2.0;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text11123302@11123310 : TextConst 'ENU=Directory %1 does not exist. Please check Sana Commerce logging options.';
      Text11123303@11123304 : TextConst 'ENU="%1[@%2=''%3'']"';
      Text11123314@11123306 : TextConst 'ENU=Field %1 not supported or disabled.';
      Text11123399@11123307 : TextConst 'ENU=Error Text: %1\\ - Host Name (Service Tier): %2\\ - Database Name: %3\\ - Company Name: %4.';
      Context@11123311 : Codeunit 11123305;
      RequestDocumentGlobal@11123309 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ResponseDocumentGlobal@11123308 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      RequestNodeGlobal@11123305 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ResponseNodeGlobal@11123303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CurrentXMLNodeGlobal@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";

    PROCEDURE PrepareXMLDocuments@11123309(VAR RequestBuff@11123303 : Record 11123303;VAR ResponseBuff@11123302 : Record 11123303);
    VAR
      RequestDocument@11123305 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ResponseDocument@11123304 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF NOT ISNULL(RequestDocumentGlobal) THEN
        CLEAR(RequestDocumentGlobal);

      IF NOT ISNULL(ResponseDocumentGlobal) THEN
        CLEAR(ResponseDocumentGlobal);

      CreateXMLDocFromBuff(RequestBuff,RequestDocument);
      RequestDocumentGlobal := RequestDocument;

      ResponseDocumentGlobal := ResponseDocument.XmlDocument;

      RequestNodeGlobal := RequestDocumentGlobal.SelectSingleNode('Request/Params');

      SetBufferCurrentNode(RequestBuff,RequestNodeGlobal);
    END;

    PROCEDURE InitializeResponse@11123308(VAR ResponseBuff@11123303 : Record 11123303);
    VAR
      XMLNode@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      GenerateResponseXML(ResponseDocumentGlobal,ResponseNodeGlobal);

      XMLNode := ResponseDocumentGlobal.CreateElement('Errors');
      ResponseDocumentGlobal.DocumentElement.AppendChild(XMLNode);
      CLEAR(XMLNode);

      SetBufferCurrentNode(ResponseBuff,ResponseNodeGlobal);
    END;

    PROCEDURE GenerateResponseXML@11123399(VAR XMLDoc@11123303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR ResponseNode@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLRootNode@11123304 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLDoc.LoadXml('<?xml version="1.0" encoding="windows-1252"?><Response/>');

      XMLRootNode := XMLDoc.DocumentElement;
      AddElement(XMLRootNode,'Result',ResponseNode,'');
    END;

    PROCEDURE AddElement@11123316(VAR ParrentNode@11123305 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@11123304 : Text[1024];VAR ChildNode@11123303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeValue@11123302 : Text[1024]);
    VAR
      NewNode@11123307 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      NewNode := ParrentNode.OwnerDocument.CreateNode('element',NodeName,'');
      NewNode.InnerText := NodeValue;
      ParrentNode.AppendChild(NewNode);
      ChildNode := NewNode;
    END;

    PROCEDURE AddAttribute@11123318(VAR XMLElement@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";AttributeName@11123304 : Text[1024];AttributeValue@11123303 : Text[1024]);
    BEGIN
      XMLElement.SetAttribute(AttributeName,AttributeValue);
    END;

    PROCEDURE AddFieldElement@11123317(VAR XMLNode@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";FieldName@11123303 : Text[1024];FieldValue@11123304 : Text[1024]);
    VAR
      NewChildNode@11123305 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      NewChildNode := XMLNode.OwnerDocument.CreateNode('element','field','');
      AddAttribute(NewChildNode,'name',FieldName);
      AddAttribute(NewChildNode,'value',FieldValue);
      XMLNode.AppendChild(NewChildNode);
    END;

    PROCEDURE AddFieldElementByNo@11123324(VAR XMLNode@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR RecRef@11123304 : RecordRef;FieldNo@11123303 : Integer);
    VAR
      FieldRef@11123305 : FieldRef;
    BEGIN
      FieldRef := RecRef.FIELD(FieldNo);
      AddFieldXML(XMLNode,FieldRef);
    END;

    PROCEDURE AddKeyValueElement@11123320(VAR XMLNode@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@11123306 : Text[1024];KeyName@11123303 : Text[1024];KeyValue@11123304 : Text[1024]);
    VAR
      NewChildNode@11123305 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      NewChildNode := XMLNode.OwnerDocument.CreateNode('element',NodeName,'');
      AddAttribute(NewChildNode,'key',KeyName);
      AddAttribute(NewChildNode,'value',KeyValue);
      XMLNode.AppendChild(NewChildNode);
    END;

    PROCEDURE AddElementEx@11123323(VAR ParrentNode@11123304 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@11123303 : Text[1024];NodeValue@11123302 : Text[1024]);
    VAR
      XMLNode@11123305 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLNode := ParrentNode.OwnerDocument.CreateNode('element',NodeName,'');
      XMLNode.InnerText := NodeValue;
      ParrentNode.AppendChild(XMLNode);
    END;

    PROCEDURE AddFieldNameValueTypeElement@11123321(VAR XMLNode@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";FieldName@11123303 : Text[1024];FieldValue@11123304 : Text[1024];FieldType@11123305 : Text[50]);
    VAR
      NewChildNode@11123306 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      NewChildNode := XMLNode.OwnerDocument.CreateNode('element','field','');
      AddAttribute(NewChildNode,'name',FieldName);
      AddAttribute(NewChildNode,'value',FieldValue);
      AddAttribute(NewChildNode,'type',FieldType);
      XMLNode.AppendChild(NewChildNode);
    END;

    PROCEDURE AddFieldXML@11123325(VAR XMLNode@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR FieldRef@11123303 : FieldRef);
    VAR
      CommonFunc@11123304 : Codeunit 11123309;
      RecRef@11123306 : RecordRef;
      FieldName@11123305 : Text[250];
    BEGIN
      RecRef := FieldRef.RECORD;
      FieldName := CommonFunc.FieldNameMapping(RecRef.NUMBER,FieldRef.NAME);
      AddFieldXMLByName(XMLNode,FieldRef,FieldName);
    END;

    PROCEDURE AddFieldXMLByName@11123329(VAR XMLNode@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR FieldRef@11123303 : FieldRef;FieldName@11123304 : Text[1024]);
    VAR
      CommonFunc@11123305 : Codeunit 11123309;
      Settings@11123306 : Codeunit 11123311;
      DateTimeValue@11123307 : DateTime;
      IntValue@11123308 : Integer;
    BEGIN
      IF NOT CommonFunc.CheckField(FieldRef) THEN
        ERROR(Text11123314,FieldRef.NAME);

      IF FORMAT(FieldRef.CLASS) = 'FlowField' THEN
        FieldRef.CALCFIELD;

      CASE FORMAT(FieldRef.TYPE) OF
        'Boolean', 'Option' :
          AddFieldNameValueTypeElement(
            XMLNode,
            FieldName,
            FORMAT(FieldRef.VALUE,0,2),
            CommonFunc.FieldTypeMapping(FORMAT(FieldRef.TYPE)));
        'DateTime' :
          BEGIN
            EVALUATE(DateTimeValue,FORMAT(FieldRef.VALUE));

            AddFieldNameValueTypeElement(
              XMLNode,
              FieldName,
              FORMAT(Settings.DateToUtc(DateTimeValue),0,3),
              CommonFunc.FieldTypeMapping(FORMAT(FieldRef.TYPE)));
          END;
        ELSE
          AddFieldNameValueTypeElement(
            XMLNode,
            FieldName,
            FORMAT(FieldRef.VALUE),
            CommonFunc.FieldTypeMapping(FORMAT(FieldRef.TYPE)))
      END;
    END;

    PROCEDURE FindValueByKeyAttribute@11123326(VAR ParrentXMLNode@11123308 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@11123307 : Text[1024];KeyAttributeName@11123306 : Text[1024];ValueAttributeName@11123304 : Text[1024];KeyAttributeValue@11123303 : Text[1024];DeleteNode@11123302 : Boolean) : Text[1024];
    VAR
      XMLNode@11123311 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ValueAttributeXMLNode@11123310 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      AttributeValue@11123309 : Text[1024];
      XPathQuery@11123305 : Text[250];
    BEGIN
      IF NOT ISNULL(ParrentXMLNode) THEN BEGIN
        XPathQuery := STRSUBSTNO(Text11123303,NodeName,KeyAttributeName,KeyAttributeValue);
        XMLNode := ParrentXMLNode.SelectSingleNode(XPathQuery);
        IF NOT ISNULL(XMLNode) THEN BEGIN
          ValueAttributeXMLNode := XMLNode.SelectSingleNode(STRSUBSTNO('@%1',ValueAttributeName));
          IF NOT ISNULL(ValueAttributeXMLNode) THEN
            AttributeValue := ValueAttributeXMLNode.InnerText;

          IF DeleteNode THEN
            ParrentXMLNode.RemoveChild(XMLNode);
        END;
      END;
      EXIT(AttributeValue);
    END;

    PROCEDURE CreateXMLDocFromBuff@11123304(VAR Buffer@11123303 : Record 11123303;VAR XMLDoc@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      ReadStream@11123304 : InStream;
      TextVar@11123305 : Text;
    BEGIN
      Context.GetBuffer(Buffer);

      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      IF Buffer.XML.HASVALUE THEN BEGIN
        Buffer.XML.CREATEINSTREAM(ReadStream);
        XMLDoc.Load(ReadStream);
      END ELSE BEGIN
        TextVar := Buffer.GetXMLText;
        XMLDoc.LoadXml(Buffer.GetXMLText);
      END;
    END;

    PROCEDURE SaveRequest@11123302();
    BEGIN
      IF NOT ISNULL(RequestDocumentGlobal) THEN
        SaveLog(RequestDocumentGlobal,'Request');
    END;

    PROCEDURE SaveResponse@11123303();
    BEGIN
      IF NOT ISNULL(ResponseDocumentGlobal) THEN
        SaveLog(ResponseDocumentGlobal,'Response');
    END;

    LOCAL PROCEDURE GetLogOutputDir@11123307() : Text[251];
    VAR
      SanaSetup@11123302 : Record 11123305;
      OutputFolder@11123303 : Text[251];
      DirPath@11123304 : Text[1024];
    BEGIN
      SanaSetup.GET;
      SanaSetup.TESTFIELD("Logging Output Directory");

      OutputFolder := CompleteDirPath(SanaSetup."Logging Output Directory");

      IF NOT ISSERVICETIER THEN BEGIN
        DirPath := OutputFolder + 'nul';
        IF NOT EXISTS(DirPath) THEN
          ERROR(Text11123302,OutputFolder);
      END;

      EXIT(OutputFolder);
    END;

    LOCAL PROCEDURE CompleteDirPath@11123305(DirectoryPath@11123302 : Text[250]) : Text[251];
    VAR
      OutputFolder@11123304 : Text[251];
    BEGIN
      IF COPYSTR(OutputFolder,STRLEN(DirectoryPath),1) <> '\' THEN
        EXIT(DirectoryPath + '\');
      EXIT(DirectoryPath);
    END;

    LOCAL PROCEDURE SaveLog@11123306(VAR XMLDoc@11123307 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";LogType@11123303 : Text[30]);
    VAR
      FileName@11123305 : Text[384];
      OutputFolder@11123304 : Text[251];
      Context@11123306 : Codeunit 11123305;
    BEGIN
      OutputFolder := GetLogOutputDir;
      FileName :=
        OutputFolder +
        FORMAT(CURRENTDATETIME,0,'<Day,2>-<Month,2>-<Year>_<Hours24>.<Minutes,2>.<Seconds,2><Second dec>') + '_' +
        LogType + '_' +
        Context.GetCurrentOperationName +
        '.XML';

      XMLDoc.Save(FileName);
    END;

    PROCEDURE GetCodePage@11123311() : Text[30];
    VAR
      Registry@11123305 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.Microsoft.Win32.Registry";
      ValueName@11123304 : Text;
      RegKey@11123303 : Text[250];
      CodePageSetting@11123302 : Text[30];
    BEGIN
      RegKey := 'HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Nls\CodePage';
      ValueName := 'OEMCP';

      CodePageSetting := Registry.GetValue(RegKey,ValueName,0);

      EXIT(CodePageSetting);
    END;

    PROCEDURE GetOperationName@11123310() : Text[80];
    VAR
      XMLNode@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      OperationName@11123303 : Text[80];
    BEGIN
      OperationName := 'Undefined';
      XMLNode := RequestDocumentGlobal.SelectSingleNode('Request/Operation');
      IF NOT ISNULL(XMLNode) THEN
        OperationName := XMLNode.InnerText;
      EXIT(OperationName);
    END;

    PROCEDURE GetWebsiteID@11123332() : Code[50];
    VAR
      XMLNode@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      WebsiteID@11123303 : Code[50];
    BEGIN
      WebsiteID := '';
      XMLNode := RequestDocumentGlobal.SelectSingleNode('Request/Params/WebsiteId');
      IF NOT ISNULL(XMLNode) THEN
        WebsiteID := XMLNode.InnerText;
      EXIT(WebsiteID);
    END;

    PROCEDURE FinalizeResponse@11123312(VAR ResponseBuff@11123302 : Record 11123303);
    VAR
      WriteStream@11123306 : OutStream;
      TextVar@11123303 : Text;
    BEGIN
      CLEAR(ResponseBuff);
      IF NOT ResponseBuff.ISEMPTY THEN
        ResponseBuff.DELETEALL;
      ResponseBuff.INIT;

      ResponseBuff.XML.CREATEOUTSTREAM(WriteStream);
      IF GUIALLOWED OR NOT ISSERVICETIER THEN
        ResponseDocumentGlobal.Save(WriteStream)
      ELSE
        WriteStream.WRITETEXT(ResponseDocumentGlobal.OuterXml);

      TextVar := ResponseDocumentGlobal.OuterXml;
      ResponseBuff.SetXMLText(TextVar);

      ResponseBuff.INSERT;
    END;

    PROCEDURE SetBufferCurrentNode@11123315(VAR Buffer@11123303 : Record 11123303;VAR XMLNode@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    BEGIN
      Buffer.FINDFIRST;
      Buffer.SetCurrentNode(XMLNode);
    END;

    PROCEDURE SetBufferCurrentNodeList@11123322(VAR Buffer@11123302 : Record 11123303;VAR XMLNodeList@11123303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList");
    BEGIN
      Buffer.FINDFIRST;
      Buffer.SetCurrentNodeList(XMLNodeList);
    END;

    PROCEDURE SetCurrentNodeFromBuffer@11123327(VAR Buffer@11123302 : Record 11123303);
    BEGIN
      Buffer.GetCurrentNode(CurrentXMLNodeGlobal);
    END;

    PROCEDURE GetCurrentNodeToBuffer@11123328(VAR Buffer@11123302 : Record 11123303);
    BEGIN
      SetBufferCurrentNode(Buffer,CurrentXMLNodeGlobal);
    END;

    PROCEDURE GetRequestNode@11123313(VAR RequestBuff@11123302 : Record 11123303);
    BEGIN
      SetBufferCurrentNode(RequestBuff,RequestNodeGlobal);
    END;

    PROCEDURE GetResponseNode@11123314(VAR ResponseBuff@11123302 : Record 11123303);
    BEGIN
      SetBufferCurrentNode(ResponseBuff,ResponseNodeGlobal);
    END;

    PROCEDURE HandleError@11123319(ServerName@11123304 : Text[250];DatabaseName@11123302 : Text[250]);
    VAR
      XMLNode@11123303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ErrorText@11123305 : Text[1024];
      ErrorExtraInfoArray@11123306 : ARRAY [10] OF Text[1024];
      I@11123307 : Integer;
    BEGIN
      XMLNode := ResponseDocumentGlobal.SelectSingleNode('Response/Errors');
      ErrorText := GETLASTERRORTEXT;
      IF ErrorText <> 'RollBackTransaction' THEN BEGIN
        AddElementEx(XMLNode,'Error',STRSUBSTNO('ErrorText: %1',ErrorText));

        Context.GetErrorExtraInfo(ErrorExtraInfoArray);
        FOR I := 1 TO COMPRESSARRAY(ErrorExtraInfoArray) DO
          AddElementEx(XMLNode,'Error',STRSUBSTNO('Extra Info: %1',ErrorExtraInfoArray[I]));

        AddElementEx(XMLNode,'Error',STRSUBSTNO('Host Name (Service Tier): %1',ServerName));
        AddElementEx(XMLNode,'Error',STRSUBSTNO('Database Name: %1',DatabaseName));
        AddElementEx(XMLNode,'Error',STRSUBSTNO('Company Name: %1',COMPANYNAME));
      END;
      CLEARLASTERROR;
    END;

    PROCEDURE NewObjectOpenForm@11123330(VAR Object@11123302 : Record 2000000001) : Boolean;
    BEGIN
      IF PAGE.RUNMODAL(11123398,Object) = ACTION::LookupOK THEN
        EXIT(TRUE);
    END;

    PROCEDURE GetActiveTimeBias@11123331() ActiveTimeBias : Integer;
    VAR
      Registry@11123305 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.Microsoft.Win32.Registry";
      Variant@11123304 : Variant;
      ValueName@11123303 : Text;
      RegKey@11123302 : Text[250];
    BEGIN
      RegKey := 'HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TimeZoneInformation';
      ValueName := 'ActiveTimeBias';
      Variant := Registry.GetValue(RegKey,ValueName,0);

      ActiveTimeBias := 0;

      IF EVALUATE(ActiveTimeBias,FORMAT(Variant)) THEN BEGIN
        ActiveTimeBias := -ActiveTimeBias * 60000;
        EXIT(ActiveTimeBias);
      END;
    END;

    PROCEDURE AddBlobElement@11123337(VAR ParrentNode@11123305 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@11123304 : Text[1024];VAR TempBlob@11123303 : Record 99008535);
    VAR
      XMLNode@11123310 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      MemoryStream@11123309 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Bytes@11123308 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Convert@11123307 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      InStream@11123306 : InStream;
    BEGIN
      XMLNode := ParrentNode.OwnerDocument.CreateNode('element',NodeName,'');
      IF NOT TempBlob.Blob.HASVALUE THEN
        EXIT;

      TempBlob.Blob.CREATEINSTREAM(InStream);
      MemoryStream := MemoryStream.MemoryStream;
      COPYSTREAM(MemoryStream,InStream);
      Bytes := MemoryStream.GetBuffer;
      XMLNode.InnerText := Convert.ToBase64String(Bytes);

      ParrentNode.AppendChild(XMLNode);
    END;

    EVENT ResponseDocumentGlobal@11123308::NodeInserting@93(sender@11123303 : Variant;e@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT ResponseDocumentGlobal@11123308::NodeInserted@94(sender@11123303 : Variant;e@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT ResponseDocumentGlobal@11123308::NodeRemoving@95(sender@11123303 : Variant;e@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT ResponseDocumentGlobal@11123308::NodeRemoved@96(sender@11123303 : Variant;e@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT ResponseDocumentGlobal@11123308::NodeChanging@97(sender@11123303 : Variant;e@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT ResponseDocumentGlobal@11123308::NodeChanged@98(sender@11123303 : Variant;e@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT RequestDocumentGlobal@11123309::NodeInserting@93(sender@11123303 : Variant;e@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT RequestDocumentGlobal@11123309::NodeInserted@94(sender@11123303 : Variant;e@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT RequestDocumentGlobal@11123309::NodeRemoving@95(sender@11123303 : Variant;e@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT RequestDocumentGlobal@11123309::NodeRemoved@96(sender@11123303 : Variant;e@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT RequestDocumentGlobal@11123309::NodeChanging@97(sender@11123303 : Variant;e@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT RequestDocumentGlobal@11123309::NodeChanged@98(sender@11123303 : Variant;e@11123302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

