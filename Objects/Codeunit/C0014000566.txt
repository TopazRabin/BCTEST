OBJECT Codeunit 14000566 Crt. Tran. Ord. From Sug. Ord.
{
  OBJECT-PROPERTIES
  {
    Date=06/01/19;
    Time=12:00:00 PM;
    Version List=UBP3.01;
  }
  PROPERTIES
  {
    TableNo=14000565;
    OnRun=VAR
            SugOrderHeader@14000501 : Record 14000565;
            SugOrderLine@14000502 : Record 14000566;
            TransferHeader@1000000001 : Record 5740;
            TransferLine@1000000002 : Record 5741;
            SurplusInvValue@1240030000 : Record 14000584;
            TransferHeader2@1240020000 : Record 5740;
            LineNo@1000000003 : Integer;
            Window@14000506 : Dialog;
            Text000@14000507 : TextConst 'ENU=Creating Transfer Order\';
            Text001@14000508 : TextConst 'ENU=Vendor';
            Text002@14000509 : TextConst 'ENU=Creating Transfer Lines';
            WindowTotalCount@14000510 : Integer;
            WindowProcCount@14000511 : Integer;
          BEGIN
            GetSetup;
            InvMgtSetup.TESTFIELD("In-Transit Code");
            SugOrderHeader.COPY(Rec);


            IF InvMgtSetup."Variant Required Warning" THEN
              CreatPurchaseOrder.CheckVariantItems(SugOrderHeader);

            IF GUIALLOWED THEN BEGIN
              Window.OPEN(
                Text000 +
                PADSTR(Text001,30) + '#1##################\' +
                PADSTR(Text002,30) + '@2@@@@@@@@@@@@@@@@@@');
              Window.UPDATE(1,SugOrderHeader."Buy-from Vendor No.");
            END;

            DeleteExistingTransferOrders(SugOrderHeader, FALSE);

            SurplusInvValue.SETCURRENTKEY("Buy-from Vendor No.","Suggested Order No.","Transfer To Location Code","Location Code");
            SurplusInvValue.SETRANGE("Buy-from Vendor No.",SugOrderHeader."Buy-from Vendor No.");
            SurplusInvValue.SETRANGE("Suggested Order No.",SugOrderHeader."No.");
            SurplusInvValue.SETFILTER("Quantity To Transfer",'>%1',0);
            IF SurplusInvValue.FINDSET THEN BEGIN
              SugOrderHeader.GetPostingNo;
              SugOrderHeader.MODIFY(FALSE);
              IF GUIALLOWED THEN
              WindowTotalCount := SurplusInvValue.COUNT;
              REPEAT
                TransferHeader.INIT;
                TransferHeader.SETRANGE("Transfer-from Code",SurplusInvValue."Location Code");
                TransferHeader.SETRANGE("Transfer-to Code",SurplusInvValue."Transfer To Location Code");
                IF InvMgtSetup."Consolidate Transfer Orders" THEN BEGIN
                  TransferHeader.SETRANGE("Created from Suggested Order",TRUE);
                  IF InvMgtSetup."Enable AV Interface" THEN
                    TransferHeader.SETRANGE(Status,TransferHeader.Status::Released)
                  ELSE
                    TransferHeader.SETRANGE(Status,TransferHeader.Status::Open);
                END ELSE
                  TransferHeader.SETRANGE("Suggested Order No.",SugOrderHeader."Posting No.");
                IF NOT TransferHeader.FINDFIRST THEN BEGIN
                  TransferHeader."No." := '';
                  TransferHeader.INSERT(TRUE);
                  TransferHeader.VALIDATE("Transfer-from Code",SurplusInvValue."Location Code");
                  TransferHeader.VALIDATE("Transfer-to Code",SurplusInvValue."Transfer To Location Code");
                  TransferHeader.VALIDATE("In-Transit Code",InvMgtSetup."In-Transit Code");
                  TransferHeader."Created from Suggested Order" := TRUE;
                  TransferHeader."Creation Date" := WORKDATE;
                  TransferHeader."Created By" := USERID;
                  TransferHeader."Suggested Order No." := SugOrderHeader."Posting No.";
                  TransferHeader.MODIFY(TRUE);
                  OnAfterCreateTransferOrderHeader(SugOrderHeader, TransferHeader);
                END ELSE
                  IF InvMgtSetup."Enable AV Interface" THEN
                    ReleaseTransferDocument.Reopen(TransferHeader);
                TransferHeader2.GET(TransferHeader."No.");
                TransferHeader2.MARK(TRUE);
                TransferLine.SETRANGE("Document No.",TransferHeader."No.");
                IF TransferLine.FINDLAST THEN
                  LineNo := TransferLine."Line No." + 10000
                ELSE
                  LineNo := 10000;
                TransferLine."Document No." := TransferHeader."No.";
                TransferLine."Line No." := LineNo;
                TransferLine.VALIDATE("Item No.",SurplusInvValue."Item No.");
                SugOrderLine.GET(
                  SurplusInvValue."Buy-from Vendor No.",SurplusInvValue."Suggested Order No.",
                  SurplusInvValue."Suggested Order Line No.");

                IF SugOrderLine."Variant Code" <> '' THEN
                  TransferLine.VALIDATE("Variant Code",SugOrderLine."Variant Code");
                TransferLine.VALIDATE("Unit of Measure Code",SurplusInvValue."Unit of Measure Code");
                TransferLine.VALIDATE(Quantity,SurplusInvValue."Quantity To Transfer");
                TransferLine."Suggested Order No." := SurplusInvValue."Suggested Order No.";
                TransferLine."Suggested Order Line No." := SurplusInvValue."Suggested Order Line No.";
                TransferLine.INSERT(TRUE);
                OnAfterCreateTransferOrderLine(SugOrderHeader, SugOrderLine, TransferHeader, TransferLine);
                SurplusInvValue."Quantity Transferred" := SurplusInvValue."Quantity Transferred" + SurplusInvValue."Quantity To Transfer";
                SurplusInvValue."Quantity To Transfer" := 0;
                SurplusInvValue."Surplus Quantity" :=
                  SurplusInvValue."Surplus Quantity" - SurplusInvValue."Quantity Transferred";
                SurplusInvValue.MODIFY(FALSE);
                IF InvMgtSetup."Enable AV Interface" THEN
                  ReleaseTransferDocument.RUN(TransferHeader);
                IF GUIALLOWED THEN BEGIN
                WindowProcCount := WindowProcCount + 1;
                IF WindowProcCount MOD 10 = 0 THEN
                  Window.UPDATE(2,ROUND(10 * (WindowProcCount / WindowTotalCount),1));
                END;
              UNTIL SurplusInvValue.NEXT = 0;
              TransferHeader2.MARKEDONLY(TRUE);
              OnAfterCreateTransferOrder(SugOrderHeader, TransferHeader2);
            END;

            IF GUIALLOWED THEN
            Window.CLOSE;
          END;

  }
  CODE
  {
    VAR
      InvMgtSetup@1240020001 : Record 14000551;
      CreatPurchaseOrder@1240030000 : Codeunit 14000561;
      CalcSurplus@1240030001 : Codeunit 14000577;
      ReleaseTransferDocument@1240020000 : Codeunit 5708;
      SetupRetrieved@1240020002 : Boolean;

    LOCAL PROCEDURE GetSetup@1240020009();
    BEGIN
      IF NOT SetupRetrieved THEN BEGIN
        InvMgtSetup.GET;
        SetupRetrieved := TRUE;
      END;
    END;

    PROCEDURE DeleteExistingTransferOrders@1240020000(VAR CurrSugOrderHeader@1240020002 : Record 14000565;AskQuestion@1240020003 : Boolean);
    VAR
      SurplusInvValue@1240020000 : Record 14000584;
      TransferHeader@1240020001 : Record 5740;
      RemoveTransfers@1240020004 : Boolean;
      text003@1240020005 : TextConst 'ENU=Transfer Orders have already been created from this suggested order.  Do you wish to delete them?';
    BEGIN
      GetSetup;
      IF NOT InvMgtSetup."Consolidate Transfer Orders" THEN BEGIN
        SurplusInvValue.SETCURRENTKEY("Buy-from Vendor No.","Suggested Order No.","Transfer To Location Code","Location Code");
        SurplusInvValue.SETRANGE("Buy-from Vendor No.", CurrSugOrderHeader."Buy-from Vendor No.");
        SurplusInvValue.SETRANGE("Suggested Order No.", CurrSugOrderHeader."No.");
        SurplusInvValue.SETFILTER("Quantity Transferred",'<>%1',0);
        IF SurplusInvValue.FINDSET THEN BEGIN
          IF AskQuestion THEN
            RemoveTransfers := CONFIRM(text003,FALSE)
          ELSE
            RemoveTransfers := TRUE;
          IF RemoveTransfers THEN BEGIN
            TransferHeader.SETRANGE("Suggested Order No.",CurrSugOrderHeader."Posting No.");
            IF NOT TransferHeader.ISEMPTY THEN
              TransferHeader.DELETEALL(TRUE);
            REPEAT
              CalcSurplus.UpdateSurplusQty(SurplusInvValue."Transfer To Location Code", 1, CurrSugOrderHeader."No.",
              SurplusInvValue."Location Code",SurplusInvValue."Item No.",SurplusInvValue."Variant Code",
              0);
              SurplusInvValue."Surplus Quantity" := SurplusInvValue."Surplus Quantity" + SurplusInvValue."Quantity Transferred";
              SurplusInvValue."Quantity To Transfer" := 0;
              SurplusInvValue."Quantity Transferred" := 0;
              SurplusInvValue."Suggested Order No." := '';
              SurplusInvValue."Buy-from Vendor No." := '';
              SurplusInvValue."Suggested Order Line No." := 0;
              SurplusInvValue.MODIFY;
            UNTIL SurplusInvValue.NEXT = 0;
            TransferHeader.RESET;
          END ELSE
            EXIT;
        END;
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateTransferOrderHeader@1240020015(VAR CurrSugOrderHeader@1240020003 : Record 14000565;VAR CurrTransferOrderHeader@1240020002 : Record 5740);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateTransferOrderLine@1240020014(VAR CurrSugOrderHeader@1240020001 : Record 14000565;VAR CurrSugOrderLine@1240020002 : Record 14000566;VAR CurrTransferOrderHeader@1240020004 : Record 5740;VAR CurrTransferOrderLine@1240020000 : Record 5741);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateTransferOrder@1240020012(VAR CurrSugOrderHeader@1240020002 : Record 14000565;VAR CurrTransferOrderHeader@1240020000 : Record 5740);
    BEGIN
    END;

    BEGIN
    END.
  }
}

