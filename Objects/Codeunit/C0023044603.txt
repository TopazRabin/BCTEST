OBJECT Codeunit 23044603 DSHIP Package Customs Mgmt.
{
  OBJECT-PROPERTIES
  {
    Date=04/01/19;
    Time=11:15:00 AM;
    Version List=DSHIP2.2.3;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      cuCommonBase@1000000000 : Codeunit 23044519;
      tcNotInternationalPackage@1000000001 : TextConst 'ENU=Only international packages support to add customs information.;ESM=S¢lo internacionales paquetes admiten para agregar informaci¢n de aduana.;FRC=Packages international ne prend en charge pour ajouter des informations aupräs des administrations douaniäres.;ENC=Only international packages support to add customs information.';
      cuPackMgmt@100000000 : Codeunit 23044601;

    PROCEDURE showCustomsPage@1000000006(poptDocType@1000000001 : Option;pcodDocNo@1000000002 : Code[20]);
    VAR
      lrecCustomsHeader@1000000003 : Record 23044605;
    BEGIN
      //<FUNC>
      //  Description:
      //  Called From:
      //  Side Effect:
      //</FUNC>

      IF (lrecCustomsHeader.GET(generateCustoms(poptDocType, pcodDocNo))) THEN BEGIN
        PAGE.RUN(PAGE::"DSHIP Shipment Customs Card", lrecCustomsHeader);
      END ELSE BEGIN
        MESSAGE(tcNotInternationalPackage);
      END; //if
    END;

    PROCEDURE generateCustoms@1000000002(poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[20]) rcodCustomsNo : Code[50];
    BEGIN
      //<FUNC>
      //  Description: Generates customs header and lines if order is international
      //  Called From: This codeunit (CU23044603)
      //  Side Effect: None
      //</FUNC>

      IF (checkInternationalPackageByOrder(poptDocType, pcodDocNo)) THEN BEGIN
        rcodCustomsNo := recalcCustomsItems(poptDocType, pcodDocNo);
      END;
    END;

    LOCAL PROCEDURE recalcCustomsItems@1000000000(poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[20]) : Code[20];
    VAR
      lrecDShipSetup@1000000012 : Record 23044600;
      lrecCustomsHeader@1000000007 : Record 23044605;
      lrecCustomsLine@1000000004 : Record 23044606;
      lrecLPHeader@1000000006 : Record 23044505;
      lrecLPLine@1000000005 : Record 23044506;
      lrecItem@1000000002 : Record 27;
      lrecCompanyInfo@1000000008 : Record 79;
      lrecGenLedgSetup@1000000009 : Record 98;
      lcuRateMgmt@1000000011 : Codeunit 23044602;
      lbUnCertify@1000000003 : Boolean;
      ldLPQuantity@1000000010 : Decimal;
    BEGIN
      //<FUNC>
      //  Description:
      //  Called From:
      //  Side Effect:
      //</FUNC>

      lbUnCertify := FALSE;

      lrecCustomsHeader.SETRANGE("Document Type", poptDocType);
      lrecCustomsHeader.SETRANGE("Document No.", pcodDocNo);
      lrecCustomsHeader.SETRANGE("Posting Date", 0D);
      IF ( NOT lrecCustomsHeader.FINDFIRST ) THEN BEGIN
        lrecCustomsHeader.INIT;
        lrecCustomsHeader.VALIDATE("Document Type", poptDocType);
        lrecCustomsHeader.VALIDATE("Document No.", pcodDocNo);
        lrecCustomsHeader.INSERT(TRUE);
        lbUnCertify := TRUE;
      END;

      lrecDShipSetup.GET;
      IF ( lcuRateMgmt.callPreBuildCustomsExtension(lrecDShipSetup."Shipment Extension Codeunit", poptDocType, pcodDocNo) ) THEN
        EXIT(lrecCustomsHeader."No.");

      IF (poptDocType = lrecCustomsHeader."Document Type"::"Misc. Shipment") THEN BEGIN
           EXIT(recalcCustomsItemsMiscShip(poptDocType, pcodDocNo, lrecCustomsHeader."No."));
      END;
      lrecLPHeader.SETFILTER("No.", cuPackMgmt.CreateLPNoFilterWithDShipDocType(poptDocType, pcodDocNo));

      lrecCustomsLine.SETRANGE("Customs No.",lrecCustomsHeader."No.");
      lrecCustomsLine.MODIFYALL("Total Weight",0, FALSE);
      lrecCustomsLine.MODIFYALL("Total Value",0,FALSE);
      lrecCustomsLine.MODIFYALL(Quantity,0,FALSE);

      IF (NOT lbUnCertify) THEN BEGIN
        lrecLPHeader.SETFILTER("Customs No.",'%1','');
        lbUnCertify := lrecLPHeader.FINDFIRST;
        lrecLPHeader.SETRANGE("Customs No."); // clear this filter
      END;

      lrecLPHeader.MODIFYALL("Customs No.",''); // this will be reset below

      lrecCompanyInfo.GET;
      lrecGenLedgSetup.GET;

      IF (lrecLPHeader.FINDSET(TRUE)) THEN BEGIN
        REPEAT
          lrecLPLine.SETRANGE("License Plate No.",lrecLPHeader."No.");
          IF ( lrecLPLine.FINDSET(FALSE) ) THEN BEGIN
            REPEAT
              lrecItem.GET(lrecLPLine."Item No.");

              IF (NOT lrecCustomsLine.GET(lrecCustomsHeader."No.", lrecLPLine."Item No.", lrecLPLine."Variant Code")) THEN BEGIN
                lbUnCertify := TRUE;

                lrecCustomsLine.INIT;
                lrecCustomsLine."Customs No." := lrecCustomsHeader."No.";
                lrecCustomsLine.VALIDATE("Item No.", lrecLPLine."Item No.");
                lrecCustomsLine."Variant Code" := lrecLPLine."Variant Code";

                // fill in the customs item details as possible
                lrecCustomsLine."Weight Unit of Measure Code" := lrecLPHeader."Weight Unit of Measure";
                lrecCustomsLine."Qty. Unit of Measure Code" := lrecLPLine."Unit of Measure Code";
                lrecCustomsLine."Value Per Item Qty." := getCustomsLineValue(lrecItem, poptDocType, pcodDocNo);

                lrecCustomsLine."Currency Code" := lrecGenLedgSetup."LCY Code";
                lrecCustomsLine."Weight Per Item Qty." := lrecItem."Net Weight";

                lrecCustomsLine."Alternate Code" := '';
                lrecCustomsLine."HS Tariff No." := lrecItem."Tariff No.";

                lrecCustomsLine."Origin Country/Region Code" := lrecItem."Country/Region of Origin Code";
                IF ( lrecCustomsLine."Origin Country/Region Code" = '' ) THEN
                  lrecCustomsLine."Origin Country/Region Code" := lrecCompanyInfo."Country/Region Code";

                lrecCustomsLine.INSERT(TRUE);
              END;

              // reset these in case nav item changed after
              lrecCustomsLine."Calc. Value Per Item Qty." := getCustomsLineValue(lrecItem, poptDocType, pcodDocNo);
              lrecCustomsLine."Calc. Weight Per Item Qty." := lrecItem."Net Weight";

              ldLPQuantity := cuCommonBase.ConvertUnitOfMeasure(lrecItem, lrecLPLine.Quantity, lrecLPLine."Unit of Measure Code", lrecCustomsLine."Qty. Unit of Measure Code");
              lrecCustomsLine.Quantity := lrecCustomsLine.Quantity + ldLPQuantity;
              lrecCustomsLine."Total Value" := lrecCustomsLine."Total Value" + (ldLPQuantity * lrecCustomsLine."Calc. Value Per Item Qty.");
              lrecCustomsLine."Total Weight" := lrecCustomsLine."Total Weight" + (ldLPQuantity * lrecCustomsLine."Calc. Weight Per Item Qty.");
              lrecCustomsLine.MODIFY;
            UNTIL(lrecLPLine.NEXT() = 0);
          END;

          lrecLPHeader."Customs No." := lrecCustomsHeader."No.";
          lrecLPHeader.MODIFY(FALSE);
        UNTIL(lrecLPHeader.NEXT() = 0);
      END;

      // remove any orphaned records as a result of unpacking or something
      lrecCustomsLine.RESET;
      lrecCustomsLine.SETRANGE("Customs No.",lrecCustomsHeader."No.");
      lrecCustomsLine.SETRANGE(Quantity,0);
      lrecCustomsLine.DELETEALL;


      IF ( lbUnCertify ) THEN BEGIN
        lrecCustomsHeader.uncertify(FALSE);
      END;

      lcuRateMgmt.callPostBuildCustomsExtension(lrecDShipSetup."Shipment Extension Codeunit", poptDocType, pcodDocNo);

      EXIT(lrecCustomsHeader."No.");
    END;

    LOCAL PROCEDURE recalcCustomsItemsMiscShip@1000000007(poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[20];pcodCustomsHeader@1000000002 : Code[20]) : Code[20];
    VAR
      lrecLPHeader@1000000003 : Record 23044505;
      lrecCustomsLine@1000000004 : Record 23044606;
      lrecCompanyInfo@1000000007 : Record 79;
      lrecGenLedgSetup@1000000006 : Record 98;
      lrecCustomsHeader@1000000008 : Record 23044605;
      lbUnCertify@1000000005 : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Generates customs items lines
      //  Called From: This codeunit (CU23044603)
      //  Side Effect: None
      //</FUNC>

      lrecCompanyInfo.GET;
      lrecGenLedgSetup.GET;

      lrecLPHeader.SETFILTER("No.", cuPackMgmt.CreateLPNoFilterWithDShipDocType(poptDocType, pcodDocNo));

      IF ( lrecLPHeader.FINDSET(FALSE) ) THEN
        REPEAT
           IF ( NOT lrecCustomsLine.GET(pcodCustomsHeader, lrecLPHeader."No.") ) THEN BEGIN
             lbUnCertify := TRUE;

             lrecCustomsLine.INIT;
             lrecCustomsLine."Customs No." := pcodCustomsHeader;
             lrecCustomsLine."Item No." := lrecLPHeader."No.";

             lrecCustomsLine."Weight Unit of Measure Code" := lrecLPHeader."Weight Unit of Measure";
             lrecCustomsLine."Qty. Unit of Measure Code" := lrecLPHeader."Weight Unit of Measure";

             lrecCustomsLine."Currency Code" := lrecGenLedgSetup."LCY Code";

             lrecCustomsLine."Alternate Code" := '';
             lrecCustomsLine."Origin Country/Region Code" := lrecCompanyInfo."Country/Region Code";
             lrecCustomsLine.INSERT(TRUE);
           END;

          lrecCustomsLine.Quantity := 1;
          lrecCustomsLine.MODIFY(TRUE);

          lrecLPHeader."Customs No." := pcodCustomsHeader;
          lrecLPHeader.MODIFY;
        UNTIL(lrecLPHeader.NEXT=0);

      IF ( lbUnCertify ) THEN BEGIN
        lrecCustomsHeader.GET(pcodCustomsHeader);
        lrecCustomsHeader.uncertify(FALSE);
      END;

      EXIT(pcodCustomsHeader);
    END;

    PROCEDURE checkInternationalPackageByOrder@1000000003(poptDocType@1000000002 : Option;pcodDocNo@1000000001 : Code[20]) : Boolean;
    VAR
      lrecCustomsHeader@1000000003 : Record 23044605;
      lrecWhseShipHeader@1000000010 : Record 7320;
      lrecWhseShipLine@1000000009 : Record 7321;
      lrecSalesHeader@1000000007 : Record 36;
      lrecTransferHeader@1000000006 : Record 5740;
      lrecPurchaseHeader@1000000011 : Record 38;
      lrecMiscShipment@1000000012 : Record 23044621;
      lrecServiceHeader@1000000013 : Record 5900;
      lcuRateMgmt@1000000000 : Codeunit 23044602;
      lasFromAddress@1000000005 : ARRAY [12] OF Text[100];
      lasToAddress@1000000004 : ARRAY [12] OF Text[100];
      lbIsInternationalPackage@1000000008 : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Check the package is international package or not
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      lbIsInternationalPackage := FALSE;

      CASE poptDocType OF
        lrecCustomsHeader."Document Type"::"Warehouse Shipment":
          BEGIN
            lrecWhseShipHeader.GET(pcodDocNo);
            lcuRateMgmt.getShipFromAddress(lrecWhseShipHeader."Location Code", lasFromAddress);
            lcuRateMgmt.setShipToAddressForWhseShip(lrecWhseShipHeader, TRUE, lasToAddress);
          END;
        lrecCustomsHeader."Document Type"::"Sales Order":
          BEGIN
            lrecSalesHeader.GET(lrecSalesHeader."Document Type"::Order, pcodDocNo);
            lcuRateMgmt.getShipFromAddress(lrecSalesHeader."Location Code", lasFromAddress);
            lcuRateMgmt.setShipToAddressForSalesOrder(lrecSalesHeader, TRUE, lasToAddress);
          END;
        lrecCustomsHeader."Document Type"::"Outbound Transfer":
          BEGIN
            lrecTransferHeader.GET(pcodDocNo);
            lcuRateMgmt.getShipFromAddress(lrecTransferHeader."Transfer-from Code", lasFromAddress);
            lcuRateMgmt.getShipToAddressFromTransferHeader(lrecTransferHeader, TRUE, lasToAddress);
          END;
        lrecCustomsHeader."Document Type"::"Purchase Return Order":
          BEGIN
            lrecPurchaseHeader.GET(lrecPurchaseHeader."Document Type"::"Return Order", pcodDocNo);
            lcuRateMgmt.getShipFromAddress(lrecPurchaseHeader."Location Code", lasFromAddress);
            lcuRateMgmt.getShipToAddressFromPurchaseHeader(lrecPurchaseHeader, TRUE, lasToAddress);
          END;
        lrecCustomsHeader."Document Type"::"Misc. Shipment":
          BEGIN
            lrecMiscShipment.GET(pcodDocNo);
            lcuRateMgmt.getShipFromAddress(lrecMiscShipment."Location Code", lasFromAddress);
            lcuRateMgmt.getShipToAddressFromMiscShipment(lrecMiscShipment, TRUE, lasToAddress);
          END;
        lrecCustomsHeader."Document Type"::"Service Order":
          BEGIN
            lrecServiceHeader.GET(lrecServiceHeader."Document Type"::Order, pcodDocNo);
            lcuRateMgmt.getShipFromAddress(lrecServiceHeader."Location Code", lasFromAddress);
            lcuRateMgmt.getShipToAddressFromServiceHeader(lrecServiceHeader, TRUE, lasToAddress);
          END;
      END;

      EXIT(checkInternationalPackageByAddress(lasFromAddress, lasToAddress));
    END;

    LOCAL PROCEDURE getCustomsLineValue@1000000004(precItem@1000000013 : Record 27;poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[20]) rdLineValue : Decimal;
    VAR
      lrecDShipSetup@1000000002 : Record 23044600;
      lrecWhseShipLine@1000000003 : Record 7321;
      lrecSalesLine@1000000004 : Record 37;
      lrecTransferLine@1000000005 : Record 5741;
      lrecPurchaseLine@1000000006 : Record 39;
      lrecServiceLine@1000000007 : Record 5902;
      ltrecOrderBuffer@1000000008 : TEMPORARY Record 23044601;
      ladUnitValue@1000000014 : ARRAY [4] OF Decimal;
      liOrderPrice@1000000015 : Integer;
      liItemPrice@1000000016 : Integer;
      liOrderCost@1000000017 : Integer;
      liItemCost@1000000018 : Integer;
      liIndex@1000000009 : Integer;
      liCount@1000000012 : Integer;
    BEGIN
      //<FUNC>
      //  Description: Returns the item value based on config
      //  Called From: This codeunit (CU23044603)
      //  Side Effect: None.
      //</FUNC>

      // ladUnitValue indexes use option value as index (+1 because NAV indexing inconsistencies)
      liOrderPrice := 1 + lrecDShipSetup."Customs Line Value Source"::"Order Unit Price";
      liItemPrice := 1 + lrecDShipSetup."Customs Line Value Source"::"Item Unit Price";
      liOrderCost := 1 + lrecDShipSetup."Customs Line Value Source"::"Order Unit Cost";
      liItemCost := 1 + lrecDShipSetup."Customs Line Value Source"::"Item Unit Cost";

      // set values from Item Card
      ladUnitValue[liItemCost] := precItem."Unit Cost";
      ladUnitValue[liItemPrice] := precItem."Unit Price";

      // get source of whse ship line
      CASE poptDocType OF
        ltrecOrderBuffer."Document Type"::"Warehouse Shipment":
          BEGIN
            lrecWhseShipLine.SETRANGE("No.", pcodDocNo);
            lrecWhseShipLine.SETRANGE("Item No.", precItem."No.");
            IF ( lrecWhseShipLine.FINDFIRST() ) THEN BEGIN
              pcodDocNo := lrecWhseShipLine."Source No.";
              CASE lrecWhseShipLine."Source Document" OF
                lrecWhseShipLine."Source Document"::"Outbound Transfer":
                  poptDocType := ltrecOrderBuffer."Document Type"::"Outbound Transfer";
                lrecWhseShipLine."Source Document"::"Purchase Return Order":
                  poptDocType := ltrecOrderBuffer."Document Type"::"Purchase Return Order";
                lrecWhseShipLine."Source Document"::"Sales Order":
                  poptDocType := ltrecOrderBuffer."Document Type"::"Sales Order";
                lrecWhseShipLine."Source Document"::"Service Order":
                  poptDocType := ltrecOrderBuffer."Document Type"::"Service Order";
                lrecWhseShipLine."Source Document"::"Purchase Order":
                  poptDocType := ltrecOrderBuffer."Document Type"::"Purchase Order";
                lrecWhseShipLine."Source Document"::"Sales Return Order":
                  poptDocType := ltrecOrderBuffer."Document Type"::"Sales Return Order";
              END; //case
            END; //if
          END;
      END; //case

      // get line values
      CASE poptDocType OF
        ltrecOrderBuffer."Document Type"::"Purchase Return Order":
          BEGIN
            lrecPurchaseLine.SETRANGE("No.", precItem."No.");
            lrecPurchaseLine.SETRANGE("Document No.", pcodDocNo);
            lrecPurchaseLine.SETRANGE("Document Type", lrecPurchaseLine."Document Type"::"Return Order");
            IF ( lrecPurchaseLine.FINDFIRST() ) THEN BEGIN
              ladUnitValue[liOrderCost] := lrecPurchaseLine."Unit Cost";
              ladUnitValue[liOrderPrice] := lrecPurchaseLine."Unit Price (LCY)";
            END;
          END;
        ltrecOrderBuffer."Document Type"::"Sales Order":
          BEGIN
            lrecSalesLine.SETRANGE("No.", precItem."No.");
            lrecSalesLine.SETRANGE("Document No.", pcodDocNo);
            lrecSalesLine.SETRANGE("Document Type", lrecSalesLine."Document Type"::Order);
            IF ( lrecSalesLine.FINDFIRST() ) THEN BEGIN
              ladUnitValue[liOrderCost] := lrecSalesLine."Unit Cost";
              ladUnitValue[liOrderPrice] := lrecSalesLine."Unit Price";
            END;
          END;
        ltrecOrderBuffer."Document Type"::"Service Order":
          BEGIN
            lrecServiceLine.SETRANGE("No.", precItem."No.");
            lrecServiceLine.SETRANGE("Document No.", pcodDocNo);
            lrecServiceLine.SETRANGE("Document Type", lrecServiceLine."Document Type"::Order);
            IF ( lrecServiceLine.FINDFIRST() ) THEN BEGIN
              ladUnitValue[liOrderCost] := lrecServiceLine."Unit Cost";
              ladUnitValue[liOrderPrice] := lrecServiceLine."Unit Price";
            END;
          END;
        ltrecOrderBuffer."Document Type"::"Outbound Transfer": ; // no unit values on transfers
        // unsupported docs
        ltrecOrderBuffer."Document Type"::"Purchase Order": ;
        ltrecOrderBuffer."Document Type"::"Sales Return Order": ;
      END;

      // assign return value based on configuration
      lrecDShipSetup.GET;
      CASE lrecDShipSetup."Customs Line Value Source" OF
        lrecDShipSetup."Customs Line Value Source"::"Order Unit Price":
          rdLineValue := ladUnitValue[liOrderPrice];
        lrecDShipSetup."Customs Line Value Source"::"Item Unit Price":
          rdLineValue := ladUnitValue[liItemPrice];
        lrecDShipSetup."Customs Line Value Source"::"Order Unit Cost":
          rdLineValue := ladUnitValue[liOrderCost];
        lrecDShipSetup."Customs Line Value Source"::"Item Unit Cost":
          rdLineValue := ladUnitValue[liItemCost];
      END; // case

      // if selected value is zero, use option (array) order to try and retrieve valid value
      // covers cases where order value is chosen, but line doesn't hold value (transfers)
      IF ( rdLineValue <= 0 ) THEN BEGIN
        liCount := ARRAYLEN(ladUnitValue);
        REPEAT
          liIndex += 1;
          rdLineValue := ladUnitValue[liIndex];
        UNTIL((liIndex = liCount) OR (rdLineValue > 0));
      END;
    END;

    PROCEDURE checkInternationalPackageByAddress@1000000005(pasFromAddress@1000000001 : ARRAY [12] OF Text[100];pasToAddress@1000000000 : ARRAY [12] OF Text[100]) rbIsInternational : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Compares specific parts of address array for international values
      //  Called From: This codeunit (CU23044603)
      //               DSHIP EasyPost Rate Mgmt (CU23044609)
      //  Side Effect:
      //</FUNC>

      IF ((pasFromAddress[6] <> pasToAddress[6]) OR
          ((pasToAddress[5] IN ['AA', 'AE', 'AP', 'PR']) AND (pasToAddress[6] IN ['US','USA'])))
      THEN BEGIN
        rbIsInternational := TRUE;
      END;

      EXIT(rbIsInternational);
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
    }
    END.
  }
}

