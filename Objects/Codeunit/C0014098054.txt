OBJECT Codeunit 14098054 DP Setup Runner
{
  OBJECT-PROPERTIES
  {
    Date=03/27/19;
    Time=12:00:00 PM;
    Version List=UBP3.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            Code('');
          END;

  }
  CODE
  {
    VAR
      Txt001@1000 : TextConst 'ENU=Package was not imported';
      Txt002@1001 : TextConst 'ENU=Excel data was not imported';
      DialogWindow@1240020000 : Dialog;

    PROCEDURE RunProcessBlobText@8(ProcessIDFilter@1000 : BigText);
    VAR
      SetupMgt@1004 : Codeunit 14098053;
      SetupProcessEntry@1001 : Record 14097491;
      ParamStr@1002 : ARRAY [3] OF Text;
      ModifyRec@1005 : Boolean;
      OStream@1240020000 : OutStream;
      InputText@1240020001 : Text;
    BEGIN
      // auto insert the process steps if clean db
      IF SetupProcessEntry.ISEMPTY THEN BEGIN
        SetupMgt.ConfigureProcessEntries;
        COMMIT;
      END;

      ModifyRec := FALSE;
      CLEAR(ParamStr);

      ProcessIDFilter.GETSUBTEXT(InputText, 1);
      ParamStr[1] := ParseString(InputText,';');
      ParamStr[2] := ParseString(InputText,';');
      ParamStr[3] := ParseString(InputText,';');

      SetupProcessEntry.SETFILTER("Process No.", ParamStr[1]);
      IF SetupProcessEntry.FIND('-') THEN BEGIN
        REPEAT
          // reset process
          IF SetupProcessEntry.Completed THEN BEGIN
            SetupProcessEntry.Completed := FALSE;
            ModifyRec := TRUE;
          END;

          // due to issue with Hid dialog in NAV must pass in a manual parameter for use in the deletion of config package records
          IF ParamStr[2] <> '' THEN BEGIN
            SetupProcessEntry."Manual Parameter" := ParamStr[2];
            ModifyRec := TRUE;
          END;

          IF ParamStr[3] <> '' THEN BEGIN
            SetupProcessEntry."Automated Parameter XML".CREATEOUTSTREAM(OStream);
            OStream.WRITETEXT(ParamStr[3]);
            ModifyRec := TRUE;
          END;

          IF ModifyRec THEN
            SetupProcessEntry.MODIFY(FALSE);
        UNTIL SetupProcessEntry.NEXT = 0;
      END;
      Code(ParamStr[1]);
    END;

    LOCAL PROCEDURE ParseString@7(VAR Text@1008 : Text;Separator@1240020000 : Text[1]) Token : Text;
    VAR
      Pos@1240020001 : Integer;
    BEGIN
      Pos := STRPOS(Text,Separator);
      IF Pos > 0 THEN BEGIN
        Token := COPYSTR(Text,1,Pos-1);
        IF Pos+1 <= STRLEN(Text) THEN
          Text := COPYSTR(Text,Pos+1)
        ELSE
          Text := '';
      END ELSE BEGIN
        Token := Text;
        Text := '';
      END;
    END;

    LOCAL PROCEDURE Code@1(ProcessIDFilter@1001 : Text[1024]);
    VAR
      VersionInt@1000 : Integer;
    BEGIN
      VersionInt := GetVersion;
      CASE VersionInt OF
        5:
          RunVersion5;
        6:
          RunVersion2009;
        7,8,9:
        BEGIN
          RunVersion2013(ProcessIDFilter);
        END ELSE
          MESSAGE('Not Supported');
      END;
    END;

    PROCEDURE GetVersion@4() : Integer;
    VAR
      AppMgt@1000 : Codeunit 1;
      Pos@1001 : Integer;
      VersionText@1002 : Text[250];
      VersionInt@1003 : Integer;
    BEGIN
      VersionText := AppMgt.ApplicationVersion;
      Pos := STRPOS(VersionText, '.');
      Pos := Pos - 1;
      VersionText := FORMAT(VersionText[Pos]);
      IF NOT EVALUATE(VersionInt, VersionText) THEN
        VersionInt := 0;
      EXIT(VersionInt);
    END;

    PROCEDURE RunVersion5@5();
    VAR
      AFPSetupMgt@1000 : Codeunit 14098053;
      AFPSetupProcessEntry@1001 : Record 14097491;
    BEGIN
      MESSAGE('Not Yet');
    END;

    PROCEDURE RunVersion2009@3();
    VAR
      AFPSetupMgt@1000 : Codeunit 14098053;
      AFPSetupProcessEntry@1001 : Record 14097491;
    BEGIN
      MESSAGE('Not Yet');
    END;

    PROCEDURE RunVersion2013@2(ProcessIDFilter@1002 : Text[1024]);
    VAR
      SetupMgt@1000 : Codeunit 14098053;
      SetupProcessEntry@1001 : Record 14097491;
    BEGIN
      // configure all processes if none exist
      SetupMgt.ConfigureProcessEntries;
      COMMIT;

      // processes to run
      SetupProcessEntry.SETFILTER("Process No.", ProcessIDFilter);
      IF SetupProcessEntry.FIND('-') THEN BEGIN
        REPEAT
          CLEARLASTERROR;
          CLEAR(SetupMgt);
          IF NOT SetupMgt.RUN(SetupProcessEntry) THEN BEGIN
            SetupProcessEntry."Error Text" := COPYSTR(GETLASTERRORTEXT, 1, 250);
            SetupProcessEntry.Error := TRUE;
            SetupProcessEntry.MODIFY(FALSE);
          END ELSE BEGIN
            SetupProcessEntry."Error Text" := '';
            SetupProcessEntry.Error := FALSE;
            SetupProcessEntry.VALIDATE(Completed, TRUE);
            SetupProcessEntry.MODIFY(FALSE);
          END;
          COMMIT;
        UNTIL SetupProcessEntry.NEXT = 0;
      END;
    END;

    PROCEDURE Process@6(VAR CurrSetupProcessEntry@1000 : Record 14097491);
    VAR
      SetupMgt@1240020000 : Codeunit 14098053;
    BEGIN
      // process from pages
      CLEAR(SetupMgt);
      IF CurrSetupProcessEntry.FINDSET THEN BEGIN
        REPEAT
          CLEARLASTERROR;
          IF NOT SetupMgt.RUN(CurrSetupProcessEntry) THEN BEGIN
            CurrSetupProcessEntry."Error Text" := COPYSTR(GETLASTERRORTEXT, 1, 250);
            CurrSetupProcessEntry.Error := TRUE;
            CurrSetupProcessEntry.MODIFY(FALSE);
          END ELSE BEGIN
            CurrSetupProcessEntry."Error Text" := '';
            CurrSetupProcessEntry.Error := FALSE;
            CurrSetupProcessEntry.VALIDATE(Completed, TRUE);
            CurrSetupProcessEntry.MODIFY(FALSE);
          END;
          COMMIT;
        UNTIL CurrSetupProcessEntry.NEXT = 0;
      END;
    END;

    PROCEDURE ProcessAll@1240020000();
    VAR
      SetupProcessEntry@1240020001 : Record 14097491;
      ProcessCount@1240020000 : Integer;
      TotalProcessCount@1240020002 : Integer;
    BEGIN
      SetupProcessEntry.SETRANGE(Completed, FALSE);
      IF SetupProcessEntry.FINDSET THEN BEGIN
        OpenWindow;
        ProcessCount := 1;
        TotalProcessCount := SetupProcessEntry.COUNT;
        REPEAT
          ProcessCount := ProcessCount + 1;
          UpdateWindow(SetupProcessEntry."Action Description", ProcessCount, TotalProcessCount);
          Process(SetupProcessEntry);
        UNTIL SetupProcessEntry.NEXT = 0;
        CloseWindow;
      END;
    END;

    PROCEDURE CreateProcesses@1240020001();
    VAR
      SetupMgt@1240020000 : Codeunit 14098053;
      SetupProcessEntry@1000 : Record 14097491;
    BEGIN
      CLEARLASTERROR;
      SetupProcessEntry.INIT;
      SetupProcessEntry."Process No." := 0;
      IF NOT SetupMgt.RUN(SetupProcessEntry) THEN BEGIN
        ERROR(COPYSTR(GETLASTERRORTEXT, 1, 250));
      END;
    END;

    LOCAL PROCEDURE OpenWindow@1240020003();
    BEGIN
      IF GUIALLOWED THEN BEGIN
        DialogWindow.OPEN('#1#########################################################\' +
                          '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

        //  PADSTR(Text002,30) + '#3########\' +
      END;
    END;

    LOCAL PROCEDURE UpdateWindow@1240020002(StepText@1000 : Text;Progress@1001 : Integer;TotalProgress@1240020000 : Integer);
    BEGIN
      IF GUIALLOWED THEN BEGIN
        DialogWindow.UPDATE(1,StepText);
        DialogWindow.UPDATE(2,ROUND(100 * (Progress/TotalProgress),1));
      END;
    END;

    LOCAL PROCEDURE CloseWindow@1240020004();
    BEGIN
      IF GUIALLOWED THEN BEGIN
        DialogWindow.CLOSE;
      END;
    END;

    BEGIN
    {
      Create codeunit to process all AFP setup after importing objects into the database.
      Call with different job types to initiate the process.
    }
    END.
  }
}

