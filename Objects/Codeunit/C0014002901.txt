OBJECT Codeunit 14002901 RF Pallet Pick Processing
{
  OBJECT-PROPERTIES
  {
    Date=04/13/18;
    Time=12:00:00 PM;
    Version List=RF1.50.12;
  }
  PROPERTIES
  {
    TableNo=7700;
    OnRun=VAR
            MiniformMgmt@1240020000 : Codeunit 7702;
          BEGIN
            MiniformMgmt.Initialize(
              MiniformHeader,Rec,DOMxmlin,ReturnedNode,
              RootNode,XMLDOMMgmt,ADCSCommunication,
              LoginID,CurrentCode,StackCode,WhseEmpId,LocationFilter);

            IF Code <> CurrentCode THEN
              PrepareData
            ELSE
              ProcessInput;

            CLEAR(DOMxmlin);
          END;

  }
  CODE
  {
    VAR
      MiniformHeader@1240020026 : Record 7700;
      ItemTrackingCode@1240020025 : Record 6502;
      RFEmployeeSetup@1240020024 : Record 14002802;
      Location@1240020023 : Record 14;
      WarehouseSetup@1240020022 : Record 5769;
      RFSetup@1240020021 : Record 14002801;
      WarehouseEntry@1240020020 : Record 7312;
      XMLDOMMgmt@1240020019 : Codeunit 6224;
      ADCSCommunication@1240020018 : Codeunit 7701;
      ADCSNasStartup@1240020017 : Codeunit 7700;
      ItemTrackingMgt@1240020016 : Codeunit 6500;
      DOMxmlin@1240020014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ReturnedNode@1240020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      RootNode@1240020012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Remark@1240020011 : Text[250];
      LoginID@1240020015 : Text[250];
      WhseEmpId@1240020027 : Text[250];
      LocationFilter@1240020010 : Text[250];
      CurrentCode@1240020009 : Text[250];
      StackCode@1240020008 : Text[250];
      AlternativeText@1240020007 : Text[30];
      ActiveInputField@1240020006 : Integer;
      RecRef@1240020005 : RecordRef;
      LocationRetrieved@1240020004 : Boolean;
      ToteNo@1240020003 : Code[20];
      ItemTrackingCodeRetrieved@1240020002 : Boolean;
      SinglePlaceMovement@1240020001 : Boolean;
      RFSetupRetrieved@1240020000 : Boolean;
      Text000@1240020054 : TextConst 'ENU=Function not Found';
      Text001@1240020053 : TextConst 'ENU=No Quantity in Line';
      Text002@1240020052 : TextConst 'ENU=Fully Handled, Use Cursor Down';
      Text004@1240020050 : TextConst 'ENU=Invalid %1';
      Text005@1240020049 : TextConst 'ENU=Unknown function %1';
      Text006@1240020048 : TextConst 'ENU=No input Node found';
      Text007@1240020047 : TextConst 'ENU=Record not found';
      Text008@1240020046 : TextConst 'ENU=End of Document';
      Text009@1240020045 : TextConst 'ENU=Qty. does not match';
      Text011@1240020043 : TextConst 'ENU=Invalid Quantity';
      Text012@1240020042 : TextConst 'ENU=No Lines available';
      Text013@1240020041 : TextConst 'ENU=BREAKBULK';
      Text014@1240020040 : TextConst 'ENU=Bin %1 not found.';
      Text016@1240020038 : TextConst 'ENU=Lot Numbered lines cannot be split';
      Text017@1240020037 : TextConst 'ENU=Breakbulk Bin';
      Text018@1240020036 : TextConst 'ENU=Line Found';
      Text019@1240020035 : TextConst 'ENU=%1 not in Bin';
      Text020@1240020034 : TextConst 'ENU=%1 not on inventory';
      Text021@1240020033 : TextConst 'ENU=Line must be split';
      Text022@1240020032 : TextConst 'ENU=Matching line for Break-Bulk not found.';
      Text023@1240020031 : TextConst 'ENU=Multiple Lot No. cannot exist for break bulk.';
      Text024@1240020030 : TextConst 'ENU=Lot is blocked';
      Text025@1240020029 : TextConst 'ENU=Serial No is blocked';
      Text026@1240020028 : TextConst 'ENU=%1 expired';
      Text028@1240020055 : TextConst 'ENU=Empty Pallet';
      Text029@1240020056 : TextConst 'ENU=Pallet is not consistent';
      Text030@1240020057 : TextConst 'ENU=Wrong Pallet';
      Text031@1240020058 : TextConst 'ENU=Pallet picked: %1';
      Text046@1240020059 : TextConst 'ENU=QA Blocked Operation';

    LOCAL PROCEDURE ProcessInput@10();
    VAR
      WhseActivityLine@1000 : Record 5767;
      FuncGroup@1001 : Record 7702;
      MiniformLine@1003 : Record 7701;
      WhseActivityHeader@1004 : Record 5766;
      WarehouseActivityLine2@1006 : Record 5767;
      ToteLine@1007 : Record 14002901;
      RFEmployeeMenuFilter@1240030000 : Record 14002806;
      ItemIdent@1240030002 : Record 7704;
      RFMgt@1240030001 : Codeunit 14002801;
      ReturnedNode2@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TableNo@1009 : Integer;
      RecordId@1010 : RecordID;
      FldNo@1011 : Integer;
      TextValue@1012 : Text[250];
      FieldID@1013 : Text[250];
      Command@1240030003 : Code[10];
      StayInField@1240030004 : Boolean;
      LotNo@1240040000 : Code[20];
      SerialNo@1240040001 : Code[20];
    BEGIN
      IF XMLDOMMgmt.FindNode(RootNode,'Header/Input',ReturnedNode) THEN
        TextValue := ReturnedNode.InnerText
      ELSE
        ERROR(Text006);

      XMLDOMMgmt.FindNode(RootNode,'ExtraInfo',ReturnedNode2);
      EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'));
      RecRef.OPEN(TableNo);
      EVALUATE(RecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'));
      IF RecRef.GET(RecordId) THEN BEGIN
        RecRef.SETTABLE(WhseActivityLine);
        RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);

        SinglePlaceMovement :=
          CalculateSinglePlaceMovement(WhseActivityLine."Activity Type",WhseActivityLine."No.");
        FilterWhseActivityLine(WhseActivityLine,WhseActivityLine."Activity Type");
        WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type");
        WhseActivityLine.SETRANGE("No.",WhseActivityLine."No.");

        ADCSCommunication.SetRFGroupFilter(GetRFGroupFilter(WhseActivityLine));

        RecRef.GETTABLE(WhseActivityLine);
        ADCSCommunication.SetRecRef(RecRef);
      END ELSE BEGIN
        ADCSCommunication.RunPreviousMiniform(DOMxmlin);
        EXIT;
      END;

      FuncGroup.KeyDef := ADCSCommunication.GetFunctionKey(MiniformHeader.Code,TextValue);
      ActiveInputField := 1;
      StayInField := FALSE;

      CASE FuncGroup.KeyDef OF
        FuncGroup.KeyDef::Esc:
          BEGIN
            XMLDOMMgmt.FindNode(RootNode,'ExtraInfo',ReturnedNode2);
            IF ADCSCommunication.GetNodeAttribute(ReturnedNode2,'PrimaryMiniForm') <> '' THEN BEGIN
              MiniformHeader.Code :=
                ADCSCommunication.GetNodeAttribute(ReturnedNode2,'PrimaryMiniForm');
              MiniformHeader.GET(MiniformHeader.Code);
            END ELSE
              ADCSCommunication.RunPreviousMiniform(DOMxmlin);
          END;
        FuncGroup.KeyDef::First:
          ADCSCommunication.FindRecRef(0,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::LnDn:
          IF NOT ADCSCommunication.FindRecRef(1,MiniformHeader."No. of Records in List") THEN
            Remark := Text008;
        FuncGroup.KeyDef::LnUp:
          ADCSCommunication.FindRecRef(2,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::Last:
          ADCSCommunication.FindRecRef(3,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::PgDn:
          IF NOT ADCSCommunication.FindRecRef(4,MiniformHeader."No. of Records in List") THEN
            Remark := Text008;
        FuncGroup.KeyDef::PgUp:
          ADCSCommunication.FindRecRef(5,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::Reset:
          BEGIN
            RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
            IF RFEmployeeSetup."Local Menu Button" IN
               [RFEmployeeSetup."Local Menu Button"::F4,
                RFEmployeeSetup."Local Menu Button"::"F4 (F3 Post)"]
            THEN BEGIN
              ADCSCommunication.SetRFGroupFilter(GetMenuRFGroupFilter(WhseActivityLine));
              MiniformHeader.TESTFIELD("Local Menu Miniform Code");
              ADCSCommunication.SetExtraValue('PrimaryMiniForm',MiniformHeader.Code);
              MiniformHeader.GET(MiniformHeader."Local Menu Miniform Code");
              IF RFEmployeeMenuFilter.GET(
                   RFEmployeeSetup.Code,MiniformHeader.Code)
              THEN
                ADCSCommunication.SetRFFunctionFilter(
                  RFEmployeeMenuFilter."RF Function Filter");
              ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,1,'',LoginID);
              ADCSCommunication.GetReturnXML(DOMxmlin);
              ADCSNasStartup.SendXMLReply(DOMxmlin);

              EXIT;
            END;
          END;
        FuncGroup.KeyDef::Register:
          BEGIN
            RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
            CASE RFEmployeeSetup."Local Menu Button" OF
              RFEmployeeSetup."Local Menu Button"::F3:
                BEGIN
                  ADCSCommunication.SetRFGroupFilter(GetMenuRFGroupFilter(WhseActivityLine));
                  MiniformHeader.TESTFIELD("Local Menu Miniform Code");
                  ADCSCommunication.SetExtraValue('ToteNo',ToteNo);
                  ADCSCommunication.SetExtraValue('PrimaryMiniForm',MiniformHeader.Code);
                  MiniformHeader.GET(MiniformHeader."Local Menu Miniform Code");
                  IF RFEmployeeMenuFilter.GET(
                       RFEmployeeSetup.Code,MiniformHeader.Code)
                  THEN
                    ADCSCommunication.SetRFFunctionFilter(
                      RFEmployeeMenuFilter."RF Function Filter");
                  ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,1,'',LoginID);
                  ADCSCommunication.GetReturnXML(DOMxmlin);
                  ADCSNasStartup.SendXMLReply(DOMxmlin);

                  EXIT;
                END;
              RFEmployeeSetup."Local Menu Button"::"F4 (F3 Post)":
                BEGIN
                  IF WhseActivityLine."Activity Type" IN
                     [WhseActivityLine."Activity Type"::"Invt. Pick",
                      WhseActivityLine."Activity Type"::"Invt. Put-away"]
                  THEN
                    RegisterInvtPick(WhseActivityLine)
                  ELSE
                    Register(WhseActivityLine);

                  IF Remark = '' THEN
                    ADCSCommunication.RunPreviousMiniform(DOMxmlin)
                  ELSE
                    SendForm(ActiveInputField);
                END;
            END;
          END;
        FuncGroup.KeyDef::Input:
          BEGIN
            FieldID := ADCSCommunication.GetNodeAttribute(ReturnedNode,'FieldID');
            Command := '';
            IF STRLEN(TextValue) >= 3 THEN
              IF COPYSTR(TextValue,1,2) = '//' THEN
                Command := COPYSTR(TextValue,3,MAXSTRLEN(Command));
            IF (FieldID = '') OR (Command <> '') THEN BEGIN
              RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);

              IF Command <> '' THEN BEGIN
                MiniformLine.RESET;
                MiniformLine.SETRANGE("Miniform Code",MiniformHeader."Local Menu Miniform Code");
                MiniformLine.SETRANGE(Hide,FALSE);
                MiniformLine.SETFILTER("RF Group No.",GetMenuRFGroupFilter(WhseActivityLine));
                IF RFEmployeeMenuFilter.GET(
                     RFEmployeeSetup.Code,MiniformHeader."Local Menu Miniform Code")
                THEN
                  MiniformLine.SETFILTER("RF Function No.",RFEmployeeMenuFilter."RF Function Filter");
                MiniformLine.SETRANGE(MiniformLine."Command Text",Command);
                MiniformLine.FIND('-');
              END ELSE BEGIN
                MiniformLine.RESET;
                MiniformLine.SETRANGE("Miniform Code",MiniformHeader.Code);
                MiniformLine.SETRANGE(Hide,FALSE);
                MiniformLine.SETFILTER("RF Group No.",GetMenuRFGroupFilter(WhseActivityLine));
                IF RFEmployeeMenuFilter.GET(RFEmployeeSetup.Code,MiniformHeader.Code) THEN
                  MiniformLine.SETFILTER("RF Function No.",RFEmployeeMenuFilter."RF Function Filter");
                MiniformLine.SETRANGE(Text,ReturnedNode.InnerText);
                MiniformLine.FIND('-');
                XMLDOMMgmt.FindNode(RootNode,'ExtraInfo',ReturnedNode2);
                MiniformHeader.Code :=
                  ADCSCommunication.GetNodeAttribute(ReturnedNode2,'PrimaryMiniForm');
                MiniformHeader.GET(MiniformHeader.Code);
              END;
              CASE MiniformLine."RF Function No." OF
                0: // Escape or Return
                  ;
                1: // Register Document
                  BEGIN
                    IF WhseActivityLine."Activity Type" IN
                       [WhseActivityLine."Activity Type"::"Invt. Pick",
                        WhseActivityLine."Activity Type"::"Invt. Put-away"]
                    THEN
                      RegisterInvtPick(WhseActivityLine)
                    ELSE
                      Register(WhseActivityLine);

                    IF Remark = '' THEN BEGIN
                      ADCSCommunication.RunPreviousMiniform(DOMxmlin);
                      EXIT;
                    END;
                  END;
                2: // Reset Line
                  Reset(WhseActivityLine);
                4: // Clear User
                  BEGIN
                    WhseActivityHeader.GET(WhseActivityLine."Activity Type",WhseActivityLine."No.");
                    WhseActivityHeader.VALIDATE("Assigned User ID",'');
                    WhseActivityHeader.MODIFY(TRUE);

                    ADCSCommunication.RunPreviousMiniform(DOMxmlin);
                    EXIT;
                  END;
                6: // Delete Document
                  BEGIN
                    WhseActivityHeader.GET(WhseActivityLine."Activity Type",WhseActivityLine."No.");
                    WhseActivityHeader.DELETE(TRUE);
                    ToteLine.RESET;
                    ToteLine.SETRANGE("Activity Type",ToteLine."Activity Type"::Pick);
                    ToteLine.SETRANGE("No.",WhseActivityLine."No.");
                    ToteLine.DELETEALL;

                    ADCSCommunication.RunPreviousMiniform(DOMxmlin);
                    EXIT;
                  END;
                7: // Create Physical Inventory
                  BEGIN
                    Remark := CreatePhysicalInventory(WhseActivityLine);
                  END;
                ELSE
                  Remark := STRSUBSTNO(Text005,MiniformLine."RF Function No.");
              END;
            END ELSE BEGIN
              EVALUATE(FldNo,FieldID);
              CASE FldNo OF
                WhseActivityLine.FIELDNO("Bin Code"):
                  IF NOT CheckBinNo(WhseActivityLine,UPPERCASE(TextValue)) THEN
                    IF RFEmployeeSetup."Search Item in Bin Code" THEN
                      IF RFMgt.GetItem(
                           TextValue,RFEmployeeSetup,ItemIdent."Item No.",ItemIdent."Variant Code",
                           ItemIdent."Unit of Measure Code",LotNo,SerialNo)
                      THEN BEGIN
                        WarehouseActivityLine2.RESET;
                        WarehouseActivityLine2.COPYFILTERS(WhseActivityLine);
                        WarehouseActivityLine2.SETRANGE("Item No.",ItemIdent."Item No.");
                        IF ItemIdent."Variant Code" <> '' THEN
                          WarehouseActivityLine2.SETRANGE("Variant Code",ItemIdent."Variant Code");
                        IF (ItemIdent."Unit of Measure Code" <> '') AND
                           NOT RFEmployeeSetup."No Unit of Measure Check"
                        THEN
                          WarehouseActivityLine2.SETRANGE(
                            "Unit of Measure Code",ItemIdent."Unit of Measure Code");
                        IF WarehouseActivityLine2.FIND('-') THEN BEGIN
                          WhseActivityLine := WarehouseActivityLine2;
                          Remark := Text018;
                        END;
                      END;
                WhseActivityLine.FIELDNO("Item No."):
                  CheckItemNo(WhseActivityLine,UPPERCASE(TextValue));
                WhseActivityLine.FIELDNO("Variant Code"):
                  CheckVariant(WhseActivityLine,UPPERCASE(TextValue));
                WhseActivityLine.FIELDNO("Unit of Measure Code"):
                  CheckUnitOfMeasure(WhseActivityLine,UPPERCASE(TextValue));
                WhseActivityLine.FIELDNO("Qty. to Handle"):
                  CheckQty(WhseActivityLine,TextValue,StayInField);
                WhseActivityLine.FIELDNO("Serial No."):
                  CheckSerialNo(WhseActivityLine,TextValue);
                WhseActivityLine.FIELDNO("Lot No."):
                  CheckLotNo(WhseActivityLine,TextValue);
                WhseActivityLine.FIELDNO("Tote No."):
                  CheckToteNo(WhseActivityLine,TextValue);
                ELSE BEGIN
                  ADCSCommunication.FieldSetvalue(RecRef,FldNo,TextValue);
                  RecRef.SETTABLE(WhseActivityLine);
                END;
              END;

              IF WhseActivityLine."First Scan Date" = 0D THEN BEGIN
                WhseActivityLine."First Scan Date" := TODAY;
                WhseActivityLine."First Scan Time" := TIME;
                WhseActivityLine."Warehouse Employee Code" := WhseEmpId;
              END;

              IF Remark = '' THEN BEGIN
                WhseActivityLine."Last Scan Date" := TODAY;
                WhseActivityLine."Last Scan Time" := TIME;
                WhseActivityLine."Warehouse Employee Code" := WhseEmpId;
              END;

              WhseActivityLine.MODIFY;
              RecRef.GETTABLE(WhseActivityLine);
              ADCSCommunication.SetRecRef(RecRef);
              ActiveInputField := ADCSCommunication.GetActiveInputNo(CurrentCode,FldNo);
              IF Remark = '' THEN
                IF ADCSCommunication.LastEntryField(CurrentCode,FldNo) THEN BEGIN
                  IF NOT RFEmployeeSetup."Stay on Line if not Complete" OR
                     (WhseActivityLine."Qty. to Handle" = WhseActivityLine."Qty. Outstanding")
                  THEN BEGIN
                    RecRef.GETTABLE(WhseActivityLine);
                    IF NOT ADCSCommunication.FindRecRef(1,ActiveInputField) AND
                       (WhseActivityLine."Qty. to Handle" = WhseActivityLine."Qty. Outstanding")
                    THEN
                      Remark := Text008
                    ELSE
                      ActiveInputField := 1;
                  END ELSE
                    IF NOT StayInField THEN
                      ActiveInputField := 1;
                END ELSE
                  ActiveInputField += 1;

              IF (FldNo IN
                  [WhseActivityLine.FIELDNO("Bin Code"),WhseActivityLine.FIELDNO("Item No.")]) AND
                 (WhseActivityLine."Breakbulk No." <> 0)
              THEN
                AlternativeText := Text013
            END;
          END;
        ELSE
          ERROR(Text000);
      END;

      ADCSCommunication.SetRFGroupFilter(GetRFGroupFilter(WhseActivityLine));

      IF NOT (FuncGroup.KeyDef IN [FuncGroup.KeyDef::Esc,FuncGroup.KeyDef::Register]) THEN
        SendForm(ActiveInputField);
    END;

    LOCAL PROCEDURE CheckBinNo@17(VAR WhseActLine@1000 : Record 5767;InputValue@1001 : Text[250]) : Boolean;
    VAR
      Bin@1002 : Record 7354;
      BinContent@1003 : Record 7302;
      RFMgt@1240030000 : Codeunit 14002801;
      BinCode@1240030001 : Code[20];
    BEGIN
      RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
      IF RFEmployeeSetup."Blank as Bin in Whse Act. Line" THEN
        IF InputValue = '' THEN
          InputValue := WhseActLine."Bin Code";

      IF NOT RFMgt.GetBin(
               InputValue,RFEmployeeSetup,WhseActLine."Location Code",
               WhseActLine."Action Type" = WhseActLine."Action Type"::Take,BinCode)
      THEN
        Remark := STRSUBSTNO(Text004,BinContent.FIELDCAPTION("Bin Code"))
      ELSE
        InputValue := BinCode;

      CASE WhseActLine."Action Type" OF
        WhseActLine."Action Type"::" ":
          IF InputValue = WhseActLine."Bin Code" THEN
            EXIT(TRUE);
        WhseActLine."Action Type"::Take:
          BEGIN
            RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
            IF RFEmployeeSetup."Allow Change Take Bin" OR (WhseActLine."Bin Code" = '')  THEN BEGIN
              Bin.RESET;
              Bin.SETRANGE("Location Code",WhseActLine."Location Code");
              Bin.SETRANGE(Code,COPYSTR(InputValue,1,MAXSTRLEN(Bin.Code)));
              IF NOT Bin.FIND('-') THEN BEGIN
                Remark := STRSUBSTNO(Text014,COPYSTR(InputValue,1,MAXSTRLEN(Bin.Code)));
                EXIT(FALSE);
              END;

              // PM XXX missing test for Bin Content and other Takes

              IF (WhseActLine."Breakbulk No." <> 0) AND (WhseActLine."Bin Code" <> InputValue)
              THEN BEGIN
                Remark := Text017;
                EXIT(FALSE);
              END;

              IF WhseActLine."Zone Code" <> Bin."Zone Code" THEN
                WhseActLine.VALIDATE("Zone Code",'');
              WhseActLine.VALIDATE("Bin Code",COPYSTR(InputValue,1,MAXSTRLEN(Bin.Code)));
            END ELSE
              IF InputValue = WhseActLine."Bin Code" THEN
                EXIT(TRUE);
          END;
        WhseActLine."Action Type"::Place:
          BEGIN
            RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
            IF RFEmployeeSetup."Allow Change Place Bin" OR (WhseActLine."Bin Code" = '') THEN BEGIN
              Bin.RESET;
              Bin.SETRANGE("Location Code",WhseActLine."Location Code");
              Bin.SETRANGE(Code,COPYSTR(InputValue,1,MAXSTRLEN(Bin.Code)));
              IF NOT Bin.FIND('-') THEN BEGIN
                Remark := STRSUBSTNO(Text014,COPYSTR(InputValue,1,MAXSTRLEN(Bin.Code)));
                EXIT(FALSE);
              END;

              IF WhseActLine."Zone Code" <> Bin."Zone Code" THEN
                WhseActLine.VALIDATE("Zone Code",'');
              WhseActLine.VALIDATE("Bin Code",COPYSTR(InputValue,1,MAXSTRLEN(Bin.Code)));
            END ELSE
              IF InputValue = WhseActLine."Bin Code" THEN
                EXIT(TRUE);
          END;
      END;

      IF (InputValue = WhseActLine."Bin Code") AND (WhseActLine."Bin Code" <> '') THEN
        EXIT(TRUE);

      Remark := STRSUBSTNO(Text004,WhseActLine.FIELDCAPTION("Bin Code"));
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckItemNo@16(VAR WhseActLine@1000 : Record 5767;InputValue@1001 : Text[250]);
    VAR
      ItemIdent@1002 : Record 7704;
      RFMgt@1003 : Codeunit 14002801;
      LotNo@1240040001 : Code[20];
      SerialNo@1240040000 : Code[20];
    BEGIN
      WhseActLine.VALIDATE("Lot No. Scanned",FALSE);

      RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
      IF RFEmployeeSetup."Blank as Item in Whse Act Line" THEN
        IF InputValue = '' THEN
          InputValue := WhseActLine."Item No.";

      IF NOT RFMgt.GetItem(
               InputValue,RFEmployeeSetup,ItemIdent."Item No.",ItemIdent."Variant Code",
               ItemIdent."Unit of Measure Code",LotNo,SerialNo)
      THEN BEGIN
        Remark := STRSUBSTNO(Text004,ItemIdent.FIELDCAPTION("Item No."));
        EXIT;
      END;

      IF ItemIdent."Item No." <> WhseActLine."Item No." THEN BEGIN
        Remark := STRSUBSTNO(Text004,ItemIdent.FIELDCAPTION("Item No."));
        EXIT;
      END;

      IF (ItemIdent."Variant Code" <> '') AND
         (ItemIdent."Variant Code" <> WhseActLine."Variant Code")
      THEN BEGIN
        Remark := STRSUBSTNO(Text004,ItemIdent.FIELDCAPTION("Variant Code"));
        EXIT;
      END;

      IF (ItemIdent."Unit of Measure Code" <> '') AND
         (ItemIdent."Unit of Measure Code" <> WhseActLine."Unit of Measure Code") AND
         NOT RFEmployeeSetup."No Unit of Measure Check"
      THEN BEGIN
        Remark := STRSUBSTNO(Text004,ItemIdent.FIELDCAPTION("Unit of Measure Code"));
        EXIT;
      END;

      GetRFSetup;
      GetItemTrackingCode(WhseActLine);
      IF (ItemTrackingCode."Lot Warehouse Tracking" OR
          (RFSetup."Warehouse Item Tracking" AND
           ItemTrackingMgt.RFLNWhseItemTracking2(
             ItemTrackingCode,WhseActLine."Activity Type",WhseActLine."Source Type"))) AND
         (LotNo <> '')
      THEN BEGIN
        CheckLotNo(WhseActLine,LotNo);
        IF Remark = '' THEN
          WhseActLine.VALIDATE("Lot No. Scanned",TRUE)
      END;

      IF (ItemTrackingCode."SN Warehouse Tracking" OR
          (RFSetup."Warehouse Item Tracking" AND
           ItemTrackingMgt.RFLNWhseItemTracking2(
             ItemTrackingCode,WhseActLine."Activity Type",WhseActLine."Source Type"))) AND
         (SerialNo <> '')
      THEN BEGIN
        CheckSerialNo(WhseActLine,SerialNo);
        IF Remark = '' THEN
          WhseActLine.VALIDATE("Lot No. Scanned",TRUE)
      END;
    END;

    PROCEDURE CheckVariant@1240030005(VAR WhseActLine@1240030001 : Record 5767;InputValue@1240030000 : Text[250]);
    VAR
      RFMgt@1240030002 : Codeunit 14002801;
      NewVariantCode@1240030003 : Code[20];
    BEGIN
      RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
      IF RFEmployeeSetup."Blank as Variant in WhseActLin" THEN
        IF InputValue = '' THEN
          InputValue := WhseActLine."Variant Code";

      IF NOT RFMgt.GetVariant(InputValue,RFEmployeeSetup,WhseActLine."Item No.",NewVariantCode) THEN
        Remark := STRSUBSTNO(Text004,WhseActLine.FIELDCAPTION("Variant Code"));
    END;

    PROCEDURE CheckUnitOfMeasure@1240030006(VAR WhseActLine@1240030001 : Record 5767;InputValue@1240030000 : Text[250]);
    VAR
      RFMgt@1240030002 : Codeunit 14002801;
      NewUnitOfMeasureCode@1240030003 : Code[20];
    BEGIN
      RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
      IF RFEmployeeSetup."Blank as UOM in Whse Act. Line" THEN
        IF InputValue = '' THEN
          InputValue := WhseActLine."Unit of Measure Code";

      IF NOT RFMgt.GetUnitOfMeasure(
               InputValue,RFEmployeeSetup,WhseActLine."Item No.",NewUnitOfMeasureCode)
      THEN
        Remark := STRSUBSTNO(Text004,WhseActLine.FIELDCAPTION("Unit of Measure Code"));
    END;

    LOCAL PROCEDURE CheckQty@26(VAR WhseActLine@1000 : Record 5767;InputValue@1001 : Text[250];VAR StayInField@1240030001 : Boolean);
    VAR
      ItemIdentifier@1240030003 : Record 7704;
      WhseActLine2@1240030002 : Record 5767;
      BinContent@1240030004 : Record 7302;
      RFMgt@1240030000 : Codeunit 14002801;
      QtyToHandle@1002 : Decimal;
      LotNo@1240040001 : Code[20];
      SerialNo@1240040000 : Code[20];
    BEGIN
      IF InputValue = '' THEN BEGIN
        Remark := Text011;
        EXIT;
      END;

      RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);

      StayInField := FALSE;
      IF RFEmployeeSetup."Scan Item in Qty. to Handle" THEN
        QtyToHandle :=
          RFMgt.ScanItemInQtyToHandle(RFEmployeeSetup,InputValue,
            WhseActLine."Item No.",WhseActLine."Unit of Measure Code",StayInField,Remark);

      IF Remark <> '' THEN
        EXIT;

      IF NOT StayInField THEN
        IF NOT RFMgt.GetQuantity(InputValue,RFEmployeeSetup,QtyToHandle) THEN BEGIN
          Remark := STRSUBSTNO(Text004,WhseActLine.FIELDCAPTION(Quantity));
          EXIT;
        END;

      WITH WhseActLine DO BEGIN
        RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
        IF RFEmployeeSetup."Add Quantity on Whse. Docs." THEN
          QtyToHandle := QtyToHandle + WhseActLine."Qty. to Handle";

        IF (WhseActLine."Qty. to Handle" <> 0) AND
           (WhseActLine."Qty. to Handle" < QtyToHandle) AND
           (WhseActLine."Lot No." <> '')
        THEN BEGIN
          Remark := Text021;
          EXIT;
        END;

        IF QtyToHandle = ABS(QtyToHandle) THEN BEGIN
          CheckItemNo(WhseActLine,"Item No.");
          IF (QtyToHandle <= "Qty. Outstanding") OR
             (RFEmployeeSetup."Allow Manuf. Overpicking" AND
              (WhseActLine."Source Type" = 5407) AND
              (WhseActLine."Action Type" = WhseActLine."Action Type"::Take) AND
              (WhseActLine."Serial No." = ''))
          THEN BEGIN
            IF (QtyToHandle > WhseActLine."Qty. Outstanding") THEN BEGIN
              WhseActLine2.SETCURRENTKEY(
                "Source No.","Source Line No.","Source Subline No.","Serial No.","Lot No.");
              WhseActLine2.SETRANGE("Activity Type",WhseActLine."Activity Type");
              WhseActLine2.SETRANGE("No.",WhseActLine."No.");
              WhseActLine2.SETRANGE("Source No.",WhseActLine."Source No.");
              WhseActLine2.SETRANGE("Source Line No.",WhseActLine."Source Line No.");
              WhseActLine2.SETRANGE("Source Subline No.",WhseActLine."Source Subline No.");
              WhseActLine2.SETRANGE("Action Type",WhseActLine2."Action Type"::Place);
              IF WhseActLine2."Lot No." <> '' THEN
                WhseActLine2.SETRANGE("Lot No.",WhseActLine."Lot No.");
              IF WhseActLine2.FIND('-') THEN BEGIN

                BinContent.SETRANGE("Location Code",WhseActLine."Location Code");
                BinContent.SETRANGE("Bin Code",WhseActLine."Bin Code");
                BinContent.SETRANGE("Item No.",WhseActLine."Item No.");
                IF WhseActLine."Variant Code" <> '' THEN
                  BinContent.SETRANGE("Variant Code",WhseActLine."Variant Code");
                BinContent.SETRANGE("Unit of Measure Code",WhseActLine."Unit of Measure Code");
                IF BinContent.FIND('-') THEN BEGIN
                  IF WhseActLine."Lot No." <> '' THEN
                    BinContent."Lot No. Filter" := WhseActLine."Lot No.";
                  BinContent.CALCFIELDS(Quantity,"Pick Qty.","Neg. Adjmt. Qty.");
                END;
                IF BinContent.Quantity >= QtyToHandle + BinContent."Neg. Adjmt. Qty."
                THEN BEGIN
                  WhseActLine2.VALIDATE(Quantity,WhseActLine2.Quantity +
                    QtyToHandle - WhseActLine.Quantity);
                  WhseActLine2.MODIFY;
                END ELSE
                  Remark := Text011;
              END;
              IF Remark = '' THEN
                VALIDATE(Quantity,QtyToHandle);
            END;
            IF Remark = '' THEN
              VALIDATE("Qty. to Handle",QtyToHandle);
          END ELSE
            Remark := Text011;
        END ELSE
          Remark := Text011;
      END;
    END;

    LOCAL PROCEDURE CheckSerialNo@105(VAR WhseActLine@1000 : Record 5767;InputValue@1001 : Text[250]);
    VAR
      BinContent@1240030000 : Record 7302;
      ItemLedgerEntry@1240030001 : Record 32;
      SerialNoInformation@1240040000 : Record 6504;
      RFMgt@1240030003 : Codeunit 14002801;
      NewSerialNo@1240030002 : Code[20];
    BEGIN
      IF InputValue = '' THEN BEGIN
        Remark := Text011;
        EXIT;
      END;

      IF SerialNoInformation.GET(WhseActLine."Item No.",WhseActLine."Variant Code",InputValue) THEN BEGIN
        IF SerialNoInformation.Blocked THEN BEGIN
          Remark := Text025;
          EXIT;
        END;
      END;

      RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
      IF NOT RFMgt.GetSerialNo(InputValue,RFEmployeeSetup,NewSerialNo) THEN
        Remark := STRSUBSTNO(Text004,WhseActLine.FIELDCAPTION("Serial No."));

      GetItemTrackingCode(WhseActLine);
      CASE TRUE OF
        ItemTrackingCode."SN Warehouse Tracking" AND
        (WhseActLine."Action Type" = WhseActLine."Action Type"::Take):
          BEGIN
            BinContent.RESET;
            BinContent.SETRANGE("Location Code",WhseActLine."Location Code");
            BinContent.SETRANGE("Bin Code",WhseActLine."Bin Code");
            BinContent.SETRANGE("Item No.",WhseActLine."Item No.");
            BinContent.SETRANGE("Variant Code",WhseActLine."Variant Code");
            BinContent.SETRANGE("Unit of Measure Code",WhseActLine."Unit of Measure Code");
            BinContent.SETRANGE(
              "Serial No. Filter",COPYSTR(UPPERCASE(NewSerialNo),1,MAXSTRLEN(WhseActLine."Lot No.")));
            BinContent.SETFILTER(Quantity,'>0');
            IF NOT BinContent.FIND('-') THEN BEGIN
              Remark := STRSUBSTNO(Text019,WhseActLine.FIELDCAPTION("Serial No."));
              EXIT;
            END;
          END;
        ItemTrackingCode."SN Specific Tracking" AND
        (WhseActLine."Action Type" = WhseActLine."Action Type"::Take):
          BEGIN
            ItemLedgerEntry.RESET;
            ItemLedgerEntry.SETCURRENTKEY(
              "Item No.",Open,"Variant Code",Positive,"Location Code","Posting Date",
              "Expiration Date","Lot No.","Serial No.");
            ItemLedgerEntry.SETRANGE("Item No.",WhseActLine."Item No.");
            ItemLedgerEntry.SETRANGE("Variant Code",WhseActLine."Variant Code");
            ItemLedgerEntry.SETRANGE("Location Code",WhseActLine."Location Code");
            ItemLedgerEntry.SETRANGE(
              "Serial No.",COPYSTR(UPPERCASE(NewSerialNo),1,MAXSTRLEN(WhseActLine."Serial No.")));
            ItemLedgerEntry.SETRANGE(Positive,TRUE);
            ItemLedgerEntry.SETRANGE(Open,TRUE);
            IF NOT ItemLedgerEntry.FIND('-') THEN BEGIN
              Remark := STRSUBSTNO(Text020,WhseActLine.FIELDCAPTION("Serial No."));
              EXIT;
            END;
          END;
      END;

      WITH WhseActLine DO BEGIN
        VALIDATE("Qty. to Handle",1);
        VALIDATE("Serial No.",NewSerialNo);
      END;
    END;

    LOCAL PROCEDURE CheckLotNo@1240030002(VAR WhseActLine@1000 : Record 5767;InputValue@1001 : Text[250]);
    VAR
      WhseActivityLine2@1002 : Record 5767;
      BinContent@1240030000 : Record 7302;
      ItemLedgerEntry@1240030001 : Record 32;
      LotNoInformation@1240040000 : Record 6505;
      RFMgt@1240030002 : Codeunit 14002801;
      NewLotNo@1240030003 : Code[20];
    BEGIN
      IF InputValue = '' THEN BEGIN
        Remark := Text011;
        EXIT;
      END;

      RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
      IF NOT RFMgt.GetLotNo(InputValue,RFEmployeeSetup,NewLotNo) THEN
        Remark := STRSUBSTNO(Text004,WhseActLine.FIELDCAPTION("Lot No."));

      IF LotNoInformation.GET(WhseActLine."Item No.",WhseActLine."Variant Code",InputValue) THEN BEGIN
        IF LotNoInformation.Blocked THEN BEGIN
          Remark := Text024;
          EXIT;
        END;
      END;

      GetItemTrackingCode(WhseActLine);
      CASE TRUE OF
        ItemTrackingCode."Lot Warehouse Tracking" AND
        (WhseActLine."Action Type" = WhseActLine."Action Type"::Take):
          BEGIN
            BinContent.RESET;
            BinContent.SETRANGE("Location Code",WhseActLine."Location Code");
            BinContent.SETRANGE("Bin Code",WhseActLine."Bin Code");
            BinContent.SETRANGE("Item No.",WhseActLine."Item No.");
            BinContent.SETRANGE("Variant Code",WhseActLine."Variant Code");
            IF WhseActLine."Breakbulk No." = 0 THEN BEGIN
              WhseActivityLine2.RESET;
              WhseActivityLine2.SETCURRENTKEY(
                "Activity Type","No.","Item No.","Variant Code","Action Type","Bin Code");
              WhseActivityLine2.SETRANGE("Activity Type",WhseActLine."Activity Type");
              WhseActivityLine2.SETRANGE("No.",WhseActLine."No.");
              WhseActivityLine2.SETRANGE("Item No.",WhseActLine."Item No.");
              WhseActivityLine2.SETRANGE("Variant Code",WhseActLine."Variant Code");
              WhseActivityLine2.SETRANGE("Location Code",WhseActLine."Location Code");
              WhseActivityLine2.SETRANGE("Bin Code",WhseActLine."Bin Code");
              WhseActivityLine2.SETFILTER("Breakbulk No.",'<>0');
              IF NOT WhseActivityLine2.FIND('-') THEN
                BinContent.SETRANGE("Unit of Measure Code",WhseActLine."Unit of Measure Code");
            END ELSE
              BinContent.SETRANGE("Unit of Measure Code",WhseActLine."Unit of Measure Code");
            BinContent.SETRANGE(
              "Lot No. Filter",COPYSTR(UPPERCASE(NewLotNo),1,MAXSTRLEN(WhseActLine."Lot No.")));
            BinContent.SETFILTER(Quantity,'>0');
            IF NOT BinContent.FIND('-') THEN BEGIN
              Remark := STRSUBSTNO(Text019,WhseActLine.FIELDCAPTION("Lot No."));
              EXIT;
            END;
            IF ItemTrackingCode."Strict Expiration Posting" THEN BEGIN
              WarehouseEntry.SETCURRENTKEY(
                "Item No.","Location Code","Variant Code","Bin Type Code","Unit of Measure Code",
                "Lot No.","Serial No.");
              WarehouseEntry.SETRANGE("Item No.",WhseActLine."Item No.");
              WarehouseEntry.SETRANGE("Variant Code",WhseActLine."Variant Code");
              WarehouseEntry.SETRANGE("Lot No.",WhseActLine."Lot No.");
              WarehouseEntry.SETRANGE("Location Code",WhseActLine."Location Code");
              WarehouseEntry.SETFILTER("Expiration Date",'<>%1',0D);
              IF WarehouseEntry.FIND('+') AND (WarehouseEntry."Expiration Date" < WORKDATE) THEN BEGIN
                Remark := STRSUBSTNO(Text026,WhseActLine.FIELDCAPTION("Lot No."));
                EXIT;
              END;
            END;
          END;
        ItemTrackingCode."Lot Specific Tracking" AND
        (WhseActLine."Action Type" = WhseActLine."Action Type"::Take):
          BEGIN
            ItemLedgerEntry.RESET;
            ItemLedgerEntry.SETCURRENTKEY(
              "Item No.",Open,"Variant Code",Positive,"Location Code","Posting Date",
              "Expiration Date","Lot No.","Serial No.");
            ItemLedgerEntry.SETRANGE("Item No.",WhseActLine."Item No.");
            ItemLedgerEntry.SETRANGE("Variant Code",WhseActLine."Variant Code");
            ItemLedgerEntry.SETRANGE("Location Code",WhseActLine."Location Code");
            ItemLedgerEntry.SETRANGE(
              "Lot No.",COPYSTR(UPPERCASE(NewLotNo),1,MAXSTRLEN(WhseActLine."Lot No.")));
            ItemLedgerEntry.SETRANGE(Positive,TRUE);
            ItemLedgerEntry.SETRANGE(Open,TRUE);
            IF NOT ItemLedgerEntry.FIND('-') THEN BEGIN
              Remark := STRSUBSTNO(Text020,WhseActLine.FIELDCAPTION("Lot No."));
              EXIT;
            END;
          END;
      END;

      WhseActLine.VALIDATE("Lot No.",NewLotNo);
    END;

    LOCAL PROCEDURE CheckToteNo@1240030000(VAR WhseActLine@1000 : Record 5767;InputValue@1001 : Text[250]);
    VAR
      PalletBinContent@1240020000 : Record 14002963;
      ToteLine@1240040000 : Record 14002901;
      ItemIdent@1240020008 : Record 7704;
      LicensePlateMgt@1240020001 : Codeunit 14002971;
      PalletQAMgt@1240020010 : Codeunit 14002513;
      PalletNo@1240020002 : Code[20];
      BoxNo@1240020003 : Code[20];
      BinCode@1240020004 : Code[20];
      LotNo@1240020006 : Code[20];
      SerialNo@1240020007 : Code[20];
      ItemQty@1240020005 : Decimal;
      Quantity@1240020009 : Decimal;
      OldLineNo@1240020011 : Integer;
    BEGIN
      RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);

      IF Remark = '' THEN
        IF NOT LicensePlateMgt.GetStorageID(InputValue,PalletNo,BoxNo,WhseEmpId) THEN
          Remark := STRSUBSTNO(Text004,PalletBinContent.FIELDCAPTION("Pallet No."));

      IF Remark = '' THEN BEGIN
        IF NOT LicensePlateMgt.GetStorageIDBin(PalletNo,WhseEmpId,BinCode) THEN
          Remark := STRSUBSTNO(Text004,WhseActLine."Bin Code");
        IF WhseActLine."Bin Code" <> BinCode THEN
          IF RFEmployeeSetup."Allow Change Take Bin" THEN
            WhseActLine.VALIDATE("Bin Code",BinCode)
          ELSE
            Remark := STRSUBSTNO(Text004,WarehouseEntry.FIELDCAPTION("Bin Code"));
      END;

      IF Remark = '' THEN
        IF PalletQAMgt.PickRestricted(PalletNo,Remark) THEN
          IF Remark = '' THEN
            Remark := Text046;

      IF Remark = '' THEN
        IF NOT LicensePlateMgt.GetPalletItemNo(PalletNo,ItemIdent) THEN
          Remark := Text028;

      IF Remark = '' THEN
        IF (WhseActLine."Item No." <> ItemIdent."Item No.") OR
           (WhseActLine."Variant Code" <> ItemIdent."Variant Code") OR
           (WhseActLine."Unit of Measure Code" <> ItemIdent."Unit of Measure Code")
        THEN
          Remark := Text030;

      IF Remark = '' THEN
        IF NOT LicensePlateMgt.CheckPalletConsistency(ItemIdent,PalletNo) THEN
          Remark := Text029;

      IF Remark = '' THEN BEGIN
        ItemQty :=
          LicensePlateMgt.GetItemQtyOfStorageID(PalletNo,BoxNo,ItemIdent,LotNo,SerialNo);

        IF (ItemQty <= 0) THEN
          Remark := STRSUBSTNO(Text004,WhseActLine.FIELDCAPTION(Quantity));

        IF (ItemQty > WhseActLine."Qty. Outstanding") THEN
          ItemQty := WhseActLine."Qty. Outstanding";
      END;

      IF Remark = '' THEN
        IF NOT RFEmployeeSetup."Allow Change Take Bin" THEN
          IF WhseActLine."Bin Code" <> BinCode THEN
            Remark := STRSUBSTNO(Text004,WhseActLine.FIELDCAPTION("Bin Code"))
          ELSE
            WhseActLine."Bin Code" := BinCode;

      IF Remark = '' THEN BEGIN
        PalletBinContent.SETRANGE("Pallet No.",PalletNo);
        PalletBinContent.SETRANGE("Item No.",ItemIdent."Item No.");
        PalletBinContent.SETRANGE("Variant No.",ItemIdent."Variant Code");
        PalletBinContent.SETRANGE("Unit of Measure",ItemIdent."Unit of Measure Code");
        IF PalletBinContent.FINDFIRST THEN BEGIN
          IF PalletBinContent."Lot No." <> '' THEN
            WhseActLine."Lot No." := PalletBinContent."Lot No.";
          IF PalletBinContent."Serial No." <> '' THEN
            WhseActLine."Serial No." := PalletBinContent."Serial No.";
          IF PalletBinContent."Expiry Date" <> 0D THEN
            WhseActLine."Expiration Date" := PalletBinContent."Expiry Date";
        END;
      END;

      IF WhseActLine."First Scan Date" = 0D THEN BEGIN
        WhseActLine."First Scan Date" := WORKDATE;
        WhseActLine."First Scan Time" := TIME;
      END;

      WhseActLine."Last Scan Date" := WORKDATE;
      WhseActLine."Last Scan Time" := TIME;
      WhseActLine."Warehouse Employee Code" := WhseEmpId;
      WhseActLine."Pick License Plate No." := InputValue;
      WhseActLine."Pallet Code" := InputValue;
      //WhseActLine."Box Code"
      WhseActLine."Pallet Action" := WhseActLine."Pallet Action"::Pick;

      IF Remark = '' THEN BEGIN
        WhseActLine.VALIDATE("Qty. to Handle",ItemQty);
        WhseActLine."Tote No." := PalletNo;
        IF CreateToteLine(WhseActLine) THEN
          WhseActLine.MODIFY;
        OldLineNo := WhseActLine."Line No.";
      END;

      IF Remark = '' THEN BEGIN
        IF PalletBinContent.NEXT = 0 THEN BEGIN
          SplitLine(WhseActLine);
          IF WhseActLine."Line No." <> OldLineNo THEN BEGIN
            WhseActLine."Tote No." := '';
            WhseActLine.MODIFY;
          END;
        END ELSE BEGIN
          IF PalletBinContent.FINDSET THEN BEGIN
            REPEAT
              WhseActLine.VALIDATE("Qty. to Handle",PalletBinContent.Quantity);
              WhseActLine."Lot No." := PalletBinContent."Lot No.";
              WhseActLine."Tote No." := PalletNo;
              WhseActLine.MODIFY;
              SplitLine(WhseActLine);
              WhseActLine.MODIFY;
            UNTIL PalletBinContent.NEXT = 0;
          END;
        END;
      END;

      IF Remark = '' THEN BEGIN
        RecRef.GETTABLE(WhseActLine);
        ADCSCommunication.SetRecRef(RecRef);
      END;
    END;

    LOCAL PROCEDURE Reset@29(VAR WhseActLine2@1000 : Record 5767);
    VAR
      WhseActLine@1001 : Record 5767;
      ToteLine@1240040000 : Record 14002901;
    BEGIN
      IF NOT WhseActLine.GET(WhseActLine2."Activity Type",WhseActLine2."No.",WhseActLine2."Line No.")
      THEN
        ERROR(Text007);

      Remark := '';

      ToteLine.RESET;
      ToteLine.SETRANGE("Activity Type",WhseActLine."Activity Type");
      ToteLine.SETRANGE("No.",WhseActLine."No.");
      ToteLine.SETRANGE("Tote No.",WhseActLine."Tote No.");
      ToteLine.DELETEALL;

      WhseActLine."Lot No." := '';
      WhseActLine."Serial No." := '';
      WhseActLine.VALIDATE("Qty. to Handle",0);
      WhseActLine."First Scan Date" := 0D;
      WhseActLine."First Scan Time" := 0T;
      WhseActLine."Last Scan Date" := 0D;
      WhseActLine."Last Scan Time" := 0T;
      WhseActLine."Warehouse Employee Code" := '';
      WhseActLine."Lot No. Scanned" := FALSE;
      WhseActLine."License Plate Pick" := FALSE;
      WhseActLine."Pick License Plate No." := '';
      WhseActLine."Tote No." := '';
      WhseActLine.MODIFY;

      RecRef.GETTABLE(WhseActLine);
      ADCSCommunication.SetRecRef(RecRef);
      ActiveInputField := 1;
    END;

    LOCAL PROCEDURE Register@30(WhseActLine2@1000 : Record 5767);
    VAR
      WhseActLine@1001 : Record 5767;
      WhseActLine3@1240020000 : Record 5767;
      WhseActivityLine2@1002 : Record 5767;
      WhseActivityLine3@1240030002 : Record 5767;
      WhseActivityLine4@1240030004 : Record 5767;
      WhseActivityLineTmp@1003 : TEMPORARY Record 5767;
      ProcessingEntry@1240030003 : Record 14002809;
      ToteLine@1240020002 : Record 14002901;
      PalletBinContent@1240020003 : Record 14002963;
      WhseActivityRegister@1004 : Codeunit 7307;
      LicensePlateMgt@1240020001 : Codeunit 14002971;
      LineQtyBase@1005 : Decimal;
      Finished@1240030000 : Boolean;
      Restart@1240030001 : Boolean;
      ModifyRecord@1240030005 : Boolean;
    BEGIN
      IF NOT WhseActLine.GET(WhseActLine2."Activity Type",WhseActLine2."No.",WhseActLine2."Line No.")
      THEN
        ERROR(Text007);

      RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
      IF ((WhseActLine."Activity Type" = WhseActLine."Activity Type"::Pick) AND
          RFEmployeeSetup."Scan Only Takes on Picks") OR
         ((WhseActLine."Activity Type" = WhseActLine."Activity Type"::Movement) AND
          RFEmployeeSetup."No Place on Single Place Move" AND SinglePlaceMovement) OR
         ((WhseActLine."Activity Type" = WhseActLine."Activity Type"::"Put-away") AND
          RFEmployeeSetup."Scan Only Places on Put-aways")
      THEN BEGIN
        IF RFEmployeeSetup."Show No Breakbulk Lines" THEN BEGIN
          WhseActivityLine3.RESET;
          WhseActivityLine3.SETCURRENTKEY("Activity Type","No.","Bin Ranking","Breakbulk No.");
          WhseActivityLine3.SETRANGE("Activity Type",WhseActLine."Activity Type");
          WhseActivityLine3.SETRANGE("No.",WhseActLine."No.");
          WhseActivityLine3.SETFILTER("Breakbulk No.",'<>0');
          IF WhseActivityLine3.FIND('-') THEN
            REPEAT
              ModifyRecord := FALSE;

              IF WhseActivityLine3."Qty. to Handle" <> WhseActivityLine3."Qty. Outstanding" THEN BEGIN
                WhseActivityLine3.VALIDATE("Qty. to Handle",WhseActivityLine3."Qty. Outstanding");
                ModifyRecord := TRUE;
              END;

              GetItemTrackingCode(WhseActivityLine3);
              IF ItemTrackingCode."Lot Warehouse Tracking" THEN BEGIN
                WhseActivityLine4.RESET;
                WhseActivityLine4.SETCURRENTKEY(
                  "Activity Type","No.","Item No.","Variant Code","Action Type","Bin Code");
                WhseActivityLine4.SETRANGE("Activity Type",WhseActivityLine3."Activity Type");
                WhseActivityLine4.SETRANGE("No.",WhseActivityLine3."No.");
                WhseActivityLine4.SETRANGE("Item No.",WhseActivityLine3."Item No.");
                WhseActivityLine4.SETRANGE("Variant Code",WhseActivityLine3."Variant Code");
                WhseActivityLine4.SETRANGE("Location Code",WhseActivityLine3."Location Code");
                WhseActivityLine4.SETRANGE("Bin Code",WhseActivityLine3."Bin Code");
                WhseActivityLine4.SETRANGE("Breakbulk No.",0);
                IF WhseActLine."Activity Type" = WhseActLine."Activity Type"::"Put-away" THEN
                  WhseActivityLine4.SETRANGE("Action Type",WhseActivityLine4."Action Type"::Place)
                ELSE
                  WhseActivityLine4.SETRANGE("Action Type",WhseActivityLine4."Action Type"::Take);
                IF NOT WhseActivityLine4.FIND('-') THEN
                  ERROR(Text022);
                WhseActivityLine4.SETFILTER("Lot No.",'<>%1',WhseActivityLine4."Lot No.");
                IF WhseActivityLine4.NEXT <> 0 THEN
                  ERROR(Text023);

                IF WhseActivityLine3."Lot No." <> WhseActivityLine4."Lot No." THEN BEGIN
                  WhseActivityLine3.VALIDATE("Lot No.",WhseActivityLine4."Lot No.");
                  ModifyRecord := TRUE;
                END;
              END;

              IF ModifyRecord THEN
                WhseActivityLine3.MODIFY;
            UNTIL WhseActivityLine3.NEXT = 0;
        END;

        WhseActivityLineTmp.RESET;
        WhseActivityLineTmp.DELETEALL;

        WhseActivityLine3.RESET;
        WhseActivityLine3.SETCURRENTKEY("Activity Type","No.","Action Type","Bin Code");
        WhseActivityLine3.SETRANGE("Activity Type",WhseActLine."Activity Type");
        WhseActivityLine3.SETRANGE("No.",WhseActLine."No.");
        IF WhseActLine."Activity Type" = WhseActLine."Activity Type"::"Put-away" THEN
          WhseActivityLine3.SETRANGE("Action Type",WhseActivityLine3."Action Type"::Take)
        ELSE
          WhseActivityLine3.SETRANGE("Action Type",WhseActivityLine3."Action Type"::Place);
        IF WhseActivityLine3.FIND('-') THEN
          REPEAT
            WhseActivityLineTmp := WhseActivityLine3;
            WhseActivityLineTmp."Qty. to Handle" := 0;
            WhseActivityLineTmp."Qty. to Handle (Base)" := 0;
            WhseActivityLineTmp.INSERT;
          UNTIL WhseActivityLine3.NEXT = 0;

        WhseActivityLine2.RESET;
        WhseActivityLine2.SETCURRENTKEY("Activity Type","No.","Action Type","Bin Code");
        WhseActivityLine2.SETRANGE("Activity Type",WhseActLine."Activity Type");
        WhseActivityLine2.SETRANGE("No.",WhseActLine."No.");
        IF WhseActLine."Activity Type" = WhseActLine."Activity Type"::"Put-away" THEN
          WhseActivityLine2.SETRANGE("Action Type",WhseActivityLine2."Action Type"::Place)
        ELSE
          WhseActivityLine2.SETRANGE("Action Type",WhseActivityLine2."Action Type"::Take);
        WhseActivityLine2.SETFILTER("Lot No.",'<>%1','');
        WhseActivityLine2.SETFILTER("Qty. to Handle",'<>0');
        IF WhseActivityLine2.FIND('-') THEN BEGIN
          Finished := FALSE;

          REPEAT
            Restart := FALSE;

            WhseActivityLineTmp.RESET;
            WhseActivityLineTmp.SETCURRENTKEY(
              "Activity Type","No.","Item No.","Variant Code","Action Type","Bin Code");
            WhseActivityLineTmp.SETRANGE("Activity Type",WhseActivityLine2."Activity Type");
            WhseActivityLineTmp.SETRANGE("No.",WhseActivityLine2."No.");
            WhseActivityLineTmp.SETRANGE("Item No.",WhseActivityLine2."Item No.");
            WhseActivityLineTmp.SETRANGE("Variant Code",WhseActivityLine2."Variant Code");
            WhseActivityLineTmp.SETRANGE("Source Type",WhseActivityLine2."Source Type");
            WhseActivityLineTmp.SETRANGE("Source Subtype",WhseActivityLine2."Source Subtype");
            WhseActivityLineTmp.SETRANGE("Source No.",WhseActivityLine2."Source No.");
            WhseActivityLineTmp.SETRANGE("Source Line No.",WhseActivityLine2."Source Line No.");
            WhseActivityLineTmp.SETRANGE("Source Subline No.",WhseActivityLine2."Source Subline No.");
            WhseActivityLineTmp.SETRANGE("Source Document",WhseActivityLine2."Source Document");
            WhseActivityLineTmp.SETRANGE("Breakbulk No.",WhseActivityLine2."Breakbulk No.");
            WhseActivityLineTmp.FIND('-');
            REPEAT
              IF WhseActivityLineTmp."Qty. Outstanding (Base)" <=
                 WhseActivityLine2."Qty. to Handle (Base)"
              THEN BEGIN
                WhseActivityLine2."Qty. to Handle (Base)" :=
                  WhseActivityLine2."Qty. to Handle (Base)" -
                  WhseActivityLineTmp."Qty. Outstanding (Base)";

                WhseActivityLineTmp.DELETE;
              END ELSE BEGIN
                LineQtyBase := WhseActivityLine2."Qty. to Handle (Base)";

                WhseActivityLine2.GET(
                  WhseActivityLineTmp."Activity Type",WhseActivityLineTmp."No.",
                  WhseActivityLineTmp."Line No.");

                IF WhseActivityLine2."Qty. per Unit of Measure" <> 0 THEN
                  WhseActivityLine2.VALIDATE(
                    "Qty. to Handle",
                    ROUND(LineQtyBase / WhseActivityLine2."Qty. per Unit of Measure",0.00001))
                ELSE
                  WhseActivityLine2.VALIDATE(
                    "Qty. to Handle",WhseActivityLineTmp."Qty. to Handle (Base)");

                WhseActivityLine2.MODIFY;

                WhseActivityLine2.SefRFKeepBinCode(TRUE);
                WhseActivityLine2.SplitLine(WhseActivityLine2);

                Restart := TRUE;
              END;
            UNTIL Restart OR (WhseActivityLineTmp.NEXT = 0) OR
                  (WhseActivityLine2."Qty. to Handle (Base)" = 0);

            IF Restart THEN BEGIN
              WhseActivityLineTmp.RESET;
              WhseActivityLineTmp.DELETEALL;

              WhseActivityLine3.FIND('-');
              REPEAT
                WhseActivityLineTmp := WhseActivityLine3;
                WhseActivityLineTmp."Qty. to Handle" := 0;
                WhseActivityLineTmp."Qty. to Handle (Base)" := 0;
                WhseActivityLineTmp.INSERT;
              UNTIL WhseActivityLine3.NEXT = 0;

              WhseActivityLine2.FIND('-');
            END ELSE
              Finished := WhseActivityLine2.NEXT = 0;
          UNTIL Finished;

          WhseActivityLineTmp.RESET;
          WhseActivityLineTmp.DELETEALL;

          WhseActivityLine3.FIND('-');
          REPEAT
            WhseActivityLineTmp := WhseActivityLine3;
            WhseActivityLineTmp."Qty. to Handle" := 0;
            WhseActivityLineTmp."Qty. to Handle (Base)" := 0;
            WhseActivityLineTmp.INSERT;
          UNTIL WhseActivityLine3.NEXT = 0;
        END;

        WhseActivityLine2.SETRANGE("Lot No.");
        IF WhseActivityLine2.FIND('-') THEN
          REPEAT
            WhseActivityLineTmp.RESET;
            WhseActivityLineTmp.SETCURRENTKEY(
              "Activity Type","No.","Item No.","Variant Code","Action Type","Bin Code");
            WhseActivityLineTmp.SETRANGE("Activity Type",WhseActivityLine2."Activity Type");
            WhseActivityLineTmp.SETRANGE("No.",WhseActivityLine2."No.");
            WhseActivityLineTmp.SETRANGE("Item No.",WhseActivityLine2."Item No.");
            WhseActivityLineTmp.SETRANGE("Variant Code",WhseActivityLine2."Variant Code");
            WhseActivityLineTmp.SETRANGE("Source Type",WhseActivityLine2."Source Type");
            WhseActivityLineTmp.SETRANGE("Source Subtype",WhseActivityLine2."Source Subtype");
            WhseActivityLineTmp.SETRANGE("Source No.",WhseActivityLine2."Source No.");
            WhseActivityLineTmp.SETRANGE("Source Line No.",WhseActivityLine2."Source Line No.");
            WhseActivityLineTmp.SETRANGE("Source Subline No.",WhseActivityLine2."Source Subline No.");
            WhseActivityLineTmp.SETRANGE("Source Document",WhseActivityLine2."Source Document");
            WhseActivityLineTmp.SETRANGE("Breakbulk No.",WhseActivityLine2."Breakbulk No.");
            WhseActivityLineTmp.FIND('-');
            REPEAT
              IF WhseActivityLineTmp."Qty. Outstanding (Base)" <>
                 WhseActivityLineTmp."Qty. to Handle (Base)"
              THEN BEGIN
                LineQtyBase :=
                  WhseActivityLineTmp."Qty. Outstanding (Base)" -
                  WhseActivityLineTmp."Qty. to Handle (Base)";

                IF LineQtyBase > WhseActivityLine2."Qty. to Handle (Base)" THEN BEGIN
                  WhseActivityLineTmp."Qty. to Handle (Base)" :=
                    WhseActivityLineTmp."Qty. to Handle (Base)" +
                    WhseActivityLine2."Qty. to Handle (Base)";
                  WhseActivityLine2."Qty. to Handle (Base)" := 0;
                END ELSE BEGIN
                  WhseActivityLine2."Qty. to Handle (Base)" :=
                    WhseActivityLine2."Qty. to Handle (Base)" - LineQtyBase;
                  WhseActivityLineTmp."Qty. to Handle (Base)" :=
                    WhseActivityLineTmp."Qty. Outstanding (Base)";
                END;

                IF WhseActivityLine2."Serial No." <> '' THEN
                  WhseActivityLineTmp."Serial No." := WhseActivityLine2."Serial No.";
                IF WhseActivityLine2."Lot No." <> '' THEN
                  WhseActivityLineTmp."Lot No." := WhseActivityLine2."Lot No.";

                WhseActivityLineTmp.MODIFY;
              END;
            UNTIL (WhseActivityLineTmp.NEXT = 0) OR
                  (WhseActivityLine2."Qty. to Handle (Base)" = 0);
          UNTIL WhseActivityLine2.NEXT = 0;

        WhseActivityLineTmp.RESET;
        IF WhseActivityLineTmp.FIND('-') THEN
          REPEAT
            WhseActivityLine2.GET(
              WhseActivityLineTmp."Activity Type",WhseActivityLineTmp."No.",
              WhseActivityLineTmp."Line No.");

            IF (WhseActivityLine2."Qty. to Handle (Base)" <>
                WhseActivityLineTmp."Qty. to Handle (Base)") OR
               (WhseActivityLine2."Serial No." <> WhseActivityLineTmp."Serial No.") OR
               (WhseActivityLine2."Lot No." <> WhseActivityLineTmp."Lot No.")
            THEN BEGIN
              IF WhseActivityLine2."Qty. per Unit of Measure" <> 0 THEN
                WhseActivityLine2.VALIDATE(
                  "Qty. to Handle",
                  ROUND(
                    WhseActivityLineTmp."Qty. to Handle (Base)" /
                    WhseActivityLine2."Qty. per Unit of Measure",0.00001))
              ELSE
                WhseActivityLine2.VALIDATE(
                  "Qty. to Handle",WhseActivityLineTmp."Qty. to Handle (Base)");

              IF WhseActivityLine2."Serial No." <> WhseActivityLineTmp."Serial No." THEN
                WhseActivityLine2.VALIDATE("Serial No.",WhseActivityLineTmp."Serial No.");
              IF WhseActivityLine2."Lot No." <> WhseActivityLineTmp."Lot No." THEN
                WhseActivityLine2.VALIDATE("Lot No.",WhseActivityLineTmp."Lot No.");

              WhseActivityLine2.MODIFY;
            END;
          UNTIL WhseActivityLineTmp.NEXT = 0;
      END;

      IF NOT BalanceQtyToHandle(WhseActLine) THEN
        Remark := Text009
      ELSE BEGIN
        GetRFSetup;
        IF NOT RFSetup."Warehouse Activity Batch Post" THEN BEGIN
          WhseActivityRegister.ShowHideDialog(TRUE);
          WhseActivityRegister.RUN(WhseActLine);
        END ELSE
          ProcessingEntry.InsertWarehouseActivityLine(WhseActLine,WhseEmpId);
      END;
    END;

    PROCEDURE RegisterInvtPick@100(WhseActLine2@1000 : Record 5767);
    VAR
      ProcessingEntry@1240030000 : Record 14002809;
      WhseActivityPost@1001 : Codeunit 7324;
    BEGIN
      GetRFSetup;
      IF NOT RFSetup."Warehouse Activity Batch Post" THEN BEGIN
        CLEAR(WhseActivityPost);
        WhseActivityPost.ShowHideDialog(TRUE);
        WhseActivityPost.SetInvoiceSourceDoc(FALSE);
        WhseActivityPost.PrintDocument(FALSE);
        WhseActivityPost.RUN(WhseActLine2);
        CLEAR(WhseActivityPost);
      END ELSE
        ProcessingEntry.InsertWarehouseActivityLine(WhseActLine2,WhseEmpId);
    END;

    LOCAL PROCEDURE BalanceQtyToHandle@18(VAR WhseActivLine2@1000 : Record 5767) : Boolean;
    VAR
      WhseActLine@1001 : Record 5767;
      QtyToPick@1002 : Decimal;
      QtyToPutAway@1003 : Decimal;
    BEGIN
      WhseActLine.COPY(WhseActivLine2);
      WITH WhseActLine DO BEGIN
        SETCURRENTKEY("Activity Type","No.","Item No.","Variant Code","Action Type");
        SETRANGE("Activity Type","Activity Type");
        SETRANGE("No.","No.");
        SETRANGE("Action Type");

        IF FIND('-') THEN
          REPEAT
            SETRANGE("Item No.","Item No.");
            SETRANGE("Variant Code","Variant Code");
            SETRANGE("Serial No.","Serial No.");
            SETRANGE("Lot No.","Lot No.");

            IF (WhseActivLine2."Action Type" = WhseActivLine2."Action Type"::Take) OR
               (WhseActivLine2.GETFILTER("Action Type") = '')
            THEN BEGIN
              SETRANGE("Action Type","Action Type"::Take);
              IF FIND('-') THEN
                REPEAT
                  QtyToPick := QtyToPick + "Qty. to Handle (Base)";
                UNTIL NEXT = 0;
            END;

            IF (WhseActivLine2."Action Type" = WhseActivLine2."Action Type"::Place) OR
               (WhseActivLine2.GETFILTER("Action Type") = '')
            THEN BEGIN
              SETRANGE("Action Type","Action Type"::Place);
              IF FIND('-') THEN
                REPEAT
                  QtyToPutAway := QtyToPutAway + "Qty. to Handle (Base)";
                UNTIL NEXT = 0;
            END;

            IF QtyToPick <> QtyToPutAway THEN
              EXIT(FALSE);

            SETRANGE("Action Type");
            FIND('+');
            SETRANGE("Item No.");
            SETRANGE("Variant Code");
            SETRANGE("Serial No.");
            SETRANGE("Lot No.");
            QtyToPick := 0;
            QtyToPutAway := 0;
          UNTIL NEXT = 0;
        END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE PrepareData@1();
    VAR
      WhseActivityLine@1000 : Record 5767;
      WhseActivityHeader@1001 : Record 5766;
      WhseActivityLine2@1002 : Record 5767;
      WhseActivityLine3@1003 : Record 5767;
      ToteLine@1005 : Record 14002901;
      RFGroupFilter@1006 : Text[30];
      TableNo@1007 : Integer;
      RecordId@1008 : RecordID;
      TextValue@1240030000 : Text[250];
    BEGIN
      XMLDOMMgmt.FindNode(RootNode,'Header/Input',ReturnedNode);

      EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'));
      CASE TableNo OF
        DATABASE::"Select Document":
          BEGIN
            TextValue := ReturnedNode.InnerText;
            WhseActivityHeader.RESET;
            WhseActivityHeader.SETFILTER(
              "No.",COPYSTR(TextValue,1,MAXSTRLEN(WhseActivityHeader."No.")));
            WhseActivityHeader.SETRANGE("Location Code",LocationFilter);
            WhseActivityHeader.FIND('-');

            RecRef.OPEN(DATABASE::"Warehouse Activity Header");
            RecRef.GETTABLE(WhseActivityHeader);
            RecordId := RecRef.RECORDID;
          END;
        ELSE BEGIN
          RecRef.OPEN(TableNo);
          EVALUATE(RecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'));
        END;
      END;
      IF RecRef.GET(RecordId) THEN BEGIN
        RecRef.SETTABLE(WhseActivityHeader);
        RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);

        SinglePlaceMovement :=
          CalculateSinglePlaceMovement(WhseActivityHeader.Type,WhseActivityHeader."No.");
        FilterWhseActivityLine(WhseActivityLine,WhseActivityHeader.Type);
        WhseActivityLine.SETRANGE("Activity Type",WhseActivityHeader.Type);
        WhseActivityLine.SETRANGE("No.",WhseActivityHeader."No.");

        IF RFEmployeeSetup."Reset Qty. Handled on Open" OR
           RFEmployeeSetup."Reset Qty in New Lines on Open"
        THEN BEGIN
          WhseActivityLine2.COPYFILTERS(WhseActivityLine);
          IF RFEmployeeSetup."Reset Qty in New Lines on Open" THEN
            WhseActivityLine2.SETRANGE("First Scan Date",0D);

          IF WhseActivityLine2.FIND('-') THEN
            REPEAT
              IF (WhseActivityLine2."Qty. to Handle" <> 0) OR
                 (WhseActivityLine2."Serial No." <> '') OR
                 (WhseActivityLine2."Lot No." <> '')
              THEN BEGIN
                WhseActivityLine3 := WhseActivityLine2;
                IF WhseActivityLine3."Qty. to Handle" <> 0 THEN
                  WhseActivityLine3.VALIDATE("Qty. to Handle",0);
                GetItemTrackingCode(WhseActivityLine3);
                IF (WhseActivityLine3."Serial No." <> '') AND NOT
                   ItemTrackingCode."SN Warehouse Tracking"
                THEN
                  WhseActivityLine3.VALIDATE("Serial No.",'');
                IF (WhseActivityLine3."Lot No." <> '') AND
                   NOT ItemTrackingCode."Lot Warehouse Tracking"
                THEN
                  WhseActivityLine3.VALIDATE("Lot No.",'');
                WhseActivityLine3.MODIFY;
              END;
            UNTIL WhseActivityLine2.NEXT = 0;
        END;

        IF NOT WhseActivityLine.FIND('-') THEN BEGIN
          ADCSNasStartup.SendError(Text012);
          EXIT;
        END;

        IF RFEmployeeSetup."Reset Qty. Handled on Open" THEN BEGIN
          ToteLine.RESET;
          ToteLine.SETRANGE("Activity Type",WhseActivityHeader.Type);
          ToteLine.SETRANGE("No.",WhseActivityHeader."No.");
          ToteLine.DELETEALL;
        END;

        IF ((WhseActivityHeader.Type = WhseActivityHeader.Type::Pick) OR
            (WhseActivityHeader.Type = WhseActivityHeader.Type::"Invt. Pick")) AND
            (WhseActivityLine."Tote No." = '') AND
           RFEmployeeSetup."Auto Create Tote No."
        THEN BEGIN
          ToteNo := '';
          IF RFEmployeeSetup."Keep Last Tote No." THEN BEGIN
            ToteLine.RESET;
            ToteLine.SETRANGE("Activity Type",WhseActivityHeader.Type);
            ToteLine.SETRANGE("No.",WhseActivityHeader."No.");
            IF ToteLine.FIND('+') THEN BEGIN
              REPEAT
                ToteLine.SETFILTER("Tote No.",'>%1',ToteLine."Tote No.");
              UNTIL NOT ToteLine.FIND('+');

              ToteNo := ToteLine."Tote No.";
            END;
          END;

        END;
        ADCSCommunication.SetExtraValue('ToteNo',ToteNo);

        ADCSCommunication.SetRFGroupFilter(GetRFGroupFilter(WhseActivityLine));

        RecRef.GETTABLE(WhseActivityLine);
        ADCSCommunication.SetRecRef(RecRef);
        ActiveInputField := 1;
        SendForm(ActiveInputField);
      END ELSE
        ERROR(Text007);
    END;

    LOCAL PROCEDURE SendForm@3(InputField@1000 : Integer);
    BEGIN
      // Prepare Miniform
      IF AlternativeText <> '' THEN
        ADCSCommunication.SetAlternativeText(AlternativeText);

      ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,InputField,Remark,LoginID);
      ADCSCommunication.GetReturnXML(DOMxmlin);
      ADCSNasStartup.SendXMLReply(DOMxmlin);
    END;

    PROCEDURE WhseActivityLineSetKey@102(VAR WhseActivityLine@1000 : Record 5767;Sorting@1001 : Integer);
    BEGIN
      CASE Sorting OF
        RFEmployeeSetup."Pick Sorting"::"Line No.":
          WhseActivityLine.SETCURRENTKEY("Activity Type","No.","Line No.");
        RFEmployeeSetup."Pick Sorting"::"Sorting Sequence No.":
          WhseActivityLine.SETCURRENTKEY("Activity Type","No.","Sorting Sequence No.");
        RFEmployeeSetup."Pick Sorting"::"Shelf No.":
          WhseActivityLine.SETCURRENTKEY("Activity Type","No.","Shelf No.");
        RFEmployeeSetup."Pick Sorting"::"Bin Code - Breakbulk No. - Action Type":
          WhseActivityLine.SETCURRENTKEY(
            "Activity Type","No.","Bin Code","Breakbulk No.","Action Type");
        RFEmployeeSetup."Pick Sorting"::"Bin Ranking - Breakbulk No. - Action Type":
          WhseActivityLine.SETCURRENTKEY(
            "Activity Type","No.","Bin Ranking","Breakbulk No.","Action Type");
        RFEmployeeSetup."Pick Sorting"::"Destination Type - Destination No. - Action Type - Bin Code":
          WhseActivityLine.SETCURRENTKEY(
            "Activity Type","No.","Destination Type","Destination No.","Action Type","Bin Code");
        RFEmployeeSetup."Pick Sorting"::"Action Type - Bin Code":
          WhseActivityLine.SETCURRENTKEY("Activity Type","No.","Action Type","Bin Code");
        RFEmployeeSetup."Pick Sorting"::"Item No. - Variant Code - Action Type - Bin Code":
          WhseActivityLine.SETCURRENTKEY(
            "Activity Type","No.","Item No.","Variant Code","Action Type","Bin Code");
        RFEmployeeSetup."Pick Sorting"::"Action Type - Bin Sorting":
          WhseActivityLine.SETCURRENTKEY(
            "Activity Type","No.","Action Type","Bin Sorting");
      END;
    END;

    PROCEDURE GetLocation@104(WhseActivityLine@1000 : Record 5767);
    BEGIN
      IF LocationRetrieved THEN
        EXIT;

      LocationRetrieved := TRUE;
      IF NOT Location.GET(WhseActivityLine."Location Code") THEN
        CLEAR(Location);
    END;

    PROCEDURE GetItemTrackingCode@101(WhseActivityLine@1000 : Record 5767);
    VAR
      Item@1001 : Record 27;
    BEGIN
      IF ItemTrackingCodeRetrieved THEN
        EXIT;

      WarehouseSetup.GET;

      ItemTrackingCodeRetrieved := TRUE;
      IF Item.GET(WhseActivityLine."Item No.") THEN
        IF Item."Item Tracking Code" <> '' THEN
          IF ItemTrackingCode.GET(Item."Item Tracking Code") THEN
            EXIT;

      CLEAR(ItemTrackingCode);
    END;

    PROCEDURE GetRFGroupFilter@103(WhseActivityLine@1000 : Record 5767) : Text[30];
    VAR
      RFGroupFilter@1001 : Text[30];
    BEGIN
      IF WhseActivityLine."Activity Type" IN
         [WhseActivityLine."Activity Type"::"Invt. Pick",
          WhseActivityLine."Activity Type"::"Invt. Put-away"]
      THEN BEGIN
        GetLocation(WhseActivityLine);
        GetItemTrackingCode(WhseActivityLine);
        IF Location."Bin Mandatory" THEN
          RFGroupFilter :=  '0|1'
        ELSE
          RFGroupFilter := '0|2';
      END ELSE
        RFGroupFilter := '0|1';

      GetRFSetup;
      GetItemTrackingCode(WhseActivityLine);
      IF NOT (ItemTrackingCode."SN Warehouse Tracking" OR
              (RFSetup."Warehouse Item Tracking" AND
               ItemTrackingMgt.RFSNWhseItemTracking2(
                 ItemTrackingCode,WhseActivityLine."Activity Type",WhseActivityLine."Source Type")))
      THEN
        RFGroupFilter := RFGroupFilter + '|3'
      ELSE
        RFGroupFilter := RFGroupFilter + '|4';
      IF ItemTrackingCode."Lot Warehouse Tracking" OR
         (RFSetup."Warehouse Item Tracking" AND
          ItemTrackingMgt.RFLNWhseItemTracking2(
            ItemTrackingCode,WhseActivityLine."Activity Type",WhseActivityLine."Source Type"))
      THEN
        IF WhseActivityLine."Lot No. Scanned" THEN
          RFGroupFilter := RFGroupFilter + '|7'
        ELSE
          RFGroupFilter := RFGroupFilter + '|5';

      IF SinglePlaceMovement THEN
        RFGroupFilter := RFGroupFilter + '|6';

      IF WhseActivityLine."Variant Code" <> '' THEN
        RFGroupFilter := RFGroupFilter + '|8';

      IF WhseActivityLine."Source Type" <> 5407 THEN BEGIN
        IF WhseActivityLine."Activity Type" IN
          [WhseActivityLine."Activity Type"::"Invt. Pick",
           WhseActivityLine."Activity Type"::Pick]
        THEN  BEGIN
          IF RFEmployeeSetup."Verify Tote by Scanning" THEN
            RFGroupFilter := RFGroupFilter + '|9'
          ELSE
            IF RFEmployeeSetup."Show Tote in Line" THEN
              RFGroupFilter := RFGroupFilter + '|10';
        END;
      END;

      EXIT(RFGroupFilter);
    END;

    PROCEDURE FilterWhseActivityLine@1240030003(VAR WhseActivityLine@1240030000 : Record 5767;ActivityType@1240030001 : Integer);
    BEGIN
      CASE ActivityType OF
        WhseActivityLine."Activity Type"::"Put-away":
          BEGIN
            WhseActivityLineSetKey(WhseActivityLine,RFEmployeeSetup."Put-away Sorting");

            IF RFEmployeeSetup."Scan Only Places on Put-aways" THEN BEGIN
              WhseActivityLine.SETRANGE("Action Type",WhseActivityLine."Action Type"::Place);
              IF RFEmployeeSetup."Show No Breakbulk Lines" THEN
                WhseActivityLine.SETRANGE("Breakbulk No.",0);
            END;
          END;
        WhseActivityLine."Activity Type"::Pick:
          BEGIN
            WhseActivityLineSetKey(WhseActivityLine,RFEmployeeSetup."Pick Sorting");

            IF RFEmployeeSetup."Scan Only Takes on Picks" THEN BEGIN
              WhseActivityLine.SETRANGE("Action Type",WhseActivityLine."Action Type"::Take);
              IF RFEmployeeSetup."Show No Breakbulk Lines" THEN
                WhseActivityLine.SETRANGE("Breakbulk No.",0);
            END;
          END;
        WhseActivityLine."Activity Type"::Movement:
          BEGIN
            WhseActivityLineSetKey(WhseActivityLine,RFEmployeeSetup."Movement Sorting");

            IF SinglePlaceMovement THEN BEGIN
              IF RFEmployeeSetup."No Place on Single Place Move" THEN BEGIN
                WhseActivityLine.SETRANGE("Action Type",WhseActivityLine."Action Type"::Take);
                IF RFEmployeeSetup."Show No Breakbulk Lines" THEN
                  WhseActivityLine.SETRANGE("Breakbulk No.",0);
              END;
            END;
          END;
        WhseActivityLine."Activity Type"::"Invt. Put-away":
          WhseActivityLineSetKey(WhseActivityLine,RFEmployeeSetup."Invt. Put-away Sorting");
        WhseActivityLine."Activity Type"::"Invt. Pick":
          WhseActivityLineSetKey(WhseActivityLine,RFEmployeeSetup."Invt. Pick Sorting");
          ELSE
          WhseActivityLine.SETCURRENTKEY("Activity Type","No.","Sorting Sequence No.");
      END;
    END;

    PROCEDURE CalculateSinglePlaceMovement@1240030001(ActivityType@1240030001 : Integer;ActivityNo@1240030002 : Code[20]) : Boolean;
    VAR
      WhseActivityLine@1240030000 : Record 5767;
    BEGIN
      IF ActivityType <> WhseActivityLine."Activity Type"::Movement THEN
        EXIT(FALSE);

      WhseActivityLine.RESET;
      WhseActivityLine.SETRANGE("Activity Type",ActivityType);
      WhseActivityLine.SETRANGE("No.",ActivityNo);
      WhseActivityLine.SETRANGE("Action Type",WhseActivityLine."Action Type"::Place);
      WhseActivityLine.SETRANGE("Breakbulk No.",0);
      IF WhseActivityLine.FIND('-') THEN BEGIN
        WhseActivityLine.SETFILTER("Bin Code",'<>%1',WhseActivityLine."Bin Code");
        EXIT(NOT WhseActivityLine.FIND('-'));
      END;

      EXIT(FALSE);
    END;

    PROCEDURE GetRFSetup@1240030004();
    BEGIN
      IF RFSetupRetrieved THEN
        EXIT;

      RFSetup.GET;
      RFSetupRetrieved := TRUE;
    END;

    PROCEDURE CreatePhysicalInventory@1240030007(WhseActivityLine@1240030000 : Record 5767) : Text[250];
    VAR
      BinContent@1240030001 : Record 7302;
      WhseJournalBatch@1240020000 : Record 7310;
      RFDynamicMgt@1240030002 : Codeunit 14002882;
      RemarkMessage@1240020001 : Text[250];
    BEGIN
      RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);

      BinContent.RESET;
      BinContent.SETRANGE("Location Code",WhseActivityLine."Location Code");
      BinContent.SETRANGE("Bin Code",WhseActivityLine."Bin Code");
      BinContent.SETRANGE("Item No.",WhseActivityLine."Item No.");

      RFDynamicMgt.CreateWhsePhysicalInventory(
        BinContent,RFEmployeeSetup,WhseJournalBatch,WhseActivityLine."Location Code",
        WhseActivityLine."Bin Code",WhseEmpId,RemarkMessage);

      EXIT(RemarkMessage);
    END;

    PROCEDURE GetMenuRFGroupFilter@1240030009(WhseActivityLine@1240030000 : Record 5767) : Text[30];
    BEGIN
      IF (WhseActivityLine."Activity Type" IN
          [WhseActivityLine."Activity Type"::Pick,WhseActivityLine."Activity Type"::Movement,
           WhseActivityLine."Activity Type"::"Invt. Pick"]) AND
         (WhseActivityLine."Action Type" IN
          [WhseActivityLine."Action Type"::" ",WhseActivityLine."Action Type"::Take])
      THEN BEGIN
        IF RFEmployeeSetup."Auto Create Tote No." THEN
          EXIT('0|1|2')
        ELSE
          EXIT('0|1')
      END ELSE
        EXIT('0');
    END;

    PROCEDURE SplitLine@1240020003(VAR WhseActivityLine@1240020000 : Record 5767);
    VAR
      WarehouseActivityLine2@1240020002 : Record 5767;
    BEGIN
      IF WhseActivityLine."Qty. to Handle" = 0 THEN
        Remark := Text001;

      IF (Remark = '') AND
         (WhseActivityLine."Qty. to Handle" = WhseActivityLine."Qty. Outstanding")
      THEN
        Remark := Text002;

      GetRFSetup;
      GetItemTrackingCode(WhseActivityLine);
      IF ItemTrackingCode."SN Warehouse Tracking" OR
         (RFSetup."Warehouse Item Tracking" AND
          ItemTrackingMgt.RFSNWhseItemTracking2(
            ItemTrackingCode,WhseActivityLine."Activity Type",
            WhseActivityLine."Source Type"))
      THEN
        Remark := Text016;

      IF Remark = '' THEN BEGIN
        RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
        IF RFEmployeeSetup."Keep Bin when Split Line" THEN
          WhseActivityLine.SefRFKeepBinCode(TRUE);

        WhseActivityLine.SplitLine(WhseActivityLine);

        WhseActivityLine.GET(
          WhseActivityLine."Activity Type",WhseActivityLine."No.",WhseActivityLine."Line No.");

        IF RFEmployeeSetup."Reset Qty. Handled on Open" OR
           RFEmployeeSetup."Reset Qty in New Lines on Open"
        THEN BEGIN
          WarehouseActivityLine2.RESET;
          WarehouseActivityLine2 := WhseActivityLine;
          WarehouseActivityLine2.NEXT;

          IF RFEmployeeSetup."Reset Qty. Handled on Open" OR
             (WarehouseActivityLine2."First Scan Date" = 0D)
          THEN BEGIN
            WarehouseActivityLine2.VALIDATE("Qty. to Handle",0);
            IF (WarehouseActivityLine2."Serial No." <> '') AND
               NOT ItemTrackingCode."SN Warehouse Tracking"
            THEN
              WarehouseActivityLine2.VALIDATE("Serial No.",'');
            IF (WarehouseActivityLine2."Lot No." <> '') AND
               NOT ItemTrackingCode."Lot Warehouse Tracking"
            THEN
              WarehouseActivityLine2.VALIDATE("Lot No.",'');
            WarehouseActivityLine2.MODIFY;
          END;
        END;

        IF RFEmployeeSetup."Show New Line when Split" THEN BEGIN
          WarehouseActivityLine2.RESET;
          WarehouseActivityLine2 := WhseActivityLine;
          WarehouseActivityLine2.NEXT;
          WhseActivityLine := WarehouseActivityLine2;
        END;
      END;
    END;

    PROCEDURE CreateToteLine@1240020002(WhseActivityLine@1240020000 : Record 5767) : Boolean;
    VAR
      ToteLine@1240020001 : Record 14002901;
      ToteLine2@1240020002 : Record 14002901;
      WhseActivityLine2@1240020003 : Record 5767;
    BEGIN
      ToteLine2.RESET;
      ToteLine2.SETRANGE("Tote No.",WhseActivityLine."Tote No.");
      IF ToteLine2.FINDFIRST THEN BEGIN
        IF NOT ((WhseActivityLine."No." = ToteLine2."No.") AND
                (WhseActivityLine."Activity Type" = WhseActivityLine."Activity Type"::Pick) AND
                (WhseActivityLine."Line No." = ToteLine2."Line No."))
        THEN BEGIN
          WhseActivityLine2.SETRANGE("Activity Type",WhseActivityLine2."Activity Type"::Pick);
          WhseActivityLine2.SETRANGE("Tote No.",WhseActivityLine."Tote No.");
          IF NOT WhseActivityLine2.FINDFIRST THEN BEGIN
            ToteLine2.DELETE;
          END ELSE BEGIN
            Remark := STRSUBSTNO(Text031,WhseActivityLine2."No.");
            EXIT(FALSE);
          END;
        END ELSE BEGIN
          ToteLine2.DELETE;
        END;
      END;

      ToteLine2.RESET;
      ToteLine2.LOCKTABLE(TRUE);
      ToteLine2.SETRANGE("Activity Type",ToteLine2."Activity Type"::Pick);
      ToteLine2.SETRANGE("No.",WhseActivityLine."No.");
      IF ToteLine.FINDLAST THEN ;

      ToteLine.INIT;
      ToteLine."Activity Type" := ToteLine."Activity Type"::Pick;
      ToteLine."No." := WhseActivityLine."No.";
      ToteLine."Line No." := WhseActivityLine."Line No.";
      ToteLine."Tote No." := WhseActivityLine."Tote No.";
      ToteLine."Item No." := WhseActivityLine."Item No.";
      ToteLine."Variant Code" := WhseActivityLine."Variant Code";
      ToteLine."Unit of Measure Code" := WhseActivityLine."Unit of Measure Code";
      ToteLine."Qty. per Unit of Measure" := WhseActivityLine."Qty. per Unit of Measure";
      ToteLine.Description := WhseActivityLine.Description;
      ToteLine.Quantity := WhseActivityLine.Quantity;
      ToteLine."Qty. (Base)" := WhseActivityLine."Qty. (Base)";
      ToteLine."Qty. Outstanding" := WhseActivityLine."Qty. Outstanding";
      ToteLine."Qty. Outstanding (Base)" := WhseActivityLine."Qty. Outstanding (Base)";
      ToteLine."Qty. to Handle" := WhseActivityLine."Qty. to Handle";
      ToteLine."Qty. to Handle (Base)" := WhseActivityLine."Qty. to Handle (Base)";
      ToteLine."Qty. Handled" := WhseActivityLine."Qty. Handled";
      ToteLine."Qty. Handled (Base)" := WhseActivityLine."Qty. Handled (Base)";
      ToteLine."Source Type" := WhseActivityLine."Source Type";
      ToteLine."Source Subtype" := WhseActivityLine."Source Subtype";
      ToteLine."Source No." := WhseActivityLine."Source No.";
      ToteLine."Source Line No." := WhseActivityLine."Source Line No.";
      ToteLine."Source Subline No." := WhseActivityLine."Source Subline No.";
      ToteLine."Source Document" := WhseActivityLine."Source Document";
      ToteLine."First Scan Date" := WhseActivityLine."First Scan Date";
      ToteLine."First Scan Time" := WhseActivityLine."First Scan Time";
      ToteLine."Last Scan Date"  := WhseActivityLine."Last Scan Date";
      ToteLine."Last Scan Time" := WhseActivityLine."Last Scan Time";
      ToteLine."Warehouse Employee Code" := WhseActivityLine."Warehouse Employee Code";
      IF ToteLine.INSERT THEN
        EXIT(TRUE);
    END;

    EVENT DOMxmlin@1240020014::NodeInserting@93(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020014::NodeInserted@94(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020014::NodeRemoving@95(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020014::NodeRemoved@96(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020014::NodeChanging@97(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020014::NodeChanged@98(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

