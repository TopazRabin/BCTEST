OBJECT Codeunit 14000577 Calculate Surplus
{
  OBJECT-PROPERTIES
  {
    Date=01/01/21;
    Time=12:00:00 PM;
    Version List=UBP3.03.02;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            ItemFilter := '';
            ByLocation('');
          END;

  }
  CODE
  {
    VAR
      InvMgtSetup@1240030001 : Record 14000551;
      Item@1240030022 : Record 27;
      ItemUOM@1240030020 : Record 5404;
      Location@1240030009 : Record 14;
      Location2@1240020001 : Record 14;
      LocInvPeriod@1240030055 : Record 14000553;
      AdvForSetup@1240030056 : Record 14002651;
      Forecast@1240030002 : Codeunit 14000567;
      CreateLocInvRollUp@1240030003 : Codeunit 14000574;
      InvMgt@1240030012 : Codeunit 14000553;
      UBP@1240030015 : Codeunit 14000564;
      DispWindow@1240030004 : Dialog;
      Complete@1240030017 : Boolean;
      First@1240030019 : Boolean;
      NetInvPos@1240030032 : Decimal;
      OverrideLTHDate@1240030016 : Date;
      ShowDialogue@1240030005 : Boolean;
      Text000@1240020015 : TextConst 'ENU=Do you wish to start the Surplus calculation for the selected locations?';
      Text001@1240030006 : TextConst 'ENU=Calculate Surplus';
      Text002@1240030007 : TextConst 'ENU=Location';
      Text003@1240030008 : TextConst 'ENU=Item';
      SurplusQty@1240030037 : Decimal;
      UBPLogEntryNo@1240030011 : Integer;
      Text005@1240030013 : TextConst 'ENU=Calculate Surplus';
      MaximumQty@1240030043 : Decimal;
      Counter@1240030038 : Integer;
      PercentCalc@1240030040 : Boolean;
      DaysCalc@1240030041 : Boolean;
      ExcessDate@1240030044 : Date;
      ExcessQty@1240030045 : Decimal;
      SurpCalcAddDays@1240030049 : Decimal;
      LTHDate@1240030054 : Date;
      StartingDate@1240030057 : Date;
      NetInventory@1240020003 : Decimal;
      MaxOverrideLTHDate@1240030058 : Date;
      PeriodCount@1240030059 : Integer;
      ProcessOption@1240020002 : 'Non Roll Up,Roll Up,Zero On Hand Inv.';
      IsSporadic@1240020004 : Boolean;
      ReqQty@1240020005 : Decimal;
      SurplusReqQty@1240020006 : Decimal;
      ExcessReqQty@1240020007 : Decimal;
      SurplusPct@1240020008 : Decimal;
      UpdateCount@1240020010 : Integer;
      Text006@1240020011 : TextConst 'ENU=Calculate Inventory Value';
      InvLessDueOut@1240020016 : Decimal;
      SetupRead@1240020014 : Boolean;
      GLSetup@1240020012 : Record 98;
      ItemFilter@1240020000 : Text;

    PROCEDURE CreateYesNo@1();
    VAR
      LocLocation@1240020000 : Record 14;
    BEGIN
      IF NOT CONFIRM(Text000,FALSE) THEN
        EXIT;

      LocLocation.SETRANGE("Enable Adv. Forecasting",TRUE);
      LocLocation.SETRANGE("Select Period End Processing",USERID);
      IF LocLocation.FINDSET THEN
        REPEAT
          ByLocation(LocLocation.Code);
        UNTIL LocLocation.NEXT = 0;
    END;

    PROCEDURE ByLocation@1240030002(CurrLocation@1240030000 : Code[10]);
    VAR
      SurplusInventoryValue@1240020000 : Record 14000584;
      SurplusEntry@1240020001 : Record 14002668;
      SugTranHdr@1240020002 : Record 14000592;
    BEGIN
      SurplusInventoryValue.RESET;
      SurplusInventoryValue.SETFILTER("Item No.", ItemFilter);
      SurplusInventoryValue.SETFILTER("Location Code", CurrLocation);
      IF NOT SurplusInventoryValue.ISEMPTY THEN BEGIN
        SurplusInventoryValue.DELETEALL;
        COMMIT;
      END;
      GetSetup;

      InvMgtSetup.GET;
      IF NOT InvMgtSetup."Calculate Surplus Inventory" THEN
        EXIT;

      // Deletion only to update the surplus quantities.  Not necessary since the source type was added.
      // Surplus Outstanding can go negative.
      //SugTranHdr.RESET;
      //SugTranHdr.SETFILTER("Transfer-to Code", CurrLocation);
      //SugTranHdr.DELETEALL(TRUE);

      // Surplus Entry includes scheduled transfer lines, these will be deleted and must be recreated
      SurplusEntry.RESET;
      SurplusEntry.SETFILTER("Item No.", ItemFilter);
      SurplusEntry.SETFILTER("Location Code", CurrLocation);
      SurplusEntry.DELETEALL;

      COMMIT;

      Location.RESET;
      IF CurrLocation <> '' THEN
        Location.SETRANGE(Code,CurrLocation);
      Location.SETRANGE("Enable Adv. Forecasting",TRUE);
      IF Location.FINDSET THEN BEGIN
        REPEAT
          IF (Location."Vend. Surplus Calc. Add Days" <> 0) OR
             (Location."Vend. Surplus Calc. Add Pct." <> 0) OR
             (Location."Loc. Surplus Calc. Add Days" <> 0) OR
             (Location."Loc. Surplus Calc. Add Pct." <> 0) THEN BEGIN
            IF ItemFilter = '' THEN
              InvMgt.CreateLogEntry(
                Location.Code,STRSUBSTNO(Text005,TODAY,0D),UBPLogEntryNo);
            MaxOverrideLTHDate := UBP.GetLocationMaxLTHDate(Location.Code);
            ByFilter(Location.Code,'','');
            IF ItemFilter = '' THEN
              InvMgt.CloseLogEntry(UBPLogEntryNo,'');
          END;
        UNTIL Location.NEXT = 0;
      END;

      UpdateInventoryValue(CurrLocation);
    END;

    PROCEDURE ByPUC@1240020010(VAR CurrProcUnit@1240020004 : Record 14000555);
    VAR
      SurplusInventoryValue@1240020000 : Record 14000584;
      SurplusEntry@1240020001 : Record 14002668;
    BEGIN
      SurplusInventoryValue.RESET;
      SurplusInventoryValue.SETFILTER("Item No.", CurrProcUnit."Item No.");
      SurplusInventoryValue.SETFILTER("Location Code", CurrProcUnit."Location Code");
      SurplusInventoryValue.SETFILTER("Variant Code", CurrProcUnit."Variant Code");
      IF NOT SurplusInventoryValue.ISEMPTY THEN BEGIN
        SurplusInventoryValue.DELETEALL;
      COMMIT;
      END;
      GetSetup;
      InvMgtSetup.GET;
      IF NOT InvMgtSetup."Calculate Surplus Inventory" THEN
        EXIT;
      // Surplus Entry includes scheduled transfer lines, these will be deleted and must be recreated
      SurplusEntry.RESET;
      SurplusEntry.SETFILTER("Item No.", CurrProcUnit."Item No.");
      SurplusEntry.SETFILTER("Location Code", CurrProcUnit."Location Code");
      SurplusEntry.SETFILTER("Variant Code", CurrProcUnit."Variant Code");
      SurplusEntry.SETRANGE("Source Type", SurplusEntry."Source Type"::"Surplus Calc.");
      SurplusEntry.DELETEALL;
      IF Location.GET(CurrProcUnit."Location Code") THEN BEGIN
        IF Location."Enable Adv. Forecasting" THEN BEGIN
          IF (Location."Vend. Surplus Calc. Add Days" <> 0) OR
             (Location."Vend. Surplus Calc. Add Pct." <> 0) OR
             (Location."Loc. Surplus Calc. Add Days" <> 0) OR
             (Location."Loc. Surplus Calc. Add Pct." <> 0) THEN BEGIN
            MaxOverrideLTHDate := UBP.GetLocationMaxLTHDate(Location.Code);
            ByFilter(Location.Code,CurrProcUnit."Item No.",CurrProcUnit."Variant Code");
          END;
        END;
      END;
    END;

    PROCEDURE ByFilter@1240030000(CurrLocation@1240030000 : Code[10];CurrItem@1240030001 : Code[50];CurrVariant@1240030002 : Code[10]);
    VAR
      SurplusInvValue@1240020000 : Record 14000584;
      ProcUnit@1240020002 : Record 14000555;
      SpokesExist@1240020003 : Boolean;
    BEGIN
      GetSetup;
      IF NOT InvMgtSetup."Calculate Surplus Inventory" THEN
        EXIT;

      IF (CurrItem = '') AND
         (GUIALLOWED) THEN
        ShowDialogue := TRUE;

      IF ShowDialogue THEN BEGIN
        DispWindow.OPEN(
          Text001 + '\  ' +
          PADSTR(Text002,10) + '#1########\  ' +
          PADSTR(Text003,10) + '#2##################');
        DispWindow.UPDATE(1,CurrLocation);
      END;

      IF CurrLocation <> '' THEN
        ProcUnit.SETRANGE("Location Code",CurrLocation);

      IF CurrItem <> '' THEN
        ProcUnit.SETRANGE("Item No.",CurrItem);

      IF CurrVariant <> '' THEN
        ProcUnit.SETRANGE("Variant Code",CurrVariant);

      IF (ItemFilter <> '') AND (CurrItem = '') THEN
        ProcUnit.SETFILTER("Item No.", ItemFilter);

      ProcUnit.SETCURRENTKEY("Location Code", "Usage Location Filter String");
      ProcUnit.SETFILTER("Location Filter", CurrLocation);
      ProcUnit.SETFILTER("Expire Date Filter",'>=%1',WORKDATE);
      ProcUnit.SETAUTOCALCFIELDS(Inventory, "Additional Stock Quantity");
      IF ProcUnit.FINDSET THEN BEGIN
        REPEAT
          ReqQty := 0;
          SurplusPct := 0;
          SurplusReqQty := 0;
          ExcessReqQty := 0;
          SurplusQty := 0;
          ExcessQty := 0;
          ExcessDate := 0D;
          IF (ProcUnit.Inventory > 0) THEN BEGIN
            IF ShowDialogue THEN BEGIN
              Counter := Counter + 1;
              DispWindow.UPDATE(2,ProcUnit."Item No.");
            END;

            IsSporadic := FALSE;

            IF InvMgtSetup."Roll Up Via Repl. Path" THEN
              ProcessOption := ProcessOption::"Roll Up"
            ELSE
              ProcessOption := ProcessOption::"Non Roll Up";

            SpokesExist := UBP.SpokesExist(ProcUnit);

            IF SpokesExist THEN
              ProcessOption := ProcessOption::"Roll Up"
            ELSE
              ProcessOption := ProcessOption::"Non Roll Up";

            CASE ProcessOption OF
              ProcessOption::"Roll Up": CalcRollup(ProcUnit);
              ProcessOption::"Non Roll Up": CalcNonRollup(ProcUnit);
            END;

          END ELSE BEGIN
            IF InvMgtSetup."Record Surplus for Zero Inv." THEN
            CalcZeroOnHand(ProcUnit,SurplusInvValue);
          END;
        UNTIL ProcUnit.NEXT = 0;
      END;

      IF ShowDialogue THEN
        DispWindow.CLOSE;
    END;

    LOCAL PROCEDURE UpdateSurplus@1240030004(VAR CurrProcUnit@1240020006 : Record 14000555;InsertTemp@1240020005 : Boolean);
    VAR
      LocProcUnit@1240020000 : Record 14000555;
      SurplusInvValue@1240020001 : Record 14000584;
    BEGIN
      IF ((ExcessQty <= 0) AND (SurplusQty <= 0)) THEN BEGIN
        IF NOT InvMgtSetup."Record when Zero Surplus" THEN
          EXIT;
      END;

      IF ExcessQty < 0 THEN
        ExcessQty := 0;
      IF SurplusQty < 0 THEN
        SurplusQty := 0;

      IF NOT SurplusInvValue.GET(CurrProcUnit."Item No.", CurrProcUnit."Location Code", CurrProcUnit."Variant Code") THEN BEGIN
        SurplusInvValue.INIT;
        SurplusInvValue."Location Code" := CurrProcUnit."Location Code";
        SurplusInvValue."Item No." := CurrProcUnit."Item No.";
        SurplusInvValue."Variant Code" := CurrProcUnit."Variant Code";
        SurplusInvValue.INSERT(TRUE);
      END ELSE
        SurplusInvValue.INIT;

      LocProcUnit.GET(SurplusInvValue."Location Code",SurplusInvValue."Item No.",SurplusInvValue."Variant Code");
      SurplusInvValue."Nonstock Item" := LocProcUnit."Nonstock Unit";
      SurplusInvValue."Surplus Available" := FALSE;
      SurplusInvValue."Qty. per Unit of Measure" := 1;
      SurplusInvValue."Unit of Measure Code" := LocProcUnit."Purchase Unit of Measure";
      IF LocProcUnit."Purchase Unit of Measure" <> '' THEN BEGIN
        ItemUOM.GET(LocProcUnit."Item No.",LocProcUnit."Purchase Unit of Measure");
        SurplusInvValue."Qty. per Unit of Measure" := ItemUOM."Qty. per Unit of Measure";
      END;
      Item.GET(SurplusInvValue."Item No.");
      IF SurplusInvValue."Unit of Measure Code" = '' THEN BEGIN
        SurplusInvValue."Unit of Measure Code" := Item."Base Unit of Measure";
      END;
      SurplusInvValue."Surplus Quantity (Base)" := SurplusQty;
      SurplusInvValue."Surplus Quantity" :=
        ROUND(SurplusInvValue."Surplus Quantity (Base)" / SurplusInvValue."Qty. per Unit of Measure",0.00001);

      SurplusInvValue."Unit Cost" := 0;
      SurplusInvValue."Unit Cost" := UBP.GetUnitCost(SurplusInvValue."Location Code", SurplusInvValue."Item No.", SurplusInvValue."Variant Code");
      IF SurplusInvValue."Unit Cost" < 0 THEN
        SurplusInvValue."Unit Cost" := 0;

      SurplusInvValue."Unit Cost" := ROUND(SurplusInvValue."Unit Cost", GLSetup."Unit-Amount Rounding Precision");
      SurplusInvValue."Surplus Amount" := SurplusInvValue."Surplus Quantity (Base)" * SurplusInvValue."Unit Cost";

      SurplusInvValue."Surplus Date" := OverrideLTHDate;

      SurplusInvValue."Lead Time Horizon Date" := LTHDate;

      LocProcUnit.SETRANGE("Location Filter",  SurplusInvValue."Location Code");
      LocProcUnit.CALCFIELDS(Inventory);
      SurplusInvValue."On Hand Qty. (Base)" := LocProcUnit.Inventory;  // To-Do:  Shouldn't be necessary with the redesign
      IF SurplusInvValue."On Hand Qty. (Base)" < 0 THEN
        SurplusInvValue."On Hand Qty. (Base)" := 0;
      SurplusInvValue."On Hand Amount" := SurplusInvValue."On Hand Qty. (Base)" * SurplusInvValue."Unit Cost";

        SurplusInvValue."Excess Quantity (Base)" := ExcessQty;
        SurplusInvValue."Excess Quantity" :=
          ROUND(ExcessQty / SurplusInvValue."Qty. per Unit of Measure", 0.00001);
        SurplusInvValue."Excess Amount" := ExcessQty * SurplusInvValue."Unit Cost";
        SurplusInvValue."Excess Date" := ExcessDate;

        SurplusInvValue."Good Qty. (Base)" :=
        SurplusInvValue."On Hand Qty. (Base)" - (SurplusInvValue."Surplus Quantity (Base)" + SurplusInvValue."Excess Quantity (Base)");
        IF SurplusInvValue."Good Qty. (Base)" < 0 THEN
          SurplusInvValue."Good Qty. (Base)" := 0;
        SurplusInvValue."Good Amount" := SurplusInvValue."Good Qty. (Base)" * SurplusInvValue."Unit Cost";


      IF (SurplusInvValue."Surplus Quantity (Base)" > 0 ) OR
         (SurplusInvValue."Excess Quantity (Base)" > 0)
      THEN
        SurplusInvValue."Surplus Available" := TRUE
      ELSE
        SurplusInvValue."Surplus Available" := FALSE;

      SurplusInvValue."Quantity Surplus Threshold" := SurplusReqQty;
      SurplusInvValue."Quantity Excess Threshold" := ExcessReqQty;

      IF LocProcUnit."Item Class Ranking" <> 0 THEN
        SurplusInvValue."Item Class Ranking" := LocProcUnit."Item Class Ranking";
      IF LocProcUnit."Ranking Code" <> '' THEN
        SurplusInvValue."Ranking Code" := LocProcUnit."Ranking Code";

      SurplusInvValue."Replenishment Source Type" := LocProcUnit."Replenishment Source Type";
      SurplusInvValue."Replenishment Source Code" := LocProcUnit."Replenishment Source Code";
      SurplusInvValue."Item Category Code" := Item."Item Category Code";

      SurplusInvValue."Date Updated" := TODAY;
      SurplusInvValue."Time Updated" := TIME;
      SurplusInvValue."Surplus Counter" := SurplusInvValue."Surplus Counter" + 1;

      // Remove Pending Transfers on Suggested Orders
      SurplusInvValue."Quantity To Transfer" := 0;
      SurplusInvValue."Quantity Transferred" :=  0;
      SurplusInvValue."Transfer To Location Code" := '';
      SurplusInvValue."Suggested Order No." := '';
      SurplusInvValue."Buy-from Vendor No." := '';
      SurplusInvValue."Suggested Order Line No." := 0;
      SurplusInvValue."First Stocked Date" := LocProcUnit."First Stocked Date";
      SurplusInvValue.MODIFY(FALSE);


      // Update Surplus - Surplus Entries
      // filter on the surplus entries that do not have a to location and delete
      // then update the total quantity
      // must flag for an error alert if the surplus quantity without the to location is no longer greater than the sum of quantity of the to locations
      // no surplus entry is found run a check to compare the surplus entry and the to-location entries for the same PUC

      IF (SurplusInvValue."Surplus Quantity (Base)" + SurplusInvValue."Excess Quantity (Base)") > 0 THEN
        UpdateSurplusQty('', 0, '', SurplusInvValue."Location Code", SurplusInvValue."Item No.", SurplusInvValue."Variant Code",
          SurplusInvValue."Surplus Quantity (Base)" + SurplusInvValue."Excess Quantity (Base)");

      UpdateCount := UpdateCount + 1;
      IF (UpdateCount MOD 5000) = 0 THEN
        COMMIT;
    END;

    PROCEDURE CheckSporadicQty@1240030001(CurrProcUnit@1240030000 : Record 14000555;VAR CurrSporadic@1240020000 : Boolean) SporadicQuantity : Decimal;
    VAR
      LocForcAdj@1240030004 : Record 14002707;
      LocForcEntry@1240030003 : Record 14002603;
      LocItemUsage@1240030002 : Record 14000557;
      LocLocationInvPeriod@1240030001 : Record 14000553;
    BEGIN
      CurrSporadic := FALSE;
      SporadicQuantity := 0;

      LocLocationInvPeriod.SETRANGE("Location Code",CurrProcUnit."Location Code");
      LocLocationInvPeriod.SETRANGE("Period End Closed",TRUE);
      IF NOT LocLocationInvPeriod.FINDLAST THEN
        EXIT(SporadicQuantity);

      LocItemUsage.RESET;
      LocItemUsage.SETCURRENTKEY("Location Code","Item No.","Variant Code","Starting Date","Ending Date");
      LocItemUsage.SETRANGE("Location Code",CurrProcUnit."Location Code");
      LocItemUsage.SETRANGE("Item No.",CurrProcUnit."Item No.");
      LocItemUsage.SETRANGE("Variant Code",CurrProcUnit."Variant Code");
      LocItemUsage.SETFILTER("Starting Date",'%1',LocLocationInvPeriod."Starting Date");
      IF NOT LocItemUsage.FINDFIRST THEN
        EXIT(SporadicQuantity);

      IF LocItemUsage.Status = LocItemUsage.Status::Reoccuring THEN
        EXIT(SporadicQuantity);

      IF Forecast.ForecastAdjustExists(CurrProcUnit, LocLocationInvPeriod."Starting Date") THEN
        EXIT(SporadicQuantity);

      //IF Forecast.CustForecastExists(CurrProcUnit, LocLocationInvPeriod."Starting Date") THEN
      //  EXIT(SporadicQuantity);

      IF (CurrProcUnit."Frozen Usage per Day" <> 0) AND
         (CurrProcUnit."Frozen Usage Expiration Date" > WORKDATE) THEN
         EXIT(SporadicQuantity);

      SporadicQuantity := LocItemUsage."Sporadic Target Stock Level";
      CurrSporadic := TRUE;
      EXIT(SporadicQuantity);
    END;

    PROCEDURE GetSupplyQty@1240030003(CurrLocationCode@1240030000 : Code[10];CurrItemNo@1240030002 : Code[50];CurrVariantCode@1240030003 : Code[10];OverrideLTHDate@1240030001 : Date) SupplyQty : Decimal;
    VAR
      LocProcUnit@1240030004 : Record 14000555;
    BEGIN
      SupplyQty := 0;
      LocProcUnit.GET(CurrLocationCode,CurrItemNo,CurrVariantCode);
      LocProcUnit.SETFILTER("Location Filter",LocProcUnit."Location Code");
      IF OverrideLTHDate <> 0D THEN
        LocProcUnit.SETFILTER("Date Filter",'..%1',OverrideLTHDate);
      LocProcUnit.SETFILTER("Prod. Order Status Filter", UBP.GetProductionStatusFilter);
      LocProcUnit.CALCFIELDS("Qty. on Purchase Order","Qty. on Transfer In", "Qty. on Prod. Order","Qty. on Assy. Order");
      SupplyQty := LocProcUnit."Qty. on Purchase Order" + LocProcUnit."Qty. on Transfer In" +
        LocProcUnit."Qty. on Prod. Order" + LocProcUnit."Qty. on Assy. Order";
      EXIT(SupplyQty);
    END;

    PROCEDURE GetExcessDate@1240030005(CurrProcUnit@1240030000 : Record 14000555;CurrLTHDate@1240030004 : Date) ExcessCalcDate : Date;
    VAR
      InvPostGroup@1240030001 : Record 94;
      ItemCategory@1240030002 : Record 5722;
      ExcessDays@1240030003 : Integer;
    BEGIN
      ExcessDays := InvMgtSetup."Default Excess Calc. Days";
      IF CurrProcUnit."Item No." <> Item."No." THEN
        Item.GET(CurrProcUnit."Item No.");
      CASE InvMgtSetup."Excess Definition" OF
        DATABASE::"Inventory Posting Group":
          BEGIN
            IF Item."Inventory Posting Group" <> '' THEN
              IF InvPostGroup.Code <> Item."Inventory Posting Group" THEN
                IF InvPostGroup.GET(Item."Inventory Posting Group") THEN
                  IF InvPostGroup."Excess Calc. Days" <> 0 THEN
                    ExcessDays := InvPostGroup."Excess Calc. Days"
                  ELSE BEGIN
                    ExcessDays := CurrLTHDate - WORKDATE;
                    ExcessDays :=
                      ExcessDays + ROUND(ExcessDays * InvPostGroup."Excess Calc. Percent",1.0);
                  END;
          END;
        DATABASE::"Item Category":
          BEGIN
            IF Item."Item Category Code" <> '' THEN
              IF ItemCategory.Code <> Item."Item Category Code" THEN
                IF ItemCategory.GET(Item."Item Category Code") THEN
                  IF ItemCategory."Excess Calc. Days" <> 0 THEN
                    ExcessDays := ItemCategory."Excess Calc. Days"
                  ELSE BEGIN
                    ExcessDays := CurrLTHDate - WORKDATE;
                    ExcessDays :=
                      ExcessDays + ROUND(ExcessDays * ItemCategory."Excess Calc. Percent",1.0);
                  END;
          END;
      END;
      CASE InvMgtSetup."Excess Calc. Method" OF
        InvMgtSetup."Excess Calc. Method"::"Workdate + Days":
            ExcessCalcDate := WORKDATE + ExcessDays;
        InvMgtSetup."Excess Calc. Method"::"LTH Date + Days":
            ExcessCalcDate := CurrLTHDate + ExcessDays;
      END;
      IF ExcessCalcDate = 0D THEN
        ExcessCalcDate := WORKDATE;
      EXIT(ExcessCalcDate);
    END;

    PROCEDURE GetExcessPct@1240020002(CurrProcUnit@1240020000 : Record 14000555) ExcessPct : Decimal;
    VAR
      InvPostGroup@1240020002 : Record 94;
      ItemCategory@1240020001 : Record 5722;
    BEGIN
      ExcessPct := InvMgtSetup."Default Excess Calc. Percent";
      IF CurrProcUnit."Item No." <> Item."No." THEN
        Item.GET(CurrProcUnit."Item No.");
      CASE InvMgtSetup."Excess Definition" OF
        DATABASE::"Inventory Posting Group":
          BEGIN
            IF Item."Inventory Posting Group" <> '' THEN
              IF InvPostGroup.Code <> Item."Inventory Posting Group" THEN
                IF InvPostGroup.GET(Item."Inventory Posting Group") THEN
                  IF InvPostGroup."Excess Calc. Percent" <> 0 THEN
                    ExcessPct := InvPostGroup."Excess Calc. Percent";
          END;
        DATABASE::"Item Category":
          BEGIN
            IF Item."Item Category Code" <> '' THEN
              IF ItemCategory.Code <> Item."Item Category Code" THEN
                IF ItemCategory.GET(Item."Item Category Code") THEN
                  IF ItemCategory."Excess Calc. Percent" <> 0 THEN
                    ExcessPct := ItemCategory."Excess Calc. Percent";
          END;
      END;
      EXIT(ExcessPct);
    END;

    PROCEDURE UpdateSurplusQty@1240030006(CurrToLocation@1240020000 : Code[10];CurrSourceType@1240020005 : 'Surplus Calc.,Sug. Order,Sug. Inv. Repl.,Sug. Inv. Bal.,Tran. Order';CurrSourceDoc@1240020004 : Code[20];CurrLocation@1240030000 : Code[10];CurrItemNo@1240030001 : Code[50];CurrVariantCode@1240030002 : Code[10];CurrNewBaseQty@1240030005 : Decimal);
    VAR
      SurplusEntry@1240020002 : Record 14002668;
      SurpusInvValue@1240020001 : Record 14000584;
      CurrQty@1240020003 : Decimal;
    BEGIN
      // this code gets updated from many areas of the system when users are scheduling transfers
      // source should check if a surplus inventory value record exists already
      IF CurrSourceType <> CurrSourceType::"Surplus Calc." THEN
        CurrNewBaseQty := -CurrNewBaseQty;

      // just update quantities or insert do not keep a running net change anymore - 2.97
      SurplusEntry.LOCKTABLE(TRUE, FALSE);
      SurplusEntry.SETRANGE("Location Code", CurrLocation);
      SurplusEntry.SETRANGE("Item No.", CurrItemNo);
      SurplusEntry.SETRANGE("Variant Code", CurrVariantCode);
      SurplusEntry.SETRANGE("Source Type", CurrSourceType);
      SurplusEntry.SETRANGE("Source No.", CurrSourceDoc);
      SurplusEntry.SETRANGE("Transfer-to Code", CurrToLocation);
      IF SurplusEntry.FINDFIRST THEN BEGIN
        IF SurplusEntry.Quantity <> CurrNewBaseQty THEN BEGIN
          SurplusEntry.Quantity := CurrNewBaseQty;
          SurplusEntry.MODIFY(FALSE);
        END;
      END ELSE BEGIN
        IF CurrNewBaseQty <> 0 THEN BEGIN
          SurplusEntry.RESET;
          IF SurplusEntry.FINDLAST THEN
            SurplusEntry."Entry No." := SurplusEntry."Entry No." + 1
          ELSE
            SurplusEntry."Entry No." := 1;
          SurplusEntry.INIT;
          SurplusEntry."Location Code" := CurrLocation;
          SurplusEntry."Item No." := CurrItemNo;
          SurplusEntry."Variant Code" := CurrVariantCode;
          SurplusEntry."Source Type" := CurrSourceType;
          SurplusEntry."Source No." := CurrSourceDoc;
          SurplusEntry."Transfer-to Code" := CurrToLocation;
          SurplusEntry.Quantity := CurrNewBaseQty;
          SurplusEntry.INSERT(TRUE);
        END;
      END;
    END;

    PROCEDURE UpdateInventoryValue@1240020001(CurrLocation@1240020000 : Code[10]);
    VAR
      InventoryValue@1240020002 : Record 14097463;
      SurplusInvValue@1240020001 : Record 14000584;
      SurplusInvValueByLocQuery@1240020003 : Query 14000551;
      IVEntryNo@1240020004 : Integer;
    BEGIN
      IF GUIALLOWED THEN
        DispWindow.OPEN(
          Text006 + '\' +
          PADSTR(Text002,12) + '#1########\' +
          PADSTR(Text003,12) + '#2##############################################');

      InventoryValue.SETFILTER("Location Code", CurrLocation);
      InventoryValue.SETRANGE("Calculated Date",WORKDATE);
      IF NOT InventoryValue.ISEMPTY THEN
        InventoryValue.DELETEALL;

      SurplusInvValue.RESET;
      SurplusInvValue.SETCURRENTKEY("Location Code","Item No.");
      SurplusInvValue.SETFILTER("Location Code", CurrLocation);
      IF NOT SurplusInvValue.ISEMPTY THEN BEGIN
        InvMgt.CreateLogEntry(CurrLocation,Text006,UBPLogEntryNo);
        COMMIT;
      END ELSE BEGIN
        IF GUIALLOWED THEN
          DispWindow.CLOSE;
        EXIT;
      END;

      InventoryValue.RESET;
      IVEntryNo := 0;
      IF InventoryValue.FINDLAST THEN
        IVEntryNo := InventoryValue."Entry No.";

      CLEAR(SurplusInvValueByLocQuery);
      IF CurrLocation <> '' THEN
        SurplusInvValueByLocQuery.SETFILTER(Location_Code, CurrLocation);
      IF SurplusInvValueByLocQuery.OPEN THEN BEGIN
        WHILE SurplusInvValueByLocQuery.READ DO BEGIN
          InventoryValue.INIT;
          IVEntryNo := IVEntryNo + 1;
          InventoryValue."Entry No." := IVEntryNo;
          InventoryValue."Location Code" := SurplusInvValueByLocQuery.Location_Code;
          InventoryValue."Calculated Date" := WORKDATE;
          InventoryValue."Total Cost" := SurplusInvValueByLocQuery.Sum_On_Hand_Amount;
          InventoryValue."Good Cost" := SurplusInvValueByLocQuery.Sum_Good_Amount;
          InventoryValue."Surplus Cost" := SurplusInvValueByLocQuery.Sum_Surplus_Amount;
          InventoryValue."Excess Cost" := SurplusInvValueByLocQuery.Sum_Excess_Amount;
          InventoryValue.INSERT(TRUE);
        END;
      END;

      InvMgt.CloseLogEntry(UBPLogEntryNo,'');

      IF GUIALLOWED THEN
        DispWindow.CLOSE;
    END;

    LOCAL PROCEDURE GetSetup@1240020004();
    BEGIN
      IF NOT SetupRead THEN BEGIN
        SetupRead := TRUE;
        InvMgtSetup.GET;
        AdvForSetup.GET;
        GLSetup.GET;
      END;
    END;

    LOCAL PROCEDURE CalcZeroOnHand@1240020009(VAR ProcUnit@1240020000 : Record 14000555;VAR SurplusInvValue@1240020002 : Record 14000584);
    BEGIN
      SurplusInvValue.SETRANGE("Item No.",ProcUnit."Item No.");
      SurplusInvValue.SETRANGE("Location Code",ProcUnit."Location Code");
      SurplusInvValue.SETRANGE("Variant Code",ProcUnit."Variant Code");
      IF SurplusInvValue.FINDFIRST THEN BEGIN
        SurplusInvValue.INIT;
        SurplusInvValue."Location Code" := ProcUnit."Location Code";
        SurplusInvValue."Item No." := ProcUnit."Item No.";
        SurplusInvValue."Variant Code" := ProcUnit."Variant Code";
        SurplusInvValue."Date Updated" := TODAY;
        SurplusInvValue."Time Updated" := TIME;
        SurplusInvValue.MODIFY(TRUE);
      END ELSE BEGIN
        SurplusInvValue.INIT;
        SurplusInvValue."Location Code" := ProcUnit."Location Code";
        SurplusInvValue."Item No." := ProcUnit."Item No.";
        SurplusInvValue."Variant Code" := ProcUnit."Variant Code";
        SurplusInvValue."Date Updated" := TODAY;
        SurplusInvValue."Time Updated" := TIME;
        SurplusInvValue.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CalcNonRollup@1240020005(VAR ProcUnit@1240020000 : Record 14000555);
    VAR
      ProcUnit3@1240020001 : Record 14000555;
    BEGIN
      // stand alone or spoke locations
      OverrideLTHDate := UBP.GetLeadTimeHoriz(ProcUnit);
      LTHDate := OverrideLTHDate;

      ReqQty := 0;
      SurplusPct := 0;
      SurplusReqQty := 0;
      ExcessReqQty := 0;
      SurplusQty := 0;
      ExcessQty := 0;
      ExcessDate := 0D;
      CASE ProcUnit."Replenishment Source Type" OF
         ProcUnit."Replenishment Source Type"::Vendor,
         ProcUnit."Replenishment Source Type"::Production,
         ProcUnit."Replenishment Source Type"::Assembly:
         BEGIN
           SurplusPct := (Location."Vend. Surplus Calc. Add Pct." / 100);
           SurpCalcAddDays := Location."Vend. Surplus Calc. Add Days";
           OverrideLTHDate := OverrideLTHDate + SurpCalcAddDays;
         END;
         ProcUnit."Replenishment Source Type"::Location:
         BEGIN
           SurplusPct := (Location."Loc. Surplus Calc. Add Pct." / 100);
           SurpCalcAddDays := Location."Loc. Surplus Calc. Add Days";
           OverrideLTHDate := OverrideLTHDate + SurpCalcAddDays;
         END;
      END;

      IF OverrideLTHDate > MaxOverrideLTHDate THEN
        OverrideLTHDate := MaxOverrideLTHDate;

      // get excess date before override lth changes
      IF InvMgtSetup."Calculate Excess Inventory" THEN BEGIN
        ExcessDate := GetExcessDate(ProcUnit, OverrideLTHDate);
        IF ExcessDate > MaxOverrideLTHDate THEN
          ExcessDate := MaxOverrideLTHDate;
      END;

      ReqQty := CheckSporadicQty(ProcUnit,IsSporadic);
      IF (IsSporadic) OR
          ((ProcUnit."Replenishment Model" = ProcUnit."Replenishment Model"::"Min/Max") AND
          (ProcUnit."Maximum Inventory" <> 0))
      THEN BEGIN
        // fixed qty.  min/max, sporadic
        IF (ProcUnit."Replenishment Model" = ProcUnit."Replenishment Model"::"Min/Max") AND
            (ProcUnit."Maximum Inventory" <> 0)
        THEN
          ReqQty := ProcUnit."Maximum Inventory";
        SurplusReqQty := ROUND(ReqQty + (ReqQty * SurplusPct),1.0);  // this could be a minimum as well as fixed
      END;

      // time series
      CLEAR(Forecast);
      Forecast.SetForecastOnlyReqPeriods;
      Forecast.SetUseSurplusFactor(TRUE);
      NetInvPos := Forecast.CalcNetNeed(ProcUnit, '', OverrideLTHDate,FALSE);
      IF NetInvPos > 0 THEN BEGIN
        SurplusQty := NetInvPos;
        SurplusQty := SurplusQty - GetSupplyQty(
          ProcUnit."Location Code",ProcUnit."Item No.",ProcUnit."Variant Code",OverrideLTHDate);
        IF SurplusQty < 0 THEN
          SurplusQty := 0;
      END;

      IF (SurplusQty > 0) THEN BEGIN
        IF InvMgtSetup."Calculate Excess Inventory" THEN BEGIN
          IF (ReqQty > 0) THEN
            ExcessReqQty := ROUND(SurplusReqQty + (ReqQty * (GetExcessPct(ProcUnit) / 100)),1.0);

          CLEAR(Forecast);
          Forecast.SetForecastOnlyReqPeriods;
          Forecast.SetUseExcessFactor(TRUE);
          NetInvPos := Forecast.CalcNetNeed(ProcUnit, '', ExcessDate,FALSE);
          IF NetInvPos > 0 THEN BEGIN
            ExcessQty := NetInvPos;
            ExcessQty := ExcessQty - GetSupplyQty(ProcUnit."Location Code",ProcUnit."Item No.",ProcUnit."Variant Code",ExcessDate);
            IF ExcessQty < 0 THEN
              ExcessQty := 0;
            IF ExcessQty <= SurplusQty THEN
              SurplusQty := SurplusQty - ExcessQty
            ELSE
              ExcessQty := 0;
          END;
        END;
      END;

      UpdateSurplus(ProcUnit,FALSE);
    END;

    LOCAL PROCEDURE CalcRollup@1240020011(VAR ProcUnit@1240020000 : Record 14000555);
    VAR
      LocInvRollUp@1240020001 : TEMPORARY Record 14000583;
    BEGIN
      OverrideLTHDate := UBP.GetLeadTimeHoriz(ProcUnit);
      LTHDate := OverrideLTHDate;
      ReqQty := 0;
      SurplusPct := 0;
      SurplusReqQty := 0;
      ExcessReqQty := 0;
      SurplusQty := 0;
      ExcessQty := 0;
      ExcessDate := 0D;

      CASE ProcUnit."Replenishment Source Type" OF
         ProcUnit."Replenishment Source Type"::Vendor,
         ProcUnit."Replenishment Source Type"::Production,
         ProcUnit."Replenishment Source Type"::Assembly:
         BEGIN
           SurplusPct := (Location."Vend. Surplus Calc. Add Pct." / 100);
           SurpCalcAddDays := Location."Vend. Surplus Calc. Add Days";
           OverrideLTHDate := OverrideLTHDate + SurpCalcAddDays;
         END;
         ProcUnit."Replenishment Source Type"::Location:
         BEGIN
           SurplusPct := (Location."Loc. Surplus Calc. Add Pct." / 100);
           SurpCalcAddDays := Location."Loc. Surplus Calc. Add Days";
           OverrideLTHDate := OverrideLTHDate + SurpCalcAddDays;
         END;
      END;

      IF OverrideLTHDate > MaxOverrideLTHDate THEN
        OverrideLTHDate := MaxOverrideLTHDate;

      // calc excess dates
      IF InvMgtSetup."Calculate Excess Inventory" THEN BEGIN
        ExcessDate := GetExcessDate(ProcUnit, OverrideLTHDate);
        IF ExcessDate > MaxOverrideLTHDate THEN
          ExcessDate := MaxOverrideLTHDate;
      END;

      ReqQty := CheckSporadicQty(ProcUnit,IsSporadic);
      IF (IsSporadic) OR
          ((ProcUnit."Replenishment Model" = ProcUnit."Replenishment Model"::"Min/Max") AND
          (ProcUnit."Maximum Inventory" <> 0))
      THEN BEGIN
        // fixed qty.  min/max, sporadic
        IF (ProcUnit."Replenishment Model" = ProcUnit."Replenishment Model"::"Min/Max") AND
            (ProcUnit."Maximum Inventory" <> 0)
        THEN
          ReqQty := ProcUnit."Maximum Inventory";
        SurplusReqQty := ROUND(ReqQty + (ReqQty * SurplusPct),1.0);  // this could be a minimum as well as fixed
      END;

      // calc rollup for surplus date
      LocInvRollUp.RESET;
      LocInvRollUp.DELETEALL;
      CLEAR(CreateLocInvRollUp);
      CreateLocInvRollUp.SetUseSurplusFactor(TRUE);
      CreateLocInvRollUp.CalcRollUp(ProcUnit,FALSE,0,OverrideLTHDate);
      First := TRUE;
      CreateLocInvRollUp.GetNextRollUpLine(LocInvRollUp,First);
      IF (LocInvRollUp."Individual Location Code" <> ProcUnit."Location Code") THEN BEGIN
        REPEAT
          CreateLocInvRollUp.GetNextRollUpLine(LocInvRollUp,First);
          First := FALSE;
        UNTIL LocInvRollUp."Individual Location Code" = ProcUnit."Location Code";
      END;

      // calc surplus
      SurplusQty := ROUND(LocInvRollUp.Surplus,1.0);
      IF SurplusQty > 0 THEN BEGIN
        SurplusQty := SurplusQty - LocInvRollUp."Inbound Supply Quantity";
        SurplusQty := SurplusQty - LocInvRollUp."Transfer In Qty.";
        IF SurplusQty < 0 THEN
          SurplusQty := 0;
      END;

      // calc rollup for excess date

      IF (SurplusQty > 0) THEN BEGIN
        IF InvMgtSetup."Calculate Excess Inventory" THEN BEGIN
          ExcessReqQty := ROUND(SurplusReqQty + (ReqQty * (GetExcessPct(ProcUnit) / 100)),1.0);

          LocInvRollUp.RESET;
          LocInvRollUp.DELETEALL;
          CLEAR(CreateLocInvRollUp);
          CreateLocInvRollUp.SetUseExcessFactor(TRUE);
          CreateLocInvRollUp.CalcRollUp(ProcUnit,FALSE,0, ExcessDate);
          First := TRUE;
          CreateLocInvRollUp.GetNextRollUpLine(LocInvRollUp,First);
          IF (LocInvRollUp."Individual Location Code" <> ProcUnit."Location Code") THEN BEGIN
            REPEAT
              CreateLocInvRollUp.GetNextRollUpLine(LocInvRollUp,First);
              First := FALSE;
            UNTIL LocInvRollUp."Individual Location Code" = ProcUnit."Location Code";
          END;

          IF ROUND(LocInvRollUp.Surplus,1.0) > 0 THEN BEGIN
            ExcessQty := ROUND(LocInvRollUp.Surplus, 1.0);
            ExcessQty := ExcessQty - LocInvRollUp."Inbound Supply Quantity";
            ExcessQty := ExcessQty - LocInvRollUp."Transfer In Qty.";
            ExcessQty := ROUND(ExcessQty);
          END;

          IF ExcessQty < 0 THEN
            ExcessQty := 0;

          IF ExcessQty > SurplusQty THEN
            ExcessQty := SurplusQty;

          SurplusQty :=  ROUND(SurplusQty - ExcessQty);
          IF SurplusQty < 0 THEN
            SurplusQty := 0;
        END;
      END;

      // update & insert surplus record
      UpdateSurplus(ProcUnit,FALSE);
    END;

    BEGIN
    END.
  }
}

