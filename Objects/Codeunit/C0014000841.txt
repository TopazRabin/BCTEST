OBJECT Codeunit 14000841 Label Management
{
  OBJECT-PROPERTIES
  {
    Date=06/15/21;
    Time=[ 6:15:12 AM];
    Modified=Yes;
    Version List=SE0.60.19,001,TPZ3198,002;
  }
  PROPERTIES
  {
    OnRun=VAR
            TransferHeader@1000000000 : Record 5740;
          BEGIN
            TransferHeader.GET('TO1000002');
            PrintLTLTOLabel(TransferHeader, 'LTL_TRANS', 3);
          END;

  }
  CODE
  {
    VAR
      ShippingSetup@1000000000 : Record 14000707;
      PackingStation@1000000001 : Record 14000709;
      ReceiveSetup@1240030000 : Record 14000607;
      ReceiveStation@1240030001 : Record 14000608;
      ShippingSetupRetrieved@1000000002 : Boolean;
      ReceiveSetupRetrieved@1240030002 : Boolean;
      Text001@1001 : TextConst 'ENU=UCC 128 Label';
      Text002@1002 : TextConst 'ENU=Default Std. Package Label';
      Text003@1003 : TextConst 'ENU=Std. Package Label';
      Text004@1004 : TextConst 'ENU=Mask %1 has too many C Digits.';
      Text005@1005 : TextConst 'ENU=Manufacturer Identification cannot be blank.';
      Text006@1006 : TextConst 'ENU=Manufacturer Identification must be %1 digits.';
      Text007@1007 : TextConst 'ENU=Manufacturer Identification must be digits only.';
      Text008@1008 : TextConst 'ENU=The Number must be %1 characters or less.';
      Text009@1009 : TextConst 'ENU=Number %1 must only contain digits.';
      Text010@1010 : TextConst 'ENU=Check Digit must be last in %1.';
      Text011@1011 : TextConst 'ENU=Mask %1 is illegal.';
      Text012@1012 : TextConst 'ENU=Weight cannot be blank.';
      Text013@1013 : TextConst 'ENU=%1 is not a legal Printing Mask for %2';
      Text014@1014 : TextConst 'ENU=Printer Port cannot be blank.';
      Text015@1015 : TextConst 'ENU=Unknown Printer Type for label %1.';
      Text016@1016 : TextConst 'ENU=Value must be at least %1 characters in label line %2 %3.';
      Text017@1017 : TextConst 'ENU=has not been imported.';
      Text018@1018 : TextConst 'ENU=must be numeric.';
      Text019@1019 : TextConst 'ENU=Default Std. Receive Label';
      Text020@1240030003 : TextConst 'ENU=Bill of Lading Label';
      Text021@1240030004 : TextConst 'ENU=RF-ID Label %1';
      Text022@1240030005 : TextConst 'ENU=must be filled out.';
      AssocEDIDocNo@1240020001 : Code[20];

    PROCEDURE CloseOrder@6(CurrentSalesHeader@1000000000 : Record 36;PackingRule@1000000001 : Record 14000715);
    VAR
      Package@1000000002 : Record 14000701;
    BEGIN
      WITH CurrentSalesHeader DO BEGIN
        Package.RESET;
        Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        Package.SETRANGE("Source Type",DATABASE::"Sales Header");
        Package.SETRANGE("Source Subtype","Document Type");
        Package.SETRANGE("Source ID","No.");
        IF Package.FIND('-') THEN BEGIN
          IF PackingRule.GetPackingRule(
               Package."Ship-to Type",Package."Ship-to No.",Package."Ship-to Code")
          THEN BEGIN
            // Code to control relation can be added


          END;
        END;
      END;
    END;

    PROCEDURE ClosePackage@4(VAR CurrentPackage@1000000000 : Record 14000701;PrintLabel@1000000001 : Boolean);
    VAR
      PackingRule@1000000002 : Record 14000715;
      RFIDMgt@1240030000 : Codeunit 14000961;
      PackageSummaryMgt@1240030001 : Codeunit 14000962;
      PackingRuleFound@1240030002 : Boolean;
    BEGIN
      PackingRuleFound :=
        PackingRule.GetPackingRule(
          CurrentPackage."Ship-to Type",CurrentPackage."Ship-to No.",CurrentPackage."Ship-to Code");

      IF PackingRuleFound THEN
        IF PackingRule."Package Summary Type" <> PackingRule."Package Summary Type"::" " THEN
          PackageSummaryMgt.ClosePackage(CurrentPackage,PackingRule);

      IF PrintLabel THEN
        PrintStdPackageLabel(CurrentPackage);

      IF PackingRuleFound THEN BEGIN
        IF PackingRule."Print UCC Closing Package" OR PackingRule."Assign UCC Closing Package"
        THEN BEGIN
          IF CurrentPackage."UCC No." = '' THEN
            IF CreateUCCNo(CurrentPackage,PackingRule) THEN BEGIN
              CurrentPackage.MODIFY;
              COMMIT;
            END;

          IF PrintLabel AND PackingRule."Print UCC Closing Package" THEN
            PrintUCC128Label(CurrentPackage);
        END;

        IF PackingRule."Print RF-ID Closing Package" OR PackingRule."Assign RF-ID Closing Package"
        THEN BEGIN
          IF CurrentPackage."RF-ID (Hex)" = '' THEN
            IF RFIDMgt.CreatePackageRFIDNo(CurrentPackage,PackingRule) THEN BEGIN
              CurrentPackage.MODIFY;
              COMMIT;
            END;

          IF PrintLabel AND PackingRule."Print RF-ID Closing Package" THEN
            PrintRFIDLabel(CurrentPackage);
        END;
      END;
    END;

    PROCEDURE CreateUCCNo@1240030000(VAR CurrentPackage@1240030000 : Record 14000701;PackingRule@1240030002 : Record 14000715) : Boolean;
    VAR
      PackageLine@1240030001 : Record 14000702;
    BEGIN
      WITH CurrentPackage DO BEGIN
        IF "UCC No." <> '' THEN
          EXIT(FALSE);

        IF PackingRule."Update Package Type on Close" THEN BEGIN
          PackageLine.RESET;
          PackageLine.SETRANGE("Package No.","No.");
          IF PackageLine.FIND('-') THEN BEGIN
            PackageLine.SETRANGE(Type,PackageLine.Type::Package);
            IF PackageLine.FIND('-') THEN BEGIN
              PackingRule.TESTFIELD("Package Type (Packages)");
              "Label Package Type" := PackingRule."Package Type (Packages)";
            END ELSE BEGIN
              PackingRule.TESTFIELD("Package Type (Item Only)");
              "Label Package Type" := PackingRule."Package Type (Item Only)";
            END;
          END;
        END;

        CLEAR(PackageLine);
        PackageLine.RESET;
        PackageLine.SETRANGE("Package No.","No.");
        IF PackageLine.FIND('-') THEN
          IF PackageLine.NEXT <> 0 THEN
            CLEAR(PackageLine);

        CreatePackageUCC128(
          PackingRule,"UCC No.","UCC No. (Print)","Label Package Type",
          "EDI Trade Partner","External Document No.",
          PackageLine."Item UPC/EAN Number",PackageLine."Item UPC/EAN Number (Print)",
          PackageLine."Std. Pack UPC/EAN Number",PackageLine."Std. Pack UPC/EAN No. (Print)");

        EXIT(TRUE);
      END;
    END;

    PROCEDURE CreatePostedUCCNo@1240030002(VAR CurrentPostedPackage@1240030000 : Record 14000704;PackingRule@1240030002 : Record 14000715) : Boolean;
    VAR
      PostedPackageLine@1240030001 : Record 14000705;
    BEGIN
      WITH CurrentPostedPackage DO BEGIN
        IF "UCC No." <> '' THEN
          EXIT(FALSE);

        IF PackingRule."Update Package Type on Close" THEN BEGIN
          PostedPackageLine.RESET;
          PostedPackageLine.SETRANGE("Package No.","No.");
          IF PostedPackageLine.FIND('-') THEN BEGIN
            PostedPackageLine.SETRANGE(Type,PostedPackageLine.Type::Package);
            IF PostedPackageLine.FIND('-') THEN BEGIN
              PackingRule.TESTFIELD("Package Type (Packages)");
              "Label Package Type" := PackingRule."Package Type (Packages)";
            END ELSE BEGIN
              PackingRule.TESTFIELD("Package Type (Item Only)");
              "Label Package Type" := PackingRule."Package Type (Item Only)";
            END;
          END;
        END;

        CLEAR(PostedPackageLine);
        PostedPackageLine.RESET;
        PostedPackageLine.SETRANGE("Package No.","No.");
        IF PostedPackageLine.FIND('-') THEN
          IF PostedPackageLine.NEXT <> 0 THEN
            CLEAR(PostedPackageLine);

        CreatePackageUCC128(
          PackingRule,"UCC No.","UCC No. (Print)","Label Package Type",
          "EDI Trade Partner","External Document No.",
          PostedPackageLine."Item UPC/EAN Number",PostedPackageLine."Item UPC/EAN Number (Print)",
          PostedPackageLine."Std. Pack UPC/EAN Number",PostedPackageLine."Std. Pack UPC/EAN No. (Print)");

        EXIT(TRUE);
      END;
    END;

    PROCEDURE PrintUCC128Label@2(VAR CurrentPackage@1000000000 : Record 14000701);
    VAR
      PackingRule@1000000001 : Record 14000715;
      PackageLine@1000000002 : Record 14000702;
    BEGIN
      WITH CurrentPackage DO BEGIN
        IF PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code") THEN
          IF PackingRule."Allow UCC Label" THEN BEGIN
            IF "UCC No." = '' THEN
              IF CreateUCCNo(CurrentPackage,PackingRule) THEN BEGIN
                MODIFY;
                COMMIT;
              END;

            GetPackingStation;
            PackingStation.TESTFIELD("UCC/UPC Label Printer Port");

            PackageLine.RESET;
            PackageLine.SETRANGE("Package No.",CurrentPackage."No.");
            PackageLine.SETRANGE(Type,PackageLine.Type::Package);
            PackageLine.SETFILTER("No.",'<>%1','');
            IF PackageLine.FIND('-') THEN BEGIN
              PackingRule.TESTFIELD("UCC Label Code (Packages)");
              PrintPackageLabel(
                CurrentPackage,PackingRule."UCC Label Code (Packages)",
                PackingStation."UCC/UPC Label Printer Port",Text001,2);
            END ELSE BEGIN
              PackingRule.TESTFIELD("UCC Label Code (Item Only)");
              PrintPackageLabel(
                CurrentPackage,PackingRule."UCC Label Code (Item Only)",
                PackingStation."UCC/UPC Label Printer Port",Text001,2);
            END;
            COMMIT;
          END;
      END;
    END;

    PROCEDURE PrintPostedUCC128Label@5(VAR CurrentPostedPackage@1000000000 : Record 14000704);
    VAR
      Package@1000000001 : Record 14000701;
      PostedPackage@1000000002 : Record 14000701;
      PostedPackageLine@1000000003 : Record 14000705;
      PackingRule@1000000004 : Record 14000715;
    BEGIN
      WITH CurrentPostedPackage DO BEGIN
        Package.TRANSFERFIELDS(CurrentPostedPackage);
        IF PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code") THEN
          IF PackingRule."Allow UCC Label" THEN BEGIN
            IF "UCC No." = '' THEN
              IF CreatePostedUCCNo(CurrentPostedPackage,PackingRule) THEN BEGIN
                MODIFY;
                COMMIT;
              END;

            GetPackingStation;
            PackingStation.TESTFIELD("UCC/UPC Label Printer Port");

            PostedPackageLine.RESET;
            PostedPackageLine.SETRANGE("Package No.",CurrentPostedPackage."No.");
            PostedPackageLine.SETRANGE(Type,PostedPackageLine.Type::Package);
            PostedPackageLine.SETFILTER("No.",'<>%1','');
            IF PostedPackageLine.FIND('-') THEN BEGIN
              PackingRule.TESTFIELD("UCC Label Code (Packages)");
              PrintPostedPackageLabel(
                CurrentPostedPackage,PackingRule."UCC Label Code (Packages)",
              PackingStation."UCC/UPC Label Printer Port",Text001,2);
            END ELSE BEGIN
              PackingRule.TESTFIELD("UCC Label Code (Item Only)");
              PrintPostedPackageLabel(
                CurrentPostedPackage,PackingRule."UCC Label Code (Item Only)",
              PackingStation."UCC/UPC Label Printer Port",Text001,2);
            END;
            COMMIT;
          END;
      END;
    END;

    PROCEDURE PrintStdPackageLabel@11(VAR CurrentPackage@1000000000 : Record 14000701);
    VAR
      PackingRule@1000000001 : Record 14000715;
    BEGIN
      WITH CurrentPackage DO BEGIN
        GetShippingSetup;
        IF ShippingSetup."Def. Std. Package Label Code" <> '' THEN BEGIN
          GetPackingStation;
          PackingStation.TESTFIELD("Std. Pack. Label Printer Port");

          PrintPackageLabel(
            CurrentPackage,ShippingSetup."Def. Std. Package Label Code",
            PackingStation."Std. Pack. Label Printer Port",Text002,1);
          COMMIT;
        END;

        IF PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code") THEN
          IF PackingRule."Std. Package Label Code" <> '' THEN BEGIN
            GetPackingStation;
            PackingStation.TESTFIELD("Std. Pack. Label Printer Port");

            PrintPackageLabel(
              CurrentPackage,PackingRule."Std. Package Label Code",
              PackingStation."Std. Pack. Label Printer Port",Text003,1);
            COMMIT;
          END;
      END;
    END;

    PROCEDURE PrintPostedStdPackageLabel@10(VAR CurrentPostedPackage@1000000000 : Record 14000704);
    VAR
      Package@1000000001 : Record 14000701;
      PackingRule@1000000002 : Record 14000715;
    BEGIN
      WITH CurrentPostedPackage DO BEGIN
        GetShippingSetup;
        IF ShippingSetup."Def. Std. Package Label Code" <> '' THEN BEGIN
          GetPackingStation;
          PackingStation.TESTFIELD("Std. Pack. Label Printer Port");

          PrintPostedPackageLabel(
            CurrentPostedPackage,ShippingSetup."Def. Std. Package Label Code",
            PackingStation."Std. Pack. Label Printer Port",Text002,1);
          COMMIT;
        END;

        Package.TRANSFERFIELDS(CurrentPostedPackage);
        IF PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code") THEN
          IF PackingRule."Std. Package Label Code" <> '' THEN BEGIN
            GetPackingStation;
            PackingStation.TESTFIELD("Std. Pack. Label Printer Port");

            PrintPostedPackageLabel(
              CurrentPostedPackage,PackingRule."Std. Package Label Code",
              PackingStation."Std. Pack. Label Printer Port",Text003,1);
            COMMIT;
          END;
      END;
    END;

    PROCEDURE PrintShippingAgentLabel@19(VAR CurrentPackage@1000000000 : Record 14000701;ShippingAgent@1000000001 : Record 291;ShippingAgentService@1240030000 : Record 14000708);
    VAR
      PackingRule@1240030001 : Record 14000715;
    BEGIN
      WITH CurrentPackage DO BEGIN
        IF NOT PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code") THEN
          CLEAR(PackingRule);

        IF (ShippingAgent."Shipping Label Code" <> '') AND
           NOT PackingRule."Do not Print Ship. Agent Label"
        THEN BEGIN
          GetPackingStation;
          PackingStation.TESTFIELD("Std. Pack. Label Printer Port");

          PrintPackageLabel(
            CurrentPackage,ShippingAgent."Shipping Label Code",
            PackingStation."Std. Pack. Label Printer Port",COPYSTR(ShippingAgent.Name,1,30),3);
          COMMIT;
        END;

        IF (ShippingAgentService."Shipping Label Code" <> '') AND
           NOT PackingRule."Do not Print Ship. Agent Label"
        THEN BEGIN
          GetPackingStation;
          PackingStation.TESTFIELD("Std. Pack. Label Printer Port");

          PrintPackageLabel(
            CurrentPackage,ShippingAgentService."Shipping Label Code",
            PackingStation."Std. Pack. Label Printer Port",
            COPYSTR(ShippingAgent.Name + ' ' + ShippingAgentService.Code,1,30),3);
          COMMIT;
        END;
      END;
    END;

    PROCEDURE PrintPostedShippingAgentLabel@18(VAR CurrentPostedPackage@1000000000 : Record 14000704;ShippingAgent@1000000001 : Record 291;ShippingAgentService@1240030000 : Record 14000708);
    VAR
      PackingRule@1240030001 : Record 14000715;
    BEGIN
      WITH CurrentPostedPackage DO BEGIN
        IF NOT PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code") THEN
          CLEAR(PackingRule);

        IF (ShippingAgent."Shipping Label Code" <> '') AND
           NOT PackingRule."Do not Print Ship. Agent Label"
        THEN BEGIN
          GetPackingStation;
          PackingStation.TESTFIELD("Std. Pack. Label Printer Port");

          PrintPostedPackageLabel(
            CurrentPostedPackage,ShippingAgent."Shipping Label Code",
            PackingStation."Std. Pack. Label Printer Port",COPYSTR(ShippingAgent.Name,1,30),3);
          COMMIT;
        END;

        IF (ShippingAgentService."Shipping Label Code" <> '') AND
           NOT PackingRule."Do not Print Ship. Agent Label"
        THEN BEGIN
          GetPackingStation;
          PackingStation.TESTFIELD("Std. Pack. Label Printer Port");

          PrintPostedPackageLabel(
            CurrentPostedPackage,ShippingAgentService."Shipping Label Code",
            PackingStation."Std. Pack. Label Printer Port",
            COPYSTR(ShippingAgent.Name + ' ' + ShippingAgentService.Code,1,30),3);
          COMMIT;
        END;
      END;
    END;

    PROCEDURE PrintRFIDLabel@1240030005(VAR CurrentPackage@1000000000 : Record 14000701);
    VAR
      PackingRule@1000000001 : Record 14000715;
      RFIDMgt@1240030000 : Codeunit 14000961;
    BEGIN
      WITH CurrentPackage DO BEGIN
        IF PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code") THEN
          IF PackingRule."Allow RF-ID Label" THEN BEGIN
            IF "UCC No." = '' THEN
              IF RFIDMgt.CreatePackageRFIDNo(CurrentPackage,PackingRule) THEN BEGIN
                MODIFY;
                COMMIT;
              END;

            GetPackingStation;
            PackingStation.TESTFIELD("RF-ID Label Printer Port");

            CASE "RF-ID Type" OF
              "RF-ID Type"::SGTIN:
                BEGIN
                  PackingRule.TESTFIELD("RF-ID Label Code (SGTIN)");
                  PrintPackageLabel(
                    CurrentPackage,PackingRule."RF-ID Label Code (SGTIN)",
                    PackingStation."RF-ID Label Printer Port",STRSUBSTNO(Text021,"RF-ID Type"),2);
                END;
              "RF-ID Type"::SSCC:
                BEGIN
                  PackingRule.TESTFIELD("RF-ID Label Code (SSCC)");
                  PrintPackageLabel(
                    CurrentPackage,PackingRule."RF-ID Label Code (SSCC)",
                    PackingStation."RF-ID Label Printer Port",STRSUBSTNO(Text021,"RF-ID Type"),2);
                END;
              "RF-ID Type"::SGLN:
                BEGIN
                  PackingRule.TESTFIELD("RF-ID Label Code (SGLN)");
                  PrintPackageLabel(
                    CurrentPackage,PackingRule."RF-ID Label Code (SGLN)",
                    PackingStation."RF-ID Label Printer Port",STRSUBSTNO(Text021,"RF-ID Type"),2);
                END;
              ELSE
                FIELDERROR("RF-ID Type",Text022);
            END;
            COMMIT;
          END;
      END;
    END;

    PROCEDURE PrintPostedRFIDLabel@1240030004(VAR CurrentPostedPackage@1000000000 : Record 14000704);
    VAR
      PackingRule@1000000004 : Record 14000715;
      RFIDMgt@1240030000 : Codeunit 14000961;
    BEGIN
      WITH CurrentPostedPackage DO BEGIN
        IF PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code") THEN
          IF PackingRule."Allow RF-ID Label" THEN BEGIN
            IF "UCC No." = '' THEN
              IF RFIDMgt.CreatePostedPackageRFIDNo(CurrentPostedPackage,PackingRule) THEN BEGIN
                MODIFY;
                COMMIT;
              END;

            GetPackingStation;
            PackingStation.TESTFIELD("RF-ID Label Printer Port");

            CASE "RF-ID Type" OF
              "RF-ID Type"::SGTIN:
                BEGIN
                  PackingRule.TESTFIELD("RF-ID Label Code (SGTIN)");
                  PrintPostedPackageLabel(
                    CurrentPostedPackage,PackingRule."RF-ID Label Code (SGTIN)",
                    PackingStation."RF-ID Label Printer Port",STRSUBSTNO(Text021,"RF-ID Type"),2);
                END;
              "RF-ID Type"::SSCC:
                BEGIN
                  PackingRule.TESTFIELD("RF-ID Label Code (SSCC)");
                  PrintPostedPackageLabel(
                    CurrentPostedPackage,PackingRule."RF-ID Label Code (SSCC)",
                    PackingStation."RF-ID Label Printer Port",STRSUBSTNO(Text021,"RF-ID Type"),2);
                END;
              "RF-ID Type"::SGLN:
                BEGIN
                  PackingRule.TESTFIELD("RF-ID Label Code (SGLN)");
                  PrintPostedPackageLabel(
                    CurrentPostedPackage,PackingRule."RF-ID Label Code (SGLN)",
                    PackingStation."RF-ID Label Printer Port",STRSUBSTNO(Text021,"RF-ID Type"),2);
                END;
              ELSE
                FIELDERROR("RF-ID Type",Text022);
            END;
            COMMIT;
          END;
      END;
    END;

    PROCEDURE FormatUCC128PrintPackage@17(CurrentPackage@1000000000 : Record 14000701);
    VAR
      PackingRule@1000000001 : Record 14000715;
    BEGIN
      WITH CurrentPackage DO BEGIN
        IF "UCC No." = '' THEN
          "UCC No. (Print)" := '';

        IF PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code") THEN BEGIN
          IF PackingRule."UCC 128 Printing Mask" <> '' THEN
            FormatLabelNoPrint("UCC No. (Print)","UCC No.",PackingRule."UCC 128 Printing Mask")
          ELSE
            "UCC No. (Print)" := "UCC No.";
        END ELSE
          "UCC No. (Print)" := '';
      END;
    END;

    PROCEDURE FormatUCC128PrintPostedPackage@16(VAR CurrentPostedPackage@1000000000 : Record 14000704);
    VAR
      Package@1000000001 : Record 14000701;
      PackingRule@1000000002 : Record 14000715;
    BEGIN
      WITH CurrentPostedPackage DO BEGIN
        IF "UCC No." = '' THEN
          "UCC No. (Print)" := '';

        Package.TRANSFERFIELDS(CurrentPostedPackage);
        IF PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code") THEN BEGIN
          IF PackingRule."UCC 128 Printing Mask" <> '' THEN
            FormatLabelNoPrint("UCC No. (Print)","UCC No.",PackingRule."UCC 128 Printing Mask")
          ELSE
            "UCC No. (Print)" := "UCC No.";
        END ELSE
          "UCC No. (Print)" := '';
      END;
    END;

    PROCEDURE FormatItemEANNumber@7(VAR CurrentPackage@1000000000 : Record 14000701;EANNumber@1000000001 : Code[20]) : Code[50];
    VAR
      PackingRule@1000000002 : Record 14000715;
      EANNumberPrint@1000000003 : Code[50];
    BEGIN
      IF PackingRule.GetPackingRule(
           CurrentPackage."Ship-to Type",CurrentPackage."Ship-to No.",CurrentPackage."Ship-to Code")
      THEN BEGIN
        CASE STRLEN(EANNumber) OF
          12:
            BEGIN
              PackingRule.TESTFIELD("Item UPC/EAN Printing Mask");
              FormatLabelNoPrint(
                EANNumberPrint,EANNumber,PackingRule."Item UPC/EAN Printing Mask");
            END;
          14:
            BEGIN
              PackingRule.TESTFIELD("Std. Pack UPC/EAN Print. Mask");
              FormatLabelNoPrint(
                EANNumberPrint,EANNumber,PackingRule."Std. Pack UPC/EAN Print. Mask");
            END;
          ELSE
            EANNumberPrint := EANNumber;
        END;
        EXIT(EANNumberPrint);
      END ELSE
        EXIT(EANNumber);
    END;

    PROCEDURE FormatStdPackageEANNumber@9(VAR CurrentPackage@1000000000 : Record 14000701;EANNumber@1000000001 : Code[20]) : Code[50];
    VAR
      PackingRule@1000000002 : Record 14000715;
      EANNumberPrint@1000000003 : Code[50];
    BEGIN
      IF PackingRule.GetPackingRule(
           CurrentPackage."Ship-to Type",CurrentPackage."Ship-to No.",CurrentPackage."Ship-to Code")
      THEN BEGIN
        CASE STRLEN(EANNumber) OF
          12:
            BEGIN
              PackingRule.TESTFIELD("Item UPC/EAN Printing Mask");
              FormatLabelNoPrint(
                EANNumberPrint,EANNumber,PackingRule."Item UPC/EAN Printing Mask");
            END;
          14:
            BEGIN
              PackingRule.TESTFIELD("Std. Pack UPC/EAN Print. Mask");
              FormatLabelNoPrint(
                EANNumberPrint,EANNumber,PackingRule."Std. Pack UPC/EAN Print. Mask");
            END;
          ELSE
            EANNumberPrint := EANNumber;
        END;
        EXIT(EANNumberPrint);
      END ELSE
        EXIT(EANNumber);
    END;

    LOCAL PROCEDURE GetShippingSetup@33();
    BEGIN
      IF NOT ShippingSetupRetrieved THEN BEGIN
        ShippingSetup.GET;
        ShippingSetupRetrieved := TRUE;
      END;
    END;

    LOCAL PROCEDURE GetPackingStation@51();
    BEGIN
      IF PackingStation.Code = '' THEN
        PackingStation.GetPackingStation;
    END;

    LOCAL PROCEDURE GetReceiveSetup@34();
    BEGIN
      IF NOT ReceiveSetupRetrieved THEN BEGIN
        ReceiveSetup.GET;
        ReceiveSetupRetrieved := TRUE;
      END;
    END;

    LOCAL PROCEDURE GetReceiveStation@38();
    BEGIN
      IF ReceiveStation.Code = '' THEN
        ReceiveStation.GetReceiveStation;
    END;

    LOCAL PROCEDURE CreatePackageUCC128@1(PackingRule@1000000000 : Record 14000715;VAR UCCNo@1000000001 : Code[30];VAR UCCNoPrint@1000000002 : Code[30];VAR PackageType@1000000003 : Code[1];EDITradingPartnerNo@1000000004 : Code[20];ExternalDocumentNo@1000000005 : Code[35];ItemUPCEANNo@1000000006 : Code[20];ItemUPCEANNoPrint@1000000007 : Code[50];StdPackUPCEANNo@1000000008 : Code[20];StdPackUPCEANNoPrint@1000000009 : Code[50]);
    VAR
      Package@1000000010 : Record 14000701;
      UCC128Sequence@1000000011 : Record 14000821;
      ShippingNumbering@1240030000 : Record 14000725;
      NoSeriesMgt@1000000012 : Codeunit 396;
      TextNo@1000000013 : Code[30];
    BEGIN
      IF UCCNo <> '' THEN
        EXIT;

      CASE PackingRule."UCC Type" OF
        PackingRule."UCC Type"::"UCC 128":
          BEGIN
            IF UCC128Sequence.GET(EDITradingPartnerNo,ExternalDocumentNo) THEN
              IF UCC128Sequence."First UCC 128 Sequence No." <> 0 THEN BEGIN
                UCC128Sequence.TESTFIELD("Increase UCC 128 No. by");
                IF UCC128Sequence."Last Used UCC 128 No." <> 0 THEN
                  UCC128Sequence."Last Used UCC 128 No." :=
                    UCC128Sequence."Last Used UCC 128 No." + UCC128Sequence."Increase UCC 128 No. by"
                ELSE
                  UCC128Sequence."Last Used UCC 128 No." := UCC128Sequence."First UCC 128 Sequence No.";
                UCC128Sequence.MODIFY;
                TextNo := DELCHR(FORMAT(UCC128Sequence."Last Used UCC 128 No."),'=',',.');
              END;

            IF TextNo = '' THEN BEGIN
              IF ShippingNumbering.GET(
                   DATABASE::"Packing Rule",PackingRule.Code,
                   PackingRule.FIELDNO("Last UCC 128 Sequence No."))
              THEN BEGIN
                ShippingNumbering.GetNextNumber;
                TextNo := ShippingNumbering."Last No. Used";
              END ELSE
                IF PackingRule."UCC 128 Sequence Nos." <> '' THEN
                  TextNo := NoSeriesMgt.GetNextNo(PackingRule."UCC 128 Sequence Nos.",WORKDATE,TRUE);
            END;

            IF TextNo = '' THEN BEGIN
              GetShippingSetup;
              IF ShippingNumbering.GET(
                DATABASE::"Shipping Setup",ShippingSetup."Primary Key",
                ShippingSetup.FIELDNO("Last UCC 128 Sequence No."))
              THEN BEGIN
                ShippingNumbering.GetNextNumber;
                TextNo := ShippingNumbering."Last No. Used";
              END ELSE BEGIN
                ShippingSetup.TESTFIELD("UCC 128 Sequence Nos.");
                TextNo := NoSeriesMgt.GetNextNo(ShippingSetup."UCC 128 Sequence Nos.",WORKDATE,TRUE);
              END;
            END;

            IF (PackageType = '') AND (STRPOS(PackingRule."UCC 128 Mask",'P') <> 0) THEN BEGIN
              PackingRule.TESTFIELD("Default Package Type");
              PackageType := PackingRule."Default Package Type";
            END;

            IF STRPOS(PackingRule."UCC 128 Mask",'M') > 0 THEN
              PackingRule.TESTFIELD("Manufacturer Identification");

            FormatLabelNo(
              UCCNo,PackingRule."UCC 128 Mask",PackingRule."UCC 128 Weight",
              PackingRule."Manufacturer Identification",TextNo,PackageType);

            FormatLabelNoPrint(UCCNoPrint,UCCNo,PackingRule."UCC 128 Printing Mask");
          END;
        PackingRule."UCC Type"::"Item UPC/EAN":
          BEGIN
            UCCNo := ItemUPCEANNo;
            UCCNoPrint := ItemUPCEANNoPrint;
          END;
        PackingRule."UCC Type"::"Std. Pack UPC/EAN":
          BEGIN
            UCCNo := StdPackUPCEANNo;
            UCCNoPrint := StdPackUPCEANNoPrint;
          END;
      END;
    END;

    LOCAL PROCEDURE FormatLabelNo@3(VAR LabelNo@1000000000 : Code[30];Mask@1000000001 : Code[30];Weight@1000000002 : Code[30];MfgID@1000000003 : Code[10];TextNo@1000000004 : Code[30];PackageIndicator@1000000005 : Text[1]);
    VAR
      CheckDigit@1000000006 : Integer;
      Number@1000000007 : Code[30];
      i@1000000008 : Integer;
      CDigit@1000000009 : Integer;
      MDigit@1000000011 : Integer;
      SDigit@1000000012 : Integer;
    BEGIN
      FOR i := 1 TO STRLEN(Mask) DO
        CASE COPYSTR(Mask,i,1) OF
          'C':
            CDigit := CDigit + 1;
          'M':
            MDigit := MDigit + 1;
          'S':
            SDigit := SDigit + 1;
        END;

      IF CDigit > 1 THEN
        ERROR(Text004,Mask);

      IF MDigit <> 0 THEN BEGIN
        IF MfgID = '' THEN
          ERROR(Text005);
        IF STRLEN(MfgID) <> MDigit THEN
          ERROR(Text006,MDigit);

        FOR i := 1 TO MDigit DO
          IF STRPOS('1234567890',COPYSTR(MfgID,i,1)) = 0 THEN
            ERROR(Text007);
      END;

      IF SDigit <> 0 THEN BEGIN
        i := STRLEN(TextNo);
        CASE TRUE OF
          i > SDigit:
            ERROR(Text008,SDigit);
          i < SDigit:
            Number := COPYSTR('00000000000000000000',1,(SDigit - i)) + TextNo;
          ELSE
            Number := TextNo;
        END;

        FOR i := 1 TO SDigit DO
          IF STRPOS('1234567890',COPYSTR(Number,i,1)) = 0 THEN
            ERROR(Text009,Number);
      END;

      LabelNo := '';
      FOR i := 1 TO STRLEN(Mask) DO
        CASE STRPOS('1234567890PMSC',COPYSTR(Mask,i,1)) OF
          1,2,3,4,5,6,7,8,9,10:
            LabelNo := LabelNo + COPYSTR(Mask,i,1);
          11:
            LabelNo := LabelNo + PackageIndicator;
          12:
            IF MDigit <> 0 THEN BEGIN
              LabelNo := LabelNo + MfgID;
              MDigit := 0;
            END;
          13:
            IF SDigit <> 0 THEN BEGIN
              LabelNo := LabelNo + Number;
              SDigit := 0;
            END;
          14:
            IF i <> STRLEN(Mask) THEN
              ERROR(Text010,Mask);
          ELSE
            ERROR(Text011,Mask);
        END;

      IF CDigit <> 0 THEN BEGIN
        IF Weight = '' THEN
          ERROR(Text012);
        CheckDigit := STRCHECKSUM(LabelNo,Weight);
        LabelNo := LabelNo + FORMAT(CheckDigit);
      END;
    END;

    LOCAL PROCEDURE FormatLabelNoPrint@15(VAR LabelNoPrint@1000000000 : Code[50];LabelNo@1000000001 : Code[30];Mask@1000000002 : Code[50]);
    VAR
      i@1000000003 : Integer;
      Pos@1000000004 : Integer;
      Spaces@1000000005 : Integer;
    BEGIN
      LabelNoPrint := '';
      IF LabelNo = '' THEN
        EXIT;

      Pos := 0;
      Spaces := 0;
      FOR i := 1 TO STRLEN(Mask) DO
        IF COPYSTR(Mask,i,1) = '#' THEN BEGIN
          Pos := Pos + 1;
          IF Pos > STRLEN(LabelNo) THEN
            ERROR(Text013,Mask,LabelNo);
          LabelNoPrint := LabelNoPrint + PADSTR('',Spaces) + COPYSTR(LabelNo,Pos,1);
          Spaces := 0;
        END ELSE
          IF COPYSTR(Mask,i,1) = ' ' THEN
            Spaces := Spaces + 1
          ELSE BEGIN
            LabelNoPrint := LabelNoPrint + PADSTR('',Spaces) + COPYSTR(Mask,i,1);
            Spaces := 0;
          END;

      IF Pos <> STRLEN(LabelNo) THEN
        ERROR(Text013,Mask,LabelNo);
    END;

    LOCAL PROCEDURE PrintPackageLabel@13(CurrentPackage@1000000000 : Record 14000701;LabelHeaderCode@1000000001 : Code[10];PrinterPort@1000000002 : Code[100];LabelDescription@1000000003 : Text[30];LabelType@1000000004 : Integer);
    VAR
      LabelHeader@1000000005 : Record 14000841;
      LabelLine@1000000006 : Record 14000842;
      PackageLine@1000000007 : Record 14000702;
      PackingRule@1000000008 : Record 14000715;
      CompanyInfo@1000000009 : Record 79;
      Customer@1000000010 : Record 18;
      ShipToAddress@1000000011 : Record 222;
      SalesHeader@1000000012 : Record 36;
      SalesLine@1000000013 : Record 37;
      BillOfLading@1000000014 : Record 14000822;
      BillOfLadingMaster@1240030006 : Record 14000822;
      ShippingAgent@1000000015 : Record 291;
      ShippingAgentService@1000000016 : Record 14000708;
      FirstPackage@1000000017 : Record 14000701;
      Location@1000000018 : Record 14;
      Country@1000000027 : Record 9;
      BillOfLadingLine@1240030002 : Record 14000823;
      EDIReceiveDocHdrInfo@1240030003 : Record 14002371;
      EDIReceiveDocLineInfo@1240030004 : Record 14002372;
      PackageSummaryLine@1240030005 : Record 14000964;
      FieldValue@1000000019 : Codeunit 14000843;
      Shipping@1240030000 : Codeunit 14000701;
      RecRef@1240020001 : RecordRef;
      DetailRecRef@1240020002 : RecordRef;
      OutputFile@1000000020 : File;
      Value@1000000025 : Text[1000];
      i@1000000026 : Integer;
      ItemLabelInfo@1240030001 : ARRAY [10,8] OF Text[50];
      LabelFileName@1240030007 : Text[250];
      InternalDocNo@1240020000 : Code[10];
    BEGIN
      CLEAR(FieldValue);

      GetPackingStation;
      FieldValue.PackingStation_14000709(PackingStation,0);

      FieldValue.Package_14000701(CurrentPackage,0);

      CompanyInfo.GET;
      FieldValue.CompanyInformation_79(CompanyInfo,0);

      IF CurrentPackage."Multi Document Package" AND (CurrentPackage."Source ID" = '') THEN BEGIN
        SalesHeader.RESET;
        SalesHeader.SETRANGE("Document Type",CurrentPackage."Source Subtype");
        SalesHeader.SETFILTER("No.",CurrentPackage."Multi Document No.");
        IF NOT SalesHeader.FIND('-') THEN
          CLEAR(SalesHeader);
      END ELSE
        IF NOT SalesHeader.GET(CurrentPackage."Source Subtype",CurrentPackage."Source ID") THEN
          CLEAR(SalesHeader);
      FieldValue.SalesHeader_36(SalesHeader,0);

      EDIReceiveDocHdrInfo.RESET;
      EDIReceiveDocHdrInfo.SETRANGE("Internal Doc. No.",SalesHeader."EDI Internal Doc. No.");
      IF NOT EDIReceiveDocHdrInfo.FIND('-') THEN
        CLEAR(EDIReceiveDocHdrInfo);
      FieldValue.EDIReceiveDocHdrInfo_14002371(EDIReceiveDocHdrInfo,0);

      IF NOT Location.GET(SalesHeader."Location Code") THEN
        CLEAR(Location);
      FieldValue.Location_14(Location,0);

      IF NOT Customer.GET(CurrentPackage."Ship-to No.") THEN
        CLEAR(Customer);
      FieldValue.Customer_18(Customer,0);
      IF NOT Customer.GET(SalesHeader."Sell-to Customer No.") THEN
        CLEAR(Customer);
      FieldValue.Customer_18(Customer,1);
      IF NOT Customer.GET(SalesHeader."Bill-to Customer No.") THEN
        CLEAR(Customer);
      FieldValue.Customer_18(Customer,2);

      IF NOT ShipToAddress.GET(CurrentPackage."Ship-to No.",CurrentPackage."Ship-to Code") THEN
        CLEAR(ShipToAddress);
      FieldValue.ShiptoAddress_222(ShipToAddress,0);
      IF NOT ShipToAddress.GET(SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code") THEN
        CLEAR(ShipToAddress);
      FieldValue.ShiptoAddress_222(ShipToAddress,1);
      IF NOT ShipToAddress.GET(SalesHeader."Sell-to Customer No.",SalesHeader."Ship-for Code") THEN
        CLEAR(ShipToAddress);
      FieldValue.ShiptoAddress_222(ShipToAddress,2);

      PackingRule.GetPackingRule(
         CurrentPackage."Ship-to Type",CurrentPackage."Ship-to No.",CurrentPackage."Ship-to Code");
      FieldValue.PackingRule_14000715(PackingRule,0);

      CLEAR(BillOfLadingLine);
      BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
      BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
      BillOfLadingLine.SETRANGE("No.",SalesHeader."No.");
      BillOfLadingLine.SETRANGE(Closed,FALSE);
      IF ShippingSetup."Location Packing" THEN
        BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
      IF BillOfLadingLine.FIND('-') THEN BEGIN
        BillOfLading.GET(BillOfLadingLine."Bill of Lading No.");
      END ELSE
        IF PackingRule."Auto Bill of Lading When Ship" THEN BEGIN
          BillOfLading.TransferFromCustomer(Customer);
          IF ShipToAddress.Code <> '' THEN
            BillOfLading.TransferFromShipToAddress(ShipToAddress);
          IF PackingRule."Auto Bill of Lading by Package" THEN
            BillOfLading."No." := CurrentPackage."No."
          ELSE BEGIN
            FirstPackage.RESET;
            FirstPackage.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
            FirstPackage.SETRANGE("Source Type",DATABASE::"Sales Header");
            FirstPackage.SETRANGE("Source Subtype",SalesHeader."Document Type");
            FirstPackage.SETRANGE("Source ID",SalesHeader."No.");
            IF NOT FirstPackage.FIND('-') THEN
              CLEAR(FirstPackage);
            BillOfLading."No." := FirstPackage."No.";
          END;
        END ELSE
          CLEAR(BillOfLading);
      FieldValue.BillofLading_14000822(BillOfLading,0);

      CLEAR(BillOfLadingMaster);
      BillOfLadingLine.RESET;
      BillOfLadingLine.SETFILTER(
        Type,'%1|%2',BillOfLadingLine.Type::"Bill of Lading",
        BillOfLadingLine.Type::"Bill of Lading (Released)");
      BillOfLadingLine.SETRANGE("No.",BillOfLading."No.");
      IF BillOfLadingLine.FIND('-') THEN
        IF BillOfLadingMaster.GET(BillOfLadingLine."Bill of Lading No.") THEN
          ;
      FieldValue.BillofLading_14000822(BillOfLadingMaster,1);

      CLEAR(ShippingAgent);
      FieldValue.ShippingAgent_291(ShippingAgent,3);
      IF NOT ShippingAgent.GET(CurrentPackage."Shipping Agent Code") THEN
        CLEAR(ShippingAgent)
      ELSE
        FieldValue.ShippingAgent_291(ShippingAgent,3);
      FieldValue.ShippingAgent_291(ShippingAgent,0);
      IF NOT ShippingAgent.GET(SalesHeader."Shipping Agent Code") THEN
        CLEAR(ShippingAgent)
      ELSE
        FieldValue.ShippingAgent_291(ShippingAgent,3);
      FieldValue.ShippingAgent_291(ShippingAgent,1);
      IF NOT ShippingAgent.GET(BillOfLading."Shipping Agent Code") THEN
        CLEAR(ShippingAgent)
      ELSE
        FieldValue.ShippingAgent_291(ShippingAgent,3);
      FieldValue.ShippingAgent_291(ShippingAgent,2);

      CLEAR(ShippingAgentService);
      FieldValue.EShipAgentService_14000708(ShippingAgentService,3);
      IF NOT ShippingAgentService.GET(
               CurrentPackage."Shipping Agent Code",
               CurrentPackage."Shipping Agent Service",
               CurrentPackage."World Wide Service")
      THEN
        CLEAR(ShippingAgentService)
      ELSE
        FieldValue.EShipAgentService_14000708(ShippingAgentService,3);
      FieldValue.EShipAgentService_14000708(ShippingAgentService,0);
      IF NOT ShippingAgentService.GET(
               SalesHeader."Shipping Agent Code",
               SalesHeader."E-Ship Agent Service",
               SalesHeader."World Wide Service")
      THEN
        CLEAR(ShippingAgentService)
      ELSE
        FieldValue.EShipAgentService_14000708(ShippingAgentService,3);
      FieldValue.EShipAgentService_14000708(ShippingAgentService,1);
      IF NOT ShippingAgentService.GET(
               BillOfLading."Shipping Agent Code",
               BillOfLading."Shipping Agent Service",
               BillOfLading."World Wide Service")
      THEN
        CLEAR(ShippingAgentService)
      ELSE
        FieldValue.EShipAgentService_14000708(ShippingAgentService,3);
      FieldValue.EShipAgentService_14000708(ShippingAgentService,2);

      IF NOT Country.GET(SalesHeader."Ship-to Country/Region Code") THEN
        CLEAR(Country);
      FieldValue.CountryRegion_9(Country,0);

      CLEAR(PackageLine);
      PackageLine.RESET;
      PackageLine.SETRANGE("Package No.",CurrentPackage."No.");
      IF PackageLine.FIND('-') THEN
        IF PackageLine.NEXT <> 0 THEN
          CLEAR(PackageLine);
      FieldValue.PackageLine_14000702(PackageLine,0);

      GetSalesLine(SalesLine,SalesHeader,PackageLine,TRUE);
      FieldValue.SalesLine_37(SalesLine,0);

      AssocEDIDocNo := '';
      IF (SalesLine."EDI Line Type" = SalesLine."EDI Line Type"::Change) AND
         (SalesLine."EDI Line Status" = SalesLine."EDI Line Status"::New)
      THEN BEGIN
        RecRef.OPEN(36);
        IF RecRef.FIND('-') THEN
          RecRef.GETTABLE(SalesHeader);
        DetailRecRef.OPEN(37);
        IF DetailRecRef.FIND('-') THEN
          DetailRecRef.GETTABLE(SalesLine);
        InternalDocNo := GetAssocInternalDocNo(RecRef,DetailRecRef);
        RecRef.CLOSE;
        DetailRecRef.CLOSE;
      END ELSE
        InternalDocNo := SalesHeader."EDI Internal Doc. No.";
      EDIReceiveDocLineInfo.RESET;
      EDIReceiveDocLineInfo.SETCURRENTKEY("Document No.","Line No.");
      IF AssocEDIDocNo = '' THEN
        EDIReceiveDocLineInfo.SETRANGE("Document No.",SalesHeader."No.")
      ELSE
        EDIReceiveDocLineInfo.SETRANGE("Document No.",AssocEDIDocNo);
      EDIReceiveDocLineInfo.SETRANGE("Internal Doc. No.",InternalDocNo);
      EDIReceiveDocLineInfo.SETRANGE("Line No.",SalesLine."Line No.");
      IF NOT EDIReceiveDocLineInfo.FIND('-') THEN BEGIN
        EDIReceiveDocLineInfo.RESET;
        EDIReceiveDocLineInfo.SETRANGE("Internal Doc. No.",InternalDocNo);
        EDIReceiveDocLineInfo.SETRANGE("Line No.",SalesLine."Line No.");
        IF NOT EDIReceiveDocLineInfo.FIND('-') THEN
          CLEAR(EDIReceiveDocLineInfo);
      END;
      FieldValue.EDIReceiveDocLineInfo_14002372(EDIReceiveDocLineInfo,0);

      PackageLine.RESET;
      PackageLine.SETRANGE("Package No.",CurrentPackage."No.");
      FOR i := 1 TO FieldValue.GetMaxRecordNo DO BEGIN
        IF i = 1 THEN BEGIN
          IF NOT PackageLine.FIND('-') THEN
            CLEAR(PackageLine);
        END ELSE BEGIN
          IF PackageLine."Package No." <> '' THEN
            IF PackageLine.NEXT = 0 THEN
              CLEAR(PackageLine);
        END;

        FieldValue.PackageLine_14000702(PackageLine,i);

        IF NOT PackingRule."Lines from Pack. Summary Lines" THEN BEGIN
          GetSalesLine(SalesLine,SalesHeader,PackageLine,FALSE);
          FieldValue.SalesLine_37(SalesLine,i);
          AssocEDIDocNo := '';
          IF (SalesLine."EDI Line Type" = SalesLine."EDI Line Type"::Change) AND
             (SalesLine."EDI Line Status" = SalesLine."EDI Line Status"::New)
          THEN BEGIN
            RecRef.OPEN(36);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesHeader);
            DetailRecRef.OPEN(37);
            IF DetailRecRef.FIND('-') THEN
              DetailRecRef.GETTABLE(SalesLine);
            InternalDocNo := GetAssocInternalDocNo(RecRef,DetailRecRef);
            RecRef.CLOSE;
            DetailRecRef.CLOSE;
          END ELSE
            InternalDocNo := SalesHeader."EDI Internal Doc. No.";
          EDIReceiveDocLineInfo.RESET;
          EDIReceiveDocLineInfo.SETCURRENTKEY("Document No.","Line No.");
          IF AssocEDIDocNo = '' THEN
            EDIReceiveDocLineInfo.SETRANGE("Document No.",SalesHeader."No.")
          ELSE
            EDIReceiveDocLineInfo.SETRANGE("Document No.",AssocEDIDocNo);
          EDIReceiveDocLineInfo.SETRANGE("Internal Doc. No.",InternalDocNo);
          EDIReceiveDocLineInfo.SETRANGE("Line No.",SalesLine."Line No.");
          IF NOT EDIReceiveDocLineInfo.FIND('-') THEN BEGIN
            EDIReceiveDocLineInfo.RESET;
            EDIReceiveDocLineInfo.SETRANGE("Internal Doc. No.",InternalDocNo);
            EDIReceiveDocLineInfo.SETRANGE("Line No.",SalesLine."Line No.");
            IF NOT EDIReceiveDocLineInfo.FIND('-') THEN
              CLEAR(EDIReceiveDocLineInfo);
          END;
          FieldValue.EDIReceiveDocLineInfo_14002372(EDIReceiveDocLineInfo,i);
        END;
      END;

      IF PackingRule."Package Summary Type" <> PackingRule."Package Summary Type"::" " THEN BEGIN
        CLEAR(PackageSummaryLine);
        PackageSummaryLine.RESET;
        PackageSummaryLine.SETRANGE("Package No.",CurrentPackage."No.");
        IF PackageSummaryLine.FIND('-') THEN
          IF PackageSummaryLine.NEXT <> 0 THEN
            CLEAR(PackageSummaryLine);
        FieldValue.PackageSummaryLine_14000964(PackageSummaryLine,0);

        PackageSummaryLine.RESET;
        PackageSummaryLine.SETRANGE("Package No.",CurrentPackage."No.");
        FOR i := 1 TO FieldValue.GetMaxRecordNo DO BEGIN
          IF i = 1 THEN BEGIN
            IF NOT PackageSummaryLine.FIND('-') THEN
              CLEAR(PackageSummaryLine);
          END ELSE BEGIN
            IF PackageSummaryLine."Package No." <> '' THEN
              IF PackageSummaryLine.NEXT = 0 THEN
                CLEAR(PackageSummaryLine);
          END;

          FieldValue.PackageSummaryLine_14000964(PackageSummaryLine,i);

          IF PackingRule."Lines from Pack. Summary Lines" THEN BEGIN
            GetSalesLineSummary(SalesLine,SalesHeader,PackageSummaryLine,FALSE);
            FieldValue.SalesLine_37(SalesLine,i);
            AssocEDIDocNo := '';
            IF (SalesLine."EDI Line Type" = SalesLine."EDI Line Type"::Change) AND
               (SalesLine."EDI Line Status" = SalesLine."EDI Line Status"::New)
            THEN BEGIN
              RecRef.OPEN(36);
              IF RecRef.FIND('-') THEN
                RecRef.GETTABLE(SalesHeader);
              DetailRecRef.OPEN(37);
              IF DetailRecRef.FIND('-') THEN
                DetailRecRef.GETTABLE(SalesLine);
              InternalDocNo := GetAssocInternalDocNo(RecRef,DetailRecRef);
              RecRef.CLOSE;
              DetailRecRef.CLOSE;
            END ELSE
              InternalDocNo := SalesHeader."EDI Internal Doc. No.";
            EDIReceiveDocLineInfo.RESET;
            EDIReceiveDocLineInfo.SETCURRENTKEY("Document No.","Line No.");
            IF AssocEDIDocNo = '' THEN
              EDIReceiveDocLineInfo.SETRANGE("Document No.",SalesHeader."No.")
            ELSE
              EDIReceiveDocLineInfo.SETRANGE("Document No.",AssocEDIDocNo);
            EDIReceiveDocLineInfo.SETRANGE("Internal Doc. No.",InternalDocNo);
            EDIReceiveDocLineInfo.SETRANGE("Line No.",SalesLine."Line No.");
            IF NOT EDIReceiveDocLineInfo.FIND('-') THEN BEGIN
              EDIReceiveDocLineInfo.RESET;
              EDIReceiveDocLineInfo.SETRANGE("Internal Doc. No.",InternalDocNo);
              EDIReceiveDocLineInfo.SETRANGE("Line No.",SalesLine."Line No.");
              IF NOT EDIReceiveDocLineInfo.FIND('-') THEN
                CLEAR(EDIReceiveDocLineInfo);
            END;
            FieldValue.EDIReceiveDocLineInfo_14002372(EDIReceiveDocLineInfo,i);
          END;
        END;
      END;

      // Additional tables can be loaded here.

      PackingStation.TESTFIELD("Label Buffer File");
      LabelFileName := PackingStation.CalcLabelFileName(PackingStation."Label Buffer File");

      OutputFile.TEXTMODE(TRUE);
      OutputFile.CREATE(LabelFileName);

      LabelHeader.GET(LabelHeaderCode);

      FieldValue.LabelHeader_14000841(LabelHeader,0);
      LabelFileTop(LabelHeader,OutputFile);

      LabelLine.RESET;
      LabelLine.SETRANGE("Label Code",LabelHeader.Code);
      IF LabelLine.FIND('-') THEN BEGIN
        FieldValue.SetPosted(FALSE);
        REPEAT
          FieldValue.LabelLine_14000842(LabelLine,0);
          Value := FieldValue.SubstituteLine(LabelLine);
          IF LabelLine."Substitution Separator Char" <> '' THEN
            Value := DELCHR(Value,'=',LabelLine."Substitution Separator Char");

          LabelFileLine(LabelHeader,LabelLine,Value,OutputFile);
        UNTIL LabelLine.NEXT = 0;
      END;

      IF LabelHeader."Add Item Info on Label" THEN BEGIN
        CLEAR(ItemLabelInfo);
        Shipping.GetItemLabelInfo(CurrentPackage,ItemLabelInfo);
        CASE LabelHeader."Printer Type"OF
          LabelHeader."Printer Type"::"Eltron Orion":
            Shipping.DirectPrintOrionLabelInfo(OutputFile,ItemLabelInfo);
          LabelHeader."Printer Type"::Zebra:
            Shipping.DirectPrintZebraLabelInfo(OutputFile,ItemLabelInfo);
        END;
      END;

      LabelFileBottom(LabelHeader,OutputFile,1);

      OutputFile.CLOSE;

      IF PrinterPort = '' THEN
        ERROR(Text014)
      ELSE BEGIN
        CurrentPackage.InsertLabelFile(
          LabelFileName,LabelDescription,LabelType,
          PrinterPort,PackingStation.Code,NOT PackingStation."No Label Printer",
          PackingStation."Do Not Import Label File");
        PackingStation.PrintLabel(
          LabelFileName,PrinterPort,
          PackingStation."No Label Printer",PackingStation."Auto Delete Label Buffer File",
          CurrentPackage."No.",LabelHeader);
      END;
    END;

    LOCAL PROCEDURE PrintPostedPackageLabel@14(CurrentPostedPackage@1000000000 : Record 14000704;LabelHeaderCode@1000000001 : Code[10];PrinterPort@1000000002 : Code[100];LabelDescription@1000000003 : Text[30];LabelType@1000000004 : Integer);
    VAR
      Package@1000000005 : Record 14000701;
      PostedPackageLine@1000000006 : Record 14000705;
      PackageLine@1000000007 : Record 14000702;
      LabelHeader@1000000008 : Record 14000841;
      LabelLine@1000000009 : Record 14000842;
      PackingRule@1000000010 : Record 14000715;
      CompanyInfo@1000000011 : Record 79;
      Customer@1000000012 : Record 18;
      ShipToAddress@1000000013 : Record 222;
      SalesHeader@1000000014 : Record 36;
      SalesLine@1000000015 : Record 37;
      SalesShipmentHeader@1000000016 : Record 110;
      SalesShipmentLine@1000000017 : Record 111;
      BillOfLading@1000000018 : Record 14000822;
      BillOfLadingMaster@1240030005 : Record 14000822;
      BillOfLadingLine@1240030006 : Record 14000823;
      ShippingAgent@1000000019 : Record 291;
      ShippingAgentService@1000000020 : Record 14000708;
      Location@1000000021 : Record 14;
      Country@1000000025 : Record 9;
      EDIReceiveDocHdrInfo@1240030003 : Record 14002371;
      EDIReceiveDocLineInfo@1240030002 : Record 14002372;
      PackageSummaryLine@1240030004 : Record 14000964;
      FieldValue@1000000022 : Codeunit 14000843;
      Shipping@1240030000 : Codeunit 14000701;
      RecRef@1240020001 : RecordRef;
      DetailRecRef@1240020002 : RecordRef;
      OutputFile@1000000023 : File;
      Value@1000000028 : Text[1000];
      i@1000000029 : Integer;
      ItemLabelInfo@1240030001 : ARRAY [10,8] OF Text[50];
      LabelFileName@1240030007 : Text[250];
      InternaldocNo@1240020000 : Code[10];
    BEGIN
      CLEAR(FieldValue);

      GetPackingStation;
      FieldValue.PackingStation_14000709(PackingStation,0);

      Package.TRANSFERFIELDS(CurrentPostedPackage);
      FieldValue.Package_14000701(Package,0);

      CompanyInfo.GET;
      FieldValue.CompanyInformation_79(CompanyInfo,0);

      IF CurrentPostedPackage."Multi Document Package" AND (CurrentPostedPackage."Posted Source ID" = '')
      THEN BEGIN
        SalesShipmentHeader.RESET;
        SalesShipmentHeader.SETCURRENTKEY("Order No.");
        SalesShipmentHeader.SETFILTER("Order No.",CurrentPostedPackage."Multi Document No.");
        IF SalesShipmentHeader.FIND('-') THEN
          SalesHeader.TRANSFERFIELDS(SalesShipmentHeader)
        ELSE
          CLEAR(SalesHeader);
      END ELSE
        IF SalesShipmentHeader.GET(CurrentPostedPackage."Posted Source ID") THEN
          SalesHeader.TRANSFERFIELDS(SalesShipmentHeader)
        ELSE
          CLEAR(SalesHeader);
      FieldValue.SalesHeader_36(SalesHeader,0);

      EDIReceiveDocHdrInfo.RESET;
      EDIReceiveDocHdrInfo.SETRANGE("Internal Doc. No.",SalesShipmentHeader."EDI Internal Doc. No.");
      IF NOT EDIReceiveDocHdrInfo.FIND('-') THEN
        CLEAR(EDIReceiveDocHdrInfo);
      FieldValue.EDIReceiveDocHdrInfo_14002371(EDIReceiveDocHdrInfo,0);

      IF NOT Location.GET(SalesHeader."Location Code") THEN
        CLEAR(Location);
      FieldValue.Location_14(Location,0);

      IF NOT Customer.GET(CurrentPostedPackage."Ship-to No.") THEN
        CLEAR(Customer);
      FieldValue.Customer_18(Customer,0);
      IF NOT Customer.GET(SalesHeader."Sell-to Customer No.") THEN
        CLEAR(Customer);
      FieldValue.Customer_18(Customer,1);
      IF NOT Customer.GET(SalesHeader."Bill-to Customer No.") THEN
        CLEAR(Customer);
      FieldValue.Customer_18(Customer,2);

      PackingRule.GetPackingRule(
        CurrentPostedPackage."Ship-to Type",CurrentPostedPackage."Ship-to No.",
        CurrentPostedPackage."Ship-to Code");
      FieldValue.PackingRule_14000715(PackingRule,0);

      IF NOT ShipToAddress.GET(CurrentPostedPackage."Ship-to No.",CurrentPostedPackage."Ship-to Code") THEN
        CLEAR(ShipToAddress);
      FieldValue.ShiptoAddress_222(ShipToAddress,0);
      IF NOT ShipToAddress.GET(SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code") THEN
        CLEAR(ShipToAddress);
      FieldValue.ShiptoAddress_222(ShipToAddress,1);
      IF NOT ShipToAddress.GET(SalesHeader."Sell-to Customer No.",SalesHeader."Ship-for Code") THEN
        CLEAR(ShipToAddress);
      FieldValue.ShiptoAddress_222(ShipToAddress,2);

      IF NOT BillOfLading.GET(CurrentPostedPackage."Bill of Lading No.") THEN
        IF NOT BillOfLading.GET(CurrentPostedPackage."Used on Bill of Lading No.") THEN
          CLEAR(BillOfLading);
      FieldValue.BillofLading_14000822(BillOfLading,0);

      CLEAR(BillOfLadingMaster);
      BillOfLadingLine.RESET;
      BillOfLadingLine.SETFILTER(
        Type,'%1|%2',BillOfLadingLine.Type::"Bill of Lading",
        BillOfLadingLine.Type::"Bill of Lading (Released)");
      BillOfLadingLine.SETRANGE("No.",BillOfLading."No.");
      IF BillOfLadingLine.FIND('-') THEN
        IF BillOfLadingMaster.GET(BillOfLadingLine."Bill of Lading No.") THEN
          ;
      FieldValue.BillofLading_14000822(BillOfLadingMaster,1);

      CLEAR(ShippingAgent);
      FieldValue.ShippingAgent_291(ShippingAgent,3);
      IF NOT ShippingAgent.GET(CurrentPostedPackage."Shipping Agent Code") THEN
        CLEAR(ShippingAgent)
      ELSE
        FieldValue.ShippingAgent_291(ShippingAgent,3);
      FieldValue.ShippingAgent_291(ShippingAgent,0);
      IF NOT ShippingAgent.GET(SalesShipmentHeader."Shipping Agent Code") THEN
        CLEAR(ShippingAgent)
      ELSE
        FieldValue.ShippingAgent_291(ShippingAgent,3);
      FieldValue.ShippingAgent_291(ShippingAgent,1);
      IF NOT ShippingAgent.GET(BillOfLading."Shipping Agent Code") THEN
        CLEAR(ShippingAgent)
      ELSE
        FieldValue.ShippingAgent_291(ShippingAgent,3);
      FieldValue.ShippingAgent_291(ShippingAgent,2);

      CLEAR(ShippingAgentService);
      FieldValue.EShipAgentService_14000708(ShippingAgentService,3);
      IF NOT ShippingAgentService.GET(
               CurrentPostedPackage."Shipping Agent Code",
               CurrentPostedPackage."Shipping Agent Service",
               CurrentPostedPackage."World Wide Service")
      THEN
        CLEAR(ShippingAgentService)
      ELSE
        FieldValue.EShipAgentService_14000708(ShippingAgentService,3);
      FieldValue.EShipAgentService_14000708(ShippingAgentService,0);
      IF NOT ShippingAgentService.GET(
               SalesShipmentHeader."Shipping Agent Code",
               SalesShipmentHeader."E-Ship Agent Service",
               SalesShipmentHeader."World Wide Service")
      THEN
        CLEAR(ShippingAgentService)
      ELSE
        FieldValue.EShipAgentService_14000708(ShippingAgentService,3);
      FieldValue.EShipAgentService_14000708(ShippingAgentService,1);
      IF NOT ShippingAgentService.GET(
               BillOfLading."Shipping Agent Code",
               BillOfLading."Shipping Agent Service",
               BillOfLading."World Wide Service")
      THEN
        CLEAR(ShippingAgentService)
      ELSE
        FieldValue.EShipAgentService_14000708(ShippingAgentService,3);
      FieldValue.EShipAgentService_14000708(ShippingAgentService,2);

      IF NOT Country.GET(SalesHeader."Ship-to Country/Region Code") THEN
        CLEAR(Country);
      FieldValue.CountryRegion_9(Country,0);

      CLEAR(PostedPackageLine);
      PostedPackageLine.RESET;
      PostedPackageLine.SETRANGE("Package No.",Package."No.");
      IF PostedPackageLine.FIND('-') THEN
        IF PostedPackageLine.NEXT <> 0 THEN
          CLEAR(PostedPackageLine);
      PackageLine.TRANSFERFIELDS(PostedPackageLine);
      FieldValue.PackageLine_14000702(PackageLine,0);

      GetSalesShipmentLine(SalesShipmentLine,SalesShipmentHeader,PackageLine,TRUE);
      SalesLine.TRANSFERFIELDS(SalesShipmentLine);
      FieldValue.SalesLine_37(SalesLine,0);

      IF (SalesShipmentLine."EDI Line Type" = SalesLine."EDI Line Type"::Change) AND
         (SalesShipmentLine."EDI Line Status" = SalesLine."EDI Line Status"::New)
      THEN BEGIN
        RecRef.OPEN(110);
        IF RecRef.FIND('-') THEN
          RecRef.GETTABLE(SalesShipmentHeader);
        DetailRecRef.OPEN(111);
        IF DetailRecRef.FIND('-') THEN
          DetailRecRef.GETTABLE(SalesShipmentLine);
        InternaldocNo := GetAssocInternalDocNo(RecRef,DetailRecRef);
        RecRef.CLOSE;
        DetailRecRef.CLOSE;
      END ELSE
        InternaldocNo := SalesShipmentHeader."EDI Internal Doc. No.";
      EDIReceiveDocLineInfo.RESET;
      EDIReceiveDocLineInfo.SETCURRENTKEY("Document No.","Line No.");
      IF AssocEDIDocNo = '' THEN
        EDIReceiveDocLineInfo.SETRANGE("Document No.",SalesShipmentHeader."Order No.")
      ELSE
        EDIReceiveDocLineInfo.SETRANGE("Document No.",AssocEDIDocNo);
      EDIReceiveDocLineInfo.SETRANGE("Internal Doc. No.",InternaldocNo);
      EDIReceiveDocLineInfo.SETRANGE("Line No.",SalesShipmentLine."Line No.");
      IF NOT EDIReceiveDocLineInfo.FIND('-') THEN BEGIN
        EDIReceiveDocLineInfo.RESET;
        EDIReceiveDocLineInfo.SETRANGE("Internal Doc. No.",InternaldocNo);
        EDIReceiveDocLineInfo.SETRANGE("Line No.",SalesShipmentLine."Line No.");
        IF NOT EDIReceiveDocLineInfo.FIND('-') THEN
          CLEAR(EDIReceiveDocLineInfo);
      END;
      FieldValue.EDIReceiveDocLineInfo_14002372(EDIReceiveDocLineInfo,0);

      PostedPackageLine.RESET;
      PostedPackageLine.SETRANGE("Package No.",Package."No.");
      FOR i := 1 TO FieldValue.GetMaxRecordNo DO BEGIN
        IF i = 1 THEN BEGIN
          IF NOT PostedPackageLine.FIND('-') THEN
            CLEAR(PostedPackageLine);
        END ELSE BEGIN
          IF PostedPackageLine."Package No." <> '' THEN
            IF PostedPackageLine.NEXT = 0 THEN
              CLEAR(PostedPackageLine);
        END;

        PackageLine.TRANSFERFIELDS(PostedPackageLine);
        FieldValue.PackageLine_14000702(PackageLine,i);

        IF NOT PackingRule."Lines from Pack. Summary Lines" THEN BEGIN
          GetSalesShipmentLine(SalesShipmentLine,SalesShipmentHeader,PackageLine,FALSE);
          SalesLine.TRANSFERFIELDS(SalesShipmentLine);
          FieldValue.SalesLine_37(SalesLine,i);
          IF (SalesShipmentLine."EDI Line Type" = SalesLine."EDI Line Type"::Change) AND
             (SalesShipmentLine."EDI Line Status" = SalesLine."EDI Line Status"::New)
          THEN BEGIN
            RecRef.OPEN(110);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesShipmentHeader);
            DetailRecRef.OPEN(111);
            IF DetailRecRef.FIND('-') THEN
              DetailRecRef.GETTABLE(SalesShipmentLine);
            InternaldocNo := GetAssocInternalDocNo(RecRef,DetailRecRef);
            RecRef.CLOSE;
            DetailRecRef.CLOSE;
          END ELSE
            InternaldocNo := SalesShipmentHeader."EDI Internal Doc. No.";
          EDIReceiveDocLineInfo.RESET;
          EDIReceiveDocLineInfo.SETCURRENTKEY("Document No.","Line No.");
          IF AssocEDIDocNo = '' THEN
            EDIReceiveDocLineInfo.SETRANGE("Document No.",SalesShipmentHeader."Order No.")
          ELSE
            EDIReceiveDocLineInfo.SETRANGE("Document No.",AssocEDIDocNo);
          EDIReceiveDocLineInfo.SETRANGE("Internal Doc. No.",InternaldocNo);
          EDIReceiveDocLineInfo.SETRANGE("Line No.",SalesShipmentLine."Line No.");
          IF NOT EDIReceiveDocLineInfo.FIND('-') THEN BEGIN
            EDIReceiveDocLineInfo.RESET;
            EDIReceiveDocLineInfo.SETRANGE("Internal Doc. No.",InternaldocNo);
            EDIReceiveDocLineInfo.SETRANGE("Line No.",SalesShipmentLine."Line No.");
            IF NOT EDIReceiveDocLineInfo.FIND('-') THEN
              CLEAR(EDIReceiveDocLineInfo);
          END;
          FieldValue.EDIReceiveDocLineInfo_14002372(EDIReceiveDocLineInfo,i);
        END;
      END;

      IF PackingRule."Package Summary Type" <> PackingRule."Package Summary Type"::" " THEN BEGIN
        CLEAR(PackageSummaryLine);
        PackageSummaryLine.RESET;
        PackageSummaryLine.SETRANGE("Package No.",CurrentPostedPackage."No.");
        IF PackageSummaryLine.FIND('-') THEN
          IF PackageSummaryLine.NEXT <> 0 THEN
            CLEAR(PackageSummaryLine);
        FieldValue.PackageSummaryLine_14000964(PackageSummaryLine,0);

        PackageSummaryLine.RESET;
        PackageSummaryLine.SETRANGE("Package No.",CurrentPostedPackage."No.");
        FOR i := 1 TO FieldValue.GetMaxRecordNo DO BEGIN
          IF i = 1 THEN BEGIN
            IF NOT PackageSummaryLine.FIND('-') THEN
              CLEAR(PackageSummaryLine);
          END ELSE BEGIN
            IF PackageSummaryLine."Package No." <> '' THEN
              IF PackageSummaryLine.NEXT = 0 THEN
                CLEAR(PackageSummaryLine);
          END;

          FieldValue.PackageSummaryLine_14000964(PackageSummaryLine,i);

          IF PackingRule."Lines from Pack. Summary Lines" THEN BEGIN
            GetSalesShipmentLineSummary(SalesShipmentLine,SalesShipmentHeader,PackageSummaryLine,FALSE);
            SalesLine.TRANSFERFIELDS(SalesShipmentLine);
            FieldValue.SalesLine_37(SalesLine,i);

            IF (SalesShipmentLine."EDI Line Type" = SalesLine."EDI Line Type"::Change) AND
               (SalesShipmentLine."EDI Line Status" = SalesLine."EDI Line Status"::New)
            THEN BEGIN
              RecRef.OPEN(110);
              IF RecRef.FIND('-') THEN
                RecRef.GETTABLE(SalesShipmentHeader);
              DetailRecRef.OPEN(111);
              IF DetailRecRef.FIND('-') THEN
                DetailRecRef.GETTABLE(SalesShipmentLine);
              InternaldocNo := GetAssocInternalDocNo(RecRef,DetailRecRef);
              RecRef.CLOSE;
              DetailRecRef.CLOSE;
            END ELSE
              InternaldocNo := SalesShipmentHeader."EDI Internal Doc. No.";
            EDIReceiveDocLineInfo.RESET;
            EDIReceiveDocLineInfo.SETCURRENTKEY("Document No.","Line No.");
            IF AssocEDIDocNo = '' THEN
              EDIReceiveDocLineInfo.SETRANGE("Document No.",SalesShipmentHeader."Order No.")
            ELSE
              EDIReceiveDocLineInfo.SETRANGE("Document No.",AssocEDIDocNo);
            EDIReceiveDocLineInfo.SETRANGE("Internal Doc. No.",InternaldocNo);
            EDIReceiveDocLineInfo.SETRANGE("Line No.",SalesShipmentLine."Line No.");
            IF NOT EDIReceiveDocLineInfo.FIND('-') THEN BEGIN
              EDIReceiveDocLineInfo.RESET;
              EDIReceiveDocLineInfo.SETRANGE("Internal Doc. No.",InternaldocNo);
              EDIReceiveDocLineInfo.SETRANGE("Line No.",SalesShipmentLine."Line No.");
              IF NOT EDIReceiveDocLineInfo.FIND('-') THEN
                CLEAR(EDIReceiveDocLineInfo);
            END;
            FieldValue.EDIReceiveDocLineInfo_14002372(EDIReceiveDocLineInfo,i);
          END;
        END;
      END;

      // Additional tables can be loaded here.

      PackingStation.TESTFIELD("Label Buffer File");
      LabelFileName := PackingStation.CalcLabelFileName(PackingStation."Label Buffer File");

      OutputFile.TEXTMODE(TRUE);
      OutputFile.CREATE(LabelFileName);

      LabelHeader.GET(LabelHeaderCode);

      FieldValue.LabelHeader_14000841(LabelHeader,0);
      LabelFileTop(LabelHeader,OutputFile);

      LabelLine.RESET;
      LabelLine.SETRANGE("Label Code",LabelHeader.Code);
      IF LabelLine.FIND('-') THEN BEGIN
        FieldValue.SetPosted(TRUE);
        REPEAT
          FieldValue.LabelLine_14000842(LabelLine,0);
          Value := FieldValue.SubstituteLine(LabelLine);
          IF LabelLine."Substitution Separator Char" <> '' THEN
            Value := DELCHR(Value,'=',LabelLine."Substitution Separator Char");

          LabelFileLine(LabelHeader,LabelLine,Value,OutputFile);
        UNTIL LabelLine.NEXT = 0;
        FieldValue.SetPosted(FALSE);
      END;

      IF LabelHeader."Add Item Info on Label" THEN BEGIN
        CLEAR(ItemLabelInfo);
        Shipping.GetItemLabelInfo(Package,ItemLabelInfo);
        CASE LabelHeader."Printer Type"OF
          LabelHeader."Printer Type"::"Eltron Orion":
            Shipping.DirectPrintOrionLabelInfo(OutputFile,ItemLabelInfo);
          LabelHeader."Printer Type"::Zebra:
            Shipping.DirectPrintZebraLabelInfo(OutputFile,ItemLabelInfo);
        END;
      END;

      LabelFileBottom(LabelHeader,OutputFile,1);

      OutputFile.CLOSE;

      IF PrinterPort = '' THEN
        ERROR(Text014)
      ELSE BEGIN
        Package.InsertLabelFile(
          LabelFileName,LabelDescription,LabelType,
          PrinterPort,PackingStation.Code,NOT PackingStation."No Label Printer",
          PackingStation."Do Not Import Label File");
        PackingStation.PrintLabel(
          LabelFileName,PrinterPort,
          PackingStation."No Label Printer",PackingStation."Auto Delete Label Buffer File",
          CurrentPostedPackage."No.",LabelHeader);
      END;
    END;

    PROCEDURE TestPrintPackageLabel@21(LabelHeaderCode@1000000000 : Code[100]);
    VAR
      LabelHeader@1000000001 : Record 14000841;
      LabelLine@1000000002 : Record 14000842;
      LabelElement@1000000010 : Record 14000844;
      Field@1000000003 : Record 2000000041;
      OutputFile@1000000004 : File;
      Value@1000000009 : Text[250];
      ElementValue@1000000011 : ARRAY [10] OF Text[250];
      LabelFileName@1240030000 : Text[250];
    BEGIN
      GetPackingStation;
      PackingStation.TESTFIELD("Label Buffer File");
      PackingStation.TESTFIELD("Std. Pack. Label Printer Port");
      LabelFileName := PackingStation.CalcLabelFileName(PackingStation."Label Buffer File");

      OutputFile.TEXTMODE(TRUE);
      OutputFile.CREATE(LabelFileName);

      LabelHeader.GET(LabelHeaderCode);

      LabelFileTop(LabelHeader,OutputFile);

      LabelLine.RESET;
      LabelLine.SETRANGE("Label Code",LabelHeader.Code);
      IF LabelLine.FIND('-') THEN
        REPEAT
          CLEAR(ElementValue);
          LabelElement.RESET;
          LabelElement.SETRANGE("Label Code",LabelLine."Label Code");
          LabelElement.SETRANGE("Line No.",LabelLine."Line No.");
          IF LabelElement.FIND('-') THEN
            REPEAT
              IF LabelElement."Virtual Field" <> LabelElement."Virtual Field"::" " THEN BEGIN
                ElementValue[LabelElement."Element No."] :=
                  COPYSTR('ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890',1,30);
              END ELSE BEGIN
                IF Field.GET(LabelElement."Table ID",LabelElement."Field ID") THEN
                  ElementValue[LabelElement."Element No."] :=
                    COPYSTR('ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890',1,Field.Len);
              END;

              IF LabelElement."Cut-out Position" <> 0 THEN
                IF LabelElement."Cut-out Position" > STRLEN(ElementValue[LabelElement."Element No."]) THEN
                  ElementValue[LabelElement."Element No."] := ''
                ELSE
                  ElementValue[LabelElement."Element No."] :=
                    COPYSTR(
                      ElementValue[LabelElement."Element No."],
                      LabelElement."Cut-out Position",LabelElement."Cut-out Length");
            UNTIL LabelElement.NEXT = 0;

          Value :=
            COPYSTR(
              STRSUBSTNO(
                LabelLine.Text,
                ElementValue[1],ElementValue[2],ElementValue[3],ElementValue[4],ElementValue[5],
                ElementValue[6],ElementValue[7],ElementValue[8],ElementValue[9],ElementValue[10]),1,250);

          LabelFileLine(LabelHeader,LabelLine,Value,OutputFile);
        UNTIL LabelLine.NEXT = 0;

      LabelFileBottom(LabelHeader,OutputFile,1);

      OutputFile.CLOSE;

      PackingStation.PrintLabel(
        LabelFileName,PackingStation."Std. Pack. Label Printer Port",
        PackingStation."No Label Printer",PackingStation."Auto Delete Label Buffer File",
        LabelHeader.Code,LabelHeader);
    END;

    PROCEDURE LabelFileTop@23(LabelHeader@1000000000 : Record 14000841;VAR OutputFile@1000000001 : File);
    VAR
      TempText@1240030000 : Text[1000];
      Pos@1240030001 : Integer;
    BEGIN
      CASE LabelHeader."Printer Type" OF
        LabelHeader."Printer Type"::"Eltron Orion":
          BEGIN
            OutputFile.WRITE('.');
            IF LabelHeader."Label Height" <> 0 THEN
              OutputFile.WRITE(STRSUBSTNO('Q%1,24',DELCHR(FORMAT(LabelHeader."Label Height"),'=',',.')))
            ELSE
              OutputFile.WRITE('Q1250,24');
            OutputFile.WRITE('q800');
            IF LabelHeader."Print From" = LabelHeader."Print From"::Bottom THEN
              OutputFile.WRITE('ZB')
            ELSE
              OutputFile.WRITE('ZT');
            OutputFile.WRITE('N');
          END;
        LabelHeader."Printer Type"::Zebra:
          BEGIN
            OutputFile.WRITE('^XA');
            IF LabelHeader."Label Height" <> 0 THEN
              OutputFile.WRITE(STRSUBSTNO('^LL%1',DELCHR(FORMAT(LabelHeader."Label Height"),'=',',.')))
            ELSE
              OutputFile.WRITE('^LL1250');
            IF LabelHeader."Print From" = LabelHeader."Print From"::Bottom THEN
              OutputFile.WRITE('^POI')
            ELSE
              OutputFile.WRITE('^PON');
          END;
        LabelHeader."Printer Type"::"Text File":
          IF LabelHeader."Header Text" <> '' THEN BEGIN
            TempText := STRSUBSTNO(LabelHeader."Header Text",USERID,TODAY,TIME);
            REPEAT
              IF LabelHeader."Line Break Text Character" <> '' THEN
                Pos := STRPOS(TempText,LabelHeader."Line Break Text Character")
              ELSE
                Pos := 0;

              CASE Pos OF
                0:
                  OutputFile.WRITE(TempText);
                1:
                  OutputFile.WRITE('');
                ELSE
                  OutputFile.WRITE(COPYSTR(TempText,1,Pos - 1));
              END;

              IF Pos > 0 THEN
                TempText := COPYSTR(TempText,Pos + 1)
              ELSE
                TempText := '';
            UNTIL TempText = '';
          END;
        ELSE
          ERROR(Text015,LabelHeader.Code);
      END;
    END;

    PROCEDURE LabelFileLine@25(LabelHeader@1240030006 : Record 14000841;LabelLine@1000000000 : Record 14000842;Value@1000000001 : Text[1000];VAR OutputFile@1000000002 : File);
    VAR
      TempFilename@1240030000 : Text[250];
      TempBitmapFile@1240030001 : File;
      ReadChar@1240030002 : Char;
      WriteChar@1240030007 : Char;
      BytesPerLine@1240030003 : Integer;
      i@1240030004 : Integer;
      j@1240030005 : Integer;
      Bit@1240030008 : Integer;
      MultipliedHorizontal@1240030009 : Integer;
      HorizontalMultiplier@1240030010 : Integer;
      VerticalMultiplier@1240030011 : Integer;
      MultipliedVertical@1240030012 : Integer;
      WriteCharPos@1240030013 : Integer;
    BEGIN
      CASE LabelHeader."Printer Type" OF
        LabelHeader."Printer Type"::"Eltron Orion":
          IF (STRPOS(Value,'"') > 0) OR (STRPOS(Value,'\') > 0) THEN BEGIN
            i := 1;
            REPEAT
              IF STRPOS('"\',COPYSTR(Value,i,1)) > 0 THEN BEGIN
                IF i = 1 THEN
                  Value := '\' + Value
                ELSE
                  Value := COPYSTR(Value,1,i - 1) + '\' + COPYSTR(Value,i);
                i := i + 1;
              END;
              i := i + 1;
            UNTIL i > STRLEN(Value);
          END;
        LabelHeader."Printer Type"::Zebra:
          Value := CONVERTSTR(Value,'^',' ');
      END;

      IF LabelLine."Min Data Length" > 0 THEN
        IF STRLEN(Value) < LabelLine."Min Data Length" THEN BEGIN
          ERROR(
            Text016,
            LabelLine."Min Data Length",LabelLine."Label Code",LabelLine."Line No.");
        END;

      IF LabelLine."Max Data Length" = 0 THEN
        LabelLine."Max Data Length" := MAXSTRLEN(Value);

      IF LabelLine."Skip If All Elements Blank" AND (Value = '') THEN
        EXIT;

      CASE LabelLine.Type OF
        LabelLine.Type::Text,LabelLine.Type::Barcode,LabelLine.Type::"2D Barcode",
        LabelLine.Type::"RF-ID":
          IF (Value <> '') OR (LabelHeader."Printer Type" = LabelHeader."Printer Type"::"Text File") THEN
            OutputFile.WRITE(
              STRSUBSTNO(LabelLine."Printer String",COPYSTR(Value,1,LabelLine."Max Data Length")));
        LabelLine.Type::Line:
          IF (LabelLine."Printer String" <> '') AND ((LabelLine.Text = '') OR (Value <> '')) THEN
            OutputFile.WRITE(LabelLine."Printer String");
        LabelLine.Type::Bitmap:
          BEGIN
            IF (LabelLine.Text <> '') AND (Value = '') THEN
              EXIT;

            LabelLine.CALCFIELDS(Bitmap);
            IF NOT LabelLine.Bitmap.HASVALUE THEN
              LabelLine.FIELDERROR(Bitmap,Text017);

            IF NOT EVALUATE(HorizontalMultiplier,LabelLine."Horizontal Multiplier") THEN
              LabelLine.FIELDERROR("Horizontal Multiplier",Text018);
            IF NOT EVALUATE(VerticalMultiplier,LabelLine."Vertical Multiplier") THEN
              LabelLine.FIELDERROR("Vertical Multiplier",Text018);

            TempFilename := OutputFile.NAME;
            OutputFile.CLOSE;
            OutputFile.WRITEMODE(TRUE);
            OutputFile.TEXTMODE(FALSE);
            OutputFile.OPEN(TempFilename);
            OutputFile.SEEK(OutputFile.LEN);

            FOR i := 1 TO STRLEN(LabelLine."Printer String") DO BEGIN
              ReadChar := LabelLine."Printer String"[i];
              OutputFile.WRITE(ReadChar);
            END;

            LabelLine.ExportBitmap(TempFilename + '.bmp',FALSE);
            TempBitmapFile.WRITEMODE(FALSE);
            TempBitmapFile.TEXTMODE(FALSE);
            TempBitmapFile.OPEN(TempFilename + '.bmp');
            TempBitmapFile.SEEK(LabelLine."Raster Start Position");
            BytesPerLine := 4 * ((LabelLine."Bitmap Width" DIV 8 + 3) DIV 4);
            FOR i := LabelLine."Bitmap Height" DOWNTO 1 DO BEGIN
              MultipliedVertical := 0;
              REPEAT
                FOR j := 1 TO (LabelLine."Bitmap Width" DIV 8) DO BEGIN
                  TempBitmapFile.SEEK(
                    LabelLine."Raster Start Position" + (i - 1) * BytesPerLine + j - 1);
                  TempBitmapFile.READ(ReadChar);
                  IF ((LabelHeader."Printer Type" = LabelHeader."Printer Type"::Zebra) AND
                      (LabelLine.Image = LabelLine.Image::Normal)) OR
                     ((LabelHeader."Printer Type" = LabelHeader."Printer Type"::"Eltron Orion") AND
                      (LabelLine.Image = LabelLine.Image::Reverse))
                  THEN
                    FOR Bit := 0 TO 7 DO
                      IF (ReadChar DIV POWER(2,Bit)) MOD 2 = 1 THEN
                        ReadChar := ReadChar - POWER(2,Bit)
                      ELSE
                        ReadChar := ReadChar + POWER(2,Bit);

                  IF HorizontalMultiplier > 1 THEN BEGIN
                    WriteChar := 0;
                    WriteCharPos := 7;
                    FOR Bit := 7 DOWNTO 0 DO
                      FOR MultipliedHorizontal := 1 TO HorizontalMultiplier DO BEGIN
                        IF (ReadChar DIV POWER(2,Bit)) MOD 2 = 1 THEN
                          WriteChar := WriteChar + POWER(2,WriteCharPos);

                        WriteCharPos := WriteCharPos - 1;
                        IF WriteCharPos < 0 THEN BEGIN
                          OutputFile.WRITE(WriteChar);

                          WriteChar := 0;
                          WriteCharPos := 7;
                        END;
                      END;
                  END ELSE
                    OutputFile.WRITE(ReadChar);
                END;

                MultipliedVertical := MultipliedVertical + 1;
              UNTIL MultipliedVertical >= VerticalMultiplier;
            END;

            TempBitmapFile.CLOSE;
            ERASE(TempFilename + '.bmp');

            OutputFile.CLOSE;
            OutputFile.WRITEMODE(TRUE);
            OutputFile.TEXTMODE(TRUE);
            OutputFile.OPEN(TempFilename);
            OutputFile.SEEK(OutputFile.LEN);
            OutputFile.WRITE('');
          END;
      END;
    END;

    PROCEDURE LabelFileBottom@24(LabelHeader@1240030000 : Record 14000841;VAR OutputFile@1240030001 : File;NoOfCopies@1240030002 : Integer);
    VAR
      TempText@1240030003 : Text[1000];
      pos@1240030004 : Integer;
    BEGIN
      CASE LabelHeader."Printer Type" OF
        LabelHeader."Printer Type"::"Eltron Orion":
          BEGIN
            IF NoOfCopies > 1 THEN
              OutputFile.WRITE(STRSUBSTNO('P%1',DELCHR(FORMAT(NoOfCopies),'=',',.')))
            ELSE
              OutputFile.WRITE('P1');
            OutputFile.WRITE('.');
          END;
        LabelHeader."Printer Type"::Zebra:
          BEGIN
            IF NoOfCopies > 1 THEN
              OutputFile.WRITE(STRSUBSTNO('^PQ%1,0,0,Y',DELCHR(FORMAT(NoOfCopies),'=',',.')))
            ELSE
              OutputFile.WRITE('^PQ1,0,0,Y');
            OutputFile.WRITE('^XZ');
          END;
        LabelHeader."Printer Type"::"Text File":
          IF LabelHeader."Footer Text" <> '' THEN BEGIN
            TempText := STRSUBSTNO(LabelHeader."Footer Text",NoOfCopies,USERID,TODAY,TIME);
            REPEAT
              IF LabelHeader."Line Break Text Character" <> '' THEN
                pos := STRPOS(TempText,LabelHeader."Line Break Text Character")
              ELSE
                pos := 0;

              CASE pos OF
                0:
                  OutputFile.WRITE(TempText);
                1:
                  OutputFile.WRITE('');
                ELSE
                  OutputFile.WRITE(COPYSTR(TempText,1,pos - 1));
              END;

              IF pos > 0 THEN
                TempText := COPYSTR(TempText,pos + 1)
              ELSE
                TempText := '';
            UNTIL TempText = '';
          END;
        ELSE
          ERROR(Text015,LabelHeader.Code);
      END;
    END;

    PROCEDURE GetVirtualField@12(LabelElement@1000000000 : Record 14000844) : Text[250];
    VAR
      FormatValue@1240030000 : Codeunit 14000845;
      TempCharText@1240030001 : Text[1];
    BEGIN
      CASE LabelElement."Virtual Field" OF
        LabelElement."Virtual Field"::WorkDate:
          EXIT(
            FormatValue.FormatDate(
              WORKDATE,LabelElement."Format Length",
              LabelElement."Format Number",LabelElement."Format String"));
        LabelElement."Virtual Field"::Today:
          EXIT(
            FormatValue.FormatDate(
              TODAY,LabelElement."Format Length",
              LabelElement."Format Number",LabelElement."Format String"));
        LabelElement."Virtual Field"::Time:
          EXIT(
            FormatValue.FormatTime(
              TIME,LabelElement."Format Length",
              LabelElement."Format Number",LabelElement."Format String"));
        LabelElement."Virtual Field"::Char:
          BEGIN
            TempCharText := '';
            TempCharText[1] := LabelElement."Decimal Char Value";
            EXIT(TempCharText);
          END;
        ELSE
          EXIT(FORMAT(LabelElement."Virtual Field"));
      END;
    END;

    LOCAL PROCEDURE GetSalesLine@8(VAR SalesLine@1000000000 : Record 37;SalesHeader@1000000001 : Record 36;PackageLine@1000000002 : Record 14000702;BlankIfMoreThanOne@1000000003 : Boolean);
    BEGIN
      IF (PackageLine."No." <> '') AND (SalesHeader."No." <> '') THEN BEGIN
        CLEAR(SalesLine);
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
        SalesLine.SETRANGE(Type,PackageLine.Type);
        SalesLine.SETRANGE("No.",PackageLine."No.");
        SalesLine.SETRANGE("Variant Code",PackageLine."Variant Code");
        IF SalesLine.FIND('-') THEN
          IF (SalesLine.NEXT <> 0) AND BlankIfMoreThanOne THEN
            CLEAR(SalesLine);
      END ELSE
        CLEAR(SalesLine);
    END;

    LOCAL PROCEDURE GetSalesShipmentLine@20(VAR SalesShipmentLine@1000000000 : Record 111;SalesShipmentHeader@1000000001 : Record 110;PackageLine@1000000002 : Record 14000702;BlankIfMoreThanOne@1000000003 : Boolean);
    BEGIN
      IF (PackageLine."No." <> '') AND (SalesShipmentHeader."No." <> '') THEN BEGIN
        CLEAR(SalesShipmentLine);
        SalesShipmentLine.RESET;
        SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHeader."No.");
        SalesShipmentLine.SETRANGE(Type,PackageLine.Type);
        SalesShipmentLine.SETRANGE("No.",PackageLine."No.");
        SalesShipmentLine.SETRANGE("Variant Code",PackageLine."Variant Code");
        IF SalesShipmentLine.FIND('-') THEN
          IF (SalesShipmentLine.NEXT <> 0) AND BlankIfMoreThanOne THEN
            CLEAR(SalesShipmentLine);
      END ELSE
        CLEAR(SalesShipmentLine);
    END;

    LOCAL PROCEDURE GetSalesLineSummary@1240030007(VAR SalesLine@1000000000 : Record 37;SalesHeader@1000000001 : Record 36;PackageSummaryLine@1000000002 : Record 14000964;BlankIfMoreThanOne@1000000003 : Boolean);
    BEGIN
      IF (PackageSummaryLine."No." <> '') AND (SalesHeader."No." <> '') THEN BEGIN
        CLEAR(SalesLine);
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
        SalesLine.SETRANGE(Type,PackageSummaryLine.Type);
        SalesLine.SETRANGE("No.",PackageSummaryLine."No.");
        SalesLine.SETRANGE("Variant Code",PackageSummaryLine."Variant Code");
        IF SalesLine.FIND('-') THEN
          IF (SalesLine.NEXT <> 0) AND BlankIfMoreThanOne THEN
            CLEAR(SalesLine);
      END ELSE
        CLEAR(SalesLine);
    END;

    LOCAL PROCEDURE GetSalesShipmentLineSummary@1240030006(VAR SalesShipmentLine@1000000000 : Record 111;SalesShipmentHeader@1000000001 : Record 110;PackageSummaryLine@1000000002 : Record 14000964;BlankIfMoreThanOne@1000000003 : Boolean);
    BEGIN
      IF (PackageSummaryLine."No." <> '') AND (SalesShipmentHeader."No." <> '') THEN BEGIN
        CLEAR(SalesShipmentLine);
        SalesShipmentLine.RESET;
        SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHeader."No.");
        SalesShipmentLine.SETRANGE(Type,PackageSummaryLine.Type);
        SalesShipmentLine.SETRANGE("No.",PackageSummaryLine."No.");
        SalesShipmentLine.SETRANGE("Variant Code",PackageSummaryLine."Variant Code");
        IF SalesShipmentLine.FIND('-') THEN
          IF (SalesShipmentLine.NEXT <> 0) AND BlankIfMoreThanOne THEN
            CLEAR(SalesShipmentLine);
      END ELSE
        CLEAR(SalesShipmentLine);
    END;

    PROCEDURE PrintStdReceiveLabel@22(VAR CurrentReceive@1240030000 : Record 14000601);
    BEGIN
      WITH CurrentReceive DO BEGIN
        GetReceiveSetup;
        IF ReceiveSetup."Receive Label Code" <> '' THEN BEGIN
          GetReceiveStation;
          ReceiveStation.TESTFIELD("Label Printer Port");

          PrintReceiveLabel(
            CurrentReceive,ReceiveSetup."Receive Label Code",
            ReceiveStation."Label Printer Port",Text019,1);
          COMMIT;
        END;
      END;
    END;

    PROCEDURE PrintPostedStdReceiveLabel@29(VAR CurrentPostedReceive@1240030000 : Record 14000603);
    BEGIN
      WITH CurrentPostedReceive DO BEGIN
        GetReceiveSetup;
        IF ReceiveSetup."Receive Label Code" <> '' THEN BEGIN
          GetReceiveStation;
          ReceiveStation.TESTFIELD("Label Printer Port");

          PrintPostedReceiveLabel(
            CurrentPostedReceive,ReceiveSetup."Receive Label Code",
            ReceiveStation."Label Printer Port",Text019,1);
          COMMIT;
        END;
      END;
    END;

    PROCEDURE FormatUCC128PrintReceive@26(CurrentReceive@1240030000 : Record 14000601);
    BEGIN
      WITH CurrentReceive DO BEGIN
        IF "UCC No." = '' THEN
          "UCC No. (Print)" := '';

        GetReceiveSetup;
        IF ReceiveSetup."UCC 128 Printing Mask" <> '' THEN
          FormatLabelNoPrint("UCC No. (Print)","UCC No.",ReceiveSetup."UCC 128 Printing Mask")
        ELSE
          "UCC No. (Print)" := "UCC No.";
      END;
    END;

    PROCEDURE FormatUCC128PrintPostedReceive@30(VAR CurrentPostedReceive@1240030000 : Record 14000603);
    VAR
      Receive@1240030001 : Record 14000601;
    BEGIN
      WITH CurrentPostedReceive DO BEGIN
        IF "UCC No." = '' THEN
          "UCC No. (Print)" := '';

        GetReceiveSetup;
        IF ReceiveSetup."UCC 128 Printing Mask" <> '' THEN BEGIN
          Receive.TRANSFERFIELDS(CurrentPostedReceive);
          FormatLabelNoPrint(
            "UCC No. (Print)","UCC No.",ReceiveSetup."UCC 128 Printing Mask");
        END ELSE
          "UCC No. (Print)" := "UCC No.";
      END;
    END;

    PROCEDURE FormatItemEANNumberReceive@28(VAR CurrentReceive@1240030000 : Record 14000601;EANNumber@1240030001 : Code[20]) : Code[50];
    VAR
      EANNumberPrint@1240030003 : Code[50];
    BEGIN
      GetReceiveSetup;

      CASE STRLEN(EANNumber) OF
        12:
          IF ReceiveSetup."Item UPC/EAN Printing Mask" <> '' THEN
            FormatLabelNoPrint(EANNumberPrint,EANNumber,ReceiveSetup."Item UPC/EAN Printing Mask")
          ELSE
            EANNumberPrint := EANNumber;
        14:
          IF ReceiveSetup."Std. Pack UPC/EAN Print. Mask" <> '' THEN
            FormatLabelNoPrint(EANNumberPrint,EANNumber,ReceiveSetup."Std. Pack UPC/EAN Print. Mask")
          ELSE
            EANNumberPrint := EANNumber;
        ELSE
          EANNumberPrint := EANNumber;
      END;
      EXIT(EANNumberPrint);
    END;

    PROCEDURE FormatStdPackageEANNumberRec@27(VAR CurrentReceive@1240030000 : Record 14000601;EANNumber@1240030001 : Code[20]) : Code[50];
    VAR
      EANNumberPrint@1240030003 : Code[50];
    BEGIN
      GetReceiveSetup;

      CASE STRLEN(EANNumber) OF
        12:
          IF ReceiveSetup."Item UPC/EAN Printing Mask" <> '' THEN
            FormatLabelNoPrint(EANNumberPrint,EANNumber,ReceiveSetup."Item UPC/EAN Printing Mask")
          ELSE
            EANNumberPrint := EANNumber;
        14:
          IF ReceiveSetup."Std. Pack UPC/EAN Print. Mask" <> '' THEN
            FormatLabelNoPrint(EANNumberPrint,EANNumber,ReceiveSetup."Std. Pack UPC/EAN Print. Mask")
          ELSE
            EANNumberPrint := EANNumber;
        ELSE
          EANNumberPrint := EANNumber;
      END;
      EXIT(EANNumberPrint);
    END;

    PROCEDURE CloseReceive@31(VAR CurrentReceive@1240030000 : Record 14000601;PrintLabel@1240030001 : Boolean);
    BEGIN
      IF PrintLabel THEN
        PrintStdReceiveLabel(CurrentReceive);
    END;

    LOCAL PROCEDURE PrintReceiveLabel@41(CurrentReceive@1240030000 : Record 14000601;LabelHeaderCode@1240030001 : Code[10];PrinterPort@1240030002 : Code[100];LabelDescription@1240030003 : Text[30];LabelType@1240030004 : Integer);
    VAR
      LabelHeader@1240030005 : Record 14000841;
      LabelLine@1240030006 : Record 14000842;
      ReceiveLine@1240030007 : Record 14000602;
      CompanyInfo@1240030008 : Record 79;
      Vendor@1240030009 : Record 23;
      OrderAddress@1240030010 : Record 224;
      PurchHeader@1240030011 : Record 38;
      PurchLine@1240030012 : Record 39;
      ShippingAgent@1240030013 : Record 291;
      Location@1240030015 : Record 14;
      Country@1240030016 : Record 9;
      FieldValue@1240030017 : Codeunit 14000843;
      Receiving@1240030018 : Codeunit 14000601;
      OutputFile@1240030019 : File;
      Value@1240030024 : Text[1000];
      i@1240030025 : Integer;
      ItemLabelInfo@1240030026 : ARRAY [10,8] OF Text[50];
      LabelFileName@1240030014 : Text[250];
    BEGIN
      CLEAR(FieldValue);

      GetReceiveStation;
      FieldValue.ReceiveStation_14000608(ReceiveStation,0);

      FieldValue.Receive_14000601(CurrentReceive,0);

      CompanyInfo.GET;
      FieldValue.CompanyInformation_79(CompanyInfo,0);

      IF NOT PurchHeader.GET(CurrentReceive."Source Subtype",CurrentReceive."Source ID") THEN
        CLEAR(PurchHeader);
      FieldValue.PurchaseHeader_38(PurchHeader,0);

      IF NOT Location.GET(PurchHeader."Location Code") THEN
        CLEAR(Location);
      FieldValue.Location_14(Location,0);

      IF NOT Vendor.GET(CurrentReceive."Ship-from No.") THEN
        CLEAR(Vendor);
      FieldValue.Vendor_23(Vendor,0);
      IF NOT Vendor.GET(PurchHeader."Buy-from Vendor No.") THEN
        CLEAR(OrderAddress);
      FieldValue.Vendor_23(Vendor,1);
      IF NOT Vendor.GET(PurchHeader."Pay-to Vendor No.") THEN
        CLEAR(OrderAddress);
      FieldValue.Vendor_23(Vendor,2);

      IF NOT OrderAddress.GET(CurrentReceive."Ship-from No.",CurrentReceive."Ship-from Code") THEN
        CLEAR(OrderAddress);
      FieldValue.OrderAddress_224(OrderAddress,0);
      IF NOT OrderAddress.GET(PurchHeader."Buy-from Vendor No.",PurchHeader."Order Address Code") THEN
        CLEAR(OrderAddress);
      FieldValue.OrderAddress_224(OrderAddress,1);
      IF NOT OrderAddress.GET(PurchHeader."Buy-from Vendor No.",PurchHeader."Order Address Code") THEN
        CLEAR(OrderAddress);
      FieldValue.OrderAddress_224(OrderAddress,2);

      IF NOT ShippingAgent.GET(CurrentReceive."Shipping Agent Code") THEN
        CLEAR(ShippingAgent);
      FieldValue.ShippingAgent_291(ShippingAgent,0);

      IF NOT Country.GET(PurchHeader."Ship-to Country/Region Code") THEN
        CLEAR(Country);
      FieldValue.CountryRegion_9(Country,0);

      CLEAR(ReceiveLine);
      ReceiveLine.RESET;
      ReceiveLine.SETRANGE("Receive No.",CurrentReceive."No.");
      IF ReceiveLine.FIND('-') THEN
        IF ReceiveLine.NEXT <> 0 THEN
          CLEAR(ReceiveLine);
      FieldValue.ReceiveLine_14000602(ReceiveLine,0);

      GetPurchLine(PurchLine,PurchHeader,ReceiveLine,TRUE);
      FieldValue.PurchaseLine_39(PurchLine,0);

      ReceiveLine.RESET;
      ReceiveLine.SETRANGE("Receive No.",CurrentReceive."No.");
      FOR i := 1 TO FieldValue.GetMaxRecordNo DO BEGIN
        IF i = 1 THEN BEGIN
          IF NOT ReceiveLine.FIND('-') THEN
            CLEAR(ReceiveLine);
        END ELSE BEGIN
          IF ReceiveLine."Receive No." <> '' THEN
            IF ReceiveLine.NEXT = 0 THEN
              CLEAR(ReceiveLine);
        END;

        FieldValue.ReceiveLine_14000602(ReceiveLine,i);

        GetPurchLine(PurchLine,PurchHeader,ReceiveLine,FALSE);
        FieldValue.PurchaseLine_39(PurchLine,i);
      END;

      // Additional tables can be loaded here.

      ReceiveStation.TESTFIELD("Label Buffer File");
      LabelFileName := ReceiveStation.CalcLabelFileName(ReceiveStation."Label Buffer File");

      OutputFile.TEXTMODE(TRUE);
      OutputFile.CREATE(LabelFileName);

      LabelHeader.GET(LabelHeaderCode);

      FieldValue.LabelHeader_14000841(LabelHeader,0);
      LabelFileTop(LabelHeader,OutputFile);

      LabelLine.RESET;
      LabelLine.SETRANGE("Label Code",LabelHeader.Code);
      IF LabelLine.FIND('-') THEN BEGIN
        FieldValue.SetPosted(FALSE);
        REPEAT
          FieldValue.LabelLine_14000842(LabelLine,0);
          Value := FieldValue.SubstituteLine(LabelLine);

          LabelFileLine(LabelHeader,LabelLine,Value,OutputFile);
        UNTIL LabelLine.NEXT = 0;
      END;

      IF LabelHeader."Add Item Info on Label" THEN BEGIN
        CLEAR(ItemLabelInfo);
        Receiving.GetItemLabelInfo(CurrentReceive,ItemLabelInfo);
        CASE LabelHeader."Printer Type"OF
          LabelHeader."Printer Type"::"Eltron Orion":
            Receiving.DirectPrintOrionLabelInfo(OutputFile,ItemLabelInfo);
          LabelHeader."Printer Type"::Zebra:
            Receiving.DirectPrintZebraLabelInfo(OutputFile,ItemLabelInfo);
        END;
      END;

      LabelFileBottom(LabelHeader,OutputFile,1);

      OutputFile.CLOSE;
      IF PrinterPort = '' THEN
        ERROR(Text014)
      ELSE BEGIN
        CurrentReceive.InsertLabelFile(
          LabelFileName,LabelDescription,LabelType,
          PrinterPort,ReceiveStation.Code,NOT ReceiveStation."No Label Printer",
          PackingStation."Do Not Import Label File");

        ReceiveStation.PrintLabel(
          LabelFileName,PrinterPort,
          ReceiveStation."No Label Printer",ReceiveStation."Auto Delete Label Buffer File",
          CurrentReceive."No.",LabelHeader);
      END;
    END;

    LOCAL PROCEDURE PrintPostedReceiveLabel@40(CurrentPostedReceive@1240030000 : Record 14000603;LabelHeaderCode@1240030001 : Code[10];PrinterPort@1240030002 : Code[100];LabelDescription@1240030003 : Text[30];LabelType@1240030004 : Integer);
    VAR
      Receive@1240030005 : Record 14000601;
      PostedReceiveLine@1240030006 : Record 14000604;
      ReceiveLine@1240030007 : Record 14000602;
      LabelHeader@1240030008 : Record 14000841;
      LabelLine@1240030009 : Record 14000842;
      CompanyInfo@1240030010 : Record 79;
      Vendor@1240030011 : Record 23;
      OrderAddress@1240030012 : Record 224;
      PurchHeader@1240030013 : Record 38;
      PurchLine@1240030014 : Record 39;
      PurchReceiptHeader@1240030015 : Record 120;
      PurchReceiptLine@1240030016 : Record 121;
      ShippingAgent@1240030017 : Record 291;
      Location@1240030018 : Record 14;
      Country@1240030019 : Record 9;
      FieldValue@1240030020 : Codeunit 14000843;
      Receiving@1240030021 : Codeunit 14000601;
      OutputFile@1240030022 : File;
      Value@1240030024 : Text[1000];
      i@1240030025 : Integer;
      ItemLabelInfo@1240030026 : ARRAY [10,8] OF Text[50];
      LabelFileName@1240030023 : Text[250];
    BEGIN
      CLEAR(FieldValue);

      GetReceiveStation;
      FieldValue.ReceiveStation_14000608(ReceiveStation,0);

      Receive.TRANSFERFIELDS(CurrentPostedReceive);
      FieldValue.Receive_14000601(Receive,0);

      CompanyInfo.GET;
      FieldValue.CompanyInformation_79(CompanyInfo,0);

      IF PurchReceiptHeader.GET(CurrentPostedReceive."Posted Source ID") THEN
        PurchHeader.TRANSFERFIELDS(PurchReceiptHeader)
      ELSE
        CLEAR(PurchHeader);
      FieldValue.PurchaseHeader_38(PurchHeader,0);

      IF NOT Location.GET(PurchHeader."Location Code") THEN
        CLEAR(Location);
      FieldValue.Location_14(Location,0);

      IF NOT Vendor.GET(CurrentPostedReceive."Ship-from No.") THEN
        CLEAR(OrderAddress);
      FieldValue.Vendor_23(Vendor,0);
      IF NOT Vendor.GET(PurchHeader."Buy-from Vendor No.") THEN
        CLEAR(OrderAddress);
      FieldValue.Vendor_23(Vendor,1);
      IF NOT Vendor.GET(PurchHeader."Pay-to Vendor No.") THEN
        CLEAR(OrderAddress);
      FieldValue.Vendor_23(Vendor,2);

      IF NOT OrderAddress.GET(CurrentPostedReceive."Ship-from No.",CurrentPostedReceive."Ship-from Code") THEN
        CLEAR(OrderAddress);
      FieldValue.OrderAddress_224(OrderAddress,0);
      IF NOT OrderAddress.GET(PurchHeader."Buy-from Vendor No.",PurchHeader."Order Address Code") THEN
        CLEAR(OrderAddress);
      FieldValue.OrderAddress_224(OrderAddress,1);
      IF NOT OrderAddress.GET(PurchHeader."Buy-from Vendor No.",PurchHeader."Order Address Code") THEN
        CLEAR(OrderAddress);
      FieldValue.OrderAddress_224(OrderAddress,2);

      IF NOT ShippingAgent.GET(CurrentPostedReceive."Shipping Agent Code") THEN
        CLEAR(ShippingAgent);
      FieldValue.ShippingAgent_291(ShippingAgent,0);

      IF NOT Country.GET(PurchHeader."Ship-to Country/Region Code") THEN
        CLEAR(Country);
      FieldValue.CountryRegion_9(Country,0);

      CLEAR(PostedReceiveLine);
      PostedReceiveLine.RESET;
      PostedReceiveLine.SETRANGE("Receive No.",Receive."No.");
      IF PostedReceiveLine.FIND('-') THEN
        IF PostedReceiveLine.NEXT <> 0 THEN
          CLEAR(PostedReceiveLine);
      ReceiveLine.TRANSFERFIELDS(PostedReceiveLine);
      FieldValue.ReceiveLine_14000602(ReceiveLine,0);

      GetPurchReceiptLine(PurchReceiptLine,PurchReceiptHeader,ReceiveLine,TRUE);
      PurchLine.TRANSFERFIELDS(PurchReceiptLine);
      FieldValue.PurchaseLine_39(PurchLine,0);

      PostedReceiveLine.RESET;
      PostedReceiveLine.SETRANGE("Receive No.",Receive."No.");
      FOR i := 1 TO FieldValue.GetMaxRecordNo DO BEGIN
        IF i = 1 THEN BEGIN
          IF NOT PostedReceiveLine.FIND('-') THEN
            CLEAR(PostedReceiveLine);
        END ELSE BEGIN
          IF PostedReceiveLine."Receive No." <> '' THEN
            IF PostedReceiveLine.NEXT = 0 THEN
              CLEAR(PostedReceiveLine);
        END;

        ReceiveLine.TRANSFERFIELDS(PostedReceiveLine);
        FieldValue.ReceiveLine_14000602(ReceiveLine,i);

        GetPurchReceiptLine(PurchReceiptLine,PurchReceiptHeader,ReceiveLine,FALSE);
        PurchLine.TRANSFERFIELDS(PurchReceiptLine);
        FieldValue.PurchaseLine_39(PurchLine,i);
      END;

      // Additional tables can be loaded here.

      ReceiveStation.TESTFIELD("Label Buffer File");
      LabelFileName := ReceiveStation.CalcLabelFileName(ReceiveStation."Label Buffer File");

      OutputFile.TEXTMODE(TRUE);
      OutputFile.CREATE(LabelFileName);

      LabelHeader.GET(LabelHeaderCode);

      FieldValue.LabelHeader_14000841(LabelHeader,0);
      LabelFileTop(LabelHeader,OutputFile);

      LabelLine.RESET;
      LabelLine.SETRANGE("Label Code",LabelHeader.Code);
      IF LabelLine.FIND('-') THEN BEGIN
        FieldValue.SetPosted(TRUE);
        REPEAT
          FieldValue.LabelLine_14000842(LabelLine,0);
          Value := FieldValue.SubstituteLine(LabelLine);

          LabelFileLine(LabelHeader,LabelLine,Value,OutputFile);
        UNTIL LabelLine.NEXT = 0;
        FieldValue.SetPosted(FALSE);
      END;

      IF LabelHeader."Add Item Info on Label" THEN BEGIN
        CLEAR(ItemLabelInfo);
        Receiving.GetItemLabelInfo(Receive,ItemLabelInfo);
        CASE LabelHeader."Printer Type"OF
          LabelHeader."Printer Type"::"Eltron Orion":
            Receiving.DirectPrintOrionLabelInfo(OutputFile,ItemLabelInfo);
          LabelHeader."Printer Type"::Zebra:
            Receiving.DirectPrintZebraLabelInfo(OutputFile,ItemLabelInfo);
        END;
      END;

      LabelFileBottom(LabelHeader,OutputFile,1);

      OutputFile.CLOSE;

      IF PrinterPort = '' THEN
        ERROR(Text014)
      ELSE BEGIN
        Receive.InsertLabelFile(
          LabelFileName,LabelDescription,LabelType,
          PrinterPort,ReceiveStation.Code,NOT ReceiveStation."No Label Printer",
          PackingStation."Do Not Import Label File");

        ReceiveStation.PrintLabel(
          LabelFileName,PrinterPort,
          ReceiveStation."No Label Printer",ReceiveStation."Auto Delete Label Buffer File",
          CurrentPostedReceive."No.",LabelHeader);
      END;
    END;

    PROCEDURE TestPrintReceiveLabel@39(LabelHeaderCode@1240030000 : Code[10]);
    VAR
      LabelHeader@1240030001 : Record 14000841;
      LabelLine@1240030002 : Record 14000842;
      LabelElement@1240030003 : Record 14000844;
      Field@1240030004 : Record 2000000041;
      OutputFile@1240030005 : File;
      Value@1240030010 : Text[250];
      ElementValue@1240030011 : ARRAY [10] OF Text[250];
      LabelFileName@1240030006 : Text[250];
    BEGIN
      GetReceiveStation;
      ReceiveStation.TESTFIELD("Label Buffer File");
      ReceiveStation.TESTFIELD("Label Printer Port");
      LabelFileName := ReceiveStation.CalcLabelFileName(ReceiveStation."Label Buffer File");

      OutputFile.TEXTMODE(TRUE);
      OutputFile.CREATE(LabelFileName);

      LabelHeader.GET(LabelHeaderCode);

      LabelFileTop(LabelHeader,OutputFile);

      LabelLine.RESET;
      LabelLine.SETRANGE("Label Code",LabelHeader.Code);
      IF LabelLine.FIND('-') THEN
        REPEAT
          CLEAR(ElementValue);
          LabelElement.RESET;
          LabelElement.SETRANGE("Label Code",LabelLine."Label Code");
          LabelElement.SETRANGE("Line No.",LabelLine."Line No.");
          IF LabelElement.FIND('-') THEN
            REPEAT
              IF LabelElement."Virtual Field" <> LabelElement."Virtual Field"::" " THEN BEGIN
                ElementValue[LabelElement."Element No."] :=
                  COPYSTR('ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890',1,30);
              END ELSE BEGIN
                IF Field.GET(LabelElement."Table ID",LabelElement."Field ID") THEN
                  ElementValue[LabelElement."Element No."] :=
                    COPYSTR('ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890',1,Field.Len);
              END;

              IF LabelElement."Cut-out Position" <> 0 THEN
                IF LabelElement."Cut-out Position" > STRLEN(ElementValue[LabelElement."Element No."]) THEN
                  ElementValue[LabelElement."Element No."] := ''
                ELSE
                  ElementValue[LabelElement."Element No."] :=
                    COPYSTR(
                      ElementValue[LabelElement."Element No."],
                      LabelElement."Cut-out Position",LabelElement."Cut-out Length");
            UNTIL LabelElement.NEXT = 0;

          Value :=
            COPYSTR(
              STRSUBSTNO(
                LabelLine.Text,
                ElementValue[1],ElementValue[2],ElementValue[3],ElementValue[4],ElementValue[5],
                ElementValue[6],ElementValue[7],ElementValue[8],ElementValue[9],ElementValue[10]),1,250);

          LabelFileLine(LabelHeader,LabelLine,Value,OutputFile);
        UNTIL LabelLine.NEXT = 0;

      LabelFileBottom(LabelHeader,OutputFile,1);

      OutputFile.CLOSE;

      ReceiveStation.PrintLabel(
        LabelFileName,ReceiveStation."Label Printer Port",
        ReceiveStation."No Label Printer",ReceiveStation."Auto Delete Label Buffer File",
        LabelHeader.Code,LabelHeader);
    END;

    LOCAL PROCEDURE GetPurchLine@35(VAR PurchLine@1240030000 : Record 39;PurchHeader@1240030001 : Record 38;ReceiveLine@1240030002 : Record 14000602;BlankIfMoreThanOne@1240030003 : Boolean);
    BEGIN
      IF (ReceiveLine."No." <> '') AND (PurchHeader."No." <> '') THEN BEGIN
        CLEAR(PurchLine);
        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
        PurchLine.SETRANGE("Document No.",PurchHeader."No.");
        PurchLine.SETRANGE(Type,ReceiveLine.Type);
        PurchLine.SETRANGE("No.",ReceiveLine."No.");
        PurchLine.SETRANGE("Variant Code",ReceiveLine."Variant Code");
        IF PurchLine.FIND('-') THEN
          IF (PurchLine.NEXT <> 0) AND BlankIfMoreThanOne THEN
            CLEAR(PurchLine);
      END ELSE
        CLEAR(PurchLine);
    END;

    LOCAL PROCEDURE GetPurchReceiptLine@32(VAR PurchReceiptLine@1240030000 : Record 121;PurchReceiptHeader@1240030001 : Record 120;ReceiveLine@1240030002 : Record 14000602;BlankIfMoreThanOne@1240030003 : Boolean);
    BEGIN
      IF (ReceiveLine."No." <> '') AND (PurchReceiptHeader."No." <> '') THEN BEGIN
        CLEAR(PurchReceiptLine);
        PurchReceiptLine.RESET;
        PurchReceiptLine.SETRANGE("Document No.",PurchReceiptHeader."No.");
        PurchReceiptLine.SETRANGE(Type,ReceiveLine.Type);
        PurchReceiptLine.SETRANGE("No.",ReceiveLine."No.");
        PurchReceiptLine.SETRANGE("Variant Code",ReceiveLine."Variant Code");
        IF PurchReceiptLine.FIND('-') THEN
          IF (PurchReceiptLine.NEXT <> 0) AND BlankIfMoreThanOne THEN
            CLEAR(PurchReceiptLine);
      END ELSE
        CLEAR(PurchReceiptLine);
    END;

    PROCEDURE PrintReceiveLineLabel@36(ReceiveLine@1240030000 : Record 14000602;QuantityAdded@1240030001 : Decimal;QuantityBaseAdded@1240030002 : Decimal;ManualPrinting@1240030003 : Boolean);
    VAR
      ReceiveRule@1240030004 : Record 14000612;
      ReceiveLineLabel@1240030005 : Report 14000847;
    BEGIN
      IF ReceiveLine.Type <> ReceiveLine.Type::Item THEN
        EXIT;

      ReceiveRule.GetReceiveRule(ReceiveLine."No.");

      IF NOT ReceiveRule."Automatic Print Label" AND NOT ManualPrinting THEN
        EXIT;

      IF ReceiveRule."Item Label Code" <> '' THEN BEGIN
        CLEAR(ReceiveLineLabel);
        ReceiveLine.SETRECFILTER;
        ReceiveLineLabel.SETTABLEVIEW(ReceiveLine);
        CASE ReceiveRule."No. of Labels" OF
          ReceiveRule."No. of Labels"::Quantity:
            ReceiveLineLabel.InitializeRequest(
              ReceiveRule."Item Label Code",ROUND(QuantityAdded,1,'>'));
          ReceiveRule."No. of Labels"::"Quantity (Base)":
            ReceiveLineLabel.InitializeRequest(
              ReceiveRule."Item Label Code",ROUND(QuantityBaseAdded,1,'>'));
          ELSE
            ReceiveLineLabel.InitializeRequest(ReceiveRule."Item Label Code",1);
        END;
        ReceiveLineLabel.USEREQUESTPAGE(FALSE);
        ReceiveLineLabel.RUNMODAL;
      END;
    END;

    PROCEDURE PrintPostedReceiveLineLabel@37(PostedReceiveLine@1240030000 : Record 14000604;QuantityAdded@1240030001 : Decimal;QuantityBaseAdded@1240030002 : Decimal;ManualPrinting@1240030003 : Boolean);
    VAR
      ReceiveRule@1240030004 : Record 14000612;
      ReceiveLineLabel@1240030005 : Report 14000847;
    BEGIN
      IF PostedReceiveLine.Type <> PostedReceiveLine.Type::Item THEN
        EXIT;

      ReceiveRule.GetReceiveRule(PostedReceiveLine."No.");

      IF NOT ReceiveRule."Automatic Print Label" AND NOT ManualPrinting THEN
        EXIT;

      IF ReceiveRule."Item Label Code" <> '' THEN BEGIN
        CLEAR(ReceiveLineLabel);
        PostedReceiveLine.SETRECFILTER;
        ReceiveLineLabel.SETTABLEVIEW(PostedReceiveLine);
        CASE ReceiveRule."No. of Labels" OF
          ReceiveRule."No. of Labels"::Quantity:
            ReceiveLineLabel.InitializeRequest(
              ReceiveRule."Item Label Code",ROUND(QuantityAdded,1,'>'));
          ReceiveRule."No. of Labels"::"Quantity (Base)":
            ReceiveLineLabel.InitializeRequest(
              ReceiveRule."Item Label Code",ROUND(QuantityBaseAdded,1,'>'));
          ELSE
            ReceiveLineLabel.InitializeRequest(ReceiveRule."Item Label Code",1);
        END;
        ReceiveLineLabel.USEREQUESTPAGE(FALSE);
        ReceiveLineLabel.RUNMODAL;
      END;
    END;

    PROCEDURE PrintBillOfLadingLabel@1240030003(VAR CurrentBillOfLading@1000000000 : Record 14000822);
    VAR
      PackingRule@1000000001 : Record 14000715;
    BEGIN
      WITH CurrentBillOfLading DO BEGIN
        GetShippingSetup;
        IF PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code") THEN
          IF PackingRule."Bill of Lading Label Code" <> '' THEN BEGIN
            GetPackingStation;
            PackingStation.TESTFIELD("Std. Pack. Label Printer Port");

            DirectPrintBillOfLadingLabel(
              CurrentBillOfLading,PackingRule."Bill of Lading Label Code",
              PackingStation."Std. Pack. Label Printer Port",Text020,1);
            COMMIT;
          END;
      END;
    END;

    LOCAL PROCEDURE DirectPrintBillOfLadingLabel@1240030001(CurrentBillOfLading@1240030006 : Record 14000822;LabelHeaderCode@1240030005 : Code[10];PrinterPort@1240030004 : Code[100];LabelDescription@1240030002 : Text[30];LabelType@1240030001 : Integer);
    VAR
      BillOfLading@1240030008 : Record 14000822;
      BillOfLadingLine@1240030013 : Record 14000823;
      BillOfLadingInfoLine@1240030017 : Record 14000827;
      Customer@1240030019 : Record 18;
      ShipToAddress@1240030020 : Record 222;
      PackingRule@1240030021 : Record 14000715;
      LabelHeader@1240030026 : Record 14000841;
      LabelLine@1240030025 : Record 14000842;
      CompanyInfo@1240030023 : Record 79;
      ShippingAgent@1240030018 : Record 291;
      ShippingAgentService@1240030022 : Record 14000708;
      Location@1240030016 : Record 14;
      Country@1240030015 : Record 9;
      FieldValue@1240030014 : Codeunit 14000843;
      OutputFile@1240030012 : File;
      Value@1240030007 : Text[1000];
      i@1240030003 : Integer;
      LabelFileName@1240030009 : Text[250];
    BEGIN
      CLEAR(FieldValue);

      GetPackingStation;
      FieldValue.PackingStation_14000709(PackingStation,0);

      FieldValue.BillofLading_14000822(CurrentBillOfLading,0);

      CompanyInfo.GET;
      FieldValue.CompanyInformation_79(CompanyInfo,0);

      IF NOT Location.GET(CurrentBillOfLading."Location Code") THEN
        CLEAR(Location);
      FieldValue.Location_14(Location,0);

      IF NOT Customer.GET(CurrentBillOfLading."Ship-to No.") THEN
        CLEAR(Customer);
      FieldValue.Customer_18(Customer,0);

      IF NOT ShipToAddress.GET(
               CurrentBillOfLading."Ship-to No.",CurrentBillOfLading."Ship-to Code")
      THEN
        CLEAR(ShipToAddress);
      FieldValue.ShiptoAddress_222(ShipToAddress,0);

      PackingRule.GetPackingRule(
         CurrentBillOfLading."Ship-to Type",CurrentBillOfLading."Ship-to No.",
         CurrentBillOfLading."Ship-to Code");
      FieldValue.PackingRule_14000715(PackingRule,0);

      CLEAR(BillOfLadingLine);
      BillOfLadingLine.RESET;
      BillOfLadingLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      IF BillOfLadingLine.FIND('-') THEN
        IF BillOfLadingLine.NEXT <> 0 THEN
          CLEAR(BillOfLadingLine);
      FieldValue.BillofLadingLine_14000823(BillOfLadingLine,0);

      BillOfLadingLine.RESET;
      BillOfLadingLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      IF BillOfLadingLine.FIND('-') THEN
        i := 1;
        REPEAT
          FieldValue.BillofLadingLine_14000823(BillOfLadingLine,i);
          i := i + 1;
        UNTIL (BillOfLadingLine.NEXT = 0) OR (i >= FieldValue.GetMaxRecordNo);

      CLEAR(BillOfLadingInfoLine);
      BillOfLadingInfoLine.RESET;
      BillOfLadingInfoLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      IF BillOfLadingInfoLine.FIND('-') THEN
        IF BillOfLadingInfoLine.NEXT <> 0 THEN
          CLEAR(BillOfLadingInfoLine);
      FieldValue.BillofLadingInfoLine_14000827(BillOfLadingInfoLine,0);

      BillOfLadingInfoLine.RESET;
      BillOfLadingInfoLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      IF BillOfLadingInfoLine.FIND('-') THEN
        i := 1;
        REPEAT
          FieldValue.BillofLadingInfoLine_14000827(BillOfLadingInfoLine,i);
          i := i + 1;
        UNTIL (BillOfLadingInfoLine.NEXT = 0) OR (i >= FieldValue.GetMaxRecordNo);

      CLEAR(BillOfLading);
      BillOfLadingLine.RESET;
      BillOfLadingLine.SETFILTER(
        Type,'%1|%2',BillOfLadingLine.Type::"Bill of Lading",
        BillOfLadingLine.Type::"Bill of Lading (Released)");
      BillOfLadingLine.SETRANGE("No.",CurrentBillOfLading."No.");
      IF BillOfLadingLine.FIND('-') THEN
        IF BillOfLading.GET(BillOfLadingLine."Bill of Lading No.") THEN
          ;
      FieldValue.BillofLading_14000822(BillOfLading,1);

      CLEAR(ShippingAgent);
      IF NOT ShippingAgent.GET(CurrentBillOfLading."Shipping Agent Code") THEN
        CLEAR(ShippingAgent);
      FieldValue.ShippingAgent_291(ShippingAgent,0);

      CLEAR(ShippingAgentService);
      IF NOT ShippingAgentService.GET(
               CurrentBillOfLading."Shipping Agent Code",
               CurrentBillOfLading."Shipping Agent Service",
               CurrentBillOfLading."World Wide Service")
      THEN
        CLEAR(ShippingAgentService);
      FieldValue.EShipAgentService_14000708(ShippingAgentService,0);

      IF NOT Country.GET(CurrentBillOfLading."Ship-to Country Code") THEN
        CLEAR(Country);
      FieldValue.CountryRegion_9(Country,0);

      // Additional tables can be loaded here.

      PackingStation.TESTFIELD("Label Buffer File");
      LabelFileName := PackingStation.CalcLabelFileName(PackingStation."Label Buffer File");

      OutputFile.TEXTMODE(TRUE);
      OutputFile.CREATE(LabelFileName);

      LabelHeader.GET(LabelHeaderCode);

      FieldValue.LabelHeader_14000841(LabelHeader,0);
      LabelFileTop(LabelHeader,OutputFile);

      LabelLine.RESET;
      LabelLine.SETRANGE("Label Code",LabelHeader.Code);
      IF LabelLine.FIND('-') THEN BEGIN
        FieldValue.SetPosted(FALSE);
        REPEAT
          FieldValue.LabelLine_14000842(LabelLine,0);
          Value := FieldValue.SubstituteLine(LabelLine);

          LabelFileLine(LabelHeader,LabelLine,Value,OutputFile);
        UNTIL LabelLine.NEXT = 0;
      END;

      LabelFileBottom(LabelHeader,OutputFile,1);

      OutputFile.CLOSE;

      IF PrinterPort = '' THEN
        ERROR(Text014)
      ELSE BEGIN
        CurrentBillOfLading.InsertLabelFile(
          LabelFileName,LabelDescription,LabelType,
          PrinterPort,PackingStation.Code,NOT PackingStation."No Label Printer",
          PackingStation."Do Not Import Label File");
        PackingStation.PrintLabel(
          LabelFileName,PrinterPort,
          PackingStation."No Label Printer",PackingStation."Auto Delete Label Buffer File",
          CurrentBillOfLading."No.",LabelHeader);
      END;
    END;

    PROCEDURE PrintLTLSOLabel@1000000000(CurrentSO@1000000015 : Record 36;LabelHeaderCode@1000000014 : Code[10];copies@1000000013 : Integer);
    VAR
      LabelHeader@1000000001 : Record 14000841;
      LabelLine@1000000002 : Record 14000842;
      LabelElement@1000000010 : Record 14000844;
      Field@1000000003 : Record 2000000041;
      SalesHeader@1000000016 : Record 36;
      CompanyInfo@1000000000 : Record 79;
      OutputFile@1000000004 : File;
      ValuesEntered@1000000005 : Integer;
      ReturnCode@1000000006 : Integer;
      FormatValue@1000000007 : ARRAY [10] OF Text[250];
      FormattedString@1000000008 : Text[250];
      Value@1000000009 : Text[250];
      ElementValue@1000000011 : ARRAY [10] OF Text[250];
      FieldValue@1000000017 : Codeunit 14000843;
      i@1000000012 : Integer;
      LabelFileName@1000000018 : Text[250];
    BEGIN
      //TM BEG 071015
      GetPackingStation;
      PackingStation.TESTFIELD("Label Buffer File");
      PackingStation.TESTFIELD("Std. Pack. Label Printer Port");

      LabelFileName := PackingStation.CalcLabelFileName(PackingStation."Label Buffer File");
      CompanyInfo.GET;
      FieldValue.CompanyInformation_79(CompanyInfo,0);

      //IF NOT SalesHeader.GET(CurrentSO."Document Type"::Order,CurrentSO."No.") THEN
      //  CLEAR(SalesHeader);
      FieldValue.SalesHeader_36(CurrentSO,0);

      OutputFile.TEXTMODE(TRUE);
      OutputFile.CREATE(LabelFileName);

      LabelHeader.GET(LabelHeaderCode);
      FieldValue.LabelHeader_14000841(LabelHeader,0);
      LabelFileTop(LabelHeader,OutputFile);

      LabelLine.RESET;
      LabelLine.SETRANGE("Label Code",LabelHeader.Code);
      IF LabelLine.FIND('-') THEN
        REPEAT
          FieldValue.LabelLine_14000842(LabelLine,0);
          Value := FieldValue.SubstituteLine(LabelLine);

          LabelFileLine(LabelHeader,LabelLine,Value,OutputFile);
        UNTIL LabelLine.NEXT = 0;

      LabelFileBottom(LabelHeader,OutputFile,1);

      OutputFile.CLOSE;

      IF NOT PackingStation."No Label Printer" THEN
        FOR i := 1 TO copies DO
        BEGIN
          PackingStation.PrintLabel(
            LabelFileName,PackingStation."Std. Pack. Label Printer Port",
            PackingStation."No Label Printer",FALSE,//PackingStation."Auto Delete Label Buffer File",
            SalesHeader."No.",LabelHeader);
        END;
      //TM END 071015
    END;

    PROCEDURE PrintItemLabel@1000000001(CurrentItem@1000000015 : Record 27;LabelHeaderCode@1000000014 : Code[10];copies@1000000013 : Integer);
    VAR
      LabelHeader@1000000001 : Record 14000841;
      LabelLine@1000000002 : Record 14000842;
      LabelElement@1000000010 : Record 14000844;
      Field@1000000003 : Record 2000000041;
      Item@1000000016 : Record 27;
      CompanyInfo@1000000000 : Record 79;
      OutputFile@1000000004 : File;
      ValuesEntered@1000000005 : Integer;
      ReturnCode@1000000006 : Integer;
      FormatValue@1000000007 : ARRAY [10] OF Text[250];
      FormattedString@1000000008 : Text[250];
      Value@1000000009 : Text[250];
      ElementValue@1000000011 : ARRAY [10] OF Text[250];
      FieldValue@1000000017 : Codeunit 14000843;
      i@1000000012 : Integer;
    BEGIN
      //TM BEG 071015
      GetPackingStation;
      PackingStation.TESTFIELD("Label Buffer File");
      PackingStation.TESTFIELD("Std. Pack. Label Printer Port");

      CompanyInfo.GET;
      FieldValue.CompanyInformation_79(CompanyInfo,0);

      IF NOT Item.GET(CurrentItem."No.") THEN
        CLEAR(Item);
      FieldValue.Item_27(Item,0);

      OutputFile.TEXTMODE(TRUE);
      OutputFile.CREATE(PackingStation."Label Buffer File");

      LabelHeader.GET(LabelHeaderCode);
      FieldValue.LabelHeader_14000841(LabelHeader,0);
      LabelFileTop(LabelHeader,OutputFile);

      LabelLine.RESET;
      LabelLine.SETRANGE("Label Code",LabelHeader.Code);
      IF LabelLine.FIND('-') THEN
        REPEAT
          FieldValue.LabelLine_14000842(LabelLine,0);
          Value := FieldValue.SubstituteLine(LabelLine);

          LabelFileLine(LabelHeader,LabelLine,Value,OutputFile);
        UNTIL LabelLine.NEXT = 0;

      LabelFileBottom(LabelHeader,OutputFile,1);

      OutputFile.CLOSE;

      IF NOT PackingStation."No Label Printer" THEN
        FOR i := 1 TO copies DO
        BEGIN
        {
        ReturnCode :=

        // <TOP4076>
          SHELL(
            ENVIRON('COMSPEC'),
            ' /c type ' + PackingStation."Label Buffer File" + ' > ' + PackingStation."Std. Pack. Label Printer Port");
        // </TOP4076>
        }
        END;
      //TM END 071015
    END;

    PROCEDURE PrintLTLTOLabel@1000000002(CurrentTO@1000000015 : Record 5740;LabelHeaderCode@1000000014 : Code[10];copies@1000000013 : Integer);
    VAR
      LabelHeader@1000000001 : Record 14000841;
      LabelLine@1000000002 : Record 14000842;
      LabelElement@1000000010 : Record 14000844;
      Field@1000000003 : Record 2000000041;
      TransferHeader@1000000016 : Record 5740;
      CompanyInfo@1000000000 : Record 79;
      OutputFile@1000000004 : File;
      ValuesEntered@1000000005 : Integer;
      ReturnCode@1000000006 : Integer;
      FormatValue@1000000007 : ARRAY [10] OF Text[250];
      FormattedString@1000000008 : Text[250];
      Value@1000000009 : Text[250];
      ElementValue@1000000011 : ARRAY [10] OF Text[250];
      FieldValue@1000000017 : Codeunit 14000843;
      i@1000000012 : Integer;
      LabelFileName@1000000018 : Text[250];
    BEGIN
      //TM BEG 071015
      GetPackingStation;
      PackingStation.TESTFIELD("Label Buffer File");
      PackingStation.TESTFIELD("Std. Pack. Label Printer Port");

      LabelFileName := PackingStation.CalcLabelFileName(PackingStation."Label Buffer File");

      CompanyInfo.GET;
      FieldValue.CompanyInformation_79(CompanyInfo,0);

      FieldValue.TransferHeader_5740(CurrentTO,0);

      OutputFile.TEXTMODE(TRUE);
      OutputFile.CREATE(LabelFileName);

      LabelHeader.GET(LabelHeaderCode);
      FieldValue.LabelHeader_14000841(LabelHeader,0);
      LabelFileTop(LabelHeader,OutputFile);

      LabelLine.RESET;
      LabelLine.SETRANGE("Label Code",LabelHeader.Code);
      IF LabelLine.FIND('-') THEN
        REPEAT
          FieldValue.LabelLine_14000842(LabelLine,0);
          Value := FieldValue.SubstituteLine(LabelLine);

          LabelFileLine(LabelHeader,LabelLine,Value,OutputFile);
        UNTIL LabelLine.NEXT = 0;

      LabelFileBottom(LabelHeader,OutputFile,1);

      OutputFile.CLOSE;

      IF NOT PackingStation."No Label Printer" THEN
        FOR i := 1 TO copies DO
        BEGIN
          PackingStation.PrintLabel(
            LabelFileName,PackingStation."Std. Pack. Label Printer Port",
            PackingStation."No Label Printer",FALSE,//PackingStation."Auto Delete Label Buffer File",
            TransferHeader."No.",LabelHeader);
        END;
      //TM END 071015
    END;

    PROCEDURE PrintPartialCartonLabel@1000000003(LabelHeaderCode@1000000001 : Code[10];copies@1000000000 : Integer);
    VAR
      LabelHeader@1000000017 : Record 14000841;
      LabelLine@1000000016 : Record 14000842;
      LabelElement@1000000015 : Record 14000844;
      Field@1000000014 : Record 2000000041;
      OutputFile@1000000011 : File;
      ValuesEntered@1000000010 : Integer;
      ReturnCode@1000000009 : Integer;
      FormatValue@1000000008 : ARRAY [10] OF Text[250];
      FormattedString@1000000007 : Text[250];
      Value@1000000006 : Text[250];
      ElementValue@1000000005 : ARRAY [10] OF Text[250];
      FieldValue@1000000004 : Codeunit 14000843;
      i@1000000003 : Integer;
      LabelFileName@1000000002 : Text[250];
    BEGIN
      //<TPZ1634>
      GetPackingStation;
      PackingStation.TESTFIELD("Label Buffer File");
      PackingStation.TESTFIELD("Std. Pack. Label Printer Port");

      LabelFileName := PackingStation.CalcLabelFileName(PackingStation."Label Buffer File");


      OutputFile.TEXTMODE(TRUE);
      OutputFile.CREATE(LabelFileName);

      LabelHeader.GET(LabelHeaderCode);
      FieldValue.LabelHeader_14000841(LabelHeader,0);
      LabelFileTop(LabelHeader,OutputFile);

      LabelLine.RESET;
      LabelLine.SETRANGE("Label Code",LabelHeader.Code);
      IF LabelLine.FIND('-') THEN
        REPEAT
          FieldValue.LabelLine_14000842(LabelLine,0);
          Value := FieldValue.SubstituteLine(LabelLine);

          LabelFileLine(LabelHeader,LabelLine,Value,OutputFile);
        UNTIL LabelLine.NEXT = 0;

      LabelFileBottom(LabelHeader,OutputFile,1);

      OutputFile.CLOSE;

      IF NOT PackingStation."No Label Printer" THEN
        FOR i := 1 TO copies DO
        BEGIN
          PackingStation.PrintLabel(
            LabelFileName,PackingStation."Std. Pack. Label Printer Port",
            PackingStation."No Label Printer",FALSE,//PackingStation."Auto Delete Label Buffer File",
            '',LabelHeader);
        END;

      //</TPZ1634>
    END;

    PROCEDURE GetAssocInternalDocNo@1240020000(RecRef@1240030001 : RecordRef;DetailRecRef@1240020001 : RecordRef) : Code[10];
    VAR
      SalesHeader@1240020002 : Record 36;
      SalesLine@1240020003 : Record 37;
      SalesShipmentHeader@1240020005 : Record 110;
      SalesShipmentLine@1240020006 : Record 111;
      EDIChangedDocument@1240030000 : Record 14002373;
      CurrEDIRecDocField@1240030002 : Record 14002359;
      Found@1240030003 : Boolean;
      RecordCount@1240030004 : Integer;
      InternalDocNo@1240020000 : Code[10];
      PostedDoc@1240020004 : Boolean;
    BEGIN
      Found := FALSE;
      PostedDoc := FALSE;

      CASE RecRef.NUMBER OF
        36:
          BEGIN
          RecRef.SETTABLE(SalesHeader);

          END;
        110:
          BEGIN
            RecRef.SETTABLE(SalesShipmentHeader);
            PostedDoc := TRUE;
          END;
      END;
      CASE DetailRecRef.NUMBER OF
        37:
          BEGIN
            DetailRecRef.SETTABLE(SalesLine);
          END;
        111:
          BEGIN
            DetailRecRef.SETTABLE(SalesShipmentLine);
            PostedDoc := TRUE;
          END;
      END;

      EDIChangedDocument.RESET;
      IF PostedDoc THEN
        EDIChangedDocument.SETRANGE("Assoc. Internal Doc. No.",SalesShipmentHeader."EDI Internal Doc. No.")
      ELSE
        EDIChangedDocument.SETRANGE("Assoc. Internal Doc. No.",SalesHeader."EDI Internal Doc. No.");
      IF EDIChangedDocument.FIND('-') THEN BEGIN
        RecordCount := EDIChangedDocument.COUNT;
        IF RecordCount = 1 THEN BEGIN
          InternalDocNo := EDIChangedDocument."Internal Doc. No.";
          AssocEDIDocNo := EDIChangedDocument."Assoc. Document No.";
          Found := TRUE;
        END ELSE
          REPEAT
            IF ((PostedDoc) AND (EDIChangedDocument."Document No." = SalesShipmentHeader."Order No.")) OR
               ((PostedDoc = FALSE) AND (EDIChangedDocument."Document No." = SalesHeader."No."))
            THEN BEGIN
              CurrEDIRecDocField.RESET;
              CurrEDIRecDocField.SETCURRENTKEY("Internal Doc. No.","Segment Group");
              CurrEDIRecDocField.SETRANGE("Internal Doc. No.",EDIChangedDocument."Internal Doc. No.");
              IF PostedDoc THEN
                CurrEDIRecDocField.SETRANGE("Segment Group",SalesShipmentLine."EDI Segment Group")
              ELSE
                CurrEDIRecDocField.SETRANGE("Segment Group",SalesLine."EDI Segment Group");
              CurrEDIRecDocField.SETRANGE("New Item",TRUE);
              IF CurrEDIRecDocField.FIND('-') THEN BEGIN
                InternalDocNo := CurrEDIRecDocField."Internal Doc. No.";
                AssocEDIDocNo := EDIChangedDocument."Assoc. Document No.";
                Found := TRUE;
              END;
            END;
          UNTIL (EDIChangedDocument.NEXT = 0) OR (Found = TRUE);
      END;
      EXIT(InternalDocNo);
    END;

    PROCEDURE PrintLTLPostedSOLabel@1000000004(SalesShipHdr@1000000015 : Record 110;LabelHeaderCode@1000000014 : Code[10];copies@1000000013 : Integer);
    VAR
      LabelHeader@1000000001 : Record 14000841;
      LabelLine@1000000002 : Record 14000842;
      LabelElement@1000000010 : Record 14000844;
      Field@1000000003 : Record 2000000041;
      SalesShipmentHeader@1000000016 : Record 110;
      CompanyInfo@1000000000 : Record 79;
      OutputFile@1000000004 : File;
      ValuesEntered@1000000005 : Integer;
      ReturnCode@1000000006 : Integer;
      FormatValue@1000000007 : ARRAY [10] OF Text[250];
      FormattedString@1000000008 : Text[250];
      Value@1000000009 : Text[250];
      ElementValue@1000000011 : ARRAY [10] OF Text[250];
      FieldValue@1000000017 : Codeunit 14000843;
      i@1000000012 : Integer;
      LabelFileName@1000000018 : Text[250];
    BEGIN
      //TPZ3171-->
      GetPackingStation;
      PackingStation.TESTFIELD("Label Buffer File");
      PackingStation.TESTFIELD("Std. Pack. Label Printer Port");

      LabelFileName := PackingStation.CalcLabelFileName(PackingStation."Label Buffer File");

      CompanyInfo.GET;
      FieldValue.CompanyInformation_79(CompanyInfo,0);

      FieldValue.SalesShipmentHeader_110(SalesShipHdr,0);

      OutputFile.TEXTMODE(TRUE);
      OutputFile.CREATE(LabelFileName);

      LabelHeader.GET(LabelHeaderCode);
      FieldValue.LabelHeader_14000841(LabelHeader,0);
      LabelFileTop(LabelHeader,OutputFile);

      LabelLine.RESET;
      LabelLine.SETRANGE("Label Code",LabelHeader.Code);
      IF LabelLine.FIND('-') THEN
        REPEAT
          FieldValue.LabelLine_14000842(LabelLine,0);
          Value := FieldValue.SubstituteLine(LabelLine);

          LabelFileLine(LabelHeader,LabelLine,Value,OutputFile);
        UNTIL LabelLine.NEXT = 0;

      LabelFileBottom(LabelHeader,OutputFile,1);

      OutputFile.CLOSE;

      IF NOT PackingStation."No Label Printer" THEN
        FOR i := 1 TO copies DO
        BEGIN
          PackingStation.PrintLabel(
            LabelFileName,PackingStation."Std. Pack. Label Printer Port",
            PackingStation."No Label Printer",FALSE,//PackingStation."Auto Delete Label Buffer File",
            SalesShipmentHeader."No.",LabelHeader);
        END;
      //<--TPZ3171
    END;

    PROCEDURE PrintLTLPostedTOLabel@1170000000(CurrentTO@1000000015 : Record 5744;LabelHeaderCode@1000000014 : Code[10];copies@1000000013 : Integer);
    VAR
      LabelHeader@1000000001 : Record 14000841;
      LabelLine@1000000002 : Record 14000842;
      LabelElement@1000000010 : Record 14000844;
      Field@1000000003 : Record 2000000041;
      TransferShipHeader@1000000016 : Record 5744;
      CompanyInfo@1000000000 : Record 79;
      OutputFile@1000000004 : File;
      ValuesEntered@1000000005 : Integer;
      ReturnCode@1000000006 : Integer;
      FormatValue@1000000007 : ARRAY [10] OF Text[250];
      FormattedString@1000000008 : Text[250];
      Value@1000000009 : Text[250];
      ElementValue@1000000011 : ARRAY [10] OF Text[250];
      FieldValue@1000000017 : Codeunit 14000843;
      i@1000000012 : Integer;
      LabelFileName@1000000018 : Text[250];
    BEGIN
      //<TPZ3198>
      GetPackingStation;
      PackingStation.TESTFIELD("Label Buffer File");
      PackingStation.TESTFIELD("Std. Pack. Label Printer Port");

      LabelFileName := PackingStation.CalcLabelFileName(PackingStation."Label Buffer File");

      CompanyInfo.GET;
      FieldValue.CompanyInformation_79(CompanyInfo,0);

      FieldValue.TransferShipmentHeader_5744(CurrentTO,0);

      OutputFile.TEXTMODE(TRUE);
      OutputFile.CREATE(LabelFileName);

      LabelHeader.GET(LabelHeaderCode);
      FieldValue.LabelHeader_14000841(LabelHeader,0);
      LabelFileTop(LabelHeader,OutputFile);

      LabelLine.RESET;
      LabelLine.SETRANGE("Label Code",LabelHeader.Code);
      IF LabelLine.FIND('-') THEN
        REPEAT
          FieldValue.LabelLine_14000842(LabelLine,0);
          Value := FieldValue.SubstituteLine(LabelLine);

          LabelFileLine(LabelHeader,LabelLine,Value,OutputFile);
        UNTIL LabelLine.NEXT = 0;

      LabelFileBottom(LabelHeader,OutputFile,1);

      OutputFile.CLOSE;

      IF NOT PackingStation."No Label Printer" THEN
        FOR i := 1 TO copies DO
        BEGIN
          PackingStation.PrintLabel(
            LabelFileName,PackingStation."Std. Pack. Label Printer Port",
            PackingStation."No Label Printer",FALSE,//PackingStation."Auto Delete Label Buffer File",
            TransferShipHeader."No.",LabelHeader);
        END;
      //</TPZ3198>
    END;

    BEGIN
    {
      001 TPZ3171 GKG 05212021 Printing address labels after SO is posted
      002 TPZ3198 GKG 06152021 Printing address labels after TO is posted
    }
    END.
  }
}

