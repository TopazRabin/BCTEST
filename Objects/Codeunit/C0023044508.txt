OBJECT Codeunit 23044508 WHI Inv. Inquiry Mgmt.
{
  OBJECT-PROPERTIES
  {
    Date=03/23/21;
    Time=10:32:00 AM;
    Modified=Yes;
    Version List=WHI2.4.7684.0;
  }
  PROPERTIES
  {
    TableNo=23044511;
    OnRun=VAR
            liEventID@1000000002 : Integer;
            ltxtOutputText@1000000001 : BigText;
            losReturnMessage@1000000000 : OutStream;
          BEGIN
            //<FUNC>
            //  Description: Main execution point for codeunit.  Handles Item/Bin Inquiry requests.
            //  Called From: "Data Broker"::"InternalExecuteEventFromRecord"
            //  Side Effect: None
            //</FUNC>
            codRegionCode := Rec.getValue('device_culture');

            liEventID := Rec.getEvent();
            executeEvent(liEventID, Rec, ltxtOutputText);
            "Extensibility Blob".CREATEOUTSTREAM( losReturnMessage );
            ltxtOutputText.WRITE(losReturnMessage);
            MODIFY();
          END;

  }
  CODE
  {
    VAR
      cuCommonFuncs@1000000000 : Codeunit 23044501;
      cuCustomizedFuncs@1000000010 : Codeunit 23044515;
      iEventID@1000000012 : Integer;
      cuPrintingMgmt@1000000013 : Codeunit 23044525;
      cuActivityLogMgt@1000000016 : Codeunit 23044537;
      cuCommonBase@1000000019 : Codeunit 23044519;
      cuTranslationMgmt@1000000021 : Codeunit 23044526;
      codRegionCode@1000000020 : Code[10];

    PROCEDURE executeEvent@1000000002(piEventID@1000000000 : Integer;VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000002 : BigText);
    BEGIN
      iEventID := piEventID;

      CASE piEventID OF
        10001:  getPartData(ptrecEventParams, pbsOutput);
        10002:  getBinData(ptrecEventParams, pbsOutput);
        10003:  getSerialNumberAvail(ptrecEventParams, pbsOutput);
        10004:  getShelfData(ptrecEventParams, pbsOutput);
        10005:  getWhseEntries(ptrecEventParams, pbsOutput);
        10006:  getItemQuantityForSpecificBin(ptrecEventParams, pbsOutput);
        10007:  getItemVariant(ptrecEventParams, pbsOutput);
        10008:  createAdjustmentEntry(ptrecEventParams, pbsOutput);
        10009:  printItemLabel( ptrecEventParams, pbsOutput);
        10010:  cuPrintingMgmt.handlePrint( ptrecEventParams, pbsOutput);
        10011:  getItemPicture(ptrecEventParams, pbsOutput);
        10012:  getLotNumberAvail(ptrecEventParams, pbsOutput);
        10013:  getItemList(ptrecEventParams, pbsOutput);
        10014:  getItemDetails(ptrecEventParams, pbsOutput);
        10015:  getItemTransactions(ptrecEventParams,pbsOutput);
        10020:  getBinList(ptrecEventParams, pbsOutput);
        10021:  getBinDetails(ptrecEventParams, pbsOutput);
        10022:  getBinLicensePlates(ptrecEventParams, pbsOutput);
      END;
    END;

    PROCEDURE getPartData@1000000007(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511;VAR pbsOutput@1000000020 : BigText);
    VAR
      lcodLocation@1000000012 : Code[10];
      lcodItemNumber@1000000007 : Text;
      lcodVariantCode@1000000006 : Text;
      lsLotNumber@1000000004 : Text;
      lsSerialNumber@1000000003 : Text;
    BEGIN
      // Event 10001
      lcodLocation := ptrecEventParams.getValue('location');
      lcodItemNumber := ptrecEventParams.getItemNo();
      lcodVariantCode := ptrecEventParams.getVariant();
      lsLotNumber := ptrecEventParams.getLotNo();
      lsSerialNumber := ptrecEventParams.getSerialNo();


      pbsOutput.ADDTEXT('<DATASET>');


      getItemDetailTable(
        lcodItemNumber,
        lcodVariantCode,
        lcodLocation,
        lsLotNumber,
        lsSerialNumber,
        iEventID,
        pbsOutput
      );


      getItemBinTable(
        lcodItemNumber,
        lcodVariantCode,
        lcodLocation,
        lsLotNumber,
        lsSerialNumber,
        iEventID,
        pbsOutput
      );


      getItemTransactionTable(
        lcodItemNumber,
        lcodVariantCode,
        lcodLocation,
        lsLotNumber,
        lsSerialNumber,
        iEventID,
        ptrecEventParams,
        pbsOutput
      );


      pbsOutput.ADDTEXT('</DATASET>');

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getItemDetailTable@540000(psItemNumber@540000 : Text;psVariantCode@540003 : Code[10];pcodLocation@540002 : Code[10];psLotNumber@540004 : Text;psSerialNumber@540005 : Text;piEventID@540009 : Integer;VAR pbsOutput@540008 : BigText);
    VAR
      lrecItem@540001 : Record 27;
      lrecItem2@540010 : Record 27;
      lrecSKU@540007 : Record 5700;
      lrrefWriter@540011 : RecordRef;
      lcodShelfNo@540006 : Code[10];
    BEGIN

      psLotNumber := UPPERCASE(psLotNumber);
      psSerialNumber := UPPERCASE(psSerialNumber);

      lrecItem.GET(psItemNumber);
      lrecItem.SETFILTER("Location Filter", pcodLocation);
      lrecItem.SETFILTER("Variant Filter",psVariantCode);

      IF (psLotNumber <> '') THEN BEGIN
        lrecItem.SETFILTER("Lot No. Filter", psLotNumber);
      END;
      IF (psSerialNumber <> '') THEN BEGIN
        lrecItem.SETFILTER("Serial No. Filter", psSerialNumber);
      END;

      lrecItem.CALCFIELDS(Inventory);

      IF( lrecSKU.GET(pcodLocation,psItemNumber,psVariantCode) ) THEN
        lcodShelfNo := lrecSKU."Shelf No."
      ELSE
        lcodShelfNo := lrecItem."Shelf No.";

      pbsOutput.ADDTEXT('<TABLE id="item">');

      pbsOutput.ADDTEXT('<COLS>');

      cuCommonFuncs.initializeColumns( TRUE );
      cuCommonFuncs.addDSColumnsFromConfig( pbsOutput,piEventID,'', DATABASE::Item );

      cuCommonFuncs.addDSTrackingColumns(pbsOutput);
      pbsOutput.ADDTEXT('</COLS>');

      pbsOutput.ADDTEXT('<ROWS>');
      pbsOutput.ADDTEXT('<R><FIELDS>');

      // @rt why is this being done?
      lrecItem2.GET(psItemNumber);
      lrecItem2.SETFILTER("Location Filter",pcodLocation);
      lrecItem2.CALCFIELDS(Inventory);
      cuCommonFuncs.setDSFieldOverrideValue(piEventID,'',DATABASE::Item,-1,FORMAT(lrecItem2.Inventory));
      IF( (psLotNumber <> '') OR (psSerialNumber <> '')) THEN BEGIN
        lrecItem2.SETFILTER("Lot No. Filter",psLotNumber);
        lrecItem2.SETFILTER("Serial No. Filter",psSerialNumber);
        lrecItem2.CALCFIELDS(Inventory);
        cuCommonFuncs.setDSFieldOverrideValue(piEventID,'',DATABASE::Item,-2,FORMAT(lrecItem2.Inventory));
      END;

      lrrefWriter.GETTABLE( lrecItem );
      cuCommonFuncs.addDSFieldsForRecord(pbsOutput,lrrefWriter,piEventID,'');



      cuCommonFuncs.addDSTrackingFields(pbsOutput,lrecItem."Item Tracking Code");

      pbsOutput.ADDTEXT('</FIELDS></R>');
      pbsOutput.ADDTEXT('</ROWS>');
      pbsOutput.ADDTEXT('</TABLE>');
    END;

    PROCEDURE getItemBinTable@540001(psItemNumber@540001 : Text;psVariantCode@540002 : Text;pcodLocation@540003 : Code[10];psLotNumber@540008 : Text;psSerialNumber@540009 : Text;piEventID@540004 : Integer;VAR pbsOutput@540005 : BigText);
    VAR
      lrecBinContents@540000 : Record 7302;
      ltrecBinContents@540007 : TEMPORARY Record 7302;
      lrrefWriter@540006 : RecordRef;
    BEGIN
      psSerialNumber := UPPERCASE(psSerialNumber);
      psLotNumber := UPPERCASE(psLotNumber);

      lrecBinContents.SETRANGE("Location Code",pcodLocation);
      lrecBinContents.SETRANGE("Item No.",psItemNumber);

      IF( psVariantCode <> '' ) THEN
        lrecBinContents.SETRANGE("Variant Code",psVariantCode);

      IF psSerialNumber <> '' THEN
        lrecBinContents.SETFILTER("Serial No. Filter",psSerialNumber);
      IF psLotNumber <> '' THEN
        lrecBinContents.SETFILTER("Lot No. Filter",psLotNumber);


      pbsOutput.ADDTEXT('<TABLE id="bins">');

      // generate the dataset columns
      pbsOutput.ADDTEXT('<COLS>');
      cuCommonFuncs.initializeColumns( TRUE );
      cuCommonFuncs.addDSColumnsFromConfig( pbsOutput,piEventID,'', DATABASE::"Bin Content" );
      pbsOutput.ADDTEXT('</COLS>');

      pbsOutput.ADDTEXT('<ROWS>');

      IF( lrecBinContents.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          ltrecBinContents := lrecBinContents;
          ltrecBinContents.Quantity := lrecBinContents.CalcQtyUOM();
          IF (ltrecBinContents.Quantity > 0) THEN BEGIN
            pbsOutput.ADDTEXT('<R><FIELDS>');
            lrrefWriter.GETTABLE( ltrecBinContents );
            cuCommonFuncs.setDSFieldOverrideValue(piEventID, '', DATABASE::"Bin Content", -1, FORMAT(ltrecBinContents.Quantity));
            cuCommonFuncs.addDSFieldsForRecord(pbsOutput,lrrefWriter,piEventID,'');
            pbsOutput.ADDTEXT('</FIELDS></R>');
          END;
        UNTIL( lrecBinContents.NEXT = 0 );
      END;
      pbsOutput.ADDTEXT('</ROWS>');
      pbsOutput.ADDTEXT('</TABLE>');
    END;

    PROCEDURE getItemTransactionTable@540006(psItemNumber@540006 : Text;psVariantCode@540005 : Text;pcodLocation@540004 : Code[10];psLotNumber@540003 : Text;psSerialNumber@540002 : Text;piEventID@540001 : Integer;ptrecEventParams@540016 : TEMPORARY Record 23044511;VAR pbsOutput@540000 : BigText);
    VAR
      lrecWHISetup@540023 : Record 23044502;
      lrecReservationEntry@540009 : Record 337;
      lrecReservationEntry2@540008 : Record 337;
      lrecItemLedgerEntry@540007 : Record 32;
      lrecOutSearchRule@540017 : Record 23044529;
      lrrefWriter@540014 : RecordRef;
      lrrefOutFoundRecord@540018 : RecordRef;
      lfFieldRef@540020 : FieldRef;
      lcuDocsAndLinks@540015 : Codeunit 23044529;
      lcodDocNo@540013 : Code[30];
      iTransType@540011 : Integer;
      lnNumTrans@540010 : Integer;
      liLineNo@540012 : Integer;
      liFieldIndex@540019 : Integer;
      liTotalFieldCount@540022 : Integer;
      lbFoundUOMField@540021 : Boolean;
    BEGIN
      psLotNumber := UPPERCASE(psLotNumber);
      psSerialNumber := UPPERCASE(psSerialNumber);

      lrecWHISetup.GET();

      pbsOutput.ADDTEXT('<TABLE id="transactions">');

      // generate the dataset columns
      pbsOutput.ADDTEXT('<COLS>');
      cuCommonFuncs.initializeColumns( TRUE );
      cuCommonFuncs.addDSColumnsFromConfig( pbsOutput,piEventID,'', DATABASE::"Reservation Entry" );
      pbsOutput.ADDTEXT('</COLS>');

      // generate the rows
      pbsOutput.ADDTEXT('<ROWS>');
      BEGIN
        //
        // find any current reservations for this part and include those
        //
        lrecReservationEntry.ASCENDING(FALSE);
        IF ( psSerialNumber <> '' ) THEN
          lrecReservationEntry.SETRANGE("Serial No.",psSerialNumber);

        IF ( psLotNumber <> '' ) THEN
          lrecReservationEntry.SETRANGE("Lot No.",psLotNumber);

        lrecReservationEntry.SETRANGE("Item No.",psItemNumber);

        IF( psVariantCode <> '' ) THEN
          lrecReservationEntry.SETRANGE("Variant Code",psVariantCode);

        lrecReservationEntry.SETRANGE("Location Code",pcodLocation);


        lnNumTrans := 0;
        lrecReservationEntry.SETFILTER("Source Type",'<>%1',DATABASE::"Item Ledger Entry" );
        IF( lrecReservationEntry.FINDSET(FALSE,FALSE) ) THEN BEGIN // '-' to use ASCENDING(FALSE)
          REPEAT
            IF( lrecReservationEntry."Source Type" <> DATABASE::"Item Ledger Entry" ) THEN BEGIN
              pbsOutput.ADDTEXT('<R><FIELDS>');
              cuCommonFuncs.initVariantColumnIndex();
              lcodDocNo := '';
              IF(lrecReservationEntry."Source ID" = '' ) THEN BEGIN
                lrecReservationEntry2.SETRANGE("Entry No.", lrecReservationEntry."Entry No.");
                lrecReservationEntry2.SETRANGE(Positive,FALSE);
                IF( lrecReservationEntry2.FINDFIRST ) THEN BEGIN
                  lcodDocNo := lrecReservationEntry2."Source ID";
                  IF ((lrecReservationEntry2."Source Type" = DATABASE::"Transfer Line") OR (lrecReservationEntry2."Source Type" = DATABASE::"Prod. Order Component")) THEN BEGIN
                    liLineNo := lrecReservationEntry2."Source Prod. Order Line";
                  END ELSE BEGIN
                    liLineNo := lrecReservationEntry2."Source Ref. No.";
                  END;
                END ELSE BEGIN
                  lcodDocNo := lrecReservationEntry."Source ID";
                  IF ((lrecReservationEntry."Source Type" = DATABASE::"Transfer Line") OR (lrecReservationEntry."Source Type" = DATABASE::"Prod. Order Component")) THEN BEGIN
                    liLineNo := lrecReservationEntry."Source Prod. Order Line";
                  END ELSE BEGIN
                    liLineNo := lrecReservationEntry."Source Ref. No.";
                  END;
                END;
              END ELSE BEGIN
                lcodDocNo := lrecReservationEntry."Source ID";
                IF ((lrecReservationEntry."Source Type" = DATABASE::"Transfer Line") OR (lrecReservationEntry."Source Type" = DATABASE::"Prod. Order Component")) THEN BEGIN
                  liLineNo := lrecReservationEntry."Source Prod. Order Line";
                END ELSE BEGIN
                  liLineNo := lrecReservationEntry."Source Ref. No.";
                END;
              END;

              lrrefWriter.GETTABLE( lrecReservationEntry );
              cuCommonFuncs.setDSFieldOverrideValue(piEventID,
                '',
                DATABASE::"Reservation Entry",
                lrecReservationEntry.FIELDNO("Source ID"),
                lcodDocNo
              );
              IF (lcuDocsAndLinks.GetRecordRefKeys(pcodLocation,
                                              '', //pcodBin
                                              lcodDocNo,
                                              liLineNo,
                                              psItemNumber,
                                              FALSE,
                                              ptrecEventParams,
                                              lrrefOutFoundRecord,
                                              lrecOutSearchRule)) THEN BEGIN
                liFieldIndex := 1;
                liTotalFieldCount := lrrefOutFoundRecord.FIELDCOUNT;
                lbFoundUOMField := FALSE;
                REPEAT
                  lfFieldRef := lrrefOutFoundRecord.FIELDINDEX(liFieldIndex);
                  liFieldIndex := liFieldIndex +1;
                  IF ((lfFieldRef.NAME = 'Unit of Measure Code') OR (lfFieldRef.NAME = 'Unit of Measure')) THEN BEGIN
                    lbFoundUOMField := TRUE;
                    cuCommonFuncs.setDSFieldOverrideValue(piEventID,
                                                        '',
                                                        DATABASE::"Reservation Entry",
                                                        -1,
                                                        FORMAT(lfFieldRef.VALUE)
                                                      );
                  END;
                UNTIL ((liFieldIndex >liTotalFieldCount) OR lbFoundUOMField);
              END;
              cuCommonFuncs.addDSFieldsForRecord(pbsOutput,lrrefWriter,piEventID,'');
              pbsOutput.ADDTEXT('</FIELDS></R>');
              lnNumTrans += 1;
            END;
          UNTIL((lrecReservationEntry.NEXT=0) OR (lnNumTrans = lrecWHISetup."Item Inquiry Max Transactions"));
        END;// end reservations
      END;//if serial no. (mh)

      //
      // find the ledger entries
      //
      IF( lnNumTrans < lrecWHISetup."Item Inquiry Max Transactions" ) THEN BEGIN
        lrecItemLedgerEntry.RESET;
        lrecItemLedgerEntry.SETCURRENTKEY("Entry No.");
        lrecItemLedgerEntry.SETRANGE("Location Code",pcodLocation);
        lrecItemLedgerEntry.SETRANGE("Item No.",psItemNumber);
        IF( psSerialNumber <> '' ) THEN
          lrecItemLedgerEntry.SETRANGE("Serial No.",psSerialNumber);
        IF( psLotNumber <> '' ) THEN
          lrecItemLedgerEntry.SETRANGE("Lot No.",psLotNumber);
        IF( psVariantCode <> '' ) THEN
          lrecItemLedgerEntry.SETRANGE("Variant Code",psVariantCode);

        lrecItemLedgerEntry.ASCENDING(FALSE);
        IF( lrecItemLedgerEntry.FINDSET(FALSE,FALSE) ) THEN BEGIN
          // The same output is re-used for up to 3 different tables.
          // This assumes the mandatory requirement that their must be the same # of columns
          // configured in the device column config.
          cuCommonFuncs.initializeColumns( TRUE );
          cuCommonFuncs.setWriteColumnHeader( FALSE ); // already written with shipment header
          cuCommonFuncs.addDSColumnsFromConfig( pbsOutput,piEventID,'', DATABASE::"Item Ledger Entry" );

          REPEAT
            pbsOutput.ADDTEXT('<R><FIELDS>');
            cuCommonFuncs.initVariantColumnIndex();
            lrrefWriter.GETTABLE( lrecItemLedgerEntry );
            cuCommonFuncs.addDSFieldsForRecord(pbsOutput,lrrefWriter,piEventID,'');
            pbsOutput.ADDTEXT('</FIELDS></R>');
            lnNumTrans += 1;
          UNTIL(lrecItemLedgerEntry.NEXT()=0) OR (lnNumTrans = lrecWHISetup."Item Inquiry Max Transactions");
        END; // end item ledger entries
      END;

      pbsOutput.ADDTEXT('</ROWS>');
      pbsOutput.ADDTEXT('</TABLE>');
    END;

    PROCEDURE getBinData@1000000004(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511;VAR pbsOutput@1000000006 : BigText);
    VAR
      lrecLPHeader@1000000023 : Record 23044505;
      lrecConfig@1000000007 : Record 23044504;
      lrecItem@1000000005 : Record 27;
      lrecBinContents@1000000004 : Record 7302;
      lrecBin@1000000013 : Record 7354;
      lrecWhseEntry@1000000009 : Record 7312;
      lcu2013Support@1000000010 : Codeunit 23044530;
      ldnOutput@1000000012 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lisInStream@1000000015 : InStream;
      lbsLPTable@1000000008 : BigText;
      ldQuantity@1000000011 : Decimal;
      lcodLocation@1000000002 : Code[10];
      lcodBin@1000000001 : Code[20];
      liBlockMovement@1000000003 : Integer;
      lrrefLPHeader@1000000022 : RecordRef;
      lfrefLPNumber@1000000021 : FieldRef;
      lfrefLPDescr@1000000020 : FieldRef;
      lfrefLPLocation@1000000019 : FieldRef;
      lfrefLPBinCode@1000000018 : FieldRef;
      lfrefLPStatus@1000000016 : FieldRef;
      lbsTextForLotInquiry@1000000024 : BigText;
    BEGIN
      lcodLocation := ptrecEventParams.getValue('location');
      lcodBin := ptrecEventParams.getValue('bin_code');

      //
      // This SelectLatestVersion call is introduced to workaround a bug in NAV's caching in 2013R2 and newer
      // when there are multiple service tiers.   Tends to happen with bin content records.
      //
      DATABASE.SELECTLATESTVERSION();

      ldnOutput := ldnOutput.StringBuilder();


      ldnOutput.Append('<DATASET>');

      //
      // create the bin table
      //
      lrecBin.GET(lcodLocation,lcodBin);

      ldnOutput.Append('<TABLE id="bin">');

      ldnOutput.Append('<COLS>');
      cuCommonFuncs.initVariantColumnIndex();
      cuCommonFuncs.addDSColumnDN(ldnOutput,'',lrecBin.Code,FALSE,0,'',lrecBin.FIELDNAME(Code));
      cuCommonFuncs.addDSColumnDN(ldnOutput,'',lrecBin.Description,FALSE,0,'',lrecBin.FIELDNAME(Description));
      cuCommonFuncs.addDSColumnDN(ldnOutput,'',lrecBin."Bin Type Code",FALSE,0,'',lrecBin.FIELDNAME("Bin Type Code"));
      cuCommonFuncs.addDSColumnDN(ldnOutput,'',lrecBin."Block Movement",FALSE,0,'',lrecBin.FIELDNAME("Block Movement"));
      cuCommonFuncs.addDSColumnDN(ldnOutput,'',lrecBin."Zone Code",FALSE,0,'',lrecBin.FIELDNAME("Zone Code"));

      ldnOutput.Append('</COLS>');

      ldnOutput.Append('<ROWS>');
      ldnOutput.Append('<R><FIELDS>');
      cuCommonFuncs.initVariantColumnIndex();
      cuCommonFuncs.addDSFieldDN(ldnOutput,lrecBin.Code);
      cuCommonFuncs.addDSFieldDN(ldnOutput,lrecBin.Description);
      cuCommonFuncs.addDSFieldDN(ldnOutput,lrecBin."Bin Type Code");

      liBlockMovement := lrecBin."Block Movement";
      cuCommonFuncs.addDSFieldDN(ldnOutput,liBlockMovement);
      cuCommonFuncs.addDSFieldDN(ldnOutput,lrecBin."Zone Code");


      ldnOutput.Append('</FIELDS></R>');
      ldnOutput.Append('</ROWS>');
      ldnOutput.Append('</TABLE>');

      //
      // create the contents table
      //
      ldnOutput.Append('<TABLE id="contents">');

      ldnOutput.Append('<COLS>');
      cuCommonFuncs.initVariantColumnIndex();
      cuCommonFuncs.addDSColumnDN(ldnOutput,'',lrecBinContents."Item No.",TRUE,80,cuTranslationMgmt.getTranslatedString('COL_ITEM_NUMBER', codRegionCode),lrecBinContents.FIELDNAME("Item No."));
      cuCommonFuncs.addDSColumnDN(ldnOutput,'',lrecBinContents."Item No.",TRUE,100,cuTranslationMgmt.getTranslatedString('COL_DESCRIPTION', codRegionCode),'Description');
      cuCommonFuncs.addDSColumnDN(ldnOutput,'',lrecBinContents.Quantity,TRUE,40, cuTranslationMgmt.getTranslatedString('COL_QUANTITY', codRegionCode), lrecBinContents.FIELDNAME(Quantity));
      cuCommonFuncs.getDeviceConfig( lrecConfig,ptrecEventParams);
      cuCommonFuncs.addDSColumnDN(ldnOutput,'',lrecBinContents."Unit of Measure Code",TRUE,80, cuTranslationMgmt.getTranslatedString('COL_UOM', codRegionCode),lrecBinContents.FIELDNAME("Unit of Measure Code"));
      cuCommonFuncs.addDSColumnDN(ldnOutput,'',lrecBinContents."Variant Code",TRUE,80,cuTranslationMgmt.getTranslatedString('COL_VARIANT', codRegionCode),lrecBinContents.FIELDNAME("Variant Code"));
      IF(lrecConfig."Bin Contents Inquiry Mode" = lrecConfig."Bin Contents Inquiry Mode"::"Group by Lot") THEN BEGIN
        cuCommonFuncs.addDSColumnDN(ldnOutput,'',lrecWhseEntry."Lot No.",TRUE,80,cuTranslationMgmt.getTranslatedString('COL_LOT_NUMBER', codRegionCode),lrecWhseEntry.FIELDNAME("Lot No."));
      END;
      ldnOutput.Append('</COLS>');

      IF(lrecConfig."Bin Contents Inquiry Mode" = lrecConfig."Bin Contents Inquiry Mode"::"Bin Contents") THEN BEGIN
        ldnOutput.Append('<ROWS>');
        lrecBinContents.SETRANGE("Location Code",lcodLocation);
        lrecBinContents.SETRANGE("Bin Code",lcodBin);
        IF( lrecBinContents.FINDSET(FALSE) ) THEN BEGIN
          REPEAT
            ldQuantity := lrecBinContents.CalcQtyUOM();
            IF (ldQuantity > 0) THEN BEGIN
              lrecItem.GET(lrecBinContents."Item No.");
              ldnOutput.Append('<R><FIELDS>');
              cuCommonFuncs.initVariantColumnIndex();
              cuCommonFuncs.addDSFieldDN(ldnOutput, lrecBinContents."Item No.");
              cuCommonFuncs.addDSFieldDN(ldnOutput,lrecItem.Description + lrecItem."Description 2");
              cuCommonFuncs.addDSFieldDN(ldnOutput, ldQuantity);
              cuCommonFuncs.addDSFieldDN(ldnOutput, lrecBinContents."Unit of Measure Code");
              cuCommonFuncs.addDSFieldDN(ldnOutput,lrecBinContents."Variant Code");
              ldnOutput.Append('</FIELDS></R>');
            END;
          UNTIL(lrecBinContents.NEXT=0);
        END;
        ldnOutput.Append('</ROWS>');

      END ELSE IF(lrecConfig."Bin Contents Inquiry Mode" = lrecConfig."Bin Contents Inquiry Mode"::"Group by Lot") THEN BEGIN
        lcu2013Support.BinContentsQuery( lrecConfig."Location Code", lcodBin, lbsTextForLotInquiry);
        ldnOutput.Append(FORMAT(lbsTextForLotInquiry));
      END;

      ldnOutput.Append('</TABLE>');

      ldnOutput.Append('<TABLE id="licenseplates">');

      ldnOutput.Append('<COLS>');
      cuCommonFuncs.initVariantColumnIndex();
      cuCommonFuncs.addDSColumnDN(ldnOutput,'',lrecLPHeader."No.",TRUE,80,lrecLPHeader.FIELDCAPTION("No."),lrecLPHeader.FIELDNAME("No."));

      cuCommonFuncs.addDSColumnDN(ldnOutput,'',lrecLPHeader.Description,TRUE,100,lrecLPHeader.FIELDCAPTION(Description),lrecLPHeader.
        FIELDNAME(Description));
      cuCommonFuncs.addDSColumnDN(ldnOutput,'',lrecLPHeader.Status,TRUE,40,lrecLPHeader.FIELDCAPTION(Status),lrecLPHeader.FIELDNAME(Status)
        );
      ldnOutput.Append('</COLS>');

      ldnOutput.Append('<ROWS>');

      lrecLPHeader.SETCURRENTKEY("Location Code","Bin Code",Status);
      lrecLPHeader.SETRANGE("Location Code",lcodLocation);
      lrecLPHeader.SETRANGE("Bin Code",lcodBin);
      lrecLPHeader.SETFILTER(Status,'<>%1',lrecLPHeader.Status::Unbuilt);

      IF( lrecLPHeader.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          ldnOutput.Append('<R><FIELDS>');
          cuCommonFuncs.initVariantColumnIndex();
          cuCommonFuncs.addDSFieldDN(ldnOutput,lrecLPHeader."No.");
          cuCommonFuncs.addDSFieldDN(ldnOutput,lrecLPHeader.Description);
          cuCommonFuncs.addDSFieldDN(ldnOutput,lrecLPHeader.Status);
          ldnOutput.Append('</FIELDS></R>');
        UNTIL(lrecLPHeader.NEXT=0);
      END;
      ldnOutput.Append('</ROWS>');
      ldnOutput.Append('</TABLE>');

      ldnOutput.Append('</DATASET>');
      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getSerialNumberAvail@1000000062(VAR ptrecEventParams@1000000003 : TEMPORARY Record 23044511;VAR pbsOutput@1000000006 : BigText);
    VAR
      lrecItem@1000000000 : Record 27;
      lrecItemLedgerEntry@1000000005 : Record 32;
      lrecReservationEntry@1000000008 : Record 337;
      ltrecItemLedgerEntry@1000000007 : TEMPORARY Record 32;
      lcodLocation@1000000002 : Code[10];
      lcodItemNumber@1000000001 : Text;
      ldnOutput@1000000009 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
    BEGIN
      lcodLocation := ptrecEventParams.getValue('location');
      lcodItemNumber := ptrecEventParams.getValue('item_number');

      lrecItem.GET(lcodItemNumber);

      // find serial numbers in the system
      lrecItemLedgerEntry.SETRANGE("Item No.", lcodItemNumber);
      lrecItemLedgerEntry.SETFILTER("Serial No.",'<>%1','');
      lrecItemLedgerEntry.SETRANGE("Location Code", lcodLocation);
      lrecItemLedgerEntry.SETFILTER("Remaining Quantity",'>%1',0);

      // going to group the duplicates together
      IF lrecItemLedgerEntry.FINDSET(FALSE) THEN BEGIN
        REPEAT
          ltrecItemLedgerEntry.SETRANGE("Serial No.",lrecItemLedgerEntry."Serial No.");
          IF( NOT ltrecItemLedgerEntry.FINDFIRST ) THEN BEGIN
            ltrecItemLedgerEntry := lrecItemLedgerEntry;
            ltrecItemLedgerEntry.INSERT;
          END ELSE BEGIN
            ltrecItemLedgerEntry."Remaining Quantity" += lrecItemLedgerEntry."Remaining Quantity";
            ltrecItemLedgerEntry.MODIFY;
          END;
        UNTIL( lrecItemLedgerEntry.NEXT=0);
      END;





      lrecReservationEntry.SETRANGE("Item No.", lcodItemNumber);
      lrecReservationEntry.SETRANGE("Location Code", lcodLocation);
      lrecReservationEntry.SETRANGE(Positive,FALSE);

      ldnOutput := ldnOutput.StringBuilder();
      ldnOutput.Append('<SERIAL_NUMBERS>');

      ltrecItemLedgerEntry.RESET;
      IF(ltrecItemLedgerEntry.FIND('-') ) THEN BEGIN
        REPEAT
          ldnOutput.Append('<ENTRY>');
          ldnOutput.Append(STRSUBSTNO('<SN>%1</SN>',ltrecItemLedgerEntry."Serial No."));
          ldnOutput.Append(STRSUBSTNO('<QTY>%1</QTY>',ltrecItemLedgerEntry."Remaining Quantity"));

          // check for reservation
          lrecReservationEntry.SETRANGE("Serial No.",ltrecItemLedgerEntry."Serial No.");
          IF( lrecReservationEntry.FINDFIRST ) THEN
            ldnOutput.Append('<RESERVED>1</RESERVED>')
          ELSE
            ldnOutput.Append('<RESERVED>0</RESERVED>');
          ldnOutput.Append('</ENTRY>');
        UNTIL(ltrecItemLedgerEntry.NEXT=0);
      END;

      ldnOutput.Append('</SERIAL_NUMBERS>');
      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getShelfData@1000000063(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511;VAR pbsOutput@1000000010 : BigText);
    VAR
      lrecItem@1000000002 : Record 27;
      lrecSKU@1000000005 : Record 5700;
      ldQuantity@1000000007 : Decimal;
      lcodLocation@1000000003 : Code[10];
      lcodShelf@1000000001 : Code[10];
      lcodUOM@1000000004 : Text[10];
    BEGIN
      lcodLocation := ptrecEventParams.getValue('location');
      lcodShelf := ptrecEventParams.getValue('shelf_code');

      pbsOutput.ADDTEXT('<DATASET>');

      //
      // create the contents table
      //
      pbsOutput.ADDTEXT('<TABLE id="contents">');

      pbsOutput.ADDTEXT('<COLS>');
      cuCommonFuncs.initVariantColumnIndex();
      cuCommonFuncs.addDSColumn(pbsOutput,'',lrecSKU."Item No.",TRUE,80,cuTranslationMgmt.getTranslatedString('COL_ITEM_NUMBER', codRegionCode),lrecSKU.FIELDNAME("Item No."));
      cuCommonFuncs.addDSColumn(pbsOutput,'',lrecSKU.Description,TRUE,100,lrecSKU.FIELDCAPTION(Description),'Description');
      cuCommonFuncs.addDSColumn(pbsOutput,'',lrecSKU.Inventory,TRUE,60, cuTranslationMgmt.getTranslatedString('COL_QUANTITY', codRegionCode),lrecSKU.FIELDNAME(Inventory));
      cuCommonFuncs.addDSColumn(pbsOutput,'', '', TRUE, 80,cuTranslationMgmt.getTranslatedString('COL_UOM', codRegionCode), 'Unit of Measure Code');
      cuCommonFuncs.addDSColumn(pbsOutput,'',lrecSKU."Variant Code",TRUE,40,cuTranslationMgmt.getTranslatedString('COL_VARIANT', codRegionCode),lrecSKU.FIELDNAME("Variant Code"));
      pbsOutput.ADDTEXT('</COLS>');

      pbsOutput.ADDTEXT('<ROWS>');
      lrecSKU.SETRANGE("Location Code",lcodLocation);
      lrecSKU.SETRANGE("Shelf No.",lcodShelf);
      IF( lrecSKU.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          lrecSKU.CALCFIELDS(Inventory);

          pbsOutput.ADDTEXT('<R><FIELDS>');
          cuCommonFuncs.initVariantColumnIndex();
          cuCommonFuncs.addDSField(pbsOutput,lrecSKU."Item No.");
          cuCommonFuncs.addDSField(pbsOutput,lrecSKU.Description + lrecSKU."Description 2");
          cuCommonFuncs.addDSField(pbsOutput,lrecSKU.Inventory);
          lrecItem.GET(lrecSKU."Item No.");
          IF (lrecItem."Put-away Unit of Measure Code" <> '') THEN BEGIN
            lcodUOM := lrecItem."Put-away Unit of Measure Code";
          END ELSE BEGIN
            lcodUOM := lrecItem."Base Unit of Measure";
          END;
          cuCommonFuncs.addDSField(pbsOutput, lcodUOM);
          cuCommonFuncs.addDSField(pbsOutput,lrecSKU."Variant Code");
          pbsOutput.ADDTEXT('</FIELDS></R>');
        UNTIL(lrecSKU.NEXT=0);
      END;
      pbsOutput.ADDTEXT('</ROWS>');
      pbsOutput.ADDTEXT('</TABLE>');
      pbsOutput.ADDTEXT('</DATASET>');

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getWhseEntries@1000000001(VAR ptrecEventParams@1000000003 : TEMPORARY Record 23044511;VAR pbsOutput@1000000008 : BigText);
    VAR
      lrecWhseEntry@1000000004 : Record 7312;
      lcodLocation@1000000006 : Code[10];
      lcodBin@1000000005 : Code[20];
      lcodItemNo@1000000002 : Text;
      lcodVariantCode@1000000001 : Text;
      lcodUOM@1000000000 : Code[10];
      lrrefWriter@1000000007 : RecordRef;
      lrecWHISetup@1000000009 : Record 23044502;
      liCurrentRecordCounter@1000000010 : Integer;
      liMaxRecords@1000000011 : Integer;
    BEGIN
      // Event 10005
      lcodLocation := ptrecEventParams.getValue('location');
      lcodBin := ptrecEventParams.getBin();
      lcodItemNo := ptrecEventParams.getItemNo();
      lcodVariantCode := ptrecEventParams.getValue('variant_code');
      lcodUOM := ptrecEventParams.getValue('uom');

      liCurrentRecordCounter := 0;
      lrecWHISetup.GET();

      liMaxRecords := lrecWHISetup."Item Inquiry Max Transactions";
      IF ( liMaxRecords = 0 ) THEN BEGIN
        liMaxRecords := 100;
      END;


      lrecWhseEntry.SETRANGE("Location Code",lcodLocation);
      lrecWhseEntry.SETRANGE("Bin Code",lcodBin);
      lrecWhseEntry.SETRANGE("Item No.",lcodItemNo);

      IF( lcodVariantCode <> '' ) THEN
        lrecWhseEntry.SETRANGE("Variant Code",lcodVariantCode);

      IF( lcodUOM <> '' ) THEN
        lrecWhseEntry.SETRANGE("Unit of Measure Code",lcodUOM);

      pbsOutput.ADDTEXT('<DATASET><TABLE id="line"><COLS>');
      cuCommonFuncs.initializeColumns( TRUE );
      cuCommonFuncs.addDSColumnsFromConfig( pbsOutput,iEventID,'', DATABASE::"Warehouse Entry" );
      pbsOutput.ADDTEXT('</COLS>');
      pbsOutput.ADDTEXT('<ROWS>');

      lrecWhseEntry.SETCURRENTKEY("Entry No.");
      lrecWhseEntry.ASCENDING(FALSE); // want most recent first
      IF( lrecWhseEntry.FIND('-') ) THEN BEGIN
        REPEAT
          liCurrentRecordCounter += 1;
          pbsOutput.ADDTEXT('<R><FIELDS>');
          lrrefWriter.GETTABLE( lrecWhseEntry );
          cuCommonFuncs.addDSFieldsForRecord(pbsOutput,lrrefWriter,iEventID,'');
          pbsOutput.ADDTEXT('</FIELDS></R>');
        UNTIL(lrecWhseEntry.NEXT=0) OR ( liCurrentRecordCounter >= liMaxRecords );
      END;

      pbsOutput.ADDTEXT('</ROWS></TABLE></DATASET>');

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getItemQuantityForSpecificBin@1000000003(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511;VAR pbsOutput@1000000015 : BigText);
    VAR
      lcodLocation@1000000006 : Code[10];
      lcodItemNumber@1000000005 : Text;
      lcodVariantCode@1000000004 : Text;
      lsLotNumber@1000000003 : Text;
      lsSerialNumber@1000000002 : Text;
      lcodBin@1000000001 : Code[20];
      lrecWhseEntry@1000000007 : Record 7312;
      lrecItem@1000000010 : Record 27;
      lrecBinContents@1000000009 : Record 7302;
      lrecSKU@1000000011 : Record 5700;
      lcodShelfNo@1000000012 : Code[10];
      ldQuantity@1000000014 : Decimal;
    BEGIN
      lcodLocation := ptrecEventParams.getValue('location');
      lcodItemNumber := ptrecEventParams.getItemNo();
      lcodVariantCode := ptrecEventParams.getValue('variant_code');
      lsLotNumber := ptrecEventParams.getLotNo();
      lsSerialNumber := ptrecEventParams.getSerialNo();
      lcodBin := ptrecEventParams.getBin();

      pbsOutput.ADDTEXT('<DATASET>');

      //
      // create the item table
      //
      lrecItem.GET(lcodItemNumber);
      lrecItem.SETFILTER("Location Filter", lcodLocation);
      lrecItem.SETFILTER("Bin Filter", lcodBin);
      lrecItem.SETFILTER("Variant Filter",lcodVariantCode);
      lrecItem.CALCFIELDS(Inventory);

      IF( lrecSKU.GET(lcodLocation,lcodItemNumber,lcodVariantCode) ) THEN
        lcodShelfNo := lrecSKU."Shelf No."
      ELSE
        lcodShelfNo := lrecItem."Shelf No.";

      //
      // create the Bin table
      //
      lrecBinContents.SETRANGE("Location Code",lcodLocation);
      lrecBinContents.SETRANGE("Item No.",lcodItemNumber);

      IF( lcodVariantCode <> '' ) THEN
        lrecBinContents.SETRANGE("Variant Code",lcodVariantCode);

      pbsOutput.ADDTEXT('<TABLE id="bins">');

      // generate the dataset columns
      pbsOutput.ADDTEXT('<COLS>');
      cuCommonFuncs.initVariantColumnIndex();
      cuCommonFuncs.addDSColumn(pbsOutput,'',lrecBinContents."Bin Code",TRUE,60,cuTranslationMgmt.getTranslatedString('COL_BIN', codRegionCode),lrecBinContents.FIELDNAME("Bin Code"));
      cuCommonFuncs.addDSColumn(pbsOutput,'',lrecBinContents.Quantity,TRUE,40,cuTranslationMgmt.getTranslatedString('COL_QUANTITY', codRegionCode),lrecBinContents.FIELDNAME(Quantity));
      cuCommonFuncs.addDSColumn(pbsOutput,'',lrecBinContents."Variant Code",TRUE,80,cuTranslationMgmt.getTranslatedString('COL_VARIANT', codRegionCode),lrecBinContents.FIELDNAME("Variant Code"));
      pbsOutput.ADDTEXT('</COLS>');

      pbsOutput.ADDTEXT('<ROWS>');

      IF( lrecBinContents.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          pbsOutput.ADDTEXT('<R><FIELDS>');
          cuCommonFuncs.initVariantColumnIndex();
          cuCommonFuncs.addDSField(pbsOutput,lrecBinContents."Bin Code");
          cuCommonFuncs.addDSField(pbsOutput,lrecBinContents.CalcQtyUOM());
          cuCommonFuncs.addDSField(pbsOutput,lrecBinContents."Variant Code");
          pbsOutput.ADDTEXT('</FIELDS></R>');
        UNTIL( lrecBinContents.NEXT = 0 );
      END;
      pbsOutput.ADDTEXT('</ROWS>');
      pbsOutput.ADDTEXT('</TABLE>');
      pbsOutput.ADDTEXT('</DATASET>');

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getItemVariant@1000000005(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511;VAR pbsOutput@1000000002 : BigText);
    VAR
      lrecVariant@1000000007 : Record 5401;
      lcodItemNumber@1000000003 : Text;
    BEGIN
      lcodItemNumber := ptrecEventParams.getValue('item_number');

      pbsOutput.ADDTEXT('<DATASET>');

      //
      // create the variant table
      //
      lrecVariant.RESET();
      lrecVariant.SETFILTER("Item No." , lcodItemNumber);

      pbsOutput.ADDTEXT('<TABLE id="variant">');

      pbsOutput.ADDTEXT('<COLS>');
      cuCommonFuncs.initVariantColumnIndex();
      cuCommonFuncs.addDSColumn(pbsOutput,'',lrecVariant.Code,FALSE,0,'',lrecVariant.FIELDNAME(Code));
      cuCommonFuncs.addDSColumn(pbsOutput,'',lrecVariant.Description,FALSE,0,'',lrecVariant.FIELDNAME(Description));
      pbsOutput.ADDTEXT('</COLS>');

      pbsOutput.ADDTEXT('<ROWS>');
      IF lrecVariant.FINDSET THEN BEGIN
        REPEAT
          pbsOutput.ADDTEXT('<R><FIELDS>');
          cuCommonFuncs.initVariantColumnIndex();
          cuCommonFuncs.addDSField(pbsOutput,lrecVariant.Code);
          cuCommonFuncs.addDSField(pbsOutput,lrecVariant.Description);
          pbsOutput.ADDTEXT('</FIELDS></R>');
        UNTIL lrecVariant.NEXT=0;
      END;
      pbsOutput.ADDTEXT('</ROWS>');
      pbsOutput.ADDTEXT('</TABLE>');
      pbsOutput.ADDTEXT('</DATASET>');

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    LOCAL PROCEDURE createAdjustmentEntry@1000000011(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecLocation@1000000011 : Record 14;
      lcuCommonBase@1000000014 : Codeunit 23044519;
      lcodLocation@1000000010 : Code[20];
      lsItemNumber@1000000009 : Text;
      lsVariantCode@1000000008 : Text;
      lsLotNumber@1000000007 : Text;
      lsSerialNumber@1000000006 : Text;
      lcodBinCode@1000000005 : Code[20];
      ldQuantity@1000000004 : Decimal;
      lcodJournalBatch@1000000003 : Code[10];
      lbAutoPost@1000000002 : Boolean;
      liNextLineNumber@1000000013 : Integer;
      lcodDocNumber@1000000012 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Creates a item adjustment (+/-) for the item.
      //               Warehouse tracked items can also be adjusted.
      //  Called From: "executeEvent"
      //  Side Effect: None
      //</FUNC>

      lcodLocation := ptrecEventParams.getValue('location');
      lsItemNumber := ptrecEventParams.getValue('item_number');
      lsVariantCode := ptrecEventParams.getValue('variant_code');
      lsLotNumber := UPPERCASE(ptrecEventParams.getValue('lot_number'));
      lsSerialNumber := UPPERCASE(ptrecEventParams.getValue('serial_number'));
      lcodBinCode := ptrecEventParams.getValue('bin_code');
      ldQuantity := ptrecEventParams.getValueAsDecimal('qty');
      lcodJournalBatch := ptrecEventParams.getValue('inv_adj_batch');
      lbAutoPost := ptrecEventParams.getValueAsBool('auto_post_inv_adjust');

      lrecLocation.GET(lcodLocation);

      IF NOT lcuCommonBase.isWhseLotTracked(lsItemNumber) THEN
        lsLotNumber := '';
      IF NOT lcuCommonBase.isWhseSerialTracked(lsItemNumber) THEN
        lsSerialNumber := '';

      IF lrecLocation."Directed Put-away and Pick" THEN BEGIN
        addWhseJournalLine(
          liNextLineNumber,  // out param
          lcodDocNumber,     // out param
          lcodJournalBatch,
          lcodLocation,
          lsItemNumber,
          lsVariantCode,
          lcodBinCode,
          ldQuantity,
          lsLotNumber,
          lsSerialNumber,
          lbAutoPost
        );
      END ELSE BEGIN
        addItemJournalLine(
          liNextLineNumber,  // out param
          lcodDocNumber,     // out param
          lcodJournalBatch,
          lcodLocation,
          lsItemNumber,
          lsVariantCode,
          lcodBinCode,
          ldQuantity,
          lsLotNumber,
          lsSerialNumber,
          lbAutoPost
        );
      END;

      IF lrecLocation."Directed Put-away and Pick" THEN
        ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Warehouse Journal Line"))
      ELSE
        ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Item Journal Line"));

      ptrecEventParams.setValue('Document No.', lcodDocNumber);
      ptrecEventParams.setValue('Document Line No.', FORMAT(liNextLineNumber));
      cuActivityLogMgt.logActivity(ptrecEventParams);

      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);
    END;

    PROCEDURE addItemJournalLine@1000000014(VAR piNextLineNumber@1000000002 : Integer;VAR pcodDocNumber@1000000000 : Code[20];pcodJournalBatch@1000000005 : Code[10];pcodLocationCode@1000000011 : Code[10];psItemNumber@1000000008 : Text;psVariantCode@1000000010 : Text;pcodBinCode@1000000012 : Code[20];pdQuantity@1000000013 : Decimal;psLotNumber@1000000014 : Text;psSerialNumber@1000000016 : Text;pbPost@1000000018 : Boolean);
    VAR
      lrecItemJnlLine@1000000003 : Record 83;
      lrecItemJnlBatch@1000000006 : Record 233;
      lcuNoSeriesMgmt@1000000007 : Codeunit 396;
      lcuReservationMgt@1000000017 : Codeunit 23044514;
      lcuJnlPost@1000000019 : Codeunit 23;
      lcodTemplate@1000000004 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Creates an item journal adjustment entry.
      //  Called From: "createAdjustmentEntry"
      //  Side Effect: None
      //</FUNC>

      psLotNumber := UPPERCASE(psLotNumber);
      psSerialNumber := UPPERCASE(psSerialNumber);

      lcodTemplate := cuCommonFuncs.getTemplate(PAGE::"Item Journal");
      lrecItemJnlLine.SETRANGE("Journal Template Name",lcodTemplate);
      lrecItemJnlLine.SETRANGE("Journal Batch Name",pcodJournalBatch);

      piNextLineNumber := 10000;
      pcodDocNumber:='';
      lrecItemJnlLine.LOCKTABLE;
      lrecItemJnlLine.SETRANGE("Journal Template Name", lcodTemplate);
      IF( lrecItemJnlLine.FINDLAST ) THEN BEGIN
        piNextLineNumber := lrecItemJnlLine."Line No." + 10000;
        pcodDocNumber := lrecItemJnlLine."Document No.";
      END;

      lrecItemJnlLine.RESET;
      lrecItemJnlLine.INIT();

      //create the line
      lrecItemJnlLine."Journal Template Name" := lcodTemplate;
      lrecItemJnlLine."Entry Type" := lrecItemJnlLine."Entry Type"::"Positive Adjmt.";

      IF( pcodDocNumber = '' ) THEN BEGIN
        lrecItemJnlBatch.GET(lcodTemplate,pcodJournalBatch);
        IF( lrecItemJnlBatch."No. Series" <> '' ) THEN BEGIN
          pcodDocNumber := lcuNoSeriesMgmt.GetNextNo(lrecItemJnlBatch."No. Series", TODAY,FALSE);
        END;
      END;

      lrecItemJnlLine."Document No." := pcodDocNumber;
      lrecItemJnlLine."Journal Batch Name" := pcodJournalBatch;
      lrecItemJnlLine.VALIDATE("Line No.",piNextLineNumber);
      lrecItemJnlLine.VALIDATE("Posting Date",TODAY);
      lrecItemJnlLine.VALIDATE("Item No.",psItemNumber);

      IF( psVariantCode <> '' ) THEN
        lrecItemJnlLine.VALIDATE("Variant Code",psVariantCode);
      lrecItemJnlLine.VALIDATE("Location Code", pcodLocationCode);
      lrecItemJnlLine.VALIDATE("Bin Code", pcodBinCode);
      lrecItemJnlLine.VALIDATE(Quantity, pdQuantity);
      lrecItemJnlLine.INSERT(TRUE);

      IF (psSerialNumber <> '') OR (psLotNumber <> '') THEN BEGIN
        lcuReservationMgt.AddRemoveItemJournalTracking(lrecItemJnlLine, psSerialNumber, psLotNumber,pdQuantity);
      END;

      // check flag for auto post
      IF( pbPost ) THEN BEGIN
        CLEAR(lcuJnlPost);
        lcuJnlPost.RUN(lrecItemJnlLine);
      END;
    END;

    LOCAL PROCEDURE addWhseJournalLine@1000000010(VAR piNextLineNumber@1000000010 : Integer;VAR pcodDocNumber@1000000009 : Code[20];pcodJournalBatch@1000000008 : Code[10];pcodLocationCode@1000000007 : Code[10];psItemNumber@1000000006 : Text;psVariantCode@1000000005 : Text;pcodBinCode@1000000004 : Code[20];pdQuantity@1000000003 : Decimal;psLotNumber@1000000002 : Text;psSerialNumber@1000000001 : Text;pbPost@1000000000 : Boolean);
    VAR
      lrecWhseJnlLine@1000000016 : Record 7311;
      lrecWhseJnlTemplate@1000000017 : Record 7309;
      lrecWhseJnlBatch@1000000015 : Record 7310;
      lrecLocation@1000000018 : Record 14;
      lrecBin@1000000019 : Record 7354;
      lcuNoSeriesMgmt@1000000014 : Codeunit 396;
      lcuReservationMgt@1000000013 : Codeunit 23044514;
      lcuWhseJnlRegisterBatch@1000000012 : Codeunit 7304;
      lcodTemplate@1000000011 : Code[20];
    BEGIN
      //<FUNC>
      //  Description: Creates an warehouse journal adjustment entry.
      //  Called From: "createAdjustmentEntry"
      //  Side Effect: None
      //</FUNC>

      psLotNumber := UPPERCASE(psLotNumber);
      psSerialNumber := UPPERCASE(psSerialNumber);

      lcodTemplate := cuCommonFuncs.getWhseTemplate(PAGE::"Whse. Item Journal");
      lrecWhseJnlBatch.GET(lcodTemplate,pcodJournalBatch,pcodLocationCode);
      lrecWhseJnlTemplate.GET(lcodTemplate);

      lrecWhseJnlLine.SETRANGE("Journal Template Name",lcodTemplate);
      lrecWhseJnlLine.SETRANGE("Journal Batch Name",pcodJournalBatch);

      piNextLineNumber := 10000;
      pcodDocNumber:='';
      lrecWhseJnlLine.LOCKTABLE;
      lrecWhseJnlLine.SETRANGE("Journal Template Name", lcodTemplate);
      IF( lrecWhseJnlLine.FINDLAST ) THEN BEGIN
        piNextLineNumber := lrecWhseJnlLine."Line No." + 10000;
        pcodDocNumber := lrecWhseJnlLine."Whse. Document No.";
      END;

      lrecWhseJnlLine.RESET;
      lrecWhseJnlLine.INIT();

      //create the line
      lrecWhseJnlLine."Journal Template Name" := lcodTemplate;
      lrecWhseJnlLine."Journal Batch Name" := pcodJournalBatch;
      lrecWhseJnlLine."Entry Type" := lrecWhseJnlLine."Entry Type"::"Positive Adjmt.";
      lrecWhseJnlLine.VALIDATE("Location Code", pcodLocationCode);

      lrecLocation.GET(pcodLocationCode);
      IF lrecBin.GET(lrecLocation.Code,lrecLocation."Adjustment Bin Code") THEN BEGIN
        lrecWhseJnlLine."From Zone Code" := lrecBin."Zone Code";
        lrecWhseJnlLine."From Bin Code" := lrecBin.Code;
        lrecWhseJnlLine."From Bin Type Code" := lrecBin."Bin Type Code";
      END;

      // 2015+::begin
      //lrecWhseJnlLine.SetUpAdjustmentBin;
      // 2015+::end

      IF( pcodDocNumber = '' ) THEN BEGIN
        IF( lrecWhseJnlBatch."No. Series" <> '' ) THEN BEGIN
          pcodDocNumber := lcuNoSeriesMgmt.GetNextNo(lrecWhseJnlBatch."No. Series", TODAY,FALSE);
        END;
      END;

      lrecWhseJnlLine."Source Code" := lrecWhseJnlTemplate."Source Code";
      lrecWhseJnlLine."Reason Code" := lrecWhseJnlBatch."Reason Code";
      lrecWhseJnlLine."Registering No. Series" := lrecWhseJnlBatch."Registering No. Series";

      lrecWhseJnlLine."Whse. Document No." := pcodDocNumber;

      lrecWhseJnlLine.VALIDATE("Line No.",piNextLineNumber);
      lrecWhseJnlLine.VALIDATE("Registering Date",TODAY);

      lrecWhseJnlLine.VALIDATE("Item No.",psItemNumber);

      IF( psVariantCode <> '' ) THEN
        lrecWhseJnlLine.VALIDATE("Variant Code",psVariantCode);

      lrecWhseJnlLine.VALIDATE("Bin Code", pcodBinCode);
      lrecWhseJnlLine.VALIDATE(Quantity, pdQuantity);
      lrecWhseJnlLine.INSERT(TRUE);

      IF (psSerialNumber <> '') OR (psLotNumber <> '') THEN BEGIN
        lcuReservationMgt.AddRemoveWhseItemJournalTrack(lrecWhseJnlLine,psSerialNumber,psLotNumber,pdQuantity,0D);
      END;

      // check flag for auto post
      IF( pbPost ) THEN BEGIN
        CLEAR(lcuWhseJnlRegisterBatch);
        lcuWhseJnlRegisterBatch.RUN(lrecWhseJnlLine);
      END;
    END;

    PROCEDURE getItemPicture@1000000009(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511;VAR pbsOutput@1000000020 : BigText);
    VAR
      lcuBlobCompatbility@1000000001 : Codeunit 23044543;
    BEGIN
      lcuBlobCompatbility.getItemPicture(ptrecEventParams, pbsOutput);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getLotNumberAvail@1000000006(VAR ptrecEventParams@1000000003 : TEMPORARY Record 23044511;VAR pbsOutput@1000000006 : BigText);
    VAR
      lrecItem@1000000000 : Record 27;
      lrecItemLedgerEntry@1000000005 : Record 32;
      lrecReservationEntry@1000000008 : Record 337;
      ltrecItemLedgerEntry@1000000007 : TEMPORARY Record 32;
      lcodLocation@1000000002 : Code[10];
      lcodItemNumber@1000000001 : Text;
      ldnOutput@1000000009 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
    BEGIN
      // Return available lot number and reservation entry

      lcodLocation := ptrecEventParams.getValue('location');
      lcodItemNumber := ptrecEventParams.getValue('item_number');


      lrecItem.GET(lcodItemNumber);

      // find serial numbers in the system
      lrecItemLedgerEntry.SETRANGE("Location Code", lcodLocation);
      lrecItemLedgerEntry.SETRANGE("Item No.", lcodItemNumber);
      lrecItemLedgerEntry.SETFILTER("Lot No.",'<>%1','');
      lrecItemLedgerEntry.SETRANGE(Open,TRUE);

      // going to group the duplicates together
      IF lrecItemLedgerEntry.FINDSET(FALSE) THEN BEGIN
        REPEAT
          ltrecItemLedgerEntry.SETRANGE("Lot No.",lrecItemLedgerEntry."Lot No.");
          IF( NOT ltrecItemLedgerEntry.FINDFIRST ) THEN BEGIN
            ltrecItemLedgerEntry := lrecItemLedgerEntry;
            ltrecItemLedgerEntry.INSERT;
          END ELSE BEGIN
            ltrecItemLedgerEntry."Remaining Quantity" += lrecItemLedgerEntry."Remaining Quantity";
            ltrecItemLedgerEntry.MODIFY;
          END;
        UNTIL( lrecItemLedgerEntry.NEXT=0);
      END;



      lrecReservationEntry.SETRANGE("Item No.", lcodItemNumber);
      lrecReservationEntry.SETRANGE("Location Code", lcodLocation);
      lrecReservationEntry.SETRANGE(Positive,FALSE);

      ldnOutput := ldnOutput.StringBuilder();
      ldnOutput.Append('<LOT_NUMBERS>');

      ltrecItemLedgerEntry.RESET;
      IF( ltrecItemLedgerEntry.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          ldnOutput.Append('<ENTRY>');
          ldnOutput.Append(STRSUBSTNO('<LN>%1</LN>',ltrecItemLedgerEntry."Lot No."));
          ldnOutput.Append(STRSUBSTNO('<QTY>%1</QTY>',ltrecItemLedgerEntry."Remaining Quantity"));

          // check for reservation
          lrecReservationEntry.SETRANGE("Lot No.", ltrecItemLedgerEntry."Lot No.");
          lrecReservationEntry.SETRANGE("Item No.", lcodItemNumber);
          lrecReservationEntry.SETRANGE("Location Code", lcodLocation);
          IF( lrecReservationEntry.FINDFIRST ) THEN BEGIN
            IF (lrecReservationEntry.Quantity <> 0) THEN BEGIN
              ldnOutput.Append('<RESERVED>1</RESERVED>');
            END ELSE BEGIN
              ldnOutput.Append('<RESERVED>0</RESERVED>');
            END;
          END ELSE BEGIN
            ldnOutput.Append('<RESERVED>0</RESERVED>');
          END;
          ldnOutput.Append('</ENTRY>');
        UNTIL(ltrecItemLedgerEntry.NEXT=0);
      END;

      ldnOutput.Append('</LOT_NUMBERS>');
      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE printItemLabel@1000000008(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecItem@1000000002 : Record 27;
      lrecItemLedgerEntry@1000000006 : Record 32;
      lsLotNumber@1000000003 : Text;
      lsSerialNumber@1000000004 : Text;
      ldtExpirationDate@1000000005 : Date;
    BEGIN
      //<FUNC>
      //  Description: Prints item labels from the handheld inquiry page
      //  Called From: Handheld
      //  Side Effect: None
      //</FUNC>

      lrecItem.GET(ptrecEventParams.getItemNo());
      lsLotNumber := ptrecEventParams.getLotNo();
      lsSerialNumber := ptrecEventParams.getSerialNo();
      ldtExpirationDate := 0D;

      IF( lsLotNumber <> '' ) THEN BEGIN
        lrecItemLedgerEntry.SETRANGE("Item No.",lrecItem."No.");
        lrecItemLedgerEntry.SETRANGE("Lot No.",lsLotNumber);
        lrecItemLedgerEntry.SETRANGE(Open,TRUE);
        lrecItemLedgerEntry.SETFILTER("Expiration Date",'<>%1',0D);
        IF( lrecItemLedgerEntry.FINDFIRST ) THEN
          ldtExpirationDate := lrecItemLedgerEntry."Expiration Date";
      END;

      ptrecEventParams.setValue('label_include_qty',FORMAT(FALSE));
      ptrecEventParams.setValue('label_quantity', FORMAT(0));
      ptrecEventParams.setValue('label_uom', lrecItem."Base Unit of Measure");
      ptrecEventParams.setValue('label_numcopies',FORMAT(1));
      ptrecEventParams.setValue('label_variant_code',ptrecEventParams.getValue('variant_code'));
      ptrecEventParams.setValue('label_item_number',lrecItem."No.");
      ptrecEventParams.setValue('label_ledger_entry_number',FORMAT(0));


      ptrecEventParams.setValue('label_tracking_number', lsLotNumber+lsSerialNumber);
      ptrecEventParams.setValue('label_expiry_date', FORMAT(ldtExpirationDate));


      cuPrintingMgmt.handlePrint( ptrecEventParams, pbsOutput);
    END;

    LOCAL PROCEDURE getItemList@1000000013(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecItem@1000000002 : Record 27;
      lrecWHISetup@1000000015 : Record 23044502;
      ltrecItem@1000000013 : TEMPORARY Record 27;
      lrrefItemRef@1000000012 : RecordRef;
      lcuDatasetTools@1000000011 : Codeunit 23044535;
      ldnOutput@1000000004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lsFilter@1000000007 : Text[250];
      liMaxRecordCount@1000000006 : Integer;
      liRecordCounter@1000000003 : Integer;
    BEGIN
      //<FUNC>
      //  Gets the item list.  Max records returned configured by whi setup.
      //</FUNC>

      ldnOutput := ldnOutput.StringBuilder();
      lsFilter := ptrecEventParams.getValue('filter');

      IF( lsFilter <> '' ) THEN BEGIN
        lsFilter := '*' + lsFilter + '*';
      END;

      lrecWHISetup.GET();
      liMaxRecordCount := lrecWHISetup."Document Max List";
      IF liMaxRecordCount = 0 THEN
        liMaxRecordCount := 999999;

      IF lsFilter<>'' THEN
        lrecItem.SETFILTER("No.",lsFilter);

      liRecordCounter := 0;
      IF lrecItem.FINDSET(FALSE) THEN BEGIN
        REPEAT
          ltrecItem := lrecItem;
          ltrecItem.INSERT;
          liRecordCounter += 1;
        UNTIL((lrecItem.NEXT=0) OR (liRecordCounter >= liMaxRecordCount))
      END;

      ltrecItem.RESET;
      lrrefItemRef.GETTABLE( ltrecItem  );
      IF ( lrrefItemRef.FINDFIRST() ) THEN;

      lcuDatasetTools.BuildLinesOnlyDataset(
        iEventID,
        lrrefItemRef,
        FALSE,
        ldnOutput);


      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    LOCAL PROCEDURE getItemDetails@1000000012(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecItem@1000000006 : Record 27;
      lrecBinContent@1000000012 : Record 7302;
      lrecItemTrackingCode@100000000 : Record 6502;
      ltrecBinContents@1000000013 : TEMPORARY Record 7302;
      lrecConfig@1000000007 : Record 23044504;
      ldnOutput@1000000015 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lrrefHeader@1000000010 : RecordRef;
      lrrefLine@1000000009 : RecordRef;
      lcuDatasetTools@1000000008 : Codeunit 23044535;
      lsItemNumber@1000000002 : Text;
      lsVariantCode@1000000003 : Text;
      lsLotNumber@1000000004 : Text;
      lsSerialNumber@1000000005 : Text;
      ldBinQuantity@1000000014 : Decimal;
    BEGIN
      //<FUNC>
      //  Gets the item details and bin contents.
      //</FUNC>

      lsItemNumber := ptrecEventParams.getItemNo();
      lsVariantCode := ptrecEventParams.getVariant();
      lsLotNumber := ptrecEventParams.getLotNo();
      lsSerialNumber := ptrecEventParams.getSerialNo();

      cuCommonFuncs.getDeviceConfig( lrecConfig,ptrecEventParams);

      ldnOutput := ldnOutput.StringBuilder();

      lrecItem.SETRANGE("No.", lsItemNumber);
      lrecItem.SETFILTER("Location Filter", lrecConfig."Location Code");
      lrecItem.SETFILTER("Variant Filter",lsVariantCode);
      IF (lsLotNumber <> '') THEN BEGIN
        lrecItem.SETFILTER("Lot No. Filter", lsLotNumber);
      END;
      IF (lsSerialNumber <> '') THEN BEGIN
        lrecItem.SETFILTER("Serial No. Filter", lsSerialNumber);
      END;

      IF( lrecItem.FINDSET(FALSE) ) THEN;
      lrrefHeader.GETTABLE( lrecItem );


      lcuDatasetTools.SetOverrideValueEachRow(iEventID,DATABASE::Item,-1,'',lsLotNumber+lsSerialNumber,FALSE,TRUE,0);
      lcuDatasetTools.SetOverrideValueEachRow(iEventID,DATABASE::Item,-2,'',lsVariantCode,FALSE,TRUE,0);

      lcuDatasetTools.BuildHeaderTable(iEventID,lrrefHeader,ldnOutput);

      pbsOutput.ADDTEXT('<DATASET>');

      pbsOutput.ADDTEXT( ldnOutput.ToString() ); // add the header table


      pbsOutput.ADDTEXT('<TABLE id="line">');
      pbsOutput.ADDTEXT('<COLS>');
      cuCommonFuncs.initializeColumns( TRUE );
      cuCommonFuncs.addDSColumnsFromConfig( pbsOutput,iEventID,'', DATABASE::"Bin Content" );
      pbsOutput.ADDTEXT('</COLS>');
      pbsOutput.ADDTEXT('<ROWS>');

      lrecBinContent.SETRANGE("Item No.",lrecItem."No.");
      lrecBinContent.SETRANGE("Location Code",lrecConfig."Location Code");
      IF( lsVariantCode <> '' ) THEN
        lrecBinContent.SETRANGE("Variant Code",lsVariantCode);

      IF lrecItemTrackingCode.GET(lrecItem."Item Tracking Code") THEN BEGIN
        IF lrecItemTrackingCode."Lot Warehouse Tracking" THEN BEGIN
          IF lsLotNumber <> '' THEN
            lrecBinContent.SETFILTER("Lot No. Filter",lsLotNumber);
        END;

        IF lrecItemTrackingCode."SN Warehouse Tracking" THEN BEGIN
          IF lsSerialNumber <> '' THEN
            lrecBinContent.SETFILTER("Serial No. Filter", lsSerialNumber);
        END;
      END;

      IF( lrecBinContent.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          ltrecBinContents := lrecBinContent;
          ldBinQuantity := lrecBinContent.CalcQtyUOM();

          IF ( (ldBinQuantity>0) OR (lrecConfig."Bin Content Quantity Mode" = lrecConfig."Bin Content Quantity Mode"::"Show Zero Quantity")) THEN BEGIN
            pbsOutput.ADDTEXT('<R><FIELDS>');
            lrrefLine.GETTABLE( ltrecBinContents );
            cuCommonFuncs.setDSFieldOverrideValue(iEventID, '', DATABASE::"Bin Content", -1, FORMAT(ldBinQuantity));
            cuCommonFuncs.setDSFieldOverrideValue(iEventID, '', DATABASE::"Bin Content", -2, FORMAT(ltrecBinContents.CalcQtyAvailToTakeUOM()));
            cuCommonFuncs.addDSFieldsForRecord(pbsOutput,lrrefLine,iEventID,'');
            pbsOutput.ADDTEXT('</FIELDS></R>');
          END;
        UNTIL( lrecBinContent.NEXT = 0 );
      END;
      pbsOutput.ADDTEXT('</ROWS>');
      pbsOutput.ADDTEXT('</TABLE>');
      pbsOutput.ADDTEXT('</DATASET>');

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    LOCAL PROCEDURE getItemTransactions@1000000029(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecConfig@1000000013 : Record 23044504;
      lrecReservationEntry@1000000006 : Record 337;
      lrecReservationEntry2@1000000009 : Record 337;
      lrecOutSearchRule@1000000015 : Record 23044529;
      lrecWHISetup@1000000020 : Record 23044502;
      lrecItemLedgerEntry@1000000021 : Record 32;
      lrrefWriter@1000000011 : RecordRef;
      lrrefOutFoundRecord@1000000014 : RecordRef;
      lfFieldRef@1000000019 : FieldRef;
      lcuDocsAndLinks@1000000012 : Codeunit 23044529;
      lsItemNumber@1000000005 : Text;
      lsVariantCode@1000000004 : Text;
      lsLotNumber@1000000003 : Text;
      lsSerialNumber@1000000002 : Text;
      lcodDocNo@1000000008 : Code[20];
      lnNumTrans@1000000007 : Integer;
      liLineNo@1000000010 : Integer;
      liFieldIndex@1000000016 : Integer;
      liTotalFieldCount@1000000017 : Integer;
      lbFoundUOMField@1000000018 : Boolean;
    BEGIN
      //<FUNC>
      //  Gets the item recent transactions.
      //</FUNC>

      lsItemNumber := ptrecEventParams.getItemNo();
      lsVariantCode := ptrecEventParams.getVariant();
      lsLotNumber := ptrecEventParams.getLotNo();
      lsSerialNumber := ptrecEventParams.getSerialNo();


      cuCommonFuncs.getDeviceConfig( lrecConfig,ptrecEventParams);

      pbsOutput.ADDTEXT('<DATASET>');
      pbsOutput.ADDTEXT('<TABLE id="line">');

      // generate the dataset columns
      pbsOutput.ADDTEXT('<COLS>');
      cuCommonFuncs.initializeColumns( TRUE );
      cuCommonFuncs.addDSColumnsFromConfig( pbsOutput,iEventID,'', DATABASE::"Reservation Entry" );
      pbsOutput.ADDTEXT('</COLS>');

      // generate the rows
      pbsOutput.ADDTEXT('<ROWS>');
      BEGIN
        //
        // find any current reservations for this part and include those
        //
        lrecReservationEntry.ASCENDING(FALSE);
        IF ( lsSerialNumber <> '' ) THEN
          lrecReservationEntry.SETRANGE("Serial No.",lsSerialNumber);

        IF ( lsLotNumber <> '' ) THEN
          lrecReservationEntry.SETRANGE("Lot No.",lsLotNumber);

        lrecReservationEntry.SETRANGE("Item No.",lsItemNumber);

        IF( lsVariantCode <> '' ) THEN
          lrecReservationEntry.SETRANGE("Variant Code",lsVariantCode);

        lnNumTrans := 0;
        lrecReservationEntry.SETFILTER("Source Type",'<>%1',DATABASE::"Item Ledger Entry" );
        IF( lrecReservationEntry.FINDSET(FALSE,FALSE) ) THEN BEGIN // '-' to use ASCENDING(FALSE)
          REPEAT
            IF( lrecReservationEntry."Source Type" <> DATABASE::"Item Ledger Entry" ) THEN BEGIN
              pbsOutput.ADDTEXT('<R><FIELDS>');
              cuCommonFuncs.initVariantColumnIndex();
              lcodDocNo := '';
              IF(lrecReservationEntry."Source ID" = '' ) THEN BEGIN
                lrecReservationEntry2.SETRANGE("Entry No.", lrecReservationEntry."Entry No.");
                lrecReservationEntry2.SETRANGE(Positive,FALSE);
                IF( lrecReservationEntry2.FINDFIRST ) THEN BEGIN
                  lcodDocNo := lrecReservationEntry2."Source ID";
                  IF ((lrecReservationEntry2."Source Type" = DATABASE::"Transfer Line") OR (lrecReservationEntry2."Source Type" = DATABASE::"Prod. Order Component")) THEN BEGIN
                    liLineNo := lrecReservationEntry2."Source Prod. Order Line";
                  END ELSE BEGIN
                    liLineNo := lrecReservationEntry2."Source Ref. No.";
                  END;
                END ELSE BEGIN
                  lcodDocNo := lrecReservationEntry."Source ID";
                  IF ((lrecReservationEntry."Source Type" = DATABASE::"Transfer Line") OR (lrecReservationEntry."Source Type" = DATABASE::"Prod. Order Component")) THEN BEGIN
                    liLineNo := lrecReservationEntry."Source Prod. Order Line";
                  END ELSE BEGIN
                    liLineNo := lrecReservationEntry."Source Ref. No.";
                  END;
                END;
              END ELSE BEGIN
                lcodDocNo := lrecReservationEntry."Source ID";
                IF ((lrecReservationEntry."Source Type" = DATABASE::"Transfer Line") OR (lrecReservationEntry."Source Type" = DATABASE::"Prod. Order Component")) THEN BEGIN
                  liLineNo := lrecReservationEntry."Source Prod. Order Line";
                END ELSE BEGIN
                  liLineNo := lrecReservationEntry."Source Ref. No.";
                END;
              END;

              lrrefWriter.GETTABLE( lrecReservationEntry );
              cuCommonFuncs.setDSFieldOverrideValue(iEventID,
                '',
                DATABASE::"Reservation Entry",
                lrecReservationEntry.FIELDNO("Source ID"),
                lcodDocNo
              );
              IF (lcuDocsAndLinks.GetRecordRefKeys(lrecConfig."Location Code",
                                              '', //pcodBin
                                              lcodDocNo,
                                              liLineNo,
                                              lsItemNumber,
                                              FALSE,
                                              ptrecEventParams,
                                              lrrefOutFoundRecord,
                                              lrecOutSearchRule)) THEN BEGIN
                liFieldIndex := 1;
                liTotalFieldCount := lrrefOutFoundRecord.FIELDCOUNT;
                lbFoundUOMField := FALSE;
                REPEAT
                  lfFieldRef := lrrefOutFoundRecord.FIELDINDEX(liFieldIndex);
                  liFieldIndex := liFieldIndex +1;
                  IF ((lfFieldRef.NAME = 'Unit of Measure Code') OR (lfFieldRef.NAME = 'Unit of Measure')) THEN BEGIN
                    lbFoundUOMField := TRUE;
                    cuCommonFuncs.setDSFieldOverrideValue(iEventID,
                                                        '',
                                                        DATABASE::"Reservation Entry",
                                                        -1,
                                                        FORMAT(lfFieldRef.VALUE)
                                                      );
                  END;
                UNTIL ((liFieldIndex >liTotalFieldCount) OR lbFoundUOMField);
              END;
              cuCommonFuncs.addDSFieldsForRecord(pbsOutput,lrrefWriter,iEventID,'');
              pbsOutput.ADDTEXT('</FIELDS></R>');
              lnNumTrans += 1;
            END;
          UNTIL((lrecReservationEntry.NEXT=0) OR (lnNumTrans = lrecWHISetup."Item Inquiry Max Transactions"));
        END;// end reservations
      END;//if serial no. (mh)

      //
      // find the ledger entries
      //
      IF( lnNumTrans < lrecWHISetup."Item Inquiry Max Transactions" ) THEN BEGIN
        lrecItemLedgerEntry.RESET;
        lrecItemLedgerEntry.SETCURRENTKEY("Entry No.");

        lrecItemLedgerEntry.SETRANGE("Item No.",lsItemNumber);
        IF( lsSerialNumber <> '' ) THEN
          lrecItemLedgerEntry.SETRANGE("Serial No.",lsSerialNumber);
        IF( lsLotNumber <> '' ) THEN
          lrecItemLedgerEntry.SETRANGE("Lot No.",lsLotNumber);
        IF( lsVariantCode <> '' ) THEN
          lrecItemLedgerEntry.SETRANGE("Variant Code",lsVariantCode);

        lrecItemLedgerEntry.ASCENDING(FALSE);

        IF( lrecItemLedgerEntry.FINDSET(FALSE,FALSE) ) THEN BEGIN
          // The same output is re-used for up to 3 different tables.
          // This assumes the mandatory requirement that their must be the same # of columns
          // configured in the device column config.
          cuCommonFuncs.initializeColumns( TRUE );
          cuCommonFuncs.setWriteColumnHeader( FALSE ); // already written with shipment header
          cuCommonFuncs.addDSColumnsFromConfig( pbsOutput,iEventID,'', DATABASE::"Item Ledger Entry" );

          REPEAT
            pbsOutput.ADDTEXT('<R><FIELDS>');
            cuCommonFuncs.initVariantColumnIndex();
            lrrefWriter.GETTABLE( lrecItemLedgerEntry );
            cuCommonFuncs.addDSFieldsForRecord(pbsOutput,lrrefWriter,iEventID,'');
            pbsOutput.ADDTEXT('</FIELDS></R>');
            lnNumTrans += 1;
          UNTIL(lrecItemLedgerEntry.NEXT()=0) OR (lnNumTrans = lrecWHISetup."Item Inquiry Max Transactions");
        END; // end item ledger entries
      END;

      pbsOutput.ADDTEXT('</ROWS>');
      pbsOutput.ADDTEXT('</TABLE>');
      pbsOutput.ADDTEXT('</DATASET>');

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    LOCAL PROCEDURE getBinList@1000000000(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecConfig@1000000004 : Record 23044504;
      lrecBin@1000000002 : Record 7354;
      lrecWHISetup@1000000015 : Record 23044502;
      ltrecBin@1000000013 : TEMPORARY Record 7354;
      lrrefItemRef@1000000012 : RecordRef;
      lcuDatasetMgmt@1000000011 : Codeunit 23044535;
      ldnOutput@1000000005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lsFilter@1000000007 : Text[250];
      liMaxRecordCount@1000000006 : Integer;
      liRecordCounter@1000000003 : Integer;
      lrecBinContent@100000000 : Record 7302;
    BEGIN
      //<FUNC>
      //  Gets the bin list.  Max records returned configured by whi setup.
      //</FUNC>

      ldnOutput := ldnOutput.StringBuilder();
      lsFilter := ptrecEventParams.getValue('filter');

      cuCommonFuncs.getDeviceConfig( lrecConfig,ptrecEventParams);

      IF( lsFilter <> '' ) THEN BEGIN
        lsFilter := '*' + lsFilter + '*';
      END;

      lrecWHISetup.GET();
      liMaxRecordCount := lrecWHISetup."Document Max List";
      IF liMaxRecordCount = 0 THEN
        liMaxRecordCount := 999999;


      lrecBin.SETRANGE("Location Code", lrecConfig."Location Code");
      IF lsFilter<>'' THEN
        lrecBin.SETFILTER(Code,lsFilter);

      lrecBinContent.SETRANGE("Location Code",lrecConfig."Location Code");
      lrecBinContent.SETAUTOCALCFIELDS(Quantity);

      liRecordCounter := 0;
      IF lrecBin.FINDSET(FALSE) THEN BEGIN
        REPEAT

          lrecBinContent.SETRANGE("Bin Code",lrecBin.Code);
          lrecBinContent.SETFILTER(Quantity,'>0');
          IF lrecBinContent.FINDSET(FALSE) THEN;


          ltrecBin := lrecBin;
          ltrecBin.Empty := lrecBinContent.Quantity<=0;
          ltrecBin.INSERT;
          liRecordCounter += 1;
        UNTIL((lrecBin.NEXT=0) OR (liRecordCounter >= liMaxRecordCount))
      END;

      ltrecBin.RESET;
      lrrefItemRef.GETTABLE( ltrecBin  );
      IF ( lrrefItemRef.FINDFIRST() ) THEN;

      lcuDatasetMgmt.BuildLinesOnlyDataset(
        iEventID,
        lrrefItemRef,
        FALSE,
        ldnOutput);


      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getBinDetails@1000000016(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecBin@1000000007 : Record 7354;
      lrecConfig@1000000006 : Record 23044504;
      lrecBinContent@1000000008 : Record 7302;
      lrrefHeader@1000000005 : RecordRef;
      lrrefLine@1000000004 : RecordRef;
      lqBinByLot@1000000010 : Query 23044501;
      ldnOutput@1000000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lcodBinCode@1000000002 : Code[20];
      liEntryNo@1000000011 : Integer;
    BEGIN
      //<FUNC>
      //  Gets the bin details and bin contents.
      //</FUNC>

      lcodBinCode := ptrecEventParams.getBin();
      cuCommonFuncs.getDeviceConfig( lrecConfig,ptrecEventParams);

      //
      // This SelectLatestVersion call is introduced to workaround a bug in NAV's caching in 2013R2 and newer
      // when there are multiple service tiers.   Tends to happen with bin content records.
      //
      DATABASE.SELECTLATESTVERSION();



      lrecBin.GET(lrecConfig."Location Code", lcodBinCode);
      lrecBin.SETRECFILTER();
      lrrefHeader.GETTABLE( lrecBin );


      ldnOutput := ldnOutput.StringBuilder();
      ldnOutput.Append('<DATASET><TABLE id="header"><COLS>');
      cuCommonFuncs.initializeColumns( TRUE );
      cuCommonFuncs.addDSColumnsFromConfigDN(ldnOutput,iEventID,'', DATABASE::Bin );
      ldnOutput.Append('</COLS><ROWS><R><FIELDS>');

      cuCommonFuncs.addDSFieldsForRecordDN(ldnOutput,lrrefHeader,iEventID,'');
      ldnOutput.Append('</FIELDS></R></ROWS>');
      ldnOutput.Append('</TABLE>');

      ldnOutput.Append('<TABLE id="line">');
      ldnOutput.Append('<COLS>');
      cuCommonFuncs.initializeColumns( TRUE );


      IF lrecConfig."Bin Contents Inquiry Mode" = lrecConfig."Bin Contents Inquiry Mode"::"Bin Contents" THEN BEGIN
        cuCommonFuncs.addDSColumnsFromConfigDN( ldnOutput,iEventID,'', DATABASE::"Bin Content" );
        ldnOutput.Append('</COLS><ROWS>');

        lrecBinContent.SETRANGE("Location Code",lrecConfig."Location Code");
        lrecBinContent.SETRANGE("Bin Code", lcodBinCode);
        IF( lrecBinContent.FINDSET(FALSE) ) THEN BEGIN
          REPEAT
            getBinContentRecord(ldnOutput, lrecBinContent, (lrecConfig."Bin Content Quantity Mode" = lrecConfig."Bin Content Quantity Mode"::"Show Zero Quantity"));
          UNTIL(lrecBinContent.NEXT=0);
        END;
      END
      ELSE BEGIN
        cuCommonFuncs.addDSColumnsFromConfigDN( ldnOutput,iEventID,'', DATABASE::"Warehouse Entry" );
        ldnOutput.Append('</COLS><ROWS>');

        lqBinByLot.SETRANGE(Bin_Code, lcodBinCode);
        lqBinByLot.SETRANGE(Location_Code, lrecConfig."Location Code" );

        //Filter out "Zero Entries"
        IF lrecConfig."Bin Content Quantity Mode" = lrecConfig."Bin Content Quantity Mode"::"Hide Zero Quantity" THEN
        lqBinByLot.SETFILTER(Sum_Quantity, '<>%1',0);
          lqBinByLot.OPEN;

        liEntryNo := 0;
        WHILE lqBinByLot.READ DO BEGIN
          getBinContentRecordByLot(ldnOutput, lqBinByLot.Item_No,lqBinByLot.Variant_Code, lqBinByLot.Zone_Code, lqBinByLot.Bin_Code,
             lqBinByLot.Unit_of_Measure_Code, lqBinByLot.Lot_No, lqBinByLot.Serial_No, lqBinByLot.Sum_Quantity_Base, liEntryNo);
          liEntryNo += 1;
        END;
      END;

      ldnOutput.Append('</ROWS></TABLE>');
      ldnOutput.Append('</DATASET>');



      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getBinContentRecord@1000000018(VAR pdnOutput@1000000006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";precBinContent@1000000001 : Record 7302;pbShowZeroQty@1000000005 : Boolean);
    VAR
      lrecItem@1000000004 : Record 27;
      lrrefWriter@1000000002 : RecordRef;
      ldQuantity@1000000003 : Decimal;
    BEGIN
      ldQuantity := precBinContent.CalcQtyUOM();


      IF (ldQuantity = 0) AND (NOT pbShowZeroQty) THEN
        EXIT;
      pdnOutput.Append('<R>');
      pdnOutput.Append('<FIELDS>');


      cuCommonFuncs.setDSFieldOverrideValue(iEventID,
        '',
        DATABASE::"Bin Content",
        precBinContent.FIELDNO(Quantity),
        FORMAT(ldQuantity)
        );

      lrecItem.GET(precBinContent."Item No.");
      cuCommonFuncs.setDSFieldOverrideValue(iEventID,
        '',
        DATABASE::"Bin Content",
        -1,
        lrecItem.Description
        );

      cuCommonFuncs.setDSFieldOverrideValue(iEventID,
        '',
        DATABASE::"Bin Content",
        -2,
        lrecItem."Description 2"
        );



      lrrefWriter.GETTABLE(precBinContent);
      cuCommonFuncs.addDSFieldsForRecordDN(pdnOutput,lrrefWriter,iEventID,'');

      pdnOutput.Append('</FIELDS>');
      pdnOutput.Append('</R>');
    END;

    PROCEDURE getBinContentRecordByLot@1000000028(VAR pdnOutput@1000000014 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";psItemNo@1000000001 : Text;psVariantCode@1000000002 : Text;pcodZoneCode@1000000003 : Code[10];pcodBinCode@1000000004 : Code[20];pcodUOM@1000000005 : Code[10];psLotNo@1000000006 : Text;psSerialNo@1000000007 : Text;pdQtyBase@1000000008 : Decimal;piEntryNo@1000000011 : Integer);
    VAR
      lrecItem@1000000013 : Record 27;
      ltrecWhseEntry@1000000009 : TEMPORARY Record 7312;
      lrrefWriter@1000000010 : RecordRef;
      ldConvertedValue@1000000012 : Decimal;
    BEGIN
      lrecItem.GET(psItemNo);
      ldConvertedValue := cuCommonFuncs.ConvertUnitOfMeasure(
                            lrecItem,
                            pdQtyBase,
                            lrecItem."Base Unit of Measure",
                            pcodUOM);

      IF ldConvertedValue <> 0 THEN BEGIN

        pdnOutput.Append('<R>');
        pdnOutput.Append('<FIELDS>');

        ltrecWhseEntry."Entry No." := piEntryNo;
        ltrecWhseEntry."Item No." := psItemNo;
        ltrecWhseEntry."Variant Code" := psVariantCode;
        ltrecWhseEntry.Quantity := ldConvertedValue;
        ltrecWhseEntry."Unit of Measure Code" := pcodUOM;
        ltrecWhseEntry."Lot No." := psLotNo;
        ltrecWhseEntry."Serial No." := psSerialNo;
        ltrecWhseEntry.INSERT;

        cuCommonFuncs.setDSFieldOverrideValue(iEventID,
          '',
          DATABASE::"Warehouse Entry",
          -1,
          lrecItem.Description
        );

        cuCommonFuncs.setDSFieldOverrideValue(iEventID,
          '',
          DATABASE::"Warehouse Entry",
          -2,
          lrecItem."Description 2"
        );

        lrrefWriter.GETTABLE(ltrecWhseEntry);
        cuCommonFuncs.addDSFieldsForRecordDN(pdnOutput,lrrefWriter,iEventID,'');

        pdnOutput.Append('</FIELDS>');
        pdnOutput.Append('</R>');
      END;
    END;

    PROCEDURE getBinLicensePlates@1000000020(VAR ptrecEventParams@1000000002 : TEMPORARY Record 23044511;VAR pbsOutput@1000000001 : BigText);
    VAR
      lrecConfig@1000000000 : Record 23044504;
      lrecLPHeader@1000000007 : Record 23044505;
      lrrefLine@1000000006 : RecordRef;
      lcuDatasetTools@1000000005 : Codeunit 23044535;
      ldnOutput@1000000008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lcodBinCode@1000000003 : Code[20];
    BEGIN
      //<FUNC>
      //  Gets the license plates in the bin
      //</FUNC>

      lcodBinCode := ptrecEventParams.getBin();
      cuCommonFuncs.getDeviceConfig( lrecConfig,ptrecEventParams);


      lrecLPHeader.SETCURRENTKEY("Location Code","Bin Code",Status);
      lrecLPHeader.SETRANGE("Location Code",lrecConfig."Location Code");
      lrecLPHeader.SETRANGE("Bin Code",lcodBinCode);
      lrecLPHeader.SETFILTER(Status,'<>%1',lrecLPHeader.Status::Unbuilt);

      IF( lrecLPHeader.FINDSET(FALSE) ) THEN ;
      lrrefLine.GETTABLE(lrecLPHeader);

      ldnOutput := ldnOutput.StringBuilder();

      lcuDatasetTools.BuildLinesOnlyDataset(
        iEventID,
        lrrefLine,
        FALSE,
        ldnOutput);

      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
    }
    END.
  }
}

