OBJECT Codeunit 14000240 EShip Base Table Validation
{
  OBJECT-PROPERTIES
  {
    Date=07/13/20;
    Time=12:00:00 PM;
    Version List=SE0.62;
  }
  PROPERTIES
  {
    Permissions=TableData 21=r,
                TableData 167=r,
                TableData 249=rd,
                TableData 5900=r,
                TableData 5940=rm,
                TableData 5965=rm,
                TableData 7002=rd,
                TableData 7004=rd,
                TableData 25=r,
                TableData 5896=m;
    EventSubscriberInstance=Static-Automatic;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CustomerItemPackageUOM@1240020000 : Record 14000703;
      EMailListEntry@1240020002 : Record 14000908;
      EMailSetup@1240020003 : Record 14000905;
      EShipAgentService@1240020004 : Record 14000708;
      Package@1240020005 : Record 14000701;
      Receive@1240020006 : Record 14000601;
      ReceiveHeader@1240020007 : Record 14000601;
      SalesSetup@1240020008 : Record 311;
      ShippingAccount@1240020009 : Record 14000714;
      ShippingAgent@1240020010 : Record 291;
      ShippingSetup@1240020011 : Record 14000707;
      Text14000701@1240020012 : TextConst 'ENU=Must be 3 digits.';
      Text14000702@1240020013 : TextConst 'ENU=%1 is normally 12 digit, use this number anyway?';
      Text14000703@1240020014 : TextConst 'ENU=Packages already exist for this order.';
      Text14000704@1240020015 : TextConst 'ENU=%1 must be 2-4 characters.';
      Text14000705@1240020016 : TextConst 'ENU=Are you sure you want to turn receiving off.';
      Text14000706@1240020017 : TextConst 'ENU=%1 is normally 14 digit, use this number anyway?';
      Text14000707@1240020018 : TextConst 'ENU=Must be 2 letters.';
      Text14000708@1240020019 : TextConst 'ENU=Nothing Changed.';
      Text14000709@1240020020 : TextConst 'ENU=Nothing to Receive';
      Text14000710@1240020021 : TextConst 'ENU=Are you sure you want to turn shipping off.';
      Text14000711@1240020022 : TextConst 'ENU=Nothing Received';
      Text14000712@1240020023 : TextConst 'ENU=Are you sure you want to turn E-Mail off.';
      Text14000713@1240020024 : TextConst 'ENU=%1 %2 is not part of %3, use tihs number anyway?';
      Text14000714@1240020025 : TextConst 'ENU=Fully Received';
      Text14000715@1240020026 : TextConst 'ENU=Overreceived';
      Text14000716@1240020027 : TextConst 'ENU=Partially Received';
      Text14000717@1240020028 : TextConst 'ENU=Nothing to Ship';
      Text14000718@1240020029 : TextConst 'ENU=Nothing Packed';
      Text14000719@1240020030 : TextConst 'ENU=Fully Packed';
      Text14000720@1240020031 : TextConst 'ENU=Overpacked';
      Text14000721@1240020032 : TextConst 'ENU=Partially Packed';
      PurchSetup@1240020001 : Record 312;
      ItemTrackingCode@1240020033 : Record 6502;
      ShipToAddr@1240020036 : Record 222;
      SalesShptHeader@1240020035 : Record 110;
      OrderAddr@1240020034 : Record 224;
      InvtSetup@1240020037 : Record 313;
      Text14000722@1240020038 : TextConst 'ENU=Packages already exist for this line.';
      SalesHeader@1240020039 : Record 36;
      Globals@1240020040 : Codeunit 14000246;

    [EventSubscriber(Table,9,OnBeforeValidateEvent,"ISO 3 digit Country Code")]
    LOCAL PROCEDURE "Country/Region-ISO3digitCountryCode-OnBeforeValidate"@1240020000(VAR Rec@1240020000 : Record 9;VAR xRec@1240020001 : Record 9;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T9-F14000761> Country/Region - ISO 3 digit Country Code - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF NOT (STRLEN("ISO 3 digit Country Code") IN [0,3]) THEN
          ERROR(Text14000701);
      END;
    END;

    PROCEDURE "Country/Region-UPSWorldWideService"@1240020001(Rec@1240020000 : Record 9) : Boolean;
    BEGIN
      //<T9> Country/Region - UPSWorldWideServiceGlobal global function moved
      WITH Rec DO BEGIN
        IF Code <> '' THEN
          TESTFIELD(UPS);
        EXIT(NOT("ISO 2 char Country Code" IN ['','US','CA','PR']));
      END;
    END;

    PROCEDURE "Country/Region-UPSCanadianService"@1240020002(Rec@1240020000 : Record 9) : Boolean;
    BEGIN
      //<T9> Country/Region - UPSCanadianService global function moved
      WITH Rec DO BEGIN
        IF Code <> '' THEN
          TESTFIELD(UPS);
        EXIT("ISO 2 char Country Code" = 'CA');
      END;
    END;

    PROCEDURE "Country/Region-UPSPuertoRicoService"@1240020003(Rec@1240020000 : Record 9) : Boolean;
    BEGIN
      //<T9> Country/Region - UPSPuertoRicoService global function moved
      WITH Rec DO BEGIN
        IF Code <> '' THEN
          TESTFIELD(UPS);
        EXIT("ISO 2 char Country Code" = 'PR');
      END;
    END;

    PROCEDURE "Country/Region-FedExWorldWideService"@1240020004(Rec@1240020000 : Record 9) : Boolean;
    BEGIN
      //<T9> Country/Region - FedExWorldWideService global function moved
      WITH Rec DO BEGIN
        IF Code <> '' THEN
          TESTFIELD(FedEx);
        EXIT(NOT("ISO 2 char Country Code" IN ['','US']));
      END;
    END;

    PROCEDURE "Country/Region-FedExFromCanada"@1240020052(Rec@1240020000 : Record 9) : Boolean;
    BEGIN
      //<T9> Country/Region - FedExFromCanada global function moved
      WITH Rec DO BEGIN
        IF Code <> '' THEN
          TESTFIELD(FedEx);
        EXIT("ISO 2 char Country Code" = 'CA');
      END;
    END;

    PROCEDURE "Country/Region-LTLWorldWideService"@1240020005(Rec@1240020000 : Record 9) : Boolean;
    BEGIN
      //<T9> Country/Region - LTLWorldWideService global function moved
      WITH Rec DO BEGIN
        IF Code <> '' THEN
          TESTFIELD(LTL);
        EXIT(NOT("ISO 2 char Country Code" IN ['','US']));
      END;
    END;

    PROCEDURE "Country/Region-AirborneWorldWideService"@1240020006(Rec@1240020000 : Record 9) : Boolean;
    BEGIN
      //<T9> Country/Region - AirborneWorldWideService global function moved
      WITH Rec DO BEGIN
        IF Code <> '' THEN
          TESTFIELD(Airborne);
        EXIT(NOT("ISO 2 char Country Code" IN ['','US','CA','PR']));
      END;
    END;

    PROCEDURE "Country/Region-AirborneCanadianService"@1240020007(Rec@1240020000 : Record 9) : Boolean;
    BEGIN
      //<T9> Country/Region - AirborneCanadianService global function moved
      WITH Rec DO BEGIN
        IF Code <> '' THEN
          TESTFIELD(Airborne);
        EXIT("ISO 2 char Country Code" = 'CA');
      END;
    END;

    PROCEDURE "Country/Region-AirbornePuertoRicoService"@1240020008(Rec@1240020000 : Record 9) : Boolean;
    BEGIN
      //<T9> Country/Region - AirborneCanadianService global function moved
      WITH Rec DO BEGIN
        IF Code <> '' THEN
          TESTFIELD(Airborne);
        EXIT("ISO 2 char Country Code" = 'PR');
      END;
    END;

    PROCEDURE "Country/Region-DHLWorldWideService"@1240020009(Rec@1240020000 : Record 9) : Boolean;
    BEGIN
      //<T9> Country/Region - DHLWorldWideService global function moved
      WITH Rec DO BEGIN
        IF Code <> '' THEN
          TESTFIELD(DHL);
        EXIT(NOT("ISO 2 char Country Code" IN ['','US']));
      END;
    END;

    PROCEDURE "Country/Region-USPostalWorldWideService"@1240020010(Rec@1240020000 : Record 9) : Boolean;
    BEGIN
      //<T9> Country/Region - USPostalWorldWideService global function moved
      WITH Rec DO BEGIN
        IF Code <> '' THEN
          TESTFIELD(USPostal);
        EXIT(NOT("ISO 2 char Country Code" IN ['','US','AS','GU','MH','FM','PR','PW','UM','VI']));
      END;
    END;

    [EventSubscriber(Table,14,OnAfterDeleteEvent)]
    LOCAL PROCEDURE "Location-OnAfterDelete"@1240020015(VAR Rec@1240020000 : Record 14;RunTrigger@1240020001 : Boolean);
    BEGIN
      //<T14> Location - OnAfterDelete table trigger event
      IF NOT RunTrigger THEN
        EXIT;
      WITH Rec DO BEGIN
        ShippingAccount.RESET;
        ShippingAccount.SETRANGE("Ship-to Type",ShippingAccount."Ship-to Type"::Location);
        ShippingAccount.SETRANGE("Ship-to No.",Code);
        ShippingAccount.SETRANGE("Ship-to Code",'');
        ShippingAccount.DELETEALL;
      END;
    END;

    [EventSubscriber(Table,14,OnBeforeValidateEvent,"Country/Region Code")]
    LOCAL PROCEDURE "Location-Country/RegionCode-OnBeforeValidate"@1240020016(VAR Rec@1240020000 : Record 14;VAR xRec@1240020001 : Record 14;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T14-F5720> Location - Country/Region Code - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Country/Region Code" <> xRec."Country/Region Code" THEN
          IF "E-Ship Agent Code" <> '' THEN BEGIN
            xRec."E-Ship Agent Code" := '';
            VALIDATE("E-Ship Agent Code");
          END;
        Globals.SetLocationValues(Rec);
      END;
    END;

    [EventSubscriber(Table,14,OnBeforeValidateEvent,"E-Ship Agent Code")]
    LOCAL PROCEDURE "Location-E-ShipAgentCode-OnBeforeValidate"@1240020011(VAR Rec@1240020000 : Record 14;VAR xRec@1240020001 : Record 14;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T14-F14000702> Location - E-Ship Agent Code - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "E-Ship Agent Code" <> xRec."E-Ship Agent Code" THEN BEGIN
          IF "E-Ship Agent Code" = '' THEN
            "E-Ship Agent Service" := ''
          ELSE BEGIN
            ShippingAgent.GET("E-Ship Agent Code");
            VALIDATE(
              "E-Ship Agent Service",
              EShipAgentService.DefaultShipAgentService(ShippingAgent,"Country/Region Code"));
          END;
          IF CurrFieldNo = FIELDNO("E-Ship Agent Code") THEN
            EShipAgentService.CheckNameAddressLocation(ShippingAgent,Rec);
        END;
        Globals.SetLocationValues(Rec);
      END;
    END;

    [EventSubscriber(Table,14,OnBeforeValidateEvent,"E-Ship Agent Service")]
    LOCAL PROCEDURE "Location-E-ShipAgentService-OnBeforeValidate"@1240020012(VAR Rec@1240020000 : Record 14;VAR xRec@1240020001 : Record 14;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T14-F14000703> Location - E-Ship Agent Service - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "E-Ship Agent Service" <> '' THEN BEGIN
          TESTFIELD("E-Ship Agent Code");
          ShippingAgent.GET("E-Ship Agent Code");
          EShipAgentService.ValidateEShipAgentService(ShippingAgent,"E-Ship Agent Service","Country/Region Code");
        END;
      END;
    END;

    [EventSubscriber(Table,14,OnBeforeValidateEvent,"Shipping Payment Type")]
    LOCAL PROCEDURE "Location-ShippingPaymentType-OnBeforeValidate"@1240020014(VAR Rec@1240020000 : Record 14;VAR xRec@1240020001 : Record 14;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T14-F14000705> Location - Shipping Payment Type - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF ShippingAgent.GET("E-Ship Agent Code") THEN
          ShippingAccount.ValidateShippingAccount(
            ShippingAgent,"Shipping Payment Type",ShippingAccount."Ship-to Type"::Location,Code,'');
      END;
    END;

    [EventSubscriber(Table,18,OnAfterDeleteEvent)]
    LOCAL PROCEDURE "Customer-OnAfterDelete"@1240020025(VAR Rec@1240020000 : Record 18;RunTrigger@1240020001 : Boolean);
    BEGIN
      //<T18> Customer - OnAfterDelete table trigger event
      IF NOT RunTrigger THEN
        EXIT;
      WITH Rec DO BEGIN
        EMailListEntry.RESET;
        EMailListEntry.SETRANGE("Table ID",DATABASE::Customer);
        EMailListEntry.SETRANGE(Type,0);
        EMailListEntry.SETRANGE(Code,"No.");
        EMailListEntry.SETRANGE("Code 2",'');
        EMailListEntry.DELETEALL;

        ShippingAccount.RESET;
        ShippingAccount.SETRANGE("Ship-to Type",ShippingAccount."Ship-to Type"::Customer);
        ShippingAccount.SETRANGE("Ship-to No.","No.");
        ShippingAccount.DELETEALL;
      END;
    END;

    [EventSubscriber(Table,18,OnAfterValidateEvent,"Shipping Agent Code")]
    LOCAL PROCEDURE "Customer-ShippingAgentCode - OnAfterValidate"@1240020026(VAR Rec@1240020000 : Record 18;VAR xRec@1240020001 : Record 18;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T18-F31> Customer - Shipping Agent Code - OnAfterValidate field trigger event
      WITH Rec DO BEGIN
        SalesSetup.GET;
        IF ("Shipping Agent Code" <> xRec."Shipping Agent Code") AND SalesSetup."Enable Shipping" THEN
          IF "Shipping Agent Code" = '' THEN BEGIN
            "E-Ship Agent Service" := '';
          END ELSE BEGIN
            ShippingAgent.GET("Shipping Agent Code");
            VALIDATE(
              "E-Ship Agent Service",
              EShipAgentService.DefaultShipAgentService(ShippingAgent,"Country/Region Code"));

            IF CurrFieldNo = FIELDNO("Shipping Agent Code") THEN
              EShipAgentService.CheckNameAddressCustomer(ShippingAgent,Rec);
          END;
          Globals.SetCustomerValues(Rec);
      END;
    END;

    [EventSubscriber(Table,18,OnAfterValidateEvent,"Country/Region Code")]
    LOCAL PROCEDURE "Customer-Country/RegionCode - OnAfterValidate"@1240020027(VAR Rec@1240020000 : Record 18;VAR xRec@1240020001 : Record 18;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T18-F35> Customer - Country/Region Code - OnAfterValidate field trigger event
      WITH Rec DO BEGIN
        IF "Country/Region Code" <> xRec."Country/Region Code" THEN
          IF "Shipping Agent Code" <> '' THEN BEGIN
            xRec."Shipping Agent Code" := '';
            VALIDATE("Shipping Agent Code");
          END;
        Globals.SetCustomerValues(Rec);
      END;
    END;

    [EventSubscriber(Table,18,OnAfterValidateEvent,"E-Mail")]
    LOCAL PROCEDURE "Customer-EMail-OnAfterValidate"@1240020028(VAR Rec@1240020000 : Record 18;VAR xRec@1240020001 : Record 18;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T18-F102> Customer - EMail - OnAfterValidate field trigger event
      WITH Rec DO BEGIN
        IF "E-Mail" <> '' THEN BEGIN
          SalesSetup.GET;
          IF SalesSetup."Enable E-Mail" THEN
            EMailListEntry.InsertNewEMailListEntry(Contact,"E-Mail",DATABASE::Customer,0,"No.",'',TRUE);
        END;
      END;
    END;

    [EventSubscriber(Table,18,OnBeforeValidateEvent,"E-Ship Agent Service")]
    LOCAL PROCEDURE "Customer-E-ShipAgentService-OnBeforeValidate"@1240020024(VAR Rec@1240020000 : Record 18;VAR xRec@1240020001 : Record 18;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T18-F14000701> Customer - E-Ship Agent Service - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "E-Ship Agent Service" <> '' THEN BEGIN
          TESTFIELD("Shipping Agent Code");
          ShippingAgent.GET("Shipping Agent Code");
          EShipAgentService.ValidateEShipAgentService(ShippingAgent,"E-Ship Agent Service","Country/Region Code");
          IF EShipAgentService."Default Shipping Agent Service" <> '' THEN
            IF "Shipping Agent Service Code" <> EShipAgentService."Default Shipping Agent Service" THEN
              VALIDATE("Shipping Agent Service Code",EShipAgentService."Default Shipping Agent Service");
        END;
      END;
    END;

    [EventSubscriber(Table,18,OnBeforeValidateEvent,"Free Freight")]
    LOCAL PROCEDURE "Customer-FreeFreight-OnBeforeValidate"@1240020017(VAR Rec@1240020000 : Record 18;VAR xRec@1240020001 : Record 18;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T18-F14000702> Customer - Free Freight - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF NOT "Free Freight" THEN
          "No Free Freight Lines on Order" := FALSE;
      END;
    END;

    [EventSubscriber(Table,18,OnBeforeValidateEvent,"Blind Shipment")]
    LOCAL PROCEDURE "Customer-BlindShipment-OnBeforeValidate"@1240020018(VAR Rec@1240020000 : Record 18;VAR xRec@1240020001 : Record 18;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T18-F14000706> Customer - Blind Shipment  OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Blind Shipment" THEN
          "Double Blind Shipment" := FALSE;
      END;
    END;

    [EventSubscriber(Table,18,OnBeforeValidateEvent,"Double Blind Shipment")]
    LOCAL PROCEDURE "Customer-DoubleBlindShipment-OnBeforeValidate"@1240020019(VAR Rec@1240020000 : Record 18;VAR xRec@1240020001 : Record 18;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T18-F14000707> Customer - Double Blind Shipment - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Double Blind Shipment" THEN
          "Blind Shipment" := FALSE
        ELSE
          "Double Blind Ship-from Cust No" := '';
      END;
    END;

    [EventSubscriber(Table,18,OnBeforeValidateEvent,"Double Blind Ship-from Cust No")]
    LOCAL PROCEDURE "Customer-DoubleBlindShip-fromCustNo-OnBeforeValidate"@1240020020(VAR Rec@1240020000 : Record 18;VAR xRec@1240020001 : Record 18;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T18-F14000708> Customer - Double Blind Ship-from Cust No - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Double Blind Ship-from Cust No" <> '' THEN
          TESTFIELD("Double Blind Shipment");
      END;
    END;

    [EventSubscriber(Table,18,OnBeforeValidateEvent,"No Free Freight Lines on Order")]
    LOCAL PROCEDURE "Customer-NoFreeFreightLinesonOrder-OnBeforeValidate"@1240020021(VAR Rec@1240020000 : Record 18;VAR xRec@1240020001 : Record 18;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T18-F14000709> Customer - No Free Freight Lines on Order - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        TESTFIELD("Free Freight");
      END;
    END;

    [EventSubscriber(Table,18,OnBeforeValidateEvent,"Shipping Payment Type")]
    LOCAL PROCEDURE "Customer-ShippingPaymentType-OnBeforeValidate"@1240020022(VAR Rec@1240020000 : Record 18;VAR xRec@1240020001 : Record 18;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T18-F14000711> Customer - Shipping Payment Type - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF ShippingAgent.GET("Shipping Agent Code") THEN
          ShippingAccount.ValidateShippingAccount(
            ShippingAgent,"Shipping Payment Type",ShippingAccount."Ship-to Type"::Customer,"No.",'');
      END;
    END;

    [EventSubscriber(Table,23,OnAfterDeleteEvent)]
    LOCAL PROCEDURE "Vendor-OnAfterDelete"@1240020034(VAR Rec@1240020000 : Record 23;RunTrigger@1240020001 : Boolean);
    BEGIN
      //<T23> Vendor - OnAfterDelete table trigger event
      IF NOT RunTrigger THEN
        EXIT;
      WITH Rec DO BEGIN
        EMailListEntry.RESET;
        EMailListEntry.SETRANGE("Table ID",DATABASE::Vendor);
        EMailListEntry.SETRANGE(Type,0);
        EMailListEntry.SETRANGE(Code,"No.");
        EMailListEntry.SETRANGE("Code 2",'');
        EMailListEntry.DELETEALL;

        ShippingAccount.RESET;
        ShippingAccount.SETRANGE("Ship-to Type",ShippingAccount."Ship-to Type"::Vendor);
        ShippingAccount.SETRANGE("Ship-to No.","No.");
        ShippingAccount.DELETEALL;
      END;
    END;

    [EventSubscriber(Table,23,OnAfterValidateEvent,"Shipping Agent Code")]
    LOCAL PROCEDURE "Vendor-ShippingAgentCode-OnAfterValidate"@1240020033(VAR Rec@1240020000 : Record 23;VAR xRec@1240020001 : Record 23;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T23-F31> Vendor - Shipping Agent Code - OnAfterValidate field trigger event
      WITH Rec DO BEGIN
        PurchSetup.GET;
        IF ("Shipping Agent Code" <> xRec."Shipping Agent Code") AND PurchSetup."Enable Shipping" THEN
          IF "Shipping Agent Code" = '' THEN
            "E-Ship Agent Service" := ''
          ELSE BEGIN
            ShippingAgent.GET("Shipping Agent Code");
            VALIDATE(
              "E-Ship Agent Service",
              EShipAgentService.DefaultShipAgentService(ShippingAgent,"Country/Region Code"));
          END;
          Globals.SetVendorValues(Rec);
      END;
    END;

    [EventSubscriber(Table,23,OnAfterValidateEvent,"E-Mail")]
    LOCAL PROCEDURE "Vendor-EMail-OnAfterValidate"@1240020032(VAR Rec@1240020000 : Record 23;VAR xRec@1240020001 : Record 23;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T23-F102> Vendor - E-Mail - OnAfterValidate field trigger event
      WITH Rec DO BEGIN
        IF "E-Mail" <> '' THEN BEGIN
          PurchSetup.GET;
          IF PurchSetup."Enable E-Mail" THEN
            EMailListEntry.InsertNewEMailListEntry(Contact,"E-Mail",DATABASE::Vendor,0,"No.",'',TRUE);
        END;
      END;
    END;

    [EventSubscriber(Table,23,OnBeforeValidateEvent,"E-Ship Agent Service")]
    LOCAL PROCEDURE "Vendor-E-ShipAgentService-OnBeforeValidate"@1240020031(VAR Rec@1240020000 : Record 23;VAR xRec@1240020001 : Record 23;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T23-F14000701> Vendor - E-Ship Agent Service - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "E-Ship Agent Service" <> '' THEN BEGIN
          TESTFIELD("Shipping Agent Code");
          ShippingAgent.GET("Shipping Agent Code");
          EShipAgentService.ValidateEShipAgentService(ShippingAgent,"E-Ship Agent Service","Country/Region Code");
        END;
      END;
    END;

    [EventSubscriber(Table,23,OnAfterValidateEvent,"Country/Region Code")]
    LOCAL PROCEDURE "Vendor-CountryRegionCode-OnAfterValidate"@1240020139(VAR Rec@1240020000 : Record 23;VAR xRec@1240020001 : Record 23;CurrFieldNo@1240020002 : Integer);
    BEGIN
      // <T23-F35> Vendor - Country/Region Code - OnAfterValidate
      Globals.SetVendorValues(Rec);
    END;

    [EventSubscriber(Table,23,OnBeforeValidateEvent,"Shipping Payment Type")]
    LOCAL PROCEDURE "Vendor-ShippingPaymentType-OnBeforeValidate"@1240020029(VAR Rec@1240020000 : Record 23;VAR xRec@1240020001 : Record 23;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T23-F14000704> Vendor - Shipping Payment Type - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF ShippingAgent.GET("Shipping Agent Code") THEN
          ShippingAccount.ValidateShippingAccount(
            ShippingAgent,"Shipping Payment Type",ShippingAccount."Ship-to Type"::Vendor,"No.",'');
      END;
    END;

    [EventSubscriber(Table,27,OnBeforeValidateEvent,"Schedule B Code")]
    LOCAL PROCEDURE "Item-ScheduleBCode-OnBeforeValidate"@1240020037(VAR Rec@1240020000 : Record 27;VAR xRec@1240020001 : Record 27;CurrFieldNo@1240020002 : Integer);
    VAR
      ScheduleBCode@14000701 : Record 14000718;
    BEGIN
      //<T27-F14000709> Item - Schedule B Code - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Schedule B Code" = '' THEN BEGIN
          "Schedule B Unit of Measure 1" := '';
          "Schedule B Unit of Measure 2" := '';
          "Schedule B Quantity 1" := 0;
          "Schedule B Quantity 2" := 0;
        END ELSE BEGIN
          ScheduleBCode.GET("Schedule B Code");
          "Schedule B Unit of Measure 1" := ScheduleBCode."Unit of Measure 1";
          "Schedule B Unit of Measure 2" := ScheduleBCode."Unit of Measure 2";
        END;
      END;
    END;

    [EventSubscriber(Table,27,OnBeforeValidateEvent,"E-Ship Tracking Code")]
    LOCAL PROCEDURE "Item-E-ShipTrackingCode-OnBeforeValidate"@1240020036(VAR Rec@1240020000 : Record 27;VAR xRec@1240020001 : Record 27;CurrFieldNo@1240020002 : Integer);
    VAR
      EShipTrackingCode@14000701 : Record 14000721;
    BEGIN
      //<T27-F14000716> Item - E-Ship Tracking Code - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "E-Ship Tracking Code" <> '' THEN BEGIN
          EShipTrackingCode.GET("E-Ship Tracking Code");
          IF EShipTrackingCode."Transfer Serial Numbers" OR
             EShipTrackingCode."Transfer Lot Numbers" OR
             EShipTrackingCode."Transfer Warranty Date" OR
             EShipTrackingCode."Transfer Expiration Date" OR
             EShipTrackingCode."Rec. Transfer Serial Numbers" OR
             EShipTrackingCode."Rec. Transfer Lot Numbers" OR
             EShipTrackingCode."Rec. Transfer Warranty Date" OR
             EShipTrackingCode."Rec. Transfer Expiration Date"
          THEN BEGIN
            TESTFIELD("Item Tracking Code");
            ItemTrackingCode.GET("Item Tracking Code");
          END;
        END;
      END;
    END;

    [EventSubscriber(Table,27,OnBeforeValidateEvent,"Item UPC/EAN Number")]
    LOCAL PROCEDURE "Item-ItemUPC/EANNumber-OnBeforeValidate"@1240020035(VAR Rec@1240020000 : Record 27;VAR xRec@1240020001 : Record 27;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T27-F14000821> Item - Item UPC/EAN Number - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF NOT (STRLEN("Item UPC/EAN Number") IN [0,12]) THEN
          IF NOT CONFIRM(
                   Text14000702,FALSE,
                   FIELDNAME("Item UPC/EAN Number"))
          THEN
            ERROR(Text14000708);
      END;
    END;

    [EventSubscriber(Table,36,OnAfterDeleteEvent)]
    LOCAL PROCEDURE "SalesHeader-OnAfterDelete"@1240020059(VAR Rec@1240020000 : Record 36;RunTrigger@1240020001 : Boolean);
    VAR
      EShipSetGlobalVariable@1240020002 : Codeunit 14000246;
    BEGIN
      //<T36> Sales Header - OnAfterDelete table trigger event
      IF NOT RunTrigger THEN
        EXIT;
      WITH Rec DO BEGIN
        IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
          Package.RESET;
          Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          Package.SETRANGE("Source Type",DATABASE::"Sales Header");
          Package.SETRANGE("Source Subtype","Document Type");
          Package.SETRANGE("Source ID","No.");
          Package.DELETEALL(TRUE);
        END;

        IF "Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"] THEN BEGIN
          ReceiveHeader.RESET;
          ReceiveHeader.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          ReceiveHeader.SETRANGE("Source Type",DATABASE::"Sales Header");
          ReceiveHeader.SETRANGE("Source Subtype","Document Type");
          ReceiveHeader.SETRANGE("Source ID","No.");
          ReceiveHeader.DELETEALL(TRUE);
        END;

       "SalesHeader-DeleteShippingAgentOptionPage"(Rec);
      END;
    END;

    [EventSubscriber(Table,36,OnAfterValidateEvent,"Sell-to Customer No.")]
    LOCAL PROCEDURE "SalesHeader-Sell-toCustomerNo-OnAfterValidate"@1240020058(VAR Rec@1240020000 : Record 36;VAR xRec@1240020001 : Record 36;CurrFieldNo@1240020002 : Integer);
    VAR
      Cust@1240020003 : Record 18;
    BEGIN
      //<T36-F02> Sales Header - Sell-To Customer No. - OnAfterValidate field trigger event
      WITH Rec DO BEGIN
        // GetCust("Sell-to Customer No."); Replaced function call with actual code to avoid creating another function
        IF NOT (("Document Type" = "Document Type"::Quote) AND ("Sell-to Customer No." = '')) THEN BEGIN
          IF "Sell-to Customer No." <> Cust."No." THEN
            Cust.GET("Sell-to Customer No.");
        END ELSE
          CLEAR(Cust);

        "External Sell-to No." := Cust."External No.";
        IF Cust."Default Ship-for Code" <> '' THEN
          VALIDATE("Ship-for Code",Cust."Default Ship-for Code");
        Globals.SetSalesHeaderValues(Rec);
      END;
    END;

    [EventSubscriber(Table,36,OnAfterValidateEvent,"Ship-to Code")]
    LOCAL PROCEDURE "SalesHeader-Ship-toCode-OnAfterValidate"@1240020057(VAR Rec@1240020000 : Record 36;VAR xRec@1240020001 : Record 36;CurrFieldNo@1240020002 : Integer);
    VAR
      Cust@1240020003 : Record 18;
    BEGIN
      //<T36-F12> Sales Header - Ship-To Code - OnAfterValidate field trigger event
      WITH Rec DO BEGIN
        IF NOT ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) THEN BEGIN  //Not a credit document
          IF "Ship-to Code" <> '' THEN BEGIN
            ShipToAddr.GET("Sell-to Customer No.","Ship-to Code");
            IF ShipToAddr."Shipping Agent Code" <> '' THEN BEGIN
              VALIDATE("Shipping Agent Code",ShipToAddr."Shipping Agent Code");
              IF ShipToAddr."E-Ship Agent Service" <> '' THEN
                VALIDATE("E-Ship Agent Service",ShipToAddr."E-Ship Agent Service");
            END;
            "Shipping Payment Type" := ShipToAddr."Shipping Payment Type";
            "Shipping Insurance" := ShipToAddr."Shipping Insurance";
            IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
              VALIDATE("Third Party Ship. Account No.",'')
            ELSE
              IF ShippingAccount.GetPrimaryShippingAccountNo(
                   "Shipping Agent Code",ShippingAccount."Ship-to Type"::Customer,
                   "Sell-to Customer No.","Ship-to Code")
              THEN
                VALIDATE("Third Party Ship. Account No.",ShippingAccount."Account No.");
            IF NOT "Free Freight" THEN BEGIN
              "Free Freight" := ShipToAddr."Free Freight";
              "No Free Freight Lines on Order" := ShipToAddr."No Free Freight Lines on Order";
            END;
            "Residential Delivery" := ShipToAddr."Residential Delivery";
            "Blind Shipment" := ShipToAddr."Blind Shipment";
            "Double Blind Shipment" := ShipToAddr."Double Blind Shipment";
            VALIDATE("Double Blind Ship-from Cust No",ShipToAddr."Double Blind Ship-from Cust No");
            "External Ship-to No." := ShipToAddr."External No.";
          END ELSE BEGIN
            IF "Sell-to Customer No." <> '' THEN BEGIN

              //GetCust("Sell-to Customer No."); // Replaced local function call with actual code
              IF NOT (("Document Type" = "Document Type"::Quote) AND ("Sell-to Customer No." = '')) THEN BEGIN
                IF "Sell-to Customer No." <> Cust."No." THEN
                  Cust.GET("Sell-to Customer No.");
              END ELSE
                CLEAR(Cust);

              "Residential Delivery" := Cust."Residential Delivery";
              IF Cust."Shipping Agent Code" <> '' THEN BEGIN
                VALIDATE("Shipping Agent Code",Cust."Shipping Agent Code");
                IF Cust."E-Ship Agent Service" <> '' THEN
                  VALIDATE("E-Ship Agent Service",Cust."E-Ship Agent Service");
              END;
              "Shipping Payment Type" := Cust."Shipping Payment Type";
              "Shipping Insurance" := Cust."Shipping Insurance";
              IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
                VALIDATE("Third Party Ship. Account No.",'')
              ELSE
                IF ShippingAccount.GetPrimaryShippingAccountNo(
                     "Shipping Agent Code",ShippingAccount."Ship-to Type"::Customer,
                     "Sell-to Customer No.","Ship-to Code")
                THEN
                  VALIDATE("Third Party Ship. Account No.",ShippingAccount."Account No.");
              IF NOT "Free Freight" THEN BEGIN
                "Free Freight" := Cust."Free Freight";
                "No Free Freight Lines on Order" := Cust."No Free Freight Lines on Order";
              END;
              "Residential Delivery" := Cust."Residential Delivery";
              "Blind Shipment" := Cust."Blind Shipment";
              "Double Blind Shipment" := Cust."Double Blind Shipment";
              VALIDATE("Double Blind Ship-from Cust No",Cust."Double Blind Ship-from Cust No");
              "External Ship-to No." := Cust."External No.";
            END;
          END;
        END;
        Globals.SetSalesHeaderValues(Rec);
      END;
    END;

    [EventSubscriber(Table,36,OnAfterValidateEvent,"Payment Terms Code")]
    LOCAL PROCEDURE "SalesHeader-PaymentTermsCode-OnAfterValidate"@1240020056(VAR Rec@1240020000 : Record 36;VAR xRec@1240020001 : Record 36;CurrFieldNo@1240020002 : Integer);
    VAR
      PaymentTerms@1240020003 : Record 3;
    BEGIN
      //<T36-F23> Sales Header - Payment Terms Code - OnAfterValidate field trigger event
      WITH Rec DO BEGIN
        IF PaymentTerms.GET("Payment Terms Code") THEN BEGIN
          "COD Payment" := PaymentTerms."COD Payment";
          "COD Cashiers Check" := PaymentTerms."COD Cashiers Check";
        END ELSE BEGIN
          "COD Payment" := FALSE;
          "COD Cashiers Check" := FALSE;
        END;
      END;
    END;

    [EventSubscriber(Table,36,OnAfterValidateEvent,"Ship-to Country/Region Code")]
    LOCAL PROCEDURE "SalesHeader-Ship-toCountry/RegionCode-OnAfterValidate"@1240020055(VAR Rec@1240020000 : Record 36;VAR xRec@1240020001 : Record 36;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T36-F93> Sales Header - Ship-To Country/Region Code - OnAfterValidate field trigger event
      WITH Rec DO BEGIN
        IF "Ship-to Country/Region Code" <> xRec."Ship-to Country/Region Code" THEN
          IF "Shipping Agent Code" <> '' THEN BEGIN
            xRec."Shipping Agent Code" := '';
            VALIDATE("Shipping Agent Code");
            Globals.SetSalesHeaderValues(Rec);
          END;
      END;
    END;

    [EventSubscriber(Table,36,OnAfterValidateEvent,"Shipping Agent Code")]
    LOCAL PROCEDURE "SalesHeader-ShippingAgentCode-OnAfterValidate"@1240020054(VAR Rec@1240020000 : Record 36;VAR xRec@1240020001 : Record 36;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T36-F105> Sales Header - Shipping Agent Code - OnAfterValidate field triggerevent
      WITH Rec DO BEGIN
        SalesSetup.GET;
        IF ("Shipping Agent Code" <> xRec."Shipping Agent Code") AND
           (xRec."Shipping Agent Code" <> '') AND SalesSetup."Enable Shipping"
        THEN BEGIN
          IF CurrFieldNo = FIELDNO("Shipping Agent Code") THEN BEGIN
            "SalesHeader-DeleteShippingAgentOptionPage"(Rec);

            Package.RESET;
            Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
            Package.SETRANGE("Source Type",DATABASE::"Sales Header");
            Package.SETRANGE("Source Subtype","Document Type");
            Package.SETRANGE("Source ID","No.");
            IF Package.FIND('-') THEN
              MESSAGE(Text14000703);
          END;

          VALIDATE("E-Ship Agent Service",'');
        END;

        IF ("Shipping Agent Code" <> '') AND SalesSetup."Enable Shipping" THEN BEGIN
          ShippingAgent.GET("Shipping Agent Code");
          "World Wide Service" :=
             EShipAgentService.WorldWideService(ShippingAgent,"Ship-to Country/Region Code");
          VALIDATE(
            "E-Ship Agent Service",
            EShipAgentService.DefaultShipAgentService(ShippingAgent,"Ship-to Country/Region Code"));

          IF CurrFieldNo = FIELDNO("Shipping Agent Code") THEN
            EShipAgentService.CheckNameAddressSalesHeader(Rec,"Shipping Agent Code");
        END ELSE
          "World Wide Service" := FALSE;

        IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
          IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
            VALIDATE("Third Party Ship. Account No.",'')
          ELSE
            IF ShippingAccount.GetPrimaryShippingAccountNo(
                 "Shipping Agent Code",ShippingAccount."Ship-to Type"::Customer,
                 "Sell-to Customer No.","Ship-to Code")
            THEN
              VALIDATE("Third Party Ship. Account No.",ShippingAccount."Account No.")
            ELSE
              VALIDATE("Third Party Ship. Account No.",'');
        Globals.SetSalesHeaderValues(Rec);
      END;
    END;

    [EventSubscriber(Table,36,OnBeforeValidateEvent,"E-Ship Agent Service")]
    LOCAL PROCEDURE "SalesHeader-E-ShipAgentService-OnBeforeValidate"@1240020053(VAR Rec@1240020000 : Record 36;VAR xRec@1240020001 : Record 36;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T36-F14000701> Sales Header - E-Ship Agent Service - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "E-Ship Agent Service" <> '' THEN BEGIN
          TESTFIELD("Shipping Agent Code");
          ShippingAgent.GET("Shipping Agent Code");
          EShipAgentService.ValidateEShipAgentService(
            ShippingAgent,"E-Ship Agent Service","Ship-to Country/Region Code");
          IF EShipAgentService."Default Shipping Agent Service" <> '' THEN
            IF "Shipping Agent Service Code" <> EShipAgentService."Default Shipping Agent Service" THEN
              VALIDATE("Shipping Agent Service Code",EShipAgentService."Default Shipping Agent Service");
        END;
        IF ("E-Ship Agent Service" <> xRec."E-Ship Agent Service") AND
           (CurrFieldNo = FIELDNO("E-Ship Agent Service"))
        THEN BEGIN
          "SalesHeader-DeleteShippingAgentOptionPage"(Rec);
          Package.RESET;
          Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          Package.SETRANGE("Source Type",DATABASE::"Sales Header");
          Package.SETRANGE("Source Subtype","Document Type");
          Package.SETRANGE("Source ID","No.");
          IF Package.FIND('-') THEN
            MESSAGE(Text14000703);
        END;
      END;
    END;

    [EventSubscriber(Table,36,OnBeforeValidateEvent,"Free Freight")]
    LOCAL PROCEDURE "SalesHeader-FreeFreight-OnBeforeValidate"@1240020051(VAR Rec@1240020000 : Record 36;VAR xRec@1240020001 : Record 36;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T36-F14000705> Sales Header - Free Freight - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF NOT "Free Freight" THEN
          "No Free Freight Lines on Order" := FALSE;
      END;
    END;

    [EventSubscriber(Table,36,OnBeforeValidateEvent,"Blind Shipment")]
    LOCAL PROCEDURE "SalesHeader-BlindShipment-OnBeforeValidate"@1240020050(VAR Rec@1240020000 : Record 36;VAR xRec@1240020001 : Record 36;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T36-F14000710> Sales Header - Blind Shipment - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Blind Shipment" THEN
          "Double Blind Shipment" := FALSE;
      END;
    END;

    [EventSubscriber(Table,36,OnBeforeValidateEvent,"Double Blind Shipment")]
    LOCAL PROCEDURE "SalesHeader-DoubleBlindShipment-OnBeforeValidate"@1240020049(VAR Rec@1240020000 : Record 36;VAR xRec@1240020001 : Record 36;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T36-F14000711> Sales Header - Double Blind Shipment - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Double Blind Shipment" THEN
          "Blind Shipment" := FALSE
        ELSE
          "Double Blind Ship-from Cust No" := '';
      END;
    END;

    [EventSubscriber(Table,36,OnBeforeValidateEvent,"Double Blind Ship-from Cust No")]
    LOCAL PROCEDURE "SalesHeader-DoubleBlindShip-fromCustNo-OnBeforeValidate"@1240020048(VAR Rec@1240020000 : Record 36;VAR xRec@1240020001 : Record 36;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T36-F14000712> Sales Header - Double Blind Ship-from Cust No - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Double Blind Ship-from Cust No" <> '' THEN
          TESTFIELD("Double Blind Shipment");
      END;
    END;

    [EventSubscriber(Table,36,OnBeforeValidateEvent,"No Free Freight Lines on Order")]
    LOCAL PROCEDURE "SalesHeader-NoFreeFreightLinesonOrder-OnBeforeValidate"@1240020047(VAR Rec@1240020000 : Record 36;VAR xRec@1240020001 : Record 36;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T36-F14000713> Sales Header - No Free Freight Lines on Order - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        TESTFIELD("Free Freight");
      END;
    END;

    [EventSubscriber(Table,36,OnBeforeValidateEvent,"Shipping Payment Type")]
    LOCAL PROCEDURE "SalesHeader-ShippingPaymentType-OnBeforeValidate"@1240020046(VAR Rec@1240020000 : Record 36;VAR xRec@1240020001 : Record 36;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T36-F14000716> Sales Header - Shipping Payment Type - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
          VALIDATE("Third Party Ship. Account No.",'')
        ELSE
          IF ShippingAccount.GetPrimaryShippingAccountNo(
               "Shipping Agent Code",ShippingAccount."Ship-to Type"::Customer,
               "Sell-to Customer No.","Ship-to Code")
          THEN
            VALIDATE("Third Party Ship. Account No.",ShippingAccount."Account No.");
      END;
    END;

    [EventSubscriber(Table,36,OnBeforeValidateEvent,"Third Party Ship. Account No.")]
    LOCAL PROCEDURE "SalesHeader-ThirdPartyShip.AccountNo.-OnBeforeValidate"@1240020045(VAR Rec@1240020000 : Record 36;VAR xRec@1240020001 : Record 36;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T36-F14000717> Sales Header - Third Party Ship. Account No. - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Third Party Ship. Account No." <> '' THEN BEGIN
          ShippingAccount."Shipping Agent Code" := "Shipping Agent Code";
          ShippingAccount.TestShippingAccountNo("Third Party Ship. Account No.");
        END;
        IF ("Third Party Ship. Account No." <> '') AND
           ("Shipping Payment Type" <> "Shipping Payment Type"::Prepaid)
        THEN BEGIN
          CLEAR(ShippingAccount);
          IF NOT ShippingAccount.GET(
                   ShippingAccount."Ship-to Type"::Customer,
                   "Sell-to Customer No.","Ship-to Code","Shipping Agent Code",
                   "Third Party Ship. Account No.")
          THEN BEGIN
            ShippingAccount.RESET;
            ShippingAccount.SETCURRENTKEY("Shipping Agent Code","Account No.");
            ShippingAccount.SETRANGE("Shipping Agent Code","Shipping Agent Code");
            ShippingAccount.SETRANGE("Account No.","Third Party Ship. Account No.");
            IF NOT ShippingAccount.FIND('-') THEN
              ;
          END;
          IF (ShippingAccount."Account No." <> '') AND
             ("Shipping Payment Type" <> "Shipping Payment Type"::Prepaid)
          THEN
            "Shipping Insurance" := ShippingAccount."Shipping Insurance";
        END;
      END;
    END;

    [EventSubscriber(Table,36,OnBeforeValidateEvent,"Ship-for Code")]
    LOCAL PROCEDURE "SalesHeader-Ship-forCode-OnBeforeValidate"@1240020039(VAR Rec@1240020000 : Record 36;VAR xRec@1240020001 : Record 36;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T36-F14000825> Sales Header - Ship-for Code - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Ship-for Code" <> '' THEN BEGIN
          ShipToAddr.GET("Sell-to Customer No.","Ship-for Code");
          "External Ship-for No." := ShipToAddr."External No.";
          IF ShipToAddr."Dist. Center Ship-to Code" <> '' THEN
            VALIDATE("Ship-to Code",ShipToAddr."Dist. Center Ship-to Code")
          ELSE
            VALIDATE("Ship-to Code","Ship-for Code");
        END ELSE
          "External Ship-for No." := '';
      END;
    END;

    [EventSubscriber(Table,36,OnBeforeValidateEvent,"Invoice for Shipment No.")]
    LOCAL PROCEDURE "SalesHeader-InvoiceforShipmentNo.-OnBeforeValidate"@1240020040(VAR Rec@1240020000 : Record 36;VAR xRec@1240020001 : Record 36;CurrFieldNo@1240020002 : Integer);
    VAR
      Shipping@14000700 : Codeunit 14000701;
    BEGIN
      //<T36-F14000831> Sales Header - Invoice for Shipment No. - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Invoice for Shipment No." <> '' THEN BEGIN
          TESTFIELD("Shipment Invoice Override",FALSE);
          SalesShptHeader.GET("Invoice for Shipment No.");
          SalesShptHeader.TESTFIELD("Shipment Invoice No.",'');
          IF SalesShptHeader."Bill of Lading No." <> '' THEN
            VALIDATE("Invoice for Bill of Lading No.",SalesShptHeader."Bill of Lading No.");
          Shipping.SetShipmentInvoiceQty(Rec);
        END;
      END;
    END;

    [EventSubscriber(Table,36,OnBeforeValidateEvent,"Shipment Invoice Override")]
    LOCAL PROCEDURE "SalesHeader-ShipmentInvoiceOverride-OnBeforeValidate"@1240020041(VAR Rec@1240020000 : Record 36;VAR xRec@1240020001 : Record 36;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T36-F14000832> Sales Header - Shipment Invoice Override - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Shipment Invoice Override" THEN
          TESTFIELD("Invoice for Shipment No.",'');
      END;
    END;

    PROCEDURE "SalesHeader-ReceiveStatus"@1240020042(Rec@1240020000 : Record 36) : Text[30];
    VAR
      TotalQtyToReceiveBase@14000700 : Decimal;
    BEGIN
      //<T36> Sales Header - Receive Status global function moved
      WITH Rec DO BEGIN
        // Additional code required in Attain
        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
          CALCFIELDS("Total Return Qty to Rec (base)","Total Qty. Received (base)");
          TotalQtyToReceiveBase := "Total Return Qty to Rec (base)";
        END ELSE BEGIN
          CALCFIELDS("Total Qty. To Ship (base)","Total Qty. Received (base)");
          TotalQtyToReceiveBase := "Total Qty. To Ship (base)";
        END;
        CASE TRUE OF
          TotalQtyToReceiveBase = 0:
            EXIT(Text14000709);
          "Total Qty. Received (base)" = 0:
            EXIT(Text14000711);
          TotalQtyToReceiveBase = "Total Qty. Received (base)":
            EXIT(Text14000714);
          TotalQtyToReceiveBase < "Total Qty. Received (base)":
            EXIT(Text14000715);
          ELSE
            EXIT(Text14000716);
        END;
      END;
    END;

    PROCEDURE "SalesHeader-PackingStatus"@1240020043(Rec@1240020000 : Record 36) : Text[30];
    VAR
      SalesLine2@1240030000 : Record 37;
      TotalQtyToShipBase@14000701 : Decimal;
    BEGIN
      //<T36> Sales Header - PackingStatus global function moved
      WITH Rec DO BEGIN
        // Additional code required in Attain
        CALCFIELDS("Total Qty. To Ship (base)","Total Qty. Packed (base)");
        TotalQtyToShipBase := "Total Qty. To Ship (base)";
        IF TotalQtyToShipBase = 0 THEN BEGIN
          CALCFIELDS(
            "E-Ship Whse. Outst. Qty (Base)","E-Ship Whse. Ship. Qty (Base)",
            "E-Ship Invt. Outst. Qty (Base)");
          TotalQtyToShipBase :=
          "E-Ship Whse. Outst. Qty (Base)" + "E-Ship Whse. Ship. Qty (Base)" +
          "E-Ship Invt. Outst. Qty (Base)";
        END;
        CASE TRUE OF
          TotalQtyToShipBase = 0:
            EXIT(Text14000717);
          "Total Qty. Packed (base)" = 0:
            EXIT(Text14000718);
          TotalQtyToShipBase = "Total Qty. Packed (base)":
            EXIT(Text14000719);
          TotalQtyToShipBase < "Total Qty. Packed (base)":
            EXIT(Text14000720);
          ELSE
            EXIT(Text14000721);
        END;
      END;
    END;

    PROCEDURE "SalesHeader-DeleteShippingAgentOptionPage"@1240020044(Rec@1240020000 : Record 36);
    VAR
      Shipping@14000700 : Codeunit 14000701;
    BEGIN
      //<T36> Sales Header - DeleteShippingAgentOptionPage global function moved
      WITH Rec DO BEGIN
        SalesSetup.GET;
        IF SalesSetup."Enable Shipping" THEN
          Shipping.DeleteDocumentOptionPages("No.",DATABASE::"Sales Header","Document Type");
      END;
    END;

    [EventSubscriber(Table,37,OnAfterValidateEvent,"No.")]
    LOCAL PROCEDURE "SalesLine-No-OnAfterValidate"@1240020157(VAR Rec@1240020000 : Record 37;VAR xRec@1240020001 : Record 37;CurrFieldNo@1240020002 : Integer);
    VAR
      Resource@1240020003 : Record 156;
      Item@1240020004 : Record 27;
    BEGIN
      //<T37-F6> Sales Line - No. - OnAfterValidate field trigger event
      WITH Rec DO BEGIN
        IF Type = Type::Item THEN BEGIN
          Pack := TRUE;
          TESTFIELD("No.");
          Item.GET("No.");
          IF CustomerItemPackageUOM.GET("Sell-to Customer No.","No.") THEN BEGIN
            VALIDATE("Std. Pack Unit of Measure Code",CustomerItemPackageUOM."Std. Pack Unit of Measure Code");
            "Std. Packs per Package" := CustomerItemPackageUOM."Std. Packs per Package";
          END ELSE BEGIN
            VALIDATE("Std. Pack Unit of Measure Code",Item."Std. Pack Unit of Measure Code");
            "Std. Packs per Package" := Item."Std. Packs per Package";
          END;
          "SalesLine-UpdateRequiredShippingAgent"(Rec);
        END ELSE IF Type = Type::Resource THEN BEGIN
          Resource.GET("No.");
          Pack := Resource.Pack;
          "SalesLine-UpdateRequiredShippingAgent"(Rec);
        END;
      END;
    END;

    [EventSubscriber(Table,37,OnBeforeValidateEvent,"Shipment Date")]
    LOCAL PROCEDURE "SalesLine-ShipmentDate-OnBeforeValidate"@1240020013(VAR Rec@1240020000 : Record 37;VAR xRec@1240020001 : Record 37;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T37-F10> Sales Line - Shipment Date - OnBeforeValiate field trigger event
      IF CurrFieldNo = 0 THEN
        Rec.EShipSetHideDialog;
    END;

    [EventSubscriber(Table,37,OnAfterValidateEvent,Quantity)]
    LOCAL PROCEDURE "SalesLine-Quantity-OnAfterValidate"@1240020156(VAR Rec@1240020000 : Record 37;VAR xRec@1240020001 : Record 37;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T37-F15> Sales Line - Quantity - OnAfterValidate field trigger event
      WITH Rec DO BEGIN
        "Std. Pack Quantity" := "SalesLine-CalcStdPackQty"(Rec,"Quantity (Base)");
        "Package Quantity" := "SalesLine-CalcPackageQty"(Rec,"Std. Pack Quantity");
      END;
    END;

    [EventSubscriber(Table,37,OnAfterValidateEvent,"Qty. to Ship")]
    LOCAL PROCEDURE "SalesLine-QtytoShip-OnAfterValidate"@1240020155(VAR Rec@1240020000 : Record 37;VAR xRec@1240020001 : Record 37;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T37-F18> Sales Line - Qty. to Ship - OnAfterValidate field trigger event
      WITH Rec DO BEGIN
        "Std. Pack Qty. to Ship" := "SalesLine-CalcStdPackQty"(Rec,"Qty. to Ship (Base)");
        "Package Qty. to Ship" := "SalesLine-CalcPackageQty"(Rec,"Std. Pack Qty. to Ship");
      END;
    END;

    [EventSubscriber(Table,37,OnAfterValidateEvent,"Shipping Agent Code")]
    LOCAL PROCEDURE "SalesLine-ShippingAgentCode-OnAfterValidate"@1240020154(VAR Rec@1240020000 : Record 37;VAR xRec@1240020001 : Record 37;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T37-F5796> Sales Line - Shipping Agent Code - OnAfterValidate field trigger event
      WITH Rec DO BEGIN
        IF ("Shipping Agent Code" <> xRec."Shipping Agent Code") AND
           (CurrFieldNo = FIELDNO("Shipping Agent Code"))
        THEN
          VALIDATE("E-Ship Agent Code","Shipping Agent Code");
      END;
    END;

    [EventSubscriber(Table,37,OnAfterValidateEvent,"Unit of Measure Code")]
    LOCAL PROCEDURE "SalesLine-UnitofMeasureCode-OnAfterValidate"@1240020153(VAR Rec@1240020000 : Record 37;VAR xRec@1240020001 : Record 37;CurrFieldNo@1240020002 : Integer);
    VAR
      Resource@1240020003 : Record 156;
      Item@1240020004 : Record 27;
    BEGIN
      // <T37-F13> Sales Line - Unit of Measure Code - OnAfterValidate field trigger event
      WITH Rec DO BEGIN
        CASE Type OF
          Type::Item:
            BEGIN
              Item.GET("No.");
              "Dimmed Weight" := Item."Dimmed Weight" * "Qty. per Unit of Measure";
            END;
          Type::Resource:
            BEGIN
              Resource.GET("No.");
              "Gross Weight" := Resource."Gross Weight";
              "Net Weight" := Resource."Net Weight";
              "Dimmed Weight" := Resource."Dimmed Weight";
              "Unit Volume" := Resource."Unit Volume";
            END;
        END;
      END;
    END;

    [EventSubscriber(Table,37,OnBeforeValidateEvent,"Over Receive Verified")]
    LOCAL PROCEDURE "SalesLine-OverReceiveVerified-OnBeforeValidate"@1240020152(VAR Rec@1240020000 : Record 37;VAR xRec@1240020001 : Record 37;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T37-F14000603> Sales Line - Over Receive Verified - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Over Receive Verified" THEN
          TESTFIELD("Over Receive");
      END;
    END;

    [EventSubscriber(Table,37,OnBeforeValidateEvent,"Rate Quoted")]
    LOCAL PROCEDURE "SalesLine-RateQuoted-OnBeforeValidate"@1240020151(VAR Rec@1240020000 : Record 37;VAR xRec@1240020001 : Record 37;CurrFieldNo@1240020002 : Integer);
    VAR
      ShippingAgent@14000700 : Record 291;
    BEGIN
      //<T37-F14000704> Sales Line - Rate Quoted - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Rate Quoted" THEN BEGIN
          TESTFIELD("Quantity Shipped",0);
          GetSalesHeader(Rec);
          SalesHeader.TESTFIELD("Shipping Agent Code");
          ShippingAgent.GET(SalesHeader."Shipping Agent Code");
          TESTFIELD(Type,ShippingAgent."Prepaid Freight Type");
          TESTFIELD("No.",ShippingAgent."Prepaid Freight Code");
        END;
      END;
    END;

    [EventSubscriber(Table,37,OnBeforeValidateEvent,"Std. Pack Unit of Measure Code")]
    LOCAL PROCEDURE "SalesLine-Std.PackUnitofMeasureCode-OnBeforeValidate"@1240020150(VAR Rec@1240020000 : Record 37;VAR xRec@1240020001 : Record 37;CurrFieldNo@1240020002 : Integer);
    VAR
      UOMMgt@1240020003 : Codeunit 5402;
      Item@1240020004 : Record 27;
    BEGIN
      //<T37-F14000705> Sales Line - Std. Pack Unit of Measure Code - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        TESTFIELD(Type,Type::Item);
        TESTFIELD("No.");
        IF "Std. Pack Unit of Measure Code" <> '' THEN BEGIN
          TESTFIELD("No.");
          IF "No." <> Item."No." THEN
          Item.GET("No.");
          "Qty. per Std. Pack" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Std. Pack Unit of Measure Code")
        END ELSE
          "Qty. per Std. Pack" := 0;
        "Std. Pack Quantity" := "SalesLine-CalcStdPackQty"(Rec,"Quantity (Base)");
        "Package Quantity" := "SalesLine-CalcPackageQty"(Rec,"Std. Pack Quantity");
        "Std. Pack Qty. to Ship" := "SalesLine-CalcStdPackQty"(Rec,"Qty. to Ship (Base)");
        "Package Qty. to Ship" := "SalesLine-CalcPackageQty"(Rec,"Std. Pack Qty. to Ship");
      END;
    END;

    [EventSubscriber(Table,37,OnBeforeValidateEvent,"Std. Packs per Package")]
    LOCAL PROCEDURE "SalesLine-Std.PacksperPackage-OnBeforeValidate"@1240020149(VAR Rec@1240020000 : Record 37;VAR xRec@1240020001 : Record 37;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T37-F14000709> Sales Line - Std. Packs per Package - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Std. Packs per Package" <> 0 THEN
          TESTFIELD("Std. Pack Unit of Measure Code");
        "Package Quantity" := "SalesLine-CalcPackageQty"(Rec,"Std. Pack Quantity");
        "Package Qty. to Ship" := "SalesLine-CalcPackageQty"(Rec,"Std. Pack Qty. to Ship");
      END;
    END;

    [EventSubscriber(Table,37,OnBeforeValidateEvent,"Required Shipping Agent Code")]
    LOCAL PROCEDURE "SalesLine-RequiredShippingAgentCode-OnBeforeValidate"@1240020148(VAR Rec@1240020000 : Record 37;VAR xRec@1240020001 : Record 37;CurrFieldNo@1240020002 : Integer);
    VAR
      PackageLine@14000701 : Record 14000702;
    BEGIN
      //<T37-F14000715> Sales Line - Required Shipping Agent Code - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Required Shipping Agent Code" <> '' THEN
          TESTFIELD(Pack);
        IF "Required Shipping Agent Code" <> xRec."Required Shipping Agent Code" THEN BEGIN
          IF (CurrFieldNo = FIELDNO("Required Shipping Agent Code"))
          THEN BEGIN
            PackageLine.RESET;
            PackageLine.SETCURRENTKEY(
              "Source Type","Source Subtype","Source ID","No.","Variant Code",Type);
            PackageLine.SETRANGE("Source Type",DATABASE::"Sales Header");
            PackageLine.SETRANGE("Source Subtype","Document Type");
            PackageLine.SETRANGE("Source ID","Document No.");
            PackageLine.SETRANGE(Type,Type);
            PackageLine.SETRANGE("No.","No.");
            PackageLine.SETRANGE("Variant Code","Variant Code");
            IF PackageLine.FIND('-') THEN
              MESSAGE(Text14000722);
          END;
          VALIDATE("Required E-Ship Agent Service",'');
          VALIDATE("Allow Other Ship. Agent/Serv.",FALSE);
        END;
      END;
    END;

    [EventSubscriber(Table,37,OnBeforeValidateEvent,"Required E-Ship Agent Service")]
    LOCAL PROCEDURE "SalesLine-RequiredE-ShipAgentService-OnBeforeValidate"@1240020147(VAR Rec@1240020000 : Record 37;VAR xRec@1240020001 : Record 37;CurrFieldNo@1240020002 : Integer);
    VAR
      PackageLine@14000701 : Record 14000702;
      ShippingAgent@14000702 : Record 291;
      EShipAgentService@14000703 : Record 14000708;
    BEGIN
      //<T37-F14000716> Sales Line - Required E-Ship Agent Service - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Required E-Ship Agent Service" <> '' THEN BEGIN
          TESTFIELD(Pack);
          GetSalesHeader(Rec);
          TESTFIELD("Required Shipping Agent Code");
          ShippingAgent.GET("Required Shipping Agent Code");
          EShipAgentService.GET(
            "Required Shipping Agent Code","Required E-Ship Agent Service",SalesHeader."World Wide Service");
          IF EShipAgentService.UPSCanadianShipment(ShippingAgent,SalesHeader."Ship-to Country/Region Code") THEN
            EShipAgentService.TESTFIELD("UPS Canadian Service");
          IF EShipAgentService.UPSPuertoRicoShipment(ShippingAgent,SalesHeader."Ship-to Country/Region Code") THEN
            EShipAgentService.TESTFIELD("UPS Puerto Rico Service");
        END;
        IF ("Required E-Ship Agent Service" <> xRec."Required E-Ship Agent Service") AND
           (CurrFieldNo = FIELDNO("Required E-Ship Agent Service"))
        THEN BEGIN
          PackageLine.RESET;
          PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID","No.","Variant Code",Type);
          PackageLine.SETRANGE("Source Type",DATABASE::"Sales Header");
          PackageLine.SETRANGE("Source Subtype","Document Type");
          PackageLine.SETRANGE("Source ID","Document No.");
          PackageLine.SETRANGE(Type,Type);
          PackageLine.SETRANGE("No.","No.");
          PackageLine.SETRANGE("Variant Code","Variant Code");
          IF PackageLine.FIND('-') THEN
            MESSAGE(Text14000722);
        END;
      END;
    END;

    [EventSubscriber(Table,37,OnBeforeValidateEvent,"Allow Other Ship. Agent/Serv.")]
    LOCAL PROCEDURE "SalesLine-AllowOtherShip.Agent/Serv.-OnBeforeValidate"@1240020145(VAR Rec@1240020000 : Record 37;VAR xRec@1240020001 : Record 37;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T37-F14000717> Sales Line - Allow Other Ship. Agent/Serv. - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Allow Other Ship. Agent/Serv." THEN BEGIN
          TESTFIELD(Pack);
          TESTFIELD("Required Shipping Agent Code");
          TESTFIELD("Required E-Ship Agent Service");
        END;
      END;
    END;

    [EventSubscriber(Table,37,OnBeforeValidateEvent,"E-Ship Agent Code")]
    LOCAL PROCEDURE "SalesLine-E-ShipAgentCode-OnBeforeValidate"@1240020144(VAR Rec@1240020000 : Record 37;VAR xRec@1240020001 : Record 37;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T37-F14000720> Sales Line - E-Ship Agent Code - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        GetSalesHeader(Rec);
        IF ("E-Ship Agent Code" <> xRec."E-Ship Agent Code") AND
           (xRec."E-Ship Agent Code" <> '')
        THEN
          VALIDATE("E-Ship Agent Service",'');
        IF "E-Ship Agent Code" <> '' THEN BEGIN
          ShippingAgent.GET("E-Ship Agent Code");
          VALIDATE(
            "E-Ship Agent Service",
            EShipAgentService.DefaultShipAgentService(ShippingAgent,SalesHeader."Ship-to Country/Region Code"));
        END;
        IF "E-Ship Agent Code" <> xRec."E-Ship Agent Code" THEN BEGIN
          IF "E-Ship Agent Code" <> '' THEN BEGIN
            VALIDATE("Shipping Payment Type",SalesHeader."Shipping Payment Type");
            VALIDATE("Shipping Insurance",SalesHeader."Shipping Insurance");
          END ELSE BEGIN
            VALIDATE("Shipping Payment Type","Shipping Payment Type"::Prepaid);
            VALIDATE("Shipping Insurance","Shipping Insurance"::" ");
          END;
          IF CurrFieldNo = FIELDNO("E-Ship Agent Code") THEN
            IF "E-Ship Agent Code" <> '' THEN
              VALIDATE("Shipping Agent Code","E-Ship Agent Code")
            ELSE
              VALIDATE("Shipping Agent Code",SalesHeader."Shipping Agent Code");
          IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
            VALIDATE("Third Party Ship. Account No.",'')
          ELSE
            IF ShippingAccount.GetPrimaryShippingAccountNo(
                 "E-Ship Agent Code",ShippingAccount."Ship-to Type"::Customer,
                 SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code")
            THEN
              VALIDATE("Third Party Ship. Account No.",ShippingAccount."Account No.")
            ELSE
              VALIDATE("Third Party Ship. Account No.",'');
        END;
      END;
    END;

    [EventSubscriber(Table,37,OnBeforeValidateEvent,"E-Ship Agent Service")]
    LOCAL PROCEDURE "SalesLine-E-ShipAgentService-OnBeforeValidate"@1240020143(VAR Rec@1240020000 : Record 37;VAR xRec@1240020001 : Record 37;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T37-F14000721> Sales Line - E-Ship Agent Service - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        GetSalesHeader(Rec);
        IF "E-Ship Agent Service" <> '' THEN BEGIN
          TESTFIELD("E-Ship Agent Code");
          ShippingAgent.GET("E-Ship Agent Code");
          EShipAgentService.ValidateEShipAgentService(
            ShippingAgent,"E-Ship Agent Service",SalesHeader."Ship-to Country/Region Code");
        END;
      END;
    END;

    [EventSubscriber(Table,37,OnBeforeValidateEvent,"Shipping Payment Type")]
    LOCAL PROCEDURE "SalesLine-ShippingPaymentType-OnBeforeValidate"@1240020141(VAR Rec@1240020000 : Record 37;VAR xRec@1240020001 : Record 37;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T37-F14000722> Sales Line - Shipping Payment Type - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        GetSalesHeader(Rec);
        IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
          VALIDATE("Third Party Ship. Account No.",'')
        ELSE
          IF ShippingAccount.GetPrimaryShippingAccountNo(
               "E-Ship Agent Code",ShippingAccount."Ship-to Type"::Customer,
               SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code")
          THEN
            VALIDATE("Third Party Ship. Account No.",ShippingAccount."Account No.");
      END;
    END;

    [EventSubscriber(Table,37,OnBeforeValidateEvent,"Third Party Ship. Account No.")]
    LOCAL PROCEDURE "SalesLine-ThirdPartyShip.AccountNo.-OnBeforeValidate"@1240020140(VAR Rec@1240020000 : Record 37;VAR xRec@1240020001 : Record 37;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T37-F14000723> Sales Line - Third Party Ship. Account No. - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        GetSalesHeader(Rec);
        ShippingAccount."Shipping Agent Code" := "E-Ship Agent Code";
        ShippingAccount.TestShippingAccountNo("Third Party Ship. Account No.");
        IF ("Third Party Ship. Account No." <> '') AND
           ("Shipping Payment Type" <> "Shipping Payment Type"::Prepaid)
        THEN BEGIN
          CLEAR(ShippingAccount);
          IF NOT ShippingAccount.GET(
                   ShippingAccount."Ship-to Type"::Customer,
                   SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code","E-Ship Agent Code",
                   "Third Party Ship. Account No.")
          THEN BEGIN
            ShippingAccount.RESET;
            ShippingAccount.SETCURRENTKEY("Shipping Agent Code","Account No.");
            ShippingAccount.SETRANGE("Shipping Agent Code","E-Ship Agent Code");
            ShippingAccount.SETRANGE("Account No.","Third Party Ship. Account No.");
            IF NOT ShippingAccount.FIND('-') THEN
              ;
          END;
          IF (ShippingAccount."Account No." <> '') AND
             ("Shipping Payment Type" <> "Shipping Payment Type"::Prepaid)
          THEN
            "Shipping Insurance" := ShippingAccount."Shipping Insurance";
        END;
      END;
    END;

    PROCEDURE "SalesLine-CalcEShipWhseOutstQtyBase"@1240020138(VAR Rec@1240020000 : Record 37;LocationPacking@1240020002 : Boolean;LocationCode@1240020001 : Code[10]) QtyBase : Decimal;
    VAR
      SalesLine@14000703 : Record 37;
    BEGIN
      //<T37> Sales Line - CalcEShipWhseOutstQtyBase global function moved
      WITH Rec DO BEGIN
        QtyBase := 0;
        SalesLine.COPY(Rec);
        IF LocationPacking THEN
          SalesLine.SETRANGE("Location Code",LocationCode);
        IF SalesLine.FIND('-') THEN
          REPEAT
            SalesLine.CALCFIELDS("E-Ship Invt. Outst. Qty (Base)");
            IF (SalesLine."Qty. to Ship (Base)" = 0) OR (SalesLine."E-Ship Invt. Outst. Qty (Base)"<> 0)
            THEN BEGIN
              SalesLine.CALCFIELDS(
                "E-Ship Whse. Outst. Qty (Base)","E-Ship Whse. Ship. Qty (Base)");
              QtyBase :=
                QtyBase +
                SalesLine."E-Ship Whse. Outst. Qty (Base)" + SalesLine."E-Ship Whse. Ship. Qty (Base)" +
                SalesLine."E-Ship Invt. Outst. Qty (Base)";
            END;
          UNTIL SalesLine.NEXT = 0;
      END;
    END;

    PROCEDURE "SalesLine-AllowInWarehousePosting"@1240020137(Rec@1240020000 : Record 37) : Boolean;
    BEGIN
      //<T37> Sales Line - AllowInWarehousePosting global function moved
      WITH Rec DO BEGIN
        EXIT("Shipping Charge" OR ((Type = Type::Resource) AND Pack));
      END;
    END;

    LOCAL PROCEDURE "SalesLine-CalcStdPackQty"@14000701(VAR Rec@1240020000 : Record 37;Qty@14000700 : Decimal) : Decimal;
    BEGIN
      //<T37> Sales Line - CalcStdPackQty local function moved
      WITH Rec DO BEGIN
        IF "Qty. per Std. Pack" <> 0 THEN
          EXIT(ROUND(Qty / "Qty. per Std. Pack",0.00001))
        ELSE
          EXIT(0);
      END;
    END;

    LOCAL PROCEDURE "SalesLine-CalcPackageQty"@14000702(VAR Rec@1240020000 : Record 37;Qty@14000700 : Decimal) : Decimal;
    BEGIN
      //<T37> Sales Line - CalcPackageQty local function moved
      WITH Rec DO BEGIN
        IF "Std. Packs per Package" <> 0 THEN
          EXIT(ROUND(Qty / "Std. Packs per Package",0.00001))
        ELSE
          EXIT(0);
      END;
    END;

    [EventSubscriber(Table,37,EShipInitQtyToShip)]
    PROCEDURE "SalesLine-InitQtyToShip"@1240020023(VAR Rec@1240020000 : Record 37;CurrFieldNo@1240020001 : Integer;SalesSetup@1240020002 : Record 311);
    BEGIN
      // <T37> Subscribe to publisher function within Sales Line that is called from InitQtyToShip local function
      WITH Rec DO BEGIN
        IF "Drop Shipment" THEN BEGIN
          SalesSetup.GET;
          IF SalesSetup."Blank Drop Shipm. Qty. to Ship" AND (CurrFieldNo <> FIELDNO("Qty. to Ship"))
          THEN BEGIN
            "Qty. to Ship" := 0;
            "Qty. to Ship (Base)" := 0;
          END ELSE BEGIN
            IF (SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Remainder) OR
               ("Document Type" = "Document Type"::Invoice)
            THEN BEGIN
              "Qty. to Ship" := "Outstanding Quantity";
              "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";
            END ELSE
              IF "Qty. to Ship" <> 0 THEN
                "Qty. to Ship (Base)" := "SalesLine-CalcBaseQty"("Qty. to Ship",Rec);
          END;
        END ELSE BEGIN
          IF (SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Remainder) OR
             ("Document Type" = "Document Type"::Invoice)
          THEN BEGIN
            "Qty. to Ship" := "Outstanding Quantity";
            "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";
          END ELSE
            IF "Qty. to Ship" <> 0 THEN
              "Qty. to Ship (Base)" := "SalesLine-CalcBaseQty"("Qty. to Ship",Rec);
        END;
      END;
    END;

    LOCAL PROCEDURE "SalesLine-CalcBaseQty"@1240020030(Qty@1240020001 : Decimal;VAR Rec@1240020000 : Record 37) : Decimal;
    BEGIN
      //<T37> Sales Line - CalcBaseQty local function moved
      WITH Rec DO BEGIN
        TESTFIELD("Qty. per Unit of Measure");
        EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
      END;
    END;

    [EventSubscriber(Table,37,EShip3rdPartyAcNoLookup)]
    LOCAL PROCEDURE "SalesLine-3rdPartyActNo-OnLookup"@1240020038(VAR Rec@1240020000 : Record 37);
    BEGIN
      // <T37-F14000723> Subscribes to a published function called Sales Line 3rdPartyActNo OnLookup trigger

      GetSalesHeader(Rec);

      WITH Rec DO BEGIN
        IF ShippingAccount.LookupThirdPartyAccountNo(
             "E-Ship Agent Code",ShippingAccount."Ship-to Type"::Customer,
             SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code")
        THEN
          VALIDATE("Third Party Ship. Account No.",ShippingAccount.GetLookupAccountNo);
      END;
    END;

    LOCAL PROCEDURE GetSalesHeader@1(VAR Rec@1240020000 : Record 37);
    VAR
      Currency@1240020001 : Record 4;
    BEGIN
      // <T37> GetSalesHeader function moved from Sales Line table
      WITH Rec DO BEGIN
        TESTFIELD("Document No.");
        SalesHeader.GET("Document Type","Document No.");
      END;
    END;

    LOCAL PROCEDURE "SalesLine-UpdateRequiredShippingAgent"@14000704(VAR Rec@1240020000 : Record 37);
    VAR
      RequiredShippingAgent@14000701 : Record 14000722;
      ShippingAgent@14000702 : Record 291;
      EShipAgentService@14000703 : Record 14000708;
    BEGIN
      //<T37> Sales Line - UpdateRequiredShippingAgent function moved
      WITH Rec DO BEGIN
        IF NOT Pack THEN
          EXIT;

        CLEAR(RequiredShippingAgent);
        IF NOT RequiredShippingAgent.GET(Type,"No.",SalesHeader."Shipping Agent Code")
        THEN BEGIN
          RequiredShippingAgent.RESET;
          RequiredShippingAgent.SETRANGE(Type,Type);
          RequiredShippingAgent.SETRANGE(Code,"No.");
          RequiredShippingAgent.SETRANGE("Use for All Shipping Agents",TRUE);
          IF NOT RequiredShippingAgent.FIND('-') THEN ;
        END;

        IF RequiredShippingAgent."Shipping Agent Code" <> '' THEN BEGIN
          GetSalesHeader(Rec);

          VALIDATE("Required Shipping Agent Code",RequiredShippingAgent."Shipping Agent Code");
          ShippingAgent.GET("Required Shipping Agent Code");
          CASE TRUE OF
            EShipAgentService.InternationalShipment(ShippingAgent,SalesHeader."Ship-to Country/Region Code"):
              VALIDATE("Required E-Ship Agent Service",RequiredShippingAgent."Required Int. Ship. Agent Serv");
            EShipAgentService.UPSCanadianShipment(ShippingAgent,SalesHeader."Ship-to Country/Region Code"):
              VALIDATE("Required E-Ship Agent Service",RequiredShippingAgent."Req. UPS CA Ship. Agent Serv.");
            EShipAgentService.UPSPuertoRicoShipment(ShippingAgent,SalesHeader."Ship-to Country/Region Code"):
              VALIDATE("Required E-Ship Agent Service",RequiredShippingAgent."Req. UPS PR Ship. Agent Serv.");
            ELSE
              VALIDATE("Required E-Ship Agent Service",RequiredShippingAgent."Required Dom. Ship. Agent Serv");
          END;
          VALIDATE("Allow Other Ship. Agent/Serv.",RequiredShippingAgent."Allow Other Service");
        END;
      END;
    END;

    [EventSubscriber(Table,38,OnAfterDeleteEvent)]
    LOCAL PROCEDURE "PurchaseHeader-OnAfterDelete"@1240020072(VAR Rec@1240020000 : Record 38;RunTrigger@1240020001 : Boolean);
    VAR
      EShipSetGlobalVariable@1240020002 : Codeunit 14000246;
    BEGIN
      // <T38> Purchase Header - OnAfterDelete table trigger event
      IF NOT RunTrigger THEN
        EXIT;
      WITH Rec DO BEGIN
        IF "Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"] THEN BEGIN
          Package.RESET;
          Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          Package.SETRANGE("Source Type",DATABASE::"Purchase Header");
          Package.SETRANGE("Source Subtype","Document Type");
          Package.SETRANGE("Source ID","No.");
          Package.DELETEALL(TRUE);
        END;

        IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
          ReceiveHeader.RESET;
          ReceiveHeader.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          ReceiveHeader.SETRANGE("Source Type",DATABASE::"Purchase Header");
          ReceiveHeader.SETRANGE("Source Subtype","Document Type");
          ReceiveHeader.SETRANGE("Source ID","No.");
          ReceiveHeader.DELETEALL(TRUE);
        END;

        "PurchaseHeader-DeleteShippingAgentOptionPage"(Rec);
      END;
    END;

    [EventSubscriber(Table,38,OnAfterValidateEvent,"Buy-from Country/Region Code")]
    LOCAL PROCEDURE "PurchaseHeader-Buy-fromCountry/RegionCode - OnAfterValidate"@1240020071(VAR Rec@1240020000 : Record 38;VAR xRec@1240020001 : Record 38;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T38-F87> Purchase Header - Buy-from Country/Region Code - OnAfterValidate field trigger event
      WITH Rec DO BEGIN
        IF "Buy-from Country/Region Code" <> xRec."Buy-from Country/Region Code" THEN
          IF "E-Ship Agent Code" <> '' THEN BEGIN
            xRec."E-Ship Agent Code" := '';
            VALIDATE("E-Ship Agent Code");
          END;
        Globals.SetPurchaseHeaderValues(Rec);
      END;
    END;

    [EventSubscriber(Table,38,OnAfterValidateEvent,"Buy-from Vendor No.")]
    LOCAL PROCEDURE "PurchaseHeader-Buy-fromVendorNo-OnAfterValidate"@1240020123(VAR Rec@1240020000 : Record 38;VAR xRec@1240020001 : Record 38;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T38-F2> Purchase Header - Buy-from Vendor No. - OnAfterValidate field trigger event
      Globals.SetPurchaseHeaderValues(Rec);
    END;

    [EventSubscriber(Table,38,OnAfterValidateEvent,"Order Address Code")]
    LOCAL PROCEDURE "PurchaseHeader-OrderAddressCode - OnAfterValidate"@1240020060(VAR Rec@1240020000 : Record 38;VAR xRec@1240020001 : Record 38;CurrFieldNo@1240020002 : Integer);
    VAR
      Vend@1240020003 : Record 23;
    BEGIN
      //<T38-F95> Purchase Header - Order Address Code - OnAfterValidate field trigger event
      WITH Rec DO BEGIN
        IF "Order Address Code" <> '' THEN BEGIN
          OrderAddr.GET("Buy-from Vendor No.","Order Address Code");
          "E-Ship Agent Code" := OrderAddr."E-Ship Agent Code";
          IF OrderAddr."E-Ship Agent Code" <> '' THEN BEGIN
            VALIDATE("E-Ship Agent Code",OrderAddr."E-Ship Agent Code");
            IF OrderAddr."E-Ship Agent Service" <> '' THEN
              VALIDATE("E-Ship Agent Service",OrderAddr."E-Ship Agent Service");
          END;
          "Residential Delivery" := OrderAddr."Residential Delivery";
          "Shipping Payment Type" := OrderAddr."Shipping Payment Type";
          "Shipping Insurance" := OrderAddr."Shipping Insurance";
          IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
            VALIDATE("Third Party Ship. Account No.",'')
          ELSE
            IF ShippingAccount.GetPrimaryShippingAccountNo(
                 "E-Ship Agent Code",ShippingAccount."Ship-to Type"::Vendor,
                 "Sell-to Customer No.","Ship-to Code")
            THEN
              VALIDATE("Third Party Ship. Account No.",ShippingAccount."Account No.");
        END ELSE BEGIN
          //GetVend("Buy-from Vendor No."); Replaced local function with direct get call
          Vend.GET("Buy-from Vendor No.");
          IF IsCreditDocType THEN BEGIN
            VALIDATE("E-Ship Agent Code",Vend."Shipping Agent Code");
            IF Vend."Shipping Agent Code" <> '' THEN BEGIN
              VALIDATE("E-Ship Agent Code",Vend."Shipping Agent Code");
              IF Vend."E-Ship Agent Service" <> '' THEN
                VALIDATE("E-Ship Agent Service",Vend."E-Ship Agent Service");
            END;
            "Residential Delivery" := Vend."Residential Delivery";
            "Shipping Payment Type" := Vend."Shipping Payment Type";
            "Shipping Insurance" := Vend."Shipping Insurance";
            IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
              VALIDATE("Third Party Ship. Account No.",'')
            ELSE
              IF ShippingAccount.GetPrimaryShippingAccountNo(
                   "E-Ship Agent Code",ShippingAccount."Ship-to Type"::Customer,
                   "Sell-to Customer No.","Ship-to Code")
              THEN
                VALIDATE("Third Party Ship. Account No.",ShippingAccount."Account No.");
            "Residential Delivery" := Vend."Residential Delivery";
          END;
        END;
        Globals.SetPurchaseHeaderValues(Rec);
      END;
    END;

    [EventSubscriber(Table,38,OnBeforeValidateEvent,"E-Ship Agent Code")]
    LOCAL PROCEDURE "PurchaseHeader-E-ShipAgentCode-OnBeforeValidate"@1240020061(VAR Rec@1240020000 : Record 38;VAR xRec@1240020001 : Record 38;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T38-F14000705> Purchase Header - E-Ship Agent Code - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF ("E-Ship Agent Code" <> xRec."E-Ship Agent Code") AND
           (xRec."E-Ship Agent Code" <> '')
        THEN BEGIN
          IF CurrFieldNo = FIELDNO("E-Ship Agent Code") THEN BEGIN
            "PurchaseHeader-DeleteShippingAgentOptionPage"(Rec);
            Package.RESET;
            Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
            Package.SETRANGE("Source Type",DATABASE::"Purchase Header");
            Package.SETRANGE("Source Subtype","Document Type");
            Package.SETRANGE("Source ID","No.");
            IF Package.FIND('-') THEN
              MESSAGE(Text14000703);
          END;
          VALIDATE("E-Ship Agent Service",'');
        END;
        IF "E-Ship Agent Code" <> '' THEN BEGIN
          ShippingAgent.GET("E-Ship Agent Code");
          "World Wide Service" :=
            EShipAgentService.WorldWideService(ShippingAgent,"Buy-from Country/Region Code");
          VALIDATE(
            "E-Ship Agent Service",
            EShipAgentService.DefaultShipAgentService(ShippingAgent,"Buy-from Country/Region Code"));
          IF CurrFieldNo = FIELDNO("E-Ship Agent Code") THEN
            EShipAgentService.CheckNameAddressPurchaseHeader(Rec,"E-Ship Agent Code");
        END ELSE
          "World Wide Service" := FALSE;
        IF "E-Ship Agent Code" <> xRec."E-Ship Agent Code" THEN
          IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
            VALIDATE("Third Party Ship. Account No.",'')
          ELSE
            IF ShippingAccount.GetPrimaryShippingAccountNo(
                 "E-Ship Agent Code",ShippingAccount."Ship-to Type"::Vendor,
                 "Buy-from Vendor No.","Order Address Code")
            THEN
              VALIDATE("Third Party Ship. Account No.",ShippingAccount."Account No.")
            ELSE
              VALIDATE("Third Party Ship. Account No.",'');
        Globals.SetPurchaseHeaderValues(Rec);
      END;
    END;

    [EventSubscriber(Table,38,OnBeforeValidateEvent,"E-Ship Agent Service")]
    LOCAL PROCEDURE "PurchaseHeader-E-ShipAgentService-OnBeforeValidate"@1240020062(VAR Rec@1240020000 : Record 38;VAR xRec@1240020001 : Record 38;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T38-F14000706> Purchase Header - E-Ship Agent Service - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "E-Ship Agent Service" <> '' THEN BEGIN
          TESTFIELD("E-Ship Agent Code");
          ShippingAgent.GET("E-Ship Agent Code");
          EShipAgentService.ValidateEShipAgentService(
            ShippingAgent,"E-Ship Agent Service","Buy-from Country/Region Code");
        END;
        IF ("E-Ship Agent Service" <> xRec."E-Ship Agent Service") AND
           (CurrFieldNo = FIELDNO("E-Ship Agent Service"))
        THEN BEGIN
          "PurchaseHeader-DeleteShippingAgentOptionPage"(Rec);
          Package.RESET;
          Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          Package.SETRANGE("Source Type",DATABASE::"Purchase Header");
          Package.SETRANGE("Source Subtype","Document Type");
          Package.SETRANGE("Source ID","No.");
          IF Package.FIND('-') THEN
            MESSAGE(Text14000703);
        END;
      END;
    END;

    [EventSubscriber(Table,38,OnBeforeValidateEvent,"COD Cashiers Check")]
    LOCAL PROCEDURE "PurchaseHeader-CODCashiersCheck-OnBeforeValidate"@1240020064(VAR Rec@1240020000 : Record 38;VAR xRec@1240020001 : Record 38;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T38-F14000710> Purchase Header - COD Cashiers Check - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "COD Cashiers Check" THEN
          TESTFIELD("COD Payment");
      END;
    END;

    [EventSubscriber(Table,38,OnBeforeValidateEvent,"Shipping Payment Type")]
    LOCAL PROCEDURE "PurchaseHeader-ShippingPaymentType-OnBeforeValidate"@1240020065(VAR Rec@1240020000 : Record 38;VAR xRec@1240020001 : Record 38;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T38-F14000711> Purchase Header - Shipping Payment Type - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
          VALIDATE("Third Party Ship. Account No.",'')
        ELSE
          IF ShippingAccount.GetPrimaryShippingAccountNo(
               "E-Ship Agent Code",ShippingAccount."Ship-to Type"::Vendor,
               "Buy-from Vendor No.","Order Address Code")
          THEN
            VALIDATE("Third Party Ship. Account No.",ShippingAccount."Account No.");
      END;
    END;

    [EventSubscriber(Table,38,OnBeforeValidateEvent,"Third Party Ship. Account No.")]
    LOCAL PROCEDURE "PurchaseHeader-ThirdPartyShip.AccountNo.-OnBeforeValidate"@1240020066(VAR Rec@1240020000 : Record 38;VAR xRec@1240020001 : Record 38;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T38-F14000712> Purchase Header - Third Party Ship. Account No. - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Third Party Ship. Account No." <> '' THEN BEGIN
          ShippingAccount."Shipping Agent Code" := "E-Ship Agent Code";
          ShippingAccount.TestShippingAccountNo("Third Party Ship. Account No.");
        END;
        IF ("Third Party Ship. Account No." <> '') AND
           ("Shipping Payment Type" <> "Shipping Payment Type"::Prepaid)
        THEN BEGIN
          CLEAR(ShippingAccount);
          IF NOT ShippingAccount.GET(
                   ShippingAccount."Ship-to Type"::Vendor,
                   "Buy-from Vendor No.","Ship-to Code","E-Ship Agent Code",
                   "Third Party Ship. Account No.")
          THEN BEGIN
            ShippingAccount.RESET;
            ShippingAccount.SETCURRENTKEY("Shipping Agent Code","Account No.");
            ShippingAccount.SETRANGE("Shipping Agent Code","E-Ship Agent Code");
            ShippingAccount.SETRANGE("Account No.","Third Party Ship. Account No.");
            IF NOT ShippingAccount.FIND('-') THEN
              ;
          END;
          IF (ShippingAccount."Account No." <> '') AND
             ("Shipping Payment Type" <> "Shipping Payment Type"::Prepaid)
          THEN
            "Shipping Insurance" := ShippingAccount."Shipping Insurance";
        END;
      END;
    END;

    PROCEDURE "PurchaseHeader-ReceiveStatus"@1240020068(Rec@1240020000 : Record 38) : Text[30];
    VAR
      TotalQtyToReceiveBase@14000701 : Decimal;
    BEGIN
      //<T38> Purchase Header - ReceiveStatus function moved
      WITH Rec DO BEGIN
        // Additional code required in Attain
        CALCFIELDS("Total Qty. To Receive (base)","Total Qty. Received (base)");
        TotalQtyToReceiveBase := "Total Qty. To Receive (base)";
        CASE TRUE OF
          TotalQtyToReceiveBase = 0:
            EXIT(Text14000709);
          "Total Qty. Received (base)" = 0:
            EXIT(Text14000711);
          TotalQtyToReceiveBase = "Total Qty. Received (base)":
            EXIT(Text14000714);
          TotalQtyToReceiveBase < "Total Qty. Received (base)":
            EXIT(Text14000715);
          ELSE
            EXIT(Text14000716);
        END;
      END;
    END;

    PROCEDURE "PurchaseHeader-PackingStatus"@1240020069(Rec@1240020000 : Record 38) : Text[30];
    VAR
      TotalQtyToShipBase@14000700 : Decimal;
    BEGIN
      //<T38> Purchase Header - PackingStatus function moved
      WITH Rec DO BEGIN
        // Additional code required in Attain
        CALCFIELDS("Total Outstanding Qty. (base)","Total Qty. Packed (base)");
        TotalQtyToShipBase := "Total Outstanding Qty. (base)";
        IF TotalQtyToShipBase = 0 THEN BEGIN
          CALCFIELDS("E-Ship Whse. Outst. Qty (Base)");
          CALCFIELDS("E-Ship Whse. Ship. Qty (Base)");
          TotalQtyToShipBase := "E-Ship Whse. Outst. Qty (Base)" + "E-Ship Whse. Ship. Qty (Base)";
        END;
        CASE TRUE OF
          TotalQtyToShipBase = 0:
            EXIT(Text14000717);
          "Total Qty. Packed (base)" = 0:
            EXIT(Text14000718);
          TotalQtyToShipBase = "Total Qty. Packed (base)":
            EXIT(Text14000719);
          TotalQtyToShipBase < "Total Qty. Packed (base)":
            EXIT(Text14000720);
          ELSE
            EXIT(Text14000721);
        END;
      END;
    END;

    PROCEDURE "PurchaseHeader-DeleteShippingAgentOptionPage"@1240020070(Rec@1240020000 : Record 38);
    VAR
      Shipping@14000700 : Codeunit 14000701;
    BEGIN
      //<T38> Purchase Header - DeleteShippingAgentOptionPage function moved
      WITH Rec DO BEGIN
        PurchSetup.GET;
        IF PurchSetup."Enable Shipping" THEN
          Shipping.DeleteDocumentOptionPages("No.",DATABASE::"Purchase Header","Document Type");
      END;
    END;

    [EventSubscriber(Table,39,OnBeforeValidateEvent,"Over Receive Verified")]
    LOCAL PROCEDURE "PurchaseLine-OverReceiveVerified-OnBeforeValidate"@1240020075(VAR Rec@1240020000 : Record 39;VAR xRec@1240020001 : Record 39;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T39-F14000603> Purchase Line - Over Receive Verified - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Over Receive Verified" THEN
          TESTFIELD("Over Receive");
      END;
    END;

    PROCEDURE "PurchaseLine-CalcEShipWhseOutstQtyBase"@1240020074(VAR Rec@1240020002 : Record 39;LocationPacking@1240020001 : Boolean;LocationCode@1240020000 : Code[10]) QtyBase : Decimal;
    VAR
      PurchLine@14000703 : Record 39;
      LineQtyBase@14000801 : Decimal;
    BEGIN
      //<T39> Purchase Line - CalcEShipWhseOutstQtyBase function moved
      WITH Rec DO BEGIN
        QtyBase := 0;
        PurchLine.COPY(Rec);
        IF LocationPacking THEN
          PurchLine.SETRANGE("Location Code",LocationCode);
        IF PurchLine.FIND('-') THEN
          REPEAT
            IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN
              LineQtyBase := PurchLine."Return Qty. to Ship (Base)"
            ELSE
              LineQtyBase := PurchLine."Qty. to Receive (Base)";
            PurchLine.CALCFIELDS("E-Ship Invt. Outst. Qty (Base)");
            IF (LineQtyBase = 0) OR (PurchLine."E-Ship Invt. Outst. Qty (Base)" <> 0)
            THEN BEGIN
              PurchLine.CALCFIELDS(
                "E-Ship Whse. Outst. Qty (Base)","E-Ship Whse. Ship. Qty (Base)");
              QtyBase :=
                QtyBase +
                PurchLine."E-Ship Whse. Outst. Qty (Base)" + PurchLine."E-Ship Whse. Ship. Qty (Base)" +
                PurchLine."E-Ship Invt. Outst. Qty (Base)";
            END;
          UNTIL PurchLine.NEXT = 0;
      END;
    END;

    PROCEDURE "PurchaseLine-AllowInWarehousePosting"@1240020073(Rec@1240020000 : Record 39) : Boolean;
    BEGIN
      //<T39> Purchase Line - AllowInWarehousePosting global function moved
      WITH Rec DO BEGIN
        EXIT("Shipping Charge");
      END;
    END;

    [EventSubscriber(Table,110,OnBeforeValidateEvent,"Bill of Lading No.")]
    LOCAL PROCEDURE "SalesShipmentHeader-BillofLadingNo.-OnBeforeValidate"@1240020077(VAR Rec@1240020000 : Record 110;VAR xRec@1240020001 : Record 110;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T110-F14000821> Sales Shipment Header - Bill of Lading No. - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF ("Bill of Lading No." <> '') AND ("Bill of Lading No." <> xRec."Bill of Lading No.") THEN
          xRec.TESTFIELD("Bill of Lading No.",'');
      END;
    END;

    [EventSubscriber(Table,156,OnBeforeValidateEvent,"Schedule B code")]
    LOCAL PROCEDURE "Resource-ScheduleBcode-OnBeforeValidate"@1240020079(VAR Rec@1240020000 : Record 156;VAR xRec@1240020001 : Record 156;CurrFieldNo@1240020002 : Integer);
    VAR
      ScheduleBCode@14000701 : Record 14000718;
    BEGIN
      //<T156-F14000712> Resource - Schedule B code - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Schedule B code" = '' THEN BEGIN
          "Schedule B Unit of Measure 1" := '';
          "Schedule B Unit of Measure 2" := '';
          "Schedule B Quantity 1" := 0;
          "Schedule B Quantity 2" := 0;
        END ELSE BEGIN
          ScheduleBCode.GET("Schedule B code");
          "Schedule B Unit of Measure 1" := ScheduleBCode."Unit of Measure 1";
          "Schedule B Unit of Measure 2" := ScheduleBCode."Unit of Measure 2";
        END;
      END;
    END;

    [EventSubscriber(Table,222,OnAfterInsertEvent)]
    LOCAL PROCEDURE "Ship-toAddress-OnAfterInsert"@1240020094(VAR Rec@1240020000 : Record 222;RunTrigger@1240020001 : Boolean);
    VAR
      Cust@1240020002 : Record 18;
    BEGIN
      //<T222> Ship-toAddress - OnAfterInsert table trigger event
      IF NOT RunTrigger THEN
        EXIT;
      Cust.GET(Rec."Customer No.");
      WITH Rec DO BEGIN
        "Shipping Agent Code" := Cust."Shipping Agent Code";
        "E-Ship Agent Service" := Cust."E-Ship Agent Service";
        "Free Freight" := Cust."Free Freight";
        "Residential Delivery" := Cust."Residential Delivery";
        "Blind Shipment" := Cust."Blind Shipment";
        "Double Blind Ship-from Cust No" := Cust."Double Blind Ship-from Cust No";
        "Double Blind Shipment" := Cust."Double Blind Shipment";
        "No Free Freight Lines on Order" := Cust."No Free Freight Lines on Order";
        "Packing Rule Code" := Cust."Packing Rule Code";
        "Shipping Payment Type" := Cust."Shipping Payment Type";
        "Shipping Insurance" := Cust."Shipping Insurance";
        MODIFY;
      END;
    END;

    [EventSubscriber(Table,222,OnAfterDeleteEvent)]
    LOCAL PROCEDURE "Ship-toAddress-OnAfterDelete"@1240020093(VAR Rec@1240020000 : Record 222;RunTrigger@1240020001 : Boolean);
    BEGIN
      //<T222> Ship-toAddress - OnAfterDelete table trigger event
      IF NOT RunTrigger THEN
        EXIT;
      WITH Rec DO BEGIN
        EMailListEntry.RESET;
        EMailListEntry.SETRANGE("Table ID",DATABASE::"Ship-to Address");
        EMailListEntry.SETRANGE(Type,0);
        EMailListEntry.SETRANGE(Code,"Customer No.");
        EMailListEntry.SETRANGE("Code 2",Code);
        EMailListEntry.DELETEALL;

        ShippingAccount.RESET;
        ShippingAccount.SETRANGE("Ship-to Type",ShippingAccount."Ship-to Type"::Customer);
        ShippingAccount.SETRANGE("Ship-to No.","Customer No.");
        ShippingAccount.SETRANGE("Ship-to Code",Code);
        ShippingAccount.DELETEALL;
      END;
    END;

    [EventSubscriber(Table,222,OnBeforeValidateEvent,"Shipping Agent Code")]
    LOCAL PROCEDURE "Ship-toAddress-ShippingAgentCode-OnBeforeValidate"@1240020092(VAR Rec@1240020000 : Record 222;VAR xRec@1240020001 : Record 222;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T222-F31> Ship-to Address - Shipping Agent Code - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        SalesSetup.GET;
        IF ("Shipping Agent Code" <> xRec."Shipping Agent Code") AND SalesSetup."Enable Shipping" THEN
          IF "Shipping Agent Code" = '' THEN
            "E-Ship Agent Service" := ''
          ELSE BEGIN
            ShippingAgent.GET("Shipping Agent Code");
            VALIDATE(
              "E-Ship Agent Service",
              EShipAgentService.DefaultShipAgentService(ShippingAgent,"Country/Region Code"));
            IF CurrFieldNo = FIELDNO("Shipping Agent Code") THEN
              EShipAgentService.CheckNameAddressShipToAddress(ShippingAgent,Rec);
          END;
        Globals.SetShippingAgent("Shipping Agent Code");
      END;
    END;

    [EventSubscriber(Table,222,OnAfterValidateEvent,"Country/Region Code")]
    LOCAL PROCEDURE "Ship-toAddress-Country/RegionCode-OnAfterValidate"@1240020091(VAR Rec@1240020000 : Record 222;VAR xRec@1240020001 : Record 222;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T222-F35> Ship-to Address - Country/Region Code - OnAfterValidate field trigger event
      WITH Rec DO BEGIN
        IF "Country/Region Code" <> xRec."Country/Region Code" THEN
          IF "Shipping Agent Code" <> '' THEN BEGIN
            xRec."Shipping Agent Code" := '';
            VALIDATE("Shipping Agent Code");
          END;
        Globals.SetCountryCode("Country/Region Code");
      END;
    END;

    [EventSubscriber(Table,222,OnAfterValidateEvent,"E-Mail")]
    LOCAL PROCEDURE "Ship-toAddress-E-Mail-OnAfterValidate"@1240020090(VAR Rec@1240020000 : Record 222;VAR xRec@1240020001 : Record 222;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T222-F102> Ship-to Address - E-Mail - OnAfterValidate field trigger event
      WITH Rec DO BEGIN
        IF "E-Mail" <> '' THEN BEGIN
          SalesSetup.GET;
          IF SalesSetup."Enable E-Mail" THEN
            EMailListEntry.InsertNewEMailListEntry(
              Contact,"E-Mail",DATABASE::"Ship-to Address",0,"Customer No.",Code,TRUE);
        END;
      END;
    END;

    [EventSubscriber(Table,222,OnBeforeValidateEvent,"E-Ship Agent Service")]
    LOCAL PROCEDURE "Ship-toAddress-E-ShipAgentService-OnBeforeValidate"@1240020089(VAR Rec@1240020000 : Record 222;VAR xRec@1240020001 : Record 222;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T222-F14000701> Ship-to Address - E-Ship Agent Service - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "E-Ship Agent Service" <> '' THEN BEGIN
          TESTFIELD("Shipping Agent Code");
          ShippingAgent.GET("Shipping Agent Code");
          EShipAgentService.ValidateEShipAgentService(ShippingAgent,"E-Ship Agent Service","Country/Region Code");
          IF EShipAgentService."Default Shipping Agent Service" <> '' THEN
            IF "Shipping Agent Service Code" <> EShipAgentService."Default Shipping Agent Service" THEN
              VALIDATE("Shipping Agent Service Code",EShipAgentService."Default Shipping Agent Service");
        END;
      END;
    END;

    [EventSubscriber(Table,222,OnBeforeValidateEvent,"Free Freight")]
    LOCAL PROCEDURE "Ship-toAddress-FreeFreight-OnBeforeValidate"@1240020080(VAR Rec@1240020000 : Record 222;VAR xRec@1240020001 : Record 222;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T222-F14000702> Ship-to Address - Free Freight - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF NOT "Free Freight" THEN
          "No Free Freight Lines on Order" := FALSE;
      END;
    END;

    [EventSubscriber(Table,222,OnBeforeValidateEvent,"Blind Shipment")]
    LOCAL PROCEDURE "Ship-toAddress-BlindShipment-OnBeforeValidate"@1240020081(VAR Rec@1240020000 : Record 222;VAR xRec@1240020001 : Record 222;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T222-F14000704> Ship-to Address - Blind Shipment - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Blind Shipment" THEN
          "Double Blind Shipment" := FALSE;
      END;
    END;

    [EventSubscriber(Table,222,OnBeforeValidateEvent,"Double Blind Ship-from Cust No")]
    LOCAL PROCEDURE "Ship-toAddress-DoubleBlindShip-fromCustNo-OnBeforeValidate"@1240020082(VAR Rec@1240020000 : Record 222;VAR xRec@1240020001 : Record 222;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T222-F14000705> Ship-to Address - Double Blind Ship-from Cust No - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Double Blind Ship-from Cust No" <> '' THEN
          TESTFIELD("Double Blind Shipment");
      END;
    END;

    [EventSubscriber(Table,222,OnBeforeValidateEvent,"Double Blind Shipment")]
    LOCAL PROCEDURE "Ship-toAddress-DoubleBlindShipment-OnBeforeValidate"@1240020083(VAR Rec@1240020000 : Record 222;VAR xRec@1240020001 : Record 222;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T222-F14000706> Ship-to Address - Double Blind Shipment - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Double Blind Shipment" THEN
          "Blind Shipment" := FALSE
        ELSE
          "Double Blind Ship-from Cust No" := '';
      END;
    END;

    [EventSubscriber(Table,222,OnBeforeValidateEvent,"No Free Freight Lines on Order")]
    LOCAL PROCEDURE "Ship-toAddress-NoFreeFreightLinesonOrder-OnBeforeValidate"@1240020084(VAR Rec@1240020000 : Record 222;VAR xRec@1240020001 : Record 222;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T222-F14000707> Ship-to Address - No Free Freight Lines on Order - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        TESTFIELD("Free Freight");
      END;
    END;

    [EventSubscriber(Table,222,OnBeforeValidateEvent,"Shipping Payment Type")]
    LOCAL PROCEDURE "Ship-toAddress-ShippingPaymentType-OnBeforeValidate"@1240020085(VAR Rec@1240020000 : Record 222;VAR xRec@1240020001 : Record 222;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T222-F14000708> Ship-to Address - Shipping Payment Type - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF ShippingAgent.GET("Shipping Agent Code") THEN
          ShippingAccount.ValidateShippingAccount(
            ShippingAgent,"Shipping Payment Type",
            ShippingAccount."Ship-to Type"::Customer,"Customer No.",Code);
      END;
    END;

    [EventSubscriber(Table,222,OnBeforeValidateEvent,"Distribution Center")]
    LOCAL PROCEDURE "Ship-toAddress-DistributionCenter-OnBeforeValidate"@1240020086(VAR Rec@1240020000 : Record 222;VAR xRec@1240020001 : Record 222;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T222-F14000822> Ship-to Address - Distribition Center - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        TESTFIELD("Dist. Center Ship-to Code",'');
      END;
    END;

    [EventSubscriber(Table,222,OnBeforeValidateEvent,"Dist. Center Ship-to Code")]
    LOCAL PROCEDURE "Ship-toAddress-Dist.CenterShip-toCode-OnBeforeValidate"@1240020087(VAR Rec@1240020000 : Record 222;VAR xRec@1240020001 : Record 222;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T222-F14000823> Ship-to Address - Dist. Center Ship-to Code - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        TESTFIELD("Distribution Center",FALSE);
      END;
    END;

    [EventSubscriber(Table,224,OnAfterInsertEvent)]
    LOCAL PROCEDURE "OrderAddress-OnAfterInsert"@1240020102(VAR Rec@1240020000 : Record 224;RunTrigger@1240020001 : Boolean);
    VAR
      Vend@1240020002 : Record 23;
    BEGIN
      //<T224> Order Address - OnAfterInsert table trigger event
      IF NOT RunTrigger THEN
        EXIT;
      WITH Rec DO BEGIN
        Vend.GET("Vendor No.");
        "E-Ship Agent Code" := Vend."Shipping Agent Code";
        "E-Ship Agent Service" := Vend."E-Ship Agent Service";
        "Residential Delivery" := Vend."Residential Delivery";
        "Shipping Payment Type" := Vend."Shipping Payment Type";
        "Shipping Insurance" := Vend."Shipping Insurance";
        MODIFY;
      END;
    END;

    [EventSubscriber(Table,224,OnAfterDeleteEvent)]
    LOCAL PROCEDURE "OrderAddress-OnAfterDelete"@1240020101(VAR Rec@1240020000 : Record 224;RunTrigger@1240020001 : Boolean);
    BEGIN
      //<T224> Order Address - OnAfterDelete table trigger event
      IF NOT RunTrigger THEN
        EXIT;
      WITH Rec DO BEGIN
        EMailListEntry.RESET;
        EMailListEntry.SETRANGE("Table ID",DATABASE::"Order Address");
        EMailListEntry.SETRANGE(Type,0);
        EMailListEntry.SETRANGE(Code,"Vendor No.");
        EMailListEntry.SETRANGE("Code 2",Code);
        EMailListEntry.DELETEALL;

        ShippingAccount.RESET;
        ShippingAccount.SETRANGE("Ship-to Type",ShippingAccount."Ship-to Type"::Vendor);
        ShippingAccount.SETRANGE("Ship-to No.","Vendor No.");
        ShippingAccount.SETRANGE("Ship-to Code",Code);
        ShippingAccount.DELETEALL;
      END;
    END;

    [EventSubscriber(Table,224,OnAfterValidateEvent,"Country/Region Code")]
    LOCAL PROCEDURE "OrderAddress-Country/RegionCode-OnAfterValidate"@1240020100(VAR Rec@1240020000 : Record 224;VAR xRec@1240020001 : Record 224;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T224-F35> Order Address - Country/Region Code - OnAfterValidate field trigger event
      WITH Rec DO BEGIN
        IF "Country/Region Code" <> xRec."Country/Region Code" THEN
          IF "E-Ship Agent Code" <> '' THEN BEGIN
            xRec."E-Ship Agent Code" := '';
            VALIDATE("E-Ship Agent Code");
          END;
        Globals.SetCountryCode(Rec."Country/Region Code");
      END;
    END;

    [EventSubscriber(Table,224,OnAfterValidateEvent,"E-Mail")]
    LOCAL PROCEDURE "OrderAddress-E-Mail-OnAfterValidate"@1240020099(VAR Rec@1240020000 : Record 224;VAR xRec@1240020001 : Record 224;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T224-F102> Order Address - E-Mail - OnAfterValidate field trigger event
      WITH Rec DO BEGIN
        IF "E-Mail" <> '' THEN BEGIN
          PurchSetup.GET;
          IF PurchSetup."Enable E-Mail" THEN
            EMailListEntry.InsertNewEMailListEntry(
              Contact,"E-Mail",DATABASE::"Order Address",0,"Vendor No.",Code,TRUE);
        END;
      END;
    END;

    [EventSubscriber(Table,224,OnBeforeValidateEvent,"E-Ship Agent Service")]
    LOCAL PROCEDURE "OrderAddress-E-ShipAgentService-OnBeforeValidate"@1240020098(VAR Rec@1240020000 : Record 224;VAR xRec@1240020001 : Record 224;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T224-F14000701> Order Address - E-Ship Agent Service - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "E-Ship Agent Service" <> '' THEN BEGIN
          TESTFIELD("E-Ship Agent Code");
          ShippingAgent.GET("E-Ship Agent Code");
          EShipAgentService.ValidateEShipAgentService(ShippingAgent,"E-Ship Agent Service","Country/Region Code");
        END;
      END;
    END;

    [EventSubscriber(Table,224,OnBeforeValidateEvent,"Shipping Payment Type")]
    LOCAL PROCEDURE "OrderAddress-ShippingPaymentType-OnBeforeValidate"@1240020096(VAR Rec@1240020000 : Record 224;VAR xRec@1240020001 : Record 224;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T224-F14000703> Order Address - Shipping Payment Type - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF ShippingAgent.GET("E-Ship Agent Code") THEN
          ShippingAccount.ValidateShippingAccount(
            ShippingAgent,"Shipping Payment Type",
            ShippingAccount."Ship-to Type"::Vendor,"Vendor No.",Code);
      END;
    END;

    [EventSubscriber(Table,224,OnBeforeValidateEvent,"E-Ship Agent Code")]
    LOCAL PROCEDURE "OrderAddress-E-ShipAgentCode-OnBeforeValidate"@1240020095(VAR Rec@1240020000 : Record 224;VAR xRec@1240020001 : Record 224;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T224-F14000705> Order Address - E-Ship Agent Code - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "E-Ship Agent Code" <> xRec."E-Ship Agent Code" THEN
          IF "E-Ship Agent Code" = '' THEN
            "E-Ship Agent Service" := ''
          ELSE BEGIN
            ShippingAgent.GET("E-Ship Agent Code");
            VALIDATE(
              "E-Ship Agent Service",
              EShipAgentService.DefaultShipAgentService(ShippingAgent,"Country/Region Code"));
          END;
        Globals.SetShippingAgent(Rec."E-Ship Agent Code");
      END;
    END;

    [EventSubscriber(Table,291,OnAfterDeleteEvent)]
    LOCAL PROCEDURE "ShippingAgent-OnAfterDelete"@1240020114(VAR Rec@1240020000 : Record 291;RunTrigger@1240020001 : Boolean);
    BEGIN
      //<T291> Shipping Agent - OnAfterDelete table trigger event
      IF NOT RunTrigger THEN
        EXIT;
      WITH Rec DO BEGIN
        EShipAgentService.RESET;
        EShipAgentService.SETRANGE("Shipping Agent Code",Code);
        EShipAgentService.DELETEALL;
      END;
    END;

    [EventSubscriber(Table,291,OnBeforeValidateEvent,"Prepaid Freight Type")]
    LOCAL PROCEDURE "ShippingAgent-PrepaidFreightType-OnBeforeValidate"@1240020113(VAR Rec@1240020000 : Record 291;VAR xRec@1240020001 : Record 291;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T291-F14000701> Shipping Agent - Prepaid Freight Type - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        "Prepaid Freight Code" := '';
      END;
    END;

    [EventSubscriber(Table,291,OnBeforeValidateEvent,"Free Freight Type")]
    LOCAL PROCEDURE "ShippingAgent-FreeFreightType-OnBeforeValidate"@1240020112(VAR Rec@1240020000 : Record 291;VAR xRec@1240020001 : Record 291;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T291-F14000703> Shipping Agent - Free Freight Type - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        "Free Freight Code" := '';
      END;
    END;

    [EventSubscriber(Table,291,OnBeforeValidateEvent,"Additional Markup")]
    LOCAL PROCEDURE "ShippingAgent-AdditionalMarkup-OnBeforeValidate"@1240020111(VAR Rec@1240020000 : Record 291;VAR xRec@1240020001 : Record 291;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T291-F14000712> Shipping Agent - Additional Markup - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        EShipAgentService.RESET;
        EShipAgentService.SETRANGE("Shipping Agent Code",Code);
        EShipAgentService.SETRANGE("Override Shipping Agent Markup",FALSE);
        EShipAgentService.MODIFYALL("Additional Markup","Additional Markup");
      END;
    END;

    [EventSubscriber(Table,291,OnBeforeValidateEvent,"Markup Type")]
    LOCAL PROCEDURE "ShippingAgent-MarkupType-OnBeforeValidate"@1240020110(VAR Rec@1240020000 : Record 291;VAR xRec@1240020001 : Record 291;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T291-F14000713> Shipping Agent - Markup Type - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        EShipAgentService.RESET;
        EShipAgentService.SETRANGE("Shipping Agent Code",Code);
        EShipAgentService.SETRANGE("Override Shipping Agent Markup",FALSE);
        EShipAgentService.MODIFYALL("Markup Type","Markup Type");
      END;
    END;

    [EventSubscriber(Table,291,OnBeforeValidateEvent,"Disable Rate Calculation")]
    LOCAL PROCEDURE "ShippingAgent-DisableRateCalculation-OnBeforeValidate"@1240020109(VAR Rec@1240020000 : Record 291;VAR xRec@1240020001 : Record 291;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T291-F14000715> Shipping Agent - Disable Rate Calculation - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Disable Rate Calculation" THEN BEGIN
          EShipAgentService.RESET;
          EShipAgentService.SETRANGE("Shipping Agent Code",Code);
          EShipAgentService.MODIFYALL("Rate Shop",FALSE);
        END;
      END;
    END;

    [EventSubscriber(Table,291,OnBeforeValidateEvent,"Markup on Zero Shipping Cost")]
    LOCAL PROCEDURE "ShippingAgent-MarkuponZeroShippingCost-OnBeforeValidate"@1240020108(VAR Rec@1240020000 : Record 291;VAR xRec@1240020001 : Record 291;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T291-F14000719> Shipping Agent - Markup on Zero Shipping Cost - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        EShipAgentService.RESET;
        EShipAgentService.SETRANGE("Shipping Agent Code",Code);
        EShipAgentService.SETRANGE("Override Shipping Agent Markup",FALSE);
        EShipAgentService.MODIFYALL("Markup on Zero Shipping Cost","Markup on Zero Shipping Cost");
      END;
    END;

    [EventSubscriber(Table,291,OnBeforeValidateEvent,"Def. UPS Can. E-Ship Agent Srv")]
    LOCAL PROCEDURE "ShippingAgent-Def.UPSCan.E-ShipAgentSrv-OnBeforeValidate"@1240020107(VAR Rec@1240020000 : Record 291;VAR xRec@1240020001 : Record 291;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T291-F14000761> Shipping Agent - Def. UPS Can. E-Ship Agent Srv - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Def. UPS Can. E-Ship Agent Srv" <> '' THEN
          TESTFIELD("Shipper Type","Shipper Type"::UPS);
      END;
    END;

    [EventSubscriber(Table,291,OnBeforeValidateEvent,"Def. UPS PR E-Ship Agent Srv.")]
    LOCAL PROCEDURE "ShippingAgent-Def.UPSPRE-ShipAgentSrv.-OnBeforeValidate"@1240020106(VAR Rec@1240020000 : Record 291;VAR xRec@1240020001 : Record 291;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T291-F14000762> Shipping Agent - Def. UPS PR E-Ship Agent Srv. - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Def. UPS PR E-Ship Agent Srv." <> '' THEN
          TESTFIELD("Shipper Type","Shipper Type"::UPS);
      END;
    END;

    [EventSubscriber(Table,291,OnBeforeValidateEvent,"LTL Shipping Agent Account No.")]
    LOCAL PROCEDURE "ShippingAgent-LTLShippingAgentAccountNo.-OnBeforeValidate"@1240020105(VAR Rec@1240020000 : Record 291;VAR xRec@1240020001 : Record 291;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T291-F14000803> Shipping Agent - LTL Shipping Agent Account No. - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "LTL Shipping Agent Account No." <> '' THEN
          TESTFIELD("Shipper Type","Shipper Type"::LTL);
      END;
    END;

    [EventSubscriber(Table,291,OnBeforeValidateEvent,"Require AES ITN for Export")]
    LOCAL PROCEDURE "ShippingAgent-RequireAESITNforExport-OnBeforeValidate"@1240020104(VAR Rec@1240020000 : Record 291;VAR xRec@1240020001 : Record 291;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T291-F14000981> Shipping Agent - Require AES ITN for Export - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        TESTFIELD("Disable Export Documentation",FALSE);
      END;
    END;

    [EventSubscriber(Table,291,OnBeforeValidateEvent,"Disable Export Documentation")]
    LOCAL PROCEDURE "ShippingAgent-DisableExportDocumentation-OnBeforeValidate"@1240020103(VAR Rec@1240020000 : Record 291;VAR xRec@1240020001 : Record 291;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T291-F14000982> Shipping Agent - Disable Export Documentation - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        "Require AES ITN for Export" := FALSE;
      END;
    END;

    [EventSubscriber(Table,311,OnBeforeValidateEvent,"Enable Receive")]
    LOCAL PROCEDURE "Sales&ReceivablesSetup-EnableReceive-OnBeforeValidate"@1240020117(VAR Rec@1240020000 : Record 311;VAR xRec@1240020001 : Record 311;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T311-F14000601> Sales & Receivables Setup - Enable Receive - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF xRec."Enable Receive" AND NOT "Enable Receive" THEN
          IF NOT CONFIRM(Text14000705,FALSE) THEN
            "Enable Receive" := TRUE;
      END;
    END;

    [EventSubscriber(Table,311,OnBeforeValidateEvent,"Enable Shipping")]
    LOCAL PROCEDURE "Sales&ReceivablesSetup-EnableShipping-OnBeforeValidate"@1240020116(VAR Rec@1240020000 : Record 311;VAR xRec@1240020001 : Record 311;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T311-F14000701> Sales & Receivables Setup - Enable Shipping - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF xRec."Enable Shipping" AND NOT "Enable Shipping" THEN
          IF NOT CONFIRM(Text14000710,FALSE) THEN
            "Enable Shipping" := TRUE;
      END;
    END;

    [EventSubscriber(Table,311,OnBeforeValidateEvent,"Enable E-Mail")]
    LOCAL PROCEDURE "Sales&ReceivablesSetup-EnableE-Mail-OnBeforeValidate"@1240020115(VAR Rec@1240020000 : Record 311;VAR xRec@1240020001 : Record 311;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T311-F14000901> Sales & Receivables Setup - Enable E-Mail - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF xRec."Enable E-Mail" AND NOT "Enable E-Mail" THEN
          IF NOT CONFIRM(Text14000712,FALSE) THEN
            "Enable E-Mail" := TRUE;
      END;
    END;

    [EventSubscriber(Table,312,OnBeforeValidateEvent,"Enable Receive")]
    LOCAL PROCEDURE "Purchases&PayablesSetup-EnableReceive-OnBeforeValidate"@1240020120(VAR Rec@1240020000 : Record 312;VAR xRec@1240020001 : Record 312;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T312-F14000601> Purchases & Payables Setup - Enable Receive - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF xRec."Enable Receive" AND NOT "Enable Receive" THEN
          IF NOT CONFIRM(Text14000705,FALSE) THEN
            "Enable Receive" := TRUE;
      END;
    END;

    [EventSubscriber(Table,312,OnBeforeValidateEvent,"Enable Shipping")]
    LOCAL PROCEDURE "Purchases&PayablesSetup-EnableShipping-OnBeforeValidate"@1240020119(VAR Rec@1240020000 : Record 312;VAR xRec@1240020001 : Record 312;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T312-F14000701> Purchases & Payables Setup - Enable Shipping - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF xRec."Enable Shipping" AND NOT "Enable Shipping" THEN
          IF NOT CONFIRM(Text14000710,FALSE) THEN
            "Enable Shipping" := TRUE;
      END;
    END;

    [EventSubscriber(Table,312,OnBeforeValidateEvent,"Enable E-Mail")]
    LOCAL PROCEDURE "Purchases&PayablesSetup-EnableE-Mail-OnBeforeValidate"@1240020118(VAR Rec@1240020000 : Record 312;VAR xRec@1240020001 : Record 312;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T312-F14000901> Purchases & Payables Setup - Enable E-Mail - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF xRec."Enable E-Mail" AND NOT "Enable E-Mail" THEN
          IF NOT CONFIRM(Text14000712,FALSE) THEN
            "Enable E-Mail" := TRUE;
      END;
    END;

    [EventSubscriber(Table,313,OnBeforeValidateEvent,"Enable Receive")]
    LOCAL PROCEDURE "InventorySetup-EnableReceive-OnBeforeValidate"@1240020122(VAR Rec@1240020000 : Record 313;VAR xRec@1240020001 : Record 313;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T313-F14000601> Inventory Setup - Enable Receive - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF xRec."Enable Receive" AND NOT "Enable Receive" THEN
          IF NOT CONFIRM(Text14000705,FALSE) THEN
            "Enable Receive" := TRUE;
      END;
    END;

    [EventSubscriber(Table,313,OnBeforeValidateEvent,"Enable Shipping")]
    LOCAL PROCEDURE "InventorySetup-EnableShipping-OnBeforeValidate"@1240020121(VAR Rec@1240020000 : Record 313;VAR xRec@1240020001 : Record 313;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T313-F14000701> Inventory Setup - Enable Shipping - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF xRec."Enable Shipping" AND NOT "Enable Shipping" THEN
          IF NOT CONFIRM(Text14000710,FALSE) THEN
            "Enable Shipping" := TRUE;
      END;
    END;

    [EventSubscriber(Table,5404,OnBeforeValidateEvent,"Std. Pack UPC/EAN Number")]
    LOCAL PROCEDURE "ItemUnitofMeasure-Std.PackUPC/EANNumber-OnBeforeValidate"@1240020124(VAR Rec@1240020000 : Record 5404;VAR xRec@1240020001 : Record 5404;CurrFieldNo@1240020002 : Integer);
    VAR
      Item@1240020003 : Record 27;
    BEGIN
      //<T5404-F14000701> Item Unit of Measure - Std. Pack UPC/EAN Number - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF NOT (STRLEN("Std. Pack UPC/EAN Number") IN [0,14]) THEN
          IF NOT CONFIRM(
                   Text14000706,FALSE,
                   FIELDNAME("Std. Pack UPC/EAN Number"))
          THEN
            ERROR(Text14000708);
        IF "Std. Pack UPC/EAN Number" <> '' THEN BEGIN
          Item.GET("Item No.");
          IF Item."Item UPC/EAN Number" <> '' THEN
            IF (STRPOS("Std. Pack UPC/EAN Number",Item."Item UPC/EAN Number") = 0) AND
               (STRPOS(
                  "Std. Pack UPC/EAN Number",
                  COPYSTR(Item."Item UPC/EAN Number",1,STRLEN(Item."Item UPC/EAN Number") - 1)) = 0)
            THEN
              IF NOT CONFIRM(
                       Text14000713,FALSE,
                       Item.FIELDNAME("Item UPC/EAN Number"),Item."Item UPC/EAN Number",
                       FIELDNAME("Std. Pack UPC/EAN Number"))
              THEN
                ERROR(Text14000708);
        END;
      END;
    END;

    [EventSubscriber(Table,5740,OnAfterDeleteEvent)]
    LOCAL PROCEDURE "TransferHeader-OnAfterDelete"@1240020135(VAR Rec@1240020000 : Record 5740;RunTrigger@1240020001 : Boolean);
    VAR
      EShipSetGlobalVariable@1240020002 : Codeunit 14000246;
    BEGIN
      // <T5740> Transfer Header - OnAfterDelete table trigger function
      IF NOT RunTrigger THEN
        EXIT;
      WITH Rec DO BEGIN
        Package.RESET;
        Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        Package.SETRANGE("Source Type",DATABASE::"Transfer Header");
        Package.SETRANGE("Source Subtype",0);
        Package.SETRANGE("Source ID","No.");
        Package.DELETEALL(TRUE);

        Receive.RESET;
        Receive.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        Receive.SETRANGE("Source Type",DATABASE::"Transfer Header");
        Receive.SETRANGE("Source Subtype",0);
        Receive.SETRANGE("Source ID","No.");
        Receive.DELETEALL(TRUE);
        "TransferHeader-DeleteShippingAgentOptionPage"(Rec);
      END;
    END;

    [EventSubscriber(Table,5740,OnAfterValidateEvent,"Transfer-to Code")]
    LOCAL PROCEDURE "TransferHeader-Transfer-toCode-OnAfterValidate"@1240020134(VAR Rec@1240020000 : Record 5740;VAR xRec@1240020001 : Record 5740;CurrFieldNo@1240020002 : Integer);
    VAR
      Location@1240020003 : Record 14;
    BEGIN
      //<T5740-F2> Transfer Header - Transfer-to Code - OnAfterValidate field trigger event
      WITH Rec DO BEGIN
        IF xRec."Transfer-to Code" <> "Transfer-to Code" THEN BEGIN
          IF Location.GET("Transfer-to Code") THEN BEGIN
            "Residential Delivery" := Location."Residential Delivery";
            IF Location."E-Ship Agent Code" <> '' THEN BEGIN
              VALIDATE("Shipping Agent Code",Location."E-Ship Agent Code");
              IF Location."E-Ship Agent Service" <> '' THEN
                VALIDATE("E-Ship Agent Service",Location."E-Ship Agent Service");
            END;
            "Shipping Payment Type" := Location."Shipping Payment Type";
            "Shipping Insurance" := Location."Shipping Insurance";
            IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
              VALIDATE("Third Party Ship. Account No.",'')
            ELSE
              IF ShippingAccount.GetPrimaryShippingAccountNo(
                   "Shipping Agent Code",ShippingAccount."Ship-to Type"::Location,
                   "Transfer-to Code",'')
              THEN
                VALIDATE("Third Party Ship. Account No.",ShippingAccount."Account No.");
            "Residential Delivery" := Location."Residential Delivery";
            MODIFY;
          END;
        END;
        Globals.SetTransferHeaderValues(Rec);
      END;
    END;

    [EventSubscriber(Table,5740,OnBeforeValidateEvent,"Shipping Agent Code")]
    LOCAL PROCEDURE "TransferHeader-ShippingAgentCode-OnBeforeValidate"@1240020133(VAR Rec@1240020000 : Record 5740;VAR xRec@1240020001 : Record 5740;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T5740-F34> Transfer Header - Shipping Agent Code - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN

        IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN // Duplicate test from base code.
          VALIDATE("Shipping Agent Service Code",'');

        InvtSetup.GET;
        IF ("Shipping Agent Code" <> xRec."Shipping Agent Code") AND
           (xRec."Shipping Agent Code" <> '') AND InvtSetup."Enable Shipping"
        THEN BEGIN
          IF CurrFieldNo = FIELDNO("Shipping Agent Code") THEN BEGIN
            "TransferHeader-DeleteShippingAgentOptionPage"(Rec);

            Package.RESET;
            Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
            Package.SETRANGE("Source Type",DATABASE::"Transfer Header");
            Package.SETRANGE("Source Subtype",0);
            Package.SETRANGE("Source ID","No.");
            IF Package.FIND('-') THEN
              MESSAGE(Text14000703);
          END;

          VALIDATE("E-Ship Agent Service",'');
        END;

        IF ("Shipping Agent Code" <> '') AND InvtSetup."Enable Shipping" THEN BEGIN
          ShippingAgent.GET("Shipping Agent Code");
          "World Wide Service" :=
            EShipAgentService.WorldWideService(ShippingAgent,"Trsf.-to Country/Region Code");
          VALIDATE(
            "E-Ship Agent Service",
            EShipAgentService.DefaultShipAgentService(ShippingAgent,"Trsf.-to Country/Region Code"));

          IF CurrFieldNo = FIELDNO("Shipping Agent Code") THEN
            EShipAgentService.CheckNameAddressTransferHeader(Rec,"Shipping Agent Code");
        END ELSE
          "World Wide Service" := FALSE;

        IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
          IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
            VALIDATE("Third Party Ship. Account No.",'')
          ELSE
            IF ShippingAccount.GetPrimaryShippingAccountNo(
                 "Shipping Agent Code",ShippingAccount."Ship-to Type"::Location,"Transfer-to Code",'')
            THEN
              VALIDATE("Third Party Ship. Account No.",ShippingAccount."Account No.")
            ELSE
              VALIDATE("Third Party Ship. Account No.",'');
        Globals.SetTransferHeaderValues(Rec);
      END;
    END;

    [EventSubscriber(Table,5740,OnBeforeValidateEvent,"E-Ship Agent Service")]
    LOCAL PROCEDURE "TransferHeader-E-ShipAgentService-OnBeforeValidate"@1240020132(VAR Rec@1240020000 : Record 5740;VAR xRec@1240020001 : Record 5740;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T5740-F14000705> Transfer Header - E-Ship Agent Service - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "E-Ship Agent Service" <> '' THEN BEGIN
          TESTFIELD("Shipping Agent Code");
          ShippingAgent.GET("Shipping Agent Code");
          EShipAgentService.ValidateEShipAgentService(
            ShippingAgent,"E-Ship Agent Service","Trsf.-to Country/Region Code");
          IF EShipAgentService."Default Shipping Agent Service" <> '' THEN
            IF "Shipping Agent Service Code" <> EShipAgentService."Default Shipping Agent Service" THEN
              VALIDATE("Shipping Agent Service Code",EShipAgentService."Default Shipping Agent Service");
        END;
        IF ("E-Ship Agent Service" <> xRec."E-Ship Agent Service") AND
           (CurrFieldNo = FIELDNO("E-Ship Agent Service"))
        THEN BEGIN
          "TransferHeader-DeleteShippingAgentOptionPage"(Rec);
          Package.RESET;
          Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          Package.SETRANGE("Source Type",DATABASE::"Transfer Header");
          Package.SETRANGE("Source Subtype",0);
          Package.SETRANGE("Source ID","No.");
          IF Package.FIND('-') THEN
            MESSAGE(Text14000703);
        END;
      END;
    END;

    [EventSubscriber(Table,5740,OnBeforeValidateEvent,"Shipping Payment Type")]
    LOCAL PROCEDURE "TransferHeader-ShippingPaymentType-OnBeforeValidate"@1240020130(VAR Rec@1240020000 : Record 5740;VAR xRec@1240020001 : Record 5740;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T5740-F14000708> Transfer Header - Shipping Payment Type - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
          VALIDATE("Third Party Ship. Account No.",'')
        ELSE
          IF ShippingAccount.GetPrimaryShippingAccountNo(
               "Shipping Agent Code",ShippingAccount."Ship-to Type"::Location,"Transfer-to Code",'')
          THEN
            VALIDATE("Third Party Ship. Account No.",ShippingAccount."Account No.");
      END;
    END;

    [EventSubscriber(Table,5740,OnBeforeValidateEvent,"Third Party Ship. Account No.")]
    LOCAL PROCEDURE "TransferHeader-ThirdPartyShip.AccountNo.-OnBeforeValidate"@1240020129(VAR Rec@1240020000 : Record 5740;VAR xRec@1240020001 : Record 5740;CurrFieldNo@1240020002 : Integer);
    BEGIN
      //<T5740-F14000709> Transfer Header - Third Party Ship. Account No. - OnBeforeValidate field trigger event
      WITH Rec DO BEGIN
        IF "Third Party Ship. Account No." <> '' THEN BEGIN
          ShippingAccount."Shipping Agent Code" := "Shipping Agent Code";
          ShippingAccount.TestShippingAccountNo("Third Party Ship. Account No.");
        END;
        IF ("Third Party Ship. Account No." <> '') AND
           ("Shipping Payment Type" <> "Shipping Payment Type"::Prepaid)
        THEN BEGIN
          CLEAR(ShippingAccount);
          IF NOT ShippingAccount.GET(
                   ShippingAccount."Ship-to Type"::Location,"Transfer-to Code",'',"Shipping Agent Code",
                   "Third Party Ship. Account No.")
          THEN BEGIN
            ShippingAccount.RESET;
            ShippingAccount.SETCURRENTKEY("Shipping Agent Code","Account No.");
            ShippingAccount.SETRANGE("Shipping Agent Code","Shipping Agent Code");
            ShippingAccount.SETRANGE("Account No.","Third Party Ship. Account No.");
            IF NOT ShippingAccount.FIND('-') THEN
              ;
          END;
          IF (ShippingAccount."Account No." <> '') AND
             ("Shipping Payment Type" <> "Shipping Payment Type"::Prepaid)
          THEN
            "Shipping Insurance" := ShippingAccount."Shipping Insurance";
        END;
        Globals.SetTransferHeaderValues(Rec);
      END;
    END;

    [EventSubscriber(Table,5740,OnAfterValidateEvent,"Trsf.-to Country/Region Code")]
    LOCAL PROCEDURE "TransferHeader-TrsfToCountryCode-OnAfterValidate"@1240020142(VAR Rec@1240020000 : Record 5740;VAR xRec@1240020001 : Record 5740;CurrFieldNo@1240020002 : Integer);
    BEGIN
      // <T5740-F19> Transfer Header - Trsf-To Country/Region Code field - OnAfterValidate field event
      Globals.SetTransferHeaderValues(Rec);
    END;

    [EventSubscriber(Table,5740,OnAfterValidateEvent,"Transfer-to Code")]
    LOCAL PROCEDURE "TransferHeader-TransferToCode-OnAfterValidate"@1240020158(VAR Rec@1240020000 : Record 5740;VAR xRec@1240020001 : Record 5740;CurrFieldNo@1240020002 : Integer);
    BEGIN
      // <T5740-F11> Transfer Header - Transfer-to Code field - OnAfterValidate field event
      Globals.SetTransferHeaderValues(Rec);
    END;

    PROCEDURE "TransferHeader-ReceiveStatus"@1240020127(VAR Rec@1240020000 : Record 5740) : Text[30];
    VAR
      TotalQtyToReceiveBase@14000701 : Decimal;
    BEGIN
      //<T5740> Transfer Header - Receive Status global function moved
      WITH Rec DO BEGIN
        CALCFIELDS("Total Qty. in Transit (Base)","Total Qty. Received (base)");
        // Additional code required in Attain
        TotalQtyToReceiveBase := "Total Qty. in Transit (Base)";
        CASE TRUE OF
          TotalQtyToReceiveBase = 0:
            EXIT(Text14000709);
          "Total Qty. Received (base)" = 0:
            EXIT(Text14000711);
          TotalQtyToReceiveBase = "Total Qty. Received (base)":
            EXIT(Text14000714);
          TotalQtyToReceiveBase < "Total Qty. Received (base)":
            EXIT(Text14000715);
          ELSE
            EXIT(Text14000716);
        END;
      END;
    END;

    PROCEDURE "TransferHeader-PackingStatus"@1240020126(VAR Rec@1240020000 : Record 5740) : Text[30];
    VAR
      TotalQtyToShipBase@14000701 : Decimal;
    BEGIN
      //<T5740> Transfer Header - Packing Status global function moved
      WITH Rec DO BEGIN
        CALCFIELDS("Total Qty. To Ship (base)","Total Qty. Packed (base)");
        // Additional code required in Attain
        TotalQtyToShipBase := "Total Qty. To Ship (base)";
        IF TotalQtyToShipBase = 0 THEN BEGIN
          CALCFIELDS("E-Ship Whse. Outst. Qty (Base)");
          CALCFIELDS("E-Ship Whse. Ship. Qty (Base)");
          TotalQtyToShipBase := "E-Ship Whse. Outst. Qty (Base)" + "E-Ship Whse. Ship. Qty (Base)";
        END;
        CASE TRUE OF
          TotalQtyToShipBase = 0:
            EXIT(Text14000717);
          "Total Qty. Packed (base)" = 0:
            EXIT(Text14000718);
          TotalQtyToShipBase = "Total Qty. Packed (base)":
            EXIT(Text14000719);
          TotalQtyToShipBase < "Total Qty. Packed (base)":
            EXIT(Text14000720);
          ELSE
            EXIT(Text14000721);
        END;
      END;
    END;

    PROCEDURE "TransferHeader-DeleteShippingAgentOptionPage"@1240020125(VAR Rec@1240020000 : Record 5740);
    VAR
      Shipping@14000701 : Codeunit 14000701;
    BEGIN
      //<T5740> Transfer Header - DeleteShippingAgentOptionPage global function moved
      WITH Rec DO BEGIN
        InvtSetup.GET;
        IF InvtSetup."Enable Shipping" THEN
          Shipping.DeleteDocumentOptionPages("No.",DATABASE::"Transfer Header",0);
      END;
    END;

    PROCEDURE "TransferLine-CalcEShipWhseOutstQtyBase"@1240020136(VAR Rec@1240020000 : Record 5741;LocationPacking@1240020001 : Boolean;LocationCode@1240020002 : Code[10]) QtyBase : Decimal;
    VAR
      TransferLine@14000703 : Record 5741;
    BEGIN
      //<T5741> Transfer Line - CalcEShipWhseOutstQtyBase function moved from TransferLine table
      WITH Rec DO BEGIN
        QtyBase := 0;
        TransferLine.COPY(Rec);
        IF LocationPacking THEN
          TransferLine.SETRANGE("Transfer-from Code",LocationCode);
        IF TransferLine.FIND('-') THEN
          REPEAT
            TransferLine.CALCFIELDS("E-Ship Invt. Outst. Qty (Base)");
            IF (TransferLine."Qty. to Ship (Base)" = 0) OR
               (TransferLine."E-Ship Invt. Outst. Qty (Base)" <> 0)
            THEN BEGIN
              TransferLine.CALCFIELDS(
                "E-Ship Whse. Outst. Qty (Base)","E-Ship Whse. Ship. Qty (Base)");
              QtyBase :=
                QtyBase +
                TransferLine."E-Ship Whse. Outst. Qty (Base)" +
                TransferLine."E-Ship Whse. Ship. Qty (Base)" +
                TransferLine."E-Ship Invt. Outst. Qty (Base)";
            END;
          UNTIL TransferLine.NEXT = 0;
      END;
    END;

    [EventSubscriber(Table,5746,OnBeforeInsertEvent)]
    PROCEDURE "TransferReceiptHeader-OnBeforeInsert"@1240020078(VAR Rec@1240020000 : Record 5746;RunTrigger@1240020001 : Boolean);
    VAR
      EShipSetGlobalVariable@1240020002 : Codeunit 14000246;
      InvtSetup@1240020005 : Record 313;
      TransHeader@1240020004 : Record 5740;
      Receiving@1240020003 : Codeunit 14000601;
    BEGIN
      // <T5746> Subscriber function to OnBeforeInsert
      IF EShipSetGlobalVariable."TransferOrder-PostReceiptStatus" THEN BEGIN
        InvtSetup.GET;
        IF InvtSetup."Enable Receive" THEN
          IF (InvtSetup."E-Receive Locking Optimization") =
             (InvtSetup."E-Receive Locking Optimization"::Base)
          THEN BEGIN
            TransHeader.GET(Rec."Transfer Order No.");
            Receiving.CheckTransferHeader(TransHeader);
          END;
      END;
    END;

    [EventSubscriber(Table,5746,OnAfterInsertEvent)]
    PROCEDURE "TransferReceiptHeader-OnAfterInsert"@1240020063(VAR Rec@1240020000 : Record 5746;RunTrigger@1240020001 : Boolean);
    VAR
      EShipSetGlobalVariable@1240020002 : Codeunit 14000246;
      InvtSetup@1240020005 : Record 313;
      TransHeader@1240020004 : Record 5740;
      Receiving@1240020003 : Codeunit 14000601;
    BEGIN
      // <T5746> Subscriber function to OnAfterInsert
      IF EShipSetGlobalVariable."TransferOrder-PostReceiptStatus" THEN BEGIN
        InvtSetup.GET;
        IF InvtSetup."Enable Receive" THEN
          IF (InvtSetup."E-Receive Locking Optimization") =
             (InvtSetup."E-Receive Locking Optimization"::Base)
          THEN BEGIN
            TransHeader.GET(Rec."Transfer Order No.");
            Receiving.PostReceiveTransferHeader(TransHeader,Rec);
          END;
      END;
    END;

    [EventSubscriber(Table,5747,OnAfterInsertEvent)]
    LOCAL PROCEDURE "TransferReceiptLine-OnAfterInsert"@1240020097(VAR Rec@1240020000 : Record 5747;RunTrigger@1240020001 : Boolean);
    VAR
      InvtSetup@1240020002 : Record 313;
      TransRcptHeader@1240020003 : Record 5746;
      TransHeader@1240020006 : Record 5740;
      TransLine@1240020005 : Record 5741;
      Receiving@1240020007 : Codeunit 14000601;
      EShipSetGlobalVariable@1240020008 : Codeunit 14000246;
      LastLineNo@1240020004 : Integer;
    BEGIN
      // <T5747> Subscriber function to OnAfterInsert
      IF EShipSetGlobalVariable."TransferOrder-PostReceiptStatus" THEN BEGIN
        InvtSetup.GET;
        IF InvtSetup."Enable Receive" THEN
          IF (InvtSetup."E-Receive Locking Optimization") =
             (InvtSetup."E-Receive Locking Optimization"::Receiving)
          THEN BEGIN
            LastLineNo := 0;
            TransLine.RESET;
            TransLine.SETRANGE("Document No.",Rec."Transfer Order No.");
            TransLine.SETRANGE("Derived From Line No.",0);
            IF TransLine.FIND('-') THEN
              REPEAT
                IF TransLine."Qty. to Receive" > 0 THEN
                  LastLineNo := TransLine."Line No.";
              UNTIL TransLine.NEXT = 0;
            IF LastLineNo = Rec."Line No." THEN BEGIN
             TransHeader.GET(Rec."Transfer Order No.");
             TransRcptHeader.GET(Rec."Document No.");
             Receiving.CheckTransferHeader(TransHeader);
             Receiving.PostReceiveTransferHeader(TransHeader,TransRcptHeader);
           END;
        END;
      END;
    END;

    [EventSubscriber(Table,5744,OnAfterCopyFromTransferHeader)]
    PROCEDURE "TransferShipmentHeader-OnAfterCopyFromTransferHeader"@1240020067(VAR TransferShipmentHeader@1240020000 : Record 5744;TransferHeader@1240020001 : Record 5740);
    BEGIN
      // <T5744> Subscriber function to OnAfterCopyFromTransferHeader
      WITH TransferShipmentHeader DO BEGIN
        "E-Ship Agent Service" := TransferHeader."E-Ship Agent Service";
        "World Wide Service" := TransferHeader."World Wide Service";
        "Residential Delivery" := TransferHeader."Residential Delivery";
        "Shipping Payment Type" := TransferHeader."Shipping Payment Type";
        "Third Party Ship. Account No." := TransferHeader."Third Party Ship. Account No.";
        "Shipping Insurance" := TransferHeader."Shipping Insurance";
      END;
    END;

    [EventSubscriber(Table,5744,OnBeforeInsertEvent)]
    PROCEDURE "TransferShipmentHeader-OnBeforeInsert"@1240020076(VAR Rec@1240020000 : Record 5744;RunTrigger@1240020001 : Boolean);
    VAR
      InvtSetup@1240020003 : Record 313;
      TransHeader@1240020005 : Record 5740;
      EShipSetGlobalVariable@1240020002 : Codeunit 14000246;
      Shipping@1240020004 : Codeunit 14000701;
    BEGIN
      // <T5744> Subscriber function to OnBeforeInsert
      IF EShipSetGlobalVariable."TransferOrder-PostShipmentStatus" THEN BEGIN
        TransHeader.GET(Rec."Transfer Order No.");
        InvtSetup.GET;
        IF InvtSetup."Enable Shipping" AND
           (InvtSetup."E-Ship Locking Optimization" =
            InvtSetup."E-Ship Locking Optimization"::Base)
        THEN
          Shipping.CheckTransferHeader(TransHeader);
      END;
    END;

    [EventSubscriber(Table,5744,OnAfterInsertEvent)]
    PROCEDURE "TransferShipmentHeader-OnAfterInsert"@1240020128(VAR Rec@1240020000 : Record 5744;RunTrigger@1240020001 : Boolean);
    VAR
      InvtSetup@1240020003 : Record 313;
      TransHeader@1240020005 : Record 5740;
      EShipSetGlobalVariable@1240020002 : Codeunit 14000246;
      Shipping@1240020004 : Codeunit 14000701;
    BEGIN
      // <T5744> Subscriber function to OnAfterInsert
      IF EShipSetGlobalVariable."TransferOrder-PostShipmentStatus" THEN BEGIN
        InvtSetup.GET;
        IF InvtSetup."Enable Shipping" THEN
          IF (InvtSetup."E-Ship Locking Optimization") =
             (InvtSetup."E-Ship Locking Optimization"::Base)
          THEN BEGIN
            TransHeader.GET(Rec."Transfer Order No.");
            Shipping.PostPackageTransferShipment(TransHeader,Rec);
          END;
        Shipping.CreateBOLPostTransferShipment(Rec);
      END;
    END;

    [EventSubscriber(Table,5744,OnBeforeValidateEvent,"Shipping Agent Code")]
    LOCAL PROCEDURE "TransferShipmentHeader-EShipAgentService-OnBeforeValidate"@1240020131(VAR Rec@1240020000 : Record 5744;VAR xRec@1240020001 : Record 5744;CurrFieldNo@1240020002 : Integer);
    BEGIN
      // <T5744-F14000705> Subscriber function to OnBeforeValidate trigger event
      Globals.SetPostedTransShipValues(Rec);
    END;

    [EventSubscriber(Table,5745,OnAfterInsertEvent)]
    LOCAL PROCEDURE "TransferShipmentLine-OnAfterInsert"@1240020088(VAR Rec@1240020000 : Record 5745;RunTrigger@1240020001 : Boolean);
    VAR
      InvtSetup@1240020002 : Record 313;
      TransShptHeader@1240020003 : Record 5744;
      TransHeader@1240020006 : Record 5740;
      TransLine@1240020005 : Record 5741;
      Shipping@1240020007 : Codeunit 14000701;
      EShipSetGlobalVariable@1240020008 : Codeunit 14000246;
      LastLineNo@1240020004 : Integer;
    BEGIN
      // <T5745> Subscriber function to OnAfterInsert
      IF EShipSetGlobalVariable."TransferOrder-PostShipmentStatus" THEN BEGIN
        InvtSetup.GET;
        LastLineNo := 0;
        TransShptHeader.GET(Rec."Document No.");
        TransLine.RESET;
        TransLine.SETRANGE("Document No.",TransShptHeader."Transfer Order No.");
        TransLine.SETRANGE("Derived From Line No.",0);
        IF TransLine.FIND('-') THEN
          REPEAT
            IF TransLine."Qty. to Ship" > 0 THEN
              LastLineNo := TransLine."Line No.";
          UNTIL TransLine.NEXT = 0;
        IF LastLineNo = Rec."Line No." THEN BEGIN
          TransHeader.GET(Rec."Transfer Order No.");
          IF InvtSetup."Enable Shipping" AND
             (InvtSetup."E-Ship Locking Optimization" =
              InvtSetup."E-Ship Locking Optimization"::Packing)
          THEN BEGIN
            Shipping.CheckTransferHeader(TransHeader);
            Shipping.PostPackageTransferShipment(TransHeader,TransShptHeader);
          END;
          Shipping.BlankBillOFLadingNoTransHeader(TransHeader,FALSE);
        END;
      END;
    END;

    BEGIN
    END.
  }
}

