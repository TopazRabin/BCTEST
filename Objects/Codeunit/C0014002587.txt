OBJECT Codeunit 14002587 RF Ad Hoc Bin Count
{
  OBJECT-PROPERTIES
  {
    Date=01/22/18;
    Time=12:00:00 PM;
    Version List=RF1.50.11;
  }
  PROPERTIES
  {
    TableNo=7700;
    OnRun=VAR
            MiniformMgmt@1000 : Codeunit 7702;
          BEGIN
            MiniformMgmt.Initialize(
              MiniformHeader,Rec,DOMxmlin,ReturnedNode,
              RootNode,XMLDOMMgmt,ADCSCommunication,LoginID,
              CurrentCode,StackCode,
              WhseEmpId,LocationFilter);

            IF Code <> CurrentCode THEN
              PrepareData
            ELSE
              ProcessInput;

            CLEAR(DOMxmlin);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Function not Found';
      MiniformHeader@1001 : Record 7700;
      XMLDOMMgmt@1002 : Codeunit 6224;
      ADCSCommunication@1003 : Codeunit 7701;
      ADCSNasStartup@1004 : Codeunit 7700;
      DOMxmlin@1240020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ReturnedNode@1240020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      RootNode@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      LoginID@1240020003 : Text[250];
      WhseEmpId@1240020004 : Text[250];
      Remark@1009 : Text[250];
      LocationFilter@1010 : Text[250];
      Text001@1011 : TextConst 'ENU=Invalid Bin';
      Text002@1012 : TextConst 'ENU=Bin is empty';
      Text003@1013 : TextConst 'ENU=Invalid field';
      Text004@1014 : TextConst 'ENU=Invalid %1.';
      Text006@1015 : TextConst 'ENU=No input Node found';
      CurrentCode@1020 : Text[250];
      StackCode@1021 : Text[250];
      ActiveInputField@1022 : Integer;
      RecRef@1024 : RecordRef;
      Text007@1240020012 : TextConst 'ENU=Bin Count already in progress';
      Text008@1240020011 : TextConst 'ENU=Adjustment Bin not permitted';
      Text009@1240020005 : TextConst 'ENU=Avail Bin Count Line not found';
      Text010@1240020010 : TextConst 'ENU=Count failed to generate';
      Text011@1240020009 : TextConst 'ENU=Batch not found';
      Text012@1240020008 : TextConst 'ENU=No matching Miniform found';
      Text013@1240020007 : TextConst 'ENU=No Call Miniform found';
      Text014@1240020006 : TextConst 'ENU=No Empty Bin line found';
      Text015@1240020013 : TextConst 'ENU=Bin Count does not exist';
      Text016@1240020014 : TextConst 'ENU=Ad Hoc Count failed to launch';
      Text017@1240020015 : TextConst 'ENU=Not set to Perform Bin Count';

    LOCAL PROCEDURE ProcessInput@10();
    VAR
      Bin@1000 : Record 7354;
      Bin2@1240020009 : Record 7354;
      BinContent@1001 : Record 7302;
      BinCount@1240020001 : Record 14002580;
      BinCountLine@1240020000 : Record 14002581;
      BinCountLine2@1240020007 : Record 14002581;
      Location@1240020008 : Record 14;
      FuncGroup@1002 : Record 7702;
      MiniformHeader2@1003 : Record 7700;
      RFEmployeeSetup@1240030002 : Record 14002802;
      RFMgt@1240030001 : Codeunit 14002801;
      BinCountMgt@1240020010 : Codeunit 14002580;
      ReturnedNode2@1240020006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TextValue@1004 : Text[250];
      FldNo@1005 : Integer;
      TableNo@1240020004 : Integer;
      RecordId@1240020003 : RecordID;
      Command@1240020002 : Code[10];
      BinCode@1240020005 : Code[20];
      BinCountNo@1240020011 : Code[20];
    BEGIN
      IF XMLDOMMgmt.FindNode(RootNode,'Header/Input',ReturnedNode) THEN
        TextValue := ReturnedNode.InnerText
      ELSE
        ERROR(Text006);

      EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'));
      RecRef.OPEN(TableNo);

      FuncGroup.KeyDef := ADCSCommunication.GetFunctionKey(MiniformHeader.Code,TextValue);
      ActiveInputField := 1;

      CASE FuncGroup.KeyDef OF
        FuncGroup.KeyDef::Esc:
          ADCSCommunication.RunPreviousMiniform(DOMxmlin);
        FuncGroup.KeyDef::Input:
          BEGIN
            EVALUATE(FldNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'FieldID'));
            CASE FldNo OF
              Bin.FIELDNO(Code):
                BEGIN
                  RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
                  IF NOT RFEmployeeSetup."Perform Bin Counts" THEN
                    Remark := Text017;

                  IF Remark = '' THEN BEGIN
                    IF NOT RFMgt.GetBin(TextValue,RFEmployeeSetup,LocationFilter,TRUE,BinCode) THEN
                      Remark := STRSUBSTNO(Text004,BinCountLine.FIELDCAPTION("Bin Code"))
                    ELSE
                      TextValue := BinCode;
                  END;

                  IF Remark = '' THEN BEGIN
                    Bin2.RESET;
                    Bin2.SETFILTER("Location Code",LocationFilter);
                    Bin2.SETRANGE(Code,COPYSTR(UPPERCASE(TextValue),1,MAXSTRLEN(Bin.Code)));
                    IF NOT Bin2.FIND('-') THEN
                      Remark := Text001;
                  END;

                  IF Remark = '' THEN
                    IF Location.GET(LocationFilter) THEN
                      IF Location."Adjustment Bin Code" = Bin2.Code THEN
                        Remark := Text008;

                  IF Remark = '' THEN BEGIN
                    BinCountLine.RESET;
                    BinCountLine.SETRANGE("Location Code",LocationFilter);
                    BinCountLine.SETRANGE("Bin Code",Bin2.Code);
                    BinCountLine.SETRANGE("Count Initiated",TRUE);
                    BinCountLine.SETRANGE("Count Registered",FALSE);
                    IF BinCountLine.FIND('-') THEN
                      Remark := Text007;
                  END;

                  IF Remark = '' THEN BEGIN
                    RecRef.SETTABLE(Bin);
                    Bin.RESET;
                    Bin.SETFILTER("Location Code",LocationFilter);
                    Bin.SETRANGE(Code,Bin2.Code);
                    RecRef.GETTABLE(Bin);
                    ADCSCommunication.SetRecRef(RecRef);
                  END;

                  IF Remark = '' THEN BEGIN
                    IF BinCountMgt.CreateUnscheduledBinCount(
                        Location.Code,Bin2.Code,WhseEmpId,FALSE,BinCountNo,Remark)
                    THEN
                      LaunchAdHocBinCount(Location,Bin2,BinCountNo);
                  END;
                END;
              ELSE
                Remark := Text003;
            END;
          END;
        ELSE
          ERROR(Text000);
      END;

      IF (Remark = '') AND (FuncGroup.KeyDef = FuncGroup.KeyDef::Input) THEN
        EXIT;

      IF NOT (FuncGroup.KeyDef IN [FuncGroup.KeyDef::Esc]) THEN BEGIN
        IF Remark <> '' THEN
          ERROR(Remark);

        SendForm(ActiveInputField);
      END;
    END;

    LOCAL PROCEDURE PrepareData@1();
    VAR
      BinContent@1000 : Record 7302;
      Bin@1240020013 : Record 7354;
      RFEmployeeSetup@1240020009 : Record 14002802;
      RFMgt@1240020008 : Codeunit 14002801;
      ReturnedNode2@1240020007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TableNo@1240020006 : Integer;
      RecordId@1240020005 : RecordID;
      ForwardTableNo@1240020004 : Integer;
      ForwardTable@1240020003 : Boolean;
      ForwardRecordLine@1240020002 : Boolean;
      ForwardRecordId@1240020001 : RecordID;
      RecRef2@1240020000 : RecordRef;
    BEGIN
      RecRef.OPEN(DATABASE::Bin);
      RecRef.GETTABLE(Bin);
      ADCSCommunication.SetRecRef(RecRef);
      ActiveInputField := 1;
      SendForm(ActiveInputField);
    END;

    LOCAL PROCEDURE SendForm@3(InputField@1000 : Integer);
    BEGIN
      // Prepare Miniform
      ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,InputField,Remark,LoginID);
      ADCSCommunication.GetReturnXML(DOMxmlin);
      ADCSNasStartup.SendXMLReply(DOMxmlin);
    END;

    PROCEDURE GenerateWhseBinCount@1240020013(BinCountLine@1240030000 : Record 14002581) : Boolean;
    VAR
      MiniformHeader2@1240020005 : Record 7700;
      BinCount@1240020008 : Record 14002580;
      BinCountLine2@1240020011 : Record 14002581;
      BinCountTemplate@1240020012 : Record 14002582;
      BinContent@1240030001 : Record 7302;
      WhseJournalBatch@1240020001 : Record 7310;
      WhseJournalBatch2@1240020000 : Record 7310;
      RFEmployeeSetup@1240020010 : Record 14002802;
      RFDynamicMgt@1240030002 : Codeunit 14002882;
      BatchName@1240020004 : Text[30];
      ForwardRecID@1240020003 : RecordID;
      ForwardTableNo@1240020002 : Integer;
      RemarkMessage@1240020007 : Text[250];
      BinCountExists@1240020009 : Boolean;
      EmptyBin@1240020006 : Boolean;
    BEGIN
      RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);

      IF NOT BinCountLine."Empty Bin" THEN BEGIN
        BinCount.RESET;
        IF BinCount.GET(BinCountLine."Bin Count No.") THEN
          IF BinCountTemplate.GET(BinCount."Bin Count Template Code") THEN;

        BinContent.RESET;
        BinContent.SETRANGE("Location Code",BinCountLine."Location Code");
        BinContent.SETRANGE("Bin Code",BinCountLine."Bin Code");
        BinContent.SETRANGE("Zone Code",BinCountLine."Zone Code");
        IF BinCountTemplate."Item Filter" <> '' THEN
          BinContent.SETFILTER("Item No.",BinCountTemplate."Item Filter");
        IF BinCountTemplate."Variant Filter" <> '' THEN
          BinContent.SETFILTER("Variant Code",BinCountTemplate."Variant Filter");
        IF BinContent.FINDSET(FALSE) THEN
          RFDynamicMgt.CreateBinCountWhsePhysicalInventory(
            BinContent,RFEmployeeSetup,WhseJournalBatch,BinCountLine."Location Code",
            BinCountLine."Bin Code",BinCountLine."Bin Count No.",WhseEmpId,RemarkMessage);

        WhseJournalBatch2.RESET;
        IF WhseJournalBatch2.GET(
          WhseJournalBatch."Journal Template Name",WhseJournalBatch.Name,WhseJournalBatch."Location Code")
        THEN BEGIN
          BinCountLine2.RESET;
          IF BinCountLine2.GET(
              BinCountLine."Bin Count No.",BinCountLine."Bin Code",
              BinCountLine."Zone Code",BinCountLine."Location Code")
          THEN BEGIN
            BinCountLine2."Batch No." := WhseJournalBatch2.Name;
            BinCountLine2.MODIFY;
          END;

          ForwardTableNo := DATABASE::"Warehouse Journal Batch";
          ForwardRecID := WhseJournalBatch2.RECORDID;
          BinCountExists := TRUE;
          ADCSCommunication.SetExtraValue('BinCountExists',FORMAT(BinCountExists));
          ADCSCommunication.SetExtraValue('ForwardName',WhseJournalBatch2.Name);
          ADCSCommunication.SetExtraValue('ForwardTable',FORMAT(ForwardTableNo));
          ADCSCommunication.SetExtraValue('ForwardRecord',FORMAT(ForwardRecID));
          ADCSCommunication.SetExtraValue('FromTable',FORMAT(DATABASE::"Bin Count Line"));
          ADCSCommunication.SetExtraValue('FromRecord',FORMAT(BinCountLine.RECORDID));
          ADCSCommunication.SetExtraValue('FromRecordLine',FORMAT(BinCountLine.RECORDID));
          ADCSCommunication.SetExtraValue('FromMiniformCode',MiniformHeader.Code);
          ADCSCommunication.SetExtraValue('UnsBinCountNo',FORMAT(BinCountLine."Bin Count No."));
          SendForm(ActiveInputField);

          MiniformHeader2.GET(MiniformHeader."Next Miniform");
          MiniformHeader2.SaveXMLin(DOMxmlin);
          CODEUNIT.RUN(MiniformHeader2."Handling Codeunit",MiniformHeader2);
          EXIT(TRUE);
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE LaunchEmptyBinCount@1240020001(BinCountLine@1240020000 : Record 14002581) : Boolean;
    VAR
      MiniformHeader2@1240020013 : Record 7700;
      MiniformLine@1240020015 : Record 7701;
      Bin@1240020001 : Record 7354;
      BinCountLine2@1240020012 : Record 14002581;
      RFEmployeeSetup@1240020008 : Record 14002802;
      RFDynamicMgt@1240020007 : Codeunit 14002882;
      BinCountMgt@1240020009 : Codeunit 14002580;
      ForwardRecID@1240020005 : RecordID;
      ForwardTableNo@1240020004 : Integer;
      BinCountExists@1240020002 : Boolean;
      ForwardMiniformCode@1240020014 : Code[20];
    BEGIN
      RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);

      IF NOT BinCountLine."Empty Bin" THEN
        EXIT(FALSE);

      BinCountMgt.ToggleAssignedUserID(BinCountLine,TRUE,WhseEmpId);

      ForwardTableNo := DATABASE::"Bin Count Line";
      ForwardRecID := BinCountLine.RECORDID;
      BinCountExists := TRUE;
      ForwardMiniformCode := MiniformHeader.Code;
      ADCSCommunication.SetExtraValue('BinCountExists',FORMAT(BinCountExists));
      ADCSCommunication.SetExtraValue('ForwardTable',FORMAT(ForwardTableNo));
      ADCSCommunication.SetExtraValue('ForwardRecord',FORMAT(ForwardRecID));
      ADCSCommunication.SetExtraValue('ForwardMiniformCode',ForwardMiniformCode);
      ADCSCommunication.SetExtraValue('FromTable',FORMAT(DATABASE::"Bin Count Line"));
      ADCSCommunication.SetExtraValue('FromRecord',FORMAT(BinCountLine.RECORDID));
      ADCSCommunication.SetExtraValue('FromRecordLine',FORMAT(BinCountLine.RECORDID));
      ADCSCommunication.SetExtraValue('FromMiniformCode',MiniformHeader.Code);
      SendForm(ActiveInputField);

      MiniformLine.RESET;
      MiniformLine.SETRANGE("Miniform Code",MiniformHeader.Code);
      MiniformLine.SETRANGE("Table No.",DATABASE::Bin);
      MiniformLine.SETRANGE("Field No.",Bin.FIELDNO(Empty));
      IF MiniformLine.FIND('-') THEN BEGIN
        IF MiniformLine."Call Miniform" <> '' THEN BEGIN
          IF MiniformHeader2.GET(MiniformLine."Call Miniform") THEN BEGIN
            MiniformHeader2.SaveXMLin(DOMxmlin);
            CODEUNIT.RUN(MiniformHeader2."Handling Codeunit",MiniformHeader2);
            EXIT(TRUE);
          END ELSE
            ERROR(Text012);
        END ELSE
          ERROR(Text013);
      END ELSE
        ERROR(Text014);

      EXIT(FALSE);
    END;

    PROCEDURE LaunchAdHocBinCount@1240020002(Location@1240020001 : Record 14;Bin@1240020004 : Record 7354;BinCountNo@1240020000 : Code[20]);
    VAR
      BinCount@1240020002 : Record 14002580;
      BinCountLine@1240020003 : Record 14002581;
    BEGIN
      IF NOT BinCount.GET(BinCountNo) THEN
        ERROR(Text015);

      IF BinCountLine.GET(BinCountNo,Bin.Code,Bin."Zone Code",Location.Code) THEN BEGIN
        IF BinCountLine."Empty Bin" THEN BEGIN
          IF NOT LaunchEmptyBinCount(BinCountLine) THEN
            ERROR(Text016);
        END ELSE BEGIN
          IF NOT GenerateWhseBinCount(BinCountLine) THEN
            ERROR(Text016);
        END;
      END ELSE
        ERROR(Text016);
    END;

    EVENT DOMxmlin@1240020002::NodeInserting@93(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020002::NodeInserted@94(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020002::NodeRemoving@95(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020002::NodeRemoved@96(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020002::NodeChanging@97(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020002::NodeChanged@98(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

