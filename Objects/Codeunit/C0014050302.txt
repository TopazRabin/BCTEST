OBJECT Codeunit 14050302 E.D.I. Receive All Job Queue
{
  OBJECT-PROPERTIES
  {
    Date=07/07/17;
    Time=12:00:00 PM;
    Version List=SE0.60.14;
  }
  PROPERTIES
  {
    TableNo=14050305;
    OnRun=BEGIN
            FileImportByTradePartner(
              "Company Filter","Trade Partner Filter","Navision Document Filter","EDI Document No. Filter");
          END;

  }
  CODE
  {
    VAR
      EDISetup@1240020002 : Record 14002367;
      EDIManagement@1240020003 : Codeunit 14002379;
      List@1240020011 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      Directory@1240020013 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Directory";
      FileList@1240020014 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IList";
      LogDescription@1240020004 : Text[250];
      EntryNo@1240020005 : Integer;
      FileName@1240020006 : Text[250];
      FileCount@1240020008 : Integer;
      TotalFileCount@1240020009 : Integer;
      TotalErrorFileCount@1240020010 : Integer;
      NumFiles@1240020015 : Integer;

    PROCEDURE FileImportByTradePartner@1240020000(CompanyName@1240020012 : Text[250];TradePartnerNo@1240020000 : Code[250];NavisionDocument@1240020008 : Code[250];EDIDocumentNo@1240020006 : Code[250]);
    VAR
      EDIDocument@1240020002 : Record 14002353;
      CompanyInformation@1240020007 : Record 79;
      EDITemplate@1240020001 : Record 14002350;
      EDITradePartner@1240020013 : Record 14002360;
      EDILog@1240020024 : Record 14050302;
      EDIFileSplit@1240020004 : Codeunit 14002353;
      EDIImport@1240020005 : Codeunit 14002354;
      EDIFunctAckSendAll@1240020003 : Codeunit 14002366;
      EDIManagement@1240020022 : Codeunit 14002379;
      FileInfo@1240020023 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileInfo";
      EntryNo@1240020011 : Integer;
      InterfaceFile@1240020019 : Text[100];
      ImportFilePath@1240020018 : Text[100];
      EDIFileName@1240020017 : Text[250];
      InterfaceFileLen@1240020016 : Integer;
      EndPosition@1240020015 : Integer;
      Processed@1240020014 : Boolean;
      LogEntryNo@1240020010 : Integer;
      DeleteLog@1240020020 : Boolean;
      ErrorText@1240020021 : Text[250];
      Text001@1240020009 : TextConst 'ENU=Could not find interface file path %1 listed on %2 trade partner %3 %4 document card..';
    BEGIN
      EDISetup.GET;
      CompanyInformation.GET;

      EDIDocument.INIT;
      EDITradePartner.INIT;

      FileList := Directory.EnumerateFiles(EDISetup."Common Receive Path");
      List := List.List;
      List.AddRange(FileList);
      IF List.Count > 0 THEN BEGIN
        EDILog.RESET;
        EDILog.SETRANGE(Process,'Process Common Receive');
        EDILog.SETRANGE(Error,TRUE);
        EDILog.DELETEALL;
        FOR NumFiles := 0 TO List.Count - 1 DO BEGIN
          CLEAR(FileInfo);
          FileInfo := FileInfo.FileInfo(FORMAT(List.Item(NumFiles)));
          CLEARLASTERROR;
          CLEAR(EDIFileSplit);
          EDIFileSplit.GetFile(List,NumFiles);
          LogDescription := 'Process Common Receive';
          EDIManagement.CreateLogEntry(LogDescription,LogEntryNo,FileInfo,TRUE,EDIDocument);
          COMMIT;
          CLEARLASTERROR;
          IF EDIFileSplit.RUN THEN
            DeleteLog := TRUE
          ELSE
            DeleteLog := FALSE;
          IF DeleteLog THEN
            EDIManagement.DeleteLogEntry(LogEntryNo)
          ELSE BEGIN
            ErrorText := '';
            ErrorText := COPYSTR(GETLASTERRORTEXT,1,250);
            EDIManagement.CloseLogEntry(LogEntryNo,ErrorText);
          END;
          COMMIT;
        END;
      END;
        COMMIT;

      TotalFileCount := 0;
      TotalErrorFileCount := 0;

      EDITradePartner.RESET;
      IF TradePartnerNo <> '' THEN
        EDITradePartner.SETFILTER("No.",TradePartnerNo);
      IF CompanyName <> '' THEN
        EDITradePartner.SETFILTER("Company Name",CompanyName);
      IF EDITradePartner.FIND('-') THEN
        REPEAT
          EDIDocument.RESET;
          EDIDocument.SETFILTER("Trade Partner No.",EDITradePartner."No.");
          IF NavisionDocument <> '' THEN
            EDIDocument.SETFILTER("Navision Document",NavisionDocument);
          IF EDIDocumentNo <> '' THEN
            EDIDocument.SETFILTER("EDI Document No.",EDIDocumentNo);
          EDIDocument.SETFILTER(Status,'<>%1',EDIDocument.Status::Inactive);
          EDIDocument.SETRANGE(Type,EDIDocument.Type::Import);
          IF EDIDocument.FIND('-') THEN BEGIN
            REPEAT
              IF EDITemplate.GET(EDIDocument."EDI Template Code") THEN BEGIN
                IF (EDITemplate."Interface File Type" =
                    EDITemplate."Interface File Type"::"X12 Delimited") OR
                   (EDITemplate."Interface File Type" =
                    EDITemplate."Interface File Type"::"EDIFACT Delimited") OR
                   (EDITemplate."Interface File Type" =
                    EDITemplate."Interface File Type"::cXML) OR
                   (EDITemplate."Interface File Type" =
                    EDITemplate."Interface File Type"::XML)
                THEN BEGIN
                  ImportFilePath := EDITemplate."Interface File Path" + 'Inbox\';
                  InterfaceFile := EDIDocument."Interface File";
                  InterfaceFileLen := STRLEN(InterfaceFile);
                  CASE EDITemplate."Interface File Type" OF
                    EDITemplate."Interface File Type"::"X12 Delimited":
                      InterfaceFileLen := InterfaceFileLen + 4;
                    EDITemplate."Interface File Type"::"EDIFACT Delimited":
                      InterfaceFileLen := InterfaceFileLen + 7;
                    EDITemplate."Interface File Type"::cXML,EDITemplate."Interface File Type"::XML:
                      InterfaceFileLen := InterfaceFileLen + STRLEN(DELCHR(EDIDocument."EDI Document No.",'=',':')) + 1;
                  END;
                  FileList := Directory.EnumerateFiles(ImportFilePath);
                  List := List.List;
                  List.AddRange(FileList);
                  IF List.Count > 0 THEN BEGIN
                    FOR NumFiles := 0 TO List.Count - 1 DO BEGIN
                     CLEAR(FileInfo);
                     FileInfo := FileInfo.FileInfo(FORMAT(List.Item(NumFiles)));
                     FileName := FileInfo.Name;
                     IF COPYSTR(FileName,1,InterfaceFileLen) =
                       InterfaceFile + '-' + DELCHR(EDIDocument."EDI Document No.",'=',':')
                     THEN BEGIN
                        CLEARLASTERROR;
                        CLEAR(EDIImport);
                        EDIImport.GetFile(List,NumFiles);
                        LogDescription := 'Process Inbox File';
                        EDIManagement.CreateLogEntry(
                          LogDescription,LogEntryNo,FileInfo,TRUE,EDIDocument);
                        COMMIT;
                        IF EDIImport.RUN(EDIDocument) THEN BEGIN
                          DeleteLog := TRUE;
                          Processed := EDIImport.GetFileCount;
                          IF Processed THEN BEGIN
                            FileCount := FileCount + 1;
                            TotalFileCount := TotalFileCount + 1;
                          END;
                        END ELSE BEGIN
                          DeleteLog := FALSE;
                          TotalErrorFileCount := TotalErrorFileCount + 1;
                        END;
                        IF DeleteLog THEN
                          EDIManagement.DeleteLogEntry(LogEntryNo)
                        ELSE BEGIN
                          ErrorText := '';
                          ErrorText := COPYSTR(GETLASTERRORTEXT,1,250);
                          EDIManagement.CloseLogEntry(LogEntryNo,ErrorText);
                        END;
                        COMMIT;
                      END;
                    END;
                  END;
                END ELSE
                  IF (EDITemplate."Interface File Type" =
                      EDITemplate."Interface File Type"::None)
                  THEN BEGIN
                    EDIFileName := EDIDocument."Interface File";
                    EndPosition := 0;
                    WHILE STRPOS(COPYSTR(EDIFileName,EndPosition + 1),'\') > 0 DO
                      EndPosition := EndPosition + STRPOS(COPYSTR(EDIFileName,EndPosition + 1),'\');
                    ImportFilePath := COPYSTR(EDIFileName,1,EndPosition - 1);
                    IF Directory.Exists(ImportFilePath) THEN BEGIN
                      FileList := Directory.EnumerateFiles(ImportFilePath);
                      List := List.List;
                      List.AddRange(FileList);
                      IF List.Count > 0 THEN
                        FOR NumFiles := 0 TO List.Count - 1 DO BEGIN
                          DeleteLog := FALSE;
                          CLEARLASTERROR;
                          CLEAR(EDIImport);
                          EDIImport.GetFile(List,NumFiles);
                          LogDescription := 'Process Inbound File';
                          CLEAR(FileInfo);
                          FileInfo := FileInfo.FileInfo(FORMAT(List.Item(NumFiles)));
                          EDIManagement.ByDocumentFileName(FileInfo);
                          EDIManagement.CreateLogEntryByEDIDocument(
                            LogDescription,LogEntryNo,EDIDocument,TRUE,EDIDocument."EDI Template Code");
                          COMMIT;
                          IF EDIImport.RUN(EDIDocument) THEN BEGIN
                            DeleteLog := TRUE;
                            Processed := EDIImport.GetFileCount;
                            IF Processed THEN BEGIN
                              FileCount := FileCount + 1;
                              TotalFileCount := TotalFileCount + 1;
                            END;
                          END ELSE
                            DeleteLog := FALSE;
                          IF DeleteLog THEN
                            EDIManagement.DeleteLogEntry(LogEntryNo)
                          ELSE BEGIN
                            ErrorText := '';
                            ErrorText := COPYSTR(GETLASTERRORTEXT,1,250);
                            EDIManagement.CloseLogEntry(LogEntryNo,ErrorText);
                          END;
                          COMMIT;
                        END;
                    END ELSE BEGIN
                      ErrorText := Text001;
                      ErrorText := STRSUBSTNO(
                      ErrorText,EDIDocument."Interface File",EDIDocument."Trade Partner No.",
                        EDIDocument."Navision Document",EDIDocument."EDI Document No.");
                      EDIManagement.CreateLogEntryByEDIDocument(
                        LogDescription,LogEntryNo,EDIDocument,FALSE,EDIDocument."EDI Template Code");
                      EDIManagement.CloseLogEntry(LogEntryNo,ErrorText);
                    END;
                  END ELSE BEGIN
                    LogDescription := 'Process Inbound File';
                    EDIManagement.CreateLogEntryByEDIDocument(
                      LogDescription,LogEntryNo,EDIDocument,TRUE,EDIDocument."EDI Template Code");
                    COMMIT;
                    CLEARLASTERROR;
                    CLEAR(EDIImport);
                    IF EDIImport.RUN(EDIDocument) THEN BEGIN
                      DeleteLog := TRUE;
                      Processed := EDIImport.GetFileCount;
                      IF Processed THEN BEGIN
                        FileCount := FileCount + 1;
                        TotalFileCount := TotalFileCount + 1;
                      END;
                    END ELSE
                      DeleteLog := FALSE;
                    IF DeleteLog THEN
                      EDIManagement.DeleteLogEntry(LogEntryNo)
                    ELSE BEGIN
                      ErrorText := '';
                      ErrorText := COPYSTR(GETLASTERRORTEXT,1,250);
                      EDIManagement.CloseLogEntry(LogEntryNo,ErrorText);
                    END;
                    COMMIT;
                  END;
              END ELSE BEGIN
                CLEARLASTERROR;
                CLEAR(EDIImport);
                LogDescription := 'Template Verification';
                CLEAR(FileInfo);
                EDIManagement.CreateLogEntry(
                  LogDescription,LogEntryNo,FileInfo,TRUE,EDIDocument);
                COMMIT;
                IF EDIImport.RUN(EDIDocument) THEN
                  DeleteLog := TRUE
                ELSE
                  DeleteLog := FALSE;
                IF DeleteLog THEN
                  EDIManagement.DeleteLogEntry(LogEntryNo)
                ELSE BEGIN
                  ErrorText := '';
                  ErrorText := COPYSTR(GETLASTERRORTEXT,1,250);
                  EDIManagement.CloseLogEntry(LogEntryNo,ErrorText);
                END;
                COMMIT;
              END;
            UNTIL EDIDocument.NEXT=0;
            LogDescription := 'Send Functional Acknowledgement';
            EDIManagement.CreateOutboundLogEntry(LogDescription,LogEntryNo,'SEND DOCUMENT',' ',
              EDITradePartner."No.",EDIDocument."Navision Document",
              EDIDocument."EDI Document No.");
            COMMIT;

            CLEARLASTERROR;
            CLEAR(EDIFunctAckSendAll);
            IF EDIFunctAckSendAll.RUN THEN
              DeleteLog := TRUE
            ELSE
              DeleteLog := FALSE;
            COMMIT;

            IF DeleteLog THEN
              EDIManagement.DeleteOutboundLogEntry(LogEntryNo)
            ELSE BEGIN
              ErrorText := '';
              ErrorText := COPYSTR(GETLASTERRORTEXT,1,250);
              EDIManagement.CloseOutboundLogEntry(LogEntryNo,ErrorText);
            END;
            COMMIT;
          END;
        UNTIL EDITradePartner.NEXT = 0;

      EDIManagement.DeleteOrphanedLogEntries;
    END;

    BEGIN
    END.
  }
}

