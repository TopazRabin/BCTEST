OBJECT Codeunit 11123388 SC - NAVApp Management
{
  OBJECT-PROPERTIES
  {
    Date=07/01/20;
    Time=12:00:00 AM;
    Modified=Yes;
    Version List=SCW19.2.0;
  }
  PROPERTIES
  {
    TableNo=11123302;
    Permissions=TableData 2000000168=rimd;
    EventSubscriberInstance=Manual;
    OnRun=VAR
            RequestBuff@11123305 : TEMPORARY Record 11123303;
            ResponseBuff@11123304 : TEMPORARY Record 11123303;
            Params@11123303 : TEMPORARY Record 11123310;
          BEGIN
            Context.GetRequestBuff(RequestBuff);
            Context.GetResponseBuff(ResponseBuff);
            Context.GetParams(Params);

            CASE Code OF
              UPPERCASE('CheckSupportPersistedBasket') : CheckSupportPersistedBasket(Params);
            END;

            Context.SetParams(Params);
          END;

  }
  CODE
  {
    VAR
      Context@11123304 : Codeunit 11123305;
      Text11123302@11123307 : TextConst 'ENU=You have changed the %1 field value of the %2 %3.\\Do you want to update visibility of its variants?';
      Text11123303@11123306 : TextConst 'ENU=You cannot delete %1 because there are one or more items that include this product group.';
      Text11123301@11123305 : TextConst 'ENU=4|9|13|18|27|30|36|90|110|112|114|279|5050|5401|5404|5715|5722|5723|6660|2000000004|2000000005';
      Text11123304@11123303 : TextConst 'ENU=5|10|30|41|42|130|132|386|5401|5404|5716|5730|5731';

    [EventSubscriber(Codeunit,1,OnAfterGetApplicationVersion)]
    LOCAL PROCEDURE OnAfterGetApplicationVersion@1(VAR AppVersion@11123303 : Text[80]);
    VAR
      ChangeMgt@11123304 : Codeunit 11123324;
      SanaVersion@11123305 : Text;
    BEGIN
      ChangeMgt.GetApplicationVersion(SanaVersion);
      AppVersion += SanaVersion;
    END;

    [EventSubscriber(Codeunit,80,OnAfterPostSalesDoc)]
    LOCAL PROCEDURE OnBeforePostCommitSalesDoc@11123311(VAR SalesHeader@11123302 : Record 36;VAR GenJnlPostLine@11123303 : Codeunit 12;SalesShptHdrNo@11123304 : Code[20];RetRcpHdrNo@11123305 : Code[20];SalesInvHdrNo@11123307 : Code[20];SalesCrMemoHdrNo@11123308 : Code[20]);
    VAR
      SalesSetup@11123306 : Record 311;
      ChangeMgt@11123309 : Codeunit 11123324;
    BEGIN
      SalesSetup.GET;
      WITH SalesHeader DO BEGIN
        IF ("Document Type" = "Document Type"::Order) OR
           (("Document Type" = "Document Type"::Invoice) AND SalesSetup."Shipment on Invoice")
        THEN BEGIN
          ChangeMgt.UpdateSanaOrderImportInfo("Document Type","No.");
        END;
      END;
    END;

    [EventSubscriber(Codeunit,1,OnAfterGetDatabaseTableTriggerSetup)]
    LOCAL PROCEDURE OnAfterGetDatabaseTableTriggerSetup@5(TableId@11123307 : Integer;VAR OnDatabaseInsert@11123306 : Boolean;VAR OnDatabaseModify@11123305 : Boolean;VAR OnDatabaseDelete@11123304 : Boolean;VAR OnDatabaseRename@11123303 : Boolean);
    VAR
      SanaCommerceChangeMgt@11123312 : Codeunit 11123324;
      IntegrationManagement@11123311 : Codeunit 5150;
      ChangeLogMgt@11123310 : Codeunit 423;
      Result@11123309 : Boolean;
      i@11123308 : Integer;
    BEGIN
      IF SanaCommerceEnabled AND SQLServerIsUsed THEN BEGIN
        OnDatabaseDelete := FALSE;
        OnDatabaseInsert := FALSE;
        OnDatabaseModify := FALSE;
        OnDatabaseRename := FALSE;

        SanaCommerceChangeMgt.GetDatabaseTableTriggerSetup(TableId,OnDatabaseInsert,OnDatabaseModify,OnDatabaseDelete,OnDatabaseRename);

        Result := OnDatabaseInsert AND OnDatabaseModify AND OnDatabaseDelete AND OnDatabaseRename;
        IF NOT Result THEN BEGIN
          ChangeLogMgt.GetDatabaseTableTriggerSetup(TableId,OnDatabaseInsert,OnDatabaseModify,OnDatabaseDelete,OnDatabaseRename);
          IntegrationManagement.GetDatabaseTableTriggerSetup(TableId,OnDatabaseInsert,OnDatabaseModify,OnDatabaseDelete,OnDatabaseRename);
        END;
      END;
    END;

    [EventSubscriber(Codeunit,1,OnAfterOnDatabaseInsert)]
    LOCAL PROCEDURE OnAfterOnDatabaseInsert@7(RecRef@11123303 : RecordRef);
    VAR
      SanaCommerceChangeMgt@11123304 : Codeunit 11123324;
    BEGIN
      IF NOT RecRef.ISTEMPORARY THEN
        IF SanaCommerceEnabled AND SQLServerIsUsed THEN
          SanaCommerceChangeMgt.OnInsertModifyDeleteRename(RecRef,1);
    END;

    [EventSubscriber(Codeunit,1,OnAfterOnDatabaseModify)]
    LOCAL PROCEDURE OnAfterOnDatabaseModify@8(RecRef@11123303 : RecordRef);
    VAR
      SanaCommerceChangeMgt@11123304 : Codeunit 11123324;
    BEGIN
      IF NOT RecRef.ISTEMPORARY THEN
        IF SanaCommerceEnabled AND SQLServerIsUsed THEN
          SanaCommerceChangeMgt.OnInsertModifyDeleteRename(RecRef,2);
    END;

    [EventSubscriber(Codeunit,1,OnAfterOnDatabaseDelete)]
    LOCAL PROCEDURE OnAfterOnDatabaseDelete@2(RecRef@11123303 : RecordRef);
    VAR
      SanaCommerceChangeMgt@11123304 : Codeunit 11123324;
    BEGIN
      IF NOT RecRef.ISTEMPORARY THEN
        IF SanaCommerceEnabled AND SQLServerIsUsed THEN
          SanaCommerceChangeMgt.OnInsertModifyDeleteRename(RecRef,3);
    END;

    [EventSubscriber(Codeunit,1,OnAfterOnDatabaseRename)]
    LOCAL PROCEDURE OnAfterOnDatabaseRename@3(RecRef@11123304 : RecordRef;xRecRef@11123303 : RecordRef);
    VAR
      SanaCommerceChangeMgt@11123302 : Codeunit 11123324;
    BEGIN
      IF RecRef.ISTEMPORARY THEN
        EXIT;

      IF SanaCommerceEnabled AND SQLServerIsUsed THEN BEGIN
        SanaCommerceChangeMgt.OnInsertModifyDeleteRename(xRecRef,4);
        SanaCommerceChangeMgt.OnInsertModifyDeleteRename(RecRef,1);
      END;
    END;

    [EventSubscriber(Table,27,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifyItem@11123319(VAR Rec@11123302 : Record 27;VAR xRec@11123303 : Record 27;RunTrigger@11123304 : Boolean);
    BEGIN
      IF NOT RunTrigger THEN
        EXIT;

      IF Rec."Visible in Webshop" <> xRec."Visible in Webshop" THEN
        UpdateVariantsVisibility(Rec);
    END;

    [EventSubscriber(Table,11123305,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifySanaSetup@11123325(VAR Rec@11123302 : Record 11123305;VAR xRec@11123303 : Record 11123305;RunTrigger@11123304 : Boolean);
    BEGIN
      IF NOT RunTrigger THEN
        EXIT;

      IF Context.SanaExtansionIsUsed THEN
        IF Rec."Enable Sana Commerce" THEN
          SetSanaTenantWebService
        ELSE
          DeleteSanaTenantWebService
      ELSE
        IF Rec."Enable Sana Commerce" THEN
          SetSanaWebService
        ELSE
          DeleteSanaWebService;
    END;

    [EventSubscriber(Page,30,OnAfterGetCurrRecordEvent)]
    LOCAL PROCEDURE OnAfterGetCurrRecEventPage30@11123323(VAR Rec@11123303 : Record 27);
    VAR
      ChangeMgt@11123304 : Codeunit 11123324;
    BEGIN
      ChangeMgt.VerifyLastDateTimeModified(Rec);
    END;

    [EventSubscriber(Page,41,OnAfterActionEvent,"<Action11123303>")]
    LOCAL PROCEDURE OnAfterActionEventPage41@10(VAR Rec@11123303 : Record 36);
    VAR
      OrderFunc@11123304 : Codeunit 11123319;
    BEGIN
      OrderFunc.OpenSalesDocHeaderForm36(Rec);
    END;

    [EventSubscriber(Page,42,OnAfterActionEvent,"<Action11123303>")]
    LOCAL PROCEDURE OnAfterActionEventPage42@13(VAR Rec@11123303 : Record 36);
    VAR
      OrderFunc@11123304 : Codeunit 11123319;
    BEGIN
      OrderFunc.OpenSalesDocHeaderForm36(Rec);
    END;

    [EventSubscriber(Page,130,OnAfterActionEvent,Action11123303)]
    LOCAL PROCEDURE OnAfterActionEventPage130@14(VAR Rec@11123303 : Record 110);
    VAR
      OrderFunc@11123304 : Codeunit 11123319;
    BEGIN
      OrderFunc.OpenSalesDocHeaderForm110(Rec);
    END;

    [EventSubscriber(Page,132,OnAfterActionEvent,Action11123303)]
    LOCAL PROCEDURE OnAfterActionEventPage132@15(VAR Rec@11123303 : Record 112);
    VAR
      OrderFunc@11123304 : Codeunit 11123319;
    BEGIN
      OrderFunc.OpenSalesDocHeaderForm112(Rec);
    END;

    [EventSubscriber(Page,6630,OnAfterActionEvent,Action11123303)]
    LOCAL PROCEDURE OnAfterActionEventPage6630@11123302(VAR Rec@11123302 : Record 36);
    VAR
      OrderFunc@11123304 : Codeunit 11123319;
    BEGIN
      OrderFunc.OpenSalesDocHeaderForm36(Rec);
    END;

    [EventSubscriber(Table,98,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterGLSetupModifyEvent@11123309(VAR Rec@11123305 : Record 98;VAR xRec@11123304 : Record 98;RunTrigger@11123303 : Boolean);
    VAR
      Setup@11123308 : Record 11123305;
      Validation@11123307 : Codeunit 11123310;
      RecMgt@11123306 : Codeunit 11123326;
      RecRef@11123314 : RecordRef;
      xRecRef@11123313 : RecordRef;
      FieldRef@11123312 : FieldRef;
      xFieldRef@11123311 : FieldRef;
      VATinUse@11123310 : Boolean;
      xVATinUse@11123309 : Boolean;
    BEGIN
      IF NOT RunTrigger THEN
        EXIT;

      IF NOT SanaCommerceEnabled THEN
        EXIT;

      IF Context.IsNorthAmericaLocalization THEN BEGIN
        RecRef.GETTABLE(Rec);
        xRecRef.GETTABLE(xRec);
        FieldRef := RecRef.FIELD(10001); //"VAT in Use"
        xFieldRef := xRecRef.FIELD(10001);
        VATinUse := FieldRef.VALUE;
        xVATinUse := xFieldRef.VALUE;
        IF VATinUse <> xVATinUse THEN BEGIN
          Context.SupportsVAT(TRUE);
          Validation.SetDefaults(0,Setup);
        END;
      END;
    END;

    PROCEDURE GetBoolFieldValueFromSanaSetup@11123304(FieldNo@11123302 : Integer) : Boolean;
    VAR
      CacheMgt@11123305 : Codeunit 11123323;
      TableRef@11123303 : RecordRef;
      FieldReference@11123304 : FieldRef;
    BEGIN
      IF CheckTableExists(11123305) THEN BEGIN
        TableRef.OPEN(11123305);
        IF TableRef.READPERMISSION THEN
        IF CacheMgt.GetRec(TableRef,FALSE) THEN BEGIN
          FieldReference := TableRef.FIELD(FieldNo);
          IF FieldReference.ACTIVE AND (FORMAT(FieldReference.TYPE) = 'Boolean') THEN
            EXIT(FieldReference.VALUE);
        END;
        TableRef.CLOSE;
      END;
    END;

    PROCEDURE GetIntFieldValueFromSanaSetup@11123305(FieldNo@11123306 : Integer) : Integer;
    VAR
      CacheMgt@11123305 : Codeunit 11123323;
      TableRef@11123304 : RecordRef;
      FieldReference@11123303 : FieldRef;
    BEGIN
      IF CheckTableExists(11123305) THEN BEGIN
        TableRef.OPEN(11123305);
        IF CacheMgt.GetRec(TableRef,FALSE) THEN BEGIN
          FieldReference := TableRef.FIELD(FieldNo);
          IF FieldReference.ACTIVE AND (FORMAT(FieldReference.TYPE) = 'Integer') THEN
            EXIT(FieldReference.VALUE);
        END;
        TableRef.CLOSE;
      END;
    END;

    PROCEDURE CheckTableExists@11123306(TableNo@11123302 : Integer) TableExist : Boolean;
    VAR
      NAVAppObjectMetadata@11123304 : Record 2000000150;
      ObjectRec@11123303 : Record 2000000001;
    BEGIN
      IF COMPANYNAME = '' THEN
        EXIT(FALSE);

      NAVAppObjectMetadata.SETRANGE("Object Type",ObjectRec.Type::Table);
      NAVAppObjectMetadata.SETRANGE("Object ID",TableNo);
      IF NOT NAVAppObjectMetadata.ISEMPTY THEN
        TableExist := TRUE;

      ObjectRec.SETRANGE(Type,ObjectRec.Type::Table);
      ObjectRec.SETRANGE(ID,TableNo);
      IF NOT ObjectRec.ISEMPTY THEN
        TableExist := TRUE;

      EXIT(TableExist);
    END;

    PROCEDURE SanaCommerceEnabled@11123307() : Boolean;
    BEGIN
      EXIT(GetBoolFieldValueFromSanaSetup(12));
    END;

    LOCAL PROCEDURE SQLServerIsUsed@11123308() : Boolean;
    VAR
      GLSetup@11123302 : Record 98;
    BEGIN
      EXIT(GLSetup.RECORDLEVELLOCKING);
    END;

    LOCAL PROCEDURE UpdateVariantsVisibility@11123317(VAR Item@11123306 : Record 27);
    VAR
      ItemVariant@11123302 : Record 5401;
      VariantInfo@11123304 : Record 11123318;
      Context@11123305 : Codeunit 11123305;
      Confirmed@11123303 : Boolean;
    BEGIN
      ItemVariant.SETRANGE("Item No.",Item."No.");
      IF NOT ItemVariant.ISEMPTY THEN BEGIN
        IF GUIALLOWED THEN
          Confirmed := CONFIRM(STRSUBSTNO(Text11123302,Item.FIELDCAPTION("Visible in Webshop"),Item.TABLECAPTION,Item."No."),TRUE);
        IF Confirmed THEN BEGIN
          VariantInfo.SETRANGE("Item No.",Item."No.");
          IF NOT VariantInfo.ISEMPTY THEN
            VariantInfo.DELETEALL(TRUE);

          ItemVariant.MODIFYALL("Visible in Webshop",Item."Visible in Webshop");
        END;
      END;
    END;

    PROCEDURE CheckSupportPersistedBasket@4(VAR Params@11123303 : Record 11123310);
    VAR
      NAVAppObjectMetadata@11123304 : Record 2000000150;
    BEGIN
      IF Context.SupportsPersistedBaskets THEN BEGIN
        Params.SupportsPersistedBaskets := TRUE;
        EXIT;
      END;

      NAVAppObjectMetadata.SETRANGE("Object Type",NAVAppObjectMetadata."Object Type"::Codeunit);
      NAVAppObjectMetadata.SETRANGE("Object ID",CODEUNIT::"SC - NAV Web Service");
      Params.SupportsPersistedBaskets := NOT NAVAppObjectMetadata.ISEMPTY;
    END;

    PROCEDURE SetSanaRolePermissions@6();
    VAR
      Object@11123315 : Record 2000000150;
      SettingsFunc@11123314 : Codeunit 11123311;
      Window@11123313 : Dialog;
      RoleID@11123312 : Code[20];
      ObjectType@11123311 : Option;
      ObjectID@11123310 : Integer;
      ReadPermission@11123309 : ' ,Yes,Indirect';
      InsertPermission@11123308 : ' ,Yes,Indirect';
      ModifyPermission@11123307 : ' ,Yes,Indirect';
      DeletePermission@11123306 : ' ,Yes,Indirect';
      ExecutePermission@11123305 : ' ,Yes,Indirect';
      RoleName@11123304 : Text[30];
      ObjectName@11123303 : Text[249];
    BEGIN
      Window.OPEN(Text11123303);

      Object.SETFILTER("Object ID",'%1..%2',11123301,11123499);
      IF Object.FINDSET THEN BEGIN
        RoleID := 'SC-SANA';
        RoleName := 'Sana Commerce User';
        InsertTenantUserRoles(RoleID,RoleName);
        ReadPermission := ReadPermission::Yes;
        InsertPermission := InsertPermission::Yes;
        ModifyPermission := ModifyPermission::Yes;
        DeletePermission := DeletePermission::Yes;
        ExecutePermission := ExecutePermission::Yes;
        REPEAT
          ObjectType := Object."Object Type";
          ObjectID := Object."Object ID";
          ObjectName := Object."Object Name";
          InsertTenantPermissions(RoleID,RoleName,ObjectType,ObjectID,ObjectName,ReadPermission,InsertPermission,
            ModifyPermission,DeletePermission,ExecutePermission);
        UNTIL Object.NEXT = 0;
      END;

      Object.SETRANGE("Object Type",Object."Object Type"::Table);
      Object.SETFILTER("Object ID",Text11123301);
      IF Object.FINDSET THEN BEGIN
        RoleID := 'SC-SANA';
        RoleName := 'Sana Commerce User';
        InsertTenantUserRoles(RoleID,RoleName);
        ReadPermission := ReadPermission::Yes;
        InsertPermission := InsertPermission::Yes;
        ModifyPermission := ModifyPermission::Yes;
        DeletePermission := DeletePermission::Yes;
        ExecutePermission := ExecutePermission::Yes;
        REPEAT
          ObjectType := Object."Object Type";
          ObjectID := Object."Object ID";
          ObjectName := Object."Object Name";
          InsertTenantPermissions(RoleID,RoleName,ObjectType,ObjectID,ObjectName,ReadPermission,InsertPermission,
            ModifyPermission,DeletePermission,ExecutePermission);
        UNTIL Object.NEXT = 0;
      END;

      Object.SETRANGE("Object Type",Object."Object Type"::Page);
      Object.SETFILTER("Object ID",Text11123304);
      IF Object.FINDSET THEN BEGIN
        RoleID := 'SC-SANA';
        RoleName := 'Sana Commerce User';
        InsertTenantUserRoles(RoleID,RoleName);
        ReadPermission := ReadPermission::Yes;
        InsertPermission := InsertPermission::Yes;
        ModifyPermission := ModifyPermission::Yes;
        DeletePermission := DeletePermission::Yes;
        ExecutePermission := ExecutePermission::Yes;
        REPEAT
          ObjectType := Object."Object Type";
          ObjectID := Object."Object ID";
          ObjectName := Object."Object Name";
          InsertTenantPermissions(RoleID,RoleName,ObjectType,ObjectID,ObjectName,ReadPermission,InsertPermission,
            ModifyPermission,DeletePermission,ExecutePermission);
        UNTIL Object.NEXT = 0;
      END;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE InsertTenantPermissions@11123310(RoleID@11123313 : Code[20];RoleName@11123311 : Text[30];ObjectType@11123310 : Option;ObjectID@11123309 : Integer;ObjectName@11123308 : Text[249];ReadPermission@11123307 : ' ,Yes,Indirect';InsertPermission@11123306 : Integer;ModifyPermission@11123305 : Integer;DeletePermission@11123304 : Integer;ExecutePermission@11123303 : Integer);
    VAR
      TenantPermission@11123312 : Record 2000000166;
    BEGIN
      TenantPermission.INIT;
      TenantPermission."Role ID" := RoleID;
      TenantPermission."Object Type" := ObjectType;
      TenantPermission."Object ID" := ObjectID;
      TenantPermission."Read Permission" := ReadPermission;
      TenantPermission."Insert Permission" := InsertPermission;
      TenantPermission."Modify Permission" := ModifyPermission;
      TenantPermission."Delete Permission" := DeletePermission;
      TenantPermission."Execute Permission" := ExecutePermission;
      IF NOT TenantPermission.INSERT THEN
        TenantPermission.MODIFY;
    END;

    PROCEDURE InsertTenantUserRoles@11123329(RoleID@11123303 : Code[20];Name@11123302 : Text[30]);
    VAR
      TenantUserRole@11123304 : Record 2000000165;
    BEGIN
      WITH TenantUserRole DO BEGIN
        INIT;
        "Role ID" := RoleID;
        Name := Name;
        IF NOT INSERT THEN
          MODIFY;
      END;
    END;

    PROCEDURE SetSanaTenantWebService@11123341() : Boolean;
    VAR
      TenantWebService@11123302 : Record 2000000168;
    BEGIN
      IF NOT SanaTenantWebserviceExist THEN BEGIN
        TenantWebService.INIT;
        TenantWebService."Object Type" := TenantWebService."Object Type"::Codeunit;
        TenantWebService."Object ID" := CODEUNIT::"SC - NAV Web Service";
        TenantWebService."Service Name" := 'SC_NAV_WebService';
        TenantWebService.Published := TRUE;
        TenantWebService.INSERT;
      END;
    END;

    PROCEDURE SetSanaWebService@11123327() : Boolean;
    VAR
      WebService@11123302 : Record 2000000076;
    BEGIN
      IF NOT SanaWebserviceExist THEN BEGIN
        WebService.INIT;
        WebService."Object Type" := WebService."Object Type"::Codeunit;
        WebService."Object ID" := CODEUNIT::"SC - NAV Web Service";
        WebService."Service Name" := 'SC_NAV_WebService';
        WebService.Published := TRUE;
        WebService.INSERT;
      END;
    END;

    LOCAL PROCEDURE SanaTenantWebserviceExist@11123342() : Boolean;
    VAR
      WebTenantService@11123302 : Record 2000000168;
    BEGIN
      IF WebTenantService.GET(WebTenantService."Object Type"::Codeunit,'SC_NAV_WebService') THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE SanaWebserviceExist@11123312() : Boolean;
    VAR
      WebService@11123302 : Record 2000000076;
    BEGIN
      IF WebService.GET(WebService."Object Type"::Codeunit,'SC_NAV_WebService') THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE DeleteSanaTenantWebService@11123331();
    VAR
      TenantWebService@11123302 : Record 2000000168;
    BEGIN
      IF TenantWebService.GET(TenantWebService."Object Type"::Codeunit,'SC_NAV_WebService') THEN
        TenantWebService.DELETE;
    END;

    LOCAL PROCEDURE DeleteSanaWebService@11123318();
    VAR
      WebService@11123302 : Record 2000000076;
    BEGIN
      IF WebService.GET(WebService."Object Type"::Codeunit,'SC_NAV_WebService') THEN
        WebService.DELETE;
    END;

    [EventSubscriber(Page,9300,OnOpenPageEvent)]
    LOCAL PROCEDURE OnOpenPageEvent9300@11123303(VAR Rec@11123302 : Record 36);
    VAR
      FilterHelper@11123303 : Codeunit 11123321;
    BEGIN
      FilterHelper.FilterSalesHeaderByDocState(Rec);
    END;

    [EventSubscriber(Page,9300,OnOpenPageEvent)]
    LOCAL PROCEDURE OnOpenPageEvent9305@11123313(VAR Rec@11123302 : Record 36);
    VAR
      FilterHelper@11123303 : Codeunit 11123321;
    BEGIN
      FilterHelper.FilterSalesHeaderByDocState(Rec);
    END;

    [EventSubscriber(Table,18,OnBeforeInsertEvent)]
    LOCAL PROCEDURE OnBeforeInsert18@11123314(VAR Rec@11123302 : Record 18;RunTrigger@11123303 : Boolean);
    VAR
      ChangeMgt@11123304 : Codeunit 11123324;
    BEGIN
      IF NOT RunTrigger THEN
        EXIT;

      ChangeMgt.OnBeforeCustomerInsert(Rec);
    END;

    [EventSubscriber(Table,36,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDelete36@11123315(VAR Rec@11123302 : Record 36;RunTrigger@11123303 : Boolean);
    VAR
      ChangeMgt@11123304 : Codeunit 11123324;
    BEGIN
      IF NOT RunTrigger THEN
        EXIT;

      ChangeMgt.DeleteSalesHeaderRelatedData(Rec);
    END;

    [EventSubscriber(Table,37,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDelete37@11123320(VAR Rec@11123302 : Record 37;RunTrigger@11123303 : Boolean);
    VAR
      ChangeMgt@11123304 : Codeunit 11123324;
    BEGIN
      IF NOT RunTrigger THEN
        EXIT;

      ChangeMgt.DeleteSalesLineRelatedData(Rec);
    END;

    BEGIN
    END.
  }
}

