OBJECT Codeunit 14000981 Export Document Management
{
  OBJECT-PROPERTIES
  {
    Date=06/28/17;
    Time=12:00:00 PM;
    Version List=SE0.60.13.02;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ShipperTypeMgt@1240030000 : Codeunit 14000711;
      PackageMgt@1240030004 : Codeunit 14000702;
      NameAndAddressMgt@1240030132 : Codeunit 14000709;
      Text001@1240030011 : TextConst 'ENU=No available documents';
      Text002@1240030012 : TextConst 'ENU=No document added';
      Text003@1240030013 : TextConst 'ENU=Document %1 already exists on %2 %3';
      Text006@1240030016 : TextConst 'ENU=%1 %2 does not match %3 %4 %5 %6.\Document not added to %7.';
      Text007@1240030017 : TextConst 'ENU=No items/resources to ship for Document %1\Document not added to %2 %3.';
      Text008@1240030018 : TextConst 'ENU=Document %1 %2 %3 must be %4';
      Text009@1240030019 : TextConst 'ENU=Document %1 missing from %2 %3.';
      Text010@1240030020 : TextConst 'ENU=No Export Document found for this Document.  Add Document to an existing Export Document?';
      Text013@1240030023 : TextConst 'ENU=Document %1 already exists on %2 %3';
      Text020@1240030030 : TextConst 'ENU=%1 %2 has been posted.';
      Text021@1240030031 : TextConst 'ENU=%1 %2 has been reopened to Amend the Filing.';
      Text022@1240030010 : TextConst 'ENU=Document(s) %1 on Export Document %2 missing from Multi-Document Packing';
      Text024@1240030008 : TextConst 'ENU=%1 has been imported.';
      Text025@1240030009 : TextConst 'ENU=All Export Document Valid. tables with existing import files have been imported.  Check the import date/time on the Export Doc. Validation Wksh.';
      Text026@1240030005 : TextConst 'ENU=%1 %2 exists with Posted Packages for %3 %4.  Do you want to continue?';
      ExportDocSetup@1240030002 : Record 14000991;
      ExportDocSetupRetrieved@1240030001 : Boolean;
      Text027@1240030003 : TextConst 'ENU=%1 %2 created for %3.';
      Text028@1240030006 : TextConst 'ENU=No %1 entered. No action taken.';
      Text031@1240020002 : TextConst 'ENU=Invalid %1.';
      Text032@1240020003 : TextConst 'ENU=Update cancelled by user.  No action taken.';

    PROCEDURE AddDocument@1240030000(VAR PackingControl@1240030000 : Record 14000717;VAR ExportDoc@1240030009 : Record 14000981;FromPacking@1240030010 : Boolean;ShippingSetup@1240030011 : Record 14000707;PackingStation@1240030012 : Record 14000709);
    VAR
      ExportSourceDoc@1240030006 : Record 14000982;
      ExportSourceLine@1240030005 : Record 14000983;
      PackingRule@1240030014 : Record 14000715;
      FastPackLineTmp@1240030013 : TEMPORARY Record 14000711;
      Country@1240030008 : Record 9;
      Package@1240030003 : Record 14000701;
      LineNo@1240030002 : Integer;
      Package2@1240030001 : Record 14000701;
      TotalValue@1240030004 : Decimal;
      TotalQuantity@1240030007 : Decimal;
      SourceDocFound@1240030015 : Boolean;
      ExportDocNo@1240030016 : Code[20];
    BEGIN
      GetExportDocSetup;

      ExportSourceDoc.RESET;
      ExportSourceDoc.SETCURRENTKEY("Source Type");
      ExportSourceDoc.SETRANGE("Source Type",PackingControl."Source Type");
      ExportSourceDoc.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      ExportSourceDoc.SETRANGE("Source ID",PackingControl."Source ID");
      IF ShippingSetup."Location Packing" THEN
        ExportSourceDoc.SETRANGE("Location Code",PackingStation."Location Code");

      SourceDocFound := FALSE;
      IF ExportSourceDoc.FIND('-') THEN BEGIN
        REPEAT
          IF NOT ExportSourceDoc.PostedPackagesExist AND
             NOT ExportSourceDoc.PostedMiscPackagesExist
          THEN BEGIN
            SourceDocFound := TRUE;
            ExportDocNo := ExportSourceDoc."Export Document No.";
          END;
        UNTIL (ExportSourceDoc.NEXT = 0) OR SourceDocFound;

        IF SourceDocFound THEN BEGIN
          MESSAGE(
            Text003,PackingControl."Source ID",ExportDoc.TABLECAPTION,ExportDocNo);
          EXIT;
        END;
      END;

      PackingControl.TransferFromSource2;

      IF PackingControl."Ship-to Country Code" <> '' THEN BEGIN
        Country.GET(PackingControl."Ship-to Country Code");
        Country.TESTFIELD("ISO 2 char Country Code");
      END;

      PackingRule.GetPackingRule(
        PackingControl."Ship-to Type",PackingControl."Ship-to No.",PackingControl."Ship-to Code");
      PackingControl."Multi Document No." := PackingControl."Source ID";
      PackingControl."Multi Document Package" := FALSE;

      PackageMgt.Initialize(PackingStation,ShippingSetup);
      PackageMgt.UpdateFastPackLines(PackingControl,FastPackLineTmp,PackingRule,FALSE,TRUE,FALSE,0,'','');

      IF FastPackLineTmp.FIND('-') THEN BEGIN
        TotalValue := 0;
        TotalQuantity := 0;

        IF ExportDocSetup."Export Doc. Weight As" <>
           ExportDocSetup."Export Doc. Weight As"::"Actual Weight"
        THEN BEGIN
          REPEAT
            TotalValue :=
              TotalValue +
              ROUND(
                (FastPackLineTmp."Value (Price)" / FastPackLineTmp.Quantity) *
                 FastPackLineTmp."Qty. to Ship",0.01);

            TotalQuantity := TotalQuantity + FastPackLineTmp."Qty. to Ship";
          UNTIL FastPackLineTmp.NEXT = 0;
          FastPackLineTmp.FIND('-');
        END;

        ExportDoc.LOCKTABLE;
        IF ExportDoc."Ship-to No." = '' THEN BEGIN
          ExportDoc."Ship-to No." := PackingControl."Ship-to No.";
          ExportDoc."Ship-to Code" := PackingControl."Ship-to Code";
          ExportDoc."Ship-to Type" := PackingControl."Ship-to Type";

          ExportDoc."Ship-to Name" := PackingControl."Ship-to Name";
          ExportDoc."Ship-to Name 2" := PackingControl."Ship-to Name 2";
          ExportDoc."Ship-to Address" := PackingControl."Ship-to Address";
          ExportDoc."Ship-to Address 2" := PackingControl."Ship-to Address 2";
          ExportDoc."Ship-to City" := PackingControl."Ship-to City";
          ExportDoc."Ship-to State" := PackingControl."Ship-to State";
          ExportDoc."Ship-to ZIP Code" := ShippingSetup.AdjustZIPCode(PackingControl."Ship-to ZIP Code");

          ExportDoc.VALIDATE("Ship-to Country Code",PackingControl."Ship-to Country Code");
          ExportDoc."Ship-to Contact" := PackingControl."Ship-to Contact";
          ExportDoc."Ship-to Phone No." := PackingControl."Ship-to Phone No.";
          ExportDoc."Ship-to Email Address" := PackingControl."Ship-to Email Address";
          ExportDoc.VALIDATE("Country of Destination",PackingControl."Ship-to Country Code");
          ExportDoc."Shipping Agent Code" := PackingControl."Shipping Agent Code";
          ExportDoc.VALIDATE("E-Ship Agent Service",PackingControl."E-Ship Agent Service");
          ExportDoc."Ship-to FTR Type" := ExportDocSetup."Default AES FTR Type";
          ExportDoc.MODIFY;
        END ELSE BEGIN
          IF ExportDoc."Shipping Agent Code" <> PackingControl."Shipping Agent Code" THEN BEGIN
             MESSAGE(
               Text006,ExportDoc.FIELDCAPTION("Shipping Agent Code"),
               PackingControl."Shipping Agent Code",ExportSourceDoc.FIELDCAPTION("Export Document No."),
               PackingControl."Export Document No.",ExportDoc.FIELDCAPTION("Shipping Agent Code"),
               ExportDoc."Shipping Agent Code",ExportDoc.TABLECAPTION);
             EXIT;
          END;

          IF ExportDoc."E-Ship Agent Service" <> PackingControl."E-Ship Agent Service" THEN BEGIN
             MESSAGE(
               Text006,ExportDoc.FIELDCAPTION("E-Ship Agent Service"),
               PackingControl."E-Ship Agent Service",ExportSourceDoc.FIELDCAPTION("Export Document No."),
               PackingControl."Export Document No.",ExportDoc.FIELDCAPTION("E-Ship Agent Service"),
               ExportDoc."E-Ship Agent Service",ExportDoc.TABLECAPTION);
             EXIT;
          END;
        END;

        IF NOT FromPacking THEN BEGIN
          Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          Package.SETRANGE("Source Type",PackingControl."Source Type");
          Package.SETRANGE("Source Subtype",PackingControl."Source Subtype");
          Package.SETRANGE("Source ID",PackingControl."Source ID");

          IF Package.FIND('-') THEN
            REPEAT
              Package."Export Document No." := ExportDoc."No.";
              Package.MODIFY;
              IF Package."Multi Document Package" AND
                 Package2.GET(Package."Original Package No.")
              THEN
                IF Package2."Export Document No." <> ExportDoc."No." THEN BEGIN
                  Package2."Export Document No." := ExportDoc."No.";
                  Package2.MODIFY;
                END;
            UNTIL Package.NEXT = 0;
        END;

        ExportSourceDoc.INIT;
        ExportSourceDoc."Export Document No." := ExportDoc."No.";
        ExportSourceDoc."Source Type" := PackingControl."Source Type";
        ExportSourceDoc."Source Subtype" := PackingControl."Source Subtype";
        ExportSourceDoc."Source ID" := PackingControl."Source ID";
        IF ShippingSetup."Location Packing" THEN
          ExportSourceDoc."Location Code" := PackingStation."Location Code";
        ExportSourceDoc.INSERT;

        ExportSourceLine.LOCKTABLE;
        ExportSourceLine.RESET;
        ExportSourceLine.SETRANGE("Export Document No.",ExportDoc."No.");
        IF ExportSourceLine.FIND('+') THEN
          LineNo := ExportSourceLine."Line No." + 1000
        ELSE
          LineNo := 1000;

        REPEAT
          ExportSourceLine.INIT;
          ExportSourceLine."Export Document No." := ExportDoc."No.";
          ExportSourceLine."Line No." := LineNo;
          ExportSourceLine.INSERT(TRUE);
          LineNo := LineNo + 1000;

          CASE FastPackLineTmp.Type OF
            FastPackLineTmp.Type::"Account (G/L)":
              ExportSourceLine.Type := ExportSourceLine.Type::"Account (G/L)";
            FastPackLineTmp.Type::Item:
              ExportSourceLine.Type := ExportSourceLine.Type::Item;
            FastPackLineTmp.Type::Resource:
              ExportSourceLine.Type := ExportSourceLine.Type::Resource;
            ELSE
              ExportSourceLine.Type := ExportSourceLine.Type::" ";
          END;

          ExportSourceLine.VALIDATE("No.",FastPackLineTmp."No.");
          ExportSourceLine."Source Unit of Measure" := FastPackLineTmp."Unit of Measure Code";
          ExportSourceLine.VALIDATE("Source Quantity",FastPackLineTmp."Qty. to Ship");
          ExportSourceLine."Value USD" :=
            ROUND(
              (FastPackLineTmp."Value (Price)" / FastPackLineTmp.Quantity) *
               FastPackLineTmp."Qty. to Ship",0.01);

          CASE ExportDocSetup."Export Doc. Weight As" OF
            ExportDocSetup."Export Doc. Weight As"::"Actual Weight":
              BEGIN
                ExportSourceLine."Source Net Weight" :=
                  FastPackLineTmp."Net Weight" * ExportSourceLine."Source Quantity (Base)";
                ExportSourceLine."Source Gross Weight" :=
                  FastPackLineTmp."Gross Weight" * ExportSourceLine."Source Quantity (Base)";
                ExportSourceLine."Source Dimmed Weight" :=
                  FastPackLineTmp."Dimmed Weight" * ExportSourceLine."Source Quantity (Base)";

                ShippingSetup.TESTFIELD("Actual Weight as");
                CASE ShippingSetup."Actual Weight as" OF
                  ShippingSetup."Actual Weight as"::"Net Weight":
                    ExportSourceLine.VALIDATE(Weight,ExportSourceLine."Source Net Weight");
                  ShippingSetup."Actual Weight as"::"Gross Weight":
                    ExportSourceLine.VALIDATE(Weight,ExportSourceLine."Source Gross Weight");
                  ShippingSetup."Actual Weight as"::"Dimmed Weight":
                   ExportSourceLine.VALIDATE(Weight,ExportSourceLine."Source Dimmed Weight");
                END;
              END;
            ExportDocSetup."Export Doc. Weight As"::"Package Weight Equally":
              BEGIN
                ExportSourceLine.VALIDATE(
                  Weight,
                  (ExportDocSetup."Export Doc Package Weight"/TotalQuantity) *
                  ExportSourceLine."Source Quantity (Base)");
              END;
            ExportDocSetup."Export Doc. Weight As"::"Package Weight by Value":
              BEGIN
                IF TotalValue = 0 THEN
                  ExportSourceLine.VALIDATE(Weight,ExportDocSetup."Export Doc Package Weight")
                ELSE
                  ExportSourceLine.VALIDATE(Weight,
                    (ExportDocSetup."Export Doc Package Weight"/TotalValue) *
                    ExportSourceLine."Value USD");
              END;
          END;

          IF ExportSourceLine.Description = '' THEN
            ExportSourceLine.Description := COPYSTR(FastPackLineTmp.Description,1,
              MAXSTRLEN(ExportSourceLine.Description));
          ExportSourceLine."Variant Code" := FastPackLineTmp."Variant Code";

          ExportSourceLine."Source Type" := PackingControl."Source Type";
          ExportSourceLine."Source SubType" := PackingControl."Source Subtype";
          ExportSourceLine."Source ID" := PackingControl."Source ID";

          ExportSourceLine.MODIFY(TRUE);
        UNTIL FastPackLineTmp.NEXT = 0;

        ExportDoc.UpdateSummaryLines;
      END ELSE
        MESSAGE(
          Text007,PackingControl."Source ID", ExportSourceDoc.FIELDCAPTION("Export Document No."),
          PackingControl."Export Document No.");
    END;

    PROCEDURE AddMiscPackage@1240030015(VAR ExportDoc@1240030000 : Record 14000981;SourceType@1240030001 : Integer;SourceSubType@1240030002 : '0,1,2,3,4,5,6,7,8,9,10';SourceID@1240030007 : Code[20];FromPacking@1240030012 : Boolean;ShippingSetup@1240030003 : Record 14000707;PackingStation@1240030009 : Record 14000709);
    VAR
      ExportSourceDoc@1240030006 : Record 14000982;
      ExportSourceLine@1240030005 : Record 14000983;
      Package@1240030017 : Record 14000701;
      PackageLine@1240030014 : Record 14000702;
      Country@1240030008 : Record 9;
      LineNo@1240030004 : Integer;
      TotalValue@1240030010 : Decimal;
      TotalQuantity@1240030011 : Integer;
    BEGIN
      GetExportDocSetup;
      ExportDoc.TESTFIELD(Manual,FALSE);
      ExportDoc.TESTFIELD(Submitted,FALSE);
      ExportDoc.TESTFIELD(Posted,FALSE);

      IF SourceID <> '' THEN
        Package.GET(SourceID)
      ELSE BEGIN
        Package.RESET;
        Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        Package.SETRANGE("Source Type",0);
        Package.SETRANGE(Closed,FALSE);
        Package.SETRANGE("Export Document No.",'');

        IF ExportDoc."Shipping Agent Code" <> '' THEN BEGIN
          Package.SETRANGE("Shipping Agent Code",ExportDoc."Shipping Agent Code");
          Package.SETRANGE("Shipping Agent Service",ExportDoc."E-Ship Agent Service");
        END;

        IF NOT Package.FIND('-') THEN BEGIN
          MESSAGE(Text001);
          EXIT;
        END;

        IF NOT (PAGE.RUNMODAL(PAGE::Packages,Package) = ACTION::LookupOK) THEN BEGIN
          MESSAGE(Text002);
          EXIT;
        END;
      END;

      ExportSourceDoc.RESET;
      ExportSourceDoc.SETCURRENTKEY("Source Type");
      ExportSourceDoc.SETRANGE("Source Type",DATABASE::Package);
      ExportSourceDoc.SETRANGE("Source Subtype",0);
      ExportSourceDoc.SETRANGE("Source ID",Package."No.");
      IF ShippingSetup."Location Packing" THEN
        ExportSourceDoc.SETRANGE("Location Code",PackingStation."Location Code");

      IF ExportSourceDoc.FIND('-') THEN BEGIN
        MESSAGE(Text003,Package."No.",ExportDoc.TABLECAPTION,ExportSourceDoc."Export Document No.");
        EXIT;
      END;

      IF Package."Ship-to Country Code" <> '' THEN BEGIN
        Country.GET(Package."Ship-to Country Code");
        Country.TESTFIELD("ISO 2 char Country Code");
      END;

      PackageLine.RESET;
      PackageLine.SETRANGE("Package No.",Package."No.");
      PackageLine.SETFILTER(Quantity,'>%1',0);

      IF PackageLine.FIND('-') THEN BEGIN
        TotalValue := 0;
        TotalQuantity := 0;
        IF ExportDocSetup."Export Doc. Weight As" <>
           ExportDocSetup."Export Doc. Weight As"::"Actual Weight"
        THEN BEGIN
          REPEAT
            TotalValue := TotalValue + PackageLine."Value (Price)";
            TotalQuantity := TotalQuantity + PackageLine.Quantity;
          UNTIL PackageLine.NEXT = 0;
          PackageLine.FIND('-');
        END;

        IF ExportDoc."Ship-to No." = '' THEN BEGIN
          ExportDoc."Ship-to No." := Package."Ship-to No.";
          ExportDoc."Ship-to Code" := Package."Ship-to Code";
          ExportDoc."Ship-to Type" := Package."Ship-to Type";

          ExportDoc."Ship-to Name" := Package."Ship-to Name";
          ExportDoc."Ship-to Name 2" := Package."Ship-to Name 2";
          ExportDoc."Ship-to Address" := Package."Ship-to Address";
          ExportDoc."Ship-to Address 2" := Package."Ship-to Address 2";
          ExportDoc."Ship-to City" := Package."Ship-to City";
          ExportDoc."Ship-to State" := Package."Ship-to State";
          ExportDoc."Ship-to ZIP Code" := Package."Ship-to ZIP Code";

          ExportDoc.VALIDATE("Ship-to Country Code",Package."Ship-to Country Code");
          ExportDoc."Ship-to Contact" := Package."Ship-to Contact";
          ExportDoc."Ship-to Phone No." := Package."Ship-to Phone No.";
          ExportDoc."Ship-to Email Address" := Package."Ship-to Email Address";
          ExportDoc.VALIDATE("Country of Destination",Package."Ship-to Country Code");
          ExportDoc.VALIDATE("Shipping Agent Code",Package."Shipping Agent Code");
          ExportDoc."E-Ship Agent Service" := Package."Shipping Agent Service";
          ExportDoc."Ship-to FTR Type" := ExportDocSetup."Default AES FTR Type";
          ExportDoc.MODIFY;
        END ELSE BEGIN
          IF ExportDoc."Shipping Agent Code" <> Package."Shipping Agent Code" THEN BEGIN
             MESSAGE(
               Text006,ExportDoc.FIELDCAPTION("Shipping Agent Code"),
               Package."Shipping Agent Code",ExportSourceDoc.FIELDCAPTION("Export Document No."),
               ExportDoc."No.",ExportDoc.FIELDCAPTION("Shipping Agent Code"),
               ExportDoc."Shipping Agent Code",ExportDoc.TABLECAPTION);
             EXIT;
          END;

          IF ExportDoc."E-Ship Agent Service" <> Package."Shipping Agent Service" THEN BEGIN
             MESSAGE(
               Text006,ExportDoc.FIELDCAPTION("E-Ship Agent Service"),
               Package."Shipping Agent Service",ExportSourceDoc.FIELDCAPTION("Export Document No."),
               ExportDoc."No.",ExportDoc.FIELDCAPTION("E-Ship Agent Service"),
               ExportDoc."E-Ship Agent Service",ExportDoc.TABLECAPTION);
             EXIT;
          END;
        END;

        ExportSourceDoc.INIT;
        ExportSourceDoc."Export Document No." := ExportDoc."No.";
        ExportSourceDoc."Source Type" := DATABASE::Package;
        ExportSourceDoc."Source Subtype" := 0;
        ExportSourceDoc."Source ID" := Package."No.";
        IF ShippingSetup."Location Packing" THEN
          ExportSourceDoc."Location Code" := Package."Location Code";

        ExportSourceDoc.INSERT;

        IF NOT FromPacking THEN BEGIN
          Package."Export Document No." := ExportDoc."No.";
          Package.MODIFY;
        END;

        ExportSourceLine.LOCKTABLE;
        ExportSourceLine.RESET;
        ExportSourceLine.SETRANGE("Export Document No.",ExportDoc."No.");
        IF ExportSourceLine.FIND('+') THEN
          LineNo := ExportSourceLine."Line No." + 1000
        ELSE
          LineNo := 1000;

        REPEAT
          ExportSourceLine.INIT;
          ExportSourceLine."Export Document No." := ExportDoc."No.";
          ExportSourceLine."Line No." := LineNo;
          ExportSourceLine.INSERT(TRUE);
          LineNo := LineNo + 1000;

          CASE PackageLine.Type OF
            PackageLine.Type::"Account (G/L)":
              ExportSourceLine.Type := ExportSourceLine.Type::"Account (G/L)";
            PackageLine.Type::Item:
              ExportSourceLine.Type := ExportSourceLine.Type::Item;
            PackageLine.Type::Resource:
              ExportSourceLine.Type := ExportSourceLine.Type::Resource;
            ELSE
              ExportSourceLine.Type := ExportSourceLine.Type::" ";
          END;

          ExportSourceLine.VALIDATE("No.",PackageLine."No.");
          IF ExportSourceLine.Description = '' THEN
            ExportSourceLine.Description := PackageLine.Description;
          ExportSourceLine."Variant Code" := PackageLine."Variant Code";

          ExportSourceLine."Source Type" := DATABASE::Package;
          ExportSourceLine."Source SubType" := 0;
          ExportSourceLine."Source ID" := Package."No.";

          ExportSourceLine."Value USD" := PackageLine."Value (Price)";
          ExportSourceLine."Source Unit of Measure" := PackageLine."Unit of Measure Code";
          ExportSourceLine.VALIDATE("Source Quantity",PackageLine.Quantity);

          CASE ExportDocSetup."Export Doc. Weight As" OF
            ExportDocSetup."Export Doc. Weight As"::"Actual Weight":
              BEGIN
                ExportSourceLine."Source Net Weight" := PackageLine."Net Weight";
                ExportSourceLine."Source Gross Weight" := PackageLine."Gross Weight";
                ExportSourceLine."Source Dimmed Weight" := PackageLine."Dim. Weight";

                ShippingSetup.TESTFIELD("Actual Weight as");
                CASE ShippingSetup."Actual Weight as" OF
                  ShippingSetup."Actual Weight as"::"Gross Weight":
                    ExportSourceLine.VALIDATE(Weight,ExportSourceLine."Source Gross Weight");
                  ShippingSetup."Actual Weight as"::"Net Weight":
                    ExportSourceLine.VALIDATE(Weight,ExportSourceLine."Source Net Weight");
                  ShippingSetup."Actual Weight as"::"Dimmed Weight":
                    ExportSourceLine.VALIDATE(Weight,ExportSourceLine."Source Dimmed Weight");
                END;
              END;
            ExportDocSetup."Export Doc. Weight As"::"Package Weight Equally":
              BEGIN
                ExportSourceLine.VALIDATE(
                  Weight,
                  (ExportDocSetup."Export Doc Package Weight"/TotalQuantity) *
                  ExportSourceLine."Source Quantity (Base)");
              END;
            ExportDocSetup."Export Doc. Weight As"::"Package Weight by Value":
              BEGIN
                ExportSourceLine.VALIDATE(Weight,
                  (ExportDocSetup."Export Doc Package Weight"/TotalValue) *
                  ExportSourceLine."Value USD");
              END;
          END;

          ExportSourceLine.MODIFY(TRUE);
        UNTIL PackageLine.NEXT = 0;

        ExportDoc.UpdateSummaryLines;
      END ELSE
        MESSAGE(
          Text007,Package."No.", ExportSourceDoc.FIELDCAPTION("Export Document No."),ExportDoc."No.");
    END;

    PROCEDURE CheckExportDocMultiDoc@1240030006(PackingControl@1240030000 : Record 14000717;NewOrderNo@1240030001 : Code[20];ShippingSetup@1240030004 : Record 14000707;PackingStation@1240030005 : Record 14000709);
    VAR
      ExportSourceDoc@1240030002 : Record 14000982;
      SourceDocFound@1240030003 : Boolean;
      ExportDocNo@1240030006 : Code[20];
    BEGIN
      ExportSourceDoc.RESET;
      ExportSourceDoc.INIT;
      ExportSourceDoc.SETRANGE("Source Type",PackingControl."Source Type");
      ExportSourceDoc.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      ExportSourceDoc.SETRANGE("Source ID",NewOrderNo);
      IF ShippingSetup."Location Packing" THEN
        ExportSourceDoc.SETRANGE("Location Code",PackingStation."Location Code");

      SourceDocFound := FALSE;
      IF ExportSourceDoc.FIND('-') THEN
        REPEAT
          IF NOT ExportSourceDoc.PostedPackagesExist AND NOT ExportSourceDoc.PostedMiscPackagesExist
          THEN BEGIN
            SourceDocFound := TRUE;
            ExportDocNo := ExportSourceDoc."Export Document No.";
          END;
        UNTIL (ExportSourceDoc.NEXT = 0) OR SourceDocFound;

      IF SourceDocFound THEN BEGIN
        IF ExportDocNo <> PackingControl."Export Document No." THEN
          ERROR(
            Text008,NewOrderNo,ExportSourceDoc.FIELDCAPTION("Export Document No."),
            ExportDocNo,PackingControl."Export Document No.");
      END ELSE
        IF PackingControl."Export Document No." <> '' THEN
          ERROR(
            Text009,NewOrderNo,ExportSourceDoc.FIELDCAPTION("Export Document No."),
            PackingControl."Export Document No.");
    END;

    PROCEDURE ViewExportDoc@1240031003(ExportDocNo@1240030000 : Code[20]);
    VAR
      ExportDoc@1240030002 : Record 14000981;
    BEGIN
      ExportDoc.GET(ExportDocNo);
      ExportDoc.FILTERGROUP(2);
      ExportDoc.RESET;
      ExportDoc.SETRECFILTER;
      ExportDoc.FILTERGROUP(0);

      IF ExportDoc.Posted THEN
        PAGE.RUNMODAL(PAGE::"Export Posted Document",ExportDoc)
      ELSE
        IF ExportDoc.Manual THEN
          PAGE.RUNMODAL(PAGE::"Export Manual Document",ExportDoc)
        ELSE
          PAGE.RUNMODAL(PAGE::"Export Document",ExportDoc);
    END;

    PROCEDURE CreateSelectExportDoc@1240031005(VAR PackingControl@1240030000 : Record 14000717;CurrentPackageNo@1240030013 : Code[20];Create@1240030009 : Boolean;FromPacking@1240030012 : Boolean;ShippingSetup@1240030002 : Record 14000707;PackingStation@1240030004 : Record 14000709) : Boolean;
    VAR
      ExportSourceDoc@1240030003 : Record 14000982;
      Package@1240030008 : Record 14000701;
      ExportDoc@1240030011 : Record 14000981;
      TempDocNos@1240030005 : Code[250];
      i@1240030006 : Integer;
      MissingDocNos@1240030007 : Code[250];
      ShippingAgent@1240030001 : Record 291;
      PackingControl2@1240030010 : Record 14000717;
      ExportDocRequired@1240030014 : Boolean;
      SourceDocFound@1240030015 : Boolean;
      ExportDocNo@1240030016 : Code[20];
    BEGIN
      ExportSourceDoc.RESET;
      ExportSourceDoc.SETRANGE("Source Type",PackingControl."Source Type");
      ExportSourceDoc.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      IF ShippingSetup."Location Packing" THEN
        ExportSourceDoc.SETRANGE("Location Code",PackingStation."Location Code");

      IF PackingControl."Multi Document Package" THEN BEGIN
        ExportSourceDoc.SETFILTER("Source ID",PackingControl."Multi Document No.");
        TempDocNos := PackingControl."Multi Document No.";
      END ELSE BEGIN
        ExportSourceDoc.SETRANGE("Source ID",PackingControl."Source ID");
        TempDocNos := PackingControl."Source ID";
      END;

      SourceDocFound := FALSE;
      IF ExportSourceDoc.FIND('-') THEN
        REPEAT
          IF NOT ExportSourceDoc.PostedPackagesExist AND NOT ExportSourceDoc.PostedMiscPackagesExist
          THEN BEGIN
            SourceDocFound := TRUE;
            ExportDocNo := ExportSourceDoc."Export Document No.";
          END;
        UNTIL (ExportSourceDoc.NEXT = 0) OR SourceDocFound;

      IF SourceDocFound THEN BEGIN
        PackingControl."Export Document No." := ExportDocNo;

        ExportSourceDoc.SETRANGE("Source ID");
        ExportSourceDoc.SETRANGE("Export Document No.",PackingControl."Export Document No.");
        ExportSourceDoc.FIND('-');
        REPEAT
          i := STRPOS(TempDocNos,ExportSourceDoc."Source ID");
          IF i > 0 THEN
            TempDocNos := DELSTR(TempDocNos, i ,STRLEN(ExportSourceDoc."Source ID"))
          ELSE
            IF MissingDocNos = '' THEN
              MissingDocNos := ExportSourceDoc."Source ID"
            ELSE
              MissingDocNos := MissingDocNos + '|' + ExportSourceDoc."Source ID";
        UNTIL ExportSourceDoc.NEXT = 0;

        IF MissingDocNos <> '' THEN BEGIN
          PackingControl."Error Message" :=
            STRSUBSTNO(Text022,MissingDocNos,PackingControl."Export Document No.");
          EXIT(FALSE);
        END;

        IF ExportDoc.GET(PackingControl."Export Document No.") THEN
          IF Create AND
             (ExportDoc."ITN No." = '') AND
             FromPacking
          THEN
            IF ExportDoc.Recreate THEN
              CreateSelectExportDoc(
                PackingControl,CurrentPackageNo,Create,FromPacking,ShippingSetup,PackingStation);
      END ELSE
        IF Create THEN BEGIN
          IF FromPacking THEN BEGIN
            IF CurrentPackageNo = '' THEN
              ExportDocRequired := TRUE
            ELSE BEGIN
              IF ShippingAgent.GET(PackingControl."Shipping Agent Code") THEN;
              Package.GET(CurrentPackageNo);
              IF ShipperTypeMgt.ExportDocRequired(Package,ShippingAgent,ShippingSetup) THEN
                ExportDocRequired := TRUE;
            END;
          END;

          IF NOT FromPacking OR
             ExportDocRequired
          THEN BEGIN
            PackingControl2 := PackingControl;
            CreateExportDoc(PackingControl2,FromPacking,ShippingSetup,PackingStation);
          END;

          IF PackingControl2."Export Document No." <> '' THEN BEGIN
            PackingControl."Export Document No." := PackingControl2."Export Document No.";
            COMMIT;
          END ELSE
            EXIT(FALSE);
        END;

      IF Create AND
         NOT FromPacking AND
         NOT PackingStation."Do Not Show Exp Doc On Create"
      THEN
        ViewExportDoc(PackingControl."Export Document No.");

      EXIT(TRUE);
    END;

    PROCEDURE CreateExportDoc@1240030001(VAR PackingControl@1240030000 : Record 14000717;FromPacking@1240030006 : Boolean;ShippingSetup@1240030010 : Record 14000707;PackingStation@1240030011 : Record 14000709);
    VAR
      ExportDoc@1240030004 : Record 14000981;
      ExportSourceDoc@1240030005 : Record 14000982;
      SalesHeader@1240030001 : Record 36;
      PurchHeader@1240030002 : Record 38;
      TransferHeader@1240030003 : Record 5740;
      Package@1240030007 : Record 14000701;
      PostedPackage@1240030008 : Record 14000704;
      ExportDoc2@1240030012 : Record 14000981;
      DocFound@1240030009 : Boolean;
      ExportDocNo@1240030013 : Code[20];
    BEGIN
      IF NOT FromPacking AND
         (PackingControl."Export Document No." = '')
      THEN BEGIN
        ExportDoc2.RESET;
        ExportDoc2.SETCURRENTKEY("Ship-to Type","Ship-to No.","Ship-to Code",Carrier);
        ExportDoc2.SETRANGE("Shipping Agent Code",PackingControl."Shipping Agent Code");
        ExportDoc2.SETRANGE("E-Ship Agent Service",PackingControl."E-Ship Agent Service");
        ExportDoc2.SETRANGE(Submitted,FALSE);
        ExportDoc2.SETRANGE("ITN No.",'');

        IF ShippingSetup."Location Packing" THEN
          ExportDoc2.SETRANGE("Location Code",PackingStation."Location Code");
        ExportDoc2.SETRANGE(Posted,FALSE);

        DocFound := FALSE;
        IF ExportDoc2.FIND('-') THEN
          REPEAT
            IF NOT ExportDoc2.PostedPackagesExist THEN BEGIN
              DocFound := TRUE;
              ExportDocNo := ExportDoc2."No.";
            END;
          UNTIL (ExportDoc2.NEXT = 0) OR DocFound;

        IF DocFound THEN
          IF CONFIRM(Text010,FALSE) THEN BEGIN
            ExportDoc2."No." := ExportDocNo;
            IF PAGE.RUNMODAL(PAGE::"Export Documents",ExportDoc2,ExportDoc2."No.") = ACTION::LookupOK THEN
              PackingControl."Export Document No." := ExportDoc2."No.";
          END;
      END;

      IF PackingControl."Export Document No." = '' THEN BEGIN
        ExportDoc.INIT;
        ExportDoc.INSERT(TRUE);
        PackingControl."Export Document No." := ExportDoc."No.";
      END ELSE
        ExportDoc.GET(PackingControl."Export Document No.");

      CASE PackingControl."Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader.RESET;
            SalesHeader.SETRANGE("Document Type",PackingControl."Source Subtype");
            IF PackingControl."Multi Document Package" THEN
              SalesHeader.SETFILTER("No.",PackingControl."Multi Document No.")
            ELSE
              SalesHeader.SETRANGE("No.",PackingControl."Source ID");

            IF SalesHeader.FIND('-') THEN
              REPEAT
                IF NOT ExportSourceDoc.GET(
                         PackingControl."Export Document No.",36,SalesHeader."Document Type",
                         SalesHeader."No.")
                THEN BEGIN
                  PackingControl."Source ID" := SalesHeader."No.";
                  AddDocument(PackingControl,ExportDoc,FromPacking,ShippingSetup,PackingStation);
                END;
              UNTIL SalesHeader.NEXT = 0;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader.RESET;
            PurchHeader.SETRANGE("Document Type",PackingControl."Source Subtype");
            IF PackingControl."Multi Document Package" THEN
              PurchHeader.SETFILTER("No.",PackingControl."Multi Document No.")
            ELSE
              PurchHeader.SETRANGE("No.",PackingControl."Source ID");

            IF PurchHeader.FIND('-') THEN
              REPEAT
                IF NOT ExportSourceDoc.GET(
                         PackingControl."Export Document No.",38,PurchHeader."Document Type",
                         PurchHeader."No.")
                THEN BEGIN
                  PackingControl."Source ID" := PurchHeader."No.";
                  AddDocument(PackingControl,ExportDoc,FromPacking,ShippingSetup,PackingStation);
                END;
              UNTIL PurchHeader.NEXT = 0;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferHeader.RESET;
            IF PackingControl."Multi Document Package" THEN
              TransferHeader.SETFILTER("No.",PackingControl."Multi Document No.")
            ELSE
              TransferHeader.SETRANGE("No.",PackingControl."Source ID");

            IF TransferHeader.FIND('-') THEN
              REPEAT
                IF NOT ExportSourceDoc.GET(
                         PackingControl."Export Document No.",5740,0,TransferHeader."No.")
                THEN BEGIN
                  PackingControl."Source ID" := TransferHeader."No.";
                  AddDocument(PackingControl,ExportDoc,FromPacking,ShippingSetup,PackingStation);
                END;
              UNTIL TransferHeader.NEXT = 0;
          END;
        DATABASE::Package:
          IF NOT ExportSourceDoc.GET(
                   PackingControl."Export Document No.",DATABASE::Package,0,PackingControl."Source ID")
          THEN
            AddMiscPackage(
              ExportDoc,DATABASE::Package,0,PackingControl."Source ID",FromPacking,ShippingSetup,
              PackingStation);
        DATABASE::"Posted Package":
          IF NOT ExportSourceDoc.GET(
                   PackingControl."Export Document No.",DATABASE::"Posted Package",0,
                   PackingControl."Source ID")
          THEN
            AddPostedPackage(
              ExportDoc,DATABASE::"Posted Package",0,PackingControl."Source ID",ShippingSetup,
              PackingStation);
        ELSE
          PackingControl.ErrorUnknownSourceType2;
      END;

      ExportDoc."Created From Packing" := FromPacking;

      IF FromPacking OR
         (ExportDoc."Transport. Ref. No." = '')
      THEN BEGIN
        IF PackingControl."Source Type" = DATABASE::"Posted Package" THEN BEGIN
          PostedPackage.SETRANGE("Export Document No.",ExportDoc."No.");
          PostedPackage.SETRANGE("Package No.",1);
          PostedPackage.SETRANGE("Original Package No.",'');
          IF PostedPackage.FIND('-') THEN BEGIN
            IF NOT (ExportDoc."Mode of Transportation" IN ['10','11','12']) THEN  // Not a Vessel shipment
              ExportDoc."Transport. Ref. No." :=
                ShipperTypeMgt.GetPostedMasterWaybillNo(PostedPackage."No.");
            IF ShipperTypeMgt.UpdateExportDocPostedSoldTo(ExportDoc,PostedPackage."No.") THEN ;
          END;
        END ELSE BEGIN
          Package.SETRANGE("Export Document No.",ExportDoc."No.");
          Package.SETRANGE("Package No.",1);
          Package.SETRANGE("Original Package No.",'');
          IF Package.FIND('-') THEN BEGIN
            IF NOT (ExportDoc."Mode of Transportation" IN ['10','11','12']) THEN  // Not a Vessel shipment
              ExportDoc."Transport. Ref. No." := ShipperTypeMgt.GetMasterWaybillNo(Package."No.");
            IF ShipperTypeMgt.UpdateExportDocSoldTo(ExportDoc,Package."No.") THEN  ;
          END;
        END;
      END;

      IF FromPacking THEN
        ExportDoc."Departure Date" := WORKDATE;
      ExportDoc.MODIFY;
    END;

    PROCEDURE AddFromOrder@1240030014(SourceType@1240030000 : Integer;SourceSubType@1240030001 : Integer;SourceID@1240030002 : Code[20]);
    VAR
      ExportDoc@1240030006 : Record 14000981;
      ExportSourceDoc@1240030005 : Record 14000982;
      PackingControl@1240030009 : Record 14000717;
      Package@1240030003 : Record 14000701;
      PostedPackage@1240030007 : Record 14000704;
      ShippingSetup@1240030008 : Record 14000707;
      PackingStation@1240030010 : Record 14000709;
      SourceDocFound@1240030004 : Boolean;
      ExportDocNo@1240030011 : Code[20];
    BEGIN
      ShippingSetup.GET;
      PackingStation.GetPackingStation;

      CASE SourceType OF
        DATABASE::Package:
          BEGIN
            Package.GET(SourceID);
            Package.TESTFIELD(Closed,FALSE);
          END;
        DATABASE::"Posted Package":
          BEGIN
            PostedPackage.GET(SourceID);
            PostedPackage.TESTFIELD(Closed);
            IF ExportDoc.GET(PostedPackage."Export Document No.") THEN
              EXIT;
            ExportSourceDoc.RESET;
            ExportSourceDoc.SETRANGE("Source Type",PostedPackage."Source Type");
            ExportSourceDoc.SETRANGE("Source Subtype",PostedPackage."Source Subtype");
            ExportSourceDoc.SETRANGE("Source ID",PostedPackage."Source ID");

            SourceDocFound := FALSE;
            IF ExportSourceDoc.FIND('-') THEN
              REPEAT
                IF ExportSourceDoc.PostedPackagesExist OR ExportSourceDoc.PostedMiscPackagesExist
                THEN BEGIN
                  SourceDocFound := TRUE;
                  ExportDocNo := ExportSourceDoc."Export Document No.";
                END;
              UNTIL (ExportSourceDoc.NEXT = 0) OR SourceDocFound;

            IF SourceDocFound THEN
              IF NOT CONFIRM(
                       STRSUBSTNO(
                         Text026,ExportSourceDoc.FIELDCAPTION("Export Document No."),ExportDocNo,
                         ExportSourceDoc.FIELDCAPTION("Source ID"),ExportSourceDoc."Source ID"),
                       FALSE)
              THEN
                EXIT;
          END;
        ELSE
          PackingControl.TestReleased(SourceType,SourceSubType,SourceID,TRUE);
      END;

      ExportSourceDoc.RESET;
      ExportSourceDoc.SETRANGE("Source Type",SourceType);
      ExportSourceDoc.SETRANGE("Source Subtype",SourceSubType);
      ExportSourceDoc.SETRANGE("Source ID",SourceID);
      IF ShippingSetup."Location Packing" THEN
        ExportSourceDoc.SETRANGE("Location Code",PackingStation."Location Code");

      SourceDocFound := FALSE;
      IF ExportSourceDoc.FIND('-') THEN
        IF (SourceType IN [DATABASE::Package,DATABASE::"Posted Package"]) THEN
          SourceDocFound := TRUE
        ELSE
          REPEAT
            IF NOT ExportSourceDoc.PostedPackagesExist AND NOT ExportSourceDoc.PostedMiscPackagesExist
            THEN BEGIN
              SourceDocFound := TRUE;
              ExportDocNo := ExportSourceDoc."Export Document No.";
            END;
          UNTIL (ExportSourceDoc.NEXT = 0) OR SourceDocFound;

      IF SourceDocFound THEN
        ERROR(Text013,SourceID,ExportSourceDoc.FIELDCAPTION("Export Document No."),ExportDocNo)
      ELSE BEGIN
        PackingControl."Source Type" := SourceType;
        PackingControl."Source Subtype" := SourceSubType;
        PackingControl."Source ID"  := SourceID;

        IF NOT (SourceType IN [DATABASE::Package,DATABASE::"Posted Package"]) THEN
          PackingControl.TransferFromSource2
        ELSE BEGIN
          IF SourceType = DATABASE::Package THEN
            Package.GET(SourceID)
          ELSE BEGIN
            PostedPackage.GET(SourceID);
            Package.TRANSFERFIELDS(PostedPackage);
          END;

          PackingControl.TransferFromPackage(Package);
          PackingControl."Source Type" := SourceType;  // TransferFromPackage sets all to zero for misc
          PackingControl."Source Subtype" := SourceSubType;
          PackingControl."Source ID"  := SourceID;
        END;

        CreateExportDoc(PackingControl,FALSE,ShippingSetup,PackingStation);
      END;

      IF PackingControl."Export Document No." <> '' THEN BEGIN
        COMMIT;
        IF PackingStation."Do Not Show Exp Doc On Create" THEN
          MESSAGE(
            Text027,ExportDoc.TABLENAME,PackingControl."Export Document No.",PackingControl."Source ID")
        ELSE
          ViewExportDoc(PackingControl."Export Document No.");
      END;
    END;

    PROCEDURE UpdateITN@1240030012(VAR ExportDoc@1240030000 : Record 14000981);
    VAR
      Package@1240030002 : Record 14000701;
      PostedPackage@1240030003 : Record 14000704;
      EShipInput@1240030005 : Record 14000728;
      ExportDocEnterITN@1240030004 : Page 14000988;
    BEGIN
      CLEAR(EShipInput);
      EShipInput."No." := ExportDoc."No.";
      EShipInput."ITN No." := ExportDoc."ITN No.";

      CLEAR(ExportDocEnterITN);
      ExportDocEnterITN.LOOKUPMODE(TRUE);
      ExportDocEnterITN.SetEShipInput(EShipInput);
      IF ExportDocEnterITN.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ExportDocEnterITN.GetEShipInput(EShipInput);
        IF (EShipInput."ITN No." <> '') THEN
          ExportDoc."ITN No." := EShipInput."ITN No.";
      END ELSE
        ERROR(Text032);

      IF ExportDoc."ITN No." = '' THEN
        ERROR(Text028,ExportDoc.FIELDCAPTION("ITN No."));

      IF ExportDoc."ITN No." <> '' THEN BEGIN
        ExportDoc."ITN No." := DELCHR(ExportDoc."ITN No.");
        IF (COPYSTR(ExportDoc."ITN No.",1,1) <> 'X') OR
           (STRLEN(ExportDoc."ITN No.") <> 15)
        THEN BEGIN
          MESSAGE(Text031,ExportDoc.FIELDCAPTION("ITN No."));
          UpdateITN(ExportDoc);
        END;
        ExportDoc.Posted := TRUE;
        ExportDoc.MODIFY;
      END;

      Package.SETRANGE("Export Document No.",ExportDoc."No.");
      IF Package.FIND('-') THEN
        REPEAT
          Package."AES ITN No." := ExportDoc."ITN No.";
          Package.MODIFY;
        UNTIL Package.NEXT = 0;

      PostedPackage.SETCURRENTKEY("Export Document No.");
      PostedPackage.SETRANGE("Export Document No.",ExportDoc."No.");
      IF PostedPackage.FIND('-') THEN
        REPEAT
          PostedPackage."AES ITN No." := ExportDoc."ITN No.";
          PostedPackage.MODIFY;
        UNTIL PostedPackage.NEXT = 0;

      IF ExportDoc.Posted THEN
        MESSAGE(Text020,ExportDoc.TABLECAPTION,ExportDoc."No.")
    END;

    PROCEDURE UnpostExportDocument@1240030004(VAR ExportDoc@1240030000 : Record 14000981);
    BEGIN
      WITH ExportDoc DO BEGIN
        Posted := FALSE;
        ExportDoc.Submitted := FALSE;
        MODIFY;
        MESSAGE(Text021,ExportDoc.TABLECAPTION,ExportDoc."No.")
      END;
    END;

    PROCEDURE FixPhone@1240030013(VAR PhoneNo@1240030000 : Text[30]) PhoneOut : Code[20];
    VAR
      i@1240030002 : Integer;
    BEGIN
      WHILE i < STRLEN(PhoneNo) DO BEGIN
        i := i + 1;
        IF STRPOS('0123456789',COPYSTR(PhoneNo,i,1)) > 0 THEN
          PhoneOut := PhoneOut + COPYSTR(PhoneNo,i,1);
      END;
    END;

    PROCEDURE AESITNCheck@1240030016(VAR Package@1240030000 : Record 14000701;ShippingSetup@1240030003 : Record 14000707;PackingStation@1240030004 : Record 14000709) : Boolean;
    VAR
      ExportSourceDoc@1240030001 : Record 14000982;
      ExportDoc@1240030002 : Record 14000981;
      SourceDocFound@1240030005 : Boolean;
      ExportDocNo@1240030006 : Code[20];
    BEGIN
      IF Package."Export Document No." <> '' THEN
        ExportDoc.GET(Package."Export Document No.")
      ELSE BEGIN
        GetExportDocSetup;
        ExportDocSetup.TESTFIELD("AES Commodity Minimum Value");
        ExportSourceDoc.RESET;

        IF Package.Miscellaneous THEN BEGIN
          ExportSourceDoc.SETRANGE("Source Type",DATABASE::Package);
          ExportSourceDoc.SETRANGE("Source Subtype",0);
          ExportSourceDoc.SETRANGE("Source ID",Package."No.");
        END ELSE BEGIN
          ExportSourceDoc.SETRANGE("Source Type",Package."Source Type");
          ExportSourceDoc.SETRANGE("Source Subtype",Package."Source Subtype");
          IF ShippingSetup."Location Packing" THEN
            ExportSourceDoc.SETRANGE("Location Code",PackingStation."Location Code");

          IF Package."Multi Document Package" THEN
            ExportSourceDoc.SETFILTER("Source ID",Package."Multi Document No.")
          ELSE
            ExportSourceDoc.SETRANGE("Source ID",Package."Source ID");
        END;

        SourceDocFound := FALSE;
        IF ExportSourceDoc.FIND('-') THEN
          REPEAT
            IF NOT ExportSourceDoc.PostedPackagesExist AND NOT ExportSourceDoc.PostedMiscPackagesExist
            THEN BEGIN
              SourceDocFound := TRUE;
              ExportDocNo := ExportSourceDoc."Export Document No.";
            END;
          UNTIL (ExportSourceDoc.NEXT = 0) OR SourceDocFound;

        IF NOT SourceDocFound THEN
          EXIT(TRUE);
        ExportDoc.GET(ExportDocNo);
        Package."Export Document No." := ExportDoc."No.";
      END;

      IF NOT ExportDoc.Submitted THEN
        ExportDoc.UpdateSummaryLines;

      IF (NOT ExportDoc.AESITNRequired) OR
         ((Package."Shipping Agent Code" = ShippingSetup."Prepack Shipping Agent Code") OR
          Package."No AES Required" OR
          (ExportDoc."ITN No." <> ''))
      THEN BEGIN
        Package."AES ITN No." := ExportDoc."ITN No.";
        EXIT(TRUE);
      END;
    END;

    PROCEDURE ImportExpDocValidTable@1240030018(Table@1240030000 : Integer);
    VAR
      ExpDocValidationWksh@1240030002 : Record 14000986;
      ExpDocValidImportFile@1240030003 : Text[250];
    BEGIN
      IF Table <> 99 THEN
        ExpDocValidationWksh.SETRANGE(Table,Table);

      IF ExpDocValidationWksh.FIND('-') THEN
        REPEAT
          ExpDocValidImportFile := ExpDocValidationWksh."Import File Path";
          IF COPYSTR(ExpDocValidImportFile,STRLEN(ExpDocValidImportFile)) <> '/' THEN
            ExpDocValidImportFile := ExpDocValidImportFile + '/';
          ExpDocValidImportFile := ExpDocValidImportFile + ExpDocValidationWksh."Import File Name";

          IF EXISTS(ExpDocValidImportFile) THEN BEGIN
            // XXX CLEAR(ExpDocImportValidTable);
            // XXX ExpDocImportValidTable.SetTableToImport(ExpDocValidationWksh.Table,ExpDocValidImportFile);
            // XXX ExpDocImportValidTable.RUNMODAL;
            ExpDocValidationWksh."Imported Date" := TODAY;
            ExpDocValidationWksh."Imported Time" := TIME;
            ExpDocValidationWksh."Imported By" := USERID;
            ExpDocValidationWksh.MODIFY;
            COMMIT;
          END;
        UNTIL ExpDocValidationWksh.NEXT = 0;

      IF Table = 99 THEN
        MESSAGE(Text025)
      ELSE
        MESSAGE(Text024,ExpDocValidationWksh.Table);
    END;

    PROCEDURE ViewExpDocValidTable@1240030019(Table@1240030000 : Integer);
    VAR
      ExportDocValidation@1240030001 : Record 14000985;
      ExpDocValidImportTable@1240030003 : 'Schedule B,MEX State,CAN State,US State,Sched D,Sched K,IATA,,SCAC,ZIP,Schedule B UOM,Export,License,Inbond,Kimb. Cntry,Kimb. Comm.,Veh. Info,Sched C,Transport Mode,Ltd. Rpt.';
    BEGIN
      CASE Table OF
        ExpDocValidImportTable::"MEX State":
          ExportDocValidation.SETRANGE(Table,ExportDocValidation.Table::"MEX State");
        ExpDocValidImportTable::"CAN State":
          ExportDocValidation.SETRANGE(Table,ExportDocValidation.Table::"CAN State");
        ExpDocValidImportTable::"US State":
          ExportDocValidation.SETRANGE(Table,ExportDocValidation.Table::"US State");
        ExpDocValidImportTable::"Sched D":
          BEGIN
            ExportDocValidation.SETRANGE(Table,ExportDocValidation.Table::Port);
            ExportDocValidation.SETRANGE(Section,1);
          END;
        ExpDocValidImportTable::"Sched K":
          BEGIN
            ExportDocValidation.SETRANGE(Table,ExportDocValidation.Table::Port);
            ExportDocValidation.SETRANGE(Section,2);
          END;
        ExpDocValidImportTable::IATA:
          BEGIN
            ExportDocValidation.SETRANGE(Table,ExportDocValidation.Table::"IATA/SCAC");
            ExportDocValidation.SETRANGE(Section,1,2);
          END;
        // ExpDocValidImportTable::SCAC not used
        // SCAC codes must be obtained from each motor carrier and entered manually on Shipping Agent and/or Export Doc
        ExpDocValidImportTable::ZIP:
          ExportDocValidation.SETRANGE(Table,ExportDocValidation.Table::ZIP);
        ExpDocValidImportTable::Export:
          ExportDocValidation.SETRANGE(Table,ExportDocValidation.Table::Export);
        ExpDocValidImportTable::License:
          ExportDocValidation.SETRANGE(Table,ExportDocValidation.Table::License);
        ExpDocValidImportTable::Inbond:
          ExportDocValidation.SETRANGE(Table,ExportDocValidation.Table::Inbond);
        ExpDocValidImportTable::"Kimb. Cntry":
          ExportDocValidation.SETRANGE(Table,ExportDocValidation.Table::"Kimb. Cntry");
        ExpDocValidImportTable::"Kimb. Comm.":
          ExportDocValidation.SETRANGE(Table,ExportDocValidation.Table::"Kimb. Comm.");
        ExpDocValidImportTable::"Veh. Info":
          BEGIN
            ExportDocValidation.SETRANGE(Table,ExportDocValidation.Table::"Veh. Info");
            ExportDocValidation.SETRANGE(Section,0);
          END;
        ExpDocValidImportTable::"Sched C":
          ExportDocValidation.SETRANGE(Table,ExportDocValidation.Table::"Sched C");
        ExpDocValidImportTable::"Transport Mode":
          ExportDocValidation.SETRANGE(Table,ExportDocValidation.Table::"Transport Mode");
        ExpDocValidImportTable::"Ltd. Rpt.":
          ExportDocValidation.SETRANGE(Table,ExportDocValidation.Table::"Ltd. Rpt.");
      END;

      CASE Table OF
        ExpDocValidImportTable::"Schedule B":
          PAGE.RUNMODAL(PAGE::"Schedule B Codes");
        ExpDocValidImportTable::"Schedule B UOM":
          PAGE.RUNMODAL(PAGE::"Schedule B Units of Measure");
        ELSE
          PAGE.RUNMODAL(PAGE::"Export Document Validation",ExportDocValidation);
      END;
    END;

    PROCEDURE AddPostedPackage@1240030002(VAR ExportDoc@1240030000 : Record 14000981;SourceType@1240030001 : Integer;SourceSubType@1240030002 : '0,1,2,3,4,5,6,7,8,9,10';SourceID@1240030007 : Code[20];ShippingSetup@1240030011 : Record 14000707;PackingStation@1240030012 : Record 14000709);
    VAR
      ExportSourceDoc@1240030006 : Record 14000982;
      ExportSourceLine@1240030005 : Record 14000983;
      PostedPackage@1240030009 : Record 14000704;
      PostedPackageLine@1240030003 : Record 14000705;
      Package@1240030017 : Record 14000701;
      PackageLine@1240030014 : Record 14000702;
      Country@1240030008 : Record 9;
      LineNo@1240030004 : Integer;
      PostedPackage2@1240030010 : Record 14000704;
    BEGIN
      ExportDoc.TESTFIELD(Manual,FALSE);
      ExportDoc.TESTFIELD(Submitted,FALSE);
      ExportDoc.TESTFIELD(Posted,FALSE);

      IF SourceID <> '' THEN
        PostedPackage.GET(SourceID)
      ELSE BEGIN
        PostedPackage.RESET;
        PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        PostedPackage.SETRANGE(Closed,TRUE);
        PostedPackage.SETRANGE("Export Document No.",'');

        IF ExportDoc."Shipping Agent Code" <> '' THEN BEGIN
          PostedPackage.SETRANGE("Shipping Agent Code",ExportDoc."Shipping Agent Code");
          PostedPackage.SETRANGE("Shipping Agent Service",ExportDoc."E-Ship Agent Service");
        END;

        IF NOT PostedPackage.FIND('-') THEN BEGIN
          MESSAGE(Text001);
          EXIT;
        END;

        IF NOT (PAGE.RUNMODAL(PAGE::"Posted Packages",PostedPackage) = ACTION::LookupOK) THEN BEGIN
          MESSAGE(Text002);
          EXIT;
        END;
      END;

      ExportSourceDoc.RESET;
      ExportSourceDoc.SETCURRENTKEY("Source Type");
      ExportSourceDoc.SETRANGE("Source Type",DATABASE::Package);
      ExportSourceDoc.SETRANGE("Source Subtype",0);
      ExportSourceDoc.SETRANGE("Source ID",PostedPackage."No.");
      IF ShippingSetup."Location Packing" THEN
        ExportSourceDoc.SETRANGE("Location Code",PackingStation."Location Code");

      IF ExportSourceDoc.FIND('-') THEN BEGIN
        MESSAGE(Text003,PostedPackage."No.",ExportDoc.TABLECAPTION,ExportSourceDoc."Export Document No.");
        EXIT;
      END;

      IF PostedPackage."Ship-to Country Code" <> '' THEN BEGIN
        Country.GET(PostedPackage."Ship-to Country Code");
        Country.TESTFIELD("ISO 2 char Country Code");
      END;

      PostedPackageLine.RESET;
      PostedPackageLine.SETRANGE("Package No.",PostedPackage."No.");
      PostedPackageLine.SETFILTER(Quantity,'>%1',0);

      IF PostedPackageLine.FIND('-') THEN BEGIN
        IF ExportDoc."Ship-to No." = '' THEN BEGIN
          ExportDoc."Ship-to No." := PostedPackage."Ship-to No.";
          ExportDoc."Ship-to Code" := PostedPackage."Ship-to Code";
          ExportDoc."Ship-to Type" := PostedPackage."Ship-to Type";

          ExportDoc."Ship-to Name" := PostedPackage."Ship-to Name";
          ExportDoc."Ship-to Name 2" := PostedPackage."Ship-to Name 2";
          ExportDoc."Ship-to Address" := PostedPackage."Ship-to Address";
          ExportDoc."Ship-to Address 2" := PostedPackage."Ship-to Address 2";
          ExportDoc."Ship-to City" := PostedPackage."Ship-to City";
          ExportDoc."Ship-to State" := PostedPackage."Ship-to State";
          ExportDoc."Ship-to ZIP Code" := PostedPackage."Ship-to ZIP Code";

          ExportDoc.VALIDATE("Ship-to Country Code",PostedPackage."Ship-to Country Code");
          ExportDoc."Ship-to Contact" := PostedPackage."Ship-to Contact";
          ExportDoc."Ship-to Phone No." := PostedPackage."Ship-to Phone No.";
          ExportDoc."Ship-to Email Address" := PostedPackage."Ship-to Email Address";
          ExportDoc.VALIDATE("Country of Destination",PostedPackage."Ship-to Country Code");
          ExportDoc.VALIDATE("Shipping Agent Code",PostedPackage."Shipping Agent Code");
          ExportDoc."E-Ship Agent Service" := PostedPackage."Shipping Agent Service";
          ExportDoc."Ship-to FTR Type" := ExportDocSetup."Default AES FTR Type";
          ExportDoc.MODIFY;
        END ELSE BEGIN
          IF ExportDoc."Shipping Agent Code" <> PostedPackage."Shipping Agent Code" THEN BEGIN
             MESSAGE(
               Text006,ExportDoc.FIELDCAPTION("Shipping Agent Code"),
               PostedPackage."Shipping Agent Code",ExportSourceDoc.FIELDCAPTION("Export Document No."),
               ExportDoc."No.",ExportDoc.FIELDCAPTION("Shipping Agent Code"),
               ExportDoc."Shipping Agent Code",ExportDoc.TABLECAPTION);
             EXIT;
          END;

          IF ExportDoc."E-Ship Agent Service" <> PostedPackage."Shipping Agent Service" THEN BEGIN
             MESSAGE(
               Text006,ExportDoc.FIELDCAPTION("E-Ship Agent Service"),
               PostedPackage."Shipping Agent Service",ExportSourceDoc.FIELDCAPTION("Export Document No."),
               ExportDoc."No.",ExportDoc.FIELDCAPTION("E-Ship Agent Service"),
               ExportDoc."E-Ship Agent Service",ExportDoc.TABLECAPTION);
             EXIT;
          END;
        END;

        ExportSourceDoc.INIT;
        ExportSourceDoc."Export Document No." := ExportDoc."No.";
        ExportSourceDoc."Source Type" := DATABASE::"Posted Package";
        ExportSourceDoc."Source Subtype" := 0;
        ExportSourceDoc."Source ID" := PostedPackage."No.";
        IF ShippingSetup."Location Packing" THEN
          ExportSourceDoc."Location Code" := PostedPackage."Location Code";

        ExportSourceDoc.INSERT;

        PostedPackage."Export Document No." := ExportDoc."No.";
        PostedPackage.MODIFY;
        IF PostedPackage."Multi Document Package" AND
           PostedPackage2.GET(Package."Original Package No.")
        THEN
          IF PostedPackage2."Export Document No." <> ExportDoc."No." THEN BEGIN
            PostedPackage2."Export Document No." := ExportDoc."No.";
            PostedPackage2.MODIFY;
          END;

        ExportSourceLine.LOCKTABLE;
        ExportSourceLine.RESET;
        ExportSourceLine.SETRANGE("Export Document No.",ExportDoc."No.");
        IF ExportSourceLine.FIND('+') THEN
          LineNo := ExportSourceLine."Line No." + 1000
        ELSE
          LineNo := 1000;

        REPEAT
          ExportSourceLine.INIT;
          ExportSourceLine."Export Document No." := ExportDoc."No.";
          ExportSourceLine."Line No." := LineNo;
          ExportSourceLine.INSERT(TRUE);
          LineNo := LineNo + 1000;

          CASE PostedPackageLine.Type OF
            PostedPackageLine.Type::"Account (G/L)":
              ExportSourceLine.Type := ExportSourceLine.Type::"Account (G/L)";
            PostedPackageLine.Type::Item:
              ExportSourceLine.Type := ExportSourceLine.Type::Item;
            PostedPackageLine.Type::Resource:
              ExportSourceLine.Type := ExportSourceLine.Type::Resource;
            ELSE
              ExportSourceLine.Type := ExportSourceLine.Type::" ";
          END;

          ExportSourceLine.VALIDATE("No.",PostedPackageLine."No.");
          IF ExportSourceLine.Description = '' THEN
            ExportSourceLine.Description := PostedPackageLine.Description;
          ExportSourceLine."Variant Code" := PostedPackageLine."Variant Code";

          ExportSourceLine."Source Type" := DATABASE::"Posted Package";
          ExportSourceLine."Source SubType" := 0;
          ExportSourceLine."Source ID" := PostedPackage."No.";

          ExportSourceLine."Value USD" := PostedPackageLine."Value (Price)";
          ExportSourceLine."Source Unit of Measure" := PostedPackageLine."Unit of Measure Code";
          ExportSourceLine.VALIDATE("Source Quantity",PostedPackageLine.Quantity);

          ExportSourceLine."Source Net Weight" := PostedPackageLine."Net Weight";
          ExportSourceLine."Source Gross Weight" := PostedPackageLine."Gross Weight";
          ExportSourceLine."Source Dimmed Weight" := PostedPackageLine."Dim. Weight";

          ShippingSetup.TESTFIELD("Actual Weight as");
          CASE ShippingSetup."Actual Weight as" OF
            ShippingSetup."Actual Weight as"::"Gross Weight":
              ExportSourceLine.VALIDATE(Weight,ExportSourceLine."Source Gross Weight");
            ShippingSetup."Actual Weight as"::"Net Weight":
              ExportSourceLine.VALIDATE(Weight,ExportSourceLine."Source Net Weight");
            ShippingSetup."Actual Weight as"::"Dimmed Weight":
              ExportSourceLine.VALIDATE(Weight,ExportSourceLine."Source Dimmed Weight");
          END;

          ExportSourceLine.MODIFY(TRUE);
        UNTIL PostedPackageLine.NEXT = 0;

        ExportDoc.UpdateSummaryLines;
      END ELSE
        MESSAGE(
          Text007,PostedPackage."No.", ExportSourceDoc.FIELDCAPTION("Export Document No."),
          ExportDoc."No.");
    END;

    PROCEDURE UpdateExpDoc@1240030003(CurrentPackage@1240030000 : Record 14000701);
    VAR
      ExportDoc@1240030002 : Record 14000981;
      TransportationRefNo@1240030001 : Text[30];
      Package@1240030003 : Record 14000701;
    BEGIN
      IF ExportDoc.GET(CurrentPackage."Export Document No.") THEN BEGIN
        Package.SETRANGE("Export Document No.",ExportDoc."No.");
        Package.SETRANGE("Package No.",1);
        Package.SETRANGE("Original Package No.",'');
        IF Package.FIND('-') THEN BEGIN
          TransportationRefNo := ExportDoc."Transport. Ref. No.";
          IF NOT (ExportDoc."Mode of Transportation" IN ['10','11','12']) THEN  // Not a Vessel shipment
            TransportationRefNo := ShipperTypeMgt.GetMasterWaybillNo(Package."No.");
          IF ShipperTypeMgt.UpdateExportDocSoldTo(ExportDoc,Package."No.") OR
             (ExportDoc."Transport. Ref. No." <> TransportationRefNo)
          THEN BEGIN
            ExportDoc."Transport. Ref. No." := TransportationRefNo;
            ExportDoc.MODIFY;
          END;
        END;
      END;
    END;

    PROCEDURE PostExportDoc@1240030005(ExportDoc@1240030000 : Record 14000981);
    BEGIN
      ExportDoc.Posted := TRUE;
      ExportDoc.MODIFY;
      MESSAGE(Text020,ExportDoc.TABLECAPTION,ExportDoc."No.")
    END;

    PROCEDURE CloseMiscPackage@1240030009(VAR CurrentPackage@1240030000 : Record 14000701;ShippingSetup@1240030003 : Record 14000707;PackingStation@1240030005 : Record 14000709) : Boolean;
    VAR
      ExportDoc@1240030001 : Record 14000981;
      PackingControl@1240030002 : Record 14000717;
      ExportSourceDoc@1240030004 : Record 14000982;
    BEGIN
      IF ExportDoc.GET(CurrentPackage."Export Document No.") THEN BEGIN
        PackingControl."Export Document No." := ExportDoc."No.";
        IF ExportDoc.Recreate THEN BEGIN
          ExportDoc."Transport. Ref. No." := ShipperTypeMgt.GetMasterWaybillNo(CurrentPackage."No.");
          IF ShipperTypeMgt.UpdateExportDocSoldTo(ExportDoc,CurrentPackage."No.") THEN  ;
        END ELSE
          EXIT(FALSE);
      END;

      PackingControl.TransferFromPackage(CurrentPackage);
      PackingControl."Source Type" := DATABASE::Package;  // TransferFromPackage sets all to 0 for misc
      PackingControl."Source ID"  := CurrentPackage."No.";

      ExportSourceDoc.RESET;
      ExportSourceDoc.SETCURRENTKEY("Source Type");
      ExportSourceDoc.SETRANGE("Source Type",DATABASE::Package);
      ExportSourceDoc.SETRANGE("Source Subtype",0);
      ExportSourceDoc.SETRANGE("Source ID",CurrentPackage."No.");
      IF ShippingSetup."Location Packing" THEN
        ExportSourceDoc.SETRANGE("Location Code",PackingStation."Location Code");

      IF ExportSourceDoc.FIND('-') THEN BEGIN
        CurrentPackage."Export Document No." := ExportSourceDoc."Export Document No.";
        EXIT(TRUE);
      END;

      CreateExportDoc(PackingControl,TRUE,ShippingSetup,PackingStation);

      IF PackingControl."Export Document No." <> '' THEN BEGIN
        CurrentPackage."Export Document No." := PackingControl."Export Document No.";
        IF NOT ExportDoc.Submitted THEN BEGIN
          ExportDoc.GET(PackingControl."Export Document No.");
          IF NOT (ExportDoc."Mode of Transportation" IN ['10','11','12']) THEN  // Not a Vessel shipment
            ExportDoc."Transport. Ref. No." := ShipperTypeMgt.GetMasterWaybillNo(CurrentPackage."No.");
          IF ShipperTypeMgt.UpdateExportDocSoldTo(ExportDoc,CurrentPackage."No.") THEN  ;
          ExportDoc.MODIFY;
        END;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE AddFromExpDoc@1240030010(VAR ExportDoc@1240030004 : Record 14000981;ShippingSetup@1240030000 : Record 14000707;PackingStation@1240030001 : Record 14000709);
    VAR
      PackingControl@1240030005 : Record 14000717;
      SalesHeader@1240030011 : Record 36;
      PurchHeader@1240030010 : Record 38;
      TransferHeader@1240030009 : Record 5740;
    BEGIN
      ExportDoc.TESTFIELD(Manual,FALSE);
      ExportDoc.TESTFIELD(Submitted,FALSE);
      ExportDoc.TESTFIELD(Posted,FALSE);

      CLEAR(PackingControl);

      IF NOT ShippingSetup.SelectSourceType(
               PackingControl."Source Type",PackingControl."Source Subtype")
      THEN
        EXIT;

      CASE PackingControl."Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader.RESET;
            SalesHeader.SETRANGE("Document Type",PackingControl."Source Subtype");
            SalesHeader.SETRANGE(Status,SalesHeader.Status::Released);
            SalesHeader.SETRANGE("E-Ship Outst. Lines Exists",TRUE);
            IF ExportDoc."Shipping Agent Code" <> '' THEN BEGIN
              SalesHeader.SETRANGE("Shipping Agent Code",ExportDoc."Shipping Agent Code");
              SalesHeader.SETRANGE("E-Ship Agent Service",ExportDoc."E-Ship Agent Service");
            END;
            IF NOT SalesHeader.FIND('-') THEN BEGIN
              MESSAGE(Text001);
              EXIT;
            END;

            IF PAGE.RUNMODAL(0,SalesHeader) = ACTION::LookupOK THEN BEGIN
              PackingControl."Source Type" := DATABASE::"Sales Header";
              PackingControl."Source Subtype" := SalesHeader."Document Type";
              PackingControl."Source ID" := SalesHeader."No.";
            END ELSE BEGIN
              MESSAGE(Text002);
              EXIT;
            END;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader.SETRANGE("Document Type",PackingControl."Source Subtype");
            PurchHeader.SETRANGE("E-Ship Outst. Lines Exists",TRUE);
            IF ExportDoc."Shipping Agent Code" <> '' THEN BEGIN
              PurchHeader.SETRANGE("E-Ship Agent Code",ExportDoc."Shipping Agent Code");
              PurchHeader.SETRANGE("E-Ship Agent Service",ExportDoc."E-Ship Agent Service");
            END;

            IF PAGE.RUNMODAL(PAGE::"Purchase List",PurchHeader) = ACTION::LookupOK THEN BEGIN
              PackingControl."Source Type" := DATABASE::"Purchase Header";
              PackingControl."Source Subtype" := PurchHeader."Document Type";
              PackingControl."Source ID" := PurchHeader."No.";
            END ELSE BEGIN
              MESSAGE(Text002);
              EXIT;
            END;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferHeader.SETRANGE("E-Ship Outst. Lines Exists",TRUE);
            IF ExportDoc."Shipping Agent Code" <> '' THEN BEGIN
              TransferHeader.SETRANGE("Shipping Agent Code",ExportDoc."Shipping Agent Code");
              TransferHeader.SETRANGE("E-Ship Agent Service",ExportDoc."E-Ship Agent Service");
            END;

            IF PAGE.RUNMODAL(PAGE::"Transfer Orders",TransferHeader) = ACTION::LookupOK THEN BEGIN
              PackingControl."Source Type" := DATABASE::"Transfer Header";
              PackingControl."Source Subtype" := 0;
              PackingControl."Source ID" := TransferHeader."No.";
            END ELSE BEGIN
              MESSAGE(Text002);
              EXIT;
            END;
          END;
        ELSE
          EXIT;
      END;

      AddDocument(PackingControl,ExportDoc,FALSE,ShippingSetup,PackingStation);
    END;

    PROCEDURE GetExportDocSetup@1240030007();
    BEGIN
      IF NOT ExportDocSetupRetrieved THEN BEGIN
        ExportDocSetup.GET;
        ExportDocSetupRetrieved := TRUE;
      END;
    END;

    PROCEDURE MarkFilingAsCancelled@1240020001(VAR ExportDoc@1240030000 : Record 14000981);
    BEGIN
      WITH ExportDoc DO BEGIN
        ExportDoc."ITN No." := 'CANC ' + ExportDoc."ITN No.";
        MODIFY;
      END;
    END;

    BEGIN
    END.
  }
}

