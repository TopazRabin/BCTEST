OBJECT Codeunit 14000596 Adj. For Unusual Demand
{
  OBJECT-PROPERTIES
  {
    Date=03/01/20;
    Time=12:00:00 PM;
    Version List=UBP3.02;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            InvMgt.CreateLogEntry('',Text005,LogEntryNo);
            COMMIT;

            CheckAllCustDominantItems;

            InvMgt.CloseLogEntry(LogEntryNo,'');
            COMMIT;
          END;

  }
  CODE
  {
    VAR
      AFPAlertSetup@1240020011 : Record 14002703;
      ADVForcSetup@1240020001 : Record 14002651;
      CustDominatedItems@1240020007 : Record 14097462;
      ForecastCustItem@1240020031 : Record 14002602;
      ForcAdjust@1240020003 : Record 14002707;
      InvMgtSetup@1240020002 : Record 14000551;
      ItemLedgerEntry@1240020024 : Record 32;
      Location@1240020012 : Record 14;
      LocInvPeriod@1240020008 : Record 14000553;
      ProcUnit@1240020004 : Record 14000555;
      SalesLine@1240020025 : Record 37;
      Forecast@1240020013 : Codeunit 14000567;
      UBP@1240020009 : Codeunit 14000564;
      InvMgt@1240020028 : Codeunit 14000553;
      ProgWindow@1240020005 : Dialog;
      PrevLocCode@1240020010 : Code[10];
      i@1240020014 : Integer;
      StartingDate@1240020015 : Date;
      EndingDate@1240020016 : Date;
      AutoForecastAdj@1240020020 : Decimal;
      PerForecast@1240020017 : Decimal;
      ShippedQty@1240020018 : Decimal;
      SalesLineQty@1240020019 : Decimal;
      DominantPercent@1240020021 : Decimal;
      NetAdjQty@1240020022 : Decimal;
      Text001@1240020023 : TextConst 'ENU="Unusual Demand Adj. %1 = (Cust. Shipped %2 + On  Order %3)  -  (Dominant % %4 * Forecast %5) * Dom. Demand Adj. % %6"';
      EntryNo@1240020006 : Integer;
      Text002@1240020000 : TextConst 'ENU=Adj. For Unusual Demand';
      Text003@1240020026 : TextConst 'ENU=Location';
      Text004@1240020027 : TextConst 'ENU=Item';
      Text005@1240020029 : TextConst 'ENU=Adjust For Unusual Demand';
      LogEntryNo@1240020030 : Integer;

    PROCEDURE CheckAllCustDominantItems@1240020000();
    BEGIN
      ADVForcSetup.GET;
      InvMgtSetup.GET;
      AFPAlertSetup.GET;

      ForcAdjust.RESET;
      ForcAdjust.SETCURRENTKEY("Unusual Demand Adjust");
      ForcAdjust.SETRANGE("Unusual Demand Adjust",TRUE);
      ForcAdjust.DELETEALL;
      IF NOT InvMgtSetup."Adj. FC for Dom. Cust. Demand" THEN
        EXIT;

      IF GUIALLOWED THEN
        ProgWindow.OPEN(
          Text002 + '\' +
          PADSTR(Text003,12) + '#1########' + '\' +
          PADSTR(Text004,12) + '#2####################################');

      CustDominatedItems.RESET;
      CustDominatedItems.SETCURRENTKEY("Location Code","Item No.","Variant Code");
      IF CustDominatedItems.FIND('-') THEN BEGIN
        REPEAT
          IF GUIALLOWED THEN BEGIN
            IF PrevLocCode <> CustDominatedItems."Location Code" THEN
              ProgWindow.UPDATE(1,CustDominatedItems."Location Code");
            ProgWindow.UPDATE(2,CustDominatedItems."Item No.");
          END;
          ProcUnit.GET(
            CustDominatedItems."Location Code",CustDominatedItems."Item No.",CustDominatedItems."Variant Code");
          IF (NOT ProcUnit."Nonstock Unit") AND
             (NOT IsSporadic) AND
             (NOT IsCollaborative)
          THEN BEGIN
            DominantPercent := CustDominatedItems."Dominant Percent";
            CLEAR(Forecast);
            Forecast.CalcForecast(ProcUnit,ADVForcSetup."Periods to Forecast",'',FALSE,TRUE);
            Forecast.CalcDemand(ProcUnit,ADVForcSetup."Periods to Forecast");
            Forecast.CalcAutoForcAdjustment(ProcUnit, UBP.GetLeadTimeHoriz(ProcUnit));
            i := 0;
            REPEAT
              i := i + 1;
              AutoForecastAdj := Forecast.GetAutoForcAdjustment(i);
              IF AutoForecastAdj <> 0 THEN BEGIN
                PerForecast := Forecast.GetPeriodForecastUsage(i);
                StartingDate := Forecast.GetPeriodStartingDate(i);
                EndingDate := Forecast.GetPeriodEndingDate(i);
                ShippedQty := GetShippedQty(ProcUnit,StartingDate,EndingDate);
                SalesLineQty := GetOpenSalesLineQty(ProcUnit,StartingDate,EndingDate);
                NetAdjQty := (ShippedQty + SalesLineQty) - (PerForecast * (DominantPercent / 100));
                IF InvMgtSetup."Dom. Demand Adj. Percent" <> 0 THEN
                  NetAdjQty := ROUND(NetAdjQty * (InvMgtSetup."Dom. Demand Adj. Percent" / 100))
                ELSE
                  NetAdjQty := ROUND(NetAdjQty);
                IF NetAdjQty > 0 THEN BEGIN
                  ForcAdjust.RESET;
                  ForcAdjust.SETCURRENTKEY(
                    "Item No.","Variant Code","Location Code","Starting Date");
                  ForcAdjust.SETRANGE("Item No.",ProcUnit."Item No.");
                  ForcAdjust.SETRANGE("Variant Code",ProcUnit."Variant Code");
                  ForcAdjust.SETRANGE("Location Code",ProcUnit."Location Code");
                  ForcAdjust.SETRANGE("Starting Date",StartingDate);
                  ForcAdjust.SETRANGE("Unusual Demand Adjust",TRUE);
                  ForcAdjust.SETRANGE("Unusual Demand Cust. No.",CustDominatedItems."Customer No.");
                  IF NOT ForcAdjust.FIND('-') THEN BEGIN
                    ForcAdjust.RESET;
                    IF ForcAdjust.FIND('+') THEN
                      EntryNo := ForcAdjust."Entry No." + 1
                    ELSE
                      EntryNo := 1;
                    ForcAdjust.INIT;
                    ForcAdjust."Entry No." := EntryNo;
                    ForcAdjust."Location Code" := ProcUnit."Location Code";
                    ForcAdjust."Item No." := ProcUnit."Item No.";
                    ForcAdjust."Variant Code" := ProcUnit."Variant Code";
                    ForcAdjust."Starting Date" := StartingDate;
                    ForcAdjust.Quantity := NetAdjQty;
                    ForcAdjust."User ID" := USERID;
                    ForcAdjust."Date Adjusted" := TODAY;
                    ForcAdjust."Time Adjusted" := TIME;
                    ForcAdjust."Adjustment Note" :=
                      STRSUBSTNO(
                        Text001,NetAdjQty,ShippedQty,SalesLineQty,DominantPercent,PerForecast,
                        InvMgtSetup."Dom. Demand Adj. Percent");
                    ForcAdjust."Unusual Demand Adjust" := TRUE;
                    ForcAdjust."Unusual Demand Cust. No." := CustDominatedItems."Customer No.";
                    ForcAdjust.INSERT;
                  END;
                END;
              END;
            UNTIL i >= AFPAlertSetup."Auto. FC Adj. Per. to Check";
          END;
        UNTIL CustDominatedItems.NEXT = 0;
      END;

      IF GUIALLOWED THEN
        ProgWindow.CLOSE;
    END;

    PROCEDURE IsSporadic@1240020001() Resp : Boolean;
    VAR
      ForecastAdj@1240020001 : Record 14002707;
      ForecastEntry@1240020002 : Record 14002603;
      ItemUsage@1240020000 : Record 14000557;
      LocProcUnit@1240020004 : Record 14000555;
      Sporadic@1240020003 : Boolean;
      UBP@1240020005 : Codeunit 14000564;
    BEGIN
      Sporadic := TRUE;

      ItemUsage.RESET;
      ItemUsage.SETCURRENTKEY(
        "Location Code","Item No.","Variant Code","Starting Date","Ending Date");
      ItemUsage.SETRANGE("Location Code",ProcUnit."Location Code");
      ItemUsage.SETRANGE("Item No.",ProcUnit."Item No.");
      ItemUsage.SETRANGE("Variant Code",ProcUnit."Variant Code");

      LocInvPeriod.SETRANGE("Location Code",ProcUnit."Location Code");
      LocInvPeriod.SETRANGE("Period End Closed",TRUE);
      IF LocInvPeriod.FIND('+') THEN;

      ItemUsage.SETRANGE("Starting Date",LocInvPeriod."Starting Date");
      ItemUsage.SETRANGE("Ending Date",LocInvPeriod."Ending Date");
      IF ItemUsage.FIND('-') THEN
        IF ItemUsage."Re-For. Formula" <> '' THEN
          Sporadic := FALSE;

      ForecastAdj.RESET;
      ForecastAdj.SETCURRENTKEY(
        "Item No.","Variant Code","Location Code","Starting Date");
      ForecastAdj.SETRANGE("Item No.",ProcUnit."Item No.");
      IF LocProcUnit."Summarize Variant Detail" THEN
        ForecastAdj.SETRANGE("Variant Code")
      ELSE
        ForecastAdj.SETRANGE("Variant Code",ProcUnit."Variant Code");
        ForecastAdj.SETFILTER(
          "Location Code",UBP.GetLocationFilter(ProcUnit,TRUE));
      ForecastAdj.SETFILTER("Starting Date",'%1..',LocInvPeriod."Starting Date");
      IF ForecastAdj.FIND('-') THEN
        Sporadic := FALSE;

      ForecastEntry.RESET;
      ForecastEntry.SETCURRENTKEY("Location Code","Item No.","Variant Code","Starting Date",Released);
      IF InvMgtSetup."Roll Up Via Repl. Path" THEN
        ForecastEntry.SETFILTER(
          "Location Code",UBP.GetLocationFilter(LocProcUnit,FALSE))
      ELSE
        ForecastEntry.SETFILTER(
          "Location Code",UBP.GetLocationFilter(LocProcUnit,TRUE));
      ForecastEntry.SETRANGE("Item No.",LocProcUnit."Item No.");
      ForecastEntry.SETRANGE("Variant Code",LocProcUnit."Variant Code");
      ForecastEntry.SETRANGE(Released,TRUE);
      ForecastEntry.SETFILTER("Starting Date",'%1..',LocInvPeriod."Starting Date");
      IF ForecastEntry.FIND('-') THEN
        Sporadic := FALSE;

      EXIT(Sporadic);
    END;

    PROCEDURE IsCollaborative@1240020003() Resp : Boolean;
    BEGIN
      ForecastCustItem.RESET;
      ForecastCustItem.SETCURRENTKEY(
        "Customer No.","Location Code","Item No.","Variant Code");
      ForecastCustItem.SETRANGE("Customer No.",CustDominatedItems."Customer No.");
      ForecastCustItem.SETRANGE("Location Code",CustDominatedItems."Location Code");
      ForecastCustItem.SETRANGE("Item No.",CustDominatedItems."Item No.");
      ForecastCustItem.SETRANGE("Variant Code",CustDominatedItems."Variant Code");
      IF ForecastCustItem.FIND('-') THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE GetShippedQty@1240020002(CurrProcUnit@1240020000 : Record 14000555;CurrStartingDate@1240020003 : Date;CurrEndingDate@1240020004 : Date) Resp : Decimal;
    BEGIN
      ShippedQty := 0;
      ItemLedgerEntry.RESET;
      ItemLedgerEntry.SETCURRENTKEY(
        "Item No.","Entry Type","Variant Code","Drop Shipment","Location Code","Posting Date");
      ItemLedgerEntry.SETRANGE("Item No.",CurrProcUnit."Item No.");
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Sale);
      ItemLedgerEntry.SETRANGE("Variant Code",CurrProcUnit."Variant Code");
      ItemLedgerEntry.SETRANGE("Location Code",CurrProcUnit."Location Code");
      ItemLedgerEntry.SETFILTER("Posting Date",'%1..%2',CurrStartingDate,CurrEndingDate);
      ItemLedgerEntry.SETRANGE(Positive,FALSE);
      ItemLedgerEntry.SETRANGE("Source No.",CustDominatedItems."Customer No.");
      IF ItemLedgerEntry.FIND('-') THEN
        REPEAT
          ShippedQty := ShippedQty - ItemLedgerEntry.Quantity;
        UNTIL ItemLedgerEntry.NEXT = 0;

      EXIT(ShippedQty);
    END;

    PROCEDURE GetOpenSalesLineQty@1240020005(CurrProcUnit@1240020000 : Record 14000555;CurrStartingDate@1240020001 : Date;CurrEndingDate@1240020002 : Date) Resp : Decimal;
    BEGIN
      SalesLineQty := 0;
      SalesLine.RESET;
      SalesLine.SETCURRENTKEY("Document Type",Type,"No.","Variant Code");
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETRANGE("No.",CurrProcUnit."Item No.");
      SalesLine.SETRANGE("Variant Code",CurrProcUnit."Variant Code");
      SalesLine.SETRANGE("Sell-to Customer No.",CustDominatedItems."Customer No.");
      SalesLine.SETRANGE("Location Code",CurrProcUnit."Location Code");
      SalesLine.SETFILTER("Shipment Date",'%1..%2',CurrStartingDate,CurrEndingDate);
      IF SalesLine.FIND('-') THEN BEGIN
        SalesLineQty := 0;
        REPEAT
          SalesLineQty := SalesLineQty + SalesLine."Outstanding Quantity";
        UNTIL SalesLine.NEXT = 0;
      END ELSE
        SalesLineQty := 0;

      EXIT(SalesLineQty);
    END;

    BEGIN
    END.
  }
}

