OBJECT Codeunit 23044528 WHI Journal Functions
{
  OBJECT-PROPERTIES
  {
    Date=11/17/20;
    Time=[ 9:47:17 AM];
    Version List=WHI2.4.7684.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      cuSessionHelper@1000000001 : Codeunit 23044527;
      cuCommonFuncs@1000000002 : Codeunit 23044501;

    PROCEDURE getWhseTemplate@1000000011(piPageID@1000000000 : Integer;piPageType@100000000 : Integer) : Code[10];
    VAR
      lrecWhseJnlLine@100000001 : Record 7311;
      lrecWhseJnlTemplate@1000000001 : Record 7309;
      lbJnlSelected@100000002 : Boolean;
    BEGIN
      lrecWhseJnlTemplate.SETRANGE("Page ID",piPageID);
      lrecWhseJnlTemplate.SETRANGE(Type,piPageType);
      IF lrecWhseJnlTemplate.FINDFIRST THEN BEGIN
        EXIT(lrecWhseJnlTemplate.Name);
      END ELSE BEGIN
        lrecWhseJnlLine.TemplateSelection(piPageID, piPageType, lrecWhseJnlLine, lbJnlSelected);
        EXIT(lrecWhseJnlLine."Journal Template Name");
      END;
    END;

    PROCEDURE getItemJnlTemplate@1000000001(piPageID@1000000000 : Integer;piPageType@100000003 : Integer) : Code[10];
    VAR
      lrecItemJnlLine@100000001 : Record 83;
      lrecItemJnlTemplate@1000000001 : Record 82;
      lcuItemJnlMgmt@100000000 : Codeunit 240;
      lbJnlSelected@100000002 : Boolean;
    BEGIN
      lrecItemJnlTemplate.SETRANGE("Page ID",piPageID);
      lrecItemJnlTemplate.SETRANGE(Recurring,FALSE);

      IF lrecItemJnlTemplate.FINDFIRST THEN BEGIN
        EXIT(lrecItemJnlTemplate.Name);
      END ELSE BEGIN
        lcuItemJnlMgmt.TemplateSelection(piPageID, piPageType, FALSE, lrecItemJnlLine, lbJnlSelected);
        EXIT(lrecItemJnlLine."Journal Template Name");
      END;
    END;

    PROCEDURE getBatchFromParams@1000000009(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;piWhseJournalTemplate@1000000002 : Integer) : Code[10];
    VAR
      lcodBatchName@1000000000 : Code[10];
      lcodTemplateName@1000000003 : Code[10];
      ltxtKeyForBatch@1000000004 : Text[50];
    BEGIN
      lcodTemplateName := getWhseTemplate(piWhseJournalTemplate, 2);

      IF ( piWhseJournalTemplate = PAGE::"Whse. Reclassification Journal" ) THEN BEGIN
         ltxtKeyForBatch := 'Whse. Reclass Journal Batch';
      END ELSE IF ( piWhseJournalTemplate = PAGE::"Whse. Phys. Invt. Journal" ) THEN BEGIN
         ltxtKeyForBatch := 'Inventory Count Batch';
      END;

      lcodBatchName := getBatchName(lcodTemplateName, '',  ptrecEventParams, TRUE, ltxtKeyForBatch);

      EXIT(lcodBatchName);
    END;

    PROCEDURE getWhseReclassBatchToUse@1000000000(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511) rcodOutBatchToUse : Code[10];
    VAR
      lrecPDAConfig@1000000001 : Record 23044504;
      lcodWhseTemplate@1000000004 : Code[10];
      ltxtKeyForBatch@1000000006 : Text[50];
    BEGIN
      lcodWhseTemplate := getWhseTemplate( PAGE::"Whse. Reclassification Journal", 2 );
      ltxtKeyForBatch := 'Whse. Reclass Journal Batch';

      cuCommonFuncs.getDeviceConfig(lrecPDAConfig,ptrecEventParams);
      rcodOutBatchToUse := getBatchName(lcodWhseTemplate, lrecPDAConfig."Whse. Reclass Journal Batch",  ptrecEventParams, TRUE, ltxtKeyForBatch);
    END;

    PROCEDURE getWhsePhysInvBatchToUse@1000000027(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511) rcodOutBatchToUse : Code[10];
    VAR
      lrecPDAConfig@1000000001 : Record 23044504;
      lcodWhseTemplate@1000000004 : Code[10];
      ltxtKeyForBatch@1000000006 : Text[50];
    BEGIN
      lcodWhseTemplate := getWhseTemplate( PAGE::"Whse. Phys. Invt. Journal", 1 );
      ltxtKeyForBatch := 'Inventory Count Batch';
      cuCommonFuncs.getDeviceConfig(lrecPDAConfig,ptrecEventParams);
      rcodOutBatchToUse := getBatchName(lcodWhseTemplate, lrecPDAConfig."Inventory Count Batch Name",  ptrecEventParams, TRUE, ltxtKeyForBatch);
    END;

    PROCEDURE getWhseUserName@1000000003(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511) rtxtOutUserName : Text[100];
    BEGIN

      rtxtOutUserName := COPYSTR(getUserNameWODomain(), 1, MAXSTRLEN(rtxtOutUserName));
    END;

    PROCEDURE getItemJnlPhysInvBatchToUse@1000000013(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511) rcodOutBatchToUse : Code[10];
    VAR
      lrecPDAConfig@1000000001 : Record 23044504;
      lcodItemTemplate@1000000004 : Code[10];
      ltxtKeyForBatch@1000000006 : Text[50];
    BEGIN
      lcodItemTemplate := getItemJnlTemplate( PAGE::"Phys. Inventory Journal", 2 );
      ltxtKeyForBatch := 'Inventory Count Batch';
      cuCommonFuncs.getDeviceConfig(lrecPDAConfig,ptrecEventParams);
      rcodOutBatchToUse := getBatchName(lcodItemTemplate, lrecPDAConfig."Inventory Count Batch Name",  ptrecEventParams, FALSE, ltxtKeyForBatch);
    END;

    PROCEDURE getItemJnlOutputBatchToUse@1000000005(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511) rcodOutBatchToUse : Code[10];
    VAR
      lrecPDAConfig@1000000001 : Record 23044504;
      lcodItemTemplate@1000000004 : Code[10];
      ltxtKeyForBatch@1000000006 : Text[50];
    BEGIN
      lcodItemTemplate := getItemJnlTemplate( PAGE::"Output Journal",5 );
      ltxtKeyForBatch := '';
      cuCommonFuncs.getDeviceConfig(lrecPDAConfig,ptrecEventParams);
      rcodOutBatchToUse := getBatchName(lcodItemTemplate, lrecPDAConfig."Output Journal Batch",  ptrecEventParams, FALSE, ltxtKeyForBatch);
    END;

    PROCEDURE GetConsumptionBatchToUse@100000001(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511) rcodOutBatchToUse : Code[10];
    VAR
      lrecPDAConfig@1000000001 : Record 23044504;
      lcodItemTemplate@1000000004 : Code[10];
      ltxtKeyForBatch@1000000006 : Text[50];
    BEGIN
      lcodItemTemplate := getItemJnlTemplate( PAGE::"Consumption Journal",4 );
      ltxtKeyForBatch := '';
      cuCommonFuncs.getDeviceConfig(lrecPDAConfig,ptrecEventParams);
      rcodOutBatchToUse := getBatchName(lcodItemTemplate, lrecPDAConfig."Consumption Journal Batch",  ptrecEventParams, FALSE, ltxtKeyForBatch);
    END;

    PROCEDURE getItemJnlReclassBatchToUse@1000000006(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511) rcodOutBatchToUse : Code[10];
    VAR
      lrecPDAConfig@1000000001 : Record 23044504;
      lcodItemTemplate@1000000004 : Code[10];
      ltxtKeyForBatch@1000000006 : Text[50];
    BEGIN
      lcodItemTemplate := getItemJnlTemplate( PAGE::"Item Reclass. Journal",1 );
      ltxtKeyForBatch := 'Reclass Journal Batch';
      cuCommonFuncs.getDeviceConfig(lrecPDAConfig,ptrecEventParams);
      rcodOutBatchToUse := getBatchName(lcodItemTemplate, lrecPDAConfig."Reclass Journal Batch",  ptrecEventParams, FALSE, ltxtKeyForBatch);
    END;

    PROCEDURE AddInterimTracking@1000000002(VAR prrefRecord@1000000001 : RecordRef;VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511);
    VAR
      lrecItemTrack@1000000002 : Record 23044531;
      lrecUOM@1000000003 : Record 204;
    BEGIN
      //
      // Adds an item tracking line.
      //
      lrecItemTrack.RESET();
      lrecItemTrack.INIT();
      lrecItemTrack."Record ID" := prrefRecord.RECORDID;
      lrecItemTrack.VALIDATE( "Item No.", ptrecEventParams.getItemNo() );
      lrecItemTrack."Variant Code" := ptrecEventParams.getVariant();
      lrecItemTrack."Lot No." := ptrecEventParams.getLotNo();
      lrecItemTrack."Serial No." := ptrecEventParams.getSerialNo();
      lrecItemTrack.VALIDATE( Quantity, ptrecEventParams.getValueAsDecimal('Quantity'));
      ptrecEventParams.getUnitOfMeasure( lrecUOM );
      IF ( lrecUOM.Code <> '' ) THEN BEGIN
        lrecItemTrack.VALIDATE("Unit of Measure Code", lrecUOM.Code );
      END;
      lrecItemTrack.INSERT(TRUE);
    END;

    PROCEDURE UpdateInterimTracking@1000000012(VAR prrefRecord@1000000001 : RecordRef;VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511);
    VAR
      lrecItemTrack@1000000002 : Record 23044531;
      lrecUOM@1000000003 : Record 204;
    BEGIN
      //
      // Updates an item tracking line.
      //
      lrecItemTrack.RESET();
      lrecItemTrack.SETCURRENTKEY("Record ID","Entry No.");
      lrecItemTrack.GET( prrefRecord.RECORDID, ptrecEventParams.getEntryNo() );
      lrecItemTrack."Lot No." := ptrecEventParams.getLotNo();
      lrecItemTrack."Serial No." := ptrecEventParams.getSerialNo();
      lrecItemTrack.VALIDATE( Quantity, ptrecEventParams.getValueAsDecimal('Quantity'));
      ptrecEventParams.getUnitOfMeasure( lrecUOM );
      IF ( lrecUOM.Code <> '' ) THEN BEGIN
        lrecItemTrack.VALIDATE("Unit of Measure Code", lrecUOM.Code );
      END;
      lrecItemTrack.MODIFY(TRUE);
    END;

    PROCEDURE DeleteInterimTracking@1000000014(VAR prrefRecord@1000000001 : RecordRef;VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511);
    VAR
      lrecItemTrack@1000000002 : Record 23044531;
      lrecUOM@1000000003 : Record 204;
    BEGIN
      //
      // Delets an item tracking line.
      //
      lrecItemTrack.RESET();
      lrecItemTrack.SETCURRENTKEY("Record ID","Entry No.");
      lrecItemTrack.GET( prrefRecord.RECORDID, ptrecEventParams.getEntryNo() );
      lrecItemTrack.DELETE();
    END;

    PROCEDURE getDocNoFromParameters@1000000007() : Code[20];
    VAR
      lcodDocNumber@1000000001 : Code[20];
    BEGIN
      //
      // This method will create a document from the cached parameters
      //

      lcodDocNumber := COPYSTR(getUserNameWODomain(), 1, MAXSTRLEN(lcodDocNumber));
      IF (lcodDocNumber = '') THEN BEGIN
        lcodDocNumber := COPYSTR(getPDADeviceName(), 1, MAXSTRLEN(lcodDocNumber));
      END;

      IF(lcodDocNumber='') THEN  BEGIN
        lcodDocNumber := COPYSTR(cuSessionHelper.GetValue('config_id'),1,MAXSTRLEN(lcodDocNumber));   //@506
      END;


      EXIT(lcodDocNumber);
    END;

    PROCEDURE getUserNameWODomain@1000000022() : Code[100];
    VAR
      ltxtUserNameWithDomain@1000000001 : Text[120];
      liCheckDelimiter@1000000000 : Integer;
      ltxtUserName@1000000003 : Code[100];
    BEGIN

      ltxtUserName := '';

      IF(cuSessionHelper.GetValue('user_name') <> '') THEN BEGIN
        ltxtUserNameWithDomain := COPYSTR(cuSessionHelper.GetValue('user_name'), 1, MAXSTRLEN(ltxtUserNameWithDomain));
        liCheckDelimiter := STRPOS( ltxtUserNameWithDomain,'\');
        IF ( liCheckDelimiter > 0 ) THEN BEGIN
          // remove the domain, if any was found.
          ltxtUserName := COPYSTR(ltxtUserNameWithDomain, liCheckDelimiter+1, MAXSTRLEN(ltxtUserName));
        END ELSE BEGIN
          ltxtUserName := COPYSTR(ltxtUserNameWithDomain, 1, MAXSTRLEN(ltxtUserName));
        END;
      END;

      EXIT(ltxtUserName);
    END;

    PROCEDURE getPDADeviceName@1000000023() : Code[100];
    VAR
      lcodPDADeviceName@1000000000 : Code[20];
    BEGIN

      lcodPDADeviceName := COPYSTR(cuSessionHelper.GetValue('device_hostname'), 1, MAXSTRLEN(lcodPDADeviceName));
      EXIT(lcodPDADeviceName);
    END;

    PROCEDURE getBatchName@1000000015(pcodTemplateName@1000000000 : Code[10];pcodBatchInPDAConfig@1000000002 : Code[10];VAR ptrecEventParams@1000000003 : TEMPORARY Record 23044511;pbWhseJournalBatch@1000000006 : Boolean;ptxtKeyInParasForBatch@1000000007 : Text[50]) : Code[10];
    VAR
      lcodBatchName@1000000004 : Code[10];
      lbIsValidBatch@1000000005 : Boolean;
      lrecConfig@1000000001 : Record 23044504;
      ltxtUserName@1000000010 : Text[50];
    BEGIN

      lbIsValidBatch := FALSE;

      // Try from parameters
      lcodBatchName := getBatchFromParameters(ptrecEventParams);

      // Try from the specific key
      IF (lcodBatchName = '') THEN BEGIN
        lcodBatchName := ptrecEventParams.getValue(ptxtKeyInParasForBatch);
      END;

      IF (lcodBatchName = '') THEN BEGIN

        cuCommonFuncs.getDeviceConfig(lrecConfig,ptrecEventParams);

        // Try from Device config
        lcodBatchName := pcodBatchInPDAConfig;
        lbIsValidBatch := isValidBatch(pcodTemplateName, lcodBatchName, lrecConfig."Location Code", pbWhseJournalBatch);

        // Try from user name
        IF (NOT lbIsValidBatch) THEN BEGIN
          lcodBatchName := COPYSTR(getUserNameWODomain(), 1, MAXSTRLEN(lcodBatchName));
          lbIsValidBatch := isValidBatch(pcodTemplateName, lcodBatchName, lrecConfig."Location Code", pbWhseJournalBatch);
        END;

        IF (NOT lbIsValidBatch) THEN BEGIN
          ltxtUserName := COPYSTR(getUserNameWODomain(), 1, MAXSTRLEN(ltxtUserName));
          lcodBatchName := COPYSTR(ltxtUserName, 1, MAXSTRLEN(lcodBatchName));
          lbIsValidBatch := isValidBatch(pcodTemplateName, lcodBatchName, lrecConfig."Location Code", pbWhseJournalBatch);
        END;

        // Try from device name
        IF (NOT lbIsValidBatch) THEN BEGIN
          lcodBatchName := COPYSTR(getPDADeviceName(), 1, MAXSTRLEN(lcodBatchName));
          lbIsValidBatch := isValidBatch(pcodTemplateName, lcodBatchName, lrecConfig."Location Code", pbWhseJournalBatch);
        END;

        // Try from Device config id
        IF (NOT lbIsValidBatch) THEN BEGIN
          lcodBatchName := COPYSTR(lrecConfig.Code, 1, MAXSTRLEN(lcodBatchName));
          lbIsValidBatch := isValidBatch(pcodTemplateName, lcodBatchName, lrecConfig."Location Code", pbWhseJournalBatch);
        END;

        IF (NOT lbIsValidBatch) THEN BEGIN
          lcodBatchName := '';
        END;
      END;

      EXIT(lcodBatchName);
    END;

    PROCEDURE getBatchFromParameters@1000000017(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511) : Code[10];
    VAR
      lcodBatchName@1000000001 : Code[10];
    BEGIN

      lcodBatchName := ptrecEventParams.getValue('batch');
      IF (lcodBatchName = '' ) THEN BEGIN
        lcodBatchName := ptrecEventParams.getValue('Journal Batch Name');
      END;

      EXIT(lcodBatchName);
    END;

    PROCEDURE isValidBatch@1000000024(pcodTemplateName@1000000000 : Code[10];pcodBatchName@1000000001 : Code[10];pcodLocationCode@1000000002 : Code[10];pbWhseJournalBatch@1000000003 : Boolean) : Boolean;
    VAR
      lrecWhseJournalBatch@1000000004 : Record 7310;
      lrecItemJournalBatch@1000000005 : Record 233;
      lbValidBatch@1000000006 : Boolean;
    BEGIN

      lbValidBatch := FALSE;

      IF (pbWhseJournalBatch) THEN BEGIN
        IF ( NOT lrecWhseJournalBatch.GET(pcodTemplateName, pcodBatchName, pcodLocationCode)) THEN BEGIN
          lbValidBatch := FALSE;
        END ELSE BEGIN
          lbValidBatch := TRUE;
        END;
      END ELSE BEGIN
        IF ( NOT lrecItemJournalBatch.GET(pcodTemplateName, pcodBatchName)) THEN BEGIN
          lbValidBatch := FALSE;
        END ELSE BEGIN
          lbValidBatch := TRUE;
        END;
      END;

      EXIT(lbValidBatch);
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
    }
    END.
  }
}

