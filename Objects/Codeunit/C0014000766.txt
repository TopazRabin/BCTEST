OBJECT Codeunit 14000766 UPS WS Transaction
{
  OBJECT-PROPERTIES
  {
    Date=07/13/20;
    Time=12:00:00 PM;
    Version List=SE0.62;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Country@1240020001 : Record 9;
      ShippingAgent@1240020008 : Record 291;
      PackingStation@1240020007 : Record 14000709;
      CarrierPackingStation@1240020006 : Record 14000729;
      ShippingSetup@1240020005 : Record 14000707;
      ShippingAgentService@1240020003 : Record 14000708;
      UPSWSRegistration@1240020002 : Record 14000777;
      UPSWSShippingAccount@1240020032 : Record 14000779;
      XMLRequestDocument@1240020017 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocOut@1240020016 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      CurrNode@1240020015 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNsMgr@1240020039 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      XMLEncode@1240020013 : Codeunit 14000768;
      XMLManagement@1240020014 : Codeunit 14000767;
      Shipping@1240020035 : Codeunit 14000701;
      NameAndAddressMgt@1240020036 : Codeunit 14000709;
      FileManagement@1240020044 : Codeunit 419;
      BufferFileName@1240020019 : Text[250];
      HTTPResponse@1240020012 : Text[1024];
      TransactionResponse@1240020011 : Text[1024];
      DocNameSpace@1240020000 : Text[30];
      "Response Severity"@1240020009 : Text[150];
      XMLFilePath@1240020022 : Text[250];
      RequestFile@1240020041 : Text[250];
      ResponseFile@1240020042 : Text[250];
      ShippingSetupRetrieved@1240020010 : Boolean;
      UPSWSRegistrationRetrieved@1240020020 : Boolean;
      Text001@1240020021 : TextConst 'ENU=Communication with UPS...';
      Text003@1240020023 : TextConst 'ENU=%1 %2 is not valid for %3.';
      Text004@1240020024 : TextConst 'ENU=Shipment must be single piece forward shipment for %1.';
      Text005@1240020025 : TextConst 'ENU=UPS SurePost”';
      Text006@1240020026 : TextConst 'ENU=Please create a UPS Web Service profile in UPS WS Setup.';
      SurePost@1240020027 : Boolean;
      Text007@1240020028 : TextConst 'ENU=Successful.';
      Text008@1240020029 : TextConst 'ENU=%1 is limited to 3 items.';
      Text009@1240020030 : TextConst 'ENU=%1 is required for %2.';
      Text010@1240020031 : TextConst 'ENU=At least one item is required for %1.';
      Text011@1240020033 : TextConst 'ENU=Shipping Agent Account %1 on Package %2 is not a UPS Web Services account.';
      Text012@1240020034 : TextConst 'ENU=Account %1 needs to be added to the UPS WS Profile.';
      Text013@1240020037 : TextConst 'ENU=Shipping Agent Account %1 is not a UPS Web Services account.';
      Text014@1240020038 : TextConst 'ENU=Shipping Agent Account %1 on the Package %2 is different than the Shipping Agent Account %3 on Carrier Packing Station %4.';
      Text015@1240020004 : TextConst 'ENU=Residential Delivery and Dimensions are required for %1';
      Text016@1240020040 : TextConst 'ENU=%1 %2 is missing.';
      ShowResponseError@1240020018 : Boolean;

    PROCEDURE CreateRegisterRequest@1240020000(VAR UPSWSRegistration1@1240020003 : Record 14000777);
    VAR
      UPSWSMgmt@1240020000 : Codeunit 14000767;
      Value1@1240020001 : Text[16];
      Value2@1240020002 : Text[26];
      RequestType@1240020004 : Text[30];
      RequestOption@1240020005 : Text[30];
    BEGIN
      GetSetupInfo;
      StartXMLCreation;

      Value1 := XMLManagement.CreateUnique(1);
      Value2 := XMLManagement.CreateUnique(2);
      RequestType := 'Register';
      RequestOption := 'RegisterRequest';

      XMLEncode.CreateSOAPRequest(XMLRequestDocument,RequestOption,BufferFileName);
      XMLEncode.CreateRequestHeader(RequestType,RequestOption,XMLRequestDocument);
      XMLEncode.CreateRegisterRequest(XMLRequestDocument,FALSE,Value1,Value2);
      HTTPResponse := HTTPRequest(XMLRequestDocument,XMLDocOut,RequestType);

      IF CarrierPackingStation."UPS WS Save XML" THEN BEGIN
        RequestFile := XMLFilePath + '-RegisterRequest.xml';
        ResponseFile := XMLFilePath + '-RegisterResponse.xml';
        XMLRequestDocument.Save(RequestFile);
        XMLDocOut.Save(ResponseFile);
        XMLManagement.MoveFileToClient(RequestFile);
        XMLManagement.MoveFileToClient(ResponseFile);
      END;

      IF HTTPResponse <> '' THEN BEGIN
        ERROR(HTTPResponse);
      END ELSE BEGIN
        DocNameSpace := XMLEncode.GetDocNameSpace(RequestType,'');
        CheckXMLResponseError(XMLDocOut,DocNameSpace,TRUE);
        UPSWSRegistration1.Username := UPSWSMgmt.Cipher(Value1,TRUE,FALSE);
        UPSWSRegistration1.Password := UPSWSMgmt.Cipher(Value2,TRUE,FALSE);
        UPSWSRegistration1."Create UPS WS Profile" := TRUE;
        UPSWSRegistration1."Registration Complete" := TRUE;
        UPSWSRegistration1.MODIFY;
      END;

      CLEAR(XMLRequestDocument);
      CLEAR(XMLDocOut);
    END;

    PROCEDURE AddAccountRequest@1240020012(VAR UPSWSShippingAccount@1240020000 : Record 14000779);
    VAR
      RequestType@1240020002 : Text[30];
      RequestOption@1240020001 : Text[30];
    BEGIN
      GetSetupInfo;
      StartXMLCreation;

      IF NOT(UPSWSRegistration."Create UPS WS Profile") THEN
        ERROR(Text006);

      RequestType := 'Register';
      RequestOption := 'AddAccount';

      XMLEncode.CreateSOAPRequest(XMLRequestDocument,RequestOption,BufferFileName);
      XMLEncode.CreateRequestHeader(RequestType,RequestOption,XMLRequestDocument);
      XMLEncode.AddAccountRequest(XMLRequestDocument,FALSE,UPSWSShippingAccount);
      HTTPResponse := HTTPRequest(XMLRequestDocument,XMLDocOut,'Register');

      IF CarrierPackingStation."UPS WS Save XML" THEN BEGIN
        RequestFile := XMLFilePath + '-AddAcctRequest.xml';
        ResponseFile := XMLFilePath + '-AddAcctResponse.xml';
        XMLRequestDocument.Save(RequestFile);
        XMLDocOut.Save(ResponseFile);
        XMLManagement.MoveFileToClient(RequestFile);
        XMLManagement.MoveFileToClient(ResponseFile);
      END;

      IF HTTPResponse <> '' THEN BEGIN
        ERROR(HTTPResponse);
      END ELSE BEGIN
        CheckXMLResponseError(XMLDocOut,DocNameSpace,TRUE);
        UPSWSShippingAccount."Account Added" := TRUE;
        UPSWSShippingAccount.MODIFY;
      END;

      CLEAR(XMLRequestDocument);
      CLEAR(XMLDocOut);
    END;

    PROCEDURE CreateLicenseAgreementRequest@1240020001();
    VAR
      UPSInfo@1240020003 : Record 14000778;
      XMLManagement@1240020001 : Codeunit 14000767;
      CurrNode@1240020009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ChildNode@1240020007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      AgreementOutstream@1240020002 : OutStream;
      Agreement@1240020008 : BigText;
      Nodepos@1240020006 : Integer;
      Nodelength@1240020005 : Integer;
      MaxTextLen@1240020004 : Integer;
      DocNameSpace@1240020012 : Text[200];
    BEGIN
      GetSetupInfo;
      StartXMLCreation;

      XMLEncode.CreateLicenseAgreementRequest(XMLRequestDocument,BufferFileName,FALSE);
      XMLRequestDocument.Load(BufferFileName);
      HTTPResponse := HTTPRequest(XMLRequestDocument,XMLDocOut,'License');

      IF CarrierPackingStation."UPS WS Save XML" THEN BEGIN
        RequestFile := XMLFilePath + '-AgreementRequest.xml';
        ResponseFile := XMLFilePath + '-AgreementResponse.xml';
        XMLRequestDocument.Save(RequestFile);
        XMLDocOut.Save(ResponseFile);
        XMLManagement.MoveFileToClient(RequestFile);
        XMLManagement.MoveFileToClient(ResponseFile);
      END;

      IF HTTPResponse <> '' THEN BEGIN
        ERROR(HTTPResponse);
      END ELSE BEGIN
        CheckXMLResponseError(XMLDocOut,'AccessLicenseAgreement',FALSE);
      END;

      WITH XMLManagement DO BEGIN
        DocNameSpace := '';
        CurrNode := XMLDocOut.DocumentElement;

        UPSInfo.INIT;
        UPSInfo."License Agreement".CREATEOUTSTREAM(AgreementOutstream);

        IF FindNode(CurrNode,'//AccessLicenseAgreementResponse/AccessLicenseText',CurrNode,XMLNsMgr) THEN BEGIN
          CLEAR(Agreement);

          ChildNode := CurrNode.FirstChild;

          Nodepos := 1;
          Nodelength := STRLEN(ChildNode.InnerText);
          MaxTextLen := 250;
          WHILE Nodelength > Nodepos DO BEGIN
            Agreement.ADDTEXT(FORMAT(COPYSTR(ChildNode.InnerText,Nodepos,MaxTextLen)));
            Nodepos += MaxTextLen;
          END;

          Agreement.WRITE(AgreementOutstream);
          UPSInfo.INSERT;
        END;
      END;

      CLEAR(XMLRequestDocument);
      CLEAR(XMLDocOut);
    END;

    PROCEDURE CreateLicenseRequest@1240020002(VAR UPSWSSetup1@1240020013 : Record 14000777);
    VAR
      UPSWSSetup@1240020012 : Record 14000777;
    BEGIN
      GetSetupInfo;
      StartXMLCreation;

      IF UPSWSSetup.GET THEN BEGIN
        XMLEncode.CreateLicenseRequest(XMLRequestDocument,BufferFileName,FALSE);
        XMLRequestDocument.Load(BufferFileName);
        HTTPResponse := HTTPRequest(XMLRequestDocument,XMLDocOut,'License');

        IF CarrierPackingStation."UPS WS Save XML" THEN BEGIN
          RequestFile := XMLFilePath + '-LicenseRequest.xml';
          ResponseFile := XMLFilePath + '-LicenseResponse.xml';
          XMLRequestDocument.Save(RequestFile);
          XMLDocOut.Save(ResponseFile);
          XMLManagement.MoveFileToClient(RequestFile);
          XMLManagement.MoveFileToClient(ResponseFile);
        END;

        IF HTTPResponse <> '' THEN BEGIN
          ERROR(HTTPResponse);
        END ELSE BEGIN
          CheckXMLResponseError(XMLDocOut,'AccessLicense',TRUE);
        END;

        WITH XMLManagement DO BEGIN
          DocNameSpace := '';
          CurrNode := XMLDocOut.DocumentElement;

          IF FindNode(CurrNode,'//AccessLicenseResponse/AccessLicenseNumber',CurrNode,XMLNsMgr) THEN BEGIN
            UPSWSSetup1."Access License" := Cipher(CurrNode.InnerText,TRUE,FALSE);
            UPSWSSetup1."Create Access License" := TRUE;
            UPSWSSetup1.MODIFY;
            COMMIT;
          END;
        END;

        CLEAR(XMLRequestDocument);
        CLEAR(XMLDocOut);
      END;
    END;

    PROCEDURE ClosePackage@1240020009(VAR CurrentPackage@1240020000 : Record 14000701;VAR MultiDocPackageTmp@1240020004 : Record 14000701;CurrentShippingAgent@1240020007 : Record 291;PrintLabel@1240020008 : Boolean);
    VAR
      CurrentUPSOptionPage@1240020001 : Record 14000761;
      SplitPackage@1240020019 : Record 14000701;
      RealPackage@1240020021 : Record 14000701;
      Convert@1240020015 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      Bytes@1240020018 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      MemoryStream@1240020020 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      XMLNodeList@1240020041 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      ChildNode@1240020042 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FoundNode@1240020043 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TempOutStream@1240020016 : OutStream;
      TempFile@1240020017 : File;
      LabelFileName@1240020002 : Text[250];
      CN22FileName@1240020005 : Text[250];
      FileExtension@1240020012 : Text[3];
      DecodedCN22FileName@1240020009 : Text[250];
      RequestType@1240020014 : Text[30];
      RequestOption@1240020013 : Text[30];
      FileNo@1240020010 : Integer;
      NodeLoop@1240020045 : Integer;
      PackageLoop@1240020044 : Integer;
      IsPDF@1240020011 : Boolean;
    BEGIN
      WITH CurrentPackage DO BEGIN
        GetSetupInfo;
        StartXMLCreation;
        GetUPSWSShippingAccount("Shipping Agent Account No.");
        ShippingAgent.GET("Shipping Agent Code");

        IF NOT(UPSWSRegistration."Registration Complete") THEN
          ERROR(Text006);

        "Closed by Packing Station Code" := PackingStation.Code;
        "Exclude From Manifest" := TRUE;
        ClearTotalValueFields;
        VALIDATE("Calculation Weight",GetWeight);
        ShippingAgentService.GET(CurrentShippingAgent.Code,"Shipping Agent Service",FALSE);
        CurrentUPSOptionPage.GET(CurrentUPSOptionPage.Type::Package,"No.",0,0);
        TESTFIELD("Calculation Weight");
        GetCalculationFields(1,'>');

        IF "Shipping Agent Account No." <> CarrierPackingStation."UPS Shipping Agent Account No." THEN
          ERROR(Text014,
            "Shipping Agent Account No.","No.",CarrierPackingStation."UPS Shipping Agent Account No.",
            CarrierPackingStation.Code);

        IF "Service Indicator" IN ['92','93','94','95'] THEN BEGIN
          SurePost := TRUE;
          CheckSurePostQualifications(CurrentPackage,CurrentUPSOptionPage);
        END;

        CheckName(
          ShippingAgent,0,"Ship-to Name","Ship-to Name 2","Ship-to Contact",
              FIELDCAPTION("Ship-to Name"),FIELDCAPTION("Ship-to Name 2"),FIELDCAPTION("Ship-to Contact"));
        CheckAddress(
          ShippingAgent,0,"Ship-to Address","Ship-to Address 2","Ship-to City",
          "Ship-to ZIP Code","Ship-to State","Ship-to Country Code",
          FIELDCAPTION("Ship-to Address"),FIELDCAPTION("Ship-to Address 2"),
          FIELDCAPTION("Ship-to City"),FIELDCAPTION("Ship-to ZIP Code"),
          FIELDCAPTION("Ship-to State"),FIELDCAPTION("Ship-to Country Code"));

        IF "Blind Shipment" OR "Double Blind Shipment" THEN BEGIN
          CheckName(
            ShippingAgent,0,"Blind Ship-from Name","Blind Ship-from Name 2","Blind Ship-from Contact",
            FIELDCAPTION("Blind Ship-from Name"),FIELDCAPTION("Blind Ship-from Name 2"),
            FIELDCAPTION("Blind Ship-from Contact"));
          CheckAddress(
            ShippingAgent,0,"Blind Ship-from Address","Blind Ship-from Address 2","Blind Ship-from City",
            "Blind Ship-from ZIP Code","Blind Ship-from State","Blind Ship-from Country Code",
            FIELDCAPTION("Blind Ship-from Address"),FIELDCAPTION("Blind Ship-from Address 2"),
            FIELDCAPTION("Blind Ship-from City"),FIELDCAPTION("Blind Ship-from ZIP Code"),
            FIELDCAPTION("Blind Ship-from State"),FIELDCAPTION("Blind Ship-from Country Code"));
        END;

        RequestType := 'Shipping';
        RequestOption := 'ShipmentRequest';

        XMLEncode.CreateSOAPRequest(XMLRequestDocument,RequestOption,BufferFileName);
        XMLEncode.CreateRequestHeader(RequestType,RequestOption,XMLRequestDocument);
        XMLEncode.ClosePackage(CurrentPackage,XMLRequestDocument,FALSE);
        HTTPResponse := HTTPRequest(XMLRequestDocument,XMLDocOut,RequestType);

        IF CarrierPackingStation."UPS WS Save XML" THEN BEGIN
          RequestFile := XMLFilePath + '-ShipmentRequest.xml';
          ResponseFile := XMLFilePath + '-ShipmentResponse.xml';
          XMLRequestDocument.Save(RequestFile);
          XMLDocOut.Save(ResponseFile);
          XMLManagement.MoveFileToClient(RequestFile);
          XMLManagement.MoveFileToClient(ResponseFile);
         END;

        IF HTTPResponse <> '' THEN BEGIN
          ERROR(HTTPResponse);
        END ELSE BEGIN
          DocNameSpace := XMLEncode.GetDocNameSpace(RequestType,'');
          CheckXMLResponseError(XMLDocOut,DocNameSpace,TRUE);
        END;

        Surcharge := 0;
        "Base Charge" := 0;
        "Discount Amount" := 0;
        "Shipping Cost" := 0;
        "Shipping Charge" := 0;
        Markup := 0;
        "Accessorial Charge" := 0;

        LabelFileName := PackingStation.CalcLabelFileName(CarrierPackingStation."UPS Buffer File");

        WITH XMLManagement DO BEGIN
          IF "Service Indicator" = 'GFP' THEN BEGIN
            IF FindNode(CurrNode,'//'+DocNameSpace+':ShipmentResults/'+DocNameSpace+':ShipmentCharges/'+
              DocNameSpace+':TotalCharges/'+DocNameSpace+':MonetaryValue',CurrNode,XMLNsMgr)
            THEN
              IF STRLEN(CurrNode.InnerText) > 0 THEN
                "Base Charge" := Text2Decimal(CurrNode.InnerText);
            CurrNode := XMLDocOut.DocumentElement;

            IF FindNode(CurrNode,'//'+DocNameSpace+':ShipmentResults/'+DocNameSpace+':BillingWeight/'+
              DocNameSpace+':Weight',CurrNode,XMLNsMgr)
            THEN
              IF STRLEN(CurrNode.InnerText) > 0 THEN
                "Calculation Weight" := Text2Decimal(CurrNode.InnerText);
            CurrNode := XMLDocOut.DocumentElement;
          END ELSE BEGIN
            IF FindNode(CurrNode,'//'+DocNameSpace+':ShipmentResults/'+DocNameSpace+':NegotiatedRateCharges/'+
              DocNameSpace+':TotalCharge/'+DocNameSpace+':MonetaryValue',CurrNode,XMLNsMgr)
            THEN BEGIN
              IF STRLEN(CurrNode.InnerText) > 0 THEN
                "Base Charge" := Text2Decimal(CurrNode.InnerText);
              CurrNode := XMLDocOut.DocumentElement;
            END ELSE BEGIN
              CurrNode := XMLDocOut.DocumentElement;
              IF FindNode(CurrNode,'//'+DocNameSpace+':ShipmentResults/'+DocNameSpace+':ShipmentCharges/'+
                DocNameSpace+':TransportationCharges/'+DocNameSpace+':MonetaryValue',CurrNode,XMLNsMgr) THEN
                IF STRLEN(CurrNode.InnerText) > 0 THEN
                  "Base Charge" := Text2Decimal(CurrNode.InnerText);
                CurrNode := XMLDocOut.DocumentElement;
            END;
          END;

          IF SurePost THEN BEGIN
            IF FindNode(CurrNode,'//'+DocNameSpace+':ShipmentResults/'+DocNameSpace+':PackageResults/'+
              DocNameSpace+':ServiceOptionsCharges/'+DocNameSpace+':MonetaryValue',CurrNode,XMLNsMgr) THEN
              IF STRLEN(CurrNode.InnerText) > 0 THEN
                "Accessorial Charge" := "Accessorial Charge" + Text2Decimal(CurrNode.InnerText);
              CurrNode := XMLDocOut.DocumentElement;

            IF FindNode(CurrNode,'//'+DocNameSpace+':ShipmentResults/'+DocNameSpace+':PackageResults/'+
              DocNameSpace+':NonMachineableCharges/'+DocNameSpace+':MonetaryValue',CurrNode,XMLNsMgr) THEN
              IF STRLEN(CurrNode.InnerText) > 0 THEN
                "Accessorial Charge" := "Accessorial Charge" + Text2Decimal(CurrNode.InnerText);
            CurrNode := XMLDocOut.DocumentElement;

            IF FindNode(CurrNode,'//'+DocNameSpace+':ShipmentResults/'+DocNameSpace+':PackageResults/'+
              DocNameSpace+':SurePostDasCharges/'+DocNameSpace+':MonetaryValue',CurrNode,XMLNsMgr) THEN
              IF STRLEN(CurrNode.InnerText) > 0 THEN
                Surcharge := Text2Decimal(CurrNode.InnerText);
            CurrNode := XMLDocOut.DocumentElement;

            IF FindNode(CurrNode,'//'+DocNameSpace+':ShipmentResults/'+DocNameSpace+':PackageResults/'+
              DocNameSpace+':TrackingNumber',CurrNode,XMLNsMgr) THEN
              IF STRLEN(CurrNode.InnerText) > 0 THEN
                "External Tracking No." := CurrNode.InnerText;
            CurrNode := XMLDocOut.DocumentElement;

            IF FindNode(CurrNode,'//'+DocNameSpace+':ShipmentResults/'+DocNameSpace+':PackageResults/'+
              DocNameSpace+':USPSPICNumber',CurrNode,XMLNsMgr) THEN
              IF STRLEN(CurrNode.InnerText) > 0 THEN
                CurrentUPSOptionPage."USPS PIC Number" := CurrNode.InnerText;
            CurrNode := XMLDocOut.DocumentElement;
          END;

          CurrNode := XMLDocOut.DocumentElement;

          XMLNodeList :=
            XMLDocOut.SelectNodes('//'+
              DocNameSpace+':ShipmentResults/'+
              DocNameSpace+':PackageResults',XMLNsMgr);

          FOR NodeLoop := 0 TO XMLNodeList.Count - 1 DO BEGIN
            PackageLoop := NodeLoop + 1;

            IF PackageLoop <> "Total Packages" THEN BEGIN
              //Filter for getting packages based on currentpackage which is the last package
              SplitPackage.RESET;
              SplitPackage.SETCURRENTKEY("Source Type", "Source Subtype", "Source ID");
              SplitPackage.SETRANGE("Source Type","Source Type");
              SplitPackage.SETRANGE("Source Subtype","Source Subtype");
              IF "Multi Document Package" THEN
                SplitPackage.SETFILTER("Source ID","Multi Document No.")
              ELSE
                SplitPackage.SETRANGE("Source ID","Source ID");
              SplitPackage.SETRANGE("Package No.",PackageLoop);
              IF SplitPackage.FIND('-') THEN
                REPEAT
                  SplitPackage.GetCalculationFields(1,'>');
                UNTIL SplitPackage.NEXT = 0;
            END;

            CurrNode := XMLNodeList.Item(NodeLoop);
            ChildNode := CurrNode.FirstChild;

            //Get label
            IF FindNode(CurrNode,DocNameSpace+':TrackingNumber',FoundNode,XMLNsMgr) THEN
              IF PackageLoop = "Total Packages" THEN BEGIN
                IF STRLEN(FoundNode.InnerText) > 0 THEN BEGIN
                  "External Tracking No." := FoundNode.InnerText;
                  MODIFY;
                END;
              END ELSE BEGIN
                IF SplitPackage.FIND('-') THEN BEGIN
                  REPEAT
                    IF STRLEN(FoundNode.InnerText) > 0 THEN BEGIN
                      SplitPackage."External Tracking No." := FoundNode.InnerText;
                      SplitPackage.MODIFY;
                    END;
                  UNTIL SplitPackage.NEXT = 0;
                  IF "Multi Document Package" THEN BEGIN
                    IF NOT(RealPackage.GET(SplitPackage."Original Package No.") )THEN
                      ERROR(Text016,
                        RealPackage."No.",
                        SplitPackage."Original Package No.")
                    ELSE BEGIN
                      IF STRLEN(FoundNode.InnerText) > 0 THEN BEGIN
                        RealPackage."External Tracking No." := FoundNode.InnerText;
                        RealPackage.MODIFY;
                      END;
                    END;
                  END;
                END;
              END;

              IF  FindNode(CurrNode,DocNameSpace+':ShippingLabel/'+DocNameSpace+':GraphicImage',FoundNode,XMLNsMgr)
              THEN BEGIN
                IF ERASE(LabelFileName) THEN;
                CLEAR(MemoryStream);

                Bytes := Convert.FromBase64String(FoundNode.InnerText);
                MemoryStream := MemoryStream.MemoryStream(Bytes);
                TempFile.CREATE(LabelFileName);
                TempFile.CREATEOUTSTREAM(TempOutStream);
                MemoryStream.WriteTo(TempOutStream);
                TempFile.CLOSE;
                MemoryStream.Flush;
                MemoryStream.Close;
                IF PackageLoop = "Total Packages" THEN
                  CurrentPackage.InsertLabelFile(
                    LabelFileName,'UPS Label',11,CarrierPackingStation."UPS Label Printer Port",
                    PackingStation.Code,NOT PackingStation."No Label Printer" AND PrintLabel,
                    PackingStation."Do Not Import Label File")
                ELSE
                  SplitPackage.InsertLabelFile(
                    LabelFileName,'UPS Label',11,CarrierPackingStation."UPS Label Printer Port",
                    PackingStation.Code,NOT PackingStation."No Label Printer" AND PrintLabel,
                    PackingStation."Do Not Import Label File");

                IF PrintLabel THEN
                  PackingStation.PrintLabelFile(
                    LabelFileName,CarrierPackingStation."UPS Label Printer Port",
                    PackingStation."No Label Printer",PackingStation."Auto Delete Label Buffer File");
      //        END;
            END;
            CurrNode := XMLDocOut.DocumentElement;

          FileExtension := 'txt';
          IF CarrierPackingStation."UPS WS CN22 Form Type" =
             CarrierPackingStation."UPS WS CN22 Form Type"::PDF THEN BEGIN
             IsPDF := TRUE;
             FileExtension := 'PDF';
          END;

          //Get CN22 form
          IF (UPPERCASE("Ship-to City") IN ['APO','DPO','FPO']) THEN BEGIN
            IF FindNode(CurrNode,'//'+DocNameSpace+':ShipmentResults/'+DocNameSpace+
              ':Form/'+DocNameSpace+':Image/'+DocNameSpace+
              ':ImageFormat/'+DocNameSpace+':Code',CurrNode,XMLNsMgr) THEN
              IF STRLEN(CurrNode.InnerText) > 0 THEN BEGIN
                FileNo := 0;
                CN22FileName := PackingStation.CalcLabelFileName(CarrierPackingStation."UPS Buffer File");
                DecodedCN22FileName := STRSUBSTNO('%1.%2.%3',
                  CN22FileName,FileNo + 1,FileExtension);
                IF ERASE(DecodedCN22FileName) THEN;

                IF FindNode(CurrNode,'//'+DocNameSpace+':ShipmentResults/'+
                  DocNameSpace+':Form/'+DocNameSpace+':Image/'+DocNameSpace+
                  ':GraphicImage',CurrNode,XMLNsMgr)
                THEN BEGIN
                  Bytes := Convert.FromBase64String(CurrNode.InnerText);
                  MemoryStream := MemoryStream.MemoryStream(Bytes);
                  TempFile.CREATE(DecodedCN22FileName);
                  TempFile.CREATEOUTSTREAM(TempOutStream);
                  MemoryStream.WriteTo(TempOutStream);
                  TempFile.CLOSE;
                  MemoryStream.Flush;
                  MemoryStream.Close;
                  IF IsPDF THEN BEGIN
                    CurrentPackage.InsertLabelFile(
                      DecodedCN22FileName,'UPS PDF',28,CarrierPackingStation."UPS Label Printer Port",
                      PackingStation.Code,NOT PackingStation."No Label Printer" AND PrintLabel,
                      PackingStation."Do Not Import Label File");

                    IF PrintLabel THEN
                      PackingStation.PrintPDFFile(
                        DecodedCN22FileName,CarrierPackingStation."UPS Label Printer Port",
                        PackingStation."No Label Printer");
                  END ELSE BEGIN
                    CurrentPackage.InsertLabelFile(
                      DecodedCN22FileName,'UPS Label',11,CarrierPackingStation."UPS Label Printer Port",
                      PackingStation.Code,NOT PackingStation."No Label Printer" AND PrintLabel,
                      PackingStation."Do Not Import Label File");
                    SLEEP(4000);
                    IF PrintLabel THEN
                      PackingStation.PrintLabelFile(
                        DecodedCN22FileName,CarrierPackingStation."UPS Label Printer Port",
                        PackingStation."No Label Printer",PackingStation."Auto Delete Label Buffer File");
                  END;
                END;
              END;
            END;
          END;
        END;
        CurrentUPSOptionPage.MODIFY;

        "Shipping Cost" := "Base Charge" + "Accessorial Charge" + Surcharge;
        Markup :=
          Shipping.GetMarkup(
            ShippingAgentService,"Shipping Cost","Ship-to Type","Ship-to No.","Ship-to Code");
        IF "Override Shipping Charge" <> 0 THEN
          "Shipping Charge" := "Override Shipping Charge"
        ELSE
          "Shipping Charge" := "Shipping Cost" + Markup + "Additional Shipping Charge";
        IF "Packing Date" < WORKDATE THEN
          "Packing Date" := WORKDATE;
        "Packing Time" := TIME;
        "Packed By" := USERID;
        Closed := TRUE;
        MODIFY;

        CLEAR(XMLRequestDocument);
        CLEAR(XMLDocOut);
      END;
    END;

    PROCEDURE OpenPackage@1240020011(VAR CurrentPackage@1240020000 : Record 14000701);
    VAR
      LabelFiles@1240020001 : Record 14000710;
      FirstPackage@1240020002 : Record 14000701;
      Package@1240020003 : Record 14000701;
      VirtualPackage@1240020004 : Record 14000701;
      SplitPackage@1240020005 : Record 14000701;
      MultiDocumentPackageMgt@1240020006 : Codeunit 14000703;
    BEGIN
      WITH CurrentPackage DO BEGIN
        TESTFIELD(Closed);
        TESTFIELD("Pickup Date",0D);

        IF "Manual Shipment" THEN BEGIN
          Closed := FALSE;
          MODIFY;
          COMMIT;
          EXIT;
        END;

        GetUPSWSShippingAccount("Shipping Agent Account No.");
        ShippingAgent.GET("Shipping Agent Code");

        IF NOT(UPSWSShippingAccount.Demo) THEN BEGIN
          IF "Service Indicator" = 'GFP' THEN BEGIN
            IF "First Package No." <> '' THEN
              IF FirstPackage.GET("First Package No.") THEN
                  VoidPackageShipment(FirstPackage);
          END ELSE
            VoidPackageShipment(CurrentPackage);
        END;

        IF "Service Indicator" = 'GFP' THEN BEGIN
          Closed := FALSE;
          "External Tracking No." := '';
          MODIFY;
          COMMIT;

          Package.RESET;
          Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          Package.SETRANGE("Source Type","Source Type");
          Package.SETRANGE("Source Subtype","Source Subtype");
          IF "Multi Document Package" THEN
            Package.SETFILTER("Source ID", "Multi Document No.")
          ELSE
            Package.SETRANGE("Source ID", "Source ID");
          IF Package.FIND('-') THEN
            REPEAT
              IF Package."Original Package No." <> '' THEN BEGIN
                VirtualPackage.RESET;
                VirtualPackage.SETCURRENTKEY("Original Package No.");
                VirtualPackage.SETRANGE("Original Package No.",Package."Original Package No.");
                IF VirtualPackage.FIND('-') THEN
                  REPEAT
                    MultiDocumentPackageMgt.DeleteMultiDocPackage(VirtualPackage);
                  UNTIL VirtualPackage.NEXT = 0;

                IF SplitPackage.GET(Package."Original Package No.") THEN
                BEGIN
                  SplitPackage."Source ID" := VirtualPackage."Source ID";
                  SplitPackage."Multi Document Package Split" := FALSE;
                  SplitPackage.Closed := FALSE;
                  SplitPackage."External Tracking No." := '';
                  SplitPackage.MODIFY;
                END;
              END ELSE BEGIN
                Package.Closed := FALSE;
                Package."External Tracking No." := '';
                Package.MODIFY;
              END;
           UNTIL Package.NEXT = 0;
        END ELSE BEGIN
          "External Tracking No." := '';

          IF COD AND "Add Shipping Charge to COD Amt" THEN
            "COD Amount" := "COD Amount" - "Shipping Charge";

          Closed := FALSE;
          MODIFY;
        END;
        LabelFiles.RESET;
        LabelFiles.SETCURRENTKEY(Type,"No.","File No.");
        LabelFiles.SETRANGE(Type,LabelFiles.Type::Package);
        LabelFiles.SETRANGE(LabelFiles."No.","No.");
        LabelFiles.DELETEALL;
      END;
    END;

    PROCEDURE OpenPostedPackage@1240020015(PostedPackage@1240020000 : Record 14000704);
    VAR
      LabelFiles@1240020001 : Record 14000710;
      FirstPackage@1240020006 : Record 14000704;
      Package@1240020005 : Record 14000704;
      VirtualPackage@1240020004 : Record 14000704;
      SplitPackage@1240020003 : Record 14000704;
    BEGIN
      WITH PostedPackage DO BEGIN
        TESTFIELD(Closed);

        IF "Manual Shipment" THEN BEGIN
          Closed := FALSE;
          MODIFY;
          COMMIT;
          EXIT;
        END;

        GetUPSWSShippingAccount("Shipping Agent Account No.");
        ShippingAgent.GET("Shipping Agent Code");

        IF NOT(UPSWSShippingAccount.Demo) THEN BEGIN
          IF "Service Indicator" = 'GFP' THEN BEGIN
            IF "First Package No." <> '' THEN
              IF FirstPackage.GET("First Package No.") THEN
                VoidPostedPackageShipment(FirstPackage);
          END ELSE
            VoidPostedPackageShipment(PostedPackage);
        END;

        IF "Service Indicator" = 'GFP' THEN BEGIN
          Closed := FALSE;
          "External Tracking No." := '';

          Package.RESET;
          Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          Package.SETRANGE("Source Type","Source Type");
          Package.SETRANGE("Source Subtype","Source Subtype");
          IF "Multi Document Package" THEN
            Package.SETFILTER("Source ID", "Multi Document No.")
          ELSE
            Package.SETRANGE("Source ID", "Source ID");
          IF Package.FIND('-') THEN
            REPEAT
              IF Package."Original Package No." <> '' THEN BEGIN
                VirtualPackage.RESET;
                VirtualPackage.SETCURRENTKEY("Original Package No.");
                VirtualPackage.SETRANGE("Original Package No.",Package."Original Package No.");
                IF VirtualPackage.FIND('-') THEN
                  REPEAT
                    VirtualPackage.Closed := FALSE;
                    VirtualPackage."External Tracking No." := '';
                    VirtualPackage.MODIFY;
                  UNTIL VirtualPackage.NEXT = 0;

                IF SplitPackage.GET(Package."Original Package No.") THEN
                BEGIN
                  SplitPackage."Source ID" := VirtualPackage."Source ID";
                  SplitPackage."Multi Document Package Split" := FALSE;
                  SplitPackage.Closed := FALSE;
                  SplitPackage."External Tracking No." := '';
                  SplitPackage.MODIFY;
                END;
              END ELSE BEGIN
                Package.Closed := FALSE;
                Package."External Tracking No." := '';
                Package.MODIFY;
              END;
           UNTIL Package.NEXT = 0;
        END ELSE BEGIN
          "External Tracking No." := '';

          IF COD AND "Add Shipping Charge to COD Amt" THEN
            "COD Amount" := "COD Amount" - "Shipping Charge";

          Closed := FALSE;
          MODIFY;
        END;

        LabelFiles.RESET;
        LabelFiles.SETCURRENTKEY(Type,"No.","File No.");
        LabelFiles.SETRANGE(Type,LabelFiles.Type::Package);
        LabelFiles.SETRANGE(LabelFiles."No.","No.");
        LabelFiles.DELETEALL;
      END;
    END;

    PROCEDURE PrintPackageLabel@20(CurrentPackage@1000000000 : Record 14000701;PrintLabel@1240030003 : Boolean);
    VAR
      LabelFile@1240030001 : Record 14000710;
    BEGIN
      WITH CurrentPackage DO BEGIN
        IF "Manual Shipment" THEN
          EXIT;
        TESTFIELD(Closed);

        GetSetupInfo;

        IF PackingStation."No Label Printer" THEN
          EXIT;

        CarrierPackingStation.TESTFIELD("UPS Label Printer Port");
        CarrierPackingStation.TESTFIELD("UPS Buffer File");
        CarrierPackingStation.TESTFIELD("UPS Eltron Label Media Type");

        LabelFile.SETCURRENTKEY(Type,"No.","File Type");
        LabelFile.SETRANGE(Type,LabelFile.Type::Package);
        LabelFile.SETRANGE("No.","No.");
        IF LabelFile.FIND('-') THEN
          REPEAT
            LabelFile.PrintLabel;
            SLEEP(4000);
          UNTIL LabelFile.NEXT = 0;
      END;
    END;

    PROCEDURE RePrintPostedPackageLabel@21(VAR PostedPackage@1000000000 : Record 14000704);
    VAR
      LabelFile@1240020000 : Record 14000710;
    BEGIN
      WITH PostedPackage DO BEGIN
        IF "Manual Shipment" THEN
          EXIT;
        TESTFIELD(Closed);

        GetSetupInfo;

        IF PackingStation."No Label Printer" THEN
          EXIT;

        CarrierPackingStation.TESTFIELD("UPS Label Printer Port");
        CarrierPackingStation.TESTFIELD("UPS Buffer File");
        CarrierPackingStation.TESTFIELD("UPS Eltron Label Media Type");

        LabelFile.SETCURRENTKEY(Type,"No.","File Type");
        LabelFile.SETRANGE(Type,LabelFile.Type::Package);
        LabelFile.SETRANGE("No.","No.");
        IF LabelFile.FIND('-') THEN
          REPEAT
            LabelFile.PrintLabel;
            SLEEP(4000);
          UNTIL LabelFile.NEXT = 0;
      END;
    END;

    PROCEDURE VoidPackageShipment@1240030003(CurrentPackage@1240030000 : Record 14000701);
    VAR
      RequestType@1240020001 : Text[30];
      RequestOption@1240020000 : Text[30];
    BEGIN
      WITH CurrentPackage DO BEGIN
        IF "External Tracking No." <> '' THEN BEGIN
          GetSetupInfo;
          StartXMLCreation;

          RequestType := 'Void';
          RequestOption := 'VoidShipment';

          XMLEncode.CreateSOAPRequest(XMLRequestDocument,RequestOption,BufferFileName);
          XMLEncode.CreateRequestHeader(RequestType,RequestOption,XMLRequestDocument);
          XMLEncode.OpenPackage(CurrentPackage);
          HTTPResponse := HTTPRequest(XMLRequestDocument,XMLDocOut,RequestType);

          IF CarrierPackingStation."UPS WS Save XML" THEN BEGIN
            RequestFile := XMLFilePath + '-VoidShipmentRequest.xml';
            ResponseFile := XMLFilePath + '-VoidShipmentResponse.xml';
            XMLRequestDocument.Save(RequestFile);
            XMLDocOut.Save(ResponseFile);
            XMLManagement.MoveFileToClient(RequestFile);
            XMLManagement.MoveFileToClient(ResponseFile);
          END;

          IF HTTPResponse <> '' THEN BEGIN
            ERROR(HTTPResponse);
          END ELSE BEGIN
            CheckXMLResponseError(XMLDocOut,DocNameSpace,TRUE);
          END;
        END;

        CLEAR(XMLRequestDocument);
        CLEAR(XMLDocOut);
      END;
    END;

    PROCEDURE VoidPostedPackageShipment@1240030000(PostedPackage@1240030000 : Record 14000704);
    VAR
      XMLDocOut@1240030006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      RequestType@1240020001 : Text[30];
      RequestOption@1240020000 : Text[30];
    BEGIN
      WITH PostedPackage DO BEGIN
        IF "External Tracking No." <> '' THEN BEGIN
          GetSetupInfo;
          StartXMLCreation;

          RequestType := 'Void';
          RequestOption := 'VoidShipment';

          XMLEncode.CreateSOAPRequest(XMLRequestDocument,RequestOption,BufferFileName);
          XMLEncode.CreateRequestHeader(RequestType,RequestOption,XMLRequestDocument);
          XMLEncode.OpenPostedPackage(PostedPackage);
           HTTPResponse := HTTPRequest(XMLRequestDocument,XMLDocOut,RequestType);

          IF CarrierPackingStation."UPS WS Save XML" THEN BEGIN
            RequestFile := XMLFilePath + '-VoidShipmentRequest.xml';
            ResponseFile := XMLFilePath + '-VoidShipmentResponse.xml';
            XMLRequestDocument.Save(RequestFile);
            XMLDocOut.Save(ResponseFile);
            XMLManagement.MoveFileToClient(RequestFile);
            XMLManagement.MoveFileToClient(ResponseFile);
          END;

          IF HTTPResponse <> '' THEN BEGIN
            ERROR(HTTPResponse);
          END ELSE BEGIN
            CheckXMLResponseError(XMLDocOut,DocNameSpace,TRUE);
          END;
          COMMIT;
        END;

        CLEAR(XMLRequestDocument);
        CLEAR(XMLDocOut);
      END;
    END;

    PROCEDURE TrackPackage@1240020013(CurrentPackage@1240020000 : Record 14000701);
    VAR
      UPSOptionPage@1240020001 : Record 14000761;
      UPSPostedOptionPage@1240020004 : Record 14000762;
      Selection@1240020002 : Integer;
      Text100@1240020003 : TextConst 'ENU=UPS,USPostal';
      USPSPICNumber@1240020005 : Text[35];
    BEGIN
      WITH CurrentPackage DO BEGIN
        IF "External Tracking No." <> '' THEN BEGIN
          GetSetupInfo;
          GetUPSWSShippingAccount("Shipping Agent Account No.");
          ShippingAgent.GET("Shipping Agent Code");

          IF UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.",0,0) THEN
            USPSPICNumber := UPSOptionPage."USPS PIC Number"
          ELSE IF UPSPostedOptionPage.GET("No.") THEN
            USPSPICNumber := UPSPostedOptionPage."USPS PIC Number";

          Selection := STRMENU(Text100);
          CASE Selection OF
            1:
              BEGIN
                HYPERLINK(
                  STRSUBSTNO(
                    ShippingAgent."Internet Address",CurrentPackage."External Tracking No."))
              END;
            2:
              BEGIN
                HYPERLINK(
                  STRSUBSTNO(
                    'http://trkcnfrm1.smi.usps.com/PTSInternetWeb/InterLabelInquiry.do?origTrackNum=%1',
                    USPSPICNumber,'US',
                    "Pickup Date",ShippingAgent."Account No."))
              END;
          END;
        END;
      END;
    END;

    PROCEDURE RateShop@1240020016(RateShopHeader@1240020003 : Record 14000741;VAR RateShopLine@1240020004 : Record 14000742;CurrentShippingAgentService@1240020005 : Record 14000708);
    VAR
      RequestType@1240020007 : Text[30];
      RequestOption@1240020006 : Text[30];
      ShipmentWeight@1240020000 : Decimal;
      ShipmentWeightRounded@1240020001 : Decimal;
    BEGIN
      WITH RateShopHeader DO BEGIN
        IF CurrentShippingAgentService."Service Indicator" IN ['92','93','94','95'] THEN
          SurePost := TRUE;

        IF SurePost AND (NOT("Residential Delivery") OR (Length = 0) OR
           (Width = 0) OR (Height = 0))
        THEN BEGIN
          RateShopLine."Service Error Message" := STRSUBSTNO(Text015,CurrentShippingAgentService.Description);
          EXIT;
        END;

        ShipmentWeight := GetWeight;
        IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::KGS THEN BEGIN
          ShipmentWeightRounded := ROUND(ShippingSetup.KiloToPound(ShipmentWeight),0.1,'>');
          "Calculation Weight (LBS)" :=
            ROUND(ShippingSetup.KiloToPound(ShipmentWeight / "No. of Packages"),0.1,'>');
          "Calculation Weight" := ROUND(ShipmentWeight / "No. of Packages",0.1,'>');
        END ELSE BEGIN
          ShipmentWeightRounded := ShipmentWeight;
          "Calculation Weight" := ROUND(ShipmentWeight / "No. of Packages",0.1,'>');
          "Calculation Weight (LBS)" := "Calculation Weight";
        END;

        GetSetupInfo;
        StartXMLCreation;

        GetUPSWSShippingAccount(CarrierPackingStation."UPS Shipping Agent Account No.");

        IF NOT(UPSWSRegistration."Registration Complete") THEN
          ERROR(Text006);

        RequestType := 'RateService';
        RequestOption := 'RateRequest';

        XMLEncode.CreateSOAPRequest(XMLRequestDocument,RequestOption,BufferFileName);
        XMLEncode.CreateRequestHeader(RequestType,RequestOption,XMLRequestDocument);
        XMLEncode.RateShop(RateShopHeader,RateShopLine,CurrentShippingAgentService,XMLRequestDocument,TRUE);
        HTTPResponse := HTTPRequest(XMLRequestDocument,XMLDocOut,RequestType);

        IF CarrierPackingStation."UPS WS Save XML" THEN BEGIN
          RequestFile := XMLFilePath + CurrentShippingAgentService.Code + '-RateRequest.xml';
          ResponseFile := XMLFilePath + CurrentShippingAgentService.Code + '-RateResponse.xml';
          XMLRequestDocument.Save(RequestFile);
          XMLDocOut.Save(ResponseFile);
          XMLManagement.MoveFileToClient(RequestFile);
          XMLManagement.MoveFileToClient(ResponseFile);
        END;

        IF HTTPResponse <> '' THEN BEGIN
          ERROR(HTTPResponse);
        END ELSE BEGIN
          DocNameSpace := XMLEncode.GetDocNameSpace(RequestType,'');
          CheckXMLResponseError(XMLDocOut,DocNameSpace,FALSE);
        END;

      IF NOT(ShowResponseError) AND NOT("Response Severity" IN ['ERROR','FAILURE']) THEN BEGIN
        WITH XMLManagement DO BEGIN
          CurrNode := XMLDocOut.DocumentElement;
          IF FindNode(CurrNode,'//'+DocNameSpace+':RatedShipment/'+DocNameSpace+':NegotiatedRateCharges/'+
             DocNameSpace+':TotalCharge/'+DocNameSpace+':MonetaryValue',CurrNode,XMLNsMgr)
          THEN BEGIN
            IF STRLEN(CurrNode.InnerText) > 0 THEN
              RateShopLine."Base Charge" := Text2Decimal(CurrNode.InnerText);
            CurrNode := XMLDocOut.DocumentElement;
          END ELSE BEGIN
            CurrNode := XMLDocOut.DocumentElement;
            IF FindNode(
              CurrNode,'//'+DocNameSpace+':RatedShipment/'+DocNameSpace+':TransportationCharges/'+
                DocNameSpace+':MonetaryValue',CurrNode,XMLNsMgr)
            THEN
              IF STRLEN(CurrNode.InnerText) > 0 THEN
                RateShopLine."Base Charge" := Text2Decimal(CurrNode.InnerText);
            CurrNode := XMLDocOut.DocumentElement;

            IF FindNode(
              CurrNode,'//'+DocNameSpace+':RatedShipment/'+DocNameSpace+':TotalCharges/'+
              DocNameSpace+':MonetaryValue',CurrNode,XMLNsMgr)
            THEN
              IF STRLEN(CurrNode.InnerText) > 0 THEN
                RateShopLine."Shipping Cost" := Text2Decimal(CurrNode.InnerText);

            IF FindNode(CurrNode,'//'+DocNameSpace+':RatedShipment/'+DocNameSpace+':ServiceOptionCharges/'+
              DocNameSpace+':MonetaryValue',CurrNode,XMLNsMgr) THEN
              IF STRLEN(CurrNode.InnerText) > 0 THEN
                RateShopLine.Surcharge := Text2Decimal(CurrNode.InnerText);
            CurrNode := XMLDocOut.DocumentElement;
          END;

          IF FindNode(CurrNode,'//'+DocNameSpace+':RatedShipment/'+DocNameSpace+':RatedPackage/'+
            DocNameSpace+':NonMachineableCharges/'+DocNameSpace+':MonetaryValue',CurrNode,XMLNsMgr) THEN
            IF STRLEN(CurrNode.InnerText) > 0 THEN
              RateShopLine."Accessorial Charge" :=
                RateShopLine."Accessorial Charge" + Text2Decimal(CurrNode.InnerText);
          CurrNode := XMLDocOut.DocumentElement;

          IF FindNode(CurrNode,'//'+DocNameSpace+':RatedShipment/'+DocNameSpace+':RatedPackage/'+
            DocNameSpace+':NonDDUCharges/'+DocNameSpace+':MonetaryValue',CurrNode,XMLNsMgr) THEN
            IF STRLEN(CurrNode.InnerText) > 0 THEN
              RateShopLine."Accessorial Charge" :=
                RateShopLine."Accessorial Charge" + Text2Decimal(CurrNode.InnerText);
          CurrNode := XMLDocOut.DocumentElement;

          IF FindNode(CurrNode,'//'+DocNameSpace+':RatedShipment/'+DocNameSpace+':RatedPackage/'+
            DocNameSpace+':SurePostDasCharges/'+DocNameSpace+':MonetaryValue',CurrNode,XMLNsMgr) THEN
            IF STRLEN(CurrNode.InnerText) > 0 THEN
              RateShopLine.Surcharge := Text2Decimal(CurrNode.InnerText);
          CurrNode := XMLDocOut.DocumentElement;
        END;
      END ELSE BEGIN;
        RateShopLine."Service Error Message" :=
          COPYSTR(TransactionResponse,1,MAXSTRLEN(RateShopLine."Service Error Message"));
        ShowResponseError := FALSE;
      END;
        CLEAR(XMLRequestDocument);
        CLEAR(XMLDocOut);
      END;
    END;

    PROCEDURE CheckSurePostQualifications@1240020010(Package@1240020000 : Record 14000701;UPSOptionPage@1240020001 : Record 14000761) : Boolean;
    VAR
      PackageLine@1240020002 : Record 14000702;
    BEGIN
      UPSWSShippingAccount.SETFILTER("Account No.",Package."Shipping Agent Account No.");
      IF NOT UPSWSShippingAccount.FIND('-') THEN
        ERROR(Text011,
          Package."Shipping Agent Account No.",Package."No.");

      IF NOT(UPSWSShippingAccount."Account Added") THEN
        ERROR(Text012,UPSWSShippingAccount."Account No.");

      IF Package."Total Packages" > 1 THEN
        ERROR(Text004,Text005);

      IF (UPPERCASE(Package."Ship-to City") IN ['APO','DPO','FPO']) THEN BEGIN
        PackageLine.SETRANGE("Package No.",Package."No.");
        IF PackageLine.FIND('-') THEN BEGIN
         IF PackageLine.COUNT > 3 THEN
           ERROR(Text008,
             Package."Shipping Agent Service")
        END ELSE
          ERROR(Text010,Package."Ship-to City");
      END;

      IF PackingStation."Ship-from State" IN ['HI','AK'] THEN
        ERROR(Text003,
          PackingStation.FIELDCAPTION("Ship-from City"),PackingStation."Ship-from City",Text005);

      IF NOT(XMLManagement.ReturnISOCountryCode(Package."Ship-to Country Code")
         IN ['AS','GU','FM','MH','MP','PR','PW','US','VI','']) THEN
        ERROR(Text003,
          Package.FIELDCAPTION("Ship-to Country Code"),Package."Ship-to Country Code",Text005);

      IF Package."Shipping Payment Type" <> Package."Shipping Payment Type"::Prepaid THEN
        ERROR(Text003,
          Package.FIELDCAPTION("Shipping Payment Type"),Package."Shipping Payment Type",Text005);

      IF Package."Calculation Insured Value" > 0 THEN
        ERROR(Text003,
          Package.FIELDCAPTION("Calculation Insured Value"),
          Package."Calculation Insured Value",Text005);

      IF UPSOptionPage."Dangerous Goods" THEN
        ERROR(Text003,
          UPSOptionPage.FIELDCAPTION("Dangerous Goods"),
          UPSOptionPage."Dangerous Goods",Text005);

      IF Package.COD THEN
        ERROR(Text003,
          Package.FIELDCAPTION(COD),Package.COD,Text005);

      IF UPSOptionPage."Delivery Confirmation Type" IN
        [UPSOptionPage."Delivery Confirmation Type"::"Signature Date",
         UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"] THEN
        ERROR(Text003,
          UPSOptionPage.FIELDCAPTION("Delivery Confirmation Type"),
          UPSOptionPage."Delivery Confirmation Type",Text005);

      IF UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None THEN
        ERROR(Text003,
          UPSOptionPage.FIELDCAPTION("Call Tag Type"),
          UPSOptionPage."Call Tag Type",Text005);

      IF NOT(XMLManagement.IsPOBox(Package."Ship-to Address")) AND
         NOT(UPPERCASE(Package."Ship-to City") IN ['APO','DPO','FPO']) THEN
        IF NOT(Package."Residential Delivery") THEN
          ERROR(Text009,
            Package.FIELDCAPTION("Residential Delivery"),
            Text005);

      IF (UPPERCASE(Package."Ship-to City") IN ['APO','DPO','FPO']) THEN BEGIN
        UPSOptionPage.TESTFIELD("CN22 Contents Type");
        IF UPSOptionPage."CN22 Contents Type" = UPSOptionPage."CN22 Contents Type"::Other THEN
          UPSOptionPage.TESTFIELD("CN22 Contents Explanation");
      END;

      IF UPSOptionPage."Ship and Return Label" THEN
        ERROR(Text003,
          UPSOptionPage.FIELDCAPTION("Ship and Return Label"),UPSOptionPage."Ship and Return Label",Text005);
    END;

    PROCEDURE HTTPRequest@1240030021(XMLRequest@1240030000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLDocOut@1240030009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";RequestType@1240020000 : Text[30]) ErrorStatus : Text[1024];
    VAR
      XMLHTTPConn@1240030003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      XMLHTTPResponse@1240020008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      MemoryStream@1240020003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Enc@1240020006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      ServicePointMgr@1240020004 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.ServicePointManager";
      SecurityProtocolType@1240020005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.SecurityProtocolType";
      Window@1240030002 : Dialog;
      NameOfServer@1240020001 : Text[100];
      SpecificServicePath@1240020002 : Text[100];
    BEGIN
      Window.OPEN(Text001);

      IF ISNULL(XMLHTTPConn) THEN
        XMLHTTPConn := XMLHTTPConn.HttpWebRequest;
      IF ISNULL(XMLHTTPResponse) THEN
        XMLHTTPResponse := XMLHTTPResponse.HttpWebResponse;

      IF UPSWSShippingAccount.Demo THEN BEGIN
        IF RequestType <> 'License' THEN
          NameOfServer := 'https://wwwcie.ups.com/'
        ELSE
          NameOfServer := 'https://onlinetools.ups.com/';
      END ELSE
        NameOfServer := 'https://onlinetools.ups.com/';

      CASE RequestType OF
        'License':
          SpecificServicePath := 'ups.app/xml/License';
        'Register':
          SpecificServicePath := 'webservices/Registration';
        'Shipping':
          SpecificServicePath := 'webservices/Ship';
        'RateService':
          SpecificServicePath := 'webservices/Rate';
        'Void':
          SpecificServicePath := 'webservices/Void';
        'Track':
          SpecificServicePath := 'webservices/Track';
      END;

      ServicePointMgr.Expect100Continue := TRUE;
      ServicePointMgr.SecurityProtocol := SecurityProtocolType.Tls12;
      XMLHTTPConn := XMLHTTPConn.Create(NameOfServer + SpecificServicePath);
      XMLHTTPConn.Timeout := 30000;
      XMLHTTPConn.UseDefaultCredentials(FALSE);
      XMLHTTPConn.ContentType := 'application/x-www-form-urlencoded';
      XMLHTTPConn.Accept := 'text/xml; charset=utf-8';
      XMLHTTPConn.Method := 'POST';
      XMLHTTPConn.AllowAutoRedirect := TRUE;
      XMLHTTPConn.UseDefaultCredentials;
      XMLHTTPConn.Headers.Add('SOAPAction','LoadTransaction');
      MemoryStream := XMLHTTPConn.GetRequestStream;
      XMLRequest.Save(BufferFileName);
      XMLRequest.Save(MemoryStream);
      MemoryStream.Flush;
      MemoryStream.Close;

      XMLHTTPResponse := XMLHTTPConn.GetResponse;
      MemoryStream := XMLHTTPResponse.GetResponseStream;
      XMLDocOut.Load(MemoryStream);
      MemoryStream.Flush;
      MemoryStream.Close;
      XMLHTTPResponse.Close;

      Window.CLOSE;

      XMLNsMgr := XMLNsMgr.XmlNamespaceManager(XMLDocOut.NameTable);
      DocNameSpace := XMLEncode.GetDocNameSpace(RequestType,'');
      XMLNsMgr.AddNamespace(DocNameSpace,XMLEncode.GetNameSpaceURI(RequestType,''));

      IF XMLHTTPResponse.StatusCode <> 200 THEN BEGIN
        XMLDocOut.Save(CarrierPackingStation."UPSlink Temp. Files Directory" + '\' + 'FailedResponse.xml')
      END ELSE BEGIN
        XMLDocOut.Save(CarrierPackingStation."UPSlink Temp. Files Directory" + '\' + 'ValidResponse.xml');
      END;
    END;

    PROCEDURE CheckXMLResponseError@1240030026(XMLResponseDoc@1240030000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";DocNameSpace@1240030001 : Text[30];ShowError@1240030003 : Boolean) : Text[1024];
    BEGIN
      WITH XMLManagement DO BEGIN
        ShowResponseError := ShowError;
        TransactionResponse := '';
        CurrNode := XMLResponseDoc.DocumentElement;

        CASE DocNameSpace OF
          'AccessLicense':
            BEGIN
              IF FindNode(CurrNode,'//AccessLicenseResponse//Response//ResponseStatusDescription',CurrNode,XMLNsMgr) THEN
                IF STRLEN(CurrNode.InnerText) > 0 THEN
                  IF CurrNode.InnerText <> 'Success' THEN
                    IF FindNode(CurrNode,'//AccessLicenseResponse//Response//Error//ErrorDescription',CurrNode,XMLNsMgr) THEN
                      IF STRLEN(CurrNode.InnerText ) > 0 THEN BEGIN
                        "Response Severity" := 'ERROR';
                        TransactionResponse := "Response Severity" + ': ' + CurrNode.InnerText + ' (' + DocNameSpace + ')';
                      END;
            END;
          'AccessLicenseAgreement':
            BEGIN
              IF FindNode(CurrNode,'//AccessLicenseAgreementResponse//Response//ResponseStatusDescription',CurrNode,XMLNsMgr) THEN
                IF STRLEN(CurrNode.InnerText) > 0 THEN
                  IF CurrNode.InnerText <> 'Success' THEN
                    IF FindNode(CurrNode,'//AccessLicenseAgreementResponse//Response//Error//ErrorDescription',CurrNode,XMLNsMgr) THEN
                      IF STRLEN(CurrNode.InnerText ) > 0 THEN BEGIN
                        "Response Severity" := 'ERROR';
                        TransactionResponse := "Response Severity" + ': ' + CurrNode.InnerText + ' (' + DocNameSpace + ')';
                      END;
            END;
          ELSE BEGIN
              DocNameSpace := 'common';
              XMLNsMgr.AddNamespace(DocNameSpace,XMLEncode.GetNameSpaceURI('Common',''));
              IF FindNode(CurrNode,'//'+DocNameSpace+':ResponseStatus/'+DocNameSpace+':Description',CurrNode,XMLNsMgr) THEN BEGIN
                IF STRLEN(CurrNode.InnerText) > 0 THEN
                  IF CurrNode.InnerText <> 'Success' THEN BEGIN
                    "Response Severity" := CurrNode.InnerText;
                    IF FindNode(
                      CurrNode,'//'+DocNameSpace+':Response/'+DocNameSpace+':Alert'+DocNameSpace+':Description',CurrNode,XMLNsMgr) THEN
                        IF STRLEN(CurrNode.InnerText) > 0 THEN
                          TransactionResponse := "Response Severity" + ': ' + CurrNode.InnerText;
                  END;
              END ELSE BEGIN
                XMLNsMgr := XMLNsMgr.XmlNamespaceManager(XMLDocOut.NameTable);
                DocNameSpace := XMLEncode.GetDocNameSpace('Error','');
                XMLNsMgr.AddNamespace(DocNameSpace,XMLEncode.GetNameSpaceURI('Error',''));

                CurrNode := XMLResponseDoc.DocumentElement;
                IF FindNode(CurrNode,'//'+DocNameSpace+':PrimaryErrorCode/'+DocNameSpace+':Code',CurrNode,XMLNsMgr) THEN
                  IF STRLEN(CurrNode.InnerText) > 0 THEN BEGIN
                    TransactionResponse := CurrNode.InnerText + '- ';
                  END;

                CurrNode := XMLResponseDoc.DocumentElement;
                IF FindNode(CurrNode,'//'+DocNameSpace+':PrimaryErrorCode/'+DocNameSpace+':Description',CurrNode,XMLNsMgr) THEN
                  IF STRLEN(CurrNode.InnerText) > 0 THEN BEGIN
                    "Response Severity" := 'ERROR';
                    TransactionResponse := "Response Severity" + ': ' + TransactionResponse + CurrNode.InnerText;
                  END;

                CurrNode := XMLResponseDoc.DocumentElement;
                IF FindNode(CurrNode,'//'+DocNameSpace+':SubErrorCode/'+DocNameSpace+':Description',CurrNode,XMLNsMgr) THEN
                  IF STRLEN(CurrNode.InnerText) > 0 THEN BEGIN
                    TransactionResponse := TransactionResponse + ', ' + CurrNode.InnerText;
                  END;

                CurrNode := XMLResponseDoc.DocumentElement;
                IF FindNode(CurrNode,'//'+DocNameSpace+':Location/'+DocNameSpace+':LocationElementName',CurrNode,XMLNsMgr) THEN
                  IF STRLEN(CurrNode.InnerText) > 0 THEN BEGIN
                    TransactionResponse := TransactionResponse + ', ' + CurrNode.InnerText;
                  END;

              END;
            END
        END;

        IF STRLEN(TransactionResponse) > 125 THEN
          TransactionResponse := TransactionResponse + '...';

        IF ShowError THEN BEGIN
          IF (TransactionResponse = '') AND (DocNameSpace <> 'common') THEN
            MESSAGE(Text007);

          CASE "Response Severity" OF
            'ERROR':
              BEGIN
                ERROR(TransactionResponse);
              END;
            'FAILURE':
              BEGIN
                ERROR(TransactionResponse);
              END;
            'WARNING':
              BEGIN
                MESSAGE(TransactionResponse);
              END;
            'NOTE':
              BEGIN
                MESSAGE(TransactionResponse);
              END;
          END;
        END;
      END;
    END;

    PROCEDURE FormatTimeForFileOutput@1240030025(TimetoFormat@1240030000 : Time) TimeFormatted : Text[12];
    BEGIN
      TimeFormatted := FORMAT(TimetoFormat,0,'<Hours12><Minutes,2><Seconds,2><AM/PM>');
    END;

    PROCEDURE GetUPSPackagingDimensions@1240030007(VAR OverrideDimensions@1240030005 : Boolean;VAR OverrideLength@1240030000 : Decimal;VAR OverrideWidth@1240030002 : Decimal;VAR OverrideHeight@1240030003 : Decimal;UPSPackagingType@1240030004 : Integer);
    VAR
      UPSOptionPage@1240030001 : Record 14000761;
    BEGIN
      CASE UPSPackagingType OF
        UPSOptionPage."UPS Packaging Type"::"UPS Express Box Small":
          BEGIN
            OverrideDimensions := TRUE;
            OverrideLength := 13;
            OverrideWidth := 11;
            OverrideHeight := 2;
          END;
        UPSOptionPage."UPS Packaging Type"::"UPS Express Box Medium":
          BEGIN
            OverrideDimensions := TRUE;
            OverrideLength := 15;
            OverrideWidth := 11;
            OverrideHeight := 3;
          END;
        UPSOptionPage."UPS Packaging Type"::"UPS Express Box Large":
          BEGIN
            OverrideDimensions := TRUE;
            OverrideLength := 18;
            OverrideWidth := 13;
            OverrideHeight := 3;
          END;
        UPSOptionPage."UPS Packaging Type"::"UPS Express Tube":
          BEGIN
            OverrideDimensions := TRUE;
            OverrideLength := 38;
            OverrideWidth := 6;
            OverrideHeight := 6;
          END;
      END;
    END;

    PROCEDURE CheckName@1240030500(ShippingAgent@1240030010 : Record 291;FromType@1240030003 : 'Package,Document,Master Data';VAR Name@1240030001 : Text[100];VAR Name2@1240030002 : Text[100];VAR Contact@1240030005 : Text[100];NameCaption@1240030009 : Text[100];Name2Caption@1240030008 : Text[100];ContactCaption@1240030000 : Text[100]);
    VAR
      LongNameType@1240030004 : Integer;
    BEGIN
      LongNameType := NameAndAddressMgt.GetLongNameType(ShippingAgent,FromType);

      NameAndAddressMgt.CheckCorrectTextLen(Name,LongNameType,35,NameCaption);
      NameAndAddressMgt.CheckCorrectTextLen(Name2,LongNameType,35,Name2Caption);
      NameAndAddressMgt.CheckCorrectTextLen(Contact,LongNameType,35,ContactCaption);
    END;

    PROCEDURE CheckAddress@1240030501(ShippingAgent@1240030010 : Record 291;FromType@1240030014 : 'Package,Document,Master Data';VAR Address@1240030012 : Text[100];VAR Address2@1240030011 : Text[100];VAR City@1240030009 : Text[100];VAR PostCode@1240030008 : Code[100];VAR State@1240030007 : Text[100];VAR Country@1240030006 : Code[100];AddressCaption@1240030005 : Text[100];Address2Caption@1240030004 : Text[100];CityCaption@1240030003 : Text[100];PostCodeCaption@1240030002 : Text[100];StateCaption@1240030001 : Text[100];CountryCaption@1240030000 : Text[100]);
    VAR
      TempText@1240030013 : Text[100];
      LongAddressType@1240030015 : Integer;
    BEGIN
      LongAddressType := NameAndAddressMgt.GetLongAddressType(ShippingAgent,FromType);

      NameAndAddressMgt.CheckCorrectTextLen(Address,LongAddressType,35,AddressCaption);
      NameAndAddressMgt.CheckCorrectTextLen(Address2,LongAddressType,35,Address2Caption);
      NameAndAddressMgt.CheckCorrectTextLen(City,LongAddressType,30,CityCaption);
      TempText := PostCode;
      NameAndAddressMgt.CheckCorrectTextLen(TempText,LongAddressType,10,PostCodeCaption);
      PostCode := TempText;
      NameAndAddressMgt.CheckCorrectTextLen(State,LongAddressType,2,StateCaption);
    END;

    LOCAL PROCEDURE GetBufferFile@1240030024() BufferFileName : Text[250];
    BEGIN
      GetShippingSetup;
      GetPackingStation;
      CarrierPackingStation.GetPackingStation(PackingStation);
      CarrierPackingStation.TESTFIELD("UPSlink Temp. Files Directory");
      IF COPYSTR(
           CarrierPackingStation."UPSlink Temp. Files Directory",
           STRLEN(CarrierPackingStation."UPSlink Temp. Files Directory"),1) = '\'
      THEN
        BufferFileName := CarrierPackingStation."UPSlink Temp. Files Directory" + 'buffer.xml'
      ELSE
        BufferFileName := CarrierPackingStation."UPSlink Temp. Files Directory" + '\' + 'buffer.xml';
    END;

    LOCAL PROCEDURE GetXMLFilePath@1240020008() XMLFilePath : Text[250];
    BEGIN
      GetShippingSetup;
      GetPackingStation;
      CarrierPackingStation.GetPackingStation(PackingStation);
      CarrierPackingStation.TESTFIELD("UPSlink Temp. Files Directory");
      IF COPYSTR(
           CarrierPackingStation."UPSlink Temp. Files Directory",
           STRLEN(CarrierPackingStation."UPSlink Temp. Files Directory"),1) = '\'
      THEN
        XMLFilePath := CarrierPackingStation."UPSlink Temp. Files Directory"
      ELSE
        XMLFilePath := CarrierPackingStation."UPSlink Temp. Files Directory" + '\';

      XMLFilePath := XMLFilePath + FORMAT(TODAY,0,5) + '-' + FORMAT(TIME,0,'<Hours12><Minutes,2><Seconds,2><AM/PM>');
    END;

    LOCAL PROCEDURE GetPackingStation@1240020004();
    BEGIN
      IF PackingStation.Code = '' THEN
        PackingStation.GetPackingStation;
    END;

    LOCAL PROCEDURE GetShippingSetup@1240020003();
    BEGIN
      IF NOT ShippingSetupRetrieved THEN BEGIN
        ShippingSetup.GET;
        ShippingSetupRetrieved := TRUE;
      END;
    END;

    PROCEDURE GetSetupInfo@1240020006();
    BEGIN
      GetShippingSetup;
      GetPackingStation;
      CarrierPackingStation.GetPackingStation(PackingStation);
      GetUPSWSRegistration;

      IF CarrierPackingStation."UPS WS Save XML" THEN BEGIN
        XMLFilePath := GetXMLFilePath;
      END;
    END;

    PROCEDURE GetUPSWSRegistration@1240020005();
    BEGIN
      IF NOT UPSWSRegistrationRetrieved THEN BEGIN
        IF UPSWSRegistration.GET THEN
          UPSWSRegistrationRetrieved := TRUE;
      END;
    END;

    PROCEDURE GetUPSWSShippingAccount@1240020014(ShippingAccount@1240020000 : Code[6]);
    BEGIN
      UPSWSShippingAccount.SETFILTER("Account No.",ShippingAccount);
      IF NOT UPSWSShippingAccount.FIND('-') THEN
        ERROR(Text013,
          ShippingAccount);
    END;

    PROCEDURE StartXMLCreation@1240020007();
    BEGIN
      BufferFileName := GetBufferFile;
      IF ERASE(BufferFileName) THEN;

      CLEAR(RequestFile);
      CLEAR(ResponseFile);

      IF ISNULL(XMLRequestDocument) THEN
        XMLRequestDocument := XMLRequestDocument.XmlDocument;
      IF ISNULL(XMLDocOut) THEN
        XMLDocOut := XMLDocOut.XmlDocument;
    END;

    BEGIN
    END.
  }
}

