OBJECT Codeunit 14000763 UPS Manifest Export
{
  OBJECT-PROPERTIES
  {
    Date=06/28/17;
    Time=12:00:00 PM;
    Version List=SE0.53.38;
  }
  PROPERTIES
  {
    TableNo=14000713;
    OnRun=VAR
            UPSManifest@1240030000 : Record 14000768;
            UPSManifest2@1240030001 : Record 14000768;
            FileName@1240030002 : Text[250];
          BEGIN
            WITH Rec DO BEGIN
              CompanyInfo.GET;
              PackingStation.GetPackingStation;
              CreateManifestFile(Rec);
              HeaderSegment(Rec);
              BookPageInfoSegment(Rec);
              UPSManifest.RESET;
              UPSManifest.SETCURRENTKEY("Manifest No.","Shipper Account Number","Record Type");
              UPSManifest.SETRANGE("Manifest No.","Manifest No.");
              UPSManifest.SETRANGE("Shipper Account Number","Shipping Agent Account No.");
              UPSManifest.SETRANGE("Record Type",'0100');
              UPSManifest.SETRANGE("First Package",TRUE);
              UPSManifest.FIND('-');
              UPSManifest2.RESET;
              UPSManifest2.SETCURRENTKEY(
                "Shipment Number","Manifest No.","Shipper Account Number","Manifest Sent");
              REPEAT
                SegmentCount := 0;
                ShipmentInfoSegment(UPSManifest);
                PartyAddressInfo(UPSManifest);
                ValueAddedSegment(UPSManifest,FALSE);  // Shipment Level Value Added Segment
                ReferenceSegment(UPSManifest,FALSE);  // Shipment Level Reference Segment
                NotificationInfoSegment(UPSManifest,FALSE);  // Shipment Level Notification Segment
                FreeFormTextSegment(UPSManifest,FALSE);  // Shipment Level Free Form Text Segment
                IF UPSManifest."Service Type" > UPSManifest."Service Type"::" " THEN BEGIN
                  StandardInternationalSegment(UPSManifest);
                  CommodityInfoSegment(UPSManifest);
                  InternationalInvDetailSegment(UPSManifest);
                  SEDSegment(UPSManifest);
                END;
                // Package Level
                UPSManifest2.SETRANGE("Shipment Number",UPSManifest."Shipment Number");
                UPSManifest2.SETRANGE("Manifest No.",UPSManifest."Manifest No.");
                UPSManifest2.SETRANGE("Shipper Account Number",UPSManifest."Shipper Account Number");
                UPSManifest2.SETRANGE("Record Type",'0100');
                UPSManifest2.FIND('-');
                REPEAT
                  PackageInfoSegment(UPSManifest2);
                  ValueAddedSegment(UPSManifest2,TRUE);
                  ReferenceSegment(UPSManifest2,TRUE);
                  NotificationInfoSegment(UPSManifest2,TRUE);
                  FreeFormTextSegment(UPSManifest2,TRUE);
                  HazMatSegment(UPSManifest2);
                UNTIL UPSManifest2.NEXT = 0;
                ShipmentFooterSegment(UPSManifest);
              UNTIL UPSManifest.NEXT = 0;
              PostDataport(Rec);
            END;
          END;

  }
  CODE
  {
    VAR
      CompanyInfo@1240030000 : Record 79;
      PackingStation@1240030001 : Record 14000709;
      CarrierPackingStation@1240030006 : Record 14000729;
      ShippingAgentAccount@1240030002 : Record 14000770;
      ManifestFile@1240030003 : File;
      SegmentCount@1240030004 : Integer;
      SEDCode@1240030005 : Code[1];

    PROCEDURE HeaderSegment@10(Rec@1240030000 : Record 14000713);
    VAR
      ManifestHeader@1240030001 : Record 14000712;
      DataText@1240030002 : Text[250];
    BEGIN
      // HeaderSegment
      WITH Rec DO BEGIN
        ManifestHeader.GET("Manifest No.");
        DataText := '0200';  // Version Number
        WriteData(DataText);
        DataText := '93';  // Data Source
        WriteData(DataText);
        DataText := PADSTR('',24);  // Mailbox ID
        WriteData(DataText);
        DataText := PADSTR('',10);  // ClientSoftwareVersion
        WriteData(DataText);
        DataText := Date2Text(ManifestHeader."Pickup Date"); // Pickup Date
        WriteData(DataText);
        DataText := '00000' + "UPS Book No." + '0' + "UPS Page No.";  // PLD Sequence
        WriteData(DataText);
        DataText := '00';  // Incremental PLD Code
        WriteData(DataText);
        DataText := PADSTR('',3);  // Software Vendor Code
        WriteData(DataText);
        DataText := PADSTR('',8,'0') + '1';  // Number of Shipper Segments In File
        WriteData(DataText);
      END;
    END;

    PROCEDURE BookPageInfoSegment@7(Rec@1240030000 : Record 14000713);
    VAR
      DataText@1240030001 : Text[250];
    BEGIN
      // BookPageInfoSegment
      WITH Rec DO BEGIN
        GetCompanyInfo;
        PackingStation.GetPackingStation;
        DataText := '*AA';  // Segment Identifier
        WriteData(DataText);
        DataText := PADSTR("Shipping Agent Account No.",10);  // Sender Shipper Number
        WriteData(DataText);
        IF PackingStation."Ship-from Country Code" = '' THEN
          DataText := 'US'
        ELSE
          DataText := UPPERCASE(COPYSTR(PackingStation."Ship-from Country Code",1,2));
        WriteData(DataText);
        DataText := PADSTR(CompanyInfo."VAT Registration No.",15);  // Shipper EIN
        WriteData(DataText);
        WriteData(' '); // Calculated Rates Indicator
        DataText := "UPS Book No.";
        WriteData(DataText);
        DataText := '0' + "UPS Page No.";
        WriteData(DataText);
        DataText := Integer2Text("Total Shipments",6);  // Num Shipments In Page
        WriteData(DataText);
      END;
    END;

    PROCEDURE ShipmentInfoSegment@8(Rec@1240030000 : Record 14000768);
    VAR
      UPSManifestPart2@1240030001 : Record 14000771;
      DataText@1240030002 : Text[250];
      TempText@1240030003 : Text[30];
      TotalShipmentWeight@1240030004 : Integer;
      TotalDimWeight@1240030005 : Integer;
    BEGIN
      // ShipmentInfoSegment
      WITH Rec DO BEGIN
        IF NOT UPSManifestPart2.GET("Entry No.") THEN BEGIN
          UPSManifestPart2.INIT;
          UPSManifestPart2."Entry No." := "Entry No.";
        END;
        DataText := '*BA';  // Segment Identifier
        WriteData(DataText);
        SegmentCount := SegmentCount + 1;
        DataText := PADSTR("Shipment Number",35);
        WriteData(DataText);
        "Total Packages" := GetTotalPackageCount(Rec);
        DataText := Integer2Text("Total Packages",5);
        WriteData(DataText);
        TempText := PADSTR('',16,'0');
        TotalShipmentWeight := GetTotalShipmentWeight(Rec);
        DataText := Integer2Text(TotalShipmentWeight,16);  // Total Shipment Weight
        DataText := '+' + DataText;
        WriteData(DataText);
        IF UPSManifestPart2."Avg. Package Wgt. Ind." <> '' THEN
          WriteData(UPSManifestPart2."Avg. Package Wgt. Ind.")
        ELSE
          WriteData('0');  // Actual Package Weight Used Indicator
        TotalDimWeight := GetTotalDimensionalWeight(Rec);
        DataText := Integer2Text(TotalDimWeight,16);  // Total Dimensional Weight
        DataText := '+' + DataText;
        WriteData(DataText);
        IF "UOM Weight" = '' THEN
          DataText := 'LBS'
        ELSE
          DataText := PADSTR("UOM Weight",3);
        WriteData(DataText);
        DataText := PADSTR("UPS Service Type",2);
        WriteData(DataText);
        DataText := PADSTR("Shipment Chg Type",3);
        WriteData(DataText);
        WriteData('10');  // Payment Media Type Code
        DataText := PADSTR('',35);
        WriteData(DataText);  // Filler Sender Name
        DataText := PADSTR("Document Indicator",1);
        WriteData(DataText);
        DataText := PADSTR("UOM Dim",2);
        WriteData(DataText);
        DataText := PADSTR("Currency Code",3);
        WriteData(DataText);
        DataText := Integer2Text("Total Packages",6);
        WriteData(DataText);
      END;
    END;

    PROCEDURE PartyAddressInfo@13(Rec@1240030000 : Record 14000768);
    VAR
      UPSManifest@1240030001 : Record 14000768;
    BEGIN
      // PartyAddressInfo
      WITH Rec DO BEGIN
        GetCompanyInfo;
        PackingStation.GetPackingStation;
        AddressInfoSegment(Rec,'18');  // Delivery Address
        IF "Call Tag Indicator" <> '0' THEN
          AddressInfoSegment(Rec,'01');  // Pickup From Address
      // 0200 does not currently support Alternate COD Remittance Address
      //  IF ("COD Indicator" <> '0') AND (CompanyInfo."COD Address 1" <> '') AND
      //     (PackingStation."Ship-from Address" <> CompanyInfo."COD Address 1")
      //  THEN
      //    AddressInfoSegment(Rec,'39');  // Alternate COD Remittance Address
        UPSManifest.RESET;
        UPSManifest.SETCURRENTKEY(
          "Shipment Number","Manifest No.","Record Type","Alternate Party Type");
        UPSManifest.SETRANGE("Shipment Number","Shipment Number");
        UPSManifest.SETRANGE("Manifest No.","Manifest No.");
        UPSManifest.SETRANGE("Record Type",'0300');
        UPSManifest.SETRANGE("Alternate Party Type",'01');  // Importer Address
        IF UPSManifest.FIND('+') THEN
          AddressInfoSegment(UPSManifest,'05');
        UPSManifest.SETRANGE("Alternate Party Type",'02');  // Exporter Address
        IF UPSManifest.FIND('+') THEN
          AddressInfoSegment(UPSManifest,'06');
        UPSManifest.SETRANGE("Alternate Party Type",'03');  // Shipper Third Party Billing Address
        IF UPSManifest.FIND('+') THEN
          AddressInfoSegment(UPSManifest,'07');
        UPSManifest.SETRANGE("Alternate Party Type",'09');  // Ultimate Consignee Address
        IF UPSManifest.FIND('+') THEN
          AddressInfoSegment(UPSManifest,'23');
      END;
    END;

    PROCEDURE AddressInfoSegment@12(Rec@1240030000 : Record 14000768;Qualifier@1240030001 : Code[2]);
    VAR
      UPSManifest@1240030017 : Record 14000768;
      UPSManifestPart2@1240030002 : Record 14000771;
      DataText@1240030003 : Text[250];
      AttnName@1240030004 : Text[35];
      Companytxt@1240030005 : Text[35];
      Address1@1240030006 : Text[35];
      Address2@1240030007 : Text[35];
      Address3@1240030008 : Text[35];
      City@1240030009 : Text[30];
      State@1240030010 : Text[5];
      PostalCode@1240030011 : Text[9];
      Country@1240030012 : Text[2];
      PhoneNo@1240030013 : Text[15];
      FaxNo@1240030014 : Text[15];
      UPSAccountNo@1240030015 : Text[10];
      TaxID@1240030016 : Text[15];
    BEGIN
      // AddressInfoSegment
      WITH Rec DO BEGIN
        GetCompanyInfo;
        PackingStation.GetPackingStation;
        IF NOT UPSManifestPart2.GET("Entry No.") THEN BEGIN
          UPSManifestPart2.INIT;
          UPSManifestPart2."Entry No." := "Entry No.";
        END;
        CASE Qualifier OF
          '01','18','23':  // Pickup From 01 Deliver to 18 Ultimate Consignee 23
            BEGIN
              IF ("Call Tag Indicator" = '0') OR (Qualifier = '01') THEN BEGIN
                AttnName := PADSTR("Consignee Attention",35);
                Companytxt := PADSTR("Consignee Company Name",35);
                Address1 := PADSTR("Consignee Address1",35);
                Address2 := PADSTR("Consignee Address2",35);
                Address3 := PADSTR("Consignee Address3",35);
                City := PADSTR("Consignee City",30);
                State := PADSTR("Consignee State",5);
                PostalCode := PADSTR("Consignee Postal Code",9);
                Country := PADSTR("Consignee Country",2);
                PhoneNo := PADSTR("Consignee Phone",15);
                FaxNo := PADSTR('',15);
                UPSAccountNo := PADSTR("Consigneee UPS Acct Number",10);
                TaxID := PADSTR(UPSManifestPart2."Consignee Tax ID",15);
              END ELSE BEGIN
                UPSManifest.RESET;
                UPSManifest.SETCURRENTKEY(
                  "Shipment Number","Manifest No.","Record Type","Alternate Party Type");
                UPSManifest.SETRANGE("Shipment Number","Shipment Number");
                UPSManifest.SETRANGE("Manifest No.","Manifest No.");
                UPSManifest.SETRANGE("Record Type",'0300');
                UPSManifest.SETRANGE("Alternate Party Type",'06');  // Alternate Call Tag Return Address
                IF UPSManifest.FIND('+') THEN BEGIN
                  AttnName := PADSTR(UPSManifest."Third Party Attention",35);
                  Companytxt := PADSTR(UPSManifest."Third Party Name",35);
                  Address1 := PADSTR(UPSManifest."Third Party Address1",35);
                  Address2 := PADSTR(UPSManifest."Third Party Address2",35);
                  Address3 := PADSTR('',35);
                  City := PADSTR(UPSManifest."Third Party City",30);
                  State := PADSTR(UPSManifest."Third Party State",5);
                  PostalCode := PADSTR(UPSManifest."Third Party Postal Code",9);
                  Country := PADSTR(UPSManifest."Third Party Country",2);
                  PhoneNo := PADSTR(UPSManifest."Third Party Phone",15);
                  FaxNo := PADSTR('',15);
                  UPSAccountNo := PADSTR("Consigneee UPS Acct Number",10);
                  TaxID := PADSTR('',15);
                END ELSE BEGIN
                  AttnName := PADSTR(PackingStation."Ship-from Contact",35);
                  Companytxt := PADSTR(PackingStation."Ship-from Company",35);
                  Address1 := PADSTR(PackingStation."Ship-from Address",35);
                  Address2 := PADSTR(PackingStation."Ship-from Address2",35);
                  Address3 := PADSTR('',35);
                  City := PADSTR(PackingStation."Ship-from City",30);
                  State := PADSTR(PackingStation."Ship-from State",5);
                  PostalCode := PADSTR(PackingStation."Ship-from ZIP Code",9);
                  Country := PADSTR(GetUPSCountryCode(PackingStation."Ship-from Country Code"),2);
                  PhoneNo := PADSTR(FixPhoneNo(PackingStation."Ship-from Phone No.",FALSE),15);
                  FaxNo := PADSTR(FixPhoneNo(PackingStation."Ship-from Fax No.",FALSE),15);
                  UPSAccountNo := PADSTR("Consigneee UPS Acct Number",10);
                  TaxID := PADSTR('',15);
                END;
              END;
            END;
          '05','06','07','08':  // Importer 05 Exporter 06 3rd Party Billing 07 and 08
            BEGIN
              Companytxt := PADSTR("Third Party Name",35);
              AttnName := PADSTR("Third Party Attention",35);
              Address1 := PADSTR("Third Party Address1",35);
              Address2 := PADSTR("Third Party Address2",35);
              Address3 := PADSTR('',35);
              City := PADSTR("Third Party City",30);
              State := PADSTR("Third Party State",5);
              PostalCode := PADSTR("Third Party Postal Code",9);
              Country := PADSTR("Third Party Country",2);
              PhoneNo := PADSTR("Third Party Phone",15);
              FaxNo := PADSTR('',15);
              UPSAccountNo := PADSTR("Third Party Account No.",10);
              TaxID := PADSTR(UPSManifestPart2."Third Party Tax ID",15);
            END;
          '39':  // Alternate COD Remittance Address
            BEGIN
              PackingStation.TESTFIELD("Ship-from Phone No.");
              AttnName := PADSTR(PackingStation."Ship-from Contact",35);
              Companytxt := PADSTR(CompanyInfo.Name,35);
              Address1 := PADSTR(CompanyInfo."COD Address 1",35);
              Address2 := PADSTR(CompanyInfo."COD Address 1",35);
              Address3 := PADSTR('',35);
              City := PADSTR(CompanyInfo."COD City",30);
              State := PADSTR(CompanyInfo."COD State",5);
              PostalCode := PADSTR(CompanyInfo."COD Zip Code",9);
              Country := 'US';
              PhoneNo := PADSTR(FixPhoneNo(PackingStation."Ship-from Phone No.",FALSE),15);
              FaxNo := PADSTR('',15);
              UPSAccountNo := PADSTR('',10);
              TaxID := PADSTR('',15);
            END;
        END;
        DataText := '*CA';  // Segment Identifier
        WriteData(DataText);
        SegmentCount := SegmentCount + 1;
        WriteData(Qualifier);  // Address Qualifier
        WriteData(AttnName);
        WriteData(Companytxt);
        WriteData(Address1);
        WriteData(Address2);
        WriteData(Address3);
        WriteData(City);
        WriteData(State);
        WriteData(PostalCode);
        WriteData(Country);
        WriteData(PhoneNo);
        WriteData(' ');  // Fax Indicator
        WriteData(FaxNo);
        WriteData(UPSAccountNo);
        WriteData(TaxID);
      END;
    END;

    PROCEDURE ValueAddedSegment@15(Rec@1240030000 : Record 14000768;PackageLevel@1240030001 : Boolean);
    VAR
      UPSManifest@1240030002 : Record 14000768;
      RecPart2@1240030003 : Record 14000771;
      Package@1240030006 : Record 14000701;
      PostedPackage@1240030007 : Record 14000704;
      DataText@1240030004 : Text[250];
      TempInt@1240030005 : Integer;
    BEGIN
      // ValueAddedSegment
      WITH Rec DO BEGIN
        IF NOT RecPart2.GET("Entry No.") THEN BEGIN
          RecPart2.INIT;
          RecPart2."Entry No." := "Entry No.";
        END;

        IF PostedPackage.GET("Package No.") THEN
          Package.TRANSFERFIELDS(PostedPackage)
        ELSE
          Package.GET("Package No.");

        UPSManifest.RESET;
        UPSManifest.SETCURRENTKEY(
          "Shipment Number","Manifest No.","Record Type","Alternate Party Type");
        UPSManifest.SETRANGE("Shipment Number","Shipment Number");
        UPSManifest.SETRANGE("Manifest No.","Manifest No.");
        UPSManifest.SETRANGE("Record Type",'0200');
        IF PackageLevel THEN
          UPSManifest.SETRANGE("Package Tracking Number","Package Tracking Number");
        IF NOT UPSManifest.FIND('-') THEN
          UPSManifest.INIT;
        IF NOT PackageLevel THEN BEGIN
          // Shipment Level
          IF "Extended Area" = '1' THEN BEGIN
            WriteData('*EA');
            SegmentCount := SegmentCount + 1;
            WriteData('EDS');
          END;
          IF ("Hundred Weight Indicator" = '1') OR ("Hundred Weight Indicator" = '2') THEN BEGIN
            WriteData('*EA');
            SegmentCount := SegmentCount + 1;
            IF "Hundred Weight Indicator" = '1' THEN
              WriteData('CWS')
            ELSE
              WriteData('CWM');
          END;
          IF RecPart2."Receiver Location ID" <> '' THEN BEGIN
            WriteData('*EA');
            SegmentCount := SegmentCount + 1;
            WriteData('RLI');
            DataText := PADSTR(RecPart2."Receiver Location ID",10);
            WriteData(DataText);
          END;
          IF "Residence Type Indicator" = '1' THEN BEGIN
            WriteData('*EA');
            SegmentCount := SegmentCount + 1;
            WriteData('RES');
          END;
          IF ("Call Tag Indicator" = '3') OR ("Call Tag Indicator" = '5') THEN BEGIN
            WriteData('*EA');
            SegmentCount := SegmentCount + 1;
            IF "Call Tag Indicator" = '3' THEN
              WriteData('RSO')
            ELSE
              WriteData('ART');
          END;
          IF ("Call Tag Indicator" = '2') OR ("Call Tag Indicator" = '4') THEN BEGIN
            WriteData('*EA');
            SegmentCount := SegmentCount + 1;
            IF "Call Tag Indicator" = '4' THEN
              WriteData('ALP');
          END;

          IF "Saturday Delivery Indicator" = '1' THEN BEGIN
            WriteData('*EA');
            SegmentCount := SegmentCount + 1;
            WriteData('SAT');
          END;
          IF "Saturday Pickup Indicator" = '1' THEN BEGIN
            WriteData('*EA');
            SegmentCount := SegmentCount + 1;
            WriteData('SPU');
          END;
          IF (Package."World Wide Service" OR
              Package."UPS Canadian Service") AND
             ("Declared Value Insurance" <> '')
          THEN BEGIN
            EVALUATE(TempInt,COPYSTR("Declared Value Insurance",2,STRLEN("Declared Value Insurance")));

            IF TempInt > 100 THEN BEGIN
              WriteData('*EA');
              SegmentCount := SegmentCount + 1;

              IF RecPart2."Shipper Pays Declared Value" THEN
                WriteData('DVS')
              ELSE
                WriteData('EVS');

              WriteData("Declared Value Insurance");
              DataText := PADSTR("Currency Code",3);
              WriteData(DataText);
            END;
          END;
        END ELSE BEGIN
          // Package Level
          IF "Additional Handling Req." = '1' THEN BEGIN
            WriteData('*EA');
            SegmentCount := SegmentCount + 1;
            WriteData('AHC');
          END;
          IF ("COD Indicator" = '1') OR ("COD Indicator" = '3') THEN BEGIN
            WriteData('*EA');
            SegmentCount := SegmentCount + 1;
            IF "COD Indicator" = '1' THEN
              WriteData('COD')
            ELSE
              WriteData('CDI');
            IF "COD Cash Only Indicator" <> '' THEN BEGIN
              DataText := '0' + "COD Cash Only Indicator";
              WriteData(DataText);
            END ELSE
              WriteData('00');
            IF "COD Amount" = '' THEN
              DataText := '+' + PADSTR('',18,'0')
            ELSE
              DataText := "COD Amount";
            WriteData(DataText);
            DataText := PADSTR("Currency Code",3);
            WriteData(DataText);
            IF "COD Indicator" = '1' THEN BEGIN
              DataText := PADSTR("COD Control Number",11);
              WriteData(DataText);
            END;
          END;
          IF ("Delivery Confirmation Type" = '1') OR
             ("Delivery Confirmation Type" = '2') OR
             ("Delivery Confirmation Type" = 'A')
          THEN BEGIN
            WriteData('*EA');
            SegmentCount := SegmentCount + 1;
            CASE "Delivery Confirmation Type" OF
              '1':
                BEGIN
                  WriteData('DAS');
                  DataText := PADSTR('',11);
                  WriteData(DataText);
                END;
              '2':
                WriteData('DCS');
              'A':
                WriteData('ADS');
            END;
          END;
          IF UPSManifest."Hold for Pickup" = '1' THEN BEGIN
            WriteData('*EA');
            SegmentCount := SegmentCount + 1;
            WriteData('HFP');
          END;

          IF NOT Package."World Wide Service" AND
             NOT Package."UPS Canadian Service" AND
             ("Declared Value Insurance" <> '')
          THEN BEGIN
            EVALUATE(TempInt,COPYSTR("Declared Value Insurance",2,STRLEN("Declared Value Insurance")));

            IF TempInt > 100 THEN BEGIN
              WriteData('*EA');
              SegmentCount := SegmentCount + 1;

              IF RecPart2."Shipper Pays Declared Value" THEN
                WriteData('DVS')
              ELSE
                WriteData('EVS');

              WriteData("Declared Value Insurance");
              DataText := PADSTR("Currency Code",3);
              WriteData(DataText);
            END;
          END;
          IF RecPart2."Large Package" THEN BEGIN
            WriteData('*EA');
            SegmentCount := SegmentCount + 1;
            WriteData('LPK');
          END;
          IF (UPSManifest."Ship Notification Attn Name" <> '') AND
             (UPSManifest."Ship Notification Phone No." <> '')
          THEN BEGIN
            WriteData('*EA');
            SegmentCount := SegmentCount + 1;
            WriteData('VCD');
            DataText := PADSTR(UPSManifest."Ship Notification Attn Name",35);
            WriteData(DataText);
            IF COPYSTR(UPSManifest."Ship Notification Phone No.",1,1) = '1' THEN
              WriteData('0')
            ELSE
              WriteData('1');
            DataText := PADSTR(UPSManifest."Ship Notification Phone No.",15);
            WriteData(DataText);
          END;
        END;
      END;
    END;

    PROCEDURE ReferenceSegment@17(Rec@1240030000 : Record 14000768;PackageLevel@1240030001 : Boolean);
    VAR
      DataText@1240030002 : Text[250];
    BEGIN
      // ReferenceSegment
      WITH Rec DO BEGIN
        IF NOT PackageLevel THEN BEGIN
          IF "Shipment Ref. No.1" <> '' THEN BEGIN
            WriteData('*FA');
            SegmentCount := SegmentCount + 1;
            WriteData('001');
            WriteData("Shipment Ref. No.1 Type");
            DataText := PADSTR("Shipment Ref. No.1",35);
            WriteData(DataText);
          END;
          IF "Shipment Ref. No.2" <> '' THEN BEGIN
            WriteData('*FA');
            SegmentCount := SegmentCount + 1;
            WriteData('002');
            WriteData("Shipment Ref. No.2 Type");
            DataText := PADSTR("Shipment Ref. No.2",35);
            WriteData(DataText);
          END;
        END ELSE BEGIN
          IF "Customer Ref. No.1" <> '' THEN BEGIN
            WriteData('*FA');
            SegmentCount := SegmentCount + 1;
            WriteData('003');
            WriteData("Customer Ref. No. Type1");
            DataText := PADSTR("Customer Ref. No.1",35);
            WriteData(DataText);
          END;
          IF "Customer Ref. No.2" <> '' THEN BEGIN
            WriteData('*FA');
            SegmentCount := SegmentCount + 1;
            WriteData('004');
            WriteData("Customer Ref. No. Type2");
            DataText := PADSTR("Customer Ref. No.2",35);
            WriteData(DataText);
          END;
          IF "Customer Ref. No.3" <> '' THEN BEGIN
            WriteData('*FA');
            SegmentCount := SegmentCount + 1;
            WriteData('005');
            WriteData("Customer Ref. No. Type3");
            DataText := PADSTR("Customer Ref. No.3",35);
            WriteData(DataText);
          END;
          IF "Customer Ref. No.4" <> '' THEN BEGIN
            WriteData('*FA');
            SegmentCount := SegmentCount + 1;
            WriteData('006');
            WriteData("Customer Ref. No. Type4");
            DataText := PADSTR("Customer Ref. No.4",35);
            WriteData(DataText);
          END;
          IF "Customer Ref. No.5" <> '' THEN BEGIN
            WriteData('*FA');
            SegmentCount := SegmentCount + 1;
            WriteData('007');
            WriteData("Customer Ref. No. Type5");
            DataText := PADSTR("Customer Ref. No.5",35);
            WriteData(DataText);
          END;
        END;
      END;
    END;

    PROCEDURE NotificationInfoSegment@18(Rec@1240030000 : Record 14000768;PackageLevel@1240030001 : Boolean);
    VAR
      UPSManifest@1240030002 : Record 14000768;
      UPSManifestPart2@1240030003 : Record 14000771;
      DataText@1240030004 : Text[250];
    BEGIN
      // NotificationInfoSegement
      WITH Rec DO BEGIN
        UPSManifest.RESET;
        UPSManifest.SETCURRENTKEY(
          "Shipment Number","Manifest No.","Record Type","Alternate Party Type");
        UPSManifest.SETRANGE("Shipment Number","Shipment Number");
        UPSManifest.SETRANGE("Manifest No.","Manifest No.");
        UPSManifest.SETRANGE("Record Type",'0400');
        IF PackageLevel THEN BEGIN
          UPSManifest.SETRANGE("Advisory Info Level",'P');
          UPSManifest.SETRANGE("Package No.","Package No.");
        END ELSE
          UPSManifest.SETRANGE("Advisory Info Level",'S');
        IF UPSManifest.FIND('-') THEN
          REPEAT
            IF UPSManifestPart2.GET(UPSManifest."Entry No.") THEN BEGIN
              WriteData('*GA');
              SegmentCount := SegmentCount + 1;
              CASE UPSManifestPart2."Request Type Code" OF
                '003','006':
                  DataText := '006';
                '004':
                  DataText := '004';
                '005':
                  DataText := '005';
                '007':
                  DataText := '007';
                '008':
                  DataText := '008';
                ELSE
                  DataText := '   ';
              END;
              WriteData(DataText);
              DataText := PADSTR(UPSManifestPart2."Media Type Code",2);
              WriteData(DataText);
              IF UPSManifestPart2."Media Type Code" = '03' THEN BEGIN
                // Email Address
                IF (UPSManifestPart2."Request Type Code" = '007') OR
                   (UPSManifestPart2."Request Type Code" = '008')
                THEN
                  DataText := PADSTR(UPSManifestPart2."Notification Email Address",50)
                ELSE
                  DataText := PADSTR(UPSManifest."Ship Notification Email",50);
                WriteData(DataText);
                DataText := PADSTR('',3);  // Request Type Language Code
                WriteData(DataText);
                DataText := PADSTR('',2);  // Request Type Dialect
                WriteData(DataText);
                DataText := PADSTR(UPSManifestPart2."Sent From Name",35);
                WriteData(DataText);
                DataText := PADSTR(UPSManifestPart2."Reply to Email Address",50);
                WriteData(DataText);
                DataText := PADSTR('',151);  // Filler for Fax Request
                WriteData(DataText);
              END ELSE BEGIN
                DataText := PADSTR('',190);  // Filler for Email Request
                WriteData(DataText);
                DataText := PADSTR(UPSManifest."Ship Fax Dest. Type",1);
                WriteData(DataText);
                DataText := PADSTR(UPSManifest."Ship Notification Fax No.",15);
                WriteData(DataText);
                DataText := PADSTR(UPSManifest."Ship Notification Company",35);
                WriteData(DataText);
                DataText := PADSTR(UPSManifest."Ship Notification Attn Name",35);
                WriteData(DataText);
                DataText := PADSTR(UPSManifest."Ship Notification Phone No.",15);
                WriteData(DataText);
              END;
              DataText := PADSTR(UPSManifestPart2."Subject Code",2);
              WriteData(DataText);
              DataText := PADSTR('',75);
              WriteData(DataText);
            END;
          UNTIL UPSManifest.NEXT = 0;
      END;
    END;

    PROCEDURE FreeFormTextSegment@20(Rec@1240030000 : Record 14000768;PackageLevel@1240030001 : Boolean);
    VAR
      UPSManifest@1240030002 : Record 14000768;
      UPSManifest2@1240030003 : Record 14000768;
      DataText@1240030004 : Text[250];
    BEGIN
      // FreeFormTextSegment
      WITH Rec DO BEGIN
        IF NOT PackageLevel THEN BEGIN
          // Shipment Level
          UPSManifest.RESET;
          UPSManifest.SETCURRENTKEY(
            "Shipment Number","Manifest No.","Record Type","Alternate Party Type");
          UPSManifest.SETRANGE("Shipment Number","Shipment Number");
          UPSManifest.SETRANGE("Manifest No.","Manifest No.");
          UPSManifest.SETRANGE("Record Type",'0400');
          UPSManifest.SETRANGE("Advisory Info Level",'S');
          UPSManifest.SETFILTER("Ship Notification Memo",'<>%1','');
          IF UPSManifest.FIND('-') THEN BEGIN
            // Ship Notification Memo
            WriteData('*NA');
            SegmentCount := SegmentCount + 1;
            WriteData('001');
            DataText := PADSTR(UPSManifest."Ship Notification Memo",150);
            WriteData(DataText);
          END;

          UPSManifest.RESET;
          UPSManifest.SETCURRENTKEY(
            "Shipment Number","Manifest No.","Record Type","Alternate Party Type");
          UPSManifest.SETRANGE("Shipment Number","Shipment Number");
          UPSManifest.SETRANGE("Manifest No.","Manifest No.");
          UPSManifest.SETRANGE("Record Type",'0500');
          IF UPSManifest.FIND('-') THEN BEGIN
            IF UPSManifest."Special Instructions" <> '' THEN BEGIN
              WriteData('*NA');
              SegmentCount := SegmentCount + 1;
              WriteData('003');
              DataText := PADSTR(UPSManifest."Special Instructions",69);
              WriteData(DataText);
            END;
            IF UPSManifest."Destination Control" <> '' THEN BEGIN
              WriteData('*NA');
              SegmentCount := SegmentCount + 1;
              WriteData('006');
              DataText := PADSTR(UPSManifest."Destination Control",200);
              WriteData(DataText);
            END;
          END;
          UPSManifest.SETRANGE("Record Type",'0700');
          UPSManifest.SETFILTER("Declaration Statement",'<>%1','');
          IF UPSManifest.FIND('-') THEN BEGIN
            WriteData('*NA');
            SegmentCount := SegmentCount + 1;
            WriteData('004');
            DataText := PADSTR(UPSManifest."Declaration Statement",250);
            WriteData(DataText);
          END;
          UPSManifest.SETRANGE("Declaration Statement");
          UPSManifest.SETFILTER("Additional Comments",'<>%1','');
          IF UPSManifest.FIND('-') THEN BEGIN
            WriteData('*NA');
            SegmentCount := SegmentCount + 1;
            WriteData('005');
            DataText := PADSTR(UPSManifest."Additional Comments",250);
            WriteData(DataText);
            IF UPSManifest.NEXT <> 0 THEN
              DataText := PADSTR(UPSManifest."Additional Comments",50)
            ELSE
              DataText := PADSTR('',50);
            WriteData(DataText);
          END;
        END ELSE BEGIN
          // Package Level
          UPSManifest.RESET;
          UPSManifest.SETCURRENTKEY(
            "Shipment Number","Manifest No.","Record Type","Alternate Party Type");
          UPSManifest.SETRANGE("Shipment Number","Shipment Number");
          UPSManifest.SETRANGE("Manifest No.","Manifest No.");
          UPSManifest.SETRANGE("Record Type",'0400');
          UPSManifest.SETRANGE("Package No.","Package No.");
          UPSManifest.SETRANGE("Advisory Info Level",'P');
          UPSManifest.SETFILTER("Ship Notification Memo",'<>%1','');
          IF UPSManifest.FIND('-') THEN BEGIN
            UPSManifest2.RESET;
            UPSManifest2.SETCURRENTKEY(
              "Shipment Number","Manifest No.","Record Type","Alternate Party Type");
            UPSManifest2.SETRANGE("Shipment Number","Shipment Number");
            UPSManifest2.SETRANGE("Manifest No.","Manifest No.");
            UPSManifest2.SETRANGE("Record Type",'0400');
            UPSManifest2.SETRANGE("Advisory Info Level",'S');
            UPSManifest2.SETFILTER("Ship Notification Memo",'<>%1','');
            IF NOT UPSManifest2.FIND('-') THEN BEGIN
              // Package Level Notification Memo Text
              WriteData('*NA');
              SegmentCount := SegmentCount + 1;
              WriteData('001');
              DataText := PADSTR(UPSManifest."Ship Notification Memo",150);
              WriteData(DataText);
            END;
          END;
          IF "Special Instructions" <> '' THEN BEGIN
            // Domestic Special Instructions
            WriteData('*NA');
            SegmentCount := SegmentCount + 1;
            WriteData('002');
            DataText := PADSTR(UPSManifest."Special Instructions",69);
            WriteData(DataText);
          END;
        END;
      END;
    END;

    PROCEDURE StandardInternationalSegment@23(Rec@1240030000 : Record 14000768);
    VAR
      UPSManifest@1240030001 : Record 14000768;
      UPSManifestPart2@1240030002 : Record 14000771;
      Package@1240030006 : Record 14000701;
      PostedPackage@1240030005 : Record 14000704;
      DataText@1240030003 : Text[250];
    BEGIN
      // StandardInternationalSegment
      WITH Rec DO BEGIN
        UPSManifest.RESET;
        UPSManifest.SETCURRENTKEY(
          "Shipment Number","Manifest No.","Record Type","Alternate Party Type");
        UPSManifest.SETRANGE("Shipment Number","Shipment Number");
        UPSManifest.SETRANGE("Manifest No.","Manifest No.");
        UPSManifest.SETRANGE("Record Type",'0500');
        UPSManifest.FIND('-');

        SEDCode := UPSManifest."SED Code";

        IF PostedPackage.GET("Package No.") THEN
          Package.TRANSFERFIELDS(PostedPackage)
        ELSE
          Package.GET("Package No.");

        IF NOT (Package."AES ITN No." IN ['REJECTED','']) THEN
          SEDCode := 'E';

        IF NOT UPSManifestPart2.GET(UPSManifest."Entry No.") THEN
          UPSManifestPart2.INIT;

        WriteData('*IA');
        SegmentCount := SegmentCount + 1;
        DataText := PADSTR(UPSManifest."Waybill No.",11);
        WriteData(DataText);
        IF UPSManifest."Waybill Printed Indicator" = '1' THEN
          WriteData('1')
        ELSE
          WriteData(' ');
        DataText := PADSTR(UPSManifest."Merchandise Description",50);
        WriteData(DataText);
        DataText := PADSTR(UPSManifestPart2."Global Consolid. Clearance No.",11);
        WriteData(DataText);
        DataText := PADSTR('',3);  // Broker Code
        WriteData(DataText);
        DataText := PADSTR(UPSManifest."Commodity Origin",2);
        WriteData(DataText);
        CASE UPSManifest."Certificate of Origin" OF
          'N':
            DataText := 'NAFTA';
          'D','U':
            DataText := 'T1   ';
          ELSE
            DataText := PADSTR('',5);
        END;
        WriteData(DataText);
      END;
    END;

    PROCEDURE CommodityInfoSegment@22(Rec@1240030000 : Record 14000768);
    VAR
      UPSManifest@1240030001 : Record 14000768;
      UPSManifestPart2@1240030002 : Record 14000771;
      DataText@1240030003 : Text[250];
    BEGIN
      // CommodityInfoSegment
      WITH Rec DO BEGIN
        UPSManifest.RESET;
        UPSManifest.SETCURRENTKEY(
          "Shipment Number","Manifest No.","Record Type","Alternate Party Type");
        UPSManifest.SETRANGE("Shipment Number","Shipment Number");
        UPSManifest.SETRANGE("Manifest No.","Manifest No.");
        UPSManifest.SETRANGE("Record Type",'0600');
        IF UPSManifest.FIND('-') THEN
          REPEAT
            IF NOT UPSManifestPart2.GET(UPSManifest."Entry No.") THEN
              UPSManifestPart2.INIT;
            WriteData('*KA');
            SegmentCount := SegmentCount + 1;
            DataText := PADSTR(UPSManifest."Commodity Code",35);
            WriteData(DataText);
            DataText := PADSTR(UPSManifest."Item No.",35);
            WriteData(DataText);
            DataText := PADSTR(UPSManifest."Invoice Line No.",3);
            WriteData(DataText);
            DataText := PADSTR(UPSManifest."Commodity Origin",2);
            WriteData(DataText);
            DataText := PADSTR(UPSManifest."Currency Code",3);
            WriteData(DataText);
            DataText := PADSTR(UPSManifest."Line Amount",19);
            WriteData(DataText);
            DataText := PADSTR(UPSManifest."Line Unit Amount",19);
            WriteData(DataText);
            DataText := PADSTR(UPSManifest."Line Quantity",7);
            WriteData(DataText);
            DataText := PADSTR(UPSManifest."Line Qty. UOM",3);
            WriteData(DataText);
            IF NOT (SEDCode IN ['D','U']) THEN BEGIN
              UPSManifest."Line License No." := '';
              UPSManifest."Line License Exp. Date" := '';
            END;
            DataText := PADSTR(UPSManifest."Line License No.",35);
            WriteData(DataText);
            DataText := PADSTR(UPSManifest."Line License Exp. Date",8);
            WriteData(DataText);
            DataText := PADSTR(UPSManifest."Line Description",35);
            WriteData(DataText);
            DataText := PADSTR('',35);  // Line Merchandise Description 2
            WriteData(DataText);
            WriteData(DataText); // Line Merchandise Description 3
            DataText := PADSTR(UPSManifest."Export Controls Class No.",15);
            WriteData(DataText);
            DataText := PADSTR(UPSManifest."Line Certificate of Origin No.",10);
            WriteData(DataText);
            DataText := PADSTR('',10);  // Line Trade Agreement Type
            WriteData(DataText);
            DataText := PADSTR(UPSManifestPart2."Unit of Measure Schedule B 1",3);
            WriteData(DataText);
            DataText := PADSTR(UPSManifestPart2."Quantity Schedule B Units 1",10);
            WriteData(DataText);
            DataText := PADSTR(UPSManifestPart2."Unit of Measure Schedule B 2",3);
            WriteData(DataText);
            DataText := PADSTR(UPSManifestPart2."Quantity Schedule B Units 2",10);
            WriteData(DataText);
            DataText := PADSTR(UPSManifestPart2."Schedule B Code",10);
            WriteData(DataText);
            DataText := PADSTR(UPSManifest."Line Weight",7);
            WriteData(DataText);
            DataText := PADSTR(UPSManifest."Line Packages Per Quantity",3);
            WriteData(DataText);
            DataText := PADSTR(UPSManifest."Total Value Exported",19);  // SED Line Amount
            WriteData(DataText);

            IF UPSManifest."Line Cert. of Origin Type" = '0' THEN
              WriteData(' ')
            ELSE
              WriteData(UPSManifest."Line Cert. of Origin Type");

            IF UPSManifest."Line SED Indicator" = '0' THEN
              WriteData(' ')
            ELSE
              WriteData('1');
            DataText := PADSTR('',140);  // Commodity Remarks
            WriteData(DataText);
            DataText := PADSTR('',35);  // Marks & Numbers
            WriteData(DataText);
          UNTIL UPSManifest.NEXT = 0;
      END;
    END;

    PROCEDURE InternationalInvDetailSegment@24(Rec@1240030000 : Record 14000768);
    VAR
      UPSManifest@1240030001 : Record 14000768;
      UPSManifestPart2@1240030002 : Record 14000771;
      DataText@1240030003 : Text[250];
    BEGIN
      // InternationalInvDetailSegment
      WITH Rec DO BEGIN
        UPSManifest.RESET;
        UPSManifest.SETCURRENTKEY(
          "Shipment Number","Manifest No.","Record Type","Alternate Party Type");
        UPSManifest.SETRANGE("Shipment Number","Shipment Number");
        UPSManifest.SETRANGE("Manifest No.","Manifest No.");
        UPSManifest.SETRANGE("Record Type",'0500');
        UPSManifest.FIND('-');
        IF NOT UPSManifestPart2.GET(UPSManifest."Entry No.") THEN
          UPSManifestPart2.INIT;

        WriteData('*LA');
        SegmentCount := SegmentCount + 1;
        DataText := PADSTR(UPSManifest."Pickup Date",8);  // Invoice Date
        WriteData(DataText);
        DataText := PADSTR(UPSManifest."Invoice Line Totals",19);
        WriteData(DataText);
        DataText := PADSTR(UPSManifest."Invoice Currency Code",3);
        WriteData(DataText);
        DataText := PADSTR(UPSManifestPart2."Invoice No.",35);
        WriteData(DataText);
        DataText := PADSTR('',35);  // PO Number
        WriteData(DataText);
        DataText := PADSTR(UPSManifest."Invoice SubTotal",19);
        WriteData(DataText);
        DataText := PADSTR(UPSManifest."Total Invoice Amount",19);
        WriteData(DataText);
        DataText := PADSTR(UPSManifestPart2."Terms of Shipment",3);
        WriteData(DataText);
        DataText := PADSTR('',35);  // Payment Terms
        WriteData(DataText);
        DataText := PADSTR('',35);  // Reason For Export
        WriteData(DataText);
        DataText := PADSTR(UPSManifest."Freight Charges",19);
        WriteData(DataText);
        DataText := PADSTR(UPSManifest."Insurance Charges",19);
        WriteData(DataText);
        DataText := PADSTR(UPSManifest."Discount Rebate",19);
        WriteData(DataText);
        DataText := PADSTR(UPSManifest."Other Charges",19);
        WriteData(DataText);
        DataText := PADSTR(UPSManifest."Certificate of Origin",1);
        WriteData(DataText);
      END;
    END;

    PROCEDURE SEDSegment@25(Rec@1240030000 : Record 14000768);
    VAR
      UPSManifest@1240030001 : Record 14000768;
      UPSManifestPart2@1240030002 : Record 14000771;
      Package@1240030006 : Record 14000701;
      PostedPackage@1240030005 : Record 14000704;
      ExportDoc@1240030004 : Record 14000981;
      DataText@1240030003 : Text[250];
    BEGIN
      // SEDSegment
      WITH Rec DO BEGIN
        UPSManifest.RESET;
        UPSManifest.SETCURRENTKEY(
          "Shipment Number","Manifest No.","Record Type","Alternate Party Type");
        UPSManifest.SETRANGE("Shipment Number","Shipment Number");
        UPSManifest.SETRANGE("Manifest No.","Manifest No.");
        UPSManifest.SETRANGE("Record Type",'0500');
        UPSManifest.FIND('-');
        IF NOT UPSManifestPart2.GET(UPSManifest."Entry No.") THEN
          UPSManifestPart2.INIT;
        IF SEDCode = '' THEN
          EXIT;

        IF SEDCode IN ['E','P'] THEN BEGIN
          IF PostedPackage.GET("Package No.") THEN
            Package.TRANSFERFIELDS(PostedPackage)
          ELSE
            Package.GET("Package No.");

          IF ExportDoc.GET(Package."Export Document No.") THEN BEGIN
            IF ExportDoc."Alt. Ult. Consignee" THEN
              UPSManifest."Consignee Country" :=
                ExportDoc.GetISOCountryCode(ExportDoc."Ult. Consig. Country Code")
            ELSE
              UPSManifest."Consignee Country" :=
                ExportDoc.GetISOCountryCode(ExportDoc."Ship-to Country Code");
          END;

          UPSManifest."Parties to Transaction" := '';
          UPSManifestPart2."Export Information Code" := '';
          UPSManifestPart2."Routed Transaction No." := '';
        END;

        WriteData('*MA');
        SegmentCount := SegmentCount + 1;
        DataText := PADSTR(UPSManifest."Consignee Country",2);
        WriteData(DataText);
        DataText := PADSTR(SEDCode,1);
        WriteData(DataText);
        DataText := PADSTR(UPSManifestPart2."AES Transaction No.",28);
        WriteData(DataText);
        DataText := PADSTR(UPSManifest."Parties to Transaction",1);
        WriteData(DataText);
        DataText := PADSTR(UPSManifestPart2."Export Information Code",2);
        WriteData(DataText);

        IF UPSManifestPart2."Routed Transaction No." <> '1' THEN
          WriteData('0')
        ELSE
          WriteData('1');

        IF SEDCode = 'E' THEN BEGIN
          CASE ExportDoc."PPI ID Type" OF
            ExportDoc."PPI ID Type"::EIN:
              WriteData('79');
            ExportDoc."PPI ID Type"::SSN:
              WriteData('06');
            ELSE
              WriteData('04');  // Exporter Tax ID Type  - DUNS
          END;
        END ELSE
          WriteData('79');  // Exporter Tax ID Type  - EIN
      END;
    END;

    PROCEDURE PackageInfoSegment@19(Rec@1240030000 : Record 14000768);
    VAR
      UPSManifest@1240030001 : Record 14000768;
      DataText@1240030002 : Text[250];
    BEGIN
      // PackageInfoSegment
      WITH Rec DO BEGIN
        UPSManifest.RESET;
        UPSManifest.SETCURRENTKEY(
          "Shipment Number","Manifest No.","Record Type","Alternate Party Type");
        UPSManifest.SETRANGE("Shipment Number","Shipment Number");
        UPSManifest.SETRANGE("Manifest No.","Manifest No.");
        UPSManifest.SETRANGE("Record Type",'0200');
        UPSManifest.SETRANGE("Package No.","Package No.");
        IF NOT UPSManifest.FIND('-') THEN
          UPSManifest.INIT;
        WriteData('*PA');
        SegmentCount := SegmentCount + 1;
        DataText := PADSTR("Package Tracking Number",35);
        WriteData(DataText);
        DataText := PADSTR(GetPackagingType(Rec),2);
        WriteData(DataText);
        WriteData("Package Actual Weight");
        DataText := PADSTR("Consignee Attention",35);
        WriteData(DataText);
        DataText := PADSTR("Consignee Phone",15);
        WriteData(DataText);
        DataText := PADSTR("Merchandise Description",35);
        WriteData(DataText);
        IF UPSManifest."Void Indicator" <> '1' THEN
          WriteData(' ')
        ELSE
          WriteData('1');
        WriteData("Package Published Weight");  // Package Published Dim Weight
        IF "Package Length" = '' THEN
          "Package Length" := '+00000000';
        IF "Package Width" = '' THEN
          "Package Width" := '+00000000';
        IF "Package Height" = '' THEN
          "Package Height" := '+00000000';
        WriteData("Package Length");
        WriteData("Package Width");
        WriteData("Package Height");
      END;
    END;

    PROCEDURE ShipmentFooterSegment@21(Rec@1240030000 : Record 14000768);
    VAR
      DataText@1240030001 : Text[30];
    BEGIN
      // ShipmentFooterSegment
      WriteData('*SA');
      SegmentCount := SegmentCount + 1;
      DataText := Integer2Text(SegmentCount,6);
      WriteData(DataText);
    END;

    PROCEDURE PostDataport@1(Rec@1240030000 : Record 14000713);
    VAR
      UPSManifest@1240030001 : Record 14000768;
    BEGIN
      // PostDataport
      WITH Rec DO BEGIN
        UPSManifest.RESET;
        UPSManifest.SETCURRENTKEY("Manifest No.","Shipper Account Number","Record Type");
        UPSManifest.SETRANGE("Manifest No.","Manifest No.");
        UPSManifest.SETRANGE("Shipper Account Number","Shipping Agent Account No.");
        IF UPSManifest.FIND('-') THEN
          REPEAT
            UPSManifest."Text File Created" := TRUE;
            UPSManifest."Text File Name" := ManifestFile.NAME;
            UPSManifest."Export Count" := UPSManifest."Export Count" + 1;
            UPSManifest.MODIFY;
          UNTIL UPSManifest.NEXT = 0;
        ManifestFile.CLOSE;
      END;
    END;

    PROCEDURE GetShippingAgentAccount@4(Rec@1240030000 : Record 14000713);
    BEGIN
      // GetShippingAgentAccount
      WITH Rec DO BEGIN
        IF ShippingAgentAccount."Account No." = '' THEN
          ShippingAgentAccount.GET("Shipping Agent Account No.");
      END;
    END;

    PROCEDURE CreateManifestFile@3(Rec@1240030000 : Record 14000713);
    VAR
      FileName@1240030001 : Text[250];
      FileSequence@1240030002 : Text[30];
    BEGIN
      // CreateManifestFileName
      WITH Rec DO BEGIN
        PackingStation.GetPackingStation;
        CarrierPackingStation.GetPackingStation(PackingStation);
        CarrierPackingStation.TESTFIELD("UPS Manifest Upload Directory");
        GetShippingAgentAccount(Rec);
        FileName :=
          DELCHR(
            STRSUBSTNO(
              'UPS-%1-%2-%3-%4',
              ShippingAgentAccount."Account No.","Manifest No.",WORKDATE,TIME),
            '=','/:.;');

        IF COPYSTR(
             CarrierPackingStation."UPS Manifest Upload Directory",
             STRLEN(CarrierPackingStation."UPS Manifest Upload Directory"),1) = '\'
        THEN
          FileName := CarrierPackingStation."UPS Manifest Upload Directory" + FileName
        ELSE
          FileName := CarrierPackingStation."UPS Manifest Upload Directory" + '\' + FileName;

        FileSequence := '1';
        IF EXISTS(FileName + '.txt') THEN BEGIN
          REPEAT
            FileSequence := INCSTR(FileSequence);
          UNTIL NOT EXISTS(FileName + '-' + FileSequence + '.txt');
          FileName := FileName + '-' + FileSequence + '.txt';
        END ELSE
          FileName := FileName + '.txt';

        ManifestFile.WRITEMODE(TRUE);
        ManifestFile.CREATE(FileName);
      END;
    END;

    LOCAL PROCEDURE FixUPSManifestData@2(VAR CurrentUPSManifest@1240030000 : Record 14000768;ModifyData@1240030001 : Boolean);
    VAR
      UPSManifestPart2@1240030002 : Record 14000771;
    BEGIN
      // FixUPSManifestData
      WITH CurrentUPSManifest DO BEGIN
        "Book Number" := ShippingAgentAccount."Book No.";
        "Page Number" := '0' + ShippingAgentAccount."Page No.";

        IF (ShippingAgentAccount."Manifest Version" = ShippingAgentAccount."Manifest Version"::"7.00") AND
           (NOT UPSManifestPart2.GET("Entry No."))
        THEN BEGIN
          UPSManifestPart2.INIT;
          UPSManifestPart2."Entry No." := "Entry No.";
          UPSManifestPart2.INSERT;
        END;

        IF ModifyData THEN BEGIN
          IF (COPYSTR("Consignee Phone",1,1) <> '1') AND ("Consignee Phone" <> '') THEN
            "Consignee Phone" := '1' + DELCHR("Consignee Phone",'=','-')
          ELSE
            "Consignee Phone" := DELCHR("Consignee Phone",'=','-');

          IF "Packaging Type" = '00' THEN
            "Packaging Type" := '02';

          CASE STRLEN("Delivery Zone") OF
            1:  "Delivery Zone" := '00' + "Delivery Zone";
            2:  "Delivery Zone" := '0' + "Delivery Zone";
          END;

          IF "Currency Code" = '' THEN
            "Currency Code" := 'USD';

          IF "Call Tag Indicator" <> '1' THEN
            "Call Tag Schedule Pick Date" := '';

          IF ("Consignee Address1" = '') AND ("Consignee Address2" <> '') THEN BEGIN
            "Consignee Address1" := "Consignee Address2";
            "Consignee Address2" := '';
          END;
        END;
      END;
    END;

    PROCEDURE WriteData@11(DataText@1240030000 : Text[250]);
    VAR
      I@1240030001 : Integer;
      WriteChar@1240030002 : Char;
    BEGIN
      // WriteData
      FOR I := 1 TO STRLEN(DataText) DO BEGIN
        WriteChar := DataText[I];
        ManifestFile.WRITE(WriteChar);
      END;
    END;

    LOCAL PROCEDURE Date2Text@28(InDate@1240030000 : Date) : Text[30];
    BEGIN
      // Date2Text
      EXIT(
        DELCHR(
          FORMAT(
            10000 * DATE2DMY(InDate,3) + 100 * DATE2DMY(InDate,2) + DATE2DMY(InDate,1)),'=',',.'));
    END;

    LOCAL PROCEDURE Integer2Text@5(CalcInteger@1240030001 : Integer;FillLen@1240030002 : Integer) TempText@1240030000 : Text[30];
    VAR
      FillText@1240030003 : Text[30];
      ThousandChar@1240030004 : Text[1];
      DataLen@1240030005 : Integer;
    BEGIN
      // Integer2Text
      ThousandChar := COPYSTR(FORMAT(1000.1),2,1);
      TempText := FORMAT(CalcInteger);
      TempText := DELCHR(TempText,'=',ThousandChar);
      TempText := CONVERTSTR(TempText,',','.');
      FillText := PADSTR('',FillLen,'0');
      DataLen := STRLEN(TempText);
      TempText := COPYSTR(FillText,1,FillLen - DataLen) + TempText;
      EXIT(TempText);
    END;

    PROCEDURE GetTotalShipmentWeight@9(Rec@1240030001 : Record 14000768) TotalWeight@1240030000 : Integer;
    VAR
      UPSManifest@1240030002 : Record 14000768;
      TempInt@1240030003 : Integer;
    BEGIN
      // GetTotalShipmentWeight
      WITH Rec DO BEGIN
        TotalWeight := 0;
        UPSManifest.RESET;
        UPSManifest.SETCURRENTKEY(
          "Shipment Number","Manifest No.","Shipper Account Number","Manifest Sent");
        UPSManifest.SETRANGE("Shipment Number","Shipment Number");
        UPSManifest.SETRANGE("Manifest No.","Manifest No.");
        UPSManifest.SETRANGE("Shipper Account Number","Shipper Account Number");
        UPSManifest.SETRANGE("Record Type",'0100');
        UPSManifest.FIND('-');
        REPEAT
          EVALUATE(
            TempInt,
              COPYSTR(
                UPSManifest."Package Actual Weight",2,STRLEN(UPSManifest."Package Actual Weight")));
          TotalWeight := TotalWeight + TempInt;
        UNTIL UPSManifest.NEXT = 0;
      END;
    END;

    PROCEDURE GetTotalDimensionalWeight@14(Rec@1240030001 : Record 14000768) TotalWeight@1240030000 : Integer;
    VAR
      UPSManifest@1240030002 : Record 14000768;
      TempDec@1240030003 : Decimal;
      TempInt@1240030004 : Integer;
      MinCubicSize@1240030005 : Integer;
      DimFactor@1240030006 : Integer;
      Length@1240030007 : Integer;
      Width@1240030008 : Integer;
      Height@1240030009 : Integer;
      International@1240030010 : Boolean;
    BEGIN
      // GetTotalDimensionalWeight
      WITH Rec DO BEGIN
        IF ("Service Type" = "Service Type"::Canadian) OR
           ("Service Type" = "Service Type"::International)
        THEN BEGIN
          International := TRUE;
          MinCubicSize := 0;
          DimFactor := 166;
        END ELSE BEGIN
          International := FALSE;
          MinCubicSize := 1728;
          DimFactor := 194;
        END;

        TotalWeight := 0;
        UPSManifest.RESET;
        UPSManifest.SETCURRENTKEY(
          "Shipment Number","Manifest No.","Shipper Account Number","Manifest Sent");
        UPSManifest.SETRANGE("Shipment Number","Shipment Number");
        UPSManifest.SETRANGE("Manifest No.","Manifest No.");
        UPSManifest.SETRANGE("Shipper Account Number","Shipper Account Number");
        UPSManifest.SETRANGE("Record Type",'0100');
        UPSManifest.FIND('-');
        REPEAT
          IF UPSManifest."Package Length" <> '' THEN
            EVALUATE(
              Length,COPYSTR(UPSManifest."Package Length",2,STRLEN(UPSManifest."Package Length") - 3))
          ELSE
            Length := 0;
          IF UPSManifest."Package Width" <> '' THEN
            EVALUATE(
              Width,COPYSTR(UPSManifest."Package Width",2,STRLEN(UPSManifest."Package Width") - 3))
          ELSE
            Width := 0;
          IF UPSManifest."Package Height" <> '' THEN
            EVALUATE(
              Height,COPYSTR(UPSManifest."Package Height",2,STRLEN(UPSManifest."Package Height") - 3))
          ELSE
            Height := 0;
          TempDec := Length * Width * Height;
          IF TempDec <= MinCubicSize THEN
            TempDec := 0;
          TempDec := ROUND(TempDec / DimFactor,0.1,'>');
          TempInt := TempDec * 10;
          TotalWeight := TotalWeight + TempInt;
        UNTIL UPSManifest.NEXT = 0;
      END;
    END;

    PROCEDURE GetCompanyInfo@16();
    BEGIN
      // GetCompanyInfo
      IF CompanyInfo.Name = '' THEN
        CompanyInfo.GET;
    END;

    PROCEDURE GetPackagingType@6(Rec@1240030000 : Record 14000768) : Code[2];
    BEGIN
      // GetPackagingType
      WITH Rec DO BEGIN
        CASE "Packaging Type" OF
          '00':
            EXIT('02');
          '01':
            EXIT('01');
          '02':
            EXIT('02');
          '03':
            EXIT('03');
          '04':
            EXIT('04');
          '21':
            EXIT('21');
          '24':
            EXIT('24');
          '25':
            EXIT('25');
          ELSE
            EXIT('02');
        END;
      END;
    END;

    PROCEDURE GetTotalPackageCount@26(Rec@1240030001 : Record 14000768) TotalPackages@1240030000 : Integer;
    VAR
      UPSManifest@1240030002 : Record 14000768;
    BEGIN
      // GetTotalPackageCount
      WITH Rec DO BEGIN
        UPSManifest.RESET;
        UPSManifest.SETCURRENTKEY(
          "Shipment Number","Manifest No.","Shipper Account Number","Manifest Sent");
        UPSManifest.SETRANGE("Shipment Number","Shipment Number");
        UPSManifest.SETRANGE("Manifest No.","Manifest No.");
        UPSManifest.SETRANGE("Shipper Account Number","Shipper Account Number");
        UPSManifest.SETRANGE("Record Type",'0100');
        TotalPackages := 0;
        IF UPSManifest.FIND('-') THEN
          REPEAT
            TotalPackages := TotalPackages + 1;
          UNTIL UPSManifest.NEXT = 0;
        IF TotalPackages = 0 THEN
          TotalPackages := 1;
      END;
    END;

    LOCAL PROCEDURE GetUPSCountryCode@31(CountryCode@1240030000 : Code[10]) : Code[10];
    VAR
      Country@1240030001 : Record 9;
    BEGIN
      IF CountryCode <> '' THEN BEGIN
        Country.GET(CountryCode);
        Country.TESTFIELD(UPS);
        EXIT(Country."ISO 2 char Country Code");
      END ELSE
        EXIT('US');
    END;

    LOCAL PROCEDURE FixPhoneNo@35(OriginalPhone@1240030001 : Text[30];WorldWide@1240030002 : Boolean) ReturnPhone@1240030000 : Text[30];
    VAR
      PhoneNoText@1240030003 : Text[30];
    BEGIN
      IF STRLEN(OriginalPhone) <> 0 THEN BEGIN
        PhoneNoText := OriginalPhone;
        PhoneNoText := DELCHR(PhoneNoText,'=','-');
        PhoneNoText := DELCHR(PhoneNoText,'=','+');
        PhoneNoText := DELCHR(PhoneNoText,'=','/');
        PhoneNoText := DELCHR(PhoneNoText,'=',' ');
        PhoneNoText := DELCHR(PhoneNoText,'=','(');
        PhoneNoText := DELCHR(PhoneNoText,'=',')');
        IF NOT WorldWide THEN BEGIN
          IF STRLEN(PhoneNoText) = 11 THEN
            ReturnPhone := PhoneNoText + '    '
          ELSE IF STRLEN(PhoneNoText) = 10 THEN
            ReturnPhone := '1' + PhoneNoText + '    '
          ELSE
            ReturnPhone := '';
        END ELSE
          ReturnPhone := PhoneNoText;
      END ELSE
        ReturnPhone := '';
    END;

    PROCEDURE HazMatSegment@27(Rec@1240030000 : Record 14000768);
    VAR
      UPSManifest@1240030001 : Record 14000768;
      Rec210@1240030002 : Record 14000771;
      Rec220@1240030004 : Record 14000771;
      DataText@1240030003 : Text[250];
    BEGIN
      // HazMatSegment
      WITH Rec DO BEGIN
        UPSManifest.RESET;
        UPSManifest.SETCURRENTKEY(
          "Shipment Number","Manifest No.","Record Type","Alternate Party Type");
        UPSManifest.SETRANGE("Shipment Number","Shipment Number");
        UPSManifest.SETRANGE("Manifest No.","Manifest No.");
        UPSManifest.SETRANGE("Record Type",'0210');
        UPSManifest.SETRANGE("Package No.","Package No.");
        IF UPSManifest.FIND('-') THEN
          REPEAT
            Rec210.GET(UPSManifest."Entry No.");  // Record 0210
            Rec220.GET(UPSManifest."Entry No." + 1);  // Record 0220
            WriteData('*QA');
            SegmentCount := SegmentCount + 1;
            WriteData('001');
            DataText := PADSTR(Rec210."Haz. Mat. Regulation Set",5);
            WriteData(DataText);
            DataText := PADSTR(Rec210."Haz. Mat. Reportable Qty.",2);
            WriteData(DataText);
            DataText := PADSTR(Rec210."Haz. Mat. Division No.",7);
            WriteData(DataText);
            DataText := PADSTR(Rec210."Haz. Mat. Subrisk Class",7);
            WriteData(DataText);
            DataText := PADSTR(Rec210."Haz. Mat. Identification No.",6);
            WriteData(DataText);
            DataText := PADSTR('',10);  // ADR Item Number
            WriteData(DataText);
            DataText := PADSTR(Rec220."Haz. Mat. Packing Group No.",5);
            WriteData(DataText);
            DataText := ' ';  // ADR Packing Group Letter
            WriteData(DataText);
            DataText := PADSTR(Rec220."Haz. Mat. Quantity",5);
            WriteData(DataText);
            DataText := PADSTR(Rec220."Haz. Mat. Units",10);
            WriteData(DataText);
            DataText := PADSTR(Rec220."Haz. Mat. Packing Instructions",4);
            WriteData(DataText);
            DataText := PADSTR(Rec220."Haz. Mat. Transportation Mode",30);
            WriteData(DataText);
            DataText := PADSTR(Rec220."Haz. Mat. Emergency Phone No.",25);
            WriteData(DataText);
            DataText := PADSTR(Rec210."Haz. Mat. Shipping Name",150);
            WriteData(DataText);
            DataText := PADSTR(Rec210."Haz. Mat. Technical Name",200);
            WriteData(DataText);
            DataText := PADSTR(Rec220."Haz. Mat. Additional Info.",250);
            WriteData(DataText);
            DataText := PADSTR('',5);
            WriteData(DataText);
            DataText := PADSTR(Rec220."Haz. Mat. Package Type",250);
            WriteData(DataText);
            DataText := PADSTR('',5);
            WriteData(DataText);
            DataText := PADSTR(Rec220."Haz. Mat. Labels Required",50);
            WriteData(DataText);
          UNTIL UPSManifest.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

