OBJECT Codeunit 14002360 E.D.I. Sales Invoice Send
{
  OBJECT-PROPERTIES
  {
    Date=07/13/20;
    Time=12:00:00 PM;
    Version List=SE0.62,TPZ1460,TPZEDI_0908;
  }
  PROPERTIES
  {
    TableNo=112;
    Permissions=TableData 112=rimd;
    OnRun=BEGIN
            IF NOT ExportSalesInvoice(Rec) THEN BEGIN
              IF ZeroInvoice THEN
                EXIT
              ELSE IF "EDI Invoice" THEN //TPZ1460
                ERROR(Text001,"No.");
            END;
          END;

  }
  CODE
  {
    VAR
      BilltoCustomer@1240030000 : Record 18;
      BillOfLading@1240030064 : Record 14000822;
      CompanyInformation@1240030001 : Record 79;
      EDISetup@1240030002 : Record 14002367;
      EDITemplate@1240030003 : Record 14002350;
      EDITradePartner@1240030004 : Record 14002360;
      EDIDocument@1240030005 : Record 14002353;
      EDISegment@1240030006 : Record 14002354;
      EDISegment2@1240030007 : Record 14002354;
      EDIElement@1240030008 : Record 14002355;
      EDISendDocHdr@1240030009 : Record 14002369;
      EDITotalFields@1240030010 : Record 14002361;
      EDICustCrossRef@1240030011 : Record 14002362;
      Item@1240030012 : Record 27;
      ItemUnitOfMeasure@1240030013 : Record 5404;
      PaymentTerms@1240030014 : Record 3;
      SelltoCustomer@1240030015 : Record 18;
      ShiptoAddress@1240030016 : Record 222;
      SalespersonPurchaser@1240030017 : Record 13;
      SalesInvoiceHeader@1240030018 : Record 112;
      SalesInvoiceLine@1240030019 : TEMPORARY Record 113;
      SalesInvoiceLine2@1240030020 : Record 113;
      SalesHeader@1240030021 : Record 36;
      SalesLine@1240030022 : Record 37;
      SalesShipmentHdr@1240030065 : Record 110;
      ShipmentMethod@1240030024 : Record 10;
      ShippingAgent@1240030025 : Record 291;
      OrigSalesInvoiceLine@1240030069 : Record 113;
      EDIElementArray@1240030026 : ARRAY [100] OF Record 14002355;
      PostedPackage@1240030066 : Record 14000704;
      VATEntry@1240030078 : Record 254;
      SalesCommentLine@1240020000 : Record 44;
      ItemCrossReference@1240020001 : Record 5717;
      EDITradePtnrItem@1240020011 : Record 14002364;
      EDIDiscount@1240020028 : Record 14002382;
      EDILineDiscount@1240020020 : Record 14002383;
      EDIDiscountSummary@1240020033 : Record 14002384;
      EDITradePtnrUOM@1240020040 : Record 14002365;
      VATEntryDetail@1240020046 : Record 254;
      EDIReceiveDocHdrInfo@1240020049 : Record 14002371;
      EDIReceiveDocLineInfo@1240020050 : Record 14002372;
      SalesShipmentHdr2@1240020052 : Record 110;
      SalesCommentLineDetail@1240020044 : Record 44;
      SalesInvoiceLine3@1240020063 : Record 113;
      SalesInvoiceHeader2@1240020041 : Record 112;
      SalesShipmentLine@1240020062 : Record 111;
      Location@1240020069 : Record 14;
      VATEntryDetailTmp@1240020068 : TEMPORARY Record 254;
      ShipforAddress@1240020072 : Record 222;
      ShiptoCountry@1240020073 : Record 9;
      BilltoCountry@1240020074 : Record 9;
      SelltoCountry@1240020075 : Record 9;
      ShipfromCountry@1240020076 : Record 9;
      EDISend@1240030027 : Codeunit 14002356;
      EDIFormat@1240030029 : Codeunit 14002351;
      EDIPackageMapIntegration@1240030067 : Codeunit 14002378;
      EDIGetReverseCrossRef@1240020017 : Codeunit 14000373;
      CreateEDIAlert@1240020018 : Codeunit 14000375;
      EDILoadDBFields@1240020053 : Codeunit 14002392;
      EDILoadEDIOutFields@1240020057 : Codeunit 14000381;
      TimeVariable@1240020054 : Time;
      DateTimeVariable@1240020055 : DateTime;
      BooleanVariable@1240030030 : Boolean;
      BypassSegment@1240030031 : Boolean;
      DateVariable@1240030032 : Date;
      DecimalVariable@1240030033 : Decimal;
      DocumentNo@1240030034 : Code[10];
      i@1240030035 : Integer;
      ILidx@1240030036 : Integer;
      InvoiceLineNoArray@1240030037 : ARRAY [1000] OF Integer;
      IntegerVariable@1240030038 : Integer;
      InvoiceTax@1240030039 : Decimal;
      InvDiscAmount@1240030040 : Decimal;
      InvFreightAmt@1240030041 : Decimal;
      InvNetShipWeight@1240030042 : Decimal;
      InvGrossShipWeight@1240030043 : Decimal;
      InvPalletWeight@1240030044 : Decimal;
      InvTotalUnits@1240030045 : Decimal;
      InvTotalBaseUnits@1240030046 : Decimal;
      LineNumber@1240030047 : Integer;
      NewSegment@1240030048 : Boolean;
      Ok@1240030049 : Boolean;
      OutFldArray@1240030051 : ARRAY [100] OF Text[250];
      OutLenArray@1240030052 : ARRAY [100] OF Integer;
      OutErrorArray@1240030053 : ARRAY [100] OF Boolean;
      OutputOff@1240030054 : Boolean;
      ProcessingLines@1240030055 : Boolean;
      PmtNetDays@1240030056 : Integer;
      PmtDiscDays@1240030057 : Integer;
      PmtDiscAmt@1240030058 : Decimal;
      PmtDiscountedAmt@1240030059 : Decimal;
      PmtDiscPercent@1240030060 : Decimal;
      TotalInvDiscount@1240030061 : Decimal;
      TradePtnrFound@1240030062 : Boolean;
      TotalSegments@1240030063 : Integer;
      Text001@1001 : TextConst 'ENU=Invoice %1 not exported.';
      Text002@1002 : TextConst 'ENU=Customer %1 is not set up as an EDI Trading Partner.';
      Text003@1003 : TextConst 'ENU=Customer %1 is not set up with an Active EDI transaction %2.';
      Text004@1004 : TextConst 'ENU=EDI Document %1 for Trading Partner %2 has a mapping error.';
      Text005@1005 : TextConst 'ENU=Invoice line not found for Invoice # %1.';
      Text006@1006 : TextConst 'ENU=Unable to find EDI segment definition for Trading Partner %1.';
      Text007@1007 : TextConst 'ENU=LINE END Command found before LINE BEGIN.  Check Segment Definition.';
      Text008@1008 : TextConst 'ENU=Unable to find EDI Segment Elements for the following: %1 - %2 - %3 - %4';
      RecordNo@1240020035 : Integer;
      InvGrossAmt@1240030068 : Decimal;
      InvoiceTaxPercent@1240030070 : Decimal;
      InternalDocNo@1240030071 : Code[10];
      LoopFinished@1240030073 : Boolean;
      RepeatCount@1240030077 : Integer;
      InvDropShipAmt@1240020002 : Decimal;
      TotalInvLineDiscount@1240020004 : Decimal;
      TotalInvLineDiscount2@1240020034 : Decimal;
      EDIInvDiscAmt@1240020022 : Decimal;
      EDIInvLineDiscAmt@1240020029 : Decimal;
      TotalFieldsGeneric1@1240020023 : Decimal;
      TotalFieldsGeneric2@1240020024 : Decimal;
      TotalFieldsGeneric3@1240020025 : Decimal;
      TotalFieldsGeneric4@1240020026 : Decimal;
      EDIDiscountTotal@1240020027 : Decimal;
      EDIDiscountLineTotal@1240020021 : Decimal;
      PmtDiscAmtExclVAT@1240020036 : Decimal;
      PmtDiscountedAmtExclVAT@1240020037 : Decimal;
      LoopCnt@1240020003 : Integer;
      NoOfAttempts@1240020005 : Integer;
      InvoiceLinesPosted@1240020006 : Boolean;
      Finished@1240020009 : Boolean;
      EndofSalesLines@1240020007 : Boolean;
      EndOfSalesInvoiceLines@1240020010 : Boolean;
      ReverseCrossReference@1240020016 : Boolean;
      EDIDiscountFound@1240020019 : Boolean;
      EDIDiscountLineFound@1240020030 : Boolean;
      LineDiscCalculation@1240020031 : Boolean;
      HdrDiscCalculation@1240020032 : Boolean;
      ReverseCrossRefArray@1240020015 : ARRAY [100] OF Text[40];
      ReverseCrossRefValue@1240020014 : Text[40];
      BypassSegment2@1240020013 : Boolean;
      OutError2@1240020012 : Boolean;
      EDIUOMFound@1240020008 : Boolean;
      MultiplierQty@1240020038 : Decimal;
      EDIQty@1240020039 : Decimal;
      NavBaseQty@1240020042 : Decimal;
      OrderBaseQty@1240020043 : Decimal;
      GenericCounter@1240020094 : Integer;
      CounterIncremented@1240020045 : Boolean;
      NoLineDiscount@1240020047 : Boolean;
      NoInvoiceDiscount@1240020048 : Boolean;
      TotalEDIQty@1240020051 : Decimal;
      RecRef@1240020058 : RecordRef;
      InvDiscAmountBalance@1240020056 : Decimal;
      SLNItemDetail@1240020059 : Boolean;
      SLNGroup@1240020061 : Integer;
      ZeroInvoice@1240020060 : Boolean;
      NewInvoiceLine@1240020064 : Boolean;
      ConsolidatedSDQInvoice@1240020066 : Boolean;
      SDQSegmentID@1240020065 : Code[15];
      Text009@1240020067 : TextConst 'ENU=Segment with elements that have Origin of SDQ and field name of SDQ SHIP FOR must exist when Consolidated SDQ Invoice is enabled on the E.D.I. Document card.';
      PackageBasedOnItem@1240020070 : Boolean;
      XMLDoc@1240020071 : Boolean;
      Text010@1000000000 : TextConst 'ENU=Combination of %1:%2 and %3:%4 is not setup in %5 for %6.';
      InvActualPriceMult@1000000002 : Decimal;
      InvTotalAmount@1000000001 : Decimal;
      DiscAmt@1000000003 : Decimal;

    PROCEDURE ExportSalesInvoice@18(VAR CurrentSalesInvHdr@1240030001 : Record 112) ErrorCode@1240030000 : Boolean;
    VAR
      EDIXMLManagement@1240020002 : Codeunit 14099302;
      NodeOnly@1240020000 : Boolean;
      CreateNode@1240020001 : Boolean;
      EDITradePrtnrDivExcp@1000000000 : Record 50040;
    BEGIN
      CLEAR(EDILoadEDIOutFields);
      SalesInvoiceHeader.COPY(CurrentSalesInvHdr);
      SalesInvoiceHeader.CALCFIELDS(Amount,"Amount Including VAT");
      SalesInvoiceHeader.TESTFIELD("Shortcut Dimension 5 Code"); //TPZEDI
      ZeroInvoice := FALSE;
      IF SalesInvoiceHeader.Amount = 0 THEN BEGIN
        IF SalesInvoiceHeader2.GET(SalesInvoiceHeader."No.") THEN BEGIN
          SalesInvoiceHeader2."EDI Invoice" := FALSE;
          SalesInvoiceHeader2.MODIFY;
          ZeroInvoice := TRUE;
          EXIT;
        END;
      END;
      // <TPZ848>
      IF EDITradePrtnrDivExcp.GET(SalesInvoiceHeader."EDI Trade Partner",SalesInvoiceHeader."Shortcut Dimension 5 Code") AND
         EDITradePrtnrDivExcp.Exclude
      THEN BEGIN
        //<TPZ1460>
        CurrentSalesInvHdr."EDI Order" := FALSE;
        CurrentSalesInvHdr."EDI Invoice" := FALSE;
        CurrentSalesInvHdr."EDI Trade Partner" := '';
        //</TPZ1460>
        EXIT;
      END;
      // </TPZ848>

      IF SalesInvoiceHeader."Invoice for Bill of Lading No." <> '' THEN BEGIN
        BillOfLading.RESET;
        BillOfLading.SETRANGE("No.",SalesInvoiceHeader."Invoice for Bill of Lading No.");
        IF NOT BillOfLading.FIND('-') THEN
          CLEAR(BillOfLading);
      END;

      EDISetup.LOCKTABLE;
      EDISetup.GET;
      IF SalesInvoiceHeader."EDI Internal Doc. No." = '' THEN BEGIN
        EDISetup."Last Internal Doc. No." := INCSTR(EDISetup."Last Internal Doc. No.");
        SalesInvoiceHeader."EDI Internal Doc. No." := EDISetup."Last Internal Doc. No.";
        EDISetup.MODIFY;
      END;

      TradePtnrFound := FALSE;
      //TPZ
      IF EDITradePartner.GET(SalesInvoiceHeader."EDI Trade Partner") THEN
        IF EDITradePartner."Vendor No." = '' THEN
          TradePtnrFound := TRUE;
      //TPZ
      IF NOT TradePtnrFound THEN BEGIN   //TPZ
      EDITradePartner.SETCURRENTKEY("Customer No.");
      EDITradePartner.SETRANGE("Customer No.",SalesInvoiceHeader."Bill-to Customer No.");
      IF EDITradePartner.FIND('-') THEN BEGIN
        TradePtnrFound := TRUE;
        CLEAR(EDICustCrossRef);
        EDICustCrossRef.RESET;
        EDICustCrossRef.SETRANGE("Trade Partner No.",EDITradePartner."No.");
        EDICustCrossRef.SETRANGE("Navision Ship To Code",SalesInvoiceHeader."Ship-to Code");
        Ok := EDICustCrossRef.FIND('-');
      END;
      END; //TPZ
      IF NOT TradePtnrFound THEN BEGIN
        CLEAR(EDICustCrossRef);
        EDICustCrossRef.SETCURRENTKEY("Navision Sell To Code");
        EDICustCrossRef.SETRANGE(
          "Navision Sell To Code",SalesInvoiceHeader."Sell-to Customer No.");
        EDICustCrossRef.SETRANGE("Navision Ship To Code",SalesInvoiceHeader."Ship-to Code");
        IF EDICustCrossRef.FIND('-') THEN BEGIN
          EDITradePartner.GET(EDICustCrossRef."Trade Partner No.");
          TradePtnrFound := TRUE;
        END;
      END;
      //<TPZ1460>
      IF NOT TradePtnrFound THEN BEGIN //TPZ1460
        IF ((SalesInvoiceHeader."Sell-to Customer No." <> '') AND
            (SalesInvoiceHeader."Ship-to Code" <> ''))  THEN
          ERROR(Text010, SalesInvoiceHeader.FIELDCAPTION(SalesInvoiceHeader."Sell-to Customer No."),
                         SalesInvoiceHeader."Sell-to Customer No.",
                         SalesInvoiceHeader.FIELDCAPTION(SalesInvoiceHeader."Ship-to Code"),
                         SalesInvoiceHeader."Ship-to Code",
                         EDICustCrossRef.TABLECAPTION,
                         SalesInvoiceHeader."EDI Trade Partner")
        ELSE
        ERROR(
          Text002,
          SalesInvoiceHeader."Sell-to Customer No.");
      END;
      //</TPZ1460>


      DocumentNo := 'E_SLSINV';

      EDIDocument.SETRANGE("Trade Partner No.",EDITradePartner."No.");
      EDIDocument.SETFILTER(
        Status,'%1|%2',EDIDocument.Status::Test,EDIDocument.Status::Production);
      EDIDocument.SETRANGE("Navision Document",DocumentNo);
      EDIDocument.SETRANGE(Type,EDIDocument.Type::Export);
      IF NOT EDIDocument.FIND('-') THEN
        ERROR(
          Text003,
          SalesInvoiceHeader."Bill-to Customer No.",DocumentNo);
      XMLDoc := EDIDocument."XML Document";

      IF EDIDocument."Packaged Map" THEN BEGIN
        IF EDIPackageMapIntegration.EDISalesInvoiceSend(SalesInvoiceHeader) THEN
        // IF EDISalesInvoiceSendPM.ExportSalesInvoice(SalesInvoiceHeader) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END;

      EDIDocument.CALCFIELDS("Element Mapping Error","Conditional Mapping Error");
      IF EDIDocument."Element Mapping Error" OR EDIDocument."Conditional Mapping Error" THEN
        ERROR(
          Text004,
          EDIDocument."Navision Document",EDIDocument."Trade Partner No.");

      EDITemplate.GET(EDIDocument."EDI Template Code");

      CheckForSDQ;

      Finished := FALSE;
      IF EDIDocument."Enable Partial Invoice Check" THEN BEGIN
        NoOfAttempts := 0;
        InvoiceLinesPosted := FALSE;

        SalesHeader.RESET;
        SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
        SalesHeader.SETRANGE("No.",SalesInvoiceHeader."Order No.");
        IF SalesHeader.FIND('-') THEN BEGIN
          SalesLine.RESET;
          SalesLine.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
          SalesLine.SETRANGE("Document No.",SalesInvoiceHeader."Order No.");
          SalesLine.SETRANGE(Type,SalesLine.Type::Item);
          EndofSalesLines := SalesLine.FIND('+');

          OrigSalesInvoiceLine.RESET;
          OrigSalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."Order No.");
          OrigSalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
          OrigSalesInvoiceLine.SETRANGE(Type,OrigSalesInvoiceLine.Type::Item);
          EndOfSalesInvoiceLines := OrigSalesInvoiceLine.FIND('+');
          IF SalesLine."Line No." <> OrigSalesInvoiceLine."Line No." THEN
            REPEAT
              SLEEP := 1000;
              NoOfAttempts := NoOfAttempts + 1;
              OrigSalesInvoiceLine.RESET;
              OrigSalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."Order No.");
              OrigSalesInvoiceLine.SETRANGE(Type,OrigSalesInvoiceLine.Type::Item);
              EndOfSalesInvoiceLines := OrigSalesInvoiceLine.FIND('+');
              IF SalesLine."Line No." <> OrigSalesInvoiceLine."Line No." THEN BEGIN
                IF NoOfAttempts > 5 THEN
                  Finished := TRUE
              END ELSE
                InvoiceLinesPosted := TRUE;
            UNTIL InvoiceLinesPosted OR Finished
          ELSE
            InvoiceLinesPosted := TRUE;
        END ELSE
          InvoiceLinesPosted := TRUE;
      END;

      InvFreightAmt := 0;
      InvPalletWeight := 0;
      InvDropShipAmt := 0;
      TotalFieldsGeneric1 := 0;
      TotalFieldsGeneric2 := 0;
      TotalFieldsGeneric3 := 0;
      TotalFieldsGeneric4 := 0;

      CounterIncremented := FALSE;
      CalculateTotalFields;

      EDISendDocHdr."Internal Doc No." := SalesInvoiceHeader."EDI Internal Doc. No.";
      EDISendDocHdr."Navision Document" := DocumentNo;
      EDISendDocHdr."Document No." := SalesInvoiceHeader."No.";
      EDISendDocHdr."Shortcut Dimension 5 Code" := SalesInvoiceHeader."Shortcut Dimension 5 Code"; //TPZEDI
      EDISend.CreateSendHdr(EDITradePartner,EDIDocument,EDISendDocHdr);

      EDIDiscountFound := FALSE;
      EDIDiscount.RESET;
      EDIDiscount.SETRANGE("Internal Doc. No.",SalesInvoiceHeader."EDI Internal Doc. No.");
      IF EDIDiscount.FIND('-') THEN
        EDIDiscountFound := TRUE;

      EDIDiscountLineFound := FALSE;
      EDILineDiscount.RESET;
      EDILineDiscount.SETRANGE("Internal Doc. No.",SalesInvoiceHeader."EDI Internal Doc. No.");
      IF EDILineDiscount.FIND('-') THEN
        EDIDiscountLineFound := TRUE;

      CreateVATEntryTmp;
      ReadHdrAssocTables;

      SalesInvoiceLine.RESET;
      SalesInvoiceLine.DELETEALL;

      SalesInvoiceLine.RESET;
      SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");

      IF EDIDocument."Inv. Line Data Not Summarized" THEN BEGIN
        OrigSalesInvoiceLine.RESET;
        OrigSalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
        OrigSalesInvoiceLine.SETFILTER("No.",'<>%1','');
        IF OrigSalesInvoiceLine.FIND('-') THEN
          REPEAT
            SalesInvoiceLine.COPY(OrigSalesInvoiceLine);
            SalesInvoiceLine.INSERT;
          UNTIL OrigSalesInvoiceLine.NEXT = 0;
      END ELSE BEGIN
        OrigSalesInvoiceLine.RESET;
        OrigSalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
        OrigSalesInvoiceLine.SETFILTER("No.",'<>%1','');
        IF OrigSalesInvoiceLine.FIND('-') THEN
          REPEAT
            SalesInvoiceLine.SETRANGE("No.",OrigSalesInvoiceLine."No.");
            SalesInvoiceLine.SETRANGE("Variant Code",OrigSalesInvoiceLine."Variant Code");
            IF SalesInvoiceLine.FIND('-') THEN BEGIN
              SalesInvoiceLine.Quantity :=
                SalesInvoiceLine.Quantity + OrigSalesInvoiceLine.Quantity;
              SalesInvoiceLine."Quantity (Base)" :=
                SalesInvoiceLine."Quantity (Base)" + OrigSalesInvoiceLine."Quantity (Base)";
              SalesInvoiceLine."Line Discount Amount" :=
                SalesInvoiceLine."Line Discount Amount" + OrigSalesInvoiceLine."Line Discount Amount";
              SalesInvoiceLine."Inv. Discount Amount" :=
                SalesInvoiceLine."Inv. Discount Amount" + OrigSalesInvoiceLine."Inv. Discount Amount";
              SalesInvoiceLine.Amount :=
                SalesInvoiceLine.Amount + OrigSalesInvoiceLine.Amount;
              SalesInvoiceLine."Amount Including VAT" :=
                SalesInvoiceLine."Amount Including VAT" + OrigSalesInvoiceLine."Amount Including VAT";
              SalesInvoiceLine."Gross Weight" :=
                SalesInvoiceLine."Gross Weight" + OrigSalesInvoiceLine."Gross Weight";
              SalesInvoiceLine."Net Weight" :=
                SalesInvoiceLine."Net Weight" + OrigSalesInvoiceLine."Net Weight";
              SalesInvoiceLine.MODIFY;
            END ELSE BEGIN
              SalesInvoiceLine.COPY(OrigSalesInvoiceLine);
              SalesInvoiceLine.INSERT;
            END;
          UNTIL OrigSalesInvoiceLine.NEXT = 0;
      END;

      SetSLNItemDetail;

      CLEAR(InvoiceLineNoArray);
      LineNumber := 0;
      InvNetShipWeight := 0;
      InvGrossShipWeight := 0;
      InvTotalUnits := 0;
      InvGrossAmt := 0;
      InvTotalBaseUnits := 0;
      TotalInvDiscount := 0;
      InvoiceTaxPercent := 0;
      TotalSegments := 0;
      EDIDiscountTotal := 0;
      EDIDiscountLineTotal := 0;
      TotalInvLineDiscount := 0;
      TotalInvLineDiscount2 := 0;
      GenericCounter := 0;
      TotalEDIQty := 0;
      PackageBasedOnItem := FALSE;
      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT",Amount);
      InvoiceTax := SalesInvoiceHeader."Amount Including VAT" - SalesInvoiceHeader.Amount;
      IF SalesInvoiceHeader.Amount <> 0 THEN
        InvoiceTaxPercent := (InvoiceTax / SalesInvoiceHeader.Amount) * 100;

      SalesInvoiceLine.RESET;
      SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      SalesInvoiceLine.SETFILTER("No.",'<>%1','');
      IF NOT EDIDocument."Export Zero Qty. Lines" THEN
        SalesInvoiceLine.SETFILTER(Quantity,'>0');
      ILidx := 0;
      IF SalesInvoiceLine.FIND('-') THEN
        REPEAT
          ILidx := ILidx + 1;
          InvoiceLineNoArray[ILidx] := SalesInvoiceLine."Line No.";
        UNTIL SalesInvoiceLine.NEXT = 0;
      IF NOT SalesInvoiceLine.FIND('-') THEN
        ERROR(Text005,SalesInvoiceHeader."No.");

      PackageDataByItem;

      // Create Line Segments
      EDISegment.SETRANGE("Trade Partner No.",EDIDocument."Trade Partner No.");
      EDISegment.SETRANGE("Navision Document",EDIDocument."Navision Document");
      EDISegment.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
      EDISegment.SETRANGE(Version,EDIDocument.Version);
      EDISegment.SETRANGE(Type,EDIDocument.Type);
      IF NOT EDISegment.FIND('-') THEN
        ERROR(
          Text006,
          EDIDocument."Trade Partner No.");
      REPEAT
        LineDiscCalculation := FALSE;
        HdrDiscCalculation := FALSE;
        InternalDocNo := SalesInvoiceHeader."EDI Internal Doc. No.";
        IF (SalesInvoiceLine."EDI Line Type" = SalesInvoiceLine."EDI Line Type"::Change) AND
           (SalesInvoiceLine."EDI Line Status" = SalesInvoiceLine."EDI Line Status"::New)
        THEN
          GetAssocInternalDocNo(SalesInvoiceHeader);
        CASE EDISegment."Segment Type" OF
          EDISegment."Segment Type"::Command:
            BEGIN
              IF (EDISegment.Segment = 'LINE BEGIN') OR
                 (EDISegment."Node Name" = 'LINE BEGIN')
              THEN BEGIN
                EDISegment2.COPY(EDISegment);
                ProcessingLines := TRUE;

                OutputOff := FALSE;
                IF NOT EDIDocument."Export G/L Account Lines" AND
                  (SalesInvoiceLine.Type = EDITotalFields.Type::"Account (G/L)")
                THEN
                  OutputOff := TRUE;
                IF NOT EDIDocument."Export Resource Lines" AND
                  (SalesInvoiceLine.Type = EDITotalFields.Type::Resource)
                THEN
                  OutputOff := TRUE;
                IF NOT EDIDocument."Export Item Charge Lines" AND
                  (SalesInvoiceLine.Type = SalesInvoiceLine.Type::"Charge (Item)")
                THEN
                  OutputOff := TRUE;
                ReadLineAssocTables;
              END;
              IF (EDISegment.Segment = 'LINE END') OR
                 (EDISegment."Node Name" = 'LINE END')
              THEN BEGIN
                TotalInvLineDiscount2 := 0;
                OutputOff := FALSE;
                IF NOT ProcessingLines THEN
                  ERROR(Text007);
                IF SalesInvoiceLine.NEXT <> 0 THEN BEGIN
                  IF NOT EDIDocument."Export G/L Account Lines" AND
                    (SalesInvoiceLine.Type = EDITotalFields.Type::"Account (G/L)") THEN
                      OutputOff := TRUE;
                  IF NOT EDIDocument."Export Resource Lines" AND
                    (SalesInvoiceLine.Type = EDITotalFields.Type::Resource) THEN
                      OutputOff := TRUE;
                  IF NOT EDIDocument."Export Item Charge Lines" AND
                    (SalesInvoiceLine.Type = SalesInvoiceLine.Type::"Charge (Item)") THEN
                      OutputOff := TRUE;
                  ReadLineAssocTables;
                  EDISegment.GET(
                    EDISegment2."Trade Partner No.",EDISegment2."Navision Document",
                    EDISegment2."EDI Document No.",EDISegment2.Version,
                    EDISegment2.Type,EDISegment2."Processing Sequence",EDISegment2.Segment);
                END ELSE
                  ProcessingLines := FALSE;
              END;
            END;
          EDISegment."Segment Type"::Segment:
            BEGIN
              LoopFinished := TRUE;
              BypassSegment := FALSE;
              NodeOnly := FALSE;
              CreateNode := TRUE;
              EDIElement.SETRANGE("Trade Partner No.",EDISegment."Trade Partner No.");
              EDIElement.SETRANGE("Navision Document",EDISegment."Navision Document");
              EDIElement.SETRANGE("EDI Document No.",EDISegment."EDI Document No.");
              EDIElement.SETRANGE(Version,EDISegment.Version);
              EDIElement.SETRANGE(Type,EDISegment.Type);
              EDIElement.SETRANGE(Segment,EDISegment.Segment);
              EDIElement.SETRANGE(Type,EDIElement.Type::Export);
              IF NOT EDIElement.FIND('-') THEN BEGIN
                IF XMLDoc THEN BEGIN
                  EDISegment.CALCFIELDS("Has Attributes","Node Text");
                  IF EDISegment."Node Text" OR EDISegment."Has Attributes" THEN
                    ERROR(
                      Text008,
                        EDISegment."Trade Partner No.",EDISegment."Navision Document",
                        EDISegment.Version,EDISegment."Node Name")
                  ELSE
                    NodeOnly := TRUE;
                END ELSE
                  ERROR(
                    Text008,
                      EDISegment."Trade Partner No.",EDISegment."Navision Document",
                      EDISegment.Version,EDISegment.Segment);
              END ELSE
                IF XMLDoc AND EDIElement."Node Text" THEN
                  CreateNode := FALSE;
              IF (XMLDoc = FALSE) OR (XMLDoc AND NodeOnly = FALSE) THEN BEGIN
                TotalSegments := TotalSegments + 1;
                CLEAR(OutFldArray);
                CLEAR(OutLenArray);
                CLEAR(OutErrorArray);
                CLEAR(EDIElementArray);
                i := 1;
                LoopCnt := 1;
                REPEAT
                  ReverseCrossRefArray[i] := '';
                  ReverseCrossReference := EDIElement."Reverse Cross Reference";
                  IF ((EDIElement."Fixed Value" <> '') AND (XMLDoc = FALSE)) OR
                     ((EDIElement."XML Fixed Value" <> '') AND (XMLDoc))
                  THEN BEGIN
                    IF XMLDoc THEN
                      OutFldArray[i] := EDIElement."XML Fixed Value"
                    ELSE
                      OutFldArray[i] := EDIElement."Fixed Value";
                  END ELSE
                    CASE EDIElement.Origin OF
                      EDIElement.Origin::Navision:
                        BEGIN
                          LoadDBFields;
                          IF ReverseCrossReference THEN BEGIN
                            CLEAR(EDIGetReverseCrossRef);
                            ReverseCrossRefArray[i] :=
                              EDIGetReverseCrossRef.GetReverseCrossRef(
                                EDIElement,EDISendDocHdr,OutFldArray[i]);
                              EDIGetReverseCrossRef.FormatOutput(
                                EDISendDocHdr,EDIElement,OutError2,ReverseCrossRefArray,BypassSegment2,i);
                          END;
                        END;
                      EDIElement.Origin::"EDI In":
                        BEGIN
                          IF SLNItemDetail THEN
                            GetSLNGroup;
                          EDIFormat.LoadEDIInFields(
                            EDIElement,InternalDocNo,SalesInvoiceLine."EDI Segment Group",
                            ProcessingLines,i,OutFldArray,BooleanVariable,DateVariable,DecimalVariable,IntegerVariable,
                            TimeVariable,DateTimeVariable);
                        END;
                      EDIElement.Origin::"EDI Out":
                        BEGIN
                          CASE EDIElement."Field Name" OF
                            'Tax Amount By Jurisdiction (Detail)':
                               VATBalanceCheck;
                          END;
                          LoadEDIOutFields;
                        END;
                      EDIElement.Origin::SDQ:
                        BEGIN
                          IF ConsolidatedSDQInvoice THEN BEGIN
                            IF EDIElement."Field Name" = 'SDQ SHIP FOR' THEN BEGIN
                              IF NewInvoiceLine THEN BEGIN
                                NewInvoiceLine := FALSE;
                              END ELSE BEGIN
                                IF SalesInvoiceLine3.NEXT = 0 THEN BEGIN
                                  CLEAR(SalesShipmentHdr);
                                  CLEAR(SalesShipmentLine);
                                END ELSE BEGIN
                                  SalesShipmentHdr.RESET;
                                  SalesShipmentHdr.SETRANGE("No.",SalesInvoiceLine3."Shipment No.");
                                  IF SalesShipmentHdr.FIND('-') THEN BEGIN
                                    SalesShipmentLine.RESET;
                                    SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHdr."No.");
                                    SalesShipmentLine.SETFILTER(Quantity,'<>%1',0);
                                    SalesShipmentLine.SETRANGE(Type,SalesInvoiceLine.Type);
                                    SalesShipmentLine.SETRANGE("No.",SalesInvoiceLine."No.");
                                    IF NOT SalesShipmentLine.FIND('-') THEN
                                      CLEAR(SalesShipmentLine);
                                  END ELSE
                                    CLEAR(SalesShipmentHdr);
                                END;
                              END;
                              OutFldArray[i] := SalesShipmentHdr."EDI Ship-for Code";
                            END;
                          END;
                        END;
                    END;
                  OutLenArray[i] := EDIElement.Length;
                  EDIFormat.FormatOutput(
                    EDITemplate,EDIElement,OutFldArray,OutErrorArray,i,BypassSegment,
                    BooleanVariable,DateVariable,DecimalVariable,IntegerVariable,TimeVariable,
                    DateTimeVariable);
                  IF ReverseCrossReference THEN
                    OutErrorArray[i] := OutError2;
                  EDIElementArray[i].COPY(EDIElement);
                  i := i + 1;
                UNTIL EDIElement.NEXT = 0;
              END;
              NewSegment := TRUE;
              i := 1;
              IF ReverseCrossReference THEN
                BypassSegment := BypassSegment2;
                IF (LoopCnt = 1) AND (EDISegment."Repeat Segment") THEN BEGIN
                  RepeatSegment(TRUE);
                  LoopCnt := LoopCnt + 1;
                END;
              IF (NOT BypassSegment) AND (NOT OutputOff) THEN BEGIN
                IF XMLDoc AND CreateNode THEN BEGIN
                  EDISend.CreateSendLine(
                    EDISendDocHdr,EDIElementArray[i],OutFldArray[i],OutLenArray[i],OutErrorArray[i],
                    NewSegment,ReverseCrossRefValue,EDIDocument,TRUE,EDISegment);
                  NewSegment := FALSE;
                END;
                IF (XMLDoc = FALSE) OR (XMLDoc AND NodeOnly = FALSE) THEN
                  REPEAT
                    ReverseCrossRefValue := ReverseCrossRefArray[i];
                    EDISend.CreateSendLine(
                      EDISendDocHdr,EDIElementArray[i],OutFldArray[i],OutLenArray[i],OutErrorArray[i],
                      NewSegment,ReverseCrossRefValue,EDIDocument,FALSE,EDISegment);
                    NewSegment := FALSE;
                    i := i + 1;
                  UNTIL OutLenArray[i] = 0;
                CounterIncremented := FALSE;
              END ELSE BEGIN
                IF (CounterIncremented) AND (GenericCounter <> 0) THEN BEGIN
                  GenericCounter := GenericCounter - 1;
                  CounterIncremented := FALSE;
                END;
                TotalSegments := TotalSegments - 1;
              END;
            END;
        END;

        IF LineDiscCalculation AND NOT BypassSegment THEN
          CreateDiscountSummaryEntry(EDIInvLineDiscAmt,FALSE);
        IF HdrDiscCalculation AND NOT BypassSegment THEN
          CreateDiscountSummaryEntry(EDIInvDiscAmt,TRUE);
        IF (EDISegment."Repeat Segment") THEN
          CASE TRUE OF
            LoopFinished = FALSE:
              BEGIN
                GetNextRecord;
                EDISegment.NEXT(-1);
              END;
            LoopFinished = TRUE:
              BEGIN
                ResetAssocRecord(RecordNo);
                HdrDiscCalculation := FALSE;
                LineDiscCalculation := FALSE;
              END;
          END;

        IF (ConsolidatedSDQInvoice) AND (EDISegment.Segment = SDQSegmentID) THEN BEGIN
          IF RepeatSDQSegment THEN
            EDISegment.NEXT(-1);
        END;
      UNTIL EDISegment.NEXT = 0;

      IF EDISetup."Send Document Error" THEN BEGIN
        EDISendDocHdr.CALCFIELDS("Data Error");
        IF EDISendDocHdr."Data Error" THEN BEGIN
          CLEAR(CreateEDIAlert);
          CreateEDIAlert.CreateAlertSendDocError(EDISendDocHdr."No.",1,FALSE);
        END;
      END;

      SalesInvoiceHeader."EDI Invoice Generated" := TRUE;
      SalesInvoiceHeader."EDI Inv. Gen. Date" := TODAY;
      SalesInvoiceHeader.MODIFY;

      IF XMLDoc THEN
        EDIXMLManagement.ResponseIDSubstitution(EDISendDocHdr);

      EXIT(TRUE);
    END;

    PROCEDURE LoadEDIOutFields@16();
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;

      IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN BEGIN
        CASE EDIElement."Field Name" OF
          ELSE BEGIN
            CASE EDIElement."Field Name" OF
              'EDI Discount Amount':
                BEGIN
                  IF NoInvoiceDiscount = FALSE THEN BEGIN
                    HdrDiscCalculation := TRUE;
                    RepeatSegment(FALSE);
                  END;
                END;
              'EDI Line Discount Amount':
                BEGIN
                  EDIInvLineDiscAmt := 0;
                  IF NoLineDiscount = FALSE THEN BEGIN
                    LineDiscCalculation := TRUE;
                    RepeatSegment(FALSE);
                  END;
                END;
              'Quantity per EDI Unit of Measure':
                GetEDIQty;
            END;
            LoadEDIOutVariable;
            LoadEDIOutRecordRef;
            EDILoadEDIOutFields.SalesInvoiceSendEDIOut(
              EDIElement,OutFldArray,DecimalVariable,IntegerVariable,DateVariable,
              BooleanVariable,TimeVariable,DateTimeVariable,i,GenericCounter,CounterIncremented);
          END;
        END;
      END;
    END;

    PROCEDURE UpdateLineTotals@28();
    BEGIN
      IF NOT OutputOff THEN BEGIN
        LineNumber := LineNumber + 1;
        InvTotalUnits := InvTotalUnits + SalesInvoiceLine.Quantity;
        InvTotalBaseUnits := InvTotalBaseUnits + SalesInvoiceLine."Quantity (Base)";
        // <TPZ848>
        InvActualPriceMult := ROUND(SalesInvoiceLine."Actual Unit Price" * 100);
        InvTotalAmount := InvTotalAmount + (ROUND(SalesInvoiceLine."Actual Unit Price",0.0001) * SalesInvoiceLine."Quantity (Base)");
        // </TPZ848>
        InvGrossAmt := InvGrossAmt + (SalesInvoiceLine."Unit Price" * SalesInvoiceLine.Quantity);
      END;

      InvNetShipWeight := InvNetShipWeight + (SalesInvoiceLine."Net Weight" *
                                              SalesInvoiceLine.Quantity);
      InvGrossShipWeight := InvGrossShipWeight + (SalesInvoiceLine."Gross Weight" *
                                                  SalesInvoiceLine.Quantity);

      TotalInvDiscount := TotalInvDiscount + SalesInvoiceLine."Inv. Discount Amount";

      TotalInvLineDiscount := TotalInvLineDiscount + SalesInvoiceLine."Line Discount Amount";

      TotalInvLineDiscount2 := TotalInvLineDiscount2 + SalesInvoiceLine."Line Discount Amount";
    END;

    PROCEDURE LoadDBFields@23();
    BEGIN
      CASE EDIElement."NAV Table No." OF
        3:
          BEGIN
            RecRef.OPEN(3);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(PaymentTerms);
          END;
        10:
          BEGIN
            RecRef.OPEN(10);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShipmentMethod);
          END;
         14:
          BEGIN
            RecRef.OPEN(14);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(Location);
          END;
        27:
          BEGIN
            RecRef.OPEN(27);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(Item);
          END;
        36:
          BEGIN
            RecRef.OPEN(36);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesHeader);
          END;
        37:
          BEGIN
            RecRef.OPEN(37);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesLine);
          END;
        44:
          BEGIN
            RecRef.OPEN(44);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesCommentLine);
          END;
        79:
          BEGIN
            RecRef.OPEN(79);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(CompanyInformation);
          END;
        110:
          BEGIN
            RecRef.OPEN(110);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesShipmentHdr);
          END;
        111:
          BEGIN
            RecRef.OPEN(111);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesShipmentLine);
          END;
        112:
          BEGIN
            RecRef.OPEN(112);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesInvoiceHeader);
          END;
        113:
          BEGIN
            RecRef.OPEN(113);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesInvoiceLine);
          END;
        222:
          BEGIN
            RecRef.OPEN(222);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShiptoAddress);
          END;
        254:
          BEGIN
            RecRef.OPEN(254);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(VATEntry);
          END;
        291:
          BEGIN
            RecRef.OPEN(291);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShippingAgent);
          END;
        5404:
          BEGIN
            RecRef.OPEN(5404);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ItemUnitOfMeasure);
          END;
        5717:
          BEGIN
            RecRef.OPEN(5717);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ItemCrossReference);
          END;
        10018:
          BEGIN
            RecRef.OPEN(18);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SelltoCustomer);
          END;
        10019:
          BEGIN
            RecRef.OPEN(18);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(BilltoCustomer);
          END;
        10044:
          BEGIN
            RecRef.OPEN(44);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesCommentLineDetail);
          END;
        10222:
          BEGIN
            RecRef.OPEN(222);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShipforAddress);
          END;
        19009:
          BEGIN
            RecRef.OPEN(9);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SelltoCountry);
          END;
        19010:
          BEGIN
            RecRef.OPEN(9);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(BilltoCountry);
          END;
        19011:
          BEGIN
            RecRef.OPEN(9);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShiptoCountry);
          END;
        19012:
          BEGIN
            RecRef.OPEN(9);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShipfromCountry);
          END;
        10254:
          BEGIN
            RecRef.OPEN(254);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(VATEntryDetail);
          END;
        14000704:
          BEGIN
            RecRef.OPEN(14000704);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(PostedPackage);
          END;
        14000822:
          BEGIN
            RecRef.OPEN(14000822);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(BillOfLading);
          END;
        14002350:
          BEGIN
            RecRef.OPEN(14002350);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDITemplate);
          END;
        14002353:
          BEGIN
            RecRef.OPEN(14002353);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDIDocument);
          END;
        14002354:
          BEGIN
            RecRef.OPEN(14002354);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDISegment);
          END;
        14002360:
          BEGIN
            RecRef.OPEN(14002360);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDITradePartner);
          END;
        14002362:
          BEGIN
            RecRef.OPEN(14002362);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDICustCrossRef);
          END;
        14002364:
          BEGIN
            RecRef.OPEN(14002364);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDITradePtnrItem);
          END;
        14002365:
          BEGIN
            RecRef.OPEN(14002365);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDITradePtnrUOM);
          END;
          14002369:
          BEGIN
            RecRef.OPEN(14002369);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDISendDocHdr);
          END;
        14002382:
          BEGIN
            RecRef.OPEN(14002382);
            IF RecRef.FIND('-') THEN
             RecRef.GETTABLE(EDIDiscount);
          END;
        14002383:
          BEGIN
            RecRef.OPEN(14002383);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDILineDiscount);
          END;
        14002371:
          BEGIN
            RecRef.OPEN(14002371);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDIReceiveDocHdrInfo);
          END;
        14002372:
          BEGIN
            RecRef.OPEN(14002372);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDIReceiveDocLineInfo);
          END;
        ELSE
          EXIT;
      END;

      EDILoadDBFields.LoadDBFields(
        EDIElement,OutFldArray,DecimalVariable,IntegerVariable,DateVariable,
        BooleanVariable,TimeVariable,DateTimeVariable,i,RecRef);
      RecRef.CLOSE;
    END;

    PROCEDURE ReadHdrAssocTables@26();
    BEGIN
      NoInvoiceDiscount := FALSE;

      EDITemplate.GET(EDIDocument."EDI Template Code");

      CompanyInformation.GET;

      SalesInvoiceHeader.CALCFIELDS(Amount,"Amount Including VAT");

      CLEAR(PaymentTerms);
      IF SalesInvoiceHeader."Payment Terms Code" <> '' THEN BEGIN
        PaymentTerms.GET(SalesInvoiceHeader."Payment Terms Code");
        PmtDiscPercent := PaymentTerms."Discount %";
        PmtDiscAmt := ROUND(
          (SalesInvoiceHeader."Amount Including VAT" * PaymentTerms."Discount %") / 100);
        PmtDiscAmtExclVAT := ROUND(
          (SalesInvoiceHeader.Amount * PaymentTerms."Discount %") / 100);
        PmtDiscountedAmt := SalesInvoiceHeader."Amount Including VAT" - PmtDiscAmt;
        PmtDiscountedAmtExclVAT := SalesInvoiceHeader.Amount - PmtDiscAmtExclVAT;
        PmtDiscDays := (CALCDATE(PaymentTerms."Discount Date Calculation",TODAY) - TODAY);
        PmtNetDays := (CALCDATE(PaymentTerms."Due Date Calculation",TODAY) - TODAY);
        // <TPZ848>
        DiscAmt := ROUND((SalesInvoiceHeader."Amount Including VAT" * 2.0) / 100);
        // </TPZ848>

      END ELSE BEGIN
        PmtNetDays := 0;
        PmtDiscDays := 0;
        PmtDiscAmt := 0;
        PmtDiscPercent := 0;
        PmtDiscAmtExclVAT := 0;
        PmtDiscountedAmtExclVAT := 0;
      END;

      SelltoCustomer.GET(SalesInvoiceHeader."Sell-to Customer No.");

      BilltoCustomer.GET(SalesInvoiceHeader."Bill-to Customer No.");

      CLEAR(ShiptoAddress);
      IF SalesInvoiceHeader."Ship-to Code" <> '' THEN
        ShiptoAddress.GET(
          SalesInvoiceHeader."Sell-to Customer No.",SalesInvoiceHeader."Ship-to Code");

      CLEAR(ShipforAddress);
      IF SalesInvoiceHeader."Ship-for Code" <> '' THEN
        ShipforAddress.GET(
          SalesInvoiceHeader."Sell-to Customer No.",SalesInvoiceHeader."Ship-for Code");

      CLEAR(SalespersonPurchaser);
      IF SalesInvoiceHeader."Salesperson Code" <> '' THEN BEGIN
        SalespersonPurchaser.SETRANGE(Code,SalesInvoiceHeader."Salesperson Code");
        SalespersonPurchaser.FIND('-');
      END;

      CLEAR(ShipmentMethod);
      IF SalesInvoiceHeader."Shipment Method Code" <> '' THEN
        ShipmentMethod.GET(SalesInvoiceHeader."Shipment Method Code");

      CLEAR(ShippingAgent);
      IF SalesInvoiceHeader."Shipping Agent Code" <> '' THEN
        ShippingAgent.GET(SalesInvoiceHeader."Shipping Agent Code");
      //<TPZEDI>
      IF SalesShipmentHdr.GET(SalesInvoiceHeader."Invoice for Shipment No.") THEN BEGIN
        PostedPackage.RESET;
        PostedPackage.SETCURRENTKEY(
          "Source Type","Source Subtype","Posted Source ID","Bill of Lading No.");
        PostedPackage.SETRANGE("Source Type",36);
        PostedPackage.SETRANGE("Source Subtype",1);
        PostedPackage.SETRANGE("Posted Source ID",SalesShipmentHdr."No.");
        IF NOT PostedPackage.FIND('-') THEN
          CLEAR(PostedPackage);
        END ELSE BEGIN
          //CLEAR(PostedPackage);
          PostedPackage.RESET;
          PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          PostedPackage.SETRANGE("Source Type",36);
          PostedPackage.SETFILTER("Source Subtype",'%1|%2', 1, 2);
          PostedPackage.SETRANGE("Source ID",SalesInvoiceHeader."Order No.");
          IF NOT PostedPackage.FIND('-') THEN
        CLEAR(PostedPackage);
        END;
        ///TPZEDI>


      VATEntry.RESET;
      VATEntry.SETCURRENTKEY("Document No.","Posting Date");
      VATEntry.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      VATEntry.SETRANGE("Posting Date",SalesInvoiceHeader."Posting Date");
      VATEntry.SETRANGE("Document Type",VATEntry."Document Type"::Invoice);
      IF NOT VATEntry.FIND('-') THEN
        CLEAR(VATEntry);

      SalesCommentLine.RESET;
      SalesCommentLine.SETRANGE("Document Type",SalesCommentLine."Document Type"::"Posted Invoice");
      SalesCommentLine.SETRANGE("No.",SalesInvoiceHeader."No.");
      SalesCommentLine.SETRANGE("Document Line No.",0);
      IF NOT SalesCommentLine.FIND('-') THEN
        CLEAR(SalesCommentLine);

      EDIDiscount.RESET;
      EDIDiscount.SETRANGE("Internal Doc. No.",SalesInvoiceHeader."EDI Internal Doc. No.");
      IF EDIDiscount.FIND('-') THEN
        CalculateInvoiceDiscountAmt
      ELSE BEGIN
        NoInvoiceDiscount := TRUE;
        CLEAR(EDIDiscount);
      END;

      EDIReceiveDocHdrInfo.RESET;
      EDIReceiveDocHdrInfo.SETCURRENTKEY("Document No.");
      EDIReceiveDocHdrInfo.SETRANGE("Document No.",SalesInvoiceHeader."Order No.");
      EDIReceiveDocHdrInfo.SETRANGE("Internal Doc. No.",SalesInvoiceHeader."EDI Internal Doc. No.");
      IF NOT EDIReceiveDocHdrInfo.FIND('-') THEN
        CLEAR(EDIReceiveDocHdrInfo);

      IF NOT Location.GET(SalesInvoiceHeader."Location Code") THEN
        CLEAR(Location);


      IF SalesInvoiceHeader."Sell-to Country/Region Code" <> '' THEN
        IF NOT SelltoCountry.GET(SalesInvoiceHeader."Sell-to Country/Region Code") THEN
          CLEAR(SelltoCountry);

      IF SalesInvoiceHeader."Bill-to Country/Region Code" <> '' THEN
        IF NOT BilltoCountry.GET(SalesInvoiceHeader."Bill-to Country/Region Code") THEN
          CLEAR(BilltoCountry);

      IF SalesInvoiceHeader."Ship-to Country/Region Code" <> '' THEN
        IF NOT ShiptoCountry.GET(SalesInvoiceHeader."Ship-to Country/Region Code") THEN
          CLEAR(ShiptoCountry);

      IF Location."Country/Region Code" <> '' THEN
        IF NOT ShipfromCountry.GET(Location."Country/Region Code") THEN
          CLEAR(ShipfromCountry);

      //
      // Add any other tables associated with the sales invoice header here.
      //
    END;

    PROCEDURE ReadLineAssocTables@27();
    VAR
      PostedPackageLine@1240020000 : Record 14000705;
      Range@1240020001 : ARRAY [10] OF Text[250];
      i@1240020002 : Integer;
    BEGIN
      UpdateLineTotals;
      NoLineDiscount := FALSE;
      CLEAR(Range);

      // Get Line supporting data from other tables.
      IF SalesInvoiceLine.Type = SalesInvoiceLine.Type::Item THEN
          IF NOT Item.GET(SalesInvoiceLine."No.") THEN
            CLEAR(Item);

      IF SalesInvoiceLine.Type = SalesInvoiceLine.Type::Item THEN BEGIN
        IF NOT Item.GET(SalesInvoiceLine."No.") THEN
          CLEAR(Item);
        IF NOT ItemUnitOfMeasure.GET(
          SalesInvoiceLine."No.",SalesInvoiceLine."Unit of Measure Code")
        THEN
          CLEAR(ItemUnitOfMeasure);
      END;

      ItemCrossReference.RESET;
      ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
      ItemCrossReference.SETFILTER(
        "Cross-Reference Type",'<>%1',ItemCrossReference."Cross-Reference Type"::Vendor);
      ItemCrossReference.SETRANGE("Cross-Reference Type No.",SalesInvoiceHeader."Sell-to Customer No.");
      ItemCrossReference.SETRANGE("Item No.",SalesInvoiceLine."No.");
      ItemCrossReference.SETRANGE("Variant Code",SalesInvoiceLine."Variant Code");
      IF NOT ItemCrossReference.FIND('-') THEN BEGIN
        ItemCrossReference.SETRANGE("Cross-Reference Type No.",'');
        IF NOT ItemCrossReference.FIND('-') THEN
          CLEAR(ItemCrossReference);
      END;

      EDITradePtnrItem.RESET;
      EDITradePtnrItem.SETRANGE("Trade Partner No.",EDITradePartner."No.");
      EDITradePtnrItem.SETRANGE("Navision Item No.",SalesInvoiceLine."No.");
      EDITradePtnrItem.SETRANGE("Navision Variant Code",SalesInvoiceLine."Variant Code");
      IF NOT EDITradePtnrItem.FIND('-') THEN
        EDITradePtnrItem.SETRANGE("Navision Variant Code");
      IF NOT EDITradePtnrItem.FIND('-') THEN
        CLEAR(EDITradePtnrItem);

      EDILineDiscount.RESET;
      EDILineDiscount.SETCURRENTKEY("Internal Doc. No.","Segment Group",Code);
      EDILineDiscount.SETRANGE("Internal Doc. No.",SalesInvoiceHeader."EDI Internal Doc. No.");
      EDILineDiscount.SETRANGE("Segment Group",SalesInvoiceLine."EDI Segment Group");
      EDILineDiscount.SETRANGE("Document No.",SalesInvoiceHeader."Order No.");
      EDILineDiscount.SETRANGE("Document Line No.",SalesInvoiceLine."Line No.");
      IF NOT EDILineDiscount.FIND('-') THEN BEGIN
        NoLineDiscount := TRUE;
        CLEAR(EDILineDiscount);
      END;

      EDITradePtnrUOM.RESET;
      EDITradePtnrUOM.SETRANGE("Trade Partner No.",EDITradePartner."No.");
      EDITradePtnrUOM.SETRANGE("Navision Item No.",SalesInvoiceLine."No.");
      EDITradePtnrUOM.SETRANGE("Navision Variant Code",SalesInvoiceLine."Variant Code");
      EDITradePtnrUOM.SETRANGE("Order Unit of Measure",SalesInvoiceLine."Unit of Measure Code");
      IF NOT EDITradePtnrUOM.FIND('-') THEN BEGIN
        EDITradePtnrUOM.SETFILTER("Navision Item No.",'=%1','');
        EDITradePtnrUOM.SETFILTER("Navision Variant Code",'=%1','');
        IF NOT EDITradePtnrUOM.FIND('-') THEN
          CLEAR(EDITradePtnrUOM);
      END;

      VATEntryDetail.RESET;
      VATEntryDetail.SETCURRENTKEY("Document No.","Posting Date");
      VATEntryDetail.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      VATEntryDetail.SETRANGE("Posting Date",SalesInvoiceHeader."Posting Date");
      VATEntryDetail.SETRANGE("Document Type",VATEntry."Document Type"::Invoice);
      VATEntryDetail.SETRANGE("Tax Group Code",SalesInvoiceLine."Tax Group Code");
      IF NOT VATEntryDetail.FIND('-') THEN
        CLEAR(VATEntryDetail);

      IF SalesInvoiceLine."Shipment No." = '' THEN BEGIN
        EDIReceiveDocLineInfo.RESET;
        EDIReceiveDocLineInfo.SETCURRENTKEY("Document No.","Line No.");
        EDIReceiveDocLineInfo.SETRANGE("Document No.",SalesInvoiceHeader."Order No.");
        EDIReceiveDocLineInfo.SETRANGE("Internal Doc. No.",SalesInvoiceHeader."EDI Internal Doc. No.");
        EDIReceiveDocLineInfo.SETRANGE("Line No.",SalesInvoiceLine."Line No.");
        IF NOT EDIReceiveDocLineInfo.FIND('-') THEN
          CLEAR(EDIReceiveDocLineInfo);
      END ELSE BEGIN
        SalesShipmentHdr2.RESET;
        SalesShipmentHdr2.SETRANGE("No.",SalesInvoiceLine."Shipment No.");
        IF SalesShipmentHdr2.FIND('-') THEN BEGIN
          EDIReceiveDocHdrInfo.RESET;
          EDIReceiveDocHdrInfo.SETCURRENTKEY("Document No.");
          EDIReceiveDocHdrInfo.SETRANGE("Document No.",SalesShipmentHdr2."Order No.");
          EDIReceiveDocHdrInfo.SETRANGE("Internal Doc. No.",SalesShipmentHdr2."EDI Internal Doc. No.");
          IF NOT EDIReceiveDocHdrInfo.FIND('-') THEN
            CLEAR(EDIReceiveDocHdrInfo);
          EDIReceiveDocLineInfo.RESET;
          EDIReceiveDocLineInfo.SETCURRENTKEY("Document No.","Line No.");
          EDIReceiveDocLineInfo.SETRANGE("Document No.",SalesShipmentHdr2."Order No.");
          EDIReceiveDocLineInfo.SETRANGE("Internal Doc. No.",SalesShipmentHdr2."EDI Internal Doc. No.");
          EDIReceiveDocLineInfo.SETRANGE("Line No.",SalesInvoiceLine."Shipment Line No.");
          IF NOT EDIReceiveDocLineInfo.FIND('-') THEN
            CLEAR(EDIReceiveDocLineInfo);

          IF ConsolidatedSDQInvoice THEN BEGIN
            NewInvoiceLine := TRUE;
            SalesInvoiceLine3.RESET;
            SalesInvoiceLine3.SETRANGE("Document No.",SalesInvoiceLine."Document No.");
            SalesInvoiceLine3.SETRANGE(Type,SalesInvoiceLine.Type);
            SalesInvoiceLine3.SETRANGE("No.",SalesInvoiceLine."No.");
            IF SalesInvoiceLine3.FIND('-') THEN BEGIN
              SalesShipmentHdr.RESET;
              SalesShipmentHdr.SETRANGE("No.",SalesInvoiceLine3."Shipment No.");
              IF SalesShipmentHdr.FIND('-') THEN BEGIN
                SalesShipmentLine.RESET;
                SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHdr."No.");
                SalesShipmentLine.SETFILTER(Quantity,'<>%1',0);
                SalesShipmentLine.SETRANGE(Type,SalesInvoiceLine.Type);
                SalesShipmentLine.SETRANGE("No.",SalesInvoiceLine."No.");
                IF NOT SalesShipmentLine.FIND('-') THEN
                  CLEAR(SalesShipmentLine)
              END ELSE
                CLEAR(SalesShipmentHdr);
            END;
          END;
        END;
      END;

      IF (SalesShipmentHdr.GET(SalesInvoiceHeader."Invoice for Shipment No.")) AND
         (PackageBasedOnItem)
      THEN BEGIN
        PostedPackage.RESET;
        PostedPackage.SETCURRENTKEY(
          "Source Type","Source Subtype","Posted Source ID","Bill of Lading No.");
        PostedPackage.SETRANGE("Source Type",36);
        PostedPackage.SETRANGE("Source Subtype",1);
        PostedPackage.SETRANGE("Posted Source ID",SalesShipmentHdr."No.");
        IF PostedPackage.FIND('-') THEN BEGIN
          i := 1;
          REPEAT
            PostedPackageLine.RESET;
            PostedPackageLine.SETRANGE("Package No.",PostedPackage."No.");
            PostedPackageLine.SETRANGE(Type,PostedPackageLine.Type::Item);
            PostedPackageLine.SETRANGE("No.",SalesInvoiceLine."No.");
            IF PostedPackageLine.FIND('-') THEN BEGIN
              IF STRLEN(Range[i]) + STRLEN(PostedPackage."No.") > 250 THEN
                i := i + 1;
              Range[i] := Range[i] + PostedPackage."No." + '|';
            END;
          UNTIL PostedPackage.NEXT = 0;
          IF STRLEN(Range[i]) > 0 THEN BEGIN
            Range[i] := COPYSTR(Range[i],1,STRLEN(Range[i]) - 1);

            PostedPackage.RESET;
            PostedPackage.SETFILTER("No.",Range[1] + Range[2] + Range[3] + Range[4] + Range[5] +
              Range[6] + Range[7] + Range[8] + Range[9] + Range[10]);
            IF NOT PostedPackage.FIND('-') THEN
              CLEAR(PostedPackage);
          END ELSE
            CLEAR(PostedPackage);
        END ELSE
          CLEAR(PostedPackage);
      END;


      SalesCommentLineDetail.RESET;
      SalesCommentLineDetail.SETRANGE("Document Type",SalesCommentLine."Document Type"::"Posted Invoice");
      SalesCommentLineDetail.SETRANGE("No.",SalesInvoiceHeader."No.");
      SalesCommentLineDetail.SETRANGE("Document Line No.",SalesInvoiceLine."Line No.");
      IF NOT SalesCommentLineDetail.FIND('-') THEN
        SalesCommentLineDetail.INIT;

      //
      // Add any other tables associated with the sales invoice line here.
      //
    END;

    PROCEDURE RoundValue@1240030001(DecimalValue@1240030004 : Decimal) RoundedValue : Decimal;
    VAR
      RoundingPrecision@1240030003 : Decimal;
      DecimalPlaces@1240030001 : Integer;
      Decimals@1240030000 : Integer;
      RoundingPrecisionString@1240030002 : Text[20];
    BEGIN
      IF EDIElement."NAV Data Type" = EDIElement."NAV Data Type"::Decimal THEN BEGIN
        Decimals := EDIElement.Decimals;
        DecimalPlaces := 0;
        IF Decimals > 0 THEN BEGIN
          RoundingPrecisionString  := '0.1';
          IF Decimals = 1 THEN
            DecimalPlaces := 1
          ELSE
            DecimalPlaces := Decimals - 1;
          WHILE DecimalPlaces > 0 DO BEGIN
            RoundingPrecisionString := INSSTR(RoundingPrecisionString,'0',3);
            DecimalPlaces := DecimalPlaces - 1;
          END;
        END ELSE
          RoundingPrecisionString := '1';
        EVALUATE(RoundingPrecision,RoundingPrecisionString);
        RoundedValue := ROUND(DecimalValue,RoundingPrecision);
      END;
    END;

    PROCEDURE GetAssocInternalDocNo@1240030000(SalesInvHdr@1240030001 : Record 112);
    VAR
      EDIChangedDocument@1240030000 : Record 14002373;
      CurrEDIRecDocField@1240030002 : Record 14002359;
      Found@1240030003 : Boolean;
      RecordCount@1240030004 : Integer;
    BEGIN
      Found := FALSE;

      EDIChangedDocument.RESET;
      EDIChangedDocument.SETRANGE("Assoc. Internal Doc. No.",SalesInvHdr."EDI Internal Doc. No.");
      IF EDIChangedDocument.FIND('-') THEN BEGIN
        RecordCount := EDIChangedDocument.COUNT;
        IF RecordCount = 1 THEN
          InternalDocNo := EDIChangedDocument."Internal Doc. No."
        ELSE
          REPEAT
            CurrEDIRecDocField.RESET;
            CurrEDIRecDocField.SETCURRENTKEY("Internal Doc. No.","Segment Group");
            CurrEDIRecDocField.SETRANGE("Internal Doc. No.",EDIChangedDocument."Internal Doc. No.");
            CurrEDIRecDocField.SETRANGE("Segment Group",SalesInvoiceLine."EDI Segment Group");
            CurrEDIRecDocField.SETRANGE("New Item",TRUE);
            IF CurrEDIRecDocField.FIND('-') THEN
              CASE CurrEDIRecDocField."Nav Field No." OF
               SalesInvoiceLine.FIELDNO("EDI Item Cross Ref."):
                  BEGIN
                    IF SalesInvoiceLine."EDI Item Cross Ref." =
                      CurrEDIRecDocField."Field Text Value" THEN BEGIN
                        InternalDocNo := CurrEDIRecDocField."Internal Doc. No.";
                        Found := TRUE;
                      END;
                  END;
                SalesInvoiceLine.FIELDNO("Cross-Reference No."):
                  BEGIN
                    IF SalesInvoiceLine."Cross-Reference No." =
                      CurrEDIRecDocField."Field Text Value" THEN BEGIN
                        InternalDocNo := CurrEDIRecDocField."Internal Doc. No.";
                        Found := TRUE;
                     END;
                  END;
                SalesInvoiceLine.FIELDNO("No."):
                  BEGIN
                    IF SalesInvoiceLine."No." =
                      CurrEDIRecDocField."Field Text Value" THEN BEGIN
                        InternalDocNo := CurrEDIRecDocField."Internal Doc. No.";
                        Found := TRUE;
                      END;
                  END;
              END;
          UNTIL (EDIChangedDocument.NEXT = 0) OR (Found = TRUE);
      END;
    END;

    PROCEDURE RepeatSegment@1240030005(Loop@1240020011 : Boolean) : Boolean;
    VAR
      SalesCommentLine2@1240020000 : Record 44;
      SalesCommentLineDetail2@1240020010 : Record 44;
      VATEntry2@1240020001 : Record 254;
      PostedPackage2@1240020002 : Record 14000704;
      EDIDiscount2@1240020003 : Record 14002382;
      EDILineDiscount2@1240020005 : Record 14002383;
      EDIElement2@1240020008 : Record 14002355;
      VATEntryDetail2@1240020410 : Record 254;
      ExtendedPrice@1240020004 : Decimal;
      NAVDiscountAmt@1240020006 : Decimal;
      DiscountVariance@1240020007 : Decimal;
      Found@1240020009 : Boolean;
      LastRecord@1240030002 : Boolean;
    BEGIN
      EDIElement2.SETRANGE("Trade Partner No.",EDISegment."Trade Partner No.");
      EDIElement2.SETRANGE("Navision Document",EDISegment."Navision Document");
      EDIElement2.SETRANGE("EDI Document No.",EDISegment."EDI Document No.");
      EDIElement2.SETRANGE(Version,EDISegment.Version);
      EDIElement2.SETRANGE(Type,EDISegment.Type);
      EDIElement2.SETRANGE(Segment,EDISegment.Segment);
      IF EDIElement2.FIND('-') THEN
        REPEAT
          IF ((EDIElement2."NAV Table No." = DATABASE::"E.D.I. Discount") OR
              (EDIElement2."NAV Table No." = DATABASE::"E.D.I. Line Discount") OR
              (EDIElement2."Field Name" = 'EDI Discount Amount') OR
              (EDIElement2."Field Name" = 'EDI Line Discount Amount')) AND
             (Loop = TRUE)
          THEN
            EXIT;
      UNTIL EDIElement2.NEXT = 0;

      LoopFinished := TRUE;
      LastRecord := FALSE;
      Found := FALSE;
      ExtendedPrice := 0;
      EDIInvDiscAmt := 0;
      EDIInvLineDiscAmt := 0;
      RecordNo := 0;

      EDIElement2.SETRANGE("Trade Partner No.",EDISegment."Trade Partner No.");
      EDIElement2.SETRANGE("Navision Document",EDISegment."Navision Document");
      EDIElement2.SETRANGE("EDI Document No.",EDISegment."EDI Document No.");
      EDIElement2.SETRANGE(Version,EDISegment.Version);
      EDIElement2.SETRANGE(Type,EDISegment.Type);
      EDIElement2.SETRANGE(Segment,EDISegment.Segment);
      IF EDIElement2.FIND('-') THEN
        REPEAT
          CASE EDIElement2.Origin OF
            EDIElement2.Origin::"EDI Out":
              BEGIN
                CASE EDIElement2."Field Name" OF
                  'EDI Discount Amount':
                    BEGIN
                      Found := TRUE;
                      RecordNo := 1;
                      SalesInvoiceLine2.RESET;
                      SalesInvoiceLine2.SETRANGE("Document No.",SalesInvoiceHeader."No.");
                      SalesInvoiceLine2.SETRANGE(Type,SalesInvoiceLine2.Type::Item);
                      SalesInvoiceLine2.SETFILTER(Quantity,'<>%1',0);
                      IF SalesInvoiceLine2.FIND('-') THEN
                        REPEAT
                          ExtendedPrice := SalesInvoiceLine2."Line Amount";
                          EDIInvDiscAmt :=
                          EDIInvDiscAmt + (ExtendedPrice * (EDIDiscount.Percent/100));
                        UNTIL SalesInvoiceLine2.NEXT = 0;
                      EDIDiscount2.COPY(EDIDiscount);
                      IF EDISegment.Maximum <> 0 THEN BEGIN
                        IF NOT BypassSegment THEN
                          RepeatCount := RepeatCount + 1;
                        IF (EDIDiscount2.NEXT = 0) OR (RepeatCount = EDISegment.Maximum) THEN
                          LastRecord := TRUE
                        ELSE
                          LoopFinished := FALSE;
                      END ELSE BEGIN
                        IF EDIDiscount2.NEXT = 0 THEN
                          LastRecord := TRUE
                        ELSE
                          LoopFinished := FALSE;
                      END;
                      EDIInvDiscAmt := RoundValue(EDIInvDiscAmt);
                      InvDiscAmountBalance := InvDiscAmountBalance - EDIInvDiscAmt;
                      IF LastRecord THEN
                        EDIInvDiscAmt := EDIInvDiscAmt + InvDiscAmountBalance;
                      EDIDiscountTotal := EDIDiscountTotal + EDIInvDiscAmt;
                    END;
                  'EDI Line Discount Amount':
                    BEGIN
                      Found := TRUE;
                      RecordNo := 2;
                      SalesInvoiceLine2.RESET;
                      SalesInvoiceLine2.SETRANGE("Document No.",SalesInvoiceHeader."No.");
                      SalesInvoiceLine2.SETRANGE(Type,SalesInvoiceLine2.Type::Item);
                      SalesInvoiceLine2.SETFILTER(Quantity,'<>%1',0);
                      SalesInvoiceLine2.SETRANGE("EDI Segment Group",EDILineDiscount."Segment Group");
                      IF SalesInvoiceLine2.FIND('-') THEN
                        IF EDILineDiscount.Percent <> 0 THEN BEGIN
                          REPEAT
                            ExtendedPrice := SalesInvoiceLine2.Quantity * SalesInvoiceLine2."Unit Price";
                            EDIInvLineDiscAmt :=
                              EDIInvLineDiscAmt + (ExtendedPrice * (EDILineDiscount.Percent/100));
                          UNTIL SalesInvoiceLine2.NEXT = 0
                        END ELSE
                          IF EDILineDiscount.Amount <> 0 THEN BEGIN
                            EDILineDiscount2.RESET;
                            EDILineDiscount2.SETRANGE("Internal Doc. No.",EDILineDiscount."Internal Doc. No.");
                            EDILineDiscount2.SETRANGE(Type,EDILineDiscount.Type);
                            EDILineDiscount2.SETRANGE("Segment Group",EDILineDiscount."Segment Group");
                            EDILineDiscount2.SETRANGE("Document No.",EDILineDiscount."Document No.");
                            EDILineDiscount2.SETRANGE("Document Line No.",EDILineDiscount."Document Line No.");
                            IF EDILineDiscount2.FIND('-') THEN
                              IF EDILineDiscount2.NEXT <> 0 THEN BEGIN
                                EDIInvLineDiscAmt := EDILineDiscount.Amount;
                                CLEAR(EDILineDiscount2);
                              END ELSE
                                  EDIInvLineDiscAmt := SalesInvoiceLine2."Line Discount Amount";
                          END;
                      EDIInvLineDiscAmt := RoundValue(EDIInvLineDiscAmt);
                      EDIDiscountLineTotal := EDIDiscountLineTotal + EDIInvLineDiscAmt;
                      EDILineDiscount2.COPY(EDILineDiscount);
                      IF EDISegment.Maximum <> 0 THEN BEGIN
                        IF NOT BypassSegment THEN
                          RepeatCount := RepeatCount + 1;
                        IF (EDILineDiscount2.NEXT = 0) OR (RepeatCount = EDISegment.Maximum) THEN
                          LastRecord := TRUE
                        ELSE
                          LoopFinished := FALSE;
                      END ELSE BEGIN
                        IF EDILineDiscount2.NEXT = 0 THEN
                          LastRecord := TRUE
                        ELSE
                          LoopFinished := FALSE;
                      END;
                    END;
                  END;
              END;
            EDIElement2.Origin::Navision:
              CASE EDIElement2."NAV Table No." OF
                DATABASE::"Sales Comment Line":
                  BEGIN
                    Found := TRUE;
                    RecordNo := 3;
                    IF SalesCommentLine."No." = '' THEN
                      LastRecord := TRUE
                    ELSE BEGIN
                      SalesCommentLine2.COPY(SalesCommentLine);
                      IF EDISegment.Maximum <> 0 THEN BEGIN
                        IF NOT BypassSegment THEN
                          RepeatCount := RepeatCount + 1;
                        IF (SalesCommentLine2.NEXT = 0) OR (RepeatCount = EDISegment.Maximum) THEN
                          LastRecord := TRUE
                        ELSE
                          LoopFinished := FALSE;
                      END ELSE BEGIN
                        IF SalesCommentLine2.NEXT = 0 THEN
                          LastRecord := TRUE
                        ELSE
                          LoopFinished := FALSE;
                      END;
                    END;
                  END;
                DATABASE::"VAT Entry":
                  BEGIN
                    Found := TRUE;
                    RecordNo := 4;
                    IF VATEntry."Entry No." = 0 THEN
                      LastRecord := TRUE
                    ELSE BEGIN
                      VATEntry2.COPY(VATEntry);
                      IF EDISegment.Maximum <> 0 THEN BEGIN
                        IF NOT BypassSegment THEN
                          RepeatCount := RepeatCount + 1;
                        IF (VATEntry2.NEXT = 0) OR (RepeatCount = EDISegment.Maximum) THEN
                          LastRecord := TRUE
                        ELSE
                          LoopFinished := FALSE;
                      END ELSE BEGIN
                        IF VATEntry2.NEXT = 0 THEN
                          LastRecord := TRUE
                        ELSE
                          LoopFinished := FALSE;
                      END;
                    END;
                  END;
                DATABASE::"Posted Package":
                  BEGIN
                    Found := TRUE;
                    RecordNo := 5;
                    IF PostedPackage."No." = '' THEN
                      LastRecord := TRUE
                    ELSE BEGIN
                      PostedPackage2.COPY(PostedPackage);
                      IF EDISegment.Maximum <> 0 THEN BEGIN
                        IF NOT BypassSegment THEN
                          RepeatCount := RepeatCount + 1;
                        IF (PostedPackage2.NEXT = 0) OR (RepeatCount = EDISegment.Maximum) THEN
                          LastRecord := TRUE
                        ELSE
                          LoopFinished := FALSE;
                      END ELSE BEGIN
                        IF PostedPackage2.NEXT = 0 THEN
                          LastRecord := TRUE
                        ELSE
                          LoopFinished := FALSE;
                      END;
                    END;
                  END;
                10254:
                  BEGIN
                    Found := TRUE;
                    RecordNo := 6;
                    IF VATEntryDetail."Entry No." = 0 THEN
                      LastRecord := TRUE
                    ELSE BEGIN
                      VATEntryDetail2.COPY(VATEntryDetail);
                      IF EDISegment.Maximum <> 0 THEN BEGIN
                        IF NOT BypassSegment THEN
                          RepeatCount := RepeatCount + 1;
                        IF (VATEntryDetail2.NEXT = 0) OR (RepeatCount = EDISegment.Maximum) THEN
                          LastRecord := TRUE
                        ELSE
                          LoopFinished := FALSE;
                      END ELSE BEGIN
                        IF VATEntryDetail2.NEXT = 0 THEN
                          LastRecord := TRUE
                        ELSE
                          LoopFinished := FALSE;
                      END;
                    END;
                  END;
                10044:
                  BEGIN
                    Found := TRUE;
                    RecordNo := 100;
                    SalesCommentLineDetail2.COPY(SalesCommentLineDetail);
                    IF EDISegment.Maximum <> 0 THEN BEGIN
                      IF NOT BypassSegment THEN
                        RepeatCount := RepeatCount + 1;
                      IF (SalesCommentLineDetail2.NEXT = 0) OR (RepeatCount = EDISegment.Maximum) THEN
                        LastRecord := TRUE
                      ELSE
                        LoopFinished := FALSE;
                    END ELSE BEGIN
                      IF SalesCommentLineDetail2.NEXT = 0 THEN
                        LastRecord := TRUE
                      ELSE
                        LoopFinished := FALSE;
                    END;
                  END;
              END;
          END;
        UNTIL (EDIElement2.NEXT = 0) OR (Found = TRUE);

      IF LastRecord THEN BEGIN
        LoopFinished := TRUE;
        CASE RecordNo OF
          1:
            BEGIN
              NAVDiscountAmt := TotalInvLineDiscount2;
              DiscountVariance :=  NAVDiscountAmt - EDIDiscountLineTotal;
              IF DiscountVariance <> 0 THEN
                EDIInvDiscAmt :=  EDIInvDiscAmt + DiscountVariance;
              EDIDiscountTotal := 0;
            END;
          2:
            BEGIN
              NAVDiscountAmt := TotalInvLineDiscount2;
              DiscountVariance :=  NAVDiscountAmt - EDIDiscountLineTotal;
              IF DiscountVariance <> 0 THEN
                EDIInvLineDiscAmt := EDIInvLineDiscAmt + DiscountVariance;
              EDIDiscountLineTotal := 0;
            END;
        END;
        RepeatCount := 0;
      END;
    END;

    PROCEDURE GetNextRecord@1240020002();
    BEGIN
      CASE RecordNo OF
        1:
          EDIDiscount.NEXT;
        2:
          EDILineDiscount.NEXT;
        3:
          SalesCommentLine.NEXT;
        4:
          VATEntry.NEXT;
        5:
          PostedPackage.NEXT;
        6:
          VATEntryDetail.NEXT;
        100:
          SalesCommentLineDetail.NEXT;

        // Add additional tables here
      END;
    END;

    PROCEDURE CreateDiscountSummaryEntry@1240020000(EDIDiscountAmount@1240020000 : Decimal;Header@1240020002 : Boolean);
    BEGIN
      IF Header THEN BEGIN
        EDIDiscountSummary.RESET;
        EDIDiscountSummary.SETRANGE("Internal Doc. No.",SalesInvoiceHeader."EDI Internal Doc. No.");
        EDIDiscountSummary.SETRANGE("EDI Discount Code",EDIDiscount.Code);
        EDIDiscountSummary.SETRANGE("Document Type",EDIDiscountSummary."Document Type"::"Posted Invoice");
        EDIDiscountSummary.SETRANGE("Document No.",SalesInvoiceHeader."No.");
        EDIDiscountSummary.SETRANGE("Segment Group",0);
        EDIDiscountSummary.SETRANGE("Line No.",EDIDiscount."Line No.");
        IF EDIDiscountSummary.FIND('-') THEN
          EXIT;
        IF EDIDiscountAmount <> 0 THEN BEGIN
          EDIDiscountSummary."Internal Doc. No." := SalesInvoiceHeader."EDI Internal Doc. No.";
          EDIDiscountSummary."EDI Discount Code" := EDIDiscount.Code;
          EDIDiscountSummary."Line No." := EDIDiscount."Line No.";
          EDIDiscountSummary."EDI Discount Percent" := EDIDiscount.Percent;
          EDIDiscountSummary."EDI Discount Amount" := EDIDiscountAmount;
          EDIDiscountSummary."Document Type" := EDIDiscountSummary."Document Type"::"Posted Invoice";
          EDIDiscountSummary."Document No." := SalesInvoiceHeader."No.";
          EDIDiscountSummary."Document Level" := EDIDiscountSummary."Document Level"::Header;
          EDIDiscountSummary."EDI Description" := EDIDiscount.Description;
          EDIDiscountSummary."Item No." := '';
          EDIDiscountSummary."Document Line No." := 0;
          EDIDiscountSummary."Segment Group" := 0;
          EDIDiscountSummary.INSERT;
        END;
      END ELSE BEGIN
        IF SalesInvoiceLine.Type <> SalesInvoiceLine.Type::Item THEN
          EXIT;
        IF (EDIDiscountAmount <> 0) THEN BEGIN
          EDIDiscountSummary.RESET;
          EDIDiscountSummary.SETRANGE("Internal Doc. No.",SalesInvoiceHeader."EDI Internal Doc. No.");
          EDIDiscountSummary.SETRANGE("EDI Discount Code",EDILineDiscount.Code);
          EDIDiscountSummary.SETRANGE(
            "Document Type",EDIDiscountSummary."Document Type"::"Posted Invoice");
          EDIDiscountSummary.SETRANGE("Document No.",SalesInvoiceHeader."No.");
          EDIDiscountSummary.SETRANGE("Document Line No.",SalesInvoiceLine."Line No.");
          EDIDiscountSummary.SETRANGE("Line No.",EDILineDiscount."Line No.");
          EDIDiscountSummary.SETRANGE("Segment Group",EDILineDiscount."Segment Group");
          IF EDIDiscountSummary.FIND('-') THEN
            EXIT;
          EDIDiscountSummary."Internal Doc. No." := SalesInvoiceHeader."EDI Internal Doc. No.";
          EDIDiscountSummary."EDI Discount Code" := EDILineDiscount.Code;
          EDIDiscountSummary."EDI Discount Percent" := EDILineDiscount.Percent;
          EDIDiscountSummary."EDI Discount Amount" := EDIDiscountAmount;
          EDIDiscountSummary."Document Type" := EDIDiscountSummary."Document Type"::"Posted Invoice";
          EDIDiscountSummary."Line No." := EDILineDiscount."Line No.";
          EDIDiscountSummary."Document No." := SalesInvoiceHeader."No.";
          EDIDiscountSummary."Document Level" := EDIDiscountSummary."Document Level"::Line;
          EDIDiscountSummary."EDI Description" := EDILineDiscount.Description;
          EDIDiscountSummary."Segment Group" := EDILineDiscount."Segment Group";
          EDIDiscountSummary."Item No." := SalesInvoiceLine."No.";
          EDIDiscountSummary."Document Line No." := SalesInvoiceLine."Line No.";
          EDIDiscountSummary.INSERT;
        END;
      END;
    END;

    PROCEDURE ResetAssocRecord@1240020001(CurrRecordNo@1240020000 : Integer);
    BEGIN
      CASE RecordNo OF
        1:
          BEGIN
            EDIDiscount.RESET;
            EDIDiscount.SETRANGE("Internal Doc. No.",SalesInvoiceHeader."EDI Internal Doc. No.");
            IF NOT EDIDiscount.FIND('-') THEN
              CLEAR(EDIDiscount);
          END;
        2:
          BEGIN
            EDILineDiscount.RESET;
            EDILineDiscount.SETCURRENTKEY("Internal Doc. No.","Segment Group",Code);
            EDILineDiscount.SETRANGE("Internal Doc. No.",SalesInvoiceHeader."EDI Internal Doc. No.");
            EDILineDiscount.SETRANGE("Segment Group",SalesInvoiceLine."EDI Segment Group");
            EDILineDiscount.SETRANGE("Document No.",SalesInvoiceHeader."Order No.");
            IF NOT EDILineDiscount.FIND('-') THEN
              CLEAR(EDILineDiscount);
          END;
        3:
          BEGIN
            SalesCommentLine.RESET;
            SalesCommentLine.SETRANGE("Document Type",SalesCommentLine."Document Type"::"Posted Invoice");
            SalesCommentLine.SETRANGE("No.",SalesInvoiceHeader."No.");
            IF NOT SalesCommentLine.FIND('-') THEN
              CLEAR(SalesCommentLine);
          END;
        4:
          BEGIN
            VATEntry.RESET;
            VATEntry.SETCURRENTKEY("Document No.","Posting Date");
            VATEntry.SETRANGE("Document No.",SalesInvoiceHeader."No.");
            VATEntry.SETRANGE("Posting Date",SalesInvoiceHeader."Posting Date");
            VATEntry.SETRANGE("Document Type",VATEntry."Document Type"::Invoice);
            IF NOT VATEntry.FIND('-') THEN
             CLEAR(VATEntry);
          END;
        5:
          BEGIN
            IF SalesShipmentHdr.GET(SalesInvoiceHeader."Invoice for Shipment No.") THEN BEGIN
              PostedPackage.RESET;
              PostedPackage.SETCURRENTKEY(
               "Source Type","Source Subtype","Posted Source ID","Bill of Lading No.");
              PostedPackage.SETRANGE("Source Type",36);
              PostedPackage.SETRANGE("Source Subtype",1);
              PostedPackage.SETRANGE("Posted Source ID",SalesShipmentHdr."No.");
              IF NOT PostedPackage.FIND('-') THEN
                CLEAR(PostedPackage);
            END ELSE
              CLEAR(PostedPackage);
          END;
        6:
          BEGIN
            VATEntryDetail.RESET;
            VATEntryDetail.SETCURRENTKEY("Document No.","Posting Date");
            VATEntryDetail.SETRANGE("Document No.",SalesInvoiceHeader."No.");
            VATEntryDetail.SETRANGE("Posting Date",SalesInvoiceHeader."Posting Date");
            VATEntryDetail.SETRANGE("Document Type",VATEntry."Document Type"::Invoice);
            VATEntryDetail.SETRANGE("Tax Group Code",SalesInvoiceLine."Tax Group Code");
            IF NOT VATEntryDetail.FIND('-') THEN
             CLEAR(VATEntryDetail);
          END;
      END;
    END;

    PROCEDURE CalculateTotalFields@1240020003();
    VAR
      SalesInvoiceLine@1240020000 : Record 113;
    BEGIN
      SalesInvoiceLine.RESET;
      SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      IF SalesInvoiceLine.FIND('-') THEN
        REPEAT
          IF EDITotalFields.GET(
            'Total Fields Generic 1',SalesInvoiceLine.Type,SalesInvoiceLine."No.")
          THEN
           TotalFieldsGeneric1 := TotalFieldsGeneric1 + SalesInvoiceLine.Amount;

          IF EDITotalFields.GET(
           'Total Fields Generic 2',SalesInvoiceLine.Type,SalesInvoiceLine."No.")
          THEN
            TotalFieldsGeneric2 := TotalFieldsGeneric2 + SalesInvoiceLine.Amount;

          IF EDITotalFields.GET(
            'Total Fields Generic 3',SalesInvoiceLine.Type,SalesInvoiceLine."No.")
          THEN
            TotalFieldsGeneric3 := TotalFieldsGeneric3 + SalesInvoiceLine.Amount;

          IF EDITotalFields.GET(
            'Total Fields Generic 4',SalesInvoiceLine.Type,SalesInvoiceLine."No.")
          THEN
            TotalFieldsGeneric4 := TotalFieldsGeneric4 + SalesInvoiceLine.Amount;

          IF EDITotalFields.GET(
            'Total Freight Amt.',SalesInvoiceLine.Type,SalesInvoiceLine."No.")
          THEN
            InvFreightAmt := InvFreightAmt + SalesInvoiceLine.Amount;

          IF EDITotalFields.GET(
            'Total Pallet Weight',SalesInvoiceLine.Type,SalesInvoiceLine."No.")
          THEN
            InvPalletWeight :=
              InvPalletWeight + (SalesInvoiceLine."Net Weight" * SalesInvoiceLine.Quantity);

          IF EDITotalFields.GET(
            'Total Dropship Amt.',SalesInvoiceLine.Type,SalesInvoiceLine."No.")
          THEN
            InvDropShipAmt := InvDropShipAmt + SalesInvoiceLine.Amount;
        UNTIL SalesInvoiceLine.NEXT = 0;
    END;

    PROCEDURE GetEDIQty@1240020004() : Decimal;
    VAR
      EDITradePtnrUOM2@1240020000 : Record 14002365;
    BEGIN
      EDIUOMFound := FALSE;
      MultiplierQty := 1;
      EDIQty := 0;
      EDITradePtnrUOM2.RESET;
      EDITradePtnrUOM2.SETRANGE("Trade Partner No.",EDITradePartner."No.");
      EDITradePtnrUOM2.SETRANGE("Navision Item No.",SalesInvoiceLine."No.");
      EDITradePtnrUOM2.SETRANGE("Navision Variant Code",SalesInvoiceLine."Variant Code");
      EDITradePtnrUOM2.SETRANGE("Order Unit of Measure",SalesInvoiceLine."Unit of Measure Code");
      EDITradePtnrUOM2.SETRANGE("EDI Unit of Measure",SalesInvoiceLine."EDI Unit of Measure");
      IF NOT EDITradePtnrUOM2.FIND('-') THEN BEGIN
        EDITradePtnrUOM2.SETFILTER("Navision Item No.",'=%1','');
        EDITradePtnrUOM.SETFILTER("Navision Variant Code",'=%1','');
        IF NOT EDITradePtnrUOM2.FIND('-') THEN
          CLEAR(EDITradePtnrUOM2)
        ELSE
          EDIUOMFound := TRUE;
      END ELSE
        EDIUOMFound := TRUE;
      IF EDITradePtnrUOM2."Navision Unit of Measure" <> EDITradePtnrUOM2."Order Unit of Measure" THEN BEGIN
        IF NOT ItemUnitOfMeasure.GET(
                 SalesInvoiceLine."No.",EDITradePtnrUOM2."Navision Unit of Measure")
        THEN
          EDIQty := 0
        ELSE BEGIN
          NavBaseQty := ItemUnitOfMeasure."Qty. per Unit of Measure";
          IF NOT ItemUnitOfMeasure.GET(
            SalesInvoiceLine."No.",EDITradePtnrUOM2."Order Unit of Measure")
          THEN
            EDIQty := 0
          ELSE BEGIN
            OrderBaseQty := ItemUnitOfMeasure."Qty. per Unit of Measure";
            MultiplierQty := OrderBaseQty / NavBaseQty;
            IF MultiplierQty < 0 THEN
              EDIQty := 0
            ELSE BEGIN
              IF OrderBaseQty > NavBaseQty THEN
                EDIQty := SalesInvoiceLine.Quantity * MultiplierQty
              ELSE
                EDIQty := (SalesInvoiceLine.Quantity * OrderBaseQty) / NavBaseQty;
            END;
          END;
        END;
      END ELSE BEGIN
        CLEAR(EDITradePtnrUOM2);
        EDIQty := SalesInvoiceLine.Quantity;
      END;
      IF SalesInvoiceLine."EDI Unit of Measure" <> '' THEN
        TotalEDIQty := TotalEDIQty + EDIQty;
    END;

    PROCEDURE LoadEDIOutRecordRef@1240020006();
    BEGIN
      RecRef.OPEN(3);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(PaymentTerms);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(10);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(ShipmentMethod);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(13);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SalespersonPurchaser);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(18);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SelltoCustomer);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'Sell-to Customer');
        RecRef.GETTABLE(BilltoCustomer);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'Bill-to Customer');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(27);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(Item);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(44);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SalesCommentLine);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(79);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(CompanyInformation);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(110);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SalesShipmentHdr);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(113);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SalesInvoiceLine);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'SalesInvoiceLineTmp');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(112);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SalesInvoiceHeader);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(222);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(ShiptoAddress);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(254);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(VATEntry);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
        RecRef.GETTABLE(VATEntryDetail);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'VATEntryDetail');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(291);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(ShippingAgent);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(5404);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(ItemUnitOfMeasure);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(5717);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(ItemCrossReference);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14000704);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(PostedPackage);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002350);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDITemplate);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002353);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDIDocument);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002359);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDISendDocHdr);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002360);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDITradePartner);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002364);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDITradePtnrItem);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002365);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDITradePtnrUOM);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002371);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDIReceiveDocHdrInfo);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002372);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDIReceiveDocLineInfo);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002382);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDIDiscount);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002383);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDILineDiscount);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;
    END;

    PROCEDURE LoadEDIOutVariable@1240020005();
    BEGIN
      EDILoadEDIOutFields.SetSalesInvoiceSendVariable(
        LineNumber,InvTotalUnits,InvTotalBaseUnits,InvNetShipWeight,InvGrossShipWeight,
        InvGrossAmt,TotalSegments,InvFreightAmt,InvPalletWeight,TotalInvDiscount,
        EDIInvDiscAmt,EDIInvLineDiscAmt,TotalFieldsGeneric1,TotalFieldsGeneric2,
        TotalFieldsGeneric3,TotalFieldsGeneric4,EDIQty,InvDropShipAmt);

      EDILoadEDIOutFields.SetSalesInvoiceSendVariable2(TotalInvLineDiscount,ProcessingLines,TotalEDIQty);
    END;

    PROCEDURE CalculateInvoiceDiscountAmt@1240020007();
    VAR
      SalesInvoiceLine2@1240020000 : Record 113;
    BEGIN
      InvDiscAmountBalance := 0;

      TotalInvDiscount := 0;
      SalesInvoiceLine2.RESET;
      SalesInvoiceLine2.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      SalesInvoiceLine2.SETFILTER(Quantity,'<>%1',0);
      SalesInvoiceLine2.SETRANGE(Type,SalesInvoiceLine2.Type::Item);
      IF SalesInvoiceLine2.FIND('-') THEN
        REPEAT
          InvDiscAmountBalance := InvDiscAmountBalance + SalesInvoiceLine2."Inv. Discount Amount";
        UNTIL SalesInvoiceLine2.NEXT = 0;
    END;

    PROCEDURE SetSLNItemDetail@1240020009();
    VAR
      EDIRecDocHdr@1240020000 : Record 14002358;
    BEGIN
      SLNItemDetail := FALSE;
      IF EDIRecDocHdr.GET(SalesInvoiceHeader."EDI Internal Doc. No.") THEN BEGIN
        SLNItemDetail := EDIRecDocHdr."Subline Item Detail Used";
        EDIFormat.SetSLNFound(SLNItemDetail);
      END;
    END;

    PROCEDURE GetSLNGroup@1240020008();
    VAR
      EDIRecDocHdr@1240020001 : Record 14002358;
      EDIRecDocField@1240020000 : Record 14002359;
    BEGIN
      SLNGroup := 0;

      EDIRecDocField.RESET;
      EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","Segment Group");
      EDIRecDocField.SETRANGE("Internal Doc. No.",SalesInvoiceHeader."EDI Internal Doc. No.");
      EDIRecDocField.SETRANGE("Segment Group",SalesInvoiceLine."EDI Segment Group");
      EDIRecDocField.SETRANGE("SLN Document Line No.",SalesInvoiceLine."Line No.");
      EDIRecDocField.SETRANGE("New Segment",TRUE);
      EDIRecDocField.SETRANGE(Segment,'SLN');
      IF NOT EDIRecDocField.FIND('-') THEN BEGIN
        IF EDIRecDocHdr.GET(SalesInvoiceHeader."EDI Internal Doc. No.") THEN BEGIN
          EDIRecDocField.SETRANGE(Segment);
          EDIRecDocField.SETRANGE(Segment,EDIRecDocHdr."Subline Segment");
          IF EDIRecDocField.FIND('-') THEN
            SLNGroup := EDIRecDocField."SLN Group"
          ELSE
            CLEAR(EDIRecDocField);
        END ELSE
          CLEAR(EDIRecDocField);
      END ELSE
        SLNGroup := EDIRecDocField."SLN Group";

      EDIFormat.SetSLNGroup(SLNGroup);
    END;

    PROCEDURE CheckForSDQ@1240020011();
    VAR
      EDIElement@1240020000 : Record 14002355;
      SalesInvoiceLine@1240020001 : Record 113;
    BEGIN
      SDQSegmentID := '';
      ConsolidatedSDQInvoice := FALSE;

      IF EDIDocument."Consolidated SDQ Invoice" THEN BEGIN
        SalesInvoiceLine.RESET;
        SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
        SalesInvoiceLine.SETFILTER("Shipment No.",'<>%1','');
        IF SalesInvoiceLine.FIND('-') THEN BEGIN
          EDIElement.SETRANGE("Trade Partner No.",EDIDocument."Trade Partner No.");
          EDIElement.SETRANGE("Navision Document",EDIDocument."Navision Document");
          EDIElement.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
          EDIElement.SETRANGE(Version,EDIDocument.Version);
          EDIElement.SETRANGE(Type,EDIElement.Type::Export);
          EDIElement.SETRANGE(Origin,EDIElement.Origin::SDQ);
          EDIElement.SETRANGE("Field Name",'SDQ SHIP FOR');
          IF EDIElement.FIND('-') THEN BEGIN
            ConsolidatedSDQInvoice := TRUE;
            SDQSegmentID := EDIElement.Segment;
         END ELSE
            ERROR(Text009);
        END;
      END;
    END;

    PROCEDURE RepeatSDQSegment@1240020010() : Boolean;
    VAR
      SalesInvoiceLine4@1240020000 : Record 113;
    BEGIN
      SalesInvoiceLine4.COPY(SalesInvoiceLine3);
      IF SalesInvoiceLine4.NEXT <> 0 THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE CreateVATEntryTmp@1240020012();
    BEGIN
      VATEntryDetailTmp.RESET;
      VATEntryDetailTmp.DELETEALL;

      VATEntry.RESET;
      VATEntry.SETCURRENTKEY("Document No.","Posting Date");
      VATEntry.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      VATEntry.SETRANGE("Posting Date",SalesInvoiceHeader."Posting Date");
      VATEntry.SETRANGE("Document Type",VATEntry."Document Type"::Invoice);
      IF VATEntry.FIND('-') THEN
        REPEAT
          VATEntryDetailTmp.COPY(VATEntry);
          VATEntryDetailTmp.Amount := ABS(VATEntry.Amount);
          VATEntryDetailTmp.INSERT;
        UNTIL VATEntry.NEXT = 0;
    END;

    PROCEDURE VATBalanceCheck@1240020013();
    VAR
      SlsInvLine@1240020000 : Record 113;
    BEGIN
      IF BypassSegment = FALSE THEN BEGIN
        IF OutFldArray[i] = '' THEN
          EXIT;
        VATEntryDetailTmp.RESET;
        VATEntryDetailTmp.SETCURRENTKEY("Document No.","Posting Date");
        VATEntryDetailTmp.SETRANGE("Document No.",SalesInvoiceHeader."No.");
        VATEntryDetailTmp.SETRANGE("Posting Date",SalesInvoiceHeader."Posting Date");
        VATEntryDetailTmp.SETRANGE("Document Type",VATEntryDetailTmp."Document Type"::Invoice);
        VATEntryDetailTmp.SETRANGE("Tax Group Code",SalesInvoiceLine."Tax Group Code");
        VATEntryDetailTmp.SETRANGE("Tax Jurisdiction Code",VATEntryDetail."Tax Jurisdiction Code");
        IF VATEntryDetailTmp.FIND('-') THEN BEGIN
          SlsInvLine.RESET;
          SlsInvLine.SETRANGE("Document No.",SalesInvoiceLine."Document No.");
          SlsInvLine.SETFILTER("No.",'<>%1','');
          SlsInvLine.SETFILTER(Quantity,'>0');
          SlsInvLine.SETRANGE("Tax Liable",TRUE);
          SlsInvLine.SETRANGE("Tax Group Code",SalesInvoiceLine."Tax Group Code");
          IF SlsInvLine.FIND('+') THEN BEGIN
            IF SlsInvLine."Line No." = SalesInvoiceLine."Line No." THEN BEGIN
              IF VATEntryDetailTmp.Amount <> DecimalVariable THEN BEGIN
                DecimalVariable := VATEntryDetailTmp.Amount;
                EDIFormat.FormatOutput(
                  EDITemplate,EDIElement,OutFldArray,OutErrorArray,i,BypassSegment,
                  BooleanVariable,DateVariable,DecimalVariable,IntegerVariable,TimeVariable,
                  DateTimeVariable);
              END;
            END ELSE BEGIN
              IF ABS(VATEntryDetailTmp.Amount) - DecimalVariable < 0 THEN
                OutFldArray[i] := FORMAT(ABS(VATEntryDetailTmp.Amount))
              ELSE BEGIN
                VATEntryDetailTmp.Amount := ABS(VATEntryDetailTmp.Amount) - DecimalVariable;
                VATEntryDetailTmp.MODIFY;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE PackageDataByItem@1240020014();
    VAR
      EDISegment@1240020000 : Record 14002354;
      EDIElement@1240020003 : Record 14002355;
      LineBeginSequence@1240020001 : Integer;
      LineEndSequence@1240020002 : Integer;
    BEGIN
      IF EDITemplate."Interface File Type" <> EDITemplate."Interface File Type"::"X12 Delimited" THEN BEGIN
        PackageBasedOnItem := FALSE;
        EXIT;
      END;

      EDISegment.RESET;
      EDISegment.SETRANGE("Trade Partner No.",EDIDocument."Trade Partner No.");
      EDISegment.SETRANGE("Navision Document",EDIDocument."Navision Document");
      EDISegment.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
      EDISegment.SETRANGE(Version,EDIDocument.Version);
      EDISegment.SETRANGE(Type,EDIDocument.Type);
      EDISegment.SETRANGE("Segment Type",EDISegment."Segment Type"::Command);
      EDISegment.SETRANGE(Segment,'LINE BEGIN');
      IF EDISegment.FIND('-') THEN BEGIN
        LineBeginSequence := EDISegment."Processing Sequence";
        EDISegment.SETRANGE(Segment);
        EDISegment.SETRANGE(Segment,'LINE END');
        IF EDISegment.FIND('-') THEN BEGIN
          LineEndSequence := EDISegment."Processing Sequence";
          EDISegment.SETRANGE("Segment Type");
          EDISegment.SETRANGE(Segment);
          EDISegment.SETRANGE("Segment Type",EDISegment."Segment Type"::Segment);
          EDISegment.SETFILTER(Segment,'CAD*');
          EDISegment.SETFILTER("Processing Sequence",'>%1&<%2',LineBeginSequence,LineEndSequence);
          IF EDISegment.FIND('-') THEN BEGIN
            EDIElement.RESET;
            EDIElement.SETRANGE("Trade Partner No.",EDISegment."Trade Partner No.");
            EDIElement.SETRANGE("Navision Document",EDISegment."Navision Document");
            EDIElement.SETRANGE("EDI Document No.",EDISegment."EDI Document No.");
            EDIElement.SETRANGE(Version,EDISegment.Version);
            EDIElement.SETRANGE(Type,EDISegment.Type);
            EDIElement.SETRANGE(Segment,EDISegment.Segment);
            EDIElement.SETRANGE(Type,EDIElement.Type::Export);
            EDIElement.SETRANGE(Origin,EDIElement.Origin::Navision);
            EDIElement.SETRANGE("NAV Table Name",'Posted Package');
            IF EDIElement.FIND('-') THEN
              PackageBasedOnItem := TRUE
            ELSE
              PackageBasedOnItem := FALSE;
          END;
        END ELSE
          PackageBasedOnItem := FALSE;
      END ELSE
        PackageBasedOnItem := FALSE;
    END;

    BEGIN
    {
      // EDI Sales Invoice Export
      2015-07-15 TPZ848 TAKHMETO
        UpdateLineTotals and LoadEDIOutFields functions have been modified
      2015-07-15 TPZ848 TAKHMETO
        ExportSalesInvoice function has been modified
      2016-03-23 TPZ1460 SDESAI
        Updated the error traping by adding Text010
        If an invoice is not be sent via EDI due to Division Exclusion, then mark EDI Invoice False
        and don't let it raise the error (Text001), so that Outbound Error Log is not populated.
    }
    END.
  }
}

