OBJECT Codeunit 23044605 DSHIP Freight Quote Management
{
  OBJECT-PROPERTIES
  {
    Date=03/20/19;
    Time=[ 2:22:13 PM];
    Version List=DSHIP2.2.2;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      recDShipSetup@1000000000 : Record 23044600;
      cuRateMgmt@1000000001 : Codeunit 23044602;
      cuLPCommon@1000000002 : Codeunit 23044541;
      tcMissingDShipRatePrice@1000000003 : TextConst 'ENU=Missing dynamic Ship Rate Price table configuration.;ESM=Configuraci¢n de la tabla precio de tipo Dynamic Ship falta.;FRC=Configuration de Prix du Taux Dynamic Ship table manquant (e).;ENC=Missing dynamic Ship Rate Price table configuration.';

    PROCEDURE getRateQuote@1000000002(poptDocType@1000000005 : Option;pcodDocNo@1000000006 : Code[20];pcodPkgTmpl@1000000002 : Code[20];piBoxCount@1000000003 : Integer;pdBoxWeight@1000000004 : Decimal) rsOrderID : Text[100];
    VAR
      ltrecLPHeader@1000000012 : TEMPORARY Record 23044505;
      ltrecParam@1000000000 : TEMPORARY Record 23044623;
      ldnOrder@1000000007 : DotNet "'EasyPost.Net35, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.EasyPost.Order";
      lsCarrierID@1000000011 : Text;
      lsService@1000000008 : Text;
      lasFromAddress@1000000010 : ARRAY [12] OF Text[100];
      lasToAddress@1000000009 : ARRAY [12] OF Text[100];
      lcodLocation@1000000001 : Code[50];
    BEGIN
      //<FUNC>
      //  Description: Gets rate quotes based on freight rules and given weight/boxes
      //  Called From: DSHIP Rate Quote Worksheet (P23044620)
      //  Side Effect: None
      //</FUNC>

      // initializes vars I am passing around
      IF ( prepRateQuote(poptDocType,
                         pcodDocNo,
                         lasFromAddress,
                         lasToAddress,
                         lsCarrierID,
                         lsService,
                         lcodLocation)
        ) THEN BEGIN
        // create temp LP Headers
        prepTempLPHeaders(ltrecLPHeader, pcodPkgTmpl, piBoxCount, pdBoxWeight);
        // get the rates
        rsOrderID := getRateQuoteData(ltrecLPHeader,
                                      ldnOrder,
                                      lasFromAddress,
                                      lasToAddress,
                                      lsCarrierID,
                                      lcodLocation);
        // store rates in buffer
      //   lcuEasyPostRateMgmt.addAgentRatesToBuffer(ldnOrder, lsService, rsOrderID);
        // update rates according to rules
        updateRatePrice(poptDocType, pcodDocNo);
        // return order id (potentially used in the future)
        EXIT(rsOrderID);
      END; // if prepRateQuote

      EXIT('');
    END;

    LOCAL PROCEDURE prepRateQuote@1000000011(poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[50];VAR pasFromAddress@1000000004 : ARRAY [12] OF Text[100];VAR pasToAddress@1000000003 : ARRAY [12] OF Text[100];VAR psCarrierID@1000000005 : Text;VAR psService@1000000006 : Text;VAR pcodLocation@1000000007 : Code[50]) : Boolean;
    VAR
      lrecSalesHeader@1000000002 : Record 36;
    BEGIN
      //<FUNC>
      //  Description: Prepares variables needed to make Rate Quote DotNet call
      //  Called From: This codeunit (23044605)
      //  Side Effect:
      //</FUNC>

      // failure if I can't find the sales header
      // this should never occur
      IF (NOT lrecSalesHeader.GET(poptDocType, pcodDocNo)) THEN BEGIN
        EXIT(FALSE);
      END;

      pcodLocation := lrecSalesHeader."Location Code";

      // create address arrays
      cuRateMgmt.getShipFromAddress(lrecSalesHeader."Location Code", pasFromAddress);
      cuRateMgmt.setShipToAddressForSalesOrder(lrecSalesHeader, TRUE, pasToAddress);
      // get carrierID and service (if specified)
      psCarrierID := cuRateMgmt.getCarrierID(lrecSalesHeader."Shipping Agent Code", lrecSalesHeader."Location Code", 'EASYPOST');
      psService := cuRateMgmt.getCarrierService(lrecSalesHeader."Shipping Agent Code", lrecSalesHeader."Shipping Agent Service Code");

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE prepTempLPHeaders@1000000028(VAR ptrecLPHeader@1000000000 : TEMPORARY Record 23044505;pcodPkgTmpl@1000000003 : Code[20];piBoxCount@1000000002 : Integer;pdBoxWeight@1000000001 : Decimal);
    VAR
      liBoxIndex@1000000006 : Integer;
    BEGIN
      //<FUNC>
      //  Description: Creates temporary LP Headers that can be used for rate quotes
      //  Called From: This codeunit (23044605)
      //  Side Effect:
      //</FUNC>

      recDShipSetup.GET;

      // create a temp LP for each box
      FOR liBoxIndex := 1 TO piBoxCount DO BEGIN
        ptrecLPHeader.INIT;
        ptrecLPHeader."No." := 'LPQ' + PADSTR('', 5 - STRLEN(FORMAT(liBoxIndex)), '0') + FORMAT(liBoxIndex);
        ptrecLPHeader.INSERT(FALSE);
        cuLPCommon.updateLPFromTemplate(ptrecLPHeader,pcodPkgTmpl);
        ptrecLPHeader."Weight Unit of Measure" := recDShipSetup."Freight Quote Weight UOM Code";
        ptrecLPHeader."Shipment Gross Weight" := pdBoxWeight;
        ptrecLPHeader.MODIFY(FALSE);
      END;
    END;

    LOCAL PROCEDURE getRateQuoteData@1000000012(VAR ptrecLPHeader@1000000021 : TEMPORARY Record 23044505;VAR pdnOrder@1000000000 : DotNet "'EasyPost.Net35, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.EasyPost.Order";VAR pasFromAddress@1000000005 : ARRAY [12] OF Text[100];VAR pasToAddress@1000000004 : ARRAY [12] OF Text[100];psCarrierID@1000000001 : Text;pcodLocation@1000000007 : Code[50]) : Text;
    VAR
      lrecFreightInt@1000000006 : Record 23044624;
      lrecShipOptions@1000000019 : Record 23044608;
      ldnFromAddress@1000000018 : DotNet "'EasyPost.Net35, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.EasyPost.Address";
      ldnToAddress@1000000017 : DotNet "'EasyPost.Net35, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.EasyPost.Address";
      ldnPackageList@1000000016 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      ldnDSParcel@1000000015 : DotNet "'DynamicShip.ShippingIntegration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DynamicShip.ShippingIntegration.DynamicShipParcel";
      ldnDynamicShip@1000000013 : DotNet "'DynamicShip.ShippingIntegration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DynamicShip.ShippingIntegration.DynamicShipping";
      ldnShipment@1000000012 : DotNet "'EasyPost.Net35, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.EasyPost.Shipment";
      ldnMessage@1000000002 : DotNet "'EasyPost.Net35, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.EasyPost.Message";
      ldnDictShipment@1000000003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";
      liShipIndex@1000000011 : Integer;
      lasFromAddress@1000000008 : ARRAY [12] OF Text[100];
    BEGIN
      //<FUNC>
      //  Description: Makes the required DotNet calls
      //  Called From: This codeunit (23044605)
      //  Side Effect:
      //  Note       : Adapted from getShipRates (CU23044602), Author R.Trudeau
      //</FUNC>

      // more closely duplicate the other method - methodize as possible for resuse.

      lrecFreightInt.GET('EASYPOST');

      // init addresses
      ldnFromAddress := ldnFromAddress.Address();
      ldnToAddress := ldnToAddress.Address();
      cuRateMgmt.setShipmentAddresses(pasFromAddress, pasToAddress, ldnFromAddress, ldnToAddress);


      // filter for temp LP
      ptrecLPHeader.RESET;
      ptrecLPHeader.SETRANGE("No.",'LPQ00001','LPQ99999');

      cuRateMgmt.createListOfDict(ldnPackageList);

      // set only the necessary for quote
      IF ( ptrecLPHeader.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          ldnDictShipment := ldnDictShipment.Dictionary();
          cuRateMgmt.createDictStrObj(ldnDictShipment);
          ldnDictShipment.Add('reference', ptrecLPHeader."No.");
          cuRateMgmt.setShipmentDimensions(ptrecLPHeader, ldnDictShipment);
          ldnPackageList.Add(ldnDictShipment);
        UNTIL( ptrecLPHeader.NEXT=0);
      END;

      // if a carrier was not specified, get all relevant to location
      IF (psCarrierID = '') THEN BEGIN
        psCarrierID := cuRateMgmt.getCarrierIDStringByFreightInt(pcodLocation, 'EASYPOST');
      END;

      // dotnet call to getrates
      ldnDynamicShip := ldnDynamicShip.DynamicShipping();
      pdnOrder := ldnDynamicShip.GetRates(
                    lrecFreightInt."API Key",
                    ldnPackageList,
                    ldnFromAddress,
                    ldnToAddress,
                    psCarrierID
                  );

      IF( ldnDynamicShip.GetLastError <> '' ) THEN
        ERROR(ldnDynamicShip.GetLastError);

      EXIT(pdnOrder.id);
    END;

    LOCAL PROCEDURE getRatePrice@1000000015(ptrecSelectedRate@1000000002 : TEMPORARY Record 23044603;poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[20]) : Decimal;
    VAR
      lrecDShipRatePrice@1000000007 : Record 23044610;
      ldRateToReturn@1000000008 : Decimal;
      lbGetRatePriceRecord@1000000003 : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Uses the DSHIP Freight Price rules to determine the rate price
      //  Called From: This codeunit (23044605)
      //  Side Effect:
      //  Note       : Based on getSplitRateForSourceDoc (CU23044602), Author H.Zhao
      //</FUNC>

      recDShipSetup.GET;

      // func is trimmed for sales quote/order
      ldRateToReturn := ptrecSelectedRate."Rate Cost";

      lbGetRatePriceRecord := getDynamicShipRatePriceRecord(lrecDShipRatePrice,
                                                            ptrecSelectedRate,
                                                            poptDocType,
                                                            pcodDocNo);
      IF ((recDShipSetup."Freight Billing Type" <> recDShipSetup."Freight Billing Type"::None) AND (NOT lbGetRatePriceRecord)) THEN BEGIN
        ERROR(tcMissingDShipRatePrice);
      END;

      IF (lbGetRatePriceRecord) THEN BEGIN
        IF (lrecDShipRatePrice."Rate Handling" = lrecDShipRatePrice."Rate Handling"::"Don't Add Freight Charge") THEN
          EXIT (0);

        IF (lrecDShipRatePrice."Rate Handling" = lrecDShipRatePrice."Rate Handling"::"Add Markup Percentage") THEN BEGIN
          ldRateToReturn := ldRateToReturn * (lrecDShipRatePrice."Markup %" / 100 + 1);
        END ELSE IF (lrecDShipRatePrice."Rate Handling" = lrecDShipRatePrice."Rate Handling"::"Add Fixed Price") THEN BEGIN
          ldRateToReturn := lrecDShipRatePrice."Fixed Price";
        END;
      END;

      IF (lrecDShipRatePrice."Rounding Precision" > 0) THEN
        ldRateToReturn := ROUND(ldRateToReturn, lrecDShipRatePrice."Rounding Precision")
      ELSE
        ldRateToReturn := ROUND(ldRateToReturn, 0.01);  // Default

      EXIT (ldRateToReturn);
    END;

    LOCAL PROCEDURE getDynamicShipRatePriceRecord@1000000065(VAR precDShipRatePrice@1000000004 : Record 23044610;ptrecSelectedRate@1000000005 : TEMPORARY Record 23044603;poptDocType@1000000010 : Option;pcodDocNo@1000000009 : Code[20]) : Boolean;
    VAR
      lrecCustomer@1000000001 : Record 18;
      lrecSalesHeader@1000000000 : Record 36;
      lrecDShipCarrier@1000000007 : Record 23044607;
      lrecDShipCarrierAccount@1000000006 : Record 23044612;
      lcodDShipPackRateMngmt@1000000003 : Codeunit 23044602;
      lbFoundRecord@1000000002 : Boolean;
      lcodShipAgentCode@1000000008 : Code[20];
      tcUnknownShipAgent@1000000011 : TextConst 'ENU=The carrier account could not be found in NAV.\Please ensure an account for %1 with ID "%2" is configured.;ESM=No se pudo encontrar la cuenta de soporte de NAV. \Please asegurarse de una cuenta de la est  configurada %1 con el Id. "%2".;FRC=Impossible de trouver le compte carrier dans NAV. \Please assurez-vous un compte pour %1 portant le CODE ®%2¯ est configur.;ENC=The carrier account could not be found in NAV.\Please ensure an account for %1 with ID "%2" is configured.';
    BEGIN
      //<FUNC>
      //  Description: Get a dynamic ship rate price record
      //  Called From: This codeunit (23044605)
      //  Side Effect: None
      //</FUNC>

      // should not occur
      IF ( NOT lrecSalesHeader.GET(poptDocType, pcodDocNo) ) THEN BEGIN
        EXIT(FALSE);
      END;

      lbFoundRecord := FALSE;
      lrecDShipCarrier.SETRANGE("Account ID", ptrecSelectedRate."Carrier Account ID");
      lrecDShipCarrierAccount.SETRANGE("Account ID", ptrecSelectedRate."Carrier Account ID");
      IF ( lrecDShipCarrierAccount.FINDFIRST ) THEN BEGIN
        lcodShipAgentCode := lrecDShipCarrierAccount.Code;
      END ELSE
      IF ( lrecDShipCarrier.FINDFIRST ) THEN BEGIN
        lcodShipAgentCode := lrecDShipCarrier.Code;
      END; // if carrieraccount.findfirst

      IF ( lcodShipAgentCode = '' ) THEN
        ERROR(tcUnknownShipAgent,
              ptrecSelectedRate."Carrier Name",
              ptrecSelectedRate."Carrier Account ID");

      lrecCustomer.GET(lrecSalesHeader."Sell-to Customer No.");

      lbFoundRecord := cuRateMgmt.getSpecificSalesTypeRate(precDShipRatePrice, lcodShipAgentCode, ptrecSelectedRate, precDShipRatePrice."Sales Type"::Customer, lrecCustomer."No.", lrecSalesHeader.Amount);
      IF (NOT lbFoundRecord) THEN BEGIN
        lbFoundRecord := cuRateMgmt.getSpecificSalesTypeRate(precDShipRatePrice,lcodShipAgentCode, ptrecSelectedRate, precDShipRatePrice."Sales Type"::"Customer Price Group", lrecCustomer."Customer Price Group", lrecSalesHeader.Amount);
      END;

      IF (NOT lbFoundRecord) THEN BEGIN
        lbFoundRecord := cuRateMgmt.getSpecificSalesTypeRate(precDShipRatePrice,lcodShipAgentCode, ptrecSelectedRate, precDShipRatePrice."Sales Type"::Campaign, lrecSalesHeader."Campaign No.", lrecSalesHeader.Amount);
      END;

      IF (NOT lbFoundRecord) THEN BEGIN
        lbFoundRecord := cuRateMgmt.getSpecificSalesTypeRate(precDShipRatePrice,lcodShipAgentCode, ptrecSelectedRate, precDShipRatePrice."Sales Type"::"All Customers", '', lrecSalesHeader.Amount);
      END;

      EXIT(lbFoundRecord);
    END;

    LOCAL PROCEDURE updateRatePrice@1000000018(poptDocType@1000000001 : Option;pcodDocNo@1000000000 : Code[20]);
    VAR
      ltrecRateBuffer@1000000002 : TEMPORARY Record 23044603;
      lcuRateSingleton@1000000003 : Codeunit 23044608;
    BEGIN
      //<FUNC>
      //  Description: Updates rate pricing in buffer according to freight price rules
      //  Called From: This codeunit (23044605)
      //  Side Effect:
      //</FUNC>

      lcuRateSingleton.getRateBuffer(ltrecRateBuffer);

      // iterate rates and update based on freight rules
      IF ( ltrecRateBuffer.FINDSET ) THEN BEGIN
        REPEAT
          ltrecRateBuffer."Rate Cost" := getRatePrice(ltrecRateBuffer, poptDocType, pcodDocNo);
          ltrecRateBuffer.MODIFY;
        UNTIL ltrecRateBuffer.NEXT = 0;
      END;
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
    }
    END.
  }
}

