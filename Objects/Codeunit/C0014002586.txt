OBJECT Codeunit 14002586 RF Bin Count Line Select
{
  OBJECT-PROPERTIES
  {
    Date=01/22/18;
    Time=12:00:00 PM;
    Version List=RF1.50.11;
  }
  PROPERTIES
  {
    TableNo=7700;
    OnRun=VAR
            MiniformMgmt@1000 : Codeunit 7702;
          BEGIN
            MiniformMgmt.Initialize(
              MiniformHeader,Rec,DOMxmlin,ReturnedNode,
              RootNode,XMLDOMMgmt,ADCSCommunication,LoginID,
              CurrentCode,StackCode,
              WhseEmpId,LocationFilter);

            IF Code <> CurrentCode THEN
              PrepareData
            ELSE
              ProcessInput;

            CLEAR(DOMxmlin);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Function not Found';
      MiniformHeader@1001 : Record 7700;
      XMLDOMMgmt@1002 : Codeunit 6224;
      ADCSCommunication@1003 : Codeunit 7701;
      ADCSNasStartup@1004 : Codeunit 7700;
      DOMxmlin@1240020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ReturnedNode@1240020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      RootNode@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      LoginID@1240020003 : Text[250];
      WhseEmpId@1240020004 : Text[250];
      Remark@1009 : Text[250];
      LocationFilter@1010 : Text[250];
      Text001@1011 : TextConst 'ENU=Invalid Bin';
      Text002@1012 : TextConst 'ENU=Bin is empty';
      Text003@1013 : TextConst 'ENU=Invalid field';
      Text004@1014 : TextConst 'ENU=Invalid %1.';
      Text006@1015 : TextConst 'ENU=No input Node found';
      CurrentCode@1020 : Text[250];
      StackCode@1021 : Text[250];
      ActiveInputField@1022 : Integer;
      RecRef@1024 : RecordRef;
      Text009@1240020005 : TextConst 'ENU=Avail Bin Count Line not found';
      Text010@1240020010 : TextConst 'ENU=Count failed to generate';
      Text011@1240020009 : TextConst 'ENU=Batch not found';
      Text012@1240020008 : TextConst 'ENU=No matching Miniform found';
      Text013@1240020007 : TextConst 'ENU=No Call Miniform found';
      Text014@1240020006 : TextConst 'ENU=No Empty Bin line found';
      Text015@1240020011 : TextConst 'ENU=Not set to Perform Bin Count';
      Text016@1240020012 : TextConst 'ENU=Bin assigned to another User';

    LOCAL PROCEDURE ProcessInput@10();
    VAR
      Bin@1000 : Record 7354;
      BinContent@1001 : Record 7302;
      BinCount@1240020001 : Record 14002580;
      BinCountLine@1240020000 : Record 14002581;
      BinCountLine2@1240020007 : Record 14002581;
      FuncGroup@1002 : Record 7702;
      MiniformHeader2@1003 : Record 7700;
      RFEmployeeSetup@1240030002 : Record 14002802;
      RFMgt@1240030001 : Codeunit 14002801;
      ReturnedNode2@1240020006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TextValue@1004 : Text[250];
      FldNo@1005 : Integer;
      TableNo@1240020004 : Integer;
      RecordId@1240020003 : RecordID;
      Command@1240020002 : Code[10];
      BinCode@1240020005 : Code[20];
    BEGIN
      IF XMLDOMMgmt.FindNode(RootNode,'Header/Input',ReturnedNode) THEN
        TextValue := ReturnedNode.InnerText
      ELSE
        ERROR(Text006);

      EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'));
      RecRef.OPEN(TableNo);
      EVALUATE(RecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'));
      IF RecRef.GET(RecordId) THEN BEGIN
        RecRef.SETTABLE(BinCountLine);
        BinCountLine.RESET;
        BinCountLine.SETFILTER("Location Code",LocationFilter);
        BinCountLine.SETRANGE("Bin Count No.",BinCountLine."Bin Count No.");
        BinCountLine.SETFILTER("Assigned User ID",'%1|%2','',WhseEmpId);
        BinCountLine.SETRANGE("Count Performed",FALSE);
        RecRef.GETTABLE(BinCountLine);
        ADCSCommunication.SetRecRef(RecRef);
      END ELSE BEGIN
        ADCSCommunication.RunPreviousMiniform(DOMxmlin);
        EXIT;
      END;

      FuncGroup.KeyDef := ADCSCommunication.GetFunctionKey(MiniformHeader.Code,TextValue);
      ActiveInputField := 1;

      CASE FuncGroup.KeyDef OF
        FuncGroup.KeyDef::Esc:
          ADCSCommunication.RunPreviousMiniform(DOMxmlin);
        FuncGroup.KeyDef::Input:
          BEGIN
            EVALUATE(FldNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'FieldID'));
            CASE FldNo OF
              BinCountLine.FIELDNO("Bin Code"):
                BEGIN
                  RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
                  IF NOT RFEmployeeSetup."Perform Bin Counts" THEN
                    Remark := Text015;

                  IF Remark = '' THEN BEGIN
                    IF NOT RFMgt.GetBin(TextValue,RFEmployeeSetup,LocationFilter,TRUE,BinCode) THEN
                      Remark := STRSUBSTNO(Text004,BinCountLine.FIELDCAPTION("Bin Code"))
                    ELSE
                      TextValue := BinCode;
                  END;

                  IF Remark = '' THEN BEGIN
                    Bin.RESET;
                    Bin.SETFILTER("Location Code",LocationFilter);
                    Bin.SETRANGE(Code,COPYSTR(UPPERCASE(TextValue),1,MAXSTRLEN(Bin.Code)));
                    IF NOT Bin.FIND('-') THEN
                      Remark := Text001;
                  END;

                  IF Remark = '' THEN BEGIN
                    BinCountLine2.RESET;
                    BinCountLine2.SETRANGE("Location Code",BinCountLine."Location Code");
                    BinCountLine2.SETRANGE("Bin Code",Bin.Code);
                    BinCountLine2.SETRANGE("Bin Count No.",BinCountLine."Bin Count No.");
                    BinCountLine2.SETRANGE("Count Performed",FALSE);
                    IF NOT BinCountLine2.FIND('-') THEN
                      Remark := Text009;

                    IF Remark = '' THEN BEGIN
                      BinCountLine2.SETFILTER("Assigned User ID",'%1|%2','',WhseEmpId);
                      IF NOT BinCountLine2.FIND('-') THEN
                        Remark := Text016;
                    END;
                  END;

                  IF Remark = '' THEN BEGIN
                    IF BinCountLine2."Count Initiated" THEN BEGIN
                      OpenExistingBinCount(BinCountLine2);
                    END ELSE BEGIN
                      IF BinCountLine2."Empty Bin" THEN BEGIN
                        IF NOT LaunchEmptyBinCount(BinCountLine2) THEN
                          EXIT
                      END ELSE BEGIN
                        IF NOT GenerateWhseBinCount(BinCountLine2) THEN
                          ERROR(Text010)
                        ELSE
                          EXIT;
                      END;
                    END;
                  END;
                END;
              ELSE
                Remark := Text003;
            END;
          END;
        ELSE
          ERROR(Text000);
      END;

      IF (Remark = '') AND (FuncGroup.KeyDef = FuncGroup.KeyDef::Input) THEN
        EXIT;

      IF NOT (FuncGroup.KeyDef IN [FuncGroup.KeyDef::Esc]) THEN
        SendForm(ActiveInputField);
    END;

    LOCAL PROCEDURE PrepareData@1();
    VAR
      BinContent@1000 : Record 7302;
      BinCount@1240020012 : Record 14002580;
      BinCountLine@1240020011 : Record 14002581;
      BinCountLine2@1240020010 : Record 14002581;
      RFEmployeeSetup@1240020009 : Record 14002802;
      RFMgt@1240020008 : Codeunit 14002801;
      ReturnedNode2@1240020007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TableNo@1240020006 : Integer;
      RecordId@1240020005 : RecordID;
      ForwardTableNo@1240020004 : Integer;
      ForwardTable@1240020003 : Boolean;
      ForwardRecordLine@1240020002 : Boolean;
      ForwardRecordId@1240020001 : RecordID;
      RecRef2@1240020000 : RecordRef;
    BEGIN
      XMLDOMMgmt.FindNode(RootNode,'Header/Input',ReturnedNode);

      XMLDOMMgmt.FindNode(RootNode,'ExtraInfo',ReturnedNode2);
      ForwardTable := EVALUATE(ForwardTableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode2,'ForwardTable'));
      IF ForwardTable THEN
        EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode2,'ForwardTable'))
      ELSE
        EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'));

      RecRef.OPEN(TableNo);
      IF ForwardTable THEN
        EVALUATE(RecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode2,'ForwardRecord'))
      ELSE
        EVALUATE(RecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'));

      ForwardRecordLine :=
        EVALUATE(ForwardRecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode2,'ForwardRecordLine'));
      IF ForwardRecordLine THEN
        IF RecRef2.GET(ForwardRecordId) THEN BEGIN
          RecRef2.SETTABLE(BinCountLine);
          BinCountLine2.RESET;
          BinCountLine2.SETFILTER("Location Code",BinCountLine."Location Code");
          BinCountLine2.SETRANGE("Bin Count No.",BinCountLine."Bin Count No.");
          BinCountLine2.SETFILTER("Assigned User ID",'%1|%2','',WhseEmpId);
          BinCountLine2.SETRANGE("Count Performed",FALSE);
          IF BinCountLine2.FIND('-') THEN BEGIN
            RecRef.GETTABLE(BinCountLine2);
            ADCSCommunication.SetRecRef(RecRef);
            ActiveInputField := 1;
            SendForm(ActiveInputField);
            EXIT;
          END ELSE BEGIN
            ADCSCommunication.RunPreviousMiniform(DOMxmlin);
            EXIT;
          END;
        END;

      IF RecRef.GET(RecordId) THEN BEGIN
        RecRef.SETTABLE(BinCount);
        BinCountLine.RESET;
        BinCountLine.SETFILTER("Location Code",LocationFilter);
        BinCountLine.SETRANGE("Bin Count No.",BinCount."Bin Count No.");
        BinCountLine.SETFILTER("Assigned User ID",'%1|%2','',WhseEmpId);
        BinCountLine.SETRANGE("Count Performed",FALSE);
        IF BinCountLine.FIND('-') THEN;
        RecRef.GETTABLE(BinCountLine);
        ADCSCommunication.SetRecRef(RecRef);
        ActiveInputField := 1;
        SendForm(ActiveInputField);
      END ELSE BEGIN
        ADCSCommunication.RunPreviousMiniform(DOMxmlin);
        EXIT;
      END;
    END;

    LOCAL PROCEDURE SendForm@3(InputField@1000 : Integer);
    BEGIN
      // Prepare Miniform
      ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,InputField,Remark,LoginID);
      ADCSCommunication.GetReturnXML(DOMxmlin);
      ADCSNasStartup.SendXMLReply(DOMxmlin);
    END;

    PROCEDURE GenerateWhseBinCount@1240020013(BinCountLine@1240030000 : Record 14002581) : Boolean;
    VAR
      MiniformHeader2@1240020005 : Record 7700;
      BinCount@1240020008 : Record 14002580;
      BinCountLine2@1240020011 : Record 14002581;
      BinCountTemplate@1240020012 : Record 14002582;
      BinContent@1240030001 : Record 7302;
      WhseJournalBatch@1240020001 : Record 7310;
      WhseJournalBatch2@1240020000 : Record 7310;
      RFEmployeeSetup@1240020010 : Record 14002802;
      RFDynamicMgt@1240030002 : Codeunit 14002882;
      BatchName@1240020004 : Text[30];
      ForwardRecID@1240020003 : RecordID;
      ForwardTableNo@1240020002 : Integer;
      RemarkMessage@1240020007 : Text[250];
      BinCountExists@1240020009 : Boolean;
      EmptyBin@1240020006 : Boolean;
    BEGIN
      RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);

      IF NOT BinCountLine."Empty Bin" THEN BEGIN
        BinCount.RESET;
        IF BinCount.GET(BinCountLine."Bin Count No.") THEN
          IF BinCountTemplate.GET(BinCount."Bin Count Template Code") THEN;

        BinContent.RESET;
        BinContent.SETRANGE("Location Code",BinCountLine."Location Code");
        BinContent.SETRANGE("Bin Code",BinCountLine."Bin Code");
        BinContent.SETRANGE("Zone Code",BinCountLine."Zone Code");
        IF BinCountTemplate."Item Filter" <> '' THEN
          BinContent.SETFILTER("Item No.",BinCountTemplate."Item Filter");
        IF BinCountTemplate."Variant Filter" <> '' THEN
          BinContent.SETFILTER("Variant Code",BinCountTemplate."Variant Filter");
        IF BinContent.FINDSET(FALSE) THEN
          RFDynamicMgt.CreateBinCountWhsePhysicalInventory(
            BinContent,RFEmployeeSetup,WhseJournalBatch,BinCountLine."Location Code",
            BinCountLine."Bin Code",BinCountLine."Bin Count No.",WhseEmpId,RemarkMessage);

        WhseJournalBatch2.RESET;
        IF WhseJournalBatch2.GET(
          WhseJournalBatch."Journal Template Name",WhseJournalBatch.Name,WhseJournalBatch."Location Code")
        THEN BEGIN
          BinCountLine2.RESET;
          IF BinCountLine2.GET(
              BinCountLine."Bin Count No.",BinCountLine."Bin Code",
              BinCountLine."Zone Code",BinCountLine."Location Code")
          THEN BEGIN
            BinCountLine2."Batch No." := WhseJournalBatch2.Name;
            BinCountLine2.MODIFY;
          END;

          ForwardTableNo := DATABASE::"Warehouse Journal Batch";
          ForwardRecID := WhseJournalBatch2.RECORDID;
          BinCountExists := TRUE;
          ADCSCommunication.SetExtraValue('BinCountExists',FORMAT(BinCountExists));
          ADCSCommunication.SetExtraValue('ForwardName',WhseJournalBatch2.Name);
          ADCSCommunication.SetExtraValue('ForwardTable',FORMAT(ForwardTableNo));
          ADCSCommunication.SetExtraValue('ForwardRecord',FORMAT(ForwardRecID));
          ADCSCommunication.SetExtraValue('FromTable',FORMAT(DATABASE::"Bin Count Line"));
          ADCSCommunication.SetExtraValue('FromRecord',FORMAT(BinCountLine.RECORDID));
          ADCSCommunication.SetExtraValue('FromRecordLine',FORMAT(BinCountLine.RECORDID));
          ADCSCommunication.SetExtraValue('FromMiniformCode',MiniformHeader.Code);
          SendForm(ActiveInputField);

          MiniformHeader2.GET(MiniformHeader."Next Miniform");
          MiniformHeader2.SaveXMLin(DOMxmlin);
          CODEUNIT.RUN(MiniformHeader2."Handling Codeunit",MiniformHeader2);
          EXIT(TRUE);
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE OpenExistingBinCount@1240020000(BinCountLine@1240020000 : Record 14002581);
    VAR
      MiniformHeader2@1240020013 : Record 7700;
      BinCount@1240020014 : Record 14002580;
      BinContent@1240020011 : Record 7302;
      WhseJournalBatch@1240020009 : Record 7310;
      WhseJournalBatch2@1240020008 : Record 7310;
      RFEmployeeSetup@1240020007 : Record 14002802;
      RFDynamicMgt@1240020006 : Codeunit 14002882;
      BatchName@1240020005 : Text[30];
      ForwardRecID@1240020004 : RecordID;
      ForwardTableNo@1240020003 : Integer;
      RemarkMessage@1240020002 : Text[250];
      BinCountExists@1240020001 : Boolean;
    BEGIN
      BinCount.GET(BinCountLine."Bin Count No.");

      WhseJournalBatch2.RESET;
      IF WhseJournalBatch2.GET(
        BinCount."Journal Template Name",BinCountLine."Batch No.",BinCount."Location Code")
      THEN BEGIN
        ForwardTableNo := DATABASE::"Warehouse Journal Batch";
        ForwardRecID := WhseJournalBatch2.RECORDID;
        BinCountExists := TRUE;
        ADCSCommunication.SetExtraValue('BinCountExists',FORMAT(BinCountExists));
        ADCSCommunication.SetExtraValue('ForwardName',WhseJournalBatch2.Name);
        ADCSCommunication.SetExtraValue('ForwardTable',FORMAT(ForwardTableNo));
        ADCSCommunication.SetExtraValue('ForwardRecord',FORMAT(ForwardRecID));
        ADCSCommunication.SetExtraValue('FromTable',FORMAT(DATABASE::"Bin Count Line"));
        ADCSCommunication.SetExtraValue('FromRecord',FORMAT(BinCountLine.RECORDID));
        ADCSCommunication.SetExtraValue('FromRecordLine',FORMAT(BinCountLine.RECORDID));
        ADCSCommunication.SetExtraValue('FromMiniformCode',MiniformHeader.Code);
        SendForm(ActiveInputField);

        MiniformHeader2.GET(MiniformHeader."Next Miniform");
        MiniformHeader2.SaveXMLin(DOMxmlin);
        CODEUNIT.RUN(MiniformHeader2."Handling Codeunit",MiniformHeader2);
        EXIT;
      END ELSE
        ERROR(Text011);
    END;

    PROCEDURE LaunchEmptyBinCount@1240020001(BinCountLine@1240020000 : Record 14002581) : Boolean;
    VAR
      MiniformHeader2@1240020013 : Record 7700;
      MiniformLine@1240020015 : Record 7701;
      BinCountLine2@1240020012 : Record 14002581;
      RFEmployeeSetup@1240020008 : Record 14002802;
      RFDynamicMgt@1240020007 : Codeunit 14002882;
      BinCountMgt@1240020009 : Codeunit 14002580;
      ForwardRecID@1240020005 : RecordID;
      ForwardTableNo@1240020004 : Integer;
      BinCountExists@1240020002 : Boolean;
      ForwardMiniformCode@1240020014 : Code[20];
    BEGIN
      RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);

      IF NOT BinCountLine."Empty Bin" THEN
        EXIT(FALSE);

      BinCountMgt.ToggleAssignedUserID(BinCountLine,TRUE,WhseEmpId);

      ForwardTableNo := DATABASE::"Bin Count Line";
      ForwardRecID := BinCountLine.RECORDID;
      BinCountExists := TRUE;
      ForwardMiniformCode := MiniformHeader.Code;
      ADCSCommunication.SetExtraValue('BinCountExists',FORMAT(BinCountExists));
      ADCSCommunication.SetExtraValue('ForwardTable',FORMAT(ForwardTableNo));
      ADCSCommunication.SetExtraValue('ForwardRecord',FORMAT(ForwardRecID));
      ADCSCommunication.SetExtraValue('ForwardMiniformCode',ForwardMiniformCode);
      ADCSCommunication.SetExtraValue('FromTable',FORMAT(DATABASE::"Bin Count Line"));
      ADCSCommunication.SetExtraValue('FromRecord',FORMAT(BinCountLine.RECORDID));
      ADCSCommunication.SetExtraValue('FromRecordLine',FORMAT(BinCountLine.RECORDID));
      ADCSCommunication.SetExtraValue('FromMiniformCode',MiniformHeader.Code);
      SendForm(ActiveInputField);

      MiniformLine.RESET;
      MiniformLine.SETRANGE("Miniform Code",MiniformHeader.Code);
      MiniformLine.SETRANGE("Table No.",DATABASE::"Bin Count Line");
      MiniformLine.SETRANGE("Field No.",BinCountLine.FIELDNO("Empty Bin"));
      IF MiniformLine.FIND('-') THEN BEGIN
        IF MiniformLine."Call Miniform" <> '' THEN BEGIN
          IF MiniformHeader2.GET(MiniformLine."Call Miniform") THEN BEGIN
            MiniformHeader2.SaveXMLin(DOMxmlin);
            CODEUNIT.RUN(MiniformHeader2."Handling Codeunit",MiniformHeader2);
            EXIT(TRUE);
          END ELSE
            ERROR(Text012);
        END ELSE
          ERROR(Text013);
      END ELSE
        ERROR(Text014);

      EXIT(FALSE);
    END;

    EVENT DOMxmlin@1240020002::NodeInserting@93(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020002::NodeInserted@94(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020002::NodeRemoving@95(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020002::NodeRemoved@96(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020002::NodeChanging@97(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020002::NodeChanged@98(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

