OBJECT Codeunit 51905 Codeunit90EventSubscriber
{
  OBJECT-PROPERTIES
  {
    Date=07/01/20;
    Time=12:00:00 AM;
    Modified=Yes;
    Version List=TPZ000.00.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Currency@1000000000 : Record 4;

    PROCEDURE Cu90_DeleteLinkedPO@1000000001(VAR PurchLineLocal@1000000000 : Record 39);
    VAR
      LinkedPurchHeader@1000000001 : Record 38;
      LinkedPurchLine@1000000002 : Record 39;
      LinkedPOIsEverythingInvoiced@1000000003 : Boolean;
      LinkedPurchRcptHeader@1000000004 : Record 120;
      LinkedPurchCommLine@1000000005 : Record 43;
      LinkedWhseRqst@1000000006 : Record 5765;
    BEGIN
      //<TPZ934> TM BEG 090815
      IF PurchLineLocal."Document Type" <> PurchLineLocal."Document Type"::Invoice THEN
        EXIT;

      IF PurchLineLocal."Receipt No." = '' THEN
        EXIT;

      IF LinkedPurchRcptHeader.GET(PurchLineLocal."Receipt No.") = FALSE THEN
        EXIT;

      IF LinkedPurchHeader.GET(LinkedPurchHeader."Document Type"::Order, LinkedPurchRcptHeader."Order No.") = FALSE THEN
        EXIT;

      //check linked PO to see if it's completely invoiced or not.
      LinkedPOIsEverythingInvoiced := TRUE;
      LinkedPurchLine.SETRANGE("Document Type", LinkedPurchHeader."Document Type");
      LinkedPurchLine.SETRANGE("Document No.", LinkedPurchHeader."No.");
      IF LinkedPurchLine.FINDSET THEN
      REPEAT
      IF LinkedPurchLine."Quantity Invoiced" <> LinkedPurchLine.Quantity THEN
              LinkedPOIsEverythingInvoiced := FALSE;
      UNTIL (LinkedPurchLine.NEXT = 0) OR (LinkedPOIsEverythingInvoiced = FALSE);

      IF LinkedPOIsEverythingInvoiced = FALSE THEN
        EXIT;

      //delete linked PO since it's completely invoiced.
      LinkedPurchLine.RESET;
      LinkedPurchLine.SETRANGE("Document Type", LinkedPurchHeader."Document Type");
      LinkedPurchLine.SETRANGE("Document No.", LinkedPurchHeader."No.");
      IF LinkedPurchLine.FINDSET THEN
      REPEAT
        IF LinkedPurchLine.HASLINKS THEN
          LinkedPurchLine.DELETELINKS;
      UNTIL LinkedPurchLine.NEXT = 0;
      LinkedPurchLine.DELETEALL;

      LinkedPurchHeader.DeleteShippingAgentOptionPage;

      IF LinkedPurchHeader.HASLINKS THEN
        LinkedPurchHeader.DELETELINKS;

      LinkedPurchCommLine.SETRANGE("Document Type", LinkedPurchHeader."Document Type");
      LinkedPurchCommLine.SETRANGE("No.", LinkedPurchHeader."No.");
      IF NOT LinkedPurchCommLine.ISEMPTY THEN
            LinkedPurchCommLine.DELETEALL;

      LinkedWhseRqst.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
      LinkedWhseRqst.SETRANGE("Source Type",DATABASE::"Purchase Line");
      LinkedWhseRqst.SETRANGE("Source Subtype",LinkedPurchHeader."Document Type");
      LinkedWhseRqst.SETRANGE("Source No.",LinkedPurchHeader."No.");
      IF NOT LinkedWhseRqst.ISEMPTY THEN
        LinkedWhseRqst.DELETEALL;

      LinkedPurchHeader.DELETE;
      //</TPZ934> TM END 090815
    END;

    [EventSubscriber(Codeunit,90,OnAfterPurchInvLineInsert)]
    LOCAL PROCEDURE Cu90_PostPurchLine@1000000003(VAR PurchInvLine@1000000000 : Record 123;PurchInvHeader@1000000001 : Record 122;PurchLine@1000000002 : Record 39;ItemLedgShptEntryNo@1000000003 : Integer;WhseShip@1000000004 : Boolean;WhseReceive@1000000005 : Boolean);
    BEGIN
      Cu90_DeleteLinkedPO(PurchLine);//<TPZ934> TM BEG 090915
    END;

    [EventSubscriber(Codeunit,90,OnBeforePostVendorEntry)]
    LOCAL PROCEDURE Cu90_PostVendorEntry@1000000000(VAR GenJnlLine@1000000000 : Record 81;VAR PurchHeader@1000000001 : Record 38;VAR TotalPurchLine@1000000002 : Record 39;VAR TotalPurchLineLCY@1000000003 : Record 39);
    VAR
      DimMgt@1000000004 : Codeunit 408;
      Cu225EventSubscriber@1000000005 : Codeunit 51908;
    BEGIN
        // <TOP9116>
        GenJnlLine."Shortcut Dimension 5 Code" := Cu225EventSubscriber.Cu408_GetShortcutDim5Code(PurchHeader."Dimension Set ID");
        // </TOP9116>
          //<TPZ934> TM 090815
        IF PurchHeader."Document Type" = PurchHeader."Document Type"::Order THEN
          GenJnlLine."Order No." := PurchHeader."No.";
        //</TPZ934>
    END;

    [EventSubscriber(Codeunit,90,OnBeforePurchRcptLineInsert)]
    LOCAL PROCEDURE Cu90_InsertReceiptLine@1000000002(VAR PurchRcptLine@1000000000 : Record 121;VAR PurchRcptHeader@1000000001 : Record 120;VAR PurchLine@1000000002 : Record 39);
    BEGIN
      GetCurrency(PurchRcptHeader."Currency Code");//NAVEVENT
        // <TPZ1056>
        PurchRcptLine."Line Amount" :=
          ROUND(PurchRcptLine.Quantity * PurchRcptLine."Direct Unit Cost",Currency."Amount Rounding Precision");
        PurchRcptLine.Amount := PurchRcptLine."Line Amount";
        // </TPZ1056>
    END;

    LOCAL PROCEDURE GetCurrency@17(CurrencyCode@1000 : Code[10]);
    BEGIN
      IF CurrencyCode = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        Currency.GET(CurrencyCode);
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
    END;

    BEGIN
    END.
  }
}

