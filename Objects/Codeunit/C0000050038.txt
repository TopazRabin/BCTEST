OBJECT Codeunit 50038 Cust. Statement Via Job Queue
{
  OBJECT-PROPERTIES
  {
    Date=05/12/21;
    Time=[ 4:48:50 AM];
    Modified=Yes;
    Version List=TPZ000.00.00,001;
  }
  PROPERTIES
  {
    TableNo=472;
    OnRun=VAR
            SalesSetup@1000000001 : Record 311;
            Customer@1000000002 : Record 18;
            JobQueueCat@1000000003 : Record 471;
            RecRef@1000000004 : RecordRef;
          BEGIN
              //<TPZ1977>


             CASE "Parameter String" OF
              'IMARK':
                ImarkStatements;
              'IMARKEXCLUDED':
                AllStatementsImarkExcluded;
              'AllCUSTSTMT'://<TPZ3176>
                 AllcustomerStatements;//<TPZ3176>
              END
               //</TPZ1977>

          END;

  }
  CODE
  {
    VAR
      PostDescription@1000000000 : TextConst '@@@="%1 = document type, %2 = document number. Example: Post Sales Order 1234.";ENU="Email Statement %1 ";ESM=Registrar ventas %1 %2.;FRC=Reportez les ventes %1 %2.;ENC=Post Sales %1 %2.';
      JobQueueEntry@1000000001 : Record 472;

    PROCEDURE ImarkStatements@1000000000();
    VAR
      SalesSetup@1000000003 : Record 311;
      Customer@1000000002 : Record 18;
      JobQueueCat@1000000001 : Record 471;
      RecRef@1000000000 : RecordRef;
    BEGIN
        Customer.SETCURRENTKEY("No.");
        Customer.SETRANGE("Print Statements",TRUE);
        Customer.SETFILTER("Buying Group Code",'IMARK');

        IF Customer.FINDFIRST THEN BEGIN
         REPEAT
            Customer.CALCFIELDS("Balance (LCY)");
            IF Customer."Balance (LCY)">0 THEN BEGIN
                JobQueueEntry.INIT();
               SalesSetup.GET;
               JobQueueEntry."Object Type to Run" := JobQueueEntry."Object Type to Run"::Codeunit;
               JobQueueEntry."Object ID to Run" := CODEUNIT::"Cust. Statement Auto Gen";
               JobQueueEntry."Parameter String":=Customer."No.";
               JobQueueEntry.ID:=CREATEGUID;
               JobQueueCat.GET('EMAILSTATE');
               JobQueueEntry."Job Queue Category Code" := JobQueueCat.Code;
               JobQueueEntry."Timeout (sec.)" := 7200;
               IF SalesSetup."Post from Statem. Start Time" <> 0T THEN
                  JobQueueEntry."Earliest Start Date/Time" := CREATEDATETIME(TODAY,SalesSetup."Post from Statem. Start Time");

                  JobQueueEntry.Priority := SalesSetup."Job Q. Prio. for P. from Whse.";
                  JobQueueEntry.Description :=
                  COPYSTR(STRSUBSTNO(PostDescription,Customer."No."),1,MAXSTRLEN(JobQueueEntry.Description));
                  JobQueueEntry."User ID" := USERID;
                  JobQueueEntry.INSERT;
                  CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry);

            END;
          UNTIL Customer.NEXT=0;
       END;
    END;

    PROCEDURE AllStatementsImarkExcluded@1000000001();
    VAR
      SalesSetup@1000000003 : Record 311;
      Customer@1000000002 : Record 18;
      JobQueueCat@1000000001 : Record 471;
      RecRef@1000000000 : RecordRef;
    BEGIN
        Customer.SETCURRENTKEY("No.");
        Customer.SETRANGE("Print Statements",TRUE);
        Customer.SETFILTER("Buying Group Code",'<>IMARK');

        IF Customer.FINDFIRST THEN BEGIN
         REPEAT
            Customer.CALCFIELDS("Balance (LCY)");
            IF Customer."Balance (LCY)">0 THEN BEGIN
                JobQueueEntry.INIT();
               SalesSetup.GET;
               JobQueueEntry."Object Type to Run" := JobQueueEntry."Object Type to Run"::Codeunit;
               JobQueueEntry."Object ID to Run" := CODEUNIT::"Cust. Statement Auto Gen";
               JobQueueEntry."Parameter String":=Customer."No.";
               JobQueueEntry.ID:=CREATEGUID;
               JobQueueCat.GET('EMAILSTATE');
               JobQueueEntry."Job Queue Category Code" := JobQueueCat.Code;
               JobQueueEntry."Timeout (sec.)" := 7200;
               IF SalesSetup."Post from Statem. Start Time" <> 0T THEN
                  JobQueueEntry."Earliest Start Date/Time" := CREATEDATETIME(TODAY,SalesSetup."Post from Statem. Start Time");

                  JobQueueEntry.Priority := SalesSetup."Job Q. Prio. for P. from Whse.";
                  JobQueueEntry.Description :=
                  COPYSTR(STRSUBSTNO(PostDescription,Customer."No."),1,MAXSTRLEN(JobQueueEntry.Description));
                  JobQueueEntry."User ID" := USERID;
                  JobQueueEntry.INSERT;
                  CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry);

            END;
          UNTIL Customer.NEXT=0;
       END;
    END;

    PROCEDURE AllcustomerStatements@1000000002();
    VAR
      SalesSetup@1000000003 : Record 311;
      Customer@1000000002 : Record 18;
      JobQueueCat@1000000001 : Record 471;
      RecRef@1000000000 : RecordRef;
    BEGIN
      //<TPZ3176>
        Customer.SETCURRENTKEY("No.");
        Customer.SETRANGE("Print Statements",TRUE);
       // Customer.SETFILTER("Buying Group Code",'IMARK');

        IF Customer.FINDFIRST THEN BEGIN
         REPEAT
            Customer.CALCFIELDS("Balance (LCY)");
            IF Customer."Balance (LCY)">0 THEN BEGIN
                JobQueueEntry.INIT();
               SalesSetup.GET;
               JobQueueEntry."Object Type to Run" := JobQueueEntry."Object Type to Run"::Codeunit;
               JobQueueEntry."Object ID to Run" := CODEUNIT::"Cust. Statement Auto Gen";
               JobQueueEntry."Parameter String":=Customer."No.";
               JobQueueEntry.ID:=CREATEGUID;
               JobQueueCat.GET('EMAILSTATE');
               JobQueueEntry."Job Queue Category Code" := JobQueueCat.Code;
               JobQueueEntry."Timeout (sec.)" := 7200;
               IF SalesSetup."Post from Statem. Start Time" <> 0T THEN
                  JobQueueEntry."Earliest Start Date/Time" := CREATEDATETIME(TODAY,SalesSetup."Post from Statem. Start Time");

                  JobQueueEntry.Priority := SalesSetup."Job Q. Prio. for P. from Whse.";
                  JobQueueEntry.Description :=
                  COPYSTR(STRSUBSTNO(PostDescription,Customer."No."),1,MAXSTRLEN(JobQueueEntry.Description));
                  JobQueueEntry."User ID" := USERID;
                  JobQueueEntry.INSERT;
                  CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry);

            END;
          UNTIL Customer.NEXT=0;
       END;
      //</TPZ3176>
    END;

    BEGIN
    {
      2017-08-10 EBAGIM TPZ1977
        Fucnations added to support splitting Imark statements

      001 TPZ3176 UTK 05122021 Added code for all customer Statement.
    }
    END.
  }
}

