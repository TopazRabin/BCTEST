OBJECT Codeunit 14002379 E.D.I. Management
{
  OBJECT-PROPERTIES
  {
    Date=07/13/20;
    Time=12:00:00 PM;
    Version List=SE0.62,TPZEDI;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Cust@1240030000 : Record 18;
      SalesHeader@1240030001 : Record 36;
      SalesShipmentHeader@1240030002 : Record 110;
      SalesInvHeader@1240030003 : Record 112;
      SalesCrMemoHeader@1240030004 : Record 114;
      PurchHeader@1240030005 : Record 38;
      PurchInvHeader@1240030006 : Record 122;
      ShiptoAddress@1240030007 : Record 222;
      BillofLading@1240030008 : Record 14000822;
      BillOfLadingLine@1240030009 : Record 14000823;
      EDIRecDocHdr@1240030011 : Record 14002358;
      EDISendDocHdr@1240030012 : Record 14002369;
      OrderStatusHeader@1240030013 : Record 14002400;
      EDIChangedDocument@1240030014 : Record 14002373;
      Text001@1001 : TextConst 'ENU=E.D.I. Receive Document';
      Text002@1002 : TextConst 'ENU=Customer Card';
      Text003@1003 : TextConst 'ENU=Ship-to Address';
      Text004@1004 : TextConst 'ENU=Sales Order';
      Text005@1005 : TextConst 'ENU=Sales Quote';
      Text006@1006 : TextConst 'ENU=Sales Credit Memo';
      Text007@1007 : TextConst 'ENU=Sales Blanket Order';
      Text008@1008 : TextConst 'ENU=Sales Cr. Memo';
      Text009@1009 : TextConst 'ENU=Order Status';
      Text010@1010 : TextConst 'ENU=Posted Sales Shipment';
      Text011@1011 : TextConst 'ENU=Posted Sales Invoice';
      Text012@1012 : TextConst 'ENU=Purchase Order';
      Text013@1013 : TextConst 'ENU=Posted Purchase Invoice';
      Text014@1014 : TextConst 'ENU=E.D.I. Send Document';
      Text015@1015 : TextConst 'ENU=Bill of Lading';
      EDISetup@1240030015 : Record 14002367;
      ItemJournalLine@1240020009 : Record 83;
      ItemLedgerEntry@1240020014 : Record 32;
      ReturnShipmentHdr@1240020010 : Record 6650;
      ReturnReceiptHdr@1240020011 : Record 6660;
      TransferHeader@1240020008 : Record 5740;
      TransferReceiptHdr@1240020027 : Record 5746;
      TransferShipmentHdr@1240020029 : Record 5744;
      EDIRecDocHdrTmp@1240020018 : TEMPORARY Record 14002358;
      EDIRecDocHdr2@1240020021 : Record 14002358;
      EDIInventoryAdviceHdr@1240020024 : Record 14002413;
      PurchReceiptHeader@1240020031 : Record 120;
      BillofLading2@1240020023 : Record 14000822;
      SalesShipmentHeader2@1240020033 : Record 110;
      EDILog@1240020036 : Record 14050302;
      RoutingRequestLine@1240020037 : Record 14002403;
      RoutingRequestHeader@1240020039 : Record 14002402;
      TmpRoutingRequestHdr@1240020040 : TEMPORARY Record 14002402;
      RoutingRequestHeader2@1240020041 : Record 14002402;
      EDIDiscount@1240020042 : Record 14002382;
      EDILineDiscount@1240020045 : Record 14002383;
      SalesHeaderArchive@1240020046 : Record 5107;
      DepositHeader@1240020054 : Record 10140;
      PostedDepositHeader@1240020053 : Record 10143;
      GenJournalBatch@1240020060 : Record 232;
      GenJournalLine@1240020052 : Record 81;
      EDIPaymentRemitAdvice@1240020050 : Record 14050902;
      EDIPostedPaymentRemitAdvice@1240020062 : Record 14050904;
      EDISetupRetrieved@1240030016 : Boolean;
      Text016@1240030019 : TextConst 'ENU=Archive %1?';
      Text017@1240030018 : TextConst 'ENU=Restore %1 from Archive?';
      BOLAvailable@1000000000 : Boolean;
      Text018@1000000001 : TextConst 'ENU=Posted Bill of Lading';
      Text019@1240020003 : TextConst 'ENU=Sales Return Order';
      Text020@1240020002 : TextConst 'ENU=Purchase Invoice';
      Text021@1240020001 : TextConst 'ENU=Purchase Quote';
      Text022@1240020000 : TextConst 'ENU=Item Journal Line';
      Text024@1240020004 : TextConst 'ENU=Purchase Return Order';
      Text025@1240020005 : TextConst 'ENU=Purchase Cr. Memo';
      Text026@1240020006 : TextConst 'ENU=Posted Return Shipment';
      Text027@1240020007 : TextConst 'ENU=Posted Return Receipt';
      Text028@1240020012 : TextConst 'ENU=Transfer Order';
      Text030@1240020015 : TextConst 'ENU=Item Ledger Entry';
      Text031@1240020016 : TextConst 'ENU=Order Change Status';
      AssocDocFound@1240020017 : Boolean;
      InsertAssocRecord@1240020019 : Boolean;
      Text032@1240020020 : TextConst 'ENU=Advance P.O. Acknowledgement';
      Text034@1240020025 : TextConst 'ENU="Location Inventory Advice "';
      Text035@1240020026 : TextConst 'ENU=Posted Location Invt. Advice';
      Text036@1240020028 : TextConst 'ENU="Posted Transfer Receipt "';
      Text037@1240020030 : TextConst 'ENU=Posted Transfer Shipment';
      Text038@1240020032 : TextConst 'ENU=Posted Purchase Receipt';
      Text039@1240020013 : TextConst 'ENU=Adjustment Inventory Advice';
      Text040@1240020022 : TextConst 'ENU=Posted Adjustment Invt. Advice';
      SalesShipmentAvailable@1240020034 : Boolean;
      Text042@1240020038 : TextConst 'ENU="Routing Request "';
      Text049@1240020035 : TextConst 'ENU=Sales Invoice';
      Text050@1240020043 : TextConst 'ENU=EDI Discount Summary';
      DiscountFound@1240020044 : Boolean;
      Text051@1240020047 : TextConst 'ENU=Sales Order Archive';
      Text052@1240020048 : TextConst 'ENU=Sales Quote Archive';
      ReverseTrace@1240020049 : Boolean;
      Text053@1240020059 : TextConst 'ENU=Deposit';
      Text054@1240020058 : TextConst 'ENU=Posted Deposit';
      Text055@1240020057 : TextConst 'ENU=Cash Receipt Lines';
      Text056@1240020056 : TextConst 'ENU=E.D.I. Payment Remit Advice';
      Text057@1240020055 : TextConst 'ENU=E.D.I. Posted Payment Remit Advice';
      InternalDocNo@1240020061 : Code[10];
      ByDocFileName@1240020090 : Text[250];

    PROCEDURE GetEDISetup@1();
    BEGIN
      IF NOT EDISetupRetrieved THEN BEGIN
        EDISetup.GET;
        EDISetupRetrieved := TRUE;
      END;
    END;

    PROCEDURE TraceUpdateEDIDocEntryLines@2(VAR DocEntryTmp@1240030000 : Record 14002374;DocNoFilter@1240030004 : Code[250]);
    VAR
      EDIDocument@1240020000 : Record 14002353;
      MaxCount@1240030002 : Integer;
      RepeatCount@1240030003 : Integer;
      DocNoFilterToUse@1240030005 : Code[250];
    BEGIN
      TmpRoutingRequestHdr.RESET;
      TmpRoutingRequestHdr.DELETEALL;

      EDISetup.GET;

      DocNoFilterToUse := DocNoFilter;
      RepeatCount := 0;
      MaxCount := 0;
      AssocDocFound := FALSE;
      InsertAssocRecord := FALSE;
      ReverseTrace := FALSE;

      BillofLading.CLEARMARKS;
      BOLAvailable := BillofLading.READPERMISSION;
      SalesShipmentAvailable := SalesShipmentHeader.READPERMISSION;

      EDIRecDocHdrTmp.RESET;
      EDIRecDocHdrTmp.DELETEALL;

      EDIChangedDocument.RESET;
      EDIChangedDocument.SETRANGE("Internal Doc. No.",DocNoFilter);
      IF EDIChangedDocument.FIND('-') THEN
        AssocDocFound := TRUE
      ELSE BEGIN
        EDIChangedDocument.SETRANGE("Internal Doc. No.");
        EDIChangedDocument.SETRANGE("Assoc. Internal Doc. No.",DocNoFilter);
        IF EDIChangedDocument.FIND('-') THEN BEGIN
          AssocDocFound := TRUE;
          ReverseTrace := TRUE;
        END;
      END;
      IF AssocDocFound THEN BEGIN
        MaxCount := EDISetup."Associated Doc. Max Record No.";
        IF MaxCount = 0 THEN
          MaxCount := 5;
      END ELSE
        MaxCount := 1;

      REPEAT
        IF (RepeatCount > 0) AND (AssocDocFound) THEN BEGIN
          IF ReverseTrace THEN
            DocNoFilterToUse := EDIChangedDocument."Internal Doc. No."
          ELSE
            DocNoFilterToUse := EDIChangedDocument."Assoc. Internal Doc. No.";
          EDIRecDocHdrTmp.RESET;
          EDIRecDocHdrTmp.SETRANGE("Internal Doc. No.",DocNoFilterToUse);
          IF NOT EDIRecDocHdrTmp.FIND('-') THEN BEGIN
            EDIRecDocHdrTmp."Internal Doc. No." := DocNoFilterToUse;
            EDIRecDocHdrTmp.INSERT;
            InsertAssocRecord := TRUE;
          END ELSE
            InsertAssocRecord := FALSE;
        END;
        IF (RepeatCount = 0) OR (InsertAssocRecord) THEN BEGIN
          IF EDIRecDocHdr.READPERMISSION THEN BEGIN
            EDIRecDocHdr.RESET;
            EDIRecDocHdr.SETFILTER("Internal Doc. No.",DocNoFilterToUse);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"E.D.I. Receive Document Hdr.",Text001,EDIRecDocHdr.COUNT,
              RepeatCount,DocNoFilterToUse);
            DiscountFound := FALSE;
            EDIDiscount.RESET;
            EDIDiscount.SETRANGE("Internal Doc. No.",DocNoFilterToUse);
            IF EDIDiscount.FIND('-') THEN
              DiscountFound := TRUE
            ELSE BEGIN
              EDILineDiscount.RESET;
              EDILineDiscount.SETRANGE("Internal Doc. No.",DocNoFilterToUse);
              IF EDILineDiscount.FIND('-') THEN
                DiscountFound := TRUE
            END;
            IF DiscountFound THEN
              TraceInsertIntoDocEntry(
                DocEntryTmp,
                DATABASE::"E.D.I. Receive Document Hdr.",Text050,EDIRecDocHdr.COUNT,
                RepeatCount,DocNoFilterToUse);
          END;

          IF Cust.READPERMISSION THEN BEGIN
            Cust.RESET;
            Cust.SETCURRENTKEY("EDI Internal Doc. No.");
            Cust.SETRANGE("EDI Internal Doc. No.",DocNoFilterToUse);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::Customer,Text002,Cust.COUNT,
              RepeatCount,DocNoFilterToUse);
          END;

          IF ShiptoAddress.READPERMISSION THEN BEGIN
            ShiptoAddress.RESET;
            ShiptoAddress.SETCURRENTKEY("EDI Internal Doc. No.");
            ShiptoAddress.SETRANGE("EDI Internal Doc. No.",DocNoFilterToUse);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Ship-to Address",Text003,ShiptoAddress.COUNT,
              RepeatCount,DocNoFilterToUse);
          END;

          IF SalesHeader.READPERMISSION THEN BEGIN
            SalesHeader.RESET;
            SalesHeader.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
            SalesHeader.SETRANGE(SalesHeader."EDI Order",TRUE);
            SalesHeader.SETFILTER("EDI Internal Doc. No.",DocNoFilterToUse);
            SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Sales Header",Text004,SalesHeader.COUNT,
              RepeatCount,DocNoFilterToUse);
            IF BOLAvailable THEN
              IF SalesHeader.FIND('-') THEN
                REPEAT
                  BillOfLadingLine.RESET;
                  BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed);
                  BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
                  BillOfLadingLine.SETRANGE("No.",SalesHeader."No.");
                  BillOfLadingLine.SETRANGE(Closed,FALSE);
                  IF BillOfLadingLine.FIND('-') THEN
                    REPEAT
                      BillofLading.GET(BillOfLadingLine."Bill of Lading No.");
                      BillofLading.MARK(TRUE);
                    UNTIL BillOfLadingLine.NEXT = 0;
                UNTIL SalesHeader.NEXT = 0;
            SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Quote);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Sales Header",Text005,SalesHeader.COUNT,
              RepeatCount,DocNoFilterToUse);
            SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::"Credit Memo");
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Sales Header",Text006,SalesHeader.COUNT,
              RepeatCount,DocNoFilterToUse);
            SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::"Blanket Order");
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Sales Header",Text007,SalesHeader.COUNT,
              RepeatCount,DocNoFilterToUse);
            SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::"Return Order");
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Sales Header",Text019,SalesHeader.COUNT,
              RepeatCount,DocNoFilterToUse);
            SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Invoice);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Sales Header",Text049,SalesHeader.COUNT,
              RepeatCount,DocNoFilterToUse);
          END;

          IF SalesCrMemoHeader.READPERMISSION THEN BEGIN
            SalesCrMemoHeader.RESET;
            SalesCrMemoHeader.SETCURRENTKEY(
              "EDI Order","EDI Cr. Memo Generated","EDI Trade Partner","EDI Internal Doc. No.");
            SalesCrMemoHeader.SETRANGE("EDI Order",TRUE);
            SalesCrMemoHeader.SETFILTER("EDI Internal Doc. No.",DocNoFilterToUse);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Sales Cr.Memo Header",Text008,SalesCrMemoHeader.COUNT,
              RepeatCount,DocNoFilterToUse);
          END;

          IF OrderStatusHeader.READPERMISSION THEN BEGIN
            OrderStatusHeader.RESET;
            OrderStatusHeader.SETCURRENTKEY(
              "Internal Doc. No.","Source Doc. Type","Source Doc. No.",Exported);
            OrderStatusHeader.SETFILTER("Internal Doc. No.",DocNoFilterToUse);
            OrderStatusHeader.SETRANGE(
              "Document Type",OrderStatusHeader."Document Type"::" ");
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Order Status Header",Text009,OrderStatusHeader.COUNT,
              RepeatCount,DocNoFilterToUse);
            OrderStatusHeader.SETRANGE(
              "Document Type",OrderStatusHeader."Document Type"::"Order Change Status");
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Order Status Header",Text031,OrderStatusHeader.COUNT,
              RepeatCount,DocNoFilterToUse);
            OrderStatusHeader.SETRANGE(
              "Document Type",OrderStatusHeader."Document Type"::"Advance P.O. Ack.");
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Order Status Header",Text032,OrderStatusHeader.COUNT,
              RepeatCount,DocNoFilterToUse);
          END;

          IF SalesShipmentHeader.READPERMISSION THEN BEGIN
            SalesShipmentHeader2.RESET;
            SalesShipmentHeader2.SETCURRENTKEY("EDI Order","EDI Internal Doc. No.");
            SalesShipmentHeader2.SETRANGE("EDI Order",TRUE);
            SalesShipmentHeader2.SETFILTER("EDI Internal Doc. No.",DocNoFilterToUse);
            IF SalesShipmentHeader2.FIND('-') THEN
              REPEAT
                SalesShipmentHeader.GET(SalesShipmentHeader2."No.");
                SalesShipmentHeader.MARK(TRUE);
              UNTIL SalesShipmentHeader2.NEXT = 0;
            IF BOLAvailable THEN BEGIN
              SalesShipmentHeader2.RESET;
              SalesShipmentHeader2.SETCURRENTKEY("EDI Order","EDI Internal Doc. No.");
              SalesShipmentHeader2.SETRANGE("EDI Order",TRUE);
              SalesShipmentHeader2.SETFILTER("EDI Internal Doc. No.",DocNoFilterToUse);
              IF SalesShipmentHeader2.FIND('-') THEN
                REPEAT
                  IF SalesShipmentHeader2."Bill of Lading No." <> '' THEN BEGIN
                    BillofLading.GET(SalesShipmentHeader2."Bill of Lading No.");
                    BillofLading.MARK(TRUE);
                  END;
                UNTIL SalesShipmentHeader2.NEXT = 0;
            END;
          END;

          IF SalesInvHeader.READPERMISSION THEN BEGIN
            SalesInvHeader.RESET;
            SalesInvHeader.SETCURRENTKEY(SalesInvHeader."EDI Internal Doc. No.");
            SalesInvHeader.SETFILTER("EDI Internal Doc. No.",DocNoFilterToUse);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Sales Invoice Header",Text011,SalesInvHeader.COUNT,
              RepeatCount,DocNoFilterToUse);
          END;

          IF ReturnReceiptHdr.READPERMISSION THEN BEGIN
            ReturnReceiptHdr.RESET;
            ReturnReceiptHdr.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
            ReturnReceiptHdr.SETFILTER("EDI Internal Doc. No.",DocNoFilterToUse);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Return Receipt Header",Text027,ReturnReceiptHdr.COUNT,
              RepeatCount,DocNoFilterToUse);
          END;

          IF PurchHeader.READPERMISSION THEN BEGIN
            PurchHeader.RESET;
            PurchHeader.SETCURRENTKEY("EDI Internal Doc. No.");
            PurchHeader.SETFILTER("EDI Internal Doc. No.",DocNoFilterToUse);
            PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::Order);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Purchase Header",Text012,PurchHeader.COUNT,
              RepeatCount,DocNoFilterToUse);
            PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::Invoice);
            BEGIN
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Purchase Header",Text020,PurchHeader.COUNT,
              RepeatCount,DocNoFilterToUse);
            IF  BOLAvailable THEN
              IF PurchHeader.FIND('-') THEN BEGIN
                BillofLading.RESET;
                BillofLading.SETRANGE("No.",PurchHeader."Vendor Shipment No.");
                IF BillofLading.FIND('-') THEN
                  BillofLading.MARK(TRUE);
              END;
            END;
            PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::Quote);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Purchase Header",Text021,PurchHeader.COUNT,
              RepeatCount,DocNoFilterToUse);
            PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::"Credit Memo");
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Purchase Header",Text025,PurchHeader.COUNT,
              RepeatCount,DocNoFilterToUse);
            PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::"Return Order");
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Purchase Header",Text024,PurchHeader.COUNT,
              RepeatCount,DocNoFilterToUse);
          END;

          IF PurchInvHeader.READPERMISSION THEN BEGIN
            PurchInvHeader.RESET;
            PurchInvHeader.SETCURRENTKEY(PurchInvHeader."EDI Internal Doc. No.");
            PurchInvHeader.SETFILTER("EDI Internal Doc. No.",DocNoFilterToUse);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Purch. Inv. Header",Text013,PurchInvHeader.COUNT,
              RepeatCount,DocNoFilterToUse);
          END;

          IF PurchReceiptHeader.READPERMISSION THEN BEGIN
            PurchReceiptHeader.RESET;
            PurchReceiptHeader.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
            PurchReceiptHeader.SETFILTER("EDI Internal Doc. No.",DocNoFilterToUse);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Purch. Rcpt. Header",Text038,PurchReceiptHeader.COUNT,
              RepeatCount,DocNoFilterToUse);
          END;

          IF ReturnShipmentHdr.READPERMISSION THEN BEGIN
            ReturnShipmentHdr.RESET;
            ReturnShipmentHdr.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
            ReturnShipmentHdr.SETFILTER("EDI Internal Doc. No.",DocNoFilterToUse);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Return Shipment Header",Text026,ReturnShipmentHdr.COUNT,
              RepeatCount,DocNoFilterToUse);
          END;

          IF TransferHeader.READPERMISSION THEN BEGIN
            TransferHeader.RESET;
            TransferHeader.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
            TransferHeader.SETFILTER("EDI Internal Doc. No.",DocNoFilterToUse);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Transfer Header",Text028,TransferHeader.COUNT,
              RepeatCount,DocNoFilterToUse);
          END;

          IF EDIInventoryAdviceHdr.READPERMISSION THEN BEGIN
            EDIInventoryAdviceHdr.RESET;
            EDIInventoryAdviceHdr.SETCURRENTKEY("Trade Partner No.","EDI Internal Doc. No.");
            EDIInventoryAdviceHdr.SETRANGE("EDI Internal Doc. No.",DocNoFilterToUse);
            EDIInventoryAdviceHdr.SETRANGE(Posted,FALSE);
            EDIInventoryAdviceHdr.SETRANGE(Type,EDIInventoryAdviceHdr.Type::Location);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"E.D.I. Inventory Advice Header",Text034,EDIInventoryAdviceHdr.COUNT,
              RepeatCount,DocNoFilterToUse);

            EDIInventoryAdviceHdr.SETRANGE(Type,EDIInventoryAdviceHdr.Type::Adjustment);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"E.D.I. Inventory Advice Header",Text039,EDIInventoryAdviceHdr.COUNT,
              RepeatCount,DocNoFilterToUse);

            EDIInventoryAdviceHdr.SETRANGE(Type,EDIInventoryAdviceHdr.Type::Location);
            EDIInventoryAdviceHdr.SETRANGE(Posted,TRUE);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"E.D.I. Inventory Advice Header",Text035,EDIInventoryAdviceHdr.COUNT,
              RepeatCount,DocNoFilterToUse);

            EDIInventoryAdviceHdr.SETRANGE(Type,EDIInventoryAdviceHdr.Type::Adjustment);
            EDIInventoryAdviceHdr.SETRANGE(Posted,TRUE);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"E.D.I. Inventory Advice Header",Text040,EDIInventoryAdviceHdr.COUNT,
              RepeatCount,DocNoFilterToUse);
          END;

          IF ItemJournalLine.READPERMISSION THEN BEGIN
            IF EDIRecDocHdr2.GET(DocNoFilterToUse) THEN BEGIN
              ItemJournalLine.RESET;
              ItemJournalLine.SETCURRENTKEY("EDI Internal Doc. No.");
              ItemJournalLine.SETRANGE("EDI Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
              TraceInsertIntoDocEntry(
                DocEntryTmp,
                DATABASE::"Item Journal Line",Text022,ItemJournalLine.COUNT,
                RepeatCount,DocNoFilterToUse);
            END;
          END;

          IF ItemLedgerEntry.READPERMISSION THEN BEGIN
            IF EDIRecDocHdr2.GET(DocNoFilterToUse)THEN BEGIN
              ItemLedgerEntry.RESET;
              ItemLedgerEntry.SETCURRENTKEY("External Document No.");
              ItemLedgerEntry.SETRANGE("External Document No.", EDIRecDocHdr2."Internal Doc. No.");
              TraceInsertIntoDocEntry(
                DocEntryTmp,
                DATABASE::"Item Ledger Entry",Text030,ItemLedgerEntry.COUNT,
                RepeatCount,DocNoFilterToUse);
            END;
          END;

          IF TransferReceiptHdr.READPERMISSION THEN BEGIN
            TransferReceiptHdr.RESET;
            TransferReceiptHdr.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
            TransferReceiptHdr.SETRANGE("EDI Order",TRUE);
            TransferReceiptHdr.SETFILTER("EDI Internal Doc. No.",DocNoFilterToUse);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Transfer Receipt Header",Text036,TransferReceiptHdr.COUNT,
              RepeatCount,DocNoFilterToUse);
          END;

          IF TransferShipmentHdr.READPERMISSION THEN BEGIN
            TransferShipmentHdr.RESET;
            TransferShipmentHdr.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
            TransferShipmentHdr.SETRANGE("EDI Order",TRUE);
            TransferShipmentHdr.SETFILTER("EDI Internal Doc. No.",DocNoFilterToUse);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Transfer Shipment Header",Text037,TransferShipmentHdr.COUNT,
              RepeatCount,DocNoFilterToUse);
          END;

          IF RoutingRequestLine.READPERMISSION THEN BEGIN
            RoutingRequestLine.RESET;
            RoutingRequestLine.SETCURRENTKEY("EDI Internal Doc. No. (Resp.)");
            RoutingRequestLine.SETRANGE("EDI Internal Doc. No. (Resp.)",DocNoFilterToUse);
            IF RoutingRequestLine.FIND('-') THEN
              REPEAT
                TmpRoutingRequestHdr.RESET;
                TmpRoutingRequestHdr.SETRANGE("No.",RoutingRequestLine."Routing Request No.");
                IF NOT TmpRoutingRequestHdr.FIND('-') THEN BEGIN
                  TmpRoutingRequestHdr."No." := RoutingRequestLine."Routing Request No.";
                  TmpRoutingRequestHdr.INSERT;
                  IF RoutingRequestHeader2.GET(RoutingRequestLine."Routing Request No.") THEN
                    IF RoutingRequestHeader2."Bill of Lading No." <> '' THEN BEGIN
                      IF BillofLading.GET(RoutingRequestHeader2."Bill of Lading No.") THEN
                        BillofLading.MARK(TRUE);
                    END;
                END;
              UNTIL RoutingRequestLine.NEXT = 0;
            TmpRoutingRequestHdr.RESET;
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Routing Request Header",Text042,TmpRoutingRequestHdr.COUNT,
              RepeatCount,DocNoFilterToUse);
          END;

          IF SalesHeaderArchive.READPERMISSION THEN BEGIN
            SalesHeaderArchive.RESET;
            SalesHeaderArchive.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
            SalesHeaderArchive.SETRANGE("EDI Order",TRUE);
            SalesHeaderArchive.SETFILTER("EDI Internal Doc. No.",DocNoFilterToUse);
            SalesHeaderArchive.SETRANGE("Document Type",SalesHeaderArchive."Document Type"::Order);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Sales Header Archive",Text051,SalesHeaderArchive.COUNT,
              RepeatCount,DocNoFilterToUse);
            SalesHeaderArchive.SETRANGE("Document Type",SalesHeaderArchive."Document Type"::Quote);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Sales Header Archive",Text052,SalesHeaderArchive.COUNT,
              RepeatCount,DocNoFilterToUse);
          END;
          IF DepositHeader.READPERMISSION THEN BEGIN
            DepositHeader.RESET;
            DepositHeader.SETCURRENTKEY("EDI Trade Partner","EDI Internal Doc. No.","EDI Deposit");
            DepositHeader.SETRANGE("EDI Internal Doc. No.",DocNoFilterToUse);
            IF DepositHeader.FIND('-') THEN;
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Deposit Header",Text053,DepositHeader.COUNT,
              RepeatCount,DocNoFilterToUse);
          END;

          IF PostedDepositHeader.READPERMISSION THEN BEGIN
            PostedDepositHeader.RESET;
            PostedDepositHeader.SETCURRENTKEY(
              "EDI Trade Partner","EDI Internal Doc. No.","EDI Deposit");
            PostedDepositHeader.SETRANGE("EDI Internal Doc. No.",DocNoFilterToUse);
            IF PostedDepositHeader.FIND('-') THEN;
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Posted Deposit Header",Text054,PostedDepositHeader.COUNT,
              RepeatCount,DocNoFilterToUse);
          END;

          IF GenJournalLine.READPERMISSION THEN
            IF EDIRecDocHdr2.GET(DocNoFilterToUse) THEN BEGIN
              WITH EDIRecDocHdr2 DO
                EDIDocument.GET(
                  "Trade Partner No.","Navision Document","EDI Document No.",
                  "EDI Version",EDIDocument.Type::Import);
              IF EDIDocument."Navision Document" = 'I_PMTADV' THEN BEGIN
                InternalDocNo := EDIRecDocHdr2."Internal Doc. No.";
                GenJournalLine.RESET;
                GenJournalLine.SETCURRENTKEY("EDI Internal Doc. No.");
                GenJournalLine.SETRANGE("EDI Internal Doc. No.",EDIRecDocHdr2."Internal Doc. No.");
                GenJournalLine.SETRANGE("Journal Template Name",'CASHRCPT');
                TraceInsertIntoDocEntry(
                  DocEntryTmp,
                  DATABASE::"Gen. Journal Batch",Text055,GenJournalLine.COUNT,
                  RepeatCount,DocNoFilterToUse);
              END;
            END;

          IF EDIPaymentRemitAdvice.READPERMISSION THEN BEGIN
            EDIPaymentRemitAdvice.RESET;
            EDIPaymentRemitAdvice.SETCURRENTKEY("Internal Doc. No.");
            EDIPaymentRemitAdvice.SETRANGE("Internal Doc. No.",DocNoFilterToUse);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"E.D.I. Payment Remit Advice",Text056,EDIPaymentRemitAdvice.COUNT,
              RepeatCount,DocNoFilterToUse);
          END;

          IF EDIPostedPaymentRemitAdvice.READPERMISSION THEN BEGIN
            EDIPostedPaymentRemitAdvice.RESET;
            EDIPostedPaymentRemitAdvice.SETCURRENTKEY("Internal Doc. No.");
            EDIPostedPaymentRemitAdvice.SETRANGE("Internal Doc. No.",DocNoFilterToUse);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"E.D.I. Posted Pmt.Remit Advice",Text057,EDIPostedPaymentRemitAdvice.COUNT,
              RepeatCount,DocNoFilterToUse);
          END;

          IF EDISendDocHdr.READPERMISSION THEN BEGIN
            EDISendDocHdr.RESET;
            EDISendDocHdr.SETCURRENTKEY("Internal Doc No.","Navision Document","Document No.",Version);
            EDISendDocHdr.SETRANGE("Internal Doc No.",DocNoFilterToUse);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"E.D.I. Send Document Hdr.",Text014,EDISendDocHdr.COUNT,
              RepeatCount,DocNoFilterToUse);
            IF BOLAvailable THEN BEGIN
              BillofLading2.RESET;
              BillofLading2.SETCURRENTKEY("EDI Internal Doc. No.");
              BillofLading2.SETRANGE("EDI Internal Doc. No.",DocNoFilterToUse);
              IF BillofLading2.FIND('-') THEN BEGIN
                BillofLading.GET(BillofLading2."No.");
                BillofLading.MARK(TRUE);
                IF SalesShipmentHeader.READPERMISSION THEN BEGIN
                  SalesShipmentHeader2.RESET;
                  SalesShipmentHeader2.SETCURRENTKEY("Bill of Lading No.");
                  SalesShipmentHeader2.SETRANGE("Bill of Lading No.",BillofLading2."No.");
                  SalesShipmentHeader2.SETRANGE("EDI Order",TRUE);
                  IF SalesShipmentHeader2.FIND('-') THEN
                    REPEAT
                      SalesShipmentHeader.GET(SalesShipmentHeader2."No.");
                      SalesShipmentHeader.MARK(TRUE);
                    UNTIL SalesShipmentHeader2.NEXT = 0;
                END;
              END;
            END;
          END;
          IF BOLAvailable THEN BEGIN
            BillofLading.MARKEDONLY(TRUE);
            BillofLading.SETRANGE(Posted,FALSE);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Bill of Lading",Text015,BillofLading.COUNT,
              RepeatCount,DocNoFilterToUse);
            BillofLading.SETRANGE(Posted,TRUE);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Bill of Lading",Text018,BillofLading.COUNT,
              RepeatCount,DocNoFilterToUse);
          END;
          IF SalesShipmentAvailable THEN BEGIN
            SalesShipmentHeader.MARKEDONLY(TRUE);
            TraceInsertIntoDocEntry(
              DocEntryTmp,
              DATABASE::"Sales Shipment Header",Text010,SalesShipmentHeader.COUNT,
              RepeatCount,DocNoFilterToUse);
          END;
        END;
        RepeatCount := RepeatCount + 1;
        IF (RepeatCount > 1) AND (AssocDocFound) THEN
          IF EDIChangedDocument.NEXT = 0 THEN
            AssocDocFound := FALSE;
      UNTIL (RepeatCount = MaxCount) OR (AssocDocFound = FALSE);
    END;

    LOCAL PROCEDURE TraceInsertIntoDocEntry@3(VAR DocEntryTmp@1240030004 : Record 14002374;DocTableID@1240030000 : Integer;DocTableName@1240030001 : Text[100];DocNoOfRecords@1240030002 : Integer;RepeatCount@1240030003 : Integer;DocNoFilterToUse@1240030005 : Code[250]);
    BEGIN
      IF DocNoOfRecords = 0 THEN
        EXIT;
      DocEntryTmp.INIT;
      DocEntryTmp."Entry No." := DocEntryTmp."Entry No." + 1;
      DocEntryTmp."Table ID" := DocTableID;
      DocEntryTmp."Table Name" := DocTableName;
      DocEntryTmp."No. of Records" := DocNoOfRecords;
      IF RepeatCount > 0 THEN
        DocEntryTmp.Type := DocEntryTmp.Type::Associated;
      DocEntryTmp."Internal Doc. No." := DocNoFilterToUse;
      DocEntryTmp.INSERT;
    END;

    PROCEDURE TraceShowRecords@4(DocEntryTmp@1240030015 : Record 14002374);
    VAR
      DocEntryTmp2@1240030000 : TEMPORARY Record 14002374;
      CurrBillOfLading@1240020002 : Record 14000822;
      GenJournalBatch@1240020004 : Record 232;
      Range@1240020000 : ARRAY [10] OF Text[250];
      i@1240020001 : Integer;
    BEGIN
      GetEDISetup;
      DocEntryTmp2 := DocEntryTmp;
      IF DocEntryTmp2.FIND THEN
        DocEntryTmp := DocEntryTmp2;
      WITH DocEntryTmp DO
        CASE "Table ID" OF
          DATABASE::"E.D.I. Receive Document Hdr.":
            BEGIN
              EDIRecDocHdr.SETRANGE("Internal Doc. No.","Internal Doc. No.");
              CASE "Table Name" OF
                Text001:
                  BEGIN
                    IF EDISetup.ListView THEN
                      PAGE.RUN(PAGE::"E.D.I. Receive Document List",EDIRecDocHdr)
                     ELSE
                       PAGE.RUN(PAGE::"E.D.I. Receive Document",EDIRecDocHdr);
                  END;
                Text050:
                  PAGE.RUN(PAGE::"E.D.I. Discount Summaries",EDIRecDocHdr);
              END;
            END;
          DATABASE::Customer:
            IF EDISetup.ListView THEN
              PAGE.RUN(PAGE::"Customer List",Cust)
            ELSE
              PAGE.RUN(PAGE::"Customer Card",Cust);
          DATABASE::"Ship-to Address":
            IF EDISetup.ListView THEN
              PAGE.RUN(PAGE::"Ship-to Address List",ShiptoAddress)
            ELSE
              PAGE.RUN(PAGE::"Ship-to Address",ShiptoAddress);
          DATABASE::"Sales Header":
            BEGIN
              SalesHeader.SETRANGE("EDI Internal Doc. No.","Internal Doc. No.");
              CASE "Table Name" OF
                Text004:
                  BEGIN
                    SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
                    IF EDISetup.ListView THEN
                      PAGE.RUN(PAGE::"Sales Order List",SalesHeader)
                    ELSE
                      PAGE.RUN(PAGE::"Sales Order",SalesHeader);
                  END;
                Text005:
                  BEGIN
                    SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Quote);
                    IF EDISetup.ListView THEN
                      PAGE.RUN(PAGE::"Sales Quotes",SalesHeader)
                    ELSE
                      PAGE.RUN(PAGE::"Sales Quote",SalesHeader);
                  END;
                Text006:
                  BEGIN
                    SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::"Credit Memo");
                    IF EDISetup.ListView THEN
                      PAGE.RUN(PAGE::"Sales Credit Memos",SalesHeader)
                    ELSE
                      PAGE.RUN(PAGE::"Sales Credit Memo",SalesHeader);
                  END;
                Text007:
                  BEGIN
                    SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::"Blanket Order");
                    IF EDISetup.ListView THEN
                      PAGE.RUN(PAGE::"Blanket Sales Orders",SalesHeader)
                    ELSE
                      PAGE.RUN(PAGE::"Blanket Sales Order",SalesHeader);
                  END;
                Text019:
                  BEGIN
                    SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::"Return Order");
                    IF EDISetup.ListView THEN
                      PAGE.RUN(PAGE::"Sales Return Order List",SalesHeader)
                    ELSE
                      PAGE.RUN(PAGE::"Sales Return Order",SalesHeader);
                  END;
                Text049:
                  BEGIN
                    SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Invoice);
                    IF EDISetup.ListView THEN
                      PAGE.RUN(PAGE::"Sales Invoice List",SalesHeader)
                    ELSE
                      PAGE.RUN(PAGE::"Sales Invoice",SalesHeader);
                  END;
              END;
            END;
          DATABASE::"Order Status Header":
            BEGIN
              OrderStatusHeader.SETRANGE("Internal Doc. No.","Internal Doc. No.");
              CASE "Table Name" OF
                Text009:
                  BEGIN
                     OrderStatusHeader.SETRANGE("Document Type",OrderStatusHeader."Document Type"::" ");
                     IF EDISetup.ListView THEN
                       PAGE.RUN(PAGE::"Order Status List",OrderStatusHeader)
                     ELSE
                       PAGE.RUN(PAGE::"Order Status",OrderStatusHeader);
                  END;
                Text031:
                  BEGIN
                     OrderStatusHeader.SETRANGE(
                       "Document Type",OrderStatusHeader."Document Type"::"Order Change Status");
                     IF EDISetup.ListView THEN
                       PAGE.RUN(PAGE::"E.D.I. Order Change Stat. List",OrderStatusHeader)
                     ELSE
                       PAGE.RUN(PAGE::"E.D.I. Order Change Status",OrderStatusHeader);
                  END;
                Text032:
                  BEGIN
                     OrderStatusHeader.SETRANGE(
                       "Document Type",OrderStatusHeader."Document Type"::"Advance P.O. Ack.");
                     IF EDISetup.ListView THEN
                       PAGE.RUN(PAGE::"E.D.I. Advance P.O. Ack. List",OrderStatusHeader)
                     ELSE
                       PAGE.RUN(PAGE::"E.D.I. Advance P.O. Ack.",OrderStatusHeader);
                  END;
              END;
            END;
          DATABASE::"Sales Invoice Header":
            BEGIN
              SalesInvHeader.SETRANGE("EDI Internal Doc. No.","Internal Doc. No.");
              IF EDISetup.ListView THEN
                PAGE.RUN(PAGE::"Posted Sales Invoices",SalesInvHeader)
              ELSE
                PAGE.RUN(PAGE::"Posted Sales Invoice",SalesInvHeader);
            END;
          DATABASE::"Sales Cr.Memo Header":
            BEGIN
              SalesCrMemoHeader.SETRANGE("EDI Internal Doc. No.","Internal Doc. No.");
              IF EDISetup.ListView THEN
                PAGE.RUN(PAGE::"Posted Sales Credit Memos",SalesCrMemoHeader)
              ELSE
                PAGE.RUN(PAGE::"Posted Sales Credit Memo",SalesCrMemoHeader);
            END;
          DATABASE::"Sales Shipment Header":
            BEGIN
              CASE "Table Name" OF
                Text010:
                  BEGIN
                    SalesShipmentHeader.SETRANGE("EDI Internal Doc. No.","Internal Doc. No.");
                    IF NOT SalesShipmentHeader.FIND('-') THEN BEGIN
                      CurrBillOfLading.RESET;
                      CurrBillOfLading.SETRANGE("EDI Internal Doc. No.","Internal Doc. No.");
                      IF CurrBillOfLading.FIND('-') THEN BEGIN
                        SalesShipmentHeader.RESET;
                        SalesShipmentHeader.SETCURRENTKEY("Bill of Lading No.");
                        SalesShipmentHeader.SETRANGE("Bill of Lading No.",CurrBillOfLading."No.");
                        IF SalesShipmentHeader.FIND('-') THEN BEGIN
                          REPEAT
                            SalesShipmentHeader.MARK(TRUE);
                          UNTIL SalesShipmentHeader.NEXT = 0;
                          SalesShipmentHeader.MARKEDONLY(TRUE);
                        END;
                      END;
                    END;
                    IF EDISetup.ListView THEN
                      PAGE.RUN(PAGE::"Posted Sales Shipments",SalesShipmentHeader)
                    ELSE
                      PAGE.RUN(PAGE::"Posted Sales Shipment",SalesShipmentHeader);
                  END;
              END;
            END;
          DATABASE::"Return Receipt Header":
            BEGIN
              ReturnReceiptHdr.SETRANGE("EDI Internal Doc. No.","Internal Doc. No.");
              IF EDISetup.ListView THEN
                PAGE.RUN(PAGE::"Posted Return Receipts",ReturnReceiptHdr)
              ELSE
                PAGE.RUN(PAGE::"Posted Return Receipt",ReturnReceiptHdr);
            END;
          DATABASE::"Purchase Header":
            BEGIN
              PurchHeader.SETRANGE("EDI Internal Doc. No.","Internal Doc. No.");
              CASE "Table Name" OF
                Text012:
                  BEGIN
                    PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::Order);
                    IF EDISetup.ListView THEN
                      PAGE.RUN(PAGE::"Purchase Order List",PurchHeader)
                    ELSE
                      PAGE.RUN(PAGE::"Purchase Order",PurchHeader);
                  END;
                Text020:
                  BEGIN
                    PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::Invoice);
                    IF EDISetup.ListView THEN
                      PAGE.RUN(PAGE::"Purchase Invoices",PurchHeader)
                    ELSE
                      PAGE.RUN(PAGE::"Purchase Invoice",PurchHeader);
                  END;
                Text021:
                  BEGIN
                    PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::Quote);
                    IF EDISetup.ListView THEN
                      PAGE.RUN(PAGE::"Purchase Quotes",PurchHeader)
                    ELSE
                      PAGE.RUN(PAGE::"Purchase Quote",PurchHeader);
                  END;
                Text024:
                  BEGIN
                    PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::"Return Order");
                    IF EDISetup.ListView THEN
                      PAGE.RUN(PAGE::"Purchase Return Order List",PurchHeader)
                    ELSE
                      PAGE.RUN(PAGE::"Purchase Return Order",PurchHeader);
                  END;
                Text025:
                  BEGIN
                    PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::"Credit Memo");
                    IF EDISetup.ListView THEN
                      PAGE.RUN(PAGE::"Purchase Credit Memos",PurchHeader)
                    ELSE
                      PAGE.RUN(PAGE::"Purchase Credit Memo",PurchHeader);
                  END;
               END;
            END;
          DATABASE::"Purch. Inv. Header":
            BEGIN
              PurchInvHeader.SETRANGE("EDI Internal Doc. No.","Internal Doc. No.");
              IF EDISetup.ListView THEN
                PAGE.RUN(PAGE::"Posted Purchase Invoices",PurchInvHeader)
              ELSE
                PAGE.RUN(PAGE::"Posted Purchase Invoice",PurchInvHeader);
            END;
          DATABASE::"Purch. Rcpt. Header":
            BEGIN
              PurchReceiptHeader.SETRANGE("EDI Internal Doc. No.","Internal Doc. No.");
              IF EDISetup.ListView THEN
                PAGE.RUN(PAGE::"Posted Purchase Receipts",PurchReceiptHeader)
              ELSE
                PAGE.RUN(PAGE::"Posted Purchase Receipt",PurchReceiptHeader);
            END;
          DATABASE::"Return Shipment Header":
            BEGIN
              ReturnShipmentHdr.SETRANGE("EDI Internal Doc. No.","Internal Doc. No.");
              IF EDISetup.ListView THEN
                PAGE.RUN(PAGE::"Posted Return Shipments",ReturnShipmentHdr)
              ELSE
                PAGE.RUN(PAGE::"Posted Return Shipment",ReturnShipmentHdr);
            END;
          DATABASE::"Transfer Header":
            BEGIN
              TransferHeader.SETRANGE("EDI Internal Doc. No.","Internal Doc. No.");
              IF EDISetup.ListView THEN
                PAGE.RUN(PAGE::"Transfer Orders",TransferHeader)
              ELSE
                PAGE.RUN(PAGE::"Transfer Order",TransferHeader);
            END;
          DATABASE::"Transfer Receipt Header":
            BEGIN
              TransferReceiptHdr.SETRANGE("EDI Internal Doc. No.","Internal Doc. No.");
              IF EDISetup.ListView THEN
                PAGE.RUN(PAGE::"Posted Transfer Receipts",TransferReceiptHdr)
              ELSE
                PAGE.RUN(PAGE::"Posted Transfer Receipt",TransferReceiptHdr);
            END;
          DATABASE::"Transfer Shipment Header":
            BEGIN
              TransferShipmentHdr.SETRANGE("EDI Internal Doc. No.","Internal Doc. No.");
              IF EDISetup.ListView THEN
                PAGE.RUN(PAGE::"Posted Transfer Shipments",TransferShipmentHdr)
              ELSE
                PAGE.RUN(PAGE::"Posted Transfer Shipment",TransferShipmentHdr);
            END;
          DATABASE::"E.D.I. Inventory Advice Header":
            CASE "Table Name" OF
              Text034:
                BEGIN
                  EDIInventoryAdviceHdr.SETRANGE(Type,EDIInventoryAdviceHdr.Type::Location);
                  EDIInventoryAdviceHdr.SETRANGE(Posted,FALSE);
                  IF EDISetup.ListView THEN
                    PAGE.RUN(PAGE::"E.D.I. Location Invt. Advices",EDIInventoryAdviceHdr)
                  ELSE
                    PAGE.RUN(PAGE::"E.D.I. Location Invt. Advice",EDIInventoryAdviceHdr);
                END;
              Text035:
                BEGIN
                  EDIInventoryAdviceHdr.SETRANGE(Type,EDIInventoryAdviceHdr.Type::Location);
                  EDIInventoryAdviceHdr.SETRANGE(Posted,TRUE);
                  IF EDISetup.ListView THEN
                    PAGE.RUN(PAGE::"E.D.I. Posted LocInvt. Advices",EDIInventoryAdviceHdr)
                  ELSE
                    PAGE.RUN(PAGE::"E.D.I. Posted Loc. Invt. Adv.",EDIInventoryAdviceHdr);
                END;
              Text039:
                BEGIN
                  EDIInventoryAdviceHdr.SETRANGE(Type,EDIInventoryAdviceHdr.Type::Adjustment);
                  EDIInventoryAdviceHdr.SETRANGE(Posted,FALSE);
                  IF EDISetup.ListView THEN
                    PAGE.RUN(PAGE::"E.D.I. Adj. Inventory List",EDIInventoryAdviceHdr)
                  ELSE
                    PAGE.RUN(PAGE::"E.D.I. Adjustment Invt. Advice",EDIInventoryAdviceHdr);
                END;
              Text040:
                BEGIN
                  EDIInventoryAdviceHdr.SETRANGE(Type,EDIInventoryAdviceHdr.Type::Adjustment);
                  EDIInventoryAdviceHdr.SETRANGE(Posted,TRUE);
                  IF EDISetup.ListView THEN
                    PAGE.RUN(PAGE::"E.D.I. Price Catalog List",EDIInventoryAdviceHdr)
                  ELSE
                    PAGE.RUN(PAGE::"E.D.I. Price Catalog",EDIInventoryAdviceHdr);
                END;
            END;
          DATABASE::"Item Journal Line":
            PAGE.RUN(PAGE::"Item Journal Lines",ItemJournalLine);
          DATABASE::"Item Ledger Entry":
            PAGE.RUN(PAGE::"Item Ledger Entries",ItemLedgerEntry);
          DATABASE::"E.D.I. Send Document Hdr.":
            BEGIN
              EDISendDocHdr.SETRANGE("Internal Doc No.","Internal Doc. No.");
              IF EDISetup.ListView THEN
                PAGE.RUN(PAGE::"E.D.I. Send Document List",EDISendDocHdr)
              ELSE
                PAGE.RUN(PAGE::"E.D.I. Send Document",EDISendDocHdr);
            END;
          DATABASE::"Routing Request Header":
            BEGIN
              i := 1;
              RoutingRequestLine.SETRANGE("EDI Internal Doc. No. (Resp.)","Internal Doc. No.");
              IF RoutingRequestLine.FIND('-') THEN BEGIN
                REPEAT
                  IF STRLEN(Range[i]) + STRLEN(RoutingRequestLine."Routing Request No.") > 250 THEN
                    i := i + 1;
                  Range[i] := Range[i] + RoutingRequestLine."Routing Request No." + '|';
                UNTIL RoutingRequestLine.NEXT = 0;
                IF STRLEN(Range[i]) > 0 THEN
                  Range[i] := COPYSTR(Range[i],1,STRLEN(Range[i]) - 1);

                RoutingRequestHeader.RESET;
                RoutingRequestHeader.SETFILTER("No.",Range[1] + Range[2] + Range[3] + Range[4] + Range[5] +
                  Range[6] + Range[7] + Range[8] + Range[9] + Range[10]);
              END;
              IF EDISetup.ListView THEN
                PAGE.RUN(PAGE::"Routing Request List",RoutingRequestHeader)
              ELSE
                PAGE.RUN(PAGE::"Routing Request",RoutingRequestHeader);
            END;
          DATABASE::"Bill of Lading":
            CASE "Table Name" OF
              Text015:
                BEGIN
                  BillofLading.SETRANGE(Posted,FALSE);
                  IF EDISetup.ListView THEN
                    PAGE.RUN(PAGE::"Open Bill of Ladings",BillofLading)
                  ELSE
                    PAGE.RUN(PAGE::"Bill of Lading",BillofLading);
                END;
              Text018:
                BEGIN
                  IF EDISetup.ListView THEN
                    PAGE.RUN(PAGE::"Posted Bill of Ladings",BillofLading)
                  ELSE
                    PAGE.RUN(PAGE::"Posted Bill of Lading",BillofLading);
                END;
            END;
          DATABASE::"Sales Header Archive":
            BEGIN
              SalesHeaderArchive.RESET;
              SalesHeaderArchive.SETCURRENTKEY("EDI Order","EDI Trade Partner","EDI Internal Doc. No.");
              SalesHeaderArchive.SETRANGE("EDI Order",TRUE);
              SalesHeaderArchive.SETFILTER("EDI Internal Doc. No.","Internal Doc. No.");
              CASE "Table Name" OF
                Text051:
                  BEGIN
                    SalesHeaderArchive.SETRANGE("Document Type",SalesHeaderArchive."Document Type"::Order);
                    IF EDISetup.ListView THEN
                      PAGE.RUN(PAGE::"Sales List Archive",SalesHeaderArchive)
                    ELSE
                      PAGE.RUN(PAGE::"Sales Order Archive",SalesHeaderArchive);
                  END;
                Text052:
                  BEGIN
                    SalesHeaderArchive.SETRANGE("Document Type",SalesHeaderArchive."Document Type"::Quote);
                    IF EDISetup.ListView THEN
                      PAGE.RUN(PAGE::"Sales List Archive",SalesHeaderArchive)
                    ELSE
                      PAGE.RUN(PAGE::"Sales Quote Archive",SalesHeaderArchive);
                  END;
              END
            END;
          DATABASE::"Deposit Header":
            BEGIN
              DepositHeader.SETRANGE("EDI Internal Doc. No.","Internal Doc. No.");
              IF EDISetup.ListView THEN
                PAGE.RUN(PAGE::Deposits,DepositHeader)
              ELSE
                PAGE.RUN(PAGE::Deposit,DepositHeader);
            END;
          DATABASE::"Posted Deposit Header":
            BEGIN
              PostedDepositHeader.SETRANGE("EDI Internal Doc. No.","Internal Doc. No.");
              IF EDISetup.ListView THEN
                PAGE.RUN(PAGE::"Posted Deposit List",PostedDepositHeader)
              ELSE
                PAGE.RUN(PAGE::"Posted Deposit",PostedDepositHeader);
            END;
          DATABASE::"Gen. Journal Batch":
            CASE "Table Name" OF
              Text055:
                BEGIN
                  GenJournalLine.RESET;
                  GenJournalLine.SETCURRENTKEY("EDI Internal Doc. No.");
                  GenJournalLine.SETRANGE("EDI Internal Doc. No.",InternalDocNo);
                  GenJournalLine.SETRANGE("Journal Template Name",'CASHRCPT');
                  IF GenJournalLine.FIND('-') THEN BEGIN
                    GenJournalBatch.RESET;
                    GenJournalBatch.SETRANGE("Journal Template Name",'CASHRCPT');
                    GenJournalBatch.SETRANGE(Name,GenJournalLine."Journal Batch Name");
                    IF GenJournalBatch.FIND('-') THEN
                      GenJournalBatch.SETRANGE(Name)
                    ELSE
                      GenJournalBatch.SETRANGE(Name);
                  END;
                  PAGE.RUN(PAGE::"General Journal Batches",GenJournalBatch,GenJournalBatch.Name);
                END;
            END;
          DATABASE::"E.D.I. Payment Remit Advice":
            BEGIN
              EDIPaymentRemitAdvice.SETRANGE("Internal Doc. No.","Internal Doc. No.");
              IF EDISetup.ListView THEN
                PAGE.RUN(PAGE::"E.D.I. Pmt. Remit Advice List",EDIPaymentRemitAdvice)
              ELSE
                PAGE.RUN(PAGE::"E.D.I. Payment Remit Advice",EDIPaymentRemitAdvice);
            END;
          DATABASE::"E.D.I. Posted Pmt.Remit Advice":
            BEGIN
              EDIPostedPaymentRemitAdvice.SETRANGE("Internal Doc. No.","Internal Doc. No.");
              IF EDISetup.ListView THEN
                PAGE.RUN(PAGE::"E.D.I. Posted Pmt RemitAdvices",EDIPostedPaymentRemitAdvice)
              ELSE
                PAGE.RUN(PAGE::"E.D.I. Posted Pmt Remit Advice",EDIPostedPaymentRemitAdvice);
            END;
        END;
    END;

    PROCEDURE GetFileLines@1240030003(VAR EDITemplate@1240030000 : Record 14002350;VAR EDIFileTmp@1240030002 : Record 14002368;VAR Path@1240030001 : Text[150];VAR FileSource@1240030004 : 'Inbox,Inbox Archive,Outbox,Outbox Archive,Common Rec. Dir.,Common Rec. Dir. Archive';VAR FileInterface@1240030003 : 'None,Harbinger,Sterling,GE PC EDI,Qual EDI,Supply Tech,X12 Delimited,EDIFACT Delimited');
    BEGIN
      GetEDISetup;
      EDITemplate.TESTFIELD("Interface File Path");
      EDITemplate."Interface File Path" := DELCHR(EDITemplate."Interface File Path",'>','\');

      EDISetup.TESTFIELD("Common Receive Path");
      EDISetup."Common Receive Path" := DELCHR(EDISetup."Common Receive Path",'>','\');
      CASE FileSource OF
        FileSource::Inbox:
          Path := EDITemplate."Interface File Path" + '\Inbox\';
        FileSource::"Inbox Archive":
          Path := EDITemplate."Interface File Path" + '\Inbox\Archive\';
        FileSource::Outbox:
          Path := EDITemplate."Interface File Path" + '\Outbox\';
        FileSource::"Outbox Archive":
          Path := EDITemplate."Interface File Path" + '\Outbox\Archive\';
        FileSource::"Common Rec. Dir.":
          Path := EDISetup."Common Receive Path" + '\';
        FileSource::"Common Rec. Dir. Archive":
          Path := EDISetup."Common Receive Path" + '\Archive\';
      END;

      FileInterface := EDITemplate."Interface File Type";
      CreateFileLines(Path,EDIFileTmp);
    END;

    PROCEDURE CreateFileLines@1240030002(Directory@1240030000 : Text[150];VAR EDIFileTmp@1240030002 : Record 14002368);
    VAR
      TempPath@1240030001 : Text[150];
      LastDirectory@1240030004 : Text[250];
      FileList@1240020003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IList";
      FileDirectory@1240020002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Directory";
      List@1240020000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      Text001@1240020004 : TextConst 'ENU=%1 directory not found.';
      FileInfo@1240020009 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileInfo";
      LoopCount@1240020005 : Integer;
      Count@1240020006 : Integer;
    BEGIN
      GetEDISetup;
      IF (Directory <> LastDirectory) AND (Directory <> '') THEN
        LastDirectory := Directory;
      CLEAR(FileInfo);
      EDIFileTmp.DELETEALL;

      TempPath := COPYSTR(EDISetup."Common Receive Path",1,STRPOS(EDISetup."Common Receive Path",'\'));
      IF NOT FileDirectory.Exists(TempPath) THEN
        ERROR(Text001,TempPath);

      Count := 0;
      FileList := FileDirectory.EnumerateFiles(LastDirectory);
      List := List.List;
      List.AddRange(FileList);
      IF List.Count > 0 THEN BEGIN
        LoopCount := List.Count;
        REPEAT
          FileInfo := FileInfo.FileInfo(FORMAT(List.Item(Count)));
          EDIFileTmp.INIT;
          EDIFileTmp.Path := FORMAT(FileInfo.Directory) + '\';
          EDIFileTmp."Is a File" := TRUE;
          EDIFileTmp.Name := FORMAT(FileInfo.Name);
          EVALUATE(EDIFileTmp.Size,FORMAT(FileInfo.Length));
          EDIFileTmp.Time := DT2TIME(FileInfo.CreationTime);
          EDIFileTmp.Date := DT2DATE(FileInfo.CreationTime);
          EDIFileTmp.INSERT;
          Count += 1;
        UNTIL Count = LoopCount;
      END;
    END;

    PROCEDURE DeleteFileLines@1240030007(VAR EDITemplate@1240030004 : Record 14002350;VAR EDIFileTmp@1240030003 : Record 14002368;VAR Path@1240030002 : Text[150];VAR FileSource@1240030001 : 'Inbox,Inbox Archive,Outbox,Outbox Archive,Common Rec. Dir.,Common Rec. Dir. Archive';VAR FileInterface@1240030000 : 'None,Harbinger,Sterling,GE PC EDI,Qual EDI,Supply Tech,X12 Delimited,EDIFACT Delimited');
    BEGIN
      CLEAR(EDITemplate);
      EDIFileTmp.DELETEALL;
      Path := '';
      FileSource := FileSource::Inbox;
      FileInterface := FileInterface::None;
    END;

    PROCEDURE ViewFile@1240030001(Path@1240030001 : Text[100];Name@1240030002 : Text[100]);
    BEGIN
      GetEDISetup;
      ViewTextEDIDocument(Path,Name)
    END;

    PROCEDURE ImportAllFiles@6(VAR EDIFileTmp@1240030000 : Record 14002368);
    VAR
      EDIImport@1240030001 : Codeunit 14002354;
      EDIFunctAckSendAll@1240030002 : Codeunit 14002366;
    BEGIN
      EDIFileTmp.RESET;
      IF EDIFileTmp.FIND('-') THEN
        REPEAT
          CLEAR(EDIImport);
          EDIImport.ImportByFile(EDIFileTmp);
        UNTIL EDIFileTmp.NEXT = 0;

      COMMIT;

      GetEDISetup;
      IF EDISetup."Auto Export Send Doc." THEN
        EDIFunctAckSendAll.RUN;

      EDIFileTmp.DELETEALL;
    END;

    PROCEDURE ImportFile@5(VAR EDIFileTmp@1240030002 : Record 14002368);
    VAR
      EDIImport@1240030001 : Codeunit 14002354;
      EDIFunctAckSendAll@1240030000 : Codeunit 14002366;
    BEGIN
      CLEAR(EDIImport);
      EDIImport.ImportByFile(EDIFileTmp);
      EDIFileTmp.DELETE;

      COMMIT;

      IF EDISetup."Auto Export Send Doc." THEN
        EDIFunctAckSendAll.RUN;
    END;

    PROCEDURE ImportComRecFiles@1240030004(VAR EDIFileTmp@1240030000 : Record 14002368);
    VAR
      EDIFileSplit@1240030001 : Codeunit 14002353;
    BEGIN
      CLEAR(EDIFileSplit);
      EDIFileSplit.RUN;
      EDIFileTmp.DELETEALL;
    END;

    PROCEDURE ArchiveFile@1240030000(VAR EDIFileTmp@1240030000 : Record 14002368);
    VAR
      FromName@1240030003 : Text[150];
      ToName@1240030002 : Text[150];
    BEGIN
      FromName := EDIFileTmp.Path + EDIFileTmp.Name;
      IF NOT CONFIRM(Text016,FALSE,FromName) THEN
        EXIT;
      ToName := EDIFileTmp.Path + '\ARCHIVE\' + EDIFileTmp.Name;
      FILE.COPY(FromName,ToName);
      IF FILE.EXISTS(ToName) THEN
        FILE.ERASE(FromName);
      EDIFileTmp.DELETE;
    END;

    PROCEDURE RestoreFile@7(VAR EDIFileTmp@1240030000 : Record 14002368);
    VAR
      FromName@1240030003 : Text[150];
      ToName@1240030002 : Text[150];
    BEGIN
      FromName := EDIFileTmp.Path + EDIFileTmp.Name;
      IF NOT CONFIRM(Text017,FALSE,FromName) THEN
        EXIT;
      ToName := DELSTR(FromName,STRPOS(FromName,'\ARCHIVE\'),8);
      FILE.COPY(FromName,ToName);
      EDIFileTmp.DELETE;
    END;

    PROCEDURE CheckTemplate@1240030008(EDITemplate@1240030000 : Record 14002350;CurrentEDITemplateName@1240030001 : Code[10]);
    BEGIN
      EDITemplate.GET(CurrentEDITemplateName);
    END;

    PROCEDURE SetTemplate@1240030005(VAR EDITemplate@1240030000 : Record 14002350;VAR CurrentEDITemplateName@1240030002 : Code[10]);
    BEGIN
      IF CurrentEDITemplateName = '' THEN BEGIN
        EDITemplate.RESET;
        EDITemplate.SETFILTER(EDITemplate."Interface File Type",'%1|%2|%3|%4',
        EDITemplate."Interface File Type"::"X12 Delimited",
        EDITemplate."Interface File Type"::"EDIFACT Delimited",
        EDITemplate."Interface File Type"::cXML,
        EDITemplate."Interface File Type"::XML);
        IF EDITemplate.FIND('-') THEN
          ;
      END ELSE
        IF EDITemplate.GET(CurrentEDITemplateName) THEN
          ;

      CurrentEDITemplateName := EDITemplate.Code;
    END;

    PROCEDURE LookUpTemplate@1240030006(VAR EDITemplate@1240030000 : Record 14002350;VAR EDIFileTmp@1240030001 : Record 14002368;VAR CurrentEDITemplateName@1240030002 : Code[10];VAR FilePath@1240030004 : Text[100];VAR FileSource@1240030003 : 'Inbox,Inbox Archive,Outbox,Outbox Archive,Common Rec. Dir.,Common Rec. Dir. Archive';VAR FileInterface@1240030005 : 'None,Harbinger,Sterling,GE PC EDI,Qual EDI,Supply Tech,X12 Delimited,EDIFACT Delimited');
    BEGIN
      EDITemplate.SETFILTER(EDITemplate."Interface File Type",'%1|%2|%3|%4',
        EDITemplate."Interface File Type"::"X12 Delimited",
        EDITemplate."Interface File Type"::"EDIFACT Delimited",
        EDITemplate."Interface File Type"::cXML,
        EDITemplate."Interface File Type"::XML);

      IF PAGE.RUNMODAL(PAGE::"E.D.I. Template List",EDITemplate) = ACTION::LookupOK THEN BEGIN
        CurrentEDITemplateName := EDITemplate.Code;
        FileSource := FileSource::Inbox;
        IF CurrentEDITemplateName = '' THEN
          DeleteFileLines(EDITemplate,EDIFileTmp,FilePath,FileSource,FileInterface)
        ELSE
          GetFileLines(EDITemplate,EDIFileTmp,FilePath,FileSource,FileInterface);
      END;
    END;

    PROCEDURE CreateLogEntry@1240020000(LogDescription@1240020000 : Text[250];VAR LogEntryNo@1240020001 : Integer;FileInfo@1240020008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileInfo";Automated@1240020004 : Boolean;EDIDocument@1240020003 : Record 14002353);
    VAR
      ImportFilePath@1240020002 : Text[250];
      FileName@1240020007 : Text[250];
      FileTime@1240020005 : Time;
      FileDate@1240020006 : Date;
      i@1240020009 : Integer;
    BEGIN
      IF ISNULL(FileInfo) THEN BEGIN
        ImportFilePath := '';
        FileName := '';
        FileTime := 0T;
        FileDate := 0D;
      END ELSE BEGIN
        ImportFilePath := FORMAT(FileInfo.Directory);
        FileName := FORMAT(FileInfo.Name);
        FileTime := DT2TIME(FileInfo.CreationTime);
        FileDate := DT2DATE(FileInfo.CreationTime);
      END;

      EDILog.LOCKTABLE;
      EDILog.RESET;
      EDILog.SETRANGE(Process,LogDescription);
      EDILog.SETRANGE("File Name",FileName);
      EDILog.SETRANGE("File Path",(ImportFilePath  + '\'));
      EDILog.SETRANGE("EDI Template Code",EDIDocument."EDI Template Code");
      EDILog.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
      EDILog.SETRANGE("Navision Document",EDIDocument."Navision Document");
      EDILog.SETRANGE("Trade Partner",EDIDocument."Trade Partner No.");
      EDILog.SETRANGE(Error,TRUE);
      IF EDILog.FIND('-') THEN BEGIN
        LogEntryNo := EDILog."Entry No.";
        EDILog.Date := TODAY;
        EDILog."Start Time" := TIME;
        EDILog.MODIFY;
      END ELSE BEGIN
        EDILog.RESET;
        IF EDILog.FIND('+') THEN
          LogEntryNo := EDILog."Entry No." + 1
        ELSE
          LogEntryNo := 1;

        EDILog.INIT;
        EDILog."Entry No." := LogEntryNo;
        EDILog."Trade Partner" := EDIDocument."Trade Partner No.";
        EDILog.Date := TODAY;
        EDILog."Start Time" := TIME;
        EDILog.Process := LogDescription;
        EDILog."File Time" := FileTime;
        EDILog."File Date" := FileDate;
        EDILog.Error := TRUE;
        EDILog.UserID := USERID;
        IF ImportFilePath <> ' ' THEN
          EDILog."File Path" := ImportFilePath + '\';
        IF FileName <> ' ' THEN
          EDILog."File Name" := FileName;
        EDILog.Job := Automated;
        EDILog."EDI Template Code" := EDIDocument."EDI Template Code";
        EDILog."EDI Document No." := EDIDocument."EDI Document No.";
        EDILog."Navision Document" := EDIDocument."Navision Document";
        IF EDILog.INSERT THEN
          EXIT
        ELSE BEGIN
          i := 0;
          WHILE i < 20 DO BEGIN
            LogEntryNo := LogEntryNo + 1;
            EDILog."Entry No." := LogEntryNo;
            IF EDILog.INSERT THEN
              EXIT;
            i := i + 1;
          END;
        END;
      END;
    END;

    PROCEDURE CreateLogEntryByEDIDocument@1240020003(LogDescription@1240020000 : Text[250];VAR LogEntryNo@1240020001 : Integer;EDIDocument@1240020002 : Record 14002353;Automated@1240020004 : Boolean;EDITemplate@1240020003 : Code[10]);
    VAR
      InFile@1240020010 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      FileName@1240020005 : Text[250];
      FilePath@1240020007 : Text[250];
      InsertPos@1240020006 : Integer;
      FileTime@1240020012 : Time;
      FileDate@1240020011 : Date;
      FileDateTime@1240020013 : DateTime;
    BEGIN
      InsertPos := 0;
      FileName := '';
      FilePath := '';
      WHILE STRPOS(COPYSTR(EDIDocument."Interface File",InsertPos + 1),'\') > 0 DO
        InsertPos := InsertPos + STRPOS(COPYSTR(EDIDocument."Interface File",InsertPos + 1),'\');
      FileName := COPYSTR(EDIDocument."Interface File",InsertPos + 1);
      FilePath := COPYSTR(EDIDocument."Interface File",1,InsertPos);
      IF ByDocFileName <> '' THEN
        FileName := ByDocFileName;


      IF InFile.Exists(FilePath + FileName) THEN BEGIN
        FileDateTime := InFile.GetCreationTime(FilePath + FileName);
        FileTime := DT2TIME(FileDateTime);
        FileDate := DT2DATE(FileDateTime);
      END ELSE BEGIN
        FileTime := 0T;
        FileDate := 0D;
      END;

      EDILog.LOCKTABLE;
      EDILog.RESET;
      EDILog.SETRANGE(Process,LogDescription);
      EDILog.SETRANGE("File Name",FileName);
      EDILog.SETRANGE("File Path",FilePath);
      EDILog.SETRANGE(Error,TRUE);
      IF EDILog.FIND('-') THEN BEGIN
        LogEntryNo := EDILog."Entry No.";
        EDILog.Date := TODAY;
        EDILog."Start Time" := TIME;
        EDILog.MODIFY;
      END ELSE BEGIN
        EDILog.RESET;
        IF EDILog.FIND('+') THEN
          LogEntryNo := EDILog."Entry No." + 1
        ELSE
          LogEntryNo := 1;

        EDILog.INIT;
        EDILog."Entry No." := LogEntryNo;
        EDILog.Date := TODAY;
        EDILog."Start Time" := TIME;
        EDILog.Process := LogDescription;
        EDILog."File Time" := FileTime;
        EDILog."File Date" := FileDate;
        EDILog.Error := TRUE;
        EDILog.UserID := USERID;
        EDILog."File Name" := FileName;
        EDILog."File Path" := FilePath;
        EDILog.Job := Automated;
        EDILog."EDI Document No."  := EDIDocument."EDI Document No.";
        EDILog."Navision Document" := EDIDocument."Navision Document";
        EDILog."Trade Partner" := EDIDocument."Trade Partner No.";
        EDILog."EDI Template Code" := EDITemplate;
        EDILog.INSERT;
      END;
    END;

    PROCEDURE CloseLogEntry@1240020004(LogEntryNo@1240020000 : Integer;ErrorMessage@1240020002 : Text[250]);
    VAR
      EDILog@1240020001 : Record 14050302;
    BEGIN
      IF EDILog.GET(LogEntryNo) THEN BEGIN
        EDILog.LOCKTABLE;
        EDILog."Error Text Message" := ErrorMessage;
        EDILog."End Time" := TIME;
        EDILog.MODIFY;
      END;
    END;

    PROCEDURE DeleteLogEntry@1240020002(LogEntryNo@1240020000 : Integer);
    VAR
      EDILog@1240020001 : Record 14050302;
    BEGIN
      IF EDILog.GET(LogEntryNo) THEN BEGIN
        EDILog.LOCKTABLE;
        EDILog.DELETE;
      END;
    END;

    PROCEDURE CreateOutboundLogEntry@1240020001(LogDescription@1240020000 : Text[250];VAR LogEntryNo@1240020001 : Integer;DocumentType@1240020004 : Code[40];DocumentNo@1240020002 : Code[20];TradePartner@1240020003 : Code[20];NavisionDocument@1240020006 : Code[10];EDIDocumentNo@1240020005 : Code[30]);
    VAR
      EDIOutboundLog@1240020007 : Record 14050303;
      i@1240020008 : Integer;
    BEGIN
      EDIOutboundLog.LOCKTABLE;
      EDIOutboundLog.RESET;
      EDIOutboundLog.SETCURRENTKEY(Error,"Trade Partner","Document Type","Document No.");
      EDIOutboundLog.SETRANGE(Error,TRUE);
      EDIOutboundLog.SETRANGE("Trade Partner",TradePartner);
      EDIOutboundLog.SETRANGE("Document Type",DocumentType);
      EDIOutboundLog.SETRANGE("Document No.",DocumentNo);
      EDIOutboundLog."Navision Document" := NavisionDocument;
      EDIOutboundLog."EDI Document No." := EDIDocumentNo;
      EDIOutboundLog.SETRANGE(Process,LogDescription);
      IF EDIOutboundLog.FIND('-') THEN BEGIN
        LogEntryNo := EDIOutboundLog."Entry No.";
        EDIOutboundLog.Date := TODAY;
        EDIOutboundLog."Start Time" := TIME;
        EDIOutboundLog.MODIFY;
      END ELSE BEGIN
        EDIOutboundLog.RESET;
        IF EDIOutboundLog.FIND('+') THEN
          LogEntryNo := EDIOutboundLog."Entry No." + 1
        ELSE
          LogEntryNo := 1;

        EDIOutboundLog.INIT;
        EDIOutboundLog."Entry No." := LogEntryNo;
        EDIOutboundLog."Trade Partner" := TradePartner;
        EDIOutboundLog."Navision Document" := NavisionDocument;
        EDIOutboundLog."EDI Document No." := EDIDocumentNo;
        EDIOutboundLog."Start Time" := TIME;
        EDIOutboundLog.Process := LogDescription;
        EDIOutboundLog."Document Type" := DocumentType;
        EDIOutboundLog."Document No." := DocumentNo;
        EDIOutboundLog.Error := TRUE;
        EDIOutboundLog.UserID := USERID;
        EDIOutboundLog.Date := TODAY;
        EDIOutboundLog."Original Date" := TODAY;//TPZ2324
        IF EDIOutboundLog.INSERT THEN
          EXIT
        ELSE BEGIN
          i := 0;
          WHILE i < 20 DO BEGIN
            LogEntryNo := LogEntryNo + 1;
            EDIOutboundLog."Entry No." := LogEntryNo;
            IF EDIOutboundLog.INSERT THEN
              EXIT;
            i := i + 1;
          END;
        END;
      END;
    END;

    PROCEDURE CloseOutboundLogEntry@1240020007(LogEntryNo@1240020000 : Integer;ErrorMessage@1240020002 : Text[250]);
    VAR
      EDIOutboundLog@1240020001 : Record 14050303;
    BEGIN
      IF EDIOutboundLog.GET(LogEntryNo) THEN BEGIN
        EDIOutboundLog.LOCKTABLE;
        EDIOutboundLog."Error Text Message" := ErrorMessage;
        EDIOutboundLog."End Time" := TIME;
        EDIOutboundLog.MODIFY;
      END;
    END;

    PROCEDURE DeleteOutboundLogEntry@1240020005(LogEntryNo@1240020000 : Integer);
    VAR
      EDIOutboundLog@1240020001 : Record 14050303;
    BEGIN
      IF EDIOutboundLog.GET(LogEntryNo) THEN BEGIN
        EDIOutboundLog.LOCKTABLE;
        EDIOutboundLog.DELETE;
      END;
    END;

    PROCEDURE ViewTextEDIDocument@1240021006(Path@1240020000 : Text[100];Name@1240020001 : Text[100]);
    VAR
      FileName@1240020002 : Text[250];
      ToFolder@1240020003 : Text[250];
      ToFilter@1240020004 : Text[250];
      ToFile@1240020005 : Text[250];
    BEGIN
      ToFolder := 'C:\';
      ToFilter := 'Text file(*.txt)|*.edi';
      FileName := Path + Name;
      ToFile := FileName;
      DOWNLOAD(FileName,'Open file',ToFolder,ToFilter,ToFile);
    END;

    PROCEDURE DeleteOrphanedLogEntries@1240020006();
    VAR
      EDILog@1240020000 : Record 14050302;
      EDILog2@1240020002 : Record 14050302;
      InFile@1240020007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      Directory@1240020006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Directory";
      FileName@1240020011 : Text[250];
    BEGIN
      EDILog.RESET;
      EDILog.SETFILTER("File Path",'<>%1','');
      EDILog.SETFILTER(Process,'<>%1','');
      IF EDILog.FIND('-') THEN
        REPEAT
          FileName := EDILog."File Path" + EDILog."File Name";
          IF NOT InFile.Exists(FileName) THEN BEGIN
            EDILog2.GET(EDILog."Entry No.");
            EDILog2.DELETE;
          END;
        UNTIL EDILog.NEXT = 0;

      EDILog.RESET;
      EDILog.SETFILTER("File Path",'<>%1','');
      EDILog.SETRANGE(Process,'');
      IF EDILog.FIND('-') THEN
        REPEAT
          IF Directory.Exists(EDILog."File Path") THEN BEGIN
            EDILog2.GET(EDILog."Entry No.");
            EDILog2.DELETE;
          END;
        UNTIL EDILog.NEXT = 0;

      EDILog.RESET;
      EDILog.SETFILTER("File Path",'');
      EDILog.SETRANGE(Process,'Template Verification');
      IF EDILog.FIND('-') THEN
        REPEAT
          EDILog2.GET(EDILog."Entry No.");
          EDILog2.DELETE;
        UNTIL EDILog.NEXT = 0;
    END;

    PROCEDURE ByDocumentFileName@1240020009(FileInfo@1240020001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileInfo");
    BEGIN
      ByDocFileName := FORMAT(FileInfo.Name);
    END;

    BEGIN
    {
      TPZ2324 UCHOUHAN 05-29-2018
        - Add Code to Update "Original Field" in Outbound Error log.
    }
    END.
  }
}

