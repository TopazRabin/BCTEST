OBJECT Codeunit 14000580 Promotion
{
  OBJECT-PROPERTIES
  {
    Date=03/01/20;
    Time=12:00:00 PM;
    Version List=UBP3.02;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ForecastAdj@1240030003 : Record 14002707;
      ForInvPeriod@1240030000 : Record 14000552;
      InvMgtSetup@1240030019 : Record 14000551;
      ItemUsageAdj@1240030017 : Record 14000558;
      LocInvPeriod@1240030016 : Record 14000553;
      ProcUnit@1240030018 : Record 14000555;
      PromotionHdr@1240030001 : Record 14000589;
      PromotionLine@1240030002 : Record 14000590;
      Text001@1240030004 : TextConst 'ENU=Starting Date %1 must not be greater than Ending Date %2.';
      PromotionLineTmp@1240030007 : TEMPORARY Record 14000590;
      PromotionLineTmp2@1240030010 : TEMPORARY Record 14000590;
      ForecastSummaryEntry@1240030020 : Record 14000587;
      StartingDateArray@1240030005 : ARRAY [208] OF Date;
      EndingDateArray@1240030009 : ARRAY [208] OF Date;
      i@1240030006 : Integer;
      LineNo@1240030008 : Integer;
      PrevLocationCode@1240030011 : Code[10];
      PrevItemNo@1240030012 : Code[50];
      PrevVariantCode@1240030013 : Code[10];
      EntryNo@1240030014 : Integer;
      ForecastAdjQty@1240030015 : Decimal;
      Text002@1240030021 : TextConst 'ENU=Location %1 does not have a closed period.';
      Text003@1240030022 : TextConst 'ENU=Location';
      Text004@1240030023 : TextConst 'ENU=Item';

    PROCEDURE FillInDates@1240030000(CurrPromotionHdr@1240030000 : Record 14000589);
    BEGIN
      CurrPromotionHdr.TESTFIELD("Starting Date");
      CurrPromotionHdr.TESTFIELD("Ending Date");
      IF CurrPromotionHdr."Starting Date" > CurrPromotionHdr."Ending Date" THEN
        ERROR(Text001,CurrPromotionHdr."Starting Date",CurrPromotionHdr."Ending Date");
      CLEAR(StartingDateArray);
      CLEAR(EndingDateArray);
      ForInvPeriod.RESET;
      ForInvPeriod.SETRANGE(Type,ForInvPeriod.Type::Calculate);
      ForInvPeriod.SETFILTER(
        "Starting Date",'%1..%2',CurrPromotionHdr."Starting Date",CurrPromotionHdr."Ending Date");
      i := 0;
      IF ForInvPeriod.FIND('-') THEN
        REPEAT
          i :=  i + 1;
          StartingDateArray[i] := ForInvPeriod."Starting Date";
          EndingDateArray[i] := ForInvPeriod."Ending Date";
        UNTIL ForInvPeriod.NEXT = 0;

      PromotionLineTmp.RESET;
      PromotionLineTmp.DELETEALL;
      PromotionLineTmp2.RESET;
      PromotionLineTmp2.DELETEALL;

      PromotionLine.RESET;
      PromotionLine.SETRANGE("Promotion Code",CurrPromotionHdr.Code);
      IF PromotionLine.FIND('-') THEN BEGIN
        REPEAT
          IF (PromotionLine."Starting Date" = 0D) OR
             ((PromotionLine."Starting Date" >= CurrPromotionHdr."Starting Date") AND
              (PromotionLine."Starting Date" <= CurrPromotionHdr."Ending Date"))
          THEN BEGIN
            PromotionLineTmp.COPY(PromotionLine);
            PromotionLineTmp.INSERT;
            PromotionLineTmp2.COPY(PromotionLine);
            PromotionLineTmp2.INSERT;
          END;
        UNTIL PromotionLine.NEXT = 0;

        PromotionLine.DELETEALL;

        LineNo := 0;
        PromotionLineTmp2.INIT;
        PromotionLineTmp2.SETCURRENTKEY(
          "Location Code","Item No.","Variant Code","Starting Date");
        PromotionLineTmp.SETCURRENTKEY(
          "Location Code","Item No.","Variant Code","Starting Date");
        PromotionLineTmp.FIND('-');
        REPEAT
          IF (PromotionLineTmp."Location Code" <> PrevLocationCode) OR
             (PromotionLineTmp."Item No." <> PrevItemNo) OR
             (PromotionLineTmp."Variant Code" <> PrevVariantCode)
          THEN BEGIN
            PrevLocationCode := PromotionLineTmp."Location Code";
            PrevItemNo := PromotionLineTmp."Item No.";
            PrevVariantCode := PromotionLineTmp."Variant Code";
            PromotionLineTmp2.RESET;
            PromotionLineTmp2.SETCURRENTKEY(
              "Location Code","Item No.","Variant Code","Starting Date");
            PromotionLineTmp2.SETRANGE("Location Code",PromotionLineTmp."Location Code");
            PromotionLineTmp2.SETRANGE("Item No.",PromotionLineTmp."Item No.");
            PromotionLineTmp2.SETRANGE("Variant Code",PromotionLineTmp."Variant Code");
            PromotionLineTmp2.FIND('-');
            IF PromotionLineTmp2."Starting Date" = 0D THEN BEGIN
              i := 0;
              REPEAT
                i := i + 1;
                PromotionLine.COPY(PromotionLineTmp);
                PromotionLine."Starting Date" := StartingDateArray[i];
                PromotionLine."Ending Date" := EndingDateArray[i];
                LineNo := LineNo + 10000;
                PromotionLine."Line No." := LineNo;
                PromotionLine.INSERT;
              UNTIL EndingDateArray[i] = CurrPromotionHdr."Ending Date";
            END ELSE BEGIN
              i := 0;
              REPEAT
                i := i + 1;
                PromotionLineTmp2.SETRANGE("Starting Date",StartingDateArray[i]);
                IF PromotionLineTmp2.FIND('-') THEN BEGIN
                  PromotionLine.COPY(PromotionLineTmp2);
                  LineNo := LineNo + 10000;
                  PromotionLine."Line No." := LineNo;
                  PromotionLine.INSERT;
                END ELSE BEGIN
                  PromotionLine.INIT;
                  PromotionLine."Promotion Code" := PromotionLineTmp."Promotion Code";
                  LineNo := LineNo + 10000;
                  PromotionLine."Line No." := LineNo;
                  PromotionLine."Location Code" := PromotionLineTmp."Location Code";
                  PromotionLine."Item No." := PromotionLineTmp."Item No.";
                  PromotionLine."Variant Code" := PromotionLineTmp."Variant Code";
                  PromotionLine."Starting Date" := StartingDateArray[i];
                  PromotionLine."Ending Date" := EndingDateArray[i];
                  PromotionLine.INSERT;
                END;
              UNTIL EndingDateArray[i] = CurrPromotionHdr."Ending Date";
            END;
          END;
        UNTIL PromotionLineTmp.NEXT = 0;
      END;
    END;

    PROCEDURE ReleasePromotion@1240030001(CurrPromotionHdr@1240030000 : Record 14000589);
    VAR
      CreateProcUnit@1240020000 : Codeunit 14000575;
    BEGIN
      CurrPromotionHdr.TESTFIELD(Released,FALSE);

      ForecastAdj.LOCKTABLE;
      ForecastAdj.RESET;
      IF ForecastAdj.FIND('+') THEN
        EntryNo := ForecastAdj."Entry No."
      ELSE
        EntryNo := 0;
      ForecastAdj.RESET;
      ForecastAdj.SETCURRENTKEY(
        "Item No.","Variant Code","Location Code","Starting Date","Promotion Code");

      PromotionLine.RESET;
      PromotionLine.SETRANGE("Promotion Code",CurrPromotionHdr.Code);
      IF PromotionLine.FIND('-') THEN
        REPEAT
          IF NOT ProcUnit.GET(PromotionLine."Location Code", PromotionLine."Item No.", PromotionLine."Variant Code") THEN BEGIN
            ProcUnit.INIT;
            ProcUnit."Location Code" := PromotionLine."Location Code";
            ProcUnit."Item No." := PromotionLine."Item No.";
            ProcUnit."Variant Code" := PromotionLine."Variant Code";
            ProcUnit.INSERT(TRUE);
            CreateProcUnit.CheckReplPath(ProcUnit);
          END;
          IF PromotionLine."Location Code" <> LocInvPeriod."Location Code" THEN BEGIN
            LocInvPeriod.SETRANGE("Location Code",PromotionLine."Location Code");
            LocInvPeriod.SETRANGE("Period End Closed",TRUE);
            LocInvPeriod.FIND('+');
          END;
          IF PromotionLine."Starting Date" > LocInvPeriod."Starting Date" THEN BEGIN
            ForecastAdj.SETRANGE("Item No.",PromotionLine."Item No.");
            ForecastAdj.SETRANGE("Variant Code",PromotionLine."Variant Code");
            ForecastAdj.SETRANGE("Location Code",PromotionLine."Location Code");
            ForecastAdj.SETRANGE("Starting Date",PromotionLine."Starting Date");
            ForecastAdj.SETRANGE("Promotion Code",PromotionLine."Promotion Code");
            ForecastAdj.CALCSUMS(Quantity);
            ForecastAdjQty := ForecastAdj.Quantity;
            IF PromotionLine."Promotion Quantity" <> ForecastAdjQty THEN BEGIN
              ForecastAdj.INIT;
              EntryNo := EntryNo + 1;
              ForecastAdj."Entry No." := EntryNo;
              ForecastAdj."Location Code" := PromotionLine."Location Code";
              ForecastAdj."Item No." := PromotionLine."Item No.";
              ForecastAdj."Variant Code" := PromotionLine."Variant Code";
              ForecastAdj."Starting Date" := PromotionLine."Starting Date";
              ForecastAdj.Quantity := PromotionLine."Promotion Quantity" - ForecastAdjQty;
              ForecastAdj."User ID" := USERID;
              ForecastAdj."Date Adjusted" := TODAY;
              ForecastAdj."Time Adjusted" := TIME;
              ForecastAdj."Promotion Code" := PromotionLine."Promotion Code";
              IF ForecastAdj.Quantity <> 0 THEN BEGIN
                ForecastAdj.INSERT;
                IF (ForecastSummaryEntry."Location Code" <> ForecastAdj."Location Code") OR
                   (ForecastSummaryEntry."Item No." <> ForecastAdj."Item No.") OR
                   (ForecastSummaryEntry."Variant Code" <> ForecastAdj."Variant Code") THEN BEGIN
                  ForecastSummaryEntry.RESET;
                  ForecastSummaryEntry.SETCURRENTKEY("Location Code","Item No.","Variant Code");
                  ForecastSummaryEntry.SETRANGE("Location Code",ForecastAdj."Location Code");
                  ForecastSummaryEntry.SETRANGE("Item No.",ForecastAdj."Item No.");
                  ForecastSummaryEntry.SETRANGE("Variant Code",ForecastAdj."Variant Code");
                  ForecastSummaryEntry.SETRANGE("Starting Date",ForecastAdj."Starting Date");
                  IF ForecastSummaryEntry.FIND('-') THEN
                    REPEAT
                      IF NOT ForecastSummaryEntry."Review Pending" THEN BEGIN
                        ForecastSummaryEntry."Review Pending" := TRUE;
                        ForecastSummaryEntry.MODIFY;
                      END;
                    UNTIL ForecastSummaryEntry.NEXT = 0;
                END;
              END;
            END;
          END;
        UNTIL PromotionLine.NEXT = 0;

      PromotionHdr.GET(CurrPromotionHdr.Code);
      PromotionHdr.Released := TRUE;
      PromotionHdr."Date Changed" := TODAY;
      PromotionHdr."Changed By" := USERID;
      PromotionHdr.MODIFY(FALSE);
    END;

    PROCEDURE ReopenPromotion@1240030002(CurrPromotionHdr@1240030000 : Record 14000589);
    BEGIN
      CurrPromotionHdr.TESTFIELD(Released,TRUE);

      PromotionHdr.GET(CurrPromotionHdr.Code);
      PromotionHdr.Released := FALSE;
      PromotionHdr.MODIFY;
    END;

    PROCEDURE AdjustHistory@1240030003(CurrPromotionHdr@1240030000 : Record 14000589);
    BEGIN
      CurrPromotionHdr.TESTFIELD(Released);
      InvMgtSetup.GET;
      PromotionLine.RESET;
      PromotionLine.SETRANGE("Promotion Code",CurrPromotionHdr.Code);
      IF PromotionLine.FINDSET THEN
        REPEAT
          LocInvPeriod.SETRANGE("Location Code",PromotionLine."Location Code");
          LocInvPeriod.SETRANGE("Period End Closed",TRUE);
          IF LocInvPeriod.FINDLAST THEN BEGIN
            IF PromotionLine."Starting Date" <= LocInvPeriod."Ending Date" THEN BEGIN
              ItemUsageAdj.RESET;
              ItemUsageAdj.SETRANGE("Location Code",PromotionLine."Location Code");
              ItemUsageAdj.SETRANGE("Item No.",PromotionLine."Item No.");
              ItemUsageAdj.SETRANGE("Variant Code",PromotionLine."Variant Code");
              ItemUsageAdj.SETRANGE("Starting Date",PromotionLine."Starting Date");
              IF ItemUsageAdj.FINDLAST THEN
                LineNo := ItemUsageAdj."Line No."
              ELSE
                LineNo := 0;
              ItemUsageAdj.SETRANGE("Promotion Code",PromotionLine."Promotion Code");
              IF ItemUsageAdj.FIND('-') THEN BEGIN
                IF ItemUsageAdj."Adjustment Quantity" <> PromotionLine."Usage Adjust Quantity" * -1 THEN BEGIN
                  ItemUsageAdj."Adjustment Quantity" := (PromotionLine."Usage Adjust Quantity" * -1);
                  ItemUsageAdj.MODIFY;
                  PromotionLine."Historical Data Adjusted" := TRUE;
                  PromotionLine.MODIFY;
                  ProcUnit.GET(
                    ItemUsageAdj."Location Code",ItemUsageAdj."Item No.",ItemUsageAdj."Variant Code");
                  ProcUnit."Change Reforecast Required" := TRUE;
                  IF InvMgtSetup."Roll Up Via Repl. Path" THEN
                    ProcUnit."Reforecast Item" := TRUE;
                  ProcUnit.MODIFY;
                END;
              END ELSE BEGIN
                ItemUsageAdj.INIT;
                ItemUsageAdj."Location Code" := PromotionLine."Location Code";
                ItemUsageAdj."Item No." := PromotionLine."Item No.";
                ItemUsageAdj."Variant Code" := PromotionLine."Variant Code";
                ItemUsageAdj."Starting Date" := PromotionLine."Starting Date";
                ItemUsageAdj."Ending Date" := PromotionLine."Ending Date";
                ItemUsageAdj."Line No." := LineNo + 10000;
                ItemUsageAdj."Adjustment Quantity" := (PromotionLine."Usage Adjust Quantity" * -1);
                ItemUsageAdj."Adjusted By" := USERID;
                ItemUsageAdj."Adjusted Date" := TODAY;
                ItemUsageAdj."Original Location Code" := PromotionLine."Location Code";
                ItemUsageAdj."Original Item No." := PromotionLine."Item No.";
                ItemUsageAdj."Original Variant Code" := PromotionLine."Variant Code";
                ItemUsageAdj."Promotion Code" := PromotionLine."Promotion Code";
                ItemUsageAdj.INSERT;
                PromotionLine."Historical Data Adjusted" := TRUE;
                PromotionLine.MODIFY;
                ProcUnit.GET(
                  ItemUsageAdj."Location Code",ItemUsageAdj."Item No.",ItemUsageAdj."Variant Code");
                ProcUnit."Change Reforecast Required" := TRUE;
                IF InvMgtSetup."Roll Up Via Repl. Path" THEN
                  ProcUnit."Reforecast Item" := TRUE;
                ProcUnit.MODIFY;
              END;
            END;
          END;
        UNTIL PromotionLine.NEXT = 0;
    END;

    PROCEDURE CalcPromotionQty@1240030004(CurrPromotionHdr@1240030000 : Record 14000589;CurrPercent@1240030001 : Decimal;CurrCalcBasedOn@1240030013 : 'Forecast,Location Forecast');
    VAR
      LocAdvForSetup@1240030007 : Record 14002651;
      LocForAdj@1240030014 : Record 14002707;
      LocInvMgtSetup@1240030008 : Record 14000551;
      LocLocation@1240030003 : Record 14;
      LocInvRollUp@1240030010 : Record 14000583;
      LocProcUnit@1240030004 : Record 14000555;
      CreateLocInvRollUp@1240030009 : Codeunit 14000574;
      Forecast@1240030006 : Codeunit 14000567;
      UBP@1240030015 : Codeunit 14000564;
      LocProgWindow@1240030002 : Dialog;
      Finished@1240030005 : Boolean;
      First@1240030011 : Boolean;
      PrevLocForecast@1240030012 : Decimal;
    BEGIN
      LocProgWindow.OPEN(
        PADSTR(Text003,10) + '#1########\' +
        PADSTR(Text004,10) + '#2##################');
      LocAdvForSetup.GET;
      LocInvMgtSetup.GET;
      PromotionLine.RESET;
      PromotionLine.SETRANGE("Promotion Code",CurrPromotionHdr.Code);
      PromotionLine.SETFILTER("Location Code",'<>%1','');
      PromotionLine.SETFILTER("Item No.",'<>%1','');
      IF PromotionLine.FIND('-') THEN
        REPEAT
          IF LocLocation.Code <> PromotionLine."Location Code" THEN BEGIN
            LocLocation.GET(PromotionLine."Location Code");
            LocProgWindow.UPDATE(1,PromotionLine."Location Code");
            IF LocLocation."Last Closed Period Date" = 0D THEN
              ERROR(Text002,LocLocation.Code);
            CLEAR(StartingDateArray);
            CLEAR(EndingDateArray);
            i := 0;
            ForInvPeriod.RESET;
            ForInvPeriod.SETRANGE(Type,ForInvPeriod.Type::Calculate);
            ForInvPeriod.SETFILTER("Starting Date",'%1..',LocLocation."Last Closed Period Date");
            IF ForInvPeriod.FIND('-') THEN
              REPEAT
                i := i + 1;
                StartingDateArray[i] := ForInvPeriod."Starting Date";
                EndingDateArray[i] := ForInvPeriod."Ending Date";
              UNTIL (ForInvPeriod."Ending Date" >= CurrPromotionHdr."Ending Date") OR
                    (ForInvPeriod.NEXT = 0);
          END;
          IF PromotionLine."Ending Date" > LocLocation."Last Closed Period Date" THEN BEGIN
            LocProcUnit.GET(
              PromotionLine."Location Code",PromotionLine."Item No.",PromotionLine."Variant Code");
            LocProgWindow.UPDATE(2,PromotionLine."Item No.");
            IF LocInvMgtSetup."Roll Up Via Repl. Path" THEN BEGIN
              i := 0;
              Finished := FALSE;
              REPEAT
                i := i + 1;
                IF StartingDateArray[i] >= PromotionLine."Starting Date" THEN BEGIN
                  // Prev Location FC
                  CLEAR(CreateLocInvRollUp);
                  CreateLocInvRollUp.CalcRollUp(LocProcUnit,FALSE,0,CALCDATE('<-1D>',StartingDateArray[i]));
                  First := TRUE;
                  REPEAT
                    CreateLocInvRollUp.GetNextRollUpLine(LocInvRollUp,First);
                    First := FALSE;
                  UNTIL LocInvRollUp."Individual Location Code" = PromotionLine."Location Code";

                  IF CurrCalcBasedOn = CurrCalcBasedOn::"Location Forecast" THEN BEGIN
                    IF NOT LocInvRollUp."Forced Forc. Adj." THEN
                      LocInvRollUp."Loc. Forecast" := LocInvRollUp."Loc. Forecast" - (LocInvRollUp."Target Stock Level" + LocInvRollUp."Max. Qty.");
                    PrevLocForecast := LocInvRollUp."Loc. Forecast";
                  END ELSE BEGIN
                    IF NOT LocInvRollUp."Forced Forc. Adj." THEN
                      LocInvRollUp."Rolled Up Forecast" := LocInvRollUp."Rolled Up Forecast" - (LocInvRollUp."Target Stock Level" + LocInvRollUp."Max. Qty.");
                    PrevLocForecast := LocInvRollUp."Rolled Up Forecast";
                  END;
                  // Curr Location FC
                  CLEAR(CreateLocInvRollUp);
                  CreateLocInvRollUp.CalcRollUp(LocProcUnit,FALSE,0,EndingDateArray[i]);
                  First := TRUE;
                  REPEAT
                    CreateLocInvRollUp.GetNextRollUpLine(LocInvRollUp,First);
                    First := FALSE;
                  UNTIL LocInvRollUp."Individual Location Code" = PromotionLine."Location Code";
                  LocForAdj.RESET;
                  LocForAdj.SETCURRENTKEY(
                    "Item No.","Variant Code","Location Code","Starting Date","Promotion Code","Forecast Summary Code");
                  LocForAdj.SETRANGE("Item No.",PromotionLine."Item No.");
                  LocForAdj.SETRANGE("Variant Code",PromotionLine."Variant Code");
                  LocForAdj.SETRANGE("Starting Date",StartingDateArray[i]);
                  LocForAdj.SETFILTER("Promotion Code",'<>%1','');
                  IF CurrCalcBasedOn = CurrCalcBasedOn::"Location Forecast" THEN BEGIN
                    LocForAdj.SETFILTER("Location Code",PromotionLine."Location Code");
                    LocForAdj.CALCSUMS(Quantity);
                    IF NOT LocInvRollUp."Forced Forc. Adj." THEN
                      LocInvRollUp."Loc. Forecast" := LocInvRollUp."Loc. Forecast" - (LocInvRollUp."Target Stock Level" + LocInvRollUp."Max. Qty." + LocInvRollUp."Additional Stock Qty.");
                    PrevLocForecast := LocInvRollUp."Rolled Up Forecast";
                    PromotionLine."Promotion Quantity" :=
                      ROUND(
                        (LocInvRollUp."Loc. Forecast" - PrevLocForecast - LocForAdj.Quantity) *
                        (CurrPercent / 100),1.0)
                  END ELSE BEGIN
                    LocForAdj.SETFILTER(
                      "Location Code",UBP.GetUsageLocationFilter(
                        PromotionLine."Location Code",PromotionLine."Item No.",PromotionLine."Variant Code",TRUE));
                    LocForAdj.CALCSUMS(Quantity);
                    IF NOT LocInvRollUp."Forced Forc. Adj." THEN
                      LocInvRollUp."Rolled Up Forecast" := LocInvRollUp."Rolled Up Forecast" - (LocInvRollUp."Target Stock Level" + LocInvRollUp."Max. Qty." + LocInvRollUp."Additional Stock Qty.");
                    PromotionLine."Promotion Quantity" :=
                      ROUND(
                        (LocInvRollUp."Rolled Up Forecast" - PrevLocForecast - LocForAdj.Quantity) *
                        (CurrPercent / 100),1.0);
                  END;
                  PromotionLine.MODIFY;
                  Finished := TRUE;
                END;
              UNTIL Finished;
            END ELSE BEGIN
              CLEAR(Forecast);
              Forecast.CalcPeriodStartingDates(LocLocation,LocAdvForSetup."Periods to Forecast");
              Forecast.CalcAutoForcAdjustment(LocProcUnit, UBP.GetLeadTimeHoriz(LocProcUnit));
              Forecast.CalcForecast(LocProcUnit,LocAdvForSetup."Periods to Forecast",'',TRUE,TRUE);
              i := 0;
              Finished := FALSE;
              REPEAT
                i := i + 1;
                IF PromotionLine."Starting Date" >= Forecast.GetPeriodStartingDate(i) THEN BEGIN
                  PromotionLine."Promotion Quantity" :=
                    ROUND(Forecast.GetTotalForecast(i) * (CurrPercent / 100),1.0);
                  PromotionLine.MODIFY;
                  Finished := TRUE;
                END;
              UNTIL Finished;
            END;
          END;
        UNTIL PromotionLine.NEXT = 0;

      LocProgWindow.CLOSE;
    END;

    BEGIN
    END.
  }
}

