OBJECT Codeunit 51810 Page30EventSubscriber
{
  OBJECT-PROPERTIES
  {
    Date=07/16/21;
    Time=10:59:46 AM;
    Modified=Yes;
    Version List=NAVEVT0.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [EventSubscriber(Page,30,OnAfterValidateEvent,"Alt. Base Unit of Measure")]
    LOCAL PROCEDURE Pg30_AltBaseUnitofMeasure_OnValidate@1000000002(VAR Rec@1000000000 : Record 27;VAR xRec@1000000001 : Record 27;VAR "Alt.BUOMQOH"@1000000006 : Decimal;VAR "Alt.BUOMQtySO"@1000000005 : Decimal;VAR "Alt.BUOMQtyPO"@1000000004 : Decimal;VAR "Alt.BUOMQtyAvail"@1000000003 : Decimal);
    VAR
      "Alt.BaseUOMFilter"@1000000002 : Code[10];
    BEGIN
      //<TPZ2861>
      WITH Rec DO BEGIN
        //TOP050 KT ABCSI Modification to Item Cards 01202015
        {"Alt.BaseUOMFilter" := "Alt. Base Unit of Measure";
        Pg30_CalculateAltBaseUOMQty(Rec,"Alt.BUOMQOH","Alt.BUOMQtySO","Alt.BUOMQtyPO","Alt.BUOMQtyAvail","Alt.BaseUOMFilter");}//NAVEVENT
        //TOP050 KT ABCSI Modification to Item Cards 01202015
      END;
      //</TPZ2861>
    END;

    [EventSubscriber(Page,30,OnAfterValidateEvent,"Alt. Sales Unit of Measure")]
    LOCAL PROCEDURE Pg30_AltSalesUnitofMeasure_OnValidate@1000000004(VAR Rec@1000000000 : Record 27;VAR xRec@1000000001 : Record 27;VAR "Alt.SUOMQOH"@1000000006 : Decimal;VAR "Alt.SUOMQtySO"@1000000005 : Decimal;VAR "Alt.SUOMQtyPO"@1000000004 : Decimal;VAR "Alt.SUOMQtyAvail"@1000000003 : Decimal);
    VAR
      "Alt.SalesUOMFilter"@1000000002 : Code[10];
    BEGIN
      //<TPZ2861>
      WITH Rec DO BEGIN
        //TOP050 KT ABCSI Modification to Item Cards 01202015
        {"Alt.SalesUOMFilter" := "Alt. Sales Unit of Measure";
        Pg30_CalculateAltSalesUOMQty(Rec,"Alt.SUOMQOH","Alt.SUOMQtySO","Alt.SUOMQtyPO","Alt.SUOMQtyAvail","Alt.SalesUOMFilter");}//NAVEVENT
        //TOP050 KT ABCSI Modification to Item Cards 01202015
      END;
      //</TPZ2861>
    END;

    [EventSubscriber(Page,30,OnAfterValidateEvent,"Alt. Purch. Unit of Measure")]
    LOCAL PROCEDURE Pg30_AltPurchUnitofMeasure_OnValidate@1000000005(VAR Rec@1000000000 : Record 27;VAR xRec@1000000001 : Record 27;VAR "Alt.PUOMQOH"@1000000006 : Decimal;VAR "Alt.PUOMQtySO"@1000000005 : Decimal;VAR "Alt.PUOMQtyPO"@1000000004 : Decimal;VAR "Alt.PUOMQtyAvail"@1000000003 : Decimal);
    VAR
      "Alt.PurchUOMFilter"@1000000002 : Code[10];
    BEGIN
      //<TPZ2861>
      WITH Rec DO BEGIN
        //TOP050 KT ABCSI Modification to Item Cards 01202015
        {"Alt.PurchUOMFilter" := "Alt. Purch. Unit of Measure";
        Pg30_CalculateAltPurchUOMQty(Rec,"Alt.PUOMQOH","Alt.PUOMQtySO","Alt.PUOMQtyPO","Alt.PUOMQtyAvail","Alt.PurchUOMFilter");}//NAVEVENT
        //TOP050 KT ABCSI Modification to Item Cards 01202015
      END;
      //</TPZ2861>
    END;

    PROCEDURE "****ABCSI Functions****"@1000000010();
    BEGIN
      //<TPZ2861>
    END;

    PROCEDURE Pg30_CalculateAltBaseUOMQty@1000000001(VAR Item@1000000000 : Record 27;VAR "Alt.BUOMQOH"@1000000001 : Decimal;VAR "Alt.BUOMQtySO"@1000000005 : Decimal;VAR "Alt.BUOMQtyPO"@1000000006 : Decimal;VAR "Alt.BUOMQtyAvail"@1000000008 : Decimal;VAR "Alt.BaseUOMFilter"@1000000010 : Code[10]);
    VAR
      DefaultDim@1000000009 : Record 352;
      ProdLifeCycleDimValue@1000000004 : Code[10];
      QtyAvailtoPick@1000000003 : Decimal;
      WhseCreatePick@1000000002 : Codeunit 5778;
      Page30EventPublisher@1000000007 : Codeunit 51814;
      UOMMgt@1000000011 : Codeunit 5402;
    BEGIN
      //<TPZ2861>
      WITH Item DO BEGIN
        CLEAR("Alt.BUOMQOH");
        CLEAR("Alt.BUOMQtySO");
        CLEAR("Alt.BUOMQtyPO");
        CLEAR("Alt.BUOMQtyAvail");
        CALCFIELDS(Inventory,"Qty. on Purch. Order","Qty. on Sales Order");
        IF "Alt.BaseUOMFilter" <> '' THEN BEGIN
          "Alt.BUOMQOH" := UOMMgt.CalcQtyFromBase(Inventory,UOMMgt.GetQtyPerUnitOfMeasure(Item,"Alt.BaseUOMFilter"));
          "Alt.BUOMQtySO" := UOMMgt.CalcQtyFromBase("Qty. on Sales Order",UOMMgt.GetQtyPerUnitOfMeasure(Item,"Alt.BaseUOMFilter"));
          "Alt.BUOMQtyPO" := UOMMgt.CalcQtyFromBase("Qty. on Purch. Order",UOMMgt.GetQtyPerUnitOfMeasure(Item,"Alt.BaseUOMFilter"));
          "Alt.BUOMQtyAvail" := UOMMgt.CalcQtyFromBase((Inventory - "Qty. on Sales Order"),UOMMgt.GetQtyPerUnitOfMeasure(Item,"Alt.BaseUOMFilter"));
        END;
      END;
      //</TPZ2861>
    END;

    PROCEDURE Pg30_CalculateAltSalesUOMQty@1000000006(VAR Item@1000000000 : Record 27;VAR "Alt.SUOMQOH"@1000000001 : Decimal;VAR "Alt.SUOMQtySO"@1000000005 : Decimal;VAR "Alt.SUOMQtyPO"@1000000006 : Decimal;VAR "Alt.SUOMQtyAvail"@1000000008 : Decimal;VAR "Alt.SalesUOMFilter"@1000000010 : Code[10]);
    VAR
      DefaultDim@1000000009 : Record 352;
      ProdLifeCycleDimValue@1000000004 : Code[10];
      QtyAvailtoPick@1000000003 : Decimal;
      WhseCreatePick@1000000002 : Codeunit 5778;
      Page30EventPublisher@1000000007 : Codeunit 51814;
      UOMMgt@1000000011 : Codeunit 5402;
    BEGIN
      //<TPZ2861>
      WITH Item DO BEGIN
        CLEAR("Alt.SUOMQOH");
        CLEAR("Alt.SUOMQtySO");
        CLEAR("Alt.SUOMQtyPO");
        CLEAR("Alt.SUOMQtyAvail");
        CALCFIELDS(Inventory,"Qty. on Purch. Order","Qty. on Sales Order");
        IF "Alt.SalesUOMFilter" <> '' THEN BEGIN
          "Alt.SUOMQOH" := UOMMgt.CalcQtyFromBase(Inventory,UOMMgt.GetQtyPerUnitOfMeasure(Item,"Alt.SalesUOMFilter"));
          "Alt.SUOMQtySO" := UOMMgt.CalcQtyFromBase("Qty. on Sales Order",UOMMgt.GetQtyPerUnitOfMeasure(Item,"Alt.SalesUOMFilter"));
          "Alt.SUOMQtyPO" := UOMMgt.CalcQtyFromBase("Qty. on Purch. Order",UOMMgt.GetQtyPerUnitOfMeasure(Item,"Alt.SalesUOMFilter"));
          "Alt.SUOMQtyAvail" := UOMMgt.CalcQtyFromBase((Inventory - "Qty. on Sales Order"),UOMMgt.GetQtyPerUnitOfMeasure(Item,"Alt.SalesUOMFilter"));

        END;
      END;
      //</TPZ2861>
    END;

    PROCEDURE Pg30_CalculateAltPurchUOMQty@1000000011(VAR Item@1000000000 : Record 27;VAR "Alt.PUOMQOH"@1000000001 : Decimal;VAR "Alt.PUOMQtySO"@1000000005 : Decimal;VAR "Alt.PUOMQtyPO"@1000000006 : Decimal;VAR "Alt.PUOMQtyAvail"@1000000008 : Decimal;VAR "Alt.PurchUOMFilter"@1000000010 : Code[10]);
    VAR
      DefaultDim@1000000009 : Record 352;
      ProdLifeCycleDimValue@1000000004 : Code[10];
      QtyAvailtoPick@1000000003 : Decimal;
      WhseCreatePick@1000000002 : Codeunit 5778;
      Page30EventPublisher@1000000007 : Codeunit 51814;
      UOMMgt@1000000011 : Codeunit 5402;
    BEGIN
      //<TPZ2861>
      WITH Item DO BEGIN
        CLEAR("Alt.PUOMQOH");
        CLEAR("Alt.PUOMQtySO");
        CLEAR("Alt.PUOMQtyPO");
        CLEAR("Alt.PUOMQtyAvail");
        CALCFIELDS(Inventory,"Qty. on Purch. Order","Qty. on Sales Order");
        IF "Alt.PurchUOMFilter" <> '' THEN BEGIN
          "Alt.PUOMQOH" := UOMMgt.CalcQtyFromBase(Inventory,UOMMgt.GetQtyPerUnitOfMeasure(Item,"Alt.PurchUOMFilter"));
          "Alt.PUOMQtySO" := UOMMgt.CalcQtyFromBase("Qty. on Sales Order",UOMMgt.GetQtyPerUnitOfMeasure(Item,"Alt.PurchUOMFilter"));
          "Alt.PUOMQtyPO" := UOMMgt.CalcQtyFromBase("Qty. on Purch. Order",UOMMgt.GetQtyPerUnitOfMeasure(Item,"Alt.PurchUOMFilter"));
          "Alt.PUOMQtyAvail" := UOMMgt.CalcQtyFromBase((Inventory - "Qty. on Sales Order"),UOMMgt.GetQtyPerUnitOfMeasure(Item,"Alt.PurchUOMFilter"));
        END;
      END;
      //</TPZ2861>
    END;

    PROCEDURE Pg30_AltBUOMQOH@1000000003(Rec@1000000000 : Record 27) : Decimal;
    VAR
      UOMMgt@1000000001 : Codeunit 5402;
    BEGIN
      Rec.CALCFIELDS(Inventory);
      IF Rec."Alt. Base Unit of Measure" <> '' THEN
        EXIT(UOMMgt.CalcQtyFromBase(Rec.Inventory,UOMMgt.GetQtyPerUnitOfMeasure(Rec,Rec."Alt. Base Unit of Measure")))
      ELSE EXIT(0);
    END;

    PROCEDURE Pg30_AltBUOMQtySO@1000000007(Rec@1000000000 : Record 27) : Decimal;
    VAR
      UOMMgt@1000000001 : Codeunit 5402;
    BEGIN
      Rec.CALCFIELDS("Qty. on Purch. Order");
      IF Rec."Alt. Base Unit of Measure" <> '' THEN
        EXIT(UOMMgt.CalcQtyFromBase(Rec."Qty. on Purch. Order",UOMMgt.GetQtyPerUnitOfMeasure(Rec,Rec."Alt. Base Unit of Measure")))
      ELSE EXIT(0);
    END;

    PROCEDURE Pg30_AltBUOMQtyPO@1000000008(Rec@1000000000 : Record 27) : Decimal;
    VAR
      UOMMgt@1000000001 : Codeunit 5402;
    BEGIN
      Rec.CALCFIELDS("Qty. on Sales Order");
      IF Rec."Alt. Base Unit of Measure" <> '' THEN
        EXIT(UOMMgt.CalcQtyFromBase(Rec."Qty. on Sales Order",UOMMgt.GetQtyPerUnitOfMeasure(Rec,Rec."Alt. Base Unit of Measure")))
      ELSE EXIT(0);
    END;

    PROCEDURE Pg30_AltBUOMQtyAvail@1000000009(Rec@1000000000 : Record 27) : Decimal;
    VAR
      UOMMgt@1000000001 : Codeunit 5402;
    BEGIN
      Rec.CALCFIELDS(Inventory,"Qty. on Sales Order");
      IF Rec."Alt. Base Unit of Measure" <> '' THEN
        EXIT(UOMMgt.CalcQtyFromBase(Rec.Inventory-Rec."Qty. on Sales Order",UOMMgt.GetQtyPerUnitOfMeasure(Rec,Rec."Alt. Base Unit of Measure")))
      ELSE EXIT(0);
    END;

    PROCEDURE Pg30_AltSalesUOMQOH@1000000015(Rec@1000000000 : Record 27) : Decimal;
    VAR
      UOMMgt@1000000001 : Codeunit 5402;
    BEGIN
      Rec.CALCFIELDS(Inventory);
      IF Rec."Alt. Sales Unit of Measure" <> '' THEN
        EXIT(UOMMgt.CalcQtyFromBase(Rec.Inventory,UOMMgt.GetQtyPerUnitOfMeasure(Rec,Rec."Alt. Sales Unit of Measure")))
      ELSE EXIT(0);
    END;

    PROCEDURE Pg30_AltSalesUOMQtySO@1000000014(Rec@1000000000 : Record 27) : Decimal;
    VAR
      UOMMgt@1000000001 : Codeunit 5402;
    BEGIN
      Rec.CALCFIELDS("Qty. on Sales Order");
      IF Rec."Alt. Sales Unit of Measure" <> '' THEN
        EXIT(UOMMgt.CalcQtyFromBase(Rec."Qty. on Sales Order",UOMMgt.GetQtyPerUnitOfMeasure(Rec,Rec."Alt. Sales Unit of Measure")))
      ELSE EXIT(0);
    END;

    PROCEDURE Pg30_AltSalesUOMQtyPO@1000000013(Rec@1000000000 : Record 27) : Decimal;
    VAR
      UOMMgt@1000000001 : Codeunit 5402;
    BEGIN
      Rec.CALCFIELDS("Qty. on Purch. Order");
      IF Rec."Alt. Sales Unit of Measure" <> '' THEN
        EXIT(UOMMgt.CalcQtyFromBase(Rec."Qty. on Purch. Order",UOMMgt.GetQtyPerUnitOfMeasure(Rec,Rec."Alt. Sales Unit of Measure")))
      ELSE EXIT(0);
    END;

    PROCEDURE Pg30_AltSalesUOMQtyAvail@1000000012(Rec@1000000000 : Record 27) : Decimal;
    VAR
      UOMMgt@1000000001 : Codeunit 5402;
    BEGIN
      Rec.CALCFIELDS(Inventory,"Qty. on Sales Order");
      IF Rec."Alt. Sales Unit of Measure" <> '' THEN
        EXIT(UOMMgt.CalcQtyFromBase(Rec.Inventory-Rec."Qty. on Sales Order",UOMMgt.GetQtyPerUnitOfMeasure(Rec,Rec."Alt. Sales Unit of Measure")))
      ELSE EXIT(0);
    END;

    PROCEDURE Pg30_AltPurchUOMQOH@1000000021(Rec@1000000000 : Record 27) : Decimal;
    VAR
      UOMMgt@1000000001 : Codeunit 5402;
    BEGIN
      Rec.CALCFIELDS(Inventory);
      IF Rec."Alt. Purch. Unit of Measure" <> '' THEN
        EXIT(UOMMgt.CalcQtyFromBase(Rec.Inventory,UOMMgt.GetQtyPerUnitOfMeasure(Rec,Rec."Alt. Purch. Unit of Measure")))
      ELSE EXIT(0);
    END;

    PROCEDURE Pg30_AltPurchUOMQtySO@1000000020(Rec@1000000000 : Record 27) : Decimal;
    VAR
      UOMMgt@1000000001 : Codeunit 5402;
    BEGIN
      Rec.CALCFIELDS("Qty. on Sales Order");
      IF Rec."Alt. Purch. Unit of Measure" <> '' THEN
        EXIT(UOMMgt.CalcQtyFromBase(Rec."Qty. on Sales Order",UOMMgt.GetQtyPerUnitOfMeasure(Rec,Rec."Alt. Purch. Unit of Measure")))
      ELSE EXIT(0);
    END;

    PROCEDURE Pg30_AltPurchUOMQtyPO@1000000019(Rec@1000000000 : Record 27) : Decimal;
    VAR
      UOMMgt@1000000001 : Codeunit 5402;
    BEGIN
      Rec.CALCFIELDS("Qty. on Purch. Order");
      IF Rec."Alt. Purch. Unit of Measure" <> '' THEN
        EXIT(UOMMgt.CalcQtyFromBase(Rec."Qty. on Purch. Order",UOMMgt.GetQtyPerUnitOfMeasure(Rec,Rec."Alt. Purch. Unit of Measure")))
      ELSE EXIT(0);
    END;

    PROCEDURE Pg30_AltPurchUOMQtyAvail@1000000018(Rec@1000000000 : Record 27) : Decimal;
    VAR
      UOMMgt@1000000001 : Codeunit 5402;
    BEGIN
      Rec.CALCFIELDS(Inventory,"Qty. on Sales Order");
      IF Rec."Alt. Purch. Unit of Measure" <> '' THEN
        EXIT(UOMMgt.CalcQtyFromBase(Rec.Inventory-Rec."Qty. on Sales Order",UOMMgt.GetQtyPerUnitOfMeasure(Rec,Rec."Alt. Purch. Unit of Measure")))
      ELSE EXIT(0);
    END;

    PROCEDURE Pg30_OnAfterGetRecord_1@1000000016(Rec@1000000000 : Record 27) : Code[10];
    VAR
      ProdLifeCycleDimValue@1000000001 : Code[10];
      DefaultDim@1000000002 : Record 352;
    BEGIN
      ////<TPZ1686>
      IF DefaultDim.GET(DATABASE::Item, Rec."No.", 'PRODLIFECYCLE') THEN
        ProdLifeCycleDimValue := DefaultDim."Dimension Value Code"
      ELSE
        ProdLifeCycleDimValue := '';
      EXIT(ProdLifeCycleDimValue);
      ////</TPZ1686>
    END;

    [EventSubscriber(Page,30,OnBeforeActionEvent,Action1000000041)]
    LOCAL PROCEDURE Pg30_ChangeLogEntries_OnAction@1000000000(VAR Rec@1000000000 : Record 27);
    VAR
      Codeunit423EventSubscriber@1000000001 : Codeunit 51876;
    BEGIN
      //<TPZ1728>
      Codeunit423EventSubscriber.CU423_OpenSSRSReport(DATABASE::Item, Rec."No.", '','');
    END;

    [EventSubscriber(Page,30,OnBeforeActionEvent,Action1000000083)]
    LOCAL PROCEDURE Pg30_SupplierLabelInformation_OnAction@1000000017(VAR Rec@1000000000 : Record 27);
    VAR
      URL@1000000002 : Text[1000];
      HttpUtility@1000000001 : DotNet "'System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
    BEGIN
      // <TPZ2448>
      URL :=
       //'http://nyvsvnavsql5/reportserver?/Supplier%20Label%20Report' ;
       'http://nyvsvnavsql5/reportserver?/User%20Reports%20-%20Product/Supplier%20Label%20Report' ;
       // HttpUtility.UrlEncode("No.");

      HYPERLINK(URL);
      // </TPZ2448>
    END;

    [EventSubscriber(Page,30,OnBeforeActionEvent,Action1000000052)]
    LOCAL PROCEDURE Pg30_InventoryHistoryDetails_OnAction@1000000022(VAR Rec@1000000000 : Record 27);
    VAR
      URL@1000000002 : Text[1000];
      HttpUtility@1000000001 : DotNet "'System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
    BEGIN
      // <TPZ135>
      URL :=
        //'http://nyvsvnavsql5/reportserver?/Inventory%20History%20Details&rs:Command=Render&ItemNo=' +
        'http://nyvsvnavsql5/reportserver?/User%20Reports%20-%20Product/Inventory%20History%20Details&rs:Command=Render&ItemNo=' +
        //<TPZ1583>
        HttpUtility.UrlEncode(Rec."No.");
        //</TPZ1583>

      HYPERLINK(URL);
      // </TPZ135>
    END;

    [EventSubscriber(Page,30,OnBeforeActionEvent,InvHistDetailsNoVirtualSales)]
    LOCAL PROCEDURE Pg30_InvHistDetailsNoVirtualSales_OnAction@1000000023(VAR Rec@1000000000 : Record 27);
    VAR
      URL@1000000002 : Text[1000];
      HttpUtility@1000000001 : DotNet "'System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
    BEGIN
      // <TPZ135>
      URL :=
        //'http://nyvsvnavsql5/reportserver?/Inventory%20History%20Details%20No%20Virtual%20Sales&rs:Command=Render&ItemNo=' +
        'http://nyvsvnavsql5/reportserver?/User%20Reports%20-%20Product/Inventory%20History%20Details%20No%20Virtual%20Sales&rs:Command=Render&ItemNo=' +
        //<TPZ1583>
        HttpUtility.UrlEncode(Rec."No.");
        //</TPZ1583>

      HYPERLINK(URL);
      // </TPZ135>
    END;

    [EventSubscriber(Page,30,OnBeforeActionEvent,Action1000000051)]
    LOCAL PROCEDURE Pg30_AltUOMInventoryHistoryDetails_OnAction@1000000024(VAR Rec@1000000000 : Record 27);
    VAR
      URL@1000000002 : Text[1000];
      HttpUtility@1000000001 : DotNet "'System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
    BEGIN
      // <TPZ135>
      URL :=
        //'http://nyvsvnavsql5/reportserver?/Inventory%20History%20Details&rs:Command=Render&ItemNo=' +
        'http://nyvsvnavsql5/reportserver?/User%20Reports%20-%20Product/Inventory%20History%20Details&rs:Command=Render&ItemNo=' +
        //<TPZ1583>
        HttpUtility.UrlEncode(Rec."No.");
        //</TPZ1583>

      URL :=
        URL +
        '&DisplayQtysInAltPurchUOM=True';

      HYPERLINK(URL);
      // </TPZ135>
    END;

    [EventSubscriber(Page,30,OnBeforeActionEvent,InvHistDetailsNoVirtualSalesAltUOM)]
    LOCAL PROCEDURE Pg30_AAltUOMInvHistDetails_OnAction@1000000025(VAR Rec@1000000000 : Record 27);
    VAR
      URL@1000000002 : Text[1000];
      HttpUtility@1000000001 : DotNet "'System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
    BEGIN
      // <TPZ135>
      URL :=
        //'http://nyvsvnavsql5/reportserver?/Inventory%20History%20Details%20No%20Virtual%20Sales&rs:Command=Render&ItemNo=' +
        'http://nyvsvnavsql5/reportserver?/User%20Reports%20-%20Product/Inventory%20History%20Details%20No%20Virtual%20Sales&rs:Command=Render&ItemNo=' +
        //<TPZ1583>
        HttpUtility.UrlEncode(Rec."No.");
        //</TPZ1583>

      URL :=
        URL +
        '&DisplayQtysInAltPurchUOM=True';

      HYPERLINK(URL);
      // </TPZ135>
    END;

    [EventSubscriber(Page,30,OnAfterActionEvent,"Create UPC")]
    LOCAL PROCEDURE PG30_AvailableUPC_OnAction@1000000026(VAR Rec@1000000003 : Record 27);
    VAR
      ItemCrossRef@1000000001 : Record 5717;
      InventorySetup@1000000000 : Record 313;
      NewItemCrossRef@1000000002 : Record 5717;
      BaseCode@1000000004 : Code[20];
      TEXT1@1000000006 : TextConst 'ENU=Item %1 already have a Barcode setup - Please Delete the records for Auto Generation';
      TEXT2@1000000005 : TextConst 'ENU=UPC Codes Created  - Please Check The Item Cross Reference table';
    BEGIN
      WITH Rec DO BEGIN
        ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::"Bar Code");
        ItemCrossRef.SETRANGE("Item No.","No.");
        IF ItemCrossRef.FINDFIRST THEN
          ERROR(TEXT1,"No.");
        IF CONFIRM('Do you want to select UPC number manually"',TRUE) THEN BEGIN
          InventorySetup.GET(' ');
          ItemCrossRef.RESET();
          ItemCrossRef.SETFILTER("Item No.",'%1','');
          ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::"Bar Code");
          //ItemCrossRef.SETRANGE("Unit of Measure",InventorySetup."Base UOM");
          IF ItemCrossRef.FINDSET THEN
            IF PAGE.RUNMODAL(0,ItemCrossRef) = ACTION::LookupOK THEN BEGIN
              ItemCrossRef.RESET();
              ItemCrossRef.SETFILTER("Item No.",'%1','');
              ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::"Bar Code");
              ItemCrossRef.SETRANGE("Unit of Measure",InventorySetup."Base UOM");
              ItemCrossRef.SETRANGE(Select,TRUE);
              ItemCrossRef.SETRANGE("User ID",USERID);
              IF ItemCrossRef.FINDFIRST THEN BEGIN
                NewItemCrossRef.INIT();
                NewItemCrossRef.TRANSFERFIELDS(ItemCrossRef);
                NewItemCrossRef."Item No." := "No.";
                NewItemCrossRef.INSERT;
                ItemCrossRef.DELETE();
                BaseCode := COPYSTR(NewItemCrossRef."Cross-Reference No.",1,11);
                //Item.GET("ItemNo.");
                "Item UPC/EAN Number":= NewItemCrossRef."Cross-Reference No.";
                MODIFY();
              END;
              ItemCrossRef.RESET();
              ItemCrossRef.SETFILTER("Item No.",'%1','');
              ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::"Bar Code");
              ItemCrossRef.SETRANGE("Unit of Measure",InventorySetup."Master on Carton Code");
              ItemCrossRef.SETRANGE(Select,TRUE);
              ItemCrossRef.SETRANGE("User ID",USERID);
              IF ItemCrossRef.FINDFIRST THEN BEGIN
                NewItemCrossRef.INIT();
                NewItemCrossRef.TRANSFERFIELDS(ItemCrossRef);
                NewItemCrossRef."Item No." := "No.";
                NewItemCrossRef.INSERT;
                ItemCrossRef.DELETE();
              END ELSE BEGIN
                ItemCrossRef.RESET();
                ItemCrossRef.SETFILTER("Item No.",'%1','');
                ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::"Bar Code");
                ItemCrossRef.SETRANGE("Unit of Measure",InventorySetup."Master on Carton Code");
                ItemCrossRef.SETFILTER("Cross-Reference No.",'%1','*'+BaseCode+'*');
                IF ItemCrossRef.FINDFIRST THEN BEGIN
                  NewItemCrossRef.INIT();
                  NewItemCrossRef.TRANSFERFIELDS(ItemCrossRef);
                  NewItemCrossRef."Item No." := "No.";
                  NewItemCrossRef.INSERT;
                  ItemCrossRef.DELETE();
                END ELSE BEGIN
                  ItemCrossRef.RESET();
                  ItemCrossRef.SETFILTER("Item No.",'%1','');
                  ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::"Bar Code");
                  ItemCrossRef.SETRANGE("Unit of Measure",InventorySetup."Master on Carton Code");
                  IF ItemCrossRef.FINDFIRST THEN BEGIN
                    NewItemCrossRef.INIT();
                    NewItemCrossRef.TRANSFERFIELDS(ItemCrossRef);
                    NewItemCrossRef."Item No." := "No.";
                    NewItemCrossRef.INSERT;
                    ItemCrossRef.DELETE();
                  END;
                END;
              END;
              ItemCrossRef.RESET();
              ItemCrossRef.SETFILTER("Item No.",'%1','');
              ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::"Bar Code");
              ItemCrossRef.SETRANGE("Unit of Measure",InventorySetup."Inner on Carton Code");
              ItemCrossRef.SETRANGE(Select,TRUE);
              ItemCrossRef.SETRANGE("User ID",USERID);
              IF ItemCrossRef.FINDFIRST THEN BEGIN
                NewItemCrossRef.INIT();
                NewItemCrossRef.TRANSFERFIELDS(ItemCrossRef);
                NewItemCrossRef."Item No." := "No.";
                NewItemCrossRef.INSERT;
                ItemCrossRef.DELETE();
              END ELSE BEGIN
                ItemCrossRef.RESET();
                ItemCrossRef.SETFILTER("Item No.",'%1','');
                ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::"Bar Code");
                ItemCrossRef.SETRANGE("Unit of Measure",InventorySetup."Inner on Carton Code");
                ItemCrossRef.SETFILTER("Cross-Reference No.",'%1','*'+BaseCode+'*');
                IF ItemCrossRef.FINDFIRST THEN BEGIN
                  NewItemCrossRef.INIT();
                  NewItemCrossRef.TRANSFERFIELDS(ItemCrossRef);
                  NewItemCrossRef."Item No." := "No.";
                  NewItemCrossRef.INSERT;
                  ItemCrossRef.DELETE();
                END ELSE BEGIN
                  ItemCrossRef.RESET();
                  ItemCrossRef.SETFILTER("Item No.",'%1','');
                  ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::"Bar Code");
                  ItemCrossRef.SETRANGE("Unit of Measure",InventorySetup."Inner on Carton Code");
                  IF ItemCrossRef.FINDFIRST THEN BEGIN
                    NewItemCrossRef.INIT();
                    NewItemCrossRef.TRANSFERFIELDS(ItemCrossRef);
                    NewItemCrossRef."Item No." := "No.";
                    NewItemCrossRef.INSERT;
                    ItemCrossRef.DELETE();
                  END;
                END;
              END;
            END ELSE BEGIN
              ItemCrossRef.RESET();
              ItemCrossRef.SETRANGE(Select,TRUE);
              ItemCrossRef.SETRANGE("User ID",USERID);
              IF ItemCrossRef.FINDFIRST THEN
                REPEAT
                  ItemCrossRef.Select := FALSE;
                  ItemCrossRef."User ID" := '';
                  ItemCrossRef.MODIFY;
                UNTIL ItemCrossRef.NEXT = 0;
            END;
        END ELSE BEGIN
          InventorySetup.GET(' ');
          ItemCrossRef.RESET();
          ItemCrossRef.SETFILTER("Item No.",'%1','');
          ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::"Bar Code");
          ItemCrossRef.SETRANGE("Unit of Measure",InventorySetup."Base UOM");
          IF ItemCrossRef.FINDFIRST THEN BEGIN
            NewItemCrossRef.INIT();
            NewItemCrossRef.TRANSFERFIELDS(ItemCrossRef);
            NewItemCrossRef."Item No.":="No.";
            NewItemCrossRef.INSERT;
            ItemCrossRef.DELETE();
            BaseCode:=COPYSTR(NewItemCrossRef."Cross-Reference No.",1,11);
            //Item.GET("ItemNo.");
            "Item UPC/EAN Number":=NewItemCrossRef."Cross-Reference No.";
            MODIFY();
          END;
          ItemCrossRef.RESET();
          ItemCrossRef.SETFILTER("Item No.",'%1','');
          ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::"Bar Code");
          ItemCrossRef.SETRANGE("Unit of Measure",InventorySetup."Master on Carton Code");
          ItemCrossRef.SETFILTER("Cross-Reference No.",'%1','*'+BaseCode+'*');
          IF ItemCrossRef.FINDFIRST THEN BEGIN
            NewItemCrossRef.INIT();
            NewItemCrossRef.TRANSFERFIELDS(ItemCrossRef);
            NewItemCrossRef."Item No." := "No.";
            NewItemCrossRef.INSERT;
            ItemCrossRef.DELETE();
          END ELSE BEGIN
            ItemCrossRef.RESET();
            ItemCrossRef.SETFILTER("Item No.",'%1','');
            ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::"Bar Code");
            ItemCrossRef.SETRANGE("Unit of Measure",InventorySetup."Master on Carton Code");
            IF ItemCrossRef.FINDFIRST THEN BEGIN
              NewItemCrossRef.INIT();
              NewItemCrossRef.TRANSFERFIELDS(ItemCrossRef);
              NewItemCrossRef."Item No." := "No.";
              NewItemCrossRef.INSERT;
              ItemCrossRef.DELETE();
            END;
          END;
          ItemCrossRef.RESET();
          ItemCrossRef.SETFILTER("Item No.",'%1','');
          ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::"Bar Code");
          ItemCrossRef.SETRANGE("Unit of Measure",InventorySetup."Inner on Carton Code");
          ItemCrossRef.SETFILTER("Cross-Reference No.",'%1','*'+BaseCode+'*');
          IF ItemCrossRef.FINDFIRST THEN BEGIN
            NewItemCrossRef.INIT();
            NewItemCrossRef.TRANSFERFIELDS(ItemCrossRef);
            NewItemCrossRef."Item No." := "No.";
            NewItemCrossRef.INSERT;
            ItemCrossRef.DELETE();
          END ELSE BEGIN
            ItemCrossRef.RESET();
            ItemCrossRef.SETFILTER("Item No.",'%1','');
            ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::"Bar Code");
            ItemCrossRef.SETRANGE("Unit of Measure",InventorySetup."Inner on Carton Code");
            IF ItemCrossRef.FINDFIRST THEN BEGIN
              NewItemCrossRef.INIT();
              NewItemCrossRef.TRANSFERFIELDS(ItemCrossRef);
              NewItemCrossRef."Item No." := "No.";
              NewItemCrossRef.INSERT;
              ItemCrossRef.DELETE();
            END;
          END;
        END;
        MESSAGE(TEXT2);
      END;
    END;

    [EventSubscriber(Page,30,OnAfterActionEvent,"Assign 5 Digit Code")]
    LOCAL PROCEDURE PG30_Assign5DigitCode_OnAction@1000000027(VAR Rec@1000000001 : Record 27);
    VAR
      OrderCode@1000000000 : Record 50067;
      ItemAttributeValueMapping@1000000002 : Record 7505;
    BEGIN
      CLEAR(ItemAttributeValueMapping);
      ItemAttributeValueMapping.SETRANGE("Table ID",DATABASE::Item);
      ItemAttributeValueMapping.SETRANGE("No.",Rec."No.");
      ItemAttributeValueMapping.SETRANGE("Item Attribute ID",1060);
      IF ItemAttributeValueMapping.FINDFIRST THEN
        ERROR('The Order Code already assigned');
      OrderCode.SETRANGE("Division Code",Rec."Shortcut Dimension 5 Code");
      OrderCode.SETRANGE("Product Group Code",Rec."Product Group Code");
      OrderCode.SETRANGE("Item No.",'');
      IF OrderCode.FINDFIRST THEN
        IF PAGE.RUNMODAL(0,OrderCode) = ACTION::LookupOK THEN BEGIN
          AssignItemAttributes(Rec,OrderCode.Code);
          OrderCode."Item No." := Rec."No.";
          OrderCode.MODIFY;
        END;
    END;

    LOCAL PROCEDURE AssignItemAttributes@1170000002(ItemPara@1000000000 : Record 27;OrderCodePara@1000000001 : Code[20]);
    VAR
      ItemAttributeValueMapping@1170000000 : Record 7505;
      ItemLoc@1170000001 : Record 27;
      InventoryStatusReport@1170000002 : Codeunit 51992;
    BEGIN
      CLEAR(ItemAttributeValueMapping);
      ItemAttributeValueMapping.SETRANGE("Table ID",DATABASE::Item);
      ItemAttributeValueMapping.SETRANGE("No.",ItemPara."No.");
      ItemAttributeValueMapping.SETRANGE("Item Attribute ID",1060);
      IF NOT ItemAttributeValueMapping.FINDFIRST THEN BEGIN
        ItemAttributeValueMapping.INIT;
        ItemAttributeValueMapping."Table ID" := 27;
        ItemAttributeValueMapping."No." := ItemPara."No.";
        ItemAttributeValueMapping."Item Attribute ID" := 1060;
        ItemAttributeValueMapping."Item Attribute Value ID" := GetItemAttributeID(OrderCodePara);
        ItemAttributeValueMapping.INSERT;
      END ELSE ERROR('The Order Code already assigned');
    END;

    LOCAL PROCEDURE GetItemAttributeID@1000000033(OrderCodePara@1000000000 : Code[20]) : Integer;
    VAR
      ItemAttributeValue@1000000001 : Record 7501;
    BEGIN
      ItemAttributeValue.INIT;
      ItemAttributeValue."Attribute ID" := 1060;
      ItemAttributeValue.VALIDATE(Value,OrderCodePara);
      ItemAttributeValue."Attribute Name" := 'Order Code';
      ItemAttributeValue.INSERT;
      EXIT(ItemAttributeValue.ID);
    END;

    BEGIN
    {
      TPZ2861 RSAH 05192020
        - Event Conversion
    }
    END.
  }
}

