OBJECT Codeunit 23044600 DSHIP Package List Management
{
  OBJECT-PROPERTIES
  {
    Date=09/23/21;
    Time=10:55:25 AM;
    Modified=Yes;
    Version List=DSHIP2.2.2,TPZ2693,001,3301,3353;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      cuIWXCommonBase@1000000000 : Codeunit 23044519;
      cuPackMgmt@1000000001 : Codeunit 23044601;
      cuRateMgmt@1000000002 : Codeunit 23044602;
      tcNotFinishPack@1000000003 : TextConst 'ENU=This order is not fully packed. Do you want to post the order?;ESM=Este pedido no se embalado totalmente. ¨Confirma que desea registrar el pedido?;FRC=Cette commande n'' est pas entiŠrement emball‚. Souhaitez-vous reporter la commande?;ENC=Don''t finish packing yet. Do you want to post the order?';
      tcYesNo@1000000004 : TextConst 'ENU=No,Yes;ESM=No,S¡;FRC=Non,Oui;ENC=No,Yes';
      tcLPNotFound@1000000005 : TextConst 'ENU=Could not find an associated LP.;ESM=No se pudo encontrar un LP asociado.;FRC=Impossible de trouver un LP associ‚.;ENC=Could not find an associated LP.';
      tcNoLabels@1000000006 : TextConst 'ENU=This order has not yet been labelled.;ESM=A£n no se han labelled este pedido.;FRC=Ce document a pas encore ‚t‚ labelled.;ENC=This order has not yet been labelled.';

    PROCEDURE getPackageOrders@1000000013(VAR ptrecPackOrderBuffer@1000000003 : Record 23044601);
    BEGIN
      //<FUNC>
      //  Description: Builds up the list of orders
      //  Called From: Page: DynamicShip Order Packaging (ID:23044601)
      //  Side Effect: None
      //</FUNC>

      getPackageOrdersWhseShip(ptrecPackOrderBuffer);
      getPackageOrdersSalesOrder(ptrecPackOrderBuffer);
      getPackageOrdersTransferOrder(ptrecPackOrderBuffer);
      ptrecPackOrderBuffer.RESET;
    END;

    LOCAL PROCEDURE getPackageOrdersWhseShip@1000000002(VAR ptrecPackOrderBuffer@1000000003 : Record 23044601);
    VAR
      lrecrRecRef@1000000000 : RecordRef;
      lrecWhseShipHeader@1000000002 : Record 7320;
      lrecLPHeader@1000000001 : Record 23044505;
      lrecWhseEmp@1000000006 : Record 7301;
      lsFilter@1000000005 : Text;
    BEGIN
      //<FUNC>
      //  Description: Builds up the list of whse. shipment orders
      //  Called From: Current Codeunit
      //  Side Effect: None
      //</FUNC>

      lrecWhseEmp.SETRANGE("User ID", USERID);
      IF ( lrecWhseEmp.FINDSET(FALSE) ) THEN
        REPEAT
          IF ( lrecWhseEmp."Location Code" <> '' ) THEN
            lsFilter += lrecWhseEmp."Location Code" + '|';
        UNTIL(lrecWhseEmp.NEXT=0);
      IF ( lsFilter <> '' ) THEN BEGIN
        lsFilter := COPYSTR(lsFilter, 1, STRLEN(lsFilter) - 1);
        lrecWhseShipHeader.SETFILTER("Location Code", lsFilter);
      END ELSE // original
        lrecWhseShipHeader.SETFILTER("Location Code", '<>%1', '');
      //>>TPZ2895
      lrecWhseShipHeader.SETRANGE("Combined To",'');
      //<<TPZ2895
      IF ( lrecWhseShipHeader.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          ptrecPackOrderBuffer.INIT;
          ptrecPackOrderBuffer."Document Type" := ptrecPackOrderBuffer."Document Type"::"Warehouse Shipment";
          ptrecPackOrderBuffer."Document No." := lrecWhseShipHeader."No.";
          ptrecPackOrderBuffer."Location Code" := lrecWhseShipHeader."Location Code";
          ptrecPackOrderBuffer."Document Status" := lrecWhseShipHeader.Status;
          ptrecPackOrderBuffer."Warehouse Shipment Status" := lrecWhseShipHeader."Document Status";
          ptrecPackOrderBuffer."Document Assigned User ID" := lrecWhseShipHeader."Assigned User ID";
          setShipToDetailFromWhseShipment(ptrecPackOrderBuffer, lrecWhseShipHeader);
          lrecrRecRef.GETTABLE(lrecWhseShipHeader);
          setStatusFields(ptrecPackOrderBuffer, lrecrRecRef, lrecLPHeader."Source Document"::Shipment, lrecWhseShipHeader."No.");
          ptrecPackOrderBuffer."Source No." := GetSONumber(lrecWhseShipHeader,lrecWhseShipHeader."No.");//vaseem //TPZ3257 PKS increase one parameter Doc No
          ptrecPackOrderBuffer.INSERT;
        UNTIL(lrecWhseShipHeader.NEXT=0);
      END;
      ptrecPackOrderBuffer."Source No." :='';//vaseem
    END;

    LOCAL PROCEDURE getPackageOrdersSalesOrder@1000000004(VAR ptrecPackOrderBuffer@1000000003 : Record 23044601);
    VAR
      lrecSalesHeader@1000000002 : Record 36;
      lrecLocation@1000000006 : Record 14;
      lrecLPHeader@1000000001 : Record 23044505;
      lrecrRecRef@1000000000 : RecordRef;
      lbInclude@1000000004 : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Builds up the list of sales orders that don't need whse. shipments
      //  Called From: Current Codeunit
      //  Side Effect: None
      //</FUNC>

      lrecSalesHeader.SETRANGE("Completely Shipped",FALSE);
      lrecSalesHeader.SETRANGE("Document Type", lrecSalesHeader."Document Type"::Order);
      lrecSalesHeader.SETFILTER("Location Code", '<>%1', '');
      IF ( lrecSalesHeader.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          lbInclude := TRUE;
          IF ( lrecLocation.GET(lrecSalesHeader."Location Code") ) THEN
            lbInclude := NOT lrecLocation."Require Shipment";
          IF ( lbInclude ) THEN BEGIN
            ptrecPackOrderBuffer."Document Type" := ptrecPackOrderBuffer."Document Type"::"Sales Order";
            ptrecPackOrderBuffer."Document Subtype" := lrecSalesHeader."Document Type";
            ptrecPackOrderBuffer."Document No." := lrecSalesHeader."No.";
            ptrecPackOrderBuffer."Location Code" := lrecSalesHeader."Location Code";
            ptrecPackOrderBuffer."Document Status" := lrecSalesHeader.Status;
            ptrecPackOrderBuffer."Warehouse Shipment Status" := 0;
            ptrecPackOrderBuffer."Document Assigned User ID" := lrecSalesHeader."Assigned User ID";
            setShipToDetailFromSalesOrder(ptrecPackOrderBuffer, lrecSalesHeader);
            lrecrRecRef.GETTABLE(lrecSalesHeader);
            setStatusFields(ptrecPackOrderBuffer, lrecrRecRef, lrecLPHeader."Source Document"::"Sales Order", lrecSalesHeader."No.");
            ptrecPackOrderBuffer.INSERT;
          END;
        UNTIL(lrecSalesHeader.NEXT=0);
      END;
    END;

    LOCAL PROCEDURE getPackageOrdersTransferOrder@1000000014(VAR ptrecPackOrderBuffer@1000000003 : Record 23044601);
    VAR
      lrecTransferHeader@1000000002 : Record 5740;
      lrecLocation@1000000006 : Record 14;
      lrecLPHeader@1000000001 : Record 23044505;
      lrecrRecRef@1000000000 : RecordRef;
      lbInclude@1000000004 : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Builds up the list of transfer orders that don't need whse. shipments
      //  Called From: Current Codeunit
      //  Side Effect: None
      //</FUNC>

      lrecTransferHeader.SETRANGE("Completely Shipped",FALSE);
      IF ( lrecTransferHeader.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          lbInclude := TRUE;
          IF ( lrecLocation.GET(lrecTransferHeader."Transfer-from Code") ) THEN
            lbInclude := NOT lrecLocation."Require Shipment";
          IF ( lbInclude ) THEN BEGIN
            ptrecPackOrderBuffer."Document Type" := ptrecPackOrderBuffer."Document Type"::"Outbound Transfer";
            ptrecPackOrderBuffer."Document No." := lrecTransferHeader."No.";
            ptrecPackOrderBuffer."Location Code" := lrecTransferHeader."Transfer-from Code";
            ptrecPackOrderBuffer."Document Status" := lrecTransferHeader.Status;
            ptrecPackOrderBuffer."Warehouse Shipment Status" := 0;
            ptrecPackOrderBuffer."Document Assigned User ID" := lrecTransferHeader."Assigned User ID";
            setShipToDetailFromTransferOrder(ptrecPackOrderBuffer, lrecTransferHeader);
            lrecrRecRef.GETTABLE(lrecTransferHeader);
            setStatusFields(ptrecPackOrderBuffer, lrecrRecRef, lrecLPHeader."Source Document"::"Outbound Transfer", lrecTransferHeader."No.");
            ptrecPackOrderBuffer.INSERT;
          END;
        UNTIL( lrecTransferHeader.NEXT=0 );
      END;
    END;

    PROCEDURE setShipToDetailFromWhseShipment@1000000010(VAR ptrecPackOrderBuffer@1000000000 : TEMPORARY Record 23044601;precWhseShipHeader@1000000001 : Record 7320);
    VAR
      lrecSalesHeader@1000000002 : Record 36;
      lrecTransferHeader@1000000004 : Record 5740;
      lrecWhseShipLine@1000000003 : Record 7321;
      lrecPurchaseHeader@1000000005 : Record 38;
      lrecServiceHeader@1000000006 : Record 5900;
      ltrecWhseShipLine@1000000008 : TEMPORARY Record 7321;
      lbWhseShipLineFound@1000000007 : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Sets the shipment details for a whse. shipment header.
      //               Does not handle combined orders.
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      lrecWhseShipLine.SETRANGE("No.", precWhseShipHeader."No.");
      lrecWhseShipLine.FINDFIRST();

      // Use temp to avoid queries to db
      ltrecWhseShipLine.COPY(lrecWhseShipLine, FALSE);
      ltrecWhseShipLine.INSERT(FALSE);

      // line must still require handling
      ltrecWhseShipLine.SETFILTER("Qty. Outstanding", '>0');

      // look only for picked line
      ltrecWhseShipLine.SETFILTER("Qty. Picked", '>0');
      lbWhseShipLineFound := ltrecWhseShipLine.FINDFIRST();
      IF ( NOT lbWhseShipLineFound ) THEN BEGIN
        // location may have picks turned off
        // look only for ready to ship line
        ltrecWhseShipLine.SETRANGE("Qty. Picked");
        ltrecWhseShipLine.SETFILTER("Qty. to Ship", '>0');
        lbWhseShipLineFound := ltrecWhseShipLine.FINDFIRST();
        IF ( NOT lbWhseShipLineFound ) THEN BEGIN
          // qty to ship may be blank
          // look only for outstanding line
          ltrecWhseShipLine.SETRANGE("Qty. to Ship");
          lbWhseShipLineFound := ltrecWhseShipLine.FINDFIRST();
          IF ( NOT lbWhseShipLineFound ) THEN BEGIN
            // attempt to find any line
            ltrecWhseShipLine.SETRANGE("Qty. Outstanding");
            lbWhseShipLineFound := ltrecWhseShipLine.FINDFIRST();
          END;
        END;
      END;

      IF ( lbWhseShipLineFound ) THEN BEGIN
        CASE ltrecWhseShipLine."Source Document" OF
          ltrecWhseShipLine."Source Document"::"Sales Order":
            BEGIN
              IF lrecSalesHeader.GET(ltrecWhseShipLine."Source Subtype", ltrecWhseShipLine."Source No.") THEN; //vaseem
              setShipToDetailFromWhseShipmentHelper(ptrecPackOrderBuffer, precWhseShipHeader, lrecSalesHeader);
            END;
          ltrecWhseShipLine."Source Document"::"Outbound Transfer":
            BEGIN
              IF lrecTransferHeader.GET(ltrecWhseShipLine."Source No.") THEN; //vaseem
              setShipToDetailFromTransferOrder(ptrecPackOrderBuffer, lrecTransferHeader);
            END;
          ltrecWhseShipLine."Source Document"::"Purchase Return Order":
            BEGIN
              IF lrecPurchaseHeader.GET(ltrecWhseShipLine."Source Subtype", ltrecWhseShipLine."Source No.") THEN; //vaseem
              setShipToDetailFromPurchaseReturnOrder(ptrecPackOrderBuffer, lrecPurchaseHeader);
            END;
          ltrecWhseShipLine."Source Document"::"Service Order":
            BEGIN
              lrecServiceHeader.GET(ltrecWhseShipLine."Source Subtype", ltrecWhseShipLine."Source No.");
              setShipToDetailFromServiceOrder(ptrecPackOrderBuffer, lrecServiceHeader);
            END;
          ltrecWhseShipLine."Source Document"::"Sales Return Order": ;
          ltrecWhseShipLine."Source Document"::"Purchase Order": ;
        END; //case
      END; //if
    END;

    LOCAL PROCEDURE setShipToDetailFromWhseShipmentHelper@1000000012(VAR ptrecPackOrderBuffer@1000000001 : TEMPORARY Record 23044601;precWhseShipHeader@1000000002 : Record 7320;precSalesHeader@1000000003 : Record 36);
    VAR
      lasToAddress@1000000000 : ARRAY [12] OF Text[100];
    BEGIN
      //<FUNC>
      //  Description: Sets order buffer details
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      cuRateMgmt.setShipToAddressForWhseShip(precWhseShipHeader, FALSE, lasToAddress);

      ptrecPackOrderBuffer."Ship-to Name" := lasToAddress[1];
      ptrecPackOrderBuffer."Ship-to Address" := lasToAddress[2];
      ptrecPackOrderBuffer."Ship-to Address 2" := lasToAddress[3];
      ptrecPackOrderBuffer."Ship-to City" := lasToAddress[4];
      ptrecPackOrderBuffer."Ship-to County" := lasToAddress[5];
      ptrecPackOrderBuffer."Ship-to Country/Region Code" := lasToAddress[6];
      ptrecPackOrderBuffer."Ship-to Post Code" := lasToAddress[7];
      ptrecPackOrderBuffer."Ship-to Phone No." := lasToAddress[8];
      ptrecPackOrderBuffer."Sell-to Customer No." := precSalesHeader."Sell-to Customer No.";
      ptrecPackOrderBuffer."Ship-to Name 2" := precSalesHeader."Ship-to Name 2";
      //<vaseem>
      // ptrecPackOrderBuffer."Shipping Agent Code" := precWhseShipHeader."Shipping Agent Code";
      // ptrecPackOrderBuffer."Shipping Agent Service Code" := precWhseShipHeader."Shipping Agent Service Code";
      // ptrecPackOrderBuffer."Shipment Method Code" := precWhseShipHeader."Shipment Method Code";
      ptrecPackOrderBuffer."Shipping Agent Code" := precSalesHeader."Shipping Agent Code";
      ptrecPackOrderBuffer."Shipping Agent Service Code" := precSalesHeader."Shipping Agent Service Code";
      ptrecPackOrderBuffer."Shipment Method Code" := precSalesHeader."Shipment Method Code";
      ptrecPackOrderBuffer."E-Ship Agent Service" := precSalesHeader."E-Ship Agent Service";
      //</vaseem>
    END;

    PROCEDURE setShipToDetailFromSalesOrder@1000000020(VAR ptrecPackOrderBuffer@1000000000 : TEMPORARY Record 23044601;precSalesHeader@1000000001 : Record 36);
    VAR
      lasToAddress@1000000002 : ARRAY [12] OF Text[100];
    BEGIN
      //<FUNC>
      //  Description: Populates the ship to information for the sales order
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      cuRateMgmt.setShipToAddressForSalesOrder(precSalesHeader, FALSE, lasToAddress);

      ptrecPackOrderBuffer."Ship-to Name" := lasToAddress[1];
      ptrecPackOrderBuffer."Ship-to Address" := lasToAddress[2];
      ptrecPackOrderBuffer."Ship-to Address 2" := lasToAddress[3];
      ptrecPackOrderBuffer."Ship-to City" := lasToAddress[4];
      ptrecPackOrderBuffer."Ship-to County" := lasToAddress[5];
      ptrecPackOrderBuffer."Ship-to Country/Region Code" := lasToAddress[6];
      ptrecPackOrderBuffer."Ship-to Post Code" := lasToAddress[7];
      ptrecPackOrderBuffer."Ship-to Phone No." := lasToAddress[8];
      ptrecPackOrderBuffer."Sell-to Customer No." := precSalesHeader."Sell-to Customer No.";
      ptrecPackOrderBuffer."Ship-to Name 2" := precSalesHeader."Ship-to Name 2";

      ptrecPackOrderBuffer."Shipping Agent Code" := precSalesHeader."Shipping Agent Code";
      //-->TPZ  PKS Commented Shipping Agent Service Code and added E Ship Agent Service to use in factbox
      //ptrecPackOrderBuffer."Shipping Agent Service Code" := precSalesHeader."Shipping Agent Service Code"
      ptrecPackOrderBuffer."E-Ship Agent Service" := precSalesHeader."E-Ship Agent Service";
      //<--
      ptrecPackOrderBuffer."Shipment Method Code" := precSalesHeader."Shipment Method Code";
    END;

    PROCEDURE setShipToDetailFromTransferOrder@1000000019(VAR ptrecPackOrderBuffer@1000000000 : TEMPORARY Record 23044601;precTransferHeader@1000000001 : Record 5740);
    VAR
      lasToAddress@1000000002 : ARRAY [12] OF Text[100];
    BEGIN
      //<FUNC>
      //  Description: Populates the ship to information for the transfer order
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      cuRateMgmt.getShipToAddressFromTransferHeader(precTransferHeader, FALSE, lasToAddress);

      ptrecPackOrderBuffer."Ship-to Name" := lasToAddress[1];
      ptrecPackOrderBuffer."Ship-to Address" := lasToAddress[2];
      ptrecPackOrderBuffer."Ship-to Address 2" := lasToAddress[3];
      ptrecPackOrderBuffer."Ship-to City" := lasToAddress[4];
      ptrecPackOrderBuffer."Ship-to County" := lasToAddress[5];
      ptrecPackOrderBuffer."Ship-to Country/Region Code" := lasToAddress[6];
      ptrecPackOrderBuffer."Ship-to Post Code" := lasToAddress[7];
      ptrecPackOrderBuffer."Ship-to Phone No." := lasToAddress[8];
      ptrecPackOrderBuffer."Sell-to Customer No." := '';
      ptrecPackOrderBuffer."Ship-to Name 2" := precTransferHeader."Transfer-to Name 2";

      ptrecPackOrderBuffer."Shipping Agent Code" := precTransferHeader."Shipping Agent Code";
      //-->TPZ  PKS Commented Shipping Agent Service Code and added E Ship Agent Service to use in factbox
      //ptrecPackOrderBuffer."Shipping Agent Service Code" := precTransferHeader."Shipping Agent Service Code";
      ptrecPackOrderBuffer."E-Ship Agent Service" := precTransferHeader."E-Ship Agent Service"; //pks
      //<--
      ptrecPackOrderBuffer."Shipment Method Code" := precTransferHeader."Shipment Method Code";
    END;

    LOCAL PROCEDURE setShipToDetailFromPurchaseReturnOrder@1000000003(VAR ptrecPackOrderBuffer@1000000000 : TEMPORARY Record 23044601;precPurchaseHeader@1000000001 : Record 38);
    VAR
      lasToAddress@1000000002 : ARRAY [12] OF Text[100];
    BEGIN
      //<FUNC>
      //  Description: Populates the ship to information for the purchase return order
      //  Called From: This codeunit (CU23044600)
      //  Side Effect: None
      //</FUNC>

      cuRateMgmt.getShipToAddressFromPurchaseHeader(precPurchaseHeader, FALSE, lasToAddress);

      ptrecPackOrderBuffer."Ship-to Name" := lasToAddress[1];
      ptrecPackOrderBuffer."Ship-to Address" := lasToAddress[2];
      ptrecPackOrderBuffer."Ship-to Address 2" := lasToAddress[3];
      ptrecPackOrderBuffer."Ship-to City" := lasToAddress[4];
      ptrecPackOrderBuffer."Ship-to County" := lasToAddress[5];
      ptrecPackOrderBuffer."Ship-to Country/Region Code" := lasToAddress[6];
      ptrecPackOrderBuffer."Ship-to Post Code" := lasToAddress[7];
      ptrecPackOrderBuffer."Ship-to Phone No." := lasToAddress[8];
      ptrecPackOrderBuffer."Sell-to Customer No." := precPurchaseHeader."Pay-to Vendor No.";
      ptrecPackOrderBuffer."Ship-to Name 2" := precPurchaseHeader."Ship-to Name 2";

      //ptrecPackOrderBuffer."Shipping Agent Code" := precSalesHeader."Shipping Agent Code";
      //ptrecPackOrderBuffer."Shipping Agent Service Code" := precSalesHeader."Shipping Agent Service Code";
      //ptrecPackOrderBuffer."Shipment Method Code" := precSalesHeader."Shipment Method Code";
    END;

    LOCAL PROCEDURE setShipToDetailFromServiceOrder@1000000016(VAR ptrecPackOrderBuffer@1000000000 : TEMPORARY Record 23044601;precServiceHeader@1000000001 : Record 5900);
    VAR
      lasToAddress@1000000002 : ARRAY [12] OF Text[100];
    BEGIN
      //<FUNC>
      //  Description: Populates the ship to information for the service order
      //  Called From: This codeunit (CU23044600)
      //  Side Effect: None
      //</FUNC>

      cuRateMgmt.getShipToAddressFromServiceHeader(precServiceHeader, FALSE, lasToAddress);

      ptrecPackOrderBuffer."Ship-to Name" := lasToAddress[1];
      ptrecPackOrderBuffer."Ship-to Address" := lasToAddress[2];
      ptrecPackOrderBuffer."Ship-to Address 2" := lasToAddress[3];
      ptrecPackOrderBuffer."Ship-to City" := lasToAddress[4];
      ptrecPackOrderBuffer."Ship-to County" := lasToAddress[5];
      ptrecPackOrderBuffer."Ship-to Country/Region Code" := lasToAddress[6];
      ptrecPackOrderBuffer."Ship-to Post Code" := lasToAddress[7];
      ptrecPackOrderBuffer."Ship-to Phone No." := lasToAddress[8];
      ptrecPackOrderBuffer."Sell-to Customer No." := precServiceHeader."Customer No.";
      ptrecPackOrderBuffer."Ship-to Name 2" := precServiceHeader."Ship-to Name 2";
    END;

    PROCEDURE setStatusFields@1000000000(VAR ptrecPackOrderBuffer@1000000000 : TEMPORARY Record 23044601;precrRecRef@1000000007 : RecordRef;poptSourceDocType@1000000002 : Option;pcodSourceNo@1000000003 : Code[20]);
    VAR
      lrecLPHeader@1000000001 : Record 23044505;
      lrecUOMFrom@1000000009 : Record 23044525;
      lrecUOMTo@1000000008 : Record 23044525;
      ltrecPackLineBuffer@1000000011 : TEMPORARY Record 23044602;
      liNumPackages@1000000004 : Integer;
      liNumLabels@1000000005 : Integer;
      ldTotalWeight@1000000010 : Decimal;
      lcodWeightUOM@1000000006 : Code[10];
      ldTotaLPItemQty@1000000012 : Decimal;
      ldUnShippedQty@1000000013 : Decimal;
      lrecLineUsage@1000000014 : Record 23044507;
      lcodPreLPNumber@1000000015 : Code[20];
      SHLoc@1000000016 : Record 36;
      THLoc@1000000017 : Record 5740;
      lrecShipment@1000000018 : Record 7320;
      lrecShipmentLine@1000000019 : Record 7321;
    BEGIN
      //<FUNC>
      //  Description: Populates the various package status indicators and statistics
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      liNumPackages := 0;
      liNumLabels := 0;
      lcodWeightUOM := '';
      ldTotalWeight := 0;

      lrecLineUsage.SETCURRENTKEY("License Plate No.", "License Plate Line No.", "Posting Date");
      lrecLineUsage.SETRANGE("Source Document", poptSourceDocType);
      lrecLineUsage.SETRANGE("Source No.", pcodSourceNo);
      lrecLineUsage.SETRANGE("Posting Date", 0D);
      lrecLineUsage.ASCENDING(TRUE);   // Must sort by license plate no.
      lcodPreLPNumber := '';
      IF ( lrecLineUsage.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          IF ( lcodPreLPNumber <> lrecLineUsage."License Plate No.") THEN BEGIN
            lrecLPHeader.GET(lrecLineUsage."License Plate No.");
            lrecLPHeader.CALCFIELDS("Item Quantity Count", "Package Carrier Label");
            ldTotaLPItemQty += lrecLPHeader."Item Quantity Count";
            liNumPackages += 1;
            IF ( lrecLPHeader."Package Carrier Label".HASVALUE ) THEN
              liNumLabels += 1;

            IF ( lcodWeightUOM = '' ) THEN BEGIN
              lcodWeightUOM := lrecLPHeader."Weight Unit of Measure";
              IF ( lrecUOMTo.GET(lcodWeightUOM) ) THEN ;
            END;

            IF ( lcodWeightUOM <> '' ) THEN BEGIN
              IF ( lrecUOMFrom.GET(lrecLPHeader."Weight Unit of Measure") ) THEN
                ldTotalWeight += cuIWXCommonBase.ConvertUOMGeneric(lrecLPHeader."Shipment Gross Weight", lrecUOMFrom."Qty. per Unit of Measure", lrecUOMTo."Qty. per Unit of Measure")
              ELSE
                ldTotalWeight += lrecLPHeader."Shipment Gross Weight";
            END ELSE
              ldTotalWeight += lrecLPHeader."Shipment Gross Weight";

            lcodPreLPNumber := lrecLineUsage."License Plate No.";
          END;

        UNTIL(lrecLineUsage.NEXT=0);
      END;
      //-->Pankaj in case of pickup just made that the label printed $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
      CASE ptrecPackOrderBuffer."Document Type" OF
        ptrecPackOrderBuffer."Document Type"::"Warehouse Shipment":
        BEGIN
          lrecShipmentLine.SETRANGE("No.",ptrecPackOrderBuffer."Document No.");
          IF lrecShipmentLine.FINDFIRST THEN BEGIN
            IF SHLoc.GET(SHLoc."Document Type"::Order,lrecShipmentLine."Source No.") AND (SHLoc."Shipping Agent Code" = 'PICKUP') THEN
              liNumLabels := 1
            ELSE IF THLoc.GET(lrecShipmentLine."Source No.") AND (THLoc."Shipping Agent Code" = 'PICKUP') THEN
              liNumLabels := 1;
          END;
        END;
        ptrecPackOrderBuffer."Document Type"::"Sales Order":
        BEGIN
          IF SHLoc.GET(SHLoc."Document Type"::Order, ptrecPackOrderBuffer."Document No.") AND (SHLoc."Shipping Agent Code" = 'PICKUP') THEN
              liNumLabels := 1;
        END;
        ptrecPackOrderBuffer."Document Type"::"Outbound Transfer":
        BEGIN
          IF THLoc.GET(ptrecPackOrderBuffer."Document No.") AND (THLoc."Shipping Agent Code" = 'PICKUP') THEN
              liNumLabels := 1;
        END;
      END;

      //<--$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
      ptrecPackOrderBuffer."Has Shipment Label" := liNumLabels > 0;
      ptrecPackOrderBuffer."No. of Labels" := liNumLabels;
      ptrecPackOrderBuffer."No. of Packages" := liNumPackages;
      ptrecPackOrderBuffer."Total Package Weight" := ldTotalWeight;
      ptrecPackOrderBuffer."Weight Unit of Measure Code" := lcodWeightUOM;
      ptrecPackOrderBuffer."Total Packed Item Quantity" := ldTotaLPItemQty;
      IF ( liNumLabels = 0 ) THEN
        ptrecPackOrderBuffer."Labelled Status" := ptrecPackOrderBuffer."Labelled Status"::"Not Labelled"
      ELSE BEGIN
        ldUnShippedQty := getUnShippedQty(precrRecRef);
        // less than / equal because of assemblies, potential for mixed order errors
        // disregarding precision for now because of added complexity.
        IF ( (ldUnShippedQty = 0) OR (ldUnShippedQty <= ldTotaLPItemQty) ) THEN
          ptrecPackOrderBuffer."Labelled Status" := ptrecPackOrderBuffer."Labelled Status"::"Completely Labelled"
        ELSE
          ptrecPackOrderBuffer."Labelled Status" := ptrecPackOrderBuffer."Labelled Status"::"Partially Labelled";
      END;
    END;

    LOCAL PROCEDURE getUnShippedQty@1000000018(precrRecRef@1000000000 : RecordRef) : Decimal;
    VAR
      lrecWhseShipHeader@1000000004 : Record 7320;
      lrecSalesHeader@1000000001 : Record 36;
      lrecTransferHeader@1000000003 : Record 5740;
      ldUnShippedQty@1000000002 : Decimal;
    BEGIN
      CASE precrRecRef.NUMBER OF
        DATABASE::"Warehouse Shipment Header":
          BEGIN
            precrRecRef.SETTABLE(lrecWhseShipHeader);
            ldUnShippedQty := getWhseShipUnShippedQty(lrecWhseShipHeader);
          END;
        DATABASE::"Transfer Header":
          BEGIN
            precrRecRef.SETTABLE(lrecTransferHeader);
            ldUnShippedQty := getTransferOrderUnShippedQty(lrecTransferHeader);
          END;
        DATABASE::"Sales Header":
          BEGIN
            precrRecRef.SETTABLE(lrecSalesHeader);
            ldUnShippedQty := getSalesOrderUnShippedQty(lrecSalesHeader);
          END;
      END;

      EXIT(ldUnShippedQty);
    END;

    LOCAL PROCEDURE getSalesOrderUnShippedQty@1000000022(precSalesHeader@1000000001 : Record 36) : Decimal;
    VAR
      lrecSalesLine@1000000000 : Record 37;
      lrecAssemblyLine@1000000004 : Record 901;
      ldUnShippedQty@1000000002 : Decimal;
      ldUnshippedQtyLine@1000000005 : Decimal;
      lcodAssemblyOrderNo@1000000003 : Code[20];
    BEGIN

      lrecSalesLine.SETRANGE("Document Type", precSalesHeader."Document Type");
      lrecSalesLine.SETRANGE("Document No.", precSalesHeader."No.");
      lrecSalesLine.SETRANGE(Type, lrecSalesLine.Type::Item);
      lrecSalesLine.SETFILTER("No.", '<>%1', '');
      IF ( lrecSalesLine.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
        //  Counts the items per BOM ensuring a match with the LP's item qty count
          ldUnshippedQtyLine := lrecSalesLine.Quantity - lrecSalesLine."Quantity Shipped";
          lcodAssemblyOrderNo := cuPackMgmt.getAssembleToOrderNo(1, lrecSalesLine."Document No.", lrecSalesLine."Line No.");
          IF ( (lcodAssemblyOrderNo <> '') AND (ldUnshippedQtyLine>0) ) THEN BEGIN
            ldUnshippedQtyLine := 0;
            lrecAssemblyLine.SETRANGE("Document Type", lrecAssemblyLine."Document Type"::Order);
            lrecAssemblyLine.SETRANGE("Document No.", lcodAssemblyOrderNo);
            lrecAssemblyLine.SETRANGE(Type, lrecAssemblyLine.Type::Item);
            IF ( lrecAssemblyLine.FINDSET(FALSE) ) THEN BEGIN
              REPEAT
                ldUnshippedQtyLine += lrecAssemblyLine.Quantity;
              UNTIL( lrecAssemblyLine.NEXT=0 );
            END; // if lrecassemblyline.findset
          END; // if lcodAssemblyOrderNo <> ''

          ldUnShippedQty += ldUnshippedQtyLine;
        UNTIL(lrecSalesLine.NEXT=0);
      END;

      EXIT(ldUnShippedQty);
    END;

    LOCAL PROCEDURE getTransferOrderUnShippedQty@1000000026(precTransferHeader@1000000001 : Record 5740) : Decimal;
    VAR
      lrecTransferLine@1000000000 : Record 5741;
      ldUnShippedQty@1000000002 : Decimal;
    BEGIN
      ldUnShippedQty := 0;
      lrecTransferLine.SETRANGE("Document No.", precTransferHeader."No.");
      IF ( lrecTransferLine.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          ldUnShippedQty += lrecTransferLine.Quantity - lrecTransferLine."Quantity Shipped";
        UNTIL(lrecTransferLine.NEXT=0);
      END;

      EXIT(ldUnShippedQty);
    END;

    LOCAL PROCEDURE getWhseShipUnShippedQty@1000000027(precWhseShipHeader@1000000001 : Record 7320) : Decimal;
    VAR
      lrecDShipSetup@1000000003 : Record 23044600;
      lrecWhseShipLine@1000000000 : Record 7321;
      ldUnShippedQty@1000000002 : Decimal;
      ldQuantity@1000000004 : Decimal;
    BEGIN

      ldUnShippedQty := 0;
      lrecWhseShipLine.SETRANGE("No.", precWhseShipHeader."No.");
      IF ( lrecWhseShipLine.FINDSET(FALSE) ) THEN BEGIN
        lrecDShipSetup.GET;
        REPEAT
          IF ( lrecDShipSetup."Shipment Line Visibility" = lrecDShipSetup."Shipment Line Visibility"::"Show Picked" ) THEN
            ldQuantity := lrecWhseShipLine."Pick Qty."
          ELSE
            ldQuantity := lrecWhseShipLine.Quantity;
          ldUnShippedQty += ldQuantity - lrecWhseShipLine."Qty. Shipped";
        UNTIL(lrecWhseShipLine.NEXT=0);
      END;

      EXIT(ldUnShippedQty);
    END;

    PROCEDURE showOrderDocument@1000000008(ptrecPackOrderBuffer@1000000000 : TEMPORARY Record 23044601);
    VAR
      lrecWhseShipHeader@1000000001 : Record 7320;
      lrecSalesHeader@1000000002 : Record 36;
      lrecTransferHeader@1000000003 : Record 5740;
    BEGIN
      //<FUNC>
      //  Description: Opens the specified document
      //  Called From: Page "DynamicShip Order Packaging" (ID: 23044601)
      //  Side Effect: None
      //</FUNC>

      CASE ptrecPackOrderBuffer."Document Type" OF
        ptrecPackOrderBuffer."Document Type"::"Warehouse Shipment":
          BEGIN
            lrecWhseShipHeader.GET(ptrecPackOrderBuffer."Document No.");
            PAGE.RUN(PAGE::"Warehouse Shipment", lrecWhseShipHeader);
          END;
        ptrecPackOrderBuffer."Document Type"::"Sales Order":
          BEGIN
            lrecSalesHeader.GET(ptrecPackOrderBuffer."Document Subtype", ptrecPackOrderBuffer."Document No.");
            PAGE.RUN(PAGE::"Sales Order", lrecSalesHeader);
          END;
        ptrecPackOrderBuffer."Document Type"::"Outbound Transfer":
          BEGIN
            lrecTransferHeader.GET(ptrecPackOrderBuffer."Document No.");
            PAGE.RUN(PAGE::"Transfer Order", lrecTransferHeader);
          END;
      END;
    END;

    PROCEDURE showOrderComments@1000000017(ptrecPackOrderBuffer@1000000000 : TEMPORARY Record 23044601);
    VAR
      lrecSalesCommentLine@1000000004 : Record 44;
      lrecWhseCommentLine@1000000005 : Record 5770;
      lrecInvCommentLine@1000000006 : Record 5748;
    BEGIN
      //<FUNC>
      //  Description: Opens the specified documents comments
      //  Called From: Page "DynamicShip Order Packaging" (ID: 23044601)
      //  Side Effect: None
      //</FUNC>

      CASE ptrecPackOrderBuffer."Document Type" OF
        ptrecPackOrderBuffer."Document Type"::"Warehouse Shipment":
          BEGIN
            lrecWhseCommentLine.SETRANGE("Table Name", lrecWhseCommentLine."Table Name"::"Whse. Shipment");
            lrecWhseCommentLine.SETRANGE(Type, lrecWhseCommentLine.Type::" ");
            lrecWhseCommentLine.SETRANGE("No.", ptrecPackOrderBuffer."Document No.");
            PAGE.RUN(PAGE::"Warehouse Comment Sheet", lrecWhseCommentLine);
          END;
        ptrecPackOrderBuffer."Document Type"::"Sales Order":
          BEGIN
            lrecSalesCommentLine.SETRANGE("Document Type", ptrecPackOrderBuffer."Document Subtype");
            lrecSalesCommentLine.SETRANGE("No.", ptrecPackOrderBuffer."Document No.");
            lrecSalesCommentLine.SETRANGE("Document Line No.",0);
            PAGE.RUN(PAGE::"Sales Comment Sheet", lrecSalesCommentLine);
          END;
        ptrecPackOrderBuffer."Document Type"::"Outbound Transfer":
          BEGIN
            lrecInvCommentLine.SETRANGE("Document Type", lrecInvCommentLine."Document Type"::"Transfer Order");
            lrecInvCommentLine.SETRANGE("No.", ptrecPackOrderBuffer."Document No.");
            PAGE.RUN(PAGE::"Inventory Comment Sheet", lrecInvCommentLine);
          END;
      END;
    END;

    PROCEDURE postOrder@1000000001(ptrecPackOrderBuffer@1000000000 : TEMPORARY Record 23044601);
    VAR
      lrecWhseShipHeader@1000000001 : Record 7320;
      lrecSalesHeader@1000000002 : Record 36;
      lrecTransferHeader@1000000003 : Record 5740;
      lrecDShipConfig@1000000006 : Record 23044600;
      lrecLPHeader@1000000013 : Record 23044505;
      lbPostOrder@1000000004 : Boolean;
      liOptionNumber@1000000005 : Integer;
      liTempSessionID@1000000007 : Integer;
      lrecrRecRef@1000000012 : RecordRef;
      ltrecDShipEmailDetailsBuffer@1000000011 : TEMPORARY Record 23044615;
      lcuDShipEmailMngmt@1000000010 : Codeunit 23044606;
      lbSendEmail@1000000008 : Boolean;
      loptLPSourceType@1000000009 : Option;
      WhseSalesPostviaJobQueue@100000000 : Codeunit 50008;
      SalesSetup@100000001 : Record 311;
      ShippingSetup@1000000014 : Record 14000707;
      WarehouseShipmentLine@1000000015 : Record 7321;
      SalesHeader@1000000016 : Record 36;
    BEGIN
      //<FUNC>
      //  Description: Posts the specified order
      //  Called From: Page "DynamicShip Order Packaging" (ID: 23044601)
      //  Side Effect: None
      //</FUNC>

      lrecDShipConfig.GET;

      IF ( lrecDShipConfig."Prevent Posting without Labels" = lrecDShipConfig."Prevent Posting without Labels"::Yes ) THEN
        IF ( NOT ptrecPackOrderBuffer."Has Shipment Label" ) THEN
          ERROR(tcNoLabels);

      IF ( cuRateMgmt.callPostExtension(lrecDShipConfig."Shipment Extension Codeunit", '', ptrecPackOrderBuffer."Document Type", ptrecPackOrderBuffer."Document No.") ) THEN
        EXIT;
      // reset status fields in case changes were made in extension, to avoid dialogue
      CASE ptrecPackOrderBuffer."Document Type" OF
        ptrecPackOrderBuffer."Document Type"::"Warehouse Shipment":
          BEGIN
            lrecWhseShipHeader.GET(ptrecPackOrderBuffer."Document No.");
            lrecrRecRef.GETTABLE(lrecWhseShipHeader);
            loptLPSourceType := lrecLPHeader."Source Document"::Shipment;
          END;
        ptrecPackOrderBuffer."Document Type"::"Sales Order":
          BEGIN
            lrecSalesHeader.GET(lrecSalesHeader."Document Type"::Order, ptrecPackOrderBuffer."Document No.");
            lrecrRecRef.GETTABLE(lrecSalesHeader);
            loptLPSourceType := lrecLPHeader."Source Document"::"Sales Order";
          END;
        ptrecPackOrderBuffer."Document Type"::"Outbound Transfer":
          BEGIN
            lrecTransferHeader.GET(ptrecPackOrderBuffer."Document No.");
            lrecrRecRef.GETTABLE(lrecTransferHeader);
            loptLPSourceType := lrecLPHeader."Source Document"::"Outbound Transfer";
          END;
      END; // case "Document Type"

      setStatusFields(ptrecPackOrderBuffer, lrecrRecRef, loptLPSourceType, ptrecPackOrderBuffer."Document No.");

      lbSendEmail := lrecDShipConfig."Tracking E-mail Trigger" = lrecDShipConfig."Tracking E-mail Trigger"::"After Post";
      IF ( lbSendEmail ) THEN
        lbSendEmail := NOT cuRateMgmt.callSendEmailExtension(lrecDShipConfig."Shipment Extension Codeunit", ptrecPackOrderBuffer."Document Type", ptrecPackOrderBuffer."Document No.");

      lbPostOrder := TRUE;
      IF ( ptrecPackOrderBuffer."Labelled Status" <> ptrecPackOrderBuffer."Labelled Status"::"Completely Labelled") THEN BEGIN
        IF ( NOT DIALOG.CONFIRM(tcNotFinishPack) ) THEN
          lbPostOrder := FALSE;
      END;

      IF ( lbPostOrder ) THEN BEGIN
        CASE ptrecPackOrderBuffer."Document Type" OF
          ptrecPackOrderBuffer."Document Type"::"Warehouse Shipment":
            BEGIN
              lrecWhseShipHeader.GET(ptrecPackOrderBuffer."Document No.");
              IF ( lbSendEmail ) THEN
                lcuDShipEmailMngmt.initEmailBuffer(lrecrRecRef, ltrecDShipEmailDetailsBuffer);
              postWhseShipment(lrecWhseShipHeader);
              IF ( lbSendEmail ) THEN
                STARTSESSION(liTempSessionID, CODEUNIT::"DSHIP E-mail Management", COMPANYNAME, ltrecDShipEmailDetailsBuffer);
            END;
          ptrecPackOrderBuffer."Document Type"::"Sales Order":
            BEGIN
              lrecSalesHeader.GET(lrecSalesHeader."Document Type"::Order, ptrecPackOrderBuffer."Document No.");
              IF ( lbSendEmail ) THEN
                lcuDShipEmailMngmt.initEmailBuffer(lrecrRecRef, ltrecDShipEmailDetailsBuffer);
              postSalesOrder(lrecSalesHeader);
              IF ( lbSendEmail ) THEN
                STARTSESSION(liTempSessionID, CODEUNIT::"DSHIP E-mail Management", COMPANYNAME, ltrecDShipEmailDetailsBuffer);
            END;
          ptrecPackOrderBuffer."Document Type"::"Outbound Transfer":
            BEGIN
              lrecTransferHeader.GET(ptrecPackOrderBuffer."Document No.");
              postTransferOrder(lrecTransferHeader);
            END;
        END; // case "Document Type"
      END; // if lbPostOrder
    END;

    LOCAL PROCEDURE postWhseShipment@1000000011(precWhseShipHeader@1000000000 : Record 7320);
    VAR
      lrecDShipConfig@1000000002 : Record 23044600;
      lrecWhseShipHeader@1000000001 : Record 7320;
      lrecWhseShipLine@1000000003 : Record 7321;
      lrecSalesInvoiceHeader@1000000006 : Record 112;
      lrecServiceInvoiceHeader@1000000005 : Record 5992;
      lrecPostedWhseShipmentLine@1000000010 : Record 7323;
      lcuWhsePostShipment@1000000004 : Codeunit 5763;
      loptPostBehaviour@1000000007 : Option;
      lbIsSalesOrder@1000000009 : Boolean;
      SalesSetup@100000000 : Record 311;
      WhseSalesPostviaJobQueue@100000001 : Codeunit 50008;
      SalesHeader@100000002 : Record 36;
      Shipping@1170000000 : Codeunit 14000701;
      PackLineScanningMgt@1170000001 : Codeunit 14000710;
      WhseShipLineLoc@1000000008 : Record 7321;
      SourceNoLoc@1000000011 : Code[20];
      IWXLicensePlateLineUsage@1000000012 : Record 23044507;
    BEGIN
      //<FUNC>
      //  Description: Posts the warehouse shipment
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      lrecDShipConfig.GET;

      lrecWhseShipHeader := precWhseShipHeader;
      lrecWhseShipLine.SETRANGE("No.", lrecWhseShipHeader."No.");
      IF ( lrecWhseShipLine.FINDSET(FALSE) ) THEN BEGIN
        lrecWhseShipHeader.VALIDATE("Posting Date",TODAY);
        lrecWhseShipHeader.MODIFY(TRUE);

        lbIsSalesOrder := lrecWhseShipLine."Source Document" = lrecWhseShipLine."Source Document"::"Sales Order";
        IF ( lbIsSalesOrder ) THEN
          getPostBehaviour(lrecWhseShipLine."Source No.",
                           loptPostBehaviour)
        ELSE
          loptPostBehaviour := lrecDShipConfig."Order Post Behaviour";

        CASE loptPostBehaviour OF
          lrecDShipConfig."Order Post Behaviour"::Ship,
          lrecDShipConfig."Order Post Behaviour"::"Ship (Print)":
            BEGIN
              lcuWhsePostShipment.SetPostingSettings(FALSE);
            END;
          lrecDShipConfig."Order Post Behaviour"::"Ship and Invoice",
          lrecDShipConfig."Order Post Behaviour"::"Ship (Print) and Invoice",
          lrecDShipConfig."Order Post Behaviour"::"Ship (Print) and Invoice (Print)",
          lrecDShipConfig."Order Post Behaviour"::"Ship and Invoice (Print)":
            BEGIN
              // only post invoice if sales order
              IF ( (lbIsSalesOrder) OR
                    (lrecWhseShipLine."Source Document" = lrecWhseShipLine."Source Document"::"Service Order") )
              THEN
                lcuWhsePostShipment.SetPostingSettings(TRUE);
            END;
        END;
        //>>TPZ2895  Pankaj
        { Code commented and used combine shipment
      //Blocked auto shipment Sheduled in Job queue
        //lcuWhsePostShipment.RUN(lrecWhseShipLine); //TPZ2693
              //>>TPZ2693
          SalesSetup.GET;
          IF SalesSetup."Post from Whse. with Job Q." THEN
            IF SalesHeader.GET(SalesHeader."Document Type"::Order,lrecWhseShipLine."Source No.") THEN
              WhseSalesPostviaJobQueue.EnqueueWhseDoc(SalesHeader);
            //PackLineScanningMgt.CreatePackage;//TPZ2693
            Shipping.CreateShipChargeSalesHeader(SalesHeader);//TPZ2693
        //<<TPZ2693
        }
        //Combine Shipment
        WhseShipLineLoc.RESET;
        WhseShipLineLoc.SETCURRENTKEY("No.","Source Document","Source No.");
        WhseShipLineLoc.SETRANGE("No.",lrecWhseShipLine."No.");
        IF WhseShipLineLoc.FINDFIRST THEN
          REPEAT
            IF SourceNoLoc <> WhseShipLineLoc."Source No." THEN BEGIN
              SalesSetup.GET;
              IF SalesSetup."Post from Whse. with Job Q." THEN
                IF SalesHeader.GET(SalesHeader."Document Type"::Order,WhseShipLineLoc."Source No.") THEN BEGIN
                //-->TPZ3353 In case of MOP need to check License plate usage line
                  IWXLicensePlateLineUsage.RESET;
                  IWXLicensePlateLineUsage.SETRANGE("Source Document",IWXLicensePlateLineUsage."Source Document"::Shipment);
                  IWXLicensePlateLineUsage.SETRANGE("Source No.",WhseShipLineLoc."No.");
                  //IWXLicensePlateLineUsage.SETRANGE("Source Line No.",WhseShipLineLoc."Line No.");
                  IWXLicensePlateLineUsage.SETRANGE("Posting Date",0D);
                  IF IWXLicensePlateLineUsage.FINDFIRST THEN
                    //<--TPZ3353
                    WhseSalesPostviaJobQueue.EnqueueWhseDoc(SalesHeader);
                  //Shipping.CreateShipChargeSalesHeader(SalesHeader); //PKS Code commented to skip package station
      END;
            END;
            SourceNoLoc := WhseShipLineLoc."Source No.";
          UNTIL WhseShipLineLoc.NEXT = 0;
        //<<TPZ2895
      END;

      lrecPostedWhseShipmentLine.SETRANGE("Whse. Shipment No.", lrecWhseShipHeader."No.");
      IF ( lrecPostedWhseShipmentLine.FINDLAST ) THEN BEGIN
        CASE loptPostBehaviour OF
          lrecDShipConfig."Order Post Behaviour"::"Ship (Print)",
          lrecDShipConfig."Order Post Behaviour"::"Ship (Print) and Invoice",
          lrecDShipConfig."Order Post Behaviour"::"Ship (Print) and Invoice (Print)":
            BEGIN
              CASE lrecPostedWhseShipmentLine."Posted Source Document" OF
                lrecPostedWhseShipmentLine."Posted Source Document"::"Posted Shipment":
                  BEGIN
                    CASE lrecWhseShipLine."Source Document" OF
                      lrecWhseShipLine."Source Document"::"Sales Order": BEGIN
                      //>>TPZ2895  Pankaj Code commented and used combine shipment
                      {//>>vaseem
                       SalesSetup.GET;
                       IF SalesSetup."Post from Whse. with Job Q." THEN
                         IF SalesHeader.GET(SalesHeader."Document Type"::Order,lrecWhseShipLine."Source No.") THEN
                          WhseSalesPostviaJobQueue.EnqueueWhseDoc(SalesHeader);
                      //<<vaseem
                      }
                      //Combine Shipment
                      CLEAR(SourceNoLoc);
                      WhseShipLineLoc.RESET;
                      WhseShipLineLoc.SETCURRENTKEY("No.","Source Document","Source No.");
                      WhseShipLineLoc.SETRANGE("No.",lrecWhseShipLine."No.");
                      IF WhseShipLineLoc.FINDFIRST THEN
                        REPEAT
                          IF SourceNoLoc <> WhseShipLineLoc."Source No." THEN BEGIN
                            SalesSetup.GET;
                            IF SalesSetup."Post from Whse. with Job Q." THEN
                              IF SalesHeader.GET(SalesHeader."Document Type"::Order,WhseShipLineLoc."Source No.") THEN BEGIN
                                WhseSalesPostviaJobQueue.EnqueueWhseDoc(SalesHeader);
                              END;
                          END;
                          SourceNoLoc := WhseShipLineLoc."Source No.";
                        UNTIL WhseShipLineLoc.NEXT = 0;
                      //<<TPZ2895
                        printPostedDocument(lrecPostedWhseShipmentLine."Posted Source No.", 0);
                      END;
                      lrecWhseShipLine."Source Document"::"Service Order":
                        printPostedDocument(lrecPostedWhseShipmentLine."Posted Source No.", 4);
                    END;
                  END;
                lrecPostedWhseShipmentLine."Posted Source Document"::"Posted Transfer Shipment":
                  printPostedDocument(lrecPostedWhseShipmentLine."Posted Source No.", 2);
                lrecPostedWhseShipmentLine."Posted Source Document"::"Posted Return Shipment":
                  printPostedDocument(lrecPostedWhseShipmentLine."Posted Source No.", 3);
              END;
            END
        END; // case lrecDShipConfig."Sales Order Post Behaviour"
        // print invoice document
        CASE loptPostBehaviour OF
          lrecDShipConfig."Order Post Behaviour"::"Ship (Print) and Invoice (Print)",
          lrecDShipConfig."Order Post Behaviour"::"Ship and Invoice (Print)":
            BEGIN
              CASE lrecPostedWhseShipmentLine."Source Document" OF
                lrecPostedWhseShipmentLine."Source Document"::"Sales Order":
                  BEGIN
                    lrecSalesInvoiceHeader.SETRANGE("Order No.", lrecPostedWhseShipmentLine."Source No.");
                    IF ( lrecSalesInvoiceHeader.FINDLAST ) THEN
                      printPostedDocument(lrecSalesInvoiceHeader."No.", 1);
                  END;
                lrecWhseShipLine."Source Document"::"Service Order":
                  BEGIN
                    lrecServiceInvoiceHeader.SETRANGE("Order No.", lrecPostedWhseShipmentLine."Source No.");
                    IF ( lrecServiceInvoiceHeader.FINDLAST ) THEN
                      printPostedDocument(lrecServiceInvoiceHeader."No.", 5);
                  END;
              END;
            END;
        END; // case lrecDShipConfig."Sales Order Post Behaviour"
      END;

      //lcuWhsePostShipment.GetResultMessage;
    END;

    LOCAL PROCEDURE postSalesOrder@1000000005(precSalesHeader@1000000000 : Record 36);
    VAR
      lrecDShipConfig@1000000003 : Record 23044600;
      lrecSalesHeader@1000000001 : Record 36;
      lrecSalesShptHeader@1000000005 : Record 110;
      lrecSalesInvHeader@1000000006 : Record 112;
      lrecReportSelection@1000000004 : Record 77;
      loptPostBehaviour@1000000002 : Option;
      SalesSetup@100000000 : Record 311;
      WhseSalesPostviaJobQueue@100000001 : Codeunit 50008;
      SalesHeader@1000000007 : Record 36;
    BEGIN
      //<FUNC>
      //  Description: Posts the sales order
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>

      lrecSalesHeader := precSalesHeader;
      lrecSalesHeader.VALIDATE("Posting Date",TODAY);
      lrecSalesHeader.MODIFY(TRUE);
      lrecSalesHeader.Ship := TRUE;

      getPostBehaviour(lrecSalesHeader."No.",
                       loptPostBehaviour);

      //  Act according to selected post behaviour
      CASE loptPostBehaviour OF
        lrecDShipConfig."Order Post Behaviour"::Ship,
        lrecDShipConfig."Order Post Behaviour"::"Ship (Print)":
          BEGIN
            lrecSalesHeader.Invoice := FALSE;
          END;
        lrecDShipConfig."Order Post Behaviour"::"Ship and Invoice",
        lrecDShipConfig."Order Post Behaviour"::"Ship (Print) and Invoice",
        lrecDShipConfig."Order Post Behaviour"::"Ship (Print) and Invoice (Print)",
        lrecDShipConfig."Order Post Behaviour"::"Ship and Invoice (Print)":
          BEGIN
            lrecSalesHeader.Invoice := TRUE;
          END;
      END; // case lrecDShipConfig."Sales Order Post Behaviour"
      //-->TPZ3257 Pankaj
      //CODEUNIT.RUN(CODEUNIT::"Sales-Post", lrecSalesHeader);
      SalesSetup.GET;
      IF SalesSetup."Post from Whse. with Job Q." THEN
        IF SalesHeader.GET(SalesHeader."Document Type"::Order,lrecSalesHeader."No.") THEN
          WhseSalesPostviaJobQueue.EnqueueWhseDoc(SalesHeader);

      //<--TPZ3257
      // print shipment document
      CASE loptPostBehaviour OF
        lrecDShipConfig."Order Post Behaviour"::"Ship (Print)",
        lrecDShipConfig."Order Post Behaviour"::"Ship (Print) and Invoice",
        lrecDShipConfig."Order Post Behaviour"::"Ship (Print) and Invoice (Print)":
          BEGIN
            lrecSalesShptHeader.SETRANGE("Order No.", lrecSalesHeader."No.");
            IF ( lrecSalesShptHeader.FINDLAST ) THEN
              printPostedDocument(lrecSalesShptHeader."No.", 0);
          END;
      END;

      //print invoice document
      CASE loptPostBehaviour OF
        lrecDShipConfig."Order Post Behaviour"::"Ship (Print) and Invoice (Print)",
        lrecDShipConfig."Order Post Behaviour"::"Ship and Invoice (Print)":
          BEGIN
            lrecSalesInvHeader.SETRANGE("Order No.", lrecSalesHeader."No.");
            IF ( lrecSalesInvHeader.FINDLAST ) THEN
              printPostedDocument(lrecSalesInvHeader."No.", 1);
          END;
      END;
    END;

    LOCAL PROCEDURE postTransferOrder@1000000006(precTransferHeader@1000000000 : Record 5740);
    VAR
      lrecTransferHeader@1000000001 : Record 5740;
      lcuTransPost@1000000002 : Codeunit 5704;
    BEGIN
      //<FUNC>
      //  Description: Posts the transfer
      //  Called From: This codeunit
      //  Side Effect: None
      //</FUNC>
      EXIT; //TPZ3301
      lrecTransferHeader := precTransferHeader;
      lrecTransferHeader.VALIDATE("Posting Date",TODAY);
      lrecTransferHeader.MODIFY(TRUE);
      lcuTransPost.SetHideValidationDialog(TRUE);
      lcuTransPost.RUN(lrecTransferHeader);
    END;

    LOCAL PROCEDURE printPostedDocument@1000000009(pcodDocumentNo@1000000000 : Code[20];poptReportType@1000000003 : 'SalesShipment,SalesInvoice,TransferShipment,ReturnShipment,ServiceShipment,ServiceInvoice');
    VAR
      lrecSalesShptHeader@1000000001 : Record 110;
      lrecSalesInvoiceHeader@1000000004 : Record 112;
      lrecTransferShptHeader@1000000005 : Record 5744;
      lrecReturnShptHeader@1000000006 : Record 6650;
      lrecServiceShptHeader@1000000007 : Record 5990;
      lrecServiceInvoiceHeader@1000000008 : Record 5992;
      lrecReportSelection@1000000002 : Record 77;
    BEGIN
      //<FUNC>
      //  Description: Prints the posted document
      //  Called From: This codeunit (CU23044600)
      //  Side Effect: Whatever the side effects of running the report are
      //</FUNC>

      CASE poptReportType OF
        poptReportType::SalesShipment:
          BEGIN
            lrecSalesShptHeader.SETRANGE("No.", pcodDocumentNo);
            lrecSalesShptHeader.FINDLAST;
            lrecSalesShptHeader.SETRECFILTER;
            lrecReportSelection.SETRANGE(Usage, lrecReportSelection.Usage::"S.Shipment");
            IF ( lrecReportSelection.FINDSET ) THEN BEGIN
              REPEAT
                REPORT.RUN(lrecReportSelection."Report ID", FALSE, FALSE, lrecSalesShptHeader);
              UNTIL(lrecReportSelection.NEXT=0);
            END;
          END;
        poptReportType::SalesInvoice:
          BEGIN
            lrecSalesInvoiceHeader.SETRANGE("No.", pcodDocumentNo);
            lrecSalesInvoiceHeader.FINDLAST;
            lrecSalesInvoiceHeader.SETRECFILTER;
            lrecReportSelection.SETRANGE(Usage, lrecReportSelection.Usage::"S.Invoice");
            IF ( lrecReportSelection.FINDSET ) THEN BEGIN
              REPEAT
                REPORT.RUN(lrecReportSelection."Report ID", FALSE, FALSE, lrecSalesInvoiceHeader);
              UNTIL(lrecReportSelection.NEXT=0);
            END;
          END;
        poptReportType::TransferShipment:
          BEGIN
            lrecTransferShptHeader.SETRANGE("No.", pcodDocumentNo);
            lrecTransferShptHeader.FINDLAST;
            lrecTransferShptHeader.SETRECFILTER;
            lrecReportSelection.SETRANGE(Usage, lrecReportSelection.Usage::Inv2);
            IF ( lrecReportSelection.FINDSET ) THEN BEGIN
              REPEAT
                REPORT.RUN(lrecReportSelection."Report ID", FALSE, FALSE, lrecTransferShptHeader);
              UNTIL(lrecReportSelection.NEXT=0);
            END;
          END;
        poptReportType::ReturnShipment:
          BEGIN
            lrecReturnShptHeader.SETRANGE("No.", pcodDocumentNo);
            lrecReturnShptHeader.FINDLAST;
            lrecReturnShptHeader.SETRECFILTER;
            lrecReportSelection.SETRANGE(Usage, lrecReportSelection.Usage::"P.Ret.Shpt.");
            IF ( lrecReportSelection.FINDSET ) THEN BEGIN
              REPEAT
                REPORT.RUN(lrecReportSelection."Report ID", FALSE, FALSE, lrecReturnShptHeader);
              UNTIL(lrecReportSelection.NEXT=0);
            END;
          END;
        poptReportType::ServiceShipment:
          BEGIN
            lrecServiceShptHeader.SETRANGE("No.", pcodDocumentNo);
            lrecServiceShptHeader.FINDLAST;
            lrecServiceShptHeader.SETRECFILTER;
            lrecReportSelection.SETRANGE(Usage, lrecReportSelection.Usage::"SM.Shipment");
            IF ( lrecReportSelection.FINDSET ) THEN BEGIN
              REPEAT
                REPORT.RUN(lrecReportSelection."Report ID", FALSE, FALSE, lrecServiceShptHeader);
              UNTIL(lrecReportSelection.NEXT=0);
            END;
          END;
        poptReportType::ServiceInvoice:
          BEGIN
            lrecServiceInvoiceHeader.SETRANGE("No.", pcodDocumentNo);
            lrecServiceInvoiceHeader.FINDLAST;
            lrecServiceInvoiceHeader.SETRECFILTER;
            lrecReportSelection.SETRANGE(Usage, lrecReportSelection.Usage::"SM.Invoice");
            IF ( lrecReportSelection.FINDSET ) THEN BEGIN
              REPEAT
                REPORT.RUN(lrecReportSelection."Report ID", FALSE, FALSE, lrecServiceInvoiceHeader);
              UNTIL(lrecReportSelection.NEXT=0);
            END;
          END;
      END;
    END;

    PROCEDURE getCustomConfigValue@1000000007(piDatabaseNumber@1000000003 : Integer;psKey@1000000001 : Text) : Text;
    VAR
      lrecCustomConfigValue@1000000002 : Record 23044391;
    BEGIN
      //<FUNC>
      //  Description: Retrieves the specified custom value
      //  Called From: Where needed
      //  Side Effect: None
      //</FUNC>

      lrecCustomConfigValue.SETRANGE("Table ID", piDatabaseNumber);
      lrecCustomConfigValue.SETRANGE("Template Key", psKey);
      IF ( lrecCustomConfigValue.FINDFIRST ) THEN
        EXIT(lrecCustomConfigValue.Value);
    END;

    LOCAL PROCEDURE getPostBehaviour@1000000015(pcodSalesOrderNo@1000000000 : Code[20];VAR poptPostBehaviour@1000000004 : Option);
    VAR
      lrecDShipConfig@1000000001 : Record 23044600;
      lrecSalesHeader@1000000002 : Record 36;
      lrecCustomerOptions@1000000003 : Record 23044614;
    BEGIN
      //<FUNC>
      //  Description: Gets the Post Behaviour from Customer options or setup if none
      //  Called From: This codeunit (CU23044600)
      //  Side Effect: None
      //</FUNC>

      lrecDShipConfig.GET;
      poptPostBehaviour := lrecDShipConfig."Order Post Behaviour";
      IF ( lrecSalesHeader.GET(1, pcodSalesOrderNo) ) THEN
        IF ( cuPackMgmt.getCustomerOptions(lrecSalesHeader, lrecCustomerOptions) ) THEN
          IF ( lrecCustomerOptions."Order Post Behaviour" <> lrecCustomerOptions."Order Post Behaviour"::"Use Default" ) THEN
            poptPostBehaviour := lrecCustomerOptions."Order Post Behaviour";
    END;

    PROCEDURE GetSONumber@100000000(WhseShipHeader@100000000 : Record 7320;pCodNo@1000000000 : Code[20]) : Code[20];
    VAR
      WhseShpLine@100000001 : Record 7321;
    BEGIN
      //>>vaseem
      WhseShpLine.RESET;
      WhseShpLine.SETRANGE("No.",WhseShipHeader."No.");
      IF WhseShpLine.FINDFIRST THEN
        EXIT(WhseShpLine."Source No.")
      ELSE EXIT(pCodNo); //TPZ3257 Added additional parameter and return document no in case of sales order
      //<<vaseem
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
      TPZ2693 VAHAMAD Code added in Post WhseShipment to schedule job queue
      001 TPZ2895 PKS 07212020 Added code for combine shipment.
      002 PKS  05082021  Added new code to flow E-Ship Agent Service to document buffer
      003 PKS  06082021 Code commented to skip package ocation checking
      004 PKS  06292021  Added code to update qty. to ship in warehuse shipment line when scan SO
      005 PKS  TPZ3301 08032021 Added code to skip transfer order posting from worksheet page
      006 PKS  TPZ3353 09142021 Added code to check license plate usage before schedule the SO.
    }
    END.
  }
}

