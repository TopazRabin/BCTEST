OBJECT Codeunit 11123319 SC - Orders Functions
{
  OBJECT-PROPERTIES
  {
    Date=11/03/21;
    Time=11:02:16 AM;
    Modified=Yes;
    Version List=SCW19.2.0,002;
  }
  PROPERTIES
  {
    TableNo=11123302;
    OnRun=VAR
            Params@11123305 : TEMPORARY Record 11123310;
            Context@11123303 : Codeunit 11123305;
            RequestBuff@11123304 : TEMPORARY Record 11123303;
            ResponseBuff@11123302 : TEMPORARY Record 11123303;
          BEGIN
            Context.GetRequestBuff(RequestBuff);
            Context.GetResponseBuff(ResponseBuff);
            Context.GetParams(Params);

            CASE Code OF
              UPPERCASE('GetOrders') : GetOrders(RequestBuff,ResponseBuff);
              UPPERCASE('GetOrderShipmentStatuses') : GetOrderShipmentStatuses(RequestBuff,ResponseBuff);
              UPPERCASE('UpdateOrderImportStatuses') : UpdateOrderImportStatuses(RequestBuff,ResponseBuff);
              UPPERCASE('GetOrderReport') : GetOrderReport(RequestBuff,ResponseBuff);
              UPPERCASE('GetReturnReasonCodes') : GetReturnReasonCode(RequestBuff,ResponseBuff);
              UPPERCASE('PayInvoiceOrders') : PayInvoiceOrder(RequestBuff,ResponseBuff);
            END;

            Context.SetParams(Params);
          END;

  }
  CODE
  {
    VAR
      Text11123302@11123302 : TextConst 'ENU="The value of parameter Document Type = ''%1'' is not correct in XML request. The range of available values is from 0 to 5."';
      Text11123303@11123303 : TextConst 'ENU=%1_%2';
      Text11123304@11123304 : TextConst 'ENU=Other Taxes;ESM=Otros impuestos;FRC=Autres taxes;ENC=Other Taxes';
      TempVatAmountLineGlobal@11123305 : TEMPORARY Record 290;
      TempSalesTaxAmtLineGlobal@11123399 : Record 10011;
      Text11123305@11123306 : TextConst 'ENU=The table ''%1'' is not supported.';
      PKgTrackingFound@1000000002 : Boolean;

    PROCEDURE GetPendingOrders@11123302(VAR InXMLBuff@11123302 : Record 11123303;VAR OutXMLBuff@11123303 : Record 11123303;VAR Params@11123312 : Record 11123310);
    VAR
      Customer@11123305 : Record 18;
      SalesHeader@11123306 : Record 36;
      TempSalesHeader@11123307 : TEMPORARY Record 36;
      Contact@11123308 : Record 5050;
      CustomerFunc@11123310 : Codeunit 11123313;
      EventMgt@11123304 : Codeunit 11123331;
      TableRef@11123309 : RecordRef;
      TempRecRefIsUsed@11123311 : Boolean;
      Tilldate@1000000000 : Date;
    BEGIN
      SalesHeader.RESET;
      TableRef.GETTABLE(SalesHeader);
      ApplyDocumenFilters(TableRef,Params);

      EventMgt.OnBeforeGetSalesDocuments(TableRef,Params);

      SalesHeader.SETVIEW(TableRef.GETVIEW(FALSE));
      TableRef.CLOSE;

      GetPromotableDocs(SalesHeader,Params);

      CASE TRUE OF
        Params.SalesPersonId <> '' :
          BEGIN
            TempRecRefIsUsed := TRUE;

            IF Params.CustomerId <> '' THEN
              Customer.SETRANGE("No.",Params.CustomerId);
            CustomerFunc.ApplyFilterToCustBySalesperson(Customer,Params.SalesPersonId);

            IF Customer.FINDSET THEN
              REPEAT
                IF CustomerFunc.TestCustomer(Customer,FALSE) THEN BEGIN
                  SalesHeader.SETRANGE("Sell-to Customer No.",Customer."No.");
                  CopySalesHeaderRecords(SalesHeader,TempSalesHeader,Params);
                END;
              UNTIL Customer.NEXT = 0;

            IF Params.CustomerId = '' THEN
              IF Params.DocumentType <> 'Order' THEN BEGIN
                CustomerFunc.ApplyFilterToContBySalesperson(Contact,Params.SalesPersonId);
                IF Contact.FINDSET THEN BEGIN
                  SalesHeader.SETRANGE("Salesperson Code");
                  SalesHeader.SETRANGE("Sell-to Customer No.",'');
                  REPEAT
                    SalesHeader.SETRANGE("Sell-to Contact No.",Contact."No.");
                    CopySalesHeaderRecords(SalesHeader,TempSalesHeader,Params);
                  UNTIL Contact.NEXT = 0;
                END;
              END;
          END;
        Params.CustomerId <> '' :
          BEGIN
            TempRecRefIsUsed := TRUE;
            //<TPZ3398>
            IF SalesHeader."Document Type" = SalesHeader."Document Type" :: Quote THEN BEGIN
              Tilldate:=CALCDATE('-1M-1D',WORKDATE);
              SalesHeader.SETRANGE(Status,SalesHeader.Status :: Released);
              SalesHeader.SETFILTER("Order Date",'%1..',Tilldate);
            END;
            //</TPZ3398>
            CopySalesHeaderRecords(SalesHeader,TempSalesHeader,Params);
          END;
      END;

      IF TempRecRefIsUsed THEN
        TableRef.GETTABLE(TempSalesHeader)
      ELSE
        TableRef.GETTABLE(SalesHeader);

      ApplySorting(TableRef,Params);
      CreateSalesDocumentXMLResponse(TableRef,Params,OutXMLBuff);
      TableRef.CLOSE;
    END;

    PROCEDURE GetOrderHistory@11123303(VAR InXMLBuff@11123302 : Record 11123303;VAR OutXMLBuff@11123303 : Record 11123303;VAR Params@11123309 : Record 11123310);
    VAR
      Customer@11123311 : Record 18;
      TableRef@11123310 : RecordRef;
      TempTableRef@11123308 : RecordRef;
      CustomerFunc@11123307 : Codeunit 11123313;
      CommonFunc@11123306 : Codeunit 11123309;
      EventMgt@11123305 : Codeunit 11123331;
      TempRecRefIsUsed@11123304 : Boolean;
    BEGIN
      InitializeTableRefByOrderType(TableRef,Params);

      ApplyDocumenFilters(TableRef,Params);
      EventMgt.OnBeforeGetSalesDocuments(TableRef,Params);

      IF Params.SalesPersonId <> '' THEN BEGIN
        TempTableRef.OPEN(TableRef.NUMBER,TRUE);
        TempRecRefIsUsed := TRUE;

        CustomerFunc.ApplyFilterToCustBySalesperson(Customer,Params.SalesPersonId);

        IF Params.CustomerId <> '' THEN
          Customer.SETRANGE("No.",Params.CustomerId);
        Customer.SETCURRENTKEY("Salesperson Code");
        IF Customer.FINDSET THEN
          REPEAT
            IF CustomerFunc.TestCustomer(Customer,FALSE) THEN BEGIN
              Params.CustomerId := Customer."No.";
              ApplyCustomerNoFilter(TableRef,Params);
              IF TableRef.FINDSET THEN
                REPEAT
                  TempTableRef.INIT;
                  CommonFunc.CopyRecRefByFields(TableRef,TempTableRef);
                  IF TempTableRef.INSERT THEN;
                UNTIL TableRef.NEXT = 0;
              END;
          UNTIL Customer.NEXT = 0;
      END;

      IF TempRecRefIsUsed THEN BEGIN
        ApplySorting(TempTableRef,Params);
        CreateSalesDocumentXMLResponse(TempTableRef,Params,OutXMLBuff);
        TempTableRef.CLOSE;
      END ELSE BEGIN
        ApplySorting(TableRef,Params);
        CreateSalesDocumentXMLResponse(TableRef,Params,OutXMLBuff);
      END;

      TableRef.CLOSE;
    END;

    PROCEDURE GetOrders@11123304(VAR InXMLBuff@11123302 : Record 11123303;VAR OutXMLBuff@11123303 : Record 11123303);
    VAR
      Params@11123304 : TEMPORARY Record 11123310;
    BEGIN
      Params.InitParams(InXMLBuff,0);

      CASE Params.DocumentType OF
        'Order','Quote','Order,Quote','Quote,Order','PromotableQuote','ReturnOrder' :
          GetPendingOrders(InXMLBuff,OutXMLBuff,Params);
        'Invoice','Shipment','CreditNote','ReturnReceipt' :
          GetOrderHistory(InXMLBuff,OutXMLBuff,Params);
        ELSE
          ERROR(Text11123302,Params.DocumentType);
      END;
    END;

    PROCEDURE GetOrder@11123378(VAR InXMLBuff@11123302 : Record 11123303;VAR OutXMLBuff@11123303 : Record 11123303);
    VAR
      Params@11123304 : TEMPORARY Record 11123310;
      EventMgt@11123306 : Codeunit 11123331;
      TableRef@11123305 : RecordRef;
    BEGIN
      Params.InitParams(InXMLBuff,0);

      InitializeTableRefByOrderType(TableRef,Params);

      Params.OriginalOrderId := Params.DocumentId;

      ApplyDocumentTypeFilter(TableRef,Params);
      ApplyDocumentIdFilter(TableRef,Params);
      ApplyOrderDateFilter(TableRef,Params);
      ApplySorting(TableRef,Params);

      EventMgt.OnBeforeGetSalesDocuments(TableRef,Params);

      CreateSalesDocumentXMLResponse(TableRef,Params,OutXMLBuff);
      TableRef.CLOSE;
    END;

    PROCEDURE GetOrderLines@11123305(VAR InXMLBuff@11123302 : Record 11123303;VAR OutXMLBuff@11123303 : Record 11123303);
    VAR
      Params@11123304 : TEMPORARY Record 11123310;
      CollectionNodeBuff@11123306 : TEMPORARY Record 11123303;
    BEGIN
      Params.InitParams(InXMLBuff,0);

      OutXMLBuff.AddElement(CollectionNodeBuff,'SalesLines','');

      CASE Params.DocumentType OF
        'Order','Quote','Order,Quote','Quote,Order' :
          CreateOrderLinesXML(CollectionNodeBuff,Params);
        'Invoice' :
          CreateSalesInvoiceLinesXML(CollectionNodeBuff,Params);
        'Shipment' :
          CreateSalesShipmentLinesXML(CollectionNodeBuff,Params);
        'CreditNote' :
          CreateSalesCreditLinesXML(CollectionNodeBuff,Params);
        'ReturnReceipt' :
          CreateReturnReceiptLinesXML(CollectionNodeBuff,Params);
      END;
    END;

    LOCAL PROCEDURE CreateOrderLinesXML@11123306(VAR InXMLBuff@11123302 : Record 11123303;VAR Params@11123303 : Record 11123310);
    VAR
      SalesHeader@11123304 : Record 36;
      SalesLine@11123305 : Record 37;
      CatalogHelper@11123309 : Codeunit 11123318;
      EventMgt@11123310 : Codeunit 11123331;
      SettingsFunctions@11123311 : Codeunit 11123311;
      SubCollectionNodeBuff@11123307 : TEMPORARY Record 11123303;
      RecRef@11123308 : RecordRef;
      TableRef@11123306 : RecordRef;
    BEGIN
      WITH SalesHeader DO BEGIN
        CASE Params.DocumentType OF
          'Order' : GET("Document Type"::Order,Params.DocumentId);
          'Quote','PromotableQuote' : GET("Document Type"::Quote,Params.DocumentId);
          'ReturnOrder' : GET("Document Type"::"Return Order",Params.DocumentId);
        END;
      END;

      WITH SalesLine DO BEGIN
        RESET;
        SETRANGE("Document No.",SalesHeader."No.");
        SETRANGE("Document Type",SalesHeader."Document Type");

        IF NOT IsLoadOrderLines(Params) THEN BEGIN
          TableRef.GETTABLE(SalesLine);
          SetCostsLinesFilter(TableRef,Params);
          SalesLine.SETVIEW(TableRef.GETVIEW(FALSE));
          TableRef.CLOSE;
        END;

        IF FINDSET THEN
          REPEAT
            RecRef.GETTABLE(SalesLine);

            InXMLBuff.AddElement(SubCollectionNodeBuff,'SalesLine','');
            SubCollectionNodeBuff.AddFieldElement('Id',GetUniqueLineId(RecRef));
            SubCollectionNodeBuff.AddFieldElement('LineNo',FORMAT("Line No."));

            AddProdNoVarCodeAttachNoToXML(RecRef,SubCollectionNodeBuff);
            AddSalesLineTitleToXML(SubCollectionNodeBuff,Params,"No.","Variant Code",Description,RecRef);

            SubCollectionNodeBuff.AddFieldElement('UnitOfMeasureId',"Unit of Measure Code");
            SubCollectionNodeBuff.AddFieldElement(
              'UnitOfMeasureDescription',CatalogHelper.GetUOMDescription("Unit of Measure Code",Params.LanguageId));
            SubCollectionNodeBuff.AddFieldElement('ShipmentDate',FORMAT("Shipment Date"));

            IF Type = Type::" " THEN
              SubCollectionNodeBuff.AddFieldElement('Quantity','1')
            ELSE
              SubCollectionNodeBuff.AddFieldElement('Quantity',FORMAT(Quantity));

            SubCollectionNodeBuff.AddFieldElement('Price',FORMAT(SettingsFunctions.RoundPrice("Unit Price","Currency Code")));
            SubCollectionNodeBuff.AddFieldElement('QuantityShipped',FORMAT("Quantity Shipped"));
            SubCollectionNodeBuff.AddFieldElement('QuantityInvoiced',FORMAT("Quantity Invoiced"));
            SubCollectionNodeBuff.AddFieldElement('DiscountPercent',FORMAT("Line Discount %"));
            SubCollectionNodeBuff.AddFieldElement('DiscountAmount',FORMAT("Line Discount Amount"));
            SubCollectionNodeBuff.AddFieldElement('LineAmount',FORMAT("Line Amount"));
            SubCollectionNodeBuff.AddFieldElement('InvoiceDiscountAmount',FORMAT("Inv. Discount Amount"));
            SubCollectionNodeBuff.AddFieldElement('TaxPercent',FORMAT("VAT %"));
            SubCollectionNodeBuff.AddFieldElement('ServiceChargeId',GetServiceChargeCode(RecRef));
            SubCollectionNodeBuff.AddFieldElement('IsReadOnlyLine',FORMAT(IsReadOnlyLine(RecRef),0,2));
            SubCollectionNodeBuff.AddFieldElement('LineType',GetLineType(RecRef));
            SubCollectionNodeBuff.AddFieldElement('QuantityOutstanding',FORMAT("Outstanding Quantity"));
            SubCollectionNodeBuff.AddFieldElement('ShippingStatus',GetOrderLineShippingStatus(SalesLine));
            SubCollectionNodeBuff.AddFieldElement('IsSupplementary','0');
            SubCollectionNodeBuff.AddFieldElement('ReturnReasonCode',SalesLine."Return Reason Code");

            IF NOT IsReadOnlyLine(RecRef) THEN
              CatalogHelper.AddItemPhysicalDimensionsToXml(SubCollectionNodeBuff,"No.","Unit of Measure Code");

            AddOrderCommentLines(SubCollectionNodeBuff,Params,"Line No.");
            EventMgt.OnGetSalesLine(SubCollectionNodeBuff,SalesLine,Params);
            RecRef.CLOSE;
          UNTIL NEXT = 0;
      END;

      AddPromotionLineToXML(InXMLBuff,SalesHeader);
    END;

    LOCAL PROCEDURE CreateSalesInvoiceLinesXML@11123307(VAR InXMLBuff@11123302 : Record 11123303;VAR Params@11123303 : Record 11123310);
    VAR
      SalesInvoiceHeader@11123304 : Record 112;
      SalesInvoiceLine@11123305 : Record 113;
      SubCollectionNodeBuff@11123307 : TEMPORARY Record 11123303;
      CatalogHelper@11123309 : Codeunit 11123318;
      EventMgt@11123310 : Codeunit 11123331;
      SettingsFunctions@11123311 : Codeunit 11123311;
      RecRef@11123308 : RecordRef;
      TableRef@11123306 : RecordRef;
      Price@11123313 : Decimal;
      UnitOfMeasureDescription@11123312 : Text[1024];
      AvailableReturnQuantity@11123314 : Decimal;
    BEGIN
      WITH SalesInvoiceLine DO BEGIN
        IF SalesInvoiceHeader.GET(Params.DocumentId) THEN BEGIN
          SETRANGE("Document No.",Params.DocumentId);

          IF NOT IsLoadOrderLines(Params) THEN BEGIN
            TableRef.GETTABLE(SalesInvoiceLine);
            SetCostsLinesFilter(TableRef,Params);
            SalesInvoiceLine.SETVIEW(TableRef.GETVIEW(FALSE));
            TableRef.CLOSE;
          END;

          IF FINDSET THEN
            REPEAT
              RecRef.GETTABLE(SalesInvoiceLine);

              InXMLBuff.AddElement(SubCollectionNodeBuff,'SalesLine','');

              AddProdNoVarCodeAttachNoToXML(RecRef,SubCollectionNodeBuff);
              AddSalesLineTitleToXML(SubCollectionNodeBuff,Params,"No.","Variant Code",Description,RecRef);

              SubCollectionNodeBuff.AddFieldElement('LineNo',FORMAT("Line No."));
              SubCollectionNodeBuff.AddFieldElement('UnitOfMeasureId',"Unit of Measure Code");
              UnitOfMeasureDescription := CatalogHelper.GetUOMDescription("Unit of Measure Code",Params.LanguageId);
              SubCollectionNodeBuff.AddFieldElement('UnitOfMeasureDescription',UnitOfMeasureDescription);
              SubCollectionNodeBuff.AddFieldElement('ShipmentDate',FORMAT("Shipment Date"));

              IF Type = Type::" " THEN
                SubCollectionNodeBuff.AddFieldElement('Quantity','1')
              ELSE
                SubCollectionNodeBuff.AddFieldElement('Quantity',FORMAT(Quantity));

              AvailableReturnQuantity := GetAvailableReturnQuantity(SalesInvoiceLine,Params);
              SubCollectionNodeBuff.AddFieldElement('AvailableReturnQuantity',FORMAT(AvailableReturnQuantity));

              Price := SettingsFunctions.RoundPrice("Unit Price",SalesInvoiceHeader."Currency Code");
              SubCollectionNodeBuff.AddFieldElement('Price',FORMAT(Price));
              SubCollectionNodeBuff.AddFieldElement('DiscountPercent',FORMAT("Line Discount %"));
              SubCollectionNodeBuff.AddFieldElement('DiscountAmount',FORMAT("Line Discount Amount"));
              SubCollectionNodeBuff.AddFieldElement('LineAmount',FORMAT("Line Amount"));
              SubCollectionNodeBuff.AddFieldElement('InvoiceDiscountAmount',FORMAT("Inv. Discount Amount"));
              SubCollectionNodeBuff.AddFieldElement('TaxPercent',FORMAT("VAT %"));
              SubCollectionNodeBuff.AddFieldElement('ServiceChargeId',GetServiceChargeCode(RecRef));
              SubCollectionNodeBuff.AddFieldElement('QuantityShipped','0');
              SubCollectionNodeBuff.AddFieldElement('QuantityInvoiced','0');
              SubCollectionNodeBuff.AddFieldElement('IsReadOnlyLine',FORMAT(IsReadOnlyLine(RecRef),0,2));
              SubCollectionNodeBuff.AddFieldElement('LineType',GetLineType(RecRef));
              SubCollectionNodeBuff.AddFieldElement('IsSupplementary','0');

              IF NOT IsReadOnlyLine(RecRef) THEN
                CatalogHelper.AddItemPhysicalDimensionsToXml(SubCollectionNodeBuff,"No.","Unit of Measure Code");

              EventMgt.OnGetSalesInvoiceLine(SubCollectionNodeBuff,SalesInvoiceLine,Params);

              RecRef.CLOSE;
            UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE CreateSalesShipmentLinesXML@11123308(VAR InXMLBuff@11123302 : Record 11123303;VAR Params@11123303 : Record 11123310);
    VAR
      SalesShipmentLine@11123304 : Record 111;
      SubCollectionNodeBuff@11123306 : TEMPORARY Record 11123303;
      CatalogHelper@11123308 : Codeunit 11123318;
      EventMgt@11123309 : Codeunit 11123331;
      SettingsFunctions@11123310 : Codeunit 11123311;
      RecRef@11123307 : RecordRef;
      TableRef@11123305 : RecordRef;
      Price@11123312 : Decimal;
      UnitOfMeasureDescription@11123311 : Text[1024];
    BEGIN
      WITH SalesShipmentLine DO BEGIN
        SETRANGE("Document No.",Params.DocumentId);

        IF NOT IsLoadOrderLines(Params) THEN BEGIN
          TableRef.GETTABLE(SalesShipmentLine);
          SetCostsLinesFilter(TableRef,Params);
          SalesShipmentLine.SETVIEW(TableRef.GETVIEW(FALSE));
          TableRef.CLOSE;
        END;

        IF FINDSET THEN
          REPEAT
            RecRef.GETTABLE(SalesShipmentLine);

            InXMLBuff.AddElement(SubCollectionNodeBuff,'SalesLine','');

            AddProdNoVarCodeAttachNoToXML(RecRef,SubCollectionNodeBuff);
            AddSalesLineTitleToXML(SubCollectionNodeBuff,Params,"No.","Variant Code",Description,RecRef);

            SubCollectionNodeBuff.AddFieldElement('LineNo',FORMAT("Line No."));
            SubCollectionNodeBuff.AddFieldElement('UnitOfMeasureId',"Unit of Measure Code");
            UnitOfMeasureDescription := CatalogHelper.GetUOMDescription("Unit of Measure Code",Params.LanguageId);
            SubCollectionNodeBuff.AddFieldElement('UnitOfMeasureDescription',UnitOfMeasureDescription);
            SubCollectionNodeBuff.AddFieldElement('ShipmentDate',FORMAT("Shipment Date"));

            IF Type = Type::" " THEN
              SubCollectionNodeBuff.AddFieldElement('Quantity','1')
            ELSE
              SubCollectionNodeBuff.AddFieldElement('Quantity',FORMAT(Quantity));

            Price := SettingsFunctions.RoundPrice("Unit Price","Currency Code");
            SubCollectionNodeBuff.AddFieldElement('Price',FORMAT(Price));
            SubCollectionNodeBuff.AddFieldElement('DiscountPercent',FORMAT("Line Discount %"));
            SubCollectionNodeBuff.AddFieldElement('TaxPercent',FORMAT("VAT %"));
            SubCollectionNodeBuff.AddFieldElement('QuantityShipped','0');
            SubCollectionNodeBuff.AddFieldElement('QuantityInvoiced',FORMAT("Quantity Invoiced"));
            SubCollectionNodeBuff.AddFieldElement('IsReadOnlyLine',FORMAT(IsReadOnlyLine(RecRef),0,2));
            SubCollectionNodeBuff.AddFieldElement('LineType',GetLineType(RecRef));
            SubCollectionNodeBuff.AddFieldElement('IsSupplementary','0');

            IF NOT IsReadOnlyLine(RecRef) THEN
              CatalogHelper.AddItemPhysicalDimensionsToXml(SubCollectionNodeBuff,"No.","Unit of Measure Code");

            EventMgt.OnGetSalesShipmentLine(SubCollectionNodeBuff,SalesShipmentLine,Params);

            RecRef.CLOSE;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateReturnReceiptLinesXML@11123309(VAR InXMLBuff@11123302 : Record 11123303;VAR Params@11123303 : Record 11123310);
    VAR
      SalesReturnLine@11123304 : Record 6661;
      SubCollectionNodeBuff@11123306 : TEMPORARY Record 11123303;
      CatalogHelper@11123308 : Codeunit 11123318;
      EventMgt@11123309 : Codeunit 11123331;
      SettingsFunctions@11123310 : Codeunit 11123311;
      RecRef@11123307 : RecordRef;
      TableRef@11123305 : RecordRef;
      Price@11123312 : Decimal;
      UnitOfMeasureDescription@11123311 : Text[1024];
    BEGIN
      WITH SalesReturnLine DO BEGIN
        SETRANGE("Document No.",Params.DocumentId);

        IF NOT IsLoadOrderLines(Params) THEN BEGIN
          TableRef.GETTABLE(SalesReturnLine);
          SetCostsLinesFilter(TableRef,Params);
          SalesReturnLine.SETVIEW(TableRef.GETVIEW(FALSE));
          TableRef.CLOSE;
        END;

        IF FINDSET THEN
          REPEAT
            RecRef.GETTABLE(SalesReturnLine);

            InXMLBuff.AddElement(SubCollectionNodeBuff,'SalesLine','');

            AddProdNoVarCodeAttachNoToXML(RecRef,SubCollectionNodeBuff);
            AddSalesLineTitleToXML(SubCollectionNodeBuff,Params,"No.","Variant Code",Description,RecRef);

            SubCollectionNodeBuff.AddFieldElement('LineNo',FORMAT("Line No."));
            SubCollectionNodeBuff.AddFieldElement('UnitOfMeasureId',"Unit of Measure Code");
            UnitOfMeasureDescription := CatalogHelper.GetUOMDescription("Unit of Measure Code",Params.LanguageId);
            SubCollectionNodeBuff.AddFieldElement('UnitOfMeasureDescription',UnitOfMeasureDescription);
            SubCollectionNodeBuff.AddFieldElement('ShipmentDate',FORMAT("Shipment Date"));

            IF Type = Type::" " THEN
              SubCollectionNodeBuff.AddFieldElement('Quantity','1')
            ELSE
              SubCollectionNodeBuff.AddFieldElement('Quantity',FORMAT(Quantity));
            Price := SettingsFunctions.RoundPrice("Unit Price","Currency Code");
            SubCollectionNodeBuff.AddFieldElement('Price',FORMAT(Price));
            SubCollectionNodeBuff.AddFieldElement('DiscountPercent',FORMAT("Line Discount %"));
            SubCollectionNodeBuff.AddFieldElement('TaxPercent',FORMAT("VAT %"));
            SubCollectionNodeBuff.AddFieldElement('QuantityShipped','0');
            SubCollectionNodeBuff.AddFieldElement('QuantityInvoiced',FORMAT("Quantity Invoiced"));
            SubCollectionNodeBuff.AddFieldElement('LineType',GetLineType(RecRef));
            SubCollectionNodeBuff.AddFieldElement('IsSupplementary','0');

            IF NOT IsReadOnlyLine(RecRef) THEN
              CatalogHelper.AddItemPhysicalDimensionsToXml(SubCollectionNodeBuff,"No.","Unit of Measure Code");

            EventMgt.OnGetRtrnRcptLine(SubCollectionNodeBuff,SalesReturnLine,Params);

            RecRef.CLOSE;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateSalesCreditLinesXML@11123310(VAR InXMLBuff@11123302 : Record 11123303;VAR Params@11123303 : Record 11123310);
    VAR
      SalesCreditMemoHeader@11123304 : Record 114;
      SalesCreditLine@11123305 : Record 115;
      SubCollectionNodeBuff@11123307 : TEMPORARY Record 11123303;
      CatalogHelper@11123309 : Codeunit 11123318;
      EventMgt@11123310 : Codeunit 11123331;
      SettingsFunctions@11123311 : Codeunit 11123311;
      RecRef@11123308 : RecordRef;
      TableRef@11123306 : RecordRef;
      Price@11123313 : Decimal;
      UnitOfMeasureDescription@11123312 : Text[1024];
    BEGIN
      WITH SalesCreditLine DO BEGIN
        IF SalesCreditMemoHeader.GET(Params.DocumentId) THEN BEGIN
          SETRANGE("Document No.",Params.DocumentId);

          IF NOT IsLoadOrderLines(Params) THEN BEGIN
            TableRef.GETTABLE(SalesCreditLine);
            SetCostsLinesFilter(TableRef,Params);
            SalesCreditLine.SETVIEW(TableRef.GETVIEW(FALSE));
            TableRef.CLOSE;
          END;

          IF FINDSET THEN
            REPEAT
              RecRef.GETTABLE(SalesCreditLine);

              InXMLBuff.AddElement(SubCollectionNodeBuff,'SalesLine','');

              AddProdNoVarCodeAttachNoToXML(RecRef,SubCollectionNodeBuff);
              AddSalesLineTitleToXML(SubCollectionNodeBuff,Params,"No.","Variant Code",Description,RecRef);

              SubCollectionNodeBuff.AddFieldElement('LineNo',FORMAT("Line No."));
              SubCollectionNodeBuff.AddFieldElement('UnitOfMeasureId',"Unit of Measure Code");
              UnitOfMeasureDescription := CatalogHelper.GetUOMDescription("Unit of Measure Code",Params.LanguageId);
              SubCollectionNodeBuff.AddFieldElement('UnitOfMeasureDescription',UnitOfMeasureDescription);
              SubCollectionNodeBuff.AddFieldElement('ShipmentDate',FORMAT("Shipment Date"));

              IF Type = Type::" " THEN
                SubCollectionNodeBuff.AddFieldElement('Quantity','1')
              ELSE
                SubCollectionNodeBuff.AddFieldElement('Quantity',FORMAT(Quantity));

              Price := SettingsFunctions.RoundPrice("Unit Price",SalesCreditMemoHeader."Currency Code");
              SubCollectionNodeBuff.AddFieldElement('Price',FORMAT(Price));
              SubCollectionNodeBuff.AddFieldElement('DiscountPercent',FORMAT("Line Discount %"));
              SubCollectionNodeBuff.AddFieldElement('DiscountAmount',FORMAT("Line Discount Amount"));
              SubCollectionNodeBuff.AddFieldElement('LineAmount',FORMAT("Line Amount"));
              SubCollectionNodeBuff.AddFieldElement('InvoiceDiscountAmount',FORMAT("Inv. Discount Amount"));
              SubCollectionNodeBuff.AddFieldElement('TaxPercent',FORMAT("VAT %"));
              SubCollectionNodeBuff.AddFieldElement('ServiceChargeId',GetServiceChargeCode(RecRef));
              SubCollectionNodeBuff.AddFieldElement('QuantityShipped','0');
              SubCollectionNodeBuff.AddFieldElement('QuantityInvoiced','0');
              SubCollectionNodeBuff.AddFieldElement('LineType',GetLineType(RecRef));
              SubCollectionNodeBuff.AddFieldElement('IsSupplementary','0');

              IF NOT IsReadOnlyLine(RecRef) THEN
                CatalogHelper.AddItemPhysicalDimensionsToXml(SubCollectionNodeBuff,"No.","Unit of Measure Code");

              EventMgt.OnGetSalesCrMemoLine(SubCollectionNodeBuff,SalesCreditLine,Params);

              RecRef.CLOSE;
            UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CreateOrderXMLResponse@11123311(VAR OutXMLBuff@11123302 : Record 11123303;SalesHeader@11123304 : Record 36;VAR Params@11123305 : Record 11123310);
    VAR
      TempSalesLine@11123307 : TEMPORARY Record 37;
      SalesDocHeader@11123320 : Record 11123323;
      ResultNodeBuff@11123308 : TEMPORARY Record 11123303;
      ResultShipToNodeBuff@11123321 : TEMPORARY Record 11123303;
      ResultSellToNodeBuff@11123322 : TEMPORARY Record 11123303;
      ResultLinesNodeBuff@11123303 : TEMPORARY Record 11123303;
      ResultBillToNodeBuff@11123323 : TEMPORARY Record 11123303;
      RecRef@11123319 : RecordRef;
      CommonFunct@11123315 : Codeunit 11123309;
      TotalAmount@11123309 : Decimal;
      TotalInclVAT@11123310 : Decimal;
      InvoiceDiscount@11123311 : Decimal;
      TotalAmountExclDiscount@11123312 : Decimal;
      VatPercent@11123313 : Decimal;
      TotalVat@11123314 : Decimal;
      SalespersonCode@11123316 : Code[10];
      SalespersonName@11123317 : Text[1024];
      CustomerDivision@1000000001 : Record 50007;
      Loc@1000000000 : Record 14;
    BEGIN
      Params.DocumentId := SalesHeader."No.";
      CheckRequestLanguage(SalesHeader,Params);
      CopyRealSalesLinesToTempTable(SalesHeader."Document Type",SalesHeader."No.",TempSalesLine);
      GetOrderTotals(SalesHeader,TempSalesLine,TotalVat,InvoiceDiscount,TotalAmount,TotalInclVAT,TotalAmountExclDiscount,VatPercent);

      WITH SalesHeader DO BEGIN
        OutXMLBuff.AddElement(ResultNodeBuff,'Order','');
        ResultNodeBuff.AddFieldElement('DocumentId',"No.");
        ResultNodeBuff.AddFieldElement('DocumentType',Params.DocumentType);
        ResultNodeBuff.AddFieldElement('OriginalOrderId','');
        ResultNodeBuff.AddFieldElement('CurrencyId',GetNonEmptyCurrencyCode("Currency Code"));
        ResultNodeBuff.AddFieldElement('PricesInclTax',FORMAT("Prices Including VAT",0,2));
        ResultNodeBuff.AddFieldElement('Status',RetrieveDocStatus(Status));
        GetSalespersonCodeAndName(Params,SalespersonCode,SalespersonName);
        ResultNodeBuff.AddFieldElement('SalesPersonId',SalespersonCode);
        ResultNodeBuff.AddFieldElement('SanaOrderId',Params.SanaOrderId);
        ResultNodeBuff.AddFieldElement('SalesPersonName',SalespersonName);
        ResultNodeBuff.AddFieldElement('ContactId',"Sell-to Contact No.");
        ResultNodeBuff.AddFieldElement('ContactName',"Sell-to Contact");
        ResultNodeBuff.AddFieldElement('TaxPercent',FORMAT(VatPercent));
        ResultNodeBuff.AddFieldElement('TaxAmount',FORMAT(TotalInclVAT - TotalAmount));
        ResultNodeBuff.AddFieldElement('InvoiceDiscount',FORMAT(InvoiceDiscount));
        ResultNodeBuff.AddFieldElement('Subtotal',FORMAT(TotalAmountExclDiscount));
        ResultNodeBuff.AddFieldElement('TotalExclTax',FORMAT(TotalAmount));
        ResultNodeBuff.AddFieldElement('TotalInclTax',FORMAT(TotalInclVAT));
        ResultNodeBuff.AddFieldElement('OrderDate',FORMAT("Order Date"));
        ResultNodeBuff.AddFieldElement('PostingDate',FORMAT("Posting Date"));
        ResultNodeBuff.AddFieldElement('DocumentDate',FORMAT("Document Date"));
         //<TPZ3405>
        IF "Document Type" = "Document Type" :: Quote THEN
          ResultNodeBuff.AddFieldElement('DueDate',FORMAT(CALCDATE('1M',"Order Date")))
        ELSE //</TPZ3405>
          ResultNodeBuff.AddFieldElement('DueDate',FORMAT("Due Date"));
        ResultNodeBuff.AddFieldElement('RequestedDeliveryDate',FORMAT("Requested Delivery Date"));
        ResultNodeBuff.AddFieldElement('PromisedDeliveryDate',FORMAT("Promised Delivery Date"));
        ResultNodeBuff.AddFieldElement('PaymentTermsCode',"Payment Terms Code");
        ResultNodeBuff.AddFieldElement('PaymentDiscount',FORMAT("Payment Discount %"));
        ResultNodeBuff.AddFieldElement('PaymentDiscountDate',FORMAT("Pmt. Discount Date"));
        //<TPZ2503>
        IF Params.Division <> '' THEN
         ResultNodeBuff.AddFieldElement('Division',Params.Division)
        ELSE
         ResultNodeBuff.AddFieldElement('Division',"Shortcut Dimension 5 Code");
        //</TPZ2503>
        RecRef.GETTABLE(SalesHeader);
        AddPaymentFieldsToXML(ResultNodeBuff,RecRef);
        AddShipmentFieldsToXML(ResultNodeBuff,RecRef,TRUE);

        ResultNodeBuff.AddFieldElement('LocationCode',"Location Code");
        ResultNodeBuff.AddFieldElement('ShipmentDate',FORMAT("Shipment Date"));
        ResultNodeBuff.AddFieldElement('ShippingMethodCode',"Shipment Method Code");
        ResultNodeBuff.AddFieldElement('ShippingMethodName',"Shipment Method Code");
        ResultNodeBuff.AddFieldElement('CustomerId',"Sell-to Customer No.");
        ResultNodeBuff.AddFieldElement('ReferenceNo',"External Document No.");
        ResultNodeBuff.AddFieldElement('OutstandingAmount',FORMAT(GetOutstandingAmount("No.","Posting Date")));
        Params.OrderLinesCount := GetOrderLinesCount(RecRef);
        ResultNodeBuff.AddFieldElement('OrderLinesCount',FORMAT(Params.OrderLinesCount));
        ResultNodeBuff.AddFieldNameValueTypeElement('IsPickupOrder',FORMAT(IspickupOrder,0,2),'Boolean');//<TPZ3154>

        AddSalesTaxBreakdownXML(ResultNodeBuff);

        ResultNodeBuff.AddElement(ResultSellToNodeBuff,'SellToAddress','');
        ResultSellToNodeBuff.AddFieldElement('Name',"Sell-to Customer Name");
        ResultSellToNodeBuff.AddFieldElement('CustomerId',"Sell-to Customer No.");
        ResultSellToNodeBuff.AddFieldElement('ContactId',"Sell-to Contact No.");
        ResultSellToNodeBuff.AddFieldElement('ContactName',"Sell-to Contact");
        ResultSellToNodeBuff.AddFieldElement('Address',"Sell-to Address");
        ResultSellToNodeBuff.AddFieldElement('Address2',"Sell-to Address 2");
        ResultSellToNodeBuff.AddFieldElement('CountryId',"Sell-to Country/Region Code");
        ResultSellToNodeBuff.AddFieldElement('CountryName',GetCountryName("Sell-to Country/Region Code"));
        ResultSellToNodeBuff.AddFieldElement('State',"Sell-to County");
        ResultSellToNodeBuff.AddFieldElement('City',"Sell-to City");
        ResultSellToNodeBuff.AddFieldElement('ZipCode',"Sell-to Post Code");

        ResultNodeBuff.AddElement(ResultBillToNodeBuff,'BillToAddress','');
        ResultBillToNodeBuff.AddFieldElement('Name',"Bill-to Name");
        ResultBillToNodeBuff.AddFieldElement('CustomerId',"Bill-to Customer No.");
        ResultBillToNodeBuff.AddFieldElement('ContactId',"Bill-to Contact No.");
        ResultBillToNodeBuff.AddFieldElement('ContactName',"Bill-to Contact");
        ResultBillToNodeBuff.AddFieldElement('Address',"Bill-to Address");
        ResultBillToNodeBuff.AddFieldElement('Address2',"Bill-to Address 2");
        ResultBillToNodeBuff.AddFieldElement('CountryId',"Bill-to Country/Region Code");
        ResultBillToNodeBuff.AddFieldElement('CountryName',GetCountryName("Bill-to Country/Region Code"));
        ResultBillToNodeBuff.AddFieldElement('State',"Bill-to County");
        ResultBillToNodeBuff.AddFieldElement('City',"Bill-to City");
        ResultBillToNodeBuff.AddFieldElement('ZipCode',"Bill-to Post Code");

        ResultNodeBuff.AddElement(ResultShipToNodeBuff,'ShipToAddress','');
        ResultShipToNodeBuff.AddFieldElement('Id',"Ship-to Code");
        ResultShipToNodeBuff.AddFieldElement('Name',"Ship-to Name");
        ResultShipToNodeBuff.AddFieldElement('CustomerId',"Sell-to Customer No.");
        ResultShipToNodeBuff.AddFieldElement('ContactId','');
        ResultShipToNodeBuff.AddFieldElement('ContactName',"Ship-to Contact");
        ResultShipToNodeBuff.AddFieldElement('Address',"Ship-to Address");
        ResultShipToNodeBuff.AddFieldElement('Address2',"Ship-to Address 2");
        ResultShipToNodeBuff.AddFieldElement('CountryId',"Ship-to Country/Region Code");
        ResultShipToNodeBuff.AddFieldElement('CountryName',GetCountryName("Ship-to Country/Region Code"));
        ResultShipToNodeBuff.AddFieldElement('State',"Ship-to County");
        ResultShipToNodeBuff.AddFieldElement('City',"Ship-to City");
        ResultShipToNodeBuff.AddFieldElement('ZipCode',"Ship-to Post Code");

        //<TPZ3154>
        IF IspickupOrder = TRUE THEN BEGIN
          CustomerDivision.RESET;
          IF (CustomerDivision.GET("Sell-to Customer No.","Shortcut Dimension 5 Code")) AND (CustomerDivision."Location Code" <> '')THEN BEGIN
            IF Loc.GET(CustomerDivision."Location Code" )THEN ;
            ResultNodeBuff.AddElement(ResultShipToNodeBuff,'PickUpLocation','');
            ResultShipToNodeBuff.AddFieldElement('Id','');
            ResultShipToNodeBuff.AddFieldElement('Name',Loc.Name);
            ResultShipToNodeBuff.AddFieldElement('CustomerId',"Sell-to Customer No.");
            ResultShipToNodeBuff.AddFieldElement('ContactId','');
            ResultShipToNodeBuff.AddFieldElement('ContactName','');
            ResultShipToNodeBuff.AddFieldElement('Address',Loc.Address);
            ResultShipToNodeBuff.AddFieldElement('Address2','');
            ResultShipToNodeBuff.AddFieldElement('CountryId',Loc."Country/Region Code");
            ResultShipToNodeBuff.AddFieldElement('CountryName',GetCountryName(Loc."Country/Region Code"));
            ResultShipToNodeBuff.AddFieldElement('State',Loc.County);
            ResultShipToNodeBuff.AddFieldElement('City',Loc.City);
            ResultShipToNodeBuff.AddFieldElement('ZipCode',Loc."Post Code");
          END;
        END;
       //</TPZ3154>

      END;

      IF FindSalesDocHeader36(SalesHeader,SalesDocHeader) THEN BEGIN
        ResultNodeBuff.AddFieldElement('ShopAccountEmail',SalesDocHeader."Shop Account E-Mail");
        ResultNodeBuff.AddFieldElement('Promotable',FORMAT(SalesDocHeader."Quote Promotable",0,2));
        ResultNodeBuff.AddFieldElement('AuthorizationStatus',SalesDocHeader."Authorization Status");
      END;

      ResultNodeBuff.AddFieldElement('ShippingStatus',GetOrderShippingStatus(SalesHeader));
      ResultNodeBuff.AddFieldElement('HasReport',FORMAT(EnableDocumentDownloads(Params),0,2));
      CommonFunct.AddAttachmentsToXml(ResultNodeBuff,RecRef,Params);

      AddOrderCommentLines(ResultNodeBuff,Params,0);

      ResultNodeBuff.AddElement(ResultLinesNodeBuff,'SalesLines','');
      CreateOrderLinesXML(ResultLinesNodeBuff,Params);
    END;

    LOCAL PROCEDURE CreateSalesInvoiceXMLResponse@11123312(VAR OutXMLBuff@11123302 : Record 11123303;VAR SalesInvoiceHeader@11123304 : Record 112;VAR Params@11123305 : Record 11123310);
    VAR
      ResultNodeBuff@11123303 : TEMPORARY Record 11123303;
      ResultLinesNodeBuff@11123318 : TEMPORARY Record 11123303;
      ResultSellToNodeBuff@11123319 : TEMPORARY Record 11123303;
      ResultBillToNodeBuff@11123320 : TEMPORARY Record 11123303;
      ResultShipToNodeBuff@11123321 : TEMPORARY Record 11123303;
      SalesDocHeader@11123317 : Record 11123323;
      RecRef@11123316 : RecordRef;
      CommonFunct@11123306 : Codeunit 11123309;
      TotalAmount@11123308 : Decimal;
      TotalInclVAT@11123309 : Decimal;
      TotalAmountExclDiscount@11123310 : Decimal;
      InvoiceDiscount@11123311 : Decimal;
      VATAmount@11123312 : Decimal;
      VATPercentage@11123313 : Decimal;
      OutstandingAmount@11123322 : Decimal;
      SalespersonCode@11123314 : Code[10];
      SalespersonName@11123315 : Text[1024];
      ResultNodeBuffS@1000000001 : TEMPORARY Record 11123303;
      ShippingAgent@1000000003 : Record 291;
      AgentAddress@1000000002 : Text;
      ResultNodeS@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      PostedPackage@1000000005 : Record 14000704;
      SubCollectionNode@1000000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      PODRef@1000000006 : Record 50020;
      Loc@1000000008 : Record 14;
      CustomerDivision@1000000007 : Record 50007;
    BEGIN
      Params.DocumentId := SalesInvoiceHeader."No.";

      WITH SalesInvoiceHeader DO BEGIN
        OutXMLBuff.AddElement(ResultNodeBuff,'Order','');

        GetOrderTotalsForInvoice(
          SalesInvoiceHeader,VATAmount,TotalAmount,TotalInclVAT,InvoiceDiscount,VATPercentage,TotalAmountExclDiscount);

        ResultNodeBuff.AddFieldElement('DocumentId',"No.");
        ResultNodeBuff.AddFieldElement('DocumentType','Invoice');
        ResultNodeBuff.AddFieldElement('OriginalOrderId',"Order No.");
        ResultNodeBuff.AddFieldElement('CurrencyId',GetNonEmptyCurrencyCode("Currency Code"));
        ResultNodeBuff.AddFieldElement('PricesInclTax',FORMAT("Prices Including VAT",0,2));
        ResultNodeBuff.AddFieldElement('Status','Released');

        GetSalespersonCodeAndName(Params,SalespersonCode,SalespersonName);

        ResultNodeBuff.AddFieldElement('SalesPersonId',SalespersonCode);
        ResultNodeBuff.AddFieldElement('SanaOrderId',Params.SanaOrderId);
        ResultNodeBuff.AddFieldElement('SalesPersonName',SalespersonName);
        ResultNodeBuff.AddFieldElement('ContactName',"Sell-to Contact");
        ResultNodeBuff.AddFieldElement('ContactId',"Sell-to Contact No.");
        ResultNodeBuff.AddFieldElement('TaxPercent',FORMAT(VATPercentage));
        ResultNodeBuff.AddFieldElement('InvoiceDiscount',FORMAT(InvoiceDiscount));
        ResultNodeBuff.AddFieldElement('Subtotal',FORMAT(TotalAmountExclDiscount));
        ResultNodeBuff.AddFieldElement('TotalExclTax',FORMAT(TotalAmount));
        ResultNodeBuff.AddFieldElement('TaxAmount',FORMAT(VATAmount));
        ResultNodeBuff.AddFieldElement('TotalInclTax',FORMAT(TotalInclVAT));

        ResultNodeBuff.AddFieldElement('PostingDate',FORMAT("Posting Date"));
        ResultNodeBuff.AddFieldElement('OrderDate',FORMAT("Order Date"));
        ResultNodeBuff.AddFieldElement('DocumentDate',FORMAT("Document Date"));
        ResultNodeBuff.AddFieldElement('PaymentTermsCode',"Payment Terms Code");
        ResultNodeBuff.AddFieldElement('DueDate',FORMAT("Due Date"));
        ResultNodeBuff.AddFieldElement('PaymentDiscount',FORMAT("Payment Discount %"));

        RecRef.GETTABLE(SalesInvoiceHeader);
        AddPaymentFieldsToXML(ResultNodeBuff,RecRef);

        ResultNodeBuff.AddFieldElement('LocationCode',"Location Code");
        ResultNodeBuff.AddFieldElement('ShipmentDate',FORMAT("Shipment Date"));
        ResultNodeBuff.AddFieldElement('ShippingMethodCode',"Shipment Method Code");
        ResultNodeBuff.AddFieldElement('ShippingMethodName',"Shipment Method Code");
        ResultNodeBuff.AddFieldElement('CustomerId',"Sell-to Customer No.");
        ResultNodeBuff.AddFieldElement('ReferenceNo',FORMAT("External Document No."));
        //<TPZ2503>
        IF Params.Division <>'' THEN
         ResultNodeBuff.AddFieldElement('Division',Params.Division)
        ELSE
         ResultNodeBuff.AddFieldElement('Division',"Shortcut Dimension 5 Code");
        //</TPZ2503>
        OutstandingAmount := GetOutstandingAmount("No.","Posting Date");
        ResultNodeBuff.AddFieldElement('OutstandingAmount',FORMAT(OutstandingAmount));
        Params.OrderLinesCount := GetOrderLinesCount(RecRef);
        ResultNodeBuff.AddFieldElement('OrderLinesCount',FORMAT(Params.OrderLinesCount));
        ResultNodeBuff.AddFieldNameValueTypeElement('IsPickupOrder',FORMAT(IspickupOrder,0,2),'Boolean');//<TPZ3154>

        AddSalesTaxBreakdownXML(ResultNodeBuff);

        ResultNodeBuff.AddElement(ResultSellToNodeBuff,'SellToAddress','');
        ResultSellToNodeBuff.AddFieldElement('Name',"Sell-to Customer Name");
        ResultSellToNodeBuff.AddFieldElement('CustomerId',"Sell-to Customer No.");
        ResultSellToNodeBuff.AddFieldElement('ContactId',"Sell-to Contact No.");
        ResultSellToNodeBuff.AddFieldElement('ContactName',"Sell-to Contact");
        ResultSellToNodeBuff.AddFieldElement('Address',"Sell-to Address");
        ResultSellToNodeBuff.AddFieldElement('Address2',"Sell-to Address 2");
        ResultSellToNodeBuff.AddFieldElement('CountryId',"Sell-to Country/Region Code");
        ResultSellToNodeBuff.AddFieldElement('CountryName',GetCountryName("Sell-to Country/Region Code"));
        ResultSellToNodeBuff.AddFieldElement('State',"Sell-to County");
        ResultSellToNodeBuff.AddFieldElement('City',"Sell-to City");
        ResultSellToNodeBuff.AddFieldElement('ZipCode',"Sell-to Post Code");

        ResultNodeBuff.AddElement(ResultBillToNodeBuff,'BillToAddress','');
        ResultBillToNodeBuff.AddFieldElement('Name',"Bill-to Name");
        ResultBillToNodeBuff.AddFieldElement('CustomerId',"Bill-to Customer No.");
        ResultBillToNodeBuff.AddFieldElement('ContactId',"Bill-to Contact No.");
        ResultBillToNodeBuff.AddFieldElement('ContactName',"Bill-to Contact");
        ResultBillToNodeBuff.AddFieldElement('Address',"Bill-to Address");
        ResultBillToNodeBuff.AddFieldElement('Address2',"Bill-to Address 2");
        ResultBillToNodeBuff.AddFieldElement('CountryId',"Bill-to Country/Region Code");
        ResultBillToNodeBuff.AddFieldElement('CountryName',GetCountryName("Bill-to Country/Region Code"));
        ResultBillToNodeBuff.AddFieldElement('State',"Bill-to County");
        ResultBillToNodeBuff.AddFieldElement('City',"Bill-to City");
        ResultBillToNodeBuff.AddFieldElement('ZipCode',"Bill-to Post Code");

        ResultNodeBuff.AddElement(ResultShipToNodeBuff,'ShipToAddress','');
        ResultShipToNodeBuff.AddFieldElement('Id',"Ship-to Code");
        ResultShipToNodeBuff.AddFieldElement('Name',"Ship-to Name");
        ResultShipToNodeBuff.AddFieldElement('CustomerId',"Sell-to Customer No.");
        ResultShipToNodeBuff.AddFieldElement('ContactId','');
        ResultShipToNodeBuff.AddFieldElement('ContactName',"Ship-to Contact");
        ResultShipToNodeBuff.AddFieldElement('Address',"Ship-to Address");
        ResultShipToNodeBuff.AddFieldElement('Address2',"Ship-to Address 2");
        ResultShipToNodeBuff.AddFieldElement('CountryId',"Ship-to Country/Region Code");
        ResultShipToNodeBuff.AddFieldElement('CountryName',GetCountryName("Ship-to Country/Region Code"));
        ResultShipToNodeBuff.AddFieldElement('State',"Ship-to County");
        ResultShipToNodeBuff.AddFieldElement('City',"Ship-to City");
        ResultShipToNodeBuff.AddFieldElement('ZipCode',"Ship-to Post Code");

       //<TPZ3154>
        IF IspickupOrder = TRUE THEN BEGIN
         CustomerDivision.RESET;
         IF (CustomerDivision.GET("Sell-to Customer No.","Shortcut Dimension 5 Code")) AND (CustomerDivision."Location Code" <> '')THEN BEGIN
          IF Loc.GET(CustomerDivision."Location Code" )THEN ;
          ResultNodeBuff.AddElement(ResultShipToNodeBuff,'PickUpLocation','');
          ResultShipToNodeBuff.AddFieldElement('Id','');
          ResultShipToNodeBuff.AddFieldElement('Name',Loc.Name);
          ResultShipToNodeBuff.AddFieldElement('CustomerId',"Sell-to Customer No.");
          ResultShipToNodeBuff.AddFieldElement('ContactId','');
          ResultShipToNodeBuff.AddFieldElement('ContactName','');
          ResultShipToNodeBuff.AddFieldElement('Address',Loc.Address);
          ResultShipToNodeBuff.AddFieldElement('Address2','');
          ResultShipToNodeBuff.AddFieldElement('CountryId',Loc."Country/Region Code");
          ResultShipToNodeBuff.AddFieldElement('CountryName',GetCountryName(Loc."Country/Region Code"));
          ResultShipToNodeBuff.AddFieldElement('State',Loc.County);
          ResultShipToNodeBuff.AddFieldElement('City',Loc.City);
          ResultShipToNodeBuff.AddFieldElement('ZipCode',Loc."Post Code");
         END;
        END;
        //</TPZ3154>
        ResultNodeBuff.AddFieldElement('HasReport',FORMAT(EnableDocumentDownloads(Params),0,2));

        ResultNodeBuff.AddFieldElement('InvoicePaymentInProgress',FORMAT(PaymentInProgress(SalesInvoiceHeader),0,2));

        CommonFunct.AddAttachmentsToXml(ResultNodeBuff,RecRef,Params);


      //<TPZ1816>
        ResultNodeBuff.AddElement(ResultNodeBuffS,'ShippingTrackingNumbers','');
        IF "Shipping Agent Code"='LOCAL' THEN BEGIN
              PODRef.SETRANGE("Order No.",SalesInvoiceHeader."Order No.");
              IF PODRef.FINDFIRST THEN  //EB
                REPEAT
                 ResultNodeBuffS.AddElement(ResultShipToNodeBuff,'ShippingTrackingNumber','');
                 ResultShipToNodeBuff.AddFieldElement('TrackingNumber',FORMAT('Proof of Delivery'));
                 AgentAddress:=PODRef."Pod URL";
                  ResultShipToNodeBuff.AddFieldElement('TrackingAddress',FORMAT(AgentAddress));
                 // ResultShipToNodeBuff.AddFieldElement('ShippingAgentName','Local');
                  ResultShipToNodeBuff.AddFieldElement('ShippingAgentService',PODRef."Additional Info");

                UNTIL PODRef.NEXT=0;
        END;
        //<TPZ3177>
        ShowDSHIPLpList(SalesInvoiceHeader,ResultNodeBuffS,ResultShipToNodeBuff);
       //</TPZ3177>
        PostedPackage.RESET();
        PostedPackage.SETRANGE("Source ID","Order No.");
          IF PostedPackage.FINDFIRST THEN BEGIN
            REPEAT
              ResultNodeBuffS.AddElement(ResultShipToNodeBuff,'ShippingTrackingNumber','');
              ResultShipToNodeBuff.AddFieldElement('TrackingNumber',FORMAT(PostedPackage."External Tracking No."));
               IF ShippingAgent.GET(PostedPackage."Shipping Agent Code") THEN BEGIN
                  AgentAddress:=STRSUBSTNO(ShippingAgent."Internet Address",PostedPackage."External Tracking No.",PostedPackage."Ship-to Country Code",PostedPackage."Pickup Date",ShippingAgent."Account No.");
                  ResultShipToNodeBuff.AddFieldElement('TrackingAddress',FORMAT(AgentAddress));
                  ResultShipToNodeBuff.AddFieldElement('ShippingAgentName',PostedPackage."Shipping Agent Code"); //<TPZ2653>
                  ResultShipToNodeBuff.AddFieldElement('ShippingAgentService',PostedPackage."Shipping Agent Service") //<TPZ2653>
               END
            UNTIL PostedPackage.NEXT=0;
          END ELSE IF "Package Tracking No."<>'' THEN BEGIN
            IF PKgTrackingFound = FALSE THEN BEGIN //<TPZ3177>
                ResultNodeBuffS.AddElement(ResultShipToNodeBuff,'ShippingTrackingNumber',''); //TPZ2119
                ResultShipToNodeBuff.AddFieldElement('TrackingNumber',FORMAT("Package Tracking No."));

               IF ShippingAgent.GET("Shipping Agent Code") THEN BEGIN
                  AgentAddress:=STRSUBSTNO(ShippingAgent."Internet Address","Package Tracking No.","Ship-to Country/Region Code","Order Date",ShippingAgent."Account No.");
                  IF AgentAddress<>'' THEN //TPZ2119
                    ResultShipToNodeBuff.AddFieldElement('TrackingAddress',FORMAT(AgentAddress));
                  ResultShipToNodeBuff.AddFieldElement('ShippingAgentName',"Shipping Agent Code"); //<TPZ2653>
                  ResultShipToNodeBuff.AddFieldElement('ShippingAgentService',"E-Ship Agent Service") //<TPZ2653>
               END
            END;
          END;//<TPZ3177>
        //</TPZ1816>


             AddOrderCommentLines(ResultNodeBuff,Params,0);

      END;

      IF FindSalesDocHeader112(SalesInvoiceHeader,SalesDocHeader) THEN
        ResultNodeBuff.AddFieldElement('ShopAccountEmail',SalesDocHeader."Shop Account E-Mail");

        ResultNodeBuff.AddElement(ResultLinesNodeBuff,'SalesLines','');
        CreateSalesInvoiceLinesXML(ResultLinesNodeBuff,Params);
    END;

    LOCAL PROCEDURE CreateSalesShipmentXMLResponse@11123313(VAR OutXMLBuff@11123302 : Record 11123303;VAR SalesShipmentHeader@11123304 : Record 110;VAR Params@11123305 : Record 11123310);
    VAR
      ResultNodeBuff@11123303 : TEMPORARY Record 11123303;
      ResulLinestNodeBuff@11123312 : TEMPORARY Record 11123303;
      ResultSellToNodeBuff@11123313 : TEMPORARY Record 11123303;
      ResultBillToNodeBuff@11123314 : TEMPORARY Record 11123303;
      ResultShipToNodeBuff@11123315 : TEMPORARY Record 11123303;
      SalesShipmentLine@11123306 : Record 111;
      SalesDocHeader@11123311 : Record 11123323;
      RecRef@11123310 : RecordRef;
      CommonFunct@11123307 : Codeunit 11123309;
      SalesPersonCode@11123308 : Code[10];
      SalesPersonName@11123309 : Text[1024];
      ResultNodeBuffS@1000000005 : TEMPORARY Record 11123303;
      ShippingAgent@1000000004 : Record 291;
      AgentAddress@1000000003 : Text;
      ResultNodeS@1000000002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      PostedPackage@1000000001 : Record 14000704;
      SubCollectionNode@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      Params.DocumentId := SalesShipmentHeader."No.";

      WITH SalesShipmentHeader DO BEGIN
        OutXMLBuff.AddElement(ResultNodeBuff,'Order','');

        ResultNodeBuff.AddFieldElement('DocumentId',"No.");
        ResultNodeBuff.AddFieldElement('DocumentType','Shipment');
        ResultNodeBuff.AddFieldElement('OriginalOrderId',"Order No.");
        ResultNodeBuff.AddFieldElement('CurrencyId',GetNonEmptyCurrencyCode("Currency Code"));
        ResultNodeBuff.AddFieldElement('PricesInclTax',FORMAT("Prices Including VAT",0,2));
        ResultNodeBuff.AddFieldElement('Status','Released');

        GetSalespersonCodeAndName(Params,SalesPersonCode,SalesPersonName);

        ResultNodeBuff.AddFieldElement('SalesPersonId',SalesPersonCode);
        ResultNodeBuff.AddFieldElement('SanaOrderId',Params.SanaOrderId);
        ResultNodeBuff.AddFieldElement('SalesPersonName',SalesPersonName);
        ResultNodeBuff.AddFieldElement('ContactId',"Sell-to Contact No.");
        ResultNodeBuff.AddFieldElement('ContactName',"Sell-to Contact");

        SalesShipmentLine.SETRANGE("Document No.","No.");
        IF SalesShipmentLine.FINDFIRST THEN
          ResultNodeBuff.AddFieldElement('TaxPercent',FORMAT(SalesShipmentLine."VAT %"));
        ResultNodeBuff.AddFieldElement('InvoiceDiscount','0');
        ResultNodeBuff.AddFieldElement('Subtotal','0');
        ResultNodeBuff.AddFieldElement('TotalExclTax','0');
        ResultNodeBuff.AddFieldElement('TaxAmount','0');
        ResultNodeBuff.AddFieldElement('TotalInclTax','0');
        ResultNodeBuff.AddFieldElement('PostingDate',FORMAT("Posting Date"));
        ResultNodeBuff.AddFieldElement('OrderDate',FORMAT("Order Date"));
        ResultNodeBuff.AddFieldElement('DocumentDate',FORMAT("Document Date"));
        ResultNodeBuff.AddFieldElement('RequestedDeliveryDate',FORMAT("Requested Delivery Date"));
        ResultNodeBuff.AddFieldElement('PromisedDeliveryDate',FORMAT("Promised Delivery Date"));
        ResultNodeBuff.AddFieldElement('ShippingMethodCode',FORMAT("Shipment Method Code"));
        ResultNodeBuff.AddFieldElement('ShippingMethodName',"Shipment Method Code");
        ResultNodeBuff.AddFieldElement('PaymentTermsCode', FORMAT("Payment Terms Code"));
        ResultNodeBuff.AddFieldElement('DueDate', FORMAT("Due Date"));
        ResultNodeBuff.AddFieldElement('ShipmentDate',FORMAT("Shipment Date"));
        ResultNodeBuff.AddFieldElement('PaymentDiscount', FORMAT("Payment Discount %"));
        ResultNodeBuff.AddFieldElement('PaymentDiscountDate',FORMAT("Pmt. Discount Date"));

        RecRef.GETTABLE(SalesShipmentHeader);
        AddPaymentFieldsToXML(ResultNodeBuff,RecRef);
        AddShipmentFieldsToXML(ResultNodeBuff,RecRef,FALSE);

        ResultNodeBuff.AddFieldElement('LocationCode',"Location Code");
        ResultNodeBuff.AddFieldElement('CustomerId',"Sell-to Customer No.");
        ResultNodeBuff.AddFieldElement('ReferenceNo',"External Document No.");
        ResultNodeBuff.AddFieldElement('OutstandingAmount',FORMAT(GetOutstandingAmount("No.","Posting Date")));
        Params.OrderLinesCount := GetOrderLinesCount(RecRef);
        ResultNodeBuff.AddFieldElement('OrderLinesCount',FORMAT(Params.OrderLinesCount));

        ResultNodeBuff.AddElement(ResultSellToNodeBuff,'SellToAddress','');
        ResultSellToNodeBuff.AddFieldElement('Name',"Sell-to Customer Name");
        ResultSellToNodeBuff.AddFieldElement('CustomerId',"Sell-to Customer No.");
        ResultSellToNodeBuff.AddFieldElement('ContactId',"Sell-to Contact No.");
        ResultSellToNodeBuff.AddFieldElement('ContactName',"Sell-to Contact");
        ResultSellToNodeBuff.AddFieldElement('Address',"Sell-to Address");
        ResultSellToNodeBuff.AddFieldElement('Address2',"Sell-to Address 2");
        ResultSellToNodeBuff.AddFieldElement('CountryId',"Sell-to Country/Region Code");
        ResultSellToNodeBuff.AddFieldElement('CountryName',GetCountryName("Sell-to Country/Region Code"));
        ResultSellToNodeBuff.AddFieldElement('State',"Sell-to County");
        ResultSellToNodeBuff.AddFieldElement('City',"Sell-to City");
        ResultSellToNodeBuff.AddFieldElement('ZipCode',"Sell-to Post Code");

        ResultNodeBuff.AddElement(ResultBillToNodeBuff,'BillToAddress','');
        ResultBillToNodeBuff.AddFieldElement('Name',"Bill-to Name");
        ResultBillToNodeBuff.AddFieldElement('CustomerId',"Bill-to Customer No.");
        ResultBillToNodeBuff.AddFieldElement('ContactId',"Bill-to Contact No.");
        ResultBillToNodeBuff.AddFieldElement('ContactName',"Bill-to Contact");
        ResultBillToNodeBuff.AddFieldElement('Address',"Bill-to Address");
        ResultBillToNodeBuff.AddFieldElement('Address2',"Bill-to Address 2");
        ResultBillToNodeBuff.AddFieldElement('CountryId',"Bill-to Country/Region Code");
        ResultBillToNodeBuff.AddFieldElement('CountryName',GetCountryName("Bill-to Country/Region Code"));
        ResultBillToNodeBuff.AddFieldElement('State',"Bill-to County");
        ResultBillToNodeBuff.AddFieldElement('City',"Bill-to City");
        ResultBillToNodeBuff.AddFieldElement('ZipCode',"Bill-to Post Code");

        ResultNodeBuff.AddElement(ResultShipToNodeBuff,'ShipToAddress','');
        ResultShipToNodeBuff.AddFieldElement('Id',"Ship-to Code");
        ResultShipToNodeBuff.AddFieldElement('Name',"Ship-to Name");
        ResultShipToNodeBuff.AddFieldElement('CustomerId',"Sell-to Customer No.");
        ResultShipToNodeBuff.AddFieldElement('ContactId','');
        ResultShipToNodeBuff.AddFieldElement('ContactName',"Ship-to Contact");
        ResultShipToNodeBuff.AddFieldElement('Address',"Ship-to Address");
        ResultShipToNodeBuff.AddFieldElement('Address2',"Ship-to Address 2");
        ResultShipToNodeBuff.AddFieldElement('CountryId',"Ship-to Country/Region Code");
        ResultShipToNodeBuff.AddFieldElement('CountryName',GetCountryName("Ship-to Country/Region Code"));
        ResultShipToNodeBuff.AddFieldElement('State',"Ship-to County");
        ResultShipToNodeBuff.AddFieldElement('City',"Ship-to City");
        ResultShipToNodeBuff.AddFieldElement('ZipCode',"Ship-to Post Code");
        ResultNodeBuff.AddFieldElement('HasReport',FORMAT(EnableDocumentDownloads(Params),0,2));
        CommonFunct.AddAttachmentsToXml(ResultNodeBuff,RecRef,Params);

       //<TPZ1816>
        ResultNodeBuff.AddElement(ResultNodeBuffS,'ShippingTrackingNumbers','');
        //<TPZ3177>
        ShowDSHIPLpListShipment(SalesShipmentHeader,ResultNodeBuffS,ResultShipToNodeBuff);
        //</TPZ3177>
        PostedPackage.RESET();
        PostedPackage.SETRANGE("Source ID","Order No.");
          IF PostedPackage.FINDFIRST THEN BEGIN
            REPEAT
              ResultNodeBuffS.AddElement(ResultShipToNodeBuff,'ShippingTrackingNumber','');
              ResultShipToNodeBuff.AddFieldElement('TrackingNumber',FORMAT(PostedPackage."External Tracking No."));
               IF ShippingAgent.GET(PostedPackage."Shipping Agent Code") THEN BEGIN
                  AgentAddress:=STRSUBSTNO(ShippingAgent."Internet Address",PostedPackage."External Tracking No.",PostedPackage."Ship-to Country Code",PostedPackage."Pickup Date",ShippingAgent."Account No.");
                  ResultShipToNodeBuff.AddFieldElement('TrackingAddress',FORMAT(AgentAddress));
                  ResultShipToNodeBuff.AddFieldElement('ShippingAgentName',PostedPackage."Shipping Agent Code"); //<TPZ2653>
                  ResultShipToNodeBuff.AddFieldElement('ShippingAgentService',PostedPackage."Shipping Agent Service") //<TPZ2653>
               END
            UNTIL PostedPackage.NEXT=0;
          END ELSE IF "Package Tracking No."<>'' THEN BEGIN
            IF PKgTrackingFound = FALSE THEN BEGIN //<TPZ3177>
                ResultNodeBuffS.AddElement(ResultShipToNodeBuff,'ShippingTrackingNumber',''); //TPZ2119
                ResultShipToNodeBuff.AddFieldElement('TrackingNumber',FORMAT("Package Tracking No."));

               IF ShippingAgent.GET("Shipping Agent Code") THEN BEGIN
                  AgentAddress:=STRSUBSTNO(ShippingAgent."Internet Address","Package Tracking No.","Ship-to Country/Region Code","Order Date",ShippingAgent."Account No.");
                  IF AgentAddress<>'' THEN        //TPZ2119
                    ResultShipToNodeBuff.AddFieldElement('TrackingAddress',FORMAT(AgentAddress));
                  ResultShipToNodeBuff.AddFieldElement('ShippingAgentName',"Shipping Agent Code"); //<TPZ2653>
                  ResultShipToNodeBuff.AddFieldElement('ShippingAgentService',"E-Ship Agent Service") //<TPZ2653>
               END
            END;//</TPZ3177>
          END;
        //</TPZ1816>

        AddOrderCommentLines(ResultNodeBuff,Params,0);
      END;

      IF FindSalesDocHeader110(SalesShipmentHeader,SalesDocHeader) THEN
        ResultNodeBuff.AddFieldElement('ShopAccountEmail',SalesDocHeader."Shop Account E-Mail");

      ResultNodeBuff.AddElement(ResulLinestNodeBuff,'SalesLines','');
      CreateSalesShipmentLinesXML(ResulLinestNodeBuff,Params);
    END;

    LOCAL PROCEDURE CreateCreditMemoXMLResponse@11123314(VAR OutXMLBuff@11123302 : Record 11123303;VAR SalesCreditHeader@11123304 : Record 114;VAR Params@11123305 : Record 11123310);
    VAR
      ResultNodeBuff@11123303 : TEMPORARY Record 11123303;
      ResulLinestNodeBuff@11123316 : TEMPORARY Record 11123303;
      ResultSellToNodeBuff@11123317 : TEMPORARY Record 11123303;
      ResultBillToNodeBuff@11123318 : TEMPORARY Record 11123303;
      ResultShipToNodeBuff@11123319 : TEMPORARY Record 11123303;
      RecRef@11123306 : RecordRef;
      CommonFunct@11123307 : Codeunit 11123309;
      TotalAmount@11123308 : Decimal;
      TotalInclVAT@11123309 : Decimal;
      TotalAmountExclDiscount@11123310 : Decimal;
      InvoiceDiscount@11123311 : Decimal;
      VATAmount@11123312 : Decimal;
      VATPercentage@11123313 : Decimal;
      SalespersonCode@11123314 : Code[10];
      SalespersonName@11123315 : Text[1024];
    BEGIN
      Params.DocumentId := SalesCreditHeader."No.";

      GetOrderTotalsForCreditMemo(
        SalesCreditHeader,VATAmount,TotalAmount,TotalInclVAT,InvoiceDiscount,VATPercentage,TotalAmountExclDiscount);

      WITH SalesCreditHeader DO BEGIN
        OutXMLBuff.AddElement(ResultNodeBuff,'Order','');

        ResultNodeBuff.AddFieldElement('DocumentId',"No.");
        ResultNodeBuff.AddFieldElement('DocumentType','CreditNote');
        ResultNodeBuff.AddFieldElement('OriginalOrderId',"Pre-Assigned No.");
        ResultNodeBuff.AddFieldElement('CurrencyId',GetNonEmptyCurrencyCode("Currency Code"));
        ResultNodeBuff.AddFieldElement('PricesInclTax',FORMAT("Prices Including VAT",0,2));
        ResultNodeBuff.AddFieldElement('Status','Released');

        GetSalespersonCodeAndName(Params,SalespersonCode,SalespersonName);

        ResultNodeBuff.AddFieldElement('SalesPersonId',SalespersonCode);
        ResultNodeBuff.AddFieldElement('SanaOrderId',Params.SanaOrderId);
        ResultNodeBuff.AddFieldElement('SalesPersonName',SalespersonName);
        ResultNodeBuff.AddFieldElement('ContactName',"Sell-to Contact");
        ResultNodeBuff.AddFieldElement('ContactId',"Sell-to Contact No.");
        ResultNodeBuff.AddFieldElement('TaxPercent',FORMAT(VATPercentage));
        ResultNodeBuff.AddFieldElement('InvoiceDiscount',FORMAT(InvoiceDiscount));
        ResultNodeBuff.AddFieldElement('Subtotal',FORMAT(TotalAmountExclDiscount));
        ResultNodeBuff.AddFieldElement('TotalExclTax',FORMAT(TotalAmount));
        ResultNodeBuff.AddFieldElement('TaxAmount',FORMAT(VATAmount));
        ResultNodeBuff.AddFieldElement('TotalInclTax',FORMAT(TotalInclVAT));

        AddSalesTaxBreakdownXML(ResultNodeBuff);

        ResultNodeBuff.AddFieldElement('PostingDate',FORMAT("Posting Date"));
        ResultNodeBuff.AddFieldElement('DocumentDate',FORMAT("Document Date"));
        ResultNodeBuff.AddFieldElement('OrderDate', FORMAT("Posting Date"));
        ResultNodeBuff.AddFieldElement('PaymentTermsCode',FORMAT("Payment Terms Code"));
        ResultNodeBuff.AddFieldElement('DueDate',FORMAT("Due Date"));
        ResultNodeBuff.AddFieldElement('PaymentDiscount',FORMAT("Payment Discount %"));
        ResultNodeBuff.AddFieldElement('PaymentDiscountDate',FORMAT("Pmt. Discount Date"));
        ResultNodeBuff.AddFieldElement('LocationCode',"Location Code");
        ResultNodeBuff.AddFieldElement('ShipmentDate',FORMAT("Shipment Date"));
        ResultNodeBuff.AddFieldElement('ShippingMethodCode',"Shipment Method Code");
        ResultNodeBuff.AddFieldElement('ShippingMethodName',"Shipment Method Code");
        ResultNodeBuff.AddFieldElement('CustomerId',"Sell-to Customer No.");
        ResultNodeBuff.AddFieldElement('ReferenceNo',"External Document No.");
        ResultNodeBuff.AddFieldElement('OutstandingAmount',FORMAT(GetOutstandingAmount("No.","Posting Date")));

        RecRef.GETTABLE(SalesCreditHeader);
        Params.OrderLinesCount := GetOrderLinesCount(RecRef);
        ResultNodeBuff.AddFieldElement('OrderLinesCount',FORMAT(Params.OrderLinesCount));

        ResultNodeBuff.AddElement(ResultSellToNodeBuff,'SellToAddress','');
        ResultSellToNodeBuff.AddFieldElement('Name',"Sell-to Customer Name");
        ResultSellToNodeBuff.AddFieldElement('CustomerId',"Sell-to Customer No.");
        ResultSellToNodeBuff.AddFieldElement('ContactId',"Sell-to Contact No.");
        ResultSellToNodeBuff.AddFieldElement('ContactName',"Sell-to Contact");
        ResultSellToNodeBuff.AddFieldElement('Address',"Sell-to Address");
        ResultSellToNodeBuff.AddFieldElement('Address2',"Sell-to Address 2");
        ResultSellToNodeBuff.AddFieldElement('CountryId',"Sell-to Country/Region Code");
        ResultSellToNodeBuff.AddFieldElement('CountryName',GetCountryName("Sell-to Country/Region Code"));
        ResultSellToNodeBuff.AddFieldElement('State',"Sell-to County");
        ResultSellToNodeBuff.AddFieldElement('City',"Sell-to City");
        ResultSellToNodeBuff.AddFieldElement('ZipCode',"Sell-to Post Code");

        ResultNodeBuff.AddElement(ResultBillToNodeBuff,'BillToAddress','');
        ResultBillToNodeBuff.AddFieldElement('Name',"Bill-to Name");
        ResultBillToNodeBuff.AddFieldElement('CustomerId',"Bill-to Customer No.");
        ResultBillToNodeBuff.AddFieldElement('ContactId',"Bill-to Contact No.");
        ResultBillToNodeBuff.AddFieldElement('ContactName',"Bill-to Contact");
        ResultBillToNodeBuff.AddFieldElement('Address',"Bill-to Address");
        ResultBillToNodeBuff.AddFieldElement('Address2',"Bill-to Address 2");
        ResultBillToNodeBuff.AddFieldElement('CountryId',"Bill-to Country/Region Code");
        ResultBillToNodeBuff.AddFieldElement('CountryName',GetCountryName("Bill-to Country/Region Code"));
        ResultBillToNodeBuff.AddFieldElement('State',"Bill-to County");
        ResultBillToNodeBuff.AddFieldElement('City',"Bill-to City");
        ResultBillToNodeBuff.AddFieldElement('ZipCode',"Bill-to Post Code");

        ResultNodeBuff.AddElement(ResultShipToNodeBuff,'ShipToAddress','');
        ResultShipToNodeBuff.AddFieldElement('Id',"Ship-to Code");
        ResultShipToNodeBuff.AddFieldElement('Name',"Ship-to Name");
        ResultShipToNodeBuff.AddFieldElement('CustomerId',"Sell-to Customer No.");
        ResultShipToNodeBuff.AddFieldElement('ContactId','');
        ResultShipToNodeBuff.AddFieldElement('ContactName',"Ship-to Contact");
        ResultShipToNodeBuff.AddFieldElement('Address',"Ship-to Address");
        ResultShipToNodeBuff.AddFieldElement('Address2',"Ship-to Address 2");
        ResultShipToNodeBuff.AddFieldElement('CountryId',"Ship-to Country/Region Code");
        ResultShipToNodeBuff.AddFieldElement('CountryName',GetCountryName("Ship-to Country/Region Code"));
        ResultShipToNodeBuff.AddFieldElement('State',"Ship-to County");
        ResultShipToNodeBuff.AddFieldElement('City',"Ship-to City");
        ResultShipToNodeBuff.AddFieldElement('ZipCode',"Ship-to Post Code");
        ResultNodeBuff.AddFieldElement('HasReport',FORMAT(EnableDocumentDownloads(Params),0,2));
        CommonFunct.AddAttachmentsToXml(ResultNodeBuff,RecRef,Params);
        AddOrderCommentLines(ResultNodeBuff,Params,0);
      END;

        ResultNodeBuff.AddElement(ResulLinestNodeBuff,'SalesLines','');
        CreateSalesCreditLinesXML(ResulLinestNodeBuff,Params);
    END;

    LOCAL PROCEDURE CreateReturnReceiptXMLResponse@11123315(VAR OutXMLBuff@11123302 : Record 11123303;VAR SalesReturnHeader@11123304 : Record 6660;VAR Params@11123305 : Record 11123310);
    VAR
      ResulLinestNodeBuff@11123311 : TEMPORARY Record 11123303;
      ResultNodeBuff@11123303 : TEMPORARY Record 11123303;
      ResultSellToNodeBuff@11123314 : TEMPORARY Record 11123303;
      ResultBillToNodeBuff@11123313 : TEMPORARY Record 11123303;
      ResultShipToNodeBuff@11123312 : TEMPORARY Record 11123303;
      SalesReturnLine@11123306 : Record 6661;
      RecRef@11123310 : RecordRef;
      CommonFunct@11123307 : Codeunit 11123309;
      SalespersonCode@11123308 : Code[10];
      SalespersonName@11123309 : Text[1024];
    BEGIN
      Params.DocumentId := SalesReturnHeader."No.";

      WITH SalesReturnHeader DO BEGIN
        OutXMLBuff.AddElement(ResultNodeBuff,'Order','');
        ResultNodeBuff.AddFieldElement('DocumentId',"No.");
        ResultNodeBuff.AddFieldElement('DocumentType','ReturnReceipt');
        ResultNodeBuff.AddFieldElement('OriginalOrderId',"Return Order No.");
        ResultNodeBuff.AddFieldElement('CurrencyId',GetNonEmptyCurrencyCode("Currency Code"));
        ResultNodeBuff.AddFieldElement('PricesInclTax',FORMAT("Prices Including VAT",0,2));
        ResultNodeBuff.AddFieldElement('Status','Released');

        GetSalespersonCodeAndName(Params,SalespersonCode,SalespersonName);
        ResultNodeBuff.AddFieldElement('SalesPersonName',SalespersonName);
        ResultNodeBuff.AddFieldElement('SalesPersonId',SalespersonCode);
        ResultNodeBuff.AddFieldElement('SanaOrderId',Params.SanaOrderId);
        ResultNodeBuff.AddFieldElement('ContactName',"Sell-to Contact");
        ResultNodeBuff.AddFieldElement('ContactId',"Sell-to Contact No.");

        SalesReturnLine.SETRANGE("Document No.","No.");
        IF SalesReturnLine.FINDFIRST THEN
          ResultNodeBuff.AddFieldElement('TaxPercent',FORMAT(SalesReturnLine."VAT %"));
        ResultNodeBuff.AddFieldElement('InvoiceDiscount','0');
        ResultNodeBuff.AddFieldElement('Subtotal','0');
        ResultNodeBuff.AddFieldElement('TotalExclTax','0');
        ResultNodeBuff.AddFieldElement('TaxAmount','0');
        ResultNodeBuff.AddFieldElement('TotalInclTax','0');
        ResultNodeBuff.AddFieldElement('PostingDate',FORMAT("Posting Date"));
        ResultNodeBuff.AddFieldElement('OrderDate',FORMAT("Order Date"));
        ResultNodeBuff.AddFieldElement('DocumentDate',FORMAT("Document Date"));
        ResultNodeBuff.AddFieldElement('PaymentTermsCode',"Payment Terms Code");
        ResultNodeBuff.AddFieldElement('DueDate',FORMAT("Due Date"));
        ResultNodeBuff.AddFieldElement('PaymentDiscount',FORMAT("Payment Discount %"));
        ResultNodeBuff.AddFieldElement('PaymentDiscountDate',FORMAT("Pmt. Discount Date"));
        ResultNodeBuff.AddFieldElement('PaymentMethodName',"Payment Method Code");
        RecRef.GETTABLE(SalesReturnHeader);
        AddShipmentFieldsToXML(ResultNodeBuff,RecRef,FALSE);

        ResultNodeBuff.AddFieldElement('LocationCode',"Location Code");
        ResultNodeBuff.AddFieldElement('ShippingMethodCode',"Shipment Method Code");
        ResultNodeBuff.AddFieldElement('CustomerId',"Sell-to Customer No.");
        ResultNodeBuff.AddFieldElement('ReferenceNo',"External Document No.");
        Params.OrderLinesCount := GetOrderLinesCount(RecRef);
        ResultNodeBuff.AddFieldElement('OrderLinesCount',FORMAT(Params.OrderLinesCount));

        ResultNodeBuff.AddElement(ResultSellToNodeBuff,'SellToAddress','');
        ResultSellToNodeBuff.AddFieldElement('Name',"Sell-to Customer Name");
        ResultSellToNodeBuff.AddFieldElement('CustomerId',"Sell-to Customer No.");
        ResultSellToNodeBuff.AddFieldElement('ContactId',"Sell-to Contact No.");
        ResultSellToNodeBuff.AddFieldElement('ContactName',"Sell-to Contact");
        ResultSellToNodeBuff.AddFieldElement('Address',"Sell-to Address");
        ResultSellToNodeBuff.AddFieldElement('Address2',"Sell-to Address 2");
        ResultSellToNodeBuff.AddFieldElement('CountryId',"Sell-to Country/Region Code");
        ResultSellToNodeBuff.AddFieldElement('CountryName',GetCountryName("Sell-to Country/Region Code"));
        ResultSellToNodeBuff.AddFieldElement('State',"Sell-to County");
        ResultSellToNodeBuff.AddFieldElement('City',"Sell-to City");
        ResultSellToNodeBuff.AddFieldElement('ZipCode',"Sell-to Post Code");

        ResultNodeBuff.AddElement(ResultBillToNodeBuff,'BillToAddress','');
        ResultBillToNodeBuff.AddFieldElement('Name',"Bill-to Name");
        ResultBillToNodeBuff.AddFieldElement('CustomerId',"Bill-to Customer No.");
        ResultBillToNodeBuff.AddFieldElement('ContactId',"Bill-to Contact No.");
        ResultBillToNodeBuff.AddFieldElement('ContactName',"Bill-to Contact");
        ResultBillToNodeBuff.AddFieldElement('Address',"Bill-to Address");
        ResultBillToNodeBuff.AddFieldElement('Address2',"Bill-to Address 2");
        ResultBillToNodeBuff.AddFieldElement('CountryId',"Bill-to Country/Region Code");
        ResultBillToNodeBuff.AddFieldElement('CountryName',GetCountryName("Bill-to Country/Region Code"));
        ResultBillToNodeBuff.AddFieldElement('State',"Bill-to County");
        ResultBillToNodeBuff.AddFieldElement('City',"Bill-to City");
        ResultBillToNodeBuff.AddFieldElement('ZipCode',"Bill-to Post Code");

        ResultNodeBuff.AddElement(ResultShipToNodeBuff,'ShipToAddress','');
        ResultShipToNodeBuff.AddFieldElement('Id',"Ship-to Code");
        ResultShipToNodeBuff.AddFieldElement('Name',"Ship-to Name");
        ResultShipToNodeBuff.AddFieldElement('CustomerId',"Sell-to Customer No.");
        ResultShipToNodeBuff.AddFieldElement('ContactId','');
        ResultShipToNodeBuff.AddFieldElement('ContactName',"Ship-to Contact");
        ResultShipToNodeBuff.AddFieldElement('Address',"Ship-to Address");
        ResultShipToNodeBuff.AddFieldElement('Address2',"Ship-to Address 2");
        ResultShipToNodeBuff.AddFieldElement('CountryId',"Ship-to Country/Region Code");
        ResultShipToNodeBuff.AddFieldElement('CountryName',GetCountryName("Ship-to Country/Region Code"));
        ResultShipToNodeBuff.AddFieldElement('State',"Ship-to County");
        ResultShipToNodeBuff.AddFieldElement('City',"Ship-to City");
        ResultShipToNodeBuff.AddFieldElement('ZipCode',"Ship-to Post Code");
        ResultNodeBuff.AddFieldElement('HasReport',FORMAT(EnableDocumentDownloads(Params),0,2));
        CommonFunct.AddAttachmentsToXml(ResultNodeBuff,RecRef,Params);
        AddOrderCommentLines(ResultNodeBuff,Params,0);
      END;

        ResultNodeBuff.AddElement(ResulLinestNodeBuff,'SalesLines','');
        CreateReturnReceiptLinesXML(ResulLinestNodeBuff,Params);
    END;

    PROCEDURE GetOrderTotals@11123316(VAR SalesHeader@11123310 : Record 36;VAR SalesLine@11123309 : Record 37;VAR TotalVat@11123308 : Decimal;VAR TotalInvoiceDiscountAmount@11123307 : Decimal;VAR TotalAmount@11123306 : Decimal;VAR TotalAmountInclVat@11123305 : Decimal;VAR TotalAmountExclDiscount@11123304 : Decimal;VAR VatPercentage@11123303 : Decimal);
    VAR
      Context@11123312 : Codeunit 11123305;
      VATInUse@11123311 : Boolean;
    BEGIN
      VATInUse := Context.SupportsVAT(FALSE);
      IF VATInUse THEN
        GetOrderTotalsVAT(SalesHeader,SalesLine,TotalVat,TotalInvoiceDiscountAmount,TotalAmount,TotalAmountInclVat,
      TotalAmountExclDiscount,VatPercentage)
      ELSE
        GetOrderTotalsTAX(SalesHeader,SalesLine,TotalVat,TotalInvoiceDiscountAmount,TotalAmount,TotalAmountInclVat,
      TotalAmountExclDiscount,VatPercentage);
    END;

    LOCAL PROCEDURE GetOrderTotalsForInvoice@11123317(VAR SalesInvHeader@11123309 : Record 112;VAR VATAmount@11123308 : Decimal;VAR TotalAmount@11123307 : Decimal;VAR AmountInclVAT@11123306 : Decimal;VAR InvDiscAmount@11123305 : Decimal;VAR VatPercentage@11123304 : Decimal;VAR TotalAmountExlDiscount@11123303 : Decimal);
    VAR
      Context@11123311 : Codeunit 11123305;
      VATInUse@11123310 : Boolean;
    BEGIN
      VATInUse := Context.SupportsVAT(FALSE);
      IF VATInUse THEN
        GetOrderTotalsForInvoiceVAT(
          SalesInvHeader,VATAmount,TotalAmount,AmountInclVAT,InvDiscAmount,VatPercentage,TotalAmountExlDiscount)
      ELSE
        GetOrderTotalsForInvoiceTAX(
          SalesInvHeader,VATAmount,TotalAmount,AmountInclVAT,InvDiscAmount,VatPercentage,TotalAmountExlDiscount);
    END;

    LOCAL PROCEDURE GetOrderTotalsForCreditMemo@11123318(VAR SalesCrMemoHeader@11123302 : Record 114;VAR VATAmount@11123303 : Decimal;VAR TotalAmount@11123304 : Decimal;VAR AmountInclVAT@11123305 : Decimal;VAR InvDiscAmount@11123306 : Decimal;VAR VatPercentage@11123307 : Decimal;VAR TotalAmountExlDiscount@11123308 : Decimal);
    VAR
      Context@11123310 : Codeunit 11123305;
      VATInUse@11123309 : Boolean;
    BEGIN
      VATInUse := Context.SupportsVAT(FALSE);
      IF VATInUse THEN
        GetOrderTotalsForCreditMemoVAT(
          SalesCrMemoHeader,VATAmount,TotalAmount,AmountInclVAT,InvDiscAmount,VatPercentage,TotalAmountExlDiscount)
      ELSE
        GetOrderTotalsForCreditMemoTAX(
          SalesCrMemoHeader,VATAmount,TotalAmount,AmountInclVAT,InvDiscAmount,VatPercentage,TotalAmountExlDiscount)
    END;

    LOCAL PROCEDURE GetNonEmptyCurrencyCode@11123319(CurrencyCode@11123302 : Code[10]) : Code[10];
    VAR
      GLSetup@11123303 : Record 98;
      Settings@11123304 : Codeunit 11123311;
    BEGIN
      IF CurrencyCode = '' THEN BEGIN
        // <TPZ1301>
        GLSetup.GET;
        //CurrencyCode := GLSetup."LCY Code";
        CurrencyCode := 'USD';
        // </TPZ1301>
      END;
      CurrencyCode := Settings.DefineCurrencyISOCode(CurrencyCode);
      EXIT(CurrencyCode);
    END;

    PROCEDURE InitializeTableRefByOrderType@11123320(VAR TableRef@11123302 : RecordRef;VAR Params@11123303 : Record 11123310);
    BEGIN
      CASE Params.DocumentType OF
        'Order','Quote','Order,Quote','Quote,Order','PromotableQuote','ReturnOrder' :
          TableRef.OPEN(DATABASE::"Sales Header");
        'Invoice' :
          TableRef.OPEN(DATABASE::"Sales Invoice Header");
        'Shipment' :
          TableRef.OPEN(DATABASE::"Sales Shipment Header");
        'CreditNote' :
          TableRef.OPEN(DATABASE::"Sales Cr.Memo Header");
        'ReturnReceipt' :
          TableRef.OPEN(DATABASE::"Return Receipt Header");
        ELSE
          ERROR(Text11123302);
      END;
    END;

    LOCAL PROCEDURE ApplyDocumentTypeFilter@11123321(VAR TableRef@11123302 : RecordRef;VAR Params@11123303 : Record 11123310);
    VAR
      CommonFunc@11123304 : Codeunit 11123309;
      FieldReference@11123305 : FieldRef;
      FieldNo@11123306 : Integer;
      TableNo@11123307 : Integer;
    BEGIN
      TableNo := CommonFunc.GetCorrectTableNoFromRecRef(TableRef);
      CASE Params.DocumentType OF
        'Order' :
          BEGIN
            FieldNo := CommonFunc.GetFieldNoByName(TableNo,'Document Type');
            IF TableRef.FIELDEXIST(FieldNo) THEN BEGIN
              FieldReference := TableRef.FIELD(FieldNo);
              FieldReference.SETRANGE(1);
            END;
          END;
        'Quote' :
          BEGIN
            FieldNo := CommonFunc.GetFieldNoByName(TableNo,'Document Type');
            IF TableRef.FIELDEXIST(FieldNo) THEN BEGIN
              FieldReference := TableRef.FIELD(FieldNo);
              FieldReference.SETRANGE(0);
            END;
          END;
        'Order,Quote','Quote,Order' :
          BEGIN
            FieldNo := CommonFunc.GetFieldNoByName(TableNo,'Document Type');
            IF TableRef.FIELDEXIST(FieldNo) THEN BEGIN
              FieldReference := TableRef.FIELD(FieldNo);
              FieldReference.SETRANGE(0,1);
            END;
          END;
        'ReturnOrder' :
          BEGIN
            FieldNo := CommonFunc.GetFieldNoByName(TableNo,'Document Type');
            IF TableRef.FIELDEXIST(FieldNo) THEN BEGIN
              FieldReference := TableRef.FIELD(FieldNo);
              FieldReference.SETRANGE(5);
            END;
          END;
      END;
    END;

    LOCAL PROCEDURE GetPromotableDocs@11123387(VAR SalesHeader@11123302 : Record 36;VAR Params@11123303 : Record 11123310);
    VAR
      SalesDocHeader@11123305 : Record 11123323;
    BEGIN
      IF Params.DocumentType <> 'PromotableQuote' THEN
        EXIT;

      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Quote);
      IF SalesHeader.FINDSET THEN
        REPEAT
          IF NOT FindSalesDocHeader36(SalesHeader,SalesDocHeader) THEN
            SalesHeader.MARK(TRUE)
          ELSE
            IF SalesDocHeader."Payment Method Status" = '' THEN
              SalesHeader.MARK(TRUE);
        UNTIL SalesHeader.NEXT = 0;

      SalesHeader.MARKEDONLY(TRUE);
    END;

    LOCAL PROCEDURE ApplyDocumentIdFilter@11123322(VAR TableRef@11123302 : RecordRef;VAR Params@11123303 : Record 11123310);
    VAR
      CommonFunc@11123304 : Codeunit 11123309;
      FilterHelper@11123308 : Codeunit 11123321;
      FieldReference@11123305 : FieldRef;
      DocumentId@11123309 : Text[1024];
      FieldNo@11123306 : Integer;
      TableNo@11123307 : Integer;
    BEGIN
      TableNo := CommonFunc.GetCorrectTableNoFromRecRef(TableRef);
      IF Params.DocumentId <> '' THEN BEGIN
        FieldNo := CommonFunc.GetFieldNoByName(TableNo,'No.');
        IF TableRef.FIELDEXIST(FieldNo) THEN BEGIN
          DocumentId := Params.DocumentId;
          FilterHelper.AdaptCriterionForFilter(DocumentId);
          FieldReference := TableRef.FIELD(FieldNo);
          FieldReference.SETFILTER(DocumentId);
        END;
      END;
    END;

    LOCAL PROCEDURE ApplyOriginalOrderIdFilter@11123323(VAR TableRef@11123302 : RecordRef;VAR Params@11123303 : Record 11123310);
    VAR
      CommonFunc@11123304 : Codeunit 11123309;
      FilterHelper@11123309 : Codeunit 11123321;
      FieldReference@11123305 : FieldRef;
      OriginalOrderId@11123308 : Text[1024];
      FieldNo@11123306 : Integer;
      TableNo@11123307 : Integer;
    BEGIN
      TableNo := CommonFunc.GetCorrectTableNoFromRecRef(TableRef);
      IF Params.OriginalOrderId <> '' THEN BEGIN
        CASE TableRef.NUMBER OF
          DATABASE::"Return Receipt Header" : FieldNo := CommonFunc.GetFieldNoByName(TableNo,'Return Order No.');
          DATABASE::"Sales Cr.Memo Header"  : FieldNo := CommonFunc.GetFieldNoByName(TableNo,'Pre-Assigned No.');
        ELSE
          FieldNo := CommonFunc.GetFieldNoByName(TableNo,'Order No.');
        END;

        IF FieldNo <> 0 THEN
        IF TableRef.FIELDEXIST(FieldNo) THEN BEGIN
            OriginalOrderId := Params.OriginalOrderId;
            FilterHelper.AdaptCriterionForFilter(OriginalOrderId);
          FieldReference := TableRef.FIELD(FieldNo);
            FieldReference.SETFILTER(OriginalOrderId);
        END;
      END;
    END;

    LOCAL PROCEDURE ApplyOriginalPOIdFilter@1000000000(VAR TableRef@11123302 : RecordRef;VAR Params@11123303 : Record 11123310);
    VAR
      CommonFunc@11123304 : Codeunit 11123309;
      FilterHelper@11123309 : Codeunit 11123321;
      FieldReference@11123305 : FieldRef;
      OriginalPOId@11123308 : Text[1024];
      FieldNo@11123306 : Integer;
      TableNo@11123307 : Integer;
      SalesHeader@1000000000 : Record 36;
      SalesInvHeader@1000000001 : Record 112;
    BEGIN
      //<TPZ2084>
      TableNo := CommonFunc.GetCorrectTableNoFromRecRef(TableRef);//EB
      IF Params.ReferenceNo <> '' THEN BEGIN
          FieldNo := CommonFunc.GetFieldNoByName(TableNo,'External Document No.');

        IF FieldNo <> 0 THEN
        IF TableRef.FIELDEXIST(FieldNo) THEN BEGIN
            OriginalPOId := Params.ReferenceNo;
            FilterHelper.AdaptCriterionForFilter(OriginalPOId);
          FieldReference := TableRef.FIELD(FieldNo);
            FieldReference.SETFILTER(OriginalPOId);
        END;
      END;
      //</TPZ2084>
    END;

    LOCAL PROCEDURE ApplyOrderDateFilter@11123324(VAR TableRef@11123302 : RecordRef;VAR Params@11123303 : Record 11123310);
    VAR
      CommonFunc@11123304 : Codeunit 11123309;
      FieldReference@11123305 : FieldRef;
      FieldNo@11123306 : Integer;
      TableNo@11123307 : Integer;
    BEGIN
      TableNo := CommonFunc.GetCorrectTableNoFromRecRef(TableRef);
      IF (Params.StartDate <> 0D) OR (Params.EndDate <> 0D) THEN BEGIN
        IF TableRef.NUMBER IN  [DATABASE::"Return Receipt Header",DATABASE::"Sales Cr.Memo Header"] THEN
          FieldNo := CommonFunc.GetFieldNoByName(TableNo,'Posting Date')
        ELSE
          FieldNo := CommonFunc.GetFieldNoByName(TableNo,'Order Date');

        IF TableRef.FIELDEXIST(FieldNo) THEN BEGIN
          FieldReference := TableRef.FIELD(FieldNo);
          CASE TRUE OF
            (Params.EndDate <> 0D) AND (Params.StartDate <> 0D) :
              FieldReference.SETRANGE(Params.StartDate,Params.EndDate);
            Params.EndDate <> 0D :
              FieldReference.SETFILTER('<=%1',Params.EndDate);
            Params.StartDate <> 0D :
              FieldReference.SETFILTER('>=%1',Params.StartDate);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE ApplyCustomerNoFilter@11123325(VAR TableRef@11123302 : RecordRef;VAR Params@11123303 : Record 11123310);
    VAR
      CommonFunc@11123304 : Codeunit 11123309;
      FilterHelper@11123309 : Codeunit 11123321;
      FieldReference@11123305 : FieldRef;
      CustomerId@11123308 : Text[1024];
      FieldNo@11123306 : Integer;
      TableNo@11123307 : Integer;
    BEGIN
      TableNo := CommonFunc.GetCorrectTableNoFromRecRef(TableRef);
      IF Params.CustomerId <> '' THEN BEGIN
        FieldNo := CommonFunc.GetFieldNoByName(TableNo,'Sell-to Customer No.');
        IF TableRef.FIELDEXIST(FieldNo) THEN BEGIN
          CustomerId := Params.CustomerId;
          FilterHelper.AdaptCriterionForFilter(CustomerId);
          FieldReference := TableRef.FIELD(FieldNo);
          FieldReference.SETFILTER(CustomerId);
        END;
      END;
    END;

    LOCAL PROCEDURE ApplySorting@11123326(VAR TableRef@11123302 : RecordRef;VAR Params@11123303 : Record 11123310);
    VAR
      CommonFunc@11123311 : Codeunit 11123309;
      KeyReference@11123304 : KeyRef;
      KeyFieldReference@11123305 : FieldRef;
      KeyFieldName@11123306 : Text[1024];
      KeyIndex@11123307 : Integer;
      TableNo@11123310 : Integer;
      TryToFindKey@11123308 : Boolean;
      KeyFound@11123309 : Boolean;
    BEGIN
      TableNo := CommonFunc.GetCorrectTableNoFromRecRef(TableRef);

      CASE Params.SortField OF
        'DocumentId' : KeyFieldName := 'No.';
        'OriginalOrderId' :
          BEGIN
            IF TableNo IN [DATABASE::"Return Receipt Header",DATABASE::"Sales Cr.Memo Header"] THEN
              KeyFieldName := 'No.'
            ELSE
              KeyFieldName := 'Order No.';
          END;
        'OrderDate' :
          BEGIN
            IF TableNo IN [DATABASE::"Return Receipt Header",DATABASE::"Sales Cr.Memo Header"] THEN
              KeyFieldName := 'Document Date'
            ELSE
              KeyFieldName := 'Order Date';
          END;
        'BillToName' : KeyFieldName := 'Bill-to Name';
        'ShipToName' : KeyFieldName := 'Ship-to Name';
        'DocumentType' : KeyFieldName := 'Document Type';
      END;

      TryToFindKey := KeyFieldName <> '';

      WHILE TryToFindKey DO BEGIN
        KeyIndex := KeyIndex + 1;
        KeyReference := TableRef.KEYINDEX(KeyIndex);
        IF KeyReference.ACTIVE THEN BEGIN
          KeyFieldReference := KeyReference.FIELDINDEX(1);
          IF KeyFieldReference.NAME = KeyFieldName THEN
            KeyFound := TRUE;
        END;
        IF KeyFound OR (KeyIndex = TableRef.KEYCOUNT) THEN
          TryToFindKey := FALSE;
      END;

      IF KeyFound THEN BEGIN
        TableRef.CURRENTKEYINDEX(KeyIndex);
       // IF NOT Params.SortAscending THEN //<TPZ2692>
         // TableRef.ASCENDING(FALSE); //<TPZ2692>
      END;
      TableRef.ASCENDING(FALSE);//<TPZ2692>
    END;

    LOCAL PROCEDURE CreateSalesDocumentXMLResponse@11123327(VAR TableRef@11123302 : RecordRef;VAR Params@11123303 : Record 11123310;VAR OutXMLBuff@11123304 : Record 11123303);
    VAR
      XMLNodeBuff@11123307 : TEMPORARY Record 11123303;
      RecordsFound@11123308 : Boolean;
      Counter@11123309 : Integer;
      CountOfRecords@11123310 : Integer;
      CanRead@11123311 : Boolean;
    BEGIN
      IF TableRef.ASCENDING THEN
        RecordsFound := TableRef.FINDSET
      ELSE
        RecordsFound := TableRef.FIND('-');

      IF RecordsFound THEN BEGIN
        CountOfRecords := TableRef.COUNT;
        OutXMLBuff.AddElement(XMLNodeBuff,'TotalCount',FORMAT(CountOfRecords));

        IF (Params.PageIndex * Params.PageSize) >= CountOfRecords THEN
          EXIT;

        IF (Params.PageSize > 0) AND (Params.PageIndex > 0) THEN
          CanRead := TableRef.NEXT(Params.PageIndex * Params.PageSize) <> 0
        ELSE
          CanRead := TRUE;

        WHILE CanRead AND ((Params.PageSize = 0) OR (Counter < Params.PageSize)) DO BEGIN
          Counter := Counter + 1;
          CreateXMLResponseByDocType(OutXMLBuff,TableRef,Params);
          CanRead := TableRef.NEXT <> 0;
        END;
      END;
    END;

    LOCAL PROCEDURE CreateXMLResponseByDocType@11123328(VAR OutXMLBuff@11123302 : Record 11123303;VAR TableRef@11123304 : RecordRef;VAR Params@11123305 : Record 11123310);
    VAR
      TempSalesHeader@11123306 : TEMPORARY Record 36;
      TempSalesShipmentHeader@11123307 : TEMPORARY Record 110;
      TempSalesInvoiceHeader@11123308 : TEMPORARY Record 112;
      TempSalesCreditMemoHeader@11123309 : TEMPORARY Record 114;
      TempReturnReceiptHeader@11123310 : TEMPORARY Record 6660;
      EventMgt@11123312 : Codeunit 11123331;
      CommonFunc@11123303 : Codeunit 11123309;
      DuplicatedTableRef@11123311 : RecordRef;
      TableNo@11123313 : Integer;
    BEGIN
      TableNo := CommonFunc.GetCorrectTableNoFromRecRef(TableRef);

      DuplicatedTableRef := TableRef.DUPLICATE;

      CASE TableNo OF
        DATABASE::"Sales Header" :
          BEGIN
            DuplicatedTableRef.SETTABLE(TempSalesHeader);
            IF Params.DocumentType <> 'PromotableQuote' THEN
              CASE TempSalesHeader."Document Type" OF
                TempSalesHeader."Document Type"::Quote : Params.DocumentType := 'Quote';
                TempSalesHeader."Document Type"::Order : Params.DocumentType := 'Order';
              END;
            EventMgt.OnBeforeCreateDocResponse(TempSalesHeader,Params);
            CreateOrderXMLResponse(OutXMLBuff,TempSalesHeader,Params);
            EventMgt.OnAfterCreateDocResponse(OutXMLBuff,TempSalesHeader,Params);
          END;
        DATABASE::"Sales Shipment Header" :
          BEGIN
            DuplicatedTableRef.SETTABLE(TempSalesShipmentHeader);
            EventMgt.OnBeforeCreateShipmentResponse(TempSalesShipmentHeader,Params);
            CreateSalesShipmentXMLResponse(OutXMLBuff,TempSalesShipmentHeader,Params);
            EventMgt.OnAfterCreateShipmentResponse(OutXMLBuff,TempSalesShipmentHeader,Params);
          END;
        DATABASE::"Sales Invoice Header" :
          BEGIN
            DuplicatedTableRef.SETTABLE(TempSalesInvoiceHeader);
            EventMgt.OnBeforeCreateInvoiceResponse(TempSalesInvoiceHeader,Params);
            CreateSalesInvoiceXMLResponse(OutXMLBuff,TempSalesInvoiceHeader,Params);
            EventMgt.OnAfterCreateInvoiceResponse(OutXMLBuff,TempSalesInvoiceHeader,Params);
          END;
        DATABASE::"Sales Cr.Memo Header" :
          BEGIN
            DuplicatedTableRef.SETTABLE(TempSalesCreditMemoHeader);
            EventMgt.OnBeforeCreateCrMemoResponse(TempSalesCreditMemoHeader,Params);
            CreateCreditMemoXMLResponse(OutXMLBuff,TempSalesCreditMemoHeader,Params);
            EventMgt.OnAfterCreateCrMemoResponse(OutXMLBuff,TempSalesCreditMemoHeader,Params);
          END;
        DATABASE::"Return Receipt Header" :
          BEGIN
            DuplicatedTableRef.SETTABLE(TempReturnReceiptHeader);
            EventMgt.OnBeforeCreateRtrnRcptResponse(TempReturnReceiptHeader,Params);
            CreateReturnReceiptXMLResponse(OutXMLBuff,TempReturnReceiptHeader,Params);
            EventMgt.OnAfterCreateRtrnRcptResponse(OutXMLBuff,TempReturnReceiptHeader,Params);
          END;
      END;
      DuplicatedTableRef.CLOSE;
    END;

    LOCAL PROCEDURE GetSalespersonCodeAndName@11123329(VAR Params@11123302 : Record 11123310;VAR SalespersonCode@11123303 : Code[10];VAR SalespersonName@11123304 : Text[1024]);
    VAR
      SalesHeader@11123305 : Record 36;
      SalesShipmentHeader@11123306 : Record 110;
      SalesInvoiceHeader@11123307 : Record 112;
      SalesCreditMemoHeader@11123308 : Record 114;
      ReturnReceiptHeader@11123309 : Record 6660;
      Salesperson@11123310 : Record 50027;
      Contact@11123311 : Record 5050;
    BEGIN

      CASE Params.DocumentType OF
        'Order' :
          IF SalesHeader.GET(SalesHeader."Document Type"::Order,Params.DocumentId) THEN
            SalespersonCode := SalesHeader."Mfr. Rep. Code";  //<TPZ2027>
        'Invoice' :
          IF SalesInvoiceHeader.GET(Params.DocumentId) THEN
            SalespersonCode := SalesInvoiceHeader."Mfr. Rep. Code"; //<TPZ2027>
        'Shipment' :
          IF SalesShipmentHeader.GET(Params.DocumentId) THEN
            SalespersonCode := SalesShipmentHeader."Mfr. Rep. Code";  //<TPZ2027>
        'ReturnReceipt' :
          IF ReturnReceiptHeader.GET(Params.DocumentId) THEN
            SalespersonCode := ReturnReceiptHeader."Mfr. Rep. Code";   //<TPZ2027>
        'Quote','PromotableQuote' :
          IF SalesHeader.GET(SalesHeader."Document Type"::Quote,Params.DocumentId) THEN BEGIN
            SalespersonCode :=SalesHeader."Mfr. Rep. Code";  //<TPZ2027>
            IF SalesHeader."Sell-to Customer No." = '' THEN
              IF Contact.GET(SalesHeader."Sell-to Contact No.") THEN
                SalespersonCode := Contact."Salesperson Code";
          END;
        'CreditNote' :
          IF SalesCreditMemoHeader.GET(Params.DocumentId) THEN
            SalespersonCode := SalesCreditMemoHeader."Mfr. Rep. Code";  //<TPZ2027>
      END;

      IF Salesperson.GET(SalespersonCode) THEN
        SalespersonName := Salesperson.Name;
    END;

    PROCEDURE GetCountryName@11123330(CountryCode@11123302 : Code[10]) : Text[250];
    VAR
      Country@11123303 : Record 9;
    BEGIN
      IF CountryCode <> '' THEN
        IF Country.GET(CountryCode) THEN
          EXIT(Country.Name);
    END;

    LOCAL PROCEDURE GetOutstandingAmount@11123331(DocNo@11123302 : Code[20];PostingDate@11123303 : Date) : Decimal;
    VAR
      CustLedgEntry@11123304 : Record 21;
      TotalRemainingAmount@11123305 : Decimal;
    BEGIN
      IF CustLedgEntry.READPERMISSION THEN BEGIN
        CustLedgEntry.RESET;
        CustLedgEntry.SETCURRENTKEY("Document No.");
        CustLedgEntry.SETRANGE("Document No.",DocNo);
        CustLedgEntry.SETRANGE("Posting Date",PostingDate);
        IF CustLedgEntry.FINDSET THEN BEGIN
          REPEAT
            CustLedgEntry.CALCFIELDS("Remaining Amount");
            TotalRemainingAmount := TotalRemainingAmount + CustLedgEntry."Remaining Amount";
          UNTIL CustLedgEntry.NEXT = 0;
        END;
      END;
      EXIT(TotalRemainingAmount);
    END;

    LOCAL PROCEDURE GetCommentLine@11123332(VAR Params@11123302 : Record 11123310) : Text[1024];
    VAR
      SalesCommentLine@11123303 : Record 44;
    BEGIN
      WITH SalesCommentLine DO BEGIN
        CASE Params.DocumentType OF
          'Order' :
            SETRANGE("Document Type","Document Type"::Order);
          'Invoice' :
            SETRANGE("Document Type","Document Type"::"Posted Invoice");
          'Shipment' :
            SETRANGE("Document Type","Document Type"::Shipment);
          'ReturnReceipt' :
            SETRANGE("Document Type","Document Type"::"Posted Return Receipt");
          'Quote' :
            SETRANGE("Document Type","Document Type"::Quote);
          'CreditNote' :
            SETRANGE("Document Type","Document Type"::"Posted Credit Memo");
        END;
        SETRANGE("No.",Params.DocumentId);
        SETRANGE("Line No.",10000);
        IF FINDFIRST THEN
          EXIT(Comment);
      END;
    END;

    PROCEDURE IsReadOnlyLine@11123333(RecRef@11123302 : RecordRef) : Boolean;
    VAR
      SalesDocLine@11123303 : Record 11123325;
      CommonFunc@11123305 : Codeunit 11123309;
      Type@11123304 : ' ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)';
    BEGIN
      IF NOT EVALUATE(Type,CommonFunc.GetFieldValueByNo(RecRef,5)) THEN
        EXIT;

      FindSalesDocLine(RecRef,SalesDocLine);

      IF (Type <> Type::Item)  OR
        (SalesDocLine."Special Cost Line Type" <> SalesDocLine."Special Cost Line Type"::" ")
      THEN
        EXIT(TRUE);
    END;

    PROCEDURE GetLineType@11123334(RecRef@11123302 : RecordRef) : Text[1024];
    VAR
      SalesDocLine@11123306 : Record 11123325;
      CommonFunc@11123305 : Codeunit 11123309;
      Type@11123304 : ' ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)';
    BEGIN
      IF NOT EVALUATE(Type,CommonFunc.GetFieldValueByNo(RecRef,5)) THEN
        EXIT;

      FindSalesDocLine(RecRef,SalesDocLine);

      CASE SalesDocLine."Special Cost Line Type" OF
        SalesDocLine."Special Cost Line Type"::" " :
          CASE Type OF
            Type::" " :
              EXIT('extendedtext');
            Type::"G/L Account" :
              EXIT('service');
            Type::Item :
              EXIT('item');
            ELSE
              EXIT(FORMAT(Type));
          END;
        SalesDocLine."Special Cost Line Type"::"Payment Cost" :
          EXIT('paymentcosts');
        SalesDocLine."Special Cost Line Type"::"Shipping Cost" :
          EXIT('shippingcosts');
      END;
    END;

    PROCEDURE GetUniqueLineId@11123381(RecRef@11123302 : RecordRef) : Text[50];
    VAR
      SalesDocLine@11123303 : Record 11123325;
    BEGIN
      IF FindSalesDocLine(RecRef,SalesDocLine) THEN
        EXIT(SalesDocLine."Unique Line Id");
    END;

    PROCEDURE GetTitleForVariantLine@11123335(VertDescription@11123302 : Text[1024];HorzDescription@11123303 : Text[1024]) : Text[1024];
    BEGIN
      CASE TRUE OF
        (VertDescription <> '')  AND (HorzDescription <> '') :
          EXIT(STRSUBSTNO('%1, %2',VertDescription,HorzDescription));
        VertDescription <> '' :
          EXIT(VertDescription);
        HorzDescription <> '' :
          EXIT(HorzDescription);
      END;
    END;

    PROCEDURE GetTitleForPrepackLine@11123336(PrepackCode@11123302 : Code[30];PrepackDescription@11123303 : Text[1024];VariationVertical@11123304 : Text[1024]) : Text[1024];
    BEGIN
      EXIT(STRSUBSTNO('%1 (%2-%3)',PrepackDescription,VariationVertical,PrepackCode));
    END;

    PROCEDURE GetTitleForPrepackSubLine@11123337(VariationVertical@11123302 : Text[1024];VariationHorisontal@11123303 : Text[1024];PrepackCode@11123304 : Code[30]) : Text[1024];
    BEGIN
      EXIT(STRSUBSTNO('%1 (%2)',GetTitleForVariantLine(VariationVertical,VariationHorisontal),PrepackCode));
    END;

    LOCAL PROCEDURE AddPfsSpecificFieldsToXML@11123338(VAR SubCollectionNodeBuff@11123302 : Record 11123303;VAR RecRef@11123303 : RecordRef;VAR Params@11123304 : Record 11123310);
    BEGIN
      EXIT; // NOT IMPLEMENTED IN CURRENT VERSION
    END;

    LOCAL PROCEDURE GetCurrentRecFieldsValues@11123339(VAR TableRef@11123302 : RecordRef;VAR ItemNo@11123303 : Code[20];VAR VariantCode@11123304 : Code[10];VAR Description@11123305 : Text[1024];VAR PrepackCode@11123306 : Code[10];VAR Sorting@11123307 : Text[1024];VAR VerticalComponent@11123308 : Code[10];VAR HorizontalComponent@11123309 : Code[10];VAR PrepackQuantity@11123310 : Decimal;VAR MatrixLineNo@11123311 : Integer;VAR Subline@11123312 : Boolean);
    VAR
      CommonFunc@11123315 : Codeunit 11123309;
    BEGIN
      ItemNo := CommonFunc.GetFieldValueByName(TableRef,'No.');
      VariantCode := CommonFunc.GetFieldValueByName(TableRef,'Variant Code');
      Description := CommonFunc.GetFieldValueByName(TableRef,'Description');
      PrepackCode := CommonFunc.GetFieldValueByName(TableRef,'PfsPrepack Code');
      Sorting := CommonFunc.GetFieldValueByName(TableRef,'PfsSorting');
      VerticalComponent := CommonFunc.GetFieldValueByName(TableRef,'PfsVertical Component');
      HorizontalComponent := CommonFunc.GetFieldValueByName(TableRef,'PfsHorizontal Component');

      EVALUATE(PrepackQuantity,CommonFunc.GetFieldValueByName(TableRef,'PfsPrepack Quantity'));
      EVALUATE(MatrixLineNo,CommonFunc.GetFieldValueByName(TableRef,'PfsMatrix Line No.'));
      EVALUATE(Subline,CommonFunc.GetFieldValueByName(TableRef,'PfsSubline'));
    END;

    PROCEDURE AddPromotionLineToXML@11123341(VAR OutXMLBuff@11123302 : Record 11123303;SalesHeader@11123303 : Record 36);
    VAR
      SalesDocHeader@11123307 : Record 11123323;
      SubCollectionNodeBuff@11123305 : TEMPORARY Record 11123303;
      SettingsFunctions@11123304 : Codeunit 11123311;
      Amount@11123306 : Decimal;
    BEGIN
      IF NOT HasPromotionCode(SalesHeader,SalesDocHeader) THEN
        EXIT;

      OutXMLBuff.AddElement(SubCollectionNodeBuff,'SalesLine','');
      SubCollectionNodeBuff.AddFieldElement('Title',SalesDocHeader."Promotion Title");

      CASE SalesDocHeader."Promotion Discount Type" OF
        SalesDocHeader."Promotion Discount Type"::"Fixed Amount" :
          BEGIN
            SubCollectionNodeBuff.AddFieldElement('DiscountType','FixedAmount');
            SubCollectionNodeBuff.AddFieldElement('DiscountValue',FORMAT(SalesDocHeader."Promotion Discount Value"));
          END;
        SalesDocHeader."Promotion Discount Type"::Percentage :
          BEGIN
            SubCollectionNodeBuff.AddFieldElement('DiscountType','Percentage');
            SubCollectionNodeBuff.AddFieldElement('DiscountValue',FORMAT(SalesDocHeader."Promotion Discount Value" / 100));
          END;
      END;

      SubCollectionNodeBuff.AddFieldElement('DiscountAmount',FORMAT(SalesDocHeader."Promotion Discount Amount"));
      SubCollectionNodeBuff.AddFieldElement('ProductId',SalesDocHeader."Promotion Code");
      Amount := SettingsFunctions.RoundPrice(SalesDocHeader."Promotion Discount Amount",SalesHeader."Currency Code") * -1;
      SubCollectionNodeBuff.AddFieldElement('Quantity','1');
      SubCollectionNodeBuff.AddFieldElement('Price',FORMAT(Amount));
      SubCollectionNodeBuff.AddFieldElement('LineAmount',FORMAT(Amount));

      CASE SalesDocHeader."Promotion Type" OF
        SalesDocHeader."Promotion Type"::Promotion :
          SubCollectionNodeBuff.AddFieldElement('LineType','promotioncode');
        SalesDocHeader."Promotion Type"::Coupon :
          SubCollectionNodeBuff.AddFieldElement('LineType','externalcoupon');
      END;

      SubCollectionNodeBuff.AddFieldElement('IsReadOnlyLine','1');
    END;

    PROCEDURE HasPromotionCode@11123342(SalesHeader@11123302 : Record 36;VAR SalesDocHeader@11123304 : Record 11123323) : Boolean;
    BEGIN
      IF FindSalesDocHeader36(SalesHeader,SalesDocHeader) THEN BEGIN
         EXIT(
           (SalesDocHeader."Promotion Code" <> '') AND
           (SalesDocHeader."Promotion Discount Type" <> SalesDocHeader."Promotion Discount Type"::" ") AND
           (SalesDocHeader."Promotion Discount Value" > 0));
      END;
    END;

    PROCEDURE UpdateOrderImportStatuses@11123343(VAR InXMLBuff@11123303 : Record 11123303;VAR OutXMLBuff@11123302 : Record 11123303);
    VAR
      Params@11123304 : TEMPORARY Record 11123310;
      OrderImportInfo@11123305 : Record 11123314;
      OrderNumberListBuff@11123306 : TEMPORARY Record 11123303;
      SanaOrderNo@11123307 : Text[1024];
      ImportDateText@11123308 : Text[1024];
      ImportDateTime@11123309 : DateTime;
    BEGIN
      Params.InitParams(InXMLBuff,0);

      InXMLBuff.SelectNodes('//SanaOrderId',OrderNumberListBuff);
      ImportDateText := InXMLBuff.SelectSingleNodeText('//ImportDate');

      OrderImportInfo.SETCURRENTKEY("Sana Order No.","Webshop Id","Document Type");

      IF ImportDateText = '' THEN
        EXIT;

      EVALUATE(ImportDateTime,ImportDateText);

      WHILE OrderNumberListBuff.NextNode DO BEGIN
        SanaOrderNo := OrderNumberListBuff.InnerText;
        OrderImportInfo.SETRANGE("Sana Order No.",SanaOrderNo);
        OrderImportInfo.SETRANGE("Webshop Id",Params.WebsiteId);
        OrderImportInfo.SETRANGE("Document Type",OrderImportInfo."Document Type"::Order);
        IF OrderImportInfo.FINDFIRST THEN BEGIN
          OrderImportInfo."Import Date" := ImportDateTime;
          OrderImportInfo.MODIFY;
        END;
      END;
    END;

    PROCEDURE GetOrderShipmentStatuses@11123344(VAR InXMLBuff@11123302 : Record 11123303;VAR OutXMLBuff@11123303 : Record 11123303);
    VAR
      OrderImportInfo@11123304 : Record 11123314;
      Params@11123305 : TEMPORARY Record 11123310;
      CollectionNodeBuff@11123307 : TEMPORARY Record 11123303;
    BEGIN
      Params.InitParams(InXMLBuff,0);

      OutXMLBuff.AddElement(CollectionNodeBuff,'Orders','');

      OrderImportInfo.SETRANGE("Webshop Id",Params.WebsiteId);
      IF OrderImportInfo.FINDSET THEN
        REPEAT
          IF OrderImportInfo."Modified Date" >= OrderImportInfo."Import Date" THEN
            CreateOrderStatusXML(CollectionNodeBuff,OrderImportInfo);
        UNTIL OrderImportInfo.NEXT = 0;
    END;

    PROCEDURE CreateOrderStatusXML@11123345(VAR InXMLBuff@11123302 : Record 11123303;VAR OrderImportInfo@11123303 : Record 11123314);
    VAR
      SalesHeader@11123304 : Record 36;
      SalesShipmentHeader@11123309 : Record 110;
      ResultNodeBuff@11123307 : TEMPORARY Record 11123303;
      RecRef@11123312 : RecordRef;
      Status@11123310 : Text[1024];
      SalesHeaderExists@11123311 : Boolean;
    BEGIN
      SalesHeaderExists := SalesHeader.GET(OrderImportInfo."Document Type",OrderImportInfo."Order No.");
      IF SalesHeaderExists THEN
        Status := GetOrderShippingStatus(SalesHeader)
      ELSE BEGIN
        SalesShipmentHeader.SETCURRENTKEY("Order No.");
        SalesShipmentHeader.SETRANGE("Order No.",OrderImportInfo."Order No.");
        IF NOT SalesShipmentHeader.ISEMPTY THEN
          Status := 'Complete';
      END;
      IF Status <> '' THEN BEGIN
        InXMLBuff.AddElement(ResultNodeBuff,'Order','');
        ResultNodeBuff.AddFieldElement('OrderId',OrderImportInfo."Sana Order No.");
        ResultNodeBuff.AddFieldElement('DocumentType',FORMAT(OrderImportInfo."Document Type"));
        ResultNodeBuff.AddFieldElement('ShippingStatus',Status);

        SalesShipmentHeader.RESET;
        SalesShipmentHeader.SETCURRENTKEY("Order No.");
        SalesShipmentHeader.SETRANGE("Order No.",OrderImportInfo."Order No.");
        SalesShipmentHeader.SETFILTER("Package Tracking No.",'<>%1','');
        IF SalesShipmentHeader.FINDLAST THEN BEGIN
          RecRef.GETTABLE(SalesShipmentHeader);
          AddShipmentFieldsToXML(ResultNodeBuff,RecRef,TRUE);
        END;

        IF SalesHeaderExists THEN
          CreateOrderLineStatusXML(ResultNodeBuff,SalesHeader);
      END ELSE
        OrderImportInfo.DELETE;
    END;

    PROCEDURE CreateOrderLineStatusXML@11123346(VAR InXMLBuff@11123302 : Record 11123303;SalesHeader@11123303 : Record 36);
    VAR
      SalesLine@11123304 : Record 37;
      SalesDocHeader@11123308 : Record 11123323;
      SubCollectionNodeBuff@11123307 : TEMPORARY Record 11123303;
      CollectionNodeBuff@11123306 : TEMPORARY Record 11123303;
      RecRef@11123309 : RecordRef;
    BEGIN
      FindSalesDocHeader36(SalesHeader,SalesDocHeader);
      InXMLBuff.AddElement(CollectionNodeBuff,'SalesLines','');
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      IF SalesLine.FINDSET THEN
        REPEAT
          RecRef.GETTABLE(SalesLine);
          CollectionNodeBuff.AddElement(SubCollectionNodeBuff,'SalesLine','');
          SubCollectionNodeBuff.AddFieldElement('OrderId',SalesDocHeader."Sana Order No.");
          SubCollectionNodeBuff.AddFieldElement('ProductId',SalesLine."No.");
          SubCollectionNodeBuff.AddFieldElement('VariantId',SalesLine."Variant Code");
          SubCollectionNodeBuff.AddFieldElement('LineType',GetLineType(RecRef));
          SubCollectionNodeBuff.AddFieldElement('ShippingStatus',GetOrderLineShippingStatus(SalesLine));
          RecRef.CLOSE;
        UNTIL SalesLine.NEXT = 0;
    END;

    PROCEDURE GetOrderShippingStatus@11123347(SalesHeader@11123302 : Record 36) : Text[1024];
    VAR
      SalesLine@11123303 : Record 37;
    BEGIN
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::Quote THEN
        EXIT('Pending');
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETFILTER("Outstanding Quantity",'<>%1',0);
      IF SalesLine.ISEMPTY THEN
        EXIT('Complete');
      EXIT('Pending');
    END;

    PROCEDURE GetOrderLineShippingStatus@11123348(SalesLine@11123302 : Record 37) : Text[1024];
    VAR
      Status@11123303 : Text[1024];
    BEGIN
      CASE TRUE OF
        SalesLine."Document Type" = SalesLine."Document Type"::Quote :
          Status := '';
        SalesLine."Outstanding Quantity" = 0 :
          Status := 'Shipped';
        SalesLine."Outstanding Quantity" <> SalesLine.Quantity :
          Status := 'Partially shipped';
        ELSE
          Status := 'Not shipped';
      END;
      EXIT(Status);
    END;

    LOCAL PROCEDURE CheckRequestLanguage@11123349(SalesHeader@11123302 : Record 36;VAR Params@11123303 : Record 11123310);
    BEGIN
      IF (Params.LanguageId = '') OR (Params.LanguageId = '0') THEN BEGIN
      // Not implemented.
      END;
    END;

    PROCEDURE CopyRealSalesLinesToTempTable@11123350(DocumentType@11123302 : Integer;DocumentNo@11123303 : Code[20];VAR ToSalesLines@11123304 : Record 37);
    VAR
      SalesLine@11123305 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        SETCURRENTKEY("Document No.","Line No.","Document Type");
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Document Type",DocumentType);
        IF FINDSET THEN
          REPEAT
            ToSalesLines.INIT;
            ToSalesLines := SalesLine;
            ToSalesLines.INSERT;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE AddPaymentFieldsToXML@11123351(VAR ResultNodeBuff@11123303 : Record 11123303;VAR RecRef@11123302 : RecordRef);
    VAR
      SalesDocHeader@11123304 : Record 11123323;
    BEGIN
      IF FindSalesDocHeader(RecRef,SalesDocHeader) THEN BEGIN
        ResultNodeBuff.AddFieldElement('PaymentMethodName',SalesDocHeader."Payment Method Name");
        ResultNodeBuff.AddFieldElement('PaymentStatus',SalesDocHeader."Payment Method Status");
        ResultNodeBuff.AddFieldElement('PaymentTransactionId',SalesDocHeader."Payment Transaction Id");
      END;
    END;

    PROCEDURE DefineSalesDocHeaderNoAndType@11123354(RecRef@11123302 : RecordRef;VAR DocNo@11123303 : Code[20];VAR DocType@11123304 : Integer);
    VAR
      FieldRefType@11123305 : FieldRef;
      FieldRefNo@11123306 : FieldRef;
    BEGIN
      IF RecRef.FIELDEXIST(1) THEN BEGIN // Pending Orders
        FieldRefType := RecRef.FIELD(1); // Document Type
        DocType := FieldRefType.VALUE;
        FieldRefNo := RecRef.FIELD(3); // No.
        DocNo := FORMAT(FieldRefNo);
      END ELSE BEGIN // History Documents
        IF RecRef.FIELDEXIST(44) THEN BEGIN // Order No.
          FieldRefNo := RecRef.FIELD(44);
          DocNo := FORMAT(FieldRefNo);
          IF DocNo <> '' THEN BEGIN
            DocType := 1; // Order
            EXIT;
          END;
        END;
        IF RecRef.FIELDEXIST(111) THEN BEGIN // Pre-Assigned No.
          FieldRefNo := RecRef.FIELD(111);
          DocNo := FORMAT(FieldRefNo);
          IF DocNo <> '' THEN BEGIN
            DocType := 2; // Invoice
            EXIT;
          END;
        END;
        IF RecRef.FIELDEXIST(137) THEN BEGIN // Prepayment Order No.
          FieldRefNo := RecRef.FIELD(137);
          DocNo := FORMAT(FieldRefNo);
          IF DocNo <> '' THEN BEGIN
            DocType := 1; // Order
            EXIT;
          END;
        END;
      END;
    END;

    PROCEDURE FindSalesDocHeader36@11123383(SalesHeader@11123302 : Record 36;VAR SalesDocHeader@11123303 : Record 11123323) : Boolean;
    VAR
      RecRef@11123304 : RecordRef;
    BEGIN
      RecRef.GETTABLE(SalesHeader);
      EXIT(FindSalesDocHeader(RecRef,SalesDocHeader));
    END;

    PROCEDURE FindSalesDocHeader110@11123384(SalesShipmentHeader@11123304 : Record 110;VAR SalesDocHeader@11123305 : Record 11123323) : Boolean;
    VAR
      RecRef@11123306 : RecordRef;
    BEGIN
      RecRef.GETTABLE(SalesShipmentHeader);
      EXIT(FindSalesDocHeader(RecRef,SalesDocHeader));
    END;

    PROCEDURE FindSalesDocHeader112@11123385(SalesInvoiceHeader@11123304 : Record 112;VAR SalesDocHeader@11123305 : Record 11123323) : Boolean;
    VAR
      RecRef@11123306 : RecordRef;
    BEGIN
      RecRef.GETTABLE(SalesInvoiceHeader);
      EXIT(FindSalesDocHeader(RecRef,SalesDocHeader));
    END;

    PROCEDURE FindSalesDocHeader@11123390(RecRef@11123302 : RecordRef;VAR SalesDocHeader@11123304 : Record 11123323) : Boolean;
    VAR
      DocNo@11123303 : Code[20];
      DocType@11123305 : Integer;
    BEGIN
      DefineSalesDocHeaderNoAndType(RecRef,DocNo,DocType);
      CLEAR(SalesDocHeader);
      EXIT(SalesDocHeader.GET(DocNo,DocType));
    END;

    PROCEDURE InsertSalesDocHeader36@11123352(SalesHeader@11123303 : Record 36;VAR SalesDocHeader@11123302 : Record 11123323) : Boolean;
    VAR
      RecRef@11123304 : RecordRef;
    BEGIN
      RecRef.GETTABLE(SalesHeader);
      EXIT(InsertSalesDocHeader(RecRef,SalesDocHeader));
    END;

    PROCEDURE InsertSalesDocHeader110@11123353(SalesShipmentHeader@11123303 : Record 110;VAR SalesDocHeader@11123302 : Record 11123323) : Boolean;
    VAR
      RecRef@11123304 : RecordRef;
    BEGIN
      RecRef.GETTABLE(SalesShipmentHeader);
      EXIT(InsertSalesDocHeader(RecRef,SalesDocHeader));
    END;

    PROCEDURE InsertSalesDocHeader112@11123355(SalesInvoiceHeader@11123303 : Record 112;VAR SalesDocHeader@11123302 : Record 11123323) : Boolean;
    VAR
      RecRef@11123304 : RecordRef;
    BEGIN
      RecRef.GETTABLE(SalesInvoiceHeader);
      EXIT(InsertSalesDocHeader(RecRef,SalesDocHeader));
    END;

    PROCEDURE InsertSalesDocHeader@11123356(RecRef@11123303 : RecordRef;VAR SalesDocHeader@11123302 : Record 11123323) : Boolean;
    VAR
      DocNo@11123305 : Code[20];
      DocType@11123304 : Integer;
    BEGIN
      DefineSalesDocHeaderNoAndType(RecRef,DocNo,DocType);
      CLEAR(SalesDocHeader);
      SalesDocHeader.INIT;
      SalesDocHeader."Document No." := DocNo;
      SalesDocHeader."Document Type" := DocType;
      EXIT(SalesDocHeader.INSERT(TRUE));
    END;

    PROCEDURE OpenSalesDocHeaderForm36@11123357(SalesHeader@11123302 : Record 36);
    VAR
      RecRef@11123303 : RecordRef;
    BEGIN
      RecRef.GETTABLE(SalesHeader);
      OpenSalesDocHeaderForm(RecRef);
    END;

    PROCEDURE OpenSalesDocHeaderForm110@11123358(SalesShipmentHeader@11123302 : Record 110);
    VAR
      RecRef@11123303 : RecordRef;
    BEGIN
      RecRef.GETTABLE(SalesShipmentHeader);
      OpenSalesDocHeaderForm(RecRef);
    END;

    PROCEDURE OpenSalesDocHeaderForm112@11123359(SalesInvoiceHeader@11123302 : Record 112);
    VAR
      RecRef@11123303 : RecordRef;
    BEGIN
      RecRef.GETTABLE(SalesInvoiceHeader);
      OpenSalesDocHeaderForm(RecRef);
    END;

    PROCEDURE OpenSalesDocHeaderForm@11123360(RecRef@11123303 : RecordRef);
    VAR
      SalesDocHeader@11123302 : Record 11123323;
      TempSalesDocHeader@11123306 : TEMPORARY Record 11123323;
      DocNo@11123304 : Code[20];
      DocType@11123305 : Integer;
      Exists@11123307 : Boolean;
    BEGIN
      CLEAR(SalesDocHeader);
      CLEAR(TempSalesDocHeader);
      Exists := FindSalesDocHeader(RecRef,SalesDocHeader);
      IF Exists THEN
        TempSalesDocHeader := SalesDocHeader
      ELSE BEGIN
        DefineSalesDocHeaderNoAndType(RecRef,DocNo,DocType);
        TempSalesDocHeader."Document No." := DocNo;
        TempSalesDocHeader."Document Type" := DocType;

        SalesDocHeader."Document No." := DocNo;
        SalesDocHeader."Document Type" := DocType;
      END;
      TempSalesDocHeader.INSERT;

      IF PAGE.RUNMODAL(PAGE::"SC - Sales Document Fields",TempSalesDocHeader) = ACTION::LookupOK THEN
        IF NOT RecordsEqual11123323(SalesDocHeader,TempSalesDocHeader) THEN BEGIN
          SalesDocHeader := TempSalesDocHeader;
          IF Exists THEN
            SalesDocHeader.MODIFY(TRUE)
          ELSE
            SalesDocHeader.INSERT(TRUE);
        END;
    END;

    PROCEDURE RecordsEqual11123323@11123361(SalesDocHeader1@11123302 : Record 11123323;SalesDocHeader2@11123303 : Record 11123323) : Boolean;
    VAR
      Validation@11123304 : Codeunit 11123310;
      RecRef1@11123305 : RecordRef;
      RecRef2@11123306 : RecordRef;
      DummyErrorText@11123307 : Text[250];
    BEGIN
      RecRef1.GETTABLE(SalesDocHeader1);
      RecRef2.GETTABLE(SalesDocHeader2);
      EXIT(Validation.RecordsEqual(RecRef1,RecRef2,DummyErrorText));
    END;

    PROCEDURE PaymentStatusValid@11123362(SalesHeader@11123302 : Record 36;VAR Params@11123304 : Record 11123310) : Boolean;
    VAR
      SalesDocHeader@11123303 : Record 11123323;
      PromotableQuote@11123305 : Boolean;
    BEGIN
      PromotableQuote := (SalesHeader."Document Type" = SalesHeader."Document Type"::Quote) AND
                         (Params.DocumentType = 'PromotableQuote');

      IF NOT FindSalesDocHeader36(SalesHeader,SalesDocHeader) THEN BEGIN
        IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Quote THEN
          EXIT(TRUE);

        IF PromotableQuote THEN
          EXIT(TRUE);

        EXIT(FALSE);
      END;

      IF  SalesDocHeader."Document Type" = SalesDocHeader."Document Type"::Quote THEN BEGIN
        IF PromotableQuote THEN
          EXIT(
              (SalesDocHeader."Payment Method Status" = '') AND
              (SalesDocHeader."Document State" = SalesDocHeader."Document State"::Normal));

        EXIT(
          (SalesDocHeader."Payment Method Status" <> 'new') AND
          (SalesDocHeader."Payment Method Status" <> 'cancelled') AND
            (SalesDocHeader."Payment Method Status" <> '') AND
            (SalesDocHeader."Document State" = SalesDocHeader."Document State"::Normal))
      END;

      EXIT(
        (SalesDocHeader."Payment Method Status" <> 'new') AND
        (SalesDocHeader."Payment Method Status" <> 'cancelled') AND
        (SalesDocHeader."Document State" = SalesDocHeader."Document State"::Normal));
    END;

    LOCAL PROCEDURE AddShipmentFieldsToXML@11123364(VAR ResultNodeBuff@11123302 : Record 11123303;VAR RecRef@11123303 : RecordRef;PackageTrackingInfoOnly@11123313 : Boolean);
    VAR
      ShippingAgent@11123304 : Record 291;
      CommonFunc@11123306 : Codeunit 11123309;
      ShippingAgentCode@11123307 : Code[10];
      CountryCode@11123308 : Code[10];
      CountryName@11123309 : Text[1024];
      ShipmentDate@11123310 : Text[1024];
      PackageTrackingNo@11123311 : Text[1024];
      TrackingInternetAddr@11123312 : Text[1024];
    BEGIN
      ShippingAgentCode := CommonFunc.GetFieldValueByName(RecRef,'Shipping Agent Code');
      PackageTrackingNo := CommonFunc.GetFieldValueByName(RecRef,'Package Tracking No.');
      ShipmentDate := CommonFunc.GetFieldValueByName(RecRef,'Shipment Date');
      CountryCode := CommonFunc.GetFieldValueByName(RecRef,'Ship-to Country/Region Code');
      CountryName := GetCountryName(CountryCode);

      IF ShippingAgentCode <> '' THEN
        IF ShippingAgent.GET(ShippingAgentCode) THEN
          TrackingInternetAddr :=
            STRSUBSTNO(
              ShippingAgent."Internet Address",PackageTrackingNo,CountryName,
              ShipmentDate,ShippingAgent."Account No.");

      ResultNodeBuff.AddFieldElement('ShippingTrackingNumber',PackageTrackingNo);
      ResultNodeBuff.AddFieldElement('ShippingTrackingLink',TrackingInternetAddr);
      IF NOT PackageTrackingInfoOnly THEN BEGIN
        ResultNodeBuff.AddFieldElement('ShiptoCountryCode',CountryCode);
        ResultNodeBuff.AddFieldElement('ShiptoCountry',CountryName);
        ResultNodeBuff.AddFieldElement('ShipmentDate',ShipmentDate);
        ResultNodeBuff.AddFieldElement('ShiptoCode',CommonFunc.GetFieldValueByName(RecRef,'Ship-to Code'));
        ResultNodeBuff.AddFieldElement('ShiptoName',CommonFunc.GetFieldValueByName(RecRef,'Ship-to Name'));
        ResultNodeBuff.AddFieldElement('ShiptoAddress',CommonFunc.GetFieldValueByName(RecRef,'Ship-to Address'));
        ResultNodeBuff.AddFieldElement('ShiptoAddress2',CommonFunc.GetFieldValueByName(RecRef,'Ship-to Address 2'));
        ResultNodeBuff.AddFieldElement('ShiptoCounty',CommonFunc.GetFieldValueByName(RecRef,'Ship-to County'));
        ResultNodeBuff.AddFieldElement('ShiptoCity',CommonFunc.GetFieldValueByName(RecRef,'Ship-to City'));
        ResultNodeBuff.AddFieldElement('ShiptoContact',CommonFunc.GetFieldValueByName(RecRef,'Ship-to Contact'));
        ResultNodeBuff.AddFieldElement('ShiptoPostCode',CommonFunc.GetFieldValueByName(RecRef,'Ship-to Post Code'));
        ResultNodeBuff.AddFieldElement('ShippingMethodCode',CommonFunc.GetFieldValueByName(RecRef,'Shipment Method Code'));
      END;
    END;

    PROCEDURE FindSalesDocLine37@11123340(SalesLine@11123302 : Record 37;VAR SalesDocLine@11123303 : Record 11123325) : Boolean;
    VAR
      RecRef@11123304 : RecordRef;
    BEGIN
      RecRef.GETTABLE(SalesLine);
      EXIT(FindSalesDocLine(RecRef,SalesDocLine));
    END;

    PROCEDURE FindSalesDocLine111@11123363(SalesShimpentLine@11123302 : Record 111;VAR SalesDocLine@11123303 : Record 11123325) : Boolean;
    VAR
      RecRef@11123304 : RecordRef;
    BEGIN
      RecRef.GETTABLE(SalesShimpentLine);
      EXIT(FindSalesDocLine(RecRef,SalesDocLine));
    END;

    PROCEDURE FindSalesDocLine113@11123365(SalesInvoiceLine@11123302 : Record 113;VAR SalesDocLine@11123303 : Record 11123325) : Boolean;
    VAR
      RecRef@11123304 : RecordRef;
    BEGIN
      RecRef.GETTABLE(SalesInvoiceLine);
      EXIT(FindSalesDocLine(RecRef,SalesDocLine));
    END;

    PROCEDURE FindSalesDocLine@11123366(RecRef@11123302 : RecordRef;VAR SalesDocLine@11123303 : Record 11123325) : Boolean;
    VAR
      CommonFunc@11123304 : Codeunit 11123309;
      RecRefHeader@11123305 : RecordRef;
      FieldRefDocType@11123306 : FieldRef;
      FieldRefDocNo@11123307 : FieldRef;
      DocNo@11123309 : Code[20];
      DocType@11123308 : Integer;
      LineNo@11123310 : Integer;
      TableNumber@11123311 : Integer;
      HeaderExixts@11123312 : Boolean;
      PrepaymentInvoice@11123313 : Boolean;
    BEGIN
      CLEAR(SalesDocLine);
      TableNumber := CommonFunc.GetCorrectTableNoFromRecRef(RecRef);
      CASE TableNumber OF
        DATABASE::"Sales Line" :
          BEGIN
            DocNo := CommonFunc.GetFieldValueByNo(RecRef,3);
            EVALUATE(DocType,CommonFunc.GetFieldValueByNo(RecRef,1));
            RecRefHeader.OPEN(DATABASE::"Sales Header");
            FieldRefDocType := RecRefHeader.FIELD(1);
            FieldRefDocNo := RecRefHeader.FIELD(3);
            FieldRefDocType.VALUE := DocType;
            FieldRefDocNo.VALUE := DocNo;
            HeaderExixts := RecRefHeader.FIND;
            IF NOT HeaderExixts THEN
              HeaderExixts := RecRef.ISTEMPORARY
          END;
        DATABASE::"Sales Shipment Line" :
          BEGIN
            DocNo := CommonFunc.GetFieldValueByNo(RecRef,3);
            RecRefHeader.OPEN(DATABASE::"Sales Shipment Header");
            FieldRefDocNo := RecRefHeader.FIELD(3);
            FieldRefDocNo.VALUE := DocNo;
            HeaderExixts := RecRefHeader.FIND;
          END;
        DATABASE::"Sales Invoice Line" :
          BEGIN
            DocNo := CommonFunc.GetFieldValueByNo(RecRef,3);
            RecRefHeader.OPEN(DATABASE::"Sales Invoice Header");
            FieldRefDocNo := RecRefHeader.FIELD(3);
            FieldRefDocNo.VALUE := DocNo;
            IF RecRefHeader.FIND THEN BEGIN
              EVALUATE(PrepaymentInvoice,CommonFunc.GetFieldValueByNo(RecRefHeader,136));
              HeaderExixts := NOT PrepaymentInvoice;
            END;
          END;
      END;

      IF HeaderExixts THEN BEGIN
        DocNo := '';
        DocType := 0;
        DefineSalesDocHeaderNoAndType(RecRefHeader,DocNo,DocType);
        EVALUATE(LineNo,CommonFunc.GetFieldValueByNo(RecRef,4));
        CLEAR(SalesDocLine);
        EXIT(SalesDocLine.GET(DocNo,DocType,LineNo));
      END;
    END;

    PROCEDURE IsSpecialCostLine@11123367(SalesLine@11123302 : Record 37) : Boolean;
    VAR
      SalesDocLine@11123303 : Record 11123325;
    BEGIN
      IF FindSalesDocLine37(SalesLine,SalesDocLine) THEN
        EXIT(SalesDocLine."Special Cost Line Type" <> SalesDocLine."Special Cost Line Type"::" ");
    END;

    PROCEDURE GetServiceChargeCode@11123368(RecRef@11123302 : RecordRef) : Text[1024];
    VAR
      SalesInvoiceHeader@11123309 : Record 112;
      CommonFunc@11123308 : Codeunit 11123309;
      DocumentNo@11123307 : Code[20];
      ServiceChargeCode@11123306 : Text[1024];
      Type@11123305 : ' ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)';
      SystemCreatedEntry@11123304 : Boolean;
      PrepaymentLine@11123303 : Boolean;
    BEGIN
      IF NOT EVALUATE(Type,CommonFunc.GetFieldValueByNo(RecRef,5)) THEN
        EXIT;

      IF NOT EVALUATE(SystemCreatedEntry,CommonFunc.GetFieldValueByNo(RecRef,101)) THEN
        EXIT;

      IF NOT EVALUATE(PrepaymentLine,CommonFunc.GetFieldValueByNo(RecRef,123)) THEN
        EXIT;

      IF Type = Type::"G/L Account" THEN BEGIN
        IF RecRef.NUMBER = DATABASE::"Sales Invoice Line" THEN BEGIN
          EVALUATE(DocumentNo,CommonFunc.GetFieldValueByNo(RecRef,3));
          SalesInvoiceHeader.GET(DocumentNo);
          IF SalesInvoiceHeader."Prepayment Invoice" THEN
            PrepaymentLine := TRUE;
        END;

        IF SystemCreatedEntry THEN
          ServiceChargeCode := CommonFunc.GetFieldValueByNo(RecRef,6);

        IF PrepaymentLine THEN
          ServiceChargeCode := STRSUBSTNO(Text11123303,ServiceChargeCode,CommonFunc.GetFieldValueByNo(RecRef,4));
      END;
      EXIT(ServiceChargeCode);
    END;

    PROCEDURE AddSalesTaxBreakdownXML@11123369(VAR ResultNodeBuff@11123302 : Record 11123303);
    VAR
      Context@11123303 : Codeunit 11123305;
      VATInUse@11123304 : Boolean;
    BEGIN
      VATInUse := Context.SupportsVAT(FALSE);
      IF VATInUse THEN
        AddVatBreakdownXML(ResultNodeBuff)
      ELSE
        AddTaxBreakdownXML(ResultNodeBuff);
    END;

    PROCEDURE AddOrderCommentLines@11123370(VAR ResultNodeBuff@11123302 : Record 11123303;VAR Params@11123303 : TEMPORARY Record 11123310;DocLineNo@11123306 : Integer);
    VAR
      SalesCommentLine@11123308 : Record 44;
      ResultCollectionNodeBuff@11123305 : TEMPORARY Record 11123303;
      CollectionNodeBuff@11123304 : TEMPORARY Record 11123303;
      FirstLineNo@11123310 : Integer;
    BEGIN
      WITH SalesCommentLine DO BEGIN
        CASE Params.DocumentType OF
          'Order' :
            SETRANGE("Document Type","Document Type"::Order);
          'Invoice' :
            SETRANGE("Document Type","Document Type"::"Posted Invoice");
          'Shipment' :
            SETRANGE("Document Type","Document Type"::Shipment);
          'ReturnReceipt' :
            SETRANGE("Document Type","Document Type"::"Posted Return Receipt");
          'PromotableQuote','Quote' :
            SETRANGE("Document Type","Document Type"::Quote);
          'CreditNote' :
            SETRANGE("Document Type","Document Type"::"Posted Credit Memo");
          'ReturnOrder' :
            SETRANGE("Document Type","Document Type"::"Return Order");
                ELSE
          ERROR(Text11123302,Params.DocumentType);
            END;

        SETRANGE("No.",Params.DocumentId);
        SETRANGE("Document Line No.",DocLineNo);
        SETFILTER(Date,'<>%1',0D);
        IF FINDLAST THEN BEGIN
          FirstLineNo := "Line No.";
          SETRANGE(Date);
          SETFILTER("Line No.",'>=%1',FirstLineNo);
          IF FINDSET THEN BEGIN
            ResultNodeBuff.AddElement(ResultCollectionNodeBuff,'CommentLines','');
            REPEAT
              ResultCollectionNodeBuff.AddElement(CollectionNodeBuff,'CommentLine',Comment);
          UNTIL NEXT = 0;
      END;
        END;
      END;
    END;

    PROCEDURE AddSalesLineComment@11123417(VAR ResultNodeBuff@11123302 : Record 11123303;VAR Params@11123303 : TEMPORARY Record 11123310);
    VAR
      SalesCommentLine@11123308 : Record 44;
      ResultCollectionNodeBuff@11123305 : TEMPORARY Record 11123303;
      CollectionNodeBuff@11123304 : TEMPORARY Record 11123303;
      FirstLineNo@11123310 : Integer;
    BEGIN
      WITH SalesCommentLine DO BEGIN
        CASE Params.DocumentType OF
          'Order' :
            SETRANGE("Document Type","Document Type"::Order);
          'Invoice' :
            SETRANGE("Document Type","Document Type"::"Posted Invoice");
          'Shipment' :
            SETRANGE("Document Type","Document Type"::Shipment);
          'ReturnReceipt' :
            SETRANGE("Document Type","Document Type"::"Posted Return Receipt");
          'PromotableQuote','Quote' :
            SETRANGE("Document Type","Document Type"::Quote);
          'CreditNote' :
            SETRANGE("Document Type","Document Type"::"Posted Credit Memo");
          'ReturnOrder' :
            SETRANGE("Document Type","Document Type"::"Return Order");
        ELSE
          ERROR(Text11123302,Params.DocumentType);
        END;

        SETRANGE("No.",Params.DocumentId);
        SETRANGE("Document Line No.",0);
        SETFILTER(Date,'<>%1',0D);
        IF FINDLAST THEN BEGIN
          FirstLineNo := "Line No.";
          SETRANGE(Date);
          SETFILTER("Line No.",'>=%1',FirstLineNo);
          IF FINDSET THEN BEGIN
            ResultNodeBuff.AddElement(ResultCollectionNodeBuff,'CommentLines','');
            REPEAT
              ResultCollectionNodeBuff.AddElement(CollectionNodeBuff,'CommentLine',Comment);
            UNTIL NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE AddProdNoVarCodeAttachNoToXML@11123371(RecRef@11123303 : RecordRef;VAR SubCollectionNodeBuff@11123302 : TEMPORARY Record 11123303);
    VAR
      ProductNo@11123305 : Code[50];
      VariantCode@11123304 : Code[50];
      AttachedToLineNo@11123307 : Integer;
    BEGIN
      GetProdNoVarCodeAttachNo(RecRef,ProductNo,VariantCode,AttachedToLineNo);
      SubCollectionNodeBuff.AddFieldElement('ProductId',ProductNo);
      SubCollectionNodeBuff.AddFieldElement('VariantId',VariantCode);
      IF AttachedToLineNo <> 0 THEN
        SubCollectionNodeBuff.AddFieldElement('ParentLineNo',FORMAT(AttachedToLineNo));
    END;

    PROCEDURE GetProdNoVarCodeAttachNo@11123372(RecRef@11123304 : RecordRef;VAR ProductNo@11123303 : Code[50];VAR VariantCode@11123302 : Code[50];VAR AttachedToLineNo@11123308 : Integer);
    VAR
      CommonFunc@11123315 : Codeunit 11123309;
      RecRefParrentLine@11123314 : RecordRef;
      FieldRefProductNo@11123313 : FieldRef;
      FieldRefVariantCode@11123312 : FieldRef;
      FieldRefAttachedToLineNo@11123311 : FieldRef;
      FieldRefCurrentDocType@11123310 : FieldRef;
      FieldRefCurrentDocNo@11123309 : FieldRef;
      TableNumber@11123306 : Integer;
      DocumentType@11123305 : Integer;
    BEGIN
      FieldRefProductNo := RecRef.FIELD(6); // No.
      ProductNo := FORMAT(FieldRefProductNo);

      FieldRefVariantCode := RecRef.FIELD(5402); // Variant Code
      VariantCode := FORMAT(FieldRefVariantCode);

      IF RecRef.FIELDEXIST(80) THEN BEGIN
        FieldRefAttachedToLineNo := RecRef.FIELD(80); // Attached to Line No.
        EVALUATE(AttachedToLineNo,FORMAT(FieldRefAttachedToLineNo));
        IF (AttachedToLineNo <> 0) AND (FORMAT(FieldRefProductNo) = '') THEN BEGIN // Extended Text Line
          TableNumber := CommonFunc.GetCorrectTableNoFromRecRef(RecRef);

          DocumentType := -1;
          IF TableNumber = DATABASE::"Sales Line" THEN BEGIN
            FieldRefCurrentDocType := RecRef.FIELD(1); // Document Type
            DocumentType := FieldRefCurrentDocType.VALUE;
          END;
          FieldRefCurrentDocNo := RecRef.FIELD(3); // Document No.

          IF FindParrentLine(
            TableNumber,
            DocumentType,
            FORMAT(FieldRefCurrentDocNo),
            AttachedToLineNo,
            RecRefParrentLine)
          THEN BEGIN
            VariantCode := COPYSTR(DELCHR(FORMAT(CREATEGUID),'<>','{}'),1,MAXSTRLEN(VariantCode));
            FieldRefProductNo := RecRefParrentLine.FIELD(6); // Get new No. from parrent line
            ProductNo := FORMAT(FieldRefProductNo);
          END;

          RecRefParrentLine.CLOSE;
        END;
      END;
    END;

    LOCAL PROCEDURE FindParrentLine@11123373(TableNumber@11123306 : Integer;DocType@11123305 : Integer;DocNo@11123304 : Code[20];AttachedToLineNo@11123303 : Integer;VAR RecRefParrentLine@11123302 : RecordRef) : Boolean;
    VAR
      FieldRefDocType@11123309 : FieldRef;
      FieldRefDocNo@11123308 : FieldRef;
      FieldRefLineNo@11123307 : FieldRef;
    BEGIN
      RecRefParrentLine.OPEN(TableNumber);

      IF DocType <> -1 THEN
        FieldRefDocType := RecRefParrentLine.FIELD(1); // Document Type
      FieldRefDocNo := RecRefParrentLine.FIELD(3); // Document No.
      FieldRefLineNo := RecRefParrentLine.FIELD(4); // Line No.

      IF DocType <> -1 THEN
        FieldRefDocType.SETRANGE(DocType);
      FieldRefDocNo.SETRANGE(DocNo);
      FieldRefLineNo.SETRANGE(AttachedToLineNo);
      EXIT(RecRefParrentLine.FINDFIRST);
    END;

    PROCEDURE GetOrderLinesCount@11123377(TableRefHeader@11123302 : RecordRef) : Integer;
    VAR
      TableRecRefLines@11123310 : RecordRef;
      FieldRefLineDocType@11123309 : FieldRef;
      FieldRefLineType@11123308 : FieldRef;
      FieldRefLineDocNo@11123307 : FieldRef;
      FieldRefLineNo@11123306 : FieldRef;
      FieldRefDocType@11123305 : FieldRef;
      FieldRefDocNo@11123304 : FieldRef;
      FilterExpression@11123311 : Text[1024];
    BEGIN
      InitSalesDocTableRecRef(TableRefHeader,TableRecRefLines);

      IF TableRefHeader.FIELDEXIST(1) THEN
        FieldRefDocType := TableRefHeader.FIELD(1);         // Document Type
      FieldRefDocNo := TableRefHeader.FIELD(3);             // No.

      IF TableRecRefLines.FIELDEXIST(1) THEN
        FieldRefLineDocType := TableRecRefLines.FIELD(1);   // Document Type
      FieldRefLineDocNo := TableRecRefLines.FIELD(3);       // Document No.
      FieldRefLineType := TableRecRefLines.FIELD(5);        // Type
      FieldRefLineNo := TableRecRefLines.FIELD(4);          // Line No.

      IF TableRefHeader.FIELDEXIST(1) THEN
        FieldRefLineDocType.SETRANGE(FieldRefDocType.VALUE);
      FieldRefLineDocNo.SETRANGE(FieldRefDocNo.VALUE);
      FieldRefLineType.SETRANGE(FieldRefLineType.VALUE(2)); // Type::Item

      FilterExpression := CreateFilterBySalesDocLines(TableRefHeader);

      IF FilterExpression <> '' THEN
        FieldRefLineNo.SETFILTER(FilterExpression);

      EXIT(TableRecRefLines.COUNT);
    END;

    PROCEDURE InitSalesDocTableRecRef@11123392(TableRefHeader@11123303 : RecordRef;VAR TableRecRefLines@11123302 : RecordRef);
    VAR
      CommonFunc@11123304 : Codeunit 11123309;
      TableNo@11123305 : Integer;
    BEGIN
      TableNo := CommonFunc.GetCorrectTableNoFromRecRef(TableRefHeader);

      CASE TableNo OF
        DATABASE::"Sales Header" :
          TableRecRefLines.OPEN(DATABASE::"Sales Line");
        DATABASE::"Sales Shipment Header" :
          TableRecRefLines.OPEN(DATABASE::"Sales Shipment Line");
        DATABASE::"Sales Invoice Header" :
          TableRecRefLines.OPEN(DATABASE::"Sales Invoice Line");
        DATABASE::"Sales Cr.Memo Header"  :
          TableRecRefLines.OPEN(DATABASE::"Sales Cr.Memo Line");
        DATABASE::"Return Receipt Header" :
          TableRecRefLines.OPEN(DATABASE::"Return Receipt Line");
      END;
    END;

    PROCEDURE FindSetSalesDocLines@11123375(RecRef@11123302 : RecordRef;VAR SalesDocLine@11123304 : Record 11123325) : Boolean;
    VAR
      DocNo@11123303 : Code[20];
      DocType@11123305 : Integer;
    BEGIN
      DefineSalesDocHeaderNoAndType(RecRef,DocNo,DocType);
      SalesDocLine.SETRANGE("Document No.",DocNo);
      SalesDocLine.SETRANGE("Document Type",DocType);
      EXIT(SalesDocLine.FINDSET);
    END;

    PROCEDURE CreateFilterBySalesDocLines@11123376(RefRef@11123305 : RecordRef) FilterExpression : Text[1024];
    VAR
      SalesDocLine@11123302 : Record 11123325;
    BEGIN
      IF FindSetSalesDocLines(RefRef,SalesDocLine) THEN
        REPEAT
          IF FilterExpression <> '' THEN
            FilterExpression := STRSUBSTNO('%1&<>%2',FilterExpression,SalesDocLine."Line No.")
          ELSE
            FilterExpression := STRSUBSTNO('<>%1',SalesDocLine."Line No.");
        UNTIL SalesDocLine.NEXT = 0;

      EXIT(FilterExpression);
    END;

    PROCEDURE CopySalesHeaderRecords@11123380(VAR FromSalesHeader@11123302 : Record 36;VAR ToSalesHeader@11123303 : Record 36;VAR Params@11123304 : Record 11123310);
    BEGIN
      IF FromSalesHeader.FINDSET THEN
        REPEAT
          IF NOT Params.CheckPaymentStatus THEN
            SetSalesHeader(FromSalesHeader,ToSalesHeader)
          ELSE
            IF PaymentStatusValid(FromSalesHeader,Params) THEN
              SetSalesHeader(FromSalesHeader,ToSalesHeader);
        UNTIL FromSalesHeader.NEXT = 0;
    END;

    PROCEDURE SetSalesHeader@11123382(VAR FromSalesHeader@11123303 : Record 36;VAR ToSalesHeader@11123302 : Record 36);
    BEGIN
            ToSalesHeader.INIT;
            ToSalesHeader := FromSalesHeader;
            IF ToSalesHeader.INSERT THEN;
    END;

    PROCEDURE AddSalesLineTitleToXML@11123418(VAR SubCollectionNodeBuff@11123302 : Record 11123303;VAR Params@11123303 : Record 11123310;ItemNo@11123304 : Code[20];VariantCode@11123305 : Code[10];Description@11123306 : Text[1024];RecRef@11123307 : RecordRef);
    VAR
      CatalogHelper@11123308 : Codeunit 11123318;
      SalesLineTitle@11123310 : Text[1024];
    BEGIN
      IF VariantCode <> '' THEN BEGIN
        SalesLineTitle := CatalogHelper.GetProductOrVariantDescription(ItemNo,'',Params);
        IF SalesLineTitle = '' THEN
          SalesLineTitle := Description;
        SubCollectionNodeBuff.AddFieldElement('ProductTitle',SalesLineTitle);

        SalesLineTitle := CatalogHelper.GetProductOrVariantDescription(ItemNo,VariantCode,Params);
        IF SalesLineTitle = '' THEN
          SalesLineTitle := Description;
        SubCollectionNodeBuff.AddFieldElement('Title',SalesLineTitle)
      END ELSE BEGIN
        IF NOT IsReadOnlyLine(RecRef) THEN
          SalesLineTitle := CatalogHelper.GetProductOrVariantDescription(ItemNo,'',Params);

        IF SalesLineTitle = '' THEN
          SalesLineTitle := Description;
        SubCollectionNodeBuff.AddFieldElement('ProductTitle',SalesLineTitle);
        SubCollectionNodeBuff.AddFieldElement('Title',SalesLineTitle)
      END;
    END;

    PROCEDURE RetrieveDocStatus@11123374(DocStatus@11123302 : 'Open,Released,Pending Approval,Pending Prepayment') : Text[1024];
    VAR
      DocStatusText@11123303 : Text[1024];
    BEGIN
      CASE DocStatus OF
        DocStatus::Open : DocStatusText := 'Open';
        ELSE
          DocStatusText := 'Released';
      END;
      EXIT(DocStatusText);
    END;

    PROCEDURE SetCostsLinesFilter@11123395(VAR TableRef@11123302 : RecordRef;VAR Params@11123303 : Record 11123310);
    VAR
      Webshop@11123305 : Record 11123313;
      RecMgt@11123304 : Codeunit 11123326;
      CommonFunc@11123306 : Codeunit 11123309;
      FieldRef@11123307 : FieldRef;
      FieldNo@11123308 : Integer;
    BEGIN
      RecMgt.GetWebshop(Params.WebsiteId,Webshop,TRUE);

      FieldNo := CommonFunc.GetFieldNoByName(TableRef.NUMBER,'Type');
      IF TableRef.FIELDEXIST(FieldNo) THEN BEGIN
        FieldRef := TableRef.FIELD(FieldNo);
        FieldRef.SETFILTER('%1|%2',Webshop."Shipping Cost Type",Webshop."Payment Cost Type");
      END;

      FieldNo := CommonFunc.GetFieldNoByName(TableRef.NUMBER,'No.');
      IF TableRef.FIELDEXIST(FieldNo) THEN BEGIN
        FieldRef := TableRef.FIELD(FieldNo);
        FieldRef.SETFILTER('%1|%2',Webshop."Shipping Cost No.",Webshop."Payment Cost No.");
      END;
    END;

    PROCEDURE ApplyDocumenFilters@11123389(VAR TableRef@11123302 : RecordRef;VAR Params@11123303 : Record 11123310);
    BEGIN
      ApplyDocumentIdFilter(TableRef,Params);
      ApplyOriginalOrderIdFilter(TableRef,Params);
      ApplyOriginalPOIdFilter(TableRef,Params);//<TPZ2084>
      ApplyCustomerNoFilter(TableRef,Params);
      ApplyOrderDateFilter(TableRef,Params);
      ApplyDocumentTypeFilter(TableRef,Params);
      ApplyDivisionCodeFilter(TableRef,Params);//<TPZ2503>
    END;

    PROCEDURE CreateMainOrderBasketXmlNode@11123379(SalesHeader@11123303 : Record 36;VAR OutXMLBuff@11123302 : Record 11123303;VAR Params@11123304 : Record 11123310);
    BEGIN
      OutXMLBuff.AddElementEx('DocumentId',SalesHeader."No.");
      OutXMLBuff.AddElementEx('DocumentType',DocTypeToString(SalesHeader,Params));
    END;

    PROCEDURE DocTypeToString@11123386(SalesHeader@11123302 : Record 36;VAR Params@11123304 : Record 11123310) : Text[80];
    VAR
      DocType@11123303 : Text[30];
    BEGIN
      CASE SalesHeader."Document Type" OF
        SalesHeader."Document Type"::Quote :
      BEGIN
            DocType := 'Quote';
            IF Params.DocumentType = 'PromotableQuote' THEN
              DocType := 'PromotableQuote';
          END;
        SalesHeader."Document Type"::Order :
          DocType := 'Order';
        SalesHeader."Document Type"::"Return Order" :
          DocType := 'ReturnOrder';
      ELSE
        ERROR(Text11123302,SalesHeader."Document Type");
      END;

      EXIT(DocType);
    END;

    PROCEDURE GetOrderTotalsTAX@11123399(VAR SalesHeader@11123302 : Record 36;VAR SalesLine@11123317 : Record 37;VAR TotalVat@11123303 : Decimal;VAR TotalInvoiceDiscountAmount@11123304 : Decimal;VAR TotalAmount@11123305 : Decimal;VAR TotalAmountInclVat@11123306 : Decimal;VAR TotalAmountExclDiscount@11123307 : Decimal;VAR VatPercentage@11123308 : Decimal);
    VAR
      SalesLines@11123326 : Record 37;
      SalesLine2@11123325 : Record 37;
      DummySalesLine@11123324 : Record 37;
      TempSalesLine@11123323 : TEMPORARY Record 37;
      TempVatAmountLine@11123322 : TEMPORARY Record 290;
      TaxArea@11123321 : Record 318;
      SalesDocHeader@11123320 : Record 11123323;
      TempSalesTaxLine1@11123319 : TEMPORARY Record 10011;
      SalesDocLine@11123318 : Record 11123325;
      SalesPost@11123316 : Codeunit 80;
      SalesTaxCalculate@11123315 : Codeunit 398;
      DummyText@11123314 : Text[1024];
      DummyDecimal@11123313 : Decimal;
      SpecialCostLineAmount@11123312 : Decimal;
      TotalAmount1@11123311 : Decimal;
      TotalAmount2@11123310 : Decimal;
      Cnt@11123309 : Integer;
    BEGIN
      CLEAR(SalesPost);

      IF (SalesHeader."Tax Area Code" = '') OR SalesHeader."Prices Including VAT" THEN BEGIN
        SalesLines.CalcVATAmountLines(0,SalesHeader,SalesLines,TempVatAmountLine);

        SalesPost.SumSalesLinesTemp(
          SalesHeader,SalesLines,0,SalesLines,DummySalesLine,
          TotalVat,DummyText,DummyDecimal,DummyDecimal,DummyDecimal);

        VatPercentage := TempVatAmountLine."VAT %";
      END ELSE BEGIN
        SalesPost.GetSalesLines(SalesHeader,TempSalesLine,0);
        CLEAR(SalesPost);
        SalesTaxCalculate.StartSalesTaxCalculation;
        TaxArea.GET(SalesHeader."Tax Area Code");
        IF NOT TaxArea."Use External Tax Engine" THEN BEGIN
          TempSalesLine.SETFILTER(Type,'>0');
          TempSalesLine.SETFILTER(Quantity,'<>0');
          IF TempSalesLine.FIND('-') THEN
            REPEAT
              SalesTaxCalculate.AddSalesLine(TempSalesLine);
            UNTIL TempSalesLine.NEXT = 0;
        END;

        TempSalesTaxLine1.DELETEALL;
        IF TaxArea."Use External Tax Engine" THEN
          SalesTaxCalculate.CallExternalTaxEngineForSales(SalesHeader,TRUE)
        ELSE
          SalesTaxCalculate.EndSalesTaxCalculation(TODAY);

        SalesTaxCalculate.GetSalesTaxAmountLineTable(TempSalesTaxLine1);
        IF SalesHeader.Status = SalesHeader.Status::Open THEN
          SalesTaxCalculate.DistTaxOverSalesLines(TempSalesLine);

        SalesPost.SumSalesLinesTemp(
          SalesHeader,TempSalesLine,0,SalesLines,DummySalesLine,
          TotalVat,DummyText,DummyDecimal,DummyDecimal,DummyDecimal);

        TotalAmount1 := SalesLines.Amount;
        TotalAmount2 := TotalAmount1;
        TotalVat := 0;

        TempSalesTaxAmtLineGlobal.RESET;
        TempSalesTaxAmtLineGlobal.DELETEALL;
        SalesTaxCalculate.GetSummarizedSalesTaxTable(TempSalesTaxAmtLineGlobal);

        TempSalesTaxAmtLineGlobal.RESET;
        IF TempSalesTaxAmtLineGlobal.FINDSET THEN
          REPEAT
            TotalVat := TotalVat + TempSalesTaxAmtLineGlobal."Tax Amount";
          UNTIL TempSalesTaxAmtLineGlobal.NEXT = 0;
        TotalAmount2 := TotalAmount2 + TotalVat;

        SalesLines.Amount := TotalAmount1;
        SalesLines."Amount Including VAT" := TotalAmount2;

        IF TempSalesTaxLine1.FINDSET THEN
          REPEAT
            Cnt := Cnt + 1;
            VatPercentage := VatPercentage + TempSalesTaxLine1."Tax %";
          UNTIL TempSalesTaxLine1.NEXT = 0;
        IF Cnt > 1 THEN
          VatPercentage := ROUND(VatPercentage / Cnt,0.01);
      END;

      TotalAmount := SalesLines.Amount;
      TotalAmountInclVat := SalesLines."Amount Including VAT";

      SalesDocLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesDocLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesDocLine.SETRANGE(
        "Special Cost Line Type",
        SalesDocLine."Special Cost Line Type"::"Payment Cost",
        SalesDocLine."Special Cost Line Type"::"Shipping Cost");
      IF SalesDocLine.FINDSET THEN
        REPEAT
          IF SalesLine2.GET(SalesDocLine."Document Type",SalesDocLine."Document No.",SalesDocLine."Line No.") THEN
            SpecialCostLineAmount := SpecialCostLineAmount + SalesLine2."Line Amount";
        UNTIL SalesDocLine.NEXT = 0;

      TotalInvoiceDiscountAmount := SalesLines."Inv. Discount Amount";
      IF SalesHeader."Prices Including VAT" THEN
        TotalAmountExclDiscount := TotalAmountInclVat + TotalInvoiceDiscountAmount - SpecialCostLineAmount
      ELSE
        TotalAmountExclDiscount := TotalAmount + TotalInvoiceDiscountAmount - SpecialCostLineAmount;

      IF FindSalesDocHeader36(SalesHeader,SalesDocHeader) THEN
        IF SalesDocHeader."Promotion Type" = SalesDocHeader."Promotion Type"::Promotion THEN
          TotalInvoiceDiscountAmount := TotalInvoiceDiscountAmount - SalesDocHeader."Promotion Discount Amount";
    END;

    PROCEDURE GetOrderTotalsVAT@11123405(VAR SalesHeader@11123318 : Record 36;VAR SalesLine@11123309 : Record 37;VAR TotalVat@11123308 : Decimal;VAR TotalInvoiceDiscountAmount@11123307 : Decimal;VAR TotalAmount@11123306 : Decimal;VAR TotalAmountInclVat@11123305 : Decimal;VAR TotalAmountExclDiscount@11123304 : Decimal;VAR VatPercentage@11123303 : Decimal);
    VAR
      TempSalesHeader@11123319 : TEMPORARY Record 36;
      DummySalesLine@11123317 : Record 37;
      SalesDocHeader@11123316 : Record 11123323;
      SalesDocLine@11123315 : Record 11123325;
      SalesPost@11123314 : Codeunit 80;
      OrderBaskFunc@11123313 : Codeunit 11123320;
      DummyText@11123312 : Text[1024];
      DummyDecimal@11123311 : Decimal;
      SpecialCostLineAmount@11123310 : Decimal;
    BEGIN
      CLEAR(SalesPost);

      TempSalesHeader := SalesHeader;

      IF NOT SalesLine.FINDFIRST THEN
        EXIT;

      OrderBaskFunc.SetTemporarySalesHeader(SalesLine,TRUE);
      SalesLine.CalcVATAmountLines(0,TempSalesHeader,SalesLine,TempVatAmountLineGlobal);
      SalesPost.SumSalesLinesTemp(
        TempSalesHeader,SalesLine,0,SalesLine,DummySalesLine,
        TotalVat,DummyText,DummyDecimal,DummyDecimal,DummyDecimal);

      VatPercentage := TempVatAmountLineGlobal."VAT %";
      TotalAmount := SalesLine.Amount;
      TotalAmountInclVat := SalesLine."Amount Including VAT";
      TotalInvoiceDiscountAmount := SalesLine."Inv. Discount Amount";
      SalesDocLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesDocLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesDocLine.SETRANGE(
        "Special Cost Line Type",
        SalesDocLine."Special Cost Line Type"::"Payment Cost",
        SalesDocLine."Special Cost Line Type"::"Shipping Cost");
      IF SalesDocLine.FINDSET THEN
        REPEAT
          IF SalesLine.GET(SalesDocLine."Document Type",SalesDocLine."Document No.",SalesDocLine."Line No.") THEN
            SpecialCostLineAmount := SpecialCostLineAmount + SalesLine."Line Amount";
        UNTIL SalesDocLine.NEXT = 0;

      IF SalesHeader."Prices Including VAT" THEN
        TotalAmountExclDiscount := TotalAmountInclVat + TotalInvoiceDiscountAmount - SpecialCostLineAmount
      ELSE
        TotalAmountExclDiscount := TotalAmount + TotalInvoiceDiscountAmount - SpecialCostLineAmount;

      IF FindSalesDocHeader36(SalesHeader,SalesDocHeader) THEN
        IF SalesDocHeader."Promotion Type" = SalesDocHeader."Promotion Type"::Promotion THEN
          TotalInvoiceDiscountAmount := TotalInvoiceDiscountAmount - SalesDocHeader."Promotion Discount Amount";
    END;

    LOCAL PROCEDURE GetOrderTotalsForInvoiceTAX@11123400(VAR SalesInvHeader@11123302 : Record 112;VAR VATAmount@11123303 : Decimal;VAR TotalAmount@11123304 : Decimal;VAR AmountInclVAT@11123305 : Decimal;VAR InvDiscAmount@11123306 : Decimal;VAR VatPercentage@11123307 : Decimal;VAR TotalAmountExlDiscount@11123308 : Decimal);
    VAR
      SalesInvLine@11123309 : Record 113;
      Currency@11123310 : Record 4;
      SalesInvLine2@11123311 : Record 113;
      TempSalesTaxLine@11123313 : TEMPORARY Record 10011;
      TaxArea@11123318 : Record 318;
      SalesDocLine@11123317 : Record 11123325;
      SalesTaxCalculate@11123319 : Codeunit 398;
      RecRef@11123314 : RecordRef;
      SpecialCostLineAmount@11123312 : Decimal;
      DocNo@11123315 : Code[20];
      DocType@11123316 : Integer;
      Cnt@11123320 : Integer;
    BEGIN
      IF SalesInvHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(SalesInvHeader."Currency Code");

      SalesInvLine.CalcVATAmountLines(SalesInvHeader,TempVatAmountLineGlobal);

      SalesInvLine.RESET;
      SalesInvLine.SETRANGE("Document No.",SalesInvHeader."No.");
      IF SalesInvLine.FINDSET THEN
        REPEAT
          TotalAmount := TotalAmount +  SalesInvLine.Amount;
          AmountInclVAT := AmountInclVAT + SalesInvLine."Amount Including VAT";
          InvDiscAmount := InvDiscAmount + SalesInvLine."Inv. Discount Amount";
          Cnt := Cnt + 1;
          VatPercentage := VatPercentage + SalesInvLine."VAT %";
        UNTIL SalesInvLine.NEXT = 0;

      VATAmount := AmountInclVAT - TotalAmount;
      InvDiscAmount := ROUND(InvDiscAmount,Currency."Amount Rounding Precision");

      RecRef.GETTABLE(SalesInvHeader);
      DefineSalesDocHeaderNoAndType(RecRef,DocNo,DocType);
      SalesDocLine.SETRANGE("Document No.",DocNo);
      SalesDocLine.SETRANGE("Document Type",DocType);
      SalesDocLine.SETRANGE(
        "Special Cost Line Type",
        SalesDocLine."Special Cost Line Type"::"Payment Cost",
        SalesDocLine."Special Cost Line Type"::"Shipping Cost");
      IF SalesDocLine.FINDSET THEN
        REPEAT
          IF SalesInvLine2.GET(SalesDocLine."Document No.",SalesDocLine."Line No.") THEN
            SpecialCostLineAmount := SpecialCostLineAmount + SalesInvLine2."Line Amount";
        UNTIL SalesDocLine.NEXT = 0;

      IF SalesInvHeader."Prices Including VAT" THEN
        TotalAmountExlDiscount := AmountInclVAT + InvDiscAmount - SpecialCostLineAmount
      ELSE
        TotalAmountExlDiscount := TotalAmount + InvDiscAmount - SpecialCostLineAmount;

      IF Cnt > 1 THEN
        VatPercentage := ROUND(VatPercentage / Cnt,0.01);

      IF (SalesInvHeader."Tax Area Code" <> '') AND SalesInvHeader."Prices Including VAT" THEN BEGIN
        SalesTaxCalculate.StartSalesTaxCalculation;
        TempSalesTaxLine.DELETEALL;
        TaxArea.GET(SalesInvHeader."Tax Area Code");
        IF TaxArea."Use External Tax Engine" THEN
          SalesTaxCalculate.CallExternalTaxEngineForDoc(DATABASE::"Sales Invoice Header",0,SalesInvHeader."No.")
        ELSE BEGIN
          SalesTaxCalculate.AddSalesInvoiceLines(SalesInvHeader."No.");
          SalesTaxCalculate.EndSalesTaxCalculation(SalesInvHeader."Posting Date");
        END;
        SalesTaxCalculate.GetSalesTaxAmountLineTable(TempSalesTaxLine);
        TempSalesTaxAmtLineGlobal.RESET;
        TempSalesTaxAmtLineGlobal.DELETEALL;
        SalesTaxCalculate.GetSummarizedSalesTaxTable(TempSalesTaxAmtLineGlobal);
      END;
    END;

    LOCAL PROCEDURE GetOrderTotalsForInvoiceVAT@11123402(VAR SalesInvHeader@11123302 : Record 112;VAR VATAmount@11123303 : Decimal;VAR TotalAmount@11123304 : Decimal;VAR AmountInclVAT@11123305 : Decimal;VAR InvDiscAmount@11123306 : Decimal;VAR VatPercentage@11123307 : Decimal;VAR TotalAmountExlDiscount@11123308 : Decimal);
    VAR
      SalesInvLine@11123309 : Record 113;
      Currency@11123310 : Record 4;
      SalesInvLine2@11123311 : Record 113;
      SalesDocLine@11123317 : Record 11123325;
      RecRef@11123314 : RecordRef;
      SpecialCostLineAmount@11123312 : Decimal;
      DocNo@11123315 : Code[20];
      DocType@11123316 : Integer;
    BEGIN
      IF SalesInvHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(SalesInvHeader."Currency Code");

      SalesInvLine.CalcVATAmountLines(SalesInvHeader,TempVatAmountLineGlobal);

      SalesInvLine.RESET;
      SalesInvLine.SETRANGE("Document No.",SalesInvHeader."No.");
      IF SalesInvLine.FINDSET THEN
        REPEAT
          TotalAmount := TotalAmount +  SalesInvLine.Amount;
          AmountInclVAT := AmountInclVAT + SalesInvLine."Amount Including VAT";
          InvDiscAmount := InvDiscAmount + SalesInvLine."Inv. Discount Amount";
        UNTIL SalesInvLine.NEXT = 0;

      VATAmount := AmountInclVAT - TotalAmount;
      InvDiscAmount := ROUND(InvDiscAmount,Currency."Amount Rounding Precision");

      RecRef.GETTABLE(SalesInvHeader);
      DefineSalesDocHeaderNoAndType(RecRef,DocNo,DocType);
      SalesDocLine.SETRANGE("Document No.",DocNo);
      SalesDocLine.SETRANGE("Document Type",DocType);
      SalesDocLine.SETRANGE(
        "Special Cost Line Type",
        SalesDocLine."Special Cost Line Type"::"Payment Cost",
        SalesDocLine."Special Cost Line Type"::"Shipping Cost");
      IF SalesDocLine.FINDSET THEN
        REPEAT
          IF SalesInvLine2.GET(SalesDocLine."Document No.",SalesDocLine."Line No.") THEN
            SpecialCostLineAmount := SpecialCostLineAmount + SalesInvLine2."Line Amount";
        UNTIL SalesDocLine.NEXT = 0;

      IF SalesInvHeader."Prices Including VAT" THEN
        TotalAmountExlDiscount := AmountInclVAT + InvDiscAmount - SpecialCostLineAmount
      ELSE
        TotalAmountExlDiscount := TotalAmount + InvDiscAmount - SpecialCostLineAmount;
    END;

    PROCEDURE AddTaxBreakdownXML@11123403(VAR ResultNodeBuff@11123302 : Record 11123303);
    VAR
      ResultCollectionNodeBuff@11123312 : TEMPORARY Record 11123303;
      CollectionNodeBuff@11123311 : TEMPORARY Record 11123303;
      BreakdownLabel@11123310 : ARRAY [4] OF Text[30];
      BreakdownTaxId@11123309 : ARRAY [4] OF Code[20];
      BreakdownTaxPercent@11123308 : ARRAY [4] OF Decimal;
      BreakdownAmt@11123307 : ARRAY [4] OF Decimal;
      BrkIdx@11123306 : Integer;
      PrevPrintOrder@11123305 : Integer;
      PrevTaxPercent@11123304 : Decimal;
      i@11123303 : Integer;
    BEGIN
      ResultNodeBuff.AddElement(ResultCollectionNodeBuff,'TaxLines','');

      BrkIdx := 0;
      PrevPrintOrder := 0;
      PrevTaxPercent := 0;
      WITH TempSalesTaxAmtLineGlobal DO BEGIN
        RESET;
        SETCURRENTKEY("Print Order","Tax Area Code for Key","Tax Jurisdiction Code");
        IF FINDSET THEN
          REPEAT
            IF ("Print Order" = 0) OR
               ("Print Order" <> PrevPrintOrder) OR
               ("Tax %" <> PrevTaxPercent)
            THEN BEGIN
              BrkIdx := BrkIdx + 1;
              IF BrkIdx > ARRAYLEN(BreakdownAmt) THEN BEGIN
                BrkIdx := BrkIdx - 1;
                BreakdownLabel[BrkIdx] := Text11123304;
              END ELSE
                IF "Print Description" <> '' THEN
                  BreakdownLabel[BrkIdx] := STRSUBSTNO("Print Description","Tax %")
                ELSE
                  BreakdownLabel[BrkIdx] := "Tax Jurisdiction Code";
            END;
            BreakdownTaxId[BrkIdx] := "Tax Area Code for Key";
            BreakdownTaxPercent[BrkIdx] := "Tax %";
            BreakdownAmt[BrkIdx] := BreakdownAmt[BrkIdx] + "Tax Amount";
          UNTIL NEXT = 0;
      END;

      FOR i := 1 TO COMPRESSARRAY(BreakdownLabel) DO BEGIN
        ResultCollectionNodeBuff.AddElement(CollectionNodeBuff,'TaxLine','');
        CollectionNodeBuff.AddFieldElement('TaxId',BreakdownTaxId[BrkIdx]);
        CollectionNodeBuff.AddFieldElement('Description',BreakdownLabel[i]);
        CollectionNodeBuff.AddFieldElement('Amount',FORMAT(BreakdownAmt[i]));
        CollectionNodeBuff.AddFieldElement('Percent',FORMAT(BreakdownTaxPercent[BrkIdx]));
      END;
    END;

    PROCEDURE AddVatBreakdownXML@11123404(VAR ResultNodeBuff@11123302 : Record 11123303);
    VAR
      ResultCollectionNodeBuff@11123312 : TEMPORARY Record 11123303;
      CollectionNodeBuff@11123311 : TEMPORARY Record 11123303;
    BEGIN
      ResultNodeBuff.AddElement(ResultCollectionNodeBuff,'TaxLines','');

      IF TempVatAmountLineGlobal.FINDSET THEN
        REPEAT
          ResultCollectionNodeBuff.AddElement(CollectionNodeBuff,'TaxLine','');
          CollectionNodeBuff.AddFieldElement('TaxId',TempVatAmountLineGlobal."VAT Identifier");
          CollectionNodeBuff.AddFieldElement('Description',TempVatAmountLineGlobal."VAT Identifier");
          CollectionNodeBuff.AddFieldElement('Amount',FORMAT(TempVatAmountLineGlobal."VAT Amount"));
          CollectionNodeBuff.AddFieldElement('Percent',FORMAT(TempVatAmountLineGlobal."VAT %"));
        UNTIL  TempVatAmountLineGlobal.NEXT = 0;
    END;

    PROCEDURE GetOrderReport@11123393(VAR InXMLBuff@11123302 : Record 11123303;VAR OutXMLBuff@11123303 : Record 11123303);
    VAR
      TableRef@11123307 : RecordRef;
      Params@11123304 : TEMPORARY Record 11123310;
      TempBlob@11123305 : TEMPORARY Record 99008535;
      AutomationMgt@11123311 : Codeunit 419;
      Validation@11123306 : Codeunit 11123310;
      FileName@11123308 : Text[1024];
      ReportSaved@11123319 : Boolean;
    BEGIN
      Validation.ValidateDocumentDownloading;

      Params.InitParams(InXMLBuff,0);
      InitializeTableRefByOrderType(TableRef,Params);

      ApplyDocumentTypeFilter(TableRef,Params);
      ApplyDocumentIdFilter(TableRef,Params);
      ApplyOriginalOrderIdFilter(TableRef,Params);

      FileName := AutomationMgt.ServerTempFileName('pdf');
      ReportSaved := SaveReportAsPdf(TableRef,FileName,Params);
      IF ReportSaved THEN
        TempBlob.Blob.IMPORT(FileName);

      TableRef.CLOSE;
      CreateBinaryDataXML(OutXMLBuff,TempBlob,Params);
    END;

    PROCEDURE DefineReportId@11123411(TableRef@11123304 : RecordRef;VAR Params@11123303 : Record 11123310) : Integer;
    VAR
      ReportSelection@11123302 : Record 77;
      CommonFunc@11123305 : Codeunit 11123309;
      DocNo@11123307 : Code[20];
      DocType@11123306 : Integer;
      TableNo@11123308 : Integer;
    BEGIN
      TableNo := CommonFunc.GetCorrectTableNoFromRecRef(TableRef);
      CASE TableNo OF
        DATABASE::"Sales Header":
          BEGIN
            DefineSalesDocHeaderNoAndType(TableRef,DocNo,DocType);
            CASE DocType OF
              0 : EXIT(GetReportId(ReportSelection.Usage::"S.Quote"));    // Quote
              1 : EXIT(GetReportId(ReportSelection.Usage::"S.Order"));    // Order
              2 : EXIT(GetReportId(ReportSelection.Usage::"S.Invoice"));  // Invoice
              3 : EXIT(GetReportId(ReportSelection.Usage::"S.Cr.Memo"));  // Credit Memo
              4 : EXIT(GetReportId(ReportSelection.Usage::"S.Blanket"));  // Blanket Order
              5 : EXIT(GetReportId(ReportSelection.Usage::"S.Return"));   // Return Order
            ELSE
              ERROR(Text11123302,DocType);
            END;
          END;
        DATABASE::"Sales Invoice Header" :
          EXIT(GetReportId(ReportSelection.Usage::"S.Invoice"));
        DATABASE::"Sales Shipment Header" :
          EXIT(GetReportId(ReportSelection.Usage::"S.Shipment"));
        DATABASE::"Sales Cr.Memo Header" :
          EXIT(GetReportId(ReportSelection.Usage::"S.Cr.Memo"));
        DATABASE::"Return Receipt Header" :
          EXIT(GetReportId(ReportSelection.Usage::"S.Ret.Rcpt."));
        ELSE
        ERROR(Text11123305,TableRef.NAME);
      END;
    END;

    PROCEDURE GetReportId@11123396(ReportUsage@11123302 : Integer) : Integer;
    VAR
      ReportSelection@11123303 : Record 77;
    BEGIN
      ReportSelection.SETRANGE(Usage,ReportUsage);
      IF ReportSelection.FINDFIRST THEN
        EXIT(ReportSelection."Report ID");
    END;

    PROCEDURE SaveReportAsPdf@11123397(TableRef@11123302 : RecordRef;FileName@11123304 : Text[1024];VAR Params@11123303 : Record 11123310) : Boolean;
    VAR
      SalesHeader@11123310 : Record 36;
      SalesInvoiceHeader@11123309 : Record 112;
      SalesShipmentHeader@11123308 : Record 110;
      SalesCrMemoHeader@11123306 : Record 114;
      ReturnReceiptHeader@11123305 : Record 6660;
      ReportId@11123312 : Integer;
      ReportSaved@11123311 : Boolean;
    BEGIN
      IF TableRef.FINDFIRST THEN
        CASE TableRef.NUMBER OF
          DATABASE::"Sales Header":
            BEGIN
              ReportId := DefineReportId(TableRef,Params);
              SalesHeader.SETVIEW(TableRef.GETVIEW(FALSE));
              ReportSaved := REPORT.SAVEASPDF(ReportId,FileName,SalesHeader);
            END;
          DATABASE::"Sales Invoice Header":
            BEGIN
              ReportId := DefineReportId(TableRef,Params);
              SalesInvoiceHeader.SETVIEW(TableRef.GETVIEW(FALSE));
              ReportSaved := REPORT.SAVEASPDF(ReportId,FileName,SalesInvoiceHeader);
            END;
          DATABASE::"Sales Shipment Header":
            BEGIN
              ReportId := DefineReportId(TableRef,Params);
              SalesShipmentHeader.SETVIEW(TableRef.GETVIEW(FALSE));
              ReportSaved := REPORT.SAVEASPDF(ReportId,FileName,SalesShipmentHeader);
            END;
          DATABASE::"Sales Cr.Memo Header":
            BEGIN
              ReportId := DefineReportId(TableRef,Params);
              SalesCrMemoHeader.SETVIEW(TableRef.GETVIEW(FALSE));
              ReportSaved := REPORT.SAVEASPDF(ReportId,FileName,SalesCrMemoHeader);
            END;
          DATABASE::"Return Receipt Header":
            BEGIN
              ReportId := DefineReportId(TableRef,Params);
              ReturnReceiptHeader.SETVIEW(TableRef.GETVIEW(FALSE));
              ReportSaved := REPORT.SAVEASPDF(ReportId,FileName,ReturnReceiptHeader);
            END;
        END;

      EXIT(ReportSaved);
    END;

    PROCEDURE CreateBinaryDataXML@11123406(VAR ResultNodeBuff@11123302 : Record 11123303;VAR TempBlob@11123303 : Record 99008535;VAR Params@11123304 : Record 11123310);
    BEGIN
      ResultNodeBuff.AddBlobElement('Data',TempBlob);
    END;

    PROCEDURE EnableDocumentDownloads@11123388(VAR Params@11123302 : Record 11123310) : Boolean;
    VAR
      Webshop@11123304 : Record 11123313;
      RecMgt@11123303 : Codeunit 11123326;
    BEGIN
      RecMgt.GetWebshop(Params.WebsiteId,Webshop,TRUE);
      EXIT(Webshop."Enable Document Downloads");
    END;

    LOCAL PROCEDURE GetOrderTotalsForCreditMemoVAT@11123391(VAR SalesCrMemoHeader@11123302 : Record 114;VAR VATAmount@11123303 : Decimal;VAR TotalAmount@11123304 : Decimal;VAR AmountInclVAT@11123305 : Decimal;VAR InvDiscAmount@11123306 : Decimal;VAR VatPercentage@11123307 : Decimal;VAR TotalAmountExlDiscount@11123308 : Decimal);
    VAR
      SalesCrMemoLine@11123310 : Record 115;
      Currency@11123309 : Record 4;
    BEGIN
      IF SalesCrMemoHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(SalesCrMemoHeader."Currency Code");

      SalesCrMemoLine.CalcVATAmountLines(SalesCrMemoHeader,TempVatAmountLineGlobal);

      SalesCrMemoLine.RESET;
      SalesCrMemoLine.SETRANGE("Document No.",SalesCrMemoHeader."No.");
      IF SalesCrMemoLine.FINDSET THEN
        REPEAT
          TotalAmount := TotalAmount + SalesCrMemoLine.Amount;
          AmountInclVAT := AmountInclVAT + SalesCrMemoLine."Amount Including VAT";
          InvDiscAmount := InvDiscAmount + SalesCrMemoLine."Inv. Discount Amount";
        UNTIL SalesCrMemoLine.NEXT = 0;

      VATAmount := AmountInclVAT - TotalAmount;
      InvDiscAmount := ROUND(InvDiscAmount,Currency."Amount Rounding Precision");

      IF SalesCrMemoHeader."Prices Including VAT" THEN
        TotalAmountExlDiscount := AmountInclVAT + InvDiscAmount
      ELSE
        TotalAmountExlDiscount := TotalAmount + InvDiscAmount;
    END;

    LOCAL PROCEDURE GetOrderTotalsForCreditMemoTAX@11123394(VAR SalesCrMemoHeader@11123302 : Record 114;VAR VATAmount@11123303 : Decimal;VAR TotalAmount@11123304 : Decimal;VAR AmountInclVAT@11123305 : Decimal;VAR InvDiscAmount@11123306 : Decimal;VAR VatPercentage@11123307 : Decimal;VAR TotalAmountExlDiscount@11123308 : Decimal);
    VAR
      SalesCrMemoLine@11123309 : Record 115;
      SalesCrMemoLine2@11123310 : Record 115;
      Currency@11123311 : Record 4;
      TempSalesTaxLine@11123312 : TEMPORARY Record 10011;
      TaxArea@11123313 : Record 318;
      SalesTaxCalculate@11123314 : Codeunit 398;
      Cnt@11123315 : Integer;
    BEGIN
      IF SalesCrMemoHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(SalesCrMemoHeader."Currency Code");

      SalesCrMemoLine.CalcVATAmountLines(SalesCrMemoHeader,TempVatAmountLineGlobal);

      SalesCrMemoLine.RESET;
      SalesCrMemoLine.SETRANGE("Document No.",SalesCrMemoHeader."No.");
      IF SalesCrMemoLine.FINDSET THEN
        REPEAT
          TotalAmount := TotalAmount + SalesCrMemoLine.Amount;
          AmountInclVAT := AmountInclVAT + SalesCrMemoLine."Amount Including VAT";
          InvDiscAmount := InvDiscAmount + SalesCrMemoLine."Inv. Discount Amount";
          Cnt := Cnt + 1;
          VatPercentage := VatPercentage + SalesCrMemoLine."VAT %";
        UNTIL SalesCrMemoLine.NEXT = 0;

      VATAmount := AmountInclVAT - TotalAmount;
      InvDiscAmount := ROUND(InvDiscAmount,Currency."Amount Rounding Precision");

      IF SalesCrMemoHeader."Prices Including VAT" THEN
        TotalAmountExlDiscount := AmountInclVAT + InvDiscAmount
      ELSE
        TotalAmountExlDiscount := TotalAmount + InvDiscAmount;

      IF Cnt > 1 THEN
        VatPercentage := ROUND(VatPercentage / Cnt,0.01);

      IF (SalesCrMemoHeader."Tax Area Code" <> '') AND SalesCrMemoHeader."Prices Including VAT" THEN BEGIN
        SalesTaxCalculate.StartSalesTaxCalculation;
        TempSalesTaxLine.DELETEALL;
        TaxArea.GET(SalesCrMemoHeader."Tax Area Code");
        IF TaxArea."Use External Tax Engine" THEN
          SalesTaxCalculate.CallExternalTaxEngineForDoc(DATABASE::"Sales Cr.Memo Header",0,SalesCrMemoHeader."No.")
        ELSE BEGIN
          SalesTaxCalculate.AddSalesCrMemoLines(SalesCrMemoHeader."No.");
          SalesTaxCalculate.EndSalesTaxCalculation(SalesCrMemoHeader."Posting Date");
        END;
        SalesTaxCalculate.GetSalesTaxAmountLineTable(TempSalesTaxLine);
        TempSalesTaxAmtLineGlobal.RESET;
        TempSalesTaxAmtLineGlobal.DELETEALL;
        SalesTaxCalculate.GetSummarizedSalesTaxTable(TempSalesTaxAmtLineGlobal);
      END;
    END;

    PROCEDURE IsLoadOrderLines@11123401(VAR Params@11123302 : Record 11123310) : Boolean;
    BEGIN
      IF Params.OrderLinesCount > Params.MaxOrderLinesToLoad THEN
        Params.LoadOrderLines := FALSE;

      EXIT(Params.LoadOrderLines);
    END;

    PROCEDURE GetAvailableReturnQuantity@11123398(SalesInvLine@11123302 : Record 113;VAR Params@11123303 : Record 11123310) : Decimal;
    VAR
      Item@11123305 : Record 27;
      RecordMgt@11123304 : Codeunit 11123326;
      CatalogHelper@11123307 : Codeunit 11123318;
      ShippedQtyNotReturned@11123311 : Decimal;
      DummyRevUnitCostLCY@11123313 : Decimal;
      ItemOrderable@11123306 : Boolean;
    BEGIN
      RecordMgt.GetItem(SalesInvLine."No.",Item,FALSE);
      ItemOrderable := CatalogHelper.IsItemOrderable(Item,FALSE,Params);
      IF ItemOrderable THEN
        SalesInvLine.CalcShippedSaleNotReturned(ShippedQtyNotReturned,DummyRevUnitCostLCY,FALSE);

      EXIT(ShippedQtyNotReturned);
    END;

    PROCEDURE GetReturnReasonCode@11123407(VAR InXMLBuff@11123303 : Record 11123303;VAR OutXMLBuff@11123302 : Record 11123303);
    VAR
      ReturnReason@11123304 : Record 6635;
      ReturnReasoneBuff@11123305 : TEMPORARY Record 11123303;
      ReturnReasoneLinesBuff@11123306 : TEMPORARY Record 11123303;
    BEGIN
      ReturnReason.SETRANGE("Visible in Webshop",TRUE);
      IF ReturnReason.FINDSET THEN BEGIN
        OutXMLBuff.AddElement(ReturnReasoneLinesBuff,'OrderLineReturnReasons','');
        REPEAT
          ReturnReasoneLinesBuff.AddElement(ReturnReasoneBuff,'ReturnReasonCode','');
          ReturnReasoneBuff.AddFieldElement('Id',ReturnReason.Code);
          ReturnReasoneBuff.AddFieldElement('Name',ReturnReason.Description);
        UNTIL ReturnReason.NEXT = 0;
      END;
    END;

    PROCEDURE PayInvoiceOrder@11123408(VAR InXMLBuff@11123302 : Record 11123303;VAR OutXMLBuff@11123303 : Record 11123303);
    VAR
      Params@11123304 : TEMPORARY Record 11123310;
      OrderNodesBuff@11123305 : TEMPORARY Record 11123303;
      GenJournalLine@11123307 : Record 81;
    BEGIN
      Params.InitParams(InXMLBuff,0);
      InXMLBuff.SelectNodes('//Order',OrderNodesBuff);
      WHILE OrderNodesBuff.NextNode DO BEGIN
        Params.InitFieldValues(OrderNodesBuff);
        ProcessPayInvoiceOrder(OutXMLBuff,GenJournalLine,Params);
      END;

      CreatePayInvoicerXMLResponse(OutXMLBuff,GenJournalLine,Params);
    END;

    PROCEDURE ProcessPayInvoiceOrder@11123413(VAR OutXMLBuff@11123315 : Record 11123303;VAR GenJournalLine@11123302 : Record 81;VAR Params@11123306 : Record 11123310);
    VAR
      RecRef@11123310 : RecordRef;
      GenJnlManagement@11123303 : Codeunit 230;
      CommonFunct@11123312 : Codeunit 11123309;
      JournalBatchName@11123307 : Code[10];
      JournalTemplateName@11123309 : Code[10];
    BEGIN
      Params.DocumentType := 'Invoice';

      FindDocumentRec(RecRef,Params);
      Params.CustomerId := CommonFunct.GetFieldValueByName(RecRef,'Bill-to Customer No.');

      InitGenJournalLine(GenJournalLine,Params);
      ProcessGenJournalLine(GenJournalLine,Params);
      Params.CustomerId := '';
    END;

    PROCEDURE CreatePayInvoicerXMLResponse@11123415(VAR OutXMLBuff@11123303 : Record 11123303;GenJournalLine@11123305 : Record 81;VAR Params@11123302 : Record 11123310);
    VAR
      ResultNodeBuff@11123304 : TEMPORARY Record 11123303;
    BEGIN
      OutXMLBuff.AddElement(ResultNodeBuff,'Orders','');
      ResultNodeBuff.AddFieldElement('DocumentId',GenJournalLine."Document No.");
    END;

    PROCEDURE InitGenJournalLine@11123409(VAR GenJournalLine@11123303 : Record 81;VAR Params@11123302 : Record 11123310);
    VAR
      Webshop@11123305 : Record 11123313;
      LastGenJournalLine@11123306 : Record 81;
      RecMgt@11123304 : Codeunit 11123326;
      DummyBalance@11123308 : Decimal;
      NextLineNo@11123307 : Integer;
    BEGIN
      RecMgt.GetWebshop(Params.WebsiteId,Webshop,TRUE);

      WITH GenJournalLine DO BEGIN
        "Journal Template Name" := Webshop."Journal Template Name";
        "Journal Batch Name" := Webshop."Journal Batch Name";

        LastGenJournalLine.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
        LastGenJournalLine.SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
        IF LastGenJournalLine.FINDLAST THEN;
        NextLineNo := LastGenJournalLine."Line No." + 10000;
        "Line No." := NextLineNo;

        SetUpNewLine(LastGenJournalLine,DummyBalance,FALSE);
        INSERT(TRUE);
      END;
    END;

    PROCEDURE FindDocumentRec@11123412(VAR RecRef@11123302 : RecordRef;VAR Params@11123303 : Record 11123310);
    BEGIN
      InitializeTableRefByOrderType(RecRef,Params);
      ApplyDocumenFilters(RecRef,Params);
      RecRef.FINDFIRST;
    END;

    PROCEDURE ProcessGenJournalLine@11123414(VAR GenJournalLine@11123303 : Record 81;VAR Params@11123302 : Record 11123310);
    BEGIN
      GenJournalLine.SetHideValidation(TRUE);
      WITH GenJournalLine DO BEGIN
        VALIDATE("Posting Date",WORKDATE);
        VALIDATE("Document Date",WORKDATE);
        VALIDATE("Document Type",GenJournalLine."Document Type"::Payment);
        VALIDATE("Account Type",GenJournalLine."Account Type"::Customer);
        VALIDATE("Account No.",Params.CustomerId);
        VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Invoice);
        VALIDATE("Applies-to Doc. No.",Params.DocumentId);
        VALIDATE(Amount,-Params.Subtotal);
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE PaymentInProgress@11123416(VAR SalesInvoiceHeader@11123302 : Record 112) : Boolean;
    BEGIN
      IF PaymentJournalExists(SalesInvoiceHeader) THEN
        EXIT(TRUE);

      IF AppliedCustEntryExists(SalesInvoiceHeader) THEN
        EXIT(TRUE);
    END;

    PROCEDURE PaymentJournalExists@11123422(VAR SalesInvoiceHeader@11123302 : Record 112) : Boolean;
    VAR
      GenJournalLine@11123303 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::Customer);
      GenJournalLine.SETRANGE("Account No.",SalesInvoiceHeader."Bill-to Customer No.");
      GenJournalLine.SETRANGE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Invoice);
      GenJournalLine.SETRANGE("Applies-to Doc. No.",SalesInvoiceHeader."No.");
      EXIT(NOT GenJournalLine.ISEMPTY);
    END;

    PROCEDURE AppliedCustEntryExists@11123423(VAR SalesInvoiceHeader@11123302 : Record 112) : Boolean;
    VAR
      CustLedgerEntry@11123303 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Customer No.",SalesInvoiceHeader."Bill-to Customer No.");
      CustLedgerEntry.SETRANGE(Open,TRUE);
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      CustLedgerEntry.SETFILTER("Applies-to ID",'<>%1','');
      EXIT(NOT CustLedgerEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE ApplyDivisionCodeFilter@1000000001(VAR TableRef@11123302 : RecordRef;VAR Params@11123303 : Record 11123310);
    VAR
      CommonFunc@11123304 : Codeunit 11123309;
      FilterHelper@11123309 : Codeunit 11123321;
      FieldReference@11123305 : FieldRef;
      DivisionCode@11123308 : Text;
      FieldNo@11123306 : Integer;
      TableNo@11123307 : Integer;
      SalesHeader@1000000000 : Record 36;
      SalesInvHeader@1000000001 : Record 112;
    BEGIN
      //<TPZ2503>
      TableNo := CommonFunc.GetCorrectTableNoFromRecRef(TableRef);
      IF Params.Division <> '' THEN BEGIN
          FieldNo := CommonFunc.GetFieldNoByName(TableNo,'Shortcut Dimension 5 Code');

        IF FieldNo <> 0 THEN
        IF TableRef.FIELDEXIST(FieldNo) THEN BEGIN
            DivisionCode := Params.Division;
            FilterHelper.AdaptCriterionForFilter(DivisionCode);
            FieldReference := TableRef.FIELD(FieldNo);
            FieldReference.SETFILTER(DivisionCode);
        END;
      END;
      //</TPZ2503>
    END;

    PROCEDURE Addpickupline@1000000002(VAR ResultNodeBuff@1000000000 : Record 11123303;VAR Loc@1000000003 : Record 14;VAR SalesHeader@1000000004 : Record 36);
    VAR
      ResultCollectionNodeBuff@1000000002 : TEMPORARY Record 11123303;
      CollectionNodeBuff@1000000001 : TEMPORARY Record 11123303;
    BEGIN
      //<TPZ3154>
        ResultNodeBuff.AddElement(ResultCollectionNodeBuff,'PickUpLocation','');
        ResultCollectionNodeBuff.AddFieldElement('Id','');
        ResultCollectionNodeBuff.AddFieldElement('Name',Loc.Name);
        ResultCollectionNodeBuff.AddFieldElement('CustomerId',SalesHeader."Sell-to Customer No.");
        ResultCollectionNodeBuff.AddFieldElement('ContactId','');
        ResultCollectionNodeBuff.AddFieldElement('ContactName','');//utk
        ResultCollectionNodeBuff.AddFieldElement('Address',Loc.Address);
        ResultCollectionNodeBuff.AddFieldElement('Address2','');
        ResultCollectionNodeBuff.AddFieldElement('CountryId',Loc."Country/Region Code");
        ResultCollectionNodeBuff.AddFieldElement('CountryName',GetCountryName(Loc."Country/Region Code"));
        ResultCollectionNodeBuff.AddFieldElement('State',Loc.County);
        ResultCollectionNodeBuff.AddFieldElement('City',Loc.City);
        ResultCollectionNodeBuff.AddFieldElement('ZipCode',Loc."Post Code");
      //</TPZ3154>
    END;

    LOCAL PROCEDURE ShowDSHIPLpList@1000000004(VAR SalesInvHeader@1000000000 : Record 112;VAR ResultNodeBuffS@1000000012 : TEMPORARY Record 11123303;VAR ResultShipToNodeBuff@1000000010 : TEMPORARY Record 11123303);
    VAR
      IWXLicensePlateHeader@1000000004 : Record 23044505;
      WarehouseShipmentLine@1000000003 : Record 7321;
      PostedWhseShipLine@1000000002 : Record 7323;
      TempIWXLicensePlateHeader@1000000001 : TEMPORARY Record 23044505;
      DSHIPLPList@1000000006 : Page 23044646;
      RegisteredWhseActivityLine@1000000007 : Record 5773;
      RegisteredWhseActivityHdr@1000000008 : Record 5772;
    BEGIN
      //<TPZ3177>
      //Check Posted Lps
      PKgTrackingFound := FALSE;
      TempIWXLicensePlateHeader.DELETEALL;
      CLEAR(TempIWXLicensePlateHeader);

        PostedWhseShipLine.RESET;
        PostedWhseShipLine.SETCURRENTKEY("Source No."); //37618
        PostedWhseShipLine.SETRANGE("Source No.",SalesInvHeader."Order No.");
        IF PostedWhseShipLine.FINDSET THEN BEGIN
          REPEAT
            IWXLicensePlateHeader.RESET;
            IWXLicensePlateHeader.SETRANGE("Shipped Source No.",PostedWhseShipLine."Whse. Shipment No.");
            IF IWXLicensePlateHeader.FINDFIRST THEN BEGIN
              REPEAT
                IF NOT TempIWXLicensePlateHeader.GET(IWXLicensePlateHeader."No.") THEN BEGIN
                  TempIWXLicensePlateHeader.INIT;
                  TempIWXLicensePlateHeader.TRANSFERFIELDS(IWXLicensePlateHeader);
                  TempIWXLicensePlateHeader.INSERT;
                  IF TempIWXLicensePlateHeader."Package Tracking Number" <>'' THEN BEGIN
                    PKgTrackingFound := TRUE;
                    ResultNodeBuffS.AddElement(ResultShipToNodeBuff,'ShippingTrackingNumber','');
                    ResultShipToNodeBuff.AddFieldElement('TrackingNumber',FORMAT(TempIWXLicensePlateHeader."Package Tracking Number"));
                    ResultShipToNodeBuff.AddFieldElement('TrackingAddress',FORMAT(TempIWXLicensePlateHeader."Shipment Tracking URL"));
                    ResultShipToNodeBuff.AddFieldElement('ShippingAgentName',SalesInvHeader."Shipping Agent Code");
                    ResultShipToNodeBuff.AddFieldElement('ShippingAgentService',SalesInvHeader."E-Ship Agent Service")
                  END;
                END;
              UNTIL IWXLicensePlateHeader.NEXT=0;
            END;
          UNTIL PostedWhseShipLine.NEXT = 0;
        END;
        IWXLicensePlateHeader.RESET;
        IWXLicensePlateHeader.SETCURRENTKEY("Shipped Source No."); //37618
        IWXLicensePlateHeader.SETRANGE("Shipped Source No.",SalesInvHeader."Order No.");
        IF IWXLicensePlateHeader.FINDFIRST THEN BEGIN
          REPEAT
            IF NOT TempIWXLicensePlateHeader.GET(IWXLicensePlateHeader."No.") THEN BEGIN
              TempIWXLicensePlateHeader.INIT;
              TempIWXLicensePlateHeader.TRANSFERFIELDS(IWXLicensePlateHeader);
              TempIWXLicensePlateHeader.INSERT;
              IF TempIWXLicensePlateHeader."Package Tracking Number" <>'' THEN BEGIN
                    PKgTrackingFound := TRUE;
                    ResultNodeBuffS.AddElement(ResultShipToNodeBuff,'ShippingTrackingNumber','');
                    ResultShipToNodeBuff.AddFieldElement('TrackingNumber',FORMAT(TempIWXLicensePlateHeader."Package Tracking Number"));
                    ResultShipToNodeBuff.AddFieldElement('TrackingAddress',FORMAT(TempIWXLicensePlateHeader."Shipment Tracking URL"));
                    ResultShipToNodeBuff.AddFieldElement('ShippingAgentName',SalesInvHeader."Shipping Agent Code");
                    ResultShipToNodeBuff.AddFieldElement('ShippingAgentService',SalesInvHeader."E-Ship Agent Service")
              END;
            END;
          UNTIL IWXLicensePlateHeader.NEXT = 0;
        END;

      //Check WPI No.
       { RegisteredWhseActivityLine.RESET;
        RegisteredWhseActivityLine.SETRANGE("Source No.",SalesInvHeader."Order No.");
        RegisteredWhseActivityLine.SETRANGE("Activity Type",RegisteredWhseActivityLine."Activity Type"::Pick);
        IF RegisteredWhseActivityLine.FINDFIRST THEN
          REPEAT
            RegisteredWhseActivityHdr.GET(RegisteredWhseActivityLine."Activity Type",RegisteredWhseActivityLine."No.");
            IWXLicensePlateHeader.RESET;
            IWXLicensePlateHeader.SETAUTOCALCFIELDS("Source No.");
            IWXLicensePlateHeader.SETRANGE("Source No.",RegisteredWhseActivityHdr."Whse. Activity No.");
            IF IWXLicensePlateHeader.FINDFIRST THEN BEGIN
              REPEAT
                IF NOT TempIWXLicensePlateHeader.GET(IWXLicensePlateHeader."No.") THEN BEGIN
                  TempIWXLicensePlateHeader.INIT;
                  TempIWXLicensePlateHeader.TRANSFERFIELDS(IWXLicensePlateHeader);
                  TempIWXLicensePlateHeader.INSERT;
                  IF TempIWXLicensePlateHeader."Package Tracking Number" <>'' THEN BEGIN
                    PKgTrackingFound := TRUE;
                    ResultNodeBuffS.AddElement(ResultShipToNodeBuff,'ShippingTrackingNumber','');
                    ResultShipToNodeBuff.AddFieldElement('TrackingNumber',FORMAT(TempIWXLicensePlateHeader."Package Tracking Number"));
                    ResultShipToNodeBuff.AddFieldElement('TrackingAddress',FORMAT(TempIWXLicensePlateHeader."Shipment Tracking URL"));
                    ResultShipToNodeBuff.AddFieldElement('ShippingAgentName',SalesInvHeader."Shipping Agent Code");
                    ResultShipToNodeBuff.AddFieldElement('ShippingAgentService',SalesInvHeader."E-Ship Agent Service")
                  END;
                END;
              UNTIL IWXLicensePlateHeader.NEXT = 0;
            END;
          UNTIL RegisteredWhseActivityLine.NEXT = 0;}//Not Needed WHI Orders
      //</TPZ3177>
    END;

    LOCAL PROCEDURE ShowDSHIPLpListShipment@1000000014(VAR SalesShipmentHeader@1000000000 : Record 110;VAR ResultNodeBuffS@1000000012 : TEMPORARY Record 11123303;VAR ResultShipToNodeBuff@1000000010 : TEMPORARY Record 11123303);
    VAR
      IWXLicensePlateHeader@1000000004 : Record 23044505;
      WarehouseShipmentLine@1000000003 : Record 7321;
      PostedWhseShipLine@1000000002 : Record 7323;
      TempIWXLicensePlateHeader@1000000001 : TEMPORARY Record 23044505;
      DSHIPLPList@1000000006 : Page 23044646;
      RegisteredWhseActivityLine@1000000007 : Record 5773;
      RegisteredWhseActivityHdr@1000000008 : Record 5772;
    BEGIN
      //<TPZ3177>
      //Check Posted Lps
      PKgTrackingFound := FALSE;
      TempIWXLicensePlateHeader.DELETEALL;
      CLEAR(TempIWXLicensePlateHeader);

        PostedWhseShipLine.RESET;
        PostedWhseShipLine.SETCURRENTKEY("Source No."); //37618
        PostedWhseShipLine.SETRANGE("Source No.",SalesShipmentHeader."Order No.");
        IF PostedWhseShipLine.FINDSET THEN BEGIN
          REPEAT
            IWXLicensePlateHeader.RESET;
            IWXLicensePlateHeader.SETCURRENTKEY("Shipped Source No.");//37618
            IWXLicensePlateHeader.SETRANGE("Shipped Source No.",PostedWhseShipLine."Whse. Shipment No.");
            IF IWXLicensePlateHeader.FINDFIRST THEN BEGIN
              REPEAT
                IF NOT TempIWXLicensePlateHeader.GET(IWXLicensePlateHeader."No.") THEN BEGIN
                  TempIWXLicensePlateHeader.INIT;
                  TempIWXLicensePlateHeader.TRANSFERFIELDS(IWXLicensePlateHeader);
                  TempIWXLicensePlateHeader.INSERT;
                  IF TempIWXLicensePlateHeader."Package Tracking Number" <>'' THEN BEGIN
                    PKgTrackingFound := TRUE;
                    ResultNodeBuffS.AddElement(ResultShipToNodeBuff,'ShippingTrackingNumber','');
                    ResultShipToNodeBuff.AddFieldElement('TrackingNumber',FORMAT(TempIWXLicensePlateHeader."Package Tracking Number"));
                    ResultShipToNodeBuff.AddFieldElement('TrackingAddress',FORMAT(TempIWXLicensePlateHeader."Shipment Tracking URL"));
                    ResultShipToNodeBuff.AddFieldElement('ShippingAgentName',SalesShipmentHeader."Shipping Agent Code");
                    ResultShipToNodeBuff.AddFieldElement('ShippingAgentService',SalesShipmentHeader."E-Ship Agent Service")
                  END;
                END;
              UNTIL IWXLicensePlateHeader.NEXT=0;
            END;
          UNTIL PostedWhseShipLine.NEXT = 0;
        END;
        IWXLicensePlateHeader.RESET;
        IWXLicensePlateHeader.SETCURRENTKEY("Shipped Source No."); //37618
        IWXLicensePlateHeader.SETRANGE("Shipped Source No.",SalesShipmentHeader."Order No.");
        IF IWXLicensePlateHeader.FINDFIRST THEN BEGIN
          REPEAT
            IF NOT TempIWXLicensePlateHeader.GET(IWXLicensePlateHeader."No.") THEN BEGIN
              TempIWXLicensePlateHeader.INIT;
              TempIWXLicensePlateHeader.TRANSFERFIELDS(IWXLicensePlateHeader);
              TempIWXLicensePlateHeader.INSERT;
              IF TempIWXLicensePlateHeader."Package Tracking Number" <>'' THEN BEGIN
                    PKgTrackingFound := TRUE;
                    ResultNodeBuffS.AddElement(ResultShipToNodeBuff,'ShippingTrackingNumber','');
                    ResultShipToNodeBuff.AddFieldElement('TrackingNumber',FORMAT(TempIWXLicensePlateHeader."Package Tracking Number"));
                    ResultShipToNodeBuff.AddFieldElement('TrackingAddress',FORMAT(TempIWXLicensePlateHeader."Shipment Tracking URL"));
                    ResultShipToNodeBuff.AddFieldElement('ShippingAgentName',SalesShipmentHeader."Shipping Agent Code");
                    ResultShipToNodeBuff.AddFieldElement('ShippingAgentService',SalesShipmentHeader."E-Ship Agent Service")
              END;
            END;
          UNTIL IWXLicensePlateHeader.NEXT = 0;
        END;

      //Check WPI No.
       { RegisteredWhseActivityLine.RESET;
        RegisteredWhseActivityLine.SETCURRENTKEY("Activity Type","Source No."); //37618
        RegisteredWhseActivityLine.SETRANGE("Activity Type",RegisteredWhseActivityLine."Activity Type"::Pick);
        RegisteredWhseActivityLine.SETRANGE("Source No.",SalesShipmentHeader."Order No.");
        IF RegisteredWhseActivityLine.FINDFIRST THEN
          REPEAT
            RegisteredWhseActivityHdr.GET(RegisteredWhseActivityLine."Activity Type",RegisteredWhseActivityLine."No.");
            IWXLicensePlateHeader.RESET;
            IWXLicensePlateHeader.SETAUTOCALCFIELDS("Source No.");
            IWXLicensePlateHeader.SETRANGE("Source No.",RegisteredWhseActivityHdr."Whse. Activity No.");
            IF IWXLicensePlateHeader.FINDFIRST THEN BEGIN
              REPEAT
                IF NOT TempIWXLicensePlateHeader.GET(IWXLicensePlateHeader."No.") THEN BEGIN
                  TempIWXLicensePlateHeader.INIT;
                  TempIWXLicensePlateHeader.TRANSFERFIELDS(IWXLicensePlateHeader);
                  TempIWXLicensePlateHeader.INSERT;
                  IF TempIWXLicensePlateHeader."Package Tracking Number" <>'' THEN BEGIN
                    PKgTrackingFound := TRUE;
                    ResultNodeBuffS.AddElement(ResultShipToNodeBuff,'ShippingTrackingNumber','');
                    ResultShipToNodeBuff.AddFieldElement('TrackingNumber',FORMAT(TempIWXLicensePlateHeader."Package Tracking Number"));
                    ResultShipToNodeBuff.AddFieldElement('TrackingAddress',FORMAT(TempIWXLicensePlateHeader."Shipment Tracking URL"));
                    ResultShipToNodeBuff.AddFieldElement('ShippingAgentName',SalesShipmentHeader."Shipping Agent Code");
                    ResultShipToNodeBuff.AddFieldElement('ShippingAgentService',SalesShipmentHeader."E-Ship Agent Service")
                  END;
                END;
              UNTIL IWXLicensePlateHeader.NEXT = 0;
            END;
          UNTIL RegisteredWhseActivityLine.NEXT = 0;}//Not Needed WHI Orders
      //</TPZ3177>
    END;

    BEGIN
    {
      2016-02-09 TPZ1301 TAKHMETO
        GetNonEmptyCurrencyCode function has been modified
      2017-05-02 TPZ1816 EBAGIM
        GetOrder function has been modified  - Add tracking info
      2017-10-13 TPZ2027 EBAGIM
        Swaping Salesperon with MfrRep table
      2017-10-11 TPZ2084 EBAGIM
        Pull an invoice using a PO number
      2017-10-11 TPZ2119 EBAGIM
        Fix issue with manual Tracking Number
      2017-10-11 TPZ2084 EBAGIM
        Pull an invoice using a PO number
      2019-05-20  TPZ2503 UCHOUHAN
        Added new function "ApplyDivisionCodeFilter" and code for filtering according to division wise.
      2019-09-20  TPZ2653 UCHOUHAN
        Shipping Agent Code and Shipping agent service added into Tracking info.
      2019-11-13 TPZ2692 UCHOUHAN
        Old code commented and new code added for Sorting changes into Deceneding Order.
      001 TPZ3154 UTK 05112021 Added code for Ispickuporder field updated for Pickup integration with Sana.
      002 TPZ3177 UTK 05282021 Added code to fetch tracking info from Licnese plate.
      003 TPZ3398 UTK 11032021 Added code to show only last 30 days Released quotes.
      004 TPZ3405 UTK 11032021 Added code to update Exp date order date plus one month in Quotes.
    }
    END.
  }
}

