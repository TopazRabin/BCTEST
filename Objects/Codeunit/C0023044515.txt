OBJECT Codeunit 23044515 WHI Custom Functions
{
  OBJECT-PROPERTIES
  {
    Date=03/18/21;
    Time=[ 4:27:29 PM];
    Modified=Yes;
    Version List=WHI2.4.7684.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      cuCommonFuncs@1000000002 : Codeunit 23044501;
      dtStartTime@1000000003 : DateTime;
      dtEndTime@1000000004 : DateTime;
      tcCustomCodeunitFailed@1000000001 : TextConst 'ENU=%1 %2 failed:%3';

    PROCEDURE OnBeforeProcessEvent@1000000011(piEventID@1000000002 : Integer;VAR precEventParams@1000000001 : Record 23044511;VAR pbtxtOutput@1000000000 : BigText) pbOverrideWHI : Boolean;
    BEGIN
      //////////////////////////////////////////////
      //<Summary>
      //
      //          This gets called before WHI has processed the event.
      //          If you need to change the handling of an event, or do some additional checks
      //          *before* WHI handles the event, do it here.
      //
      //          If you need to override or extend WHI behavior for a specific client then
      //          look in OnBeforeProcessEvent on OnAfterProcessEvent
      //
      //          if pbOverrideWHI is set to false, WHI will continue to process the event
      //          if pbOverrideWHI is set to true, WHI will no longer process the event.
      //
      //</Summary>
      //////////////////////////////////////////////


      pbOverrideWHI :=FALSE;

      dtStartTime := CURRENTDATETIME;

      pbOverrideWHI := CallExtensibility(
        precEventParams."Extensibility Event"::OnBeforeProcessEvent,
        piEventID,
        precEventParams,
        pbtxtOutput );
    END;

    PROCEDURE OnAfterProcessEvent@1000000021(piEventID@1000000002 : Integer;VAR precEventParams@1000000001 : Record 23044511;VAR pbtxtOutput@1000000000 : BigText);
    BEGIN
      //////////////////////////////////////////////
      //<Summary>
      //
      //          This gets called AFTER WHI has processed the event.
      //          Use this if you need to extend information, or do processing after WHI has
      //          processed a specific event.
      //
      //          For example, if you need to perform a custom step or action after a PRINT, or POST, this
      //          would be the function to extend for your customer.
      //
      //          If you need to override or extend WHI behavior for a specific client then
      //          look in OnBeforeProcessEvent on OnAfterProcessEvent
      //
      //</Summary>
      //////////////////////////////////////////////

      dtEndTime := CURRENTDATETIME;

      // ERROR('The event took %1 MS', (dtEndTime-dtStartTime) );
      CallExtensibility(
        precEventParams."Extensibility Event"::OnAfterProcessEvent,
        piEventID,
        precEventParams,
        pbtxtOutput );
    END;

    PROCEDURE CallExtensibility@1000014102(poptExtensibility@1000000002 : Option;piEvent@1000000003 : Integer;VAR precEventParams@1000000000 : Record 23044511;VAR pbtxtOutput@1000000005 : BigText) lbOverrideWHI : Boolean;
    VAR
      lrecConfig@1000000001 : Record 23044504;
      lisExtensibleContent@1000000004 : InStream;
      lbContinue@1000000007 : Boolean;
      lrecWHISetup@1000000008 : Record 23044502;
      liExtensibilityCodeunit@1000000009 : Integer;
      ltxtValueFromExtension@1000000006 : BigText;
    BEGIN
      //
      // Added to allow custom WHI extension codeunits
      //
      lbOverrideWHI := FALSE;

      precEventParams.setEvent( piEvent );
      cuCommonFuncs.getDeviceConfig( lrecConfig,precEventParams );
      lbContinue := FALSE;
      // IF ( NOT GUIALLOWED ) THEN BEGIN
      IF ( ( NOT GUIALLOWED ) AND ( lrecConfig.Code <> '' ) ) THEN BEGIN
        // device mode
        IF ( lrecConfig."Extensibility CodeUnit" <> 0 ) THEN BEGIN
          liExtensibilityCodeunit := lrecConfig."Extensibility CodeUnit";
          precEventParams.setExtensibilityEvent( poptExtensibility );
          lbContinue := TRUE;
        END;
      END ELSE BEGIN
        // interactive NAV mode
        // or device mode but no specific configuration is available.
        lrecWHISetup.GET();
        IF ( lrecWHISetup."Extensibility CodeUnit" <> 0 ) THEN BEGIN
          liExtensibilityCodeunit := lrecWHISetup."Extensibility CodeUnit";
          IF ( precEventParams.ISEMPTY ) THEN BEGIN
            precEventParams.INIT();
            precEventParams.INSERT(FALSE);
          END;
          precEventParams.setExtensibilityEvent( poptExtensibility );
          lbContinue := TRUE;
        END;
      END;

      IF ( lbContinue ) THEN BEGIN
        CODEUNIT.RUN( liExtensibilityCodeunit, precEventParams );
        lbOverrideWHI := precEventParams.getExtensibilityOverride();
        // and check to see if there is XML content.
        // XML content can be appended to or replace entirely.
        //<IW author="Howie Zhao" date="09/26/16" issue="TFS2478" >
        //precEventParams.CALCFIELDS("Extensibility Blob");

        // check if overridden - if true then proceed to clear out the blob
        // if false then don't clear it out?  This 'fix' was put in to allow the 'take picture' event to work
        IF lbOverrideWHI THEN BEGIN
          precEventParams.SETAUTOCALCFIELDS("Extensibility Blob");
          IF (precEventParams.FINDSET(FALSE)) THEN BEGIN
            REPEAT
              IF ( precEventParams."Extensibility Blob".HASVALUE ) THEN BEGIN
                precEventParams."Extensibility Blob".CREATEINSTREAM( lisExtensibleContent );
                //<IW author="Howie Zhao" date="04/08/16" issue="TFS2441" >
                ltxtValueFromExtension.READ( lisExtensibleContent);
                pbtxtOutput.ADDTEXT(ltxtValueFromExtension);
                CLEAR(precEventParams."Extensibility Blob");
                precEventParams.MODIFY;
                //</IW>
                // TODO: auto-detect multiple root elements and add a wrapper
              END;
            UNTIL (precEventParams.NEXT = 0);
          END;
        END;
      END;
    END;

    PROCEDURE OnUpdateSalesLine@1000000000(piEventID@1000000003 : Integer;VAR precSalesLine@1000000000 : Record 37;VAR precEventParams@1000000001 : Record 23044511;VAR pbtxtOutput@1000000004 : BigText) pbOverrideWHI : Boolean;
    VAR
      lrecRef@1000000002 : Integer;
    BEGIN
      //
      // Added to support custom functionality on sales line updates
      //
      precEventParams.setExtensibilitySalesLine( precSalesLine );
      pbOverrideWHI := CallExtensibility(
        precEventParams."Extensibility Event"::OnBeforeModify,
        piEventID,
        precEventParams,
        pbtxtOutput );
    END;

    PROCEDURE OnUpdateTransferLine@1000000006(piEventID@1000000003 : Integer;VAR precTransferLine@1000000000 : Record 5741;VAR precEventParams@1000000001 : Record 23044511;VAR pbtxtOutput@1000000004 : BigText) pbOverrideWHI : Boolean;
    VAR
      lrecRef@1000000002 : Integer;
    BEGIN
      //
      // Added to support custom functionality on sales line updates
      //
      precEventParams.setExtensibilityTransferLine( precTransferLine );
      pbOverrideWHI := CallExtensibility(
        precEventParams."Extensibility Event"::OnBeforeModify,
        piEventID,
        precEventParams,
        pbtxtOutput );
    END;

    PROCEDURE OnUpdatePurchaseLine@1000000007(piEventID@1000000003 : Integer;VAR precPurchaseLine@1000000000 : Record 39;VAR precEventParams@1000000001 : Record 23044511;VAR pbtxtOutput@1000000004 : BigText) pbOverrideWHI : Boolean;
    VAR
      lrecRef@1000000002 : Integer;
    BEGIN
      //
      // Added to support custom functionality on sales line updates
      //
      precEventParams.setExtensibilityPurchaseLine( precPurchaseLine );
      pbOverrideWHI := CallExtensibility(
        precEventParams."Extensibility Event"::OnBeforeModify,
        piEventID,
        precEventParams,
        pbtxtOutput );
    END;

    PROCEDURE OnGetDefaultFromToTransferBin@1000000008(pbOutBound@1000000005 : Boolean;VAR precTransferHeader@1000000000 : Record 5740;VAR pcodOutBin@1000000004 : Code[20]) pbOverrideWHI : Boolean;
    VAR
      ltrecEventParams@1000000003 : TEMPORARY Record 23044511;
      lbtIgnored@1000000001 : BigText;
      lrecCustomItemJournalLine@1000000002 : Record 83;
    BEGIN
      //
      // Call extensibility trigger if it exists for finding the default
      // bin.
      //
      ltrecEventParams.INIT();
      ltrecEventParams.INSERT(FALSE);//temporary record


      ltrecEventParams.setExtensibilityTransferHeader(precTransferHeader);
      ltrecEventParams.setValue('transfer_document', precTransferHeader."No." );
      IF ( pbOutBound ) THEN BEGIN
        ltrecEventParams.setValue('is_outbound', '1' );
      END ELSE BEGIN
        ltrecEventParams.setValue('is_outbound', '0' );
      END;


      pbOverrideWHI := CallExtensibility(
        ltrecEventParams."Extensibility Event"::OnBeforeProcessEvent,
        -500102, // negative to indicate this may or may not come from the PDA.
        ltrecEventParams,
        lbtIgnored );

      IF ( pbOverrideWHI ) THEN BEGIN
        pcodOutBin := ltrecEventParams.getValue( 'bin_code' );
      END;
    END;

    PROCEDURE OnSetup@1000000002(VAR precConfig@1000000000 : Record 23044504);
    VAR
      ltrecEventParams@1000000001 : TEMPORARY Record 23044511;
      lbtIgnored@1000000002 : BigText;
      ltxtTestExtendedAssembly@1000000003 : Text[250];
    BEGIN
      //
      // Added to support custom functionality on sales line updates
      //

      ltrecEventParams.setValue('config_id', precConfig.Code );
      CallExtensibility(
        ltrecEventParams."Extensibility Event"::OnSetup,
        0,
        ltrecEventParams,
        lbtIgnored );

      ltxtTestExtendedAssembly := COPYSTR( ltrecEventParams.getValue('extensible_dll' ), 1, MAXSTRLEN( ltxtTestExtendedAssembly ) );
      IF ( ltxtTestExtendedAssembly <> '' ) THEN
      BEGIN
        precConfig."Extensibility Assembly" := COPYSTR( ltxtTestExtendedAssembly, 1, MAXSTRLEN( precConfig.
          "Extensibility Assembly" ));
      END;
    END;

    PROCEDURE OnReportRun@1240060001(piReportID@1240060000 : Integer;pbShowRequest@1240060001 : Boolean;pbUseSystem@1240060002 : Boolean;pvarRecordRef@1240060003 : Variant) rbDidSomething : Boolean;
    VAR
      ltrecEventParams@1240060006 : TEMPORARY Record 23044511;
      lbtIgnored@1240060005 : BigText;
      ltxtTestExtendedAssembly@1240060004 : Text[250];
      lrecRef@1240060007 : RecordRef;
    BEGIN

      lrecRef := pvarRecordRef;

      ltrecEventParams.INIT();
      ltrecEventParams.setValue('recordid', FORMAT( lrecRef.RECORDID ) );
      ltrecEventParams.setValue('tableno', FORMAT( lrecRef.NUMBER )  );
      ltrecEventParams.setValue('Report No.', FORMAT( piReportID )  );
      ltrecEventParams.setValue('ShowRequestForm', FORMAT( pbShowRequest )  );
      ltrecEventParams.setValue('UseSystemprinter', FORMAT( pbUseSystem )  );
      COMMIT();


      rbDidSomething := CallExtensibility(
        ltrecEventParams."Extensibility Event"::OnReportRun,
        0,
        ltrecEventParams,
        lbtIgnored );
    END;

    PROCEDURE OnBeforeAssignLPToReclassLine@1000000001(pcodLicensePlateNumber@1000000001 : Code[20];pcodReclassBatch@1000000002 : Code[20];piSpecificLineNumber@1000000003 : Integer);
    VAR
      ltrecEventParams@1000000000 : TEMPORARY Record 23044511;
      lbtIgnored@1000000004 : BigText;
    BEGIN
      //
      // Added to support custom functionality on assign lp to a reclass line
      //

      ltrecEventParams.INIT();
      ltrecEventParams.INSERT(FALSE);//temporary record
      ltrecEventParams.setValue('lp_number', pcodLicensePlateNumber);
      ltrecEventParams.setValue('batch', pcodReclassBatch);
      ltrecEventParams.setValue('line_number', FORMAT(piSpecificLineNumber));

      CallExtensibility(
        ltrecEventParams."Extensibility Event"::OnBeforeProcessEvent,
        -20051,
        ltrecEventParams,
        lbtIgnored );
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
    }
    END.
  }
}

