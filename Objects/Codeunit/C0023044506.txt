OBJECT Codeunit 23044506 IWX Reservation Engine
{
  OBJECT-PROPERTIES
  {
    Date=01/31/19;
    Time=[ 9:32:49 AM];
    Version List=IWX2.4.7684.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      xTempItemTrackingLine@1000000040 : TEMPORARY Record 336;
      TotalItemTrackingLine@1000000039 : Record 336;
      TempItemTrackLineInsert@1000000038 : TEMPORARY Record 336;
      TempItemTrackLineModify@1000000013 : TEMPORARY Record 336;
      TempItemTrackLineDelete@1000000004 : TEMPORARY Record 336;
      TempItemTrackLineReserv@1000000035 : TEMPORARY Record 336;
      Item@1000000034 : Record 27;
      ItemTrackingCode@1000000033 : Record 6502;
      TempReservEntry@1000000032 : TEMPORARY Record 337;
      NoSeriesMgt@1000000031 : Codeunit 396;
      ItemTrackingMgt@1000000030 : Codeunit 6500;
      ReservEngineMgt@1000000029 : Codeunit 99000831;
      ItemTrackingDataCollection@1000000028 : Codeunit 6501;
      UndefinedQtyArray@1000000027 : ARRAY [3] OF Decimal;
      SourceQuantityArray@1000000026 : ARRAY [5] OF Decimal;
      QtyPerUOM@1000000025 : Decimal;
      QtyToAddAsBlank@1000000024 : Decimal;
      CurrentSteps@1000000023 : Integer;
      CurrentSignFactor@1000000022 : Integer;
      LastEntryNo@1000000021 : Integer;
      CurrentSourceType@1000000019 : Integer;
      ExpectedReceiptDate@1000000018 : Date;
      ShipmentDate@1000000017 : Date;
      CurrentEntryStatus@1000000016 : 'Reservation,Tracking,Surplus,Prospect';
      FormRunMode@1000000015 : ',Reclass,Combined Ship/Rcpt,Drop Shipment,Transfer';
      InsertIsBlocked@1000000014 : Boolean;
      BlockCommit@1000000012 : Boolean;
      IsCorrection@1000000011 : Boolean;
      MoveBinContent@1000000010 : Boolean;
      CurrentFormIsOpen@1000000009 : Boolean;
      CalledFromSynchWhseItemTrkg@1000000008 : Boolean;
      SNAvailabilityActive@1000000007 : Boolean;
      LotAvailabilityActive@1000000006 : Boolean;
      Inbound@1000000005 : Boolean;
      CurrentSourceRowID@1000000003 : Text[100];
      SecondSourceRowID@1000000002 : Text[100];
      ForBinCode@1000000001 : Code[20];
      IsPick@1000000000 : Boolean;
      tRec@1000000041 : TEMPORARY Record 336;
      Text000@1000000060 : TextConst 'ENU=Reservation is defined for the %1.\You must cancel the existing Reservation before deleting or changing Item Tracking.;ESM=Hay una reserva definida para %1.\Cancele la reserva antes de eliminar o modificar el seguimiento del producto.;FRC=La r‚serve est d‚finie pour le %1.\Vous devez annuler la r‚serve actuelle avant de supprimer ou de modifier le suivi d''article.;ENC=Reservation is defined for the %1.\You must cancel the existing Reservation before deleting or changing Item Tracking.';
      Text001@1000000059 : TextConst 'ENU=Reservation is defined for the %1.\You must not set %2 lower then %3.;ESM=Hay una reserva definida para %1.\%2 debe ser menor que %3.;FRC=La r‚serve est d‚finie pour le %1.\Vous ne pouvez pas d‚finir %2 … une valeur inf‚rieure … celle de %3.;ENC=Reservation is defined for the %1.\You must not set %2 lower then %3.';
      Text002@1000000058 : TextConst 'ENU=Quantity must be %1.;ESM=Cantidad debe ser %1.;FRC=La quantit‚ doit ˆtre %1.;ENC=Quantity must be %1.';
      Text003@1000000057 : TextConst 'ENU=negative;ESM=negativo;FRC=n‚gative;ENC=negative';
      Text004@1000000056 : TextConst 'ENU=positive;ESM=positivo;FRC=positif;ENC=positive';
      Text005@1000000055 : TextConst 'ENU=Error when writing to database.;ESM=Error al escribir en la base de datos.;FRC=Erreur lors de l''‚criture sur la base de donn‚es.;ENC=Error when writing to database.';
      Text006@1000000054 : TextConst 'ENU=The corrections cannot be saved as excess quantity has been defined.\Close the form anyway?;ESM=No se pueden guardar las correcciones porque existe un exceso de cdad.\¨Desea cerrar el formulario?;FRC=Les corrections ne peuvent ˆtre enregistr‚es car vous avez indiqu‚ une quantit‚ excessive.\Souhaitez-vous tout de mˆme fermer le formulaire ?;ENC=The corrections cannot be saved as excess quantity has been defined.\Close the form anyway?';
      Text007@1000000053 : TextConst 'ENU=Another user has modified the item tracking data since it was retrieved from the database.\Start again.;ESM=Otro usuario ha modificado datos seguim. prod. desde que se recuper¢ de la base de datos.\Empiece otra vez.;FRC=Un autre utilisateur a modifi‚ les donn‚es de tra‡abilit‚ depuis qu''elles ont ‚t‚ extraites de la base de donn‚es.\Veuillez recommencer.;ENC=Another user has modified the item tracking data since it was retrieved from the database.\Start again.';
      Text008@1000000052 : TextConst 'ENU=The quantity to create must be an integer.;ESM=La cantidad a crear debe ser un n§ entero.;FRC=La quantit‚ … cr‚er doit un entier.;ENC=The quantity to create must be an integer.';
      Text009@1000000051 : TextConst 'ENU=The quantity to create must be positive.;ESM=La cdad. a crear debe ser positiva.;FRC=La quantit‚ … cr‚er doit ˆtre positive.;ENC=The quantity to create must be positive.';
      Text011@1000000050 : TextConst 'ENU=%1 already exists with %2 %3 and %4 %5.;ESM=Ya existe %1 con %2 %3 y %4 %5.;FRC=La %1 existe d‚j… pour le %2 %3 et le %4 %5.;ENC=%1 already exists with %2 %3 and %4 %5.';
      Text012@1000000049 : TextConst 'ENU=%1 already exists with %2 %3.;ESM=Ya existe %1 con %2 %3.;FRC=La %1 existe d‚j… pour le %2 %3.;ENC=%1 already exists with %2 %3.';
      Text013@1000000048 : TextConst 'ENU=The string %1 contains no number and cannot be incremented.;ESM=La cadena %1 no contiene un n£mero y no puede ser incrementada.;FRC=La chaŒne de caractŠres %1 ne contient pas de num‚ro et ne peut ˆtre incr‚ment‚e.;ENC=The string %1 contains no number and cannot be incremented.';
      Text014@1000000047 : TextConst 'ENU=The total item tracking quantity %1 exceeds the %2 quantity %3.\The changes cannot be saved to the database.;ESM=La cdad. seguim. prod. total %1 excede el %2 cantidad %3.\No se pueden guardar los cambios en la base de datos.;FRC=La quantit‚ tra‡abilit‚ totale %1 d‚passe la quantit‚ %2 %3.\Les modifications ne peuvent ˆtre enregistr‚es dans la base de donn‚es.;ENC=The total item tracking quantity %1 exceeds the %2 quantity %3.\The changes cannot be saved to the database.';
      Text015@1000000046 : TextConst 'ENU=Do you want to synchronize item tracking on the line with item tracking on the related drop shipment %1?;ESM=¨Quiere sincronizar el seguim. de prod. en la l¡nea con el seguim. de prod. del env¡o directo relacionado %1?;FRC=Voulez-vous synchroniser le suivi d''article sur la ligne avec suivi d''article de la livraison annul‚e %1 correspondante?;ENC=Do you want to synchronize item tracking on the line with item tracking on the related drop shipment %1?';
      Text016@1000000045 : TextConst 'ENU=purchase order line;ESM=l¡nea pedido compra;FRC=ligne de bon de commande;ENC=purchase order line';
      Text017@1000000044 : TextConst 'ENU=sales order line;ESM=l¡n. pedido venta;FRC=ligne de document de vente;ENC=sales order line';
      Text018@1000000043 : TextConst 'ENU=Saving item tracking line changes;ESM=Guardando cambios de l¡nea de seguim. prod.;FRC=Enregistrement des modifications … la ligne de suivi d''article;ENC=Saving item tracking line changes';
      Text019@1000000042 : TextConst 'ENU=There are availability warnings on one or more lines.\Close the form anyway?;ESM=Existen avisos de disponibilidad en una o m s l¡neas.\¨Desea cerrar el formulario de todas maneras?;FRC=Une ou plusieurs lignes comportent des avertissements sur la disponibilit‚.\Fermer le formulaire quand mˆme?;ENC=There are availability warnings on one or more lines.\Close the form anyway?';
      DeleteIsBlocked@1000000020 : Boolean;

    PROCEDURE SetFormRunMode@19(Mode@1000 : ',Reclass,Combined Ship/Rcpt,Drop Shipment');
    BEGIN
      FormRunMode := Mode;
    END;

    PROCEDURE SetSource@1(TrackingSpecification@1000 : Record 336;AvailabilityDate@1002 : Date);
    VAR
      ReservEntry@1001 : Record 337;
      TempTrackingSpecification@1005 : TEMPORARY Record 336;
      TempTrackingSpecification2@1006 : TEMPORARY Record 336;
      CreateReservEntry@1004 : Codeunit 99000830;
      Controls@1003 : 'Handle,Invoice,Quantity,Reclass,LotSN';
    BEGIN
      GetItem(TrackingSpecification."Item No.");
      ForBinCode := TrackingSpecification."Bin Code";
      TempTrackingSpecification.DELETEALL;
      TempItemTrackLineInsert.DELETEALL;
      TempItemTrackLineModify.DELETEALL;
      TempItemTrackLineDelete.DELETEALL;

      TempReservEntry.DELETEALL;
      LastEntryNo := 0;

      IF ItemTrackingMgt.IsOrderNetworkEntity(TrackingSpecification."Source Type",
        TrackingSpecification."Source Subtype") AND NOT (FormRunMode = FormRunMode::"Drop Shipment")
      THEN
        CurrentEntryStatus := CurrentEntryStatus::Surplus
      ELSE
        CurrentEntryStatus := CurrentEntryStatus::Prospect;


      IF ItemTrackingMgt.ItemTrkgIsManagedByWhse(
        TrackingSpecification."Source Type",
        TrackingSpecification."Source Subtype",
        TrackingSpecification."Source ID",
        TrackingSpecification."Source Prod. Order Line",
        TrackingSpecification."Source Ref. No.",
        TrackingSpecification."Location Code",
        TrackingSpecification."Item No.")
      THEN BEGIN
        DeleteIsBlocked := TRUE;
      END;



      ReservEntry."Source Type" := TrackingSpecification."Source Type";
      ReservEntry."Source Subtype" := TrackingSpecification."Source Subtype";
      CurrentSignFactor := CreateReservEntry.SignFactor(ReservEntry);
      CurrentSourceType := ReservEntry."Source Type";

      IF CurrentSignFactor < 0 THEN BEGIN
        ExpectedReceiptDate := 0D;
        ShipmentDate := AvailabilityDate;
      END ELSE BEGIN
        ExpectedReceiptDate := AvailabilityDate;
        ShipmentDate := 0D;
      END;

      SourceQuantityArray[1] := TrackingSpecification."Quantity (Base)";
      SourceQuantityArray[2] := TrackingSpecification."Qty. to Handle (Base)";
      SourceQuantityArray[3] := TrackingSpecification."Qty. to Invoice (Base)";
      SourceQuantityArray[4] := TrackingSpecification."Quantity Handled (Base)";
      SourceQuantityArray[5] := TrackingSpecification."Quantity Invoiced (Base)";
      QtyPerUOM := TrackingSpecification."Qty. per Unit of Measure";

      ReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Reservation Status");

      ReservEntry.SETRANGE("Source ID",TrackingSpecification."Source ID");
      ReservEntry.SETRANGE("Source Ref. No.",TrackingSpecification."Source Ref. No.");
      ReservEntry.SETRANGE("Source Type",TrackingSpecification."Source Type");
      ReservEntry.SETRANGE("Source Subtype",TrackingSpecification."Source Subtype");
      ReservEntry.SETRANGE("Source Batch Name",TrackingSpecification."Source Batch Name");
      ReservEntry.SETRANGE("Source Prod. Order Line",TrackingSpecification."Source Prod. Order Line");

      // Transfer Receipt gets special treatment:
      IF (TrackingSpecification."Source Type" = DATABASE::"Transfer Line") AND
         (FormRunMode <> FormRunMode::Transfer) AND
         (TrackingSpecification."Source Subtype" = 1) THEN BEGIN
        ReservEntry.SETRANGE("Source Subtype",0);
        AddReservEntriesToTempRecSet(ReservEntry,TempTrackingSpecification2,TRUE,8421504);
        ReservEntry.SETRANGE("Source Subtype",1);
        ReservEntry.SETRANGE("Source Prod. Order Line",TrackingSpecification."Source Ref. No.");
        ReservEntry.SETRANGE("Source Ref. No.");
        DeleteIsBlocked := TRUE;
      END;

      AddReservEntriesToTempRecSet(ReservEntry,TempTrackingSpecification,FALSE,0);

      TempReservEntry.COPYFILTERS(ReservEntry);

      TrackingSpecification.SETCURRENTKEY(
        "Source ID","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Source Ref. No.");

      TrackingSpecification.SETRANGE("Source ID",TrackingSpecification."Source ID");
      TrackingSpecification.SETRANGE("Source Type",TrackingSpecification."Source Type");
      TrackingSpecification.SETRANGE("Source Subtype",TrackingSpecification."Source Subtype");
      TrackingSpecification.SETRANGE("Source Batch Name",TrackingSpecification."Source Batch Name");
      TrackingSpecification.SETRANGE("Source Prod. Order Line",TrackingSpecification."Source Prod. Order Line");
      TrackingSpecification.SETRANGE("Source Ref. No.",TrackingSpecification."Source Ref. No.");

      IF TrackingSpecification.FINDSET THEN
        REPEAT
          TempTrackingSpecification := TrackingSpecification;
          TempTrackingSpecification.INSERT;
        UNTIL TrackingSpecification.NEXT = 0;

      // Data regarding posted quantities on transfers is collected from Item Ledger Entries:
      IF TrackingSpecification."Source Type" = DATABASE::"Transfer Line" THEN
        CollectPostedTransferEntries(TrackingSpecification,TempTrackingSpecification);

      // Data regarding posted output quantities on prod.orders is collected from Item Ledger Entries:
      IF TrackingSpecification."Source Type" = DATABASE::"Prod. Order Line" THEN
        IF TrackingSpecification."Source Subtype" = 3 THEN
          CollectPostedOutputEntries(TrackingSpecification,TempTrackingSpecification);

      // If run for Drop Shipment a RowID is prepared for synchronisation:
      IF FormRunMode = FormRunMode::"Drop Shipment" THEN
        CurrentSourceRowID := ItemTrackingMgt.ComposeRowID(TrackingSpecification."Source Type",
          TrackingSpecification."Source Subtype",TrackingSpecification."Source ID",
          TrackingSpecification."Source Batch Name",TrackingSpecification."Source Prod. Order Line",
          TrackingSpecification."Source Ref. No.");

      // Synchronization of outbound transfer order:
      IF (TrackingSpecification."Source Type" = DATABASE::"Transfer Line") AND
         (TrackingSpecification."Source Subtype" = 0) THEN BEGIN
        BlockCommit := TRUE;
        CurrentSourceRowID := ItemTrackingMgt.ComposeRowID(TrackingSpecification."Source Type",
          TrackingSpecification."Source Subtype",TrackingSpecification."Source ID",
          TrackingSpecification."Source Batch Name",TrackingSpecification."Source Prod. Order Line",
          TrackingSpecification."Source Ref. No.");
        SecondSourceRowID := ItemTrackingMgt.ComposeRowID(TrackingSpecification."Source Type",
          1,TrackingSpecification."Source ID",
          TrackingSpecification."Source Batch Name",TrackingSpecification."Source Prod. Order Line",
          TrackingSpecification."Source Ref. No.");
        FormRunMode := FormRunMode::Transfer;
      END;

      AddToGlobalRecordSet(TempTrackingSpecification);
      AddToGlobalRecordSet(TempTrackingSpecification2);
      CalculateSums;

      ItemTrackingDataCollection.SetCurrentBinAndItemTrkgCode(ForBinCode,ItemTrackingCode);
      ItemTrackingDataCollection.RetrieveLookupData(tRec,FALSE);
    END;

    PROCEDURE SetSecondSourceQuantity@1026(VAR SecondSourceQuantityArray@1000 : ARRAY [3] OF Decimal);
    VAR
      Controls@1001 : 'Handle,Invoice';
    BEGIN
      CASE SecondSourceQuantityArray[1] OF
        DATABASE::"Warehouse Receipt Line",DATABASE::"Warehouse Shipment Line" :
          BEGIN
            SourceQuantityArray[2] := SecondSourceQuantityArray[2]; // "Qty. to Handle (Base)"
            SourceQuantityArray[3] := SecondSourceQuantityArray[3]; // "Qty. to Invoice (Base)"
          END;
        ELSE
          EXIT;
      END;
      CalculateSums;
    END;

    PROCEDURE SetSecondSourceRowID@32(RowID@1000 : Text[100]);
    BEGIN
      SecondSourceRowID := RowID;
    END;

    LOCAL PROCEDURE AddReservEntriesToTempRecSet@15(VAR ReservEntry@1000 : Record 337;VAR TempTrackingSpecification@1001 : TEMPORARY Record 336;SwapSign@1002 : Boolean;Color@1004 : Integer);
    BEGIN
      IF ReservEntry.FINDSET THEN
        REPEAT
          IF Color = 0 THEN BEGIN
            TempReservEntry := ReservEntry;
            TempReservEntry.INSERT;
          END;
          IF (ReservEntry."Lot No." <> '') OR (ReservEntry."Serial No." <> '') THEN BEGIN
            TempTrackingSpecification.TRANSFERFIELDS(ReservEntry);
            // Ensure uniqueness of Entry No. by making it negative:
            TempTrackingSpecification."Entry No." *= -1;
            IF SwapSign THEN
              TempTrackingSpecification."Quantity (Base)" *= -1;
            IF Color <> 0 THEN BEGIN
              TempTrackingSpecification."Quantity Handled (Base)" :=
                TempTrackingSpecification."Quantity (Base)";
              TempTrackingSpecification."Quantity Invoiced (Base)" :=
                TempTrackingSpecification."Quantity (Base)";
              TempTrackingSpecification."Qty. to Handle (Base)" := 0;
              TempTrackingSpecification."Qty. to Invoice (Base)" := 0;
            END;
            TempTrackingSpecification."Buffer Status" := Color;
            TempTrackingSpecification.INSERT;
          END;
        UNTIL ReservEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE AddToGlobalRecordSet@17(VAR TempTrackingSpecification@1000 : TEMPORARY Record 336);
    VAR
      ExpDate@1001 : Date;
      EntriesExist@1002 : Boolean;
    BEGIN
      TempTrackingSpecification.SETCURRENTKEY("Lot No.","Serial No.");
      IF TempTrackingSpecification.FIND('-') THEN
        REPEAT
          TempTrackingSpecification.SETRANGE("Lot No.",TempTrackingSpecification."Lot No.");
          TempTrackingSpecification.SETRANGE("Serial No.",TempTrackingSpecification."Serial No.");
          TempTrackingSpecification.CALCSUMS("Quantity (Base)","Qty. to Handle (Base)",
            "Qty. to Invoice (Base)","Quantity Handled (Base)","Quantity Invoiced (Base)");
          tRec := TempTrackingSpecification;
          tRec."Quantity (Base)" *= CurrentSignFactor;
          tRec."Qty. to Handle (Base)" *= CurrentSignFactor;
          tRec."Qty. to Invoice (Base)" *= CurrentSignFactor;
          tRec."Quantity Handled (Base)" *= CurrentSignFactor;
          tRec."Quantity Invoiced (Base)" *= CurrentSignFactor;
          tRec."Qty. to Handle" :=
            tRec.CalcQty(tRec."Qty. to Handle (Base)");
          tRec."Qty. to Invoice" :=
            tRec.CalcQty(tRec."Qty. to Invoice (Base)");
          tRec."Entry No." := NextEntryNo;

          ExpDate := ItemTrackingMgt.ExistingExpirationDate(
            tRec."Item No.",tRec."Variant Code",
            tRec."Lot No.",tRec."Serial No.",FALSE,EntriesExist);

          IF ExpDate <> 0D THEN BEGIN
            tRec."Expiration Date" := ExpDate;
            tRec."Buffer Status2" := tRec."Buffer Status2"::"ExpDate blocked";
          END;

          tRec.INSERT;
          IF tRec."Buffer Status" = 0 THEN BEGIN
            xTempItemTrackingLine := tRec;
            xTempItemTrackingLine.INSERT;
          END;
          TempTrackingSpecification.FIND('+');
          TempTrackingSpecification.SETRANGE("Lot No.");
          TempTrackingSpecification.SETRANGE("Serial No.");
        UNTIL TempTrackingSpecification.NEXT = 0;
    END;

    LOCAL PROCEDURE GetItem@3(ItemNo@1000 : Code[20]);
    BEGIN
      IF Item."No." <> ItemNo THEN BEGIN
        Item.GET(ItemNo);
        Item.TESTFIELD("Item Tracking Code");
        IF ItemTrackingCode.Code <> Item."Item Tracking Code" THEN
          ItemTrackingCode.GET(Item."Item Tracking Code");
      END;
    END;

    LOCAL PROCEDURE initLine@12(TrackingSpecification@1000 : Record 336);
    BEGIN

      tRec.VALIDATE("Source ID",TrackingSpecification."Source ID");
      tRec.VALIDATE("Source Type",TrackingSpecification."Source Type");
      tRec.VALIDATE("Source Subtype",TrackingSpecification."Source Subtype");
      tRec.VALIDATE("Source Batch Name",TrackingSpecification."Source Batch Name");
      IF (TrackingSpecification."Source Type" = DATABASE::"Transfer Line") AND
         (TrackingSpecification."Source Subtype" = 1) THEN BEGIN
        tRec.VALIDATE("Source Prod. Order Line",TrackingSpecification."Source Ref. No.");
        tRec.VALIDATE("Source Ref. No.");
      END ELSE BEGIN
        tRec.VALIDATE("Source Prod. Order Line",TrackingSpecification."Source Prod. Order Line");
        tRec.VALIDATE("Source Ref. No.",TrackingSpecification."Source Ref. No.");
      END;
      tRec.VALIDATE("Item No.",TrackingSpecification."Item No.");
      tRec.VALIDATE("Location Code",TrackingSpecification."Location Code");
      tRec.VALIDATE("Variant Code",TrackingSpecification."Variant Code");
    END;

    LOCAL PROCEDURE CheckLine@4(TrackingLine@1000 : Record 336) : Boolean;
    BEGIN
      IF TrackingLine."Quantity (Base)" * SourceQuantityArray[1] < 0 THEN
        IF SourceQuantityArray[1] < 0 THEN
          ERROR(Text002,Text003)
        ELSE
          ERROR(Text002,Text004);
    END;

    LOCAL PROCEDURE CalculateSums@2();
    VAR
      xTrackingSpec@1000 : Record 336;
    BEGIN
      xTrackingSpec.COPY(tRec);
      tRec.RESET;
      tRec.CALCSUMS("Quantity (Base)",
        "Qty. to Handle (Base)",
        "Qty. to Invoice (Base)");
      TotalItemTrackingLine := tRec;
      tRec.COPY(xTrackingSpec);

      UpdateUndefinedQty;
    END;

    LOCAL PROCEDURE UpdateUndefinedQty@5() QtyIsValid@1000 : Boolean;
    BEGIN
      UndefinedQtyArray[1] := SourceQuantityArray[1] - TotalItemTrackingLine."Quantity (Base)";
      UndefinedQtyArray[2] := SourceQuantityArray[2] - TotalItemTrackingLine."Qty. to Handle (Base)";
      UndefinedQtyArray[3] := SourceQuantityArray[3] - TotalItemTrackingLine."Qty. to Invoice (Base)";

      IF ABS(SourceQuantityArray[1]) < ABS(TotalItemTrackingLine."Quantity (Base)") THEN BEGIN
        QtyIsValid := FALSE;
      END ELSE BEGIN
        QtyIsValid := TRUE;
      END;
    END;

    LOCAL PROCEDURE TempRecIsValid@6() OK@1001 : Boolean;
    VAR
      ReservEntry@1000 : Record 337;
      RecordCount@1002 : Integer;
      IdenticalArray@1003 : ARRAY [2] OF Boolean;
    BEGIN
      OK := FALSE;
      TempReservEntry.SETCURRENTKEY("Entry No.",Positive);
      ReservEntry.SETCURRENTKEY("Entry No.",Positive);
      ReservEntry.COPYFILTERS(TempReservEntry);

      IF ReservEntry.FINDSET THEN
        REPEAT
          IF NOT TempReservEntry.GET(ReservEntry."Entry No.",ReservEntry.Positive) THEN
            EXIT(FALSE);
          IF NOT EntriesAreIdentical(ReservEntry,TempReservEntry,IdenticalArray) THEN
            EXIT(FALSE);
          RecordCount += 1;
        UNTIL ReservEntry.NEXT = 0;

      OK := RecordCount = TempReservEntry.COUNT;
    END;

    LOCAL PROCEDURE EntriesAreIdentical@8(VAR ReservEntry1@1000 : Record 337;VAR ReservEntry2@1002 : Record 337;VAR IdenticalArray@1003 : ARRAY [2] OF Boolean) @1001 : Boolean;
    BEGIN
      IdenticalArray[1] := (
        (ReservEntry1."Entry No." = ReservEntry2."Entry No.") AND
        (ReservEntry1."Item No." = ReservEntry2."Item No.") AND
        (ReservEntry1."Location Code" = ReservEntry2."Location Code") AND
        (ReservEntry1."Quantity (Base)" = ReservEntry2."Quantity (Base)") AND
        (ReservEntry1."Reservation Status" = ReservEntry2."Reservation Status") AND
        (ReservEntry1."Creation Date" = ReservEntry2."Creation Date") AND
        (ReservEntry1."Transferred from Entry No." = ReservEntry2."Transferred from Entry No.") AND
        (ReservEntry1."Source Type" = ReservEntry2."Source Type") AND
        (ReservEntry1."Source Subtype" = ReservEntry2."Source Subtype") AND
        (ReservEntry1."Source ID" = ReservEntry2."Source ID") AND
        (ReservEntry1."Source Batch Name" = ReservEntry2."Source Batch Name") AND
        (ReservEntry1."Source Prod. Order Line" = ReservEntry2."Source Prod. Order Line") AND
        (ReservEntry1."Source Ref. No." = ReservEntry2."Source Ref. No.") AND
        (ReservEntry1."Expected Receipt Date" = ReservEntry2."Expected Receipt Date") AND
        (ReservEntry1."Shipment Date" = ReservEntry2."Shipment Date") AND
        (ReservEntry1."Serial No." = ReservEntry2."Serial No.") AND
        (ReservEntry1."Created By" = ReservEntry2."Created By") AND
        (ReservEntry1."Changed By" = ReservEntry2."Changed By") AND
        (ReservEntry1.Positive = ReservEntry2.Positive) AND
        (ReservEntry1."Qty. per Unit of Measure" = ReservEntry2."Qty. per Unit of Measure") AND
        (ReservEntry1.Quantity = ReservEntry2.Quantity) AND
        (ReservEntry1."Action Message Adjustment" = ReservEntry2."Action Message Adjustment") AND
        (ReservEntry1.Binding = ReservEntry2.Binding) AND
        (ReservEntry1."Suppressed Action Msg." = ReservEntry2."Suppressed Action Msg.") AND
        (ReservEntry1."Planning Flexibility" = ReservEntry2."Planning Flexibility") AND
        (ReservEntry1."Lot No." = ReservEntry2."Lot No.") AND
        (ReservEntry1."Variant Code" = ReservEntry2."Variant Code") AND
        (ReservEntry1."Quantity Invoiced (Base)" = ReservEntry2."Quantity Invoiced (Base)"));

      IdenticalArray[2] := (
        (ReservEntry1.Description = ReservEntry2.Description) AND
        (ReservEntry1."New Serial No." = ReservEntry2."New Serial No.") AND
        (ReservEntry1."New Lot No." = ReservEntry2."New Lot No.") AND
        (ReservEntry1."Expiration Date" = ReservEntry2."Expiration Date") AND
        (ReservEntry1."Warranty Date" = ReservEntry2."Warranty Date") AND
        (ReservEntry1."New Expiration Date" = ReservEntry2."New Expiration Date"));

      EXIT(IdenticalArray[1] AND IdenticalArray[2]);
    END;

    LOCAL PROCEDURE QtyToHandleAndInvoiceChanged@14(VAR ReservEntry1@1000 : Record 337;VAR ReservEntry2@1002 : Record 337) @1001 : Boolean;
    BEGIN
      EXIT(
        (ReservEntry1."Qty. to Handle (Base)" <> ReservEntry2."Qty. to Handle (Base)") OR
        (ReservEntry1."Qty. to Invoice (Base)" <> ReservEntry2."Qty. to Invoice (Base)"));
    END;

    LOCAL PROCEDURE NextEntryNo@9() : Integer;
    BEGIN
      LastEntryNo += 1;
      EXIT(LastEntryNo);
    END;

    LOCAL PROCEDURE WriteToDatabase@10();
    VAR
      ChangeType@1000 : 'Insert,Modify,Delete';
      EntryNo@1001 : Integer;
      NoOfLines@1003 : Integer;
      i@1004 : Integer;
      ModifyLoop@1000000000 : Integer;
      Decrease@1000000001 : Boolean;
    BEGIN

      IF CurrentFormIsOpen THEN BEGIN

        TempReservEntry.LOCKTABLE;
        IF NOT TempRecIsValid THEN
          ERROR(Text007);

        IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::None THEN
          QtyToAddAsBlank := 0
        ELSE
          QtyToAddAsBlank := UndefinedQtyArray[1] * CurrentSignFactor;

        tRec.RESET;
        tRec.DELETEALL;

        NoOfLines := TempItemTrackLineInsert.COUNT + TempItemTrackLineModify.COUNT + TempItemTrackLineDelete.COUNT;

        IF TempItemTrackLineDelete.FIND('-') THEN BEGIN
          REPEAT
            i := i + 1;
            RegisterChange(TempItemTrackLineDelete,TempItemTrackLineDelete,ChangeType::Delete,FALSE);
            IF TempItemTrackLineModify.GET(TempItemTrackLineDelete."Entry No.") THEN
              TempItemTrackLineModify.DELETE;
          UNTIL TempItemTrackLineDelete.NEXT = 0;
          TempItemTrackLineDelete.DELETEALL;
        END;

        FOR ModifyLoop := 1 TO 2 DO BEGIN
          IF TempItemTrackLineModify.FIND('-') THEN BEGIN
            REPEAT
              IF xTempItemTrackingLine.GET(TempItemTrackLineModify."Entry No.") THEN BEGIN
                // Process decreases before increases
                Decrease := (xTempItemTrackingLine."Quantity (Base)" > TempItemTrackLineModify."Quantity (Base)");
                IF ((ModifyLoop = 1) AND Decrease) OR ((ModifyLoop = 2) AND NOT Decrease) THEN BEGIN
                  i := i + 1;
                  IF (xTempItemTrackingLine."Serial No." <> TempItemTrackLineModify."Serial No.") OR
                     (xTempItemTrackingLine."Lot No." <> TempItemTrackLineModify."Lot No.") OR
                     (xTempItemTrackingLine."Appl.-from Item Entry" <> TempItemTrackLineModify."Appl.-from Item Entry")
                  THEN BEGIN
                    RegisterChange(xTempItemTrackingLine,xTempItemTrackingLine,ChangeType::Delete,FALSE);
                    RegisterChange(TempItemTrackLineModify,TempItemTrackLineModify,ChangeType::Insert,FALSE);
                    IF (TempItemTrackLineInsert."Quantity (Base)" <> TempItemTrackLineInsert."Qty. to Handle (Base)") OR
                       (TempItemTrackLineInsert."Quantity (Base)" <> TempItemTrackLineInsert."Qty. to Invoice (Base)")
                    THEN
                      SetQtyToHandleAndInvoice(TempItemTrackLineInsert);
                  END ELSE BEGIN
                    RegisterChange(xTempItemTrackingLine,TempItemTrackLineModify,ChangeType::Modify,FALSE);
                    SetQtyToHandleAndInvoice(TempItemTrackLineModify);
                  END;
                  TempItemTrackLineModify.DELETE;
                END;
              END ELSE BEGIN
                i := i + 1;
                TempItemTrackLineModify.DELETE;
              END;
            UNTIL TempItemTrackLineModify.NEXT = 0;
          END;
        END;

        IF TempItemTrackLineInsert.FIND('-') THEN BEGIN
          REPEAT
            i := i + 1;
            IF TempItemTrackLineModify.GET(TempItemTrackLineInsert."Entry No.") THEN
              TempItemTrackLineInsert.TRANSFERFIELDS(TempItemTrackLineModify);
            IF NOT RegisterChange(TempItemTrackLineInsert,TempItemTrackLineInsert,ChangeType::Insert,FALSE) THEN
              ERROR(Text005);
            IF (TempItemTrackLineInsert."Quantity (Base)" <> TempItemTrackLineInsert."Qty. to Handle (Base)") OR
               (TempItemTrackLineInsert."Quantity (Base)" <> TempItemTrackLineInsert."Qty. to Invoice (Base)")
            THEN
              SetQtyToHandleAndInvoice(TempItemTrackLineInsert);
          UNTIL TempItemTrackLineInsert.NEXT = 0;
          TempItemTrackLineInsert.DELETEALL;
        END;
      END ELSE BEGIN

        TempReservEntry.LOCKTABLE;
        IF NOT TempRecIsValid THEN
          ERROR(Text007);

        IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::None THEN
          QtyToAddAsBlank := 0
        ELSE
          QtyToAddAsBlank := UndefinedQtyArray[1] * CurrentSignFactor;

        tRec.RESET;
        tRec.SETFILTER("Buffer Status",'<>%1',0);
        tRec.DELETEALL;
        tRec.RESET;

        xTempItemTrackingLine.RESET;
        tRec.SETCURRENTKEY("Entry No.");
        xTempItemTrackingLine.SETCURRENTKEY("Entry No.");
        IF xTempItemTrackingLine.FIND('-') THEN
          REPEAT
            tRec.SETRANGE("Lot No.",xTempItemTrackingLine."Lot No.");
            tRec.SETRANGE("Serial No.",xTempItemTrackingLine."Serial No.");
            IF tRec.FIND('-') THEN BEGIN
              IF RegisterChange(xTempItemTrackingLine,tRec,ChangeType::Modify,FALSE) THEN BEGIN
                EntryNo := xTempItemTrackingLine."Entry No.";
                xTempItemTrackingLine := tRec;
                xTempItemTrackingLine."Entry No." := EntryNo;
                xTempItemTrackingLine.MODIFY;
              END;
              SetQtyToHandleAndInvoice(tRec);
              tRec.DELETE;
            END ELSE BEGIN
              RegisterChange(xTempItemTrackingLine,xTempItemTrackingLine,ChangeType::Delete,FALSE);
              xTempItemTrackingLine.DELETE;
            END;
          UNTIL xTempItemTrackingLine.NEXT = 0;

        tRec.RESET;

        IF tRec.FIND('-') THEN
          REPEAT
            IF RegisterChange(tRec,tRec,ChangeType::Insert,FALSE) THEN BEGIN
              xTempItemTrackingLine := tRec;
              xTempItemTrackingLine.INSERT;
            END ELSE
              ERROR(Text005);
            SetQtyToHandleAndInvoice(tRec);
            tRec.DELETE;
          UNTIL tRec.NEXT = 0;

      END;

      UpdateOrderTracking;
      ReestablishReservations; // Late Binding

      IF NOT BlockCommit THEN  BEGIN
        COMMIT;
      END;
    END;

    LOCAL PROCEDURE RegisterChange@11(VAR OldTrackingSpecification@1000 : Record 336;VAR NewTrackingSpecification@1001 : Record 336;ChangeType@1002 : 'Insert,Modify,FullDelete,PartDelete,ModifyAll';ModifySharedFields@1011 : Boolean) OK@1003 : Boolean;
    VAR
      ReservEntry1@1004 : Record 337;
      ReservEntry2@1005 : Record 337;
      CreateReservEntry@1006 : Codeunit 99000830;
      ReservationMgt@1007 : Codeunit 99000845;
      AvailabilityDate@1008 : Date;
      QtyToAdd@1012 : Decimal;
      LostReservQty@1013 : Decimal;
      IdenticalArray@1010 : ARRAY [2] OF Boolean;
    BEGIN
      OK := FALSE;

      {// 2016-::begin
      ReservEngineMgt.SetPick(IsPick);
      }// 2016-::end

      IF CurrentSignFactor < 0 THEN
        NewTrackingSpecification."Expiration Date" := 0D;

      CASE ChangeType OF
        ChangeType::Insert:
          BEGIN
            IF (OldTrackingSpecification."Quantity (Base)" = 0) OR
               ((OldTrackingSpecification."Lot No." = '') AND
                (OldTrackingSpecification."Serial No." = ''))
            THEN
              EXIT(TRUE);
            TempReservEntry.SETRANGE("Serial No.",'');
            TempReservEntry.SETRANGE("Lot No.",'');
            OldTrackingSpecification."Quantity (Base)" :=
              CurrentSignFactor *
              ReservEngineMgt.AddItemTrackingToTempRecSet(
                TempReservEntry,NewTrackingSpecification,
                CurrentSignFactor * OldTrackingSpecification."Quantity (Base)",QtyToAddAsBlank,
                ItemTrackingCode."SN Specific Tracking",ItemTrackingCode."Lot Specific Tracking");
            TempReservEntry.SETRANGE("Serial No.");
            TempReservEntry.SETRANGE("Lot No.");

            // Late Binding
            IF ReservEngineMgt.RetrieveLostReservQty(LostReservQty) THEN BEGIN
              TempItemTrackLineReserv := NewTrackingSpecification;

              TempItemTrackLineReserv."Quantity (Base)" := LostReservQty * CurrentSignFactor;
              TempItemTrackLineReserv.INSERT;
            END;

            IF OldTrackingSpecification."Quantity (Base)" = 0 THEN
              EXIT(TRUE);

            IF (FormRunMode = FormRunMode::Reclass) OR MoveBinContent THEN BEGIN
              CreateReservEntry.SetNewSerialLotNo(
                OldTrackingSpecification."New Serial No.",OldTrackingSpecification."New Lot No.");
              CreateReservEntry.SetNewExpirationDate(OldTrackingSpecification."New Expiration Date");
            END;
            CreateReservEntry.SetDates(
              NewTrackingSpecification."Warranty Date",NewTrackingSpecification."Expiration Date");
            CreateReservEntry.SetApplyFromEntryNo(
              NewTrackingSpecification."Appl.-from Item Entry");
            {{// 2009::begin
            CreateReservEntry.CreateReservEntryFor(
              OldTrackingSpecification."Source Type",              // ForType
              OldTrackingSpecification."Source Subtype",           // ForSubType
              OldTrackingSpecification."Source ID",                // ForID
              OldTrackingSpecification."Source Batch Name",        // ForBatchName
              OldTrackingSpecification."Source Prod. Order Line",  // ForProdOrderLine
              OldTrackingSpecification."Source Ref. No.",          // ForRefNo
              OldTrackingSpecification."Qty. per Unit of Measure", // ForQtyPerUOM
              // 0,                                                   // Quantity
              OldTrackingSpecification."Quantity (Base)",          // QuantityBase
              OldTrackingSpecification."Serial No.",               // ForSerialNo
              OldTrackingSpecification."Lot No.");                 // ForLotNo
            }}// 2009::end
            // 2013::begin
            CreateReservEntry.CreateReservEntryFor(
              OldTrackingSpecification."Source Type",              // ForType
              OldTrackingSpecification."Source Subtype",           // ForSubType
              OldTrackingSpecification."Source ID",                // ForID
              OldTrackingSpecification."Source Batch Name",        // ForBatchName
              OldTrackingSpecification."Source Prod. Order Line",  // ForProdOrderLine
              OldTrackingSpecification."Source Ref. No.",          // ForRefNo
              OldTrackingSpecification."Qty. per Unit of Measure", // ForQtyPerUOM
              0,                                                   // Quantity
              OldTrackingSpecification."Quantity (Base)",          // QuantityBase
              OldTrackingSpecification."Serial No.",               // ForSerialNo
              OldTrackingSpecification."Lot No.");                 // ForLotNo
            // 2013::end

            CreateReservEntry.CreateEntry(OldTrackingSpecification."Item No.",
              OldTrackingSpecification."Variant Code",
              OldTrackingSpecification."Location Code",
              OldTrackingSpecification.Description,
              ExpectedReceiptDate,
              ShipmentDate,0,CurrentEntryStatus);
            CreateReservEntry.GetLastEntry(ReservEntry1);
            IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::"Tracking & Action Msg." THEN
              ReservEngineMgt.UpdateActionMessages(ReservEntry1);

            IF ModifySharedFields THEN BEGIN
              {// 2017-::begin
              ReservationMgt.SetPointerFilter(ReservEntry1);
              }// 2017-::end
              ReservEntry1.SETRANGE("Lot No.",ReservEntry1."Lot No.");
              ReservEntry1.SETRANGE("Serial No.",ReservEntry1."Serial No.");
              ReservEntry1.SETFILTER("Entry No.",'<>%1',ReservEntry1."Entry No.");
              ModifyFieldsWithinFilter(ReservEntry1,NewTrackingSpecification);
            END;

            IF CurrentSignFactor < 0 THEN
              AvailabilityDate := ShipmentDate
            ELSE
              AvailabilityDate := ExpectedReceiptDate;
            OK := TRUE;
          END;
        ChangeType::Modify:
          BEGIN
            ReservEntry1.TRANSFERFIELDS(OldTrackingSpecification);
            ReservEntry2.TRANSFERFIELDS(NewTrackingSpecification);

            ReservEntry1."Entry No." := ReservEntry2."Entry No."; // If only entry no. has changed it should not trigger
            IF EntriesAreIdentical(ReservEntry1,ReservEntry2,IdenticalArray) THEN
              EXIT(QtyToHandleAndInvoiceChanged(ReservEntry1,ReservEntry2));

            IF ABS(OldTrackingSpecification."Quantity (Base)") < ABS(NewTrackingSpecification."Quantity (Base)") THEN
              BEGIN
                // Item Tracking is added to any blank reservation entries:
                TempReservEntry.SETRANGE("Serial No.",'');
                TempReservEntry.SETRANGE("Lot No.",'');
                QtyToAdd :=
                  CurrentSignFactor *
                  ReservEngineMgt.AddItemTrackingToTempRecSet(
                    TempReservEntry,NewTrackingSpecification,
                    CurrentSignFactor * (NewTrackingSpecification."Quantity (Base)" -
                    OldTrackingSpecification."Quantity (Base)"),QtyToAddAsBlank,
                    ItemTrackingCode."SN Specific Tracking",ItemTrackingCode."Lot Specific Tracking");
                TempReservEntry.SETRANGE("Serial No.");
                TempReservEntry.SETRANGE("Lot No.");

                // Late Binding
                IF ReservEngineMgt.RetrieveLostReservQty(LostReservQty) THEN BEGIN
                  TempItemTrackLineReserv := NewTrackingSpecification;
                  TempItemTrackLineReserv."Quantity (Base)" := LostReservQty * CurrentSignFactor;
                  TempItemTrackLineReserv.INSERT;
                END;

                OldTrackingSpecification."Quantity (Base)" := QtyToAdd;
                OldTrackingSpecification."Warranty Date" := NewTrackingSpecification."Warranty Date";
                OldTrackingSpecification."Expiration Date" := NewTrackingSpecification."Expiration Date";
                OldTrackingSpecification.Description := NewTrackingSpecification.Description;
                RegisterChange(OldTrackingSpecification,OldTrackingSpecification,
                  ChangeType::Insert,NOT IdenticalArray[2]);
              END ELSE BEGIN
                TempReservEntry.SETRANGE("Serial No.",OldTrackingSpecification."Serial No.");
                TempReservEntry.SETRANGE("Lot No.",OldTrackingSpecification."Lot No.");
                OldTrackingSpecification."Serial No." := '';
                OldTrackingSpecification."Lot No." := '';
                OldTrackingSpecification."Warranty Date" := 0D;
                OldTrackingSpecification."Expiration Date" := 0D;
                QtyToAdd :=
                  CurrentSignFactor *
                  ReservEngineMgt.AddItemTrackingToTempRecSet(
                    TempReservEntry,OldTrackingSpecification,
                    CurrentSignFactor * (OldTrackingSpecification."Quantity (Base)" -
                    NewTrackingSpecification."Quantity (Base)"),QtyToAddAsBlank,
                    ItemTrackingCode."SN Specific Tracking",ItemTrackingCode."Lot Specific Tracking");
                TempReservEntry.SETRANGE("Serial No.");
                TempReservEntry.SETRANGE("Lot No.");
                RegisterChange(NewTrackingSpecification,NewTrackingSpecification,
                  ChangeType::PartDelete,NOT IdenticalArray[2]);
              END;
            OK := TRUE;
          END;
        ChangeType::FullDelete,ChangeType::PartDelete:
          BEGIN
            ReservationMgt.SetItemTrackingHandling(1); // Allow deletion of Item Tracking
            ReservEntry1.TRANSFERFIELDS(OldTrackingSpecification);
            {// 2017-::begin
            ReservationMgt.SetPointerFilter(ReservEntry1);
            }// 2017-::end
            ReservEntry1.SETRANGE("Lot No.",ReservEntry1."Lot No.");
            ReservEntry1.SETRANGE("Serial No.",ReservEntry1."Serial No.");
            IF ChangeType = ChangeType::FullDelete THEN BEGIN
              TempReservEntry.SETRANGE("Serial No.",OldTrackingSpecification."Serial No.");
              TempReservEntry.SETRANGE("Lot No.",OldTrackingSpecification."Lot No.");
              OldTrackingSpecification."Serial No." := '';
              OldTrackingSpecification."Lot No." := '';
              OldTrackingSpecification."Warranty Date" := 0D;
              OldTrackingSpecification."Expiration Date" := 0D;
              QtyToAdd :=
                CurrentSignFactor *
                ReservEngineMgt.AddItemTrackingToTempRecSet(
                  TempReservEntry,OldTrackingSpecification,
                  CurrentSignFactor * OldTrackingSpecification."Quantity (Base)",QtyToAddAsBlank,
                  ItemTrackingCode."SN Specific Tracking",ItemTrackingCode."Lot Specific Tracking");
              TempReservEntry.SETRANGE("Serial No.");
              TempReservEntry.SETRANGE("Lot No.");
              ReservationMgt.DeleteReservEntries2(TRUE,0,ReservEntry1)
            END ELSE BEGIN
              ReservationMgt.DeleteReservEntries2(FALSE,ReservEntry1."Quantity (Base)" -
                OldTrackingSpecification."Quantity Handled (Base)",ReservEntry1);
              IF ModifySharedFields THEN BEGIN
                ReservEntry1.SETRANGE("Reservation Status");
                ModifyFieldsWithinFilter(ReservEntry1,OldTrackingSpecification);
              END;
            END;
            OK := TRUE;
          END;
      END;
      SetQtyToHandleAndInvoice(NewTrackingSpecification);
    END;

    LOCAL PROCEDURE UpdateOrderTracking@26();
    VAR
      TempReservEntry@1000 : TEMPORARY Record 337;
    BEGIN
      IF NOT ReservEngineMgt.CollectAffectedSurplusEntries(TempReservEntry) THEN
        EXIT;
      IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::None THEN
        EXIT;
      ReservEngineMgt.UpdateOrderTracking(TempReservEntry);
    END;

    PROCEDURE ModifyFieldsWithinFilter@25(VAR ReservEntry1@1000 : Record 337;VAR TrackingSpecification@1001 : Record 336);
    BEGIN
      // Used to ensure that field values that are common to a SN/Lot are copied to all entries.
      IF ReservEntry1.FIND('-') THEN
        REPEAT
          ReservEntry1.Description := TrackingSpecification.Description;
          ReservEntry1."Warranty Date" := TrackingSpecification."Warranty Date";
          ReservEntry1."Expiration Date" := TrackingSpecification."Expiration Date";
          ReservEntry1."New Serial No." := TrackingSpecification."New Serial No.";
          ReservEntry1."New Lot No." := TrackingSpecification."New Lot No.";
          ReservEntry1."New Expiration Date":= TrackingSpecification."New Expiration Date";
          ReservEntry1.MODIFY;
        UNTIL ReservEntry1.NEXT = 0;
    END;

    LOCAL PROCEDURE SetQtyToHandleAndInvoice@7(TrackingSpecification@1000 : Record 336) OK@1008 : Boolean;
    VAR
      ReservEntry1@1003 : Record 337;
      ReservationMgt@1004 : Codeunit 99000845;
      TotalQtyToHandle@1001 : Decimal;
      TotalQtyToInvoice@1002 : Decimal;
      QtyAlreadyHandledToInvoice@1005 : Decimal;
      QtyToHandleThisLine@1007 : Decimal;
      QtyToInvoiceThisLine@1006 : Decimal;
    BEGIN
      IF IsCorrection THEN
        EXIT;
      OK := FALSE;

      TotalQtyToHandle := TrackingSpecification."Qty. to Handle (Base)" * CurrentSignFactor;
      TotalQtyToInvoice := TrackingSpecification."Qty. to Invoice (Base)" * CurrentSignFactor;

      IF ABS(TotalQtyToHandle) > ABS(TotalQtyToInvoice) THEN
        QtyAlreadyHandledToInvoice := 0
      ELSE
        QtyAlreadyHandledToInvoice := TotalQtyToInvoice - TotalQtyToHandle;

      ReservEntry1.TRANSFERFIELDS(TrackingSpecification);
      {// 2017-::begin
      ReservationMgt.SetPointerFilter(ReservEntry1);
      }// 2017-::end
      ReservEntry1.SETRANGE("Lot No.",ReservEntry1."Lot No.");
      ReservEntry1.SETRANGE("Serial No.",ReservEntry1."Serial No.");
      IF (TrackingSpecification."Lot No." <> '') OR
         (TrackingSpecification."Serial No." <> '')
      THEN BEGIN
        ItemTrackingMgt.SetPointerFilter(TrackingSpecification);
        TrackingSpecification.SETRANGE("Lot No.",TrackingSpecification."Lot No.");
        TrackingSpecification.SETRANGE("Serial No.",TrackingSpecification."Serial No.");

        IF TrackingSpecification.FIND('-') THEN
          REPEAT
            IF NOT TrackingSpecification.Correction THEN BEGIN
              QtyToInvoiceThisLine :=
                TrackingSpecification."Quantity Handled (Base)" - TrackingSpecification."Quantity Invoiced (Base)";
              IF ABS(QtyToInvoiceThisLine) > ABS(TotalQtyToInvoice) THEN
                QtyToInvoiceThisLine := TotalQtyToInvoice;

              IF ABS(QtyToInvoiceThisLine) > ABS(QtyAlreadyHandledToInvoice) THEN BEGIN
                QtyToInvoiceThisLine := QtyAlreadyHandledToInvoice;
                QtyAlreadyHandledToInvoice := 0;
              END ELSE
                QtyAlreadyHandledToInvoice -= QtyToInvoiceThisLine;

              IF TrackingSpecification."Qty. to Invoice (Base)" <> QtyToInvoiceThisLine THEN BEGIN
                TrackingSpecification."Qty. to Invoice (Base)" := QtyToInvoiceThisLine;
                TrackingSpecification.MODIFY;
              END;

              TotalQtyToInvoice -= QtyToInvoiceThisLine;
            END;
          UNTIL (TrackingSpecification.NEXT = 0);

        OK := ((TotalQtyToHandle = 0) AND (TotalQtyToInvoice = 0));
      END;

      IF TrackingSpecification."Lot No." <> '' THEN BEGIN
        FOR ReservEntry1."Reservation Status" := ReservEntry1."Reservation Status"::Reservation TO
          ReservEntry1."Reservation Status"::Prospect
        DO BEGIN
          ReservEntry1.SETRANGE("Reservation Status",ReservEntry1."Reservation Status");
          IF ReservEntry1.FIND('-') THEN
            REPEAT
              QtyToHandleThisLine := ReservEntry1."Quantity (Base)";
              QtyToInvoiceThisLine := QtyToHandleThisLine;

              IF ABS(QtyToHandleThisLine) > ABS(TotalQtyToHandle) THEN
                QtyToHandleThisLine := TotalQtyToHandle;
              IF ABS(QtyToInvoiceThisLine) > ABS(TotalQtyToInvoice) THEN
                QtyToInvoiceThisLine := TotalQtyToInvoice;

              IF (ReservEntry1."Qty. to Handle (Base)" <> QtyToHandleThisLine) OR
                 (ReservEntry1."Qty. to Invoice (Base)" <> QtyToInvoiceThisLine) AND NOT ReservEntry1.Correction
              THEN BEGIN
                ReservEntry1."Qty. to Handle (Base)" := QtyToHandleThisLine;
                ReservEntry1."Qty. to Invoice (Base)" := QtyToInvoiceThisLine;
                ReservEntry1.MODIFY;
              END;

              TotalQtyToHandle -= QtyToHandleThisLine;
              TotalQtyToInvoice -= QtyToInvoiceThisLine;

            UNTIL (ReservEntry1.NEXT = 0);
        END;

        OK := ((TotalQtyToHandle = 0) AND (TotalQtyToInvoice = 0));
      END ELSE
        IF ReservEntry1.FIND('-') THEN
          IF (ReservEntry1."Qty. to Handle (Base)" <> TotalQtyToHandle) OR
             (ReservEntry1."Qty. to Invoice (Base)" <> TotalQtyToInvoice) AND NOT ReservEntry1.Correction
          THEN BEGIN
            ReservEntry1."Qty. to Handle (Base)" := TotalQtyToHandle;
            ReservEntry1."Qty. to Invoice (Base)" := TotalQtyToInvoice;
            ReservEntry1.MODIFY;
          END;
    END;

    LOCAL PROCEDURE CollectPostedTransferEntries@16(TrackingSpecification@1001 : Record 336;VAR TempTrackingSpecification@1000 : TEMPORARY Record 336);
    VAR
      ItemEntryRelation@1002 : Record 6507;
      ItemLedgerEntry@1003 : Record 32;
    BEGIN
      // Used for collecting information about posted Transfer Shipments from the created Item Ledger Entries.
      IF TrackingSpecification."Source Type" <> DATABASE::"Transfer Line" THEN
        EXIT;

      ItemEntryRelation.SETCURRENTKEY("Order No.","Order Line No.");
      ItemEntryRelation.SETRANGE("Order No.",TrackingSpecification."Source ID");
      ItemEntryRelation.SETRANGE("Order Line No.",TrackingSpecification."Source Ref. No.");

      CASE TrackingSpecification."Source Subtype" OF
        0: // Outbound
          BEGIN
            ItemEntryRelation.SETRANGE("Source Type",DATABASE::"Transfer Shipment Line");
          END;
        1: // Inbound
          BEGIN
            ItemEntryRelation.SETRANGE("Source Type",DATABASE::"Transfer Receipt Line");
          END;
      END;

      IF ItemEntryRelation.FIND('-') THEN
        REPEAT
          ItemLedgerEntry.GET(ItemEntryRelation."Item Entry No.");
          TempTrackingSpecification := TrackingSpecification;
          TempTrackingSpecification."Entry No." := ItemLedgerEntry."Entry No.";
          TempTrackingSpecification."Item No." := ItemLedgerEntry."Item No.";
          TempTrackingSpecification."Serial No." := ItemLedgerEntry."Serial No.";
          TempTrackingSpecification."Lot No." := ItemLedgerEntry."Lot No.";
          TempTrackingSpecification."Quantity (Base)" := ItemLedgerEntry.Quantity;
          TempTrackingSpecification."Quantity Handled (Base)" := ItemLedgerEntry.Quantity;
          TempTrackingSpecification."Quantity Invoiced (Base)" := ItemLedgerEntry.Quantity;
          TempTrackingSpecification."Qty. per Unit of Measure" := ItemLedgerEntry."Qty. per Unit of Measure";
          TempTrackingSpecification.InitQtyToShip;
          TempTrackingSpecification.INSERT;
        UNTIL ItemEntryRelation.NEXT = 0;
    END;

    LOCAL PROCEDURE CollectPostedOutputEntries@30(TrackingSpecification@1001 : Record 336;VAR TempTrackingSpecification@1000 : TEMPORARY Record 336);
    VAR
      ItemLedgerEntry@1003 : Record 32;
      ProdOrderRoutingLine@1004 : Record 5409;
      BackwardFlushing@1002 : Boolean;
    BEGIN
      // Used for collecting information about posted prod. order output from the created Item Ledger Entries.
      IF TrackingSpecification."Source Type" <> DATABASE::"Prod. Order Line" THEN
        EXIT;

      IF (TrackingSpecification."Source Type" = DATABASE::"Prod. Order Line") AND
         (TrackingSpecification."Source Subtype" = 3)
      THEN BEGIN
        ProdOrderRoutingLine.SETRANGE(Status,TrackingSpecification."Source Subtype");
        ProdOrderRoutingLine.SETRANGE("Prod. Order No.",TrackingSpecification."Source ID");
        ProdOrderRoutingLine.SETRANGE("Routing Reference No.",TrackingSpecification."Source Prod. Order Line");
        IF ProdOrderRoutingLine.FIND('+') THEN
          BackwardFlushing :=
            ProdOrderRoutingLine."Flushing Method" = ProdOrderRoutingLine."Flushing Method"::Backward;
      END;
      // 2013::begin
      ItemLedgerEntry.SETCURRENTKEY("Order Type","Order No.","Order Line No.","Entry Type");
      ItemLedgerEntry.SETRANGE("Order Type",ItemLedgerEntry."Order Type"::Production);
      ItemLedgerEntry.SETRANGE("Order No.",TrackingSpecification."Source ID");
      ItemLedgerEntry.SETRANGE("Order Line No.",TrackingSpecification."Source Prod. Order Line");
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Output);
      // 2013::end
      {{// 2009::begin
      ItemLedgerEntry.SETCURRENTKEY("Prod. Order No.","Prod. Order Line No.","Entry Type");
      ItemLedgerEntry.SETRANGE("Prod. Order No.",TrackingSpecification."Source ID");
      ItemLedgerEntry.SETRANGE("Prod. Order Line No.",TrackingSpecification."Source Prod. Order Line");
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Output);
      }}// 2009::end

      IF ItemLedgerEntry.FIND('-') THEN
        REPEAT
          TempTrackingSpecification := TrackingSpecification;
          TempTrackingSpecification."Entry No." := ItemLedgerEntry."Entry No.";
          TempTrackingSpecification."Item No." := ItemLedgerEntry."Item No.";
          TempTrackingSpecification."Serial No." := ItemLedgerEntry."Serial No.";
          TempTrackingSpecification."Lot No." := ItemLedgerEntry."Lot No.";
          TempTrackingSpecification."Quantity (Base)" := ItemLedgerEntry.Quantity;
          TempTrackingSpecification."Quantity Handled (Base)" := ItemLedgerEntry.Quantity;
          TempTrackingSpecification."Quantity Invoiced (Base)" := ItemLedgerEntry.Quantity;
          TempTrackingSpecification."Qty. per Unit of Measure" := ItemLedgerEntry."Qty. per Unit of Measure";
          TempTrackingSpecification.InitQtyToShip;
          TempTrackingSpecification.INSERT;

          IF BackwardFlushing THEN BEGIN
            SourceQuantityArray[1] += ItemLedgerEntry.Quantity;
            SourceQuantityArray[2] += ItemLedgerEntry.Quantity;
            SourceQuantityArray[3] += ItemLedgerEntry.Quantity;
          END;

        UNTIL ItemLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE ZeroLineExists@18() OK@1000 : Boolean;
    VAR
      xTrackingSpec@1001 : Record 336;
    BEGIN
      IF (tRec."Quantity (Base)" <> 0) OR (tRec."Serial No." <> '') OR (tRec."Lot No." <> '') THEN
        EXIT(FALSE);
      xTrackingSpec.COPY(tRec);
      tRec.RESET;
      tRec.SETRANGE("Quantity (Base)",0);
      tRec.SETRANGE("Serial No.",'');
      tRec.SETRANGE("Lot No.",'');
      OK := NOT tRec.ISEMPTY;
      tRec.COPY(xTrackingSpec);
    END;

    PROCEDURE AssignLotNo@21();
    VAR
      QtyToCreate@1000 : Decimal;
    BEGIN
      IF ZeroLineExists THEN
        tRec.DELETE;

      IF (SourceQuantityArray[1] * UndefinedQtyArray[1] <= 0) OR
         (ABS(SourceQuantityArray[1]) < ABS(UndefinedQtyArray[1]))
      THEN
        QtyToCreate := 0
      ELSE
        QtyToCreate := UndefinedQtyArray[1];

      GetItem(tRec."Item No.");

      Item.TESTFIELD("Lot Nos.");
      tRec.VALIDATE("Lot No.",NoSeriesMgt.GetNextNo(Item."Lot Nos.",WORKDATE,TRUE));
      tRec."Qty. per Unit of Measure" := QtyPerUOM;
      tRec.VALIDATE("Quantity (Base)",QtyToCreate);
      tRec."Entry No." := NextEntryNo;
      TestTempSpecificationExists;
      tRec.INSERT;
      TempItemTrackLineInsert.TRANSFERFIELDS(tRec);
      TempItemTrackLineInsert.INSERT;
      {// 2017-::begin
      ItemTrackingDataCollection.UpdateLotSNDataSetWithChange(
        TempItemTrackLineInsert,CurrentSignFactor * SourceQuantityArray[1] < 0,CurrentSignFactor,0);
      }// 2017-::end
      CalculateSums;
    END;

    PROCEDURE TestTempSpecificationExists@23() Exists@1000 : Boolean;
    VAR
      TempSpecification@1004 : TEMPORARY Record 336;
    BEGIN
      TempSpecification.COPY(tRec);
      tRec.SETCURRENTKEY("Lot No.","Serial No.");
      tRec.SETRANGE("Serial No.",tRec."Serial No.");
      IF tRec."Serial No." = '' THEN
        tRec.SETRANGE("Lot No.",tRec."Lot No.");
      tRec.SETFILTER("Entry No.",'<>%1',tRec."Entry No.");
      tRec.SETRANGE("Buffer Status",0);
      Exists := NOT tRec.ISEMPTY;
      tRec.COPY(TempSpecification);
      IF Exists AND CurrentFormIsOpen THEN
        IF tRec."Serial No." = '' THEN
          ERROR(
            Text011,
            tRec.TABLECAPTION,tRec.FIELDCAPTION("Serial No."),tRec."Serial No.",
            tRec.FIELDCAPTION("Lot No."),tRec."Lot No.")
        ELSE
          ERROR(
            Text012,
            tRec.TABLECAPTION,tRec.FIELDCAPTION("Serial No."),tRec."Serial No.");
    END;

    LOCAL PROCEDURE QtySignFactor@24() : Integer;
    BEGIN
      IF SourceQuantityArray[1] < 0 THEN
        EXIT(-1)
      ELSE
        EXIT(1)
    END;

    PROCEDURE RegisterItemTrackingLines@27(SourceSpecification@1001 : Record 336;AvailabilityDate@1002 : Date;VAR TempSpecification@1000 : TEMPORARY Record 336);
    BEGIN
      SourceSpecification.TESTFIELD("Source Type"); // Check if source has been set.
      IF NOT CalledFromSynchWhseItemTrkg THEN
        TempSpecification.RESET;
      IF NOT TempSpecification.FIND('-') THEN
        EXIT;

      IsCorrection := SourceSpecification.Correction;
      SetSource(SourceSpecification,AvailabilityDate);
      tRec.RESET;
      tRec.SETCURRENTKEY("Lot No.","Serial No.");

      REPEAT
        tRec.SETRANGE("Lot No.",TempSpecification."Lot No.");
        tRec.SETRANGE("Serial No.",TempSpecification."Serial No.");
        IF tRec.FIND('-') THEN BEGIN
          IF IsCorrection THEN BEGIN
            tRec."Quantity (Base)" :=
              tRec."Quantity (Base)" + TempSpecification."Quantity (Base)";
            tRec."Qty. to Handle (Base)" :=
              tRec."Qty. to Handle (Base)" + TempSpecification."Qty. to Handle (Base)";
            tRec."Qty. to Invoice (Base)" :=
              tRec."Qty. to Invoice (Base)" + TempSpecification."Qty. to Invoice (Base)";
          END ELSE
            tRec.VALIDATE("Quantity (Base)",
              tRec."Quantity (Base)" + TempSpecification."Quantity (Base)");
          tRec.MODIFY;
        END ELSE BEGIN
          tRec.TRANSFERFIELDS(SourceSpecification);
          tRec."Serial No." := TempSpecification."Serial No.";
          tRec."Lot No." := TempSpecification."Lot No.";
          tRec."Warranty Date" := TempSpecification."Warranty Date";
          tRec."Expiration Date" := TempSpecification."Expiration Date";
          tRec.VALIDATE("Quantity (Base)",TempSpecification."Quantity (Base)");
          tRec."Entry No." := NextEntryNo;
          tRec.INSERT;
        END;
      UNTIL TempSpecification.NEXT = 0;
      tRec.RESET;
      IF tRec.FIND('-') THEN
        REPEAT
          CheckLine(tRec);
        UNTIL tRec.NEXT = 0;

      tRec.SETRANGE("Lot No.",SourceSpecification."Lot No.");
      tRec.SETRANGE("Serial No.",SourceSpecification."Serial No.");

      CalculateSums;
      IF UpdateUndefinedQty THEN
        WriteToDatabase
      ELSE
        ERROR(Text014,TotalItemTrackingLine."Quantity (Base)",
          LOWERCASE(TempReservEntry.TextCaption),SourceQuantityArray[1]);

      // Copy to inbound part of transfer
      IF FormRunMode = FormRunMode::Transfer THEN
        SynchronizeLinkedSources('');
    END;

    PROCEDURE SynchronizeLinkedSources@31(DialogText@1000 : Text[250]) : Boolean;
    BEGIN
      IF CurrentSourceRowID = '' THEN
        EXIT(FALSE);
      IF SecondSourceRowID = '' THEN
        EXIT(FALSE);

      ItemTrackingMgt.SynchronizeItemTracking(CurrentSourceRowID,SecondSourceRowID,DialogText);
      EXIT(TRUE);
    END;

    PROCEDURE SetBlockCommit@33(NewBlockCommit@1000 : Boolean);
    BEGIN
      BlockCommit := NewBlockCommit;
    END;

    PROCEDURE BinContentItemTrackingInsert@34(TempItemTrackingLineNew@1000 : Record 336);
    BEGIN
      tRec := TempItemTrackingLineNew;
      tRec."Entry No." := NextEntryNo;
      IF (NOT InsertIsBlocked) AND (NOT ZeroLineExists) THEN
        IF NOT TestTempSpecificationExists THEN
          tRec.INSERT;
      MoveBinContent := TRUE;
      WriteToDatabase;
    END;

    PROCEDURE TempItemTrackingDef@35(NewTrackingSpecification@1000 : Record 336);
    BEGIN
      tRec := NewTrackingSpecification;
      tRec."Entry No." := NextEntryNo;
      IF (NOT InsertIsBlocked) AND (NOT ZeroLineExists) THEN
        IF NOT TestTempSpecificationExists THEN
          tRec.INSERT
        ELSE
          ModifyTrackingSpecification(NewTrackingSpecification);
      WriteToDatabase;
    END;

    LOCAL PROCEDURE CheckEntryIsReservation@37(Checktype@1003 : 'Rename/Delete,Quantity';Messagetype@1000 : 'Error,Message') EntryIsReservation : Boolean;
    VAR
      ReservEntry@1001 : Record 337;
      QtyToCheck@1005 : Decimal;
    BEGIN
      WITH ReservEntry DO BEGIN
        SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line","Reservation Status");
        SETRANGE("Source ID",tRec."Source ID");
        SETRANGE("Source Ref. No.",tRec."Source Ref. No.");
        SETRANGE("Source Type",tRec."Source Type");
        SETRANGE("Source Subtype",tRec."Source Subtype");
        SETRANGE("Source Batch Name",tRec."Source Batch Name");
        SETRANGE("Source Prod. Order Line",tRec."Source Prod. Order Line");
        SETRANGE("Reservation Status","Reservation Status"::Reservation);

        //SETRANGE("Serial No.",xRec."Serial No.");  // RT possible issue
        //SETRANGE("Lot No.",xRec."Lot No."); // RT possible issue
        IF FIND('-') THEN BEGIN
          CASE Checktype OF
            Checktype::"Rename/Delete":
              BEGIN
                EntryIsReservation := TRUE;
                CASE Messagetype OF
                  Messagetype::Error: ERROR(Text000,TextCaption);
                  Messagetype::Message: ERROR(Text000,TextCaption);
                END;
              END;
            Checktype::Quantity:
              BEGIN
                REPEAT
                  QtyToCheck := QtyToCheck + "Quantity (Base)";
                UNTIL NEXT = 0;
                IF ABS(tRec."Quantity (Base)") < ABS(QtyToCheck) THEN
                  ERROR(Text001,TextCaption,FIELDCAPTION("Quantity (Base)"),ABS(QtyToCheck));
              END;
          END;
        END;
      END;
    END;

    PROCEDURE SetCalledFromSynchWhseItemTrkg@39(CalledFromSynchWhseItemTrkg2@1000 : Boolean);
    BEGIN
      CalledFromSynchWhseItemTrkg := CalledFromSynchWhseItemTrkg2;
    END;

    PROCEDURE ModifyTrackingSpecification@40(NewTrackingSpecification@1000 : Record 336);
    VAR
      CrntTempTrackingSpec@1001 : TEMPORARY Record 336;
    BEGIN
      CrntTempTrackingSpec.COPY(tRec);
      tRec.SETCURRENTKEY("Lot No.","Serial No.");
      tRec.SETRANGE("Lot No.",NewTrackingSpecification."Lot No.");
      tRec.SETRANGE("Serial No.",NewTrackingSpecification."Serial No.");
      tRec.SETFILTER("Entry No.",'<>%1',tRec."Entry No.");
      tRec.SETRANGE("Buffer Status",0);
      IF tRec.FIND('-') THEN BEGIN
        tRec.VALIDATE("Quantity (Base)",
          tRec."Quantity (Base)" + NewTrackingSpecification."Quantity (Base)");
        tRec.MODIFY;
      END;
      tRec.COPY(CrntTempTrackingSpec);
    END;

    PROCEDURE LookupAvailable@43(LookupMode@1000 : 'Serial No.,Lot No.');
    BEGIN
      tRec."Bin Code" := ForBinCode;
      {// 2017-::begin
      ItemTrackingDataCollection.LookupLotSerialNoAvailability(tRec,LookupMode);
      }// 2017-::end
      tRec."Bin Code" := '';
    END;

    PROCEDURE F6LookupAvailable@44();
    BEGIN
      IF SNAvailabilityActive THEN
        LookupAvailable(0);
      IF LotAvailabilityActive THEN
        LookupAvailable(1);
    END;

    PROCEDURE LotSnAvailable@45(VAR TrackingSpecification@1000 : Record 336;LookupMode@1001 : 'Serial No.,Lot No.') : Boolean;
    BEGIN
      {// 2017-::begin
      EXIT(ItemTrackingDataCollection.LotSNAvailable(TrackingSpecification,LookupMode));
      }// 2017-::end
    END;

    PROCEDURE SelectEntries@36();
    VAR
      xTrackingSpec@1001 : Record 336;
      MaxQuantity@1000 : Decimal;
    BEGIN
      xTrackingSpec.COPYFILTERS(tRec);
      MaxQuantity := UndefinedQtyArray[1];
      IF MaxQuantity * CurrentSignFactor > 0 THEN
        MaxQuantity := 0;
      tRec."Bin Code" := ForBinCode;
      {// 2017-::begin
      ItemTrackingDataCollection.SelectMultipleLotSerialNo(tRec,MaxQuantity,CurrentSignFactor);
      }// 2017-::end
      tRec."Bin Code" := '';
      IF tRec.FINDSET THEN
        REPEAT
          CASE tRec."Buffer Status" OF
            tRec."Buffer Status"::MODIFY:
              BEGIN
                IF TempItemTrackLineModify.GET(tRec."Entry No.") THEN
                  TempItemTrackLineModify.DELETE;
                IF TempItemTrackLineInsert.GET(tRec."Entry No.") THEN BEGIN
                  TempItemTrackLineInsert.TRANSFERFIELDS(tRec);
                  TempItemTrackLineInsert.MODIFY;
                END ELSE BEGIN
                  TempItemTrackLineModify.TRANSFERFIELDS(tRec);
                  TempItemTrackLineModify.INSERT;
                END;
              END;
            tRec."Buffer Status"::INSERT:
              BEGIN
                TempItemTrackLineInsert.TRANSFERFIELDS(tRec);
                TempItemTrackLineInsert.INSERT;
              END;
          END;
          tRec."Buffer Status" := 0;
          tRec.MODIFY;
        UNTIL tRec.NEXT = 0;
      LastEntryNo := tRec."Entry No.";
      CalculateSums;
      UpdateUndefinedQty;
      tRec.COPYFILTERS(xTrackingSpec);
    END;

    PROCEDURE ReserveItemTrackingLine@46();
    VAR
      LateBindingMgt@1000 : Codeunit 6502;
    BEGIN
      LateBindingMgt.ReserveItemTrackingLine(tRec);
    END;

    PROCEDURE ReestablishReservations@47();
    VAR
      LateBindingMgt@1000 : Codeunit 6502;
    BEGIN
      IF TempItemTrackLineReserv.FINDSET THEN
        REPEAT
          {{// 2009::begin
          LateBindingMgt.ReserveItemTrackingLine2(TempItemTrackLineReserv,0);
          }}// 2009::end
          // 2013::begin
          LateBindingMgt.ReserveItemTrackingLine2(TempItemTrackLineReserv,0,TempItemTrackLineReserv."Quantity (Base)");
          // 2013::end
          SetQtyToHandleAndInvoice(TempItemTrackLineReserv);
        UNTIL TempItemTrackLineReserv.NEXT = 0;
      TempItemTrackLineReserv.DELETEALL;
    END;

    PROCEDURE SetInbound@48(NewInbound@1000 : Boolean);
    BEGIN
      Inbound := NewInbound;
    END;

    PROCEDURE SetPick@1000000000(IsPick2@1000000000 : Boolean);
    BEGIN
      // New function for hotfix
      IsPick := IsPick2;
    END;

    LOCAL PROCEDURE form_onOpen@1000000004();
    BEGIN
      UpdateUndefinedQty;

      CurrentFormIsOpen := TRUE;
    END;

    LOCAL PROCEDURE form_onClose@1000000005();
    BEGIN
      IF UpdateUndefinedQty THEN BEGIN
        WriteToDatabase;
      END;

      IF FormRunMode = FormRunMode::"Drop Shipment" THEN
        CASE CurrentSourceType OF
          DATABASE::"Sales Line":
            SynchronizeLinkedSources(STRSUBSTNO(Text015,Text016));
          DATABASE::"Purchase Line":
            SynchronizeLinkedSources(STRSUBSTNO(Text015,Text017));
        END;

      IF FormRunMode = FormRunMode::Transfer THEN  BEGIN
        SynchronizeLinkedSources('');
      END;
    END;

    LOCAL PROCEDURE form_onQueryClose@1000000006();
    BEGIN
      IF NOT UpdateUndefinedQty THEN
        ERROR(Text006);
      {// 2017-::begin
      IF NOT ItemTrackingDataCollection.RefreshLotSNAvailability(tRec,FALSE) THEN BEGIN
        ERROR(Text019);
      END;
      }// 2017-::end
    END;

    LOCAL PROCEDURE addReservation@1000000001(psSerialNumber@1000000000 : Text;psLotNumber@1000000003 : Text;lrecTrackingSpecification@1000000001 : Record 336;pdInitialQuantity@1000000004 : Decimal);
    VAR
      ldQuantity@1000000002 : Decimal;
      liIndex@1000000005 : Integer;
    BEGIN
      // do the insert
      IF (NOT InsertIsBlocked) AND (NOT ZeroLineExists) THEN BEGIN
        IF NOT TestTempSpecificationExists THEN BEGIN
          psLotNumber := UPPERCASE(psLotNumber);
          psSerialNumber := UPPERCASE(psSerialNumber);
          tRec.INIT;
          initLine(lrecTrackingSpecification);
          tRec."Entry No." := NextEntryNo;
          tRec."Qty. per Unit of Measure" := QtyPerUOM;
          tRec.VALIDATE("Serial No.",psSerialNumber);
          tRec.VALIDATE("Lot No.",psLotNumber);


          // hmmm can't remember where/why I did this but should only be three types of values (-1,0,1)
          ldQuantity := 0;
          IF( lrecTrackingSpecification."Quantity (Base)" > 0 ) THEN
            ldQuantity := pdInitialQuantity //1
          ELSE IF( lrecTrackingSpecification."Quantity (Base)" < 0 ) THEN
            ldQuantity := -1;

          tRec.VALIDATE("Quantity (Base)", ldQuantity);
          TempItemTrackLineInsert.TRANSFERFIELDS(tRec);
          TempItemTrackLineInsert.INSERT;
          tRec.INSERT;
          {// 2017-::begin
          ItemTrackingDataCollection.UpdateLotSNDataSetWithChange(
            TempItemTrackLineInsert,CurrentSignFactor * SourceQuantityArray[1] < 0,CurrentSignFactor,0);
          }// 2017-::end
        END;
      END;
    END;

    LOCAL PROCEDURE removeResNumber@1000000002(psSerialNumber@1000000001 : Text;psLotNumber@1000000006 : Text;lrecTrackingSpecification@1000000000 : Record 336);
    VAR
      TrackingSpec@1000000004 : Record 336;
      WMSManagement@1000000003 : Codeunit 7302;
      AlreadyDeleted@1000000002 : Boolean;
      liEntryNo@1000000005 : Integer;
    BEGIN
      form_onOpen();

      psLotNumber := UPPERCASE(psLotNumber);
      psSerialNumber := UPPERCASE(psSerialNumber);

      SetBlockCommit(TRUE);

      // do the delete

      // see if serial number is in this list now
      IF( tRec.FIND('-') ) THEN BEGIN
        REPEAT
          IF( (psSerialNumber <> '') AND (tRec."Serial No." = psSerialNumber) ) THEN BEGIN
            liEntryNo := tRec."Entry No.";
          END
          ELSE IF( (psLotNumber <> '') AND (tRec."Lot No." = psLotNumber) ) THEN BEGIN
            liEntryNo := tRec."Entry No.";
          END

        UNTIL( tRec.NEXT=0 );
      END;

      tRec.GET(liEntryNo);

      TrackingSpec."Item No." := tRec."Item No.";
      TrackingSpec."Location Code" := tRec."Location Code";
      TrackingSpec."Source Type" := tRec."Source Type";
      TrackingSpec."Source Subtype" := tRec."Source Subtype";
      WMSManagement.CheckItemTrackingChange(TrackingSpec,tRec);

      IF NOT DeleteIsBlocked THEN BEGIN
        AlreadyDeleted := TempItemTrackLineDelete.GET(tRec."Entry No.");
        TempItemTrackLineDelete.TRANSFERFIELDS(tRec);
        IF NOT AlreadyDeleted THEN
          TempItemTrackLineDelete.INSERT;
          {// 2017-::begin
          ItemTrackingDataCollection.UpdateLotSNDataSetWithChange(
            TempItemTrackLineDelete,CurrentSignFactor * SourceQuantityArray[1] < 0,CurrentSignFactor,2);
          }// 2017-::end
        IF TempItemTrackLineInsert.GET(tRec."Entry No.") THEN
          TempItemTrackLineInsert.DELETE;
        IF TempItemTrackLineModify.GET(tRec."Entry No.") THEN
          TempItemTrackLineModify.DELETE;
        tRec.DELETE(TRUE);
      END;
      CalculateSums;


      form_onQueryClose();
      form_onClose();
    END;

    LOCAL PROCEDURE modifyReservation@1000000015(piEntryNo@1000000000 : Integer;psSerialNumber@1000000002 : Text;psLotNumber@1000000001 : Text;pdChangeQty@1000000003 : Decimal);
    BEGIN
      tRec.GET(piEntryNo);

      psLotNumber := UPPERCASE(psLotNumber);
      psSerialNumber := UPPERCASE(psSerialNumber);


      //IF InsertIsBlocked THEN

      //MESSAGE('Before: %1',pdChangeQty);
      //MESSAGE('After: %1', trec."Quantity (Base)



      tRec.VALIDATE("Quantity (Base)",(tRec."Quantity (Base)" + pdChangeQty));
      tRec.MODIFY;

      IF NOT TestTempSpecificationExists THEN
        tRec.MODIFY;

      IF TempItemTrackLineModify.GET(tRec."Entry No.") THEN
        TempItemTrackLineModify.DELETE;
      IF TempItemTrackLineInsert.GET(tRec."Entry No.") THEN BEGIN
        TempItemTrackLineInsert.TRANSFERFIELDS(tRec);
        TempItemTrackLineInsert.MODIFY;
        {// 2017-::begin
        ItemTrackingDataCollection.UpdateLotSNDataSetWithChange(
          TempItemTrackLineInsert,CurrentSignFactor * SourceQuantityArray[1] < 0,CurrentSignFactor,1);
        }// 2017-::end
      END ELSE BEGIN
        TempItemTrackLineModify.TRANSFERFIELDS(tRec);
        TempItemTrackLineModify.INSERT;
        {// 2017-::begin
        ItemTrackingDataCollection.UpdateLotSNDataSetWithChange(
          TempItemTrackLineModify,CurrentSignFactor * SourceQuantityArray[1] < 0,CurrentSignFactor,1);
        }// 2017-::end
      END;
    END;

    PROCEDURE handleReservation@1000000003(psSerialNumber@1000000003 : Text;psLotNumber@1000000002 : Text;lrecTrackingSpecification@1000000001 : Record 336;pdChangeQty@1000000000 : Decimal);
    VAR
      liEntryNo@1000000004 : Integer;
    BEGIN
      form_onOpen();

      psLotNumber := UPPERCASE(psLotNumber);
      psSerialNumber := UPPERCASE(psSerialNumber);


      SetBlockCommit(TRUE);

      liEntryNo := getEntryNo(psSerialNumber, psLotNumber);

      // existing entry therfore modify
      IF( liEntryNo <> -1 ) THEN BEGIN
        modifyReservation(liEntryNo,psSerialNumber, psLotNumber,pdChangeQty);
      END
      ELSE BEGIN
       // new entry so add
       addReservation(psSerialNumber, psLotNumber, lrecTrackingSpecification,pdChangeQty);
      END;

      CalculateSums;

      form_onQueryClose();
      form_onClose();
    END;

    LOCAL PROCEDURE getEntryNo@1000000007(psSerialNumber@1000000001 : Text;psLotNumber@1000000002 : Text) : Integer;
    VAR
      liEntryNo@1000000000 : Integer;
    BEGIN
      liEntryNo := -1;

      psLotNumber := UPPERCASE(psLotNumber);
      psSerialNumber := UPPERCASE(psSerialNumber);


      // see if serial/lot number is in this list now
      IF( tRec.FIND('-') ) THEN BEGIN
        REPEAT
          // must match on both
          IF( (psSerialNumber <> '') AND (psLotNumber <> '') ) THEN BEGIN
            IF( (tRec."Serial No." = psSerialNumber) AND (tRec."Lot No." = psLotNumber) ) THEN BEGIN
              liEntryNo := tRec."Entry No.";
            END;
          END
          ELSE BEGIN
            // match on either the serial number or lot number
            IF( (psSerialNumber <> '') AND (tRec."Serial No." = psSerialNumber) ) THEN BEGIN
              liEntryNo := tRec."Entry No.";
            END
            ELSE IF( (psLotNumber <> '') AND (tRec."Lot No." = psLotNumber) ) THEN BEGIN
              liEntryNo := tRec."Entry No.";
            END
          END;
        UNTIL( tRec.NEXT=0 );
      END;

      EXIT(liEntryNo);
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************

      Legacy for Transfer Order shipping item tracking.
    }
    END.
  }
}

