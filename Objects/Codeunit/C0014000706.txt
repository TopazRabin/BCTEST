OBJECT Codeunit 14000706 Create Miscellaneous Package
{
  OBJECT-PROPERTIES
  {
    Date=06/28/17;
    Time=12:00:00 PM;
    Version List=SE0.53.08;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            MESSAGE(CreatePackageHeader('Test 1',0,'10000','','UPS','GROUND'));

            MESSAGE(FORMAT(CreatePackageLine(2,'70000','','',2)));

            MESSAGE(FORMAT(ClosePackage(TRUE)));

            PostPackage;
          END;

  }
  CODE
  {
    VAR
      Package@1240030000 : Record 14000701;
      PackageLine@1240030001 : Record 14000702;
      Shipping@1240030006 : Codeunit 14000701;
      PackageOpen@1240030002 : Boolean;
      PackageClosed@1240030003 : Boolean;
      Text001@1240030004 : TextConst 'ENU=No open Package';
      Text002@1240030005 : TextConst 'ENU=Package Closed';
      Text003@1240030007 : TextConst 'ENU=Package not Closed';
      PackageLineExists@1240030009 : Boolean;
      AllowRollback@1240030008 : Boolean;
      Text004@1240030010 : TextConst 'ENU=No open Package Line';
      Text005@1240030011 : TextConst 'ENU=Source already used by E-Ship';

    PROCEDURE CreatePackageHeader@1240030000(Description@1240030000 : Text[50];ShipToType@1240030013 : 'Customer,Vendor,Bank,Contact,Resource,Employee,,Location';ShipToNo@1240030014 : Code[20];ShiptoCode@1240030015 : Code[10];ShippingAgentCode@1240030001 : Code[10];ShippingAgentService@1240030002 : Code[30]) : Code[20];
    BEGIN
      CLEAR(Package);
      Package.Miscellaneous := TRUE;
      Package.INSERT(TRUE);
      Package.VALIDATE(Description,Description);

      Package.VALIDATE("Ship-to Type",ShipToType);
      IF ShipToNo <> '' THEN
        Package.VALIDATE("Ship-to No.",ShipToNo);
      IF ShiptoCode <> '' THEN
        Package.VALIDATE("Ship-to Code",ShiptoCode);
      Package.VALIDATE("Shipping Agent Code",ShippingAgentCode);
      IF ShippingAgentService <> '' THEN
        Package.VALIDATE("Shipping Agent Service",ShippingAgentService);

      Package.MODIFY(TRUE);

      IF NOT AllowRollback THEN
        COMMIT;

      PackageOpen := TRUE;
      PackageClosed := FALSE;
      PackageLineExists := FALSE;

      EXIT(Package."No.");
    END;

    PROCEDURE UpdateSourceInfo@1240030006(SourceType@1240030003 : Integer;SourceSubType@1240030004 : Integer;SourceID@1240030005 : Code[20];PostedSourceID@1240030002 : Code[20]);
    BEGIN
      IF NOT PackageOpen THEN
        ERROR(Text001);

      IF PackageClosed THEN
        ERROR(Text002);

      IF ((SourceType = DATABASE::"Sales Header") AND (SourceSubType IN [1,2])) OR
         ((SourceType = DATABASE::"Purchase Header") AND (SourceSubType IN [3,5])) OR
         (SourceType = DATABASE::"Transfer Header")
      THEN
        ERROR(Text005);

      Package.FIND;
      Package."Source Type" := SourceType;
      Package."Source Subtype" := SourceSubType;
      Package."Source ID" := SourceID;
      Package."Posted Source ID" := PostedSourceID;

      Package.MODIFY(TRUE);

      IF NOT AllowRollback THEN
        COMMIT;
    END;

    PROCEDURE UpdateShipToInfo@1240030005(ShipToName@1240030003 : Text[50];ShipToName2@1240030004 : Text[30];ShipToAddress@1240030005 : Text[30];ShipToAddress2@1240030006 : Text[30];ShipToCity@1240030007 : Text[30];ShipToState@1240030008 : Text[30];ShipToZIPCode@1240030009 : Text[30];ShipToCountryCode@1240030010 : Text[30];ShipToPhoneNo@1240030011 : Text[30];ShipToContact@1240030012 : Text[50]);
    BEGIN
      IF NOT PackageOpen THEN
        ERROR(Text001);

      IF PackageClosed THEN
        ERROR(Text002);

      Package.FIND;
      IF ShipToName <> '' THEN BEGIN
        Package.VALIDATE("Ship-to Name",ShipToName);
        Package.VALIDATE("Ship-to Name 2",ShipToName2);
        Package.VALIDATE("Ship-to Address",ShipToAddress);
        Package.VALIDATE("Ship-to Address 2",ShipToAddress2);
        Package.VALIDATE("Ship-to City",ShipToCity);
        Package.VALIDATE("Ship-to ZIP Code",ShipToZIPCode);
        Package.VALIDATE("Ship-to State",ShipToState);
        Package.VALIDATE("Ship-to Country Code",ShipToCountryCode);
      END;

      IF ShipToContact <> '' THEN
        Package.VALIDATE("Ship-to Contact",ShipToContact);
      IF ShipToPhoneNo <> '' THEN
        Package.VALIDATE("Ship-to Phone No.",ShipToPhoneNo);

      Package.MODIFY(TRUE);

      IF NOT AllowRollback THEN
        COMMIT;
    END;

    PROCEDURE UpdatePaymentThirdPartyInfo@1240030003(ShippingPaymentType@1240030001 : 'Prepaid,Third Party,Freight Collect,Consignee';ThirdPartyShipAccountNo@1240030002 : Code[20];InsureThroughShippingAgent@1240030004 : Boolean;COD@1240030000 : Boolean;CODCashiersCheck@1240030003 : Boolean;CODAmount@1240030006 : Decimal;AdditionalCODAmount@1240030005 : Decimal);
    BEGIN
      IF NOT PackageOpen THEN
        ERROR(Text001);

      IF PackageClosed THEN
        ERROR(Text002);

      Package.FIND;
      Package.VALIDATE("Shipping Payment Type",ShippingPaymentType);
      IF ThirdPartyShipAccountNo <> '' THEN
        Package.VALIDATE("Third Party Ship. Account No.",ThirdPartyShipAccountNo);

      Package.VALIDATE("Insure Through Shipping Agent",InsureThroughShippingAgent);

      IF COD THEN BEGIN
        Package.VALIDATE(COD,TRUE);
        Package.VALIDATE("COD Cashiers Check",CODCashiersCheck);
        IF CODAmount <> 0 THEN
          Package.VALIDATE("COD Amount",CODAmount);
        IF AdditionalCODAmount <> 0 THEN
          Package.VALIDATE("Additional COD Amount",AdditionalCODAmount);
      END;

      Package.MODIFY(TRUE);

      IF NOT AllowRollback THEN
        COMMIT;
    END;

    PROCEDURE UpdateOverrideInfo@1240030008(OverrideWeight@1240030000 : Decimal;OverrideValue@1240030001 : Decimal;OverrideInsuredValue@1240030002 : Decimal;OverrideShippingCharge@1240030004 : Decimal;AdditionalShippingCharge@1240030005 : Decimal);
    BEGIN
      IF NOT PackageOpen THEN
        ERROR(Text001);

      IF PackageClosed THEN
        ERROR(Text002);

      Package.FIND;
      IF OverrideWeight > 0 THEN
        Package.VALIDATE("Override Weight",OverrideWeight);
      IF OverrideValue <> 0 THEN
        Package.VALIDATE("Override Value",OverrideValue);
      IF OverrideInsuredValue <> 0 THEN
        Package.VALIDATE("Override Insured Value",OverrideInsuredValue);
      IF OverrideShippingCharge <> 0 THEN
        Package.VALIDATE("Override Shipping Charge",OverrideShippingCharge);
      IF AdditionalShippingCharge <> 0 THEN
        Package.VALIDATE("Additional Shipping Charge",AdditionalShippingCharge);

      Package.MODIFY(TRUE);

      IF NOT AllowRollback THEN
        COMMIT;
    END;

    PROCEDURE CreatePackageLine@1240030001(Type@1240030000 : ' ,Account (G/L),Item,Resource';No@1240030001 : Code[20];VariantCode@1240030002 : Code[10];UnitOfMeasureCode@1240030003 : Code[10];Quantity@1240030005 : Decimal) : Integer;
    BEGIN
      IF NOT PackageOpen THEN
        ERROR(Text001);

      IF PackageClosed THEN
        ERROR(Text002);

      Package.FIND;
      PackageLine.RESET;
      PackageLine.SETRANGE("Package No.",Package."No.");
      IF NOT PackageLine.FIND('+') THEN
        PackageLine."Package No." := Package."No.";
      PackageLine."Line No." := PackageLine."Line No." + 10000;
      PackageLine.INIT;
      PackageLine.INSERT(TRUE);

      PackageLine.VALIDATE(Type,Type);
      IF No <> '' THEN
        PackageLine.VALIDATE("No.",No);
      IF VariantCode <> '' THEN
        PackageLine.VALIDATE("Variant Code",VariantCode);
      IF UnitOfMeasureCode <> '' THEN
        PackageLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      IF Quantity <> 0 THEN
        PackageLine.VALIDATE(Quantity,Quantity);
      PackageLine.MODIFY(TRUE);

      IF NOT AllowRollback THEN
        COMMIT;

      PackageLineExists := TRUE;

      EXIT(PackageLine."Line No.");
    END;

    PROCEDURE UpdatePackageLineInfo@1240030007(Description@1240030004 : Text[50];SerialNo@1240030006 : Code[20];LotNo@1240030007 : Code[20];NetWeight@1240030008 : Decimal;GrossWeight@1240030009 : Decimal;DimWeight@1240030010 : Decimal;ValuePrice@1240030011 : Decimal;ValueCost@1240030012 : Decimal);
    BEGIN
      IF NOT PackageOpen THEN
        ERROR(Text001);

      IF PackageClosed THEN
        ERROR(Text002);

      IF NOT PackageLineExists THEN
        ERROR(Text004);

      PackageLine.FIND;
      IF Description <> '' THEN
        PackageLine.VALIDATE(Description,Description);
      IF NetWeight <> 0 THEN
        PackageLine.VALIDATE("Net Weight",NetWeight);
      IF GrossWeight <> 0 THEN
        PackageLine.VALIDATE("Gross Weight",GrossWeight);
      IF DimWeight <> 0 THEN
        PackageLine.VALIDATE("Dim. Weight",DimWeight);
      IF ValuePrice <> 0 THEN
        PackageLine.VALIDATE("Value (Price)",ValuePrice);
      IF ValueCost <> 0 THEN
        PackageLine.VALIDATE("Value (Cost)",ValueCost);
      IF SerialNo <> '' THEN
        PackageLine.VALIDATE("Serial No.",SerialNo);
      IF LotNo <> '' THEN
        PackageLine.VALIDATE("Lot No.",LotNo);
      PackageLine.MODIFY(TRUE);

      IF NOT AllowRollback THEN
        COMMIT;
    END;

    PROCEDURE ClosePackage@1240030002(PrintLabel@1240030003 : Boolean) : Decimal;
    BEGIN
      IF NOT PackageOpen THEN
        ERROR(Text001);

      IF PackageClosed THEN
        ERROR(Text002);

      Package.FIND;
      Shipping.ClosePackage(Package,PrintLabel);

      PackageClosed := TRUE;

      EXIT(Package."Shipping Charge");
    END;

    PROCEDURE PostPackage@1240030004();
    BEGIN
      IF NOT PackageOpen THEN
        ERROR(Text001);

      IF NOT PackageClosed THEN
        ERROR(Text003);

      Shipping.PostPackage(Package,'','',WORKDATE);

      IF NOT AllowRollback THEN
        COMMIT;

      PackageOpen := FALSE;
      PackageClosed := FALSE;
      PackageLineExists := FALSE;
    END;

    PROCEDURE GetPackage@1240030010(VAR GetPackage@1240030000 : Record 14000701);
    BEGIN
      Package.TESTFIELD("No.");

      GetPackage := Package;
    END;

    PROCEDURE SetAllowRollback@1240030009(NewValue@1240030000 : Boolean);
    BEGIN
      AllowRollback := NewValue;
    END;

    BEGIN
    END.
  }
}

