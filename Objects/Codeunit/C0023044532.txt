OBJECT Codeunit 23044532 WHI Workflow Management
{
  OBJECT-PROPERTIES
  {
    Date=12/16/20;
    Time=[ 1:51:39 PM];
    Version List=WHI2.4.7684.0;
  }
  PROPERTIES
  {
    TableNo=23044511;
    OnRun=VAR
            liEventID@1000000002 : Integer;
            ltxtOutputText@1000000001 : BigText;
            losReturnMessage@1000000000 : OutStream;
          BEGIN
            codRegionCode := Rec.getValue('device_culture');

            liEventID := Rec.getEvent();
            executeEvent(liEventID, Rec, ltxtOutputText);
            "Extensibility Blob".CREATEOUTSTREAM( losReturnMessage );
            ltxtOutputText.WRITE(losReturnMessage);
            MODIFY();
          END;

  }
  CODE
  {
    VAR
      iEventID@1000000000 : Integer;
      recWHISetup@1000000007 : Record 23044502;
      cu2013Support@1000000002 : Codeunit 23044530;
      cuActivityLogMgt@1000000006 : Codeunit 23044537;
      cuTranslationMgmt@1000000005 : Codeunit 23044526;
      codRegionCode@1000000004 : Code[10];
      cuWHICommon@1000000001 : Codeunit 23044501;

    PROCEDURE executeEvent@1000000002(piEventID@1000000000 : Integer;VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000002 : BigText);
    BEGIN
      iEventID := piEventID;

      CASE piEventID OF
        96001:  getWorkflowBlob(ptrecEventParams, pbsOutput);
        96002:  storeWorkflowBlob(ptrecEventParams, pbsOutput);
        96003:  getApplicationOverrides(ptrecEventParams, pbsOutput);
        96004:  GetKnownEvents(ptrecEventParams,pbsOutput);
        96005:  GetAllApplicationsForCache(ptrecEventParams, pbsOutput);
      END;
    END;

    PROCEDURE WorkflowBlobImportFile@1000000000(VAR precApplication@1000000006 : Record 23044527) pbWorked : Boolean;
    VAR
      ltrecTempBlob@1000000001 : TEMPORARY Record 99008535;
      losOutStream@1000000004 : OutStream;
      lbWorked@1000000000 : Boolean;
    BEGIN
      pbWorked := FALSE;

      precApplication.CALCFIELDS(precApplication."Application Blob");
      IF (precApplication."Application Blob".HASVALUE) THEN BEGIN
        IF NOT CONFIRM(cuTranslationMgmt.getTranslatedString('MSG_CONFIRM_OVERWRITE', ''), FALSE, precApplication.Code) THEN
          ERROR('');

        CLEAR(precApplication."Application Blob");
        precApplication.MODIFY(FALSE);
      END;

      precApplication."Application Blob".CREATEOUTSTREAM(losOutStream);

      pbWorked := cu2013Support.PromptAndImportIntoBlob( cuTranslationMgmt.getTranslatedString('MSG_APPLICATION_FILE_FILTER', codRegionCode), losOutStream );
      IF ( pbWorked ) THEN BEGIN
        precApplication.MODIFY();
      END;
    END;

    PROCEDURE WorkflowBlobExportFile@1000000008(VAR precApplication@1000000006 : Record 23044527);
    VAR
      losInStream@1000000002 : InStream;
    BEGIN
      precApplication.CALCFIELDS("Application Blob");
      precApplication."Application Blob".CREATEINSTREAM(losInStream);
      cu2013Support.PromptExportBlobToFile( cuTranslationMgmt.getTranslatedString('MSG_APPLICATION_FILE_FILTER', codRegionCode), 'xml', losInStream );
    END;

    PROCEDURE DesignWorkflow@1000000001(VAR precApplication@1000000000 : Record 23044527);
    VAR
      ltxtWorkflowPath@1000000001 : Text[1024];
      liEventManager@1000000002 : Integer;
      liReadOnly@1000000004 : Integer;
    BEGIN
      IF NOT precApplication.IsEditable() THEN BEGIN
        MESSAGE(cuTranslationMgmt.getTranslatedString('ERR_APPLICATION_READONLY', ''),precApplication.Code);
        liReadOnly := 1;
      END ELSE BEGIN
        liReadOnly := 0
      END;

      recWHISetup.GET();
      IF ( recWHISetup."WHI Web Service" = '' ) THEN BEGIN
        ERROR( cuTranslationMgmt.getTranslatedString('ERR_WEBSERVICE_NOT_DEFINED', '') );
      END;

      // Uppercase, because STRPOS does not seem to like different cases
      liEventManager := STRPOS(
        UPPERCASE(recWHISetup."WHI Web Service"),
        UPPERCASE( 'EventManager.asmx' ) );

      ltxtWorkflowPath := COPYSTR( recWHISetup."WHI Web Service", 1, liEventManager - 1 );
      ltxtWorkflowPath += 'Workflow/Default.aspx';

      // now the query parameters.
      // MUST use escapeDataString and not escapeURIString
      ltxtWorkflowPath += STRSUBSTNO( '?workflow=%1&company=%2&readonly=%3',
        cuWHICommon.EscapeURIDataString(precApplication.Code),
        cuWHICommon.EscapeURIDataString(COMPANYNAME),
        liReadOnly
          );

      cuWHICommon.OpenURL(ltxtWorkflowPath);
    END;

    LOCAL PROCEDURE getWorkflowBlob@1000000003(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511;VAR pbsOutput@1000000020 : BigText);
    VAR
      lsApplicationXML@1000000004 : Text;
      lcodApplication@1000000002 : Code[20];
      lrecApplication@1000000003 : Record 23044527;
      lcodLocationCode@1000000022 : Code[10];
      lbIncludeOverride@1000000010 : Boolean;
      lbTranslate@1000000011 : Boolean;
    BEGIN
      // Event 96001
      //
      // Sends the specific workflow to the scanner.


      lcodApplication := ptrecEventParams.getValue('workflow');
      lbIncludeOverride := ptrecEventParams.getValueAsBool('include_override');
      lbTranslate := (ptrecEventParams.getValue('config_id')<>'');

      lrecApplication.GET( lcodApplication );
      lsApplicationXML := GetApplicationXML(lrecApplication, lbTranslate, codRegionCode, lbIncludeOverride);
      pbsOutput.ADDTEXT( lsApplicationXML );

      lcodLocationCode :=ptrecEventParams.getValue('location');
      IF ( '' = lcodLocationCode ) THEN BEGIN
        lcodLocationCode :=ptrecEventParams.getValue('location_code'); // backwards compatibility.
      END;
      IF ( '' = lcodLocationCode ) THEN BEGIN
        lcodLocationCode :=ptrecEventParams.getValue('loc_code');
      END;
      IF (lcodLocationCode <> '') THEN BEGIN
        ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"WMDM Application"));
        ptrecEventParams.setValue('Document No.', lcodApplication);
        cuActivityLogMgt.logActivity(ptrecEventParams);
      END;
    END;

    LOCAL PROCEDURE storeWorkflowBlob@1000000005(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511;VAR pbsOutput@1000000020 : BigText);
    VAR
      lrecWHISetup@1000000018 : Record 23044502;
      ltrecTempBlob@1000000001 : TEMPORARY Record 99008535;
      lcodApplication@1000000002 : Code[20];
      lrecApplication@1000000003 : Record 23044527;
      ldnOutput@1000000006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      liNextPos@1000000011 : Integer;
      liCachedVersion@1000000009 : Integer;
      lcodLocationCode@1000000010 : Code[10];
      lsText@1000000004 : Text;
      liLength@1000000005 : Integer;
    BEGIN
      // Event 96002
      //
      // Stores the workflow

      lcodApplication := ptrecEventParams.getValue('workflow');

      lrecApplication.GET( lcodApplication );
      IF NOT lrecApplication.IsEditable() THEN
        ERROR(cuTranslationMgmt.getTranslatedString('ERR_APPLICATION_READONLY', ''),lrecApplication.Code);

      liCachedVersion := ptrecEventParams.getValueAsInt('wfversion');

      ldnOutput := ldnOutput.StringBuilder();
      ldnOutput.Append(ptrecEventParams.getLargeValue('blob'));

      lrecWHISetup.GET();

      lsText := ldnOutput.ToString();
      liLength := STRLEN(lsText);


      ArchiveApplication(lrecApplication);

      cuWHICommon.WriteTextToBlob(ldnOutput.ToString(),TRUE,ltrecTempBlob);
      ltrecTempBlob.CALCFIELDS(Blob);
      lrecApplication."Application Blob" := ltrecTempBlob.Blob;
      lrecApplication.Version := liCachedVersion;
      lrecApplication.MODIFY();

      // return what we just saved as a sanity check for the designer.
      ptrecEventParams.setValue('force','1');
      getWorkflowBlob( ptrecEventParams, pbsOutput );

      lcodLocationCode :=ptrecEventParams.getValue('location');
      IF ( '' = lcodLocationCode ) THEN BEGIN
        lcodLocationCode :=ptrecEventParams.getValue('location_code'); // backwards compatibility.
      END;
      IF ( '' = lcodLocationCode ) THEN BEGIN
        lcodLocationCode :=ptrecEventParams.getValue('loc_code');
      END;
      IF (lcodLocationCode <> '') THEN BEGIN
        ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"WMDM Application"));
        ptrecEventParams.setValue('Document No.', lcodApplication);
        cuActivityLogMgt.logActivity(ptrecEventParams);
      END;
    END;

    PROCEDURE getApplicationOverrides@1000000004(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecAppOverride@1000000003 : Record 23044539;
      lrecOverrideEvent@1000000004 : Record 23044540;
      liEvent@1000000005 : Integer;
      liTrigger@1000000002 : Integer;
    BEGIN
      //<FUNC>
      //  Return application overrides
      //</FUNC>

      pbsOutput.ADDTEXT('<OVERRIDES>');

      // code
      // application override
      IF lrecAppOverride.FINDSET(FALSE) THEN BEGIN
        REPEAT
          pbsOutput.ADDTEXT('<OVERRIDE>');
          pbsOutput.ADDTEXT(STRSUBSTNO('<CODE>%1</CODE>',lrecAppOverride.Code));
          pbsOutput.ADDTEXT(STRSUBSTNO('<APPCODE>%1</APPCODE>',lrecAppOverride."Application Code"));

          pbsOutput.ADDTEXT('<EVENTS>');

          lrecOverrideEvent.SETRANGE("Override Code",lrecAppOverride.Code);

          IF lrecOverrideEvent.FINDSET(FALSE) THEN BEGIN
            REPEAT
              pbsOutput.ADDTEXT('<EVENT>');
              liEvent := lrecOverrideEvent."Event";
              pbsOutput.ADDTEXT(STRSUBSTNO('<EVENTTYPE>%1</EVENTTYPE>',liEvent));

              liTrigger := lrecOverrideEvent."Event Trigger";
              pbsOutput.ADDTEXT(STRSUBSTNO('<EVENTTRIGGER>%1</EVENTTRIGGER>',liTrigger));

              pbsOutput.ADDTEXT(STRSUBSTNO('<EVENTNAME>%1</EVENTNAME>',lrecOverrideEvent."Override Event Name"));
              IF(lrecOverrideEvent."Execute Base Event" = lrecOverrideEvent."Execute Base Event"::Yes) THEN
                pbsOutput.ADDTEXT('<HANDLED>0</HANDLED>')
              ELSE
                pbsOutput.ADDTEXT('<HANDLED>1</HANDLED>');


              pbsOutput.ADDTEXT(STRSUBSTNO('<CUSTOMEVENTNAME>%1</CUSTOMEVENTNAME>',lrecOverrideEvent."Custom Event Name"));

              pbsOutput.ADDTEXT('</EVENT>');
            UNTIL(lrecOverrideEvent.NEXT=0);
          END;
          pbsOutput.ADDTEXT('</EVENTS>');
          pbsOutput.ADDTEXT('</OVERRIDE>');
        UNTIL(lrecAppOverride.NEXT=0);
      END;


      pbsOutput.ADDTEXT('</OVERRIDES>');
    END;

    PROCEDURE GetKnownEvents@1000000006(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecEvent@1000000002 : Record 23044534;
    BEGIN
      //<FUNC>
      // Returns a json array of the defined events
      // Format: [Category::FunctionName,EventID]
      //</FUNC>

      pbsOutput.ADDTEXT('[["Nothing yet","0"]');

      lrecEvent.SETCURRENTKEY(Category,"Function Name");
      lrecEvent.SETRANGE("Publish Event",lrecEvent."Publish Event"::Yes);
      lrecEvent.SETFILTER("Function Name",'<>%1','');
      lrecEvent.SETFILTER(Category,'<>%1','');
      IF lrecEvent.FINDSET(FALSE) THEN BEGIN
        REPEAT
          pbsOutput.ADDTEXT(STRSUBSTNO(',["%1::%2","%3"]',lrecEvent.Category,lrecEvent."Function Name",lrecEvent."Event ID"));
        UNTIL(lrecEvent.NEXT=0);
      END;

      pbsOutput.ADDTEXT(']');
    END;

    PROCEDURE ArchiveApplication@1000000007(precApplication@1000000000 : Record 23044527);
    VAR
      lrecApplicationArchive@1000000002 : Record 23044543;
      liVersionNumber@1000000001 : Integer;
    BEGIN
      //<FUNC>
      //  Description: Archives the application.
      //  SideEffect: Max revisions saved are 100.  Older ones deleted.
      //</FUNC>

      precApplication.CALCFIELDS("Application Blob");
      IF NOT precApplication."Application Blob".HASVALUE THEN
        EXIT;

      liVersionNumber := 1;
      lrecApplicationArchive.SETRANGE(Code, precApplication.Code);
      IF( lrecApplicationArchive.FINDLAST ) THEN
        liVersionNumber := lrecApplicationArchive."Version No." + 1;

      CLEAR(lrecApplicationArchive);
      lrecApplicationArchive.RESET;
      lrecApplicationArchive.INIT;
      lrecApplicationArchive.TRANSFERFIELDS(precApplication);
      lrecApplicationArchive.Code := precApplication.Code;
      lrecApplicationArchive."Archived By" := USERID;
      lrecApplicationArchive."Date Archived" := WORKDATE;
      lrecApplicationArchive."Time Archived" := TIME;
      lrecApplicationArchive."Version No." := liVersionNumber;
      lrecApplicationArchive.COPYLINKS(precApplication);
      lrecApplicationArchive.INSERT;


      lrecApplicationArchive.RESET;
      lrecApplicationArchive.SETRANGE(Code, precApplication.Code);
      IF lrecApplicationArchive.COUNT > 100 THEN BEGIN
        lrecApplicationArchive.FINDFIRST;
        lrecApplicationArchive.DELETE;
      END;
    END;

    PROCEDURE RestoreApplication@1000000009(precApplicationArchive@1000000000 : Record 23044543);
    VAR
      lrecApplication@1000000001 : Record 23044527;
    BEGIN
      //<FUNC>
      //  Description: Restores the application archive
      //</FUNC>

      IF NOT lrecApplication.GET(precApplicationArchive.Code) THEN
        ERROR(cuTranslationMgmt.getTranslatedString('ERR_APPLICATION_MISSING', ''), precApplicationArchive.Code);

      IF NOT CONFIRM(
            STRSUBSTNO(cuTranslationMgmt.getTranslatedString('MSG_CONFIRM_ARCHIVE_RESTORE', ''),
               precApplicationArchive.Code, precApplicationArchive."Version No.")) THEN
        EXIT;

      precApplicationArchive.CALCFIELDS("Application Blob");

      lrecApplication.TRANSFERFIELDS(precApplicationArchive);
      lrecApplication.COPYLINKS(precApplicationArchive);
      lrecApplication.MODIFY;

      MESSAGE(cuTranslationMgmt.getTranslatedString('MSG_APPLICATION_RESTORED', ''), precApplicationArchive.Code);
    END;

    PROCEDURE TranslateApplicationXML@1000000010(psApplicationXML@1000000005 : Text;pcodRegionCode@1000000010 : Code[10]) : Text;
    VAR
      ldnXMLDocument@1000000004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ldnXMLNodeList@1000000003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      ldnXMLNode@1000000002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ldnXMLNodeAttributes@1000000001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      ldnAttributeNode@1000000000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      liNodeIndex@1000000009 : Integer;
      liFoundNodesCount@1000000008 : Integer;
      liAttributeIndex@1000000007 : Integer;
      liFoundAttributeCount@1000000006 : Integer;
    BEGIN
      ldnXMLDocument := ldnXMLDocument.XmlDocument();
      ldnXMLDocument.LoadXml(psApplicationXML);

      ldnXMLNodeList := ldnXMLDocument.SelectNodes('//*');
      liNodeIndex := 0;
      liFoundNodesCount := ldnXMLNodeList.Count;
      IF (liFoundNodesCount > 0) THEN BEGIN
        FOR liNodeIndex := 0 TO liFoundNodesCount - 1 DO BEGIN
          ldnXMLNode := ldnXMLNodeList.ItemOf(liNodeIndex);
          ldnXMLNodeAttributes := ldnXMLNode.Attributes;
          liFoundAttributeCount := ldnXMLNodeAttributes.Count;
          IF (liFoundAttributeCount > 0) THEN BEGIN
            FOR liAttributeIndex := 0 TO liFoundAttributeCount - 1 DO BEGIN
              ldnAttributeNode := ldnXMLNodeAttributes.Item(liAttributeIndex);
              IF ((ldnAttributeNode.Name = 'name') AND (FORMAT(ldnAttributeNode.Value) = 'TEXT')) THEN BEGIN
                  ldnXMLNode.InnerText := cuTranslationMgmt.getTranslatedString(ldnXMLNode.InnerText, pcodRegionCode)
              END;
            END;
          END;
        END;
      END;

      EXIT(ldnXMLDocument.OuterXml);
    END;

    PROCEDURE GetAllApplicationsForCache@100000000(VAR ptrecEventParams@100000001 : TEMPORARY Record 23044511;VAR pbsOutput@100000000 : BigText);
    VAR
      lrecApplication@100000003 : Record 23044527;
      lcuMenuManagement@100000007 : Codeunit 23044503;
      ldnOutput@100000002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lcodUserName@100000004 : Code[50];
      lcodConfigID@100000005 : Code[20];
      lcodRegion@100000006 : Code[10];
    BEGIN
      lcodConfigID := COPYSTR(ptrecEventParams.getValue('config_id'), 1, MAXSTRLEN(lcodConfigID));
      lcodUserName := COPYSTR(ptrecEventParams.getValue('user_name'), 1, MAXSTRLEN(lcodUserName));
      lcodRegion := COPYSTR(ptrecEventParams.getValue('device_culture'), 1, MAXSTRLEN(lcodRegion));

      ldnOutput := ldnOutput.StringBuilder();

      ldnOutput.Append('<APPS>');
      IF lrecApplication.FINDSET(FALSE) THEN BEGIN
        REPEAT
          lrecApplication.CALCFIELDS("Application Blob");
          IF lrecApplication."Application Blob".HASVALUE THEN BEGIN
            ldnOutput.Append('<APP>');
            ldnOutput.Append(STRSUBSTNO('<APPNAME>%1</APPNAME>', lrecApplication.Code));
            ldnOutput.Append('<APPMENUS>');
            lcuMenuManagement.GenerateMenuDataSetForApplication(lrecApplication.Code, lcodRegion, lcodConfigID, lcodUserName, ldnOutput);
            ldnOutput.Append('</APPMENUS>');
            ldnOutput.Append(GetApplicationXML(lrecApplication, TRUE, lcodRegion, TRUE));
            ldnOutput.Append('</APP>');
          END;
        UNTIL (lrecApplication.NEXT() = 0);
      END;

      ldnOutput.Append('</APPS>');
      pbsOutput.ADDTEXT(ldnOutput.ToString());
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE GetApplicationXML@100000002(VAR precApplication@100000000 : Record 23044527;pbTranslate@100000003 : Boolean;pcodRegion@100000004 : Code[10];pbIncludeOverride@100000005 : Boolean) : Text;
    VAR
      ltrecTempBlob@100000002 : TEMPORARY Record 99008535;
      lsApplicationXML@100000001 : Text;
    BEGIN
      precApplication.CALCFIELDS("Application Blob");
      ltrecTempBlob.Blob := precApplication."Application Blob";
      ltrecTempBlob.INSERT;

      lsApplicationXML := cuWHICommon.GetTextFromBlob(ltrecTempBlob);

      IF(pbTranslate) THEN BEGIN
        IF lsApplicationXML = '' THEN
          ERROR(cuTranslationMgmt.getTranslatedString('ERR_APP_NOT_IMPORTED', pcodRegion), precApplication.Code);
        lsApplicationXML := TranslateApplicationXML(lsApplicationXML,pcodRegion);
      END;

      IF pbIncludeOverride THEN BEGIN
        lsApplicationXML += STRSUBSTNO('<OVERRIDE>%1</OVERRIDE>',precApplication."Override Code");
      END;

      EXIT(lsApplicationXML);
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
    }
    END.
  }
}

