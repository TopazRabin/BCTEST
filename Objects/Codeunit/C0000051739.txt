OBJECT Codeunit 51739 Page5775EventSubscriber
{
  OBJECT-PROPERTIES
  {
    Date=07/02/20;
    Time=[ 5:19:13 AM];
    Modified=Yes;
    Version List=NAVEVENT;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [EventSubscriber(Page,5775,OnAfterActionEvent,"Update DC Performance Report")]
    PROCEDURE Pg5775_DCPerformanceGathering_OnafterAction@1000000009(VAR Rec@1000000087 : Record 5769);
    VAR
      tmpItem@1000000055 : Record 27;
      "Location Inventory Period"@1000000048 : Record 14000553;
      InvMagSetup@1000000052 : Record 14000551;
      Location@1000000047 : Record 14;
      ItmLdgEntry@1000000046 : Record 32;
      PurchRcvLine@1000000045 : Record 121;
      TransShptHdr@1000000044 : Record 5744;
      TranShptLine@1000000043 : Record 5745;
      TranRcvLine@1000000042 : Record 5747;
      ShipmentHdr@1000000041 : Record 110;
      ShipmentLine@1000000040 : Record 111;
      SalesInvLine@1000000039 : Record 113;
      RtnRcvLine@1000000038 : Record 6661;
      LocInvPeriod@1000000037 : Record 14000553;
      ShipingAgent@1000000035 : Record 291;
      ShptmentHdr@1000000034 : Record 110;
      Row@1000000033 : Integer;
      EPoRcvValue@1000000032 : Decimal;
      LPoRcvValue@1000000053 : Decimal;
      EPoRcvLines@1000000031 : Decimal;
      LPoRcvLines@1000000054 : Decimal;
      ETrOutValue@1000000030 : Decimal;
      ETrOutLines@1000000029 : Decimal;
      LTrOutValue@1000000062 : Decimal;
      LTrOutLines@1000000061 : Decimal;
      ETrInValue@1000000028 : Decimal;
      ETrInLines@1000000027 : Decimal;
      LTrInValue@1000000064 : Decimal;
      LTrInLines@1000000063 : Decimal;
      EExtShptSales@1000000026 : Decimal;
      EExtShptLines@1000000025 : Decimal;
      EExtShptCost@1000000024 : Decimal;
      LExtShptSales@1000000067 : Decimal;
      LExtShptLines@1000000066 : Decimal;
      LExtShptCost@1000000065 : Decimal;
      EIntShptSales@1000000023 : Decimal;
      EIntShptCost@1000000022 : Decimal;
      EIntShptLines@1000000021 : Decimal;
      LIntShptSales@1000000070 : Decimal;
      LIntShptCost@1000000069 : Decimal;
      LIntShptLines@1000000068 : Decimal;
      EExtRtnSales@1000000020 : Decimal;
      EExtRtnLines@1000000019 : Decimal;
      EExtRtnCost@1000000018 : Decimal;
      LExtRtnSales@1000000073 : Decimal;
      LExtRtnLines@1000000072 : Decimal;
      LExtRtnCost@1000000071 : Decimal;
      EIntRtnSales@1000000017 : Decimal;
      EIntRtnLines@1000000016 : Decimal;
      EIntrtnCost@1000000015 : Decimal;
      LIntRtnSales@1000000076 : Decimal;
      LIntRtnLines@1000000075 : Decimal;
      LIntrtnCost@1000000074 : Decimal;
      EPickupSales@1000000014 : Decimal;
      EPickupLines@1000000013 : Decimal;
      EPickupCost@1000000012 : Decimal;
      LPickupSales@1000000079 : Decimal;
      LPickupLines@1000000078 : Decimal;
      LPickupCost@1000000077 : Decimal;
      ESalesAmt@1000000011 : Decimal;
      ETaxBaseAmt@1000000010 : Decimal;
      ELocalSales@1000000009 : Decimal;
      ELocalCosts@1000000008 : Decimal;
      ELocalLines@1000000007 : Decimal;
      LSalesAmt@1000000084 : Decimal;
      LTaxBaseAmt@1000000083 : Decimal;
      LLocalSales@1000000082 : Decimal;
      LLocalCosts@1000000081 : Decimal;
      LLocalLines@1000000080 : Decimal;
      EIntShps@1000000006 : Decimal;
      EExtShps@1000000005 : Decimal;
      LIntShps@1000000086 : Decimal;
      LExtShps@1000000085 : Decimal;
      ELTLSptCount@1000000004 : Integer;
      EPUSptCount@1000000003 : Integer;
      ELocalSptCount@1000000002 : Integer;
      EUPSSptCount@1000000001 : Integer;
      EFedExSptCount@1000000000 : Integer;
      Text000@1000000036 : TextConst 'ENU=DC Data Gathering';
      LocFilter@1000000049 : Text[250];
      BDate@1000000050 : Date;
      EDate@1000000051 : Date;
      LLTLSptCount@1000000060 : Integer;
      LPUSptCount@1000000059 : Integer;
      LLocalSptCount@1000000058 : Integer;
      LUPSSptCount@1000000057 : Integer;
      LFedExSptCount@1000000056 : Integer;
    BEGIN
      InvMagSetup.GET;
      EDate := InvMagSetup."Cur. Usage End Date";
      IF EDate=0D THEN
        EDate:=CALCDATE('-CM-1D',WORKDATE);
        BDate := CALCDATE('<D1-1M>',EDate);
      BDate:=100116D;
      EDate:=113016D;
      Location.RESET;
      Location.SETRANGE("Shipping Location",TRUE);
      IF Location.FIND('-') THEN REPEAT
        LocFilter += Location.Code + '|';
      UNTIL Location.NEXT = 0;
      LocFilter := COPYSTR(LocFilter,1,STRLEN(LocFilter)-1);
      "Location Inventory Period".RESET;
      "Location Inventory Period".SETCURRENTKEY("Location Code","Starting Date","Ending Date");
      "Location Inventory Period".SETFILTER("Location Code",LocFilter);
      "Location Inventory Period".SETRANGE("Starting Date",BDate,EDate);
      //"Location Inventory Period".SETRANGE("Ending Date",EDate);
      IF "Location Inventory Period".FIND('-') THEN REPEAT
        WITH "Location Inventory Period" DO BEGIN
          CLEAR(EPoRcvValue);
          CLEAR(LPoRcvValue);
          CLEAR(EPoRcvLines);
          CLEAR(LPoRcvLines);
          CLEAR(ETrOutValue);
          CLEAR(ETrOutLines);
          CLEAR(ETrInValue);
          CLEAR(ETrInLines);
          CLEAR(LTrOutValue);
          CLEAR(LTrOutLines);
          CLEAR(LTrInValue);
          CLEAR(LTrInLines);

          CLEAR(EExtShptSales);
          CLEAR(EExtShptLines);
          CLEAR(EExtShptCost);
          CLEAR(EIntShptSales);
          CLEAR(EIntShptCost);
          CLEAR(EIntShptLines);
          CLEAR(EExtRtnSales);
          CLEAR(EExtRtnLines);
          CLEAR(EExtRtnCost);
          CLEAR(EIntRtnSales);
          CLEAR(EIntRtnLines);
          CLEAR(EIntrtnCost);
          CLEAR(EPickupSales);
          CLEAR(EPickupLines);
          CLEAR(EPickupCost);
          CLEAR(ESalesAmt);
          CLEAR(ETaxBaseAmt);
          CLEAR(ELocalSales);
          CLEAR(ELocalCosts);
          CLEAR(ELocalLines);
          CLEAR(EIntShps);
          CLEAR(EExtShps);

          CLEAR(LExtShptSales);
          CLEAR(LExtShptLines);
          CLEAR(LExtShptCost);
          CLEAR(LIntShptSales);
          CLEAR(LIntShptCost);
          CLEAR(LIntShptLines);
          CLEAR(LExtRtnSales);
          CLEAR(LExtRtnLines);
          CLEAR(LExtRtnCost);
          CLEAR(LIntRtnSales);
          CLEAR(LIntRtnLines);
          CLEAR(LIntrtnCost);
          CLEAR(LPickupSales);
          CLEAR(LPickupLines);
          CLEAR(LPickupCost);
          CLEAR(LSalesAmt);
          CLEAR(LTaxBaseAmt);
          CLEAR(LLocalSales);
          CLEAR(LLocalCosts);
          CLEAR(LLocalLines);
          CLEAR(LIntShps);
          CLEAR(LExtShps);


          CLEAR(ELTLSptCount);
          CLEAR(EPUSptCount);
          CLEAR(ELocalSptCount);
          CLEAR(EUPSSptCount);
          CLEAR(EFedExSptCount);
          CLEAR(LLTLSptCount);
          CLEAR(LPUSptCount);
          CLEAR(LLocalSptCount);
          CLEAR(LUPSSptCount);
          CLEAR(LFedExSptCount);

          IF Location.GET("Location Code") AND Location."Distribution Center" THEN BEGIN
            PurchRcvLine.RESET;
            PurchRcvLine.SETCURRENTKEY(Type,"No.","Location Code","Posted at Date",
                                       "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
            PurchRcvLine.SETRANGE(Type,PurchRcvLine.Type::Item);
            PurchRcvLine.SETRANGE("Location Code",Location.Code);
            PurchRcvLine.SETFILTER("Posted at Date",'%1..%2',"Starting Date","Ending Date");
            PurchRcvLine.SETFILTER("Quantity (Base)",'<>%1',0);
            IF PurchRcvLine.FIND('-') THEN REPEAT
             IF tmpItem.GET(PurchRcvLine."No.") THEN;
              IF ItmLdgEntry.GET(PurchRcvLine."Item Rcpt. Entry No.") THEN BEGIN
                ItmLdgEntry.CALCFIELDS("Cost Amount (Actual)");

                  IF (tmpItem."Shortcut Dimension 5 Code"='E') OR (tmpItem."Shortcut Dimension 5 Code"='P') THEN  //EB //<TPZ2558>
                      EPoRcvValue := EPoRcvValue + ItmLdgEntry."Cost Amount (Actual)"
                    ELSE
                      LPoRcvValue := LPoRcvValue + ItmLdgEntry."Cost Amount (Actual)";//END EB
              END;
               IF ((tmpItem."Shortcut Dimension 5 Code"='E') OR (tmpItem."Shortcut Dimension 5 Code"='P'))AND (PurchRcvLine."Quantity (Base)" > 0)  THEN  //EB //<TPZ2558>
                  EPoRcvLines += 1
                 ELSE IF ((tmpItem."Shortcut Dimension 5 Code"='E') OR (tmpItem."Shortcut Dimension 5 Code"='P'))AND (PurchRcvLine."Quantity (Base)" < 0) THEN LPoRcvLines -= 1; //<TPZ2558>
               IF (tmpItem."Shortcut Dimension 5 Code"='L') AND (PurchRcvLine."Quantity (Base)" > 0)  THEN  //EB
                  LPoRcvLines += 1
                 ELSE IF (tmpItem."Shortcut Dimension 5 Code"='L') AND (PurchRcvLine."Quantity (Base)" < 0) THEN LPoRcvLines -= 1;
                //EB END

            UNTIL PurchRcvLine.NEXT = 0;

      //>>Shipper Type Count Electric //EB
            TransShptHdr.RESET;
            TransShptHdr.SETRANGE("Transfer-from Code",Location.Code);
            TransShptHdr.SETFILTER("Shipment Date",'%1..%2',"Starting Date","Ending Date");
            TransShptHdr.SETFILTER("Shortcut Dimension 5 Code",'E');
            IF TransShptHdr.FIND('-') THEN REPEAT
              IF ShipingAgent.GET(TransShptHdr."Shipping Agent Code") THEN BEGIN
                IF (ShipingAgent."Local") THEN ELocalSptCount += 1
                ELSE IF (ShipingAgent.Pickup) THEN EPUSptCount += 1
                ELSE IF (ShipingAgent."Shipper Type" = ShipingAgent."Shipper Type"::UPS) THEN EUPSSptCount += 1
                ELSE IF (ShipingAgent."Shipper Type" = ShipingAgent."Shipper Type"::FEDEX) THEN EFedExSptCount += 1
                ELSE IF (UPPERCASE(ShipingAgent.Code) = 'FEDEXLTL') THEN EFedExSptCount += 1
                ELSE ELTLSptCount += 1;
              END;
            UNTIL TransShptHdr.NEXT = 0;
      //<<
      //>>Shipper Type Count Conduit //<TPZ2558>
            TransShptHdr.RESET;
            TransShptHdr.SETRANGE("Transfer-from Code",Location.Code);
            TransShptHdr.SETFILTER("Shipment Date",'%1..%2',"Starting Date","Ending Date");
            TransShptHdr.SETFILTER("Shortcut Dimension 5 Code",'P');
            IF TransShptHdr.FIND('-') THEN REPEAT
              IF ShipingAgent.GET(TransShptHdr."Shipping Agent Code") THEN BEGIN
                IF (ShipingAgent."Local") THEN ELocalSptCount += 1
                ELSE IF (ShipingAgent.Pickup) THEN EPUSptCount += 1
                ELSE IF (ShipingAgent."Shipper Type" = ShipingAgent."Shipper Type"::UPS) THEN EUPSSptCount += 1
                ELSE IF (ShipingAgent."Shipper Type" = ShipingAgent."Shipper Type"::FEDEX) THEN EFedExSptCount += 1
                ELSE IF (UPPERCASE(ShipingAgent.Code) = 'FEDEXLTL') THEN EFedExSptCount += 1
                ELSE ELTLSptCount += 1;
              END;
            UNTIL TransShptHdr.NEXT = 0;
      //<<//</TPZ2558>
      //>>Shipper Type Count Lighting //EB
            TransShptHdr.RESET;
            TransShptHdr.SETRANGE("Transfer-from Code",Location.Code);
            TransShptHdr.SETFILTER("Shipment Date",'%1..%2',"Starting Date","Ending Date");
            TransShptHdr.SETFILTER("Shortcut Dimension 5 Code",'L');
            IF TransShptHdr.FIND('-') THEN REPEAT
              IF ShipingAgent.GET(TransShptHdr."Shipping Agent Code") THEN BEGIN
                IF (ShipingAgent."Local") THEN LLocalSptCount += 1
                ELSE IF (ShipingAgent.Pickup) THEN LPUSptCount += 1
                ELSE IF (ShipingAgent."Shipper Type" = ShipingAgent."Shipper Type"::UPS) THEN LUPSSptCount += 1
                ELSE IF (ShipingAgent."Shipper Type" = ShipingAgent."Shipper Type"::FEDEX) THEN LFedExSptCount += 1
                ELSE IF (UPPERCASE(ShipingAgent.Code) = 'FEDEXLTL') THEN LFedExSptCount += 1
                ELSE LLTLSptCount += 1;
              END;
            UNTIL TransShptHdr.NEXT = 0;
      //<<



            TranShptLine.RESET;
            TranShptLine.SETCURRENTKEY("Item No.","Transfer-from Code","Shipment Date",
                                       "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
            TranShptLine.SETRANGE("Transfer-from Code",Location.Code);
            TranShptLine.SETFILTER("Shipment Date",'%1..%2',"Starting Date","Ending Date");
            TranShptLine.SETFILTER("Quantity (Base)",'<>%1',0);

            IF TranShptLine.FIND('-') THEN REPEAT
             IF tmpItem.GET(TranShptLine."Item No.") THEN;
              IF (tmpItem."Shortcut Dimension 5 Code"='E') OR (tmpItem."Shortcut Dimension 5 Code"='P') THEN  //EB //<TPZ2558>
                ETrOutLines += 1
               ELSE
                LTrOutLines += 1;
              IF ItmLdgEntry.GET(TranShptLine."Item Shpt. Entry No.") THEN BEGIN
                ItmLdgEntry.CALCFIELDS("Cost Amount (Actual)");
                IF (tmpItem."Shortcut Dimension 5 Code"='E') OR (tmpItem."Shortcut Dimension 5 Code"='P') THEN //<TPZ2558>
                  ETrOutValue := ETrOutValue - ItmLdgEntry."Cost Amount (Actual)"
                  ELSE
                    LTrOutValue := LTrOutValue - ItmLdgEntry."Cost Amount (Actual)";
              END;
            UNTIL TranShptLine.NEXT = 0;
            TranRcvLine.RESET;
            TranRcvLine.SETCURRENTKEY("Item No.","Transfer-to Code","Receipt Date",
                                      "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
            TranRcvLine.SETRANGE("Transfer-to Code",Location.Code);
            TranRcvLine.SETFILTER("Receipt Date",'%1..%2',"Starting Date","Ending Date");
            TranRcvLine.SETFILTER("Quantity (Base)",'<>%1',0);
            IF TranRcvLine.FIND('-') THEN REPEAT
             IF tmpItem.GET(TranRcvLine."Item No.") THEN;
              IF (tmpItem."Shortcut Dimension 5 Code"='E') OR (tmpItem."Shortcut Dimension 5 Code"='P') THEN   //EB //<TPZ2558>
                ETrInLines += 1
                ELSE
                 LTrInLines += 1;
              IF ItmLdgEntry.GET(TranRcvLine."Item Rcpt. Entry No.") THEN BEGIN
                ItmLdgEntry.CALCFIELDS("Cost Amount (Actual)");
                 IF (tmpItem."Shortcut Dimension 5 Code"='E') OR (tmpItem."Shortcut Dimension 5 Code"='P') THEN //<TPZ2558>
                  ETrInValue := ETrInValue - ItmLdgEntry."Cost Amount (Actual)"
                  ELSE
                   LTrInValue := LTrInValue - ItmLdgEntry."Cost Amount (Actual)"//EB
              END;
            UNTIL TranRcvLine.NEXT = 0;

            ShipmentHdr.RESET;
            ShipmentHdr.SETCURRENTKEY("Sell-to Customer No.","Location Code","Shipment Date");
            ShipmentHdr.SETRANGE("Location Code",Location.Code);
            ShipmentHdr.SETFILTER("Shipment Date",'%1..%2',"Starting Date","Ending Date");
            //ShipmentHdr.SETFILTER("Shortcut Dimension 5 Code",'E');//EB
            ShipmentHdr.SETFILTER("Shortcut Dimension 5 Code",'%1|%2','E','P'); //<TPZ2558>
            IF ShipmentHdr.FIND('-') THEN REPEAT
              IF ShipmentHdr."Sell-to Customer No." IN ['30000'] THEN EIntShps += 1
              ELSE EExtShps += 1;
      //>>Shipper Type Count
              IF ShipingAgent.GET(ShipmentHdr."Shipping Agent Code") THEN BEGIN
                IF ShipingAgent."Local" THEN ELocalSptCount += 1
                ELSE IF ShipingAgent.Pickup THEN EPUSptCount += 1
                ELSE IF (ShipingAgent."Shipper Type" = ShipingAgent."Shipper Type"::UPS) THEN EUPSSptCount += 1
                ELSE IF (ShipingAgent."Shipper Type" = ShipingAgent."Shipper Type"::FEDEX) THEN EFedExSptCount += 1
                ELSE IF (UPPERCASE(ShipingAgent.Code) = 'FEDEXLTL') THEN EFedExSptCount += 1
                ELSE ELTLSptCount += 1;
              END ELSE ELTLSptCount += 1;
      //<<
            UNTIL ShipmentHdr.NEXT = 0;

            ShipmentHdr.RESET;
            ShipmentHdr.SETCURRENTKEY("Sell-to Customer No.","Location Code","Shipment Date");
            ShipmentHdr.SETRANGE("Location Code",Location.Code);
            ShipmentHdr.SETFILTER("Shipment Date",'%1..%2',"Starting Date","Ending Date");
            ShipmentHdr.SETFILTER("Shortcut Dimension 5 Code",'L');//EB
            IF ShipmentHdr.FIND('-') THEN REPEAT
              IF ShipmentHdr."Sell-to Customer No." IN ['30000'] THEN LIntShps += 1
              ELSE LExtShps += 1;

      //>>Shipper Type Count
              IF ShipingAgent.GET(ShipmentHdr."Shipping Agent Code") THEN BEGIN
                IF ShipingAgent."Local" THEN LLocalSptCount += 1
                ELSE IF ShipingAgent.Pickup THEN LPUSptCount += 1
                ELSE IF (ShipingAgent."Shipper Type" = ShipingAgent."Shipper Type"::UPS) THEN LUPSSptCount += 1
                ELSE IF (ShipingAgent."Shipper Type" = ShipingAgent."Shipper Type"::FEDEX) THEN LFedExSptCount += 1
                ELSE IF (UPPERCASE(ShipingAgent.Code) = 'FEDEXLTL') THEN LFedExSptCount += 1
                ELSE LLTLSptCount += 1;
              END ELSE LLTLSptCount += 1;
      //<<
            UNTIL ShipmentHdr.NEXT = 0;

            ShipmentLine.RESET;
            ShipmentLine.SETCURRENTKEY(Type,"No.","Location Code","Shipment Date",
                                       "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
            ShipmentLine.SETRANGE(Type,ShipmentLine.Type::Item);
            ShipmentLine.SETRANGE("Location Code",Location.Code);
            ShipmentLine.SETFILTER("Shipment Date",'%1..%2',"Starting Date","Ending Date");
            ShipmentLine.SETFILTER("Quantity (Base)",'<>%1',0);
            ShipmentLine.SETFILTER("Shortcut Dimension 5 Code",'%1|%2','E','P');//EB //<TPZ2558>
            IF ShipmentLine.FIND('-') THEN REPEAT
              IF ShipmentLine."Sell-to Customer No." IN ['30000'] THEN BEGIN
                EIntShptLines += 1;
                IF ItmLdgEntry.GET(ShipmentLine."Item Shpt. Entry No.") THEN BEGIN
                  ItmLdgEntry.CALCFIELDS("Sales Amount (Actual)","Cost Amount (Actual)");
                  EIntShptSales := EIntShptSales + ItmLdgEntry."Sales Amount (Actual)";
                  EIntShptCost := EIntShptCost - ItmLdgEntry."Cost Amount (Actual)";
                END;
              END ELSE BEGIN
                EExtShptLines += 1;
                IF ItmLdgEntry.GET(ShipmentLine."Item Shpt. Entry No.") THEN BEGIN
                  ItmLdgEntry.CALCFIELDS("Sales Amount (Actual)","Cost Amount (Actual)");
                  EExtShptSales := EExtShptSales + ItmLdgEntry."Sales Amount (Actual)";
                  EExtShptCost := EExtShptCost - ItmLdgEntry."Cost Amount (Actual)";
                END;
                IF ShipmentHdr.GET(ShipmentLine."Document No.") AND
                   ShipingAgent.GET(ShipmentHdr."Shipping Agent Code") AND ShipingAgent.Pickup THEN BEGIN
                  EPickupLines += 1;
                  EPickupSales := EPickupSales + ItmLdgEntry."Sales Amount (Actual)";
                  EPickupCost := EPickupCost - ItmLdgEntry."Cost Amount (Actual)";
                END;
              END;
              SalesInvLine.SETRANGE("Document No.",ShipmentLine."Document No.");
              SalesInvLine.SETRANGE("Line No.",ShipmentLine."Line No.");
              IF SalesInvLine.FIND('-') THEN ESalesAmt := ESalesAmt + SalesInvLine.Amount;
              ETaxBaseAmt := ETaxBaseAmt + ShipmentLine."VAT Base Amount";
              IF ShptmentHdr.GET(ShipmentLine."Document No.") AND ShipingAgent.GET(ShptmentHdr."Shipping Agent Code") AND
                 ShipingAgent."Local" THEN BEGIN
                ELocalSales := ELocalSales + ItmLdgEntry."Sales Amount (Actual)";
                ELocalCosts := ELocalCosts - ItmLdgEntry."Cost Amount (Actual)";
                ELocalLines += 1;
              END;
            UNTIL ShipmentLine.NEXT = 0;



            ShipmentLine.RESET;
            ShipmentLine.SETCURRENTKEY(Type,"No.","Location Code","Shipment Date",
                                       "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
            ShipmentLine.SETRANGE(Type,ShipmentLine.Type::Item);
            ShipmentLine.SETRANGE("Location Code",Location.Code);
            ShipmentLine.SETFILTER("Shipment Date",'%1..%2',"Starting Date","Ending Date");
            ShipmentLine.SETFILTER("Quantity (Base)",'<>%1',0);
            ShipmentLine.SETFILTER("Shortcut Dimension 5 Code",'L');
            IF ShipmentLine.FIND('-') THEN REPEAT
              IF ShipmentLine."Sell-to Customer No." IN ['30000'] THEN BEGIN
                LIntShptLines += 1;
                IF ItmLdgEntry.GET(ShipmentLine."Item Shpt. Entry No.") THEN BEGIN
                  ItmLdgEntry.CALCFIELDS("Sales Amount (Actual)","Cost Amount (Actual)");
                  LIntShptSales := LIntShptSales + ItmLdgEntry."Sales Amount (Actual)";
                  LIntShptCost := LIntShptCost - ItmLdgEntry."Cost Amount (Actual)";
                END;
              END ELSE BEGIN
                LExtShptLines += 1;
                IF ItmLdgEntry.GET(ShipmentLine."Item Shpt. Entry No.") THEN BEGIN
                  ItmLdgEntry.CALCFIELDS("Sales Amount (Actual)","Cost Amount (Actual)");
                  LExtShptSales := LExtShptSales + ItmLdgEntry."Sales Amount (Actual)";
                  LExtShptCost := LExtShptCost - ItmLdgEntry."Cost Amount (Actual)";
                END;
                IF ShipmentHdr.GET(ShipmentLine."Document No.") AND
                   ShipingAgent.GET(ShipmentHdr."Shipping Agent Code") AND ShipingAgent.Pickup THEN BEGIN
                  LPickupLines += 1;
                  LPickupSales := LPickupSales + ItmLdgEntry."Sales Amount (Actual)";
                  LPickupCost := LPickupCost - ItmLdgEntry."Cost Amount (Actual)";
                END;
              END;


              SalesInvLine.SETRANGE("Document No.",ShipmentLine."Document No.");
              SalesInvLine.SETRANGE("Line No.",ShipmentLine."Line No.");
              IF SalesInvLine.FIND('-') THEN ESalesAmt := ESalesAmt + SalesInvLine.Amount;
              LTaxBaseAmt := LTaxBaseAmt + ShipmentLine."VAT Base Amount";
              IF ShptmentHdr.GET(ShipmentLine."Document No.") AND ShipingAgent.GET(ShptmentHdr."Shipping Agent Code") AND
                 ShipingAgent."Local" THEN BEGIN
                LLocalSales := LLocalSales + ItmLdgEntry."Sales Amount (Actual)";
                LLocalCosts := LLocalCosts - ItmLdgEntry."Cost Amount (Actual)";
                LLocalLines += 1;
              END;
            UNTIL ShipmentLine.NEXT = 0;



            RtnRcvLine.RESET;
            RtnRcvLine.SETCURRENTKEY(Type,"No.","Location Code","Shipment Date",
                                     "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
            RtnRcvLine.SETRANGE(Type,RtnRcvLine.Type::Item);
            RtnRcvLine.SETRANGE("Location Code",Location.Code);
            RtnRcvLine.SETFILTER("Shipment Date",'%1..%2',"Starting Date","Ending Date");
            RtnRcvLine.SETFILTER("Quantity (Base)",'<>%1',0);
            RtnRcvLine.SETFILTER("Shortcut Dimension 5 Code",'%1|%2','E','P'); //EB//<TPZ2558>
            IF RtnRcvLine.FIND('-') THEN REPEAT
              IF RtnRcvLine."Sell-to Customer No." IN ['30000'] THEN BEGIN
                EIntRtnLines += 1;
                IF ItmLdgEntry.GET(RtnRcvLine."Item Rcpt. Entry No.") THEN BEGIN
                  ItmLdgEntry.CALCFIELDS("Sales Amount (Actual)","Cost Amount (Actual)");
                  EIntRtnSales := EIntRtnSales - ItmLdgEntry."Sales Amount (Actual)";
                  EIntrtnCost := EIntrtnCost + ItmLdgEntry."Cost Amount (Actual)";
                END;
              END ELSE BEGIN
                EExtRtnLines += 1;
                IF ItmLdgEntry.GET(RtnRcvLine."Item Rcpt. Entry No.") THEN BEGIN
                  ItmLdgEntry.CALCFIELDS("Sales Amount (Actual)","Cost Amount (Actual)");
                  EExtRtnSales := EExtRtnSales - ItmLdgEntry."Sales Amount (Actual)";
                  EExtRtnCost := EExtRtnCost + ItmLdgEntry."Cost Amount (Actual)";
                END;
              END;
            UNTIL RtnRcvLine.NEXT = 0;

            RtnRcvLine.RESET;
            RtnRcvLine.SETCURRENTKEY(Type,"No.","Location Code","Shipment Date",
                                     "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
            RtnRcvLine.SETRANGE(Type,RtnRcvLine.Type::Item);
            RtnRcvLine.SETRANGE("Location Code",Location.Code);
            RtnRcvLine.SETFILTER("Shipment Date",'%1..%2',"Starting Date","Ending Date");
            RtnRcvLine.SETFILTER("Quantity (Base)",'<>%1',0);
            RtnRcvLine.SETFILTER("Shortcut Dimension 5 Code",'L'); //EB
            IF RtnRcvLine.FIND('-') THEN REPEAT
              IF RtnRcvLine."Sell-to Customer No." IN ['30000'] THEN BEGIN
                LIntRtnLines += 1;
                IF ItmLdgEntry.GET(RtnRcvLine."Item Rcpt. Entry No.") THEN BEGIN
                  ItmLdgEntry.CALCFIELDS("Sales Amount (Actual)","Cost Amount (Actual)");
                  LIntRtnSales := LIntRtnSales - ItmLdgEntry."Sales Amount (Actual)";
                  LIntrtnCost := LIntrtnCost + ItmLdgEntry."Cost Amount (Actual)";
                END;
              END ELSE BEGIN
                LExtRtnLines += 1;
                IF ItmLdgEntry.GET(RtnRcvLine."Item Rcpt. Entry No.") THEN BEGIN
                  ItmLdgEntry.CALCFIELDS("Sales Amount (Actual)","Cost Amount (Actual)");
                  LExtRtnSales := LExtRtnSales - ItmLdgEntry."Sales Amount (Actual)";
                  LExtRtnCost := LExtRtnCost + ItmLdgEntry."Cost Amount (Actual)";
                END;
              END;
            UNTIL RtnRcvLine.NEXT = 0;


            LocInvPeriod.RESET;
            LocInvPeriod.SETRANGE("Location Code","Location Code");
            LocInvPeriod.SETRANGE("Starting Date","Starting Date");
            LocInvPeriod.SETRANGE("Ending Date","Ending Date");
            IF LocInvPeriod.FIND('-') THEN BEGIN
              LocInvPeriod."EPurch. Rcv. Value" := EPoRcvValue;
              LocInvPeriod."EPurch. Rcv. Lines" := EPoRcvLines;
              LocInvPeriod."EValue Transfer Out" :=ETrOutValue;
              LocInvPeriod."ETransfer Out Lines" := ETrOutLines;
              LocInvPeriod."EValue Transfer In" := ETrInValue;
              LocInvPeriod."ETransfer In Lines" := ETrInLines;
              LocInvPeriod."EWhse. Shpt. Sales (Ext.)" := EExtShptSales;
              LocInvPeriod."EWhse. Shpt. Lines (Ext.)" := EExtShptLines;
              LocInvPeriod."EWhse. Shpt. Cost (Ext.)" := EExtShptCost;
              LocInvPeriod."EWhse. Shpt. Sales (Int.)" := EIntShptSales;
              LocInvPeriod."EWhse. Shpt. Lines (Int.)" := EIntShptLines;
              LocInvPeriod."EWhse. Shpt. Cost (Int.)" := EIntShptCost;
              LocInvPeriod."EWhse. Rtn. Sales (Ext.)" := EExtRtnSales;
              LocInvPeriod."EWhse. Rtn. Lines (Ext.)" := EExtRtnLines;
              LocInvPeriod."EWhse. Rtn. Cost (Ext.)" := EExtRtnCost;
              LocInvPeriod."EWhse. Rtn. Sales (Int.)" := EIntRtnSales;
              LocInvPeriod."EWhse. Rtn. Lines (Int.)" := EIntRtnLines;
              LocInvPeriod."EWhse. Rtn. Cost (Int.)" := EIntrtnCost;
              LocInvPeriod."EWhse. Shpt. Sales (Pickup)" := EPickupSales;
              LocInvPeriod."EWhse. Shpt. Lines (Pickup)" := EPickupLines;
              LocInvPeriod."EWhse. Shpt. Cost (Pickup)" := EPickupCost;
              LocInvPeriod."ESales Amount" := ESalesAmt;
              LocInvPeriod."EShptment Tax Base Amount" := ETaxBaseAmt;
              LocInvPeriod."ELocal Shipment Sales" := ELocalSales;
              LocInvPeriod."ELoca Shipment Costs" := ELocalCosts;
              LocInvPeriod."ELocal Shipment Lines" := ELocalLines;
              LocInvPeriod."ESales Shipments (Int.)" := EIntShps;
              LocInvPeriod."ESales Shipments (Ext.)" := EExtShps;
      //>>Shipper Type Count
              LocInvPeriod."ELTL Shipment Count" := ELTLSptCount;
              LocInvPeriod."ELocal Shipment Count" := ELocalSptCount;
              LocInvPeriod."EPU Shipment Count" := EPUSptCount;
              LocInvPeriod."EUPS Shipment Count" := EUPSSptCount;
              LocInvPeriod."EFedEx Shipment Count" := EFedExSptCount;
      //<<
      //EB LIGHTING
              LocInvPeriod."LPurch. Rcv. Value" := LPoRcvValue;
              LocInvPeriod."LPurch. Rcv. Lines" := LPoRcvLines;
              LocInvPeriod."LValue Transfer Out" :=LTrOutValue;
              LocInvPeriod."LTransfer Out Lines" :=LTrOutLines;
              LocInvPeriod."LValue Transfer In" := LTrInValue;
              LocInvPeriod."LTransfer In Lines" := LTrInLines;
              LocInvPeriod."LWhse. Shpt. Sales (Ext.)" :=LExtShptSales;
              LocInvPeriod."LWhse. Shpt. Lines (Ext.)" :=LExtShptLines;
              LocInvPeriod."LWhse. Shpt. Cost (Ext.)" :=LExtShptCost;
              LocInvPeriod."LWhse. Shpt. Sales (Int.)" :=LIntShptSales;
              LocInvPeriod."LWhse. Shpt. Lines (Int.)" :=LIntShptLines;
              LocInvPeriod."LWhse. Shpt. Cost (Int.)" :=LIntShptCost;
              LocInvPeriod."LWhse. Rtn. Sales (Ext.)" :=LExtRtnSales;
              LocInvPeriod."LWhse. Rtn. Lines (Ext.)" :=LExtRtnLines;
              LocInvPeriod."LWhse. Rtn. Cost (Ext.)" :=LExtRtnCost;
              LocInvPeriod."LWhse. Rtn. Sales (Int.)" :=LIntRtnSales;
              LocInvPeriod."LWhse. Rtn. Lines (Int.)" :=LIntRtnLines;
              LocInvPeriod."LWhse. Rtn. Cost (Int.)" :=LIntrtnCost;
              LocInvPeriod."LWhse. Shpt. Sales (Pickup)" :=LPickupSales;
              LocInvPeriod."LWhse. Shpt. Lines (Pickup)" :=LPickupLines;
              LocInvPeriod."LWhse. Shpt. Cost (Pickup)" :=LPickupCost;
              LocInvPeriod."LSales Amount" :=LSalesAmt;
              LocInvPeriod."LShptment Tax Base Amount" :=LTaxBaseAmt;
              LocInvPeriod."LLocal Shipment Sales" :=LLocalSales;
              LocInvPeriod."LLoca Shipment Costs" :=LLocalCosts;
              LocInvPeriod."LLocal Shipment Lines" :=LLocalLines;
              LocInvPeriod."LSales Shipments (Int.)" :=LIntShps;
              LocInvPeriod."LSales Shipments (Ext.)" :=LExtShps;
      //>>Shipper Type Count
              LocInvPeriod."LLTL Shipment Count" :=LLTLSptCount;
              LocInvPeriod."LLocal Shipment Count" :=LLocalSptCount;
              LocInvPeriod."LPU Shipment Count" :=LPUSptCount;
              LocInvPeriod."LUPS Shipment Count" :=LUPSSptCount;
              LocInvPeriod."LFedEx Shipment Count" :=LFedExSptCount;


              //StringtoLog(CreateMsg(LocInvPeriod."Location Code",FORMAT(LocInvPeriod."Starting Date"),'',9));
              LocInvPeriod.MODIFY;
            END;
          END;
        END;
      UNTIL "Location Inventory Period".NEXT = 0;
    END;

    BEGIN
    {
      PSHUKLA
    }
    END.
  }
}

