OBJECT Codeunit 14000845 Label Format Value
{
  OBJECT-PROPERTIES
  {
    Date=06/28/17;
    Time=12:00:00 PM;
    Version List=SE0.53.15;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      OriginalFormatNumber@1240030000 : Integer;
      OriginalFormatString@1240030001 : Text[1000];
      ExtraFormatString@1240030002 : Text[1000];
      DecimalFactor@1240030003 : Decimal;
      Text001@1001 : TextConst 'ENU=Wrong Format %1.';

    PROCEDURE FormatText@111111(TextValue@1240030000 : Text[1000];FormatLength@1240030001 : Integer;FormatNumber@1240030002 : Integer;FormatString@1240030003 : Text[1000]) ResultString : Text[1000];
    BEGIN
      CorrectFormatValues(FormatNumber,FormatString);

      CASE TRUE OF
        FormatNumber <> 0:
          ResultString := FORMAT(TextValue,FormatLength,FormatNumber);
        FormatString <> '':
          ResultString := FORMAT(TextValue,FormatLength,FormatString);
        FormatLength <> 0:
          ResultString := FORMAT(TextValue,FormatLength);
        ELSE
          ResultString := FORMAT(TextValue);
      END;

      ChangeCase(ResultString);
    END;

    PROCEDURE FormatCode@111112(CodeValue@1240030000 : Code[250];FormatLength@1240030001 : Integer;FormatNumber@1240030002 : Integer;FormatString@1240030003 : Text[1000]) ResultString : Text[1000];
    BEGIN
      CorrectFormatValues(FormatNumber,FormatString);

      CASE TRUE OF
        FormatNumber <> 0:
          ResultString := FORMAT(CodeValue,FormatLength,FormatNumber);
        FormatString <> '':
          ResultString := FORMAT(CodeValue,FormatLength,FormatString);
        FormatLength <> 0:
          ResultString := FORMAT(CodeValue,FormatLength);
        ELSE
          ResultString := FORMAT(CodeValue);
      END;

      ChangeCase(ResultString);
    END;

    PROCEDURE FormatDate@111113(DateValue@1240030000 : Date;FormatLength@1240030001 : Integer;FormatNumber@1240030002 : Integer;FormatString@1240030003 : Text[1000]) ResultString : Text[1000];
    BEGIN
      CorrectFormatValues(FormatNumber,FormatString);

      CASE TRUE OF
        FormatNumber <> 0:
          ResultString := FORMAT(DateValue,FormatLength,FormatNumber);
        FormatString <> '':
          ResultString := FORMAT(DateValue,FormatLength,FormatString);
        FormatLength <> 0:
          ResultString := FORMAT(DateValue,FormatLength);
        ELSE
          ResultString := FORMAT(DateValue);
      END;

      ChangeCase(ResultString);
    END;

    PROCEDURE FormatTime@111114(TimeValue@1240030000 : Time;FormatLength@1240030001 : Integer;FormatNumber@1240030002 : Integer;FormatString@1240030003 : Text[1000]) ResultString : Text[1000];
    BEGIN
      CorrectFormatValues(FormatNumber,FormatString);

      CASE TRUE OF
        FormatNumber <> 0:
          ResultString := FORMAT(TimeValue,FormatLength,FormatNumber);
        FormatString <> '':
          ResultString := FORMAT(TimeValue,FormatLength,FormatString);
        FormatLength <> 0:
          ResultString := FORMAT(TimeValue,FormatLength);
        ELSE
          ResultString := FORMAT(TimeValue);
      END;

      ChangeCase(ResultString);
    END;

    PROCEDURE FormatDateFormula@111115(DateFormulaValue@1240030000 : DateFormula;FormatLength@1240030001 : Integer;FormatNumber@1240030002 : Integer;FormatString@1240030003 : Text[1000]) ResultString : Text[1000];
    BEGIN
      CorrectFormatValues(FormatNumber,FormatString);

      CASE TRUE OF
        FormatNumber <> 0:
          ResultString := FORMAT(DateFormulaValue,FormatLength,FormatNumber);
        FormatString <> '':
          ResultString := FORMAT(DateFormulaValue,FormatLength,FormatString);
        FormatLength <> 0:
          ResultString := FORMAT(DateFormulaValue,FormatLength);
        ELSE
          ResultString := FORMAT(DateFormulaValue);
      END;

      ChangeCase(ResultString);
    END;

    PROCEDURE FormatDecimal@111116(DecimalValue@1240030000 : Decimal;FormatLength@1240030001 : Integer;FormatNumber@1240030002 : Integer;FormatString@1240030003 : Text[1000]) ResultString : Text[1000];
    BEGIN
      CorrectFormatValues(FormatNumber,FormatString);
      IF DecimalFactor <> 1 THEN
        DecimalValue := DecimalValue * DecimalFactor;

      CASE TRUE OF
        FormatNumber <> 0:
          ResultString := FORMAT(DecimalValue,FormatLength,FormatNumber);
        FormatString <> '':
          ResultString := FORMAT(DecimalValue,FormatLength,FormatString);
        FormatLength <> 0:
          ResultString := FORMAT(DecimalValue,FormatLength);
        ELSE
          ResultString := FORMAT(DecimalValue);
      END;

      ChangeCase(ResultString);
    END;

    PROCEDURE FormatInteger@111117(IntegerValue@1240030000 : Integer;FormatLength@1240030001 : Integer;FormatNumber@1240030002 : Integer;FormatString@1240030003 : Text[1000]) ResultString : Text[1000];
    BEGIN
      CorrectFormatValues(FormatNumber,FormatString);

      CASE TRUE OF
        FormatNumber <> 0:
          ResultString := FORMAT(IntegerValue,FormatLength,FormatNumber);
        FormatString <> '':
          ResultString := FORMAT(IntegerValue,FormatLength,FormatString);
        FormatLength <> 0:
          ResultString := FORMAT(IntegerValue,FormatLength);
        ELSE
          ResultString := FORMAT(IntegerValue);
      END;

      ChangeCase(ResultString);
    END;

    PROCEDURE FormatBoolean@111118(BooleanValue@1240030000 : Boolean;FormatLength@1240030001 : Integer;FormatNumber@1240030002 : Integer;FormatString@1240030003 : Text[1000]) ResultString : Text[1000];
    BEGIN
      CorrectFormatValues(FormatNumber,FormatString);

      CASE TRUE OF
        FormatNumber <> 0:
          ResultString := FORMAT(BooleanValue,FormatLength,FormatNumber);
        FormatString <> '':
          ResultString := FORMAT(BooleanValue,FormatLength,FormatString);
        FormatLength <> 0:
          ResultString := FORMAT(BooleanValue,FormatLength);
        ELSE
          ResultString := FORMAT(BooleanValue);
      END;

      ChangeCase(ResultString);
    END;

    PROCEDURE FormatOption@111119(OptionTextValue@1240030000 : Text[1000];FormatLength@1240030001 : Integer;FormatNumber@1240030002 : Integer;FormatString@1240030003 : Text[1000]) ResultString : Text[1000];
    BEGIN
      CorrectFormatValues(FormatNumber,FormatString);

      CASE TRUE OF
        FormatNumber <> 0:
          ResultString := FORMAT(OptionTextValue,FormatLength,FormatNumber);
        FormatString <> '':
          ResultString := FORMAT(OptionTextValue,FormatLength,FormatString);
        FormatLength <> 0:
          ResultString := FORMAT(OptionTextValue,FormatLength);
        ELSE
          ResultString := FORMAT(OptionTextValue);
      END;

      ChangeCase(ResultString);
    END;

    LOCAL PROCEDURE CorrectFormatValues@1240030000(VAR FormatNumber@1240030001 : Integer;VAR FormatString@1240030000 : Text[1000]);
    VAR
      Pos@1240030002 : Integer;
      DecimalPoint@1240030003 : Text[30];
    BEGIN
      OriginalFormatNumber := FormatNumber;
      OriginalFormatString := FormatString;
      ExtraFormatString := '';
      DecimalFactor := 1;

      IF FormatNumber >= 100 THEN BEGIN
        FormatNumber := FormatNumber - 100;
        Pos := STRPOS(FormatString,':');
        IF Pos IN [0,1] THEN
          ERROR(Text001,FormatString);
        ExtraFormatString := COPYSTR(FormatString,1,Pos - 1);

        IF COPYSTR(ExtraFormatString,1,1) = '*' THEN BEGIN
          DecimalPoint := COPYSTR(FORMAT(1.1),2,1);
          ExtraFormatString := CONVERTSTR(ExtraFormatString,',.',DecimalPoint + DecimalPoint);
          IF NOT EVALUATE(DecimalFactor,COPYSTR(ExtraFormatString,2)) THEN
            ERROR(Text001,FormatString);
        END;

        IF Pos < STRLEN(FormatString) THEN
          FormatString := COPYSTR(FormatString,Pos + 1)
        ELSE
          FormatString := '';
      END;
    END;

    LOCAL PROCEDURE ChangeCase@1240030004(VAR TempText@1240030000 : Text[1000]);
    BEGIN
      CASE TRUE OF
        STRPOS(UPPERCASE(ExtraFormatString),'UPPER') > 0:
          TempText := UPPERCASE(TempText);
        STRPOS(UPPERCASE(ExtraFormatString),'LOWER') > 0:
          TempText := LOWERCASE(TempText);
      END;
    END;

    BEGIN
    END.
  }
}

