OBJECT Codeunit 5471 Graph Mgt - Customer
{
  OBJECT-PROPERTIES
  {
    Date=11/22/17;
    Time=12:00:00 PM;
    Version List=NAVW111.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ProcessComplexTypes@8(VAR Customer@1000 : Record 18;PaymentTermsJSON@1003 : Text;ShipmentMethodJSON@1005 : Text;PaymentMethodJSON@1001 : Text;PostalAddressJSON@1002 : Text);
    BEGIN
      UpdatePaymentTerms(PaymentTermsJSON,Customer);
      UpdateShipmentMethod(ShipmentMethodJSON,Customer);
      UpdatePaymentMethod(PaymentMethodJSON,Customer);
      UpdatePostalAddress(PostalAddressJSON,Customer);
    END;

    PROCEDURE PaymentTermsToJSON@1(PaymentTermsCode@1000 : Code[10]) JSON : Text;
    VAR
      PaymentTerms@1001 : Record 3;
      GraphMgtComplexTypes@1002 : Codeunit 5468;
    BEGIN
      IF PaymentTerms.GET(PaymentTermsCode) THEN
        GraphMgtComplexTypes.GetCodeAndDescriptionJSON(PaymentTerms.Code,PaymentTerms.GetDescriptionInCurrentLanguage,JSON);
    END;

    PROCEDURE ShipmentMethodToJSON@2(ShipmentMethodCode@1000 : Code[10]) JSON : Text;
    VAR
      ShipmentMethod@1001 : Record 10;
      GraphMgtComplexTypes@1002 : Codeunit 5468;
    BEGIN
      IF ShipmentMethod.GET(ShipmentMethodCode) THEN
        GraphMgtComplexTypes.GetCodeAndDescriptionJSON(ShipmentMethod.Code,ShipmentMethod.Description,JSON);
    END;

    PROCEDURE PaymentMethodToJSON@9(PaymentMethodCode@1000 : Code[10]) JSON : Text;
    VAR
      PaymentMethod@1001 : Record 289;
      GraphMgtComplexTypes@1002 : Codeunit 5468;
    BEGIN
      IF PaymentMethod.GET(PaymentMethodCode) THEN
        GraphMgtComplexTypes.GetCodeAndDescriptionJSON(PaymentMethod.Code,PaymentMethod.GetDescriptionInCurrentLanguage,JSON);
    END;

    PROCEDURE PostalAddressToJSON@5(Customer@1000 : Record 18) JSON : Text;
    VAR
      GraphMgtComplexTypes@1001 : Codeunit 5468;
    BEGIN
      WITH Customer DO
        GraphMgtComplexTypes.GetPostalAddressJSON(Address,"Address 2",City,County,"Country/Region Code","Post Code",JSON);
    END;

    PROCEDURE UpdateIntegrationRecords@11(OnlyCustomersWithoutId@1000 : Boolean);
    VAR
      DummyCustomer@1002 : Record 18;
      GraphMgtGeneralTools@1001 : Codeunit 5465;
      CustomerRecordRef@1019 : RecordRef;
    BEGIN
      CustomerRecordRef.OPEN(DATABASE::Customer);
      GraphMgtGeneralTools.UpdateIntegrationRecords(CustomerRecordRef,DummyCustomer.FIELDNO(Id),OnlyCustomersWithoutId);
    END;

    PROCEDURE UpdatePaymentTerms@13(PaymentTermsJSON@1000 : Text;VAR Customer@1001 : Record 18);
    VAR
      GraphMgtComplexTypes@1006 : Codeunit 5468;
      PreviousCode@1004 : Code[10];
      PreviousJSONString@1005 : Text;
      NewCode@1007 : Code[10];
      NewDescription@1008 : Text[50];
    BEGIN
      IF PaymentTermsJSON = '' THEN
        EXIT;

      PreviousCode := Customer."Payment Terms Code";
      PreviousJSONString := PaymentTermsToJSON(PreviousCode);

      IF PaymentTermsJSON <> PreviousJSONString THEN BEGIN
        GraphMgtComplexTypes.GetCodeAndDescriptionFromJSON(PaymentTermsJSON,NewCode,NewDescription);
        Customer.VALIDATE("Payment Terms Code",NewCode);
      END;
    END;

    PROCEDURE UpdateShipmentMethod@14(ShipmentMethodJSON@1000 : Text;VAR Customer@1001 : Record 18);
    VAR
      GraphMgtComplexTypes@1006 : Codeunit 5468;
      PreviousCode@1002 : Code[10];
      PreviousJSONString@1003 : Text;
      NewCode@1004 : Code[10];
      NewDescription@1005 : Text[50];
    BEGIN
      IF ShipmentMethodJSON = '' THEN
        EXIT;

      PreviousCode := Customer."Shipment Method Code";
      PreviousJSONString := ShipmentMethodToJSON(PreviousCode);

      IF ShipmentMethodJSON <> PreviousJSONString THEN BEGIN
        GraphMgtComplexTypes.GetCodeAndDescriptionFromJSON(ShipmentMethodJSON,NewCode,NewDescription);
        Customer.VALIDATE("Shipment Method Code",NewCode);
      END;
    END;

    PROCEDURE UpdatePaymentMethod@15(PaymentMethodJSON@1000 : Text;VAR Customer@1001 : Record 18);
    VAR
      GraphMgtComplexTypes@1006 : Codeunit 5468;
      PreviousCode@1005 : Code[10];
      PreviousJSONString@1004 : Text;
      NewCode@1003 : Code[10];
      NewDescription@1002 : Text[50];
    BEGIN
      IF PaymentMethodJSON = '' THEN
        EXIT;

      PreviousCode := Customer."Payment Method Code";
      PreviousJSONString := PaymentMethodToJSON(PreviousCode);

      IF PaymentMethodJSON <> PreviousJSONString THEN BEGIN
        GraphMgtComplexTypes.GetCodeAndDescriptionFromJSON(PaymentMethodJSON,NewCode,NewDescription);
        Customer.VALIDATE("Payment Method Code",NewCode);
      END;
    END;

    LOCAL PROCEDURE UpdatePostalAddress@4(PostalAddressJSON@1000 : Text;VAR Customer@1001 : Record 18);
    VAR
      GraphMgtComplexTypes@1002 : Codeunit 5468;
      RecRef@1004 : RecordRef;
    BEGIN
      IF PostalAddressJSON = '' THEN
        EXIT;

      WITH Customer DO BEGIN
        RecRef.GETTABLE(Customer);
        GraphMgtComplexTypes.ApplyPostalAddressFromJSON(PostalAddressJSON,RecRef,
          FIELDNO(Address),FIELDNO("Address 2"),FIELDNO(City),FIELDNO(County),FIELDNO("Country/Region Code"),FIELDNO("Post Code"));
        RecRef.SETTABLE(Customer);
      END;
    END;

    [EventSubscriber(Codeunit,5150,OnUpdateReferencedIdField)]
    LOCAL PROCEDURE HandleUpdateReferencedIdFieldOnItem@19(VAR RecRef@1000 : RecordRef;NewId@1001 : GUID;VAR Handled@1002 : Boolean);
    VAR
      DummyCustomer@1004 : Record 18;
      GraphMgtGeneralTools@1006 : Codeunit 5465;
    BEGIN
      GraphMgtGeneralTools.HandleUpdateReferencedIdFieldOnItem(RecRef,NewId,Handled,DATABASE::Customer,DummyCustomer.FIELDNO(Id));
    END;

    [EventSubscriber(Codeunit,5150,OnGetPredefinedIdValue)]
    LOCAL PROCEDURE HandleGetPredefinedIdValue@21(VAR Id@1000 : GUID;VAR RecRef@1001 : RecordRef;VAR Handled@1002 : Boolean);
    VAR
      DummyCustomer@1004 : Record 18;
      GraphMgtGeneralTools@1007 : Codeunit 5465;
    BEGIN
      GraphMgtGeneralTools.HandleGetPredefinedIdValue(Id,RecRef,Handled,DATABASE::Customer,DummyCustomer.FIELDNO(Id));
    END;

    [EventSubscriber(Codeunit,5465,ApiSetup)]
    LOCAL PROCEDURE HandleApiSetup@16();
    BEGIN
      UpdateIntegrationRecords(FALSE);
      UpdateIds;
    END;

    PROCEDURE UpdateIds@6();
    VAR
      Customer@1000 : Record 18;
    BEGIN
      WITH Customer DO BEGIN
        IF FINDSET THEN
          REPEAT
            UpdateCurrencyId;
            UpdateTaxAreaId;
            UpdatePaymentMethodId;
            UpdatePaymentTermsId;
            UpdateShipmentMethodId;
            MODIFY(FALSE);
          UNTIL NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

