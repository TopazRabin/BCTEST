OBJECT Codeunit 14000381 E.D.I. Load EDI Out Fields
{
  OBJECT-PROPERTIES
  {
    Date=05/26/21;
    Time=[ 6:40:20 AM];
    Modified=Yes;
    Version List=SE0.61,TPZEDI;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PaymentTerms@1240020000 : Record 3;
      ShipmentMethod@1240020001 : Record 10;
      SalespersonPurchaser@1240020081 : Record 13;
      Location@1240020002 : Record 14;
      VendorLedgerEntry@1240020003 : Record 25;
      Item@1240020004 : Record 27;
      SalesHeader@1240020005 : Record 36;
      SalesLine@1240020006 : Record 37;
      PurchaseHeader@1240020007 : Record 38;
      PurchaseLine@1240020008 : Record 39;
      PurchCommentLine@1240020009 : Record 43;
      SalesCommentLine@1240020010 : Record 44;
      CompanyInformation@1240020011 : Record 79;
      ItemJournalLine@1240020012 : Record 83;
      SalesShipmentHeader@1240020013 : Record 110;
      SalesShipmentLine@1240020014 : Record 111;
      SalesInvoiceHeader@1240020015 : Record 112;
      SalesInvoiceLine@1240020016 : TEMPORARY Record 113;
      SalesCrMemoHeader@1240020017 : Record 114;
      SalesCrMemoLine@1240020018 : Record 115;
      PurchInvHeader@1240020019 : Record 122;
      PurchCrMemoHdr@1240020020 : Record 124;
      ShipToAddress@1240020021 : Record 222;
      VATEntry@1240020022 : Record 254;
      CheckLedgerEntry@1240020023 : Record 272;
      ShippingAgent@1240020024 : Record 291;
      TrackingSpecification@1240020025 : Record 336;
      ReservationEntry@1240020026 : Record 337;
      ItemUnitOfMeasure@1240020027 : Record 5404;
      ItemCrossReference@1240020028 : Record 5717;
      TransferHeader@1240020029 : Record 5740;
      TransferLine@1240020030 : Record 5741;
      TransferShipmentHeader@1240020031 : Record 5744;
      TransferShipmentLine@1240020032 : Record 5745;
      InventoryCommentLine@1240020033 : Record 5748;
      ReturnShipmentHeader@1240020034 : Record 6650;
      ReturnShipmentLine@1240020035 : Record 6651;
      ReturnReceiptHeader@1240020036 : Record 6660;
      ReturnReceiptLine@1240020037 : Record 6661;
      WarehouseShipmentHeader@1240020038 : Record 7320;
      WarehouseShipmentLine@1240020039 : Record 7321;
      ShipToLocation@1240020040 : Record 14;
      ShipFromLocation@1240020041 : Record 14;
      SellToCustomer@1240020042 : Record 18;
      BillToCustomer@1240020043 : Record 18;
      ShipforAddress@1240020044 : Record 222;
      VATEntryDetail@1240020045 : Record 254;
      BuyFromVendor@1240020046 : Record 23;
      PayToVendor@1240020047 : Record 23;
      PostedReceive@1240020048 : Record 14000603;
      Package@1240020049 : Record 14000701;
      PackageLine@1240020050 : Record 14000702;
      PostedPackage@1240020051 : Record 14000704;
      PostedPackageLine@1240020052 : Record 14000705;
      EShipAgentService@1240020053 : Record 14000708;
      LTLFreightNMFCCode@1240020054 : Record 14000730;
      BillOfLading@1240020055 : Record 14000822;
      BillOfLadingLine@1240020056 : Record 14000823;
      BillOfLadingSummaryLine@1240020057 : Record 14000825;
      BillOfLadingInfoLine@1240020058 : Record 14000827;
      PackageSummaryLine@1240020059 : Record 14000964;
      EDITemplate@1240020060 : Record 14002350;
      EDIDocument@1240020061 : Record 14002353;
      EDISegment@1240020062 : Record 14002354;
      EDIReceiveDocumentHdr@1240020063 : Record 14002358;
      EDIReceiveDocumentField@1240020064 : Record 14002359;
      EDITradePartner@1240020065 : Record 14002360;
      EDICustCrossReference@1240020066 : Record 14002362;
      EDITradePartnerItem@1240020067 : Record 14002364;
      EDITradePartnerUOM@1240020068 : Record 14002365;
      EDIReceiveDocHdrInfo@1240020069 : Record 14002371;
      EDIReceiveDocLineInfo@1240020070 : Record 14002372;
      EDIDiscount@1240020071 : Record 14002382;
      EDILineDiscount@1240020072 : Record 14002383;
      EDIOrderStatusHdr@1240020073 : Record 14002400;
      EDIOrderStatusLine@1240020074 : Record 14002401;
      RoutingReq@1240020075 : Record 14002402;
      RoutingRequestLine@1240020076 : Record 14002403;
      InventoryAdviceHdr@1240020077 : Record 14002413;
      InventoryAdviceLine@1240020078 : Record 14002414;
      PurchasePaymentAdvice@1240020079 : Record 14050801;
      PurchasePaymentAdviceLine@1240020080 : Record 14050802;
      EDISetup@1240020082 : Record 14002367;
      Customer@1240020083 : Record 18;
      Vendor@1240020084 : Record 23;
      EDISendDocHdr@1240020092 : Record 14002369;
      SalesShipmentHdrTmp@1240020141 : TEMPORARY Record 110;
      SelltoCountry@1240020090 : Record 9;
      ShiptoCountry@1240020094 : Record 9;
      BilltoCountry@1240020115 : Record 9;
      ShipfromCountry@1240020132 : Record 9;
      BuyfromCountry@1240020145 : Record 9;
      PaytoCountry@1240020146 : Record 9;
      CountryRegion@1240020144 : Record 9;
      NetWeight@1240020089 : Decimal;
      GrossWeight@1240020088 : Decimal;
      TotalUnits@1240020087 : Decimal;
      LineNumber@1240020086 : Integer;
      TotalSegments@1240020085 : Integer;
      TotalUnitsBase@1240020091 : Decimal;
      GrossAmt@1240020095 : Decimal;
      PalletWeight@1240020096 : Decimal;
      FreightAmt@1240020097 : Decimal;
      TotalBaseUnits@1240020099 : Decimal;
      TotalInvDiscount@1240020101 : Decimal;
      DropShipAmt@1240020102 : Decimal;
      TotalFieldsGeneric1@1240020103 : Decimal;
      TotalFieldsGeneric2@1240020104 : Decimal;
      TotalFieldsGeneric3@1240020105 : Decimal;
      TotalFieldsGeneric4@1240020106 : Decimal;
      TotalInvLineDiscount@1240020107 : Decimal;
      EDIInvDiscAmt@1240020108 : Decimal;
      EDIInvLineDiscAmt@1240020109 : Decimal;
      EDIQty@1240020110 : Decimal;
      ProcessingLines@1240020111 : Boolean;
      TotalEDIQty@1240020112 : Decimal;
      TransactionSetCount@1240020100 : Integer;
      HLCount@1240020114 : Integer;
      HLCountArray@1240020113 : ARRAY [5] OF Integer;
      PackingVolume@1240020117 : Decimal;
      PackingQty@1240020118 : Decimal;
      QtyToShip@1240020119 : Decimal;
      POItemQty@1240020093 : Decimal;
      BOLItemQty@1240020116 : Decimal;
      POItemQtyBase@1240020120 : Decimal;
      BOLItemQtyBase@1240020121 : Decimal;
      TotalBOLTares@1240020122 : Decimal;
      TotalPOtares@1240020123 : Decimal;
      TotalBOLPackages@1240020124 : Decimal;
      TotalPOPackages@1240020125 : Decimal;
      TotalLINSegments@1240020126 : Decimal;
      PackageQtyArray@1240020127 : ARRAY [500] OF Decimal;
      PackageUnderItem@1240020128 : Integer;
      GenericCounter@1240020129 : Integer;
      StdPackQtyArray@1240020130 : ARRAY [500] OF Decimal;
      TotalPackagesWithItem@1240020131 : Decimal;
      CurrCumulativeQty@1240020133 : Decimal;
      TotalPackagesWithPackages@1240020134 : Decimal;
      PalletCountWithItem@1240020135 : Decimal;
      OrderShippedComplete@1240020136 : Boolean;
      ItemShippedComplete@1240020137 : Boolean;
      TotalNetWeight@1240020138 : Decimal;
      TotalGrossWeight@1240020139 : Decimal;
      TotalPalletWeight@1240020140 : Decimal;
      TotalNoOfPackages@1240020142 : Integer;
      CounterIncremented@1240020143 : Boolean;
      DF@1240020098 : DateFormula;
      InvActualPriceMult@1000000002 : Decimal;
      InvTotalAmount@1000000001 : Decimal;
      InvFreightAmt@1000000000 : Decimal;
      PKgTracking@1170000000 : Text;

    PROCEDURE PurchaseOrderSendEDIOut@16(EDIElement@1240020000 : Record 14002355;VAR OutFldArray@1240020008 : ARRAY [100] OF Text[250];VAR DecimalVariable@1240020003 : Decimal;VAR IntegerVariable@1240020004 : Integer;VAR DateVariable@1240020007 : Date;VAR BooleanVariable@1240020001 : Boolean;VAR TimeVariable@1240020002 : Time;VAR DateTimeVariable@1240020006 : DateTime;i@1240020009 : Integer);
    VAR
      GLSetup@1240020010 : Record 98;
      PaymentTerms2@1240020027 : Record 3;
      EDISendDocField2@1240020005 : Record 14002370;
      NetDays@1240020021 : Integer;
      DiscDays@1240020020 : Integer;
      DiscAmt@1240020019 : Decimal;
      DiscountedAmt@1240020018 : Decimal;
      DiscPercent@1240020011 : Decimal;
      OrderTax@1240020026 : Decimal;
      OrderTaxPercent@1240020022 : Decimal;
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;

      EDISetup.GET;
      PurchaseHeader.CALCFIELDS(Amount,"Amount Including VAT");

      IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN BEGIN
        CASE EDIElement."Field Name" OF
          'ISA Control Number':
           OutFldArray[i] := EDITemplate."Export ISA Control No.";
          'IEA Control Number':
            OutFldArray[i] := EDITemplate."Export ISA Control No.";
          'GS Control Number':
            OutFldArray[i] := EDITemplate."Export GS Control No.";
          'GE Control Number':
            OutFldArray[i] := EDITemplate."Export GS Control No.";
          'ST Control Number':
            OutFldArray[i] := EDITemplate."Export ST Control No.";
          'SE Control Number':
            OutFldArray[i] := EDITemplate."Export ST Control No.";

          'Currency Code':
            IF PurchaseHeader."Currency Code" <> '' THEN
              OutFldArray[i] := PurchaseHeader."Currency Code"
            ELSE BEGIN
              GLSetup.GET;
              OutFldArray[i] := GLSetup."LCY Code";
            END;

          'Net Ship Wgt.':
             DecimalVariable := NetWeight;

          'Gross Ship Wgt.':
             DecimalVariable := GrossWeight;

          'Net Unit Price':
            IF PurchaseLine.Quantity > 0 THEN
              DecimalVariable := PurchaseLine.Amount / PurchaseLine.Quantity
            ELSE
              DecimalVariable := 0;

          'Pmt. Net Days':
            BEGIN
              IF PurchaseHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(PurchaseHeader."Payment Terms Code");
                NetDays := (CALCDATE(PaymentTerms."Due Date Calculation",TODAY) - TODAY);
              END ELSE
                NetDays := 0;
              IntegerVariable := NetDays;
            END;

          'Pmt. Disc. Days':
            BEGIN
              IF PurchaseHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(PurchaseHeader."Payment Terms Code");
                DiscDays := (CALCDATE(PaymentTerms."Discount Date Calculation",TODAY) - TODAY);
              END ELSE
                DiscDays := 0;
              IntegerVariable := DiscDays;
            END;

          'Pmt. Disc. Amt.':
            BEGIN
              IF PurchaseHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(PurchaseHeader."Payment Terms Code");
                DiscAmt := ROUND(
                  (PurchaseHeader."Amount Including VAT" * PaymentTerms."Discount %") / 100);
              END ELSE
                DiscAmt := 0;
              DecimalVariable := DiscAmt;
            END;

          'Pmt. Discounted Amt.':
            BEGIN
              DiscAmt := 0;
              IF PurchaseHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(PurchaseHeader."Payment Terms Code");
                DiscAmt := ROUND(
                  (PurchaseHeader."Amount Including VAT" * PaymentTerms."Discount %") / 100);
                DiscountedAmt := PurchaseHeader."Amount Including VAT" - DiscAmt;
              END ELSE
                DiscountedAmt := 0;
              DecimalVariable := DiscountedAmt;
            END;

          'Pmt. Disc. Percent':
            BEGIN
              IF PurchaseHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(PurchaseHeader."Payment Terms Code");
                DiscPercent := PaymentTerms."Discount %";
              END ELSE
                DiscPercent := 0;
              DecimalVariable := DiscPercent;
            END;

          'Total Units':
            DecimalVariable := TotalUnits;
          'Line Number':
            BEGIN
              IF EDIDocument."Base Line Count on Segment" <> '' THEN BEGIN
                LineNumber := 0;
                EDISendDocField2.RESET;
                EDISendDocField2.SETRANGE("No.",EDISendDocHdr."No.");
                EDISendDocField2.SETRANGE(Segment,EDIDocument."Base Line Count on Segment");
                EDISendDocField2.SETRANGE("New Segment",TRUE);
                IF EDISendDocField2.FIND('-') THEN
                  REPEAT
                    LineNumber := LineNumber + 1;
                  UNTIL EDISendDocField2.NEXT = 0;
                IntegerVariable := LineNumber;
              END ELSE
                IntegerVariable := LineNumber;
            END;

          'Total Segments':
            IntegerVariable := TotalSegments;

          'My Partner ID':
            OutFldArray[i] := EDITemplate."My Trading Partner No.";

          'Partner ID':                 // Trading Partner ID.
            OutFldArray[i] := EDITradePartner."No.";

          'Today':
            DateVariable := TODAY;

          'Transaction Status':         // Status of the EDI transaction (test or production)
            IF EDIDocument.Status = EDIDocument.Status::Test THEN
              OutFldArray[i] := 'Test'
            ELSE
              OutFldArray[i] := 'Production';

          'Transaction Version':        // EDI transaction version
            OutFldArray[i] := EDIDocument.Version;

          'Order Tax':
            BEGIN
              OrderTax := 0;
              OrderTax := PurchaseHeader."Amount Including VAT" - PurchaseHeader.Amount;
              IF PurchaseHeader.Amount <> 0 THEN
                OrderTaxPercent := (OrderTax / PurchaseHeader.Amount) * 100;
              DecimalVariable := OrderTax;
            END;

          'Order Tax Percent':
            BEGIN
              OrderTax := 0;
              OrderTaxPercent := 0;
              OrderTax := PurchaseHeader."Amount Including VAT" - PurchaseHeader.Amount;
              IF PurchaseHeader.Amount <> 0 THEN
                OrderTaxPercent := (OrderTax / PurchaseHeader.Amount) * 100;
              IF EDIElement."Round Value" THEN
                DecimalVariable := OrderTaxPercent
              ELSE
                DecimalVariable := RoundValue(OrderTaxPercent,EDIElement);
            END;
          //<TPZ2848>
          'Purchase Order Type Code':
            IF Customer.GET(PurchaseHeader."Sell-to Customer No.") THEN
              OutFldArray[i]:='DS'
             ELSE
              OutFldArray[i]:='NE';
          //</TPZ848>

        END;
      END;
    END;

    PROCEDURE ASNSendEDIOut@1240020001(EDIElement@1240020019 : Record 14002355;VAR OutFldArray@1240020018 : ARRAY [100] OF Text[250];VAR DecimalVariable@1240020017 : Decimal;VAR IntegerVariable@1240020016 : Integer;VAR DateVariable@1240020015 : Date;VAR BooleanVariable@1240020014 : Boolean;VAR TimeVariable@1240020013 : Time;VAR DateTimeVariable@1240020012 : DateTime;i@1240020011 : Integer;VAR GenericCounter@1240020002 : Integer);
    VAR
      SalesLine2@1240020001 : Record 37;
      SalesInvoiceLine2@1240020032 : Record 113;
      GeneralCrossReference@1240020000 : Record 14000377;
      EDIElement2@1240020045 : Record 14002355;
      EDIElement3@1240020046 : Record 14002355;
      EDITotalFields@1240020043 : Record 14002361;
      PaymentTerms2@1240020051 : Record 3;
      EDIReceiveDocLineInfo@1240020066 : Record 14002372;
      EDILoadDBFields@1240020067 : Codeunit 14002392;
      InvGrossAmt@1240020033 : Decimal;
      InvDiscAmount@1240020034 : Decimal;
      InvFreightAmt@1240020042 : Decimal;
      CPSCount@1240020049 : Integer;
      DockCode@1240020048 : Code[30];
      PrevDockCode@1240020047 : Code[30];
      PmtNetDays@1240020052 : Integer;
      PmtDiscDays@1240020053 : Integer;
      PmtDiscAmt@1240020054 : Decimal;
      PmtDiscPercent@1240020055 : Decimal;
      PmtDiscountedAmt@1240020056 : Decimal;
      TotalInvDiscount@1240020057 : Decimal;
      InvoiceTax@1240020058 : Decimal;
      InvoiceTaxPercent@1240020059 : Decimal;
      OrderBackOrderAllowed@1240020060 : Boolean;
      ItemBackOrderAllowed@1240020061 : Boolean;
      RecRef@1240020065 : RecordRef;
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;

      EDISetup.GET;
      BillOfLading.CALCFIELDS("Posted Weight");
      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT",Amount);

      IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN BEGIN
        CASE EDIElement."Field Name" OF
          'ISA Control Number':
            OutFldArray[i] := EDITemplate."Export ISA Control No.";
          'IEA Control Number':
            OutFldArray[i] := EDITemplate."Export ISA Control No.";
          'GS Control Number':
            OutFldArray[i] := EDITemplate."Export GS Control No.";
          'GE Control Number':
            OutFldArray[i] := EDITemplate."Export GS Control No.";
          'ST Control Number':
            OutFldArray[i] := EDITemplate."Export ST Control No.";
          'SE Control Number':
            OutFldArray[i] := EDITemplate."Export ST Control No.";
          'Total Segments':
            IntegerVariable := TotalSegments;

          'My Partner ID':
            OutFldArray[i] := EDITemplate."My Trading Partner No.";

          'Partner ID':                 // Trading Partner ID.
            OutFldArray[i] := EDITradePartner."No.";

          'Time':
            BEGIN;
              IF EDITemplate."File Format" = EDITemplate."File Format"::XML THEN BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 5;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0>:<Minutes,2>');
              END ELSE BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 4;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0><Minutes,2>');
              END;
            END;

          'Today':
            DateVariable := TODAY;

          'PO Item Qty.':
            DecimalVariable := POItemQty;

          'BOL Item Qty.':
            DecimalVariable := BOLItemQty;

          'PO Item Qty. (Base)':
            DecimalVariable := POItemQtyBase;

          'BOL Item Qty. (Base)':
            DecimalVariable := BOLItemQtyBase;

          'Total BOL Tares':
            DecimalVariable := TotalBOLTares;

          'Total PO Tares':
            DecimalVariable := TotalPOtares;

          'Total BOL Packages':
            DecimalVariable := TotalBOLPackages;

          'Total PO Packages':
            DecimalVariable := TotalPOPackages;

          'Total LIN Segments':
            DecimalVariable := TotalLINSegments;

          'STD Pack Containers':
            DecimalVariable := PackageQtyArray[PackageUnderItem];

          'STD Pack Qty. Per Container':
            DecimalVariable := StdPackQtyArray[PackageUnderItem];

          'Shipping Payment Type':
            CASE BillOfLading."Shipping Payment Type" OF
              BillOfLading."Shipping Payment Type"::Prepaid:
                OutFldArray[i] := 'PP';
              BillOfLading."Shipping Payment Type"::"Freight Collect":
                OutFldArray[i] := 'CC';
            END;

          'BOL Gross Weight':
            BEGIN
              UpdateWeight;
              DecimalVariable := TotalGrossWeight;
            END;

          'BOL Net Weight':
            BEGIN
              UpdateWeight;
              DecimalVariable := TotalNetWeight;
            END;

          'Total Packages With Item':
            BEGIN
              UpdatePackagesWithItem;
              DecimalVariable := TotalPackagesWithItem;
            END;

          'Cumulative Quantity':
            BEGIN
              CumulativeTotal;
              DecimalVariable := CurrCumulativeQty;
            END;

          'Total Packages With Packages':
            BEGIN
              CountPackagesWithPackages;
              DecimalVariable := TotalPackagesWithPackages;
            END;

          'Total Pallets With Item':
            BEGIN
              CountPalletsWithThisItem;
              DecimalVariable := PalletCountWithItem;
            END;

          'Gross Invoice':
            BEGIN
              InvGrossAmt := 0;
              SalesInvoiceLine2.RESET;
              SalesInvoiceLine2.SETRANGE("Document No.",SalesInvoiceHeader."No.");
              SalesInvoiceLine2.SETFILTER(Quantity,'<>%1',0);
              SalesInvoiceLine2.SETRANGE(Type,SalesInvoiceLine2.Type::Item);
              IF SalesInvoiceLine2.FIND('-') THEN
                REPEAT
                  InvGrossAmt :=
                    InvGrossAmt + (SalesInvoiceLine2."Unit Price" * SalesInvoiceLine2.Quantity);
                UNTIL SalesInvoiceLine2.NEXT = 0;
              DecimalVariable := ROUND(InvGrossAmt,0.01);
            END;

          'Total Freight Amt.':
            BEGIN
              InvFreightAmt := 0;
              SalesInvoiceLine2.RESET;
              SalesInvoiceLine2.SETRANGE("Document No.",SalesInvoiceHeader."No.");
              SalesInvoiceLine2.SETFILTER(Quantity,'<>%1',0);
              IF SalesInvoiceLine2.FIND('-') THEN
                REPEAT
                  IF EDITotalFields.GET(
                    'Total Freight Amt.',SalesInvoiceLine2.Type,SalesInvoiceLine2."No.")
                  THEN
                    InvFreightAmt := InvFreightAmt + SalesInvoiceLine2.Amount;
                UNTIL SalesInvoiceLine2.NEXT = 0;
              DecimalVariable := InvFreightAmt;
            END;

          'Inv. Amt. Before Inv. Disc.':
            BEGIN
              InvDiscAmount := 0;
              SalesInvoiceLine2.RESET;
              SalesInvoiceLine2.SETRANGE("Document No.",SalesInvoiceHeader."No.");
              SalesInvoiceLine2.SETFILTER(Quantity,'<>%1',0);
              SalesInvoiceLine2.SETRANGE(Type,SalesInvoiceLine2.Type::Item);
              IF SalesInvoiceLine2.FIND('-') THEN
                REPEAT
                  InvDiscAmount := InvDiscAmount + SalesInvoiceLine2."Inv. Discount Amount";
                UNTIL SalesInvoiceLine2.NEXT = 0;
              DecimalVariable := SalesInvoiceHeader.Amount + InvDiscAmount;
            END;

          'Pmt. Net Days':
            BEGIN
              IF SalesInvoiceHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesInvoiceHeader."Payment Terms Code");
                PmtNetDays := (CALCDATE(PaymentTerms."Due Date Calculation",TODAY) - TODAY);
              END ELSE
                PmtNetDays := 0;
              IntegerVariable := PmtNetDays;
            END;

          'Pmt. Disc. Days':
            BEGIN
              IF SalesInvoiceHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesInvoiceHeader."Payment Terms Code");
                PmtDiscDays := (CALCDATE(PaymentTerms."Discount Date Calculation",TODAY) - TODAY);
              END ELSE
                PmtDiscDays := 0;
              IntegerVariable := PmtDiscDays;
            END;

          'Pmt. Disc. Amt.':
            BEGIN
              IF SalesInvoiceHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesInvoiceHeader."Payment Terms Code");
                PmtDiscAmt := ROUND(
                  (SalesInvoiceHeader."Amount Including VAT" * PaymentTerms."Discount %") / 100);
              END ELSE
                PmtDiscAmt := 0;
              DecimalVariable := PmtDiscAmt;
            END;

          'Pmt. Discounted Amt.':
            BEGIN
              PmtDiscAmt := 0;
              IF SalesInvoiceHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesInvoiceHeader."Payment Terms Code");
                PmtDiscAmt := ROUND(
                  (SalesInvoiceHeader."Amount Including VAT" * PaymentTerms."Discount %") / 100);
                PmtDiscountedAmt := SalesInvoiceHeader."Amount Including VAT" - PmtDiscAmt;
              END ELSE
                PmtDiscPercent := 0;
              DecimalVariable := PmtDiscountedAmt;
            END;

          'Pmt. Disc. Percent':
            BEGIN
              IF SalesInvoiceHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesInvoiceHeader."Payment Terms Code");
                PmtDiscPercent := PaymentTerms."Discount %";
                PmtNetDays := (CALCDATE(PaymentTerms."Due Date Calculation",TODAY) - TODAY);
              END ELSE
                PmtDiscPercent := 0;
              DecimalVariable := PmtDiscPercent;
            END;

          'Total Inv. Discount':
            BEGIN
              TotalInvDiscount := 0;
              SalesInvoiceLine2.RESET;
              SalesInvoiceLine2.SETRANGE("Document No.",SalesInvoiceHeader."No.");
              SalesInvoiceLine2.SETFILTER(Quantity,'<>%1',0);
              SalesInvoiceLine2.SETRANGE(Type,SalesInvoiceLine2.Type::Item);
              IF SalesInvoiceLine2.FIND('-') THEN
                REPEAT
                  TotalInvDiscount := TotalInvDiscount + SalesInvoiceLine2."Inv. Discount Amount";
                UNTIL SalesInvoiceLine2.NEXT = 0;
              DecimalVariable := TotalInvDiscount;
            END;

          'Invoice Tax':
            BEGIN
              InvoiceTax := 0;
              InvoiceTax := SalesInvoiceHeader."Amount Including VAT" - SalesInvoiceHeader.Amount;
              DecimalVariable := InvoiceTax;
            END;

          'Invoice Tax Percent':
            BEGIN
              InvoiceTax := 0;
              InvoiceTaxPercent := 0;
              InvoiceTax := SalesInvoiceHeader."Amount Including VAT" - SalesInvoiceHeader.Amount;
              IF SalesInvoiceHeader.Amount > 0 THEN
                InvoiceTaxPercent := (InvoiceTax / SalesInvoiceHeader.Amount) * 100;
              IF EDIElement."Round Value" THEN
                DecimalVariable := InvoiceTaxPercent
              ELSE
                DecimalVariable := RoundValue(InvoiceTaxPercent,EDIElement);
            END;

          'Ship Agent Code (GCR)':
            BEGIN
              OutFldArray[i] := '';
              GeneralCrossReference.RESET;
              GeneralCrossReference.SETCURRENTKEY("Trade Partner","Cross Reference");
              GeneralCrossReference.SETRANGE("Cross Reference",1);
              GeneralCrossReference.SETRANGE("Trade Partner",EDITradePartner."No.");
              GeneralCrossReference.SETRANGE("NAV Value",BillOfLading."Shipping Agent Code");
              GeneralCrossReference.SETRANGE("Generic ID",FALSE);
              IF GeneralCrossReference.FIND('-') THEN
                OutFldArray[i] := GeneralCrossReference."EDI Value"
              ELSE BEGIN
                GeneralCrossReference.RESET;
                GeneralCrossReference.SETCURRENTKEY("Trade Partner","Cross Reference");
                GeneralCrossReference.SETRANGE("Cross Reference",1);
                GeneralCrossReference.SETRANGE("Trade Partner",'');
                GeneralCrossReference.SETRANGE("NAV Value",BillOfLading."Shipping Agent Code");
                GeneralCrossReference.SETRANGE("Generic ID",FALSE);
                IF GeneralCrossReference.FIND('-') THEN
                  OutFldArray[i] := GeneralCrossReference."EDI Value"
              END;
            END;

          'Ship Agent Service (GCR)':
            BEGIN
              OutFldArray[i] := '';
              GeneralCrossReference.RESET;
              GeneralCrossReference.SETCURRENTKEY("Trade Partner","Cross Reference");
              GeneralCrossReference.SETRANGE("Cross Reference",1);
              GeneralCrossReference.SETRANGE("Trade Partner",EDITradePartner."No.");
              GeneralCrossReference.SETRANGE("NAV Value 2",BillOfLading."Shipping Agent Service");
              GeneralCrossReference.SETRANGE("Generic ID",FALSE);
              IF GeneralCrossReference.FIND('-') THEN
                OutFldArray[i] := GeneralCrossReference."EDI Value 2"
              ELSE BEGIN
                GeneralCrossReference.RESET;
                GeneralCrossReference.SETCURRENTKEY("Trade Partner","Cross Reference");
                GeneralCrossReference.SETRANGE("Cross Reference",1);
                GeneralCrossReference.SETRANGE("Trade Partner",'');
                GeneralCrossReference.SETRANGE("NAV Value 2",BillOfLading."Shipping Agent Service");
                GeneralCrossReference.SETRANGE("Generic ID",FALSE);
                IF GeneralCrossReference.FIND('-') THEN
                  OutFldArray[i] := GeneralCrossReference."EDI Value 2"
              END;
            END;

          'HL Order Status':
            BEGIN
              OrderBackOrderAllowed := FALSE;
              OrderBackOrderAllowed := StatusOfOrder(SalesShipmentHeader);
              IF OrderShippedComplete THEN
                OutFldArray[i] := EDIDocument."Order Shipped Complete Code"
              ELSE BEGIN
                IF EDIDocument."Order Backorder Status Code" <> '' THEN BEGIN
                  IF OrderBackOrderAllowed THEN
                    OutFldArray[i] := EDIDocument."Order Backorder Status Code";
                END ELSE
                  OutFldArray[i] := EDIDocument."Order Shipped Status Code";
              END;
            END;

          'HL Item Status':
            IF SalesShipmentLine."EDI Original Qty." <> 0 THEN
              BEGIN
                ItemBackOrderAllowed := FALSE;
                ItemBackOrderAllowed := StatusOfItem;
                IF ItemShippedComplete THEN
                  OutFldArray[i] := EDIDocument."Item Shipped Complete Code"
                ELSE BEGIN
                  IF EDIDocument."Item Backorder Status Code" <> '' THEN BEGIN
                    IF ItemBackOrderAllowed THEN
                      OutFldArray[i] := EDIDocument."Item Backorder Status Code";
                   END ELSE
                    OutFldArray[i] := EDIDocument."Item Shipped Status Code";
                END;
              END;

          'Outstanding Quantity':
            BEGIN
              SalesLine2.RESET;
              SalesLine2.SETRANGE("Document Type",SalesLine2."Document Type"::Order);
              SalesLine2.SETRANGE("Document No.",SalesShipmentHeader."Order No.");
              SalesLine2.SETRANGE("No.",SalesShipmentLine."No.");
              IF SalesLine2.FIND('-') THEN
                DecimalVariable := SalesLine2."Outstanding Quantity";
            END;

          'Document No.':
            OutFldArray[i] := SalesShipmentHeader."No." + '-' + FORMAT(EDISendDocHdr.Version);

          'CPS HL Count by Dock Code':
            BEGIN
              EDIReceiveDocLineInfo.RESET;
              EDIReceiveDocLineInfo.SETCURRENTKEY("Document No.","Line No.");
              EDIReceiveDocLineInfo.SETRANGE("Document No.",SalesShipmentHeader."Order No.");
              EDIReceiveDocLineInfo.SETRANGE("Internal Doc. No.",SalesShipmentHeader."EDI Internal Doc. No.");
              EDIReceiveDocLineInfo.SETRANGE("Line No.",SalesShipmentLine."Line No.");
              IF NOT EDIReceiveDocLineInfo.FIND('+') THEN
                CLEAR(EDIReceiveDocLineInfo);

              EDIElement2.SETRANGE("Trade Partner No.",EDITradePartner."No.");
              EDIElement2.SETRANGE("Navision Document",EDIDocument."Navision Document");
              EDIElement2.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
              EDIElement2.SETRANGE(Version,EDIDocument.Version);
              EDIElement2.SETRANGE(Segment,'LOC');
              EDIElement2.SETRANGE(Type,EDIElement.Type::Export);
              EDIElement2.SETFILTER(Element,'%1|%2','01','3227');
              IF EDIElement2.FIND('-') THEN BEGIN
                EDIElement3.SETRANGE("Trade Partner No.",EDIElement2."Trade Partner No.");
                EDIElement3.SETRANGE("Navision Document",EDIElement2."Navision Document");
                EDIElement3.SETRANGE("EDI Document No.",EDIElement2."EDI Document No.");
                EDIElement3.SETRANGE(Version,EDIElement2.Version);
                EDIElement3.SETRANGE(Segment,EDIElement2.Segment);
                EDIElement3.SETRANGE(Type,EDIElement2.Type::Export);
                EDIElement3.SETFILTER(Element,'%1|%2','02','1131');
                IF EDIElement3.FIND('-') THEN BEGIN
                  IF EDIElement3.Origin = EDIElement3.Origin::Navision THEN
                    IF EDIElement3."NAV Table No." = 14002372 THEN BEGIN
                      RecRef.GETTABLE(EDIReceiveDocLineInfo);
                      EDILoadDBFields.LoadDBFields(
                        EDIElement,OutFldArray,DecimalVariable,IntegerVariable,DateVariable,
                        BooleanVariable,TimeVariable,DateTimeVariable,i,RecRef);
                      DockCode := OutFldArray[i];
                     IF PrevDockCode <> DockCode THEN
                       CPSCount := CPSCount + 1;
                     PrevDockCode := DockCode;
                     IntegerVariable := CPSCount;
                   END;
                END;
              END;
            END;

          'Generic Counter':
            BEGIN
              IF GenericCounter = 0 THEN
                GenericCounter := 1
              ELSE
                GenericCounter := GenericCounter + 1;
             IntegerVariable := GenericCounter;

            END;

          'Generic Counter Total':
            IntegerVariable := GenericCounter;

          'Multiple Parcel Package Shipment':
            BEGIN
              IF PostedPackage."External Tracking No." <> '' THEN BEGIN
                IF TotalNoOfPackages > 1 THEN
                  BooleanVariable := TRUE
                ELSE
                  BooleanVariable := FALSE;
              END;
            END;

          'Duplicate Item HL Item Count':
            IntegerVariable := BillOfLadingSummaryLine."Line No." - 1;

           'Time HHMMSSDD':
             BEGIN;
               IF EDITemplate."File Format" = EDITemplate."File Format"::XML THEN BEGIN
                 IF EDIElement."Minimum Length" = 0 THEN
                   EDIElement."Minimum Length" := 11;
                 OutFldArray[i] :=
                   CONVERTSTR(FORMAT(TIME,EDIElement."Minimum Length"
                   ,'<Hours24,2><Filler Character,0>:<Minutes,2>:<Seconds,2>:<Second,2>'),' ','0');
               END ELSE BEGIN
                 IF EDIElement."Minimum Length" = 0 THEN
                   EDIElement."Minimum Length" := 8;
                 OutFldArray[i] :=
                   CONVERTSTR(FORMAT(TIME,EDIElement."Minimum Length"
                     ,'<Hours24,2><Filler Character,0><Minutes,2><Seconds,2><Second,2>'),' ','0');
               END;
             END;

          'Total Dropship Amt.':
            BEGIN
              DropShipAmt := 0;
              SalesInvoiceLine2.RESET;
              SalesInvoiceLine2.SETRANGE("Document No.",SalesInvoiceHeader."No.");
              SalesInvoiceLine2.SETFILTER(Quantity,'<>%1',0);
              IF SalesInvoiceLine2.FIND('-') THEN
                REPEAT
                  IF EDITotalFields.GET(
                    'Total Dropship Amt.',SalesInvoiceLine2.Type,SalesInvoiceLine2."No.")
                  THEN
                    DropShipAmt := DropShipAmt + SalesInvoiceLine2.Amount;
                UNTIL SalesInvoiceLine2.NEXT = 0;
              DecimalVariable := DropShipAmt;
            END;

          'Total Fields Generic 1':
            BEGIN
              TotalFieldsGeneric1 := 0;
              SalesInvoiceLine2.RESET;
              SalesInvoiceLine2.SETRANGE("Document No.",SalesInvoiceHeader."No.");
              SalesInvoiceLine2.SETFILTER(Quantity,'<>%1',0);
              IF SalesInvoiceLine2.FIND('-') THEN
                REPEAT
                  IF EDITotalFields.GET(
                    'Total Fields Generic 1',SalesInvoiceLine2.Type,SalesInvoiceLine2."No.")
                  THEN
                    TotalFieldsGeneric1 := TotalFieldsGeneric1 + SalesInvoiceLine2.Amount;
                UNTIL SalesInvoiceLine2.NEXT = 0;
              DecimalVariable := TotalFieldsGeneric1;
            END;

          'Total Fields Generic 2':
            BEGIN
              TotalFieldsGeneric2 := 0;
              SalesInvoiceLine2.RESET;
              SalesInvoiceLine2.SETRANGE("Document No.",SalesInvoiceHeader."No.");
              SalesInvoiceLine2.SETFILTER(Quantity,'<>%1',0);
              IF SalesInvoiceLine2.FIND('-') THEN
                REPEAT
                  IF EDITotalFields.GET(
                    'Total Fields Generic 2',SalesInvoiceLine2.Type,SalesInvoiceLine2."No.")
                  THEN
                    TotalFieldsGeneric2 := TotalFieldsGeneric2 + SalesInvoiceLine2.Amount;
                UNTIL SalesInvoiceLine2.NEXT = 0;
              DecimalVariable := TotalFieldsGeneric2;
            END;

          'Total Fields Generic 3':
            BEGIN
              TotalFieldsGeneric3 := 0;
              SalesInvoiceLine2.RESET;
              SalesInvoiceLine2.SETRANGE("Document No.",SalesInvoiceHeader."No.");
              SalesInvoiceLine2.SETFILTER(Quantity,'<>%1',0);
              IF SalesInvoiceLine2.FIND('-') THEN
                REPEAT
                  IF EDITotalFields.GET(
                    'Total Fields Generic 3',SalesInvoiceLine2.Type,SalesInvoiceLine2."No.")
                  THEN
                    TotalFieldsGeneric3 := TotalFieldsGeneric3 + SalesInvoiceLine2.Amount;
                UNTIL SalesInvoiceLine2.NEXT = 0;
              DecimalVariable := TotalFieldsGeneric3;
            END;

          'Total Fields Generic 4':
            BEGIN
              TotalFieldsGeneric4 := 0;
              SalesInvoiceLine2.RESET;
              SalesInvoiceLine2.SETRANGE("Document No.",SalesInvoiceHeader."No.");
              SalesInvoiceLine2.SETFILTER(Quantity,'<>%1',0);
              IF SalesInvoiceLine2.FIND('-') THEN
                REPEAT
                  IF EDITotalFields.GET(
                    'Total Fields Generic 4',SalesInvoiceLine2.Type,SalesInvoiceLine2."No.")
                  THEN
                    TotalFieldsGeneric4 := TotalFieldsGeneric4 + SalesInvoiceLine2.Amount;
                UNTIL SalesInvoiceLine2.NEXT = 0;
              DecimalVariable := TotalFieldsGeneric4;
            END;

           'Time HHMMSS':
             BEGIN
               IF EDITemplate."File Format" = EDITemplate."File Format"::XML THEN BEGIN
                 IF EDIElement."Minimum Length" = 0 THEN
                   EDIElement."Minimum Length" := 8;
                 OutFldArray[i] :=
                   FORMAT(
                     TIME,EDIElement.Length,'<Hours24,2><filler character,0>:<Minutes,2>:<Seconds,2>');
               END ELSE BEGIN
                 IF EDIElement."Minimum Length" = 0 THEN
                   EDIElement."Minimum Length" := 6;
                 OutFldArray[i] :=
                   FORMAT(
                     TIME,EDIElement.Length,'<Hours24,2><filler character,0><Minutes,2><Seconds,2>');
               END;
             END;
        END;
      END;
    END;

    PROCEDURE SalesOrderSendEDIOut@1240020003(EDIElement@1240020008 : Record 14002355;VAR OutFldArray@1240020007 : ARRAY [100] OF Text[250];VAR DecimalVariable@1240020006 : Decimal;VAR IntegerVariable@1240020005 : Integer;VAR DateVariable@1240020004 : Date;VAR BooleanVariable@1240020003 : Boolean;VAR TimeVariable@1240020002 : Time;VAR DateTimeVariable@1240020001 : DateTime;i@1240020000 : Integer);
    VAR
      PaymentTerms2@1240020009 : Record 3;
      EDISendDocField2@1240020015 : Record 14002370;
      ItemLedgerEntry@1240020016 : Record 32;
      NetDays@1240020014 : Integer;
      DiscDays@1240020013 : Integer;
      DiscAmt@1240020012 : Decimal;
      DiscountedAmt@1240020011 : Decimal;
      DiscPercent@1240020010 : Decimal;
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;

      EDISetup.GET;
      SalesHeader.CALCFIELDS(Amount,"Amount Including VAT");

      IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN BEGIN
        CASE EDIElement."Field Name" OF
          'ISA Control Number':
            OutFldArray[i] := EDITemplate."Export ISA Control No.";
          'IEA Control Number':
            OutFldArray[i] := EDITemplate."Export ISA Control No.";
          'GS Control Number':
            OutFldArray[i] := EDITemplate."Export GS Control No.";
          'GE Control Number':
            OutFldArray[i] := EDITemplate."Export GS Control No.";
          'ST Control Number':
            OutFldArray[i] := EDITemplate."Export ST Control No.";
          'SE Control Number':
            OutFldArray[i] := EDITemplate."Export ST Control No.";

          'Net Ship Wgt.':
            DecimalVariable := NetWeight;

          'Gross Ship Wgt.':
            DecimalVariable := GrossWeight;

          'Net Unit Price':
            IF SalesLine.Quantity > 0 THEN
              DecimalVariable := SalesLine.Amount / SalesLine.Quantity
            ELSE
              DecimalVariable := 0;

          'Pmt. Net Days':
            BEGIN
              IF SalesHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesHeader."Payment Terms Code");
                NetDays := (CALCDATE(PaymentTerms2."Due Date Calculation",TODAY) - TODAY);
              END ELSE
                NetDays := 0;
              IntegerVariable := NetDays;
            END;

          'Pmt. Disc. Days':
            BEGIN
              IF SalesHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesHeader."Payment Terms Code");
                DiscDays := (CALCDATE(PaymentTerms2."Discount Date Calculation",TODAY) - TODAY);
              END ELSE
                DiscDays := 0;
              IntegerVariable := DiscDays;
            END;

          'Pmt. Disc. Amt.':
            BEGIN
              IF SalesHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesHeader."Payment Terms Code");
                DiscAmt := ROUND(
                  (SalesHeader."Amount Including VAT" * PaymentTerms2."Discount %") / 100);
              END ELSE
                DiscAmt := 0;
              DecimalVariable := DiscAmt;
            END;

          'Pmt. Discounted Amt.':
            BEGIN
              DiscAmt := 0;
              IF SalesHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesHeader."Payment Terms Code");
                DiscAmt := ROUND(
                  (SalesHeader."Amount Including VAT" * PaymentTerms2."Discount %") / 100);
                DiscountedAmt := SalesHeader."Amount Including VAT" - DiscAmt;
              END ELSE
                DiscountedAmt := 0;
              DecimalVariable := DiscountedAmt;
            END;

          'Pmt. Disc. Percent':
            BEGIN
              IF SalesHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesHeader."Payment Terms Code");
                DiscPercent := PaymentTerms2."Discount %";
              END ELSE
                DiscPercent := 0;
              DecimalVariable := DiscPercent;
            END;

          'Total Units':
            DecimalVariable := TotalUnits;

          'Line Number':
            BEGIN
              IF EDIDocument."Base Line Count on Segment" <> '' THEN BEGIN
                LineNumber := 0;
                EDISendDocField2.RESET;
                EDISendDocField2.SETRANGE("No.",EDISendDocHdr."No.");
                EDISendDocField2.SETRANGE(Segment,EDIDocument."Base Line Count on Segment");
                EDISendDocField2.SETRANGE("New Segment",TRUE);
                IF EDISendDocField2.FIND('-') THEN
                  REPEAT
                    LineNumber := LineNumber + 1;
                  UNTIL EDISendDocField2.NEXT = 0;
                IntegerVariable := LineNumber;
              END ELSE
                IntegerVariable := LineNumber;
            END;

          'Total Segments':
            IntegerVariable := TotalSegments;

          'My Partner ID':
            OutFldArray[i] := EDITemplate."My Trading Partner No.";

          'Partner ID':                 // Trading Partner ID.
            OutFldArray[i] := EDITradePartner."No.";

          'Today':
            DateVariable := TODAY;

          'Transaction Status':         // Status of the EDI transaction (test or production)
            IF EDIDocument.Status = EDIDocument.Status::Test THEN
              OutFldArray[i] := 'Test'
            ELSE
              OutFldArray[i] := 'Production';

          'Transaction Version':        // EDI transaction version
            OutFldArray[i] := EDIDocument.Version;

          'Total Units (Base)':
            DecimalVariable := TotalUnitsBase;

          'Total HL Count':
            IntegerVariable := HLCount;

          'HL1 Count':
             BEGIN
               HLCount := HLCount + 1;
               HLCountArray[1] := HLCount;
               IntegerVariable := HLCount;
             END;

          'HL2 Count':
             BEGIN
               HLCount := HLCount + 1;
               HLCountArray[2] := HLCount;
               IntegerVariable := HLCount;
             END;

          'HL3 Count':
             BEGIN
               HLCount := HLCount + 1;
               HLCountArray[3] := HLCount;
               IntegerVariable := HLCount;
             END;

          'HL4 Count':
             BEGIN
               HLCount := HLCount + 1;
               HLCountArray[4] := HLCount;
               IntegerVariable := HLCount;
             END;

          'HL5 Count':
             BEGIN
               HLCount := HLCount + 1;
               HLCountArray[5] := HLCount;
               IntegerVariable := HLCount;
             END;

          'HL1 Parent':
            IntegerVariable := HLCountArray[1];

          'HL2 Parent':
            IntegerVariable := HLCountArray[2];

          'HL3 Parent':
            IntegerVariable := HLCountArray[3];

          'HL4 Parent':
            IntegerVariable := HLCountArray[4];

          'HL5 Parent':
            IntegerVariable := HLCountArray[5];

          'Pmt. Discount Date':
            IF SalesHeader."Payment Discount %" = 0 THEN
              DateVariable := 0D
            ELSE
              DateVariable := SalesHeader."Pmt. Discount Date";

          'Item Tracking Expiration Date':
            BEGIN
              IF ItemLedgerEntry.READPERMISSION THEN BEGIN
                ItemLedgerEntry.RESET;
                ItemLedgerEntry.SETCURRENTKEY(
                  "Item No.",Open,"Variant Code",Positive,"Expiration Date","Lot No.","Serial No.");
                ItemLedgerEntry.SETRANGE("Item No.",SalesLine."No.");
                ItemLedgerEntry.SETRANGE(Open,TRUE);
                ItemLedgerEntry.SETRANGE("Variant Code",SalesLine."Variant Code");
                ItemLedgerEntry.SETRANGE(Positive,TRUE);
                IF ReservationEntry."Lot No." <> '' THEN
                  ItemLedgerEntry.SETRANGE("Lot No.",ReservationEntry."Lot No.");
                IF ReservationEntry."Serial No." <> '' THEN
                  ItemLedgerEntry.SETRANGE("Serial No.",ReservationEntry."Serial No.");
                IF ItemLedgerEntry.FIND('-') THEN
                  DateVariable := ItemLedgerEntry."Expiration Date"
                ELSE
                  DateVariable := 0D;
                ItemLedgerEntry.SETRANGE("Location Code",SalesLine."Location Code");
              END ELSE
                DateVariable := 0D;
            END;

          'Time':
            BEGIN
              IF EDIElement."Minimum Length" = 0 THEN
                EDIElement."Minimum Length" := 4;
              OutFldArray[i] := FORMAT(TIME,4,'<Hours24,2><filler character,0><Minutes,2>');
            END;

          'Time HHMMSS':
            BEGIN
              IF EDIElement."Minimum Length" = 0 THEN
                EDIElement."Minimum Length" := 6;
              OutFldArray[i] := FORMAT(TIME,6,'<Hours24,2><filler character,0><Minutes,2><Seconds,2>');
            END;

          'Time HHMMSSDD':
            BEGIN
              IF EDIElement."Minimum Length" = 0 THEN
                EDIElement."Minimum Length" := 8;
              OutFldArray[i] :=
                FORMAT(TIME,8,'<Hours24,2><filler character,0><Minutes,2><Seconds,2>,<Seconds,2>');
            END;
        END;
      END;
    END;

    PROCEDURE SalesInvoiceSendEDIOut@1240020005(EDIElement@1240020008 : Record 14002355;VAR OutFldArray@1240020007 : ARRAY [100] OF Text[250];VAR DecimalVariable@1240020006 : Decimal;VAR IntegerVariable@1240020005 : Integer;VAR DateVariable@1240020004 : Date;VAR BooleanVariable@1240020003 : Boolean;VAR TimeVariable@1240020002 : Time;VAR DateTimeVariable@1240020001 : DateTime;i@1240020000 : Integer;VAR GenericCounter@1240020030 : Integer;VAR CounterIncremented@1240020032 : Boolean);
    VAR
      PaymentTerms2@1240020009 : Record 3;
      SalesInvoiceLine2@1240020015 : Record 113;
      SalesShipmentHdr@1240020013 : Record 110;
      SalesLine2@1240020033 : Record 37;
      SalesShipmentLine2@1240020034 : Record 111;
      ItemUOM@1240020027 : Record 5404;
      PostedPackage2@1240020012 : Record 14000704;
      EDISendDocField2@1240020021 : Record 14002370;
      GeneralCrossReference@1240020024 : Record 14000377;
      EDITradePtnrUOM@1240020026 : Record 14002365;
      TaxDetail@1240020028 : Record 322;
      NetDays@1240020016 : Integer;
      DiscDays@1240020017 : Integer;
      DiscAmt@1240020018 : Decimal;
      DiscountedAmt@1240020019 : Decimal;
      DiscPercent@1240020020 : Decimal;
      InvoiceTax@1240020010 : Decimal;
      InvoiceTaxPercent@1240020011 : Decimal;
      InvDiscAmount@1240020014 : Decimal;
      ILidx@1240020022 : Integer;
      OrderedQuantity@1240020023 : Decimal;
      PmtDiscAmtExclVAT@1240020025 : Decimal;
      ItemTaxPercent@1240020029 : Decimal;
      InvoiceLineNoArray@1240020031 : ARRAY [1000] OF Integer;
      InvNetAmt@1240020035 : Decimal;
      SalesInvLine@1170000003 : Record 113;
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;
      InvoiceTax := 0;
      InvoiceTaxPercent := 0;

      EDISetup.GET;
      SalesInvoiceHeader.CALCFIELDS(Amount,"Amount Including VAT");

      IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN BEGIN
        CASE EDIElement."Field Name" OF
          'ISA Control Number':
            OutFldArray[i] := EDITemplate."Export ISA Control No.";
          'IEA Control Number':
            OutFldArray[i] := EDITemplate."Export ISA Control No.";
          'GS Control Number':
            OutFldArray[i] := EDITemplate."Export GS Control No.";
          'GE Control Number':
            OutFldArray[i] := EDITemplate."Export GS Control No.";
          'ST Control Number':
            OutFldArray[i] := EDITemplate."Export ST Control No.";
          'SE Control Number':
            OutFldArray[i] := EDITemplate."Export ST Control No.";

          'Invoice Tax':
            DecimalVariable := SalesInvoiceHeader."Amount Including VAT" - SalesInvoiceHeader.Amount;

          'Net Ship Wgt.':
            DecimalVariable := NetWeight;

          'Gross Ship Wgt.':
            DecimalVariable := GrossWeight;

          'Gross Invoice':
            DecimalVariable := ROUND(GrossAmt,0.01);

          'Total Pallet Weight':
            DecimalVariable := PalletWeight;

          'Total Freight Amt.':
            DecimalVariable := FreightAmt;

          'Total Packages':
            BEGIN
              DecimalVariable := 0;
              SalesShipmentHdr.SETRANGE("Shipment Invoice No.",SalesInvoiceHeader."No.");
              IF SalesShipmentHdr.FIND('-') THEN BEGIN
                PostedPackage2.RESET;
                PostedPackage2.SETCURRENTKEY(
                  "Source Type","Source Subtype","Posted Source ID","Bill of Lading No.");
                PostedPackage2.SETRANGE("Source Type",36);
                PostedPackage2.SETRANGE("Source Subtype",1);
                PostedPackage2.SETRANGE("Posted Source ID",SalesShipmentHdr."No.");
                IF PostedPackage2.FIND('-') THEN
                  REPEAT
                    DecimalVariable := DecimalVariable + 1;
                  UNTIL PostedPackage2.NEXT = 0;
              END;
            END;

          'Net Weight by Package':
            BEGIN
              DecimalVariable := 0;
              SalesShipmentHdr.SETRANGE("Shipment Invoice No.",SalesInvoiceHeader."No.");
              IF SalesShipmentHdr.FIND('-') THEN BEGIN
                PostedPackage2.RESET;
                PostedPackage2.SETCURRENTKEY(
                  "Source Type","Source Subtype","Posted Source ID","Bill of Lading No.");
                PostedPackage2.SETRANGE("Source Type",36);
                PostedPackage2.SETRANGE("Source Subtype",1);
                PostedPackage2.SETRANGE("Posted Source ID",SalesShipmentHdr."No.");
                IF PostedPackage2.FIND('-') THEN
                  REPEAT
                    PostedPackage2.CALCFIELDS("Net Weight");
                    DecimalVariable := DecimalVariable + PostedPackage2."Net Weight" ;
                  UNTIL PostedPackage2.NEXT = 0;
              END;
            END;

          'Gross Weight by Package':
            BEGIN
              DecimalVariable := 0;
              SalesShipmentHdr.SETRANGE("Shipment Invoice No.",SalesInvoiceHeader."No.");
              IF SalesShipmentHdr.FIND('-') THEN BEGIN
                PostedPackage2.RESET;
                PostedPackage2.SETCURRENTKEY(
                  "Source Type","Source Subtype","Posted Source ID","Bill of Lading No.");
                PostedPackage2.SETRANGE("Source Type",36);
                PostedPackage2.SETRANGE("Source Subtype",1);
                PostedPackage2.SETRANGE("Posted Source ID",SalesShipmentHdr."No.");
                IF PostedPackage2.FIND('-') THEN
                  REPEAT
                    PostedPackage2.CALCFIELDS("Gross Weight");
                    DecimalVariable := DecimalVariable + PostedPackage2."Gross Weight" ;
                  UNTIL PostedPackage2.NEXT = 0;
              END;
            END;

          'Net Unit Price':
            IF SalesInvoiceLine.Quantity > 0 THEN
              DecimalVariable := SalesInvoiceLine.Amount / SalesInvoiceLine.Quantity
            ELSE
              DecimalVariable := 0;

          'Each Price':
            IF SalesInvoiceLine.Quantity > 0 THEN
              DecimalVariable :=
                SalesInvoiceLine."Unit Price" / SalesInvoiceLine."Qty. per Unit of Measure"
            ELSE
              DecimalVariable := 0;

          'Inv. Amt. Before Inv. Disc.':
            BEGIN
              InvDiscAmount := 0;
              SalesInvoiceLine2.SETRANGE("Document No.",SalesInvoiceHeader."No.");
              IF SalesInvoiceLine2.FIND('-') THEN
                REPEAT
                  InvDiscAmount := InvDiscAmount + SalesInvoiceLine2."Inv. Discount Amount";
                UNTIL SalesInvoiceLine2.NEXT = 0;
              DecimalVariable := SalesInvoiceHeader.Amount + InvDiscAmount;
            END;

          'Pmt. Net Days':
            BEGIN
              IF SalesInvoiceHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesInvoiceHeader."Payment Terms Code");
                NetDays := (CALCDATE(PaymentTerms2."Due Date Calculation",TODAY) - TODAY);
              END ELSE
                NetDays := 0;
              IntegerVariable := NetDays;
            END;

          'Pmt. Disc. Days':
            BEGIN
              IF SalesInvoiceHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesInvoiceHeader."Payment Terms Code");
                DiscDays := (CALCDATE(PaymentTerms2."Discount Date Calculation",TODAY) - TODAY);
              END ELSE
                DiscDays := 0;
              IntegerVariable := DiscDays;
            END;

          'Pmt. Disc. Amt.':
            BEGIN
              IF SalesInvoiceHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesInvoiceHeader."Payment Terms Code");
                DiscAmt := ROUND(
                  (SalesInvoiceHeader."Amount Including VAT" * PaymentTerms2."Discount %") / 100);
              END ELSE
                DiscAmt := 0;
              DecimalVariable := DiscAmt;
            END;

          'Pmt. Discounted Amt.':
            BEGIN
              DiscAmt := 0;
              IF SalesInvoiceHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesInvoiceHeader."Payment Terms Code");
                DiscAmt := ROUND(
                  (SalesInvoiceHeader."Amount Including VAT" * PaymentTerms2."Discount %") / 100);
                DiscountedAmt := SalesInvoiceHeader."Amount Including VAT" - DiscAmt;
              END ELSE
                DiscountedAmt := 0;
              DecimalVariable := DiscountedAmt;
            END;

          'Pmt. Disc. Percent':
            BEGIN
              IF SalesInvoiceHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesInvoiceHeader."Payment Terms Code");
                DiscPercent := PaymentTerms2."Discount %";
              END ELSE
                DiscPercent := 0;
              DecimalVariable := DiscPercent;
            END;

          'Total Units':
            DecimalVariable := TotalUnits;

          'Total Base Units':
            DecimalVariable := TotalBaseUnits;

          'Line Number':
            BEGIN
              IF EDIDocument."Base Line Count on Segment" <> '' THEN BEGIN
                LineNumber := 0;
                EDISendDocField2.RESET;
                EDISendDocField2.SETRANGE("No.",EDISendDocHdr."No.");
                EDISendDocField2.SETRANGE(Segment,EDIDocument."Base Line Count on Segment");
                EDISendDocField2.SETRANGE("New Segment",TRUE);
                IF EDISendDocField2.FIND('-') THEN
                  REPEAT
                    LineNumber := LineNumber + 1;
                  UNTIL EDISendDocField2.NEXT = 0;
                IntegerVariable := LineNumber;
              END ELSE
                IntegerVariable := LineNumber;
            END;

          'PO Line Number':
            BEGIN
              SalesInvoiceLine2.RESET;
              SalesInvoiceLine2.SETRANGE("Document No.",SalesInvoiceHeader."No.");
              SalesInvoiceLine2.SETFILTER("No.",'<>%1','');
              IF NOT EDIDocument."Export Zero Qty. Lines" THEN
                SalesInvoiceLine2.SETFILTER(Quantity,'>0');
              ILidx := 0;
              IF SalesInvoiceLine2.FIND('-') THEN
                REPEAT
                  ILidx := ILidx + 1;
                  InvoiceLineNoArray[ILidx] := SalesInvoiceLine2."Line No.";
                UNTIL SalesInvoiceLine2.NEXT = 0;

              ILidx := 0;
              REPEAT
                ILidx := ILidx + 1;
              UNTIL InvoiceLineNoArray[ILidx] = SalesInvoiceLine."Line No.";
              IntegerVariable := ILidx;
            END;

          'Total Segments':
            IntegerVariable := TotalSegments;

          'My Partner ID':
            OutFldArray[i] := EDITemplate."My Trading Partner No.";

          'Partner ID':
            OutFldArray[i] := EDITradePartner."No.";

          'Time':
            BEGIN
              IF EDITemplate."File Format" = EDITemplate."File Format"::XML THEN BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 5;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0>:<Minutes,2>');
              END ELSE BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 4;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0><Minutes,2>');
              END;
            END;

          'Today':
            DateVariable := TODAY;

          'Transaction Status':
            IF EDIDocument.Status = EDIDocument.Status::Test THEN
              OutFldArray[i] := 'Test'
            ELSE
              OutFldArray[i] := 'Production';

          'Transaction Version':
            OutFldArray[i] := EDIDocument.Version;

          'Total Inv. Discount':
            DecimalVariable := TotalInvDiscount;

          'Qty. Ordered':
            BEGIN
              OrderedQuantity :=  0;
              IF SalesInvoiceHeader."Order No." = '' THEN
                OrderedQuantity := SalesInvoiceLine.Quantity
              ELSE BEGIN
                IF SalesLine2.GET(
                  1,SalesInvoiceHeader."Order No.",SalesInvoiceLine."Line No.")
                THEN
                  OrderedQuantity := SalesLine2.Quantity
                ELSE BEGIN
                  SalesShipmentLine2.RESET;
                  SalesShipmentLine2.SETRANGE("Order No.",SalesInvoiceHeader."Order No.");
                  SalesShipmentLine2.SETRANGE("Order Line No.",SalesInvoiceLine."Line No.");
                  IF SalesShipmentLine2.FIND('-') THEN;
                  REPEAT
                    OrderedQuantity := OrderedQuantity + SalesShipmentLine2.Quantity;
                  UNTIL SalesShipmentLine.NEXT = 0;
                END;
              END;
              DecimalVariable := OrderedQuantity;
            END;

          'Invoice Tax Percent':
            BEGIN
              InvoiceTax := SalesInvoiceHeader."Amount Including VAT" - SalesInvoiceHeader.Amount;
              IF SalesInvoiceHeader.Amount <> 0 THEN BEGIN
                InvoiceTaxPercent := (InvoiceTax / SalesInvoiceHeader.Amount) * 100;
                IF EDIElement."Round Value" THEN
                  DecimalVariable := InvoiceTaxPercent
                ELSE
                  DecimalVariable := RoundValue(InvoiceTaxPercent,EDIElement);
              END;
            END;

          'Tax Area Code':
            BEGIN
              OutFldArray[i] := '';
              GeneralCrossReference.RESET;
              GeneralCrossReference.SETCURRENTKEY("Trade Partner","Cross Reference");
              GeneralCrossReference.SETRANGE("Cross Reference",5);
              GeneralCrossReference.SETRANGE("Trade Partner",EDITradePartner."No.");
              GeneralCrossReference.SETRANGE("NAV Value",SalesInvoiceHeader."Tax Area Code");
              IF GeneralCrossReference.FIND('-') THEN
                IF GeneralCrossReference."Sub NAV Value" <> '' THEN BEGIN
                  GeneralCrossReference.SETRANGE("Sub NAV Value",SalesInvoiceHeader."Sell-to Customer No.");
                  GeneralCrossReference.SETRANGE("Sub NAV Value 2",SalesInvoiceHeader."Ship-to Code");
                  IF GeneralCrossReference.FIND('-') THEN
                    OutFldArray[i] := GeneralCrossReference."EDI Value"
                END ELSE
                  OutFldArray[i] := GeneralCrossReference."EDI Value"
              ELSE BEGIN
                GeneralCrossReference.RESET;
                GeneralCrossReference.SETCURRENTKEY("Trade Partner","Cross Reference");
                GeneralCrossReference.SETRANGE("Cross Reference",5);
                GeneralCrossReference.SETRANGE("Trade Partner",'');
                GeneralCrossReference.SETRANGE("NAV Value",SalesInvoiceHeader."Tax Area Code");
                IF GeneralCrossReference.FIND('-') THEN
                  IF GeneralCrossReference."Sub NAV Value" <> '' THEN BEGIN
                    GeneralCrossReference.SETRANGE("Sub NAV Value",SalesInvoiceHeader."Sell-to Customer No.");
                    GeneralCrossReference.SETRANGE("Sub NAV Value 2",SalesInvoiceHeader."Ship-to Code");
                    IF GeneralCrossReference.FIND('-') THEN
                      OutFldArray[i] := GeneralCrossReference."EDI Value"
                  END ELSE
                    OutFldArray[i] := GeneralCrossReference."EDI Value"
              END;
            END;

          'Ship Agent Code (GCR)':
            BEGIN
              OutFldArray[i] := '';
              GeneralCrossReference.RESET;
              GeneralCrossReference.SETCURRENTKEY("Trade Partner","Cross Reference");
              GeneralCrossReference.SETRANGE("Cross Reference",1);
              GeneralCrossReference.SETRANGE("Trade Partner",EDITradePartner."No.");
              GeneralCrossReference.SETRANGE("NAV Value",SalesInvoiceHeader."Shipping Agent Code");
              GeneralCrossReference.SETRANGE("Generic ID",FALSE);
              IF GeneralCrossReference.FIND('-') THEN
                OutFldArray[i] := GeneralCrossReference."EDI Value"
              ELSE BEGIN
                GeneralCrossReference.RESET;
                GeneralCrossReference.SETCURRENTKEY("Trade Partner","Cross Reference");
                GeneralCrossReference.SETRANGE("Cross Reference",1);
                GeneralCrossReference.SETRANGE("Trade Partner",'');
                GeneralCrossReference.SETRANGE("NAV Value",SalesInvoiceHeader."Shipping Agent Code");
                GeneralCrossReference.SETRANGE("Generic ID",FALSE);
                IF GeneralCrossReference.FIND('-') THEN
                  OutFldArray[i] := GeneralCrossReference."EDI Value"
              END;
            END;

          'Ship Agent Service (GCR)':
            BEGIN
              OutFldArray[i] := '';
              GeneralCrossReference.RESET;
              GeneralCrossReference.SETCURRENTKEY("Trade Partner","Cross Reference");
              GeneralCrossReference.SETRANGE("Cross Reference",1);
              GeneralCrossReference.SETRANGE("Trade Partner",EDITradePartner."No.");
              GeneralCrossReference.SETRANGE("NAV Value 2",SalesInvoiceHeader."E-Ship Agent Service");
              GeneralCrossReference.SETRANGE("Generic ID",FALSE);
              IF GeneralCrossReference.FIND('-') THEN
                OutFldArray[i] := GeneralCrossReference."EDI Value 2"
              ELSE BEGIN
                GeneralCrossReference.RESET;
                GeneralCrossReference.SETCURRENTKEY("Trade Partner","Cross Reference");
                GeneralCrossReference.SETRANGE("Cross Reference",1);
                GeneralCrossReference.SETRANGE("Trade Partner",'');
                GeneralCrossReference.SETRANGE("NAV Value 2",SalesInvoiceHeader."E-Ship Agent Service");
                GeneralCrossReference.SETRANGE("Generic ID",FALSE);
                IF GeneralCrossReference.FIND('-') THEN
                  OutFldArray[i] := GeneralCrossReference."EDI Value 2"
              END;
            END;

          'Total Dropship Amt.':
            DecimalVariable := DropShipAmt;

          'Total Fields Generic 1':
            DecimalVariable := TotalFieldsGeneric1;

          'Total Fields Generic 2':
            DecimalVariable := TotalFieldsGeneric2;

          'Total Fields Generic 3':
            DecimalVariable := TotalFieldsGeneric3;

          'Total Fields Generic 4':
            DecimalVariable := TotalFieldsGeneric4;

          'Total Inv. Line Discount':
            DecimalVariable := TotalInvLineDiscount;

          // <TPZ848>
          'Total Trans Amount':
            DecimalVariable := ROUND(InvTotalAmount,0.01) + InvFreightAmt;

          'Per 100 Base UOM Price':
           // DecimalVariable := InvActualPriceMult;
            BEGIN
              IF EDIElement."Round Value" THEN
                DecimalVariable := SalesInvoiceLine."Actual Unit Price" * 100
              ELSE
                DecimalVariable := RoundValue(SalesInvoiceLine."Actual Unit Price"*100,EDIElement);
            END;

          '2% Discount Amount':
            DecimalVariable := DiscAmt;

          'Division Code':
            BEGIN
              IF SalesInvoiceHeader."Shortcut Dimension 5 Code" = 'E' THEN
                OutFldArray[i] := 'Electric';
              IF SalesInvoiceHeader."Shortcut Dimension 5 Code" = 'L' THEN
                OutFldArray[i] := 'Lighting';
      // >> LS001
              IF SalesInvoiceHeader."Shortcut Dimension 5 Code" = 'P' THEN
                OutFldArray[i] := 'Conduit';
      // << LS001
            END;

          'Shipment Tracking Number':
            BEGIN
              IF SalesInvoiceHeader."Package Tracking No." <> '' THEN
                OutFldArray[i] := SalesInvoiceHeader."Package Tracking No."
              ELSE BEGIN
                PostedPackage2.RESET;
                PostedPackage2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
                PostedPackage2.SETRANGE("Source Type",36);
                PostedPackage2.SETFILTER("Source Subtype",'%1|%2', 1, 2);
                PostedPackage2.SETRANGE("Source ID",SalesInvoiceHeader."Order No.");
                IF PostedPackage2.FINDSET THEN BEGIN
                  REPEAT
                    OutFldArray[i] := PostedPackage2."External Tracking No.";
                  UNTIL(PostedPackage2.NEXT=0);
              //-->TPZ3178
                END ELSE BEGIN
                  SalesInvLine.RESET;
                  SalesInvLine.SETRANGE("Order No.",SalesInvoiceHeader."Order No.");
                  SalesInvLine.SETFILTER(Quantity,'<>0');
                  IF SalesInvLine.FINDSET THEN
                  REPEAT
                    GetSalesShptLines(SalesInvLine,SalesInvoiceHeader);
                    IF PKgTracking <>'' THEN
                      OutFldArray[i] := PKgTracking;
                  UNTIL SalesInvLine.NEXT=0;
                END;
              //<--TPZ3178
              END;
            END;
          // </TPZ848>
          'Unit Price':
            BEGIN
              IF EDIElement."Round Value" THEN
                DecimalVariable := SalesInvoiceLine."Unit Price"
              ELSE
                DecimalVariable := RoundValue(SalesInvoiceLine."Unit Price",EDIElement);
            END;

          'EDI Discount Amount': //
            DecimalVariable := EDIInvDiscAmt;

          'EDI Line Discount Amount':    //
            DecimalVariable := EDIInvLineDiscAmt;

          'Pmt. Disc. Amt. Excl. VAT':
            BEGIN
              IF SalesInvoiceHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesInvoiceHeader."Payment Terms Code");
                DecimalVariable := ROUND(
                  (SalesInvoiceHeader.Amount * PaymentTerms."Discount %") / 100);
              END ELSE
                DecimalVariable := 0;
             END;

          'Pmt. Discounted Amt. Excl. VAT':
            BEGIN
              IF SalesInvoiceHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesInvoiceHeader."Payment Terms Code");
                PmtDiscAmtExclVAT := ROUND(
                  (SalesInvoiceHeader.Amount * PaymentTerms."Discount %") / 100);
                DecimalVariable := SalesInvoiceHeader.Amount - PmtDiscAmtExclVAT;
              END ELSE
                DecimalVariable := 0;
            END;

          'Quantity per EDI Unit of Measure':
            DecimalVariable := EDIQty;

          'Unit Price per EDI Unit of Measure':
            BEGIN
              IF (SalesInvoiceLine."Quantity (Base)" <> 0) AND
                 (SalesInvoiceLine."No." <> '') AND
                 (SalesInvoiceLine.Type = SalesInvoiceLine.Type::Item) AND
                 (SalesInvoiceLine."EDI Unit of Measure" <> '') AND
                 (SalesInvoiceLine."Qty. per Unit of Measure" <> 0)
              THEN
                IF (EDITradePtnrUOM.GET(
                  EDIElement."Trade Partner No.",SalesInvoiceLine."EDI Unit of Measure",
                  SalesInvoiceLine."No.",SalesInvoiceLine."Variant Code"))
                THEN BEGIN
                  IF ItemUOM.GET(
                    SalesInvoiceLine."No.",EDITradePtnrUOM."Navision Unit of Measure")
                  THEN
                    DecimalVariable :=
                      SalesInvoiceLine."Unit Price" /
                        SalesInvoiceLine."Qty. per Unit of Measure" *
                          ItemUOM."Qty. per Unit of Measure"
                  ELSE
                    DecimalVariable := 0;
               END ELSE BEGIN
                 IF EDITradePtnrUOM.GET(
                   EDIElement."Trade Partner No.",SalesInvoiceLine."EDI Unit of Measure",'','')
                 THEN
                   IF ItemUOM.GET(
                     SalesInvoiceLine."No.",EDITradePtnrUOM."Navision Unit of Measure")
                   THEN
                     DecimalVariable :=
                       SalesInvoiceLine."Unit Price" /
                         SalesInvoiceLine."Qty. per Unit of Measure" *
                           ItemUOM."Qty. per Unit of Measure"
                   ELSE
                     DecimalVariable := 0;
               END;
            END;

          'Tax Jurisdiction Tax Percent':
            BEGIN
              IF VATEntry.Base <> 0 THEN BEGIN
                TaxDetail.RESET;
                TaxDetail.SETRANGE("Tax Jurisdiction Code",VATEntry."Tax Jurisdiction Code");
                TaxDetail.SETRANGE("Tax Group Code",VATEntry."Tax Group Code");
                IF TaxDetail.FIND('+') THEN
                  DecimalVariable := TaxDetail."Tax Below Maximum"
                ELSE BEGIN
                  TaxDetail.SETRANGE("Tax Group Code");
                  TaxDetail.SETRANGE("Tax Group Code",'');
                  IF TaxDetail.FIND('+') THEN
                    DecimalVariable := TaxDetail."Tax Below Maximum"
                   ELSE
                     DecimalVariable := 0;
                END;
              END ELSE
                DecimalVariable := 0;
            END;

          'Tax Jurisdiction Tax Percent (Detail)':
            BEGIN
              IF VATEntryDetail.Base <> 0 THEN BEGIN
                TaxDetail.RESET;
                TaxDetail.SETRANGE("Tax Jurisdiction Code",VATEntryDetail."Tax Jurisdiction Code");
                TaxDetail.SETRANGE("Tax Group Code",VATEntryDetail."Tax Group Code");
                IF TaxDetail.FIND('+') THEN
                  DecimalVariable := TaxDetail."Tax Below Maximum"
                ELSE BEGIN
                  TaxDetail.SETRANGE("Tax Group Code");
                  TaxDetail.SETRANGE("Tax Group Code",'');
                  IF TaxDetail.FIND('+') THEN
                    DecimalVariable := TaxDetail."Tax Below Maximum"
                   ELSE
                     DecimalVariable := 0;
               END;
              END ELSE
                DecimalVariable := 0;
            END;

          'Tax Amount By Jurisdiction (Detail)':
            BEGIN
              IF (VATEntryDetail.Base <> 0) AND (ProcessingLines = TRUE) THEN BEGIN
                TaxDetail.RESET;
                TaxDetail.SETRANGE("Tax Jurisdiction Code",VATEntryDetail."Tax Jurisdiction Code");
                TaxDetail.SETRANGE("Tax Group Code",VATEntryDetail."Tax Group Code");
                IF TaxDetail.FIND('+') THEN
                  ItemTaxPercent := TaxDetail."Tax Below Maximum"
                ELSE BEGIN
                  TaxDetail.SETRANGE("Tax Group Code");
                  TaxDetail.SETRANGE("Tax Group Code",'');
                  IF TaxDetail.FIND('+') THEN
                    ItemTaxPercent := TaxDetail."Tax Below Maximum"
                   ELSE
                     ItemTaxPercent := 0;
                END;
                IF EDIElement."Round Value" THEN
                  DecimalVariable := SalesInvoiceLine.Amount * (ItemTaxPercent / 100)
                ELSE
                  DecimalVariable := RoundValue((SalesInvoiceLine.Amount * (ItemTaxPercent / 100)),EDIElement);
              END ELSE
                DecimalVariable := 0;
            END;

           'Tax Jurisdiction Registration No Detail':
             BEGIN
               OutFldArray[i] := '';
               GeneralCrossReference.RESET;
               GeneralCrossReference.SETCURRENTKEY("Trade Partner","Cross Reference");
               GeneralCrossReference.SETRANGE("Cross Reference",28);
               GeneralCrossReference.SETRANGE("Trade Partner",EDITradePartner."No.");
               GeneralCrossReference.SETRANGE("NAV Value",VATEntryDetail."Tax Jurisdiction Code");
               IF GeneralCrossReference.FIND('-') THEN
                 OutFldArray[i] := GeneralCrossReference."EDI Value 2"
               ELSE BEGIN
                 GeneralCrossReference.RESET;
                 GeneralCrossReference.SETCURRENTKEY("Trade Partner","Cross Reference");
                 GeneralCrossReference.SETRANGE("Cross Reference",28);
                 GeneralCrossReference.SETRANGE("Trade Partner",'');
                 GeneralCrossReference.SETRANGE("NAV Value",VATEntryDetail."Tax Jurisdiction Code");
                 IF GeneralCrossReference.FIND('-') THEN
                   OutFldArray[i] := GeneralCrossReference."EDI Value 2"
               END;
             END;

           'Tax Jurisdiction Registration No.':
             BEGIN
               OutFldArray[i] := '';
               GeneralCrossReference.RESET;
               GeneralCrossReference.SETCURRENTKEY("Trade Partner","Cross Reference");
               GeneralCrossReference.SETRANGE("Cross Reference",28);
               GeneralCrossReference.SETRANGE("Trade Partner",EDITradePartner."No.");
               GeneralCrossReference.SETRANGE("NAV Value",VATEntry."Tax Jurisdiction Code");
               IF GeneralCrossReference.FIND('-') THEN
                 OutFldArray[i] := GeneralCrossReference."EDI Value 2"
               ELSE BEGIN
                 GeneralCrossReference.RESET;
                 GeneralCrossReference.SETCURRENTKEY("Trade Partner","Cross Reference");
                 GeneralCrossReference.SETRANGE("Cross Reference",28);
                 GeneralCrossReference.SETRANGE("Trade Partner",'');
                 GeneralCrossReference.SETRANGE("NAV Value",VATEntry."Tax Jurisdiction Code");
                 IF GeneralCrossReference.FIND('-') THEN
                   OutFldArray[i] := GeneralCrossReference."EDI Value 2"
               END;
             END;

           'Generic Counter':
             BEGIN
               IF ProcessingLines THEN BEGIN
                 IF SalesInvoiceLine.Type <> SalesInvoiceLine.Type::Item THEN BEGIN
                   CASE SalesInvoiceLine.Type OF
                     SalesInvoiceLine.Type::"G/L Account":
                       IF EDIDocument."Export G/L Account Lines" THEN BEGIN
                         GenericCounter := GenericCounter + 1;
                         CounterIncremented := TRUE;
                       END;
                     SalesInvoiceLine.Type::Resource:
                       IF EDIDocument."Export Resource Lines" THEN BEGIN
                         GenericCounter := GenericCounter + 1;
                         CounterIncremented := TRUE;
                       END;
                     ELSE BEGIN
                       GenericCounter := GenericCounter + 1;
                       CounterIncremented := TRUE;
                     END;
                   END;
                 END ELSE BEGIN
                   GenericCounter := GenericCounter + 1;
                   CounterIncremented := TRUE;
                 END;
               END ELSE BEGIN
                 GenericCounter := GenericCounter + 1;
                 CounterIncremented := TRUE;
               END;
               IntegerVariable := GenericCounter;
             END;

          'Total EDI Quantity':
            DecimalVariable := TotalEDIQty;

          'Pmt. Discount Date':
            IF SalesInvoiceHeader."Payment Discount %" = 0 THEN
              DateVariable := 0D
            ELSE
              DateVariable := SalesInvoiceHeader."Pmt. Discount Date";

          'Day of Month (Current Month)':
            IF SalesInvoiceHeader."Payment Terms Code" <> '' THEN BEGIN
              PaymentTerms2.GET(SalesInvoiceHeader."Payment Terms Code");
              EVALUATE(DF,'CM');
              IF PaymentTerms2."Due Date Calculation" = DF THEN
                OutFldArray[i] := FORMAT(DATE2DMY(SalesInvoiceHeader."Due Date",1))
              ELSE
                OutFldArray[i] := '';
            END;

           'Invoice Amount (Based Tax Base Amount)':
            BEGIN
              InvNetAmt := 0;
              SalesInvoiceLine2.RESET;
              SalesInvoiceLine2.SETRANGE("Document No.",SalesInvoiceHeader."No.");
              SalesInvoiceLine2.SETFILTER(Quantity,'<>%1',0);
              SalesInvoiceLine2.SETRANGE(Type,SalesInvoiceLine2.Type::Item);
              IF SalesInvoiceLine2.FIND('-') THEN
                REPEAT
                  InvNetAmt :=
                    InvNetAmt + SalesInvoiceLine2."VAT Base Amount";
                UNTIL SalesInvoiceLine2.NEXT = 0;
              IF EDIElement."Round Value" THEN
                DecimalVariable := InvNetAmt
              ELSE
                DecimalVariable := RoundValue(InvNetAmt,EDIElement);
            END;
        END;
      END;
    END;

    PROCEDURE FunctAckSendEDIOut@1240020009(EDIElement@1240020008 : Record 14002355;VAR OutFldArray@1240020007 : ARRAY [100] OF Text[250];VAR DecimalVariable@1240020006 : Decimal;VAR IntegerVariable@1240020005 : Integer;VAR DateVariable@1240020004 : Date;VAR BooleanVariable@1240020003 : Boolean;VAR TimeVariable@1240020002 : Time;VAR DateTimeVariable@1240020001 : DateTime;i@1240020000 : Integer);
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;

      EDISetup.GET;

      IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN BEGIN
        CASE EDIElement."Field Name" OF
          'Transaction Set Count':
            IntegerVariable := TransactionSetCount;
          'Today':
            DateVariable := TODAY;
        END;
      END;
    END;

    PROCEDURE OrderStatusSendEDIOut@1240020010(EDIElement@1240020008 : Record 14002355;VAR OutFldArray@1240020007 : ARRAY [100] OF Text[250];VAR DecimalVariable@1240020006 : Decimal;VAR IntegerVariable@1240020005 : Integer;VAR DateVariable@1240020004 : Date;VAR BooleanVariable@1240020003 : Boolean;VAR TimeVariable@1240020002 : Time;VAR DateTimeVariable@1240020001 : DateTime;i@1240020000 : Integer;VAR HLCount@1240020017 : Integer);
    VAR
      PaymentTerms2@1240020014 : Record 3;
      EDISendDocField2@1240020016 : Record 14002370;
      NetDays@1240020013 : Integer;
      DiscDays@1240020012 : Integer;
      DiscAmt@1240020011 : Decimal;
      DiscountedAmt@1240020010 : Decimal;
      DiscPercent@1240020009 : Decimal;
      Length@1240020015 : Integer;
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;


      EDISetup.GET;
      SalesHeader.CALCFIELDS(Amount,"Amount Including VAT");
      SalesLine.CALCFIELDS("Reserved Quantity");

      IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN BEGIN
        CASE EDIElement."Field Name" OF
          'ISA Control Number':
            OutFldArray[i] := EDITemplate."Export ISA Control No.";
          'IEA Control Number':
            OutFldArray[i] := EDITemplate."Export ISA Control No.";
          'GS Control Number':
            OutFldArray[i] := EDITemplate."Export GS Control No.";
          'GE Control Number':
            OutFldArray[i] := EDITemplate."Export GS Control No.";
          'ST Control Number':
            OutFldArray[i] := EDITemplate."Export ST Control No.";
          'SE Control Number':
            OutFldArray[i] := EDITemplate."Export ST Control No.";

          'Net Ship Wgt.':
            DecimalVariable := NetWeight;

          'Gross Ship Wgt.':
            DecimalVariable := GrossWeight;

          'Net Unit Price':
            IF SalesLine.Quantity > 0 THEN
              DecimalVariable := SalesLine.Amount / SalesLine.Quantity
            ELSE
              DecimalVariable := 0;

          'Pmt. Net Days':
            BEGIN
              IF SalesHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesHeader."Payment Terms Code");
                NetDays := (CALCDATE(PaymentTerms2."Due Date Calculation",TODAY) - TODAY);
              END ELSE
                NetDays := 0;
              IntegerVariable := NetDays;
            END;

          'Pmt. Disc. Days':
            BEGIN
              IF SalesHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesHeader."Payment Terms Code");
                DiscDays := (CALCDATE(PaymentTerms2."Discount Date Calculation",TODAY) - TODAY);
              END ELSE
                DiscDays := 0;
              IntegerVariable := DiscDays;
            END;

          'Pmt. Disc. Amt.':
            BEGIN
              IF SalesHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesHeader."Payment Terms Code");
                DiscAmt := ROUND(
                  (SalesHeader."Amount Including VAT" * PaymentTerms2."Discount %") / 100);
              END ELSE
                DiscAmt := 0;
              DecimalVariable := DiscAmt;
            END;

          'Pmt. Discounted Amt.':
            BEGIN
              DiscAmt := 0;
              IF SalesHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesHeader."Payment Terms Code");
                DiscAmt := ROUND(
                  (SalesHeader."Amount Including VAT" * PaymentTerms2."Discount %") / 100);
                DiscountedAmt := SalesHeader."Amount Including VAT" - DiscAmt;
              END ELSE
                DiscountedAmt := 0;
              DecimalVariable := DiscountedAmt;
            END;

          'Pmt. Disc. Percent':
            BEGIN
              IF SalesHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesHeader."Payment Terms Code");
                DiscPercent := PaymentTerms2."Discount %";
              END ELSE
                DiscPercent := 0;
              DecimalVariable := DiscPercent;
            END;

          'Total Units':
            DecimalVariable := TotalUnits;

          'Line Number':
            BEGIN
              IF EDIDocument."Base Line Count on Segment" <> '' THEN BEGIN
                LineNumber := 0;
                EDISendDocField2.RESET;
                EDISendDocField2.SETRANGE("No.",EDISendDocHdr."No.");
                EDISendDocField2.SETRANGE(Segment,EDIDocument."Base Line Count on Segment");
                EDISendDocField2.SETRANGE("New Segment",TRUE);
                IF EDISendDocField2.FIND('-') THEN
                  REPEAT
                    LineNumber := LineNumber + 1;
                  UNTIL EDISendDocField2.NEXT = 0;
                IntegerVariable := LineNumber;
              END ELSE
                IntegerVariable := LineNumber;
            END;

          'Total Segments':
            IntegerVariable := TotalSegments;

          'Today':
            DateVariable := TODAY;

          'Time':
            BEGIN
              IF EDITemplate."File Format" = EDITemplate."File Format"::XML THEN BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 5;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0>:<Minutes,2>');
              END ELSE BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 4;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0><Minutes,2>');
              END;
            END;

          'Total HL Count':
            IntegerVariable := HLCount;

          'HL1 Count':
             BEGIN
               HLCount := HLCount + 1;
               HLCountArray[1] := HLCount;
               IntegerVariable := HLCount;
             END;

          'HL2 Count':
             BEGIN
               HLCount := HLCount + 1;
               HLCountArray[2] := HLCount;
               IntegerVariable := HLCount;
             END;

          'HL3 Count':
             BEGIN
               HLCount := HLCount + 1;
               HLCountArray[3] := HLCount;
               IntegerVariable := HLCount;
             END;

          'HL4 Count':
             BEGIN
               HLCount := HLCount + 1;
               HLCountArray[4] := HLCount;
               IntegerVariable := HLCount;
             END;

          'HL5 Count':
             BEGIN
               HLCount := HLCount + 1;
               HLCountArray[5] := HLCount;
               IntegerVariable := HLCount;
             END;

          'HL1 Parent':
            IntegerVariable := HLCountArray[1];

          'HL2 Parent':
            IntegerVariable := HLCountArray[2];

          'HL3 Parent':
            IntegerVariable := HLCountArray[3];

          'HL4 Parent':
            IntegerVariable := HLCountArray[4];

          'HL5 Parent':
            IntegerVariable := HLCountArray[5];

          'Qty. Unshipped':
            DecimalVariable :=
              ROUND(EDIOrderStatusLine."Original Order Qty." -
                   (EDIOrderStatusLine."Quantity To Ship" + SalesLine."Quantity Shipped"),0.00001);

          'Line Status':
            BEGIN
              IF EDIOrderStatusLine."Order Quantity" < EDIOrderStatusLine."Original Order Qty." THEN
                OutFldArray[i] := 'CP';
              IF EDIOrderStatusLine."Order Quantity" = 0 THEN
                OutFldArray[i] := 'IC';
            END;

          'Current Order Qty.':
            BEGIN
              DecimalVariable := EDIOrderStatusLine."Prev. Order Qty.";
              CASE EDIOrderStatusLine."EDI Status Code" OF
                'QD':
                  OutFldArray[i] := FORMAT(DecimalVariable);
                'DI','PSO':
                  OutFldArray[i] := '';
              END;
           END;

          'Quantity Change':
            BEGIN
              DecimalVariable :=
                EDIOrderStatusLine."Prev. Order Qty." - EDIOrderStatusLine."Quantity To Ship";
              CASE EDIOrderStatusLine."EDI Status Code" OF
                'QD':
                  OutFldArray[i] := FORMAT(DecimalVariable);
                'DI','PSO':
                  OutFldArray[i] := '';
              END;
           END;

          'Control No.':
            BEGIN
              Length := STRLEN(EDIOrderStatusHdr."Source Doc. No.");
              Length := Length - 4;
              OutFldArray[i] :=
                COPYSTR(EDIOrderStatusHdr."Source Doc. No.",Length + 1,4) +
              COPYSTR(EDITemplate."Export ISA Control No.",5,5);
            END;

          'Document No.':
            OutFldArray[i] :=
              EDIOrderStatusHdr."Source Doc. No." + '-' + FORMAT(EDISendDocHdr.Version);

          'Pmt. Discount Date':
            IF SalesHeader."Payment Discount %" = 0 THEN
              DateVariable := 0D
            ELSE
              DateVariable := SalesHeader."Pmt. Discount Date";
        END;
      END;
    END;

    PROCEDURE RoutingRequestSendEDIOut@1240020014(EDIElement@1240020008 : Record 14002355;VAR OutFldArray@1240020007 : ARRAY [100] OF Text[250];VAR DecimalVariable@1240020006 : Decimal;VAR IntegerVariable@1240020005 : Integer;VAR DateVariable@1240020004 : Date;VAR BooleanVariable@1240020003 : Boolean;VAR TimeVariable@1240020002 : Time;VAR DateTimeVariable@1240020001 : DateTime;i@1240020000 : Integer);
    VAR
      Package@1240020012 : Record 14000701;
      PackageLine@1240020016 : Record 14000702;
      RoutingReqLine@1240020013 : Record 14002403;
      SalesHeader@1240020014 : Record 36;
      Position@1240020015 : Integer;
      Hour@1240020010 : Code[10];
      Minute@1240020009 : Code[10];
      Counter@1240020011 : Integer;
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;

      EDISetup.GET;
      SalesHeader.CALCFIELDS(Amount,"Amount Including VAT");
      SalesLine.CALCFIELDS("Reserved Quantity");

      IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN BEGIN
        CASE EDIElement."Field Name" OF
          'Net Ship Wgt.':
            DecimalVariable := NetWeight;

          'Gross Ship Wgt.':
            DecimalVariable := GrossWeight;

          'Volume':
            DecimalVariable := PackingVolume;

          'Package Qty.':
            DecimalVariable := PackingQty;

          'Quantity To Ship':
            DecimalVariable := QtyToShip;

          'Time':
            BEGIN
              IF EDITemplate."File Format" = EDITemplate."File Format"::XML THEN BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 5;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0>:<Minutes,2>');
              END ELSE BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 4;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0><Minutes,2>');
              END;
            END;

          'Ready to Ship Time':
            BEGIN
              Position := STRPOS(RoutingReq."Ready To Ship Time",':');
              IF Position <> 0 THEN
                IF Position < 3 THEN BEGIN
                  Hour := COPYSTR(RoutingReq."Ready To Ship Time",1,1);
                  FOR Counter := 1 TO 12 DO
                    Hour := INCSTR(Hour);
                  Minute := COPYSTR(RoutingReq."Ready To Ship Time",(Position +1),2);
                  OutFldArray[i] := Hour + Minute;
                END ELSE
                  OutFldArray[i] := DELCHR(RoutingReq."Ready To Ship Time",'=',':');
            END;

          'Latest Ship Time':
            BEGIN
              Position := STRPOS(RoutingReq."Latest Ship Time",':');
              IF Position <> 0 THEN
                IF Position < 3 THEN BEGIN
                  Hour := COPYSTR(RoutingReq."Latest Ship Time",1,1);
                  FOR Counter := 1 TO 12 DO
                    Hour := INCSTR(Hour);
                  Minute := COPYSTR(RoutingReq."Latest Ship Time",(Position +1),2);
                  OutFldArray[i] := Hour + Minute;
                END ELSE
                  OutFldArray[i] := DELCHR(RoutingReq."Latest Ship Time",'=',':');
            END;

          'Routing Request Type':
            CASE RoutingReq."Routing Type" OF
              RoutingReq."Routing Type"::Original:
                OutFldArray[i] := '00';
              RoutingReq."Routing Type"::Confirmation:
                OutFldArray[i] := '06';
              RoutingReq."Routing Type"::Change:
                OutFldArray[i] := '04';
              RoutingReq."Routing Type"::Cancellation:
                OutFldArray[i] := '01';
            END;

          'Today':
            DateVariable := TODAY;

          'No. of Packed Packages (Order)':
            BEGIN
              RoutingReqLine.RESET;
              RoutingReqLine.SETRANGE("Routing Request No.",RoutingReq."No.");
              RoutingReqLine.SETRANGE("Document No.",RoutingRequestLine."Document No.");
              IF RoutingReqLine.FIND('-') THEN BEGIN
                IF SalesHeader.GET(
                  SalesHeader."Document Type"::Order,RoutingReqLine."Document No.")
                THEN BEGIN
                  Package.RESET;
                  Package.SETCURRENTKEY(
                    "Source Type","Source Subtype","Source ID","Location Code");
                  Package.SETRANGE("Source Type",DATABASE::"Sales Header");
                  Package.SETRANGE("Source Subtype",1);
                  Package.SETRANGE("Source ID",SalesHeader."No.");
                  IF Package.FIND('-') THEN
                    REPEAT
                      PackageLine.RESET;
                      PackageLine.SETRANGE("Package No.",Package."No.");
                      PackageLine.SETRANGE(Type,PackageLine.Type::Package);
                      IF NOT PackageLine.FIND('-') THEN
                        IntegerVariable := IntegerVariable + 1;
                    UNTIL Package.NEXT = 0;
                END;
              END;
            END;

          'No. of Packed Packages (Shipment)':
            BEGIN
              RoutingReqLine.RESET;
              RoutingReqLine.SETRANGE("Routing Request No.",RoutingReq."No.");
              IF RoutingReqLine.FIND('-') THEN
                REPEAT
                  IF SalesHeader.GET(
                    SalesHeader."Document Type"::Order,RoutingReqLine."Document No.")
                  THEN BEGIN
                    Package.RESET;
                    Package.SETCURRENTKEY(
                      "Source Type","Source Subtype","Source ID","Location Code");
                    Package.SETRANGE("Source Type",DATABASE::"Sales Header");
                    Package.SETRANGE("Source Subtype",1);
                    Package.SETRANGE("Source ID",SalesHeader."No.");
                    IF Package.FIND('-') THEN
                      REPEAT
                        PackageLine.RESET;
                        PackageLine.SETRANGE("Package No.",Package."No.");
                        PackageLine.SETRANGE(Type,PackageLine.Type::Package);
                        IF NOT PackageLine.FIND('-') THEN
                          IntegerVariable := IntegerVariable + 1;
                      UNTIL Package.NEXT = 0;
                  END;
                UNTIL RoutingReqLine.NEXT = 0;
            END;

          'Total Pallets':
            BEGIN
              RoutingReqLine.RESET;
              RoutingReqLine.SETRANGE("Routing Request No.",RoutingReq."No.");
              IF RoutingReqLine.FIND('-') THEN
                REPEAT
                  IF SalesHeader.GET(
                    SalesHeader."Document Type"::Order,RoutingReqLine."Document No.")
                  THEN BEGIN
                    Package.RESET;
                    Package.SETCURRENTKEY(
                      "Source Type","Source Subtype","Source ID","Location Code");
                    Package.SETRANGE("Source Type",DATABASE::"Sales Header");
                    Package.SETRANGE("Source Subtype",1);
                    Package.SETRANGE("Source ID",SalesHeader."No.");
                    IF Package.FIND('-') THEN
                      REPEAT
                        PackageLine.RESET;
                        PackageLine.SETRANGE("Package No.",Package."No.");
                        PackageLine.SETRANGE(Type,PackageLine.Type::Package);
                        IF PackageLine.FIND('-') THEN
                          IntegerVariable := IntegerVariable + 1;
                      UNTIL Package.NEXT = 0;
                  END;
                UNTIL RoutingReqLine.NEXT = 0;
            END;
        END;
      END;
    END;

    PROCEDURE SalesCrMemoSendEDIOut@1240020012(EDIElement@1240020008 : Record 14002355;VAR OutFldArray@1240020007 : ARRAY [100] OF Text[250];VAR DecimalVariable@1240020006 : Decimal;VAR IntegerVariable@1240020005 : Integer;VAR DateVariable@1240020004 : Date;VAR BooleanVariable@1240020003 : Boolean;VAR TimeVariable@1240020002 : Time;VAR DateTimeVariable@1240020001 : DateTime;i@1240020000 : Integer);
    VAR
      PaymentTerms2@1240020009 : Record 3;
      SalesCrMemoLine2@1240020015 : Record 115;
      EDISendDocField2@1240020012 : Record 14002370;
      NetDays@1240020016 : Integer;
      DiscDays@1240020017 : Integer;
      DiscAmt@1240020018 : Decimal;
      DiscountedAmt@1240020019 : Decimal;
      DiscPercent@1240020020 : Decimal;
      InvoiceTax@1240020010 : Decimal;
      InvoiceTaxPercent@1240020011 : Decimal;
      InvDiscAmount@1240020014 : Decimal;
      ILidx@1240020022 : Integer;
      InvoiceLineNoArray@1240020031 : ARRAY [1000] OF Integer;
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;
      InvoiceTax := 0;
      InvoiceTaxPercent := 0;

      EDISetup.GET;
      SalesCrMemoHeader.CALCFIELDS(Amount,"Amount Including VAT");

      IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN BEGIN
        CASE EDIElement."Field Name" OF
          'ISA Control Number':
            OutFldArray[i] := EDITemplate."Export ISA Control No.";
          'IEA Control Number':
            OutFldArray[i] := EDITemplate."Export ISA Control No.";
          'GS Control Number':
            OutFldArray[i] := EDITemplate."Export GS Control No.";
          'GE Control Number':
            OutFldArray[i] := EDITemplate."Export GS Control No.";
          'ST Control Number':
            OutFldArray[i] := EDITemplate."Export ST Control No.";
          'SE Control Number':
            OutFldArray[i] := EDITemplate."Export ST Control No.";

          'Invoice Tax':
            BEGIN
              InvoiceTax := 0;
              InvoiceTax := SalesCrMemoHeader."Amount Including VAT" - SalesCrMemoHeader.Amount;
              DecimalVariable := InvoiceTax;
            END;

          'Net Ship Wgt.':
            DecimalVariable := NetWeight;

          'Gross Ship Wgt.':
            DecimalVariable := GrossWeight;

          'Total Pallet Weight':
            DecimalVariable := PalletWeight;

          'Total Freight Amt.':
            DecimalVariable := FreightAmt;

          'Net Unit Price':
            IF SalesCrMemoLine.Quantity > 0 THEN
              DecimalVariable := SalesCrMemoLine.Amount / SalesCrMemoLine.Quantity
            ELSE
              DecimalVariable := 0;

          'Each Price':
            IF SalesCrMemoLine.Quantity > 0 THEN
              DecimalVariable :=
                SalesCrMemoLine."Unit Price" / SalesCrMemoLine."Qty. per Unit of Measure"
            ELSE
              DecimalVariable := 0;

          'Inv. Amt. Before Inv. Disc.':
            BEGIN
              InvDiscAmount := 0;
              SalesCrMemoLine2.SETRANGE("Document No.",SalesCrMemoHeader."No.");
              IF SalesCrMemoLine2.FIND('-') THEN
                REPEAT
                  InvDiscAmount := InvDiscAmount + SalesCrMemoLine2."Inv. Discount Amount";
                UNTIL SalesCrMemoLine2.NEXT = 0;
              DecimalVariable := SalesCrMemoHeader.Amount + InvDiscAmount;
            END;

          'Pmt. Net Days':
            BEGIN
              IF SalesCrMemoHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesCrMemoHeader."Payment Terms Code");
                NetDays := (CALCDATE(PaymentTerms."Due Date Calculation",TODAY) - TODAY);
              END ELSE
                NetDays := 0;
              IntegerVariable := NetDays;
            END;

          'Pmt. Disc. Days':
            BEGIN
              IF SalesCrMemoHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesCrMemoHeader."Payment Terms Code");
                DiscDays := (CALCDATE(PaymentTerms."Discount Date Calculation",TODAY) - TODAY);
              END ELSE
                DiscDays := 0;
              IntegerVariable := DiscDays;
            END;

          'Pmt. Disc. Amt.':
            BEGIN
              IF SalesInvoiceHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesCrMemoHeader."Payment Terms Code");
                DiscAmt := ROUND(
                  (SalesCrMemoHeader."Amount Including VAT" * PaymentTerms."Discount %") / 100);
              END ELSE
                DiscAmt := 0;
              DecimalVariable := DiscAmt;
            END;

          'Pmt. Discounted Amt.':
            BEGIN
              DiscAmt := 0;
              IF SalesCrMemoHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesCrMemoHeader."Payment Terms Code");
                DiscAmt := ROUND(
                  (SalesCrMemoHeader."Amount Including VAT" * PaymentTerms."Discount %") / 100);
                DiscountedAmt := SalesCrMemoHeader."Amount Including VAT" - DiscAmt;
              END ELSE
                DiscountedAmt := 0;
              DecimalVariable := DiscountedAmt;
            END;

          'Pmt. Disc. Percent':
            BEGIN
              IF SalesCrMemoHeader."Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms2.GET(SalesCrMemoHeader."Payment Terms Code");
                DiscPercent := PaymentTerms."Discount %";
              END ELSE
                DiscPercent := 0;
              DecimalVariable := DiscPercent;
            END;

          'Total Units':
            DecimalVariable := TotalUnits;

          'Total Base Units':
            DecimalVariable := TotalBaseUnits;

          'Line Number':
            BEGIN
              IF EDIDocument."Base Line Count on Segment" <> '' THEN BEGIN
                LineNumber := 0;
                EDISendDocField2.RESET;
                EDISendDocField2.SETRANGE("No.",EDISendDocHdr."No.");
                EDISendDocField2.SETRANGE(Segment,EDIDocument."Base Line Count on Segment");
                EDISendDocField2.SETRANGE("New Segment",TRUE);
                IF EDISendDocField2.FIND('-') THEN
                  REPEAT
                    LineNumber := LineNumber + 1;
                  UNTIL EDISendDocField2.NEXT = 0;
                IntegerVariable := LineNumber;
              END ELSE
                IntegerVariable := LineNumber;
            END;

          'PO Line Number':
            BEGIN
              SalesCrMemoLine2.RESET;
              SalesCrMemoLine2.SETRANGE("Document No.",SalesCrMemoHeader."No.");
              SalesCrMemoLine2.SETFILTER("No.",'<>%1','');
              IF NOT EDIDocument."Export Zero Qty. Lines" THEN
                SalesCrMemoLine2.SETFILTER(Quantity,'>0');
              ILidx := 0;
              IF SalesCrMemoLine2.FIND('-') THEN
                REPEAT
                  ILidx := ILidx + 1;
                  InvoiceLineNoArray[ILidx] := SalesCrMemoLine2."Line No.";
                UNTIL SalesCrMemoLine2.NEXT = 0;

              ILidx := 0;
              REPEAT
                ILidx := ILidx + 1;
              UNTIL InvoiceLineNoArray[ILidx] = SalesCrMemoLine."Line No.";
              IntegerVariable := ILidx;
            END;

          'Total Segments':
            IntegerVariable := TotalSegments;

          'My Partner ID':
            OutFldArray[i] := EDITemplate."My Trading Partner No.";

          'Partner ID':
            OutFldArray[i] := EDITradePartner."No.";

          'Time':
            BEGIN
              IF EDITemplate."File Format" = EDITemplate."File Format"::XML THEN BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 5;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0>:<Minutes,2>');
              END ELSE BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 4;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0><Minutes,2>');
              END;
            END;

          'Today':
            DateVariable := TODAY;

          'Transaction Status':
            IF EDIDocument.Status = EDIDocument.Status::Test THEN
              OutFldArray[i] := 'Test'
            ELSE
              OutFldArray[i] := 'Production';

          'Transaction Version':
            OutFldArray[i] := EDIDocument.Version;

          'Total Inv. Discount':
            DecimalVariable := TotalInvDiscount;

          'Invoice Tax Percent':
            BEGIN
              InvoiceTax := 0;
              InvoiceTaxPercent := 0;
              InvoiceTax := SalesCrMemoHeader."Amount Including VAT" - SalesCrMemoHeader.Amount;
              IF SalesCrMemoHeader.Amount > 0 THEN
                InvoiceTaxPercent := (InvoiceTax / SalesCrMemoHeader.Amount) * 100;
              IF EDIElement."Round Value" THEN
                DecimalVariable := InvoiceTaxPercent
              ELSE
                DecimalVariable := RoundValue(InvoiceTaxPercent,EDIElement);
            END;

          'Total Dropship Amt.':
            DecimalVariable := DropShipAmt;

          'Total Inv. Line Discount':
            DecimalVariable := TotalInvLineDiscount;
        END;
      END;
    END;

    PROCEDURE ReturnReceiptSendEDIOut@1240020016(EDIElement@1240020008 : Record 14002355;VAR OutFldArray@1240020007 : ARRAY [100] OF Text[250];VAR DecimalVariable@1240020006 : Decimal;VAR IntegerVariable@1240020005 : Integer;VAR DateVariable@1240020004 : Date;VAR BooleanVariable@1240020003 : Boolean;VAR TimeVariable@1240020002 : Time;VAR DateTimeVariable@1240020001 : DateTime;i@1240020000 : Integer);
    VAR
      EDISendDocField2@1240020009 : Record 14002370;
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;

      EDISetup.GET;

      IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN BEGIN
        CASE EDIElement."Field Name" OF
          'ISA Control Number':
            OutFldArray[i] := EDITemplate."Export ISA Control No.";
          'IEA Control Number':
            OutFldArray[i] := EDITemplate."Export ISA Control No.";
          'GS Control Number':
            OutFldArray[i] := EDITemplate."Export GS Control No.";
          'GE Control Number':
            OutFldArray[i] := EDITemplate."Export GS Control No.";
          'ST Control Number':
            OutFldArray[i] := EDITemplate."Export ST Control No.";
          'SE Control Number':
            OutFldArray[i] := EDITemplate."Export ST Control No.";

          'Net Receipt Wgt.':
            DecimalVariable := NetWeight;

          'Gross Receipt Wgt.':
            DecimalVariable := GrossWeight;

          'Total Units':
            DecimalVariable := TotalUnits;

          'Total Base Units':
            DecimalVariable := TotalBaseUnits;

          'Line Number':
            BEGIN
              IF EDIDocument."Base Line Count on Segment" <> '' THEN BEGIN
                LineNumber := 0;
                EDISendDocField2.RESET;
                EDISendDocField2.SETRANGE("No.",EDISendDocHdr."No.");
                EDISendDocField2.SETRANGE(Segment,EDIDocument."Base Line Count on Segment");
                EDISendDocField2.SETRANGE("New Segment",TRUE);
                IF EDISendDocField2.FIND('-') THEN
                  REPEAT
                    LineNumber := LineNumber + 1;
                  UNTIL EDISendDocField2.NEXT = 0;
                IntegerVariable := LineNumber;
              END ELSE
                IntegerVariable := LineNumber;
            END;

          'Total Segments':
            IntegerVariable := TotalSegments;

          'Time':
            BEGIN
              IF EDITemplate."File Format" = EDITemplate."File Format"::XML THEN BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 5;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0>:<Minutes,2>');
              END ELSE BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 4;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0><Minutes,2>');
              END;
            END;

          'Today':
            DateVariable := TODAY;
        END;
      END;
    END;

    PROCEDURE InventoryAdviceSendEDIOut@1240020018(EDIElement@1240020008 : Record 14002355;VAR OutFldArray@1240020007 : ARRAY [100] OF Text[250];VAR DecimalVariable@1240020006 : Decimal;VAR IntegerVariable@1240020005 : Integer;VAR DateVariable@1240020004 : Date;VAR BooleanVariable@1240020003 : Boolean;VAR TimeVariable@1240020002 : Time;VAR DateTimeVariable@1240020001 : DateTime;i@1240020000 : Integer);
    VAR
      EDISendDocField2@1240020009 : Record 14002370;
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;

      EDISetup.GET;

      IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN BEGIN
        CASE EDIElement."Field Name" OF
          'ISA Control Number':
            OutFldArray[i] := EDITemplate."Export ISA Control No.";
          'IEA Control Number':
            OutFldArray[i] := EDITemplate."Export ISA Control No.";
          'GS Control Number':
            OutFldArray[i] := EDITemplate."Export GS Control No.";
          'GE Control Number':
            OutFldArray[i] := EDITemplate."Export GS Control No.";
          'ST Control Number':
            OutFldArray[i] := EDITemplate."Export ST Control No.";
          'SE Control Number':
            OutFldArray[i] := EDITemplate."Export ST Control No.";

          'Line Number':
            BEGIN
              IF EDIDocument."Base Line Count on Segment" <> '' THEN BEGIN
                LineNumber := 0;
                EDISendDocField2.RESET;
                EDISendDocField2.SETRANGE("No.",EDISendDocHdr."No.");
                EDISendDocField2.SETRANGE(Segment,EDIDocument."Base Line Count on Segment");
                EDISendDocField2.SETRANGE("New Segment",TRUE);
                IF EDISendDocField2.FIND('-') THEN
                  REPEAT
                    LineNumber := LineNumber + 1;
                  UNTIL EDISendDocField2.NEXT = 0;
                IntegerVariable := LineNumber;
              END ELSE
                IntegerVariable := LineNumber;
            END;

          'Transaction Purpose Code':
            CASE InventoryAdviceHdr."Transaction Purpose Code" OF
              InventoryAdviceHdr."Transaction Purpose Code"::Original:
                OutFldArray[i] := '00';
              InventoryAdviceHdr."Transaction Purpose Code"::Duplicate:
                OutFldArray[i] := '07';
            END;

          'Today':
            DateVariable := TODAY;

          'Time':
            BEGIN
              IF EDITemplate."File Format" = EDITemplate."File Format"::XML THEN BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 5;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0>:<Minutes,2>');
              END ELSE BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 4;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0><Minutes,2>');
              END;
            END;

          'Time HHMMSS':
            BEGIN
              IF EDITemplate."File Format" = EDITemplate."File Format"::XML THEN BEGIN
                 IF EDIElement."Minimum Length" = 0 THEN
                   EDIElement."Minimum Length" := 8;
                 OutFldArray[i] :=
                   FORMAT(
                     TIME,EDIElement.Length,'<Hours24,2><filler character,0>:<Minutes,2>:<Seconds,2>');
               END ELSE BEGIN
                 IF EDIElement."Minimum Length" = 0 THEN
                   EDIElement."Minimum Length" := 6;
                 OutFldArray[i] :=
                   FORMAT(
                     TIME,EDIElement.Length,'<Hours24,2><filler character,0><Minutes,2><Seconds,2>');
               END;
            END;
        END;
      END;
    END;

    PROCEDURE PurchasePaymentSendEDIOut@1240020019(EDIElement@1240020008 : Record 14002355;VAR OutFldArray@1240020007 : ARRAY [100] OF Text[250];VAR DecimalVariable@1240020006 : Decimal;VAR IntegerVariable@1240020005 : Integer;VAR DateVariable@1240020004 : Date;VAR BooleanVariable@1240020003 : Boolean;VAR TimeVariable@1240020002 : Time;VAR DateTimeVariable@1240020001 : DateTime;i@1240020000 : Integer);
    VAR
      AppliedVendLedgEntry@1240020009 : Record 25;
      PostingDateFound@1240020010 : Boolean;
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;

      EDISetup.GET;

      IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN BEGIN
        CASE EDIElement."Field Name" OF
          'Payment Method Code':
            CASE PurchasePaymentAdvice."Payment Type" OF
              'Computer Check':
                OutFldArray[i] := 'CHK';
              'Manual Check':
                OutFldArray[i] := 'CHK';
              ' ','Electronic Payment':
                OutFldArray[i] := 'ACH';
          END;

        'Document Type':
          CASE PurchasePaymentAdviceLine."Document Type" OF
            'Credit Memo':
              OutFldArray[i] := 'IX';
            'Invoice':
              OutFldArray[i] := 'IV';
          END;

        'Document Posting Date':
          BEGIN
            PostingDateFound := FALSE;
            AppliedVendLedgEntry.RESET;
            AppliedVendLedgEntry.SETCURRENTKEY("Document No.","Document Type","Vendor No.");
            AppliedVendLedgEntry.SETRANGE("Document No.",PurchasePaymentAdviceLine."Document No.");
            AppliedVendLedgEntry.SETRANGE("Vendor No.",PurchasePaymentAdvice.Payee);
            AppliedVendLedgEntry.SETRANGE(
              "External Document No.",PurchasePaymentAdviceLine."Vendor Document No.");
            AppliedVendLedgEntry.SETRANGE(
              "Entry No.",PurchasePaymentAdviceLine."Vendor Ledger Entry No.");
            IF AppliedVendLedgEntry.FIND('-') THEN
              REPEAT
                IF FORMAT(AppliedVendLedgEntry."Document Type") =
                  PurchasePaymentAdviceLine."Document Type" THEN
                    BEGIN
                      DateVariable := AppliedVendLedgEntry."Posting Date";
                      PostingDateFound := TRUE;
                    END;
              UNTIL (AppliedVendLedgEntry.NEXT = 0) OR (PostingDateFound = TRUE);
          END;

          'Today':
            DateVariable := TODAY;

          'Time':
            BEGIN
              IF EDITemplate."File Format" = EDITemplate."File Format"::XML THEN BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 5;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0>:<Minutes,2>');
              END ELSE BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 4;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0><Minutes,2>');
              END;
            END;
        END;
      END;
    END;

    PROCEDURE ReturnShipmentSendEDIOut@1240020020(EDIElement@1240020008 : Record 14002355;VAR OutFldArray@1240020007 : ARRAY [100] OF Text[250];VAR DecimalVariable@1240020006 : Decimal;VAR IntegerVariable@1240020005 : Integer;VAR DateVariable@1240020004 : Date;VAR BooleanVariable@1240020003 : Boolean;VAR TimeVariable@1240020002 : Time;VAR DateTimeVariable@1240020001 : DateTime;i@1240020000 : Integer);
    VAR
      EDISendDocField2@1240020009 : Record 14002370;
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;

      EDISetup.GET;

      IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN BEGIN
        CASE EDIElement."Field Name" OF
          'Net Return Wgt.':
            DecimalVariable := NetWeight;

          'Gross Return Wgt.':
            DecimalVariable := GrossWeight;

          'Each Cost':
            IF ReturnShipmentLine.Quantity > 0 THEN
              DecimalVariable :=
                ReturnShipmentLine."Direct Unit Cost" / ReturnShipmentLine."Qty. per Unit of Measure"
            ELSE
              DecimalVariable := 0;

          'Total Units':
            DecimalVariable := TotalUnits;

          'Total Base Units':
            DecimalVariable := TotalBaseUnits;

          'Line Number':
            BEGIN
              IF EDIDocument."Base Line Count on Segment" <> '' THEN BEGIN
                LineNumber := 0;
                EDISendDocField2.RESET;
                EDISendDocField2.SETRANGE("No.",EDISendDocHdr."No.");
                EDISendDocField2.SETRANGE(Segment,EDIDocument."Base Line Count on Segment");
                EDISendDocField2.SETRANGE("New Segment",TRUE);
                IF EDISendDocField2.FIND('-') THEN
                  REPEAT
                    LineNumber := LineNumber + 1;
                  UNTIL EDISendDocField2.NEXT = 0;
                IntegerVariable := LineNumber;
              END ELSE
                IntegerVariable := LineNumber;
            END;

          'Total Segments':
            IntegerVariable := TotalSegments;

          'Time':
            BEGIN
              IF EDITemplate."File Format" = EDITemplate."File Format"::XML THEN BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 5;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0>:<Minutes,2>');
              END ELSE BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 4;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0><Minutes,2>');
              END;
            END;

          'Today':
            DateVariable := TODAY;
        END;
      END;
    END;

    PROCEDURE TransferOrderSendEDIOut@1240020023(EDIElement@1240020008 : Record 14002355;VAR OutFldArray@1240020007 : ARRAY [100] OF Text[250];VAR DecimalVariable@1240020006 : Decimal;VAR IntegerVariable@1240020005 : Integer;VAR DateVariable@1240020004 : Date;VAR BooleanVariable@1240020003 : Boolean;VAR TimeVariable@1240020002 : Time;VAR DateTimeVariable@1240020001 : DateTime;i@1240020000 : Integer);
    VAR
      PostedPackage@1240020009 : Record 14000704;
      Package@1240020010 : Record 14000701;
      EDISendDocField2@1240020011 : Record 14002370;
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;

      EDISetup.GET;

      IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN BEGIN
        CASE EDIElement."Field Name" OF
          'ISA Control Number':
            OutFldArray[i] := EDITemplate."Export ISA Control No.";
          'IEA Control Number':
            OutFldArray[i] := EDITemplate."Export ISA Control No.";
          'GS Control Number':
            OutFldArray[i] := EDITemplate."Export GS Control No.";
          'GE Control Number':
            OutFldArray[i] := EDITemplate."Export GS Control No.";
          'ST Control Number':
            OutFldArray[i] := EDITemplate."Export ST Control No.";
          'SE Control Number':
            OutFldArray[i] := EDITemplate."Export ST Control No.";

          'Net Ship Wgt.':
            DecimalVariable := NetWeight;

          'Gross Ship Wgt.':
            DecimalVariable := GrossWeight;

          'Total Pallet Weight':
            DecimalVariable := PalletWeight;

          'Total Packages':
            BEGIN
              DecimalVariable := 0;
              IF EDIDocument."Export Zero Qty. Lines" THEN BEGIN
                PostedPackage.RESET;
                PostedPackage.SETCURRENTKEY(
                  "Source Type","Source Subtype","Posted Source ID");
                PostedPackage.SETRANGE("Source Type",DATABASE::"Transfer Header");
                PostedPackage.SETRANGE("Source Subtype",0);
                PostedPackage.SETRANGE("Source ID",TransferHeader."No.");
                IF PostedPackage.FIND('-') THEN
                  REPEAT
                    DecimalVariable := DecimalVariable + 1;
                   UNTIL PostedPackage.NEXT = 0;
              END ELSE BEGIN
                Package.RESET;
                Package.SETCURRENTKEY(
                  "Source Type","Source Subtype","Source ID","Location Code");
                Package.SETRANGE("Source Type",DATABASE::"Transfer Header");
                Package.SETRANGE("Source Subtype",0);
                Package.SETRANGE("Source ID",TransferHeader."No.");
                IF Package.FIND('-') THEN
                  REPEAT
                    DecimalVariable := DecimalVariable + 1;
                   UNTIL Package.NEXT = 0;
              END;
            END;

          'Total Units':
            DecimalVariable := TotalUnits;

          'Total Units (Base)':
            DecimalVariable := TotalBaseUnits;

          'Line Number':
            BEGIN
              IF EDIDocument."Base Line Count on Segment" <> '' THEN BEGIN
                LineNumber := 0;
                EDISendDocField2.RESET;
                EDISendDocField2.SETRANGE("No.",EDISendDocHdr."No.");
                EDISendDocField2.SETRANGE(Segment,EDIDocument."Base Line Count on Segment");
                EDISendDocField2.SETRANGE("New Segment",TRUE);
                IF EDISendDocField2.FIND('-') THEN
                  REPEAT
                    LineNumber := LineNumber + 1;
                  UNTIL EDISendDocField2.NEXT = 0;
                IntegerVariable := LineNumber;
              END ELSE
                IntegerVariable := LineNumber;
            END;

          'Time':
            BEGIN
              IF EDITemplate."File Format" = EDITemplate."File Format"::XML THEN BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 5;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0>:<Minutes,2>');
              END ELSE BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 4;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0><Minutes,2>');
              END;
            END;

          'Today':
            DateVariable := TODAY;
        END;
      END;
    END;

    PROCEDURE ElectronicBOLSendEDIOut@1240020027(EDIElement@1240020008 : Record 14002355;VAR OutFldArray@1240020007 : ARRAY [100] OF Text[250];VAR DecimalVariable@1240020006 : Decimal;VAR IntegerVariable@1240020005 : Integer;VAR DateVariable@1240020004 : Date;VAR BooleanVariable@1240020003 : Boolean;VAR TimeVariable@1240020002 : Time;VAR DateTimeVariable@1240020001 : DateTime;i@1240020000 : Integer);
    VAR
      EDISendDocField2@1240020010 : Record 14002370;
      EDISendElectronicBOL@1240020009 : Codeunit 14050903;
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;

      EDISetup.GET;
      BillOfLading.CALCFIELDS("Posted Weight");
      PostedPackage.CALCFIELDS("Exist in Other Package");

      IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN BEGIN
        CASE EDIElement."Field Name" OF
          'Time':
            BEGIN
              IF EDITemplate."File Format" = EDITemplate."File Format"::XML THEN BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 5;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0>:<Minutes,2>');
              END ELSE BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 4;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0><Minutes,2>');
              END;
            END;

          'Today':
            DateVariable := TODAY;

          'Line Number':
            BEGIN
              IF EDIDocument."Base Line Count on Segment" <> '' THEN BEGIN
                LineNumber := 0;
                EDISendDocField2.RESET;
                EDISendDocField2.SETRANGE("No.",EDISendDocHdr."No.");
                EDISendDocField2.SETRANGE(Segment,EDIDocument."Base Line Count on Segment");
                EDISendDocField2.SETRANGE("New Segment",TRUE);
                IF EDISendDocField2.FIND('-') THEN
                  REPEAT
                    LineNumber := LineNumber + 1;
                  UNTIL EDISendDocField2.NEXT = 0;
                IntegerVariable := LineNumber;
              END ELSE
                IntegerVariable := LineNumber;
            END;

          'Handling Unit Type':
            BEGIN
              CASE
                BillOfLadingInfoLine."Handling Unit Type" OF
                  BillOfLadingInfoLine."Handling Unit Type"::Cartons:
                    OutFldArray[i] := 'CTN';
                  BillOfLadingInfoLine."Handling Unit Type"::Pallets:
                    OutFldArray[i] := 'PLT';
                  BillOfLadingInfoLine."Handling Unit Type"::" ":
                    OutFldArray[i] := '';
              END;
            END;

          'Package Type':
            BEGIN
              CASE
                BillOfLadingInfoLine."Package Type" OF
                  BillOfLadingInfoLine."Package Type"::Cartons:
                    OutFldArray[i] := 'CTN';
                  BillOfLadingInfoLine."Package Type"::Pallets:
                    OutFldArray[i] := 'PLT';
              END;
            END;

          'External Doc. No.':
            BEGIN
              EDISendElectronicBOL.RepeatSegment;
              OutFldArray[i] := SalesShipmentHdrTmp."External Document No.";
            END;

          'Package UCC No.':
            OutFldArray[i] := PostedPackage."UCC No.";
        END;
      END;
    END;

    PROCEDURE TransferShipmentSendEDIOut@1240020031(EDIElement@1240020008 : Record 14002355;VAR OutFldArray@1240020007 : ARRAY [100] OF Text[250];VAR DecimalVariable@1240020006 : Decimal;VAR IntegerVariable@1240020005 : Integer;VAR DateVariable@1240020004 : Date;VAR BooleanVariable@1240020003 : Boolean;VAR TimeVariable@1240020002 : Time;VAR DateTimeVariable@1240020001 : DateTime;i@1240020000 : Integer);
    VAR
      PostedPackage@1240020009 : Record 14000704;
      Package@1240020010 : Record 14000701;
      EDISendDocField2@1240020011 : Record 14002370;
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;

      IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN BEGIN
        CASE EDIElement."Field Name" OF
          'ISA Control Number':
            OutFldArray[i] := EDITemplate."Export ISA Control No.";
          'IEA Control Number':
            OutFldArray[i] := EDITemplate."Export ISA Control No.";
          'GS Control Number':
            OutFldArray[i] := EDITemplate."Export GS Control No.";
          'GE Control Number':
            OutFldArray[i] := EDITemplate."Export GS Control No.";
          'ST Control Number':
            OutFldArray[i] := EDITemplate."Export ST Control No.";
          'SE Control Number':
            OutFldArray[i] := EDITemplate."Export ST Control No.";

          'Net Ship Wgt.':
            DecimalVariable := NetWeight;

          'Gross Ship Wgt.':
            DecimalVariable := GrossWeight;

          'Total Pallet Weight':
            DecimalVariable := PalletWeight;

          'Total Packages':
            BEGIN
              DecimalVariable := 0;
              PostedPackage.RESET;
              PostedPackage.SETCURRENTKEY(
                "Source Type","Source Subtype","Posted Source ID","Bill of Lading No.");
              PostedPackage.SETRANGE("Source Type",DATABASE::"Transfer Header");
              PostedPackage.SETRANGE("Source Subtype",0);
              PostedPackage.SETRANGE("Posted Source ID",TransferShipmentHeader."No.");
              IF PostedPackage.FIND('-') THEN
                REPEAT
                  DecimalVariable := DecimalVariable + 1;
                 UNTIL PostedPackage.NEXT = 0;
            END;

          'Total Units':
            DecimalVariable := TotalUnits;

          'Total Units (Base)':
            DecimalVariable := TotalBaseUnits;

          'Line Number':
            BEGIN
              IF EDIDocument."Base Line Count on Segment" <> '' THEN BEGIN
                LineNumber := 0;
                EDISendDocField2.RESET;
                EDISendDocField2.SETRANGE("No.",EDISendDocHdr."No.");
                EDISendDocField2.SETRANGE(Segment,EDIDocument."Base Line Count on Segment");
                EDISendDocField2.SETRANGE("New Segment",TRUE);
                IF EDISendDocField2.FIND('-') THEN
                  REPEAT
                    LineNumber := LineNumber + 1;
                  UNTIL EDISendDocField2.NEXT = 0;
                IntegerVariable := LineNumber;
              END ELSE
                IntegerVariable := LineNumber;
            END;

          'Time':
            BEGIN
              IF EDITemplate."File Format" = EDITemplate."File Format"::XML THEN BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 5;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0>:<Minutes,2>');
              END ELSE BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 4;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0><Minutes,2>');
              END;
            END;

          'Today':
            DateVariable := TODAY;
        END;
      END;
    END;

    PROCEDURE ShipmentAdviceSendEDIOut@1240020033(EDIElement@1240020008 : Record 14002355;VAR OutFldArray@1240020007 : ARRAY [100] OF Text[250];VAR DecimalVariable@1240020006 : Decimal;VAR IntegerVariable@1240020005 : Integer;VAR DateVariable@1240020004 : Date;VAR BooleanVariable@1240020003 : Boolean;VAR TimeVariable@1240020002 : Time;VAR DateTimeVariable@1240020001 : DateTime;i@1240020000 : Integer);
    VAR
      PaymentTerms2@1240020009 : Record 3;
      PostedPackage2@1240020010 : Record 14000704;
      SalesLine2@1240020011 : Record 37;
      SalesShipmentLine2@1240020012 : Record 111;
      SalesInvoiceHdr2@1240020018 : Record 112;
      SalesInvoiceLine2@1240020013 : Record 113;
      EDISendDocField2@1240020014 : Record 14002370;
      OrderedQuantity@1240020015 : Decimal;
      InvGrossAmt@1240020016 : Decimal;
      InvDiscAmount@1240020017 : Decimal;
      PmtNetDays@1240020026 : Integer;
      PmtDiscDays@1240020025 : Integer;
      PmtDiscAmt@1240020024 : Decimal;
      PmtDiscPercent@1240020023 : Decimal;
      PmtDiscountedAmt@1240020022 : Decimal;
      InvoiceTax@1240020020 : Decimal;
      InvoiceTaxPercent@1240020019 : Decimal;
      OrderBackOrderAllowed@1240020027 : Boolean;
      ItemBackOrderAllowed@1240020021 : Boolean;
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;

      IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN BEGIN
        CASE EDIElement."Field Name" OF
          'ISA Control Number':
            OutFldArray[i] := EDITemplate."Export ISA Control No.";
          'IEA Control Number':
            OutFldArray[i] := EDITemplate."Export ISA Control No.";
          'GS Control Number':
            OutFldArray[i] := EDITemplate."Export GS Control No.";
          'GE Control Number':
            OutFldArray[i] := EDITemplate."Export GS Control No.";
          'ST Control Number':
            OutFldArray[i] := EDITemplate."Export ST Control No.";
          'SE Control Number':
            OutFldArray[i] := EDITemplate."Export ST Control No.";

          'Line Number':
            BEGIN
              IF EDIDocument."Base Line Count on Segment" <> '' THEN BEGIN
                LineNumber := 0;
                EDISendDocField2.RESET;
                EDISendDocField2.SETRANGE("No.",EDISendDocHdr."No.");
                EDISendDocField2.SETRANGE(Segment,EDIDocument."Base Line Count on Segment");
                EDISendDocField2.SETRANGE("New Segment",TRUE);
                IF EDISendDocField2.FIND('-') THEN
                  REPEAT
                    LineNumber := LineNumber + 1;
                  UNTIL EDISendDocField2.NEXT = 0;
                IntegerVariable := LineNumber;
              END ELSE
                IntegerVariable := LineNumber;
            END;

          'Net Ship Wgt.':
            DecimalVariable := NetWeight;

          'Gross Ship Wgt.':
            DecimalVariable := GrossWeight;

          'Volume':
            DecimalVariable := PackingVolume;

          'Total Pallet Weight':
            DecimalVariable := PalletWeight;

          'Total Freight Amt.':
            DecimalVariable := FreightAmt;

          'Total Packages':
            BEGIN
              PostedPackage2.RESET;
              PostedPackage2.SETCURRENTKEY(
                "Source Type","Source Subtype","Posted Source ID","Bill of Lading No.");
              PostedPackage2.SETRANGE("Source Type",36);
              PostedPackage2.SETRANGE("Source Subtype",1);
              PostedPackage2.SETRANGE("Posted Source ID",SalesShipmentHeader."No.");
              IF PostedPackage2.FIND('-') THEN
                REPEAT
                  DecimalVariable := DecimalVariable + 1;
                UNTIL PostedPackage2.NEXT = 0;
            END;

          'Total Units':
            DecimalVariable := TotalUnits;

          'Total Base Units':
            DecimalVariable := TotalBaseUnits;

          'Total Segments':
            IntegerVariable := TotalSegments;

          'My Partner ID':
            OutFldArray[i] := EDITemplate."My Trading Partner No.";

          'Partner ID':
            OutFldArray[i] := EDITradePartner."No.";

          'Time':
            BEGIN
              IF EDITemplate."File Format" = EDITemplate."File Format"::XML THEN BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 5;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0>:<Minutes,2>');
              END ELSE BEGIN
                IF EDIElement."Minimum Length" = 0 THEN
                  EDIElement."Minimum Length" := 4;
                OutFldArray[i] :=
                  FORMAT(TIME,EDIElement.Length,'<Hours24,2><filler character,0><Minutes,2>');
              END;
            END;

          'Today':
            DateVariable := TODAY;

          'Ordered Quantity':
            BEGIN
              OrderedQuantity :=  0;
              IF SalesLine2.GET(
                1,SalesShipmentLine."Order No.",SalesShipmentLine."Line No.")
              THEN
                OrderedQuantity := SalesLine2.Quantity
              ELSE BEGIN
                SalesShipmentLine2.RESET;
                SalesShipmentLine2.SETRANGE("Order No.",SalesShipmentHeader."Order No.");
                SalesShipmentLine2.SETRANGE("Order Line No.",SalesShipmentLine."Line No.");
                IF SalesShipmentLine2.FIND('-') THEN;
                REPEAT
                  OrderedQuantity := OrderedQuantity + SalesShipmentLine2.Quantity;
                UNTIL SalesShipmentLine2.NEXT = 0;
              END;
              DecimalVariable := OrderedQuantity;
            END;

          'Outstanding Quantity':
            BEGIN
              IF SalesLine.GET(
                1,SalesShipmentLine."Order No.",SalesShipmentLine."Line No.")
              THEN
                DecimalVariable := SalesLine."Outstanding Quantity"
              ELSE
                DecimalVariable := 0;
            END;

          'Gross Invoice':
            BEGIN
              InvGrossAmt := 0;
              SalesInvoiceLine2.RESET;
              SalesInvoiceLine2.SETRANGE("Document No.",SalesInvoiceHeader."No.");
              SalesInvoiceLine2.SETFILTER(Quantity,'<>%1',0);
              SalesInvoiceLine2.SETRANGE(Type,SalesInvoiceLine2.Type::Item);
              IF SalesInvoiceLine2.FIND('-') THEN
                REPEAT
                  InvGrossAmt :=
                    InvGrossAmt + (SalesInvoiceLine2."Unit Price" * SalesInvoiceLine2.Quantity);
                UNTIL SalesInvoiceLine2.NEXT = 0;
              DecimalVariable := ROUND(InvGrossAmt,0.01);
            END;

          'Inv. Amt. Before Inv. Disc.':
            BEGIN
              InvDiscAmount := 0;
              SalesInvoiceLine2.RESET;
              SalesInvoiceLine2.SETRANGE("Document No.",SalesInvoiceHeader."No.");
              SalesInvoiceLine2.SETFILTER(Quantity,'<>%1',0);
              SalesInvoiceLine2.SETRANGE(Type,SalesInvoiceLine2.Type::Item);
              IF SalesInvoiceLine2.FIND('-') THEN
                REPEAT
                  InvDiscAmount := InvDiscAmount + SalesInvoiceLine2."Inv. Discount Amount";
                UNTIL SalesInvoiceLine2.NEXT = 0;
              DecimalVariable := SalesInvoiceHeader.Amount + InvDiscAmount;
            END;

          'Pmt. Net Days':
            BEGIN
              IF SalesShipmentHeader."Shipment Invoice No." <> '' THEN
                IF SalesInvoiceHdr2.GET(SalesShipmentHeader."Shipment Invoice No.") THEN BEGIN
                  IF SalesInvoiceHdr2."Payment Terms Code" <> '' THEN BEGIN
                    PaymentTerms2.GET(SalesInvoiceHdr2."Payment Terms Code");
                    PmtNetDays := (CALCDATE(PaymentTerms2."Due Date Calculation",TODAY) - TODAY);
                  END ELSE
                    PmtNetDays := 0;
                END;
              IntegerVariable := PmtNetDays;
            END;

          'Pmt. Disc. Days':
            BEGIN
              IF SalesShipmentHeader."Shipment Invoice No." <> '' THEN
                IF SalesInvoiceHdr2.GET(SalesShipmentHeader."Shipment Invoice No.") THEN BEGIN
                  IF SalesInvoiceHdr2."Payment Terms Code" <> '' THEN BEGIN
                    PaymentTerms2.GET(SalesInvoiceHdr2."Payment Terms Code");
                    PmtDiscDays := (CALCDATE(PaymentTerms2."Discount Date Calculation",TODAY) - TODAY);
                  END ELSE
                    PmtDiscDays := 0;
                END;
              IntegerVariable := PmtDiscDays;
            END;

          'Pmt. Disc. Amt.':
            BEGIN
              IF SalesShipmentHeader."Shipment Invoice No." <> '' THEN
                IF SalesInvoiceHdr2.GET(SalesShipmentHeader."Shipment Invoice No.") THEN BEGIN
                  IF SalesInvoiceHdr2."Payment Terms Code" <> '' THEN BEGIN
                    SalesInvoiceHdr2.CALCFIELDS(Amount,"Amount Including VAT");
                    PaymentTerms2.GET(SalesInvoiceHdr2."Payment Terms Code");
                    PmtDiscAmt := ROUND(
                      (SalesInvoiceHdr2."Amount Including VAT" * PaymentTerms2."Discount %") / 100);
                  END ELSE
                    PmtDiscAmt := 0;
                END;
              DecimalVariable := PmtDiscAmt;
            END;

          'Pmt. Discounted Amt.':
            BEGIN
              IF SalesShipmentHeader."Shipment Invoice No." <> '' THEN
                IF SalesInvoiceHdr2.GET(SalesShipmentHeader."Shipment Invoice No.") THEN BEGIN
                  SalesInvoiceHdr2.CALCFIELDS(Amount,"Amount Including VAT");
                  PmtDiscAmt := 0;
                  IF SalesInvoiceHdr2."Payment Terms Code" <> '' THEN BEGIN
                    PaymentTerms2.GET(SalesInvoiceHdr2."Payment Terms Code");
                    PmtDiscAmt := ROUND(
                      (SalesInvoiceHdr2."Amount Including VAT" * PaymentTerms."Discount %") / 100);
                    PmtDiscountedAmt := SalesInvoiceHdr2."Amount Including VAT" - PmtDiscAmt;
                  END ELSE
                    PmtDiscPercent := 0;
                END;
              DecimalVariable := PmtDiscountedAmt;
            END;

          'Pmt. Disc. Percent':
            BEGIN
              IF SalesShipmentHeader."Shipment Invoice No." <> '' THEN
                IF SalesInvoiceHdr2.GET(SalesShipmentHeader."Shipment Invoice No.") THEN BEGIN
                  IF SalesInvoiceHdr2."Payment Terms Code" <> '' THEN BEGIN
                    PaymentTerms2.GET(SalesInvoiceHdr2."Payment Terms Code");
                    PmtDiscPercent := PaymentTerms2."Discount %";
                  END ELSE
                    PmtDiscPercent := 0;
              END;
              DecimalVariable := PmtDiscPercent;
            END;

          'Total Inv. Discount':
            BEGIN
              TotalInvDiscount := 0;
              SalesInvoiceLine2.RESET;
              SalesInvoiceLine2.SETRANGE("Document No.",SalesInvoiceHeader."No.");
              SalesInvoiceLine2.SETFILTER(Quantity,'<>%1',0);
              SalesInvoiceLine2.SETRANGE(Type,SalesInvoiceLine2.Type::Item);
              IF SalesInvoiceLine2.FIND('-') THEN
                REPEAT
                  TotalInvDiscount := TotalInvDiscount + SalesInvoiceLine2."Inv. Discount Amount";
                UNTIL SalesInvoiceLine2.NEXT = 0;
              DecimalVariable := TotalInvDiscount;
            END;

          'Invoice Tax':
            BEGIN
              IF SalesShipmentHeader."Shipment Invoice No." <> '' THEN
                IF SalesInvoiceHdr2.GET(SalesShipmentHeader."Shipment Invoice No.") THEN BEGIN
                  SalesInvoiceHdr2.CALCFIELDS(Amount,"Amount Including VAT");
                  InvoiceTax := SalesInvoiceHdr2."Amount Including VAT" - SalesInvoiceHdr2.Amount;
                  IF SalesInvoiceHdr2.Amount > 0 THEN
                    InvoiceTaxPercent := (InvoiceTax / SalesInvoiceHdr2.Amount) * 100;
                END;
              DecimalVariable := InvoiceTax;
            END;

          'Invoice Tax Percent':
            BEGIN
              IF SalesShipmentHeader."Shipment Invoice No." <> '' THEN
                IF SalesInvoiceHdr2.GET(SalesShipmentHeader."Shipment Invoice No.") THEN BEGIN
                  SalesInvoiceHdr2.CALCFIELDS(Amount,"Amount Including VAT");
                  InvoiceTax := SalesInvoiceHdr2."Amount Including VAT" - SalesInvoiceHdr2.Amount;
                  IF SalesInvoiceHdr2.Amount > 0 THEN
                    InvoiceTaxPercent := (InvoiceTax / SalesInvoiceHdr2.Amount) * 100;
                END;
              DecimalVariable := InvoiceTaxPercent;
            END;

          'Total HL Count':
            IntegerVariable := HLCount;

          'HL1 Count':
             BEGIN
               HLCount := HLCount + 1;
               HLCountArray[1] := HLCount;
               IntegerVariable := HLCount;
             END;

          'HL2 Count':
             BEGIN
               HLCount := HLCount + 1;
               HLCountArray[2] := HLCount;
               IntegerVariable := HLCount;
             END;

          'HL3 Count':
             BEGIN
               HLCount := HLCount + 1;
               HLCountArray[3] := HLCount;
               IntegerVariable := HLCount;
             END;

          'HL4 Count':
             BEGIN
               HLCount := HLCount + 1;
               HLCountArray[4] := HLCount;
               IntegerVariable := HLCount;
             END;

          'HL5 Count':
             BEGIN
               HLCount := HLCount + 1;
               HLCountArray[5] := HLCount;
               IntegerVariable := HLCount;
             END;

          'HL1 Parent':
            IntegerVariable := HLCountArray[1] - 1;

          'HL2 Parent':
            IntegerVariable := HLCountArray[2];

          'HL3 Parent':
            IntegerVariable := HLCountArray[3];

          'HL4 Parent':
            IntegerVariable := HLCountArray[4];

          'HL5 Parent':
            IntegerVariable := HLCountArray[5];

          'Total Sales Shipment Quantity':
            BEGIN
              DecimalVariable := 0;
              SalesShipmentLine2.RESET;
              SalesShipmentLine2.SETRANGE("Document No.",SalesShipmentHeader."No.");
              SalesShipmentLine2.SETRANGE(Type,SalesShipmentLine2.Type::Item);
              IF SalesShipmentLine2.FIND('-') THEN
                REPEAT
                  DecimalVariable := DecimalVariable + SalesShipmentLine2.Quantity;
                UNTIL SalesShipmentLine2.NEXT = 0
              ELSE
                DecimalVariable := 0;
            END;

          'HL Order Status':
            BEGIN
              OrderBackOrderAllowed := FALSE;
              OrderBackOrderAllowed := StatusOfOrder(SalesShipmentHeader);
              IF OrderShippedComplete THEN
                OutFldArray[i] := EDIDocument."Order Shipped Complete Code"
              ELSE BEGIN
                IF EDIDocument."Order Backorder Status Code" <> '' THEN BEGIN
                  IF OrderBackOrderAllowed THEN
                    OutFldArray[i] := EDIDocument."Order Backorder Status Code";
                END ELSE
                  OutFldArray[i] := EDIDocument."Order Shipped Status Code";
              END;
            END;

          'HL Item Status':
            IF SalesShipmentLine."EDI Original Qty." <> 0 THEN
              BEGIN
                ItemBackOrderAllowed := FALSE;
                ItemBackOrderAllowed := StatusOfItem;
                IF ItemShippedComplete THEN
                  OutFldArray[i] := EDIDocument."Item Shipped Complete Code"
                ELSE BEGIN
                  IF EDIDocument."Item Backorder Status Code" <> '' THEN BEGIN
                    IF ItemBackOrderAllowed THEN
                      OutFldArray[i] := EDIDocument."Item Backorder Status Code";
                   END ELSE
                    OutFldArray[i] := EDIDocument."Item Shipped Status Code";
                END;
              END;

          'Outstanding Quantity':
            BEGIN
              SalesLine2.RESET;
              SalesLine2.SETRANGE("Document Type",SalesLine2."Document Type"::Order);
              SalesLine2.SETRANGE("Document No.",SalesShipmentHeader."Order No.");
              SalesLine2.SETRANGE("No.",SalesShipmentLine."No.");
              IF SalesLine2.FIND('-') THEN
                DecimalVariable := SalesLine2."Outstanding Quantity";
            END;
        END;
      END;
    END;

    PROCEDURE SetRecordVariable@1240020000(RecRef@1240020000 : RecordRef;EDITableName@1240020003 : Text[40]);
    BEGIN
      CASE RecRef.NUMBER OF
        3:
          RecRef.SETTABLE(PaymentTerms);
        9:
          BEGIN
            CASE EDITableName OF
             'Sell-to Country':
               RecRef.SETTABLE(SelltoCountry);
              'Bill-to Country':
               RecRef.SETTABLE(BilltoCountry);
              'Ship-to Country':
               RecRef.SETTABLE(ShiptoCountry);
              'Ship-from Country':
               RecRef.SETTABLE(ShipfromCountry);
              'Pay-to Country':
               RecRef.SETTABLE(PaytoCountry);
              'Buy-from Country':
               RecRef.SETTABLE(BuyfromCountry)
              ELSE
                RecRef.SETTABLE(CountryRegion);
            END;
          END;
        10:
          RecRef.SETTABLE(ShipmentMethod);
        13:
          RecRef.SETTABLE(SalespersonPurchaser);
        14:
          BEGIN
            CASE EDITableName OF
              'Ship-to Location':
                RecRef.SETTABLE(ShipToLocation);
              'Ship-from Location':
                RecRef.SETTABLE(ShipFromLocation);
              ELSE
                RecRef.SETTABLE(Location);
            END;
          END;
        18:
          BEGIN
            CASE EDITableName OF
              'Sell-to Customer':
                RecRef.SETTABLE(SellToCustomer);
              'Bill-to Customer':
                RecRef.SETTABLE(BillToCustomer);
              ELSE
                RecRef.SETTABLE(Customer);
            END;
          END;
        23:
          BEGIN
            CASE EDITableName OF
              'Buy-from Vendor':
                RecRef.SETTABLE(BuyFromVendor);
              'Pay-to Vendor':
                RecRef.SETTABLE(PayToVendor);
              ELSE
                RecRef.SETTABLE(Vendor);
            END;
          END;
        25:
          RecRef.SETTABLE(VendorLedgerEntry);
        27:
          RecRef.SETTABLE(Item);
        36:
          RecRef.SETTABLE(SalesHeader);
        37:
          RecRef.SETTABLE(SalesLine);
        38:
          RecRef.SETTABLE(PurchaseHeader);
        39:
          RecRef.SETTABLE(PurchaseLine);
        43:
          RecRef.SETTABLE(PurchCommentLine);
        44:
          RecRef.SETTABLE(SalesCommentLine);
        79:
          RecRef.SETTABLE(CompanyInformation);
        83:
          RecRef.SETTABLE(ItemJournalLine);
        110:
          RecRef.SETTABLE(SalesShipmentHeader);
        111:
          RecRef.SETTABLE(SalesShipmentLine);
        112:
          RecRef.SETTABLE(SalesInvoiceHeader);
        113:
          RecRef.SETTABLE(SalesInvoiceLine);
        114:
          RecRef.SETTABLE(SalesCrMemoHeader);
        115:
          RecRef.SETTABLE(SalesCrMemoLine);
        122:
          RecRef.SETTABLE(PurchInvHeader);
        124:
          RecRef.SETTABLE(PurchCrMemoHdr);
        222:
          BEGIN
            CASE EDITableName OF
              'Ship-for Address':
                RecRef.SETTABLE(ShipforAddress);
              ELSE
                RecRef.SETTABLE(ShipToAddress);
            END;
          END;
        254:
          BEGIN
            CASE EDITableName OF
              'VATEntryDetail':
                RecRef.SETTABLE(VATEntryDetail);
              ELSE
                RecRef.SETTABLE(VATEntry);
            END;
          END;
        272:
          RecRef.SETTABLE(CheckLedgerEntry);
        291:
          RecRef.SETTABLE(ShippingAgent);
        336:
          RecRef.SETTABLE(TrackingSpecification);
        337:
          RecRef.SETTABLE(ReservationEntry);
        5404:
          RecRef.SETTABLE(ItemUnitOfMeasure);
        5717:
          RecRef.SETTABLE(ItemCrossReference);
        5740:
          RecRef.SETTABLE(TransferHeader);
        5741:
          RecRef.SETTABLE(TransferLine);
        5744:
          RecRef.SETTABLE(TransferShipmentHeader);
        5745:
          RecRef.SETTABLE(TransferShipmentLine);
        5748:
          RecRef.SETTABLE(InventoryCommentLine);
        6650:
          RecRef.SETTABLE(ReturnShipmentHeader);
        6651:
          RecRef.SETTABLE(ReturnShipmentLine);
        6660:
          RecRef.SETTABLE(ReturnReceiptHeader);
        6661:
          RecRef.SETTABLE(ReturnReceiptLine);
        7320:
          RecRef.SETTABLE(WarehouseShipmentHeader);
        7321:
          RecRef.SETTABLE(WarehouseShipmentLine);
        14000603:
          RecRef.SETTABLE(PostedReceive);
        14000701:
          RecRef.SETTABLE(Package);
        14000702:
          RecRef.SETTABLE(PackageLine);
        14000704:
          RecRef.SETTABLE(PostedPackage);
        14000705:
          RecRef.SETTABLE(PostedPackageLine);
        14000708:
          RecRef.SETTABLE(EShipAgentService);
        14000730:
          RecRef.SETTABLE(LTLFreightNMFCCode);
        14000822:
          RecRef.SETTABLE(BillOfLading);
        14000823:
          RecRef.SETTABLE(BillOfLadingLine);
        14000825:
          RecRef.SETTABLE(BillOfLadingSummaryLine);
        14000827:
          RecRef.SETTABLE(BillOfLadingInfoLine);
        14000964:
          RecRef.SETTABLE(PackageSummaryLine);
        14002350:
          RecRef.SETTABLE(EDITemplate);
        14002353:
          RecRef.SETTABLE(EDIDocument);
        14002354:
          RecRef.SETTABLE(EDISegment);
        14002358:
          RecRef.SETTABLE(EDIReceiveDocumentHdr);
        14002359:
          RecRef.SETTABLE(EDIReceiveDocumentField);
        14002360:
          RecRef.SETTABLE(EDITradePartner);
        14002362:
          RecRef.SETTABLE(EDICustCrossReference);
        14002364:
          RecRef.SETTABLE(EDITradePartnerItem);
        14002365:
          RecRef.SETTABLE(EDITradePartnerUOM);
        14002369:
          RecRef.SETTABLE(EDISendDocHdr);
        14002371:
          RecRef.SETTABLE(EDIReceiveDocHdrInfo);
        14002372:
          RecRef.SETTABLE(EDIReceiveDocLineInfo);
        14002382:
          RecRef.SETTABLE(EDIDiscount);
        14002383:
          RecRef.SETTABLE(EDILineDiscount);
        14002400:
          RecRef.SETTABLE(EDIOrderStatusHdr);
        14002401:
          RecRef.SETTABLE(EDIOrderStatusLine);
        14002402:
          RecRef.SETTABLE(RoutingReq);
        14002403:
          RecRef.SETTABLE(RoutingRequestLine);
        14002413:
          RecRef.SETTABLE(InventoryAdviceHdr);
        14002414:
          RecRef.SETTABLE(InventoryAdviceLine);
        14050801:
          RecRef.SETTABLE(PurchasePaymentAdvice);
        14050802:
          RecRef.SETTABLE(PurchasePaymentAdviceLine);
        ELSE BEGIN
          CASE EDITableName OF
            'PostedPackageTmp':
              RecRef.SETTABLE(PostedPackage);
            'SalesInvoiceLineTmp':
              RecRef.SETTABLE(SalesInvoiceLine);
             'SalesShipmentHdrTmp':
               RecRef.SETTABLE(SalesShipmentHdrTmp);
             'SalesShipmentLineTmp':
               RecRef.SETTABLE(SalesShipmentLine);
          END;
        END;
      END;
    END;

    PROCEDURE SetPurchaseOrderSendVariable@1240020002(CurrLineNumber@1240020000 : Integer;CurrTotalUnits@1240020001 : Decimal;CurrNetShipWeight@1240020002 : Decimal;CurrGrossShipWeight@1240020003 : Decimal;CurrTotalSegments@1240020004 : Integer);
    BEGIN
      LineNumber := CurrLineNumber;
      TotalUnits := CurrTotalUnits;
      NetWeight := CurrNetShipWeight;
      GrossWeight := CurrGrossShipWeight;
      TotalSegments := CurrTotalSegments;
    END;

    PROCEDURE SetASNSendVariable@1240020028(CurrPOItemQty@1240020000 : Decimal;CurrBOLItemQty@1240020001 : Decimal;CurrPOItemQtyBase@1240020002 : Decimal;CurrBOLItemQtyBase@1240020003 : Decimal;CurrTotalBOLTares@1240020004 : Decimal;CurrTotalPOTares@1240020005 : Decimal;CurrTotalBOLPackages@1240020006 : Decimal;CurrTotalPOPackages@1240020007 : Decimal;CurrTotalLINSegments@1240020019 : Integer;CurrPackageUnderItem@1240020008 : Integer;CurrStdPackQtyArray@1240020009 : ARRAY [500] OF Decimal;CurrPackageQtyArray@1240020010 : ARRAY [500] OF Decimal;CurrTotalSegments@1240020011 : Integer;CurrTotalNoOfPackages@1240020012 : Integer);
    BEGIN
      POItemQty := CurrPOItemQty;
      BOLItemQty := CurrBOLItemQty;
      POItemQtyBase := CurrPOItemQtyBase;
      BOLItemQtyBase := CurrBOLItemQtyBase;
      TotalBOLTares := CurrTotalBOLTares;
      TotalPOtares := CurrTotalPOTares;
      TotalBOLPackages := CurrTotalBOLPackages;
      TotalPOPackages := CurrTotalPOPackages;
      TotalLINSegments := CurrTotalLINSegments;
      PackageUnderItem := CurrPackageUnderItem;
      COPYARRAY(StdPackQtyArray,CurrStdPackQtyArray,1);
      COPYARRAY(PackageQtyArray,CurrPackageQtyArray,1);
      TotalSegments := CurrTotalSegments;
      TotalNoOfPackages := CurrTotalNoOfPackages;
    END;

    PROCEDURE SetSalesOrderSendVariable@1240020004(CurrLineNumber@1240020000 : Integer;CurrTotalUnits@1240020001 : Decimal;CurrNetShipWeight@1240020002 : Decimal;CurrGrossShipWeight@1240020003 : Decimal;CurrTotalSegments@1240020004 : Integer;CurrTotalUnitsBase@1240020005 : Decimal);
    BEGIN
      LineNumber := CurrLineNumber;
      TotalUnits := CurrTotalUnits;
      NetWeight := CurrNetShipWeight;
      GrossWeight := CurrGrossShipWeight;
      TotalSegments := CurrTotalSegments;
      TotalUnitsBase := CurrTotalUnitsBase;
    END;

    PROCEDURE SetSalesInvoiceSendVariable@1240020006(CurrLineNumber@1240020000 : Integer;CurrInvTotalUnits@1240020001 : Decimal;CurrInvTotalBaseUnits@1240020008 : Decimal;CurrInvNetShipWeight@1240020002 : Decimal;CurrInvGrossShipWeight@1240020003 : Decimal;CurrInvGrossAmt@1240020007 : Decimal;CurrTotalSegments@1240020004 : Integer;CurrInvFreightAmt@1240020005 : Decimal;CurrInvPalletWeight@1240020006 : Decimal;CurrTotalInvDiscount@1240020010 : Decimal;CurrEDIInvDiscAmt@1240020017 : Decimal;CurrEDIInvLineDiscAmt@1240020016 : Decimal;CurrTotalFieldsGeneric1@1240020015 : Decimal;CurrTotalFieldsGeneric2@1240020014 : Decimal;CurrTotalFieldsGeneric3@1240020013 : Decimal;CurrTotalFieldsGeneric4@1240020012 : Decimal;CurrEDIQty@1240020018 : Decimal;CurrInvDropShipAmt@1240020019 : Decimal);
    BEGIN
      LineNumber := CurrLineNumber;
      TotalUnits := CurrInvTotalUnits;
      TotalBaseUnits := CurrInvTotalBaseUnits;
      NetWeight := CurrInvNetShipWeight;
      GrossWeight := CurrInvGrossShipWeight;
      GrossAmt := CurrInvGrossAmt;
      TotalSegments := CurrTotalSegments;
      FreightAmt := CurrInvFreightAmt;
      PalletWeight := CurrInvPalletWeight;
      TotalInvDiscount := CurrTotalInvDiscount;
      EDIInvDiscAmt := CurrEDIInvDiscAmt;
      EDIInvLineDiscAmt := CurrEDIInvLineDiscAmt;
      TotalFieldsGeneric1 := CurrTotalFieldsGeneric1;
      TotalFieldsGeneric2 := CurrTotalFieldsGeneric2;
      TotalFieldsGeneric3 := CurrTotalFieldsGeneric3;
      TotalFieldsGeneric4 := CurrTotalFieldsGeneric4;
      EDIQty := CurrEDIQty;
      DropShipAmt := CurrInvDropShipAmt;
    END;

    PROCEDURE SetSalesInvoiceSendVariable2@1240020007(CurrTotalInvLineDiscount@1240020020 : Decimal;CurrProcessingLines@1240020011 : Boolean;CurrTotalEDIQty@1240020000 : Decimal);
    BEGIN
      TotalInvLineDiscount := CurrTotalInvLineDiscount;
      ProcessingLines := CurrProcessingLines;
      TotalEDIQty := CurrTotalEDIQty;
    END;

    PROCEDURE SetFunctAckSendVariable@1240020008(CurrTransactionSetCount@1240020000 : Integer);
    BEGIN
      TransactionSetCount := CurrTransactionSetCount;
    END;

    PROCEDURE SetOrderStatusSendVariable@1240020011(CurrLineNumber@1240020006 : Integer;CurrTotalUnits@1240020005 : Decimal;CurrNetShipWeight@1240020004 : Decimal;CurrGrossShipWeight@1240020003 : Decimal;CurrTotalSegments@1240020002 : Integer);
    BEGIN
      LineNumber := CurrLineNumber;
      TotalUnits := CurrTotalUnits;
      NetWeight := CurrNetShipWeight;
      GrossWeight := CurrGrossShipWeight;
      TotalSegments := CurrTotalSegments;
    END;

    PROCEDURE SetRoutingRequestSendVariable@1240020013(CurrPackingNetWeight@1240020006 : Decimal;CurrPackingGrossWeight@1240020005 : Decimal;CurrPackingVolume@1240020004 : Decimal;CurrPackingQty@1240020003 : Decimal;CurrQtyToShip@1240020002 : Decimal);
    BEGIN
      NetWeight := CurrPackingNetWeight;
      GrossWeight := CurrPackingGrossWeight;
      PackingVolume := CurrPackingVolume;
      PackingQty := CurrPackingQty;
      QtyToShip := CurrQtyToShip;
    END;

    PROCEDURE SetSalesCrMemoSendVariable@1240020015(CurrLineNumber@1240020000 : Integer;CurrInvTotalUnits@1240020001 : Decimal;CurrInvTotalBaseUnits@1240020008 : Decimal;CurrInvNetShipWeight@1240020002 : Decimal;CurrInvGrossShipWeight@1240020003 : Decimal;CurrTotalSegments@1240020004 : Integer;CurrInvFreightAmt@1240020005 : Decimal;CurrInvPalletWeight@1240020006 : Decimal;CurrTotalInvDiscount@1240020010 : Decimal;CurrTotalInvLineDiscount@1240020007 : Decimal;CurrInvDropShipAmt@1240020019 : Decimal);
    BEGIN
      LineNumber := CurrLineNumber;
      TotalUnits := CurrInvTotalUnits;
      TotalBaseUnits := CurrInvTotalBaseUnits;
      NetWeight := CurrInvNetShipWeight;
      GrossWeight := CurrInvGrossShipWeight;
      TotalSegments := CurrTotalSegments;
      FreightAmt := CurrInvFreightAmt;
      PalletWeight := CurrInvPalletWeight;
      TotalInvDiscount := CurrTotalInvDiscount;
      TotalInvLineDiscount := CurrTotalInvLineDiscount;
      DropShipAmt := CurrInvDropShipAmt;
    END;

    PROCEDURE SetReturnReceiptSendVariable@1240020022(CurrLineNumber@1240020000 : Integer;CurrTotalUnits@1240020001 : Decimal;CurrTotalBaseUnits@1240020008 : Decimal;CurrNetWeight@1240020002 : Decimal;CurrGrossWeight@1240020003 : Decimal;CurrTotalSegments@1240020004 : Integer);
    BEGIN
      LineNumber := CurrLineNumber;
      TotalUnits := CurrTotalUnits;
      TotalBaseUnits := CurrTotalBaseUnits;
      NetWeight := CurrNetWeight;
      GrossWeight := CurrGrossWeight;
      TotalSegments := CurrTotalSegments;
    END;

    PROCEDURE SetInventoryAdviceSendVariable@1240020017(CurrLineNumber@1240020000 : Integer);
    BEGIN
      LineNumber := CurrLineNumber;
    END;

    PROCEDURE SetReturnShipmentSendVariable@1240020021(CurrLineNumber@1240020000 : Integer;CurrTotalUnits@1240020001 : Decimal;CurrTotalBaseUnits@1240020008 : Decimal;CurrNetWeight@1240020002 : Decimal;CurrGrossWeight@1240020003 : Decimal;CurrTotalSegments@1240020004 : Integer);
    BEGIN
      LineNumber := CurrLineNumber;
      TotalUnits := CurrTotalUnits;
      TotalBaseUnits := CurrTotalBaseUnits;
      NetWeight := CurrNetWeight;
      GrossWeight := CurrGrossWeight;
      TotalSegments := CurrTotalSegments;
    END;

    PROCEDURE SetTransferOrderSendVariable@1240020029(CurrLineNumber@1240020000 : Integer;CurrTotalUnits@1240020001 : Decimal;CurrTotalBaseUnits@1240020008 : Decimal;CurrNetWeight@1240020002 : Decimal;CurrGrossWeight@1240020003 : Decimal;CurrPalletWeight@1240020005 : Decimal);
    BEGIN
      LineNumber := CurrLineNumber;
      TotalUnits := CurrTotalUnits;
      TotalBaseUnits := CurrTotalBaseUnits;
      NetWeight := CurrNetWeight;
      GrossWeight := CurrGrossWeight;
      PalletWeight := CurrPalletWeight;
    END;

    PROCEDURE SetElectronicBOLSendVariable@1240020030(CurrLineNumber@1240020000 : Integer);
    BEGIN
      LineNumber := CurrLineNumber;
    END;

    PROCEDURE SetTransferShipmenSendVariable@1240020032(CurrLineNumber@1240020000 : Integer;CurrTotalUnits@1240020001 : Decimal;CurrTotalBaseUnits@1240020008 : Decimal;CurrNetWeight@1240020002 : Decimal;CurrGrossWeight@1240020003 : Decimal;CurrPalletWeight@1240020005 : Decimal);
    BEGIN
      LineNumber := CurrLineNumber;
      TotalUnits := CurrTotalUnits;
      TotalBaseUnits := CurrTotalBaseUnits;
      NetWeight := CurrNetWeight;
      GrossWeight := CurrGrossWeight;
      PalletWeight := CurrPalletWeight;
    END;

    PROCEDURE SetShipmentAdviceSendVariable@1240020034(CurrLineNumber@1240020005 : Integer;CurrNetWeight@1240020002 : Decimal;CurrGrossWeight@1240020001 : Decimal;CurrVolume@1240020006 : Decimal;CurrPalletWeight@1240020000 : Decimal;CurrFreightAmt@1240020007 : Decimal;CurrTotalUnits@1240020004 : Decimal;CurrTotalBaseUnits@1240020003 : Decimal;CurrTotalSegments@1240020008 : Integer);
    BEGIN
      LineNumber := CurrLineNumber;
      NetWeight := CurrNetWeight;
      GrossWeight := CurrGrossWeight;
      PackingVolume := CurrVolume;
      PalletWeight := CurrPalletWeight;
      FreightAmt := CurrFreightAmt;
      TotalUnits := CurrTotalUnits;
      TotalBaseUnits := CurrTotalBaseUnits;
      TotalSegments := CurrTotalSegments;
    END;

    PROCEDURE RoundValue@1240030001(DecimalValue@1240030004 : Decimal;EDIElement@1240020000 : Record 14002355) RoundedValue : Decimal;
    VAR
      RoundingPrecision@1240030003 : Decimal;
      DecimalPlaces@1240030001 : Integer;
      Decimals@1240030000 : Integer;
      RoundingPrecisionString@1240030002 : Text[20];
    BEGIN
      IF EDIElement."NAV Data Type" = EDIElement."NAV Data Type"::Decimal THEN BEGIN
        Decimals := EDIElement.Decimals;
        DecimalPlaces := 0;
        IF Decimals > 0 THEN BEGIN
          RoundingPrecisionString  := '0.1';
          IF Decimals = 1 THEN
            DecimalPlaces := 1
          ELSE
            DecimalPlaces := Decimals - 1;
          WHILE DecimalPlaces > 0 DO BEGIN
            RoundingPrecisionString := INSSTR(RoundingPrecisionString,'0',3);
            DecimalPlaces := DecimalPlaces - 1;
          END;
        END ELSE
          RoundingPrecisionString := '1';
        EVALUATE(RoundingPrecision,RoundingPrecisionString);
        RoundedValue := ROUND(DecimalValue,RoundingPrecision);
      END;
    END;

    PROCEDURE StatusOfOrder@1240020025(CurrSalesShipmentHdr@1240020000 : Record 110) BackOrderAllowed : Boolean;
    VAR
      SalesShipmentHdr2@1240020001 : Record 110;
      SalesShipmentLine2@1240020002 : Record 111;
      SalesShipmentLine3@1240020003 : Record 111;
      SalesHeader@1240020005 : Record 36;
      SalesLine@1240020006 : Record 37;
      EDIOriginalQty@1240020007 : Decimal;
      QtyShipped@1240020008 : Decimal;
      ShipmentExist@1240020009 : Boolean;
    BEGIN
      QtyShipped := 0;
      EDIOriginalQty := 0;
      ShipmentExist := FALSE;
      OrderShippedComplete := FALSE;
      BackOrderAllowed := FALSE;

      SalesShipmentHdr2.RESET;
      SalesShipmentHdr2.SETCURRENTKEY("Order No.");
      SalesShipmentHdr2.SETRANGE("Order No.",CurrSalesShipmentHdr."Order No.");
      IF SalesShipmentHdr2.FIND('-') THEN BEGIN
        SalesHeader.RESET;
        SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
        SalesHeader.SETRANGE("No.",SalesShipmentHdr2."Order No.");
        IF SalesHeader.FIND('-') THEN BEGIN
          IF SalesHeader."Shipping Advice" = SalesHeader."Shipping Advice"::Partial THEN
            BackOrderAllowed := TRUE
          ELSE
            BackOrderAllowed := FALSE;
          SalesLine.RESET;
          SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
          SalesLine.SETRANGE("Document No.",SalesShipmentHdr2."Order No.");
          IF SalesLine.FIND('-') THEN
            REPEAT
              EDIOriginalQty := EDIOriginalQty + SalesLine."EDI Original Qty.";
            UNTIL SalesLine.NEXT = 0;
        END;
        SalesShipmentLine2.RESET;
        SalesShipmentLine2.SETRANGE("Document No.",CurrSalesShipmentHdr."No.");
        IF SalesShipmentLine2.FIND('-') THEN BEGIN
          OrderShippedComplete := TRUE;
          SalesShipmentLine3.RESET;
          SalesShipmentLine3.SETCURRENTKEY("Order No.","Order Line No.");
          SalesShipmentLine3.SETRANGE("Order No.",SalesShipmentLine2."Order No.");
          SalesShipmentLine3.SETRANGE(Type,SalesShipmentLine3.Type::Item);
          IF SalesShipmentLine3.FIND('-') THEN
            REPEAT
              IF SalesShipmentLine3."Document No." > CurrSalesShipmentHdr."No." THEN
                ShipmentExist := TRUE
              ELSE
                QtyShipped := QtyShipped + SalesShipmentLine3.Quantity;
            UNTIL SalesShipmentLine3.NEXT = 0;
           IF EDIOriginalQty <> 0 THEN
             IF QtyShipped <> EDIOriginalQty THEN
               OrderShippedComplete := FALSE;
           IF EDIOriginalQty = 0 THEN
             IF ShipmentExist THEN
               OrderShippedComplete := FALSE;
        END;
      END;
    END;

    PROCEDURE StatusOfItem@1240020024() BackOrderAllowed : Boolean;
    VAR
      SalesShipmentHdr2@1240020000 : Record 110;
      SalesShipmentLine2@1240020001 : Record 111;
      SalesHeader@1240020003 : Record 36;
      QtyShipped@1240020002 : Decimal;
    BEGIN
      QtyShipped := 0;
      ItemShippedComplete := FALSE;
      BackOrderAllowed := FALSE;

      SalesShipmentHdr2.RESET;
      SalesShipmentHdr2.SETCURRENTKEY("Order No.");
      SalesShipmentHdr2.SETRANGE("Order No.",SalesShipmentHeader."Order No.");
      IF SalesShipmentHdr2.FIND('-') THEN BEGIN
        SalesShipmentLine2.RESET;
        SalesShipmentLine2.SETCURRENTKEY("Order No.","Order Line No.");
        SalesShipmentLine2.SETRANGE("Order No.",SalesShipmentLine."Order No.");
        SalesShipmentLine2.SETRANGE("Order Line No.",SalesShipmentLine."Order Line No.");
        SalesShipmentLine2.SETRANGE("Variant Code",SalesShipmentLine."Variant Code");
        SalesShipmentLine2.SETRANGE("No.", SalesShipmentLine."No.");
        SalesShipmentLine2.SETRANGE(Type,SalesShipmentLine2.Type::Item);
        IF SalesShipmentLine2.FIND('-') THEN BEGIN
          ItemShippedComplete := TRUE;
            REPEAT
              IF SalesShipmentLine2."Document No." <= SalesShipmentHeader."No." THEN
                QtyShipped := QtyShipped + SalesShipmentLine2.Quantity
            UNTIL SalesShipmentLine2.NEXT = 0;
          IF QtyShipped <> SalesShipmentLine2."EDI Original Qty." THEN BEGIN
            ItemShippedComplete := FALSE;
            SalesShipmentHdr2.RESET;
            SalesShipmentHdr2.SETCURRENTKEY("Order No.");
            SalesShipmentHdr2.SETRANGE("Order No.",SalesShipmentHeader."Order No.");
            IF SalesShipmentHdr2.FIND('-') THEN BEGIN
              SalesHeader.RESET;
              SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
              SalesHeader.SETRANGE("No.",SalesShipmentHdr2."Order No.");
              IF SalesHeader.FIND('-') THEN BEGIN
                IF SalesHeader."Shipping Advice" = SalesHeader."Shipping Advice"::Partial THEN
                  BackOrderAllowed := TRUE
                ELSE
                  BackOrderAllowed := FALSE;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE UpdateWeight@1240030000();
    VAR
      BillOfLadingLine@1240020000 : Record 14000823;
      PostedPackage2@1240020001 : Record 14000704;
    BEGIN
      TotalNetWeight := 0;
      TotalGrossWeight := 0;
      TotalPalletWeight := 0;

      BillOfLadingLine.RESET;
      BillOfLadingLine.SETRANGE("Bill of Lading No.",BillOfLading."No.");
      BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::"Sales Shipment (Posted)");
      IF BillOfLadingLine.FIND('-') THEN
        REPEAT
          PostedPackage2.RESET;
          PostedPackage2.SETCURRENTKEY(
            "Source Type","Source Subtype","Posted Source ID","Bill of Lading No.");
          PostedPackage2.SETRANGE("Source Type",36);
          PostedPackage2.SETRANGE("Source Subtype",1);
          PostedPackage2.SETRANGE("Posted Source ID",BillOfLadingLine."Posted Source ID");
          PostedPackage2.SETRANGE("Used on Bill of Lading No.",BillOfLading."No.");
          IF PostedPackage2.FIND('-') THEN
            REPEAT
              PostedPackage2.CALCFIELDS("Net Weight","Gross Weight");
              TotalNetWeight := TotalNetWeight + PostedPackage2."Net Weight";
              TotalGrossWeight := TotalGrossWeight + PostedPackage2."Gross Weight";
            UNTIL PostedPackage2.NEXT = 0;
        UNTIL BillOfLadingLine.NEXT = 0;
    END;

    PROCEDURE UpdatePackagesWithItem@1240020026();
    VAR
      BillOfLadingLine@1240020000 : Record 14000823;
      PostedPackage2@1240020001 : Record 14000704;
      PostedPackageLine2@1240020002 : Record 14000705;
    BEGIN
      TotalPackagesWithItem := 0;
      BillOfLadingLine.RESET;
      BillOfLadingLine.SETRANGE("Bill of Lading No.",BillOfLading."No.");
      BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::"Sales Shipment (Posted)");
      IF BillOfLadingLine.FIND('-') THEN
        REPEAT
          PostedPackage2.RESET;
          PostedPackage2.SETCURRENTKEY(
            "Source Type","Source Subtype","Posted Source ID","Bill of Lading No.");
          PostedPackage2.SETRANGE("Source Type",36);
          PostedPackage2.SETRANGE("Source Subtype",1);
          PostedPackage2.SETRANGE("Posted Source ID",BillOfLadingLine."Posted Source ID");
          PostedPackage2.SETRANGE("Used on Bill of Lading No.",BillOfLading."No.");
          IF PostedPackage2.FIND('-') THEN
            REPEAT
              PostedPackageLine2.SETRANGE("Package No.",PostedPackage2."No.");
              PostedPackageLine2.SETRANGE(Type,PostedPackageLine2.Type::Item);
              PostedPackageLine2.SETRANGE("No.",Item."No.");
              IF PostedPackageLine2.FIND('-') THEN
                TotalPackagesWithItem := TotalPackagesWithItem + 1;
            UNTIL PostedPackage2.NEXT = 0;
        UNTIL BillOfLadingLine.NEXT = 0;
    END;

    PROCEDURE CountPackagesWithPackages@1240030003();
    VAR
      BillOfLadingSummaryLine3@1240030000 : Record 14000825;
      PostedPackageLine3@1240030001 : Record 14000705;
    BEGIN
      TotalPackagesWithPackages := 0;
      BillOfLadingSummaryLine3.RESET;
      BillOfLadingSummaryLine3.SETRANGE("Bill of Lading No.",BillOfLading."No.");
      BillOfLadingSummaryLine3.SETRANGE(Type,BillOfLadingSummaryLine3.Type::Package);
      IF BillOfLadingSummaryLine3.FIND('-') THEN
        REPEAT
          PostedPackageLine3.SETRANGE("Package No.",BillOfLadingSummaryLine3."Package No.");
          PostedPackageLine3.SETRANGE(Type,PostedPackageLine3.Type::Package);
          IF PostedPackageLine3.FIND('-') THEN
            TotalPackagesWithPackages := TotalPackagesWithPackages + 1;
        UNTIL BillOfLadingSummaryLine3.NEXT = 0;
    END;

    PROCEDURE CountPalletsWithThisItem@1240030004();
    VAR
      BillOfLadingSummaryLine4@1240030000 : Record 14000825;
      PostedPackageLine4@1240030002 : Record 14000705;
      PostedPackageLine5@1240030003 : Record 14000705;
      PKFound@1240030004 : Boolean;
    BEGIN
      PalletCountWithItem := 0;
      BillOfLadingSummaryLine4.RESET;
      BillOfLadingSummaryLine4.SETRANGE("Bill of Lading No.",BillOfLading."No.");
      BillOfLadingSummaryLine4.SETRANGE(Type,BillOfLadingSummaryLine4.Type::Package);
      BillOfLadingSummaryLine4.SETRANGE("Package Contains Only Packages",TRUE);
      IF BillOfLadingSummaryLine4.FIND('-') THEN
        REPEAT
          PKFound := FALSE;
          PostedPackageLine4.SETRANGE("Package No.",BillOfLadingSummaryLine4."Package No.");
          PostedPackageLine4.SETRANGE(Type,PostedPackageLine4.Type::Package);
          IF PostedPackageLine4.FIND('-') THEN
            REPEAT
              PostedPackageLine5.SETRANGE("Package No.",PostedPackageLine4."No.");
              PostedPackageLine5.SETRANGE(Type,PostedPackageLine5.Type::Item);
              PostedPackageLine5.SETRANGE("No.",SalesShipmentLine."No.");
              PostedPackageLine5.SETRANGE("Variant Code",SalesShipmentLine."Variant Code");
              IF PostedPackageLine5.FIND('-') THEN BEGIN
                PalletCountWithItem := PalletCountWithItem + 1;
                PKFound := TRUE;
              END;
            UNTIL (PostedPackageLine4.NEXT = 0) OR
                  (PKFound);
        UNTIL BillOfLadingSummaryLine4.NEXT = 0;
    END;

    PROCEDURE CumulativeTotal@1240030002();
    VAR
      BegCumulativeTotal@1240030002 : Record 14002405;
      SalesShipmentLine2@1240030003 : Record 111;
      SalesCrMemoLine@1240020000 : Record 115;
      ReturnRcptLine@1240020001 : Record 6661;
    BEGIN
      BegCumulativeTotal.RESET;
      BegCumulativeTotal.SETRANGE("Trade Partner Code",SalesShipmentHeader."EDI Trade Partner");
      BegCumulativeTotal.SETRANGE("Blanket Order No.",SalesShipmentLine."Blanket Order No.");
      BegCumulativeTotal.SETRANGE("Item No.",SalesShipmentLine."No.");
      BegCumulativeTotal.SETRANGE(Variant,SalesShipmentLine."Variant Code");
      IF NOT BegCumulativeTotal.FIND('-') THEN
        BegCumulativeTotal.INIT;

      CurrCumulativeQty := BegCumulativeTotal.Quantity;
      SalesShipmentLine2.RESET;
      SalesShipmentLine2.SETCURRENTKEY("Blanket Order No.","Blanket Order Line No.");
      SalesShipmentLine2.SETRANGE("Blanket Order No.",SalesShipmentLine."Blanket Order No.");
      SalesShipmentLine2.SETRANGE("No.",SalesShipmentLine."No.");
      SalesShipmentLine2.SETRANGE("Variant Code",SalesShipmentLine."Variant Code");
      IF SalesShipmentLine2.FIND('-') THEN
        REPEAT
          CurrCumulativeQty := CurrCumulativeQty + SalesShipmentLine2.Quantity;
        UNTIL SalesShipmentLine2.NEXT = 0;

      SalesCrMemoLine.RESET;
      SalesCrMemoLine.SETCURRENTKEY("Blanket Order No.","Blanket Order Line No.");
      SalesCrMemoLine.SETRANGE("Blanket Order No.",SalesShipmentLine."Blanket Order No.");
      SalesCrMemoLine.SETRANGE("No.",SalesShipmentLine."No.");
      SalesCrMemoLine.SETRANGE("Variant Code",SalesShipmentLine."Variant Code");
      IF SalesCrMemoLine.FIND('-') THEN
        REPEAT
          CurrCumulativeQty := CurrCumulativeQty - SalesCrMemoLine.Quantity;
        UNTIL SalesCrMemoLine.NEXT = 0;

      ReturnRcptLine.RESET;
      ReturnRcptLine.SETCURRENTKEY("Blanket Order No.","Blanket Order Line No.");
      ReturnRcptLine.SETRANGE("Blanket Order No.",SalesShipmentLine."Blanket Order No.");
      ReturnRcptLine.SETRANGE("No.",SalesShipmentLine."No.");
      IF ReturnRcptLine.FIND('-') THEN
        REPEAT
          CurrCumulativeQty := CurrCumulativeQty - ReturnRcptLine.Quantity;
        UNTIL ReturnRcptLine.NEXT = 0;
    END;

    PROCEDURE SetUpOutFields@6();
    VAR
      EDIFields@1240020000 : Record 14002356;
    BEGIN
      EDIFields.RESET;
      EDIFields.SETRANGE(Packaged,TRUE);
      EDIFields.DELETEALL;

      WriteEDIOutFields(
        'E_FUNCTACK',1,'Transaction Set Count',0,'Number of Transaction Sets in Funct. Ack.');
      WriteEDIOutFields(
        'E_FUNCTACK',1,'Today',6,'Today''s date.');

      WriteEDIOutFields(
        'E_PURORD',1,'GE Control Number',2,'GE segment Control Number');
      WriteEDIOutFields(
        'E_PURORD',1,'Gross Ship Wgt.',3,'Gross Ship Wgt. of Order.');
      WriteEDIOutFields(
        'E_PURORD',1,'GS Control Number',2,'GS segment Control Number');
      WriteEDIOutFields(
        'E_PURORD',1,'IEA Control Number',2,'IEA segment Control Number');
      WriteEDIOutFields(
        'E_PURORD',1,'ISA Control Number',2,'ISA segment Control Number');
      WriteEDIOutFields(
        'E_PURORD',1,'Currency Code',1,'Currency Code');
      WriteEDIOutFields(
        'E_PURORD',1,'Line Number',0,'The current Line Number.  (Incr. each time a line is exported.)');
      WriteEDIOutFields(
        'E_PURORD',1,'My Partner ID',1,'The Trading Partner ID from the EDI Template.');
      WriteEDIOutFields(
        'E_PURORD',1,'Net Ship Wgt.',3,'Net Shipment Weight of order.');
      WriteEDIOutFields(
        'E_PURORD',1,'Net Unit Price',3,'The net unit price on a document line.  (Amount / Qty)');
      WriteEDIOutFields(
        'E_PURORD',1,'Partner ID',1,'Trading Partner ID');
      WriteEDIOutFields(
        'E_PURORD',1,'Pmt. Discounted Amt.',3,'Pmt. Amount after discount.');
      WriteEDIOutFields(
        'E_PURORD',1,'Pmt. Disc. Amt.',3,'Payment discount amount.');
      WriteEDIOutFields(
        'E_PURORD',1,'Pmt. Disc. Days',0,'Number of days allowed for payment discount.');
      WriteEDIOutFields(
        'E_PURORD',1,'Pmt. Disc. Percent',3,'Payment discount percent.');
      WriteEDIOutFields(
        'E_PURORD',1,'Pmt. Net Days',0,'Number of days to due date.');
      WriteEDIOutFields(
        'E_PURORD',1,'SE Control Number',2,'SE segment Control Number');
      WriteEDIOutFields(
        'E_PURORD',1,'ST Control Number',2,'ST segment Control Number');
      WriteEDIOutFields(
        'E_PURORD',1,'Today',6,'Today''s date.');
      WriteEDIOutFields(
        'E_PURORD',1,'Total Inv. Discount',3,'The total invoice level discount.');
      WriteEDIOutFields(
        'E_PURORD',1,'Total Segments',0,'Total Number of exported Segments');
      WriteEDIOutFields(
        'E_PURORD',1,'Total Units',3,'Total Units Shipped on document. (Used as hash total)');
      WriteEDIOutFields(
        'E_PURORD',1,'Order Tax',3,'Order Tax Amount');
      WriteEDIOutFields(
        'E_PURORD',1,'Order Tax Percent',3,'Order Tax Percent');
      WriteEDIOutFields(
        'E_PURORD',1,'Transaction Status',1,'Transaction Status Test/Production');
      //<TPZEDI>
      WriteEDIOutFields(
        'E_PURORD',1,'Purchase Order Type Code',2,'Purchase Order Type Code: NE or DO');
      //<TPZEDI>

      WriteEDIOutFields(
        'E_PURPRA',1,'Payment Method Code',2,'Method of payment code');
      WriteEDIOutFields(
        'E_PURPRA',1,'Document Type',2,'Document type (Credit Memo, Invoice etc)');
      WriteEDIOutFields(
        'E_PURPRA',1,'Document Posting Date',6,'Applied Entry Document Posting Date');
      WriteEDIOutFields(
        'E_PURPRA',1,'Today',6,'Today''s date.');
      WriteEDIOutFields(
        'E_PURPRA',1,'Time',1,'Current time in 24 hour format');

      WriteEDIOutFields(
        'E_PURWSA',1,'GE Control Number',2,'GE segment Control Number');
      WriteEDIOutFields(
        'E_PURWSA',1,'Gross Ship Wgt.',3,'Gross Ship Wgt. of Order.');
      WriteEDIOutFields(
        'E_PURWSA',1,'GS Control Number',2,'GS segment Control Number');
      WriteEDIOutFields(
        'E_PURWSA',1,'IEA Control Number',2,'IEA segment Control Number');
      WriteEDIOutFields(
        'E_PURWSA',1,'ISA Control Number',2,'ISA segment Control Number');
      WriteEDIOutFields(
        'E_PURWSA',1,'Line Number',0,'The current Line Number.  (Incr. each time a line is exported.)');
      WriteEDIOutFields(
        'E_PURWSA',1,'My Partner ID',1,'The Trading Partner ID from the EDI Template.');
      WriteEDIOutFields(
        'E_PURWSA',1,'Net Ship Wgt.',3,'Net Shipment Weight of order.');
      WriteEDIOutFields(
        'E_PURWSA',1,'Net Unit Price',3,'The net unit price on a document line.  (Amount / Qty)');
      WriteEDIOutFields(
        'E_PURWSA',1,'Partner ID',1,'Trading Partner ID');
      WriteEDIOutFields(
        'E_PURWSA',1,'Pmt. Discounted Amt.',3,'Pmt. Amount after discount.');
      WriteEDIOutFields(
        'E_PURWSA',1,'Pmt. Disc. Amt.',3,'Payment discount amount.');
      WriteEDIOutFields(
        'E_PURWSA',1,'Pmt. Disc. Days',0,'Number of days allowed for payment discount.');
      WriteEDIOutFields(
        'E_PURWSA',1,'Pmt. Disc. Percent',3,'Payment discount percent.');
      WriteEDIOutFields(
        'E_PURWSA',1,'Pmt. Net Days',0,'Number of days to due date.');
      WriteEDIOutFields(
        'E_PURWSA',1,'SE Control Number',2,'SE segment Control Number');
      WriteEDIOutFields(
        'E_PURWSA',1,'ST Control Number',2,'ST segment Control Number');
      WriteEDIOutFields(
        'E_PURWSA',1,'Today',6,'Today''s date.');
      WriteEDIOutFields(
        'E_PURWSA',1,'Total Inv. Discount',3,'The total invoice level discount.');
      WriteEDIOutFields(
        'E_PURWSA',1,'Total Segments',0,'Total Number of exported Segments');
      WriteEDIOutFields(
        'E_PURWSA',1,'Total Units',3,'Total Units Shipped on document. (Used as hash total)');

      WriteEDIOutFields(
        'E_ROUTEREQ',1,'Today',6,'Today''s date.');
      WriteEDIOutFields(
        'E_ROUTEREQ',1,'Time',1,'Current time in 24 hour format');
      WriteEDIOutFields(
        'E_ROUTEREQ',1,'Net Ship Wgt.',3,'Net Ship Wgt.');
      WriteEDIOutFields(
        'E_ROUTEREQ',1,'Gross Ship Wgt.',3,'Gross Ship Wgt.');
      WriteEDIOutFields(
        'E_ROUTEREQ',1,'Volume',3,'Volume');
      WriteEDIOutFields(
        'E_ROUTEREQ',1,'Package Qty.',3,'Package quantity based on Std. Pack setup');
      WriteEDIOutFields(
        'E_RouteReq',1,'Quantity To Ship',3,'Quantity To Ship');
      WriteEDIOutFields(
        'E_ROUTEREQ',1,'Ready to Ship Time',1,'Ready to Ship Time in 24 hour format HHMM');
      WriteEDIOutFields(
        'E_ROUTEREQ',1,'Latest Ship Time',1,'Latest Ship Time in 24 hour format HHMM');
      WriteEDIOutFields(
        'E_ROUTEREQ',1,'No. of Packed Packages (Shipment)',0,'Package quantity based on packed packages');
      WriteEDIOutFields(
        'E_ROUTEREQ',1,'Total Pallets',0,'Pallet count based on Packages with Packags count');
      WriteEDIOutFields(
        'E_ROUTEREQ',1,'No. of Packed Packages (Order)',0,'Package quantity based on packed packages');

      WriteEDIOutFields(
        'E_SLSASN',1,'GE Control Number',2,'GE Segment Control Number');
      WriteEDIOutFields(
        'E_SLSASN',1,'GS Control Number',2,'GS Segment Control Number');
      WriteEDIOutFields(
        'E_SLSASN',1,'IEA Control Number',2,'IEA Segment Control Number');
      WriteEDIOutFields(
        'E_SLSASN',1,'SE Control Number',2,'SE segment Control Number');
      WriteEDIOutFields(
        'E_SLSASN',1,'ST Control Number',2,'ST segment Control Number');
      WriteEDIOutFields(
        'E_SLSASN',1,'ISA Control Number',2,'ISA Segment Control Number');
      WriteEDIOutFields(
        'E_SLSASN',1,'Total Segments',0,'Total Number of exported Segments');
      WriteEDIOutFields(
        'E_SLSASN',1,'My Partner ID',1,'The Trading Partner ID from the EDI Template.');
      WriteEDIOutFields(
        'E_SLSASN',1,'Partner ID',1,'Trading Partner ID from EDI Trade Partner card.');
      WriteEDIOutFields(
        'E_SLSASN',1,'Time',1,'Current time in 24 hour format');
      WriteEDIOutFields(
        'E_SLSASN',1,'Today',6,'Today''s date.');
      WriteEDIOutFields(
        'E_SLSASN',1,'PO Item Qty.',3,'Total PO item quantity');
      WriteEDIOutFields(
        'E_SLSASN',1,'BOL Item Qty.',3,'Total BOL item quantity');
      WriteEDIOutFields(
        'E_SLSASN',1,'PO Item Qty. (Base)',3,'Total PO base item quantity');
      WriteEDIOutFields(
        'E_SLSASN',1,'BOL Item Qty. (Base)',3,'Total BOL base item quantity');
      WriteEDIOutFields(
        'E_SLSASN',1,'Total BOL Tares',3,'Total BOL Tares');
      WriteEDIOutFields(
        'E_SLSASN',1,'Total PO Tares',3,'Total PO Tares');
      WriteEDIOutFields(
        'E_SLSASN',1,'Total BOL Packages',3,'Total BOL Packages');
      WriteEDIOutFields(
        'E_SLSASN',1,'Total PO Packages',3,'Total PO Packages');
      WriteEDIOutFields(
        'E_SLSASN',1,'Total LIN Segments',3,'Total LIN Segments');
      WriteEDIOutFields(
        'E_SLSASN',1,'STD Pack Containers',3,'Standard Pack Containers');
      WriteEDIOutFields(
        'E_SLSASN',1,'STD Pack Qty. Per Container',3,'Standard pack Qty. Per Container');
      WriteEDIOutFields(
        'E_SLSASN',1,'BOL Gross Weight',3,'Bill of Lading Gross Weight');
      WriteEDIOutFields(
        'E_SLSASN',1,'BOL Net Weight',3,'Bill of Lading Net Weight');
      WriteEDIOutFields(
        'E_SLSASN',1,'Total Packages With Item',3,'Total Packages With Item');
      WriteEDIOutFields(
        'E_SLSASN',1,'Cumulative Quantity',3,'Cumulative Shipped Quantity');
      WriteEDIOutFields(
        'E_SLSASN',1,'Total Packages With Packages',3,'Total Packages With Packages');
      WriteEDIOutFields(
        'E_SLSASN',1,'Total Pallets With Item',3,'Total Pallets With Item');
      WriteEDIOutFields(
        'E_SLSASN',1,'Pmt. Discounted Amt.',3,'Payment after discount.');
      WriteEDIOutFields(
        'E_SLSASN',1,'Pmt. Disc. Amt.',3,'Payment discount amount.');
      WriteEDIOutFields(
        'E_SLSASN',1,'Pmt. Disc. Days',0,'Number of days allowed for payment discount.');
      WriteEDIOutFields(
        'E_SLSASN',1,'Pmt. Disc. Percent',3,'Payment discount percent.');
      WriteEDIOutFields(
        'E_SLSASN',1,'Pmt. Net Days',0,'Number of days to due date.');
      WriteEDIOutFields(
        'E_SLSASN',1,'Gross Invoice',3,'Gross Invoice Amount');
      WriteEDIOutFields(
        'E_SLSASN',1,'Inv. Amt. Before Inv. Disc.',3,'Inv. Amt. Before Inv. Disc.');
      WriteEDIOutFields(
        'E_SLSASN',1,'Invoice Tax Percent',3,'Invoice Tax Percent');
      WriteEDIOutFields(
        'E_SLSASN',1,'Invoice Tax',3,'Invoice Tax Amount');
      WriteEDIOutFields(
        'E_SLSASN',1,'Total Freight Amt.',3,'Total freight amount on this Shipment. (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SLSASN',1,'Ship Agent Code (GCR)',2,'Trade Partner Shipping Agent Code (General Cross Ref.)');
      WriteEDIOutFields(
        'E_SLSASN',1,'Ship Agent Service (GCR)',2,'Trade Ptnr. Ship Agent Service (General Cross Ref.)');
      WriteEDIOutFields(
        'E_SLSASN',1,'HL Item Status',1,'Exports status code entered on EDI Document');
      WriteEDIOutFields(
        'E_SLSASN',1,'HL Order Status',1,'Exports status code entered on EDI Document');
      WriteEDIOutFields(
        'E_SLSASN',1,'Outstanding Quantity',3,'Current outstanding quantity');
      WriteEDIOutFields(
        'E_SLSASN',1,'Document No.',1,'Unique document number for each shipment level order status');
      WriteEDIOutFields(
        'E_SLSASN',1,'Shipping Payment Type',2,'Shipping Payment Type');
      WriteEDIOutFields(
        'E_SLSASN',1,'Generic Counter',0,'Generic Counter');
      WriteEDIOutFields(
        'E_SLSASN',1,'Generic Counter Total',0,'Generic Counter Total');
      WriteEDIOutFields(
        'E_SLSASN',1,'Multiple Parcel Package Shipment',5,'Multiple Parcel Package Shipment');
      WriteEDIOutFields(
        'E_SLSASN',1,'Duplicate Item HL Item Count',0,'Duplicate Item HL Item Count');
      WriteEDIOutFields(
        'E_SLSASN',1,'Time HHMMSSDD',1,'Current time in 24 HHMMSSDD format');
      WriteEDIOutFields(
        'E_SLSASN',1,'Time HHMMSS',1,'Current time in HHMMSS format');

      WriteEDIOutFields(
        'E_SLSBSN',1,'GE Control Number',2,'GE Segment Control Number');
      WriteEDIOutFields(
        'E_SLSBSN',1,'GS Control Number',2,'GS Segment Control Number');
      WriteEDIOutFields(
        'E_SLSBSN',1,'IEA Control Number',2,'IEA Segment Control Number');
      WriteEDIOutFields(
        'E_SLSBSN',1,'SE Control Number',2,'SE segment Control Number');
      WriteEDIOutFields(
        'E_SLSBSN',1,'ST Control Number',2,'ST segment Control Number');
      WriteEDIOutFields(
        'E_SLSBSN',1,'ISA Control Number',2,'ISA Segment Control Number');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Total Segments',0,'Total Number of exported Segments');
      WriteEDIOutFields(
        'E_SLSBSN',1,'My Partner ID',1,'The Trading Partner ID from the EDI Template.');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Partner ID',1,'Trading Partner ID from EDI Trade Partner card.');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Time',1,'Current time in 24 hour format');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Today',6,'Today''s date.');
      WriteEDIOutFields(
        'E_SLSBSN',1,'PO Item Qty.',3,'Total PO item quantity');
      WriteEDIOutFields(
        'E_SLSBSN',1,'BOL Item Qty.',3,'Total BOL item quantity');
      WriteEDIOutFields(
        'E_SLSBSN',1,'PO Item Qty. (Base)',3,'Total PO base item quantity');
      WriteEDIOutFields(
        'E_SLSBSN',1,'BOL Item Qty. (Base)',3,'Total BOL base item quantity');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Total BOL Tares',3,'Total BOL Tares');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Total PO Tares',3,'Total PO Tares');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Total BOL Packages',3,'Total BOL Packages');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Total PO Packages',3,'Total PO Packages');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Total LIN Segments',3,'Total LIN Segments');
      WriteEDIOutFields(
        'E_SLSBSN',1,'STD Pack Containers',3,'Standard Pack Containers');
      WriteEDIOutFields(
        'E_SLSBSN',1,'STD Pack Qty. Per Container',3,'Standard pack Qty. Per Container');
      WriteEDIOutFields(
        'E_SLSBSN',1,'BOL Gross Weight',3,'Bill of Lading Gross Weight');
      WriteEDIOutFields(
        'E_SLSBSN',1,'BOL Net Weight',3,'Bill of Lading Net Weight');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Total Packages With Item',3,'Total Packages With Item');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Cumulative Quantity',3,'Cumulative Shipped Quantity');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Total Packages With Packages',3,'Total Packages With Packages');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Total Pallets With Item',3,'Total Pallets With Item');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Pmt. Discounted Amt.',3,'Payment after discount.');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Pmt. Disc. Amt.',3,'Payment discount amount.');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Pmt. Disc. Days',0,'Number of days allowed for payment discount.');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Pmt. Disc. Percent',3,'Payment discount percent.');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Pmt. Net Days',0,'Number of days to due date.');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Gross Invoice',3,'Gross Invoice Amount');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Inv. Amt. Before Inv. Disc.',3,'Inv. Amt. Before Inv. Disc.');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Invoice Tax Percent',3,'Invoice Tax Percent');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Invoice Tax',3,'Invoice Tax Amount');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Total Freight Amt.',3,'Total freight amount on this Shipment. (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Ship Agent Code (GCR)',2,'Trade Partner Shipping Agent Code (General Cross Ref.)');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Ship Agent Service (GCR)',2,'Trade Ptnr. Ship Agent Service (General Cross Ref.)');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Shipping Payment Type',2,'Shipping Payment Type');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Generic Counter',0,'Generic Counter');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Multiple Parcel Package Shipment',5,'Multiple Parcel Package Shipment');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Duplicate Item HL Item Count',0,'Duplicate Item HL Item Count');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Time HHMMSSDD',1,'Current time in 24 HHMMSSDD format');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Total Fields Generic 1',3,'Total amount. (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Total Fields Generic 2',3,'Total amount. (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Total Fields Generic 3',3,'Total amount. (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Total Fields Generic 4',3,'Total amount. (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Total Freight Amt.',3,'Total freight amount on this Invoice. (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SLSBSN',1,'Total Dropship Amt.',3,
        'Total dropship amount on this Invoice. (Use EDI Total Fields)');

      WriteEDIOutFields(
        'E_SLSCRM',1,'GE Control Number',2,'GE Segment Control Number');
      WriteEDIOutFields(
        'E_SLSCRM',1,'GS Control Number',2,'GS Segment Control Number');
      WriteEDIOutFields(
        'E_SLSCRM',1,'IEA Control Number',2,'IEA Segment Control Number');
      WriteEDIOutFields(
        'E_SLSCRM',1,'Invoice Tax',3,'Invoice Tax Amount');
      WriteEDIOutFields(
        'E_SLSCRM',1,'ISA Control Number',2,'ISA Segment Control Number');
      WriteEDIOutFields(
        'E_SLSCRM',1,'Line Number',0,'The current line number.  (Incr. each time a line is exported.)');
      WriteEDIOutFields(
        'E_SLSCRM',1,'My Partner ID',1,'The Trading Partner ID from the EDI Template.');
      WriteEDIOutFields(
        'E_SLSCRM',1,'Gross Ship Wgt.',3,'Gross weight of Invoice.');
      WriteEDIOutFields(
        'E_SLSCRM',1,'Net Ship Wgt.',3,'Net weight of Invoice.');
      WriteEDIOutFields(
        'E_SLSCRM',1,'Net Unit Price',3,'The net unit price on an document line.  (Amount / Qty)');
      WriteEDIOutFields(
        'E_SLSCRM',1,'Partner ID',1,'Trading Partner ID from EDI Trade Partner card.');
      WriteEDIOutFields(
        'E_SLSCRM',1,'Pmt. Discounted Amt.',3,'Payment after discount.');
      WriteEDIOutFields(
        'E_SLSCRM',1,'Pmt. Disc. Amt.',3,'Payment discount amount.');
      WriteEDIOutFields(
        'E_SLSCRM',1,'Pmt. Disc. Days',0,'Number of days allowed for payment discount.');
      WriteEDIOutFields(
        'E_SLSCRM',1,'Pmt. Disc. Percent',3,'Payment discount percent.');
      WriteEDIOutFields(
        'E_SLSCRM',1,'Pmt. Net Days',0,'Number of days to due date.');
      WriteEDIOutFields(
        'E_SLSCRM',1,'SE Control Number',2,'SE segment Control Number');
      WriteEDIOutFields(
        'E_SLSCRM',1,'ST Control Number',2,'ST segment Control Number');
      WriteEDIOutFields(
        'E_SLSCRM',1,'Time',1,'Current time in 24 hour format');
      WriteEDIOutFields(
        'E_SLSCRM',1,'Today',6,'Today''s date.');
      WriteEDIOutFields(
        'E_SLSCRM',1,'Total Freight Amt.',3,'Total freight amount on this Invoice. (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SLSCRM',1,'Total Inv. Discount',3,'The total invoice level discount.');
      WriteEDIOutFields(
        'E_SLSCRM',1,'Total Pallet Weight',3,'Total weight of pallet items (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SLSCRM',1,'Total Segments',0,'Total Number of Segments exported.');
      WriteEDIOutFields(
        'E_SLSCRM',1,'Total Units',3,'Total Units on document. (Used as hash total)');
      WriteEDIOutFields(
        'E_SLSCRM',1,'Total Base Units',3,'Total Based Units. (Used as hash total)');
      WriteEDIOutFields(
        'E_SLSCRM',1,'Invoice Tax Percent',3,'Credit Invoice Tax Percent');
      WriteEDIOutFields(
        'E_SLSCRM',1,'Total Dropship Amt.',3,
        'Total dropship amount on this Credit Memo. (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SLSCRM',1,'Total Inv. Line Discount',3,'The total invoice line level discount.');

      WriteEDIOutFields(
        'E_SLSINV',1,'GE Control Number',2,'GE Segment Control Number');
      WriteEDIOutFields(
        'E_SLSINV',1,'GS Control Number',2,'GS Segment Control Number');
      WriteEDIOutFields(
        'E_SLSINV',1,'IEA Control Number',2,'IEA Segment Control Number');
      WriteEDIOutFields(
        'E_SLSINV',1,'Invoice Tax',3,'Invoice Tax Amount');
      WriteEDIOutFields(
        'E_SLSINV',1,'ISA Control Number',2,'ISA Segment Control Number');
      WriteEDIOutFields(
        'E_SLSINV',1,'Line Number',0,'The current line number.  (Incr. each time a line is exported.)');
      WriteEDIOutFields(
        'E_SLSINV',1,'My Partner ID',1,'The Trading Partner ID from the EDI Template.');
      WriteEDIOutFields(
        'E_SLSINV',1,'Gross Ship Wgt.',3,'Gross weight of Invoice.');
      WriteEDIOutFields(
        'E_SLSINV',1,'Net Ship Wgt.',3,'Net weight of Invoice.');
      WriteEDIOutFields(
        'E_SLSINV',1,'Net Unit Price',3,'The net unit price on an document line.  (Amount / Qty)');
      WriteEDIOutFields(
        'E_SLSINV',1,'Partner ID',1,'Trading Partner ID from EDI Trade Partner card.');
      WriteEDIOutFields(
        'E_SLSINV',1,'Pmt. Discounted Amt.',3,'Payment after discount.');
      WriteEDIOutFields(
        'E_SLSINV',1,'Pmt. Disc. Amt.',3,'Payment discount amount.');
      WriteEDIOutFields(
        'E_SLSINV',1,'Pmt. Disc. Days',0,'Number of days allowed for payment discount.');
      WriteEDIOutFields(
        'E_SLSINV',1,'Pmt. Disc. Percent',3,'Payment discount percent.');
      WriteEDIOutFields(
        'E_SLSINV',1,'Pmt. Net Days',0,'Number of days to due date.');
      WriteEDIOutFields(
        'E_SLSINV',1,'Qty. Ordered',3,'Quantity ordered.');
      WriteEDIOutFields(
        'E_SLSINV',1,'SE Control Number',2,'SE segment Control Number');
      WriteEDIOutFields(
        'E_SLSINV',1,'ST Control Number',2,'ST segment Control Number');
      WriteEDIOutFields(
        'E_SLSINV',1,'Time',1,'Current time in 24 hour format');
      WriteEDIOutFields(
        'E_SLSINV',1,'Today',6,'Today''s date.');
      WriteEDIOutFields(
        'E_SLSINV',1,'Total Freight Amt.',3,'Total freight amount on this Invoice. (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SLSINV',1,'Total Inv. Discount',3,'The total invoice level discount.');
      WriteEDIOutFields(
        'E_SLSINV',1,'Total Pallet Weight',3,'Total weight of pallet items (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SLSINV',1,'Total Packages',3,'Total Packages for this Invoice');
      WriteEDIOutFields(
        'E_SLSINV',1,'Total Segments',0,'Total Number of Segments exported.');
      WriteEDIOutFields(
        'E_SLSINV',1,'Total Units',3,'Total Units on document. (Used as hash total)');
      WriteEDIOutFields(
        'E_SLSINV',1,'Total Base Units',3,'Total Based Units. (Used as hash total)');
      WriteEDIOutFields(
        'E_SLSINV',1,'Gross Invoice',3,'Gross Invoice Amount');
      WriteEDIOutFields(
        'E_SLSINV',1,'Inv. Amt. Before Inv. Disc.',3,'Inv. Amt. Before Inv. Disc.');
      WriteEDIOutFields(
        'E_SLSINV',1,'Invoice Tax Percent',3,'Invoice Tax Percent');
      WriteEDIOutFields(
        'E_SLSINV',1,'Tax Area Code',2,'Export Tax Area Code (General Cross Reference)');
      WriteEDIOutFields(
        'E_SLSINV',1,'Ship Agent Code (GCR)',2,'Trade Partner Shipping Agent Code (General Cross Ref.)');
      WriteEDIOutFields(
        'E_SLSINV',1,'Ship Agent Service (GCR)',2,'Trade Ptnr. Ship Agent Service (General Cross Ref.)');
      WriteEDIOutFields(
        'E_SLSINV',1,'Total Dropship Amt.',3,
        'Total dropship amount on this Invoice. (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SLSINV',1,'Total Inv. Line Discount',3,'The total invoice line level discount.');
      WriteEDIOutFields(
        'E_SLSINV',1,'Unit Price',3,'Unit Price rounded to mapping tool decimal precision');
      WriteEDIOutFields(
        'E_SLSINV',1,'Total Fields Generic 1',3,'Total amount. (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SLSINV',1,'Total Fields Generic 2',3,'Total amount. (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SLSINV',1,'Total Fields Generic 3',3,'Total amount. (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SLSINV',1,'Total Fields Generic 4',3,'Total amount. (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SLSINV',1,'EDI Discount Amount',3,'Invoice Discount Amount.(Uses E.D.I. Discount)');
      WriteEDIOutFields(
        'E_SLSINV',1,'EDI Line Discount Amount',3,'Invoice Line Disc. Amount.(Uses E.D.I. Line Discount)');
      WriteEDIOutFields(
        'E_SLSINV',1,'Pmt. Discounted Amt. Excl. VAT',3,'Payment after discount. (Excludes VAT)');
      WriteEDIOutFields(
        'E_SLSINV',1,'Pmt. Disc. Amt. Excl. VAT',3,'Payment discount amount. (Excludes VAT)');
      WriteEDIOutFields(
        'E_SLSINV',1,'Quantity per EDI Unit of Measure',3,'Quantity per EDI UOM Conversion');
      WriteEDIOutFields(
        'E_SLSINV',1,'Unit Price per EDI Unit of Measure',3,'Unit Price per EDI UOM Conversion');
      WriteEDIOutFields(
        'E_SLSINV',1,'Tax Jurisdiction Tax Percent',3,'Tax Jurisdiction Tax Percent');
      WriteEDIOutFields(
        'E_SLSINV',1,'Tax Jurisdiction Registration No.',2,'Tax Jurisdiction Registration No.');
      WriteEDIOutFields(
        'E_SLSINV',1,'Generic Counter',0,'Generic Counter');
      WriteEDIOutFields(
        'E_SLSINV',1,'Tax Jurisdiction Tax Percent (Detail)',3,'Tax Jurisdiction Tax Percent (Detail)');
      WriteEDIOutFields(
        'E_SLSINV',1,'Tax Amount By Jurisdiction (Detail)',3,'Tax Amount By Jurisdiction (Detail)');
      WriteEDIOutFields(
        'E_SLSINV',1,'Tax Jurisdiction Registration No Detail',2,'Tax Jurisdiction Registration No. (Detail)');
      WriteEDIOutFields(
        'E_SLSINV',1,'Net Weight by Package',3,'Invoice net weight based on posted package net weight');
      WriteEDIOutFields(
        'E_SLSINV',1,'Gross Weight by Package',3,'Invoice gross weight based on posted package gross weight');
      WriteEDIOutFields(
        'E_SLSINV',1,'Total EDI Quantity',3,'Total Units based on Qty. per EDI UOM Calculation');


      //<TPZ1464>
      WriteEDIOutFields(
        'E_SLSINV',1,'Division Code',2,'Topaz Divsions');
      //</TPZ1464>

      ////<TPZEDI>
      WriteEDIOutFields(
        'E_SLSINV',1,'Total Restocking Fees',2,'Total Restocking Fees on this invoice');

      WriteEDIOutFields(
        'E_SLSINV',1,'Per 100 Base UOM Price',3,'Price Per 100 of BUOM');

      WriteEDIOutFields(
        'E_SLSINV',1,'Shipment Tracking Number',2,'Shipment Tracking Num');


      //</TPZEDI> SSD

      WriteEDIOutFields(
        'E_SLSINV',1,'Transaction Status',1,'Transaction Status Test/Production');
      WriteEDIOutFields(
        'E_SLSINV',1,'Pmt. Discount Date',6,'Payment Discount Date');
      WriteEDIOutFields(
        'E_SLSINV',1,'Day of Month (Current Month)',2,'Day of month for End of Month payment term.');
      WriteEDIOutFields(
        'E_SLSINV',1,'Invoice Amount (Based Tax Base Amount)',3,'Invoice Amount (Based Tax Base Amount');

      WriteEDIOutFields(
        'E_SLSWSA',1,'GE Control Number',2,'GE segment Control Number');
      WriteEDIOutFields(
        'E_SLSWSA',1,'Gross Ship Wgt.',3,'Gross weight of shipments that make up this document.');
      WriteEDIOutFields(
        'E_SLSWSA',1,'GS Control Number',2,'GS segement Control Number');
      WriteEDIOutFields(
        'E_SLSWSA',1,'IEA Control Number',2,'IEA segment Control Number');
      WriteEDIOutFields(
        'E_SLSWSA',1,'ISA Control Number',2,'ISA segment Control Number');
      WriteEDIOutFields(
        'E_SLSWSA',1,'Line Number',0,'Current Line Number of document. (Incr. each time a line is exported.)');
      WriteEDIOutFields(
        'E_SLSWSA',1,'My Partner ID',1,'The Trading Partner ID of the Navision user.');
      WriteEDIOutFields(
        'E_SLSWSA',1,'Net Ship Wgt.',3,'Net weight of shipments that make up this document.');
      WriteEDIOutFields(
        'E_SLSWSA',1,'Net Unit Price',3,'The net unit price on an document line.  (Amount / Qty)');
      WriteEDIOutFields(
        'E_SLSWSA',1,'Partner ID',1,'Trading Partner ID');
      WriteEDIOutFields(
        'E_SLSWSA',1,'Pmt. Discounted Amt.',3,'Payment after discount.');
      WriteEDIOutFields(
        'E_SLSWSA',1,'Pmt. Disc. Amt.',3,'Payment discount amount.');
      WriteEDIOutFields(
        'E_SLSWSA',1,'Pmt. Disc. Days',0,'Number of days allowed for payment discount.');
      WriteEDIOutFields(
        'E_SLSWSA',1,'Pmt. Disc. Percent',3,'Payment discount percent.');
      WriteEDIOutFields(
        'E_SLSWSA',1,'Pmt. Net Days',0,'Number of days to due date.');
      WriteEDIOutFields(
        'E_SLSWSA',1,'SE Control Number',2,'SE Segemnt Control Number');
      WriteEDIOutFields(
        'E_SLSWSA',1,'ST Control Number',2,'ST Segment Control Number');
      WriteEDIOutFields(
        'E_SLSWSA',1,'Today',6,'Today''s date.');
      WriteEDIOutFields(
        'E_SLSWSA',1,'Total Freight Amt.',3,'Total freight amount on this Invoice. (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SLSWSA',1,'Total Inv. Discount',3,'The total invoice level discount.');
      WriteEDIOutFields(
        'E_SLSWSA',1,'Total Pallet Weight',3,'Total weight of pallet items (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SLSWSA',1,'Total Segments',0,'Total Number of Segments exported');
      WriteEDIOutFields(
        'E_SLSWSA',1,'Total Units',3,'Total Units Shipped on document. (Used as hash total)');
      WriteEDIOutFields(
        'E_SLSWSA',1,'Total Units (Base)',3,'Total Units Shipped on document. (Used as hash total)');
      WriteEDIOutFields(
        'E_SLSWSA',1,'Item Tracking Expiration Date',6,'Item Tracking Expiration Date');

      WriteEDIOutFields(
        'E_SLSPOA',1,'GE Control Number',2,'GE segment Control Number');
      WriteEDIOutFields(
        'E_SLSPOA',1,'Gross Ship Wgt.',3,'Gross weight of shipments that make up this document.');
      WriteEDIOutFields(
        'E_SLSPOA',1,'GS Control Number',2,'GS segement Control Number');
      WriteEDIOutFields(
        'E_SLSPOA',1,'IEA Control Number',2,'IEA segment Control Number');
      WriteEDIOutFields(
        'E_SLSPOA',1,'ISA Control Number',2,'ISA segment Control Number');
      WriteEDIOutFields(
        'E_SLSPOA',1,'Line Number',0,'Current Line Number of document. (Incr. each time a line is exported.)');
      WriteEDIOutFields(
        'E_SLSPOA',1,'My Partner ID',1,'The Trading Partner ID of the Navision user.');
      WriteEDIOutFields(
        'E_SLSPOA',1,'Net Ship Wgt.',3,'Net weight of shipments that make up this document.');
      WriteEDIOutFields(
        'E_SLSPOA',1,'Net Unit Price',3,'The net unit price on an document line.  (Amount / Qty)');
      WriteEDIOutFields(
        'E_SLSPOA',1,'Partner ID',1,'Trading Partner ID');
      WriteEDIOutFields(
        'E_SLSPOA',1,'Pmt. Discounted Amt.',3,'Payment after discount.');
      WriteEDIOutFields(
        'E_SLSPOA',1,'Pmt. Disc. Amt.',3,'Payment discount amount.');
      WriteEDIOutFields(
        'E_SLSPOA',1,'Pmt. Disc. Days',0,'Number of days allowed for payment discount.');
      WriteEDIOutFields(
        'E_SLSPOA',1,'Pmt. Disc. Percent',3,'Payment discount percent.');
      WriteEDIOutFields(
        'E_SLSPOA',1,'Pmt. Net Days',0,'Number of days to due date.');
      WriteEDIOutFields(
        'E_SLSPOA',1,'SE Control Number',2,'SE Segemnt Control Number');
      WriteEDIOutFields(
        'E_SLSPOA',1,'ST Control Number',2,'ST Segment Control Number');
      WriteEDIOutFields(
        'E_SLSPOA',1,'Today',6,'Today''s date.');
      WriteEDIOutFields(
        'E_SLSPOA',1,'Total Freight Amt.',3,'Total freight amount on this Invoice. (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SLSPOA',1,'Total Inv. Discount',3,'The total invoice level discount.');
      WriteEDIOutFields(
        'E_SLSPOA',1,'Total Pallet Weight',3,'Total weight of pallet items (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SLSPOA',1,'Total Segments',0,'Total Number of Segments exported');
      WriteEDIOutFields(
        'E_SLSPOA',1,'Total Units',3,'Total Units. (Used as hash total)');
      WriteEDIOutFields(
        'E_SLSPOA',1,'Total Units (Base)',3,'Total Units (Base). (Used as hash total)');
      WriteEDIOutFields(
        'E_SLSPOA',1,'Pmt. Discount Date',6,'Payment Discount Date');

      WriteEDIOutFields(
        'E_SLSSTA',1,'Total Units',3,'Total Units Shipped. (Used as hash total)');
      WriteEDIOutFields(
        'E_SLSSTA',1,'HL Count',0,'HL Count Incr for each HL Segment');
      WriteEDIOutFields(
        'E_SLSSTA',1,'Total HL Count',0,'Exports the Total HL Count');
      WriteEDIOutFields(
        'E_SLSSTA',1,'Qty. Unshipped',3,'EDI Orig. Qty. - (QTS + Qty Shipped)');
      WriteEDIOutFields(
        'E_SLSSTA',1,'Line Status',1,'Line Status - Based on Qty and Qty to Ship');
      WriteEDIOutFields(
        'E_SLSSTA',1,'HL1 Count',0,'HL1 Level Count');
      WriteEDIOutFields(
        'E_SLSSTA',1,'HL2 Count',0,'HL2 Level Count');
      WriteEDIOutFields(
        'E_SLSSTA',1,'HL3 Count',0,'HL3 Level Count');
      WriteEDIOutFields(
        'E_SLSSTA',1,'HL4 Count',0,'HL4 Level Count');
      WriteEDIOutFields(
        'E_SLSSTA',1,'HL5 Count',0,'HL5 Level Count');
      WriteEDIOutFields(
        'E_SLSSTA',1,'Time',1,'Time in 24Hr Format');
      WriteEDIOutFields(
        'E_SLSSTA',1,'Today',6,'Today''s date.');
      WriteEDIOutFields(
        'E_SLSSTA',1,'Line Number',0,'Current Line Number of document. (Incr. each time a line is exported.)');
      WriteEDIOutFields(
        'E_SLSSTA',1,'Document No.',1,'Unique document number for each order status');
      WriteEDIOutFields(
        'E_SLSSTA',1,'HL1 Parent',0,'HL1 Parent Count');
      WriteEDIOutFields(
        'E_SLSSTA',1,'HL2 Parent',0,'HL2 Parent Count');
      WriteEDIOutFields(
        'E_SLSSTA',1,'HL3 Parent',0,'HL3 Parent Count');
      WriteEDIOutFields(
        'E_SLSSTA',1,'HL4 Parent',0,'HL4 Parent Count');
      WriteEDIOutFields(
        'E_SLSSTA',1,'HL5 Parent',0,'HL5 Parent Count');
      WriteEDIOutFields(
        'E_SLSSTA',1,'Total Segments',0,'Total Number of exported Segments');

      WriteEDIOutFields(
        'E_ADVPOA',1,'Total Units',3,'Total Units Shipped. (Used as hash total)');
      WriteEDIOutFields(
        'E_ADVPOA',1,'HL Count',0,'HL Count Incr for each HL Segment');
      WriteEDIOutFields(
        'E_ADVPOA',1,'Total HL Count',0,'Exports the Total HL Count');
      WriteEDIOutFields(
        'E_ADVPOA',1,'Qty. Unshipped',3,'EDI Orig. Qty. - (QTS + Qty Shipped)');
      WriteEDIOutFields(
        'E_ADVPOA',1,'Line Status',1,'Line Status - Based on Qty and Qty to Ship');
      WriteEDIOutFields(
        'E_ADVPOA',1,'HL1 Count',0,'HL1 Level Count');
      WriteEDIOutFields(
        'E_ADVPOA',1,'HL2 Count',0,'HL2 Level Count');
      WriteEDIOutFields(
        'E_ADVPOA',1,'HL3 Count',0,'HL3 Level Count');
      WriteEDIOutFields(
        'E_ADVPOA',1,'HL4 Count',0,'HL4 Level Count');
      WriteEDIOutFields(
        'E_ADVPOA',1,'HL5 Count',0,'HL5 Level Count');
      WriteEDIOutFields(
        'E_ADVPOA',1,'Time',1,'Time in 24Hr Format');
      WriteEDIOutFields(
        'E_ADVPOA',1,'Today',6,'Today''s date.');
      WriteEDIOutFields(
        'E_ADVPOA',1,'Line Number',0,'Current Line Number of document. (Incr. each time a line is exported.)');
      WriteEDIOutFields(
        'E_ADVPOA',1,'Document No.',1,'Unique document number for each order status');
      WriteEDIOutFields(
        'E_ADVPOA',1,'HL1 Parent',0,'HL1 Parent Count');
      WriteEDIOutFields(
        'E_ADVPOA',1,'HL2 Parent',0,'HL2 Parent Count');
      WriteEDIOutFields(
        'E_ADVPOA',1,'HL3 Parent',0,'HL3 Parent Count');
      WriteEDIOutFields(
        'E_ADVPOA',1,'HL4 Parent',0,'HL4 Parent Count');
      WriteEDIOutFields(
        'E_ADVPOA',1,'HL5 Parent',0,'HL5 Parent Count');
      WriteEDIOutFields(
        'E_ADVPOA',1,'Net Ship Wgt.',3,'Net weight of shipments that make up this document.');
      WriteEDIOutFields(
        'E_ADVPOA',1,'Gross Ship Wgt.',3,'Gross weight of shipments that make up this document.');
      WriteEDIOutFields(
        'E_ADVPOA',1,'Net Unit Price',3,'The net unit price on an document line.  (Amount / Qty)');
      WriteEDIOutFields(
        'E_ADVPOA',1,'Pmt. Net Days',0,'Number of days to due date.');
      WriteEDIOutFields(
        'E_ADVPOA',1,'Pmt. Disc. Days',0,'Number of days allowed for payment discount.');
      WriteEDIOutFields(
        'E_ADVPOA',1,'Pmt. Disc. Amt.',3,'Payment discount amount.');
      WriteEDIOutFields(
        'E_ADVPOA',1,'Pmt. Discounted Amt.',3,'Payment after discount.');
      WriteEDIOutFields(
        'E_ADVPOA',1,'Pmt. Disc. Percent',3,'Payment discount percent.');
      WriteEDIOutFields(
        'E_ADVPOA',1,'Total Segments',0,'Total Number of Segments exported');
      WriteEDIOutFields(
        'E_ADVPOA',1,'Pmt. Discount Date',6,'Payment Discount Date');

      WriteEDIOutFields(
        'E_INVADV',1,'Line Number',0,'The current Line Number.  (Incr. each time a line is exported.)');
      WriteEDIOutFields(
        'E_INVADV',1,'Transaction Purpose Code',2,'Transaction Purpose Code, 00 (Original) 07 (Duplicate)');
      WriteEDIOutFields(
        'E_INVADV',1,'Today',6,'Today''s date.');
      WriteEDIOutFields(
        'E_INVADV',1,'Time',1,'Current time in 24 hour format');
      WriteEDIOutFields(
        'E_INVADV',1,'Time HHMMSS',1,'Current time in HHMMSS format');

      WriteEDIOutFields(
        'E_PRICAT',1,'Line Number',0,'The current Line Number.  (Incr. each time a line is exported.)');
      WriteEDIOutFields(
        'E_PRICAT',1,'Today',6,'Today''s date.');
      WriteEDIOutFields(
        'E_PRICAT',1,'Time',1,'Current time in 24 hour format');
      WriteEDIOutFields(
        'E_PRICAT',1,'Time HHMMSS',1,'Current time in HHMMSS format');

      WriteEDIOutFields(
        'E_TFRORD',1,'GE Control Number',2,'GE segment Control Number');
      WriteEDIOutFields(
        'E_TFRORD',1,'GS Control Number',2,'GS segement Control Number');
      WriteEDIOutFields(
        'E_TFRORD',1,'IEA Control Number',2,'IEA segment Control Number');
      WriteEDIOutFields(
        'E_TFRORD',1,'ISA Control Number',2,'ISA segment Control Number');
      WriteEDIOutFields(
        'E_TFRORD',1,'SE Control Number',2,'SE Segemnt Control Number');
      WriteEDIOutFields(
        'E_TFRORD',1,'ST Control Number',2,'ST Segment Control Number');
      WriteEDIOutFields(
        'E_TFRORD',1,'Gross Ship Wgt.',3,'Gross weight of shipments that make up this document.');
      WriteEDIOutFields(
        'E_TFRORD',1,'Net Ship Wgt.',3,'Net weight of shipments that make up this document.');
      WriteEDIOutFields(
        'E_TFRORD',1,'Total Pallet Weight',3,'Total weight of pallet items (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_TFRORD',1,'Total Packages',3,'Total Packages for this Transfer Order');
      WriteEDIOutFields(
        'E_TFRORD',1,'Today',6,'Today''s date.');
      WriteEDIOutFields(
        'E_TFRORD',1,'Time',1,'Current time in 24 hour format');
      WriteEDIOutFields(
        'E_TFRORD',1,'Total Units',3,'Total Units. (Used as hash total)');
      WriteEDIOutFields(
        'E_TFRORD',1,'Total Units (Base)',3,'Total Units (Base). (Used as hash total)');
      WriteEDIOutFields(
        'E_TFRORD',1,'Line Number',0,'The current Line Number.  (Incr. each time a line is exported.)');
      WriteEDIOutFields(
        'E_TFRORD',1,'Item Tracking Qty.',3,'Item Tracking Qty.');

      WriteEDIOutFields(
        'E_TFRSHP',1,'GE Control Number',2,'GE segment Control Number');
      WriteEDIOutFields(
        'E_TFRSHP',1,'GS Control Number',2,'GS segement Control Number');
      WriteEDIOutFields(
        'E_TFRSHP',1,'IEA Control Number',2,'IEA segment Control Number');
      WriteEDIOutFields(
        'E_TFRSHP',1,'ISA Control Number',2,'ISA segment Control Number');
      WriteEDIOutFields(
        'E_TFRSHP',1,'SE Control Number',2,'SE Segemnt Control Number');
      WriteEDIOutFields(
        'E_TFRSHP',1,'ST Control Number',2,'ST Segment Control Number');
      WriteEDIOutFields(
        'E_TFRSHP',1,'Gross Ship Wgt.',3,'Gross weight of shipments that make up this document.');
      WriteEDIOutFields(
        'E_TFRSHP',1,'Net Ship Wgt.',3,'Net weight of shipments that make up this document.');
      WriteEDIOutFields(
        'E_TFRSHP',1,'Total Pallet Weight',3,'Total weight of pallet items (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_TFRSHP',1,'Total Packages',3,'Total Packages for this Transfer Order');
      WriteEDIOutFields(
        'E_TFRSHP',1,'Today',6,'Today''s date.');
      WriteEDIOutFields(
        'E_TFRSHP',1,'Time',1,'Current time in 24 hour format');
      WriteEDIOutFields(
        'E_TFRSHP',1,'Total Units',3,'Total Units. (Used as hash total)');
      WriteEDIOutFields(
        'E_TFRSHP',1,'Total Units (Base)',3,'Total Units (Base). (Used as hash total)');
      WriteEDIOutFields(
        'E_TFRSHP',1,'Line Number',0,'The current Line Number.  (Incr. each time a line is exported.)');

      WriteEDIOutFields(
        'E_SLSPOC',1,'Quantity Change',1,'Quantity Change');
      WriteEDIOutFields(
        'E_SLSPOC',1,'Current Order Qty.',1,'Current Order Qty.');
      WriteEDIOutFields(
        'E_SLSPOC',1,'Line Number',0,'The current Line Number.  (Incr. each time a line is exported.)');
      WriteEDIOutFields(
        'E_SLSPOC',1,'Control No.',1,'Unique Control No.');
      WriteEDIOutFields(
        'E_SLSPOC',1,'Time',1,'Time in 24Hr Format');
      WriteEDIOutFields(
        'E_SLSPOC',1,'Today',6,'Today''s date.');

      WriteEDIOutFields(
        'E_SLSRMA',1,'GE Control Number',2,'GE Segment Control Number');
      WriteEDIOutFields(
        'E_SLSRMA',1,'GS Control Number',2,'GS Segment Control Number');
      WriteEDIOutFields(
        'E_SLSRMA',1,'IEA Control Number',2,'IEA Segment Control Number');
      WriteEDIOutFields(
        'E_SLSRMA',1,'ISA Control Number',2,'ISA Segment Control Number');
      WriteEDIOutFields(
        'E_SLSRMA',1,'SE Control Number',2,'SE segment Control Number');
      WriteEDIOutFields(
        'E_SLSRMA',1,'ST Control Number',2,'ST segment Control Number');
      WriteEDIOutFields(
        'E_SLSRMA',1,'Line Number',0,'The current line number.  (Incr. each time a line is exported.)');
      WriteEDIOutFields(
        'E_SLSRMA',1,'Gross Receipt Wgt.',3,'Gross weight of Receipt.');
      WriteEDIOutFields(
        'E_SLSRMA',1,'Net Receipt Wgt.',3,'Net weight of Receipt.');
      WriteEDIOutFields(
        'E_SLSRMA',1,'Time',1,'Current time in 24 hour format');
      WriteEDIOutFields(
        'E_SLSRMA',1,'Today',6,'Today''s date.');
      WriteEDIOutFields(
        'E_SLSRMA',1,'Total Segments',0,'Total Number of Segments exported.');
      WriteEDIOutFields(
        'E_SLSRMA',1,'Total Units',3,'Total Units on document. (Used as hash total)');
      WriteEDIOutFields(
        'E_SLSRMA',1,'Total Base Units',3,'Total Based Units. (Used as hash total)');

      WriteEDIOutFields(
        'E_SHPADV',1,'GE Control Number',2,'GE segment Control Number');
      WriteEDIOutFields(
        'E_SHPADV',1,'GS Control Number',2,'GS segment Control Number');
      WriteEDIOutFields(
        'E_SHPADV',1,'IEA Control Number',2,'IEA segment Control Number');
      WriteEDIOutFields(
        'E_SHPADV',1,'ISA Control Number',2,'ISA segment Control Number');
      WriteEDIOutFields(
        'E_SHPADV',1,'SE Control Number',2,'SE segment Control Number');
      WriteEDIOutFields(
        'E_SHPADV',1,'ST Control Number',2,'ST segment Control Number');
      WriteEDIOutFields(
        'E_SHPADV',1,'Line Number',0,'The current Line Number.  (Incr. each time a line is exported.)');
      WriteEDIOutFields(
        'E_SHPADV',1,'Gross Ship Wgt.',3,'Gross Ship Wgt. of Order.');
      WriteEDIOutFields(
        'E_SHPADV',1,'Net Ship Wgt.',3,'Net Shipment Weight of order.');
      WriteEDIOutFields(
        'E_SHPADV',1,'Volume',3,'Shipment Volume');
      WriteEDIOutFields(
        'E_SHPADV',1,'Total Pallet Weight',3,'Total weight of pallet items (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SHPADV',1,'Total Freight Amt.',3,'Total freight amount on this Shipment. (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SHPADV',1,'My Partner ID',1,'The Trading Partner ID from the EDI Template.');
      WriteEDIOutFields(
        'E_SHPADV',1,'Total Packages',3,'Total Packages With Shipment');
      WriteEDIOutFields(
        'E_SHPADV',1,'Total Units',3,'Total Units Shipped on document. (Used as hash total)');
      WriteEDIOutFields(
        'E_SHPADV',1,'Total Base Units',3,'Total Base Units Shipped on document. (Used as hash total)');
      WriteEDIOutFields(
        'E_SHPADV',1,'Total Segments',0,'Total Number of exported Segments');
      WriteEDIOutFields(
        'E_SHPADV',1,'Partner ID',1,'Trading Partner ID');
      WriteEDIOutFields(
        'E_SHPADV',1,'Today',6,'Today''s date.');
      WriteEDIOutFields(
        'E_SHPADV',1,'Time',1,'Current time in 24 hour format');
      WriteEDIOutFields(
        'E_SHPADV',1,'Ordered Quantity',3,'Quantity ordered.');
      WriteEDIOutFields(
        'E_SHPADV',1,'Outstanding Quantity',3,'Outstanding Quantity');
      WriteEDIOutFields(
        'E_SHPADV',1,'Pmt. Discounted Amt.',3,'Payment after discount.');
      WriteEDIOutFields(
        'E_SHPADV',1,'Pmt. Disc. Amt.',3,'Payment discount amount.');
      WriteEDIOutFields(
        'E_SHPADV',1,'Pmt. Disc. Days',0,'Number of days allowed for payment discount.');
      WriteEDIOutFields(
        'E_SHPADV',1,'Pmt. Disc. Percent',3,'Payment discount percent.');
      WriteEDIOutFields(
        'E_SHPADV',1,'Pmt. Net Days',0,'Number of days to due date.');
      WriteEDIOutFields(
        'E_SHPADV',1,'Gross Invoice',3,'Gross Invoice Amount');
      WriteEDIOutFields(
        'E_SHPADV',1,'Inv. Amt. Before Inv. Disc.',3,'Inv. Amt. Before Inv. Disc.');
      WriteEDIOutFields(
        'E_SHPADV',1,'Invoice Tax Percent',3,'Invoice Tax Percent');
      WriteEDIOutFields(
        'E_SHPADV',1,'Invoice Tax',3,'Invoice Tax Amount');
      WriteEDIOutFields(
        'E_SHPADV',1,'HL1 Count',0,'HL1 Level Count');
      WriteEDIOutFields(
        'E_SHPADV',1,'HL2 Count',0,'HL2 Level Count');
      WriteEDIOutFields(
        'E_SHPADV',1,'HL3 Count',0,'HL3 Level Count');
      WriteEDIOutFields(
        'E_SHPADV',1,'HL4 Count',0,'HL4 Level Count');
      WriteEDIOutFields(
        'E_SHPADV',1,'HL5 Count',0,'HL5 Level Count');
      WriteEDIOutFields(
        'E_SHPADV',1,'Total HL Count',0,'Exports the Total HL Count');
      WriteEDIOutFields(
        'E_SHPADV',1,'HL1 Parent',0,'HL1 Parent Count');
      WriteEDIOutFields(
        'E_SHPADV',1,'HL2 Parent',0,'HL2 Parent Count');
      WriteEDIOutFields(
        'E_SHPADV',1,'HL3 Parent',0,'HL3 Parent Count');
      WriteEDIOutFields(
        'E_SHPADV',1,'HL4 Parent',0,'HL4 Parent Count');
      WriteEDIOutFields(
        'E_SHPADV',1,'HL5 Parent',0,'HL5 Parent Count');
      WriteEDIOutFields(
        'E_SHPADV',1,'Total Sales Shipment Quantity',3,'Total shipment quantity. (All shipment lines)');
      WriteEDIOutFields(
        'E_SHPADV',1,'HL Item Status',1,'Exports status code entered on EDI Document');
      WriteEDIOutFields(
        'E_SHPADV',1,'HL Order Status',1,'Exports status code entered on EDI Document');
      WriteEDIOutFields(
        'E_SHPADV',1,'Outstanding Quantity',3,'Current outstanding quantity');

      WriteEDIOutFields(
        'E_EMCBOL',1,'Today',6,'Today''s date.');
      WriteEDIOutFields(
        'E_EMCBOL',1,'Time',1,'Current time in 24 hour format');
      WriteEDIOutFields(
        'E_EMCBOL',1,'Line Number',0,'The current Line Number.  (Incr. each time a line is exported.)');
      WriteEDIOutFields(
        'E_EMCBOL',1,'Handling Unit Type',2,'Handling Unit Type code. (Bill of Lading Info. Lines.)');
      WriteEDIOutFields(
        'E_EMCBOL',1,'Package Type',2,'Package Type code.  (Bill of Lading Info. Lines.)');
      WriteEDIOutFields(
        'E_EMCBOL',1,'External Doc. No.',2,'External Document No(s). (Associated to BOL Info. Lines and NMFC.)');
      WriteEDIOutFields(
        'E_EMCBOL',1,'Package UCC No.',2,'Package UCC No(s). (Associated to BOL Info. Lines and NMFC.)');

      WriteEDIOutFields(
        'E_PURRMA',1,'Net Return Wgt.',3,'Net weight of Return.');
      WriteEDIOutFields(
        'E_PURRMA',1,'Gross Return Wgt.',3,'Gross weight of Return.');
      WriteEDIOutFields(
        'E_PURRMA',1,'Each Cost',3,'The unit cost per unit of measure.(Direct Unit Cost/ Qty. per UOM)');
      WriteEDIOutFields(
        'E_PURRMA',1,'Total Units',3,'Total Units on document. (Used as hash total)');
      WriteEDIOutFields(
        'E_PURRMA',1,'Total Base Units',3,'Total Based Units. (Used as hash total)');
      WriteEDIOutFields(
        'E_PURRMA',1,'Line Number',0,'The current line number.  (Incr. each time a line is exported.)');
      WriteEDIOutFields(
        'E_PURRMA',1,'Total Segments',0,'Total Number of Segments exported.');
      WriteEDIOutFields(
        'E_PURRMA',1,'Time',1,'Current time in 24 hour format');
      WriteEDIOutFields(
        'E_PURRMA',1,'Today',6,'Today''s date.');

      WriteEDIOutFields(
        'E_ZEROSN',1,'GE Control Number',2,'GE segment Control Number');
      WriteEDIOutFields(
        'E_ZEROSN',1,'Gross Ship Wgt.',3,'Gross weight of shipments that make up this document.');
      WriteEDIOutFields(
        'E_ZEROSN',1,'GS Control Number',2,'GS segement Control Number');
      WriteEDIOutFields(
        'E_ZEROSN',1,'IEA Control Number',2,'IEA segment Control Number');
      WriteEDIOutFields(
        'E_ZEROSN',1,'ISA Control Number',2,'ISA segment Control Number');
      WriteEDIOutFields(
        'E_ZEROSN',1,'Line Number',0,'Current Line Number of document. (Incr. each time a line is exported.)');
      WriteEDIOutFields(
        'E_ZEROSN',1,'My Partner ID',1,'The Trading Partner ID of the Navision user.');
      WriteEDIOutFields(
        'E_ZEROSN',1,'Net Ship Wgt.',3,'Net weight of shipments that make up this document.');
      WriteEDIOutFields(
        'E_ZEROSN',1,'Net Unit Price',3,'The net unit price on an document line.  (Amount / Qty)');
      WriteEDIOutFields(
        'E_ZEROSN',1,'Partner ID',1,'Trading Partner ID');
      WriteEDIOutFields(
        'E_ZEROSN',1,'Pmt. Discounted Amt.',3,'Payment after discount.');
      WriteEDIOutFields(
        'E_ZEROSN',1,'Pmt. Disc. Amt.',3,'Payment discount amount.');
      WriteEDIOutFields(
        'E_ZEROSN',1,'Pmt. Disc. Days',0,'Number of days allowed for payment discount.');
      WriteEDIOutFields(
        'E_ZEROSN',1,'Pmt. Disc. Percent',3,'Payment discount percent.');
      WriteEDIOutFields(
        'E_ZEROSN',1,'Pmt. Net Days',0,'Number of days to due date.');
      WriteEDIOutFields(
        'E_ZEROSN',1,'SE Control Number',2,'SE Segemnt Control Number');
      WriteEDIOutFields(
        'E_ZEROSN',1,'ST Control Number',2,'ST Segment Control Number');
      WriteEDIOutFields(
        'E_ZEROSN',1,'Today',6,'Today''s date.');
      WriteEDIOutFields(
        'E_ZEROSN',1,'Total Freight Amt.',3,'Total freight amount on this Invoice. (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_ZEROSN',1,'Total Inv. Discount',3,'The total invoice level discount.');
      WriteEDIOutFields(
        'E_ZEROSN',1,'Total Pallet Weight',3,'Total weight of pallet items (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_ZEROSN',1,'Total Segments',0,'Total Number of Segments exported');
      WriteEDIOutFields(
        'E_ZEROSN',1,'Total Units',3,'Total Units. (Used as hash total)');
      WriteEDIOutFields(
        'E_ZEROSN',1,'Total Units (Base)',3,'Total Units (Base). (Used as hash total)');
      WriteEDIOutFields(
        'E_ZEROSN',1,'HL1 Count',0,'HL1 Level Count');
      WriteEDIOutFields(
        'E_ZEROSN',1,'HL2 Count',0,'HL2 Level Count');
      WriteEDIOutFields(
        'E_ZEROSN',1,'HL3 Count',0,'HL3 Level Count');
      WriteEDIOutFields(
        'E_ZEROSN',1,'HL4 Count',0,'HL4 Level Count');
      WriteEDIOutFields(
        'E_ZEROSN',1,'HL5 Count',0,'HL5 Level Count');
      WriteEDIOutFields(
        'E_ZEROSN',1,'Total HL Count',0,'Exports the Total HL Count');
      WriteEDIOutFields(
        'E_ZEROSN',1,'HL1 Parent',0,'HL1 Parent Count');
      WriteEDIOutFields(
        'E_ZEROSN',1,'HL2 Parent',0,'HL2 Parent Count');
      WriteEDIOutFields(
        'E_ZEROSN',1,'HL3 Parent',0,'HL3 Parent Count');
      WriteEDIOutFields(
        'E_ZEROSN',1,'HL4 Parent',0,'HL4 Parent Count');
      WriteEDIOutFields(
        'E_ZEROSN',1,'HL5 Parent',0,'HL5 Parent Count');
      WriteEDIOutFields(
        'E_ZEROSN',1,'Time HHMM',1,'Current time in 24 HHMM format');
      WriteEDIOutFields(
        'E_ZEROSN',1,'Time HHMMSS',1,'Current time in 24 HHMMSS format');
      WriteEDIOutFields(
        'E_ZEROSN',1,'Time HHMMSSDD',1,'Current time in 24 HHMMSSDD format');

      WriteEDIOutFields(
        'E_SLSQUO',1,'GE Control Number',2,'GE segment Control Number');
      WriteEDIOutFields(
        'E_SLSQUO',1,'Gross Ship Wgt.',3,'Gross weight of shipments that make up this document.');
      WriteEDIOutFields(
        'E_SLSQUO',1,'GS Control Number',2,'GS segement Control Number');
      WriteEDIOutFields(
        'E_SLSQUO',1,'IEA Control Number',2,'IEA segment Control Number');
      WriteEDIOutFields(
        'E_SLSQUO',1,'ISA Control Number',2,'ISA segment Control Number');
      WriteEDIOutFields(
        'E_SLSQUO',1,'Line Number',0,'Current Line Number of document. (Incr. each time a line is exported.)');
      WriteEDIOutFields(
        'E_SLSQUO',1,'My Partner ID',1,'The Trading Partner ID of the Navision user.');
      WriteEDIOutFields(
        'E_SLSQUO',1,'Net Ship Wgt.',3,'Net weight of shipments that make up this document.');
      WriteEDIOutFields(
        'E_SLSQUO',1,'Net Unit Price',3,'The net unit price on an document line.  (Amount / Qty)');
      WriteEDIOutFields(
        'E_SLSQUO',1,'Partner ID',1,'Trading Partner ID');
      WriteEDIOutFields(
        'E_SLSQUO',1,'Pmt. Discounted Amt.',3,'Payment after discount.');
      WriteEDIOutFields(
        'E_SLSQUO',1,'Pmt. Disc. Amt.',3,'Payment discount amount.');
      WriteEDIOutFields(
        'E_SLSQUO',1,'Pmt. Disc. Days',0,'Number of days allowed for payment discount.');
      WriteEDIOutFields(
        'E_SLSQUO',1,'Pmt. Disc. Percent',3,'Payment discount percent.');
      WriteEDIOutFields(
        'E_SLSQUO',1,'Pmt. Net Days',0,'Number of days to due date.');
      WriteEDIOutFields(
        'E_SLSQUO',1,'SE Control Number',2,'SE Segemnt Control Number');
      WriteEDIOutFields(
        'E_SLSQUO',1,'ST Control Number',2,'ST Segment Control Number');
      WriteEDIOutFields(
        'E_SLSQUO',1,'Today',6,'Today''s date.');
      WriteEDIOutFields(
        'E_SLSQUO',1,'Total Freight Amt.',3,'Total freight amount on this Invoice. (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SLSQUO',1,'Total Inv. Discount',3,'The total invoice level discount.');
      WriteEDIOutFields(
        'E_SLSQUO',1,'Total Pallet Weight',3,'Total weight of pallet items (Use EDI Total Fields)');
      WriteEDIOutFields(
        'E_SLSQUO',1,'Total Segments',0,'Total Number of Segments exported');
      WriteEDIOutFields(
        'E_SLSQUO',1,'Total Units',3,'Total units expected to ship. (Used as hash total)');
      WriteEDIOutFields(
        'E_SLSQUO',1,'Total Units (Base)',3,'Total Units (Base). (Used as hash total)');
    END;

    PROCEDURE WriteEDIOutFields@7(NavisionDocument@1240030000 : Code[10];FieldType@1240030001 : Option;EDIFieldCode@1240030002 : Text[40];DataType@1240030003 : Option;Description@1240030004 : Text[80]);
    VAR
      EDIFields@1240020000 : Record 14002356;
    BEGIN
      EDIFields.RESET;
      EDIFields.SETRANGE("Navision Document",NavisionDocument);
      EDIFields.SETFILTER("EDI Field Code",'%1','@' + EDIFieldCode);
      EDIFields.SETRANGE("Field Type",FieldType);
      IF NOT EDIFields.FIND('-') THEN BEGIN
        EDIFields.SetManualEntry(TRUE);
        EDIFields."Navision Document" := NavisionDocument;
        EDIFields."EDI Field Code" := EDIFieldCode;
        EDIFields."Data Type" := DataType;
        EDIFields.Description := Description;
        EDIFields."Field Type" := FieldType;
        EDIFields.Packaged := TRUE;
        EDIFields.Custom := FALSE;
        EDIFields."Manual Entry" := FALSE;
        EDIFields.INSERT;
      END ELSE BEGIN
        EDIFields.DELETE;
        EDIFields.SetManualEntry(TRUE);
        EDIFields."Navision Document" := NavisionDocument;
        EDIFields."EDI Field Code" := EDIFieldCode;
        EDIFields."Data Type" := DataType;
        EDIFields.Description := Description;
        EDIFields."Field Type" := FieldType;
        EDIFields.Packaged := TRUE;
        EDIFields.Custom := FALSE;
        EDIFields."Manual Entry" := FALSE;
        EDIFields.INSERT;
      END;
    END;

    LOCAL PROCEDURE GetSalesShptLines@4(VAR SalesInvLine@1000000000 : Record 113;VAR SalesIHeader@1000000005 : Record 112);
    VAR
      SalesShptLine@1003 : Record 111;
      ItemLedgEntry@1002 : Record 32;
      ValueEntry@1001 : Record 5802;
      PostedWhseShipmentLine@1000000001 : Record 7323;
      IWXLicensePlateHeader@1000000002 : Record 23044505;
    BEGIN
      //-->TPZ3178
      PKgTracking := '';
      IF SalesInvLine.Type <> SalesInvLine.Type::Item THEN
        EXIT;

      FilterPstdDocLineValueEntries(ValueEntry,SalesInvLine);
      IF ValueEntry.FINDSET THEN
        REPEAT
          ItemLedgEntry.GET(ValueEntry."Item Ledger Entry No.");
          IF ItemLedgEntry."Document Type" = ItemLedgEntry."Document Type"::"Sales Shipment" THEN
            IF SalesShptLine.GET(ItemLedgEntry."Document No.",ItemLedgEntry."Document Line No.") THEN BEGIN
              PostedWhseShipmentLine.RESET;
              PostedWhseShipmentLine.SETRANGE("Posted Source No.",SalesShptLine."Document No.");
              IF PostedWhseShipmentLine.FINDFIRST THEN BEGIN
                IWXLicensePlateHeader.RESET;
                IWXLicensePlateHeader.SETRANGE("Shipment No.",PostedWhseShipmentLine."No.");
                IF IWXLicensePlateHeader.FINDFIRST THEN BEGIN
                  IF IWXLicensePlateHeader."Package Tracking Number" <>'' THEN BEGIN
                    PKgTracking := IWXLicensePlateHeader."Package Tracking Number";
                  END;
                END;
              END;
            END;
        UNTIL ValueEntry.NEXT = 0;
      //<--TPZ3178
    END;

    [External]
    PROCEDURE FilterPstdDocLineValueEntries@1170000000(VAR ValueEntry@1000 : Record 5802;VAR SalesInvLine@1000000000 : Record 113);
    BEGIN
      //-->TPZ3178
      ValueEntry.RESET;
      ValueEntry.SETCURRENTKEY("Document No.");
      ValueEntry.SETRANGE("Document No.",SalesInvLine."Document No.");
      ValueEntry.SETRANGE("Document Type",ValueEntry."Document Type"::"Sales Invoice");
      ValueEntry.SETRANGE("Document Line No.",SalesInvLine."Line No.");
      //<--TPZ3178
    END;

    BEGIN
    {
      LS001 JH 05/16/19 - add logic for Conduit division
      001 TPZ3178 GKG 05252021 added code to send LP tracking no.
    }
    END.
  }
}

