OBJECT Codeunit 50035 Expensify Import Manual
{
  OBJECT-PROPERTIES
  {
    Date=07/01/20;
    Time=12:00:00 AM;
    Modified=Yes;
    Version List=TPZ000.00.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            JobQueueEntry@1000000001 : Record 472;
          BEGIN
            //JobQueueEntry."Parameter String" := 'FileHandler';
            //ExpensifyImport.RUN(JobQueueEntry);
            //MESSAGE('DONE');


            Initializer;
            FileHandler;
            ScanExpenseEntries;
            ScanExpenseEntriesForPayment;

            //PostPuchJournal;
            //PostPaymentJournal;
            //FileClosure;
          END;

  }
  CODE
  {
    VAR
      ExpensifyImpBufferRecMain@1000000009 : Record 50036;
      ExpensifyImportXMLPort@1000000000 : XMLport 50013;
      ExpensifyInputStream@1000000001 : InStream;
      ExpensifyImportFile@1000000002 : File;
      GenLedgSetup@1000000003 : Record 98;
      FileRec@1000000004 : Record 2000000022;
      Finished@1000000005 : Boolean;
      GenJnlLineRecPurch@1000000006 : Record 81;
      GenJnlLineRecPymnt@1000000028 : Record 81;
      GenJnlLineRec@1000000029 : Record 81;
      GenJnlBatchRec@1000000007 : Record 232;
      GenJnlTemplateRec@1000000008 : Record 80;
      CompDimRec@1000000010 : Record 348;
      CompDimValRec@1000000011 : Record 349;
      SiteDimRec@1000000012 : Record 348;
      SiteDimValRec@1000000013 : Record 349;
      DepDimRec@1000000014 : Record 348;
      DepDimValRec@1000000015 : Record 349;
      DivDimRec@1000000016 : Record 348;
      DivDimValRec@1000000017 : Record 349;
      ExpensifyImpBufferRecSum@1000000018 : Record 50036;
      LastLineNum@1000000019 : Integer;
      CompanyRec@1000000020 : Record 2000000006;
      FromDate@1000000021 : Date;
      ToDate@1000000022 : Date;
      FromMonthNum@1000000023 : Integer;
      ReimbursedMonthNum@1000000024 : Integer;
      ToMonthNum@1000000030 : Integer;
      AmountToBillPerGroup@1000000025 : Decimal;
      VendorRec@1000000026 : Record 23;
      GenJnlPostLine@1000000027 : Codeunit 12;
      InvoiceNum@1000000031 : Code[20];
      ReimbursedWeekNum@1000000032 : Integer;
      GenJnlLineRec_IC_Purch@1000000033 : Record 81;
      GenJnlLineRec_IC_Pymnt@1000000034 : Record 81;
      GenJnlBatchRec_IC@1000000036 : Record 232;
      GenJnlTemplateRec_IC@1000000035 : Record 80;
      GenLedgSetup_IC@1000000037 : Record 98;
      CompanyNameVar@1000000038 : Text;
      CalcAmtPerGrp@1000000040 : Decimal;
      CalcAmtPerGrpForPymnt@1000000041 : Decimal;
      DescDashPOS@1000000039 : Integer;

    PROCEDURE Initializer@1000000008();
    BEGIN
      GenLedgSetup.GET;
      GenLedgSetup.TESTFIELD("Expensify Vendor No.");
      GenLedgSetup.TESTFIELD("Expensify Import File Path");
      GenLedgSetup.TESTFIELD("Expensify Default Batch");
      GenLedgSetup.TESTFIELD("Expensify Bank Acc. No.");

      VendorRec.GET(GenLedgSetup."Expensify Vendor No.");
    END;

    PROCEDURE FileHandler@1000000003();
    BEGIN
      FileRec.RESET;
      FileRec.SETRANGE(Path,FORMAT(GenLedgSetup."Expensify Import File Path"));
      FileRec.SETRANGE("Is a file",TRUE);
      IF FileRec.FIND('-') THEN
        REPEAT
          ExpensifyImportFile.OPEN(FORMAT(GenLedgSetup."Expensify Import File Path" + FileRec.Name));
          ExpensifyImportFile.CREATEINSTREAM(ExpensifyInputStream);
          XMLPORT.IMPORT(XMLPORT::"Expensify Transactions Import", ExpensifyInputStream);
          ExpensifyImportFile.CLOSE;
        UNTIL (FileRec.NEXT = 0) OR (Finished = TRUE);
    END;

    PROCEDURE ScanExpenseEntries@1000000001();
    BEGIN
      WITH ExpensifyImpBufferRecMain DO BEGIN
        REPEAT
          RESET;
          SETCURRENTKEY(Status,"Company Code","Site Code","Division Code","Department Code","G/L Account No.","Expensify Reference No.");
          SETRANGE(Status,Status::Imported);
          SETFILTER("Company Code",'<>%1', 'COMPANY');  //Skip the Header
          IF FINDSET(FALSE,FALSE) THEN BEGIN
            CalcAmtPerGrp := 0;
            CalcAmtPerGrp := SumAmountsPerSummarizedEntries(ExpensifyImpBufferRecMain);
            IF CalcAmtPerGrp <> 0 THEN
              CreatePurchJournal(ExpensifyImpBufferRecMain,ExpensifyImpBufferRecMain."Date Reimbursed",CalcAmtPerGrp);
          END;
        UNTIL(NEXT = 0);
      END;
    END;

    PROCEDURE SumAmountsPerSummarizedEntries@1000000002(VAR pExpEntryBuffMain@1000000000 : Record 50036) : Decimal;
    VAR
      AmtPerGrp@1000000001 : Decimal;
      LocalExpensBuff@1000000002 : Record 50036;
    BEGIN
      AmountToBillPerGroup := 0; //Initialization

      WITH ExpensifyImpBufferRecSum DO BEGIN
        RESET;
        SETCURRENTKEY(Status,"Company Code","Site Code","Division Code","Department Code","G/L Account No.","Expensify Reference No.");
        SETRANGE(Status,Status::Imported);
        SETRANGE("Company Code",pExpEntryBuffMain."Company Code");
        SETRANGE("Site Code",pExpEntryBuffMain."Site Code");
        SETRANGE("Division Code",pExpEntryBuffMain."Division Code");
        SETRANGE("Department Code",pExpEntryBuffMain."Department Code");
        SETRANGE("G/L Account No.",pExpEntryBuffMain."G/L Account No.");
        SETRANGE("Expensify Reference No.",pExpEntryBuffMain."Expensify Reference No.");
        //SETAUTOCALCFIELDS("Total Amount Reimbursed");
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          AmountToBillPerGroup := 0;
          REPEAT
            AmountToBillPerGroup := AmountToBillPerGroup + "Amount Reimbursed";
          UNTIL(ExpensifyImpBufferRecSum.NEXT=0);
          MODIFYALL(ExpensifyImpBufferRecSum.Status,ExpensifyImpBufferRecSum.Status::Processed);
        END;
      END;
      EXIT(AmountToBillPerGroup);
    END;

    PROCEDURE CreatePurchJournal@1000000000(VAR pExpImpBuffRec@1000000000 : Record 50036;pPostingDate@1000000001 : Date;pAmountPerGroup@1000000002 : Decimal) : Boolean;
    VAR
      LocalPurchICJnlRec@1000000003 : Record 81;
    BEGIN
      //Create Purchase Journal
      GenJnlTemplateRec.GET('PURCHASES');
      IF NOT GenJnlBatchRec.GET(GenJnlTemplateRec.Name,GenLedgSetup."Expensify Default Batch") THEN BEGIN
        GenJnlBatchRec.INIT;
        GenJnlBatchRec."Journal Template Name" := GenJnlTemplateRec.Name;
        GenJnlBatchRec.Name := GenLedgSetup."Expensify Default Batch";
        GenJnlBatchRec.INSERT(TRUE);
      END;

      WITH GenJnlLineRecPurch DO BEGIN
        RESET;
        SETRANGE("Journal Template Name",GenJnlTemplateRec.Name);
        SETRANGE("Journal Batch Name",GenJnlBatchRec.Name);
        IF FIND('+') THEN
          LastLineNum := "Line No."
        ELSE
          LastLineNum := 0;

        INIT;
        "Journal Template Name" := GenJnlTemplateRec.Name;
        "Journal Batch Name" := GenJnlBatchRec.Name;
        "Line No." := LastLineNum + 10000;
        INSERT (TRUE);

        VALIDATE("Account Type","Account Type"::Vendor);
        VALIDATE("Account No.",GenLedgSetup."Expensify Vendor No.");
        VALIDATE("Posting Date",pPostingDate);
        VALIDATE("Document Type","Document Type"::Invoice);
        DescDashPOS := STRPOS(pExpImpBuffRec.Description,'-');
        VALIDATE("Document No.",
                  FORMAT(pExpImpBuffRec."Expensify Reference No.") +
                  '_' +
                  FORMAT(COPYSTR(pExpImpBuffRec.Description,1,4)) +
                  FORMAT(COPYSTR(pExpImpBuffRec.Description, DescDashPOS+1, 2)));
        InvoiceNum := "Document No.";
        VALIDATE(Description,pExpImpBuffRec.Description);
        VALIDATE("Bal. Account No.",pExpImpBuffRec."G/L Account No.");
        "Secondary G/L Acc No." := pExpImpBuffRec."Secondary G/L Account No.";
        VALIDATE(Amount,-pAmountPerGroup);
        VALIDATE("Shortcut Dimension 1 Code", pExpImpBuffRec."Department Code");
        VALIDATE("Shortcut Dimension 2 Code",pExpImpBuffRec."Site Code");
        VALIDATE("Shortcut Dimension 5 Code",pExpImpBuffRec."Division Code");
        VALIDATE("Shortcut Dimension 7 Code",pExpImpBuffRec."Company Code");
        VALIDATE("External Document No.",FORMAT('E_' + InvoiceNum));
        "Pmt. Discount Date" := 0D;
        "Payment Discount %" := 0;
        MODIFY(TRUE);

      END;
    END;

    PROCEDURE FileClosure@1000000006();
    BEGIN
      FileRec.RESET;
      FileRec.SETRANGE(Path,FORMAT(GenLedgSetup."Expensify Import File Path"));
      FileRec.SETRANGE("Is a file",TRUE);
      IF FileRec.FIND('-') THEN
        REPEAT
          COPY(GenLedgSetup."Expensify Import File Path" + FileRec.Name, GenLedgSetup."Expensify Import File Path"+'\Archive\'+ 'Processed_' + FileRec.Name);
          ERASE(GenLedgSetup."Expensify Import File Path" + FileRec.Name);
        UNTIL (FileRec.NEXT = 0) OR (Finished = TRUE)
    END;

    PROCEDURE ScanExpenseEntriesForPayment@1000000013();
    BEGIN
      WITH ExpensifyImpBufferRecMain DO BEGIN
        REPEAT
          RESET;
          SETCURRENTKEY("Payment Status","Company Code","Site Code","Division Code","Department Code","G/L Account No.","Expensify Reference No.");
          SETRANGE("Payment Status","Payment Status"::Imported);
          SETFILTER("Company Code",'<>%1', 'COMPANY');  //Skip the Header
          IF FINDSET(FALSE,FALSE) THEN BEGIN
            CalcAmtPerGrpForPymnt := 0;
            CalcAmtPerGrpForPymnt := SumAmountsPerSummarizedEntriesForPymnt(ExpensifyImpBufferRecMain);
            IF  CalcAmtPerGrpForPymnt <> 0 THEN
              CreatePaymentJournal(ExpensifyImpBufferRecMain,ExpensifyImpBufferRecMain."Date Reimbursed",CalcAmtPerGrpForPymnt);
          END;
        UNTIL(NEXT=0);
      END;
    END;

    PROCEDURE CreatePaymentJournal@1000000007(VAR pExpImpBuffRec@1000000002 : Record 50036;pPostingDate@1000000001 : Date;pAmountPerGroup@1000000000 : Decimal) : Boolean;
    VAR
      LocalAppVendLedgPage@1000000003 : Page 233;
    BEGIN
      GenJnlTemplateRec.GET('PAYMENTS');
      IF NOT GenJnlBatchRec.GET(GenJnlTemplateRec.Name,GenLedgSetup."Expensify Default Batch") THEN BEGIN
        GenJnlBatchRec.INIT;
        GenJnlBatchRec."Journal Template Name" := GenJnlTemplateRec.Name;
        GenJnlBatchRec.Name := GenLedgSetup."Expensify Default Batch";
        GenJnlBatchRec.INSERT(TRUE);
      END;

      WITH GenJnlLineRecPymnt DO BEGIN
        RESET;
        SETRANGE("Journal Template Name",GenJnlTemplateRec.Name);
        SETRANGE("Journal Batch Name",GenJnlBatchRec.Name);
        IF FIND('+') THEN
          LastLineNum := "Line No."
        ELSE
          LastLineNum := 0;

        INIT;
        "Journal Template Name" := GenJnlTemplateRec.Name;
        "Journal Batch Name" := GenJnlBatchRec.Name;
        "Line No." := LastLineNum + 10000;
        INSERT (TRUE);

        VALIDATE("Account Type","Account Type"::Vendor);
        VALIDATE("Account No.",GenLedgSetup."Expensify Vendor No.");
        VALIDATE("Posting Date",pPostingDate);
        VALIDATE("Document Type","Document Type"::Payment);
        VALIDATE("Document No.",FORMAT('PY_' + pExpImpBuffRec."Expensify Reference No."));
        VALIDATE(Description,FORMAT('Payment for Expensify'));
        VALIDATE("Payment Method Code",'EXPENSIFY');
        VALIDATE("Bal. Account Type","Bal. Account Type"::"Bank Account");
        VALIDATE("Bal. Account No.",GenLedgSetup."Expensify Bank Acc. No.");
        VALIDATE(Amount,pAmountPerGroup);
        VALIDATE("Applies-to ID",pExpImpBuffRec."Expensify Reference No.");
         "Allow Application" := TRUE;
        VALIDATE("Shortcut Dimension 1 Code", pExpImpBuffRec."Department Code");
        IF pExpImpBuffRec."Site Code" = '01' THEN
          pExpImpBuffRec."Site Code" := '1';
        VALIDATE("Shortcut Dimension 2 Code",pExpImpBuffRec."Site Code");
        VALIDATE("Shortcut Dimension 5 Code",'C');
        VALIDATE("External Document No.", FORMAT('E_' + "Document No."));
        VALIDATE("Shortcut Dimension 7 Code",pExpImpBuffRec."Company Code");
        MODIFY(TRUE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE PostPaymentJournal@1000000009();
    VAR
      LocalGenJnlLine@1000000000 : Record 81;
    BEGIN
      GenLedgSetup.GET;
      WITH LocalGenJnlLine DO BEGIN
        RESET;
        SETRANGE("Journal Template Name",'PAYMENTS');
        SETRANGE("Journal Batch Name",GenLedgSetup."Expensify Default Batch");
        IF FINDSET THEN BEGIN
          REPEAT
            ApplyPaymentToInvoice(LocalGenJnlLine);
            GenJnlPostLine.RunWithCheck(LocalGenJnlLine);
          UNTIL(NEXT=0);
          DELETEALL;
        END;
      END;
    END;

    PROCEDURE SumAmountsPerSummarizedEntriesForPymnt@1000000010(VAR pExpEntryBuffMain@1000000000 : Record 50036) : Decimal;
    VAR
      AmtPerGrp@1000000001 : Decimal;
      LocalExpensBuff@1000000002 : Record 50036;
    BEGIN
      AmountToBillPerGroup := 0; //Initialization

      WITH ExpensifyImpBufferRecSum DO BEGIN
        RESET;
        SETCURRENTKEY(Status,"Company Code","Site Code","Division Code","Department Code","G/L Account No.","Expensify Reference No.");
        SETRANGE(Status,pExpEntryBuffMain.Status);
        SETRANGE("Company Code",pExpEntryBuffMain."Company Code");
        SETRANGE("Site Code",pExpEntryBuffMain."Site Code");
        SETRANGE("Division Code",pExpEntryBuffMain."Division Code");
        SETRANGE("Department Code",pExpEntryBuffMain."Department Code");
        SETRANGE("Expensify Reference No.",pExpEntryBuffMain."Expensify Reference No.");
        SETAUTOCALCFIELDS("Total Amount for Payment");
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          AmountToBillPerGroup := "Total Amount for Payment";
          MODIFYALL("Payment Status",ExpensifyImpBufferRecSum."Payment Status"::Processed);
        END;
        EXIT(AmountToBillPerGroup);
      END;
    END;

    PROCEDURE PostPuchJournal@1000000016();
    VAR
      LocalGenJnlLine@1000000000 : Record 81;
    BEGIN
      GenLedgSetup.GET;
      WITH LocalGenJnlLine DO BEGIN
        RESET;
        SETRANGE("Journal Template Name",'Purchases');
        SETRANGE("Journal Batch Name",GenLedgSetup."Expensify Default Batch");
        IF FINDSET THEN BEGIN
          REPEAT
            GenJnlPostLine.RunWithCheck(LocalGenJnlLine);
          UNTIL(NEXT=0);
          DELETEALL;
        END;
      END;
    END;

    PROCEDURE ApplyPaymentToInvoice@1000000011(VAR pGenJnlLine@1000000000 : Record 81);
    VAR
      LocalApplyVendEntryCU@1000000001 : Codeunit 111;
      LocalAppliedVendLedgEntry@1000000002 : Record 25;
      LocalApplyingVendLedgEntry@1000000003 : Record 25;
    BEGIN
      WITH LocalApplyingVendLedgEntry DO BEGIN
        "Posting Date" := pGenJnlLine."Posting Date";
        "Document Type" := pGenJnlLine."Document Type";
        "Document No." := pGenJnlLine."Document No.";
        "Vendor No." := pGenJnlLine."Account No.";
        Description := pGenJnlLine.Description;
        "Currency Code" := pGenJnlLine."Currency Code";
        Amount := pGenJnlLine.Amount;
        "Remaining Amount" := pGenJnlLine.Amount;
      END;
      WITH LocalAppliedVendLedgEntry DO BEGIN
        RESET;
        SETCURRENTKEY("Vendor No.",Open,Positive);
        SETRANGE("Vendor No.",pGenJnlLine."Account No.");
        SETRANGE(Open,TRUE);
        SETFILTER("Document No.",'%1',pGenJnlLine."Applies-to ID" + '*');
        IF FINDSET(FALSE,FALSE) THEN
          REPEAT
            LocalApplyVendEntryCU.SetApplId(LocalAppliedVendLedgEntry,LocalApplyingVendLedgEntry,pGenJnlLine."Applies-to ID");
          UNTIL(NEXT=0)
      END;
    END;

    BEGIN
    {
      2017-03-15 TPZ1769 SDESAI
        Expensify expense report processing
      2017-07-10 TPZ1769 SDESAI
        Updated to fix summary total logic and
        added application from consolidated payments to respoective invoices.
        Originally was using Applies-to Doc Type / No. now it uses Applies-to ID.
    }
    END.
  }
}

