OBJECT Codeunit 23044507 WHI Physical Inv. Mgmt.
{
  OBJECT-PROPERTIES
  {
    Date=05/20/21;
    Time=[ 2:09:28 PM];
    Modified=Yes;
    Version List=WHI2.4.7684.0;
  }
  PROPERTIES
  {
    TableNo=23044511;
    OnRun=VAR
            liEventID@1000000002 : Integer;
            ltxtOutputText@1000000001 : BigText;
            losReturnMessage@1000000000 : OutStream;
          BEGIN
            codRegionCode := Rec.getValue('device_culture'); //<IW author="R.Trudeau" date="10/17/18" issue="TFS3495" />

            liEventID := Rec.getEvent();
            executeEvent(liEventID, Rec, ltxtOutputText);
            "Extensibility Blob".CREATEOUTSTREAM( losReturnMessage );
            ltxtOutputText.WRITE(losReturnMessage);
            MODIFY();
          END;

  }
  CODE
  {
    VAR
      recConfig@1000000017 : Record 23044504;
      cuCommonFuncs@1000000001 : Codeunit 23044501;
      cuJournalFuncs@1000000019 : Codeunit 23044528;
      cuDatasetTools@1000000030 : Codeunit 23044535;
      cuActivityLogMgt@1000000035 : Codeunit 23044537;
      cuCommonBase@1000000033 : Codeunit 23044519;
      cuTranslationMgmt@1000000044 : Codeunit 23044526;
      iEventID@1000000018 : Integer;
      codUserName@1000000000 : Code[50];
      codRegionCode@1000000043 : Code[10];

    PROCEDURE executeEvent@1000000004(piEventID@1000000000 : Integer;VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000002 : BigText);
    BEGIN
      iEventID := piEventID;

      CASE piEventID OF
        30000:  getDocumentList(ptrecEventParams, pbsOutput);
        30004:  postSheet(ptrecEventParams, pbsOutput);
        30006:  changeCountLineComment(ptrecEventParams, pbsOutput);
        30007:  deleteLine(ptrecEventParams, pbsOutput);
        30008:  createNewCount( ptrecEventParams, pbsOutput);
        30009:  getCountSheetLines(ptrecEventParams, pbsOutput);
        30010:  addCountSheetLine(ptrecEventParams, pbsOutput);
        30011:  updateSheetLine(ptrecEventParams, pbsOutput);
        30012:  processCountSheetLPScan(ptrecEventParams, pbsOutput);

      END;
    END;

    PROCEDURE getDocumentList@1000000000(VAR ptrecEventParams@1000000006 : TEMPORARY Record 23044511;VAR pbsOutput2@1000000005 : BigText);
    VAR
      lcodLocation@1000000009 : Code[10];
      lrecCountCnfg@1000000008 : Record 23044300;
      lsFilter@1000000007 : Text[250];
      lrecInvCount@1000000004 : Record 23044304;
      lbtAddResponse@1000000003 : BigText;
      lcodNewCount@1000000002 : Code[20];
      ldnOutput@1000000010 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lrrefSheets@1000000000 : RecordRef;
    BEGIN
      // Event 30000
      // Returns available count sheets

      lcodLocation := ptrecEventParams.getValue('location');
      lsFilter := ptrecEventParams.getValue('filter');
      lrecInvCount.SETCURRENTKEY("Location Code", Active);
      lrecInvCount.SETRANGE("Location Code", lcodLocation);
      lrecInvCount.SETRANGE(Active, TRUE);

      cuCommonFuncs.getDeviceConfig(recConfig,ptrecEventParams);
      IF ( NOT lrecInvCount.FINDSET(FALSE) ) THEN BEGIN
        IF ( recConfig."Auto Create Count Template" <> '' ) THEN BEGIN
          // lbtAddResponse isn't really used
          lcodNewCount := createNewCount(ptrecEventParams, lbtAddResponse );
          IF ( lrecInvCount.GET(lcodNewCount) ) THEN BEGIN
            lrecInvCount.Active := TRUE;
            lrecInvCount.MODIFY(TRUE);
          END;
          lrecInvCount.FINDSET(FALSE); // if createNewCount worked, we'll find one.
        END; // if we can find an active count.
      END; // if we cannot find an active count


      lrecCountCnfg.SETAUTOCALCFIELDS(Active);
      lrecCountCnfg.SETRANGE(Active, TRUE );

      // get the count sheets
      lrecCountCnfg.SETRANGE("Location Code", lcodLocation);

      IF( lsFilter <> '' ) THEN
        lrecCountCnfg.SETFILTER("Sheet Name",lsFilter);

      ldnOutput := ldnOutput.StringBuilder();

      IF (lrecCountCnfg.FIND('-')) THEN;  // Do nothing

      lrrefSheets.GETTABLE( lrecCountCnfg );

      // cuDatasetTools.SetFormulaCalcEachRowString(iEventID, lrrefSheets, -1, '%B%[Sheet Name]' );
      // For this to work you need an updated Columns that has integrated
      // embedded calculations.
      cuDatasetTools.BuildLinesOnlyDataset(iEventID, lrrefSheets,FALSE,ldnOutput);
      pbsOutput2.ADDTEXT( ldnOutput.ToString() );

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE postSheet@1000000001(VAR ptrecEventParams@1000000006 : TEMPORARY Record 23044511;VAR pbsOutput@1000000005 : BigText);
    VAR
      lcodSheetName@1000000012 : Code[20];
      lcodBatchName@1000000011 : Code[10];
      lbsXMLOutput@1000000010 : BigText;
      lcuCountMgmt@1000000009 : Codeunit 23044300;
      lcodWhseBatch@1000000008 : Code[10];
      lrecConfig@1000000007 : Record 23044504;
      lcodCountNo@1000000004 : Code[20];
      lbPostedWhse@1000000003 : Boolean;
      lbPostedItem@1000000002 : Boolean;
      ltxtSuccessMessage@1000000001 : Text[500];
      ltxtDetails@1000000000 : Text[250];
    BEGIN
      lcodSheetName := ptrecEventParams.getSheetName();

      cuCommonFuncs.getDeviceConfig(recConfig,ptrecEventParams);
      //lcodCountNo := getCountNoByLocation(lcodLocation);
      lcodCountNo := getActiveCountBySheet(lcodSheetName, lrecConfig."Location Code");


      //<IW author="Howie Zhao" date="12/08/15" issue="TFS1902" >
      IF (lrecConfig."Allow Post - Inventory Count") THEN BEGIN
        lcodWhseBatch := cuJournalFuncs.getWhsePhysInvBatchToUse(ptrecEventParams);
        lcodBatchName := cuJournalFuncs.getItemJnlPhysInvBatchToUse(ptrecEventParams);

        // attempt to post the sheet
        lcuCountMgmt.postSheet(
          lrecConfig.Code,
          lrecConfig."Location Code",         //  pcodLocation
          lcodCountNo,          //  pcodCountNo,
          lcodSheetName,        //  pcodSheetName
          TODAY,                //  pdtPostDate
          lcodBatchName,        //  pcodInvBatch
          lcodWhseBatch,         //  pcodWhseInvBatch
          lbPostedWhse,
          lbPostedItem
          );

        ltxtSuccessMessage := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('MSG_COUNT_POSTED', codRegionCode), lcodSheetName, lcodCountNo );
        IF ( NOT lbPostedWhse AND NOT lbPostedItem ) THEN BEGIN
          ltxtSuccessMessage := ltxtSuccessMessage + ' ' + cuTranslationMgmt.getTranslatedString('MSG_COUNT_NO_JNL_LINES', codRegionCode);
        END;

        cuCommonFuncs.generateSuccessReturnWithMsg(1, ltxtSuccessMessage,pbsOutput);
      END ELSE BEGIN
        ltxtSuccessMessage := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('ERR_COUNT_CANNOT_POST', codRegionCode), lcodSheetName, lcodCountNo );
        ERROR(ltxtSuccessMessage);
      END;

      ltxtDetails := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_COUNT_POST', codRegionCode), lcodCountNo);
      ptrecEventParams.setValue('details', ltxtDetails);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE changeCountLineComment@1000000084(VAR ptrecEventParams@1000000005 : TEMPORARY Record 23044511;VAR pbsOutput@1000000004 : BigText);
    VAR
      liTagNumber@1000000008 : Integer;
      lsComment@1000000007 : Text[30];
      lrecCountSheetLine@1000000006 : Record 23044301;
      lcodSheetName@1000000003 : Code[20];
      lcodCountNo@1000000002 : Code[20];
      lcodLocation@1000000001 : Code[10];
      ltxtDetails@1000000000 : Text[250];
    BEGIN
      // Sets the count sheet line comment.

      liTagNumber := ptrecEventParams.getTagNo();

      lsComment := ptrecEventParams.getValue('action_result');
      IF (lsComment = '') THEN BEGIN
        lsComment := ptrecEventParams.getValue('comment');
      END;

      lcodSheetName := ptrecEventParams.getSheetName();
      lcodLocation := ptrecEventParams.getValue('location');
      //lcodCountNo := getCountNoByLocation(lcodLocation);
      lcodCountNo := getActiveCountBySheet(lcodSheetName, lcodLocation);

      lrecCountSheetLine.SETCURRENTKEY("Count No.","Tag No.");
      IF( NOT lrecCountSheetLine.GET( lcodCountNo, liTagNumber  ) ) THEN BEGIN
        ERROR(STRSUBSTNO(cuTranslationMgmt.getTranslatedString('ERR_COUNT_UNKNOWN_TAG', codRegionCode),liTagNumber, lcodCountNo, lcodSheetName ));
      END;

      lrecCountSheetLine.VALIDATE(Comment,lsComment);
      lrecCountSheetLine.MODIFY(TRUE);

      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);

      ltxtDetails := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_COUNT_CHANGE_COMMENT', codRegionCode), lcodCountNo);
      ptrecEventParams.setValue('details', ltxtDetails);
      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX Count Sheet Line"));
      ptrecEventParams.setValue('Document No.', lcodSheetName);
      ptrecEventParams.setValue('Document Line No.', FORMAT(liTagNumber));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE deleteLine@1000000007(VAR ptrecEventParams@1000000004 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      liTagNumber@1000000007 : Integer;
      lrecCountSheetLine@1000000006 : Record 23044301;
      lcodSheetName@1000000005 : Code[20];
      lcodLocation@1000000003 : Code[10];
      lcodCountNo@1000000002 : Code[20];
      ltxtDetails@1000000001 : Text[250];
    BEGIN
      // Deletes the line based on tag no.
      liTagNumber := ptrecEventParams.getTagNo();

      lcodSheetName := ptrecEventParams.getSheetName();
      lcodLocation := ptrecEventParams.getValue('location');
      //lcodCountNo := getCountNoByLocation(lcodLocation);
      lcodCountNo := getActiveCountBySheet(lcodSheetName, lcodLocation);

      lrecCountSheetLine.SETCURRENTKEY("Count No.","Tag No.");
      IF( NOT lrecCountSheetLine.GET( lcodCountNo, liTagNumber  ) ) THEN BEGIN
        ERROR(STRSUBSTNO(cuTranslationMgmt.getTranslatedString('ERR_COUNT_UNKNOWN_TAG', codRegionCode),liTagNumber, lcodCountNo, lcodSheetName ));
      END;

      IF lrecCountSheetLine."Recount Tag No."<>0 THEN BEGIN
        ERROR(cuTranslationMgmt.getTranslatedString('ERR_COUNT_DELETE_RECOUNT', codRegionCode));
      END;

      lrecCountSheetLine.DELETE(TRUE);

      cuCommonFuncs.generateSuccessReturn(1, pbsOutput );

      ltxtDetails := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_COUNT_DELETE_LINE', codRegionCode), liTagNumber, lcodCountNo);
      ptrecEventParams.setValue('details', ltxtDetails);
      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX Count Sheet Line"));
      ptrecEventParams.setValue('Document No.', lcodSheetName);
      ptrecEventParams.setValue('Document Line No.', FORMAT(liTagNumber));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE createNewCount@1000000009(VAR ptrecEventParams@1000000006 : TEMPORARY Record 23044511;VAR pbsOutput@1000000005 : BigText) pcodOutCountNo : Code[20];
    VAR
      lcodSheetName@1000000009 : Code[20];
      lcodBatchName@1000000008 : Code[10];
      lbsXMLOutput@1000000007 : BigText;
      lcuCountMgmt@1000000004 : Codeunit 23044300;
      lcodLocation@1000000003 : Code[10];
      lcodWhseBatch@1000000002 : Code[10];
      lrecCountHeader@1000000001 : Record 23044304;
      ltxtDetails@1000000000 : Text[250];
    BEGIN
      //
      // Will create a new count.
      // If a template is available, it will use it.
      // Otherwise it will just create a new count with the current location.
      //
      // If an active count exists in this location it will deactivate it.

      cuCommonFuncs.getDeviceConfig(recConfig,ptrecEventParams);
      lcodLocation := ptrecEventParams.getValue('location');

      lrecCountHeader.RESET();
      lrecCountHeader.SETRANGE(Active, TRUE );
      lrecCountHeader.SETRANGE("Location Code", lcodLocation );
      IF ( lrecCountHeader.FIND('-') ) THEN BEGIN
        // there is only 1 record possible here.
        lrecCountHeader.Active := FALSE;
        lrecCountHeader.MODIFY( FALSE );
      END; // if there is already an active count in this location

      IF ( recConfig."Auto Create Count Template" <> '' ) THEN BEGIN
        //
        // We have a template, create it from the template
        lrecCountHeader.RESET();
        lrecCountHeader.SETRANGE("No.",recConfig."Auto Create Count Template");
        lrecCountHeader.FIND('-');
        pcodOutCountNo := lrecCountHeader.duplicateCount();

        lrecCountHeader.GET(pcodOutCountNo);
        lrecCountHeader.Active := TRUE;
        lrecCountHeader."Location Code" := lcodLocation;
        lrecCountHeader.MODIFY(TRUE);
      END ELSE BEGIN
        ERROR( cuTranslationMgmt.getTranslatedString('ERR_COUNT_MISSING_TEMPLATE', codRegionCode), recConfig.Code );
      END;

      cuCommonFuncs.generateSuccessReturnWithMsg(1,
        STRSUBSTNO(cuTranslationMgmt.getTranslatedString('MSG_COUNT_CREATED', codRegionCode), pcodOutCountNo, recConfig."Auto Create Count Template" ),
        pbsOutput);

      ltxtDetails := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_COUNT_CREATE_NEW', codRegionCode), pcodOutCountNo);
      ptrecEventParams.setValue('details', ltxtDetails);
      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX Count Sheet Line"));
      ptrecEventParams.setValue('Document No.', pcodOutCountNo);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getCountSheetLines@1000000099(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lcodLocation@1000000010 : Code[10];
      lcodSheetName@1000000009 : Code[20];
      lrecLocation@1000000008 : Record 14;
      lcodCountNo@1000000007 : Code[20];
      lrecCountSheet@1000000006 : Record 23044300;
      lrecCountSheetLines@1000000005 : Record 23044301;
      lrrefCountSheetLines@1000000004 : RecordRef;
      ldnOutput@1000000011 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lrrefCountSheetHeader@1000000002 : RecordRef;
    BEGIN
      // Return count sheet lines to device

      lcodLocation := ptrecEventParams.getValue('location');
      lcodSheetName := ptrecEventParams.getValue('Sheet Name');

      IF lrecLocation.GET(lcodLocation) THEN ;

      cuCommonFuncs.getDeviceConfig(recConfig,ptrecEventParams);

      //lcodCountNo := getCountNoByLocation(lcodLocation);
      lcodCountNo := getActiveCountBySheet(lcodSheetName, lcodLocation);


      lrecCountSheet.RESET();
      lrecCountSheet.SETCURRENTKEY( "Count No.", "Sheet Name");
      lrecCountSheet.GET( lcodCountNo, lcodSheetName );
      IF ( lrecCountSheet."Posted by Device" <> '' ) THEN BEGIN
        // add a message.  Let them look at it, but make sure they are aware
        // that they won't be able to change anything.
        cuCommonFuncs.addMessage( STRSUBSTNO(cuTranslationMgmt.getTranslatedString('ERR_COUNT_READONLY', codRegionCode), lcodSheetName, lcodCountNo, lrecCountSheet."Posted by Device" ),pbsOutput);
      END;

      lrecCountSheetLines.SETCURRENTKEY("Count No.", "Tag No.");
      lrecCountSheetLines.ASCENDING(TRUE);

      IF (recConfig."Count Sheet Line Sort" <> '') THEN BEGIN
        lrecCountSheetLines.SETVIEW(recConfig."Count Sheet Line Sort");
      END;

      lrecCountSheetLines.SETRANGE("Count No.", lcodCountNo);
      lrecCountSheetLines.SETRANGE("Location Code", lcodLocation);
      lrecCountSheetLines.SETRANGE("Sheet Name", lcodSheetName);

      IF (lrecCountSheetLines.FIND('-')) THEN;

      ldnOutput := ldnOutput.StringBuilder();

      lrecCountSheet.SETRECFILTER();
      lrrefCountSheetHeader.GETTABLE(lrecCountSheet);

      lrrefCountSheetLines.GETTABLE(lrecCountSheetLines);

      cuDatasetTools.SetFormulaCalcEachRow(
        iEventID,
        lrrefCountSheetLines,
          -1, //
        DATABASE::Item, // piLookupTable
        6500, // piLookupField
        'WHERE (No.=CONST([Item No.]))' ); //

      cuDatasetTools.BuildHeaderLineDataset(iEventID, lrrefCountSheetHeader, lrrefCountSheetLines, FALSE, ldnOutput);
      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX Count Sheet Line"));
      ptrecEventParams.setValue('Document No.', lcodSheetName);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE addCountSheetLine@1000000015(VAR ptrecEventParams@1000000017 : TEMPORARY Record 23044511;VAR pbsOutput@1000000016 : BigText);
    VAR
      lcodCountNo@1000000020 : Code[20];
      lcodSheetName@1000000019 : Code[20];
      lcodLocation@1000000018 : Code[20];
      lcodItemNumber@1000000015 : Text;
      lcodVariant@1000000014 : Text;
      lcodBinCode@1000000013 : Code[20];
      lcodShelfNumber@1000000012 : Code[40];
      lsSerialNumber@1000000011 : Text;
      lsLotNumber@1000000010 : Text;
      ldQuantity@1000000009 : Decimal;
      ldtExpirationDate@1000000008 : Date;
      lcodUOM@1000000007 : Code[10];
      lrecCountSheetLine@1000000006 : Record 23044301;
      lcodLicensePlateNumber@1000000005 : Code[20];
      lrecItem@1000000004 : Record 27;
      lrrefCountSheetLines@1000000003 : RecordRef;
      ldnOutput@1000000021 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lrecUnitOfMeasure@1000000001 : Record 204;
      ltxtDetails@1000000000 : Text[250];
    BEGIN
      // insert a new count sheet line

      lcodLocation := ptrecEventParams.getValue('location');
      lcodSheetName := ptrecEventParams.getValue('Sheet Name');
      //lcodCountNo := getCountNoByLocation(lcodLocation);
      lcodCountNo := getActiveCountBySheet(lcodSheetName, lcodLocation);

      lcodItemNumber := ptrecEventParams.getItemNo();
      lcodVariant := ptrecEventParams.getVariant();
      lcodBinCode := ptrecEventParams.getValue('bin_code');
      lcodShelfNumber := ptrecEventParams.getValue('shelf');
      lsSerialNumber := ptrecEventParams.getSerialNo();
      lsLotNumber := ptrecEventParams.getLotNo();
      ldQuantity := ptrecEventParams.getValueAsDecimal('quantity_count');
      ldtExpirationDate := cuCommonFuncs.getExpirationDate(ptrecEventParams);
      lcodLicensePlateNumber := ptrecEventParams.getValue('lp_number');
      codUserName := cuCommonFuncs.getUserNameWithDomain(ptrecEventParams); //<IW author="R.Trudeau" date="05/03/17" issue="3104" />


      cuCommonFuncs.getDeviceConfig(recConfig,ptrecEventParams);
      ptrecEventParams.getUnitOfMeasure(lrecUnitOfMeasure);
      IF (NOT lrecUnitOfMeasure.ISEMPTY()) THEN BEGIN
        lcodUOM := lrecUnitOfMeasure.Code;
      END;

      lrecCountSheetLine.INIT;

      lrecCountSheetLine.VALIDATE("Count No.", lcodCountNo);
      lrecCountSheetLine.VALIDATE("Sheet Name", lcodSheetName);
      lrecCountSheetLine.VALIDATE("Item No.", lcodItemNumber);
      lrecCountSheetLine.VALIDATE("Location Code", lcodLocation);  // must be done after item no.
      lrecCountSheetLine.VALIDATE("Serial No.", lsSerialNumber);
      lrecCountSheetLine.VALIDATE("Lot No.", lsLotNumber);
      lrecCountSheetLine.VALIDATE("Shelf No.", lcodShelfNumber);
      lrecCountSheetLine.VALIDATE("Bin Code", lcodBinCode);
      lrecCountSheetLine.VALIDATE("Variant Code", lcodVariant);
      lrecCountSheetLine.INSERT(TRUE);

      IF (lcodUOM <> '') THEN BEGIN
        lrecItem.GET(lcodItemNumber);
        ldQuantity := cuCommonFuncs.ConvertUnitOfMeasure(lrecItem, ldQuantity, lcodUOM, lrecItem."Base Unit of Measure");
        lrecCountSheetLine.VALIDATE("Unit of Measure Code", lcodUOM);
      END;

      lrecCountSheetLine.VALIDATE("Quantity (Base)", ldQuantity);
      lrecCountSheetLine.VALIDATE("License Plate No.", lcodLicensePlateNumber);

      lrecCountSheetLine."Scanned by Device" := recConfig.Code;
      lrecCountSheetLine."Scanned DateTime" := CURRENTDATETIME;
      //-->--TPZ3162
      // IF (codUserName <> '') THEN BEGIN
      //  lrecCountSheetLine."User ID" := codUserName;
      // END;
      IF (codUserName <> '') THEN BEGIN  //3162
        IF STRPOS(codUserName,'TOPAZ\') > 0 THEN
            lrecCountSheetLine."User ID" := COPYSTR(codUserName,STRPOS(codUserName,'\')+2,MAXSTRLEN(codUserName))
        ELSE
          lrecCountSheetLine."User ID" := codUserName;
      END;
      //<--TPZ3162
      IF ( ldtExpirationDate <> 0D ) THEN BEGIN
        lrecCountSheetLine."Expiration Date" := ldtExpirationDate;
      END;

      lrecCountSheetLine.MODIFY;

      ldnOutput := ldnOutput.StringBuilder();
      lrecCountSheetLine.SETRECFILTER();
      lrrefCountSheetLines.GETTABLE(lrecCountSheetLine);

      cuDatasetTools.SetFormulaCalcEachRow(
        30009,
        lrrefCountSheetLines,
          -1, //
        DATABASE::Item, // piLookupTable
        6500, // piLookupField
        'WHERE (No.=CONST([Item No.]))' ); //

      cuDatasetTools.BuildLineTableEmbedRes(30009, lrrefCountSheetLines, FALSE, ldnOutput);  //<IW author="h.z" date="6/09/17" issue="TFS3093" />

      pbsOutput.ADDTEXT( ldnOutput.ToString() );
      ltxtDetails := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_COUNT_ADD_LINE', codRegionCode), lrecCountSheetLine."Tag No.", lcodCountNo);
      ptrecEventParams.setValue('details', ltxtDetails);
      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX Count Sheet Line"));
      ptrecEventParams.setValue('Document No.', lcodSheetName);
      ptrecEventParams.setValue('Document Line No.', FORMAT(lrecCountSheetLine."Tag No."));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE updateSheetLine@1000000016(VAR ptrecEventParams@1000000010 : TEMPORARY Record 23044511;VAR pbsOutput@1000000009 : BigText);
    VAR
      lcodLocation@1000000023 : Code[10];
      liTagNumber@1000000022 : Integer;
      lsSerialNumber@1000000021 : Text;
      ldQuantity@1000000020 : Decimal;
      lsErrorMessage@1000000019 : Text[200];
      lrecCountSheetLine@1000000018 : Record 23044301;
      lsLotNumber@1000000017 : Text;
      lcodBinCode@1000000016 : Code[20];
      lcodSheetName@1000000015 : Code[20];
      lcodCountNo@1000000014 : Code[20];
      lcodVariant@1000000013 : Text;
      ldtExpirationDate@1000000012 : Date;
      lsExpirationDate@1000000011 : Text[100];
      lrecCountSheet@1000000008 : Record 23044300;
      lrecUnitOfMeasure@1000000007 : Record 204;
      ldBaseQuantity@1000000006 : Decimal;
      lrecItem@1000000005 : Record 27;
      ldnOutput@1000000024 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lrrefCountSheetLines@1000000003 : RecordRef;
      ltxtDetails@1000000002 : Text[250];
      ldPreviousQuantity@1000000001 : Decimal;
      lcodPreviousBin@1000000000 : Code[20];
    BEGIN
      // Update specific count sheet line

      lcodLocation := ptrecEventParams.getValue('location');
      liTagNumber := ptrecEventParams.getValueAsInt('Tag No.');
      lsSerialNumber := ptrecEventParams.getSerialNo();
      ldQuantity := ptrecEventParams.getValueAsDecimal('quantity_count');
      lsLotNumber := ptrecEventParams.getLotNo();
      lcodBinCode := ptrecEventParams.getValue('bin_code');

      ptrecEventParams.getUnitOfMeasure(lrecUnitOfMeasure);

      lsExpirationDate := COPYSTR( ptrecEventParams.getValue('exp_date'), 1, MAXSTRLEN( lsExpirationDate) );
      IF (lsExpirationDate = '') THEN BEGIN
        lsExpirationDate := COPYSTR( ptrecEventParams.getValue('Expiration Date'), 1, MAXSTRLEN( lsExpirationDate) );
      END;

      lcodVariant := ptrecEventParams.getValue('variant_code');
      lcodSheetName := ptrecEventParams.getValue('Sheet Name');

      //lcodCountNo := getCountNoByLocation(lcodLocation);
      lcodCountNo := getActiveCountBySheet(lcodSheetName, lcodLocation);

      lrecCountSheetLine.SETCURRENTKEY( "Count No.", "Tag No." );
      IF( NOT lrecCountSheetLine.GET( lcodCountNo, liTagNumber) ) THEN BEGIN
        ERROR(STRSUBSTNO(cuTranslationMgmt.getTranslatedString('ERR_COUNT_UNKNOWN_TAG', codRegionCode),liTagNumber, lcodCountNo, lcodSheetName ));
      END;

      lrecCountSheet.RESET();
      lrecCountSheet.SETCURRENTKEY("Count No.","Sheet Name");
      lrecCountSheet.GET(lcodCountNo, lcodSheetName );
      IF ( lrecCountSheet."Posted by Device" <> '' ) THEN BEGIN
        ERROR( cuTranslationMgmt.getTranslatedString('ERR_COUNT_ALREADY_POSTED', codRegionCode), lcodSheetName, lcodCountNo, lrecCountSheet."Posted by Device" );
      END;

      ldPreviousQuantity := lrecCountSheetLine.Quantity;

      ldBaseQuantity := ldQuantity;
      IF (NOT lrecUnitOfMeasure.ISEMPTY()) THEN BEGIN
        lrecCountSheetLine.VALIDATE("Unit of Measure Code", lrecUnitOfMeasure.Code);
        lrecItem.GET( lrecCountSheetLine."Item No." );
        ldBaseQuantity := cuCommonFuncs.ConvertUnitOfMeasure(
                                                            lrecItem,
                                                            ldQuantity,
                                                            lrecUnitOfMeasure.Code,
                                                            lrecItem."Base Unit of Measure" );
      END;


      lrecCountSheetLine.VALIDATE("Quantity (Base)", ldBaseQuantity);
      lrecCountSheetLine.VALIDATE("Serial No.",lsSerialNumber);
      lrecCountSheetLine.VALIDATE("Lot No.", lsLotNumber);
      lrecCountSheetLine.VALIDATE("Variant Code", lcodVariant);

      IF( (lrecCountSheetLine."Bin Code" = '') AND (lcodBinCode <> '') ) THEN BEGIN
        lrecCountSheetLine.VALIDATE("Bin Code",lcodBinCode);
      END;

      IF ( lsExpirationDate <> '' ) THEN BEGIN
        ldtExpirationDate := cuCommonFuncs.getExpirationDate(ptrecEventParams);
        lrecCountSheetLine."Expiration Date" := ldtExpirationDate;
      END;

      lrecCountSheetLine."Scanned by Device" := recConfig.Code;
      lrecCountSheetLine."Scanned DateTime" := CURRENTDATETIME;

      codUserName := cuCommonFuncs.getUserNameWithDomain(ptrecEventParams);
      //-->--TPZ3162
      //lrecCountSheetLine.VALIDATE("User ID", codUserName);
      IF STRPOS(codUserName,'TOPAZ\') > 0 THEN
        lrecCountSheetLine.VALIDATE("User ID", codUserName)
      ELSE
        lrecCountSheetLine.VALIDATE("User ID", 'TOPAZ\'+codUserName);
      //<--TPZ3162

      lrecCountSheetLine.MODIFY(TRUE);

      ldnOutput := ldnOutput.StringBuilder();
      lrecCountSheetLine.SETRECFILTER();
      lrrefCountSheetLines.GETTABLE(lrecCountSheetLine);

      cuDatasetTools.SetFormulaCalcEachRow(
        30009,
        lrrefCountSheetLines,
          -1, //
        DATABASE::Item, // piLookupTable
        6500, // piLookupField
        'WHERE (No.=CONST([Item No.]))' ); //

      cuDatasetTools.BuildLineTableEmbedRes(30009, lrrefCountSheetLines, FALSE, ldnOutput);  //<IW author="h.z" date="6/09/17" issue="TFS3093" />

      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      ltxtDetails := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_COUNT_UPDATE_LINE', codRegionCode), lrecCountSheetLine."Tag No.", lcodCountNo);
      ptrecEventParams.setValue('details', ltxtDetails);
      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX Count Sheet Line"));
      ptrecEventParams.setValue('Document No.', lcodSheetName);
      ptrecEventParams.setValue('Document Line No.', FORMAT(liTagNumber));
      ptrecEventParams.setValue('Previous Quantity', FORMAT(ldPreviousQuantity));
      ptrecEventParams.setValue('New Quantity', FORMAT(ldQuantity));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE processCountSheetLPScan@1000000014(VAR ptrecEventParams@1000000018 : TEMPORARY Record 23044511;VAR pbsOutput@1000000017 : BigText);
    VAR
      lcodShelfNumber@1000000011 : Code[40];
      lcodLicensePlateNumber@1000000010 : Code[20];
      lrecLPHeader@1000000009 : Record 23044505;
      lrecLPLines@1000000008 : Record 23044506;
      lrecCountSheetLine@1000000007 : Record 23044301;
      lcodSheetName@1000000004 : Code[40];
      lcodCountNo@1000000003 : Code[20];
      ldnOutput@1000000005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lrrefCountSheetLines@1000000001 : RecordRef;
      ltxtDetails@1000000000 : Text[250];
    BEGIN
      // Handles the incoming license plate request for a count sheet.

      lcodSheetName := ptrecEventParams.getSheetName();
      lcodShelfNumber := ptrecEventParams.getValue('shelf');
      lcodLicensePlateNumber := ptrecEventParams.getValue('barcode.LicenseNumber');
      codUserName := COPYSTR( ptrecEventParams.getValue('user_name'), 1, MAXSTRLEN(codUserName) );

      cuCommonFuncs.getDeviceConfig(recConfig,ptrecEventParams);

      //lcodCountNo := getCountNoByLocation(lcodLocation);
      lcodCountNo := getActiveCountBySheet(lcodSheetName, recConfig."Location Code");


      lrecLPHeader.GET(lcodLicensePlateNumber);

      lrecCountSheetLine.SETRANGE("Sheet Name",lcodSheetName);
      lrecCountSheetLine.SETRANGE("License Plate No.",lrecLPHeader."No.");
      IF( lrecCountSheetLine.FINDFIRST ) THEN
        ERROR(cuTranslationMgmt.getTranslatedString('ERR_COUNT_LP_ALREADY_ADDED', codRegionCode), lrecLPHeader."No.");

      lrecCountSheetLine.RESET;

      lrecLPLines.SETRANGE("License Plate No.",lcodLicensePlateNumber);
      IF( lrecLPLines.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          IF( lrecLPLines."Serial No." <> '' ) THEN BEGIN
            lrecCountSheetLine.SETRANGE("Sheet Name",lcodSheetName);
            lrecCountSheetLine.SETRANGE("Location Code", recConfig."Location Code");
            lrecCountSheetLine.SETRANGE("Item No.",lrecLPLines."No.");
            lrecCountSheetLine.SETRANGE("Variant Code",lrecLPLines."Variant Code");
            lrecCountSheetLine.SETRANGE("Serial No.",lrecLPLines."Serial No.");
            IF( lrecCountSheetLine.FINDFIRST ) THEN BEGIN
              ERROR(cuTranslationMgmt.getTranslatedString('ERR_COUNT_SN_ALREADY_ADDED', codRegionCode),lrecLPLines."Serial No.");
            END;

            lrecCountSheetLine.RESET;
          END;

          lrecCountSheetLine.RESET;
          lrecCountSheetLine.INIT;
          lrecCountSheetLine."Tag No." := 0; //
          lrecCountSheetLine.VALIDATE("Count No.", lcodCountNo);
          lrecCountSheetLine.VALIDATE("Sheet Name", lcodSheetName);
          lrecCountSheetLine.VALIDATE("Item No.", lrecLPLines."No.");
          lrecCountSheetLine.VALIDATE("Location Code", recConfig."Location Code");  // must be done after item no.
          lrecCountSheetLine.VALIDATE("Serial No.", lrecLPLines."Serial No.");
          lrecCountSheetLine.VALIDATE("Lot No.", lrecLPLines."Lot No.");

           lrecCountSheetLine.VALIDATE("Expiration Date", lrecLPLines."Expiration Date");

          lrecCountSheetLine.VALIDATE("Shelf No.", lcodShelfNumber);
          lrecCountSheetLine.VALIDATE("Bin Code", lrecLPHeader."Bin Code");
          lrecCountSheetLine.VALIDATE("Variant Code", lrecLPLines."Variant Code");
          lrecCountSheetLine.VALIDATE("Quantity (Base)", lrecLPLines.Quantity);
          lrecCountSheetLine.VALIDATE("License Plate No.", lrecLPLines."License Plate No.");
          lrecCountSheetLine."Scanned by Device" := recConfig.Code;
          lrecCountSheetLine."Scanned DateTime" := CURRENTDATETIME;
          IF (codUserName <> '') THEN BEGIN
            lrecCountSheetLine."User ID" := codUserName;
          END;
          lrecCountSheetLine.INSERT(TRUE);
        UNTIL( lrecLPLines.NEXT=0 );
      END;

      ldnOutput := ldnOutput.StringBuilder();
      lrecCountSheetLine.RESET;
      lrecCountSheetLine.SETCURRENTKEY("Count No.", "Tag No.");
      lrecCountSheetLine.ASCENDING(TRUE);

      IF (recConfig."Count Sheet Line Sort" <> '') THEN BEGIN
        lrecCountSheetLine.SETVIEW(recConfig."Count Sheet Line Sort");
      END;

      lrecCountSheetLine.SETRANGE("Count No.", lcodCountNo);
      lrecCountSheetLine.SETRANGE("Location Code", recConfig."Location Code");
      lrecCountSheetLine.SETRANGE("Sheet Name", lcodSheetName);

      IF (lrecCountSheetLine.FIND('-')) THEN;

      lrrefCountSheetLines.GETTABLE(lrecCountSheetLine);


      cuDatasetTools.SetFormulaCalcEachRow(
        30009,
        lrrefCountSheetLines,
          -1, //
        DATABASE::Item, // piLookupTable
        6500, // piLookupField
        'WHERE (No.=CONST([Item No.]))' ); //

      cuDatasetTools.BuildLineTableEmbedRes(30009, lrrefCountSheetLines, FALSE, ldnOutput);   //<IW author="h.z" date="6/09/17" issue="TFS3093" />

      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      ltxtDetails := STRSUBSTNO(cuTranslationMgmt.getTranslatedString('LOG_ASSIGN_LP', codRegionCode), lcodLicensePlateNumber, lcodCountNo);
      ptrecEventParams.setValue('details', ltxtDetails);
      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX Count Sheet Line"));
      ptrecEventParams.setValue('Document No.', lcodSheetName);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getActiveCountBySheet@1000000012(pcodSheet@1000000000 : Code[20];pcodLocation@1000000002 : Code[10]) rcodCountNo : Code[20];
    VAR
      lrecCountSheet@1000000001 : Record 23044300;
      lrecCountHeader@1000000003 : Record 23044304;
    BEGIN
      // Introduced to replace getCountByLocation to support loading sheets where
      // the count header is in a different location.
      //
      // This works under the assumption that there will not be multiple active counts
      // where sheets have the same name in the same sheet location.
      // (possible if the location on the count is different).
      //
      // To work backwards compatible for the old count module on the scanner, this will also allow unknown sheets to be specified
      // for scenarios such as deleteLine, where it would only supply a tag number, and location of the scanner.
      //

      lrecCountSheet.RESET();

      lrecCountSheet.SETAUTOCALCFIELDS(Active);
      lrecCountSheet.SETRANGE(Active, TRUE );
      lrecCountSheet.SETRANGE("Sheet Name", pcodSheet );
      lrecCountSheet.SETRANGE("Location Code", pcodLocation );
      // find last to make the scenario of multiple active counts in different names
      // but with sheets of the same name in the same location more palatable, by
      // having the assumption that the most recent is the intended sheet.
      IF (lrecCountSheet.FINDLAST() ) THEN BEGIN
        rcodCountNo := lrecCountSheet."Count No.";
      END ELSE BEGIN
        // if we cannot find a count this way, look without a known sheet name
        // this is to support the old count module integration.
        IF ( pcodSheet = '' ) THEN BEGIN
          // this is for legacy behavior where a sheet isn't always known.
          // in that case you need to first try with the legacy behavior of a location on
          // a sheet must match the location on the header.
          // We can detect this by not having a sheet supplied.
          lrecCountHeader.RESET();
          lrecCountHeader.SETRANGE(Active, TRUE);
          lrecCountHeader.SETRANGE("Location Code", pcodLocation);
          IF (lrecCountHeader.FINDLAST() ) THEN BEGIN
            rcodCountNo := lrecCountHeader."No.";
          END;
        END;

        // first check if we needed to invoke the search with legacy first, and if we
        // did, then just use what the legacy behavior found.
        // Otherwise, clear out the sheet name search and look for the most recent active
        // sheet where the sheet is in the same location as the scanner.
        IF ( rcodCountNo = '' ) THEN BEGIN
          lrecCountSheet.SETRANGE("Sheet Name");
          IF (lrecCountSheet.FINDLAST() ) THEN BEGIN
            rcodCountNo := lrecCountSheet."Count No.";
          END ELSE BEGIN
            // if we're in here, we could not find an active count by
            // location.
            rcodCountNo := '';
          END;
        END;
      END;
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
      001 TPZ3162 PKS 05202021 Modified code to bifercate nav entry and counting app entry.
    }
    END.
  }
}

