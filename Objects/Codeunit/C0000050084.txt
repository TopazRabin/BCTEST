OBJECT Codeunit 50084 Job Queue - Enqueue-DropShip
{
  OBJECT-PROPERTIES
  {
    Date=07/01/20;
    Time=12:00:00 AM;
    Modified=Yes;
    Version List=TPZ000.00.00;
  }
  PROPERTIES
  {
    TableNo=472;
    Permissions=TableData 472=rimd;
    OnRun=BEGIN
            EnqueueJobQueueEntry(Rec);
          END;

  }
  CODE
  {

    PROCEDURE EnqueueJobQueueEntry@4(VAR JobQueueEntry@1000 : Record 472);
    VAR
      DoNotScheduleTask@1001 : Boolean;
      ScheduledTask@1000000000 : Record 2000000175;
      User@1000000001 : Record 2000000120;
    BEGIN
      RemoveFailedJobs(JobQueueEntry);
      JobQueueEntry.Status := JobQueueEntry.Status::"On Hold";
      JobQueueEntry."User Language ID" := GLOBALLANGUAGE;

      IF NOT JobQueueEntry.INSERT(TRUE) THEN
        JobQueueEntry.MODIFY(TRUE);

      //<TPZ2643>
      JobQueueEntry.VALIDATE("User ID",'TOPAZ\SA_NY_NST_NAVNST6BAT');
      JobQueueEntry.MODIFY(TRUE);
      //</TPZ2643>
      OnBeforeJobQueueScheduleTask(DoNotScheduleTask);

      IF DoNotScheduleTask THEN
        EXIT;

      //Slava code begin
      //JobQueueEntry."Earliest Start Date/Time" := CREATEDATETIME(TODAY, TIME + 200000);
      //slava code end

      JobQueueEntry."System Task ID" :=
        TASKSCHEDULER.CREATETASK(
          CODEUNIT::"Job Queue Dispatcher",
          CODEUNIT::"Job Queue Error Handler",
          TRUE,
          COMPANYNAME,
          JobQueueEntry."Earliest Start Date/Time",
          JobQueueEntry.RECORDID);

      JobQueueEntry.Status := JobQueueEntry.Status::Ready;
      JobQueueEntry.MODIFY;

      //<TPZ2643>
      ScheduledTask.RESET;
      ScheduledTask.SETRANGE("User Name",USERID);
      IF ScheduledTask.FINDFIRST THEN BEGIN
        User.RESET;
        User.SETRANGE("User Name",'TOPAZ\SA_NY_NST_NAVNST6BAT');
        IF User.FINDFIRST THEN BEGIN
          ScheduledTask."User Name" := 'TOPAZ\SA_NY_NST_NAVNST6BAT';
          ScheduledTask."User ID" := User."User Security ID";
          ScheduledTask.MODIFY;
        END;
      END;
      //</TPZ2643>
      COMMIT;
    END;

    PROCEDURE RemoveFailedJobs@1(VAR JobQueueEntry@1000 : Record 472);
    VAR
      JobQueueEntry2@1001 : Record 472;
    BEGIN
      JobQueueEntry2.SETRANGE("Object Type to Run",JobQueueEntry."Object Type to Run");
      JobQueueEntry2.SETRANGE("Object ID to Run",JobQueueEntry."Object ID to Run");
      JobQueueEntry2.SETRANGE("Record ID to Process",JobQueueEntry."Record ID to Process");
      JobQueueEntry2.SETRANGE(Status,JobQueueEntry2.Status::Error);
      JobQueueEntry2.SETFILTER(ID,'<>%1',JobQueueEntry.ID);
      JobQueueEntry2.SETRANGE("Recurring Job",FALSE);
      IF NOT JobQueueEntry2.ISEMPTY THEN
        JobQueueEntry2.DELETEALL;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeJobQueueScheduleTask@2(VAR DoNotScheduleTask@1000 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

