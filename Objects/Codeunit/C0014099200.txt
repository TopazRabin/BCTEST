OBJECT Codeunit 14099200 Inbound ASN Management
{
  OBJECT-PROPERTIES
  {
    Date=11/02/21;
    Time=11:01:29 AM;
    Modified=Yes;
    Version List=IBA1.11,TPZ2458,TPZ2989;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      txtPostSummary@1240020019 : TextConst 'ENU=%1 Purchase Orders Processed\%2 Purchase Receipts Posted\%3 Transfer Documents Created.';
      txtPostDateErr@1000 : TextConst 'ENU=%1 %2 is not allowed for User %2.';
      txtPostingReceiptErr@1008 : TextConst 'ENU=ASN %1 no receipts found to post.';
      txtRequireReceive@1001 : TextConst 'ENU=Require receive must be no for the on the water location %1.';
      txtBinManditory@1002 : TextConst 'ENU=Bin Manditory must be no for the on the water location %1.';
      i@1004 : Integer;
      InboundASNSetup@1003 : Record 14099202;
      InboundASNSetupRetreived@1240020006 : Boolean;
      PurchOrderUpdCount@1005 : Integer;
      PostedPurchOrderCount@1006 : Integer;
      CreatedTransferOrderCount@1007 : Integer;
      txtXferFinalDestErr@1009 : TextConst 'ENU=%1 %2 %3 %4 final destination must not be blank.';
      txtShipDateLessErr@1010 : TextConst 'ENU=Receipt posting date %1 should be less than the transfer shipment date %2.';
      txtExpRcptDateLessErr@1011 : TextConst 'ENU=Ship date %1 should be less than the expected receipt date %2.';
      txtPostingError@1012 : TextConst 'ENU=Purchase Order %1 Error - %2';
      txtSameLocMsg@1013 : TextConst 'ENU=ASN %1 has %2 lines with the same on the water and final destination codes.  These lines will not create transfers!';
      ShowDialog@1014 : Boolean;
      Window@1015 : Dialog;
      txtItemTrackCodeMsg@1240020012 : TextConst 'ENU=ASN %1 has %2 lines that require serial or lot tracking.\Receiving quantities do not match the quantities defined in item tracking.\For over-ship quantities you will need to first increase the purchase line.';
      txtDialog001@1021 : TextConst 'ENU=Inbound ASN Processing';
      txtDialog002@1020 : TextConst 'ENU=Status';
      txtDialog003@1017 : TextConst 'ENU=Documents';
      txtUpdate@1016 : TextConst 'ENU=Updating Documents';
      txtPosting@1018 : TextConst 'ENU=Posting Purchase Receipts';
      txtTransfer@1019 : TextConst 'ENU=Creating Transfer';
      txtPostingASN@1022 : TextConst 'ENU=Posting Inbound ASN';
      txtRemove@1023 : TextConst 'ENU=Removing ASN';
      txtPostEmptyLineUpdate@1240020000 : TextConst 'ENU=There is nothing to update.';
      txtPostEmptyLinePurch@1240020001 : TextConst 'ENU=There is nothing to post receipt.\Check the last receipt numbers on the ASN lines.';
      txtPostEmptyLineTransfer@1240020002 : TextConst 'ENU=There is nothing to create the transfer.\Check the last receipt numbers and final destinational location on the ASN lines.';
      InvSetup@1240020003 : Record 313;
      InvSetupRetreived@1240020004 : Boolean;
      Location@1240020005 : Record 14;
      txtPostInvBalCreate@1240020007 : TextConst 'ENU=Posted Inbound ASN %1 does not exist!';
      txtASNCorr@1240020008 : TextConst 'ENU=%1 ASN Corr';
      CorrJnlLineCount@1240020009 : Integer;
      txtASNCorrJnlFinished@1240020010 : TextConst 'ENU=%1 Item Journal Negative Adjustment Lines Created.';
      txtASNCorrJnlBatchNotFound@1240020011 : TextConst 'ENU=ASN Setup for Item Journal Batch is incorrect.  Batch %2 does not exist.';
      LastTempReservEntryNo@1240020013 : Integer;
      txtPurchOrderChangedCritical@1240020014 : TextConst 'ENU=Purchase Order(s) have been changed since ASN was created.\%1 lines found that prevent processing.  Please recreate this ASN %2!';
      TempASNLineToRefresh@1240020015 : TEMPORARY Record 14099201;
      txtPurchOrderChangedQty@1240020016 : TextConst 'ENU=Purchase Order(s) quantities changed since the ASN was created.\%1 lines had to be refreshed.\Recheck your ship quantities!';
      txtPurchOrderCriticalWhse@1240020017 : TextConst 'ENU=Purchase Order(s) have open warehouse documents.\%1 lines found that prevent processing.\Please complete or delete the warehouse documents!';
      txtPurchOrderLineQtyToInv@1240020018 : TextConst 'ENU=Purchase Order Line %1 %2 has an uninvoiced receipt quantity.  The ASN cannot post until that open quantity has been invoiced!  This occurs when the location must be changed to the "On the Water" location and open receipts exist for the "Final Destination" location.';
      txtDebug001@1240020020 : TextConst 'ENU=Debugging Active - Error after Purchase Order is updated?';
      txtDebug002@1240020021 : TextConst 'ENU=Debugging Active - Error after Purchase Order is posted?';
      txtDebug003@1240020022 : TextConst 'ENU=Debugging Active - Error after Transfer Orders are complete?';
      txtDebug004@1240020023 : TextConst 'ENU=Debugging Active - Error after ASN is posted?';
      txtDebug005@1240020024 : TextConst 'ENU=Debugging Active - Error after Purchase Order is checked?';

    PROCEDURE PostInboundASN@1240020000(CurrASNNumber@1240020000 : Code[20]);
    VAR
      InboundASNHeader@1000 : Record 14099200;
      InboundASNLine@1001 : Record 14099201;
      PrevPurchOrder@1003 : Code[20];
      PurchOrderNoArray@1002 : ARRAY [500] OF Code[20];
      LocPurchaseHeader@1004 : Record 38;
      LocPurchaseLine@1005 : Record 39;
    BEGIN
      ShowDialog := GUIALLOWED;

      GetASNSetup;
      InboundASNHeader.GET(CurrASNNumber);

      GetInvSetup;
      CheckSettings(InboundASNHeader);
      IF InboundASNHeader.Status < InboundASNHeader.Status::Updated THEN
        CheckPurchaseOrder(InboundASNHeader);
      COMMIT;
      CheckLocations(CurrASNNumber);

      OpenWindow;
      UpdateWindow(1, FORMAT(InboundASNHeader.Status));

      IF InboundASNHeader.Status < InboundASNHeader.Status::Updated THEN BEGIN
        UpdateWindow(1, txtUpdate);
        InboundASNLine.RESET;
        InboundASNLine.SETCURRENTKEY("On The Water Location","Purchase Order No.","Purchase Order Line No.");
        InboundASNLine.SETRANGE("ASN No.",CurrASNNumber);
        InboundASNLine.SETFILTER("Ship Qty.",'<>0');
        PrevPurchOrder := '';
        IF InboundASNLine.FIND('-') THEN BEGIN
          REPEAT
            GetLocation(InboundASNLine."On The Water Location");
            IF (PrevPurchOrder <> InboundASNLine."Purchase Order No.") THEN BEGIN
              // update purchase header & Init Purchase Lines
              PrevPurchOrder := InboundASNLine."Purchase Order No.";
              UpdatePurchHeaderDocument(InboundASNLine."Purchase Order No.", InboundASNHeader);
              IF NOT Location."Require Receive" THEN
                InitPurchLineQuantities(InboundASNLine."Purchase Order No.");
              PurchOrderUpdCount := PurchOrderUpdCount + 1;
              UpdateWindow(2, FORMAT(PurchOrderUpdCount));
            END;
            IF NOT Location."Require Receive" THEN
              UpdateSplitPurchLines(InboundASNLine, InboundASNHeader);
          UNTIL InboundASNLine.NEXT = 0;
        END ELSE BEGIN
            ERROR(txtPostEmptyLineUpdate);
        END;
        InboundASNHeader.Status := InboundASNHeader.Status::Updated;
        InboundASNHeader.MODIFY(FALSE);
        COMMIT;
      END;

      IF InboundASNSetup."Debugging Active" THEN BEGIN
        IF CONFIRM(txtDebug001) THEN
          ERROR('');
      END;

      InboundASNHeader.GET(CurrASNNumber);
      IF InboundASNHeader.Status < InboundASNHeader.Status::Posted THEN BEGIN
        UpdateWindow(1, txtPosting);
        i := 0;
        InboundASNLine.RESET;
        InboundASNLine.SETCURRENTKEY("On The Water Location","Purchase Order No.","Purchase Order Line No.");
        InboundASNLine.SETRANGE("ASN No.",CurrASNNumber);
        InboundASNLine.SETFILTER("Ship Qty.",'<>0');
        InboundASNLine.SETFILTER("Last Receipt No.",'%1', '');
        PrevPurchOrder := '';
        IF InboundASNLine.FIND('-') THEN BEGIN
          REPEAT
            IF (PrevPurchOrder <> InboundASNLine."Purchase Order No.") THEN BEGIN
              PrevPurchOrder := InboundASNLine."Purchase Order No.";
              i := i + 1;
              PurchOrderNoArray[i] := InboundASNLine."Purchase Order No.";
            END;
          UNTIL InboundASNLine.NEXT = 0;
        END ELSE BEGIN
          ERROR(txtPostEmptyLinePurch);
        END;

        i := 1;
        WHILE (PurchOrderNoArray[i] <> '') DO BEGIN
          IF PostPurchOrder(PurchOrderNoArray[i]) THEN BEGIN
            LocPurchaseHeader.GET(
              LocPurchaseHeader."Document Type"::Order,
              PurchOrderNoArray[i]);
            IF LocPurchaseHeader."Last Receiving No." <> '' THEN BEGIN
              PostedPurchOrderCount := PostedPurchOrderCount + 1;
              UpdateWindow(2, FORMAT(PostedPurchOrderCount));
              InboundASNLine.RESET;
              InboundASNLine.SETRANGE("ASN No.",CurrASNNumber);
              InboundASNLine.SETFILTER("Ship Qty.",'<>0');
              InboundASNLine.SETRANGE("Purchase Order No.",LocPurchaseHeader."No.");
              InboundASNLine.MODIFYALL("Last Receipt No.", LocPurchaseHeader."Last Receiving No.", FALSE);
            END;
          END ELSE BEGIN
            CloseWindow;
            ERROR(txtPostingError, PurchOrderNoArray[i], GETLASTERRORTEXT);
          END;
          COMMIT;
          i := i + 1;
        END;
        InboundASNHeader.Status := InboundASNHeader.Status::Posted;
        InboundASNHeader.MODIFY(FALSE);
        COMMIT;
      END;


      IF InboundASNSetup."Debugging Active" THEN BEGIN
        IF CONFIRM(txtDebug002) THEN
          ERROR('');
      END;

      InboundASNHeader.GET(CurrASNNumber);
      IF InboundASNHeader.Status < InboundASNHeader.Status::"Transfer Created" THEN BEGIN
        UpdateWindow(1, txtTransfer);
        CreateTransfer(InboundASNHeader, InboundASNLine);
        InboundASNHeader.Status := InboundASNHeader.Status::"Transfer Created";
        InboundASNHeader.MODIFY(FALSE);
        COMMIT;
      END;

      IF InboundASNSetup."Debugging Active" THEN BEGIN
        IF CONFIRM(txtDebug003) THEN
          ERROR('');
      END;

      // Post Inbound ASN
      InboundASNHeader.GET(CurrASNNumber);
      IF InboundASNHeader.Status < InboundASNHeader.Status::Closed THEN BEGIN
        UpdateWindow(1, txtPostingASN);
        InboundASNHeader.Status := InboundASNHeader.Status::Closed;
        CreatePostedDocument(InboundASNHeader);
        InboundASNHeader.MODIFY(FALSE);
        COMMIT;
      END;

      IF InboundASNSetup."Debugging Active" THEN BEGIN
        IF CONFIRM(txtDebug004) THEN
          ERROR('');
      END;

      InboundASNHeader.GET(CurrASNNumber);

      IF InboundASNHeader.Status = InboundASNHeader.Status::Closed THEN BEGIN
        UpdateWindow(1, txtRemove);
        InboundASNHeader.GET(CurrASNNumber);
        InboundASNLine.SETRANGE("ASN No.", InboundASNHeader."ASN No.");
        InboundASNLine.DELETEALL(FALSE);
        InboundASNHeader.DELETE(FALSE);
      END;

      CloseWindow;
    END;

    LOCAL PROCEDURE CheckSettings@24(VAR CurrInboundASNHeader@1002 : Record 14099200);
    BEGIN
      CurrInboundASNHeader.TESTFIELD("On The Water Location");
      CurrInboundASNHeader.TESTFIELD("Posting Date");
      CurrInboundASNHeader.TESTFIELD("Transfer Shipment Date");
      CurrInboundASNHeader.TESTFIELD("Transfer Receipt Date");
      CurrInboundASNHeader.TESTFIELD("Inbound Container Number");

      CheckShipDate(CurrInboundASNHeader);
      CheckExpReceiptDate(CurrInboundASNHeader);

      CheckOnTheWaterLocationSetting(CurrInboundASNHeader."On The Water Location");

      PostingDateAllowed(CurrInboundASNHeader."Posting Date");
    END;

    PROCEDURE CheckOnTheWaterLocationSetting@3(LocCode@1000 : Code[20]);
    VAR
      LocLocation@1001 : Record 14;
    BEGIN
      // check on the water location
      LocLocation.GET(LocCode);
      IF (LocLocation."Require Receive") THEN
        ERROR(txtRequireReceive, LocLocation.Code);

      IF (LocLocation."Bin Mandatory") THEN
        ERROR(txtBinManditory, LocLocation.Code);
    END;

    PROCEDURE CheckShipDate@5(VAR CurrInboundASNHeader@1000 : Record 14099200);
    BEGIN
      IF CurrInboundASNHeader."Transfer Shipment Date" < CurrInboundASNHeader."Posting Date" THEN
        ERROR(txtShipDateLessErr, CurrInboundASNHeader."Posting Date", CurrInboundASNHeader."Transfer Shipment Date");
    END;

    PROCEDURE CheckExpReceiptDate@10(VAR CurrInboundASNHeader@1000 : Record 14099200);
    BEGIN
      IF CurrInboundASNHeader."Transfer Receipt Date" < CurrInboundASNHeader."Transfer Shipment Date" THEN
        ERROR(txtExpRcptDateLessErr, CurrInboundASNHeader."Transfer Shipment Date", CurrInboundASNHeader."Transfer Receipt Date");
    END;

    PROCEDURE CheckLocations@13(CurrASNNumber@1001 : Code[20]);
    VAR
      LocSameLocationCount@1000 : Integer;
      LocInboundASNLine@1002 : Record 14099201;
      ItemTrackingErrCount@1240020000 : Integer;
    BEGIN
      GetInvSetup;

      LocInboundASNLine.RESET;
      LocInboundASNLine.SETRANGE("ASN No.",CurrASNNumber);
      LocInboundASNLine.SETFILTER("Ship Qty.",'<>0');
      IF LocInboundASNLine.FIND('-') THEN BEGIN
        REPEAT
          LocInboundASNLine.TESTFIELD("On The Water Location");
          CheckDestinationLocation(LocInboundASNLine);
          GetLocation(LocInboundASNLine."On The Water Location");
          CheckOnTheWaterLocationSetting(LocInboundASNLine."On The Water Location");

          IF CheckTrackingSpecification(LocInboundASNLine) THEN
            ItemTrackingErrCount := ItemTrackingErrCount + 1;

          // check complete lines for receive operations:  Stub out code for customizing water location warehousing
          CASE TRUE OF
            // Post receipt from a warehouse receipt document and post put-away from a warehouse put-away document
            Location."Directed Put-away and Pick":
            BEGIN
              // check receive bin
            END;
            // Post receipt and put-away from an inventory put-away document
            Location."Require Put-away" AND (NOT Location."Require Receive"):
            BEGIN
              // check bins for whse receive doc
              IF Location."Bin Mandatory" THEN;
                //CheckDefaultBins;
            END;
            // Post receipt and put-away from a warehouse receipt document
            Location."Require Receive":
            BEGIN
              IF Location."Bin Mandatory" THEN;
                // check receive bin
            END;
          END;

          IF LocInboundASNLine."On The Water Location" = LocInboundASNLine."Final Dest. Location" THEN
            LocSameLocationCount := LocSameLocationCount + 1;
        UNTIL LocInboundASNLine.NEXT = 0;
      END;

      IF (LocSameLocationCount > 0) AND ShowDialog THEN
        MESSAGE(txtSameLocMsg, CurrASNNumber, LocSameLocationCount);

      IF (ItemTrackingErrCount > 0) AND ShowDialog THEN BEGIN
        ERROR(txtItemTrackCodeMsg, CurrASNNumber, ItemTrackingErrCount);
      END;
    END;

    LOCAL PROCEDURE CheckDestinationLocation@1240020011(VAR CurrInboundASNLine@1240020000 : Record 14099201);
    BEGIN
      IF (CurrInboundASNLine."Final Dest. Location" = '') AND (CurrInboundASNLine."Ship Qty." > 0) THEN
        ERROR(txtXferFinalDestErr, CurrInboundASNLine.FIELDCAPTION("ASN No."), CurrInboundASNLine."ASN No.", CurrInboundASNLine.
      "Line No.", CurrInboundASNLine."Item No.");
    END;

    PROCEDURE CheckPurchaseOrder@1240020008(VAR CurrInboundASNHeader@1240020008 : Record 14099200);
    VAR
      LocInboundASNLine@1002 : Record 14099201;
      LocPurchaseLine@1240020000 : Record 39;
      LocPurchaseLine2@1240020004 : Record 39;
      RaiseCriticalError@1240020001 : Boolean;
      ErrorCount@1240020002 : Integer;
      EndAfterUpdate@1240020003 : Boolean;
      RaiseCriticalErrorWhse@1240020006 : Boolean;
      ErrorCountWhse@1240020005 : Integer;
      ErrorMsg@1240020007 : Text[1024];
      ModifyRec@1240020009 : Boolean;
    BEGIN
      GetInvSetup;
      ErrorMsg := '';

      LocInboundASNLine.RESET;
      LocInboundASNLine.SETRANGE("ASN No.",CurrInboundASNHeader."ASN No.");
      IF LocInboundASNLine.FIND('-') THEN BEGIN
        ErrorCount := 0;
        REPEAT
          RaiseCriticalError := FALSE;
          RaiseCriticalErrorWhse := FALSE;
          IF LocPurchaseLine.GET(LocPurchaseLine."Document Type"::Order, LocInboundASNLine."Purchase Order No.",
            LocInboundASNLine."Purchase Order Line No.") THEN BEGIN
              // check major changes
              CASE TRUE OF
                (LocInboundASNLine."Item No." <> LocPurchaseLine."No."):  RaiseCriticalError := TRUE;
                (LocInboundASNLine."Variant Code" <> LocPurchaseLine."Variant Code"):  RaiseCriticalError := TRUE;
                (LocInboundASNLine."Unit of Measure Code" <> LocPurchaseLine."Unit of Measure Code"): RaiseCriticalError := TRUE;
                (LocInboundASNLine."Open PO Qty." <> LocPurchaseLine."Outstanding Quantity"):
                BEGIN
                  TempASNLineToRefresh.INIT;
                  TempASNLineToRefresh := LocInboundASNLine;
                  TempASNLineToRefresh.INSERT(FALSE);
                END;
              END;

              // check warehouse document already exists
              IF LocInboundASNLine."Ship Qty." > 0 THEN BEGIN
                IF WhseLinesExist(
                  DATABASE::"Purchase Line",
                  LocPurchaseLine."Document Type",
                  LocPurchaseLine."Document No.",
                  LocPurchaseLine."Line No.",
                  0,
                  LocPurchaseLine.Quantity) THEN BEGIN
                    RaiseCriticalErrorWhse := TRUE;
                    ErrorCountWhse := ErrorCountWhse + 1;
                  END;
              END;

              // disallow reservations
              LocPurchaseLine.CALCFIELDS("Reserved Quantity");
              IF (LocInboundASNLine."Ship Qty." > 0) AND (LocPurchaseLine."Reserved Quantity" > 0) THEN BEGIN
                RaiseCriticalError := TRUE;
              END;

              // disallow pre-payment posting before receipt
              IF (LocInboundASNLine."Ship Qty." > 0) AND (LocPurchaseLine."Prepmt. Amt. Inv." <> 0) THEN BEGIN
                RaiseCriticalError := TRUE;
              END;

              // check, set grouping
              IF (LocInboundASNLine."Ship Qty." > 0) THEN BEGIN
                IF CurrInboundASNHeader."Group by Purchase Order" THEN BEGIN
                  IF (LocInboundASNLine."Grouping No." <> LocInboundASNLine."Purchase Order No.") AND (LocInboundASNLine."Grouping No."
      <> '') THEN BEGIN
                    RaiseCriticalError := TRUE
                  END ELSE BEGIN
                    LocInboundASNLine."Grouping No." := LocInboundASNLine."Purchase Order No.";
                    ModifyRec := TRUE;
                  END;
                END;
              END;

              IF ModifyRec THEN
                LocInboundASNLine.MODIFY(FALSE);

              IF RaiseCriticalError THEN
                ErrorCount := ErrorCount + 1;
          END ELSE BEGIN
            RaiseCriticalError := TRUE;
            ErrorCount := ErrorCount + 1;
          END;
        UNTIL LocInboundASNLine.NEXT = 0;
      END;

      CASE TRUE OF
        (ErrorCount > 0) AND (ErrorCountWhse > 0):
        BEGIN
          ErrorMsg := STRSUBSTNO(txtPurchOrderCriticalWhse, ErrorCountWhse, CurrInboundASNHeader."ASN No.");
          ErrorMsg := '\';
          ErrorMsg := STRSUBSTNO(txtPurchOrderChangedCritical, ErrorCount, CurrInboundASNHeader."ASN No.");
        END;
        (ErrorCountWhse > 0):
          ERROR(txtPurchOrderCriticalWhse, ErrorCountWhse, CurrInboundASNHeader."ASN No.");
        (ErrorCount > 0):
          ERROR(txtPurchOrderChangedCritical, ErrorCount, CurrInboundASNHeader."ASN No.");
      END;

      EndAfterUpdate := FALSE;
      IF TempASNLineToRefresh.FIND('-') THEN BEGIN
        REPEAT
          IF LocInboundASNLine.GET(TempASNLineToRefresh."ASN No.", TempASNLineToRefresh."Line No.") THEN BEGIN
            IF LocPurchaseLine.GET(LocPurchaseLine."Document Type"::Order, LocInboundASNLine."Purchase Order No.",
              LocInboundASNLine."Purchase Order Line No.") THEN BEGIN

              // already split and received - find last split line with outstanding quantity
              IF (LocPurchaseLine."Outstanding Quantity" = 0) THEN BEGIN
                IF LocPurchaseLine."Original Line No." <> 0 THEN BEGIN
                  LocPurchaseLine2.SETRANGE("Document Type", LocPurchaseLine."Document Type");
                  LocPurchaseLine2.SETRANGE("Document No.", LocPurchaseLine."Document No.");
                  LocPurchaseLine2.SETRANGE("Original Line No.", LocPurchaseLine."Original Line No.");
                  LocPurchaseLine2.SETFILTER("Outstanding Quantity", '<>%1', 0);
                  IF LocPurchaseLine2.FIND('+') THEN BEGIN
                    LocPurchaseLine.GET(LocPurchaseLine2."Document Type", LocPurchaseLine2."Document No.", LocPurchaseLine2."Line No.");
                    LocInboundASNLine."Purchase Order Line No." := LocPurchaseLine."Line No.";
                  END;
                END;
              END;

              LocInboundASNLine.Description := LocPurchaseLine.Description;
              LocInboundASNLine."Description 2" := LocPurchaseLine."Description 2";
              LocInboundASNLine.VALIDATE("Vendor Item No.",LocPurchaseLine."Vendor Item No.");
              LocInboundASNLine.VALIDATE("Open PO Qty.", LocPurchaseLine."Outstanding Quantity");
              LocInboundASNLine.VALIDATE("Ship Qty.", TempASNLineToRefresh."Ship Qty.");
              LocInboundASNLine.VALIDATE("Grouping No.", TempASNLineToRefresh."Grouping No.");
              LocInboundASNLine."Gross Weight" := TempASNLineToRefresh."Gross Weight";
              LocInboundASNLine."Net Weight" := TempASNLineToRefresh."Net Weight";
              LocInboundASNLine."Unit Volume" := TempASNLineToRefresh."Unit Volume";
              LocInboundASNLine.MODIFY(TRUE);
              EndAfterUpdate := TRUE;
            END;
          END;
        UNTIL TempASNLineToRefresh.NEXT = 0;
      END;

      IF EndAfterUpdate THEN BEGIN
        COMMIT;
        ERROR(txtPurchOrderChangedQty, TempASNLineToRefresh.COUNT);
      END;

      GetASNSetup;
      IF InboundASNSetup."Debugging Active" THEN BEGIN
        IF CONFIRM(txtDebug005) THEN BEGIN
          COMMIT;
          ERROR('');
        END;
      END;
    END;

    LOCAL PROCEDURE CheckGrouping@1240020012();
    BEGIN
    END;

    LOCAL PROCEDURE UpdatePurchHeaderDocument@7(VAR CurrPurchOrderNo@1002 : Code[20];VAR CurrInboundASNHeader@1004 : Record 14099200);
    VAR
      LocPurchaseHeader@1000 : Record 38;
      ModifyRec@1001 : Boolean;
      ReleasePurchaseDocument@1003 : Codeunit 415;
    BEGIN
      LocPurchaseHeader.GET(
        LocPurchaseHeader."Document Type"::Order,
        CurrPurchOrderNo);
      IF LocPurchaseHeader.Status = LocPurchaseHeader.Status::Released THEN BEGIN
        ReleasePurchaseDocument.Reopen(LocPurchaseHeader);
      END;

      IF LocPurchaseHeader."Posting Date" <> CurrInboundASNHeader."Posting Date" THEN BEGIN
        LocPurchaseHeader.VALIDATE("Posting Date", CurrInboundASNHeader."Posting Date");
        ModifyRec := TRUE;
      END;

      IF LocPurchaseHeader."Inbound ASN Number" <> CurrInboundASNHeader."ASN No." THEN BEGIN
        LocPurchaseHeader."Inbound ASN Number" := CurrInboundASNHeader."ASN No.";
        ModifyRec := TRUE;
      END;

      IF LocPurchaseHeader."Inbound Container Number" <> CurrInboundASNHeader."Inbound Container Number" THEN BEGIN
        LocPurchaseHeader."Inbound Container Number" := CurrInboundASNHeader."Inbound Container Number";
        ModifyRec := TRUE;
      END;

      IF ModifyRec THEN
        LocPurchaseHeader.MODIFY;
    END;

    LOCAL PROCEDURE InitPurchLineQuantities@2(VAR CurrPurchOrderNo@1002 : Code[20]);
    VAR
      LocPurchaseLine@1000 : Record 39;
    BEGIN
      LocPurchaseLine.RESET;
      LocPurchaseLine.SETRANGE("Document Type",LocPurchaseLine."Document Type"::Order);
      LocPurchaseLine.SETRANGE("Document No.",CurrPurchOrderNo);
      IF LocPurchaseLine.FIND('-') THEN BEGIN
        REPEAT
          IF LocPurchaseLine."Qty. to Receive" <> 0 THEN BEGIN
            LocPurchaseLine.VALIDATE("Qty. to Receive",0);
            LocPurchaseLine.MODIFY;
          END;
        UNTIL LocPurchaseLine.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateSplitPurchLines@8(VAR CurrInboundASNLine@1010 : Record 14099201;VAR CurrInboundASNHeader@1009 : Record 14099200);
    VAR
      SplitQty@1001 : Decimal;
      SplitLineNo@1000 : Integer;
      DirectUnitCost@1002 : Decimal;
      Finished@1003 : Boolean;
      LocPurchaseLine@1005 : Record 39;
      LocPurchaseLineSplit@1004 : Record 39;
      ModifyRec@1006 : Boolean;
      LocLocation@1007 : Record 14;
      ReservEntry@1240020000 : Record 337;
      ReservMgt@1240020001 : Codeunit 99000845;
      ReserveQuantity@1240020002 : Decimal;
      TempReservEntry@1240020003 : TEMPORARY Record 337;
      TrackingChecked@1240020004 : Boolean;
      finishedActiveLine@1240020005 : Boolean;
      ReservEntry2@1240020006 : Record 337;
      EntryNo@1240020007 : Integer;
      TrackingSplit@1240020008 : Boolean;
      LineSpacing@1240020009 : Integer;
      UseAlternateLineSpacing@1240020010 : Boolean;
    BEGIN
      IF NOT LocPurchaseLine.GET(LocPurchaseLine."Document Type"::Order,
        CurrInboundASNLine."Purchase Order No.", CurrInboundASNLine."Purchase Order Line No.") THEN
          EXIT;

      IF (LocPurchaseLine."Drop Shipment" OR LocPurchaseLine."Special Order") THEN
        EXIT;

      ModifyRec := FALSE;
      TrackingChecked := FALSE;
      SplitQty := 0;
      TempReservEntry.DELETEALL;
      DirectUnitCost := LocPurchaseLine."Direct Unit Cost";
      LineSpacing := 0;
      UseAlternateLineSpacing := FALSE;


      // split line
      CASE TRUE OF
        CurrInboundASNLine."Ship Qty." < LocPurchaseLine."Outstanding Quantity":
        BEGIN
          SplitQty := LocPurchaseLine."Outstanding Quantity" - CurrInboundASNLine."Ship Qty.";

          // find line numbers
          LocPurchaseLineSplit.RESET;
          LocPurchaseLineSplit.SETRANGE("Document Type",LocPurchaseLine."Document Type");
          LocPurchaseLineSplit.SETRANGE("Document No.",LocPurchaseLine."Document No.");
          LocPurchaseLineSplit := LocPurchaseLine;
          IF LocPurchaseLineSplit.FIND('>') THEN BEGIN
            LineSpacing := (LocPurchaseLineSplit."Line No." - LocPurchaseLineSplit."Line No.") DIV 2;
            IF LineSpacing = 0 THEN
              UseAlternateLineSpacing := TRUE;
          END ELSE
            LineSpacing := 10000;

          LocPurchaseLineSplit.INIT;
          LocPurchaseLineSplit := LocPurchaseLine;

          IF UseAlternateLineSpacing THEN BEGIN
            SplitLineNo := LocPurchaseLine."Line No.";
            REPEAT
              SplitLineNo := SplitLineNo + 100;
              LocPurchaseLineSplit."Line No." := SplitLineNo;
              IF LocPurchaseLineSplit.INSERT(TRUE) THEN
                Finished := TRUE
              ELSE
                Finished := FALSE;
            UNTIL Finished;
          END ELSE BEGIN
            LocPurchaseLineSplit."Line No." := LocPurchaseLine."Line No." + LineSpacing;
            LocPurchaseLineSplit.INSERT(TRUE);
          END;
          ResetPurchLineFields(LocPurchaseLineSplit, LocPurchaseLine);

          LocPurchaseLineSplit.VALIDATE("No.",LocPurchaseLine."No.");
          LocPurchaseLineSplit.VALIDATE("Variant Code",LocPurchaseLine."Variant Code");
          IF LocPurchaseLine."Original Location Code" <> '' THEN
                LocPurchaseLineSplit.VALIDATE("Location Code",LocPurchaseLine."Original Location Code")
              ELSE
                LocPurchaseLineSplit.VALIDATE("Location Code",LocPurchaseLine."Location Code");
          LocPurchaseLineSplit.VALIDATE(Quantity,SplitQty);
          LocPurchaseLineSplit.VALIDATE("Qty. to Receive",0);
          LocPurchaseLineSplit.VALIDATE("Direct Unit Cost",DirectUnitCost);
          IF LocPurchaseLine."Original Line No." <> 0 THEN
            LocPurchaseLineSplit."Original Line No." := LocPurchaseLine."Original Line No."
          ELSE
            LocPurchaseLineSplit."Original Line No." := LocPurchaseLine."Line No.";
          LocPurchaseLineSplit.MODIFY(TRUE);

          // find tracking specification
          IF FilterReservLines(ReservEntry, DATABASE::"Purchase Line",LocPurchaseLine."Document Type",
            LocPurchaseLine."Document No.",LocPurchaseLine."Line No.") THEN BEGIN
            REPEAT
              TempReservEntry.INIT;
              TempReservEntry := ReservEntry;
              TempReservEntry.INSERT;
            UNTIL ReservEntry.NEXT = 0;
            LastTempReservEntryNo := ReservEntry."Entry No.";
            ReservEntry.DELETEALL(TRUE);
          END;
          TrackingChecked := TRUE;
          LocPurchaseLine.VALIDATE(Quantity,CurrInboundASNLine."Ship Qty." + LocPurchaseLine."Quantity Received");
          ModifyRec := TRUE;
        END;
        CurrInboundASNLine."Ship Qty." > LocPurchaseLine."Outstanding Quantity":
        BEGIN
          // over ship
          LocPurchaseLine.VALIDATE(Quantity,CurrInboundASNLine."Ship Qty." + LocPurchaseLine."Quantity Received");
          ModifyRec := TRUE;
        END;
        ELSE BEGIN
        END;
      END;

      IF NOT TrackingChecked THEN BEGIN
        IF FilterReservLines(ReservEntry, DATABASE::"Purchase Line",LocPurchaseLine."Document Type",
          LocPurchaseLine."Document No.",LocPurchaseLine."Line No.") THEN BEGIN
          REPEAT
            TempReservEntry.INIT;
            TempReservEntry := ReservEntry;
            TempReservEntry.INSERT;
          UNTIL ReservEntry.NEXT = 0;
          LastTempReservEntryNo := ReservEntry."Entry No.";
          ReservEntry.DELETEALL(TRUE);
        END;
      END;

      // update line to receive
      IF (LocPurchaseLine."Original Location Code" <> LocPurchaseLine."Location Code")
        AND (LocPurchaseLine."Original Location Code" = '')
          THEN BEGIN
        LocPurchaseLine."Original Location Code" := LocPurchaseLine."Location Code";
        ModifyRec := TRUE;
      END;

      IF (LocPurchaseLine."Original Line No." <> LocPurchaseLine."Line No.") AND
        (LocPurchaseLine."Original Line No." = 0) THEN BEGIN
        LocPurchaseLine."Original Line No." := LocPurchaseLine."Line No.";
        ModifyRec := TRUE;
      END;

      IF (LocPurchaseLine."Location Code" <> CurrInboundASNLine."On The Water Location") THEN BEGIN
        IF (LocPurchaseLine."Qty. Rcd. Not Invoiced" > 0) THEN
          ERROR(txtPurchOrderLineQtyToInv, LocPurchaseLine."Document No.", LocPurchaseLine."Line No.")
        ELSE
          LocPurchaseLine.VALIDATE("Location Code", CurrInboundASNLine."On The Water Location");
        ModifyRec := TRUE;
      END;

      IF (LocPurchaseLine."Qty. to Receive" <> CurrInboundASNLine."Ship Qty.") THEN BEGIN
        LocPurchaseLine.VALIDATE("Qty. to Receive",CurrInboundASNLine."Ship Qty.");
        ModifyRec := TRUE;
      END;

      IF (LocPurchaseLine."Direct Unit Cost" <> DirectUnitCost) THEN BEGIN
        LocPurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost);
        ModifyRec := TRUE;
      END;

      IF (LocPurchaseLine."Inbound Container Number" <> CurrInboundASNHeader."Inbound Container Number") THEN BEGIN
        LocPurchaseLine.VALIDATE("Inbound Container Number", CurrInboundASNHeader."Inbound Container Number");
        ModifyRec := TRUE;
      END;


      // Fix Receiving line tracking
      // Still need to replace the Split Line (New Line) Tracking Qty if specified
      IF ModifyRec THEN
        LocPurchaseLine.MODIFY(TRUE);

      // move tracking specification back to the changed line and to any new split line
      IF ModifyRec THEN BEGIN
       // TODO:  Sort by Shipment Date for rebuilding tracking entries
       // TODO:  Check for Reservation status of Surplus and write back any item tracking lines - below code was designed to handle it
       // TODO:  Need to check for reservations that are written back to the orders.
       // Active line = line we are receiving
        IF TempReservEntry.FIND('-') THEN BEGIN
          finishedActiveLine := FALSE;
          REPEAT

            // receipt the split
            TrackingSplit := FALSE;

            ReservEntry.INIT;
            ReservEntry := TempReservEntry;

            IF NOT finishedActiveLine THEN BEGIN

              // Change Location for Surplus Tracking Entry only v1.11
              IF ReservEntry."Location Code" <> LocPurchaseLine."Location Code" THEN
                ReservEntry."Location Code" := LocPurchaseLine."Location Code";

              CASE ReservEntry."Item Tracking" OF
                ReservEntry."Item Tracking"::"Lot and Serial No.":
                BEGIN
                END;
                ReservEntry."Item Tracking"::"Serial No.":
                BEGIN
                END;
                ReservEntry."Item Tracking"::"Lot No.":  // lot split
                BEGIN
                  IF (ReserveQuantity + TempReservEntry."Quantity (Base)") > (LocPurchaseLine."Qty. to Receive (Base)") THEN BEGIN
                    // update the receiving line
                    ReservEntry.VALIDATE("Quantity (Base)", LocPurchaseLine."Qty. to Receive (Base)" - ReserveQuantity);
                    TrackingSplit := TRUE;
                    ReservEntry2.RESET;
                    ReservEntry2.LOCKTABLE;
                    ReservEntry2.FIND('+');
                    EntryNo := ReservEntry2."Entry No." + 1;
                    IF EntryNo <= LastTempReservEntryNo THEN
                      EntryNo := LastTempReservEntryNo + 1;

                    // Move the tracking quantity to the new line
                    ReservEntry2.INIT;
                    ReservEntry2 := ReservEntry;
                    ReservEntry2."Entry No." := EntryNo;
                    ReservEntry2."Source Ref. No." := LocPurchaseLineSplit."Line No.";
                    ReservEntry2."Location Code" := LocPurchaseLineSplit."Location Code";
                    ReservEntry2.VALIDATE("Quantity (Base)", TempReservEntry."Quantity (Base)" - ReservEntry."Quantity (Base)");
                    ReservEntry2.INSERT;
                  END;
                END;
              END;
            END;

            IF (ReserveQuantity + TempReservEntry."Quantity (Base)") > (LocPurchaseLine."Qty. to Receive (Base)") THEN
              finishedActiveLine := TRUE;

            // done with receipt line, we didn't insert a new line this time, we did need to split the line
            IF finishedActiveLine AND (NOT TrackingSplit) AND (SplitQty > 0) THEN BEGIN
              ReservEntry."Source Ref. No." := LocPurchaseLineSplit."Line No.";
              // compensate for changing location on the line unneccessarily if extra tracking lines
              ReservEntry."Location Code" := LocPurchaseLineSplit."Location Code";
            END;

            // total the reserve quantity to know when we've finished receiving line
            ReserveQuantity := ReserveQuantity + ReservEntry."Quantity (Base)";
            ReservEntry.INSERT;

        UNTIL (TempReservEntry.NEXT = 0);

        TempReservEntry.DELETEALL;
        END;
      END;
    END;

    PROCEDURE PostPurchOrder@14(CurrPurchOrderNo@1001 : Code[20]) : Boolean;
    VAR
      PurchPost@1000 : Codeunit 90;
      LocPurchaseHeader@1002 : Record 38;
    BEGIN
      LocPurchaseHeader.GET(LocPurchaseHeader."Document Type"::Order,CurrPurchOrderNo);
      LocPurchaseHeader.Receive := TRUE;
      LocPurchaseHeader.Invoice := FALSE;
      IF PurchPost.RUN(LocPurchaseHeader) THEN BEGIN
        EXIT(TRUE);
      END ELSE BEGIN
        EXIT(FALSE);
      END;
    END;

    PROCEDURE CreateTransfer@15(VAR CurrInboundASNHeader@1005 : Record 14099200;VAR CurrInboundASNLine@1001 : Record 14099201);
    VAR
      TransferHeader@1004 : Record 5740;
      TransferLine@1003 : Record 5741;
      ReleaseTransferDocument@1002 : Codeunit 5708;
      PurchRcptHeader@1009 : Record 120;
      PurchRcptLine@1008 : Record 121;
      TransferLineNo@1000 : Integer;
      PrevGroup@1240020000 : Code[20];
    BEGIN
      CurrInboundASNLine.RESET;
      CurrInboundASNLine.SETCURRENTKEY("Grouping No.","Final Dest. Location");
      CurrInboundASNLine.SETRANGE("ASN No.",CurrInboundASNHeader."ASN No.");
      CurrInboundASNLine.SETFILTER("Last Receipt No.", '<>%1', '');
      IF CurrInboundASNLine.FIND('-') THEN BEGIN
        TransferHeader.INIT;
        TransferHeader."No." := '';
        CreatedTransferOrderCount := 0;
        REPEAT
          IF CurrInboundASNLine."On The Water Location" <> CurrInboundASNLine."Final Dest. Location" THEN BEGIN
            IF PurchRcptLine.GET(CurrInboundASNLine."Last Receipt No.", CurrInboundASNLine."Purchase Order Line No.") THEN BEGIN
              IF (PurchRcptLine.Type <> PurchRcptLine.Type::Item) OR
                (PurchRcptLine."No." = '') OR
                (PurchRcptLine.Quantity = 0) THEN
                EXIT;

              // Split Transfer for Receipt Grouping
              IF (TransferHeader."Transfer-to Code" <> CurrInboundASNLine."Final Dest. Location") OR
                 (CurrInboundASNLine."Grouping No." <> PrevGroup) THEN BEGIN
                IF TransferHeader."No." <> '' THEN
                  ReleaseTransferDocument.RUN(TransferHeader);
                CreateTransferHeader(TransferHeader, CurrInboundASNHeader, CurrInboundASNLine);
                CreatedTransferOrderCount := CreatedTransferOrderCount + 1;
                UpdateWindow(2, FORMAT(CreatedTransferOrderCount));
                TransferLineNo := 0;
              END;
              TransferLine.INIT;
              TransferLine."Document No." := TransferHeader."No.";
              TransferLineNo := TransferLineNo + 10000;
              TransferLine."Line No." := TransferLineNo;
              TransferLine.VALIDATE("Item No.",PurchRcptLine."No.");
              TransferLine.VALIDATE("Variant Code", PurchRcptLine."Variant Code");
              TransferLine.VALIDATE(Quantity,PurchRcptLine.Quantity);
              TransferLine.VALIDATE("Unit of Measure Code",PurchRcptLine."Unit of Measure Code");
              TransferLine."TO Delivery Status":=TransferHeader."TO Delivery Status";//VSO2483
              TransferLine."Purchase Order No." := CurrInboundASNLine."Purchase Order No.";//TPZ2989
              TransferLine.INSERT(TRUE);

              PrevGroup := CurrInboundASNLine."Grouping No.";
            END;
          END;
        UNTIL CurrInboundASNLine.NEXT = 0;
        IF (CreatedTransferOrderCount > 0) THEN
          ReleaseTransferDocument.RUN(TransferHeader);
      END ELSE
        ERROR(txtPostEmptyLineTransfer, CurrInboundASNHeader."ASN No.");
    END;

    LOCAL PROCEDURE CreateTransferHeader@9(VAR CurrTransferHeader@1000 : Record 5740;VAR CurrInboundASNHeader@1002 : Record 14099200;VAR CurrInboundASNLine@1001 : Record 14099201);
    VAR
      tmpPurchaseLine@1000000000 : Record 39;
      item@1000000001 : Record 27;
    BEGIN
      CurrTransferHeader.INIT;
      CurrTransferHeader."No." := '';
      CurrTransferHeader.INSERT(TRUE);
      CurrTransferHeader.VALIDATE("Transfer-from Code",CurrInboundASNLine."On The Water Location");
      CurrTransferHeader.VALIDATE("Transfer-to Code", CurrInboundASNLine."Final Dest. Location");
      CurrTransferHeader.VALIDATE("In-Transit Code",InboundASNSetup."In-Transit Location");
      //<TPZ2329>
            tmpPurchaseLine.RESET();
            tmpPurchaseLine.SETRANGE("Document No.", CurrInboundASNLine."Purchase Order No.");
            tmpPurchaseLine.SETRANGE(Type,tmpPurchaseLine.Type::Item);
            IF tmpPurchaseLine.FINDFIRST THEN BEGIN
               item.GET(tmpPurchaseLine."No.");
               CurrTransferHeader.VALIDATE("Shortcut Dimension 5 Code",item."Shortcut Dimension 5 Code");
            END;
      //</TPZ2329>

      //>>001 TPZ3395
      //CurrTransferHeader."Posting Date" := CurrInboundASNHeader."Transfer Shipment Date";
      //CurrTransferHeader."Shipment Date" := CurrInboundASNHeader."Transfer Shipment Date";
      CurrTransferHeader."Shipment Date" := TODAY;
      CurrTransferHeader."Posting Date" := TODAY;
      //<<001 TPZ3395

      CurrTransferHeader."Receipt Date" := CurrInboundASNHeader."Transfer Receipt Date";
      CurrTransferHeader."Inbound ASN Number" := CurrInboundASNHeader."ASN No.";
      CurrTransferHeader."Inbound Container Number" := CurrInboundASNHeader."Inbound Container Number";
      CurrTransferHeader."ASN Grouping No." := CurrInboundASNLine."Grouping No.";
      CurrTransferHeader."TO Delivery Status":=CurrTransferHeader."TO Delivery Status"::"On Water";//VSO2483
      CurrTransferHeader."Purchase Order No." := CurrInboundASNLine."Purchase Order No.";//TPZ2458

      CurrTransferHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePostedDocument@4(VAR CurrInboundASNHeader@1003 : Record 14099200);
    VAR
      PostedInboundASNHeader@1002 : Record 14099203;
      PostedInboundASNLine@1001 : Record 14099204;
      LocInboundASNLine@1000 : Record 14099201;
    BEGIN
      // Post Inbound ASN
      PostedInboundASNHeader.INIT;
      PostedInboundASNHeader.TRANSFERFIELDS(CurrInboundASNHeader);
      PostedInboundASNHeader."Posted Date" := TODAY;
      PostedInboundASNHeader."Posted By" := USERID;
      PostedInboundASNHeader.INSERT;

      LocInboundASNLine.RESET;
      LocInboundASNLine.SETRANGE("ASN No.",CurrInboundASNHeader."ASN No.");
      IF LocInboundASNLine.FIND('-') THEN
        REPEAT
          PostedInboundASNLine.TRANSFERFIELDS(LocInboundASNLine);
          PostedInboundASNLine.INSERT;
        UNTIL LocInboundASNLine.NEXT = 0;
    END;

    PROCEDURE PostingDateAllowed@1(PostingDate@1000 : Date) Allowed : Boolean;
    VAR
      AllowPostingFrom@1240060001 : Date;
      AllowPostingTo@1240060000 : Date;
      UserSetup@1240060002 : Record 91;
      GLSetup@1240060003 : Record 98;
      LocInboundASNHeader@1001 : Record 14099200;
    BEGIN
      Allowed := FALSE;
      IF USERID <> '' THEN BEGIN
        IF UserSetup.GET(USERID) THEN BEGIN
          AllowPostingFrom := UserSetup."Allow Posting From";
          AllowPostingTo := UserSetup."Allow Posting To";
        END;
      END;

      GLSetup.GET;
      IF (AllowPostingFrom = 0D) THEN BEGIN
        AllowPostingFrom := GLSetup."Allow Posting From";
      END;

      IF (AllowPostingTo = 0D) THEN BEGIN
        AllowPostingTo := GLSetup."Allow Posting To";
      END;

      // no user & no g/l setup assume demo
      IF (AllowPostingTo = 0D) THEN
        AllowPostingTo := 01019999D;

      IF NOT ((PostingDate >= AllowPostingFrom) AND (PostingDate <= AllowPostingTo)) THEN
        ERROR(txtPostDateErr, LocInboundASNHeader.FIELDCAPTION("Posting Date"), PostingDate, USERID);
    END;

    PROCEDURE GetPurchaseOrder@1240020001(CurrInboundASNNo@1240020000 : Code[20]);
    VAR
      LocTxtNoOutstandingQtyErr@1000 : TextConst 'ENU=%1 Order does not have any outstanding quantities!';
      ASNPurchOrderListForm@1001 : Page 14099204;
    BEGIN
      CLEAR(ASNPurchOrderListForm);
      ASNPurchOrderListForm.LOOKUPMODE(TRUE);
      ASNPurchOrderListForm.SetInboundASN(CurrInboundASNNo);
      IF (ASNPurchOrderListForm.RUNMODAL <> ACTION::Cancel) THEN;
    END;

    PROCEDURE CreateASNLines@6(CurrInboundASNNo@1004 : Code[20];VAR CurrPurchaseHeader@1001 : Record 38);
    VAR
      LocTxtNoOutstandingQtyErr@1000 : TextConst 'ENU=%1 Order does not have any outstanding quantities!';
      LocPurchaseLine@1002 : Record 39;
      LocInboundASNLine@1003 : Record 14099201;
      LocInboundASNHeader@1005 : Record 14099200;
      LastLineNo@1006 : Integer;
    BEGIN
      LocInboundASNHeader.GET(CurrInboundASNNo);
      IF CurrPurchaseHeader.FIND('-') THEN BEGIN
        REPEAT
          LocPurchaseLine.RESET;
          LocPurchaseLine.SETRANGE("Document Type",CurrPurchaseHeader."Document Type");
          LocPurchaseLine.SETRANGE("Document No.",CurrPurchaseHeader."No.");
          LocPurchaseLine.SETRANGE(Type,LocPurchaseLine.Type::Item);
          LocPurchaseLine.SETFILTER("Outstanding Quantity",'>%1',0);
          IF LocPurchaseLine.FIND('-') THEN BEGIN
            LocInboundASNLine.RESET;
            LocInboundASNLine.SETRANGE("ASN No.",LocInboundASNHeader."ASN No.");
            IF LocInboundASNLine.FIND('+') THEN
              LastLineNo := LocInboundASNLine."Line No."
            ELSE
              LastLineNo := 0;

            REPEAT
              LocInboundASNLine.INIT;
              LocInboundASNLine."ASN No." := LocInboundASNHeader."ASN No.";
              LastLineNo := LastLineNo + 10000;
              LocInboundASNLine."Line No." := LastLineNo;
              LocInboundASNLine."Purchase Order No." := LocPurchaseLine."Document No.";
              LocInboundASNLine."Purchase Order Line No." := LocPurchaseLine."Line No.";
              LocInboundASNLine.VALIDATE("Item No.",LocPurchaseLine."No.");
              LocInboundASNLine.VALIDATE("Variant Code",LocPurchaseLine."Variant Code");
              LocInboundASNLine.Description := LocPurchaseLine.Description;
              LocInboundASNLine."Description 2" := LocPurchaseLine."Description 2";
              LocInboundASNLine.VALIDATE("Vendor Item No.",LocPurchaseLine."Vendor Item No.");
              IF LocPurchaseLine."Original Location Code" <> '' THEN
                LocInboundASNLine.VALIDATE("Final Dest. Location",LocPurchaseLine."Original Location Code")
              ELSE
                LocInboundASNLine.VALIDATE("Final Dest. Location",LocPurchaseLine."Location Code");
              LocInboundASNLine.VALIDATE("Unit of Measure Code",LocPurchaseLine."Unit of Measure Code");
              LocInboundASNLine.VALIDATE("Open PO Qty.", LocPurchaseLine."Outstanding Quantity");
              LocInboundASNLine.VALIDATE("Ship Qty.",LocPurchaseLine."Outstanding Quantity");
              LocInboundASNLine."Currency Code" := CurrPurchaseHeader."Currency Code";
              LocInboundASNLine."Purchase Line Direct Unit Cost" := LocPurchaseLine."Direct Unit Cost";
              LocInboundASNLine."Gross Weight" := LocPurchaseLine."Gross Weight";
              LocInboundASNLine."Net Weight" := LocPurchaseLine."Net Weight";
              LocInboundASNLine."Unit Volume" := LocPurchaseLine."Unit Volume";
              LocInboundASNLine.VALIDATE("Outstanding Qty.",0);
              LocInboundASNLine.VALIDATE("Over Ship Qty.",0);
              LocInboundASNLine.INSERT(TRUE);
            UNTIL LocPurchaseLine.NEXT = 0;
          END ELSE BEGIN
            IF ShowDialog THEN
              MESSAGE(LocTxtNoOutstandingQtyErr, CurrPurchaseHeader."No.");
          END;
        UNTIL CurrPurchaseHeader.NEXT = 0;
      END;
      CurrPurchaseHeader.RESET;
    END;

    PROCEDURE OpenWindow@21();
    BEGIN
      IF NOT ShowDialog THEN
        EXIT;
      Window.OPEN(
        txtDialog001 + '\' +
        PADSTR(txtDialog002,15,' ') + '#1########\' +
        PADSTR(txtDialog003,15,' ') + '#2##################');
    END;

    PROCEDURE UpdateWindow@22(CurrDisplayNo@1000 : Integer;CurrDisplayText@1001 : Text[250]);
    BEGIN
      IF NOT ShowDialog THEN
        EXIT;
      Window.UPDATE(CurrDisplayNo, CurrDisplayText);
    END;

    PROCEDURE CloseWindow@23();
    BEGIN
      IF NOT ShowDialog THEN
        EXIT;
      Window.CLOSE;
    END;

    LOCAL PROCEDURE GetInvSetup@1240020002();
    BEGIN
      IF NOT InvSetupRetreived THEN BEGIN
        InvSetup.GET;
        InvSetupRetreived := TRUE;
      END;
    END;

    LOCAL PROCEDURE GetASNSetup@1240020005();
    BEGIN
      IF NOT InboundASNSetupRetreived THEN BEGIN
        InboundASNSetup.GET;
        InboundASNSetupRetreived := TRUE;
      END;
    END;

    LOCAL PROCEDURE GetLocation@1240020013(CurrLocationCode@1240020000 : Code[20]);
    BEGIN
      IF CurrLocationCode = '' THEN
        EXIT;

      IF (Location.Code <> CurrLocationCode) THEN
        Location.GET(CurrLocationCode);
    END;

    PROCEDURE CloseASNInvBalance@1240020004(VAR CurrPostedInboundASNNo@1240020000 : Code[20]);
    VAR
      PostedInboundASNHeader@1240020003 : Record 14099203;
      PurchRcptLine@1240020001 : Record 121;
      ItemLedgEntry@1240020002 : Record 32;
      TempItemJnlLine@1240020004 : TEMPORARY Record 83;
      NextLineNo@1240020005 : Integer;
      ItemJnlLine@1240020006 : Record 83;
    BEGIN
      IF NOT PostedInboundASNHeader.GET(CurrPostedInboundASNNo) THEN
        ERROR(txtPostInvBalCreate, CurrPostedInboundASNNo);

      GetASNSetup;
      InboundASNSetup.TESTFIELD("Journal Template Name");
      InboundASNSetup.TESTFIELD("Journal Batch Name");


      PurchRcptLine.SETRANGE("Inbound Container Number", PostedInboundASNHeader."Inbound Container Number");
      PurchRcptLine.SETRANGE(Type, PurchRcptLine.Type::Item);
      PurchRcptLine.SETFILTER("No.", '<>%1', '');
      PurchRcptLine.SETFILTER(Quantity, '>%1', 0);
      IF PurchRcptLine.FIND('-') THEN BEGIN
        NextLineNo := 0;
        ItemJnlLine.LOCKTABLE;
        ItemJnlLine.SETRANGE("Journal Template Name", InboundASNSetup."Journal Template Name");
        ItemJnlLine.SETRANGE("Journal Batch Name", InboundASNSetup."Journal Batch Name");
        IF ItemJnlLine.FINDLAST THEN
          NextLineNo := ItemJnlLine."Line No.";
        REPEAT
          GetLocation(PurchRcptLine."Location Code");
          IF NOT Location."Directed Put-away and Pick" THEN BEGIN
            IF (PurchRcptLine."Item Rcpt. Entry No." <> 0)  THEN BEGIN
              ItemLedgEntry.GET(PurchRcptLine."Item Rcpt. Entry No.");
              IF ItemLedgEntry.Open THEN BEGIN
                InsertTempItemJournalEntries(TempItemJnlLine,ItemLedgEntry,NextLineNo);
              END;
            END ELSE BEGIN
              ItemLedgEntry.SETRANGE("Document Type", ItemLedgEntry."Document Type"::"Purchase Receipt");
              ItemLedgEntry.SETRANGE("Document No.", PurchRcptLine."Document No.");
              ItemLedgEntry.SETRANGE("Document Line No.", PurchRcptLine."Line No.");
              ItemLedgEntry.SETRANGE("Item No.", PurchRcptLine."No.");
              ItemLedgEntry.SETRANGE(Correction, FALSE);
              ItemLedgEntry.SETRANGE(Positive, TRUE);
              ItemLedgEntry.SETRANGE(Open,TRUE);
              IF ItemLedgEntry.FIND('-') THEN BEGIN
                REPEAT
                  InsertTempItemJournalEntries(TempItemJnlLine,ItemLedgEntry,NextLineNo);
                UNTIL ItemLedgEntry.NEXT = 0;
              END;
            END;
          END;
        UNTIL PurchRcptLine.NEXT = 0;
      END;

      InsertJounralEntries(TempItemJnlLine);

      IF GUIALLOWED THEN BEGIN
        MESSAGE('%1', STRSUBSTNO(txtASNCorrJnlFinished, CorrJnlLineCount));
        IF (CorrJnlLineCount > 0) THEN
          ShowASNAdjJournal;
      END;
    END;

    PROCEDURE ReviewASNInvBalance@1240020010(VAR CurrPostedInboundASNNo@1240020000 : Code[20]);
    VAR
      PostedInboundASNHeader@1240020003 : Record 14099203;
      PurchRcptLine@1240020001 : Record 121;
      ItemLedgEntry@1240020002 : Record 32;
      TempItemLedgEntry@1240020004 : TEMPORARY Record 32;
    BEGIN
      IF NOT PostedInboundASNHeader.GET(CurrPostedInboundASNNo) THEN
        ERROR(txtPostInvBalCreate, CurrPostedInboundASNNo);

      GetASNSetup;

      PurchRcptLine.SETRANGE("Inbound Container Number", PostedInboundASNHeader."Inbound Container Number");
      PurchRcptLine.SETRANGE(Type, PurchRcptLine.Type::Item);
      PurchRcptLine.SETFILTER("No.", '<>%1', '');
      IF PurchRcptLine.FIND('-') THEN BEGIN
        REPEAT
          IF (PurchRcptLine."Item Rcpt. Entry No." <> 0)  THEN BEGIN
            ItemLedgEntry.GET(PurchRcptLine."Item Rcpt. Entry No.");
            TempItemLedgEntry.INIT;
            TempItemLedgEntry := ItemLedgEntry;
            TempItemLedgEntry.INSERT(FALSE);
          END ELSE BEGIN
            ItemLedgEntry.SETRANGE("Document Type", ItemLedgEntry."Document Type"::"Purchase Receipt");
            ItemLedgEntry.SETRANGE("Document No.", PurchRcptLine."Document No.");
            ItemLedgEntry.SETRANGE("Document Line No.", PurchRcptLine."Line No.");
            ItemLedgEntry.SETRANGE("Item No.", PurchRcptLine."No.");
            IF ItemLedgEntry.FIND('-') THEN BEGIN
              REPEAT
                TempItemLedgEntry.INIT;
                TempItemLedgEntry := ItemLedgEntry;
                TempItemLedgEntry.INSERT(FALSE);
              UNTIL ItemLedgEntry.NEXT = 0;
            END;
          END;
        UNTIL PurchRcptLine.NEXT = 0;
      END;

      IF GUIALLOWED THEN BEGIN
        IF TempItemLedgEntry.FIND('-') THEN
          PAGE.RUN(0, TempItemLedgEntry);
      END;
    END;

    LOCAL PROCEDURE InsertTempItemJournalEntries@1240020007(VAR CurrTempItemJnlLine@1240020000 : TEMPORARY Record 83;VAR CurrItemLedgEntry@1240020001 : Record 32;VAR CurrNextLineNo@1240020002 : Integer);
    BEGIN
      CurrNextLineNo := CurrNextLineNo + 10000;
      CurrTempItemJnlLine.INIT;
      CurrTempItemJnlLine."Journal Template Name" := InboundASNSetup."Journal Template Name";
      CurrTempItemJnlLine."Journal Batch Name" := InboundASNSetup."Journal Batch Name";
      CurrTempItemJnlLine."Line No." := CurrNextLineNo;
      CurrTempItemJnlLine."Item No." := CurrItemLedgEntry."Item No.";
      CurrTempItemJnlLine."Location Code" := CurrItemLedgEntry."Location Code";
      CurrTempItemJnlLine."Document No." := CurrItemLedgEntry."Document No.";
      IF (CurrItemLedgEntry."Lot No." = '') AND (CurrItemLedgEntry."Serial No." = '') THEN
        CurrTempItemJnlLine."Applies-to Entry" := CurrItemLedgEntry."Entry No.";
      CurrTempItemJnlLine.Quantity := CurrItemLedgEntry."Remaining Quantity";
      CurrTempItemJnlLine.INSERT;
    END;

    LOCAL PROCEDURE InsertJounralEntries@1240020006(VAR CurrTempItemJnlLine@1240020001 : TEMPORARY Record 83);
    VAR
      ItemJnlLine@1240020000 : Record 83;
      ItemJnlBatch@1240020002 : Record 233;
      NoSeriesMgt@1240020003 : Codeunit 396;
    BEGIN
      CorrJnlLineCount := 0;
      IF CurrTempItemJnlLine.FIND('-') THEN BEGIN
        ItemJnlBatch.GET(InboundASNSetup."Journal Template Name",InboundASNSetup."Journal Batch Name");
        REPEAT
          ItemJnlLine.INIT;
          ItemJnlLine."Journal Template Name" := InboundASNSetup."Journal Template Name";
          ItemJnlLine."Journal Batch Name" := InboundASNSetup."Journal Batch Name";
          ItemJnlLine."Line No." := CurrTempItemJnlLine."Line No.";
          ItemJnlLine.INSERT(TRUE);
          ItemJnlLine.VALIDATE("Entry Type", ItemJnlLine."Entry Type"::"Negative Adjmt.");
          ItemJnlLine.VALIDATE("Posting Date", WORKDATE);
          IF ItemJnlBatch."No. Series" <> '' THEN BEGIN
            CLEAR(NoSeriesMgt);
            ItemJnlLine."Document No." := NoSeriesMgt.GetNextNo(ItemJnlBatch."No. Series",ItemJnlLine."Posting Date",FALSE);
          END ELSE
            ItemJnlLine."Document No." := COPYSTR(STRSUBSTNO(txtASNCorr,CurrTempItemJnlLine."Document No."),1,20);
          ItemJnlLine.VALIDATE("Item No.", CurrTempItemJnlLine."Item No.");
          ItemJnlLine.VALIDATE("Location Code", CurrTempItemJnlLine."Location Code");
          ItemJnlLine.VALIDATE(Quantity, CurrTempItemJnlLine.Quantity);
          ItemJnlLine.VALIDATE("Applies-to Entry", CurrTempItemJnlLine."Applies-to Entry");
          ItemJnlLine.MODIFY(TRUE);
          CorrJnlLineCount += 1;
        UNTIL CurrTempItemJnlLine.NEXT = 0;
      END;
    END;

    PROCEDURE ShowASNAdjJournal@1240020009();
    VAR
      ItemJnlLine@1240020002 : Record 83;
      ItemJnlBatch@1240020000 : Record 233;
      ItemJnlMgt@1240020001 : Codeunit 240;
      ItemJnlTemplate@1240020003 : Record 82;
    BEGIN
      GetASNSetup;
      InboundASNSetup.TESTFIELD("Journal Template Name");
      InboundASNSetup.TESTFIELD("Journal Batch Name");
      IF NOT ItemJnlBatch.GET(InboundASNSetup."Journal Template Name",InboundASNSetup."Journal Batch Name") THEN
        ERROR(txtASNCorrJnlBatchNotFound, InboundASNSetup."Journal Batch Name");

      ItemJnlLine.FILTERGROUP := 2;
      ItemJnlLine.SETRANGE("Journal Template Name",InboundASNSetup."Journal Template Name");
      ItemJnlLine.SETRANGE("Journal Batch Name", InboundASNSetup."Journal Batch Name");
      ItemJnlLine.FILTERGROUP := 0;
      PAGE.RUN(519,ItemJnlLine);
    END;

    LOCAL PROCEDURE CheckTrackingSpecification@46(VAR CurrInboundASNLine@1240020002 : Record 14099201) IsTrackedError : Boolean;
    VAR
      Item@1016 : Record 27;
      ItemTrackingCode@1009 : Record 6502;
      ItemTrackingManagement@1015 : Codeunit 6500;
      Inbound@1010 : Boolean;
      SNRequired@1011 : Boolean;
      LotRequired@1012 : Boolean;
      SNInfoRequired@1013 : Boolean;
      LotInfoRequired@1014 : Boolean;
      ItemJnlLine@1240020000 : Record 83;
      IsTracked@1240020001 : Boolean;
      PurchLineToCheck@1240020003 : Record 39;
      TrackingQtyToHandle@1240020004 : Decimal;
      PurchLineQtyToHandle@1240020005 : Decimal;
    BEGIN
      IsTracked := FALSE;
      IsTrackedError := FALSE;
      Item.GET(CurrInboundASNLine."Item No.");
      IF Item."Item Tracking Code" <> '' THEN BEGIN
        ItemTrackingCode.Code := Item."Item Tracking Code";
        ItemTrackingManagement.GetItemTrackingSettings(ItemTrackingCode,
          ItemJnlLine."Entry Type"::Purchase,
          Inbound,
          SNRequired,
          LotRequired,
          SNInfoRequired,
          LotInfoRequired);
        IsTracked := SNRequired OR LotRequired;
        IF IsTracked THEN BEGIN
          PurchLineToCheck.GET(PurchLineToCheck."Document Type"::Order,CurrInboundASNLine."Purchase Order No.",
            CurrInboundASNLine."Purchase Order Line No.");
          GetTrackingQuantities(PurchLineToCheck,1,TrackingQtyToHandle);
          TrackingQtyToHandle := TrackingQtyToHandle;
          PurchLineQtyToHandle := CurrInboundASNLine."Ship Qty. (Base)";
          IF TrackingQtyToHandle < PurchLineQtyToHandle THEN
            IsTrackedError := TRUE;
        END;
      END;
      EXIT(IsTrackedError);
    END;

    LOCAL PROCEDURE GetTrackingQuantities@47(PurchLine@1000 : Record 39;FunctionType@1002 : 'CheckTrackingExists,GetQty';VAR TrackingQtyToHandle@1003 : Decimal) : Boolean;
    VAR
      TrackingSpecification@1004 : Record 336;
      ReservEntry@1001 : Record 337;
    BEGIN
      WITH TrackingSpecification DO BEGIN
        SETCURRENTKEY("Source ID","Source Type","Source Subtype","Source Batch Name",
          "Source Prod. Order Line","Source Ref. No.");
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source Subtype",PurchLine."Document Type");
        SETRANGE("Source ID",PurchLine."Document No.");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
        SETRANGE("Source Ref. No.",PurchLine."Line No.");
      END;
      WITH ReservEntry DO BEGIN
        SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line");
        SETRANGE("Source ID",PurchLine."Document No.");
        SETRANGE("Source Ref. No.",PurchLine."Line No.");
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source Subtype",PurchLine."Document Type");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
      END;

      CASE FunctionType OF
        FunctionType::CheckTrackingExists:
          BEGIN
            TrackingSpecification.SETRANGE(Correction,FALSE);
            IF NOT TrackingSpecification.ISEMPTY THEN
              EXIT(TRUE);
            ReservEntry.SETFILTER("Serial No.",'<>%1','');
            IF NOT ReservEntry.ISEMPTY THEN
              EXIT(TRUE);
            ReservEntry.SETRANGE("Serial No.");
            ReservEntry.SETFILTER("Lot No.",'<>%1','');
            IF NOT ReservEntry.ISEMPTY THEN
              EXIT(TRUE);
          END;
        FunctionType::GetQty:
          BEGIN
            IF ReservEntry.FINDSET THEN
              REPEAT
                IF (ReservEntry."Lot No." <> '') OR (ReservEntry."Serial No." <> '') THEN
                  TrackingQtyToHandle := TrackingQtyToHandle + ReservEntry."Qty. to Handle (Base)";
              UNTIL ReservEntry.NEXT = 0;
          END;
      END;
    END;

    PROCEDURE FilterReservLines@1240060001(VAR ReservEntry@1240060001 : Record 337;SourceType@1240060000 : Integer;SourceSubType@1240060003 : Integer;SourceID@1240060007 : Code[20];SourceRefNo@1240060008 : Integer) : Boolean;
    BEGIN
      ReservEntry.SETRANGE("Source Type",SourceType);
      ReservEntry.SETRANGE("Source Subtype",SourceSubType);
      ReservEntry.SETRANGE("Source ID", SourceID);
      ReservEntry.SETRANGE("Source Batch Name",'');
      ReservEntry.SETRANGE("Source Prod. Order Line",0);
      ReservEntry.SETRANGE("Source Ref. No.",SourceRefNo);
      ReservEntry.SETFILTER("Item Tracking", '>%1', 0);
      IF ReservEntry.FIND('-') THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE LookupInboundContainerNumber@1240020003() : Code[50];
    VAR
      PostedASNList@1240020000 : Page 14099207;
      PostedInboundASN@1240020001 : Record 14099203;
    BEGIN
      CLEAR(PostedASNList);
      PostedASNList.LOOKUPMODE(TRUE);
      IF (PostedASNList.RUNMODAL = ACTION::LookupOK) THEN BEGIN
        PostedASNList.GETRECORD(PostedInboundASN);
        EXIT(PostedInboundASN."Inbound Container Number");
      END;
    END;

    LOCAL PROCEDURE WhseLinesExist@1240020014(SourceType@1000 : Integer;SourceSubType@1001 : Option;SourceNo@1002 : Code[20];SourceLineNo@1003 : Integer;SourceSublineNo@1004 : Integer;SourceQty@1007 : Decimal) : Boolean;
    VAR
      WhseRcptLine@1006 : Record 7317;
      WhseShptLine@1005 : Record 7321;
      WhseActivLine@1240020000 : Record 5767;
    BEGIN
      IF ((SourceType = DATABASE::"Purchase Line") AND (SourceSubType = 1) AND (SourceQty >= 0)) OR
         ((SourceType = DATABASE::"Purchase Line") AND (SourceSubType = 5) AND (SourceQty < 0)) OR
         ((SourceType = DATABASE::"Sales Line") AND (SourceSubType = 1) AND (SourceQty < 0)) OR
         ((SourceType = DATABASE::"Sales Line") AND (SourceSubType = 5) AND (SourceQty >= 0)) OR
         ((SourceType = DATABASE::"Transfer Line") AND (SourceSubType = 1))
      THEN BEGIN
        WhseRcptLine.SETCURRENTKEY(
          "Source Type","Source Subtype","Source No.","Source Line No.");
        WhseRcptLine.SETRANGE("Source Type",SourceType);
        WhseRcptLine.SETRANGE("Source Subtype",SourceSubType);
        WhseRcptLine.SETRANGE("Source No.",SourceNo);
        WhseRcptLine.SETRANGE("Source Line No.",SourceLineNo);
        IF NOT WhseRcptLine.ISEMPTY THEN BEGIN
          EXIT(TRUE);
        END;
      END;

      IF ((SourceType = DATABASE::"Purchase Line") AND (SourceSubType = 1) AND (SourceQty < 0)) OR
         ((SourceType = DATABASE::"Purchase Line") AND (SourceSubType = 5) AND (SourceQty >= 0)) OR
         ((SourceType = DATABASE::"Sales Line") AND (SourceSubType = 1) AND (SourceQty >= 0)) OR
         ((SourceType = DATABASE::"Sales Line") AND (SourceSubType = 5) AND (SourceQty < 0)) OR
         ((SourceType = DATABASE::"Transfer Line") AND (SourceSubType = 0))
      THEN BEGIN
        WhseShptLine.SETCURRENTKEY(
          "Source Type","Source Subtype","Source No.","Source Line No.");
        WhseShptLine.SETRANGE("Source Type",SourceType);
        WhseShptLine.SETRANGE("Source Subtype",SourceSubType);
        WhseShptLine.SETRANGE("Source No.",SourceNo);
        WhseShptLine.SETRANGE("Source Line No.",SourceLineNo);
        IF NOT WhseShptLine.ISEMPTY THEN BEGIN
          EXIT(TRUE);
        END;
      END;

      WhseActivLine.SETCURRENTKEY(
        "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.");
      WhseActivLine.SETRANGE("Source Type",SourceType);
      WhseActivLine.SETRANGE("Source Subtype",SourceSubType);
      WhseActivLine.SETRANGE("Source No.",SourceNo);
      WhseActivLine.SETRANGE("Source Line No.",SourceLineNo);
      WhseActivLine.SETRANGE("Source Subline No.",SourceSublineNo);
      IF NOT WhseActivLine.ISEMPTY THEN BEGIN
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ResetPurchLineFields@20(VAR ToPurchLine@1001 : Record 39;VAR FromPurchLine@1003 : Record 39);
    VAR
      GLAcc@1002 : Record 15;
      ToPurchLine2@1007 : Record 39;
      CopyThisLine@1000 : Boolean;
    BEGIN
      IF ToPurchLine."Document Type" <> ToPurchLine."Document Type"::Order THEN BEGIN
        ToPurchLine."Prepayment %" := 0;
        ToPurchLine."Prepayment VAT %" := 0;
        ToPurchLine."Prepmt. VAT Calc. Type" := 0;
        ToPurchLine."Prepayment VAT Identifier" := '';
        ToPurchLine."Prepayment VAT %" := 0;
        ToPurchLine."Prepayment Tax Group Code" := '';
        ToPurchLine."Prepmt. Line Amount" := 0;
        ToPurchLine."Prepmt. Amt. Incl. VAT" := 0;
      END;
      ToPurchLine."Prepmt. Amt. Inv." := 0;
      ToPurchLine."Prepayment Amount"  := 0;
      ToPurchLine."Prepmt. VAT Base Amt." := 0;
      ToPurchLine."Prepmt Amt to Deduct" := 0;
      ToPurchLine."Prepmt Amt Deducted" := 0;
      ToPurchLine."Prepmt. Amount Inv. Incl. VAT" := 0;
      ToPurchLine."Quantity Received" := 0;
      ToPurchLine."Qty. Received (Base)" := 0;
      ToPurchLine."Return Qty. Shipped" := 0;
      ToPurchLine."Return Qty. Shipped (Base)" := 0;
      ToPurchLine."Quantity Invoiced" := 0;
      ToPurchLine."Qty. Invoiced (Base)" := 0;
      ToPurchLine."Reserved Quantity" := 0;
      ToPurchLine."Reserved Qty. (Base)" := 0;
      ToPurchLine."Qty. Rcd. Not Invoiced" := 0;
      ToPurchLine."Qty. Rcd. Not Invoiced (Base)" := 0;
      ToPurchLine."Return Qty. Shipped Not Invd." := 0;
      ToPurchLine."Ret. Qty. Shpd Not Invd.(Base)" := 0;
      ToPurchLine."Qty. to Receive" := 0;
      ToPurchLine."Qty. to Receive (Base)" := 0;
      ToPurchLine."Return Qty. to Ship" := 0;
      ToPurchLine."Return Qty. to Ship (Base)" := 0;
      ToPurchLine."Qty. to Invoice" := 0;
      ToPurchLine."Qty. to Invoice (Base)" := 0;
      ToPurchLine."Amt. Rcd. Not Invoiced" := 0;
      ToPurchLine."Amt. Rcd. Not Invoiced (LCY)" := 0;
      ToPurchLine."Return Shpd. Not Invd." := 0;
      ToPurchLine."Return Shpd. Not Invd. (LCY)" := 0;
      ToPurchLine.InitOutstanding;
      ToPurchLine.InitQtyToReceive;
      ToPurchLine."VAT Difference" := FromPurchLine."VAT Difference";
      ToPurchLine."Receipt No." := '';
      ToPurchLine."Receipt Line No." := 0;
      ToPurchLine."Appl.-to Item Entry" := 0;
      ToPurchLine."Sales Order No." := '';
      ToPurchLine."Sales Order Line No." := 0;
      ToPurchLine."Special Order Sales No." := '';
      ToPurchLine."Special Order Sales Line No." := 0;
      IF FromPurchLine."Drop Shipment" OR FromPurchLine."Special Order" THEN
        ToPurchLine."Purchasing Code" := '';
      ToPurchLine."Drop Shipment" := FALSE;
      ToPurchLine."Special Order" := FALSE;
    END;

    BEGIN
    {
      2018-06-07 TPZ2329 EBAGIM
        Add Validation for Division code upon creating a transfer order
      2019-06-12 TPZ2458 VAHAMAD
        Purchase Order Field mapping in function CreateTransferHeader
      TPZ2989 VAH 11252020 Added code in CreateTransfer Function
      001 TPZ3395 RPS 11022021 - Validate Shipment date and posting date to "Todays" date on TO's
    }
    END.
  }
}

