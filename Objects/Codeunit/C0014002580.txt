OBJECT Codeunit 14002580 Bin Count Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=08/21/18;
    Time=12:00:00 PM;
    Version List=RF1.50.13;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1240020008 : TextConst 'ENU=Location does not exist.';
      Text002@1240020007 : TextConst 'ENU=%1 Bin Count.';
      Text003@1240020006 : TextConst 'ENU=Bin Count does not exist.';
      Text004@1240020005 : TextConst 'ENU=Bin Count already exists.';
      Text005@1240020004 : TextConst 'ENU=Bin Count %1.';
      Text006@1240020003 : TextConst 'ENU=Bin Count %1 failed during creation.';
      Text007@1240020002 : TextConst 'ENU=The Bin Count No. must be initialized.';
      Text008@1240020001 : TextConst 'ENU=Bin Count Line already exists.';
      Text009@1240020000 : TextConst 'ENU=Bin Count Line failed during creation for Bin %1.';
      Text010@1240020009 : TextConst 'ENU=Bin Count Template does not exist.';
      Text011@1240020010 : TextConst 'ENU=Counts remain to be performed.';
      Text012@1240020011 : TextConst 'ENU=Not all lines are registered.';
      Text013@1240020012 : TextConst 'ENU=Bin Count cannot be refreshed in this Status.';
      Text014@1240020013 : TextConst 'ENU=Cannot reset a Completed count.';
      Text015@1240020014 : TextConst 'ENU=Batch could not be deleted.';
      Text016@1240020015 : TextConst 'ENU=Bin does not exist.';
      Text017@1240020016 : TextConst 'ENU=Invalid Bin to adjust.';
      Text018@1240020017 : TextConst 'ENU=%1 Ad Hoc Count';
      Text019@1240020018 : TextConst 'ENU=%1 Triggered Count';
      Text020@1240020019 : TextConst 'ENU=No unscheduled bins were found based on the %1 template. All bins are either already on scheduled counts, or outside of the parameters defined in the associated template.';
      Text021@1240020020 : TextConst 'ENU=Bin Count setup not Enabled.';
      Text022@1240020021 : TextConst 'ENU=Bin Count No. Series not set.';
      Text023@1240020022 : TextConst 'ENU=Bin Count Line No. Series not set.';
      Text024@1240020023 : TextConst 'ENU=Bin Count must be Complete status.';
      Text025@1240020024 : TextConst 'ENU=Bin Count %1 has been scheduled for %2.';
      Text026@1240020025 : TextConst 'ENU=A Bin Count Line may only be Marked for Audit when the Count Type is set to Audited Count when the Bin Count is scheduled.';
      Text027@1240020026 : TextConst 'ENU=The user may not be changed for a count already in progress.';
      Text028@1240020027 : TextConst 'ENU=Only Audit Counts can be reset.';

    [External]
    PROCEDURE ScheduleBinCount@1240020001(BinCountTemplateCode@1240020000 : Code[10];ScheduledDate@1240020001 : Date;CountDescription@1240020002 : Text[50]);
    VAR
      BinCount@1240020003 : Record 14002580;
      BinCountLine@1240020008 : Record 14002581;
      BinCountTemplate@1240020006 : Record 14002582;
      Location@1240020005 : Record 14;
      RFSetup@1240020004 : Record 14002801;
      BinCountNo@1240020009 : Code[20];
    BEGIN
      RFSetup.GetRFSetup;
      IF NOT RFSetup."Enable Bin Count" THEN
        ERROR(Text021);

      IF NOT BinCountTemplate.GET(BinCountTemplateCode) THEN
        ERROR(Text010);

      IF NOT Location.GET(BinCountTemplate."Location Code") THEN
        ERROR(Text001);

      IF BinCountNo = '' THEN BEGIN
        BinCountNo := GetNextBinCountNo;
        InsertBinCountHeader(BinCountNo,Location.Code);
      END ELSE
        IF NOT BinCount.GET(BinCountNo) THEN
          ERROR(Text003);

      IF CountDescription = '' THEN
        CountDescription := BinCountTemplate.Description;

      IF NOT InsertBinCountDetail(Location,BinCountTemplate,BinCountNo,ScheduledDate,CountDescription)
      THEN
        ERROR(STRSUBSTNO(Text006,BinCountNo));

      SetBinsForCount(BinCountTemplate,Location,BinCountNo);

      BinCountLine.RESET;
      BinCountLine.SETRANGE("Bin Count No.",BinCountNo);
      IF BinCountLine.ISEMPTY THEN
        ERROR(STRSUBSTNO(Text020,BinCountTemplateCode));

      IF GUIALLOWED THEN BEGIN
        IF BinCount.GET(BinCountNo) THEN
          MESSAGE(STRSUBSTNO(Text025,BinCount."Bin Count No.",BinCount."Scheduled Date"));
      END;
    END;

    [External]
    PROCEDURE CreateUnscheduledBinCount@1240020012(LocationCode@1240020000 : Code[10];BinCode@1240020001 : Code[20];WhseEmpId@1240020002 : Code[50];TriggeredCount@1240020013 : Boolean;VAR BinCountNo@1240020009 : Code[20];VAR RemarkMessage@1240020008 : Text[250]) : Boolean;
    VAR
      Bin@1240020003 : Record 7354;
      Location@1240020004 : Record 14;
      BinCount@1240020005 : Record 14002580;
      BinCountLine@1240020012 : Record 14002581;
      BinCountTemplateTmp@1240020007 : TEMPORARY Record 14002582;
      RFSetup@1240020006 : Record 14002801;
      TempCode@1240020014 : Code[10];
      CountDescription@1240020010 : Text[50];
    BEGIN
      RFSetup.GetRFSetup;
      IF NOT RFSetup."Enable Bin Count" THEN
        ERROR(Text021);

      IF NOT Location.GET(LocationCode) THEN BEGIN
        RemarkMessage := Text001;
        EXIT(FALSE);
      END;

      IF NOT Bin.GET(Location.Code,BinCode) THEN BEGIN
        RemarkMessage := Text016;
        EXIT(FALSE);
      END;

      IF Location."Adjustment Bin Code" = Bin.Code THEN BEGIN
        RemarkMessage := Text017;
        EXIT(FALSE);
      END;

      IF TriggeredCount THEN BEGIN
        CountDescription := STRSUBSTNO(Text019,Bin.Code);
        TempCode := 'TRIGGERED';
      END ELSE BEGIN
        CountDescription := STRSUBSTNO(Text018,Bin.Code);
        TempCode := 'ADHOC';
      END;

      BinCountTemplateTmp.RESET;
      BinCountTemplateTmp.DELETEALL;

      BinCountTemplateTmp.RESET;
      BinCountTemplateTmp.SETRANGE("Template Code",TempCode);
      IF NOT BinCountTemplateTmp.FIND('-') THEN BEGIN
        BinCountTemplateTmp.INIT;
        BinCountTemplateTmp."Template Code" := TempCode;
        BinCountTemplateTmp.Description := CountDescription;
        BinCountTemplateTmp."Location Code" := Location.Code;
        BinCountTemplateTmp."Count Type" := BinCountTemplateTmp."Count Type"::"Ad Hoc Count";
        BinCountTemplateTmp.INSERT;
      END;

      BinCountNo := GetNextBinCountNo;
      InsertBinCountHeader(BinCountNo,Location.Code);

      IF InsertBinCountDetail(
          Location,BinCountTemplateTmp,BinCountNo,TODAY,CountDescription)
      THEN
        InsertBinCountLines(Bin,BinCountNo)
      ELSE BEGIN
        RemarkMessage := STRSUBSTNO(Text006,BinCountNo);
        EXIT(FALSE);
      END;

      IF WhseEmpId <> '' THEN BEGIN
        BinCountLine.RESET;
        IF BinCountLine.GET(BinCountNo,Bin.Code,Bin."Zone Code",Location.Code) THEN BEGIN
          BinCountLine."Assigned User ID" := WhseEmpId;
          BinCountLine.MODIFY(TRUE);
        END;
      END;

      BinCountTemplateTmp.RESET;
      BinCountTemplateTmp.DELETEALL;

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE InsertBinCountHeader@1240020002(BinCountNo@1240020001 : Code[20];LocationCode@1240020002 : Code[10]);
    VAR
      BinCount@1240020000 : Record 14002580;
    BEGIN
      IF NOT BinCount.GET(BinCountNo) THEN BEGIN
        BinCount.INIT;
        BinCount."Bin Count No." := BinCountNo;
        BinCount."Location Code" := LocationCode;
        BinCount.INSERT;
      END ELSE
        ERROR(Text004);
    END;

    [External]
    PROCEDURE InsertBinCountDetail@1240020000(Location@1240020010 : Record 14;BinCountTemplate@1240020008 : Record 14002582;BinCountNo@1240020004 : Code[20];ScheduledDate@1240020005 : Date;CountDescription@1240020007 : Text[50]) : Boolean;
    VAR
      BinCount@1240020006 : Record 14002580;
      WhseJnlTemplate@1240020003 : Record 7309;
      WhseJnlBatch@1240020002 : Record 7310;
      NoSeries@1240020000 : Code[20];
      BatchNo@1240020009 : Integer;
    BEGIN
      IF Location."Directed Put-away and Pick" THEN BEGIN
        WhseJnlTemplate.RESET;
        WhseJnlTemplate.SETRANGE(Type,WhseJnlTemplate.Type::"Physical Inventory");
        WhseJnlTemplate.FIND('-');
      END;

      BinCount.RESET;
      BinCount.SETRANGE("Bin Count No.",BinCountNo);
      IF BinCount.FINDSET(FALSE) THEN BEGIN
        IF Location."Directed Put-away and Pick" THEN
          BinCount."Journal Template Name" := WhseJnlTemplate.Name;
        BinCount."Count Type" := BinCountTemplate."Count Type";
        BinCount."Bin Count Template Code" := BinCountTemplate."Template Code";
        IF (BinCountTemplate."Count Type" = BinCountTemplate."Count Type"::"Audited Count") OR
           BinCountTemplate."Mark for Register"
        THEN
          BinCount."Marked for Register" := TRUE;
        IF CountDescription <> '' THEN
          BinCount.Description := CountDescription
        ELSE
          BinCount.Description := STRSUBSTNO(Text005,BinCountNo);
        BinCount.Status := BinCount.Status::Created;
        IF ScheduledDate <> 0D THEN
          BinCount."Scheduled Date" := ScheduledDate
        ELSE
          BinCount."Scheduled Date" := TODAY;
        BinCount."Created By" := USERID;
        BinCount."Creation Date" := TODAY;
        BinCount."Creation Time" := TIME;
        BinCount."Creation Date/Time" := CURRENTDATETIME;

        IF BinCount.MODIFY(TRUE) THEN
          EXIT(TRUE);
      END ELSE
        ERROR(Text003);

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE InsertBinCountLines@1240020003(Bin@1240020001 : Record 7354;BinCountNo@1240020000 : Code[20]);
    VAR
      BinCount@1240020006 : Record 14002580;
      BinCountLine@1240020007 : Record 14002581;
    BEGIN
      IF NOT BinCount.GET(BinCountNo) THEN
        ERROR(Text003);

      BinCountLine.RESET;
      BinCountLine.SETRANGE("Bin Count No.",BinCountNo);
      BinCountLine.SETRANGE("Bin Code",Bin.Code);
      BinCountLine.SETRANGE("Zone Code",Bin."Zone Code");
      BinCountLine.SETRANGE("Location Code",Bin."Location Code");
      IF NOT BinCountLine.FINDSET(FALSE) THEN BEGIN
        BinCountLine.INIT;
        BinCountLine."Bin Count No." := BinCountNo;
        BinCountLine."Bin Code" := Bin.Code;
        BinCountLine."Zone Code" := Bin."Zone Code";
        BinCountLine."Location Code" := Bin."Location Code";
        BinCountLine."Bin Type" := Bin."Bin Type Code";
        BinCountLine."Bin Sorting" := Bin."Bin Sorting";
        BinCountLine."Scheduled Date" := BinCount."Scheduled Date";
        BinCountLine."Empty Bin" := Bin.Empty;
        IF NOT BinCountLine.INSERT THEN
          ERROR(STRSUBSTNO(Text009,Bin.Code));
      END ELSE
        ERROR(Text008);
    END;

    [External]
    PROCEDURE SetBinsForCount@1240020006(BinCountTemplate@1240020006 : Record 14002582;Location@1240020001 : Record 14;BinCountNo@1240020000 : Code[20]);
    VAR
      Bin@1240020004 : Record 7354;
      BinTmp@1240020007 : TEMPORARY Record 7354;
      BinTmp2@1240020011 : TEMPORARY Record 7354;
      BinContent@1240020002 : Record 7302;
      BinCount@1240020012 : Record 14002580;
      BinCountLine@1240020005 : Record 14002581;
      Item@1240020003 : Record 27;
      MaxNoOfBins@1240020008 : Boolean;
      InsertBin@1240020013 : Boolean;
      NoOfBins@1240020009 : Integer;
      LastDateFilter@1240020010 : Date;
    BEGIN
      BinTmp.RESET;
      BinTmp.DELETEALL;

      BinCount.GET(BinCountNo);

      MaxNoOfBins := FALSE;
      IF BinCountTemplate."Maximum No. of Bins to Count" <> 0 THEN
        MaxNoOfBins := TRUE;

      NoOfBins := 0;
      InsertBin := FALSE;
      Bin.RESET;
      Bin.SETRANGE("Location Code",Location.Code);
      IF BinCountTemplate."Empty Bins Only" THEN
        Bin.SETRANGE(Empty,TRUE);
      IF FORMAT(BinCountTemplate."Last Count Dates Older Than") <> '' THEN BEGIN
        LastDateFilter := CALCDATE(BinCountTemplate."Last Count Dates Older Than",TODAY);
        Bin.SETRANGE("Last Counted Date",0D,LastDateFilter);
      END;
      IF BinCountTemplate."Bin Filter" <> '' THEN
        Bin.SETFILTER(Code,BinCountTemplate."Bin Filter");
      IF BinCountTemplate."Zone Filter" <> '' THEN
        Bin.SETFILTER("Zone Code",BinCountTemplate."Zone Filter");
      IF BinCountTemplate."Warehouse Class Filter" <> '' THEN
        Bin.SETFILTER("Warehouse Class Code",BinCountTemplate."Warehouse Class Filter");
      IF BinCountTemplate."Special Equipment Filter" <> '' THEN
        Bin.SETFILTER("Special Equipment Code",BinCountTemplate."Special Equipment Filter");
      IF Bin.FINDSET(FALSE) THEN BEGIN
        REPEAT
          BinCountLine.RESET;
          BinCountLine.SETRANGE("Bin Code",Bin.Code);
          BinCountLine.SETRANGE("Scheduled Date",BinCount."Scheduled Date");
          BinCountLine.SETRANGE("Count Registered",FALSE);
          IF BinCountLine.ISEMPTY THEN
            InsertBin := TRUE
          ELSE
            InsertBin := FALSE;

          IF InsertBin THEN
            IF Bin.Code = Location."Adjustment Bin Code" THEN
              InsertBin := FALSE;

          IF InsertBin THEN
            IF NOT PassBinAnalysis(BinCount,BinCountTemplate,Location,Bin.Code) THEN
              InsertBin := FALSE;

          IF InsertBin THEN BEGIN
            BinTmp.RESET;
            IF NOT BinTmp.GET(Bin."Location Code",Bin.Code) THEN BEGIN
              BinTmp.INIT;
              BinTmp := Bin;
              BinTmp.INSERT;

              IF MaxNoOfBins THEN
                NoOfBins += 1;
            END;
          END;
        UNTIL (Bin.NEXT = 0) OR
          (MaxNoOfBins AND (NoOfBins >= BinCountTemplate."Maximum No. of Bins to Count"));
      END;

      IF (BinCountTemplate."Item Filter" <> '') OR
         (BinCountTemplate."Variant Filter" <> '')
      THEN BEGIN
        BinContent.RESET;
        BinContent.SETRANGE("Location Code",Location.Code);
        IF BinCountTemplate."Item Filter" <> '' THEN
          BinContent.SETFILTER("Item No.",BinCountTemplate."Item Filter");
        IF BinCountTemplate."Variant Filter" <> '' THEN
          BinContent.SETFILTER("Variant Code",BinCountTemplate."Variant Filter");
        IF BinContent.FINDSET(FALSE) THEN BEGIN
          BinTmp2.RESET;
          BinTmp2.DELETEALL;

          REPEAT
            BinTmp.RESET;
            BinTmp.SETRANGE(Code,BinContent."Bin Code");
            IF BinTmp.FIND('-') THEN BEGIN
              BinTmp2.INIT;
              BinTmp2 := BinTmp;
              BinTmp2.INSERT;
            END;

          UNTIL BinContent.NEXT = 0;

          BinTmp.RESET;
          BinTmp.DELETEALL;
          BinTmp2.RESET;
          IF BinTmp2.FINDSET(FALSE) THEN
            REPEAT
              BinTmp.INIT;
              BinTmp := BinTmp2;
              BinTmp.INSERT;
            UNTIL BinTmp2.NEXT = 0;
        END;
      END;

      BinTmp.RESET;
      BinTmp.SETRANGE("Location Code",Location.Code);
      IF BinTmp.FINDSET(FALSE) THEN
        REPEAT
          InsertBinCountLines(BinTmp,BinCountNo);
        UNTIL BinTmp.NEXT = 0;
    END;

    [External]
    PROCEDURE PassBinAnalysis@1240020046(BinCount@1240020005 : Record 14002580;BinCountTemplate@1240020003 : Record 14002582;Location@1240020002 : Record 14;BinCode@1240020000 : Code[20]) : Boolean;
    VAR
      IgnoreBin@1240020001 : Boolean;
    BEGIN
      CustomPassBinAnalysis(BinCount,BinCountTemplate,Location,BinCode,IgnoreBin);

      IF IgnoreBin THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE AddBinToCount@1240020038(Bin@1240020001 : Record 7354;BinCountNo@1240020000 : Code[20];VAR RemarkMessage@1240020004 : Text[250]);
    VAR
      BinCount@1240020005 : Record 14002580;
      BinCountLine@1240020006 : Record 14002581;
      Bin2@1240020002 : Record 7354;
    BEGIN
      IF NOT BinCount.GET(BinCountNo) THEN
        EXIT;

      Bin2.RESET;
      Bin2.COPYFILTERS(Bin);
      IF Bin2.FINDSET(FALSE) THEN
        REPEAT
          IF NOT BinCountLine.GET(BinCountNo,Bin2.Code,Bin2."Zone Code",Bin2."Location Code") THEN
            InsertBinCountLines(Bin2,BinCountNo);
        UNTIL Bin2.NEXT = 0;
    END;

    [External]
    PROCEDURE GetNextBinCountNo@1240020034() : Code[20];
    VAR
      RFSetup@1240020003 : Record 14002801;
      NoSeriesMgt@1240020002 : Codeunit 396;
      BinCountNo@1240020000 : Code[20];
    BEGIN
      RFSetup.GetRFSetup;
      IF NOT RFSetup."Enable Bin Count" THEN
        ERROR(Text021);

      IF RFSetup."Bin Count Nos." = '' THEN
        ERROR(Text022);

      IF RFSetup."Bin Count Line Nos." = '' THEN
        ERROR(Text023);

      BinCountNo :=
        NoSeriesMgt.GetNextNo(RFSetup."Bin Count Nos.",WORKDATE,TRUE);

      EXIT(BinCountNo);
    END;

    [External]
    PROCEDURE GetNextBinCountLineNo@1240020008(WhseEmpId@1240020004 : Code[50];LocationCode@1240020003 : Code[10];UseDefault@1240020001 : Boolean) : Code[10];
    VAR
      RFSetup@1240020000 : Record 14002801;
      WhseEmployee@1240020005 : Record 7301;
      NoSeriesMgt@1240020002 : Codeunit 396;
      BinCountLineNo@1240020007 : Code[10];
    BEGIN
      CLEAR(BinCountLineNo);
      RFSetup.GetRFSetup;
      IF NOT RFSetup."Enable Bin Count" THEN
        ERROR(Text021);

      IF RFSetup."Bin Count Nos." = '' THEN
        ERROR(Text022);

      IF RFSetup."Bin Count Line Nos." = '' THEN
        ERROR(Text023);

      IF NOT UseDefault THEN BEGIN
        WhseEmployee.RESET;
        IF WhseEmployee.GET(WhseEmpId,LocationCode) THEN BEGIN
          IF WhseEmployee."User Bin Count Line Nos." <> '' THEN
            BinCountLineNo :=
              NoSeriesMgt.GetNextNo(WhseEmployee."User Bin Count Line Nos.",WORKDATE,TRUE)
          ELSE
            BinCountLineNo :=
              NoSeriesMgt.GetNextNo(RFSetup."Bin Count Line Nos.",WORKDATE,TRUE);
        END ELSE
          BinCountLineNo :=
            NoSeriesMgt.GetNextNo(RFSetup."Bin Count Line Nos.",WORKDATE,TRUE);
      END ELSE
        BinCountLineNo :=
          NoSeriesMgt.GetNextNo(RFSetup."Bin Count Line Nos.",WORKDATE,TRUE);

      EXIT(BinCountLineNo);
    END;

    [External]
    PROCEDURE GetBinRecord@1240020013(TableNo@1240020000 : Integer;FromRecord@1240020001 : RecordID;VAR BinCode@1240020002 : Code[20];VAR ZoneCode@1240020003 : Code[10]);
    VAR
      BinCountLine@1240020005 : Record 14002581;
      BinCountLine2@1240020004 : Record 14002581;
      RecRef@1240020006 : RecordRef;
    BEGIN
      IF TableNo <> 0 THEN BEGIN
        RecRef.OPEN(TableNo);
        IF RecRef.GET(FromRecord) THEN BEGIN
          RecRef.SETTABLE(BinCountLine);
          IF BinCountLine2.GET(
            BinCountLine."Bin Count No.",BinCountLine."Bin Code",
            BinCountLine."Zone Code",BinCountLine."Location Code")
          THEN BEGIN
            BinCode := BinCountLine."Bin Code";
            ZoneCode := BinCountLine."Zone Code";
          END;
        END;
      END;
    END;

    [External]
    PROCEDURE ToggleAssignedUserID@1240020018(VAR BinCountLine@1240020003 : Record 14002581;AssignUser@1240020001 : Boolean;WhseEmpId@1240020005 : Code[50]);
    VAR
      BinCountLine2@1240020002 : Record 14002581;
      WhseEmployee@1240020004 : Record 7301;
      WhseEmployeeList@1240020000 : Page 7348;
    BEGIN
      IF GUIALLOWED THEN BEGIN
        IF BinCountLine.FIND('-') THEN
          IF BinCountLine."Count Initiated" THEN
            ERROR(Text027);

          IF AssignUser THEN BEGIN
            WhseEmployee.RESET;
            WhseEmployee.SETRANGE("Location Code",BinCountLine."Location Code");
            IF WhseEmployee.FIND('-') THEN BEGIN
              CLEAR(WhseEmployeeList);
              WhseEmployeeList.SETTABLEVIEW(WhseEmployee);
              WhseEmployeeList.LOOKUPMODE(TRUE);
              IF WhseEmployeeList.RUNMODAL <> ACTION::LookupOK THEN
                EXIT;
              WhseEmployeeList.GETRECORD(WhseEmployee);
            END;
          END;

          REPEAT
            IF BinCountLine2.GET(
              BinCountLine."Bin Count No.",BinCountLine."Bin Code",
              BinCountLine."Zone Code",BinCountLine."Location Code")
            THEN BEGIN
              IF AssignUser THEN BEGIN
                IF BinCountLine2."Assigned User ID" <> WhseEmployee."User ID" THEN BEGIN
                  BinCountLine2."Assigned User ID" := WhseEmployee."User ID";
                  BinCountLine2.MODIFY;
                END;
              END ELSE BEGIN
                BinCountLine2."Assigned User ID" := '';
                BinCountLine2.MODIFY;
              END;
            END;
          UNTIL BinCountLine.NEXT = 0;
      END ELSE BEGIN
        IF BinCountLine2.GET(
          BinCountLine."Bin Count No.",BinCountLine."Bin Code",
          BinCountLine."Zone Code",BinCountLine."Location Code")
        THEN BEGIN
          IF AssignUser THEN BEGIN
            IF BinCountLine2."Assigned User ID" <> WhseEmpId THEN BEGIN
              BinCountLine2."Assigned User ID" := WhseEmpId;
              BinCountLine2.MODIFY;
            END;
          END ELSE BEGIN
            BinCountLine2."Assigned User ID" := '';
            BinCountLine2.MODIFY;
          END;
        END;
      END;
    END;

    [External]
    PROCEDURE ToggleMarkForAudit@1240020027(VAR BinCountLine@1240020000 : Record 14002581;MarkForAudit@1240020002 : Boolean);
    VAR
      BinCount@1240020003 : Record 14002580;
      BinCountLine2@1240020001 : Record 14002581;
    BEGIN
      IF BinCountLine.FIND('-') THEN
        REPEAT
          IF BinCountLine2.GET(
            BinCountLine."Bin Count No.",BinCountLine."Bin Code",
            BinCountLine."Zone Code",BinCountLine."Location Code")
          THEN BEGIN
            IF BinCount.GET(BinCountLine."Bin Count No.") THEN
              IF BinCount."Count Type" = BinCount."Count Type"::"Audited Count" THEN BEGIN
                BinCountLine2."Count Marked for Audit" := MarkForAudit;
                BinCountLine2.MODIFY;
              END ELSE
                ERROR(Text026);
          END;
        UNTIL BinCountLine.NEXT = 0;
    END;

    [External]
    PROCEDURE ToggleEmptyBin@1240020022(VAR BinCountLine@1240020001 : Record 14002581;EmptyBin@1240020000 : Boolean);
    VAR
      BinCountLine2@1240020002 : Record 14002581;
    BEGIN
      IF BinCountLine2.GET(
        BinCountLine."Bin Count No.",BinCountLine."Bin Code",
        BinCountLine."Zone Code",BinCountLine."Location Code")
      THEN BEGIN
        BinCountLine2."Empty Bin" := EmptyBin;
        BinCountLine2.MODIFY;
      END;
    END;

    [External]
    PROCEDURE LineCountInitiated@1240020004(BinCountNo@1240020000 : Code[20];BinCode@1240020007 : Code[20];ZoneCode@1240020008 : Code[10];LocationCode@1240020009 : Code[10];WhseEmpId@1240020001 : Code[50];AuditCountBatchNo@1240020010 : Code[10];BinCountLineNo@1240020011 : Code[10]);
    VAR
      BinCount@1240020002 : Record 14002580;
      BinCountLine@1240020003 : Record 14002581;
      DateStamp@1240020004 : Date;
      TimeStamp@1240020005 : Time;
      DateTimeStamp@1240020006 : DateTime;
    BEGIN
      DateStamp := TODAY;
      TimeStamp := TIME;
      DateTimeStamp := CURRENTDATETIME;

      BinCount.RESET;
      IF BinCount.GET(BinCountNo) THEN BEGIN
        IF BinCount.Status = BinCount.Status::Created THEN BEGIN
          IF AuditCountBatchNo <> '' THEN
            BinCount."Journal Batch Name" := AuditCountBatchNo;
          BinCount.Status := BinCount.Status::"In Process";
          BinCount."Started Date" := DateStamp;
          BinCount."Started Time" := TimeStamp;
          BinCount."Started Date/Time" := DateTimeStamp;
        END;

        IF (AuditCountBatchNo <> '') AND (BinCount."Journal Batch Name" = '') THEN
          BinCount."Journal Batch Name" := AuditCountBatchNo;

        BinCount.MODIFY;
      END;

      BinCountLine.RESET;
      IF BinCountLine.GET(BinCountNo,BinCode,ZoneCode,LocationCode) THEN BEGIN
        IF BinCountLineNo <> '' THEN
          BinCountLine."Batch No." := BinCountLineNo;
        IF BinCountLine."Assigned User ID" = '' THEN
          BinCountLine."Assigned User ID" := WhseEmpId;
        BinCountLine."Count Initiated" := TRUE;
        BinCountLine."Count Initiated Date" := DateStamp;
        BinCountLine."Count Initiated Time" := TimeStamp;
        BinCountLine."Count Initiated Date/Time" := DateTimeStamp;
        BinCountLine.MODIFY;
      END;

      BinCountLine.RESET;
      IF BinCountLine.GET(BinCountNo,BinCode,ZoneCode,LocationCode) THEN BEGIN
        SetExpectedLineValues(BinCountLine);
        SetExpectedHeaderValues(BinCountNo);
      END;
    END;

    [External]
    PROCEDURE LineCountPerformed@1240020005(BinCountNo@1240020010 : Code[20];BinCode@1240020009 : Code[20];ZoneCode@1240020008 : Code[10];LocationCode@1240020007 : Code[10];WhseEmpId@1240020000 : Code[50]);
    VAR
      BinCount@1240020003 : Record 14002580;
      BinCountLine@1240020002 : Record 14002581;
      DateStamp@1240020006 : Date;
      TimeStamp@1240020005 : Time;
      DateTimeStamp@1240020004 : DateTime;
    BEGIN
      DateStamp := TODAY;
      TimeStamp := TIME;
      DateTimeStamp := CURRENTDATETIME;

      BinCountLine.RESET;
      IF BinCountLine.GET(BinCountNo,BinCode,ZoneCode,LocationCode) THEN BEGIN
        IF NOT BinCountLine."Count Performed" THEN BEGIN
          IF BinCountLine."Count User ID" = '' THEN
            BinCountLine."Count User ID" := WhseEmpId;

          BinCountLine."Count Performed" := TRUE;
          BinCountLine."Count Performed Date" := DateStamp;
          BinCountLine."Count Performed Time" := TimeStamp;
          BinCountLine."Count Performed DateTime" := DateTimeStamp;
        END;

        BinCountLine.MODIFY;
      END;

      BinCountLine.RESET;
      BinCountLine.SETRANGE("Bin Count No.",BinCountNo);
      BinCountLine.SETRANGE("Count Performed",FALSE);
      IF BinCountLine.ISEMPTY THEN BEGIN
        BinCount.RESET;
        IF BinCount.GET(BinCountNo) THEN
          IF BinCount.Status = BinCount.Status::"In Process" THEN BEGIN
            IF BinCount."Count Type" = BinCount."Count Type"::"Audited Count" THEN
              BinCount.Status := BinCount.Status::"Pending Register"
            ELSE
              BinCount.Status := BinCount.Status::"Pending Completion";
            BinCount."Finished Date" := DateStamp;
            BinCount."Finished Time" := TimeStamp;
            BinCount."Finished Date/Time" := DateTimeStamp;
            BinCount.MODIFY;
          END;
      END;

      BinCountLine.RESET;
      IF BinCountLine.GET(BinCountNo,BinCode,ZoneCode,LocationCode) THEN BEGIN
        SetActualLineValues(BinCountLine);
        SetActualHeaderValues(BinCountNo);
        CheckCustomCriteriaForAudit(BinCountLine);
      END;
    END;

    [External]
    PROCEDURE LineCountRegistered@1240020033(BinCountNo@1240020010 : Code[20];BinCode@1240020009 : Code[20];ZoneCode@1240020008 : Code[10];LocationCode@1240020007 : Code[10];WhseEmpId@1240020000 : Code[50];JournalRegistered@1240020001 : Boolean);
    VAR
      BinCount@1240020003 : Record 14002580;
      BinCountLine@1240020002 : Record 14002581;
      DateStamp@1240020006 : Date;
      TimeStamp@1240020005 : Time;
      DateTimeStamp@1240020004 : DateTime;
    BEGIN
      DateStamp := TODAY;
      TimeStamp := TIME;
      DateTimeStamp := CURRENTDATETIME;

      BinCountLine.RESET;
      IF BinCountLine.GET(BinCountNo,BinCode,ZoneCode,LocationCode) THEN BEGIN
        IF JournalRegistered THEN BEGIN
          BinCountLine."Count Registered" := TRUE;
          BinCountLine."Count Registered Date" := DateStamp;
          BinCountLine."Count Registered Time" := TimeStamp;
          BinCountLine."Count Registered DateTime" := DateTimeStamp;
        END;

        BinCountLine.MODIFY;
      END;
    END;

    [External]
    PROCEDURE LineCountAuditInitiated@1240020029(BinCountNo@1240020009 : Code[20];BinCode@1240020008 : Code[20];ZoneCode@1240020007 : Code[10];LocationCode@1240020006 : Code[10];WhseEmpId@1240020005 : Code[50];AuditCountBatchNo@1240020011 : Code[10];BinCountLineNo@1240020010 : Code[10]);
    VAR
      BinCount@1240020004 : Record 14002580;
      BinCountLine@1240020003 : Record 14002581;
      DateStamp@1240020002 : Date;
      TimeStamp@1240020001 : Time;
      DateTimeStamp@1240020000 : DateTime;
    BEGIN
      DateStamp := TODAY;
      TimeStamp := TIME;
      DateTimeStamp := CURRENTDATETIME;

      BinCount.RESET;
      IF BinCount.GET(BinCountNo) THEN
        IF BinCount.Status = BinCount.Status::"Pending Register" THEN BEGIN
          BinCount.Status := BinCount.Status::Audit;
          IF (AuditCountBatchNo <> '') AND (BinCount."Journal Batch Name" = '') THEN
            BinCount."Journal Batch Name" := AuditCountBatchNo;
          BinCount.MODIFY;
        END;

      BinCountLine.RESET;
      IF BinCountLine.GET(BinCountNo,BinCode,ZoneCode,LocationCode) THEN BEGIN
        IF BinCountLine."Audited User ID" = '' THEN
          BinCountLine."Audited User ID" := WhseEmpId;
        IF BinCountLineNo <> '' THEN
          BinCountLine."Batch No." := BinCountLineNo;
        BinCountLine."Audit Initiated" := TRUE;
        BinCountLine."Audit Initiated Date" := DateStamp;
        BinCountLine."Audit Initiated Time" := TimeStamp;
        BinCountLine."Audit Initiated Date/Time" := DateTimeStamp;
        BinCountLine.MODIFY;
      END;
    END;

    [External]
    PROCEDURE LineCountAuditRegistered@1240020024(BinCountNo@1240020004 : Code[20];BinCode@1240020003 : Code[20];ZoneCode@1240020002 : Code[10];LocationCode@1240020001 : Code[10];WhseEmpId@1240020000 : Code[50]);
    VAR
      BinCount@1240020009 : Record 14002580;
      BinCountLine@1240020008 : Record 14002581;
      BinCountLine2@1240020010 : Record 14002581;
      DateStamp@1240020007 : Date;
      TimeStamp@1240020006 : Time;
      DateTimeStamp@1240020005 : DateTime;
    BEGIN
      DateStamp := TODAY;
      TimeStamp := TIME;
      DateTimeStamp := CURRENTDATETIME;

      BinCountLine.RESET;
      IF BinCountLine.GET(BinCountNo,BinCode,ZoneCode,LocationCode) THEN BEGIN
        IF (BinCountLine."Audited User ID" = '') OR
           (BinCountLine."Audited User ID" <> WhseEmpId)
        THEN
          BinCountLine."Audited User ID" := WhseEmpId;
        BinCountLine."Count Marked for Audit" := FALSE;
        BinCountLine."Audit Performed" := TRUE;
        BinCountLine."Audit Performed Date" := DateStamp;
        BinCountLine."Audit Performed Time" := TimeStamp;
        BinCountLine."Audit Performed DateTime" := DateTimeStamp;
        BinCountLine.MODIFY;
      END;

      BinCountLine.RESET;
      BinCountLine.SETRANGE("Bin Count No.",BinCountNo);
      BinCountLine.SETRANGE("Count Marked for Audit",TRUE);
      BinCountLine.SETRANGE("Audit Performed",FALSE);
      IF BinCountLine.ISEMPTY THEN BEGIN
        BinCount.RESET;
        IF BinCount.GET(BinCountNo) THEN BEGIN
          IF BinCount.Status = BinCount.Status::Audit THEN
            BinCount.Status := BinCount.Status::"Pending Register";
          BinCount."Finished Date" := DateStamp;
          BinCount."Finished Time" := TimeStamp;
          BinCount."Finished Date/Time" := DateTimeStamp;
          BinCount."Marked for Register" := TRUE;
          BinCount.MODIFY;
        END;
      END;

      BinCountLine.RESET;
      IF BinCountLine.GET(BinCountNo,BinCode,ZoneCode,LocationCode) THEN BEGIN
        SetActualLineValues(BinCountLine);
        SetActualHeaderValues(BinCountNo);
      END;
    END;

    [External]
    PROCEDURE ConfirmedBinEmpty@1240020023(BinCountNo@1240020004 : Code[20];BinCode@1240020003 : Code[20];ZoneCode@1240020002 : Code[10];LocationCode@1240020001 : Code[10];WhseEmpId@1240020000 : Code[50]);
    VAR
      BinCount@1240020009 : Record 14002580;
      BinCountLine@1240020008 : Record 14002581;
      DateStamp@1240020007 : Date;
      TimeStamp@1240020006 : Time;
      DateTimeStamp@1240020005 : DateTime;
    BEGIN
      IF NOT BinCount.GET(BinCountNo) THEN
        ERROR(Text003);

      BinCountLine.RESET;
      IF BinCountLine.GET(BinCountNo,BinCode,ZoneCode,LocationCode) THEN BEGIN
        IF NOT BinCountLine."Empty Bin" THEN
          ToggleEmptyBin(BinCountLine,TRUE);

        BinCountLine."Empty Bin Confirmed" := TRUE;
        BinCountLine.MODIFY;

        IF NOT BinCountLine."Count Initiated" THEN
          LineCountInitiated(BinCountNo,BinCode,ZoneCode,LocationCode,WhseEmpId,'','');

        IF NOT BinCountLine."Count Performed" THEN
          LineCountPerformed(BinCountNo,BinCode,ZoneCode,LocationCode,WhseEmpId);

        IF BinCount."Marked for Register" OR
           (BinCount."Count Type" = BinCount."Count Type"::"Audited Count")
        THEN BEGIN
          IF BinCountLine."Count Marked for Audit" AND
             BinCountLine."Count Performed"
          THEN BEGIN
            LineCountAuditInitiated(BinCountNo,BinCode,ZoneCode,LocationCode,WhseEmpId,'','');
            LineCountAuditRegistered(BinCountNo,BinCode,ZoneCode,LocationCode,WhseEmpId);
          END;
        END ELSE
          IF NOT BinCountLine."Count Registered" THEN
            LineCountRegistered(BinCountNo,BinCode,ZoneCode,LocationCode,WhseEmpId,TRUE);

        IF (BinCount."Count Type" = BinCount."Count Type"::"Ad Hoc Count") OR
           (BinCount."Count Type" = BinCount."Count Type"::"Triggered Count")
        THEN
          CompleteCount(BinCount);
      END;
    END;

    [External]
    PROCEDURE SetExpectedLineValues@1240020009(BinCountLine@1240020000 : Record 14002581);
    VAR
      BinCount@1240020001 : Record 14002580;
      BinCountLine2@1240020002 : Record 14002581;
      UnitsExpected@1240020005 : Decimal;
      CostExpected@1240020006 : Decimal;
      OppCostExpected@1240020007 : Decimal;
    BEGIN
      IF BinCount.GET(BinCountLine."Bin Count No.") THEN BEGIN
        IF BinCountLine2.GET(
          BinCountLine."Bin Count No.",BinCountLine."Bin Code",
          BinCountLine."Zone Code",BinCountLine."Location Code")
        THEN BEGIN
          CalculateExpectedValues(BinCountLine2,UnitsExpected,CostExpected,OppCostExpected);
          BinCountLine2."Units Expected" := UnitsExpected;
          BinCountLine2."Cost Expected" := CostExpected;
          BinCountLine2."Opp. Cost Expected" := OppCostExpected;
          BinCountLine2.MODIFY;
        END;
      END;
    END;

    [External]
    PROCEDURE SetExpectedHeaderValues@1240020025(BinCountNo@1240020011 : Code[20]);
    VAR
      BinCount@1240020010 : Record 14002580;
      BinCountLine@1240020008 : Record 14002581;
      Bin@1240020007 : Record 7354;
      TotalUnitsExpected@1240020003 : Decimal;
      TotalCostExpected@1240020002 : Decimal;
      TotalOppCostExpected@1240020001 : Decimal;
      TotalBinsScheduled@1240020000 : Integer;
    BEGIN
      IF BinCount.GET(BinCountNo) THEN BEGIN
        CLEAR(TotalBinsScheduled);
        BinCountLine.RESET;
        BinCountLine.SETRANGE("Bin Count No.",BinCount."Bin Count No.");
        TotalBinsScheduled := BinCountLine.COUNT;
        BinCountLine.SETRANGE("Count Initiated",TRUE);
        IF BinCountLine.FINDSET(FALSE) THEN BEGIN
          CLEAR(TotalUnitsExpected);
          CLEAR(TotalCostExpected);
          CLEAR(TotalOppCostExpected);
          REPEAT
            TotalUnitsExpected += BinCountLine."Units Expected";
            TotalCostExpected += BinCountLine."Cost Expected";
            TotalOppCostExpected += BinCountLine."Opp. Cost Expected";
          UNTIL BinCountLine.NEXT = 0;
          BinCount."Total Units Expected" := TotalUnitsExpected;
          BinCount."Total Cost Expected" := TotalCostExpected;
          BinCount."Total Opp. Cost Expected" := TotalOppCostExpected;
        END;

        Bin.RESET;
        Bin.SETRANGE("Location Code",BinCount."Location Code");
        Bin.SETRANGE("Adjustment Bin",FALSE);
        IF Bin.FINDSET(FALSE) THEN
          BinCount."Total Bins in Warehouse" := Bin.COUNT;

        BinCount."Total Bins Scheduled" := TotalBinsScheduled;

        BinCount.MODIFY;
      END;
    END;

    [External]
    PROCEDURE CalculateExpectedValues@1240020014(BinCountLine@1240020000 : Record 14002581;VAR UnitsExpected@1240020001 : Decimal;VAR CostExpected@1240020002 : Decimal;VAR OppCostExpected@1240020003 : Decimal);
    VAR
      WhseJournalLine@1240020004 : Record 7311;
      CustomValuesSet@1240020005 : Boolean;
      UnitCost@1240020006 : Decimal;
      UnitPrice@1240020007 : Decimal;
    BEGIN
      CLEAR(UnitsExpected);
      CLEAR(CostExpected);
      CLEAR(OppCostExpected);

      CalculateCustomExpectedValues(
        BinCountLine,UnitsExpected,CostExpected,OppCostExpected,CustomValuesSet);

      IF NOT CustomValuesSet THEN BEGIN
        WhseJournalLine.RESET;
        WhseJournalLine.SETCURRENTKEY(
          "Journal Template Name","Journal Batch Name","Location Code","Bin Code");
        WhseJournalLine.SETRANGE("Journal Batch Name",BinCountLine."Batch No.");
        WhseJournalLine.SETRANGE("Location Code",BinCountLine."Location Code");
        WhseJournalLine.SETRANGE("Bin Code",BinCountLine."Bin Code");
        IF WhseJournalLine.FINDSET(FALSE) THEN
          REPEAT
            CLEAR(UnitCost);
            CLEAR(UnitPrice);
            UnitCost := CalculateUnitCost(WhseJournalLine);
            UnitPrice := CalculateUnitPrice(WhseJournalLine);

            UnitsExpected += WhseJournalLine."Qty. (Calculated) (Base)";
            CostExpected += UnitCost * WhseJournalLine."Qty. (Calculated) (Base)";
            IF UnitPrice = 0 THEN
              OppCostExpected += UnitCost * WhseJournalLine."Qty. (Calculated) (Base)"
            ELSE
              OppCostExpected += UnitPrice * WhseJournalLine."Qty. (Calculated) (Base)";
          UNTIL WhseJournalLine.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE SetActualLineValues@1240020010(BinCountLine@1240020000 : Record 14002581);
    VAR
      BinCount@1240020001 : Record 14002580;
      BinCountLine2@1240020002 : Record 14002581;
      UnitsActual@1240020005 : Decimal;
      CostActual@1240020004 : Decimal;
      OppCostActual@1240020003 : Decimal;
    BEGIN
      IF BinCount.GET(BinCountLine."Bin Count No.") THEN BEGIN
        IF BinCountLine2.GET(
          BinCountLine."Bin Count No.",BinCountLine."Bin Code",
          BinCountLine."Zone Code",BinCountLine."Location Code")
        THEN BEGIN
          CalculateActualValues(BinCountLine2,UnitsActual,CostActual,OppCostActual);
          IF BinCountLine2."Audit Performed" THEN BEGIN
            IF BinCountLine2."Units Counted" <> UnitsActual THEN
              BinCountLine2."Count Corrected" := TRUE
            ELSE
              BinCountLine2."Count Confirmed" := TRUE;
          END;

          IF (NOT BinCountLine2."Count Confirmed") AND
             (NOT BinCountLine2."Count Registered")
          THEN BEGIN
            BinCountLine2."Units Counted" := UnitsActual;
            BinCountLine2."Cost Counted" := CostActual;
            BinCountLine2."Opp. Cost Counted" := OppCostActual;
            BinCountLine2."Unit Count Variance" := UnitsActual - BinCountLine2."Units Expected";
            BinCountLine2."Cost Count Variance" := CostActual - BinCountLine2."Cost Expected";
            BinCountLine2."Opp. Cost Variance" := OppCostActual - BinCountLine2."Opp. Cost Expected";
            IF BinCountLine2."Units Expected" <> 0 THEN
              BinCountLine2."Unit Count Pct. Variance" :=
                (BinCountLine2."Unit Count Variance" /
                  BinCountLine2."Units Expected") * 100;

            IF BinCountLine2."Cost Expected" <> 0 THEN
              BinCountLine2."Cost Count Pct. Variance" :=
                (BinCountLine2."Cost Count Variance" /
                  BinCountLine2."Cost Expected") * 100;

            IF BinCountLine2."Opp. Cost Expected" <> 0 THEN
              BinCountLine2."Opp. Cost Pct. Variance" :=
                (BinCountLine2."Opp. Cost Variance" /
                  BinCountLine2."Opp. Cost Expected") * 100;
          END;

          BinCountLine2.MODIFY;
        END;
      END;
    END;

    [External]
    PROCEDURE SetActualHeaderValues@1240020011(BinCountNo@1240020013 : Code[20]);
    VAR
      BinCount@1240020012 : Record 14002580;
      BinCountLine@1240020011 : Record 14002581;
      TotalUnitsActual@1240020007 : Decimal;
      TotalCostActual@1240020006 : Decimal;
      TotalOppCostActual@1240020005 : Decimal;
      TotalBinCount@1240020004 : Integer;
      TotalBinVariance@1240020003 : Integer;
      TotalBinsAudited@1240020002 : Integer;
      TotalCountsConfirmed@1240020001 : Integer;
      TotalCountsCorrected@1240020000 : Integer;
    BEGIN
      IF BinCount.GET(BinCountNo) THEN BEGIN
        BinCountLine.RESET;
        BinCountLine.SETRANGE("Bin Count No.",BinCount."Bin Count No.");
        BinCountLine.SETRANGE("Count Initiated",TRUE);
        IF BinCountLine.FINDSET(FALSE) THEN BEGIN
          CLEAR(TotalUnitsActual);
          CLEAR(TotalCostActual);
          CLEAR(TotalOppCostActual);
          CLEAR(TotalBinCount);
          CLEAR(TotalBinVariance);
          CLEAR(TotalBinsAudited);
          CLEAR(TotalCountsConfirmed);
          CLEAR(TotalCountsCorrected);
          REPEAT
            TotalUnitsActual += BinCountLine."Units Counted";
            TotalCostActual += BinCountLine."Cost Counted";
            TotalOppCostActual += BinCountLine."Opp. Cost Counted";
            TotalBinCount += 1;
            IF BinCountLine."Unit Count Variance" <> 0 THEN
              TotalBinVariance += 1;
            IF BinCountLine."Audit Performed" THEN BEGIN
              TotalBinsAudited += 1;
              IF BinCountLine."Count Confirmed" THEN
                TotalCountsConfirmed += 1;
              IF BinCountLine."Count Corrected" THEN
                TotalCountsCorrected += 1;
            END;
          UNTIL BinCountLine.NEXT = 0;
          BinCount."Total Units Counted" := TotalUnitsActual;
          BinCount."Total Cost Counted" := TotalCostActual;
          BinCount."Total Opp. Cost Counted" := TotalOppCostActual;
          BinCount."Total Bins Counted" := TotalBinCount;
          BinCount."Total Bins with Variances" := TotalBinVariance;
          BinCount."Total Bin Counts Audited" := TotalBinsAudited;
          BinCount."Total Bin Counts Confirmed" := TotalCountsConfirmed;
          BinCount."Total Bin Counts Corrected" := TotalCountsCorrected;
        END;

        BinCount."Total Unit Count Variance" :=
          BinCount."Total Units Counted" - BinCount."Total Units Expected";
        BinCount."Total Cost Count Variance" :=
          BinCount."Total Cost Counted" - BinCount."Total Cost Expected";
        BinCount."Total Opp. Cost Variance" :=
          BinCount."Total Opp. Cost Counted" - BinCount."Total Opp. Cost Expected";

        IF BinCount."Total Bins in Warehouse" <> 0 THEN
          BinCount."Pct. of Warehouse Counted" :=
            (BinCount."Total Bins Counted" /
              BinCount."Total Bins in Warehouse") * 100;

        IF BinCount."Total Bins Scheduled" <> 0 THEN
          BinCount."Pct. of Scheduled Bins Counted" :=
            (BinCount."Total Bins Counted" /
              BinCount."Total Bins Scheduled") * 100;

        IF BinCount."Total Bins Counted" <> 0 THEN
          BinCount."Pct. of Bins with Variances" :=
            (BinCount."Total Bins with Variances" /
              BinCount."Total Bins Counted") * 100;

        IF BinCount."Total Bins Scheduled" <> 0 THEN
          BinCount."Pct. of Bin Counts Audited" :=
            (BinCount."Total Bin Counts Audited" /
              BinCount."Total Bins Scheduled") * 100;

        IF BinCount."Total Bin Counts Audited" <> 0 THEN
          BinCount."Pct. of Bin Counts Confirmed" :=
            (BinCount."Total Bin Counts Confirmed" /
              BinCount."Total Bin Counts Audited") * 100;

        IF BinCount."Total Bin Counts Audited" <> 0 THEN
          BinCount."Pct. of Bin Counts Corrected" :=
            (BinCount."Total Bin Counts Corrected" /
              BinCount."Total Bin Counts Audited") * 100;

        BinCount.MODIFY;
      END;
    END;

    [External]
    PROCEDURE CalculateActualValues@1240020021(BinCountLine@1240020000 : Record 14002581;VAR UnitsActual@1240020001 : Decimal;VAR CostActual@1240020002 : Decimal;VAR OppCostActual@1240020003 : Decimal);
    VAR
      WhseJournalLine@1240020004 : Record 7311;
      WhseEntry@1240020008 : Record 7312;
      WhseEntry2@1240020009 : Record 7312;
      CustomValuesSet@1240020005 : Boolean;
      UnitCost@1240020006 : Decimal;
      UnitPrice@1240020007 : Decimal;
    BEGIN
      CLEAR(UnitsActual);
      CLEAR(CostActual);
      CLEAR(OppCostActual);

      CalculateCustomActualValues(
        BinCountLine,UnitsActual,CostActual,OppCostActual,CustomValuesSet);

      IF NOT CustomValuesSet THEN BEGIN
        IF NOT BinCountLine."Count Registered" THEN BEGIN
          WhseJournalLine.RESET;
          WhseJournalLine.SETCURRENTKEY(
            "Journal Template Name","Journal Batch Name","Location Code","Bin Code");
          WhseJournalLine.SETRANGE("Journal Batch Name",BinCountLine."Batch No.");
          WhseJournalLine.SETRANGE("Location Code",BinCountLine."Location Code");
          WhseJournalLine.SETRANGE("Bin Code",BinCountLine."Bin Code");
          IF WhseJournalLine.FINDSET(FALSE) THEN
            REPEAT
              CLEAR(UnitCost);
              CLEAR(UnitPrice);
              UnitCost := CalculateUnitCost(WhseJournalLine);
              UnitPrice := CalculateUnitPrice(WhseJournalLine);

              UnitsActual += WhseJournalLine."Qty. (Phys. Inventory) (Base)";
              CostActual += UnitCost * WhseJournalLine."Qty. (Phys. Inventory) (Base)";
              IF UnitPrice = 0 THEN
                OppCostActual += UnitCost * WhseJournalLine."Qty. (Phys. Inventory) (Base)"
              ELSE
                OppCostActual += UnitPrice * WhseJournalLine."Qty. (Phys. Inventory) (Base)";
            UNTIL WhseJournalLine.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE CalculateUnitCost@1240020016(WhseJournalLine@1240020000 : Record 7311) : Decimal;
    VAR
      Item@1240020004 : Record 27;
      StockkeepingUnit@1240020003 : Record 5700;
      GLSetup@1240020002 : Record 98;
      UnitCost@1240020001 : Decimal;
    BEGIN
      GLSetup.GET;
      IF NOT Item.GET(WhseJournalLine."Item No.") THEN
        EXIT(0);

      IF StockkeepingUnit.GET(
        WhseJournalLine."Location Code",WhseJournalLine."Item No.",WhseJournalLine."Variant Code")
      THEN
        UnitCost := StockkeepingUnit."Unit Cost"
      ELSE
        UnitCost := Item."Unit Cost";

      IF Item."Costing Method" <> Item."Costing Method"::Standard THEN
        UnitCost := ROUND(UnitCost,GLSetup."Unit-Amount Rounding Precision");

      EXIT(UnitCost);
    END;

    LOCAL PROCEDURE CalculateUnitPrice@1240020017(WhseJournalLine@1240020000 : Record 7311) : Decimal;
    VAR
      Item@1240020004 : Record 27;
      UnitPrice@1240020001 : Decimal;
    BEGIN
      IF Item.GET(WhseJournalLine."Item No.") THEN
        UnitPrice := Item."Unit Price";

      EXIT(UnitPrice);
    END;

    [External]
    PROCEDURE CompleteCount@1240020031(BinCount@1240020000 : Record 14002580);
    VAR
      BinCount2@1240020002 : Record 14002580;
      BinCountLine@1240020001 : Record 14002581;
    BEGIN
      BinCountLine.RESET;
      BinCountLine.SETRANGE("Bin Count No.",BinCount."Bin Count No.");
      BinCountLine.SETRANGE("Count Performed",FALSE);
      IF NOT BinCountLine.ISEMPTY THEN
        ERROR(Text011);

      IF BinCount.Status = BinCount.Status::"Pending Register" THEN
        IF BinCount."Marked for Register" THEN BEGIN
          IF BinCount."Count Type" <> BinCount."Count Type"::"Audited Count"
          THEN BEGIN
            BinCountLine.RESET;
            BinCountLine.SETRANGE("Bin Count No.",BinCount."Bin Count No.");
            BinCountLine.SETRANGE("Count Performed",TRUE);
            BinCountLine.SETRANGE("Count Registered",FALSE);
            IF BinCountLine.FINDSET(FALSE) THEN
              REPEAT
                IF BinCountLine."Empty Bin Confirmed" THEN BEGIN
                  IF NOT BinCountLine."Count Registered" THEN
                    LineCountRegistered(BinCountLine."Bin Count No.",BinCountLine."Bin Code",
                      BinCountLine."Zone Code",BinCountLine."Location Code",
                      BinCountLine."Count User ID",TRUE);
                END ELSE BEGIN
                  IF WhseJournalRegister(BinCount."Journal Template Name",
                    BinCountLine."Batch No.",BinCountLine."Location Code")
                  THEN
                    LineCountRegistered(BinCountLine."Bin Count No.",BinCountLine."Bin Code",
                      BinCountLine."Zone Code",BinCountLine."Location Code",
                      BinCountLine."Count User ID",TRUE);
                END;
              UNTIL BinCountLine.NEXT = 0;
          END;

          IF BinCount."Count Type" = BinCount."Count Type"::"Audited Count" THEN BEGIN
            IF WhseJournalRegister(BinCount."Journal Template Name",
              BinCount."Journal Batch Name",BinCount."Location Code")
            THEN BEGIN
              BinCountLine.RESET;
              BinCountLine.SETRANGE("Bin Count No.",BinCount."Bin Count No.");
              BinCountLine.SETRANGE("Count Performed",TRUE);
              BinCountLine.SETRANGE("Count Registered",FALSE);
              IF BinCountLine.FINDSET(FALSE) THEN
                REPEAT
                  LineCountRegistered(BinCountLine."Bin Count No.",BinCountLine."Bin Code",
                    BinCountLine."Zone Code",BinCountLine."Location Code",
                    BinCountLine."Count User ID",TRUE);
                UNTIL BinCountLine.NEXT = 0;
            END ELSE BEGIN
              BinCountLine.RESET;
              BinCountLine.SETRANGE("Bin Count No.",BinCount."Bin Count No.");
              BinCountLine.SETRANGE("Empty Bin Confirmed",TRUE);
              BinCountLine.SETRANGE("Count Performed",TRUE);
              BinCountLine.SETRANGE("Count Registered",FALSE);
              IF BinCountLine.FINDSET(FALSE) THEN
                REPEAT
                  LineCountRegistered(BinCountLine."Bin Count No.",BinCountLine."Bin Code",
                    BinCountLine."Zone Code",BinCountLine."Location Code",
                    BinCountLine."Count User ID",TRUE);
                UNTIL BinCountLine.NEXT = 0;
            END;
          END;
        END;

      BinCountLine.RESET;
      BinCountLine.SETRANGE("Bin Count No.",BinCount."Bin Count No.");
      BinCountLine.SETRANGE("Count Registered",FALSE);
      IF NOT BinCountLine.ISEMPTY THEN
        ERROR(Text012);

      BinCountLine.RESET;
      BinCountLine.SETRANGE("Bin Count No.",BinCount."Bin Count No.");
      BinCountLine.SETRANGE("Count Registered",TRUE);
      IF BinCountLine.FINDSET(FALSE) THEN
        REPEAT
          UpdateBinLastCountDate(BinCountLine."Location Code",BinCountLine."Bin Code",
            BinCountLine."Count Registered Date",BinCountLine."Count Registered DateTime");
        UNTIL BinCountLine.NEXT = 0;

      IF BinCount2.GET(BinCount."Bin Count No.") THEN BEGIN
        BinCount2.Status := BinCount2.Status::Complete;
        BinCount2."Completion Date" := TODAY;
        BinCount2."Completion Time" := TIME;
        BinCount2."Completion Date/Time" := CURRENTDATETIME;
        BinCount2.MODIFY;
      END;
    END;

    [External]
    PROCEDURE ArchiveCount@1240020032(BinCount@1240020000 : Record 14002580);
    VAR
      BinCount2@1240020002 : Record 14002580;
      BinCountLine@1240020001 : Record 14002581;
      BinCountArchive@1240020003 : Record 14002588;
      BinCountLineArchive@1240020004 : Record 14002589;
    BEGIN
      IF NOT BinCount2.GET(BinCount."Bin Count No.") THEN
        ERROR(Text003);

      IF BinCount2.Status <> BinCount2.Status::Complete THEN
        ERROR(Text024);

      BinCountArchive.RESET;
      IF NOT BinCountArchive.GET(BinCount2."Bin Count No.") THEN BEGIN
        BinCountArchive.TRANSFERFIELDS(BinCount2);
        BinCountArchive.INSERT(TRUE);

        BinCountLine.RESET;
        BinCountLine.SETRANGE("Bin Count No.",BinCount2."Bin Count No.");
        IF BinCountLine.FINDSET(FALSE) THEN
          REPEAT
            BinCountLineArchive.RESET;
            IF NOT BinCountLineArchive.GET(
                BinCountLine."Bin Count No.",BinCountLine."Bin Code",
                BinCountLine."Zone Code",BinCountLine."Location Code")
            THEN BEGIN
              BinCountLineArchive.TRANSFERFIELDS(BinCountLine);
              BinCountLineArchive.INSERT(TRUE);
            END;
          UNTIL BinCountLine.NEXT = 0;

        BinCount2.DELETE(TRUE);
      END;
    END;

    [External]
    PROCEDURE WhseJournalRegister@1240020026(JournalTemplateName@1240020000 : Code[10];JournalBatchName@1240020001 : Code[10];LocationCode@1240020002 : Code[10]) : Boolean;
    VAR
      WhseJournalBatch@1240020003 : Record 7310;
      WhseJournalLine@1240020004 : Record 7311;
      WhseRegister@1240020005 : Record 7313;
      SourceCodeSetup@1240020006 : Record 242;
    BEGIN
      WhseJournalBatch.RESET;
      IF WhseJournalBatch.GET(JournalTemplateName,JournalBatchName,LocationCode) THEN BEGIN
        WhseJournalLine.RESET;
        WhseJournalLine.SETRANGE(
          "Journal Template Name",WhseJournalBatch."Journal Template Name");
        WhseJournalLine.SETRANGE("Journal Batch Name",WhseJournalBatch.Name);
        WhseJournalLine.SETRANGE("Location Code",WhseJournalBatch."Location Code");
        IF NOT WhseJournalLine.FIND('-') THEN
          EXIT(FALSE);

        IF CODEUNIT.RUN(CODEUNIT::"Whse. Jnl.-Register Batch",WhseJournalLine) THEN
          EXIT(TRUE);
      END ELSE BEGIN
        SourceCodeSetup.GET;
        WhseRegister.RESET;
        WhseRegister.SETRANGE("Source Code",SourceCodeSetup."Whse. Phys. Invt. Journal");
        WhseRegister.SETRANGE("Journal Batch Name",JournalBatchName);
        IF NOT WhseRegister.ISEMPTY THEN
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE UpdateBinLastCountDate@1240020028(LocationCode@1240020000 : Code[10];BinCode@1240020001 : Code[20];DateStamp@1240020002 : Date;DateTimeStamp@1240020003 : DateTime);
    VAR
      Bin@1240020004 : Record 7354;
    BEGIN
      Bin.RESET;
      IF Bin.GET(LocationCode,BinCode) THEN BEGIN
        Bin."Last Counted Date" := DateStamp;
        Bin."Last Counted DateTime" := DateTimeStamp;
        Bin.MODIFY;
      END;
    END;

    [External]
    PROCEDURE RefreshCountValues@1240020035(BinCount@1240020000 : Record 14002580);
    VAR
      BinCountLine@1240020001 : Record 14002581;
    BEGIN
      IF (BinCount.Status = BinCount.Status::Created) OR
          (BinCount.Status = BinCount.Status::Complete)
      THEN
        ERROR(Text013);

      BinCountLine.RESET;
      BinCountLine.SETRANGE("Bin Count No.",BinCount."Bin Count No.");
      IF BinCountLine.FINDSET(FALSE) THEN BEGIN
        REPEAT
          IF BinCountLine."Count Initiated" THEN
            SetExpectedLineValues(BinCountLine);
          IF BinCountLine."Count Performed" THEN
            SetActualLineValues(BinCountLine);
        UNTIL BinCountLine.NEXT = 0;

        SetExpectedHeaderValues(BinCount."Bin Count No.");
        SetActualHeaderValues(BinCount."Bin Count No.");
      END;
    END;

    [External]
    PROCEDURE RefreshCountLineValues@1240020036(VAR BinCountLine@1240020000 : Record 14002581);
    VAR
      BinCount@1240020001 : Record 14002580;
    BEGIN
      WITH BinCountLine DO BEGIN
        IF BinCount.GET(BinCountLine."Bin Count No.") THEN
          IF (BinCount.Status = BinCount.Status::Created) OR
              (BinCount.Status = BinCount.Status::Complete)
          THEN
            ERROR(Text013);

        REPEAT
          IF BinCountLine."Count Initiated" THEN BEGIN
            SetExpectedLineValues(BinCountLine);
            SetExpectedHeaderValues(BinCountLine."Bin Count No.");
          END;

          IF BinCountLine."Count Performed" THEN BEGIN
            SetActualLineValues(BinCountLine);
            SetActualHeaderValues(BinCountLine."Bin Count No.");
          END;
        UNTIL BinCountLine.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE ResetBinCount@1240020037(BinCount@1240020001 : Record 14002580);
    VAR
      BinCount2@1240020000 : Record 14002580;
      BinCount3@1240020005 : Record 14002580;
      BinCountLine@1240020004 : Record 14002581;
    BEGIN
      IF (BinCount.Status = BinCount.Status::"Pending Completion") OR
          (BinCount.Status = BinCount.Status::Complete)
      THEN
        ERROR(Text014);

      IF BinCount."Count Type" <> BinCount."Count Type"::"Audited Count" THEN
        ERROR(Text028);

      IF DeletePendingBinCounts(BinCount."Bin Count No.",BinCount."Location Code") THEN BEGIN
        IF BinCount2.GET(BinCount."Bin Count No.") THEN BEGIN
          BinCountLine.RESET;
          BinCountLine.SETRANGE("Bin Count No.",BinCount2."Bin Count No.");
          BinCountLine.SETRANGE("Count Initiated",TRUE);
          IF BinCountLine.FINDSET(FALSE) THEN
            REPEAT
              ResetBinCountLine(BinCountLine);
            UNTIL BinCountLine.NEXT = 0;

          BinCountLine.RESET;
          BinCountLine.SETRANGE("Bin Count No.",BinCount2."Bin Count No.");
          BinCountLine.SETRANGE("Count Initiated",TRUE);
          IF BinCountLine.ISEMPTY THEN
            IF BinCount3.GET(BinCount."Bin Count No.") THEN BEGIN
              BinCount3.Status := BinCount3.Status::Created;
              BinCount3."Journal Batch Name" := '';
              BinCount3."Started Date" := 0D;
              BinCount3."Started Time" := 0T;
              BinCount3."Started Date/Time" := 0DT;
              BinCount3."Finished Date" := 0D;
              BinCount3."Finished Time" := 0T;
              BinCount3."Finished Date/Time" := 0DT;
              BinCount3."Total Units Expected" := 0;
              BinCount3."Total Units Counted" := 0;
              BinCount3."Total Unit Count Variance" := 0;
              BinCount3."Total Cost Expected" := 0;
              BinCount3."Total Cost Counted" := 0;
              BinCount3."Total Cost Count Variance" := 0;
              BinCount3."Total Opp. Cost Expected" := 0;
              BinCount3."Total Opp. Cost Counted" := 0;
              BinCount3."Total Opp. Cost Variance" := 0;
              BinCount3."Total Bins in Warehouse" := 0;
              BinCount3."Total Bins Scheduled" := 0;
              BinCount3."Total Bins Counted" := 0;
              BinCount3."Pct. of Scheduled Bins Counted" := 0;
              BinCount3."Total Bins with Variances" := 0;
              BinCount3."Pct. of Bins with Variances" := 0;
              BinCount3."Total Bin Counts Audited" := 0;
              BinCount3."Total Bin Counts Confirmed" := 0;
              BinCount3."Total Bin Counts Corrected" := 0;
              BinCount3."Pct. of Bin Counts Audited" := 0;
              BinCount3."Pct. of Bin Counts Confirmed" := 0;
              BinCount3."Pct. of Bin Counts Corrected" := 0;
              BinCount3.MODIFY(TRUE);
            END;
        END;
      END;
    END;

    [External]
    PROCEDURE ResetBinCountLine@1240020030(VAR BinCountLine@1240020000 : Record 14002581);
    VAR
      BinCount@1240020004 : Record 14002580;
      BinCount2@1240020006 : Record 14002580;
      BinCountLine2@1240020001 : Record 14002581;
      BinCountLine3@1240020007 : Record 14002581;
      WhseJournalBatch@1240020002 : Record 7310;
      WhseJournalLine@1240020003 : Record 7311;
      Bin@1240020005 : Record 7354;
    BEGIN
      IF NOT BinCount.GET(BinCountLine."Bin Count No.") THEN
        ERROR(Text003);

      IF (BinCount.Status = BinCount.Status::"Pending Completion") OR
         (BinCount.Status = BinCount.Status::Complete)
      THEN
        ERROR(Text014);

      REPEAT
        BinCountLine2.RESET;
        IF BinCountLine2.GET(BinCountLine."Bin Count No.",BinCountLine."Bin Code",
          BinCountLine."Zone Code",BinCountLine."Location Code")
        THEN BEGIN
          IF (BinCount."Count Type" = BinCount."Count Type"::"Audited Count") OR
              ((BinCount."Count Type" <> BinCount."Count Type"::"Audited Count") AND
              (NOT BinCountLine."Count Registered"))
          THEN BEGIN
            IF BinCount."Journal Batch Name" = BinCountLine2."Batch No." THEN BEGIN
              WhseJournalBatch.RESET;
              IF WhseJournalBatch.GET(BinCount."Journal Template Name",
                BinCount."Journal Batch Name",BinCount."Location Code")
              THEN BEGIN
                WhseJournalLine.RESET;
                WhseJournalLine.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Location Code","Bin Code");
                WhseJournalLine.SETRANGE("Journal Template Name",WhseJournalBatch."Journal Template Name");
                WhseJournalLine.SETRANGE("Journal Batch Name",WhseJournalBatch.Name);
                WhseJournalLine.SETRANGE("Location Code",WhseJournalBatch."Location Code");
                WhseJournalLine.SETRANGE("Bin Code",BinCountLine2."Bin Code");
                IF WhseJournalLine.FINDSET(FALSE) THEN
                  REPEAT
                    WhseJournalLine.DELETE(TRUE);
                  UNTIL WhseJournalLine.NEXT = 0;

                WhseJournalLine.RESET;
                WhseJournalLine.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Location Code","Line No.");
                WhseJournalLine.SETRANGE("Journal Template Name",WhseJournalBatch."Journal Template Name");
                WhseJournalLine.SETRANGE("Journal Batch Name",WhseJournalBatch.Name);
                WhseJournalLine.SETRANGE("Location Code",WhseJournalBatch."Location Code");
                IF WhseJournalLine.ISEMPTY THEN
                  IF WhseJournalBatch."Delete Batch after Post" THEN
                    IF NOT WhseJournalBatch.DELETE(TRUE) THEN
                      ERROR(Text015);
              END;
            END ELSE BEGIN
              WhseJournalBatch.RESET;
              IF WhseJournalBatch.GET(BinCount."Journal Template Name",
                BinCount."Journal Batch Name",BinCount."Location Code")
              THEN
                IF WhseJournalBatch."Delete Batch after Post" THEN
                  IF NOT WhseJournalBatch.DELETE(TRUE) THEN
                    ERROR(Text015);
            END;

            WhseJournalLine.RESET;
            WhseJournalLine.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Location Code","Bin Code");
            WhseJournalLine.SETRANGE("Journal Template Name",BinCount."Journal Template Name");
            WhseJournalLine.SETRANGE("Journal Batch Name",BinCountLine2."Batch No.");
            WhseJournalLine.SETRANGE("Location Code",BinCountLine2."Location Code");
            WhseJournalLine.SETRANGE("Bin Code",BinCountLine2."Bin Code");
            IF WhseJournalLine.ISEMPTY THEN BEGIN
              IF BinCountLine3.GET(BinCountLine2."Bin Count No.",BinCountLine2."Bin Code",
                BinCountLine2."Zone Code",BinCountLine2."Location Code")
              THEN BEGIN
                IF Bin.GET(BinCountLine3."Location Code",BinCountLine3."Bin Code") THEN
                  IF Bin.Empty THEN
                    BinCountLine3."Empty Bin" := TRUE;

                BinCountLine3."Batch No." := '';
                BinCountLine3."Assigned User ID" := '';
                BinCountLine3."Count User ID" := '';
                BinCountLine3."Count Marked for Register" := FALSE;
                BinCountLine3."Count Marked for Audit" := FALSE;
                BinCountLine3."Count Initiated" := FALSE;
                BinCountLine3."Count Initiated Date" := 0D;
                BinCountLine3."Count Initiated Time" := 0T;
                BinCountLine3."Count Initiated Date/Time" := 0DT;
                BinCountLine3."Count Performed" := FALSE;
                BinCountLine3."Count Performed Date" := 0D;
                BinCountLine3."Count Performed Time" := 0T;
                BinCountLine3."Count Performed DateTime" := 0DT;
                BinCountLine3."Count Registered" := FALSE;
                BinCountLine3."Count Registered Date" := 0D;
                BinCountLine3."Count Registered Time" := 0T;
                BinCountLine3."Count Registered DateTime" := 0DT;
                BinCountLine3."Audited User ID" := '';
                BinCountLine3."Audit Initiated" := FALSE;
                BinCountLine3."Audit Initiated Date" := 0D;
                BinCountLine3."Audit Initiated Time" := 0T;
                BinCountLine3."Audit Initiated Date/Time" := 0DT;
                BinCountLine3."Audit Performed" := FALSE;
                BinCountLine3."Audit Performed Date" := 0D;
                BinCountLine3."Audit Performed Time" := 0T;
                BinCountLine3."Audit Performed DateTime" := 0DT;
                BinCountLine3."Count Confirmed" := FALSE;
                BinCountLine3."Count Corrected" := FALSE;
                BinCountLine3."Empty Bin Confirmed" := FALSE;
                BinCountLine3."Units Expected" := 0;
                BinCountLine3."Units Counted" := 0;
                BinCountLine3."Unit Count Variance" := 0;
                BinCountLine3."Unit Count Pct. Variance" := 0;
                BinCountLine3."Cost Expected" := 0;
                BinCountLine3."Cost Counted" := 0;
                BinCountLine3."Cost Count Variance" := 0;
                BinCountLine3."Cost Count Pct. Variance" := 0;
                BinCountLine3."Opp. Cost Expected" := 0;
                BinCountLine3."Opp. Cost Counted" := 0;
                BinCountLine3."Opp. Cost Variance" := 0;
                BinCountLine3."Opp. Cost Pct. Variance" := 0;
                BinCountLine3.MODIFY(TRUE);
              END;
            END;
          END;
        END;

        BinCountLine2.RESET;
        BinCountLine2.SETRANGE("Bin Count No.",BinCountLine."Bin Count No.");
        BinCountLine2.SETRANGE("Count Initiated",TRUE);
        IF BinCountLine2.ISEMPTY THEN
          IF BinCount2.GET(BinCountLine2."Bin Count No.") THEN BEGIN
            BinCount2."Journal Batch Name" := '';
            BinCount2.MODIFY(TRUE);
          END;
      UNTIL BinCountLine.NEXT = 0;
    END;

    [External]
    PROCEDURE DeletePendingBinCounts@1240020007(BinCountNo@1240020000 : Code[20];LocationCode@1240020002 : Code[10]) : Boolean;
    VAR
      BinCount@1240020001 : Record 14002580;
      BinCountLine@1240020003 : Record 14002581;
      WhseJournalBatch@1240020004 : Record 7310;
    BEGIN
      IF BinCount.GET(BinCountNo) THEN BEGIN
        IF BinCount."Count Type" = BinCount."Count Type"::"Audited Count" THEN BEGIN
          WhseJournalBatch.RESET;
          IF WhseJournalBatch.GET(
            BinCount."Journal Template Name",BinCount."Journal Batch Name",BinCount."Location Code")
          THEN
            IF WhseJournalBatch."Delete Batch after Post" THEN

              IF NOT WhseJournalBatch.DELETE(TRUE) THEN
                EXIT(FALSE);
        END ELSE BEGIN
          BinCountLine.RESET;
          BinCountLine.SETRANGE("Bin Count No.",BinCount."Bin Count No.");
          IF BinCountLine.FINDSET(FALSE) THEN BEGIN
            REPEAT
              WhseJournalBatch.RESET;
              WhseJournalBatch.SETRANGE("Journal Template Name",BinCount."Journal Template Name");
              WhseJournalBatch.SETRANGE(Name,BinCountLine."Batch No.");
              WhseJournalBatch.SETRANGE("Location Code",BinCount."Location Code");
              IF WhseJournalBatch.FINDSET(FALSE) THEN
                IF WhseJournalBatch."Delete Batch after Post" THEN
                  IF NOT WhseJournalBatch.DELETE(TRUE) THEN
                    EXIT(FALSE);
            UNTIL BinCountLine.NEXT = 0;
          END;
        END;
      END;

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE DeleteUnscheduledBinCount@1240020039(BinCountNo@1240020001 : Code[20]);
    VAR
      BinCount@1240020002 : Record 14002580;
    BEGIN
      IF BinCount.GET(BinCountNo) THEN BEGIN
        IF (BinCount."Count Type" = BinCount."Count Type"::"Ad Hoc Count") OR
           (BinCount."Count Type" = BinCount."Count Type"::"Triggered Count")
        THEN
          IF BinCount.Status <> BinCount.Status::Complete THEN
            BinCount.DELETE(TRUE);
      END;
    END;

    [Integration]
    LOCAL PROCEDURE CustomPassBinAnalysis@1240020042(BinCount@1240020003 : Record 14002580;BinCountTemplate@1240020002 : Record 14002582;Location@1240020001 : Record 14;BinCode@1240020000 : Code[20];VAR IgnoreBin@1240020004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE CalculateCustomExpectedValues@1240020040(BinCountLine@1240020003 : Record 14002581;VAR UnitsExpected@1240020002 : Decimal;VAR CostExpected@1240020001 : Decimal;VAR OppCostExpected@1240020000 : Decimal;VAR CustomValuesSet@1240020004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE CalculateCustomActualValues@1240020041(BinCountLine@1240020003 : Record 14002581;VAR UnitsActual@1240020002 : Decimal;VAR CostActual@1240020001 : Decimal;VAR OppCostActual@1240020000 : Decimal;VAR CustomValuesSet@1240020004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE CheckCustomCriteriaForAudit@1240020043(BinCountLine@1240020000 : Record 14002581);
    BEGIN
    END;

    BEGIN
    END.
  }
}

