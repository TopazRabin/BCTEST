OBJECT Codeunit 50020 Item Management
{
  OBJECT-PROPERTIES
  {
    Date=09/24/21;
    Time=[ 7:16:50 AM];
    Modified=Yes;
    Version List=TPZ000.00.00,001,TPZ3111,3358;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text0001@1000000000 : TextConst 'ENU=%1 must not be blank.';
      Text0002@1000000001 : TextConst 'ENU=%1 Must be Checked';

    PROCEDURE CheckItem@1000000001(VAR Item@1000000000 : Record 27;ShowErrorMsg@1000000001 : Boolean) : Boolean;
    VAR
      ErrorMsgLine@1000000002 : TEMPORARY Record 97;
      ErrorMsgPage@1000000003 : Page 50020;
    BEGIN
      //Return True if item has all mandatory fields
      //Return False if item has one or more missing mandatory fields.

      CheckMissingMandatoryFields(Item, ErrorMsgLine);

      IF ShowErrorMsg AND (ErrorMsgLine.COUNT > 0) THEN BEGIN
        ErrorMsgPage.SetSource(ErrorMsgLine);
        ErrorMsgPage.RUNMODAL;
      END;

      ErrorMsgLine.RESET;
      EXIT(ErrorMsgLine.COUNT = 0);
    END;

    PROCEDURE CheckMissingMandatoryFields@1000000000(VAR Item@1000000000 : Record 27;VAR ErrorMsgLine@1000000001 : TEMPORARY Record 97);
    VAR
      LineNo@1000000003 : Integer;
      ItemCategory@1000000002 : Record 5722;
      ItemAttributeValueMapping@1000000004 : Record 7505;
    BEGIN
      LineNo := 0;


      //Description
      IF Item.Description = '' THEN BEGIN
        LineNo += 1;
        ErrorMsgLine."Line No." := LineNo;
        ErrorMsgLine.Comment := STRSUBSTNO(Text0001, Item.FIELDCAPTION(Description));
        ErrorMsgLine.INSERT;
      END ELSE BEGIN
        IF STRPOS(Item.Description, '*') > 0 THEN BEGIN
          LineNo += 1;
          ErrorMsgLine."Line No." := LineNo;
          ErrorMsgLine.Comment := STRSUBSTNO('%1 field must not contain *', Item.FIELDCAPTION(Description));
          ErrorMsgLine.INSERT;
        END;
      END;

      //Base Unit of Measure
      IF Item."Base Unit of Measure" = '' THEN BEGIN
        LineNo += 1;
        ErrorMsgLine."Line No." := LineNo;
        ErrorMsgLine.Comment := STRSUBSTNO(Text0001, Item.FIELDCAPTION("Base Unit of Measure"));
        ErrorMsgLine.INSERT;
      END;
      //<TPZ2498>
      //HSN/Traiff No.
      IF Item."Tariff No." = '' THEN BEGIN
        LineNo += 1;
        ErrorMsgLine."Line No." := LineNo;
        ErrorMsgLine.Comment := STRSUBSTNO(Text0001, Item.FIELDCAPTION("Tariff No." ));
        ErrorMsgLine.INSERT;
      END;
      //</TPZ2498>
      //Alt. Unit of Measure
      IF Item."Alt. Base Unit of Measure" = '' THEN BEGIN
        LineNo += 1;
        ErrorMsgLine."Line No." := LineNo;
        ErrorMsgLine.Comment := STRSUBSTNO(Text0001, Item.FIELDCAPTION("Alt. Base Unit of Measure"));
        ErrorMsgLine.INSERT;
      END;

      //Item Category Code
      IF Item."Item Category Code" = '' THEN BEGIN
        LineNo += 1;
        ErrorMsgLine."Line No." := LineNo;
        ErrorMsgLine.Comment := STRSUBSTNO(Text0001, Item.FIELDCAPTION("Item Category Code"));
        ErrorMsgLine.INSERT;
      END;

      //Product Group Code
      IF Item."Product Group Code" = '' THEN BEGIN
        LineNo += 1;
        ErrorMsgLine."Line No." := LineNo;
        ErrorMsgLine.Comment := STRSUBSTNO(Text0001, Item.FIELDCAPTION("Product Group Code"));
        ErrorMsgLine.INSERT;
      END;

      //Manuacturer Code
      IF Item."Manufacturer Code" = '' THEN BEGIN
        LineNo += 1;
        ErrorMsgLine."Line No." := LineNo;
        ErrorMsgLine.Comment := STRSUBSTNO(Text0001, Item.FIELDCAPTION("Manufacturer Code"));
        ErrorMsgLine.INSERT;
      END;

      //Division Code
      IF Item."Shortcut Dimension 5 Code" = '' THEN BEGIN
        LineNo += 1;
        ErrorMsgLine."Line No." := LineNo;
        ErrorMsgLine.Comment := STRSUBSTNO(Text0001, Item.FIELDCAPTION("Shortcut Dimension 5 Code"));
        ErrorMsgLine.INSERT;
      END;

      //Gen. Prod. Posting Group
      IF Item."Gen. Prod. Posting Group" = '' THEN BEGIN
        LineNo += 1;
        ErrorMsgLine."Line No." := LineNo;
        ErrorMsgLine.Comment := STRSUBSTNO(Text0001, Item.FIELDCAPTION("Gen. Prod. Posting Group"));
        ErrorMsgLine.INSERT;
      END;

      //Inventory Posting Group
      IF (Item."Inventory Posting Group" = '') AND (Item.Type<>Item.Type :: Service) THEN BEGIN //<TPZ2482>
        LineNo += 1;
        ErrorMsgLine."Line No." := LineNo;
        ErrorMsgLine.Comment := STRSUBSTNO(Text0001, Item.FIELDCAPTION("Inventory Posting Group"));
        ErrorMsgLine.INSERT;
      END;

      //Sales Unit of Measure
      IF Item."Sales Unit of Measure" = '' THEN BEGIN
        LineNo += 1;
        ErrorMsgLine."Line No." := LineNo;
        ErrorMsgLine.Comment := STRSUBSTNO(Text0001, Item.FIELDCAPTION("Sales Unit of Measure"));
        ErrorMsgLine.INSERT;
      END;

      //Alt. Sales Unit of Measure
      IF Item."Alt. Sales Unit of Measure" = '' THEN BEGIN
        LineNo += 1;
        ErrorMsgLine."Line No." := LineNo;
        ErrorMsgLine.Comment := STRSUBSTNO(Text0001, Item.FIELDCAPTION("Alt. Sales Unit of Measure"));
        ErrorMsgLine.INSERT;
      END;


      //Purch. Unit of Measure
      IF Item."Purch. Unit of Measure" = '' THEN BEGIN
        LineNo += 1;
        ErrorMsgLine."Line No." := LineNo;
        ErrorMsgLine.Comment := STRSUBSTNO(Text0001, Item.FIELDCAPTION("Purch. Unit of Measure"));
        ErrorMsgLine.INSERT;
      END;

      //Purch. Unit of Measure
      IF Item."Alt. Purch. Unit of Measure" = '' THEN BEGIN
        LineNo += 1;
        ErrorMsgLine."Line No." := LineNo;
        ErrorMsgLine.Comment := STRSUBSTNO(Text0001, Item.FIELDCAPTION("Alt. Purch. Unit of Measure"));
        ErrorMsgLine.INSERT;
      END;


      //ABC Code
      IF Item."ABC Code" = '' THEN BEGIN
        LineNo += 1;
        ErrorMsgLine."Line No." := LineNo;
        ErrorMsgLine.Comment := STRSUBSTNO(Text0001, Item.FIELDCAPTION("ABC Code"));
        ErrorMsgLine.INSERT;
      END;

      //Zero Inventory Value Check
      //<TPZ1708>
      ItemCategory.GET(Item."Item Category Code");
      IF (ItemCategory."Zero Inventory Cost") AND (Item."Inventory Value Zero"=FALSE) THEN BEGIN
        LineNo += 1;
        ErrorMsgLine."Line No." := LineNo;
        ErrorMsgLine.Comment := STRSUBSTNO(Text0002, Item.FIELDCAPTION("Inventory Value Zero"));
        ErrorMsgLine.INSERT;
      END;
      //</TPZ1708>

      //>>001 TPZ2906
      IF Item."Shortcut Dimension 5 Code" = 'L' THEN
      IF NOT ItemAttributeValueMapping.GET(27,Item."No.",1) THEN BEGIN
      //Table ID,No.,Item Attribute ID
        LineNo += 1;
        ErrorMsgLine."Line No." := LineNo;
        ErrorMsgLine.Comment := STRSUBSTNO(Text0001, '"Do Not Sell State" Attribute');
        ErrorMsgLine.INSERT;
      END;
      //<<001 TPZ2906

      {TPZ3358 Code commented
      //-->TPZ3111
      IF NOT ItemAttributeValueMapping.GET(27,Item."No.",1059) THEN BEGIN
      //Table ID,No.,Item Attribute ID
        LineNo += 1;
        ErrorMsgLine."Line No." := LineNo;
        ErrorMsgLine.Comment := STRSUBSTNO(Text0001, '"Visible in PIM" Attribute');
        ErrorMsgLine.INSERT;
      END;
      //<--TPZ3111
      }
    END;

    PROCEDURE CalcQtyAvailable@1000000002(VAR Item@1000000000 : Record 27) : Decimal;
    VAR
      QtyAvailable@1000000001 : Decimal;
    BEGIN
      //<TPZ>
      Item.CALCFIELDS(Item.Inventory, Item."Qty. on Sales Order", "Trans. Ord. Shipment (Qty.)");
      QtyAvailable := Item.Inventory - Item."Qty. on Sales Order" - Item."Trans. Ord. Shipment (Qty.)";

      //Remove Qty in RTV, MRB, Quality Hold from Available.
      Item.SETFILTER("Bin Filter", 'RTV|MRB|QA|QC');
      Item.CALCFIELDS("Qty. in Bin (Base)");
      QtyAvailable := QtyAvailable - Item."Qty. in Bin (Base)";
      Item.SETRANGE("Bin Filter");

      IF QtyAvailable < 0 THEN
        QtyAvailable := 0;
      EXIT(QtyAvailable);
      //</TPZ>
    END;

    PROCEDURE CalcEnterPriseInventory@1000000010(VAR Item@1000000000 : Record 27) : Decimal;
    VAR
      Location1@1000000001 : Record 14;
      EntPInventory@1000000002 : Decimal;
      WhseCreatePick@1000000003 : Codeunit 5778;
    BEGIN
      //<TPZ2590>
      EntPInventory :=0;
        Location1.RESET;
        Location1.SETRANGE("Shipping Location",TRUE);
        IF Location1.FINDSET THEN BEGIN
          REPEAT
            //Item.SETRANGE("Location Filter",Location1.Code);
            //Item.CALCFIELDS(Inventory);
            //EntPInventory := EntPInventory + Item.Inventory;
            EntPInventory := EntPInventory + WhseCreatePick.QtyAvailtoPick(Item."No.",Location1.Code);
          UNTIL Location1.NEXT=0;
        END;
        EXIT(EntPInventory);
      //</TPZ2590>
    END;

    PROCEDURE CalcMonthOfStock@1000000013(VAR Item@1000000000 : Record 27) : Decimal;
    VAR
      Location1@1000000001 : Record 14;
      EntPInventory@1000000002 : Decimal;
      WhseCreatePick@1000000003 : Codeunit 5778;
    BEGIN
      //<TPZ2590>
      EntPInventory :=0;
        Location1.RESET;
        Location1.SETRANGE("Shipping Location",TRUE);
        IF Location1.FINDSET THEN BEGIN
          REPEAT
           // Item.SETRANGE("Location Filter",Location1.Code);
            //Item.CALCFIELDS(Inventory);
            //EntPInventory := EntPInventory + Item.Inventory;
            EntPInventory := EntPInventory + WhseCreatePick.QtyAvailtoPick(Item."No.",Location1.Code);
          UNTIL Location1.NEXT=0;
        END;
        IF Item."Monthly Demand" <> 0 THEN
          EXIT(EntPInventory/Item."Monthly Demand")
        ELSE
          EXIT(0);
      //</TPZ2590>
    END;

    PROCEDURE CalcItemCustEnterPriseInventory@1000000004(VAR ItemCustAvailPrice@1000000000 : Record 50025) : Decimal;
    VAR
      Location1@1000000001 : Record 14;
      EntPInventory@1000000002 : Decimal;
      WhseCreatePick@1000000003 : Codeunit 5778;
      Item@1000000004 : Record 27;
    BEGIN
      //<TPZ2590>
      EntPInventory :=0;
      IF Item.GET(ItemCustAvailPrice."Item No.") THEN BEGIN
        Location1.RESET;
        Location1.SETRANGE("Shipping Location",TRUE);
        IF Location1.FINDSET THEN BEGIN
          REPEAT
            //Item.SETRANGE("Location Filter",Location1.Code);
            //Item.CALCFIELDS(Inventory);
            //EntPInventory := EntPInventory + Item.Inventory;
            EntPInventory := EntPInventory + WhseCreatePick.QtyAvailtoPick(Item."No.",Location1.Code);
          UNTIL Location1.NEXT=0;
        END;
        EXIT(EntPInventory);
      END;
      //</TPZ2590>
    END;

    PROCEDURE CalcItemCustMonthOfStock@1000000003(VAR ItemCustAvailPrice@1000000000 : Record 50025) : Decimal;
    VAR
      Location1@1000000001 : Record 14;
      EntPInventory@1000000002 : Decimal;
      WhseCreatePick@1000000003 : Codeunit 5778;
      Item@1000000004 : Record 27;
    BEGIN
      //<TPZ2590>
      EntPInventory :=0;
      IF Item.GET(ItemCustAvailPrice."Item No.") THEN BEGIN
        Location1.RESET;
        Location1.SETRANGE("Shipping Location",TRUE);
        IF Location1.FINDSET THEN BEGIN
          REPEAT
           // Item.SETRANGE("Location Filter",Location1.Code);
            //Item.CALCFIELDS(Inventory);
            //EntPInventory := EntPInventory + Item.Inventory;
            EntPInventory := EntPInventory + WhseCreatePick.QtyAvailtoPick(Item."No.",Location1.Code);
          UNTIL Location1.NEXT=0;
        END;
        IF Item."Monthly Demand" <> 0 THEN
          EXIT(EntPInventory/Item."Monthly Demand")
        ELSE
          EXIT(0);
      END;
      //</TPZ2590>
    END;

    PROCEDURE CalcItemSubsEnterPriseInventory@1000000005(ItemNo@1000000000 : Code[20]) : Decimal;
    VAR
      Location1@1000000001 : Record 14;
      EntPInventory@1000000002 : Decimal;
      WhseCreatePick@1000000003 : Codeunit 5778;
      Item@1000000004 : Record 27;
    BEGIN
      //<TPZ2590>
      EntPInventory :=0;
      IF Item.GET(ItemNo) THEN BEGIN
        Location1.RESET;
        Location1.SETRANGE("Shipping Location",TRUE);
        IF Location1.FINDSET THEN BEGIN
          REPEAT
            //Item.SETRANGE("Location Filter",Location1.Code);
            //Item.CALCFIELDS(Inventory);
            //EntPInventory := EntPInventory + Item.Inventory;
            EntPInventory := EntPInventory + WhseCreatePick.QtyAvailtoPick(ItemNo,Location1.Code);
          UNTIL Location1.NEXT=0;
        END;
        EXIT(EntPInventory);
      END;
      //</TPZ2590>
    END;

    PROCEDURE CalctemSubsMonthOfStock@1000000007(ItemNo@1000000000 : Code[20]) : Decimal;
    VAR
      Location1@1000000001 : Record 14;
      EntPInventory@1000000002 : Decimal;
      WhseCreatePick@1000000003 : Codeunit 5778;
      Item@1000000004 : Record 27;
    BEGIN
      //<TPZ2590>
      EntPInventory :=0;
      IF Item.GET(ItemNo) THEN BEGIN
        Location1.RESET;
        Location1.SETRANGE("Shipping Location",TRUE);
        IF Location1.FINDSET THEN BEGIN
          REPEAT
           // Item.SETRANGE("Location Filter",Location1.Code);
            //Item.CALCFIELDS(Inventory);
            //EntPInventory := EntPInventory + Item.Inventory;
            EntPInventory := EntPInventory + WhseCreatePick.QtyAvailtoPick(ItemNo,Location1.Code);
          UNTIL Location1.NEXT=0;
        END;
        IF Item."Monthly Demand" <> 0 THEN
          EXIT(EntPInventory/Item."Monthly Demand")
        ELSE
          EXIT(0);
      END;
      //</TPZ2590>
    END;

    BEGIN
    {
      2017-08-31 TPZ1708 EBAGIM
        Promo Item Processing - zero inventory value validation
      2019-02-15 TPZ2498 AKUMAR
        Traiff No. mandatory
      2019-06-21 TPZ2590 UCHOUHAN
        Added four new functions CalcEnterPriseInventory,CalcMonthOfStock,CalcItemCustEnterPriseInventory and CalcItemCustMonthOfStock.
      2019-06-28 TPZ2590 UCHOUHAN
        Added two new functions CalcItemSubsEnterPriseInventory and CalctemSubsMonthOfStock.
      2019-07-12 TPZ2482 UCHOUHAN
        Changes for OverWrap Sevice Item.
      001 TPZ2906 RPS 07292020 - Item Setup|  Make Attribute "Do Not Sell State" as Mandatory
      002 TPZ3111 PKS 03012021 - Added Visible in PIM validation on item creation
      003 TPZ3358 PKS 09212021 Removed visible in PIM on item creation
    }
    END.
  }
}

