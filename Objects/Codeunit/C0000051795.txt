OBJECT Codeunit 51795 Page42EventSubscriber
{
  OBJECT-PROPERTIES
  {
    Date=10/08/21;
    Time=[ 4:31:50 AM];
    Modified=Yes;
    Version List=NAVEVENT,TPZ2829,005;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Table36EventSubscribers@1000000004 : Codeunit 50078;

    [EventSubscriber(Codeunit,51800,Pg42_OnOPenPage)]
    PROCEDURE Pg42_OnOpenPage@1000000000(VAR Sender@1000000000 : Codeunit 51800;VAR Rec@1000000001 : Record 36;VAR OSRCSRISRMfrRepEditable@1000000005 : Boolean;VAR CommHdlgVisible@1000000006 : Boolean;VAR LocationCodeEditable@1000000007 : Boolean;VAR FreeFreightEditable@1000000008 : Boolean);
    VAR
      MFGFilter@1000000004 : Text;
      DIVFilter@1000000003 : Text;
      UserMgt@1000000002 : Codeunit 5700;
    BEGIN
      WITH Rec DO BEGIN
          LocationCodeEditable := TRUE;
          FreeFreightEditable := TRUE;
        {IF UserMgt.GetMfrRepSalesFilter <> '' THEN BEGIN
          FILTERGROUP(2);
          SETFILTER("Mfr. Rep. Code",UserMgt.GetMfrRepSalesFilter);
          FILTERGROUP(0);
          LocationCodeEditable := FALSE;
          FreeFreightEditable := FALSE;
        END;}
        // </TPZ159>

        //utk
        IF UserMgt.GetDivisionFilter <> '' THEN BEGIN
        //  divlen:=STRLEN(UserMgt.GetDivisionFilter);
          //MESSAGE(FORMAT(divlen));
          DIVFilter:= UserMgt.GetDivisionFilter+'|'+''''+'''';//visionFilter;// +'|'+' ';
          //MESSAGE(DIVFilter);
          FILTERGROUP(2);
          SETFILTER("Shortcut Dimension 5 Code",DIVFilter);
          FILTERGROUP(0);
        END;

        IF UserMgt.GetMfrRepSalesFilter <> '' THEN BEGIN
          MFGFilter := UserMgt.GetMfrRepSalesFilter+'|'+''''+'''';
         // MESSAGE(MFGFilter);
          FILTERGROUP(2);
          SETFILTER("Mfr. Rep. Code",MFGFilter);//UserMgt.GetMfrRepSalesFilter);
          FILTERGROUP(0);
          LocationCodeEditable := FALSE;
          FreeFreightEditable := FALSE;
        END;
        // </TPZ159>
        //utk
      END;

      // <TPZ858,TPZ1015>
      CommHdlgVisible := UserMgt.GetCommHdlgAdmin(USERID);
      OSRCSRISRMfrRepEditable := UserMgt.GetOSRCSRISRMfrRepAdmin(USERID);
      // </TPZ858,TPZ1015>
    END;

    [EventSubscriber(Codeunit,51800,Pg42_OnAfterGetRecord)]
    PROCEDURE Pg42_OnAfterGetRecord@1000000001(VAR Sender@1000000000 : Codeunit 51800;VAR Rec@1000000001 : Record 36;VAR JobQueueVisible@1000000002 : Boolean);
    BEGIN
      WITH Rec DO BEGIN
        JobQueueVisible := "Job Queue Status" = "Job Queue Status"::"Scheduled for Posting";
        Table36EventSubscribers.Tb36_UpdateLostOpportunity(Rec); //TOP030B KT ABCSI Lost Opportunities 03092015
      END;
    END;

    [EventSubscriber(Page,42,OnAfterGetCurrRecordEvent)]
    LOCAL PROCEDURE Pg42_onAfterGetCurrRecord@1000000028(VAR Rec@1000000000 : Record 36);
    VAR
      CustomerCampaign@1000000005 : Record 50053;
      Campaign@1000000004 : Record 5071;
      LongText@1000000003 : Text;
      ActiveCampaign@1000000002 : Boolean;
      Crlf@1000000001 : Text[2];
      Text0002@1000000008 : TextConst 'ENU=The Customer: "%1" has following active campaign/s: \\%2';
      Text0003@1000000007 : TextConst 'ENU=[Start Date: "%1" - End Date: "%2"]';
      Text0004@1000000006 : TextConst 'ENU=%1 - %2';
      Text001D@1000000009 : TextConst 'ENU=Please Select Value for Division Code.';
    BEGIN

      //<TPZ2809>
      WITH Rec DO BEGIN
        IF NOT GUIALLOWED THEN
          EXIT;

        //<TPZ2809>
        IF ("Shortcut Dimension 5 Code" ='') AND ("No." = '') AND ("Sell-to Customer No." <> '' )THEN
        MESSAGE(Text001D);
        //</TPZ2809>

        Crlf[1] := 10;
        Crlf[2] := 13;
        IF ("Document Type" ="Document Type"::Order) THEN BEGIN
          CustomerCampaign.RESET;
          CustomerCampaign.SETRANGE("Customer No.","Sell-to Customer No.");
          IF CustomerCampaign.FINDFIRST THEN BEGIN
            CLEAR(LongText);
            CLEAR(ActiveCampaign);
            REPEAT
              Campaign.RESET;
              Campaign.SETRANGE("No.",CustomerCampaign."Campaign No.");
              IF Campaign.FINDFIRST THEN
                IF (TODAY >= Campaign."Starting Date") AND (TODAY <= Campaign."Ending Date") THEN BEGIN
                  ActiveCampaign := TRUE;
                  LongText += STRSUBSTNO(Text0004,Campaign."No.",Campaign.Description) + FORMAT(Crlf[2]);
                  LongText += STRSUBSTNO(Text0003,Campaign."Starting Date",Campaign."Ending Date") + FORMAT(Crlf[2]) + FORMAT(Crlf[2]);
                END;
            UNTIL CustomerCampaign.NEXT = 0;
            IF ActiveCampaign AND  ("No." = '') AND ("Sell-to Customer No." <> '' ) THEN //UTKARSH
              MESSAGE(Text0002,"Sell-to Customer No.",LongText);
          END;
        END;
        //<<TPZ2764
      END;
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Action1000000063)]
    PROCEDURE Pg42_BenfieldASN_OnAction@1000000002(VAR Rec@1000000000 : Record 36);
    VAR
      SalesHeader@1000000001 : Record 36;
    BEGIN
      WITH Rec DO BEGIN
        //<TPZ804>
        SalesHeader.SETRANGE("Document Type", "Document Type");
        SalesHeader.SETRANGE("No.","No.");
        REPORT.RUNMODAL(REPORT::"Benfield ASN",FALSE,FALSE,SalesHeader);
        //</TPZ804>
      END;
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,StatisticsByLoc)]
    PROCEDURE Pg42_SalesOrderStatisticsbyLocation_OnAction@1000000011(VAR Rec@1000000000 : Record 36);
    VAR
      SalesStatsPage@1000000001 : Page 50016;
    BEGIN
      Rec.CalcInvDiscForHeader;
      COMMIT;
      SalesStatsPage.SetSalesOrder(Rec);
      SalesStatsPage.RUNMODAL;
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Action1000000230)]
    PROCEDURE Pg42_ItemsbyLocation_OnAction@1000000004(VAR Rec@1000000000 : Record 36);
    BEGIN
      // <TPZ493>
      Table36EventSubscribers.Tb36_ShowItemAvailByLoc(Rec);
      // </TPZ493>
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Action1000000040)]
    PROCEDURE Pg42_BenfieldASN_1_OnAction@1000000007(VAR Rec@1000000000 : Record 36);
    VAR
      SalesHeader@1000000001 : Record 36;
    BEGIN
      WITH Rec DO BEGIN
        //<TPZ804>
        SalesHeader.SETRANGE("Document Type", "Document Type");
        SalesHeader.SETRANGE("No.","No.");
        REPORT.RUNMODAL(REPORT::"Benfield ASN",FALSE,FALSE,SalesHeader);
        //</TPZ804>
      END;
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Action1000000026)]
    PROCEDURE Pg42_ChangeLogEntries_OnAction@1000000008(VAR Rec@1000000000 : Record 36);
    VAR
      ChangeLogEntry@1000000003 : Record 405;
      Number@1000000002 : Integer;
      ChangeLogMgt@1000000001 : Codeunit 423;
      CUSubscriber@1000000004 : Codeunit 51876;
    BEGIN
      WITH Rec DO BEGIN
        //<TPZ1728>
      Number := "Document Type";
      //ChangeLogMgt.OpenSSRSReport(DATABASE::"Sales Header", FORMAT(Number), "No.",'');
      CUSubscriber.CU423_OpenSSRSReport(DATABASE::"Sales Header", FORMAT(Number),"No.",'');
      EXIT;
      //</TPZ1728>


      // <TPZ129>
      Number := "Document Type";
      ChangeLogEntry.RESET;
      ChangeLogEntry.SETRANGE("Table No.",DATABASE::"Sales Header");
      ChangeLogEntry.SETRANGE("Primary Key Field 1 Value",FORMAT(Number));
      ChangeLogEntry.SETRANGE("Primary Key Field 2 Value","No.");
      PAGE.RUNMODAL(PAGE::"Change Log Entries",ChangeLogEntry);
      // </TPZ129>
      END;
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Action1000000076)]
    PROCEDURE Pg42_DSHIPLicensePlate_OnAction@1000000018(VAR Rec@1000000000 : Record 36);
    VAR
      LicensePlateHeader@1000000001 : Record 23044505;
      Page42EventSubscriber@1000000002 : Codeunit 51795;
    BEGIN
      ShowDSHIPLpList(Rec); //VAH TPZ3200
      {
      WITH Rec DO BEGIN
      //<vaseem>
       LicensePlateHeader.RESET;
       LicensePlateHeader.SETRANGE("Package Tracking Number","Package Tracking No.");
       IF LicensePlateHeader.FINDSET THEN
        LicensePlateHeader.SETRECFILTER;
        PAGE.RUN(PAGE::"DSHIP License Plate List",LicensePlateHeader);
      //</vaseem>
      END;
      }
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Action1000000073)]
    PROCEDURE "Pg42_AdvanceP.O.Ack._OnAction"@1000000020(VAR Rec@1000000000 : Record 36);
    VAR
      OrderStatusHdr@1000000001 : Record 14002400;
    BEGIN
      WITH Rec DO BEGIN
       //OrderStatusHeader.Order(Rec);

       OrderStatusHdr.RESET;
       OrderStatusHdr.SETRANGE("Source Doc. Type",OrderStatusHdr."Document Type"::"Order Change Status");
       OrderStatusHdr.SETRANGE(OrderStatusHdr."Source Doc. No.","No.");
       PAGE.RUN(PAGE::"E.D.I. Advance P.O. Ack.",OrderStatusHdr);
      END;
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Release)]
    PROCEDURE Pg42_Release_OnAction@1000000022(VAR Rec@1000000000 : Record 36);
    BEGIN
      //<TPZ2568>
      Table36EventSubscribers.Tb36_ValidateReasonComments(Rec);
      //</TPZ2568>
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Release)]
    PROCEDURE Pg42_Release_OnAction_2@1000000029(VAR Rec@1000000000 : Record 36);
    VAR
      SalesLine@1000000001 : Record 37;
      Item@1000000004 : Record 27;
      ItemAttributeValueMapping@1000000003 : Record 7505;
      BlockedItemAttributeValue@1000000002 : TextConst 'ENU=Item Attribute Value "%1", associated with item"%2" is blocked. \This Item is blocked from being sold in %1 location';
      ShiptoAddress@1000000005 : Record 222;
    BEGIN
      //<TPZ2837>
      WITH Rec DO BEGIN
      //>>001 TPZ2921
        IF ShiptoAddress.GET("Sell-to Customer No.","Ship-to Code") THEN
          IF ShiptoAddress."Freight Forward Allowed" = TRUE THEN
            EXIT;
      //<<001 TPZ2921
        SalesLine.SETRANGE("Document Type","Document Type"::Order);
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETRANGE(Type,SalesLine.Type::Item);
        IF SalesLine.FINDSET THEN REPEAT
          IF Item.GET(SalesLine."No.") THEN BEGIN
            ItemAttributeValueMapping.RESET;
            ItemAttributeValueMapping.SETFILTER("Table ID",'27');
            ItemAttributeValueMapping.SETRANGE("No.",SalesLine."No.");
            ItemAttributeValueMapping.SETFILTER("Item Attribute ID",'1');
            ItemAttributeValueMapping.SETFILTER("Item Attribute Value ID",'817'); //CA
            IF ItemAttributeValueMapping.FINDFIRST THEN
              IF ("Ship-to County" = 'CA' ) THEN
                ERROR(BlockedItemAttributeValue,'CA',Item."No.");
        END;
        UNTIL SalesLine.NEXT =0;
      END;
      //</TPZ2837>
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,"Release & Create Whse. Shpt.")]
    PROCEDURE "Pg42_Release&Create Whse.Shpt._OnAction"@1000000025(VAR Rec@1000000000 : Record 36);
    VAR
      ReleaseSalesDoc@1000000001 : Codeunit 414;
    BEGIN
      //TOP150 - KT ABCSI Sales Order Margin Review 04072015 Start
      Table36EventSubscribers.Tb36_ClearQtySalesLines(Rec);
      ReleaseSalesDoc.SetWhseShipment(TRUE);
      ReleaseSalesDoc.PerformManualRelease(Rec);
      //TOP150 - KT ABCSI Sales Order Margin Review 04072015 End
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Action1000000031)]
    PROCEDURE Pg42_CalculateFreeFreight_OnAction@1000000003(VAR Rec@1000000000 : Record 36);
    BEGIN
      // <TPZ573>
      Table36EventSubscribers.Tb36_CalcFreeFreight(Rec);
      // </TPZ573>
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Action1000000027)]
    PROCEDURE Pg42_SplitbyLocation_OnAction@1000000005(VAR Rec@1000000000 : Record 36);
    BEGIN
      // <TPZ844>
      Table36EventSubscribers.Tb36_CalcFreeFreight(Rec);
      CODEUNIT.RUN(CODEUNIT::"Sales-Split Order (Yes/No)",Rec);
      // </TPZ844>
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Action1000000215)]
    PROCEDURE Pg_42_SendASNEMail_OnAction@1000000009(VAR Rec@1000000000 : Record 36);
    VAR
      EMailMgt@1000000001 : Codeunit 14000903;
    BEGIN
      //TM BEG 070715
      //TESTFIELD("E-Mail Confirmation Handled",FALSE);

      EMailMgt.SendSalesASNEmail(Rec,TRUE,FALSE);
      //TM END 070715
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,SSQQ)]
    PROCEDURE Pg42_StockStatusQuickQuote_OnAction@1000000012(VAR Rec@1000000000 : Record 36);
    VAR
      CustRec@1000000001 : Record 18;
      StockStatusWksh@1000000002 : Page 50006;
    BEGIN
      //CurrPage.StockStatusQuickQuote.PAGE.NewOrderQuote(0,"No.");  //TOP170 KT ABCSI Sales Order Updates 04012015
      //TOP170 KT ABCSI Sales Order Updates 08212015
      CLEAR(StockStatusWksh);
      CustRec.GET(Rec."Sell-to Customer No.");
      StockStatusWksh.SetFromDocumentPage(TRUE,CustRec,0,Rec."No.",Rec."Location Code",Rec."Shortcut Dimension 5 Code");
      StockStatusWksh.RUNMODAL;
      //TOP170 KT ABCSI Sales Order Updates 08212015
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Action1000000238)]
    LOCAL PROCEDURE Pg42_CopyLastUnitPricetoActualUnitPrice@1000000026(VAR Rec@1000000000 : Record 36);
    BEGIN
      // <TPZ929>
      IF CONFIRM('Are you sure to copy Last Unit Price to Actual Unit Price?', FALSE) = TRUE THEN BEGIN
        //CopyLastUnitPriceToActualUnitPrice;
        Table36EventSubscribers.Tb36_CopyLastUnitPriceToActualUnitPrice(Rec); //<TPZ2829 Event Conversion
        //CurrPage.UPDATE(FALSE);
        MESSAGE('Last Unit Price has been copied to Actual Unit Price for all sales lines.');
      END;
      // </TPZ929>
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Action1000000235)]
    LOCAL PROCEDURE Pg42_ClearActualUnitPrice@1000000027(VAR Rec@1000000000 : Record 36);
    BEGIN
      // <TPZ929>
      IF CONFIRM('Are you sure to clear all sales lines Actual Unit Price?', FALSE) = TRUE THEN BEGIN
        //ClearActualUnitPrice;
        Table36EventSubscribers.Tb36_ClearActualUnitPrice(Rec);//<TPZ2829 Event Conversion
        //CurrPage.UPDATE(FALSE);
        MESSAGE('Actual Unit Price has been set to zero for all sales lines.');
      END;
      // </TPZ929>
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Action1000000077)]
    PROCEDURE Pg42_VerifyAddress_OnAction@1000000015(VAR Rec@1000000000 : Record 36);
    VAR
      USPSAddressVerification@1000000004 : Codeunit 50082;
      USPSAddressRecords@1000000003 : Record 50057;
      SalesHeaderShipto@1000000002 : Record 36;
      USPSAddressRecordPage@1000000001 : Page 50079;
    BEGIN
      WITH Rec DO BEGIN
        //<TPZ2762>
      IF ("Sell-to Customer No." <>'') AND ("Ship-to Code" <>'') THEN BEGIN
       // USPSAddressVerification.SETShiToAdd("Sell-to Customer No.","Ship-to Code","Ship-to Name","Ship-to Address","Ship-to Address 2","Ship-to City","Ship-to Post Code",
                                                   // "Ship-to County","Ship-to Country/Region Code",TRUE);
        USPSAddressVerification.SETShiToAdd1(Rec);
        USPSAddressVerification.RUN;
        USPSAddressRecords.RESET;
        USPSAddressRecords.SETRANGE("Original Customer No","Sell-to Customer No.");
        USPSAddressRecords.SETRANGE("Original Ship-to Code","Ship-to Code");
        IF USPSAddressRecords.FINDFIRST THEN;
        CLEAR(USPSAddressRecordPage);
        USPSAddressRecordPage.ShiptoAddressVerfiy(Rec);
        USPSAddressRecordPage.SETTABLEVIEW(USPSAddressRecords);
        USPSAddressRecordPage.SETRECORD(USPSAddressRecords);
        //IF PAGE.RUNMODAL(50079,USPSAddressRecords) = ACTION::LookupOK THEN BEGIN
        USPSAddressRecordPage.RUNMODAL;// = ACTION::LookupOK THEN BEGIN
        USPSAddressRecordPage.OnOk(Rec);
         // USPSAddressRecordPage.GETRECORD(USPSAddressRecords);
        // MESSAGE('hi')
          {"Ship-to Address" := USPSAddressRecords."Address 1";
          "Ship-to Address 2" := USPSAddressRecords."Address 2";
          "Ship-to City" := USPSAddressRecords.City;
          "Ship-to County" := USPSAddressRecords.State;
          "Ship-to Post Code" := USPSAddressRecords.Zip5 + '-'+USPSAddressRecords.Zip4;}
          MODIFY;
      //  END;
      END;
      //</TPZ2762>
      END;
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Action1170000000)]
    PROCEDURE Pg42_CreatePick_OnAction@1000000010(VAR Rec@1000000000 : Record 36);
    BEGIN
      Table36EventSubscribers.Tb36_CreatePick(Rec);//TPZ2665
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Action1000000052)]
    PROCEDURE Pg42_ScheduletoPost_OnAction@1000000006(VAR Rec@1000000000 : Record 36);
    BEGIN
      Rec.SendToPosting(CODEUNIT::"TPZ Sales-Post Schedule"); //TPZ1956
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Action1000000032)]
    PROCEDURE Pg42_ProFormaInvoice_OnAction@1000000013(VAR Rec@1000000000 : Record 36);
    VAR
      DocPrint@1000000001 : Codeunit 229;
      Codeunit229EventSubscriber@1000000002 : Codeunit 51917;
    BEGIN
      // <TPZ781>
      //DocPrint.PrintSalesProFormaInv(Rec);
      Codeunit229EventSubscriber.PrintSalesProFormaInv(Rec);
      // </TPZ781>
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Action1000000038)]
    PROCEDURE Pg42_DropShipSlip_OnAction@1000000014(VAR Rec@1000000000 : Record 36);
    VAR
      SH@1000000001 : Record 36;
    BEGIN
      WITH Rec DO BEGIN
          //<TPZ2829 Event Conversion
        IF "Shortcut Dimension 5 Code" <> 'L' THEN BEGIN //<TPZ2369>
          //TM BEG 081315 TPZ853
          SH.SETRANGE("Document Type", "Document Type");
          SH.SETRANGE("No.", "No.");
          REPORT.RUNMODAL(REPORT::"Drop Ship Slip", TRUE, FALSE, SH);
          //TM END 081315 TPZ853
        END ELSE BEGIN
          //<TPZ2369>
          SH.SETRANGE("Document Type", "Document Type");
          SH.SETRANGE("No.", "No.");
          REPORT.RUNMODAL(REPORT::"Drop Ship Slip(Lighting)", TRUE, FALSE, SH);
          //</TPZ2369>
        END;
      END;
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,MfrRepPackingList)]
    PROCEDURE Pg42_PackingList_OnAction@1000000016(VAR Rec@1000000000 : Record 36);
    VAR
      SalesHeaderLocal@1000000001 : Record 36;
    BEGIN
      WITH Rec DO  BEGIN
        //<TPZ1935>
        SalesHeaderLocal.SETRANGE("Document Type", "Document Type");
        SalesHeaderLocal.SETRANGE("No.", "No.");
        REPORT.RUN(REPORT::"Sales Order Packing List Rep", TRUE, FALSE, SalesHeaderLocal);
        //</TPZ1935>
      END;
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Action1000000047)]
    PROCEDURE Pg42_InternationalPickInstruction_OnAction@1000000017(VAR Rec@1000000000 : Record 36);
    VAR
      SH@1000000001 : Record 36;
    BEGIN
      WITH Rec DO BEGIN
        //TM BEG 080415 TPZ853
        SH.SETRANGE("Document Type", "Document Type");
        SH.SETRANGE("No.", "No.");
        REPORT.RUNMODAL(REPORT::"International Order Pick List", TRUE, FALSE, SH);
        //TM END 080415 TPZ853
      END;
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,"<Action1000000049>")]
    PROCEDURE "Pg42_Intl.ProformaInvoice_OnAction"@1000000019(VAR Rec@1000000000 : Record 36);
    VAR
      SalesHeader@1000000001 : Record 36;
    BEGIN
      WITH Rec DO BEGIN
        //TPZ1956>>>
        SalesHeader.RESET;
        SalesHeader.SETRANGE("Document Type","Document Type");
        SalesHeader.SETRANGE("No.","No.");
        SalesHeader.FINDFIRST;
        SalesHeader.SETRECFILTER;
        REPORT.RUNMODAL(REPORT::"International Proforma Invoice", TRUE, FALSE, SalesHeader);
        //TPZ1956>>>
      END;
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Action1000000035)]
    PROCEDURE "Pg42_E-MailProformaInvoice_OnAction"@1000000021(VAR Rec@1000000000 : Record 36);
    VAR
      EMailMgt@1000000001 : Codeunit 14000903;
    BEGIN

      EMailMgt.SendSalesInvoiceProforma(Rec,TRUE,FALSE); //TPZ1956
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Action1000000024)]
    PROCEDURE "Pg42_ImportfronExcel(Intl.)_OnAction"@1000000023(VAR Rec@1000000000 : Record 36);
    VAR
      SalesHeader@1000000001 : Record 36;
    BEGIN
      WITH Rec DO BEGIN
        // <TPZ449>
        SalesHeader.RESET;
        SalesHeader.SETRANGE("Document Type","Document Type");
        SalesHeader.SETRANGE("No.","No.");
        SalesHeader.FINDFIRST;
        SalesHeader.SETRECFILTER;
        REPORT.RUN(REPORT::"Import Intl. Sales Quote/Order",TRUE,FALSE,SalesHeader);
        // </TPZ449>
      END;
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Action1000000021)]
    PROCEDURE "Pg42_ExporttoExcel(Intl.)_OnAction"@1000000024(VAR Rec@1000000000 : Record 36);
    VAR
      SalesHeader@1000000001 : Record 36;
    BEGIN
      WITH Rec DO BEGIN
        // <TPZ449>
        SalesHeader.RESET;
        SalesHeader.SETRANGE("Document Type","Document Type");
        SalesHeader.SETRANGE("No.","No.");
        SalesHeader.FINDFIRST;
        SalesHeader.SETRECFILTER;
        REPORT.RUN(REPORT::"Export Intl. Sales Quote/Order",FALSE,FALSE,SalesHeader);
        // </TPZ449>
      END;
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Post)]
    LOCAL PROCEDURE Pg42_Post_OnAction@1000000030(VAR Rec@1000000000 : Record 36);
    VAR
      Location@1000000001 : Record 14;
    BEGIN
      //vah 3020
       IF Location.GET(Rec."Location Code") AND Location."Require Shipment" THEN
        ERROR('Please post from warehouse shipment');
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Action76)]
    LOCAL PROCEDURE "Pg42_Post&Print_OnAction"@1000000032(VAR Rec@1000000000 : Record 36);
    VAR
      Location@1000000001 : Record 14;
    BEGIN
      //vah 3020
      IF Location.GET(Rec."Location Code") AND Location."Require Shipment" THEN
        ERROR('Please post from warehouse shipment');
    END;

    [EventSubscriber(Page,42,OnBeforeActionEvent,Action1077)]
    LOCAL PROCEDURE Pg42_PostBatch_OnAction@1000000033(VAR Rec@1000000000 : Record 36);
    VAR
      Location@1000000001 : Record 14;
    BEGIN
      //vah 3020
      IF Location.GET(Rec."Location Code") AND Location."Require Shipment" THEN
        ERROR('Please post from warehouse shipment');
    END;

    [EventSubscriber(Page,42,OnAfterActionEvent,"Combine Ship and Packing")]
    LOCAL PROCEDURE PG42_RunCombineShipPackingList_OnAction@1000000034(VAR Rec@1000000000 : Record 36);
    VAR
      SH@1000000001 : Record 36;
      DropShipSlip@1000000002 : Report 50026;
      DropShipSlipLighting@1000000003 : Report 51094;
      SalesOrderPackingListRep@1000000004 : Report 50071;
      TopazSetupLoc@1000000005 : Record 50056;
      FileNameDropShip@1000000006 : Text;
      FileNamePacking@1000000007 : Text;
    BEGIN
      //TPZ3067
      WITH Rec DO BEGIN
        IF TopazSetupLoc.GET('COMBINEREPORTFILEPATH','') THEN;
        FileNameDropShip := TopazSetupLoc.DefaultText250+'Drop Ship'+DELCHR(FORMAT(CURRENTDATETIME),'=',':.\/') +'.pdf';
        FileNamePacking := TopazSetupLoc.DefaultText250+'Sales Order Packing List'+DELCHR(FORMAT(CURRENTDATETIME),'=',':.\/')+'.pdf';

        IF FILE.EXISTS(FileNameDropShip) THEN
          FILE.ERASE(FileNameDropShip);
        IF FILE.EXISTS(FileNamePacking) THEN
          FILE.ERASE(FileNamePacking);

        SH.SETRANGE("Document Type", "Document Type");
        SH.SETRANGE("No.", "No.");
        IF SH.FINDFIRST THEN;
        IF "Shortcut Dimension 5 Code" <> 'L' THEN BEGIN
          DropShipSlip.SETTABLEVIEW(SH);
          DropShipSlip.SAVEASPDF(FileNameDropShip);
          //HYPERLINK(FileNameDropShip);
        END ELSE BEGIN
          DropShipSlipLighting.SETTABLEVIEW(SH);
          DropShipSlipLighting.SAVEASPDF(FileNameDropShip);
          //HYPERLINK(FileNameDropShip);
        END;
        SalesOrderPackingListRep.SETTABLEVIEW(SH);
        SalesOrderPackingListRep.SAVEASPDF(FileNamePacking);
        //HYPERLINK(FileNamePacking);
        OpenwithMultipleFile(FileNameDropShip,FileNamePacking);
      END;
    END;

    LOCAL PROCEDURE OpenwithMultipleFile@1170000001(Dropship@1170000002 : Text;PackingList@1170000003 : Text);
    VAR
      OutlookApp@1170000000 : Automation "{00062FFF-0000-0000-C000-000000000046} 9.6:{0006F03A-0000-0000-C000-000000000046}:Unknown Automation Server.Unknown Class";
      OutlookEmail@1170000001 : Automation "{00062FFF-0000-0000-C000-000000000046} 9.6:{00061033-0000-0000-C000-000000000046}:Unknown Automation Server.Unknown Class";
    BEGIN
      //TPZ3067
      IF ISCLEAR(OutlookApp) THEN
      CREATE(OutlookApp,TRUE,TRUE);

      OutlookEmail:= OutlookApp.CreateItem(0);
      //OutlookEmail."To" := 'pankaj.shukla@topaz-usa.com';
      //OutlookEmail.Subject:='Subject';

      //OutlookEmail.Body := 'Body';

      OutlookEmail.Attachments.Add(Dropship);
      OutlookEmail.Attachments.Add(PackingList);

      //IF OpenDialog THEN
      OutlookEmail.Display
      //ELSE
      //OutlookEmail.Send;
    END;

    [EventSubscriber(Codeunit,51800,Pg42_OnAfterGetRecord_1)]
    PROCEDURE Pg42_OnOpenPage_1@1000000031(VAR Sender@1000000000 : Codeunit 51800;VAR Rec@1000000001 : Record 36;VAR XMLTradePartnerNo@1000000002 : Code[20];VAR XMLInternalDocNo@1000000003 : Code[20]);
    BEGIN
      //>>TPZ2986
      CLEAR(XMLTradePartnerNo);
      CLEAR(XMLInternalDocNo);
      //<<TPZ2986
    END;

    [EventSubscriber(Codeunit,51800,Pg42_OnAfterGetRecord_1)]
    PROCEDURE Pg42_OnAfterGetRecord_1@1000000035(VAR Sender@1000000000 : Codeunit 51800;VAR Rec@1000000001 : Record 36;VAR XMLTradePartnerNo@1000000002 : Code[20];VAR XMLInternalDocNo@1000000003 : Code[20]);
    VAR
      TTSOrderHeader@1000000004 : Record 50060;
      ExDocNo@1000000005 : Code[20];
      ReleaseNo@1000000006 : Integer;
    BEGIN
      //>>TPZ2986
      IF Rec."XML Order" THEN BEGIN
        IF Rec."External Document No."<> '' THEN
          ExDocNo := Rec."External Document No.";
        IF Rec."Warehouse Release No." <> '' THEN
          EVALUATE(ReleaseNo,Rec."Warehouse Release No.");
        TTSOrderHeader.RESET;
        TTSOrderHeader.SETRANGE("Nav Order No.",Rec."No.");
        TTSOrderHeader.SETRANGE(PONumber,ExDocNo);
        TTSOrderHeader.SETRANGE(ttsReleaseId,ReleaseNo);
        IF TTSOrderHeader.FINDFIRST THEN BEGIN
          XMLTradePartnerNo := TTSOrderHeader."Trade Partner No.";
          XMLInternalDocNo := TTSOrderHeader."Entry No.";
        END;
      END;
      //<<TPZ2986
    END;

    PROCEDURE ShowDSHIPLpList@1000000039(VAR SalesHeader@1000000000 : Record 36);
    VAR
      IWXLicensePlateHeader@1000000004 : Record 23044505;
      WarehouseShipmentLine@1000000003 : Record 7321;
      PostedWhseShipLine@1000000002 : Record 7323;
      TempIWXLicensePlateHeader@1000000001 : TEMPORARY Record 23044505;
      DSHIPLPList@1000000006 : Page 23044646;
      RegisteredWhseActivityLine@1000000007 : Record 5773;
      RegisteredWhseActivityHdr@1000000008 : Record 5772;
      IWXLicensePlateLineUsage@1000000005 : Record 23044507;
    BEGIN
      //>>VAH TPZ3200
      //>>Check Unposted LPs
      TempIWXLicensePlateHeader.DELETEALL;
      CLEAR(TempIWXLicensePlateHeader);
      {WarehouseShipmentLine.RESET;
      WarehouseShipmentLine.SETRANGE("Source No.",SalesHeader."No.");
      IF WarehouseShipmentLine.FINDSET THEN BEGIN
        TempSalesLine.INSERT;
        TempSalesLine.INIT;
        TempSalesLine."Document Type" := "Sales Header"."Document Type";
        TempSalesLine."Document No." := SalesHeader."No.";
        TempSalesLine."Line No." := HighestLineNo + 1000;
        HighestLineNo := TempSalesLine."Line No.";
        TempSalesLine.Description := 'Tracking #:';
        TempSalesLine."Description 2" := '';
        DonotCreateHeaderLine := TRUE;
        IWXLicensePlateLineUsage.RESET;
        IWXLicensePlateLineUsage.SETRANGE("Source Document",IWXLicensePlateLineUsage."Source Document"::Shipment);
        IWXLicensePlateLineUsage.SETRANGE("Source No.",WarehouseShipmentLine."No.");
        IF IWXLicensePlateLineUsage.FINDSET THEN BEGIN
          REPEAT
            IF IWXLicensePlateHeader.GET(IWXLicensePlateLineUsage."License Plate No.") THEN
              IF NOT TempIWXLicensePlateHeader.GET(IWXLicensePlateHeader."No.") THEN BEGIN
                TempIWXLicensePlateHeader.INIT;
                TempIWXLicensePlateHeader.TRANSFERFIELDS(IWXLicensePlateHeader);
                TempIWXLicensePlateHeader.INSERT;
              END;
          UNTIL IWXLicensePlateLineUsage.NEXT = 0;
        END ELSE BEGIN
          IWXLicensePlateLineUsage.RESET;
          IWXLicensePlateLineUsage.SETRANGE("Source Document",IWXLicensePlateLineUsage."Source Document"::"Sales Order");
          IWXLicensePlateLineUsage.SETRANGE("Source No.",SalesHeader."No.");
          IF IWXLicensePlateLineUsage.FINDSET THEN
            REPEAT
              IF IWXLicensePlateHeader.GET(IWXLicensePlateLineUsage."License Plate No.") THEN
                IF NOT TempIWXLicensePlateHeader.GET(IWXLicensePlateHeader."No.") THEN BEGIN
                  TempIWXLicensePlateHeader.INIT;
                  TempIWXLicensePlateHeader.TRANSFERFIELDS(IWXLicensePlateHeader);
                  TempIWXLicensePlateHeader.INSERT;
                END;
            UNTIL IWXLicensePlateLineUsage.NEXT = 0;
        END;
      END;
      }
        WarehouseShipmentLine.RESET;
        WarehouseShipmentLine.SETCURRENTKEY("Source Type","Source No.","Source Line No.");
        WarehouseShipmentLine.SETRANGE("Source No.",SalesHeader."No.");
        IF WarehouseShipmentLine.FINDSET THEN BEGIN
          IWXLicensePlateLineUsage.RESET;
          IWXLicensePlateLineUsage.SETRANGE("Source Document",IWXLicensePlateLineUsage."Source Document"::Shipment);
          IWXLicensePlateLineUsage.SETRANGE("Source No.",WarehouseShipmentLine."No.");
          IF IWXLicensePlateLineUsage.FINDSET THEN BEGIN
            REPEAT
              IF IWXLicensePlateHeader.GET(IWXLicensePlateLineUsage."License Plate No.") THEN
                IF NOT TempIWXLicensePlateHeader.GET(IWXLicensePlateHeader."No.") THEN BEGIN
                  TempIWXLicensePlateHeader.INIT;
                  TempIWXLicensePlateHeader.TRANSFERFIELDS(IWXLicensePlateHeader);
                  TempIWXLicensePlateHeader.INSERT;
                END;
            UNTIL IWXLicensePlateLineUsage.NEXT = 0;
          END ELSE BEGIN
            IWXLicensePlateLineUsage.RESET;
            IWXLicensePlateLineUsage.SETRANGE("Source Document",IWXLicensePlateLineUsage."Source Document"::"Sales Order");
            IWXLicensePlateLineUsage.SETRANGE("Source No.",SalesHeader."No.");
            IF IWXLicensePlateLineUsage.FINDSET THEN
              REPEAT
                IF IWXLicensePlateHeader.GET(IWXLicensePlateLineUsage."License Plate No.") THEN
                  IF NOT TempIWXLicensePlateHeader.GET(IWXLicensePlateHeader."No.") THEN BEGIN
                    TempIWXLicensePlateHeader.INIT;
                    TempIWXLicensePlateHeader.TRANSFERFIELDS(IWXLicensePlateHeader);
                    TempIWXLicensePlateHeader.INSERT;
                  END;
              UNTIL IWXLicensePlateLineUsage.NEXT = 0;
          END;
        END;
      {
        IWXLicensePlateHeader.RESET;
        IWXLicensePlateHeader.SETRANGE("Source No.",SalesHeader."No.");
        IF IWXLicensePlateHeader.FINDFIRST THEN BEGIN
          REPEAT
            IF NOT TempIWXLicensePlateHeader.GET(IWXLicensePlateHeader."No.") THEN BEGIN
              TempIWXLicensePlateHeader.INIT;
              TempIWXLicensePlateHeader.TRANSFERFIELDS(IWXLicensePlateHeader);
              TempIWXLicensePlateHeader.INSERT;
            END;
          UNTIL IWXLicensePlateHeader.NEXT = 0;
        END;
      //<<


      //Check WPI No.
        RegisteredWhseActivityLine.RESET;
        RegisteredWhseActivityLine.SETCURRENTKEY("Action Type","Source No.","Source Document");
        RegisteredWhseActivityLine.SETRANGE("Activity Type",RegisteredWhseActivityLine."Activity Type"::Pick);
        RegisteredWhseActivityLine.SETRANGE("Source No.",SalesHeader."No.");
        IF RegisteredWhseActivityLine.FINDFIRST THEN
          REPEAT
            RegisteredWhseActivityHdr.GET(RegisteredWhseActivityLine."Activity Type",RegisteredWhseActivityLine."No.");
            IWXLicensePlateHeader.RESET;
            IWXLicensePlateHeader.SETAUTOCALCFIELDS("Source No.");
            IWXLicensePlateHeader.SETRANGE("Source No.",RegisteredWhseActivityHdr."Whse. Activity No.");
            IF IWXLicensePlateHeader.FINDFIRST THEN BEGIN
              REPEAT
                IF NOT TempIWXLicensePlateHeader.GET(IWXLicensePlateHeader."No.") THEN BEGIN
                  TempIWXLicensePlateHeader.INIT;
                  TempIWXLicensePlateHeader.TRANSFERFIELDS(IWXLicensePlateHeader);
                  TempIWXLicensePlateHeader.INSERT;
                END;
              UNTIL IWXLicensePlateHeader.NEXT = 0;
            END;
          UNTIL RegisteredWhseActivityLine.NEXT = 0;
      //<<
      //TempIWXLicensePlateHeader.FINDSET;
      }
      PAGE.RUN(PAGE::"DSHIP License Plate List",TempIWXLicensePlateHeader);
    END;

    [EventSubscriber(Page,42,OnBeforeValidateEvent,"Ship-to Code")]
    LOCAL PROCEDURE Pg42_ShiptoCode_OnBefore@1000000037(VAR Rec@1000000000 : Record 36;VAR xRec@1000000001 : Record 36);
    VAR
      textvar@1000000002 : Text[50];
    BEGIN
      //>>005 TPZ3225
      IF Rec."XML Order" = TRUE THEN BEGIN
        textvar := Rec."Ship-to Code";
        IF Rec.FIND THEN;
        Rec.VALIDATE("Ship-to Code",textvar);
        Rec.MODIFY(FALSE);
      END;
      //<<005 TPZ3225
    END;

    [EventSubscriber(Page,42,OnBeforeValidateEvent,"Location Code")]
    LOCAL PROCEDURE Pg42_LocationCode_OnBefore@1000000038(VAR Rec@1000000000 : Record 36;VAR xRec@1000000001 : Record 36);
    VAR
      textvar@1000000002 : Text[50];
    BEGIN
      //>>005 TPZ3225
      IF Rec."XML Order" = TRUE THEN BEGIN
        textvar := Rec."Location Code";
        IF Rec.FIND THEN;
        Rec.VALIDATE("Location Code",textvar);
        Rec.MODIFY(FALSE);
      END;
      //<<005 TPZ3225
    END;

    BEGIN
    {
      TPZ2837 RPS 08202020 - Block Item Entry to sales order for certain attributes
      001 TPZ2921 RPS 08112020 - Allow Ship-to California for limited users - Added boolean "Freight Forward Allowed"
      002 TPZ3067 PKS 03032021  Added action Combine Drop Ship and Packing to print combine ship report
      003 TPZ2986 GKG 03242021 add action for xml orders tradetech integration
      004 TPZ3200 VAH 05282021 Added function ShowDSHIPLpList
      005 TPZ3225 RPS 06281988 - Trade tech Billing - CES
    }
    END.
  }
}

