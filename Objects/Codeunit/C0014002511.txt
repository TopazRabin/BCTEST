OBJECT Codeunit 14002511 RF PalletCont Pallet List
{
  OBJECT-PROPERTIES
  {
    Date=08/21/18;
    Time=12:00:00 PM;
    Version List=RF1.50.13;
  }
  PROPERTIES
  {
    TableNo=7700;
    OnRun=VAR
            MiniformMgmt@1240020000 : Codeunit 7702;
          BEGIN
            MiniformMgmt.Initialize(
              MiniformHeader,Rec,DOMxmlin,ReturnedNode,
              RootNode,XMLDOMMgmt,ADCSCommunication,LoginID,
              CurrentCode,StackCode,WhseEmpId,LocationFilter);

            IF Code <> CurrentCode THEN
              PrepareData
            ELSE
              ProcessSelection;

            CLEAR(DOMxmlin);
          END;

  }
  CODE
  {
    VAR
      MiniformHeader@1240020016 : Record 7700;
      MiniformHeader2@1240020015 : Record 7700;
      XMLDOMMgmt@1240020014 : Codeunit 6224;
      ADCSCommunication@1240020013 : Codeunit 7701;
      ADCSNASStartup@1240020012 : Codeunit 7700;
      DOMxmlin@1240020010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ReturnedNode@1240020009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      RootNode@1240020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      LoginID@1240020007 : Text[250];
      WhseEmpId@1240020011 : Text[250];
      TextValue@1240020019 : Text[250];
      LocationFilter@1240020006 : Text[250];
      CurrentCode@1240020005 : Text[250];
      PreviousCode@1240020004 : Text[250];
      StackCode@1240020003 : Text[250];
      Remark@1240020002 : Text[250];
      ActiveInputField@1240020001 : Integer;
      RecRef@1240020000 : RecordRef;
      Text000@1240020020 : TextConst 'ENU=Function not Found';
      Text006@1240020018 : TextConst 'ENU=No input Node found';
      Text009@1240020017 : TextConst 'ENU=No Documents found';
      Text010@1240020021 : TextConst 'ENU=No label defined in RF Setup';

    LOCAL PROCEDURE ProcessSelection@8();
    VAR
      Lookup@1000 : Record 14002971;
      FuncGroup@1001 : Record 7702;
      Bin@1002 : Record 7354;
      BoxHandlingLineTmp@1240020002 : TEMPORARY Record 14002970;
      MiniformLine@1240020008 : Record 7701;
      RFSetup@1240020005 : Record 14002801;
      RFEmployeeSetup@1240020006 : Record 14002802;
      RFEmployeeMenuFilter@1240020007 : Record 14002806;
      WhseEmployee@1240020009 : Record 7301;
      ReturnedNode2@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TableNo@1004 : Integer;
      RecordId@1005 : RecordID;
      RFLabelMgt@1240020003 : Codeunit 14002851;
      FieldID@1240020004 : Text[250];
      Command@1240020001 : Code[10];
    BEGIN
      IF XMLDOMMgmt.FindNode(RootNode,'Header/Input',ReturnedNode) THEN
        TextValue := ReturnedNode.InnerText
      ELSE
        ERROR(Text006);

      XMLDOMMgmt.FindNode(RootNode,'ExtraInfo',ReturnedNode2);
      Bin.Code := ADCSCommunication.GetNodeAttribute(ReturnedNode2,'BinCode');
      ADCSCommunication.SetExtraValue('BinCode',Bin.Code);

      EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'));
      RecRef.OPEN(TableNo);
      EVALUATE(RecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'));
      IF RecRef.GET(RecordId) THEN BEGIN
        RecRef.SETTABLE(Lookup);
        Lookup.RESET;
        Lookup.SETFILTER(Location,LocationFilter);
        Lookup.SETRANGE(Bin,Lookup.Bin);
        RecRef.GETTABLE(Lookup);
        ADCSCommunication.SetRecRef(RecRef);
      END ELSE BEGIN
        ADCSCommunication.RunPreviousMiniform(DOMxmlin);
        EXIT;
      END;

      FuncGroup.KeyDef := ADCSCommunication.GetFunctionKey(MiniformHeader.Code,TextValue);
      ActiveInputField := 1;

      CASE FuncGroup.KeyDef OF
        FuncGroup.KeyDef::Esc:
          ADCSCommunication.RunPreviousMiniform(DOMxmlin);
        FuncGroup.KeyDef::First:
          ADCSCommunication.FindRecRef(0,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::LnDn:
          IF NOT ADCSCommunication.FindRecRef(1,MiniformHeader."No. of Records in List") THEN
            Remark := Text009;
        FuncGroup.KeyDef::LnUp:
          ADCSCommunication.FindRecRef(2,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::Last:
          ADCSCommunication.FindRecRef(3,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::PgDn:
          IF NOT ADCSCommunication.FindRecRef(4,MiniformHeader."No. of Records in List") THEN
            Remark := Text009;
        FuncGroup.KeyDef::PgUp:
          ADCSCommunication.FindRecRef(5,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::Register:
          BEGIN
            RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
            CASE RFEmployeeSetup."Local Menu Button" OF
              RFEmployeeSetup."Local Menu Button"::F3:
                BEGIN
                  MiniformHeader.TESTFIELD("Local Menu Miniform Code");
                  ADCSCommunication.SetExtraValue('PrimaryMiniForm',MiniformHeader.Code);
                  MiniformHeader.GET(MiniformHeader."Local Menu Miniform Code");
                  IF RFEmployeeMenuFilter.GET(
                        RFEmployeeSetup.Code,MiniformHeader.Code)
                  THEN
                    ADCSCommunication.SetRFFunctionFilter(
                      RFEmployeeMenuFilter."RF Function Filter");
                  ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,1,'',LoginID);
                  ADCSCommunication.GetReturnXML(DOMxmlin);
                  ADCSNASStartup.SendXMLReply(DOMxmlin);

                  EXIT;
                END;
            END;
          END;
        FuncGroup.KeyDef::Input:
          BEGIN
            FieldID := ADCSCommunication.GetNodeAttribute(ReturnedNode,'FieldID');
            Command := '';
            IF STRLEN(TextValue) >= 3 THEN
              IF COPYSTR(TextValue,1,2) = '//' THEN
                Command := COPYSTR(TextValue,3,MAXSTRLEN(Command));
            IF (FieldID = '') OR (Command <> '') THEN BEGIN
              RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);

              IF Command <> '' THEN BEGIN
                MiniformLine.RESET;
                MiniformLine.SETRANGE("Miniform Code",MiniformHeader."Local Menu Miniform Code");
                MiniformLine.SETRANGE(Hide,FALSE);
                IF RFEmployeeMenuFilter.GET(
                      RFEmployeeSetup.Code,MiniformHeader."Local Menu Miniform Code")
                THEN
                  MiniformLine.SETFILTER("RF Function No.",RFEmployeeMenuFilter."RF Function Filter");
                MiniformLine.SETRANGE(MiniformLine."Command Text",Command);
                MiniformLine.FIND('-');
              END ELSE BEGIN
                MiniformLine.RESET;
                MiniformLine.SETRANGE("Miniform Code",MiniformHeader.Code);
                MiniformLine.SETRANGE(Hide,FALSE);
                IF RFEmployeeMenuFilter.GET(RFEmployeeSetup.Code,MiniformHeader.Code) THEN
                  MiniformLine.SETFILTER("RF Function No.",RFEmployeeMenuFilter."RF Function Filter");
                MiniformLine.SETRANGE(Text,ReturnedNode.InnerText);
                IF NOT MiniformLine.FIND('-') THEN BEGIN
                  ADCSCommunication.IncreaseStack(DOMxmlin,MiniformHeader.Code);
                  ADCSCommunication.GetNextMiniForm(MiniformHeader,MiniformHeader2);
                  MiniformHeader2.SaveXMLin(DOMxmlin);
                  CODEUNIT.RUN(MiniformHeader2."Handling Codeunit",MiniformHeader2);
                  EXIT;
                END ELSE BEGIN
                  XMLDOMMgmt.FindNode(RootNode,'ExtraInfo',ReturnedNode2);
                  MiniformHeader.Code :=
                    ADCSCommunication.GetNodeAttribute(ReturnedNode2,'PrimaryMiniForm');
                  MiniformHeader.GET(MiniformHeader.Code);
                END;
              END;
              CASE MiniformLine."RF Function No." OF
                0: // Escape or Return
                  BEGIN
                    ADCSCommunication.RunPreviousMiniform(DOMxmlin);
                  END;
                1: // Main Menu
                  BEGIN
                    IF WhseEmployee.GET(WhseEmpId,LocationFilter) THEN
                      IF WhseEmployee."ADCS Main Menu" <> '' THEN
                        IF NOT MiniformHeader2.GET(WhseEmployee."ADCS Main Menu") THEN
                          ADCSCommunication.RunPreviousMiniform(DOMxmlin);

                    MiniformHeader2.SaveXMLin(DOMxmlin);
                    CODEUNIT.RUN(MiniformHeader2."Handling Codeunit",MiniformHeader2);
                  END;
                2: // Print Pallet Label (LP)
                  BEGIN
                    RFSetup.GetRFSetup;
                    IF RFSetup."Pallet Label (LP)" <> '' THEN BEGIN
                      BoxHandlingLineTmp.RESET;
                      BoxHandlingLineTmp."Line No." := Lookup."Line No.";
                      BoxHandlingLineTmp."Pallet No." := Lookup.Pallet;
                      BoxHandlingLineTmp."Box No." := Lookup.Box;
                      BoxHandlingLineTmp.Location := Lookup.Location;
                      BoxHandlingLineTmp."Bin Code" := Lookup.Bin;
                      BoxHandlingLineTmp."Item No." := Lookup.Item;
                      BoxHandlingLineTmp."Variant Code" := Lookup.Variant;
                      BoxHandlingLineTmp."Unit of Measure Code" := Lookup."UOM Code";
                      BoxHandlingLineTmp."Lot No." := Lookup.Lot;
                      BoxHandlingLineTmp."Serial No." := Lookup."Serial No.";
                      BoxHandlingLineTmp."Qty. per UOM" := Lookup."Qty per UOM";
                      BoxHandlingLineTmp.Quantity := Lookup.Quantity;
                      BoxHandlingLineTmp."Quantity (Base)" := Lookup."Quantity (Base)";

                      IF BoxHandlingLineTmp.INSERT THEN BEGIN
                        RFLabelMgt.PrintLPLabel(BoxHandlingLineTmp,WhseEmpId);
                        ADCSCommunication.RunPreviousMiniform(DOMxmlin);
                      END ELSE
                        ADCSCommunication.RunPreviousMiniform(DOMxmlin);
                    END ELSE
                      ERROR(Text010);
                  END;
                ELSE
                  ERROR(Text000);
              END;
            END;
          END;
        ELSE
          ERROR(Text000);
      END;

      IF NOT (FuncGroup.KeyDef IN [FuncGroup.KeyDef::Esc,FuncGroup.KeyDef::Input]) THEN
        SendForm(ActiveInputField);
    END;

    LOCAL PROCEDURE PrepareData@4();
    VAR
      Lookup@1000 : Record 14002971;
      ReturnedNode2@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TableNo@1002 : Integer;
      RecordId@1003 : RecordID;
      Bin@1005 : Record 7354;
    BEGIN
      XMLDOMMgmt.FindNode(RootNode,'ExtraInfo',ReturnedNode2);
      Bin.Code := ADCSCommunication.GetNodeAttribute(ReturnedNode2,'BinCode');
      ADCSCommunication.SetExtraValue('BinCode',Bin.Code);

      IF ADCSCommunication.GetNodeAttribute(ReturnedNode2,'FromCard') = '' THEN BEGIN
        IF XMLDOMMgmt.FindNode(RootNode,'Header/Input',ReturnedNode) THEN
          TextValue := ReturnedNode.InnerText
        ELSE
          ERROR(Text006);
        Lookup.RESET;
        Lookup.SETFILTER(Location,LocationFilter);
        Lookup.SETRANGE("Warehouse Employee Code",WhseEmpId);
        Lookup.SETRANGE(
          Pallet,COPYSTR(UPPERCASE(TextValue),1,MAXSTRLEN(Lookup.Item)));
      END ELSE BEGIN
        XMLDOMMgmt.FindNode(RootNode,'Header/Input',ReturnedNode);
        EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'));
        RecRef.OPEN(TableNo);
        EVALUATE(RecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'));
        IF RecRef.GET(RecordId) THEN BEGIN
          RecRef.SETTABLE(Lookup);
          Lookup.RESET;
          Lookup.SETRANGE("Warehouse Employee Code",WhseEmpId);
          Lookup.SETRANGE(Location,LocationFilter);
          Lookup.SETRANGE(Item,Lookup.Item);
        END ELSE BEGIN
          Lookup.RESET;
          Lookup.SETFILTER(Location,'A&<>A');
        END;
      END;

      IF NOT Lookup.FINDFIRST THEN BEGIN
        IF ADCSCommunication.GetNodeAttribute(ReturnedNode,'RunReturn') = '0' THEN BEGIN
          ADCSNASStartup.SendError(Text009);
          EXIT;
        END;
        ADCSCommunication.DecreaseStack(DOMxmlin,PreviousCode);
        MiniformHeader2.GET(PreviousCode);
        MiniformHeader2.SaveXMLin(DOMxmlin);
        CODEUNIT.RUN(MiniformHeader2."Handling Codeunit",MiniformHeader2);
      END ELSE BEGIN
        RecRef.GETTABLE(Lookup);
        ADCSCommunication.SetRecRef(RecRef);
        ActiveInputField := 1;
        SendForm(ActiveInputField);
      END;
    END;

    LOCAL PROCEDURE SendForm@1(InputField@1000 : Integer);
    BEGIN
      ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,InputField,Remark,LoginID);
      ADCSCommunication.GetReturnXML(DOMxmlin);
      ADCSNASStartup.SendXMLReply(DOMxmlin);
    END;

    EVENT DOMxmlin@1240020010::NodeInserting@93(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020010::NodeInserted@94(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020010::NodeRemoving@95(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020010::NodeRemoved@96(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020010::NodeChanging@97(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020010::NodeChanged@98(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

