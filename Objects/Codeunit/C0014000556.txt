OBJECT Codeunit 14000556 Period End (Yes/No)
{
  OBJECT-PROPERTIES
  {
    Date=03/01/20;
    Time=12:00:00 PM;
    Version List=UBP3.02;
  }
  PROPERTIES
  {
    OnRun=VAR
            ErrorLogEntryNo@1240020000 : Integer;
          BEGIN
            InvMgt.CreateLogEntry('',Text001,LogEntryNo);
            COMMIT;

            InvMgmtSetup.GET;
            AlertSetup.GET;

            Location.SETRANGE("Enable Adv. Forecasting",TRUE);
            IF Location.FINDSET THEN BEGIN
              REPEAT
                IF Location."Enable Adv. Forecasting" OR
                   Location."Enable Cust. Forecasting" OR
                   Location."Enable Moving Average" THEN BEGIN
                  CLEAR(CreateProcUnits);
                  CreateProcUnits.CreateProcUnitForDayEnd(Location);
                END;
              UNTIL Location.NEXT = 0;
            END;

            CreateUsage;

            CLEAR(CreateProcUnits);
            CreateProcUnits.ForReplPath;

            CLEAR(CheckReplPath);
            CheckReplPath.AllProcUnits(TRUE);

            CLEAR(UpdateProcUnitLocFilters);
            UpdateProcUnitLocFilters.ByLocation('','');

            CLEAR(GlobalUsageRedirect);
            GlobalUsageRedirect.Update;

            IF CollaborativeFCSetup.READPERMISSION THEN BEGIN
              ReleaseForecastCustomer.MaintainItemUsageForOpenCollaborative();
            END;

            Location.SETRANGE("Auto Process Period End",TRUE);
            ReforecastSelectedLocations;

            CheckForAdjPeriod;
            ProcessPeriodEnd;

            ItemRanking.CalcAllLocations;
            COMMIT;

            Location.SETRANGE("Auto Process Prod. Plan",TRUE);
            IF NOT Location.ISEMPTY THEN BEGIN
              // combined assembly and production
              CLEAR(CreateAFPProdPlanYesNo);
              CreateAFPProdPlanYesNo.SetGlobalLocationFilters(Location);
              IF NOT CreateAFPProdPlanYesNo.RUN THEN BEGIN
                InvMgt.CreateLogEntry('',COPYSTR(GETLASTERRORTEXT, 1, 250), LogEntryNo);
              END;
              COMMIT;
            END;
            Location.SETRANGE("Auto Process Prod. Plan");

            CLEAR(CalcCustDominatedItem);
            CalcCustDominatedItem.RUN;
            COMMIT;

            CLEAR(AdjForUnusualDemand);
            AdjForUnusualDemand.RUN;
            COMMIT;

            SurplusInventoryValue.RESET;
            IF NOT SurplusInventoryValue.ISEMPTY THEN BEGIN
              SurplusInventoryValue.DELETEALL;
              COMMIT;
            END;

            IF InvMgmtSetup."Create Sug. Ord. Overnight" THEN BEGIN
              CLEAR(CreateMultSugOrders);
              CreateMultSugOrders.RUN;
              COMMIT;
            END;

            CLEAR(CalculateSurplus);
            CalculateSurplus.ByLocation('');
            COMMIT;

            CLEAR(CreateAlerts);
            CreateAlerts.RUN;
            COMMIT;

            InvMgt.CloseLogEntry(LogEntryNo,'');
            COMMIT;
          END;

  }
  CODE
  {
    VAR
      InvMgmtSetup@1240030007 : Record 14000551;
      InvPeriod@1240030008 : Record 14000552;
      Location@1240030000 : Record 14;
      LocInvPeriod@1240030006 : Record 14000553;
      AlertSetup@1240030020 : Record 14002703;
      SurplusInventoryValue@1240020001 : Record 14000584;
      CollaborativeFCSetup@1240020008 : Record 14002607;
      DayEndCalc@1240030004 : Codeunit 14000555;
      PerEndCalc@1240030003 : Codeunit 14000557;
      UsageLedCreate@1240030002 : Codeunit 14000552;
      VendPerfCalc@1240030001 : Codeunit 14000551;
      GlobalUsageRedirect@1240430010 : Codeunit 14000573;
      CreateProcUnits@1240030010 : Codeunit 14000575;
      PerEndPrep@1240030011 : Codeunit 14000576;
      InvMgt@1240030012 : Codeunit 14000553;
      CalculateSurplus@1240030017 : Codeunit 14000577;
      CreateAFPProdPlanYesNo@1240030018 : Codeunit 14002674;
      CreateAlerts@1240030019 : Codeunit 14002701;
      ItemRanking@1240030021 : Codeunit 14000591;
      UpdateProcUnitLocFilters@1240020000 : Codeunit 14000581;
      CalcCustDominatedItem@1240020002 : Codeunit 14000594;
      AdjForUnusualDemand@1240020003 : Codeunit 14000596;
      CheckReplPath@1240020004 : Codeunit 14000597;
      CreateMultSugOrders@1240020005 : Codeunit 14000592;
      ReleaseForecastCustomer@1240020009 : Codeunit 14002601;
      LogEntryNo@1240030013 : Integer;
      Text001@1240030014 : TextConst 'ENU=** Overnight Process - NAS **';
      Text002@1240030016 : TextConst 'ENU=** Single Period End **';
      Text003@1240030015 : TextConst 'ENU=** Multiple Period End **';
      FirstForecastDate@1240020006 : Date;
      Text004@1240020007 : TextConst 'ENU=** Materials Planning Failed ***';

    PROCEDURE MultiplePeriodEnd@1();
    VAR
      lclText000@1000000012 : TextConst 'ENU=Inventory Period not found with ending date less than %1.';
      lclText001@1000000011 : TextConst 'ENU=Do you wish to process all period ends through %1 for the selected locations?';
      lclText002@1240020001 : TextConst 'ENU=Period end could not run without selected and enabled locations.';
    BEGIN
      // Manual GUI
      AlertSetup.GET;

      InvPeriod.RESET;
      InvPeriod.SETCURRENTKEY("Ending Date");
      InvPeriod.SETFILTER("Ending Date",'<=%1',WORKDATE);
      IF NOT InvPeriod.FIND('+') THEN
        ERROR(lclText000,WORKDATE);
      IF NOT CONFIRM(lclText001,FALSE,InvPeriod."Ending Date") THEN
        EXIT;

      InvMgt.CreateLogEntry('',Text003,LogEntryNo);
      COMMIT;

      Location.SETRANGE("Select Period End Processing",USERID);
      Location.SETRANGE("Enable Adv. Forecasting",TRUE);
      IF Location.FINDSET THEN BEGIN
        REPEAT
          IF Location."Enable Adv. Forecasting" OR
             Location."Enable Cust. Forecasting" OR
             Location."Enable Moving Average" THEN BEGIN
            CLEAR(CreateProcUnits);
            CreateProcUnits.CreateProcUnitForDayEnd(Location);
          END;
        UNTIL Location.NEXT = 0;
      END ELSE BEGIN
        InvMgt.CloseLogEntry(LogEntryNo,lclText002);
        EXIT;
      END;

      CreateUsage;

      CLEAR(CreateProcUnits);
      CreateProcUnits.ForReplPath;

      CLEAR(CheckReplPath);
      CheckReplPath.AllProcUnits(TRUE);

      CLEAR(UpdateProcUnitLocFilters);
      UpdateProcUnitLocFilters.ByLocation('','');

      CLEAR(GlobalUsageRedirect);
      GlobalUsageRedirect.Update;

      IF CollaborativeFCSetup.READPERMISSION THEN BEGIN
        ReleaseForecastCustomer.MaintainItemUsageForOpenCollaborative();
      END;

      ReforecastSelectedLocations;

      CheckForAdjPeriod;
      ProcessPeriodEnd;

      ItemRanking.CalcAllLocations;
      COMMIT;

      Location.SETRANGE("Auto Process Prod. Plan",TRUE);
      IF NOT Location.ISEMPTY THEN BEGIN
        // combined assembly and production
        CLEAR(CreateAFPProdPlanYesNo);
        CreateAFPProdPlanYesNo.SetGlobalLocationFilters(Location);
        IF NOT CreateAFPProdPlanYesNo.RUN THEN BEGIN
          InvMgt.CreateLogEntry('',COPYSTR(GETLASTERRORTEXT, 1, 250), LogEntryNo);
        END;
        COMMIT;
      END;
      Location.SETRANGE("Auto Process Prod. Plan");

      CLEAR(CalcCustDominatedItem);
      CalcCustDominatedItem.RUN;
      COMMIT;

      CLEAR(AdjForUnusualDemand);
      AdjForUnusualDemand.RUN;
      COMMIT;

      SurplusInventoryValue.RESET;
      SurplusInventoryValue.DELETEALL;
      COMMIT;

      IF Location.FINDSET THEN
        REPEAT
          CLEAR(CalculateSurplus);
          CalculateSurplus.ByLocation(Location.Code);
        UNTIL Location.NEXT = 0;
      COMMIT;

      CLEAR(CreateAlerts);
      CreateAlerts.RUN;
      COMMIT;

      InvMgt.CloseLogEntry(LogEntryNo,'');
      COMMIT;
    END;

    PROCEDURE CheckForAdjPeriod@3();
    BEGIN
      InvMgmtSetup.GET;
      IF InvMgmtSetup."Reforecast Changed Units" <> InvMgmtSetup."Reforecast Changed Units"::"All Items" THEN
        EXIT;
      Location.SETRANGE("Enable Adv. Forecasting",TRUE);
      IF Location.FIND('-') THEN
        REPEAT
          LocInvPeriod.RESET;
          LocInvPeriod.SETRANGE("Location Code",Location.Code);
          LocInvPeriod.SETRANGE("Adj. After Close",TRUE);
          IF LocInvPeriod.FINDSET THEN BEGIN
            REPEAT
              IF LocInvPeriod."Period End Closed" THEN
                LocInvPeriod.OpenPeriodEnd;
            UNTIL LocInvPeriod.NEXT = 0;
          END;
        UNTIL Location.NEXT = 0;
    END;

    PROCEDURE CreateUsage@1240030002();
    BEGIN
      CLEAR(UsageLedCreate);
      UsageLedCreate.RUN;
    END;

    PROCEDURE ProcessPeriodEnd@1240030000();
    BEGIN
      InvMgmtSetup.GET;
      InvMgmtSetup.TESTFIELD("Usage Start Date");

      FirstForecastDate := FindFirstForecastDate;

      CheckForAdjPeriod;
      Location.SETRANGE("Enable Adv. Forecasting",TRUE);
      IF Location.FINDSET THEN







        REPEAT

          CLEAR(VendPerfCalc);
          VendPerfCalc.RUN(Location);
          COMMIT;

          CLEAR(DayEndCalc);
          DayEndCalc.RUN(Location);
          COMMIT;

          LocInvPeriod.RESET;
          LocInvPeriod.SETCURRENTKEY("Location Code","Starting Date","Period End Closed");
          LocInvPeriod.SETRANGE("Location Code",Location.Code);
          LocInvPeriod.SETFILTER("Starting Date",'%1..',InvMgmtSetup."Usage Start Date");
          LocInvPeriod.SETRANGE("Period End Closed",FALSE);
          IF LocInvPeriod.FINDSET THEN
            REPEAT
              IF WORKDATE > LocInvPeriod."Ending Date" THEN BEGIN
                IF (FirstForecastDate <= LocInvPeriod."Starting Date") THEN BEGIN
                  CLEAR(PerEndCalc);
                  PerEndCalc.RUN(LocInvPeriod);
                END ELSE BEGIN
                  CLEAR(PerEndPrep);
                  PerEndPrep.RUN(LocInvPeriod);
                END;

                COMMIT;
              END;
            UNTIL LocInvPeriod.NEXT = 0;
        UNTIL Location.NEXT = 0;
    END;

    PROCEDURE ReforecastSelectedLocations@1240030005();
    VAR
      Reforecast@1240030002 : Codeunit 14000571;
    BEGIN
      IF Location.FINDSET THEN
        REPEAT
          CLEAR(Reforecast);
          Reforecast.ProcessLocation(Location);
        UNTIL Location.NEXT = 0;
    END;

    PROCEDURE FindFirstForecastDate@1240020000() BeginForecastDate : Date;
    VAR
      ForecastInvPeriod@1240020000 : Record 14000552;
    BEGIN
      BeginForecastDate := InvMgmtSetup."Usage Start Date";
      IF InvMgmtSetup."Forecast Calc. Prev. Periods" = 0 THEN
        EXIT(BeginForecastDate);
      ForecastInvPeriod.RESET;
      ForecastInvPeriod.RESET;
      ForecastInvPeriod.SETRANGE(Type, ForecastInvPeriod.Type::" ");
      ForecastInvPeriod.SETRANGE("Starting Date", 0D, WORKDATE);
      ForecastInvPeriod.FIND('+');
      IF NOT (ForecastInvPeriod.COUNT <= (InvMgmtSetup."Forecast Calc. Prev. Periods"+1)) THEN BEGIN
        IF (ForecastInvPeriod.NEXT(-(InvMgmtSetup."Forecast Calc. Prev. Periods"+1)) <> 0) THEN
          BeginForecastDate := ForecastInvPeriod."Starting Date";
      END;
      EXIT(BeginForecastDate);
    END;

    BEGIN
    END.
  }
}

