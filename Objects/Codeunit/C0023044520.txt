OBJECT Codeunit 23044520 WHI License Plate Mgmt.
{
  OBJECT-PROPERTIES
  {
    Date=04/14/21;
    Time=[ 4:22:57 PM];
    Modified=Yes;
    Version List=WHI2.4.7684.0;
  }
  PROPERTIES
  {
    TableNo=23044511;
    Permissions=TableData 6550=rimd;
    OnRun=VAR
            liEventID@1000000002 : Integer;
            ltxtOutputText@1000000001 : BigText;
            losReturnMessage@1000000000 : OutStream;
          BEGIN
            codRegionCode := Rec.getValue('device_culture');

            liEventID := Rec.getEvent();
            //ERROR(FORMAT(liEventID));
            executeEvent(liEventID, Rec, ltxtOutputText);
            "Extensibility Blob".CREATEOUTSTREAM( losReturnMessage );
            ltxtOutputText.WRITE(losReturnMessage);
            MODIFY();
          END;

  }
  CODE
  {
    VAR
      cuCommonFuncs@1000000000 : Codeunit 23044501;
      cuResMgmt@1000000006 : Codeunit 23044514;
      cuPrintingMgmt@1000000019 : Codeunit 23044525;
      cuCustomizedFuncs@1000000024 : Codeunit 23044515;
      cuCommonBase@1000000047 : Codeunit 23044519;
      cuCreateResEntry@1000000029 : Codeunit 99000830;
      cuLPCommon@1000000001 : Codeunit 23044541;
      cuMisc@1000000033 : Codeunit 23044502;
      cuActivityLogMgt@1000000044 : Codeunit 23044537;
      cuReclassMgmt@1000000045 : Codeunit 23044524;
      cuSessionHelper@1000000048 : Codeunit 23044527;
      cuDatasetTools@1000000008 : Codeunit 23044535;
      cuJournalFunc@1000000010 : Codeunit 23044528;
      cuTranslationMgmt@1000000022 : Codeunit 23044526;
      iEventID@1000000009 : Integer;
      optSourceDocument@1000000015 : ' ,Purchase Order,Sales Order,Inbound Transfer,Outbound Transfer,Prod. Order,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick,Receipt,Shipment,Reclass,Purchase Return Order,Assembly,Invt. Movement';
      codRegionCode@1000000021 : Code[10];
      codNewLPHeaderNo@1000000002 : Code[20];
      iNextNewLPLineNumber@1000000003 : Integer;
      cuWMDMActivityLogMgt@1000000004 : Codeunit 23044537;

    PROCEDURE executeEvent@1000000022(piEventID@1000000000 : Integer;VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000002 : BigText);
    BEGIN
      iEventID := piEventID;
      CASE piEventID OF
        95001:  getLicensePlate(ptrecEventParams, pbsOutput);
        95002:  deleteLine(ptrecEventParams, pbsOutput);
        95003:  addLine(ptrecEventParams, pbsOutput);
        95004:  updateLine(ptrecEventParams, pbsOutput);
        95005:  changeStatus(ptrecEventParams, pbsOutput);
        95006:  cuPrintingMgmt.handlePrint( ptrecEventParams, pbsOutput);
        95007:  getDocList(ptrecEventParams, pbsOutput);
        95008:  getLPUsage(ptrecEventParams, pbsOutput);
        95009:  removeLPUsage(ptrecEventParams, pbsOutput);
        95010:  isSerialNumberInLP(ptrecEventParams, pbsOutput);
        95011:  deleteLP(ptrecEventParams, pbsOutput);
        95012:  setUnbuildOnReceipt(ptrecEventParams, pbsOutput);
        95013:  updateReceivingLine(ptrecEventParams, pbsOutput);
        95014:  changeBin(ptrecEventParams, pbsOutput);
        95015:  updateLPCharacteristics(ptrecEventParams, pbsOutput);
        95016:  getTransferList(ptrecEventParams, pbsOutput);
        95017:  transferLine(ptrecEventParams, pbsOutput);
        95018:  findUsage(ptrecEventParams, pbsOutput);
        95019:  getLicensePlateProperties(ptrecEventParams, pbsOutput);
        95020:  updateProcessState(ptrecEventParams, pbsOutput);
        95022:  createLPFromTemplate(ptrecEventParams, pbsOutput);
        95023:  SetLPProperties(ptrecEventParams,pbsOutput);
      END;
    END;

    PROCEDURE getLicensePlate@1000000003(VAR ptrecEventParams@1000000010 : TEMPORARY Record 23044511;VAR pbsOutput@1000000009 : BigText);
    VAR
      lrecLPSetup@1000000014 : Record 23044523;
      lcodLocation@1000000013 : Code[10];
      lcodLicensePlateNumber@1000000012 : Code[20];
      lrecLPHeader@1000000011 : Record 23044505;
      lsDescription@1000000008 : Text;
      lsPrinterName@1000000007 : Text[250];
      lcodBinCode@1000000004 : Code[20];
      lrecConfig@1000000003 : Record 23044504;
      lbsIgnored@1000000002 : BigText;
      lcodTemplateName@1000000001 : Code[20];
      lrecLPTemplate@1000000000 : Record 23044536;
      lcodUserName@100000000 : Code[50];
    BEGIN
      // Returns the License Plate document as an xml string.
      //
      // If no lp_number is supplied, then a new license plate will be created.
      lcodLocation := ptrecEventParams.getValue('location');
      lcodLicensePlateNumber := ptrecEventParams.getValue('lp_number');
      lsDescription := ptrecEventParams.getValue('description');
      lcodBinCode := ptrecEventParams.getValue('bin_code');
      lcodTemplateName := ptrecEventParams.getValue('lp_template_Name');


      cuCommonFuncs.getDeviceConfig(lrecConfig,ptrecEventParams);


      // create one if required
      IF( lcodLicensePlateNumber = '' ) THEN BEGIN
        CLEAR(lrecLPHeader);
        lrecLPHeader.INIT;
        lrecLPHeader.Description := COPYSTR( lsDescription, 1, MAXSTRLEN( lrecLPHeader.Description ) ) ;
        lrecLPHeader."Location Code" := lcodLocation;
        lrecLPHeader."Bin Code" := lcodBinCode;
        lrecLPSetup.GET;
        lrecLPHeader."Maximum Weight" := lrecLPSetup."License Plate Maximum Weight";
        lrecLPHeader."Minimum Weight" := lrecLPSetup."License Plate Minimum Weight";
        lrecLPHeader."Maximum Cubage" := lrecLPSetup."License Plate Maximum Cubage";
        lrecLPHeader."Minimum Cubage" := lrecLPSetup."License Plate Minimum Cubage";
        lrecLPHeader."Dim. Unit of Measure" := lrecLPSetup."Dimensions Unit of Measure";
        lrecLPHeader."Cubage Unit of Measure" := lrecLPSetup."Cubage Unit of Measure";
        lrecLPHeader."Weight Unit of Measure" := lrecLPSetup."Weight Unit of Measure";

        lrecLPHeader."Created by Device" := lrecConfig.Code;
        lrecLPHeader."Last Modified by Device" := lrecConfig.Code;
        lrecLPHeader."Template Code" := lcodTemplateName;
        lrecLPHeader.INSERT(TRUE);

        lcodUserName := cuCommonFuncs.getUserNameWithDomain(ptrecEventParams);
        IF (lcodUserName <> '') THEN BEGIN
          lrecLPHeader."Created By" := lcodUserName;
          lrecLPHeader.MODIFY(FALSE);
        END;


        lcodLicensePlateNumber := lrecLPHeader."No.";

        IF ( lrecConfig."LP Print on Create" ) THEN BEGIN
          ptrecEventParams.setValue('lp_number', lcodLicensePlateNumber );
          cuPrintingMgmt.handlePrint( ptrecEventParams, lbsIgnored);
        END;

        IF (lcodTemplateName <> '') THEN BEGIN
          IF (lrecLPTemplate.GET(lcodTemplateName)) THEN BEGIN
            cuLPCommon.updateLPFromTemplate(lrecLPHeader, lcodTemplateName);
          END ELSE BEGIN
            ERROR(cuTranslationMgmt.getTranslatedString('ERR_LP_INVALID_TEMPLATE', codRegionCode), lcodTemplateName);
          END;
        END;
      END;


      ptrecEventParams.setValue('lp_number',lcodLicensePlateNumber);

      getLPDocument(lcodLicensePlateNumber,pbsOutput);

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX License Plate Header"));
      ptrecEventParams.setValue('Document No.', lcodLicensePlateNumber);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE deleteLine@1000000004(VAR ptrecEventParams@1000000008 : TEMPORARY Record 23044511;VAR pbsOutput@1000000007 : BigText);
    VAR
      lcodLocation@1000000005 : Code[10];
      lcodLicensePlateNumber@1000000004 : Code[20];
      liLineNumber@1000000003 : Integer;
      lrecLPLine@1000000002 : Record 23044506;
      lbsXMLOutput@1000000001 : BigText;
      lrecItem@1000000000 : Record 27;
    BEGIN
      // Deletes the requested license plate line.
      lcodLocation := ptrecEventParams.getValue('location');
      lcodLicensePlateNumber := ptrecEventParams.getValue('lp_number');
      liLineNumber := ptrecEventParams.getLineNo();

      lrecLPLine.SETRANGE("License Plate No.",lcodLicensePlateNumber);
      lrecLPLine.SETRANGE("Line No.",liLineNumber);
      lrecLPLine.FIND('-');

      lrecLPLine.DELETE(TRUE);
      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX License Plate Line"));
      ptrecEventParams.setValue('Document No.', lcodLicensePlateNumber);
      ptrecEventParams.setValue('Document Line No.', FORMAT(liLineNumber));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE addLine@1000000005(VAR ptrecEventParams@1000000014 : TEMPORARY Record 23044511;VAR pbsOutput@1000000013 : BigText);
    VAR
      lrecConfig@1000000022 : Record 23044504;
      lcodLocation@1000000021 : Code[10];
      lcodLicensePlateNumber@1000000020 : Code[20];
      lcodItemNumber@1000000019 : Text;
      lsSerialNumber@1000000018 : Text;
      ldQuantity@1000000017 : Decimal;
      lsBarcodeData@1000000016 : Text[250];
      liNextLineNumber@1000000015 : Integer;
      lrecLPLine@1000000012 : Record 23044506;
      lcodVariantCode@1000000011 : Text;
      lsLotNumber@1000000010 : Text;
      lrecItem@1000000009 : Record 27;
      ldCurrentTotalGrossWeight@1000000008 : Decimal;
      ldCurrentTotalNetWeight@1000000007 : Decimal;
      liItemCount@1000000006 : Integer;
      lrecLPHeader@1000000005 : Record 23044505;
      lrecCustomLPLine@1000000004 : Record 23044506;
      lrecUOM@1000000003 : Record 204;
      ldtExpirationDate@1000000002 : Date;
      ldnOutput@1000000023 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lbsOutput@1000000000 : BigText;
    BEGIN
      // Adds the requested line to the license plate.
      lcodLocation := ptrecEventParams.getValue('location');
      lcodLicensePlateNumber := ptrecEventParams.getValue('lp_number');
      lcodItemNumber := ptrecEventParams.getValue('item_number');
      lsSerialNumber := ptrecEventParams.getSerialNo();
      lsLotNumber := ptrecEventParams.getLotNo();
      lcodVariantCode := ptrecEventParams.getValue('variant_code');
      lrecItem.GET( lcodItemNumber );
      ldQuantity := cuCommonFuncs.GetQuantityConvertedToBaseUom(lrecItem,ptrecEventParams);
      lsBarcodeData := ptrecEventParams.getValue('barcode');

      IF (ptrecEventParams.getUnitOfMeasure(lrecUOM)) THEN;


      ldtExpirationDate := cuCommonFuncs.getExpirationDate(ptrecEventParams);


      lrecLPLine.SETRANGE("License Plate No.",lcodLicensePlateNumber);
      IF( lrecLPLine.FINDLAST ) THEN
        liNextLineNumber := lrecLPLine."Line No." + 10000
      ELSE
        liNextLineNumber := 10000;

      CLEAR(lrecLPLine);
      lrecLPLine.VALIDATE("License Plate No.",lcodLicensePlateNumber);
      lrecLPLine.VALIDATE("Line No.",liNextLineNumber);
      lrecLPLine.VALIDATE("No.",lcodItemNumber);
      lrecLPLine.VALIDATE("Serial No.",lsSerialNumber);
      lrecLPLine.VALIDATE("Lot No.",lsLotNumber);
      lrecLPLine.VALIDATE("Variant Code",lcodVariantCode);
      lrecLPLine.VALIDATE("Unit of Measure Code", lrecUOM.Code);
      lrecLPLine.VALIDATE(Quantity,ldQuantity);
      lrecLPLine.VALIDATE(Barcode,lsBarcodeData);

      IF (ldtExpirationDate <> 0D) THEN BEGIN
        lrecLPLine.VALIDATE("Expiration Date", ldtExpirationDate);
      END;

      lrecLPLine.INSERT(TRUE);
      //IF ( cuCustomizedFuncs.OnUpdateLicensePlateLine( iEventID, lrecLPLine, ptrecEventParams, pbsOutput ) ) THEN BEGIN
      //  ptrecEventParams.getExtensibilityLPLine( lrecCustomLPLine );
      //  lrecLPLine.GET(lcodLicensePlateNumber, liNextLineNumber);
      //  lrecLPLine := lrecCustomLPLine;
      //  lrecLPLine.MODIFY(); // update
      //END;

      // return the line xml definition
      ldnOutput := ldnOutput.StringBuilder();
      ldnOutput.Append('<DATASET>');
      ldnOutput.Append('<TABLE id="line">');
      ldnOutput.Append('<COLS>');
      cuCommonFuncs.initializeColumns(TRUE);
      cuCommonFuncs.addDSColumnsFromConfigDN(ldnOutput, 95001, '', DATABASE::"IWX License Plate Line" );
      ldnOutput.Append('</COLS><ROWS>');
      getLPLine(lrecLPLine, ldnOutput);
      ldnOutput.Append('</ROWS></TABLE>');
      lrecLPHeader.GET(lcodLicensePlateNumber);
      testLPCharacteristicsInWS(lrecLPHeader, lbsOutput);
      ldnOutput.Append(FORMAT(lbsOutput));
      ldnOutput.Append('</DATASET>');
      pbsOutput.ADDTEXT(ldnOutput.ToString());

      cuSessionHelper.GetDeviceConfig(lrecConfig);
      cuLPCommon.updateCharacteristics(lrecLPHeader, lrecLPLine, FALSE, lrecConfig.Code);

      SetLPModifiedBy(lrecLPHeader, ptrecEventParams);

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX License Plate Line"));
      ptrecEventParams.setValue('Document No.', lcodLicensePlateNumber);
      ptrecEventParams.setValue('Document Line No.', FORMAT(liNextLineNumber));
      ptrecEventParams.setValue('New Quantity', FORMAT(ldQuantity));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE updateLine@1000000006(VAR ptrecEventParams@1000000009 : TEMPORARY Record 23044511;VAR pbsOutput@1000000008 : BigText);
    VAR
      lrecConfig@1000000015 : Record 23044504;
      lcodLocation@1000000014 : Code[10];
      lcodLicensePlateNumber@1000000013 : Code[20];
      liLineNumber@1000000012 : Integer;
      ldQuantity@1000000011 : Decimal;
      lrecLPLine@1000000010 : Record 23044506;
      lbsXMLOutput@1000000007 : BigText;
      lrecLPHeader@1000000006 : Record 23044505;
      lrecCustomLPLine@1000000005 : Record 23044506;
      lrecItem@1000000004 : Record 27;
      lcodUOM@1000000003 : Code[10];
      ldPreviousQuantity@1000000002 : Decimal;
      ldnOutput@1000000016 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lbsOutput@1000000000 : BigText;
    BEGIN
      // Changes the line quantity.
      lcodLocation := ptrecEventParams.getValue('location');
      lcodLicensePlateNumber := ptrecEventParams.getValue('lp_number');
      liLineNumber := ptrecEventParams.getLineNo();
      lrecLPLine.GET(lcodLicensePlateNumber, liLineNumber);
      lrecItem.GET( lrecLPLine."No." );

      lcodUOM := ptrecEventParams.getValue('uom');
      IF (lcodUOM = '') THEN BEGIN
        ldQuantity := cuCommonFuncs.GetQuantityConvertedToBaseUom(lrecItem,ptrecEventParams);
      END ELSE BEGIN
        ldQuantity := ptrecEventParams.getValueAsDecimal('quantity');
      END;

      //IF ( cuCustomizedFuncs.OnUpdateLicensePlateLine( iEventID, lrecLPLine, ptrecEventParams, pbsOutput ) ) THEN BEGIN
      //  ptrecEventParams.getExtensibilityLPLine( lrecCustomLPLine );
      //  lrecLPLine.GET(lcodLicensePlateNumber, liLineNumber);
      //  lrecLPLine := lrecCustomLPLine;
      //END;

      ldPreviousQuantity := lrecLPLine.Quantity;

      lrecLPLine.VALIDATE(Quantity,ldQuantity);
      IF (lcodUOM <> '') THEN BEGIN
        lrecLPLine.VALIDATE("Unit of Measure Code", lcodUOM);
      END;

      lrecLPLine.MODIFY(TRUE);

      ldnOutput := ldnOutput.StringBuilder();
      ldnOutput.Append('<DATASET>');
      ldnOutput.Append('<TABLE id="line">');
      ldnOutput.Append('<COLS>');
      cuCommonFuncs.initializeColumns(TRUE);
      cuCommonFuncs.addDSColumnsFromConfigDN(ldnOutput, 95001, '', DATABASE::"IWX License Plate Line" );
      ldnOutput.Append('</COLS><ROWS>');
      getLPLine(lrecLPLine, ldnOutput);
      ldnOutput.Append('</ROWS></TABLE>');
      lrecLPHeader.GET(lcodLicensePlateNumber);
      testLPCharacteristicsInWS(lrecLPHeader, lbsOutput);
      ldnOutput.Append(FORMAT(lbsOutput));
      ldnOutput.Append('</DATASET>');
      pbsOutput.ADDTEXT(ldnOutput.ToString());

      cuSessionHelper.GetDeviceConfig(lrecConfig);
      cuLPCommon.updateCharacteristics(lrecLPHeader, lrecLPLine, FALSE, lrecConfig.Code);

      SetLPModifiedBy(lrecLPHeader, ptrecEventParams);

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX License Plate Line"));
      ptrecEventParams.setValue('Document No.', lcodLicensePlateNumber);
      ptrecEventParams.setValue('Document Line No.', FORMAT(liLineNumber));
      ptrecEventParams.setValue('Previous Quantity', FORMAT(ldPreviousQuantity));
      ptrecEventParams.setValue('New Quantity', FORMAT(ldQuantity));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE changeStatus@1000000010(VAR ptrecEventParams@1000000006 : TEMPORARY Record 23044511;VAR pbsOutput@1000000005 : BigText);
    VAR
      lcodLocation@1000000004 : Code[10];
      lcodLicensePlateNumber@1000000003 : Code[20];
      liNewStatus@1000000002 : Integer;
      lrecLPHeader@1000000001 : Record 23044505;
      lrecConfig@1000000000 : Record 23044504;
    BEGIN
      // Changes the License Plate status based on the supplied param.
      lcodLocation := ptrecEventParams.getValue('location');
      lcodLicensePlateNumber := ptrecEventParams.getValue('lp_number');
      liNewStatus := ptrecEventParams.getValueAsInt('status');
      lrecLPHeader.GET(lcodLicensePlateNumber);
      lrecLPHeader.VALIDATE(Status,liNewStatus);

      cuSessionHelper.GetDeviceConfig(lrecConfig);
      lrecLPHeader."Last Modified by Device" := lrecConfig.Code;

      lrecLPHeader.MODIFY(TRUE);

      SetLPModifiedBy(lrecLPHeader, ptrecEventParams);

      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX License Plate Header"));
      ptrecEventParams.setValue('Document No.', lcodLicensePlateNumber);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getDocList@1000000011(VAR ptrecEventParams@1000000006 : TEMPORARY Record 23044511;VAR pbsOutput@1000000005 : BigText);
    VAR
      lrecLPSetup@1000000010 : Record 23044523;
      lrecConfig@1000000001 : Record 23044504;
      lrecLPHeader@1000000008 : Record 23044505;
      ltrecLPHeader@1000000011 : TEMPORARY Record 23044505;
      lrrefDocListRef@1000000012 : RecordRef;
      lcuDatasetTools@1000000013 : Codeunit 23044535;
      ldnOutput@1000000015 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lsFilter@1000000009 : Text[250];
      lsItemFilter@1000000014 : Text;
      lsVariantFilter@1000000016 : Text;
      lsLotFilter@1000000017 : Text;
      lsSerialFilter@1000000018 : Text;
      lcodLocation@1000000004 : Code[10];
      lcodSourceDocumentNo@1000000000 : Code[20];
      liOnlyUnAssigned@1000000007 : Integer;
      liMaxLPRecords@1000000003 : Integer;
      liCurrentRecordCounter@1000000002 : Integer;
    BEGIN
      // Returns a list of all the license plates.
      lsFilter := ptrecEventParams.getValue('filter');
      lcodLocation := ptrecEventParams.getValue('location');
      liOnlyUnAssigned := ptrecEventParams.getValueAsInt('unassigned');
      lcodSourceDocumentNo := ptrecEventParams.getValue('lp_source_doc');

      lsItemFilter := ptrecEventParams.getValue('item_filter');
      lsVariantFilter := ptrecEventParams.getValue('variant_filter');
      lsLotFilter := ptrecEventParams.getValue('lot_filter');
      lsSerialFilter := ptrecEventParams.getValue('serial_filter');

      cuCommonFuncs.getDeviceConfig(lrecConfig,ptrecEventParams);

      lrecLPSetup.GET();
      liMaxLPRecords := lrecLPSetup."LP Max List";
      IF liMaxLPRecords  = 0 THEN
        liMaxLPRecords := 999999;


      lrecLPHeader.ASCENDING(FALSE); // show most recent LPs first.
      lrecLPHeader.SETFILTER("Location Code",'%1|%2','',lcodLocation);
      lrecLPHeader.SETFILTER(Status,'%1|%2',lrecLPHeader.Status::" ",lrecLPHeader.Status::Unbuilt);
      lrecLPHeader.SETRANGE(Locked, FALSE ); // do not show locked records

      IF( lsFilter <> '' ) THEN BEGIN
        lsFilter := '*' + lsFilter + '*';
        lrecLPHeader.SETFILTER("No.",lsFilter);
      END;

      IF( liOnlyUnAssigned = 1 ) THEN BEGIN
        lrecLPHeader.SETFILTER("Source Document No.",'%1','');
        lrecLPHeader.SETRANGE(Status,lrecLPHeader.Status::" ");
      END;

      IF (lcodSourceDocumentNo <> '') THEN BEGIN
          lrecLPHeader.SETFILTER("Source Document No.",'%1|''''', lcodSourceDocumentNo);
      END;

      IF( lrecLPHeader.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          IF (lsItemFilter = '') OR IsItemOnLP(lrecLPHeader."No.",lsItemFilter,lsVariantFilter,lsLotFilter,lsSerialFilter) THEN BEGIN
            liCurrentRecordCounter += 1;
            ltrecLPHeader := lrecLPHeader;
            ltrecLPHeader.INSERT;


            lcuDatasetTools.SetOverrideValueEachRow( iEventID,
                                                  DATABASE::"IWX License Plate Header",
                                                  -1,
                                                  lrecLPHeader."No.",
                                                  '%LP%'+ FORMAT(lrecLPHeader."No."),
                                                  FALSE,
                                                  TRUE,    // has override value
                                                  lrecLPHeader.FIELDNO("No."));
          END;
        UNTIL ( ( lrecLPHeader.NEXT() = 0) OR ( liCurrentRecordCounter >= liMaxLPRecords) );
      END;


      ldnOutput := ldnOutput.StringBuilder();

      ltrecLPHeader.RESET;
      lrrefDocListRef.GETTABLE(ltrecLPHeader);
      IF ( lrrefDocListRef.FINDFIRST() ) THEN;

      lcuDatasetTools.BuildLinesOnlyDataset(
        iEventID,
        lrrefDocListRef,
        FALSE,
        ldnOutput);

      pbsOutput.ADDTEXT(ldnOutput.ToString());


      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX License Plate Header"));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getLPUsage@1000000019(VAR ptrecEventParams@1000000006 : TEMPORARY Record 23044511;VAR pbsOutput@1000000005 : BigText);
    VAR
      liSourceDocument@1000000008 : Integer;
      lcodSourceNumber@1000000007 : Code[20];
      lrecLPHeader@1000000004 : Record 23044505;
      ltrecLPAlreadyUsed@1000000000 : TEMPORARY Record 23044505;
      lrecCountSheetLine@1000000009 : Record 23044301;
    BEGIN
      // Returns a list of License Plates attached to a particular document.
      liSourceDocument := ptrecEventParams.getValueAsInt('source_doc');
      lcodSourceNumber := ptrecEventParams.getValue('source_number');

      pbsOutput.ADDTEXT('<DATASETS>');

      IF( liSourceDocument <> 99 ) THEN BEGIN
        // if it's not an advanced count sheet, then just filter by the source
        // document on the header.
        lrecLPHeader.SETRANGE("Source Document Type",liSourceDocument);
        lrecLPHeader.SETRANGE("Source Document No.",lcodSourceNumber);
        IF (NOT lrecLPHeader.FINDSET(FALSE)) THEN BEGIN
          IF (liSourceDocument = lrecLPHeader."Source Document Type"::Movement) THEN BEGIN
            lrecLPHeader.SETRANGE("Source Document Type", lrecLPHeader."Source Document Type"::"Invt. Movement");
          END;
        END;
        IF( lrecLPHeader.FINDSET(FALSE) ) THEN BEGIN
          REPEAT
            getLPDocument(lrecLPHeader."No.",pbsOutput);
          UNTIL(lrecLPHeader.NEXT=0);
        END;

      END ELSE BEGIN
        ltrecLPAlreadyUsed.RESET();
        lrecCountSheetLine.SETRANGE("Sheet Name",lcodSourceNumber);
        lrecCountSheetLine.SETFILTER("License Plate No.",'<>%1','');
        IF( lrecCountSheetLine.FIND('-') ) THEN BEGIN
          ltrecLPAlreadyUsed.RESET();
          IF ( NOT ltrecLPAlreadyUsed.GET( lrecCountSheetLine."License Plate No." ) ) THEN BEGIN
            // first, keep track of what we already added.
            ltrecLPAlreadyUsed.INIT();
            ltrecLPAlreadyUsed."No." := FORMAT( lrecCountSheetLine."License Plate No." );
            ltrecLPAlreadyUsed.INSERT(FALSE);

            // then add the result.
            getLPDocument(ltrecLPAlreadyUsed."No.", pbsOutput);
          END; // if it's not already added.
        END; // if we can find count lines with this usage.
      END;

      pbsOutput.ADDTEXT('</DATASETS>');

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX License Plate Header"));
      ptrecEventParams.setValue('Document No.', lrecLPHeader."No.");
      ptrecEventParams.setValue('Source Document Type', FORMAT(liSourceDocument));
      ptrecEventParams.setValue('Source Document No.', lcodSourceNumber);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE removeLPUsage@1000000025(VAR ptrecEventParams@1000000009 : TEMPORARY Record 23044511;VAR pbsOutput@1000000008 : BigText);
    VAR
      lcodLicensePlateNumber@1000000006 : Code[20];
      lrecLPHeader@1000000005 : Record 23044505;
      lrecLineUsage@1000000004 : Record 23044507;
      lcodCountSheetName@1000000003 : Code[20];
      lrecCountSheetLine@1000000002 : Record 23044301;
      lcodLocation@1000000001 : Code[10];
      lrecCountHeader@1000000000 : Integer;
    BEGIN
      // Removes the License Plate usage from the source document.
      lcodLicensePlateNumber := ptrecEventParams.getValue('lp_number');
      lcodCountSheetName := ptrecEventParams.getValue('count_sheet');
      IF( lcodCountSheetName = '' ) THEN BEGIN
        lrecLPHeader.GET(lcodLicensePlateNumber);
        lrecLPHeader.removeUsage(TRUE);
      END
      ELSE BEGIN
        lcodLocation := ptrecEventParams.getValue('location');
        lrecCountSheetLine.SETRANGE("Sheet Name",lcodCountSheetName);
        lrecCountSheetLine.SETRANGE("License Plate No.",lcodLicensePlateNumber);
        lrecCountSheetLine.DELETEALL(TRUE);
      END;
      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX License Plate Header"));
      ptrecEventParams.setValue('Document No.', lcodLicensePlateNumber);
      IF (lcodCountSheetName <> '' ) THEN BEGIN
        ptrecEventParams.setValue('Source Document Type', FORMAT(DATABASE::"IWX Count Sheet Line"));
        ptrecEventParams.setValue('Source Document No.', lcodCountSheetName);
      END;
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE isSerialNumberInLP@1000000041(VAR ptrecEventParams@1000000009 : TEMPORARY Record 23044511;VAR pbsOutput@1000000006 : BigText);
    VAR
      lcodItemNumber@1000000005 : Text;
      lsSerialNumber@1000000004 : Text;
      lrecLPLine@1000000003 : Record 23044506;
      lrecLPHeader@1000000002 : Record 23044505;
      lcodOnLPNumber@1000000001 : Code[20];
      lrecSalesHeader@1000000000 : Record 36;
    BEGIN
      // Determines if the item/serial number is in an active license plate.
      lcodItemNumber := ptrecEventParams.getValue('item_number');
      lsSerialNumber := ptrecEventParams.getSerialNo();

      lrecLPLine.SETRANGE(Type,lrecLPLine.Type::Item);
      lrecLPLine.SETRANGE("No.",lcodItemNumber);
      lrecLPLine.SETRANGE("Serial No.",lsSerialNumber);
      lrecLPLine.SETFILTER("LP Status",'<>%1',lrecLPLine."LP Status"::Unbuilt);


      lcodOnLPNumber := '';

      // we'll make a special exception for shipped license plates being used for outbound transfer orders and
      // intercompany sales orders
      IF( lrecLPLine.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          IF( lcodOnLPNumber = '' ) THEN BEGIN
            lrecLPHeader.GET(lrecLPLine."License Plate No.");
            lcodOnLPNumber := lrecLPHeader."No.";

            IF( lrecLPHeader."Shipped Source Document" = lrecLPHeader."Shipped Source Document"::"Sales Order" ) THEN BEGIN
              IF( lrecSalesHeader.GET(lrecSalesHeader."Document Type"::Order,lrecLPHeader."Shipped Source No.") ) THEN BEGIN
                IF( NOT cuCommonBase.isInterCompanyDocument(lrecSalesHeader."Sell-to IC Partner Code") ) THEN BEGIN
                  lcodOnLPNumber := ''; // clear it out as it was possibly returned
                END;
              END;
            END;
          END;
        UNTIL( lrecLPLine.NEXT = 0 );
      END;

      pbsOutput.ADDTEXT(STRSUBSTNO('<VALUE>%1</VALUE>',lcodOnLPNumber));

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE deleteLP@1000000046(VAR ptrecEventParams@1000000004 : TEMPORARY Record 23044511;VAR pbsOutput@1000000003 : BigText);
    VAR
      lcodLicensePlateNumber@1000000001 : Code[20];
      lrecLPHeader@1000000000 : Record 23044505;
    BEGIN
      // Deletes the license plate.
      lcodLicensePlateNumber := ptrecEventParams.getValue('lp_number');

      lrecLPHeader.GET(lcodLicensePlateNumber);
      lrecLPHeader.DELETE(TRUE);

      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX License Plate Header"));
      ptrecEventParams.setValue('Document No.', lcodLicensePlateNumber);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE setUnbuildOnReceipt@1000000051(VAR ptrecEventParams@1000000007 : TEMPORARY Record 23044511;VAR pbsOutput@1000000006 : BigText);
    VAR
      lcodLicensePlateNumber@1000000004 : Code[20];
      lbUnbuild@1000000003 : Boolean;
      lbApplyToAll@1000000002 : Boolean;
      lrecLPHeader@1000000001 : Record 23044505;
      lrecLPHeaderAll@1000000000 : Record 23044505;
    BEGIN
      lcodLicensePlateNumber := ptrecEventParams.getValue('lp_number');
      lbUnbuild := ptrecEventParams.getValueAsBool('unbuild');
      lbApplyToAll := ptrecEventParams.getValueAsBool('apply_all');

      lrecLPHeader.GET(lcodLicensePlateNumber);

      IF( lbApplyToAll ) THEN BEGIN
        lrecLPHeaderAll.SETRANGE("Source Document Type",lrecLPHeader."Source Document Type");
        lrecLPHeaderAll.SETRANGE("Source Document No.",lrecLPHeader."Source Document No.");
        lrecLPHeaderAll.MODIFYALL("Unbuild on Receipt",lbUnbuild,TRUE);
      END
      ELSE BEGIN
        lrecLPHeader.VALIDATE("Unbuild on Receipt",lbUnbuild);
        lrecLPHeader.MODIFY(TRUE);
      END;

      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX License Plate Header"));
      ptrecEventParams.setValue('Document No.', lcodLicensePlateNumber);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getLPDocument@1000000008(pcodLicensePlateNumber@1000000000 : Code[20];VAR pbsXMLOutput@1000000002 : BigText);
    VAR
      lrecLPHeader@1000000006 : Record 23044505;
      lrecLPLine@1000000005 : Record 23044506;
      lrecLPLineUsage@1000000004 : Record 23044507;
      ldnOutput@1000000007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lrrefWriter@1000000001 : RecordRef;
    BEGIN
      lrecLPHeader.GET(pcodLicensePlateNumber);
      lrecLPHeader.CALCFIELDS("Item Quantity Count");

      lrecLPHeader.SETRECFILTER();
      ldnOutput := ldnOutput.StringBuilder();
      ldnOutput.Append('<DATASET>');
      ldnOutput.Append('<TABLE id="header">');
      ldnOutput.Append('<COLS>');
      cuCommonFuncs.initializeColumns( TRUE );
      cuCommonFuncs.addDSColumnsFromConfigDN(ldnOutput, 95001, '', DATABASE::"IWX License Plate Header" );
      ldnOutput.Append('</COLS>');
      ldnOutput.Append('<ROWS><R><FIELDS>');
      lrrefWriter.GETTABLE(lrecLPHeader);
      cuCommonFuncs.addDSFieldsForRecordDN(ldnOutput, lrrefWriter, 95001, '');
      ldnOutput.Append('</FIELDS></R></ROWS>');
      ldnOutput.Append('</TABLE>');

      ldnOutput.Append('<TABLE id="line">');
      ldnOutput.Append('<COLS>');
      cuCommonFuncs.initializeColumns(TRUE);
      cuCommonFuncs.addDSColumnsFromConfigDN(ldnOutput, 95001, '', DATABASE::"IWX License Plate Line" );
      ldnOutput.Append('</COLS><ROWS>');


      GetLPLineRecursive(lrecLPHeader."No.", ldnOutput);

      ldnOutput.Append('</ROWS></TABLE>');

      ldnOutput.Append('<TABLE id="usage">');
      ldnOutput.Append('<COLS>');
      cuCommonFuncs.initializeColumns(TRUE);
      cuCommonFuncs.addDSColumnsFromConfigDN(ldnOutput, 95001, '', DATABASE::"IWX License Plate Line Usage" );
      ldnOutput.Append('</COLS><ROWS>');
      lrecLPLineUsage.SETRANGE("License Plate No.",lrecLPHeader."No.");

      IF( lrecLPLineUsage.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          getLPLineUsage(lrecLPLineUsage, ldnOutput);
        UNTIL(lrecLPLineUsage.NEXT=0);
      END;

      ldnOutput.Append('</ROWS></TABLE>');
      ldnOutput.Append('</DATASET>');
      pbsXMLOutput.ADDTEXT(ldnOutput.ToString());
    END;

    PROCEDURE getLPLine@1000000009(VAR precLPLine@1000000001 : Record 23044506;VAR pdnOutput@1000000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder");
    VAR
      lrrefWriter@1000000002 : RecordRef;
    BEGIN
      // Populates the xml representation of the License Plate line.
      precLPLine.CALCFIELDS(Description,"Description 2");

      pdnOutput.Append('<R>');
      pdnOutput.Append('<FIELDS>');

      lrrefWriter.GETTABLE(precLPLine);
      cuCommonFuncs.addDSFieldsForRecordDN(pdnOutput, lrrefWriter, 95001, '');
      pdnOutput.Append('</FIELDS>');
      pdnOutput.Append('</R>');
    END;

    PROCEDURE getLPLineUsage@1000000074(VAR precLPLineUsage@1000000001 : Record 23044507;VAR pdnOutput@1000000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder");
    VAR
      lrrefWriter@1000000002 : RecordRef;
    BEGIN
      // Populates the xml representation of the License Plate line usage.
      pdnOutput.Append('<R>');
      pdnOutput.Append('<FIELDS>');
      lrrefWriter.GETTABLE(precLPLineUsage);
      cuCommonFuncs.addDSFieldsForRecordDN(pdnOutput, lrrefWriter, 95001, '');
      pdnOutput.Append('</FIELDS>');
      pdnOutput.Append('</R>');
    END;

    PROCEDURE GetLPLineRecursive@1000000012(pcodLicensePlateNo@1000000000 : Code[20];VAR pdnOutput@1000000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder");
    VAR
      lrecLPLine@1000000002 : Record 23044506;
    BEGIN
      //<FUNC>
      //  Recurses through the embedded LPs and builds up the result set
      //</FUNC>
      lrecLPLine.SETRANGE("License Plate No.",pcodLicensePlateNo);
      IF( lrecLPLine.FINDSET(FALSE)) THEN BEGIN
        REPEAT
          IF lrecLPLine.Type = lrecLPLine.Type::Item THEN
            getLPLine(lrecLPLine, pdnOutput)
          ELSE
            GetLPLineRecursive(lrecLPLine."No.",pdnOutput);
        UNTIL(lrecLPLine.NEXT=0);
      END;
    END;

    PROCEDURE updateReceivingLine@1000000001(VAR ptrecEventParams@1000000011 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecConfig@1000000016 : Record 23044504;
      lcodLocation@1000000015 : Code[10];
      lcodLicensePlateNumber@1000000014 : Code[20];
      lcodItemNumber@1000000013 : Text;
      lsSerialNumber@1000000012 : Text;
      lsLotNumber@1000000010 : Text;
      lcodVariantCode@1000000009 : Text;
      ldQtyChange@1000000008 : Decimal;
      lsBarcodeData@1000000007 : Text[250];
      lcodUOM@1000000003 : Code[10];
      ldPreviousQuantity@1000000002 : Decimal;
      ldNewQuantity@1000000005 : Decimal;
      lrecUOM@1000000001 : Record 204;
      liLineNumber@1000000004 : Integer;
      ldtExpirationDate@1000000006 : Date;
    BEGIN
      // Handles requests to update/add license plate lines and the appropriate usage.
      lcodLocation := ptrecEventParams.getValue('location');
      lcodLicensePlateNumber := ptrecEventParams.getValue('lp_number');
      lcodItemNumber := ptrecEventParams.getValue('item_number');
      lsSerialNumber := ptrecEventParams.getSerialNo();
      lsLotNumber := ptrecEventParams.getLotNo();
      lcodVariantCode := ptrecEventParams.getValue('variant_code');
      ldQtyChange := ptrecEventParams.getValueAsDecimal('quantity');
      lsBarcodeData := ptrecEventParams.getValue('barcode');
      ldtExpirationDate := cuCommonFuncs.getExpirationDate(ptrecEventParams);

      cuSessionHelper.GetDeviceConfig(lrecConfig);

      IF (ptrecEventParams.getUnitOfMeasure(lrecUOM)) THEN;

      liLineNumber := updateLicensePlateLine(
        lcodLicensePlateNumber,
        lcodItemNumber,
        lcodVariantCode,
        lsLotNumber,
        ldtExpirationDate,
        lsSerialNumber,
        lsBarcodeData,
        ldQtyChange,
        lrecUOM.Code,
        lrecConfig.Code,
        ldPreviousQuantity,
        ldNewQuantity
      );

      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);


      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX License Plate Line"));
      ptrecEventParams.setValue('Document No.', lcodLicensePlateNumber);
      ptrecEventParams.setValue('Document Line No.', FORMAT(liLineNumber));
      ptrecEventParams.setValue('Previous Quantity', FORMAT(ldPreviousQuantity));
      ptrecEventParams.setValue('New Quantity', FORMAT(ldNewQuantity));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE updateLicensePlateLine@1000000013(pcodLicensePlateNumber@1000000000 : Code[20];psItemNumber@1000000001 : Text;psVariantCode@1000000002 : Text;psLotNumber@1000000003 : Text;pdtExpirationDate@1000000014 : Date;psSerialNumber@1000000004 : Text;psBarcodeData@1000000005 : Text[250];pdQtyChange@1000000006 : Decimal;pcodUOM@1000000011 : Code[10];pcodPDACode@1000000012 : Code[20];VAR pdPreviousQuantityOut@1000000009 : Decimal;VAR pdNewQuantityOut@1000000013 : Decimal) : Integer;
    VAR
      lrecLPHeader@1000000008 : Record 23044505;
      lrecLPLine@1000000007 : Record 23044506;
      liNextLineNumber@1000000010 : Integer;
    BEGIN
      //<FUNC>
      // Updates a matching line or if needed creates a new one.
      // If a line is reduced to zero quantity it will be deleted.
      //</FUNC>


      psSerialNumber := UPPERCASE(psSerialNumber);
      psLotNumber := UPPERCASE(psLotNumber);

      pdPreviousQuantityOut := 0;

      lrecLPHeader.GET(pcodLicensePlateNumber);

      lrecLPLine.SETRANGE("License Plate No.",lrecLPHeader."No.");
      lrecLPLine.SETRANGE(Type,lrecLPLine.Type::Item);
      lrecLPLine.SETRANGE("No.", psItemNumber);
      lrecLPLine.SETRANGE("Variant Code",psVariantCode);
      lrecLPLine.SETRANGE("Lot No.",psLotNumber);
      lrecLPLine.SETRANGE("Serial No.",psSerialNumber);
      lrecLPLine.SETRANGE(Barcode,psBarcodeData);


      IF( lrecLPLine.FINDFIRST ) THEN BEGIN
        // if there is a match
        pdPreviousQuantityOut := lrecLPLine.Quantity;

        lrecLPLine.VALIDATE(Quantity,lrecLPLine.Quantity + pdQtyChange);
        lrecLPLine.MODIFY;

        IF( lrecLPLine.Quantity <= 0 ) THEN
          lrecLPLine.DELETE;
      END
      ELSE BEGIN
        IF( pdQtyChange > 0 ) THEN BEGIN
          liNextLineNumber := 10000;
          lrecLPLine.RESET;
          lrecLPLine.SETRANGE("License Plate No.",lrecLPHeader."No.");
          IF( lrecLPLine.FINDLAST ) THEN
            liNextLineNumber := lrecLPLine."Line No." + 10000;

          CLEAR(lrecLPLine);
          lrecLPLine.VALIDATE("License Plate No.",pcodLicensePlateNumber);
          lrecLPLine.VALIDATE("Line No.",liNextLineNumber);
          lrecLPLine.VALIDATE("No.",psItemNumber);
          lrecLPLine.VALIDATE("Serial No.",psSerialNumber);
          lrecLPLine.VALIDATE("Lot No.",psLotNumber);
          lrecLPLine.VALIDATE("Expiration Date", pdtExpirationDate);
          lrecLPLine.VALIDATE("Variant Code",psVariantCode);
          lrecLPLine.VALIDATE("Unit of Measure Code", pcodUOM);
          lrecLPLine.VALIDATE(Quantity, pdQtyChange);
          lrecLPLine.VALIDATE(Barcode, psBarcodeData);
          lrecLPLine.INSERT(TRUE);
        END;
      END;

      lrecLPHeader.GET(pcodLicensePlateNumber);
      lrecLPHeader."Last Modified by Device" := pcodPDACode;
      lrecLPHeader.MODIFY(TRUE);

      pdNewQuantityOut := lrecLPLine.Quantity;

      EXIT(lrecLPLine."Line No.");
    END;

    PROCEDURE changeBin@1000000002(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lcodLPNumber@1000000006 : Code[20];
      lcodBinCode@1000000005 : Code[20];
      lrecLPHeader@1000000004 : Record 23044505;
      lcodLocation@1000000003 : Code[10];
      lcodPreviousBin@1000000002 : Code[20];
    BEGIN
      // Changes the license plate bin.
      // Note: No bin validation peformed to ensure contents exist (at this time)

      lcodLPNumber := ptrecEventParams.getValue('lp_number');
      lcodBinCode := ptrecEventParams.getValue('current_bin');
      lcodLocation := ptrecEventParams.getValue('location');

      lrecLPHeader.GET(lcodLPNumber);
      IF( (lrecLPHeader.Status = lrecLPHeader.Status::Shipped) OR (lrecLPHeader.Status = lrecLPHeader.Status::Unbuilt) ) THEN
        ERROR(cuTranslationMgmt.getTranslatedString('ERR_LP_CANT_CHANGE_BIN', codRegionCode),lrecLPHeader.Status);

      IF ( lcodLocation <> '' ) THEN BEGIN
        lrecLPHeader."Location Code" := lcodLocation; // do NOT validate location.
      END;

      IF lrecLPHeader."Bin Code" = lcodBinCode THEN BEGIN
        cuCommonFuncs.generateSuccessReturn(1, pbsOutput);
      END ELSE BEGIN
        lcodPreviousBin := lrecLPHeader."Bin Code";

        lrecLPHeader.VALIDATE("Bin Code",lcodBinCode); //
        lrecLPHeader.MODIFY(TRUE);

        SetLPModifiedBy(lrecLPHeader, ptrecEventParams);

        cuCommonFuncs.generateSuccessReturn(1, pbsOutput);

        ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX License Plate Header"));
        ptrecEventParams.setValue('Document No.', lcodLPNumber);
        ptrecEventParams.setValue('Previous Bin', lcodPreviousBin);
        ptrecEventParams.setValue('New Bin', lcodBinCode);
        cuActivityLogMgt.logActivity(ptrecEventParams);
      END;
    END;

    PROCEDURE updateLPCharacteristics@1000000088(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lcodLicensePlateNumber@1000000008 : Code[20];
      lcodLocation@1000000007 : Code[10];
      lrecLPHeader@1000000006 : Record 23044505;
      ldLength@1000000005 : Decimal;
      ldWidth@1000000004 : Decimal;
      ldHeight@1000000003 : Decimal;
      ldCurrentCubage@1000000002 : Decimal;
    BEGIN
      // Updates the License Plate Header.
      // At this time, just update Length, Width, Height
      lcodLocation := ptrecEventParams.getValue('location');
      lcodLicensePlateNumber := ptrecEventParams.getValue('lp_number');
      ldLength := ptrecEventParams.getValueAsDecimal('lp_length');
      ldWidth := ptrecEventParams.getValueAsDecimal('lp_width');
      ldHeight := ptrecEventParams.getValueAsDecimal('lp_height');
      ldCurrentCubage := ldLength * ldWidth * ldHeight;

      lrecLPHeader.GET(lcodLicensePlateNumber);
      lrecLPHeader.VALIDATE(Length, ldLength);
      lrecLPHeader.VALIDATE(Width, ldWidth);
      lrecLPHeader.VALIDATE(Height, ldHeight);
      lrecLPHeader.VALIDATE("Current Cubage", ldCurrentCubage);
      lrecLPHeader.MODIFY(TRUE);
      SetLPModifiedBy(lrecLPHeader, ptrecEventParams);

      pbsOutput.ADDTEXT( '<UPDATE_RESULT>' );
      cuCommonFuncs.generateSuccessReturn( 1, pbsOutput);
      testLPCharacteristicsInWS( lrecLPHeader, pbsOutput );
      pbsOutput.ADDTEXT( '</UPDATE_RESULT>' );

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX License Plate Header"));
      ptrecEventParams.setValue('Document No.', lcodLicensePlateNumber);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE testLPCharacteristicsInWS@1000000076(precLPHeader@1000000001 : Record 23044505;VAR pbsXMLOutput@1000000000 : BigText);
    BEGIN
      // Checks the current lp characteristics against the configured maximum
      // on the license plate, and adds messages (not errors) to the resulting
      // output.
      IF (precLPHeader."Maximum Weight"<>0 ) AND ( precLPHeader."Current Gross Weight" > precLPHeader."Maximum Weight") THEN BEGIN
        cuCommonFuncs.addMessage(
          STRSUBSTNO(
          cuTranslationMgmt.getTranslatedString('ERR_LP_WEIGHT_EXCEEDED', codRegionCode),
          precLPHeader."Current Gross Weight",
          precLPHeader."Maximum Weight",
          precLPHeader."No."
          ), pbsXMLOutput);

      END;

      IF (precLPHeader."Maximum Cubage"<>0 ) AND (precLPHeader."Current Cubage" > precLPHeader."Maximum Cubage") THEN BEGIN
        cuCommonFuncs.addMessage(
         STRSUBSTNO(
          cuTranslationMgmt.getTranslatedString('ERR_LP_CUBAGE_EXCEEDED', codRegionCode),
            precLPHeader."Current Cubage",
            precLPHeader."Maximum Cubage",
            precLPHeader."No."
          ),
        pbsXMLOutput);
      END;
    END;

    PROCEDURE getTransferList@1000000085(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecLPSetup@1000000008 : Record 23044523;
      lcodLocation@1000000007 : Code[10];
      lcodLicensePlateNumber@1000000006 : Code[20];
      lrecLPHeader@1000000005 : Record 23044505;
      lcodBinCode@1000000004 : Code[20];
      liMaxLPRecords@1000000003 : Integer;
      liCurrentRecordCounter@1000000002 : Integer;
    BEGIN
      // Returns a comma separated list of available license plates
      // that the current lp can be transfered to.
      //
      // Also, only license plates that are in the same bin will be filtered.
      //
      lcodLocation := ptrecEventParams.getValue('location');
      lcodLicensePlateNumber := ptrecEventParams.getValue('lp_number');
      lcodBinCode := '';
      IF ( lcodLicensePlateNumber <> '' ) THEN BEGIN
        IF ( lrecLPHeader.GET( lcodLicensePlateNumber) ) THEN BEGIN
          lcodBinCode := lrecLPHeader."Bin Code";
        END;
      END;
      lrecLPHeader.RESET();

      lrecLPHeader.SETFILTER("No.",'<>%1',lcodLicensePlateNumber);
      lrecLPHeader.SETFILTER(Status,'%1|%2',lrecLPHeader.Status::" ",lrecLPHeader.Status::Quarantined);
      lrecLPHeader.SETRANGE(Locked, FALSE ); // do not show locked records
      lrecLPHeader.ASCENDING(FALSE); // show most recent LPs first.

      lrecLPSetup.GET();
      liMaxLPRecords := lrecLPSetup."LP Max List";
      IF ( liMaxLPRecords  = 0 ) THEN BEGIN
        liMaxLPRecords := 1000; // after this it doesn't scale
      END;

      IF( lrecLPHeader.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          liCurrentRecordCounter += 1;
          IF( pbsOutput.LENGTH > 0 ) THEN BEGIN
            pbsOutput.ADDTEXT(',');
          END;
          pbsOutput.ADDTEXT(lrecLPHeader."No.");
        UNTIL ( ( lrecLPHeader.NEXT() = 0) OR ( liCurrentRecordCounter >= liMaxLPRecords) );
      END;

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX License Plate Header"));
      ptrecEventParams.setValue('Source Document Type', FORMAT(DATABASE::"IWX License Plate Header"));
      ptrecEventParams.setValue('Source Document No.', lcodLicensePlateNumber);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE transferLine@1000000087(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecLPSetup@1000000018 : Record 23044523;
      lcodLocation@1000000017 : Code[10];
      lcodSourceLPNo@1000000016 : Code[20];
      lcodTargetLPNo@1000000015 : Code[20];
      liSourceLineNo@1000000014 : Integer;
      ldTransferQty@1000000013 : Decimal;
      liNextLineNo@1000000012 : Integer;
      lrecSourceLPHeader@1000000011 : Record 23044505;
      lrecTargetLPHeader@1000000010 : Record 23044505;
      lrecSourceLPLine@1000000009 : Record 23044506;
      lrecTargetLPLine@1000000008 : Record 23044506;
      lrecItemJournalLine@1000000007 : Record 83;
      ltrecTempLicensePlateReclass@1000000006 : TEMPORARY Record 23044506;
      ldTransferAltQty@1000000005 : Decimal;
      ldRemainQuantity@1000000004 : Decimal;
      ldTransferToQty@1000000003 : Decimal;
      lcodTransferToUOM@1000000002 : Code[10];
    BEGIN
      // Transfers the quantity from license plate line to another.
      // If the full quantity is transfered it will delete the line.
      lcodLocation := ptrecEventParams.getValue('location');
      lcodSourceLPNo := ptrecEventParams.getValue('source_lp_number');
      liSourceLineNo := ptrecEventParams.getValueAsInt('source_line_number');
      lcodTargetLPNo := ptrecEventParams.getValue('target_lp_number');
      ldTransferQty := ptrecEventParams.getValueAsDecimal('transfer_qty');
      ldTransferAltQty := ptrecEventParams.getValueAsDecimal('transfer_altqty');

      ldTransferToQty := ptrecEventParams.getValueAsDecimal('transfer_to_qty');
      lcodTransferToUOM := ptrecEventParams.getValue('transfer_to_uom');

      lrecSourceLPHeader.GET(lcodSourceLPNo);
      IF( (lrecSourceLPHeader.Status = lrecSourceLPHeader.Status::Shipped)
       OR (lrecSourceLPHeader.Status = lrecSourceLPHeader.Status::Unbuilt) ) THEN BEGIN
        ERROR(cuTranslationMgmt.getTranslatedString('ERR_LP_CANT_CHANGE_BIN', codRegionCode), lrecSourceLPHeader.Status);
      END;

      lrecTargetLPHeader.GET(lcodTargetLPNo);
      IF( (lrecTargetLPHeader.Status = lrecTargetLPHeader.Status::Shipped)
       OR (lrecTargetLPHeader.Status = lrecTargetLPHeader.Status::Unbuilt) ) THEN BEGIN
        ERROR(cuTranslationMgmt.getTranslatedString('ERR_LP_CANT_CHANGE_BIN', codRegionCode), lrecTargetLPHeader.Status);
      END;
      lrecSourceLPLine.GET(lcodSourceLPNo, liSourceLineNo);

      // find the next available license plate line
      liNextLineNo := 10000;
      lrecTargetLPLine.SETRANGE("License Plate No.",lcodTargetLPNo);
      IF( lrecTargetLPLine.FINDLAST ) THEN
        liNextLineNo := lrecTargetLPLine."Line No." + 10000;

      // If we are transferring from a license plate with bins to a license
      // plate with no bin, and that license plate is empty, then we need
      // to set the bin code on that license plate.
      // Do *not* do this if the bins are different, otherwise that can
      // cause reclassification issues.
      //
      IF ( ( lrecTargetLPHeader."Bin Code" = '' ) AND ( lrecSourceLPHeader."Bin Code" <> '' ) AND
           ( lrecTargetLPLine.ISEMPTY()  ) ) THEN BEGIN
        lrecTargetLPHeader."Location Code" := lrecSourceLPHeader."Location Code";
        lrecTargetLPHeader."Bin Code" := lrecSourceLPHeader."Bin Code"; // no validate.
        lrecTargetLPHeader.MODIFY(FALSE); // no trigger
      END;

      IF (ldTransferToQty = 0) THEN BEGIN
        ldTransferToQty := ldTransferQty;
        lcodTransferToUOM := lrecSourceLPLine."Unit of Measure Code";
      END;

      lrecTargetLPLine.COPY(lrecSourceLPLine);
      lrecTargetLPLine."License Plate No." := lcodTargetLPNo;
      lrecTargetLPLine."Line No." := liNextLineNo;
      lrecTargetLPLine.Quantity := ldTransferToQty;
      lrecTargetLPLine."Unit of Measure Code" := lcodTransferToUOM;
      lrecTargetLPLine."Quantity (Alt.)" := ldTransferAltQty;
      lrecTargetLPLine.INSERT(TRUE);


      // delete source line if needed
      IF( ldTransferQty = lrecSourceLPLine.Quantity ) THEN BEGIN
        lrecSourceLPLine.DELETE(TRUE);
      END
      ELSE BEGIN
        ldRemainQuantity := lrecSourceLPLine.Quantity - ldTransferQty;
        IF (ldRemainQuantity < 0) THEN BEGIN
          ERROR(cuTranslationMgmt.getTranslatedString('ERR_LP_WRONG_TRANSFER_QTY', codRegionCode));
        END;
        lrecSourceLPLine.Quantity := ldRemainQuantity;
        lrecSourceLPLine."Quantity (Alt.)" := lrecSourceLPLine."Quantity (Alt.)" - ldTransferAltQty;

        lrecSourceLPLine.MODIFY(TRUE);
      END;
      lrecLPSetup.GET();
      IF (lrecLPSetup."LP Bin Change Behavior"::"Reclassify Items on the License Plate" = lrecLPSetup."LP Bin Change Behavior" )
      THEN BEGIN
        //
        // if WHI has been configured to reclassify the items inside of a bin
        // and *if* each license plate has a bin, and if the bins are different then
        // attempt to reclassify that item from one bin to another.
        //
        IF (  ( lrecTargetLPHeader."Bin Code" <> '' )
          AND ( lrecSourceLPHeader."Bin Code" <> '' )
          AND ( lrecSourceLPHeader."Bin Code" <> lrecTargetLPHeader."Bin Code" ) ) THEN BEGIN

          //
          //
          // We are using a temporary license plate line, because we are only
          // reclassifying a partial license plate item.
          ltrecTempLicensePlateReclass := lrecSourceLPLine;
          ltrecTempLicensePlateReclass.Quantity := ldTransferToQty;

          cuLPCommon.changeBinOnLPCreateJournalLine(
            cuCommonBase.getTemplate(PAGE::"Item Reclass. Journal"),
            lrecLPSetup."LP Bin Move Batch Name",
            ltrecTempLicensePlateReclass, // not by reference
            lrecSourceLPHeader, // not by reference
            lrecTargetLPHeader."Location Code",
            lrecTargetLPHeader."Bin Code",
            COPYSTR( STRSUBSTNO( cuTranslationMgmt.getTranslatedString('MSG_LP_TRANSFER_FROM', codRegionCode), lcodSourceLPNo, lcodTargetLPNo ), 1, 80),
            lcodTransferToUOM );

          lrecItemJournalLine.RESET();
          lrecItemJournalLine.SETRANGE("Journal Template Name", cuCommonBase.getTemplate(PAGE::"Item Reclass. Journal"));
          lrecItemJournalLine.SETRANGE("Journal Batch Name",lrecLPSetup."LP Bin Move Batch Name");
          lrecItemJournalLine.SETRANGE("Location Code", lrecSourceLPHeader."Location Code" );
          lrecItemJournalLine.SETRANGE("Bin Code", lrecSourceLPHeader."Bin Code");
          lrecItemJournalLine.SETRANGE("New Location Code", lrecTargetLPHeader."Location Code" );
          lrecItemJournalLine.SETRANGE("New Bin Code", lrecTargetLPHeader."Bin Code" );

          lrecItemJournalLine.SETRANGE("LPM License Plate No.", lrecSourceLPHeader."No.");
          lrecItemJournalLine.SETRANGE("WHI Entry", TRUE);

          IF (lrecItemJournalLine.FINDSET(FALSE)) THEN BEGIN
            // Post Item Journal Line only if we have reclassifications to work on.
            CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post Batch", lrecItemJournalLine);
          END; // if we had anything to post

        END;
      END;
      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX License Plate Header"));
      ptrecEventParams.setValue('Document No.', lcodTargetLPNo);
      ptrecEventParams.setValue('Source Document Type', FORMAT(DATABASE::"IWX License Plate Header"));
      ptrecEventParams.setValue('Source Document No.', lcodSourceLPNo);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE findUsage@1000000089(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lcodItemNumber@1000000005 : Text;
      lsSerialNumber@1000000004 : Text;
      lsLotNumber@1000000003 : Text;
      lcodVariantCode@1000000002 : Text;
    BEGIN
      // Returns the License Plate the Item is on.
      lcodItemNumber := ptrecEventParams.getValue('item_number');
      lsSerialNumber := ptrecEventParams.getSerialNo();
      lsLotNumber := ptrecEventParams.getLotNo();
      lcodVariantCode := ptrecEventParams.getValue('variant_code');
      pbsOutput.ADDTEXT(STRSUBSTNO('<VALUE>%1</VALUE>',getUsage(lcodItemNumber,lsSerialNumber,lsLotNumber,lcodVariantCode)));
      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX License Plate Line"));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getUsage@1000000092(pcodItemNumber@1000000003 : Text;psSerialNumber@1000000002 : Text;psLotNumber@1000000001 : Text;pcodVariantCode@1000000000 : Text) : Code[20];
    VAR
      lrecLPLine@1000000004 : Record 23044506;
    BEGIN
      // Returns the License Plate the Item is on.
      psSerialNumber := UPPERCASE(psSerialNumber);
      psLotNumber := UPPERCASE(psLotNumber);

      lrecLPLine.SETCURRENTKEY("No.","Serial No.","Lot No.","Variant Code");
      lrecLPLine.SETRANGE(Type,lrecLPLine.Type::Item);
      lrecLPLine.SETRANGE("No.",pcodItemNumber);
      lrecLPLine.SETRANGE("Serial No.",psSerialNumber);
      lrecLPLine.SETRANGE("Lot No.",psLotNumber);
      lrecLPLine.SETRANGE("Variant Code",pcodVariantCode);
      IF( lrecLPLine.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          lrecLPLine.CALCFIELDS("LP Status");
          IF( lrecLPLine."LP Status" = lrecLPLine."LP Status"::" " ) THEN BEGIN
            EXIT(lrecLPLine."License Plate No.");
          END;
        UNTIL( lrecLPLine.NEXT=0);
      END;

      EXIT('');
    END;

    PROCEDURE getLicensePlateProperties@1000000081(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrrefLPHeader@1000000007 : RecordRef;
      lrecLPHeader@1000000006 : Record 23044505;
      lcodLicensePlateNumber@1000000005 : Code[20];
      lrecUOM@1000000004 : Record 204;
    BEGIN
      // Retrieve license plate properties to pda
      lcodLicensePlateNumber := ptrecEventParams.getValue('lp_number');


      IF (lcodLicensePlateNumber <> '') THEN BEGIN
        IF (lrecLPHeader.GET(lcodLicensePlateNumber)) THEN BEGIN
          pbsOutput.ADDTEXT('<DATASET>');

          pbsOutput.ADDTEXT('<TABLE id="line">');
          pbsOutput.ADDTEXT('<COLS>');
          cuCommonFuncs.initializeColumns( TRUE );
          cuCommonFuncs.addDSColumnsFromConfig( pbsOutput,iEventID,'', DATABASE::"IWX License Plate Header" );
          pbsOutput.ADDTEXT('</COLS>');

          pbsOutput.ADDTEXT('<ROWS>');
          pbsOutput.ADDTEXT('<R><FIELDS>');
          lrrefLPHeader.GETTABLE( lrecLPHeader );
          cuCommonFuncs.addDSFieldsForRecord(pbsOutput, lrrefLPHeader, iEventID, '');
          pbsOutput.ADDTEXT('</FIELDS></R>');
          pbsOutput.ADDTEXT('</ROWS>');
          pbsOutput.ADDTEXT('</TABLE>');
          pbsOutput.ADDTEXT('</DATASET>');
        END;  // IF lrecLPHeader.GET
      END; // IF lcodLicensePlateNumber <> ''

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"IWX License Plate Header"));
      ptrecEventParams.setValue('Document No.', lcodLicensePlateNumber);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE updateProcessState@1000000024(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lcodLicensePlateNumber@1000000004 : Code[20];
      liProcessState@1000000003 : Integer;
      lrecLicensePlateHeader@1000000002 : Record 23044505;
    BEGIN
      // Update license plate process state
      //

      lcodLicensePlateNumber := ptrecEventParams.getValue('lp_number');
      liProcessState := ptrecEventParams.getValueAsInt('process_state');
      lrecLicensePlateHeader.GET(lcodLicensePlateNumber);
      lrecLicensePlateHeader."Permission Required" := lrecLicensePlateHeader."Permission Required"::No;
      lrecLicensePlateHeader.VALIDATE("Processing State", liProcessState);
      lrecLicensePlateHeader.MODIFY(TRUE);
      lrecLicensePlateHeader."Permission Required" := lrecLicensePlateHeader."Permission Required"::Yes;
      lrecLicensePlateHeader.MODIFY;

      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);
    END;

    PROCEDURE readBigTextFromBlobOutput@1000000121(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lisInStream@1000000002 : InStream;
    BEGIN
      ptrecEventParams.getValue('compatibility_output');
      ptrecEventParams.CALCFIELDS("Output Blob");
      ptrecEventParams."Output Blob".CREATEINSTREAM(lisInStream);
      pbsOutput.READ(lisInStream);
    END;

    LOCAL PROCEDURE createLPFromTemplate@1000000000(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecConfig@1000000002 : Record 23044504;
      lcodLicensePlateNumber@1000000003 : Code[20];
      lbsOutputTemp@1000000004 : BigText;
    BEGIN
      //<FUNC>
      //  Description: Creates a new LP from a template and returns in the 'value' the new LP number.
      //               Similar to 'getLicensePlate' but does not return the full header/lines dataset.
      //  Called From: Handheld
      //  Side Effect: None
      //</FUNC>

      cuCommonFuncs.getDeviceConfig(lrecConfig,ptrecEventParams);

      getLicensePlate(ptrecEventParams, lbsOutputTemp);
      lcodLicensePlateNumber := ptrecEventParams.getValue('lp_number');

      pbsOutput.ADDTEXT(STRSUBSTNO('<VALUE>%1</VALUE>',lcodLicensePlateNumber));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE updateLPForWarehouseActivity@1000000096(precWhseActivityLine@1000000009 : Record 5767;pcodLicensePlateNo@1000000002 : Code[20];psLotNo@1000000005 : Text;psSerialNo@1000000006 : Text;pdQuantityToChange@1000000007 : Decimal;pdtExpirationDate@1000000015 : Date;pbAutoTakePlace@1000000001 : Boolean;VAR ptrecCommentLine@1000000003 : TEMPORARY Record 97);
    VAR
      loptSourceDocument@1000000000 : ' ,Purchase Order,Sales Order,Inbound Transfer,Outbound Transfer,Prod. Order,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick,Receipt,Shipment,Reclass,Purchase Return Order,Assembly,Invt. Movement';
      lrecWhseActivityLine@1000000004 : Record 5767;
      liLineNo@1000000008 : Integer;
      lrecLicensePlateLine@1000000011 : Record 23044506;
      lrecLicensePlateLineUsage@1000000010 : Record 23044507;
      ltrecLPHeader@1000000012 : TEMPORARY Record 23044505;
    BEGIN
      // Use this method to add license plate line when dynamic build license plate

      psSerialNo := UPPERCASE(psSerialNo);
      psLotNo := UPPERCASE(psLotNo);

      IF(precWhseActivityLine."Activity Type" = precWhseActivityLine."Activity Type"::"Put-away") THEN
        loptSourceDocument := loptSourceDocument::"Put-away"
      ELSE IF(precWhseActivityLine."Activity Type" = precWhseActivityLine."Activity Type"::Pick) THEN
        loptSourceDocument := loptSourceDocument::Pick
      ELSE IF(precWhseActivityLine."Activity Type" = precWhseActivityLine."Activity Type"::Movement) THEN
        loptSourceDocument := loptSourceDocument::Movement
      ELSE IF(precWhseActivityLine."Activity Type" = precWhseActivityLine."Activity Type"::"Invt. Put-away") THEN
        loptSourceDocument := loptSourceDocument::"Invt. Put-away"
      ELSE IF(precWhseActivityLine."Activity Type" = precWhseActivityLine."Activity Type"::"Invt. Pick") THEN
        loptSourceDocument := loptSourceDocument::"Invt. Pick"
      ELSE IF (precWhseActivityLine."Activity Type" = precWhseActivityLine."Activity Type"::"Invt. Movement") THEN
        loptSourceDocument := loptSourceDocument::"Invt. Movement";


      liLineNo := cuLPCommon.addRemoveLicensePlateLine(loptSourceDocument,
                                                      precWhseActivityLine."No.",
                                                      precWhseActivityLine."Line No.",
                                                      pcodLicensePlateNo,
                                                      precWhseActivityLine."Item No.",
                                                      precWhseActivityLine."Variant Code",
                                                      psLotNo,
                                                      psSerialNo,
                                                      pdQuantityToChange,
                                                      precWhseActivityLine."Unit of Measure Code",
                                                      pdtExpirationDate,
                                                      precWhseActivityLine."Bin Code"
                                                      );

      ltrecLPHeader."No." := pcodLicensePlateNo;
      ltrecLPHeader.INSERT;
      cuLPCommon.SetLPSourceDocument(ltrecLPHeader,loptSourceDocument,precWhseActivityLine."No.",precWhseActivityLine."Bin Code");


      IF (pbAutoTakePlace) THEN BEGIN
        IF (liLineNo > 0) THEN BEGIN
          lrecLicensePlateLine.GET(pcodLicensePlateNo, liLineNo);
        END;
        ptrecCommentLine.RESET;
        ptrecCommentLine.SETFILTER("Line No.", '<>%1', precWhseActivityLine."Line No.");

        IF (ptrecCommentLine.FINDSET(FALSE)) THEN BEGIN
          REPEAT
            IF( lrecWhseActivityLine.GET(precWhseActivityLine."Activity Type", precWhseActivityLine."No.", ptrecCommentLine."Line No.")) THEN BEGIN
              lrecLicensePlateLineUsage.SETRANGE("License Plate No.", pcodLicensePlateNo);
              IF (liLineNo > 0) THEN BEGIN
                lrecLicensePlateLineUsage.SETRANGE("License Plate Line No.", liLineNo);
              END;
              lrecLicensePlateLineUsage.SETRANGE("Source Document", loptSourceDocument);
              lrecLicensePlateLineUsage.SETRANGE("Source No.", lrecWhseActivityLine."No.");
              lrecLicensePlateLineUsage.SETRANGE("Source Line No.", lrecWhseActivityLine."Line No.");
              IF (lrecLicensePlateLineUsage.FIND('-')) THEN BEGIN
                lrecLicensePlateLineUsage.DELETEALL;
              END;
              IF (liLineNo > 0) AND (lrecWhseActivityLine."Qty. to Handle">0) THEN BEGIN
                cuLPCommon.CreateLPLineUsage(lrecLicensePlateLine, lrecLicensePlateLine.Quantity,loptSourceDocument,lrecWhseActivityLine."No.", lrecWhseActivityLine."Line No.");
              END;
            END;
          UNTIL (ptrecCommentLine.NEXT = 0);
        END;
      END;
    END;

    PROCEDURE AdjustLicensePlate@1000000007(VAR ptrecEventParams@1000000013 : TEMPORARY Record 23044511;VAR ptrecLPLineTempOut@1000000011 : TEMPORARY Record 23044506;VAR ptrecLPHeaderTempOut@1000000012 : TEMPORARY Record 23044505) : Code[20];
    VAR
      lrecLPHeader@1000000004 : Record 23044505;
      lrecLPLine@1000000001 : Record 23044506;
      lcodLocation@1000000003 : Code[10];
      lcodLicensePlateNumber@1000000002 : Code[20];
      liAction@1000000006 : Integer;
      ldSelectedQty@1000000005 : Decimal;
      lrecNewLPHeader@1000000007 : Record 23044505;
      lrecNewLPLine@1000000008 : Record 23044506;
      lcodNewLPHeaderNo@1000000009 : Code[20];
      lcodLPNumberToReturn@1000000000 : Code[20];
      liNewLPLineNumber@1000000010 : Integer;
      loptAdjustmentAction@1000000015 : 'None,MoveExcessNewLP,RemoveExcessFromLP,RemoveUsedFromLP,Unbuild,UpdateSource';
    BEGIN
      // Will adjust the license plate lines according to the incoming request.
      // Designed to be primarily called from other modules as part of a License Plate scan request.
      // possible actions:
      // no action required: 0 (error if qty do not match)
      // move unused quantity to new license plate: 1
      // remove unused quantity from license plate: 2
      // removed used quantity from license keep in license plate, remove excess: 3
      // completely unbuild: 4
      // update source: 5

      lcodLocation := ptrecEventParams.getValue('location');
      lcodLicensePlateNumber := ptrecEventParams.getValue('lp_number');
      liAction := ptrecEventParams.getValueAsInt('update_action');
      loptAdjustmentAction := liAction;

      lrecLPHeader.GET(lcodLicensePlateNumber);
      IF( lrecLPHeader.Status = lrecLPHeader.Status::Shipped ) THEN BEGIN
        cuLPCommon.RecurseUpdateLPHeaderStatus(lrecLPHeader."No.",lrecLPHeader.Status::" ",TRUE);
      END;

      cuLPCommon.RemoveEmbeddedLPFromParent(lrecLPHeader);

      ptrecLPLineTempOut.RESET;
      ptrecLPHeaderTempOut.RESET;

      iNextNewLPLineNumber := 10000;
      codNewLPHeaderNo := '';

      CASE loptAdjustmentAction OF
        loptAdjustmentAction::None,
        loptAdjustmentAction::MoveExcessNewLP,
        loptAdjustmentAction::RemoveExcessFromLP: AdjustExcessLPQuantity(lrecLPHeader,ptrecLPLineTempOut,ptrecLPHeaderTempOut,ptrecEventParams,lrecNewLPHeader,loptAdjustmentAction);

        loptAdjustmentAction::RemoveUsedFromLP,
        loptAdjustmentAction::Unbuild: AdjustUsedLPQuantity(lrecLPHeader,ptrecLPLineTempOut,ptrecEventParams,lrecNewLPHeader,loptAdjustmentAction);

        loptAdjustmentAction::UpdateSource: ;
      END;

      IF loptAdjustmentAction = loptAdjustmentAction::Unbuild THEN
        cuLPCommon.RecurseUpdateLPHeaderStatus(lrecLPHeader."No.",lrecLPHeader.Status::Unbuilt,TRUE);

      lcodLPNumberToReturn := lcodLicensePlateNumber;

      IF codNewLPHeaderNo <> '' THEN BEGIN
        lcodLPNumberToReturn := codNewLPHeaderNo;
      END ELSE IF( loptAdjustmentAction = loptAdjustmentAction::RemoveUsedFromLP) OR (loptAdjustmentAction = loptAdjustmentAction::Unbuild) THEN BEGIN
          lcodLPNumberToReturn := '';
      END;

      EXIT(lcodLPNumberToReturn);
      //EXIT(lcodLicensePlateNumber);

      {
      // loop through the license plate lines and update as needed or move to new
      IF( ltrecLPLineTemp.FIND('-') ) THEN BEGIN
        REPEAT
          // get the quantity passed in via the params

          //
          // The selected quantity is passed in from the handheld.
          // the key is the lpnumber_line number, and the value is the selected quantity.
          // See processWhseActivityLPScan on device for example

          ldSelectedQty := ptrecEventParams.getValueAsDecimal(STRSUBSTNO('%1_%2',ltrecLPLineTemp."License Plate No.",lrecLPLine."Line No."));



          //
          // keep the unused quantities in the License Plate but remove the rest
          // (e.g. taking out of License Plate for use)
          //
          IF( (liAction = 3) OR (liAction = 4) ) THEN BEGIN
            IF( ldSelectedQty <> 0 ) THEN BEGIN
              ptrecLPLineTempOut := lrecLPLine;
              ptrecLPLineTempOut.Quantity := ldSelectedQty;
              ptrecLPLineTempOut.INSERT;

              // if unbuilding we'll keep the LP intact as it was for historical purposes
              IF( liAction = 3 ) THEN BEGIN
                lrecLPLine.VALIDATE(Quantity,lrecLPLine.Quantity - ldSelectedQty);
                lrecLPLine.MODIFY(TRUE);
              END;
            END;
          END;

          IF ( liAction = 5) THEN BEGIN
            // if we are updating the source document
            // then leave the lp line alone, and let the calling
            // function decide what to do
            ptrecLPLineTempOut := lrecLPLine;
            ptrecLPLineTempOut.INSERT;
          END;
        UNTIL( lrecLPLine.NEXT=0 );
      END;

      IF( liAction = 4 ) THEN BEGIN
        lrecLPHeader.GET(lcodLicensePlateNumber); // refetch since may have changed
        lrecLPHeader.VALIDATE(Status,lrecLPHeader.Status::Unbuilt);
        lrecLPHeader.MODIFY(TRUE);
      END;

      // return the license plate the calling function should use
      IF( (liAction = 3) OR (liAction=4)) THEN BEGIN
        lrecLPLine.SETRANGE(Quantity,0);
        lrecLPLine.DELETEALL(TRUE);
        EXIT('');  // not using the license plate but instead just the removed components
      END
      ELSE
        EXIT(lcodLicensePlateNumber);
      }
    END;

    PROCEDURE AdjustExcessLPQuantity@1000000023(precLicensePlateHeader@1000000000 : Record 23044505;VAR ptrecLPLineTemp@1000000001 : TEMPORARY Record 23044506;VAR ptrecLPHeaderTemp@1000000004 : TEMPORARY Record 23044505;VAR ptrecEventParams@1000000005 : TEMPORARY Record 23044511;precNewLPHeader@1000000009 : Record 23044505;poptAdjustmentAction@1000000012 : 'None,MoveExcessNewLP,RemoveExcessFromLP,RemoveUsedFromLP,Unbuild,UpdateSource');
    VAR
      lrecLPLine@1000000002 : Record 23044506;
      lrecLPHeader@1000000003 : Record 23044505;
      lrecMoveLPLine@1000000010 : Record 23044506;
      ldUsedQty@1000000011 : Decimal;
      lbUsedFully@1000000006 : Boolean;
      lbUsedPartially@1000000007 : Boolean;
      lbUsed@1000000008 : Boolean;
    BEGIN
      // will handle case 0 - where full quantity must be used
      // will handle case 1 - where the unused portion (excess) will be moved to a new LP
      // will handle case 2 - where the unused portion (excess) will be removed from the LP


      ptrecLPHeaderTemp := precLicensePlateHeader;
      ptrecLPHeaderTemp.INSERT;

      lrecLPLine.SETRANGE("License Plate No.",precLicensePlateHeader."No.");
      lrecLPLine.SETFILTER("No.",'<>%1','');
      IF( lrecLPLine.FIND('-') ) THEN BEGIN
        REPEAT
          IF lrecLPLine.Type = lrecLPLine.Type::Item THEN BEGIN
            ldUsedQty := GetAdjustmentUsedQty(ptrecEventParams,lrecLPLine."License Plate No.",lrecLPLine."Line No.");
            lbUsedFully := lrecLPLine.Quantity = ldUsedQty;

            IF (poptAdjustmentAction=poptAdjustmentAction::None) AND (NOT lbUsedFully) THEN
              ERROR(cuTranslationMgmt.getTranslatedString('ERR_LP_USAGE_QTY_MISMATCH', codRegionCode), lrecLPLine.Quantity, ldUsedQty );


            lbUsed := (ldUsedQty <> 0);
            lbUsedPartially := lbUsed AND NOT lbUsedFully;

            IF lbUsedFully THEN BEGIN
              ptrecLPLineTemp := lrecLPLine;
              ptrecLPLineTemp.INSERT;
            END;

            IF lbUsedPartially THEN BEGIN
              IF poptAdjustmentAction = poptAdjustmentAction::MoveExcessNewLP THEN BEGIN
                IF codNewLPHeaderNo = '' THEN
                  CreateNewAdjustmentLP(precNewLPHeader,precLicensePlateHeader."Location Code",precLicensePlateHeader."Bin Code");

                lrecMoveLPLine := lrecLPLine;
                lrecMoveLPLine.VALIDATE(Quantity, lrecMoveLPLine.Quantity - ldUsedQty);
                AddAdjustmentLineToNewLP(lrecMoveLPLine);
              END;

              lrecLPLine.VALIDATE(Quantity,ldUsedQty);
              lrecLPLine.MODIFY(TRUE);

              ptrecLPLineTemp := lrecLPLine;
              ptrecLPLineTemp.INSERT;
            END;

            IF NOT lbUsed THEN BEGIN
              IF poptAdjustmentAction = poptAdjustmentAction::MoveExcessNewLP THEN BEGIN
                IF codNewLPHeaderNo = '' THEN
                  CreateNewAdjustmentLP(precNewLPHeader,precLicensePlateHeader."Location Code",precLicensePlateHeader."Bin Code");

                lrecMoveLPLine := lrecLPLine;
                AddAdjustmentLineToNewLP(lrecMoveLPLine);
              END;

              lrecLPLine.Quantity := -1;
              lrecLPLine.MODIFY;
            END;
          END ELSE BEGIN
            lbUsed := FALSE;
            lrecLPHeader.GET(lrecLPLine."No.");
            IsEmbeddedLPUsed(lrecLPHeader."No.", ptrecEventParams, lbUsed);
            IF lbUsed THEN BEGIN
              AdjustExcessLPQuantity(lrecLPHeader,ptrecLPLineTemp, ptrecLPHeaderTemp, ptrecEventParams, precNewLPHeader, poptAdjustmentAction);
            END ELSE BEGIN
              IF poptAdjustmentAction = poptAdjustmentAction::MoveExcessNewLP THEN BEGIN
                IF codNewLPHeaderNo = '' THEN
                  CreateNewAdjustmentLP(precNewLPHeader,precLicensePlateHeader."Location Code",precLicensePlateHeader."Bin Code");

                AddAdjustmentLineToNewLP(lrecLPLine);
              END;

              lrecLPLine.Quantity := -1;
              lrecLPLine.MODIFY;
            END;
          END;
        UNTIL(lrecLPLine.NEXT=0);

        lrecLPLine.SETRANGE(Quantity,-1);
        lrecLPLine.DELETEALL(TRUE);
      END;
    END;

    PROCEDURE AdjustUsedLPQuantity@1000000057(precLicensePlateHeader@1000000000 : Record 23044505;VAR ptrecLPLineTemp@1000000001 : TEMPORARY Record 23044506;VAR ptrecEventParams@1000000005 : TEMPORARY Record 23044511;precNewLPHeader@1000000009 : Record 23044505;poptAdjustmentAction@1000000004 : 'None,MoveExcessNewLP,RemoveExcessFromLP,RemoveUsedFromLP,Unbuild,UpdateSource');
    VAR
      lrecLPLine@1000000002 : Record 23044506;
      lrecLPHeader@1000000003 : Record 23044505;
      lrecMoveLPLine@1000000010 : Record 23044506;
      ldUsedQty@1000000011 : Decimal;
      lbUsedFully@1000000006 : Boolean;
      lbUsedPartially@1000000007 : Boolean;
      lbUsed@1000000008 : Boolean;
    BEGIN
      // will handle case 3 - where the used portion is removed from the LP and the unused (excess) stays on the LP
      // will handle case 4 - where the license plate(s) are just unbuilt

      lrecLPLine.SETRANGE("License Plate No.",precLicensePlateHeader."No.");
      lrecLPLine.SETFILTER("No.",'<>%1','');
      IF( lrecLPLine.FIND('-') ) THEN BEGIN
        REPEAT
          IF lrecLPLine.Type = lrecLPLine.Type::Item THEN BEGIN
            ldUsedQty := GetAdjustmentUsedQty(ptrecEventParams,lrecLPLine."License Plate No.",lrecLPLine."Line No.");
            lbUsedFully := lrecLPLine.Quantity = ldUsedQty;
            lbUsed := (ldUsedQty <> 0);
            lbUsedPartially := lbUsed AND NOT lbUsedFully;

            IF lbUsedFully THEN BEGIN
              ptrecLPLineTemp := lrecLPLine;
              ptrecLPLineTemp.INSERT;

              IF (poptAdjustmentAction = poptAdjustmentAction::RemoveUsedFromLP) OR (poptAdjustmentAction = poptAdjustmentAction::Unbuild) THEN BEGIN
                lrecLPLine.Quantity := -1;
                lrecLPLine.MODIFY;
              END;
            END;

            IF lbUsedPartially THEN BEGIN
              ptrecLPLineTemp := lrecLPLine;
              ptrecLPLineTemp.Quantity := ldUsedQty;
              ptrecLPLineTemp.INSERT;

              IF (poptAdjustmentAction = poptAdjustmentAction::RemoveUsedFromLP) OR (poptAdjustmentAction = poptAdjustmentAction::Unbuild) THEN BEGIN
                lrecLPLine.VALIDATE(Quantity,lrecLPLine.Quantity - ldUsedQty);
                lrecLPLine.MODIFY(TRUE);
              END;
            END;
          END ELSE BEGIN
            lbUsed := FALSE;
            lrecLPHeader.GET(lrecLPLine."No.");
            IsEmbeddedLPUsed(lrecLPHeader."No.", ptrecEventParams, lbUsed);
            IF lbUsed THEN BEGIN
              AdjustUsedLPQuantity(lrecLPHeader,ptrecLPLineTemp, ptrecEventParams, precNewLPHeader, poptAdjustmentAction);
            END;
          END;
        UNTIL(lrecLPLine.NEXT=0);

        lrecLPLine.SETRANGE(Quantity,-1);
        lrecLPLine.DELETEALL(TRUE);
      END;
    END;

    PROCEDURE IsEmbeddedLPUsed@1000000028(pcodLPNumber@1000000001 : Code[20];VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511;VAR pbUsed@1000000002 : Boolean) : Boolean;
    VAR
      lrecLPHeader@1000000004 : Record 23044505;
      lrecLPLine@1000000005 : Record 23044506;
    BEGIN
      // will recurse through further embedded license plates as well
      // if there is any usage at all it will return true
      // otherwise will return false;

      IF pbUsed THEN
        EXIT;


      lrecLPLine.SETRANGE("License Plate No.",pcodLPNumber);
      IF lrecLPLine.FINDSET(FALSE) THEN BEGIN
        REPEAT
          IF GetAdjustmentUsedQty(ptrecEventParams,lrecLPLine."License Plate No.",lrecLPLine."Line No.") <> 0 THEN BEGIN
            pbUsed := TRUE;
            EXIT;
          END;
        UNTIL(lrecLPLine.NEXT=0);
      END;

      lrecLPHeader.GET(pcodLPNumber);
      lrecLPHeader.CALCFIELDS("Has License Plates");

      IF lrecLPHeader."Has License Plates" THEN BEGIN
        lrecLPLine.RESET;
        lrecLPLine.SETRANGE("License Plate No.",lrecLPHeader."No.");
        lrecLPLine.SETRANGE(Type,lrecLPLine.Type::"License Plate");
        IF lrecLPLine.FINDSET(FALSE) THEN BEGIN
          REPEAT
            IsEmbeddedLPUsed(lrecLPLine."No.",ptrecEventParams,pbUsed);
            IF pbUsed THEN
              EXIT;
          UNTIL(lrecLPLine.NEXT=0);
        END;
      END;
    END;

    PROCEDURE CreateNewAdjustmentLP@1000000031(VAR precNewLPHeader@1000000000 : Record 23044505;pcodLocationCode@1000000001 : Code[10];pcodBinCode@1000000002 : Code[20]);
    BEGIN
      CLEAR(precNewLPHeader);
      precNewLPHeader.INIT;
      precNewLPHeader."Location Code" := pcodLocationCode;
      precNewLPHeader."Bin Code" := pcodBinCode;
      precNewLPHeader.INSERT(TRUE);

      codNewLPHeaderNo := precNewLPHeader."No.";
    END;

    PROCEDURE AddAdjustmentLineToNewLP@1000000036(precLPLineToMove@1000000002 : Record 23044506);
    VAR
      lrecLPLine@1000000000 : Record 23044506;
      liNextLineNumber@1000000001 : Integer;
    BEGIN
      lrecLPLine := precLPLineToMove;
      lrecLPLine."License Plate No." := codNewLPHeaderNo;
      lrecLPLine."Line No." := iNextNewLPLineNumber;
      lrecLPLine.INSERT(TRUE);
      iNextNewLPLineNumber := iNextNewLPLineNumber + 10000;
    END;

    PROCEDURE GetAdjustmentUsedQty@1000000049(VAR ptrecEventParams@1000000000 : TEMPORARY Record 23044511;pcodLPNumber@1000000001 : Code[20];piLineNumber@1000000002 : Integer) : Decimal;
    BEGIN
      EXIT(ptrecEventParams.getValueAsDecimal(STRSUBSTNO('%1_%2',pcodLPNumber,piLineNumber)));
    END;

    LOCAL PROCEDURE SetLPProperties@1000000014(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lrecLPHeader@1000000002 : Record 23044505;
      lrecWHISetup@1000000003 : Record 23044502;
    BEGIN
      lrecWHISetup.GET;

      lrecLPHeader.GET(ptrecEventParams.getValue('lp_number'));
      lrecLPHeader."Shipment Date" := ptrecEventParams.getValueAsDate('setfldShipment Date');//,lrecWHISetup."Default Date Format");
      lrecLPHeader."Shipment Gross Weight" := ptrecEventParams.getValueAsDecimal('setfldShipment Gross Weight');
      lrecLPHeader."Shipment Net Weight" := ptrecEventParams.getValueAsDecimal('setfldShipment Net Weight');
      lrecLPHeader."Shipment Length" := ptrecEventParams.getValueAsDecimal('setfldShipment Length');
      lrecLPHeader."Shipment Width" := ptrecEventParams.getValueAsDecimal('setfldShipment Width');
      lrecLPHeader."Shipment Height" := ptrecEventParams.getValueAsDecimal('setfldShipment Height');
      lrecLPHeader."Shpt. Dim. Unit of Measure" := ptrecEventParams.getValue('setfldSP Dimensions Unit of Measure');
      lrecLPHeader."Shipment Cubage" := ptrecEventParams.getValueAsDecimal('setfldShipment Cubage');
      lrecLPHeader."Cubage Unit of Measure" := ptrecEventParams.getValue('setfldCubage Unit of Measure');
      lrecLPHeader."Package Tracking Number" := ptrecEventParams.getValue('setfldPackage Tracking Number');
      lrecLPHeader."Maximum Weight" := ptrecEventParams.getValueAsDecimal('setfldMaximum Weight');
      lrecLPHeader."Minimum Weight" := ptrecEventParams.getValueAsDecimal('setfldMinimum Weight');
      lrecLPHeader."Maximum Cubage" := ptrecEventParams.getValueAsDecimal('setfldMaximum Cubage');
      lrecLPHeader."Minimum Cubage" := ptrecEventParams.getValueAsDecimal('setfldMinimum Cubage');
      lrecLPHeader."Weight Unit of Measure" := ptrecEventParams.getValue('setfldWeight Unit of Measure');
      lrecLPHeader.Length := ptrecEventParams.getValueAsDecimal('setfldLength');
      lrecLPHeader.Width := ptrecEventParams.getValueAsDecimal('setfldWidth');
      lrecLPHeader.Height := ptrecEventParams.getValueAsDecimal('setfldHeight');
      lrecLPHeader."Dim. Unit of Measure" := ptrecEventParams.getValue('setfldLP Dimensions Unit of Measure');
      lrecLPHeader."EDI Status" := ptrecEventParams.getValueAsInt('setfldEDI Status');
      lrecLPHeader."EDI Sent Date" := ptrecEventParams.getValueAsDateTime('setfldEDI Sent Date',lrecWHISetup."Default Date Format");
      lrecLPHeader.SKID := ptrecEventParams.getValue('setfldSKID'); //TPZ3158
      lrecLPHeader.MODIFY(TRUE);

      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);
    END;

    PROCEDURE IsItemOnLP@1000000016(pcodLicensePlateNo@1000000004 : Code[20];psItemNumber@1000000000 : Text;psVariantCode@1000000001 : Text;psLotNumber@1000000002 : Text;psSerialNumber@1000000003 : Text) : Boolean;
    VAR
      lrecLPLine@1000000005 : Record 23044506;
    BEGIN
      //<FUNC>
      //  Returns true if the License Plate contains that item scanned.
      //</FUNC>

      lrecLPLine.SETRANGE("License Plate No.",pcodLicensePlateNo);
      lrecLPLine.SETRANGE(Type,lrecLPLine.Type::Item);
      lrecLPLine.SETRANGE("No.",psItemNumber);

      IF psVariantCode <> '' THEN
        lrecLPLine.SETRANGE("Variant Code",psVariantCode);
      IF psLotNumber <> '' THEN
        lrecLPLine.SETRANGE("Lot No.",psLotNumber);
      IF psSerialNumber <> '' THEN
        lrecLPLine.SETRANGE("Serial No.",psSerialNumber);

      EXIT(lrecLPLine.COUNT>0);
    END;

    PROCEDURE SetLPModifiedBy@100000000(VAR precLPHeader@100000000 : Record 23044505;VAR ptrecEventParams@100000001 : TEMPORARY Record 23044511);
    VAR
      lcodUserName@100000002 : Code[50];
    BEGIN
      lcodUserName := cuCommonFuncs.getUserNameWithDomain(ptrecEventParams);
      IF ((lcodUserName <> '') AND (precLPHeader."Last Modified By" <> lcodUserName)) THEN BEGIN
        precLPHeader."Last Modified By" := lcodUserName;
        precLPHeader.MODIFY(FALSE);
      END;
    END;

    PROCEDURE updatePausePicking@1000000015(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText) : Boolean;
    VAR
      lcodLicensePlateNumber@1000000003 : Code[20];
      liProcessState@1000000002 : Integer;
      lrecLicensePlateHeader@1000000004 : Record 23044505;
      WMDMCommonFunctions@1000000005 : Codeunit 23044501;
    BEGIN
      //TPZ2781
      cuWMDMActivityLogMgt.logWMDMPDAActivitiesPS(ptrecEventParams);
      WMDMCommonFunctions.generateSuccessReturn(1, pbsOutput);
      EXIT(TRUE);
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
      001 TPZ3158 PKS 04/14/21  Added code to flow SKID to license plate
    }
    END.
  }
}

