OBJECT Codeunit 14050001 UPSlink Transaction
{
  OBJECT-PROPERTIES
  {
    Date=07/13/20;
    Time=12:00:00 PM;
    Version List=SE0.62;
  }
  PROPERTIES
  {
    Permissions=TableData 14050005=rm;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ShippingAgent@1000000000 : Record 291;
      PackingStation@1000000001 : Record 14000709;
      CarrierPackingStation@1240030011 : Record 14000729;
      ShippingSetup@1000000002 : Record 14000707;
      ShippingAgentAccount@1000000003 : Record 14050005;
      ShippingAgentService@1000000004 : Record 14000708;
      UPSlinkSetup@1240030001 : Record 14050001;
      Country@1240030020 : Record 9;
      UPSlinkWWOrigDestValid@1240030034 : Record 14050011;
      Shipping@1000000005 : Codeunit 14000701;
      ShippingSetupRetrieved@1000000006 : Boolean;
      UPSlinkSetupRetrieved@1240030002 : Boolean;
      NameAndAddressMgt@1240030500 : Codeunit 14000709;
      Text001@1001 : TextConst 'ENU=You cannot close this package because there are open packages for this international shipment.';
      Text002@1002 : TextConst 'ENU=Shipping Base Rates are not set for agent: %1 service: %2 zone: %3 max weight: %4. Make sure there is data in the UPS Shipping Rate Chart table. If empty, then run the UPS Services and Rate dataport.';
      Text003@1003 : TextConst 'ENU=Please choose the ship notification type.';
      Text004@1240030003 : TextConst 'ENU=%1 invalid for %2 over 999';
      Text005@1240030010 : TextConst 'ENU=%1 invalid for %2';
      Text006@1240030009 : TextConst 'ENU=%1 %2 invalid for %3';
      Text007@1240030008 : TextConst 'ENU=Dimensions cannot be entered for %1 %2';
      Text008@1240030007 : TextConst 'ENU=%1 invalid for %2 %3';
      Text009@1240031037 : TextConst 'ENU=Error Uploading 1 or more %1.';
      Text010@1010 : TextConst 'ENU=Your Manifest version does not support %1 %2.';
      Text011@1240031038 : TextConst 'ENU=Error Uploading %1 %2 %3.';
      Text012@1240030006 : TextConst 'ENU=Return Services invalid for %1';
      Text013@1013 : TextConst 'ENU=Dimensions are missing in %1.';
      Text014@1014 : TextConst 'ENU=The %1 must be a 7 digit number. Change the %2.';
      Text015@1015 : TextConst 'ENU=Package exceeds maximum size.';
      Text016@1016 : TextConst 'ENU=You cannot open this package because it is the first package of a multi-package shipment';
      Text017@1017 : TextConst 'ENU=You must open the last package of this international shipment first.';
      Text018@1018 : TextConst 'ENU=Call Tag Request: %1 will be sent to UPS with tonight`s manifest.';
      Text019@1019 : TextConst 'ENU=UPS Label';
      Text020@1020 : TextConst 'ENU=UPS Return Label';
      Text023@1023 : TextConst 'ENU=Book %1, Page %2';
      Text024@1024 : TextConst 'ENU=UPS Driver Label %1';
      Text025@1025 : TextConst 'ENU=UPS Manifest %1';
      Text027@1027 : TextConst 'ENU=UPS Book No. and Page No. must be reset manually.';
      Text028@1028 : TextConst 'ENU=%1 formatted is %2 with %3 decimals.';
      Text029@1029 : TextConst 'ENU=There are no shipping zones for agent: %1 service: %2 from state: %3 to country: %4';
      Text030@1030 : TextConst 'ENU=There are no shipping zones for agent: %1 service: %2 from code: %3 to code: %4';
      Text031@1031 : TextConst 'ENU=There are overlapping shipping codes';
      Text032@1032 : TextConst 'ENU=Hundred Weight Rate for %1 service not found.';
      Text035@1035 : TextConst 'ENU=Packages for domestic UPS shipments cannot be greater than 150 lbs.  This package weighs %1.';
      Text036@1036 : TextConst 'ENU=User interrupted Manifest Posting.';
      Text037@1240030015 : TextConst 'ENU=%1 invalid for %3 %4 %5 %6.';
      Text038@1034 : TextConst 'ENU=%1 %2 invalid for %3 greater than 1000 USD';
      Text039@1037 : TextConst 'ENU=%1 %2 invalid for %3 greater than USD 50,000';
      Text041@1039 : TextConst 'ENU=%1 invalid for %2 over $999';
      Text045@1043 : TextConst 'ENU=%1 %2 invalid for Exchange Collect (COD)';
      Text047@1045 : TextConst 'ENU=Valid US %1 must be 6 characters.';
      Text048@1046 : TextConst 'ENU=%1 shipping must be billed to a US account.';
      Text049@1047 : TextConst 'ENU=Valid %1 must be 6 characters.';
      Text050@1048 : TextConst 'ENU=%1 must be %2 for %3 %4';
      Text051@1049 : TextConst 'ENU=%1 cannot be equal to the Shipping Agent %2 for %3';
      Text056@1054 : TextConst 'ENU=%1 is prior to %2.  Do you want to post this manifest?';
      Text057@1055 : TextConst 'ENU=%1 Reopened Posted Packages (Voided Packages).';
      Text058@1056 : TextConst 'ENU=\ Please select UPS Next Day Air service as an alternative.';
      Text059@1240030005 : TextConst 'ENU=Invalid %1 in %2.  Import %3 table.';
      Text060@1240030012 : TextConst 'ENU=%1 cannot be greater than 108 inches.';
      Text061@1240030004 : TextConst 'ENU=%1 invalid for International Shipment.';
      Text062@1240030016 : TextConst 'ENU=%1 %2 invalid for %3 %4.';
      Text063@1240030014 : TextConst 'ENU=%1 %2 for %3 %4 was transmitted on %5 at %6.  You may only remove packages from this manifest.  Do not add packages for %3 %4!';
      Text064@1240030013 : TextConst 'ENU=Shipping labels';
      Text065@1240030017 : TextConst 'ENU=will print when';
      Text066@1240030018 : TextConst 'ENU=last package';
      Text067@1240030019 : TextConst 'ENU=is closed';
      Text068@1057 : TextConst 'ENU=%1 invalid for %2 blank';
      Text069@1240030021 : TextConst 'ENU=UPS Paperless Invoice Label';
      Text070@1240030024 : TextConst 'ENU=Packages for %1 %2 cannot be greater than 30 lbs.  This package weighs %3 lbs.';
      Text071@1240030022 : TextConst 'ENU=Weight must be greater than 0.';
      Text073@1240030025 : TextConst 'ENU=Duplicate %1 %2 %3 %4 for %5 %6 in the last 31 days.';
      Text074@1240030026 : TextConst 'ENU=%1 %2 or %3 must be entered for %4 %5';
      Text075@1240030027 : TextConst 'ENU=Warsaw Agreement Label';
      Text076@1240030028 : TextConst 'ENU=Invalid %1 %2.';
      Text077@1240030030 : TextConst 'ENU=Limit exceeded.  The maximum limit for hazardous materials in a package is 3.\';
      Text078@1240030029 : TextConst 'ENU=Please check the contents of package: %1 %2';
      Text079@1240030031 : TextConst 'ENU=%1 required for %2 %3.';
      Text080@1240030032 : TextConst 'ENU=%1 must be manifested separately.  %1 %2 and %3 included in this %4.';
      Text081@1240030033 : TextConst 'ENU=Invalid Service Indicator %1.';
      Text082@1240030035 : TextConst 'ENU=Shipment data exceeds bar code capacity.  Shipment must be keyed.';
      Text083@1240030036 : TextConst 'ENU=Set Total Package Count to total number of packages for this order or pack without printing then Renumber All Packages Print';
      Text084@1240030037 : TextConst 'ENU=%1 invalid for Domestic Shipment.';
      ExportDocSetup@1240030000 : Record 14000991;
      ExportDocSetupRetrieved@1240030023 : Boolean;
      UPSlinkMgt@1240031034 : Codeunit 14050002;
      Text085@1240030038 : TextConst 'ENU=Too many packages for Returns Exchange.';
      Text086@1240030039 : TextConst 'ENU=%1 %2 does not exist in %3. The city name is either misspelled or invalid for this service.';
      Text087@1240030040 : TextConst 'ENU=%1 must be the same for both packages.';
      Text088@1240030041 : TextConst 'ENU=Shipping Type on Package must be Prepaid. Select International Billing in Shipping Agent Options.';
      Text089@1240020000 : TextConst 'ENU=Packages for international UPS shipments cannot be greater than 150 lbs.  This package weighs %1 lbs.';
      Text090@1240020001 : TextConst 'ENU=Shipping List Rates are not set for agent: %1 service: %2 zone: %3 max weight: %4. Make sure there is data in the UPSlink List Rate Chart table. If empty, then run the UPSlink List Rates dataport.';
      Text091@1240020002 : TextConst 'ENU=Too many items for %1.';
      Text092@1240020003 : TextConst 'ENU=%1 invalid. Remove UPS Options %2, %3, %4.';
      Text093@1240020004 : TextConst 'ENU="The %1 field is required for hazardous material item #%2 - %3. "';
      Text094@1240020005 : TextConst 'ENU=Hazardous Material information is required for a Dangerous Goods package.';
      Text095@1240020006 : TextConst 'ENU=%1 %2 not found in %3 %4, %5 %6, %7 %8.';
      Text096@1240020007 : TextConst 'ENU=Demo is checked in UPSlink Setup. This manifest will NOT be sent to UPS. Do you want to continue?';
      Text097@1240020008 : TextConst 'ENU=%1 %2 must be Commissioned to send a UPS Manifest.';
      Text098@1240020009 : TextConst 'ENU=Make sure that Users have FULL permissions to this directory: %1';
      Text099@1240020010 : TextConst 'ENU=Book and Page Numbers are missing for %1 %2. You will need to Re-Commission for the Primary Acct. or "UPSlink Add Shipper Request"/"UPSlink Add Shipper Response" for additional accounts.';
      Text100@1240020011 : TextConst 'ENU=Package %1 is missing a tracking number.';
      Text101@1240020012 : TextConst 'ENU=Package %1 weight must be greater than 0. Remove this package from the Manifest. Fix the package containing the invalid weight before adding it to a Manifest.';
      Text102@1240020013 : TextConst 'ENU=%1 is missing from %2 %3.';
      Text103@1240020015 : TextConst 'ENU=Shipment weight must be greater than 150 lbs for %1.';
      Text104@1240020016 : TextConst 'ENU=Width cannot be greater than Length.';
      Text105@1240020017 : TextConst 'ENU=Maximum Dry Ice weight for UPS Worldwide Express Freight is 440lb/200kg.';
      Text106@1240020018 : TextConst 'ENU=Shipments over 2,000 kg (4,400 lbs) require approval. Please contact UPS Customer Service. Contact telephone numbers can be found at www.ups.com.';
      Text107@1240020019 : TextConst 'ENU=You must schedule the pickup of your UPS Worldwide Express Freight shipment on ups.com or by calling UPS customer service. Contact telephone numbers can be found at www.ups.com.';
      Text108@1240020021 : TextConst 'ENU=Data missing in %1. Check UPSlink mail.';
      Text109@1240020020 : TextConst 'ENU=Pallet weight exceeds weight limit of %1.';
      Text110@1240020022 : TextConst 'ENU=%1.%2 should be selected.';
      Text111@1240020023 : TextConst 'ENU="The ""%1"" set up in %2 %3 does not exist: %4 \\Either create the directory with FULL permissions or fix the directory on %5. "';
      Text112@1240020025 : TextConst 'ENU=%1 is an invalid %2 for %3 %4 on %5.';
      Text113@1240020026 : TextConst 'ENU=\\Table: %1\Filter: %2';
      Text114@1240020027 : TextConst 'ENU=\\Modify: %1.%2';
      FreightShipment@1240020014 : Boolean;
      Text115@1240020024 : TextConst 'ENU=this computer';
      Text116@1240020032 : TextConst 'ENU=the NAV Server';
      Text117@1240020029 : TextConst 'ENU=Install the "UPSlink Components .NET Automation" external component on this computer. Or contact your Lanham Partner.';
      Text118@1240020028 : TextConst 'ENU=UPSlink components have not been setup properly on this workstation. Run "Setup Additional Workstation" in UPSlink Setup.';
      Text119@1240020030 : TextConst 'ENU=The "Dot NET Automation Print and Scale" external component has not been installed on this computer.  Do you want to continue without printing the manifest label?';
      Text120@1240020031 : TextConst 'ENU=%1 field,%2, has field "%3" set to %4. Do you want to print the manifest label?';
      Text121@1240020034 : TextConst 'ENU=Dimensions are missing on the Package. Make sure all dimensions are greater than 0.';
      Text122@1240020033 : TextConst 'ENU=The Dimensional Weight Factor is missing. Make sure that UPS Services and Rates have been imported and make sure to "Read Mail from UPS" on UPSlink Setup. Or contact your Lanham Partner.';
      Text123@1240020036 : TextConst 'ENU=At least one of these fields needs to be filled out on Packing Station %1: %2, %3.';
      Text125@1240020037 : TextConst 'ENU=UPS does not accept raw wood pallets. Please refer to the UPS Packaging Guidelines for pallets.';
      Text126@1240020035 : TextConst 'ENU=The UPS Routing Code (URC) data is older than 6 months and is invalid according to UPS. Select "Read Mail from UPS" in UPSlink Setup to get the latest URC data from UPS. Or contact your Lanham Partner to download the latest URC file from the Lanham Partner Portal and import that file using the UPS Routing Code Dataport/XMLPort.';
      Text14050601@14050602 : TextConst 'ENU=Packages exist for %1 %2 %3 %4 on %5 %6.  Remove the %1 from this Master Shipment before deleting.';
      Text14050602@14050603 : TextConst 'ENU=UPS World Ease Master does not exist for %1.';
      AHLength@1240020038 : Boolean;
      AHWidth@1240020039 : Boolean;
      AHWeightDom@1240020040 : Boolean;
      AHWeightIntl@1240020041 : Boolean;
      WETransaction@14050601 : Codeunit 14050601;
      WEPrintDoc@14050604 : Codeunit 14050604;

    PROCEDURE GetShippingCharge@8(VAR CurrentPackage@1000000000 : Record 14000701;UpdateWeightAndValues@1000000001 : Boolean);
    VAR
      UPSOptionPage@1000000002 : Record 14000761;
      UPSShippingZoneChart@1000000003 : Record 14000763;
      UPSShippingZone@1000000005 : Record 14000766;
      Package2@1240030000 : Record 14000701;
      ExportDoc@1240030008 : Record 14000981;
      UPSlinkWWOrigDestValid@1240030005 : Record 14050011;
      TotalWeight@1240030001 : Decimal;
      ModifyUPSOptionPage@1240030002 : Boolean;
      i@1240030003 : Integer;
      UPSOptionPage2@1240030004 : Record 14000761;
      TotalValueUSD@1240030010 : Decimal;
      TotalActualWeight@1240030007 : Decimal;
      TotalDimensionalWeight@1240030009 : Decimal;
      TotalAccessorialCharge@1240030013 : Decimal;
      LargePackageMinBillWgt@1240030011 : Integer;
      ShipmentLevel@1240030006 : Boolean;
      PAKRateValid@1240030012 : Boolean;
    BEGIN
      WITH CurrentPackage DO BEGIN
        GetShippingAgent("Shipping Agent Code");
        IF ShippingAgent."Disable Rate Calculation" THEN
          EXIT;

        GetShippingSetup;
        GetUPSlinkSetup;
        GetPackingStation;

        IF ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::UPSlink THEN BEGIN
          IF "Service Indicator" IN ['92','93','94','95','GFP'] THEN
            ERROR(Text062,
              FIELDNAME("Shipping Agent Service"),"Shipping Agent Service",
              ShippingSetup.FIELDNAME("UPS Version"),ShippingSetup."UPS Version");
        END;

        IF ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::"UPSlink/UPS Web Service" THEN BEGIN
          IF "Service Indicator" IN ['92','93','94','95','GFP'] THEN
            EXIT;
        END;

        TESTFIELD("Shipping Agent Account No.");
        UPSlinkSetup.TESTFIELD("Rate Version");

        GetShippingAgentService("Shipping Agent Code","Shipping Agent Service","World Wide Service");
        UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.",0,0);

        IF UpdateWeightAndValues THEN BEGIN
          ClearTotalValueFields;
          "Calculation Weight" := GetWeight;

          GetUPSPackagingDimensions(
            "Override Dimensions","Override Length","Override Width","Override Height",
            UPSOptionPage."UPS Packaging Type");

          GetCalculationFields(1,'>');

          GetCalculationWeightRate(
            UPSOptionPage,ShippingAgentService,"Calculation Weight","Calculation Weight (LBS)",
            "Dimensional Weight",ModifyUPSOptionPage,"Use Dim Weight","World Wide Service",
            "UPS Canadian Service","UPS Puerto Rico Service",TRUE,
            "Calculation Length","Calculation Width","Calculation Height",
            GetUPSCountryCode("Ship-to Country Code"));
        END;

        IF (UPSOptionPage."UPS Packaging Type" <> UPSOptionPage."UPS Packaging Type"::"UPS Letter") AND
           (GetWeight = 0)
        THEN
          ERROR(Text071);

        PackingStation.TESTFIELD("Ship-from ZIP Code");
        IF "Ship-to Country Code" = '' THEN BEGIN
          TESTFIELD("Ship-to State");
          TESTFIELD("Ship-to ZIP Code");
          i := 1;
          REPEAT
            IF i = 6 THEN BEGIN
              IF NOT ("Ship-to ZIP Code"[i] IN ['1','2','3','4','5','6','7','8','9','0','-']) THEN
                ERROR(Text076,FIELDCAPTION("Ship-to ZIP Code"),"Ship-to ZIP Code");
            END ELSE
              IF NOT ("Ship-to ZIP Code"[i] IN ['1','2','3','4','5','6','7','8','9','0']) THEN
                ERROR(Text076,FIELDCAPTION("Ship-to ZIP Code"),"Ship-to ZIP Code");
            i := i + 1;
          UNTIL i > STRLEN("Ship-to ZIP Code");
        END ELSE
          TESTFIELD("Ship-to Country Code");

        IF GetUPSCountryCode("Ship-to Country Code") = 'US' THEN
          TESTFIELD("Ship-to ZIP Code");
        GetShippingZoneChart(
          UPSShippingZoneChart,ShippingAgentService,FixZIPCode(PackingStation."Ship-from ZIP Code"),
          PackingStation."Ship-from State",FixZIPCode("Ship-to ZIP Code"),"Ship-to Country Code",TRUE);

        UPSShippingZone.GET(ShippingAgentService."Service Indicator",UPSShippingZoneChart.Zone);

        IF (NOT "UPS Hundred Weight") AND (NOT (("World Wide Service" OR "UPS Canadian Service") AND
           ("Package No." < "Total Packages")))
        THEN BEGIN
          TotalWeight := 0;
          TotalActualWeight := 0;
          TotalDimensionalWeight := 0;
          IF ("World Wide Service" OR "UPS Canadian Service") AND
             ("Package No." = "Total Packages") AND
             ("Total Packages" > 1) AND
             (NOT Miscellaneous)
          THEN BEGIN
            ShipmentLevel := TRUE;
            LargePackageMinBillWgt :=
              GetAccessorialCharge(UPSOptionPage2,ShippingAgentService,'','LPMBW','',FALSE,0,FALSE,
                0,FALSE,Package2."Insurance Charge", Package2."Base Charge",'');

            IF ShippingAgentAccount."Billable Weight Exempt Status" =
               ShippingAgentAccount."Billable Weight Exempt Status"::"Non-Exempt"
            THEN BEGIN
              CLEAR(UPSlinkWWOrigDestValid);
              UPSlinkWWOrigDestValid.SETCURRENTKEY("Destination Country Code","Origin Country Code",
                "Validation Type");
              UPSlinkWWOrigDestValid.SETRANGE("Destination Country Code",'US');
              UPSlinkWWOrigDestValid.SETRANGE("Origin Country Code",GetUPSCountryCode("Ship-to Country Code"));
              UPSlinkWWOrigDestValid.SETRANGE("Validation Type",
                UPSlinkWWOrigDestValid."Validation Type"::"Billable Weight Exempt Ctry");
              IF NOT(UPSlinkWWOrigDestValid.FIND('-')) THEN
                ShipmentLevel := FALSE;
            END;

            Package2.RESET;
            Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
            Package2.SETRANGE("Source Type","Source Type");
            Package2.SETRANGE("Source Subtype","Source Subtype");

            IF "Multi Document Package" THEN
              Package2.SETFILTER("Source ID","Multi Document No.")
            ELSE
              Package2.SETRANGE("Source ID","Source ID");

            Package2.SETFILTER("No.",'<>%1',"No.");
            Package2.SETRANGE(Closed,FALSE);
            IF Package2.FIND('-') THEN
              ERROR(
                Text001);

            Package2.SETRANGE(Closed);
            Package2.FIND('-');

            REPEAT
              TotalBillableWeights(Package2,TotalWeight,TotalActualWeight,TotalDimensionalWeight,
                ShipmentLevel,LargePackageMinBillWgt);

              IF Package2."Multi Document Package" AND
                (Package2."Original Package No." <> '')
              THEN
                UPSOptionPage2.GET(UPSOptionPage.Type::Package,Package2."Original Package No.")
              ELSE
                UPSOptionPage2.GET(UPSOptionPage.Type::Package,Package2."No.");

              TotalAccessorialCharge := TotalAccessorialCharge +
                GetAccessorialCharge(
                  UPSOptionPage2,ShippingAgentService,UPSShippingZoneChart."To Country Code",
                  FixZIPCode("Ship-to ZIP Code"),"Ship-to City",UPSShippingZoneChart.EAS,
                  TotalWeight,COD,Package2."Calculation Insured Value","Residential Delivery",
                  Package2."Insurance Charge","Base Charge","Ship-to State");
                Package2.MODIFY;
            UNTIL Package2.NEXT = 0;
            TotalBillableWeights(CurrentPackage,TotalWeight,TotalActualWeight,
              TotalDimensionalWeight,ShipmentLevel,LargePackageMinBillWgt);

            IF ShipmentLevel THEN BEGIN
              IF TotalActualWeight > TotalDimensionalWeight THEN
                TotalWeight := TotalActualWeight
              ELSE
                TotalWeight := TotalDimensionalWeight;

            IF Package2."Service Indicator" = '11' THEN
              IF TotalWeight < (15 * Package2."Total Packages") THEN
                TotalWeight := 15 * Package2."Total Packages"
            END;

          END ELSE
            TotalWeight := ROUND("Calculation Weight (LBS)",1,'>');

          IF UPSOptionPage."UPS Packaging Type" = UPSOptionPage."UPS Packaging Type"::"UPS Letter" THEN
            IF NOT OverLetterLimit(
                     UPSOptionPage,"Ship-to State",PackingStation."Ship-from State",
                     "Ship-to Country Code","Service Indicator","Calculation Weight (LBS)",
                     UPSlinkSetup."Rate Version")
            THEN
              TotalWeight := 0
            ELSE
              IF (UPSlinkSetup."Rate Version" > '2009') AND
                 ("Service Indicator" IN ['04','07','54'])
              THEN
                CASE TotalWeight OF
                  1:
                    TotalWeight := 81000;  // 1 lb PAK rate
                  2:
                    TotalWeight := 82000;  // 2 lb PAK rate
                END;

          IF (UPSOptionPage."UPS Packaging Type" = UPSOptionPage."UPS Packaging Type"::"UPS 10kg Box") AND
             (TotalWeight <= 22)
          THEN
            TotalWeight := 10000;

          IF (UPSOptionPage."UPS Packaging Type" = UPSOptionPage."UPS Packaging Type"::"UPS 25kg Box") AND
             (TotalWeight <= 55)
          THEN
            TotalWeight := 25000;

          IF (UPSlinkSetup."Rate Version" > '2009') AND
             ("Total Packages" = 1) AND
             (TotalWeight <= 2) AND
             (UPSOptionPage."UPS Packaging Type" =
              UPSOptionPage."UPS Packaging Type"::"UPS Express Pak") AND
             ("Service Indicator" IN ['04','07','54'])
          THEN BEGIN
            TotalValueUSD := 0;
            PAKRateValid := FALSE;
            IF (UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::None) OR
               (UPSOptionPage."Call Tag Type" <>
                UPSOptionPage."Call Tag Type"::"Exchange Outbound")
            THEN
              IF NOT(GetUPSCountryCode("Ship-to Country Code") IN ['US','PR']) AND
                 (GetUPSCountryCode(PackingStation."Ship-from Country Code") IN ['US','PR']) THEN
                 PAKRateValid := TRUE
            ELSE
              IF (GetUPSCountryCode("Ship-to Country Code") IN ['US','PR']) AND
                 NOT(GetUPSCountryCode(PackingStation."Ship-from Country Code") IN ['US','PR'])
              THEN
                PAKRateValid := TRUE;

            IF PAKRateValid THEN BEGIN
              IF ExportDoc.GET("Export Document No.") THEN BEGIN
                ExportDoc.CALCFIELDS("Total Value USD");
                TotalValueUSD := ExportDoc."Total Value USD";
              END;

              IF (UPSOptionPage."International Routing" =
                  UPSOptionPage."International Routing"::"Nondutiable Document") OR
                 ((TotalValueUSD <= 100) AND (TotalValueUSD <> 0) AND
                  (UPSOptionPage."International Routing" <>
                  UPSOptionPage."International Routing"::"Nondutiable Document"))
              THEN
                CASE TotalWeight OF
                  1:
                    TotalWeight := 81000;  // 1 lb PAK rate
                  2:
                    TotalWeight := 82000;  // 2 lb PAK rate
                END;
            END;
          END;

          IF ShippingAgentAccount."Rate Type" = ShippingAgentAccount."Rate Type"::"Base Rates" THEN
            GetBaseCharge(ShippingAgentService,UPSShippingZoneChart.Zone,TotalWeight,"Base Charge",
              FALSE,"Residential Delivery")
          ELSE
            GetBaseCharge2(ShippingAgentService,UPSShippingZoneChart.Zone,TotalWeight,
              "Base Charge",FALSE,"Residential Delivery");

          "UPS Zone" := UPSShippingZoneChart.Zone;

          "Accessorial Charge" := TotalAccessorialCharge +
            GetAccessorialCharge(
              UPSOptionPage,ShippingAgentService,UPSShippingZoneChart."To Country Code",
              FixZIPCode("Ship-to ZIP Code"),"Ship-to City",UPSShippingZoneChart.EAS,
              TotalWeight,COD,"Calculation Insured Value","Residential Delivery",
              "Insurance Charge","Base Charge","Ship-to State");

          IF UPSOptionPage."Extended Area Surcharge" <> UPSShippingZoneChart.EAS THEN BEGIN
            IF ("World Wide Service" OR "UPS Canadian Service") AND
               ("Total Packages" > 1)
            THEN BEGIN
              Package2.FIND('-');
              REPEAT
                  IF Package2."Multi Document Package" AND
                    (Package2."Original Package No." <> '')
                  THEN
                    UPSOptionPage2.GET(UPSOptionPage.Type::Package,Package2."Original Package No.")
                  ELSE
                    UPSOptionPage2.GET(UPSOptionPage.Type::Package,Package2."No.");
                UPSOptionPage2."Extended Area Surcharge" := UPSShippingZoneChart.EAS;
                UPSOptionPage2.MODIFY;
              UNTIL Package2.NEXT = 0;
            END ELSE BEGIN
              UPSOptionPage."Extended Area Surcharge" := UPSShippingZoneChart.EAS;
              UPSOptionPage.MODIFY;
            END;
          END;

          IF ShippingSetup."Default Size Units" = ShippingSetup."Default Size Units"::"IN" THEN
            GetPeakSurcharge(CurrentPackage,UPSOptionPage,'I')
          ELSE
            GetPeakSurcharge(CurrentPackage,UPSOptionPage,'M');

          Surcharge := GetFuelSurcharge(ShippingAgentService,
            PackingStation."Ship-from State",
            GetUPSCountryCode(PackingStation."Ship-from Country Code"),
            GetUPSCountryCode("Ship-to Country Code"),
            "Base Charge");

          IF "Accessorial Charge" > 0 THEN
            Surcharge += GetFuelSurcharge(ShippingAgentService,
              PackingStation."Ship-from State",
              GetUPSCountryCode(PackingStation."Ship-from Country Code"),
              GetUPSCountryCode("Ship-to Country Code"),
              "Accessorial Charge");

          "Shipping Cost" := "Base Charge" + "Accessorial Charge" + Surcharge;

          IF NOT Closed THEN BEGIN
            Markup :=
              Shipping.GetMarkup(
                ShippingAgentService,"Shipping Cost","Ship-to Type","Ship-to No.","Ship-to Code");
            IF "Override Shipping Charge" <> 0 THEN
              "Shipping Charge" := "Override Shipping Charge"
            ELSE
              "Shipping Charge" := "Shipping Cost" + Markup + "Additional Shipping Charge";
          END;
          TestAndTransferToThirdParty(CurrentPackage,UPSOptionPage,ShippingAgentService);
        END ELSE BEGIN
          "Shipping Cost" := 0;
          IF NOT Closed THEN BEGIN
            Markup := 0;
            "Shipping Charge" := 0;
          END;

          "Base Charge" := 0;
          "UPS Zone" := UPSShippingZoneChart.Zone;
          TestAndTransferToThirdParty(CurrentPackage,UPSOptionPage,ShippingAgentService);
        END;
      END;
    END;

    LOCAL PROCEDURE GetRateShopShippingCharge@15(RateShopHeader@1000000000 : Record 14000741;CurrentShippingAgentService@1000000001 : Record 14000708;CurrentUPSOptionPage@1000000002 : Record 14000761;CurrentUPSShippingZoneChart@1000000003 : Record 14000763;ZoneCode@1000000004 : Code[10];HundredWeight@1000000005 : Boolean;VAR UPSShippingRateChart@1000000006 : Decimal;VAR AccessorialChargeAmount@1000000007 : Decimal;VAR BaseAmount@1000000008 : Decimal;VAR SurchargeAmount@1000000009 : Decimal;VAR MarkupAmount@1000000010 : Decimal) : Boolean;
    VAR
      ShippingRate@1000000011 : Record 14000764;
      UPSShippingZone@1000000013 : Record 14000766;
      InsuranceCharge@1000000014 : Decimal;
      HWRatePerPound@1240030002 : Decimal;
      LargePackageFee@1240030009 : Decimal;
      LargePackageSurcharge@1240030006 : Decimal;
      SaturdayDeliveryCharge@1240030008 : Decimal;
      SaturdayPickupCharge@1240030007 : Decimal;
      CWTDASurcharge@1240030005 : Decimal;
      CWTResidentialSurcharge@1240030004 : Decimal;
      DASurcharge@1240030003 : Decimal;
      HundredWeightService@1240030000 : Record 14000765;
      TotalCalcWeight@1240030001 : Decimal;
      HundredWgtListRate@1240030010 : Record 14050019;
    BEGIN
      WITH RateShopHeader DO BEGIN
        GetShippingSetup;
        GetUPSlinkSetup;
        CLEAR(PackingStation);

        IF "Rate Shop Packing Station Code" <> '' THEN
          PackingStation.GET("Rate Shop Packing Station Code")
        ELSE
          GetPackingStation;
        CarrierPackingStation.GetPackingStation(PackingStation);
        CarrierPackingStation.TESTFIELD("UPS Shipping Agent Account No.");
        GetShippingAgentAccount(CarrierPackingStation."UPS Shipping Agent Account No.");

        IF CurrentUPSOptionPage."UPS Packaging Type" =
           CurrentUPSOptionPage."UPS Packaging Type"::"UPS Letter"
        THEN
          IF NOT OverLetterLimit(
                   CurrentUPSOptionPage,"Ship-to State",PackingStation."Ship-from State",
                   "Ship-to Country Code",ShippingAgentService."Service Indicator",
                   "Calculation Weight (LBS)",UPSlinkSetup."Rate Version")
          THEN
            "Calculation Weight (LBS)" := 0
          ELSE
            IF (UPSlinkSetup."Rate Version" > '2009') AND
               (CurrentShippingAgentService."Service Indicator" IN ['04','07','54']) AND
               ("Calculation Weight (LBS)" <= 2)
            THEN
              IF "Calculation Weight (LBS)" <= 1 THEN
                "Calculation Weight (LBS)" := 81000  // 1 lb PAK rate
              ELSE
                "Calculation Weight (LBS)" := 82000;  // 2 lb PAK rate

        IF NOT HundredWeight THEN BEGIN
          IF ((CurrentUPSOptionPage."UPS Packaging Type" =
               CurrentUPSOptionPage."UPS Packaging Type"::"UPS 10kg Box") AND
             ("Calculation Weight (LBS)" <= 22))
          THEN
            "Calculation Weight (LBS)" := 10000;

          IF ((CurrentUPSOptionPage."UPS Packaging Type" =
               CurrentUPSOptionPage."UPS Packaging Type"::"UPS 25kg Box") AND
             ("Calculation Weight (LBS)" <= 55))
          THEN
            "Calculation Weight (LBS)" := 25000;

          IF (UPSlinkSetup."Rate Version" > '2009') AND
             ("No. of Packages" = 1) AND
             ("Calculation Weight (LBS)" <= 2) AND
             (CurrentShippingAgentService."Service Indicator" IN ['04','07','54']) AND
             (CurrentUPSOptionPage."UPS Packaging Type" =
              CurrentUPSOptionPage."UPS Packaging Type"::"UPS Express Pak")
          THEN
            IF "Calculation Weight (LBS)" <= 1 THEN
              "Calculation Weight (LBS)" := 81000  // 1 lb PAK rate
            ELSE
              "Calculation Weight (LBS)" := 82000;  // 2 lb PAK rate

          IF ShippingAgentAccount."Rate Type" = ShippingAgentAccount."Rate Type"::"Base Rates" THEN BEGIN
            IF NOT(GetBaseCharge(CurrentShippingAgentService,CurrentUPSShippingZoneChart.Zone,
                 RateShopHeader."Calculation Weight (LBS)",BaseAmount,TRUE,"Residential Delivery")) THEN
              EXIT(FALSE)
          END ELSE BEGIN
            IF NOT(GetBaseCharge2(CurrentShippingAgentService,CurrentUPSShippingZoneChart.Zone,
                   "Calculation Weight (LBS)",BaseAmount,TRUE,"Residential Delivery")) THEN
              EXIT(FALSE);
          END;
        END ELSE BEGIN
          IF NOT UPSShippingZone.GET(CurrentShippingAgentService."Service Indicator",ZoneCode) THEN
            EXIT(FALSE);

          IF (CurrentUPSOptionPage."Call Tag Type" = CurrentUPSOptionPage."Call Tag Type"::None) AND
             CurrentShippingAgentService."UPS Hundred Weight Available" AND
             ShippingAgentAccount."Hundred Weight Rate Shopping" AND
             (UPSShippingZone."Minimum Hundred Weight" > 0) AND
             ("Calculation Weight (LBS)" >= UPSShippingZone."Minimum Hundred Weight")
          THEN BEGIN

            IF ShippingAgentAccount."Rate Type" = ShippingAgentAccount."Rate Type"::"Base Rates"
            THEN BEGIN
              HundredWeightService.RESET;
              HundredWeightService.SETRANGE(
                "Service Indicator",CurrentShippingAgentService."Service Indicator");
              HundredWeightService.SETRANGE(Zone,ZoneCode);
              HundredWeightService.SETRANGE(Tier,ShippingAgentAccount."Hundred Weight Tier");

              IF NOT HundredWeightService.FIND('-') THEN
                EXIT(FALSE);

              IF "Calculation Weight (LBS)" / "No. of Packages" <
                 HundredWeightService."Min Wgt. Per Package" THEN
                TotalCalcWeight := HundredWeightService."Min Wgt. Per Package" * "No. of Packages"
              ELSE
                TotalCalcWeight := "Calculation Weight (LBS)";

              HWRatePerPound :=
                GetHundredWeight(
                  CurrentShippingAgentService,ShippingAgentAccount."Hundred Weight Tier",ZoneCode,
                  "Calculation Weight (LBS)","Residential Delivery","No. of Packages",FALSE,
                  TotalCalcWeight);
            END ELSE BEGIN
              HundredWgtListRate.RESET;
              HundredWgtListRate.SETRANGE(
                "Service Indicator",CurrentShippingAgentService."Service Indicator");
              HundredWgtListRate.SETRANGE(Zone,ZoneCode);
              HundredWgtListRate.SETRANGE(Tier,ShippingAgentAccount."Hundred Weight Tier");

              IF NOT HundredWgtListRate.FIND('-') THEN
                EXIT(FALSE);

              IF "Calculation Weight (LBS)" / "No. of Packages" < HundredWgtListRate."Min Wgt. Per Package" THEN
                TotalCalcWeight := HundredWgtListRate."Min Wgt. Per Package" * "No. of Packages"
              ELSE
                TotalCalcWeight := "Calculation Weight (LBS)";

              HWRatePerPound :=
                GetHundredWeightListRate(
                  CurrentShippingAgentService,ShippingAgentAccount."Hundred Weight Tier",ZoneCode,
                  "Calculation Weight (LBS)","Residential Delivery","No. of Packages",FALSE,
                  TotalCalcWeight);
            END;

            IF HWRatePerPound <= 0 THEN
              EXIT(FALSE);

            "Calculation Weight (LBS)" := "Calculation Weight (LBS)" / "No. of Packages";

            IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::KGS THEN
              "Calculation Weight" :=
                ROUND(
                  ShippingSetup.PoundToKilo("Calculation Weight (LBS)" / "No. of Packages"),0.1,'>')
            ELSE
              "Calculation Weight" := "Calculation Weight (LBS)";

            GetHWAccessorials(
              CurrentUPSOptionPage."Saturday Delivery",CurrentUPSOptionPage."Saturday Pickup",
              "Residential Delivery","No. of Packages","Ship-to ZIP Code",
              CurrentShippingAgentService."Service Indicator",SaturdayDeliveryCharge,
              SaturdayPickupCharge,CWTResidentialSurcharge,CWTDASurcharge,DASurcharge,LargePackageFee,
              CurrentShippingAgentService);

            LargePackageSurcharge := 0;
            IF CurrentUPSOptionPage."Large Package" THEN
              LargePackageSurcharge := LargePackageFee;
          END ELSE
            EXIT(FALSE);
        END;

        AccessorialChargeAmount :=
          GetAccessorialCharge(
            CurrentUPSOptionPage,CurrentShippingAgentService,
            CurrentUPSShippingZoneChart."To Country Code",FixZIPCode("Ship-to ZIP Code"),
            "Ship-to City",CurrentUPSShippingZoneChart.EAS,"Calculation Weight (LBS)",COD,
            "Calculation Insured Value","Residential Delivery",InsuranceCharge,BaseAmount,"Ship-to State");

        IF HundredWeight THEN BEGIN
          BaseAmount :=
            ("Calculation Weight (LBS)" * HWRatePerPound) + LargePackageSurcharge + CWTDASurcharge;
          AccessorialChargeAmount :=
            AccessorialChargeAmount + CWTResidentialSurcharge + SaturdayPickupCharge -
            SaturdayDeliveryCharge;
        END;

        SurchargeAmount := GetSurcharge(CurrentShippingAgentService,BaseAmount);

        MarkupAmount :=
          Shipping.GetMarkup(
            CurrentShippingAgentService,BaseAmount + AccessorialChargeAmount + SurchargeAmount,
            0,"Sell-to Customer No.","Ship-to Code");
        UPSShippingRateChart := BaseAmount + AccessorialChargeAmount + SurchargeAmount;

        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CheckPackage@12(VAR CurrentPackage@1000000000 : Record 14000701;VAR UPSOptionPage@1240030002 : Record 14000761;VAR ModifyUPSOptionPage@1240030006 : Boolean);
    VAR
      PackageLine@1000000002 : Record 14000702;
      UPSOptionPage2@1240030003 : Record 14000761;
      Package2@1240030004 : Record 14000701;
      ExportDocument@1240020000 : Record 14000981;
      ImporterCountries@1240020001 : Record 14050023;
      UPSCountryCode@1240030001 : Code[10];
      ReportWorkFileTmp@1240030000 : TEMPORARY Record 14050013;
      RowCount@1240030005 : Integer;
      ExportDocMgt@1240020010 : Codeunit 14000981;
    BEGIN
      WITH CurrentPackage DO BEGIN
        IF "Manual Shipment" THEN
          EXIT;
        GetShippingSetup;
        GetUPSlinkSetup;
        GetPackingStation;
        CarrierPackingStation.GetPackingStation(PackingStation);
        CarrierPackingStation.TESTFIELD("UPS Shipping Agent Account No.");

        GetShippingAgent("Shipping Agent Code");
        GetShippingAgentService("Shipping Agent Code","Shipping Agent Service","World Wide Service");
        GetShippingAgentAccount("Shipping Agent Account No.");

        UPSCountryCode := GetUPSCountryCode("Ship-to Country Code");

        IF "Calculation Height" > 108 THEN
          ERROR(Text060,FIELDCAPTION("Calculation Height"));

        IF "Calculation Width" > 108 THEN
          ERROR(Text060,FIELDCAPTION("Calculation Width"));

        IF "Calculation Length" > 108 THEN
          ERROR(Text060,FIELDCAPTION("Calculation Length"));

        TESTFIELD("Ship-to Address");
        TESTFIELD("Ship-to City");
        IF UPSCountryCode IN ['CA', 'US'] THEN BEGIN
          TESTFIELD("Ship-to ZIP Code");
          TESTFIELD("Ship-to State");
        END;

        IF PackingStation."Ship-from Company" = '' THEN
          IF PackingStation."Ship-from Contact" = '' THEN
            ERROR(Text123,
              PackingStation.Code,
              PackingStation.FIELDCAPTION("Ship-from Company"),
              PackingStation.FIELDCAPTION("Ship-from Contact"));

        IF "Export Document No." <> '' THEN BEGIN
          ExportDocument.RESET;
          ExportDocument.SETRANGE(ExportDocument."No.","Export Document No.");
          IF ExportDocument.FIND('-') THEN BEGIN
            ExportDocument."Ship-to Address" := "Ship-to Address";
            ExportDocument."Ship-to City" := "Ship-to City";
          END;
        END;

        IF "World Wide Service" OR "UPS Canadian Service" OR "UPS Puerto Rico Service" THEN BEGIN
          TESTFIELD(Description);

          IF UPSOptionPage."Ship and Return Label" THEN
            ERROR(Text061,UPSOptionPage.FIELDCAPTION("Ship and Return Label"));
        END;

        CheckPackagingType(
          CurrentPackage,UPSOptionPage,UPSCountryCode,PackingStation."Ship-from State");
        CheckBilling(
          CurrentPackage,UPSOptionPage,UPSCountryCode,PackingStation."Ship-from State",
          UPSlinkSetup."Rate Version");
        CheckAccessorialsOrigDest(
          CurrentPackage,UPSOptionPage,UPSCountryCode,PackingStation."Ship-from State");
        IF NOT (ShippingAgentService."Service Indicator" IN ['08','03','11','12']) THEN
          CheckCommit(CurrentPackage,UPSOptionPage,UPSCountryCode);

        CheckName(
          ShippingAgent,0,"Ship-to Name","Ship-to Name 2","Ship-to Contact",
              FIELDCAPTION("Ship-to Name"),FIELDCAPTION("Ship-to Name 2"),FIELDCAPTION("Ship-to Contact"));
        CheckAddress(
          ShippingAgent,0,"Ship-to Address","Ship-to Address 2","Ship-to City",
          "Ship-to ZIP Code","Ship-to State","Ship-to Country Code",
          FIELDCAPTION("Ship-to Address"),FIELDCAPTION("Ship-to Address 2"),
          FIELDCAPTION("Ship-to City"),FIELDCAPTION("Ship-to ZIP Code"),
          FIELDCAPTION("Ship-to State"),FIELDCAPTION("Ship-to Country Code"));

        IF "Blind Shipment" OR "Double Blind Shipment" THEN BEGIN
          CheckName(
            ShippingAgent,0,"Blind Ship-from Name","Blind Ship-from Name 2","Blind Ship-from Contact",
            FIELDCAPTION("Blind Ship-from Name"),FIELDCAPTION("Blind Ship-from Name 2"),
            FIELDCAPTION("Blind Ship-from Contact"));
          CheckAddress(
            ShippingAgent,0,"Blind Ship-from Address","Blind Ship-from Address 2","Blind Ship-from City",
            "Blind Ship-from ZIP Code","Blind Ship-from State","Blind Ship-from Country Code",
            FIELDCAPTION("Blind Ship-from Address"),FIELDCAPTION("Blind Ship-from Address 2"),
            FIELDCAPTION("Blind Ship-from City"),FIELDCAPTION("Blind Ship-from ZIP Code"),
            FIELDCAPTION("Blind Ship-from State"),FIELDCAPTION("Blind Ship-from Country Code"));
        END;

        IF TestForHazMat(CurrentPackage,UPSOptionPage) THEN BEGIN
          UPSOptionPage.TESTFIELD("Dangerous Goods");
          IF CarrierPackingStation."UPS Haz. Mat. Emergency No." <> '' THEN
            CarrierPackingStation.TESTFIELD(CarrierPackingStation."UPS Haz. Mat. Emerg. Contact");
          IF CarrierPackingStation."UPS Haz. Mat. Emerg. Contact" <> '' THEN
            CarrierPackingStation.TESTFIELD("UPS Haz. Mat. Emergency No.");
          IF NOT(UPSOptionPage."Dangerous Goods") THEN
            ERROR(Text110,
              UPSOptionPage.TABLECAPTION,UPSOptionPage.FIELDCAPTION("Dangerous Goods"));
        END ELSE IF UPSOptionPage."Dangerous Goods" THEN BEGIN
          UPSOptionPage."Dangerous Goods" := FALSE;
          ModifyUPSOptionPage := TRUE;
        END;

        IF UPSOptionPage."Dangerous Goods" THEN
          HazMatPackageLines("No.",ReportWorkFileTmp);

        IF "World Wide Service" OR "UPS Canadian Service" OR "UPS Puerto Rico Service" THEN
          WWCheckPackage(CurrentPackage,UPSOptionPage,UPSCountryCode)
        ELSE
          IF COD THEN BEGIN
             IF NOT
                (UPSOptionPage."Delivery Confirmation Type" IN
                 [UPSOptionPage."Delivery Confirmation Type"::None,
                  UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"])
             THEN
               ERROR(
                 Text006,UPSOptionPage.FIELDCAPTION("Delivery Confirmation Type"),
                 UPSOptionPage."Delivery Confirmation Type",FIELDCAPTION(COD));

             IF UPSOptionPage."Shipper Release" THEN
               ERROR(Text005,FIELDCAPTION(COD),UPSOptionPage.FIELDCAPTION("Shipper Release"));
          END;

        IF UPSOptionPage."Saturday Delivery" THEN BEGIN
          IF NOT (ShippingAgentService."Service Indicator" IN ['01','15','02','07','54','E1']) THEN
            ERROR(Text005,UPSOptionPage.FIELDCAPTION("Saturday Delivery"),ShippingAgentService.Code);
          IF UPSOptionPage."Hold At Location" THEN
            ERROR(
              Text005,UPSOptionPage.FIELDCAPTION("Hold At Location"),
              UPSOptionPage.FIELDCAPTION("Saturday Delivery"));

          IF UPSOptionPage."Hold For Pickup" THEN
            ERROR(
              Text005,UPSOptionPage.FIELDCAPTION("Hold For Pickup"),
              UPSOptionPage.FIELDCAPTION("Saturday Delivery"));
        END;

        IF ((UPSOptionPage."Shipper Est. Delivery Date" <> 0D) OR
           UPSOptionPage."Do Not Hold")
        THEN BEGIN
          IF  NOT("Service Indicator" IN ['02','03','12','13']) THEN
            ERROR(Text005,
              UPSOptionPage.FIELDCAPTION("Shipper Est. Delivery Date") + '/' +
              UPSOptionPage.FIELDCAPTION("Do Not Hold"),ShippingAgentService.Code);

          IF "Shipping Payment Type" <> "Shipping Payment Type"::Prepaid THEN
            ERROR(Text005,
              "Shipping Payment Type",
              UPSOptionPage.FIELDCAPTION("Shipper Est. Delivery Date") + '/' +UPSOptionPage.FIELDCAPTION("Do Not Hold"));
        END;

        IF UPSOptionPage."Saturday Pickup" AND
           NOT (ShippingAgentService."Service Indicator" IN ['01','15','13','02','59'])
        THEN
          ERROR(Text005,UPSOptionPage.FIELDCAPTION("Saturday Pickup"),ShippingAgentService.Code);

        IF UPSOptionPage."Saturday Delivery" AND
           UPSOptionPage."Saturday Pickup"
        THEN
          ERROR(
            Text005,UPSOptionPage.FIELDCAPTION("Saturday Delivery"),
            UPSOptionPage.FIELDCAPTION("Saturday Pickup"));

        IF UPSOptionPage."Proactive Response" AND
           NOT (ShippingAgentService."Service Indicator" IN ['01','04','07','13','15','54'])
        THEN
          ERROR(Text005,UPSOptionPage.FIELDCAPTION("Proactive Response"),ShippingAgentService.Code);

        IF UPSOptionPage.Refrigeration THEN BEGIN
          IF NOT (ShippingAgentService."Service Indicator" IN
                  ['01','02','04','07','08','13','15','54','59'])
          THEN
            ERROR(Text005,UPSOptionPage.FIELDCAPTION(Refrigeration),ShippingAgentService.Code);

          IF UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None THEN
            ERROR(Text005,UPSOptionPage.FIELDCAPTION(Refrigeration),UPSOptionPage."Call Tag Type");

          IF ShippingAgentAccount."Proactive Response" AND NOT(UPSOptionPage."Proactive Response")
          THEN
            ERROR(
              Text079,
              UPSOptionPage.FIELDCAPTION("Proactive Response"),
              UPSOptionPage.FIELDCAPTION(Refrigeration));
        END;

        IF UPSOptionPage."Ship Notification" THEN
          UPSOptionPage.TESTFIELD("UPS Advisory Info. Level")
        ELSE BEGIN
          UPSOptionPage.TESTFIELD(
            "UPS Advisory Info. Level",UPSOptionPage."UPS Advisory Info. Level"::" ");
          UPSOptionPage.TESTFIELD("Ship Notification Fax No.",'');
          UPSOptionPage.TESTFIELD("Ship Notification Attn Name",'');
          UPSOptionPage.TESTFIELD("Ship Notification Phone",'');
          UPSOptionPage.TESTFIELD("Ship Notification Type",UPSOptionPage."Ship Notification Type"::None);
          UPSOptionPage.TESTFIELD("Ship Notification Email",'');
          UPSOptionPage.TESTFIELD("Ship Notification Memo",'');
        END;

        IF UPSOptionPage."Delivery Notification" THEN BEGIN
          UPSOptionPage.TESTFIELD("Delivery Notification Email");
          UPSOptionPage.TESTFIELD("Delivery Info. Level");
        END;
        IF UPSOptionPage."Exception Notification" THEN BEGIN
          UPSOptionPage.TESTFIELD("Exception Notification Email");
          UPSOptionPage.TESTFIELD("Exception Info. Level");
        END;
        IF UPSOptionPage."Verbal Confirm. of Delivery" THEN BEGIN
          IF ShippingAgentService."Service Indicator" <> '15' THEN
            ERROR(
              Text005,UPSOptionPage.FIELDCAPTION("Verbal Confirm. of Delivery"),ShippingAgentService.Code);
          IF "Ship-to Contact" = '' THEN
            UPSOptionPage.TESTFIELD("Deliver-to Attn Name");
          IF "Ship-to Phone No." = '' THEN
            UPSOptionPage.TESTFIELD("Deliver-to Attn Phone");
        END;

        IF UPSOptionPage."Delivery In-Transit Notif." THEN BEGIN
          IF (UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None) AND
             (UPSOptionPage."Call Tag Type" <>
              UPSOptionPage."Call Tag Type"::"Exchange Outbound")
          THEN
            UPSOptionPage.TESTFIELD(UPSOptionPage."Delivery Notification Email")
          ELSE
            ERROR(
              Text005,
              UPSOptionPage.FIELDCAPTION("Delivery In-Transit Notif."),
              UPSOptionPage."Call Tag Type");
          END;

        IF UPSOptionPage."Call Tag Type" IN
           [UPSOptionPage."Call Tag Type"::"Pack and Collect 1 attempt",
            UPSOptionPage."Call Tag Type"::"Pack and Collect 3 attempt"]
        THEN BEGIN
          IF "World Wide Service" OR "UPS Canadian Service" OR "UPS Puerto Rico Service" THEN BEGIN
            IF UPSOptionPage."Pack and Collect Box Size" = 0 THEN
              ERROR(Text079,
              UPSOptionPage.FIELDCAPTION("Pack and Collect Box Size"),
              UPSOptionPage."Call Tag Type");

            IF UPSOptionPage."Call Tag Type" =
              UPSOptionPage."Call Tag Type"::"Pack and Collect 1 attempt"
            THEN
              CASE UPSOptionPage."Pack and Collect Box Size" OF
                1:
                  IF NOT ShippingAgentAccount."Pack and Collect RS1 Box1" THEN
                    ShippingAgentAccount.TESTFIELD("Pack and Collect RS1 Box1");
                2:
                  IF NOT ShippingAgentAccount."Pack and Collect RS1 Box2" THEN
                    ShippingAgentAccount.TESTFIELD("Pack and Collect RS1 Box2");
                3:
                  IF NOT ShippingAgentAccount."Pack and Collect RS1 Box3" THEN
                    ShippingAgentAccount.TESTFIELD("Pack and Collect RS1 Box3");
                4:
                  IF NOT ShippingAgentAccount."Pack and Collect RS1 Box4" THEN
                    ShippingAgentAccount.TESTFIELD("Pack and Collect RS1 Box4");
                5:
                  IF NOT ShippingAgentAccount."Pack and Collect RS1 Box5" THEN
                    ShippingAgentAccount.TESTFIELD("Pack and Collect RS1 Box5");
              END;

            IF UPSOptionPage."Call Tag Type" =
              UPSOptionPage."Call Tag Type"::"Pack and Collect 3 attempt"
            THEN
              CASE UPSOptionPage."Pack and Collect Box Size" OF
                1:
                  IF NOT ShippingAgentAccount."Pack and Collect RS3 Box1" THEN
                    ShippingAgentAccount.TESTFIELD("Pack and Collect RS3 Box1");
                2:
                  IF NOT ShippingAgentAccount."Pack and Collect RS3 Box2" THEN
                    ShippingAgentAccount.TESTFIELD("Pack and Collect RS3 Box2");
                3:
                  IF NOT ShippingAgentAccount."Pack and Collect RS3 Box3" THEN
                    ShippingAgentAccount.TESTFIELD("Pack and Collect RS3 Box3");
                4:
                  IF NOT ShippingAgentAccount."Pack and Collect RS3 Box4" THEN
                    ShippingAgentAccount.TESTFIELD("Pack and Collect RS3 Box4");
                5:
                  IF NOT ShippingAgentAccount."Pack and Collect RS3 Box5" THEN
                    ShippingAgentAccount.TESTFIELD("Pack and Collect RS3 Box5");
              END;
          END ELSE
            ERROR(Text084,UPSOptionPage."Call Tag Type");
        END;

        IF (UPSOptionPage."Call Tag Type" IN
           [UPSOptionPage."Call Tag Type"::Standard,
            UPSOptionPage."Call Tag Type"::"1 attempt",
            UPSOptionPage."Call Tag Type"::"3 attempt",
            UPSOptionPage."Call Tag Type"::"Print Return Label Only",
            UPSOptionPage."Call Tag Type"::"Electronic Return Label"])
        THEN BEGIN
          IF (ShippingAgentService."Service Indicator" IN ['13','59']) THEN
            ERROR(Text012,ShippingAgentService.Code);

          IF (UPSOptionPage."Insurance Type" IN
              [UPSOptionPage."Insurance Type"::"Flexible Parcel",
               UPSOptionPage."Insurance Type"::"Expanded Parcel",
               UPSOptionPage."Insurance Type"::"Time in Transit"]) AND
             NOT (UPSOptionPage."Call Tag Type" IN
                  [UPSOptionPage."Call Tag Type"::"1 attempt",
                   UPSOptionPage."Call Tag Type"::"3 attempt"])
          THEN
            ERROR(
              Text062,UPSOptionPage.FIELDCAPTION("Call Tag Type"),FORMAT(UPSOptionPage."Call Tag Type"),
              UPSOptionPage.FIELDCAPTION("Insurance Type"),FORMAT(UPSOptionPage."Insurance Type"));

          IF ("Calculation Value" > 1000) AND
             (UPSOptionPage."Call Tag Type" IN
              [UPSOptionPage."Call Tag Type"::"1 attempt",
               UPSOptionPage."Call Tag Type"::"Print Return Label Only",
               UPSOptionPage."Call Tag Type"::"Electronic Return Label"])
          THEN
              ERROR(
                Text038,
                UPSOptionPage.FIELDCAPTION("Call Tag Type"),UPSOptionPage."Call Tag Type",
                FIELDCAPTION("Calculation Value"));

          IF ("Calculation Value" > 50000) AND
             (UPSOptionPage."Call Tag Type" IN
              [UPSOptionPage."Call Tag Type"::"3 attempt"])
          THEN
              ERROR(
                Text039,
                UPSOptionPage.FIELDCAPTION("Call Tag Type"),UPSOptionPage."Call Tag Type",
                FIELDCAPTION("Calculation Value"));

          IF ("Calculation Insured Value" > 50000) AND
             (NOT(UPSOptionPage."Call Tag Type" IN
              [UPSOptionPage."Call Tag Type"::"1 attempt",
               UPSOptionPage."Call Tag Type"::"3 attempt",
               UPSOptionPage."Call Tag Type"::"Print Return Label Only",
               UPSOptionPage."Call Tag Type"::"Electronic Return Label",
               UPSOptionPage."Call Tag Type"::"IC 1 attempt",
               UPSOptionPage."Call Tag Type"::"IC 3 attempt",
               UPSOptionPage."Call Tag Type"::"IC PRL",
               UPSOptionPage."Call Tag Type"::"IC ERL",
               UPSOptionPage."Call Tag Type"::"IC P & M Label"]))
          THEN
            ERROR(
              Text038,
              UPSOptionPage.FIELDCAPTION("Call Tag Type"),UPSOptionPage."Call Tag Type",
              FIELDCAPTION("Calculation Insured Value"));

          IF UPSOptionPage."Delivery Confirmation Type" <>
             UPSOptionPage."Delivery Confirmation Type"::None THEN
            ERROR(Text005,UPSOptionPage."Delivery Confirmation Type",UPSOptionPage."Call Tag Type");

          IF "Shipping Payment Type" = "Shipping Payment Type"::Consignee THEN
            ERROR(Text005,"Shipping Payment Type",UPSOptionPage."Call Tag Type");

          PackageLine.RESET;
          PackageLine.SETRANGE("Package No.",CurrentPackage."No.");
          IF PackageLine.FIND('-') THEN BEGIN
            REPEAT
              IF (UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None) AND
                 NOT(UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::"Exchange Outbound") THEN
                 IF PackageLine.Description = '' THEN
                   ERROR(Text102,
                    PackageLine.FIELDCAPTION(Description),
                    PackageLine.FIELDCAPTION(PackageLine."No."),
                   PackageLine."No.");
            UNTIL PackageLine.NEXT = 0;
          END;
        END;

        IF (UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::"Electronic Return Label") THEN
          UPSOptionPage.TESTFIELD("Electronic Return Label Email");

        IF UPSOptionPage."Call Tag Type" IN
           [UPSOptionPage."Call Tag Type"::"Exchange Outbound",
            UPSOptionPage."Call Tag Type"::"Exchange Return",
            UPSOptionPage."Call Tag Type"::"Pack and Collect 1 attempt",
            UPSOptionPage."Call Tag Type"::"Pack and Collect 3 attempt"]
        THEN BEGIN
          IF COD THEN
            ERROR(Text005,FIELDCAPTION(COD),UPSOptionPage."Call Tag Type");

          IF UPSOptionPage."Dry Ice" THEN
            ERROR(Text005,UPSOptionPage.FIELDCAPTION("Dry Ice"),UPSOptionPage."Call Tag Type");

          IF UPSOptionPage."Dangerous Goods" THEN
            ERROR(Text005,UPSOptionPage.FIELDCAPTION("Dangerous Goods"),UPSOptionPage."Call Tag Type");

          IF UPSOptionPage.ISC THEN
            ERROR(Text005,UPSOptionPage.FIELDCAPTION(ISC),UPSOptionPage."Call Tag Type");

          IF UPSOptionPage."Commercial Invoice Removal" THEN
            ERROR(
              Text005,
              UPSOptionPage.FIELDCAPTION("Commercial Invoice Removal"),
              UPSOptionPage."Call Tag Type");

          IF UPSOptionPage."Call Tag Type" IN
             [UPSOptionPage."Call Tag Type"::"Exchange Outbound",
              UPSOptionPage."Call Tag Type"::"Exchange Return"]
          THEN BEGIN
            //Exchange Outbound and Exchange Return must match
            CLEAR(Package2);
            Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
            Package2.SETRANGE("Source Type","Source Type");
            Package2.SETRANGE("Source Subtype","Source Subtype");
            Package2.SETRANGE("Source ID","Source ID");
            RowCount := 0;
            IF Package2.FIND('-') THEN BEGIN
              REPEAT
                IF RowCount >= 2 THEN
                  ERROR(Text085);
                RowCount := RowCount + 1;
                IF (Package2."No." <> "No.") AND
                   (Package2.Closed) THEN BEGIN
                  CLEAR(UPSOptionPage2);
                  UPSOptionPage2.GET(UPSOptionPage.Type::Package,Package2."No.",0,0);
                  IF UPSOptionPage."UPS Packaging Type" <> UPSOptionPage2."UPS Packaging Type" THEN
                    ERROR(Text087,
                      UPSOptionPage.FIELDCAPTION("UPS Packaging Type"));

                  IF UPSOptionPage."Additional Handling Required" <>
                      UPSOptionPage2."Additional Handling Required" THEN
                    ERROR(Text087,
                      UPSOptionPage.FIELDCAPTION("Additional Handling Required"));

                  UPSOptionPage."Shipment Total Weight" := Package2."Calculation Weight (LBS)";
                  UPSOptionPage2."Shipment Total Weight" := Package2."Calculation Weight (LBS)";
                  UPSOptionPage.MODIFY;
                  UPSOptionPage2.MODIFY;

                  IF Package2."Override Dimensions" THEN
                    IF ("Override Dimensions" <> Package2."Override Dimensions") OR
                       ("Override Length" <> Package2."Override Length") OR
                       ("Override Width" <> Package2."Override Width") OR
                       ("Override Height" <> Package2."Override Height")
                    THEN
                      ERROR(Text087,
                        FIELDCAPTION("Override Dimensions"));

                  IF Package2."Override Insured Value" <> "Override Insured Value" THEN
                    ERROR(Text087,
                      FIELDCAPTION("Override Insured Value"));

                  VALIDATE("Calculation Weight (LBS)",Package2."Calculation Weight (LBS)");

                END;
              UNTIL Package2.NEXT = 0;
            END;
          END;
        END;

        IF CurrentPackage.COD AND
           (CurrentPackage."COD Amount" > 50000) THEN
           ERROR(
             Text039,CurrentPackage.FIELDCAPTION("COD Amount"),
             FORMAT(CurrentPackage."COD Amount"),CurrentPackage.FIELDCAPTION("COD Amount"));

        IF UPSOptionPage."Call Tag Type" IN
           [UPSOptionPage."Call Tag Type"::"Pack and Collect 1 attempt",
            UPSOptionPage."Call Tag Type"::"Pack and Collect 3 attempt",
            UPSOptionPage."Call Tag Type"::"Exchange Outbound"]
        THEN
          IF UPSOptionPage."Shipper Release" THEN
            ERROR(Text005,UPSOptionPage.FIELDCAPTION("Shipper Release"),UPSOptionPage."Call Tag Type");

        IF "Insure Through Shipping Agent" AND
           (UPSOptionPage."Insurance Type" = UPSOptionPage."Insurance Type"::"Declared Value") AND
           ("Calculation Insured Value" > 50000)
        THEN BEGIN
          IF (ShippingAgentAccount."Pickup Plan Type" IN ['01','02','03','04','05','06','07']) AND
             ("Service Indicator" IN ['01','02','07','13','54','59']) AND
               ("Calculation Insured Value" > 70000)
          THEN
            ERROR(
              Text062,UPSOptionPage.FIELDCAPTION("Insurance Type"),
              FORMAT(UPSOptionPage."Insurance Type"),FIELDCAPTION("Calculation Insured Value"),
              'greater than USD 70,000')
          ELSE IF ((ShippingAgentAccount."Pickup Plan Type" IN ['01','02','03','04','05','06','07']) AND
               NOT ("Service Indicator" IN ['01','02','07','13','54','59'])) AND
               ("Calculation Insured Value" > 50000)
          THEN
            ERROR(
              Text039,UPSOptionPage.FIELDCAPTION("Insurance Type"),
              FORMAT(UPSOptionPage."Insurance Type"),FIELDCAPTION("Calculation Insured Value"));

        IF NOT(ShippingAgentAccount."Pickup Plan Type" IN ['01','02','03','04','05','06','07']) THEN
          ERROR(
            Text039,UPSOptionPage.FIELDCAPTION("Insurance Type"),
            FORMAT(UPSOptionPage."Insurance Type"),FIELDCAPTION("Calculation Insured Value"))
        END;

        IF (UPSOptionPage."Call Tag Type" > UPSOptionPage."Call Tag Type"::None) AND
           UPSOptionPage."Shipper Pays Declared Value"
        THEN
          ERROR(
            Text008,UPSOptionPage.FIELDCAPTION("Shipper Pays Declared Value"),
            UPSOptionPage.FIELDCAPTION("Call Tag Type"),UPSOptionPage."Call Tag Type");

        IF UPSOptionPage."Commercial Invoice" = UPSOptionPage."Commercial Invoice"::"Paperless Invoice" THEN
          IF (UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None) AND
             (UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::"Exchange Outbound") AND
             (UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::"Exchange Return")
          THEN
            ERROR(
              Text008,UPSOptionPage."Commercial Invoice",
              UPSOptionPage.FIELDCAPTION("Call Tag Type"),UPSOptionPage."Call Tag Type");

        IF UPSOptionPage."Shipper Release" THEN BEGIN
          IF (UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None) AND
             (UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::"Exchange Outbound") AND
             (UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::"Exchange Return")
          THEN
            ERROR(
              Text006,UPSOptionPage.FIELDCAPTION("Call Tag Type"),UPSOptionPage."Call Tag Type",
              UPSOptionPage.FIELDCAPTION("Shipper Release"));

          IF (UPSOptionPage."Delivery Confirmation Type" IN
              [UPSOptionPage."Delivery Confirmation Type"::"Signature Date",
               UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"])
          THEN
            ERROR(
              Text006,UPSOptionPage.FIELDCAPTION("Delivery Confirmation Type"),
              UPSOptionPage."Delivery Confirmation Type",UPSOptionPage.FIELDCAPTION("Shipper Release"));
        END;

        IF UPSOptionPage."Ship Notification" THEN BEGIN
          CASE UPSOptionPage."Ship Notification Type" OF
            UPSOptionPage."Ship Notification Type"::None:
              ERROR(Text003);
            UPSOptionPage."Ship Notification Type"::Email:
              UPSOptionPage.TESTFIELD("Ship Notification Email");
            UPSOptionPage."Ship Notification Type"::Fax:
              BEGIN
                IF (UPSOptionPage."Ship Notification Fax No." = '') AND
                   ("Ship-to Fax No." = '')
                THEN
                  UPSOptionPage.TESTFIELD("Ship Notification Fax No.");

                IF (UPSOptionPage."Ship Notification Attn Name" = '') AND
                   ("Ship-to Contact" = '')
                THEN
                  UPSOptionPage.TESTFIELD("Ship Notification Attn Name");

                IF (UPSOptionPage."Ship Notification Phone" = '') AND
                   ("Ship-to Phone No." = '')
                THEN
                  UPSOptionPage.TESTFIELD("Ship Notification Phone");
              END;
          END;
        END;

        IF UPSOptionPage."Inbound Return Notification" THEN
          UPSOptionPage.TESTFIELD("Ship Notification");

        IF "Service Indicator" = '15' THEN BEGIN  // NEXT DAY AIR EARLY A.M.
          TESTFIELD("Ship-to Contact");
          TESTFIELD("Ship-to Phone No.");
          IF NOT (UPSOptionPage."Delivery Confirmation Type" IN
                  [UPSOptionPage."Delivery Confirmation Type"::None,
                   UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"])
          THEN
            ERROR(
              Text006,UPSOptionPage.FIELDCAPTION("Delivery Confirmation Type"),
              UPSOptionPage."Delivery Confirmation Type",ShippingAgentService.Code);
        END;

        IF UPSOptionPage."Later Delivery Time" THEN
          UPSOptionPage.TESTFIELD("Delivery Time Override");

        IF (UPSOptionPage."Delivery Confirmation Type" <>
           UPSOptionPage."Delivery Confirmation Type"::None) AND
           NOT (UPSCountryCode IN
                ['AD','AR','AT','AU','BE','BR','BT','CA','CH','CL','CN','CZ','DE','DK','DO','ES','FI',
                 'FR','GB','GR','HK','HU','ID','IE','IL','IN','IT','JP','KR','LU','MC','MX','MY','NL',
                 'NO','PH','PL','PR','PT','RU','SE','SG','SM','TH','TL','TW','US','VA','VI'])
        THEN
          ERROR(
            Text008,UPSOptionPage.FIELDCAPTION("Delivery Confirmation Type"),
            FIELDCAPTION("Ship-to Country Code"),"Ship-to Country Code");

        IF UPSOptionPage."Call Tag Type" > UPSOptionPage."Call Tag Type"::Standard THEN
          TESTFIELD(Description)
        ELSE
          IF UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::Standard THEN
            ERROR(
              Text010,
              UPSOptionPage.FIELDCAPTION("Call Tag Type"),UPSOptionPage."Call Tag Type");

        IF UPSOptionPage."Alternate Call Tag Return" THEN
          UPSOptionPage.TESTFIELD("Return Address");

        IF UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::None THEN BEGIN
          IF UPSOptionPage."Alternate Call Tag Return" THEN
            ERROR(
              Text006,UPSOptionPage.FIELDCAPTION("Call Tag Type"),UPSOptionPage."Call Tag Type",
              UPSOptionPage.FIELDCAPTION("Alternate Call Tag Return"));

          IF UPSOptionPage."Inbound Return Notification" THEN
            ERROR(
              Text006,UPSOptionPage.FIELDCAPTION("Call Tag Type"),UPSOptionPage."Call Tag Type",
              UPSOptionPage.FIELDCAPTION("Inbound Return Notification"));
        END;

        IF (NOT "World Wide Service") AND
           (NOT "UPS Canadian Service") AND
           (NOT "UPS Puerto Rico Service") THEN
          IF UPSOptionPage."Call Tag Type" IN
             [UPSOptionPage."Call Tag Type"::"IC 1 attempt",
              UPSOptionPage."Call Tag Type"::"IC 3 attempt",
              UPSOptionPage."Call Tag Type"::"IC PRL",
              UPSOptionPage."Call Tag Type"::"IC ERL",
              UPSOptionPage."Call Tag Type"::"IC P & M Label"]
          THEN
            ERROR(Text084,UPSOptionPage."Call Tag Type");

        IF UPSOptionPage."Commercial Invoice Removal" THEN
          IF NOT (UPSOptionPage."Call Tag Type" IN
             [UPSOptionPage."Call Tag Type"::"IC 1 attempt",
              UPSOptionPage."Call Tag Type"::"IC 3 attempt",
              UPSOptionPage."Call Tag Type"::"IC PRL",
              UPSOptionPage."Call Tag Type"::"IC ERL",
              UPSOptionPage."Call Tag Type"::"IC P & M Label"])
          THEN
            UPSOptionPage.TESTFIELD("Commercial Invoice Removal", FALSE)
          ELSE BEGIN
            CLEAR(UPSlinkWWOrigDestValid);
            UPSlinkWWOrigDestValid.SETCURRENTKEY("Destination Country Code","Origin Country Code",
              "Validation Type");
            UPSlinkWWOrigDestValid.SETRANGE("Destination Country Code",UPSCountryCode);
            UPSlinkWWOrigDestValid.SETRANGE("Origin Country Code",'US');
            UPSlinkWWOrigDestValid.SETRANGE("Validation Type",
              UPSlinkWWOrigDestValid."Validation Type"::"Comm. Inv. Removal Ctry");
            IF NOT(UPSlinkWWOrigDestValid.FIND('-')) THEN
              ERROR(
                Text005,UPSCountryCode,UPSOptionPage.FIELDCAPTION("Commercial Invoice Removal"));
          END;

        IF UPSOptionPage."Call Tag Type" IN
           [UPSOptionPage."Call Tag Type"::"IC 1 attempt",
            UPSOptionPage."Call Tag Type"::"IC 3 attempt",
            UPSOptionPage."Call Tag Type"::"IC PRL",
            UPSOptionPage."Call Tag Type"::"IC ERL",
            UPSOptionPage."Call Tag Type"::"IC P & M Label"]
        THEN
          IF UPSOptionPage."Delivery Confirmation Type" <>
             UPSOptionPage."Delivery Confirmation Type"::None
          THEN
            ERROR(
              Text005,
              UPSOptionPage."Delivery Confirmation Type",
              UPSOptionPage."Call Tag Type");

        IF UPSOptionPage."Call Tag Type" IN
           [UPSOptionPage."Call Tag Type"::"IC 1 attempt",
            UPSOptionPage."Call Tag Type"::"IC 3 attempt",
            UPSOptionPage."Call Tag Type"::"IC P & M Label"]
        THEN
          IF UPSOptionPage."Dry Ice" = TRUE THEN
            ERROR(
              Text005,
              UPSOptionPage.FIELDCAPTION("Dry Ice"),
              UPSOptionPage."Call Tag Type");

        IF UPSOptionPage."Shipper Release" AND
           ("Calculation Insured Value" > 999)
        THEN
          ERROR(
            Text004,
            UPSOptionPage.FIELDCAPTION("Shipper Release"),FIELDCAPTION("Calculation Insured Value"));

        IF UPSOptionPage."UPS Packaging Type" <> UPSOptionPage."UPS Packaging Type"::"UPS Letter" THEN
          TESTFIELD("Calculation Weight (LBS)")
        ELSE
          IF ShippingAgentService."Service Indicator" IN ['03','08','11','12'] THEN
            ERROR(
              Text006,
              "Shipping Agent Code","Shipping Agent Service",
              UPSOptionPage."UPS Packaging Type");

        IF UPSOptionPage."UPS Carbon Neutral" THEN
          IF UPSOptionPage."UPS Packaging Type" = UPSOptionPage."UPS Packaging Type"::Palletized THEN
            ERROR(
              Text005, UPSOptionPage."UPS Packaging Type",
              UPSOptionPage.FIELDCAPTION("UPS Carbon Neutral"));

        IF UPSOptionPage."Call Tag Type" IN
           [UPSOptionPage."Call Tag Type"::"Exchange Outbound",
            UPSOptionPage."Call Tag Type"::"Exchange Return",
            UPSOptionPage."Call Tag Type"::"Pack and Collect 1 attempt",
            UPSOptionPage."Call Tag Type"::"Pack and Collect 3 attempt",
            UPSOptionPage."Call Tag Type"::"IC 1 attempt",
            UPSOptionPage."Call Tag Type"::"IC 3 attempt",
            UPSOptionPage."Call Tag Type"::"IC PRL",
            UPSOptionPage."Call Tag Type"::"IC ERL",
            UPSOptionPage."Call Tag Type"::"IC P & M Label"]
        THEN
          IF UPSOptionPage."UPS Packaging Type" IN
             [UPSOptionPage."UPS Packaging Type"::"UPS 25kg Box",
              UPSOptionPage."UPS Packaging Type"::"UPS 10kg Box"]
          THEN
            ERROR(
              Text062,UPSOptionPage.FIELDCAPTION("UPS Packaging Type"),
              FORMAT(UPSOptionPage."UPS Packaging Type"),
              UPSOptionPage.FIELDCAPTION("Call Tag Type"), FORMAT(UPSOptionPage."Call Tag Type"));

        IF UPSOptionPage."Ship and Return Label" AND Miscellaneous THEN
          ERROR(Text005,CurrentPackage.FIELDCAPTION(Miscellaneous),
            UPSOptionPage.FIELDCAPTION("Ship and Return Label"));

        IF "World Wide Service" OR "UPS Canadian Service" OR "UPS Puerto Rico Service" THEN BEGIN
          IF "Ship-to Phone No." = '' THEN
            "Ship-to Phone No." := CleanString(PackingStation."Phone No. to use If Blank");
          TESTFIELD("Ship-to Phone No.");

          IF (UPSOptionPage."Export Declaration" = UPSOptionPage."Export Declaration"::Included) OR
             (UPSOptionPage."Export Declaration" = UPSOptionPage."Export Declaration"::"UPS Prepare")
          THEN
            IF (PackingStation."Export License No." = '') AND
               (PackingStation."Export License Exception" = '')
            THEN
              ERROR(
                Text074,PackingStation.TABLECAPTION,PackingStation.FIELDCAPTION("Export License No."),
                PackingStation.FIELDCAPTION("Export License Exception"),
                UPSOptionPage.FIELDCAPTION("Export Declaration"),UPSOptionPage."Export Declaration");

          IF (UPSOptionPage."Export Declaration" =
               UPSOptionPage."Export Declaration"::"AESDirect Pre-Depart") AND
             ("AES ITN No." = '')
          THEN
            ERROR(
              Text079,FIELDCAPTION("AES ITN No."),UPSOptionPage.FIELDCAPTION("Export Declaration"),
              UPSOptionPage."Export Declaration");

          IF UPSOptionPage."Dry Ice" THEN
            UPSOptionPage.TESTFIELD("Dry Ice Weight");

          PackageLine.RESET;
          PackageLine.SETRANGE("Package No.","No.");

          IF PackageLine.FIND('-') THEN
            REPEAT
              IF (UPSOptionPage."Export Declaration" = UPSOptionPage."Export Declaration"::Included) OR
                 (UPSOptionPage."Export Declaration" = UPSOptionPage."Export Declaration"::"UPS Prepare")
              THEN BEGIN
                PackageLine.TESTFIELD("Schedule B code");
                PackageLine.TESTFIELD("Schedule B Unit of Measure 1");
                IF PackageLine."Schedule B Unit of Measure 1" <> 'X' THEN
                  PackageLine.TESTFIELD("Schedule B Quantity 1");
              END;

            UNTIL PackageLine.NEXT = 0;

          CLEAR(ImporterCountries);

          IF ("UPS Canadian Service") AND
             (UPSOptionPage."Importer Country Code" <> '') THEN BEGIN
            ImporterCountries.SETRANGE(Importer,GetUPSCountryCode(UPSOptionPage."Importer Country Code"));
            ImporterCountries.SETRANGE(ShipmentType,'1');
            IF NOT ImporterCountries.FIND('-') THEN
              ERROR(Text005,
              UPSOptionPage.FIELDCAPTION("Importer Country Code"),UPSOptionPage."Importer Country Code",FIELDCAPTION("UPS Canadian Service"));
          END;
        END;
      END;
    END;

    PROCEDURE RateShop@16(RateShopHeader@1000000000 : Record 14000741;VAR RateShopLine@1000000001 : Record 14000742;CurrentShippingAgentService@1000000002 : Record 14000708);
    VAR
      UPSShippingZoneChart@1000000004 : Record 14000763;
      UPSShippingZone@1000000005 : Record 14000766;
      UPSOptionPage@1000000006 : Record 14000761;
      RateShopLineCOD@1000000008 : Record 14000742;
      UPSWSTransaction@1240020000 : Codeunit 14000766;
      InsureThroughShippingAgent@1240030000 : Boolean;
      ModifyUPSOptionPage@1240030002 : Boolean;
      WorldWideService@1240030003 : Boolean;
      UPSCanadianService@1240030004 : Boolean;
      UPSPuertoRicoService@1240030005 : Boolean;
      ShipmentWeight@1240030006 : Decimal;
      ShipmentWeightRounded@1240030001 : Decimal;
      ShiptoISO2CountryCode@1240030007 : Code[10];
    BEGIN
      WITH RateShopHeader DO BEGIN
        GetShippingSetup;
        GetUPSlinkSetup;
        CLEAR(PackingStation);

        IF "Rate Shop Packing Station Code" <> '' THEN
          PackingStation.GET("Rate Shop Packing Station Code")
        ELSE
          GetPackingStation;
        CarrierPackingStation.GetPackingStation(PackingStation);

        CarrierPackingStation.TESTFIELD("UPS Shipping Agent Account No.");
        GetShippingAgentAccount(CarrierPackingStation."UPS Shipping Agent Account No.");
        GetShippingAgent(CurrentShippingAgentService."Shipping Agent Code");

        ShiptoISO2CountryCode := GetUPSCountryCode("Ship-to Country Code");

        IF ((ShiptoISO2CountryCode = 'PR') AND
           NOT(CurrentShippingAgentService."UPS Puerto Rico Service")) OR
           ((ShiptoISO2CountryCode = 'CA') AND
           NOT(CurrentShippingAgentService."UPS Canadian Service"))
        THEN
           EXIT;

        IF "No. of Packages" < 1 THEN
          "No. of Packages" := 1;

        IF NOT UPSOptionPage.GET(UPSOptionPage.Type::"Rate Shop","No.",0,0) THEN
          IF NOT UPSOptionPage.GET(UPSOptionPage.Type::Package,"Package No.",0,0) THEN
            IF NOT
               UPSOptionPage.GET(
                 UPSOptionPage.Type::Document,"Source ID","Source Type","Source Subtype")
            THEN
              IF NOT
                 UPSOptionPage.GET(
                   UPSOptionPage.Type::"Bill of Lading","Bill of Lading No.",0,0)
              THEN BEGIN
                UPSOptionPage.RESET;
                UPSOptionPage.SETCURRENTKEY(
                  Type,"Shipping Agent Code","Shipping Agent Service","World Wide Service");
                UPSOptionPage.SETRANGE(Type,UPSOptionPage.Type::Setup);
                UPSOptionPage.SETRANGE(
                  "Shipping Agent Code",CurrentShippingAgentService."Shipping Agent Code");
                UPSOptionPage.SETRANGE("Shipping Agent Service",CurrentShippingAgentService.Code);
                UPSOptionPage.SETRANGE(
                  "World Wide Service",CurrentShippingAgentService."World Wide Service");
                IF NOT UPSOptionPage.FIND('-') THEN
                  UPSOptionPage.INIT;
              END;

        ShipmentWeight := GetWeight;
        IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::KGS THEN BEGIN
          ShipmentWeightRounded := ROUND(ShippingSetup.KiloToPound(ShipmentWeight),0.1,'>');
          "Calculation Weight (LBS)" :=
            ROUND(ShippingSetup.KiloToPound(ShipmentWeight / "No. of Packages"),0.1,'>');
          "Calculation Weight" := ROUND(ShipmentWeight / "No. of Packages",0.1,'>');
        END ELSE BEGIN
          ShipmentWeightRounded := ShipmentWeight;
          "Calculation Weight" := ROUND(ShipmentWeight / "No. of Packages",0.1,'>');
          "Calculation Weight (LBS)" := "Calculation Weight";
        END;

        IF (ShiptoISO2CountryCode = 'US') AND
           ("Calculation Weight (LBS)" > 150) THEN
          EXIT;

        IF CurrentShippingAgentService."Shipping Agent Code" <> '' THEN BEGIN
          WorldWideService :=
            CurrentShippingAgentService.InternationalShipment(ShippingAgent,"Ship-to Country Code");
          UPSCanadianService :=
            CurrentShippingAgentService.UPSCanadianShipment(ShippingAgent,"Ship-to Country Code");
          UPSPuertoRicoService :=
            CurrentShippingAgentService.UPSPuertoRicoShipment(ShippingAgent,"Ship-to Country Code");
        END;

        GetUPSPackagingDimensions(
          "Override Dimensions","Override Length","Override Width","Override Height",
          UPSOptionPage."UPS Packaging Type");

        Height := ROUND(GetHeight,1,'>');
        Width := ROUND(GetWidth,1,'>');
        Length := ROUND(GetLength,1,'>');

        IF NOT
           GetCalculationWeightRate(
             UPSOptionPage,CurrentShippingAgentService,"Calculation Weight",
             "Calculation Weight (LBS)","Dimensional Weight",ModifyUPSOptionPage,"Use Dim Weight",
             WorldWideService,UPSCanadianService,UPSPuertoRicoService,FALSE,
             Length,Width,Height,ShiptoISO2CountryCode)
        THEN
          EXIT;

        IF "No. of Packages" > 1 THEN
          IF (CurrentShippingAgentService."Service Indicator" = '11') AND
             ("Calculation Weight (LBS)" / "No. of Packages" < 15)
          THEN BEGIN
            "Calculation Weight (LBS)" := 15;
            IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::LBS THEN
              "Calculation Weight" := "Calculation Weight (LBS)"
            ELSE
              "Calculation Weight" := ROUND(ShippingSetup.PoundToKilo("Calculation Weight (LBS)"),0.1,'>');
          END;

        IF UPSOptionPage."UPS Packaging Type" <> UPSOptionPage."UPS Packaging Type"::"UPS Letter" THEN
          TESTFIELD("Calculation Weight (LBS)");
        "Calculation Value" := GetValue / "No. of Packages";
        TESTFIELD("Calculation Value");

        CASE "Shipping Insurance" OF
          "Shipping Insurance"::" ":
            IF "Shipping Payment Type" = "Shipping Payment Type"::Prepaid THEN
              InsureThroughShippingAgent := ShippingAgentAccount."Insure Through Carrier"
            ELSE
              InsureThroughShippingAgent := ShippingAgentAccount."Insured Third Party/Collect";
          "Shipping Insurance"::Never:
            InsureThroughShippingAgent := FALSE;
          "Shipping Insurance"::Always:
            InsureThroughShippingAgent := TRUE;
        END;

        IF UPSOptionPage."Call Tag Type" IN
           [UPSOptionPage."Call Tag Type"::"1 attempt",UPSOptionPage."Call Tag Type"::"3 attempt"]
        THEN
          InsureThroughShippingAgent := TRUE;

        "Calculation Insured Value" := GetInsuredValue(InsureThroughShippingAgent) / "No. of Packages";

        "Calculation Volume" := GetVolume / "No. of Packages";
        // Add Handling for Rate Shop for Dimensions
        IF ShippingAgentAccount."COD Rule" <>
           ShippingAgentAccount."COD Rule"::"All on Last Package"
        THEN
          "COD Amount" := "COD Amount" / "No. of Packages";

        PackingStation.TESTFIELD("Ship-from ZIP Code");
        IF "Ship-to Country Code" = '' THEN
          TESTFIELD("Ship-to ZIP Code")
        ELSE
          TESTFIELD("Ship-to Country Code");

        IF (ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::"UPSlink/UPS Web Service") AND
           (CurrentShippingAgentService."Service Indicator"IN ['92','93','94','95','GFP'])
        THEN BEGIN
          RateShopLine.INIT;

          IF NOT(CurrentShippingAgentService."Service Indicator" = 'GFP') THEN
            UPSWSTransaction.RateShop(RateShopHeader,RateShopLine,CurrentShippingAgentService);

          RateShopLine."Rate Shop No." := "No.";
          RateShopLine."Shipping Agent Code" := CurrentShippingAgentService."Shipping Agent Code";
          RateShopLine."World Wide Service" := CurrentShippingAgentService."World Wide Service";
          RateShopLine."Shipping Agent Service" := CurrentShippingAgentService.Code;
          RateShopLine."Insure Through Shipping Agent" := InsureThroughShippingAgent;
          RateShopLine.Sorting := CurrentShippingAgentService."Rateshop Sorting";
          RateShopLine."Service Description" := CurrentShippingAgentService.Description;
          IF RateShopLine."Shipping Cost" = 0 THEN
            RateShopLine."Shipping Cost" := RateShopLine."Base Charge" + RateShopLine."Accessorial Charge"  +
              RateShopLine.Surcharge;
          RateShopLine.Markup :=
              Shipping.GetMarkup(
                CurrentShippingAgentService,RateShopLine."Shipping Cost",0,RateShopHeader."Sell-to Customer No.",
                RateShopHeader."Ship-to Code");
          RateShopLine."Shipping Charge" :=
            RateShopLine."Shipping Cost" + RateShopLine.Markup + "Additional Shipping Charge";

          IF "Value (Price)" <> 0 THEN
            RateShopLine."Order Amount" := "Value (Price)"
          ELSE
            RateShopLine."Order Amount" := "Override Value";

          RateShopLine."Total Amount" :=
            RateShopLine."Order Amount" + RateShopLine."Shipping Charge";

          RateShopLine.INSERT;
        END ELSE BEGIN
          IF GetShippingZoneChart(
               UPSShippingZoneChart,CurrentShippingAgentService,
               FixZIPCode(PackingStation."Ship-from ZIP Code"),PackingStation."Ship-from State",
               FixZIPCode("Ship-to ZIP Code"),"Ship-to Country Code",FALSE)
          THEN BEGIN
            UPSShippingZone.GET(CurrentShippingAgentService."Service Indicator",UPSShippingZoneChart.Zone);
            RateShopLine.INIT;

            IF GetRateShopShippingCharge(
                 RateShopHeader,CurrentShippingAgentService,UPSOptionPage,UPSShippingZoneChart,
                 UPSShippingZoneChart.Zone,FALSE,RateShopLine."Shipping Cost",
                 RateShopLine."Accessorial Charge",RateShopLine."Base Charge",
                 RateShopLine.Surcharge,RateShopLine.Markup)
            THEN BEGIN
              RateShopLine."Rate Shop No." := "No.";
              RateShopLine."Shipping Agent Code" := CurrentShippingAgentService."Shipping Agent Code";
              RateShopLine."World Wide Service" := CurrentShippingAgentService."World Wide Service";
              RateShopLine."Shipping Agent Service" := CurrentShippingAgentService.Code;
              RateShopLine."Insure Through Shipping Agent" := InsureThroughShippingAgent;
              RateShopLine.Sorting := CurrentShippingAgentService."Rateshop Sorting";

              RateShopLine."Service Description" := CurrentShippingAgentService.Description;
              RateShopLine.Zone := UPSShippingZoneChart.Zone;
              RateShopLine."Shipping Charge" :=
                RateShopLine."Shipping Cost" + RateShopLine.Markup + "Additional Shipping Charge";
              RateShopLine."Hundred Weight Rate" := FALSE;
              TestAndTransferToThirdPartyRS(
                RateShopHeader,RateShopLine,UPSOptionPage,CurrentShippingAgentService);

              IF "No. of Packages" > 1 THEN BEGIN
                IF COD AND
                   (ShippingAgentAccount."COD Rule" =
                    ShippingAgentAccount."COD Rule"::"All on Last Package")
                THEN BEGIN
                  RateShopLineCOD := RateShopLine;
                  COD := FALSE;

                  GetRateShopShippingCharge(
                    RateShopHeader,CurrentShippingAgentService,UPSOptionPage,UPSShippingZoneChart,
                    UPSShippingZoneChart.Zone,FALSE,RateShopLine."Shipping Cost",
                    RateShopLine."Accessorial Charge",RateShopLine."Base Charge",
                    RateShopLine.Surcharge,RateShopLine.Markup);

                  RateShopLine."Shipping Charge" :=
                    RateShopLine."Shipping Cost" + RateShopLine.Markup + "Additional Shipping Charge";
                  TestAndTransferToThirdPartyRS(
                    RateShopHeader,RateShopLine,UPSOptionPage,CurrentShippingAgentService);

                  RateShopLine.MultiplyCharges("No. of Packages" - 1);
                  RateShopLine.AddCharges(RateShopLineCOD);

                  COD := TRUE;
                END ELSE
                  RateShopLine.MultiplyCharges("No. of Packages");
              END;

              IF "Value (Price)" <> 0 THEN
                RateShopLine."Order Amount" := "Value (Price)"
              ELSE
                RateShopLine."Order Amount" := "Override Value";

              RateShopLine."Total Amount" :=
                RateShopLine."Order Amount" + RateShopLine."Shipping Charge";
              RateShopLine."Service Description" := CurrentShippingAgentService.Description;
              RateShopLine.INSERT;
            END;

            UPSShippingZone.CALCFIELDS("FF Hundred Weight Available");
            IF UPSShippingZone."FF Hundred Weight Available" AND
               ((ShipmentWeightRounded >= UPSShippingZone."Minimum Hundred Weight") OR
                "Show Below Hundred Weight")
            THEN BEGIN
              RateShopLine.INIT;
              "Calculation Weight (LBS)" := ShipmentWeightRounded;

              IF GetRateShopShippingCharge(
                   RateShopHeader,CurrentShippingAgentService,UPSOptionPage,UPSShippingZoneChart,
                   UPSShippingZoneChart.Zone,TRUE,RateShopLine."Shipping Cost",
                   RateShopLine."Accessorial Charge",RateShopLine."Base Charge",
                   RateShopLine.Surcharge,RateShopLine.Markup)
              THEN BEGIN
                RateShopLine."Rate Shop No." := "No.";
                RateShopLine."Shipping Agent Code" := CurrentShippingAgentService."Shipping Agent Code";
                RateShopLine."World Wide Service" := CurrentShippingAgentService."World Wide Service";
                RateShopLine."Shipping Agent Service" := CurrentShippingAgentService.Code;
                RateShopLine.Sorting := CurrentShippingAgentService."Rateshop Sorting";
                RateShopLine."Service Description" := CurrentShippingAgentService.Description;

                RateShopLine.Zone := UPSShippingZoneChart.Zone;
                RateShopLine."Insure Through Shipping Agent" := InsureThroughShippingAgent;
                RateShopLine."Shipping Charge" :=
                  RateShopLine."Shipping Cost" + RateShopLine.Markup + "Additional Shipping Charge";
                RateShopLine."Hundred Weight Rate" := TRUE;
                TestAndTransferToThirdPartyRS(
                  RateShopHeader,RateShopLine,UPSOptionPage,CurrentShippingAgentService);

                IF "No. of Packages" > 1 THEN BEGIN
                  IF COD AND
                     (ShippingAgentAccount."COD Rule" =
                      ShippingAgentAccount."COD Rule"::"All on Last Package")
                  THEN BEGIN
                    RateShopLineCOD := RateShopLine;
                    COD := FALSE;

                    GetRateShopShippingCharge(
                      RateShopHeader,CurrentShippingAgentService,UPSOptionPage,UPSShippingZoneChart,
                      UPSShippingZoneChart.Zone,FALSE,RateShopLine."Shipping Cost",
                      RateShopLine."Accessorial Charge",RateShopLine."Base Charge",
                      RateShopLine.Surcharge,RateShopLine.Markup);

                    RateShopLine."Shipping Charge" :=
                      RateShopLine."Shipping Cost" + RateShopLine.Markup + "Additional Shipping Charge";
                    TestAndTransferToThirdPartyRS(
                      RateShopHeader,RateShopLine,UPSOptionPage,CurrentShippingAgentService);

                    RateShopLine.MultiplyCharges("No. of Packages" - 1);
                    RateShopLine.AddCharges(RateShopLineCOD);

                    COD := TRUE;
                  END ELSE
                    RateShopLine.MultiplyCharges("No. of Packages");
                END;

                IF "Value (Price)" <> 0 THEN
                  RateShopLine."Order Amount" := "Value (Price)"
                ELSE
                  RateShopLine."Order Amount" := "Override Value";
                RateShopLine."Total Amount" :=
                  RateShopLine."Order Amount" + RateShopLine."Shipping Charge";
                RateShopLine."Service Description" := CurrentShippingAgentService.Description;
                RateShopLine.INSERT;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE GetUPSTracking@17(VAR CurrentPackage@1000000000 : Record 14000701;UPSOptionPage@1240030001 : Record 14000761);
    VAR
      ShippingNumbering@1240030000 : Record 14000725;
      NoSeriesMgt@1000000002 : Codeunit 396;
      xNo@1000000003 : Integer;
      UPSAccount@1000000004 : Text[6];
      UPSNoCalc@1000000005 : Text[30];
      UPSRemainder@1000000006 : Integer;
      UPSResult@1000000007 : Integer;
      UPSCheckDigit@1000000008 : Integer;
      UPSMultiple@1000000009 : Integer;
      UPSOddNumbers@1000000010 : Integer;
      UPSEvenNumbers@1000000011 : Integer;
    BEGIN
      GetShippingSetup;

      IF ShippingNumbering.GET(
           DATABASE::"Shipping Setup",ShippingSetup."Primary Key",
           ShippingSetup.FIELDNO("Last UPS Transaction No."))
      THEN BEGIN
        ShippingNumbering.GetNextNumber;
        CurrentPackage."UPS Transaction ID" := ShippingNumbering."Last No. Used";
      END ELSE BEGIN
        ShippingSetup.TESTFIELD("UPS Transaction Nos.");
        CurrentPackage."UPS Transaction ID" :=
          NoSeriesMgt.GetNextNo(ShippingSetup."UPS Transaction Nos.",WORKDATE,TRUE);
      END;

      IF STRLEN(CurrentPackage."UPS Transaction ID") <> 7 THEN
        ERROR(
          Text014,
          CurrentPackage.FIELDCAPTION("UPS Transaction ID"),ShippingSetup.FIELDCAPTION("UPS Transaction Nos."));

      GetPackingStation;
      CurrentPackage.TESTFIELD("Shipping Agent Account No.");
      GetShippingAgentAccount(CurrentPackage."Shipping Agent Account No.");
      GetShippingAgentService(
        CurrentPackage."Shipping Agent Code",CurrentPackage."Shipping Agent Service",
        CurrentPackage."World Wide Service");

      IF (ShippingAgentService."UPS Service Override Account" <> '') AND
         (CurrentPackage."Shipping Agent Account No." = '')
      THEN
        UPSAccount := ShippingAgentService."UPS Service Override Account"
      ELSE
        IF CurrentPackage."Shipping Agent Account No." = '' THEN
          UPSAccount := ShippingAgentAccount."Account No."
        ELSE
          UPSAccount := CurrentPackage."Shipping Agent Account No.";

      CurrentPackage."External Tracking No." :=
        '1Z' + UPSAccount + GetServiceIndicator(CurrentPackage,UPSOptionPage) +
        CurrentPackage."UPS Transaction ID";

      UPSNoCalc := COPYSTR(CurrentPackage."External Tracking No.",3,15);
      UPSNoCalc := CONVERTSTR(UPSNoCalc,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','23456789012345678901234567');
      UPSOddNumbers := 0;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,1,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,3,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,5,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,7,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,9,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,11,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,13,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,15,1));
      UPSOddNumbers := UPSOddNumbers + xNo;

      UPSEvenNumbers := 0;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,2,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,4,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,6,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,8,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,10,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,12,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,14,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      UPSEvenNumbers := UPSEvenNumbers * 2;
      UPSResult := UPSOddNumbers + UPSEvenNumbers;
      UPSRemainder := UPSResult MOD 10;
      UPSRemainder := 10 - UPSRemainder;
      UPSMultiple := UPSResult + UPSRemainder;
      UPSCheckDigit := UPSMultiple - UPSResult;
      IF UPSCheckDigit = 10 THEN
        UPSCheckDigit := 0;
      CurrentPackage."External Tracking No." :=
        CurrentPackage."External Tracking No." + FORMAT(UPSCheckDigit);
    END;

    PROCEDURE ClosePackage@18(VAR CurrentPackage@1240030000 : Record 14000701;VAR MultiDocPackageTmp@1240030001 : Record 14000701;CurrentShippingAgent@1240030002 : Record 291;PrintLabel@1240030003 : Boolean);
    VAR
      Package2@1000000002 : Record 14000701;
      SplitPackage@1240020008 : Record 14000701;
      UPSOptionPage@1000000003 : Record 14000761;
      UPSOptionPage2@1240020003 : Record 14000761;
      PackageLine@1240030006 : Record 14000702;
      UPSHazardousMaterial@1240020000 : Record 14050102;
      UPSHazMatProductClass@1240020001 : Record 14050103;
      UPSlinkPaperlessInvCountry@1240020002 : Record 14050010;
      UPSAccessorialCharge@1240020004 : Record 14000767;
      ExportSourceLine@1240020005 : Record 14000983;
      ExportDocument@1240020007 : Record 14000981;
      LabelFile@1240020011 : Record 14000710;
      LTLFreightType@1240020012 : Record 14000806;
      MultiDocPackageMgt@1240030004 : Codeunit 14000703;
      UPSWSTransaction@1240020006 : Codeunit 14000766;
      ModifyUPSOptionPage@1240030012 : Boolean;
      ShipmentTotalWeight@1240030005 : Decimal;
      ShipmentTotalWeight2@1240020010 : Decimal;
      Package3@1240030008 : Record 14000701;
      PackageTmp@1240030007 : TEMPORARY Record 14000701;
      PackageReturn@1240030017 : Record 14000701;
      ShiptoISO2CountryCode@1240030009 : Code[10];
      ShiptoState@1240030010 : Code[10];
      ShipfromState@1240030011 : Code[10];
      PackageCount@1240030013 : Integer;
      PackageCount2@1240020009 : Integer;
      RowCount@1240030016 : Integer;
      ReturnLabel@1240030018 : Boolean;
      ShippingRate@1240020024 : Decimal;
    BEGIN
      WITH CurrentPackage DO BEGIN
        TESTFIELD(Closed,FALSE);

        IF "Manual Shipment" THEN BEGIN
          IF CurrentShippingAgent."Enter Ext. Track. No. on Close" THEN
            Shipping.EnterExternalTrackingNo(CurrentPackage,FALSE);

          "Closed by Packing Station Code" := PackingStation.Code;
          ClearTotalValueFields;
          VALIDATE("Calculation Weight",GetWeight);
          GetCalculationFields(1,'>');

          "Packing Date" := WORKDATE;
          "Packing Time" := TIME;
          "Packed By" := USERID;
          "Shipping Cost" := 0;
          Markup := 0;

          IF "Override Shipping Charge" <> 0 THEN
            "Shipping Charge" := "Override Shipping Charge"
          ELSE
            "Shipping Charge" := "Shipping Cost" + Markup + "Additional Shipping Charge";
          Closed := TRUE;
          MODIFY;
          COMMIT;

          IF "Multi Document Package" THEN BEGIN
            GetShippingSetup;
            GetPackingStation;
            MultiDocPackageMgt.SplitMultiDocPackage(
              CurrentPackage,MultiDocPackageTmp,PackingStation,ShippingSetup);
            COMMIT;
          END;

          EXIT;
        END;

        GetShippingSetup;
        GetUPSlinkSetup;
        GetPackingStation;
        GetShippingAgent("Shipping Agent Code");
        TESTFIELD("Shipping Agent Account No.");

        GetShippingAgentAccount("Shipping Agent Account No.");
        GetShippingAgentService("Shipping Agent Code","Shipping Agent Service","World Wide Service");
        UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.",0,0);

        IF ShippingAgentAccount."Rate Type" = ShippingAgentAccount."Rate Type"::"New List Rates" THEN BEGIN
          ShippingAgentAccount."Rate Type" := ShippingAgentAccount."Rate Type"::"Base Rates";
          ShippingAgentAccount.MODIFY(FALSE);
        END;

        ClearTotalValueFields;
        ShiptoISO2CountryCode := GetUPSCountryCode("Ship-to Country Code");
        "Calculation Weight" := GetWeight;
        "Oversize Actual Weight" := "Calculation Weight";
        GetUPSPackagingDimensions(
          "Override Dimensions","Override Length","Override Width","Override Height",
          UPSOptionPage."UPS Packaging Type");
        GetCalculationFields(1,'>');

        IF ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::UPSlink THEN BEGIN
          IF "Service Indicator" IN ['92','93','94','95','GFP'] THEN
            ERROR(Text062,
              FIELDNAME("Shipping Agent Service"),"Shipping Agent Service",
              ShippingSetup.FIELDNAME("UPS Version"),ShippingSetup."UPS Version");
        END;

        IF (ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::"UPSlink/UPS Web Service") AND
           ("Service Indicator" IN ['92','93','94','95','GFP'])
        THEN BEGIN
          UPSWSTransaction.GetUPSWSShippingAccount(CurrentPackage."Shipping Agent Account No.");

          IF ("Service Indicator" = 'GFP') THEN BEGIN
            IF "LTL Freight Type" = '' THEN
              ERROR(Text079,
                FIELDCAPTION("LTL Freight Type"),
                FIELDCAPTION("Shipping Agent Service"),"Shipping Agent Service")
            ELSE BEGIN
              IF LTLFreightType.GET("LTL Freight Type") THEN
                IF LTLFreightType."Standard Freight Type" = LTLFreightType."Standard Freight Type"::" " THEN
                  ERROR(Text102,
                    LTLFreightType.FIELDCAPTION("Standard Freight Type"),
                    LTLFreightType.TABLECAPTION,"LTL Freight Type",
                    LTLFreightType.FIELDCAPTION("Standard Freight Type"))
            END;

            IF TestForHazMat(CurrentPackage,UPSOptionPage) THEN
              ERROR(Text005,
                UPSOptionPage.FIELDCAPTION("Dangerous Goods"),"Shipping Agent Service");

            IF "Package No." > 1 THEN BEGIN
              SplitPackage.RESET;
              SplitPackage.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
              SplitPackage.SETRANGE("Source Type","Source Type");
              SplitPackage.SETRANGE("Source Subtype","Source Subtype");
              IF "Multi Document Package" THEN
                SplitPackage.SETFILTER("Source ID","Multi Document No.")
              ELSE
                SplitPackage.SETRANGE("Source ID","Source ID");
              SplitPackage.SETRANGE("Package No.",1);
              SplitPackage.SETRANGE("Total Packages","Total Packages");

              IF SplitPackage.FIND('-') THEN
                "First Package No." := SplitPackage."No."
              ELSE BEGIN
                "Package No." := 1;
                "Total Packages" := 1;
                "First Package No." := '';
              END;
            END ELSE
              IF ("Package No." = 1) AND ("Total Packages" > 1) THEN
                "First Package No." := "No.";

            IF ("Package No." < "Total Packages") OR
               ("Total Packages" = 1)
            THEN BEGIN
              "Packing Date" := WORKDATE;
              "Packing Time" := TIME;
              "Packed By" := USERID;
              "Closed by Packing Station Code" := PackingStation.Code;
              "Exclude From Manifest" := TRUE;
              Closed := TRUE;
              MODIFY;
              COMMIT;

              IF "Multi Document Package" THEN BEGIN
                MultiDocPackageMgt.SplitMultiDocPackage(
                  CurrentPackage,MultiDocPackageTmp,PackingStation,ShippingSetup);
                COMMIT;

              END;
              EXIT;
            END;

            IF ("Total Packages" > 1) AND
               ("Package No." = "Total Packages") AND
               (NOT CurrentPackage.Miscellaneous)
            THEN
              UPSWSTransaction.ClosePackage(CurrentPackage,MultiDocPackageTmp,CurrentShippingAgent,PrintLabel);

            IF "Package No." = "Total Packages" THEN BEGIN
              "Packing Date" := WORKDATE;
              "Packing Time" := TIME;
              "Packed By" := USERID;
              "Closed by Packing Station Code" := PackingStation.Code;
              "Exclude From Manifest" := TRUE;
              Closed := TRUE;
              MODIFY;
              COMMIT;

              IF "Multi Document Package" THEN BEGIN
                MultiDocPackageMgt.SplitMultiDocPackage(
                  CurrentPackage,MultiDocPackageTmp,PackingStation,ShippingSetup);
                COMMIT;

                SplitPackage.RESET;
                SplitPackage.SETCURRENTKEY("Original Package No.");
                SplitPackage.SETRANGE("Original Package No.", "No.");
                IF SplitPackage.FIND('-') THEN BEGIN
                  LabelFile.RESET;
                  LabelFile.SETRANGE(Type,LabelFile.Type::Package);
                  LabelFile.SETRANGE("No.","No.");
                  LabelFile.SETRANGE("File Type", LabelFile."File Type"::UPS);
                  IF LabelFile.FIND('-') THEN BEGIN
                    IF LabelFile.RENAME(LabelFile.Type::Package,SplitPackage."No.",LabelFile."File Type"::UPS) THEN;
                  END;
                END;
              END;
            END;
          END ELSE
            UPSWSTransaction.ClosePackage(CurrentPackage,MultiDocPackageTmp,CurrentShippingAgent,PrintLabel);

          EXIT;
        END;

        IF "Service Indicator" <> 'E1' THEN
          GetCalculationWeightRate(
            UPSOptionPage,ShippingAgentService,"Calculation Weight","Calculation Weight (LBS)",
            "Dimensional Weight",ModifyUPSOptionPage,"Use Dim Weight","World Wide Service",
            "UPS Canadian Service","UPS Puerto Rico Service",TRUE,
            "Calculation Length","Calculation Width","Calculation Height",ShiptoISO2CountryCode)
        ELSE BEGIN
          IF Miscellaneous THEN
            ERROR(Text008,
              "Shipping Agent Service",FIELDCAPTION(Miscellaneous),"No.");

          IF NOT("World Wide Service" OR "UPS Canadian Service" OR"UPS Puerto Rico Service") THEN
            ERROR(Text084,"Shipping Agent Service");
              "Calculation Weight" := GetWeight + UPSOptionPage."Pallet Weight";
          CheckFreightPackage(CurrentPackage,UPSOptionPage,ModifyUPSOptionPage);
          GetFreightCharge(CurrentPackage);
          ModifyUPSOptionPage := TRUE;
          ShippingRate := GetFreightRate(ShippingAgentService,'F',"UPS Zone","Calculation Weight");
          "Base Charge" := ShippingRate;
          Surcharge := GetSurcharge(ShippingAgentService,"Base Charge");
          "Shipping Cost" := "Base Charge" + "Accessorial Charge" + Surcharge;
          "Shipping Charge" := "Shipping Cost" + Markup + "Additional Shipping Charge";
          UPSOptionPage."UPS Packaging Type" := UPSOptionPage."UPS Packaging Type"::Palletized;
          UPSOptionPage.MODIFY;
          GetUPSTracking(CurrentPackage,UPSOptionPage);
          UPSOptionPage."Waybill No." := GetShipmentNo("External Tracking No.");
          "Calculation Weight (LBS)" := CurrentPackage."Calculation Weight";
        END;

        IF ("Calculation Weight (LBS)" < 0) OR ("Override Weight" < 0) THEN
          ERROR(Text071);

        IF "Oversize Actual Weight" = "Calculation Weight" THEN
          "Oversize Actual Weight" := 0;

        "Closed by Packing Station Code" := PackingStation.Code;
        "UPS Hundred Weight" := FALSE;

        CarrierPackingStation.GetPackingStation(PackingStation);
        IF CarrierPackingStation."UPSlink Printer Model" = '' THEN
          ERROR(Text102,
            CarrierPackingStation.FIELDCAPTION("UPSlink Printer Model"),
            CarrierPackingStation.TABLECAPTION,CarrierPackingStation.Code);

        IF UPSOptionPage."Call Tag Type" IN
           [UPSOptionPage."Call Tag Type"::"1 attempt",UPSOptionPage."Call Tag Type"::"3 attempt"]
        THEN
          "Insure Through Shipping Agent" := TRUE
        ELSE
          "Insure Through Shipping Agent" :=
            CalcInsureThroughShippingAgent(
              ShippingAgentAccount."Insure Through Carrier",
              ShippingAgentAccount."Insured Third Party/Collect");

        IF "Service Indicator" <> 'E1' THEN BEGIN
          CheckPackage(CurrentPackage,UPSOptionPage,ModifyUPSOptionPage);
          GetUPSTracking(CurrentPackage,UPSOptionPage);
        END;

        LOCKTABLE;
        IF ModifyUPSOptionPage THEN
          UPSOptionPage.MODIFY;

        IF "Service Indicator" <> 'E1' THEN BEGIN
          IF NOT(UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::None) THEN
            IF GetUPSCountryCode("Ship-to Country Code") = 'US' THEN
              GetShippingCharge(CurrentPackage,FALSE)
            ELSE
              ERROR(Text061,UPSOptionPage.FIELDCAPTION("Call Tag Type"),"Ship-to Country Code");

          IF UPSOptionPage."Call Tag Type" IN
            [UPSOptionPage."Call Tag Type"::None,UPSOptionPage."Call Tag Type"::"Exchange Outbound"] THEN
            GetShippingCharge(CurrentPackage,FALSE);
        END;

        UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.",0,0);

        IF COD AND "Add Shipping Charge to COD Amt" THEN
          "COD Amount" := "COD Amount" + "Shipping Charge";

        IF ("Package No." > 1) AND (NOT Miscellaneous) THEN BEGIN
          Package2.RESET;
          Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          Package2.SETRANGE("Source Type","Source Type");
          Package2.SETRANGE("Source Subtype","Source Subtype");

          IF "Multi Document Package" THEN
            Package2.SETFILTER("Source ID","Multi Document No.")
          ELSE
            Package2.SETRANGE("Source ID","Source ID");

          Package2.SETRANGE("Package No.",1);
          Package2.SETRANGE("Total Packages","Total Packages");

          IF Package2.FIND('-') THEN BEGIN
            Package2.TESTFIELD("External Tracking No.");
            "First Package No." := Package2."No.";
          END ELSE BEGIN
            "Package No." := 1;
            "Total Packages" := 1;
            "First Package No." := '';
          END;
        END ELSE
          IF ("Package No." = 1) AND ("Total Packages" > 1) AND NOT Miscellaneous THEN
            "First Package No." := "No.";

        IF ("Export Document No." <> '') AND UPSOptionPage."World Ease" THEN
          WETransaction.ClosePackage(CurrentPackage,UPSOptionPage,ShippingSetup);

        "Packing Date" := WORKDATE;
        "Packing Time" := TIME;
        "Packed By" := USERID;
        Closed := TRUE;
        MODIFY;

        IF "Total Packages" > 1 THEN BEGIN
          Package2.GET("First Package No.");
          UPSOptionPage."Waybill No." := GetShipmentNo(Package2."External Tracking No.");
        END ELSE
          IF ShippingAgentService."UPS Puerto Rico Service" THEN
            UPSOptionPage."Waybill No." := COPYSTR("External Tracking No.",1,11)
          ELSE
            UPSOptionPage."Waybill No." := GetShipmentNo("External Tracking No.");

        IF ("World Wide Service" OR "UPS Canadian Service" OR "UPS Puerto Rico Service") THEN BEGIN
          PackageLine.RESET;
          PackageLine.SETRANGE("Package No.","No.");
          PackageLine.SETFILTER("UPS ISC Type",'<>%1',PackageLine."UPS ISC Type"::" ");
          IF PackageLine.FIND('-') THEN
            UPSOptionPage.ISC := TRUE;

          IF UPSOptionPage."Commercial Invoice" = UPSOptionPage."Commercial Invoice"::"Paperless Invoice" THEN
          BEGIN
            IF NOT(ShippingAgentAccount."Paperless Invoice") THEN
              ERROR(Text079,
                    ShippingAgentAccount.FIELDCAPTION("Paperless Invoice") + ' contract',
                    UPSOptionPage."Commercial Invoice", 'shipment processing');
          END;

          IF UPSOptionPage."Certificate of Origin" = UPSOptionPage."Certificate of Origin"::"Paperless NAFTA" THEN
          BEGIN
            IF NOT(ShippingAgentAccount."Paperless NAFTA") THEN
              ERROR(Text079,
                    ShippingAgentAccount.FIELDCAPTION("Paperless NAFTA") + ' contract',
                    UPSOptionPage."Certificate of Origin", 'shipment processing');

            IF NOT(ShippingAgentAccount."Paperless Invoice") THEN
              ERROR(Text079,
                    ShippingAgentAccount.FIELDCAPTION("Paperless Invoice") + ' contract',
                    UPSOptionPage."Certificate of Origin", 'shipment processing');

            IF NOT(UPSOptionPage."Commercial Invoice" = UPSOptionPage."Commercial Invoice"::"Paperless Invoice") THEN
              ERROR(Text079,
                    ShippingAgentAccount.FIELDCAPTION("Paperless Invoice"),
                    UPSOptionPage.FIELDCAPTION("Certificate of Origin"), UPSOptionPage."Certificate of Origin");

            IF UPSlinkPaperlessInvCountry.GET(ShiptoISO2CountryCode) THEN
              IF NOT(UPSlinkPaperlessInvCountry."Paperless NAFTA") THEN
                ERROR(Text006,
                      FIELDCAPTION("Ship-to Country Code"),
                      ShiptoISO2CountryCode,
                      UPSOptionPage."Certificate of Origin");
          END;
        END;

        IF UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::None THEN BEGIN
          ShiptoState := UPPERCASE("Ship-to State");
          ShipfromState := UPPERCASE(PackingStation."Ship-from State");
        END ELSE BEGIN
          ShiptoState := UPPERCASE(PackingStation."Ship-from State");
          ShipfromState := UPPERCASE("Ship-to State");
        END;

        IF UPSOptionPage."Dangerous Goods" OR UPSOptionPage."Dry Ice" THEN BEGIN
          IF ((ShiptoState IN ['AK','HI','PR']) OR (ShiptoISO2CountryCode = 'PR')) AND
             NOT (ShipfromState IN ['AK','HI','PR'])
          THEN
            IF NOT ("Service Indicator" IN ['01','02']) THEN
              ERROR(Text037,CurrentPackage."Shipping Agent Service",'',
                    UPSOptionPage.FIELDCAPTION("Dangerous Goods"),
                    '/' + UPSOptionPage.FIELDCAPTION("Dry Ice"),' to ',ShiptoState + '/' +
                    ShiptoISO2CountryCode);

          PackageLine.RESET;
          PackageLine.SETRANGE("Package No.", "No.");
          IF PackageLine.FIND('-') THEN BEGIN
            UPSHazardousMaterial.SETRANGE(Type,PackageLine.Type);
            UPSHazardousMaterial.SETRANGE("No.",PackageLine."No.");
            IF UPSHazardousMaterial.FIND('-') THEN
              IF UPSHazMatProductClass.GET(UPSHazardousMaterial."Product Class") THEN BEGIN
                IF NOT(UPSHazMatProductClass."Identification No."
                   IN ['UN3090','UN3091','UN3480','UN3481']) AND
                   (ShiptoISO2CountryCode IN ['AE','AU','BG','BR','CN','CR','ID','IL',
                   'IN','MX','NZ','RO','SA','SK','TH','TR','VI','VN'])
                THEN
                  ERROR(Text062,
                        UPSOptionPage.FIELDCAPTION("Dangerous Goods"),
                        UPSHazMatProductClass."Identification No.",
                        FIELDCAPTION("Ship-to Country Code"),"Ship-to Country Code");
              END;
          END;
        END;

        CASE "Service Indicator" OF
          '03','12':
            IF (ShiptoState IN ['PR','AK','HI']) AND
               (NOT (ShipfromState IN ['PR','AK','HI']) OR
               (ShiptoState <> ShipfromState))
            THEN
              UPSOptionPage."Haz Mat Eligibility" := UPSOptionPage."Haz Mat Eligibility"::"AIR ELIGIBLE"
            ELSE
              UPSOptionPage."Haz Mat Eligibility" := UPSOptionPage."Haz Mat Eligibility"::"GROUND ONLY";
          '11':
            UPSOptionPage."Haz Mat Eligibility" := UPSOptionPage."Haz Mat Eligibility"::"GROUND ONLY";
          ELSE
            UPSOptionPage."Haz Mat Eligibility" := UPSOptionPage."Haz Mat Eligibility"::"AIR ELIGIBLE";
        END;

        UPSOptionPage.MODIFY;

        IF ShiptoISO2CountryCode <> 'US' THEN BEGIN
          UPSOptionPage."Package Labels Not Printed" := TRUE;
          UPSOptionPage.MODIFY;

          IF "Package No." = "Total Packages" THEN BEGIN
            Package2.RESET;
            IF Miscellaneous THEN
              Package2.SETRANGE("No.","No.")
            ELSE BEGIN
              Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
              Package2.SETRANGE("Source Type","Source Type");
              Package2.SETRANGE("Source Subtype","Source Subtype");
              Package2.SETFILTER("Shipping Agent Code",'<>%1',
                ShippingSetup."Prepack Shipping Agent Code");

              IF "Multi Document Package" THEN
                Package2.SETFILTER("Source ID","Multi Document No.")
              ELSE
                Package2.SETRANGE("Source ID","Source ID");
            END;

            Package2.FIND('-');
            REPEAT
              IF (PackageCount > "Total Packages") AND PrintLabel THEN
                ERROR(Text083);
              Package2.ClearTotalValueFields;
              ShipmentTotalWeight := ShipmentTotalWeight + Package2.GetWeight;
            UNTIL Package2.NEXT = 0;

            Package2.FIND('-');
            REPEAT
              IF Package2."Multi Document Package" AND
                 (Package2."Original Package No." <> '')
              THEN
                UPSOptionPage.GET(UPSOptionPage.Type::Package,Package2."Original Package No.")
              ELSE
                UPSOptionPage.GET(UPSOptionPage.Type::Package,Package2."No.");
              UPSOptionPage."Package Labels Not Printed" := TRUE;
              IF NOT(UPSOptionPage."Call Tag Type" IN
                 [UPSOptionPage."Call Tag Type"::"Exchange Outbound",
                  UPSOptionPage."Call Tag Type"::"Exchange Return"]) THEN
                UPSOptionPage."Shipment Total Weight" := ShipmentTotalWeight;
              UPSOptionPage.MODIFY;
              Package3.GET(UPSOptionPage."Source ID");
              PackageTmp := Package3;
              IF NOT PackageTmp.INSERT THEN ;
            UNTIL Package2.NEXT = 0;
          END;
        END;

        IF Miscellaneous AND ("External Document No." <> '') THEN BEGIN
          Package2.RESET;
          Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          Package2.SETRANGE("Source Type",36);
          Package2.SETRANGE("Source Subtype",1);
          Package2.SETRANGE("Source ID","External Document No.");
          Package2.SETFILTER("Shipping Agent Code","Shipping Agent Code");
          IF Package2.FIND('-') THEN BEGIN
            UPSOptionPage2.GET(UPSOptionPage2.Type::Package,Package2."No.");
            IF UPSOptionPage2."Ship and Return Label Pkg No." = "No." THEN
              UPSOptionPage.TESTFIELD("Call Tag Type",
                UPSOptionPage."Call Tag Type"::"Print Return Label Only");
          END;
        END;

        COMMIT;

        IF "Multi Document Package" THEN BEGIN
          GetShippingSetup;
          GetPackingStation;
          MultiDocPackageMgt.SplitMultiDocPackage(
            CurrentPackage,MultiDocPackageTmp,PackingStation,ShippingSetup);
          COMMIT;
        END;

        IF UPSOptionPage."Call Tag Type" =
           UPSOptionPage."Call Tag Type"::"Exchange Outbound"
        THEN BEGIN
          CLEAR(PackageReturn);
          PackageReturn.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          PackageReturn.SETRANGE("Source Type","Source Type");
          PackageReturn.SETRANGE("Source Subtype","Source Subtype");
          PackageReturn.SETRANGE("Source ID","Source ID");
          RowCount := 0;
          IF PackageReturn.FIND('-') THEN
            REPEAT
              RowCount := RowCount + 1;
            UNTIL PackageReturn.NEXT = 0;
            IF RowCount = 1 THEN
              IF CreateReturnPackage(CurrentPackage,UPSOptionPage,PackageReturn) THEN
                ReturnLabel := TRUE
              ELSE
                ReturnLabel := FALSE;
        END;

      //If "Ship and Return Label" then create a return label. If the return label
      //already exists delete and create another one
        IF (UPSOptionPage."Ship and Return Label") THEN BEGIN
          IF PackageReturn.GET(UPSOptionPage."Ship and Return Label Pkg No.") THEN
            PackageReturn.DELETE(FALSE);
          IF CreateReturnPackage(CurrentPackage,UPSOptionPage,PackageReturn) THEN;
        END;

        IF PrintLabel THEN BEGIN
          UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.");
          IF UPSOptionPage."Package Labels Not Printed" AND
             ("Package No." = "Total Packages")
          THEN BEGIN
            PackageTmp.FIND('-');
            REPEAT
              Package3.GET(PackageTmp."No.");
              PrintPackageLabel(Package3);
              UPSOptionPage.GET(UPSOptionPage.Type::Package,Package3."No.");
              UPSOptionPage."Package Labels Not Printed" := FALSE;
              UPSOptionPage.MODIFY;
            UNTIL PackageTmp.NEXT = 0;
          END ELSE
            PrintPackageLabel(CurrentPackage);

          IF ReturnLabel THEN
            PrintPackageLabel(PackageReturn);
        END;

        IF ("World Wide Service" OR "UPS Canadian Service" OR "UPS Puerto Rico Service") AND
           ("Service Indicator" <> 'E1') AND NOT("Multi Document Package") THEN
        BEGIN
          IF ExportDocument.GET("Export Document No.") THEN
            IF NOT(ExportDocument.Posted) THEN
              ExportSourceLine.ReCreateAllSrceLinesFromPkgs("Export Document No.",ShippingSetup,FALSE);
        END;
      END;
    END;

    PROCEDURE OpenPackage@19(VAR CurrentPackage@1000000000 : Record 14000701);
    VAR
      Package@1000000001 : Record 14000701;
      UPSManifest@1000000002 : Record 14050007;
      UPSManifestPart2@1000000003 : Record 14000771;
      UPSOptionPage@1240030000 : Record 14000761;
      UPSWSTransaction@1240020000 : Codeunit 14000766;
    BEGIN
      WITH CurrentPackage DO BEGIN

        GetShippingSetup;
        IF ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::UPSlink THEN BEGIN
          IF "Service Indicator" IN ['92','93','94','95','GFP'] THEN
            ERROR(Text062,
              FIELDNAME("Shipping Agent Service"),"Shipping Agent Service",
              ShippingSetup.FIELDNAME("UPS Version"),ShippingSetup."UPS Version");
        END;

        IF (ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::"UPSlink/UPS Web Service") AND
           ("Service Indicator" IN ['92','93','94','95','GFP'])
        THEN BEGIN
          IF "Total Packages" > 1 THEN BEGIN
            UPSWSTransaction.OpenPackage(CurrentPackage);
            EXIT;
          END;

          IF ("Total Packages" = 1) AND ("Service Indicator" <> 'GFP') THEN BEGIN
            UPSWSTransaction.OpenPackage(CurrentPackage);
            EXIT;
          END;

        END;

        TESTFIELD(Closed);
        TESTFIELD("Manifest No.",'');
        TESTFIELD("Pickup Date",0D);
        GetUPSlinkSetup;

        IF (("First Package No." = '') OR
            ("First Package No." = "No.")) AND
           NOT "Manual Shipment"
        THEN BEGIN
          Package.RESET;
          Package.SETCURRENTKEY("First Package No.");
          Package.SETRANGE("First Package No.","No.");
          Package.SETFILTER("No.",'<>%1',"No.");
          IF Package.FIND('-') THEN
            ERROR(
              Text016);
        END;

        IF (NOT "Manual Shipment") AND
           (NOT Miscellaneous) AND
           (("World Wide Service" OR "UPS Canadian Service") AND ("Total Packages" > 1)) AND
           ("Package No." <> "Total Packages")
        THEN BEGIN
          Package.RESET;
          Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          Package.SETRANGE("Source Type","Source Type");
          Package.SETRANGE("Source Subtype","Source Subtype");

          IF "Multi Document Package" THEN
            Package.SETFILTER("Source ID","Multi Document No.")
          ELSE
            Package.SETRANGE("Source ID","Source ID");
          Package.SETRANGE("Package No.","Total Packages");
          IF Package.FIND('-') THEN
            IF Package.Closed THEN
              ERROR(
                Text017);
        END;

        "First Package No." := '';
        IF "Manual Shipment" THEN BEGIN
          Closed := FALSE;
          MODIFY;
          COMMIT;
          EXIT;
        END ELSE
          LOCKTABLE;

        IF UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.") THEN BEGIN
          IF UPSOptionPage."World Ease Master No." <> '' THEN
            WETransaction.OpenPackage(CurrentPackage,UPSOptionPage);
          UPSOptionPage.ResetInitialValues;
          UPSOptionPage.MODIFY;
        END;

        IF "UPS Manifest Entry No." <> 0 THEN BEGIN
          UPSManifest.RESET;
          UPSManifest.SETCURRENTKEY("Package No.");
          UPSManifest.SETRANGE("Package No.","No.");
          IF UPSManifest.FIND('-') THEN
            REPEAT
              IF UPSManifestPart2.GET(UPSManifest."Entry No.") THEN
                UPSManifestPart2.DELETE;
            UNTIL UPSManifest.NEXT = 0;

          UPSManifest.RESET;
          UPSManifest.SETCURRENTKEY("Package No.");
          UPSManifest.SETRANGE("Package No.","No.");
          UPSManifest.DELETEALL;

          "UPS Manifest Entry No." := 0;
        END;

        IF COD AND "Add Shipping Charge to COD Amt" THEN
          "COD Amount" := "COD Amount" - "Shipping Charge";

        "External Tracking No." := '';

        Closed := FALSE;
        MODIFY;
        COMMIT;
      END;
    END;

    PROCEDURE ReOpenPostedPackage@44(VAR CurrentPostedPackage@1000000000 : Record 14000704);
    VAR
      PostedPackage@1000000001 : Record 14000704;
      UPSManifest@1000000002 : Record 14050007;
      UPSPostedOptionPage@1240020002 : Record 14000762;
      PostedPackageReturn@1240020001 : Record 14000704;
      UPSPostedOptionPageReturn@1240020003 : Record 14000762;
      Shipping@1240020000 : Codeunit 14000701;
      UPSWSTransaction@1240020004 : Codeunit 14000766;
    BEGIN
      WITH CurrentPostedPackage DO BEGIN

        GetShippingSetup;
        IF ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::UPSlink THEN BEGIN
          IF "Service Indicator" IN ['92','93','94','95','GFP'] THEN
            ERROR(Text062,
              FIELDNAME("Shipping Agent Service"),"Shipping Agent Service",
              ShippingSetup.FIELDNAME("UPS Version"),ShippingSetup."UPS Version");
        END;

        IF (ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::"UPSlink/UPS Web Service") AND
           ("Service Indicator" IN ['92','93','94','95','GFP'])
        THEN BEGIN
          UPSWSTransaction.OpenPostedPackage(CurrentPostedPackage);
          EXIT;
        END;

        TESTFIELD(Closed);
        TESTFIELD("Manifest No.",'');
        TESTFIELD("Pickup Date",0D);

        IF ("First Package No." = '') OR ("First Package No." = "No.") THEN BEGIN
          PostedPackage.RESET;
          PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Posted Source ID");
          PostedPackage.SETRANGE("Source Type","Source Type");
          PostedPackage.SETRANGE("Source Subtype","Source Subtype");
          PostedPackage.SETRANGE("Posted Source ID","Posted Source ID");
          PostedPackage.SETRANGE("First Package No.","No.");
          PostedPackage.SETFILTER("No.",'<>%1',"No.");
          IF PostedPackage.FIND('-') THEN
            ERROR(
              Text016);
        END;

        "First Package No." := '';
        IF "Manual Shipment" THEN BEGIN
          Closed := FALSE;
          MODIFY;
          COMMIT;

          EXIT;
        END;

        IF "UPS Manifest Entry No." <> 0 THEN BEGIN
          UPSManifest.RESET;
          UPSManifest.SETCURRENTKEY("Package No.");
          UPSManifest.SETRANGE("Package No.","No.");
          UPSManifest.DELETEALL;

          "UPS Manifest Entry No." := 0;
        END;

        IF COD AND "Add Shipping Charge to COD Amt" THEN
          "COD Amount" := "COD Amount" - "Shipping Charge";

        Closed := FALSE;
        MODIFY;
        COMMIT;

        //Ship and Return Label: shipping label and return label
        IF UPSPostedOptionPage.GET("No.") THEN BEGIN
          IF UPSPostedOptionPage."Ship and Return Label Pkg No." <> '' THEN BEGIN
            PostedPackageReturn.RESET;
            PostedPackageReturn.SETRANGE("No.",UPSPostedOptionPage."Ship and Return Label Pkg No.");
            IF PostedPackageReturn.FIND('-') THEN BEGIN
              IF PostedPackageReturn.Closed THEN BEGIN
                Shipping.ReOpenPostedPackage(PostedPackageReturn);
                UPSPostedOptionPage."Voided Package Do Not Manifest" := TRUE;
                UPSPostedOptionPage.MODIFY;
                IF UPSPostedOptionPageReturn.GET(PostedPackageReturn."No.") THEN BEGIN
                  UPSPostedOptionPageReturn."Voided Package Do Not Manifest" := TRUE;
                  UPSPostedOptionPageReturn.MODIFY;
                END;
              END;
            END;
          END;
        END;

        //Ship and Return Label: return label only
        IF "External Document No." <> '' THEN BEGIN
           IF UPSPostedOptionPageReturn.GET(CurrentPostedPackage."No.") THEN
             IF UPSPostedOptionPageReturn."Call Tag Type" =
                UPSPostedOptionPageReturn."Call Tag Type"::"Print Return Label Only" THEN
             BEGIN
               UPSPostedOptionPageReturn."Voided Package Do Not Manifest" := TRUE;
               UPSPostedOptionPageReturn.MODIFY;
             END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetAccessorialCharge@20(CurrentUPSOptionPage@1240030001 : Record 14000761;CurrentShippingAGentService@1240030002 : Record 14000708;CountryCode@1240030003 : Code[2];ZIPCode@1240030004 : Code[20];CityName@1240030005 : Code[50];EAS@1240030006 : Boolean;CalculationWeight@1240030007 : Decimal;COD@1240030008 : Boolean;InsuredValue@1240030009 : Decimal;ResidentialDelivery@1240030020 : Boolean;VAR InsuranceCharge@1240030010 : Decimal;VAR BaseCharge@1240030013 : Decimal;ShipToState@1240020000 : Text[30]) AccessorialChargeAmount@1240030000 : Decimal;
    VAR
      UPSAccessorialCharge@1240030011 : Record 14000767;
      TempCharge@1240030012 : Decimal;
      Ground@1240020001 : Boolean;
      DASZipCodeFound@1240020002 : Boolean;
    BEGIN
      WITH CurrentUPSOptionPage DO BEGIN
        CASE TRUE OF
          CurrentShippingAGentService."World Wide Service":
            ZIPCode := DELCHR(ZIPCode,'=',' ');
          CurrentShippingAGentService."UPS Canadian Service":
            BEGIN
              ZIPCode := DELCHR(ZIPCode,'=',' ');
              IF CountryCode = '' THEN
                CountryCode := 'CA';
            END;
          ELSE
            IF STRLEN(ZIPCode) > 5 THEN
              ZIPCode := COPYSTR(ZIPCode,1,5);
        END;

        IF CurrentShippingAGentService."Transport Method Type" = CurrentShippingAGentService."Transport Method Type"::Ground THEN
          Ground := TRUE
        ELSE
          Ground := FALSE;

        AccessorialChargeAmount := 0;
        UPSAccessorialCharge.RESET;
        IF "Additional Handling Required" THEN BEGIN
          IF GetUPSCountryCode(CountryCode) = 'US' THEN BEGIN
            IF AHWeightDom THEN BEGIN
              UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::UPS);
              UPSAccessorialCharge.SETRANGE("From Zip Code",'AHCW');
            END ELSE IF AHLength OR AHWidth THEN BEGIN
                UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::UPS);
                UPSAccessorialCharge.SETRANGE("From Zip Code",'AHCD');
            END ELSE
              UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::AH);

            IF UPSAccessorialCharge.FIND('+') THEN
              AccessorialChargeAmount := AccessorialChargeAmount + UPSAccessorialCharge.Fee;

           END ELSE BEGIN
             IF AHWeightIntl OR AHLength OR AHWidth THEN BEGIN
               UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::UPS);
               UPSAccessorialCharge.SETRANGE("From Zip Code",'AHCD');
             END ELSE
               UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::AH);

             IF UPSAccessorialCharge.FIND('+') THEN
               AccessorialChargeAmount := AccessorialChargeAmount + UPSAccessorialCharge.Fee;
           END;

        END;

        //Use DAS to find applicable zip codes for DAS,DASGR,DASA,DASAR
        //If Ground and Residential apply DAS otherwise use DAS zipcode to find other DASurcharges
        IF NOT CurrentShippingAGentService."World Wide Service" THEN BEGIN
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::DAS);
          UPSAccessorialCharge.SETRANGE("From Zip Code",ZIPCode);
          IF UPSAccessorialCharge.FIND('+') THEN BEGIN
            IF Ground AND NOT ResidentialDelivery THEN
              BaseCharge := BaseCharge + UPSAccessorialCharge.Fee
            ELSE
              DASZipCodeFound := TRUE;
          END;

          IF DASZipCodeFound AND
             NOT(Ground AND NOT ResidentialDelivery)
          THEN BEGIN
            UPSAccessorialCharge.RESET;
            UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::UPS);
            IF Ground AND ResidentialDelivery THEN
              UPSAccessorialCharge.SETRANGE("From Zip Code",'DASGR');
            IF NOT(Ground) AND ResidentialDelivery THEN
              UPSAccessorialCharge.SETRANGE("From Zip Code",'DASAR');
            IF NOT (Ground) AND NOT(ResidentialDelivery) THEN
              UPSAccessorialCharge.SETRANGE("From Zip Code",'DASA');

            IF UPSAccessorialCharge.FIND('+') THEN
              BaseCharge := BaseCharge + UPSAccessorialCharge.Fee;
          END;
          UPSAccessorialCharge.SETRANGE("From Zip Code");
        END;

        IF (CurrentShippingAGentService."World Wide Service" OR
            (CurrentShippingAGentService."UPS Canadian Service" AND
             (CurrentShippingAGentService."Service Indicator" <> '11'))) AND EAS
        THEN BEGIN
          UPSAccessorialCharge.RESET;
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::EAS);

          IF ZIPCode <> '' THEN BEGIN
            UPSAccessorialCharge.SETCURRENTKEY(Type,"Country Code","From Zip Code","To Zip Code");
            UPSAccessorialCharge.SETRANGE("Country Code",CountryCode);
            UPSAccessorialCharge.SETFILTER("From Zip Code",'<=%1',ZIPCode);
            UPSAccessorialCharge.SETFILTER("To Zip Code",'>=%1',ZIPCode);
          END ELSE BEGIN
            UPSAccessorialCharge.SETCURRENTKEY(Type,"Country Code","City Name");
            UPSAccessorialCharge.SETRANGE("Country Code",CountryCode);
            UPSAccessorialCharge.SETRANGE("City Name",UPPERCASE(CityName));
          END;

          IF UPSAccessorialCharge.FIND('+') THEN BEGIN
            TempCharge := CalculationWeight * UPSAccessorialCharge.Fee;
            IF TempCharge < UPSAccessorialCharge."Minimum Charge" THEN
              TempCharge := UPSAccessorialCharge."Minimum Charge";
            BaseCharge := BaseCharge + TempCharge;
          END ELSE
            EAS := FALSE;

          UPSAccessorialCharge.RESET;
        END;

        IF "Call Tag Type" <> "Call Tag Type"::None THEN BEGIN
          CASE "Call Tag Type" OF
            "Call Tag Type"::"Print Return Label Only":
              IF NOT ShippingAgentAccount."UPS Prints Return Label" THEN
                UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::PRL)
              ELSE
                UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::PMRL);
            "Call Tag Type"::"1 attempt":
              UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::CT1);
            "Call Tag Type"::"3 attempt":
              UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::CT3);
            "Call Tag Type"::"Electronic Return Label":
              UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::ERL);
            ELSE
              UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::CT);
          END;
          IF UPSAccessorialCharge.FIND('+') THEN
            BaseCharge := BaseCharge + UPSAccessorialCharge.Fee;
        END;

        IF COD THEN BEGIN
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::COD);
          IF UPSAccessorialCharge.FIND('+') THEN
            AccessorialChargeAmount := AccessorialChargeAmount + UPSAccessorialCharge.Fee;
        END;

        IF (("Delivery Confirmation Type" = "Delivery Confirmation Type"::"Name Date") AND
            NOT "World Wide Service" AND
            NOT (CountryCode IN ['CA','PR'])) OR
           ("Delivery Confirmation Type" = "Delivery Confirmation Type"::"Signature Date") OR
           ("Delivery Confirmation Type" = "Delivery Confirmation Type"::"Adult Signature")
        THEN BEGIN
          CASE "Delivery Confirmation Type" OF
            "Delivery Confirmation Type"::"Signature Date":
              UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::DCRSR);
            "Delivery Confirmation Type"::"Adult Signature":
               UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::DCRASR);
            ELSE
              UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::DCR);
          END;
          IF UPSAccessorialCharge.FIND('+') THEN
            AccessorialChargeAmount := AccessorialChargeAmount + UPSAccessorialCharge.Fee;
        END;

        InsuranceCharge := 0;
        IF InsuredValue > 100 THEN BEGIN
          InsuranceCharge := 0;
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::INS);
          IF UPSAccessorialCharge.FIND('+') THEN BEGIN
            IF UPSAccessorialCharge."Per Unit Count" > 0 THEN
              InsuranceCharge :=
                (ROUND((InsuredValue/UPSAccessorialCharge."Per Unit Count"),1,'>') * UPSAccessorialCharge.Fee);
            IF InsuranceCharge < UPSAccessorialCharge."Minimum Charge" THEN
                InsuranceCharge := UPSAccessorialCharge."Minimum Charge";
          END;
          AccessorialChargeAmount := AccessorialChargeAmount + InsuranceCharge;
        END;

        IF "Proof of Delivery" THEN BEGIN
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::PD);
          IF UPSAccessorialCharge.FIND('+') THEN
            AccessorialChargeAmount := AccessorialChargeAmount + UPSAccessorialCharge.Fee;
        END;

        IF "Saturday Delivery" OR "Saturday Pickup" THEN BEGIN
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::SC);
          IF UPSAccessorialCharge.FIND('+') THEN
            BaseCharge := BaseCharge + UPSAccessorialCharge.Fee;
        END;

        IF "Ship Notification" THEN BEGIN
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::SN);
          IF UPSAccessorialCharge.FIND('+') THEN
            AccessorialChargeAmount := AccessorialChargeAmount + UPSAccessorialCharge.Fee;
        END;

        IF "Verbal Confirm. of Delivery" THEN BEGIN
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::VCD);
          IF UPSAccessorialCharge.FIND('+') THEN
            AccessorialChargeAmount := AccessorialChargeAmount + UPSAccessorialCharge.Fee;
        END;

        IF "Large Package" THEN BEGIN
          IF CurrentShippingAGentService."World Wide Service" THEN
             UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::LAP)
          ELSE BEGIN
            IF ResidentialDelivery THEN BEGIN
              UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::UPS);
              UPSAccessorialCharge.SETRANGE("From Zip Code",'LPR');
            END ELSE
              UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::LPS)
          END;

          IF UPSAccessorialCharge.FIND('-') THEN
            BaseCharge := BaseCharge + UPSAccessorialCharge.Fee;
        END;

        IF (CountryCode = 'CA') AND ResidentialDelivery THEN BEGIN
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::CARES);
          IF UPSAccessorialCharge.FIND('-') THEN
            BaseCharge := BaseCharge + UPSAccessorialCharge.Fee;
        END;

        IF (CountryCode IN ['US','PR','']) AND
           ResidentialDelivery
        THEN BEGIN
          IF ShipToState = 'HI' THEN BEGIN
            UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::UPS);
            UPSAccessorialCharge.SETRANGE("From Zip Code",'RESHI');
          END ELSE IF ShipToState = 'AK' THEN BEGIN
            UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::UPS);
            UPSAccessorialCharge.SETRANGE("From Zip Code",'RESAK');
          END ELSE IF CurrentShippingAGentService."Transport Method Type" =
             CurrentShippingAGentService."Transport Method Type"::Air
          THEN BEGIN
            UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::UPS);
            UPSAccessorialCharge.SETRANGE("From Zip Code",'RESAIR');
          END ELSE BEGIN
              UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::UPS);
              UPSAccessorialCharge.SETRANGE("From Zip Code",'RESGND');
          END;
          IF UPSAccessorialCharge.FIND('+') THEN
            BaseCharge := BaseCharge + UPSAccessorialCharge.Fee;
        END;

        IF "Dry Ice" AND NOT ("Dangerous Goods") THEN BEGIN
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::UPS);
          UPSAccessorialCharge.SETRANGE("From Zip Code",'ICE');
          IF UPSAccessorialCharge.FIND('-') THEN
            BaseCharge := BaseCharge + UPSAccessorialCharge.Fee;
        END;

        IF "Dangerous Goods" THEN BEGIN
          IF CurrentShippingAGentService."Transport Method Type" =
            CurrentShippingAGentService."Transport Method Type"::Air
          THEN BEGIN
            IF IsHazMatAccessible(CurrentUPSOptionPage) THEN
              UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::HAZA)
            ELSE BEGIN
              UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::UPS);
              UPSAccessorialCharge.SETRANGE("From Zip Code",'HAZAI')
            END;
          END ELSE
            UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::HAZG);
          UPSAccessorialCharge.SETRANGE("From Zip Code",'');
          IF UPSAccessorialCharge.FIND('+') THEN
            AccessorialChargeAmount := AccessorialChargeAmount + UPSAccessorialCharge.Fee;
        END;

        IF "UPS Carbon Neutral" THEN BEGIN
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::UPS);
          IF (CurrentShippingAGentService."World Wide Service") OR
             (CurrentShippingAGentService."UPS Canadian Service") OR
             (CurrentShippingAGentService."UPS Puerto Rico Service")
          THEN
            IF CurrentShippingAGentService."Transport Method Type" =
               CurrentShippingAGentService."Transport Method Type"::Air
            THEN
              UPSAccessorialCharge.SETRANGE("From Zip Code",'CNSIA')
            ELSE
              UPSAccessorialCharge.SETRANGE("From Zip Code",'CNSIG')
          ELSE
            IF CurrentShippingAGentService."Transport Method Type" =
               CurrentShippingAGentService."Transport Method Type"::Air
            THEN
              UPSAccessorialCharge.SETRANGE("From Zip Code",'CNSDA')
            ELSE
              UPSAccessorialCharge.SETRANGE("From Zip Code",'CNSDG');
          IF UPSAccessorialCharge.FIND('-') THEN
            AccessorialChargeAmount := AccessorialChargeAmount + UPSAccessorialCharge.Fee;
        END;

        IF ZIPCode = 'LPMBW' THEN BEGIN
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::UPS);
          UPSAccessorialCharge.SETRANGE("From Zip Code",ZIPCode);
          IF UPSAccessorialCharge.FIND('-') THEN
            AccessorialChargeAmount := UPSAccessorialCharge.Fee;
        END;
      END;
    END;

    PROCEDURE PrintPackageLabel@24(VAR CurrentPackage@1000000000 : Record 14000701);
    VAR
      UPSWSTransaction@1240020000 : Codeunit 14000766;
    BEGIN
      CurrentPackage.TESTFIELD(Closed);
      IF CurrentPackage."Manual Shipment" THEN
        EXIT;

        GetShippingSetup;
        IF (ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::"UPSlink/UPS Web Service") AND
           (CurrentPackage."Service Indicator" IN ['92','93','94','95','GFP']) THEN BEGIN
          UPSWSTransaction.PrintPackageLabel(CurrentPackage,TRUE);
          EXIT;
        END;

      DirectPrintLabel(CurrentPackage);
    END;

    PROCEDURE GetSurcharge@9(CurrentShippingAgentService@1240030002 : Record 14000708;ShippingCharge@1240030003 : Decimal) ChargeAmount@1240030000 : Decimal;
    VAR
      UPSlinkFuelSurcharge@1240020000 : Record 14050022;
    BEGIN
      GetUPSlinkSetup;
      IF (CurrentShippingAgentService."Service Indicator" = '03') OR
        (CurrentShippingAgentService."Service Indicator" = '11')
      THEN BEGIN
        CASE UPSlinkSetup."Surcharge Type" OF
          UPSlinkSetup."Surcharge Type"::Amount:
            ChargeAmount := UPSlinkSetup."Ground Fuel Surcharge";
          UPSlinkSetup."Surcharge Type"::Percent:
            ChargeAmount := ROUND(ShippingCharge * UPSlinkSetup."Ground Fuel Surcharge" / 100,0.01);
        END;
      END ELSE BEGIN
        CASE UPSlinkSetup."Surcharge Type" OF
          UPSlinkSetup."Surcharge Type"::Amount:
            ChargeAmount := UPSlinkSetup."Air Fuel Surcharge";
          UPSlinkSetup."Surcharge Type"::Percent:
            ChargeAmount := ROUND(ShippingCharge * UPSlinkSetup."Air Fuel Surcharge" / 100,0.01);
        END;
      END;
    END;

    PROCEDURE GetFuelSurcharge@1240020009(CurrentShippingAgentService@1240030002 : Record 14000708;ShipFromCountry@1240020001 : Code[10];ShipFromState@1240020003 : Text;ShipToCountry@1240020004 : Code[10];ShippingCharge@1240020002 : Decimal) ChargeAmount@1240030000 : Decimal;
    VAR
      UPSlinkFuelSurcharge@1240020000 : Record 14050022;
    BEGIN
      GetUPSlinkSetup;
      UPSlinkMgt.GetUPSFuelSurchargeData(FALSE);

      IF UPPERCASE(ShipFromState) = 'HI' THEN
        UPSlinkFuelSurcharge.SETFILTER("Export Country",'USHI')
      ELSE IF UPPERCASE(ShipFromState) = 'AK' THEN
        UPSlinkFuelSurcharge.SETFILTER("Export Country",'USAK')
      ELSE
        UPSlinkFuelSurcharge.SETFILTER("Export Country",'US48');
      UPSlinkFuelSurcharge.SETRANGE("Import Country",ShipToCountry);
      UPSlinkFuelSurcharge.SETRANGE("Service Indicator",CurrentShippingAgentService."Service Indicator");

      IF UPSlinkFuelSurcharge.FIND('-') THEN BEGIN
        ChargeAmount := ROUND(ShippingCharge * UPSlinkFuelSurcharge."Surcharge Percent");
      END;
    END;

    PROCEDURE GetPeakSurcharge@1240020008(VAR CurrentPackage@1240020000 : Record 14000701;UPSOptionPage@1240020001 : Record 14000761;"Measurement Unit"@1240020002 : Text[1]);
    VAR
      UPSlinkSurchargeDateRange@1240020003 : Record 14050021;
    BEGIN
      WITH CurrentPackage DO BEGIN
        UPSlinkSurchargeDateRange.RESET;
        UPSlinkSurchargeDateRange.SETRANGE(Type,UPSlinkSurchargeDateRange.Type::DateRange);
        IF "World Wide Service" OR "UPS Canadian Service" THEN
          UPSlinkSurchargeDateRange.SETRANGE("Origin Country Code",'US')
        ELSE BEGIN
          IF UPPERCASE(PackingStation."Ship-from State") IN ['AK','HI'] THEN
            UPSlinkSurchargeDateRange.SETRANGE("Origin Country Code",'US50')
          ELSE
            UPSlinkSurchargeDateRange.SETRANGE("Origin Country Code",'US48');
        END;
        IF GetUPSCountryCode("Ship-to Country Code") IN ['','US'] THEN BEGIN
          IF UPPERCASE("Ship-to State") IN ['AK','HI'] THEN
            UPSlinkSurchargeDateRange.SETRANGE("Destination Country Code",'US50')
          ELSE
            UPSlinkSurchargeDateRange.SETRANGE("Destination Country Code",'US48');
        END ELSE
          UPSlinkSurchargeDateRange.SETRANGE("Destination Country Code",
            GetUPSCountryCode("Ship-to Country Code"));
        UPSlinkSurchargeDateRange.SETRANGE("Service Code Indicator","Service Indicator");
        IF "Packing Date" = 0D  THEN
          UPSlinkSurchargeDateRange.SETFILTER("Start Date Range",'<=%1',WORKDATE)
        ELSE
          UPSlinkSurchargeDateRange.SETFILTER("Start Date Range",'<=%1',"Packing Date");
        IF "Packing Date" = 0D THEN
          UPSlinkSurchargeDateRange.SETFILTER("End Date Range",'>=%1',WORKDATE)
        ELSE
          UPSlinkSurchargeDateRange.SETFILTER("End Date Range",'>=%1',"Packing Date");

        IF UPSlinkSurchargeDateRange.FIND('-') THEN BEGIN
          REPEAT
            UPSlinkSurchargeDateRange.GetSurchargeRate(UPSlinkSurchargeDateRange,
              CurrentPackage,UPSOptionPage,"Measurement Unit");
          UNTIL UPSlinkSurchargeDateRange.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE FixZIPCode@45(ZIPCodeText@1000000000 : Text[30]) : Text[9];
    BEGIN
      EXIT(COPYSTR(DELCHR(ZIPCodeText,'=',' -'),1,9));
    END;

    LOCAL PROCEDURE FixState@21(StateText@1000000000 : Text[30]) : Text[2];
    BEGIN
      EXIT(COPYSTR(LeftString(StateText),1,2));
    END;

    LOCAL PROCEDURE DirectPrintLabel@37(VAR CurrentPackage@1000000000 : Record 14000701);
    VAR
      UPSOptionPage@1000000002 : Record 14000761;
      PackageReturn@1240020000 : Record 14000701;
    BEGIN
      CurrentPackage.TESTFIELD(Closed);

      IF CurrentPackage."Manual Shipment" THEN
        EXIT;

      GetShippingAgentAccount(CurrentPackage."Shipping Agent Account No.");
      IF CurrentPackage."Multi Document Package" AND (CurrentPackage."Original Package No." <> '') THEN
        UPSOptionPage.GET(UPSOptionPage.Type::Package,CurrentPackage."Original Package No.",0,0)
      ELSE
        UPSOptionPage.GET(UPSOptionPage.Type::Package,CurrentPackage."No.",0,0);

      CASE UPSOptionPage."Call Tag Type" OF
        UPSOptionPage."Call Tag Type"::None:
          DirectPrintLabelDetails(CurrentPackage,UPSOptionPage,FALSE);
        UPSOptionPage."Call Tag Type"::Standard:
          ERROR(
            Text010,
            UPSOptionPage.FIELDCAPTION("Call Tag Type"),UPSOptionPage."Call Tag Type");
        UPSOptionPage."Call Tag Type"::"1 attempt",
        UPSOptionPage."Call Tag Type"::"3 attempt",
        UPSOptionPage."Call Tag Type"::"Electronic Return Label":
          MESSAGE(
            Text018,
            UPSOptionPage."Call Tag Type");
        UPSOptionPage."Call Tag Type"::"Print Return Label Only",
        UPSOptionPage."Call Tag Type"::"IC PRL",
        UPSOptionPage."Call Tag Type"::"Exchange Return":
          IF NOT ShippingAgentAccount."UPS Prints Return Label" THEN
            DirectPrintLabelDetails(CurrentPackage,UPSOptionPage,TRUE)
          ELSE
            MESSAGE(
              Text018,
              UPSOptionPage."Call Tag Type");
        UPSOptionPage."Call Tag Type"::"Exchange Outbound":
          IF NOT ShippingAgentAccount."UPS Prints Return Label" THEN BEGIN
            DirectPrintLabelDetails(CurrentPackage,UPSOptionPage,FALSE);
          END ELSE
            MESSAGE(
              Text018,
              UPSOptionPage."Call Tag Type");
      END;

      IF UPSOptionPage."Ship and Return Label" THEN BEGIN
        CLEAR(PackageReturn);
        IF UPSOptionPage."Ship and Return Label Pkg No." <> '' THEN
          IF PackageReturn.GET(UPSOptionPage."Ship and Return Label Pkg No.") THEN
            PrintPackageLabel(PackageReturn);
      END;
    END;

    PROCEDURE RePrintPostedPackageLabel@39(VAR CurrentPostedPackage@1000000000 : Record 14000704);
    VAR
      UPSOptionPage@1000000001 : Record 14000761;
      UPSPostedOptionPage@1000000002 : Record 14000762;
      PostedPackage@1000000003 : Record 14000704;
      Package@1000000004 : Record 14000701;
      UPSWSTransaction@1240020000 : Codeunit 14000766;
    BEGIN
      CurrentPostedPackage.TESTFIELD(Closed);

      IF CurrentPostedPackage."Manual Shipment" THEN
        EXIT;

      GetShippingSetup;
      IF (ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::"UPSlink/UPS Web Service") AND
         (CurrentPostedPackage."Service Indicator" IN ['92','93','94','95','GFP']) THEN BEGIN
        UPSWSTransaction.RePrintPostedPackageLabel(CurrentPostedPackage);
        EXIT;
      END;

      IF CurrentPostedPackage."Original Package No." <> '' THEN
        UPSPostedOptionPage.GET(CurrentPostedPackage."Original Package No.")
      ELSE
        UPSPostedOptionPage.GET(CurrentPostedPackage."No.");
      GetShippingAgentAccount(CurrentPostedPackage."Shipping Agent Account No.");

      IF CurrentPostedPackage."Total Packages" > 1 THEN BEGIN
        CurrentPostedPackage.TESTFIELD("First Package No.");
        PostedPackage.GET(CurrentPostedPackage."First Package No.");
        PostedPackage.RESET;
        PostedPackage.SETCURRENTKEY("First Package No.");
        PostedPackage.SETRANGE("First Package No.",CurrentPostedPackage."No.");
        PostedPackage.CALCSUMS("Calculation Weight (LBS)");
      END;

      // Transfer to temporary record for printing
      Package.TRANSFERFIELDS(CurrentPostedPackage);
      UPSOptionPage.TRANSFERFIELDS(UPSPostedOptionPage);

      CASE UPSOptionPage."Call Tag Type" OF
        UPSOptionPage."Call Tag Type"::None:
          DirectPrintLabelDetails(Package,UPSOptionPage,FALSE);
        UPSOptionPage."Call Tag Type"::Standard:
          BEGIN
            DirectPrintLabelDetails(Package,UPSOptionPage,FALSE);
            DirectPrintLabelDetails(Package,UPSOptionPage,TRUE);
          END;
        UPSOptionPage."Call Tag Type"::"1 attempt",
        UPSOptionPage."Call Tag Type"::"3 attempt":
          MESSAGE(
            Text018,
            UPSOptionPage."Call Tag Type");
        UPSOptionPage."Call Tag Type"::"Print Return Label Only":
          IF NOT ShippingAgentAccount."UPS Prints Return Label" THEN
            DirectPrintLabelDetails(Package,UPSOptionPage,TRUE)
          ELSE
            MESSAGE(
              Text018,
              UPSOptionPage."Call Tag Type");
      END;
    END;

    LOCAL PROCEDURE DirectPrintLabelDetails@3(CurrentPackage@1000000000 : Record 14000701;CurrentUPSOptionPage@1000000001 : Record 14000761;CallTagLabel@1000000039 : Boolean);
    VAR
      Country@1000000002 : Record 9;
      Country2@1240030016 : Record 9;
      CompanyInfo@1000000003 : Record 79;
      ManifestHeader@1240030011 : Record 14000712;
      UPSlinkMgt@1240030012 : Codeunit 14050002;
      FromLine@1000000004 : ARRAY [15] OF Text[60];
      ToLine@1000000005 : ARRAY [15] OF Text[60];
      AddressBlock@1000000006 : ARRAY [15] OF Text[100];
      ZIPBarCode@1000000007 : Text[100];
      RoutingCode@1000000008 : Code[15];
      MaxiCode@1000000009 : Text[250];
      BarCodeReadable@1000000011 : Text[100];
      AdditionalRouting@1000000013 : ARRAY [15] OF Text[100];
      InternationalText@1240030009 : ARRAY [15] OF Text[30];
      DimWeight@1000000014 : Decimal;
      ClassCode@1000000015 : Text[3];
      ZIPCode2@1000000019 : Text[20];
      Plus4@1000000020 : Text[4];
      JulDayShip@1000000021 : Integer;
      EOT@1000000022 : Char;
      GS@1000000023 : Char;
      RS@1000000024 : Char;
      tEOT@1000000027 : Text[3];
      tGS@1000000028 : Text[3];
      tRS@1000000029 : Text[3];
      TrackingNo@1000000032 : Text[30];
      tJulDayShip@1000000033 : Text[10];
      ShipmentID@1000000036 : Code[20];
      i@1000000038 : Integer;
      ShipToCity@1000000040 : Text[30];
      ShipToState@1000000041 : Text[30];
      ShipToZipCode@1240030014 : Text[30];
      ShipToPhoneNo@1240030015 : Text[30];
      ItemLabelInfo@1240030000 : ARRAY [10,8] OF Text[50];
      ActualWeight@1240030001 : Integer;
      Packageweight@1240030002 : Text[30];
      ShiptoName@1240030003 : Text[35];
      ShiptoAddress@1240030004 : Text[35];
      ShiptoAddress2@1240030005 : Text[35];
      DeliverToDepartment@1240030006 : Text[35];
      ShiptoContact@1240030007 : Text[35];
      ShipDate@1240030013 : Date;
      ShipFromCountryText@1240030017 : Text[30];
      ShipToCountryCode@1240030018 : Code[10];
      ShipToCountryText@1240030019 : Text[25];
      ShipToCountryISO2@1240030020 : Code[10];
      ShipToCountryISO3@1240030021 : Code[10];
      DryIceWeightKGS@1240030022 : Decimal;
      ShipFromState@1240030023 : Code[10];
      LabelFileName@1240030010 : Text[250];
      TempText@1240030024 : Text[30];
      LabelPrinterType@1240030025 : ',Eltron Orion,Zebra';
    BEGIN
      WITH CurrentPackage DO BEGIN
        GetShippingSetup;
        GetUPSlinkSetup;
        GetPackingStation;
        CarrierPackingStation.GetPackingStation(PackingStation);

        GetShippingAgent("Shipping Agent Code");
        TESTFIELD("Shipping Agent Account No.");

        GetShippingAgentAccount("Shipping Agent Account No.");
        GetShippingAgentService("Shipping Agent Code","Shipping Agent Service","World Wide Service");

        JulDayShip := "Packing Date" - DMY2DATE(1,1,DATE2DMY("Packing Date",3)) + 1;
        tJulDayShip := STRSUBSTNO('%1',JulDayShip);

        IF STRLEN(tJulDayShip) = 1 THEN
          tJulDayShip := '00' + tJulDayShip
        ELSE IF STRLEN(tJulDayShip) = 2 THEN
          tJulDayShip := '0' + tJulDayShip;

        IF UPSlinkSetup."UPS Label Cert. Submission" THEN BEGIN
          IF "Source ID" <> '' THEN
            ShipmentID := "Source ID"
          ELSE
            ShipmentID := "No.";
        END ELSE
          ShipmentID := '';  // Optional field UPS says to leave empty for now

        IF CallTagLabel THEN BEGIN
          IF CurrentUPSOptionPage."Alternate Call Tag Return" THEN BEGIN
            ShipToCity := CurrentUPSOptionPage."Return City";
            ShipToState := CurrentUPSOptionPage."Return State";
            ShiptoName := CurrentUPSOptionPage."Return Company Name";
            DeliverToDepartment := '';

            ShiptoAddress := CurrentUPSOptionPage."Return Address";
            ShiptoAddress2 := CurrentUPSOptionPage."Return Address 2";
            ShiptoContact := CurrentUPSOptionPage."Return Contact";
            ShipToPhoneNo := CurrentUPSOptionPage."Return Phone No.";
            ShipToZipCode := CurrentUPSOptionPage."Return ZIP Code";
          END ELSE BEGIN
            ShipToCity := PackingStation."Ship-from City";
            ShipToState := PackingStation."Ship-from State";
            ShiptoName := COPYSTR(PackingStation."Ship-from Company",1,MAXSTRLEN(ShiptoName));
            DeliverToDepartment := '';

            ShiptoAddress := PackingStation."Ship-from Address";
            ShiptoAddress2 := PackingStation."Ship-from Address2";
            ShiptoContact := PackingStation."Ship-from Contact";
            ShipToPhoneNo := PackingStation."Ship-from Phone No.";
            ShipToZipCode := PackingStation."Ship-from ZIP Code";
          END;
        END ELSE BEGIN
          ShipToCity := "Ship-to City";
          ShipToState := "Ship-to State";

          ShiptoName :=  "Ship-to Name";
          DeliverToDepartment := CurrentUPSOptionPage."Deliver-to Department";
          ShiptoAddress := "Ship-to Address";
          ShiptoAddress2 := "Ship-to Address 2";

          IF CurrentUPSOptionPage."Deliver-to Attn Name" <> '' THEN
            ShiptoContact := CurrentUPSOptionPage."Deliver-to Attn Name"
          ELSE
            ShiptoContact := "Ship-to Contact";

          IF CurrentUPSOptionPage."Deliver-to Attn Phone" <> '' THEN
            ShipToPhoneNo := CurrentUPSOptionPage."Deliver-to Attn Phone"
          ELSE
            ShipToPhoneNo := "Ship-to Phone No.";

          ShipToCountryCode := "Ship-to Country Code";
          ShipToZipCode := "Ship-to ZIP Code";
        END;

        IF ShipToCountryCode = '' THEN BEGIN
          ShipToCountryText := 'UNITED STATES';
          ShipToCountryISO3 := '840';
          ShipToCountryISO2 := 'US';
        END ELSE BEGIN
          Country.GET(ShipToCountryCode);
          Country.TESTFIELD(UPS);
          Country.TESTFIELD("ISO 3 digit Country Code");
          Country.TESTFIELD("ISO 2 char Country Code");
          ShipToCountryText := COPYSTR(Country.Name,1,25);
          ShipToCountryISO3 := Country."ISO 3 digit Country Code";
          ShipToCountryISO2 := Country."ISO 2 char Country Code";
        END;

        ShipToZipCode := FixZipCodePrint(ShipToZipCode,ShipToCountryISO2);

        IF NOT "World Wide Service" AND NOT "UPS Canadian Service" THEN
          ZIPCode2 := COPYSTR(ShipToZipCode,1,5)
        ELSE
          ZIPCode2 := ShipToZipCode;

        IF ShipToCountryISO2 IN ['AS','GU','MH','FM','MP','PW','PR','US','VI',''] THEN
          CASE STRLEN(ShipToZipCode) OF
            9:
              Plus4 := COPYSTR(ShipToZipCode,6,4);
            10:
              Plus4 := COPYSTR(ShipToZipCode,7,4);
            ELSE
              Plus4 := '';
          END;

        TrackingNo := UPSTrackingNo("External Tracking No.");

        RoutingCode := GetUPSRoutingCode(ShipToCountryISO2,ZIPCode2);
        ClassCode := ServiceConvertToNo(GetServiceIndicator(CurrentPackage,CurrentUPSOptionPage));

        CLEAR(FromLine);
        i := 1;
        ShipFromCountryText := 'UNITED STATES';
        CompanyInfo.GET;

        CASE TRUE OF
          "Blind Shipment" OR "Double Blind Shipment":
            BEGIN
              SetArrayField(FromLine,i,FALSE,CleanString("Blind Ship-from Contact"));
              SetArrayField(FromLine,i,TRUE,"Blind Ship-from Phone No.");
              SetArrayField(FromLine,i,FALSE,CleanString("Blind Ship-from Name"));
              SetArrayField(FromLine,i,FALSE,CleanString("Blind Ship-from Address 2"));
              SetArrayField(FromLine,i,TRUE,CleanString("Blind Ship-from Address"));
              SetArrayField(
                FromLine,i,TRUE,
                CreateZipString(
                  "Blind Ship-from City","Blind Ship-from State",
                  FixZipCodePrint("Blind Ship-from ZIP Code",''),''));
              ShipFromState := "Blind Ship-from State";
              IF "Blind Ship-from Country Code" = '' THEN BEGIN
                ShipFromCountryText := 'UNITED STATES';
                Country."ISO 2 char Country Code" := 'US';
              END ELSE BEGIN
                Country.GET("Blind Ship-from Country Code");
                Country.TESTFIELD(UPS);
                Country.TESTFIELD("ISO 3 digit Country Code");
                Country.TESTFIELD("ISO 2 char Country Code");
                ShipFromCountryText := Country.Name;
              END;
            END;
          COD AND
          NOT "World Wide Service" AND NOT "UPS Canadian Service" AND
          (CompanyInfo."COD Address 1" <> ''):
            BEGIN
              PackingStation.TESTFIELD("Ship-from Phone No.");
              SetArrayField(FromLine,i,FALSE,CleanString(PackingStation."Ship-from Contact"));
              SetArrayField(FromLine,i,TRUE,CleanString(PackingStation."Ship-from Phone No."));
              SetArrayField(FromLine,i,FALSE,CleanString(CompanyInfo.Name));
              SetArrayField(FromLine,i,FALSE,CleanString(CompanyInfo."COD Address 2"));
              SetArrayField(FromLine,i,TRUE,CleanString(CompanyInfo."COD Address 1"));
              SetArrayField(
                FromLine,i,TRUE,
                CreateZipString(
                  CompanyInfo."COD City",CompanyInfo."COD State",
                   FixZipCodePrint(CompanyInfo."COD Zip Code",''),''));
              ShipFromState := CompanyInfo."COD State";
            END;
          CallTagLabel:
            BEGIN
              SetArrayField(FromLine,i,FALSE,CleanString("Ship-to Contact"));
              SetArrayField(FromLine,i,TRUE,CleanString("Ship-to Phone No."));
              SetArrayField(FromLine,i,TRUE,CleanString("Ship-to Name"));
              SetArrayField(FromLine,i,FALSE,CleanString("Ship-to Address 2"));
              SetArrayField(FromLine,i,TRUE,CleanString("Ship-to Address"));
              IF "Ship-to Country Code" = '' THEN BEGIN
                ShipFromCountryText := 'UNITED STATES';
                Country."ISO 2 char Country Code" := 'US';
              END ELSE BEGIN
                Country.GET("Ship-to Country Code");
                Country.TESTFIELD(UPS);
                Country.TESTFIELD("ISO 3 digit Country Code");
                Country.TESTFIELD("ISO 2 char Country Code");
                ShipFromCountryText := Country.Name;
              END;

              SetArrayField(
                FromLine,i,TRUE,
                CreateZipString(
                  "Ship-to City","Ship-to State",
                  FixZipCodePrint(
                    "Ship-to ZIP Code",Country."ISO 2 char Country Code"),
                    Country."ISO 2 char Country Code"));
              ShipFromState := "Ship-to State";
            END;
          ELSE
            BEGIN
              PackingStation.TESTFIELD("Ship-from Phone No.");
              SetArrayField(FromLine,i,FALSE,CleanString(PackingStation."Ship-from Contact"));
              SetArrayField(FromLine,i,TRUE,CleanString(PackingStation."Ship-from Phone No."));
              SetArrayField(FromLine,i,FALSE,CleanStringLess(PackingStation."Ship-from Company"));
              SetArrayField(FromLine,i,FALSE,CleanString(PackingStation."Ship-from Address2"));
              SetArrayField(FromLine,i,TRUE,CleanString(PackingStation."Ship-from Address"));
              SetArrayField(
                FromLine,i,TRUE,
                CreateZipString(
                  PackingStation."Ship-from City",PackingStation."Ship-from State",
                  FixZipCodePrint(PackingStation."Ship-from ZIP Code",''),''));
              ShipFromState := PackingStation."Ship-from State";
            END;
        END;
        IF "World Wide Service" OR "UPS Canadian Service" OR "UPS Puerto Rico Service" THEN
          SetArrayField(FromLine,i,TRUE,CleanString(ShipFromCountryText));

        CLEAR(ToLine);
        ActualWeight := 0;
        i := 1;

        IF (NOT "World Wide Service") AND
           (NOT "UPS Canadian Service") AND
           (NOT "UPS Puerto Rico Service")
        THEN BEGIN
          SetArrayField(ToLine,i,TRUE,CleanString(ShiptoContact));
          SetArrayField(ToLine,i,TRUE,CleanString(ShipToPhoneNo));
          SetArrayField(ToLine,i,TRUE,CleanString(ShiptoName));

          SetArrayField(ToLine,i,TRUE,CleanString(DeliverToDepartment));
          SetArrayField(ToLine,i,TRUE,CleanString(ShiptoAddress2));
          SetArrayField(ToLine,i,TRUE,CleanString(ShiptoAddress));

          i := 7;
          SetArrayField(
            ToLine,i,TRUE,
            CreateZipString(ShipToCity,ShipToState,ShipToZipCode,''));

          CLEAR(AddressBlock);
          i := 1;
          IF NOT (CurrentUPSOptionPage."UPS Packaging Type" IN
                  [CurrentUPSOptionPage."UPS Packaging Type"::"UPS Letter",
                   CurrentUPSOptionPage."UPS Packaging Type"::"UPS Express Pak"])
          THEN BEGIN
            IF "Oversize Actual Weight" > 0 THEN
              ActualWeight := ROUND("Oversize Actual Weight",1,'>')
            ELSE
              ActualWeight := ROUND("Calculation Weight (LBS)",1,'>');

            IF (CurrentUPSOptionPage."UPS Packaging Type" =
                CurrentUPSOptionPage."UPS Packaging Type"::"UPS 10kg Box") AND
               (ActualWeight < 24)
            THEN
              SetArrayField(AddressBlock,i,TRUE,'10 KG BOX')
            ELSE
              IF (CurrentUPSOptionPage."UPS Packaging Type" =
                  CurrentUPSOptionPage."UPS Packaging Type"::"UPS 25kg Box") AND
                 (ActualWeight < 57)
              THEN
                SetArrayField(AddressBlock,i,TRUE,'25 KG BOX')
              ELSE
                SetArrayField(AddressBlock,i,TRUE,Integer2Text(ActualWeight) + ' LBS');
          END ELSE BEGIN
            IF (UPSlinkSetup."Rate Version" > '2009') THEN BEGIN
              IF CurrentUPSOptionPage."UPS Packaging Type" =
                 CurrentUPSOptionPage."UPS Packaging Type"::"UPS Letter"
              THEN
                TempText := 'LTR'
              ELSE
                TempText := 'PAK';

              SetArrayField(
                AddressBlock,i,TRUE,
                Decimal2Text(ROUND("Calculation Weight (LBS)",0.1,'>'),1) + ' LBS ' + TempText);
            END ELSE
              IF CurrentUPSOptionPage."UPS Packaging Type" =
                 CurrentUPSOptionPage."UPS Packaging Type"::"UPS Letter"
              THEN
                SetArrayField(AddressBlock,i,TRUE,'LTR' + '   ')
              ELSE BEGIN
                ActualWeight := ROUND("Calculation Weight (LBS)",1,'>');
                SetArrayField(AddressBlock,i,TRUE,Integer2Text(ActualWeight) + ' LBS');
              END;
          END;

          SetArrayField(
            AddressBlock,i,TRUE,Integer2Text("Package No.") + ' OF ' + Integer2Text("Total Packages"));

          IF COD THEN
            SetArrayField(AddressBlock,i,TRUE,'COD')
          ELSE BEGIN
            IF "Use Dim Weight" THEN
              SetArrayField(
                AddressBlock,i,TRUE,'DWT:' + Decimal2Text("Calculation Length",0) + ',' +
                Decimal2Text("Calculation Width",0) + ',' + Decimal2Text("Calculation Height",0));

            IF CurrentUPSOptionPage."Proactive Response" THEN
              SetArrayField(AddressBlock,i,TRUE,'PRO')
            ELSE
              IF CallTagLabel AND
                 (CurrentUPSOptionPage."Call Tag Type" IN
                  [CurrentUPSOptionPage."Call Tag Type"::"Print Return Label Only",
                   CurrentUPSOptionPage."Call Tag Type"::"Exchange Return"])
              THEN
                SetArrayField(AddressBlock,i,TRUE,'RS');

            IF CurrentUPSOptionPage.Refrigeration THEN
              SetArrayField(AddressBlock,i,TRUE,'RFG');

            IF CurrentUPSOptionPage."Large Package" THEN
              SetArrayField(AddressBlock,i,TRUE,'LP');

            IF CurrentUPSOptionPage."Additional Handling Required" THEN
              SetArrayField(AddressBlock,i,TRUE,'AH');
          END;

          ZIPBarCode := '420' + COPYSTR(ShipToZipCode,1,5) + Plus4;

          CLEAR(AdditionalRouting);
          i := 1;
          CASE "Shipping Payment Type" OF
            "Shipping Payment Type"::"Third Party":
              SetArrayField(
                AdditionalRouting,i,TRUE,'BILLING: 3RD PARTY');
            "Shipping Payment Type"::"Freight Collect":
              SetArrayField(AdditionalRouting,i,TRUE,'BILLING: F/C BILL RECEIVER');
            "Shipping Payment Type"::Consignee:
              SetArrayField(AdditionalRouting,i,TRUE,'BILLING: CONSIGNEE');
            ELSE
              SetArrayField(AdditionalRouting,i,TRUE,'BILLING: P/P');
          END;

          IF CurrentUPSOptionPage."Direct Delivery Only" THEN
            SetArrayField(
                AdditionalRouting,i,TRUE,'DIRECT DELIVERY ONLY');

          IF CurrentUPSOptionPage."Dry Ice" THEN BEGIN
            IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::LBS THEN
              DryIceWeightKGS := ShippingSetup.PoundToKilo(CurrentUPSOptionPage."Dry Ice Weight")
            ELSE
              DryIceWeightKGS := CurrentUPSOptionPage."Dry Ice Weight";
            SetArrayField(
              AdditionalRouting,i,TRUE,'UN1845, DRY ICE, CLASS 9, 1 x ' +
              Decimal2Text(DryIceWeightKGS,1) + ' KG');
            IF (CurrentUPSOptionPage."Dry Ice Weight" > 2.3) AND
               NOT CurrentUPSOptionPage."Dry Ice Medical Purpose"
            THEN
              SetArrayField(AdditionalRouting,i,TRUE,'AUDIT REQUIRED')
            ELSE
              SetArrayField(AdditionalRouting,i,TRUE,'NO AUDIT REQUIRED');
          END;

          IF COD THEN
            IF "COD Cashiers Check" THEN
              SetArrayField(
                AdditionalRouting,i,TRUE,'COD CASHIERS CK/MO ONLY $ ' + Decimal2Text("COD Amount",2))
            ELSE
              SetArrayField(AdditionalRouting,i,TRUE,'COD: $ ' + Decimal2Text("COD Amount",2));

          CASE CurrentUPSOptionPage."Delivery Confirmation Type" OF
            CurrentUPSOptionPage."Delivery Confirmation Type"::"Signature Date":
              SetArrayField(AdditionalRouting,i,TRUE,'SIGNATURE REQUIRED');
            CurrentUPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
              SetArrayField(AdditionalRouting,i,TRUE,'ADULT SIGNATURE REQUIRED - MIN 21')
          END;

          IF CurrentUPSOptionPage."Shipper Release" THEN
            SetArrayField(AdditionalRouting,i,TRUE,'ATTENTION UPS DRIVER: SHIPPER RELEASE');

          IF CurrentUPSOptionPage."Call Tag Type" IN
             [CurrentUPSOptionPage."Call Tag Type"::"Print Return Label Only",
              CurrentUPSOptionPage."Call Tag Type"::"Exchange Return"]
          THEN
            IF NOT ShippingAgentAccount."UPS Prints Return Label" THEN
              SetArrayField(AdditionalRouting,i,TRUE,'DESC: ' + UPPERCASE(COPYSTR(Description,1,30)));

          IF CurrentUPSOptionPage."Dangerous Goods" THEN BEGIN
            SetArrayField(
              AdditionalRouting,i,TRUE,
              STRSUBSTNO('%1%2','HAZARDOUS MATERIALS - ',CurrentUPSOptionPage."Haz Mat Eligibility"));
            SetArrayField(
              AdditionalRouting,i,TRUE,'HAZ#: ' + GetHazReferenceNosToPrint(CurrentPackage."No."));
          END;

          IF CurrentUPSOptionPage."UPS Carbon Neutral" THEN
            SetArrayField(AdditionalRouting,i,TRUE,'UPS CARBON NEUTRAL SHIPMENT');

          IF CurrentUPSOptionPage."Call Tag Type" IN
             [CurrentUPSOptionPage."Call Tag Type"::"Print Return Label Only",
              CurrentUPSOptionPage."Call Tag Type"::"Exchange Return"]
          THEN
            SetArrayField(AdditionalRouting,i,TRUE,'RETURN SERVICE');
          IF CurrentUPSOptionPage."Call Tag Type" =
            CurrentUPSOptionPage."Call Tag Type"::"Exchange Outbound"
          THEN
            SetArrayField(AdditionalRouting,i,TRUE,'EXCHANGE-LIKE ITEM ONLY');
          IF NOT Miscellaneous THEN BEGIN
            IF AdditionalRouting[6] = '' THEN BEGIN
              IF UPSlinkSetup."UPS Label Cert. Submission" AND
                 (CurrentUPSOptionPage."Ship. Ref. No. 2" <> '')
                THEN
                  AdditionalRouting[6] :=
                    'PO NUMBER - ' + CurrentUPSOptionPage."Ship. Ref. No. 2"
              ELSE
                IF "Multi Document Package" THEN
                  AdditionalRouting[6] := 'SO #: ' + COPYSTR("Multi Document No.",1,35)
                ELSE
                  AdditionalRouting[6] := 'SO #: ' + "Source ID";
            END;

            IF "External Document No." <> '' THEN
              IF UPSlinkSetup."UPS Label Cert. Submission" THEN
                AdditionalRouting[7] := 'Customer Reference Number - ' + "External Document No."
              ELSE
                AdditionalRouting[7] := 'PO #: ' + "External Document No.";
          END ELSE
            AdditionalRouting[7] := 'SO #: ' + "No.";
        END ELSE BEGIN
          TESTFIELD(Description);
          SetArrayField(ToLine,i,FALSE,CleanString(ShiptoContact));
          SetArrayField(ToLine,i,TRUE,CleanString(ShipToPhoneNo));
          SetArrayField(ToLine,i,TRUE,CleanString(ShiptoName));
          IF (ShiptoContact = '') OR (ShipToPhoneNo = '') AND (ShiptoName = '') THEN
            SetArrayField(ToLine,i,FALSE,CleanString(ShiptoAddress2));
          SetArrayField(ToLine,i,TRUE,CleanString(ShiptoAddress));

          i := 6;
          SetArrayField(
            ToLine,i,TRUE,
            CreateZipString(
              ShipToCity,ShipToState,
              FixZipCodePrint(
                ShipToZipCode,ShipToCountryISO2),ShipToCountryISO2));
          SetArrayField(ToLine,i,TRUE,CleanString(ShipToCountryText));

          CLEAR(AddressBlock);
          i := 1;

          IF NOT (CurrentUPSOptionPage."UPS Packaging Type" IN
                  [CurrentUPSOptionPage."UPS Packaging Type"::"UPS Letter",
                   CurrentUPSOptionPage."UPS Packaging Type"::"UPS Express Pak"])
          THEN BEGIN
            IF "Oversize Actual Weight" > 0 THEN
              IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::KGS THEN
                ActualWeight := ROUND(ShippingSetup.KiloToPound("Oversize Actual Weight"),1,'>')
              ELSE
                ActualWeight := ROUND("Oversize Actual Weight",1,'>')
            ELSE
              ActualWeight := ROUND("Calculation Weight (LBS)",1,'>');

            IF (CurrentUPSOptionPage."UPS Packaging Type" =
                CurrentUPSOptionPage."UPS Packaging Type"::"UPS 10kg Box") AND
               (ActualWeight < 24)
            THEN
              SetArrayField(AddressBlock,i,TRUE,'10 KG BOX')
            ELSE
              IF (CurrentUPSOptionPage."UPS Packaging Type" =
                  CurrentUPSOptionPage."UPS Packaging Type"::"UPS 25kg Box") AND
                 (ActualWeight < 57)
              THEN
                SetArrayField(AddressBlock,i,TRUE,'25 KG BOX')
              ELSE
                SetArrayField(AddressBlock,i,TRUE,Integer2Text(ActualWeight) + ' LBS');
          END ELSE BEGIN
            IF (UPSlinkSetup."Rate Version" > '2009') THEN BEGIN
              IF CurrentUPSOptionPage."UPS Packaging Type" =
                 CurrentUPSOptionPage."UPS Packaging Type"::"UPS Letter"
              THEN
                TempText := 'LTR'
              ELSE
                TempText := 'PAK';

              SetArrayField(
                AddressBlock,i,TRUE,Decimal2Text(ROUND("Calculation Weight (LBS)",0.1,'>'),1) + ' LBS ' +
                TempText);
            END ELSE
              IF CurrentUPSOptionPage."UPS Packaging Type" =
                 CurrentUPSOptionPage."UPS Packaging Type"::"UPS Letter"
              THEN
                SetArrayField(AddressBlock,i,TRUE,'LTR' + '   ')
              ELSE BEGIN
                ActualWeight := ROUND("Calculation Weight (LBS)",1,'>');
                SetArrayField(AddressBlock,i,TRUE,Integer2Text(ActualWeight) + ' LBS');
              END;
          END;

          SetArrayField(
            AddressBlock,i,TRUE,
            Integer2Text("Package No.") + ' OF ' + Integer2Text("Total Packages"));

          IF ("UPS Puerto Rico Service") AND COD THEN
            SetArrayField(AddressBlock,i,TRUE,'COD');

          IF NOT ("UPS Puerto Rico Service") THEN BEGIN
            SetArrayField(AddressBlock,i,TRUE,'SHP#: ' + CurrentUPSOptionPage."Waybill No.");
            IF CurrentUPSOptionPage."UPS Packaging Type" <>
                 CurrentUPSOptionPage."UPS Packaging Type"::"UPS Letter"
            THEN
              SetArrayField(
                AddressBlock,i,TRUE,'SHP WT: ' +
                Decimal2Text(ROUND(CurrentUPSOptionPage."Shipment Total Weight",1,'>'),0) + ' LBS');
          END;

          IF "Use Dim Weight" THEN BEGIN
            IF ShippingAgentAccount."Automatic Dimensional Weight" THEN BEGIN
              DimWeight := "Calculation Weight (LBS)";
            END ELSE BEGIN
              DimWeight := TotalDimWeight;
              IF ("Override Weight" > 0)THEN
                DimWeight := "Override Weight";
            END;
            DimWeight := ROUND(DimWeight,1,'>');
            IF NOT ("UPS Puerto Rico Service") THEN
              SetArrayField(AddressBlock,i,TRUE,'SHP DWT: ' + Decimal2Text(DimWeight,0) + ' LBS')
            ELSE
              SetArrayField(AddressBlock,i,TRUE,'DWT: ' + Decimal2Text(DimWeight,0) + ' LBS');
          END;

          ShipDate := "Packing Date";
          IF ("Manifest No." <> '') AND
             (ManifestHeader.GET("Manifest No."))
          THEN
            ShipDate := ManifestHeader."Pickup Date";

          IF NOT ("UPS Puerto Rico Service") THEN BEGIN
            SetArrayField(
              AddressBlock,i,TRUE,
              'DATE: ' + STRSUBSTNO('%1 ',DATE2DMY(ShipDate,1)) +
              UPPERCASE(COPYSTR(FORMAT(ShipDate,0,'<Month Text>'),1,3) + ' ' +
              FORMAT(ShipDate,0,'<Year4>')));
          END;

          IF CurrentUPSOptionPage."Proactive Response" THEN
            SetArrayField(AddressBlock,i,TRUE,'PRO');

          IF CurrentUPSOptionPage.Refrigeration THEN
            SetArrayField(AddressBlock,i,TRUE,'RFG');

          IF CurrentUPSOptionPage."Large Package" THEN
            SetArrayField(AddressBlock,i,TRUE,'LP');
          IF CurrentUPSOptionPage."Additional Handling Required" THEN
            SetArrayField(AddressBlock,i,TRUE,'AH');

          ZIPBarCode := '421' + ShipToCountryISO3 + FixZIPCode(ShipToZipCode);

          CLEAR(AdditionalRouting);
          i := 1;

          Country2.INIT;
          IF NOT
             (CurrentUPSOptionPage."International Billing" IN
              [CurrentUPSOptionPage."International Billing"::" ",
               CurrentUPSOptionPage."International Billing"::Prepaid])
          THEN
            IF CurrentUPSOptionPage."International Billing" =
               CurrentUPSOptionPage."International Billing"::FreightCollect
            THEN
              Country2.GET(CurrentPackage."Ship-to Country Code")
            ELSE
              IF CurrentUPSOptionPage."Third Party Country Code" = '' THEN
                Country2."ISO 2 char Country Code" := 'US'
              ELSE
                Country2.GET(CurrentUPSOptionPage."Third Party Country Code");

          CASE CurrentUPSOptionPage."International Billing" OF
            CurrentUPSOptionPage."International Billing"::"Third Party":
              SetArrayField(
                AdditionalRouting,i,TRUE,'BILLING: ' + 'P/P T/P ' + "Third Party Ship. Account No." +
                ' ' + Country2."ISO 2 char Country Code");
            CurrentUPSOptionPage."International Billing"::"Free On Board":
              SetArrayField(AdditionalRouting,i,TRUE,'BILLING: ' + 'FOB');
            CurrentUPSOptionPage."International Billing"::FreightCollect:
              BEGIN
                TESTFIELD("Third Party Ship. Account No.");
                SetArrayField(
                  AdditionalRouting,i,TRUE,'BILLING: ' + 'F/C RECEIVER ' +
                  "Third Party Ship. Account No." + ' ' + Country2."ISO 2 char Country Code");
              END;
            CurrentUPSOptionPage."International Billing"::"Cost Freight":
              SetArrayField(AdditionalRouting,i,TRUE,'BILLING: ' + 'C/F');
            CurrentUPSOptionPage."International Billing"::"Delivery Duty Paid":
              IF "Third Party Ship. Account No." <> '' THEN
                SetArrayField(
                  AdditionalRouting,i,TRUE,'BILLING: ' + 'SDV ' + "Third Party Ship. Account No." +
                  ' ' + Country2."ISO 2 char Country Code")
              ELSE
                SetArrayField(AdditionalRouting,i,TRUE,'BILLING: ' + 'SDV');
            CurrentUPSOptionPage."International Billing"::"Shipping Duty Tax":
              IF "Third Party Ship. Account No." <> '' THEN
                SetArrayField(
                  AdditionalRouting,i,TRUE,'BILLING: ' + 'F/D ' + "Third Party Ship. Account No." +
                  ' ' + Country2."ISO 2 char Country Code")
              ELSE
                SetArrayField(AdditionalRouting,i,TRUE,'BILLING: ' + 'F/D');
            ELSE
              SetArrayField(AdditionalRouting,i,TRUE,'BILLING: ' + 'P/P');
          END;

          IF CurrentUPSOptionPage."Direct Delivery Only" THEN
            SetArrayField(
                AdditionalRouting,i,TRUE,'DIRECT DELIVERY ONLY');

          IF CurrentUPSOptionPage."Dry Ice" THEN BEGIN
            IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::LBS THEN
              SetArrayField(
                AdditionalRouting,i,TRUE,'UN1845, DRY ICE, CLASS 9, 1 x ' +
                Decimal2Text(ShippingSetup.PoundToKilo(CurrentUPSOptionPage."Dry Ice Weight"),1) + ' KG')
            ELSE
              SetArrayField(
                AdditionalRouting,i,TRUE,'UN1845, DRY ICE, CLASS 9, 1 x ' +
                Decimal2Text(CurrentUPSOptionPage."Dry Ice Weight",1) + ' KG');
            SetArrayField(AdditionalRouting,i,TRUE,'AUDIT REQUIRED');
          END;

          IF CurrentUPSOptionPage."Call Tag Type" =
            CurrentUPSOptionPage."Call Tag Type"::"Exchange Outbound"
          THEN BEGIN
            SetArrayField(AdditionalRouting,i,TRUE,'EXCHANGE-LIKE ITEM ONLY');
            IF CurrentUPSOptionPage."Shipper Release" THEN
              SetArrayField(AdditionalRouting,i,TRUE,'ATTENTION UPS DRIVER: SHIPPER RELEASE');
          END;

          CASE CurrentUPSOptionPage."Delivery Confirmation Type" OF
            CurrentUPSOptionPage."Delivery Confirmation Type"::"Signature Date":
              SetArrayField(AdditionalRouting,i,TRUE,'SIGNATURE REQUIRED');
            CurrentUPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
              CASE TRUE OF
                "UPS Canadian Service":
                  SetArrayField(AdditionalRouting,i,TRUE,'ADULT SIGNATURE REQUIRED - MIN 19');
                "UPS Puerto Rico Service":
                  SetArrayField(AdditionalRouting,i,TRUE,'ADULT SIGNATURE REQUIRED - MIN 21');
                ELSE
                  SetArrayField(AdditionalRouting,i,TRUE,'ADULT SIGNATURE REQUIRED');
              END;
          END;

          SetArrayField(AdditionalRouting,i,TRUE,'DESC: ' + UPPERCASE(COPYSTR(Description,1,30)));

          IF CurrentUPSOptionPage."Call Tag Type" =
              CurrentUPSOptionPage."Call Tag Type"::"IC PRL"
          THEN
            SetArrayField(AdditionalRouting,i,TRUE,'IMPORT CONTROL-PAYMENT GUARANTEED');

          IF CurrentUPSOptionPage."Dangerous Goods" THEN BEGIN
            IF "Service Indicator" = '11' THEN
              SetArrayField(AdditionalRouting,i,TRUE,'DANGEROUS GOODS ADR ROAD ONLY')
            ELSE
              SetArrayField(AdditionalRouting,i,TRUE,'DANGEROUS GOODS PER IATA DGD (AIR)');
            SetArrayField(
              AdditionalRouting,i,TRUE,'DG#: ' + GetHazReferenceNosToPrint(CurrentPackage."No."));
          END;

          CompanyInfo.GET;
          IF NOT((CurrentUPSOptionPage."Export Declaration" =
                CurrentUPSOptionPage."Export Declaration"::" ") OR
             (CurrentUPSOptionPage."Export Declaration" =
                CurrentUPSOptionPage."Export Declaration"::Included) OR
             (CurrentUPSOptionPage."Export Declaration" =
                CurrentUPSOptionPage."Export Declaration"::"AESDirect Post-Depart"))
          THEN BEGIN
            IF "AES ITN No." <> '' THEN BEGIN
              CompanyInfo.GET;
              SetArrayField(AdditionalRouting,i,TRUE,'EIN: ' + CompanyInfo."Federal ID No.");
              SetArrayField(AdditionalRouting,i,TRUE,'AES: ' + "AES ITN No.");
            END ELSE BEGIN
              IF PackingStation."Export License Type" <> 'C33' THEN BEGIN
                IF CurrentUPSOptionPage."Export Declaration" =
                   CurrentUPSOptionPage."Export Declaration"::"AESDirect Post-Depart"
                THEN
                  SetArrayField(AdditionalRouting,i,TRUE,'AESPOST ' + CompanyInfo."Federal ID No.")
              END;
            END;
          END ELSE
            SetArrayField(AdditionalRouting,i,TRUE,'AES NOEEI ' +
              COPYSTR(PackingStation."Export License No.",1,10));

          IF COD AND "UPS Puerto Rico Service" THEN
            IF "COD Cashiers Check" THEN
              SetArrayField(
                AdditionalRouting,i,TRUE,'COD CASHIERS CK/MO ONLY $ ' + Decimal2Text("COD Amount",2))
            ELSE
              SetArrayField(
                AdditionalRouting,i,TRUE,'COD: $ ' + Decimal2Text("COD Amount",2));

          IF CurrentUPSOptionPage."Call Tag Type" =
             CurrentUPSOptionPage."Call Tag Type"::"Print Return Label Only"
          THEN
            SetArrayField(AdditionalRouting,i,TRUE,'RETURN SERVICE-PAYMENT GUARANTEED');

          IF CurrentUPSOptionPage."UPS Carbon Neutral" THEN
            SetArrayField(AdditionalRouting,i,TRUE,'UPS CARBON NEUTRAL SHIPMENT');

          IF Miscellaneous THEN
            SetArrayField(AdditionalRouting,i,TRUE,'SO #:' + "No.")
          ELSE
            IF UPSlinkSetup."UPS Label Cert. Submission" THEN BEGIN
              IF CurrentUPSOptionPage."Ship. Ref. No. 1" <> '' THEN
                SetArrayField(
                  AdditionalRouting,i,TRUE,
                  'PURCHASE ORDER NUMBER - ' + CurrentUPSOptionPage."Ship. Ref. No. 1")
              ELSE
                SetArrayField(AdditionalRouting,i,TRUE,'PURCHASE ORDER NUMBER - ' + "Source ID");
            END ELSE
              SetArrayField(AdditionalRouting,i,TRUE,'SO #:' + "Source ID");

          IF ("External Document No." <> '') AND
             (AdditionalRouting[7] = '')
          THEN
            SetArrayField(
              AdditionalRouting,i,TRUE,'Customer Reference Number - ' + "External Document No.");

          IF (CurrentUPSOptionPage."Call Tag Type" =
            CurrentUPSOptionPage."Call Tag Type"::"Print Return Label Only") OR
              (CurrentUPSOptionPage."Call Tag Type" =
            CurrentUPSOptionPage."Call Tag Type"::"IC PRL") OR
            ((CurrentUPSOptionPage."Call Tag Type" =
             CurrentUPSOptionPage."Call Tag Type"::"Exchange Return") AND
             CallTagLabel = TRUE)
          THEN BEGIN
            IF (CurrentUPSOptionPage."International Routing" =
                CurrentUPSOptionPage."International Routing"::"Nondutiable Document") OR
               (CurrentUPSOptionPage."UPS Packaging Type" =
                CurrentUPSOptionPage."UPS Packaging Type"::"UPS Letter")
            THEN
              InternationalText[1] := 'DOC-RS'
            ELSE
              CASE CurrentUPSOptionPage."Commercial Invoice" OF
                CurrentUPSOptionPage."Commercial Invoice"::"Navision Report":
                  InternationalText[1] := 'INV-RS';
                CurrentUPSOptionPage."Commercial Invoice"::"Manually Prepared":
                  InternationalText[1] := 'KEY-RS';
                ELSE
                  IF CurrentUPSOptionPage."International Routing" IN
                     [CurrentUPSOptionPage."International Routing"::Dutiable,
                      CurrentUPSOptionPage."International Routing"::" "]
                  THEN BEGIN
                    IF UPSlinkSetup."Manual Commercial Invoice" THEN
                      InternationalText[1] := 'KEY-RS'
                    ELSE
                      InternationalText[1] := 'INV-RS';
                  END ELSE
                    InternationalText[1] := 'RS';
              END;
          END ELSE
            IF (CurrentUPSOptionPage."International Routing" =
                CurrentUPSOptionPage."International Routing"::"Nondutiable Document") OR
               (CurrentUPSOptionPage."UPS Packaging Type" =
                CurrentUPSOptionPage."UPS Packaging Type"::"UPS Letter")
            THEN
              InternationalText[1] := 'EDI-DOC'
            ELSE BEGIN
              CASE CurrentUPSOptionPage."Commercial Invoice" OF
                CurrentUPSOptionPage."Commercial Invoice"::"Navision Report":
                  InternationalText[1] := 'INV';
                CurrentUPSOptionPage."Commercial Invoice"::"Manually Prepared":
                  InternationalText[1] := 'KEY';
                CurrentUPSOptionPage."Commercial Invoice"::"Paperless Invoice":
                  IF CurrentUPSOptionPage."Need Power of Attorney" OR
                     CurrentUPSOptionPage."SED Required" OR
                     CurrentUPSOptionPage."Need Certificate of Origin" OR
                     (CurrentUPSOptionPage."Certificate of Origin" IN
                      [CurrentUPSOptionPage."Certificate of Origin"::"Non-NAFTA Included",
                       CurrentUPSOptionPage."Certificate of Origin"::"NAFTA Included",
                       CurrentUPSOptionPage."Certificate of Origin"::"UPS Prepare"])
                  THEN
                    InternationalText[1] := 'EDI-PULL'
                  ELSE
                    InternationalText[1] := 'EDI';
                ELSE
                  IF CurrentUPSOptionPage."International Routing" IN
                     [CurrentUPSOptionPage."International Routing"::Dutiable,
                      CurrentUPSOptionPage."International Routing"::" "]
                  THEN
                    IF UPSlinkSetup."Manual Commercial Invoice" THEN
                      InternationalText[1] := 'KEY'
                    ELSE
                      InternationalText[1] := 'INV';
              END;
              IF CurrentUPSOptionPage."World Ease Master No." <> '' THEN
                CASE CurrentUPSOptionPage."Commercial Invoice" OF
                  CurrentUPSOptionPage."Commercial Invoice"::"Navision Report":
                    InternationalText[1] := 'INV-CC';
                  CurrentUPSOptionPage."Commercial Invoice"::"Manually Prepared":
                    InternationalText[1] := 'KEY-CC';
                  CurrentUPSOptionPage."Commercial Invoice"::"Paperless Invoice":
                    IF CurrentUPSOptionPage."Need Power of Attorney" OR
                       CurrentUPSOptionPage."SED Required" OR
                       CurrentUPSOptionPage."Need Certificate of Origin"
                    THEN
                      InternationalText[1] := 'EDI-PULL'
                    ELSE
                      InternationalText[1] := 'EDI-CCP';
                  ELSE
                    IF CurrentUPSOptionPage."International Routing" IN
                       [CurrentUPSOptionPage."International Routing"::Dutiable,
                        CurrentUPSOptionPage."International Routing"::" "]
                    THEN
                      IF UPSlinkSetup."Manual Commercial Invoice" THEN
                        InternationalText[1] := 'KEY-CC'
                      ELSE
                        InternationalText[1] := 'INV-CC';
                END;
            END;

          IF CurrentUPSOptionPage."Export Declaration" =
             CurrentUPSOptionPage."Export Declaration"::"UPS Prepare"
          THEN
            InternationalText[2] := 'EEI';

          IF CurrentUPSOptionPage."Certificate of Origin" =
             CurrentUPSOptionPage."Certificate of Origin"::"UPS Prepare"
          THEN BEGIN
            IF InternationalText[2] = '' THEN
              InternationalText[2] := 'CO'
            ELSE
              InternationalText[2] := InternationalText[2] + '/CO';
          END;

          IF CurrentUPSOptionPage."Need Power of Attorney" AND
             ShippingAgentAccount."ISA On File"
          THEN BEGIN
            IF InternationalText[2] = '' THEN
              InternationalText[2] := 'POA'
            ELSE
              InternationalText[2] := InternationalText[2] + '/POA';
          END;

          IF CurrentUPSOptionPage.ISC THEN
            IF ISCBio(CurrentPackage) THEN
              InternationalText[3] := 'ISC-BIO'
            ELSE
              InternationalText[3] := 'ISC';
        END;

        BarCodeReadable :=
          'TRACKING #: ' +
          COPYSTR("External Tracking No.",1,2) + ' ' + COPYSTR("External Tracking No.",3,3) + ' ' +
          COPYSTR("External Tracking No.",6,3) + ' ' + COPYSTR("External Tracking No.",9,2) + ' ' +
          COPYSTR("External Tracking No.",11,4) + ' ' + COPYSTR("External Tracking No.",15,4);

        Shipping.GetItemLabelInfo(CurrentPackage,ItemLabelInfo);

        IF (CurrentUPSOptionPage."UPS Packaging Type" =
            CurrentUPSOptionPage."UPS Packaging Type"::"UPS Letter") AND
            NOT OverLetterLimit(
                  CurrentUPSOptionPage,"Ship-to State",PackingStation."Ship-from State",
                  "Ship-to Country Code","Service Indicator","Calculation Weight (LBS)",
                  UPSlinkSetup."Rate Version")
        THEN
          ActualWeight := 0;

        IF ActualWeight = 0 THEN
          Packageweight := ''
        ELSE
          Packageweight := STRSUBSTNO('%1',ActualWeight);

        IF UPSlinkSetup."UPS Label Cert. Submission" THEN BEGIN
          IF COPYSTR(
               CarrierPackingStation."UPSlink Temp. Files Directory",
               STRLEN(CarrierPackingStation."UPSlink Temp. Files Directory"),1) <> '\'
          THEN
            CarrierPackingStation."UPSlink Temp. Files Directory" :=
              CarrierPackingStation."UPSlink Temp. Files Directory" + '\';
          IF ERASE(CarrierPackingStation."UPSlink Temp. Files Directory" + 'input.dat') THEN ;
        END;

        IF NOT "World Wide Service" AND
           NOT "UPS Canadian Service" AND
           NOT "UPS Puerto Rico Service"
        THEN BEGIN
          IF ActualWeight > 70 THEN
            MaxiCode := 'H'
          ELSE BEGIN
            UPSlinkMgt.CreateMaxiCode(
              CurrentPackage,FixZIPCode(ShipToZipCode),
              ShipToCountryISO3+PADSTR(ClassCode,3),tJulDayShip,ShipmentID,
              COPYSTR(CleanStringMaxicode(ShipToCity),1,20),CleanStringMaxicode(ShipToState),
              CleanStringMaxicode(ShiptoName),CleanStringMaxicode(DeliverToDepartment),
              CleanStringMaxicode(ShiptoAddress),CleanStringMaxicode(ShiptoAddress2),
              CleanStringMaxicode(ShiptoContact),CallTagLabel,ActualWeight,MaxiCode);

            IF CarrierPackingStation."UPS Label Printer Type" =
               CarrierPackingStation."UPS Label Printer Type"::Zebra
            THEN
              MaxiCode :=
                ClassCode + ShipToCountryISO3 + PADSTR(FixZIPCode(ShipToZipCode),9,'0') + MaxiCode;
          END;

          IF CarrierPackingStation."UPS Eltron Label Media Type" =
             CarrierPackingStation."UPS Eltron Label Media Type"::"4X4" THEN
             DirectPrintDomesticSmallLabel(
               CurrentPackage,FromLine,ToLine,AddressBlock,ZIPBarCode,RoutingCode,MaxiCode,
               ShippingServiceCode("Service Indicator"),BarCodeReadable,
               ServiceIconText("External Tracking No."),AdditionalRouting,ItemLabelInfo,CallTagLabel)
          ELSE
             DirectPrintDomesticLabel(
               CurrentPackage,FromLine,ToLine,AddressBlock,ZIPBarCode,RoutingCode,MaxiCode,
               ShippingServiceCode("Service Indicator"),BarCodeReadable,
               ServiceIconText("External Tracking No."),AdditionalRouting,ItemLabelInfo,CallTagLabel);

          IF (CurrentUPSOptionPage."Call Tag Type" =
             CurrentUPSOptionPage."Call Tag Type"::"Print Return Label Only") OR
             ((CurrentUPSOptionPage."Call Tag Type" =
              CurrentUPSOptionPage."Call Tag Type"::"Exchange Return") AND
              (CallTagLabel = TRUE))
          THEN
            IF NOT ShippingAgentAccount."UPS Prints Return Label" THEN BEGIN
              IF CarrierPackingStation."UPS Eltron Label Media Type" <>
                 CarrierPackingStation."UPS Eltron Label Media Type"::"4X4" THEN
                PrintReturnLabel(
                  CurrentPackage,ToLine,AddressBlock,AdditionalRouting,
                  ShippingServiceCode("Service Indicator"),BarCodeReadable)
            END;
        END ELSE BEGIN
          IF (CurrentUPSOptionPage."UPS Packaging Type" <>
              CurrentUPSOptionPage."UPS Packaging Type"::"UPS Letter") AND
             (CurrentUPSOptionPage."Shipment Total Weight" = 0) AND
             ((CurrentUPSOptionPage."Call Tag Type"  <>
              CurrentUPSOptionPage."Call Tag Type"::"Exchange Return") AND
              (CurrentUPSOptionPage."Call Tag Type" <>
              CurrentUPSOptionPage."Call Tag Type"::"Exchange Outbound"))
          THEN BEGIN
            LabelFileName := PackingStation.CalcLabelFileName(CarrierPackingStation."UPS Buffer File");
            DirectPrintTempLabel(
              CurrentPackage,CurrentUPSOptionPage,LabelFileName,
              CarrierPackingStation."UPS Eltron Label Media Type",FromLine,ToLine,BarCodeReadable);
          END ELSE BEGIN
            LabelPrinterType := CarrierPackingStation."UPS Label Printer Type";
            IF CurrentUPSOptionPage."World Ease Master No." <> '' THEN
              LabelPrinterType := CarrierPackingStation."World Ease Label Printer Type";

            CASE LabelPrinterType OF
              LabelPrinterType::"Eltron Orion":
                BEGIN
                  EOT := 4;
                  GS := 29;
                  RS := 30;
                  tEOT[1] := EOT;
                  tGS[1] := GS;
                  tRS[1] := RS;

                  MaxiCode :=
                    '[)>' + tRS + '01' + tGS + '96' +
                    PADSTR(COPYSTR(ShipToZipCode,1,6),6) + tGS + ShipToCountryISO3 + tGS + ClassCode + tGS +
                    TrackingNo + tGS + 'UPSN' + tGS + "Shipping Agent Account No." + tGS + tJulDayShip +
                    tGS + ShipmentID + tGS + STRSUBSTNO('%1/%2',"Package No.","Total Packages") + tGS +
                    Packageweight + tGS + 'N' + tGS + tGS +
                    COPYSTR(CleanStringMaxicode(ShipToCity),1,20) + tGS +
                    CleanStringMaxicode(ShipToState) + tRS + tEOT;
                END;
              LabelPrinterType::Zebra:
                BEGIN
                  IF CurrentUPSOptionPage."Call Tag Type" = CurrentUPSOptionPage."Call Tag Type"::None
                  THEN
                    MaxiCode := ClassCode + ShipToCountryISO3 + PADSTR(COPYSTR(ShipToZipCode,1,6),6)
                  ELSE
                    MaxiCode := ClassCode + ShipToCountryISO3 + PADSTR(FixZIPCode(ShipToZipCode),9,'0');

                MaxiCode :=
                  MaxiCode +
                  '[)>_1E01_1D96' + TrackingNo + '_1DUPSN_1D' + "Shipping Agent Account No." + '_1D' +
                  tJulDayShip + '_1D' + ShipmentID + '_1D' +
                  STRSUBSTNO('%1/%2',"Package No.","Total Packages") + '_1D' +
                  Packageweight + '_1D' + 'N' + '_1D' + '_1D' +
                  COPYSTR(CleanStringMaxicode(ShipToCity),1,20) + '_1D' +
                  CleanStringMaxicode(ShipToState) + '_1E_04';
                END;
            END;

          IF (CarrierPackingStation."UPS Eltron Label Media Type" =
             CarrierPackingStation."UPS Eltron Label Media Type"::"4X4") AND
             (CurrentUPSOptionPage."World Ease Master No." = '') THEN
             DirectPrintIntSmallLabel(
               CurrentPackage,CurrentUPSOptionPage,FromLine,ToLine,AddressBlock,ZIPBarCode,RoutingCode,
               MaxiCode,ShippingServiceCode("Service Indicator"),BarCodeReadable,
               ServiceIconText("External Tracking No."),AdditionalRouting,InternationalText,
               ItemLabelInfo,LabelPrinterType,Packageweight)
          ELSE
             DirectPrintIntLabel(
               CurrentPackage,CurrentUPSOptionPage,FromLine,ToLine,AddressBlock,ZIPBarCode,RoutingCode,
               MaxiCode,ShippingServiceCode("Service Indicator"),BarCodeReadable,
               ServiceIconText("External Tracking No."),AdditionalRouting,InternationalText,
               ItemLabelInfo,LabelPrinterType,Packageweight);

          IF  (CurrentUPSOptionPage."Call Tag Type" =
              CurrentUPSOptionPage."Call Tag Type"::"Exchange Return") AND
              (CallTagLabel = TRUE)
          THEN
            IF NOT ShippingAgentAccount."UPS Prints Return Label" THEN
              PrintReturnLabel(
                CurrentPackage,ToLine,AddressBlock,AdditionalRouting,
                ShippingServiceCode("Service Indicator"),BarCodeReadable);

            IF CurrentUPSOptionPage."World Ease Master No." <> '' THEN
              EXIT;

            IF CurrentUPSOptionPage."Commercial Invoice" =
                CurrentUPSOptionPage."Commercial Invoice"::"Paperless Invoice"
            THEN BEGIN
              CurrentPackage.TESTFIELD("Export Document No.");
              PaperlessInvLabel(CurrentPackage,CurrentUPSOptionPage);
            END ELSE
              IF CurrentUPSOptionPage."Print Warsaw Agreement Label" THEN
                WarsawLabel(CurrentPackage,CurrentUPSOptionPage);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE DirectPrintDomesticLabel@57(CurrentPackage@1240030000 : Record 14000701;FromLine@1240030001 : ARRAY [15] OF Text[100];ToLine@1240030002 : ARRAY [15] OF Text[100];AddressBlock@1240030003 : ARRAY [15] OF Text[100];ZIPBarCode@1240030004 : Text[100];RoutingCode@1240030005 : Code[15];MaxiCode@1240030006 : Text[250];ShippingServiceCode@1240030007 : Text[100];BarCodeReadable@1240030008 : Text[100];ServiceIconText@1240030009 : Text[30];AdditionalRouting@1240030010 : ARRAY [15] OF Text[100];ItemLabelInfo@1240030011 : ARRAY [10,8] OF Text[50];CallTag@1240030012 : Boolean);
    VAR
      LabelFileName@1000000011 : Text[250];
      LabelFile@1000000012 : File;
      i@1240030013 : Integer;
      CarrierLabelMgt@1240030016 : Codeunit 14000712;
      LabelWidth@1240030015 : Integer;
      LabelHeight@1240030014 : Integer;
      PrinterText@1240030017 : Text[30];
    BEGIN
      WITH CurrentPackage DO BEGIN
        GetShippingSetup;
        GetPackingStation;
        CarrierPackingStation.GetPackingStation(PackingStation);
        GetShippingAgent("Shipping Agent Code");
        TESTFIELD("Shipping Agent Account No.");

        GetShippingAgentAccount("Shipping Agent Account No.");
        GetShippingAgentService("Shipping Agent Code","Shipping Agent Service","World Wide Service");
        GetUPSlinkSetup;

        CarrierPackingStation.TESTFIELD("UPS Buffer File");
        LabelFileName := PackingStation.CalcLabelFileName(CarrierPackingStation."UPS Buffer File");
        CarrierLabelMgt.OpenLabelFile(LabelFile,LabelFileName);

        CASE CarrierPackingStation."UPS Label Printer Type" OF
          CarrierPackingStation."UPS Label Printer Type"::"Eltron Orion":
            BEGIN
              CarrierLabelMgt.WriteLabelHeader(
                LabelFile,2,CarrierPackingStation."UPS Eltron Label Media Type",
                CarrierPackingStation."UPS Print From",LabelWidth,LabelHeight);
              PrinterText := ' ELTRON ';
            END;
          CarrierPackingStation."UPS Label Printer Type"::Zebra:
            BEGIN
              CarrierLabelMgt.WriteLabelHeader(
                LabelFile,4,CarrierPackingStation."UPS Eltron Label Media Type",
                CarrierPackingStation."UPS Print From",LabelWidth,LabelHeight);
              PrinterText := ' ZEBRA ';
            END;
        END;

        CarrierLabelMgt.WriteLabelText2(LabelFile,20,10,10,0,3,1,1,FALSE,FALSE,FromLine[1]);
        CarrierLabelMgt.WriteLabelText2(LabelFile,20,34,10,0,3,1,1,FALSE,FALSE,FromLine[2]);
        CarrierLabelMgt.WriteLabelText2(LabelFile,20,58,10,0,3,1,1,FALSE,FALSE,FromLine[3]);
        CarrierLabelMgt.WriteLabelText2(LabelFile,20,82,10,0,3,1,1,FALSE,FALSE,FromLine[4]);

        IF FromLine[5] <> '' THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,104,10,0,3,1,1,FALSE,FALSE,FromLine[5]);
          IF FromLine[6] <> '' THEN
            CarrierLabelMgt.WriteLabelText2(LabelFile,20,128,10,0,3,1,1,FALSE,FALSE,FromLine[6]);
        END;

        IF COPYSTR(AddressBlock[1],STRLEN(AddressBlock[1])-2,3) IN ['PAK','LTR'] THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,300,10,30,0,3,2,2,FALSE,FALSE,AddressBlock[1])
        ELSE
          CarrierLabelMgt.WriteLabelText2(LabelFile,425,10,30,0,3,2,2,FALSE,FALSE,AddressBlock[1]);

        CarrierLabelMgt.WriteLabelText2(LabelFile,625,5,15,0,3,1,2,FALSE,FALSE,AddressBlock[2]);

        i := 50;
        IF AddressBlock[3] IN ['COD','RS','PRO','RFG'] THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,500,i,10,0,4,4,4,FALSE,FALSE,AddressBlock[3]);
          i := i + 100;
        END ELSE BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,500,i,10,0,3,1,1,FALSE,FALSE,AddressBlock[3]);
          i := i + 25;
        END;

        IF AddressBlock[4] IN ['RS','PRO','RFG'] THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,550,i,10,0,4,4,4,FALSE,FALSE,AddressBlock[4]);
          i := i + 40;
        END ELSE BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,625,i,10,0,3,1,1,FALSE,FALSE,AddressBlock[4]);
          i := i + 25;
        END;

        IF AddressBlock[5] <> '' THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,625,i,10,0,3,1,1,FALSE,FALSE,AddressBlock[5]);
          i := i + 25;
        END;

        IF AddressBlock[6] <> '' THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,625,i,10,0,3,1,1,FALSE,FALSE,AddressBlock[6]);
          i := i + 25;
        END;

        IF AddressBlock[7] <> '' THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,625,i,10,0,3,1,1,FALSE,FALSE,AddressBlock[7]);
          i := i + 25;
        END;

        CarrierLabelMgt.WriteLabelText2(LabelFile,20,150,10,0,4,1,2,FALSE,FALSE,'SHIP');
        CarrierLabelMgt.WriteLabelText2(LabelFile,20,200,10,0,4,1,2,FALSE,FALSE,'TO:');
        CarrierLabelMgt.WriteLabelText2(LabelFile,100,150,10,0,3,1,2,FALSE,FALSE,ToLine[1]);
        CarrierLabelMgt.WriteLabelText2(LabelFile,100,190,10,0,3,1,2,FALSE,FALSE,ToLine[2]);
        CarrierLabelMgt.WriteLabelText2(LabelFile,100,230,10,0,3,1,2,FALSE,FALSE,ToLine[3]);

        i := 270;
        IF ToLine[4] <> '' THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,100,i,10,0,3,1,2,FALSE,FALSE,ToLine[4]);
          i := i + 40;
        END;

        IF ToLine[5] <> '' THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,100,i,10,0,3,1,2,FALSE,FALSE,ToLine[5]);
          i := i + 40;
        END;

        IF ToLine[6] <> '' THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,100,i,10,0,3,1,2,FALSE,FALSE,ToLine[6]);
          i := i + 40;
        END;

        IF ToLine[7] <> '' THEN
          IF STRLEN(ToLine[7]) > 25 THEN
            CarrierLabelMgt.WriteLabelText2(LabelFile,100,i,10,0,3,1,2,FALSE,FALSE,ToLine[7])
          ELSE
            CarrierLabelMgt.WriteLabelText2(LabelFile,100,i,10,0,3,2,2,FALSE,FALSE,ToLine[7]);

        CarrierLabelMgt.WriteLabelLine(LabelFile,0,430,800,5);

        IF MaxiCode = 'H' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,100,490,0,0,4,5,5,FALSE,FALSE,MaxiCode)
        ELSE
          CarrierLabelMgt.WriteLabelBarCode(LabelFile,10,440,3,0,'UPSM2',0,0,0,FALSE,MaxiCode);

        CarrierLabelMgt.WriteLabelLine(LabelFile,250,430,5,240);
        CarrierLabelMgt.WriteLabelText2(LabelFile,285,450,0,0,3,3,3,FALSE,FALSE,RoutingCode);
        CarrierLabelMgt.WriteLabelBarCode(LabelFile,305,530,0,0,'1',4,12,100,FALSE,ZIPBarCode);

        CarrierLabelMgt.WriteLabelLine(LabelFile,0,660,800,10);
        IF STRLEN(ShippingServiceCode) > 18 THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,680,0,0,3,2,2,FALSE,FALSE,ShippingServiceCode)
        ELSE
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,680,0,0,4,2,2,FALSE,FALSE,ShippingServiceCode);

        CarrierLabelMgt.WriteLabelText2(LabelFile,20,740,0,0,4,1,1,FALSE,FALSE,BarCodeReadable);

        IF STRLEN(ServiceIconText) >= 3 THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,600,680,-30,0,4,4,5,FALSE,FALSE,ServiceIconText)
        ELSE
          IF STRLEN(ServiceIconText) > 0 THEN
            CarrierLabelMgt.WriteLabelText2(LabelFile,650,680,0,0,4,4,5,FALSE,FALSE,ServiceIconText)
          ELSE
            CarrierLabelMgt.WriteLabelLine(LabelFile,680,670,120,130);

        CarrierLabelMgt.WriteLabelLine(LabelFile,0,800,800,5);
        IF WideBarCode("External Tracking No.") THEN
          CarrierLabelMgt.WriteLabelBarCode(LabelFile,110,820,0,0,'1',3,9,200,FALSE,"External Tracking No.")
        ELSE
          CarrierLabelMgt.WriteLabelBarCode(LabelFile,75,820,0,0,'1',4,12,200,FALSE,"External Tracking No.");
        CarrierLabelMgt.WriteLabelLine(LabelFile,0,1040,800,10);

        CarrierLabelMgt.WriteLabelText2(LabelFile,20,1060,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[1]);
        IF AdditionalRouting[2] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,1085,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[2]);
        IF AdditionalRouting[3] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,1110,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[3]);
        IF AdditionalRouting[4] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,1135,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[4]);
        IF AdditionalRouting[5] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,1160,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[5]);
        IF AdditionalRouting[6] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,1185,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[6]);
        IF AdditionalRouting[7] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,1210,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[7]);

        PrinterText := PrinterText + CarrierPackingStation."UPSlink Printer Model" + ' ';

        ShippingSetup.TESTFIELD("UPS Routing Version");
        CarrierLabelMgt.WriteLabelText2(
          LabelFile,380,1230,10,0,1,1,1,FALSE,FALSE,
          UPSlinkSetup.UPSlinkVersion + PrinterText + ShippingSetup."UPS Routing Version");

        IF CarrierPackingStation."UPS Add Item Info. on Label" THEN
          CASE CarrierPackingStation."UPS Label Printer Type" OF
            CarrierPackingStation."UPS Label Printer Type"::"Eltron Orion":
              Shipping.DirectPrintOrionLabelInfo(LabelFile,ItemLabelInfo);
            CarrierPackingStation."UPS Label Printer Type"::Zebra:
              Shipping.DirectPrintZebraLabelInfo(LabelFile,ItemLabelInfo);
          END;

        CarrierLabelMgt.WriteLabelFooter(LabelFile);
        CarrierLabelMgt.CloseLabelFile(LabelFile);

        InsertLabelFile(
          LabelFileName,Text019,11,
          CarrierPackingStation."UPS Label Printer Port",PackingStation.Code,
          NOT PackingStation."No Label Printer",PackingStation."Do Not Import Label File");

        PackingStation.PrintLabelFile(
          LabelFileName,CarrierPackingStation."UPS Label Printer Port",
          PackingStation."No Label Printer",PackingStation."Auto Delete Label Buffer File");
      END;
    END;

    LOCAL PROCEDURE DirectPrintIntLabel@23(CurrentPackage@1240030000 : Record 14000701;CurrentUPSOptionPage@1240030018 : Record 14000761;FromLine@1240030001 : ARRAY [15] OF Text[100];ToLine@1240030002 : ARRAY [15] OF Text[100];AddressBlock@1240030003 : ARRAY [15] OF Text[100];ZIPBarCode@1240030004 : Text[100];RoutingCode@1240030005 : Code[15];MaxiCode@1240030006 : Text[250];ShippingServiceCode@1240030007 : Text[100];BarCodeReadable@1240030008 : Text[100];ServiceIconText@1240030009 : Text[30];AdditionalRouting@1240030010 : ARRAY [15] OF Text[100];InternationalText@1240030013 : ARRAY [15] OF Text[30];ItemLabelInfo@1240030011 : ARRAY [10,8] OF Text[50];LabelPrinterType@1240030020 : ',Eltron Orion,Zebra';Packageweight@1240030021 : Text[30]);
    VAR
      LabelFileName@1000000011 : Text[250];
      LabelFile@1000000012 : File;
      i@1240030012 : Integer;
      CarrierLabelMgt@1240030016 : Codeunit 14000712;
      LabelWidth@1240030015 : Integer;
      LabelHeight@1240030014 : Integer;
      LabelCount@1240020000 : Integer;
      PrinterText@1240030017 : Text[30];
      PrinterPort@1240030019 : Code[100];
    BEGIN
      WITH CurrentPackage DO BEGIN
        GetShippingSetup;
        GetPackingStation;
        CarrierPackingStation.GetPackingStation(PackingStation);
        GetShippingAgent("Shipping Agent Code");
        TESTFIELD("Shipping Agent Account No.");

        GetShippingAgentAccount("Shipping Agent Account No.");
        GetShippingAgentService("Shipping Agent Code","Shipping Agent Service","World Wide Service");
        GetUPSlinkSetup;

        CarrierPackingStation.TESTFIELD("UPS Buffer File");
        LabelFileName := PackingStation.CalcLabelFileName(CarrierPackingStation."UPS Buffer File");
        CarrierLabelMgt.OpenLabelFile(LabelFile,LabelFileName);

        LabelPrinterType := CarrierPackingStation."UPS Label Printer Type";
        PrinterPort := CarrierPackingStation."UPS Label Printer Port";
        IF CurrentUPSOptionPage."World Ease Master No." <> '' THEN BEGIN
          LabelPrinterType := CarrierPackingStation."World Ease Label Printer Type";
          PrinterPort := CarrierPackingStation."World Ease Label Printer Port";
          CarrierPackingStation."UPS Add Item Info. on Label" := FALSE;
        END;

        CASE LabelPrinterType OF
          LabelPrinterType::"Eltron Orion":
            BEGIN
              CarrierLabelMgt.WriteLabelHeader(
                LabelFile,2,
                GetLabelMgtMediaType(
                  CarrierPackingStation."UPS Eltron Label Media Type",CurrentUPSOptionPage),
                CarrierPackingStation."UPS Print From",LabelWidth,LabelHeight);
              PrinterText := ' ELTRON ';
            END;
          LabelPrinterType::Zebra:
            BEGIN
              CarrierLabelMgt.WriteLabelHeader(
                LabelFile,4,
                GetLabelMgtMediaType(
                  CarrierPackingStation."UPS Eltron Label Media Type",CurrentUPSOptionPage),
                CarrierPackingStation."UPS Print From",LabelWidth,LabelHeight);
              PrinterText := ' ZEBRA ';
            END;
        END;

        CarrierLabelMgt.WriteLabelText2(LabelFile,20,10,0,0,3,1,1,FALSE,FALSE,FromLine[1]);
        CarrierLabelMgt.WriteLabelText2(LabelFile,20,34,0,0,3,1,1,FALSE,FALSE,FromLine[2]);
        CarrierLabelMgt.WriteLabelText2(LabelFile,20,58,0,0,3,1,1,FALSE,FALSE,FromLine[3]);
        CarrierLabelMgt.WriteLabelText2(LabelFile,20,82,0,0,3,1,1,FALSE,FALSE,FromLine[4]);

        IF FromLine[5] <> '' THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,104,0,0,3,1,1,FALSE,FALSE,FromLine[5]);
          IF FromLine[6] <> '' THEN BEGIN
            CarrierLabelMgt.WriteLabelText2(LabelFile,20,128,0,0,3,1,1,FALSE,FALSE,FromLine[6]);
            IF FromLine[7] <> '' THEN
              CarrierLabelMgt.WriteLabelText2(LabelFile,20,152,0,0,3,1,1,FALSE,FALSE,FromLine[7]);
          END;
        END;

        IF COPYSTR(AddressBlock[1],STRLEN(AddressBlock[1])-2,3) IN ['BOX','PAK','LTR'] THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,300,10,30,0,3,2,2,FALSE,FALSE,AddressBlock[1])
        ELSE
          CarrierLabelMgt.WriteLabelText2(LabelFile,425,10,30,0,3,2,2,FALSE,FALSE,AddressBlock[1]);

        CarrierLabelMgt.WriteLabelText2(LabelFile,625,5,0,0,3,1,2,FALSE,FALSE,AddressBlock[2]);
        IF AddressBlock[3] IN ['PRO'] THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,600,175,0,0,4,4,4,FALSE,FALSE,AddressBlock[3])
        ELSE IF AddressBlock[3] IN ['COD'] THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,600,50,0,0,4,4,4,FALSE,FALSE,AddressBlock[3])
        ELSE
          CarrierLabelMgt.WriteLabelText2(LabelFile,500,50,0,0,3,1,1,FALSE,FALSE,AddressBlock[3]);

        IF AddressBlock[4] IN ['PRO'] THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,600,150,0,0,4,4,4,FALSE,FALSE,AddressBlock[4])
        ELSE IF AddressBlock[4] IN ['RFG'] THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,600,275,0,0,4,4,4,FALSE,FALSE,AddressBlock[4])
        ELSE
          CarrierLabelMgt.WriteLabelText2(LabelFile,500,75,0,0,3,1,1,FALSE,FALSE,AddressBlock[4]);

        IF AddressBlock[5] IN ['RFG'] THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,600,250,0,0,4,4,4,FALSE,FALSE,AddressBlock[5])
        ELSE
          CarrierLabelMgt.WriteLabelText2(LabelFile,500,100,0,0,3,1,1,FALSE,FALSE,AddressBlock[5]);

        IF AddressBlock[6] <> ''THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,500,125,0,0,3,1,1,FALSE,FALSE,AddressBlock[6]);

        IF AddressBlock[7] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,500,150,0,0,3,1,1,FALSE,FALSE,AddressBlock[7]);

        IF AddressBlock[8] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,500,175,0,0,3,1,1,FALSE,FALSE,AddressBlock[8]);

        CarrierLabelMgt.WriteLabelText2(LabelFile,20,180,0,0,4,1,2,FALSE,FALSE,'SHIP');
        CarrierLabelMgt.WriteLabelText2(LabelFile,20,230,0,0,4,1,2,FALSE,FALSE,'TO:');
        CarrierLabelMgt.WriteLabelText2(LabelFile,100,180,0,0,3,1,2,FALSE,FALSE,ToLine[1]);
        CarrierLabelMgt.WriteLabelText2(LabelFile,100,220,0,0,3,1,2,FALSE,FALSE,ToLine[2]);
        CarrierLabelMgt.WriteLabelText2(LabelFile,100,260,0,0,3,1,2,FALSE,FALSE,ToLine[3]);

        i := 300;
        IF ToLine[4] <> '' THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,100,i,0,0,3,1,2,FALSE,FALSE,ToLine[4]);
          i := i + 40;
        END;

        IF ToLine[5] <> '' THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,100,i,0,0,3,1,2,FALSE,FALSE,ToLine[5]);
          i := i + 40;
        END;

        IF ToLine[6] <> '' THEN BEGIN
          IF STRLEN(ToLine[6]) > 25 THEN
            CarrierLabelMgt.WriteLabelText2(LabelFile,100,i,10,0,3,1,2,FALSE,FALSE,ToLine[6])
          ELSE
            CarrierLabelMgt.WriteLabelText2(LabelFile,100,i,10,0,3,2,2,FALSE,FALSE,ToLine[6]);
          i := i + 40;
        END;

        IF ToLine[7] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,100,i,0,0,3,2,2,FALSE,FALSE,ToLine[7]);

        CarrierLabelMgt.WriteLabelLine(LabelFile,0,460,800,5);

        IF CurrentUPSOptionPage."Call Tag Type" IN
           [CurrentUPSOptionPage."Call Tag Type"::None,
            CurrentUPSOptionPage."Call Tag Type"::"Print Return Label Only",
            CurrentUPSOptionPage."Call Tag Type"::"Exchange Outbound",
            CurrentUPSOptionPage."Call Tag Type"::"Exchange Return",
            CurrentUPSOptionPage."Call Tag Type"::"IC PRL"]
        THEN
          CarrierLabelMgt.WriteLabelBarCode(LabelFile,10,470,5,0,'UPSM3',0,0,0,FALSE,MaxiCode)
        ELSE
          CarrierLabelMgt.WriteLabelBarCode(LabelFile,10,470,5,0,'UPSM2',0,0,0,FALSE,MaxiCode);

        CarrierLabelMgt.WriteLabelLine(LabelFile,250,460,5,240);
        CarrierLabelMgt.WriteLabelText2(LabelFile,285,480,0,0,3,3,3,FALSE,FALSE,RoutingCode);

        IF WideBarCode(ZIPBarCode) THEN
          CarrierLabelMgt.WriteLabelBarCode(LabelFile,305,560,0,0,'1',3,9,100,FALSE,ZIPBarCode)
        ELSE
          CarrierLabelMgt.WriteLabelBarCode(LabelFile,305,560,0,0,'1',4,12,100,FALSE,ZIPBarCode);

        CarrierLabelMgt.WriteLabelLine(LabelFile,0,690,800,10);

        IF STRLEN(ShippingServiceCode) > 19 THEN BEGIN
          IF STRLEN(ShippingServiceCode) > 21 THEN
            CarrierLabelMgt.WriteLabelText2(LabelFile,20,710,0,0,3,2,2,FALSE,FALSE,ShippingServiceCode)
          ELSE
            CarrierLabelMgt.WriteLabelText2(LabelFile,20,710,0,0,3,2,2,FALSE,FALSE,ShippingServiceCode);
        END ELSE
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,710,0,0,4,2,2,FALSE,FALSE,ShippingServiceCode);

        CarrierLabelMgt.WriteLabelText2(LabelFile,20,780,0,0,4,1,1,FALSE,FALSE,BarCodeReadable);
        IF STRLEN(ServiceIconText) >= 3 THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,600,710,-30,0,4,4,5,FALSE,FALSE,ServiceIconText)
        ELSE
          IF STRLEN(ServiceIconText) > 0 THEN
            CarrierLabelMgt.WriteLabelText2(LabelFile,650,710,0,0,4,4,5,FALSE,FALSE,ServiceIconText)
          ELSE
            CarrierLabelMgt.WriteLabelLine(LabelFile,680,700,120,130);

        CarrierLabelMgt.WriteLabelLine(LabelFile,0,830,800,5);
        IF WideBarCode("External Tracking No.") THEN
          CarrierLabelMgt.WriteLabelBarCode(LabelFile,110,850,0,0,'1',3,9,200,FALSE,"External Tracking No.")
        ELSE
          CarrierLabelMgt.WriteLabelBarCode(LabelFile,75,850,0,0,'1',4,12,200,FALSE,"External Tracking No.");
        CarrierLabelMgt.WriteLabelLine(LabelFile,0,1070,800,10);

        CarrierLabelMgt.WriteLabelText2(LabelFile,20,1089,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[1]);
        CarrierLabelMgt.WriteLabelText2(LabelFile,20,1113,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[2]);

        CarrierLabelMgt.WriteLabelText2(LabelFile,550,1090,0,0,4,2,2,FALSE,FALSE,InternationalText[1]);
        IF InternationalText[2] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,625,1140,0,0,3,1,1,FALSE,FALSE,InternationalText[2]);

        CarrierLabelMgt.WriteLabelText2(LabelFile,20,1137,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[3]);
        IF AdditionalRouting[4] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,1162,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[4]);
        IF InternationalText[3] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,625,1160,0,0,3,1,1,FALSE,FALSE,InternationalText[3]);
        IF AdditionalRouting[5] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,1184,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[5]);
        IF AdditionalRouting[6] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,1208,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[6]);
        IF AdditionalRouting[7] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,1232,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[7]);

        ShippingSetup.TESTFIELD("UPS Routing Version");

        PrinterText := PrinterText + CarrierPackingStation."UPSlink Printer Model" + ' ';

        CarrierLabelMgt.WriteLabelText2(
          LabelFile,380,1233,0,0,1,1,1,FALSE,FALSE,UPSlinkSetup.UPSlinkVersion + PrinterText +
          ShippingSetup."UPS Routing Version");
        IF CarrierPackingStation."UPS Add Item Info. on Label" THEN
          CASE CarrierPackingStation."UPS Label Printer Type" OF
            CarrierPackingStation."UPS Label Printer Type"::"Eltron Orion":
              Shipping.DirectPrintOrionLabelInfo(LabelFile,ItemLabelInfo);
            CarrierPackingStation."UPS Label Printer Type"::Zebra:
              Shipping.DirectPrintZebraLabelInfo(LabelFile,ItemLabelInfo);
          END;

        IF CurrentUPSOptionPage."World Ease Master No." <> '' THEN
          CASE LabelPrinterType OF
            LabelPrinterType::"Eltron Orion":
              WETransaction.DirectPrintOverLabel(
                CurrentUPSOptionPage."World Ease Master No.",CurrentPackage."External Tracking No.",
                CurrentUPSOptionPage."World Ease Package No.",Packageweight,LabelFile,2,3,0,LabelWidth,
                LabelHeight,1273);
            LabelPrinterType::Zebra:
              WETransaction.DirectPrintOverLabel(
                CurrentUPSOptionPage."World Ease Master No.",CurrentPackage."External Tracking No.",
                CurrentUPSOptionPage."World Ease Package No.",Packageweight,LabelFile,4,3,0,LabelWidth,
                LabelHeight,1273);
          END;

        CarrierLabelMgt.WriteLabelFooter(LabelFile);
        CarrierLabelMgt.CloseLabelFile(LabelFile);

        InsertLabelFile(
          LabelFileName,Text019,11,PrinterPort,PackingStation.Code,
          NOT PackingStation."No Label Printer",PackingStation."Do Not Import Label File");

        PackingStation.PrintLabelFile(
          LabelFileName,PrinterPort,PackingStation."No Label Printer",
          PackingStation."Auto Delete Label Buffer File");

        IF "Service Indicator" = 'E1' THEN
          FOR LabelCount := 1 TO 4 DO
            PackingStation.PrintLabelFile(
              LabelFileName,PrinterPort,PackingStation."No Label Printer",
              PackingStation."Auto Delete Label Buffer File");
      END;
    END;

    PROCEDURE PrintReturnLabel@27(CurrentPackage@1240030000 : Record 14000701;ToLine@1240030001 : ARRAY [15] OF Text[100];AddressBlock@1240030002 : ARRAY [15] OF Text[100];AdditionalRouting@1240030003 : ARRAY [15] OF Text[100];ShippingServiceCode@1240030004 : Text[100];TrackingNo@1240030005 : Text[100]);
    VAR
      LabelFileName@1240030006 : Text[250];
      LabelFile@1240030007 : File;
      i@1240030010 : Integer;
      CarrierLabelMgt@1240030015 : Codeunit 14000712;
      LabelWidth@1240030011 : Integer;
      LabelHeight@1240030009 : Integer;
      PrinterText@1240030012 : Text[30];
    BEGIN
      CarrierPackingStation.TESTFIELD("UPS Buffer File");
      LabelFileName := PackingStation.CalcLabelFileName(CarrierPackingStation."UPS Buffer File");

      CarrierLabelMgt.OpenLabelFile(LabelFile,LabelFileName);

      CASE CarrierPackingStation."UPS Label Printer Type" OF
        CarrierPackingStation."UPS Label Printer Type"::"Eltron Orion":
          BEGIN
            CarrierLabelMgt.WriteLabelHeader(
              LabelFile,2,CarrierPackingStation."UPS Eltron Label Media Type",
              CarrierPackingStation."UPS Print From",LabelWidth,LabelHeight);
            PrinterText := ' ELTRON ';
          END;
        CarrierPackingStation."UPS Label Printer Type"::Zebra:
          BEGIN
            CarrierLabelMgt.WriteLabelHeader(
              LabelFile,4,CarrierPackingStation."UPS Eltron Label Media Type",
              CarrierPackingStation."UPS Print From",LabelWidth,LabelHeight);
            PrinterText := ' ZEBRA ';
          END;
      END;

      CarrierLabelMgt.WriteLabelText2(LabelFile,10,20,0,0,2,2,2,FALSE,FALSE,FORMAT(CurrentPackage."Package No.") + ' OF ' +
        FORMAT(CurrentPackage."Total Packages"));
      CarrierLabelMgt.WriteLabelText2(LabelFile,290,10,0,0,4,1,1,FALSE,FALSE,'RETURN SERVICE');
      CarrierLabelMgt.WriteLabelText2(LabelFile,275,40,0,0,4,1,1,FALSE,FALSE,'CUSTOMER RECEIPT');
      CarrierLabelMgt.WriteLabelText2(LabelFile,10,125,0,0,3,1,1,FALSE,FALSE,'SHIP TO:');

      CarrierLabelMgt.WriteLabelText2(LabelFile,10,150,0,0,3,1,1,FALSE,FALSE,ToLine[1]);
      CarrierLabelMgt.WriteLabelText2(LabelFile,10,175,0,0,3,1,1,FALSE,FALSE,ToLine[2]);
      CarrierLabelMgt.WriteLabelText2(LabelFile,10,200,0,0,3,1,1,FALSE,FALSE,ToLine[3]);

      i := 225;
      IF ToLine[4] <> '' THEN BEGIN
        CarrierLabelMgt.WriteLabelText2(LabelFile,10,i,0,0,3,1,1,FALSE,FALSE,ToLine[4]);
        i := i + 25;
      END;

      IF ToLine[5] <> '' THEN BEGIN
        CarrierLabelMgt.WriteLabelText2(LabelFile,10,i,0,0,3,1,1,FALSE,FALSE,ToLine[5]);
        i := i + 25;
      END;

      IF ToLine[6] <> '' THEN BEGIN
        CarrierLabelMgt.WriteLabelText2(LabelFile,10,i,0,0,3,1,1,FALSE,FALSE,ToLine[6]);
        i := i + 25;
      END;

      IF ToLine[7] <> '' THEN
        CarrierLabelMgt.WriteLabelText2(LabelFile,10,i,0,0,3,1,1,FALSE,FALSE,ToLine[7]);

      CarrierLabelMgt.WriteLabelLine(LabelFile,500,100,230,3);
      CarrierLabelMgt.WriteLabelLine(LabelFile,500,100,3,90);
      CarrierLabelMgt.WriteLabelLine(LabelFile,500,140,230,3);
      CarrierLabelMgt.WriteLabelLine(LabelFile,730,100,3,93);
      CarrierLabelMgt.WriteLabelLine(LabelFile,500,190,230,3);

      CarrierLabelMgt.WriteLabelText2(LabelFile,520,115,0,0,2,1,1,FALSE,FALSE,'DATE OF SHIPMENT');
      CarrierLabelMgt.WriteLabelText2(LabelFile,550,220,0,0,2,1,1,FALSE,FALSE,'CUSTOMER SERVICE');
      CarrierLabelMgt.WriteLabelText2(LabelFile,550,245,0,0,2,1,1,FALSE,FALSE,'1-800-PICK-UPS');
      CarrierLabelMgt.WriteLabelLine(LabelFile,0,295,790,3);

      CarrierLabelMgt.WriteLabelText2(
        LabelFile,10,330,0,0,3,1,1,FALSE,FALSE,'PACKAGE CONTENTS : ' + CurrentPackage.Description);
      CarrierLabelMgt.WriteLabelLine(LabelFile,0,370,790,3);
      CarrierLabelMgt.WriteLabelText2(LabelFile,10,400,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[5]);
      CarrierLabelMgt.WriteLabelText2(LabelFile,10,425,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[6]);

      CarrierLabelMgt.WriteLabelLine(LabelFile,0,457,790,3);
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,10,717,0,0,3,1,1,FALSE,FALSE,'Important Notice to Anyone Handing Over Goods to UPS');
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,5,790,0,0,1,1,1,FALSE,FALSE,'This document is a receipt only and you are named on the attached');
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,5,810,0,0,1,1,1,FALSE,FALSE,'label/document exclusively for indentification purposes.  The contract of');
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,5,830,0,0,1,1,1,FALSE,FALSE,'carriage is between UPS and its customer.  There is no contract between you');
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,5,850,0,0,1,1,1,FALSE,FALSE,' and UPS.  By handing over the goods to UPS, you agree that UPS collects the');
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,5,870,0,0,1,1,1,FALSE,FALSE,'goods on behalf of its customer and accepts no liability whatsoever to you');
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,5,890,0,0,1,1,1,FALSE,FALSE,'or anyone other than its customer for any loss or delay of or damage to the');

      CarrierLabelMgt.WriteLabelText2(
        LabelFile,5,955,0,0,3,1,1,FALSE,FALSE,'This receipt is to retained by the customer');
      CarrierLabelMgt.WriteLabelText2(LabelFile,5,980,0,0,3,1,1,FALSE,FALSE,'returning the merchandise.');
      CarrierLabelMgt.WriteLabelLine(LabelFile,0,1005,790,3);
      CarrierLabelMgt.WriteLabelText2(LabelFile,10,1025,0,0,3,1,1,FALSE,FALSE,ShippingServiceCode);
      CarrierLabelMgt.WriteLabelText2(LabelFile,300,1025,0,0,3,1,1,FALSE,FALSE,TrackingNo);

      ShippingSetup.TESTFIELD("UPS Routing Version");
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,380,1223,0,0,2,1,1,FALSE,FALSE,UPSlinkSetup.UPSlinkVersion + PrinterText +
        ShippingSetup."UPS Routing Version");

      CarrierLabelMgt.WriteLabelFooter(LabelFile);
      CarrierLabelMgt.CloseLabelFile(LabelFile);

      CurrentPackage.InsertLabelFile(
        LabelFileName,Text020,11,
        CarrierPackingStation."UPS Label Printer Port",PackingStation.Code,
        NOT PackingStation."No Label Printer",PackingStation."Do Not Import Label File");

      PackingStation.PrintLabelFile(
        LabelFileName,CarrierPackingStation."UPS Label Printer Port",
        PackingStation."No Label Printer",PackingStation."Auto Delete Label Buffer File");
    END;

    PROCEDURE PaperlessInvLabel@1240030008(CurrentPackage@1240030000 : Record 14000701;CurrentUPSOptionPage@1240030016 : Record 14000761);
    VAR
      ExportDoc@1240030022 : Record 14000981;
      LabelFileName@1240030006 : Text[250];
      LabelFile@1240030007 : File;
      i@1240030010 : Integer;
      SQ@1240030012 : Char;
      tSQ@1240030013 : Text[3];
      CR@1240030002 : Char;
      LF@1240030003 : Char;
      TB@1240030004 : Char;
      tCR@1240030011 : Text[3];
      tLF@1240030014 : Text[3];
      tCRLF@1240030055 : Text[5];
      tTB@1240030015 : Text[3];
      CarrierLabelMgt@1240030057 : Codeunit 14000712;
      LabelWidth@1240030056 : Integer;
      LabelHeight@1240030054 : Integer;
      PrinterText@1240030058 : Text[30];
      LabelData@1240030060 : ARRAY [60] OF Text[90];
    BEGIN
      GetShippingSetup;
      ExportDoc.GET(CurrentPackage."Export Document No.");
      ExportDoc.TESTFIELD("Departure Date");

      CarrierPackingStation.TESTFIELD("UPS Buffer File");
      LabelFileName := PackingStation.CalcLabelFileName(CarrierPackingStation."UPS Buffer File");
      SQ := 39;
      tSQ[1] := SQ;

      CASE CarrierPackingStation."UPS Label Printer Type" OF
        CarrierPackingStation."UPS Label Printer Type"::"Eltron Orion":
          BEGIN
            CR := 13;
            LF := 10;
            TB := 9;
            tCR[1] := CR;
            tLF[1] := LF;
            tCRLF[1] := CR;
            tCRLF[2] := LF;
            tTB[1] := TB;
          END;
        CarrierPackingStation."UPS Label Printer Type"::Zebra:
          BEGIN
            tCR := '_0D';
            tLF := '_0A';
            tCRLF := '_0D0A';
            tTB := '_09';
          END;
      END;

      i := PDF417Data2(ExportDoc,CurrentPackage,CurrentUPSOptionPage,LabelData,30,tCR,tTB);

      CarrierLabelMgt.OpenLabelFile(LabelFile,LabelFileName);

      CASE CarrierPackingStation."UPS Label Printer Type" OF
        CarrierPackingStation."UPS Label Printer Type"::"Eltron Orion":
          BEGIN
            CarrierLabelMgt.WriteLabelHeader(
              LabelFile,2,
              GetLabelMgtMediaType(
                CarrierPackingStation."UPS Eltron Label Media Type",CurrentUPSOptionPage),
              CarrierPackingStation."UPS Print From",LabelWidth,LabelHeight);
            PrinterText := ' ELTRON ';
          END;
        CarrierPackingStation."UPS Label Printer Type"::Zebra:
          BEGIN
            CarrierLabelMgt.WriteLabelHeader(
              LabelFile,4,
              GetLabelMgtMediaType(
                CarrierPackingStation."UPS Eltron Label Media Type",CurrentUPSOptionPage),
              CarrierPackingStation."UPS Print From",LabelWidth,LabelHeight);
            PrinterText := ' ZEBRA ';
          END;
      END;

      CarrierLabelMgt.WriteLabelText2(
        LabelFile,
        40,20,0,0,3,1,1,FALSE,FALSE,'Backup Document - Please Place on Package');
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,10,60,0,0,3,1,1,FALSE,FALSE,'TR#: ' +
        COPYSTR(CurrentPackage."External Tracking No.",1,2) + ' ' +
        COPYSTR(CurrentPackage."External Tracking No.",3,3) + ' ' +
        COPYSTR(CurrentPackage."External Tracking No.",6,3) + ' ' +
        COPYSTR(CurrentPackage."External Tracking No.",9,2) + ' ' +
        COPYSTR(CurrentPackage."External Tracking No.",11,4) + ' ' +
        COPYSTR(CurrentPackage."External Tracking No.",15,4) +
        '    ' + 'SHP#: ' + CurrentUPSOptionPage."Waybill No.");

      CarrierLabelMgt.WriteLabelLine(LabelFile,0,100,800,5);
      CarrierLabelMgt.WriteLabelBarCode(LabelFile,50,150,0,0,'UPSPDF417M',700,0,600,FALSE,'');
      CarrierLabelMgt.ChangeTextMode(LabelFile,FALSE);
      CarrierLabelMgt.WriteLabelBinaryData(
        LabelFile,CarrierLabelMgt.FormatLabelBarCode(50,150,0,0,'UPSPDF417',700,0,600,FALSE,''));
      CarrierLabelMgt.WriteLabelBarCodeBeginChar(LabelFile);

      i := 1;
      REPEAT
        IF LabelData[i] <> '' THEN
          CarrierLabelMgt.WriteLabelBinaryData(LabelFile,LabelData[i])
        ELSE
          i := 31;
        i := i + 1;
      UNTIL i > 30;

      CarrierLabelMgt.ChangeTextMode(LabelFile,TRUE);
      CarrierLabelMgt.WriteLabelBarCodeEndChar(LabelFile);

      IF CurrentUPSOptionPage."Print Warsaw Agreement Label" THEN
        WarsawText(LabelFile,CarrierLabelMgt);

      IF CarrierPackingStation."UPS Eltron Label Media Type" =
         CarrierPackingStation."UPS Eltron Label Media Type"::"4X4" THEN
      BEGIN
        CarrierLabelMgt.WriteLabelLine(LabelFile,0,730,790,4);
        CarrierLabelMgt.WriteLabelText2(LabelFile,10,745,0,0,3,1,1,FALSE,FALSE,'SHIPPER' + tSQ + 'S SIGNATURE');
        CarrierLabelMgt.WriteLabelText2(LabelFile,300,745,0,0,3,1,1,FALSE,FALSE,'DATE:');
        CarrierLabelMgt.WriteLabelText2(
          LabelFile,380,790,0,0,2,1,1,FALSE,FALSE,UPSlinkSetup.UPSlinkVersion + PrinterText +
          ShippingSetup."UPS Routing Version");
      END ELSE BEGIN
        CarrierLabelMgt.WriteLabelLine(LabelFile,0,1115,790,5);
        CarrierLabelMgt.WriteLabelText2(LabelFile,10,1135,0,0,3,1,1,FALSE,FALSE,'SHIPPER' + tSQ + 'S SIGNATURE');
        CarrierLabelMgt.WriteLabelText2(LabelFile,300,1135,0,0,3,1,1,FALSE,FALSE,'DATE:');
        CarrierLabelMgt.WriteLabelText2(
          LabelFile,380,1223,0,0,2,1,1,FALSE,FALSE,UPSlinkSetup.UPSlinkVersion + PrinterText +
          ShippingSetup."UPS Routing Version");
      END;

      CarrierLabelMgt.WriteLabelFooter(LabelFile);
      CarrierLabelMgt.CloseLabelFile(LabelFile);

      CurrentPackage.InsertLabelFile(
        LabelFileName,Text069,11,
        CarrierPackingStation."UPS Label Printer Port",PackingStation.Code,
        NOT PackingStation."No Label Printer",PackingStation."Do Not Import Label File");

      PackingStation.PrintLabelFile(
        LabelFileName,CarrierPackingStation."UPS Label Printer Port",
        PackingStation."No Label Printer",PackingStation."Auto Delete Label Buffer File");
    END;

    PROCEDURE DirectPrintTempLabel@1240030020(CurrentPackage@1240030000 : Record 14000701;CurrentUPSOptionPage@1240030010 : Record 14000761;LabelFileName@1240030003 : Text[250];MediaType@1240030004 : Integer;FromLine@1240030001 : ARRAY [15] OF Text[100];ToLine@1240030002 : ARRAY [15] OF Text[100];TrackingNumber@1240030008 : Text[100]);
    VAR
      LabelFile@1000000012 : File;
      CarrierLabelMgt@1240030007 : Codeunit 14000712;
      LabelWidth@1240030006 : Integer;
      LabelHeight@1240030005 : Integer;
      PrinterText@1240030009 : Text[30];
    BEGIN
      WITH CurrentPackage DO BEGIN
        GetShippingSetup;
        GetPackingStation;
        CarrierPackingStation.GetPackingStation(PackingStation);

        CarrierLabelMgt.OpenLabelFile(LabelFile,LabelFileName);

        CASE CarrierPackingStation."UPS Label Printer Type" OF
          CarrierPackingStation."UPS Label Printer Type"::"Eltron Orion":
            BEGIN
              CarrierLabelMgt.WriteLabelHeader(
                LabelFile,2,
                GetLabelMgtMediaType(
                  CarrierPackingStation."UPS Eltron Label Media Type",CurrentUPSOptionPage),
                CarrierPackingStation."UPS Print From",LabelWidth,LabelHeight);
              PrinterText := ' ELTRON ';
            END;
          CarrierPackingStation."UPS Label Printer Type"::Zebra:
            BEGIN
              CarrierLabelMgt.WriteLabelHeader(
                LabelFile,4,
                GetLabelMgtMediaType(
                  CarrierPackingStation."UPS Eltron Label Media Type",CurrentUPSOptionPage),
                CarrierPackingStation."UPS Print From",LabelWidth,LabelHeight);
              PrinterText := ' ZEBRA ';
            END;
        END;

        CarrierLabelMgt.WriteLabelText2(LabelFile,20,0,0,0,3,1,1,FALSE,FALSE,FromLine[1]);
        CarrierLabelMgt.WriteLabelText2(LabelFile,20,25,0,0,3,1,1,FALSE,FALSE,FromLine[2]);
        CarrierLabelMgt.WriteLabelText2(LabelFile,20,50,0,0,3,1,1,FALSE,FALSE,FromLine[3]);
        CarrierLabelMgt.WriteLabelText2(LabelFile,20,75,0,0,3,1,1,FALSE,FALSE,FromLine[4]);

        IF FromLine[5] <> '' THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,100,0,0,3,1,1,FALSE,FALSE,FromLine[5]);
          IF FromLine[6] <> '' THEN BEGIN
            CarrierLabelMgt.WriteLabelText2(LabelFile,20,125,0,0,3,1,1,FALSE,FALSE,FromLine[6]);
            IF FromLine[7] <> '' THEN
              CarrierLabelMgt.WriteLabelText2(LabelFile,20,150,0,0,3,1,1,FALSE,FALSE,FromLine[7]);
          END;
        END;

        CarrierLabelMgt.WriteLabelText2(LabelFile,20,180,0,0,4,1,2,FALSE,FALSE,'SHIP');
        CarrierLabelMgt.WriteLabelText2(LabelFile,20,230,0,0,4,1,2,FALSE,FALSE,'TO:');
        CarrierLabelMgt.WriteLabelText2(LabelFile,100,180,0,0,3,1,2,FALSE,FALSE,ToLine[1]);
        CarrierLabelMgt.WriteLabelText2(LabelFile,100,220,0,0,3,1,2,FALSE,FALSE,ToLine[2]);
        CarrierLabelMgt.WriteLabelText2(LabelFile,100,260,0,0,3,1,2,FALSE,FALSE,ToLine[3]);

        IF ToLine[6] <> '' THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,100,300,0,0,3,1,2,FALSE,FALSE,ToLine[4]);
          IF ToLine[7] <> '' THEN BEGIN
            CarrierLabelMgt.WriteLabelText2(LabelFile,100,340,0,0,3,1,2,FALSE,FALSE,ToLine[5]);
            CarrierLabelMgt.WriteLabelText2(LabelFile,100,380,0,0,3,1,2,FALSE,FALSE,ToLine[6]);
            CarrierLabelMgt.WriteLabelText2(LabelFile,100,420,0,0,3,2,2,FALSE,FALSE,ToLine[7]);
          END ELSE BEGIN
            CarrierLabelMgt.WriteLabelText2(LabelFile,100,340,0,0,3,1,2,FALSE,FALSE,ToLine[5]);
            CarrierLabelMgt.WriteLabelText2(LabelFile,100,380,0,0,3,2,2,FALSE,FALSE,ToLine[6]);
          END;
        END ELSE BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,100,300,0,0,3,1,2,FALSE,FALSE,ToLine[4]);
          CarrierLabelMgt.WriteLabelText2(LabelFile,100,340,0,0,3,2,2,FALSE,FALSE,ToLine[5]);
        END;

        CarrierLabelMgt.WriteLabelLine(LabelFile,0,460,800,10);
        CarrierLabelMgt.WriteLabelText2(LabelFile,50,475,0,0,3,3,3,FALSE,FALSE,'Temporary Label');
        CarrierLabelMgt.WriteLabelLine(LabelFile,0,540,800,10);

        CarrierLabelMgt.WriteLabelText2(LabelFile,50,560,0,0,3,3,3,FALSE,FALSE,Text064);
        CarrierLabelMgt.WriteLabelText2(LabelFile,50,625,0,0,3,3,3,FALSE,FALSE,Text065);
        CarrierLabelMgt.WriteLabelText2(LabelFile,50,690,0,0,3,3,3,FALSE,FALSE,Text066);
        CarrierLabelMgt.WriteLabelText2(LabelFile,50,755,0,0,3,3,3,FALSE,FALSE,Text067);

        CarrierLabelMgt.WriteLabelText2(LabelFile,20,825,0,0,4,1,1,FALSE,FALSE,TrackingNumber);

        CarrierLabelMgt.WriteLabelFooter(LabelFile);
        CarrierLabelMgt.CloseLabelFile(LabelFile);

        PackingStation.PrintLabelFile(
          LabelFileName,CarrierPackingStation."UPS Label Printer Port",
          PackingStation."No Label Printer",PackingStation."Auto Delete Label Buffer File");
      END;
    END;

    PROCEDURE PrintPickupLabel@54(PickupCode@1000000000 : Code[15];PickupDate@1000000001 : Date;LastAccountNo@1000000002 : Code[30];ShippingInfo@1000000003 : Text[30];DomesticPackageCount@1000000004 : Integer;IntPackageCount@1000000005 : Decimal;MidPackCount@1000000006 : Decimal;BigPackCount@1000000007 : Decimal;CODPackCount@1000000008 : Decimal;NextDayAirPackages@1000000009 : Integer;SecondDayAirPackages@1000000010 : Integer;ThirdDayAirPackages@1000000011 : Integer;IntShipments@1240030000 : Decimal) : Text[250];
    VAR
      ManifestHeader@1240030003 : Record 14000712;
      ManifestLine@1240030006 : Record 14000713;
      UPSUploadedManifest@1240030002 : Record 14050009;
      AddressLine@1000000012 : ARRAY [15] OF Text[60];
      i@1000000013 : Integer;
      OpenManifests@1240030001 : Integer;
      PLDStatus@1240030005 : Code[10];
      CarrierLabelMgt@1240030009 : Codeunit 14000712;
      LabelWidth@1240030007 : Integer;
      LabelHeight@1240030004 : Integer;
      LabelFile@1240030011 : File;
      CheckDigit@1240030010 : Integer;
      TotalCount@1240030008 : Decimal;
      Printertext@1240030012 : Text[30];
      LabelFileName@1240030013 : Text[250];
    BEGIN
      GetPackingStation;
      CarrierPackingStation.GetPackingStation(PackingStation);
      CarrierPackingStation.TESTFIELD("UPS Buffer File");
      GetShippingSetup;
      GetUPSlinkSetup;

      CLEAR(AddressLine);
      i := 1;
      SetArrayField(AddressLine,i,FALSE,CleanString(PackingStation."Ship-from Contact"));
      SetArrayField(AddressLine,i,TRUE,CleanString(PackingStation."Ship-from Company"));
      SetArrayField(AddressLine,i,FALSE,CleanString(PackingStation."Ship-from Address2"));
      SetArrayField(AddressLine,i,TRUE,CleanString(PackingStation."Ship-from Address"));

      SetArrayField(
        AddressLine,i,TRUE,
        CreateZipString(
          PackingStation."Ship-from City",PackingStation."Ship-from State",
          FixZipCodePrint(PackingStation."Ship-from ZIP Code",''),''));

      ManifestHeader.SETRANGE(Posted,TRUE);
      ManifestHeader.SETRANGE("UPS Processing Required",TRUE);
      ManifestHeader.SETFILTER("Pickup Date",'<>%1',PickupDate);

      IF ManifestHeader.FIND('-') THEN BEGIN
        UPSUploadedManifest.SETCURRENTKEY("Manifest No.");
        UPSUploadedManifest.SETRANGE("Manifest No.",ManifestHeader."No.");
        UPSUploadedManifest.SETRANGE("Shipping Agent Account No.",LastAccountNo);

        IF NOT UPSUploadedManifest.FIND('-') THEN
          PLDStatus := '94';
      END;

      IF PLDStatus <> '94' THEN BEGIN
        ManifestLine.SETCURRENTKEY(
          "Manifest No.","Shipping Agent Account No.","Shipping Agent Code","World Wide Service",
          "Shipping Agent Service","Ship-to Address","Ship-to ZIP Code");

        ManifestHeader.SETRANGE(Posted,FALSE);
        ManifestHeader.SETRANGE("UPS Processing Required");

        IF ManifestHeader.FIND('-') THEN
          REPEAT
            ManifestLine.SETRANGE("Manifest No.",ManifestHeader."No.");
            ManifestLine.SETRANGE("Shipping Agent Account No.",LastAccountNo);
            IF ManifestLine.FIND('-') THEN
              OpenManifests := OpenManifests + 1;
          UNTIL ManifestHeader.NEXT = 0;

        CASE OpenManifests OF
          0:
            PLDStatus := '91';
          1:
            PLDStatus := '90';
          2:
            PLDStatus := '92';
          3:
            PLDStatus := '93';
          ELSE
            PLDStatus := '93';
        END;
      END;

      IF NOT(UPSlinkSetup."UPS Label Cert. Submission") THEN
        PLDStatus := '91';

      LabelFileName := PackingStation.CalcLabelFileName(CarrierPackingStation."UPS Buffer File");
      CarrierLabelMgt.OpenLabelFile(LabelFile,LabelFileName);

      CASE CarrierPackingStation."UPS Label Printer Type" OF
        CarrierPackingStation."UPS Label Printer Type"::"Eltron Orion":
          BEGIN
            CarrierLabelMgt.WriteLabelHeader(
              LabelFile,2,CarrierPackingStation."UPS Eltron Label Media Type",
              CarrierPackingStation."UPS Print From",LabelWidth,LabelHeight);
            Printertext := ' ELTRON ';
          END;
        CarrierPackingStation."UPS Label Printer Type"::Zebra:
          BEGIN
            CarrierLabelMgt.WriteLabelHeader(
              LabelFile,4,CarrierPackingStation."UPS Eltron Label Media Type",
              CarrierPackingStation."UPS Print From",LabelWidth,LabelHeight);
            Printertext := ' ZEBRA ';
          END;
      END;

      CarrierLabelMgt.WriteLabelText2(
        LabelFile,20,10,0,0,3,1,2,FALSE,FALSE,'PICKUP SUMMARY BAR CODE REPORT');
      CarrierLabelMgt.WriteLabelText2(LabelFile,20,52,0,0,2,1,2,FALSE,FALSE,'SHIP DATE:');

      CarrierLabelMgt.WriteLabelText2(
        LabelFile,160,50,0,0,3,1,2,FALSE,FALSE,
        UPPERCASE(
          COPYSTR(
            FORMAT(PickupDate,0,'<Month Text>'),1,3) + ' ' +
            FORMAT(PickupDate,0,'<Day>,<Year4>')));

      CarrierLabelMgt.WriteLabelText2(LabelFile,20,92,0,0,2,1,2,FALSE,FALSE,'SHIPPING RECORD:');
      CarrierLabelMgt.WriteLabelText2(LabelFile,230,90,0,0,3,1,2,FALSE,FALSE,PickupCode);
      CarrierLabelMgt.WriteLabelText2(LabelFile,20,132,0,0,2,1,2,FALSE,FALSE,'ACCOUNT NUMBER:');
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,220,130,25,0,3,1,2,FALSE,FALSE,
        COPYSTR(LastAccountNo,1,3) + ' - ' + COPYSTR(LastAccountNo,4,3));

      CarrierLabelMgt.WriteLabelText2(LabelFile,20,172,0,0,2,1,2,FALSE,FALSE,'CUSTOMER');
      CarrierLabelMgt.WriteLabelText2(LabelFile,60,210,0,0,3,1,2,FALSE,FALSE,AddressLine[1]);
      CarrierLabelMgt.WriteLabelText2(LabelFile,60,250,0,0,3,1,2,FALSE,FALSE,AddressLine[2]);
      CarrierLabelMgt.WriteLabelText2(LabelFile,60,290,0,0,3,1,2,FALSE,FALSE,AddressLine[3]);

      IF AddressLine[4] <> '' THEN
        CarrierLabelMgt.WriteLabelText2(LabelFile,60,330,0,0,3,1,2,FALSE,FALSE,AddressLine[4]);
      IF AddressLine[5] <> '' THEN
        CarrierLabelMgt.WriteLabelText2(LabelFile,60,370,0,0,3,1,2,FALSE,FALSE,AddressLine[5]);

      CarrierLabelMgt.WriteLabelLine(LabelFile,0,400,800,20);
      CheckDigit := GetCheckDigit(ShippingInfo);

      CarrierLabelMgt.WriteLabelText2(
        LabelFile,200,430,0,0,3,1,2,FALSE,FALSE,PLDStatus + ' '+ COPYSTR(ShippingInfo,1,3) + ' ' +
        COPYSTR(ShippingInfo,4,3) + ' ' + COPYSTR(ShippingInfo,7,4) + ' ' + COPYSTR(ShippingInfo,11,5) +
        ' ' + COPYSTR(ShippingInfo,16,5) + STRSUBSTNO(' %1',CheckDigit));

      CarrierLabelMgt.WriteLabelBarCode(
        LabelFile,100,470,0,0,'1',3,6,200,FALSE,
        PLDStatus + ShippingInfo + STRSUBSTNO('%1',CheckDigit));

      CarrierLabelMgt.WriteLabelLine(LabelFile,0,690,800,20);
      CarrierLabelMgt.WriteLabelText2(LabelFile,20,720,0,0,3,2,2,FALSE,FALSE,'DRIVER SUMMARY');

      TotalCount := IntPackageCount + DomesticPackageCount;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,20,760,0,0,3,1,2,FALSE,FALSE,'TOTAL NUMBER OF PACKAGES = ' +
        FORMAT(TotalCount,0,'<Integer Thousand>'));

      IF (MidPackCount > 0) OR
         (BigPackCount > 0)
      THEN
        CarrierLabelMgt.WriteLabelText2(
          LabelFile,20,800,0,0,3,1,2,FALSE,FALSE,'UPS CONTROL LOG REQUIRED');

      TotalCount := NextDayAirPackages;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,20,850,0,0,3,1,2,FALSE,FALSE,'1DA ' + FORMAT(TotalCount,0,'<Integer Thousand>'));
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,400,850,0,0,3,1,2,FALSE,FALSE,'INT`L pkgs ' +
        FORMAT(IntPackageCount,0,'<Integer Thousand>') + ' / shpts ' +
        FORMAT(IntShipments,0,'<Integer Thousand>'));

      TotalCount := SecondDayAirPackages;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,20,890,0,0,3,1,2,FALSE,FALSE,'2DA ' + FORMAT(TotalCount,0,'<Integer Thousand>'));
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,400,890,0,0,3,1,2,FALSE,FALSE,'CODS ' + FORMAT(CODPackCount,0,'<Integer Thousand>'));

      TotalCount := ThirdDayAirPackages;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,20,930,0,0,3,1,2,FALSE,FALSE,'3DS ' + FORMAT(TotalCount,0,'<Integer Thousand>'));
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,20,975,0,0,3,1,1,FALSE,FALSE,'SHIPMENTS SUBJECT TO TERMS OF AGREEMENT ON FILE');
      CarrierLabelMgt.WriteLabelLine(LabelFile,0,1005,800,5);

      CarrierLabelMgt.WriteLabelText2(LabelFile,20,1055,0,0,3,1,2,FALSE,FALSE,'Received By:');

      IF PLDStatus = '91' THEN
        CarrierLabelMgt.WriteLabelLine(LabelFile,190,1085,600,5)
      ELSE BEGIN
        CarrierLabelMgt.WriteLabelText2(LabelFile,620,1055,0,0,3,1,2,FALSE,FALSE,'PENDING PLD');
        CarrierLabelMgt.WriteLabelLine(LabelFile,190,1085,400,5);
      END;

      CarrierLabelMgt.WriteLabelText2(LabelFile,20,1115,0,0,3,1,2,FALSE,FALSE,'Pickup Time:');
      CarrierLabelMgt.WriteLabelLine(LabelFile,190,1145,325,5);
      CarrierLabelMgt.WriteLabelText2(LabelFile,550,1115,0,0,3,1,2,FALSE,FALSE,'Pkgs:');
      CarrierLabelMgt.WriteLabelLine(LabelFile,620,1145,200,5);

      Printertext := Printertext + CarrierPackingStation."UPSlink Printer Model" + ' ';

      ShippingSetup.TESTFIELD("UPS Routing Version");
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,380,1225,0,0,1,1,1,FALSE,FALSE,UPSlinkSetup.UPSlinkVersion + Printertext +
        ShippingSetup."UPS Routing Version");

      CarrierLabelMgt.WriteLabelFooter(LabelFile);
      CarrierLabelMgt.CloseLabelFile(LabelFile);

      PackingStation.PrintLabelFile(
        LabelFileName,CarrierPackingStation."UPS Label Printer Port",
        PackingStation."No Label Printer",FALSE);

      EXIT(LabelFileName);
    END;

    LOCAL PROCEDURE DirectPrintDomesticSmallLabel@1240020005(CurrentPackage@1240030000 : Record 14000701;FromLine@1240030001 : ARRAY [15] OF Text[100];ToLine@1240030002 : ARRAY [15] OF Text[100];AddressBlock@1240030003 : ARRAY [15] OF Text[100];ZIPBarCode@1240030004 : Text[100];RoutingCode@1240030005 : Code[15];MaxiCode@1240030006 : Text[250];ShippingServiceCode@1240030007 : Text[100];BarCodeReadable@1240030008 : Text[100];ServiceIconText@1240030009 : Text[30];AdditionalRouting@1240030010 : ARRAY [15] OF Text[100];ItemLabelInfo@1240030011 : ARRAY [10,8] OF Text[50];CallTag@1240030012 : Boolean);
    VAR
      LabelFileName@1000000011 : Text[250];
      LabelFile@1000000012 : File;
      i@1240030013 : Integer;
      x@1240020000 : Integer;
      CarrierLabelMgt@1240030016 : Codeunit 14000712;
      LabelWidth@1240030015 : Integer;
      LabelHeight@1240030014 : Integer;
      PrinterText@1240030017 : Text[30];
    BEGIN
      WITH CurrentPackage DO BEGIN
        GetShippingSetup;
        GetPackingStation;
        CarrierPackingStation.GetPackingStation(PackingStation);
        GetShippingAgent("Shipping Agent Code");
        TESTFIELD("Shipping Agent Account No.");

        GetShippingAgentAccount("Shipping Agent Account No.");
        GetShippingAgentService("Shipping Agent Code","Shipping Agent Service","World Wide Service");
        GetUPSlinkSetup;

        CarrierPackingStation.TESTFIELD("UPS Buffer File");
        LabelFileName := PackingStation.CalcLabelFileName(CarrierPackingStation."UPS Buffer File");
        CarrierLabelMgt.OpenLabelFile(LabelFile,LabelFileName);

        CASE CarrierPackingStation."UPS Label Printer Type" OF
          CarrierPackingStation."UPS Label Printer Type"::"Eltron Orion":
            BEGIN
              x := 460;
              CarrierLabelMgt.WriteLabelHeader(
                LabelFile,2,CarrierPackingStation."UPS Eltron Label Media Type",
                CarrierPackingStation."UPS Print From",LabelWidth,LabelHeight);
              PrinterText := ' ELTRON ';
            END;
          CarrierPackingStation."UPS Label Printer Type"::Zebra:
            BEGIN
              x := 572;
              CarrierLabelMgt.WriteLabelHeader(
                LabelFile,4,CarrierPackingStation."UPS Eltron Label Media Type",
                CarrierPackingStation."UPS Print From",LabelWidth,LabelHeight);
              PrinterText := ' ZEBRA ';
            END;
        END;
        CarrierLabelMgt.WriteLabelText2(LabelFile,20,14,10,0,2,1,1,FALSE,FALSE,FromLine[1]);
        CarrierLabelMgt.WriteLabelText2(LabelFile,20,38,10,0,2,1,1,FALSE,FALSE,FromLine[2]);
        CarrierLabelMgt.WriteLabelText2(LabelFile,20,62,10,0,2,1,1,FALSE,FALSE,FromLine[3]);
        CarrierLabelMgt.WriteLabelText2(LabelFile,20,86,10,0,2,1,1,FALSE,FALSE,FromLine[4]);

        IF FromLine[5] <> '' THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,110,10,0,2,1,1,FALSE,FALSE,FromLine[5]);
          IF FromLine[6] <> '' THEN
            CarrierLabelMgt.WriteLabelText2(LabelFile,20,134,10,0,2,1,1,FALSE,FALSE,FromLine[6]);
        END;

        IF COPYSTR(AddressBlock[1],STRLEN(AddressBlock[1])-2,3) IN ['PAK','LTR'] THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,300,14,30,0,3,1,2,FALSE,FALSE,AddressBlock[1])
        ELSE
          CarrierLabelMgt.WriteLabelText2(LabelFile,425,14,30,0,3,1,2,FALSE,FALSE,AddressBlock[1]);

        CarrierLabelMgt.WriteLabelText2(LabelFile,645,14,30,0,3,1,2,FALSE,FALSE,AddressBlock[2]);

        i := 54;

        IF AddressBlock[3] IN ['COD','RS','PRO','RFG','LP','AH'] THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,560,i,10,0,3,2,2,FALSE,FALSE,AddressBlock[3]);
          i := i + 40;
        END ELSE IF COPYSTR(AddressBlock[3],1,3) IN ['DWT'] THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,520,i,10,0,3,1,2,FALSE,FALSE,AddressBlock[3]);
        END ELSE BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,550,i,10,0,3,1,2,FALSE,FALSE,AddressBlock[3]);
          i := i + 25;
        END;

        IF AddressBlock[4] IN ['RS','PRO','RFG'] THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,500,i,10,0,3,2,2,FALSE,FALSE,AddressBlock[4]);
          i := i + 40;
        END ELSE BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,560,i,10,0,3,2,2,FALSE,FALSE,AddressBlock[4]);
          i := i + 25;
        END;

        IF AddressBlock[5] <> '' THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,550,i,10,0,3,2,2,FALSE,FALSE,AddressBlock[5]);
          i := i + 40;
        END;

        IF AddressBlock[6] <> '' THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,625,i,10,0,3,1,1,FALSE,FALSE,AddressBlock[6]);
          i := i + 25;
        END;

        IF AddressBlock[7] <> '' THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,625,i,10,0,3,1,1,FALSE,FALSE,AddressBlock[7]);
          i := i + 25;
        END;

        CarrierLabelMgt.WriteLabelText2(LabelFile,150,168,10,0,3,1,2,FALSE,FALSE,'SHIP');
        CarrierLabelMgt.WriteLabelText2(LabelFile,150,208,10,0,3,1,2,FALSE,FALSE,'TO:');
        CarrierLabelMgt.WriteLabelText2(LabelFile,265,160,10,0,1,2,2,FALSE,FALSE,
          COPYSTR(ToLine[1],1,32));
        CarrierLabelMgt.WriteLabelText2(LabelFile,265,185,10,0,1,2,2,FALSE,FALSE,
          COPYSTR(ToLine[2],1,32));
        CarrierLabelMgt.WriteLabelText2(LabelFile,265,210,10,0,4,1,1,FALSE,FALSE,
          COPYSTR(ToLine[3],1,32));

        i := 235;

        IF ToLine[5] <> '' THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,265,i,10,0,4,1,1,FALSE,FALSE,
            COPYSTR(ToLine[5],1,32));
          i := i + 25;
        END;

        IF ToLine[6] <> '' THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,265,i,10,0,3,1,2,FALSE,FALSE,
            COPYSTR(ToLine[6],1,32));
          i := i + 35;
        END;

        IF ToLine[7] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,265,i,10,0,3,1,2,FALSE,FALSE,
            COPYSTR(ToLine[7],1,32));

        CarrierLabelMgt.WriteLabelLine(LabelFile,0,270,235,4);

        IF MaxiCode = 'H' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,73,330,0,0,4,5,5,FALSE,FALSE,MaxiCode)
        ELSE
          CarrierLabelMgt.WriteLabelBarCode(LabelFile,10,280,3,0,'UPSM2',0,0,0,FALSE,MaxiCode);

        CarrierLabelMgt.WriteLabelLine(LabelFile,235,330,565,4);
        CarrierLabelMgt.WriteLabelText2(LabelFile,320,340,0,0,4,2,2,FALSE,FALSE,RoutingCode);
        CarrierLabelMgt.WriteLabelBarCode(LabelFile,325,390,0,0,'1',3,12,105,FALSE,ZIPBarCode);
        CarrierLabelMgt.WriteLabelLine(LabelFile,235,270,4,230);
        CarrierLabelMgt.WriteLabelLine(LabelFile,0,500,800,4);
        CarrierLabelMgt.WriteLabelText2(LabelFile,20,513,0,0,2,2,2,FALSE,FALSE,ShippingServiceCode);

        CarrierLabelMgt.WriteLabelText2(LabelFile,20,560,0,0,2,1,2,FALSE,FALSE,BarCodeReadable);

        IF STRLEN(ServiceIconText) >= 3 THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,680,508,-30,0,4,2,3,FALSE,FALSE,ServiceIconText)
        ELSE
          IF STRLEN(ServiceIconText) > 0 THEN
            CarrierLabelMgt.WriteLabelText2(LabelFile,685,508,0,0,4,2,3,FALSE,FALSE,ServiceIconText)
          ELSE
            CarrierLabelMgt.WriteLabelLine(LabelFile,700,500,99,99);

        CarrierLabelMgt.WriteLabelLine(LabelFile,0,598,800,4);
        IF WideBarCode("External Tracking No.") THEN
          CarrierLabelMgt.WriteLabelBarCode(LabelFile,110,609,0,0,'1',3,9,135,FALSE,"External Tracking No.")
        ELSE
          CarrierLabelMgt.WriteLabelBarCode(LabelFile,75,609,0,0,'1',4,12,135,FALSE,"External Tracking No.");

        CarrierLabelMgt.WriteLabelLine(LabelFile,0,754,800,4);

        CarrierLabelMgt.WriteLabelText2(LabelFile,20,767,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[1]);
        IF AdditionalRouting[2] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,790,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[2]);
        IF AdditionalRouting[3] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,813,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[3]);
        IF AdditionalRouting[4] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,836,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[4]);
        IF AdditionalRouting[5] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,859,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[5]);
        IF (AdditionalRouting[6] <> '') AND (AdditionalRouting[5] = '') THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,859,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[6]);
        IF (AdditionalRouting[6] <> '') AND (AdditionalRouting[5] <> '') THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,882,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[6]);
        IF (AdditionalRouting[7] <> '') AND (AdditionalRouting[6] = '') THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,882,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[7]);

        PrinterText := PrinterText + CarrierPackingStation."UPSlink Printer Model" + ' ';

        x -= (STRLEN(UPSlinkSetup.UPSlinkVersion) + STRLEN(PrinterText) +
          STRLEN(ShippingSetup."UPS Routing Version"));

        ShippingSetup.TESTFIELD("UPS Routing Version");
        CarrierLabelMgt.WriteLabelText2(
          LabelFile,x,850,10,0,1,1,1,FALSE,FALSE,
          UPSlinkSetup.UPSlinkVersion + PrinterText + ShippingSetup."UPS Routing Version");

        IF CarrierPackingStation."UPS Add Item Info. on Label" THEN
          CASE CarrierPackingStation."UPS Label Printer Type" OF
            CarrierPackingStation."UPS Label Printer Type"::"Eltron Orion":
              Shipping.DirectPrintOrionLabelInfo(LabelFile,ItemLabelInfo);
            CarrierPackingStation."UPS Label Printer Type"::Zebra:
              Shipping.DirectPrintZebraLabelInfo(LabelFile,ItemLabelInfo);
          END;

        CarrierLabelMgt.WriteLabelFooter(LabelFile);
        CarrierLabelMgt.CloseLabelFile(LabelFile);

        InsertLabelFile(
          LabelFileName,Text019,11,
          CarrierPackingStation."UPS Label Printer Port",PackingStation.Code,
          NOT PackingStation."No Label Printer",PackingStation."Do Not Import Label File");

        PackingStation.PrintLabelFile(
          LabelFileName,CarrierPackingStation."UPS Label Printer Port",
          PackingStation."No Label Printer",PackingStation."Auto Delete Label Buffer File");
      END;
    END;

    LOCAL PROCEDURE DirectPrintIntSmallLabel@1240020002(CurrentPackage@1240030000 : Record 14000701;CurrentUPSOptionPage@1240030018 : Record 14000761;FromLine@1240030001 : ARRAY [15] OF Text[100];ToLine@1240030002 : ARRAY [15] OF Text[100];AddressBlock@1240030003 : ARRAY [15] OF Text[100];ZIPBarCode@1240030004 : Text[100];RoutingCode@1240030005 : Code[15];MaxiCode@1240030006 : Text[250];ShippingServiceCode@1240030007 : Text[100];BarCodeReadable@1240030008 : Text[100];ServiceIconText@1240030009 : Text[30];AdditionalRouting@1240030010 : ARRAY [15] OF Text[100];InternationalText@1240030013 : ARRAY [15] OF Text[30];ItemLabelInfo@1240030011 : ARRAY [10,8] OF Text[50];LabelPrinterType@1240030020 : ',Eltron Orion,Zebra';Packageweight@1240030021 : Text[30]);
    VAR
      LabelFileName@1000000011 : Text[250];
      LabelFile@1000000012 : File;
      i@1240030012 : Integer;
      x@1240020001 : Integer;
      CarrierLabelMgt@1240030016 : Codeunit 14000712;
      LabelWidth@1240030015 : Integer;
      LabelHeight@1240030014 : Integer;
      LabelCount@1240020000 : Integer;
      PrinterText@1240030017 : Text[30];
      PrinterPort@1240030019 : Code[100];
    BEGIN
      WITH CurrentPackage DO BEGIN
        GetShippingSetup;
        GetPackingStation;
        CarrierPackingStation.GetPackingStation(PackingStation);
        GetShippingAgent("Shipping Agent Code");
        TESTFIELD("Shipping Agent Account No.");

        GetShippingAgentAccount("Shipping Agent Account No.");
        GetShippingAgentService("Shipping Agent Code","Shipping Agent Service","World Wide Service");
        GetUPSlinkSetup;

        CarrierPackingStation.TESTFIELD("UPS Buffer File");
        LabelFileName := PackingStation.CalcLabelFileName(CarrierPackingStation."UPS Buffer File");
        CarrierLabelMgt.OpenLabelFile(LabelFile,LabelFileName);

        LabelPrinterType := CarrierPackingStation."UPS Label Printer Type";
        PrinterPort := CarrierPackingStation."UPS Label Printer Port";

        CASE LabelPrinterType OF
          LabelPrinterType::"Eltron Orion":
            BEGIN
              x := 460;
              CarrierLabelMgt.WriteLabelHeader(
                LabelFile,2,
                GetLabelMgtMediaType(
                  CarrierPackingStation."UPS Eltron Label Media Type",CurrentUPSOptionPage),
                CarrierPackingStation."UPS Print From",LabelWidth,LabelHeight);
              PrinterText := ' ELTRON ';
            END;
          LabelPrinterType::Zebra:
            BEGIN
               x := 572;
              CarrierLabelMgt.WriteLabelHeader(
                LabelFile,4,
                GetLabelMgtMediaType(
                  CarrierPackingStation."UPS Eltron Label Media Type",CurrentUPSOptionPage),
                CarrierPackingStation."UPS Print From",LabelWidth,LabelHeight);
              PrinterText := ' ZEBRA ';
            END;
        END;

        CarrierLabelMgt.WriteLabelText2(LabelFile,20,14,0,0,2,1,1,FALSE,FALSE,FromLine[1]);
        CarrierLabelMgt.WriteLabelText2(LabelFile,20,38,0,0,2,1,1,FALSE,FALSE,FromLine[2]);
        CarrierLabelMgt.WriteLabelText2(LabelFile,20,62,0,0,2,1,1,FALSE,FALSE,FromLine[3]);
        CarrierLabelMgt.WriteLabelText2(LabelFile,20,86,0,0,2,1,1,FALSE,FALSE,FromLine[4]);

        IF FromLine[5] <> '' THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,110,0,0,2,1,1,FALSE,FALSE,FromLine[5]);
          IF FromLine[6] <> '' THEN BEGIN
            CarrierLabelMgt.WriteLabelText2(LabelFile,20,134,0,0,2,1,1,FALSE,FALSE,
              COPYSTR(FromLine[6],1,20));
            IF FromLine[7] <> '' THEN
              CarrierLabelMgt.WriteLabelText2(LabelFile,20,158,0,0,2,1,1,FALSE,FALSE,FromLine[7]);
          END;
        END;

        IF COPYSTR(AddressBlock[1],STRLEN(AddressBlock[1])-2,3) IN ['BOX','PAK','LTR'] THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,300,14,30,0,3,2,1,FALSE,FALSE,AddressBlock[1])
        ELSE
          CarrierLabelMgt.WriteLabelText2(LabelFile,405,14,30,0,3,2,1,FALSE,FALSE,AddressBlock[1]);

        CarrierLabelMgt.WriteLabelText2(LabelFile,655,14,0,0,1,2,2,FALSE,FALSE,AddressBlock[2]);

        IF AddressBlock[3] IN ['PRO'] THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,600,175,0,0,2,2,2,FALSE,FALSE,AddressBlock[3])
        ELSE IF AddressBlock[3] IN ['RFG'] THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,600,220,0,0,2,2,2,FALSE,FALSE,AddressBlock[3])
        ELSE IF AddressBlock[3] IN ['COD'] THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,600,50,0,0,2,2,2,FALSE,FALSE,AddressBlock[3])
        ELSE
          CarrierLabelMgt.WriteLabelText2(LabelFile,500,50,0,0,3,1,1,FALSE,FALSE,AddressBlock[3]);

        IF AddressBlock[4] <> '' THEN
          IF AddressBlock[4] IN ['PRO'] THEN
            CarrierLabelMgt.WriteLabelText2(LabelFile,600,175,0,0,2,2,2,FALSE,FALSE,AddressBlock[4])
          ELSE IF AddressBlock[4] IN ['RFG'] THEN
            CarrierLabelMgt.WriteLabelText2(LabelFile,600,220,0,0,2,2,2,FALSE,FALSE,AddressBlock[4])
          ELSE
            CarrierLabelMgt.WriteLabelText2(LabelFile,500,75,0,0,3,1,1,FALSE,FALSE,AddressBlock[4]);

        IF AddressBlock[5] <> '' THEN
          IF AddressBlock[5] IN ['PRO'] THEN
            CarrierLabelMgt.WriteLabelText2(LabelFile,600,175,0,0,2,2,2,FALSE,FALSE,AddressBlock[5])
          ELSE IF AddressBlock[5] IN ['RFG'] THEN
            CarrierLabelMgt.WriteLabelText2(LabelFile,600,220,0,0,2,2,2,FALSE,FALSE,AddressBlock[5])
          ELSE
            CarrierLabelMgt.WriteLabelText2(LabelFile,500,100,0,0,3,1,1,FALSE,FALSE,AddressBlock[5]);

        IF AddressBlock[6] <> ''THEN
          IF AddressBlock[6] IN ['PRO'] THEN
            CarrierLabelMgt.WriteLabelText2(LabelFile,600,175,0,0,2,2,2,FALSE,FALSE,AddressBlock[6])
          ELSE IF AddressBlock[6] IN ['RFG'] THEN
            CarrierLabelMgt.WriteLabelText2(LabelFile,600,220,0,0,2,2,2,FALSE,FALSE,AddressBlock[6])
          ELSE
            CarrierLabelMgt.WriteLabelText2(LabelFile,500,125,0,0,3,1,1,FALSE,FALSE,AddressBlock[6]);

        IF AddressBlock[7] <> '' THEN
          IF AddressBlock[7] IN ['PRO'] THEN
            CarrierLabelMgt.WriteLabelText2(LabelFile,600,175,0,0,2,2,2,FALSE,FALSE,AddressBlock[7])
          ELSE IF AddressBlock[7] IN ['RFG'] THEN
            CarrierLabelMgt.WriteLabelText2(LabelFile,600,220,0,0,2,2,2,FALSE,FALSE,AddressBlock[7])
          ELSE
            CarrierLabelMgt.WriteLabelText2(LabelFile,500,150,0,0,3,1,1,FALSE,FALSE,AddressBlock[7]);

        IF AddressBlock[8] <> '' THEN
          IF AddressBlock[8] IN ['PRO'] THEN
            CarrierLabelMgt.WriteLabelText2(LabelFile,600,175,0,0,2,2,2,FALSE,FALSE,AddressBlock[8])
          ELSE IF AddressBlock[8] IN ['RFG'] THEN
            CarrierLabelMgt.WriteLabelText2(LabelFile,600,220,0,0,2,2,2,FALSE,FALSE,AddressBlock[8])
          ELSE
            CarrierLabelMgt.WriteLabelText2(LabelFile,500,175,0,0,3,1,1,FALSE,FALSE,AddressBlock[8]);

        CarrierLabelMgt.WriteLabelText2(LabelFile,150,180,0,0,3,1,2,FALSE,FALSE,'SHIP');
        CarrierLabelMgt.WriteLabelText2(LabelFile,150,220,0,0,3,1,2,FALSE,FALSE,'TO:');
        CarrierLabelMgt.WriteLabelText2(LabelFile,265,135,0,0,4,1,1,FALSE,FALSE,
          COPYSTR(ToLine[1],1,30));
        CarrierLabelMgt.WriteLabelText2(LabelFile,265,160,0,0,4,1,1,FALSE,FALSE,
          COPYSTR(ToLine[2],1,30));
        CarrierLabelMgt.WriteLabelText2(LabelFile,265,185,0,0,4,1,1,FALSE,FALSE,
          COPYSTR(ToLine[3],1,30));

        i := 210;

        IF ToLine[4] <> '' THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,265,i,0,0,4,1,1,FALSE,FALSE,
            COPYSTR(ToLine[4],1,30));
          i := i + 25;
        END;

        IF ToLine[5] <> '' THEN BEGIN
          CarrierLabelMgt.WriteLabelText2(LabelFile,265,i,0,0,4,1,1,FALSE,FALSE,
            COPYSTR(ToLine[5],1,30));
          i := i + 25;
        END;

        IF ToLine[6] <> '' THEN BEGIN
          IF STRLEN(ToLine[7]) > 19 THEN BEGIN
            CarrierLabelMgt.WriteLabelText2(LabelFile,265,i,0,0,4,1,1,FALSE,FALSE,COPYSTR(ToLine[6],1,30));
            i := i + 25;
          END ELSE BEGIN
            CarrierLabelMgt.WriteLabelText2(LabelFile,265,i,0,0,3,1,2,FALSE,FALSE,COPYSTR(ToLine[6],1,30));
            i := i + 35;
          END;
        END;

        IF ToLine[7] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,265,i,0,0,3,1,2,FALSE,FALSE,COPYSTR(ToLine[7],1,30));

        CarrierLabelMgt.WriteLabelLine(LabelFile,0,270,236,4);
        CarrierLabelMgt.WriteLabelLine(LabelFile,235,310,565,4);

        IF CurrentUPSOptionPage."Call Tag Type" IN
           [CurrentUPSOptionPage."Call Tag Type"::None,
            CurrentUPSOptionPage."Call Tag Type"::"Print Return Label Only",
            CurrentUPSOptionPage."Call Tag Type"::"Exchange Outbound",
            CurrentUPSOptionPage."Call Tag Type"::"Exchange Return",
            CurrentUPSOptionPage."Call Tag Type"::"IC PRL"]
        THEN
          CarrierLabelMgt.WriteLabelBarCode(LabelFile,10,280,5,0,'UPSM3',0,0,0,FALSE,MaxiCode)
        ELSE
          CarrierLabelMgt.WriteLabelBarCode(LabelFile,10,280,5,0,'UPSM2',0,0,0,FALSE,MaxiCode);

        CarrierLabelMgt.WriteLabelLine(LabelFile,235,270,4,228);

        CarrierLabelMgt.WriteLabelText2(LabelFile,320,325,0,0,4,2,2,FALSE,FALSE,RoutingCode);

        IF WideBarCode(ZIPBarCode) THEN
          CarrierLabelMgt.WriteLabelBarCode(LabelFile,280,380,0,0,'1',3,9,105,FALSE,ZIPBarCode)
        ELSE
          CarrierLabelMgt.WriteLabelBarCode(LabelFile,320,380,0,0,'1',3,12,105,FALSE,ZIPBarCode);

        CarrierLabelMgt.WriteLabelLine(LabelFile,0,495,800,4);

        IF STRLEN(ShippingServiceCode) > 19 THEN BEGIN
          IF STRLEN(ShippingServiceCode) > 21 THEN
            CarrierLabelMgt.WriteLabelText2(LabelFile,20,508,0,0,1,2,2,FALSE,FALSE,ShippingServiceCode)
          ELSE
            CarrierLabelMgt.WriteLabelText2(LabelFile,20,508,0,0,1,2,2,FALSE,FALSE,ShippingServiceCode);
        END ELSE
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,508,0,0,2,2,2,FALSE,FALSE,ShippingServiceCode);

        CarrierLabelMgt.WriteLabelText2(LabelFile,20,560,0,0,2,1,2,FALSE,FALSE,BarCodeReadable);
        IF STRLEN(ServiceIconText) >= 3 THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,680,508,-30,0,4,2,3,FALSE,FALSE,ServiceIconText)
        ELSE
          IF STRLEN(ServiceIconText) > 0 THEN
            CarrierLabelMgt.WriteLabelText2(LabelFile,685,508,0,0,4,2,3,FALSE,FALSE,ServiceIconText)
          ELSE
            CarrierLabelMgt.WriteLabelLine(LabelFile,720,500,80,103);

        CarrierLabelMgt.WriteLabelLine(LabelFile,0,598,800,4);
        IF WideBarCode("External Tracking No.") THEN
          CarrierLabelMgt.WriteLabelBarCode(LabelFile,75,609,0,0,'1',3,9,135,FALSE,"External Tracking No.")
        ELSE
          CarrierLabelMgt.WriteLabelBarCode(LabelFile,75,609,0,0,'1',4,12,135,FALSE,"External Tracking No.");
        CarrierLabelMgt.WriteLabelLine(LabelFile,0,754,800,4);

        CarrierLabelMgt.WriteLabelText2(LabelFile,20,767,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[1]);
        CarrierLabelMgt.WriteLabelText2(LabelFile,20,790,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[2]);

        CarrierLabelMgt.WriteLabelText2(LabelFile,550,767,0,0,3,2,2,FALSE,FALSE,InternationalText[1]);
        IF InternationalText[2] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,525,813,0,0,3,1,1,FALSE,FALSE,InternationalText[2]);
        IF AdditionalRouting[3] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,813,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[3]);
        IF AdditionalRouting[4] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,836,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[4]);
        IF InternationalText[3] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,825,813,0,0,3,1,1,FALSE,FALSE,InternationalText[3]);
        IF AdditionalRouting[5] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,859,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[5]);
        IF AdditionalRouting[6] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,882,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[6]);
        IF AdditionalRouting[7] <> '' THEN
          CarrierLabelMgt.WriteLabelText2(LabelFile,20,905,0,0,3,1,1,FALSE,FALSE,AdditionalRouting[7]);

        ShippingSetup.TESTFIELD("UPS Routing Version");

        PrinterText := PrinterText + CarrierPackingStation."UPSlink Printer Model" + ' ';

        x -= (STRLEN(UPSlinkSetup.UPSlinkVersion) + STRLEN(PrinterText) +
         STRLEN(ShippingSetup."UPS Routing Version"));

        CarrierLabelMgt.WriteLabelText2(
          LabelFile,x,850,10,0,1,1,1,FALSE,FALSE,UPSlinkSetup.UPSlinkVersion + PrinterText +
          ShippingSetup."UPS Routing Version");
        IF CarrierPackingStation."UPS Add Item Info. on Label" THEN
          CASE CarrierPackingStation."UPS Label Printer Type" OF
            CarrierPackingStation."UPS Label Printer Type"::"Eltron Orion":
              Shipping.DirectPrintOrionLabelInfo(LabelFile,ItemLabelInfo);
            CarrierPackingStation."UPS Label Printer Type"::Zebra:
              Shipping.DirectPrintZebraLabelInfo(LabelFile,ItemLabelInfo);
          END;

        CarrierLabelMgt.WriteLabelFooter(LabelFile);
        CarrierLabelMgt.CloseLabelFile(LabelFile);

        InsertLabelFile(
          LabelFileName,Text019,11,PrinterPort,PackingStation.Code,
          NOT PackingStation."No Label Printer",PackingStation."Do Not Import Label File");

        PackingStation.PrintLabelFile(
          LabelFileName,PrinterPort,PackingStation."No Label Printer",
          PackingStation."Auto Delete Label Buffer File");

        IF "Service Indicator" = 'E1' THEN
          FOR LabelCount := 1 TO 4 DO
            PackingStation.PrintLabelFile(
              LabelFileName,PrinterPort,PackingStation."No Label Printer",
              PackingStation."Auto Delete Label Buffer File");
      END;
    END;

    PROCEDURE PrintPickupSmallLabel@1240020007(PickupCode@1000000000 : Code[15];PickupDate@1000000001 : Date;LastAccountNo@1000000002 : Code[30];ShippingInfo@1000000003 : Text[30];DomesticPackageCount@1000000004 : Integer;IntPackageCount@1000000005 : Decimal;MidPackCount@1000000006 : Decimal;BigPackCount@1000000007 : Decimal;CODPackCount@1000000008 : Decimal;NextDayAirPackages@1000000009 : Integer;SecondDayAirPackages@1000000010 : Integer;ThirdDayAirPackages@1000000011 : Integer;IntShipments@1240030000 : Decimal) : Text[250];
    VAR
      ManifestHeader@1240030003 : Record 14000712;
      ManifestLine@1240030006 : Record 14000713;
      UPSUploadedManifest@1240030002 : Record 14050009;
      AddressLine@1000000012 : ARRAY [15] OF Text[60];
      i@1000000013 : Integer;
      OpenManifests@1240030001 : Integer;
      PLDStatus@1240030005 : Code[10];
      CarrierLabelMgt@1240030009 : Codeunit 14000712;
      LabelWidth@1240030007 : Integer;
      LabelHeight@1240030004 : Integer;
      JulDayShip@1240020000 : Integer;
      LabelFile@1240030011 : File;
      CheckDigit@1240030010 : Integer;
      TotalCount@1240030008 : Decimal;
      TotalPackageCount@1240020009 : Decimal;
      EOT@1240020008 : Char;
      GS@1240020007 : Char;
      RS@1240020006 : Char;
      tEOT@1240020005 : Text[3];
      tGS@1240020004 : Text[3];
      tRS@1240020003 : Text[3];
      Printertext@1240030012 : Text[30];
      LabelFileName@1240030013 : Text[250];
      tJulDayShip@1240020001 : Text[10];
      DataMatrix@1240020002 : Text[250];
    BEGIN
      GetPackingStation;
      CarrierPackingStation.GetPackingStation(PackingStation);
      CarrierPackingStation.TESTFIELD("UPS Buffer File");
      GetShippingSetup;
      GetUPSlinkSetup;

      CLEAR(AddressLine);
      i := 1;
      SetArrayField(AddressLine,i,TRUE,CleanString(PackingStation."Ship-from Company"));
      SetArrayField(AddressLine,i,TRUE,CleanString(PackingStation."Ship-from Address"));

      SetArrayField(
        AddressLine,i,TRUE,
        CreateZipString(
          PackingStation."Ship-from City",PackingStation."Ship-from State",
          FixZipCodePrint(PackingStation."Ship-from ZIP Code",''),''));

      ManifestHeader.SETRANGE(Posted,TRUE);
      ManifestHeader.SETRANGE("UPS Processing Required",TRUE);
      ManifestHeader.SETFILTER("Pickup Date",'<>%1',PickupDate);

      IF ManifestHeader.FIND('-') THEN BEGIN
        UPSUploadedManifest.SETCURRENTKEY("Manifest No.");
        UPSUploadedManifest.SETRANGE("Manifest No.",ManifestHeader."No.");
        UPSUploadedManifest.SETRANGE("Shipping Agent Account No.",LastAccountNo);

        IF NOT UPSUploadedManifest.FIND('-') THEN
          PLDStatus := '94';
      END;

      IF PLDStatus <> '94' THEN BEGIN
        ManifestLine.SETCURRENTKEY(
          "Manifest No.","Shipping Agent Account No.","Shipping Agent Code","World Wide Service",
          "Shipping Agent Service","Ship-to Address","Ship-to ZIP Code");

        ManifestHeader.SETRANGE(Posted,FALSE);
        ManifestHeader.SETRANGE("UPS Processing Required");

        IF ManifestHeader.FIND('-') THEN
          REPEAT
            ManifestLine.SETRANGE("Manifest No.",ManifestHeader."No.");
            ManifestLine.SETRANGE("Shipping Agent Account No.",LastAccountNo);
            IF ManifestLine.FIND('-') THEN
              OpenManifests := OpenManifests + 1;
          UNTIL ManifestHeader.NEXT = 0;

        CASE OpenManifests OF
          0:
            PLDStatus := '91';
          1:
            PLDStatus := '90';
          2:
            PLDStatus := '92';
          3:
            PLDStatus := '93';
          ELSE
            PLDStatus := '93';
        END;
      END;

      IF NOT(UPSlinkSetup."UPS Label Cert. Submission") THEN
        PLDStatus := '91';

      LabelFileName := PackingStation.CalcLabelFileName(CarrierPackingStation."UPS Buffer File");
      CarrierLabelMgt.OpenLabelFile(LabelFile,LabelFileName);

      CASE CarrierPackingStation."UPS Label Printer Type" OF
        CarrierPackingStation."UPS Label Printer Type"::"Eltron Orion":
          BEGIN
            CarrierLabelMgt.WriteLabelHeader(
              LabelFile,2,CarrierPackingStation."UPS Eltron Label Media Type",
              CarrierPackingStation."UPS Print From",LabelWidth,LabelHeight);
            Printertext := ' ELTRON ';
          END;
        CarrierPackingStation."UPS Label Printer Type"::Zebra:
          BEGIN
            CarrierLabelMgt.WriteLabelHeader(
              LabelFile,4,CarrierPackingStation."UPS Eltron Label Media Type",
              CarrierPackingStation."UPS Print From",LabelWidth,LabelHeight);
            Printertext := ' ZEBRA ';
          END;
      END;

      CarrierLabelMgt.WriteLabelText2(
        LabelFile,20,10,0,0,3,1,2,FALSE,FALSE,'PICKUP SUMMARY BAR CODE REPORT');
      CarrierLabelMgt.WriteLabelText2(LabelFile,20,52,0,0,2,1,2,FALSE,FALSE,'SHIP DATE:');

      CarrierLabelMgt.WriteLabelText2(
        LabelFile,160,50,0,0,3,1,2,FALSE,FALSE,
        UPPERCASE(
          COPYSTR(
            FORMAT(PickupDate,0,'<Month Text>'),1,3) + ' ' +
            FORMAT(PickupDate,0,'<Day>,<Year4>')));

      CarrierLabelMgt.WriteLabelText2(LabelFile,20,92,0,0,2,1,2,FALSE,FALSE,'SHIPPING RECORD:');
      CarrierLabelMgt.WriteLabelText2(LabelFile,230,90,0,0,3,1,2,FALSE,FALSE,PickupCode);
      CarrierLabelMgt.WriteLabelText2(LabelFile,20,132,0,0,2,1,2,FALSE,FALSE,'ACCOUNT NUMBER:');
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,220,130,25,0,3,1,2,FALSE,FALSE,
        COPYSTR(LastAccountNo,1,3) + ' - ' + COPYSTR(LastAccountNo,4,3));

      CarrierLabelMgt.WriteLabelText2(LabelFile,100,170,0,0,2,1,2,FALSE,FALSE,'CUSTOMER');
      CarrierLabelMgt.WriteLabelText2(LabelFile,160,205,0,0,3,1,2,FALSE,FALSE,AddressLine[1]);
      CarrierLabelMgt.WriteLabelText2(LabelFile,160,240,0,0,3,1,2,FALSE,FALSE,AddressLine[2]);
      CarrierLabelMgt.WriteLabelText2(LabelFile,160,275,0,0,3,1,2,FALSE,FALSE,AddressLine[3]);

      CarrierLabelMgt.WriteLabelLine(LabelFile,0,310,800,5);

      CarrierLabelMgt.WriteLabelText2(LabelFile,20,321,0,0,3,2,2,FALSE,FALSE,'DRIVER SUMMARY');

      TotalCount := IntPackageCount + DomesticPackageCount;
      TotalPackageCount := TotalCount;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,20,360,0,0,3,1,2,FALSE,FALSE,'TOTAL NUMBER OF PACKAGES = ' +
        FORMAT(TotalCount,0,'<Integer Thousand>'));

      IF (MidPackCount > 0) OR
         (BigPackCount > 0)
      THEN
        CarrierLabelMgt.WriteLabelText2(
          LabelFile,20,399,0,0,3,1,2,FALSE,FALSE,'UPS CONTROL LOG REQUIRED');

      TotalCount := NextDayAirPackages;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,20,440,0,0,3,1,2,FALSE,FALSE,'1DA ' + FORMAT(TotalCount,0,'<Integer Thousand>'));
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,400,440,0,0,3,1,2,FALSE,FALSE,'INT`L pkgs ' +
        FORMAT(IntPackageCount,0,'<Integer Thousand>') + ' / shpts ' +
        FORMAT(IntShipments,0,'<Integer Thousand>'));

      TotalCount := SecondDayAirPackages;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,20,480,0,0,3,1,2,FALSE,FALSE,'2DA ' + FORMAT(TotalCount,0,'<Integer Thousand>'));
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,400,480,0,0,3,1,2,FALSE,FALSE,'CODS ' + FORMAT(CODPackCount,0,'<Integer Thousand>'));

      TotalCount := ThirdDayAirPackages;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,20,520,0,0,3,1,2,FALSE,FALSE,'3DS ' + FORMAT(TotalCount,0,'<Integer Thousand>'));

      CarrierLabelMgt.WriteLabelLine(LabelFile,0,560,800,8);

      CheckDigit := GetCheckDigit(ShippingInfo);

      CarrierLabelMgt.WriteLabelText2(
        LabelFile,200,575,0,0,3,1,2,FALSE,FALSE,PLDStatus + ' '+ COPYSTR(ShippingInfo,1,3) + ' ' +
        COPYSTR(ShippingInfo,4,3) + ' ' + COPYSTR(ShippingInfo,7,4) + ' ' + COPYSTR(ShippingInfo,11,5) +
        ' ' + COPYSTR(ShippingInfo,16,5) + STRSUBSTNO(' %1',CheckDigit));

      CarrierLabelMgt.WriteLabelBarCode(
        LabelFile,100,613,0,0,'1',3,6,125,FALSE,
        PLDStatus + ShippingInfo + STRSUBSTNO('%1',CheckDigit));

      CarrierLabelMgt.WriteLabelLine(LabelFile,0,747,800,8);

      CarrierLabelMgt.WriteLabelText2(
        LabelFile,20,762,0,0,2,1,1,FALSE,FALSE,'SHIPMENTS SUBJECT TO TERMS OF AGREEMENT ON FILE');

      CarrierLabelMgt.WriteLabelText2(LabelFile,20,785,0,0,3,1,1,FALSE,FALSE,'Received By:');

      IF PLDStatus = '91' THEN
        CarrierLabelMgt.WriteLabelLine(LabelFile,190,800,600,5)
      ELSE BEGIN
        CarrierLabelMgt.WriteLabelText2(LabelFile,620,785,0,0,3,1,1,FALSE,FALSE,'PENDING PLD');
        CarrierLabelMgt.WriteLabelLine(LabelFile,190,800,400,5);
      END;

      CarrierLabelMgt.WriteLabelText2(LabelFile,20,825,0,0,3,1,1,FALSE,FALSE,'Pickup Time:');
      CarrierLabelMgt.WriteLabelLine(LabelFile,190,835,325,5);
      CarrierLabelMgt.WriteLabelText2(LabelFile,550,825,0,0,3,1,1,FALSE,FALSE,'Pkgs:');
      CarrierLabelMgt.WriteLabelLine(LabelFile,620,835,200,5);

      JulDayShip := PickupDate - DMY2DATE(1,1,DATE2DMY(PickupDate,3)) + 1;
      tJulDayShip := STRSUBSTNO('%1',JulDayShip);

      IF STRLEN(tJulDayShip) = 1 THEN
        tJulDayShip := '00' + tJulDayShip
      ELSE IF STRLEN(tJulDayShip) = 2 THEN
        tJulDayShip := '0' + tJulDayShip;

            CASE CarrierPackingStation."UPS Label Printer Type" OF
              CarrierPackingStation."UPS Label Printer Type"::"Eltron Orion":
                BEGIN
                  EOT := 4;
                  GS := 29;
                  RS := 30;
                  tEOT[1] := EOT;
                  tGS[1] := GS;
                  tRS[1] := RS;

                  DataMatrix :=
                    '[)>' + tRS + '06' + tGS + '0Y' + tGS + '30S' + FORMAT(TODAY,0,'<Year>') + tGS +
                    '10Y' + 'PSR' + tGS + '21D' + tJulDayShip + tGS + '16S' + UPSlinkSetup.UPSlinkVersion +
                     tGS +'11Y' + ShippingSetup."UPS Routing Version" + tRS +
                    '06' + tGS + '1Y' + tGS + '20Y' + PLDStatus + tGS +
                    '15V' + LastAccountNo + tGS + '21Y' +
                    COPYSTR(ShippingInfo,7,7) + COPYSTR(ShippingInfo,14,2) + tGS +
                    'QSM' + FORMAT(TotalPackageCount,0,'<Integer Thousand>') + tGS +
                    '22Y' + STRSUBSTNO('%1',CheckDigit) + tRS + tEOT;

                END;
              CarrierPackingStation."UPS Label Printer Type"::Zebra:
                BEGIN
                DataMatrix :=
                  DataMatrix +
                  '[)>_1E' + '06' + '_1D' + '0Y' + '_1D' + '30S' + FORMAT(TODAY,0,'<Year>') + '_1D' +
                  '10YPSR' + '_1D' + '21D' + tJulDayShip + '_1D' + '16S' + UPSlinkSetup.UPSlinkVersion +
                  '_1D' + '11Y' + ShippingSetup."UPS Routing Version" + '_1E06' + '_1D' +
                  '1Y' + '_1D' + '20Y' + '_1D' + PLDStatus + '_1D' +
                  '15V' + LastAccountNo + '_1D' + '21Y' +
                  COPYSTR(ShippingInfo,7,7) + COPYSTR(ShippingInfo,14,2) + '_1D' +
                  'QSM' + FORMAT(TotalPackageCount,0,'<Integer Thousand>') + '_1D' +
                  '22Y' + STRSUBSTNO('%1',CheckDigit) + '_1E' + '_04';
                END;
            END;

      CarrierLabelMgt.WriteLabelBarCode(LabelFile,550,120,0,0,'DM',0,0,0,FALSE,DataMatrix);

      Printertext := Printertext + CarrierPackingStation."UPSlink Printer Model" + ' ';

      ShippingSetup.TESTFIELD("UPS Routing Version");
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,380,845,0,0,1,1,1,FALSE,FALSE,UPSlinkSetup.UPSlinkVersion + Printertext +
        ShippingSetup."UPS Routing Version");

      CarrierLabelMgt.WriteLabelFooter(LabelFile);
      CarrierLabelMgt.CloseLabelFile(LabelFile);

      PackingStation.PrintLabelFile(
        LabelFileName,CarrierPackingStation."UPS Label Printer Port",
        PackingStation."No Label Printer",FALSE);

      EXIT(LabelFileName);
    END;

    PROCEDURE FixZipCodePrint@1240030005(ZipCodeText@1240030000 : Text[30];ISO2CountryCode@1240030001 : Code[2]) : Text[20];
    BEGIN
      CASE ISO2CountryCode OF
        'AS','GU','MH','FM','MP','PW','PR','US','VI','':
          IF (STRPOS(ZipCodeText,'-') = 0) AND
             (STRLEN(ZipCodeText) = 9)
          THEN
            EXIT(INSSTR(ZipCodeText,'-',6))
          ELSE
            EXIT(ZipCodeText);
        'JE','GG','BR','GB':
          EXIT(ZipCodeText);
        ELSE
          EXIT(DELCHR(ZipCodeText,'=',' -'));
      END;
    END;

    LOCAL PROCEDURE GetCheckDigit@64(ShippingInfo@1000000001 : Text[30]) UPSCheckDigit@1000000000 : Integer;
    VAR
      UPSOddNumbers@1000000002 : Integer;
      UPSEvenNumbers@1000000003 : Integer;
      xNo@1000000004 : Integer;
      UPSRemainder@1000000005 : Integer;
      UPSResult@1000000006 : Integer;
      UPSMultiple@1000000007 : Integer;
      UPSNoCalc@1000000008 : Text[30];
    BEGIN
      UPSNoCalc := ShippingInfo;
      UPSNoCalc := CONVERTSTR(UPSNoCalc,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','23456789012345678901234567');
      UPSOddNumbers := 0;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,1,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,3,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,5,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,7,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,9,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,11,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,13,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,15,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,17,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,19,1));
      UPSOddNumbers := UPSOddNumbers + xNo;
      UPSEvenNumbers := 0;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,2,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,4,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,6,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,8,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,10,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,12,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,14,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,16,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,18,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      EVALUATE(xNo,COPYSTR(UPSNoCalc,20,1));
      UPSEvenNumbers := UPSEvenNumbers + xNo;
      UPSEvenNumbers := UPSEvenNumbers * 2;
      UPSResult := UPSOddNumbers + UPSEvenNumbers;
      UPSRemainder := UPSResult MOD 10;
      UPSRemainder := 10 - UPSRemainder;
      UPSMultiple := UPSResult + UPSRemainder;
      UPSCheckDigit := UPSMultiple - UPSResult;
      IF UPSCheckDigit = 10 THEN
        UPSCheckDigit := 0;
    END;

    PROCEDURE SetArrayField@25(VAR TextArray@1000000000 : ARRAY [15] OF Text[60];VAR ArrayIndex@1000000001 : Integer;AlwaysAdd@1000000002 : Boolean;TextValue@1000000003 : Text[60]);
    BEGIN
      TextArray[ArrayIndex] := TextValue;
      IF AlwaysAdd THEN
        ArrayIndex := ArrayIndex + 1
      ELSE
        IF TextValue <> '' THEN
          ArrayIndex := ArrayIndex + 1;
    END;

    PROCEDURE CleanString@38(TextString@1000000001 : Text[250]) OutText@1000000000 : Text[250];
    VAR
      TempText@1000000002 : Text[250];
    BEGIN
      TempText := UPPERCASE(TextString);
      TempText := DELCHR(TempText,'=','\"^.,-:;()');
      OutText := TempText;
    END;

    PROCEDURE CleanStringMaxicode@10(TextString@1240030001 : Text[250]) OutText@1240030000 : Text[250];
    VAR
      TempText@1240030002 : Text[250];
    BEGIN
      TempText := UPPERCASE(TextString);
      TempText := DELCHR(TempText,'=','-_+=\|[]}{".,#$@%^&*+!~`:;/?><');
      OutText := TempText;
    END;

    PROCEDURE CleanStringLess@1240020000(TextString@1240020000 : Text[250]) OutText : Text[250];
    VAR
      TempText@1240020001 : Text[250];
    BEGIN
      //Allow a few more characters than CleanString function
      TempText := UPPERCASE(TextString);
      TempText := DELCHR(TempText,'=','\"^,-:;()');
      OutText := TempText;
    END;

    PROCEDURE CreateZipString@13(CityText@1000000000 : Text[30];StateText@1000000001 : Text[30];ZIPText@1000000002 : Text[30];ISO2CharCountryCode@1240030000 : Code[2]) : Text[250];
    BEGIN
      IF ISO2CharCountryCode IN
         ['','AS','AU','BH','BD','BM','BN','KH','CA','CK','GB','GU','GG','HK','IN','ID','IR','JP','JE',
          'JO','LB','LS','MV','MT','MP','MH','FM','MN','NP','NZ','NG','NF','PK','PW','PG','PR','SI','SG',
          'ZA','KR','TW','TH','US','VE','VN','VI']
      THEN
        EXIT(COPYSTR(CleanString(CityText),1,25) + ' ' + CleanString(StateText) + ' ' + ZIPText)
      ELSE
        EXIT(ZIPText + ' ' + COPYSTR(CleanString(CityText),1,25) + ' ' + CleanString(StateText));
    END;

    PROCEDURE GetServiceIndicator@40(CurrentPackage@1000000001 : Record 14000701;UPSOptionPage@1000000002 : Record 14000761) Indicator@1000000000 : Code[2];
    BEGIN
      GetShippingAgentService(
        CurrentPackage."Shipping Agent Code",CurrentPackage."Shipping Agent Service",
        CurrentPackage."World Wide Service");
      Indicator := ShippingAgentService."Service Indicator";

      CASE ShippingAgentService."Service Indicator" OF
        '01':  // Next Day Air
          BEGIN
            IF NOT CurrentPackage.COD THEN BEGIN
              IF NOT UPSOptionPage."Saturday Delivery" THEN BEGIN
                IF (UPSOptionPage."Proactive Response") AND
                   (UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None)
                THEN
                  Indicator := 'V3'
                ELSE BEGIN
                  CASE UPSOptionPage."Delivery Confirmation Type" OF
                    UPSOptionPage."Delivery Confirmation Type"::None:
                      IF UPSOptionPage."Shipper Release" THEN
                        Indicator := 'NT';
                    UPSOptionPage."Delivery Confirmation Type"::"Name Date":
                      IF UPSOptionPage."Shipper Release" THEN
                        Indicator := 'P4'
                      ELSE
                        Indicator := '25';
                    UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                      Indicator := '24';
                    UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                      Indicator := 'A2';
                  END;

                  CASE UPSOptionPage."Call Tag Type" OF
                    UPSOptionPage."Call Tag Type"::"1 attempt":
                      Indicator := '09';
                    UPSOptionPage."Call Tag Type"::"3 attempt":
                      Indicator := '28';
                    UPSOptionPage."Call Tag Type"::"Print Return Label Only",
                    UPSOptionPage."Call Tag Type"::"Electronic Return Label",
                    UPSOptionPage."Call Tag Type"::"Exchange Return":
                      Indicator := '84';
                    UPSOptionPage."Call Tag Type"::"Exchange Outbound":
                      IF UPSOptionPage."Delivery Confirmation Type" =
                         UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                      THEN
                        Indicator := '7T'
                      ELSE IF UPSOptionPage."Shipper Release" THEN
                        Indicator := '7Y'
                      ELSE
                        Indicator := '7N';
                  END;
                END;
              END ELSE BEGIN
                // Saturday Delivery
                Indicator := '44';

                CASE UPSOptionPage."Delivery Confirmation Type" OF
                  UPSOptionPage."Delivery Confirmation Type"::None:
                    IF UPSOptionPage."Shipper Release" THEN
                      Indicator := 'PG';
                  UPSOptionPage."Delivery Confirmation Type"::"Name Date":
                    IF UPSOptionPage."Shipper Release" THEN
                      Indicator := 'PN'
                    ELSE
                      Indicator := '47';
                  UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                    Indicator := '58';
                  UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                    Indicator := 'A3';
                END;

                CASE UPSOptionPage."Call Tag Type" OF
                  UPSOptionPage."Call Tag Type"::"1 attempt":
                    Indicator := 'Y1';
                  UPSOptionPage."Call Tag Type"::"3 attempt":
                    Indicator := 'Y2';
                  UPSOptionPage."Call Tag Type"::"Print Return Label Only",
                  UPSOptionPage."Call Tag Type"::"Electronic Return Label",
                  UPSOptionPage."Call Tag Type"::"Exchange Return":
                    Indicator := 'Y0';
                  UPSOptionPage."Call Tag Type"::"Exchange Outbound":
                  BEGIN
                    IF UPSOptionPage."Delivery Confirmation Type" =
                       UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                    THEN
                       Indicator := '7W'
                    ELSE IF UPSOptionPage."Shipper Release" THEN
                       Indicator := '8A'
                    ELSE
                       Indicator := '7P';
                  END;
                END;
              END;
            END ELSE BEGIN
            // COD
              IF NOT UPSOptionPage."Saturday Delivery" THEN BEGIN
                IF UPSOptionPage."Delivery Confirmation Type" =
                   UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                THEN
                  Indicator := 'AC'
                ELSE
                  Indicator := '59';
              END ELSE BEGIN
                IF UPSOptionPage."Delivery Confirmation Type" =
                   UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                THEN
                  Indicator := 'AD'
                ELSE
                  Indicator := '60';
              END;
            END;
          END;
        '15':  // Next Day Air Early A.M.
          BEGIN
            IF NOT CurrentPackage.COD THEN BEGIN
              IF UPSOptionPage."Saturday Delivery" THEN BEGIN
                Indicator := '41';
                IF UPSOptionPage."Delivery Confirmation Type" =
                   UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                THEN
                  Indicator := 'A1'
                ELSE
                  CASE UPSOptionPage."Call Tag Type" OF
                    UPSOptionPage."Call Tag Type"::"1 attempt":
                      Indicator := 'WW';
                    UPSOptionPage."Call Tag Type"::"3 attempt":
                      Indicator := 'WY';
                    UPSOptionPage."Call Tag Type"::"Print Return Label Only",
                    UPSOptionPage."Call Tag Type"::"Electronic Return Label",
                    UPSOptionPage."Call Tag Type"::"Exchange Return":
                      Indicator := 'WT';
                    UPSOptionPage."Call Tag Type"::None:
                      IF UPSOptionPage."Shipper Release" THEN
                        Indicator := 'PA';
                  END;
              END ELSE
                IF UPSOptionPage."Delivery Confirmation Type" =
                   UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                THEN
                  Indicator := 'A0'
                ELSE
                  IF (UPSOptionPage."Proactive Response") AND
                     (UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None)
                  THEN
                    Indicator := 'V2'
                  ELSE
                    CASE UPSOptionPage."Call Tag Type" OF
                      UPSOptionPage."Call Tag Type"::"1 attempt":
                        Indicator := 'TY';
                      UPSOptionPage."Call Tag Type"::"3 attempt":
                        Indicator := 'V0';
                      UPSOptionPage."Call Tag Type"::"Print Return Label Only",
                      UPSOptionPage."Call Tag Type"::"Electronic Return Label",
                      UPSOptionPage."Call Tag Type"::"Exchange Return":
                        Indicator := 'V1';
                      UPSOptionPage."Call Tag Type"::None:
                        IF UPSOptionPage."Shipper Release" THEN
                          Indicator := 'NP';
                    END;

              IF UPSOptionPage."Call Tag Type" =
                 UPSOptionPage."Call Tag Type"::"Exchange Outbound"
              THEN
                IF UPSOptionPage."Delivery Confirmation Type" =
                   UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                THEN
                  IF UPSOptionPage."Saturday Delivery" THEN
                    Indicator := '7H'
                  ELSE
                    Indicator := '7A'
              ELSE
                IF UPSOptionPage."Saturday Delivery" THEN
                  Indicator := '7G'
                ELSE
                  Indicator := '6Y';
            END ELSE BEGIN
              IF UPSOptionPage."Saturday Delivery" THEN BEGIN
                IF UPSOptionPage."Delivery Confirmation Type" =
                   UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                THEN
                  Indicator := 'AA'
                ELSE
                  Indicator := '33';
              END ELSE
                IF UPSOptionPage."Delivery Confirmation Type" =
                   UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                THEN
                  Indicator := 'A9'
                ELSE
                  Indicator := '32';
            END;
          END;
        '13':  // Next Day Air Saver
          BEGIN
            IF NOT CurrentPackage.COD THEN BEGIN
              CASE UPSOptionPage."Delivery Confirmation Type" OF
                UPSOptionPage."Delivery Confirmation Type"::"Name Date":
                  IF UPSOptionPage."Shipper Release" THEN
                    Indicator := 'P5'
                  ELSE
                    Indicator := '30';
                UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                  Indicator := '29';
                UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                BEGIN
                  Indicator := 'A4';
                  IF UPSOptionPage."Call Tag Type" =
                     UPSOptionPage."Call Tag Type"::"Exchange Outbound"
                  THEN
                    Indicator := '8H';
                END;
                UPSOptionPage."Delivery Confirmation Type"::None:
                BEGIN
                  IF UPSOptionPage."Shipper Release" THEN
                    Indicator := 'NW';
                  IF UPSOptionPage."Call Tag Type" =
                    UPSOptionPage."Call Tag Type"::"Exchange Outbound"
                  THEN
                    Indicator := '8G';
                END;
              END;
            END ELSE BEGIN
              IF UPSOptionPage."Delivery Confirmation Type" =
                 UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
              THEN
                Indicator := 'AE'
              ELSE
                Indicator := '62';
            END;
          END;
        '02':  // 2nd Day Air
          BEGIN
            IF NOT CurrentPackage.COD THEN BEGIN
              IF NOT UPSOptionPage."Saturday Delivery" THEN BEGIN
                CASE UPSOptionPage."Delivery Confirmation Type" OF
                  UPSOptionPage."Delivery Confirmation Type"::None:
                    IF UPSOptionPage."Shipper Release" THEN
                      Indicator := 'NY';
                  UPSOptionPage."Delivery Confirmation Type"::"Name Date":
                    IF UPSOptionPage."Shipper Release" THEN
                      Indicator := 'P6'
                    ELSE
                      Indicator := '36';
                  UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                    Indicator := '35';
                  UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                    Indicator := 'A6';
                END;

                CASE UPSOptionPage."Call Tag Type" OF
                  UPSOptionPage."Call Tag Type"::"1 attempt":
                    Indicator := '11';
                  UPSOptionPage."Call Tag Type"::"3 attempt":
                    Indicator := '52';
                  UPSOptionPage."Call Tag Type"::"Print Return Label Only",
                  UPSOptionPage."Call Tag Type"::"Electronic Return Label",
                  UPSOptionPage."Call Tag Type"::"Exchange Return":
                    Indicator := '87';
                  UPSOptionPage."Call Tag Type"::"Exchange Outbound":
                    IF UPSOptionPage."Delivery Confirmation Type" =
                       UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                    THEN
                      Indicator := '8Y'
                    ELSE IF UPSOptionPage."Shipper Release" THEN
                      Indicator := '9G'
                    ELSE
                      Indicator := '8T';
                END;
              END ELSE BEGIN
                // Saturday Delivery
                Indicator := 'PW';

                CASE UPSOptionPage."Delivery Confirmation Type" OF
                  UPSOptionPage."Delivery Confirmation Type"::None:
                    IF UPSOptionPage."Shipper Release" THEN
                      Indicator := 'T3';
                  UPSOptionPage."Delivery Confirmation Type"::"Name Date":
                    IF UPSOptionPage."Shipper Release" THEN
                      Indicator := 'T7'
                    ELSE
                      Indicator := 'PY';
                  UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                    Indicator := 'T0';
                  UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                    Indicator := 'T1';
                END;

                CASE UPSOptionPage."Call Tag Type" OF
                  UPSOptionPage."Call Tag Type"::"1 attempt":
                    Indicator := 'Y4';
                  UPSOptionPage."Call Tag Type"::"3 attempt":
                    Indicator := 'Y5';
                  UPSOptionPage."Call Tag Type"::"Print Return Label Only",
                  UPSOptionPage."Call Tag Type"::"Electronic Return Label",
                  UPSOptionPage."Call Tag Type"::"Exchange Return":
                    Indicator := 'Y3';
                  UPSOptionPage."Call Tag Type"::"Exchange Outbound":
                    IF UPSOptionPage."Delivery Confirmation Type" =
                       UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                    THEN
                      Indicator := '9A'
                    ELSE IF UPSOptionPage."Shipper Release" THEN
                      Indicator := '9H'
                    ELSE
                      Indicator := '8W';
                END;
              END;
            END ELSE BEGIN
            // COD
              IF NOT UPSOptionPage."Saturday Delivery" THEN BEGIN
                IF UPSOptionPage."Delivery Confirmation Type" =
                   UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                THEN
                  Indicator := 'AG'
                ELSE
                  Indicator := '70';
              END ELSE BEGIN
                IF UPSOptionPage."Delivery Confirmation Type" =
                   UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                THEN
                  Indicator := 'T6'
                ELSE
                  Indicator := 'T2';
              END;
            END;
          END;
        '04':  // UPS Saver
          BEGIN
            IF (UPSOptionPage."Proactive Response") AND
               (UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None)
            THEN
              Indicator := 'V6'
            ELSE BEGIN
              CASE UPSOptionPage."Delivery Confirmation Type" OF
                UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                  Indicator := 'D9';
                UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                  Indicator := 'DA';
              END;

              CASE UPSOptionPage."Call Tag Type" OF
                UPSOptionPage."Call Tag Type"::"1 attempt",
                UPSOptionPage."Call Tag Type"::"IC 1 attempt":
                  Indicator := '97';
                UPSOptionPage."Call Tag Type"::"3 attempt",
                UPSOptionPage."Call Tag Type"::"IC 3 attempt":
                  Indicator := '93';
                UPSOptionPage."Call Tag Type"::"Pack and Collect 1 attempt":
                  Indicator := '6G';
                UPSOptionPage."Call Tag Type"::"Pack and Collect 3 attempt":
                  Indicator := '6H';
                UPSOptionPage."Call Tag Type"::"Print Return Label Only",
                UPSOptionPage."Call Tag Type"::"IC PRL",
                UPSOptionPage."Call Tag Type"::"IC ERL",
                UPSOptionPage."Call Tag Type"::"IC P & M Label",
                UPSOptionPage."Call Tag Type"::"Exchange Return":
                  Indicator := '86';
                UPSOptionPage."Call Tag Type"::"Exchange Outbound":
                  IF UPSOptionPage."Delivery Confirmation Type" =
                     UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                  THEN
                    Indicator := 'DV'
                  ELSE
                    Indicator := 'DS';
              END;
            END;
          END;
        '59':  // 2nd Day Air A.M.
          BEGIN
            Indicator := '07';
            IF NOT CurrentPackage.COD THEN BEGIN
              CASE UPSOptionPage."Delivery Confirmation Type" OF
                UPSOptionPage."Delivery Confirmation Type"::"Name Date":
                  IF UPSOptionPage."Shipper Release" THEN
                    Indicator := 'P7'
                  ELSE
                    Indicator := '18';
                UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                  Indicator := '19';
                UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                BEGIN
                  Indicator := 'A5';
                  IF UPSOptionPage."Call Tag Type" =
                     UPSOptionPage."Call Tag Type"::"Exchange Outbound"
                  THEN
                    Indicator := '8P';
                END;
                UPSOptionPage."Delivery Confirmation Type"::None:
                BEGIN
                  IF UPSOptionPage."Shipper Release" THEN
                    Indicator := 'P0';
                  IF UPSOptionPage."Call Tag Type" =
                     UPSOptionPage."Call Tag Type"::"Exchange Outbound"
                  THEN
                    Indicator := '8N';
                END;
              END;
            END ELSE BEGIN
              IF UPSOptionPage."Delivery Confirmation Type" =
                 UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
              THEN
                Indicator := 'AF'
              ELSE
                Indicator := '65';
            END;
          END;
        '12':  // 3 Day Select
          BEGIN
            IF NOT CurrentPackage.COD THEN BEGIN
              CASE UPSOptionPage."Delivery Confirmation Type" OF
                UPSOptionPage."Delivery Confirmation Type"::None:
                  IF UPSOptionPage."Shipper Release" THEN
                    Indicator := 'P1';
                UPSOptionPage."Delivery Confirmation Type"::"Name Date":
                  IF UPSOptionPage."Shipper Release" THEN
                    Indicator := 'P8'
                  ELSE
                    Indicator := '40';
                UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                  Indicator := '39';
                UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                  Indicator := 'A7';
              END;

              CASE UPSOptionPage."Call Tag Type" OF
                UPSOptionPage."Call Tag Type"::"1 attempt",
                UPSOptionPage."Call Tag Type"::"IC 1 attempt":
                  Indicator := '16';
                UPSOptionPage."Call Tag Type"::"3 attempt",
                UPSOptionPage."Call Tag Type"::"IC 3 attempt":
                  Indicator := '50';
                UPSOptionPage."Call Tag Type"::"Print Return Label Only",
                UPSOptionPage."Call Tag Type"::"Electronic Return Label",
                UPSOptionPage."Call Tag Type"::"IC PRL",
                UPSOptionPage."Call Tag Type"::"IC ERL",
                UPSOptionPage."Call Tag Type"::"IC P & M Label",
                UPSOptionPage."Call Tag Type"::"Exchange Return":
                  Indicator := '89';
                UPSOptionPage."Call Tag Type"::"Exchange Outbound":
                  IF UPSOptionPage."Delivery Confirmation Type" =
                     UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                  THEN
                    Indicator := '9P'
                  ELSE
                    Indicator := '9N';
              END;
            END ELSE BEGIN
              CASE UPSOptionPage."Delivery Confirmation Type" OF
                UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                  Indicator := 'G0';
                UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                  Indicator := 'AH';
                UPSOptionPage."Delivery Confirmation Type"::None:
                  Indicator := '71';
              END;
            END;
          END;
        '03':  // Ground
          BEGIN
            IF NOT CurrentPackage.COD THEN BEGIN
              CASE UPSOptionPage."Delivery Confirmation Type" OF
                UPSOptionPage."Delivery Confirmation Type"::None:
                  IF UPSOptionPage."Shipper Release" THEN
                    Indicator := 'P2';
                UPSOptionPage."Delivery Confirmation Type"::"Name Date":
                  IF UPSOptionPage."Shipper Release" THEN
                    Indicator := 'P9'
                  ELSE
                    Indicator := '43';
                UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                  Indicator := '42';
                UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                  Indicator := 'A8';
              END;

              CASE UPSOptionPage."Call Tag Type" OF
                UPSOptionPage."Call Tag Type"::"1 attempt":
                  Indicator := '78';
                UPSOptionPage."Call Tag Type"::"3 attempt":
                  Indicator := '26';
                UPSOptionPage."Call Tag Type"::"Print Return Label Only",
                UPSOptionPage."Call Tag Type"::"Electronic Return Label",
                UPSOptionPage."Call Tag Type"::"Exchange Return":
                  Indicator := '90';
                UPSOptionPage."Call Tag Type"::"Exchange Outbound":
                IF UPSOptionPage."Delivery Confirmation Type" =
                   UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                THEN
                  Indicator := '9W'
                ELSE IF UPSOptionPage."Shipper Release" THEN
                  Indicator := '9Y'
                ELSE
                  Indicator := '9T';
              END;
            END ELSE BEGIN
            // COD
              IF UPSOptionPage."Delivery Confirmation Type" =
                 UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
              THEN
                Indicator := 'AJ'
              ELSE
                Indicator := '72';
            END;
          END;
        '11':  // Standard
          BEGIN
            Indicator := '68';
            CASE UPSOptionPage."Call Tag Type" OF
              UPSOptionPage."Call Tag Type"::"1 attempt",
              UPSOptionPage."Call Tag Type"::"IC 1 attempt":
                Indicator := '99';
              UPSOptionPage."Call Tag Type"::"3 attempt",
              UPSOptionPage."Call Tag Type"::"IC 3 attempt":
                Indicator := '95';
              UPSOptionPage."Call Tag Type"::"Pack and Collect 1 attempt":
                Indicator := '6T';
              UPSOptionPage."Call Tag Type"::"Pack and Collect 3 attempt":
                Indicator := '6W';
              UPSOptionPage."Call Tag Type"::"Print Return Label Only",
              UPSOptionPage."Call Tag Type"::"Electronic Return Label",
              UPSOptionPage."Call Tag Type"::"IC PRL",
              UPSOptionPage."Call Tag Type"::"IC ERL",
              UPSOptionPage."Call Tag Type"::"IC P & M Label",
              UPSOptionPage."Call Tag Type"::"Exchange Return":
                Indicator := '91';
              UPSOptionPage."Call Tag Type"::"Exchange Outbound":
              BEGIN
                Indicator := 'DY';
                IF UPSOptionPage."Shipper Release" THEN
                  Indicator := 'E0';
              END;
            END;

            IF CurrentPackage.COD AND CurrentPackage."UPS Canadian Service" THEN BEGIN
              CASE UPSOptionPage."Delivery Confirmation Type" OF
                UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                  Indicator := 'GW';
                UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                  Indicator := 'H3';
                UPSOptionPage."Delivery Confirmation Type"::None:
                  Indicator := 'DR';
              END;
            END ELSE BEGIN
              CASE UPSOptionPage."Delivery Confirmation Type" OF
                UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                  Indicator := 'DK';
                UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                BEGIN
                  Indicator := 'DL';
                  IF UPSOptionPage."Call Tag Type" =
                     UPSOptionPage."Call Tag Type"::"Exchange Outbound"
                  THEN
                    Indicator := 'DZ';
                END;
              END;
            END;
          END;
        '08':  // Expedited
          BEGIN
            Indicator := '67';
            CASE UPSOptionPage."Call Tag Type" OF
              UPSOptionPage."Call Tag Type"::"1 attempt",
              UPSOptionPage."Call Tag Type"::"IC 1 attempt":
                Indicator := '98';
              UPSOptionPage."Call Tag Type"::"3 attempt",
              UPSOptionPage."Call Tag Type"::"IC 3 attempt":
                Indicator := '94';
              UPSOptionPage."Call Tag Type"::"Pack and Collect 1 attempt":
                Indicator := '6N';
              UPSOptionPage."Call Tag Type"::"Pack and Collect 3 attempt":
                Indicator := '6P';
              UPSOptionPage."Call Tag Type"::"Print Return Label Only",
              UPSOptionPage."Call Tag Type"::"Electronic Return Label",
              UPSOptionPage."Call Tag Type"::"IC PRL",
              UPSOptionPage."Call Tag Type"::"IC ERL",
              UPSOptionPage."Call Tag Type"::"IC P & M Label",
              UPSOptionPage."Call Tag Type"::"Exchange Return":
                Indicator := '88';
              UPSOptionPage."Call Tag Type"::"Exchange Outbound":
                Indicator := 'DW';
            END;

            IF CurrentPackage.COD THEN BEGIN
              CASE UPSOptionPage."Delivery Confirmation Type" OF
                UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                  Indicator := 'GT';
                UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                  Indicator := 'H2';
                UPSOptionPage."Delivery Confirmation Type"::None:
                  Indicator := 'DP';
              END;
            END ELSE BEGIN
              CASE UPSOptionPage."Delivery Confirmation Type" OF
                UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                  Indicator := 'DG';
                UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                BEGIN
                  Indicator := 'DH';
                  IF UPSOptionPage."Call Tag Type" =
                     UPSOptionPage."Call Tag Type"::"Exchange Outbound"
                  THEN
                    Indicator := 'DX';
                END;
              END;
            END;
          END;
        '54':  // Express Plus
          BEGIN
            IF (UPSOptionPage."Proactive Response") AND
               (UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None)
            THEN
              Indicator := 'V5'
            ELSE
              CASE UPSOptionPage."Call Tag Type" OF
                UPSOptionPage."Call Tag Type"::"1 attempt",
                UPSOptionPage."Call Tag Type"::"IC 1 attempt":
                  Indicator := 'AM';
                UPSOptionPage."Call Tag Type"::"3 attempt",
                UPSOptionPage."Call Tag Type"::"IC 3 attempt":
                  Indicator := 'AL';
                UPSOptionPage."Call Tag Type"::"Pack and Collect 1 attempt":
                  Indicator := '5N';
                UPSOptionPage."Call Tag Type"::"Pack and Collect 3 attempt":
                  Indicator := '5P';
                UPSOptionPage."Call Tag Type"::"Print Return Label Only",
                UPSOptionPage."Call Tag Type"::"Electronic Return Label",
                UPSOptionPage."Call Tag Type"::"IC PRL",
                UPSOptionPage."Call Tag Type"::"IC ERL",
                UPSOptionPage."Call Tag Type"::"IC P & M Label",
                UPSOptionPage."Call Tag Type"::"Exchange Return":
                  Indicator := 'AK';
                UPSOptionPage."Call Tag Type"::"Exchange Outbound":
                  Indicator := 'HP';
              END;

            IF UPSOptionPage."Saturday Delivery" THEN BEGIN
              CASE UPSOptionPage."Delivery Confirmation Type" OF
                UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                  Indicator := 'G4';
                UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                BEGIN
                  Indicator := 'G8';
                  IF UPSOptionPage."Call Tag Type" =
                     UPSOptionPage."Call Tag Type"::"Exchange Outbound"
                  THEN
                    Indicator := 'P3';
                END;
                UPSOptionPage."Delivery Confirmation Type"::None:
                BEGIN
                  Indicator := '34';
                  IF UPSOptionPage."Call Tag Type" =
                     UPSOptionPage."Call Tag Type"::"Exchange Outbound"
                  THEN
                    Indicator := 'N4';
                 END;
              END;
            END ELSE
              CASE UPSOptionPage."Delivery Confirmation Type" OF
                UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                  Indicator := 'G1';
                UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                BEGIN
                  Indicator := 'G5';
                  IF UPSOptionPage."Call Tag Type" =
                     UPSOptionPage."Call Tag Type"::"Exchange Outbound"
                  THEN
                    Indicator := 'N5';
                END;
              END;
          END;
        '07':  // Express
          BEGIN
            Indicator := '66';
            IF (UPSOptionPage."Proactive Response") AND
               (UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None)
            THEN
              Indicator := 'V4'
            ELSE
              CASE UPSOptionPage."Call Tag Type" OF
                UPSOptionPage."Call Tag Type"::"1 attempt",
                UPSOptionPage."Call Tag Type"::"IC 1 attempt":
                  Indicator := '96';
                UPSOptionPage."Call Tag Type"::"3 attempt",
                UPSOptionPage."Call Tag Type"::"IC 3 attempt":
                  Indicator := '92';
                UPSOptionPage."Call Tag Type"::"Pack and Collect 1 attempt":
                  Indicator := '5T';
                UPSOptionPage."Call Tag Type"::"Pack and Collect 3 attempt":
                  Indicator := '5W';
                UPSOptionPage."Call Tag Type"::"Print Return Label Only",
                UPSOptionPage."Call Tag Type"::"Electronic Return Label",
                UPSOptionPage."Call Tag Type"::"IC PRL",
                UPSOptionPage."Call Tag Type"::"IC ERL",
                UPSOptionPage."Call Tag Type"::"IC P & M Label",
                UPSOptionPage."Call Tag Type"::"Exchange Return":
                  Indicator := '85';
                UPSOptionPage."Call Tag Type"::"Exchange Outbound":
                  Indicator := 'AS';
              END;

            IF UPSOptionPage."Saturday Delivery" THEN BEGIN
              Indicator := '69';
              IF CurrentPackage.COD THEN BEGIN
                CASE UPSOptionPage."Delivery Confirmation Type" OF
                  UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                    Indicator := 'GP';
                  UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                    Indicator := 'H1';
                  UPSOptionPage."Delivery Confirmation Type"::None:
                    Indicator := 'DN';
                END;
              END ELSE BEGIN
                CASE UPSOptionPage."Delivery Confirmation Type" OF
                  UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                    Indicator := 'D6';
                  UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                    Indicator := 'D7';
                END;

                CASE UPSOptionPage."Call Tag Type" OF
                  UPSOptionPage."Call Tag Type"::"1 attempt",
                  UPSOptionPage."Call Tag Type"::"IC 1 attempt":
                    Indicator := 'Y7';
                  UPSOptionPage."Call Tag Type"::"3 attempt",
                  UPSOptionPage."Call Tag Type"::"IC 3 attempt":
                    Indicator := 'Y8';
                  UPSOptionPage."Call Tag Type"::"Pack and Collect 1 attempt":
                    Indicator := '5Y';
                  UPSOptionPage."Call Tag Type"::"Pack and Collect 3 attempt":
                    Indicator := '6A';
                  UPSOptionPage."Call Tag Type"::"Print Return Label Only",
                  UPSOptionPage."Call Tag Type"::"Electronic Return Label",
                  UPSOptionPage."Call Tag Type"::"IC ERL",
                  UPSOptionPage."Call Tag Type"::"IC P & M Label",
                  UPSOptionPage."Call Tag Type"::"Exchange Return":
                    IF UPSOptionPage."Proactive Response" THEN
                      Indicator := 'Y9'
                    ELSE
                      Indicator := 'Y6';
                  UPSOptionPage."Call Tag Type"::"Exchange Outbound":
                  BEGIN
                    IF UPSOptionPage."Delivery Confirmation Type" =
                       UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
                    THEN
                      Indicator := 'CS'
                    ELSE IF UPSOptionPage."Shipper Release" THEN
                      Indicator := 'DQ'
                    ELSE
                      Indicator := 'AZ';
                  END;
                END;
              END;
            END ELSE
              IF CurrentPackage.COD THEN BEGIN
                CASE UPSOptionPage."Delivery Confirmation Type" OF
                  UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                    Indicator := 'GN';
                  UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                    Indicator := 'H0';
                  UPSOptionPage."Delivery Confirmation Type"::None:
                    Indicator := 'DM';
                END;
              END ELSE BEGIN
                CASE UPSOptionPage."Delivery Confirmation Type" OF
                  UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                    Indicator := 'D3';
                  UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                  BEGIN
                    Indicator := 'D4';
                    IF UPSOptionPage."Call Tag Type" =
                       UPSOptionPage."Call Tag Type"::"Exchange Outbound"
                    THEN
                      Indicator := 'CQ'
                  END;
                END;
            END;
          END;
        'E1':  // UPS Worldwide Express Freight
          BEGIN
            IF UPSOptionPage."Saturday Delivery" THEN BEGIN
              CASE UPSOptionPage."Delivery Confirmation Type" OF
                UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                  Indicator := 'E6';
                UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                  Indicator := 'E7';
                UPSOptionPage."Delivery Confirmation Type"::None:
                  Indicator := 'E2';
              END;
            END ELSE
              CASE UPSOptionPage."Delivery Confirmation Type" OF
                UPSOptionPage."Delivery Confirmation Type"::"Signature Date":
                  Indicator := 'E3';
                UPSOptionPage."Delivery Confirmation Type"::"Adult Signature":
                  Indicator := 'E4';
              END;
          END;
      END;
    END;

    PROCEDURE GetShipmentNo@41(TrackingNo@1240030001 : Text[30]) ShipmentNo@1240030000 : Text[30];
    VAR
      TempText@1240030002 : Text[30];
      decShipmentNo@1240030003 : Decimal;
      Pos1@1240030004 : Integer;
      Pos2@1240030005 : Integer;
      Pos3@1240030006 : Integer;
      Pos4@1240030007 : Integer;
      Pos5@1240030008 : Integer;
    BEGIN
      TempText := COPYSTR(TrackingNo,11,7);
      ShipmentNo := COPYSTR(TrackingNo,3,6);
      EVALUATE(decShipmentNo,TempText);

      Pos1 := decShipmentNo DIV POWER(26,4);
      Pos2 := (decShipmentNo - (Pos1 * POWER(26,4))) DIV POWER(26,3);
      Pos3 := (decShipmentNo - (Pos1 * POWER(26,4)) - (Pos2 * POWER(26,3))) DIV POWER(26,2);
      Pos4 :=
        (decShipmentNo - (Pos1 * POWER(26,4)) - (Pos2 * POWER(26,3)) - (Pos3 * POWER(26,2))) DIV 26;
      Pos5 :=
        (decShipmentNo - (Pos1 * POWER(26,4)) - (Pos2 * POWER(26,3)) - (Pos3 * POWER(26,2)) -
        (Pos4 * 26));

      ShipmentNo :=
        COPYSTR(ShipmentNo,1,4) + ' ' + COPYSTR(ShipmentNo,5,2) + Base26Convert(Pos1) +
        Base26Convert(Pos2) + ' ' + Base26Convert(Pos3) + Base26Convert(Pos4) + Base26Convert(Pos5);
    END;

    LOCAL PROCEDURE Base26Convert@42(OriginaInteger@1000000001 : Integer) Base26@1000000000 : Text[1];
    BEGIN
      CASE OriginaInteger OF
        0:
          Base26 := '3';
        1:
          Base26 := '4';
        2:
          Base26 := '7';
        3:
          Base26 := '8';
        4:
          Base26 := '9';
        5:
          Base26 := 'B';
        6:
          Base26 := 'C';
        7:
          Base26 := 'D';
        8:
          Base26 := 'F';
        9:
          Base26 := 'G';
        10:
          Base26 := 'H';
        11:
          Base26 := 'J';
        12:
          Base26 := 'K';
        13:
          Base26 := 'L';
        14:
          Base26 := 'M';
        15:
          Base26 := 'N';
        16:
          Base26 := 'P';
        17:
          Base26 := 'Q';
        18:
          Base26 := 'R';
        19:
          Base26 := 'S';
        20:
          Base26 := 'T';
        21:
          Base26 := 'V';
        22:
          Base26 := 'W';
        23:
          Base26 := 'X';
        24:
          Base26 := 'Y';
        25:
          Base26 := 'Z';
      END;
    END;

    PROCEDURE CreateManifest@43(CurrentShippingAgentAccount@1000000000 : Record 14050005);
    VAR
      ManifestHeader@1000000001 : Record 14000712;
    BEGIN
      ShippingAgent.RESET;
      ShippingAgent.SETRANGE("Shipper Type",ShippingAgent."Shipper Type"::UPS);
      ShippingAgent.FIND('-');

      CLEAR(ManifestHeader);
      ManifestHeader.INSERT(TRUE);
      ManifestHeader."Shipping Agent Code" := ShippingAgent.Code;
      ManifestHeader."Shipping Agent Account" := CurrentShippingAgentAccount."Account No.";
      ManifestHeader.MODIFY(TRUE);

      ManifestHeader.GetSuggestedLines;
      COMMIT;

      PAGE.RUNMODAL(PAGE::Manifest,ManifestHeader);
    END;

    PROCEDURE CloseManifest@53(CurrentManifestHeader@1000000000 : Record 14000712);
    VAR
      ManifestHeader@1000000001 : Record 14000712;
      ManifestLine@1000000002 : Record 14000713;
      UPSManifest@1000000003 : Record 14050007;
      UPSManifest2@1240030002 : Record 14050007;
      Package@1000000009 : Record 14000701;
      PostedPackage@1000000010 : Record 14000704;
      UPSOptionPage@1240020001 : Record 14000761;
      UPSPostedOptionPage@1240020002 : Record 14000762;
      ManifestMgt@1000000011 : Codeunit 14050003;
      TempInteger@1000000005 : Integer;
      TempText@1000000007 : Text[30];
      FileName@1000000008 : Text[250];
      EntryNo@1000000012 : Integer;
      VoidedPackages@1240030001 : Integer;
      PrevShippingAgentAccountNo@1240030000 : Code[20];
      UPSLabelDescr@1240030003 : Text[30];
      UPSUploadedManifest@1240030006 : Record 14050009;
      UPSUPloadedManifestTmp@1240030004 : TEMPORARY Record 14050009;
      ErrorUploadingManifest@1240030005 : Boolean;
      HighValue@1240020000 : Boolean;
    BEGIN
      GetUPSlinkSetup;

      CurrentManifestHeader.TESTFIELD(Posted);

      GetPackingStation;
      CarrierPackingStation.GetPackingStation(PackingStation);

      ManifestLine.RESET;
      ManifestLine.SETRANGE("Manifest No.",CurrentManifestHeader."No.");
      ManifestLine.SETRANGE(Type,ManifestLine.Type::"UPS Summary");
      ManifestLine.DELETEALL;
      UPSUPloadedManifestTmp.DELETEALL;

      ManifestMgt.GroupShipments(CurrentManifestHeader);

      ManifestLine.RESET;
      ManifestLine.SETCURRENTKEY(
        "Manifest No.","Shipping Agent Account No.","Shipping Agent Code",
        "World Wide Service","Shipping Agent Service","Ship-to Address","Ship-to ZIP Code");
      ManifestLine.SETRANGE("Manifest No.",CurrentManifestHeader."No.");
      IF CurrentManifestHeader."Shipping Agent Code" <> '' THEN
        ManifestLine.SETRANGE("Shipping Agent Code",CurrentManifestHeader."Shipping Agent Code");
      IF CurrentManifestHeader."Shipping Agent Account" <> '' THEN
        ManifestLine.SETRANGE("Shipping Agent Account No.",CurrentManifestHeader."Shipping Agent Account");
      ManifestLine.SETRANGE(
        Type,ManifestLine.Type::Package,ManifestLine.Type::"Miscellaneous Package");

      IF ManifestLine.FIND('-') THEN BEGIN
        PrevShippingAgentAccountNo := ManifestLine."Shipping Agent Account No.";
        ShippingAgentAccount.GET(ManifestLine."Shipping Agent Account No.");
        ShippingAgentAccount.TESTFIELD("Book No.");
        ShippingAgentAccount.TESTFIELD("Page No.");

        REPEAT
          IF ManifestLine."Shipping Agent Account No." <> PrevShippingAgentAccountNo THEN
            ERROR(
              Text080,ShippingAgentAccount.TABLECAPTION,PrevShippingAgentAccountNo,
              ManifestLine."Shipping Agent Account No.",UPSManifest.TABLECAPTION);

          IF ManifestLine."Posted / Closed" THEN BEGIN
            PostedPackage.GET(ManifestLine."No.");
            Package.TRANSFERFIELDS(PostedPackage);
            EntryNo :=
              ManifestMgt.BuildUPSManifest(
                Package,TRUE,ManifestLine."UPS Shipment No.",ManifestLine."Manifest No.");
            PostedPackage.TRANSFERFIELDS(Package);
            PostedPackage."UPS Manifest Entry No." := EntryNo;
            PostedPackage.MODIFY;
          END ELSE BEGIN
            IF Package.GET(ManifestLine."No.") THEN BEGIN
              Package."UPS Manifest Entry No." :=
                ManifestMgt.BuildUPSManifest(
                  Package,FALSE,ManifestLine."UPS Shipment No.",ManifestLine."Manifest No.");
              Package.MODIFY;
            END ELSE BEGIN
              PostedPackage.GET(ManifestLine."No.");
              Package.TRANSFERFIELDS(PostedPackage);
              EntryNo :=
                ManifestMgt.BuildUPSManifest(
                  Package,TRUE,ManifestLine."UPS Shipment No.",ManifestLine."Manifest No.");
              PostedPackage.TRANSFERFIELDS(Package);
              PostedPackage."UPS Manifest Entry No." := EntryNo;
              PostedPackage.MODIFY;
            END;
          END;
        UNTIL ManifestLine.NEXT = 0;

        ManifestLine.FIND('-');
        UPSManifest.RESET;
        UPSManifest.SETCURRENTKEY("Manifest No.");
        UPSManifest.SETRANGE("Manifest No.",ManifestLine."Manifest No.");
        UPSManifest.SETRANGE("Book Number",'');
        UPSManifest.SETRANGE("World Ease Master No.",'');
        IF NOT UPSManifest.FIND('-') THEN
          UPSManifest.SETRANGE("World Ease Master No.");

        IF UPSManifest.FIND('-') THEN BEGIN
          ShippingAgentAccount."First Manifest Entry No." := UPSManifest."Entry No.";
          REPEAT
            UPSManifest2.RESET;
            UPSManifest2.SETCURRENTKEY("Shipper Account Number","Book Number","Page Number");
            UPSManifest2.SETFILTER("Manifest No.",'<>%1',UPSManifest."Manifest No.");
            UPSManifest2.SETRANGE("Shipper Account Number",ShippingAgentAccount."Account No.");
            UPSManifest2.SETRANGE("Book Number",ShippingAgentAccount."Book No.");
            UPSManifest2.SETRANGE("Page Number",ShippingAgentAccount."Page No.");
            UPSManifest2.SETFILTER("Pickup Date",'>%1',Date2Text(CALCDATE('-31D',WORKDATE)));

            IF UPSManifest2.FIND('-') THEN
              ERROR(
                Text073,ShippingAgentAccount.FIELDCAPTION("Book No."),
                ShippingAgentAccount."Book No.",ShippingAgentAccount.FIELDCAPTION("Page No."),
                ShippingAgentAccount."Page No.",ShippingAgentAccount.TABLECAPTION,
                ShippingAgentAccount."Account No.");

            IF STRLEN(ShippingAgentAccount."Page No.") < 2 THEN
              ShippingAgentAccount."Page No." := '0' + ShippingAgentAccount."Page No.";
            EVALUATE(TempInteger,ShippingAgentAccount."Page No.");

            UPSManifest.SETRANGE("World Ease Master No.",UPSManifest."World Ease Master No.");
            UPSManifest.FIND('-');

            VoidedPackages :=
              GetOpenedPostedPackages(
                ManifestLine,CurrentManifestHeader."Pickup Date",ShippingAgentAccount."Book No.",
                ShippingAgentAccount."Page No.");

            IF UPSManifest."World Ease Master No." <> '' THEN BEGIN
              WETransaction.CheckManifest(UPSManifest);
              VoidedPackages := 0;
            END;

            UPSManifest."Book Number" := ShippingAgentAccount."Book No.";
            UPSManifest."Page Number" := ShippingAgentAccount."Page No.";

            UPSManifest2.RESET;
            UPSManifest2.SETCURRENTKEY("Manifest No.");
            UPSManifest2.SETRANGE("Manifest No.",ManifestLine."Manifest No.");
            UPSManifest2.SETRANGE("Book Number",'');
            UPSManifest2.SETRANGE("World Ease Master No.",UPSManifest."World Ease Master No.");
            UPSManifest2.FIND('-');
            REPEAT
              UPSManifest2."Pickup Date" := Date2Text(CurrentManifestHeader."Pickup Date");
              UPSManifest2."Book Number" := ShippingAgentAccount."Book No.";
              UPSManifest2."Page Number" := ShippingAgentAccount."Page No.";
              UPSManifest2.MODIFY;
            UNTIL UPSManifest2.NEXT = 0;

            COMMIT;
            IF CODEUNIT.RUN(CODEUNIT::"UPSlink Manifest Export",UPSManifest) THEN ;

            UPSManifest.SETRANGE("Book Number",ShippingAgentAccount."Book No.");
            UPSManifest.SETRANGE("Page Number",ShippingAgentAccount."Page No.");
            UPSManifest.FIND('-');

            UPSUploadedManifest.SETCURRENTKEY("Manifest No.");
            UPSUploadedManifest.SETRANGE("Manifest No.",CurrentManifestHeader."No.");
            UPSUploadedManifest.SETRANGE("Shipping Agent Account No.",UPSManifest."Shipper Account Number");
            UPSUploadedManifest.SETRANGE("World Ease Master No.",UPSManifest."World Ease Master No.");

            IF UPSUploadedManifest.FIND('+') THEN BEGIN
              UPSUPloadedManifestTmp := UPSUploadedManifest;
              UPSUPloadedManifestTmp.INSERT;
            END ELSE BEGIN
              ErrorUploadingManifest := TRUE;
              MESSAGE(
                Text011,UPSManifest.TABLECAPTION,UPSManifest."Manifest No.",
                UPSManifest."World Ease Master No.");
            END;

            ShippingAgentAccount."Page No." := INCSTR(ShippingAgentAccount."Page No.");
            EVALUATE(TempInteger,ShippingAgentAccount."Page No.");

            IF TempInteger > 99 THEN BEGIN
              ShippingAgentAccount.TESTFIELD("Alternative Book No.");
              TempText := ShippingAgentAccount."Book No.";
              ShippingAgentAccount."Book No." := ShippingAgentAccount."Alternative Book No.";
              ShippingAgentAccount."Alternative Book No." := TempText;
              ShippingAgentAccount."Page No." := '00';
            END;
            ShippingAgentAccount.MODIFY;

            UPSManifest.SETRANGE("World Ease Master No.");
            UPSManifest.SETRANGE("Book Number",'');
            UPSManifest.SETRANGE("Page Number");
          UNTIL NOT UPSManifest.FIND('-');
        END;

        IF NOT ErrorUploadingManifest THEN BEGIN
          ManifestHeader.GET(UPSManifest."Manifest No.");
          ManifestHeader."UPS Processing Required" := FALSE;
          ManifestHeader.MODIFY;
        END;

        COMMIT;

        IF UPSUPloadedManifestTmp.FIND('-') THEN
          REPEAT
            UPSUploadedManifest.GET(UPSUPloadedManifestTmp."Entry No.");

            EVALUATE(TempInteger,UPSUPloadedManifestTmp."Book Number" + UPSUPloadedManifestTmp."Page Number");
            TempInteger := TempInteger MOD 7;
            UPSUploadedManifest."UPS Pickup No." :=
              UPSUPloadedManifestTmp."Book Number" + UPSUPloadedManifestTmp."Page Number" + FORMAT(TempInteger);

            UPSUploadedManifest."UPS Pickup No." := INSSTR(UPSUploadedManifest."UPS Pickup No.",' ', 5);
            UPSUploadedManifest."UPS Pickup No." := INSSTR(UPSUploadedManifest."UPS Pickup No.",' ', 10);

            GetManifestTotals(UPSUploadedManifest);

            TempText := '00000' + DELCHR(FORMAT(UPSUploadedManifest."Total Shipments"),'=',',.');
            TempText := COPYSTR(TempText,STRLEN(TempText) - 4,5);

            UPSLabelDescr := UPSUploadedManifest."Shipping Agent Account No.";

            IF UPSUploadedManifest."World Ease Master No." <> '' THEN
              UPSLabelDescr := UPSUploadedManifest."World Ease Master No.";

            UPSUploadedManifest."UPS Shipping Info" :=
              ShippingAgentAccount."Account No." + UPSUPloadedManifestTmp."Book Number" +
              UPSUPloadedManifestTmp."Page Number" + TempText;

            IF CarrierPackingStation."UPS Eltron Label Media Type" =
               CarrierPackingStation."UPS Eltron Label Media Type"::"4X4" THEN
               FileName :=
                 PrintPickupSmallLabel(
                   UPSUploadedManifest."UPS Pickup No.",CurrentManifestHeader."Pickup Date",
                   ShippingAgentAccount."Account No.",UPSUploadedManifest."UPS Shipping Info",
                   UPSUploadedManifest."Domestic Packages",UPSUploadedManifest."International Packages",
                   UPSUploadedManifest."Value 1000 to 5000 Packages",
                   UPSUploadedManifest."Value Above 5000 Packages",UPSUploadedManifest."COD Packages",
                   UPSUploadedManifest."Next Day Packages",UPSUploadedManifest."Second Day Packages",
                   UPSUploadedManifest."Third Day Packages",UPSUploadedManifest."Total Int. Shipments")
            ELSE
               FileName :=
                 PrintPickupLabel(
                   UPSUploadedManifest."UPS Pickup No.",CurrentManifestHeader."Pickup Date",
                   ShippingAgentAccount."Account No.",UPSUploadedManifest."UPS Shipping Info",
                   UPSUploadedManifest."Domestic Packages",UPSUploadedManifest."International Packages",
                   UPSUploadedManifest."Value 1000 to 5000 Packages",
                   UPSUploadedManifest."Value Above 5000 Packages",UPSUploadedManifest."COD Packages",
                   UPSUploadedManifest."Next Day Packages",UPSUploadedManifest."Second Day Packages",
                   UPSUploadedManifest."Third Day Packages",UPSUploadedManifest."Total Int. Shipments");

            UPSUploadedManifest."UPS Pickup File No." :=
              CurrentManifestHeader.InsertLabelFile(
                FileName,
                STRSUBSTNO(Text024,UPSLabelDescr),
                11,CarrierPackingStation."UPS Label Printer Port",PackingStation.Code,
                NOT PackingStation."No Label Printer",PackingStation."Do Not Import Label File");

            IF PackingStation."Auto Delete Label Buffer File" THEN
              ERASE(FileName);

            UPSUploadedManifest."UPS Manifest File No." :=
              CurrentManifestHeader.InsertLabelFile(
                UPSManifest."Text File Name",
                STRSUBSTNO(Text025,UPSLabelDescr),
                11,'',PackingStation.Code,FALSE,FALSE);
            UPSUploadedManifest.MODIFY;

            ManifestLine.RESET;
            ManifestLine.SETRANGE("Manifest No.",CurrentManifestHeader."No.");
            IF NOT ManifestLine.FIND('+') THEN
              ManifestLine."Manifest No." := CurrentManifestHeader."No.";

            ManifestLine.INIT;
            ManifestLine."Line No." := ManifestLine."Line No." + 10000;
            ManifestLine.Type := ManifestLine.Type::"UPS Summary";

            ManifestLine.Description :=
              STRSUBSTNO(Text023,UPSUploadedManifest."Book Number",UPSUploadedManifest."Page Number");

            IF UPSUploadedManifest."World Ease Master No." <> '' THEN
              ManifestLine.Description :=
                ManifestLine.Description + ', World Ease ' + UPSUploadedManifest."World Ease Master No.";

            ManifestLine."Shipping Agent Account No." := UPSUploadedManifest."Shipping Agent Account No.";
            ManifestLine."UPS Book No." := UPSUploadedManifest."Book Number";
            ManifestLine."UPS Page No." := UPSUploadedManifest."Page Number";

            ManifestLine."UPS Pickup No." := UPSUploadedManifest."UPS Pickup No.";

            ManifestLine."UPS Shipping Info" := UPSUploadedManifest."UPS Shipping Info";
            ManifestLine."UPS Pickup File No." := UPSUploadedManifest."UPS Pickup File No.";

            ManifestLine."UPS Manifest Filename" := UPSUploadedManifest."Text File Name";
            ManifestLine."UPS Manifest File No." := UPSUploadedManifest."UPS Manifest File No.";
            ManifestLine.Weight := UPSUploadedManifest.Weight;
            ManifestLine.Volume := UPSUploadedManifest.Volume;
            ManifestLine.Value := UPSUploadedManifest.Value;
            ManifestLine."Shipping Cost" := UPSUploadedManifest."Shipping Cost";
            ManifestLine."Shipping Charge" := UPSUploadedManifest."Shipping Charge";
            ManifestLine."Insured Value" := UPSUploadedManifest."Insured Value";

            ManifestLine."Total Packages" := UPSUploadedManifest."Total Packages";
            ManifestLine."Domestic Packages" := UPSUploadedManifest."Domestic Packages";
            ManifestLine."International Packages" := UPSUploadedManifest."International Packages";
            ManifestLine."Value Below 1000 Packages" := UPSUploadedManifest."Value Below 1000 Packages";
            ManifestLine."Value 1000 to 5000 Packages" := UPSUploadedManifest."Value 1000 to 5000 Packages";
            ManifestLine."Value Above 5000 Packages" := UPSUploadedManifest."Value Above 5000 Packages";

            ManifestLine."Next Day Packages" := UPSUploadedManifest."Next Day Packages";
            ManifestLine."Second Day Packages" := UPSUploadedManifest."Second Day Packages";
            ManifestLine."Third Day Packages" := UPSUploadedManifest."Third Day Packages";
            ManifestLine."Total Shipments" := UPSUploadedManifest."Total Shipments";
            ManifestLine."COD Packages" := UPSUploadedManifest."COD Packages";

            ManifestLine.INSERT;

            // Lines for UPS Exception Notices
            IF VoidedPackages > 0 THEN BEGIN
              ManifestLine.INIT;
              ManifestLine."Manifest No." := CurrentManifestHeader."No.";
              ManifestLine."Line No." := ManifestLine."Line No." + 10000;
              ManifestLine.Type := ManifestLine.Type::"UPS Summary";
              ManifestLine.Description := STRSUBSTNO(Text057,VoidedPackages);
              ManifestLine.INSERT;
            END;
            COMMIT;

            UPSManifest2.RESET;
            UPSManifest2.SETRANGE("Manifest No.",UPSUploadedManifest."Manifest No.");
            UPSManifest2.SETRANGE("Book Number",UPSUploadedManifest."Book Number");
            UPSManifest2.SETRANGE("Page Number",UPSUploadedManifest."Page Number");
            HighValue := FALSE;

            IF UPSManifest2.FIND('-') THEN
            REPEAT
              IF PostedPackage.GET(UPSManifest2."Package No.") THEN BEGIN
                IF UPSPostedOptionPage.GET(UPSManifest2."Package No.") THEN
                  IF (UPSPostedOptionPage."Insurance Type" = UPSPostedOptionPage."Insurance Type"::"Declared Value") AND
                     (PostedPackage."Calculation Insured Value" > 1000)
                  THEN
                    HighValue := TRUE;
              END ELSE
                IF Package.GET(UPSManifest2."Package No.") THEN
                  IF (UPSOptionPage."Insurance Type" = UPSOptionPage."Insurance Type"::"Declared Value") AND
                     (Package."Calculation Insured Value" > 1000)
                  THEN
                    HighValue := TRUE;
            UNTIL (UPSManifest2.NEXT = 0) OR (HighValue = TRUE);

            IF HighValue THEN
              REPORT.RUNMODAL(REPORT::"UPSlink High Value Control Log",TRUE,TRUE,UPSManifest2);

            IF UPSUploadedManifest."World Ease Master No." <> '' THEN BEGIN
              WETransaction.PrintManifestLabels(
                UPSUploadedManifest,ShippingSetup,UPSlinkSetup,PackingStation,CarrierPackingStation,
                ShippingAgentAccount);

              WEPrintDoc.PrintWorldEaseDocs(
                UPSUploadedManifest."World Ease Master No.",FALSE,ShippingSetup,PackingStation);
            END;
          UNTIL UPSUPloadedManifestTmp.NEXT = 0;

        IF NOT ErrorUploadingManifest AND NOT UPSlinkSetup.Demo
           AND NOT UPSlinkSetup."Manually Read UPSlink Mail"
        THEN
          UPSlinkMgt.CheckUPSMail;

        IF ErrorUploadingManifest THEN
          MESSAGE(Text009,UPSManifest.TABLECAPTION);
      END;
    END;

    PROCEDURE OpenManifest@65(CurrentManifestHeader@1000000000 : Record 14000712);
    VAR
      ManifestLine@1000000001 : Record 14000713;
      UPSManifest@1000000002 : Record 14050007;
      PostedPackage@1240030000 : Record 14000704;
      UPSUploadedManifest@1240030001 : Record 14050009;
      UPSHazMatManifest@1240030002 : Record 14050014;
    BEGIN
      GetUPSlinkSetup;
      CurrentManifestHeader.TESTFIELD(Posted,FALSE);

      UPSUploadedManifest.SETCURRENTKEY("Manifest No.");
      UPSUploadedManifest.SETRANGE("Manifest No.",CurrentManifestHeader."No.");
      IF UPSUploadedManifest.FIND('+') THEN
        MESSAGE(
          Text063,UPSManifest.TABLECAPTION,CurrentManifestHeader."No.",
          UPSUploadedManifest.FIELDCAPTION("Shipping Agent Account No."),
          UPSUploadedManifest."Shipping Agent Account No.",UPSUploadedManifest."Upload Date",
          UPSUploadedManifest."Upload Time");

      ManifestLine.RESET;
      ManifestLine.SETRANGE("Manifest No.",CurrentManifestHeader."No.");
      ManifestLine.SETRANGE(Type,ManifestLine.Type::"UPS Summary");
      ManifestLine.DELETEALL;

      ManifestLine.SETRANGE(
        Type,ManifestLine.Type::Package,ManifestLine.Type::"Miscellaneous Package");
      IF ManifestLine.FIND('-') THEN
        REPEAT
          UPSManifest.RESET;
          UPSManifest.SETCURRENTKEY("Package No.");
          UPSManifest.SETRANGE("Package No.",ManifestLine."No.");

          IF UPSManifest.FIND('-') THEN BEGIN
            IF UPSManifest."World Ease Master No." <> '' THEN
              WETransaction.OpenManifest(UPSManifest);

            REPEAT
              UPSManifest."Manifest No." := '';
              UPSManifest."Pickup Date" := '';
              UPSManifest."Book Number" := '';
              UPSManifest."Page Number" := '';

              // Add Code to modify additional fields.

              UPSManifest.MODIFY;
            UNTIL UPSManifest.NEXT = 0;
          END;
        UNTIL ManifestLine.NEXT = 0;

      UPSHazMatManifest.RESET;
      UPSHazMatManifest.SETRANGE("Manifest No.",CurrentManifestHeader."No.");
      UPSHazMatManifest.DELETEALL;

      CurrentManifestHeader.LOCKTABLE;
      CurrentManifestHeader.FIND;
      CurrentManifestHeader."UPS Processing Required" := FALSE;
      CurrentManifestHeader.MODIFY;

      // open posted packages are not in ManifestLine table
      PostedPackage.RESET;
      PostedPackage.SETCURRENTKEY(
        "Manifest No.","Shipping Agent Code","Shipping Agent Account No.",Closed,"Manual Shipment",
        "Exclude From Manifest");
      PostedPackage.SETRANGE("Manifest No.",CurrentManifestHeader."No.");
      PostedPackage.SETRANGE(Closed,FALSE);

      UPSManifest.RESET;
      UPSManifest.SETCURRENTKEY("Package No.");

      IF PostedPackage.FIND('-') THEN
        REPEAT
          PostedPackage."Manifest No." := '';
          PostedPackage."Pickup Date" := 0D;
          PostedPackage.MODIFY;

          UPSManifest.SETRANGE("Package No.",PostedPackage."No.");
          IF UPSManifest.FIND('-') THEN
            REPEAT
              UPSManifest."Manifest No." := '';
              UPSManifest."Pickup Date" := '';
              UPSManifest."Book Number" := '';
              UPSManifest."Page Number" := '';

              // Add Code to modify additional fields.

              UPSManifest.MODIFY;
            UNTIL UPSManifest.NEXT = 0;
        UNTIL PostedPackage.NEXT = 0;

      COMMIT;
      MESSAGE(Text027);
    END;

    LOCAL PROCEDURE LeftString@46(TextString@1000000001 : Text[250]) OutText@1000000000 : Text[250];
    BEGIN
      IF STRLEN(TextString) > 0 THEN
        OutText := DELCHR(TextString,'<',' ')
      ELSE
        OutText := '';
    END;

    PROCEDURE GetUPSRoutingCode@47(CountryCode@1000000001 : Code[10];ZIPCode@1000000002 : Code[20]) RoutingCode@1000000000 : Code[15];
    VAR
      UPSRouting@1000000003 : Record 14000769;
      URCDatePlus6M@1240030001 : Date;
      GBZip@1240030002 : Code[20];
      i@1240030006 : Integer;
      URCMonth@1240030007 : Integer;
      URCYear@1240030008 : Integer;
      URCDate@1240030009 : Date;
    BEGIN
      GetShippingSetup;
      IF STRPOS(ShippingSetup."UPS Routing Version",'/') = 0 THEN
        ERROR(
          Text059,ShippingSetup.FIELDCAPTION("UPS Routing Version"),ShippingSetup.TABLECAPTION,
          UPSRouting.TABLECAPTION);

      IF ShippingSetup."UPS Routing Version" = '' THEN
        RoutingCode := ''
      ELSE BEGIN
        EVALUATE(
          URCMonth,
          COPYSTR(
            ShippingSetup."UPS Routing Version",STRPOS(ShippingSetup."UPS Routing Version",'/')-2,2));

        EVALUATE(
          URCYear,COPYSTR(ShippingSetup."UPS Routing Version",STRPOS(ShippingSetup."UPS Routing Version",
          '/')+1));
        URCDate := DMY2DATE(1,URCMonth,URCYear);
        URCDatePlus6M := CALCDATE('6M',URCDate);

        IF URCDatePlus6M < TODAY THEN BEGIN
          //MESSAGE(Text126)  VAS Temp begin end added
        END
        ELSE BEGIN
          IF CountryCode = 'GB' THEN BEGIN
            // if the postal code ends with digit, alpha, alpha and they are not preceded by a space
            // insert a space before the last three characters
            IF NOT (ZIPCode[STRLEN(ZIPCode)] IN ['0','1','2','3','4','5','6','7','8','9']) AND
               NOT (ZIPCode[STRLEN(ZIPCode)-1] IN ['0','1','2','3','4','5','6','7','8','9']) AND
               (ZIPCode[STRLEN(ZIPCode)-2] IN ['0','1','2','3','4','5','6','7','8','9']) AND
               (ZIPCode[STRLEN(ZIPCode)-3] <> ' ')
            THEN
              ZIPCode := COPYSTR(ZIPCode,1,STRLEN(ZIPCode)-3) + ' ' + COPYSTR(ZIPCode,STRLEN(ZIPCode)-2);

            // if the postal code begins with three alphas, replace third alpha with space
            IF NOT (ZIPCode[1] IN ['0','1','2','3','4','5','6','7','8','9']) AND
               NOT (ZIPCode[2] IN ['0','1','2','3','4','5','6','7','8','9']) AND
               NOT (ZIPCode[3] IN ['0','1','2','3','4','5','6','7','8','9',' '])
            THEN
              ZIPCode := COPYSTR(ZIPCode,1,2) + ' ' + COPYSTR(ZIPCode,4);

            // if the postal code begins with an alpha and then a non-alpha, insert a space as the 2nd char
            IF NOT (ZIPCode[1] IN ['0','1','2','3','4','5','6','7','8','9']) AND
               (ZIPCode[2] IN ['0','1','2','3','4','5','6','7','8','9'])
            THEN
              ZIPCode := COPYSTR(ZIPCode,1,1) + ' ' + COPYSTR(ZIPCode,2);

            // if the third character is a digit and the fourth a space, insert a zero before the digit
            IF (ZIPCode[3] IN ['0','1','2','3','4','5','6','7','8','9']) AND
               (ZIPCode[4] = ' ')
            THEN
              ZIPCode := COPYSTR(ZIPCode,1,2) + '0' + COPYSTR(ZIPCode,3);

            // pull out the first 4 chars, trim trailing blanks
            GBZip := DELCHR(COPYSTR(ZIPCode,1,4),'>');

            // remove leading spaces of the remaining chars
            ZIPCode :=  DELCHR(COPYSTR(ZIPCode,5),'<');

            // if the lead char (of the remaining chars) is a digit, append it to the 4 chars we pulled out
            IF ZIPCode[1] IN ['0','1','2','3','4','5','6','7','8','9'] THEN
              GBZip := GBZip + COPYSTR(ZIPCode,1,1);

            ZIPCode := GBZip;
          END;

          UPSRouting.RESET;
          UPSRouting.SETRANGE("Country Code",CountryCode);
          UPSRouting.SETFILTER("Min Zip Code",'<=%1',ZIPCode);
          UPSRouting.SETFILTER("Max Zip Code",'>=%1',ZIPCode);

          IF UPSRouting.FIND('+') THEN
            RoutingCode := UPSRouting."Routing Code"
          ELSE
            RoutingCode := '';
        END;
      END;
    END;

    PROCEDURE ServiceConvertToNo@48(OriginalServiceCode@1000000001 : Code[2]) ServiceCodeOut@1000000000 : Code[3];
    VAR
      ServiceVal@1000000002 : Integer;
      No1@1000000003 : Integer;
      No2@1000000004 : Integer;
      Converted@1000000005 : Boolean;
    BEGIN
      Converted := FALSE;

      IF EVALUATE(ServiceVal,OriginalServiceCode) THEN BEGIN
        IF ServiceVal < 100 THEN BEGIN
          ServiceCodeOut := OriginalServiceCode;
          Converted := TRUE;
        END;
      END;

      IF NOT Converted THEN BEGIN
        CASE OriginalServiceCode[1] OF
          '0': No1 := 0;
          '1': No1 := 32;
          '2': No1 := 64;
          '3': No1 := 96;
          '4': No1 := 128;
          '5': No1 := 160;
          '6': No1 := 192;
          '7': No1 := 224;
          '8': No1 := 256;
          '9': No1 := 288;
          'A': No1 := 320;  // No B
          'C': No1 := 352;
          'D': No1 := 384;
          'E': No1 := 416;
          'F': No1 := 448;
          'G': No1 := 480;
          'H': No1 := 512;  // No I
          'J': No1 := 544;
          'K': No1 := 576;
          'L': No1 := 608;
          'M': No1 := 640;
          'N': No1 := 672;  // No O
          'P': No1 := 704;
          'Q': No1 := 736;
          'R': No1 := 768;
          'S': No1 := 800;
          'T': No1 := 832;  // No U
          'V': No1 := 864;
          'W': No1 := 896;
          'X': No1 := 928;
          'Y': No1 := 960;
          'Z': No1 := 992;
        END;

        CASE OriginalServiceCode[2] OF
          '0': No2 := 0;
          '1': No2 := 1;
          '2': No2 := 2;
          '3': No2 := 3;
          '4': No2 := 4;
          '5': No2 := 5;
          '6': No2 := 6;
          '7': No2 := 7;
          '8': No2 := 8;
          '9': No2 := 9;
          'A': No2 := 10;  // No B
          'C': No2 := 11;
          'D': No2 := 12;
          'E': No2 := 13;
          'F': No2 := 14;
          'G': No2 := 15;
          'H': No2 := 16;  // No I
          'J': No2 := 17;
          'K': No2 := 18;
          'L': No2 := 19;
          'M': No2 := 20;
          'N': No2 := 21;  // No O
          'P': No2 := 22;
          'Q': No2 := 23;
          'R': No2 := 24;
          'S': No2 := 25;
          'T': No2 := 26;  // No U
          'V': No2 := 27;
          'W': No2 := 28;
          'X': No2 := 29;
          'Y': No2 := 30;
          'Z': No2 := 31;
        END;
        ServiceCodeOut := STRSUBSTNO('%1',No1 + No2);
      END;

      IF STRLEN(ServiceCodeOut) < 3 THEN BEGIN
        REPEAT
          ServiceCodeOut := '0' + ServiceCodeOut;
        UNTIL STRLEN(ServiceCodeOut) >= 3;
      END;
    END;

    LOCAL PROCEDURE ServiceConvertToAlpha@49(ReturnServiceCode@1000000001 : Code[3]) ServiceCodeOut@1000000000 : Code[2];
    VAR
      ServiceNo@1000000002 : Integer;
      No1@1000000003 : Integer;
      No2@1000000004 : Integer;
      TempCode@1000000005 : Code[10];
    BEGIN
      EVALUATE(ServiceNo,ReturnServiceCode);

      IF ServiceNo < 100 THEN BEGIN
        IF ServiceNo < 10 THEN
          ServiceCodeOut := STRSUBSTNO('0%1',ServiceNo)
        ELSE
          ServiceCodeOut := STRSUBSTNO('%1',ServiceNo);
        EXIT;
      END;

      No1 := ServiceNo DIV 32;
      No2 := ServiceNo MOD 32;
      No1 := No1 * 32;

      CASE No1 OF
        0: TempCode := '0';
        32: TempCode := '1';
        64: TempCode := '2';
        96: TempCode := '3';
        128: TempCode := '4';
        160: TempCode := '5';
        192: TempCode := '6';
        224: TempCode := '7';
        256: TempCode := '8';
        288: TempCode := '9';
        320: TempCode := 'A';  // No B
        352: TempCode := 'C';
        384: TempCode := 'D';
        416: TempCode := 'E';
        448: TempCode := 'F';
        480: TempCode := 'G';
        512: TempCode := 'H';  // No I
        544: TempCode := 'J';
        576: TempCode := 'K';
        608: TempCode := 'L';
        640: TempCode := 'M';
        672: TempCode := 'N';  // No O
        704: TempCode := 'P';
        736: TempCode := 'Q';
        768: TempCode := 'R';
        800: TempCode := 'S';
        832: TempCode := 'T';  // No U
        864: TempCode := 'V';
        896: TempCode := 'W';
        928: TempCode := 'X';
        960: TempCode := 'Y';
        992: TempCode := 'Z';
      END;

      ServiceCodeOut := TempCode;
      CASE No2 OF
        0: TempCode := '0';
        1: TempCode := '1';
        2: TempCode := '2';
        3: TempCode := '3';
        4: TempCode := '4';
        5: TempCode := '5';
        6: TempCode := '6';
        7: TempCode := '7';
        8: TempCode := '8';
        9: TempCode := '9';
        10: TempCode := 'A';  // No B
        11: TempCode := 'C';
        12: TempCode := 'D';
        13: TempCode := 'E';
        14: TempCode := 'F';
        15: TempCode := 'G';
        16: TempCode := 'H';  // No I
        17: TempCode := 'J';
        18: TempCode := 'K';
        19: TempCode := 'L';
        20: TempCode := 'M';
        21: TempCode := 'N';  // No O
        22: TempCode := 'P';
        23: TempCode := 'Q';
        24: TempCode := 'R';
        25: TempCode := 'S';
        26: TempCode := 'T';  // No U
        27: TempCode := 'V';
        28: TempCode := 'W';
        29: TempCode := 'X';
        30: TempCode := 'Y';
        31: TempCode := 'Z';
      END;
      ServiceCodeOut := ServiceCodeOut + TempCode;
    END;

    LOCAL PROCEDURE GetPackingStation@51();
    BEGIN
      IF PackingStation.Code = '' THEN
        PackingStation.GetPackingStation;
    END;

    LOCAL PROCEDURE GetShippingSetup@50();
    BEGIN
      IF NOT ShippingSetupRetrieved THEN BEGIN
        ShippingSetup.GET;
        ShippingSetupRetrieved := TRUE;
      END;
    END;

    LOCAL PROCEDURE GetShippingAgent@30(ShippingAgentCode@1000000000 : Code[10]);
    BEGIN
      IF (ShippingAgent.Code <> ShippingAgentCode) OR
         (ShippingAgentCode = '')
      THEN
        ShippingAgent.GET(ShippingAgentCode);
    END;

    LOCAL PROCEDURE GetShippingAgentService@14(ShippingAgentCode@1000000000 : Code[10];ShippingAgentServiceCode@1000000001 : Code[30];WorldWideService@1000000002 : Boolean);
    BEGIN
      IF (ShippingAgentService.Code <> ShippingAgentCode) OR
         (ShippingAgentService."World Wide Service" <> WorldWideService) OR
         (ShippingAgentService.Code <> ShippingAgentServiceCode) OR
         (ShippingAgentServiceCode = '')
      THEN
        ShippingAgentService.GET(ShippingAgentCode,ShippingAgentServiceCode,WorldWideService);
    END;

    LOCAL PROCEDURE GetShippingAgentAccount@22(ShippingAgentAccountNo@1000000000 : Code[10]);
    BEGIN
      IF (ShippingAgentAccount."Account No." <> ShippingAgentAccountNo) OR
         (ShippingAgentAccountNo = '')
      THEN
        ShippingAgentAccount.GET(ShippingAgentAccountNo);
    END;

    PROCEDURE Date2Text@28(InDate@1000000000 : Date) : Text[30];
    BEGIN
      EXIT(
        DELCHR(
          FORMAT(
            10000 * DATE2DMY(InDate,3) + 100 * DATE2DMY(InDate,2) + DATE2DMY(InDate,1)),'=',',.'));
    END;

    PROCEDURE Decimal2Text@5(CalcDecimal@1000000000 : Decimal;DecimalToShow@1000000001 : Integer) : Text[30];
    VAR
      TempText@1000000002 : Text[30];
      ThousandChar@1000000003 : Text[1];
    BEGIN
      ThousandChar := COPYSTR(FORMAT(1000.1),2,1);
      TempText := FORMAT(CalcDecimal);
      TempText := DELCHR(TempText,'=',ThousandChar);
      TempText := CONVERTSTR(TempText,',','.');

      IF DecimalToShow <> 0 THEN BEGIN
        IF STRPOS(TempText,'.') = 0 THEN
          TempText := TempText + '.000000'
        ELSE
          TempText := TempText + '00000';
        TempText := COPYSTR(TempText,1,STRPOS(TempText,'.') + DecimalToShow);

        IF (STRLEN(TempText) - STRPOS(TempText,'.') <> DecimalToShow) OR (STRPOS(TempText,'.') = 0) THEN
          ERROR(Text028,CalcDecimal,TempText,DecimalToShow);
      END;

      EXIT(TempText);
    END;

    PROCEDURE Integer2Text@4(CalcInteger@1000000000 : Integer) : Text[30];
    VAR
      TempText@1000000001 : Text[30];
      ThousandChar@1000000002 : Text[1];
    BEGIN
      ThousandChar := COPYSTR(FORMAT(1000.1),2,1);
      TempText := FORMAT(CalcInteger);
      TempText := DELCHR(TempText,'=',ThousandChar);
      TempText := CONVERTSTR(TempText,',','.');
      EXIT(TempText);
    END;

    LOCAL PROCEDURE Decimal2Integer@56(DecimalNumber@1000000001 : Decimal) IntegerNumber@1000000000 : Integer;
    BEGIN
      IntegerNumber := ROUND(DecimalNumber,0.01,'>') * 100;
    END;

    LOCAL PROCEDURE GetShippingZoneChart@2(VAR ShippingZone@1240030000 : Record 14000763;CurrentShippingAgentService@1240030001 : Record 14000708;FromZIPCode@1240030002 : Code[20];FromState@1240030003 : Code[30];ToZIPCode@1240030004 : Code[20];ToCountryCode@1240030005 : Code[10];GiveError@1240030006 : Boolean) : Boolean;
    BEGIN
      WITH CurrentShippingAgentService DO BEGIN
        TESTFIELD("Service Indicator");

        IF STRLEN(FromZIPCode) > 5 THEN
         FromZIPCode := COPYSTR(FromZIPCode,1,5);

        IF (STRLEN(ToZIPCode) > 5) AND
           (NOT "World Wide Service") AND
           (NOT "UPS Canadian Service")
        THEN
          ToZIPCode := COPYSTR(ToZIPCode,1,5)
        ELSE
          IF "UPS Canadian Service" THEN
            ToZIPCode := COPYSTR(ToZIPCode,1,3);

        ShippingZone.RESET;
        IF NOT "World Wide Service" OR
           ((GetUPSCountryCode(ToCountryCode) = 'MX') AND
            ("Service Indicator" = '11'))
        THEN
          ShippingZone.SETCURRENTKEY(
            "Service Indicator","From Min. Code","From Max. Code","To Min. Code","To Max. Code")
        ELSE
          ShippingZone.SETCURRENTKEY(
            "Service Indicator","From Min. Code","From Max. Code","To Country Code");

        ShippingZone.SETRANGE("Service Indicator","Service Indicator");
        ShippingZone.SETFILTER("From Min. Code",'<=%1',FromZIPCode);
        ShippingZone.SETFILTER("From Max. Code",'>=%1',FromZIPCode);

        IF NOT "World Wide Service" THEN BEGIN
          ShippingZone.SETFILTER("To Min. Code",'<=%1',ToZIPCode);
          ShippingZone.SETFILTER("To Max. Code",'>=%1',ToZIPCode);
        END ELSE
          ShippingZone.SETRANGE("To Country Code",GetUPSCountryCode(ToCountryCode));

        IF NOT ShippingZone.FIND('-') THEN BEGIN
          IF "World Wide Service" THEN BEGIN
            ShippingZone.SETRANGE("From Min. Code",'');
            ShippingZone.SETRANGE("From Max. Code",'');
            ShippingZone.SETRANGE("From State",FromState);

            IF NOT ShippingZone.FIND('-') THEN BEGIN
              IF GiveError THEN
                ERROR(
                  Text029,
                  "Shipping Agent Code",Code,FromState,GetUPSCountryCode(ToCountryCode))
              ELSE
                EXIT(FALSE);
            END;
          END ELSE
            IF NOT ShippingZone.FIND('-') THEN BEGIN
              IF GiveError THEN BEGIN
                IF "Service Indicator" = '15' THEN
                  ERROR(
                    Text030 + Text058,
                    "Shipping Agent Code",Code,
                    FromZIPCode,ToZIPCode)
                ELSE
                  ERROR(
                    Text030,
                    "Shipping Agent Code",Code,
                    FromZIPCode,ToZIPCode);
              END ELSE
                EXIT(FALSE);
            END;
        END;

        IF ShippingZone.NEXT <> 0 THEN
          IF GiveError THEN
            ERROR(Text031)
          ELSE
            EXIT(FALSE);

        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetHundredWeight@29(CurrentShippingAgentService@1000000001 : Record 14000708;WeightTier@1240030005 : Code[10];ZoneCode@1000000003 : Code[10];TotalWeight@1000000004 : Decimal;ResidentialDelivery@1000000005 : Boolean;NoOfPackages@1240030006 : Integer;GiveError@1240030004 : Boolean;TotalCalcWeight@1240030008 : Decimal) : Decimal;
    VAR
      HundredWeightService@1240030003 : Record 14000765;
      ShippingZone@1240030002 : Record 14000766;
      RatePerPound@1240030000 : Decimal;
    BEGIN
      CurrentShippingAgentService.TESTFIELD("Service Indicator");
      IF NOT CurrentShippingAgentService."UPS Hundred Weight Available" THEN
        IF GiveError THEN
          ERROR(Text032,CurrentShippingAgentService.Code)
        ELSE
          EXIT(0);

      ShippingZone.GET(CurrentShippingAgentService."Service Indicator",ZoneCode);
      IF TotalCalcWeight < ShippingZone."Minimum Hundred Weight" THEN
        TotalCalcWeight := ShippingZone."Minimum Hundred Weight";

      HundredWeightService.RESET;
      HundredWeightService.SETRANGE("Service Indicator",CurrentShippingAgentService."Service Indicator");
      HundredWeightService.SETRANGE(Zone,ZoneCode);
      HundredWeightService.SETRANGE(Tier,WeightTier);
      IF TotalCalcWeight < 500 THEN
        HundredWeightService.SETFILTER("Minimum Weight",'100..200')
      ELSE
        IF TotalCalcWeight < 1000 THEN
          HundredWeightService.SETRANGE("Minimum Weight",500)
        ELSE
          HundredWeightService.SETRANGE("Minimum Weight",1000);

      IF CurrentShippingAgentService."UPS Residential Serv. Avail." AND ResidentialDelivery THEN
        HundredWeightService.SETRANGE(Residential,TRUE)
      ELSE
        HundredWeightService.SETRANGE(Residential,FALSE);

      IF HundredWeightService.FIND('+') THEN BEGIN
        RatePerPound := HundredWeightService."Rate per Pound";

        IF (HundredWeightService."Min. Tier Charge" > 0) AND
           (ROUND((TotalCalcWeight * RatePerPound)) < HundredWeightService."Min. Tier Charge")
        THEN
          RatePerPound := HundredWeightService."Min. Tier Charge" / TotalWeight
        ELSE
          RatePerPound := (TotalCalcWeight * RatePerPound) / TotalWeight;
      END;
      EXIT(RatePerPound);
    END;

    PROCEDURE GetFreightRate@1240020006(CurrentShippingAgentService@1240020007 : Record 14000708;WeightTier@1240020006 : Code[10];ZoneCode@1240020005 : Code[10];TotalWeight@1240020004 : Decimal) : Decimal;
    VAR
      HundredWeightService@1240020010 : Record 14000765;
      UPSShippingZone@1240020009 : Record 14000766;
      FreightRate@1240020008 : Decimal;
    BEGIN
      CurrentShippingAgentService.TESTFIELD("Service Indicator");

      UPSShippingZone.GET(CurrentShippingAgentService."Service Indicator",ZoneCode);
      IF TotalWeight < UPSShippingZone."Minimum Hundred Weight" THEN
        TotalWeight := UPSShippingZone."Minimum Hundred Weight";

      HundredWeightService.RESET;
      HundredWeightService.SETRANGE("Service Indicator",CurrentShippingAgentService."Service Indicator");
      HundredWeightService.SETRANGE(Zone,ZoneCode);
      HundredWeightService.SETRANGE(Tier,WeightTier);
      HundredWeightService.SETFILTER("Minimum Weight",'<=%1',TotalWeight);
      HundredWeightService.SETFILTER("Maximum Weight",'>=%1',TotalWeight);
      IF HundredWeightService.FIND('+') THEN BEGIN
        IF (HundredWeightService."Min. Tier Charge" > 0) AND
           (ROUND((TotalWeight * (HundredWeightService."Rate per Pound"))) > HundredWeightService."Min. Tier Charge")
        THEN
          FreightRate := TotalWeight * (HundredWeightService."Rate per Pound")
        ELSE
          FreightRate := HundredWeightService."Min. Tier Charge";
      END;

      EXIT(FreightRate);
    END;

    PROCEDURE GetUPSCountryCode@31(CountryCode@1000000000 : Code[10]) : Code[10];
    VAR
      Country@1000000001 : Record 9;
    BEGIN
      IF CountryCode <> '' THEN BEGIN
        Country.GET(CountryCode);
        Country.TESTFIELD(UPS);
        Country.TESTFIELD("ISO 2 char Country Code");
        EXIT(Country."ISO 2 char Country Code");
      END ELSE
        EXIT('US');
    END;

    LOCAL PROCEDURE TestAndTransferToThirdParty@60(VAR CurrentPackage@1240030000 : Record 14000701;UPSOptionPage@1240030001 : Record 14000761;CurrentShippingAgentService@1240030002 : Record 14000708);
    BEGIN
      WITH CurrentPackage DO BEGIN
        IF "World Wide Service" OR "UPS Canadian Service" OR "UPS Puerto Rico Service" THEN BEGIN
          IF UPSOptionPage."International Billing" IN
             [UPSOptionPage."International Billing"::"Third Party",
              UPSOptionPage."International Billing"::FreightCollect]
          THEN BEGIN
            TransferToThirdPartyCost(CurrentShippingAgentService."Markup on Zero Shipping Cost");
            IF UPSOptionPage."Shipper Pays Declared Value" THEN BEGIN
              "Shipping Cost" := "Insurance Charge";
              "Accessorial Charge" := "Insurance Charge";
              "Third Party Accessorial Charge" := "Third Party Accessorial Charge" - "Insurance Charge";
            END;
          END ELSE
              ClearThirdPartyCost;
        END ELSE
          IF "Shipping Payment Type" <> "Shipping Payment Type"::Prepaid THEN BEGIN
            TransferToThirdPartyCost(CurrentShippingAgentService."Markup on Zero Shipping Cost");
            IF UPSOptionPage."Shipper Pays Declared Value" THEN BEGIN
              "Shipping Cost" := "Insurance Charge";
              "Accessorial Charge" := "Insurance Charge";
            END;
          END ELSE
            ClearThirdPartyCost;
      END;
    END;

    LOCAL PROCEDURE TestAndTransferToThirdPartyRS@61(CurrentRateShopHeader@1000000000 : Record 14000741;VAR CurrentRateShopLine@1000000001 : Record 14000742;UPSOptionPage@1000000002 : Record 14000761;CurrentShippingAgentService@1000000003 : Record 14000708);
    BEGIN
      IF CurrentRateShopHeader."Shipping Payment Type" <>
         CurrentRateShopHeader."Shipping Payment Type"::Prepaid
      THEN
        CurrentRateShopLine.TransferToThirdPartyCost(
          CurrentRateShopHeader,CurrentShippingAgentService."Markup on Zero Shipping Cost")
      ELSE
        CurrentRateShopLine.ClearThirdPartyCost;
    END;

    PROCEDURE WideBarCode@66(ExternalTrackingNo@1000000000 : Code[20]) : Boolean;
    VAR
      i@1000000001 : Integer;
    BEGIN
      FOR i := 1 TO STRLEN(ExternalTrackingNo) DO
        IF STRPOS('ABCDEFGHIJKLMNOPQRSTUVWWXY',COPYSTR(ExternalTrackingNo,i,1)) > 0 THEN
          EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetDimensionalWeight@34(ShippingAgentService@1240030001 : Record 14000708;ISO2CountryCode@1240030010 : Code[10];Height@1240030002 : Decimal;Width@1240030003 : Decimal;Length@1240030004 : Decimal) DimensionalWeight@1240030000 : Decimal;
    VAR
      UPSCalculationValue@1240030006 : Record 14050015;
      UPSAccessorialCharge@1240030011 : Record 14000767;
      CubicDimMinimum@1240030008 : Integer;
      DimensionalWtFactor@1240030005 : Decimal;
      CubicDim@1240030007 : Integer;
    BEGIN
      GetShippingSetup;

      Height := ROUND(Height,1);
      Width := ROUND(Width,1);
      Length := ROUND(Length,1);
      CubicDim := Height * Width * Length;

      UPSCalculationValue.RESET;
      UPSCalculationValue.SETRANGE(
        UPSCalculationValue."Calculation Type",
        UPSCalculationValue."Calculation Type"::"Dim. Weight Divisor");

      UPSCalculationValue.SETRANGE("Country Code",ISO2CountryCode);
      UPSCalculationValue.SETRANGE(
        "Service Indicator",ShippingAgentService."Service Indicator");

      IF (ShippingSetup."Default Size Units" = ShippingSetup."Default Size Units"::"IN") THEN BEGIN
        UPSCalculationValue.SETRANGE("Measurement Unit",'i');  // imperial
        CubicDimMinimum := 5184;
      END ELSE BEGIN
        UPSCalculationValue.SETRANGE("Measurement Unit",'m');  // metric
        CubicDimMinimum := 84951;
      END;

      //E = Export/Domestic/Nation
      UPSCalculationValue.SETFILTER("Movement Direction",'%1|%2','E','*');

      UPSAccessorialCharge.RESET;

      UPSCalculationValue.SETFILTER("Low Range",'<%1',CubicDim);
      UPSCalculationValue.SETFILTER("High Range",'>=%1',CubicDim);

      IF UPSCalculationValue.FIND('-') THEN
        DimensionalWtFactor := UPSCalculationValue.Value
      ELSE BEGIN
        IF ShippingAgentService."World Wide Service" OR ShippingAgentService."UPS Canadian Service" THEN BEGIN
          UPSAccessorialCharge.SETFILTER(Type,'WWDWF');
          IF UPSAccessorialCharge.FIND('-') THEN
            DimensionalWtFactor := UPSAccessorialCharge.Fee
        END ELSE BEGIN
          UPSAccessorialCharge.SETFILTER(Type,'GDWF');
          IF UPSAccessorialCharge.FIND('-') THEN
            DimensionalWtFactor := UPSAccessorialCharge.Fee;
        END;
      END;

      IF DimensionalWtFactor <= 0 THEN
        ERROR(Text122)
      ELSE
        DimensionalWeight := ROUND(CubicDim / DimensionalWtFactor,1,'>');

      IF ShippingAgentService."Service Indicator" IN ['03','11'] THEN BEGIN
        IF ShippingSetup."Default Size Units" = ShippingSetup."Default Size Units"::CM THEN
          DimensionalWeight := ROUND(ShippingSetup.KiloToPound(DimensionalWeight),1,'>')
        ELSE
          DimensionalWeight := ROUND(DimensionalWeight,1,'>');
      END ELSE
        IF ShippingSetup."Default Size Units" = ShippingSetup."Default Size Units"::CM THEN
          DimensionalWeight := ROUND(ShippingSetup.KiloToPound(DimensionalWeight),0.1,'>')
        ELSE
          DimensionalWeight := ROUND(DimensionalWeight,0.1,'>');
    END;

    LOCAL PROCEDURE GetCalculationWeightRate@52(VAR UPSOptionPage@1240030000 : Record 14000761;CurrentShippingAgentService@1240030001 : Record 14000708;VAR CalculationWeight@1240030002 : Decimal;VAR CalculationWeightLBS@1240030003 : Decimal;VAR DimensionalWeight@1240030004 : Decimal;VAR ModifyUPSOptionPage@1240030005 : Boolean;VAR UseDimWeight@1240030006 : Boolean;WorldWideService@1240030007 : Boolean;UPSCanadianService@1240030008 : Boolean;UPSPuertoRicoService@1240030009 : Boolean;GiveError@1240030010 : Boolean;CurrentLength@1240030012 : Decimal;CurrentWidth@1240030014 : Decimal;CurrentHeight@1240030015 : Decimal;ShipToISO2CountryCode@1240030017 : Code[10]) : Boolean;
    VAR
      TotalDimension@1240030011 : Integer;
      SecondLongestDim@1240030013 : Integer;
      Package@1240030016 : Record 14000701;
      ISO2CountryCode@1240030018 : Code[10];
      AHCalcWeight@1240020000 : Decimal;
    BEGIN
      GetShippingSetup;
      GetUPSlinkSetup;

      IF (UPSOptionPage."UPS Packaging Type" = UPSOptionPage."UPS Packaging Type"::"UPS Letter") AND
         (CalculationWeight = 0)
      THEN
        CalculationWeight := 0.1;

      IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::KGS THEN BEGIN
        CalculationWeightLBS := ROUND(ShippingSetup.KiloToPound(CalculationWeight),0.1,'>');
        CalculationWeight := ROUND(CalculationWeight,0.1,'>');
      END ELSE BEGIN
        CalculationWeight := ROUND(CalculationWeight,0.1,'>');
        CalculationWeightLBS := CalculationWeight;
      END;

      IF NOT WorldWideService AND NOT UPSCanadianService AND NOT UPSPuertoRicoService AND
         (CalculationWeightLBS > 150)
      THEN
        IF GiveError THEN
          ERROR(
            Text035,
            CalculationWeightLBS)
        ELSE
          EXIT(FALSE)
      ELSE
        IF (CalculationWeightLBS > 150) AND
           (CurrentShippingAgentService."Service Indicator" <> 'E1') THEN
          ERROR(
            Text089,
            CalculationWeightLBS);

      IF (UPSOptionPage."UPS Packaging Type" =
          UPSOptionPage."UPS Packaging Type"::"UPS Express Box Large") AND
         (CalculationWeightLBS > 30) THEN
          IF GiveError THEN
            ERROR(
              Text070,UPSOptionPage.FIELDCAPTION("UPS Packaging Type"),UPSOptionPage."UPS Packaging Type",
              CalculationWeightLBS);

      IF (CurrentHeight <> 0) THEN BEGIN
        CASE TRUE OF
          (CurrentHeight >= CurrentWidth) AND
          (CurrentHeight >= CurrentLength):
            BEGIN
              TotalDimension := CurrentHeight + 2 * CurrentWidth + 2 * CurrentLength;
              IF CurrentWidth > CurrentLength THEN
                SecondLongestDim := CurrentWidth
              ELSE
                SecondLongestDim := CurrentLength;
            END;
          (CurrentWidth >= CurrentHeight) AND
          (CurrentWidth >= CurrentLength):
            BEGIN
              TotalDimension := 2 * CurrentHeight + CurrentWidth + 2 * CurrentLength;
              IF CurrentHeight > CurrentLength THEN
                SecondLongestDim := CurrentHeight
              ELSE
                SecondLongestDim := CurrentLength;
            END;
          ELSE
            BEGIN
              TotalDimension := 2 * CurrentHeight + 2 * CurrentWidth + CurrentLength;
              IF CurrentHeight > CurrentWidth THEN
                SecondLongestDim := CurrentHeight
              ELSE
                SecondLongestDim := CurrentWidth;
            END;
        END;

        IF ShippingSetup."Default Size Units" = ShippingSetup."Default Size Units"::CM THEN BEGIN
          IF ShippingSetup.CentimeterToInch(TotalDimension) > 165 THEN
            IF GiveError THEN
              ERROR(Text015)
            ELSE
              EXIT(FALSE);
        END ELSE
          IF TotalDimension > 165 THEN
            IF GiveError THEN
              ERROR(Text015)
            ELSE
              EXIT(FALSE);

        IF ShippingSetup."Default Size Units" = ShippingSetup."Default Size Units"::"IN" THEN BEGIN
          IF (CurrentLength > 96) OR (CurrentWidth > 96) OR (CurrentHeight > 96) THEN
            UPSOptionPage."Large Package" := TRUE;
            ModifyUPSOptionPage := TRUE;
        END ELSE BEGIN
          IF (CurrentLength > 244) OR (CurrentWidth > 244) OR (CurrentHeight > 244) THEN
            UPSOptionPage."Large Package" := TRUE;
            ModifyUPSOptionPage := TRUE;
        END;

        IF NOT UPSOptionPage."Large Package" AND
           (TotalDimension > 130)
        THEN BEGIN
          IF (UPSlinkSetup."Rate Version" > '2009') AND
             NOT WorldWideService
          THEN
            UPSOptionPage."Large Package" := TRUE;

          IF (UPSlinkSetup."Rate Version" < '2010') AND
             ((NOT WorldWideService AND
               NOT UPSCanadianService) OR
              (CurrentShippingAgentService."Service Indicator" = '11'))
          THEN
            UPSOptionPage."Large Package" := TRUE;

          IF  (UPSlinkSetup."Rate Version" >= '2010') AND (WorldWideService) THEN
            UPSOptionPage."Large Package" := TRUE;

          IF UPSOptionPage."Large Package" THEN BEGIN
            UPSOptionPage."Additional Handling Required" := FALSE;
            ModifyUPSOptionPage := TRUE;
          END;
        END;
      END;

      AHLength := FALSE;
      AHWidth := FALSE;
      AHWeightDom := FALSE;
      AHWeightIntl := FALSE;

      IF UseDimWeight AND (DimensionalWeight > CalculationWeightLBS) THEN
        AHCalcWeight := DimensionalWeight
      ELSE
        AHCalcWeight := CalculationWeightLBS;

      IF (NOT UPSOptionPage."Large Package") AND
         ((CurrentLength > 48) OR
          (CurrentWidth > 48) OR
          (CurrentHeight > 48) OR
          (CalculationWeightLBS > 50) OR
          (SecondLongestDim > 30)) AND
          (CurrentShippingAgentService."Service Indicator" <> 'E1')
      THEN BEGIN
        IF (CalculationWeightLBS > 50) AND
         (NOT CurrentShippingAgentService."World Wide Service" AND
          NOT CurrentShippingAgentService."UPS Canadian Service")
        THEN
          AHWeightDom := TRUE;

        IF (CalculationWeightLBS > 70) AND
         (CurrentShippingAgentService."World Wide Service" OR
          CurrentShippingAgentService."UPS Canadian Service")
        THEN
          AHWeightIntl := TRUE;

        IF (CurrentLength > 48) OR (CurrentWidth > 48) OR (CurrentHeight > 48) AND
           (NOT AHWeightDom AND NOT AHWeightIntl) THEN
          AHLength := TRUE;

        IF (SecondLongestDim > 30) AND
           (NOT AHWeightDom AND NOT AHWeightIntl) THEN
          AHWidth := TRUE;

        IF AHWeightDom OR AHWeightIntl OR AHLength OR AHWidth THEN BEGIN
          UPSOptionPage."Additional Handling Required" := TRUE;
          ModifyUPSOptionPage := TRUE;
        END;
      END;

      IF UPSOptionPage."Large Package" AND
         UPSOptionPage."Additional Handling Required"
      THEN
        IF GiveError THEN
          ERROR(
            Text005,UPSOptionPage.FIELDCAPTION("Additional Handling Required"),
            UPSOptionPage.FIELDCAPTION("Large Package"));

      IF UPSOptionPage."Large Package" AND
         (CalculationWeightLBS < 90)
      THEN BEGIN
        CalculationWeightLBS := 90;
        IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::LBS THEN
          CalculationWeight := 90
        ELSE
          CalculationWeight := ROUND(ShippingSetup.PoundToKilo(CalculationWeightLBS),0.1,'>');
      END;

      UPSOptionPage.TESTFIELD("Oversized Package",FALSE);
      UPSOptionPage.TESTFIELD("Oversized Package 2",FALSE);
      UPSOptionPage.TESTFIELD("Oversized Package 3",FALSE);

      IF ShippingAgentAccount."Automatic Dimensional Weight" THEN BEGIN
        IF (CurrentHeight = 0) AND (CurrentWidth = 0) AND (CurrentLength = 0)
        THEN BEGIN
          DimensionalWeight := 0;
          UseDimWeight := FALSE;
        END ELSE BEGIN
          IF (CurrentHeight = 0) OR
             (CurrentWidth = 0) OR
             (CurrentLength = 0)
          THEN
            IF GiveError THEN
              ERROR(Text121)
            ELSE
              EXIT(FALSE);

          IF UPSOptionPage."Call Tag Type" IN
             [UPSOptionPage."Call Tag Type"::None,
              UPSOptionPage."Call Tag Type"::"Exchange Outbound"]
          THEN
            ISO2CountryCode := ShipToISO2CountryCode
          ELSE
            ISO2CountryCode := 'US';

          DimensionalWeight :=
            GetDimensionalWeight(
              CurrentShippingAgentService,ISO2CountryCode,CurrentHeight,CurrentWidth,CurrentLength);

          UseDimWeight := CalculationWeight < DimensionalWeight;
        END;
      END;

      IF UseDimWeight THEN BEGIN
        CalculationWeight := ROUND(DimensionalWeight,0.1,'>');
        IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::LBS THEN
          CalculationWeightLBS := CalculationWeight
        ELSE
          CalculationWeightLBS := ROUND(ShippingSetup.KiloToPound(DimensionalWeight),0.1,'>');
      END;

      IF (CurrentShippingAgentService."Service Indicator" = '11') AND
         (UPSOptionPage.Type = UPSOptionPage.Type::Package) AND
         Package.GET(UPSOptionPage."Source ID")
      THEN BEGIN
        Package.GET(UPSOptionPage."Source ID");
        IF (Package."Total Packages" > 1) AND
           (CalculationWeightLBS < 15)
        THEN BEGIN
          CalculationWeightLBS := 15;
          IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::LBS THEN
            CalculationWeight := CalculationWeightLBS
          ELSE
            CalculationWeight := ROUND(ShippingSetup.PoundToKilo(CalculationWeightLBS),0.1,'>');
        END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE VoidManifestLine@69(ManifestLine@1240030000 : Record 14000713);
    BEGIN
      HYPERLINK(
        STRSUBSTNO(
           'https://wwwapps.ups.com/voids/process?loc=en_US&clientID=web&voidNumber=%1',
           ManifestLine."UPS Shipment No."));
    END;

    LOCAL PROCEDURE GetManifestTotals@55(VAR UPSUploadedManifest@1240030000 : Record 14050009);
    VAR
      UPSManifest@1240030001 : Record 14050007;
      TotalDomReturnServices@1240030002 : Integer;
      TotalIntReturnServices@1240030003 : Integer;
    BEGIN
      UPSUploadedManifest.Weight := 0;
      UPSUploadedManifest.Volume := 0;
      UPSUploadedManifest.Value := 0;
      UPSUploadedManifest."Shipping Cost" := 0;
      UPSUploadedManifest."Shipping Charge" := 0;
      UPSUploadedManifest."Insured Value" := 0;

      UPSUploadedManifest."Total Packages" := 0;
      UPSUploadedManifest."Domestic Packages" := 0;
      UPSUploadedManifest."International Packages" := 0;
      UPSUploadedManifest."Value Below 1000 Packages" := 0;
      UPSUploadedManifest."Value 1000 to 5000 Packages" := 0;
      UPSUploadedManifest."Value Above 5000 Packages" := 0;

      UPSUploadedManifest."Next Day Packages" := 0;
      UPSUploadedManifest."Second Day Packages" := 0;
      UPSUploadedManifest."Third Day Packages" := 0;
      UPSUploadedManifest."Total Shipments" := 0;
      UPSUploadedManifest."COD Packages" := 0;
      TotalDomReturnServices := 0;
      TotalIntReturnServices := 0;

      UPSManifest.RESET;
      UPSManifest.SETCURRENTKEY("Manifest No.","Shipper Account Number");
      UPSManifest.SETRANGE("Manifest No.",UPSUploadedManifest."Manifest No.");
      UPSManifest.SETRANGE("Shipper Account Number",UPSUploadedManifest."Shipping Agent Account No.");
      UPSManifest.SETRANGE("Book Number",UPSUploadedManifest."Book Number");
      UPSManifest.SETRANGE("Page Number",UPSUploadedManifest."Page Number");

      IF UPSManifest.FIND('-') THEN BEGIN
        IF UPSManifest."World Ease Master No." <> '' THEN BEGIN
          UPSUploadedManifest."Total Shipments" :=
            WETransaction.VoidedPackageCount(UPSManifest."World Ease Master No.") + 1;
          UPSUploadedManifest."International Packages" := 1;
          UPSUploadedManifest."Total Packages" := 1;
        END;

        REPEAT
          IF UPSManifest."Void Indicator" = '' THEN BEGIN
            UPSUploadedManifest."Total Packages" := UPSUploadedManifest."Total Packages" + 1;
            UPSUploadedManifest.Weight := UPSUploadedManifest.Weight + UPSManifest."Package Calculation Weight";
            UPSUploadedManifest.Volume := UPSUploadedManifest.Volume + UPSManifest."Package Calculation Volume";
            UPSUploadedManifest.Value := UPSUploadedManifest.Value + UPSManifest."Package Calculation Value";

            UPSUploadedManifest."Shipping Cost" := UPSUploadedManifest."Shipping Cost" + UPSManifest."Shipping Cost";
            UPSUploadedManifest."Shipping Charge" :=
              UPSUploadedManifest."Shipping Charge" + UPSManifest."Shipping Charge";
            UPSUploadedManifest."Insured Value" := UPSUploadedManifest."Insured Value" + UPSManifest."Insured Value";

            IF UPSManifest."Insured Value" < 1000 THEN
              UPSUploadedManifest."Value Below 1000 Packages" := UPSUploadedManifest."Value Below 1000 Packages" + 1
            ELSE
              IF UPSManifest."Insured Value" < 5001 THEN
                UPSUploadedManifest."Value 1000 to 5000 Packages" :=
                  UPSUploadedManifest."Value 1000 to 5000 Packages" + 1
              ELSE
                UPSUploadedManifest."Value Above 5000 Packages" := UPSUploadedManifest."Value Above 5000 Packages" + 1;

            IF NOT UPSManifest."Return Service" THEN BEGIN
              IF NOT(UPSManifest."International Service Type" =
                UPSManifest."International Service Type"::"Puerto Rican") THEN
              BEGIN
                CASE TRUE OF
                  (UPSManifest."UPS Service Type" = '01') OR (UPSManifest."UPS Service Type" = '14') OR
                  (UPSManifest."UPS Service Type" = '13'):
                    UPSUploadedManifest."Next Day Packages" := UPSUploadedManifest."Next Day Packages" + 1;
                  (UPSManifest."UPS Service Type" = '02') OR (UPSManifest."UPS Service Type" = '59'):
                    UPSUploadedManifest."Second Day Packages" := UPSUploadedManifest."Second Day Packages" + 1;
                  UPSManifest."UPS Service Type" = '12':
                    UPSUploadedManifest."Third Day Packages" := UPSUploadedManifest."Third Day Packages" + 1;
                END;
              END;
              IF UPSManifest."International Service Type" = UPSManifest."International Service Type"::" "
              THEN
                UPSUploadedManifest."Domestic Packages" := UPSUploadedManifest."Domestic Packages" + 1
              ELSE BEGIN
                UPSUploadedManifest."International Packages" := UPSUploadedManifest."International Packages" + 1;
                IF UPSManifest."First Package" THEN
                  UPSUploadedManifest."Total Int. Shipments" := UPSUploadedManifest."Total Int. Shipments" + 1;
              END;
              IF UPSManifest.COD THEN
                UPSUploadedManifest."COD Packages" := UPSUploadedManifest."COD Packages" + 1;
            END ELSE
              IF UPSManifest."International Service Type" <> UPSManifest."International Service Type"::" "
              THEN
                TotalIntReturnServices := TotalIntReturnServices + 1
              ELSE
                TotalDomReturnServices := TotalDomReturnServices + 1;

            IF UPSManifest."First Package" THEN
              UPSUploadedManifest."Total Shipments" := UPSUploadedManifest."Total Shipments" + 1;
          END;
        UNTIL UPSManifest.NEXT = 0;

        UPSUploadedManifest."Total Packages" :=
          UPSUploadedManifest."Total Packages" - TotalDomReturnServices - TotalIntReturnServices;
        UPSUploadedManifest."Domestic Packages" := UPSUploadedManifest."Domestic Packages";
        UPSUploadedManifest."International Packages" :=
          UPSUploadedManifest."International Packages";
      END;
    END;

    LOCAL PROCEDURE GetUPSlinkSetup@1240030000();
    BEGIN
      IF NOT UPSlinkSetupRetrieved THEN BEGIN
        UPSlinkSetup.GET;
        UPSlinkSetupRetrieved := TRUE;
      END;
    END;

    PROCEDURE UPSTrackingNo@1240030001(ExternalTrackingNo@1240030000 : Text[30]) : Text[30];
    BEGIN
      EXIT('1Z' + COPYSTR(ExternalTrackingNo,STRLEN(ExternalTrackingNo) - 7,8));
    END;

    PROCEDURE GetHWAccessorials@1240030002(SaturdayDelivery@1240030007 : Boolean;SaturdayPickup@1240030011 : Boolean;ResidentialDelivery@1240030012 : Boolean;NoOfPackages@1240030009 : Integer;ShipToZip@1240030008 : Code[10];ServiceIndicator@1240030010 : Code[10];VAR SaturdayDeliveryCharge@1240030005 : Decimal;VAR SaturdayPickupCharge@1240030004 : Decimal;VAR CWTResidentialSurcharge@1240030001 : Decimal;VAR CWTDASurcharge@1240030002 : Decimal;VAR DASurcharge@1240030000 : Decimal;VAR LargePackageFee@1240030006 : Decimal;CurrentShippingAgentService@1240020001 : Record 14000708);
    VAR
      UPSAccessorialCharge@1240030003 : Record 14000767;
      Ground@1240020000 : Boolean;
    BEGIN
      SaturdayDeliveryCharge := 0;
      SaturdayPickupCharge := 0;

      IF CurrentShippingAgentService."Transport Method Type" = CurrentShippingAgentService."Transport Method Type"::Ground THEN
        Ground := TRUE
      ELSE
        Ground := FALSE;

      UPSAccessorialCharge.RESET;
      IF SaturdayDelivery OR SaturdayPickup THEN BEGIN
        UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::SC);
        IF NOT UPSAccessorialCharge.FIND('-') THEN
          UPSAccessorialCharge.Fee := 0;
      END;

      IF SaturdayDelivery AND
         (ServiceIndicator = '01')
      THEN
        SaturdayDeliveryCharge := UPSAccessorialCharge.Fee;

      IF SaturdayPickup THEN BEGIN
        // add pickup charge per package based on one charge per hw shipment
        // SaturdayPickup/Delivery is in Base Charge for Package, not Accessorial
        SaturdayPickupCharge :=
          ROUND(UPSAccessorialCharge.Fee / NoOfPackages) - UPSAccessorialCharge.Fee;
      END;

      CWTResidentialSurcharge := 0;
      CWTDASurcharge := 0;
      DASurcharge := 0;

      IF ResidentialDelivery THEN BEGIN
        UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::HRS);

        IF UPSAccessorialCharge.FIND('-') THEN
          CWTResidentialSurcharge :=  ROUND(UPSAccessorialCharge.Fee / NoOfPackages);
        UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::DAS);
        UPSAccessorialCharge.SETRANGE("From Zip Code",ShipToZip);

        IF UPSAccessorialCharge.FIND('-') THEN BEGIN
          DASurcharge :=  UPSAccessorialCharge.Fee;
          UPSAccessorialCharge.RESET;
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::UPS);
          IF Ground THEN
            UPSAccessorialCharge.SETRANGE("From Zip Code",'DASCWTGR')
          ELSE
           UPSAccessorialCharge.SETRANGE("From Zip Code",'DASCWTAR');

          IF UPSAccessorialCharge.FIND('-') THEN
            CWTDASurcharge := ROUND(UPSAccessorialCharge.Fee / NoOfPackages);
        END;
      END ELSE BEGIN
        UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::DAS);
        UPSAccessorialCharge.SETRANGE("From Zip Code",ShipToZip);

        IF UPSAccessorialCharge.FIND('-') THEN BEGIN
          DASurcharge :=  UPSAccessorialCharge.Fee;
          UPSAccessorialCharge.RESET;
          UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::UPS);
          IF Ground THEN
            UPSAccessorialCharge.SETRANGE("From Zip Code",'CWTDAS')
          ELSE
            UPSAccessorialCharge.SETRANGE("From Zip Code",'DASCWTA');

          IF UPSAccessorialCharge.FIND('-') THEN
            CWTDASurcharge := ROUND(UPSAccessorialCharge.Fee / NoOfPackages);
        END;
      END;

      UPSAccessorialCharge.SETRANGE("From Zip Code");
      IF ServiceIndicator = '03' THEN
        UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::LPS)
      ELSE
        UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::LAP);

      IF UPSAccessorialCharge.FIND('-') THEN
        LargePackageFee := UPSAccessorialCharge.Fee
      ELSE
        LargePackageFee := 0;
    END;

    PROCEDURE FormatDateYYYYMMDD@1240030004(DatetoFormat@1240030001 : Date) DateFormatted : Text[8];
    BEGIN
      DateFormatted := FORMAT(DatetoFormat);
      DateFormatted :=
        '20' + COPYSTR(DateFormatted,7,2) + COPYSTR(DateFormatted,1,2) + COPYSTR(DateFormatted,4,2);
    END;

    PROCEDURE FormatTime24HRMMSS@1240030003(TimetoFormat@1240030000 : Time) TimeFormatted : Text[12];
    VAR
      hour@1240030002 : Integer;
    BEGIN
      TimeFormatted := FORMAT(TimetoFormat);
      IF COPYSTR(TimeFormatted,1,1) = ' ' THEN
        EVALUATE(hour,COPYSTR(TimeFormatted,2,1))
      ELSE
        EVALUATE(hour,COPYSTR(TimeFormatted,1,2));

      IF (STRPOS(TimeFormatted,'PM') > 0) AND
         (hour < 12)
      THEN
        hour := hour + 12;

      IF STRLEN(TimeFormatted) = 12 THEN
        TimeFormatted := FORMAT(hour) + COPYSTR(TimeFormatted,5,2) + COPYSTR(TimeFormatted,8,2)
      ELSE
        TimeFormatted := FORMAT(hour) + COPYSTR(TimeFormatted,4,2) + COPYSTR(TimeFormatted,7,2);

      IF STRLEN(TimeFormatted) < 6 THEN
        TimeFormatted := '0' + TimeFormatted;
    END;

    PROCEDURE GetUPSPackagingDimensions@1240030007(VAR OverrideDimensions@1240030005 : Boolean;VAR OverrideLength@1240030000 : Decimal;VAR OverrideWidth@1240030002 : Decimal;VAR OverrideHeight@1240030003 : Decimal;UPSPackagingType@1240030004 : Integer);
    VAR
      UPSOptionPage@1240030001 : Record 14000761;
    BEGIN
      CASE UPSPackagingType OF
        UPSOptionPage."UPS Packaging Type"::"UPS Express Box Small":
          BEGIN
            OverrideDimensions := TRUE;
            OverrideLength := 13;
            OverrideWidth := 11;
            OverrideHeight := 2;
          END;
        UPSOptionPage."UPS Packaging Type"::"UPS Express Box Medium":
          BEGIN
            OverrideDimensions := TRUE;
            OverrideLength := 16;
            OverrideWidth := 11;
            OverrideHeight := 3;
          END;
        UPSOptionPage."UPS Packaging Type"::"UPS Express Box Large":
          BEGIN
            OverrideDimensions := TRUE;
            OverrideLength := 18;
            OverrideWidth := 13;
            OverrideHeight := 3;
          END;
        UPSOptionPage."UPS Packaging Type"::"UPS Express Tube":
          BEGIN
            OverrideDimensions := TRUE;
            OverrideLength := 38;
            OverrideWidth := 6;
            OverrideHeight := 6;
          END;
      END;
    END;

    PROCEDURE GetFreightCharge@1240020003(VAR CurrentPackage@1240020000 : Record 14000701);
    VAR
      UPSOptionPage@1240020017 : Record 14000761;
      UPSShippingZoneChart@1240020016 : Record 14000763;
      UPSShippingZone@1240020015 : Record 14000766;
      TotalWeight@1240020011 : Decimal;
      ActualWeight@1240020018 : Decimal;
      DimensionalWeight@1240020019 : Decimal;
      ShiptoISO2CountryCode@1240020009 : Code[10];
    BEGIN
      WITH CurrentPackage DO BEGIN
        GetShippingAgent("Shipping Agent Code");
        IF ShippingAgent."Disable Rate Calculation" THEN
          EXIT;

        GetShippingSetup;
        GetUPSlinkSetup;
        GetPackingStation;
        TESTFIELD("Shipping Agent Account No.");
        UPSlinkSetup.TESTFIELD("Rate Version");
        GetShippingAgentService("Shipping Agent Code","Shipping Agent Service","World Wide Service");
        UPSOptionPage.GET(UPSOptionPage.Type::Package,"No.",0,0);
        IF "Ship-to Country Code" <> '' THEN
          ShiptoISO2CountryCode := GetUPSCountryCode("Ship-to Country Code")
        ELSE
          ERROR(Text102,
            FIELDCAPTION("Ship-to Country Code"),FIELDCAPTION("No."),"No.");

        ActualWeight := "Calculation Weight";
        DimensionalWeight :=
          GetDimensionalWeight(ShippingAgentService,ShiptoISO2CountryCode,
            "Override Height","Override Width","Override Length");

        IF ActualWeight > DimensionalWeight THEN
          "Calculation Weight" := ActualWeight
        ELSE
          "Calculation Weight" := DimensionalWeight;

        GetShippingZoneChart(
          UPSShippingZoneChart,ShippingAgentService,FixZIPCode(PackingStation."Ship-from ZIP Code"),
          PackingStation."Ship-from State",FixZIPCode("Ship-to ZIP Code"),"Ship-to Country Code",TRUE);

        UPSShippingZone.GET(ShippingAgentService."Service Indicator",UPSShippingZoneChart.Zone);

        "UPS Zone" := UPSShippingZoneChart.Zone;
        IF TotalWeight < UPSShippingZone."Minimum Hundred Weight" THEN
          TotalWeight := UPSShippingZone."Minimum Hundred Weight";
      END;
    END;

    PROCEDURE TrackPackage@1240030009(CurrentPackage@1240030000 : Record 14000701);
    VAR
      Country@1240030010 : Record 9;
      UPSWSTransaction@1240020000 : Codeunit 14000766;
    BEGIN
      WITH CurrentPackage DO BEGIN

        GetShippingSetup;
        IF ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::UPSlink THEN BEGIN
          IF "Service Indicator" IN ['92','93','94','95','GFP'] THEN
            ERROR(Text062,
              FIELDNAME("Shipping Agent Service"),"Shipping Agent Service",
              ShippingSetup.FIELDNAME("UPS Version"),ShippingSetup."UPS Version");
        END;

        IF (ShippingSetup."UPS Version" = ShippingSetup."UPS Version"::"UPSlink/UPS Web Service") AND
           ("Service Indicator" IN ['92','93','94','95','GFP'])
        THEN BEGIN
          UPSWSTransaction.TrackPackage(CurrentPackage);
          EXIT;
        END;

        ShippingAgent.GET("Shipping Agent Code");

        Country.INIT;
        IF "Ship-to Country Code" <> '' THEN
          Country.GET("Ship-to Country Code");

        HYPERLINK(
          STRSUBSTNO(
            ShippingAgent."Internet Address","External Tracking No.",Country.Code,
            "Pickup Date",ShippingAgent."Account No."));
      END;
    END;

    PROCEDURE WWCheckPackage@1240030010(VAR CurrentPackage@1240030000 : Record 14000701;UPSOptionPage@1240030005 : Record 14000761;UPSCountryCode@1240030004 : Code[10]);
    VAR
      UPSlinkPaperlessInvCountry@1240030006 : Record 14050010;
      PackageLine@1240020000 : Record 14000702;
      ExportDocument@1240020001 : Record 14000981;
      Item@1240020002 : Record 27;
    BEGIN
      WITH CurrentPackage DO BEGIN
        PackageLine.RESET;
        PackageLine.SETCURRENTKEY(Type,"No.");
        PackageLine.SETFILTER(Type,'=%1',PackageLine.Type::Item);
        PackageLine.SETRANGE("Package No.","No.");
        IF PackageLine.FIND('-') THEN
          REPEAT
            IF (UPSOptionPage."Certificate of Origin" =
                UPSOptionPage."Certificate of Origin"::"Paperless NAFTA") OR
               (UPSOptionPage."Export Declaration" =
                UPSOptionPage."Export Declaration"::"UPS Prepare")
            THEN BEGIN
              IF (PackageLine."Schedule B code" = '') OR
                 (PackageLine."Schedule B Unit of Measure 1" = '') OR
                 (PackageLine."Schedule B Quantity 1" = 0)
              THEN BEGIN
                Item.RESET;
                Item.SETCURRENTKEY("No.");
                Item.SETRANGE("No.",PackageLine."No.");
                IF Item.FIND('-') THEN BEGIN
                  PackageLine."Schedule B code" := Item."Schedule B Code";
                  PackageLine."Schedule B Unit of Measure 1" :=
                    Item."Schedule B Unit of Measure 1";
                  PackageLine."Schedule B Quantity 1" :=
                    Item."Schedule B Quantity 1";
                END;
                PackageLine.MODIFY;
              END;

                PackageLine.TESTFIELD("Schedule B code");
                PackageLine.TESTFIELD("Schedule B Unit of Measure 1");
                IF PackageLine."Schedule B Unit of Measure 1" <> 'X' THEN
                  PackageLine.TESTFIELD("Schedule B Quantity 1");
            END;

            IF (PackageLine."Value (Price)" = 0) AND
               NOT(UPSOptionPage."International Routing" = UPSOptionPage."International Routing"::"Nondutiable Document")
            THEN
              ERROR(Text006,
                PackageLine.FIELDCAPTION("Value (Price)"),PackageLine."Value (Price)",PackageLine."Package No.");
          UNTIL PackageLine.NEXT = 0;

        ExportDocument.RESET;
        ExportDocument.SETCURRENTKEY(ExportDocument."No.");
        ExportDocument.SETRANGE(ExportDocument."No.","Export Document No.");
        IF ("Export Document No." = '') OR NOT(ExportDocument.FIND('-')) THEN
          ERROR(Text102,
            FIELDCAPTION("Export Document No."),TABLECAPTION,"No.");

        IF (COPYSTR(UPSlinkSetup.UPSlinkVersion,STRLEN(UPSlinkSetup.UPSlinkVersion)-3,4) >= '2011') AND
           (UPSlinkSetup."Rate Version" >= '2011')
        THEN
          WWServiceVerification2(CurrentPackage,UPSOptionPage,UPSCountryCode)
        ELSE
          WWServiceVerification(CurrentPackage,UPSOptionPage,UPSCountryCode);

        IF "Ship-to Phone No." = '' THEN
          IF PackingStation."Phone No. to use If Blank" <> '' THEN BEGIN
            "Ship-to Phone No." := PackingStation."Phone No. to use If Blank";
            MODIFY;
          END;

        TESTFIELD("Ship-to Phone No.");

        IF UPSOptionPage."Hold For Pickup" THEN
          ERROR(Text061,
            UPSOptionPage.FIELDCAPTION("Hold For Pickup"));

        IF UPSOptionPage."SED Required" AND
           (UPSOptionPage."Export Declaration" = UPSOptionPage."Export Declaration"::" ")
        THEN
          ERROR(
            Text006,UPSOptionPage.FIELDCAPTION("Export Declaration"),'',
            UPSOptionPage.FIELDCAPTION("SED Required"));

        IF "UPS Puerto Rico Service" THEN BEGIN
          IF COD THEN BEGIN
            IF NOT
               (UPSOptionPage."Delivery Confirmation Type" IN
                [UPSOptionPage."Delivery Confirmation Type"::None,
                 UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"])
            THEN
              ERROR(
                Text006,UPSOptionPage.FIELDCAPTION("Delivery Confirmation Type"),
                UPSOptionPage."Delivery Confirmation Type",FIELDCAPTION(COD));

            IF UPSOptionPage."Shipper Release" THEN
              ERROR(Text005,FIELDCAPTION(COD),UPSOptionPage.FIELDCAPTION("Shipper Release"));
          END;

          IF UPSOptionPage."Shipper Release" AND
             ("Calculation Insured Value" > 999)
          THEN
            ERROR(
              Text041,UPSOptionPage.FIELDCAPTION("Shipper Release"),
              FIELDCAPTION("Calculation Insured Value"));
        END ELSE BEGIN
          IF UPSOptionPage."Shipper Release" AND
             (UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::"Exchange Outbound")
          THEN
            ERROR(Text061,UPSOptionPage.FIELDCAPTION("Shipper Release"));

          TESTFIELD(COD,FALSE);
        END;

        IF UPSOptionPage."Commercial Invoice" = UPSOptionPage."Commercial Invoice"::"Paperless Invoice"
        THEN
          UPSlinkPaperlessInvCountry.GET(UPSCountryCode);

        IF ("Calculation Insured Value" > 5000) AND
           NOT (UPSOptionPage."Call Tag Type" IN
            [UPSOptionPage."Call Tag Type"::None,
             UPSOptionPage."Call Tag Type"::"Exchange Outbound",
             UPSOptionPage."Call Tag Type"::"Exchange Return",
             UPSOptionPage."Call Tag Type"::"Pack and Collect 1 attempt",
             UPSOptionPage."Call Tag Type"::"Pack and Collect 3 attempt"])
        THEN
            ERROR(
              Text008,UPSOptionPage.FIELDCAPTION("Call Tag Type"),
              FIELDCAPTION("Calculation Insured Value"),"Calculation Insured Value");

        IF ((UPSOptionPage."International Routing" = UPSOptionPage."International Routing"::"Nondutiable Document") OR
           (UPSOptionPage."UPS Packaging Type" = UPSOptionPage."UPS Packaging Type"::"UPS Letter")) AND
           (UPSOptionPage."International Billing" = UPSOptionPage."International Billing"::"Delivery Duty Paid") THEN
            ERROR(
              Text008,UPSOptionPage.FIELDCAPTION("UPS Packaging Type") + '/' +
              UPSOptionPage.FIELDCAPTION("International Routing"),
              UPSOptionPage.FIELDCAPTION("International Billing"),UPSOptionPage."International Billing");

        IF UPSOptionPage."World Ease" THEN
          WETransaction.CheckPackage(CurrentPackage,UPSOptionPage);
      END;
    END;

    PROCEDURE CheckCommit@1240030015(VAR CurrentPackage@1240030002 : Record 14000701;UPSOptionPage@1240030001 : Record 14000761;UPSCountryCode@1240030000 : Code[10]);
    VAR
      UPSlinkWWCommit@1240030004 : Record 14050004;
      CommitFound@1240030003 : Boolean;
    BEGIN
      WITH CurrentPackage DO BEGIN
        UPSlinkWWCommit.INIT;
        UPSlinkWWCommit.RESET;
        UPSlinkWWCommit.SETCURRENTKEY(
          "Destination Country Code","Service Indicator","Destination ZIP Lower Limit",
          "Destination ZIP Upper Limit");

        UPSlinkWWCommit.SETRANGE("Destination Country Code",UPSCountryCode);
        UPSlinkWWCommit.SETRANGE("Service Indicator","Service Indicator");

        IF "Ship-to ZIP Code" <> '' THEN BEGIN
          IF UPSCountryCode IN ['AS','GU','MH','FM','MP','PW','PR','US','VI'] THEN BEGIN
            UPSlinkWWCommit.SETFILTER("Destination ZIP Lower Limit",'<=%1',COPYSTR("Ship-to ZIP Code",1,5));
            UPSlinkWWCommit.SETFILTER("Destination ZIP Upper Limit",'>=%1',COPYSTR("Ship-to ZIP Code",1,5));
          END ELSE BEGIN
            UPSlinkWWCommit.SETFILTER(
              "Destination ZIP Lower Limit",'<=%1',DELCHR("Ship-to ZIP Code",'=',' -'));
            UPSlinkWWCommit.SETFILTER(
              "Destination ZIP Upper Limit",'>=%1',DELCHR("Ship-to ZIP Code",'=',' -'));
          END;
          UPSlinkWWCommit.SETRANGE(
            "Destination Area",'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ');
        END;

        IF NOT UPSlinkWWCommit.FIND('-') THEN BEGIN
          UPSlinkWWCommit.SETRANGE("Destination Area",UPPERCASE("Ship-to City"));
          IF NOT UPSlinkWWCommit.FIND('-') THEN BEGIN
            UPSlinkWWCommit.SETRANGE("Destination Area",UPPERCASE("Ship-to City"));
            UPSlinkWWCommit.SETRANGE("Destination ZIP Lower Limit",'');
            UPSlinkWWCommit.SETRANGE("Destination ZIP Upper Limit",'');
            IF NOT UPSlinkWWCommit.FIND('-') THEN BEGIN
              UPSlinkWWCommit.SETRANGE(
                "Destination Area",'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ');
              UPSlinkWWCommit.SETRANGE("Destination ZIP Lower Limit",'*');
              UPSlinkWWCommit.SETRANGE("Destination ZIP Upper Limit",'*');
              IF NOT UPSlinkWWCommit.FIND('-') THEN;
            END;
          END;
        END;

        UPSlinkWWCommit.SETRANGE(Residential,'');
        UPSlinkWWCommit.SETRANGE("Saturday Delivery",'');
        UPSlinkWWCommit.SETRANGE("Duty Assessible",'');

        IF UPSlinkWWCommit.FIND('-') THEN
          CommitFound := TRUE
        ELSE
          IF "Residential Delivery" THEN BEGIN
            UPSlinkWWCommit.SETRANGE(Residential,'1');
            IF UPSlinkWWCommit.FIND('-') THEN
              CommitFound := TRUE;
          END ELSE BEGIN
            UPSlinkWWCommit.SETRANGE(Residential,'0');
            IF UPSlinkWWCommit.FIND('-') THEN
              CommitFound := TRUE;
          END;

        IF NOT CommitFound THEN BEGIN
          UPSlinkWWCommit.SETRANGE(Residential,'');
          IF UPSOptionPage."Saturday Delivery" THEN BEGIN
            UPSlinkWWCommit.SETRANGE("Saturday Delivery",'1');
            IF UPSlinkWWCommit.FIND('-') THEN
              CommitFound := TRUE;
          END ELSE BEGIN
            UPSlinkWWCommit.SETRANGE("Saturday Delivery",'0');
            IF UPSlinkWWCommit.FIND('-') THEN
              CommitFound := TRUE;
          END;
        END;

        IF NOT CommitFound THEN BEGIN
          UPSlinkWWCommit.SETRANGE("Saturday Delivery",'');
          IF UPSOptionPage."International Routing" = UPSOptionPage."International Routing"::Dutiable
          THEN BEGIN
            UPSlinkWWCommit.SETRANGE("Duty Assessible",'1');
            IF UPSlinkWWCommit.FIND('-') THEN
              CommitFound := TRUE;
          END ELSE BEGIN
            UPSlinkWWCommit.SETRANGE("Duty Assessible",'0');
            IF UPSlinkWWCommit.FIND('-') THEN
              CommitFound := TRUE;
          END;
        END;

        IF NOT CommitFound THEN BEGIN
          UPSlinkWWCommit.SETRANGE("Duty Assessible",'');
          CASE TRUE OF
            "Residential Delivery" AND UPSOptionPage."Saturday Delivery":
              BEGIN
                UPSlinkWWCommit.SETRANGE("Saturday Delivery",'1');
                UPSlinkWWCommit.SETRANGE(Residential,'1');
                IF UPSlinkWWCommit.FIND('-') THEN
                  CommitFound := TRUE
                ELSE
                  IF "World Wide Service" OR "UPS Canadian Service" OR "UPS Puerto Rico Service" THEN
                    IF UPSOptionPage."International Routing" =
                       UPSOptionPage."International Routing"::Dutiable
                    THEN BEGIN
                      UPSlinkWWCommit.SETRANGE("Duty Assessible",'1');
                      UPSlinkWWCommit.SETRANGE("Saturday Delivery",'1');
                      UPSlinkWWCommit.SETRANGE(Residential,'1');
                      IF UPSlinkWWCommit.FIND('-') THEN
                        CommitFound := TRUE
                      ELSE BEGIN
                        UPSlinkWWCommit.SETRANGE("Saturday Delivery",'');
                        IF UPSlinkWWCommit.FIND('-') THEN
                          CommitFound := TRUE
                        ELSE BEGIN
                          UPSlinkWWCommit.SETRANGE(Residential,'');
                          UPSlinkWWCommit.SETRANGE("Saturday Delivery",'1');
                          IF UPSlinkWWCommit.FIND('-') THEN
                            CommitFound := TRUE;
                        END;
                      END;
                    END ELSE BEGIN
                      UPSlinkWWCommit.SETRANGE("Duty Assessible",'0');
                      UPSlinkWWCommit.SETRANGE("Saturday Delivery",'1');
                      UPSlinkWWCommit.SETRANGE(Residential,'1');
                      IF UPSlinkWWCommit.FIND('-') THEN
                        CommitFound := TRUE
                      ELSE BEGIN
                        UPSlinkWWCommit.SETRANGE("Saturday Delivery",'');
                        IF UPSlinkWWCommit.FIND('-') THEN
                          CommitFound := TRUE
                        ELSE BEGIN
                          UPSlinkWWCommit.SETRANGE(Residential,'');
                          UPSlinkWWCommit.SETRANGE("Saturday Delivery",'1');
                          IF UPSlinkWWCommit.FIND('-') THEN
                            CommitFound := TRUE;
                        END;
                      END;
                    END;
              END;
            "Residential Delivery" AND NOT UPSOptionPage."Saturday Delivery":
              BEGIN
                UPSlinkWWCommit.SETRANGE("Saturday Delivery",'0');
                UPSlinkWWCommit.SETRANGE(Residential,'1');
                IF UPSlinkWWCommit.FIND('-') THEN
                  CommitFound := TRUE
                ELSE
                  IF "World Wide Service" OR "UPS Canadian Service" OR "UPS Puerto Rico Service" THEN
                    IF UPSOptionPage."International Routing" =
                       UPSOptionPage."International Routing"::Dutiable
                    THEN BEGIN
                      UPSlinkWWCommit.SETRANGE("Duty Assessible",'1');
                      UPSlinkWWCommit.SETRANGE("Saturday Delivery",'0');
                      UPSlinkWWCommit.SETRANGE(Residential,'1');
                      IF UPSlinkWWCommit.FIND('-') THEN
                        CommitFound := TRUE
                      ELSE BEGIN
                        UPSlinkWWCommit.SETRANGE("Saturday Delivery",'');
                        IF UPSlinkWWCommit.FIND('-') THEN
                          CommitFound := TRUE
                        ELSE BEGIN
                          UPSlinkWWCommit.SETRANGE(Residential,'');
                          UPSlinkWWCommit.SETRANGE("Saturday Delivery",'0');
                          IF UPSlinkWWCommit.FIND('-') THEN
                            CommitFound := TRUE;
                        END;
                      END;
                    END ELSE BEGIN
                      UPSlinkWWCommit.SETRANGE("Duty Assessible",'0');
                      UPSlinkWWCommit.SETRANGE("Saturday Delivery",'0');
                      UPSlinkWWCommit.SETRANGE(Residential,'1');
                      IF UPSlinkWWCommit.FIND('-') THEN
                        CommitFound := TRUE
                      ELSE BEGIN
                        UPSlinkWWCommit.SETRANGE("Saturday Delivery",'');
                        IF UPSlinkWWCommit.FIND('-') THEN
                          CommitFound := TRUE
                        ELSE BEGIN
                          UPSlinkWWCommit.SETRANGE(Residential,'');
                          UPSlinkWWCommit.SETRANGE("Saturday Delivery",'0');
                          IF UPSlinkWWCommit.FIND('-') THEN
                            CommitFound := TRUE;
                        END;
                      END;
                    END;
              END;
            NOT "Residential Delivery" AND UPSOptionPage."Saturday Delivery":
              BEGIN
                UPSlinkWWCommit.SETRANGE("Saturday Delivery",'1');
                UPSlinkWWCommit.SETRANGE(Residential,'0');
                IF UPSlinkWWCommit.FIND('-') THEN
                  CommitFound := TRUE
                ELSE
                  IF "World Wide Service" OR "UPS Canadian Service" OR "UPS Puerto Rico Service" THEN
                    IF UPSOptionPage."International Routing" =
                       UPSOptionPage."International Routing"::Dutiable
                    THEN BEGIN
                      UPSlinkWWCommit.SETRANGE("Duty Assessible",'1');
                      UPSlinkWWCommit.SETRANGE("Saturday Delivery",'1');
                      UPSlinkWWCommit.SETRANGE(Residential,'0');
                      IF UPSlinkWWCommit.FIND('-') THEN
                        CommitFound := TRUE
                      ELSE BEGIN
                        UPSlinkWWCommit.SETRANGE("Saturday Delivery",'');
                        IF UPSlinkWWCommit.FIND('-') THEN
                          CommitFound := TRUE
                        ELSE BEGIN
                          UPSlinkWWCommit.SETRANGE(Residential,'');
                          UPSlinkWWCommit.SETRANGE("Saturday Delivery",'1');
                          IF UPSlinkWWCommit.FIND('-') THEN
                            CommitFound := TRUE;
                        END;
                      END;
                    END ELSE BEGIN
                      UPSlinkWWCommit.SETRANGE("Duty Assessible",'0');
                      UPSlinkWWCommit.SETRANGE("Saturday Delivery",'1');
                      UPSlinkWWCommit.SETRANGE(Residential,'0');
                      IF UPSlinkWWCommit.FIND('-') THEN
                        CommitFound := TRUE
                      ELSE BEGIN
                        UPSlinkWWCommit.SETRANGE("Saturday Delivery",'');
                        IF UPSlinkWWCommit.FIND('-') THEN
                          CommitFound := TRUE
                        ELSE BEGIN
                          UPSlinkWWCommit.SETRANGE(Residential,'');
                          UPSlinkWWCommit.SETRANGE("Saturday Delivery",'1');
                          IF UPSlinkWWCommit.FIND('-') THEN
                            CommitFound := TRUE;
                        END;
                      END;
                    END;
              END;
            NOT "Residential Delivery" AND NOT UPSOptionPage."Saturday Delivery":
              BEGIN
                UPSlinkWWCommit.SETRANGE("Saturday Delivery",'0');
                UPSlinkWWCommit.SETRANGE(Residential,'0');
                IF UPSlinkWWCommit.FIND('-') THEN
                  CommitFound := TRUE
                ELSE
                  IF "World Wide Service" OR "UPS Canadian Service" OR "UPS Puerto Rico Service" THEN
                    IF UPSOptionPage."International Routing" =
                       UPSOptionPage."International Routing"::Dutiable
                    THEN BEGIN
                      UPSlinkWWCommit.SETRANGE("Duty Assessible",'1');
                      UPSlinkWWCommit.SETRANGE("Saturday Delivery",'0');
                      UPSlinkWWCommit.SETRANGE(Residential,'0');
                      IF UPSlinkWWCommit.FIND('-') THEN
                        CommitFound := TRUE
                      ELSE BEGIN
                        UPSlinkWWCommit.SETRANGE("Saturday Delivery",'');
                        IF UPSlinkWWCommit.FIND('-') THEN
                          CommitFound := TRUE
                        ELSE BEGIN
                          UPSlinkWWCommit.SETRANGE(Residential,'');
                          UPSlinkWWCommit.SETRANGE("Saturday Delivery",'0');
                          IF UPSlinkWWCommit.FIND('-') THEN
                            CommitFound := TRUE;
                        END;
                      END;
                    END ELSE BEGIN
                      UPSlinkWWCommit.SETRANGE("Duty Assessible",'0');
                      UPSlinkWWCommit.SETRANGE("Saturday Delivery",'0');
                      UPSlinkWWCommit.SETRANGE(Residential,'0');
                      IF UPSlinkWWCommit.FIND('-') THEN
                        CommitFound := TRUE
                      ELSE BEGIN
                        UPSlinkWWCommit.SETRANGE("Saturday Delivery",'');
                        IF UPSlinkWWCommit.FIND('-') THEN
                          CommitFound := TRUE
                        ELSE BEGIN
                          UPSlinkWWCommit.SETRANGE(Residential,'');
                          UPSlinkWWCommit.SETRANGE("Saturday Delivery",'0');
                          IF UPSlinkWWCommit.FIND('-') THEN
                            CommitFound := TRUE;
                        END;
                      END;
                    END;
              END;
          END;
        END;

        IF ((ShippingAgentService."Service Indicator" IN ['13','15','59']) AND
             NOT CommitFound) OR
           ((ShippingAgentService."Service Indicator" = '01') AND
             UPSOptionPage."Saturday Delivery" AND
             NOT CommitFound)
        THEN BEGIN
            IF (UPSlinkWWCommit."Saturday Delivery" = '0') AND UPSOptionPage."Saturday Delivery" THEN
              ERROR(Text008,UPSOptionPage.FIELDCAPTION("Saturday Delivery"),ShippingAgentService.Code)
            ELSE IF (UPSlinkWWCommit.Residential = '0') AND ("Residential Delivery") THEN
              ERROR(Text008,FIELDCAPTION("Residential Delivery"),ShippingAgentService.Code)
            ELSE IF (UPSlinkWWCommit."Duty Assessible" = '0') AND (UPSOptionPage."International Routing" =
              UPSOptionPage."International Routing"::Dutiable) THEN
              ERROR(Text008,UPSOptionPage.FIELDCAPTION("International Routing"),
              ShippingAgentService.Code)
            ELSE
              ERROR(Text008,ShippingAgentService.Code,FIELDCAPTION("Ship-to ZIP Code"),"Ship-to ZIP Code");
        END;
      END;
    END;

    PROCEDURE CheckBilling@1240030013(VAR CurrentPackage@1240030000 : Record 14000701;VAR UPSOptionPage@1240030001 : Record 14000761;UPSCountryCode@1240030002 : Code[10];ShipFromState@1240030003 : Text[30];UPSRateVersion@1240030005 : Text[10]);
    VAR
      UPSlinkWWOrigDestValid@1240030004 : Record 14050011;
    BEGIN
      IF (CurrentPackage."Third Party Ship. Account No." <> '') AND
         (GetUPSCountryCode(UPSOptionPage."Third Party Country Code") = 'US') AND
         (STRLEN(CurrentPackage."Third Party Ship. Account No.") <> 6)
      THEN
        ERROR(STRSUBSTNO(Text047,CurrentPackage.FIELDCAPTION("Third Party Ship. Account No.")) +
              STRSUBSTNO(Text114,CurrentPackage.TABLECAPTION,CurrentPackage.FIELDCAPTION("Third Party Ship. Account No.")));

      UPSlinkWWOrigDestValid.RESET;

      CASE UPPERCASE(ShipFromState) OF
        'AK':
          UPSlinkWWOrigDestValid.SETRANGE("Origin Country Code",'USAK');
        'HI':
          UPSlinkWWOrigDestValid.SETRANGE("Origin Country Code",'USHI');
        ELSE
          UPSlinkWWOrigDestValid.SETRANGE("Origin Country Code",'US48');
      END;

      IF UPSCountryCode <> 'US' THEN
        UPSlinkWWOrigDestValid.SETRANGE("Destination Country Code",UPSCountryCode)
      ELSE
        CASE UPPERCASE(CurrentPackage."Ship-to State") OF
          'AK':
            UPSlinkWWOrigDestValid.SETRANGE("Destination Country Code",'USAK');
          'HI':
            UPSlinkWWOrigDestValid.SETRANGE("Destination Country Code",'USHI');
          ELSE
            UPSlinkWWOrigDestValid.SETRANGE("Destination Country Code",'US48');
        END;

      UPSlinkWWOrigDestValid.SETRANGE(
        "Validation Type",UPSlinkWWOrigDestValid."Validation Type"::"Billing Option");

      IF CurrentPackage."World Wide Service" OR
         CurrentPackage."UPS Canadian Service" OR
         CurrentPackage."UPS Puerto Rico Service"
      THEN BEGIN
        IF (CurrentPackage."Shipping Payment Type" <>
           CurrentPackage."Shipping Payment Type"::Prepaid) AND
           NOT((CurrentPackage."UPS Puerto Rico Service") AND
           (CurrentPackage."Shipping Payment Type" =
            CurrentPackage."Shipping Payment Type"::Consignee))
        THEN BEGIN
          CASE CurrentPackage."Shipping Payment Type" OF
            CurrentPackage."Shipping Payment Type"::"Third Party":
              BEGIN
                CurrentPackage.TESTFIELD("Third Party Ship. Account No.");
                IF UPSOptionPage."International Billing" <>
                   UPSOptionPage."International Billing"::"Shipping Duty Tax" THEN BEGIN
                UPSOptionPage."International Billing" := UPSOptionPage."International Billing"::"Third Party";
                UPSOptionPage.MODIFY(FALSE);
                CurrentPackage."Shipping Payment Type" := CurrentPackage."Shipping Payment Type"::Prepaid;
                END;
              END;
            CurrentPackage."Shipping Payment Type"::"Freight Collect":
              BEGIN
                CurrentPackage.TESTFIELD("Third Party Ship. Account No.");
                UPSOptionPage."International Billing" := UPSOptionPage."International Billing"::FreightCollect;
                UPSOptionPage.MODIFY(FALSE);
                CurrentPackage."Shipping Payment Type" := CurrentPackage."Shipping Payment Type"::Prepaid;
              END;

          ELSE
              ERROR(Text088);
          END;
        END;

        CASE UPSOptionPage."International Billing" OF
          UPSOptionPage."International Billing"::" ",
          UPSOptionPage."International Billing"::Prepaid:
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'P/P');
          UPSOptionPage."International Billing"::"Third Party":
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'T/P');
          UPSOptionPage."International Billing"::"Free On Board":
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'FOB');
          UPSOptionPage."International Billing"::FreightCollect:
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'F/C');
          UPSOptionPage."International Billing"::"Cost Freight":
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'C/F');
          UPSOptionPage."International Billing"::"Delivery Duty Paid":
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'SDV');
          UPSOptionPage."International Billing"::"Shipping Duty Tax":
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'F/D');
        END;

        UPSlinkWWOrigDestValid.FIND('-');

        IF UPSOptionPage."Shipper Pays Declared Value" AND
           (UPSOptionPage."International Billing" = UPSOptionPage."International Billing"::" ")
        THEN
          ERROR(
            Text068,UPSOptionPage.FIELDCAPTION("Shipper Pays Declared Value"),
            UPSOptionPage.FIELDCAPTION("International Billing"),
            FORMAT(UPSOptionPage."International Billing"::Prepaid));

        IF UPSOptionPage."Shipper Pays Declared Value" AND
           (UPSOptionPage."International Billing" IN
            [UPSOptionPage."International Billing"::" ",
             UPSOptionPage."International Billing"::Prepaid,
             UPSOptionPage."International Billing"::"Free On Board",
             UPSOptionPage."International Billing"::"Cost Freight",
             UPSOptionPage."International Billing"::"Delivery Duty Paid",
             UPSOptionPage."International Billing"::"Shipping Duty Tax"])
        THEN
          ERROR(
            Text008,UPSOptionPage.FIELDCAPTION("Shipper Pays Declared Value"),
            UPSOptionPage.FIELDCAPTION("International Billing"),UPSOptionPage."International Billing");

        IF (UPSOptionPage."Insurance Type" IN
            [UPSOptionPage."Insurance Type"::"Flexible Parcel",
             UPSOptionPage."Insurance Type"::"Expanded Parcel",
             UPSOptionPage."Insurance Type"::"Time in Transit"]) AND
           NOT (UPSOptionPage."International Billing" IN
                [UPSOptionPage."International Billing"::" ",
                 UPSOptionPage."International Billing"::Prepaid,
                 UPSOptionPage."International Billing"::"Free On Board",
                 UPSOptionPage."International Billing"::"Cost Freight"])
        THEN
          ERROR(
            Text008,
            FORMAT(UPSOptionPage."International Billing"),
            UPSOptionPage.FIELDCAPTION("Insurance Type"),FORMAT(UPSOptionPage."Insurance Type"));

        CASE UPSOptionPage."International Billing" OF
          UPSOptionPage."International Billing"::"Third Party",
          UPSOptionPage."International Billing"::"Free On Board",
          UPSOptionPage."International Billing"::"Cost Freight":
            BEGIN
              CurrentPackage.TESTFIELD("Third Party Ship. Account No.");
              UPSOptionPage.TESTFIELD("Third Party Name");
              UPSOptionPage.TESTFIELD("Third Party Address");
              UPSOptionPage.TESTFIELD("Third Party City");
              UPSOptionPage.TESTFIELD("Third Party ZIP Code");
            END;
          UPSOptionPage."International Billing"::FreightCollect:
            CurrentPackage.TESTFIELD("Third Party Ship. Account No.");
          UPSOptionPage."International Billing"::"Delivery Duty Paid",
          UPSOptionPage."International Billing"::"Shipping Duty Tax":
            IF CurrentPackage."Third Party Ship. Account No." <> '' THEN BEGIN
              UPSOptionPage.TESTFIELD("Third Party Name");
              UPSOptionPage.TESTFIELD("Third Party Address");
              UPSOptionPage.TESTFIELD("Third Party City");
              UPSOptionPage.TESTFIELD("Third Party ZIP Code");
            END;
        END;

        IF (UPSOptionPage."International Billing" = UPSOptionPage."International Billing"::"Third Party") AND
           (UPSRateVersion > '2009')
        THEN BEGIN
          UPSlinkWWOrigDestValid.RESET;
          UPSlinkWWOrigDestValid.SETFILTER("Origin Country Code",'%1','US*');
          UPSlinkWWOrigDestValid.SETRANGE(
            "Validation Type",UPSlinkWWOrigDestValid."Validation Type"::"Bill-to Country");

          IF UPSOptionPage."Third Party Country Code" = '' THEN
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'US')
          ELSE
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",
              GetUPSCountryCode(UPSOptionPage."Third Party Country Code"));
          IF NOT UPSlinkWWOrigDestValid.FIND('-') THEN
            ERROR(STRSUBSTNO(Text112,
              UPSOptionPage."Third Party Country Code",UPSOptionPage.FIELDCAPTION("Third Party Country Code"),
              UPSOptionPage.FIELDCAPTION("International Billing"),UPSOptionPage."International Billing",
              UPSOptionPage.TABLECAPTION) +
              STRSUBSTNO(Text113,UPSlinkWWOrigDestValid.TABLECAPTION,UPSlinkWWOrigDestValid.GETFILTERS));
        END;
      END ELSE BEGIN
        CASE CurrentPackage."Shipping Payment Type" OF
          CurrentPackage."Shipping Payment Type"::Prepaid:
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'P/P');
          CurrentPackage."Shipping Payment Type"::"Third Party":
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'T/P');
          CurrentPackage."Shipping Payment Type"::"Freight Collect":
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'F/C');
          CurrentPackage."Shipping Payment Type"::Consignee:
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'C/B');
        END;

        UPSlinkWWOrigDestValid.FIND('-');

        IF (CurrentPackage."Shipping Payment Type" = CurrentPackage."Shipping Payment Type"::Prepaid)
        THEN BEGIN
          IF UPSOptionPage."Shipper Pays Declared Value" THEN
            ERROR(
              Text008,UPSOptionPage.FIELDCAPTION("Shipper Pays Declared Value"),
              CurrentPackage.FIELDCAPTION("Shipping Payment Type"),
              CurrentPackage."Shipping Payment Type");
        END ELSE BEGIN
          IF CurrentPackage."Shipping Payment Type" <>
             CurrentPackage."Shipping Payment Type"::Consignee
          THEN BEGIN
            CurrentPackage.TESTFIELD("Third Party Ship. Account No.");
            IF (GetUPSCountryCode(UPSOptionPage."Third Party Country Code") <> 'US') THEN
              ERROR(Text048,CurrentPackage."Shipping Payment Type")
            ELSE
              IF STRLEN(CurrentPackage."Third Party Ship. Account No.") <> 6 THEN
                ERROR(Text049,CurrentPackage.FIELDCAPTION("Third Party Ship. Account No."));
          END;

          IF CurrentPackage."Shipping Payment Type" =
             CurrentPackage."Shipping Payment Type"::"Third Party"
          THEN BEGIN
            UPSOptionPage.TESTFIELD("Third Party Name");
            UPSOptionPage.TESTFIELD("Third Party Address");
            UPSOptionPage.TESTFIELD("Third Party City");
            UPSOptionPage.TESTFIELD("Third Party ZIP Code");
          END;

          IF CurrentPackage."Shipping Payment Type" =
             CurrentPackage."Shipping Payment Type"::"Freight Collect"
          THEN BEGIN
            IF UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None THEN
              ERROR(
                Text006,UPSOptionPage.FIELDCAPTION("Call Tag Type"),
                FORMAT(UPSOptionPage."Call Tag Type"),
                CurrentPackage."Shipping Payment Type");

            IF CurrentPackage."Third Party Ship. Account No." = ShippingAgentAccount."Account No." THEN
              ERROR(
                Text051,CurrentPackage.FIELDCAPTION("Third Party Ship. Account No."),
                ShippingAgentAccount.FIELDCAPTION("Account No."),
                CurrentPackage."Shipping Payment Type");
          END;

          IF UPSOptionPage."Insurance Type" IN
             [UPSOptionPage."Insurance Type"::"Flexible Parcel",
              UPSOptionPage."Insurance Type"::"Expanded Parcel",
              UPSOptionPage."Insurance Type"::"Time in Transit"]
          THEN
            ERROR(
              Text008,FORMAT(UPSOptionPage."Insurance Type"),
              CurrentPackage.FIELDCAPTION("Shipping Payment Type"),
              FORMAT(CurrentPackage."Shipping Payment Type"));
        END;
      END;
    END;

    PROCEDURE CheckPackagingType@1240030011(VAR CurrentPackage@1240030002 : Record 14000701;UPSOptionPage@1240030000 : Record 14000761;UPSCountryCode@1240030001 : Code[10];ShipFromState@1240030004 : Text[30]);
    VAR
      UPSlinkWWOrigDestValid@1240030003 : Record 14050011;
      PackageLine@1240020000 : Record 14000702;
      ItemCount@1240020001 : Integer;
    BEGIN
      IF (UPSOptionPage."UPS Packaging Type" IN
          [UPSOptionPage."UPS Packaging Type"::"UPS Letter",
           UPSOptionPage."UPS Packaging Type"::"UPS 10kg Box",
           UPSOptionPage."UPS Packaging Type"::"UPS 25kg Box"])
      THEN
        CurrentPackage.TESTFIELD("Total Packages",1);

      IF UPSOptionPage."Direct Delivery Only" AND
         NOT (UPSOptionPage."UPS Packaging Type" IN
              [UPSOptionPage."UPS Packaging Type"::Unknown,
               UPSOptionPage."UPS Packaging Type"::None,
               UPSOptionPage."UPS Packaging Type"::Package,
               UPSOptionPage."UPS Packaging Type"::"UPS Letter",
               UPSOptionPage."UPS Packaging Type"::"UPS Express Pak",
               UPSOptionPage."UPS Packaging Type"::"UPS Express Tube",
               UPSOptionPage."UPS Packaging Type"::"UPS Express Box Small",
               UPSOptionPage."UPS Packaging Type"::"UPS Express Box Medium",
               UPSOptionPage."UPS Packaging Type"::"UPS Express Box Large",
               UPSOptionPage."UPS Packaging Type"::"UPS 10kg Box",
               UPSOptionPage."UPS Packaging Type"::"UPS 25kg Box"])
      THEN
        ERROR(
          Text008,UPSOptionPage.FIELDCAPTION("Direct Delivery Only"),
          UPSOptionPage.FIELDCAPTION("UPS Packaging Type"),FORMAT(UPSOptionPage."UPS Packaging Type"));

      IF UPSOptionPage."UPS Packaging Type" = UPSOptionPage."UPS Packaging Type"::"UPS Letter"
      THEN BEGIN
        IF UPSOptionPage."Additional Handling Required" THEN
          ERROR(
            Text008,
            UPSOptionPage.FIELDCAPTION("Additional Handling Required"),
            UPSOptionPage.FIELDCAPTION("UPS Packaging Type"),UPSOptionPage."UPS Packaging Type");

        IF UPSOptionPage."Large Package"
        THEN
          ERROR(
            Text008,
            UPSOptionPage.FIELDCAPTION("Large Package"),UPSOptionPage.FIELDCAPTION("UPS Packaging Type"),
            UPSOptionPage."UPS Packaging Type");

        IF UPSOptionPage."Dangerous Goods"
        THEN
          ERROR(
            Text008,
            UPSOptionPage.FIELDCAPTION("Dangerous Goods"),UPSOptionPage.FIELDCAPTION("UPS Packaging Type"),
            UPSOptionPage."UPS Packaging Type");

        IF ShippingAgentService."Service Indicator" IN ['03','08','11','12'] THEN
          ERROR(
            Text062,CurrentPackage.FIELDCAPTION("Shipping Agent Service"),
            ShippingAgentService.Code,UPSOptionPage.FIELDCAPTION("UPS Packaging Type"),
            UPSOptionPage."UPS Packaging Type");

        IF (CurrentPackage."Calculation Length" > 0) OR
           (CurrentPackage."Calculation Width" > 0) OR
           (CurrentPackage."Calculation Height" > 0)
        THEN
          ERROR(
            Text007,UPSOptionPage.FIELDCAPTION("UPS Packaging Type"),UPSOptionPage."UPS Packaging Type");

        PackageLine.RESET;
        PackageLine.SETRANGE("Package No.",CurrentPackage."No.");
        ItemCount := 0;
        IF PackageLine.FIND('-') THEN BEGIN
          REPEAT
            ItemCount := ItemCount + 1;

            IF (UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None) AND
               NOT(UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::"Exchange Outbound") THEN
               IF PackageLine.Description = '' THEN
                 ERROR(Text102,
                   PackageLine.FIELDCAPTION(Description),
                   PackageLine.FIELDCAPTION(PackageLine."No."),
                   PackageLine."No.");
          UNTIL PackageLine.NEXT = 0;

          IF ItemCount > 1 THEN
            ERROR(Text091,UPSOptionPage."UPS Packaging Type");
        END;
      END;

      IF (CurrentPackage."World Wide Service" OR
          CurrentPackage."UPS Canadian Service") AND
         CurrentPackage.COD AND
         NOT (UPSOptionPage."UPS Packaging Type" IN
              [UPSOptionPage."UPS Packaging Type"::Unknown,
               UPSOptionPage."UPS Packaging Type"::Package,
               UPSOptionPage."UPS Packaging Type"::"UPS Express Pak",
               UPSOptionPage."UPS Packaging Type"::"UPS Express Tube",
               UPSOptionPage."UPS Packaging Type"::"UPS Express Box Small",
               UPSOptionPage."UPS Packaging Type"::"UPS 10kg Box",
               UPSOptionPage."UPS Packaging Type"::"UPS 25kg Box"])
      THEN
        ERROR(
          Text045,UPSOptionPage.FIELDCAPTION("UPS Packaging Type"),
          FORMAT(UPSOptionPage."UPS Packaging Type"));

      IF (UPSOptionPage."UPS Packaging Type" IN
          [UPSOptionPage."UPS Packaging Type"::"UPS 10kg Box",
           UPSOptionPage."UPS Packaging Type"::"UPS 25kg Box"]) AND
         NOT (ShippingAgentService."Service Indicator" IN ['04','07','54'])
      THEN
        ERROR(
          Text062,CurrentPackage.FIELDCAPTION("Shipping Agent Service"),
          CurrentPackage."Shipping Agent Service",UPSOptionPage.FIELDCAPTION("UPS Packaging Type"),
          UPSOptionPage."UPS Packaging Type");

      IF UPSOptionPage."UPS Packaging Type" <> UPSOptionPage."UPS Packaging Type"::Unknown THEN BEGIN
        UPSlinkWWOrigDestValid.RESET;

        CASE UPPERCASE(ShipFromState) OF
          'AK':
            UPSlinkWWOrigDestValid.SETRANGE("Origin Country Code",'USAK');
          'HI':
            UPSlinkWWOrigDestValid.SETRANGE("Origin Country Code",'USHI');
          ELSE
            UPSlinkWWOrigDestValid.SETRANGE("Origin Country Code",'US48');
        END;

        IF UPSCountryCode <> 'US' THEN
          UPSlinkWWOrigDestValid.SETRANGE("Destination Country Code",UPSCountryCode)
        ELSE
          CASE UPPERCASE(CurrentPackage."Ship-to State") OF
            'AK':
              UPSlinkWWOrigDestValid.SETRANGE("Destination Country Code",'USAK');
            'HI':
              UPSlinkWWOrigDestValid.SETRANGE("Destination Country Code",'USHI');
            ELSE
              UPSlinkWWOrigDestValid.SETRANGE("Destination Country Code",'US48');
          END;

        UPSlinkWWOrigDestValid.SETRANGE(
          "Validation Type",UPSlinkWWOrigDestValid."Validation Type"::"Package Type");

        CASE UPSOptionPage."UPS Packaging Type" OF
          UPSOptionPage."UPS Packaging Type"::"UPS 10kg Box":
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'10N');
          UPSOptionPage."UPS Packaging Type"::"UPS 25kg Box":
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'25N');
          UPSOptionPage."UPS Packaging Type"::"UPS Express Box Small":
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'BOX');
          UPSOptionPage."UPS Packaging Type"::"UPS Express Box Small":
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'BOX');
          UPSOptionPage."UPS Packaging Type"::"UPS Express Box Medium":
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'BOX');
          UPSOptionPage."UPS Packaging Type"::"UPS Express Box Large":
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'BOX');
          UPSOptionPage."UPS Packaging Type"::"UPS Letter":
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'LTR');
          UPSOptionPage."UPS Packaging Type"::"UPS Express Pak":
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'PAK');
          UPSOptionPage."UPS Packaging Type"::Package:
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'PKG');
          UPSOptionPage."UPS Packaging Type"::"UPS Express Tube":
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'TUB');
          UPSOptionPage."UPS Packaging Type"::Palletized:
            UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'PAL');
        END;

        UPSlinkWWOrigDestValid.FIND('-');
      END;
    END;

    PROCEDURE CheckAccessorialsOrigDest@1240030012(VAR CurrentPackage@1240030002 : Record 14000701;UPSOptionPage@1240030000 : Record 14000761;UPSCountryCode@1240030001 : Code[10];ShipFromState@1240030005 : Text[30]);
    VAR
      UPSlinkWWOrigDestValid@1240030003 : Record 14050011;
      PackageLine@1240030004 : Record 14000702;
    BEGIN
      GetShippingAgentAccount(CurrentPackage."Shipping Agent Account No.");
      UPSlinkWWOrigDestValid.RESET;

      CASE UPPERCASE(ShipFromState) OF
        'AK':
          UPSlinkWWOrigDestValid.SETRANGE("Origin Country Code",'USAK');
        'HI':
          UPSlinkWWOrigDestValid.SETRANGE("Origin Country Code",'USHI');
        ELSE
          UPSlinkWWOrigDestValid.SETRANGE("Origin Country Code",'US48');
      END;

      IF UPSCountryCode <> 'US' THEN
        UPSlinkWWOrigDestValid.SETRANGE("Destination Country Code",UPSCountryCode)
      ELSE
        CASE UPPERCASE(CurrentPackage."Ship-to State") OF
          'AK':
            UPSlinkWWOrigDestValid.SETRANGE("Destination Country Code",'USAK');
          'HI':
            UPSlinkWWOrigDestValid.SETRANGE("Destination Country Code",'USHI');
          ELSE
            UPSlinkWWOrigDestValid.SETRANGE("Destination Country Code",'US48');
        END;

      UPSlinkWWOrigDestValid.SETRANGE(
        "Validation Type",UPSlinkWWOrigDestValid."Validation Type"::Accessorial);

      IF UPSOptionPage."Delivery Confirmation Type" =
         UPSOptionPage."Delivery Confirmation Type"::"Name Date"
      THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'DCR');
        IF NOT (UPSlinkWWOrigDestValid.FIND('-')) THEN
          ERROR(Text006,
            'Value for ' + UPSOptionPage.TABLENAME + '.' +
            UPSOptionPage.FIELDCAPTION("Delivery Confirmation Type"),'is',
            UPSCountryCode + '. Please choose another value for ' + UPSOptionPage.TABLENAME + '.' +
            UPSOptionPage.FIELDCAPTION("Delivery Confirmation Type"));
      END;

      IF UPSOptionPage."Delivery Confirmation Type" =
         UPSOptionPage."Delivery Confirmation Type"::"Adult Signature"
      THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'ADS');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF UPSOptionPage."Additional Handling Required" THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'AHC');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF (UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::"Print Return Label Only") AND
         (NOT ShippingAgentAccount."UPS Prints Return Label")
      THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'ALP');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::"3 attempt" THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'ART');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF UPSOptionPage."Insurance Type" = UPSOptionPage."Insurance Type"::"Flexible Parcel" THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'BPI');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF CurrentPackage."World Wide Service" OR
         CurrentPackage."UPS Canadian Service" OR
         CurrentPackage."UPS Puerto Rico Service"
      THEN BEGIN
        IF UPSOptionPage."Certificate of Origin" <> UPSOptionPage."Certificate of Origin"::" " THEN BEGIN
          UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'COO');
          UPSlinkWWOrigDestValid.FIND('-');
        END;
      END;

      IF UPSOptionPage."Delivery Confirmation Type" =
         UPSOptionPage."Delivery Confirmation Type"::"Signature Date"
      THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'DCS');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF UPSOptionPage."Shipper Pays Declared Value" THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'DVS');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF UPSOptionPage."Insurance Type" = UPSOptionPage."Insurance Type"::"Expanded Parcel" THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'EPI');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::"Electronic Return Label"
      THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'ERL');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF (UPSOptionPage."Insurance Type" = UPSOptionPage."Insurance Type"::"Declared Value") AND
         (NOT UPSOptionPage."Shipper Pays Declared Value")
      THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'EVS');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF UPSOptionPage."Dry Ice" THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'ICE');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF UPSOptionPage."Proactive Response" THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'PAR');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF (UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::"Print Return Label Only") AND
         (ShippingAgentAccount."UPS Prints Return Label")
      THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'PNM');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF (UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::None) AND
          UPSOptionPage."Exception Notification"
      THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'QBC');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF (UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::None) AND
          UPSOptionPage."Delivery Notification"
      THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'QDN');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF (UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::None) AND
          UPSOptionPage."Ship Notification"
      THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'QSC');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF CurrentPackage."Residential Delivery" THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'RES');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF (UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None) AND
         (UPSOptionPage."Ship Notification") AND
         (UPSOptionPage."Ship Notification Type" = UPSOptionPage."Ship Notification Type"::Email)
      THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'RSE');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF (UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None) AND
         (UPSOptionPage."Inbound Return Notification") AND
         (UPSOptionPage."Ship Notification Type" = UPSOptionPage."Ship Notification Type"::Email)
      THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'RSI');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::"1 attempt" THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'RSO');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF (UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None) AND
         (UPSOptionPage."Ship Notification") AND
         (UPSOptionPage."Ship Notification Type" = UPSOptionPage."Ship Notification Type"::Fax)
      THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF (UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None) AND
         (UPSOptionPage."Ship Notification") AND
         (UPSOptionPage."Ship Notification Type" = UPSOptionPage."Ship Notification Type"::Fax)
      THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'RSX');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF UPSOptionPage."Saturday Delivery" THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'SAT');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF CurrentPackage."World Wide Service" OR
         CurrentPackage."UPS Canadian Service" OR
         CurrentPackage."UPS Puerto Rico Service"
      THEN BEGIN
        IF (UPSOptionPage."Export Declaration" = UPSOptionPage."Export Declaration"::Included) OR
           (UPSOptionPage."Export Declaration" = UPSOptionPage."Export Declaration"::"UPS Prepare")
        THEN BEGIN
          UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'SED');
          UPSlinkWWOrigDestValid.FIND('-');
        END;
      END;

      IF UPSOptionPage."Shipper Release" THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'SRP');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF UPSOptionPage."Insurance Type" = UPSOptionPage."Insurance Type"::"Time in Transit" THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'TNT');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF UPSOptionPage."Verbal Confirm. of Delivery" THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'VCD');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF CurrentPackage.COD THEN BEGIN
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'COD');
        UPSlinkWWOrigDestValid.FIND('-');
      END;

      IF CurrentPackage."World Wide Service" OR
         CurrentPackage."UPS Canadian Service" OR
         CurrentPackage."UPS Puerto Rico Service"
      THEN BEGIN
        PackageLine.SETRANGE("Package No.",CurrentPackage."No.");

        IF PackageLine.FIND('-') THEN
          REPEAT
            CASE TRUE OF
              PackageLine."UPS ISC Type" = PackageLine."UPS ISC Type"::"Alcoholic Beverages":
                BEGIN
                  UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'ISA');
                  UPSlinkWWOrigDestValid.FIND('-');
                  ShippingAgentAccount.TESTFIELD("ISC Alcohol");
                  IF UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None THEN
                    ERROR(
                      Text006,
                      PackageLine.FIELDCAPTION("UPS ISC Type"),
                      PackageLine."UPS ISC Type",
                      UPSOptionPage."Call Tag Type");
                END;
              PackageLine."UPS ISC Type" = PackageLine."UPS ISC Type"::"Biological Substance":
                BEGIN
                  UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'ISD');
                  UPSlinkWWOrigDestValid.FIND('-');
                  ShippingAgentAccount.TESTFIELD("ISC Biological Substance");
                  IF (UPSOptionPage."Call Tag Type" IN
                      [UPSOptionPage."Call Tag Type"::"Print Return Label Only",
                       UPSOptionPage."Call Tag Type"::"Electronic Return Label",
                       UPSOptionPage."Call Tag Type"::"IC PRL",
                       UPSOptionPage."Call Tag Type"::"IC ERL"])
                  THEN
                    ERROR(
                      Text006,
                      PackageLine.FIELDCAPTION("UPS ISC Type"),
                      PackageLine."UPS ISC Type",
                      UPSOptionPage."Call Tag Type");
                   END;
              PackageLine."UPS ISC Type" = PackageLine."UPS ISC Type"::"Special Exceptions":
                BEGIN
                  UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'ISE');
                  UPSlinkWWOrigDestValid.FIND('-');
                  ShippingAgentAccount.TESTFIELD("ISC Special Exceptions");
                  IF UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None THEN
                    ERROR(
                      Text006,
                      PackageLine.FIELDCAPTION("UPS ISC Type"),
                      PackageLine."UPS ISC Type",
                      UPSOptionPage."Call Tag Type");
                END;
              PackageLine."UPS ISC Type" = PackageLine."UPS ISC Type"::Plants:
                BEGIN
                  UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'ISP');
                  UPSlinkWWOrigDestValid.FIND('-');
                  ShippingAgentAccount.TESTFIELD("ISC Plants");
                END;
              PackageLine."UPS ISC Type" = PackageLine."UPS ISC Type"::Perishables:
                BEGIN
                  UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'ISR');
                  UPSlinkWWOrigDestValid.FIND('-');
                  ShippingAgentAccount.TESTFIELD("ISC Perishables");
                  IF UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None THEN
                    ERROR(
                      Text006,
                      PackageLine.FIELDCAPTION("UPS ISC Type"),
                      PackageLine."UPS ISC Type",
                      UPSOptionPage."Call Tag Type");
                END;
              PackageLine."UPS ISC Type" = PackageLine."UPS ISC Type"::Seeds:
                BEGIN
                  UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'ISS');
                  UPSlinkWWOrigDestValid.FIND('-');
                  ShippingAgentAccount.TESTFIELD("ISC Seeds");
                  IF UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None THEN
                    ERROR(
                      Text006,
                      PackageLine.FIELDCAPTION("UPS ISC Type"),
                      PackageLine."UPS ISC Type",
                      UPSOptionPage."Call Tag Type");
                END;
              PackageLine."UPS ISC Type" = PackageLine."UPS ISC Type"::Tobacco:
                BEGIN
                  UPSlinkWWOrigDestValid.SETRANGE("Validation Code",'IST');
                  UPSlinkWWOrigDestValid.FIND('-');
                  ShippingAgentAccount.TESTFIELD("ISC Tobacco");
                  IF UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None THEN
                    ERROR(
                      Text006,
                      PackageLine.FIELDCAPTION("UPS ISC Type"),
                      PackageLine."UPS ISC Type",
                      UPSOptionPage."Call Tag Type");
                END;
            END;
          UNTIL PackageLine.NEXT = 0;
      END;
    END;

    PROCEDURE CheckFreightPackage@1240020004(VAR CurrentPackage@1240020002 : Record 14000701;VAR UPSOptionPage@1240020001 : Record 14000761;VAR ModifyUPSOptionPage@1240020000 : Boolean);
    VAR
      PackageLine@1240020010 : Record 14000702;
      PackageLine2@1240020019 : Record 14000702;
      Package2@1240020008 : Record 14000701;
      ReportWorkFileTmp@1240020006 : TEMPORARY Record 14050013;
      UPSlinkFreightInfo@1240020011 : Record 14050020;
      UPSCountryCode@1240020007 : Code[10];
      i@1240020012 : Integer;
      ItemCount@1240020018 : Integer;
      Oversize@1240020013 : Boolean;
      Length@1240020014 : Decimal;
      Width@1240020015 : Decimal;
      Height@1240020016 : Decimal;
      Weight@1240020017 : Decimal;
      ISC@1240020020 : Boolean;
    BEGIN
      WITH CurrentPackage DO BEGIN
        GetShippingSetup;
        GetUPSlinkSetup;
        GetPackingStation;
        CarrierPackingStation.GetPackingStation(PackingStation);
        CarrierPackingStation.TESTFIELD("UPS Shipping Agent Account No.");
        GetShippingAgent("Shipping Agent Code");
        GetShippingAgentService("Shipping Agent Code","Shipping Agent Service","World Wide Service");
        GetShippingAgentAccount("Shipping Agent Account No.");
        UPSCountryCode := GetUPSCountryCode("Ship-to Country Code");

        IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::KGS THEN BEGIN
          IF "Calculation Weight" < 68.4924 THEN
            ERROR(Text103,"Shipping Agent Service");
        END;

        IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::LBS THEN BEGIN
          IF "Calculation Weight" < 151 THEN
            ERROR(Text103,"Shipping Agent Service");
        END;

        IF UPSOptionPage."Saturday Delivery" AND UPSOptionPage."Hold At Location" THEN
          ERROR(Text005,
            UPSOptionPage.FIELDCAPTION("Saturday Delivery"),
            UPSOptionPage.FIELDCAPTION("Hold At Location"));

        Oversize := FALSE;
        IF NOT ("Override Dimensions") THEN
           ERROR(Text013,CurrentPackage."No.")
        ELSE BEGIN
          IF CurrentPackage."Override Width" > CurrentPackage."Override Length" THEN
            ERROR(Text104);

          FOR i := 1 TO 2 DO BEGIN
            IF i = 1 THEN
              UPSCountryCode := GetUPSCountryCode("Ship-to Country Code")
            ELSE IF i = 2 THEN
              UPSCountryCode := GetUPSCountryCode(PackingStation."Ship-from Country Code");

            UPSlinkFreightInfo.RESET;
            UPSlinkFreightInfo.SETCURRENTKEY(UPSlinkFreightInfo.Country);
            UPSlinkFreightInfo.SETRANGE(UPSlinkFreightInfo.Country,UPSCountryCode);
            IF UPSlinkFreightInfo.FIND('-') THEN BEGIN
              IF ShippingSetup."Default Size Units" = ShippingSetup."Default Size Units"::"IN" THEN BEGIN
                IF EVALUATE(Length, UPSlinkFreightInfo."Length Imperial") THEN;
                IF EVALUATE(Width, UPSlinkFreightInfo."Width Imperial") THEN;
                IF EVALUATE(Height, UPSlinkFreightInfo."Height Imperial") THEN;
                IF EVALUATE(Weight, UPSlinkFreightInfo."Pallet Max Weight Imperial") THEN;
              END ELSE
                IF ShippingSetup."Default Size Units" = ShippingSetup."Default Size Units"::CM THEN BEGIN
                  IF EVALUATE(Length, UPSlinkFreightInfo."Length Metric") THEN;
                  IF EVALUATE(Width, UPSlinkFreightInfo."Width Metric") THEN;
                  IF EVALUATE(Height, UPSlinkFreightInfo."Height Metric") THEN;
                  IF EVALUATE(Weight, UPSlinkFreightInfo."Pallet Max Weight Metric") THEN;
              END;

              IF ("Override Length" > Length) OR ("Override Width" > Width) OR
                 ("Override Height" > Height) OR ("Override Weight" > Weight) THEN
                  Oversize := TRUE;

              IF UPSOptionPage."Pallet Weight" > Weight THEN
                ERROR(Text109,Weight);
            END ELSE
              ERROR(Text108,UPSlinkFreightInfo.TABLECAPTION);
          END;
        END;

        PackageLine.RESET;
        PackageLine.SETRANGE("Package No.","No.");
        ItemCount := 0;
        FreightShipment := TRUE;
        IF PackageLine.FIND('-') THEN BEGIN
          REPEAT
            ItemCount := ItemCount + PackageLine.Quantity;
            Package2.RESET;
            Package2.GET(PackageLine."No.");
            IF TestForHazMat(Package2,UPSOptionPage) THEN BEGIN
              IF CarrierPackingStation."UPS Haz. Mat. Emergency No." <> '' THEN
                CarrierPackingStation.TESTFIELD(CarrierPackingStation."UPS Haz. Mat. Emerg. Contact");
              IF CarrierPackingStation."UPS Haz. Mat. Emerg. Contact" <> '' THEN
                CarrierPackingStation.TESTFIELD("UPS Haz. Mat. Emergency No.");
            END;

            IF PackageLine.Type = PackageLine.Type::Package THEN BEGIN
              PackageLine2.RESET;
              PackageLine2.SETRANGE("Package No.",PackageLine."No.");
              IF PackageLine2.FIND('-') THEN
                REPEAT
                  IF (PackageLine2."UPS ISC Type" <> PackageLine2."UPS ISC Type"::" ") THEN
                    ISC := TRUE;
                UNTIL PackageLine2.NEXT = 0;
              UPSOptionPage.ISC := ISC;
            END
          UNTIL PackageLine.NEXT = 0;

        IF ItemCount > 99999 THEN
          ERROR(Text091,"No.");
        END;

        IF UPSOptionPage."Dangerous Goods" THEN BEGIN
          ShippingAgentAccount.TESTFIELD("Express Freight Haz. Mat.");
          CarrierPackingStation.TESTFIELD("UPS Haz. Mat. Emergency No.");
          CarrierPackingStation.TESTFIELD("UPS Haz. Mat. Emerg. Contact");
          HazMatPackageLines("No.",ReportWorkFileTmp);
        END;

        IF UPSOptionPage."Dry Ice" THEN BEGIN
          ShippingAgentAccount.TESTFIELD("Dry Ice");
          UPSOptionPage.TESTFIELD("Dry Ice Weight");
          IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::KGS THEN
            IF UPSOptionPage."Dry Ice Weight" > 200 THEN
              ERROR(Text105);

          IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::LBS THEN
            IF UPSOptionPage."Dry Ice Weight" > 440 THEN
              ERROR(Text105);
        END;

        IF UPSOptionPage."Additional Handling Required" THEN
          ERROR(
            Text005,UPSOptionPage.FIELDCAPTION("Additional Handling Required"),
            CurrentPackage."Shipping Agent Service");
        UPSOptionPage.TESTFIELD("Additional Handling Required",FALSE);

        IF UPSOptionPage."Pallet Weight" = 0 THEN
          ERROR(Text062,
            UPSOptionPage.FIELDCAPTION("Pallet Weight"),UPSOptionPage."Pallet Weight",
            FIELDCAPTION("No."),"No.")
         ELSE
           MESSAGE(Text125);

        IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::KGS THEN BEGIN
          IF "Calculation Weight" > 2000 THEN
            MESSAGE(Text106)
          ELSE
            MESSAGE(Text107);
        END;

        IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::LBS THEN BEGIN
          IF "Calculation Weight" > 4400 THEN
            MESSAGE(Text106)
          ELSE
            MESSAGE(Text107);
        END;

        IF UPSOptionPage."Additional Handling Required" THEN
          ERROR(Text005,
            UPSOptionPage.FIELDCAPTION("Additional Handling Required"),
            CurrentPackage."Shipping Agent Service");
      END;
    END;

    PROCEDURE ISCBio@1240030023(CurrentPackage@1240030000 : Record 14000701) : Boolean;
    VAR
      Package@1240030001 : Record 14000701;
      PackageLine@1240030002 : Record 14000702;
      PostedPackageLine@1240030003 : Record 14000705;
    BEGIN
      IF Package.GET(CurrentPackage."No.") THEN BEGIN
        PackageLine.RESET;
        PackageLine.SETRANGE("Package No.",CurrentPackage."No.");
        PackageLine.SETRANGE("UPS ISC Type",PackageLine."UPS ISC Type"::"Biological Substance");
        IF PackageLine.FIND('-') THEN
          EXIT(TRUE);
      END ELSE BEGIN
        PostedPackageLine.RESET;
        PostedPackageLine.SETRANGE("Package No.",CurrentPackage."No.");
        PostedPackageLine.SETRANGE(
          "UPS ISC Type",PostedPackageLine."UPS ISC Type"::"Biological Substance");
        IF PostedPackageLine.FIND('-') THEN
          EXIT(TRUE);
      END;
    END;

    PROCEDURE WarsawLabel@1240030006(CurrentPackage@1240030000 : Record 14000701;CurrentUPSOptionPage@1240030007 : Record 14000761);
    VAR
      CarrierLabelMgt@1240030004 : Codeunit 14000712;
      LabelFileName@1240030006 : Text[250];
      LabelFile@1240030005 : File;
      LabelWidth@1240030003 : Integer;
      LabelHeight@1240030002 : Integer;
      PrinterText@1240030001 : Text[30];
    BEGIN
      GetShippingSetup;
      CarrierPackingStation.TESTFIELD("UPS Buffer File");
      LabelFileName := CarrierPackingStation."UPS Buffer File";
      CarrierLabelMgt.OpenLabelFile(LabelFile,LabelFileName);

      CASE CarrierPackingStation."UPS Label Printer Type" OF
        CarrierPackingStation."UPS Label Printer Type"::"Eltron Orion":
          BEGIN
            CarrierLabelMgt.WriteLabelHeader(
              LabelFile,2,CarrierPackingStation."UPS Eltron Label Media Type",
              CarrierPackingStation."UPS Print From",LabelWidth,LabelHeight);
            PrinterText := ' ELTRON ';
          END;
        CarrierPackingStation."UPS Label Printer Type"::Zebra:
          BEGIN
            CarrierLabelMgt.WriteLabelHeader(
              LabelFile,4,CarrierPackingStation."UPS Eltron Label Media Type",
              CarrierPackingStation."UPS Print From",LabelWidth,LabelHeight);
            PrinterText := ' ZEBRA ';
          END;
      END;

      CarrierLabelMgt.WriteLabelText2(
        LabelFile,
        40,20,0,0,3,1,1,FALSE,FALSE,'Backup Document - Please Place on Package');
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,10,60,0,0,3,1,1,FALSE,FALSE,'TR#: ' +
        COPYSTR(CurrentPackage."External Tracking No.",1,2) + ' ' +
        COPYSTR(CurrentPackage."External Tracking No.",3,3) + ' ' +
        COPYSTR(CurrentPackage."External Tracking No.",6,3) + ' ' +
        COPYSTR(CurrentPackage."External Tracking No.",9,2) + ' ' +
        COPYSTR(CurrentPackage."External Tracking No.",11,4) + ' ' +
        COPYSTR(CurrentPackage."External Tracking No.",15,4) +
        '    ' + 'SHP#: ' + CurrentUPSOptionPage."Waybill No.");

      CarrierLabelMgt.WriteLabelLine(LabelFile,0,100,800,5);

      WarsawText(LabelFile,CarrierLabelMgt);

      IF CarrierPackingStation."UPS Eltron Label Media Type" =
         CarrierPackingStation."UPS Eltron Label Media Type"::"4X4" THEN
      BEGIN
         CarrierLabelMgt.WriteLabelLine(LabelFile,0,775,790,5);
         CarrierLabelMgt.WriteLabelText2(
           LabelFile,380
           ,825,10,0,1,1,1,FALSE,FALSE,UPSlinkSetup.UPSlinkVersion + PrinterText +
           ShippingSetup."UPS Routing Version");
      END ELSE BEGIN
         CarrierLabelMgt.WriteLabelLine(LabelFile,0,1115,790,5);
         CarrierLabelMgt.WriteLabelText2(
           LabelFile,380,1223,0,0,2,1,1,FALSE,FALSE,UPSlinkSetup.UPSlinkVersion + PrinterText +
           ShippingSetup."UPS Routing Version");
      END;

      CarrierLabelMgt.WriteLabelFooter(LabelFile);
      CarrierLabelMgt.CloseLabelFile(LabelFile);

      CurrentPackage.InsertLabelFile(
        LabelFileName,Text075,11,
        CarrierPackingStation."UPS Label Printer Port",PackingStation.Code,
        NOT PackingStation."No Label Printer",PackingStation."Do Not Import Label File");

      PackingStation.PrintLabelFile(
        LabelFileName,CarrierPackingStation."UPS Label Printer Port",
        PackingStation."No Label Printer",PackingStation."Auto Delete Label Buffer File");
    END;

    PROCEDURE WarsawText@1240030014(VAR LabelFile@1240030000 : File;VAR CarrierLabelMgt@1240030004 : Codeunit 14000712);
    VAR
      SQ@1240030003 : Char;
      tSQ@1240030002 : Text[3];
      yaxis@1240020000 : Integer;
      increment@1240020001 : Integer;
    BEGIN
      SQ := 39;
      tSQ[1] := SQ;

      IF CarrierPackingStation."UPS Eltron Label Media Type" =
         CarrierPackingStation."UPS Eltron Label Media Type"::"4X4" THEN
         yaxis := 240
      ELSE
         yaxis := 640;

      increment := 20;

      CarrierLabelMgt.WriteLabelText2(
        LabelFile,
        5,yaxis,10,0,2,1,1,FALSE,FALSE,'Shipper agrees to the UPS Terms found at www.ups.com and UPS');
      yaxis += increment;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,
        5,yaxis,10,0,2,1,1,FALSE,FALSE,'service centers. For international air carriage, the Warsaw');
      yaxis += increment;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,
        5,yaxis,10,0,2,1,1,FALSE,FALSE,'Convention as amended or Montreal Convention may apply and limits');
      yaxis += increment;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,
        5,yaxis,10,0,2,1,1,FALSE,FALSE,'UPS'+''''+'s liability for loss or damage to cargo. International');
      yaxis += increment;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,
        5,yaxis,10,0,2,1,1,FALSE,FALSE,'carriage by road may be subject to the Convention on the Contract');
      yaxis += increment;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,
        5,yaxis,10,0,2,1,1,FALSE,FALSE,'for the International Carriage of Goods By Road. Except as');
      yaxis += increment;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,
        5,yaxis,10,0,2,1,1,FALSE,FALSE,'otherwise governed by international conventions or other');
      yaxis += increment;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,
        5,yaxis,10,0,2,1,1,FALSE,FALSE,'mandatory law, the UPS Terms limit UPS'+''''+'s liability for');
      yaxis += increment;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,
        5,yaxis,10,0,2,1,1,FALSE,FALSE,'damage, loss or delay of this shipment. There are no');
      yaxis += increment;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,
        5,yaxis,10,0,2,1,1,FALSE,FALSE,'stopping places agreed upon at the time of tender of the');
      yaxis += increment;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,
        5,yaxis,10,0,2,1,1,FALSE,FALSE,'shipment and UPS reserves the right to route the shipment in');
      yaxis += increment;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,
        5,yaxis,10,0,2,1,1,FALSE,FALSE,'any way it deems appropriate. Where allowed by law, shipper');
      yaxis += increment;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,
        5,yaxis,10,0,2,1,1,FALSE,FALSE,'authorizes UPS to act as forwarding agent for export control and');
      yaxis += increment;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,
        5,yaxis,10,0,2,1,1,FALSE,FALSE,'customs purposes. If exported from the US, shipper certifies');
      yaxis += increment;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,
        5,yaxis,10,0,2,1,1,FALSE,FALSE,'that the commodities, technology or software were exported');
      yaxis += increment;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,
        5,yaxis,10,0,2,1,1,FALSE,FALSE,'from the US in accordance with the Export Administration');
      yaxis += increment;
      CarrierLabelMgt.WriteLabelText2(
        LabelFile,
        5,yaxis,10,0,2,1,1,FALSE,FALSE,'Regulations. Diversion contrary to law is prohibited.');
    END;

    PROCEDURE LoadLabelData@1240030017(VAR LabelData@1240030000 : ARRAY [60] OF Text[90];VAR i@1240030001 : Integer;VAR OverLimit@1240030004 : Boolean;MaxLines@1240030003 : Integer;TextLine@1240030002 : Text[250]);
    BEGIN
      IF i < MaxLines + 1 THEN BEGIN
        IF STRLEN(LabelData[i]) < 90 THEN
          REPEAT
            LabelData[i] := LabelData[i] + COPYSTR(TextLine,1,1);
            IF STRLEN(TextLine) > 1 THEN
              TextLine := COPYSTR(TextLine,2)
            ELSE
              TextLine := '';
          UNTIL (STRLEN(LabelData[i]) = 90) OR (TextLine = '');

        IF TextLine <> '' THEN BEGIN
          IF i = MaxLines THEN BEGIN
            i := MaxLines + 1;
            OverLimit := TRUE;
            EXIT;
          END;
          i := i + 1;

          REPEAT
            LabelData[i] := LabelData[i] + COPYSTR(TextLine,1,1);
            IF STRLEN(TextLine) > 1 THEN
              TextLine := COPYSTR(TextLine,2)
            ELSE
              TextLine := '';
          UNTIL (STRLEN(LabelData[i]) = 90) OR (TextLine = '');
        END;
      END ELSE
        OverLimit := TRUE;
    END;

    PROCEDURE OverLetterLimit@1240030030(UPSOptionPage@1240030000 : Record 14000761;ShipToState@1240030002 : Text[30];ShipFromState@1240030001 : Text[30];ShipToCountryCode@1240030007 : Code[10];ServiceIndicator@1240030006 : Code[10];PackageWeight@1240030003 : Decimal;UPSRateVersion@1240030008 : Text[10]) : Boolean;
    VAR
      UPSCalculationValue@1240030005 : Record 14050015;
      CountryCode@1240030004 : Code[10];
      MeasurementUnit@1240020000 : Text[10];
    BEGIN
      IF UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None THEN
        IF GetUPSCountryCode(ShipToCountryCode) = 'US' THEN
          ShipFromState := ShipToState
        ELSE
          EXIT(FALSE);

      CASE UPPERCASE(ShipFromState) OF
        'AK':
          CountryCode := 'USAK';
        'HI':
          CountryCode := 'USHI';
        ELSE
          CountryCode := 'US48';
      END;

      IF ShippingSetup."Default Size Units" = ShippingSetup."Default Size Units"::"IN" THEN
        MeasurementUnit := 'i'
      ELSE
        MeasurementUnit := 'm';

      UPSCalculationValue.SETRANGE("Calculation Type", UPSCalculationValue."Calculation Type"::"Letter Weight Limit");
      UPSCalculationValue.SETRANGE("Country Code", 'US');
      UPSCalculationValue.SETRANGE("Service Indicator", '*');
      UPSCalculationValue.SETRANGE("Measurement Unit",MeasurementUnit);
      IF UPSCalculationValue.FIND('-') THEN BEGIN
        IF PackageWeight > UPSCalculationValue.Value THEN
          EXIT(TRUE);
      END ELSE
        IF (UPSRateVersion = '2009') AND
           (PackageWeight > 1)
        THEN
          EXIT(TRUE);
    END;

    LOCAL PROCEDURE TestForHazMat@6(CurrentPackage@1240030000 : Record 14000701;VAR UPSOptionPage@1240020000 : Record 14000761) : Boolean;
    VAR
      Package@1240030001 : Record 14000701;
      PackageLine@1240030002 : Record 14000702;
      UPSHazMat@1240030003 : Record 14050102;
      UPSHazMatProductClass@1240030004 : Record 14050103;
    BEGIN
      WITH CurrentPackage DO BEGIN
        PackageLine.RESET;
        PackageLine.SETRANGE("Package No.","No.");
        IF PackageLine.FIND('-') THEN BEGIN
          REPEAT
            IF PackageLine.Type <> PackageLine.Type::Package THEN BEGIN
              UPSHazMat.RESET;
              UPSHazMat.SETRANGE(Type,PackageLine.Type);
              UPSHazMat.SETRANGE("No.",PackageLine."No.");
              IF UPSHazMat.FIND('-') THEN BEGIN
                IF UPSHazMat."Product Class" = '' THEN
                  ERROR(Text093,
                    UPSHazMat.TABLECAPTION + '.' + UPSHazMat.FIELDCAPTION("Product Class"),
                    PackageLine."No.",PackageLine.Description);

                IF UPSHazMat."Haz. Mat. Qty. per Base UOM" = 0 THEN
                  ERROR(Text093,
                    UPSHazMat.TABLECAPTION + '.' + UPSHazMat.FIELDCAPTION("Haz. Mat. Qty. per Base UOM"),
                    PackageLine."No.",PackageLine.Description);

                UPSHazMatProductClass.RESET;
                UPSHazMatProductClass.SETRANGE(Code,UPSHazMat."Product Class");
                IF UPSHazMatProductClass.FIND('-') THEN BEGIN
                  IF (UPSHazMatProductClass."Hazard Division No." = '') THEN
                    ERROR(Text093,
                      UPSHazMatProductClass.TABLECAPTION + '.' +
                      UPSHazMatProductClass.FIELDCAPTION("Hazard Division No."),
                      PackageLine."No.",PackageLine.Description);

                  IF (UPSHazMatProductClass."Proper Shipping Name" = '') THEN
                    ERROR(Text093,
                      UPSHazMatProductClass.TABLECAPTION + '.' +
                      UPSHazMatProductClass.FIELDCAPTION("Proper Shipping Name"),
                      PackageLine."No.",PackageLine.Description);

                  IF (UPSHazMatProductClass."Package Type" = '') THEN
                    ERROR(Text093,
                     UPSHazMatProductClass.TABLECAPTION + '.' +
                      UPSHazMatProductClass.FIELDCAPTION("Package Type"),
                      PackageLine."No.",PackageLine.Description);

                  IF (UPSHazMatProductClass."Haz. Mat. Unit of Measure" = '') THEN
                    ERROR(Text093,
                      UPSHazMatProductClass.TABLECAPTION + '.' +
                      UPSHazMatProductClass.FIELDCAPTION("Haz. Mat. Unit of Measure"),
                      PackageLine."No.",PackageLine.Description);

                  IF (UPSHazMatProductClass."Identification No." = 'ORM-D') AND
                     (ShippingAgentService."Transport Method Type" =
                      ShippingAgentService."Transport Method Type"::Ground)
                  THEN BEGIN
                    EXIT(FALSE);
                  END;

                  IF FreightShipment AND (UPSHazMatProductClass."Packing Instructions Code" = '') THEN
                    ERROR(Text093,
                      UPSHazMatProductClass.TABLECAPTION + '.' +
                      UPSHazMatProductClass.FIELDCAPTION("Packing Instructions Code"),
                      PackageLine."No.",PackageLine.Description);
                END;
                EXIT(TRUE);
              END;
            END ELSE BEGIN
              Package.GET(PackageLine."No.");
              EXIT(TestForHazMat(Package,UPSOptionPage));
            END;
          UNTIL PackageLine.NEXT = 0;
        END ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE GetHazReferenceNosToPrint@1240030016(PackageNo@1240030000 : Code[20]) TextLine : Text[250];
    VAR
      PackageLine@1240030001 : Record 14000702;
      PostedPackageLine@1240030002 : Record 14000705;
      UPSHazMaterial@1240030004 : Record 14050102;
      UPSHazMatProductClass@1240030003 : Record 14050103;
      i@1240030005 : Integer;
    BEGIN
      PackageLine.RESET;
      PackageLine.SETRANGE("Package No.",PackageNo);
      i := 0;
      IF PackageLine.FIND('-') THEN BEGIN
        REPEAT
          UPSHazMaterial.SETRANGE(Type,PackageLine.Type);
          UPSHazMaterial.SETRANGE("No.",PackageLine."No.");
          IF UPSHazMaterial.FIND('-') THEN BEGIN
            UPSHazMatProductClass.GET(UPSHazMaterial."Product Class");
            IF (UPSHazMatProductClass."Identification No." = '') OR
               (UPSHazMatProductClass."Identification No." = 'ORM-D') THEN BEGIN
              IF STRPOS(TextLine,UPSHazMatProductClass."Additional Description") = 0 THEN BEGIN
                IF TextLine = '' THEN
                  TextLine := UPSHazMatProductClass."Additional Description"
                ELSE
                  TextLine := TextLine + ', ' + UPSHazMatProductClass."Additional Description";
                i := i + 1;
              END;
            END ELSE
              IF STRPOS(TextLine,UPSHazMatProductClass."Identification No.") = 0 THEN BEGIN
                IF TextLine = '' THEN
                  TextLine := UPSHazMatProductClass."Identification No."
                ELSE
                  TextLine := TextLine + ', ' + UPSHazMatProductClass."Identification No.";
                i := i + 1;
              END;
          END;
        UNTIL (PackageLine.NEXT = 0) OR (i = 3);
      END ELSE BEGIN
        PostedPackageLine.RESET;
        PostedPackageLine.SETRANGE("Package No.",PackageNo);
        IF PostedPackageLine.FIND('-') THEN BEGIN
          REPEAT
            UPSHazMaterial.SETRANGE(Type,PackageLine.Type);
            UPSHazMaterial.SETRANGE("No.",PackageLine."No.");
            IF UPSHazMaterial.FIND('-') THEN BEGIN
              UPSHazMatProductClass.GET(UPSHazMaterial."Product Class");
              IF STRPOS(TextLine,UPSHazMatProductClass."Identification No.") = 0 THEN BEGIN
                IF TextLine = '' THEN
                  TextLine := UPSHazMatProductClass."Identification No."
                ELSE
                  TextLine := TextLine + ', ' + UPSHazMatProductClass."Identification No.";
                i := i + 1;
              END;
            END;
          UNTIL (PostedPackageLine.NEXT = 0) OR (i = 3);
        END;
      END;
    END;

    PROCEDURE HazMatPackageLines@1240030022(PackageNo@1240030001 : Code[20];VAR ReportWorkFileTmp@1240030002 : TEMPORARY Record 14050013);
    VAR
      PackageLine@1240030003 : Record 14000702;
      PackageLine2@1240030004 : Record 14000702;
      UPSHazMat@1240030005 : Record 14050102;
    BEGIN
      PackageLine.RESET;
      PackageLine.SETRANGE("Package No.",PackageNo);
      IF PackageLine.FIND('-') THEN
        REPEAT
          IF PackageLine.Type <> PackageLine.Type::Package THEN BEGIN
            UPSHazMat.RESET;
            UPSHazMat.SETRANGE(Type,PackageLine.Type);
            UPSHazMat.SETRANGE("No.",PackageLine."No.");
            IF UPSHazMat.FIND('-') THEN BEGIN
              AddHazMat(
                ReportWorkFileTmp,UPSHazMat."Product Class",
                PackageLine."Quantity (Base)" * UPSHazMat."Haz. Mat. Qty. per Base UOM",
                PackageLine."Package No.",'',PackageLine."Net Weight");
            END;
          END ELSE BEGIN
            PackageLine2.RESET;
            PackageLine2.SETRANGE("Package No.",PackageLine."No.");
            IF PackageLine2.FIND('-') THEN
              REPEAT
                UPSHazMat.RESET;
                UPSHazMat.SETRANGE(Type,PackageLine2.Type);
                UPSHazMat.SETRANGE("No.",PackageLine2."No.");
                IF UPSHazMat.FIND('-') THEN BEGIN
                  AddHazMat(
                    ReportWorkFileTmp,UPSHazMat."Product Class",
                    PackageLine2."Quantity (Base)" * UPSHazMat."Haz. Mat. Qty. per Base UOM",
                    PackageLine2."Package No.",PackageLine2."No.",PackageLine2."Net Weight");
                END;
              UNTIL PackageLine2.NEXT = 0;
          END;
        UNTIL PackageLine.NEXT = 0
    END;

    PROCEDURE HazMatPostedPackageLines@1240030019(PackageNo@1240030001 : Code[20];VAR ReportWorkFileTmp@1240030000 : TEMPORARY Record 14050013);
    VAR
      PostedPackageLine@1240030003 : Record 14000705;
      PostedPackageLine2@1240030004 : Record 14000705;
      UPSHazMat@1240030005 : Record 14050102;
    BEGIN
      PostedPackageLine.RESET;
      PostedPackageLine.SETRANGE("Package No.",PackageNo);
      IF PostedPackageLine.FIND('-') THEN
        REPEAT
          IF PostedPackageLine.Type <> PostedPackageLine.Type::Package THEN BEGIN
            UPSHazMat.RESET;
            UPSHazMat.SETRANGE(Type,PostedPackageLine.Type);
            UPSHazMat.SETRANGE("No.",PostedPackageLine."No.");
            IF UPSHazMat.FIND('-') THEN
              AddHazMat(
                ReportWorkFileTmp,UPSHazMat."Product Class",
                PostedPackageLine."Quantity (Base)" * UPSHazMat."Haz. Mat. Qty. per Base UOM",
                PostedPackageLine."Package No.",'',PostedPackageLine."Net Weight");
          END ELSE BEGIN
            PostedPackageLine2.RESET;
            PostedPackageLine2.SETRANGE("Package No.",PostedPackageLine."No.");
            IF PostedPackageLine2.FIND('-') THEN
              REPEAT
                UPSHazMat.RESET;
                UPSHazMat.SETRANGE(Type,PostedPackageLine2.Type);
                UPSHazMat.SETRANGE("No.",PostedPackageLine2."No.");
                IF UPSHazMat.FIND('-') THEN
                  AddHazMat(
                    ReportWorkFileTmp,UPSHazMat."Product Class",
                    PostedPackageLine2."Quantity (Base)" * UPSHazMat."Haz. Mat. Qty. per Base UOM",
                    PostedPackageLine2."Package No.",PostedPackageLine2."No.",
                    PostedPackageLine."Net Weight");
              UNTIL PostedPackageLine2.NEXT = 0;
          END;
        UNTIL PostedPackageLine.NEXT = 0
    END;

    LOCAL PROCEDURE AddHazMat@1240030018(VAR ReportWorkFileTmp@1240030000 : TEMPORARY Record 14050013;HazMatProductClass@1240030001 : Code[20];QuantityBase@1240030002 : Decimal;PackageNo@1240030005 : Code[20];PackedPackageNo@1240030006 : Code[20];NetWeight@1240030003 : Decimal);
    VAR
      HazMatCount@1240030004 : Integer;
    BEGIN
      ReportWorkFileTmp.SETRANGE("Code 1",HazMatProductClass);

      IF ReportWorkFileTmp.FIND('-') THEN BEGIN
        ReportWorkFileTmp."Decimal 1" := ReportWorkFileTmp."Decimal 1" + QuantityBase;
        ReportWorkFileTmp.MODIFY;
      END ELSE BEGIN
        ReportWorkFileTmp.RESET;
        IF ReportWorkFileTmp.FIND('+') THEN
          HazMatCount := ReportWorkFileTmp."Entry No." + 1
        ELSE
          HazMatCount := 1;

        IF HazMatCount > 3 THEN
          ERROR(Text077 + Text078,PackageNo,PackedPackageNo);

        ReportWorkFileTmp.INIT;
        ReportWorkFileTmp."Entry No." := HazMatCount;
        ReportWorkFileTmp."Code 1" := HazMatProductClass;
        ReportWorkFileTmp."Decimal 1" := QuantityBase;

        IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::LBS THEN
          ReportWorkFileTmp."Decimal 2" := NetWeight
        ELSE
          ReportWorkFileTmp."Decimal 2" := ShippingSetup.KiloToPound(NetWeight);

        ReportWorkFileTmp.INSERT;
      END;
    END;

    PROCEDURE IsHazMatAccessible@1240020010(CurrentOptionPage@1240020000 : Record 14000761) : Boolean;
    VAR
      Package@1240020004 : Record 14000701;
      PackageLine@1240020003 : Record 14000702;
      UPSHazMat@1240020002 : Record 14050102;
      UPSHazMatProductClass@1240020001 : Record 14050103;
    BEGIN
      WITH CurrentOptionPage DO BEGIN
        PackageLine.RESET;
        PackageLine.SETRANGE("Package No.","Source ID");
        IF PackageLine.FIND('-') THEN BEGIN
          REPEAT
            IF PackageLine.Type <> PackageLine.Type::Package THEN BEGIN
              UPSHazMat.RESET;
              UPSHazMat.SETRANGE(Type,PackageLine.Type);
              UPSHazMat.SETRANGE("No.",PackageLine."No.");
              IF UPSHazMat.FIND('-') THEN BEGIN
                UPSHazMatProductClass.RESET;
                UPSHazMatProductClass.SETRANGE(Code,UPSHazMat."Product Class");
                IF UPSHazMatProductClass.FIND('-') THEN BEGIN
                  IF (UPSHazMatProductClass."Hazard Division No." IN ['2.2','6','7','9']) THEN
                    EXIT(FALSE)
                  ELSE
                    EXIT(TRUE);
                END;
              END;
                EXIT(FALSE);
            END;
          UNTIL PackageLine.NEXT = 0;
        END ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE ServiceIconText@1240030021(TrackingNo@1240030000 : Text[30]) : Text[30];
    BEGIN
      CASE COPYSTR(TrackingNo,9,2) OF
        '01','25','24','A2','59','AC','66','NT','P4','D3','D4','DM','GN','H0','85','92','96','84','28',
        '09','V3','V4','7N','7T','7Y','AS','CQ','CZ':
          EXIT('1');
        '32','A9','15','A0','54','NP','G1','G5','AK','AL','AM','V1','V2','V5','V0','TY',
        '6Y','7A','HP','N5':
          EXIT('1+');
        '33','AA','41','A1','34','PA','PA','G4','G8','WT','WY','WW','N4','P3','7G','7H':
          EXIT('1+S');
        '44','47','58','A3','60','AD','69','PG','PN','D6','D7','DN','GP','H1','Y0','Y2','Y1','Y6','Y7',
        'Y8','Y9','7P','7W','8A','AZ','CS','DQ':
          EXIT('1 S');
        '13','30','29','A4','62','AE','86','93','97','NW','P5','04','D9','DA','V6',
        '8G','8H','DS','DV','E1','E3','E4':
          EXIT('1P');
        'PW','PY','T0','T1','T2','T6','T3','T7','Y3','Y5','Y4','8W','9A','9H':
          EXIT('2 S');
        '07','18','19','A5','65','AF','P0','P7','8N','8P':
          EXIT('2A');
        '02','36','35','A6','70','AG','67','NY','P6','DG','DH','DP','GT','H2','88','94','98','87','52',
        '11','8T','8Y','9G','DW','DX':
          EXIT('2');
        '12','40','39','A7','71','AH','P1','P8','89','50','16','9N','9P':
          EXIT('3');
        'E2','E6','E7':
          EXIT('1PS');
        '03','43','42','A8','72','AJ','68','P2','P9','DK','DL','DR','GW','H3','90','26','78','91','95',
        '99':
          EXIT('');
      END;
    END;

    PROCEDURE ShippingServiceCode@1240030025(ServiceIndicator@1240030000 : Code[10]) : Text[30];
    BEGIN
      CASE ServiceIndicator OF
        '01':
          EXIT('UPS NEXT DAY AIR');
        '02':
          EXIT('UPS 2ND DAY AIR');
        '03':
          EXIT('UPS GROUND');
        '04':
          EXIT('UPS SAVER');
        '07':
          EXIT('UPS EXPRESS');
        '08':
          EXIT('UPS EXPEDITED');
        '11':
          EXIT('UPS STANDARD');
        '12':
          EXIT('UPS 3 DAY SELECT');
        '13':
          EXIT('UPS NEXT DAY AIR SAVER');
        '15':
          EXIT('UPS NEXT DAY AIR EARLY');
        '54':
          EXIT('UPS EXPRESS PLUS');
        '59':
          EXIT('UPS 2ND DAY AIR A.M.');
        'E1':
          EXIT('UPS EXPRESS FREIGHT');
        ELSE
          ERROR(Text081,ServiceIndicator);
      END;
    END;

    PROCEDURE GetOpenedPostedPackages@1240030024(ManifestLine@1240030000 : Record 14000713;PickupDate@1240030001 : Date;BookNo@1240030009 : Code[10];PageNo@1240030010 : Code[10]) VoidedPackages : Integer;
    VAR
      Package@1240030005 : Record 14000701;
      PostedPackage@1240030002 : Record 14000704;
      PostedPackage2@1240020000 : Record 14000704;
      UPSPostedOptionPage@1240030003 : Record 14000762;
      UPSManifest@1240030008 : Record 14050007;
      ManifestMgt@1240030007 : Codeunit 14050003;
      TempInteger@1240030004 : Integer;
      EntryNo@1240030006 : Integer;
    BEGIN
      PostedPackage.RESET;
      PostedPackage.SETCURRENTKEY(
        "Manifest No.","Shipping Agent Code","Shipping Agent Account No.",Closed,"Manual Shipment",
        "Exclude From Manifest");

      PostedPackage.SETRANGE("Shipping Agent Code",ManifestLine."Shipping Agent Code");
      PostedPackage.SETRANGE("Shipping Agent Account No.",ManifestLine."Shipping Agent Account No.");
      PostedPackage.SETRANGE(Closed,FALSE);
      PostedPackage.SETRANGE("Manual Shipment",FALSE);
      PostedPackage.SETRANGE("Exclude From Manifest",FALSE);
      PostedPackage.SETFILTER("External Tracking No.",'<>%1','');
      PostedPackage.SETRANGE("Manifest No.",'');

      IF PostedPackage.FIND('-') THEN
        REPEAT
          IF UPSPostedOptionPage.GET(PostedPackage."No.") THEN
            IF NOT UPSPostedOptionPage."Voided Package Do Not Manifest" AND
               (UPSPostedOptionPage."World Ease Master No." = '')
            THEN BEGIN
              TempInteger := PostedPackage."Total Packages";
              CLEAR(PostedPackage2);
              PostedPackage2.GET(PostedPackage."No.");
              PostedPackage2."Total Packages" := 1;
              Package.TRANSFERFIELDS(PostedPackage2);

              EntryNo :=
                ManifestMgt.BuildUPSManifest(
                  Package,TRUE,PostedPackage."External Tracking No.",ManifestLine."Manifest No.");
              IF UPSManifest.GET(EntryNo) THEN BEGIN
                PostedPackage2.TRANSFERFIELDS(Package);
                PostedPackage2."UPS Manifest Entry No." := EntryNo;
                PostedPackage2."Total Packages" := TempInteger;
                PostedPackage2."Manifest No." := ManifestLine."Manifest No.";
                PostedPackage2."Pickup Date" := PickupDate;
                PostedPackage2.MODIFY;

                UPSManifest."Pickup Date" := Date2Text(PickupDate);
                UPSManifest."Book Number" := BookNo;
                UPSManifest."Page Number" := PageNo;
                UPSManifest."Void Indicator" := '1';

                UPSManifest.MODIFY;
                VoidedPackages := VoidedPackages + 1;
              END;
          END;
        UNTIL PostedPackage.NEXT = 0;

      EXIT(VoidedPackages);
    END;

    PROCEDURE GetLabelMgtMediaType@1240030028(UPSMediaType@1240030000 : Integer;CurrentUPSOptionPage@1240030001 : Record 14000761) : Integer;
    BEGIN
      IF CurrentUPSOptionPage."World Ease" THEN
        EXIT(14050601);

      CASE UPSMediaType OF
        1:
          EXIT(1);
        2:
          EXIT(2);
        3:
          EXIT(3);
      END;
    END;

    PROCEDURE PDF417Data@1240030026(ExportDoc@1240030006 : Record 14000981;CurrentPackage@1240030003 : Record 14000701;CurrentUPSOptionPage@1240030004 : Record 14000761;VAR TempItemSummary@1240030007 : TEMPORARY Record 14000983;VAR LabelData@1240030002 : ARRAY [60] OF Text[90];MaxLines@1240030046 : Integer;tCR@1240030001 : Text[3];tTB@1240030000 : Text[3]) i : Integer;
    VAR
      Package@1240030013 : Record 14000701;
      PostedPackage@1240030012 : Record 14000704;
      UPSOptionPage@1240030011 : Record 14000761;
      UPSPostedOptionPage@1240030010 : Record 14000762;
      UPSAccessorialCharge@1240020000 : Record 14000767;
      ShipmentActualWeight@1240030044 : Decimal;
      ShipmentDimWeight@1240030043 : Decimal;
      TotalInvoiceAmount@1240030042 : Decimal;
      AccessorialCharge@1240020001 : Decimal;
      ShipToTaxRegistrationNo@1240030041 : Text[30];
      ShipToName@1240030040 : Text[35];
      ShipToPhoneNo@1240030039 : Text[30];
      ShipToAddress@1240030038 : Text[50];
      ShipToAddress2@1240030037 : Text[50];
      ShipToState@1240030036 : Text[30];
      ShipToCity@1240030035 : Text[30];
      ShipToZip@1240030034 : Code[20];
      ShipToCountry@1240030033 : Code[10];
      SoldToTaxRegistrationNo@1240030032 : Text[30];
      SoldToName@1240030031 : Text[35];
      SoldToPhoneNo@1240030030 : Text[30];
      SoldToAddress@1240030029 : Text[50];
      SoldToAddress2@1240030028 : Text[50];
      SoldToState@1240030027 : Text[30];
      SoldToCity@1240030026 : Text[30];
      SoldToZip@1240030025 : Code[20];
      SoldToCountry@1240030024 : Code[10];
      FreightCharge@1240030023 : Decimal;
      InsuranceCharge@1240030022 : Decimal;
      Discount@1240030021 : Decimal;
      Other@1240030020 : Decimal;
      TotalValue@1240030019 : Decimal;
      TotalInsurance@1240030017 : Decimal;
      TotalCOD@1240030016 : Decimal;
      TotalPackages@1240030015 : Integer;
      InvoiceLineTotal@1240030045 : Decimal;
      OverLimit@1240030047 : Boolean;
    BEGIN
      GetShippingSetup;
      GetExportDocSetup;

      IF CurrentPackage."Service Indicator" = 'E1' THEN
        TotalPackages := 1
      ELSE
        TotalPackages := ExportDoc.TotalPackages;
      ShipmentActualWeight := ExportDoc.TotalPackageWeight;
      ShipmentDimWeight := ExportDoc.TotalPackageDimWeight;

      Other := ExportDoc.TotalForType(0) + ExportDoc.TotalForType(1);  // Type::" " + "Account (G/L)"

      InsuranceCharge :=
        ExportDoc.TotalPackageInsuranceCharge + ExportDoc.TotalForType(6);  // Type::"Adj. Ins. Charge"
      TotalInsurance := ExportDoc.TotalPackageInsuranceValue;

      FreightCharge :=
        ExportDoc.TotalPackageShippingCharge +
        ExportDoc.TotalForType(4) + ExportDoc.TotalForType(6) -  //  "Adj. Shipping Charge" + "Adj. Ins.
        InsuranceCharge;

      IF NOT ExportDoc."Export Rpts. Excl. Pkg. Disc." THEN
        Discount :=  ExportDoc.TotalPackageDiscount + ExportDoc.TotalForType(5);  // "Adj. Discount"

      InvoiceLineTotal := ExportDoc.TotalForType(2) + ExportDoc.TotalForType(3);  // Item + Resource

      TotalInvoiceAmount := InvoiceLineTotal + FreightCharge + InsuranceCharge - Discount + Other;

      IF Package."UPS Puerto Rico Service" THEN
        TotalCOD := ExportDoc.TotalPackageCod;

      IF ExportDocSetup."Comm. Invoice Detail Summary" =
         ExportDocSetup."Comm. Invoice Detail Summary"::"By Item No."
      THEN BEGIN
        ExportDoc.ItemSummaryByItem(TempItemSummary,FALSE);
        ExportDoc.ItemResourceSummaryByScheduleB(TempItemSummary,TRUE,TRUE);
        TempItemSummary.SETCURRENTKEY("Export Document No.",Type,"No.","Country of Origin ISO 2 Char");
      END ELSE BEGIN
        ExportDoc.ItemResourceSummaryByScheduleB(TempItemSummary,FALSE,FALSE);
        TempItemSummary.SETCURRENTKEY(
          "Export Document No.","Schedule B Code",Description,"Country of Origin ISO 2 Char",
          "Source Unit of Measure (Base)");
      END;

      i := 1;

      LoadLabelData(
        LabelData,i,OverLimit,MaxLines,'01' + tTB + '32' + tTB + '{)>' + tTB + '49' + tTB +
        UPSlinkSetup.UPSlinkVersion + tTB + '0200' + tCR);

      PDF417LoadSeg02Data(
        LabelData,i,OverLimit,ExportDoc,CurrentPackage,CurrentUPSOptionPage,MaxLines,
        ShipmentActualWeight,ShipmentDimWeight,InvoiceLineTotal,tCR,tTB);

      IF CurrentUPSOptionPage."Ship. Ref. Type 1" <> CurrentUPSOptionPage."Ship. Ref. Type 1"::" " THEN
        LoadLabelData(
          LabelData,i,OverLimit,MaxLines,'03' + tTB + FORMAT(CurrentUPSOptionPage."Ship. Ref. Type 1") +
          tTB + CurrentUPSOptionPage."Ship. Ref. No. 1" + tCR);

      IF CurrentUPSOptionPage."Ship. Ref. Type 2" <> CurrentUPSOptionPage."Ship. Ref. Type 2"::" " THEN
        LoadLabelData(
          LabelData,i,OverLimit,MaxLines,'03' + tTB + FORMAT(CurrentUPSOptionPage."Ship. Ref. Type 2") +
          tTB + CurrentUPSOptionPage."Ship. Ref. No. 2" + tCR);

      LoadLabelData(LabelData,i,OverLimit,MaxLines,'04' + tTB + 'SH' + tTB);  // Shipper
      LoadLabelData(LabelData,i,OverLimit,MaxLines,CleanString(ExportDoc."PPI Name") + tTB);

      IF STRLEN(ExportDoc."PPI City") > 25 THEN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,COPYSTR(ExportDoc."PPI City",1,25) + tTB)
      ELSE
        LoadLabelData(LabelData,i,OverLimit,MaxLines,ExportDoc."PPI City" + tTB);

      LoadLabelData(LabelData,i,OverLimit,MaxLines,ExportDoc."PPI State" + tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,ExportDoc."PPI ZIP Code" + tTB);

      LoadLabelData(LabelData,i,OverLimit,MaxLines,'US' + tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,CurrentPackage."Shipping Agent Account No." + tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,ExportDoc."PPI Address" + tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB + tTB);  // Credit Card/Expiration Date
      LoadLabelData(
        LabelData,i,OverLimit,MaxLines,ExportDoc."PPI ID" + tTB);
      IF ExportDoc."PPI Contact First Name" <> '' THEN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,COPYSTR(CleanString(
          ExportDoc."PPI Contact First Name" + ' ' +
          ExportDoc."PPI Contact Last Name"),1,25) + tTB)
      ELSE
        LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,
        COPYSTR(CleanString(ExportDoc."PPI Phone No."),1,14) + tTB + tTB + tTB + tTB + tCR);

      ShipToTaxRegistrationNo := ExportDoc."Ship-to VAT Registration No.";
      ShipToPhoneNo := ExportDoc."Ship-to Phone No.";

      ShipToName := ExportDoc."Ship-to Name";
      ShipToAddress := ExportDoc."Ship-to Address";
      ShipToAddress2 := ExportDoc."Ship-to Address 2";
      ShipToCity := ExportDoc."Ship-to City";
      ShipToState := ExportDoc."Ship-to State";
      ShipToZip := ExportDoc."Ship-to ZIP Code";
      ShipToCountry := ExportDoc.GetISOCountryCode(ExportDoc."Ship-to Country Code");

      IF ExportDoc."Alt. Sold-to" THEN BEGIN
        SoldToPhoneNo := ExportDoc."Sold-to Phone No.";
        SoldToTaxRegistrationNo := ExportDoc."Sold-to VAT Registration No.";

        SoldToName := ExportDoc."Sold-to Name";
        SoldToAddress := ExportDoc."Sold-to Address";
        SoldToAddress2 := ExportDoc."Sold-to Address 2";
        SoldToState := ExportDoc."Sold-to State";
        SoldToCity := ExportDoc."Sold-to City";
        SoldToZip := ExportDoc."Sold-to ZIP Code";
        SoldToCountry := ExportDoc.GetISOCountryCode(ExportDoc."Sold-to Country Code");
      END ELSE BEGIN
        SoldToPhoneNo := ShipToPhoneNo;
        SoldToTaxRegistrationNo := ShipToTaxRegistrationNo;

        SoldToName := ShipToName;
        SoldToAddress := ShipToAddress;
        SoldToAddress2 := ShipToAddress2;
        SoldToState := ShipToState;
        SoldToCity := ShipToCity;
        SoldToZip := ShipToZip;
        SoldToCountry := ShipToCountry;
      END;

      LoadLabelData(LabelData,i,OverLimit,MaxLines,'04' + tTB + 'SO' + tTB);  // Sold-to
      LoadLabelData(LabelData,i,OverLimit,MaxLines,SoldToName + tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,SoldToCity + tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,SoldToState + tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,SoldToZip + tTB);

      LoadLabelData(LabelData,i,OverLimit,MaxLines,SoldToCountry + tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB);  // UPS Account No.
      LoadLabelData(LabelData,i,OverLimit,MaxLines,SoldToAddress + tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB + tTB);  // Credit Card/Expiration Date
      IF SoldToTaxRegistrationNo <> '' THEN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,SoldToTaxRegistrationNo + tTB)
      ELSE
        LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB + tTB + tTB + tTB + tCR);

      LoadLabelData(LabelData,i,OverLimit,MaxLines,'04' + tTB + 'ST' + tTB);  // Ship-to
      LoadLabelData(LabelData,i,OverLimit,MaxLines,ShipToName + tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,ShipToCity + tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,ShipToState + tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,ShipToZip + tTB);

      LoadLabelData(LabelData,i,OverLimit,MaxLines,ShipToCountry + tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB);  // UPS Account No.
      LoadLabelData(LabelData,i,OverLimit,MaxLines,ShipToAddress + tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB + tTB);  // Credit Card/Expiration Date
      IF ShipToTaxRegistrationNo <> '' THEN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,ShipToTaxRegistrationNo + tTB)
      ELSE
        LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB);
      IF ExportDoc."Ship-to Contact" <> '' THEN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,COPYSTR(
          CleanString(ExportDoc."Ship-to Contact"),1,25) + tTB)
      ELSE
        LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,
        COPYSTR(CleanString(ShipToPhoneNo),1,14) + tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB + tTB + tCR);

      IF NOT (CurrentUPSOptionPage."International Billing" IN
              [CurrentUPSOptionPage."International Billing"::" ",
               CurrentUPSOptionPage."International Billing"::Prepaid]) AND
         (CurrentUPSOptionPage."Third Party Name" <> '')
      THEN BEGIN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,'04' + tTB + 'AP' + tTB);  // Shipper 3rd Party Addr
        LoadLabelData(LabelData,i,OverLimit,MaxLines,CurrentUPSOptionPage."Third Party Name" + tTB);
        LoadLabelData(LabelData,i,OverLimit,MaxLines,CurrentUPSOptionPage."Third Party City" + tTB);
        LoadLabelData(LabelData,i,OverLimit,MaxLines,CurrentUPSOptionPage."Third Party State" + tTB);
        LoadLabelData(LabelData,i,OverLimit,MaxLines,CurrentUPSOptionPage."Third Party ZIP Code" + tTB);

        IF Country.GET(CurrentUPSOptionPage."Third Party Country Code") THEN
          LoadLabelData(LabelData,i,OverLimit,MaxLines,Country."ISO 2 char Country Code" + tTB)
        ELSE
          LoadLabelData(LabelData,i,OverLimit,MaxLines,'US' + tTB);

        LoadLabelData(LabelData,i,OverLimit,MaxLines,CurrentPackage."Third Party Ship. Account No." + tTB);
        LoadLabelData(LabelData,i,OverLimit,MaxLines,CurrentUPSOptionPage."Third Party Address" + tTB);
        LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB + tTB);  // Credit Card/Expiration Date
        IF CurrentUPSOptionPage."Third Party Tax ID" <> '' THEN
          LoadLabelData(LabelData,i,OverLimit,MaxLines,CurrentUPSOptionPage."Third Party Tax ID" + tTB)
        ELSE
          LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB);
        LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB + tTB + tTB + tTB + tCR);
      END;

      LoadLabelData(LabelData,i,OverLimit,MaxLines,'05' + tTB + 'GSI' + tTB);  // Nature of Goods
      LoadLabelData(LabelData,i,OverLimit,MaxLines,CurrentPackage.Description + tCR);

      IF CurrentUPSOptionPage."Special Instructions" <> '' THEN BEGIN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,'05' + tTB + 'GSI' + tTB);  // Special Instructions
        LoadLabelData(LabelData,i,OverLimit,MaxLines,CurrentUPSOptionPage."Special Instructions" + tCR);
      END;

      IF FreightCharge > 0 THEN BEGIN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,'06' + tTB + 'F' + tTB);  // Freight Charge
        LoadLabelData(LabelData,i,OverLimit,MaxLines,Decimal2Text(FreightCharge,2) +  tCR)
      END;

      IF InsuranceCharge > 0 THEN BEGIN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,'06' + tTB + 'I' + tTB);  // Insurance Charge
        LoadLabelData(LabelData,i,OverLimit,MaxLines,Decimal2Text(InsuranceCharge,2) +  tCR)
      END;

      IF Discount > 0 THEN BEGIN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,'06' + tTB + 'D' + tTB);  // Discount Charge
        LoadLabelData(LabelData,i,OverLimit,MaxLines,Decimal2Text(Discount,2) +  tCR)
      END;

      IF Other > 0 THEN BEGIN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,'06' + tTB + 'O' + tTB);  // Other Charge
        LoadLabelData(LabelData,i,OverLimit,MaxLines,Decimal2Text(Other,2) +  tCR)
      END;

      Package.RESET;
      Package.SETRANGE("Export Document No.",CurrentPackage."Export Document No.");
      Package.SETRANGE("Original Package No.",'');
      Package.SETRANGE("Shipping Agent Code", CurrentPackage."Shipping Agent Code");
      IF Package.FIND('-') THEN
        REPEAT
          IF NOT Package."Multi Document Package" OR (Package."Source ID" = '') THEN BEGIN
            Package.ClearTotalValueFields;
            UPSOptionPage.GET(UPSOptionPage.Type::Package,Package."No.");
            PDF417LoadPackageData(
              LabelData,i,OverLimit,MaxLines,FALSE,tTB,tCR,Package,UPSOptionPage,Package.GetWeight,FALSE);
          END;
        UNTIL Package.NEXT = 0;

      PostedPackage.SETCURRENTKEY("Export Document No.");
      PostedPackage.SETRANGE("Export Document No.",CurrentPackage."Export Document No.");
      PostedPackage.SETRANGE("Original Package No.",'');
      IF PostedPackage.FIND('-') THEN
        REPEAT
          IF NOT PostedPackage."Multi Document Package" OR (PostedPackage."Source ID" = '') THEN BEGIN
            Package.ClearTotalValueFields;
            Package.TRANSFERFIELDS(PostedPackage);
            UPSPostedOptionPage.GET(PostedPackage."No.");
            PDF417LoadPackageData(
              LabelData,i,OverLimit,MaxLines,FALSE,tTB,tCR,Package,UPSOptionPage,Package.GetPostedWeight,
              TRUE);
          END;
        UNTIL PostedPackage.NEXT = 0;

      IF ExportDocSetup."Comm. Invoice Detail Summary" =
         ExportDocSetup."Comm. Invoice Detail Summary"::"By Item No."
      THEN
        TempItemSummary.SETCURRENTKEY(
          "Export Document No.",Type,"No.","Country of Origin ISO 2 Char")
      ELSE
        TempItemSummary.SETCURRENTKEY(
          "Export Document No.","Schedule B Code",Description,"Country of Origin ISO 2 Char",
          "Source Unit of Measure (Base)");

      TempItemSummary.FIND('-');
      REPEAT
        LoadLabelData(LabelData,i,OverLimit,MaxLines,'08' + tTB);
        LoadLabelData(LabelData,i,OverLimit,MaxLines,Decimal2Text(TempItemSummary."Source Quantity",0)  + tTB);
        LoadLabelData(LabelData,i,OverLimit,MaxLines,COPYSTR(TempItemSummary."Source Unit of Measure",1,3) + tTB);
        LoadLabelData(LabelData,i,OverLimit,MaxLines,
          Decimal2Text(TempItemSummary."Value USD" / TempItemSummary."Source Quantity",6) + tTB);

        LoadLabelData(LabelData,i,OverLimit,MaxLines,TempItemSummary.Description + tTB);
        LoadLabelData(LabelData,i,OverLimit,MaxLines,TempItemSummary."Country of Origin ISO 2 Char" + tTB);
        LoadLabelData(LabelData,i,OverLimit,MaxLines,TempItemSummary."Schedule B Code" + tTB);
        IF TempItemSummary."License No." <> '' THEN
          LoadLabelData(LabelData,i,OverLimit,MaxLines,TempItemSummary."License No." + tTB)
        ELSE
          LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB);
        LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB);  // Description 2
        LoadLabelData(
          LabelData,i,OverLimit,MaxLines,Decimal2Text(TempItemSummary."Value USD",2) + tTB + 'USD' + tTB);
        IF (ExportDocSetup."Comm. Invoice Detail Summary" =
            ExportDocSetup."Comm. Invoice Detail Summary"::"By Item No.") AND
           (TempItemSummary.Type = TempItemSummary.Type::Item)
        THEN
          LoadLabelData(LabelData,i,OverLimit,MaxLines,TempItemSummary."No." + tCR)
        ELSE
          LoadLabelData(LabelData,i,OverLimit,MaxLines,tCR);  // PartNo
      UNTIL TempItemSummary.NEXT = 0;

      IF CurrentUPSOptionPage."Saturday Delivery" THEN BEGIN
        UPSAccessorialCharge.SETRANGE(Type,UPSAccessorialCharge.Type::SC);
        IF UPSAccessorialCharge.FIND('+') THEN
          AccessorialCharge := UPSAccessorialCharge.Fee;

        LoadLabelData(LabelData,i,OverLimit,MaxLines,'09' + tTB + '02' + tTB);
        IF AccessorialCharge > 0 THEN
          LoadLabelData(LabelData,i,OverLimit,MaxLines,'1' + tTB + Decimal2Text(UPSAccessorialCharge.Fee,2)
            + tTB + 'USD' + tCR)
        ELSE
          LoadLabelData(LabelData,i,OverLimit,MaxLines,'1' + tCR);
      END;

      IF CurrentPackage."Insure Through Shipping Agent" AND
         (CurrentUPSOptionPage."Insurance Type" = CurrentUPSOptionPage."Insurance Type"::"Declared Value")
      THEN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,
          '09' + tTB + '04' + tTB + tTB + Decimal2Text(TotalInsurance,2) + tTB + 'USD' + tCR);

      IF CurrentUPSOptionPage."Dangerous Goods" THEN BEGIN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,'09' + tTB + '08' + tTB);
        LoadLabelData(LabelData,i,OverLimit,MaxLines,'1' + tCR);
      END;

      IF TotalCOD > 0 THEN
        LoadLabelData(
          LabelData,i,OverLimit,MaxLines,'09' + tTB + '05' + tTB + tTB + Decimal2Text(TotalCOD,2) + tTB +
          'USD' + tCR);

      IF CurrentUPSOptionPage."Additional Handling Required" THEN BEGIN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,'09' + tTB + '07' + tTB);
        LoadLabelData(LabelData,i,OverLimit,MaxLines,'1' + tCR);
      END;

      IF CurrentPackage."Residential Delivery" THEN BEGIN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,'09' + tTB + '10' + tTB);
        LoadLabelData(LabelData,i,OverLimit,MaxLines,'1' + tCR);
      END;

      IF CurrentUPSOptionPage."Large Package" THEN BEGIN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,'09' + tTB + '14' + tTB);
        LoadLabelData(LabelData,i,OverLimit,MaxLines,'1' + tCR);
      END;

      IF CurrentUPSOptionPage."Shipper Pays Declared Value" THEN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,'09' + tTB + '15' + tCR);

      CASE CurrentUPSOptionPage."Insurance Type" OF
        CurrentUPSOptionPage."Insurance Type"::"Flexible Parcel":
          LoadLabelData(
            LabelData,i,OverLimit,MaxLines,'09' + tTB + '11' + tTB + tTB + Decimal2Text(TotalInsurance,2) +
            tTB + 'USD' + tCR);
        CurrentUPSOptionPage."Insurance Type"::"Time in Transit":
          LoadLabelData(
            LabelData,i,OverLimit,MaxLines,'09' + tTB + '12' + tTB + tTB + Decimal2Text(TotalInsurance,2) +
             tTB + 'USD' + tCR);
        CurrentUPSOptionPage."Insurance Type"::"Expanded Parcel":
          LoadLabelData(
            LabelData,i,OverLimit,MaxLines,'09' + tTB + '13' + tTB + tTB + Decimal2Text(TotalInsurance,2) +
            tTB + 'USD' + tCR);
      END;

      PDF417LoadFinalSegments(
        LabelData,i,OverLimit,ExportDoc,CurrentPackage,CurrentUPSOptionPage,TotalPackages,
        InvoiceLineTotal - Discount,TotalInvoiceAmount,MaxLines,tCR,tTB);

      IF OverLimit THEN BEGIN
        CLEAR(LabelData);
        i := 1;

        LoadLabelData(
          LabelData,i,OverLimit,MaxLines,'01' + tTB + '32' + tTB + '{)>' + tTB + '49' + tTB +
          UPSlinkSetup.UPSlinkVersion + tTB + '0200' + tCR);

        PDF417LoadSeg02Data(
          LabelData,i,OverLimit,ExportDoc,CurrentPackage,CurrentUPSOptionPage,MaxLines,
          ShipmentActualWeight,ShipmentDimWeight,InvoiceLineTotal,tCR,tTB);

        IF CurrentUPSOptionPage."World Ease GCCN" <> '' THEN BEGIN
          LoadLabelData(LabelData,i,OverLimit,MaxLines,'10' + tTB);
          LoadLabelData(
            LabelData,i,OverLimit,MaxLines,DELCHR(CurrentUPSOptionPage."World Ease GCCN") +
            tTB + tTB + tTB + tTB + tTB + tTB + tCR);
        END;
        LoadLabelData(LabelData,i,OverLimit,MaxLines,'98' + tTB + Text082 + tCR);
      END;

      LoadLabelData(LabelData,i,OverLimit,MaxLines,'99' + tCR);
    END;

    PROCEDURE PDF417Data2@1240030027(ExportDoc@1240030007 : Record 14000981;CurrentPackage@1240030006 : Record 14000701;CurrentUPSOptionPage@1240030005 : Record 14000761;VAR LabelData@1240030003 : ARRAY [60] OF Text[90];MaxLines@1240030002 : Integer;tCR@1240030001 : Text[3];tTB@1240030000 : Text[3]) i : Integer;
    VAR
      TempItemSummary@1240030004 : TEMPORARY Record 14000983;
    BEGIN
      i :=
        PDF417Data(
          ExportDoc,CurrentPackage,CurrentUPSOptionPage,TempItemSummary,LabelData,30,tCR,tTB);
    END;

    PROCEDURE PDF417LoadPackageData@1240030033(VAR LabelData@1240030008 : ARRAY [60] OF Text[90];VAR i@1240030007 : Integer;VAR OverLimit@1240030006 : Boolean;MaxLines@1240030005 : Integer;PackageDetail@1240030004 : Boolean;tTB@1240030003 : Text[3];tCR@1240030009 : Text[3];CurrentPackage@1240030000 : Record 14000701;CurrentUPSOptionPage@1240030001 : Record 14000761;PackageActualWeight@1240030002 : Decimal;Posted@1240030012 : Boolean);
    VAR
      ReportWorkFileTmp@1240030013 : TEMPORARY Record 14050013;
      HazMatProductClass@1240030010 : Record 14050103;
      x@1240030011 : Integer;
    BEGIN
      LoadLabelData(LabelData,i,OverLimit,MaxLines,'07' + tTB + CurrentPackage."External Tracking No." + tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,Decimal2Text(ROUND(PackageActualWeight,1,'>'),1) + tTB);
      IF CurrentUPSOptionPage."Dangerous Goods" THEN BEGIN
        x := 0;
        IF Posted THEN
          HazMatPostedPackageLines(CurrentPackage."No.",ReportWorkFileTmp)
        ELSE
          HazMatPackageLines(CurrentPackage."No.",ReportWorkFileTmp);
        IF ReportWorkFileTmp.FIND('-') THEN
          REPEAT
            x := x + 1;
            HazMatProductClass.GET(ReportWorkFileTmp."Code 1");
            LoadLabelData(
              LabelData,i,OverLimit,MaxLines,HazMatProductClass."Hazard Division No." + tTB +
              HazMatProductClass."Identification No." + tTB);
          UNTIL ReportWorkFileTmp.NEXT = 0;
          WHILE x < 3 DO BEGIN
              x := x + 1;
              LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB + tTB);
          END;
      END ELSE
        LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB + tTB  + tTB + tTB + tTB + tTB);  // Haz Codes
      IF CurrentUPSOptionPage."Additional Handling Required" THEN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,'07' + tTB)
      ELSE
        LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB);
      IF CurrentUPSOptionPage."Large Package" THEN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,'14' + tTB)
      ELSE
        LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB);
      IF CurrentUPSOptionPage."Proactive Response" THEN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,'16' + tTB)
      ELSE
        LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB);  // Dry Ice
      IF CurrentPackage."Dimensional Weight" > 0 THEN
        LoadLabelData(
          LabelData,i,OverLimit,MaxLines,Decimal2Text(CurrentPackage."Dimensional Weight",1) + tCR)
      ELSE
        LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB + tCR);
    END;

    PROCEDURE PDF417LoadSeg02Data@1240030029(VAR LabelData@1240030009 : ARRAY [60] OF Text[90];VAR i@1240030008 : Integer;VAR OverLimit@1240030000 : Boolean;ExportDoc@1240030006 : Record 14000981;CurrentPackage@1240030005 : Record 14000701;CurrentUPSOptionPage@1240030004 : Record 14000761;MaxLines@1240030001 : Integer;ShipmentActualWeight@1240030010 : Decimal;ShipmentDimWeight@1240030011 : Decimal;InvoiceLineTotal@1240030012 : Decimal;tCR@1240030003 : Text[3];tTB@1240030002 : Text[3]);
    VAR
      Text1@1240030007 : Text[30];
    BEGIN
      Text1 := Date2Text(ExportDoc."Departure Date");
      LoadLabelData(
        LabelData,i,OverLimit,MaxLines,'02' + tTB + COPYSTR(Text1,7,2) + COPYSTR(Text1,5,2) +
        COPYSTR(Text1,1,4) + tTB + CurrentPackage."External Tracking No." + tTB);

      CASE CurrentPackage."Service Indicator" OF
        '07':
          LoadLabelData(LabelData,i,OverLimit,MaxLines,'01' + tTB);
        '08':
          LoadLabelData(LabelData,i,OverLimit,MaxLines,'05' + tTB);
        '11':
          LoadLabelData(LabelData,i,OverLimit,MaxLines,'08' + tTB);
        '54':
          LoadLabelData(LabelData,i,OverLimit,MaxLines,'21' + tTB);
        '04':
          LoadLabelData(LabelData,i,OverLimit,MaxLines,'28' + tTB);
        'E1':
          LoadLabelData(LabelData,i,OverLimit,MaxLines,'29' + tTB);
      END;

      LoadLabelData(LabelData,i,OverLimit,MaxLines,'P' + tTB + tTB);

      CASE CurrentUPSOptionPage."UPS Packaging Type" OF
        CurrentUPSOptionPage."UPS Packaging Type"::"UPS Letter":
          LoadLabelData(LabelData,i,OverLimit,MaxLines,'1' + tTB);
        CurrentUPSOptionPage."UPS Packaging Type"::Palletized:
          LoadLabelData(LabelData,i,OverLimit,MaxLines,'4' + tTB);
        ELSE
          LoadLabelData(LabelData,i,OverLimit,MaxLines,'3' + tTB);
      END;

      LoadLabelData(
        LabelData,i,OverLimit,MaxLines,Decimal2Text(ShipmentActualWeight,1) +
        tTB + FORMAT(ShippingSetup."Default Weight Units") + tTB);

      IF ShipmentDimWeight > 0 THEN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,Decimal2Text(ShipmentDimWeight,1) +  tTB)
      ELSE
        LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB);

      IF CurrentPackage."Total Packages" = 1 THEN BEGIN
        CASE CurrentUPSOptionPage."UPS Packaging Type" OF
          CurrentUPSOptionPage."UPS Packaging Type"::"UPS 25kg Box":
            LoadLabelData(LabelData,i,OverLimit,MaxLines,'04' + tTB);
          CurrentUPSOptionPage."UPS Packaging Type"::"UPS 10kg Box":
            LoadLabelData(LabelData,i,OverLimit,MaxLines,'05' + tTB);
          CurrentUPSOptionPage."UPS Packaging Type"::"UPS Express Pak":
            LoadLabelData(LabelData,i,OverLimit,MaxLines,'06' + tTB)
          ELSE
            LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB);
        END;
      END ELSE
        LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB);

      CASE CurrentUPSOptionPage."International Billing" OF
        CurrentUPSOptionPage."International Billing"::" ",
        CurrentUPSOptionPage."International Billing"::Prepaid:
          LoadLabelData(LabelData,i,OverLimit,MaxLines,'P/P' + tTB);
        CurrentUPSOptionPage."International Billing"::FreightCollect:
          LoadLabelData(LabelData,i,OverLimit,MaxLines,'F/C' + tTB);
        CurrentUPSOptionPage."International Billing"::"Free On Board":
          LoadLabelData(LabelData,i,OverLimit,MaxLines,'FOB' + tTB);
        CurrentUPSOptionPage."International Billing"::"Cost Freight":
          LoadLabelData(LabelData,i,OverLimit,MaxLines,'C/F' + tTB);
        CurrentUPSOptionPage."International Billing"::"Delivery Duty Paid":
          LoadLabelData(LabelData,i,OverLimit,MaxLines,'SDV' + tTB);
        CurrentUPSOptionPage."International Billing"::"Shipping Duty Tax":
          LoadLabelData(LabelData,i,OverLimit,MaxLines,'F/D' + tTB);
        CurrentUPSOptionPage."International Billing"::"Third Party":
          IF CurrentPackage."UPS Puerto Rico Service" THEN
            LoadLabelData(LabelData,i,OverLimit,MaxLines,'TPB' + tTB)
          ELSE
            LoadLabelData(LabelData,i,OverLimit,MaxLines,'P/P' + tTB);
      END;

      IF InvoiceLineTotal > 0 THEN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,Decimal2Text(InvoiceLineTotal,2) +  tTB + 'USD' + tTB)
      ELSE
        LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB + tTB);

      LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB);  // Goods not in free circulation
      LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB + tTB);  // Terms of Delivery/Shipment Type

      LoadLabelData(
        LabelData,i,OverLimit,MaxLines,ExportDoc.GetISOCountryCode(ExportDoc."Country of Destination") +
        tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB);  // Agreement Type

      CASE CurrentUPSOptionPage."Export Declaration" OF
        CurrentUPSOptionPage."Export Declaration"::Included:
          LoadLabelData(LabelData,i,OverLimit,MaxLines,'D' + tTB);
        CurrentUPSOptionPage."Export Declaration"::"UPS Prepare":
          LoadLabelData(LabelData,i,OverLimit,MaxLines,'U' + tTB);
        CurrentUPSOptionPage."Export Declaration"::"AESDirect Pre-Depart":
          LoadLabelData(LabelData,i,OverLimit,MaxLines,'E' + tTB + CurrentPackage."AES ITN No.");
        CurrentUPSOptionPage."Export Declaration"::"AESDirect Post-Depart":
          LoadLabelData(LabelData,i,OverLimit,MaxLines,'P' + tTB);
        ELSE
          LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB);
      END;
      LoadLabelData(LabelData,i,OverLimit,MaxLines,tCR);
    END;

    PROCEDURE PDF417LoadFinalSegments@1240030037(VAR LabelData@1240030009 : ARRAY [60] OF Text[90];VAR i@1240030005 : Integer;VAR OverLimit@1240030004 : Boolean;ExportDoc@1240030007 : Record 14000981;CurrentPackage@1240030006 : Record 14000701;CurrentUPSOptionPage@1240030003 : Record 14000761;TotalPackages@1240030008 : Integer;InvoiceLineTotal@1240030010 : Decimal;TotalInvoiceAmount@1240030011 : Decimal;MaxLines@1240030002 : Integer;tCR@1240030001 : Text[3];tTB@1240030000 : Text[3]);
    BEGIN
      IF CurrentUPSOptionPage."World Ease GCCN" <> '' THEN BEGIN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,'10' + tTB);
        LoadLabelData(
          LabelData,i,OverLimit,MaxLines,DELCHR(CurrentUPSOptionPage."World Ease GCCN") +
          tTB + tTB + tTB + tTB + tTB + tTB + tCR);
        EXIT;
      END;

      LoadLabelData(LabelData,i,OverLimit,MaxLines,'13' + tTB);
      IF ExportDoc.AESITNRequired OR
         (CurrentUPSOptionPage."Certificate of Origin" <>
          CurrentUPSOptionPage."Certificate of Origin"::" ")
      THEN
        LoadLabelData(LabelData,i,OverLimit,MaxLines,'1' + tTB)
      ELSE
        LoadLabelData(LabelData,i,OverLimit,MaxLines,'0' + tTB);

      LoadLabelData(LabelData,i,OverLimit,MaxLines,tTB + ExportDoc."No." + tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,CurrentPackage."External Document No." + tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,Integer2Text(TotalPackages) + tTB);

      LoadLabelData(LabelData,i,OverLimit,MaxLines,Decimal2Text(InvoiceLineTotal,2) + tTB);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,Decimal2Text(TotalInvoiceAmount,2) + tCR);
      LoadLabelData(LabelData,i,OverLimit,MaxLines,'14' + tTB + '004' + tTB + '01' + tCR);
    END;

    LOCAL PROCEDURE GetExportDocSetup@1240030031();
    BEGIN
      IF NOT ExportDocSetupRetrieved THEN BEGIN
        ExportDocSetup.GET;
        ExportDocSetupRetrieved := TRUE;
      END;
    END;

    PROCEDURE WWServiceVerification@1240031021(VAR CurrentPackage@1240030002 : Record 14000701;UPSOptionPage@1240030001 : Record 14000761;UPSCountryCode@1240030000 : Code[10]);
    VAR
      UPSlinkWWServiceVerif@1240030005 : Record 14050012;
    BEGIN
      WITH CurrentPackage DO BEGIN
        UPSlinkWWServiceVerif.RESET;
        UPSlinkWWServiceVerif.SETRANGE("Destination Country Code",UPSCountryCode);
        UPSlinkWWServiceVerif.SETRANGE("Service Indicator","Service Indicator");

        IF "Ship-to ZIP Code" <> '' THEN BEGIN
          UPSlinkWWServiceVerif.SETFILTER("Destination ZIP Lower Limit",'<=%1',
            FixZIPCode("Ship-to ZIP Code"));
          UPSlinkWWServiceVerif.SETFILTER("Destination ZIP Upper Limit",'>=%1',
            FixZIPCode("Ship-to ZIP Code"));
        END ELSE BEGIN
          UPSlinkWWServiceVerif.SETRANGE("Destination City Name","Ship-to City");
          UPSlinkWWServiceVerif.SETRANGE("Destination County Name","Ship-to State");
        END;

        IF UPSlinkWWServiceVerif.FIND('-') THEN
          IF "Ship-to ZIP Code" <> '' THEN
            ERROR(Text008,"Shipping Agent Service",FIELDCAPTION("Ship-to ZIP Code"),"Ship-to ZIP Code")
          ELSE
            ERROR(
              Text037,"Shipping Agent Service",FIELDCAPTION("Ship-to City"),"Ship-to City",
              FIELDCAPTION("Ship-to State"),"Ship-to State");
      END;
    END;

    PROCEDURE WWServiceVerification2@1240031024(VAR CurrentPackage@1240030003 : Record 14000701;UPSOptionPage@1240030002 : Record 14000761;UPSCountryCode@1240030001 : Code[10]);
    VAR
      UPSlinkWWServiceVerif@1240030017 : Record 14050016;
      UPSlinkWWOrigDestValid@1240030014 : Record 14050011;
      UPSlinkCountryCity@1240030013 : Record 14050017;
      ShipToCity@1240030011 : Text[30];
      ShipToState@1240030010 : Text[30];
      ShipToZip@1240030009 : Text[30];
      ShipToCountry@1240030008 : Text[30];
      ShipFromCity@1240030007 : Text[30];
      ShipFromState@1240030006 : Text[30];
      ShipFromZip@1240030005 : Text[30];
      ShipFromCountry@1240030004 : Text[30];
      WWOrigDestShipToCountry@1240020000 : Text[2];
      WWOrigDestShipFromCountry@1240020001 : Text[2];
      Block@1240030000 : Boolean;
    BEGIN
      WITH CurrentPackage DO BEGIN
        IF NOT (UPSOptionPage."Call Tag Type" IN
                [UPSOptionPage."Call Tag Type"::None,
                 UPSOptionPage."Call Tag Type"::"Exchange Outbound"])
        THEN BEGIN
          IF UPSOptionPage."Alternate Call Tag Return" THEN BEGIN
            ShipToCity := UPPERCASE(UPSOptionPage."Return City");
            ShipToState := UPPERCASE(UPSOptionPage."Return State");
            ShipToZip := UPPERCASE(FixZIPCode(UPSOptionPage."Return ZIP Code"));
            ShipToCountry := GetUPSCountryCode(UPPERCASE(UPSOptionPage."Return Country Code"));
          END ELSE BEGIN
            ShipToCity := UPPERCASE(PackingStation."Ship-from City");
            ShipToState := UPPERCASE(PackingStation."Ship-from State");
            ShipToZip := UPPERCASE(FixZIPCode(PackingStation."Ship-from ZIP Code"));
            ShipToCountry := GetUPSCountryCode(UPPERCASE(PackingStation."Ship-from Country Code"));
          END;
          ShipFromCity := UPPERCASE("Ship-to City");
          ShipFromState := UPPERCASE("Ship-to State");
          ShipFromZip := UPPERCASE(FixZIPCode("Ship-to ZIP Code"));
          ShipFromCountry := GetUPSCountryCode(UPPERCASE("Ship-to Country Code"));
        END ELSE BEGIN
          ShipToCity := UPPERCASE("Ship-to City");
          ShipToState := UPPERCASE("Ship-to State");
          ShipToZip := UPPERCASE(FixZIPCode("Ship-to ZIP Code"));
          ShipToCountry := GetUPSCountryCode(UPPERCASE("Ship-to Country Code"));
          ShipFromCity := UPPERCASE(PackingStation."Ship-from City");
          ShipFromState := UPPERCASE(PackingStation."Ship-from State");
          ShipFromZip := UPPERCASE(FixZIPCode(PackingStation."Ship-from ZIP Code"));
          ShipFromCountry := GetUPSCountryCode(PackingStation."Ship-from Country Code");
        END;

        WWOrigDestShipToCountry := ShipToCountry;
        WWOrigDestShipFromCountry := ShipFromCountry;

        Block := FALSE;
        CLEAR(UPSlinkWWOrigDestValid);
        UPSlinkWWOrigDestValid.SETCURRENTKEY("Destination Country Code","Origin Country Code",
          "Validation Type","Validation Code");

        IF WWOrigDestShipToCountry = 'US' THEN
          CASE UPPERCASE(ShipToState) OF
            'AK':
              UPSlinkWWOrigDestValid.SETRANGE("Destination Country Code",'USAK');
            'HI':
              UPSlinkWWOrigDestValid.SETRANGE("Destination Country Code",'USHI');
            ELSE
              UPSlinkWWOrigDestValid.SETRANGE("Destination Country Code",'US48');
          END
        ELSE
          UPSlinkWWOrigDestValid.SETRANGE("Destination Country Code",WWOrigDestShipToCountry);

        IF WWOrigDestShipFromCountry = 'US' THEN
          CASE UPPERCASE(ShipFromState) OF
            'AK':
              UPSlinkWWOrigDestValid.SETRANGE("Origin Country Code",'USAK');
            'HI':
              UPSlinkWWOrigDestValid.SETRANGE("Origin Country Code",'USHI');
            ELSE
              UPSlinkWWOrigDestValid.SETRANGE("Origin Country Code",'US48');
          END
        ELSE BEGIN
          UPSlinkWWOrigDestValid.SETRANGE("Origin Country Code", WWOrigDestShipFromCountry);
          IF WWOrigDestShipToCountry = 'US' THEN
           UPSlinkWWOrigDestValid.SETRANGE("Destination Country Code", WWOrigDestShipToCountry);
        END;
        UPSlinkWWOrigDestValid.SETRANGE("Validation Type",
          UPSlinkWWOrigDestValid."Validation Type"::Service);
        UPSlinkWWOrigDestValid.SETRANGE("Validation Code","Service Indicator");
        IF NOT (UPSlinkWWOrigDestValid.FIND('-')) THEN
          ERROR(Text037,
            UPSOptionPage."Shipping Agent Service",'',
            'Ship To Country', WWOrigDestShipToCountry,
            PackingStation.FIELDCAPTION(PackingStation."Ship-from Country Code"),
            WWOrigDestShipFromCountry);

        CLEAR(UPSlinkWWServiceVerif);
        UPSlinkWWServiceVerif.SETCURRENTKEY("Destination Country Code",
          "Origin Country Code","Service Indicator");
        UPSlinkWWServiceVerif.SETFILTER("Destination Country Code",'%1|%2',ShipToCountry,'');
        UPSlinkWWServiceVerif.SETFILTER("Origin Country Code",'%1|%2',ShipFromCountry,'');
        UPSlinkWWServiceVerif.SETRANGE("Service Indicator","Service Indicator");

        IF "Ship-to ZIP Code" <> '' THEN BEGIN
          UPSlinkWWServiceVerif.SETFILTER("Destination ZIP Lower Limit",'<=%1',FixZIPCode(ShipToZip));
          UPSlinkWWServiceVerif.SETFILTER("Destination ZIP Upper Limit",'>=%1',FixZIPCode(ShipToZip));
        END ELSE BEGIN
          IF ShipToCity <> '' THEN BEGIN
            UPSlinkWWServiceVerif.SETRANGE("Destination City Name",ShipToCity);
            CLEAR(UPSlinkCountryCity);
            UPSlinkCountryCity.SETCURRENTKEY("Country Code","City Name");
            UPSlinkCountryCity.SETRANGE(UPSlinkCountryCity."Country Code",ShipToCountry);
            IF UPSlinkCountryCity.FIND('-') THEN BEGIN
              UPSlinkCountryCity.SETRANGE(UPSlinkCountryCity."City Name", ShipToCity);
              IF NOT(UPSlinkCountryCity.FIND('-')) THEN
                ERROR(Text086,UPSlinkCountryCity.FIELDCAPTION("City Name"),
                  ShipToCity,UPSlinkCountryCity.TABLENAME);
            END;
          END ELSE
            ERROR(Text037,"Shipping Agent Service",'',FIELDCAPTION("Ship-to City"),ShipToCity,
              FIELDCAPTION("Ship-to State"),ShipToState);
        END;

        IF UPSlinkWWServiceVerif.FIND('-') THEN
          IF CheckBlockService(UPSlinkWWServiceVerif,CurrentPackage,UPSOptionPage) THEN
            ERROR(
              Text037,"Shipping Agent Service",'',
              UPSlinkWWServiceVerif.FIELDCAPTION("Destination Country Code"),ShipToCountry,
              ShipToCity,ShipToState);
      END;
    END;

    LOCAL PROCEDURE CheckBlockService@1240031025(UPSlinkWWServiceVerif@1240030000 : Record 14050016;CurrentPackage@1240030001 : Record 14000701;UPSOptionPage@1240030002 : Record 14000761) Block : Boolean;
    VAR
      BlockSaturdayDelivery@1240020000 : Boolean;
      BlockNonSaturday@1240020005 : Boolean;
      BlockAllServiceDays@1240020003 : Boolean;
      BlockDutyAccess@1240020001 : Boolean;
      BlockResidential@1240020002 : Boolean;
    BEGIN
      WITH CurrentPackage DO BEGIN
        IF  (UPSlinkWWServiceVerif."Is Saturday Delivery" = '1') AND
            (UPSlinkWWServiceVerif."Is Not Saturday Delivery" = '1') THEN BEGIN
            BlockAllServiceDays := TRUE
        END ELSE BEGIN
          IF UPSOptionPage."Saturday Delivery" THEN BEGIN
            IF UPSlinkWWServiceVerif."Is Saturday Delivery" = '1' THEN
              BlockSaturdayDelivery := TRUE
          END ELSE BEGIN
            IF UPSlinkWWServiceVerif."Is Not Saturday Delivery" = '1' THEN
              BlockNonSaturday := TRUE;
            END;
        END;

        IF (UPSOptionPage."International Routing" = UPSOptionPage."International Routing"::Dutiable) OR
        (UPSOptionPage."UPS Packaging Type" <> UPSOptionPage."UPS Packaging Type"::"UPS Letter")
        THEN
          IF UPSlinkWWServiceVerif."Is Duty Assessable" = '1' THEN
            BlockDutyAccess := TRUE;

        IF "Residential Delivery" THEN
          IF UPSlinkWWServiceVerif."Is Residential" = '1' THEN
            BlockResidential := TRUE;

        IF BlockSaturdayDelivery OR BlockNonSaturday
           OR BlockDutyAccess OR BlockResidential
        THEN
          IF UPSlinkWWServiceVerif."Is Not Domestic" = '1' THEN
            Block := TRUE;
      END;
    END;

    PROCEDURE TotalBillableWeights@1240030032(Package@1240030004 : Record 14000701;VAR TotalWeight@1240030000 : Decimal;VAR TotalActualWeight@1240030001 : Decimal;VAR TotalDimensionalWeight@1240030002 : Decimal;ShipmentLevel@1240030003 : Boolean;LargePackageMinBillWgt@1240030006 : Integer);
    VAR
      UPSOptionPage@1240030005 : Record 14000761;
    BEGIN
      TotalWeight :=
        TotalWeight + ROUND(Package."Calculation Weight (LBS)",1,'>');

      IF ShipmentLevel THEN BEGIN
        CLEAR(UPSOptionPage);

        IF Package."Original Package No." <> '' THEN
          UPSOptionPage.GET(UPSOptionPage.Type::Package,Package."Original Package No.",0,0)
        ELSE
          UPSOptionPage.GET(UPSOptionPage.Type::Package,Package."No.",0,0);

        IF UPSOptionPage."Large Package" THEN BEGIN
          IF LargePackageMinBillWgt > Package.GetWeight THEN
            TotalActualWeight := TotalActualWeight + LargePackageMinBillWgt
          ELSE
            TotalActualWeight := TotalActualWeight + Package.GetWeight;

          IF Package."Dimensional Weight" <> 0 THEN
            IF LargePackageMinBillWgt > Package."Dimensional Weight" THEN
              TotalDimensionalWeight := TotalDimensionalWeight + LargePackageMinBillWgt
            ELSE
              TotalDimensionalWeight := TotalDimensionalWeight + Package."Dimensional Weight"
          ELSE
            IF LargePackageMinBillWgt > Package.GetWeight THEN
              TotalDimensionalWeight := TotalDimensionalWeight + LargePackageMinBillWgt
            ELSE
              TotalDimensionalWeight := TotalDimensionalWeight + Package.GetWeight;
        END ELSE BEGIN
          TotalActualWeight := TotalActualWeight + Package.GetWeight;
          IF Package."Dimensional Weight" <> 0 THEN
            TotalDimensionalWeight := TotalDimensionalWeight + Package."Dimensional Weight"
          ELSE
            TotalDimensionalWeight := TotalDimensionalWeight + Package.GetWeight;
        END;
      END;
    END;

    LOCAL PROCEDURE GetBaseCharge@1240030034(ShippingAgentService@1240030000 : Record 14000708;Zone@1240030002 : Code[10];Weight@1240030001 : Decimal;VAR BaseCharge@1240030005 : Decimal;RateShop@1240030004 : Boolean;ResidentialDelivery@1240030006 : Boolean) : Boolean;
    VAR
      UPSShippingRateChart@1240030003 : Record 14000764;
    BEGIN
      UPSShippingRateChart.RESET;
      UPSShippingRateChart.SETRANGE("Service Indicator",ShippingAgentService."Service Indicator");
      UPSShippingRateChart.SETRANGE(Zone,Zone);
      UPSShippingRateChart.SETFILTER("Max. Weight",'>=%1',Weight);

      IF ShippingAgentService."UPS Residential Serv. Avail." AND ResidentialDelivery THEN
        UPSShippingRateChart.SETRANGE(Residential,TRUE)
      ELSE
        UPSShippingRateChart.SETRANGE(Residential,FALSE);

      IF NOT UPSShippingRateChart.FIND('-') THEN
        IF RateShop THEN
          EXIT(FALSE)
        ELSE
          ERROR(
            Text002,
            ShippingAgentService."Shipping Agent Code",ShippingAgentService.Code,
            Zone,Weight);

      IF NOT UPSShippingRateChart."Rate per Pound" OR (Weight = 0) THEN
        BaseCharge := UPSShippingRateChart.Amount
      ELSE
        BaseCharge := ROUND(UPSShippingRateChart.Amount * Weight,0.01,'>');

      IF BaseCharge < UPSShippingRateChart."Minimum Amount" THEN
        BaseCharge := UPSShippingRateChart."Minimum Amount";

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetBaseCharge2@1240030035(ShippingAgentService@1240030003 : Record 14000708;Zone@1240030002 : Code[10];Weight@1240030001 : Decimal;VAR BaseCharge@1240030005 : Decimal;RateShop@1240030000 : Boolean;ResidentialDelivery@1240030006 : Boolean) : Boolean;
    VAR
      UPSlinkListRateChart@1240030004 : Record 14050018;
    BEGIN
      UPSlinkListRateChart.RESET;
      UPSlinkListRateChart.SETRANGE("Service Indicator",ShippingAgentService."Service Indicator");
      UPSlinkListRateChart.SETRANGE(Zone,Zone);
      UPSlinkListRateChart.SETFILTER("Max. Weight",'>=%1',Weight);

      IF ShippingAgentService."UPS Residential Serv. Avail." AND ResidentialDelivery THEN
        UPSlinkListRateChart.SETRANGE(Residential,TRUE)
      ELSE
        UPSlinkListRateChart.SETRANGE(Residential,FALSE);

      IF NOT UPSlinkListRateChart.FIND('-') THEN
        IF RateShop THEN
          EXIT(FALSE)
        ELSE
          ERROR(
            Text090,
            ShippingAgentService."Shipping Agent Code",ShippingAgentService.Code,
            Zone,Weight);

      IF NOT UPSlinkListRateChart."Rate per Pound" OR (Weight = 0) THEN
        BaseCharge := UPSlinkListRateChart.Amount
      ELSE
        BaseCharge := ROUND(UPSlinkListRateChart.Amount * Weight,0.01,'>');

      IF BaseCharge < UPSlinkListRateChart."Minimum Amount" THEN
        BaseCharge := UPSlinkListRateChart."Minimum Amount";

      EXIT(TRUE);
    END;

    PROCEDURE GetHundredWeightListRate@1240030036(CurrentShippingAgentService@1240030007 : Record 14000708;WeightTier@1240030006 : Code[10];ZoneCode@1240030005 : Code[10];TotalWeight@1240030004 : Decimal;ResidentialDelivery@1240030003 : Boolean;NoOfPackages@1240030002 : Integer;GiveError@1240030001 : Boolean;TotalCalcWeight@1240030000 : Decimal) : Decimal;
    VAR
      HundredWeightListRate@1240030010 : Record 14050019;
      ShippingZone@1240030009 : Record 14000766;
      RatePerPound@1240030008 : Decimal;
    BEGIN
      CurrentShippingAgentService.TESTFIELD("Service Indicator");
      IF NOT CurrentShippingAgentService."UPS Hundred Weight Available" THEN
        IF GiveError THEN
          ERROR(Text032,CurrentShippingAgentService.Code)
        ELSE
          EXIT(0);

      ShippingZone.GET(CurrentShippingAgentService."Service Indicator",ZoneCode);
      IF TotalCalcWeight < ShippingZone."Minimum Hundred Weight" THEN
        TotalCalcWeight := ShippingZone."Minimum Hundred Weight";

      HundredWeightListRate.RESET;
      HundredWeightListRate.SETRANGE("Service Indicator",CurrentShippingAgentService."Service Indicator");
      HundredWeightListRate.SETRANGE(Zone,ZoneCode);
      HundredWeightListRate.SETRANGE(Tier,WeightTier);
      IF TotalCalcWeight < 500 THEN
        HundredWeightListRate.SETFILTER("Minimum Weight",'100..200')
      ELSE
        IF TotalCalcWeight < 1000 THEN
          HundredWeightListRate.SETRANGE("Minimum Weight",500)
        ELSE
          HundredWeightListRate.SETRANGE("Minimum Weight",1000);

      IF CurrentShippingAgentService."UPS Residential Serv. Avail." AND ResidentialDelivery THEN
        HundredWeightListRate.SETRANGE(Residential,TRUE)
      ELSE
        HundredWeightListRate.SETRANGE(Residential,FALSE);

      IF HundredWeightListRate.FIND('+') THEN BEGIN
        RatePerPound := HundredWeightListRate."Rate per Pound";

        IF (HundredWeightListRate."Min. Tier Charge" > 0) AND
           (ROUND((TotalCalcWeight * RatePerPound)) < HundredWeightListRate."Min. Tier Charge")
        THEN
          RatePerPound := HundredWeightListRate."Min. Tier Charge" / TotalWeight
        ELSE
          RatePerPound := (TotalCalcWeight * RatePerPound) / TotalWeight;
      END;

      EXIT(RatePerPound);
    END;

    PROCEDURE ReturnLabelExist@1240020001(CurrentPackage@1240020001 : Record 14000701;VAR PackageReturn@1240020000 : Record 14000701;CurrentUPSOptionPage@1240020002 : Record 14000761) : Boolean;
    BEGIN
      PackageReturn.RESET;
      PackageReturn.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      PackageReturn.SETRANGE("Source Type",0);
      PackageReturn.SETRANGE("Source Subtype",0);
      PackageReturn.SETRANGE("External Document No.",CurrentPackage."Source ID");
      PackageReturn.SETRANGE(Miscellaneous,TRUE);
      IF PackageReturn.FIND('-') THEN
        EXIT(TRUE)
      ELSE
       EXIT(FALSE);
    END;

    LOCAL PROCEDURE CreateReturnPackage@1240030038(CurrentPackage@1240030000 : Record 14000701;CurrentUPSOptionPage@1240030004 : Record 14000761;VAR PackageReturn@1240030005 : Record 14000701) : Boolean;
    VAR
      PackageLine@1240020003 : Record 14000702;
      PackageReturnLine@1240020002 : Record 14000702;
      UPSOptionPage@1240020001 : Record 14000761;
      ModifyUPSOptionPage@1240020000 : Boolean;
    BEGIN
      PackageReturn.RESET;
      PackageReturn.INIT;
      PackageReturn.VALIDATE(PackageReturn."No.",'');

        PackageReturn."Source Type" := CurrentPackage."Source Type";
        PackageReturn."Source Subtype" := CurrentPackage."Source Subtype";
        PackageReturn."Source ID" := CurrentPackage."Source ID";
        PackageReturn."Override Dimensions" := CurrentPackage."Override Dimensions";
        PackageReturn."Override Length" := CurrentPackage."Override Length";
        PackageReturn."Override Width" := CurrentPackage."Override Width";
        PackageReturn."Override Height" := CurrentPackage."Override Height";
        PackageReturn."Override Weight" := CurrentPackage."Override Weight";
        PackageReturn."Override Insured Value" := CurrentPackage."Override Insured Value";
        PackageReturn."Export Document No." := CurrentPackage."Export Document No.";
        PackageReturn."Closed by Packing Station Code" :=
          CurrentPackage."Closed by Packing Station Code";

      PackageReturn.VALIDATE("Calculation Weight (LBS)", CurrentPackage."Calculation Weight (LBS)");
      PackageReturn.VALIDATE("Override Weight",CurrentPackage."Calculation Weight (LBS)");
      PackageReturn.INSERT(TRUE);
      PackageLine.RESET;
      PackageLine.SETRANGE(PackageLine."Package No.",CurrentPackage."No.");
      IF PackageLine.FIND('-') THEN BEGIN
        IF CurrentUPSOptionPage."Ship and Return Label" THEN BEGIN
          REPEAT
          PackageReturnLine.RESET;
          PackageReturnLine.INIT;
          PackageReturnLine."Line No." := PackageLine."Line No.";
          PackageReturnLine."Package No." := PackageReturn."No.";
          PackageReturnLine.Type := PackageLine.Type;
          PackageReturnLine.VALIDATE("No.",PackageLine."No.");
          PackageReturnLine.Quantity := PackageLine.Quantity;
          PackageReturnLine.Description := PackageLine.Description;
          PackageReturnLine."Net Weight" := PackageLine."Net Weight";
          PackageReturnLine."Serial No." := PackageLine."Serial No.";
          PackageReturnLine."Lot No." := PackageLine."Lot No.";
          PackageReturnLine.INSERT(FALSE);
          UNTIL PackageLine.NEXT = 0;
        END ELSE BEGIN
          PackageReturn.Description := PackageLine."No." + ' - ' + PackageLine.Description;
          PackageReturnLine."Net Weight" := PackageLine."Net Weight";
          PackageReturnLine.Quantity := PackageLine.Quantity;
        END;
        PackageReturn."Shipping Payment Type" := PackageReturn."Shipping Payment Type"::Prepaid;
        PackageReturn."Third Party Ship. Account No." := '';
        PackageReturn.COD := FALSE;
        PackageReturn."COD Cashiers Check" := FALSE;
        PackageReturn.MODIFY;
      END ELSE
        EXIT(FALSE);

      IF CurrentUPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::"Exchange Outbound" THEN BEGIN
        UPSOptionPage.GET(UPSOptionPage.Type::Package,PackageReturn."No.",0,0);
        UPSOptionPage."Call Tag Type" := UPSOptionPage."Call Tag Type"::"Exchange Return";
        UPSOptionPage."Additional Handling Required" :=
          CurrentUPSOptionPage."Additional Handling Required";
        UPSOptionPage."UPS Packaging Type" := CurrentUPSOptionPage."UPS Packaging Type";
        UPSOptionPage."Waybill No." := CurrentUPSOptionPage."Waybill No.";
        UPSOptionPage."Shipment Total Weight" := CurrentUPSOptionPage."Shipment Total Weight";
        UPSOptionPage."Delivery Confirmation Type" := UPSOptionPage."Delivery Confirmation Type"::None;
        UPSOptionPage."Shipper Release" := FALSE;
        UPSOptionPage."Saturday Delivery" := FALSE;
        UPSOptionPage.MODIFY;
        IF (CurrentPackage."Service Indicator" IN ['13','59']) THEN BEGIN
          PackageReturn."Service Indicator" := '03';
          PackageReturn."Shipping Agent Service" := 'GROUND';
          PackageReturn.MODIFY(TRUE);
        END;
        GetUPSTracking(PackageReturn,UPSOptionPage);
        PackageReturn."Packing Date" := WORKDATE;
        PackageReturn."Packing Time" := TIME;
        PackageReturn."Packed By" := USERID;
        PackageReturn.Closed := TRUE;
        PackageReturn.MODIFY;
      END;

      IF CurrentUPSOptionPage."Ship and Return Label" THEN BEGIN
        UPSOptionPage.GET(UPSOptionPage.Type::Package,PackageReturn."No.",0,0);
        UPSOptionPage."Call Tag Type" := UPSOptionPage."Call Tag Type"::"Print Return Label Only";
        UPSOptionPage."Ship and Return Label" := FALSE;
        UPSOptionPage."Additional Handling Required" :=
          CurrentUPSOptionPage."Additional Handling Required";
        UPSOptionPage."UPS Packaging Type" := CurrentUPSOptionPage."UPS Packaging Type";
        UPSOptionPage."Waybill No." := CurrentUPSOptionPage."Waybill No.";
        UPSOptionPage."Shipment Total Weight" := CurrentUPSOptionPage."Shipment Total Weight";
        UPSOptionPage.MODIFY;
        CheckPackage(PackageReturn,UPSOptionPage,ModifyUPSOptionPage);
        PackageReturn.Miscellaneous := TRUE;
        PackageReturn."Source ID" := '';
        PackageReturn."Source Type" := 0;
        PackageReturn."Source Subtype" := 0;
        PackageReturn."External Document No." := CurrentPackage."Source ID";
        PackageReturn."Packing Date" := WORKDATE;
        PackageReturn."Packing Time" := TIME;
        PackageReturn."Packed By" := USERID;
        PackageReturn."Shipping Agent Service" := 'GROUND';
        PackageReturn."Service Indicator" := '03';
        PackageReturn."Delivery Days" := 0;
        PackageReturn.LOCKTABLE;
        GetUPSTracking(PackageReturn,UPSOptionPage);
        PackageReturn.MODIFY;
        PackageReturn.Closed := TRUE;
        PackageReturn.MODIFY;
        CurrentUPSOptionPage."Ship and Return Label Pkg No." := PackageReturn."No.";
        CurrentUPSOptionPage.MODIFY;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE CheckName@1240030500(ShippingAgent@1240030010 : Record 291;FromType@1240030003 : 'Package,Document,Master Data';VAR Name@1240030001 : Text[100];VAR Name2@1240030002 : Text[100];VAR Contact@1240030005 : Text[100];NameCaption@1240030009 : Text[100];Name2Caption@1240030008 : Text[100];ContactCaption@1240030000 : Text[100]);
    VAR
      LongNameType@1240030004 : Integer;
    BEGIN
      LongNameType := NameAndAddressMgt.GetLongNameType(ShippingAgent,FromType);

      NameAndAddressMgt.CheckCorrectTextLen(Name,LongNameType,35,NameCaption);
      NameAndAddressMgt.CheckCorrectTextLen(Name2,LongNameType,35,Name2Caption);
      NameAndAddressMgt.CheckCorrectTextLen(Contact,LongNameType,35,ContactCaption);
    END;

    PROCEDURE CheckAddress@1240030501(ShippingAgent@1240030010 : Record 291;FromType@1240030014 : 'Package,Document,Master Data';VAR Address@1240030012 : Text[100];VAR Address2@1240030011 : Text[100];VAR City@1240030009 : Text[100];VAR PostCode@1240030008 : Code[100];VAR State@1240030007 : Text[100];VAR Country@1240030006 : Code[100];AddressCaption@1240030005 : Text[100];Address2Caption@1240030004 : Text[100];CityCaption@1240030003 : Text[100];PostCodeCaption@1240030002 : Text[100];StateCaption@1240030001 : Text[100];CountryCaption@1240030000 : Text[100]);
    VAR
      TempText@1240030013 : Text[100];
      LongAddressType@1240030015 : Integer;
    BEGIN
      LongAddressType := NameAndAddressMgt.GetLongAddressType(ShippingAgent,FromType);

      NameAndAddressMgt.CheckCorrectTextLen(Address,LongAddressType,35,AddressCaption);
      NameAndAddressMgt.CheckCorrectTextLen(Address2,LongAddressType,35,Address2Caption);
      NameAndAddressMgt.CheckCorrectTextLen(City,LongAddressType,30,CityCaption);
      TempText := PostCode;
      NameAndAddressMgt.CheckCorrectTextLen(TempText,LongAddressType,10,PostCodeCaption);
      PostCode := TempText;
      NameAndAddressMgt.CheckCorrectTextLen(State,LongAddressType,2,StateCaption);
    END;

    PROCEDURE CheckManifest@1240030510(CurrentManifestHeader@1240020000 : Record 14000712) : Boolean;
    VAR
      ShippingAgentAccount@1240020004 : Record 14050005;
      ManifestLine@1240020003 : Record 14000713;
      CarrierPackingStation@1240020005 : Record 14000729;
      Package@1240020008 : Record 14000701;
      PostedPackage@1240020009 : Record 14000704;
      DotNETAutomationMgmt@1240020007 : Codeunit 37031001;
      UPSlinkDotNet@1240020002 : Codeunit 14050008;
      Directory@1240020001 : Text[250];
    BEGIN
      WITH CurrentManifestHeader DO BEGIN
        GetUPSlinkSetup;
        GetPackingStation;
        CarrierPackingStation.GetPackingStation(PackingStation);

        IF CurrentManifestHeader."Pickup Date" < WORKDATE THEN
          IF NOT CONFIRM(
                 STRSUBSTNO(Text056,CurrentManifestHeader.FIELDCAPTION("Pickup Date"),WORKDATE))
          THEN
            ERROR(Text036);

        IF UPSlinkSetup.Demo THEN
          IF NOT CONFIRM(Text096,TRUE)THEN
            EXIT(FALSE);

        IF NOT(UPSlinkSetup.Commissioned) AND NOT(UPSlinkSetup.Demo) THEN
          ERROR(Text097,
            UPSlinkSetup.TABLECAPTION,UPSlinkSetup."Primary Account No.");

        IF CarrierPackingStation."UPS Shipping Agent Account No." <> "Shipping Agent Account" THEN
          ERROR(Text095,
            FIELDCAPTION("Shipping Agent Account"),
            "Shipping Agent Account",CarrierPackingStation.TABLECAPTION,CarrierPackingStation.Code,
            'USERID',USERID,PackingStation.TABLECAPTION,PackingStation.Code);

        IF CarrierPackingStation."UPS Manifest Upload Directory" = '' THEN
          ERROR(Text079,
            CarrierPackingStation.FIELDCAPTION("UPS Manifest Upload Directory"),
            CarrierPackingStation.TABLECAPTION,CarrierPackingStation.Code);

        Directory := CarrierPackingStation."UPS Manifest Upload Directory";
        IF COPYSTR(Directory,STRLEN(Directory),1) <> '\' THEN
          Directory := Directory + '\';

        CarrierPackingStation.TestDirectory(Directory,FALSE,TRUE,
          CarrierPackingStation.TABLECAPTION,
          CarrierPackingStation.Code,CarrierPackingStation.FIELDCAPTION("UPS Manifest Upload Directory"));

        CarrierPackingStation.TestDirectory(Directory,FALSE,FALSE,
          CarrierPackingStation.TABLECAPTION,
          CarrierPackingStation.Code,CarrierPackingStation.FIELDCAPTION("UPS Manifest Upload Directory"));

        IF PackingStation."No Label Printer" THEN
          IF CONFIRM(
               STRSUBSTNO(Text120,
                 PackingStation.TABLENAME,PackingStation.Code,
                 PackingStation.FIELDCAPTION("No Label Printer"),
                 PackingStation."No Label Printer")) THEN BEGIN
            PackingStation."No Label Printer" := FALSE;
            PackingStation.MODIFY(FALSE);
          END;

        IF NOT(PackingStation."No Label Printer") THEN BEGIN
          CarrierPackingStation.TestDirectory(CarrierPackingStation."UPS Buffer File",TRUE,FALSE,
            CarrierPackingStation.TABLECAPTION,
            CarrierPackingStation.Code,CarrierPackingStation.FIELDCAPTION("UPS Buffer File"));

          IF CarrierPackingStation."UPS Label Printer Port" = '' THEN
            ERROR(Text102,
              CarrierPackingStation.FIELDCAPTION("UPS Label Printer Port"),
              CarrierPackingStation.TABLECAPTION,CarrierPackingStation.Code);

          IF CarrierPackingStation."UPSlink Printer Model" = '' THEN
            ERROR(Text102,
              CarrierPackingStation.FIELDCAPTION("UPSlink Printer Model"),
              CarrierPackingStation.TABLECAPTION,CarrierPackingStation.Code);

          IF PackingStation."SHELL Command Type" =
             PackingStation."SHELL Command Type"::".NET Automation"
          THEN
            IF NOT DotNETAutomationMgmt.CheckInstallNoError() THEN
              IF CONFIRM(Text119) THEN BEGIN
                PackingStation."No Label Printer" := TRUE;
                PackingStation.MODIFY(FALSE);
              END;

          DotNETAutomationMgmt.CheckIfPort(CarrierPackingStation."UPS Label Printer Port");
          IF PackingStation."Label Printing" = PackingStation."Label Printing"::"Printer Name" THEN
            DotNETAutomationMgmt.GetPrinterName(CarrierPackingStation."UPS Label Printer Port");
        END;

        IF ((UPSlinkSetup."Mailbox ID" = 'DEMOMAILBOXID') AND NOT(UPSlinkSetup.Demo)) THEN
          ERROR(Text005,
            UPSlinkSetup."Mailbox ID",UPSlinkSetup.FIELDCAPTION("Mailbox ID"));

        IF UPSlinkSetup."Mailbox ID" = '' THEN
          ERROR(Text102,
            UPSlinkSetup.FIELDCAPTION("Mailbox ID"),UPSlinkSetup.TABLECAPTION,UPSlinkSetup."Primary Account No.");

        IF ShippingAgentAccount.GET(CurrentManifestHeader."Shipping Agent Account") THEN
          IF (ShippingAgentAccount."Book No." = '') OR (ShippingAgentAccount."Page No." = '') THEN
            ERROR(Text099,
              CurrentManifestHeader.FIELDCAPTION("Shipping Agent Account"),
              CurrentManifestHeader."Shipping Agent Account");

        IF NOT UPSlinkDotNet.TestUPSlinkCreatedNoError THEN
          ERROR(Text117);

        UPSlinkMgt.CheckUPSlinkCommConfig;

        ManifestLine.RESET;
        ManifestLine.SETRANGE("Manifest No.","No.");
        ManifestLine.SETFILTER("No.",'<>%1','');
        IF ManifestLine.FIND('-') THEN BEGIN
          REPEAT
            IF ManifestLine."External Tracking No." = '' THEN
              ERROR(Text100,
                ManifestLine."No.");

            Package.RESET;
            Package.SETRANGE(Package."No.",ManifestLine."No.");
            IF Package.FIND('-') THEN BEGIN
              REPEAT
                IF Package."Calculation Weight" <= 0 THEN
                  ERROR(Text101,
                    ManifestLine."No.");
              UNTIL Package.NEXT = 0;
            END;

            PostedPackage.RESET;
            PostedPackage.SETRANGE(PostedPackage."No.",ManifestLine."No.");
            IF PostedPackage.FIND('-') THEN BEGIN
              REPEAT
                IF PostedPackage."Calculation Weight" <= 0 THEN
                  ERROR(Text101,
                    ManifestLine."No.");
              UNTIL Package.NEXT = 0;
            END;
          UNTIL ManifestLine.NEXT = 0;
        END;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE DeleteExportSourceDoc@14050601(ExportSourceDoc@1240030000 : Record 14000982);
    VAR
      WEChild@1240030001 : Record 14050602;
    BEGIN
      WEChild.RESET;
      WEChild.SETCURRENTKEY("Export Document No.");
      WEChild.SETRANGE("Export Document No.",ExportSourceDoc."Export Document No.");
      IF WEChild.FIND('-') THEN
        IF ExportSourceDoc.ClosedPackagesExist OR
           ExportSourceDoc.PostedPackagesExist OR
           ExportSourceDoc.ClosedMiscPackagesExist OR
           ExportSourceDoc.PostedMiscPackagesExist
        THEN
          ERROR(
            Text14050601,
            ExportSourceDoc.FIELDCAPTION("Export Document No."),ExportSourceDoc."Export Document No.",
            ExportSourceDoc.TABLECAPTION,ExportSourceDoc."Source ID",
            WEChild.FIELDCAPTION("World Ease Master No."),WEChild."World Ease Master No.");
    END;

    PROCEDURE DeleteExportDoc@14050602(ExportDocNo@1240030000 : Code[20]);
    VAR
      WEChild@1240030001 : Record 14050602;
    BEGIN
      WEChild.RESET;
      WEChild.SETCURRENTKEY("Export Document No.");
      WEChild.SETRANGE("Export Document No.",ExportDocNo);
      IF WEChild.FIND('-') THEN
        WEChild.DELETEALL(TRUE);
    END;

    PROCEDURE PrintExportDocsOnCloseOrder@14050603(ExportDocNo@1240030000 : Code[20]) : Boolean;
    VAR
      WEChild@1240030001 : Record 14050602;
    BEGIN
      WEChild.RESET;
      WEChild.SETCURRENTKEY("Export Document No.");
      WEChild.SETRANGE("Export Document No.",ExportDocNo);
      EXIT(NOT WEChild.FIND('-'));
    END;

    PROCEDURE ShowWEMasterforChild@14050604(ExportDocNo@1240030000 : Code[20]);
    VAR
      WEChild@1240030001 : Record 14050602;
      WEMaster@1240030002 : Record 14050601;
    BEGIN
      WEChild.RESET;
      WEChild.SETCURRENTKEY("Export Document No.");
      WEChild.SETRANGE("Export Document No.",ExportDocNo);
      IF WEChild.FIND('-') THEN BEGIN
        WEMaster.GET(WEChild."World Ease Master No.");
        WEMaster.SETRECFILTER;
        IF WEMaster.Posted THEN
          PAGE.RUN(PAGE::"SE World Ease Posted Master",WEMaster)
        ELSE
          PAGE.RUN(PAGE::"SE World Ease Master",WEMaster);
      END ELSE
        ERROR(Text14050602,ExportDocNo);
    END;

    BEGIN
    END.
  }
}

